
APPS_WSN_DEMO_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d58  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005ac  20000070  00002dc8  00020070  2**2
                  ALLOC
  3 .stack        00002004  2000061c  00003374  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e66f  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043ec  00000000  00000000  0004e760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005073  00000000  00000000  00052b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005c8  00000000  00000000  00057bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000640  00000000  00000000  00058187  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019c19  00000000  00000000  000587c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e001  00000000  00000000  000723e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089f09  00000000  00000000  000803e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014c8  00000000  00000000  0010a2ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 26 00 20 35 16 00 00 31 16 00 00 31 16 00 00      &. 5...1...1...
	...
      2c:	31 16 00 00 00 00 00 00 00 00 00 00 31 16 00 00     1...........1...
      3c:	31 16 00 00 31 16 00 00 31 16 00 00 31 16 00 00     1...1...1...1...
      4c:	31 16 00 00 c5 02 00 00 31 16 00 00 31 16 00 00     1.......1...1...
      5c:	31 16 00 00 31 16 00 00 a5 07 00 00 b5 07 00 00     1...1...........
      6c:	c5 07 00 00 d5 07 00 00 e5 07 00 00 f5 07 00 00     ................
      7c:	31 16 00 00 31 16 00 00 31 16 00 00 01 16 00 00     1...1...1.......
      8c:	11 16 00 00 21 16 00 00 00 00 00 00 00 00 00 00     ....!...........
      9c:	31 16 00 00 31 16 00 00 00 00 00 00 31 16 00 00     1...1.......1...
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00002d58 	.word	0x00002d58

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00002d58 	.word	0x00002d58
     10c:	00002d58 	.word	0x00002d58
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000132d 	.word	0x0000132d
     140:	00001a89 	.word	0x00001a89
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	2000008c 	.word	0x2000008c
     1b8:	20000090 	.word	0x20000090
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	2000008c 	.word	0x2000008c
     1e8:	20000090 	.word	0x20000090
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:




void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	46c6      	mov	lr, r8
     1f4:	b500      	push	{lr}
     1f6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f8:	ac01      	add	r4, sp, #4
     1fa:	2601      	movs	r6, #1
     1fc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1fe:	2700      	movs	r7, #0
     200:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     202:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     204:	0021      	movs	r1, r4
     206:	2013      	movs	r0, #19
     208:	4d27      	ldr	r5, [pc, #156]	; (2a8 <system_board_init+0xb8>)
     20a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     20c:	4b27      	ldr	r3, [pc, #156]	; (2ac <system_board_init+0xbc>)
     20e:	4698      	mov	r8, r3
     210:	2380      	movs	r3, #128	; 0x80
     212:	031b      	lsls	r3, r3, #12
     214:	4642      	mov	r2, r8
     216:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     218:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     21a:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     21c:	0021      	movs	r1, r4
     21e:	201c      	movs	r0, #28
     220:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     222:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     224:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     226:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     228:	0021      	movs	r1, r4
     22a:	2052      	movs	r0, #82	; 0x52
     22c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     22e:	0021      	movs	r1, r4
     230:	203e      	movs	r0, #62	; 0x3e
     232:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     234:	0021      	movs	r1, r4
     236:	203f      	movs	r0, #63	; 0x3f
     238:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     23a:	0021      	movs	r1, r4
     23c:	202f      	movs	r0, #47	; 0x2f
     23e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     240:	0021      	movs	r1, r4
     242:	2014      	movs	r0, #20
     244:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     246:	2280      	movs	r2, #128	; 0x80
     248:	02d2      	lsls	r2, r2, #11
     24a:	4b19      	ldr	r3, [pc, #100]	; (2b0 <system_board_init+0xc0>)
     24c:	619a      	str	r2, [r3, #24]
     24e:	4b19      	ldr	r3, [pc, #100]	; (2b4 <system_board_init+0xc4>)
     250:	2280      	movs	r2, #128	; 0x80
     252:	05d2      	lsls	r2, r2, #23
     254:	619a      	str	r2, [r3, #24]
     256:	2280      	movs	r2, #128	; 0x80
     258:	0612      	lsls	r2, r2, #24
     25a:	619a      	str	r2, [r3, #24]
     25c:	2280      	movs	r2, #128	; 0x80
     25e:	0212      	lsls	r2, r2, #8
     260:	619a      	str	r2, [r3, #24]
     262:	2380      	movs	r3, #128	; 0x80
     264:	035b      	lsls	r3, r3, #13
     266:	4642      	mov	r2, r8
     268:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26a:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     26c:	0021      	movs	r1, r4
     26e:	2053      	movs	r0, #83	; 0x53
     270:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     272:	4a11      	ldr	r2, [pc, #68]	; (2b8 <system_board_init+0xc8>)
     274:	6a11      	ldr	r1, [r2, #32]
     276:	2380      	movs	r3, #128	; 0x80
     278:	039b      	lsls	r3, r3, #14
     27a:	430b      	orrs	r3, r1
     27c:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     27e:	2204      	movs	r2, #4
     280:	4b0e      	ldr	r3, [pc, #56]	; (2bc <system_board_init+0xcc>)
     282:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     284:	466b      	mov	r3, sp
     286:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     288:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     28a:	2305      	movs	r3, #5
     28c:	466a      	mov	r2, sp
     28e:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     290:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     292:	4669      	mov	r1, sp
     294:	2009      	movs	r0, #9
     296:	4c0a      	ldr	r4, [pc, #40]	; (2c0 <system_board_init+0xd0>)
     298:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     29a:	4669      	mov	r1, sp
     29c:	200c      	movs	r0, #12
     29e:	47a0      	blx	r4
#endif

}
     2a0:	b002      	add	sp, #8
     2a2:	bc04      	pop	{r2}
     2a4:	4690      	mov	r8, r2
     2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a8:	0000039d 	.word	0x0000039d
     2ac:	41004400 	.word	0x41004400
     2b0:	41004500 	.word	0x41004500
     2b4:	41004480 	.word	0x41004480
     2b8:	40000400 	.word	0x40000400
     2bc:	42005400 	.word	0x42005400
     2c0:	0000153d 	.word	0x0000153d

000002c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2c4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2c6:	2200      	movs	r2, #0
     2c8:	4b10      	ldr	r3, [pc, #64]	; (30c <EIC_Handler+0x48>)
     2ca:	701a      	strb	r2, [r3, #0]
     2cc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2ce:	4910      	ldr	r1, [pc, #64]	; (310 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2d0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2d2:	4e10      	ldr	r6, [pc, #64]	; (314 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2d4:	4c0d      	ldr	r4, [pc, #52]	; (30c <EIC_Handler+0x48>)
     2d6:	e00a      	b.n	2ee <EIC_Handler+0x2a>
		return eics[eic_index];
     2d8:	490d      	ldr	r1, [pc, #52]	; (310 <EIC_Handler+0x4c>)
     2da:	e008      	b.n	2ee <EIC_Handler+0x2a>
     2dc:	7823      	ldrb	r3, [r4, #0]
     2de:	3301      	adds	r3, #1
     2e0:	b2db      	uxtb	r3, r3
     2e2:	7023      	strb	r3, [r4, #0]
     2e4:	2b0f      	cmp	r3, #15
     2e6:	d810      	bhi.n	30a <EIC_Handler+0x46>
		return NULL;
     2e8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     2ea:	2b1f      	cmp	r3, #31
     2ec:	d9f4      	bls.n	2d8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     2ee:	0028      	movs	r0, r5
     2f0:	4018      	ands	r0, r3
     2f2:	2201      	movs	r2, #1
     2f4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     2f6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     2f8:	4210      	tst	r0, r2
     2fa:	d0ef      	beq.n	2dc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2fc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2fe:	009b      	lsls	r3, r3, #2
     300:	599b      	ldr	r3, [r3, r6]
     302:	2b00      	cmp	r3, #0
     304:	d0ea      	beq.n	2dc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     306:	4798      	blx	r3
     308:	e7e8      	b.n	2dc <EIC_Handler+0x18>
			}
		}
	}
}
     30a:	bd70      	pop	{r4, r5, r6, pc}
     30c:	200001a8 	.word	0x200001a8
     310:	40001800 	.word	0x40001800
     314:	200001ac 	.word	0x200001ac

00000318 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     318:	4a04      	ldr	r2, [pc, #16]	; (32c <_extint_enable+0x14>)
     31a:	7813      	ldrb	r3, [r2, #0]
     31c:	2102      	movs	r1, #2
     31e:	430b      	orrs	r3, r1
     320:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     322:	7853      	ldrb	r3, [r2, #1]
     324:	b25b      	sxtb	r3, r3
     326:	2b00      	cmp	r3, #0
     328:	dbfb      	blt.n	322 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     32a:	4770      	bx	lr
     32c:	40001800 	.word	0x40001800

00000330 <_system_extint_init>:
{
     330:	b500      	push	{lr}
     332:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     334:	4a12      	ldr	r2, [pc, #72]	; (380 <_system_extint_init+0x50>)
     336:	6993      	ldr	r3, [r2, #24]
     338:	2140      	movs	r1, #64	; 0x40
     33a:	430b      	orrs	r3, r1
     33c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     33e:	a901      	add	r1, sp, #4
     340:	2300      	movs	r3, #0
     342:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     344:	2005      	movs	r0, #5
     346:	4b0f      	ldr	r3, [pc, #60]	; (384 <_system_extint_init+0x54>)
     348:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     34a:	2005      	movs	r0, #5
     34c:	4b0e      	ldr	r3, [pc, #56]	; (388 <_system_extint_init+0x58>)
     34e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     350:	4a0e      	ldr	r2, [pc, #56]	; (38c <_system_extint_init+0x5c>)
     352:	7813      	ldrb	r3, [r2, #0]
     354:	2101      	movs	r1, #1
     356:	430b      	orrs	r3, r1
     358:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     35a:	7853      	ldrb	r3, [r2, #1]
     35c:	b25b      	sxtb	r3, r3
     35e:	2b00      	cmp	r3, #0
     360:	dbfb      	blt.n	35a <_system_extint_init+0x2a>
     362:	4b0b      	ldr	r3, [pc, #44]	; (390 <_system_extint_init+0x60>)
     364:	0019      	movs	r1, r3
     366:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     368:	2200      	movs	r2, #0
     36a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     36c:	4299      	cmp	r1, r3
     36e:	d1fc      	bne.n	36a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     370:	2210      	movs	r2, #16
     372:	4b08      	ldr	r3, [pc, #32]	; (394 <_system_extint_init+0x64>)
     374:	601a      	str	r2, [r3, #0]
	_extint_enable();
     376:	4b08      	ldr	r3, [pc, #32]	; (398 <_system_extint_init+0x68>)
     378:	4798      	blx	r3
}
     37a:	b003      	add	sp, #12
     37c:	bd00      	pop	{pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	40000400 	.word	0x40000400
     384:	00001445 	.word	0x00001445
     388:	000013b9 	.word	0x000013b9
     38c:	40001800 	.word	0x40001800
     390:	200001ac 	.word	0x200001ac
     394:	e000e100 	.word	0xe000e100
     398:	00000319 	.word	0x00000319

0000039c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     39c:	b500      	push	{lr}
     39e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3a0:	ab01      	add	r3, sp, #4
     3a2:	2280      	movs	r2, #128	; 0x80
     3a4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3a6:	780a      	ldrb	r2, [r1, #0]
     3a8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3aa:	784a      	ldrb	r2, [r1, #1]
     3ac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3ae:	788a      	ldrb	r2, [r1, #2]
     3b0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3b2:	0019      	movs	r1, r3
     3b4:	4b01      	ldr	r3, [pc, #4]	; (3bc <port_pin_set_config+0x20>)
     3b6:	4798      	blx	r3
}
     3b8:	b003      	add	sp, #12
     3ba:	bd00      	pop	{pc}
     3bc:	0000153d 	.word	0x0000153d

000003c0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3c2:	46de      	mov	lr, fp
     3c4:	4657      	mov	r7, sl
     3c6:	464e      	mov	r6, r9
     3c8:	4645      	mov	r5, r8
     3ca:	b5e0      	push	{r5, r6, r7, lr}
     3cc:	b087      	sub	sp, #28
     3ce:	4680      	mov	r8, r0
     3d0:	9104      	str	r1, [sp, #16]
     3d2:	0016      	movs	r6, r2
     3d4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     3d6:	2200      	movs	r2, #0
     3d8:	2300      	movs	r3, #0
     3da:	2100      	movs	r1, #0
     3dc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     3de:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     3e0:	2001      	movs	r0, #1
     3e2:	0021      	movs	r1, r4
     3e4:	9600      	str	r6, [sp, #0]
     3e6:	9701      	str	r7, [sp, #4]
     3e8:	465c      	mov	r4, fp
     3ea:	9403      	str	r4, [sp, #12]
     3ec:	4644      	mov	r4, r8
     3ee:	9405      	str	r4, [sp, #20]
     3f0:	e013      	b.n	41a <long_division+0x5a>
     3f2:	2420      	movs	r4, #32
     3f4:	1a64      	subs	r4, r4, r1
     3f6:	0005      	movs	r5, r0
     3f8:	40e5      	lsrs	r5, r4
     3fa:	46a8      	mov	r8, r5
     3fc:	e014      	b.n	428 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     3fe:	9c00      	ldr	r4, [sp, #0]
     400:	9d01      	ldr	r5, [sp, #4]
     402:	1b12      	subs	r2, r2, r4
     404:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     406:	465c      	mov	r4, fp
     408:	464d      	mov	r5, r9
     40a:	432c      	orrs	r4, r5
     40c:	46a3      	mov	fp, r4
     40e:	9c03      	ldr	r4, [sp, #12]
     410:	4645      	mov	r5, r8
     412:	432c      	orrs	r4, r5
     414:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     416:	3901      	subs	r1, #1
     418:	d325      	bcc.n	466 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     41a:	2420      	movs	r4, #32
     41c:	4264      	negs	r4, r4
     41e:	190c      	adds	r4, r1, r4
     420:	d4e7      	bmi.n	3f2 <long_division+0x32>
     422:	0005      	movs	r5, r0
     424:	40a5      	lsls	r5, r4
     426:	46a8      	mov	r8, r5
     428:	0004      	movs	r4, r0
     42a:	408c      	lsls	r4, r1
     42c:	46a1      	mov	r9, r4
		r = r << 1;
     42e:	1892      	adds	r2, r2, r2
     430:	415b      	adcs	r3, r3
     432:	0014      	movs	r4, r2
     434:	001d      	movs	r5, r3
		if (n & bit_shift) {
     436:	9e05      	ldr	r6, [sp, #20]
     438:	464f      	mov	r7, r9
     43a:	403e      	ands	r6, r7
     43c:	46b4      	mov	ip, r6
     43e:	9e04      	ldr	r6, [sp, #16]
     440:	4647      	mov	r7, r8
     442:	403e      	ands	r6, r7
     444:	46b2      	mov	sl, r6
     446:	4666      	mov	r6, ip
     448:	4657      	mov	r7, sl
     44a:	433e      	orrs	r6, r7
     44c:	d003      	beq.n	456 <long_division+0x96>
			r |= 0x01;
     44e:	0006      	movs	r6, r0
     450:	4326      	orrs	r6, r4
     452:	0032      	movs	r2, r6
     454:	002b      	movs	r3, r5
		if (r >= d) {
     456:	9c00      	ldr	r4, [sp, #0]
     458:	9d01      	ldr	r5, [sp, #4]
     45a:	429d      	cmp	r5, r3
     45c:	d8db      	bhi.n	416 <long_division+0x56>
     45e:	d1ce      	bne.n	3fe <long_division+0x3e>
     460:	4294      	cmp	r4, r2
     462:	d8d8      	bhi.n	416 <long_division+0x56>
     464:	e7cb      	b.n	3fe <long_division+0x3e>
     466:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     468:	4658      	mov	r0, fp
     46a:	0019      	movs	r1, r3
     46c:	b007      	add	sp, #28
     46e:	bc3c      	pop	{r2, r3, r4, r5}
     470:	4690      	mov	r8, r2
     472:	4699      	mov	r9, r3
     474:	46a2      	mov	sl, r4
     476:	46ab      	mov	fp, r5
     478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000047a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     47a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     47c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     47e:	2340      	movs	r3, #64	; 0x40
     480:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     482:	4281      	cmp	r1, r0
     484:	d202      	bcs.n	48c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     486:	0018      	movs	r0, r3
     488:	bd10      	pop	{r4, pc}
		baud_calculated++;
     48a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     48c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     48e:	1c63      	adds	r3, r4, #1
     490:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     492:	4288      	cmp	r0, r1
     494:	d9f9      	bls.n	48a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     496:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     498:	2cff      	cmp	r4, #255	; 0xff
     49a:	d8f4      	bhi.n	486 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     49c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     49e:	2300      	movs	r3, #0
     4a0:	e7f1      	b.n	486 <_sercom_get_sync_baud_val+0xc>
	...

000004a4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4a6:	b083      	sub	sp, #12
     4a8:	000f      	movs	r7, r1
     4aa:	0016      	movs	r6, r2
     4ac:	aa08      	add	r2, sp, #32
     4ae:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4b0:	0004      	movs	r4, r0
     4b2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4b4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     4b6:	42bc      	cmp	r4, r7
     4b8:	d902      	bls.n	4c0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     4ba:	0010      	movs	r0, r2
     4bc:	b003      	add	sp, #12
     4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     4c0:	2b00      	cmp	r3, #0
     4c2:	d114      	bne.n	4ee <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     4c4:	0002      	movs	r2, r0
     4c6:	0008      	movs	r0, r1
     4c8:	2100      	movs	r1, #0
     4ca:	4c19      	ldr	r4, [pc, #100]	; (530 <_sercom_get_async_baud_val+0x8c>)
     4cc:	47a0      	blx	r4
     4ce:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     4d0:	003a      	movs	r2, r7
     4d2:	2300      	movs	r3, #0
     4d4:	2000      	movs	r0, #0
     4d6:	4c17      	ldr	r4, [pc, #92]	; (534 <_sercom_get_async_baud_val+0x90>)
     4d8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     4da:	2200      	movs	r2, #0
     4dc:	2301      	movs	r3, #1
     4de:	1a12      	subs	r2, r2, r0
     4e0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     4e2:	0c12      	lsrs	r2, r2, #16
     4e4:	041b      	lsls	r3, r3, #16
     4e6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     4e8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     4ea:	2200      	movs	r2, #0
     4ec:	e7e5      	b.n	4ba <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     4ee:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     4f0:	2b01      	cmp	r3, #1
     4f2:	d1f9      	bne.n	4e8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     4f4:	000a      	movs	r2, r1
     4f6:	2300      	movs	r3, #0
     4f8:	2100      	movs	r1, #0
     4fa:	4c0d      	ldr	r4, [pc, #52]	; (530 <_sercom_get_async_baud_val+0x8c>)
     4fc:	47a0      	blx	r4
     4fe:	0002      	movs	r2, r0
     500:	000b      	movs	r3, r1
     502:	9200      	str	r2, [sp, #0]
     504:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     506:	0038      	movs	r0, r7
     508:	2100      	movs	r1, #0
     50a:	4c0a      	ldr	r4, [pc, #40]	; (534 <_sercom_get_async_baud_val+0x90>)
     50c:	47a0      	blx	r4
     50e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     510:	2380      	movs	r3, #128	; 0x80
     512:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     514:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     516:	4298      	cmp	r0, r3
     518:	d8cf      	bhi.n	4ba <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     51a:	0f79      	lsrs	r1, r7, #29
     51c:	00f8      	lsls	r0, r7, #3
     51e:	9a00      	ldr	r2, [sp, #0]
     520:	9b01      	ldr	r3, [sp, #4]
     522:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     524:	00ea      	lsls	r2, r5, #3
     526:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     528:	b2d2      	uxtb	r2, r2
     52a:	0352      	lsls	r2, r2, #13
     52c:	432a      	orrs	r2, r5
     52e:	e7db      	b.n	4e8 <_sercom_get_async_baud_val+0x44>
     530:	00001ba1 	.word	0x00001ba1
     534:	000003c1 	.word	0x000003c1

00000538 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     538:	b510      	push	{r4, lr}
     53a:	b082      	sub	sp, #8
     53c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     53e:	4b0e      	ldr	r3, [pc, #56]	; (578 <sercom_set_gclk_generator+0x40>)
     540:	781b      	ldrb	r3, [r3, #0]
     542:	2b00      	cmp	r3, #0
     544:	d007      	beq.n	556 <sercom_set_gclk_generator+0x1e>
     546:	2900      	cmp	r1, #0
     548:	d105      	bne.n	556 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     54a:	4b0b      	ldr	r3, [pc, #44]	; (578 <sercom_set_gclk_generator+0x40>)
     54c:	785b      	ldrb	r3, [r3, #1]
     54e:	4283      	cmp	r3, r0
     550:	d010      	beq.n	574 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     552:	201d      	movs	r0, #29
     554:	e00c      	b.n	570 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     556:	a901      	add	r1, sp, #4
     558:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     55a:	2013      	movs	r0, #19
     55c:	4b07      	ldr	r3, [pc, #28]	; (57c <sercom_set_gclk_generator+0x44>)
     55e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     560:	2013      	movs	r0, #19
     562:	4b07      	ldr	r3, [pc, #28]	; (580 <sercom_set_gclk_generator+0x48>)
     564:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <sercom_set_gclk_generator+0x40>)
     568:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     56a:	2201      	movs	r2, #1
     56c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     56e:	2000      	movs	r0, #0
}
     570:	b002      	add	sp, #8
     572:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     574:	2000      	movs	r0, #0
     576:	e7fb      	b.n	570 <sercom_set_gclk_generator+0x38>
     578:	20000094 	.word	0x20000094
     57c:	00001445 	.word	0x00001445
     580:	000013b9 	.word	0x000013b9

00000584 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     584:	4b40      	ldr	r3, [pc, #256]	; (688 <_sercom_get_default_pad+0x104>)
     586:	4298      	cmp	r0, r3
     588:	d031      	beq.n	5ee <_sercom_get_default_pad+0x6a>
     58a:	d90a      	bls.n	5a2 <_sercom_get_default_pad+0x1e>
     58c:	4b3f      	ldr	r3, [pc, #252]	; (68c <_sercom_get_default_pad+0x108>)
     58e:	4298      	cmp	r0, r3
     590:	d04d      	beq.n	62e <_sercom_get_default_pad+0xaa>
     592:	4b3f      	ldr	r3, [pc, #252]	; (690 <_sercom_get_default_pad+0x10c>)
     594:	4298      	cmp	r0, r3
     596:	d05a      	beq.n	64e <_sercom_get_default_pad+0xca>
     598:	4b3e      	ldr	r3, [pc, #248]	; (694 <_sercom_get_default_pad+0x110>)
     59a:	4298      	cmp	r0, r3
     59c:	d037      	beq.n	60e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     59e:	2000      	movs	r0, #0
}
     5a0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     5a2:	4b3d      	ldr	r3, [pc, #244]	; (698 <_sercom_get_default_pad+0x114>)
     5a4:	4298      	cmp	r0, r3
     5a6:	d00c      	beq.n	5c2 <_sercom_get_default_pad+0x3e>
     5a8:	4b3c      	ldr	r3, [pc, #240]	; (69c <_sercom_get_default_pad+0x118>)
     5aa:	4298      	cmp	r0, r3
     5ac:	d1f7      	bne.n	59e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ae:	2901      	cmp	r1, #1
     5b0:	d017      	beq.n	5e2 <_sercom_get_default_pad+0x5e>
     5b2:	2900      	cmp	r1, #0
     5b4:	d05d      	beq.n	672 <_sercom_get_default_pad+0xee>
     5b6:	2902      	cmp	r1, #2
     5b8:	d015      	beq.n	5e6 <_sercom_get_default_pad+0x62>
     5ba:	2903      	cmp	r1, #3
     5bc:	d015      	beq.n	5ea <_sercom_get_default_pad+0x66>
	return 0;
     5be:	2000      	movs	r0, #0
     5c0:	e7ee      	b.n	5a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5c2:	2901      	cmp	r1, #1
     5c4:	d007      	beq.n	5d6 <_sercom_get_default_pad+0x52>
     5c6:	2900      	cmp	r1, #0
     5c8:	d051      	beq.n	66e <_sercom_get_default_pad+0xea>
     5ca:	2902      	cmp	r1, #2
     5cc:	d005      	beq.n	5da <_sercom_get_default_pad+0x56>
     5ce:	2903      	cmp	r1, #3
     5d0:	d005      	beq.n	5de <_sercom_get_default_pad+0x5a>
	return 0;
     5d2:	2000      	movs	r0, #0
     5d4:	e7e4      	b.n	5a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5d6:	4832      	ldr	r0, [pc, #200]	; (6a0 <_sercom_get_default_pad+0x11c>)
     5d8:	e7e2      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     5da:	4832      	ldr	r0, [pc, #200]	; (6a4 <_sercom_get_default_pad+0x120>)
     5dc:	e7e0      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     5de:	4832      	ldr	r0, [pc, #200]	; (6a8 <_sercom_get_default_pad+0x124>)
     5e0:	e7de      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     5e2:	4832      	ldr	r0, [pc, #200]	; (6ac <_sercom_get_default_pad+0x128>)
     5e4:	e7dc      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     5e6:	4832      	ldr	r0, [pc, #200]	; (6b0 <_sercom_get_default_pad+0x12c>)
     5e8:	e7da      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     5ea:	4832      	ldr	r0, [pc, #200]	; (6b4 <_sercom_get_default_pad+0x130>)
     5ec:	e7d8      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     5ee:	2901      	cmp	r1, #1
     5f0:	d007      	beq.n	602 <_sercom_get_default_pad+0x7e>
     5f2:	2900      	cmp	r1, #0
     5f4:	d03f      	beq.n	676 <_sercom_get_default_pad+0xf2>
     5f6:	2902      	cmp	r1, #2
     5f8:	d005      	beq.n	606 <_sercom_get_default_pad+0x82>
     5fa:	2903      	cmp	r1, #3
     5fc:	d005      	beq.n	60a <_sercom_get_default_pad+0x86>
	return 0;
     5fe:	2000      	movs	r0, #0
     600:	e7ce      	b.n	5a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     602:	482d      	ldr	r0, [pc, #180]	; (6b8 <_sercom_get_default_pad+0x134>)
     604:	e7cc      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     606:	482d      	ldr	r0, [pc, #180]	; (6bc <_sercom_get_default_pad+0x138>)
     608:	e7ca      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     60a:	482d      	ldr	r0, [pc, #180]	; (6c0 <_sercom_get_default_pad+0x13c>)
     60c:	e7c8      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     60e:	2901      	cmp	r1, #1
     610:	d007      	beq.n	622 <_sercom_get_default_pad+0x9e>
     612:	2900      	cmp	r1, #0
     614:	d031      	beq.n	67a <_sercom_get_default_pad+0xf6>
     616:	2902      	cmp	r1, #2
     618:	d005      	beq.n	626 <_sercom_get_default_pad+0xa2>
     61a:	2903      	cmp	r1, #3
     61c:	d005      	beq.n	62a <_sercom_get_default_pad+0xa6>
	return 0;
     61e:	2000      	movs	r0, #0
     620:	e7be      	b.n	5a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     622:	4828      	ldr	r0, [pc, #160]	; (6c4 <_sercom_get_default_pad+0x140>)
     624:	e7bc      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     626:	4828      	ldr	r0, [pc, #160]	; (6c8 <_sercom_get_default_pad+0x144>)
     628:	e7ba      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     62a:	4828      	ldr	r0, [pc, #160]	; (6cc <_sercom_get_default_pad+0x148>)
     62c:	e7b8      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     62e:	2901      	cmp	r1, #1
     630:	d007      	beq.n	642 <_sercom_get_default_pad+0xbe>
     632:	2900      	cmp	r1, #0
     634:	d023      	beq.n	67e <_sercom_get_default_pad+0xfa>
     636:	2902      	cmp	r1, #2
     638:	d005      	beq.n	646 <_sercom_get_default_pad+0xc2>
     63a:	2903      	cmp	r1, #3
     63c:	d005      	beq.n	64a <_sercom_get_default_pad+0xc6>
	return 0;
     63e:	2000      	movs	r0, #0
     640:	e7ae      	b.n	5a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     642:	4823      	ldr	r0, [pc, #140]	; (6d0 <_sercom_get_default_pad+0x14c>)
     644:	e7ac      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     646:	4823      	ldr	r0, [pc, #140]	; (6d4 <_sercom_get_default_pad+0x150>)
     648:	e7aa      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     64a:	4823      	ldr	r0, [pc, #140]	; (6d8 <_sercom_get_default_pad+0x154>)
     64c:	e7a8      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     64e:	2901      	cmp	r1, #1
     650:	d007      	beq.n	662 <_sercom_get_default_pad+0xde>
     652:	2900      	cmp	r1, #0
     654:	d015      	beq.n	682 <_sercom_get_default_pad+0xfe>
     656:	2902      	cmp	r1, #2
     658:	d005      	beq.n	666 <_sercom_get_default_pad+0xe2>
     65a:	2903      	cmp	r1, #3
     65c:	d005      	beq.n	66a <_sercom_get_default_pad+0xe6>
	return 0;
     65e:	2000      	movs	r0, #0
     660:	e79e      	b.n	5a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     662:	481e      	ldr	r0, [pc, #120]	; (6dc <_sercom_get_default_pad+0x158>)
     664:	e79c      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     666:	481e      	ldr	r0, [pc, #120]	; (6e0 <_sercom_get_default_pad+0x15c>)
     668:	e79a      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     66a:	481e      	ldr	r0, [pc, #120]	; (6e4 <_sercom_get_default_pad+0x160>)
     66c:	e798      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     66e:	481e      	ldr	r0, [pc, #120]	; (6e8 <_sercom_get_default_pad+0x164>)
     670:	e796      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     672:	2003      	movs	r0, #3
     674:	e794      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     676:	481d      	ldr	r0, [pc, #116]	; (6ec <_sercom_get_default_pad+0x168>)
     678:	e792      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     67a:	481d      	ldr	r0, [pc, #116]	; (6f0 <_sercom_get_default_pad+0x16c>)
     67c:	e790      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     67e:	481d      	ldr	r0, [pc, #116]	; (6f4 <_sercom_get_default_pad+0x170>)
     680:	e78e      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     682:	481d      	ldr	r0, [pc, #116]	; (6f8 <_sercom_get_default_pad+0x174>)
     684:	e78c      	b.n	5a0 <_sercom_get_default_pad+0x1c>
     686:	46c0      	nop			; (mov r8, r8)
     688:	42001000 	.word	0x42001000
     68c:	42001800 	.word	0x42001800
     690:	42001c00 	.word	0x42001c00
     694:	42001400 	.word	0x42001400
     698:	42000800 	.word	0x42000800
     69c:	42000c00 	.word	0x42000c00
     6a0:	00050003 	.word	0x00050003
     6a4:	00060003 	.word	0x00060003
     6a8:	00070003 	.word	0x00070003
     6ac:	00010003 	.word	0x00010003
     6b0:	001e0003 	.word	0x001e0003
     6b4:	001f0003 	.word	0x001f0003
     6b8:	000d0002 	.word	0x000d0002
     6bc:	000e0002 	.word	0x000e0002
     6c0:	000f0002 	.word	0x000f0002
     6c4:	00110003 	.word	0x00110003
     6c8:	00120003 	.word	0x00120003
     6cc:	00130003 	.word	0x00130003
     6d0:	003f0005 	.word	0x003f0005
     6d4:	003e0005 	.word	0x003e0005
     6d8:	00520005 	.word	0x00520005
     6dc:	00170003 	.word	0x00170003
     6e0:	00180003 	.word	0x00180003
     6e4:	00190003 	.word	0x00190003
     6e8:	00040003 	.word	0x00040003
     6ec:	000c0002 	.word	0x000c0002
     6f0:	00100003 	.word	0x00100003
     6f4:	00530005 	.word	0x00530005
     6f8:	00160003 	.word	0x00160003

000006fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6fc:	b530      	push	{r4, r5, lr}
     6fe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     700:	4b0b      	ldr	r3, [pc, #44]	; (730 <_sercom_get_sercom_inst_index+0x34>)
     702:	466a      	mov	r2, sp
     704:	cb32      	ldmia	r3!, {r1, r4, r5}
     706:	c232      	stmia	r2!, {r1, r4, r5}
     708:	cb32      	ldmia	r3!, {r1, r4, r5}
     70a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     70c:	9b00      	ldr	r3, [sp, #0]
     70e:	4283      	cmp	r3, r0
     710:	d00b      	beq.n	72a <_sercom_get_sercom_inst_index+0x2e>
     712:	2301      	movs	r3, #1
     714:	009a      	lsls	r2, r3, #2
     716:	4669      	mov	r1, sp
     718:	5852      	ldr	r2, [r2, r1]
     71a:	4282      	cmp	r2, r0
     71c:	d006      	beq.n	72c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     71e:	3301      	adds	r3, #1
     720:	2b06      	cmp	r3, #6
     722:	d1f7      	bne.n	714 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     724:	2000      	movs	r0, #0
}
     726:	b007      	add	sp, #28
     728:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     72a:	2300      	movs	r3, #0
			return i;
     72c:	b2d8      	uxtb	r0, r3
     72e:	e7fa      	b.n	726 <_sercom_get_sercom_inst_index+0x2a>
     730:	00002c30 	.word	0x00002c30

00000734 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     734:	4770      	bx	lr
	...

00000738 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     738:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     73a:	4b0a      	ldr	r3, [pc, #40]	; (764 <_sercom_set_handler+0x2c>)
     73c:	781b      	ldrb	r3, [r3, #0]
     73e:	2b00      	cmp	r3, #0
     740:	d10c      	bne.n	75c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     742:	4f09      	ldr	r7, [pc, #36]	; (768 <_sercom_set_handler+0x30>)
     744:	4e09      	ldr	r6, [pc, #36]	; (76c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     746:	4d0a      	ldr	r5, [pc, #40]	; (770 <_sercom_set_handler+0x38>)
     748:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     74a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     74c:	195a      	adds	r2, r3, r5
     74e:	6014      	str	r4, [r2, #0]
     750:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     752:	2b18      	cmp	r3, #24
     754:	d1f9      	bne.n	74a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     756:	2201      	movs	r2, #1
     758:	4b02      	ldr	r3, [pc, #8]	; (764 <_sercom_set_handler+0x2c>)
     75a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     75c:	0080      	lsls	r0, r0, #2
     75e:	4b02      	ldr	r3, [pc, #8]	; (768 <_sercom_set_handler+0x30>)
     760:	50c1      	str	r1, [r0, r3]
}
     762:	bdf0      	pop	{r4, r5, r6, r7, pc}
     764:	20000096 	.word	0x20000096
     768:	20000098 	.word	0x20000098
     76c:	00000735 	.word	0x00000735
     770:	200001ec 	.word	0x200001ec

00000774 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     774:	b500      	push	{lr}
     776:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     778:	2309      	movs	r3, #9
     77a:	466a      	mov	r2, sp
     77c:	7013      	strb	r3, [r2, #0]
     77e:	3301      	adds	r3, #1
     780:	7053      	strb	r3, [r2, #1]
     782:	3301      	adds	r3, #1
     784:	7093      	strb	r3, [r2, #2]
     786:	3301      	adds	r3, #1
     788:	70d3      	strb	r3, [r2, #3]
     78a:	3301      	adds	r3, #1
     78c:	7113      	strb	r3, [r2, #4]
     78e:	3301      	adds	r3, #1
     790:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     792:	4b03      	ldr	r3, [pc, #12]	; (7a0 <_sercom_get_interrupt_vector+0x2c>)
     794:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     796:	466b      	mov	r3, sp
     798:	5618      	ldrsb	r0, [r3, r0]
}
     79a:	b003      	add	sp, #12
     79c:	bd00      	pop	{pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	000006fd 	.word	0x000006fd

000007a4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     7a4:	b510      	push	{r4, lr}
     7a6:	4b02      	ldr	r3, [pc, #8]	; (7b0 <SERCOM0_Handler+0xc>)
     7a8:	681b      	ldr	r3, [r3, #0]
     7aa:	2000      	movs	r0, #0
     7ac:	4798      	blx	r3
     7ae:	bd10      	pop	{r4, pc}
     7b0:	20000098 	.word	0x20000098

000007b4 <SERCOM1_Handler>:
     7b4:	b510      	push	{r4, lr}
     7b6:	4b02      	ldr	r3, [pc, #8]	; (7c0 <SERCOM1_Handler+0xc>)
     7b8:	685b      	ldr	r3, [r3, #4]
     7ba:	2001      	movs	r0, #1
     7bc:	4798      	blx	r3
     7be:	bd10      	pop	{r4, pc}
     7c0:	20000098 	.word	0x20000098

000007c4 <SERCOM2_Handler>:
     7c4:	b510      	push	{r4, lr}
     7c6:	4b02      	ldr	r3, [pc, #8]	; (7d0 <SERCOM2_Handler+0xc>)
     7c8:	689b      	ldr	r3, [r3, #8]
     7ca:	2002      	movs	r0, #2
     7cc:	4798      	blx	r3
     7ce:	bd10      	pop	{r4, pc}
     7d0:	20000098 	.word	0x20000098

000007d4 <SERCOM3_Handler>:
     7d4:	b510      	push	{r4, lr}
     7d6:	4b02      	ldr	r3, [pc, #8]	; (7e0 <SERCOM3_Handler+0xc>)
     7d8:	68db      	ldr	r3, [r3, #12]
     7da:	2003      	movs	r0, #3
     7dc:	4798      	blx	r3
     7de:	bd10      	pop	{r4, pc}
     7e0:	20000098 	.word	0x20000098

000007e4 <SERCOM4_Handler>:
     7e4:	b510      	push	{r4, lr}
     7e6:	4b02      	ldr	r3, [pc, #8]	; (7f0 <SERCOM4_Handler+0xc>)
     7e8:	691b      	ldr	r3, [r3, #16]
     7ea:	2004      	movs	r0, #4
     7ec:	4798      	blx	r3
     7ee:	bd10      	pop	{r4, pc}
     7f0:	20000098 	.word	0x20000098

000007f4 <SERCOM5_Handler>:
     7f4:	b510      	push	{r4, lr}
     7f6:	4b02      	ldr	r3, [pc, #8]	; (800 <SERCOM5_Handler+0xc>)
     7f8:	695b      	ldr	r3, [r3, #20]
     7fa:	2005      	movs	r0, #5
     7fc:	4798      	blx	r3
     7fe:	bd10      	pop	{r4, pc}
     800:	20000098 	.word	0x20000098

00000804 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     804:	b5f0      	push	{r4, r5, r6, r7, lr}
     806:	46de      	mov	lr, fp
     808:	4657      	mov	r7, sl
     80a:	464e      	mov	r6, r9
     80c:	4645      	mov	r5, r8
     80e:	b5e0      	push	{r5, r6, r7, lr}
     810:	b091      	sub	sp, #68	; 0x44
     812:	0005      	movs	r5, r0
     814:	000c      	movs	r4, r1
     816:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     818:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     81a:	0008      	movs	r0, r1
     81c:	4bbc      	ldr	r3, [pc, #752]	; (b10 <usart_init+0x30c>)
     81e:	4798      	blx	r3
     820:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     822:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     824:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     826:	07db      	lsls	r3, r3, #31
     828:	d506      	bpl.n	838 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     82a:	b011      	add	sp, #68	; 0x44
     82c:	bc3c      	pop	{r2, r3, r4, r5}
     82e:	4690      	mov	r8, r2
     830:	4699      	mov	r9, r3
     832:	46a2      	mov	sl, r4
     834:	46ab      	mov	fp, r5
     836:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     838:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     83a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     83c:	079b      	lsls	r3, r3, #30
     83e:	d4f4      	bmi.n	82a <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     840:	49b4      	ldr	r1, [pc, #720]	; (b14 <usart_init+0x310>)
     842:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     844:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     846:	2301      	movs	r3, #1
     848:	40bb      	lsls	r3, r7
     84a:	4303      	orrs	r3, r0
     84c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     84e:	a90f      	add	r1, sp, #60	; 0x3c
     850:	272d      	movs	r7, #45	; 0x2d
     852:	5df3      	ldrb	r3, [r6, r7]
     854:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     856:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     858:	b2d3      	uxtb	r3, r2
     85a:	9302      	str	r3, [sp, #8]
     85c:	0018      	movs	r0, r3
     85e:	4bae      	ldr	r3, [pc, #696]	; (b18 <usart_init+0x314>)
     860:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     862:	9802      	ldr	r0, [sp, #8]
     864:	4bad      	ldr	r3, [pc, #692]	; (b1c <usart_init+0x318>)
     866:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     868:	5df0      	ldrb	r0, [r6, r7]
     86a:	2100      	movs	r1, #0
     86c:	4bac      	ldr	r3, [pc, #688]	; (b20 <usart_init+0x31c>)
     86e:	4798      	blx	r3
	module->character_size = config->character_size;
     870:	7af3      	ldrb	r3, [r6, #11]
     872:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     874:	2324      	movs	r3, #36	; 0x24
     876:	5cf3      	ldrb	r3, [r6, r3]
     878:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     87a:	2325      	movs	r3, #37	; 0x25
     87c:	5cf3      	ldrb	r3, [r6, r3]
     87e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     880:	7ef3      	ldrb	r3, [r6, #27]
     882:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     884:	7f33      	ldrb	r3, [r6, #28]
     886:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     888:	682b      	ldr	r3, [r5, #0]
     88a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     88c:	0018      	movs	r0, r3
     88e:	4ba0      	ldr	r3, [pc, #640]	; (b10 <usart_init+0x30c>)
     890:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     892:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     894:	2200      	movs	r2, #0
     896:	230e      	movs	r3, #14
     898:	a906      	add	r1, sp, #24
     89a:	468c      	mov	ip, r1
     89c:	4463      	add	r3, ip
     89e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     8a0:	8a32      	ldrh	r2, [r6, #16]
     8a2:	9202      	str	r2, [sp, #8]
     8a4:	2380      	movs	r3, #128	; 0x80
     8a6:	01db      	lsls	r3, r3, #7
     8a8:	429a      	cmp	r2, r3
     8aa:	d100      	bne.n	8ae <usart_init+0xaa>
     8ac:	e09e      	b.n	9ec <usart_init+0x1e8>
     8ae:	d90f      	bls.n	8d0 <usart_init+0xcc>
     8b0:	23c0      	movs	r3, #192	; 0xc0
     8b2:	01db      	lsls	r3, r3, #7
     8b4:	9a02      	ldr	r2, [sp, #8]
     8b6:	429a      	cmp	r2, r3
     8b8:	d100      	bne.n	8bc <usart_init+0xb8>
     8ba:	e092      	b.n	9e2 <usart_init+0x1de>
     8bc:	2380      	movs	r3, #128	; 0x80
     8be:	021b      	lsls	r3, r3, #8
     8c0:	429a      	cmp	r2, r3
     8c2:	d000      	beq.n	8c6 <usart_init+0xc2>
     8c4:	e11f      	b.n	b06 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     8c6:	2303      	movs	r3, #3
     8c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8ca:	2300      	movs	r3, #0
     8cc:	9307      	str	r3, [sp, #28]
     8ce:	e008      	b.n	8e2 <usart_init+0xde>
	switch (config->sample_rate) {
     8d0:	2380      	movs	r3, #128	; 0x80
     8d2:	019b      	lsls	r3, r3, #6
     8d4:	429a      	cmp	r2, r3
     8d6:	d000      	beq.n	8da <usart_init+0xd6>
     8d8:	e115      	b.n	b06 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8da:	2310      	movs	r3, #16
     8dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8de:	3b0f      	subs	r3, #15
     8e0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     8e2:	6833      	ldr	r3, [r6, #0]
     8e4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     8e6:	68f3      	ldr	r3, [r6, #12]
     8e8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     8ea:	6973      	ldr	r3, [r6, #20]
     8ec:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8ee:	7e33      	ldrb	r3, [r6, #24]
     8f0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8f2:	2326      	movs	r3, #38	; 0x26
     8f4:	5cf3      	ldrb	r3, [r6, r3]
     8f6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     8f8:	6873      	ldr	r3, [r6, #4]
     8fa:	4699      	mov	r9, r3
	switch (transfer_mode)
     8fc:	2b00      	cmp	r3, #0
     8fe:	d100      	bne.n	902 <usart_init+0xfe>
     900:	e0a0      	b.n	a44 <usart_init+0x240>
     902:	2380      	movs	r3, #128	; 0x80
     904:	055b      	lsls	r3, r3, #21
     906:	4599      	cmp	r9, r3
     908:	d100      	bne.n	90c <usart_init+0x108>
     90a:	e084      	b.n	a16 <usart_init+0x212>
	if(config->encoding_format_enable) {
     90c:	7e73      	ldrb	r3, [r6, #25]
     90e:	2b00      	cmp	r3, #0
     910:	d002      	beq.n	918 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     912:	7eb3      	ldrb	r3, [r6, #26]
     914:	4642      	mov	r2, r8
     916:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     918:	682a      	ldr	r2, [r5, #0]
     91a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     91c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     91e:	2b00      	cmp	r3, #0
     920:	d1fc      	bne.n	91c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     922:	330e      	adds	r3, #14
     924:	aa06      	add	r2, sp, #24
     926:	4694      	mov	ip, r2
     928:	4463      	add	r3, ip
     92a:	881b      	ldrh	r3, [r3, #0]
     92c:	4642      	mov	r2, r8
     92e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     930:	9b05      	ldr	r3, [sp, #20]
     932:	9a03      	ldr	r2, [sp, #12]
     934:	4313      	orrs	r3, r2
     936:	9a04      	ldr	r2, [sp, #16]
     938:	4313      	orrs	r3, r2
     93a:	464a      	mov	r2, r9
     93c:	4313      	orrs	r3, r2
     93e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     940:	465b      	mov	r3, fp
     942:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     944:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     946:	4653      	mov	r3, sl
     948:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     94a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     94c:	2327      	movs	r3, #39	; 0x27
     94e:	5cf3      	ldrb	r3, [r6, r3]
     950:	2b00      	cmp	r3, #0
     952:	d101      	bne.n	958 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     954:	3304      	adds	r3, #4
     956:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     958:	7e73      	ldrb	r3, [r6, #25]
     95a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     95c:	7f32      	ldrb	r2, [r6, #28]
     95e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     960:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     962:	7f72      	ldrb	r2, [r6, #29]
     964:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     966:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     968:	2224      	movs	r2, #36	; 0x24
     96a:	5cb2      	ldrb	r2, [r6, r2]
     96c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     96e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     970:	2225      	movs	r2, #37	; 0x25
     972:	5cb2      	ldrb	r2, [r6, r2]
     974:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     976:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     978:	7ab1      	ldrb	r1, [r6, #10]
     97a:	7af2      	ldrb	r2, [r6, #11]
     97c:	4311      	orrs	r1, r2
     97e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     980:	8933      	ldrh	r3, [r6, #8]
     982:	2bff      	cmp	r3, #255	; 0xff
     984:	d100      	bne.n	988 <usart_init+0x184>
     986:	e081      	b.n	a8c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     988:	2280      	movs	r2, #128	; 0x80
     98a:	0452      	lsls	r2, r2, #17
     98c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     98e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     990:	232c      	movs	r3, #44	; 0x2c
     992:	5cf3      	ldrb	r3, [r6, r3]
     994:	2b00      	cmp	r3, #0
     996:	d103      	bne.n	9a0 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     998:	4b62      	ldr	r3, [pc, #392]	; (b24 <usart_init+0x320>)
     99a:	789b      	ldrb	r3, [r3, #2]
     99c:	079b      	lsls	r3, r3, #30
     99e:	d501      	bpl.n	9a4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9a0:	2380      	movs	r3, #128	; 0x80
     9a2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     9a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9a8:	2b00      	cmp	r3, #0
     9aa:	d1fc      	bne.n	9a6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     9ac:	4643      	mov	r3, r8
     9ae:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9b4:	2b00      	cmp	r3, #0
     9b6:	d1fc      	bne.n	9b2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     9b8:	4643      	mov	r3, r8
     9ba:	601f      	str	r7, [r3, #0]
     9bc:	ab0e      	add	r3, sp, #56	; 0x38
     9be:	2280      	movs	r2, #128	; 0x80
     9c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9c2:	2200      	movs	r2, #0
     9c4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     9c6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9c8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     9ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
     9cc:	930a      	str	r3, [sp, #40]	; 0x28
     9ce:	6b73      	ldr	r3, [r6, #52]	; 0x34
     9d0:	930b      	str	r3, [sp, #44]	; 0x2c
     9d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     9d4:	930c      	str	r3, [sp, #48]	; 0x30
     9d6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     9d8:	9302      	str	r3, [sp, #8]
     9da:	930d      	str	r3, [sp, #52]	; 0x34
     9dc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9de:	ae0a      	add	r6, sp, #40	; 0x28
     9e0:	e063      	b.n	aaa <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     9e2:	2308      	movs	r3, #8
     9e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     9e6:	3b07      	subs	r3, #7
     9e8:	9307      	str	r3, [sp, #28]
     9ea:	e77a      	b.n	8e2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     9ec:	6833      	ldr	r3, [r6, #0]
     9ee:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     9f0:	68f3      	ldr	r3, [r6, #12]
     9f2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     9f4:	6973      	ldr	r3, [r6, #20]
     9f6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9f8:	7e33      	ldrb	r3, [r6, #24]
     9fa:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9fc:	2326      	movs	r3, #38	; 0x26
     9fe:	5cf3      	ldrb	r3, [r6, r3]
     a00:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a02:	6873      	ldr	r3, [r6, #4]
     a04:	4699      	mov	r9, r3
	switch (transfer_mode)
     a06:	2b00      	cmp	r3, #0
     a08:	d018      	beq.n	a3c <usart_init+0x238>
     a0a:	2380      	movs	r3, #128	; 0x80
     a0c:	055b      	lsls	r3, r3, #21
     a0e:	4599      	cmp	r9, r3
     a10:	d001      	beq.n	a16 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     a12:	2000      	movs	r0, #0
     a14:	e025      	b.n	a62 <usart_init+0x25e>
			if (!config->use_external_clock) {
     a16:	2327      	movs	r3, #39	; 0x27
     a18:	5cf3      	ldrb	r3, [r6, r3]
     a1a:	2b00      	cmp	r3, #0
     a1c:	d000      	beq.n	a20 <usart_init+0x21c>
     a1e:	e775      	b.n	90c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a20:	6a33      	ldr	r3, [r6, #32]
     a22:	001f      	movs	r7, r3
     a24:	b2c0      	uxtb	r0, r0
     a26:	4b40      	ldr	r3, [pc, #256]	; (b28 <usart_init+0x324>)
     a28:	4798      	blx	r3
     a2a:	0001      	movs	r1, r0
     a2c:	220e      	movs	r2, #14
     a2e:	ab06      	add	r3, sp, #24
     a30:	469c      	mov	ip, r3
     a32:	4462      	add	r2, ip
     a34:	0038      	movs	r0, r7
     a36:	4b3d      	ldr	r3, [pc, #244]	; (b2c <usart_init+0x328>)
     a38:	4798      	blx	r3
     a3a:	e012      	b.n	a62 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a3c:	2308      	movs	r3, #8
     a3e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a40:	2300      	movs	r3, #0
     a42:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     a44:	2327      	movs	r3, #39	; 0x27
     a46:	5cf3      	ldrb	r3, [r6, r3]
     a48:	2b00      	cmp	r3, #0
     a4a:	d00e      	beq.n	a6a <usart_init+0x266>
				status_code =
     a4c:	9b06      	ldr	r3, [sp, #24]
     a4e:	9300      	str	r3, [sp, #0]
     a50:	9b07      	ldr	r3, [sp, #28]
     a52:	220e      	movs	r2, #14
     a54:	a906      	add	r1, sp, #24
     a56:	468c      	mov	ip, r1
     a58:	4462      	add	r2, ip
     a5a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     a5c:	6a30      	ldr	r0, [r6, #32]
     a5e:	4f34      	ldr	r7, [pc, #208]	; (b30 <usart_init+0x32c>)
     a60:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     a62:	2800      	cmp	r0, #0
     a64:	d000      	beq.n	a68 <usart_init+0x264>
     a66:	e6e0      	b.n	82a <usart_init+0x26>
     a68:	e750      	b.n	90c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     a6a:	6a33      	ldr	r3, [r6, #32]
     a6c:	001f      	movs	r7, r3
     a6e:	b2c0      	uxtb	r0, r0
     a70:	4b2d      	ldr	r3, [pc, #180]	; (b28 <usart_init+0x324>)
     a72:	4798      	blx	r3
     a74:	0001      	movs	r1, r0
				status_code =
     a76:	9b06      	ldr	r3, [sp, #24]
     a78:	9300      	str	r3, [sp, #0]
     a7a:	9b07      	ldr	r3, [sp, #28]
     a7c:	220e      	movs	r2, #14
     a7e:	a806      	add	r0, sp, #24
     a80:	4684      	mov	ip, r0
     a82:	4462      	add	r2, ip
     a84:	0038      	movs	r0, r7
     a86:	4f2a      	ldr	r7, [pc, #168]	; (b30 <usart_init+0x32c>)
     a88:	47b8      	blx	r7
     a8a:	e7ea      	b.n	a62 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     a8c:	7ef3      	ldrb	r3, [r6, #27]
     a8e:	2b00      	cmp	r3, #0
     a90:	d100      	bne.n	a94 <usart_init+0x290>
     a92:	e77d      	b.n	990 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     a94:	2380      	movs	r3, #128	; 0x80
     a96:	04db      	lsls	r3, r3, #19
     a98:	431f      	orrs	r7, r3
     a9a:	e779      	b.n	990 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a9c:	0020      	movs	r0, r4
     a9e:	4b25      	ldr	r3, [pc, #148]	; (b34 <usart_init+0x330>)
     aa0:	4798      	blx	r3
     aa2:	e007      	b.n	ab4 <usart_init+0x2b0>
     aa4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     aa6:	2f04      	cmp	r7, #4
     aa8:	d00d      	beq.n	ac6 <usart_init+0x2c2>
     aaa:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aac:	00bb      	lsls	r3, r7, #2
     aae:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     ab0:	2800      	cmp	r0, #0
     ab2:	d0f3      	beq.n	a9c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     ab4:	1c43      	adds	r3, r0, #1
     ab6:	d0f5      	beq.n	aa4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ab8:	a90e      	add	r1, sp, #56	; 0x38
     aba:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     abc:	0c00      	lsrs	r0, r0, #16
     abe:	b2c0      	uxtb	r0, r0
     ac0:	4b1d      	ldr	r3, [pc, #116]	; (b38 <usart_init+0x334>)
     ac2:	4798      	blx	r3
     ac4:	e7ee      	b.n	aa4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     ac6:	2300      	movs	r3, #0
     ac8:	60eb      	str	r3, [r5, #12]
     aca:	612b      	str	r3, [r5, #16]
     acc:	616b      	str	r3, [r5, #20]
     ace:	61ab      	str	r3, [r5, #24]
     ad0:	61eb      	str	r3, [r5, #28]
     ad2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     ad4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     ad6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     ad8:	2200      	movs	r2, #0
     ada:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     adc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     ade:	3330      	adds	r3, #48	; 0x30
     ae0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ae2:	3301      	adds	r3, #1
     ae4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ae6:	3301      	adds	r3, #1
     ae8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     aea:	3301      	adds	r3, #1
     aec:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     aee:	6828      	ldr	r0, [r5, #0]
     af0:	4b07      	ldr	r3, [pc, #28]	; (b10 <usart_init+0x30c>)
     af2:	4798      	blx	r3
     af4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     af6:	4911      	ldr	r1, [pc, #68]	; (b3c <usart_init+0x338>)
     af8:	4b11      	ldr	r3, [pc, #68]	; (b40 <usart_init+0x33c>)
     afa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     afc:	00a4      	lsls	r4, r4, #2
     afe:	4b11      	ldr	r3, [pc, #68]	; (b44 <usart_init+0x340>)
     b00:	50e5      	str	r5, [r4, r3]
	return status_code;
     b02:	2000      	movs	r0, #0
     b04:	e691      	b.n	82a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b06:	2310      	movs	r3, #16
     b08:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b0a:	2300      	movs	r3, #0
     b0c:	9307      	str	r3, [sp, #28]
     b0e:	e6e8      	b.n	8e2 <usart_init+0xde>
     b10:	000006fd 	.word	0x000006fd
     b14:	40000400 	.word	0x40000400
     b18:	00001445 	.word	0x00001445
     b1c:	000013b9 	.word	0x000013b9
     b20:	00000539 	.word	0x00000539
     b24:	41002000 	.word	0x41002000
     b28:	00001461 	.word	0x00001461
     b2c:	0000047b 	.word	0x0000047b
     b30:	000004a5 	.word	0x000004a5
     b34:	00000585 	.word	0x00000585
     b38:	0000153d 	.word	0x0000153d
     b3c:	00000c7d 	.word	0x00000c7d
     b40:	00000739 	.word	0x00000739
     b44:	200001ec 	.word	0x200001ec

00000b48 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b48:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     b4a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     b4c:	2a00      	cmp	r2, #0
     b4e:	d101      	bne.n	b54 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     b50:	0018      	movs	r0, r3
     b52:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     b54:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     b56:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b58:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     b5a:	2a00      	cmp	r2, #0
     b5c:	d1f8      	bne.n	b50 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b5e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     b60:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     b62:	2a00      	cmp	r2, #0
     b64:	d1fc      	bne.n	b60 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     b66:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b68:	2102      	movs	r1, #2
     b6a:	7e1a      	ldrb	r2, [r3, #24]
     b6c:	420a      	tst	r2, r1
     b6e:	d0fc      	beq.n	b6a <usart_write_wait+0x22>
	return STATUS_OK;
     b70:	2300      	movs	r3, #0
     b72:	e7ed      	b.n	b50 <usart_write_wait+0x8>

00000b74 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b74:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     b76:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     b78:	2a00      	cmp	r2, #0
     b7a:	d101      	bne.n	b80 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     b7c:	0018      	movs	r0, r3
     b7e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     b80:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     b82:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b84:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     b86:	2a00      	cmp	r2, #0
     b88:	d1f8      	bne.n	b7c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b8a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     b8c:	7e10      	ldrb	r0, [r2, #24]
     b8e:	0740      	lsls	r0, r0, #29
     b90:	d5f4      	bpl.n	b7c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     b92:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     b94:	2b00      	cmp	r3, #0
     b96:	d1fc      	bne.n	b92 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b98:	8b53      	ldrh	r3, [r2, #26]
     b9a:	b2db      	uxtb	r3, r3
	if (error_code) {
     b9c:	0698      	lsls	r0, r3, #26
     b9e:	d01d      	beq.n	bdc <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     ba0:	0798      	lsls	r0, r3, #30
     ba2:	d503      	bpl.n	bac <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ba4:	2302      	movs	r3, #2
     ba6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     ba8:	3318      	adds	r3, #24
     baa:	e7e7      	b.n	b7c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     bac:	0758      	lsls	r0, r3, #29
     bae:	d503      	bpl.n	bb8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     bb0:	2304      	movs	r3, #4
     bb2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     bb4:	331a      	adds	r3, #26
     bb6:	e7e1      	b.n	b7c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     bb8:	07d8      	lsls	r0, r3, #31
     bba:	d503      	bpl.n	bc4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     bbc:	2301      	movs	r3, #1
     bbe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     bc0:	3312      	adds	r3, #18
     bc2:	e7db      	b.n	b7c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     bc4:	06d8      	lsls	r0, r3, #27
     bc6:	d503      	bpl.n	bd0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     bc8:	2310      	movs	r3, #16
     bca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     bcc:	3332      	adds	r3, #50	; 0x32
     bce:	e7d5      	b.n	b7c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     bd0:	069b      	lsls	r3, r3, #26
     bd2:	d503      	bpl.n	bdc <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     bd4:	2320      	movs	r3, #32
     bd6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     bd8:	3321      	adds	r3, #33	; 0x21
     bda:	e7cf      	b.n	b7c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     bdc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     bde:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     be0:	2300      	movs	r3, #0
     be2:	e7cb      	b.n	b7c <usart_read_wait+0x8>

00000be4 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     be4:	b5f0      	push	{r4, r5, r6, r7, lr}
     be6:	46d6      	mov	lr, sl
     be8:	b500      	push	{lr}
     bea:	b084      	sub	sp, #16
     bec:	0004      	movs	r4, r0
     bee:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     bf0:	2017      	movs	r0, #23
	if (length == 0) {
     bf2:	2a00      	cmp	r2, #0
     bf4:	d103      	bne.n	bfe <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     bf6:	b004      	add	sp, #16
     bf8:	bc04      	pop	{r2}
     bfa:	4692      	mov	sl, r2
     bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
     bfe:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
     c00:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
     c02:	2b00      	cmp	r3, #0
     c04:	d0f7      	beq.n	bf6 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
     c06:	6826      	ldr	r6, [r4, #0]
	while (length--) {
     c08:	3a01      	subs	r2, #1
     c0a:	b293      	uxth	r3, r2
     c0c:	469a      	mov	sl, r3
     c0e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     c10:	2704      	movs	r7, #4
     c12:	e019      	b.n	c48 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
     c14:	2300      	movs	r3, #0
     c16:	aa02      	add	r2, sp, #8
     c18:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
     c1a:	1d91      	adds	r1, r2, #6
     c1c:	0020      	movs	r0, r4
     c1e:	4b15      	ldr	r3, [pc, #84]	; (c74 <usart_read_buffer_wait+0x90>)
     c20:	4798      	blx	r3
		if (retval != STATUS_OK) {
     c22:	2800      	cmp	r0, #0
     c24:	d1e7      	bne.n	bf6 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
     c26:	1c69      	adds	r1, r5, #1
     c28:	b289      	uxth	r1, r1
     c2a:	ab02      	add	r3, sp, #8
     c2c:	88db      	ldrh	r3, [r3, #6]
     c2e:	9a01      	ldr	r2, [sp, #4]
     c30:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c32:	7962      	ldrb	r2, [r4, #5]
     c34:	2a01      	cmp	r2, #1
     c36:	d014      	beq.n	c62 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
     c38:	000d      	movs	r5, r1
	while (length--) {
     c3a:	4653      	mov	r3, sl
     c3c:	3b01      	subs	r3, #1
     c3e:	b29b      	uxth	r3, r3
     c40:	469a      	mov	sl, r3
     c42:	4b0d      	ldr	r3, [pc, #52]	; (c78 <usart_read_buffer_wait+0x94>)
     c44:	459a      	cmp	sl, r3
     c46:	d0d6      	beq.n	bf6 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     c48:	7e33      	ldrb	r3, [r6, #24]
     c4a:	423b      	tst	r3, r7
     c4c:	d1e2      	bne.n	c14 <usart_read_buffer_wait+0x30>
     c4e:	4b0a      	ldr	r3, [pc, #40]	; (c78 <usart_read_buffer_wait+0x94>)
     c50:	7e32      	ldrb	r2, [r6, #24]
     c52:	423a      	tst	r2, r7
     c54:	d1de      	bne.n	c14 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
     c56:	2b01      	cmp	r3, #1
     c58:	d009      	beq.n	c6e <usart_read_buffer_wait+0x8a>
     c5a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c5c:	2b00      	cmp	r3, #0
     c5e:	d1f7      	bne.n	c50 <usart_read_buffer_wait+0x6c>
     c60:	e7d8      	b.n	c14 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
     c62:	3502      	adds	r5, #2
     c64:	b2ad      	uxth	r5, r5
     c66:	0a1b      	lsrs	r3, r3, #8
     c68:	9a01      	ldr	r2, [sp, #4]
     c6a:	5453      	strb	r3, [r2, r1]
     c6c:	e7e5      	b.n	c3a <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
     c6e:	2012      	movs	r0, #18
     c70:	e7c1      	b.n	bf6 <usart_read_buffer_wait+0x12>
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	00000b75 	.word	0x00000b75
     c78:	0000ffff 	.word	0x0000ffff

00000c7c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c7e:	0080      	lsls	r0, r0, #2
     c80:	4b62      	ldr	r3, [pc, #392]	; (e0c <_usart_interrupt_handler+0x190>)
     c82:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c84:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c86:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     c88:	2b00      	cmp	r3, #0
     c8a:	d1fc      	bne.n	c86 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c8c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     c8e:	7da6      	ldrb	r6, [r4, #22]
     c90:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c92:	2330      	movs	r3, #48	; 0x30
     c94:	5ceb      	ldrb	r3, [r5, r3]
     c96:	2231      	movs	r2, #49	; 0x31
     c98:	5caf      	ldrb	r7, [r5, r2]
     c9a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c9c:	07f3      	lsls	r3, r6, #31
     c9e:	d522      	bpl.n	ce6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     ca0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     ca2:	b29b      	uxth	r3, r3
     ca4:	2b00      	cmp	r3, #0
     ca6:	d01c      	beq.n	ce2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ca8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     caa:	7813      	ldrb	r3, [r2, #0]
     cac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     cae:	1c51      	adds	r1, r2, #1
     cb0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cb2:	7969      	ldrb	r1, [r5, #5]
     cb4:	2901      	cmp	r1, #1
     cb6:	d00e      	beq.n	cd6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cb8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     cba:	05db      	lsls	r3, r3, #23
     cbc:	0ddb      	lsrs	r3, r3, #23
     cbe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     cc0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     cc2:	3b01      	subs	r3, #1
     cc4:	b29b      	uxth	r3, r3
     cc6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     cc8:	2b00      	cmp	r3, #0
     cca:	d10c      	bne.n	ce6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ccc:	3301      	adds	r3, #1
     cce:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     cd0:	3301      	adds	r3, #1
     cd2:	75a3      	strb	r3, [r4, #22]
     cd4:	e007      	b.n	ce6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     cd6:	7851      	ldrb	r1, [r2, #1]
     cd8:	0209      	lsls	r1, r1, #8
     cda:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     cdc:	3202      	adds	r2, #2
     cde:	62aa      	str	r2, [r5, #40]	; 0x28
     ce0:	e7eb      	b.n	cba <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ce2:	2301      	movs	r3, #1
     ce4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     ce6:	07b3      	lsls	r3, r6, #30
     ce8:	d506      	bpl.n	cf8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     cea:	2302      	movs	r3, #2
     cec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     cee:	2200      	movs	r2, #0
     cf0:	3331      	adds	r3, #49	; 0x31
     cf2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     cf4:	07fb      	lsls	r3, r7, #31
     cf6:	d41a      	bmi.n	d2e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     cf8:	0773      	lsls	r3, r6, #29
     cfa:	d565      	bpl.n	dc8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     cfc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     cfe:	b29b      	uxth	r3, r3
     d00:	2b00      	cmp	r3, #0
     d02:	d05f      	beq.n	dc4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d04:	8b63      	ldrh	r3, [r4, #26]
     d06:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     d08:	071a      	lsls	r2, r3, #28
     d0a:	d414      	bmi.n	d36 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d0c:	223f      	movs	r2, #63	; 0x3f
     d0e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d10:	2b00      	cmp	r3, #0
     d12:	d034      	beq.n	d7e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d14:	079a      	lsls	r2, r3, #30
     d16:	d511      	bpl.n	d3c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d18:	221a      	movs	r2, #26
     d1a:	2332      	movs	r3, #50	; 0x32
     d1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d1e:	3b30      	subs	r3, #48	; 0x30
     d20:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d22:	077b      	lsls	r3, r7, #29
     d24:	d550      	bpl.n	dc8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d26:	0028      	movs	r0, r5
     d28:	696b      	ldr	r3, [r5, #20]
     d2a:	4798      	blx	r3
     d2c:	e04c      	b.n	dc8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d2e:	0028      	movs	r0, r5
     d30:	68eb      	ldr	r3, [r5, #12]
     d32:	4798      	blx	r3
     d34:	e7e0      	b.n	cf8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     d36:	2237      	movs	r2, #55	; 0x37
     d38:	4013      	ands	r3, r2
     d3a:	e7e9      	b.n	d10 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d3c:	075a      	lsls	r2, r3, #29
     d3e:	d505      	bpl.n	d4c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     d40:	221e      	movs	r2, #30
     d42:	2332      	movs	r3, #50	; 0x32
     d44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d46:	3b2e      	subs	r3, #46	; 0x2e
     d48:	8363      	strh	r3, [r4, #26]
     d4a:	e7ea      	b.n	d22 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d4c:	07da      	lsls	r2, r3, #31
     d4e:	d505      	bpl.n	d5c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     d50:	2213      	movs	r2, #19
     d52:	2332      	movs	r3, #50	; 0x32
     d54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d56:	3b31      	subs	r3, #49	; 0x31
     d58:	8363      	strh	r3, [r4, #26]
     d5a:	e7e2      	b.n	d22 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     d5c:	06da      	lsls	r2, r3, #27
     d5e:	d505      	bpl.n	d6c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     d60:	2242      	movs	r2, #66	; 0x42
     d62:	2332      	movs	r3, #50	; 0x32
     d64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     d66:	3b22      	subs	r3, #34	; 0x22
     d68:	8363      	strh	r3, [r4, #26]
     d6a:	e7da      	b.n	d22 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     d6c:	2220      	movs	r2, #32
     d6e:	421a      	tst	r2, r3
     d70:	d0d7      	beq.n	d22 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     d72:	3221      	adds	r2, #33	; 0x21
     d74:	2332      	movs	r3, #50	; 0x32
     d76:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d78:	3b12      	subs	r3, #18
     d7a:	8363      	strh	r3, [r4, #26]
     d7c:	e7d1      	b.n	d22 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d80:	05db      	lsls	r3, r3, #23
     d82:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d84:	b2da      	uxtb	r2, r3
     d86:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d88:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     d8c:	1c51      	adds	r1, r2, #1
     d8e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d90:	7969      	ldrb	r1, [r5, #5]
     d92:	2901      	cmp	r1, #1
     d94:	d010      	beq.n	db8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d96:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d98:	3b01      	subs	r3, #1
     d9a:	b29b      	uxth	r3, r3
     d9c:	85ab      	strh	r3, [r5, #44]	; 0x2c
     d9e:	2b00      	cmp	r3, #0
     da0:	d112      	bne.n	dc8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     da2:	3304      	adds	r3, #4
     da4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     da6:	2200      	movs	r2, #0
     da8:	332e      	adds	r3, #46	; 0x2e
     daa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     dac:	07bb      	lsls	r3, r7, #30
     dae:	d50b      	bpl.n	dc8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     db0:	0028      	movs	r0, r5
     db2:	692b      	ldr	r3, [r5, #16]
     db4:	4798      	blx	r3
     db6:	e007      	b.n	dc8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     db8:	0a1b      	lsrs	r3, r3, #8
     dba:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     dbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     dbe:	3301      	adds	r3, #1
     dc0:	626b      	str	r3, [r5, #36]	; 0x24
     dc2:	e7e8      	b.n	d96 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     dc4:	2304      	movs	r3, #4
     dc6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     dc8:	06f3      	lsls	r3, r6, #27
     dca:	d504      	bpl.n	dd6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     dcc:	2310      	movs	r3, #16
     dce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     dd0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     dd2:	06fb      	lsls	r3, r7, #27
     dd4:	d40e      	bmi.n	df4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     dd6:	06b3      	lsls	r3, r6, #26
     dd8:	d504      	bpl.n	de4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     dda:	2320      	movs	r3, #32
     ddc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     dde:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     de0:	073b      	lsls	r3, r7, #28
     de2:	d40b      	bmi.n	dfc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     de4:	0733      	lsls	r3, r6, #28
     de6:	d504      	bpl.n	df2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     de8:	2308      	movs	r3, #8
     dea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     dec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     dee:	06bb      	lsls	r3, r7, #26
     df0:	d408      	bmi.n	e04 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     df4:	0028      	movs	r0, r5
     df6:	69eb      	ldr	r3, [r5, #28]
     df8:	4798      	blx	r3
     dfa:	e7ec      	b.n	dd6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     dfc:	0028      	movs	r0, r5
     dfe:	69ab      	ldr	r3, [r5, #24]
     e00:	4798      	blx	r3
     e02:	e7ef      	b.n	de4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     e04:	6a2b      	ldr	r3, [r5, #32]
     e06:	0028      	movs	r0, r5
     e08:	4798      	blx	r3
}
     e0a:	e7f2      	b.n	df2 <_usart_interrupt_handler+0x176>
     e0c:	200001ec 	.word	0x200001ec

00000e10 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e10:	b510      	push	{r4, lr}
	switch (clock_source) {
     e12:	2808      	cmp	r0, #8
     e14:	d803      	bhi.n	e1e <system_clock_source_get_hz+0xe>
     e16:	0080      	lsls	r0, r0, #2
     e18:	4b1c      	ldr	r3, [pc, #112]	; (e8c <system_clock_source_get_hz+0x7c>)
     e1a:	581b      	ldr	r3, [r3, r0]
     e1c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     e1e:	2000      	movs	r0, #0
     e20:	e032      	b.n	e88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     e22:	4b1b      	ldr	r3, [pc, #108]	; (e90 <system_clock_source_get_hz+0x80>)
     e24:	6918      	ldr	r0, [r3, #16]
     e26:	e02f      	b.n	e88 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e28:	4b1a      	ldr	r3, [pc, #104]	; (e94 <system_clock_source_get_hz+0x84>)
     e2a:	6a1b      	ldr	r3, [r3, #32]
     e2c:	059b      	lsls	r3, r3, #22
     e2e:	0f9b      	lsrs	r3, r3, #30
     e30:	4819      	ldr	r0, [pc, #100]	; (e98 <system_clock_source_get_hz+0x88>)
     e32:	40d8      	lsrs	r0, r3
     e34:	e028      	b.n	e88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     e36:	4b16      	ldr	r3, [pc, #88]	; (e90 <system_clock_source_get_hz+0x80>)
     e38:	6958      	ldr	r0, [r3, #20]
     e3a:	e025      	b.n	e88 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e3c:	4b14      	ldr	r3, [pc, #80]	; (e90 <system_clock_source_get_hz+0x80>)
     e3e:	681b      	ldr	r3, [r3, #0]
			return 0;
     e40:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e42:	079b      	lsls	r3, r3, #30
     e44:	d520      	bpl.n	e88 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e46:	4913      	ldr	r1, [pc, #76]	; (e94 <system_clock_source_get_hz+0x84>)
     e48:	2210      	movs	r2, #16
     e4a:	68cb      	ldr	r3, [r1, #12]
     e4c:	421a      	tst	r2, r3
     e4e:	d0fc      	beq.n	e4a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     e50:	4b0f      	ldr	r3, [pc, #60]	; (e90 <system_clock_source_get_hz+0x80>)
     e52:	681a      	ldr	r2, [r3, #0]
     e54:	2324      	movs	r3, #36	; 0x24
     e56:	4013      	ands	r3, r2
     e58:	2b04      	cmp	r3, #4
     e5a:	d001      	beq.n	e60 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     e5c:	480f      	ldr	r0, [pc, #60]	; (e9c <system_clock_source_get_hz+0x8c>)
     e5e:	e013      	b.n	e88 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e60:	2000      	movs	r0, #0
     e62:	4b0f      	ldr	r3, [pc, #60]	; (ea0 <system_clock_source_get_hz+0x90>)
     e64:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     e66:	4b0a      	ldr	r3, [pc, #40]	; (e90 <system_clock_source_get_hz+0x80>)
     e68:	689b      	ldr	r3, [r3, #8]
     e6a:	041b      	lsls	r3, r3, #16
     e6c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e6e:	4358      	muls	r0, r3
     e70:	e00a      	b.n	e88 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e72:	2350      	movs	r3, #80	; 0x50
     e74:	4a07      	ldr	r2, [pc, #28]	; (e94 <system_clock_source_get_hz+0x84>)
     e76:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     e78:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e7a:	075b      	lsls	r3, r3, #29
     e7c:	d504      	bpl.n	e88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     e7e:	4b04      	ldr	r3, [pc, #16]	; (e90 <system_clock_source_get_hz+0x80>)
     e80:	68d8      	ldr	r0, [r3, #12]
     e82:	e001      	b.n	e88 <system_clock_source_get_hz+0x78>
		return 32768UL;
     e84:	2080      	movs	r0, #128	; 0x80
     e86:	0200      	lsls	r0, r0, #8
	}
}
     e88:	bd10      	pop	{r4, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	00002c48 	.word	0x00002c48
     e90:	200000b0 	.word	0x200000b0
     e94:	40000800 	.word	0x40000800
     e98:	007a1200 	.word	0x007a1200
     e9c:	02dc6c00 	.word	0x02dc6c00
     ea0:	00001461 	.word	0x00001461

00000ea4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ea4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ea6:	490c      	ldr	r1, [pc, #48]	; (ed8 <system_clock_source_osc8m_set_config+0x34>)
     ea8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     eaa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     eac:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     eae:	7840      	ldrb	r0, [r0, #1]
     eb0:	2201      	movs	r2, #1
     eb2:	4010      	ands	r0, r2
     eb4:	0180      	lsls	r0, r0, #6
     eb6:	2640      	movs	r6, #64	; 0x40
     eb8:	43b3      	bics	r3, r6
     eba:	4303      	orrs	r3, r0
     ebc:	402a      	ands	r2, r5
     ebe:	01d2      	lsls	r2, r2, #7
     ec0:	2080      	movs	r0, #128	; 0x80
     ec2:	4383      	bics	r3, r0
     ec4:	4313      	orrs	r3, r2
     ec6:	2203      	movs	r2, #3
     ec8:	4022      	ands	r2, r4
     eca:	0212      	lsls	r2, r2, #8
     ecc:	4803      	ldr	r0, [pc, #12]	; (edc <system_clock_source_osc8m_set_config+0x38>)
     ece:	4003      	ands	r3, r0
     ed0:	4313      	orrs	r3, r2
     ed2:	620b      	str	r3, [r1, #32]
}
     ed4:	bd70      	pop	{r4, r5, r6, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	40000800 	.word	0x40000800
     edc:	fffffcff 	.word	0xfffffcff

00000ee0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ee2:	46ce      	mov	lr, r9
     ee4:	4647      	mov	r7, r8
     ee6:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     ee8:	4b19      	ldr	r3, [pc, #100]	; (f50 <system_clock_source_osc32k_set_config+0x70>)
     eea:	4699      	mov	r9, r3
     eec:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     eee:	7841      	ldrb	r1, [r0, #1]
     ef0:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     ef2:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ef4:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     ef6:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     ef8:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     efa:	7880      	ldrb	r0, [r0, #2]
     efc:	2101      	movs	r1, #1
     efe:	4008      	ands	r0, r1
     f00:	0080      	lsls	r0, r0, #2
     f02:	2204      	movs	r2, #4
     f04:	4393      	bics	r3, r2
     f06:	4303      	orrs	r3, r0
     f08:	4660      	mov	r0, ip
     f0a:	4008      	ands	r0, r1
     f0c:	00c0      	lsls	r0, r0, #3
     f0e:	3204      	adds	r2, #4
     f10:	4393      	bics	r3, r2
     f12:	4303      	orrs	r3, r0
     f14:	0038      	movs	r0, r7
     f16:	4008      	ands	r0, r1
     f18:	0180      	lsls	r0, r0, #6
     f1a:	2740      	movs	r7, #64	; 0x40
     f1c:	43bb      	bics	r3, r7
     f1e:	4303      	orrs	r3, r0
     f20:	0030      	movs	r0, r6
     f22:	4008      	ands	r0, r1
     f24:	01c0      	lsls	r0, r0, #7
     f26:	2680      	movs	r6, #128	; 0x80
     f28:	43b3      	bics	r3, r6
     f2a:	4303      	orrs	r3, r0
     f2c:	2007      	movs	r0, #7
     f2e:	4005      	ands	r5, r0
     f30:	022d      	lsls	r5, r5, #8
     f32:	4808      	ldr	r0, [pc, #32]	; (f54 <system_clock_source_osc32k_set_config+0x74>)
     f34:	4003      	ands	r3, r0
     f36:	432b      	orrs	r3, r5
     f38:	4021      	ands	r1, r4
     f3a:	0309      	lsls	r1, r1, #12
     f3c:	4806      	ldr	r0, [pc, #24]	; (f58 <system_clock_source_osc32k_set_config+0x78>)
     f3e:	4003      	ands	r3, r0
     f40:	430b      	orrs	r3, r1
     f42:	464a      	mov	r2, r9
     f44:	6193      	str	r3, [r2, #24]
}
     f46:	bc0c      	pop	{r2, r3}
     f48:	4690      	mov	r8, r2
     f4a:	4699      	mov	r9, r3
     f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	40000800 	.word	0x40000800
     f54:	fffff8ff 	.word	0xfffff8ff
     f58:	ffffefff 	.word	0xffffefff

00000f5c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     f5c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f5e:	7a03      	ldrb	r3, [r0, #8]
     f60:	069b      	lsls	r3, r3, #26
     f62:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     f64:	8942      	ldrh	r2, [r0, #10]
     f66:	0592      	lsls	r2, r2, #22
     f68:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f6a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     f6c:	4918      	ldr	r1, [pc, #96]	; (fd0 <system_clock_source_dfll_set_config+0x74>)
     f6e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     f70:	7983      	ldrb	r3, [r0, #6]
     f72:	79c2      	ldrb	r2, [r0, #7]
     f74:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     f76:	8842      	ldrh	r2, [r0, #2]
     f78:	8884      	ldrh	r4, [r0, #4]
     f7a:	4322      	orrs	r2, r4
     f7c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     f7e:	7842      	ldrb	r2, [r0, #1]
     f80:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     f82:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     f84:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     f86:	7803      	ldrb	r3, [r0, #0]
     f88:	2b04      	cmp	r3, #4
     f8a:	d011      	beq.n	fb0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     f8c:	2b20      	cmp	r3, #32
     f8e:	d10e      	bne.n	fae <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f90:	7b03      	ldrb	r3, [r0, #12]
     f92:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f94:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     f96:	4313      	orrs	r3, r2
     f98:	89c2      	ldrh	r2, [r0, #14]
     f9a:	0412      	lsls	r2, r2, #16
     f9c:	490d      	ldr	r1, [pc, #52]	; (fd4 <system_clock_source_dfll_set_config+0x78>)
     f9e:	400a      	ands	r2, r1
     fa0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     fa2:	4a0b      	ldr	r2, [pc, #44]	; (fd0 <system_clock_source_dfll_set_config+0x74>)
     fa4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     fa6:	6811      	ldr	r1, [r2, #0]
     fa8:	4b0b      	ldr	r3, [pc, #44]	; (fd8 <system_clock_source_dfll_set_config+0x7c>)
     faa:	430b      	orrs	r3, r1
     fac:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     fae:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     fb0:	7b03      	ldrb	r3, [r0, #12]
     fb2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     fb4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     fb6:	4313      	orrs	r3, r2
     fb8:	89c2      	ldrh	r2, [r0, #14]
     fba:	0412      	lsls	r2, r2, #16
     fbc:	4905      	ldr	r1, [pc, #20]	; (fd4 <system_clock_source_dfll_set_config+0x78>)
     fbe:	400a      	ands	r2, r1
     fc0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     fc2:	4a03      	ldr	r2, [pc, #12]	; (fd0 <system_clock_source_dfll_set_config+0x74>)
     fc4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     fc6:	6813      	ldr	r3, [r2, #0]
     fc8:	2104      	movs	r1, #4
     fca:	430b      	orrs	r3, r1
     fcc:	6013      	str	r3, [r2, #0]
     fce:	e7ee      	b.n	fae <system_clock_source_dfll_set_config+0x52>
     fd0:	200000b0 	.word	0x200000b0
     fd4:	03ff0000 	.word	0x03ff0000
     fd8:	00000424 	.word	0x00000424

00000fdc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     fdc:	2808      	cmp	r0, #8
     fde:	d803      	bhi.n	fe8 <system_clock_source_enable+0xc>
     fe0:	0080      	lsls	r0, r0, #2
     fe2:	4b25      	ldr	r3, [pc, #148]	; (1078 <system_clock_source_enable+0x9c>)
     fe4:	581b      	ldr	r3, [r3, r0]
     fe6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     fe8:	2017      	movs	r0, #23
     fea:	e044      	b.n	1076 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     fec:	4a23      	ldr	r2, [pc, #140]	; (107c <system_clock_source_enable+0xa0>)
     fee:	6a13      	ldr	r3, [r2, #32]
     ff0:	2102      	movs	r1, #2
     ff2:	430b      	orrs	r3, r1
     ff4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     ff6:	2000      	movs	r0, #0
     ff8:	e03d      	b.n	1076 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     ffa:	4a20      	ldr	r2, [pc, #128]	; (107c <system_clock_source_enable+0xa0>)
     ffc:	6993      	ldr	r3, [r2, #24]
     ffe:	2102      	movs	r1, #2
    1000:	430b      	orrs	r3, r1
    1002:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1004:	2000      	movs	r0, #0
		break;
    1006:	e036      	b.n	1076 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1008:	4a1c      	ldr	r2, [pc, #112]	; (107c <system_clock_source_enable+0xa0>)
    100a:	8a13      	ldrh	r3, [r2, #16]
    100c:	2102      	movs	r1, #2
    100e:	430b      	orrs	r3, r1
    1010:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1012:	2000      	movs	r0, #0
		break;
    1014:	e02f      	b.n	1076 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1016:	4a19      	ldr	r2, [pc, #100]	; (107c <system_clock_source_enable+0xa0>)
    1018:	8a93      	ldrh	r3, [r2, #20]
    101a:	2102      	movs	r1, #2
    101c:	430b      	orrs	r3, r1
    101e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1020:	2000      	movs	r0, #0
		break;
    1022:	e028      	b.n	1076 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1024:	4916      	ldr	r1, [pc, #88]	; (1080 <system_clock_source_enable+0xa4>)
    1026:	680b      	ldr	r3, [r1, #0]
    1028:	2202      	movs	r2, #2
    102a:	4313      	orrs	r3, r2
    102c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    102e:	4b13      	ldr	r3, [pc, #76]	; (107c <system_clock_source_enable+0xa0>)
    1030:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1032:	0019      	movs	r1, r3
    1034:	320e      	adds	r2, #14
    1036:	68cb      	ldr	r3, [r1, #12]
    1038:	421a      	tst	r2, r3
    103a:	d0fc      	beq.n	1036 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    103c:	4a10      	ldr	r2, [pc, #64]	; (1080 <system_clock_source_enable+0xa4>)
    103e:	6891      	ldr	r1, [r2, #8]
    1040:	4b0e      	ldr	r3, [pc, #56]	; (107c <system_clock_source_enable+0xa0>)
    1042:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1044:	6852      	ldr	r2, [r2, #4]
    1046:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1048:	2200      	movs	r2, #0
    104a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    104c:	0019      	movs	r1, r3
    104e:	3210      	adds	r2, #16
    1050:	68cb      	ldr	r3, [r1, #12]
    1052:	421a      	tst	r2, r3
    1054:	d0fc      	beq.n	1050 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1056:	4b0a      	ldr	r3, [pc, #40]	; (1080 <system_clock_source_enable+0xa4>)
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	b29b      	uxth	r3, r3
    105c:	4a07      	ldr	r2, [pc, #28]	; (107c <system_clock_source_enable+0xa0>)
    105e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1060:	2000      	movs	r0, #0
    1062:	e008      	b.n	1076 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1064:	4905      	ldr	r1, [pc, #20]	; (107c <system_clock_source_enable+0xa0>)
    1066:	2244      	movs	r2, #68	; 0x44
    1068:	5c8b      	ldrb	r3, [r1, r2]
    106a:	2002      	movs	r0, #2
    106c:	4303      	orrs	r3, r0
    106e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1070:	2000      	movs	r0, #0
		break;
    1072:	e000      	b.n	1076 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1074:	2000      	movs	r0, #0
}
    1076:	4770      	bx	lr
    1078:	00002c6c 	.word	0x00002c6c
    107c:	40000800 	.word	0x40000800
    1080:	200000b0 	.word	0x200000b0

00001084 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1084:	b5f0      	push	{r4, r5, r6, r7, lr}
    1086:	46ce      	mov	lr, r9
    1088:	4647      	mov	r7, r8
    108a:	b580      	push	{r7, lr}
    108c:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    108e:	22c2      	movs	r2, #194	; 0xc2
    1090:	00d2      	lsls	r2, r2, #3
    1092:	4b50      	ldr	r3, [pc, #320]	; (11d4 <system_clock_init+0x150>)
    1094:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1096:	4a50      	ldr	r2, [pc, #320]	; (11d8 <system_clock_init+0x154>)
    1098:	6853      	ldr	r3, [r2, #4]
    109a:	211e      	movs	r1, #30
    109c:	438b      	bics	r3, r1
    109e:	391a      	subs	r1, #26
    10a0:	430b      	orrs	r3, r1
    10a2:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    10a4:	2203      	movs	r2, #3
    10a6:	ab01      	add	r3, sp, #4
    10a8:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10aa:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10ac:	4d4b      	ldr	r5, [pc, #300]	; (11dc <system_clock_init+0x158>)
    10ae:	b2e0      	uxtb	r0, r4
    10b0:	a901      	add	r1, sp, #4
    10b2:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10b4:	3401      	adds	r4, #1
    10b6:	2c25      	cmp	r4, #37	; 0x25
    10b8:	d1f9      	bne.n	10ae <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    10ba:	4d49      	ldr	r5, [pc, #292]	; (11e0 <system_clock_init+0x15c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    10bc:	682b      	ldr	r3, [r5, #0]
    10be:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    10c0:	4944      	ldr	r1, [pc, #272]	; (11d4 <system_clock_init+0x150>)
    10c2:	698a      	ldr	r2, [r1, #24]
    10c4:	0e5b      	lsrs	r3, r3, #25
    10c6:	041b      	lsls	r3, r3, #16
    10c8:	4846      	ldr	r0, [pc, #280]	; (11e4 <system_clock_init+0x160>)
    10ca:	4002      	ands	r2, r0
    10cc:	4313      	orrs	r3, r2
    10ce:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    10d0:	a80a      	add	r0, sp, #40	; 0x28
    10d2:	2301      	movs	r3, #1
    10d4:	7083      	strb	r3, [r0, #2]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    10d6:	2207      	movs	r2, #7
    10d8:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    10da:	2400      	movs	r4, #0
    10dc:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    10de:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    10e0:	7104      	strb	r4, [r0, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    10e2:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    10e4:	4b40      	ldr	r3, [pc, #256]	; (11e8 <system_clock_init+0x164>)
    10e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    10e8:	2004      	movs	r0, #4
    10ea:	4b40      	ldr	r3, [pc, #256]	; (11ec <system_clock_init+0x168>)
    10ec:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    10ee:	ab05      	add	r3, sp, #20
    10f0:	2200      	movs	r2, #0
    10f2:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    10f4:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    10f6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    10f8:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    10fa:	213f      	movs	r1, #63	; 0x3f
    10fc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    10fe:	393b      	subs	r1, #59	; 0x3b
    1100:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1102:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1104:	682b      	ldr	r3, [r5, #0]
    1106:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1108:	2b3f      	cmp	r3, #63	; 0x3f
    110a:	d060      	beq.n	11ce <system_clock_init+0x14a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    110c:	a805      	add	r0, sp, #20
    110e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1110:	2304      	movs	r3, #4
    1112:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1114:	3303      	adds	r3, #3
    1116:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1118:	3338      	adds	r3, #56	; 0x38
    111a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    111c:	4b34      	ldr	r3, [pc, #208]	; (11f0 <system_clock_init+0x16c>)
    111e:	4798      	blx	r3
	config->run_in_standby  = false;
    1120:	a804      	add	r0, sp, #16
    1122:	2500      	movs	r5, #0
    1124:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1126:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1128:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    112a:	4b32      	ldr	r3, [pc, #200]	; (11f4 <system_clock_init+0x170>)
    112c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    112e:	2006      	movs	r0, #6
    1130:	4f2e      	ldr	r7, [pc, #184]	; (11ec <system_clock_init+0x168>)
    1132:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1134:	4b30      	ldr	r3, [pc, #192]	; (11f8 <system_clock_init+0x174>)
    1136:	4798      	blx	r3
	config->division_factor    = 1;
    1138:	ac01      	add	r4, sp, #4
    113a:	2601      	movs	r6, #1
    113c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    113e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1140:	2306      	movs	r3, #6
    1142:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1144:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1146:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1148:	0021      	movs	r1, r4
    114a:	2001      	movs	r0, #1
    114c:	4b2b      	ldr	r3, [pc, #172]	; (11fc <system_clock_init+0x178>)
    114e:	4699      	mov	r9, r3
    1150:	4798      	blx	r3
    1152:	2001      	movs	r0, #1
    1154:	4b2a      	ldr	r3, [pc, #168]	; (1200 <system_clock_init+0x17c>)
    1156:	4698      	mov	r8, r3
    1158:	4798      	blx	r3
	config->high_when_disabled = false;
    115a:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    115c:	7265      	strb	r5, [r4, #9]
    115e:	2304      	movs	r3, #4
    1160:	7023      	strb	r3, [r4, #0]
    1162:	2320      	movs	r3, #32
    1164:	6063      	str	r3, [r4, #4]
    1166:	7226      	strb	r6, [r4, #8]
    1168:	0021      	movs	r1, r4
    116a:	2002      	movs	r0, #2
    116c:	47c8      	blx	r9
    116e:	2002      	movs	r0, #2
    1170:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1172:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1174:	0021      	movs	r1, r4
    1176:	2000      	movs	r0, #0
    1178:	4b18      	ldr	r3, [pc, #96]	; (11dc <system_clock_init+0x158>)
    117a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    117c:	2000      	movs	r0, #0
    117e:	4b21      	ldr	r3, [pc, #132]	; (1204 <system_clock_init+0x180>)
    1180:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1182:	2007      	movs	r0, #7
    1184:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1186:	4913      	ldr	r1, [pc, #76]	; (11d4 <system_clock_init+0x150>)
    1188:	22d0      	movs	r2, #208	; 0xd0
    118a:	68cb      	ldr	r3, [r1, #12]
    118c:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    118e:	2bd0      	cmp	r3, #208	; 0xd0
    1190:	d1fb      	bne.n	118a <system_clock_init+0x106>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1192:	4a10      	ldr	r2, [pc, #64]	; (11d4 <system_clock_init+0x150>)
    1194:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1196:	2180      	movs	r1, #128	; 0x80
    1198:	430b      	orrs	r3, r1
    119a:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    119c:	4a1a      	ldr	r2, [pc, #104]	; (1208 <system_clock_init+0x184>)
    119e:	2300      	movs	r3, #0
    11a0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    11a2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    11a4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    11a6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    11a8:	a901      	add	r1, sp, #4
    11aa:	2201      	movs	r2, #1
    11ac:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    11ae:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    11b0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    11b2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    11b4:	3307      	adds	r3, #7
    11b6:	700b      	strb	r3, [r1, #0]
    11b8:	2000      	movs	r0, #0
    11ba:	4b10      	ldr	r3, [pc, #64]	; (11fc <system_clock_init+0x178>)
    11bc:	4798      	blx	r3
    11be:	2000      	movs	r0, #0
    11c0:	4b0f      	ldr	r3, [pc, #60]	; (1200 <system_clock_init+0x17c>)
    11c2:	4798      	blx	r3
#endif
}
    11c4:	b00d      	add	sp, #52	; 0x34
    11c6:	bc0c      	pop	{r2, r3}
    11c8:	4690      	mov	r8, r2
    11ca:	4699      	mov	r9, r3
    11cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    11ce:	3b20      	subs	r3, #32
    11d0:	e79c      	b.n	110c <system_clock_init+0x88>
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	40000800 	.word	0x40000800
    11d8:	41004000 	.word	0x41004000
    11dc:	00001445 	.word	0x00001445
    11e0:	00806024 	.word	0x00806024
    11e4:	ff80ffff 	.word	0xff80ffff
    11e8:	00000ee1 	.word	0x00000ee1
    11ec:	00000fdd 	.word	0x00000fdd
    11f0:	00000f5d 	.word	0x00000f5d
    11f4:	00000ea5 	.word	0x00000ea5
    11f8:	0000120d 	.word	0x0000120d
    11fc:	00001231 	.word	0x00001231
    1200:	000012e9 	.word	0x000012e9
    1204:	000013b9 	.word	0x000013b9
    1208:	40000400 	.word	0x40000400

0000120c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    120c:	4a06      	ldr	r2, [pc, #24]	; (1228 <system_gclk_init+0x1c>)
    120e:	6993      	ldr	r3, [r2, #24]
    1210:	2108      	movs	r1, #8
    1212:	430b      	orrs	r3, r1
    1214:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1216:	2201      	movs	r2, #1
    1218:	4b04      	ldr	r3, [pc, #16]	; (122c <system_gclk_init+0x20>)
    121a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    121c:	0019      	movs	r1, r3
    121e:	780b      	ldrb	r3, [r1, #0]
    1220:	4213      	tst	r3, r2
    1222:	d1fc      	bne.n	121e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1224:	4770      	bx	lr
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	40000400 	.word	0x40000400
    122c:	40000c00 	.word	0x40000c00

00001230 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1230:	b570      	push	{r4, r5, r6, lr}
    1232:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1234:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1236:	780d      	ldrb	r5, [r1, #0]
    1238:	022d      	lsls	r5, r5, #8
    123a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    123c:	784b      	ldrb	r3, [r1, #1]
    123e:	2b00      	cmp	r3, #0
    1240:	d002      	beq.n	1248 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1242:	2380      	movs	r3, #128	; 0x80
    1244:	02db      	lsls	r3, r3, #11
    1246:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1248:	7a4b      	ldrb	r3, [r1, #9]
    124a:	2b00      	cmp	r3, #0
    124c:	d002      	beq.n	1254 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    124e:	2380      	movs	r3, #128	; 0x80
    1250:	031b      	lsls	r3, r3, #12
    1252:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1254:	6848      	ldr	r0, [r1, #4]
    1256:	2801      	cmp	r0, #1
    1258:	d910      	bls.n	127c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    125a:	1e43      	subs	r3, r0, #1
    125c:	4218      	tst	r0, r3
    125e:	d134      	bne.n	12ca <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1260:	2802      	cmp	r0, #2
    1262:	d930      	bls.n	12c6 <system_gclk_gen_set_config+0x96>
    1264:	2302      	movs	r3, #2
    1266:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1268:	3201      	adds	r2, #1
						mask <<= 1) {
    126a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    126c:	4298      	cmp	r0, r3
    126e:	d8fb      	bhi.n	1268 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1270:	0212      	lsls	r2, r2, #8
    1272:	4332      	orrs	r2, r6
    1274:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1276:	2380      	movs	r3, #128	; 0x80
    1278:	035b      	lsls	r3, r3, #13
    127a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    127c:	7a0b      	ldrb	r3, [r1, #8]
    127e:	2b00      	cmp	r3, #0
    1280:	d002      	beq.n	1288 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1282:	2380      	movs	r3, #128	; 0x80
    1284:	039b      	lsls	r3, r3, #14
    1286:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1288:	4a13      	ldr	r2, [pc, #76]	; (12d8 <system_gclk_gen_set_config+0xa8>)
    128a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    128c:	b25b      	sxtb	r3, r3
    128e:	2b00      	cmp	r3, #0
    1290:	dbfb      	blt.n	128a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1292:	4b12      	ldr	r3, [pc, #72]	; (12dc <system_gclk_gen_set_config+0xac>)
    1294:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1296:	4b12      	ldr	r3, [pc, #72]	; (12e0 <system_gclk_gen_set_config+0xb0>)
    1298:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    129a:	4a0f      	ldr	r2, [pc, #60]	; (12d8 <system_gclk_gen_set_config+0xa8>)
    129c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    129e:	b25b      	sxtb	r3, r3
    12a0:	2b00      	cmp	r3, #0
    12a2:	dbfb      	blt.n	129c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    12a4:	4b0c      	ldr	r3, [pc, #48]	; (12d8 <system_gclk_gen_set_config+0xa8>)
    12a6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12a8:	001a      	movs	r2, r3
    12aa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    12ac:	b25b      	sxtb	r3, r3
    12ae:	2b00      	cmp	r3, #0
    12b0:	dbfb      	blt.n	12aa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    12b2:	4a09      	ldr	r2, [pc, #36]	; (12d8 <system_gclk_gen_set_config+0xa8>)
    12b4:	6853      	ldr	r3, [r2, #4]
    12b6:	2180      	movs	r1, #128	; 0x80
    12b8:	0249      	lsls	r1, r1, #9
    12ba:	400b      	ands	r3, r1
    12bc:	431d      	orrs	r5, r3
    12be:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    12c0:	4b08      	ldr	r3, [pc, #32]	; (12e4 <system_gclk_gen_set_config+0xb4>)
    12c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12c4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    12c6:	2200      	movs	r2, #0
    12c8:	e7d2      	b.n	1270 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    12ca:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    12cc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    12ce:	2380      	movs	r3, #128	; 0x80
    12d0:	029b      	lsls	r3, r3, #10
    12d2:	431d      	orrs	r5, r3
    12d4:	e7d2      	b.n	127c <system_gclk_gen_set_config+0x4c>
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	40000c00 	.word	0x40000c00
    12dc:	00000181 	.word	0x00000181
    12e0:	40000c08 	.word	0x40000c08
    12e4:	000001c1 	.word	0x000001c1

000012e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    12e8:	b510      	push	{r4, lr}
    12ea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12ec:	4a0b      	ldr	r2, [pc, #44]	; (131c <system_gclk_gen_enable+0x34>)
    12ee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12f0:	b25b      	sxtb	r3, r3
    12f2:	2b00      	cmp	r3, #0
    12f4:	dbfb      	blt.n	12ee <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    12f6:	4b0a      	ldr	r3, [pc, #40]	; (1320 <system_gclk_gen_enable+0x38>)
    12f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12fa:	4b0a      	ldr	r3, [pc, #40]	; (1324 <system_gclk_gen_enable+0x3c>)
    12fc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12fe:	4a07      	ldr	r2, [pc, #28]	; (131c <system_gclk_gen_enable+0x34>)
    1300:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1302:	b25b      	sxtb	r3, r3
    1304:	2b00      	cmp	r3, #0
    1306:	dbfb      	blt.n	1300 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1308:	4a04      	ldr	r2, [pc, #16]	; (131c <system_gclk_gen_enable+0x34>)
    130a:	6851      	ldr	r1, [r2, #4]
    130c:	2380      	movs	r3, #128	; 0x80
    130e:	025b      	lsls	r3, r3, #9
    1310:	430b      	orrs	r3, r1
    1312:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1314:	4b04      	ldr	r3, [pc, #16]	; (1328 <system_gclk_gen_enable+0x40>)
    1316:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1318:	bd10      	pop	{r4, pc}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	40000c00 	.word	0x40000c00
    1320:	00000181 	.word	0x00000181
    1324:	40000c04 	.word	0x40000c04
    1328:	000001c1 	.word	0x000001c1

0000132c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    132c:	b570      	push	{r4, r5, r6, lr}
    132e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1330:	4a1a      	ldr	r2, [pc, #104]	; (139c <system_gclk_gen_get_hz+0x70>)
    1332:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1334:	b25b      	sxtb	r3, r3
    1336:	2b00      	cmp	r3, #0
    1338:	dbfb      	blt.n	1332 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    133a:	4b19      	ldr	r3, [pc, #100]	; (13a0 <system_gclk_gen_get_hz+0x74>)
    133c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    133e:	4b19      	ldr	r3, [pc, #100]	; (13a4 <system_gclk_gen_get_hz+0x78>)
    1340:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1342:	4a16      	ldr	r2, [pc, #88]	; (139c <system_gclk_gen_get_hz+0x70>)
    1344:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1346:	b25b      	sxtb	r3, r3
    1348:	2b00      	cmp	r3, #0
    134a:	dbfb      	blt.n	1344 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    134c:	4e13      	ldr	r6, [pc, #76]	; (139c <system_gclk_gen_get_hz+0x70>)
    134e:	6870      	ldr	r0, [r6, #4]
    1350:	04c0      	lsls	r0, r0, #19
    1352:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1354:	4b14      	ldr	r3, [pc, #80]	; (13a8 <system_gclk_gen_get_hz+0x7c>)
    1356:	4798      	blx	r3
    1358:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    135a:	4b12      	ldr	r3, [pc, #72]	; (13a4 <system_gclk_gen_get_hz+0x78>)
    135c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    135e:	6876      	ldr	r6, [r6, #4]
    1360:	02f6      	lsls	r6, r6, #11
    1362:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1364:	4b11      	ldr	r3, [pc, #68]	; (13ac <system_gclk_gen_get_hz+0x80>)
    1366:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1368:	4a0c      	ldr	r2, [pc, #48]	; (139c <system_gclk_gen_get_hz+0x70>)
    136a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    136c:	b25b      	sxtb	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	dbfb      	blt.n	136a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1372:	4b0a      	ldr	r3, [pc, #40]	; (139c <system_gclk_gen_get_hz+0x70>)
    1374:	689c      	ldr	r4, [r3, #8]
    1376:	0224      	lsls	r4, r4, #8
    1378:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    137a:	4b0d      	ldr	r3, [pc, #52]	; (13b0 <system_gclk_gen_get_hz+0x84>)
    137c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    137e:	2e00      	cmp	r6, #0
    1380:	d107      	bne.n	1392 <system_gclk_gen_get_hz+0x66>
    1382:	2c01      	cmp	r4, #1
    1384:	d907      	bls.n	1396 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1386:	0021      	movs	r1, r4
    1388:	0028      	movs	r0, r5
    138a:	4b0a      	ldr	r3, [pc, #40]	; (13b4 <system_gclk_gen_get_hz+0x88>)
    138c:	4798      	blx	r3
    138e:	0005      	movs	r5, r0
    1390:	e001      	b.n	1396 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1392:	3401      	adds	r4, #1
    1394:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1396:	0028      	movs	r0, r5
    1398:	bd70      	pop	{r4, r5, r6, pc}
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	40000c00 	.word	0x40000c00
    13a0:	00000181 	.word	0x00000181
    13a4:	40000c04 	.word	0x40000c04
    13a8:	00000e11 	.word	0x00000e11
    13ac:	40000c08 	.word	0x40000c08
    13b0:	000001c1 	.word	0x000001c1
    13b4:	00001a89 	.word	0x00001a89

000013b8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    13b8:	b510      	push	{r4, lr}
    13ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13bc:	4b06      	ldr	r3, [pc, #24]	; (13d8 <system_gclk_chan_enable+0x20>)
    13be:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13c0:	4b06      	ldr	r3, [pc, #24]	; (13dc <system_gclk_chan_enable+0x24>)
    13c2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    13c4:	4a06      	ldr	r2, [pc, #24]	; (13e0 <system_gclk_chan_enable+0x28>)
    13c6:	8853      	ldrh	r3, [r2, #2]
    13c8:	2180      	movs	r1, #128	; 0x80
    13ca:	01c9      	lsls	r1, r1, #7
    13cc:	430b      	orrs	r3, r1
    13ce:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    13d0:	4b04      	ldr	r3, [pc, #16]	; (13e4 <system_gclk_chan_enable+0x2c>)
    13d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13d4:	bd10      	pop	{r4, pc}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00000181 	.word	0x00000181
    13dc:	40000c02 	.word	0x40000c02
    13e0:	40000c00 	.word	0x40000c00
    13e4:	000001c1 	.word	0x000001c1

000013e8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    13e8:	b510      	push	{r4, lr}
    13ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13ec:	4b0f      	ldr	r3, [pc, #60]	; (142c <system_gclk_chan_disable+0x44>)
    13ee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13f0:	4b0f      	ldr	r3, [pc, #60]	; (1430 <system_gclk_chan_disable+0x48>)
    13f2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    13f4:	4a0f      	ldr	r2, [pc, #60]	; (1434 <system_gclk_chan_disable+0x4c>)
    13f6:	8853      	ldrh	r3, [r2, #2]
    13f8:	051b      	lsls	r3, r3, #20
    13fa:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    13fc:	8853      	ldrh	r3, [r2, #2]
    13fe:	490e      	ldr	r1, [pc, #56]	; (1438 <system_gclk_chan_disable+0x50>)
    1400:	400b      	ands	r3, r1
    1402:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1404:	8853      	ldrh	r3, [r2, #2]
    1406:	490d      	ldr	r1, [pc, #52]	; (143c <system_gclk_chan_disable+0x54>)
    1408:	400b      	ands	r3, r1
    140a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    140c:	0011      	movs	r1, r2
    140e:	2280      	movs	r2, #128	; 0x80
    1410:	01d2      	lsls	r2, r2, #7
    1412:	884b      	ldrh	r3, [r1, #2]
    1414:	4213      	tst	r3, r2
    1416:	d1fc      	bne.n	1412 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1418:	4906      	ldr	r1, [pc, #24]	; (1434 <system_gclk_chan_disable+0x4c>)
    141a:	884a      	ldrh	r2, [r1, #2]
    141c:	0203      	lsls	r3, r0, #8
    141e:	4806      	ldr	r0, [pc, #24]	; (1438 <system_gclk_chan_disable+0x50>)
    1420:	4002      	ands	r2, r0
    1422:	4313      	orrs	r3, r2
    1424:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1426:	4b06      	ldr	r3, [pc, #24]	; (1440 <system_gclk_chan_disable+0x58>)
    1428:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    142a:	bd10      	pop	{r4, pc}
    142c:	00000181 	.word	0x00000181
    1430:	40000c02 	.word	0x40000c02
    1434:	40000c00 	.word	0x40000c00
    1438:	fffff0ff 	.word	0xfffff0ff
    143c:	ffffbfff 	.word	0xffffbfff
    1440:	000001c1 	.word	0x000001c1

00001444 <system_gclk_chan_set_config>:
{
    1444:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1446:	780c      	ldrb	r4, [r1, #0]
    1448:	0224      	lsls	r4, r4, #8
    144a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    144c:	4b02      	ldr	r3, [pc, #8]	; (1458 <system_gclk_chan_set_config+0x14>)
    144e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1450:	b2a4      	uxth	r4, r4
    1452:	4b02      	ldr	r3, [pc, #8]	; (145c <system_gclk_chan_set_config+0x18>)
    1454:	805c      	strh	r4, [r3, #2]
}
    1456:	bd10      	pop	{r4, pc}
    1458:	000013e9 	.word	0x000013e9
    145c:	40000c00 	.word	0x40000c00

00001460 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1460:	b510      	push	{r4, lr}
    1462:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1464:	4b06      	ldr	r3, [pc, #24]	; (1480 <system_gclk_chan_get_hz+0x20>)
    1466:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1468:	4b06      	ldr	r3, [pc, #24]	; (1484 <system_gclk_chan_get_hz+0x24>)
    146a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    146c:	4b06      	ldr	r3, [pc, #24]	; (1488 <system_gclk_chan_get_hz+0x28>)
    146e:	885c      	ldrh	r4, [r3, #2]
    1470:	0524      	lsls	r4, r4, #20
    1472:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1474:	4b05      	ldr	r3, [pc, #20]	; (148c <system_gclk_chan_get_hz+0x2c>)
    1476:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1478:	0020      	movs	r0, r4
    147a:	4b05      	ldr	r3, [pc, #20]	; (1490 <system_gclk_chan_get_hz+0x30>)
    147c:	4798      	blx	r3
}
    147e:	bd10      	pop	{r4, pc}
    1480:	00000181 	.word	0x00000181
    1484:	40000c02 	.word	0x40000c02
    1488:	40000c00 	.word	0x40000c00
    148c:	000001c1 	.word	0x000001c1
    1490:	0000132d 	.word	0x0000132d

00001494 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1494:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1496:	78d3      	ldrb	r3, [r2, #3]
    1498:	2b00      	cmp	r3, #0
    149a:	d135      	bne.n	1508 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    149c:	7813      	ldrb	r3, [r2, #0]
    149e:	2b80      	cmp	r3, #128	; 0x80
    14a0:	d029      	beq.n	14f6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    14a2:	061b      	lsls	r3, r3, #24
    14a4:	2480      	movs	r4, #128	; 0x80
    14a6:	0264      	lsls	r4, r4, #9
    14a8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    14aa:	7854      	ldrb	r4, [r2, #1]
    14ac:	2502      	movs	r5, #2
    14ae:	43ac      	bics	r4, r5
    14b0:	d106      	bne.n	14c0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    14b2:	7894      	ldrb	r4, [r2, #2]
    14b4:	2c00      	cmp	r4, #0
    14b6:	d120      	bne.n	14fa <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    14b8:	2480      	movs	r4, #128	; 0x80
    14ba:	02a4      	lsls	r4, r4, #10
    14bc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    14be:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    14c0:	7854      	ldrb	r4, [r2, #1]
    14c2:	3c01      	subs	r4, #1
    14c4:	2c01      	cmp	r4, #1
    14c6:	d91c      	bls.n	1502 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    14c8:	040d      	lsls	r5, r1, #16
    14ca:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    14cc:	24a0      	movs	r4, #160	; 0xa0
    14ce:	05e4      	lsls	r4, r4, #23
    14d0:	432c      	orrs	r4, r5
    14d2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14d4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    14d6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    14d8:	24d0      	movs	r4, #208	; 0xd0
    14da:	0624      	lsls	r4, r4, #24
    14dc:	432c      	orrs	r4, r5
    14de:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14e0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    14e2:	78d4      	ldrb	r4, [r2, #3]
    14e4:	2c00      	cmp	r4, #0
    14e6:	d122      	bne.n	152e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    14e8:	035b      	lsls	r3, r3, #13
    14ea:	d51c      	bpl.n	1526 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    14ec:	7893      	ldrb	r3, [r2, #2]
    14ee:	2b01      	cmp	r3, #1
    14f0:	d01e      	beq.n	1530 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    14f2:	6141      	str	r1, [r0, #20]
    14f4:	e017      	b.n	1526 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    14f6:	2300      	movs	r3, #0
    14f8:	e7d7      	b.n	14aa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    14fa:	24c0      	movs	r4, #192	; 0xc0
    14fc:	02e4      	lsls	r4, r4, #11
    14fe:	4323      	orrs	r3, r4
    1500:	e7dd      	b.n	14be <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1502:	4c0d      	ldr	r4, [pc, #52]	; (1538 <_system_pinmux_config+0xa4>)
    1504:	4023      	ands	r3, r4
    1506:	e7df      	b.n	14c8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1508:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    150a:	040c      	lsls	r4, r1, #16
    150c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    150e:	23a0      	movs	r3, #160	; 0xa0
    1510:	05db      	lsls	r3, r3, #23
    1512:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1514:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1516:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1518:	23d0      	movs	r3, #208	; 0xd0
    151a:	061b      	lsls	r3, r3, #24
    151c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    151e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1520:	78d3      	ldrb	r3, [r2, #3]
    1522:	2b00      	cmp	r3, #0
    1524:	d103      	bne.n	152e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1526:	7853      	ldrb	r3, [r2, #1]
    1528:	3b01      	subs	r3, #1
    152a:	2b01      	cmp	r3, #1
    152c:	d902      	bls.n	1534 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    152e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1530:	6181      	str	r1, [r0, #24]
    1532:	e7f8      	b.n	1526 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1534:	6081      	str	r1, [r0, #8]
}
    1536:	e7fa      	b.n	152e <_system_pinmux_config+0x9a>
    1538:	fffbffff 	.word	0xfffbffff

0000153c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    153c:	b510      	push	{r4, lr}
    153e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1540:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1542:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1544:	2900      	cmp	r1, #0
    1546:	d104      	bne.n	1552 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1548:	0943      	lsrs	r3, r0, #5
    154a:	01db      	lsls	r3, r3, #7
    154c:	4905      	ldr	r1, [pc, #20]	; (1564 <system_pinmux_pin_set_config+0x28>)
    154e:	468c      	mov	ip, r1
    1550:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1552:	241f      	movs	r4, #31
    1554:	4020      	ands	r0, r4
    1556:	2101      	movs	r1, #1
    1558:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    155a:	0018      	movs	r0, r3
    155c:	4b02      	ldr	r3, [pc, #8]	; (1568 <system_pinmux_pin_set_config+0x2c>)
    155e:	4798      	blx	r3
}
    1560:	bd10      	pop	{r4, pc}
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	41004400 	.word	0x41004400
    1568:	00001495 	.word	0x00001495

0000156c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    156c:	4770      	bx	lr
	...

00001570 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1570:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1572:	4b05      	ldr	r3, [pc, #20]	; (1588 <system_init+0x18>)
    1574:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1576:	4b05      	ldr	r3, [pc, #20]	; (158c <system_init+0x1c>)
    1578:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    157a:	4b05      	ldr	r3, [pc, #20]	; (1590 <system_init+0x20>)
    157c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    157e:	4b05      	ldr	r3, [pc, #20]	; (1594 <system_init+0x24>)
    1580:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1582:	4b05      	ldr	r3, [pc, #20]	; (1598 <system_init+0x28>)
    1584:	4798      	blx	r3
}
    1586:	bd10      	pop	{r4, pc}
    1588:	00001085 	.word	0x00001085
    158c:	000001f1 	.word	0x000001f1
    1590:	0000156d 	.word	0x0000156d
    1594:	00000331 	.word	0x00000331
    1598:	0000156d 	.word	0x0000156d

0000159c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    159c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    159e:	0080      	lsls	r0, r0, #2
    15a0:	4b16      	ldr	r3, [pc, #88]	; (15fc <_tc_interrupt_handler+0x60>)
    15a2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    15a4:	6823      	ldr	r3, [r4, #0]
    15a6:	7b9d      	ldrb	r5, [r3, #14]
    15a8:	7e22      	ldrb	r2, [r4, #24]
    15aa:	7e63      	ldrb	r3, [r4, #25]
    15ac:	4013      	ands	r3, r2
    15ae:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    15b0:	07eb      	lsls	r3, r5, #31
    15b2:	d406      	bmi.n	15c2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    15b4:	07ab      	lsls	r3, r5, #30
    15b6:	d40b      	bmi.n	15d0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    15b8:	06eb      	lsls	r3, r5, #27
    15ba:	d410      	bmi.n	15de <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    15bc:	06ab      	lsls	r3, r5, #26
    15be:	d415      	bmi.n	15ec <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    15c0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    15c2:	0020      	movs	r0, r4
    15c4:	68a3      	ldr	r3, [r4, #8]
    15c6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    15c8:	2301      	movs	r3, #1
    15ca:	6822      	ldr	r2, [r4, #0]
    15cc:	7393      	strb	r3, [r2, #14]
    15ce:	e7f1      	b.n	15b4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    15d0:	0020      	movs	r0, r4
    15d2:	68e3      	ldr	r3, [r4, #12]
    15d4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    15d6:	2302      	movs	r3, #2
    15d8:	6822      	ldr	r2, [r4, #0]
    15da:	7393      	strb	r3, [r2, #14]
    15dc:	e7ec      	b.n	15b8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    15de:	0020      	movs	r0, r4
    15e0:	6923      	ldr	r3, [r4, #16]
    15e2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    15e4:	2310      	movs	r3, #16
    15e6:	6822      	ldr	r2, [r4, #0]
    15e8:	7393      	strb	r3, [r2, #14]
    15ea:	e7e7      	b.n	15bc <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    15ec:	0020      	movs	r0, r4
    15ee:	6963      	ldr	r3, [r4, #20]
    15f0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    15f2:	6823      	ldr	r3, [r4, #0]
    15f4:	2220      	movs	r2, #32
    15f6:	739a      	strb	r2, [r3, #14]
}
    15f8:	e7e2      	b.n	15c0 <_tc_interrupt_handler+0x24>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	20000204 	.word	0x20000204

00001600 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1600:	b510      	push	{r4, lr}
    1602:	2000      	movs	r0, #0
    1604:	4b01      	ldr	r3, [pc, #4]	; (160c <TC3_Handler+0xc>)
    1606:	4798      	blx	r3
    1608:	bd10      	pop	{r4, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	0000159d 	.word	0x0000159d

00001610 <TC4_Handler>:
    1610:	b510      	push	{r4, lr}
    1612:	2001      	movs	r0, #1
    1614:	4b01      	ldr	r3, [pc, #4]	; (161c <TC4_Handler+0xc>)
    1616:	4798      	blx	r3
    1618:	bd10      	pop	{r4, pc}
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	0000159d 	.word	0x0000159d

00001620 <TC5_Handler>:
    1620:	b510      	push	{r4, lr}
    1622:	2002      	movs	r0, #2
    1624:	4b01      	ldr	r3, [pc, #4]	; (162c <TC5_Handler+0xc>)
    1626:	4798      	blx	r3
    1628:	bd10      	pop	{r4, pc}
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	0000159d 	.word	0x0000159d

00001630 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1630:	e7fe      	b.n	1630 <Dummy_Handler>
	...

00001634 <Reset_Handler>:
{
    1634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1636:	4a2a      	ldr	r2, [pc, #168]	; (16e0 <Reset_Handler+0xac>)
    1638:	4b2a      	ldr	r3, [pc, #168]	; (16e4 <Reset_Handler+0xb0>)
    163a:	429a      	cmp	r2, r3
    163c:	d011      	beq.n	1662 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    163e:	001a      	movs	r2, r3
    1640:	4b29      	ldr	r3, [pc, #164]	; (16e8 <Reset_Handler+0xb4>)
    1642:	429a      	cmp	r2, r3
    1644:	d20d      	bcs.n	1662 <Reset_Handler+0x2e>
    1646:	4a29      	ldr	r2, [pc, #164]	; (16ec <Reset_Handler+0xb8>)
    1648:	3303      	adds	r3, #3
    164a:	1a9b      	subs	r3, r3, r2
    164c:	089b      	lsrs	r3, r3, #2
    164e:	3301      	adds	r3, #1
    1650:	009b      	lsls	r3, r3, #2
    1652:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1654:	4823      	ldr	r0, [pc, #140]	; (16e4 <Reset_Handler+0xb0>)
    1656:	4922      	ldr	r1, [pc, #136]	; (16e0 <Reset_Handler+0xac>)
    1658:	588c      	ldr	r4, [r1, r2]
    165a:	5084      	str	r4, [r0, r2]
    165c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    165e:	429a      	cmp	r2, r3
    1660:	d1fa      	bne.n	1658 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1662:	4a23      	ldr	r2, [pc, #140]	; (16f0 <Reset_Handler+0xbc>)
    1664:	4b23      	ldr	r3, [pc, #140]	; (16f4 <Reset_Handler+0xc0>)
    1666:	429a      	cmp	r2, r3
    1668:	d20a      	bcs.n	1680 <Reset_Handler+0x4c>
    166a:	43d3      	mvns	r3, r2
    166c:	4921      	ldr	r1, [pc, #132]	; (16f4 <Reset_Handler+0xc0>)
    166e:	185b      	adds	r3, r3, r1
    1670:	2103      	movs	r1, #3
    1672:	438b      	bics	r3, r1
    1674:	3304      	adds	r3, #4
    1676:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1678:	2100      	movs	r1, #0
    167a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    167c:	4293      	cmp	r3, r2
    167e:	d1fc      	bne.n	167a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1680:	4a1d      	ldr	r2, [pc, #116]	; (16f8 <Reset_Handler+0xc4>)
    1682:	21ff      	movs	r1, #255	; 0xff
    1684:	4b1d      	ldr	r3, [pc, #116]	; (16fc <Reset_Handler+0xc8>)
    1686:	438b      	bics	r3, r1
    1688:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    168a:	39fd      	subs	r1, #253	; 0xfd
    168c:	2390      	movs	r3, #144	; 0x90
    168e:	005b      	lsls	r3, r3, #1
    1690:	4a1b      	ldr	r2, [pc, #108]	; (1700 <Reset_Handler+0xcc>)
    1692:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1694:	4a1b      	ldr	r2, [pc, #108]	; (1704 <Reset_Handler+0xd0>)
    1696:	78d3      	ldrb	r3, [r2, #3]
    1698:	2503      	movs	r5, #3
    169a:	43ab      	bics	r3, r5
    169c:	2402      	movs	r4, #2
    169e:	4323      	orrs	r3, r4
    16a0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    16a2:	78d3      	ldrb	r3, [r2, #3]
    16a4:	270c      	movs	r7, #12
    16a6:	43bb      	bics	r3, r7
    16a8:	2608      	movs	r6, #8
    16aa:	4333      	orrs	r3, r6
    16ac:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    16ae:	4b16      	ldr	r3, [pc, #88]	; (1708 <Reset_Handler+0xd4>)
    16b0:	7b98      	ldrb	r0, [r3, #14]
    16b2:	2230      	movs	r2, #48	; 0x30
    16b4:	4390      	bics	r0, r2
    16b6:	2220      	movs	r2, #32
    16b8:	4310      	orrs	r0, r2
    16ba:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    16bc:	7b99      	ldrb	r1, [r3, #14]
    16be:	43b9      	bics	r1, r7
    16c0:	4331      	orrs	r1, r6
    16c2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    16c4:	7b9a      	ldrb	r2, [r3, #14]
    16c6:	43aa      	bics	r2, r5
    16c8:	4322      	orrs	r2, r4
    16ca:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    16cc:	4a0f      	ldr	r2, [pc, #60]	; (170c <Reset_Handler+0xd8>)
    16ce:	6853      	ldr	r3, [r2, #4]
    16d0:	2180      	movs	r1, #128	; 0x80
    16d2:	430b      	orrs	r3, r1
    16d4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    16d6:	4b0e      	ldr	r3, [pc, #56]	; (1710 <Reset_Handler+0xdc>)
    16d8:	4798      	blx	r3
        main();
    16da:	4b0e      	ldr	r3, [pc, #56]	; (1714 <Reset_Handler+0xe0>)
    16dc:	4798      	blx	r3
    16de:	e7fe      	b.n	16de <Reset_Handler+0xaa>
    16e0:	00002d58 	.word	0x00002d58
    16e4:	20000000 	.word	0x20000000
    16e8:	20000070 	.word	0x20000070
    16ec:	20000004 	.word	0x20000004
    16f0:	20000070 	.word	0x20000070
    16f4:	2000061c 	.word	0x2000061c
    16f8:	e000ed00 	.word	0xe000ed00
    16fc:	00000000 	.word	0x00000000
    1700:	41007000 	.word	0x41007000
    1704:	41005000 	.word	0x41005000
    1708:	41004800 	.word	0x41004800
    170c:	41004000 	.word	0x41004000
    1710:	00001bf5 	.word	0x00001bf5
    1714:	00001a2d 	.word	0x00001a2d

00001718 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1718:	b5f0      	push	{r4, r5, r6, r7, lr}
    171a:	46c6      	mov	lr, r8
    171c:	b500      	push	{lr}
    171e:	000c      	movs	r4, r1
    1720:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1722:	2800      	cmp	r0, #0
    1724:	d10f      	bne.n	1746 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1726:	2a00      	cmp	r2, #0
    1728:	dd11      	ble.n	174e <_read+0x36>
    172a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    172c:	4e09      	ldr	r6, [pc, #36]	; (1754 <_read+0x3c>)
    172e:	4d0a      	ldr	r5, [pc, #40]	; (1758 <_read+0x40>)
    1730:	6830      	ldr	r0, [r6, #0]
    1732:	0021      	movs	r1, r4
    1734:	682b      	ldr	r3, [r5, #0]
    1736:	4798      	blx	r3
		ptr++;
    1738:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    173a:	42bc      	cmp	r4, r7
    173c:	d1f8      	bne.n	1730 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    173e:	4640      	mov	r0, r8
    1740:	bc04      	pop	{r2}
    1742:	4690      	mov	r8, r2
    1744:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1746:	2301      	movs	r3, #1
    1748:	425b      	negs	r3, r3
    174a:	4698      	mov	r8, r3
    174c:	e7f7      	b.n	173e <_read+0x26>
	for (; len > 0; --len) {
    174e:	4680      	mov	r8, r0
    1750:	e7f5      	b.n	173e <_read+0x26>
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	20000218 	.word	0x20000218
    1758:	20000210 	.word	0x20000210

0000175c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    175c:	b5f0      	push	{r4, r5, r6, r7, lr}
    175e:	46c6      	mov	lr, r8
    1760:	b500      	push	{lr}
    1762:	000e      	movs	r6, r1
    1764:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1766:	3801      	subs	r0, #1
    1768:	2802      	cmp	r0, #2
    176a:	d810      	bhi.n	178e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    176c:	2a00      	cmp	r2, #0
    176e:	d011      	beq.n	1794 <_write+0x38>
    1770:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1772:	4b0c      	ldr	r3, [pc, #48]	; (17a4 <_write+0x48>)
    1774:	4698      	mov	r8, r3
    1776:	4f0c      	ldr	r7, [pc, #48]	; (17a8 <_write+0x4c>)
    1778:	4643      	mov	r3, r8
    177a:	6818      	ldr	r0, [r3, #0]
    177c:	5d31      	ldrb	r1, [r6, r4]
    177e:	683b      	ldr	r3, [r7, #0]
    1780:	4798      	blx	r3
    1782:	2800      	cmp	r0, #0
    1784:	db08      	blt.n	1798 <_write+0x3c>
			return -1;
		}
		++nChars;
    1786:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1788:	42a5      	cmp	r5, r4
    178a:	d1f5      	bne.n	1778 <_write+0x1c>
    178c:	e006      	b.n	179c <_write+0x40>
		return -1;
    178e:	2401      	movs	r4, #1
    1790:	4264      	negs	r4, r4
    1792:	e003      	b.n	179c <_write+0x40>
	for (; len != 0; --len) {
    1794:	0014      	movs	r4, r2
    1796:	e001      	b.n	179c <_write+0x40>
			return -1;
    1798:	2401      	movs	r4, #1
    179a:	4264      	negs	r4, r4
	}
	return nChars;
}
    179c:	0020      	movs	r0, r4
    179e:	bc04      	pop	{r2}
    17a0:	4690      	mov	r8, r2
    17a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17a4:	20000218 	.word	0x20000218
    17a8:	20000214 	.word	0x20000214

000017ac <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    17ac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    17ae:	4a06      	ldr	r2, [pc, #24]	; (17c8 <_sbrk+0x1c>)
    17b0:	6812      	ldr	r2, [r2, #0]
    17b2:	2a00      	cmp	r2, #0
    17b4:	d004      	beq.n	17c0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    17b6:	4a04      	ldr	r2, [pc, #16]	; (17c8 <_sbrk+0x1c>)
    17b8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    17ba:	18c3      	adds	r3, r0, r3
    17bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    17be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    17c0:	4902      	ldr	r1, [pc, #8]	; (17cc <_sbrk+0x20>)
    17c2:	4a01      	ldr	r2, [pc, #4]	; (17c8 <_sbrk+0x1c>)
    17c4:	6011      	str	r1, [r2, #0]
    17c6:	e7f6      	b.n	17b6 <_sbrk+0xa>
    17c8:	200000c8 	.word	0x200000c8
    17cc:	20002620 	.word	0x20002620

000017d0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    17d0:	2001      	movs	r0, #1
    17d2:	4240      	negs	r0, r0
    17d4:	4770      	bx	lr

000017d6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    17d6:	2380      	movs	r3, #128	; 0x80
    17d8:	019b      	lsls	r3, r3, #6
    17da:	604b      	str	r3, [r1, #4]

	return 0;
}
    17dc:	2000      	movs	r0, #0
    17de:	4770      	bx	lr

000017e0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    17e0:	2001      	movs	r0, #1
    17e2:	4770      	bx	lr

000017e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    17e4:	2000      	movs	r0, #0
    17e6:	4770      	bx	lr

000017e8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    17e8:	b570      	push	{r4, r5, r6, lr}
    17ea:	b082      	sub	sp, #8
    17ec:	0005      	movs	r5, r0
    17ee:	000e      	movs	r6, r1
	uint16_t temp = 0;
    17f0:	2200      	movs	r2, #0
    17f2:	466b      	mov	r3, sp
    17f4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    17f6:	4c06      	ldr	r4, [pc, #24]	; (1810 <usart_serial_getchar+0x28>)
    17f8:	466b      	mov	r3, sp
    17fa:	1d99      	adds	r1, r3, #6
    17fc:	0028      	movs	r0, r5
    17fe:	47a0      	blx	r4
    1800:	2800      	cmp	r0, #0
    1802:	d1f9      	bne.n	17f8 <usart_serial_getchar+0x10>

	*c = temp;
    1804:	466b      	mov	r3, sp
    1806:	3306      	adds	r3, #6
    1808:	881b      	ldrh	r3, [r3, #0]
    180a:	7033      	strb	r3, [r6, #0]
}
    180c:	b002      	add	sp, #8
    180e:	bd70      	pop	{r4, r5, r6, pc}
    1810:	00000b75 	.word	0x00000b75

00001814 <usart_serial_putchar>:
{
    1814:	b570      	push	{r4, r5, r6, lr}
    1816:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1818:	b28c      	uxth	r4, r1
    181a:	4e03      	ldr	r6, [pc, #12]	; (1828 <usart_serial_putchar+0x14>)
    181c:	0021      	movs	r1, r4
    181e:	0028      	movs	r0, r5
    1820:	47b0      	blx	r6
    1822:	2800      	cmp	r0, #0
    1824:	d1fa      	bne.n	181c <usart_serial_putchar+0x8>
}
    1826:	bd70      	pop	{r4, r5, r6, pc}
    1828:	00000b49 	.word	0x00000b49

0000182c <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    182c:	b510      	push	{r4, lr}
    182e:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    1830:	466b      	mov	r3, sp
    1832:	1ddc      	adds	r4, r3, #7
    1834:	2201      	movs	r2, #1
    1836:	0021      	movs	r1, r4
    1838:	480f      	ldr	r0, [pc, #60]	; (1878 <USART_HOST_ISR_VECT+0x4c>)
    183a:	4b10      	ldr	r3, [pc, #64]	; (187c <USART_HOST_ISR_VECT+0x50>)
    183c:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    183e:	b672      	cpsid	i
    1840:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    1844:	2200      	movs	r2, #0
    1846:	4b0e      	ldr	r3, [pc, #56]	; (1880 <USART_HOST_ISR_VECT+0x54>)
    1848:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    184a:	4b0e      	ldr	r3, [pc, #56]	; (1884 <USART_HOST_ISR_VECT+0x58>)
    184c:	781b      	ldrb	r3, [r3, #0]
    184e:	7821      	ldrb	r1, [r4, #0]
    1850:	4a0d      	ldr	r2, [pc, #52]	; (1888 <USART_HOST_ISR_VECT+0x5c>)
    1852:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    1854:	2b9b      	cmp	r3, #155	; 0x9b
    1856:	d00a      	beq.n	186e <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    1858:	3301      	adds	r3, #1
    185a:	4a0a      	ldr	r2, [pc, #40]	; (1884 <USART_HOST_ISR_VECT+0x58>)
    185c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    185e:	2201      	movs	r2, #1
    1860:	4b07      	ldr	r3, [pc, #28]	; (1880 <USART_HOST_ISR_VECT+0x54>)
    1862:	701a      	strb	r2, [r3, #0]
    1864:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1868:	b662      	cpsie	i
}
    186a:	b002      	add	sp, #8
    186c:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    186e:	2200      	movs	r2, #0
    1870:	4b04      	ldr	r3, [pc, #16]	; (1884 <USART_HOST_ISR_VECT+0x58>)
    1872:	701a      	strb	r2, [r3, #0]
    1874:	e7f3      	b.n	185e <USART_HOST_ISR_VECT+0x32>
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	200000cc 	.word	0x200000cc
    187c:	00000be5 	.word	0x00000be5
    1880:	20000008 	.word	0x20000008
    1884:	2000019c 	.word	0x2000019c
    1888:	20000100 	.word	0x20000100

0000188c <sio2host_init>:
{
    188c:	b5f0      	push	{r4, r5, r6, r7, lr}
    188e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1890:	2380      	movs	r3, #128	; 0x80
    1892:	05db      	lsls	r3, r3, #23
    1894:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1896:	2300      	movs	r3, #0
    1898:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    189a:	22ff      	movs	r2, #255	; 0xff
    189c:	4669      	mov	r1, sp
    189e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    18a0:	2200      	movs	r2, #0
    18a2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    18a4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    18a6:	2401      	movs	r4, #1
    18a8:	2124      	movs	r1, #36	; 0x24
    18aa:	4668      	mov	r0, sp
    18ac:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    18ae:	3101      	adds	r1, #1
    18b0:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    18b2:	3101      	adds	r1, #1
    18b4:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    18b6:	3101      	adds	r1, #1
    18b8:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    18ba:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    18bc:	3105      	adds	r1, #5
    18be:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    18c0:	3101      	adds	r1, #1
    18c2:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    18c4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    18c6:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    18c8:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    18ca:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    18cc:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    18ce:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    18d0:	2313      	movs	r3, #19
    18d2:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    18d4:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    18d6:	2380      	movs	r3, #128	; 0x80
    18d8:	035b      	lsls	r3, r3, #13
    18da:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    18dc:	4b2f      	ldr	r3, [pc, #188]	; (199c <sio2host_init+0x110>)
    18de:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    18e0:	4b2f      	ldr	r3, [pc, #188]	; (19a0 <sio2host_init+0x114>)
    18e2:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    18e4:	2301      	movs	r3, #1
    18e6:	425b      	negs	r3, r3
    18e8:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    18ea:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    18ec:	23e1      	movs	r3, #225	; 0xe1
    18ee:	025b      	lsls	r3, r3, #9
    18f0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    18f2:	4d2c      	ldr	r5, [pc, #176]	; (19a4 <sio2host_init+0x118>)
    18f4:	4b2c      	ldr	r3, [pc, #176]	; (19a8 <sio2host_init+0x11c>)
    18f6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    18f8:	4a2c      	ldr	r2, [pc, #176]	; (19ac <sio2host_init+0x120>)
    18fa:	4b2d      	ldr	r3, [pc, #180]	; (19b0 <sio2host_init+0x124>)
    18fc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    18fe:	4a2d      	ldr	r2, [pc, #180]	; (19b4 <sio2host_init+0x128>)
    1900:	4b2d      	ldr	r3, [pc, #180]	; (19b8 <sio2host_init+0x12c>)
    1902:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1904:	466a      	mov	r2, sp
    1906:	492d      	ldr	r1, [pc, #180]	; (19bc <sio2host_init+0x130>)
    1908:	0028      	movs	r0, r5
    190a:	4b2d      	ldr	r3, [pc, #180]	; (19c0 <sio2host_init+0x134>)
    190c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    190e:	4f2d      	ldr	r7, [pc, #180]	; (19c4 <sio2host_init+0x138>)
    1910:	683b      	ldr	r3, [r7, #0]
    1912:	6898      	ldr	r0, [r3, #8]
    1914:	2100      	movs	r1, #0
    1916:	4e2c      	ldr	r6, [pc, #176]	; (19c8 <sio2host_init+0x13c>)
    1918:	47b0      	blx	r6
	setbuf(stdin, NULL);
    191a:	683b      	ldr	r3, [r7, #0]
    191c:	6858      	ldr	r0, [r3, #4]
    191e:	2100      	movs	r1, #0
    1920:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1922:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1924:	0030      	movs	r0, r6
    1926:	4b29      	ldr	r3, [pc, #164]	; (19cc <sio2host_init+0x140>)
    1928:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    192a:	231f      	movs	r3, #31
    192c:	4018      	ands	r0, r3
    192e:	4084      	lsls	r4, r0
    1930:	4b27      	ldr	r3, [pc, #156]	; (19d0 <sio2host_init+0x144>)
    1932:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1934:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1936:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1938:	2b00      	cmp	r3, #0
    193a:	d1fc      	bne.n	1936 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    193c:	6833      	ldr	r3, [r6, #0]
    193e:	2202      	movs	r2, #2
    1940:	4313      	orrs	r3, r2
    1942:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1944:	4b17      	ldr	r3, [pc, #92]	; (19a4 <sio2host_init+0x118>)
    1946:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1948:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    194a:	2a00      	cmp	r2, #0
    194c:	d1fc      	bne.n	1948 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    194e:	6859      	ldr	r1, [r3, #4]
    1950:	2280      	movs	r2, #128	; 0x80
    1952:	0252      	lsls	r2, r2, #9
    1954:	430a      	orrs	r2, r1
    1956:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1958:	2101      	movs	r1, #1
    195a:	4a12      	ldr	r2, [pc, #72]	; (19a4 <sio2host_init+0x118>)
    195c:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    195e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1960:	2a00      	cmp	r2, #0
    1962:	d1fc      	bne.n	195e <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    1964:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1966:	2a00      	cmp	r2, #0
    1968:	d1fc      	bne.n	1964 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    196a:	6859      	ldr	r1, [r3, #4]
    196c:	2280      	movs	r2, #128	; 0x80
    196e:	0292      	lsls	r2, r2, #10
    1970:	430a      	orrs	r2, r1
    1972:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    1974:	2101      	movs	r1, #1
    1976:	4a0b      	ldr	r2, [pc, #44]	; (19a4 <sio2host_init+0x118>)
    1978:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    197a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    197c:	2a00      	cmp	r2, #0
    197e:	d1fc      	bne.n	197a <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    1980:	4914      	ldr	r1, [pc, #80]	; (19d4 <sio2host_init+0x148>)
    1982:	2000      	movs	r0, #0
    1984:	4b14      	ldr	r3, [pc, #80]	; (19d8 <sio2host_init+0x14c>)
    1986:	4798      	blx	r3
    1988:	2204      	movs	r2, #4
    198a:	4b0c      	ldr	r3, [pc, #48]	; (19bc <sio2host_init+0x130>)
    198c:	759a      	strb	r2, [r3, #22]
    198e:	32fd      	adds	r2, #253	; 0xfd
    1990:	32ff      	adds	r2, #255	; 0xff
    1992:	4b0f      	ldr	r3, [pc, #60]	; (19d0 <sio2host_init+0x144>)
    1994:	601a      	str	r2, [r3, #0]
}
    1996:	b011      	add	sp, #68	; 0x44
    1998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	00040003 	.word	0x00040003
    19a0:	00050003 	.word	0x00050003
    19a4:	200000cc 	.word	0x200000cc
    19a8:	20000218 	.word	0x20000218
    19ac:	00001815 	.word	0x00001815
    19b0:	20000214 	.word	0x20000214
    19b4:	000017e9 	.word	0x000017e9
    19b8:	20000210 	.word	0x20000210
    19bc:	42000800 	.word	0x42000800
    19c0:	00000805 	.word	0x00000805
    19c4:	2000000c 	.word	0x2000000c
    19c8:	00001c81 	.word	0x00001c81
    19cc:	00000775 	.word	0x00000775
    19d0:	e000e100 	.word	0xe000e100
    19d4:	0000182d 	.word	0x0000182d
    19d8:	00000739 	.word	0x00000739

000019dc <configure_tc>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    19dc:	4b11      	ldr	r3, [pc, #68]	; (1a24 <configure_tc+0x48>)
    19de:	2200      	movs	r2, #0
    19e0:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    19e2:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    19e4:	2100      	movs	r1, #0
    19e6:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    19e8:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    19ea:	7059      	strb	r1, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    19ec:	7299      	strb	r1, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    19ee:	72d9      	strb	r1, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    19f0:	7319      	strb	r1, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    19f2:	7399      	strb	r1, [r3, #14]
	config->oneshot                    = false;
    19f4:	7359      	strb	r1, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    19f6:	7419      	strb	r1, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    19f8:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    19fa:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    19fc:	7719      	strb	r1, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    19fe:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1a00:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1a02:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1a04:	859a      	strh	r2, [r3, #44]	; 0x2c

void configure_tc(void)
{	
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    1a06:	3240      	adds	r2, #64	; 0x40
    1a08:	719a      	strb	r2, [r3, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 0xFFFF;
    1a0a:	3a41      	subs	r2, #65	; 0x41
    1a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a0e:	4b06      	ldr	r3, [pc, #24]	; (1a28 <configure_tc+0x4c>)
    1a10:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a12:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1a14:	b25b      	sxtb	r3, r3
    1a16:	2b00      	cmp	r3, #0
    1a18:	dbfb      	blt.n	1a12 <configure_tc+0x36>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1a1a:	8813      	ldrh	r3, [r2, #0]
    1a1c:	2102      	movs	r1, #2
    1a1e:	430b      	orrs	r3, r1
    1a20:	8013      	strh	r3, [r2, #0]
	// tc_init(&tc_instance, PWM_MODULE, &config_tc);
	tc_enable(&tc_instance);	
}
    1a22:	4770      	bx	lr
    1a24:	200005c4 	.word	0x200005c4
    1a28:	200005fc 	.word	0x200005fc

00001a2c <main>:
{	
    1a2c:	b570      	push	{r4, r5, r6, lr}
	system_init();
    1a2e:	4b0d      	ldr	r3, [pc, #52]	; (1a64 <main+0x38>)
    1a30:	4798      	blx	r3
	delay_init();
    1a32:	4b0d      	ldr	r3, [pc, #52]	; (1a68 <main+0x3c>)
    1a34:	4798      	blx	r3
	cpu_irq_enable();	
    1a36:	2201      	movs	r2, #1
    1a38:	4b0c      	ldr	r3, [pc, #48]	; (1a6c <main+0x40>)
    1a3a:	701a      	strb	r2, [r3, #0]
    1a3c:	f3bf 8f5f 	dmb	sy
    1a40:	b662      	cpsie	i
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA27;	// RS3485 ENABLE PIN CONTROL PORT
    1a42:	2280      	movs	r2, #128	; 0x80
    1a44:	0512      	lsls	r2, r2, #20
    1a46:	4b0a      	ldr	r3, [pc, #40]	; (1a70 <main+0x44>)
    1a48:	609a      	str	r2, [r3, #8]
	configure_tc();
    1a4a:	4b0a      	ldr	r3, [pc, #40]	; (1a74 <main+0x48>)
    1a4c:	4798      	blx	r3
	sio2host_init();
    1a4e:	4b0a      	ldr	r3, [pc, #40]	; (1a78 <main+0x4c>)
    1a50:	4798      	blx	r3
		printf("Hellow World!");
    1a52:	4e0a      	ldr	r6, [pc, #40]	; (1a7c <main+0x50>)
    1a54:	4d0a      	ldr	r5, [pc, #40]	; (1a80 <main+0x54>)
		delay_ms(1000);	
    1a56:	4c0b      	ldr	r4, [pc, #44]	; (1a84 <main+0x58>)
		printf("Hellow World!");
    1a58:	0030      	movs	r0, r6
    1a5a:	47a8      	blx	r5
		delay_ms(1000);	
    1a5c:	20fa      	movs	r0, #250	; 0xfa
    1a5e:	0080      	lsls	r0, r0, #2
    1a60:	47a0      	blx	r4
    1a62:	e7f9      	b.n	1a58 <main+0x2c>
    1a64:	00001571 	.word	0x00001571
    1a68:	00000115 	.word	0x00000115
    1a6c:	20000008 	.word	0x20000008
    1a70:	41004400 	.word	0x41004400
    1a74:	000019dd 	.word	0x000019dd
    1a78:	0000188d 	.word	0x0000188d
    1a7c:	00002c90 	.word	0x00002c90
    1a80:	00001c4d 	.word	0x00001c4d
    1a84:	00000155 	.word	0x00000155

00001a88 <__udivsi3>:
    1a88:	2200      	movs	r2, #0
    1a8a:	0843      	lsrs	r3, r0, #1
    1a8c:	428b      	cmp	r3, r1
    1a8e:	d374      	bcc.n	1b7a <__udivsi3+0xf2>
    1a90:	0903      	lsrs	r3, r0, #4
    1a92:	428b      	cmp	r3, r1
    1a94:	d35f      	bcc.n	1b56 <__udivsi3+0xce>
    1a96:	0a03      	lsrs	r3, r0, #8
    1a98:	428b      	cmp	r3, r1
    1a9a:	d344      	bcc.n	1b26 <__udivsi3+0x9e>
    1a9c:	0b03      	lsrs	r3, r0, #12
    1a9e:	428b      	cmp	r3, r1
    1aa0:	d328      	bcc.n	1af4 <__udivsi3+0x6c>
    1aa2:	0c03      	lsrs	r3, r0, #16
    1aa4:	428b      	cmp	r3, r1
    1aa6:	d30d      	bcc.n	1ac4 <__udivsi3+0x3c>
    1aa8:	22ff      	movs	r2, #255	; 0xff
    1aaa:	0209      	lsls	r1, r1, #8
    1aac:	ba12      	rev	r2, r2
    1aae:	0c03      	lsrs	r3, r0, #16
    1ab0:	428b      	cmp	r3, r1
    1ab2:	d302      	bcc.n	1aba <__udivsi3+0x32>
    1ab4:	1212      	asrs	r2, r2, #8
    1ab6:	0209      	lsls	r1, r1, #8
    1ab8:	d065      	beq.n	1b86 <__udivsi3+0xfe>
    1aba:	0b03      	lsrs	r3, r0, #12
    1abc:	428b      	cmp	r3, r1
    1abe:	d319      	bcc.n	1af4 <__udivsi3+0x6c>
    1ac0:	e000      	b.n	1ac4 <__udivsi3+0x3c>
    1ac2:	0a09      	lsrs	r1, r1, #8
    1ac4:	0bc3      	lsrs	r3, r0, #15
    1ac6:	428b      	cmp	r3, r1
    1ac8:	d301      	bcc.n	1ace <__udivsi3+0x46>
    1aca:	03cb      	lsls	r3, r1, #15
    1acc:	1ac0      	subs	r0, r0, r3
    1ace:	4152      	adcs	r2, r2
    1ad0:	0b83      	lsrs	r3, r0, #14
    1ad2:	428b      	cmp	r3, r1
    1ad4:	d301      	bcc.n	1ada <__udivsi3+0x52>
    1ad6:	038b      	lsls	r3, r1, #14
    1ad8:	1ac0      	subs	r0, r0, r3
    1ada:	4152      	adcs	r2, r2
    1adc:	0b43      	lsrs	r3, r0, #13
    1ade:	428b      	cmp	r3, r1
    1ae0:	d301      	bcc.n	1ae6 <__udivsi3+0x5e>
    1ae2:	034b      	lsls	r3, r1, #13
    1ae4:	1ac0      	subs	r0, r0, r3
    1ae6:	4152      	adcs	r2, r2
    1ae8:	0b03      	lsrs	r3, r0, #12
    1aea:	428b      	cmp	r3, r1
    1aec:	d301      	bcc.n	1af2 <__udivsi3+0x6a>
    1aee:	030b      	lsls	r3, r1, #12
    1af0:	1ac0      	subs	r0, r0, r3
    1af2:	4152      	adcs	r2, r2
    1af4:	0ac3      	lsrs	r3, r0, #11
    1af6:	428b      	cmp	r3, r1
    1af8:	d301      	bcc.n	1afe <__udivsi3+0x76>
    1afa:	02cb      	lsls	r3, r1, #11
    1afc:	1ac0      	subs	r0, r0, r3
    1afe:	4152      	adcs	r2, r2
    1b00:	0a83      	lsrs	r3, r0, #10
    1b02:	428b      	cmp	r3, r1
    1b04:	d301      	bcc.n	1b0a <__udivsi3+0x82>
    1b06:	028b      	lsls	r3, r1, #10
    1b08:	1ac0      	subs	r0, r0, r3
    1b0a:	4152      	adcs	r2, r2
    1b0c:	0a43      	lsrs	r3, r0, #9
    1b0e:	428b      	cmp	r3, r1
    1b10:	d301      	bcc.n	1b16 <__udivsi3+0x8e>
    1b12:	024b      	lsls	r3, r1, #9
    1b14:	1ac0      	subs	r0, r0, r3
    1b16:	4152      	adcs	r2, r2
    1b18:	0a03      	lsrs	r3, r0, #8
    1b1a:	428b      	cmp	r3, r1
    1b1c:	d301      	bcc.n	1b22 <__udivsi3+0x9a>
    1b1e:	020b      	lsls	r3, r1, #8
    1b20:	1ac0      	subs	r0, r0, r3
    1b22:	4152      	adcs	r2, r2
    1b24:	d2cd      	bcs.n	1ac2 <__udivsi3+0x3a>
    1b26:	09c3      	lsrs	r3, r0, #7
    1b28:	428b      	cmp	r3, r1
    1b2a:	d301      	bcc.n	1b30 <__udivsi3+0xa8>
    1b2c:	01cb      	lsls	r3, r1, #7
    1b2e:	1ac0      	subs	r0, r0, r3
    1b30:	4152      	adcs	r2, r2
    1b32:	0983      	lsrs	r3, r0, #6
    1b34:	428b      	cmp	r3, r1
    1b36:	d301      	bcc.n	1b3c <__udivsi3+0xb4>
    1b38:	018b      	lsls	r3, r1, #6
    1b3a:	1ac0      	subs	r0, r0, r3
    1b3c:	4152      	adcs	r2, r2
    1b3e:	0943      	lsrs	r3, r0, #5
    1b40:	428b      	cmp	r3, r1
    1b42:	d301      	bcc.n	1b48 <__udivsi3+0xc0>
    1b44:	014b      	lsls	r3, r1, #5
    1b46:	1ac0      	subs	r0, r0, r3
    1b48:	4152      	adcs	r2, r2
    1b4a:	0903      	lsrs	r3, r0, #4
    1b4c:	428b      	cmp	r3, r1
    1b4e:	d301      	bcc.n	1b54 <__udivsi3+0xcc>
    1b50:	010b      	lsls	r3, r1, #4
    1b52:	1ac0      	subs	r0, r0, r3
    1b54:	4152      	adcs	r2, r2
    1b56:	08c3      	lsrs	r3, r0, #3
    1b58:	428b      	cmp	r3, r1
    1b5a:	d301      	bcc.n	1b60 <__udivsi3+0xd8>
    1b5c:	00cb      	lsls	r3, r1, #3
    1b5e:	1ac0      	subs	r0, r0, r3
    1b60:	4152      	adcs	r2, r2
    1b62:	0883      	lsrs	r3, r0, #2
    1b64:	428b      	cmp	r3, r1
    1b66:	d301      	bcc.n	1b6c <__udivsi3+0xe4>
    1b68:	008b      	lsls	r3, r1, #2
    1b6a:	1ac0      	subs	r0, r0, r3
    1b6c:	4152      	adcs	r2, r2
    1b6e:	0843      	lsrs	r3, r0, #1
    1b70:	428b      	cmp	r3, r1
    1b72:	d301      	bcc.n	1b78 <__udivsi3+0xf0>
    1b74:	004b      	lsls	r3, r1, #1
    1b76:	1ac0      	subs	r0, r0, r3
    1b78:	4152      	adcs	r2, r2
    1b7a:	1a41      	subs	r1, r0, r1
    1b7c:	d200      	bcs.n	1b80 <__udivsi3+0xf8>
    1b7e:	4601      	mov	r1, r0
    1b80:	4152      	adcs	r2, r2
    1b82:	4610      	mov	r0, r2
    1b84:	4770      	bx	lr
    1b86:	e7ff      	b.n	1b88 <__udivsi3+0x100>
    1b88:	b501      	push	{r0, lr}
    1b8a:	2000      	movs	r0, #0
    1b8c:	f000 f806 	bl	1b9c <__aeabi_idiv0>
    1b90:	bd02      	pop	{r1, pc}
    1b92:	46c0      	nop			; (mov r8, r8)

00001b94 <__aeabi_uidivmod>:
    1b94:	2900      	cmp	r1, #0
    1b96:	d0f7      	beq.n	1b88 <__udivsi3+0x100>
    1b98:	e776      	b.n	1a88 <__udivsi3>
    1b9a:	4770      	bx	lr

00001b9c <__aeabi_idiv0>:
    1b9c:	4770      	bx	lr
    1b9e:	46c0      	nop			; (mov r8, r8)

00001ba0 <__aeabi_lmul>:
    1ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ba2:	46ce      	mov	lr, r9
    1ba4:	4647      	mov	r7, r8
    1ba6:	0415      	lsls	r5, r2, #16
    1ba8:	0c2d      	lsrs	r5, r5, #16
    1baa:	002e      	movs	r6, r5
    1bac:	b580      	push	{r7, lr}
    1bae:	0407      	lsls	r7, r0, #16
    1bb0:	0c14      	lsrs	r4, r2, #16
    1bb2:	0c3f      	lsrs	r7, r7, #16
    1bb4:	4699      	mov	r9, r3
    1bb6:	0c03      	lsrs	r3, r0, #16
    1bb8:	437e      	muls	r6, r7
    1bba:	435d      	muls	r5, r3
    1bbc:	4367      	muls	r7, r4
    1bbe:	4363      	muls	r3, r4
    1bc0:	197f      	adds	r7, r7, r5
    1bc2:	0c34      	lsrs	r4, r6, #16
    1bc4:	19e4      	adds	r4, r4, r7
    1bc6:	469c      	mov	ip, r3
    1bc8:	42a5      	cmp	r5, r4
    1bca:	d903      	bls.n	1bd4 <__aeabi_lmul+0x34>
    1bcc:	2380      	movs	r3, #128	; 0x80
    1bce:	025b      	lsls	r3, r3, #9
    1bd0:	4698      	mov	r8, r3
    1bd2:	44c4      	add	ip, r8
    1bd4:	464b      	mov	r3, r9
    1bd6:	4351      	muls	r1, r2
    1bd8:	4343      	muls	r3, r0
    1bda:	0436      	lsls	r6, r6, #16
    1bdc:	0c36      	lsrs	r6, r6, #16
    1bde:	0c25      	lsrs	r5, r4, #16
    1be0:	0424      	lsls	r4, r4, #16
    1be2:	4465      	add	r5, ip
    1be4:	19a4      	adds	r4, r4, r6
    1be6:	1859      	adds	r1, r3, r1
    1be8:	1949      	adds	r1, r1, r5
    1bea:	0020      	movs	r0, r4
    1bec:	bc0c      	pop	{r2, r3}
    1bee:	4690      	mov	r8, r2
    1bf0:	4699      	mov	r9, r3
    1bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001bf4 <__libc_init_array>:
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	2600      	movs	r6, #0
    1bf8:	4d0c      	ldr	r5, [pc, #48]	; (1c2c <__libc_init_array+0x38>)
    1bfa:	4c0d      	ldr	r4, [pc, #52]	; (1c30 <__libc_init_array+0x3c>)
    1bfc:	1b64      	subs	r4, r4, r5
    1bfe:	10a4      	asrs	r4, r4, #2
    1c00:	42a6      	cmp	r6, r4
    1c02:	d109      	bne.n	1c18 <__libc_init_array+0x24>
    1c04:	2600      	movs	r6, #0
    1c06:	f001 f897 	bl	2d38 <_init>
    1c0a:	4d0a      	ldr	r5, [pc, #40]	; (1c34 <__libc_init_array+0x40>)
    1c0c:	4c0a      	ldr	r4, [pc, #40]	; (1c38 <__libc_init_array+0x44>)
    1c0e:	1b64      	subs	r4, r4, r5
    1c10:	10a4      	asrs	r4, r4, #2
    1c12:	42a6      	cmp	r6, r4
    1c14:	d105      	bne.n	1c22 <__libc_init_array+0x2e>
    1c16:	bd70      	pop	{r4, r5, r6, pc}
    1c18:	00b3      	lsls	r3, r6, #2
    1c1a:	58eb      	ldr	r3, [r5, r3]
    1c1c:	4798      	blx	r3
    1c1e:	3601      	adds	r6, #1
    1c20:	e7ee      	b.n	1c00 <__libc_init_array+0xc>
    1c22:	00b3      	lsls	r3, r6, #2
    1c24:	58eb      	ldr	r3, [r5, r3]
    1c26:	4798      	blx	r3
    1c28:	3601      	adds	r6, #1
    1c2a:	e7f2      	b.n	1c12 <__libc_init_array+0x1e>
    1c2c:	00002d44 	.word	0x00002d44
    1c30:	00002d44 	.word	0x00002d44
    1c34:	00002d44 	.word	0x00002d44
    1c38:	00002d48 	.word	0x00002d48

00001c3c <memset>:
    1c3c:	0003      	movs	r3, r0
    1c3e:	1882      	adds	r2, r0, r2
    1c40:	4293      	cmp	r3, r2
    1c42:	d100      	bne.n	1c46 <memset+0xa>
    1c44:	4770      	bx	lr
    1c46:	7019      	strb	r1, [r3, #0]
    1c48:	3301      	adds	r3, #1
    1c4a:	e7f9      	b.n	1c40 <memset+0x4>

00001c4c <iprintf>:
    1c4c:	b40f      	push	{r0, r1, r2, r3}
    1c4e:	4b0b      	ldr	r3, [pc, #44]	; (1c7c <iprintf+0x30>)
    1c50:	b513      	push	{r0, r1, r4, lr}
    1c52:	681c      	ldr	r4, [r3, #0]
    1c54:	2c00      	cmp	r4, #0
    1c56:	d005      	beq.n	1c64 <iprintf+0x18>
    1c58:	69a3      	ldr	r3, [r4, #24]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d102      	bne.n	1c64 <iprintf+0x18>
    1c5e:	0020      	movs	r0, r4
    1c60:	f000 fa88 	bl	2174 <__sinit>
    1c64:	ab05      	add	r3, sp, #20
    1c66:	9a04      	ldr	r2, [sp, #16]
    1c68:	68a1      	ldr	r1, [r4, #8]
    1c6a:	0020      	movs	r0, r4
    1c6c:	9301      	str	r3, [sp, #4]
    1c6e:	f000 fc5d 	bl	252c <_vfiprintf_r>
    1c72:	bc16      	pop	{r1, r2, r4}
    1c74:	bc08      	pop	{r3}
    1c76:	b004      	add	sp, #16
    1c78:	4718      	bx	r3
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	2000000c 	.word	0x2000000c

00001c80 <setbuf>:
    1c80:	424a      	negs	r2, r1
    1c82:	414a      	adcs	r2, r1
    1c84:	2380      	movs	r3, #128	; 0x80
    1c86:	b510      	push	{r4, lr}
    1c88:	0052      	lsls	r2, r2, #1
    1c8a:	00db      	lsls	r3, r3, #3
    1c8c:	f000 f802 	bl	1c94 <setvbuf>
    1c90:	bd10      	pop	{r4, pc}
	...

00001c94 <setvbuf>:
    1c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c96:	001d      	movs	r5, r3
    1c98:	4b4f      	ldr	r3, [pc, #316]	; (1dd8 <setvbuf+0x144>)
    1c9a:	b085      	sub	sp, #20
    1c9c:	681e      	ldr	r6, [r3, #0]
    1c9e:	0004      	movs	r4, r0
    1ca0:	000f      	movs	r7, r1
    1ca2:	9200      	str	r2, [sp, #0]
    1ca4:	2e00      	cmp	r6, #0
    1ca6:	d005      	beq.n	1cb4 <setvbuf+0x20>
    1ca8:	69b3      	ldr	r3, [r6, #24]
    1caa:	2b00      	cmp	r3, #0
    1cac:	d102      	bne.n	1cb4 <setvbuf+0x20>
    1cae:	0030      	movs	r0, r6
    1cb0:	f000 fa60 	bl	2174 <__sinit>
    1cb4:	4b49      	ldr	r3, [pc, #292]	; (1ddc <setvbuf+0x148>)
    1cb6:	429c      	cmp	r4, r3
    1cb8:	d150      	bne.n	1d5c <setvbuf+0xc8>
    1cba:	6874      	ldr	r4, [r6, #4]
    1cbc:	9b00      	ldr	r3, [sp, #0]
    1cbe:	2b02      	cmp	r3, #2
    1cc0:	d005      	beq.n	1cce <setvbuf+0x3a>
    1cc2:	2b01      	cmp	r3, #1
    1cc4:	d900      	bls.n	1cc8 <setvbuf+0x34>
    1cc6:	e084      	b.n	1dd2 <setvbuf+0x13e>
    1cc8:	2d00      	cmp	r5, #0
    1cca:	da00      	bge.n	1cce <setvbuf+0x3a>
    1ccc:	e081      	b.n	1dd2 <setvbuf+0x13e>
    1cce:	0021      	movs	r1, r4
    1cd0:	0030      	movs	r0, r6
    1cd2:	f000 f9e1 	bl	2098 <_fflush_r>
    1cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1cd8:	2900      	cmp	r1, #0
    1cda:	d008      	beq.n	1cee <setvbuf+0x5a>
    1cdc:	0023      	movs	r3, r4
    1cde:	3344      	adds	r3, #68	; 0x44
    1ce0:	4299      	cmp	r1, r3
    1ce2:	d002      	beq.n	1cea <setvbuf+0x56>
    1ce4:	0030      	movs	r0, r6
    1ce6:	f000 fb51 	bl	238c <_free_r>
    1cea:	2300      	movs	r3, #0
    1cec:	6363      	str	r3, [r4, #52]	; 0x34
    1cee:	2300      	movs	r3, #0
    1cf0:	61a3      	str	r3, [r4, #24]
    1cf2:	6063      	str	r3, [r4, #4]
    1cf4:	89a3      	ldrh	r3, [r4, #12]
    1cf6:	061b      	lsls	r3, r3, #24
    1cf8:	d503      	bpl.n	1d02 <setvbuf+0x6e>
    1cfa:	6921      	ldr	r1, [r4, #16]
    1cfc:	0030      	movs	r0, r6
    1cfe:	f000 fb45 	bl	238c <_free_r>
    1d02:	89a3      	ldrh	r3, [r4, #12]
    1d04:	4a36      	ldr	r2, [pc, #216]	; (1de0 <setvbuf+0x14c>)
    1d06:	4013      	ands	r3, r2
    1d08:	81a3      	strh	r3, [r4, #12]
    1d0a:	9b00      	ldr	r3, [sp, #0]
    1d0c:	2b02      	cmp	r3, #2
    1d0e:	d05a      	beq.n	1dc6 <setvbuf+0x132>
    1d10:	ab03      	add	r3, sp, #12
    1d12:	aa02      	add	r2, sp, #8
    1d14:	0021      	movs	r1, r4
    1d16:	0030      	movs	r0, r6
    1d18:	f000 fac2 	bl	22a0 <__swhatbuf_r>
    1d1c:	89a3      	ldrh	r3, [r4, #12]
    1d1e:	4318      	orrs	r0, r3
    1d20:	81a0      	strh	r0, [r4, #12]
    1d22:	2d00      	cmp	r5, #0
    1d24:	d124      	bne.n	1d70 <setvbuf+0xdc>
    1d26:	9d02      	ldr	r5, [sp, #8]
    1d28:	0028      	movs	r0, r5
    1d2a:	f000 fb25 	bl	2378 <malloc>
    1d2e:	9501      	str	r5, [sp, #4]
    1d30:	1e07      	subs	r7, r0, #0
    1d32:	d142      	bne.n	1dba <setvbuf+0x126>
    1d34:	9b02      	ldr	r3, [sp, #8]
    1d36:	9301      	str	r3, [sp, #4]
    1d38:	42ab      	cmp	r3, r5
    1d3a:	d139      	bne.n	1db0 <setvbuf+0x11c>
    1d3c:	2001      	movs	r0, #1
    1d3e:	4240      	negs	r0, r0
    1d40:	2302      	movs	r3, #2
    1d42:	89a2      	ldrh	r2, [r4, #12]
    1d44:	4313      	orrs	r3, r2
    1d46:	81a3      	strh	r3, [r4, #12]
    1d48:	2300      	movs	r3, #0
    1d4a:	60a3      	str	r3, [r4, #8]
    1d4c:	0023      	movs	r3, r4
    1d4e:	3347      	adds	r3, #71	; 0x47
    1d50:	6023      	str	r3, [r4, #0]
    1d52:	6123      	str	r3, [r4, #16]
    1d54:	2301      	movs	r3, #1
    1d56:	6163      	str	r3, [r4, #20]
    1d58:	b005      	add	sp, #20
    1d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d5c:	4b21      	ldr	r3, [pc, #132]	; (1de4 <setvbuf+0x150>)
    1d5e:	429c      	cmp	r4, r3
    1d60:	d101      	bne.n	1d66 <setvbuf+0xd2>
    1d62:	68b4      	ldr	r4, [r6, #8]
    1d64:	e7aa      	b.n	1cbc <setvbuf+0x28>
    1d66:	4b20      	ldr	r3, [pc, #128]	; (1de8 <setvbuf+0x154>)
    1d68:	429c      	cmp	r4, r3
    1d6a:	d1a7      	bne.n	1cbc <setvbuf+0x28>
    1d6c:	68f4      	ldr	r4, [r6, #12]
    1d6e:	e7a5      	b.n	1cbc <setvbuf+0x28>
    1d70:	2f00      	cmp	r7, #0
    1d72:	d0d9      	beq.n	1d28 <setvbuf+0x94>
    1d74:	69b3      	ldr	r3, [r6, #24]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d102      	bne.n	1d80 <setvbuf+0xec>
    1d7a:	0030      	movs	r0, r6
    1d7c:	f000 f9fa 	bl	2174 <__sinit>
    1d80:	9b00      	ldr	r3, [sp, #0]
    1d82:	2b01      	cmp	r3, #1
    1d84:	d103      	bne.n	1d8e <setvbuf+0xfa>
    1d86:	89a3      	ldrh	r3, [r4, #12]
    1d88:	9a00      	ldr	r2, [sp, #0]
    1d8a:	431a      	orrs	r2, r3
    1d8c:	81a2      	strh	r2, [r4, #12]
    1d8e:	2008      	movs	r0, #8
    1d90:	89a3      	ldrh	r3, [r4, #12]
    1d92:	6027      	str	r7, [r4, #0]
    1d94:	6127      	str	r7, [r4, #16]
    1d96:	6165      	str	r5, [r4, #20]
    1d98:	4018      	ands	r0, r3
    1d9a:	d018      	beq.n	1dce <setvbuf+0x13a>
    1d9c:	2001      	movs	r0, #1
    1d9e:	4018      	ands	r0, r3
    1da0:	2300      	movs	r3, #0
    1da2:	4298      	cmp	r0, r3
    1da4:	d011      	beq.n	1dca <setvbuf+0x136>
    1da6:	426d      	negs	r5, r5
    1da8:	60a3      	str	r3, [r4, #8]
    1daa:	61a5      	str	r5, [r4, #24]
    1dac:	0018      	movs	r0, r3
    1dae:	e7d3      	b.n	1d58 <setvbuf+0xc4>
    1db0:	9801      	ldr	r0, [sp, #4]
    1db2:	f000 fae1 	bl	2378 <malloc>
    1db6:	1e07      	subs	r7, r0, #0
    1db8:	d0c0      	beq.n	1d3c <setvbuf+0xa8>
    1dba:	2380      	movs	r3, #128	; 0x80
    1dbc:	89a2      	ldrh	r2, [r4, #12]
    1dbe:	9d01      	ldr	r5, [sp, #4]
    1dc0:	4313      	orrs	r3, r2
    1dc2:	81a3      	strh	r3, [r4, #12]
    1dc4:	e7d6      	b.n	1d74 <setvbuf+0xe0>
    1dc6:	2000      	movs	r0, #0
    1dc8:	e7ba      	b.n	1d40 <setvbuf+0xac>
    1dca:	60a5      	str	r5, [r4, #8]
    1dcc:	e7c4      	b.n	1d58 <setvbuf+0xc4>
    1dce:	60a0      	str	r0, [r4, #8]
    1dd0:	e7c2      	b.n	1d58 <setvbuf+0xc4>
    1dd2:	2001      	movs	r0, #1
    1dd4:	4240      	negs	r0, r0
    1dd6:	e7bf      	b.n	1d58 <setvbuf+0xc4>
    1dd8:	2000000c 	.word	0x2000000c
    1ddc:	00002cc4 	.word	0x00002cc4
    1de0:	fffff35c 	.word	0xfffff35c
    1de4:	00002ce4 	.word	0x00002ce4
    1de8:	00002ca4 	.word	0x00002ca4

00001dec <__swbuf_r>:
    1dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dee:	0005      	movs	r5, r0
    1df0:	000e      	movs	r6, r1
    1df2:	0014      	movs	r4, r2
    1df4:	2800      	cmp	r0, #0
    1df6:	d004      	beq.n	1e02 <__swbuf_r+0x16>
    1df8:	6983      	ldr	r3, [r0, #24]
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d101      	bne.n	1e02 <__swbuf_r+0x16>
    1dfe:	f000 f9b9 	bl	2174 <__sinit>
    1e02:	4b22      	ldr	r3, [pc, #136]	; (1e8c <__swbuf_r+0xa0>)
    1e04:	429c      	cmp	r4, r3
    1e06:	d12d      	bne.n	1e64 <__swbuf_r+0x78>
    1e08:	686c      	ldr	r4, [r5, #4]
    1e0a:	69a3      	ldr	r3, [r4, #24]
    1e0c:	60a3      	str	r3, [r4, #8]
    1e0e:	89a3      	ldrh	r3, [r4, #12]
    1e10:	071b      	lsls	r3, r3, #28
    1e12:	d531      	bpl.n	1e78 <__swbuf_r+0x8c>
    1e14:	6923      	ldr	r3, [r4, #16]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d02e      	beq.n	1e78 <__swbuf_r+0x8c>
    1e1a:	6823      	ldr	r3, [r4, #0]
    1e1c:	6922      	ldr	r2, [r4, #16]
    1e1e:	b2f7      	uxtb	r7, r6
    1e20:	1a98      	subs	r0, r3, r2
    1e22:	6963      	ldr	r3, [r4, #20]
    1e24:	b2f6      	uxtb	r6, r6
    1e26:	4298      	cmp	r0, r3
    1e28:	db05      	blt.n	1e36 <__swbuf_r+0x4a>
    1e2a:	0021      	movs	r1, r4
    1e2c:	0028      	movs	r0, r5
    1e2e:	f000 f933 	bl	2098 <_fflush_r>
    1e32:	2800      	cmp	r0, #0
    1e34:	d126      	bne.n	1e84 <__swbuf_r+0x98>
    1e36:	68a3      	ldr	r3, [r4, #8]
    1e38:	3001      	adds	r0, #1
    1e3a:	3b01      	subs	r3, #1
    1e3c:	60a3      	str	r3, [r4, #8]
    1e3e:	6823      	ldr	r3, [r4, #0]
    1e40:	1c5a      	adds	r2, r3, #1
    1e42:	6022      	str	r2, [r4, #0]
    1e44:	701f      	strb	r7, [r3, #0]
    1e46:	6963      	ldr	r3, [r4, #20]
    1e48:	4298      	cmp	r0, r3
    1e4a:	d004      	beq.n	1e56 <__swbuf_r+0x6a>
    1e4c:	89a3      	ldrh	r3, [r4, #12]
    1e4e:	07db      	lsls	r3, r3, #31
    1e50:	d51a      	bpl.n	1e88 <__swbuf_r+0x9c>
    1e52:	2e0a      	cmp	r6, #10
    1e54:	d118      	bne.n	1e88 <__swbuf_r+0x9c>
    1e56:	0021      	movs	r1, r4
    1e58:	0028      	movs	r0, r5
    1e5a:	f000 f91d 	bl	2098 <_fflush_r>
    1e5e:	2800      	cmp	r0, #0
    1e60:	d012      	beq.n	1e88 <__swbuf_r+0x9c>
    1e62:	e00f      	b.n	1e84 <__swbuf_r+0x98>
    1e64:	4b0a      	ldr	r3, [pc, #40]	; (1e90 <__swbuf_r+0xa4>)
    1e66:	429c      	cmp	r4, r3
    1e68:	d101      	bne.n	1e6e <__swbuf_r+0x82>
    1e6a:	68ac      	ldr	r4, [r5, #8]
    1e6c:	e7cd      	b.n	1e0a <__swbuf_r+0x1e>
    1e6e:	4b09      	ldr	r3, [pc, #36]	; (1e94 <__swbuf_r+0xa8>)
    1e70:	429c      	cmp	r4, r3
    1e72:	d1ca      	bne.n	1e0a <__swbuf_r+0x1e>
    1e74:	68ec      	ldr	r4, [r5, #12]
    1e76:	e7c8      	b.n	1e0a <__swbuf_r+0x1e>
    1e78:	0021      	movs	r1, r4
    1e7a:	0028      	movs	r0, r5
    1e7c:	f000 f80c 	bl	1e98 <__swsetup_r>
    1e80:	2800      	cmp	r0, #0
    1e82:	d0ca      	beq.n	1e1a <__swbuf_r+0x2e>
    1e84:	2601      	movs	r6, #1
    1e86:	4276      	negs	r6, r6
    1e88:	0030      	movs	r0, r6
    1e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e8c:	00002cc4 	.word	0x00002cc4
    1e90:	00002ce4 	.word	0x00002ce4
    1e94:	00002ca4 	.word	0x00002ca4

00001e98 <__swsetup_r>:
    1e98:	4b36      	ldr	r3, [pc, #216]	; (1f74 <__swsetup_r+0xdc>)
    1e9a:	b570      	push	{r4, r5, r6, lr}
    1e9c:	681d      	ldr	r5, [r3, #0]
    1e9e:	0006      	movs	r6, r0
    1ea0:	000c      	movs	r4, r1
    1ea2:	2d00      	cmp	r5, #0
    1ea4:	d005      	beq.n	1eb2 <__swsetup_r+0x1a>
    1ea6:	69ab      	ldr	r3, [r5, #24]
    1ea8:	2b00      	cmp	r3, #0
    1eaa:	d102      	bne.n	1eb2 <__swsetup_r+0x1a>
    1eac:	0028      	movs	r0, r5
    1eae:	f000 f961 	bl	2174 <__sinit>
    1eb2:	4b31      	ldr	r3, [pc, #196]	; (1f78 <__swsetup_r+0xe0>)
    1eb4:	429c      	cmp	r4, r3
    1eb6:	d10f      	bne.n	1ed8 <__swsetup_r+0x40>
    1eb8:	686c      	ldr	r4, [r5, #4]
    1eba:	230c      	movs	r3, #12
    1ebc:	5ee2      	ldrsh	r2, [r4, r3]
    1ebe:	b293      	uxth	r3, r2
    1ec0:	0719      	lsls	r1, r3, #28
    1ec2:	d42d      	bmi.n	1f20 <__swsetup_r+0x88>
    1ec4:	06d9      	lsls	r1, r3, #27
    1ec6:	d411      	bmi.n	1eec <__swsetup_r+0x54>
    1ec8:	2309      	movs	r3, #9
    1eca:	2001      	movs	r0, #1
    1ecc:	6033      	str	r3, [r6, #0]
    1ece:	3337      	adds	r3, #55	; 0x37
    1ed0:	4313      	orrs	r3, r2
    1ed2:	81a3      	strh	r3, [r4, #12]
    1ed4:	4240      	negs	r0, r0
    1ed6:	bd70      	pop	{r4, r5, r6, pc}
    1ed8:	4b28      	ldr	r3, [pc, #160]	; (1f7c <__swsetup_r+0xe4>)
    1eda:	429c      	cmp	r4, r3
    1edc:	d101      	bne.n	1ee2 <__swsetup_r+0x4a>
    1ede:	68ac      	ldr	r4, [r5, #8]
    1ee0:	e7eb      	b.n	1eba <__swsetup_r+0x22>
    1ee2:	4b27      	ldr	r3, [pc, #156]	; (1f80 <__swsetup_r+0xe8>)
    1ee4:	429c      	cmp	r4, r3
    1ee6:	d1e8      	bne.n	1eba <__swsetup_r+0x22>
    1ee8:	68ec      	ldr	r4, [r5, #12]
    1eea:	e7e6      	b.n	1eba <__swsetup_r+0x22>
    1eec:	075b      	lsls	r3, r3, #29
    1eee:	d513      	bpl.n	1f18 <__swsetup_r+0x80>
    1ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ef2:	2900      	cmp	r1, #0
    1ef4:	d008      	beq.n	1f08 <__swsetup_r+0x70>
    1ef6:	0023      	movs	r3, r4
    1ef8:	3344      	adds	r3, #68	; 0x44
    1efa:	4299      	cmp	r1, r3
    1efc:	d002      	beq.n	1f04 <__swsetup_r+0x6c>
    1efe:	0030      	movs	r0, r6
    1f00:	f000 fa44 	bl	238c <_free_r>
    1f04:	2300      	movs	r3, #0
    1f06:	6363      	str	r3, [r4, #52]	; 0x34
    1f08:	2224      	movs	r2, #36	; 0x24
    1f0a:	89a3      	ldrh	r3, [r4, #12]
    1f0c:	4393      	bics	r3, r2
    1f0e:	81a3      	strh	r3, [r4, #12]
    1f10:	2300      	movs	r3, #0
    1f12:	6063      	str	r3, [r4, #4]
    1f14:	6923      	ldr	r3, [r4, #16]
    1f16:	6023      	str	r3, [r4, #0]
    1f18:	2308      	movs	r3, #8
    1f1a:	89a2      	ldrh	r2, [r4, #12]
    1f1c:	4313      	orrs	r3, r2
    1f1e:	81a3      	strh	r3, [r4, #12]
    1f20:	6923      	ldr	r3, [r4, #16]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d10b      	bne.n	1f3e <__swsetup_r+0xa6>
    1f26:	21a0      	movs	r1, #160	; 0xa0
    1f28:	2280      	movs	r2, #128	; 0x80
    1f2a:	89a3      	ldrh	r3, [r4, #12]
    1f2c:	0089      	lsls	r1, r1, #2
    1f2e:	0092      	lsls	r2, r2, #2
    1f30:	400b      	ands	r3, r1
    1f32:	4293      	cmp	r3, r2
    1f34:	d003      	beq.n	1f3e <__swsetup_r+0xa6>
    1f36:	0021      	movs	r1, r4
    1f38:	0030      	movs	r0, r6
    1f3a:	f000 f9d9 	bl	22f0 <__smakebuf_r>
    1f3e:	2301      	movs	r3, #1
    1f40:	89a2      	ldrh	r2, [r4, #12]
    1f42:	4013      	ands	r3, r2
    1f44:	d011      	beq.n	1f6a <__swsetup_r+0xd2>
    1f46:	2300      	movs	r3, #0
    1f48:	60a3      	str	r3, [r4, #8]
    1f4a:	6963      	ldr	r3, [r4, #20]
    1f4c:	425b      	negs	r3, r3
    1f4e:	61a3      	str	r3, [r4, #24]
    1f50:	2000      	movs	r0, #0
    1f52:	6923      	ldr	r3, [r4, #16]
    1f54:	4283      	cmp	r3, r0
    1f56:	d1be      	bne.n	1ed6 <__swsetup_r+0x3e>
    1f58:	230c      	movs	r3, #12
    1f5a:	5ee2      	ldrsh	r2, [r4, r3]
    1f5c:	0613      	lsls	r3, r2, #24
    1f5e:	d5ba      	bpl.n	1ed6 <__swsetup_r+0x3e>
    1f60:	2340      	movs	r3, #64	; 0x40
    1f62:	4313      	orrs	r3, r2
    1f64:	81a3      	strh	r3, [r4, #12]
    1f66:	3801      	subs	r0, #1
    1f68:	e7b5      	b.n	1ed6 <__swsetup_r+0x3e>
    1f6a:	0792      	lsls	r2, r2, #30
    1f6c:	d400      	bmi.n	1f70 <__swsetup_r+0xd8>
    1f6e:	6963      	ldr	r3, [r4, #20]
    1f70:	60a3      	str	r3, [r4, #8]
    1f72:	e7ed      	b.n	1f50 <__swsetup_r+0xb8>
    1f74:	2000000c 	.word	0x2000000c
    1f78:	00002cc4 	.word	0x00002cc4
    1f7c:	00002ce4 	.word	0x00002ce4
    1f80:	00002ca4 	.word	0x00002ca4

00001f84 <__sflush_r>:
    1f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f86:	898a      	ldrh	r2, [r1, #12]
    1f88:	0005      	movs	r5, r0
    1f8a:	000c      	movs	r4, r1
    1f8c:	0713      	lsls	r3, r2, #28
    1f8e:	d460      	bmi.n	2052 <STACK_SIZE+0x52>
    1f90:	684b      	ldr	r3, [r1, #4]
    1f92:	2b00      	cmp	r3, #0
    1f94:	dc04      	bgt.n	1fa0 <__sflush_r+0x1c>
    1f96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1f98:	2b00      	cmp	r3, #0
    1f9a:	dc01      	bgt.n	1fa0 <__sflush_r+0x1c>
    1f9c:	2000      	movs	r0, #0
    1f9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1fa0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1fa2:	2f00      	cmp	r7, #0
    1fa4:	d0fa      	beq.n	1f9c <__sflush_r+0x18>
    1fa6:	2300      	movs	r3, #0
    1fa8:	682e      	ldr	r6, [r5, #0]
    1faa:	602b      	str	r3, [r5, #0]
    1fac:	2380      	movs	r3, #128	; 0x80
    1fae:	015b      	lsls	r3, r3, #5
    1fb0:	401a      	ands	r2, r3
    1fb2:	d034      	beq.n	201e <STACK_SIZE+0x1e>
    1fb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1fb6:	89a3      	ldrh	r3, [r4, #12]
    1fb8:	075b      	lsls	r3, r3, #29
    1fba:	d506      	bpl.n	1fca <__sflush_r+0x46>
    1fbc:	6863      	ldr	r3, [r4, #4]
    1fbe:	1ac0      	subs	r0, r0, r3
    1fc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d001      	beq.n	1fca <__sflush_r+0x46>
    1fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1fc8:	1ac0      	subs	r0, r0, r3
    1fca:	0002      	movs	r2, r0
    1fcc:	6a21      	ldr	r1, [r4, #32]
    1fce:	2300      	movs	r3, #0
    1fd0:	0028      	movs	r0, r5
    1fd2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1fd4:	47b8      	blx	r7
    1fd6:	89a1      	ldrh	r1, [r4, #12]
    1fd8:	1c43      	adds	r3, r0, #1
    1fda:	d106      	bne.n	1fea <__sflush_r+0x66>
    1fdc:	682b      	ldr	r3, [r5, #0]
    1fde:	2b1d      	cmp	r3, #29
    1fe0:	d831      	bhi.n	2046 <STACK_SIZE+0x46>
    1fe2:	4a2c      	ldr	r2, [pc, #176]	; (2094 <STACK_SIZE+0x94>)
    1fe4:	40da      	lsrs	r2, r3
    1fe6:	07d3      	lsls	r3, r2, #31
    1fe8:	d52d      	bpl.n	2046 <STACK_SIZE+0x46>
    1fea:	2300      	movs	r3, #0
    1fec:	6063      	str	r3, [r4, #4]
    1fee:	6923      	ldr	r3, [r4, #16]
    1ff0:	6023      	str	r3, [r4, #0]
    1ff2:	04cb      	lsls	r3, r1, #19
    1ff4:	d505      	bpl.n	2002 <STACK_SIZE+0x2>
    1ff6:	1c43      	adds	r3, r0, #1
    1ff8:	d102      	bne.n	2000 <STACK_SIZE>
    1ffa:	682b      	ldr	r3, [r5, #0]
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d100      	bne.n	2002 <STACK_SIZE+0x2>
    2000:	6560      	str	r0, [r4, #84]	; 0x54
    2002:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2004:	602e      	str	r6, [r5, #0]
    2006:	2900      	cmp	r1, #0
    2008:	d0c8      	beq.n	1f9c <__sflush_r+0x18>
    200a:	0023      	movs	r3, r4
    200c:	3344      	adds	r3, #68	; 0x44
    200e:	4299      	cmp	r1, r3
    2010:	d002      	beq.n	2018 <STACK_SIZE+0x18>
    2012:	0028      	movs	r0, r5
    2014:	f000 f9ba 	bl	238c <_free_r>
    2018:	2000      	movs	r0, #0
    201a:	6360      	str	r0, [r4, #52]	; 0x34
    201c:	e7bf      	b.n	1f9e <__sflush_r+0x1a>
    201e:	2301      	movs	r3, #1
    2020:	6a21      	ldr	r1, [r4, #32]
    2022:	0028      	movs	r0, r5
    2024:	47b8      	blx	r7
    2026:	1c43      	adds	r3, r0, #1
    2028:	d1c5      	bne.n	1fb6 <__sflush_r+0x32>
    202a:	682b      	ldr	r3, [r5, #0]
    202c:	2b00      	cmp	r3, #0
    202e:	d0c2      	beq.n	1fb6 <__sflush_r+0x32>
    2030:	2b1d      	cmp	r3, #29
    2032:	d001      	beq.n	2038 <STACK_SIZE+0x38>
    2034:	2b16      	cmp	r3, #22
    2036:	d101      	bne.n	203c <STACK_SIZE+0x3c>
    2038:	602e      	str	r6, [r5, #0]
    203a:	e7af      	b.n	1f9c <__sflush_r+0x18>
    203c:	2340      	movs	r3, #64	; 0x40
    203e:	89a2      	ldrh	r2, [r4, #12]
    2040:	4313      	orrs	r3, r2
    2042:	81a3      	strh	r3, [r4, #12]
    2044:	e7ab      	b.n	1f9e <__sflush_r+0x1a>
    2046:	2340      	movs	r3, #64	; 0x40
    2048:	430b      	orrs	r3, r1
    204a:	2001      	movs	r0, #1
    204c:	81a3      	strh	r3, [r4, #12]
    204e:	4240      	negs	r0, r0
    2050:	e7a5      	b.n	1f9e <__sflush_r+0x1a>
    2052:	690f      	ldr	r7, [r1, #16]
    2054:	2f00      	cmp	r7, #0
    2056:	d0a1      	beq.n	1f9c <__sflush_r+0x18>
    2058:	680b      	ldr	r3, [r1, #0]
    205a:	600f      	str	r7, [r1, #0]
    205c:	1bdb      	subs	r3, r3, r7
    205e:	9301      	str	r3, [sp, #4]
    2060:	2300      	movs	r3, #0
    2062:	0792      	lsls	r2, r2, #30
    2064:	d100      	bne.n	2068 <STACK_SIZE+0x68>
    2066:	694b      	ldr	r3, [r1, #20]
    2068:	60a3      	str	r3, [r4, #8]
    206a:	9b01      	ldr	r3, [sp, #4]
    206c:	2b00      	cmp	r3, #0
    206e:	dc00      	bgt.n	2072 <STACK_SIZE+0x72>
    2070:	e794      	b.n	1f9c <__sflush_r+0x18>
    2072:	9b01      	ldr	r3, [sp, #4]
    2074:	003a      	movs	r2, r7
    2076:	6a21      	ldr	r1, [r4, #32]
    2078:	0028      	movs	r0, r5
    207a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    207c:	47b0      	blx	r6
    207e:	2800      	cmp	r0, #0
    2080:	dc03      	bgt.n	208a <STACK_SIZE+0x8a>
    2082:	2340      	movs	r3, #64	; 0x40
    2084:	89a2      	ldrh	r2, [r4, #12]
    2086:	4313      	orrs	r3, r2
    2088:	e7df      	b.n	204a <STACK_SIZE+0x4a>
    208a:	9b01      	ldr	r3, [sp, #4]
    208c:	183f      	adds	r7, r7, r0
    208e:	1a1b      	subs	r3, r3, r0
    2090:	9301      	str	r3, [sp, #4]
    2092:	e7ea      	b.n	206a <STACK_SIZE+0x6a>
    2094:	20400001 	.word	0x20400001

00002098 <_fflush_r>:
    2098:	690b      	ldr	r3, [r1, #16]
    209a:	b570      	push	{r4, r5, r6, lr}
    209c:	0005      	movs	r5, r0
    209e:	000c      	movs	r4, r1
    20a0:	2b00      	cmp	r3, #0
    20a2:	d101      	bne.n	20a8 <_fflush_r+0x10>
    20a4:	2000      	movs	r0, #0
    20a6:	bd70      	pop	{r4, r5, r6, pc}
    20a8:	2800      	cmp	r0, #0
    20aa:	d004      	beq.n	20b6 <_fflush_r+0x1e>
    20ac:	6983      	ldr	r3, [r0, #24]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d101      	bne.n	20b6 <_fflush_r+0x1e>
    20b2:	f000 f85f 	bl	2174 <__sinit>
    20b6:	4b0b      	ldr	r3, [pc, #44]	; (20e4 <_fflush_r+0x4c>)
    20b8:	429c      	cmp	r4, r3
    20ba:	d109      	bne.n	20d0 <_fflush_r+0x38>
    20bc:	686c      	ldr	r4, [r5, #4]
    20be:	220c      	movs	r2, #12
    20c0:	5ea3      	ldrsh	r3, [r4, r2]
    20c2:	2b00      	cmp	r3, #0
    20c4:	d0ee      	beq.n	20a4 <_fflush_r+0xc>
    20c6:	0021      	movs	r1, r4
    20c8:	0028      	movs	r0, r5
    20ca:	f7ff ff5b 	bl	1f84 <__sflush_r>
    20ce:	e7ea      	b.n	20a6 <_fflush_r+0xe>
    20d0:	4b05      	ldr	r3, [pc, #20]	; (20e8 <_fflush_r+0x50>)
    20d2:	429c      	cmp	r4, r3
    20d4:	d101      	bne.n	20da <_fflush_r+0x42>
    20d6:	68ac      	ldr	r4, [r5, #8]
    20d8:	e7f1      	b.n	20be <_fflush_r+0x26>
    20da:	4b04      	ldr	r3, [pc, #16]	; (20ec <_fflush_r+0x54>)
    20dc:	429c      	cmp	r4, r3
    20de:	d1ee      	bne.n	20be <_fflush_r+0x26>
    20e0:	68ec      	ldr	r4, [r5, #12]
    20e2:	e7ec      	b.n	20be <_fflush_r+0x26>
    20e4:	00002cc4 	.word	0x00002cc4
    20e8:	00002ce4 	.word	0x00002ce4
    20ec:	00002ca4 	.word	0x00002ca4

000020f0 <_cleanup_r>:
    20f0:	b510      	push	{r4, lr}
    20f2:	4902      	ldr	r1, [pc, #8]	; (20fc <_cleanup_r+0xc>)
    20f4:	f000 f8b2 	bl	225c <_fwalk_reent>
    20f8:	bd10      	pop	{r4, pc}
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	00002099 	.word	0x00002099

00002100 <std.isra.0>:
    2100:	2300      	movs	r3, #0
    2102:	b510      	push	{r4, lr}
    2104:	0004      	movs	r4, r0
    2106:	6003      	str	r3, [r0, #0]
    2108:	6043      	str	r3, [r0, #4]
    210a:	6083      	str	r3, [r0, #8]
    210c:	8181      	strh	r1, [r0, #12]
    210e:	6643      	str	r3, [r0, #100]	; 0x64
    2110:	81c2      	strh	r2, [r0, #14]
    2112:	6103      	str	r3, [r0, #16]
    2114:	6143      	str	r3, [r0, #20]
    2116:	6183      	str	r3, [r0, #24]
    2118:	0019      	movs	r1, r3
    211a:	2208      	movs	r2, #8
    211c:	305c      	adds	r0, #92	; 0x5c
    211e:	f7ff fd8d 	bl	1c3c <memset>
    2122:	4b05      	ldr	r3, [pc, #20]	; (2138 <std.isra.0+0x38>)
    2124:	6224      	str	r4, [r4, #32]
    2126:	6263      	str	r3, [r4, #36]	; 0x24
    2128:	4b04      	ldr	r3, [pc, #16]	; (213c <std.isra.0+0x3c>)
    212a:	62a3      	str	r3, [r4, #40]	; 0x28
    212c:	4b04      	ldr	r3, [pc, #16]	; (2140 <std.isra.0+0x40>)
    212e:	62e3      	str	r3, [r4, #44]	; 0x2c
    2130:	4b04      	ldr	r3, [pc, #16]	; (2144 <std.isra.0+0x44>)
    2132:	6323      	str	r3, [r4, #48]	; 0x30
    2134:	bd10      	pop	{r4, pc}
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	00002a99 	.word	0x00002a99
    213c:	00002ac1 	.word	0x00002ac1
    2140:	00002af9 	.word	0x00002af9
    2144:	00002b25 	.word	0x00002b25

00002148 <__sfmoreglue>:
    2148:	b570      	push	{r4, r5, r6, lr}
    214a:	2568      	movs	r5, #104	; 0x68
    214c:	1e4a      	subs	r2, r1, #1
    214e:	4355      	muls	r5, r2
    2150:	000e      	movs	r6, r1
    2152:	0029      	movs	r1, r5
    2154:	3174      	adds	r1, #116	; 0x74
    2156:	f000 f963 	bl	2420 <_malloc_r>
    215a:	1e04      	subs	r4, r0, #0
    215c:	d008      	beq.n	2170 <__sfmoreglue+0x28>
    215e:	2100      	movs	r1, #0
    2160:	002a      	movs	r2, r5
    2162:	6001      	str	r1, [r0, #0]
    2164:	6046      	str	r6, [r0, #4]
    2166:	300c      	adds	r0, #12
    2168:	60a0      	str	r0, [r4, #8]
    216a:	3268      	adds	r2, #104	; 0x68
    216c:	f7ff fd66 	bl	1c3c <memset>
    2170:	0020      	movs	r0, r4
    2172:	bd70      	pop	{r4, r5, r6, pc}

00002174 <__sinit>:
    2174:	6983      	ldr	r3, [r0, #24]
    2176:	b513      	push	{r0, r1, r4, lr}
    2178:	0004      	movs	r4, r0
    217a:	2b00      	cmp	r3, #0
    217c:	d128      	bne.n	21d0 <__sinit+0x5c>
    217e:	6483      	str	r3, [r0, #72]	; 0x48
    2180:	64c3      	str	r3, [r0, #76]	; 0x4c
    2182:	6503      	str	r3, [r0, #80]	; 0x50
    2184:	4b13      	ldr	r3, [pc, #76]	; (21d4 <__sinit+0x60>)
    2186:	4a14      	ldr	r2, [pc, #80]	; (21d8 <__sinit+0x64>)
    2188:	681b      	ldr	r3, [r3, #0]
    218a:	6282      	str	r2, [r0, #40]	; 0x28
    218c:	9301      	str	r3, [sp, #4]
    218e:	4298      	cmp	r0, r3
    2190:	d101      	bne.n	2196 <__sinit+0x22>
    2192:	2301      	movs	r3, #1
    2194:	6183      	str	r3, [r0, #24]
    2196:	0020      	movs	r0, r4
    2198:	f000 f820 	bl	21dc <__sfp>
    219c:	6060      	str	r0, [r4, #4]
    219e:	0020      	movs	r0, r4
    21a0:	f000 f81c 	bl	21dc <__sfp>
    21a4:	60a0      	str	r0, [r4, #8]
    21a6:	0020      	movs	r0, r4
    21a8:	f000 f818 	bl	21dc <__sfp>
    21ac:	2200      	movs	r2, #0
    21ae:	60e0      	str	r0, [r4, #12]
    21b0:	2104      	movs	r1, #4
    21b2:	6860      	ldr	r0, [r4, #4]
    21b4:	f7ff ffa4 	bl	2100 <std.isra.0>
    21b8:	2201      	movs	r2, #1
    21ba:	2109      	movs	r1, #9
    21bc:	68a0      	ldr	r0, [r4, #8]
    21be:	f7ff ff9f 	bl	2100 <std.isra.0>
    21c2:	2202      	movs	r2, #2
    21c4:	2112      	movs	r1, #18
    21c6:	68e0      	ldr	r0, [r4, #12]
    21c8:	f7ff ff9a 	bl	2100 <std.isra.0>
    21cc:	2301      	movs	r3, #1
    21ce:	61a3      	str	r3, [r4, #24]
    21d0:	bd13      	pop	{r0, r1, r4, pc}
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	00002ca0 	.word	0x00002ca0
    21d8:	000020f1 	.word	0x000020f1

000021dc <__sfp>:
    21dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21de:	4b1e      	ldr	r3, [pc, #120]	; (2258 <__sfp+0x7c>)
    21e0:	0007      	movs	r7, r0
    21e2:	681e      	ldr	r6, [r3, #0]
    21e4:	69b3      	ldr	r3, [r6, #24]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d102      	bne.n	21f0 <__sfp+0x14>
    21ea:	0030      	movs	r0, r6
    21ec:	f7ff ffc2 	bl	2174 <__sinit>
    21f0:	3648      	adds	r6, #72	; 0x48
    21f2:	68b4      	ldr	r4, [r6, #8]
    21f4:	6873      	ldr	r3, [r6, #4]
    21f6:	3b01      	subs	r3, #1
    21f8:	d504      	bpl.n	2204 <__sfp+0x28>
    21fa:	6833      	ldr	r3, [r6, #0]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d007      	beq.n	2210 <__sfp+0x34>
    2200:	6836      	ldr	r6, [r6, #0]
    2202:	e7f6      	b.n	21f2 <__sfp+0x16>
    2204:	220c      	movs	r2, #12
    2206:	5ea5      	ldrsh	r5, [r4, r2]
    2208:	2d00      	cmp	r5, #0
    220a:	d00d      	beq.n	2228 <__sfp+0x4c>
    220c:	3468      	adds	r4, #104	; 0x68
    220e:	e7f2      	b.n	21f6 <__sfp+0x1a>
    2210:	2104      	movs	r1, #4
    2212:	0038      	movs	r0, r7
    2214:	f7ff ff98 	bl	2148 <__sfmoreglue>
    2218:	6030      	str	r0, [r6, #0]
    221a:	2800      	cmp	r0, #0
    221c:	d1f0      	bne.n	2200 <__sfp+0x24>
    221e:	230c      	movs	r3, #12
    2220:	0004      	movs	r4, r0
    2222:	603b      	str	r3, [r7, #0]
    2224:	0020      	movs	r0, r4
    2226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2228:	2301      	movs	r3, #1
    222a:	0020      	movs	r0, r4
    222c:	425b      	negs	r3, r3
    222e:	81e3      	strh	r3, [r4, #14]
    2230:	3302      	adds	r3, #2
    2232:	81a3      	strh	r3, [r4, #12]
    2234:	6665      	str	r5, [r4, #100]	; 0x64
    2236:	6025      	str	r5, [r4, #0]
    2238:	60a5      	str	r5, [r4, #8]
    223a:	6065      	str	r5, [r4, #4]
    223c:	6125      	str	r5, [r4, #16]
    223e:	6165      	str	r5, [r4, #20]
    2240:	61a5      	str	r5, [r4, #24]
    2242:	2208      	movs	r2, #8
    2244:	0029      	movs	r1, r5
    2246:	305c      	adds	r0, #92	; 0x5c
    2248:	f7ff fcf8 	bl	1c3c <memset>
    224c:	6365      	str	r5, [r4, #52]	; 0x34
    224e:	63a5      	str	r5, [r4, #56]	; 0x38
    2250:	64a5      	str	r5, [r4, #72]	; 0x48
    2252:	64e5      	str	r5, [r4, #76]	; 0x4c
    2254:	e7e6      	b.n	2224 <__sfp+0x48>
    2256:	46c0      	nop			; (mov r8, r8)
    2258:	00002ca0 	.word	0x00002ca0

0000225c <_fwalk_reent>:
    225c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    225e:	0004      	movs	r4, r0
    2260:	0007      	movs	r7, r0
    2262:	2600      	movs	r6, #0
    2264:	9101      	str	r1, [sp, #4]
    2266:	3448      	adds	r4, #72	; 0x48
    2268:	2c00      	cmp	r4, #0
    226a:	d101      	bne.n	2270 <_fwalk_reent+0x14>
    226c:	0030      	movs	r0, r6
    226e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2270:	6863      	ldr	r3, [r4, #4]
    2272:	68a5      	ldr	r5, [r4, #8]
    2274:	9300      	str	r3, [sp, #0]
    2276:	9b00      	ldr	r3, [sp, #0]
    2278:	3b01      	subs	r3, #1
    227a:	9300      	str	r3, [sp, #0]
    227c:	d501      	bpl.n	2282 <_fwalk_reent+0x26>
    227e:	6824      	ldr	r4, [r4, #0]
    2280:	e7f2      	b.n	2268 <_fwalk_reent+0xc>
    2282:	89ab      	ldrh	r3, [r5, #12]
    2284:	2b01      	cmp	r3, #1
    2286:	d908      	bls.n	229a <_fwalk_reent+0x3e>
    2288:	220e      	movs	r2, #14
    228a:	5eab      	ldrsh	r3, [r5, r2]
    228c:	3301      	adds	r3, #1
    228e:	d004      	beq.n	229a <_fwalk_reent+0x3e>
    2290:	0029      	movs	r1, r5
    2292:	0038      	movs	r0, r7
    2294:	9b01      	ldr	r3, [sp, #4]
    2296:	4798      	blx	r3
    2298:	4306      	orrs	r6, r0
    229a:	3568      	adds	r5, #104	; 0x68
    229c:	e7eb      	b.n	2276 <_fwalk_reent+0x1a>
	...

000022a0 <__swhatbuf_r>:
    22a0:	b570      	push	{r4, r5, r6, lr}
    22a2:	000e      	movs	r6, r1
    22a4:	001d      	movs	r5, r3
    22a6:	230e      	movs	r3, #14
    22a8:	5ec9      	ldrsh	r1, [r1, r3]
    22aa:	b090      	sub	sp, #64	; 0x40
    22ac:	0014      	movs	r4, r2
    22ae:	2900      	cmp	r1, #0
    22b0:	da07      	bge.n	22c2 <__swhatbuf_r+0x22>
    22b2:	2300      	movs	r3, #0
    22b4:	602b      	str	r3, [r5, #0]
    22b6:	89b3      	ldrh	r3, [r6, #12]
    22b8:	061b      	lsls	r3, r3, #24
    22ba:	d411      	bmi.n	22e0 <__swhatbuf_r+0x40>
    22bc:	2380      	movs	r3, #128	; 0x80
    22be:	00db      	lsls	r3, r3, #3
    22c0:	e00f      	b.n	22e2 <__swhatbuf_r+0x42>
    22c2:	aa01      	add	r2, sp, #4
    22c4:	f000 fc5a 	bl	2b7c <_fstat_r>
    22c8:	2800      	cmp	r0, #0
    22ca:	dbf2      	blt.n	22b2 <__swhatbuf_r+0x12>
    22cc:	22f0      	movs	r2, #240	; 0xf0
    22ce:	9b02      	ldr	r3, [sp, #8]
    22d0:	0212      	lsls	r2, r2, #8
    22d2:	4013      	ands	r3, r2
    22d4:	4a05      	ldr	r2, [pc, #20]	; (22ec <__swhatbuf_r+0x4c>)
    22d6:	189b      	adds	r3, r3, r2
    22d8:	425a      	negs	r2, r3
    22da:	4153      	adcs	r3, r2
    22dc:	602b      	str	r3, [r5, #0]
    22de:	e7ed      	b.n	22bc <__swhatbuf_r+0x1c>
    22e0:	2340      	movs	r3, #64	; 0x40
    22e2:	2000      	movs	r0, #0
    22e4:	6023      	str	r3, [r4, #0]
    22e6:	b010      	add	sp, #64	; 0x40
    22e8:	bd70      	pop	{r4, r5, r6, pc}
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	ffffe000 	.word	0xffffe000

000022f0 <__smakebuf_r>:
    22f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22f2:	2602      	movs	r6, #2
    22f4:	898b      	ldrh	r3, [r1, #12]
    22f6:	0005      	movs	r5, r0
    22f8:	000c      	movs	r4, r1
    22fa:	4233      	tst	r3, r6
    22fc:	d006      	beq.n	230c <__smakebuf_r+0x1c>
    22fe:	0023      	movs	r3, r4
    2300:	3347      	adds	r3, #71	; 0x47
    2302:	6023      	str	r3, [r4, #0]
    2304:	6123      	str	r3, [r4, #16]
    2306:	2301      	movs	r3, #1
    2308:	6163      	str	r3, [r4, #20]
    230a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    230c:	ab01      	add	r3, sp, #4
    230e:	466a      	mov	r2, sp
    2310:	f7ff ffc6 	bl	22a0 <__swhatbuf_r>
    2314:	9900      	ldr	r1, [sp, #0]
    2316:	0007      	movs	r7, r0
    2318:	0028      	movs	r0, r5
    231a:	f000 f881 	bl	2420 <_malloc_r>
    231e:	2800      	cmp	r0, #0
    2320:	d108      	bne.n	2334 <__smakebuf_r+0x44>
    2322:	220c      	movs	r2, #12
    2324:	5ea3      	ldrsh	r3, [r4, r2]
    2326:	059a      	lsls	r2, r3, #22
    2328:	d4ef      	bmi.n	230a <__smakebuf_r+0x1a>
    232a:	2203      	movs	r2, #3
    232c:	4393      	bics	r3, r2
    232e:	431e      	orrs	r6, r3
    2330:	81a6      	strh	r6, [r4, #12]
    2332:	e7e4      	b.n	22fe <__smakebuf_r+0xe>
    2334:	4b0f      	ldr	r3, [pc, #60]	; (2374 <__smakebuf_r+0x84>)
    2336:	62ab      	str	r3, [r5, #40]	; 0x28
    2338:	2380      	movs	r3, #128	; 0x80
    233a:	89a2      	ldrh	r2, [r4, #12]
    233c:	6020      	str	r0, [r4, #0]
    233e:	4313      	orrs	r3, r2
    2340:	81a3      	strh	r3, [r4, #12]
    2342:	9b00      	ldr	r3, [sp, #0]
    2344:	6120      	str	r0, [r4, #16]
    2346:	6163      	str	r3, [r4, #20]
    2348:	9b01      	ldr	r3, [sp, #4]
    234a:	2b00      	cmp	r3, #0
    234c:	d00d      	beq.n	236a <__smakebuf_r+0x7a>
    234e:	230e      	movs	r3, #14
    2350:	5ee1      	ldrsh	r1, [r4, r3]
    2352:	0028      	movs	r0, r5
    2354:	f000 fc24 	bl	2ba0 <_isatty_r>
    2358:	2800      	cmp	r0, #0
    235a:	d006      	beq.n	236a <__smakebuf_r+0x7a>
    235c:	2203      	movs	r2, #3
    235e:	89a3      	ldrh	r3, [r4, #12]
    2360:	4393      	bics	r3, r2
    2362:	001a      	movs	r2, r3
    2364:	2301      	movs	r3, #1
    2366:	4313      	orrs	r3, r2
    2368:	81a3      	strh	r3, [r4, #12]
    236a:	89a0      	ldrh	r0, [r4, #12]
    236c:	4338      	orrs	r0, r7
    236e:	81a0      	strh	r0, [r4, #12]
    2370:	e7cb      	b.n	230a <__smakebuf_r+0x1a>
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	000020f1 	.word	0x000020f1

00002378 <malloc>:
    2378:	b510      	push	{r4, lr}
    237a:	4b03      	ldr	r3, [pc, #12]	; (2388 <malloc+0x10>)
    237c:	0001      	movs	r1, r0
    237e:	6818      	ldr	r0, [r3, #0]
    2380:	f000 f84e 	bl	2420 <_malloc_r>
    2384:	bd10      	pop	{r4, pc}
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	2000000c 	.word	0x2000000c

0000238c <_free_r>:
    238c:	b570      	push	{r4, r5, r6, lr}
    238e:	0005      	movs	r5, r0
    2390:	2900      	cmp	r1, #0
    2392:	d010      	beq.n	23b6 <_free_r+0x2a>
    2394:	1f0c      	subs	r4, r1, #4
    2396:	6823      	ldr	r3, [r4, #0]
    2398:	2b00      	cmp	r3, #0
    239a:	da00      	bge.n	239e <_free_r+0x12>
    239c:	18e4      	adds	r4, r4, r3
    239e:	0028      	movs	r0, r5
    23a0:	f000 fc2f 	bl	2c02 <__malloc_lock>
    23a4:	4a1d      	ldr	r2, [pc, #116]	; (241c <_free_r+0x90>)
    23a6:	6813      	ldr	r3, [r2, #0]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d105      	bne.n	23b8 <_free_r+0x2c>
    23ac:	6063      	str	r3, [r4, #4]
    23ae:	6014      	str	r4, [r2, #0]
    23b0:	0028      	movs	r0, r5
    23b2:	f000 fc27 	bl	2c04 <__malloc_unlock>
    23b6:	bd70      	pop	{r4, r5, r6, pc}
    23b8:	42a3      	cmp	r3, r4
    23ba:	d909      	bls.n	23d0 <_free_r+0x44>
    23bc:	6821      	ldr	r1, [r4, #0]
    23be:	1860      	adds	r0, r4, r1
    23c0:	4283      	cmp	r3, r0
    23c2:	d1f3      	bne.n	23ac <_free_r+0x20>
    23c4:	6818      	ldr	r0, [r3, #0]
    23c6:	685b      	ldr	r3, [r3, #4]
    23c8:	1841      	adds	r1, r0, r1
    23ca:	6021      	str	r1, [r4, #0]
    23cc:	e7ee      	b.n	23ac <_free_r+0x20>
    23ce:	0013      	movs	r3, r2
    23d0:	685a      	ldr	r2, [r3, #4]
    23d2:	2a00      	cmp	r2, #0
    23d4:	d001      	beq.n	23da <_free_r+0x4e>
    23d6:	42a2      	cmp	r2, r4
    23d8:	d9f9      	bls.n	23ce <_free_r+0x42>
    23da:	6819      	ldr	r1, [r3, #0]
    23dc:	1858      	adds	r0, r3, r1
    23de:	42a0      	cmp	r0, r4
    23e0:	d10b      	bne.n	23fa <_free_r+0x6e>
    23e2:	6820      	ldr	r0, [r4, #0]
    23e4:	1809      	adds	r1, r1, r0
    23e6:	1858      	adds	r0, r3, r1
    23e8:	6019      	str	r1, [r3, #0]
    23ea:	4282      	cmp	r2, r0
    23ec:	d1e0      	bne.n	23b0 <_free_r+0x24>
    23ee:	6810      	ldr	r0, [r2, #0]
    23f0:	6852      	ldr	r2, [r2, #4]
    23f2:	1841      	adds	r1, r0, r1
    23f4:	6019      	str	r1, [r3, #0]
    23f6:	605a      	str	r2, [r3, #4]
    23f8:	e7da      	b.n	23b0 <_free_r+0x24>
    23fa:	42a0      	cmp	r0, r4
    23fc:	d902      	bls.n	2404 <_free_r+0x78>
    23fe:	230c      	movs	r3, #12
    2400:	602b      	str	r3, [r5, #0]
    2402:	e7d5      	b.n	23b0 <_free_r+0x24>
    2404:	6821      	ldr	r1, [r4, #0]
    2406:	1860      	adds	r0, r4, r1
    2408:	4282      	cmp	r2, r0
    240a:	d103      	bne.n	2414 <_free_r+0x88>
    240c:	6810      	ldr	r0, [r2, #0]
    240e:	6852      	ldr	r2, [r2, #4]
    2410:	1841      	adds	r1, r0, r1
    2412:	6021      	str	r1, [r4, #0]
    2414:	6062      	str	r2, [r4, #4]
    2416:	605c      	str	r4, [r3, #4]
    2418:	e7ca      	b.n	23b0 <_free_r+0x24>
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	200001a0 	.word	0x200001a0

00002420 <_malloc_r>:
    2420:	2303      	movs	r3, #3
    2422:	b570      	push	{r4, r5, r6, lr}
    2424:	1ccd      	adds	r5, r1, #3
    2426:	439d      	bics	r5, r3
    2428:	3508      	adds	r5, #8
    242a:	0006      	movs	r6, r0
    242c:	2d0c      	cmp	r5, #12
    242e:	d21e      	bcs.n	246e <_malloc_r+0x4e>
    2430:	250c      	movs	r5, #12
    2432:	42a9      	cmp	r1, r5
    2434:	d81d      	bhi.n	2472 <_malloc_r+0x52>
    2436:	0030      	movs	r0, r6
    2438:	f000 fbe3 	bl	2c02 <__malloc_lock>
    243c:	4a25      	ldr	r2, [pc, #148]	; (24d4 <_malloc_r+0xb4>)
    243e:	6814      	ldr	r4, [r2, #0]
    2440:	0021      	movs	r1, r4
    2442:	2900      	cmp	r1, #0
    2444:	d119      	bne.n	247a <_malloc_r+0x5a>
    2446:	4c24      	ldr	r4, [pc, #144]	; (24d8 <_malloc_r+0xb8>)
    2448:	6823      	ldr	r3, [r4, #0]
    244a:	2b00      	cmp	r3, #0
    244c:	d103      	bne.n	2456 <_malloc_r+0x36>
    244e:	0030      	movs	r0, r6
    2450:	f000 fb10 	bl	2a74 <_sbrk_r>
    2454:	6020      	str	r0, [r4, #0]
    2456:	0029      	movs	r1, r5
    2458:	0030      	movs	r0, r6
    245a:	f000 fb0b 	bl	2a74 <_sbrk_r>
    245e:	1c43      	adds	r3, r0, #1
    2460:	d12c      	bne.n	24bc <_malloc_r+0x9c>
    2462:	230c      	movs	r3, #12
    2464:	0030      	movs	r0, r6
    2466:	6033      	str	r3, [r6, #0]
    2468:	f000 fbcc 	bl	2c04 <__malloc_unlock>
    246c:	e003      	b.n	2476 <_malloc_r+0x56>
    246e:	2d00      	cmp	r5, #0
    2470:	dadf      	bge.n	2432 <_malloc_r+0x12>
    2472:	230c      	movs	r3, #12
    2474:	6033      	str	r3, [r6, #0]
    2476:	2000      	movs	r0, #0
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	680b      	ldr	r3, [r1, #0]
    247c:	1b5b      	subs	r3, r3, r5
    247e:	d41a      	bmi.n	24b6 <_malloc_r+0x96>
    2480:	2b0b      	cmp	r3, #11
    2482:	d903      	bls.n	248c <_malloc_r+0x6c>
    2484:	600b      	str	r3, [r1, #0]
    2486:	18cc      	adds	r4, r1, r3
    2488:	6025      	str	r5, [r4, #0]
    248a:	e003      	b.n	2494 <_malloc_r+0x74>
    248c:	428c      	cmp	r4, r1
    248e:	d10e      	bne.n	24ae <_malloc_r+0x8e>
    2490:	6863      	ldr	r3, [r4, #4]
    2492:	6013      	str	r3, [r2, #0]
    2494:	0030      	movs	r0, r6
    2496:	f000 fbb5 	bl	2c04 <__malloc_unlock>
    249a:	0020      	movs	r0, r4
    249c:	2207      	movs	r2, #7
    249e:	300b      	adds	r0, #11
    24a0:	1d23      	adds	r3, r4, #4
    24a2:	4390      	bics	r0, r2
    24a4:	1ac3      	subs	r3, r0, r3
    24a6:	d0e7      	beq.n	2478 <_malloc_r+0x58>
    24a8:	425a      	negs	r2, r3
    24aa:	50e2      	str	r2, [r4, r3]
    24ac:	e7e4      	b.n	2478 <_malloc_r+0x58>
    24ae:	684b      	ldr	r3, [r1, #4]
    24b0:	6063      	str	r3, [r4, #4]
    24b2:	000c      	movs	r4, r1
    24b4:	e7ee      	b.n	2494 <_malloc_r+0x74>
    24b6:	000c      	movs	r4, r1
    24b8:	6849      	ldr	r1, [r1, #4]
    24ba:	e7c2      	b.n	2442 <_malloc_r+0x22>
    24bc:	2303      	movs	r3, #3
    24be:	1cc4      	adds	r4, r0, #3
    24c0:	439c      	bics	r4, r3
    24c2:	42a0      	cmp	r0, r4
    24c4:	d0e0      	beq.n	2488 <_malloc_r+0x68>
    24c6:	1a21      	subs	r1, r4, r0
    24c8:	0030      	movs	r0, r6
    24ca:	f000 fad3 	bl	2a74 <_sbrk_r>
    24ce:	1c43      	adds	r3, r0, #1
    24d0:	d1da      	bne.n	2488 <_malloc_r+0x68>
    24d2:	e7c6      	b.n	2462 <_malloc_r+0x42>
    24d4:	200001a0 	.word	0x200001a0
    24d8:	200001a4 	.word	0x200001a4

000024dc <__sfputc_r>:
    24dc:	6893      	ldr	r3, [r2, #8]
    24de:	b510      	push	{r4, lr}
    24e0:	3b01      	subs	r3, #1
    24e2:	6093      	str	r3, [r2, #8]
    24e4:	2b00      	cmp	r3, #0
    24e6:	da05      	bge.n	24f4 <__sfputc_r+0x18>
    24e8:	6994      	ldr	r4, [r2, #24]
    24ea:	42a3      	cmp	r3, r4
    24ec:	db08      	blt.n	2500 <__sfputc_r+0x24>
    24ee:	b2cb      	uxtb	r3, r1
    24f0:	2b0a      	cmp	r3, #10
    24f2:	d005      	beq.n	2500 <__sfputc_r+0x24>
    24f4:	6813      	ldr	r3, [r2, #0]
    24f6:	1c58      	adds	r0, r3, #1
    24f8:	6010      	str	r0, [r2, #0]
    24fa:	7019      	strb	r1, [r3, #0]
    24fc:	b2c8      	uxtb	r0, r1
    24fe:	bd10      	pop	{r4, pc}
    2500:	f7ff fc74 	bl	1dec <__swbuf_r>
    2504:	e7fb      	b.n	24fe <__sfputc_r+0x22>

00002506 <__sfputs_r>:
    2506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2508:	0006      	movs	r6, r0
    250a:	000f      	movs	r7, r1
    250c:	0014      	movs	r4, r2
    250e:	18d5      	adds	r5, r2, r3
    2510:	42ac      	cmp	r4, r5
    2512:	d101      	bne.n	2518 <__sfputs_r+0x12>
    2514:	2000      	movs	r0, #0
    2516:	e007      	b.n	2528 <__sfputs_r+0x22>
    2518:	7821      	ldrb	r1, [r4, #0]
    251a:	003a      	movs	r2, r7
    251c:	0030      	movs	r0, r6
    251e:	f7ff ffdd 	bl	24dc <__sfputc_r>
    2522:	3401      	adds	r4, #1
    2524:	1c43      	adds	r3, r0, #1
    2526:	d1f3      	bne.n	2510 <__sfputs_r+0xa>
    2528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000252c <_vfiprintf_r>:
    252c:	b5f0      	push	{r4, r5, r6, r7, lr}
    252e:	b09f      	sub	sp, #124	; 0x7c
    2530:	0006      	movs	r6, r0
    2532:	000f      	movs	r7, r1
    2534:	0014      	movs	r4, r2
    2536:	9305      	str	r3, [sp, #20]
    2538:	2800      	cmp	r0, #0
    253a:	d004      	beq.n	2546 <_vfiprintf_r+0x1a>
    253c:	6983      	ldr	r3, [r0, #24]
    253e:	2b00      	cmp	r3, #0
    2540:	d101      	bne.n	2546 <_vfiprintf_r+0x1a>
    2542:	f7ff fe17 	bl	2174 <__sinit>
    2546:	4b7f      	ldr	r3, [pc, #508]	; (2744 <_vfiprintf_r+0x218>)
    2548:	429f      	cmp	r7, r3
    254a:	d15c      	bne.n	2606 <_vfiprintf_r+0xda>
    254c:	6877      	ldr	r7, [r6, #4]
    254e:	89bb      	ldrh	r3, [r7, #12]
    2550:	071b      	lsls	r3, r3, #28
    2552:	d562      	bpl.n	261a <_vfiprintf_r+0xee>
    2554:	693b      	ldr	r3, [r7, #16]
    2556:	2b00      	cmp	r3, #0
    2558:	d05f      	beq.n	261a <_vfiprintf_r+0xee>
    255a:	2300      	movs	r3, #0
    255c:	ad06      	add	r5, sp, #24
    255e:	616b      	str	r3, [r5, #20]
    2560:	3320      	adds	r3, #32
    2562:	766b      	strb	r3, [r5, #25]
    2564:	3310      	adds	r3, #16
    2566:	76ab      	strb	r3, [r5, #26]
    2568:	9402      	str	r4, [sp, #8]
    256a:	9c02      	ldr	r4, [sp, #8]
    256c:	7823      	ldrb	r3, [r4, #0]
    256e:	2b00      	cmp	r3, #0
    2570:	d15d      	bne.n	262e <_vfiprintf_r+0x102>
    2572:	9b02      	ldr	r3, [sp, #8]
    2574:	1ae3      	subs	r3, r4, r3
    2576:	9304      	str	r3, [sp, #16]
    2578:	d00d      	beq.n	2596 <_vfiprintf_r+0x6a>
    257a:	9b04      	ldr	r3, [sp, #16]
    257c:	9a02      	ldr	r2, [sp, #8]
    257e:	0039      	movs	r1, r7
    2580:	0030      	movs	r0, r6
    2582:	f7ff ffc0 	bl	2506 <__sfputs_r>
    2586:	1c43      	adds	r3, r0, #1
    2588:	d100      	bne.n	258c <_vfiprintf_r+0x60>
    258a:	e0cc      	b.n	2726 <_vfiprintf_r+0x1fa>
    258c:	696a      	ldr	r2, [r5, #20]
    258e:	9b04      	ldr	r3, [sp, #16]
    2590:	4694      	mov	ip, r2
    2592:	4463      	add	r3, ip
    2594:	616b      	str	r3, [r5, #20]
    2596:	7823      	ldrb	r3, [r4, #0]
    2598:	2b00      	cmp	r3, #0
    259a:	d100      	bne.n	259e <_vfiprintf_r+0x72>
    259c:	e0c3      	b.n	2726 <_vfiprintf_r+0x1fa>
    259e:	2201      	movs	r2, #1
    25a0:	2300      	movs	r3, #0
    25a2:	4252      	negs	r2, r2
    25a4:	606a      	str	r2, [r5, #4]
    25a6:	a902      	add	r1, sp, #8
    25a8:	3254      	adds	r2, #84	; 0x54
    25aa:	1852      	adds	r2, r2, r1
    25ac:	3401      	adds	r4, #1
    25ae:	602b      	str	r3, [r5, #0]
    25b0:	60eb      	str	r3, [r5, #12]
    25b2:	60ab      	str	r3, [r5, #8]
    25b4:	7013      	strb	r3, [r2, #0]
    25b6:	65ab      	str	r3, [r5, #88]	; 0x58
    25b8:	7821      	ldrb	r1, [r4, #0]
    25ba:	2205      	movs	r2, #5
    25bc:	4862      	ldr	r0, [pc, #392]	; (2748 <_vfiprintf_r+0x21c>)
    25be:	f000 fb15 	bl	2bec <memchr>
    25c2:	1c63      	adds	r3, r4, #1
    25c4:	469c      	mov	ip, r3
    25c6:	2800      	cmp	r0, #0
    25c8:	d135      	bne.n	2636 <_vfiprintf_r+0x10a>
    25ca:	6829      	ldr	r1, [r5, #0]
    25cc:	06cb      	lsls	r3, r1, #27
    25ce:	d504      	bpl.n	25da <_vfiprintf_r+0xae>
    25d0:	2353      	movs	r3, #83	; 0x53
    25d2:	aa02      	add	r2, sp, #8
    25d4:	3020      	adds	r0, #32
    25d6:	189b      	adds	r3, r3, r2
    25d8:	7018      	strb	r0, [r3, #0]
    25da:	070b      	lsls	r3, r1, #28
    25dc:	d504      	bpl.n	25e8 <_vfiprintf_r+0xbc>
    25de:	2353      	movs	r3, #83	; 0x53
    25e0:	202b      	movs	r0, #43	; 0x2b
    25e2:	aa02      	add	r2, sp, #8
    25e4:	189b      	adds	r3, r3, r2
    25e6:	7018      	strb	r0, [r3, #0]
    25e8:	7823      	ldrb	r3, [r4, #0]
    25ea:	2b2a      	cmp	r3, #42	; 0x2a
    25ec:	d02c      	beq.n	2648 <_vfiprintf_r+0x11c>
    25ee:	2000      	movs	r0, #0
    25f0:	210a      	movs	r1, #10
    25f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25f4:	7822      	ldrb	r2, [r4, #0]
    25f6:	3a30      	subs	r2, #48	; 0x30
    25f8:	2a09      	cmp	r2, #9
    25fa:	d800      	bhi.n	25fe <_vfiprintf_r+0xd2>
    25fc:	e06b      	b.n	26d6 <_vfiprintf_r+0x1aa>
    25fe:	2800      	cmp	r0, #0
    2600:	d02a      	beq.n	2658 <_vfiprintf_r+0x12c>
    2602:	9309      	str	r3, [sp, #36]	; 0x24
    2604:	e028      	b.n	2658 <_vfiprintf_r+0x12c>
    2606:	4b51      	ldr	r3, [pc, #324]	; (274c <_vfiprintf_r+0x220>)
    2608:	429f      	cmp	r7, r3
    260a:	d101      	bne.n	2610 <_vfiprintf_r+0xe4>
    260c:	68b7      	ldr	r7, [r6, #8]
    260e:	e79e      	b.n	254e <_vfiprintf_r+0x22>
    2610:	4b4f      	ldr	r3, [pc, #316]	; (2750 <_vfiprintf_r+0x224>)
    2612:	429f      	cmp	r7, r3
    2614:	d19b      	bne.n	254e <_vfiprintf_r+0x22>
    2616:	68f7      	ldr	r7, [r6, #12]
    2618:	e799      	b.n	254e <_vfiprintf_r+0x22>
    261a:	0039      	movs	r1, r7
    261c:	0030      	movs	r0, r6
    261e:	f7ff fc3b 	bl	1e98 <__swsetup_r>
    2622:	2800      	cmp	r0, #0
    2624:	d099      	beq.n	255a <_vfiprintf_r+0x2e>
    2626:	2001      	movs	r0, #1
    2628:	4240      	negs	r0, r0
    262a:	b01f      	add	sp, #124	; 0x7c
    262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    262e:	2b25      	cmp	r3, #37	; 0x25
    2630:	d09f      	beq.n	2572 <_vfiprintf_r+0x46>
    2632:	3401      	adds	r4, #1
    2634:	e79a      	b.n	256c <_vfiprintf_r+0x40>
    2636:	4b44      	ldr	r3, [pc, #272]	; (2748 <_vfiprintf_r+0x21c>)
    2638:	6829      	ldr	r1, [r5, #0]
    263a:	1ac0      	subs	r0, r0, r3
    263c:	2301      	movs	r3, #1
    263e:	4083      	lsls	r3, r0
    2640:	430b      	orrs	r3, r1
    2642:	602b      	str	r3, [r5, #0]
    2644:	4664      	mov	r4, ip
    2646:	e7b7      	b.n	25b8 <_vfiprintf_r+0x8c>
    2648:	9b05      	ldr	r3, [sp, #20]
    264a:	1d18      	adds	r0, r3, #4
    264c:	681b      	ldr	r3, [r3, #0]
    264e:	9005      	str	r0, [sp, #20]
    2650:	2b00      	cmp	r3, #0
    2652:	db3a      	blt.n	26ca <_vfiprintf_r+0x19e>
    2654:	9309      	str	r3, [sp, #36]	; 0x24
    2656:	4664      	mov	r4, ip
    2658:	7823      	ldrb	r3, [r4, #0]
    265a:	2b2e      	cmp	r3, #46	; 0x2e
    265c:	d10b      	bne.n	2676 <_vfiprintf_r+0x14a>
    265e:	7863      	ldrb	r3, [r4, #1]
    2660:	1c62      	adds	r2, r4, #1
    2662:	2b2a      	cmp	r3, #42	; 0x2a
    2664:	d13f      	bne.n	26e6 <_vfiprintf_r+0x1ba>
    2666:	9b05      	ldr	r3, [sp, #20]
    2668:	3402      	adds	r4, #2
    266a:	1d1a      	adds	r2, r3, #4
    266c:	681b      	ldr	r3, [r3, #0]
    266e:	9205      	str	r2, [sp, #20]
    2670:	2b00      	cmp	r3, #0
    2672:	db35      	blt.n	26e0 <_vfiprintf_r+0x1b4>
    2674:	9307      	str	r3, [sp, #28]
    2676:	7821      	ldrb	r1, [r4, #0]
    2678:	2203      	movs	r2, #3
    267a:	4836      	ldr	r0, [pc, #216]	; (2754 <_vfiprintf_r+0x228>)
    267c:	f000 fab6 	bl	2bec <memchr>
    2680:	2800      	cmp	r0, #0
    2682:	d007      	beq.n	2694 <_vfiprintf_r+0x168>
    2684:	4b33      	ldr	r3, [pc, #204]	; (2754 <_vfiprintf_r+0x228>)
    2686:	682a      	ldr	r2, [r5, #0]
    2688:	1ac0      	subs	r0, r0, r3
    268a:	2340      	movs	r3, #64	; 0x40
    268c:	4083      	lsls	r3, r0
    268e:	4313      	orrs	r3, r2
    2690:	602b      	str	r3, [r5, #0]
    2692:	3401      	adds	r4, #1
    2694:	7821      	ldrb	r1, [r4, #0]
    2696:	1c63      	adds	r3, r4, #1
    2698:	2206      	movs	r2, #6
    269a:	482f      	ldr	r0, [pc, #188]	; (2758 <_vfiprintf_r+0x22c>)
    269c:	9302      	str	r3, [sp, #8]
    269e:	7629      	strb	r1, [r5, #24]
    26a0:	f000 faa4 	bl	2bec <memchr>
    26a4:	2800      	cmp	r0, #0
    26a6:	d044      	beq.n	2732 <_vfiprintf_r+0x206>
    26a8:	4b2c      	ldr	r3, [pc, #176]	; (275c <_vfiprintf_r+0x230>)
    26aa:	2b00      	cmp	r3, #0
    26ac:	d12f      	bne.n	270e <_vfiprintf_r+0x1e2>
    26ae:	6829      	ldr	r1, [r5, #0]
    26b0:	9b05      	ldr	r3, [sp, #20]
    26b2:	2207      	movs	r2, #7
    26b4:	05c9      	lsls	r1, r1, #23
    26b6:	d528      	bpl.n	270a <_vfiprintf_r+0x1de>
    26b8:	189b      	adds	r3, r3, r2
    26ba:	4393      	bics	r3, r2
    26bc:	3308      	adds	r3, #8
    26be:	9305      	str	r3, [sp, #20]
    26c0:	696b      	ldr	r3, [r5, #20]
    26c2:	9a03      	ldr	r2, [sp, #12]
    26c4:	189b      	adds	r3, r3, r2
    26c6:	616b      	str	r3, [r5, #20]
    26c8:	e74f      	b.n	256a <_vfiprintf_r+0x3e>
    26ca:	425b      	negs	r3, r3
    26cc:	60eb      	str	r3, [r5, #12]
    26ce:	2302      	movs	r3, #2
    26d0:	430b      	orrs	r3, r1
    26d2:	602b      	str	r3, [r5, #0]
    26d4:	e7bf      	b.n	2656 <_vfiprintf_r+0x12a>
    26d6:	434b      	muls	r3, r1
    26d8:	3401      	adds	r4, #1
    26da:	189b      	adds	r3, r3, r2
    26dc:	2001      	movs	r0, #1
    26de:	e789      	b.n	25f4 <_vfiprintf_r+0xc8>
    26e0:	2301      	movs	r3, #1
    26e2:	425b      	negs	r3, r3
    26e4:	e7c6      	b.n	2674 <_vfiprintf_r+0x148>
    26e6:	2300      	movs	r3, #0
    26e8:	0014      	movs	r4, r2
    26ea:	200a      	movs	r0, #10
    26ec:	001a      	movs	r2, r3
    26ee:	606b      	str	r3, [r5, #4]
    26f0:	7821      	ldrb	r1, [r4, #0]
    26f2:	3930      	subs	r1, #48	; 0x30
    26f4:	2909      	cmp	r1, #9
    26f6:	d903      	bls.n	2700 <_vfiprintf_r+0x1d4>
    26f8:	2b00      	cmp	r3, #0
    26fa:	d0bc      	beq.n	2676 <_vfiprintf_r+0x14a>
    26fc:	9207      	str	r2, [sp, #28]
    26fe:	e7ba      	b.n	2676 <_vfiprintf_r+0x14a>
    2700:	4342      	muls	r2, r0
    2702:	3401      	adds	r4, #1
    2704:	1852      	adds	r2, r2, r1
    2706:	2301      	movs	r3, #1
    2708:	e7f2      	b.n	26f0 <_vfiprintf_r+0x1c4>
    270a:	3307      	adds	r3, #7
    270c:	e7d5      	b.n	26ba <_vfiprintf_r+0x18e>
    270e:	ab05      	add	r3, sp, #20
    2710:	9300      	str	r3, [sp, #0]
    2712:	003a      	movs	r2, r7
    2714:	4b12      	ldr	r3, [pc, #72]	; (2760 <_vfiprintf_r+0x234>)
    2716:	0029      	movs	r1, r5
    2718:	0030      	movs	r0, r6
    271a:	e000      	b.n	271e <_vfiprintf_r+0x1f2>
    271c:	bf00      	nop
    271e:	9003      	str	r0, [sp, #12]
    2720:	9b03      	ldr	r3, [sp, #12]
    2722:	3301      	adds	r3, #1
    2724:	d1cc      	bne.n	26c0 <_vfiprintf_r+0x194>
    2726:	89bb      	ldrh	r3, [r7, #12]
    2728:	065b      	lsls	r3, r3, #25
    272a:	d500      	bpl.n	272e <_vfiprintf_r+0x202>
    272c:	e77b      	b.n	2626 <_vfiprintf_r+0xfa>
    272e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2730:	e77b      	b.n	262a <_vfiprintf_r+0xfe>
    2732:	ab05      	add	r3, sp, #20
    2734:	9300      	str	r3, [sp, #0]
    2736:	003a      	movs	r2, r7
    2738:	4b09      	ldr	r3, [pc, #36]	; (2760 <_vfiprintf_r+0x234>)
    273a:	0029      	movs	r1, r5
    273c:	0030      	movs	r0, r6
    273e:	f000 f87f 	bl	2840 <_printf_i>
    2742:	e7ec      	b.n	271e <_vfiprintf_r+0x1f2>
    2744:	00002cc4 	.word	0x00002cc4
    2748:	00002d04 	.word	0x00002d04
    274c:	00002ce4 	.word	0x00002ce4
    2750:	00002ca4 	.word	0x00002ca4
    2754:	00002d0a 	.word	0x00002d0a
    2758:	00002d0e 	.word	0x00002d0e
    275c:	00000000 	.word	0x00000000
    2760:	00002507 	.word	0x00002507

00002764 <_printf_common>:
    2764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2766:	0015      	movs	r5, r2
    2768:	9301      	str	r3, [sp, #4]
    276a:	688a      	ldr	r2, [r1, #8]
    276c:	690b      	ldr	r3, [r1, #16]
    276e:	9000      	str	r0, [sp, #0]
    2770:	000c      	movs	r4, r1
    2772:	4293      	cmp	r3, r2
    2774:	da00      	bge.n	2778 <_printf_common+0x14>
    2776:	0013      	movs	r3, r2
    2778:	0022      	movs	r2, r4
    277a:	602b      	str	r3, [r5, #0]
    277c:	3243      	adds	r2, #67	; 0x43
    277e:	7812      	ldrb	r2, [r2, #0]
    2780:	2a00      	cmp	r2, #0
    2782:	d001      	beq.n	2788 <_printf_common+0x24>
    2784:	3301      	adds	r3, #1
    2786:	602b      	str	r3, [r5, #0]
    2788:	6823      	ldr	r3, [r4, #0]
    278a:	069b      	lsls	r3, r3, #26
    278c:	d502      	bpl.n	2794 <_printf_common+0x30>
    278e:	682b      	ldr	r3, [r5, #0]
    2790:	3302      	adds	r3, #2
    2792:	602b      	str	r3, [r5, #0]
    2794:	2706      	movs	r7, #6
    2796:	6823      	ldr	r3, [r4, #0]
    2798:	401f      	ands	r7, r3
    279a:	d027      	beq.n	27ec <_printf_common+0x88>
    279c:	0023      	movs	r3, r4
    279e:	3343      	adds	r3, #67	; 0x43
    27a0:	781b      	ldrb	r3, [r3, #0]
    27a2:	1e5a      	subs	r2, r3, #1
    27a4:	4193      	sbcs	r3, r2
    27a6:	6822      	ldr	r2, [r4, #0]
    27a8:	0692      	lsls	r2, r2, #26
    27aa:	d430      	bmi.n	280e <_printf_common+0xaa>
    27ac:	0022      	movs	r2, r4
    27ae:	9901      	ldr	r1, [sp, #4]
    27b0:	3243      	adds	r2, #67	; 0x43
    27b2:	9800      	ldr	r0, [sp, #0]
    27b4:	9e08      	ldr	r6, [sp, #32]
    27b6:	47b0      	blx	r6
    27b8:	1c43      	adds	r3, r0, #1
    27ba:	d025      	beq.n	2808 <_printf_common+0xa4>
    27bc:	2306      	movs	r3, #6
    27be:	6820      	ldr	r0, [r4, #0]
    27c0:	682a      	ldr	r2, [r5, #0]
    27c2:	68e1      	ldr	r1, [r4, #12]
    27c4:	4003      	ands	r3, r0
    27c6:	2500      	movs	r5, #0
    27c8:	2b04      	cmp	r3, #4
    27ca:	d103      	bne.n	27d4 <_printf_common+0x70>
    27cc:	1a8d      	subs	r5, r1, r2
    27ce:	43eb      	mvns	r3, r5
    27d0:	17db      	asrs	r3, r3, #31
    27d2:	401d      	ands	r5, r3
    27d4:	68a3      	ldr	r3, [r4, #8]
    27d6:	6922      	ldr	r2, [r4, #16]
    27d8:	4293      	cmp	r3, r2
    27da:	dd01      	ble.n	27e0 <_printf_common+0x7c>
    27dc:	1a9b      	subs	r3, r3, r2
    27de:	18ed      	adds	r5, r5, r3
    27e0:	2700      	movs	r7, #0
    27e2:	42bd      	cmp	r5, r7
    27e4:	d120      	bne.n	2828 <_printf_common+0xc4>
    27e6:	2000      	movs	r0, #0
    27e8:	e010      	b.n	280c <_printf_common+0xa8>
    27ea:	3701      	adds	r7, #1
    27ec:	68e3      	ldr	r3, [r4, #12]
    27ee:	682a      	ldr	r2, [r5, #0]
    27f0:	1a9b      	subs	r3, r3, r2
    27f2:	429f      	cmp	r7, r3
    27f4:	dad2      	bge.n	279c <_printf_common+0x38>
    27f6:	0022      	movs	r2, r4
    27f8:	2301      	movs	r3, #1
    27fa:	3219      	adds	r2, #25
    27fc:	9901      	ldr	r1, [sp, #4]
    27fe:	9800      	ldr	r0, [sp, #0]
    2800:	9e08      	ldr	r6, [sp, #32]
    2802:	47b0      	blx	r6
    2804:	1c43      	adds	r3, r0, #1
    2806:	d1f0      	bne.n	27ea <_printf_common+0x86>
    2808:	2001      	movs	r0, #1
    280a:	4240      	negs	r0, r0
    280c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    280e:	2030      	movs	r0, #48	; 0x30
    2810:	18e1      	adds	r1, r4, r3
    2812:	3143      	adds	r1, #67	; 0x43
    2814:	7008      	strb	r0, [r1, #0]
    2816:	0021      	movs	r1, r4
    2818:	1c5a      	adds	r2, r3, #1
    281a:	3145      	adds	r1, #69	; 0x45
    281c:	7809      	ldrb	r1, [r1, #0]
    281e:	18a2      	adds	r2, r4, r2
    2820:	3243      	adds	r2, #67	; 0x43
    2822:	3302      	adds	r3, #2
    2824:	7011      	strb	r1, [r2, #0]
    2826:	e7c1      	b.n	27ac <_printf_common+0x48>
    2828:	0022      	movs	r2, r4
    282a:	2301      	movs	r3, #1
    282c:	321a      	adds	r2, #26
    282e:	9901      	ldr	r1, [sp, #4]
    2830:	9800      	ldr	r0, [sp, #0]
    2832:	9e08      	ldr	r6, [sp, #32]
    2834:	47b0      	blx	r6
    2836:	1c43      	adds	r3, r0, #1
    2838:	d0e6      	beq.n	2808 <_printf_common+0xa4>
    283a:	3701      	adds	r7, #1
    283c:	e7d1      	b.n	27e2 <_printf_common+0x7e>
	...

00002840 <_printf_i>:
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	b08b      	sub	sp, #44	; 0x2c
    2844:	9206      	str	r2, [sp, #24]
    2846:	000a      	movs	r2, r1
    2848:	3243      	adds	r2, #67	; 0x43
    284a:	9307      	str	r3, [sp, #28]
    284c:	9005      	str	r0, [sp, #20]
    284e:	9204      	str	r2, [sp, #16]
    2850:	7e0a      	ldrb	r2, [r1, #24]
    2852:	000c      	movs	r4, r1
    2854:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2856:	2a6e      	cmp	r2, #110	; 0x6e
    2858:	d100      	bne.n	285c <_printf_i+0x1c>
    285a:	e08f      	b.n	297c <_printf_i+0x13c>
    285c:	d817      	bhi.n	288e <_printf_i+0x4e>
    285e:	2a63      	cmp	r2, #99	; 0x63
    2860:	d02c      	beq.n	28bc <_printf_i+0x7c>
    2862:	d808      	bhi.n	2876 <_printf_i+0x36>
    2864:	2a00      	cmp	r2, #0
    2866:	d100      	bne.n	286a <_printf_i+0x2a>
    2868:	e099      	b.n	299e <_printf_i+0x15e>
    286a:	2a58      	cmp	r2, #88	; 0x58
    286c:	d054      	beq.n	2918 <_printf_i+0xd8>
    286e:	0026      	movs	r6, r4
    2870:	3642      	adds	r6, #66	; 0x42
    2872:	7032      	strb	r2, [r6, #0]
    2874:	e029      	b.n	28ca <_printf_i+0x8a>
    2876:	2a64      	cmp	r2, #100	; 0x64
    2878:	d001      	beq.n	287e <_printf_i+0x3e>
    287a:	2a69      	cmp	r2, #105	; 0x69
    287c:	d1f7      	bne.n	286e <_printf_i+0x2e>
    287e:	6821      	ldr	r1, [r4, #0]
    2880:	681a      	ldr	r2, [r3, #0]
    2882:	0608      	lsls	r0, r1, #24
    2884:	d523      	bpl.n	28ce <_printf_i+0x8e>
    2886:	1d11      	adds	r1, r2, #4
    2888:	6019      	str	r1, [r3, #0]
    288a:	6815      	ldr	r5, [r2, #0]
    288c:	e025      	b.n	28da <_printf_i+0x9a>
    288e:	2a73      	cmp	r2, #115	; 0x73
    2890:	d100      	bne.n	2894 <_printf_i+0x54>
    2892:	e088      	b.n	29a6 <_printf_i+0x166>
    2894:	d808      	bhi.n	28a8 <_printf_i+0x68>
    2896:	2a6f      	cmp	r2, #111	; 0x6f
    2898:	d029      	beq.n	28ee <_printf_i+0xae>
    289a:	2a70      	cmp	r2, #112	; 0x70
    289c:	d1e7      	bne.n	286e <_printf_i+0x2e>
    289e:	2220      	movs	r2, #32
    28a0:	6809      	ldr	r1, [r1, #0]
    28a2:	430a      	orrs	r2, r1
    28a4:	6022      	str	r2, [r4, #0]
    28a6:	e003      	b.n	28b0 <_printf_i+0x70>
    28a8:	2a75      	cmp	r2, #117	; 0x75
    28aa:	d020      	beq.n	28ee <_printf_i+0xae>
    28ac:	2a78      	cmp	r2, #120	; 0x78
    28ae:	d1de      	bne.n	286e <_printf_i+0x2e>
    28b0:	0022      	movs	r2, r4
    28b2:	2178      	movs	r1, #120	; 0x78
    28b4:	3245      	adds	r2, #69	; 0x45
    28b6:	7011      	strb	r1, [r2, #0]
    28b8:	4a6c      	ldr	r2, [pc, #432]	; (2a6c <_printf_i+0x22c>)
    28ba:	e030      	b.n	291e <_printf_i+0xde>
    28bc:	000e      	movs	r6, r1
    28be:	681a      	ldr	r2, [r3, #0]
    28c0:	3642      	adds	r6, #66	; 0x42
    28c2:	1d11      	adds	r1, r2, #4
    28c4:	6019      	str	r1, [r3, #0]
    28c6:	6813      	ldr	r3, [r2, #0]
    28c8:	7033      	strb	r3, [r6, #0]
    28ca:	2301      	movs	r3, #1
    28cc:	e079      	b.n	29c2 <_printf_i+0x182>
    28ce:	0649      	lsls	r1, r1, #25
    28d0:	d5d9      	bpl.n	2886 <_printf_i+0x46>
    28d2:	1d11      	adds	r1, r2, #4
    28d4:	6019      	str	r1, [r3, #0]
    28d6:	2300      	movs	r3, #0
    28d8:	5ed5      	ldrsh	r5, [r2, r3]
    28da:	2d00      	cmp	r5, #0
    28dc:	da03      	bge.n	28e6 <_printf_i+0xa6>
    28de:	232d      	movs	r3, #45	; 0x2d
    28e0:	9a04      	ldr	r2, [sp, #16]
    28e2:	426d      	negs	r5, r5
    28e4:	7013      	strb	r3, [r2, #0]
    28e6:	4b62      	ldr	r3, [pc, #392]	; (2a70 <_printf_i+0x230>)
    28e8:	270a      	movs	r7, #10
    28ea:	9303      	str	r3, [sp, #12]
    28ec:	e02f      	b.n	294e <_printf_i+0x10e>
    28ee:	6820      	ldr	r0, [r4, #0]
    28f0:	6819      	ldr	r1, [r3, #0]
    28f2:	0605      	lsls	r5, r0, #24
    28f4:	d503      	bpl.n	28fe <_printf_i+0xbe>
    28f6:	1d08      	adds	r0, r1, #4
    28f8:	6018      	str	r0, [r3, #0]
    28fa:	680d      	ldr	r5, [r1, #0]
    28fc:	e005      	b.n	290a <_printf_i+0xca>
    28fe:	0640      	lsls	r0, r0, #25
    2900:	d5f9      	bpl.n	28f6 <_printf_i+0xb6>
    2902:	680d      	ldr	r5, [r1, #0]
    2904:	1d08      	adds	r0, r1, #4
    2906:	6018      	str	r0, [r3, #0]
    2908:	b2ad      	uxth	r5, r5
    290a:	4b59      	ldr	r3, [pc, #356]	; (2a70 <_printf_i+0x230>)
    290c:	2708      	movs	r7, #8
    290e:	9303      	str	r3, [sp, #12]
    2910:	2a6f      	cmp	r2, #111	; 0x6f
    2912:	d018      	beq.n	2946 <_printf_i+0x106>
    2914:	270a      	movs	r7, #10
    2916:	e016      	b.n	2946 <_printf_i+0x106>
    2918:	3145      	adds	r1, #69	; 0x45
    291a:	700a      	strb	r2, [r1, #0]
    291c:	4a54      	ldr	r2, [pc, #336]	; (2a70 <_printf_i+0x230>)
    291e:	9203      	str	r2, [sp, #12]
    2920:	681a      	ldr	r2, [r3, #0]
    2922:	6821      	ldr	r1, [r4, #0]
    2924:	1d10      	adds	r0, r2, #4
    2926:	6018      	str	r0, [r3, #0]
    2928:	6815      	ldr	r5, [r2, #0]
    292a:	0608      	lsls	r0, r1, #24
    292c:	d522      	bpl.n	2974 <_printf_i+0x134>
    292e:	07cb      	lsls	r3, r1, #31
    2930:	d502      	bpl.n	2938 <_printf_i+0xf8>
    2932:	2320      	movs	r3, #32
    2934:	4319      	orrs	r1, r3
    2936:	6021      	str	r1, [r4, #0]
    2938:	2710      	movs	r7, #16
    293a:	2d00      	cmp	r5, #0
    293c:	d103      	bne.n	2946 <_printf_i+0x106>
    293e:	2320      	movs	r3, #32
    2940:	6822      	ldr	r2, [r4, #0]
    2942:	439a      	bics	r2, r3
    2944:	6022      	str	r2, [r4, #0]
    2946:	0023      	movs	r3, r4
    2948:	2200      	movs	r2, #0
    294a:	3343      	adds	r3, #67	; 0x43
    294c:	701a      	strb	r2, [r3, #0]
    294e:	6863      	ldr	r3, [r4, #4]
    2950:	60a3      	str	r3, [r4, #8]
    2952:	2b00      	cmp	r3, #0
    2954:	db5c      	blt.n	2a10 <_printf_i+0x1d0>
    2956:	2204      	movs	r2, #4
    2958:	6821      	ldr	r1, [r4, #0]
    295a:	4391      	bics	r1, r2
    295c:	6021      	str	r1, [r4, #0]
    295e:	2d00      	cmp	r5, #0
    2960:	d158      	bne.n	2a14 <_printf_i+0x1d4>
    2962:	9e04      	ldr	r6, [sp, #16]
    2964:	2b00      	cmp	r3, #0
    2966:	d064      	beq.n	2a32 <_printf_i+0x1f2>
    2968:	0026      	movs	r6, r4
    296a:	9b03      	ldr	r3, [sp, #12]
    296c:	3642      	adds	r6, #66	; 0x42
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	7033      	strb	r3, [r6, #0]
    2972:	e05e      	b.n	2a32 <_printf_i+0x1f2>
    2974:	0648      	lsls	r0, r1, #25
    2976:	d5da      	bpl.n	292e <_printf_i+0xee>
    2978:	b2ad      	uxth	r5, r5
    297a:	e7d8      	b.n	292e <_printf_i+0xee>
    297c:	6809      	ldr	r1, [r1, #0]
    297e:	681a      	ldr	r2, [r3, #0]
    2980:	0608      	lsls	r0, r1, #24
    2982:	d505      	bpl.n	2990 <_printf_i+0x150>
    2984:	1d11      	adds	r1, r2, #4
    2986:	6019      	str	r1, [r3, #0]
    2988:	6813      	ldr	r3, [r2, #0]
    298a:	6962      	ldr	r2, [r4, #20]
    298c:	601a      	str	r2, [r3, #0]
    298e:	e006      	b.n	299e <_printf_i+0x15e>
    2990:	0649      	lsls	r1, r1, #25
    2992:	d5f7      	bpl.n	2984 <_printf_i+0x144>
    2994:	1d11      	adds	r1, r2, #4
    2996:	6019      	str	r1, [r3, #0]
    2998:	6813      	ldr	r3, [r2, #0]
    299a:	8aa2      	ldrh	r2, [r4, #20]
    299c:	801a      	strh	r2, [r3, #0]
    299e:	2300      	movs	r3, #0
    29a0:	9e04      	ldr	r6, [sp, #16]
    29a2:	6123      	str	r3, [r4, #16]
    29a4:	e054      	b.n	2a50 <_printf_i+0x210>
    29a6:	681a      	ldr	r2, [r3, #0]
    29a8:	1d11      	adds	r1, r2, #4
    29aa:	6019      	str	r1, [r3, #0]
    29ac:	6816      	ldr	r6, [r2, #0]
    29ae:	2100      	movs	r1, #0
    29b0:	6862      	ldr	r2, [r4, #4]
    29b2:	0030      	movs	r0, r6
    29b4:	f000 f91a 	bl	2bec <memchr>
    29b8:	2800      	cmp	r0, #0
    29ba:	d001      	beq.n	29c0 <_printf_i+0x180>
    29bc:	1b80      	subs	r0, r0, r6
    29be:	6060      	str	r0, [r4, #4]
    29c0:	6863      	ldr	r3, [r4, #4]
    29c2:	6123      	str	r3, [r4, #16]
    29c4:	2300      	movs	r3, #0
    29c6:	9a04      	ldr	r2, [sp, #16]
    29c8:	7013      	strb	r3, [r2, #0]
    29ca:	e041      	b.n	2a50 <_printf_i+0x210>
    29cc:	6923      	ldr	r3, [r4, #16]
    29ce:	0032      	movs	r2, r6
    29d0:	9906      	ldr	r1, [sp, #24]
    29d2:	9805      	ldr	r0, [sp, #20]
    29d4:	9d07      	ldr	r5, [sp, #28]
    29d6:	47a8      	blx	r5
    29d8:	1c43      	adds	r3, r0, #1
    29da:	d043      	beq.n	2a64 <_printf_i+0x224>
    29dc:	6823      	ldr	r3, [r4, #0]
    29de:	2500      	movs	r5, #0
    29e0:	079b      	lsls	r3, r3, #30
    29e2:	d40f      	bmi.n	2a04 <_printf_i+0x1c4>
    29e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29e6:	68e0      	ldr	r0, [r4, #12]
    29e8:	4298      	cmp	r0, r3
    29ea:	da3d      	bge.n	2a68 <_printf_i+0x228>
    29ec:	0018      	movs	r0, r3
    29ee:	e03b      	b.n	2a68 <_printf_i+0x228>
    29f0:	0022      	movs	r2, r4
    29f2:	2301      	movs	r3, #1
    29f4:	3219      	adds	r2, #25
    29f6:	9906      	ldr	r1, [sp, #24]
    29f8:	9805      	ldr	r0, [sp, #20]
    29fa:	9e07      	ldr	r6, [sp, #28]
    29fc:	47b0      	blx	r6
    29fe:	1c43      	adds	r3, r0, #1
    2a00:	d030      	beq.n	2a64 <_printf_i+0x224>
    2a02:	3501      	adds	r5, #1
    2a04:	68e3      	ldr	r3, [r4, #12]
    2a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2a08:	1a9b      	subs	r3, r3, r2
    2a0a:	429d      	cmp	r5, r3
    2a0c:	dbf0      	blt.n	29f0 <_printf_i+0x1b0>
    2a0e:	e7e9      	b.n	29e4 <_printf_i+0x1a4>
    2a10:	2d00      	cmp	r5, #0
    2a12:	d0a9      	beq.n	2968 <_printf_i+0x128>
    2a14:	9e04      	ldr	r6, [sp, #16]
    2a16:	0028      	movs	r0, r5
    2a18:	0039      	movs	r1, r7
    2a1a:	f7ff f8bb 	bl	1b94 <__aeabi_uidivmod>
    2a1e:	9b03      	ldr	r3, [sp, #12]
    2a20:	3e01      	subs	r6, #1
    2a22:	5c5b      	ldrb	r3, [r3, r1]
    2a24:	0028      	movs	r0, r5
    2a26:	7033      	strb	r3, [r6, #0]
    2a28:	0039      	movs	r1, r7
    2a2a:	f7ff f82d 	bl	1a88 <__udivsi3>
    2a2e:	1e05      	subs	r5, r0, #0
    2a30:	d1f1      	bne.n	2a16 <_printf_i+0x1d6>
    2a32:	2f08      	cmp	r7, #8
    2a34:	d109      	bne.n	2a4a <_printf_i+0x20a>
    2a36:	6823      	ldr	r3, [r4, #0]
    2a38:	07db      	lsls	r3, r3, #31
    2a3a:	d506      	bpl.n	2a4a <_printf_i+0x20a>
    2a3c:	6863      	ldr	r3, [r4, #4]
    2a3e:	6922      	ldr	r2, [r4, #16]
    2a40:	4293      	cmp	r3, r2
    2a42:	dc02      	bgt.n	2a4a <_printf_i+0x20a>
    2a44:	2330      	movs	r3, #48	; 0x30
    2a46:	3e01      	subs	r6, #1
    2a48:	7033      	strb	r3, [r6, #0]
    2a4a:	9b04      	ldr	r3, [sp, #16]
    2a4c:	1b9b      	subs	r3, r3, r6
    2a4e:	6123      	str	r3, [r4, #16]
    2a50:	9b07      	ldr	r3, [sp, #28]
    2a52:	aa09      	add	r2, sp, #36	; 0x24
    2a54:	9300      	str	r3, [sp, #0]
    2a56:	0021      	movs	r1, r4
    2a58:	9b06      	ldr	r3, [sp, #24]
    2a5a:	9805      	ldr	r0, [sp, #20]
    2a5c:	f7ff fe82 	bl	2764 <_printf_common>
    2a60:	1c43      	adds	r3, r0, #1
    2a62:	d1b3      	bne.n	29cc <_printf_i+0x18c>
    2a64:	2001      	movs	r0, #1
    2a66:	4240      	negs	r0, r0
    2a68:	b00b      	add	sp, #44	; 0x2c
    2a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a6c:	00002d26 	.word	0x00002d26
    2a70:	00002d15 	.word	0x00002d15

00002a74 <_sbrk_r>:
    2a74:	2300      	movs	r3, #0
    2a76:	b570      	push	{r4, r5, r6, lr}
    2a78:	4c06      	ldr	r4, [pc, #24]	; (2a94 <_sbrk_r+0x20>)
    2a7a:	0005      	movs	r5, r0
    2a7c:	0008      	movs	r0, r1
    2a7e:	6023      	str	r3, [r4, #0]
    2a80:	f7fe fe94 	bl	17ac <_sbrk>
    2a84:	1c43      	adds	r3, r0, #1
    2a86:	d103      	bne.n	2a90 <_sbrk_r+0x1c>
    2a88:	6823      	ldr	r3, [r4, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d000      	beq.n	2a90 <_sbrk_r+0x1c>
    2a8e:	602b      	str	r3, [r5, #0]
    2a90:	bd70      	pop	{r4, r5, r6, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	20000618 	.word	0x20000618

00002a98 <__sread>:
    2a98:	b570      	push	{r4, r5, r6, lr}
    2a9a:	000c      	movs	r4, r1
    2a9c:	250e      	movs	r5, #14
    2a9e:	5f49      	ldrsh	r1, [r1, r5]
    2aa0:	f000 f8b2 	bl	2c08 <_read_r>
    2aa4:	2800      	cmp	r0, #0
    2aa6:	db03      	blt.n	2ab0 <__sread+0x18>
    2aa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2aaa:	181b      	adds	r3, r3, r0
    2aac:	6563      	str	r3, [r4, #84]	; 0x54
    2aae:	bd70      	pop	{r4, r5, r6, pc}
    2ab0:	89a3      	ldrh	r3, [r4, #12]
    2ab2:	4a02      	ldr	r2, [pc, #8]	; (2abc <__sread+0x24>)
    2ab4:	4013      	ands	r3, r2
    2ab6:	81a3      	strh	r3, [r4, #12]
    2ab8:	e7f9      	b.n	2aae <__sread+0x16>
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	ffffefff 	.word	0xffffefff

00002ac0 <__swrite>:
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ac2:	001f      	movs	r7, r3
    2ac4:	898b      	ldrh	r3, [r1, #12]
    2ac6:	0005      	movs	r5, r0
    2ac8:	000c      	movs	r4, r1
    2aca:	0016      	movs	r6, r2
    2acc:	05db      	lsls	r3, r3, #23
    2ace:	d505      	bpl.n	2adc <__swrite+0x1c>
    2ad0:	230e      	movs	r3, #14
    2ad2:	5ec9      	ldrsh	r1, [r1, r3]
    2ad4:	2200      	movs	r2, #0
    2ad6:	2302      	movs	r3, #2
    2ad8:	f000 f874 	bl	2bc4 <_lseek_r>
    2adc:	89a3      	ldrh	r3, [r4, #12]
    2ade:	4a05      	ldr	r2, [pc, #20]	; (2af4 <__swrite+0x34>)
    2ae0:	0028      	movs	r0, r5
    2ae2:	4013      	ands	r3, r2
    2ae4:	81a3      	strh	r3, [r4, #12]
    2ae6:	0032      	movs	r2, r6
    2ae8:	230e      	movs	r3, #14
    2aea:	5ee1      	ldrsh	r1, [r4, r3]
    2aec:	003b      	movs	r3, r7
    2aee:	f000 f81f 	bl	2b30 <_write_r>
    2af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2af4:	ffffefff 	.word	0xffffefff

00002af8 <__sseek>:
    2af8:	b570      	push	{r4, r5, r6, lr}
    2afa:	000c      	movs	r4, r1
    2afc:	250e      	movs	r5, #14
    2afe:	5f49      	ldrsh	r1, [r1, r5]
    2b00:	f000 f860 	bl	2bc4 <_lseek_r>
    2b04:	89a3      	ldrh	r3, [r4, #12]
    2b06:	1c42      	adds	r2, r0, #1
    2b08:	d103      	bne.n	2b12 <__sseek+0x1a>
    2b0a:	4a05      	ldr	r2, [pc, #20]	; (2b20 <__sseek+0x28>)
    2b0c:	4013      	ands	r3, r2
    2b0e:	81a3      	strh	r3, [r4, #12]
    2b10:	bd70      	pop	{r4, r5, r6, pc}
    2b12:	2280      	movs	r2, #128	; 0x80
    2b14:	0152      	lsls	r2, r2, #5
    2b16:	4313      	orrs	r3, r2
    2b18:	81a3      	strh	r3, [r4, #12]
    2b1a:	6560      	str	r0, [r4, #84]	; 0x54
    2b1c:	e7f8      	b.n	2b10 <__sseek+0x18>
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	ffffefff 	.word	0xffffefff

00002b24 <__sclose>:
    2b24:	b510      	push	{r4, lr}
    2b26:	230e      	movs	r3, #14
    2b28:	5ec9      	ldrsh	r1, [r1, r3]
    2b2a:	f000 f815 	bl	2b58 <_close_r>
    2b2e:	bd10      	pop	{r4, pc}

00002b30 <_write_r>:
    2b30:	b570      	push	{r4, r5, r6, lr}
    2b32:	0005      	movs	r5, r0
    2b34:	0008      	movs	r0, r1
    2b36:	0011      	movs	r1, r2
    2b38:	2200      	movs	r2, #0
    2b3a:	4c06      	ldr	r4, [pc, #24]	; (2b54 <_write_r+0x24>)
    2b3c:	6022      	str	r2, [r4, #0]
    2b3e:	001a      	movs	r2, r3
    2b40:	f7fe fe0c 	bl	175c <_write>
    2b44:	1c43      	adds	r3, r0, #1
    2b46:	d103      	bne.n	2b50 <_write_r+0x20>
    2b48:	6823      	ldr	r3, [r4, #0]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d000      	beq.n	2b50 <_write_r+0x20>
    2b4e:	602b      	str	r3, [r5, #0]
    2b50:	bd70      	pop	{r4, r5, r6, pc}
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	20000618 	.word	0x20000618

00002b58 <_close_r>:
    2b58:	2300      	movs	r3, #0
    2b5a:	b570      	push	{r4, r5, r6, lr}
    2b5c:	4c06      	ldr	r4, [pc, #24]	; (2b78 <_close_r+0x20>)
    2b5e:	0005      	movs	r5, r0
    2b60:	0008      	movs	r0, r1
    2b62:	6023      	str	r3, [r4, #0]
    2b64:	f7fe fe34 	bl	17d0 <_close>
    2b68:	1c43      	adds	r3, r0, #1
    2b6a:	d103      	bne.n	2b74 <_close_r+0x1c>
    2b6c:	6823      	ldr	r3, [r4, #0]
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d000      	beq.n	2b74 <_close_r+0x1c>
    2b72:	602b      	str	r3, [r5, #0]
    2b74:	bd70      	pop	{r4, r5, r6, pc}
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	20000618 	.word	0x20000618

00002b7c <_fstat_r>:
    2b7c:	2300      	movs	r3, #0
    2b7e:	b570      	push	{r4, r5, r6, lr}
    2b80:	4c06      	ldr	r4, [pc, #24]	; (2b9c <_fstat_r+0x20>)
    2b82:	0005      	movs	r5, r0
    2b84:	0008      	movs	r0, r1
    2b86:	0011      	movs	r1, r2
    2b88:	6023      	str	r3, [r4, #0]
    2b8a:	f7fe fe24 	bl	17d6 <_fstat>
    2b8e:	1c43      	adds	r3, r0, #1
    2b90:	d103      	bne.n	2b9a <_fstat_r+0x1e>
    2b92:	6823      	ldr	r3, [r4, #0]
    2b94:	2b00      	cmp	r3, #0
    2b96:	d000      	beq.n	2b9a <_fstat_r+0x1e>
    2b98:	602b      	str	r3, [r5, #0]
    2b9a:	bd70      	pop	{r4, r5, r6, pc}
    2b9c:	20000618 	.word	0x20000618

00002ba0 <_isatty_r>:
    2ba0:	2300      	movs	r3, #0
    2ba2:	b570      	push	{r4, r5, r6, lr}
    2ba4:	4c06      	ldr	r4, [pc, #24]	; (2bc0 <_isatty_r+0x20>)
    2ba6:	0005      	movs	r5, r0
    2ba8:	0008      	movs	r0, r1
    2baa:	6023      	str	r3, [r4, #0]
    2bac:	f7fe fe18 	bl	17e0 <_isatty>
    2bb0:	1c43      	adds	r3, r0, #1
    2bb2:	d103      	bne.n	2bbc <_isatty_r+0x1c>
    2bb4:	6823      	ldr	r3, [r4, #0]
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	d000      	beq.n	2bbc <_isatty_r+0x1c>
    2bba:	602b      	str	r3, [r5, #0]
    2bbc:	bd70      	pop	{r4, r5, r6, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	20000618 	.word	0x20000618

00002bc4 <_lseek_r>:
    2bc4:	b570      	push	{r4, r5, r6, lr}
    2bc6:	0005      	movs	r5, r0
    2bc8:	0008      	movs	r0, r1
    2bca:	0011      	movs	r1, r2
    2bcc:	2200      	movs	r2, #0
    2bce:	4c06      	ldr	r4, [pc, #24]	; (2be8 <_lseek_r+0x24>)
    2bd0:	6022      	str	r2, [r4, #0]
    2bd2:	001a      	movs	r2, r3
    2bd4:	f7fe fe06 	bl	17e4 <_lseek>
    2bd8:	1c43      	adds	r3, r0, #1
    2bda:	d103      	bne.n	2be4 <_lseek_r+0x20>
    2bdc:	6823      	ldr	r3, [r4, #0]
    2bde:	2b00      	cmp	r3, #0
    2be0:	d000      	beq.n	2be4 <_lseek_r+0x20>
    2be2:	602b      	str	r3, [r5, #0]
    2be4:	bd70      	pop	{r4, r5, r6, pc}
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	20000618 	.word	0x20000618

00002bec <memchr>:
    2bec:	b2c9      	uxtb	r1, r1
    2bee:	1882      	adds	r2, r0, r2
    2bf0:	4290      	cmp	r0, r2
    2bf2:	d101      	bne.n	2bf8 <memchr+0xc>
    2bf4:	2000      	movs	r0, #0
    2bf6:	4770      	bx	lr
    2bf8:	7803      	ldrb	r3, [r0, #0]
    2bfa:	428b      	cmp	r3, r1
    2bfc:	d0fb      	beq.n	2bf6 <memchr+0xa>
    2bfe:	3001      	adds	r0, #1
    2c00:	e7f6      	b.n	2bf0 <memchr+0x4>

00002c02 <__malloc_lock>:
    2c02:	4770      	bx	lr

00002c04 <__malloc_unlock>:
    2c04:	4770      	bx	lr
	...

00002c08 <_read_r>:
    2c08:	b570      	push	{r4, r5, r6, lr}
    2c0a:	0005      	movs	r5, r0
    2c0c:	0008      	movs	r0, r1
    2c0e:	0011      	movs	r1, r2
    2c10:	2200      	movs	r2, #0
    2c12:	4c06      	ldr	r4, [pc, #24]	; (2c2c <_read_r+0x24>)
    2c14:	6022      	str	r2, [r4, #0]
    2c16:	001a      	movs	r2, r3
    2c18:	f7fe fd7e 	bl	1718 <_read>
    2c1c:	1c43      	adds	r3, r0, #1
    2c1e:	d103      	bne.n	2c28 <_read_r+0x20>
    2c20:	6823      	ldr	r3, [r4, #0]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d000      	beq.n	2c28 <_read_r+0x20>
    2c26:	602b      	str	r3, [r5, #0]
    2c28:	bd70      	pop	{r4, r5, r6, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	20000618 	.word	0x20000618
    2c30:	42000800 	.word	0x42000800
    2c34:	42000c00 	.word	0x42000c00
    2c38:	42001000 	.word	0x42001000
    2c3c:	42001400 	.word	0x42001400
    2c40:	42001800 	.word	0x42001800
    2c44:	42001c00 	.word	0x42001c00
    2c48:	00000e22 	.word	0x00000e22
    2c4c:	00000e1e 	.word	0x00000e1e
    2c50:	00000e1e 	.word	0x00000e1e
    2c54:	00000e84 	.word	0x00000e84
    2c58:	00000e84 	.word	0x00000e84
    2c5c:	00000e36 	.word	0x00000e36
    2c60:	00000e28 	.word	0x00000e28
    2c64:	00000e3c 	.word	0x00000e3c
    2c68:	00000e72 	.word	0x00000e72
    2c6c:	00001008 	.word	0x00001008
    2c70:	00000fe8 	.word	0x00000fe8
    2c74:	00000fe8 	.word	0x00000fe8
    2c78:	00001074 	.word	0x00001074
    2c7c:	00000ffa 	.word	0x00000ffa
    2c80:	00001016 	.word	0x00001016
    2c84:	00000fec 	.word	0x00000fec
    2c88:	00001024 	.word	0x00001024
    2c8c:	00001064 	.word	0x00001064
    2c90:	6c6c6548 	.word	0x6c6c6548
    2c94:	5720776f 	.word	0x5720776f
    2c98:	646c726f 	.word	0x646c726f
    2c9c:	00000021 	.word	0x00000021

00002ca0 <_global_impure_ptr>:
    2ca0:	20000010                                ... 

00002ca4 <__sf_fake_stderr>:
	...

00002cc4 <__sf_fake_stdin>:
	...

00002ce4 <__sf_fake_stdout>:
	...
    2d04:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2d14:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2d24:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2d34:	00006665                                ef..

00002d38 <_init>:
    2d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d3e:	bc08      	pop	{r3}
    2d40:	469e      	mov	lr, r3
    2d42:	4770      	bx	lr

00002d44 <__init_array_start>:
    2d44:	000000dd 	.word	0x000000dd

00002d48 <_fini>:
    2d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d4e:	bc08      	pop	{r3}
    2d50:	469e      	mov	lr, r3
    2d52:	4770      	bx	lr

00002d54 <__fini_array_start>:
    2d54:	000000b5 	.word	0x000000b5
