
APPS_WSN_DEMO_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a8d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000fc  20000000  0000a8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002fd4  20000100  0000a9d8  000200fc  2**3
                  ALLOC
  3 .stack        00002004  200030d4  0000d9ac  000200fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  5 .comment      000000e5  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
  6 .debug_info   00054d85  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008255  00000000  00000000  00074f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f06c  00000000  00000000  0007d1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b60  00000000  00000000  0008c24f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001318  00000000  00000000  0008cdaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002133d  00000000  00000000  0008e0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001bedc  00000000  00000000  000af404  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e4d7  00000000  00000000  000cb2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000024bc  00000000  00000000  001597b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
       0:	d8 50 00 20 0d 20 00 00 09 20 00 00 09 20 00 00     .P. . ... ... ..
	...
	if (pu8Mosi == NULL) {
      2c:	09 20 00 00 00 00 00 00 00 00 00 00 09 20 00 00     . ........... ..
	spi_select_slave(&master, &slave_inst, true);
      3c:	09 20 00 00 09 20 00 00 09 20 00 00 09 20 00 00     . ... ... ... ..
			pu8Miso++;
      4c:	09 20 00 00 5d 03 00 00 09 20 00 00 09 20 00 00     . ..].... ... ..
		while (!spi_is_ready_to_write(&master))
      5c:	09 20 00 00 09 20 00 00 c9 08 00 00 d9 08 00 00     . ... ..........
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
      6c:	e9 08 00 00 f9 08 00 00 09 09 00 00 19 09 00 00     ................
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
      7c:	09 20 00 00 09 20 00 00 09 20 00 00 e9 1c 00 00     . ... ... ......
      8c:	f9 1c 00 00 09 1d 00 00 00 00 00 00 00 00 00 00     ................
	if (!spi_is_ready_to_read(module)) {
      9c:	09 20 00 00 09 20 00 00 00 00 00 00 09 20 00 00     . ... ....... ..
	...

000000b4 <__do_global_dtors_aux>:
		*pu8Miso = rxd_data;
      b4:	b510      	push	{r4, lr}
		u16Sz--;
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			pu8Miso++;
      ba:	2b00      	cmp	r3, #0
			pu8Mosi++;
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
	while (u16Sz) {
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
	SercomSpi *const spi_module = &(module->hw->SPI);
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
	while (!spi_is_write_complete(&master))
      cc:	7023      	strb	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
      ce:	bd10      	pop	{r4, pc}
      d0:	20000100 	.word	0x20000100
	spi_select_slave(&master, &slave_inst, false);
      d4:	00000000 	.word	0x00000000
      d8:	0000a8d8 	.word	0x0000a8d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
	return M2M_SUCCESS;
      de:	b510      	push	{r4, lr}
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		return M2M_ERR_INVALID_ARG;
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
		break;
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
			M2M_ERR("invalide ioclt cmd\n");
     100:	00000000 	.word	0x00000000
     104:	20000104 	.word	0x20000104
     108:	0000a8d8 	.word	0x0000a8d8
     10c:	0000a8d8 	.word	0x0000a8d8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000019e1 	.word	0x000019e1
     140:	00008f89 	.word	0x00008f89
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ac:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d106      	bne.n	1c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b8:	2b00      	cmp	r3, #0
     1ba:	d007      	beq.n	1cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b09      	ldr	r3, [pc, #36]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1c2:	4a07      	ldr	r2, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1c4:	6813      	ldr	r3, [r2, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	6013      	str	r3, [r2, #0]
}
     1ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1d2:	2200      	movs	r2, #0
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_enter_critical+0x3c>)
     1d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1d8:	3201      	adds	r2, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	e7f0      	b.n	1c2 <cpu_irq_enter_critical+0x16>
     1e0:	2000011c 	.word	0x2000011c
     1e4:	20000120 	.word	0x20000120
     1e8:	20000008 	.word	0x20000008

000001ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <cpu_irq_leave_critical+0x24>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	3a01      	subs	r2, #1
     1f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d109      	bne.n	20e <cpu_irq_leave_critical+0x22>
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <cpu_irq_leave_critical+0x28>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d005      	beq.n	20e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     202:	2201      	movs	r2, #1
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_leave_critical+0x2c>)
     206:	701a      	strb	r2, [r3, #0]
     208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     20c:	b662      	cpsie	i
	}
}
     20e:	4770      	bx	lr
     210:	2000011c 	.word	0x2000011c
     214:	20000120 	.word	0x20000120
     218:	20000008 	.word	0x20000008

0000021c <system_board_init>:




void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	46c6      	mov	lr, r8
     220:	b500      	push	{lr}
     222:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     224:	ac01      	add	r4, sp, #4
     226:	2601      	movs	r6, #1
     228:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     22a:	2700      	movs	r7, #0
     22c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     22e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     230:	0021      	movs	r1, r4
     232:	2013      	movs	r0, #19
     234:	4d27      	ldr	r5, [pc, #156]	; (2d4 <system_board_init+0xb8>)
     236:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     238:	4b27      	ldr	r3, [pc, #156]	; (2d8 <system_board_init+0xbc>)
     23a:	4698      	mov	r8, r3
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	031b      	lsls	r3, r3, #12
     240:	4642      	mov	r2, r8
     242:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     244:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     246:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     248:	0021      	movs	r1, r4
     24a:	201c      	movs	r0, #28
     24c:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     24e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     250:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     252:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     254:	0021      	movs	r1, r4
     256:	2052      	movs	r0, #82	; 0x52
     258:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     25a:	0021      	movs	r1, r4
     25c:	203e      	movs	r0, #62	; 0x3e
     25e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     260:	0021      	movs	r1, r4
     262:	203f      	movs	r0, #63	; 0x3f
     264:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     266:	0021      	movs	r1, r4
     268:	202f      	movs	r0, #47	; 0x2f
     26a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     26c:	0021      	movs	r1, r4
     26e:	2014      	movs	r0, #20
     270:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     272:	2280      	movs	r2, #128	; 0x80
     274:	02d2      	lsls	r2, r2, #11
     276:	4b19      	ldr	r3, [pc, #100]	; (2dc <system_board_init+0xc0>)
     278:	619a      	str	r2, [r3, #24]
     27a:	4b19      	ldr	r3, [pc, #100]	; (2e0 <system_board_init+0xc4>)
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	05d2      	lsls	r2, r2, #23
     280:	619a      	str	r2, [r3, #24]
     282:	2280      	movs	r2, #128	; 0x80
     284:	0612      	lsls	r2, r2, #24
     286:	619a      	str	r2, [r3, #24]
     288:	2280      	movs	r2, #128	; 0x80
     28a:	0212      	lsls	r2, r2, #8
     28c:	619a      	str	r2, [r3, #24]
     28e:	2380      	movs	r3, #128	; 0x80
     290:	035b      	lsls	r3, r3, #13
     292:	4642      	mov	r2, r8
     294:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     296:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     298:	0021      	movs	r1, r4
     29a:	2053      	movs	r0, #83	; 0x53
     29c:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     29e:	4a11      	ldr	r2, [pc, #68]	; (2e4 <system_board_init+0xc8>)
     2a0:	6a11      	ldr	r1, [r2, #32]
     2a2:	2380      	movs	r3, #128	; 0x80
     2a4:	039b      	lsls	r3, r3, #14
     2a6:	430b      	orrs	r3, r1
     2a8:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     2aa:	2204      	movs	r2, #4
     2ac:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <system_board_init+0xcc>)
     2ae:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2b0:	466b      	mov	r3, sp
     2b2:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     2b4:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     2b6:	2305      	movs	r3, #5
     2b8:	466a      	mov	r2, sp
     2ba:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     2bc:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     2be:	4669      	mov	r1, sp
     2c0:	2009      	movs	r0, #9
     2c2:	4c0a      	ldr	r4, [pc, #40]	; (2ec <system_board_init+0xd0>)
     2c4:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     2c6:	4669      	mov	r1, sp
     2c8:	200c      	movs	r0, #12
     2ca:	47a0      	blx	r4
#endif

}
     2cc:	b002      	add	sp, #8
     2ce:	bc04      	pop	{r2}
     2d0:	4690      	mov	r8, r2
     2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2d4:	000004c1 	.word	0x000004c1
     2d8:	41004400 	.word	0x41004400
     2dc:	41004500 	.word	0x41004500
     2e0:	41004480 	.word	0x41004480
     2e4:	40000400 	.word	0x40000400
     2e8:	42005400 	.word	0x42005400
     2ec:	00001bf1 	.word	0x00001bf1

000002f0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2f0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2f2:	2a00      	cmp	r2, #0
     2f4:	d001      	beq.n	2fa <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2f6:	0018      	movs	r0, r3
     2f8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     2fa:	008b      	lsls	r3, r1, #2
     2fc:	4a06      	ldr	r2, [pc, #24]	; (318 <extint_register_callback+0x28>)
     2fe:	589b      	ldr	r3, [r3, r2]
     300:	2b00      	cmp	r3, #0
     302:	d003      	beq.n	30c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     304:	4283      	cmp	r3, r0
     306:	d005      	beq.n	314 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     308:	231d      	movs	r3, #29
     30a:	e7f4      	b.n	2f6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     30c:	0089      	lsls	r1, r1, #2
     30e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     310:	2300      	movs	r3, #0
     312:	e7f0      	b.n	2f6 <extint_register_callback+0x6>
		return STATUS_OK;
     314:	2300      	movs	r3, #0
     316:	e7ee      	b.n	2f6 <extint_register_callback+0x6>
     318:	20000400 	.word	0x20000400

0000031c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     31c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     31e:	2900      	cmp	r1, #0
     320:	d001      	beq.n	326 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     322:	0018      	movs	r0, r3
     324:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     326:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     328:	281f      	cmp	r0, #31
     32a:	d800      	bhi.n	32e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     32c:	4a02      	ldr	r2, [pc, #8]	; (338 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     32e:	2301      	movs	r3, #1
     330:	4083      	lsls	r3, r0
     332:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     334:	2300      	movs	r3, #0
     336:	e7f4      	b.n	322 <extint_chan_enable_callback+0x6>
     338:	40001800 	.word	0x40001800

0000033c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     33c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     33e:	2900      	cmp	r1, #0
     340:	d001      	beq.n	346 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     342:	0018      	movs	r0, r3
     344:	4770      	bx	lr
		return NULL;
     346:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     348:	281f      	cmp	r0, #31
     34a:	d800      	bhi.n	34e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     34c:	4a02      	ldr	r2, [pc, #8]	; (358 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     34e:	2301      	movs	r3, #1
     350:	4083      	lsls	r3, r0
     352:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     354:	2300      	movs	r3, #0
     356:	e7f4      	b.n	342 <extint_chan_disable_callback+0x6>
     358:	40001800 	.word	0x40001800

0000035c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     35c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     35e:	2200      	movs	r2, #0
     360:	4b10      	ldr	r3, [pc, #64]	; (3a4 <EIC_Handler+0x48>)
     362:	701a      	strb	r2, [r3, #0]
     364:	2300      	movs	r3, #0
     366:	4910      	ldr	r1, [pc, #64]	; (3a8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     368:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     36a:	4e10      	ldr	r6, [pc, #64]	; (3ac <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     36c:	4c0d      	ldr	r4, [pc, #52]	; (3a4 <EIC_Handler+0x48>)
     36e:	e00a      	b.n	386 <EIC_Handler+0x2a>
		return eics[eic_index];
     370:	490d      	ldr	r1, [pc, #52]	; (3a8 <EIC_Handler+0x4c>)
     372:	e008      	b.n	386 <EIC_Handler+0x2a>
     374:	7823      	ldrb	r3, [r4, #0]
     376:	3301      	adds	r3, #1
     378:	b2db      	uxtb	r3, r3
     37a:	7023      	strb	r3, [r4, #0]
     37c:	2b0f      	cmp	r3, #15
     37e:	d810      	bhi.n	3a2 <EIC_Handler+0x46>
		return NULL;
     380:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     382:	2b1f      	cmp	r3, #31
     384:	d9f4      	bls.n	370 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     386:	0028      	movs	r0, r5
     388:	4018      	ands	r0, r3
     38a:	2201      	movs	r2, #1
     38c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     38e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     390:	4210      	tst	r0, r2
     392:	d0ef      	beq.n	374 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     394:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     396:	009b      	lsls	r3, r3, #2
     398:	599b      	ldr	r3, [r3, r6]
     39a:	2b00      	cmp	r3, #0
     39c:	d0ea      	beq.n	374 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     39e:	4798      	blx	r3
     3a0:	e7e8      	b.n	374 <EIC_Handler+0x18>
			}
		}
	}
}
     3a2:	bd70      	pop	{r4, r5, r6, pc}
     3a4:	200003fc 	.word	0x200003fc
     3a8:	40001800 	.word	0x40001800
     3ac:	20000400 	.word	0x20000400

000003b0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3b0:	4a04      	ldr	r2, [pc, #16]	; (3c4 <_extint_enable+0x14>)
     3b2:	7813      	ldrb	r3, [r2, #0]
     3b4:	2102      	movs	r1, #2
     3b6:	430b      	orrs	r3, r1
     3b8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3ba:	7853      	ldrb	r3, [r2, #1]
     3bc:	b25b      	sxtb	r3, r3
     3be:	2b00      	cmp	r3, #0
     3c0:	dbfb      	blt.n	3ba <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3c2:	4770      	bx	lr
     3c4:	40001800 	.word	0x40001800

000003c8 <_system_extint_init>:
{
     3c8:	b500      	push	{lr}
     3ca:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3cc:	4a12      	ldr	r2, [pc, #72]	; (418 <_system_extint_init+0x50>)
     3ce:	6993      	ldr	r3, [r2, #24]
     3d0:	2140      	movs	r1, #64	; 0x40
     3d2:	430b      	orrs	r3, r1
     3d4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3d6:	a901      	add	r1, sp, #4
     3d8:	2300      	movs	r3, #0
     3da:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3dc:	2005      	movs	r0, #5
     3de:	4b0f      	ldr	r3, [pc, #60]	; (41c <_system_extint_init+0x54>)
     3e0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     3e2:	2005      	movs	r0, #5
     3e4:	4b0e      	ldr	r3, [pc, #56]	; (420 <_system_extint_init+0x58>)
     3e6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3e8:	4a0e      	ldr	r2, [pc, #56]	; (424 <_system_extint_init+0x5c>)
     3ea:	7813      	ldrb	r3, [r2, #0]
     3ec:	2101      	movs	r1, #1
     3ee:	430b      	orrs	r3, r1
     3f0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3f2:	7853      	ldrb	r3, [r2, #1]
     3f4:	b25b      	sxtb	r3, r3
     3f6:	2b00      	cmp	r3, #0
     3f8:	dbfb      	blt.n	3f2 <_system_extint_init+0x2a>
     3fa:	4b0b      	ldr	r3, [pc, #44]	; (428 <_system_extint_init+0x60>)
     3fc:	0019      	movs	r1, r3
     3fe:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     400:	2200      	movs	r2, #0
     402:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     404:	4299      	cmp	r1, r3
     406:	d1fc      	bne.n	402 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     408:	2210      	movs	r2, #16
     40a:	4b08      	ldr	r3, [pc, #32]	; (42c <_system_extint_init+0x64>)
     40c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     40e:	4b08      	ldr	r3, [pc, #32]	; (430 <_system_extint_init+0x68>)
     410:	4798      	blx	r3
}
     412:	b003      	add	sp, #12
     414:	bd00      	pop	{pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	40000400 	.word	0x40000400
     41c:	00001af9 	.word	0x00001af9
     420:	00001a6d 	.word	0x00001a6d
     424:	40001800 	.word	0x40001800
     428:	20000400 	.word	0x20000400
     42c:	e000e100 	.word	0xe000e100
     430:	000003b1 	.word	0x000003b1

00000434 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     434:	2300      	movs	r3, #0
     436:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     438:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     43a:	2201      	movs	r2, #1
     43c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     43e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     440:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     442:	3302      	adds	r3, #2
     444:	72c3      	strb	r3, [r0, #11]
}
     446:	4770      	bx	lr

00000448 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     448:	b5f0      	push	{r4, r5, r6, r7, lr}
     44a:	b083      	sub	sp, #12
     44c:	0005      	movs	r5, r0
     44e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     450:	a901      	add	r1, sp, #4
     452:	2300      	movs	r3, #0
     454:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     456:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     458:	7923      	ldrb	r3, [r4, #4]
     45a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     45c:	7a23      	ldrb	r3, [r4, #8]
     45e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     460:	7820      	ldrb	r0, [r4, #0]
     462:	4b15      	ldr	r3, [pc, #84]	; (4b8 <extint_chan_set_config+0x70>)
     464:	4798      	blx	r3
		return NULL;
     466:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     468:	2d1f      	cmp	r5, #31
     46a:	d800      	bhi.n	46e <extint_chan_set_config+0x26>
		return eics[eic_index];
     46c:	4813      	ldr	r0, [pc, #76]	; (4bc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     46e:	2207      	movs	r2, #7
     470:	402a      	ands	r2, r5
     472:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     474:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     476:	7aa3      	ldrb	r3, [r4, #10]
     478:	2b00      	cmp	r3, #0
     47a:	d001      	beq.n	480 <extint_chan_set_config+0x38>
     47c:	2308      	movs	r3, #8
     47e:	431f      	orrs	r7, r3
     480:	08eb      	lsrs	r3, r5, #3
     482:	009b      	lsls	r3, r3, #2
     484:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     486:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     488:	260f      	movs	r6, #15
     48a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     48c:	43b1      	bics	r1, r6
			(new_config << config_pos);
     48e:	4097      	lsls	r7, r2
     490:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     492:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     494:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     496:	7a63      	ldrb	r3, [r4, #9]
     498:	2b00      	cmp	r3, #0
     49a:	d106      	bne.n	4aa <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     49c:	6943      	ldr	r3, [r0, #20]
     49e:	2201      	movs	r2, #1
     4a0:	40aa      	lsls	r2, r5
     4a2:	4393      	bics	r3, r2
     4a4:	6143      	str	r3, [r0, #20]
	}
}
     4a6:	b003      	add	sp, #12
     4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4aa:	6942      	ldr	r2, [r0, #20]
     4ac:	2301      	movs	r3, #1
     4ae:	40ab      	lsls	r3, r5
     4b0:	4313      	orrs	r3, r2
     4b2:	6143      	str	r3, [r0, #20]
     4b4:	e7f7      	b.n	4a6 <extint_chan_set_config+0x5e>
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	00001bf1 	.word	0x00001bf1
     4bc:	40001800 	.word	0x40001800

000004c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4c0:	b500      	push	{lr}
     4c2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4c4:	ab01      	add	r3, sp, #4
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4ca:	780a      	ldrb	r2, [r1, #0]
     4cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ce:	784a      	ldrb	r2, [r1, #1]
     4d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4d2:	788a      	ldrb	r2, [r1, #2]
     4d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4d6:	0019      	movs	r1, r3
     4d8:	4b01      	ldr	r3, [pc, #4]	; (4e0 <port_pin_set_config+0x20>)
     4da:	4798      	blx	r3
}
     4dc:	b003      	add	sp, #12
     4de:	bd00      	pop	{pc}
     4e0:	00001bf1 	.word	0x00001bf1

000004e4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4e6:	46de      	mov	lr, fp
     4e8:	4657      	mov	r7, sl
     4ea:	464e      	mov	r6, r9
     4ec:	4645      	mov	r5, r8
     4ee:	b5e0      	push	{r5, r6, r7, lr}
     4f0:	b087      	sub	sp, #28
     4f2:	4680      	mov	r8, r0
     4f4:	9104      	str	r1, [sp, #16]
     4f6:	0016      	movs	r6, r2
     4f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4fa:	2200      	movs	r2, #0
     4fc:	2300      	movs	r3, #0
     4fe:	2100      	movs	r1, #0
     500:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     502:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     504:	2001      	movs	r0, #1
     506:	0021      	movs	r1, r4
     508:	9600      	str	r6, [sp, #0]
     50a:	9701      	str	r7, [sp, #4]
     50c:	465c      	mov	r4, fp
     50e:	9403      	str	r4, [sp, #12]
     510:	4644      	mov	r4, r8
     512:	9405      	str	r4, [sp, #20]
     514:	e013      	b.n	53e <long_division+0x5a>
     516:	2420      	movs	r4, #32
     518:	1a64      	subs	r4, r4, r1
     51a:	0005      	movs	r5, r0
     51c:	40e5      	lsrs	r5, r4
     51e:	46a8      	mov	r8, r5
     520:	e014      	b.n	54c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     522:	9c00      	ldr	r4, [sp, #0]
     524:	9d01      	ldr	r5, [sp, #4]
     526:	1b12      	subs	r2, r2, r4
     528:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     52a:	465c      	mov	r4, fp
     52c:	464d      	mov	r5, r9
     52e:	432c      	orrs	r4, r5
     530:	46a3      	mov	fp, r4
     532:	9c03      	ldr	r4, [sp, #12]
     534:	4645      	mov	r5, r8
     536:	432c      	orrs	r4, r5
     538:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     53a:	3901      	subs	r1, #1
     53c:	d325      	bcc.n	58a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     53e:	2420      	movs	r4, #32
     540:	4264      	negs	r4, r4
     542:	190c      	adds	r4, r1, r4
     544:	d4e7      	bmi.n	516 <long_division+0x32>
     546:	0005      	movs	r5, r0
     548:	40a5      	lsls	r5, r4
     54a:	46a8      	mov	r8, r5
     54c:	0004      	movs	r4, r0
     54e:	408c      	lsls	r4, r1
     550:	46a1      	mov	r9, r4
		r = r << 1;
     552:	1892      	adds	r2, r2, r2
     554:	415b      	adcs	r3, r3
     556:	0014      	movs	r4, r2
     558:	001d      	movs	r5, r3
		if (n & bit_shift) {
     55a:	9e05      	ldr	r6, [sp, #20]
     55c:	464f      	mov	r7, r9
     55e:	403e      	ands	r6, r7
     560:	46b4      	mov	ip, r6
     562:	9e04      	ldr	r6, [sp, #16]
     564:	4647      	mov	r7, r8
     566:	403e      	ands	r6, r7
     568:	46b2      	mov	sl, r6
     56a:	4666      	mov	r6, ip
     56c:	4657      	mov	r7, sl
     56e:	433e      	orrs	r6, r7
     570:	d003      	beq.n	57a <long_division+0x96>
			r |= 0x01;
     572:	0006      	movs	r6, r0
     574:	4326      	orrs	r6, r4
     576:	0032      	movs	r2, r6
     578:	002b      	movs	r3, r5
		if (r >= d) {
     57a:	9c00      	ldr	r4, [sp, #0]
     57c:	9d01      	ldr	r5, [sp, #4]
     57e:	429d      	cmp	r5, r3
     580:	d8db      	bhi.n	53a <long_division+0x56>
     582:	d1ce      	bne.n	522 <long_division+0x3e>
     584:	4294      	cmp	r4, r2
     586:	d8d8      	bhi.n	53a <long_division+0x56>
     588:	e7cb      	b.n	522 <long_division+0x3e>
     58a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     58c:	4658      	mov	r0, fp
     58e:	0019      	movs	r1, r3
     590:	b007      	add	sp, #28
     592:	bc3c      	pop	{r2, r3, r4, r5}
     594:	4690      	mov	r8, r2
     596:	4699      	mov	r9, r3
     598:	46a2      	mov	sl, r4
     59a:	46ab      	mov	fp, r5
     59c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000059e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     59e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5a0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5a2:	2340      	movs	r3, #64	; 0x40
     5a4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     5a6:	4281      	cmp	r1, r0
     5a8:	d202      	bcs.n	5b0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     5aa:	0018      	movs	r0, r3
     5ac:	bd10      	pop	{r4, pc}
		baud_calculated++;
     5ae:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     5b0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     5b2:	1c63      	adds	r3, r4, #1
     5b4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     5b6:	4288      	cmp	r0, r1
     5b8:	d9f9      	bls.n	5ae <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5ba:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     5bc:	2cff      	cmp	r4, #255	; 0xff
     5be:	d8f4      	bhi.n	5aa <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     5c0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     5c2:	2300      	movs	r3, #0
     5c4:	e7f1      	b.n	5aa <_sercom_get_sync_baud_val+0xc>
	...

000005c8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	b083      	sub	sp, #12
     5cc:	000f      	movs	r7, r1
     5ce:	0016      	movs	r6, r2
     5d0:	aa08      	add	r2, sp, #32
     5d2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     5d4:	0004      	movs	r4, r0
     5d6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5d8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     5da:	42bc      	cmp	r4, r7
     5dc:	d902      	bls.n	5e4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     5de:	0010      	movs	r0, r2
     5e0:	b003      	add	sp, #12
     5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     5e4:	2b00      	cmp	r3, #0
     5e6:	d114      	bne.n	612 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     5e8:	0002      	movs	r2, r0
     5ea:	0008      	movs	r0, r1
     5ec:	2100      	movs	r1, #0
     5ee:	4c19      	ldr	r4, [pc, #100]	; (654 <_sercom_get_async_baud_val+0x8c>)
     5f0:	47a0      	blx	r4
     5f2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     5f4:	003a      	movs	r2, r7
     5f6:	2300      	movs	r3, #0
     5f8:	2000      	movs	r0, #0
     5fa:	4c17      	ldr	r4, [pc, #92]	; (658 <_sercom_get_async_baud_val+0x90>)
     5fc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5fe:	2200      	movs	r2, #0
     600:	2301      	movs	r3, #1
     602:	1a12      	subs	r2, r2, r0
     604:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     606:	0c12      	lsrs	r2, r2, #16
     608:	041b      	lsls	r3, r3, #16
     60a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     60c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     60e:	2200      	movs	r2, #0
     610:	e7e5      	b.n	5de <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     612:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     614:	2b01      	cmp	r3, #1
     616:	d1f9      	bne.n	60c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     618:	000a      	movs	r2, r1
     61a:	2300      	movs	r3, #0
     61c:	2100      	movs	r1, #0
     61e:	4c0d      	ldr	r4, [pc, #52]	; (654 <_sercom_get_async_baud_val+0x8c>)
     620:	47a0      	blx	r4
     622:	0002      	movs	r2, r0
     624:	000b      	movs	r3, r1
     626:	9200      	str	r2, [sp, #0]
     628:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     62a:	0038      	movs	r0, r7
     62c:	2100      	movs	r1, #0
     62e:	4c0a      	ldr	r4, [pc, #40]	; (658 <_sercom_get_async_baud_val+0x90>)
     630:	47a0      	blx	r4
     632:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     634:	2380      	movs	r3, #128	; 0x80
     636:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     638:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     63a:	4298      	cmp	r0, r3
     63c:	d8cf      	bhi.n	5de <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     63e:	0f79      	lsrs	r1, r7, #29
     640:	00f8      	lsls	r0, r7, #3
     642:	9a00      	ldr	r2, [sp, #0]
     644:	9b01      	ldr	r3, [sp, #4]
     646:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     648:	00ea      	lsls	r2, r5, #3
     64a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     64c:	b2d2      	uxtb	r2, r2
     64e:	0352      	lsls	r2, r2, #13
     650:	432a      	orrs	r2, r5
     652:	e7db      	b.n	60c <_sercom_get_async_baud_val+0x44>
     654:	00009275 	.word	0x00009275
     658:	000004e5 	.word	0x000004e5

0000065c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     65c:	b510      	push	{r4, lr}
     65e:	b082      	sub	sp, #8
     660:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     662:	4b0e      	ldr	r3, [pc, #56]	; (69c <sercom_set_gclk_generator+0x40>)
     664:	781b      	ldrb	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	d007      	beq.n	67a <sercom_set_gclk_generator+0x1e>
     66a:	2900      	cmp	r1, #0
     66c:	d105      	bne.n	67a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     66e:	4b0b      	ldr	r3, [pc, #44]	; (69c <sercom_set_gclk_generator+0x40>)
     670:	785b      	ldrb	r3, [r3, #1]
     672:	4283      	cmp	r3, r0
     674:	d010      	beq.n	698 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     676:	201d      	movs	r0, #29
     678:	e00c      	b.n	694 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     67a:	a901      	add	r1, sp, #4
     67c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     67e:	2013      	movs	r0, #19
     680:	4b07      	ldr	r3, [pc, #28]	; (6a0 <sercom_set_gclk_generator+0x44>)
     682:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     684:	2013      	movs	r0, #19
     686:	4b07      	ldr	r3, [pc, #28]	; (6a4 <sercom_set_gclk_generator+0x48>)
     688:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <sercom_set_gclk_generator+0x40>)
     68c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     68e:	2201      	movs	r2, #1
     690:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     692:	2000      	movs	r0, #0
}
     694:	b002      	add	sp, #8
     696:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     698:	2000      	movs	r0, #0
     69a:	e7fb      	b.n	694 <sercom_set_gclk_generator+0x38>
     69c:	20000124 	.word	0x20000124
     6a0:	00001af9 	.word	0x00001af9
     6a4:	00001a6d 	.word	0x00001a6d

000006a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     6a8:	4b40      	ldr	r3, [pc, #256]	; (7ac <_sercom_get_default_pad+0x104>)
     6aa:	4298      	cmp	r0, r3
     6ac:	d031      	beq.n	712 <_sercom_get_default_pad+0x6a>
     6ae:	d90a      	bls.n	6c6 <_sercom_get_default_pad+0x1e>
     6b0:	4b3f      	ldr	r3, [pc, #252]	; (7b0 <_sercom_get_default_pad+0x108>)
     6b2:	4298      	cmp	r0, r3
     6b4:	d04d      	beq.n	752 <_sercom_get_default_pad+0xaa>
     6b6:	4b3f      	ldr	r3, [pc, #252]	; (7b4 <_sercom_get_default_pad+0x10c>)
     6b8:	4298      	cmp	r0, r3
     6ba:	d05a      	beq.n	772 <_sercom_get_default_pad+0xca>
     6bc:	4b3e      	ldr	r3, [pc, #248]	; (7b8 <_sercom_get_default_pad+0x110>)
     6be:	4298      	cmp	r0, r3
     6c0:	d037      	beq.n	732 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     6c2:	2000      	movs	r0, #0
}
     6c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     6c6:	4b3d      	ldr	r3, [pc, #244]	; (7bc <_sercom_get_default_pad+0x114>)
     6c8:	4298      	cmp	r0, r3
     6ca:	d00c      	beq.n	6e6 <_sercom_get_default_pad+0x3e>
     6cc:	4b3c      	ldr	r3, [pc, #240]	; (7c0 <_sercom_get_default_pad+0x118>)
     6ce:	4298      	cmp	r0, r3
     6d0:	d1f7      	bne.n	6c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d2:	2901      	cmp	r1, #1
     6d4:	d017      	beq.n	706 <_sercom_get_default_pad+0x5e>
     6d6:	2900      	cmp	r1, #0
     6d8:	d05d      	beq.n	796 <_sercom_get_default_pad+0xee>
     6da:	2902      	cmp	r1, #2
     6dc:	d015      	beq.n	70a <_sercom_get_default_pad+0x62>
     6de:	2903      	cmp	r1, #3
     6e0:	d015      	beq.n	70e <_sercom_get_default_pad+0x66>
	return 0;
     6e2:	2000      	movs	r0, #0
     6e4:	e7ee      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6e6:	2901      	cmp	r1, #1
     6e8:	d007      	beq.n	6fa <_sercom_get_default_pad+0x52>
     6ea:	2900      	cmp	r1, #0
     6ec:	d051      	beq.n	792 <_sercom_get_default_pad+0xea>
     6ee:	2902      	cmp	r1, #2
     6f0:	d005      	beq.n	6fe <_sercom_get_default_pad+0x56>
     6f2:	2903      	cmp	r1, #3
     6f4:	d005      	beq.n	702 <_sercom_get_default_pad+0x5a>
	return 0;
     6f6:	2000      	movs	r0, #0
     6f8:	e7e4      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6fa:	4832      	ldr	r0, [pc, #200]	; (7c4 <_sercom_get_default_pad+0x11c>)
     6fc:	e7e2      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     6fe:	4832      	ldr	r0, [pc, #200]	; (7c8 <_sercom_get_default_pad+0x120>)
     700:	e7e0      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     702:	4832      	ldr	r0, [pc, #200]	; (7cc <_sercom_get_default_pad+0x124>)
     704:	e7de      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     706:	4832      	ldr	r0, [pc, #200]	; (7d0 <_sercom_get_default_pad+0x128>)
     708:	e7dc      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     70a:	4832      	ldr	r0, [pc, #200]	; (7d4 <_sercom_get_default_pad+0x12c>)
     70c:	e7da      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     70e:	4832      	ldr	r0, [pc, #200]	; (7d8 <_sercom_get_default_pad+0x130>)
     710:	e7d8      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     712:	2901      	cmp	r1, #1
     714:	d007      	beq.n	726 <_sercom_get_default_pad+0x7e>
     716:	2900      	cmp	r1, #0
     718:	d03f      	beq.n	79a <_sercom_get_default_pad+0xf2>
     71a:	2902      	cmp	r1, #2
     71c:	d005      	beq.n	72a <_sercom_get_default_pad+0x82>
     71e:	2903      	cmp	r1, #3
     720:	d005      	beq.n	72e <_sercom_get_default_pad+0x86>
	return 0;
     722:	2000      	movs	r0, #0
     724:	e7ce      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     726:	482d      	ldr	r0, [pc, #180]	; (7dc <_sercom_get_default_pad+0x134>)
     728:	e7cc      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     72a:	482d      	ldr	r0, [pc, #180]	; (7e0 <_sercom_get_default_pad+0x138>)
     72c:	e7ca      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     72e:	482d      	ldr	r0, [pc, #180]	; (7e4 <_sercom_get_default_pad+0x13c>)
     730:	e7c8      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     732:	2901      	cmp	r1, #1
     734:	d007      	beq.n	746 <_sercom_get_default_pad+0x9e>
     736:	2900      	cmp	r1, #0
     738:	d031      	beq.n	79e <_sercom_get_default_pad+0xf6>
     73a:	2902      	cmp	r1, #2
     73c:	d005      	beq.n	74a <_sercom_get_default_pad+0xa2>
     73e:	2903      	cmp	r1, #3
     740:	d005      	beq.n	74e <_sercom_get_default_pad+0xa6>
	return 0;
     742:	2000      	movs	r0, #0
     744:	e7be      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     746:	4828      	ldr	r0, [pc, #160]	; (7e8 <_sercom_get_default_pad+0x140>)
     748:	e7bc      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     74a:	4828      	ldr	r0, [pc, #160]	; (7ec <_sercom_get_default_pad+0x144>)
     74c:	e7ba      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     74e:	4828      	ldr	r0, [pc, #160]	; (7f0 <_sercom_get_default_pad+0x148>)
     750:	e7b8      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     752:	2901      	cmp	r1, #1
     754:	d007      	beq.n	766 <_sercom_get_default_pad+0xbe>
     756:	2900      	cmp	r1, #0
     758:	d023      	beq.n	7a2 <_sercom_get_default_pad+0xfa>
     75a:	2902      	cmp	r1, #2
     75c:	d005      	beq.n	76a <_sercom_get_default_pad+0xc2>
     75e:	2903      	cmp	r1, #3
     760:	d005      	beq.n	76e <_sercom_get_default_pad+0xc6>
	return 0;
     762:	2000      	movs	r0, #0
     764:	e7ae      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     766:	4823      	ldr	r0, [pc, #140]	; (7f4 <_sercom_get_default_pad+0x14c>)
     768:	e7ac      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     76a:	4823      	ldr	r0, [pc, #140]	; (7f8 <_sercom_get_default_pad+0x150>)
     76c:	e7aa      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     76e:	4823      	ldr	r0, [pc, #140]	; (7fc <_sercom_get_default_pad+0x154>)
     770:	e7a8      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     772:	2901      	cmp	r1, #1
     774:	d007      	beq.n	786 <_sercom_get_default_pad+0xde>
     776:	2900      	cmp	r1, #0
     778:	d015      	beq.n	7a6 <_sercom_get_default_pad+0xfe>
     77a:	2902      	cmp	r1, #2
     77c:	d005      	beq.n	78a <_sercom_get_default_pad+0xe2>
     77e:	2903      	cmp	r1, #3
     780:	d005      	beq.n	78e <_sercom_get_default_pad+0xe6>
	return 0;
     782:	2000      	movs	r0, #0
     784:	e79e      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     786:	481e      	ldr	r0, [pc, #120]	; (800 <_sercom_get_default_pad+0x158>)
     788:	e79c      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     78a:	481e      	ldr	r0, [pc, #120]	; (804 <_sercom_get_default_pad+0x15c>)
     78c:	e79a      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     78e:	481e      	ldr	r0, [pc, #120]	; (808 <_sercom_get_default_pad+0x160>)
     790:	e798      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     792:	481e      	ldr	r0, [pc, #120]	; (80c <_sercom_get_default_pad+0x164>)
     794:	e796      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     796:	2003      	movs	r0, #3
     798:	e794      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     79a:	481d      	ldr	r0, [pc, #116]	; (810 <_sercom_get_default_pad+0x168>)
     79c:	e792      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     79e:	481d      	ldr	r0, [pc, #116]	; (814 <_sercom_get_default_pad+0x16c>)
     7a0:	e790      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     7a2:	481d      	ldr	r0, [pc, #116]	; (818 <_sercom_get_default_pad+0x170>)
     7a4:	e78e      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     7a6:	481d      	ldr	r0, [pc, #116]	; (81c <_sercom_get_default_pad+0x174>)
     7a8:	e78c      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	42001000 	.word	0x42001000
     7b0:	42001800 	.word	0x42001800
     7b4:	42001c00 	.word	0x42001c00
     7b8:	42001400 	.word	0x42001400
     7bc:	42000800 	.word	0x42000800
     7c0:	42000c00 	.word	0x42000c00
     7c4:	00050003 	.word	0x00050003
     7c8:	00060003 	.word	0x00060003
     7cc:	00070003 	.word	0x00070003
     7d0:	00010003 	.word	0x00010003
     7d4:	001e0003 	.word	0x001e0003
     7d8:	001f0003 	.word	0x001f0003
     7dc:	000d0002 	.word	0x000d0002
     7e0:	000e0002 	.word	0x000e0002
     7e4:	000f0002 	.word	0x000f0002
     7e8:	00110003 	.word	0x00110003
     7ec:	00120003 	.word	0x00120003
     7f0:	00130003 	.word	0x00130003
     7f4:	003f0005 	.word	0x003f0005
     7f8:	003e0005 	.word	0x003e0005
     7fc:	00520005 	.word	0x00520005
     800:	00170003 	.word	0x00170003
     804:	00180003 	.word	0x00180003
     808:	00190003 	.word	0x00190003
     80c:	00040003 	.word	0x00040003
     810:	000c0002 	.word	0x000c0002
     814:	00100003 	.word	0x00100003
     818:	00530005 	.word	0x00530005
     81c:	00160003 	.word	0x00160003

00000820 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     820:	b530      	push	{r4, r5, lr}
     822:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     824:	4b0b      	ldr	r3, [pc, #44]	; (854 <_sercom_get_sercom_inst_index+0x34>)
     826:	466a      	mov	r2, sp
     828:	cb32      	ldmia	r3!, {r1, r4, r5}
     82a:	c232      	stmia	r2!, {r1, r4, r5}
     82c:	cb32      	ldmia	r3!, {r1, r4, r5}
     82e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     830:	9b00      	ldr	r3, [sp, #0]
     832:	4283      	cmp	r3, r0
     834:	d00b      	beq.n	84e <_sercom_get_sercom_inst_index+0x2e>
     836:	2301      	movs	r3, #1
     838:	009a      	lsls	r2, r3, #2
     83a:	4669      	mov	r1, sp
     83c:	5852      	ldr	r2, [r2, r1]
     83e:	4282      	cmp	r2, r0
     840:	d006      	beq.n	850 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     842:	3301      	adds	r3, #1
     844:	2b06      	cmp	r3, #6
     846:	d1f7      	bne.n	838 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     848:	2000      	movs	r0, #0
}
     84a:	b007      	add	sp, #28
     84c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     84e:	2300      	movs	r3, #0
			return i;
     850:	b2d8      	uxtb	r0, r3
     852:	e7fa      	b.n	84a <_sercom_get_sercom_inst_index+0x2a>
     854:	0000a73c 	.word	0x0000a73c

00000858 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     858:	4770      	bx	lr
	...

0000085c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     85c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     85e:	4b0a      	ldr	r3, [pc, #40]	; (888 <_sercom_set_handler+0x2c>)
     860:	781b      	ldrb	r3, [r3, #0]
     862:	2b00      	cmp	r3, #0
     864:	d10c      	bne.n	880 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     866:	4f09      	ldr	r7, [pc, #36]	; (88c <_sercom_set_handler+0x30>)
     868:	4e09      	ldr	r6, [pc, #36]	; (890 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     86a:	4d0a      	ldr	r5, [pc, #40]	; (894 <_sercom_set_handler+0x38>)
     86c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     86e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     870:	195a      	adds	r2, r3, r5
     872:	6014      	str	r4, [r2, #0]
     874:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     876:	2b18      	cmp	r3, #24
     878:	d1f9      	bne.n	86e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     87a:	2201      	movs	r2, #1
     87c:	4b02      	ldr	r3, [pc, #8]	; (888 <_sercom_set_handler+0x2c>)
     87e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     880:	0080      	lsls	r0, r0, #2
     882:	4b02      	ldr	r3, [pc, #8]	; (88c <_sercom_set_handler+0x30>)
     884:	50c1      	str	r1, [r0, r3]
}
     886:	bdf0      	pop	{r4, r5, r6, r7, pc}
     888:	20000126 	.word	0x20000126
     88c:	20000128 	.word	0x20000128
     890:	00000859 	.word	0x00000859
     894:	20000440 	.word	0x20000440

00000898 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     898:	b500      	push	{lr}
     89a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     89c:	2309      	movs	r3, #9
     89e:	466a      	mov	r2, sp
     8a0:	7013      	strb	r3, [r2, #0]
     8a2:	3301      	adds	r3, #1
     8a4:	7053      	strb	r3, [r2, #1]
     8a6:	3301      	adds	r3, #1
     8a8:	7093      	strb	r3, [r2, #2]
     8aa:	3301      	adds	r3, #1
     8ac:	70d3      	strb	r3, [r2, #3]
     8ae:	3301      	adds	r3, #1
     8b0:	7113      	strb	r3, [r2, #4]
     8b2:	3301      	adds	r3, #1
     8b4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     8b6:	4b03      	ldr	r3, [pc, #12]	; (8c4 <_sercom_get_interrupt_vector+0x2c>)
     8b8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     8ba:	466b      	mov	r3, sp
     8bc:	5618      	ldrsb	r0, [r3, r0]
}
     8be:	b003      	add	sp, #12
     8c0:	bd00      	pop	{pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	00000821 	.word	0x00000821

000008c8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     8c8:	b510      	push	{r4, lr}
     8ca:	4b02      	ldr	r3, [pc, #8]	; (8d4 <SERCOM0_Handler+0xc>)
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	2000      	movs	r0, #0
     8d0:	4798      	blx	r3
     8d2:	bd10      	pop	{r4, pc}
     8d4:	20000128 	.word	0x20000128

000008d8 <SERCOM1_Handler>:
     8d8:	b510      	push	{r4, lr}
     8da:	4b02      	ldr	r3, [pc, #8]	; (8e4 <SERCOM1_Handler+0xc>)
     8dc:	685b      	ldr	r3, [r3, #4]
     8de:	2001      	movs	r0, #1
     8e0:	4798      	blx	r3
     8e2:	bd10      	pop	{r4, pc}
     8e4:	20000128 	.word	0x20000128

000008e8 <SERCOM2_Handler>:
     8e8:	b510      	push	{r4, lr}
     8ea:	4b02      	ldr	r3, [pc, #8]	; (8f4 <SERCOM2_Handler+0xc>)
     8ec:	689b      	ldr	r3, [r3, #8]
     8ee:	2002      	movs	r0, #2
     8f0:	4798      	blx	r3
     8f2:	bd10      	pop	{r4, pc}
     8f4:	20000128 	.word	0x20000128

000008f8 <SERCOM3_Handler>:
     8f8:	b510      	push	{r4, lr}
     8fa:	4b02      	ldr	r3, [pc, #8]	; (904 <SERCOM3_Handler+0xc>)
     8fc:	68db      	ldr	r3, [r3, #12]
     8fe:	2003      	movs	r0, #3
     900:	4798      	blx	r3
     902:	bd10      	pop	{r4, pc}
     904:	20000128 	.word	0x20000128

00000908 <SERCOM4_Handler>:
     908:	b510      	push	{r4, lr}
     90a:	4b02      	ldr	r3, [pc, #8]	; (914 <SERCOM4_Handler+0xc>)
     90c:	691b      	ldr	r3, [r3, #16]
     90e:	2004      	movs	r0, #4
     910:	4798      	blx	r3
     912:	bd10      	pop	{r4, pc}
     914:	20000128 	.word	0x20000128

00000918 <SERCOM5_Handler>:
     918:	b510      	push	{r4, lr}
     91a:	4b02      	ldr	r3, [pc, #8]	; (924 <SERCOM5_Handler+0xc>)
     91c:	695b      	ldr	r3, [r3, #20]
     91e:	2005      	movs	r0, #5
     920:	4798      	blx	r3
     922:	bd10      	pop	{r4, pc}
     924:	20000128 	.word	0x20000128

00000928 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     928:	b5f0      	push	{r4, r5, r6, r7, lr}
     92a:	46d6      	mov	lr, sl
     92c:	464f      	mov	r7, r9
     92e:	b580      	push	{r7, lr}
     930:	b08b      	sub	sp, #44	; 0x2c
     932:	4681      	mov	r9, r0
     934:	000f      	movs	r7, r1
     936:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     938:	0003      	movs	r3, r0
     93a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     93c:	680b      	ldr	r3, [r1, #0]
     93e:	079b      	lsls	r3, r3, #30
     940:	d409      	bmi.n	956 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     942:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     944:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     946:	07db      	lsls	r3, r3, #31
     948:	d400      	bmi.n	94c <spi_init+0x24>
     94a:	e098      	b.n	a7e <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     94c:	b00b      	add	sp, #44	; 0x2c
     94e:	bc0c      	pop	{r2, r3}
     950:	4691      	mov	r9, r2
     952:	469a      	mov	sl, r3
     954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     956:	6a93      	ldr	r3, [r2, #40]	; 0x28
     958:	9305      	str	r3, [sp, #20]
     95a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     95c:	9306      	str	r3, [sp, #24]
     95e:	6b13      	ldr	r3, [r2, #48]	; 0x30
     960:	9307      	str	r3, [sp, #28]
     962:	6b53      	ldr	r3, [r2, #52]	; 0x34
     964:	9308      	str	r3, [sp, #32]
     966:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     968:	ab05      	add	r3, sp, #20
     96a:	9301      	str	r3, [sp, #4]
     96c:	e00a      	b.n	984 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     96e:	0038      	movs	r0, r7
     970:	4b93      	ldr	r3, [pc, #588]	; (bc0 <spi_init+0x298>)
     972:	4798      	blx	r3
     974:	e00c      	b.n	990 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     976:	230f      	movs	r3, #15
     978:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     97a:	4281      	cmp	r1, r0
     97c:	d12d      	bne.n	9da <spi_init+0xb2>
     97e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     980:	2e04      	cmp	r6, #4
     982:	d02f      	beq.n	9e4 <spi_init+0xbc>
     984:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     986:	00b3      	lsls	r3, r6, #2
     988:	9a01      	ldr	r2, [sp, #4]
     98a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     98c:	2800      	cmp	r0, #0
     98e:	d0ee      	beq.n	96e <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     990:	1c43      	adds	r3, r0, #1
     992:	d0f4      	beq.n	97e <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     994:	0401      	lsls	r1, r0, #16
     996:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     998:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     99a:	b2c3      	uxtb	r3, r0
     99c:	469c      	mov	ip, r3
		return NULL;
     99e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9a0:	0602      	lsls	r2, r0, #24
     9a2:	d405      	bmi.n	9b0 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     9a4:	4663      	mov	r3, ip
     9a6:	095b      	lsrs	r3, r3, #5
     9a8:	01db      	lsls	r3, r3, #7
     9aa:	4a86      	ldr	r2, [pc, #536]	; (bc4 <spi_init+0x29c>)
     9ac:	4692      	mov	sl, r2
     9ae:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     9b0:	221f      	movs	r2, #31
     9b2:	4660      	mov	r0, ip
     9b4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9b6:	1898      	adds	r0, r3, r2
     9b8:	3040      	adds	r0, #64	; 0x40
     9ba:	7800      	ldrb	r0, [r0, #0]
     9bc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     9be:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9c0:	4655      	mov	r5, sl
     9c2:	07ed      	lsls	r5, r5, #31
     9c4:	d5d9      	bpl.n	97a <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     9c6:	0852      	lsrs	r2, r2, #1
     9c8:	189b      	adds	r3, r3, r2
     9ca:	3330      	adds	r3, #48	; 0x30
     9cc:	7818      	ldrb	r0, [r3, #0]
     9ce:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     9d0:	4663      	mov	r3, ip
     9d2:	07db      	lsls	r3, r3, #31
     9d4:	d5cf      	bpl.n	976 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     9d6:	0900      	lsrs	r0, r0, #4
     9d8:	e7cf      	b.n	97a <spi_init+0x52>
			module->hw = NULL;
     9da:	2300      	movs	r3, #0
     9dc:	464a      	mov	r2, r9
     9de:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     9e0:	201c      	movs	r0, #28
     9e2:	e7b3      	b.n	94c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     9e4:	2013      	movs	r0, #19
     9e6:	4b78      	ldr	r3, [pc, #480]	; (bc8 <spi_init+0x2a0>)
     9e8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     9ea:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     9ec:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     9ee:	2a01      	cmp	r2, #1
     9f0:	d027      	beq.n	a42 <spi_init+0x11a>
	ctrla |= config->mux_setting;
     9f2:	6863      	ldr	r3, [r4, #4]
     9f4:	68a2      	ldr	r2, [r4, #8]
     9f6:	4313      	orrs	r3, r2
     9f8:	68e2      	ldr	r2, [r4, #12]
     9fa:	4313      	orrs	r3, r2
     9fc:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     9fe:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
     a00:	7c61      	ldrb	r1, [r4, #17]
     a02:	2900      	cmp	r1, #0
     a04:	d001      	beq.n	a0a <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     a06:	2180      	movs	r1, #128	; 0x80
     a08:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     a0a:	7ca1      	ldrb	r1, [r4, #18]
     a0c:	2900      	cmp	r1, #0
     a0e:	d002      	beq.n	a16 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a10:	2180      	movs	r1, #128	; 0x80
     a12:	0289      	lsls	r1, r1, #10
     a14:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     a16:	7ce1      	ldrb	r1, [r4, #19]
     a18:	2900      	cmp	r1, #0
     a1a:	d002      	beq.n	a22 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     a1c:	2180      	movs	r1, #128	; 0x80
     a1e:	0089      	lsls	r1, r1, #2
     a20:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     a22:	7d21      	ldrb	r1, [r4, #20]
     a24:	2900      	cmp	r1, #0
     a26:	d002      	beq.n	a2e <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     a28:	2180      	movs	r1, #128	; 0x80
     a2a:	0189      	lsls	r1, r1, #6
     a2c:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
     a2e:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     a30:	2002      	movs	r0, #2
     a32:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
     a34:	428b      	cmp	r3, r1
     a36:	d018      	beq.n	a6a <spi_init+0x142>
	module->hw = NULL;
     a38:	2300      	movs	r3, #0
     a3a:	464a      	mov	r2, r9
     a3c:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     a3e:	201c      	movs	r0, #28
     a40:	e784      	b.n	94c <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
     a42:	aa04      	add	r2, sp, #16
     a44:	0001      	movs	r1, r0
     a46:	69a0      	ldr	r0, [r4, #24]
     a48:	4b60      	ldr	r3, [pc, #384]	; (bcc <spi_init+0x2a4>)
     a4a:	4798      	blx	r3
     a4c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     a4e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     a50:	2b00      	cmp	r3, #0
     a52:	d000      	beq.n	a56 <spi_init+0x12e>
     a54:	e77a      	b.n	94c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a56:	7b3b      	ldrb	r3, [r7, #12]
     a58:	b2db      	uxtb	r3, r3
     a5a:	aa04      	add	r2, sp, #16
     a5c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     a5e:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a60:	429a      	cmp	r2, r3
     a62:	d000      	beq.n	a66 <spi_init+0x13e>
     a64:	e772      	b.n	94c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     a66:	350c      	adds	r5, #12
     a68:	e7c3      	b.n	9f2 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
     a6a:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     a6c:	4293      	cmp	r3, r2
     a6e:	d1e3      	bne.n	a38 <spi_init+0x110>
		module->mode           = config->mode;
     a70:	7823      	ldrb	r3, [r4, #0]
     a72:	464a      	mov	r2, r9
     a74:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
     a76:	7c23      	ldrb	r3, [r4, #16]
     a78:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     a7a:	2000      	movs	r0, #0
     a7c:	e766      	b.n	94c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a7e:	0008      	movs	r0, r1
     a80:	4b53      	ldr	r3, [pc, #332]	; (bd0 <spi_init+0x2a8>)
     a82:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a84:	4a53      	ldr	r2, [pc, #332]	; (bd4 <spi_init+0x2ac>)
     a86:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a88:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a8a:	2301      	movs	r3, #1
     a8c:	40ab      	lsls	r3, r5
     a8e:	430b      	orrs	r3, r1
     a90:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     a92:	a909      	add	r1, sp, #36	; 0x24
     a94:	2624      	movs	r6, #36	; 0x24
     a96:	5da3      	ldrb	r3, [r4, r6]
     a98:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a9a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a9c:	b2c5      	uxtb	r5, r0
     a9e:	0028      	movs	r0, r5
     aa0:	4b4d      	ldr	r3, [pc, #308]	; (bd8 <spi_init+0x2b0>)
     aa2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     aa4:	0028      	movs	r0, r5
     aa6:	4b4d      	ldr	r3, [pc, #308]	; (bdc <spi_init+0x2b4>)
     aa8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     aaa:	5da0      	ldrb	r0, [r4, r6]
     aac:	2100      	movs	r1, #0
     aae:	4b4c      	ldr	r3, [pc, #304]	; (be0 <spi_init+0x2b8>)
     ab0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     ab2:	7823      	ldrb	r3, [r4, #0]
     ab4:	2b01      	cmp	r3, #1
     ab6:	d019      	beq.n	aec <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ab8:	464b      	mov	r3, r9
     aba:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     abc:	ab04      	add	r3, sp, #16
     abe:	2280      	movs	r2, #128	; 0x80
     ac0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ac2:	2200      	movs	r2, #0
     ac4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ac6:	2101      	movs	r1, #1
     ac8:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     aca:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     acc:	7823      	ldrb	r3, [r4, #0]
     ace:	2b00      	cmp	r3, #0
     ad0:	d101      	bne.n	ad6 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ad2:	ab04      	add	r3, sp, #16
     ad4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ad8:	9305      	str	r3, [sp, #20]
     ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     adc:	9306      	str	r3, [sp, #24]
     ade:	6b23      	ldr	r3, [r4, #48]	; 0x30
     ae0:	9307      	str	r3, [sp, #28]
     ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ae4:	9308      	str	r3, [sp, #32]
     ae6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ae8:	ad05      	add	r5, sp, #20
     aea:	e011      	b.n	b10 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     aec:	683b      	ldr	r3, [r7, #0]
     aee:	220c      	movs	r2, #12
     af0:	4313      	orrs	r3, r2
     af2:	603b      	str	r3, [r7, #0]
     af4:	e7e0      	b.n	ab8 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     af6:	0030      	movs	r0, r6
     af8:	4b31      	ldr	r3, [pc, #196]	; (bc0 <spi_init+0x298>)
     afa:	4798      	blx	r3
     afc:	e00d      	b.n	b1a <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     afe:	a904      	add	r1, sp, #16
     b00:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b02:	0c00      	lsrs	r0, r0, #16
     b04:	b2c0      	uxtb	r0, r0
     b06:	4b37      	ldr	r3, [pc, #220]	; (be4 <spi_init+0x2bc>)
     b08:	4798      	blx	r3
     b0a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     b0c:	2f04      	cmp	r7, #4
     b0e:	d007      	beq.n	b20 <spi_init+0x1f8>
     b10:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b12:	00bb      	lsls	r3, r7, #2
     b14:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     b16:	2800      	cmp	r0, #0
     b18:	d0ed      	beq.n	af6 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
     b1a:	1c43      	adds	r3, r0, #1
     b1c:	d1ef      	bne.n	afe <spi_init+0x1d6>
     b1e:	e7f4      	b.n	b0a <spi_init+0x1e2>
	module->mode             = config->mode;
     b20:	7823      	ldrb	r3, [r4, #0]
     b22:	464a      	mov	r2, r9
     b24:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     b26:	7c23      	ldrb	r3, [r4, #16]
     b28:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     b2a:	7ca3      	ldrb	r3, [r4, #18]
     b2c:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     b2e:	7d23      	ldrb	r3, [r4, #20]
     b30:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     b32:	2200      	movs	r2, #0
     b34:	ab02      	add	r3, sp, #8
     b36:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     b38:	7823      	ldrb	r3, [r4, #0]
     b3a:	2b01      	cmp	r3, #1
     b3c:	d028      	beq.n	b90 <spi_init+0x268>
	ctrla |= config->transfer_mode;
     b3e:	6863      	ldr	r3, [r4, #4]
     b40:	68a2      	ldr	r2, [r4, #8]
     b42:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
     b44:	68e2      	ldr	r2, [r4, #12]
     b46:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
     b48:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
     b4a:	7c62      	ldrb	r2, [r4, #17]
     b4c:	2a00      	cmp	r2, #0
     b4e:	d103      	bne.n	b58 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b50:	4a25      	ldr	r2, [pc, #148]	; (be8 <spi_init+0x2c0>)
     b52:	7892      	ldrb	r2, [r2, #2]
     b54:	0792      	lsls	r2, r2, #30
     b56:	d501      	bpl.n	b5c <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b58:	2280      	movs	r2, #128	; 0x80
     b5a:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
     b5c:	7ca2      	ldrb	r2, [r4, #18]
     b5e:	2a00      	cmp	r2, #0
     b60:	d002      	beq.n	b68 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b62:	2280      	movs	r2, #128	; 0x80
     b64:	0292      	lsls	r2, r2, #10
     b66:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
     b68:	7ce2      	ldrb	r2, [r4, #19]
     b6a:	2a00      	cmp	r2, #0
     b6c:	d002      	beq.n	b74 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b6e:	2280      	movs	r2, #128	; 0x80
     b70:	0092      	lsls	r2, r2, #2
     b72:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
     b74:	7d22      	ldrb	r2, [r4, #20]
     b76:	2a00      	cmp	r2, #0
     b78:	d002      	beq.n	b80 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b7a:	2280      	movs	r2, #128	; 0x80
     b7c:	0192      	lsls	r2, r2, #6
     b7e:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
     b80:	6832      	ldr	r2, [r6, #0]
     b82:	4313      	orrs	r3, r2
     b84:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     b86:	6873      	ldr	r3, [r6, #4]
     b88:	430b      	orrs	r3, r1
     b8a:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
     b8c:	2000      	movs	r0, #0
     b8e:	e6dd      	b.n	94c <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b90:	464b      	mov	r3, r9
     b92:	6818      	ldr	r0, [r3, #0]
     b94:	4b0e      	ldr	r3, [pc, #56]	; (bd0 <spi_init+0x2a8>)
     b96:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b98:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b9a:	b2c0      	uxtb	r0, r0
     b9c:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <spi_init+0x2a0>)
     b9e:	4798      	blx	r3
     ba0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     ba2:	ab02      	add	r3, sp, #8
     ba4:	1d9a      	adds	r2, r3, #6
     ba6:	69a0      	ldr	r0, [r4, #24]
     ba8:	4b08      	ldr	r3, [pc, #32]	; (bcc <spi_init+0x2a4>)
     baa:	4798      	blx	r3
     bac:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     bae:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     bb0:	2b00      	cmp	r3, #0
     bb2:	d000      	beq.n	bb6 <spi_init+0x28e>
     bb4:	e6ca      	b.n	94c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     bb6:	ab02      	add	r3, sp, #8
     bb8:	3306      	adds	r3, #6
     bba:	781b      	ldrb	r3, [r3, #0]
     bbc:	7333      	strb	r3, [r6, #12]
     bbe:	e7be      	b.n	b3e <spi_init+0x216>
     bc0:	000006a9 	.word	0x000006a9
     bc4:	41004400 	.word	0x41004400
     bc8:	00001b15 	.word	0x00001b15
     bcc:	0000059f 	.word	0x0000059f
     bd0:	00000821 	.word	0x00000821
     bd4:	40000400 	.word	0x40000400
     bd8:	00001af9 	.word	0x00001af9
     bdc:	00001a6d 	.word	0x00001a6d
     be0:	0000065d 	.word	0x0000065d
     be4:	00001bf1 	.word	0x00001bf1
     be8:	41002000 	.word	0x41002000

00000bec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     bec:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     bee:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     bf0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     bf2:	2c01      	cmp	r4, #1
     bf4:	d001      	beq.n	bfa <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     bf6:	0018      	movs	r0, r3
     bf8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     bfa:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     bfc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     bfe:	2c00      	cmp	r4, #0
     c00:	d1f9      	bne.n	bf6 <spi_select_slave+0xa>
		if (select) {
     c02:	2a00      	cmp	r2, #0
     c04:	d058      	beq.n	cb8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     c06:	784b      	ldrb	r3, [r1, #1]
     c08:	2b00      	cmp	r3, #0
     c0a:	d044      	beq.n	c96 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c0c:	6803      	ldr	r3, [r0, #0]
     c0e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     c10:	07db      	lsls	r3, r3, #31
     c12:	d410      	bmi.n	c36 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     c14:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c16:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c18:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c1a:	2900      	cmp	r1, #0
     c1c:	d104      	bne.n	c28 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     c1e:	0953      	lsrs	r3, r2, #5
     c20:	01db      	lsls	r3, r3, #7
     c22:	492e      	ldr	r1, [pc, #184]	; (cdc <spi_select_slave+0xf0>)
     c24:	468c      	mov	ip, r1
     c26:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c28:	211f      	movs	r1, #31
     c2a:	4011      	ands	r1, r2
     c2c:	2201      	movs	r2, #1
     c2e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     c30:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     c32:	2305      	movs	r3, #5
     c34:	e7df      	b.n	bf6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     c36:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c38:	09d4      	lsrs	r4, r2, #7
		return NULL;
     c3a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c3c:	2c00      	cmp	r4, #0
     c3e:	d104      	bne.n	c4a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     c40:	0953      	lsrs	r3, r2, #5
     c42:	01db      	lsls	r3, r3, #7
     c44:	4c25      	ldr	r4, [pc, #148]	; (cdc <spi_select_slave+0xf0>)
     c46:	46a4      	mov	ip, r4
     c48:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c4a:	241f      	movs	r4, #31
     c4c:	4014      	ands	r4, r2
     c4e:	2201      	movs	r2, #1
     c50:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c52:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     c54:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     c58:	07d2      	lsls	r2, r2, #31
     c5a:	d501      	bpl.n	c60 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     c5c:	788a      	ldrb	r2, [r1, #2]
     c5e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     c60:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     c62:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     c64:	2a00      	cmp	r2, #0
     c66:	d1c6      	bne.n	bf6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     c68:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     c6a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     c6c:	7e13      	ldrb	r3, [r2, #24]
     c6e:	420b      	tst	r3, r1
     c70:	d0fc      	beq.n	c6c <spi_select_slave+0x80>
     c72:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     c74:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
     c76:	0749      	lsls	r1, r1, #29
     c78:	d5bd      	bpl.n	bf6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     c7a:	8b53      	ldrh	r3, [r2, #26]
     c7c:	075b      	lsls	r3, r3, #29
     c7e:	d501      	bpl.n	c84 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     c80:	2304      	movs	r3, #4
     c82:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c84:	7983      	ldrb	r3, [r0, #6]
     c86:	2b01      	cmp	r3, #1
     c88:	d002      	beq.n	c90 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     c8a:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c8c:	2300      	movs	r3, #0
     c8e:	e7b2      	b.n	bf6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     c90:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c92:	2300      	movs	r3, #0
     c94:	e7af      	b.n	bf6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     c96:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c98:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c9a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c9c:	2900      	cmp	r1, #0
     c9e:	d104      	bne.n	caa <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     ca0:	0953      	lsrs	r3, r2, #5
     ca2:	01db      	lsls	r3, r3, #7
     ca4:	490d      	ldr	r1, [pc, #52]	; (cdc <spi_select_slave+0xf0>)
     ca6:	468c      	mov	ip, r1
     ca8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     caa:	211f      	movs	r1, #31
     cac:	4011      	ands	r1, r2
     cae:	2201      	movs	r2, #1
     cb0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     cb2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     cb4:	2300      	movs	r3, #0
     cb6:	e79e      	b.n	bf6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     cb8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     cba:	09d1      	lsrs	r1, r2, #7
		return NULL;
     cbc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     cbe:	2900      	cmp	r1, #0
     cc0:	d104      	bne.n	ccc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     cc2:	0953      	lsrs	r3, r2, #5
     cc4:	01db      	lsls	r3, r3, #7
     cc6:	4905      	ldr	r1, [pc, #20]	; (cdc <spi_select_slave+0xf0>)
     cc8:	468c      	mov	ip, r1
     cca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ccc:	211f      	movs	r1, #31
     cce:	4011      	ands	r1, r2
     cd0:	2201      	movs	r2, #1
     cd2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     cd4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     cd6:	2300      	movs	r3, #0
     cd8:	e78d      	b.n	bf6 <spi_select_slave+0xa>
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	41004400 	.word	0x41004400

00000ce0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ce2:	46de      	mov	lr, fp
     ce4:	4657      	mov	r7, sl
     ce6:	464e      	mov	r6, r9
     ce8:	4645      	mov	r5, r8
     cea:	b5e0      	push	{r5, r6, r7, lr}
     cec:	b091      	sub	sp, #68	; 0x44
     cee:	0005      	movs	r5, r0
     cf0:	000c      	movs	r4, r1
     cf2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     cf4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cf6:	0008      	movs	r0, r1
     cf8:	4bbc      	ldr	r3, [pc, #752]	; (fec <usart_init+0x30c>)
     cfa:	4798      	blx	r3
     cfc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     cfe:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d00:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d02:	07db      	lsls	r3, r3, #31
     d04:	d506      	bpl.n	d14 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d06:	b011      	add	sp, #68	; 0x44
     d08:	bc3c      	pop	{r2, r3, r4, r5}
     d0a:	4690      	mov	r8, r2
     d0c:	4699      	mov	r9, r3
     d0e:	46a2      	mov	sl, r4
     d10:	46ab      	mov	fp, r5
     d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d14:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     d16:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d18:	079b      	lsls	r3, r3, #30
     d1a:	d4f4      	bmi.n	d06 <usart_init+0x26>
     d1c:	49b4      	ldr	r1, [pc, #720]	; (ff0 <usart_init+0x310>)
     d1e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d20:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d22:	2301      	movs	r3, #1
     d24:	40bb      	lsls	r3, r7
     d26:	4303      	orrs	r3, r0
     d28:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d2a:	a90f      	add	r1, sp, #60	; 0x3c
     d2c:	272d      	movs	r7, #45	; 0x2d
     d2e:	5df3      	ldrb	r3, [r6, r7]
     d30:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d32:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d34:	b2d3      	uxtb	r3, r2
     d36:	9302      	str	r3, [sp, #8]
     d38:	0018      	movs	r0, r3
     d3a:	4bae      	ldr	r3, [pc, #696]	; (ff4 <usart_init+0x314>)
     d3c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d3e:	9802      	ldr	r0, [sp, #8]
     d40:	4bad      	ldr	r3, [pc, #692]	; (ff8 <usart_init+0x318>)
     d42:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d44:	5df0      	ldrb	r0, [r6, r7]
     d46:	2100      	movs	r1, #0
     d48:	4bac      	ldr	r3, [pc, #688]	; (ffc <usart_init+0x31c>)
     d4a:	4798      	blx	r3
	module->character_size = config->character_size;
     d4c:	7af3      	ldrb	r3, [r6, #11]
     d4e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     d50:	2324      	movs	r3, #36	; 0x24
     d52:	5cf3      	ldrb	r3, [r6, r3]
     d54:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d56:	2325      	movs	r3, #37	; 0x25
     d58:	5cf3      	ldrb	r3, [r6, r3]
     d5a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     d5c:	7ef3      	ldrb	r3, [r6, #27]
     d5e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     d60:	7f33      	ldrb	r3, [r6, #28]
     d62:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d64:	682b      	ldr	r3, [r5, #0]
     d66:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d68:	0018      	movs	r0, r3
     d6a:	4ba0      	ldr	r3, [pc, #640]	; (fec <usart_init+0x30c>)
     d6c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d6e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     d70:	2200      	movs	r2, #0
     d72:	230e      	movs	r3, #14
     d74:	a906      	add	r1, sp, #24
     d76:	468c      	mov	ip, r1
     d78:	4463      	add	r3, ip
     d7a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     d7c:	8a32      	ldrh	r2, [r6, #16]
     d7e:	9202      	str	r2, [sp, #8]
     d80:	2380      	movs	r3, #128	; 0x80
     d82:	01db      	lsls	r3, r3, #7
     d84:	429a      	cmp	r2, r3
     d86:	d100      	bne.n	d8a <usart_init+0xaa>
     d88:	e09e      	b.n	ec8 <usart_init+0x1e8>
     d8a:	d90f      	bls.n	dac <usart_init+0xcc>
     d8c:	23c0      	movs	r3, #192	; 0xc0
     d8e:	01db      	lsls	r3, r3, #7
     d90:	9a02      	ldr	r2, [sp, #8]
     d92:	429a      	cmp	r2, r3
     d94:	d100      	bne.n	d98 <usart_init+0xb8>
     d96:	e092      	b.n	ebe <usart_init+0x1de>
     d98:	2380      	movs	r3, #128	; 0x80
     d9a:	021b      	lsls	r3, r3, #8
     d9c:	429a      	cmp	r2, r3
     d9e:	d000      	beq.n	da2 <usart_init+0xc2>
     da0:	e11f      	b.n	fe2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     da2:	2303      	movs	r3, #3
     da4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     da6:	2300      	movs	r3, #0
     da8:	9307      	str	r3, [sp, #28]
     daa:	e008      	b.n	dbe <usart_init+0xde>
	switch (config->sample_rate) {
     dac:	2380      	movs	r3, #128	; 0x80
     dae:	019b      	lsls	r3, r3, #6
     db0:	429a      	cmp	r2, r3
     db2:	d000      	beq.n	db6 <usart_init+0xd6>
     db4:	e115      	b.n	fe2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     db6:	2310      	movs	r3, #16
     db8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     dba:	3b0f      	subs	r3, #15
     dbc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     dbe:	6833      	ldr	r3, [r6, #0]
     dc0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     dc2:	68f3      	ldr	r3, [r6, #12]
     dc4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     dc6:	6973      	ldr	r3, [r6, #20]
     dc8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     dca:	7e33      	ldrb	r3, [r6, #24]
     dcc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     dce:	2326      	movs	r3, #38	; 0x26
     dd0:	5cf3      	ldrb	r3, [r6, r3]
     dd2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     dd4:	6873      	ldr	r3, [r6, #4]
     dd6:	4699      	mov	r9, r3
	switch (transfer_mode)
     dd8:	2b00      	cmp	r3, #0
     dda:	d100      	bne.n	dde <usart_init+0xfe>
     ddc:	e0a0      	b.n	f20 <usart_init+0x240>
     dde:	2380      	movs	r3, #128	; 0x80
     de0:	055b      	lsls	r3, r3, #21
     de2:	4599      	cmp	r9, r3
     de4:	d100      	bne.n	de8 <usart_init+0x108>
     de6:	e084      	b.n	ef2 <usart_init+0x212>
	if(config->encoding_format_enable) {
     de8:	7e73      	ldrb	r3, [r6, #25]
     dea:	2b00      	cmp	r3, #0
     dec:	d002      	beq.n	df4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     dee:	7eb3      	ldrb	r3, [r6, #26]
     df0:	4642      	mov	r2, r8
     df2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     df4:	682a      	ldr	r2, [r5, #0]
     df6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     df8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     dfa:	2b00      	cmp	r3, #0
     dfc:	d1fc      	bne.n	df8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     dfe:	330e      	adds	r3, #14
     e00:	aa06      	add	r2, sp, #24
     e02:	4694      	mov	ip, r2
     e04:	4463      	add	r3, ip
     e06:	881b      	ldrh	r3, [r3, #0]
     e08:	4642      	mov	r2, r8
     e0a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     e0c:	9b05      	ldr	r3, [sp, #20]
     e0e:	9a03      	ldr	r2, [sp, #12]
     e10:	4313      	orrs	r3, r2
     e12:	9a04      	ldr	r2, [sp, #16]
     e14:	4313      	orrs	r3, r2
     e16:	464a      	mov	r2, r9
     e18:	4313      	orrs	r3, r2
     e1a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e1c:	465b      	mov	r3, fp
     e1e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     e20:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e22:	4653      	mov	r3, sl
     e24:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     e26:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     e28:	2327      	movs	r3, #39	; 0x27
     e2a:	5cf3      	ldrb	r3, [r6, r3]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d101      	bne.n	e34 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     e30:	3304      	adds	r3, #4
     e32:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e34:	7e73      	ldrb	r3, [r6, #25]
     e36:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e38:	7f32      	ldrb	r2, [r6, #28]
     e3a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e3c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e3e:	7f72      	ldrb	r2, [r6, #29]
     e40:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e42:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e44:	2224      	movs	r2, #36	; 0x24
     e46:	5cb2      	ldrb	r2, [r6, r2]
     e48:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e4a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     e4c:	2225      	movs	r2, #37	; 0x25
     e4e:	5cb2      	ldrb	r2, [r6, r2]
     e50:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e52:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     e54:	7ab1      	ldrb	r1, [r6, #10]
     e56:	7af2      	ldrb	r2, [r6, #11]
     e58:	4311      	orrs	r1, r2
     e5a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     e5c:	8933      	ldrh	r3, [r6, #8]
     e5e:	2bff      	cmp	r3, #255	; 0xff
     e60:	d100      	bne.n	e64 <usart_init+0x184>
     e62:	e081      	b.n	f68 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     e64:	2280      	movs	r2, #128	; 0x80
     e66:	0452      	lsls	r2, r2, #17
     e68:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     e6a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     e6c:	232c      	movs	r3, #44	; 0x2c
     e6e:	5cf3      	ldrb	r3, [r6, r3]
     e70:	2b00      	cmp	r3, #0
     e72:	d103      	bne.n	e7c <usart_init+0x19c>
     e74:	4b62      	ldr	r3, [pc, #392]	; (1000 <usart_init+0x320>)
     e76:	789b      	ldrb	r3, [r3, #2]
     e78:	079b      	lsls	r3, r3, #30
     e7a:	d501      	bpl.n	e80 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     e7c:	2380      	movs	r3, #128	; 0x80
     e7e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     e80:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e82:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     e84:	2b00      	cmp	r3, #0
     e86:	d1fc      	bne.n	e82 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     e88:	4643      	mov	r3, r8
     e8a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e8c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e8e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     e90:	2b00      	cmp	r3, #0
     e92:	d1fc      	bne.n	e8e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     e94:	4643      	mov	r3, r8
     e96:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e98:	ab0e      	add	r3, sp, #56	; 0x38
     e9a:	2280      	movs	r2, #128	; 0x80
     e9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e9e:	2200      	movs	r2, #0
     ea0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     ea2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ea4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     ea6:	6b33      	ldr	r3, [r6, #48]	; 0x30
     ea8:	930a      	str	r3, [sp, #40]	; 0x28
     eaa:	6b73      	ldr	r3, [r6, #52]	; 0x34
     eac:	930b      	str	r3, [sp, #44]	; 0x2c
     eae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     eb0:	930c      	str	r3, [sp, #48]	; 0x30
     eb2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     eb4:	9302      	str	r3, [sp, #8]
     eb6:	930d      	str	r3, [sp, #52]	; 0x34
     eb8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eba:	ae0a      	add	r6, sp, #40	; 0x28
     ebc:	e063      	b.n	f86 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ebe:	2308      	movs	r3, #8
     ec0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ec2:	3b07      	subs	r3, #7
     ec4:	9307      	str	r3, [sp, #28]
     ec6:	e77a      	b.n	dbe <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     ec8:	6833      	ldr	r3, [r6, #0]
     eca:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ecc:	68f3      	ldr	r3, [r6, #12]
     ece:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     ed0:	6973      	ldr	r3, [r6, #20]
     ed2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ed4:	7e33      	ldrb	r3, [r6, #24]
     ed6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ed8:	2326      	movs	r3, #38	; 0x26
     eda:	5cf3      	ldrb	r3, [r6, r3]
     edc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     ede:	6873      	ldr	r3, [r6, #4]
     ee0:	4699      	mov	r9, r3
	switch (transfer_mode)
     ee2:	2b00      	cmp	r3, #0
     ee4:	d018      	beq.n	f18 <usart_init+0x238>
     ee6:	2380      	movs	r3, #128	; 0x80
     ee8:	055b      	lsls	r3, r3, #21
     eea:	4599      	cmp	r9, r3
     eec:	d001      	beq.n	ef2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     eee:	2000      	movs	r0, #0
     ef0:	e025      	b.n	f3e <usart_init+0x25e>
			if (!config->use_external_clock) {
     ef2:	2327      	movs	r3, #39	; 0x27
     ef4:	5cf3      	ldrb	r3, [r6, r3]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d000      	beq.n	efc <usart_init+0x21c>
     efa:	e775      	b.n	de8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     efc:	6a33      	ldr	r3, [r6, #32]
     efe:	001f      	movs	r7, r3
     f00:	b2c0      	uxtb	r0, r0
     f02:	4b40      	ldr	r3, [pc, #256]	; (1004 <usart_init+0x324>)
     f04:	4798      	blx	r3
     f06:	0001      	movs	r1, r0
     f08:	220e      	movs	r2, #14
     f0a:	ab06      	add	r3, sp, #24
     f0c:	469c      	mov	ip, r3
     f0e:	4462      	add	r2, ip
     f10:	0038      	movs	r0, r7
     f12:	4b3d      	ldr	r3, [pc, #244]	; (1008 <usart_init+0x328>)
     f14:	4798      	blx	r3
     f16:	e012      	b.n	f3e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f18:	2308      	movs	r3, #8
     f1a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f1c:	2300      	movs	r3, #0
     f1e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     f20:	2327      	movs	r3, #39	; 0x27
     f22:	5cf3      	ldrb	r3, [r6, r3]
     f24:	2b00      	cmp	r3, #0
     f26:	d00e      	beq.n	f46 <usart_init+0x266>
				status_code =
     f28:	9b06      	ldr	r3, [sp, #24]
     f2a:	9300      	str	r3, [sp, #0]
     f2c:	9b07      	ldr	r3, [sp, #28]
     f2e:	220e      	movs	r2, #14
     f30:	a906      	add	r1, sp, #24
     f32:	468c      	mov	ip, r1
     f34:	4462      	add	r2, ip
     f36:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     f38:	6a30      	ldr	r0, [r6, #32]
     f3a:	4f34      	ldr	r7, [pc, #208]	; (100c <usart_init+0x32c>)
     f3c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     f3e:	2800      	cmp	r0, #0
     f40:	d000      	beq.n	f44 <usart_init+0x264>
     f42:	e6e0      	b.n	d06 <usart_init+0x26>
     f44:	e750      	b.n	de8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     f46:	6a33      	ldr	r3, [r6, #32]
     f48:	001f      	movs	r7, r3
     f4a:	b2c0      	uxtb	r0, r0
     f4c:	4b2d      	ldr	r3, [pc, #180]	; (1004 <usart_init+0x324>)
     f4e:	4798      	blx	r3
     f50:	0001      	movs	r1, r0
				status_code =
     f52:	9b06      	ldr	r3, [sp, #24]
     f54:	9300      	str	r3, [sp, #0]
     f56:	9b07      	ldr	r3, [sp, #28]
     f58:	220e      	movs	r2, #14
     f5a:	a806      	add	r0, sp, #24
     f5c:	4684      	mov	ip, r0
     f5e:	4462      	add	r2, ip
     f60:	0038      	movs	r0, r7
     f62:	4f2a      	ldr	r7, [pc, #168]	; (100c <usart_init+0x32c>)
     f64:	47b8      	blx	r7
     f66:	e7ea      	b.n	f3e <usart_init+0x25e>
		if(config->lin_slave_enable) {
     f68:	7ef3      	ldrb	r3, [r6, #27]
     f6a:	2b00      	cmp	r3, #0
     f6c:	d100      	bne.n	f70 <usart_init+0x290>
     f6e:	e77d      	b.n	e6c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f70:	2380      	movs	r3, #128	; 0x80
     f72:	04db      	lsls	r3, r3, #19
     f74:	431f      	orrs	r7, r3
     f76:	e779      	b.n	e6c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f78:	0020      	movs	r0, r4
     f7a:	4b25      	ldr	r3, [pc, #148]	; (1010 <usart_init+0x330>)
     f7c:	4798      	blx	r3
     f7e:	e007      	b.n	f90 <usart_init+0x2b0>
     f80:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     f82:	2f04      	cmp	r7, #4
     f84:	d00d      	beq.n	fa2 <usart_init+0x2c2>
     f86:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f88:	00bb      	lsls	r3, r7, #2
     f8a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     f8c:	2800      	cmp	r0, #0
     f8e:	d0f3      	beq.n	f78 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     f90:	1c43      	adds	r3, r0, #1
     f92:	d0f5      	beq.n	f80 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f94:	a90e      	add	r1, sp, #56	; 0x38
     f96:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f98:	0c00      	lsrs	r0, r0, #16
     f9a:	b2c0      	uxtb	r0, r0
     f9c:	4b1d      	ldr	r3, [pc, #116]	; (1014 <usart_init+0x334>)
     f9e:	4798      	blx	r3
     fa0:	e7ee      	b.n	f80 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     fa2:	2300      	movs	r3, #0
     fa4:	60eb      	str	r3, [r5, #12]
     fa6:	612b      	str	r3, [r5, #16]
     fa8:	616b      	str	r3, [r5, #20]
     faa:	61ab      	str	r3, [r5, #24]
     fac:	61eb      	str	r3, [r5, #28]
     fae:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     fb0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fb2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fb4:	2200      	movs	r2, #0
     fb6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fb8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fba:	3330      	adds	r3, #48	; 0x30
     fbc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     fbe:	3301      	adds	r3, #1
     fc0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     fc2:	3301      	adds	r3, #1
     fc4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     fc6:	3301      	adds	r3, #1
     fc8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fca:	6828      	ldr	r0, [r5, #0]
     fcc:	4b07      	ldr	r3, [pc, #28]	; (fec <usart_init+0x30c>)
     fce:	4798      	blx	r3
     fd0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     fd2:	4911      	ldr	r1, [pc, #68]	; (1018 <usart_init+0x338>)
     fd4:	4b11      	ldr	r3, [pc, #68]	; (101c <usart_init+0x33c>)
     fd6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     fd8:	00a4      	lsls	r4, r4, #2
     fda:	4b11      	ldr	r3, [pc, #68]	; (1020 <usart_init+0x340>)
     fdc:	50e5      	str	r5, [r4, r3]
	return status_code;
     fde:	2000      	movs	r0, #0
     fe0:	e691      	b.n	d06 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fe2:	2310      	movs	r3, #16
     fe4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fe6:	2300      	movs	r3, #0
     fe8:	9307      	str	r3, [sp, #28]
     fea:	e6e8      	b.n	dbe <usart_init+0xde>
     fec:	00000821 	.word	0x00000821
     ff0:	40000400 	.word	0x40000400
     ff4:	00001af9 	.word	0x00001af9
     ff8:	00001a6d 	.word	0x00001a6d
     ffc:	0000065d 	.word	0x0000065d
    1000:	41002000 	.word	0x41002000
    1004:	00001b15 	.word	0x00001b15
    1008:	0000059f 	.word	0x0000059f
    100c:	000005c9 	.word	0x000005c9
    1010:	000006a9 	.word	0x000006a9
    1014:	00001bf1 	.word	0x00001bf1
    1018:	00001219 	.word	0x00001219
    101c:	0000085d 	.word	0x0000085d
    1020:	20000440 	.word	0x20000440

00001024 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1024:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1026:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1028:	2a00      	cmp	r2, #0
    102a:	d101      	bne.n	1030 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    102c:	0018      	movs	r0, r3
    102e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1030:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1032:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1034:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1036:	2a00      	cmp	r2, #0
    1038:	d1f8      	bne.n	102c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    103a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    103c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    103e:	2a00      	cmp	r2, #0
    1040:	d1fc      	bne.n	103c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1042:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1044:	2102      	movs	r1, #2
    1046:	7e1a      	ldrb	r2, [r3, #24]
    1048:	420a      	tst	r2, r1
    104a:	d0fc      	beq.n	1046 <usart_write_wait+0x22>
	return STATUS_OK;
    104c:	2300      	movs	r3, #0
    104e:	e7ed      	b.n	102c <usart_write_wait+0x8>

00001050 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1050:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1052:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1054:	2a00      	cmp	r2, #0
    1056:	d101      	bne.n	105c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1058:	0018      	movs	r0, r3
    105a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    105c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    105e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1060:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1062:	2a00      	cmp	r2, #0
    1064:	d1f8      	bne.n	1058 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1066:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1068:	7e10      	ldrb	r0, [r2, #24]
    106a:	0740      	lsls	r0, r0, #29
    106c:	d5f4      	bpl.n	1058 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    106e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1070:	2b00      	cmp	r3, #0
    1072:	d1fc      	bne.n	106e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1074:	8b53      	ldrh	r3, [r2, #26]
    1076:	b2db      	uxtb	r3, r3
	if (error_code) {
    1078:	0698      	lsls	r0, r3, #26
    107a:	d01d      	beq.n	10b8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    107c:	0798      	lsls	r0, r3, #30
    107e:	d503      	bpl.n	1088 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1080:	2302      	movs	r3, #2
    1082:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1084:	3318      	adds	r3, #24
    1086:	e7e7      	b.n	1058 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1088:	0758      	lsls	r0, r3, #29
    108a:	d503      	bpl.n	1094 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    108c:	2304      	movs	r3, #4
    108e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1090:	331a      	adds	r3, #26
    1092:	e7e1      	b.n	1058 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1094:	07d8      	lsls	r0, r3, #31
    1096:	d503      	bpl.n	10a0 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1098:	2301      	movs	r3, #1
    109a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    109c:	3312      	adds	r3, #18
    109e:	e7db      	b.n	1058 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    10a0:	06d8      	lsls	r0, r3, #27
    10a2:	d503      	bpl.n	10ac <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    10a4:	2310      	movs	r3, #16
    10a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    10a8:	3332      	adds	r3, #50	; 0x32
    10aa:	e7d5      	b.n	1058 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10ac:	069b      	lsls	r3, r3, #26
    10ae:	d503      	bpl.n	10b8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    10b0:	2320      	movs	r3, #32
    10b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    10b4:	3321      	adds	r3, #33	; 0x21
    10b6:	e7cf      	b.n	1058 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    10b8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    10ba:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    10bc:	2300      	movs	r3, #0
    10be:	e7cb      	b.n	1058 <usart_read_wait+0x8>

000010c0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	46ce      	mov	lr, r9
    10c4:	4647      	mov	r7, r8
    10c6:	b580      	push	{r7, lr}
    10c8:	b083      	sub	sp, #12
    10ca:	0005      	movs	r5, r0
    10cc:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    10ce:	2017      	movs	r0, #23
	if (length == 0) {
    10d0:	2a00      	cmp	r2, #0
    10d2:	d104      	bne.n	10de <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    10d4:	b003      	add	sp, #12
    10d6:	bc0c      	pop	{r2, r3}
    10d8:	4690      	mov	r8, r2
    10da:	4699      	mov	r9, r3
    10dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    10de:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    10e0:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    10e2:	2b00      	cmp	r3, #0
    10e4:	d0f6      	beq.n	10d4 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    10e6:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    10e8:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    10ea:	2b00      	cmp	r3, #0
    10ec:	d1fc      	bne.n	10e8 <usart_write_buffer_wait+0x28>
	while (length--) {
    10ee:	3a01      	subs	r2, #1
    10f0:	b293      	uxth	r3, r2
    10f2:	4699      	mov	r9, r3
    10f4:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    10f6:	2701      	movs	r7, #1
	while (length--) {
    10f8:	4b1f      	ldr	r3, [pc, #124]	; (1178 <usart_write_buffer_wait+0xb8>)
    10fa:	4698      	mov	r8, r3
    10fc:	e011      	b.n	1122 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    10fe:	1c73      	adds	r3, r6, #1
    1100:	b29b      	uxth	r3, r3
    1102:	9a01      	ldr	r2, [sp, #4]
    1104:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1106:	796a      	ldrb	r2, [r5, #5]
    1108:	2a01      	cmp	r2, #1
    110a:	d017      	beq.n	113c <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    110c:	b289      	uxth	r1, r1
    110e:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    1110:	0028      	movs	r0, r5
    1112:	4b1a      	ldr	r3, [pc, #104]	; (117c <usart_write_buffer_wait+0xbc>)
    1114:	4798      	blx	r3
	while (length--) {
    1116:	464b      	mov	r3, r9
    1118:	3b01      	subs	r3, #1
    111a:	b29b      	uxth	r3, r3
    111c:	4699      	mov	r9, r3
    111e:	4543      	cmp	r3, r8
    1120:	d013      	beq.n	114a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1122:	7e23      	ldrb	r3, [r4, #24]
    1124:	423b      	tst	r3, r7
    1126:	d1ea      	bne.n	10fe <usart_write_buffer_wait+0x3e>
    1128:	4b13      	ldr	r3, [pc, #76]	; (1178 <usart_write_buffer_wait+0xb8>)
    112a:	7e22      	ldrb	r2, [r4, #24]
    112c:	423a      	tst	r2, r7
    112e:	d1e6      	bne.n	10fe <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    1130:	2b01      	cmp	r3, #1
    1132:	d019      	beq.n	1168 <usart_write_buffer_wait+0xa8>
    1134:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1136:	2b00      	cmp	r3, #0
    1138:	d1f7      	bne.n	112a <usart_write_buffer_wait+0x6a>
    113a:	e7e0      	b.n	10fe <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    113c:	3602      	adds	r6, #2
    113e:	b2b6      	uxth	r6, r6
    1140:	9a01      	ldr	r2, [sp, #4]
    1142:	5cd3      	ldrb	r3, [r2, r3]
    1144:	021b      	lsls	r3, r3, #8
    1146:	4319      	orrs	r1, r3
    1148:	e7e2      	b.n	1110 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    114a:	7e23      	ldrb	r3, [r4, #24]
    114c:	079b      	lsls	r3, r3, #30
    114e:	d40d      	bmi.n	116c <usart_write_buffer_wait+0xac>
    1150:	4b09      	ldr	r3, [pc, #36]	; (1178 <usart_write_buffer_wait+0xb8>)
    1152:	2102      	movs	r1, #2
    1154:	7e22      	ldrb	r2, [r4, #24]
    1156:	420a      	tst	r2, r1
    1158:	d10a      	bne.n	1170 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    115a:	2b01      	cmp	r3, #1
    115c:	d00a      	beq.n	1174 <usart_write_buffer_wait+0xb4>
    115e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1160:	2b00      	cmp	r3, #0
    1162:	d1f7      	bne.n	1154 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    1164:	2000      	movs	r0, #0
    1166:	e7b5      	b.n	10d4 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    1168:	2012      	movs	r0, #18
    116a:	e7b3      	b.n	10d4 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    116c:	2000      	movs	r0, #0
    116e:	e7b1      	b.n	10d4 <usart_write_buffer_wait+0x14>
    1170:	2000      	movs	r0, #0
    1172:	e7af      	b.n	10d4 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    1174:	2012      	movs	r0, #18
    1176:	e7ad      	b.n	10d4 <usart_write_buffer_wait+0x14>
    1178:	0000ffff 	.word	0x0000ffff
    117c:	00001025 	.word	0x00001025

00001180 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1180:	b5f0      	push	{r4, r5, r6, r7, lr}
    1182:	46d6      	mov	lr, sl
    1184:	b500      	push	{lr}
    1186:	b084      	sub	sp, #16
    1188:	0004      	movs	r4, r0
    118a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    118c:	2017      	movs	r0, #23
	if (length == 0) {
    118e:	2a00      	cmp	r2, #0
    1190:	d103      	bne.n	119a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1192:	b004      	add	sp, #16
    1194:	bc04      	pop	{r2}
    1196:	4692      	mov	sl, r2
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    119a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    119c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    119e:	2b00      	cmp	r3, #0
    11a0:	d0f7      	beq.n	1192 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11a2:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    11a4:	3a01      	subs	r2, #1
    11a6:	b293      	uxth	r3, r2
    11a8:	469a      	mov	sl, r3
    11aa:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    11ac:	2704      	movs	r7, #4
    11ae:	e019      	b.n	11e4 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    11b0:	2300      	movs	r3, #0
    11b2:	aa02      	add	r2, sp, #8
    11b4:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    11b6:	1d91      	adds	r1, r2, #6
    11b8:	0020      	movs	r0, r4
    11ba:	4b15      	ldr	r3, [pc, #84]	; (1210 <usart_read_buffer_wait+0x90>)
    11bc:	4798      	blx	r3
		if (retval != STATUS_OK) {
    11be:	2800      	cmp	r0, #0
    11c0:	d1e7      	bne.n	1192 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    11c2:	1c69      	adds	r1, r5, #1
    11c4:	b289      	uxth	r1, r1
    11c6:	ab02      	add	r3, sp, #8
    11c8:	88db      	ldrh	r3, [r3, #6]
    11ca:	9a01      	ldr	r2, [sp, #4]
    11cc:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11ce:	7962      	ldrb	r2, [r4, #5]
    11d0:	2a01      	cmp	r2, #1
    11d2:	d014      	beq.n	11fe <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    11d4:	000d      	movs	r5, r1
	while (length--) {
    11d6:	4653      	mov	r3, sl
    11d8:	3b01      	subs	r3, #1
    11da:	b29b      	uxth	r3, r3
    11dc:	469a      	mov	sl, r3
    11de:	4b0d      	ldr	r3, [pc, #52]	; (1214 <usart_read_buffer_wait+0x94>)
    11e0:	459a      	cmp	sl, r3
    11e2:	d0d6      	beq.n	1192 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    11e4:	7e33      	ldrb	r3, [r6, #24]
    11e6:	423b      	tst	r3, r7
    11e8:	d1e2      	bne.n	11b0 <usart_read_buffer_wait+0x30>
    11ea:	4b0a      	ldr	r3, [pc, #40]	; (1214 <usart_read_buffer_wait+0x94>)
    11ec:	7e32      	ldrb	r2, [r6, #24]
    11ee:	423a      	tst	r2, r7
    11f0:	d1de      	bne.n	11b0 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    11f2:	2b01      	cmp	r3, #1
    11f4:	d009      	beq.n	120a <usart_read_buffer_wait+0x8a>
    11f6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    11f8:	2b00      	cmp	r3, #0
    11fa:	d1f7      	bne.n	11ec <usart_read_buffer_wait+0x6c>
    11fc:	e7d8      	b.n	11b0 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    11fe:	3502      	adds	r5, #2
    1200:	b2ad      	uxth	r5, r5
    1202:	0a1b      	lsrs	r3, r3, #8
    1204:	9a01      	ldr	r2, [sp, #4]
    1206:	5453      	strb	r3, [r2, r1]
    1208:	e7e5      	b.n	11d6 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    120a:	2012      	movs	r0, #18
    120c:	e7c1      	b.n	1192 <usart_read_buffer_wait+0x12>
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	00001051 	.word	0x00001051
    1214:	0000ffff 	.word	0x0000ffff

00001218 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    121a:	0080      	lsls	r0, r0, #2
    121c:	4b62      	ldr	r3, [pc, #392]	; (13a8 <_usart_interrupt_handler+0x190>)
    121e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1220:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1222:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1224:	2b00      	cmp	r3, #0
    1226:	d1fc      	bne.n	1222 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1228:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    122a:	7da6      	ldrb	r6, [r4, #22]
    122c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    122e:	2330      	movs	r3, #48	; 0x30
    1230:	5ceb      	ldrb	r3, [r5, r3]
    1232:	2231      	movs	r2, #49	; 0x31
    1234:	5caf      	ldrb	r7, [r5, r2]
    1236:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1238:	07f3      	lsls	r3, r6, #31
    123a:	d522      	bpl.n	1282 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    123c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    123e:	b29b      	uxth	r3, r3
    1240:	2b00      	cmp	r3, #0
    1242:	d01c      	beq.n	127e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1244:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1246:	7813      	ldrb	r3, [r2, #0]
    1248:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    124a:	1c51      	adds	r1, r2, #1
    124c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    124e:	7969      	ldrb	r1, [r5, #5]
    1250:	2901      	cmp	r1, #1
    1252:	d00e      	beq.n	1272 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1254:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1256:	05db      	lsls	r3, r3, #23
    1258:	0ddb      	lsrs	r3, r3, #23
    125a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    125c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    125e:	3b01      	subs	r3, #1
    1260:	b29b      	uxth	r3, r3
    1262:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1264:	2b00      	cmp	r3, #0
    1266:	d10c      	bne.n	1282 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1268:	3301      	adds	r3, #1
    126a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    126c:	3301      	adds	r3, #1
    126e:	75a3      	strb	r3, [r4, #22]
    1270:	e007      	b.n	1282 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1272:	7851      	ldrb	r1, [r2, #1]
    1274:	0209      	lsls	r1, r1, #8
    1276:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1278:	3202      	adds	r2, #2
    127a:	62aa      	str	r2, [r5, #40]	; 0x28
    127c:	e7eb      	b.n	1256 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    127e:	2301      	movs	r3, #1
    1280:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1282:	07b3      	lsls	r3, r6, #30
    1284:	d506      	bpl.n	1294 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1286:	2302      	movs	r3, #2
    1288:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    128a:	2200      	movs	r2, #0
    128c:	3331      	adds	r3, #49	; 0x31
    128e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1290:	07fb      	lsls	r3, r7, #31
    1292:	d41a      	bmi.n	12ca <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1294:	0773      	lsls	r3, r6, #29
    1296:	d565      	bpl.n	1364 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1298:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    129a:	b29b      	uxth	r3, r3
    129c:	2b00      	cmp	r3, #0
    129e:	d05f      	beq.n	1360 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12a0:	8b63      	ldrh	r3, [r4, #26]
    12a2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    12a4:	071a      	lsls	r2, r3, #28
    12a6:	d414      	bmi.n	12d2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12a8:	223f      	movs	r2, #63	; 0x3f
    12aa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    12ac:	2b00      	cmp	r3, #0
    12ae:	d034      	beq.n	131a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    12b0:	079a      	lsls	r2, r3, #30
    12b2:	d511      	bpl.n	12d8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    12b4:	221a      	movs	r2, #26
    12b6:	2332      	movs	r3, #50	; 0x32
    12b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    12ba:	3b30      	subs	r3, #48	; 0x30
    12bc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    12be:	077b      	lsls	r3, r7, #29
    12c0:	d550      	bpl.n	1364 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    12c2:	0028      	movs	r0, r5
    12c4:	696b      	ldr	r3, [r5, #20]
    12c6:	4798      	blx	r3
    12c8:	e04c      	b.n	1364 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12ca:	0028      	movs	r0, r5
    12cc:	68eb      	ldr	r3, [r5, #12]
    12ce:	4798      	blx	r3
    12d0:	e7e0      	b.n	1294 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12d2:	2237      	movs	r2, #55	; 0x37
    12d4:	4013      	ands	r3, r2
    12d6:	e7e9      	b.n	12ac <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    12d8:	075a      	lsls	r2, r3, #29
    12da:	d505      	bpl.n	12e8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    12dc:	221e      	movs	r2, #30
    12de:	2332      	movs	r3, #50	; 0x32
    12e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    12e2:	3b2e      	subs	r3, #46	; 0x2e
    12e4:	8363      	strh	r3, [r4, #26]
    12e6:	e7ea      	b.n	12be <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    12e8:	07da      	lsls	r2, r3, #31
    12ea:	d505      	bpl.n	12f8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    12ec:	2213      	movs	r2, #19
    12ee:	2332      	movs	r3, #50	; 0x32
    12f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    12f2:	3b31      	subs	r3, #49	; 0x31
    12f4:	8363      	strh	r3, [r4, #26]
    12f6:	e7e2      	b.n	12be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    12f8:	06da      	lsls	r2, r3, #27
    12fa:	d505      	bpl.n	1308 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    12fc:	2242      	movs	r2, #66	; 0x42
    12fe:	2332      	movs	r3, #50	; 0x32
    1300:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1302:	3b22      	subs	r3, #34	; 0x22
    1304:	8363      	strh	r3, [r4, #26]
    1306:	e7da      	b.n	12be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1308:	2220      	movs	r2, #32
    130a:	421a      	tst	r2, r3
    130c:	d0d7      	beq.n	12be <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    130e:	3221      	adds	r2, #33	; 0x21
    1310:	2332      	movs	r3, #50	; 0x32
    1312:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1314:	3b12      	subs	r3, #18
    1316:	8363      	strh	r3, [r4, #26]
    1318:	e7d1      	b.n	12be <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    131a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    131c:	05db      	lsls	r3, r3, #23
    131e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1320:	b2da      	uxtb	r2, r3
    1322:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1324:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1326:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1328:	1c51      	adds	r1, r2, #1
    132a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    132c:	7969      	ldrb	r1, [r5, #5]
    132e:	2901      	cmp	r1, #1
    1330:	d010      	beq.n	1354 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1332:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1334:	3b01      	subs	r3, #1
    1336:	b29b      	uxth	r3, r3
    1338:	85ab      	strh	r3, [r5, #44]	; 0x2c
    133a:	2b00      	cmp	r3, #0
    133c:	d112      	bne.n	1364 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    133e:	3304      	adds	r3, #4
    1340:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1342:	2200      	movs	r2, #0
    1344:	332e      	adds	r3, #46	; 0x2e
    1346:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1348:	07bb      	lsls	r3, r7, #30
    134a:	d50b      	bpl.n	1364 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    134c:	0028      	movs	r0, r5
    134e:	692b      	ldr	r3, [r5, #16]
    1350:	4798      	blx	r3
    1352:	e007      	b.n	1364 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1354:	0a1b      	lsrs	r3, r3, #8
    1356:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1358:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    135a:	3301      	adds	r3, #1
    135c:	626b      	str	r3, [r5, #36]	; 0x24
    135e:	e7e8      	b.n	1332 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1360:	2304      	movs	r3, #4
    1362:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1364:	06f3      	lsls	r3, r6, #27
    1366:	d504      	bpl.n	1372 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1368:	2310      	movs	r3, #16
    136a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    136c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    136e:	06fb      	lsls	r3, r7, #27
    1370:	d40e      	bmi.n	1390 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1372:	06b3      	lsls	r3, r6, #26
    1374:	d504      	bpl.n	1380 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1376:	2320      	movs	r3, #32
    1378:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    137a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    137c:	073b      	lsls	r3, r7, #28
    137e:	d40b      	bmi.n	1398 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1380:	0733      	lsls	r3, r6, #28
    1382:	d504      	bpl.n	138e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1384:	2308      	movs	r3, #8
    1386:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1388:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    138a:	06bb      	lsls	r3, r7, #26
    138c:	d408      	bmi.n	13a0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1390:	0028      	movs	r0, r5
    1392:	69eb      	ldr	r3, [r5, #28]
    1394:	4798      	blx	r3
    1396:	e7ec      	b.n	1372 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1398:	0028      	movs	r0, r5
    139a:	69ab      	ldr	r3, [r5, #24]
    139c:	4798      	blx	r3
    139e:	e7ef      	b.n	1380 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    13a0:	6a2b      	ldr	r3, [r5, #32]
    13a2:	0028      	movs	r0, r5
    13a4:	4798      	blx	r3
}
    13a6:	e7f2      	b.n	138e <_usart_interrupt_handler+0x176>
    13a8:	20000440 	.word	0x20000440

000013ac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    13ac:	b510      	push	{r4, lr}
	switch (clock_source) {
    13ae:	2808      	cmp	r0, #8
    13b0:	d803      	bhi.n	13ba <system_clock_source_get_hz+0xe>
    13b2:	0080      	lsls	r0, r0, #2
    13b4:	4b1c      	ldr	r3, [pc, #112]	; (1428 <system_clock_source_get_hz+0x7c>)
    13b6:	581b      	ldr	r3, [r3, r0]
    13b8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    13ba:	2000      	movs	r0, #0
    13bc:	e032      	b.n	1424 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    13be:	4b1b      	ldr	r3, [pc, #108]	; (142c <system_clock_source_get_hz+0x80>)
    13c0:	6918      	ldr	r0, [r3, #16]
    13c2:	e02f      	b.n	1424 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    13c4:	4b1a      	ldr	r3, [pc, #104]	; (1430 <system_clock_source_get_hz+0x84>)
    13c6:	6a1b      	ldr	r3, [r3, #32]
    13c8:	059b      	lsls	r3, r3, #22
    13ca:	0f9b      	lsrs	r3, r3, #30
    13cc:	4819      	ldr	r0, [pc, #100]	; (1434 <system_clock_source_get_hz+0x88>)
    13ce:	40d8      	lsrs	r0, r3
    13d0:	e028      	b.n	1424 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    13d2:	4b16      	ldr	r3, [pc, #88]	; (142c <system_clock_source_get_hz+0x80>)
    13d4:	6958      	ldr	r0, [r3, #20]
    13d6:	e025      	b.n	1424 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13d8:	4b14      	ldr	r3, [pc, #80]	; (142c <system_clock_source_get_hz+0x80>)
    13da:	681b      	ldr	r3, [r3, #0]
			return 0;
    13dc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13de:	079b      	lsls	r3, r3, #30
    13e0:	d520      	bpl.n	1424 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13e2:	4913      	ldr	r1, [pc, #76]	; (1430 <system_clock_source_get_hz+0x84>)
    13e4:	2210      	movs	r2, #16
    13e6:	68cb      	ldr	r3, [r1, #12]
    13e8:	421a      	tst	r2, r3
    13ea:	d0fc      	beq.n	13e6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    13ec:	4b0f      	ldr	r3, [pc, #60]	; (142c <system_clock_source_get_hz+0x80>)
    13ee:	681a      	ldr	r2, [r3, #0]
    13f0:	2324      	movs	r3, #36	; 0x24
    13f2:	4013      	ands	r3, r2
    13f4:	2b04      	cmp	r3, #4
    13f6:	d001      	beq.n	13fc <system_clock_source_get_hz+0x50>
			return 48000000UL;
    13f8:	480f      	ldr	r0, [pc, #60]	; (1438 <system_clock_source_get_hz+0x8c>)
    13fa:	e013      	b.n	1424 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    13fc:	2000      	movs	r0, #0
    13fe:	4b0f      	ldr	r3, [pc, #60]	; (143c <system_clock_source_get_hz+0x90>)
    1400:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1402:	4b0a      	ldr	r3, [pc, #40]	; (142c <system_clock_source_get_hz+0x80>)
    1404:	689b      	ldr	r3, [r3, #8]
    1406:	041b      	lsls	r3, r3, #16
    1408:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    140a:	4358      	muls	r0, r3
    140c:	e00a      	b.n	1424 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    140e:	2350      	movs	r3, #80	; 0x50
    1410:	4a07      	ldr	r2, [pc, #28]	; (1430 <system_clock_source_get_hz+0x84>)
    1412:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1414:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1416:	075b      	lsls	r3, r3, #29
    1418:	d504      	bpl.n	1424 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    141a:	4b04      	ldr	r3, [pc, #16]	; (142c <system_clock_source_get_hz+0x80>)
    141c:	68d8      	ldr	r0, [r3, #12]
    141e:	e001      	b.n	1424 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1420:	2080      	movs	r0, #128	; 0x80
    1422:	0200      	lsls	r0, r0, #8
	}
}
    1424:	bd10      	pop	{r4, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	0000a754 	.word	0x0000a754
    142c:	20000140 	.word	0x20000140
    1430:	40000800 	.word	0x40000800
    1434:	007a1200 	.word	0x007a1200
    1438:	02dc6c00 	.word	0x02dc6c00
    143c:	00001b15 	.word	0x00001b15

00001440 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1440:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1442:	490c      	ldr	r1, [pc, #48]	; (1474 <system_clock_source_osc8m_set_config+0x34>)
    1444:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1446:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1448:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    144a:	7840      	ldrb	r0, [r0, #1]
    144c:	2201      	movs	r2, #1
    144e:	4010      	ands	r0, r2
    1450:	0180      	lsls	r0, r0, #6
    1452:	2640      	movs	r6, #64	; 0x40
    1454:	43b3      	bics	r3, r6
    1456:	4303      	orrs	r3, r0
    1458:	402a      	ands	r2, r5
    145a:	01d2      	lsls	r2, r2, #7
    145c:	2080      	movs	r0, #128	; 0x80
    145e:	4383      	bics	r3, r0
    1460:	4313      	orrs	r3, r2
    1462:	2203      	movs	r2, #3
    1464:	4022      	ands	r2, r4
    1466:	0212      	lsls	r2, r2, #8
    1468:	4803      	ldr	r0, [pc, #12]	; (1478 <system_clock_source_osc8m_set_config+0x38>)
    146a:	4003      	ands	r3, r0
    146c:	4313      	orrs	r3, r2
    146e:	620b      	str	r3, [r1, #32]
}
    1470:	bd70      	pop	{r4, r5, r6, pc}
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	40000800 	.word	0x40000800
    1478:	fffffcff 	.word	0xfffffcff

0000147c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    147c:	b5f0      	push	{r4, r5, r6, r7, lr}
    147e:	46ce      	mov	lr, r9
    1480:	4647      	mov	r7, r8
    1482:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1484:	4b19      	ldr	r3, [pc, #100]	; (14ec <system_clock_source_osc32k_set_config+0x70>)
    1486:	4699      	mov	r9, r3
    1488:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    148a:	7841      	ldrb	r1, [r0, #1]
    148c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    148e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1490:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1492:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1494:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1496:	7880      	ldrb	r0, [r0, #2]
    1498:	2101      	movs	r1, #1
    149a:	4008      	ands	r0, r1
    149c:	0080      	lsls	r0, r0, #2
    149e:	2204      	movs	r2, #4
    14a0:	4393      	bics	r3, r2
    14a2:	4303      	orrs	r3, r0
    14a4:	4660      	mov	r0, ip
    14a6:	4008      	ands	r0, r1
    14a8:	00c0      	lsls	r0, r0, #3
    14aa:	3204      	adds	r2, #4
    14ac:	4393      	bics	r3, r2
    14ae:	4303      	orrs	r3, r0
    14b0:	0038      	movs	r0, r7
    14b2:	4008      	ands	r0, r1
    14b4:	0180      	lsls	r0, r0, #6
    14b6:	2740      	movs	r7, #64	; 0x40
    14b8:	43bb      	bics	r3, r7
    14ba:	4303      	orrs	r3, r0
    14bc:	0030      	movs	r0, r6
    14be:	4008      	ands	r0, r1
    14c0:	01c0      	lsls	r0, r0, #7
    14c2:	2680      	movs	r6, #128	; 0x80
    14c4:	43b3      	bics	r3, r6
    14c6:	4303      	orrs	r3, r0
    14c8:	2007      	movs	r0, #7
    14ca:	4005      	ands	r5, r0
    14cc:	022d      	lsls	r5, r5, #8
    14ce:	4808      	ldr	r0, [pc, #32]	; (14f0 <system_clock_source_osc32k_set_config+0x74>)
    14d0:	4003      	ands	r3, r0
    14d2:	432b      	orrs	r3, r5
    14d4:	4021      	ands	r1, r4
    14d6:	0309      	lsls	r1, r1, #12
    14d8:	4806      	ldr	r0, [pc, #24]	; (14f4 <system_clock_source_osc32k_set_config+0x78>)
    14da:	4003      	ands	r3, r0
    14dc:	430b      	orrs	r3, r1
    14de:	464a      	mov	r2, r9
    14e0:	6193      	str	r3, [r2, #24]
}
    14e2:	bc0c      	pop	{r2, r3}
    14e4:	4690      	mov	r8, r2
    14e6:	4699      	mov	r9, r3
    14e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	40000800 	.word	0x40000800
    14f0:	fffff8ff 	.word	0xfffff8ff
    14f4:	ffffefff 	.word	0xffffefff

000014f8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    14f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14fa:	46de      	mov	lr, fp
    14fc:	4657      	mov	r7, sl
    14fe:	464e      	mov	r6, r9
    1500:	4645      	mov	r5, r8
    1502:	b5e0      	push	{r5, r6, r7, lr}
    1504:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1506:	4b26      	ldr	r3, [pc, #152]	; (15a0 <system_clock_source_xosc32k_set_config+0xa8>)
    1508:	469b      	mov	fp, r3
    150a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    150c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    150e:	7800      	ldrb	r0, [r0, #0]
    1510:	4242      	negs	r2, r0
    1512:	4142      	adcs	r2, r0
    1514:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1516:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1518:	78ca      	ldrb	r2, [r1, #3]
    151a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    151c:	790a      	ldrb	r2, [r1, #4]
    151e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1520:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1522:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1524:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1526:	688a      	ldr	r2, [r1, #8]
    1528:	491e      	ldr	r1, [pc, #120]	; (15a4 <system_clock_source_xosc32k_set_config+0xac>)
    152a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    152c:	2101      	movs	r1, #1
    152e:	464a      	mov	r2, r9
    1530:	0092      	lsls	r2, r2, #2
    1532:	4691      	mov	r9, r2
    1534:	2204      	movs	r2, #4
    1536:	4393      	bics	r3, r2
    1538:	464a      	mov	r2, r9
    153a:	4313      	orrs	r3, r2
    153c:	4642      	mov	r2, r8
    153e:	400a      	ands	r2, r1
    1540:	00d2      	lsls	r2, r2, #3
    1542:	4690      	mov	r8, r2
    1544:	2208      	movs	r2, #8
    1546:	4393      	bics	r3, r2
    1548:	4642      	mov	r2, r8
    154a:	4313      	orrs	r3, r2
    154c:	4662      	mov	r2, ip
    154e:	400a      	ands	r2, r1
    1550:	0112      	lsls	r2, r2, #4
    1552:	4694      	mov	ip, r2
    1554:	2210      	movs	r2, #16
    1556:	4393      	bics	r3, r2
    1558:	4662      	mov	r2, ip
    155a:	4313      	orrs	r3, r2
    155c:	4008      	ands	r0, r1
    155e:	0140      	lsls	r0, r0, #5
    1560:	2220      	movs	r2, #32
    1562:	4393      	bics	r3, r2
    1564:	4303      	orrs	r3, r0
    1566:	400f      	ands	r7, r1
    1568:	01bf      	lsls	r7, r7, #6
    156a:	2040      	movs	r0, #64	; 0x40
    156c:	4383      	bics	r3, r0
    156e:	433b      	orrs	r3, r7
    1570:	400e      	ands	r6, r1
    1572:	01f6      	lsls	r6, r6, #7
    1574:	3040      	adds	r0, #64	; 0x40
    1576:	4383      	bics	r3, r0
    1578:	4333      	orrs	r3, r6
    157a:	3879      	subs	r0, #121	; 0x79
    157c:	4005      	ands	r5, r0
    157e:	022d      	lsls	r5, r5, #8
    1580:	4809      	ldr	r0, [pc, #36]	; (15a8 <system_clock_source_xosc32k_set_config+0xb0>)
    1582:	4003      	ands	r3, r0
    1584:	432b      	orrs	r3, r5
    1586:	4021      	ands	r1, r4
    1588:	0309      	lsls	r1, r1, #12
    158a:	4808      	ldr	r0, [pc, #32]	; (15ac <system_clock_source_xosc32k_set_config+0xb4>)
    158c:	4003      	ands	r3, r0
    158e:	430b      	orrs	r3, r1
    1590:	465a      	mov	r2, fp
    1592:	8293      	strh	r3, [r2, #20]
}
    1594:	bc3c      	pop	{r2, r3, r4, r5}
    1596:	4690      	mov	r8, r2
    1598:	4699      	mov	r9, r3
    159a:	46a2      	mov	sl, r4
    159c:	46ab      	mov	fp, r5
    159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15a0:	40000800 	.word	0x40000800
    15a4:	20000140 	.word	0x20000140
    15a8:	fffff8ff 	.word	0xfffff8ff
    15ac:	ffffefff 	.word	0xffffefff

000015b0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    15b0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    15b2:	7a03      	ldrb	r3, [r0, #8]
    15b4:	069b      	lsls	r3, r3, #26
    15b6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    15b8:	8942      	ldrh	r2, [r0, #10]
    15ba:	0592      	lsls	r2, r2, #22
    15bc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    15be:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    15c0:	4918      	ldr	r1, [pc, #96]	; (1624 <system_clock_source_dfll_set_config+0x74>)
    15c2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    15c4:	7983      	ldrb	r3, [r0, #6]
    15c6:	79c2      	ldrb	r2, [r0, #7]
    15c8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    15ca:	8842      	ldrh	r2, [r0, #2]
    15cc:	8884      	ldrh	r4, [r0, #4]
    15ce:	4322      	orrs	r2, r4
    15d0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    15d2:	7842      	ldrb	r2, [r0, #1]
    15d4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    15d6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    15d8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    15da:	7803      	ldrb	r3, [r0, #0]
    15dc:	2b04      	cmp	r3, #4
    15de:	d011      	beq.n	1604 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    15e0:	2b20      	cmp	r3, #32
    15e2:	d10e      	bne.n	1602 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    15e4:	7b03      	ldrb	r3, [r0, #12]
    15e6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    15e8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15ea:	4313      	orrs	r3, r2
    15ec:	89c2      	ldrh	r2, [r0, #14]
    15ee:	0412      	lsls	r2, r2, #16
    15f0:	490d      	ldr	r1, [pc, #52]	; (1628 <system_clock_source_dfll_set_config+0x78>)
    15f2:	400a      	ands	r2, r1
    15f4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15f6:	4a0b      	ldr	r2, [pc, #44]	; (1624 <system_clock_source_dfll_set_config+0x74>)
    15f8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    15fa:	6811      	ldr	r1, [r2, #0]
    15fc:	4b0b      	ldr	r3, [pc, #44]	; (162c <system_clock_source_dfll_set_config+0x7c>)
    15fe:	430b      	orrs	r3, r1
    1600:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1602:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1604:	7b03      	ldrb	r3, [r0, #12]
    1606:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1608:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    160a:	4313      	orrs	r3, r2
    160c:	89c2      	ldrh	r2, [r0, #14]
    160e:	0412      	lsls	r2, r2, #16
    1610:	4905      	ldr	r1, [pc, #20]	; (1628 <system_clock_source_dfll_set_config+0x78>)
    1612:	400a      	ands	r2, r1
    1614:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1616:	4a03      	ldr	r2, [pc, #12]	; (1624 <system_clock_source_dfll_set_config+0x74>)
    1618:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    161a:	6813      	ldr	r3, [r2, #0]
    161c:	2104      	movs	r1, #4
    161e:	430b      	orrs	r3, r1
    1620:	6013      	str	r3, [r2, #0]
    1622:	e7ee      	b.n	1602 <system_clock_source_dfll_set_config+0x52>
    1624:	20000140 	.word	0x20000140
    1628:	03ff0000 	.word	0x03ff0000
    162c:	00000424 	.word	0x00000424

00001630 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1630:	2808      	cmp	r0, #8
    1632:	d803      	bhi.n	163c <system_clock_source_enable+0xc>
    1634:	0080      	lsls	r0, r0, #2
    1636:	4b25      	ldr	r3, [pc, #148]	; (16cc <system_clock_source_enable+0x9c>)
    1638:	581b      	ldr	r3, [r3, r0]
    163a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    163c:	2017      	movs	r0, #23
    163e:	e044      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1640:	4a23      	ldr	r2, [pc, #140]	; (16d0 <system_clock_source_enable+0xa0>)
    1642:	6a13      	ldr	r3, [r2, #32]
    1644:	2102      	movs	r1, #2
    1646:	430b      	orrs	r3, r1
    1648:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    164a:	2000      	movs	r0, #0
    164c:	e03d      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    164e:	4a20      	ldr	r2, [pc, #128]	; (16d0 <system_clock_source_enable+0xa0>)
    1650:	6993      	ldr	r3, [r2, #24]
    1652:	2102      	movs	r1, #2
    1654:	430b      	orrs	r3, r1
    1656:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1658:	2000      	movs	r0, #0
		break;
    165a:	e036      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    165c:	4a1c      	ldr	r2, [pc, #112]	; (16d0 <system_clock_source_enable+0xa0>)
    165e:	8a13      	ldrh	r3, [r2, #16]
    1660:	2102      	movs	r1, #2
    1662:	430b      	orrs	r3, r1
    1664:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1666:	2000      	movs	r0, #0
		break;
    1668:	e02f      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    166a:	4a19      	ldr	r2, [pc, #100]	; (16d0 <system_clock_source_enable+0xa0>)
    166c:	8a93      	ldrh	r3, [r2, #20]
    166e:	2102      	movs	r1, #2
    1670:	430b      	orrs	r3, r1
    1672:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1674:	2000      	movs	r0, #0
		break;
    1676:	e028      	b.n	16ca <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1678:	4916      	ldr	r1, [pc, #88]	; (16d4 <system_clock_source_enable+0xa4>)
    167a:	680b      	ldr	r3, [r1, #0]
    167c:	2202      	movs	r2, #2
    167e:	4313      	orrs	r3, r2
    1680:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1682:	4b13      	ldr	r3, [pc, #76]	; (16d0 <system_clock_source_enable+0xa0>)
    1684:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1686:	0019      	movs	r1, r3
    1688:	320e      	adds	r2, #14
    168a:	68cb      	ldr	r3, [r1, #12]
    168c:	421a      	tst	r2, r3
    168e:	d0fc      	beq.n	168a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1690:	4a10      	ldr	r2, [pc, #64]	; (16d4 <system_clock_source_enable+0xa4>)
    1692:	6891      	ldr	r1, [r2, #8]
    1694:	4b0e      	ldr	r3, [pc, #56]	; (16d0 <system_clock_source_enable+0xa0>)
    1696:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1698:	6852      	ldr	r2, [r2, #4]
    169a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    169c:	2200      	movs	r2, #0
    169e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16a0:	0019      	movs	r1, r3
    16a2:	3210      	adds	r2, #16
    16a4:	68cb      	ldr	r3, [r1, #12]
    16a6:	421a      	tst	r2, r3
    16a8:	d0fc      	beq.n	16a4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    16aa:	4b0a      	ldr	r3, [pc, #40]	; (16d4 <system_clock_source_enable+0xa4>)
    16ac:	681b      	ldr	r3, [r3, #0]
    16ae:	b29b      	uxth	r3, r3
    16b0:	4a07      	ldr	r2, [pc, #28]	; (16d0 <system_clock_source_enable+0xa0>)
    16b2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    16b4:	2000      	movs	r0, #0
    16b6:	e008      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    16b8:	4905      	ldr	r1, [pc, #20]	; (16d0 <system_clock_source_enable+0xa0>)
    16ba:	2244      	movs	r2, #68	; 0x44
    16bc:	5c8b      	ldrb	r3, [r1, r2]
    16be:	2002      	movs	r0, #2
    16c0:	4303      	orrs	r3, r0
    16c2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    16c4:	2000      	movs	r0, #0
		break;
    16c6:	e000      	b.n	16ca <system_clock_source_enable+0x9a>
		return STATUS_OK;
    16c8:	2000      	movs	r0, #0
}
    16ca:	4770      	bx	lr
    16cc:	0000a778 	.word	0x0000a778
    16d0:	40000800 	.word	0x40000800
    16d4:	20000140 	.word	0x20000140

000016d8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    16d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16da:	46de      	mov	lr, fp
    16dc:	4657      	mov	r7, sl
    16de:	464e      	mov	r6, r9
    16e0:	4645      	mov	r5, r8
    16e2:	b5e0      	push	{r5, r6, r7, lr}
    16e4:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16e6:	22c2      	movs	r2, #194	; 0xc2
    16e8:	00d2      	lsls	r2, r2, #3
    16ea:	4b65      	ldr	r3, [pc, #404]	; (1880 <system_clock_init+0x1a8>)
    16ec:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    16ee:	4a65      	ldr	r2, [pc, #404]	; (1884 <system_clock_init+0x1ac>)
    16f0:	6853      	ldr	r3, [r2, #4]
    16f2:	211e      	movs	r1, #30
    16f4:	438b      	bics	r3, r1
    16f6:	391a      	subs	r1, #26
    16f8:	430b      	orrs	r3, r1
    16fa:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    16fc:	2203      	movs	r2, #3
    16fe:	ab01      	add	r3, sp, #4
    1700:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1702:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1704:	4d60      	ldr	r5, [pc, #384]	; (1888 <system_clock_init+0x1b0>)
    1706:	b2e0      	uxtb	r0, r4
    1708:	a901      	add	r1, sp, #4
    170a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    170c:	3401      	adds	r4, #1
    170e:	2c25      	cmp	r4, #37	; 0x25
    1710:	d1f9      	bne.n	1706 <system_clock_init+0x2e>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1712:	a80c      	add	r0, sp, #48	; 0x30
    1714:	2300      	movs	r3, #0
    1716:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1718:	2280      	movs	r2, #128	; 0x80
    171a:	0212      	lsls	r2, r2, #8
    171c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    171e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1720:	2201      	movs	r2, #1
    1722:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1724:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1726:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1728:	2106      	movs	r1, #6
    172a:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    172c:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    172e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1730:	4b56      	ldr	r3, [pc, #344]	; (188c <system_clock_init+0x1b4>)
    1732:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1734:	2005      	movs	r0, #5
    1736:	4b56      	ldr	r3, [pc, #344]	; (1890 <system_clock_init+0x1b8>)
    1738:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    173a:	4951      	ldr	r1, [pc, #324]	; (1880 <system_clock_init+0x1a8>)
    173c:	2202      	movs	r2, #2
    173e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1740:	421a      	tst	r2, r3
    1742:	d0fc      	beq.n	173e <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1744:	494e      	ldr	r1, [pc, #312]	; (1880 <system_clock_init+0x1a8>)
    1746:	8a8b      	ldrh	r3, [r1, #20]
    1748:	2280      	movs	r2, #128	; 0x80
    174a:	4313      	orrs	r3, r2
    174c:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    174e:	4c51      	ldr	r4, [pc, #324]	; (1894 <system_clock_init+0x1bc>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    1750:	6823      	ldr	r3, [r4, #0]
    1752:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1754:	698a      	ldr	r2, [r1, #24]
    1756:	0e5b      	lsrs	r3, r3, #25
    1758:	041b      	lsls	r3, r3, #16
    175a:	484f      	ldr	r0, [pc, #316]	; (1898 <system_clock_init+0x1c0>)
    175c:	4002      	ands	r2, r0
    175e:	4313      	orrs	r3, r2
    1760:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1762:	a80a      	add	r0, sp, #40	; 0x28
    1764:	2301      	movs	r3, #1
    1766:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1768:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    176a:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    176c:	2207      	movs	r2, #7
    176e:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1770:	2500      	movs	r5, #0
    1772:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1774:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1776:	4b49      	ldr	r3, [pc, #292]	; (189c <system_clock_init+0x1c4>)
    1778:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    177a:	2004      	movs	r0, #4
    177c:	4b44      	ldr	r3, [pc, #272]	; (1890 <system_clock_init+0x1b8>)
    177e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1780:	ab05      	add	r3, sp, #20
    1782:	2200      	movs	r2, #0
    1784:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1786:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1788:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    178a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    178c:	213f      	movs	r1, #63	; 0x3f
    178e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1790:	393b      	subs	r1, #59	; 0x3b
    1792:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1794:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1796:	6823      	ldr	r3, [r4, #0]
    1798:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    179a:	2b3f      	cmp	r3, #63	; 0x3f
    179c:	d06d      	beq.n	187a <system_clock_init+0x1a2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    179e:	a805      	add	r0, sp, #20
    17a0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    17a2:	4b3f      	ldr	r3, [pc, #252]	; (18a0 <system_clock_init+0x1c8>)
    17a4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    17a6:	2303      	movs	r3, #3
    17a8:	4699      	mov	r9, r3
    17aa:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    17ac:	231f      	movs	r3, #31
    17ae:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    17b0:	4b3c      	ldr	r3, [pc, #240]	; (18a4 <system_clock_init+0x1cc>)
    17b2:	4798      	blx	r3
	config->run_in_standby  = false;
    17b4:	a804      	add	r0, sp, #16
    17b6:	2500      	movs	r5, #0
    17b8:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17ba:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    17bc:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17be:	4b3a      	ldr	r3, [pc, #232]	; (18a8 <system_clock_init+0x1d0>)
    17c0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17c2:	2006      	movs	r0, #6
    17c4:	4b32      	ldr	r3, [pc, #200]	; (1890 <system_clock_init+0x1b8>)
    17c6:	469a      	mov	sl, r3
    17c8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17ca:	4b38      	ldr	r3, [pc, #224]	; (18ac <system_clock_init+0x1d4>)
    17cc:	4798      	blx	r3
	config->high_when_disabled = false;
    17ce:	ac01      	add	r4, sp, #4
    17d0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    17d2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    17d4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    17d6:	2305      	movs	r3, #5
    17d8:	7023      	strb	r3, [r4, #0]
    17da:	331b      	adds	r3, #27
    17dc:	4698      	mov	r8, r3
    17de:	6063      	str	r3, [r4, #4]
    17e0:	0021      	movs	r1, r4
    17e2:	2001      	movs	r0, #1
    17e4:	4f32      	ldr	r7, [pc, #200]	; (18b0 <system_clock_init+0x1d8>)
    17e6:	47b8      	blx	r7
    17e8:	2001      	movs	r0, #1
    17ea:	4e32      	ldr	r6, [pc, #200]	; (18b4 <system_clock_init+0x1dc>)
    17ec:	47b0      	blx	r6
	config->high_when_disabled = false;
    17ee:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    17f0:	7265      	strb	r5, [r4, #9]
    17f2:	2304      	movs	r3, #4
    17f4:	7023      	strb	r3, [r4, #0]
    17f6:	4643      	mov	r3, r8
    17f8:	6063      	str	r3, [r4, #4]
    17fa:	3b1f      	subs	r3, #31
    17fc:	469b      	mov	fp, r3
    17fe:	7223      	strb	r3, [r4, #8]
    1800:	0021      	movs	r1, r4
    1802:	2002      	movs	r0, #2
    1804:	47b8      	blx	r7
    1806:	2002      	movs	r0, #2
    1808:	47b0      	blx	r6
	config->high_when_disabled = false;
    180a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    180c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    180e:	7265      	strb	r5, [r4, #9]
    1810:	464b      	mov	r3, r9
    1812:	7023      	strb	r3, [r4, #0]
    1814:	4643      	mov	r3, r8
    1816:	6063      	str	r3, [r4, #4]
    1818:	0021      	movs	r1, r4
    181a:	2004      	movs	r0, #4
    181c:	47b8      	blx	r7
    181e:	2004      	movs	r0, #4
    1820:	47b0      	blx	r6
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1822:	465b      	mov	r3, fp
    1824:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1826:	0021      	movs	r1, r4
    1828:	2000      	movs	r0, #0
    182a:	4b17      	ldr	r3, [pc, #92]	; (1888 <system_clock_init+0x1b0>)
    182c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    182e:	2000      	movs	r0, #0
    1830:	4b21      	ldr	r3, [pc, #132]	; (18b8 <system_clock_init+0x1e0>)
    1832:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1834:	2007      	movs	r0, #7
    1836:	47d0      	blx	sl
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1838:	4911      	ldr	r1, [pc, #68]	; (1880 <system_clock_init+0x1a8>)
    183a:	22d0      	movs	r2, #208	; 0xd0
    183c:	68cb      	ldr	r3, [r1, #12]
    183e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1840:	2bd0      	cmp	r3, #208	; 0xd0
    1842:	d1fb      	bne.n	183c <system_clock_init+0x164>
	PM->CPUSEL.reg = (uint32_t)divider;
    1844:	4a1d      	ldr	r2, [pc, #116]	; (18bc <system_clock_init+0x1e4>)
    1846:	2300      	movs	r3, #0
    1848:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    184a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    184c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    184e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1850:	a901      	add	r1, sp, #4
    1852:	2201      	movs	r2, #1
    1854:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1856:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1858:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    185a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    185c:	3307      	adds	r3, #7
    185e:	700b      	strb	r3, [r1, #0]
    1860:	2000      	movs	r0, #0
    1862:	4b13      	ldr	r3, [pc, #76]	; (18b0 <system_clock_init+0x1d8>)
    1864:	4798      	blx	r3
    1866:	2000      	movs	r0, #0
    1868:	4b12      	ldr	r3, [pc, #72]	; (18b4 <system_clock_init+0x1dc>)
    186a:	4798      	blx	r3
#endif
}
    186c:	b011      	add	sp, #68	; 0x44
    186e:	bc3c      	pop	{r2, r3, r4, r5}
    1870:	4690      	mov	r8, r2
    1872:	4699      	mov	r9, r3
    1874:	46a2      	mov	sl, r4
    1876:	46ab      	mov	fp, r5
    1878:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    187a:	3b20      	subs	r3, #32
    187c:	e78f      	b.n	179e <system_clock_init+0xc6>
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	40000800 	.word	0x40000800
    1884:	41004000 	.word	0x41004000
    1888:	00001af9 	.word	0x00001af9
    188c:	000014f9 	.word	0x000014f9
    1890:	00001631 	.word	0x00001631
    1894:	00806024 	.word	0x00806024
    1898:	ff80ffff 	.word	0xff80ffff
    189c:	0000147d 	.word	0x0000147d
    18a0:	ffffb71b 	.word	0xffffb71b
    18a4:	000015b1 	.word	0x000015b1
    18a8:	00001441 	.word	0x00001441
    18ac:	000018c1 	.word	0x000018c1
    18b0:	000018e5 	.word	0x000018e5
    18b4:	0000199d 	.word	0x0000199d
    18b8:	00001a6d 	.word	0x00001a6d
    18bc:	40000400 	.word	0x40000400

000018c0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    18c0:	4a06      	ldr	r2, [pc, #24]	; (18dc <system_gclk_init+0x1c>)
    18c2:	6993      	ldr	r3, [r2, #24]
    18c4:	2108      	movs	r1, #8
    18c6:	430b      	orrs	r3, r1
    18c8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    18ca:	2201      	movs	r2, #1
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <system_gclk_init+0x20>)
    18ce:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18d0:	0019      	movs	r1, r3
    18d2:	780b      	ldrb	r3, [r1, #0]
    18d4:	4213      	tst	r3, r2
    18d6:	d1fc      	bne.n	18d2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    18d8:	4770      	bx	lr
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	40000400 	.word	0x40000400
    18e0:	40000c00 	.word	0x40000c00

000018e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18e4:	b570      	push	{r4, r5, r6, lr}
    18e6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18e8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18ea:	780d      	ldrb	r5, [r1, #0]
    18ec:	022d      	lsls	r5, r5, #8
    18ee:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18f0:	784b      	ldrb	r3, [r1, #1]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d002      	beq.n	18fc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18f6:	2380      	movs	r3, #128	; 0x80
    18f8:	02db      	lsls	r3, r3, #11
    18fa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    18fc:	7a4b      	ldrb	r3, [r1, #9]
    18fe:	2b00      	cmp	r3, #0
    1900:	d002      	beq.n	1908 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1902:	2380      	movs	r3, #128	; 0x80
    1904:	031b      	lsls	r3, r3, #12
    1906:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1908:	6848      	ldr	r0, [r1, #4]
    190a:	2801      	cmp	r0, #1
    190c:	d910      	bls.n	1930 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    190e:	1e43      	subs	r3, r0, #1
    1910:	4218      	tst	r0, r3
    1912:	d134      	bne.n	197e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1914:	2802      	cmp	r0, #2
    1916:	d930      	bls.n	197a <system_gclk_gen_set_config+0x96>
    1918:	2302      	movs	r3, #2
    191a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    191c:	3201      	adds	r2, #1
						mask <<= 1) {
    191e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1920:	4298      	cmp	r0, r3
    1922:	d8fb      	bhi.n	191c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1924:	0212      	lsls	r2, r2, #8
    1926:	4332      	orrs	r2, r6
    1928:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    192a:	2380      	movs	r3, #128	; 0x80
    192c:	035b      	lsls	r3, r3, #13
    192e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1930:	7a0b      	ldrb	r3, [r1, #8]
    1932:	2b00      	cmp	r3, #0
    1934:	d002      	beq.n	193c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1936:	2380      	movs	r3, #128	; 0x80
    1938:	039b      	lsls	r3, r3, #14
    193a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    193c:	4a13      	ldr	r2, [pc, #76]	; (198c <system_gclk_gen_set_config+0xa8>)
    193e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1940:	b25b      	sxtb	r3, r3
    1942:	2b00      	cmp	r3, #0
    1944:	dbfb      	blt.n	193e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1946:	4b12      	ldr	r3, [pc, #72]	; (1990 <system_gclk_gen_set_config+0xac>)
    1948:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    194a:	4b12      	ldr	r3, [pc, #72]	; (1994 <system_gclk_gen_set_config+0xb0>)
    194c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    194e:	4a0f      	ldr	r2, [pc, #60]	; (198c <system_gclk_gen_set_config+0xa8>)
    1950:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1952:	b25b      	sxtb	r3, r3
    1954:	2b00      	cmp	r3, #0
    1956:	dbfb      	blt.n	1950 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1958:	4b0c      	ldr	r3, [pc, #48]	; (198c <system_gclk_gen_set_config+0xa8>)
    195a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    195c:	001a      	movs	r2, r3
    195e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1960:	b25b      	sxtb	r3, r3
    1962:	2b00      	cmp	r3, #0
    1964:	dbfb      	blt.n	195e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1966:	4a09      	ldr	r2, [pc, #36]	; (198c <system_gclk_gen_set_config+0xa8>)
    1968:	6853      	ldr	r3, [r2, #4]
    196a:	2180      	movs	r1, #128	; 0x80
    196c:	0249      	lsls	r1, r1, #9
    196e:	400b      	ands	r3, r1
    1970:	431d      	orrs	r5, r3
    1972:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1974:	4b08      	ldr	r3, [pc, #32]	; (1998 <system_gclk_gen_set_config+0xb4>)
    1976:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1978:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    197a:	2200      	movs	r2, #0
    197c:	e7d2      	b.n	1924 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    197e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1980:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1982:	2380      	movs	r3, #128	; 0x80
    1984:	029b      	lsls	r3, r3, #10
    1986:	431d      	orrs	r5, r3
    1988:	e7d2      	b.n	1930 <system_gclk_gen_set_config+0x4c>
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	40000c00 	.word	0x40000c00
    1990:	000001ad 	.word	0x000001ad
    1994:	40000c08 	.word	0x40000c08
    1998:	000001ed 	.word	0x000001ed

0000199c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    199c:	b510      	push	{r4, lr}
    199e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19a0:	4a0b      	ldr	r2, [pc, #44]	; (19d0 <system_gclk_gen_enable+0x34>)
    19a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19a4:	b25b      	sxtb	r3, r3
    19a6:	2b00      	cmp	r3, #0
    19a8:	dbfb      	blt.n	19a2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    19aa:	4b0a      	ldr	r3, [pc, #40]	; (19d4 <system_gclk_gen_enable+0x38>)
    19ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19ae:	4b0a      	ldr	r3, [pc, #40]	; (19d8 <system_gclk_gen_enable+0x3c>)
    19b0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19b2:	4a07      	ldr	r2, [pc, #28]	; (19d0 <system_gclk_gen_enable+0x34>)
    19b4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19b6:	b25b      	sxtb	r3, r3
    19b8:	2b00      	cmp	r3, #0
    19ba:	dbfb      	blt.n	19b4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    19bc:	4a04      	ldr	r2, [pc, #16]	; (19d0 <system_gclk_gen_enable+0x34>)
    19be:	6851      	ldr	r1, [r2, #4]
    19c0:	2380      	movs	r3, #128	; 0x80
    19c2:	025b      	lsls	r3, r3, #9
    19c4:	430b      	orrs	r3, r1
    19c6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <system_gclk_gen_enable+0x40>)
    19ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19cc:	bd10      	pop	{r4, pc}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	40000c00 	.word	0x40000c00
    19d4:	000001ad 	.word	0x000001ad
    19d8:	40000c04 	.word	0x40000c04
    19dc:	000001ed 	.word	0x000001ed

000019e0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19e0:	b570      	push	{r4, r5, r6, lr}
    19e2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19e4:	4a1a      	ldr	r2, [pc, #104]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    19e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19e8:	b25b      	sxtb	r3, r3
    19ea:	2b00      	cmp	r3, #0
    19ec:	dbfb      	blt.n	19e6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    19ee:	4b19      	ldr	r3, [pc, #100]	; (1a54 <system_gclk_gen_get_hz+0x74>)
    19f0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19f2:	4b19      	ldr	r3, [pc, #100]	; (1a58 <system_gclk_gen_get_hz+0x78>)
    19f4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19f6:	4a16      	ldr	r2, [pc, #88]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    19f8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19fa:	b25b      	sxtb	r3, r3
    19fc:	2b00      	cmp	r3, #0
    19fe:	dbfb      	blt.n	19f8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a00:	4e13      	ldr	r6, [pc, #76]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    1a02:	6870      	ldr	r0, [r6, #4]
    1a04:	04c0      	lsls	r0, r0, #19
    1a06:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a08:	4b14      	ldr	r3, [pc, #80]	; (1a5c <system_gclk_gen_get_hz+0x7c>)
    1a0a:	4798      	blx	r3
    1a0c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a0e:	4b12      	ldr	r3, [pc, #72]	; (1a58 <system_gclk_gen_get_hz+0x78>)
    1a10:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a12:	6876      	ldr	r6, [r6, #4]
    1a14:	02f6      	lsls	r6, r6, #11
    1a16:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a18:	4b11      	ldr	r3, [pc, #68]	; (1a60 <system_gclk_gen_get_hz+0x80>)
    1a1a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a1c:	4a0c      	ldr	r2, [pc, #48]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    1a1e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a20:	b25b      	sxtb	r3, r3
    1a22:	2b00      	cmp	r3, #0
    1a24:	dbfb      	blt.n	1a1e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a26:	4b0a      	ldr	r3, [pc, #40]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    1a28:	689c      	ldr	r4, [r3, #8]
    1a2a:	0224      	lsls	r4, r4, #8
    1a2c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1a2e:	4b0d      	ldr	r3, [pc, #52]	; (1a64 <system_gclk_gen_get_hz+0x84>)
    1a30:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a32:	2e00      	cmp	r6, #0
    1a34:	d107      	bne.n	1a46 <system_gclk_gen_get_hz+0x66>
    1a36:	2c01      	cmp	r4, #1
    1a38:	d907      	bls.n	1a4a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1a3a:	0021      	movs	r1, r4
    1a3c:	0028      	movs	r0, r5
    1a3e:	4b0a      	ldr	r3, [pc, #40]	; (1a68 <system_gclk_gen_get_hz+0x88>)
    1a40:	4798      	blx	r3
    1a42:	0005      	movs	r5, r0
    1a44:	e001      	b.n	1a4a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1a46:	3401      	adds	r4, #1
    1a48:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1a4a:	0028      	movs	r0, r5
    1a4c:	bd70      	pop	{r4, r5, r6, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	40000c00 	.word	0x40000c00
    1a54:	000001ad 	.word	0x000001ad
    1a58:	40000c04 	.word	0x40000c04
    1a5c:	000013ad 	.word	0x000013ad
    1a60:	40000c08 	.word	0x40000c08
    1a64:	000001ed 	.word	0x000001ed
    1a68:	00008f89 	.word	0x00008f89

00001a6c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a6c:	b510      	push	{r4, lr}
    1a6e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a70:	4b06      	ldr	r3, [pc, #24]	; (1a8c <system_gclk_chan_enable+0x20>)
    1a72:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a74:	4b06      	ldr	r3, [pc, #24]	; (1a90 <system_gclk_chan_enable+0x24>)
    1a76:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a78:	4a06      	ldr	r2, [pc, #24]	; (1a94 <system_gclk_chan_enable+0x28>)
    1a7a:	8853      	ldrh	r3, [r2, #2]
    1a7c:	2180      	movs	r1, #128	; 0x80
    1a7e:	01c9      	lsls	r1, r1, #7
    1a80:	430b      	orrs	r3, r1
    1a82:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a84:	4b04      	ldr	r3, [pc, #16]	; (1a98 <system_gclk_chan_enable+0x2c>)
    1a86:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a88:	bd10      	pop	{r4, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	000001ad 	.word	0x000001ad
    1a90:	40000c02 	.word	0x40000c02
    1a94:	40000c00 	.word	0x40000c00
    1a98:	000001ed 	.word	0x000001ed

00001a9c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a9c:	b510      	push	{r4, lr}
    1a9e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1aa0:	4b0f      	ldr	r3, [pc, #60]	; (1ae0 <system_gclk_chan_disable+0x44>)
    1aa2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1aa4:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <system_gclk_chan_disable+0x48>)
    1aa6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1aa8:	4a0f      	ldr	r2, [pc, #60]	; (1ae8 <system_gclk_chan_disable+0x4c>)
    1aaa:	8853      	ldrh	r3, [r2, #2]
    1aac:	051b      	lsls	r3, r3, #20
    1aae:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ab0:	8853      	ldrh	r3, [r2, #2]
    1ab2:	490e      	ldr	r1, [pc, #56]	; (1aec <system_gclk_chan_disable+0x50>)
    1ab4:	400b      	ands	r3, r1
    1ab6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1ab8:	8853      	ldrh	r3, [r2, #2]
    1aba:	490d      	ldr	r1, [pc, #52]	; (1af0 <system_gclk_chan_disable+0x54>)
    1abc:	400b      	ands	r3, r1
    1abe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ac0:	0011      	movs	r1, r2
    1ac2:	2280      	movs	r2, #128	; 0x80
    1ac4:	01d2      	lsls	r2, r2, #7
    1ac6:	884b      	ldrh	r3, [r1, #2]
    1ac8:	4213      	tst	r3, r2
    1aca:	d1fc      	bne.n	1ac6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1acc:	4906      	ldr	r1, [pc, #24]	; (1ae8 <system_gclk_chan_disable+0x4c>)
    1ace:	884a      	ldrh	r2, [r1, #2]
    1ad0:	0203      	lsls	r3, r0, #8
    1ad2:	4806      	ldr	r0, [pc, #24]	; (1aec <system_gclk_chan_disable+0x50>)
    1ad4:	4002      	ands	r2, r0
    1ad6:	4313      	orrs	r3, r2
    1ad8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1ada:	4b06      	ldr	r3, [pc, #24]	; (1af4 <system_gclk_chan_disable+0x58>)
    1adc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ade:	bd10      	pop	{r4, pc}
    1ae0:	000001ad 	.word	0x000001ad
    1ae4:	40000c02 	.word	0x40000c02
    1ae8:	40000c00 	.word	0x40000c00
    1aec:	fffff0ff 	.word	0xfffff0ff
    1af0:	ffffbfff 	.word	0xffffbfff
    1af4:	000001ed 	.word	0x000001ed

00001af8 <system_gclk_chan_set_config>:
{
    1af8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1afa:	780c      	ldrb	r4, [r1, #0]
    1afc:	0224      	lsls	r4, r4, #8
    1afe:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1b00:	4b02      	ldr	r3, [pc, #8]	; (1b0c <system_gclk_chan_set_config+0x14>)
    1b02:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b04:	b2a4      	uxth	r4, r4
    1b06:	4b02      	ldr	r3, [pc, #8]	; (1b10 <system_gclk_chan_set_config+0x18>)
    1b08:	805c      	strh	r4, [r3, #2]
}
    1b0a:	bd10      	pop	{r4, pc}
    1b0c:	00001a9d 	.word	0x00001a9d
    1b10:	40000c00 	.word	0x40000c00

00001b14 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1b14:	b510      	push	{r4, lr}
    1b16:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b18:	4b06      	ldr	r3, [pc, #24]	; (1b34 <system_gclk_chan_get_hz+0x20>)
    1b1a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b1c:	4b06      	ldr	r3, [pc, #24]	; (1b38 <system_gclk_chan_get_hz+0x24>)
    1b1e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1b20:	4b06      	ldr	r3, [pc, #24]	; (1b3c <system_gclk_chan_get_hz+0x28>)
    1b22:	885c      	ldrh	r4, [r3, #2]
    1b24:	0524      	lsls	r4, r4, #20
    1b26:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1b28:	4b05      	ldr	r3, [pc, #20]	; (1b40 <system_gclk_chan_get_hz+0x2c>)
    1b2a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b2c:	0020      	movs	r0, r4
    1b2e:	4b05      	ldr	r3, [pc, #20]	; (1b44 <system_gclk_chan_get_hz+0x30>)
    1b30:	4798      	blx	r3
}
    1b32:	bd10      	pop	{r4, pc}
    1b34:	000001ad 	.word	0x000001ad
    1b38:	40000c02 	.word	0x40000c02
    1b3c:	40000c00 	.word	0x40000c00
    1b40:	000001ed 	.word	0x000001ed
    1b44:	000019e1 	.word	0x000019e1

00001b48 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1b48:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b4a:	78d3      	ldrb	r3, [r2, #3]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d135      	bne.n	1bbc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b50:	7813      	ldrb	r3, [r2, #0]
    1b52:	2b80      	cmp	r3, #128	; 0x80
    1b54:	d029      	beq.n	1baa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b56:	061b      	lsls	r3, r3, #24
    1b58:	2480      	movs	r4, #128	; 0x80
    1b5a:	0264      	lsls	r4, r4, #9
    1b5c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b5e:	7854      	ldrb	r4, [r2, #1]
    1b60:	2502      	movs	r5, #2
    1b62:	43ac      	bics	r4, r5
    1b64:	d106      	bne.n	1b74 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b66:	7894      	ldrb	r4, [r2, #2]
    1b68:	2c00      	cmp	r4, #0
    1b6a:	d120      	bne.n	1bae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b6c:	2480      	movs	r4, #128	; 0x80
    1b6e:	02a4      	lsls	r4, r4, #10
    1b70:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b72:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b74:	7854      	ldrb	r4, [r2, #1]
    1b76:	3c01      	subs	r4, #1
    1b78:	2c01      	cmp	r4, #1
    1b7a:	d91c      	bls.n	1bb6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b7c:	040d      	lsls	r5, r1, #16
    1b7e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b80:	24a0      	movs	r4, #160	; 0xa0
    1b82:	05e4      	lsls	r4, r4, #23
    1b84:	432c      	orrs	r4, r5
    1b86:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b88:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b8a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b8c:	24d0      	movs	r4, #208	; 0xd0
    1b8e:	0624      	lsls	r4, r4, #24
    1b90:	432c      	orrs	r4, r5
    1b92:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b94:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b96:	78d4      	ldrb	r4, [r2, #3]
    1b98:	2c00      	cmp	r4, #0
    1b9a:	d122      	bne.n	1be2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b9c:	035b      	lsls	r3, r3, #13
    1b9e:	d51c      	bpl.n	1bda <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ba0:	7893      	ldrb	r3, [r2, #2]
    1ba2:	2b01      	cmp	r3, #1
    1ba4:	d01e      	beq.n	1be4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1ba6:	6141      	str	r1, [r0, #20]
    1ba8:	e017      	b.n	1bda <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1baa:	2300      	movs	r3, #0
    1bac:	e7d7      	b.n	1b5e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1bae:	24c0      	movs	r4, #192	; 0xc0
    1bb0:	02e4      	lsls	r4, r4, #11
    1bb2:	4323      	orrs	r3, r4
    1bb4:	e7dd      	b.n	1b72 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1bb6:	4c0d      	ldr	r4, [pc, #52]	; (1bec <_system_pinmux_config+0xa4>)
    1bb8:	4023      	ands	r3, r4
    1bba:	e7df      	b.n	1b7c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1bbc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1bbe:	040c      	lsls	r4, r1, #16
    1bc0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1bc2:	23a0      	movs	r3, #160	; 0xa0
    1bc4:	05db      	lsls	r3, r3, #23
    1bc6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bc8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1bca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1bcc:	23d0      	movs	r3, #208	; 0xd0
    1bce:	061b      	lsls	r3, r3, #24
    1bd0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bd2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1bd4:	78d3      	ldrb	r3, [r2, #3]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d103      	bne.n	1be2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1bda:	7853      	ldrb	r3, [r2, #1]
    1bdc:	3b01      	subs	r3, #1
    1bde:	2b01      	cmp	r3, #1
    1be0:	d902      	bls.n	1be8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1be2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1be4:	6181      	str	r1, [r0, #24]
    1be6:	e7f8      	b.n	1bda <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1be8:	6081      	str	r1, [r0, #8]
}
    1bea:	e7fa      	b.n	1be2 <_system_pinmux_config+0x9a>
    1bec:	fffbffff 	.word	0xfffbffff

00001bf0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1bf0:	b510      	push	{r4, lr}
    1bf2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1bf4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1bf6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1bf8:	2900      	cmp	r1, #0
    1bfa:	d104      	bne.n	1c06 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1bfc:	0943      	lsrs	r3, r0, #5
    1bfe:	01db      	lsls	r3, r3, #7
    1c00:	4905      	ldr	r1, [pc, #20]	; (1c18 <system_pinmux_pin_set_config+0x28>)
    1c02:	468c      	mov	ip, r1
    1c04:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1c06:	241f      	movs	r4, #31
    1c08:	4020      	ands	r0, r4
    1c0a:	2101      	movs	r1, #1
    1c0c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1c0e:	0018      	movs	r0, r3
    1c10:	4b02      	ldr	r3, [pc, #8]	; (1c1c <system_pinmux_pin_set_config+0x2c>)
    1c12:	4798      	blx	r3
}
    1c14:	bd10      	pop	{r4, pc}
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	41004400 	.word	0x41004400
    1c1c:	00001b49 	.word	0x00001b49

00001c20 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1c20:	4770      	bx	lr
	...

00001c24 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1c24:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1c26:	4b05      	ldr	r3, [pc, #20]	; (1c3c <system_init+0x18>)
    1c28:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1c2a:	4b05      	ldr	r3, [pc, #20]	; (1c40 <system_init+0x1c>)
    1c2c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c2e:	4b05      	ldr	r3, [pc, #20]	; (1c44 <system_init+0x20>)
    1c30:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c32:	4b05      	ldr	r3, [pc, #20]	; (1c48 <system_init+0x24>)
    1c34:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <system_init+0x28>)
    1c38:	4798      	blx	r3
}
    1c3a:	bd10      	pop	{r4, pc}
    1c3c:	000016d9 	.word	0x000016d9
    1c40:	0000021d 	.word	0x0000021d
    1c44:	00001c21 	.word	0x00001c21
    1c48:	000003c9 	.word	0x000003c9
    1c4c:	00001c21 	.word	0x00001c21

00001c50 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1c50:	1c93      	adds	r3, r2, #2
    1c52:	009b      	lsls	r3, r3, #2
    1c54:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1c56:	2a02      	cmp	r2, #2
    1c58:	d009      	beq.n	1c6e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1c5a:	2a03      	cmp	r2, #3
    1c5c:	d00c      	beq.n	1c78 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1c5e:	2301      	movs	r3, #1
    1c60:	4093      	lsls	r3, r2
    1c62:	001a      	movs	r2, r3
    1c64:	7e03      	ldrb	r3, [r0, #24]
    1c66:	4313      	orrs	r3, r2
    1c68:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1c6a:	2000      	movs	r0, #0
    1c6c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1c6e:	7e03      	ldrb	r3, [r0, #24]
    1c70:	2210      	movs	r2, #16
    1c72:	4313      	orrs	r3, r2
    1c74:	7603      	strb	r3, [r0, #24]
    1c76:	e7f8      	b.n	1c6a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1c78:	7e03      	ldrb	r3, [r0, #24]
    1c7a:	2220      	movs	r2, #32
    1c7c:	4313      	orrs	r3, r2
    1c7e:	7603      	strb	r3, [r0, #24]
    1c80:	e7f3      	b.n	1c6a <tc_register_callback+0x1a>
	...

00001c84 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1c84:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1c86:	0080      	lsls	r0, r0, #2
    1c88:	4b16      	ldr	r3, [pc, #88]	; (1ce4 <_tc_interrupt_handler+0x60>)
    1c8a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c8c:	6823      	ldr	r3, [r4, #0]
    1c8e:	7b9d      	ldrb	r5, [r3, #14]
    1c90:	7e22      	ldrb	r2, [r4, #24]
    1c92:	7e63      	ldrb	r3, [r4, #25]
    1c94:	4013      	ands	r3, r2
    1c96:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c98:	07eb      	lsls	r3, r5, #31
    1c9a:	d406      	bmi.n	1caa <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1c9c:	07ab      	lsls	r3, r5, #30
    1c9e:	d40b      	bmi.n	1cb8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1ca0:	06eb      	lsls	r3, r5, #27
    1ca2:	d410      	bmi.n	1cc6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1ca4:	06ab      	lsls	r3, r5, #26
    1ca6:	d415      	bmi.n	1cd4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1ca8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1caa:	0020      	movs	r0, r4
    1cac:	68a3      	ldr	r3, [r4, #8]
    1cae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1cb0:	2301      	movs	r3, #1
    1cb2:	6822      	ldr	r2, [r4, #0]
    1cb4:	7393      	strb	r3, [r2, #14]
    1cb6:	e7f1      	b.n	1c9c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1cb8:	0020      	movs	r0, r4
    1cba:	68e3      	ldr	r3, [r4, #12]
    1cbc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1cbe:	2302      	movs	r3, #2
    1cc0:	6822      	ldr	r2, [r4, #0]
    1cc2:	7393      	strb	r3, [r2, #14]
    1cc4:	e7ec      	b.n	1ca0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1cc6:	0020      	movs	r0, r4
    1cc8:	6923      	ldr	r3, [r4, #16]
    1cca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1ccc:	2310      	movs	r3, #16
    1cce:	6822      	ldr	r2, [r4, #0]
    1cd0:	7393      	strb	r3, [r2, #14]
    1cd2:	e7e7      	b.n	1ca4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1cd4:	0020      	movs	r0, r4
    1cd6:	6963      	ldr	r3, [r4, #20]
    1cd8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1cda:	6823      	ldr	r3, [r4, #0]
    1cdc:	2220      	movs	r2, #32
    1cde:	739a      	strb	r2, [r3, #14]
}
    1ce0:	e7e2      	b.n	1ca8 <_tc_interrupt_handler+0x24>
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	20000458 	.word	0x20000458

00001ce8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1ce8:	b510      	push	{r4, lr}
    1cea:	2000      	movs	r0, #0
    1cec:	4b01      	ldr	r3, [pc, #4]	; (1cf4 <TC3_Handler+0xc>)
    1cee:	4798      	blx	r3
    1cf0:	bd10      	pop	{r4, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	00001c85 	.word	0x00001c85

00001cf8 <TC4_Handler>:
    1cf8:	b510      	push	{r4, lr}
    1cfa:	2001      	movs	r0, #1
    1cfc:	4b01      	ldr	r3, [pc, #4]	; (1d04 <TC4_Handler+0xc>)
    1cfe:	4798      	blx	r3
    1d00:	bd10      	pop	{r4, pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	00001c85 	.word	0x00001c85

00001d08 <TC5_Handler>:
    1d08:	b510      	push	{r4, lr}
    1d0a:	2002      	movs	r0, #2
    1d0c:	4b01      	ldr	r3, [pc, #4]	; (1d14 <TC5_Handler+0xc>)
    1d0e:	4798      	blx	r3
    1d10:	bd10      	pop	{r4, pc}
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	00001c85 	.word	0x00001c85

00001d18 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1d18:	b530      	push	{r4, r5, lr}
    1d1a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1d1c:	aa01      	add	r2, sp, #4
    1d1e:	4b0b      	ldr	r3, [pc, #44]	; (1d4c <_tc_get_inst_index+0x34>)
    1d20:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d22:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1d24:	9b01      	ldr	r3, [sp, #4]
    1d26:	4298      	cmp	r0, r3
    1d28:	d00d      	beq.n	1d46 <_tc_get_inst_index+0x2e>
    1d2a:	9b02      	ldr	r3, [sp, #8]
    1d2c:	4298      	cmp	r0, r3
    1d2e:	d008      	beq.n	1d42 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1d30:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1d32:	9a03      	ldr	r2, [sp, #12]
    1d34:	4282      	cmp	r2, r0
    1d36:	d002      	beq.n	1d3e <_tc_get_inst_index+0x26>
}
    1d38:	0018      	movs	r0, r3
    1d3a:	b005      	add	sp, #20
    1d3c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d3e:	3302      	adds	r3, #2
    1d40:	e002      	b.n	1d48 <_tc_get_inst_index+0x30>
    1d42:	2301      	movs	r3, #1
    1d44:	e000      	b.n	1d48 <_tc_get_inst_index+0x30>
    1d46:	2300      	movs	r3, #0
			return i;
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	e7f5      	b.n	1d38 <_tc_get_inst_index+0x20>
    1d4c:	0000a79c 	.word	0x0000a79c

00001d50 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d52:	b087      	sub	sp, #28
    1d54:	0004      	movs	r4, r0
    1d56:	000d      	movs	r5, r1
    1d58:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1d5a:	0008      	movs	r0, r1
    1d5c:	4b85      	ldr	r3, [pc, #532]	; (1f74 <tc_init+0x224>)
    1d5e:	4798      	blx	r3
    1d60:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1d62:	ab05      	add	r3, sp, #20
    1d64:	221b      	movs	r2, #27
    1d66:	701a      	strb	r2, [r3, #0]
    1d68:	3201      	adds	r2, #1
    1d6a:	705a      	strb	r2, [r3, #1]
    1d6c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1d6e:	ab03      	add	r3, sp, #12
    1d70:	2280      	movs	r2, #128	; 0x80
    1d72:	0112      	lsls	r2, r2, #4
    1d74:	801a      	strh	r2, [r3, #0]
    1d76:	2280      	movs	r2, #128	; 0x80
    1d78:	0152      	lsls	r2, r2, #5
    1d7a:	805a      	strh	r2, [r3, #2]
    1d7c:	2280      	movs	r2, #128	; 0x80
    1d7e:	0192      	lsls	r2, r2, #6
    1d80:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1d82:	2300      	movs	r3, #0
    1d84:	60a3      	str	r3, [r4, #8]
    1d86:	60e3      	str	r3, [r4, #12]
    1d88:	6123      	str	r3, [r4, #16]
    1d8a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1d8c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1d8e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1d90:	0082      	lsls	r2, r0, #2
    1d92:	4b79      	ldr	r3, [pc, #484]	; (1f78 <tc_init+0x228>)
    1d94:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1d96:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d98:	78b3      	ldrb	r3, [r6, #2]
    1d9a:	2b08      	cmp	r3, #8
    1d9c:	d006      	beq.n	1dac <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1d9e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1da0:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1da2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1da4:	07db      	lsls	r3, r3, #31
    1da6:	d505      	bpl.n	1db4 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1da8:	b007      	add	sp, #28
    1daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1dac:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1dae:	07fa      	lsls	r2, r7, #31
    1db0:	d5fa      	bpl.n	1da8 <tc_init+0x58>
    1db2:	e7f4      	b.n	1d9e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1db4:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1db6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1db8:	06db      	lsls	r3, r3, #27
    1dba:	d4f5      	bmi.n	1da8 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1dbc:	882b      	ldrh	r3, [r5, #0]
    1dbe:	079b      	lsls	r3, r3, #30
    1dc0:	d4f2      	bmi.n	1da8 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1dc2:	7c33      	ldrb	r3, [r6, #16]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d179      	bne.n	1ebc <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    1dc8:	7f33      	ldrb	r3, [r6, #28]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d000      	beq.n	1dd0 <tc_init+0x80>
    1dce:	e081      	b.n	1ed4 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    1dd0:	496a      	ldr	r1, [pc, #424]	; (1f7c <tc_init+0x22c>)
    1dd2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1dd4:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1dd6:	ab03      	add	r3, sp, #12
    1dd8:	5ad3      	ldrh	r3, [r2, r3]
    1dda:	4303      	orrs	r3, r0
    1ddc:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1dde:	78b3      	ldrb	r3, [r6, #2]
    1de0:	2b08      	cmp	r3, #8
    1de2:	d100      	bne.n	1de6 <tc_init+0x96>
    1de4:	e086      	b.n	1ef4 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    1de6:	a901      	add	r1, sp, #4
    1de8:	7833      	ldrb	r3, [r6, #0]
    1dea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1dec:	ab05      	add	r3, sp, #20
    1dee:	5ddf      	ldrb	r7, [r3, r7]
    1df0:	0038      	movs	r0, r7
    1df2:	4b63      	ldr	r3, [pc, #396]	; (1f80 <tc_init+0x230>)
    1df4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1df6:	0038      	movs	r0, r7
    1df8:	4b62      	ldr	r3, [pc, #392]	; (1f84 <tc_init+0x234>)
    1dfa:	4798      	blx	r3
	ctrla_tmp =
    1dfc:	8931      	ldrh	r1, [r6, #8]
    1dfe:	88b3      	ldrh	r3, [r6, #4]
    1e00:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1e02:	78b1      	ldrb	r1, [r6, #2]
    1e04:	79b2      	ldrb	r2, [r6, #6]
    1e06:	4311      	orrs	r1, r2
	ctrla_tmp =
    1e08:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1e0a:	7873      	ldrb	r3, [r6, #1]
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	d002      	beq.n	1e16 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1e10:	2380      	movs	r3, #128	; 0x80
    1e12:	011b      	lsls	r3, r3, #4
    1e14:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e16:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e18:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e1a:	b25b      	sxtb	r3, r3
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	dbfb      	blt.n	1e18 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1e20:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1e22:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1e24:	1e4b      	subs	r3, r1, #1
    1e26:	4199      	sbcs	r1, r3
    1e28:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1e2a:	7bb3      	ldrb	r3, [r6, #14]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d001      	beq.n	1e34 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1e30:	2301      	movs	r3, #1
    1e32:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e34:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e36:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e38:	b25b      	sxtb	r3, r3
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	dbfb      	blt.n	1e36 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1e3e:	23ff      	movs	r3, #255	; 0xff
    1e40:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1e42:	2900      	cmp	r1, #0
    1e44:	d005      	beq.n	1e52 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e46:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e48:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1e4a:	b25b      	sxtb	r3, r3
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	dbfb      	blt.n	1e48 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1e50:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1e52:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1e54:	7af3      	ldrb	r3, [r6, #11]
    1e56:	2b00      	cmp	r3, #0
    1e58:	d001      	beq.n	1e5e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e5a:	2310      	movs	r3, #16
    1e5c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1e5e:	7b33      	ldrb	r3, [r6, #12]
    1e60:	2b00      	cmp	r3, #0
    1e62:	d001      	beq.n	1e68 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e64:	2320      	movs	r3, #32
    1e66:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e68:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e6a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e6c:	b25b      	sxtb	r3, r3
    1e6e:	2b00      	cmp	r3, #0
    1e70:	dbfb      	blt.n	1e6a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1e72:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e74:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e76:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e78:	b25b      	sxtb	r3, r3
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	dbfb      	blt.n	1e76 <tc_init+0x126>
	switch (module_inst->counter_size) {
    1e7e:	7923      	ldrb	r3, [r4, #4]
    1e80:	2b04      	cmp	r3, #4
    1e82:	d03f      	beq.n	1f04 <tc_init+0x1b4>
    1e84:	2b08      	cmp	r3, #8
    1e86:	d05e      	beq.n	1f46 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1e88:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	d000      	beq.n	1e90 <tc_init+0x140>
    1e8e:	e78b      	b.n	1da8 <tc_init+0x58>
    1e90:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e92:	b25b      	sxtb	r3, r3
    1e94:	2b00      	cmp	r3, #0
    1e96:	dbfb      	blt.n	1e90 <tc_init+0x140>
				= config->counter_16_bit.value;
    1e98:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1e9a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e9e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ea0:	b25b      	sxtb	r3, r3
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	dbfb      	blt.n	1e9e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1ea6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1ea8:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1eaa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1eac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1eae:	b25b      	sxtb	r3, r3
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	dbfb      	blt.n	1eac <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1eb4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1eb6:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1eb8:	2000      	movs	r0, #0
    1eba:	e775      	b.n	1da8 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ebc:	a902      	add	r1, sp, #8
    1ebe:	2301      	movs	r3, #1
    1ec0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1ec2:	2200      	movs	r2, #0
    1ec4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1ec6:	7e32      	ldrb	r2, [r6, #24]
    1ec8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1eca:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1ecc:	7d30      	ldrb	r0, [r6, #20]
    1ece:	4b2e      	ldr	r3, [pc, #184]	; (1f88 <tc_init+0x238>)
    1ed0:	4798      	blx	r3
    1ed2:	e779      	b.n	1dc8 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ed4:	a902      	add	r1, sp, #8
    1ed6:	2301      	movs	r3, #1
    1ed8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1eda:	2200      	movs	r2, #0
    1edc:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1ede:	3224      	adds	r2, #36	; 0x24
    1ee0:	18b2      	adds	r2, r6, r2
    1ee2:	7812      	ldrb	r2, [r2, #0]
    1ee4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ee6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1ee8:	331f      	adds	r3, #31
    1eea:	18f3      	adds	r3, r6, r3
    1eec:	7818      	ldrb	r0, [r3, #0]
    1eee:	4b26      	ldr	r3, [pc, #152]	; (1f88 <tc_init+0x238>)
    1ef0:	4798      	blx	r3
    1ef2:	e76d      	b.n	1dd0 <tc_init+0x80>
    1ef4:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1ef6:	1c7a      	adds	r2, r7, #1
    1ef8:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1efa:	ab03      	add	r3, sp, #12
    1efc:	5ad3      	ldrh	r3, [r2, r3]
    1efe:	4303      	orrs	r3, r0
    1f00:	620b      	str	r3, [r1, #32]
    1f02:	e770      	b.n	1de6 <tc_init+0x96>
    1f04:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f06:	b25b      	sxtb	r3, r3
    1f08:	2b00      	cmp	r3, #0
    1f0a:	dbfb      	blt.n	1f04 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1f0c:	2328      	movs	r3, #40	; 0x28
    1f0e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1f10:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f12:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f14:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f16:	b25b      	sxtb	r3, r3
    1f18:	2b00      	cmp	r3, #0
    1f1a:	dbfb      	blt.n	1f14 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1f1c:	2329      	movs	r3, #41	; 0x29
    1f1e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1f20:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f22:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f24:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f26:	b25b      	sxtb	r3, r3
    1f28:	2b00      	cmp	r3, #0
    1f2a:	dbfb      	blt.n	1f24 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1f2c:	232a      	movs	r3, #42	; 0x2a
    1f2e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1f30:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f32:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f34:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f36:	b25b      	sxtb	r3, r3
    1f38:	2b00      	cmp	r3, #0
    1f3a:	dbfb      	blt.n	1f34 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1f3c:	232b      	movs	r3, #43	; 0x2b
    1f3e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1f40:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1f42:	2000      	movs	r0, #0
    1f44:	e730      	b.n	1da8 <tc_init+0x58>
    1f46:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f48:	b25b      	sxtb	r3, r3
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	dbfb      	blt.n	1f46 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1f4e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f50:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f54:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f56:	b25b      	sxtb	r3, r3
    1f58:	2b00      	cmp	r3, #0
    1f5a:	dbfb      	blt.n	1f54 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1f5c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1f5e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f60:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f62:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f64:	b25b      	sxtb	r3, r3
    1f66:	2b00      	cmp	r3, #0
    1f68:	dbfb      	blt.n	1f62 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1f6a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1f6c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1f6e:	2000      	movs	r0, #0
    1f70:	e71a      	b.n	1da8 <tc_init+0x58>
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	00001d19 	.word	0x00001d19
    1f78:	20000458 	.word	0x20000458
    1f7c:	40000400 	.word	0x40000400
    1f80:	00001af9 	.word	0x00001af9
    1f84:	00001a6d 	.word	0x00001a6d
    1f88:	00001bf1 	.word	0x00001bf1

00001f8c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1f8c:	6802      	ldr	r2, [r0, #0]
    1f8e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1f90:	b25b      	sxtb	r3, r3
    1f92:	2b00      	cmp	r3, #0
    1f94:	dbfb      	blt.n	1f8e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1f96:	7903      	ldrb	r3, [r0, #4]
    1f98:	2b04      	cmp	r3, #4
    1f9a:	d005      	beq.n	1fa8 <tc_get_count_value+0x1c>
    1f9c:	2b08      	cmp	r3, #8
    1f9e:	d009      	beq.n	1fb4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1fa0:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d003      	beq.n	1fae <tc_get_count_value+0x22>
}
    1fa6:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1fa8:	7c10      	ldrb	r0, [r2, #16]
    1faa:	b2c0      	uxtb	r0, r0
    1fac:	e7fb      	b.n	1fa6 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1fae:	8a10      	ldrh	r0, [r2, #16]
    1fb0:	b280      	uxth	r0, r0
    1fb2:	e7f8      	b.n	1fa6 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    1fb4:	6910      	ldr	r0, [r2, #16]
    1fb6:	e7f6      	b.n	1fa6 <tc_get_count_value+0x1a>

00001fb8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1fb8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1fba:	6804      	ldr	r4, [r0, #0]
    1fbc:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1fbe:	b25b      	sxtb	r3, r3
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	dbfb      	blt.n	1fbc <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1fc4:	7903      	ldrb	r3, [r0, #4]
    1fc6:	2b04      	cmp	r3, #4
    1fc8:	d005      	beq.n	1fd6 <tc_set_compare_value+0x1e>
    1fca:	2b08      	cmp	r3, #8
    1fcc:	d014      	beq.n	1ff8 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1fce:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d008      	beq.n	1fe6 <tc_set_compare_value+0x2e>
}
    1fd4:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1fd6:	2017      	movs	r0, #23
			if (channel_index <
    1fd8:	2901      	cmp	r1, #1
    1fda:	d8fb      	bhi.n	1fd4 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    1fdc:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1fde:	1861      	adds	r1, r4, r1
    1fe0:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1fe2:	2000      	movs	r0, #0
    1fe4:	e7f6      	b.n	1fd4 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1fe6:	2017      	movs	r0, #23
			if (channel_index <
    1fe8:	2901      	cmp	r1, #1
    1fea:	d8f3      	bhi.n	1fd4 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    1fec:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1fee:	310c      	adds	r1, #12
    1ff0:	0049      	lsls	r1, r1, #1
    1ff2:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    1ff4:	2000      	movs	r0, #0
    1ff6:	e7ed      	b.n	1fd4 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1ff8:	2017      	movs	r0, #23
			if (channel_index <
    1ffa:	2901      	cmp	r1, #1
    1ffc:	d8ea      	bhi.n	1fd4 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    1ffe:	3106      	adds	r1, #6
    2000:	0089      	lsls	r1, r1, #2
    2002:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    2004:	2000      	movs	r0, #0
    2006:	e7e5      	b.n	1fd4 <tc_set_compare_value+0x1c>

00002008 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2008:	e7fe      	b.n	2008 <Dummy_Handler>
	...

0000200c <Reset_Handler>:
{
    200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    200e:	4a2a      	ldr	r2, [pc, #168]	; (20b8 <Reset_Handler+0xac>)
    2010:	4b2a      	ldr	r3, [pc, #168]	; (20bc <Reset_Handler+0xb0>)
    2012:	429a      	cmp	r2, r3
    2014:	d011      	beq.n	203a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2016:	001a      	movs	r2, r3
    2018:	4b29      	ldr	r3, [pc, #164]	; (20c0 <Reset_Handler+0xb4>)
    201a:	429a      	cmp	r2, r3
    201c:	d20d      	bcs.n	203a <Reset_Handler+0x2e>
    201e:	4a29      	ldr	r2, [pc, #164]	; (20c4 <Reset_Handler+0xb8>)
    2020:	3303      	adds	r3, #3
    2022:	1a9b      	subs	r3, r3, r2
    2024:	089b      	lsrs	r3, r3, #2
    2026:	3301      	adds	r3, #1
    2028:	009b      	lsls	r3, r3, #2
    202a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    202c:	4823      	ldr	r0, [pc, #140]	; (20bc <Reset_Handler+0xb0>)
    202e:	4922      	ldr	r1, [pc, #136]	; (20b8 <Reset_Handler+0xac>)
    2030:	588c      	ldr	r4, [r1, r2]
    2032:	5084      	str	r4, [r0, r2]
    2034:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2036:	429a      	cmp	r2, r3
    2038:	d1fa      	bne.n	2030 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    203a:	4a23      	ldr	r2, [pc, #140]	; (20c8 <Reset_Handler+0xbc>)
    203c:	4b23      	ldr	r3, [pc, #140]	; (20cc <Reset_Handler+0xc0>)
    203e:	429a      	cmp	r2, r3
    2040:	d20a      	bcs.n	2058 <Reset_Handler+0x4c>
    2042:	43d3      	mvns	r3, r2
    2044:	4921      	ldr	r1, [pc, #132]	; (20cc <Reset_Handler+0xc0>)
    2046:	185b      	adds	r3, r3, r1
    2048:	2103      	movs	r1, #3
    204a:	438b      	bics	r3, r1
    204c:	3304      	adds	r3, #4
    204e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2050:	2100      	movs	r1, #0
    2052:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2054:	4293      	cmp	r3, r2
    2056:	d1fc      	bne.n	2052 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2058:	4a1d      	ldr	r2, [pc, #116]	; (20d0 <Reset_Handler+0xc4>)
    205a:	21ff      	movs	r1, #255	; 0xff
    205c:	4b1d      	ldr	r3, [pc, #116]	; (20d4 <Reset_Handler+0xc8>)
    205e:	438b      	bics	r3, r1
    2060:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2062:	39fd      	subs	r1, #253	; 0xfd
    2064:	2390      	movs	r3, #144	; 0x90
    2066:	005b      	lsls	r3, r3, #1
    2068:	4a1b      	ldr	r2, [pc, #108]	; (20d8 <Reset_Handler+0xcc>)
    206a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    206c:	4a1b      	ldr	r2, [pc, #108]	; (20dc <Reset_Handler+0xd0>)
    206e:	78d3      	ldrb	r3, [r2, #3]
    2070:	2503      	movs	r5, #3
    2072:	43ab      	bics	r3, r5
    2074:	2402      	movs	r4, #2
    2076:	4323      	orrs	r3, r4
    2078:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    207a:	78d3      	ldrb	r3, [r2, #3]
    207c:	270c      	movs	r7, #12
    207e:	43bb      	bics	r3, r7
    2080:	2608      	movs	r6, #8
    2082:	4333      	orrs	r3, r6
    2084:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2086:	4b16      	ldr	r3, [pc, #88]	; (20e0 <Reset_Handler+0xd4>)
    2088:	7b98      	ldrb	r0, [r3, #14]
    208a:	2230      	movs	r2, #48	; 0x30
    208c:	4390      	bics	r0, r2
    208e:	2220      	movs	r2, #32
    2090:	4310      	orrs	r0, r2
    2092:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2094:	7b99      	ldrb	r1, [r3, #14]
    2096:	43b9      	bics	r1, r7
    2098:	4331      	orrs	r1, r6
    209a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    209c:	7b9a      	ldrb	r2, [r3, #14]
    209e:	43aa      	bics	r2, r5
    20a0:	4322      	orrs	r2, r4
    20a2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    20a4:	4a0f      	ldr	r2, [pc, #60]	; (20e4 <Reset_Handler+0xd8>)
    20a6:	6853      	ldr	r3, [r2, #4]
    20a8:	2180      	movs	r1, #128	; 0x80
    20aa:	430b      	orrs	r3, r1
    20ac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    20ae:	4b0e      	ldr	r3, [pc, #56]	; (20e8 <Reset_Handler+0xdc>)
    20b0:	4798      	blx	r3
        main();
    20b2:	4b0e      	ldr	r3, [pc, #56]	; (20ec <Reset_Handler+0xe0>)
    20b4:	4798      	blx	r3
    20b6:	e7fe      	b.n	20b6 <Reset_Handler+0xaa>
    20b8:	0000a8d8 	.word	0x0000a8d8
    20bc:	20000000 	.word	0x20000000
    20c0:	200000fc 	.word	0x200000fc
    20c4:	20000004 	.word	0x20000004
    20c8:	20000100 	.word	0x20000100
    20cc:	200030d4 	.word	0x200030d4
    20d0:	e000ed00 	.word	0xe000ed00
    20d4:	00000000 	.word	0x00000000
    20d8:	41007000 	.word	0x41007000
    20dc:	41005000 	.word	0x41005000
    20e0:	41004800 	.word	0x41004800
    20e4:	41004000 	.word	0x41004000
    20e8:	000092c9 	.word	0x000092c9
    20ec:	000048c5 	.word	0x000048c5

000020f0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f2:	46c6      	mov	lr, r8
    20f4:	b500      	push	{lr}
    20f6:	000c      	movs	r4, r1
    20f8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    20fa:	2800      	cmp	r0, #0
    20fc:	d10f      	bne.n	211e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    20fe:	2a00      	cmp	r2, #0
    2100:	dd11      	ble.n	2126 <_read+0x36>
    2102:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2104:	4e09      	ldr	r6, [pc, #36]	; (212c <_read+0x3c>)
    2106:	4d0a      	ldr	r5, [pc, #40]	; (2130 <_read+0x40>)
    2108:	6830      	ldr	r0, [r6, #0]
    210a:	0021      	movs	r1, r4
    210c:	682b      	ldr	r3, [r5, #0]
    210e:	4798      	blx	r3
		ptr++;
    2110:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2112:	42bc      	cmp	r4, r7
    2114:	d1f8      	bne.n	2108 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2116:	4640      	mov	r0, r8
    2118:	bc04      	pop	{r2}
    211a:	4690      	mov	r8, r2
    211c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    211e:	2301      	movs	r3, #1
    2120:	425b      	negs	r3, r3
    2122:	4698      	mov	r8, r3
    2124:	e7f7      	b.n	2116 <_read+0x26>
	for (; len > 0; --len) {
    2126:	4680      	mov	r8, r0
    2128:	e7f5      	b.n	2116 <_read+0x26>
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	2000046c 	.word	0x2000046c
    2130:	20000464 	.word	0x20000464

00002134 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2134:	b5f0      	push	{r4, r5, r6, r7, lr}
    2136:	46c6      	mov	lr, r8
    2138:	b500      	push	{lr}
    213a:	000e      	movs	r6, r1
    213c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    213e:	3801      	subs	r0, #1
    2140:	2802      	cmp	r0, #2
    2142:	d810      	bhi.n	2166 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2144:	2a00      	cmp	r2, #0
    2146:	d011      	beq.n	216c <_write+0x38>
    2148:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    214a:	4b0c      	ldr	r3, [pc, #48]	; (217c <_write+0x48>)
    214c:	4698      	mov	r8, r3
    214e:	4f0c      	ldr	r7, [pc, #48]	; (2180 <_write+0x4c>)
    2150:	4643      	mov	r3, r8
    2152:	6818      	ldr	r0, [r3, #0]
    2154:	5d31      	ldrb	r1, [r6, r4]
    2156:	683b      	ldr	r3, [r7, #0]
    2158:	4798      	blx	r3
    215a:	2800      	cmp	r0, #0
    215c:	db08      	blt.n	2170 <_write+0x3c>
			return -1;
		}
		++nChars;
    215e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2160:	42a5      	cmp	r5, r4
    2162:	d1f5      	bne.n	2150 <_write+0x1c>
    2164:	e006      	b.n	2174 <_write+0x40>
		return -1;
    2166:	2401      	movs	r4, #1
    2168:	4264      	negs	r4, r4
    216a:	e003      	b.n	2174 <_write+0x40>
	for (; len != 0; --len) {
    216c:	0014      	movs	r4, r2
    216e:	e001      	b.n	2174 <_write+0x40>
			return -1;
    2170:	2401      	movs	r4, #1
    2172:	4264      	negs	r4, r4
	}
	return nChars;
}
    2174:	0020      	movs	r0, r4
    2176:	bc04      	pop	{r2}
    2178:	4690      	mov	r8, r2
    217a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    217c:	2000046c 	.word	0x2000046c
    2180:	20000468 	.word	0x20000468

00002184 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2184:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2186:	4a06      	ldr	r2, [pc, #24]	; (21a0 <_sbrk+0x1c>)
    2188:	6812      	ldr	r2, [r2, #0]
    218a:	2a00      	cmp	r2, #0
    218c:	d004      	beq.n	2198 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    218e:	4a04      	ldr	r2, [pc, #16]	; (21a0 <_sbrk+0x1c>)
    2190:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2192:	18c3      	adds	r3, r0, r3
    2194:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2196:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2198:	4902      	ldr	r1, [pc, #8]	; (21a4 <_sbrk+0x20>)
    219a:	4a01      	ldr	r2, [pc, #4]	; (21a0 <_sbrk+0x1c>)
    219c:	6011      	str	r1, [r2, #0]
    219e:	e7f6      	b.n	218e <_sbrk+0xa>
    21a0:	20000158 	.word	0x20000158
    21a4:	200050d8 	.word	0x200050d8

000021a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    21a8:	2001      	movs	r0, #1
    21aa:	4240      	negs	r0, r0
    21ac:	4770      	bx	lr

000021ae <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    21ae:	2380      	movs	r3, #128	; 0x80
    21b0:	019b      	lsls	r3, r3, #6
    21b2:	604b      	str	r3, [r1, #4]

	return 0;
}
    21b4:	2000      	movs	r0, #0
    21b6:	4770      	bx	lr

000021b8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    21b8:	2001      	movs	r0, #1
    21ba:	4770      	bx	lr

000021bc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    21bc:	2000      	movs	r0, #0
    21be:	4770      	bx	lr

000021c0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    21c0:	b570      	push	{r4, r5, r6, lr}
    21c2:	b082      	sub	sp, #8
    21c4:	0005      	movs	r5, r0
    21c6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    21c8:	2200      	movs	r2, #0
    21ca:	466b      	mov	r3, sp
    21cc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    21ce:	4c06      	ldr	r4, [pc, #24]	; (21e8 <usart_serial_getchar+0x28>)
    21d0:	466b      	mov	r3, sp
    21d2:	1d99      	adds	r1, r3, #6
    21d4:	0028      	movs	r0, r5
    21d6:	47a0      	blx	r4
    21d8:	2800      	cmp	r0, #0
    21da:	d1f9      	bne.n	21d0 <usart_serial_getchar+0x10>

	*c = temp;
    21dc:	466b      	mov	r3, sp
    21de:	3306      	adds	r3, #6
    21e0:	881b      	ldrh	r3, [r3, #0]
    21e2:	7033      	strb	r3, [r6, #0]
}
    21e4:	b002      	add	sp, #8
    21e6:	bd70      	pop	{r4, r5, r6, pc}
    21e8:	00001051 	.word	0x00001051

000021ec <usart_serial_putchar>:
{
    21ec:	b570      	push	{r4, r5, r6, lr}
    21ee:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    21f0:	b28c      	uxth	r4, r1
    21f2:	4e03      	ldr	r6, [pc, #12]	; (2200 <usart_serial_putchar+0x14>)
    21f4:	0021      	movs	r1, r4
    21f6:	0028      	movs	r0, r5
    21f8:	47b0      	blx	r6
    21fa:	2800      	cmp	r0, #0
    21fc:	d1fa      	bne.n	21f4 <usart_serial_putchar+0x8>
}
    21fe:	bd70      	pop	{r4, r5, r6, pc}
    2200:	00001025 	.word	0x00001025

00002204 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    2204:	b510      	push	{r4, lr}
    2206:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2208:	466b      	mov	r3, sp
    220a:	1ddc      	adds	r4, r3, #7
    220c:	2201      	movs	r2, #1
    220e:	0021      	movs	r1, r4
    2210:	480f      	ldr	r0, [pc, #60]	; (2250 <USART_HOST_ISR_VECT+0x4c>)
    2212:	4b10      	ldr	r3, [pc, #64]	; (2254 <USART_HOST_ISR_VECT+0x50>)
    2214:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2216:	b672      	cpsid	i
    2218:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    221c:	2200      	movs	r2, #0
    221e:	4b0e      	ldr	r3, [pc, #56]	; (2258 <USART_HOST_ISR_VECT+0x54>)
    2220:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    2222:	4b0e      	ldr	r3, [pc, #56]	; (225c <USART_HOST_ISR_VECT+0x58>)
    2224:	781b      	ldrb	r3, [r3, #0]
    2226:	7821      	ldrb	r1, [r4, #0]
    2228:	4a0d      	ldr	r2, [pc, #52]	; (2260 <USART_HOST_ISR_VECT+0x5c>)
    222a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    222c:	2b9b      	cmp	r3, #155	; 0x9b
    222e:	d00a      	beq.n	2246 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    2230:	3301      	adds	r3, #1
    2232:	4a0a      	ldr	r2, [pc, #40]	; (225c <USART_HOST_ISR_VECT+0x58>)
    2234:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    2236:	2201      	movs	r2, #1
    2238:	4b07      	ldr	r3, [pc, #28]	; (2258 <USART_HOST_ISR_VECT+0x54>)
    223a:	701a      	strb	r2, [r3, #0]
    223c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2240:	b662      	cpsie	i
}
    2242:	b002      	add	sp, #8
    2244:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    2246:	2200      	movs	r2, #0
    2248:	4b04      	ldr	r3, [pc, #16]	; (225c <USART_HOST_ISR_VECT+0x58>)
    224a:	701a      	strb	r2, [r3, #0]
    224c:	e7f3      	b.n	2236 <USART_HOST_ISR_VECT+0x32>
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	2000015c 	.word	0x2000015c
    2254:	00001181 	.word	0x00001181
    2258:	20000008 	.word	0x20000008
    225c:	2000022d 	.word	0x2000022d
    2260:	20000190 	.word	0x20000190

00002264 <sio2host_init>:
{
    2264:	b5f0      	push	{r4, r5, r6, r7, lr}
    2266:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2268:	2380      	movs	r3, #128	; 0x80
    226a:	05db      	lsls	r3, r3, #23
    226c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    226e:	2300      	movs	r3, #0
    2270:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2272:	22ff      	movs	r2, #255	; 0xff
    2274:	4669      	mov	r1, sp
    2276:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2278:	2200      	movs	r2, #0
    227a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    227c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    227e:	2401      	movs	r4, #1
    2280:	2124      	movs	r1, #36	; 0x24
    2282:	4668      	mov	r0, sp
    2284:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2286:	3101      	adds	r1, #1
    2288:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    228a:	3101      	adds	r1, #1
    228c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    228e:	3101      	adds	r1, #1
    2290:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2292:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2294:	3105      	adds	r1, #5
    2296:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2298:	3101      	adds	r1, #1
    229a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    229c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    229e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    22a0:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    22a2:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    22a4:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    22a6:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    22a8:	2313      	movs	r3, #19
    22aa:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    22ac:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    22ae:	2380      	movs	r3, #128	; 0x80
    22b0:	035b      	lsls	r3, r3, #13
    22b2:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    22b4:	4b2f      	ldr	r3, [pc, #188]	; (2374 <sio2host_init+0x110>)
    22b6:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    22b8:	4b2f      	ldr	r3, [pc, #188]	; (2378 <sio2host_init+0x114>)
    22ba:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    22bc:	2301      	movs	r3, #1
    22be:	425b      	negs	r3, r3
    22c0:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    22c2:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    22c4:	23e1      	movs	r3, #225	; 0xe1
    22c6:	025b      	lsls	r3, r3, #9
    22c8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    22ca:	4d2c      	ldr	r5, [pc, #176]	; (237c <sio2host_init+0x118>)
    22cc:	4b2c      	ldr	r3, [pc, #176]	; (2380 <sio2host_init+0x11c>)
    22ce:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    22d0:	4a2c      	ldr	r2, [pc, #176]	; (2384 <sio2host_init+0x120>)
    22d2:	4b2d      	ldr	r3, [pc, #180]	; (2388 <sio2host_init+0x124>)
    22d4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    22d6:	4a2d      	ldr	r2, [pc, #180]	; (238c <sio2host_init+0x128>)
    22d8:	4b2d      	ldr	r3, [pc, #180]	; (2390 <sio2host_init+0x12c>)
    22da:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    22dc:	466a      	mov	r2, sp
    22de:	492d      	ldr	r1, [pc, #180]	; (2394 <sio2host_init+0x130>)
    22e0:	0028      	movs	r0, r5
    22e2:	4b2d      	ldr	r3, [pc, #180]	; (2398 <sio2host_init+0x134>)
    22e4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    22e6:	4f2d      	ldr	r7, [pc, #180]	; (239c <sio2host_init+0x138>)
    22e8:	683b      	ldr	r3, [r7, #0]
    22ea:	6898      	ldr	r0, [r3, #8]
    22ec:	2100      	movs	r1, #0
    22ee:	4e2c      	ldr	r6, [pc, #176]	; (23a0 <sio2host_init+0x13c>)
    22f0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    22f2:	683b      	ldr	r3, [r7, #0]
    22f4:	6858      	ldr	r0, [r3, #4]
    22f6:	2100      	movs	r1, #0
    22f8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    22fa:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    22fc:	0030      	movs	r0, r6
    22fe:	4b29      	ldr	r3, [pc, #164]	; (23a4 <sio2host_init+0x140>)
    2300:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2302:	231f      	movs	r3, #31
    2304:	4018      	ands	r0, r3
    2306:	4084      	lsls	r4, r0
    2308:	4b27      	ldr	r3, [pc, #156]	; (23a8 <sio2host_init+0x144>)
    230a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    230c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    230e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2310:	2b00      	cmp	r3, #0
    2312:	d1fc      	bne.n	230e <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2314:	6833      	ldr	r3, [r6, #0]
    2316:	2202      	movs	r2, #2
    2318:	4313      	orrs	r3, r2
    231a:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    231c:	4b17      	ldr	r3, [pc, #92]	; (237c <sio2host_init+0x118>)
    231e:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2320:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2322:	2a00      	cmp	r2, #0
    2324:	d1fc      	bne.n	2320 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    2326:	6859      	ldr	r1, [r3, #4]
    2328:	2280      	movs	r2, #128	; 0x80
    232a:	0252      	lsls	r2, r2, #9
    232c:	430a      	orrs	r2, r1
    232e:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2330:	2101      	movs	r1, #1
    2332:	4a12      	ldr	r2, [pc, #72]	; (237c <sio2host_init+0x118>)
    2334:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    2336:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2338:	2a00      	cmp	r2, #0
    233a:	d1fc      	bne.n	2336 <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    233c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    233e:	2a00      	cmp	r2, #0
    2340:	d1fc      	bne.n	233c <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2342:	6859      	ldr	r1, [r3, #4]
    2344:	2280      	movs	r2, #128	; 0x80
    2346:	0292      	lsls	r2, r2, #10
    2348:	430a      	orrs	r2, r1
    234a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    234c:	2101      	movs	r1, #1
    234e:	4a0b      	ldr	r2, [pc, #44]	; (237c <sio2host_init+0x118>)
    2350:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    2352:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2354:	2a00      	cmp	r2, #0
    2356:	d1fc      	bne.n	2352 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    2358:	4914      	ldr	r1, [pc, #80]	; (23ac <sio2host_init+0x148>)
    235a:	2000      	movs	r0, #0
    235c:	4b14      	ldr	r3, [pc, #80]	; (23b0 <sio2host_init+0x14c>)
    235e:	4798      	blx	r3
    2360:	2204      	movs	r2, #4
    2362:	4b0c      	ldr	r3, [pc, #48]	; (2394 <sio2host_init+0x130>)
    2364:	759a      	strb	r2, [r3, #22]
    2366:	32fd      	adds	r2, #253	; 0xfd
    2368:	32ff      	adds	r2, #255	; 0xff
    236a:	4b0f      	ldr	r3, [pc, #60]	; (23a8 <sio2host_init+0x144>)
    236c:	601a      	str	r2, [r3, #0]
}
    236e:	b011      	add	sp, #68	; 0x44
    2370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	00040003 	.word	0x00040003
    2378:	00050003 	.word	0x00050003
    237c:	2000015c 	.word	0x2000015c
    2380:	2000046c 	.word	0x2000046c
    2384:	000021ed 	.word	0x000021ed
    2388:	20000468 	.word	0x20000468
    238c:	000021c1 	.word	0x000021c1
    2390:	20000464 	.word	0x20000464
    2394:	42000800 	.word	0x42000800
    2398:	00000ce1 	.word	0x00000ce1
    239c:	20000098 	.word	0x20000098
    23a0:	000093fd 	.word	0x000093fd
    23a4:	00000899 	.word	0x00000899
    23a8:	e000e100 	.word	0xe000e100
    23ac:	00002205 	.word	0x00002205
    23b0:	0000085d 	.word	0x0000085d

000023b4 <sio2host_tx>:
{
    23b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23b6:	b083      	sub	sp, #12
    23b8:	0006      	movs	r6, r0
    23ba:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    23bc:	466b      	mov	r3, sp
    23be:	889d      	ldrh	r5, [r3, #4]
    23c0:	4c05      	ldr	r4, [pc, #20]	; (23d8 <sio2host_tx+0x24>)
    23c2:	4f06      	ldr	r7, [pc, #24]	; (23dc <sio2host_tx+0x28>)
    23c4:	002a      	movs	r2, r5
    23c6:	0031      	movs	r1, r6
    23c8:	0020      	movs	r0, r4
    23ca:	47b8      	blx	r7
	} while (status != STATUS_OK);
    23cc:	2800      	cmp	r0, #0
    23ce:	d1f9      	bne.n	23c4 <sio2host_tx+0x10>
}
    23d0:	9801      	ldr	r0, [sp, #4]
    23d2:	b003      	add	sp, #12
    23d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	2000015c 	.word	0x2000015c
    23dc:	000010c1 	.word	0x000010c1

000023e0 <sio2host_rx>:
{
    23e0:	b570      	push	{r4, r5, r6, lr}
    23e2:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    23e4:	4b1f      	ldr	r3, [pc, #124]	; (2464 <sio2host_rx+0x84>)
    23e6:	781c      	ldrb	r4, [r3, #0]
    23e8:	4b1f      	ldr	r3, [pc, #124]	; (2468 <sio2host_rx+0x88>)
    23ea:	781b      	ldrb	r3, [r3, #0]
    23ec:	429c      	cmp	r4, r3
    23ee:	d31e      	bcc.n	242e <sio2host_rx+0x4e>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    23f0:	1ae3      	subs	r3, r4, r3
    23f2:	481e      	ldr	r0, [pc, #120]	; (246c <sio2host_rx+0x8c>)
    23f4:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    23f6:	4b1d      	ldr	r3, [pc, #116]	; (246c <sio2host_rx+0x8c>)
    23f8:	7818      	ldrb	r0, [r3, #0]
    23fa:	2800      	cmp	r0, #0
    23fc:	d030      	beq.n	2460 <sio2host_rx+0x80>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    23fe:	289b      	cmp	r0, #155	; 0x9b
    2400:	d91b      	bls.n	243a <sio2host_rx+0x5a>
		serial_rx_buf_head = serial_rx_buf_tail;
    2402:	4b19      	ldr	r3, [pc, #100]	; (2468 <sio2host_rx+0x88>)
    2404:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    2406:	209c      	movs	r0, #156	; 0x9c
    2408:	4b18      	ldr	r3, [pc, #96]	; (246c <sio2host_rx+0x8c>)
    240a:	7018      	strb	r0, [r3, #0]
    240c:	1c08      	adds	r0, r1, #0
    240e:	299c      	cmp	r1, #156	; 0x9c
    2410:	d901      	bls.n	2416 <sio2host_rx+0x36>
    2412:	4b17      	ldr	r3, [pc, #92]	; (2470 <sio2host_rx+0x90>)
    2414:	7818      	ldrb	r0, [r3, #0]
    2416:	b2c0      	uxtb	r0, r0
	while (max_length > 0) {
    2418:	2800      	cmp	r0, #0
    241a:	d021      	beq.n	2460 <sio2host_rx+0x80>
    241c:	4b12      	ldr	r3, [pc, #72]	; (2468 <sio2host_rx+0x88>)
    241e:	781b      	ldrb	r3, [r3, #0]
    2420:	1e44      	subs	r4, r0, #1
    2422:	b2e4      	uxtb	r4, r4
    2424:	3401      	adds	r4, #1
    2426:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    2428:	4d12      	ldr	r5, [pc, #72]	; (2474 <sio2host_rx+0x94>)
			serial_rx_buf_head = 0;
    242a:	2600      	movs	r6, #0
    242c:	e00e      	b.n	244c <sio2host_rx+0x6c>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    242e:	0020      	movs	r0, r4
    2430:	3864      	subs	r0, #100	; 0x64
    2432:	1ac3      	subs	r3, r0, r3
    2434:	480d      	ldr	r0, [pc, #52]	; (246c <sio2host_rx+0x8c>)
    2436:	7003      	strb	r3, [r0, #0]
    2438:	e7dd      	b.n	23f6 <sio2host_rx+0x16>
    243a:	1c03      	adds	r3, r0, #0
    243c:	4288      	cmp	r0, r1
    243e:	d900      	bls.n	2442 <sio2host_rx+0x62>
    2440:	1c0b      	adds	r3, r1, #0
    2442:	b2d8      	uxtb	r0, r3
    2444:	e7e8      	b.n	2418 <sio2host_rx+0x38>
			serial_rx_buf_head = 0;
    2446:	0033      	movs	r3, r6
	while (max_length > 0) {
    2448:	4294      	cmp	r4, r2
    244a:	d007      	beq.n	245c <sio2host_rx+0x7c>
		*data = serial_rx_buf[serial_rx_buf_head];
    244c:	5ce9      	ldrb	r1, [r5, r3]
    244e:	7011      	strb	r1, [r2, #0]
		data++;
    2450:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    2452:	2b9b      	cmp	r3, #155	; 0x9b
    2454:	d0f7      	beq.n	2446 <sio2host_rx+0x66>
			serial_rx_buf_head++;
    2456:	3301      	adds	r3, #1
    2458:	b2db      	uxtb	r3, r3
    245a:	e7f5      	b.n	2448 <sio2host_rx+0x68>
    245c:	4a02      	ldr	r2, [pc, #8]	; (2468 <sio2host_rx+0x88>)
    245e:	7013      	strb	r3, [r2, #0]
}
    2460:	bd70      	pop	{r4, r5, r6, pc}
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	2000022d 	.word	0x2000022d
    2468:	2000022c 	.word	0x2000022c
    246c:	2000022e 	.word	0x2000022e
    2470:	0000a7a8 	.word	0x0000a7a8
    2474:	20000190 	.word	0x20000190

00002478 <sio2host_putchar>:
{
    2478:	b500      	push	{lr}
    247a:	b083      	sub	sp, #12
    247c:	466b      	mov	r3, sp
    247e:	71d8      	strb	r0, [r3, #7]
    2480:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    2482:	2101      	movs	r1, #1
    2484:	0018      	movs	r0, r3
    2486:	4b02      	ldr	r3, [pc, #8]	; (2490 <sio2host_putchar+0x18>)
    2488:	4798      	blx	r3
}
    248a:	b003      	add	sp, #12
    248c:	bd00      	pop	{pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	000023b5 	.word	0x000023b5

00002494 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    2494:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    2496:	7802      	ldrb	r2, [r0, #0]
    2498:	4b08      	ldr	r3, [pc, #32]	; (24bc <MiMAC_SetAltAddress+0x28>)
    249a:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    249c:	7842      	ldrb	r2, [r0, #1]
    249e:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    24a0:	780a      	ldrb	r2, [r1, #0]
    24a2:	4c07      	ldr	r4, [pc, #28]	; (24c0 <MiMAC_SetAltAddress+0x2c>)
    24a4:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    24a6:	784a      	ldrb	r2, [r1, #1]
    24a8:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    24aa:	8818      	ldrh	r0, [r3, #0]
    24ac:	4b05      	ldr	r3, [pc, #20]	; (24c4 <MiMAC_SetAltAddress+0x30>)
    24ae:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    24b0:	8820      	ldrh	r0, [r4, #0]
    24b2:	4b05      	ldr	r3, [pc, #20]	; (24c8 <MiMAC_SetAltAddress+0x34>)
    24b4:	4798      	blx	r3
	return true;
}
    24b6:	2001      	movs	r0, #1
    24b8:	bd10      	pop	{r4, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	20000474 	.word	0x20000474
    24c0:	2000048c 	.word	0x2000048c
    24c4:	00002db5 	.word	0x00002db5
    24c8:	00002d95 	.word	0x00002d95

000024cc <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    24cc:	b510      	push	{r4, lr}
    switch(id)
    24ce:	2800      	cmp	r0, #0
    24d0:	d109      	bne.n	24e6 <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    24d2:	780b      	ldrb	r3, [r1, #0]
    24d4:	2b1a      	cmp	r3, #26
    24d6:	d807      	bhi.n	24e8 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    24d8:	4a04      	ldr	r2, [pc, #16]	; (24ec <MiMAC_Set+0x20>)
    24da:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    24dc:	0018      	movs	r0, r3
    24de:	4b04      	ldr	r3, [pc, #16]	; (24f0 <MiMAC_Set+0x24>)
    24e0:	4798      	blx	r3
          return true;
    24e2:	2001      	movs	r0, #1
    24e4:	e000      	b.n	24e8 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    24e6:	2000      	movs	r0, #0
}
    24e8:	bd10      	pop	{r4, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	2000048e 	.word	0x2000048e
    24f0:	00002d71 	.word	0x00002d71

000024f4 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    24f4:	b530      	push	{r4, r5, lr}
    24f6:	b083      	sub	sp, #12
    24f8:	466c      	mov	r4, sp
    24fa:	9000      	str	r0, [sp, #0]
    24fc:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    24fe:	4b10      	ldr	r3, [pc, #64]	; (2540 <MiMAC_Init+0x4c>)
    2500:	4798      	blx	r3
	MACInitParams = initValue;
    2502:	4d10      	ldr	r5, [pc, #64]	; (2544 <MiMAC_Init+0x50>)
    2504:	002b      	movs	r3, r5
    2506:	cc06      	ldmia	r4!, {r1, r2}
    2508:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    250a:	4b0f      	ldr	r3, [pc, #60]	; (2548 <MiMAC_Init+0x54>)
    250c:	4798      	blx	r3
    250e:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    2510:	2001      	movs	r0, #1
    2512:	4b0e      	ldr	r3, [pc, #56]	; (254c <MiMAC_Init+0x58>)
    2514:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    2516:	4b0e      	ldr	r3, [pc, #56]	; (2550 <MiMAC_Init+0x5c>)
    2518:	701c      	strb	r4, [r3, #0]

	MACCurrentChannel = 11;
    251a:	220b      	movs	r2, #11
    251c:	4b0d      	ldr	r3, [pc, #52]	; (2554 <MiMAC_Init+0x60>)
    251e:	701a      	strb	r2, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    2520:	6868      	ldr	r0, [r5, #4]
    2522:	4b0d      	ldr	r3, [pc, #52]	; (2558 <MiMAC_Init+0x64>)
    2524:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    2526:	4b0d      	ldr	r3, [pc, #52]	; (255c <MiMAC_Init+0x68>)
    2528:	2200      	movs	r2, #0
    252a:	701a      	strb	r2, [r3, #0]
    252c:	217f      	movs	r1, #127	; 0x7f
    252e:	545a      	strb	r2, [r3, r1]
    2530:	317f      	adds	r1, #127	; 0x7f
    2532:	545a      	strb	r2, [r3, r1]
    2534:	217e      	movs	r1, #126	; 0x7e
    2536:	31ff      	adds	r1, #255	; 0xff
    2538:	545a      	strb	r2, [r3, r1]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    253a:	2001      	movs	r0, #1
    253c:	b003      	add	sp, #12
    253e:	bd30      	pop	{r4, r5, pc}
    2540:	00002d11 	.word	0x00002d11
    2544:	2000047c 	.word	0x2000047c
    2548:	00002cc1 	.word	0x00002cc1
    254c:	00002d5d 	.word	0x00002d5d
    2550:	20000470 	.word	0x20000470
    2554:	2000048e 	.word	0x2000048e
    2558:	00002e65 	.word	0x00002e65
    255c:	20000490 	.word	0x20000490

00002560 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    2560:	b5f0      	push	{r4, r5, r6, r7, lr}
    2562:	46de      	mov	lr, fp
    2564:	4657      	mov	r7, sl
    2566:	464e      	mov	r6, r9
    2568:	4645      	mov	r5, r8
    256a:	b5e0      	push	{r5, r6, r7, lr}
    256c:	b0a5      	sub	sp, #148	; 0x94
    256e:	9001      	str	r0, [sp, #4]
    2570:	000e      	movs	r6, r1
    2572:	9102      	str	r1, [sp, #8]
    2574:	1c11      	adds	r1, r2, #0
    2576:	0014      	movs	r4, r2
    2578:	0a24      	lsrs	r4, r4, #8
    257a:	9203      	str	r2, [sp, #12]
    257c:	9300      	str	r3, [sp, #0]
    257e:	aa2e      	add	r2, sp, #184	; 0xb8
    2580:	7815      	ldrb	r5, [r2, #0]
    2582:	aa2f      	add	r2, sp, #188	; 0xbc
    2584:	7813      	ldrb	r3, [r2, #0]
    2586:	469b      	mov	fp, r3
    2588:	b2c7      	uxtb	r7, r0
    258a:	06b8      	lsls	r0, r7, #26
    258c:	0fc3      	lsrs	r3, r0, #31
    258e:	4699      	mov	r9, r3
    2590:	b2c9      	uxtb	r1, r1
    2592:	b2e2      	uxtb	r2, r4
	uint8_t frameControl = 0;
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif

    if (transParam.flags.bits.broadcast)
    2594:	077b      	lsls	r3, r7, #29
    2596:	d500      	bpl.n	259a <MiMAC_SendPacket+0x3a>
    {
        transParam.altDestAddr = true;
    2598:	2101      	movs	r1, #1
        transParam.altSrcAddr = false;
    }
   #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    259a:	2303      	movs	r3, #3
    259c:	403b      	ands	r3, r7
    259e:	2b01      	cmp	r3, #1
    25a0:	d03b      	beq.n	261a <MiMAC_SendPacket+0xba>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    25a2:	425c      	negs	r4, r3
    25a4:	415c      	adcs	r4, r3
        frameControl = 0x03;
    25a6:	b2e0      	uxtb	r0, r4
    25a8:	4682      	mov	sl, r0
        frameControl = 0x01;
    }

    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    25aa:	ac01      	add	r4, sp, #4
    25ac:	8964      	ldrh	r4, [r4, #10]
    25ae:	487b      	ldr	r0, [pc, #492]	; (279c <MiMAC_SendPacket+0x23c>)
    25b0:	8800      	ldrh	r0, [r0, #0]
    25b2:	42a0      	cmp	r0, r4
    25b4:	d034      	beq.n	2620 <MiMAC_SendPacket+0xc0>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    25b6:	2400      	movs	r4, #0
        headerLength = 7;
    25b8:	2007      	movs	r0, #7
    25ba:	4684      	mov	ip, r0
    }
#endif

    if (transParam.altDestAddr)
    25bc:	4688      	mov	r8, r1
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    25be:	4661      	mov	r1, ip
    25c0:	3108      	adds	r1, #8
    if (transParam.altDestAddr)
    25c2:	4640      	mov	r0, r8
    25c4:	2800      	cmp	r0, #0
    25c6:	d000      	beq.n	25ca <MiMAC_SendPacket+0x6a>
        headerLength += 2;
    25c8:	3906      	subs	r1, #6
    }

    if (transParam.altSrcAddr)
    25ca:	2a00      	cmp	r2, #0
    25cc:	d037      	beq.n	263e <MiMAC_SendPacket+0xde>
    {
        headerLength += 2;
    25ce:	3102      	adds	r1, #2
    25d0:	b2c9      	uxtb	r1, r1
    25d2:	468c      	mov	ip, r1
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    25d4:	2124      	movs	r1, #36	; 0x24
    25d6:	4039      	ands	r1, r7
    25d8:	2920      	cmp	r1, #32
    25da:	d034      	beq.n	2646 <MiMAC_SendPacket+0xe6>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    25dc:	2b03      	cmp	r3, #3
    25de:	d036      	beq.n	264e <MiMAC_SendPacket+0xee>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    25e0:	a904      	add	r1, sp, #16
    25e2:	44ac      	add	ip, r5
    25e4:	4663      	mov	r3, ip
    25e6:	700b      	strb	r3, [r1, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    25e8:	4653      	mov	r3, sl
    25ea:	704b      	strb	r3, [r1, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    25ec:	a901      	add	r1, sp, #4
    25ee:	464b      	mov	r3, r9
    25f0:	015b      	lsls	r3, r3, #5
    25f2:	469c      	mov	ip, r3
    25f4:	7808      	ldrb	r0, [r1, #0]
    25f6:	2320      	movs	r3, #32
    25f8:	4398      	bics	r0, r3
    25fa:	4663      	mov	r3, ip
    25fc:	4318      	orrs	r0, r3
    25fe:	7008      	strb	r0, [r1, #0]
    2600:	4684      	mov	ip, r0
    2602:	43c1      	mvns	r1, r0
    2604:	078b      	lsls	r3, r1, #30
    2606:	d02a      	beq.n	265e <MiMAC_SendPacket+0xfe>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    2608:	4643      	mov	r3, r8
    260a:	2b00      	cmp	r3, #0
    260c:	d049      	beq.n	26a2 <MiMAC_SendPacket+0x142>
    260e:	2a00      	cmp	r2, #0
    2610:	d02f      	beq.n	2672 <MiMAC_SendPacket+0x112>
        {
			packet[loc++] = 0x88;
    2612:	2088      	movs	r0, #136	; 0x88
    2614:	a904      	add	r1, sp, #16
    2616:	7088      	strb	r0, [r1, #2]
    2618:	e02e      	b.n	2678 <MiMAC_SendPacket+0x118>
        frameControl = 0x03;
    261a:	2003      	movs	r0, #3
    261c:	4682      	mov	sl, r0
    261e:	e7c4      	b.n	25aa <MiMAC_SendPacket+0x4a>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    2620:	485f      	ldr	r0, [pc, #380]	; (27a0 <MiMAC_SendPacket+0x240>)
    2622:	4284      	cmp	r4, r0
    2624:	d007      	beq.n	2636 <MiMAC_SendPacket+0xd6>
        frameControl |= 0x40;
    2626:	2440      	movs	r4, #64	; 0x40
    2628:	4650      	mov	r0, sl
    262a:	4320      	orrs	r0, r4
    262c:	4682      	mov	sl, r0
        IntraPAN = true;
    262e:	3c3f      	subs	r4, #63	; 0x3f
        headerLength = 5;
    2630:	2005      	movs	r0, #5
    2632:	4684      	mov	ip, r0
        IntraPAN = true;
    2634:	e7c2      	b.n	25bc <MiMAC_SendPacket+0x5c>
        IntraPAN = false;
    2636:	2400      	movs	r4, #0
        headerLength = 7;
    2638:	2007      	movs	r0, #7
    263a:	4684      	mov	ip, r0
    263c:	e7be      	b.n	25bc <MiMAC_SendPacket+0x5c>
        headerLength += 8;
    263e:	3108      	adds	r1, #8
    2640:	b2c9      	uxtb	r1, r1
    2642:	468c      	mov	ip, r1
    2644:	e7c6      	b.n	25d4 <MiMAC_SendPacket+0x74>
        frameControl |= 0x20;
    2646:	4650      	mov	r0, sl
    2648:	4308      	orrs	r0, r1
    264a:	4682      	mov	sl, r0
    264c:	e7c6      	b.n	25dc <MiMAC_SendPacket+0x7c>
        transParam.altSrcAddr = true;
    264e:	2201      	movs	r2, #1
        transParam.flags.bits.ackReq = false;
    2650:	2300      	movs	r3, #0
    2652:	4699      	mov	r9, r3
        IntraPAN = false;
    2654:	2400      	movs	r4, #0
        frameControl = 0x00;
    2656:	469a      	mov	sl, r3
        headerLength = 7;
    2658:	3307      	adds	r3, #7
    265a:	469c      	mov	ip, r3
    265c:	e7c0      	b.n	25e0 <MiMAC_SendPacket+0x80>
		packet[loc++] = 0x80;
    265e:	a904      	add	r1, sp, #16
    2660:	2080      	movs	r0, #128	; 0x80
    2662:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    2664:	4e4f      	ldr	r6, [pc, #316]	; (27a4 <MiMAC_SendPacket+0x244>)
    2666:	7830      	ldrb	r0, [r6, #0]
    2668:	1c43      	adds	r3, r0, #1
    266a:	7033      	strb	r3, [r6, #0]
    266c:	70c8      	strb	r0, [r1, #3]
    266e:	2104      	movs	r1, #4
    2670:	e02e      	b.n	26d0 <MiMAC_SendPacket+0x170>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    2672:	20c8      	movs	r0, #200	; 0xc8
    2674:	a904      	add	r1, sp, #16
    2676:	7088      	strb	r0, [r1, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    2678:	494a      	ldr	r1, [pc, #296]	; (27a4 <MiMAC_SendPacket+0x244>)
    267a:	7808      	ldrb	r0, [r1, #0]
    267c:	1c43      	adds	r3, r0, #1
    267e:	700b      	strb	r3, [r1, #0]
    2680:	a904      	add	r1, sp, #16
    2682:	70c8      	strb	r0, [r1, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    2684:	a801      	add	r0, sp, #4
    2686:	7a83      	ldrb	r3, [r0, #10]
    2688:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    268a:	7ac0      	ldrb	r0, [r0, #11]
    268c:	7148      	strb	r0, [r1, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    268e:	4663      	mov	r3, ip
    2690:	075b      	lsls	r3, r3, #29
    2692:	d418      	bmi.n	26c6 <MiMAC_SendPacket+0x166>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    2694:	a904      	add	r1, sp, #16
    2696:	7830      	ldrb	r0, [r6, #0]
    2698:	7188      	strb	r0, [r1, #6]
				packet[loc++] = transParam.DestAddress[1];
    269a:	7870      	ldrb	r0, [r6, #1]
    269c:	71c8      	strb	r0, [r1, #7]
    269e:	2108      	movs	r1, #8
    26a0:	e016      	b.n	26d0 <MiMAC_SendPacket+0x170>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    26a2:	2a00      	cmp	r2, #0
    26a4:	d05c      	beq.n	2760 <MiMAC_SendPacket+0x200>
			packet[loc++] = 0x8C;
    26a6:	a904      	add	r1, sp, #16
    26a8:	208c      	movs	r0, #140	; 0x8c
    26aa:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    26ac:	4b3d      	ldr	r3, [pc, #244]	; (27a4 <MiMAC_SendPacket+0x244>)
    26ae:	7818      	ldrb	r0, [r3, #0]
    26b0:	1c47      	adds	r7, r0, #1
    26b2:	701f      	strb	r7, [r3, #0]
    26b4:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    26b6:	ab01      	add	r3, sp, #4
    26b8:	7a98      	ldrb	r0, [r3, #10]
    26ba:	7108      	strb	r0, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    26bc:	7ad8      	ldrb	r0, [r3, #11]
    26be:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    26c0:	4663      	mov	r3, ip
    26c2:	075b      	lsls	r3, r3, #29
    26c4:	d560      	bpl.n	2788 <MiMAC_SendPacket+0x228>
			packet[loc++] = 0xFF;
    26c6:	a904      	add	r1, sp, #16
    26c8:	20ff      	movs	r0, #255	; 0xff
    26ca:	7188      	strb	r0, [r1, #6]
			packet[loc++] = 0xFF;
    26cc:	71c8      	strb	r0, [r1, #7]
    26ce:	2108      	movs	r1, #8
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    26d0:	2c00      	cmp	r4, #0
    26d2:	d109      	bne.n	26e8 <MiMAC_SendPacket+0x188>
    {
		packet[loc++] = MAC_PANID.v[0];
    26d4:	1c48      	adds	r0, r1, #1
    26d6:	b2c0      	uxtb	r0, r0
    26d8:	ac04      	add	r4, sp, #16
    26da:	4e30      	ldr	r6, [pc, #192]	; (279c <MiMAC_SendPacket+0x23c>)
    26dc:	7833      	ldrb	r3, [r6, #0]
    26de:	5463      	strb	r3, [r4, r1]
		packet[loc++] = MAC_PANID.v[1];
    26e0:	3102      	adds	r1, #2
    26e2:	b2c9      	uxtb	r1, r1
    26e4:	7876      	ldrb	r6, [r6, #1]
    26e6:	5426      	strb	r6, [r4, r0]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    26e8:	2a00      	cmp	r2, #0
    26ea:	d02a      	beq.n	2742 <MiMAC_SendPacket+0x1e2>
    {
		packet[loc++] = myNetworkAddress.v[0];
    26ec:	a804      	add	r0, sp, #16
    26ee:	4c2e      	ldr	r4, [pc, #184]	; (27a8 <MiMAC_SendPacket+0x248>)
    26f0:	7822      	ldrb	r2, [r4, #0]
    26f2:	5442      	strb	r2, [r0, r1]
		packet[loc++] = myNetworkAddress.v[1];
    26f4:	1c8a      	adds	r2, r1, #2
    26f6:	b2d2      	uxtb	r2, r2
		packet[loc++] = myNetworkAddress.v[0];
    26f8:	3101      	adds	r1, #1
		packet[loc++] = myNetworkAddress.v[1];
    26fa:	b2c9      	uxtb	r1, r1
    26fc:	7864      	ldrb	r4, [r4, #1]
    26fe:	5444      	strb	r4, [r0, r1]
#endif


#ifndef ENABLE_SECURITY
    // write the payload
    for (i = 0; i < MACPayloadLen; i++)
    2700:	2d00      	cmp	r5, #0
    2702:	d00a      	beq.n	271a <MiMAC_SendPacket+0x1ba>
    2704:	9900      	ldr	r1, [sp, #0]
    2706:	1955      	adds	r5, r2, r5
    2708:	b2ed      	uxtb	r5, r5
    {
		packet[loc++] = MACPayload[i];
    270a:	ae04      	add	r6, sp, #16
    270c:	1c50      	adds	r0, r2, #1
    270e:	780c      	ldrb	r4, [r1, #0]
    2710:	54b4      	strb	r4, [r6, r2]
    2712:	3101      	adds	r1, #1
    2714:	b2c2      	uxtb	r2, r0
    for (i = 0; i < MACPayloadLen; i++)
    2716:	4295      	cmp	r5, r2
    2718:	d1f8      	bne.n	270c <MiMAC_SendPacket+0x1ac>
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    271a:	4a24      	ldr	r2, [pc, #144]	; (27ac <MiMAC_SendPacket+0x24c>)
    271c:	9b00      	ldr	r3, [sp, #0]
    271e:	6013      	str	r3, [r2, #0]
	dataConfCallback = ConfCallback;
    2720:	4b23      	ldr	r3, [pc, #140]	; (27b0 <MiMAC_SendPacket+0x250>)
    2722:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    2724:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    2726:	4b23      	ldr	r3, [pc, #140]	; (27b4 <MiMAC_SendPacket+0x254>)
    2728:	465a      	mov	r2, fp
    272a:	701a      	strb	r2, [r3, #0]

    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
    272c:	a804      	add	r0, sp, #16
    272e:	4b22      	ldr	r3, [pc, #136]	; (27b8 <MiMAC_SendPacket+0x258>)
    2730:	4798      	blx	r3
    return true;
}
    2732:	2001      	movs	r0, #1
    2734:	b025      	add	sp, #148	; 0x94
    2736:	bc3c      	pop	{r2, r3, r4, r5}
    2738:	4690      	mov	r8, r2
    273a:	4699      	mov	r9, r3
    273c:	46a2      	mov	sl, r4
    273e:	46ab      	mov	fp, r5
    2740:	bdf0      	pop	{r4, r5, r6, r7, pc}
			packet[loc++] = MACInitParams.PAddress[i];
    2742:	4a1e      	ldr	r2, [pc, #120]	; (27bc <MiMAC_SendPacket+0x25c>)
    2744:	6850      	ldr	r0, [r2, #4]
    2746:	000b      	movs	r3, r1
    2748:	3308      	adds	r3, #8
    274a:	b2db      	uxtb	r3, r3
    274c:	ae04      	add	r6, sp, #16
    274e:	1c4a      	adds	r2, r1, #1
    2750:	b2d2      	uxtb	r2, r2
    2752:	7804      	ldrb	r4, [r0, #0]
    2754:	5474      	strb	r4, [r6, r1]
    2756:	3001      	adds	r0, #1
    2758:	0011      	movs	r1, r2
        for (i = 0; i < 8; i++)
    275a:	429a      	cmp	r2, r3
    275c:	d1f7      	bne.n	274e <MiMAC_SendPacket+0x1ee>
    275e:	e7cf      	b.n	2700 <MiMAC_SendPacket+0x1a0>
			packet[loc++] = 0xCC;
    2760:	a904      	add	r1, sp, #16
    2762:	20cc      	movs	r0, #204	; 0xcc
    2764:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    2766:	4b0f      	ldr	r3, [pc, #60]	; (27a4 <MiMAC_SendPacket+0x244>)
    2768:	4698      	mov	r8, r3
    276a:	7818      	ldrb	r0, [r3, #0]
    276c:	1c43      	adds	r3, r0, #1
    276e:	4699      	mov	r9, r3
    2770:	4643      	mov	r3, r8
    2772:	464f      	mov	r7, r9
    2774:	701f      	strb	r7, [r3, #0]
    2776:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    2778:	a801      	add	r0, sp, #4
    277a:	7a83      	ldrb	r3, [r0, #10]
    277c:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    277e:	7ac0      	ldrb	r0, [r0, #11]
    2780:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    2782:	4663      	mov	r3, ip
    2784:	075b      	lsls	r3, r3, #29
    2786:	d49e      	bmi.n	26c6 <MiMAC_SendPacket+0x166>
        headerLength = 7;
    2788:	2000      	movs	r0, #0
					packet[loc++] = transParam.DestAddress[i];
    278a:	ab04      	add	r3, sp, #16
    278c:	1819      	adds	r1, r3, r0
    278e:	5c33      	ldrb	r3, [r6, r0]
    2790:	718b      	strb	r3, [r1, #6]
    2792:	3001      	adds	r0, #1
                for (i = 0; i < 8; i++)
    2794:	2808      	cmp	r0, #8
    2796:	d1f8      	bne.n	278a <MiMAC_SendPacket+0x22a>
					packet[loc++] = transParam.DestAddress[i];
    2798:	210e      	movs	r1, #14
    279a:	e799      	b.n	26d0 <MiMAC_SendPacket+0x170>
    279c:	2000048c 	.word	0x2000048c
    27a0:	0000ffff 	.word	0x0000ffff
    27a4:	20000470 	.word	0x20000470
    27a8:	20000474 	.word	0x20000474
    27ac:	20000238 	.word	0x20000238
    27b0:	20000230 	.word	0x20000230
    27b4:	20000234 	.word	0x20000234
    27b8:	00002c75 	.word	0x00002c75
    27bc:	2000047c 	.word	0x2000047c

000027c0 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    27c0:	4b04      	ldr	r3, [pc, #16]	; (27d4 <MiMAC_DiscardPacket+0x14>)
    27c2:	781b      	ldrb	r3, [r3, #0]
    27c4:	2b03      	cmp	r3, #3
    27c6:	d804      	bhi.n	27d2 <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    27c8:	01da      	lsls	r2, r3, #7
    27ca:	1ad3      	subs	r3, r2, r3
    27cc:	2100      	movs	r1, #0
    27ce:	4a02      	ldr	r2, [pc, #8]	; (27d8 <MiMAC_DiscardPacket+0x18>)
    27d0:	5499      	strb	r1, [r3, r2]
	}
}
    27d2:	4770      	bx	lr
    27d4:	20000009 	.word	0x20000009
    27d8:	20000490 	.word	0x20000490

000027dc <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    27dc:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	BankIndex = 0xFF;
    27de:	22ff      	movs	r2, #255	; 0xff
    27e0:	4bcd      	ldr	r3, [pc, #820]	; (2b18 <MiMAC_ReceivedPacket+0x33c>)
    27e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    27e4:	4bcd      	ldr	r3, [pc, #820]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    27e6:	781b      	ldrb	r3, [r3, #0]
    27e8:	2b00      	cmp	r3, #0
    27ea:	d000      	beq.n	27ee <MiMAC_ReceivedPacket+0x12>
    27ec:	e1bd      	b.n	2b6a <MiMAC_ReceivedPacket+0x38e>
    27ee:	337f      	adds	r3, #127	; 0x7f
    27f0:	4aca      	ldr	r2, [pc, #808]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    27f2:	5cd3      	ldrb	r3, [r2, r3]
    27f4:	2b00      	cmp	r3, #0
    27f6:	d10b      	bne.n	2810 <MiMAC_ReceivedPacket+0x34>
    27f8:	33fe      	adds	r3, #254	; 0xfe
    27fa:	5cd3      	ldrb	r3, [r2, r3]
    27fc:	2b00      	cmp	r3, #0
    27fe:	d12e      	bne.n	285e <MiMAC_ReceivedPacket+0x82>
    2800:	237e      	movs	r3, #126	; 0x7e
    2802:	33ff      	adds	r3, #255	; 0xff
    2804:	5cd3      	ldrb	r3, [r2, r3]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
		#endif

		return true;
	}
	return false;
    2806:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    2808:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    280a:	2b00      	cmp	r3, #0
    280c:	d101      	bne.n	2812 <MiMAC_ReceivedPacket+0x36>
}
    280e:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < BANK_SIZE; i++)
    2810:	2201      	movs	r2, #1
			BankIndex = i;
    2812:	4bc1      	ldr	r3, [pc, #772]	; (2b18 <MiMAC_ReceivedPacket+0x33c>)
    2814:	701a      	strb	r2, [r3, #0]
	return false;
    2816:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    2818:	2a03      	cmp	r2, #3
    281a:	d8f8      	bhi.n	280e <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    281c:	0010      	movs	r0, r2
    281e:	01d1      	lsls	r1, r2, #7
    2820:	1a89      	subs	r1, r1, r2
    2822:	4bbe      	ldr	r3, [pc, #760]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2824:	185b      	adds	r3, r3, r1
    2826:	785d      	ldrb	r5, [r3, #1]
    2828:	2440      	movs	r4, #64	; 0x40
    282a:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    282c:	49bc      	ldr	r1, [pc, #752]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    282e:	2400      	movs	r4, #0
    2830:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    2832:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    2834:	789b      	ldrb	r3, [r3, #2]
    2836:	2133      	movs	r1, #51	; 0x33
    2838:	438b      	bics	r3, r1
		switch (addrMode)
    283a:	b2d9      	uxtb	r1, r3
    283c:	2988      	cmp	r1, #136	; 0x88
    283e:	d100      	bne.n	2842 <MiMAC_ReceivedPacket+0x66>
    2840:	e0c4      	b.n	29cc <MiMAC_ReceivedPacket+0x1f0>
    2842:	d90e      	bls.n	2862 <MiMAC_ReceivedPacket+0x86>
    2844:	b2d9      	uxtb	r1, r3
    2846:	29c8      	cmp	r1, #200	; 0xc8
    2848:	d046      	beq.n	28d8 <MiMAC_ReceivedPacket+0xfc>
    284a:	29cc      	cmp	r1, #204	; 0xcc
    284c:	d100      	bne.n	2850 <MiMAC_ReceivedPacket+0x74>
    284e:	e08a      	b.n	2966 <MiMAC_ReceivedPacket+0x18a>
    2850:	298c      	cmp	r1, #140	; 0x8c
    2852:	d100      	bne.n	2856 <MiMAC_ReceivedPacket+0x7a>
    2854:	e104      	b.n	2a60 <MiMAC_ReceivedPacket+0x284>
			MiMAC_DiscardPacket();
    2856:	4bb3      	ldr	r3, [pc, #716]	; (2b24 <MiMAC_ReceivedPacket+0x348>)
    2858:	4798      	blx	r3
			return false;
    285a:	2000      	movs	r0, #0
    285c:	e7d7      	b.n	280e <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    285e:	2202      	movs	r2, #2
    2860:	e7d7      	b.n	2812 <MiMAC_ReceivedPacket+0x36>
		switch (addrMode)
    2862:	2b08      	cmp	r3, #8
    2864:	d100      	bne.n	2868 <MiMAC_ReceivedPacket+0x8c>
    2866:	e131      	b.n	2acc <MiMAC_ReceivedPacket+0x2f0>
    2868:	2980      	cmp	r1, #128	; 0x80
    286a:	d1f4      	bne.n	2856 <MiMAC_ReceivedPacket+0x7a>
				MACRxPacket.flags.bits.broadcast = 1;
    286c:	4bac      	ldr	r3, [pc, #688]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    286e:	7819      	ldrb	r1, [r3, #0]
    2870:	2404      	movs	r4, #4
    2872:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2874:	2480      	movs	r4, #128	; 0x80
    2876:	4264      	negs	r4, r4
    2878:	4321      	orrs	r1, r4
    287a:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    287c:	2101      	movs	r1, #1
    287e:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2880:	4ca6      	ldr	r4, [pc, #664]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2882:	01d1      	lsls	r1, r2, #7
    2884:	1a88      	subs	r0, r1, r2
    2886:	1821      	adds	r1, r4, r0
    2888:	790d      	ldrb	r5, [r1, #4]
    288a:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    288c:	7949      	ldrb	r1, [r1, #5]
    288e:	7459      	strb	r1, [r3, #17]
    2890:	01d1      	lsls	r1, r2, #7
    2892:	1a8a      	subs	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    2894:	1d91      	adds	r1, r2, #6
    2896:	1909      	adds	r1, r1, r4
    2898:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    289a:	5d01      	ldrb	r1, [r0, r4]
    289c:	390b      	subs	r1, #11
    289e:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    28a0:	3208      	adds	r2, #8
    28a2:	1912      	adds	r2, r2, r4
    28a4:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    28a6:	4b9c      	ldr	r3, [pc, #624]	; (2b18 <MiMAC_ReceivedPacket+0x33c>)
    28a8:	781b      	ldrb	r3, [r3, #0]
    28aa:	01d9      	lsls	r1, r3, #7
    28ac:	1ac9      	subs	r1, r1, r3
    28ae:	4a9b      	ldr	r2, [pc, #620]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    28b0:	1852      	adds	r2, r2, r1
    28b2:	7851      	ldrb	r1, [r2, #1]
    28b4:	070a      	lsls	r2, r1, #28
    28b6:	d500      	bpl.n	28ba <MiMAC_ReceivedPacket+0xde>
    28b8:	e129      	b.n	2b0e <MiMAC_ReceivedPacket+0x332>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    28ba:	2207      	movs	r2, #7
    28bc:	400a      	ands	r2, r1
    28be:	2a01      	cmp	r2, #1
    28c0:	d100      	bne.n	28c4 <MiMAC_ReceivedPacket+0xe8>
    28c2:	e131      	b.n	2b28 <MiMAC_ReceivedPacket+0x34c>
    28c4:	2a00      	cmp	r2, #0
    28c6:	d100      	bne.n	28ca <MiMAC_ReceivedPacket+0xee>
    28c8:	e149      	b.n	2b5e <MiMAC_ReceivedPacket+0x382>
    28ca:	2a03      	cmp	r2, #3
    28cc:	d100      	bne.n	28d0 <MiMAC_ReceivedPacket+0xf4>
    28ce:	e13e      	b.n	2b4e <MiMAC_ReceivedPacket+0x372>
			MiMAC_DiscardPacket();
    28d0:	4b94      	ldr	r3, [pc, #592]	; (2b24 <MiMAC_ReceivedPacket+0x348>)
    28d2:	4798      	blx	r3
			return false;
    28d4:	2000      	movs	r0, #0
    28d6:	e79a      	b.n	280e <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    28d8:	01d1      	lsls	r1, r2, #7
    28da:	1a89      	subs	r1, r1, r2
    28dc:	4b8f      	ldr	r3, [pc, #572]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    28de:	185b      	adds	r3, r3, r1
    28e0:	799b      	ldrb	r3, [r3, #6]
    28e2:	2bff      	cmp	r3, #255	; 0xff
    28e4:	d01c      	beq.n	2920 <MiMAC_ReceivedPacket+0x144>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    28e6:	498e      	ldr	r1, [pc, #568]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    28e8:	780c      	ldrb	r4, [r1, #0]
    28ea:	2380      	movs	r3, #128	; 0x80
    28ec:	425b      	negs	r3, r3
    28ee:	4323      	orrs	r3, r4
    28f0:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    28f2:	2d00      	cmp	r5, #0
    28f4:	d021      	beq.n	293a <MiMAC_ReceivedPacket+0x15e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    28f6:	4c89      	ldr	r4, [pc, #548]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    28f8:	01c3      	lsls	r3, r0, #7
    28fa:	1a18      	subs	r0, r3, r0
    28fc:	1823      	adds	r3, r4, r0
    28fe:	791d      	ldrb	r5, [r3, #4]
    2900:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2902:	795b      	ldrb	r3, [r3, #5]
    2904:	744b      	strb	r3, [r1, #17]
    2906:	01d3      	lsls	r3, r2, #7
    2908:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    290a:	0013      	movs	r3, r2
    290c:	3308      	adds	r3, #8
    290e:	191b      	adds	r3, r3, r4
    2910:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    2912:	5d03      	ldrb	r3, [r0, r4]
    2914:	3b13      	subs	r3, #19
    2916:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2918:	3210      	adds	r2, #16
    291a:	1912      	adds	r2, r2, r4
    291c:	608a      	str	r2, [r1, #8]
    291e:	e7c2      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2920:	01d1      	lsls	r1, r2, #7
    2922:	1a89      	subs	r1, r1, r2
    2924:	4b7d      	ldr	r3, [pc, #500]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2926:	185b      	adds	r3, r3, r1
    2928:	79db      	ldrb	r3, [r3, #7]
    292a:	2bff      	cmp	r3, #255	; 0xff
    292c:	d1db      	bne.n	28e6 <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.flags.bits.broadcast = 1;
    292e:	497c      	ldr	r1, [pc, #496]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    2930:	780b      	ldrb	r3, [r1, #0]
    2932:	2404      	movs	r4, #4
    2934:	4323      	orrs	r3, r4
    2936:	700b      	strb	r3, [r1, #0]
    2938:	e7d5      	b.n	28e6 <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    293a:	4979      	ldr	r1, [pc, #484]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    293c:	4c77      	ldr	r4, [pc, #476]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    293e:	01c3      	lsls	r3, r0, #7
    2940:	1a18      	subs	r0, r3, r0
    2942:	1823      	adds	r3, r4, r0
    2944:	7a1d      	ldrb	r5, [r3, #8]
    2946:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2948:	7a5b      	ldrb	r3, [r3, #9]
    294a:	744b      	strb	r3, [r1, #17]
    294c:	01d3      	lsls	r3, r2, #7
    294e:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2950:	0013      	movs	r3, r2
    2952:	330a      	adds	r3, #10
    2954:	191b      	adds	r3, r3, r4
    2956:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2958:	5d03      	ldrb	r3, [r0, r4]
    295a:	3b15      	subs	r3, #21
    295c:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    295e:	3212      	adds	r2, #18
    2960:	1912      	adds	r2, r2, r4
    2962:	608a      	str	r2, [r1, #8]
    2964:	e79f      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    2966:	496e      	ldr	r1, [pc, #440]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    2968:	780c      	ldrb	r4, [r1, #0]
    296a:	2380      	movs	r3, #128	; 0x80
    296c:	425b      	negs	r3, r3
    296e:	4323      	orrs	r3, r4
    2970:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    2972:	2d00      	cmp	r5, #0
    2974:	d014      	beq.n	29a0 <MiMAC_ReceivedPacket+0x1c4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2976:	4c69      	ldr	r4, [pc, #420]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2978:	01d3      	lsls	r3, r2, #7
    297a:	1a98      	subs	r0, r3, r2
    297c:	1823      	adds	r3, r4, r0
    297e:	791d      	ldrb	r5, [r3, #4]
    2980:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2982:	795b      	ldrb	r3, [r3, #5]
    2984:	744b      	strb	r3, [r1, #17]
    2986:	01d3      	lsls	r3, r2, #7
    2988:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    298a:	0013      	movs	r3, r2
    298c:	330e      	adds	r3, #14
    298e:	191b      	adds	r3, r3, r4
    2990:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    2992:	5d03      	ldrb	r3, [r0, r4]
    2994:	3b19      	subs	r3, #25
    2996:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    2998:	3216      	adds	r2, #22
    299a:	1912      	adds	r2, r2, r4
    299c:	608a      	str	r2, [r1, #8]
    299e:	e782      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    29a0:	495f      	ldr	r1, [pc, #380]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    29a2:	4c5e      	ldr	r4, [pc, #376]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    29a4:	01d3      	lsls	r3, r2, #7
    29a6:	1a98      	subs	r0, r3, r2
    29a8:	1823      	adds	r3, r4, r0
    29aa:	7b9d      	ldrb	r5, [r3, #14]
    29ac:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    29ae:	7bdb      	ldrb	r3, [r3, #15]
    29b0:	744b      	strb	r3, [r1, #17]
    29b2:	01d3      	lsls	r3, r2, #7
    29b4:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    29b6:	0013      	movs	r3, r2
    29b8:	3310      	adds	r3, #16
    29ba:	191b      	adds	r3, r3, r4
    29bc:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    29be:	5d03      	ldrb	r3, [r0, r4]
    29c0:	3b1b      	subs	r3, #27
    29c2:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    29c4:	3218      	adds	r2, #24
    29c6:	1912      	adds	r2, r2, r4
    29c8:	608a      	str	r2, [r1, #8]
    29ca:	e76c      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    29cc:	01d1      	lsls	r1, r2, #7
    29ce:	1a89      	subs	r1, r1, r2
    29d0:	4b52      	ldr	r3, [pc, #328]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    29d2:	185b      	adds	r3, r3, r1
    29d4:	799b      	ldrb	r3, [r3, #6]
    29d6:	2bff      	cmp	r3, #255	; 0xff
    29d8:	d01f      	beq.n	2a1a <MiMAC_ReceivedPacket+0x23e>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    29da:	4b51      	ldr	r3, [pc, #324]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    29dc:	781c      	ldrb	r4, [r3, #0]
    29de:	2180      	movs	r1, #128	; 0x80
    29e0:	4249      	negs	r1, r1
    29e2:	4321      	orrs	r1, r4
    29e4:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    29e6:	2101      	movs	r1, #1
    29e8:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    29ea:	2d00      	cmp	r5, #0
    29ec:	d122      	bne.n	2a34 <MiMAC_ReceivedPacket+0x258>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    29ee:	0019      	movs	r1, r3
    29f0:	4c4a      	ldr	r4, [pc, #296]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    29f2:	01c3      	lsls	r3, r0, #7
    29f4:	1a18      	subs	r0, r3, r0
    29f6:	1823      	adds	r3, r4, r0
    29f8:	7a1d      	ldrb	r5, [r3, #8]
    29fa:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    29fc:	7a5b      	ldrb	r3, [r3, #9]
    29fe:	744b      	strb	r3, [r1, #17]
    2a00:	01d3      	lsls	r3, r2, #7
    2a02:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2a04:	0013      	movs	r3, r2
    2a06:	330a      	adds	r3, #10
    2a08:	191b      	adds	r3, r3, r4
    2a0a:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    2a0c:	5d03      	ldrb	r3, [r0, r4]
    2a0e:	3b0f      	subs	r3, #15
    2a10:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    2a12:	320c      	adds	r2, #12
    2a14:	1912      	adds	r2, r2, r4
    2a16:	608a      	str	r2, [r1, #8]
    2a18:	e745      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2a1a:	01d1      	lsls	r1, r2, #7
    2a1c:	1a89      	subs	r1, r1, r2
    2a1e:	4b3f      	ldr	r3, [pc, #252]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2a20:	185b      	adds	r3, r3, r1
    2a22:	79db      	ldrb	r3, [r3, #7]
    2a24:	2bff      	cmp	r3, #255	; 0xff
    2a26:	d1d8      	bne.n	29da <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.flags.bits.broadcast = 1;
    2a28:	493d      	ldr	r1, [pc, #244]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    2a2a:	780b      	ldrb	r3, [r1, #0]
    2a2c:	2404      	movs	r4, #4
    2a2e:	4323      	orrs	r3, r4
    2a30:	700b      	strb	r3, [r1, #0]
    2a32:	e7d2      	b.n	29da <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2a34:	493a      	ldr	r1, [pc, #232]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    2a36:	4c39      	ldr	r4, [pc, #228]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2a38:	01c3      	lsls	r3, r0, #7
    2a3a:	1a18      	subs	r0, r3, r0
    2a3c:	1823      	adds	r3, r4, r0
    2a3e:	791d      	ldrb	r5, [r3, #4]
    2a40:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2a42:	795b      	ldrb	r3, [r3, #5]
    2a44:	744b      	strb	r3, [r1, #17]
    2a46:	01d3      	lsls	r3, r2, #7
    2a48:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    2a4a:	0013      	movs	r3, r2
    2a4c:	3308      	adds	r3, #8
    2a4e:	191b      	adds	r3, r3, r4
    2a50:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    2a52:	5d03      	ldrb	r3, [r0, r4]
    2a54:	3b0d      	subs	r3, #13
    2a56:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    2a58:	320a      	adds	r2, #10
    2a5a:	1912      	adds	r2, r2, r4
    2a5c:	608a      	str	r2, [r1, #8]
    2a5e:	e722      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2a60:	4b2f      	ldr	r3, [pc, #188]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    2a62:	781c      	ldrb	r4, [r3, #0]
    2a64:	2180      	movs	r1, #128	; 0x80
    2a66:	4249      	negs	r1, r1
    2a68:	4321      	orrs	r1, r4
    2a6a:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2a6c:	2101      	movs	r1, #1
    2a6e:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    2a70:	2d00      	cmp	r5, #0
    2a72:	d015      	beq.n	2aa0 <MiMAC_ReceivedPacket+0x2c4>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2a74:	0019      	movs	r1, r3
    2a76:	4c29      	ldr	r4, [pc, #164]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2a78:	01d3      	lsls	r3, r2, #7
    2a7a:	1a98      	subs	r0, r3, r2
    2a7c:	1823      	adds	r3, r4, r0
    2a7e:	791d      	ldrb	r5, [r3, #4]
    2a80:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2a82:	795b      	ldrb	r3, [r3, #5]
    2a84:	744b      	strb	r3, [r1, #17]
    2a86:	01d3      	lsls	r3, r2, #7
    2a88:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    2a8a:	0013      	movs	r3, r2
    2a8c:	330e      	adds	r3, #14
    2a8e:	191b      	adds	r3, r3, r4
    2a90:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    2a92:	5d03      	ldrb	r3, [r0, r4]
    2a94:	3b13      	subs	r3, #19
    2a96:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2a98:	3210      	adds	r2, #16
    2a9a:	1912      	adds	r2, r2, r4
    2a9c:	608a      	str	r2, [r1, #8]
    2a9e:	e702      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    2aa0:	491f      	ldr	r1, [pc, #124]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    2aa2:	4c1e      	ldr	r4, [pc, #120]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2aa4:	01d3      	lsls	r3, r2, #7
    2aa6:	1a98      	subs	r0, r3, r2
    2aa8:	1823      	adds	r3, r4, r0
    2aaa:	7b5d      	ldrb	r5, [r3, #13]
    2aac:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    2aae:	7b9b      	ldrb	r3, [r3, #14]
    2ab0:	744b      	strb	r3, [r1, #17]
    2ab2:	01d3      	lsls	r3, r2, #7
    2ab4:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    2ab6:	0013      	movs	r3, r2
    2ab8:	330f      	adds	r3, #15
    2aba:	191b      	adds	r3, r3, r4
    2abc:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2abe:	5d03      	ldrb	r3, [r0, r4]
    2ac0:	3b15      	subs	r3, #21
    2ac2:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2ac4:	3212      	adds	r2, #18
    2ac6:	1912      	adds	r2, r2, r4
    2ac8:	608a      	str	r2, [r1, #8]
    2aca:	e6ec      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2acc:	01d1      	lsls	r1, r2, #7
    2ace:	1a89      	subs	r1, r1, r2
    2ad0:	4b12      	ldr	r3, [pc, #72]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2ad2:	185b      	adds	r3, r3, r1
    2ad4:	799b      	ldrb	r3, [r3, #6]
    2ad6:	2bff      	cmp	r3, #255	; 0xff
    2ad8:	d00c      	beq.n	2af4 <MiMAC_ReceivedPacket+0x318>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    2ada:	4911      	ldr	r1, [pc, #68]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    2adc:	4c0f      	ldr	r4, [pc, #60]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2ade:	01c3      	lsls	r3, r0, #7
    2ae0:	1a18      	subs	r0, r3, r0
    2ae2:	5d03      	ldrb	r3, [r0, r4]
    2ae4:	3b0a      	subs	r3, #10
    2ae6:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    2ae8:	01d3      	lsls	r3, r2, #7
    2aea:	1a9a      	subs	r2, r3, r2
    2aec:	3208      	adds	r2, #8
    2aee:	1912      	adds	r2, r2, r4
    2af0:	608a      	str	r2, [r1, #8]
			break;
    2af2:	e6d8      	b.n	28a6 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2af4:	01d1      	lsls	r1, r2, #7
    2af6:	1a89      	subs	r1, r1, r2
    2af8:	4b08      	ldr	r3, [pc, #32]	; (2b1c <MiMAC_ReceivedPacket+0x340>)
    2afa:	185b      	adds	r3, r3, r1
    2afc:	79db      	ldrb	r3, [r3, #7]
    2afe:	2bff      	cmp	r3, #255	; 0xff
    2b00:	d1eb      	bne.n	2ada <MiMAC_ReceivedPacket+0x2fe>
					MACRxPacket.flags.bits.broadcast = 1;
    2b02:	4907      	ldr	r1, [pc, #28]	; (2b20 <MiMAC_ReceivedPacket+0x344>)
    2b04:	780b      	ldrb	r3, [r1, #0]
    2b06:	2404      	movs	r4, #4
    2b08:	4323      	orrs	r3, r4
    2b0a:	700b      	strb	r3, [r1, #0]
    2b0c:	e7e5      	b.n	2ada <MiMAC_ReceivedPacket+0x2fe>
			MiMAC_DiscardPacket();
    2b0e:	4b05      	ldr	r3, [pc, #20]	; (2b24 <MiMAC_ReceivedPacket+0x348>)
    2b10:	4798      	blx	r3
			return false;
    2b12:	2000      	movs	r0, #0
    2b14:	e67b      	b.n	280e <MiMAC_ReceivedPacket+0x32>
    2b16:	46c0      	nop			; (mov r8, r8)
    2b18:	20000009 	.word	0x20000009
    2b1c:	20000490 	.word	0x20000490
    2b20:	2000305c 	.word	0x2000305c
    2b24:	000027c1 	.word	0x000027c1
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    2b28:	4912      	ldr	r1, [pc, #72]	; (2b74 <MiMAC_ReceivedPacket+0x398>)
    2b2a:	780a      	ldrb	r2, [r1, #0]
    2b2c:	2003      	movs	r0, #3
    2b2e:	4382      	bics	r2, r0
    2b30:	700a      	strb	r2, [r1, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    2b32:	4a11      	ldr	r2, [pc, #68]	; (2b78 <MiMAC_ReceivedPacket+0x39c>)
    2b34:	01d9      	lsls	r1, r3, #7
    2b36:	1acb      	subs	r3, r1, r3
    2b38:	5c98      	ldrb	r0, [r3, r2]
    2b3a:	490e      	ldr	r1, [pc, #56]	; (2b74 <MiMAC_ReceivedPacket+0x398>)
    2b3c:	18d3      	adds	r3, r2, r3
    2b3e:	181a      	adds	r2, r3, r0
    2b40:	3a01      	subs	r2, #1
    2b42:	7812      	ldrb	r2, [r2, #0]
    2b44:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    2b46:	5c1b      	ldrb	r3, [r3, r0]
    2b48:	734b      	strb	r3, [r1, #13]
		return true;
    2b4a:	2001      	movs	r0, #1
    2b4c:	e65f      	b.n	280e <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    2b4e:	4909      	ldr	r1, [pc, #36]	; (2b74 <MiMAC_ReceivedPacket+0x398>)
    2b50:	780a      	ldrb	r2, [r1, #0]
    2b52:	2003      	movs	r0, #3
    2b54:	4382      	bics	r2, r0
    2b56:	2001      	movs	r0, #1
    2b58:	4302      	orrs	r2, r0
    2b5a:	700a      	strb	r2, [r1, #0]
			break;
    2b5c:	e7e9      	b.n	2b32 <MiMAC_ReceivedPacket+0x356>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    2b5e:	4905      	ldr	r1, [pc, #20]	; (2b74 <MiMAC_ReceivedPacket+0x398>)
    2b60:	780a      	ldrb	r2, [r1, #0]
    2b62:	2003      	movs	r0, #3
    2b64:	4302      	orrs	r2, r0
    2b66:	700a      	strb	r2, [r1, #0]
			break;
    2b68:	e7e3      	b.n	2b32 <MiMAC_ReceivedPacket+0x356>
			BankIndex = i;
    2b6a:	2200      	movs	r2, #0
    2b6c:	4b03      	ldr	r3, [pc, #12]	; (2b7c <MiMAC_ReceivedPacket+0x3a0>)
    2b6e:	701a      	strb	r2, [r3, #0]
    2b70:	e654      	b.n	281c <MiMAC_ReceivedPacket+0x40>
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	2000305c 	.word	0x2000305c
    2b78:	20000490 	.word	0x20000490
    2b7c:	20000009 	.word	0x20000009

00002b80 <MiMAC_ChannelAssessment>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
uint8_t MiMAC_ChannelAssessment(uint8_t AssessmentMode)
{
    2b80:	b510      	push	{r4, lr}
		uint8_t ed;
		ed = PHY_EdReq();
		//printf(" %u ", ed);
		return ed;
	}
	return 0;
    2b82:	2300      	movs	r3, #0
	if( AssessmentMode == CHANNEL_ASSESSMENT_ENERGY_DETECT)
    2b84:	2801      	cmp	r0, #1
    2b86:	d001      	beq.n	2b8c <MiMAC_ChannelAssessment+0xc>
}
    2b88:	0018      	movs	r0, r3
    2b8a:	bd10      	pop	{r4, pc}
		ed = PHY_EdReq();
    2b8c:	4b01      	ldr	r3, [pc, #4]	; (2b94 <MiMAC_ChannelAssessment+0x14>)
    2b8e:	4798      	blx	r3
    2b90:	0003      	movs	r3, r0
		return ed;
    2b92:	e7f9      	b.n	2b88 <MiMAC_ChannelAssessment+0x8>
    2b94:	00002e05 	.word	0x00002e05

00002b98 <MiMAC_SymbolToTicks>:
* Returns:
*      converted value in uint32.
*****************************************************************************************/
uint32_t MiMAC_SymbolToTicks(uint32_t symbols)
{
	return SYMBOLS_TO_TICKS(symbols);
    2b98:	0100      	lsls	r0, r0, #4
}
    2b9a:	4770      	bx	lr

00002b9c <MiMAC_GetPHYChannelInfo>:
*****************************************************************************************/
uint32_t MiMAC_GetPHYChannelInfo(void)
{
	uint32_t channelMap = FULL_CHANNEL_MAP;
	return channelMap;
}
    2b9c:	4800      	ldr	r0, [pc, #0]	; (2ba0 <MiMAC_GetPHYChannelInfo+0x4>)
    2b9e:	4770      	bx	lr
    2ba0:	07fff800 	.word	0x07fff800

00002ba4 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    2ba4:	4b02      	ldr	r3, [pc, #8]	; (2bb0 <PHY_DataConf+0xc>)
    2ba6:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    2ba8:	2201      	movs	r2, #1
    2baa:	4b02      	ldr	r3, [pc, #8]	; (2bb4 <PHY_DataConf+0x10>)
    2bac:	701a      	strb	r2, [r3, #0]
}
    2bae:	4770      	bx	lr
    2bb0:	20000484 	.word	0x20000484
    2bb4:	2000022f 	.word	0x2000022f

00002bb8 <MiMAC_Task>:

void MiMAC_Task(void)
{
    2bb8:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    2bba:	4b0b      	ldr	r3, [pc, #44]	; (2be8 <MiMAC_Task+0x30>)
    2bbc:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    2bbe:	4b0b      	ldr	r3, [pc, #44]	; (2bec <MiMAC_Task+0x34>)
    2bc0:	681b      	ldr	r3, [r3, #0]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d003      	beq.n	2bce <MiMAC_Task+0x16>
    2bc6:	4a0a      	ldr	r2, [pc, #40]	; (2bf0 <MiMAC_Task+0x38>)
    2bc8:	7812      	ldrb	r2, [r2, #0]
    2bca:	2a00      	cmp	r2, #0
    2bcc:	d100      	bne.n	2bd0 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    2bce:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    2bd0:	4a08      	ldr	r2, [pc, #32]	; (2bf4 <MiMAC_Task+0x3c>)
    2bd2:	6812      	ldr	r2, [r2, #0]
    2bd4:	4908      	ldr	r1, [pc, #32]	; (2bf8 <MiMAC_Task+0x40>)
    2bd6:	7809      	ldrb	r1, [r1, #0]
    2bd8:	4808      	ldr	r0, [pc, #32]	; (2bfc <MiMAC_Task+0x44>)
    2bda:	7800      	ldrb	r0, [r0, #0]
    2bdc:	4798      	blx	r3
	  dataConfAvailable = false;
    2bde:	2200      	movs	r2, #0
    2be0:	4b03      	ldr	r3, [pc, #12]	; (2bf0 <MiMAC_Task+0x38>)
    2be2:	701a      	strb	r2, [r3, #0]
}
    2be4:	e7f3      	b.n	2bce <MiMAC_Task+0x16>
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	00002e85 	.word	0x00002e85
    2bec:	20000230 	.word	0x20000230
    2bf0:	2000022f 	.word	0x2000022f
    2bf4:	20000238 	.word	0x20000238
    2bf8:	20000484 	.word	0x20000484
    2bfc:	20000234 	.word	0x20000234

00002c00 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c02:	0004      	movs	r4, r0
	trx_reg_write(reg, value);
    2c04:	4f0b      	ldr	r7, [pc, #44]	; (2c34 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    2c06:	4e0c      	ldr	r6, [pc, #48]	; (2c38 <phyTrxSetState+0x38>)
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c08:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2c0a:	2103      	movs	r1, #3
    2c0c:	2002      	movs	r0, #2
    2c0e:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2c10:	2001      	movs	r0, #1
    2c12:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c14:	4028      	ands	r0, r5
    2c16:	2808      	cmp	r0, #8
    2c18:	d1f7      	bne.n	2c0a <phyTrxSetState+0xa>
	trx_reg_write(reg, value);
    2c1a:	4f06      	ldr	r7, [pc, #24]	; (2c34 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    2c1c:	4e06      	ldr	r6, [pc, #24]	; (2c38 <phyTrxSetState+0x38>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c1e:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2c20:	0021      	movs	r1, r4
    2c22:	2002      	movs	r0, #2
    2c24:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2c26:	2001      	movs	r0, #1
    2c28:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c2a:	4028      	ands	r0, r5
    2c2c:	4284      	cmp	r4, r0
    2c2e:	d1f7      	bne.n	2c20 <phyTrxSetState+0x20>
}
    2c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	00003d1d 	.word	0x00003d1d
    2c38:	00003c21 	.word	0x00003c21

00002c3c <phySetRxState>:
{
    2c3c:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2c3e:	2008      	movs	r0, #8
    2c40:	4b08      	ldr	r3, [pc, #32]	; (2c64 <phySetRxState+0x28>)
    2c42:	4798      	blx	r3
	value = trx_reg_read(reg);
    2c44:	200f      	movs	r0, #15
    2c46:	4b08      	ldr	r3, [pc, #32]	; (2c68 <phySetRxState+0x2c>)
    2c48:	4798      	blx	r3
	if (phyRxState) {
    2c4a:	4b08      	ldr	r3, [pc, #32]	; (2c6c <phySetRxState+0x30>)
    2c4c:	781b      	ldrb	r3, [r3, #0]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d100      	bne.n	2c54 <phySetRxState+0x18>
}
    2c52:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    2c54:	2016      	movs	r0, #22
    2c56:	4b03      	ldr	r3, [pc, #12]	; (2c64 <phySetRxState+0x28>)
    2c58:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    2c5a:	2201      	movs	r2, #1
    2c5c:	4b04      	ldr	r3, [pc, #16]	; (2c70 <phySetRxState+0x34>)
    2c5e:	701a      	strb	r2, [r3, #0]
}
    2c60:	e7f7      	b.n	2c52 <phySetRxState+0x16>
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	00002c01 	.word	0x00002c01
    2c68:	00003c21 	.word	0x00003c21
    2c6c:	200002bc 	.word	0x200002bc
    2c70:	200002bd 	.word	0x200002bd

00002c74 <PHY_DataReq>:
{
    2c74:	b510      	push	{r4, lr}
    2c76:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2c78:	2019      	movs	r0, #25
    2c7a:	4b0c      	ldr	r3, [pc, #48]	; (2cac <PHY_DataReq+0x38>)
    2c7c:	4798      	blx	r3
	value = trx_reg_read(reg);
    2c7e:	200f      	movs	r0, #15
    2c80:	4b0b      	ldr	r3, [pc, #44]	; (2cb0 <PHY_DataReq+0x3c>)
    2c82:	4798      	blx	r3
	data[0] += 2;// 2
    2c84:	7821      	ldrb	r1, [r4, #0]
    2c86:	1c8b      	adds	r3, r1, #2
    2c88:	7023      	strb	r3, [r4, #0]
	trx_frame_write(&data[0], (data[0]-1 ) /* length value*/);
    2c8a:	3101      	adds	r1, #1
    2c8c:	b2c9      	uxtb	r1, r1
    2c8e:	0020      	movs	r0, r4
    2c90:	4b08      	ldr	r3, [pc, #32]	; (2cb4 <PHY_DataReq+0x40>)
    2c92:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
    2c94:	2203      	movs	r2, #3
    2c96:	4b08      	ldr	r3, [pc, #32]	; (2cb8 <PHY_DataReq+0x44>)
    2c98:	701a      	strb	r2, [r3, #0]
    2c9a:	4b08      	ldr	r3, [pc, #32]	; (2cbc <PHY_DataReq+0x48>)
    2c9c:	2280      	movs	r2, #128	; 0x80
    2c9e:	0352      	lsls	r2, r2, #13
    2ca0:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    2ca6:	615a      	str	r2, [r3, #20]
}
    2ca8:	bd10      	pop	{r4, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	00002c01 	.word	0x00002c01
    2cb0:	00003c21 	.word	0x00003c21
    2cb4:	00003f4d 	.word	0x00003f4d
    2cb8:	200002bd 	.word	0x200002bd
    2cbc:	41004400 	.word	0x41004400

00002cc0 <PHY_RandomReq>:
{
    2cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cc2:	46c6      	mov	lr, r8
    2cc4:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    2cc6:	2006      	movs	r0, #6
    2cc8:	4b0d      	ldr	r3, [pc, #52]	; (2d00 <PHY_RandomReq+0x40>)
    2cca:	4798      	blx	r3
    2ccc:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    2cce:	2500      	movs	r5, #0
		delay_cycles_us(1);
    2cd0:	4f0c      	ldr	r7, [pc, #48]	; (2d04 <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    2cd2:	4e0d      	ldr	r6, [pc, #52]	; (2d08 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2cd4:	2303      	movs	r3, #3
    2cd6:	4698      	mov	r8, r3
		delay_cycles_us(1);
    2cd8:	2001      	movs	r0, #1
    2cda:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2cdc:	2006      	movs	r0, #6
    2cde:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2ce0:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    2ce2:	4643      	mov	r3, r8
    2ce4:	4018      	ands	r0, r3
    2ce6:	40a0      	lsls	r0, r4
    2ce8:	4305      	orrs	r5, r0
    2cea:	b2ad      	uxth	r5, r5
    2cec:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    2cee:	2c10      	cmp	r4, #16
    2cf0:	d1f2      	bne.n	2cd8 <PHY_RandomReq+0x18>
	phySetRxState();
    2cf2:	4b06      	ldr	r3, [pc, #24]	; (2d0c <PHY_RandomReq+0x4c>)
    2cf4:	4798      	blx	r3
}
    2cf6:	0028      	movs	r0, r5
    2cf8:	bc04      	pop	{r2}
    2cfa:	4690      	mov	r8, r2
    2cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	00002c01 	.word	0x00002c01
    2d04:	00000155 	.word	0x00000155
    2d08:	00003c21 	.word	0x00003c21
    2d0c:	00002c3d 	.word	0x00002c3d

00002d10 <PHY_Init>:
{
    2d10:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2d12:	4b0d      	ldr	r3, [pc, #52]	; (2d48 <PHY_Init+0x38>)
    2d14:	4798      	blx	r3
	PhyReset();
    2d16:	4b0d      	ldr	r3, [pc, #52]	; (2d4c <PHY_Init+0x3c>)
    2d18:	4798      	blx	r3
	phyRxState = false;
    2d1a:	2200      	movs	r2, #0
    2d1c:	4b0c      	ldr	r3, [pc, #48]	; (2d50 <PHY_Init+0x40>)
    2d1e:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    2d20:	4e0c      	ldr	r6, [pc, #48]	; (2d54 <PHY_Init+0x44>)
	value = trx_reg_read(reg);
    2d22:	4d0d      	ldr	r5, [pc, #52]	; (2d58 <PHY_Init+0x48>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d24:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2d26:	2108      	movs	r1, #8
    2d28:	2002      	movs	r0, #2
    2d2a:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2d2c:	2001      	movs	r0, #1
    2d2e:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d30:	4020      	ands	r0, r4
    2d32:	2808      	cmp	r0, #8
    2d34:	d1f7      	bne.n	2d26 <PHY_Init+0x16>
	trx_reg_write(reg, value);
    2d36:	212e      	movs	r1, #46	; 0x2e
    2d38:	3804      	subs	r0, #4
    2d3a:	4c06      	ldr	r4, [pc, #24]	; (2d54 <PHY_Init+0x44>)
    2d3c:	47a0      	blx	r4
    2d3e:	21a0      	movs	r1, #160	; 0xa0
    2d40:	200c      	movs	r0, #12
    2d42:	47a0      	blx	r4
}
    2d44:	bd70      	pop	{r4, r5, r6, pc}
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	00003ad5 	.word	0x00003ad5
    2d4c:	00003bf1 	.word	0x00003bf1
    2d50:	200002bc 	.word	0x200002bc
    2d54:	00003d1d 	.word	0x00003d1d
    2d58:	00003c21 	.word	0x00003c21

00002d5c <PHY_SetRxState>:
{
    2d5c:	b510      	push	{r4, lr}
	phyRxState = rx;
    2d5e:	4b02      	ldr	r3, [pc, #8]	; (2d68 <PHY_SetRxState+0xc>)
    2d60:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    2d62:	4b02      	ldr	r3, [pc, #8]	; (2d6c <PHY_SetRxState+0x10>)
    2d64:	4798      	blx	r3
}
    2d66:	bd10      	pop	{r4, pc}
    2d68:	200002bc 	.word	0x200002bc
    2d6c:	00002c3d 	.word	0x00002c3d

00002d70 <PHY_SetChannel>:
{
    2d70:	b510      	push	{r4, lr}
    2d72:	0004      	movs	r4, r0
	value = trx_reg_read(reg);
    2d74:	2008      	movs	r0, #8
    2d76:	4b05      	ldr	r3, [pc, #20]	; (2d8c <PHY_SetChannel+0x1c>)
    2d78:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    2d7a:	231f      	movs	r3, #31
    2d7c:	0001      	movs	r1, r0
    2d7e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    2d80:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    2d82:	b2c9      	uxtb	r1, r1
    2d84:	2008      	movs	r0, #8
    2d86:	4b02      	ldr	r3, [pc, #8]	; (2d90 <PHY_SetChannel+0x20>)
    2d88:	4798      	blx	r3
}
    2d8a:	bd10      	pop	{r4, pc}
    2d8c:	00003c21 	.word	0x00003c21
    2d90:	00003d1d 	.word	0x00003d1d

00002d94 <PHY_SetPanId>:
{
    2d94:	b530      	push	{r4, r5, lr}
    2d96:	b083      	sub	sp, #12
    2d98:	466b      	mov	r3, sp
    2d9a:	1d9d      	adds	r5, r3, #6
    2d9c:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    2d9e:	b2c1      	uxtb	r1, r0
    2da0:	2022      	movs	r0, #34	; 0x22
    2da2:	4c03      	ldr	r4, [pc, #12]	; (2db0 <PHY_SetPanId+0x1c>)
    2da4:	47a0      	blx	r4
    2da6:	7869      	ldrb	r1, [r5, #1]
    2da8:	2023      	movs	r0, #35	; 0x23
    2daa:	47a0      	blx	r4
}
    2dac:	b003      	add	sp, #12
    2dae:	bd30      	pop	{r4, r5, pc}
    2db0:	00003d1d 	.word	0x00003d1d

00002db4 <PHY_SetShortAddr>:
{
    2db4:	b570      	push	{r4, r5, r6, lr}
    2db6:	b082      	sub	sp, #8
    2db8:	466b      	mov	r3, sp
    2dba:	1d9e      	adds	r6, r3, #6
    2dbc:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    2dbe:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    2dc0:	0021      	movs	r1, r4
    2dc2:	2020      	movs	r0, #32
    2dc4:	4d05      	ldr	r5, [pc, #20]	; (2ddc <PHY_SetShortAddr+0x28>)
    2dc6:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    2dc8:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    2dca:	0031      	movs	r1, r6
    2dcc:	2021      	movs	r0, #33	; 0x21
    2dce:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    2dd0:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    2dd2:	b2e1      	uxtb	r1, r4
    2dd4:	202d      	movs	r0, #45	; 0x2d
    2dd6:	47a8      	blx	r5
}
    2dd8:	b002      	add	sp, #8
    2dda:	bd70      	pop	{r4, r5, r6, pc}
    2ddc:	00003d1d 	.word	0x00003d1d

00002de0 <PHY_Sleep>:
{
    2de0:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2de2:	2008      	movs	r0, #8
    2de4:	4b04      	ldr	r3, [pc, #16]	; (2df8 <PHY_Sleep+0x18>)
    2de6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2de8:	2280      	movs	r2, #128	; 0x80
    2dea:	0352      	lsls	r2, r2, #13
    2dec:	4b03      	ldr	r3, [pc, #12]	; (2dfc <PHY_Sleep+0x1c>)
    2dee:	619a      	str	r2, [r3, #24]
	phyState = PHY_STATE_SLEEP;
    2df0:	2202      	movs	r2, #2
    2df2:	4b03      	ldr	r3, [pc, #12]	; (2e00 <PHY_Sleep+0x20>)
    2df4:	701a      	strb	r2, [r3, #0]
}
    2df6:	bd10      	pop	{r4, pc}
    2df8:	00002c01 	.word	0x00002c01
    2dfc:	41004400 	.word	0x41004400
    2e00:	200002bd 	.word	0x200002bd

00002e04 <PHY_EdReq>:
{
    2e04:	b570      	push	{r4, r5, r6, lr}
	phyTrxSetState(TRX_CMD_PLL_ON);
    2e06:	2009      	movs	r0, #9
    2e08:	4d12      	ldr	r5, [pc, #72]	; (2e54 <PHY_EdReq+0x50>)
    2e0a:	47a8      	blx	r5
	value = trx_reg_read(reg);
    2e0c:	200f      	movs	r0, #15
    2e0e:	4c12      	ldr	r4, [pc, #72]	; (2e58 <PHY_EdReq+0x54>)
    2e10:	47a0      	blx	r4
    2e12:	2015      	movs	r0, #21
    2e14:	47a0      	blx	r4
    2e16:	0006      	movs	r6, r0
	phyWriteRegister(RX_SYN_REG, (prev_rx_pdt_dis | (1<<7)));
    2e18:	2180      	movs	r1, #128	; 0x80
    2e1a:	4249      	negs	r1, r1
    2e1c:	4301      	orrs	r1, r0
	trx_reg_write(reg, value);
    2e1e:	b2c9      	uxtb	r1, r1
    2e20:	2015      	movs	r0, #21
    2e22:	4c0e      	ldr	r4, [pc, #56]	; (2e5c <PHY_EdReq+0x58>)
    2e24:	47a0      	blx	r4
	phyTrxSetState(TRX_CMD_RX_ON);
    2e26:	2006      	movs	r0, #6
    2e28:	47a8      	blx	r5
	trx_reg_write(reg, value);
    2e2a:	21ff      	movs	r1, #255	; 0xff
    2e2c:	2007      	movs	r0, #7
    2e2e:	47a0      	blx	r4
	value = trx_reg_read(reg);
    2e30:	4d09      	ldr	r5, [pc, #36]	; (2e58 <PHY_EdReq+0x54>)
	while (0 == (phyReadRegister(IRQ_STATUS_REG) & (1 << CCA_ED_DONE))) {
    2e32:	2410      	movs	r4, #16
	value = trx_reg_read(reg);
    2e34:	200f      	movs	r0, #15
    2e36:	47a8      	blx	r5
	while (0 == (phyReadRegister(IRQ_STATUS_REG) & (1 << CCA_ED_DONE))) {
    2e38:	4204      	tst	r4, r0
    2e3a:	d0fb      	beq.n	2e34 <PHY_EdReq+0x30>
	value = trx_reg_read(reg);
    2e3c:	2007      	movs	r0, #7
    2e3e:	4b06      	ldr	r3, [pc, #24]	; (2e58 <PHY_EdReq+0x54>)
    2e40:	4798      	blx	r3
    2e42:	0004      	movs	r4, r0
	phySetRxState();
    2e44:	4b06      	ldr	r3, [pc, #24]	; (2e60 <PHY_EdReq+0x5c>)
    2e46:	4798      	blx	r3
	trx_reg_write(reg, value);
    2e48:	0031      	movs	r1, r6
    2e4a:	2015      	movs	r0, #21
    2e4c:	4b03      	ldr	r3, [pc, #12]	; (2e5c <PHY_EdReq+0x58>)
    2e4e:	4798      	blx	r3
}
    2e50:	0020      	movs	r0, r4
    2e52:	bd70      	pop	{r4, r5, r6, pc}
    2e54:	00002c01 	.word	0x00002c01
    2e58:	00003c21 	.word	0x00003c21
    2e5c:	00003d1d 	.word	0x00003d1d
    2e60:	00002c3d 	.word	0x00002c3d

00002e64 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    2e64:	b570      	push	{r4, r5, r6, lr}
    2e66:	0005      	movs	r5, r0
    2e68:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    2e6a:	4e05      	ldr	r6, [pc, #20]	; (2e80 <PHY_SetIEEEAddr+0x1c>)
    2e6c:	7829      	ldrb	r1, [r5, #0]
    2e6e:	0020      	movs	r0, r4
    2e70:	47b0      	blx	r6
		ptr_to_reg++;
    2e72:	3501      	adds	r5, #1
    2e74:	3401      	adds	r4, #1
    2e76:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    2e78:	2c2c      	cmp	r4, #44	; 0x2c
    2e7a:	d1f7      	bne.n	2e6c <PHY_SetIEEEAddr+0x8>
	}
}
    2e7c:	bd70      	pop	{r4, r5, r6, pc}
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	00003d1d 	.word	0x00003d1d

00002e84 <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
// Handle Packet Received
void PHY_TaskHandler(void)
{
    2e84:	b570      	push	{r4, r5, r6, lr}
    2e86:	b082      	sub	sp, #8
	if (PHY_STATE_SLEEP == phyState)
    2e88:	4b36      	ldr	r3, [pc, #216]	; (2f64 <PHY_TaskHandler+0xe0>)
    2e8a:	781b      	ldrb	r3, [r3, #0]
    2e8c:	2b02      	cmp	r3, #2
    2e8e:	d00a      	beq.n	2ea6 <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    2e90:	200f      	movs	r0, #15
    2e92:	4b35      	ldr	r3, [pc, #212]	; (2f68 <PHY_TaskHandler+0xe4>)
    2e94:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    2e96:	0703      	lsls	r3, r0, #28
    2e98:	d505      	bpl.n	2ea6 <PHY_TaskHandler+0x22>
	{
		if (PHY_STATE_IDLE == phyState)
    2e9a:	4b32      	ldr	r3, [pc, #200]	; (2f64 <PHY_TaskHandler+0xe0>)
    2e9c:	781b      	ldrb	r3, [r3, #0]
    2e9e:	2b01      	cmp	r3, #1
    2ea0:	d003      	beq.n	2eaa <PHY_TaskHandler+0x26>
					}
			    }
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    2ea2:	2b03      	cmp	r3, #3
    2ea4:	d045      	beq.n	2f32 <PHY_TaskHandler+0xae>
			phySetRxState();
			phyState = PHY_STATE_IDLE;
			PHY_DataConf(status);
		}
	}
}
    2ea6:	b002      	add	sp, #8
    2ea8:	bd70      	pop	{r4, r5, r6, pc}
				if (RxBuffer[i].PayloadLen == 0)
    2eaa:	4b30      	ldr	r3, [pc, #192]	; (2f6c <PHY_TaskHandler+0xe8>)
    2eac:	781c      	ldrb	r4, [r3, #0]
    2eae:	2c00      	cmp	r4, #0
    2eb0:	d010      	beq.n	2ed4 <PHY_TaskHandler+0x50>
    2eb2:	237f      	movs	r3, #127	; 0x7f
    2eb4:	4a2d      	ldr	r2, [pc, #180]	; (2f6c <PHY_TaskHandler+0xe8>)
    2eb6:	5cd3      	ldrb	r3, [r2, r3]
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d00a      	beq.n	2ed2 <PHY_TaskHandler+0x4e>
    2ebc:	23fe      	movs	r3, #254	; 0xfe
    2ebe:	5cd3      	ldrb	r3, [r2, r3]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d024      	beq.n	2f0e <PHY_TaskHandler+0x8a>
    2ec4:	237e      	movs	r3, #126	; 0x7e
    2ec6:	33ff      	adds	r3, #255	; 0xff
    2ec8:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    2eca:	2403      	movs	r4, #3
				if (RxBuffer[i].PayloadLen == 0)
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d1ea      	bne.n	2ea6 <PHY_TaskHandler+0x22>
    2ed0:	e000      	b.n	2ed4 <PHY_TaskHandler+0x50>
			for (i = 0; i < BANK_SIZE; i++)
    2ed2:	2401      	movs	r4, #1
				trx_frame_read(&size, 1);
    2ed4:	466b      	mov	r3, sp
    2ed6:	1ddd      	adds	r5, r3, #7
    2ed8:	2101      	movs	r1, #1
    2eda:	0028      	movs	r0, r5
    2edc:	4e24      	ldr	r6, [pc, #144]	; (2f70 <PHY_TaskHandler+0xec>)
    2ede:	47b0      	blx	r6
			 	trx_frame_read(phyRxBuffer, size + 2);
    2ee0:	7829      	ldrb	r1, [r5, #0]
    2ee2:	3102      	adds	r1, #2
    2ee4:	b2c9      	uxtb	r1, r1
    2ee6:	4823      	ldr	r0, [pc, #140]	; (2f74 <PHY_TaskHandler+0xf0>)
    2ee8:	47b0      	blx	r6
				RxBuffer[RxBank].PayloadLen = size+2;
    2eea:	0021      	movs	r1, r4
    2eec:	7828      	ldrb	r0, [r5, #0]
    2eee:	1c83      	adds	r3, r0, #2
    2ef0:	b2db      	uxtb	r3, r3
    2ef2:	01e2      	lsls	r2, r4, #7
    2ef4:	1b14      	subs	r4, r2, r4
    2ef6:	4a1d      	ldr	r2, [pc, #116]	; (2f6c <PHY_TaskHandler+0xe8>)
    2ef8:	54a3      	strb	r3, [r4, r2]
				if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    2efa:	2b7d      	cmp	r3, #125	; 0x7d
    2efc:	d909      	bls.n	2f12 <PHY_TaskHandler+0x8e>
	value = trx_reg_read(reg);
    2efe:	4d1a      	ldr	r5, [pc, #104]	; (2f68 <PHY_TaskHandler+0xe4>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2f00:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    2f02:	2001      	movs	r0, #1
    2f04:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2f06:	4020      	ands	r0, r4
    2f08:	2816      	cmp	r0, #22
    2f0a:	d1fa      	bne.n	2f02 <PHY_TaskHandler+0x7e>
    2f0c:	e7cb      	b.n	2ea6 <PHY_TaskHandler+0x22>
			for (i = 0; i < BANK_SIZE; i++)
    2f0e:	2402      	movs	r4, #2
    2f10:	e7e0      	b.n	2ed4 <PHY_TaskHandler+0x50>
					for (i = 1; i <= size+2; i++)
    2f12:	3002      	adds	r0, #2
    2f14:	2201      	movs	r2, #1
    2f16:	2301      	movs	r3, #1
						RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    2f18:	01cc      	lsls	r4, r1, #7
    2f1a:	1a61      	subs	r1, r4, r1
    2f1c:	4c13      	ldr	r4, [pc, #76]	; (2f6c <PHY_TaskHandler+0xe8>)
    2f1e:	1864      	adds	r4, r4, r1
    2f20:	4d14      	ldr	r5, [pc, #80]	; (2f74 <PHY_TaskHandler+0xf0>)
    2f22:	5ca9      	ldrb	r1, [r5, r2]
    2f24:	54a1      	strb	r1, [r4, r2]
					for (i = 1; i <= size+2; i++)
    2f26:	3301      	adds	r3, #1
    2f28:	b2db      	uxtb	r3, r3
    2f2a:	001a      	movs	r2, r3
    2f2c:	4283      	cmp	r3, r0
    2f2e:	ddf8      	ble.n	2f22 <PHY_TaskHandler+0x9e>
    2f30:	e7e5      	b.n	2efe <PHY_TaskHandler+0x7a>
	value = trx_reg_read(reg);
    2f32:	2002      	movs	r0, #2
    2f34:	4b0c      	ldr	r3, [pc, #48]	; (2f68 <PHY_TaskHandler+0xe4>)
    2f36:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    2f38:	0940      	lsrs	r0, r0, #5
    2f3a:	b2c4      	uxtb	r4, r0
   			if (TRAC_STATUS_SUCCESS == status)
    2f3c:	2c00      	cmp	r4, #0
    2f3e:	d004      	beq.n	2f4a <PHY_TaskHandler+0xc6>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2f40:	2c03      	cmp	r4, #3
    2f42:	d00b      	beq.n	2f5c <PHY_TaskHandler+0xd8>
			else if (TRAC_STATUS_NO_ACK == status)
    2f44:	2c05      	cmp	r4, #5
    2f46:	d00b      	beq.n	2f60 <PHY_TaskHandler+0xdc>
				status = PHY_STATUS_ERROR;
    2f48:	2401      	movs	r4, #1
			phySetRxState();
    2f4a:	4b0b      	ldr	r3, [pc, #44]	; (2f78 <PHY_TaskHandler+0xf4>)
    2f4c:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    2f4e:	2201      	movs	r2, #1
    2f50:	4b04      	ldr	r3, [pc, #16]	; (2f64 <PHY_TaskHandler+0xe0>)
    2f52:	701a      	strb	r2, [r3, #0]
			PHY_DataConf(status);
    2f54:	0020      	movs	r0, r4
    2f56:	4b09      	ldr	r3, [pc, #36]	; (2f7c <PHY_TaskHandler+0xf8>)
    2f58:	4798      	blx	r3
    2f5a:	e7a4      	b.n	2ea6 <PHY_TaskHandler+0x22>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2f5c:	2402      	movs	r4, #2
    2f5e:	e7f4      	b.n	2f4a <PHY_TaskHandler+0xc6>
				status = PHY_STATUS_NO_ACK;
    2f60:	2403      	movs	r4, #3
    2f62:	e7f2      	b.n	2f4a <PHY_TaskHandler+0xc6>
    2f64:	200002bd 	.word	0x200002bd
    2f68:	00003c21 	.word	0x00003c21
    2f6c:	20000490 	.word	0x20000490
    2f70:	00003e1d 	.word	0x00003e1d
    2f74:	2000023c 	.word	0x2000023c
    2f78:	00002c3d 	.word	0x00002c3d
    2f7c:	00002ba5 	.word	0x00002ba5

00002f80 <stb_init>:
 * @brief STB Initialization
 *
 * This function initializes the STB.
 */
void stb_init(void)
{
    2f80:	b510      	push	{r4, lr}
	sal_init();
    2f82:	4b01      	ldr	r3, [pc, #4]	; (2f88 <stb_init+0x8>)
    2f84:	4798      	blx	r3
}
    2f86:	bd10      	pop	{r4, pc}
    2f88:	000038a9 	.word	0x000038a9

00002f8c <stb_ccm_secure>:
		uint8_t *key,
		uint8_t hdr_len,
		uint8_t pld_len,
		uint8_t sec_level,
		uint8_t aes_dir)
{
    2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8e:	46de      	mov	lr, fp
    2f90:	4657      	mov	r7, sl
    2f92:	464e      	mov	r6, r9
    2f94:	4645      	mov	r5, r8
    2f96:	b5e0      	push	{r5, r6, r7, lr}
    2f98:	b08b      	sub	sp, #44	; 0x2c
    2f9a:	9003      	str	r0, [sp, #12]
    2f9c:	000d      	movs	r5, r1
    2f9e:	0014      	movs	r4, r2
    2fa0:	9304      	str	r3, [sp, #16]
    2fa2:	ab14      	add	r3, sp, #80	; 0x50
    2fa4:	781e      	ldrb	r6, [r3, #0]
    2fa6:	ab15      	add	r3, sp, #84	; 0x54
    2fa8:	781f      	ldrb	r7, [r3, #0]
    2faa:	ab16      	add	r3, sp, #88	; 0x58
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	469a      	mov	sl, r3
	uint8_t nonce_0; /* nonce[0] for MIC computation. */
	uint8_t mic_len = 0;
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;

	if (stb_restart_required) {
    2fb0:	4b77      	ldr	r3, [pc, #476]	; (3190 <stb_ccm_secure+0x204>)
    2fb2:	781b      	ldrb	r3, [r3, #0]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d007      	beq.n	2fc8 <stb_ccm_secure+0x3c>
#if (SAL_TYPE != ATXMEGA_SAL)
		prev_trx_status = tal_trx_status;
    2fb8:	2202      	movs	r2, #2
    2fba:	4b76      	ldr	r3, [pc, #472]	; (3194 <stb_ccm_secure+0x208>)
    2fbc:	701a      	strb	r2, [r3, #0]
		if (tal_trx_status == TRX_SLEEP) {
			PHY_Wakeup();
		}
#endif
		sal_aes_restart();
    2fbe:	4b76      	ldr	r3, [pc, #472]	; (3198 <stb_ccm_secure+0x20c>)
    2fc0:	4798      	blx	r3
		stb_restart_required = false;
    2fc2:	2200      	movs	r2, #0
    2fc4:	4b72      	ldr	r3, [pc, #456]	; (3190 <stb_ccm_secure+0x204>)
    2fc6:	701a      	strb	r2, [r3, #0]
	}

	switch (sec_level) {
    2fc8:	2f07      	cmp	r7, #7
    2fca:	d817      	bhi.n	2ffc <stb_ccm_secure+0x70>
    2fcc:	00bb      	lsls	r3, r7, #2
    2fce:	4a73      	ldr	r2, [pc, #460]	; (319c <stb_ccm_secure+0x210>)
    2fd0:	58d3      	ldr	r3, [r2, r3]
    2fd2:	469f      	mov	pc, r3
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    2fd4:	2300      	movs	r3, #0
    2fd6:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
		break;

	case SECURITY_02_LEVEL:
		/* MIC-64 & No Encryption at Security Level -2 */
		mic_len = LEN_MIC_64;
    2fd8:	2708      	movs	r7, #8
    2fda:	e0bb      	b.n	3154 <stb_ccm_secure+0x1c8>
		break;

	case SECURITY_04_LEVEL:
		/* No MIC & Encryption at Security Level -4 */
		mic_len = LEN_MIC_00;
		enc_flag = ENCRYPTION_REQD;
    2fdc:	2301      	movs	r3, #1
    2fde:	4698      	mov	r8, r3
		mic_len = LEN_MIC_00;
    2fe0:	2700      	movs	r7, #0
		break;
    2fe2:	e0b7      	b.n	3154 <stb_ccm_secure+0x1c8>

	case SECURITY_05_LEVEL:
		/* MIC-32 & Encryption at Security Level -5 */
		mic_len = LEN_MIC_32;
		enc_flag = ENCRYPTION_REQD;
    2fe4:	2301      	movs	r3, #1
    2fe6:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    2fe8:	2704      	movs	r7, #4
		break;
    2fea:	e0b3      	b.n	3154 <stb_ccm_secure+0x1c8>

	case SECURITY_06_LEVEL:
		/* MIC-64 & Encryption at Security Level -6 */
		mic_len = LEN_MIC_64;
		enc_flag = ENCRYPTION_REQD;
    2fec:	2301      	movs	r3, #1
    2fee:	4698      	mov	r8, r3
		mic_len = LEN_MIC_64;
    2ff0:	2708      	movs	r7, #8
		break;
    2ff2:	e0af      	b.n	3154 <stb_ccm_secure+0x1c8>

	case SECURITY_07_LEVEL:
		/* MIC-128 & Encryption at Security Level -7 */
		mic_len = LEN_MIC_128;
		enc_flag = ENCRYPTION_REQD;
    2ff4:	2301      	movs	r3, #1
    2ff6:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    2ff8:	2710      	movs	r7, #16
		break;
    2ffa:	e0ab      	b.n	3154 <stb_ccm_secure+0x1c8>
		break;
	}

	/* Test on correct parameters. */

	if ((sec_level & ~0x7) ||
    2ffc:	2307      	movs	r3, #7
    2ffe:	439f      	bics	r7, r3
    3000:	d000      	beq.n	3004 <stb_ccm_secure+0x78>
    3002:	e0b5      	b.n	3170 <stb_ccm_secure+0x1e4>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    3004:	46b8      	mov	r8, r7
    3006:	e0a5      	b.n	3154 <stb_ccm_secure+0x1c8>
			(nonce == NULL) ||
			((uint16_t)pld_len + (uint16_t)hdr_len +
			(uint16_t)mic_len > 127)
			) {
#if (SAL_TYPE != ATXMEGA_SAL)
		TRX_SLEEP();
    3008:	4b65      	ldr	r3, [pc, #404]	; (31a0 <stb_ccm_secure+0x214>)
    300a:	4798      	blx	r3
    300c:	e0b5      	b.n	317a <stb_ccm_secure+0x1ee>
		sal_aes_clean_up();
#endif
		return (STB_CCM_ILLPARM);
	}

	if (key_change && (key == NULL)) {
    300e:	4b65      	ldr	r3, [pc, #404]	; (31a4 <stb_ccm_secure+0x218>)
    3010:	781b      	ldrb	r3, [r3, #0]
    3012:	2b00      	cmp	r3, #0
    3014:	d01a      	beq.n	304c <stb_ccm_secure+0xc0>
    3016:	2c00      	cmp	r4, #0
    3018:	d00d      	beq.n	3036 <stb_ccm_secure+0xaa>
	if (key_change) {
		/*
		 * Key must be non-NULL because of test above, and
		 * ECB encryption is always the initial encryption mode.
		 */
		sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    301a:	2200      	movs	r2, #0
    301c:	2100      	movs	r1, #0
    301e:	0020      	movs	r0, r4
    3020:	4b61      	ldr	r3, [pc, #388]	; (31a8 <stb_ccm_secure+0x21c>)
    3022:	4798      	blx	r3
		memcpy(last_key, key, AES_KEYSIZE);
    3024:	2210      	movs	r2, #16
    3026:	0021      	movs	r1, r4
    3028:	4860      	ldr	r0, [pc, #384]	; (31ac <stb_ccm_secure+0x220>)
    302a:	4b61      	ldr	r3, [pc, #388]	; (31b0 <stb_ccm_secure+0x224>)
    302c:	4798      	blx	r3
		key_change = false;
    302e:	2200      	movs	r2, #0
    3030:	4b5c      	ldr	r3, [pc, #368]	; (31a4 <stb_ccm_secure+0x218>)
    3032:	701a      	strb	r2, [r3, #0]
    3034:	e01e      	b.n	3074 <stb_ccm_secure+0xe8>
		TRX_SLEEP();
    3036:	4b57      	ldr	r3, [pc, #348]	; (3194 <stb_ccm_secure+0x208>)
    3038:	781b      	ldrb	r3, [r3, #0]
    303a:	2b01      	cmp	r3, #1
    303c:	d003      	beq.n	3046 <stb_ccm_secure+0xba>
		sal_aes_clean_up();
    303e:	4b5d      	ldr	r3, [pc, #372]	; (31b4 <stb_ccm_secure+0x228>)
    3040:	4798      	blx	r3
		return (STB_CCM_KEYMISS);
    3042:	2002      	movs	r0, #2
    3044:	e09c      	b.n	3180 <stb_ccm_secure+0x1f4>
		TRX_SLEEP();
    3046:	4b56      	ldr	r3, [pc, #344]	; (31a0 <stb_ccm_secure+0x214>)
    3048:	4798      	blx	r3
    304a:	e7f8      	b.n	303e <stb_ccm_secure+0xb2>
	if (!key_change && key != NULL) { /* There was some previous key. */
    304c:	2c00      	cmp	r4, #0
    304e:	d011      	beq.n	3074 <stb_ccm_secure+0xe8>
    3050:	220f      	movs	r2, #15
			key_change |= (last_key[i] ^ key[i]);
    3052:	4956      	ldr	r1, [pc, #344]	; (31ac <stb_ccm_secure+0x220>)
    3054:	0018      	movs	r0, r3
    3056:	46ac      	mov	ip, r5
    3058:	5c53      	ldrb	r3, [r2, r1]
    305a:	5ca5      	ldrb	r5, [r4, r2]
    305c:	406b      	eors	r3, r5
    305e:	4303      	orrs	r3, r0
    3060:	1e58      	subs	r0, r3, #1
    3062:	4183      	sbcs	r3, r0
    3064:	b2d8      	uxtb	r0, r3
		for (i = AES_BLOCKSIZE; i--; /* */) {
    3066:	3a01      	subs	r2, #1
    3068:	d2f6      	bcs.n	3058 <stb_ccm_secure+0xcc>
    306a:	4665      	mov	r5, ip
    306c:	4a4d      	ldr	r2, [pc, #308]	; (31a4 <stb_ccm_secure+0x218>)
    306e:	7010      	strb	r0, [r2, #0]
	if (key_change) {
    3070:	2800      	cmp	r0, #0
    3072:	d1d2      	bne.n	301a <stb_ccm_secure+0x8e>
	}

	/* Prepare nonce. */
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */

	if (mic_len > 0) {
    3074:	2f00      	cmp	r7, #0
    3076:	d129      	bne.n	30cc <stb_ccm_secure+0x140>
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */
    3078:	2301      	movs	r3, #1
    307a:	702b      	strb	r3, [r5, #0]
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
	}

	if (hdr_len) {
    307c:	9b04      	ldr	r3, [sp, #16]
    307e:	2b00      	cmp	r3, #0
    3080:	d003      	beq.n	308a <stb_ccm_secure+0xfe>
		nonce[0] |= ADATA;
    3082:	782b      	ldrb	r3, [r5, #0]
    3084:	2240      	movs	r2, #64	; 0x40
    3086:	4313      	orrs	r3, r2
    3088:	702b      	strb	r3, [r5, #0]
	}

	nonce_0 = nonce[0];
    308a:	782b      	ldrb	r3, [r5, #0]
    308c:	4699      	mov	r9, r3
	nonce[AES_BLOCKSIZE - 2] = 0;
    308e:	2300      	movs	r3, #0
    3090:	73ab      	strb	r3, [r5, #14]

	if (aes_dir == AES_DIR_ENCRYPT) {
    3092:	4653      	mov	r3, sl
    3094:	2b00      	cmp	r3, #0
    3096:	d12a      	bne.n	30ee <stb_ccm_secure+0x162>
		/* Authenticate. */
		if (mic_len > 0) {
    3098:	2f00      	cmp	r7, #0
    309a:	d003      	beq.n	30a4 <stb_ccm_secure+0x118>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    309c:	73ee      	strb	r6, [r5, #15]

			if (ENCRYPTION_REQD == enc_flag) {
    309e:	4643      	mov	r3, r8
    30a0:	2b01      	cmp	r3, #1
    30a2:	d01a      	beq.n	30da <stb_ccm_secure+0x14e>
						hdr_len,
						pld_len);
			}
		}

		nonce[0] = PLAINTEXT_FLAG;
    30a4:	2301      	movs	r3, #1
    30a6:	702b      	strb	r3, [r5, #0]
		encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    30a8:	9b03      	ldr	r3, [sp, #12]
    30aa:	9a04      	ldr	r2, [sp, #16]
    30ac:	4694      	mov	ip, r2
    30ae:	4463      	add	r3, ip
    30b0:	0018      	movs	r0, r3
    30b2:	0033      	movs	r3, r6
    30b4:	003a      	movs	r2, r7
    30b6:	0029      	movs	r1, r5
    30b8:	4c3f      	ldr	r4, [pc, #252]	; (31b8 <stb_ccm_secure+0x22c>)
    30ba:	47a0      	blx	r4
			}
		}
	}

#if (SAL_TYPE != ATXMEGA_SAL)
	TRX_SLEEP();
    30bc:	4b35      	ldr	r3, [pc, #212]	; (3194 <stb_ccm_secure+0x208>)
    30be:	781b      	ldrb	r3, [r3, #0]
    30c0:	2b01      	cmp	r3, #1
    30c2:	d03d      	beq.n	3140 <stb_ccm_secure+0x1b4>
	sal_aes_clean_up();
    30c4:	4b3b      	ldr	r3, [pc, #236]	; (31b4 <stb_ccm_secure+0x228>)
    30c6:	4798      	blx	r3
#endif
	return (STB_CCM_OK);
    30c8:	2000      	movs	r0, #0
    30ca:	e059      	b.n	3180 <stb_ccm_secure+0x1f4>
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
    30cc:	9b05      	ldr	r3, [sp, #20]
    30ce:	3b02      	subs	r3, #2
    30d0:	009b      	lsls	r3, r3, #2
    30d2:	2201      	movs	r2, #1
    30d4:	4313      	orrs	r3, r2
    30d6:	702b      	strb	r3, [r5, #0]
    30d8:	e7d0      	b.n	307c <stb_ccm_secure+0xf0>
						buffer + hdr_len + pld_len,
    30da:	9b04      	ldr	r3, [sp, #16]
    30dc:	1999      	adds	r1, r3, r6
				compute_mic(buffer,
    30de:	9803      	ldr	r0, [sp, #12]
    30e0:	4684      	mov	ip, r0
    30e2:	4461      	add	r1, ip
    30e4:	9600      	str	r6, [sp, #0]
    30e6:	002a      	movs	r2, r5
    30e8:	4c34      	ldr	r4, [pc, #208]	; (31bc <stb_ccm_secure+0x230>)
    30ea:	47a0      	blx	r4
    30ec:	e7da      	b.n	30a4 <stb_ccm_secure+0x118>
		if (enc_flag == ENCRYPTION_REQD) {
    30ee:	4643      	mov	r3, r8
    30f0:	2b01      	cmp	r3, #1
    30f2:	d00d      	beq.n	3110 <stb_ccm_secure+0x184>
		if (mic_len > 0) {
    30f4:	2f00      	cmp	r7, #0
    30f6:	d0e1      	beq.n	30bc <stb_ccm_secure+0x130>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    30f8:	73ee      	strb	r6, [r5, #15]
			buffer += hdr_len + pld_len;
    30fa:	9b03      	ldr	r3, [sp, #12]
    30fc:	445b      	add	r3, fp
    30fe:	0018      	movs	r0, r3
			if (memcmp(buffer, rcvd_mic, mic_len)) {
    3100:	003a      	movs	r2, r7
    3102:	a906      	add	r1, sp, #24
    3104:	4b2e      	ldr	r3, [pc, #184]	; (31c0 <stb_ccm_secure+0x234>)
    3106:	4798      	blx	r3
    3108:	2800      	cmp	r0, #0
    310a:	d0d7      	beq.n	30bc <stb_ccm_secure+0x130>
				return STB_CCM_MICERR;
    310c:	2003      	movs	r0, #3
    310e:	e037      	b.n	3180 <stb_ccm_secure+0x1f4>
			nonce[0] = PLAINTEXT_FLAG;
    3110:	702b      	strb	r3, [r5, #0]
			encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    3112:	9b03      	ldr	r3, [sp, #12]
    3114:	9a04      	ldr	r2, [sp, #16]
    3116:	4694      	mov	ip, r2
    3118:	4463      	add	r3, ip
    311a:	0018      	movs	r0, r3
    311c:	0033      	movs	r3, r6
    311e:	003a      	movs	r2, r7
    3120:	0029      	movs	r1, r5
    3122:	4c25      	ldr	r4, [pc, #148]	; (31b8 <stb_ccm_secure+0x22c>)
    3124:	47a0      	blx	r4
		if (mic_len > 0) {
    3126:	2f00      	cmp	r7, #0
    3128:	d0c8      	beq.n	30bc <stb_ccm_secure+0x130>
			nonce[0] = nonce_0;
    312a:	464b      	mov	r3, r9
    312c:	702b      	strb	r3, [r5, #0]
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    312e:	73ee      	strb	r6, [r5, #15]
				compute_mic(buffer,
    3130:	9600      	str	r6, [sp, #0]
    3132:	9b04      	ldr	r3, [sp, #16]
    3134:	002a      	movs	r2, r5
    3136:	a906      	add	r1, sp, #24
    3138:	9803      	ldr	r0, [sp, #12]
    313a:	4c20      	ldr	r4, [pc, #128]	; (31bc <stb_ccm_secure+0x230>)
    313c:	47a0      	blx	r4
    313e:	e7dc      	b.n	30fa <stb_ccm_secure+0x16e>
	TRX_SLEEP();
    3140:	4b17      	ldr	r3, [pc, #92]	; (31a0 <stb_ccm_secure+0x214>)
    3142:	4798      	blx	r3
    3144:	e7be      	b.n	30c4 <stb_ccm_secure+0x138>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    3146:	2300      	movs	r3, #0
    3148:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    314a:	2704      	movs	r7, #4
    314c:	e002      	b.n	3154 <stb_ccm_secure+0x1c8>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    314e:	2300      	movs	r3, #0
    3150:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    3152:	2710      	movs	r7, #16
	if ((sec_level & ~0x7) ||
    3154:	9b03      	ldr	r3, [sp, #12]
    3156:	2b00      	cmp	r3, #0
    3158:	d00a      	beq.n	3170 <stb_ccm_secure+0x1e4>
			(buffer == NULL) ||
    315a:	2d00      	cmp	r5, #0
    315c:	d008      	beq.n	3170 <stb_ccm_secure+0x1e4>
			((uint16_t)pld_len + (uint16_t)hdr_len +
    315e:	9b04      	ldr	r3, [sp, #16]
    3160:	469b      	mov	fp, r3
    3162:	44b3      	add	fp, r6
			(uint16_t)mic_len > 127)
    3164:	9705      	str	r7, [sp, #20]
			((uint16_t)pld_len + (uint16_t)hdr_len +
    3166:	465b      	mov	r3, fp
    3168:	19db      	adds	r3, r3, r7
			(nonce == NULL) ||
    316a:	2b7f      	cmp	r3, #127	; 0x7f
    316c:	dc00      	bgt.n	3170 <stb_ccm_secure+0x1e4>
    316e:	e74e      	b.n	300e <stb_ccm_secure+0x82>
		TRX_SLEEP();
    3170:	4b08      	ldr	r3, [pc, #32]	; (3194 <stb_ccm_secure+0x208>)
    3172:	781b      	ldrb	r3, [r3, #0]
    3174:	2b01      	cmp	r3, #1
    3176:	d100      	bne.n	317a <stb_ccm_secure+0x1ee>
    3178:	e746      	b.n	3008 <stb_ccm_secure+0x7c>
		sal_aes_clean_up();
    317a:	4b0e      	ldr	r3, [pc, #56]	; (31b4 <stb_ccm_secure+0x228>)
    317c:	4798      	blx	r3
		return (STB_CCM_ILLPARM);
    317e:	2001      	movs	r0, #1
}
    3180:	b00b      	add	sp, #44	; 0x2c
    3182:	bc3c      	pop	{r2, r3, r4, r5}
    3184:	4690      	mov	r8, r2
    3186:	4699      	mov	r9, r3
    3188:	46a2      	mov	sl, r4
    318a:	46ab      	mov	fp, r5
    318c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	200002d1 	.word	0x200002d1
    3194:	200002d0 	.word	0x200002d0
    3198:	000038ad 	.word	0x000038ad
    319c:	0000a7ac 	.word	0x0000a7ac
    31a0:	00002de1 	.word	0x00002de1
    31a4:	2000006c 	.word	0x2000006c
    31a8:	0000396d 	.word	0x0000396d
    31ac:	200002c0 	.word	0x200002c0
    31b0:	0000932f 	.word	0x0000932f
    31b4:	000038fd 	.word	0x000038fd
    31b8:	000032b5 	.word	0x000032b5
    31bc:	00003229 	.word	0x00003229
    31c0:	00009311 	.word	0x00009311

000031c4 <encrypt_with_padding>:
 *
 * @param start Pointer to start address
 * @param buflen Number of bytes to be encrypted; if 0, nothing happens
 */
void encrypt_with_padding(uint8_t *start, uint8_t buflen)
{
    31c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31c6:	b085      	sub	sp, #20
    31c8:	0004      	movs	r4, r0
    31ca:	000e      	movs	r6, r1
	/* Encrypt the "full blocks". */
	while (buflen >= AES_BLOCKSIZE) {
    31cc:	290f      	cmp	r1, #15
    31ce:	d90f      	bls.n	31f0 <encrypt_with_padding+0x2c>
    31d0:	000d      	movs	r5, r1
    31d2:	3d10      	subs	r5, #16
    31d4:	b2ed      	uxtb	r5, r5
    31d6:	092d      	lsrs	r5, r5, #4
    31d8:	3501      	adds	r5, #1
    31da:	012d      	lsls	r5, r5, #4
    31dc:	1945      	adds	r5, r0, r5
#if (SAL_TYPE == AT86RF2xx)
		sal_aes_wrrd(start, NULL);
    31de:	4f0f      	ldr	r7, [pc, #60]	; (321c <encrypt_with_padding+0x58>)
    31e0:	2100      	movs	r1, #0
    31e2:	0020      	movs	r0, r4
    31e4:	47b8      	blx	r7
#else
		sal_aes_exec(start);
#endif
		start += AES_BLOCKSIZE;
    31e6:	3410      	adds	r4, #16
	while (buflen >= AES_BLOCKSIZE) {
    31e8:	42ac      	cmp	r4, r5
    31ea:	d1f9      	bne.n	31e0 <encrypt_with_padding+0x1c>
    31ec:	230f      	movs	r3, #15
    31ee:	401e      	ands	r6, r3
		buflen -= AES_BLOCKSIZE;
	}

	/* Pad the possible rest and encrypt it. */
	if (buflen) {
    31f0:	2e00      	cmp	r6, #0
    31f2:	d101      	bne.n	31f8 <encrypt_with_padding+0x34>
		sal_aes_wrrd(locbuf, NULL);
#else
		sal_aes_exec(locbuf);
#endif
	}
}
    31f4:	b005      	add	sp, #20
    31f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(locbuf, start, buflen);
    31f8:	0032      	movs	r2, r6
    31fa:	0021      	movs	r1, r4
    31fc:	4668      	mov	r0, sp
    31fe:	4b08      	ldr	r3, [pc, #32]	; (3220 <encrypt_with_padding+0x5c>)
    3200:	4798      	blx	r3
		memset(locbuf + buflen, 0, AES_BLOCKSIZE - buflen);
    3202:	2210      	movs	r2, #16
    3204:	1b92      	subs	r2, r2, r6
    3206:	0030      	movs	r0, r6
    3208:	4468      	add	r0, sp
    320a:	2100      	movs	r1, #0
    320c:	4b05      	ldr	r3, [pc, #20]	; (3224 <encrypt_with_padding+0x60>)
    320e:	4798      	blx	r3
		sal_aes_wrrd(locbuf, NULL);
    3210:	2100      	movs	r1, #0
    3212:	4668      	mov	r0, sp
    3214:	4b01      	ldr	r3, [pc, #4]	; (321c <encrypt_with_padding+0x58>)
    3216:	4798      	blx	r3
}
    3218:	e7ec      	b.n	31f4 <encrypt_with_padding+0x30>
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	00003901 	.word	0x00003901
    3220:	0000932f 	.word	0x0000932f
    3224:	00009341 	.word	0x00009341

00003228 <compute_mic>:
void compute_mic(uint8_t *buffer,
		uint8_t *mic,
		uint8_t *nonce,
		uint8_t hdr_len,
		uint8_t pld_len)
{
    3228:	b5f0      	push	{r4, r5, r6, r7, lr}
    322a:	b087      	sub	sp, #28
    322c:	0005      	movs	r5, r0
    322e:	9100      	str	r1, [sp, #0]
    3230:	9201      	str	r2, [sp, #4]
    3232:	001c      	movs	r4, r3
    3234:	ab0c      	add	r3, sp, #48	; 0x30
    3236:	781e      	ldrb	r6, [r3, #0]
	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    3238:	2200      	movs	r2, #0
    323a:	2100      	movs	r1, #0
    323c:	2000      	movs	r0, #0
    323e:	4f18      	ldr	r7, [pc, #96]	; (32a0 <compute_mic+0x78>)
    3240:	47b8      	blx	r7
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(nonce, NULL);
    3242:	2100      	movs	r1, #0
    3244:	9801      	ldr	r0, [sp, #4]
    3246:	4b17      	ldr	r3, [pc, #92]	; (32a4 <compute_mic+0x7c>)
    3248:	4798      	blx	r3
#else
	sal_aes_exec(nonce);
#endif
	sal_aes_setup(NULL, AES_MODE_CBC, AES_DIR_ENCRYPT);
    324a:	2200      	movs	r2, #0
    324c:	2102      	movs	r1, #2
    324e:	2000      	movs	r0, #0
    3250:	47b8      	blx	r7

	if (hdr_len) {
    3252:	2c00      	cmp	r4, #0
    3254:	d108      	bne.n	3268 <compute_mic+0x40>
			encrypt_with_padding(buffer + firstlen,
					hdr_len - firstlen);
		}
	}

	encrypt_with_padding(buffer + hdr_len, pld_len);
    3256:	1928      	adds	r0, r5, r4
    3258:	0031      	movs	r1, r6
    325a:	4b13      	ldr	r3, [pc, #76]	; (32a8 <compute_mic+0x80>)
    325c:	4798      	blx	r3

	sal_aes_read(mic);
    325e:	9800      	ldr	r0, [sp, #0]
    3260:	4b12      	ldr	r3, [pc, #72]	; (32ac <compute_mic+0x84>)
    3262:	4798      	blx	r3
}
    3264:	b007      	add	sp, #28
    3266:	bdf0      	pop	{r4, r5, r6, r7, pc}
		firstlen = MIN(AES_BLOCKSIZE - 2, hdr_len);
    3268:	1c27      	adds	r7, r4, #0
    326a:	2c0e      	cmp	r4, #14
    326c:	d900      	bls.n	3270 <compute_mic+0x48>
    326e:	270e      	movs	r7, #14
    3270:	b2ff      	uxtb	r7, r7
		locbuf[0] = 0;
    3272:	2300      	movs	r3, #0
    3274:	aa02      	add	r2, sp, #8
    3276:	7013      	strb	r3, [r2, #0]
		locbuf[1] = hdr_len;
    3278:	0013      	movs	r3, r2
    327a:	7054      	strb	r4, [r2, #1]
		memcpy(locbuf + 2, buffer, firstlen);
    327c:	003a      	movs	r2, r7
    327e:	0029      	movs	r1, r5
    3280:	1c98      	adds	r0, r3, #2
    3282:	4b0b      	ldr	r3, [pc, #44]	; (32b0 <compute_mic+0x88>)
    3284:	4798      	blx	r3
		encrypt_with_padding(locbuf, firstlen + 2);
    3286:	1cb9      	adds	r1, r7, #2
    3288:	b2c9      	uxtb	r1, r1
    328a:	a802      	add	r0, sp, #8
    328c:	4b06      	ldr	r3, [pc, #24]	; (32a8 <compute_mic+0x80>)
    328e:	4798      	blx	r3
		if (firstlen < hdr_len) {
    3290:	42bc      	cmp	r4, r7
    3292:	d9e0      	bls.n	3256 <compute_mic+0x2e>
			encrypt_with_padding(buffer + firstlen,
    3294:	1be1      	subs	r1, r4, r7
    3296:	b2c9      	uxtb	r1, r1
    3298:	19e8      	adds	r0, r5, r7
    329a:	4b03      	ldr	r3, [pc, #12]	; (32a8 <compute_mic+0x80>)
    329c:	4798      	blx	r3
    329e:	e7da      	b.n	3256 <compute_mic+0x2e>
    32a0:	0000396d 	.word	0x0000396d
    32a4:	00003901 	.word	0x00003901
    32a8:	000031c5 	.word	0x000031c5
    32ac:	00003aa5 	.word	0x00003aa5
    32b0:	0000932f 	.word	0x0000932f

000032b4 <encrypt_pldmic>:
 */
void encrypt_pldmic(uint8_t *buffer,
		uint8_t *nonce,
		uint8_t mic_len,
		uint8_t pld_len)
{
    32b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32b6:	46d6      	mov	lr, sl
    32b8:	464f      	mov	r7, r9
    32ba:	4646      	mov	r6, r8
    32bc:	b5c0      	push	{r6, r7, lr}
    32be:	b084      	sub	sp, #16
    32c0:	0004      	movs	r4, r0
    32c2:	000f      	movs	r7, r1
    32c4:	0016      	movs	r6, r2
    32c6:	001d      	movs	r5, r3
	uint8_t ctr;
	uint8_t i;
	uint8_t keystream[AES_BLOCKSIZE];
	uint8_t *keystreamptr;

	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    32c8:	2200      	movs	r2, #0
    32ca:	2100      	movs	r1, #0
    32cc:	2000      	movs	r0, #0
    32ce:	4b31      	ldr	r3, [pc, #196]	; (3394 <encrypt_pldmic+0xe0>)
    32d0:	4798      	blx	r3

	/* Init first keystream block. */
	nonce[AES_BLOCKSIZE - 1] = ctr = 1;
    32d2:	2301      	movs	r3, #1
    32d4:	73fb      	strb	r3, [r7, #15]

	if (pld_len > 0) {
    32d6:	2d00      	cmp	r5, #0
    32d8:	d106      	bne.n	32e8 <encrypt_pldmic+0x34>
{
    32da:	2301      	movs	r3, #1
    32dc:	469a      	mov	sl, r3
				/* Prepare the keystream for MIC. */
				nonce[AES_BLOCKSIZE - 1] = 0;

				sal_aes_wrrd(nonce, keystream);
			} else {
				sal_aes_read(keystream);
    32de:	4b2e      	ldr	r3, [pc, #184]	; (3398 <encrypt_pldmic+0xe4>)
    32e0:	4699      	mov	r9, r3
				sal_aes_wrrd(nonce, keystream);
    32e2:	4b2e      	ldr	r3, [pc, #184]	; (339c <encrypt_pldmic+0xe8>)
    32e4:	4698      	mov	r8, r3
    32e6:	e02e      	b.n	3346 <encrypt_pldmic+0x92>
		sal_aes_wrrd(nonce, NULL);
    32e8:	2100      	movs	r1, #0
    32ea:	0038      	movs	r0, r7
    32ec:	4b2b      	ldr	r3, [pc, #172]	; (339c <encrypt_pldmic+0xe8>)
    32ee:	4798      	blx	r3
    32f0:	e7f3      	b.n	32da <encrypt_pldmic+0x26>
				sal_aes_read(keystream);
    32f2:	4668      	mov	r0, sp
    32f4:	47c8      	blx	r9
    32f6:	e02f      	b.n	3358 <encrypt_pldmic+0xa4>
			}
		} else {
			/* Prepare the next keystream block. */
			nonce[AES_BLOCKSIZE - 1] = ++ctr;
    32f8:	4653      	mov	r3, sl
    32fa:	3301      	adds	r3, #1
    32fc:	b2db      	uxtb	r3, r3
    32fe:	469a      	mov	sl, r3
    3300:	73fb      	strb	r3, [r7, #15]

			sal_aes_wrrd(nonce, keystream);
    3302:	4669      	mov	r1, sp
    3304:	0038      	movs	r0, r7
    3306:	4b25      	ldr	r3, [pc, #148]	; (339c <encrypt_pldmic+0xe8>)
    3308:	4798      	blx	r3
		}

		/* En/decrypt payload. */

		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    330a:	1c2b      	adds	r3, r5, #0
    330c:	2d10      	cmp	r5, #16
    330e:	d900      	bls.n	3312 <encrypt_pldmic+0x5e>
    3310:	2310      	movs	r3, #16
    3312:	b2db      	uxtb	r3, r3
				i--;
    3314:	1e58      	subs	r0, r3, #1
    3316:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3318:	2b00      	cmp	r3, #0
    331a:	d105      	bne.n	3328 <encrypt_pldmic+0x74>
    331c:	e011      	b.n	3342 <encrypt_pldmic+0x8e>
    331e:	b2db      	uxtb	r3, r3
				i--;
    3320:	1e58      	subs	r0, r3, #1
    3322:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3324:	2b00      	cmp	r3, #0
    3326:	d01c      	beq.n	3362 <encrypt_pldmic+0xae>
    3328:	3001      	adds	r0, #1
{
    332a:	2300      	movs	r3, #0
		                /* */) {
			*buffer++ ^= *keystreamptr++;
    332c:	466a      	mov	r2, sp
    332e:	5c9a      	ldrb	r2, [r3, r2]
    3330:	5ce1      	ldrb	r1, [r4, r3]
    3332:	404a      	eors	r2, r1
    3334:	54e2      	strb	r2, [r4, r3]
    3336:	3301      	adds	r3, #1
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3338:	4298      	cmp	r0, r3
    333a:	d1f7      	bne.n	332c <encrypt_pldmic+0x78>
    333c:	18e4      	adds	r4, r4, r3
		}

		if (pld_len <= AES_BLOCKSIZE) {
    333e:	2d10      	cmp	r5, #16
    3340:	d90f      	bls.n	3362 <encrypt_pldmic+0xae>
			break;
		}

		pld_len -= AES_BLOCKSIZE;
    3342:	3d10      	subs	r5, #16
    3344:	b2ed      	uxtb	r5, r5
		if (pld_len <= AES_BLOCKSIZE) { /* Last block */
    3346:	2d10      	cmp	r5, #16
    3348:	d8d6      	bhi.n	32f8 <encrypt_pldmic+0x44>
			if (mic_len) {
    334a:	2e00      	cmp	r6, #0
    334c:	d0d1      	beq.n	32f2 <encrypt_pldmic+0x3e>
				nonce[AES_BLOCKSIZE - 1] = 0;
    334e:	2300      	movs	r3, #0
    3350:	73fb      	strb	r3, [r7, #15]
				sal_aes_wrrd(nonce, keystream);
    3352:	4669      	mov	r1, sp
    3354:	0038      	movs	r0, r7
    3356:	47c0      	blx	r8
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3358:	1c2b      	adds	r3, r5, #0
    335a:	2d10      	cmp	r5, #16
    335c:	d9df      	bls.n	331e <encrypt_pldmic+0x6a>
    335e:	2310      	movs	r3, #16
    3360:	e7dd      	b.n	331e <encrypt_pldmic+0x6a>
	}

	/* En/decrypt MIC. */

	if (mic_len) {
    3362:	2e00      	cmp	r6, #0
    3364:	d105      	bne.n	3372 <encrypt_pldmic+0xbe>

		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
			*buffer++ ^= *keystreamptr++;
		}
	}
}
    3366:	b004      	add	sp, #16
    3368:	bc1c      	pop	{r2, r3, r4}
    336a:	4690      	mov	r8, r2
    336c:	4699      	mov	r9, r3
    336e:	46a2      	mov	sl, r4
    3370:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sal_aes_read(keystream);
    3372:	4668      	mov	r0, sp
    3374:	4b08      	ldr	r3, [pc, #32]	; (3398 <encrypt_pldmic+0xe4>)
    3376:	4798      	blx	r3
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    3378:	3e01      	subs	r6, #1
    337a:	b2f2      	uxtb	r2, r6
    337c:	3201      	adds	r2, #1
    337e:	2300      	movs	r3, #0
			*buffer++ ^= *keystreamptr++;
    3380:	4669      	mov	r1, sp
    3382:	5c59      	ldrb	r1, [r3, r1]
    3384:	5ce0      	ldrb	r0, [r4, r3]
    3386:	4041      	eors	r1, r0
    3388:	54e1      	strb	r1, [r4, r3]
    338a:	3301      	adds	r3, #1
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    338c:	4293      	cmp	r3, r2
    338e:	d1f7      	bne.n	3380 <encrypt_pldmic+0xcc>
    3390:	e7e9      	b.n	3366 <encrypt_pldmic+0xb2>
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	0000396d 	.word	0x0000396d
    3398:	00003aa5 	.word	0x00003aa5
    339c:	00003901 	.word	0x00003901

000033a0 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
uint8_t* MiMem_Alloc(uint8_t size)
{
    33a0:	b510      	push	{r4, lr}
    uint8_t loopIndex = 0;

    if (size <= MIMEM_BUFFER_SIZE)
    33a2:	28a0      	cmp	r0, #160	; 0xa0
    33a4:	d81c      	bhi.n	33e0 <MiMem_Alloc+0x40>
    {
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
        {
            if (mimemBuffers[loopIndex].bufferFlag == false)
    33a6:	23a4      	movs	r3, #164	; 0xa4
    33a8:	4a0e      	ldr	r2, [pc, #56]	; (33e4 <MiMem_Alloc+0x44>)
    33aa:	5cd3      	ldrb	r3, [r2, r3]
    33ac:	2b00      	cmp	r3, #0
    33ae:	d00d      	beq.n	33cc <MiMem_Alloc+0x2c>
    33b0:	4b0d      	ldr	r3, [pc, #52]	; (33e8 <MiMem_Alloc+0x48>)
    33b2:	4a0e      	ldr	r2, [pc, #56]	; (33ec <MiMem_Alloc+0x4c>)
    33b4:	189c      	adds	r4, r3, r2
    33b6:	2201      	movs	r2, #1
    33b8:	0010      	movs	r0, r2
    33ba:	7819      	ldrb	r1, [r3, #0]
    33bc:	2900      	cmp	r1, #0
    33be:	d006      	beq.n	33ce <MiMem_Alloc+0x2e>
    33c0:	3201      	adds	r2, #1
    33c2:	33a8      	adds	r3, #168	; 0xa8
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    33c4:	42a3      	cmp	r3, r4
    33c6:	d1f7      	bne.n	33b8 <MiMem_Alloc+0x18>
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
            }
        }
    }
    //printf("\r\n MiMem Buffer Full/unavailable for given size");
    return NULL;
    33c8:	2000      	movs	r0, #0
    33ca:	e008      	b.n	33de <MiMem_Alloc+0x3e>
            if (mimemBuffers[loopIndex].bufferFlag == false)
    33cc:	2000      	movs	r0, #0
                mimemBuffers[loopIndex].bufferFlag = true;
    33ce:	23a8      	movs	r3, #168	; 0xa8
    33d0:	4343      	muls	r3, r0
    33d2:	4804      	ldr	r0, [pc, #16]	; (33e4 <MiMem_Alloc+0x44>)
    33d4:	18c0      	adds	r0, r0, r3
    33d6:	0003      	movs	r3, r0
    33d8:	33a4      	adds	r3, #164	; 0xa4
    33da:	2201      	movs	r2, #1
    33dc:	701a      	strb	r2, [r3, #0]
}
    33de:	bd10      	pop	{r4, pc}
    return NULL;
    33e0:	2000      	movs	r0, #0
    33e2:	e7fc      	b.n	33de <MiMem_Alloc+0x3e>
    33e4:	200017b8 	.word	0x200017b8
    33e8:	20001904 	.word	0x20001904
    33ec:	00001308 	.word	0x00001308

000033f0 <MiMem_Free>:
* the given memory else returns error
*
* Note:			    none
********************************************************************/
uint8_t MiMem_Free(uint8_t* buffPtr)
{
    33f0:	b530      	push	{r4, r5, lr}
    33f2:	4b0d      	ldr	r3, [pc, #52]	; (3428 <MiMem_Free+0x38>)
    33f4:	2200      	movs	r2, #0
    33f6:	e003      	b.n	3400 <MiMem_Free+0x10>
    33f8:	3201      	adds	r2, #1
    33fa:	33a8      	adds	r3, #168	; 0xa8
	uint8_t loopIndex = 0;
	for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    33fc:	2a1e      	cmp	r2, #30
    33fe:	d010      	beq.n	3422 <MiMem_Free+0x32>
	{
		if ((mimemBuffers[loopIndex].bufferFlag == true) &&
    3400:	0015      	movs	r5, r2
    3402:	0019      	movs	r1, r3
    3404:	31a4      	adds	r1, #164	; 0xa4
    3406:	7809      	ldrb	r1, [r1, #0]
    3408:	2900      	cmp	r1, #0
    340a:	d0f5      	beq.n	33f8 <MiMem_Free+0x8>
    340c:	4298      	cmp	r0, r3
    340e:	d1f3      	bne.n	33f8 <MiMem_Free+0x8>
		   ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer == buffPtr))
		{
			//printf("\r\n MiMem Buffer Free: %d", loopIndex);
			mimemBuffers[loopIndex].bufferFlag = false;
    3410:	23a8      	movs	r3, #168	; 0xa8
    3412:	435d      	muls	r5, r3
    3414:	4b04      	ldr	r3, [pc, #16]	; (3428 <MiMem_Free+0x38>)
    3416:	195d      	adds	r5, r3, r5
    3418:	35a4      	adds	r5, #164	; 0xa4
    341a:	2200      	movs	r2, #0
    341c:	702a      	strb	r2, [r5, #0]
			return 0;
    341e:	2000      	movs	r0, #0
    3420:	e000      	b.n	3424 <MiMem_Free+0x34>
		}
	}
	//printf("\r\n MiMem Buffer Already Free");
	return 0xff;
    3422:	20ff      	movs	r0, #255	; 0xff
}
    3424:	bd30      	pop	{r4, r5, pc}
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	200017b8 	.word	0x200017b8

0000342c <MiMem_PercentageOfFreeBuffers>:


uint8_t MiMem_PercentageOfFreeBuffers(void)
{
    342c:	b510      	push	{r4, lr}
    342e:	4b0b      	ldr	r3, [pc, #44]	; (345c <MiMem_PercentageOfFreeBuffers+0x30>)
    3430:	4a0b      	ldr	r2, [pc, #44]	; (3460 <MiMem_PercentageOfFreeBuffers+0x34>)
    3432:	1899      	adds	r1, r3, r2
	uint8_t loopIndex = 0;
	uint8_t numUsedBuffers = 0;
    3434:	2000      	movs	r0, #0
    3436:	e002      	b.n	343e <MiMem_PercentageOfFreeBuffers+0x12>
    3438:	33a8      	adds	r3, #168	; 0xa8
	for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    343a:	428b      	cmp	r3, r1
    343c:	d005      	beq.n	344a <MiMem_PercentageOfFreeBuffers+0x1e>
	{
		if (mimemBuffers[loopIndex].bufferFlag == true)
    343e:	781a      	ldrb	r2, [r3, #0]
    3440:	2a00      	cmp	r2, #0
    3442:	d0f9      	beq.n	3438 <MiMem_PercentageOfFreeBuffers+0xc>
		{
			numUsedBuffers++;
    3444:	3001      	adds	r0, #1
    3446:	b2c0      	uxtb	r0, r0
    3448:	e7f6      	b.n	3438 <MiMem_PercentageOfFreeBuffers+0xc>
		}
	}
	return ((NUMBER_OF_MIMEM_BUFFERS - numUsedBuffers) * 100) / NUMBER_OF_MIMEM_BUFFERS;
    344a:	231e      	movs	r3, #30
    344c:	1a1b      	subs	r3, r3, r0
    344e:	2064      	movs	r0, #100	; 0x64
    3450:	4358      	muls	r0, r3
    3452:	211e      	movs	r1, #30
    3454:	4b03      	ldr	r3, [pc, #12]	; (3464 <MiMem_PercentageOfFreeBuffers+0x38>)
    3456:	4798      	blx	r3
    3458:	b2c0      	uxtb	r0, r0
    345a:	bd10      	pop	{r4, pc}
    345c:	2000185c 	.word	0x2000185c
    3460:	000013b0 	.word	0x000013b0
    3464:	0000909d 	.word	0x0000909d

00003468 <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	46c6      	mov	lr, r8
    346c:	b500      	push	{lr}
    346e:	0007      	movs	r7, r0
    3470:	4688      	mov	r8, r1
    3472:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    3474:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3476:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    347a:	2200      	movs	r2, #0
    347c:	4b1f      	ldr	r3, [pc, #124]	; (34fc <miQueueReadOrRemove+0x94>)
    347e:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    3480:	7a03      	ldrb	r3, [r0, #8]
    3482:	2b00      	cmp	r3, #0
    3484:	d037      	beq.n	34f6 <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    3486:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    3488:	2d00      	cmp	r5, #0
    348a:	d019      	beq.n	34c0 <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    348c:	2c00      	cmp	r4, #0
    348e:	d00c      	beq.n	34aa <miQueueReadOrRemove+0x42>
    3490:	0026      	movs	r6, r4
    3492:	e000      	b.n	3496 <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    3494:	001c      	movs	r4, r3
				match = search->criteria_func(
    3496:	6869      	ldr	r1, [r5, #4]
    3498:	6860      	ldr	r0, [r4, #4]
    349a:	682b      	ldr	r3, [r5, #0]
    349c:	4798      	blx	r3
				if (match) {
    349e:	2800      	cmp	r0, #0
    34a0:	d10f      	bne.n	34c2 <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    34a2:	6823      	ldr	r3, [r4, #0]
    34a4:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    34a6:	2b00      	cmp	r3, #0
    34a8:	d1f4      	bne.n	3494 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    34aa:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    34ac:	2201      	movs	r2, #1
    34ae:	4b13      	ldr	r3, [pc, #76]	; (34fc <miQueueReadOrRemove+0x94>)
    34b0:	701a      	strb	r2, [r3, #0]
    34b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    34b6:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    34b8:	0020      	movs	r0, r4
    34ba:	bc04      	pop	{r2}
    34bc:	4690      	mov	r8, r2
    34be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    34c0:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    34c2:	2c00      	cmp	r4, #0
    34c4:	d0f2      	beq.n	34ac <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    34c6:	4643      	mov	r3, r8
    34c8:	2b00      	cmp	r3, #0
    34ca:	d1ef      	bne.n	34ac <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    34cc:	683b      	ldr	r3, [r7, #0]
    34ce:	429c      	cmp	r4, r3
    34d0:	d00c      	beq.n	34ec <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    34d2:	6823      	ldr	r3, [r4, #0]
    34d4:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    34d6:	687b      	ldr	r3, [r7, #4]
    34d8:	429c      	cmp	r4, r3
    34da:	d00a      	beq.n	34f2 <miQueueReadOrRemove+0x8a>
				q->size--;
    34dc:	7a3b      	ldrb	r3, [r7, #8]
    34de:	3b01      	subs	r3, #1
    34e0:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    34e2:	683b      	ldr	r3, [r7, #0]
    34e4:	2b00      	cmp	r3, #0
    34e6:	d1e1      	bne.n	34ac <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    34e8:	607b      	str	r3, [r7, #4]
    34ea:	e7df      	b.n	34ac <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    34ec:	6823      	ldr	r3, [r4, #0]
    34ee:	603b      	str	r3, [r7, #0]
    34f0:	e7f1      	b.n	34d6 <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    34f2:	607e      	str	r6, [r7, #4]
    34f4:	e7f2      	b.n	34dc <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    34f6:	2400      	movs	r4, #0
    34f8:	e7d8      	b.n	34ac <miQueueReadOrRemove+0x44>
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	20000008 	.word	0x20000008

00003500 <miQueueInit>:
	q->head = NULL;
    3500:	2300      	movs	r3, #0
    3502:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    3504:	6043      	str	r3, [r0, #4]
	q->size = 0;
    3506:	7203      	strb	r3, [r0, #8]
}
    3508:	4770      	bx	lr
	...

0000350c <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    350c:	b672      	cpsid	i
    350e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3512:	2200      	movs	r2, #0
    3514:	4b0a      	ldr	r3, [pc, #40]	; (3540 <miQueueAppend+0x34>)
    3516:	701a      	strb	r2, [r3, #0]
		if (q->size == 0) {
    3518:	7a03      	ldrb	r3, [r0, #8]
    351a:	2b00      	cmp	r3, #0
    351c:	d00e      	beq.n	353c <miQueueAppend+0x30>
			q->tail->nextItem = buf;
    351e:	6843      	ldr	r3, [r0, #4]
    3520:	6019      	str	r1, [r3, #0]
		q->tail = buf;
    3522:	6041      	str	r1, [r0, #4]
		buf->nextItem = NULL;
    3524:	2300      	movs	r3, #0
    3526:	600b      	str	r3, [r1, #0]
		q->size++;
    3528:	7a03      	ldrb	r3, [r0, #8]
    352a:	3301      	adds	r3, #1
    352c:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    352e:	2201      	movs	r2, #1
    3530:	4b03      	ldr	r3, [pc, #12]	; (3540 <miQueueAppend+0x34>)
    3532:	701a      	strb	r2, [r3, #0]
    3534:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3538:	b662      	cpsie	i
} /* miQueueAppend */
    353a:	4770      	bx	lr
			q->head = buf;
    353c:	6001      	str	r1, [r0, #0]
    353e:	e7f0      	b.n	3522 <miQueueAppend+0x16>
    3540:	20000008 	.word	0x20000008

00003544 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    3544:	b510      	push	{r4, lr}
    3546:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    3548:	2100      	movs	r1, #0
    354a:	4b01      	ldr	r3, [pc, #4]	; (3550 <miQueueRemove+0xc>)
    354c:	4798      	blx	r3
}
    354e:	bd10      	pop	{r4, pc}
    3550:	00003469 	.word	0x00003469

00003554 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3554:	b530      	push	{r4, r5, lr}
	if (timers) {
    3556:	4b14      	ldr	r3, [pc, #80]	; (35a8 <placeTimer+0x54>)
    3558:	681d      	ldr	r5, [r3, #0]
    355a:	2d00      	cmp	r5, #0
    355c:	d01c      	beq.n	3598 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    355e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    3560:	6869      	ldr	r1, [r5, #4]
    3562:	428a      	cmp	r2, r1
    3564:	d309      	bcc.n	357a <placeTimer+0x26>
    3566:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    3568:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    356a:	6823      	ldr	r3, [r4, #0]
    356c:	2b00      	cmp	r3, #0
    356e:	d008      	beq.n	3582 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    3570:	6859      	ldr	r1, [r3, #4]
    3572:	4291      	cmp	r1, r2
    3574:	d803      	bhi.n	357e <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3576:	001c      	movs	r4, r3
    3578:	e7f6      	b.n	3568 <placeTimer+0x14>
    357a:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    357c:	2400      	movs	r4, #0
				t->timeout -= timeout;
    357e:	1a89      	subs	r1, r1, r2
    3580:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    3582:	6042      	str	r2, [r0, #4]

		if (prev) {
    3584:	2c00      	cmp	r4, #0
    3586:	d003      	beq.n	3590 <placeTimer+0x3c>
			timer->next = prev->next;
    3588:	6823      	ldr	r3, [r4, #0]
    358a:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    358c:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    358e:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    3590:	6005      	str	r5, [r0, #0]
			timers = timer;
    3592:	4b05      	ldr	r3, [pc, #20]	; (35a8 <placeTimer+0x54>)
    3594:	6018      	str	r0, [r3, #0]
    3596:	e7fa      	b.n	358e <placeTimer+0x3a>
		timer->next = NULL;
    3598:	2300      	movs	r3, #0
    359a:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    359c:	6883      	ldr	r3, [r0, #8]
    359e:	6043      	str	r3, [r0, #4]
		timers = timer;
    35a0:	4b01      	ldr	r3, [pc, #4]	; (35a8 <placeTimer+0x54>)
    35a2:	6018      	str	r0, [r3, #0]
}
    35a4:	e7f3      	b.n	358e <placeTimer+0x3a>
    35a6:	46c0      	nop			; (mov r8, r8)
    35a8:	200002d4 	.word	0x200002d4

000035ac <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    35ac:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    35ae:	4a04      	ldr	r2, [pc, #16]	; (35c0 <SYS_HwExpiry_Cb+0x14>)
    35b0:	7813      	ldrb	r3, [r2, #0]
    35b2:	3301      	adds	r3, #1
    35b4:	b2db      	uxtb	r3, r3
    35b6:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    35b8:	4802      	ldr	r0, [pc, #8]	; (35c4 <SYS_HwExpiry_Cb+0x18>)
    35ba:	4b03      	ldr	r3, [pc, #12]	; (35c8 <SYS_HwExpiry_Cb+0x1c>)
    35bc:	4798      	blx	r3
}
    35be:	bd10      	pop	{r4, pc}
    35c0:	20002b68 	.word	0x20002b68
    35c4:	00002710 	.word	0x00002710
    35c8:	00004d75 	.word	0x00004d75

000035cc <SYS_TimerInit>:
{
    35cc:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    35ce:	2400      	movs	r4, #0
    35d0:	4b06      	ldr	r3, [pc, #24]	; (35ec <SYS_TimerInit+0x20>)
    35d2:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    35d4:	4806      	ldr	r0, [pc, #24]	; (35f0 <SYS_TimerInit+0x24>)
    35d6:	4b07      	ldr	r3, [pc, #28]	; (35f4 <SYS_TimerInit+0x28>)
    35d8:	4798      	blx	r3
	common_tc_init();
    35da:	4b07      	ldr	r3, [pc, #28]	; (35f8 <SYS_TimerInit+0x2c>)
    35dc:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    35de:	4807      	ldr	r0, [pc, #28]	; (35fc <SYS_TimerInit+0x30>)
    35e0:	4b07      	ldr	r3, [pc, #28]	; (3600 <SYS_TimerInit+0x34>)
    35e2:	4798      	blx	r3
	timers = NULL;
    35e4:	4b07      	ldr	r3, [pc, #28]	; (3604 <SYS_TimerInit+0x38>)
    35e6:	601c      	str	r4, [r3, #0]
}
    35e8:	bd10      	pop	{r4, pc}
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	20002b68 	.word	0x20002b68
    35f0:	000035ad 	.word	0x000035ad
    35f4:	00004e65 	.word	0x00004e65
    35f8:	00004de1 	.word	0x00004de1
    35fc:	00002710 	.word	0x00002710
    3600:	00004d75 	.word	0x00004d75
    3604:	200002d4 	.word	0x200002d4

00003608 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3608:	4b0e      	ldr	r3, [pc, #56]	; (3644 <SYS_TimerStop+0x3c>)
    360a:	681a      	ldr	r2, [r3, #0]
    360c:	2a00      	cmp	r2, #0
    360e:	d014      	beq.n	363a <SYS_TimerStop+0x32>
		if (t == timer) {
    3610:	4282      	cmp	r2, r0
    3612:	d013      	beq.n	363c <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3614:	6813      	ldr	r3, [r2, #0]
    3616:	2b00      	cmp	r3, #0
    3618:	d00f      	beq.n	363a <SYS_TimerStop+0x32>
		if (t == timer) {
    361a:	4298      	cmp	r0, r3
    361c:	d001      	beq.n	3622 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    361e:	001a      	movs	r2, r3
    3620:	e7f8      	b.n	3614 <SYS_TimerStop+0xc>
			if (prev) {
    3622:	2a00      	cmp	r2, #0
    3624:	d00a      	beq.n	363c <SYS_TimerStop+0x34>
				prev->next = t->next;
    3626:	6803      	ldr	r3, [r0, #0]
    3628:	6013      	str	r3, [r2, #0]
			if (t->next) {
    362a:	6803      	ldr	r3, [r0, #0]
    362c:	2b00      	cmp	r3, #0
    362e:	d004      	beq.n	363a <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    3630:	6842      	ldr	r2, [r0, #4]
    3632:	6859      	ldr	r1, [r3, #4]
    3634:	468c      	mov	ip, r1
    3636:	4462      	add	r2, ip
    3638:	605a      	str	r2, [r3, #4]
}
    363a:	4770      	bx	lr
				timers = t->next;
    363c:	4b01      	ldr	r3, [pc, #4]	; (3644 <SYS_TimerStop+0x3c>)
    363e:	6802      	ldr	r2, [r0, #0]
    3640:	601a      	str	r2, [r3, #0]
    3642:	e7f2      	b.n	362a <SYS_TimerStop+0x22>
    3644:	200002d4 	.word	0x200002d4

00003648 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3648:	4b09      	ldr	r3, [pc, #36]	; (3670 <SYS_TimerStarted+0x28>)
    364a:	681b      	ldr	r3, [r3, #0]
    364c:	2b00      	cmp	r3, #0
    364e:	d00a      	beq.n	3666 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    3650:	4283      	cmp	r3, r0
    3652:	d00a      	beq.n	366a <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3654:	681b      	ldr	r3, [r3, #0]
    3656:	2b00      	cmp	r3, #0
    3658:	d003      	beq.n	3662 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    365a:	4298      	cmp	r0, r3
    365c:	d1fa      	bne.n	3654 <SYS_TimerStarted+0xc>
			return true;
    365e:	2001      	movs	r0, #1
    3660:	e000      	b.n	3664 <SYS_TimerStarted+0x1c>
	return false;
    3662:	2000      	movs	r0, #0
}
    3664:	4770      	bx	lr
	return false;
    3666:	2000      	movs	r0, #0
    3668:	e7fc      	b.n	3664 <SYS_TimerStarted+0x1c>
			return true;
    366a:	2001      	movs	r0, #1
    366c:	e7fa      	b.n	3664 <SYS_TimerStarted+0x1c>
    366e:	46c0      	nop			; (mov r8, r8)
    3670:	200002d4 	.word	0x200002d4

00003674 <SYS_TimerStart>:
{
    3674:	b510      	push	{r4, lr}
    3676:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    3678:	4b04      	ldr	r3, [pc, #16]	; (368c <SYS_TimerStart+0x18>)
    367a:	4798      	blx	r3
    367c:	2800      	cmp	r0, #0
    367e:	d000      	beq.n	3682 <SYS_TimerStart+0xe>
}
    3680:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    3682:	0020      	movs	r0, r4
    3684:	4b02      	ldr	r3, [pc, #8]	; (3690 <SYS_TimerStart+0x1c>)
    3686:	4798      	blx	r3
}
    3688:	e7fa      	b.n	3680 <SYS_TimerStart+0xc>
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	00003649 	.word	0x00003649
    3690:	00003555 	.word	0x00003555

00003694 <SYS_TimerTaskHandler>:
{
    3694:	b5f0      	push	{r4, r5, r6, r7, lr}
    3696:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    3698:	4b1d      	ldr	r3, [pc, #116]	; (3710 <SYS_TimerTaskHandler+0x7c>)
    369a:	781b      	ldrb	r3, [r3, #0]
    369c:	2b00      	cmp	r3, #0
    369e:	d035      	beq.n	370c <SYS_TimerTaskHandler+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    36a0:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    36a4:	4253      	negs	r3, r2
    36a6:	4153      	adcs	r3, r2
    36a8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    36aa:	b672      	cpsid	i
    36ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    36b0:	2100      	movs	r1, #0
    36b2:	4b18      	ldr	r3, [pc, #96]	; (3714 <SYS_TimerTaskHandler+0x80>)
    36b4:	7019      	strb	r1, [r3, #0]
	return flags;
    36b6:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    36b8:	4a15      	ldr	r2, [pc, #84]	; (3710 <SYS_TimerTaskHandler+0x7c>)
    36ba:	7813      	ldrb	r3, [r2, #0]
    36bc:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    36be:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    36c0:	2800      	cmp	r0, #0
    36c2:	d005      	beq.n	36d0 <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    36c4:	3101      	adds	r1, #1
    36c6:	4a13      	ldr	r2, [pc, #76]	; (3714 <SYS_TimerTaskHandler+0x80>)
    36c8:	7011      	strb	r1, [r2, #0]
    36ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    36ce:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    36d0:	009d      	lsls	r5, r3, #2
    36d2:	18ed      	adds	r5, r5, r3
    36d4:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    36d6:	4e10      	ldr	r6, [pc, #64]	; (3718 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    36d8:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    36da:	e005      	b.n	36e8 <SYS_TimerTaskHandler+0x54>
			placeTimer(timer);
    36dc:	0020      	movs	r0, r4
    36de:	4b0f      	ldr	r3, [pc, #60]	; (371c <SYS_TimerTaskHandler+0x88>)
    36e0:	4798      	blx	r3
    36e2:	e00d      	b.n	3700 <SYS_TimerTaskHandler+0x6c>
			timer->handler(timer);
    36e4:	0020      	movs	r0, r4
    36e6:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    36e8:	6834      	ldr	r4, [r6, #0]
    36ea:	2c00      	cmp	r4, #0
    36ec:	d00e      	beq.n	370c <SYS_TimerTaskHandler+0x78>
    36ee:	6863      	ldr	r3, [r4, #4]
    36f0:	429d      	cmp	r5, r3
    36f2:	d309      	bcc.n	3708 <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    36f4:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    36f6:	6823      	ldr	r3, [r4, #0]
    36f8:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    36fa:	7b23      	ldrb	r3, [r4, #12]
    36fc:	2b01      	cmp	r3, #1
    36fe:	d0ed      	beq.n	36dc <SYS_TimerTaskHandler+0x48>
		if (timer->handler) {
    3700:	6923      	ldr	r3, [r4, #16]
    3702:	2b00      	cmp	r3, #0
    3704:	d1ee      	bne.n	36e4 <SYS_TimerTaskHandler+0x50>
    3706:	e7ef      	b.n	36e8 <SYS_TimerTaskHandler+0x54>
		timers->timeout -= elapsed;
    3708:	1b5d      	subs	r5, r3, r5
    370a:	6065      	str	r5, [r4, #4]
}
    370c:	b003      	add	sp, #12
    370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3710:	20002b68 	.word	0x20002b68
    3714:	20000008 	.word	0x20000008
    3718:	200002d4 	.word	0x200002d4
    371c:	00003555 	.word	0x00003555

00003720 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    3720:	b510      	push	{r4, lr}
	tmr_cca_callback();
    3722:	4b01      	ldr	r3, [pc, #4]	; (3728 <tc_cca_callback+0x8>)
    3724:	4798      	blx	r3
}
    3726:	bd10      	pop	{r4, pc}
    3728:	00004e49 	.word	0x00004e49

0000372c <tc_ovf_callback>:
{
    372c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    372e:	4b01      	ldr	r3, [pc, #4]	; (3734 <tc_ovf_callback+0x8>)
    3730:	4798      	blx	r3
}
    3732:	bd10      	pop	{r4, pc}
    3734:	00004e01 	.word	0x00004e01

00003738 <tmr_read_count>:
{
    3738:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    373a:	4802      	ldr	r0, [pc, #8]	; (3744 <tmr_read_count+0xc>)
    373c:	4b02      	ldr	r3, [pc, #8]	; (3748 <tmr_read_count+0x10>)
    373e:	4798      	blx	r3
    3740:	b280      	uxth	r0, r0
}
    3742:	bd10      	pop	{r4, pc}
    3744:	20002ba0 	.word	0x20002ba0
    3748:	00001f8d 	.word	0x00001f8d

0000374c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    374c:	4b03      	ldr	r3, [pc, #12]	; (375c <tmr_disable_cc_interrupt+0x10>)
    374e:	2110      	movs	r1, #16
    3750:	681a      	ldr	r2, [r3, #0]
    3752:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    3754:	7e5a      	ldrb	r2, [r3, #25]
    3756:	438a      	bics	r2, r1
    3758:	765a      	strb	r2, [r3, #25]
}
    375a:	4770      	bx	lr
    375c:	20002ba0 	.word	0x20002ba0

00003760 <tmr_enable_cc_interrupt>:
{
    3760:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3762:	4c0a      	ldr	r4, [pc, #40]	; (378c <tmr_enable_cc_interrupt+0x2c>)
    3764:	6820      	ldr	r0, [r4, #0]
    3766:	4b0a      	ldr	r3, [pc, #40]	; (3790 <tmr_enable_cc_interrupt+0x30>)
    3768:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    376a:	4b0a      	ldr	r3, [pc, #40]	; (3794 <tmr_enable_cc_interrupt+0x34>)
    376c:	5c1b      	ldrb	r3, [r3, r0]
    376e:	221f      	movs	r2, #31
    3770:	401a      	ands	r2, r3
    3772:	2301      	movs	r3, #1
    3774:	4093      	lsls	r3, r2
    3776:	4a08      	ldr	r2, [pc, #32]	; (3798 <tmr_enable_cc_interrupt+0x38>)
    3778:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    377a:	7e63      	ldrb	r3, [r4, #25]
    377c:	2210      	movs	r2, #16
    377e:	4313      	orrs	r3, r2
    3780:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3782:	6823      	ldr	r3, [r4, #0]
    3784:	2210      	movs	r2, #16
    3786:	735a      	strb	r2, [r3, #13]
}
    3788:	bd10      	pop	{r4, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	20002ba0 	.word	0x20002ba0
    3790:	00001d19 	.word	0x00001d19
    3794:	0000a7cc 	.word	0x0000a7cc
    3798:	e000e100 	.word	0xe000e100

0000379c <tmr_write_cmpreg>:
{
    379c:	b510      	push	{r4, lr}
    379e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    37a0:	2100      	movs	r1, #0
    37a2:	4802      	ldr	r0, [pc, #8]	; (37ac <tmr_write_cmpreg+0x10>)
    37a4:	4b02      	ldr	r3, [pc, #8]	; (37b0 <tmr_write_cmpreg+0x14>)
    37a6:	4798      	blx	r3
}
    37a8:	bd10      	pop	{r4, pc}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	20002ba0 	.word	0x20002ba0
    37b0:	00001fb9 	.word	0x00001fb9

000037b4 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    37b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b6:	46ce      	mov	lr, r9
    37b8:	4647      	mov	r7, r8
    37ba:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    37bc:	4a2d      	ldr	r2, [pc, #180]	; (3874 <tmr_init+0xc0>)
    37be:	2300      	movs	r3, #0
    37c0:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    37c2:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    37c4:	2100      	movs	r1, #0
    37c6:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    37c8:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    37ca:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    37cc:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    37ce:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    37d0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    37d2:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    37d4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    37d6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    37d8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    37da:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    37dc:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    37de:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    37e0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    37e2:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    37e4:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    37e6:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    37e8:	3b01      	subs	r3, #1
    37ea:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    37ec:	4c22      	ldr	r4, [pc, #136]	; (3878 <tmr_init+0xc4>)
    37ee:	4923      	ldr	r1, [pc, #140]	; (387c <tmr_init+0xc8>)
    37f0:	0020      	movs	r0, r4
    37f2:	4b23      	ldr	r3, [pc, #140]	; (3880 <tmr_init+0xcc>)
    37f4:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    37f6:	2200      	movs	r2, #0
    37f8:	4922      	ldr	r1, [pc, #136]	; (3884 <tmr_init+0xd0>)
    37fa:	0020      	movs	r0, r4
    37fc:	4d22      	ldr	r5, [pc, #136]	; (3888 <tmr_init+0xd4>)
    37fe:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    3800:	2202      	movs	r2, #2
    3802:	4922      	ldr	r1, [pc, #136]	; (388c <tmr_init+0xd8>)
    3804:	0020      	movs	r0, r4
    3806:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3808:	6820      	ldr	r0, [r4, #0]
    380a:	4b21      	ldr	r3, [pc, #132]	; (3890 <tmr_init+0xdc>)
    380c:	4699      	mov	r9, r3
    380e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3810:	4b20      	ldr	r3, [pc, #128]	; (3894 <tmr_init+0xe0>)
    3812:	4698      	mov	r8, r3
    3814:	5c1b      	ldrb	r3, [r3, r0]
    3816:	261f      	movs	r6, #31
    3818:	4033      	ands	r3, r6
    381a:	2501      	movs	r5, #1
    381c:	002a      	movs	r2, r5
    381e:	409a      	lsls	r2, r3
    3820:	4f1d      	ldr	r7, [pc, #116]	; (3898 <tmr_init+0xe4>)
    3822:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    3824:	7e63      	ldrb	r3, [r4, #25]
    3826:	2201      	movs	r2, #1
    3828:	4313      	orrs	r3, r2
    382a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    382c:	6823      	ldr	r3, [r4, #0]
    382e:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3830:	0018      	movs	r0, r3
    3832:	47c8      	blx	r9
    3834:	4643      	mov	r3, r8
    3836:	5c1b      	ldrb	r3, [r3, r0]
    3838:	401e      	ands	r6, r3
    383a:	40b5      	lsls	r5, r6
    383c:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    383e:	7e63      	ldrb	r3, [r4, #25]
    3840:	2210      	movs	r2, #16
    3842:	4313      	orrs	r3, r2
    3844:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3846:	6822      	ldr	r2, [r4, #0]
    3848:	2310      	movs	r3, #16
    384a:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    384c:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    384e:	b25b      	sxtb	r3, r3
    3850:	2b00      	cmp	r3, #0
    3852:	dbfb      	blt.n	384c <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3854:	8813      	ldrh	r3, [r2, #0]
    3856:	2102      	movs	r1, #2
    3858:	430b      	orrs	r3, r1
    385a:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    385c:	2000      	movs	r0, #0
    385e:	4b0f      	ldr	r3, [pc, #60]	; (389c <tmr_init+0xe8>)
    3860:	4798      	blx	r3
    3862:	490f      	ldr	r1, [pc, #60]	; (38a0 <tmr_init+0xec>)
    3864:	4b0f      	ldr	r3, [pc, #60]	; (38a4 <tmr_init+0xf0>)
    3866:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3868:	b2c0      	uxtb	r0, r0
}
    386a:	bc0c      	pop	{r2, r3}
    386c:	4690      	mov	r8, r2
    386e:	4699      	mov	r9, r3
    3870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	20002b6c 	.word	0x20002b6c
    3878:	20002ba0 	.word	0x20002ba0
    387c:	42002c00 	.word	0x42002c00
    3880:	00001d51 	.word	0x00001d51
    3884:	0000372d 	.word	0x0000372d
    3888:	00001c51 	.word	0x00001c51
    388c:	00003721 	.word	0x00003721
    3890:	00001d19 	.word	0x00001d19
    3894:	0000a7cc 	.word	0x0000a7cc
    3898:	e000e100 	.word	0xe000e100
    389c:	000019e1 	.word	0x000019e1
    38a0:	000f4240 	.word	0x000f4240
    38a4:	00008f89 	.word	0x00008f89

000038a8 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    38a8:	4770      	bx	lr
	...

000038ac <sal_aes_restart>:
 * When using sal_aes_wrrd(), call sal_aes_read() to get the result
 * of the last AES operation BEFORE you put the transceiver unit to
 * sleep state!
 */
void sal_aes_restart(void)
{
    38ac:	b570      	push	{r4, r5, r6, lr}
	 * This is not required anymore for SPI transceivers beyond
	 * these two mentioned transceivers.
	 */
	uint8_t *keyp;
	uint8_t save_cmd;
	if (last_dir == AES_DIR_ENCRYPT) {
    38ae:	4b0c      	ldr	r3, [pc, #48]	; (38e0 <sal_aes_restart+0x34>)
    38b0:	781b      	ldrb	r3, [r3, #0]
    38b2:	2b00      	cmp	r3, #0
    38b4:	d012      	beq.n	38dc <sal_aes_restart+0x30>
		keyp = enc_key;
	} else {
		keyp = dec_key;
    38b6:	490b      	ldr	r1, [pc, #44]	; (38e4 <sal_aes_restart+0x38>)
	}

	save_cmd = aes_buf[0];
    38b8:	4c0b      	ldr	r4, [pc, #44]	; (38e8 <sal_aes_restart+0x3c>)
    38ba:	7825      	ldrb	r5, [r4, #0]
	aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    38bc:	2310      	movs	r3, #16
    38be:	7023      	strb	r3, [r4, #0]

	/* Fill in key. */
	memcpy(aes_buf + 1, keyp, AES_KEYSIZE);
    38c0:	1c60      	adds	r0, r4, #1
    38c2:	2210      	movs	r2, #16
    38c4:	4b09      	ldr	r3, [pc, #36]	; (38ec <sal_aes_restart+0x40>)
    38c6:	4798      	blx	r3

	/* Write to SRAM in one step. */
	trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    38c8:	2211      	movs	r2, #17
    38ca:	0021      	movs	r1, r4
    38cc:	2083      	movs	r0, #131	; 0x83
    38ce:	4b08      	ldr	r3, [pc, #32]	; (38f0 <sal_aes_restart+0x44>)
    38d0:	4798      	blx	r3
			AES_BLOCKSIZE + 1);

	aes_buf[0] = save_cmd;
    38d2:	7025      	strb	r5, [r4, #0]
	setup_flag = true;
    38d4:	2201      	movs	r2, #1
    38d6:	4b07      	ldr	r3, [pc, #28]	; (38f4 <sal_aes_restart+0x48>)
    38d8:	701a      	strb	r2, [r3, #0]
}
    38da:	bd70      	pop	{r4, r5, r6, pc}
		keyp = enc_key;
    38dc:	4906      	ldr	r1, [pc, #24]	; (38f8 <sal_aes_restart+0x4c>)
    38de:	e7eb      	b.n	38b8 <sal_aes_restart+0xc>
    38e0:	2000006d 	.word	0x2000006d
    38e4:	200002ec 	.word	0x200002ec
    38e8:	200002d8 	.word	0x200002d8
    38ec:	0000932f 	.word	0x0000932f
    38f0:	00004069 	.word	0x00004069
    38f4:	2000030c 	.word	0x2000030c
    38f8:	200002fc 	.word	0x200002fc

000038fc <_sal_aes_clean_up>:
/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
}
    38fc:	4770      	bx	lr
	...

00003900 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    3900:	b570      	push	{r4, r5, r6, lr}
    3902:	0003      	movs	r3, r0
    3904:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3906:	4c14      	ldr	r4, [pc, #80]	; (3958 <sal_aes_wrrd+0x58>)
    3908:	1c60      	adds	r0, r4, #1
    390a:	2210      	movs	r2, #16
    390c:	0019      	movs	r1, r3
    390e:	4b13      	ldr	r3, [pc, #76]	; (395c <sal_aes_wrrd+0x5c>)
    3910:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3912:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3914:	4b12      	ldr	r3, [pc, #72]	; (3960 <sal_aes_wrrd+0x60>)
    3916:	781b      	ldrb	r3, [r3, #0]
    3918:	2b00      	cmp	r3, #0
    391a:	d015      	beq.n	3948 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    391c:	2212      	movs	r2, #18
    391e:	490e      	ldr	r1, [pc, #56]	; (3958 <sal_aes_wrrd+0x58>)
    3920:	2083      	movs	r0, #131	; 0x83
    3922:	4b10      	ldr	r3, [pc, #64]	; (3964 <sal_aes_wrrd+0x64>)
    3924:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3926:	2200      	movs	r2, #0
    3928:	4b0d      	ldr	r3, [pc, #52]	; (3960 <sal_aes_wrrd+0x60>)
    392a:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    392c:	2d00      	cmp	r5, #0
    392e:	d005      	beq.n	393c <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    3930:	2210      	movs	r2, #16
    3932:	4909      	ldr	r1, [pc, #36]	; (3958 <sal_aes_wrrd+0x58>)
    3934:	3101      	adds	r1, #1
    3936:	0028      	movs	r0, r5
    3938:	4b08      	ldr	r3, [pc, #32]	; (395c <sal_aes_wrrd+0x5c>)
    393a:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    393c:	4b06      	ldr	r3, [pc, #24]	; (3958 <sal_aes_wrrd+0x58>)
    393e:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    3940:	2018      	movs	r0, #24
    3942:	4b09      	ldr	r3, [pc, #36]	; (3968 <sal_aes_wrrd+0x68>)
    3944:	4798      	blx	r3
}
    3946:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3948:	2211      	movs	r2, #17
    394a:	4903      	ldr	r1, [pc, #12]	; (3958 <sal_aes_wrrd+0x58>)
    394c:	3101      	adds	r1, #1
    394e:	2084      	movs	r0, #132	; 0x84
    3950:	4b04      	ldr	r3, [pc, #16]	; (3964 <sal_aes_wrrd+0x64>)
    3952:	4798      	blx	r3
    3954:	e7ea      	b.n	392c <sal_aes_wrrd+0x2c>
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	200002d8 	.word	0x200002d8
    395c:	0000932f 	.word	0x0000932f
    3960:	2000030c 	.word	0x2000030c
    3964:	0000435d 	.word	0x0000435d
    3968:	00000155 	.word	0x00000155

0000396c <sal_aes_setup>:
{
    396c:	b5f0      	push	{r4, r5, r6, r7, lr}
    396e:	46c6      	mov	lr, r8
    3970:	b500      	push	{lr}
    3972:	b084      	sub	sp, #16
    3974:	0005      	movs	r5, r0
    3976:	000e      	movs	r6, r1
    3978:	0014      	movs	r4, r2
	if (key != NULL) {
    397a:	2800      	cmp	r0, #0
    397c:	d017      	beq.n	39ae <sal_aes_setup+0x42>
		dec_initialized = false;
    397e:	2200      	movs	r2, #0
    3980:	4b3e      	ldr	r3, [pc, #248]	; (3a7c <sal_aes_setup+0x110>)
    3982:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    3984:	3202      	adds	r2, #2
    3986:	4b3e      	ldr	r3, [pc, #248]	; (3a80 <sal_aes_setup+0x114>)
    3988:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    398a:	320e      	adds	r2, #14
    398c:	0001      	movs	r1, r0
    398e:	483d      	ldr	r0, [pc, #244]	; (3a84 <sal_aes_setup+0x118>)
    3990:	4b3d      	ldr	r3, [pc, #244]	; (3a88 <sal_aes_setup+0x11c>)
    3992:	4698      	mov	r8, r3
    3994:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3996:	4f3d      	ldr	r7, [pc, #244]	; (3a8c <sal_aes_setup+0x120>)
    3998:	2310      	movs	r3, #16
    399a:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    399c:	1c78      	adds	r0, r7, #1
    399e:	2210      	movs	r2, #16
    39a0:	0029      	movs	r1, r5
    39a2:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    39a4:	2211      	movs	r2, #17
    39a6:	0039      	movs	r1, r7
    39a8:	2083      	movs	r0, #131	; 0x83
    39aa:	4b39      	ldr	r3, [pc, #228]	; (3a90 <sal_aes_setup+0x124>)
    39ac:	4798      	blx	r3
	switch (dir) {
    39ae:	2c00      	cmp	r4, #0
    39b0:	d003      	beq.n	39ba <sal_aes_setup+0x4e>
    39b2:	2c01      	cmp	r4, #1
    39b4:	d02f      	beq.n	3a16 <sal_aes_setup+0xaa>
		return false;
    39b6:	2000      	movs	r0, #0
    39b8:	e01b      	b.n	39f2 <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    39ba:	4b31      	ldr	r3, [pc, #196]	; (3a80 <sal_aes_setup+0x114>)
    39bc:	781b      	ldrb	r3, [r3, #0]
    39be:	2b01      	cmp	r3, #1
    39c0:	d01b      	beq.n	39fa <sal_aes_setup+0x8e>
	last_dir = dir;
    39c2:	4b2f      	ldr	r3, [pc, #188]	; (3a80 <sal_aes_setup+0x114>)
    39c4:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    39c6:	2e00      	cmp	r6, #0
    39c8:	d002      	beq.n	39d0 <sal_aes_setup+0x64>
		return (false);
    39ca:	2000      	movs	r0, #0
	switch (enc_mode) {
    39cc:	2e02      	cmp	r6, #2
    39ce:	d110      	bne.n	39f2 <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    39d0:	0136      	lsls	r6, r6, #4
    39d2:	2370      	movs	r3, #112	; 0x70
    39d4:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    39d6:	00e4      	lsls	r4, r4, #3
    39d8:	3b68      	subs	r3, #104	; 0x68
    39da:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    39dc:	4334      	orrs	r4, r6
    39de:	4b2b      	ldr	r3, [pc, #172]	; (3a8c <sal_aes_setup+0x120>)
    39e0:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    39e2:	2680      	movs	r6, #128	; 0x80
    39e4:	4276      	negs	r6, r6
    39e6:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    39e8:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    39ea:	2201      	movs	r2, #1
    39ec:	4b29      	ldr	r3, [pc, #164]	; (3a94 <sal_aes_setup+0x128>)
    39ee:	701a      	strb	r2, [r3, #0]
	return (true);
    39f0:	2001      	movs	r0, #1
}
    39f2:	b004      	add	sp, #16
    39f4:	bc04      	pop	{r2}
    39f6:	4690      	mov	r8, r2
    39f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    39fa:	4d24      	ldr	r5, [pc, #144]	; (3a8c <sal_aes_setup+0x120>)
    39fc:	330f      	adds	r3, #15
    39fe:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    3a00:	1c68      	adds	r0, r5, #1
    3a02:	2210      	movs	r2, #16
    3a04:	491f      	ldr	r1, [pc, #124]	; (3a84 <sal_aes_setup+0x118>)
    3a06:	4b20      	ldr	r3, [pc, #128]	; (3a88 <sal_aes_setup+0x11c>)
    3a08:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3a0a:	2211      	movs	r2, #17
    3a0c:	0029      	movs	r1, r5
    3a0e:	2083      	movs	r0, #131	; 0x83
    3a10:	4b1f      	ldr	r3, [pc, #124]	; (3a90 <sal_aes_setup+0x124>)
    3a12:	4798      	blx	r3
    3a14:	e7d5      	b.n	39c2 <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    3a16:	4b1a      	ldr	r3, [pc, #104]	; (3a80 <sal_aes_setup+0x114>)
    3a18:	781b      	ldrb	r3, [r3, #0]
    3a1a:	2b01      	cmp	r3, #1
    3a1c:	d0d1      	beq.n	39c2 <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3a1e:	2210      	movs	r2, #16
    3a20:	4b1a      	ldr	r3, [pc, #104]	; (3a8c <sal_aes_setup+0x120>)
    3a22:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    3a24:	4b15      	ldr	r3, [pc, #84]	; (3a7c <sal_aes_setup+0x110>)
    3a26:	781b      	ldrb	r3, [r3, #0]
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d00e      	beq.n	3a4a <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3a2c:	4d17      	ldr	r5, [pc, #92]	; (3a8c <sal_aes_setup+0x120>)
    3a2e:	1c68      	adds	r0, r5, #1
    3a30:	2210      	movs	r2, #16
    3a32:	4919      	ldr	r1, [pc, #100]	; (3a98 <sal_aes_setup+0x12c>)
    3a34:	4b14      	ldr	r3, [pc, #80]	; (3a88 <sal_aes_setup+0x11c>)
    3a36:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3a38:	2211      	movs	r2, #17
    3a3a:	0029      	movs	r1, r5
    3a3c:	2083      	movs	r0, #131	; 0x83
    3a3e:	4b14      	ldr	r3, [pc, #80]	; (3a90 <sal_aes_setup+0x124>)
    3a40:	4798      	blx	r3
			dec_initialized = true;
    3a42:	4b0e      	ldr	r3, [pc, #56]	; (3a7c <sal_aes_setup+0x110>)
    3a44:	2201      	movs	r2, #1
    3a46:	701a      	strb	r2, [r3, #0]
    3a48:	e7bb      	b.n	39c2 <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3a4a:	4d10      	ldr	r5, [pc, #64]	; (3a8c <sal_aes_setup+0x120>)
    3a4c:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    3a4e:	3380      	adds	r3, #128	; 0x80
    3a50:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    3a52:	3a0f      	subs	r2, #15
    3a54:	4b0f      	ldr	r3, [pc, #60]	; (3a94 <sal_aes_setup+0x128>)
    3a56:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    3a58:	2100      	movs	r1, #0
    3a5a:	4668      	mov	r0, sp
    3a5c:	4b0f      	ldr	r3, [pc, #60]	; (3a9c <sal_aes_setup+0x130>)
    3a5e:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3a60:	2310      	movs	r3, #16
    3a62:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3a64:	2201      	movs	r2, #1
    3a66:	0029      	movs	r1, r5
    3a68:	2083      	movs	r0, #131	; 0x83
    3a6a:	4b09      	ldr	r3, [pc, #36]	; (3a90 <sal_aes_setup+0x124>)
    3a6c:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    3a6e:	2210      	movs	r2, #16
    3a70:	4909      	ldr	r1, [pc, #36]	; (3a98 <sal_aes_setup+0x12c>)
    3a72:	2084      	movs	r0, #132	; 0x84
    3a74:	4b0a      	ldr	r3, [pc, #40]	; (3aa0 <sal_aes_setup+0x134>)
    3a76:	4798      	blx	r3
    3a78:	e7d8      	b.n	3a2c <sal_aes_setup+0xc0>
    3a7a:	46c0      	nop			; (mov r8, r8)
    3a7c:	200002ea 	.word	0x200002ea
    3a80:	2000006d 	.word	0x2000006d
    3a84:	200002fc 	.word	0x200002fc
    3a88:	0000932f 	.word	0x0000932f
    3a8c:	200002d8 	.word	0x200002d8
    3a90:	00004069 	.word	0x00004069
    3a94:	2000030c 	.word	0x2000030c
    3a98:	200002ec 	.word	0x200002ec
    3a9c:	00003901 	.word	0x00003901
    3aa0:	000041d5 	.word	0x000041d5

00003aa4 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3aa4:	b510      	push	{r4, lr}
    3aa6:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    3aa8:	2210      	movs	r2, #16
    3aaa:	2084      	movs	r0, #132	; 0x84
    3aac:	4b01      	ldr	r3, [pc, #4]	; (3ab4 <sal_aes_read+0x10>)
    3aae:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3ab0:	bd10      	pop	{r4, pc}
    3ab2:	46c0      	nop			; (mov r8, r8)
    3ab4:	000041d5 	.word	0x000041d5

00003ab8 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3ab8:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    3aba:	2201      	movs	r2, #1
    3abc:	4b03      	ldr	r3, [pc, #12]	; (3acc <AT86RFX_ISR+0x14>)
    3abe:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3ac0:	4b03      	ldr	r3, [pc, #12]	; (3ad0 <AT86RFX_ISR+0x18>)
    3ac2:	681b      	ldr	r3, [r3, #0]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d000      	beq.n	3aca <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3ac8:	4798      	blx	r3
	}
}
    3aca:	bd10      	pop	{r4, pc}
    3acc:	40001800 	.word	0x40001800
    3ad0:	20000310 	.word	0x20000310

00003ad4 <trx_spi_init>:

void trx_spi_init(void)
{
    3ad4:	b530      	push	{r4, r5, lr}
    3ad6:	b085      	sub	sp, #20
	config->address_enabled = false;
    3ad8:	4a34      	ldr	r2, [pc, #208]	; (3bac <trx_spi_init+0xd8>)
    3ada:	2300      	movs	r3, #0
    3adc:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3ade:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3ae0:	213f      	movs	r1, #63	; 0x3f
    3ae2:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    3ae4:	4c32      	ldr	r4, [pc, #200]	; (3bb0 <trx_spi_init+0xdc>)
    3ae6:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3ae8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3aea:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3aec:	2201      	movs	r2, #1
    3aee:	4669      	mov	r1, sp
    3af0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3af2:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3af4:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3af6:	203f      	movs	r0, #63	; 0x3f
    3af8:	4b2e      	ldr	r3, [pc, #184]	; (3bb4 <trx_spi_init+0xe0>)
    3afa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3afc:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    3afe:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3b00:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3b02:	2900      	cmp	r1, #0
    3b04:	d104      	bne.n	3b10 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3b06:	0953      	lsrs	r3, r2, #5
    3b08:	01db      	lsls	r3, r3, #7
    3b0a:	492b      	ldr	r1, [pc, #172]	; (3bb8 <trx_spi_init+0xe4>)
    3b0c:	468c      	mov	ip, r1
    3b0e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b10:	211f      	movs	r1, #31
    3b12:	4011      	ands	r1, r2
    3b14:	2201      	movs	r2, #1
    3b16:	0010      	movs	r0, r2
    3b18:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3b1a:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3b1c:	4c27      	ldr	r4, [pc, #156]	; (3bbc <trx_spi_init+0xe8>)
    3b1e:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3b20:	2300      	movs	r3, #0
    3b22:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3b24:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3b26:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3b28:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3b2a:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3b2c:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3b2e:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3b30:	3223      	adds	r2, #35	; 0x23
    3b32:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3b34:	0020      	movs	r0, r4
    3b36:	3018      	adds	r0, #24
    3b38:	3a18      	subs	r2, #24
    3b3a:	2100      	movs	r1, #0
    3b3c:	4b20      	ldr	r3, [pc, #128]	; (3bc0 <trx_spi_init+0xec>)
    3b3e:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3b40:	2380      	movs	r3, #128	; 0x80
    3b42:	025b      	lsls	r3, r3, #9
    3b44:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3b46:	4b1f      	ldr	r3, [pc, #124]	; (3bc4 <trx_spi_init+0xf0>)
    3b48:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3b4a:	4b1f      	ldr	r3, [pc, #124]	; (3bc8 <trx_spi_init+0xf4>)
    3b4c:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3b4e:	2301      	movs	r3, #1
    3b50:	425b      	negs	r3, r3
    3b52:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3b54:	4b1d      	ldr	r3, [pc, #116]	; (3bcc <trx_spi_init+0xf8>)
    3b56:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3b58:	4b1d      	ldr	r3, [pc, #116]	; (3bd0 <trx_spi_init+0xfc>)
    3b5a:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3b5c:	4d1d      	ldr	r5, [pc, #116]	; (3bd4 <trx_spi_init+0x100>)
    3b5e:	0022      	movs	r2, r4
    3b60:	491d      	ldr	r1, [pc, #116]	; (3bd8 <trx_spi_init+0x104>)
    3b62:	0028      	movs	r0, r5
    3b64:	4b1d      	ldr	r3, [pc, #116]	; (3bdc <trx_spi_init+0x108>)
    3b66:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b68:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3b6a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d1fc      	bne.n	3b6a <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3b70:	6813      	ldr	r3, [r2, #0]
    3b72:	2502      	movs	r5, #2
    3b74:	432b      	orrs	r3, r5
    3b76:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3b78:	ac01      	add	r4, sp, #4
    3b7a:	0020      	movs	r0, r4
    3b7c:	4b18      	ldr	r3, [pc, #96]	; (3be0 <trx_spi_init+0x10c>)
    3b7e:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    3b80:	2320      	movs	r3, #32
    3b82:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3b84:	2380      	movs	r3, #128	; 0x80
    3b86:	039b      	lsls	r3, r3, #14
    3b88:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    3b8a:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3b8c:	2301      	movs	r3, #1
    3b8e:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3b90:	2200      	movs	r2, #0
    3b92:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3b94:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    3b96:	0021      	movs	r1, r4
    3b98:	2000      	movs	r0, #0
    3b9a:	4b12      	ldr	r3, [pc, #72]	; (3be4 <trx_spi_init+0x110>)
    3b9c:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3b9e:	2200      	movs	r2, #0
    3ba0:	2100      	movs	r1, #0
    3ba2:	4811      	ldr	r0, [pc, #68]	; (3be8 <trx_spi_init+0x114>)
    3ba4:	4b11      	ldr	r3, [pc, #68]	; (3bec <trx_spi_init+0x118>)
    3ba6:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3ba8:	b005      	add	sp, #20
    3baa:	bd30      	pop	{r4, r5, pc}
    3bac:	20002bc0 	.word	0x20002bc0
    3bb0:	20002bc4 	.word	0x20002bc4
    3bb4:	000004c1 	.word	0x000004c1
    3bb8:	41004400 	.word	0x41004400
    3bbc:	20002bc8 	.word	0x20002bc8
    3bc0:	00009341 	.word	0x00009341
    3bc4:	003d0900 	.word	0x003d0900
    3bc8:	00530005 	.word	0x00530005
    3bcc:	003e0005 	.word	0x003e0005
    3bd0:	00520005 	.word	0x00520005
    3bd4:	200003f0 	.word	0x200003f0
    3bd8:	42001800 	.word	0x42001800
    3bdc:	00000929 	.word	0x00000929
    3be0:	00000435 	.word	0x00000435
    3be4:	00000449 	.word	0x00000449
    3be8:	00003ab9 	.word	0x00003ab9
    3bec:	000002f1 	.word	0x000002f1

00003bf0 <PhyReset>:

void PhyReset(void)
{
    3bf0:	b570      	push	{r4, r5, r6, lr}
    3bf2:	4c08      	ldr	r4, [pc, #32]	; (3c14 <PhyReset+0x24>)
    3bf4:	2580      	movs	r5, #128	; 0x80
    3bf6:	022d      	lsls	r5, r5, #8
    3bf8:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    3bfa:	2280      	movs	r2, #128	; 0x80
    3bfc:	0352      	lsls	r2, r2, #13
    3bfe:	4b06      	ldr	r3, [pc, #24]	; (3c18 <PhyReset+0x28>)
    3c00:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3c02:	20a5      	movs	r0, #165	; 0xa5
    3c04:	0040      	lsls	r0, r0, #1
    3c06:	4e05      	ldr	r6, [pc, #20]	; (3c1c <PhyReset+0x2c>)
    3c08:	47b0      	blx	r6
    3c0a:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3c0c:	200a      	movs	r0, #10
    3c0e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3c10:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3c12:	bd70      	pop	{r4, r5, r6, pc}
    3c14:	41004480 	.word	0x41004480
    3c18:	41004400 	.word	0x41004400
    3c1c:	00000155 	.word	0x00000155

00003c20 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3c20:	b570      	push	{r4, r5, r6, lr}
    3c22:	b082      	sub	sp, #8
    3c24:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c26:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3c2a:	425a      	negs	r2, r3
    3c2c:	4153      	adcs	r3, r2
    3c2e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3c30:	b672      	cpsid	i
    3c32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c36:	2200      	movs	r2, #0
    3c38:	4b33      	ldr	r3, [pc, #204]	; (3d08 <trx_reg_read+0xe8>)
    3c3a:	701a      	strb	r2, [r3, #0]
	return flags;
    3c3c:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3c3e:	4e33      	ldr	r6, [pc, #204]	; (3d0c <trx_reg_read+0xec>)
    3c40:	3201      	adds	r2, #1
    3c42:	4933      	ldr	r1, [pc, #204]	; (3d10 <trx_reg_read+0xf0>)
    3c44:	0030      	movs	r0, r6
    3c46:	4b33      	ldr	r3, [pc, #204]	; (3d14 <trx_reg_read+0xf4>)
    3c48:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c4a:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3c4c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c4e:	7e1a      	ldrb	r2, [r3, #24]
    3c50:	420a      	tst	r2, r1
    3c52:	d0fc      	beq.n	3c4e <trx_reg_read+0x2e>
    3c54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c56:	07d2      	lsls	r2, r2, #31
    3c58:	d502      	bpl.n	3c60 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c5a:	2280      	movs	r2, #128	; 0x80
    3c5c:	4315      	orrs	r5, r2
    3c5e:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3c60:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c62:	7e1a      	ldrb	r2, [r3, #24]
    3c64:	420a      	tst	r2, r1
    3c66:	d0fc      	beq.n	3c62 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c68:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c6a:	7e1a      	ldrb	r2, [r3, #24]
    3c6c:	420a      	tst	r2, r1
    3c6e:	d0fc      	beq.n	3c6a <trx_reg_read+0x4a>
    3c70:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3c72:	0752      	lsls	r2, r2, #29
    3c74:	d50c      	bpl.n	3c90 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c76:	8b5a      	ldrh	r2, [r3, #26]
    3c78:	0752      	lsls	r2, r2, #29
    3c7a:	d501      	bpl.n	3c80 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3c7c:	2204      	movs	r2, #4
    3c7e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c80:	4a22      	ldr	r2, [pc, #136]	; (3d0c <trx_reg_read+0xec>)
    3c82:	7992      	ldrb	r2, [r2, #6]
    3c84:	2a01      	cmp	r2, #1
    3c86:	d034      	beq.n	3cf2 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c8a:	b2d2      	uxtb	r2, r2
    3c8c:	4922      	ldr	r1, [pc, #136]	; (3d18 <trx_reg_read+0xf8>)
    3c8e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3c90:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c92:	7e1a      	ldrb	r2, [r3, #24]
    3c94:	420a      	tst	r2, r1
    3c96:	d0fc      	beq.n	3c92 <trx_reg_read+0x72>
    3c98:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c9a:	07d2      	lsls	r2, r2, #31
    3c9c:	d501      	bpl.n	3ca2 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c9e:	2200      	movs	r2, #0
    3ca0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3ca2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ca4:	7e1a      	ldrb	r2, [r3, #24]
    3ca6:	420a      	tst	r2, r1
    3ca8:	d0fc      	beq.n	3ca4 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    3caa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cac:	7e1a      	ldrb	r2, [r3, #24]
    3cae:	420a      	tst	r2, r1
    3cb0:	d0fc      	beq.n	3cac <trx_reg_read+0x8c>
    3cb2:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    3cb4:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    3cb6:	0752      	lsls	r2, r2, #29
    3cb8:	d50a      	bpl.n	3cd0 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cba:	8b5a      	ldrh	r2, [r3, #26]
    3cbc:	0752      	lsls	r2, r2, #29
    3cbe:	d501      	bpl.n	3cc4 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cc0:	2204      	movs	r2, #4
    3cc2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cc4:	4a11      	ldr	r2, [pc, #68]	; (3d0c <trx_reg_read+0xec>)
    3cc6:	7992      	ldrb	r2, [r2, #6]
    3cc8:	2a01      	cmp	r2, #1
    3cca:	d018      	beq.n	3cfe <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ccc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3cce:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3cd0:	2200      	movs	r2, #0
    3cd2:	490f      	ldr	r1, [pc, #60]	; (3d10 <trx_reg_read+0xf0>)
    3cd4:	480d      	ldr	r0, [pc, #52]	; (3d0c <trx_reg_read+0xec>)
    3cd6:	4b0f      	ldr	r3, [pc, #60]	; (3d14 <trx_reg_read+0xf4>)
    3cd8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3cda:	23ff      	movs	r3, #255	; 0xff
    3cdc:	4223      	tst	r3, r4
    3cde:	d005      	beq.n	3cec <trx_reg_read+0xcc>
		cpu_irq_enable();
    3ce0:	2201      	movs	r2, #1
    3ce2:	4b09      	ldr	r3, [pc, #36]	; (3d08 <trx_reg_read+0xe8>)
    3ce4:	701a      	strb	r2, [r3, #0]
    3ce6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3cea:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3cec:	b2e8      	uxtb	r0, r5
}
    3cee:	b002      	add	sp, #8
    3cf0:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3cf4:	05d2      	lsls	r2, r2, #23
    3cf6:	0dd2      	lsrs	r2, r2, #23
    3cf8:	4907      	ldr	r1, [pc, #28]	; (3d18 <trx_reg_read+0xf8>)
    3cfa:	800a      	strh	r2, [r1, #0]
    3cfc:	e7c8      	b.n	3c90 <trx_reg_read+0x70>
    3cfe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3d00:	05ed      	lsls	r5, r5, #23
    3d02:	0ded      	lsrs	r5, r5, #23
    3d04:	e7e4      	b.n	3cd0 <trx_reg_read+0xb0>
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	20000008 	.word	0x20000008
    3d0c:	200003f0 	.word	0x200003f0
    3d10:	20002bc4 	.word	0x20002bc4
    3d14:	00000bed 	.word	0x00000bed
    3d18:	20002bbc 	.word	0x20002bbc

00003d1c <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d1e:	b083      	sub	sp, #12
    3d20:	0006      	movs	r6, r0
    3d22:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d24:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3d28:	425a      	negs	r2, r3
    3d2a:	4153      	adcs	r3, r2
    3d2c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3d2e:	b672      	cpsid	i
    3d30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3d34:	2200      	movs	r2, #0
    3d36:	4b34      	ldr	r3, [pc, #208]	; (3e08 <trx_reg_write+0xec>)
    3d38:	701a      	strb	r2, [r3, #0]
	return flags;
    3d3a:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3d3c:	4f33      	ldr	r7, [pc, #204]	; (3e0c <trx_reg_write+0xf0>)
    3d3e:	3201      	adds	r2, #1
    3d40:	4933      	ldr	r1, [pc, #204]	; (3e10 <trx_reg_write+0xf4>)
    3d42:	0038      	movs	r0, r7
    3d44:	4b33      	ldr	r3, [pc, #204]	; (3e14 <trx_reg_write+0xf8>)
    3d46:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d48:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3d4a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d4c:	7e1a      	ldrb	r2, [r3, #24]
    3d4e:	420a      	tst	r2, r1
    3d50:	d0fc      	beq.n	3d4c <trx_reg_write+0x30>
    3d52:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d54:	07d2      	lsls	r2, r2, #31
    3d56:	d502      	bpl.n	3d5e <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d58:	22c0      	movs	r2, #192	; 0xc0
    3d5a:	4316      	orrs	r6, r2
    3d5c:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3d5e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d60:	7e1a      	ldrb	r2, [r3, #24]
    3d62:	420a      	tst	r2, r1
    3d64:	d0fc      	beq.n	3d60 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3d66:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d68:	7e1a      	ldrb	r2, [r3, #24]
    3d6a:	420a      	tst	r2, r1
    3d6c:	d0fc      	beq.n	3d68 <trx_reg_write+0x4c>
    3d6e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3d70:	0752      	lsls	r2, r2, #29
    3d72:	d50c      	bpl.n	3d8e <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d74:	8b5a      	ldrh	r2, [r3, #26]
    3d76:	0752      	lsls	r2, r2, #29
    3d78:	d501      	bpl.n	3d7e <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d7a:	2204      	movs	r2, #4
    3d7c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d7e:	4a23      	ldr	r2, [pc, #140]	; (3e0c <trx_reg_write+0xf0>)
    3d80:	7992      	ldrb	r2, [r2, #6]
    3d82:	2a01      	cmp	r2, #1
    3d84:	d033      	beq.n	3dee <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d88:	b2d2      	uxtb	r2, r2
    3d8a:	4923      	ldr	r1, [pc, #140]	; (3e18 <trx_reg_write+0xfc>)
    3d8c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3d8e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d90:	7e1a      	ldrb	r2, [r3, #24]
    3d92:	420a      	tst	r2, r1
    3d94:	d0fc      	beq.n	3d90 <trx_reg_write+0x74>
    3d96:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d98:	07d2      	lsls	r2, r2, #31
    3d9a:	d500      	bpl.n	3d9e <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d9c:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3d9e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3da0:	7e1a      	ldrb	r2, [r3, #24]
    3da2:	420a      	tst	r2, r1
    3da4:	d0fc      	beq.n	3da0 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3da6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3da8:	7e1a      	ldrb	r2, [r3, #24]
    3daa:	420a      	tst	r2, r1
    3dac:	d0fc      	beq.n	3da8 <trx_reg_write+0x8c>
    3dae:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3db0:	0752      	lsls	r2, r2, #29
    3db2:	d50c      	bpl.n	3dce <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3db4:	8b5a      	ldrh	r2, [r3, #26]
    3db6:	0752      	lsls	r2, r2, #29
    3db8:	d501      	bpl.n	3dbe <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3dba:	2204      	movs	r2, #4
    3dbc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3dbe:	4a13      	ldr	r2, [pc, #76]	; (3e0c <trx_reg_write+0xf0>)
    3dc0:	7992      	ldrb	r2, [r2, #6]
    3dc2:	2a01      	cmp	r2, #1
    3dc4:	d019      	beq.n	3dfa <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3dc8:	b2db      	uxtb	r3, r3
    3dca:	4a13      	ldr	r2, [pc, #76]	; (3e18 <trx_reg_write+0xfc>)
    3dcc:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3dce:	2200      	movs	r2, #0
    3dd0:	490f      	ldr	r1, [pc, #60]	; (3e10 <trx_reg_write+0xf4>)
    3dd2:	480e      	ldr	r0, [pc, #56]	; (3e0c <trx_reg_write+0xf0>)
    3dd4:	4b0f      	ldr	r3, [pc, #60]	; (3e14 <trx_reg_write+0xf8>)
    3dd6:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3dd8:	23ff      	movs	r3, #255	; 0xff
    3dda:	422b      	tst	r3, r5
    3ddc:	d005      	beq.n	3dea <trx_reg_write+0xce>
		cpu_irq_enable();
    3dde:	2201      	movs	r2, #1
    3de0:	4b09      	ldr	r3, [pc, #36]	; (3e08 <trx_reg_write+0xec>)
    3de2:	701a      	strb	r2, [r3, #0]
    3de4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3de8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3dea:	b003      	add	sp, #12
    3dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3df0:	05d2      	lsls	r2, r2, #23
    3df2:	0dd2      	lsrs	r2, r2, #23
    3df4:	4908      	ldr	r1, [pc, #32]	; (3e18 <trx_reg_write+0xfc>)
    3df6:	800a      	strh	r2, [r1, #0]
    3df8:	e7c9      	b.n	3d8e <trx_reg_write+0x72>
    3dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3dfc:	05db      	lsls	r3, r3, #23
    3dfe:	0ddb      	lsrs	r3, r3, #23
    3e00:	4a05      	ldr	r2, [pc, #20]	; (3e18 <trx_reg_write+0xfc>)
    3e02:	8013      	strh	r3, [r2, #0]
    3e04:	e7e3      	b.n	3dce <trx_reg_write+0xb2>
    3e06:	46c0      	nop			; (mov r8, r8)
    3e08:	20000008 	.word	0x20000008
    3e0c:	200003f0 	.word	0x200003f0
    3e10:	20002bc4 	.word	0x20002bc4
    3e14:	00000bed 	.word	0x00000bed
    3e18:	20002bbc 	.word	0x20002bbc

00003e1c <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e1e:	46d6      	mov	lr, sl
    3e20:	464f      	mov	r7, r9
    3e22:	4646      	mov	r6, r8
    3e24:	b5c0      	push	{r6, r7, lr}
    3e26:	b082      	sub	sp, #8
    3e28:	0005      	movs	r5, r0
    3e2a:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e2c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3e30:	425a      	negs	r2, r3
    3e32:	4153      	adcs	r3, r2
    3e34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3e36:	b672      	cpsid	i
    3e38:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e3c:	2200      	movs	r2, #0
    3e3e:	4b3e      	ldr	r3, [pc, #248]	; (3f38 <trx_frame_read+0x11c>)
    3e40:	701a      	strb	r2, [r3, #0]
	return flags;
    3e42:	9b01      	ldr	r3, [sp, #4]
    3e44:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3e46:	4f3d      	ldr	r7, [pc, #244]	; (3f3c <trx_frame_read+0x120>)
    3e48:	3201      	adds	r2, #1
    3e4a:	493d      	ldr	r1, [pc, #244]	; (3f40 <trx_frame_read+0x124>)
    3e4c:	0038      	movs	r0, r7
    3e4e:	4b3d      	ldr	r3, [pc, #244]	; (3f44 <trx_frame_read+0x128>)
    3e50:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e52:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3e54:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e56:	7e1a      	ldrb	r2, [r3, #24]
    3e58:	420a      	tst	r2, r1
    3e5a:	d0fc      	beq.n	3e56 <trx_frame_read+0x3a>
    3e5c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3e5e:	07d2      	lsls	r2, r2, #31
    3e60:	d501      	bpl.n	3e66 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e62:	2220      	movs	r2, #32
    3e64:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3e66:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e68:	7e1a      	ldrb	r2, [r3, #24]
    3e6a:	420a      	tst	r2, r1
    3e6c:	d0fc      	beq.n	3e68 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3e6e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e70:	7e1a      	ldrb	r2, [r3, #24]
    3e72:	420a      	tst	r2, r1
    3e74:	d0fc      	beq.n	3e70 <trx_frame_read+0x54>
    3e76:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3e78:	0752      	lsls	r2, r2, #29
    3e7a:	d50c      	bpl.n	3e96 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e7c:	8b5a      	ldrh	r2, [r3, #26]
    3e7e:	0752      	lsls	r2, r2, #29
    3e80:	d501      	bpl.n	3e86 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e82:	2204      	movs	r2, #4
    3e84:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e86:	4a2d      	ldr	r2, [pc, #180]	; (3f3c <trx_frame_read+0x120>)
    3e88:	7992      	ldrb	r2, [r2, #6]
    3e8a:	2a01      	cmp	r2, #1
    3e8c:	d013      	beq.n	3eb6 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e90:	b2db      	uxtb	r3, r3
    3e92:	4a2d      	ldr	r2, [pc, #180]	; (3f48 <trx_frame_read+0x12c>)
    3e94:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3e96:	1e63      	subs	r3, r4, #1
    3e98:	b2db      	uxtb	r3, r3
    3e9a:	2c00      	cmp	r4, #0
    3e9c:	d036      	beq.n	3f0c <trx_frame_read+0xf0>
    3e9e:	3301      	adds	r3, #1
    3ea0:	469c      	mov	ip, r3
    3ea2:	44ac      	add	ip, r5
    3ea4:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ea6:	4e25      	ldr	r6, [pc, #148]	; (3f3c <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    3ea8:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3eaa:	2300      	movs	r3, #0
    3eac:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3eae:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3eb0:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3eb2:	46b1      	mov	r9, r6
    3eb4:	e00f      	b.n	3ed6 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3eb8:	05db      	lsls	r3, r3, #23
    3eba:	0ddb      	lsrs	r3, r3, #23
    3ebc:	4a22      	ldr	r2, [pc, #136]	; (3f48 <trx_frame_read+0x12c>)
    3ebe:	8013      	strh	r3, [r2, #0]
    3ec0:	e7e9      	b.n	3e96 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ec2:	464a      	mov	r2, r9
    3ec4:	7992      	ldrb	r2, [r2, #6]
    3ec6:	2a01      	cmp	r2, #1
    3ec8:	d01c      	beq.n	3f04 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3eca:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3ecc:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    3ece:	702f      	strb	r7, [r5, #0]
		data++;
    3ed0:	3501      	adds	r5, #1
	while (length--) {
    3ed2:	4565      	cmp	r5, ip
    3ed4:	d01a      	beq.n	3f0c <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ed6:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ed8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3eda:	4202      	tst	r2, r0
    3edc:	d0fc      	beq.n	3ed8 <trx_frame_read+0xbc>
    3ede:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ee0:	4202      	tst	r2, r0
    3ee2:	d001      	beq.n	3ee8 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ee4:	4652      	mov	r2, sl
    3ee6:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ee8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3eea:	4222      	tst	r2, r4
    3eec:	d0fc      	beq.n	3ee8 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3eee:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3ef0:	420a      	tst	r2, r1
    3ef2:	d0fc      	beq.n	3eee <trx_frame_read+0xd2>
    3ef4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3ef6:	420a      	tst	r2, r1
    3ef8:	d0e9      	beq.n	3ece <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3efa:	8b5a      	ldrh	r2, [r3, #26]
    3efc:	420a      	tst	r2, r1
    3efe:	d0e0      	beq.n	3ec2 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3f00:	8359      	strh	r1, [r3, #26]
    3f02:	e7de      	b.n	3ec2 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f04:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3f06:	05ff      	lsls	r7, r7, #23
    3f08:	0dff      	lsrs	r7, r7, #23
    3f0a:	e7e0      	b.n	3ece <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3f0c:	2200      	movs	r2, #0
    3f0e:	490c      	ldr	r1, [pc, #48]	; (3f40 <trx_frame_read+0x124>)
    3f10:	480a      	ldr	r0, [pc, #40]	; (3f3c <trx_frame_read+0x120>)
    3f12:	4b0c      	ldr	r3, [pc, #48]	; (3f44 <trx_frame_read+0x128>)
    3f14:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3f16:	23ff      	movs	r3, #255	; 0xff
    3f18:	4642      	mov	r2, r8
    3f1a:	4213      	tst	r3, r2
    3f1c:	d005      	beq.n	3f2a <trx_frame_read+0x10e>
		cpu_irq_enable();
    3f1e:	2201      	movs	r2, #1
    3f20:	4b05      	ldr	r3, [pc, #20]	; (3f38 <trx_frame_read+0x11c>)
    3f22:	701a      	strb	r2, [r3, #0]
    3f24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3f28:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3f2a:	b002      	add	sp, #8
    3f2c:	bc1c      	pop	{r2, r3, r4}
    3f2e:	4690      	mov	r8, r2
    3f30:	4699      	mov	r9, r3
    3f32:	46a2      	mov	sl, r4
    3f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	20000008 	.word	0x20000008
    3f3c:	200003f0 	.word	0x200003f0
    3f40:	20002bc4 	.word	0x20002bc4
    3f44:	00000bed 	.word	0x00000bed
    3f48:	20002bbc 	.word	0x20002bbc

00003f4c <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f4e:	46c6      	mov	lr, r8
    3f50:	b500      	push	{lr}
    3f52:	b082      	sub	sp, #8
    3f54:	0004      	movs	r4, r0
    3f56:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f58:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3f5c:	425a      	negs	r2, r3
    3f5e:	4153      	adcs	r3, r2
    3f60:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3f62:	b672      	cpsid	i
    3f64:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3f68:	2200      	movs	r2, #0
    3f6a:	4b3a      	ldr	r3, [pc, #232]	; (4054 <trx_frame_write+0x108>)
    3f6c:	701a      	strb	r2, [r3, #0]
	return flags;
    3f6e:	9b01      	ldr	r3, [sp, #4]
    3f70:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3f72:	4f39      	ldr	r7, [pc, #228]	; (4058 <trx_frame_write+0x10c>)
    3f74:	3201      	adds	r2, #1
    3f76:	4939      	ldr	r1, [pc, #228]	; (405c <trx_frame_write+0x110>)
    3f78:	0038      	movs	r0, r7
    3f7a:	4b39      	ldr	r3, [pc, #228]	; (4060 <trx_frame_write+0x114>)
    3f7c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f7e:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3f80:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f82:	7e1a      	ldrb	r2, [r3, #24]
    3f84:	420a      	tst	r2, r1
    3f86:	d0fc      	beq.n	3f82 <trx_frame_write+0x36>
    3f88:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3f8a:	07d2      	lsls	r2, r2, #31
    3f8c:	d501      	bpl.n	3f92 <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3f8e:	2260      	movs	r2, #96	; 0x60
    3f90:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3f92:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3f94:	7e1a      	ldrb	r2, [r3, #24]
    3f96:	420a      	tst	r2, r1
    3f98:	d0fc      	beq.n	3f94 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3f9a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3f9c:	7e1a      	ldrb	r2, [r3, #24]
    3f9e:	420a      	tst	r2, r1
    3fa0:	d0fc      	beq.n	3f9c <trx_frame_write+0x50>
    3fa2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3fa4:	0752      	lsls	r2, r2, #29
    3fa6:	d50c      	bpl.n	3fc2 <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3fa8:	8b5a      	ldrh	r2, [r3, #26]
    3faa:	0752      	lsls	r2, r2, #29
    3fac:	d501      	bpl.n	3fb2 <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3fae:	2204      	movs	r2, #4
    3fb0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fb2:	4a29      	ldr	r2, [pc, #164]	; (4058 <trx_frame_write+0x10c>)
    3fb4:	7992      	ldrb	r2, [r2, #6]
    3fb6:	2a01      	cmp	r2, #1
    3fb8:	d00b      	beq.n	3fd2 <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fbc:	b2d2      	uxtb	r2, r2
    3fbe:	4929      	ldr	r1, [pc, #164]	; (4064 <trx_frame_write+0x118>)
    3fc0:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fc2:	4a25      	ldr	r2, [pc, #148]	; (4058 <trx_frame_write+0x10c>)
    3fc4:	7992      	ldrb	r2, [r2, #6]
    3fc6:	4694      	mov	ip, r2
    3fc8:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3fca:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    3fcc:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3fce:	2404      	movs	r4, #4
    3fd0:	e00d      	b.n	3fee <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fd4:	05d2      	lsls	r2, r2, #23
    3fd6:	0dd2      	lsrs	r2, r2, #23
    3fd8:	4922      	ldr	r1, [pc, #136]	; (4064 <trx_frame_write+0x118>)
    3fda:	800a      	strh	r2, [r1, #0]
    3fdc:	e7f1      	b.n	3fc2 <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fde:	4662      	mov	r2, ip
    3fe0:	2a01      	cmp	r2, #1
    3fe2:	d01e      	beq.n	4022 <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fe6:	b2d2      	uxtb	r2, r2
    3fe8:	4e1e      	ldr	r6, [pc, #120]	; (4064 <trx_frame_write+0x118>)
    3fea:	8032      	strh	r2, [r6, #0]
    3fec:	3101      	adds	r1, #1
	while (length--) {
    3fee:	3d01      	subs	r5, #1
    3ff0:	b2ed      	uxtb	r5, r5
    3ff2:	2dff      	cmp	r5, #255	; 0xff
    3ff4:	d01b      	beq.n	402e <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ff6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3ff8:	423a      	tst	r2, r7
    3ffa:	d0fc      	beq.n	3ff6 <trx_frame_write+0xaa>
    3ffc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ffe:	423a      	tst	r2, r7
    4000:	d001      	beq.n	4006 <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4002:	780a      	ldrb	r2, [r1, #0]
    4004:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4006:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4008:	4202      	tst	r2, r0
    400a:	d0fc      	beq.n	4006 <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    400c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    400e:	4222      	tst	r2, r4
    4010:	d0fc      	beq.n	400c <trx_frame_write+0xc0>
    4012:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4014:	4222      	tst	r2, r4
    4016:	d0e9      	beq.n	3fec <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4018:	8b5a      	ldrh	r2, [r3, #26]
    401a:	4222      	tst	r2, r4
    401c:	d0df      	beq.n	3fde <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    401e:	835c      	strh	r4, [r3, #26]
    4020:	e7dd      	b.n	3fde <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4024:	05d2      	lsls	r2, r2, #23
    4026:	0dd2      	lsrs	r2, r2, #23
    4028:	4e0e      	ldr	r6, [pc, #56]	; (4064 <trx_frame_write+0x118>)
    402a:	8032      	strh	r2, [r6, #0]
    402c:	e7de      	b.n	3fec <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    402e:	2200      	movs	r2, #0
    4030:	490a      	ldr	r1, [pc, #40]	; (405c <trx_frame_write+0x110>)
    4032:	4809      	ldr	r0, [pc, #36]	; (4058 <trx_frame_write+0x10c>)
    4034:	4b0a      	ldr	r3, [pc, #40]	; (4060 <trx_frame_write+0x114>)
    4036:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    4038:	23ff      	movs	r3, #255	; 0xff
    403a:	4642      	mov	r2, r8
    403c:	4213      	tst	r3, r2
    403e:	d005      	beq.n	404c <trx_frame_write+0x100>
		cpu_irq_enable();
    4040:	2201      	movs	r2, #1
    4042:	4b04      	ldr	r3, [pc, #16]	; (4054 <trx_frame_write+0x108>)
    4044:	701a      	strb	r2, [r3, #0]
    4046:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    404a:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    404c:	b002      	add	sp, #8
    404e:	bc04      	pop	{r2}
    4050:	4690      	mov	r8, r2
    4052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4054:	20000008 	.word	0x20000008
    4058:	200003f0 	.word	0x200003f0
    405c:	20002bc4 	.word	0x20002bc4
    4060:	00000bed 	.word	0x00000bed
    4064:	20002bbc 	.word	0x20002bbc

00004068 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    4068:	b5f0      	push	{r4, r5, r6, r7, lr}
    406a:	46c6      	mov	lr, r8
    406c:	b500      	push	{lr}
    406e:	b082      	sub	sp, #8
    4070:	0006      	movs	r6, r0
    4072:	000d      	movs	r5, r1
    4074:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4076:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    407a:	425a      	negs	r2, r3
    407c:	4153      	adcs	r3, r2
    407e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4080:	b672      	cpsid	i
    4082:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4086:	2200      	movs	r2, #0
    4088:	4b4d      	ldr	r3, [pc, #308]	; (41c0 <trx_sram_write+0x158>)
    408a:	701a      	strb	r2, [r3, #0]
	return flags;
    408c:	9b01      	ldr	r3, [sp, #4]
    408e:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4090:	4f4c      	ldr	r7, [pc, #304]	; (41c4 <trx_sram_write+0x15c>)
    4092:	3201      	adds	r2, #1
    4094:	494c      	ldr	r1, [pc, #304]	; (41c8 <trx_sram_write+0x160>)
    4096:	0038      	movs	r0, r7
    4098:	4b4c      	ldr	r3, [pc, #304]	; (41cc <trx_sram_write+0x164>)
    409a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    409c:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    409e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40a0:	7e1a      	ldrb	r2, [r3, #24]
    40a2:	420a      	tst	r2, r1
    40a4:	d0fc      	beq.n	40a0 <trx_sram_write+0x38>
    40a6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    40a8:	07d2      	lsls	r2, r2, #31
    40aa:	d501      	bpl.n	40b0 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40ac:	2240      	movs	r2, #64	; 0x40
    40ae:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    40b0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40b2:	7e1a      	ldrb	r2, [r3, #24]
    40b4:	420a      	tst	r2, r1
    40b6:	d0fc      	beq.n	40b2 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    40b8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40ba:	7e1a      	ldrb	r2, [r3, #24]
    40bc:	420a      	tst	r2, r1
    40be:	d0fc      	beq.n	40ba <trx_sram_write+0x52>
    40c0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    40c2:	0752      	lsls	r2, r2, #29
    40c4:	d50c      	bpl.n	40e0 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    40c6:	8b5a      	ldrh	r2, [r3, #26]
    40c8:	0752      	lsls	r2, r2, #29
    40ca:	d501      	bpl.n	40d0 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    40cc:	2204      	movs	r2, #4
    40ce:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    40d0:	4a3c      	ldr	r2, [pc, #240]	; (41c4 <trx_sram_write+0x15c>)
    40d2:	7992      	ldrb	r2, [r2, #6]
    40d4:	2a01      	cmp	r2, #1
    40d6:	d02b      	beq.n	4130 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    40d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40da:	b2d2      	uxtb	r2, r2
    40dc:	493c      	ldr	r1, [pc, #240]	; (41d0 <trx_sram_write+0x168>)
    40de:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    40e0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40e2:	7e1a      	ldrb	r2, [r3, #24]
    40e4:	420a      	tst	r2, r1
    40e6:	d0fc      	beq.n	40e2 <trx_sram_write+0x7a>
    40e8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    40ea:	07d2      	lsls	r2, r2, #31
    40ec:	d500      	bpl.n	40f0 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40ee:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    40f0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40f2:	7e1a      	ldrb	r2, [r3, #24]
    40f4:	420a      	tst	r2, r1
    40f6:	d0fc      	beq.n	40f2 <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    40f8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40fa:	7e1a      	ldrb	r2, [r3, #24]
    40fc:	420a      	tst	r2, r1
    40fe:	d0fc      	beq.n	40fa <trx_sram_write+0x92>
    4100:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4102:	0752      	lsls	r2, r2, #29
    4104:	d50c      	bpl.n	4120 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4106:	8b5a      	ldrh	r2, [r3, #26]
    4108:	0752      	lsls	r2, r2, #29
    410a:	d501      	bpl.n	4110 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    410c:	2204      	movs	r2, #4
    410e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4110:	4a2c      	ldr	r2, [pc, #176]	; (41c4 <trx_sram_write+0x15c>)
    4112:	7992      	ldrb	r2, [r2, #6]
    4114:	2a01      	cmp	r2, #1
    4116:	d011      	beq.n	413c <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    411a:	b2d2      	uxtb	r2, r2
    411c:	492c      	ldr	r1, [pc, #176]	; (41d0 <trx_sram_write+0x168>)
    411e:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4120:	4a28      	ldr	r2, [pc, #160]	; (41c4 <trx_sram_write+0x15c>)
    4122:	7992      	ldrb	r2, [r2, #6]
    4124:	4694      	mov	ip, r2
    4126:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4128:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    412a:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    412c:	2104      	movs	r1, #4
    412e:	e013      	b.n	4158 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4132:	05d2      	lsls	r2, r2, #23
    4134:	0dd2      	lsrs	r2, r2, #23
    4136:	4926      	ldr	r1, [pc, #152]	; (41d0 <trx_sram_write+0x168>)
    4138:	800a      	strh	r2, [r1, #0]
    413a:	e7d1      	b.n	40e0 <trx_sram_write+0x78>
    413c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    413e:	05d2      	lsls	r2, r2, #23
    4140:	0dd2      	lsrs	r2, r2, #23
    4142:	4923      	ldr	r1, [pc, #140]	; (41d0 <trx_sram_write+0x168>)
    4144:	800a      	strh	r2, [r1, #0]
    4146:	e7eb      	b.n	4120 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4148:	4662      	mov	r2, ip
    414a:	2a01      	cmp	r2, #1
    414c:	d01e      	beq.n	418c <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    414e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4150:	b2d2      	uxtb	r2, r2
    4152:	4f1f      	ldr	r7, [pc, #124]	; (41d0 <trx_sram_write+0x168>)
    4154:	803a      	strh	r2, [r7, #0]
    4156:	3001      	adds	r0, #1
	while (length--) {
    4158:	3c01      	subs	r4, #1
    415a:	b2e4      	uxtb	r4, r4
    415c:	2cff      	cmp	r4, #255	; 0xff
    415e:	d01b      	beq.n	4198 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4160:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4162:	4232      	tst	r2, r6
    4164:	d0fc      	beq.n	4160 <trx_sram_write+0xf8>
    4166:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4168:	4232      	tst	r2, r6
    416a:	d001      	beq.n	4170 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    416c:	7802      	ldrb	r2, [r0, #0]
    416e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4170:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4172:	422a      	tst	r2, r5
    4174:	d0fc      	beq.n	4170 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4176:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    4178:	420a      	tst	r2, r1
    417a:	d0fc      	beq.n	4176 <trx_sram_write+0x10e>
    417c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    417e:	420a      	tst	r2, r1
    4180:	d0e9      	beq.n	4156 <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4182:	8b5a      	ldrh	r2, [r3, #26]
    4184:	420a      	tst	r2, r1
    4186:	d0df      	beq.n	4148 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4188:	8359      	strh	r1, [r3, #26]
    418a:	e7dd      	b.n	4148 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    418c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    418e:	05d2      	lsls	r2, r2, #23
    4190:	0dd2      	lsrs	r2, r2, #23
    4192:	4f0f      	ldr	r7, [pc, #60]	; (41d0 <trx_sram_write+0x168>)
    4194:	803a      	strh	r2, [r7, #0]
    4196:	e7de      	b.n	4156 <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4198:	2200      	movs	r2, #0
    419a:	490b      	ldr	r1, [pc, #44]	; (41c8 <trx_sram_write+0x160>)
    419c:	4809      	ldr	r0, [pc, #36]	; (41c4 <trx_sram_write+0x15c>)
    419e:	4b0b      	ldr	r3, [pc, #44]	; (41cc <trx_sram_write+0x164>)
    41a0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    41a2:	23ff      	movs	r3, #255	; 0xff
    41a4:	4642      	mov	r2, r8
    41a6:	4213      	tst	r3, r2
    41a8:	d005      	beq.n	41b6 <trx_sram_write+0x14e>
		cpu_irq_enable();
    41aa:	2201      	movs	r2, #1
    41ac:	4b04      	ldr	r3, [pc, #16]	; (41c0 <trx_sram_write+0x158>)
    41ae:	701a      	strb	r2, [r3, #0]
    41b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    41b4:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    41b6:	b002      	add	sp, #8
    41b8:	bc04      	pop	{r2}
    41ba:	4690      	mov	r8, r2
    41bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	20000008 	.word	0x20000008
    41c4:	200003f0 	.word	0x200003f0
    41c8:	20002bc4 	.word	0x20002bc4
    41cc:	00000bed 	.word	0x00000bed
    41d0:	20002bbc 	.word	0x20002bbc

000041d4 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    41d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41d6:	46d6      	mov	lr, sl
    41d8:	464f      	mov	r7, r9
    41da:	4646      	mov	r6, r8
    41dc:	b5c0      	push	{r6, r7, lr}
    41de:	b082      	sub	sp, #8
    41e0:	0004      	movs	r4, r0
    41e2:	000d      	movs	r5, r1
    41e4:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    41e6:	2001      	movs	r0, #1
    41e8:	4b56      	ldr	r3, [pc, #344]	; (4344 <trx_sram_read+0x170>)
    41ea:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    41ec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    41f0:	425a      	negs	r2, r3
    41f2:	4153      	adcs	r3, r2
    41f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    41f6:	b672      	cpsid	i
    41f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    41fc:	2200      	movs	r2, #0
    41fe:	4b52      	ldr	r3, [pc, #328]	; (4348 <trx_sram_read+0x174>)
    4200:	701a      	strb	r2, [r3, #0]
	return flags;
    4202:	9b01      	ldr	r3, [sp, #4]
    4204:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4206:	4e51      	ldr	r6, [pc, #324]	; (434c <trx_sram_read+0x178>)
    4208:	3201      	adds	r2, #1
    420a:	4951      	ldr	r1, [pc, #324]	; (4350 <trx_sram_read+0x17c>)
    420c:	0030      	movs	r0, r6
    420e:	4b51      	ldr	r3, [pc, #324]	; (4354 <trx_sram_read+0x180>)
    4210:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4212:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4214:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4216:	7e1a      	ldrb	r2, [r3, #24]
    4218:	420a      	tst	r2, r1
    421a:	d0fc      	beq.n	4216 <trx_sram_read+0x42>
    421c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    421e:	07d2      	lsls	r2, r2, #31
    4220:	d501      	bpl.n	4226 <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4222:	2200      	movs	r2, #0
    4224:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4226:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4228:	7e1a      	ldrb	r2, [r3, #24]
    422a:	420a      	tst	r2, r1
    422c:	d0fc      	beq.n	4228 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    422e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4230:	7e1a      	ldrb	r2, [r3, #24]
    4232:	420a      	tst	r2, r1
    4234:	d0fc      	beq.n	4230 <trx_sram_read+0x5c>
    4236:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4238:	0752      	lsls	r2, r2, #29
    423a:	d50c      	bpl.n	4256 <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    423c:	8b5a      	ldrh	r2, [r3, #26]
    423e:	0752      	lsls	r2, r2, #29
    4240:	d501      	bpl.n	4246 <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4242:	2204      	movs	r2, #4
    4244:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4246:	4a41      	ldr	r2, [pc, #260]	; (434c <trx_sram_read+0x178>)
    4248:	7992      	ldrb	r2, [r2, #6]
    424a:	2a01      	cmp	r2, #1
    424c:	d033      	beq.n	42b6 <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    424e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4250:	b2d2      	uxtb	r2, r2
    4252:	4941      	ldr	r1, [pc, #260]	; (4358 <trx_sram_read+0x184>)
    4254:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4256:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4258:	7e1a      	ldrb	r2, [r3, #24]
    425a:	420a      	tst	r2, r1
    425c:	d0fc      	beq.n	4258 <trx_sram_read+0x84>
    425e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4260:	07d2      	lsls	r2, r2, #31
    4262:	d500      	bpl.n	4266 <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4264:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4266:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4268:	7e1a      	ldrb	r2, [r3, #24]
    426a:	420a      	tst	r2, r1
    426c:	d0fc      	beq.n	4268 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    426e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4270:	7e1a      	ldrb	r2, [r3, #24]
    4272:	420a      	tst	r2, r1
    4274:	d0fc      	beq.n	4270 <trx_sram_read+0x9c>
    4276:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4278:	0752      	lsls	r2, r2, #29
    427a:	d50c      	bpl.n	4296 <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    427c:	8b5a      	ldrh	r2, [r3, #26]
    427e:	0752      	lsls	r2, r2, #29
    4280:	d501      	bpl.n	4286 <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4282:	2204      	movs	r2, #4
    4284:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4286:	4a31      	ldr	r2, [pc, #196]	; (434c <trx_sram_read+0x178>)
    4288:	7992      	ldrb	r2, [r2, #6]
    428a:	2a01      	cmp	r2, #1
    428c:	d019      	beq.n	42c2 <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4290:	b2db      	uxtb	r3, r3
    4292:	4a31      	ldr	r2, [pc, #196]	; (4358 <trx_sram_read+0x184>)
    4294:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4296:	1e7b      	subs	r3, r7, #1
    4298:	b2db      	uxtb	r3, r3
    429a:	2f00      	cmp	r7, #0
    429c:	d03c      	beq.n	4318 <trx_sram_read+0x144>
    429e:	3301      	adds	r3, #1
    42a0:	469c      	mov	ip, r3
    42a2:	44ac      	add	ip, r5
    42a4:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    42a6:	4e29      	ldr	r6, [pc, #164]	; (434c <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    42a8:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42aa:	2300      	movs	r3, #0
    42ac:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    42ae:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    42b0:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42b2:	46b1      	mov	r9, r6
    42b4:	e015      	b.n	42e2 <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    42b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42b8:	05d2      	lsls	r2, r2, #23
    42ba:	0dd2      	lsrs	r2, r2, #23
    42bc:	4926      	ldr	r1, [pc, #152]	; (4358 <trx_sram_read+0x184>)
    42be:	800a      	strh	r2, [r1, #0]
    42c0:	e7c9      	b.n	4256 <trx_sram_read+0x82>
    42c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42c4:	05db      	lsls	r3, r3, #23
    42c6:	0ddb      	lsrs	r3, r3, #23
    42c8:	4a23      	ldr	r2, [pc, #140]	; (4358 <trx_sram_read+0x184>)
    42ca:	8013      	strh	r3, [r2, #0]
    42cc:	e7e3      	b.n	4296 <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42ce:	464a      	mov	r2, r9
    42d0:	7992      	ldrb	r2, [r2, #6]
    42d2:	2a01      	cmp	r2, #1
    42d4:	d01c      	beq.n	4310 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42d6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    42d8:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    42da:	702f      	strb	r7, [r5, #0]
		data++;
    42dc:	3501      	adds	r5, #1
	while (length--) {
    42de:	4565      	cmp	r5, ip
    42e0:	d01a      	beq.n	4318 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    42e2:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42e4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    42e6:	4202      	tst	r2, r0
    42e8:	d0fc      	beq.n	42e4 <trx_sram_read+0x110>
    42ea:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    42ec:	4202      	tst	r2, r0
    42ee:	d001      	beq.n	42f4 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42f0:	4652      	mov	r2, sl
    42f2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42f4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    42f6:	4222      	tst	r2, r4
    42f8:	d0fc      	beq.n	42f4 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42fa:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    42fc:	420a      	tst	r2, r1
    42fe:	d0fc      	beq.n	42fa <trx_sram_read+0x126>
    4300:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4302:	420a      	tst	r2, r1
    4304:	d0e9      	beq.n	42da <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4306:	8b5a      	ldrh	r2, [r3, #26]
    4308:	420a      	tst	r2, r1
    430a:	d0e0      	beq.n	42ce <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    430c:	8359      	strh	r1, [r3, #26]
    430e:	e7de      	b.n	42ce <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4310:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4312:	05ff      	lsls	r7, r7, #23
    4314:	0dff      	lsrs	r7, r7, #23
    4316:	e7e0      	b.n	42da <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4318:	2200      	movs	r2, #0
    431a:	490d      	ldr	r1, [pc, #52]	; (4350 <trx_sram_read+0x17c>)
    431c:	480b      	ldr	r0, [pc, #44]	; (434c <trx_sram_read+0x178>)
    431e:	4b0d      	ldr	r3, [pc, #52]	; (4354 <trx_sram_read+0x180>)
    4320:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    4322:	23ff      	movs	r3, #255	; 0xff
    4324:	4642      	mov	r2, r8
    4326:	4213      	tst	r3, r2
    4328:	d005      	beq.n	4336 <trx_sram_read+0x162>
		cpu_irq_enable();
    432a:	2201      	movs	r2, #1
    432c:	4b06      	ldr	r3, [pc, #24]	; (4348 <trx_sram_read+0x174>)
    432e:	701a      	strb	r2, [r3, #0]
    4330:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4334:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4336:	b002      	add	sp, #8
    4338:	bc1c      	pop	{r2, r3, r4}
    433a:	4690      	mov	r8, r2
    433c:	4699      	mov	r9, r3
    433e:	46a2      	mov	sl, r4
    4340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	00000155 	.word	0x00000155
    4348:	20000008 	.word	0x20000008
    434c:	200003f0 	.word	0x200003f0
    4350:	20002bc4 	.word	0x20002bc4
    4354:	00000bed 	.word	0x00000bed
    4358:	20002bbc 	.word	0x20002bbc

0000435c <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    435c:	b5f0      	push	{r4, r5, r6, r7, lr}
    435e:	46d6      	mov	lr, sl
    4360:	464f      	mov	r7, r9
    4362:	4646      	mov	r6, r8
    4364:	b5c0      	push	{r6, r7, lr}
    4366:	0006      	movs	r6, r0
    4368:	468a      	mov	sl, r1
    436a:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    436c:	2001      	movs	r0, #1
    436e:	4b76      	ldr	r3, [pc, #472]	; (4548 <trx_aes_wrrd+0x1ec>)
    4370:	4798      	blx	r3

	ENTER_TRX_REGION();
    4372:	2100      	movs	r1, #0
    4374:	2000      	movs	r0, #0
    4376:	4b75      	ldr	r3, [pc, #468]	; (454c <trx_aes_wrrd+0x1f0>)
    4378:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    437a:	4f75      	ldr	r7, [pc, #468]	; (4550 <trx_aes_wrrd+0x1f4>)
    437c:	2201      	movs	r2, #1
    437e:	4975      	ldr	r1, [pc, #468]	; (4554 <trx_aes_wrrd+0x1f8>)
    4380:	0038      	movs	r0, r7
    4382:	4b75      	ldr	r3, [pc, #468]	; (4558 <trx_aes_wrrd+0x1fc>)
    4384:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4386:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4388:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    438a:	7e1a      	ldrb	r2, [r3, #24]
    438c:	420a      	tst	r2, r1
    438e:	d0fc      	beq.n	438a <trx_aes_wrrd+0x2e>
    4390:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4392:	07d2      	lsls	r2, r2, #31
    4394:	d501      	bpl.n	439a <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4396:	2240      	movs	r2, #64	; 0x40
    4398:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    439a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    439c:	7e1a      	ldrb	r2, [r3, #24]
    439e:	420a      	tst	r2, r1
    43a0:	d0fc      	beq.n	439c <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    43a2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43a4:	7e1a      	ldrb	r2, [r3, #24]
    43a6:	420a      	tst	r2, r1
    43a8:	d0fc      	beq.n	43a4 <trx_aes_wrrd+0x48>
    43aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    43ac:	0752      	lsls	r2, r2, #29
    43ae:	d50c      	bpl.n	43ca <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43b0:	8b5a      	ldrh	r2, [r3, #26]
    43b2:	0752      	lsls	r2, r2, #29
    43b4:	d501      	bpl.n	43ba <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    43b6:	2204      	movs	r2, #4
    43b8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    43ba:	4a65      	ldr	r2, [pc, #404]	; (4550 <trx_aes_wrrd+0x1f4>)
    43bc:	7992      	ldrb	r2, [r2, #6]
    43be:	2a01      	cmp	r2, #1
    43c0:	d055      	beq.n	446e <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43c4:	b2d2      	uxtb	r2, r2
    43c6:	4965      	ldr	r1, [pc, #404]	; (455c <trx_aes_wrrd+0x200>)
    43c8:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    43ca:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43cc:	7e1a      	ldrb	r2, [r3, #24]
    43ce:	420a      	tst	r2, r1
    43d0:	d0fc      	beq.n	43cc <trx_aes_wrrd+0x70>
    43d2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    43d4:	07d2      	lsls	r2, r2, #31
    43d6:	d500      	bpl.n	43da <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    43d8:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    43da:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43dc:	7e1a      	ldrb	r2, [r3, #24]
    43de:	420a      	tst	r2, r1
    43e0:	d0fc      	beq.n	43dc <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    43e2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43e4:	7e1a      	ldrb	r2, [r3, #24]
    43e6:	420a      	tst	r2, r1
    43e8:	d0fc      	beq.n	43e4 <trx_aes_wrrd+0x88>
    43ea:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    43ec:	0752      	lsls	r2, r2, #29
    43ee:	d50c      	bpl.n	440a <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43f0:	8b5a      	ldrh	r2, [r3, #26]
    43f2:	0752      	lsls	r2, r2, #29
    43f4:	d501      	bpl.n	43fa <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    43f6:	2204      	movs	r2, #4
    43f8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    43fa:	4a55      	ldr	r2, [pc, #340]	; (4550 <trx_aes_wrrd+0x1f4>)
    43fc:	7992      	ldrb	r2, [r2, #6]
    43fe:	2a01      	cmp	r2, #1
    4400:	d03b      	beq.n	447a <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4404:	b2d2      	uxtb	r2, r2
    4406:	4955      	ldr	r1, [pc, #340]	; (455c <trx_aes_wrrd+0x200>)
    4408:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    440a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    440c:	7e1a      	ldrb	r2, [r3, #24]
    440e:	420a      	tst	r2, r1
    4410:	d0fc      	beq.n	440c <trx_aes_wrrd+0xb0>
    4412:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4414:	07d2      	lsls	r2, r2, #31
    4416:	d502      	bpl.n	441e <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4418:	4652      	mov	r2, sl
    441a:	7812      	ldrb	r2, [r2, #0]
    441c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    441e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4420:	7e1a      	ldrb	r2, [r3, #24]
    4422:	420a      	tst	r2, r1
    4424:	d0fc      	beq.n	4420 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4426:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4428:	7e1a      	ldrb	r2, [r3, #24]
    442a:	420a      	tst	r2, r1
    442c:	d0fc      	beq.n	4428 <trx_aes_wrrd+0xcc>
    442e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4430:	0752      	lsls	r2, r2, #29
    4432:	d50c      	bpl.n	444e <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4434:	8b5a      	ldrh	r2, [r3, #26]
    4436:	0752      	lsls	r2, r2, #29
    4438:	d501      	bpl.n	443e <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    443a:	2204      	movs	r2, #4
    443c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    443e:	4a44      	ldr	r2, [pc, #272]	; (4550 <trx_aes_wrrd+0x1f4>)
    4440:	7992      	ldrb	r2, [r2, #6]
    4442:	2a01      	cmp	r2, #1
    4444:	d01f      	beq.n	4486 <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4448:	b2db      	uxtb	r3, r3
    444a:	4a44      	ldr	r2, [pc, #272]	; (455c <trx_aes_wrrd+0x200>)
    444c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    444e:	2700      	movs	r7, #0
    4450:	2c00      	cmp	r4, #0
    4452:	d043      	beq.n	44dc <trx_aes_wrrd+0x180>
    4454:	4656      	mov	r6, sl
    4456:	3c01      	subs	r4, #1
    4458:	b2e4      	uxtb	r4, r4
    445a:	3401      	adds	r4, #1
    445c:	44a2      	add	sl, r4
    445e:	46d0      	mov	r8, sl
    4460:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    4462:	4d3b      	ldr	r5, [pc, #236]	; (4550 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    4464:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    4466:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    4468:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    446a:	46a9      	mov	r9, r5
    446c:	e01b      	b.n	44a6 <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    446e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4470:	05d2      	lsls	r2, r2, #23
    4472:	0dd2      	lsrs	r2, r2, #23
    4474:	4939      	ldr	r1, [pc, #228]	; (455c <trx_aes_wrrd+0x200>)
    4476:	800a      	strh	r2, [r1, #0]
    4478:	e7a7      	b.n	43ca <trx_aes_wrrd+0x6e>
    447a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    447c:	05d2      	lsls	r2, r2, #23
    447e:	0dd2      	lsrs	r2, r2, #23
    4480:	4936      	ldr	r1, [pc, #216]	; (455c <trx_aes_wrrd+0x200>)
    4482:	800a      	strh	r2, [r1, #0]
    4484:	e7c1      	b.n	440a <trx_aes_wrrd+0xae>
    4486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4488:	05db      	lsls	r3, r3, #23
    448a:	0ddb      	lsrs	r3, r3, #23
    448c:	4a33      	ldr	r2, [pc, #204]	; (455c <trx_aes_wrrd+0x200>)
    448e:	8013      	strh	r3, [r2, #0]
    4490:	e7dd      	b.n	444e <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4492:	464a      	mov	r2, r9
    4494:	7992      	ldrb	r2, [r2, #6]
    4496:	2a01      	cmp	r2, #1
    4498:	d01c      	beq.n	44d4 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    449a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    449c:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    449e:	7037      	strb	r7, [r6, #0]
    44a0:	3601      	adds	r6, #1
	while (length > 0) {
    44a2:	45b0      	cmp	r8, r6
    44a4:	d01a      	beq.n	44dc <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    44a6:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44a8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    44aa:	4202      	tst	r2, r0
    44ac:	d0fc      	beq.n	44a8 <trx_aes_wrrd+0x14c>
    44ae:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    44b0:	4202      	tst	r2, r0
    44b2:	d001      	beq.n	44b8 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    44b4:	7872      	ldrb	r2, [r6, #1]
    44b6:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    44b8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    44ba:	4222      	tst	r2, r4
    44bc:	d0fc      	beq.n	44b8 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44be:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    44c0:	420a      	tst	r2, r1
    44c2:	d0fc      	beq.n	44be <trx_aes_wrrd+0x162>
    44c4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    44c6:	420a      	tst	r2, r1
    44c8:	d0e9      	beq.n	449e <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    44ca:	8b5a      	ldrh	r2, [r3, #26]
    44cc:	420a      	tst	r2, r1
    44ce:	d0e0      	beq.n	4492 <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    44d0:	8359      	strh	r1, [r3, #26]
    44d2:	e7de      	b.n	4492 <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    44d4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    44d6:	05ff      	lsls	r7, r7, #23
    44d8:	0dff      	lsrs	r7, r7, #23
    44da:	e7e0      	b.n	449e <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    44dc:	4b1c      	ldr	r3, [pc, #112]	; (4550 <trx_aes_wrrd+0x1f4>)
    44de:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    44e0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44e2:	7e1a      	ldrb	r2, [r3, #24]
    44e4:	420a      	tst	r2, r1
    44e6:	d0fc      	beq.n	44e2 <trx_aes_wrrd+0x186>
    44e8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    44ea:	07d2      	lsls	r2, r2, #31
    44ec:	d501      	bpl.n	44f2 <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    44ee:	2200      	movs	r2, #0
    44f0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    44f2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    44f4:	7e1a      	ldrb	r2, [r3, #24]
    44f6:	420a      	tst	r2, r1
    44f8:	d0fc      	beq.n	44f4 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    44fa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44fc:	7e1a      	ldrb	r2, [r3, #24]
    44fe:	420a      	tst	r2, r1
    4500:	d0fc      	beq.n	44fc <trx_aes_wrrd+0x1a0>
    4502:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4504:	0752      	lsls	r2, r2, #29
    4506:	d50a      	bpl.n	451e <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4508:	8b5a      	ldrh	r2, [r3, #26]
    450a:	0752      	lsls	r2, r2, #29
    450c:	d501      	bpl.n	4512 <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    450e:	2204      	movs	r2, #4
    4510:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4512:	4a0f      	ldr	r2, [pc, #60]	; (4550 <trx_aes_wrrd+0x1f4>)
    4514:	7992      	ldrb	r2, [r2, #6]
    4516:	2a01      	cmp	r2, #1
    4518:	d011      	beq.n	453e <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    451a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    451c:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    451e:	4653      	mov	r3, sl
    4520:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4522:	2200      	movs	r2, #0
    4524:	490b      	ldr	r1, [pc, #44]	; (4554 <trx_aes_wrrd+0x1f8>)
    4526:	480a      	ldr	r0, [pc, #40]	; (4550 <trx_aes_wrrd+0x1f4>)
    4528:	4b0b      	ldr	r3, [pc, #44]	; (4558 <trx_aes_wrrd+0x1fc>)
    452a:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    452c:	2100      	movs	r1, #0
    452e:	2000      	movs	r0, #0
    4530:	4b0b      	ldr	r3, [pc, #44]	; (4560 <trx_aes_wrrd+0x204>)
    4532:	4798      	blx	r3
}
    4534:	bc1c      	pop	{r2, r3, r4}
    4536:	4690      	mov	r8, r2
    4538:	4699      	mov	r9, r3
    453a:	46a2      	mov	sl, r4
    453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    453e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4540:	05ff      	lsls	r7, r7, #23
    4542:	0dff      	lsrs	r7, r7, #23
    4544:	e7eb      	b.n	451e <trx_aes_wrrd+0x1c2>
    4546:	46c0      	nop			; (mov r8, r8)
    4548:	00000155 	.word	0x00000155
    454c:	0000033d 	.word	0x0000033d
    4550:	200003f0 	.word	0x200003f0
    4554:	20002bc4 	.word	0x20002bc4
    4558:	00000bed 	.word	0x00000bed
    455c:	20002bbc 	.word	0x20002bbc
    4560:	0000031d 	.word	0x0000031d

00004564 <appCmdDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataConf(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
}
    4564:	4770      	bx	lr
	...

00004568 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4568:	2280      	movs	r2, #128	; 0x80
    456a:	0312      	lsls	r2, r2, #12
    456c:	4b01      	ldr	r3, [pc, #4]	; (4574 <appCmdIdentifyPeriodTimerHandler+0xc>)
    456e:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    4570:	4770      	bx	lr
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	41004400 	.word	0x41004400

00004578 <appCmdIdentifyDurationTimerHandler>:
{
    4578:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    457a:	2280      	movs	r2, #128	; 0x80
    457c:	0312      	lsls	r2, r2, #12
    457e:	4b03      	ldr	r3, [pc, #12]	; (458c <appCmdIdentifyDurationTimerHandler+0x14>)
    4580:	619a      	str	r2, [r3, #24]
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    4582:	4803      	ldr	r0, [pc, #12]	; (4590 <appCmdIdentifyDurationTimerHandler+0x18>)
    4584:	4b03      	ldr	r3, [pc, #12]	; (4594 <appCmdIdentifyDurationTimerHandler+0x1c>)
    4586:	4798      	blx	r3
}
    4588:	bd10      	pop	{r4, pc}
    458a:	46c0      	nop			; (mov r8, r8)
    458c:	41004400 	.word	0x41004400
    4590:	20000328 	.word	0x20000328
    4594:	00003609 	.word	0x00003609

00004598 <appCmdHandle>:
{
    4598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    459a:	0004      	movs	r4, r0
		return false;
    459c:	2000      	movs	r0, #0
	if (size < sizeof(AppCmdHeader_t)) {
    459e:	2900      	cmp	r1, #0
    45a0:	d002      	beq.n	45a8 <appCmdHandle+0x10>
	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    45a2:	7823      	ldrb	r3, [r4, #0]
    45a4:	2b10      	cmp	r3, #16
    45a6:	d000      	beq.n	45aa <appCmdHandle+0x12>
}
    45a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sizeof(AppCmdIdentify_t) != size) {
    45aa:	2905      	cmp	r1, #5
    45ac:	d1fc      	bne.n	45a8 <appCmdHandle+0x10>
		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    45ae:	4e12      	ldr	r6, [pc, #72]	; (45f8 <appCmdHandle+0x60>)
    45b0:	0030      	movs	r0, r6
    45b2:	4f12      	ldr	r7, [pc, #72]	; (45fc <appCmdHandle+0x64>)
    45b4:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    45b6:	4d12      	ldr	r5, [pc, #72]	; (4600 <appCmdHandle+0x68>)
    45b8:	0028      	movs	r0, r5
    45ba:	47b8      	blx	r7
		appCmdIdentifyDurationTimer.interval = req->duration;
    45bc:	7862      	ldrb	r2, [r4, #1]
    45be:	78a3      	ldrb	r3, [r4, #2]
    45c0:	021b      	lsls	r3, r3, #8
    45c2:	4313      	orrs	r3, r2
    45c4:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    45c6:	2300      	movs	r3, #0
    45c8:	7333      	strb	r3, [r6, #12]
			= appCmdIdentifyDurationTimerHandler;
    45ca:	4b0e      	ldr	r3, [pc, #56]	; (4604 <appCmdHandle+0x6c>)
    45cc:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    45ce:	0030      	movs	r0, r6
    45d0:	4e0d      	ldr	r6, [pc, #52]	; (4608 <appCmdHandle+0x70>)
    45d2:	47b0      	blx	r6
		appCmdIdentifyPeriodTimer.interval = req->period;
    45d4:	78e2      	ldrb	r2, [r4, #3]
    45d6:	7923      	ldrb	r3, [r4, #4]
    45d8:	021b      	lsls	r3, r3, #8
    45da:	4313      	orrs	r3, r2
    45dc:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    45de:	2301      	movs	r3, #1
    45e0:	732b      	strb	r3, [r5, #12]
			= appCmdIdentifyPeriodTimerHandler;
    45e2:	4b0a      	ldr	r3, [pc, #40]	; (460c <appCmdHandle+0x74>)
    45e4:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    45e6:	0028      	movs	r0, r5
    45e8:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    45ea:	2280      	movs	r2, #128	; 0x80
    45ec:	0312      	lsls	r2, r2, #12
    45ee:	4b08      	ldr	r3, [pc, #32]	; (4610 <appCmdHandle+0x78>)
    45f0:	615a      	str	r2, [r3, #20]
		return true;
    45f2:	2001      	movs	r0, #1
    45f4:	e7d8      	b.n	45a8 <appCmdHandle+0x10>
    45f6:	46c0      	nop			; (mov r8, r8)
    45f8:	20000314 	.word	0x20000314
    45fc:	00003609 	.word	0x00003609
    4600:	20000328 	.word	0x20000328
    4604:	00004579 	.word	0x00004579
    4608:	00003675 	.word	0x00003675
    460c:	00004569 	.word	0x00004569
    4610:	41004400 	.word	0x41004400

00004614 <APP_CommandsInit>:
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4614:	4b05      	ldr	r3, [pc, #20]	; (462c <APP_CommandsInit+0x18>)
    4616:	2200      	movs	r2, #0
    4618:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
    461a:	4a05      	ldr	r2, [pc, #20]	; (4630 <APP_CommandsInit+0x1c>)
    461c:	611a      	str	r2, [r3, #16]
	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    461e:	4b05      	ldr	r3, [pc, #20]	; (4634 <APP_CommandsInit+0x20>)
    4620:	2201      	movs	r2, #1
    4622:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    4624:	4a04      	ldr	r2, [pc, #16]	; (4638 <APP_CommandsInit+0x24>)
    4626:	611a      	str	r2, [r3, #16]
}
    4628:	4770      	bx	lr
    462a:	46c0      	nop			; (mov r8, r8)
    462c:	20000314 	.word	0x20000314
    4630:	00004579 	.word	0x00004579
    4634:	20000328 	.word	0x20000328
    4638:	00004569 	.word	0x00004569

0000463c <APP_CommandsByteReceived>:
{
    463c:	b510      	push	{r4, lr}
    463e:	b088      	sub	sp, #32
	switch (appCmdUartState) {
    4640:	4b4b      	ldr	r3, [pc, #300]	; (4770 <APP_CommandsByteReceived+0x134>)
    4642:	781a      	ldrb	r2, [r3, #0]
    4644:	2a04      	cmp	r2, #4
    4646:	d85d      	bhi.n	4704 <APP_CommandsByteReceived+0xc8>
    4648:	0093      	lsls	r3, r2, #2
    464a:	4a4a      	ldr	r2, [pc, #296]	; (4774 <APP_CommandsByteReceived+0x138>)
    464c:	58d3      	ldr	r3, [r2, r3]
    464e:	469f      	mov	pc, r3
		if (0x10 == byte) {
    4650:	2810      	cmp	r0, #16
    4652:	d157      	bne.n	4704 <APP_CommandsByteReceived+0xc8>
			appCmdUartPtr = 0;
    4654:	2200      	movs	r2, #0
    4656:	4b48      	ldr	r3, [pc, #288]	; (4778 <APP_CommandsByteReceived+0x13c>)
    4658:	701a      	strb	r2, [r3, #0]
			appCmdUartCsum = byte;
    465a:	3210      	adds	r2, #16
    465c:	4b47      	ldr	r3, [pc, #284]	; (477c <APP_CommandsByteReceived+0x140>)
    465e:	701a      	strb	r2, [r3, #0]
			appCmdUartState = APP_CMD_UART_STATE_SYNC;
    4660:	3a0f      	subs	r2, #15
    4662:	4b43      	ldr	r3, [pc, #268]	; (4770 <APP_CommandsByteReceived+0x134>)
    4664:	701a      	strb	r2, [r3, #0]
    4666:	e04d      	b.n	4704 <APP_CommandsByteReceived+0xc8>
		appCmdUartCsum += byte;
    4668:	4a44      	ldr	r2, [pc, #272]	; (477c <APP_CommandsByteReceived+0x140>)
    466a:	7813      	ldrb	r3, [r2, #0]
    466c:	18c3      	adds	r3, r0, r3
    466e:	7013      	strb	r3, [r2, #0]
		if (0x02 == byte) {
    4670:	2802      	cmp	r0, #2
    4672:	d003      	beq.n	467c <APP_CommandsByteReceived+0x40>
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    4674:	2200      	movs	r2, #0
    4676:	4b3e      	ldr	r3, [pc, #248]	; (4770 <APP_CommandsByteReceived+0x134>)
    4678:	701a      	strb	r2, [r3, #0]
    467a:	e043      	b.n	4704 <APP_CommandsByteReceived+0xc8>
			appCmdUartState = APP_CMD_UART_STATE_DATA;
    467c:	2202      	movs	r2, #2
    467e:	4b3c      	ldr	r3, [pc, #240]	; (4770 <APP_CommandsByteReceived+0x134>)
    4680:	701a      	strb	r2, [r3, #0]
    4682:	e03f      	b.n	4704 <APP_CommandsByteReceived+0xc8>
		appCmdUartCsum += byte;
    4684:	4a3d      	ldr	r2, [pc, #244]	; (477c <APP_CommandsByteReceived+0x140>)
    4686:	7813      	ldrb	r3, [r2, #0]
    4688:	18c3      	adds	r3, r0, r3
    468a:	7013      	strb	r3, [r2, #0]
		if (0x10 == byte) {
    468c:	2810      	cmp	r0, #16
    468e:	d00d      	beq.n	46ac <APP_CommandsByteReceived+0x70>
			appCmdUartBuf[appCmdUartPtr++] = byte;
    4690:	4a39      	ldr	r2, [pc, #228]	; (4778 <APP_CommandsByteReceived+0x13c>)
    4692:	7813      	ldrb	r3, [r2, #0]
    4694:	1c59      	adds	r1, r3, #1
    4696:	7011      	strb	r1, [r2, #0]
    4698:	4a39      	ldr	r2, [pc, #228]	; (4780 <APP_CommandsByteReceived+0x144>)
    469a:	54d0      	strb	r0, [r2, r3]
		if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
    469c:	4b36      	ldr	r3, [pc, #216]	; (4778 <APP_CommandsByteReceived+0x13c>)
    469e:	781b      	ldrb	r3, [r3, #0]
    46a0:	2b10      	cmp	r3, #16
    46a2:	d12f      	bne.n	4704 <APP_CommandsByteReceived+0xc8>
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    46a4:	2200      	movs	r2, #0
    46a6:	4b32      	ldr	r3, [pc, #200]	; (4770 <APP_CommandsByteReceived+0x134>)
    46a8:	701a      	strb	r2, [r3, #0]
    46aa:	e02b      	b.n	4704 <APP_CommandsByteReceived+0xc8>
			appCmdUartState = APP_CMD_UART_STATE_MARK;
    46ac:	2203      	movs	r2, #3
    46ae:	4b30      	ldr	r3, [pc, #192]	; (4770 <APP_CommandsByteReceived+0x134>)
    46b0:	701a      	strb	r2, [r3, #0]
    46b2:	e7f3      	b.n	469c <APP_CommandsByteReceived+0x60>
		appCmdUartCsum += byte;
    46b4:	4a31      	ldr	r2, [pc, #196]	; (477c <APP_CommandsByteReceived+0x140>)
    46b6:	7813      	ldrb	r3, [r2, #0]
    46b8:	18c3      	adds	r3, r0, r3
    46ba:	7013      	strb	r3, [r2, #0]
		if (0x10 == byte) {
    46bc:	2810      	cmp	r0, #16
    46be:	d005      	beq.n	46cc <APP_CommandsByteReceived+0x90>
		} else if (0x03 == byte) {
    46c0:	2803      	cmp	r0, #3
    46c2:	d014      	beq.n	46ee <APP_CommandsByteReceived+0xb2>
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    46c4:	2200      	movs	r2, #0
    46c6:	4b2a      	ldr	r3, [pc, #168]	; (4770 <APP_CommandsByteReceived+0x134>)
    46c8:	701a      	strb	r2, [r3, #0]
    46ca:	e01b      	b.n	4704 <APP_CommandsByteReceived+0xc8>
			appCmdUartBuf[appCmdUartPtr++] = byte;
    46cc:	492a      	ldr	r1, [pc, #168]	; (4778 <APP_CommandsByteReceived+0x13c>)
    46ce:	780a      	ldrb	r2, [r1, #0]
    46d0:	1c53      	adds	r3, r2, #1
    46d2:	b2db      	uxtb	r3, r3
    46d4:	700b      	strb	r3, [r1, #0]
    46d6:	492a      	ldr	r1, [pc, #168]	; (4780 <APP_CommandsByteReceived+0x144>)
    46d8:	5488      	strb	r0, [r1, r2]
			if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
    46da:	2b10      	cmp	r3, #16
    46dc:	d003      	beq.n	46e6 <APP_CommandsByteReceived+0xaa>
				appCmdUartState = APP_CMD_UART_STATE_DATA;
    46de:	2202      	movs	r2, #2
    46e0:	4b23      	ldr	r3, [pc, #140]	; (4770 <APP_CommandsByteReceived+0x134>)
    46e2:	701a      	strb	r2, [r3, #0]
    46e4:	e00e      	b.n	4704 <APP_CommandsByteReceived+0xc8>
				appCmdUartState = APP_CMD_UART_STATE_IDLE;
    46e6:	2200      	movs	r2, #0
    46e8:	4b21      	ldr	r3, [pc, #132]	; (4770 <APP_CommandsByteReceived+0x134>)
    46ea:	701a      	strb	r2, [r3, #0]
    46ec:	e00a      	b.n	4704 <APP_CommandsByteReceived+0xc8>
			appCmdUartState = APP_CMD_UART_STATE_CSUM;
    46ee:	2204      	movs	r2, #4
    46f0:	4b1f      	ldr	r3, [pc, #124]	; (4770 <APP_CommandsByteReceived+0x134>)
    46f2:	701a      	strb	r2, [r3, #0]
    46f4:	e006      	b.n	4704 <APP_CommandsByteReceived+0xc8>
		if (byte == appCmdUartCsum) {
    46f6:	4b21      	ldr	r3, [pc, #132]	; (477c <APP_CommandsByteReceived+0x140>)
    46f8:	781b      	ldrb	r3, [r3, #0]
    46fa:	4283      	cmp	r3, r0
    46fc:	d004      	beq.n	4708 <APP_CommandsByteReceived+0xcc>
		appCmdUartState = APP_CMD_UART_STATE_IDLE;
    46fe:	2200      	movs	r2, #0
    4700:	4b1b      	ldr	r3, [pc, #108]	; (4770 <APP_CommandsByteReceived+0x134>)
    4702:	701a      	strb	r2, [r3, #0]
}
    4704:	b008      	add	sp, #32
    4706:	bd10      	pop	{r4, pc}
			appCmdUartProcess(appCmdUartBuf, appCmdUartPtr);
    4708:	4b1b      	ldr	r3, [pc, #108]	; (4778 <APP_CommandsByteReceived+0x13c>)
	if (size < sizeof(AppCmdUartHeader_t)) {
    470a:	781b      	ldrb	r3, [r3, #0]
    470c:	2b08      	cmp	r3, #8
    470e:	d9f6      	bls.n	46fe <APP_CommandsByteReceived+0xc2>
	if (APP_COMMAND_ID_IDENTIFY == header->commandId) {
    4710:	4b1b      	ldr	r3, [pc, #108]	; (4780 <APP_CommandsByteReceived+0x144>)
    4712:	781b      	ldrb	r3, [r3, #0]
    4714:	2b10      	cmp	r3, #16
    4716:	d1f2      	bne.n	46fe <APP_CommandsByteReceived+0xc2>
		cmd.id = APP_COMMAND_ID_IDENTIFY;
    4718:	2210      	movs	r2, #16
    471a:	ab06      	add	r3, sp, #24
    471c:	701a      	strb	r2, [r3, #0]
		cmd.duration = uartCmd->duration;
    471e:	4a18      	ldr	r2, [pc, #96]	; (4780 <APP_CommandsByteReceived+0x144>)
    4720:	6893      	ldr	r3, [r2, #8]
    4722:	021b      	lsls	r3, r3, #8
    4724:	2119      	movs	r1, #25
    4726:	4469      	add	r1, sp
    4728:	0c1b      	lsrs	r3, r3, #16
    472a:	700b      	strb	r3, [r1, #0]
    472c:	0a1b      	lsrs	r3, r3, #8
    472e:	704b      	strb	r3, [r1, #1]
		cmd.period = uartCmd->period;
    4730:	7ad0      	ldrb	r0, [r2, #11]
    4732:	7b11      	ldrb	r1, [r2, #12]
    4734:	231b      	movs	r3, #27
    4736:	446b      	add	r3, sp
    4738:	7018      	strb	r0, [r3, #0]
    473a:	7059      	strb	r1, [r3, #1]
		appCmdBuffer(header->dstAddr, (uint8_t *)&cmd,
    473c:	6813      	ldr	r3, [r2, #0]
    473e:	0a1b      	lsrs	r3, r3, #8
    4740:	b29b      	uxth	r3, r3
	if (0 == addr)
    4742:	2b00      	cmp	r3, #0
    4744:	d00f      	beq.n	4766 <APP_CommandsByteReceived+0x12a>
    4746:	2116      	movs	r1, #22
    4748:	4469      	add	r1, sp
    474a:	800b      	strh	r3, [r1, #0]
	MiApp_SendData(SHORT_ADDR_LEN, (uint8_t*)&addr, size, payload, wsnmsghandle, true, appCmdDataConf);
    474c:	4b0d      	ldr	r3, [pc, #52]	; (4784 <APP_CommandsByteReceived+0x148>)
    474e:	9302      	str	r3, [sp, #8]
    4750:	2301      	movs	r3, #1
    4752:	9301      	str	r3, [sp, #4]
    4754:	4b0c      	ldr	r3, [pc, #48]	; (4788 <APP_CommandsByteReceived+0x14c>)
    4756:	781b      	ldrb	r3, [r3, #0]
    4758:	9300      	str	r3, [sp, #0]
    475a:	ab06      	add	r3, sp, #24
    475c:	2205      	movs	r2, #5
    475e:	2002      	movs	r0, #2
    4760:	4c0a      	ldr	r4, [pc, #40]	; (478c <APP_CommandsByteReceived+0x150>)
    4762:	47a0      	blx	r4
    4764:	e7cb      	b.n	46fe <APP_CommandsByteReceived+0xc2>
		appCmdHandle(data, size);
    4766:	2105      	movs	r1, #5
    4768:	a806      	add	r0, sp, #24
    476a:	4b09      	ldr	r3, [pc, #36]	; (4790 <APP_CommandsByteReceived+0x154>)
    476c:	4798      	blx	r3
    476e:	e7c6      	b.n	46fe <APP_CommandsByteReceived+0xc2>
    4770:	2000034e 	.word	0x2000034e
    4774:	0000a7d0 	.word	0x0000a7d0
    4778:	2000034d 	.word	0x2000034d
    477c:	2000034c 	.word	0x2000034c
    4780:	2000033c 	.word	0x2000033c
    4784:	00004565 	.word	0x00004565
    4788:	20002c00 	.word	0x20002c00
    478c:	00005399 	.word	0x00005399
    4790:	00004599 	.word	0x00004599

00004794 <configure_usart>:
void configure_usart(void);
void configure_usart_callbacks(void);
void config_rs485_TX_EN(void);

void configure_usart(void)
{
    4794:	b530      	push	{r4, r5, lr}
    4796:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    4798:	2380      	movs	r3, #128	; 0x80
    479a:	05db      	lsls	r3, r3, #23
    479c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    479e:	2300      	movs	r3, #0
    47a0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    47a2:	22ff      	movs	r2, #255	; 0xff
    47a4:	4669      	mov	r1, sp
    47a6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    47a8:	2200      	movs	r2, #0
    47aa:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    47ac:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    47ae:	2196      	movs	r1, #150	; 0x96
    47b0:	0189      	lsls	r1, r1, #6
    47b2:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    47b4:	2101      	movs	r1, #1
    47b6:	2024      	movs	r0, #36	; 0x24
    47b8:	466c      	mov	r4, sp
    47ba:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    47bc:	3001      	adds	r0, #1
    47be:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    47c0:	3125      	adds	r1, #37	; 0x25
    47c2:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    47c4:	3101      	adds	r1, #1
    47c6:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    47c8:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    47ca:	3105      	adds	r1, #5
    47cc:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    47ce:	3101      	adds	r1, #1
    47d0:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    47d2:	930c      	str	r3, [sp, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    47d4:	930d      	str	r3, [sp, #52]	; 0x34
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    47d6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    47d8:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    47da:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    47dc:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    47de:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    47e0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    47e2:	2313      	movs	r3, #19
    47e4:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    47e6:	7762      	strb	r2, [r4, #29]
//	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
//	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
//	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
//	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;

	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    47e8:	23c4      	movs	r3, #196	; 0xc4
    47ea:	039b      	lsls	r3, r3, #14
    47ec:	9303      	str	r3, [sp, #12]
	// config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
	// config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
	config_usart.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;		// Tx
    47ee:	4b10      	ldr	r3, [pc, #64]	; (4830 <configure_usart+0x9c>)
    47f0:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;		// Rx
    47f2:	4b10      	ldr	r3, [pc, #64]	; (4834 <configure_usart+0xa0>)
    47f4:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance, SERCOM5, &config_usart) != STATUS_OK) {
    47f6:	4d10      	ldr	r5, [pc, #64]	; (4838 <configure_usart+0xa4>)
    47f8:	4c10      	ldr	r4, [pc, #64]	; (483c <configure_usart+0xa8>)
    47fa:	466a      	mov	r2, sp
    47fc:	4910      	ldr	r1, [pc, #64]	; (4840 <configure_usart+0xac>)
    47fe:	0028      	movs	r0, r5
    4800:	47a0      	blx	r4
    4802:	2800      	cmp	r0, #0
    4804:	d1f9      	bne.n	47fa <configure_usart+0x66>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4806:	4d0c      	ldr	r5, [pc, #48]	; (4838 <configure_usart+0xa4>)
    4808:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    480a:	0020      	movs	r0, r4
    480c:	4b0d      	ldr	r3, [pc, #52]	; (4844 <configure_usart+0xb0>)
    480e:	4798      	blx	r3
    4810:	231f      	movs	r3, #31
    4812:	4018      	ands	r0, r3
    4814:	3b1e      	subs	r3, #30
    4816:	4083      	lsls	r3, r0
    4818:	4a0b      	ldr	r2, [pc, #44]	; (4848 <configure_usart+0xb4>)
    481a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    481c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    481e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4820:	2b00      	cmp	r3, #0
    4822:	d1fc      	bne.n	481e <configure_usart+0x8a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4824:	6823      	ldr	r3, [r4, #0]
    4826:	2202      	movs	r2, #2
    4828:	4313      	orrs	r3, r2
    482a:	6023      	str	r3, [r4, #0]
	}

	usart_enable(&usart_instance);
}
    482c:	b011      	add	sp, #68	; 0x44
    482e:	bd30      	pop	{r4, r5, pc}
    4830:	00360003 	.word	0x00360003
    4834:	00370003 	.word	0x00370003
    4838:	20002c78 	.word	0x20002c78
    483c:	00000ce1 	.word	0x00000ce1
    4840:	42001c00 	.word	0x42001c00
    4844:	00000899 	.word	0x00000899
    4848:	e000e100 	.word	0xe000e100

0000484c <readMacAddress>:

	return 0;
}

void readMacAddress(void){
	myLongAddress[0] = 16;
    484c:	4b08      	ldr	r3, [pc, #32]	; (4870 <readMacAddress+0x24>)
    484e:	2210      	movs	r2, #16
    4850:	701a      	strb	r2, [r3, #0]
	myLongAddress[1] = 53;
    4852:	3225      	adds	r2, #37	; 0x25
    4854:	705a      	strb	r2, [r3, #1]
	myLongAddress[2] = 0;
    4856:	2200      	movs	r2, #0
    4858:	709a      	strb	r2, [r3, #2]
	myLongAddress[3] = 32;
    485a:	3220      	adds	r2, #32
    485c:	70da      	strb	r2, [r3, #3]
	myLongAddress[4] = 89;
    485e:	3239      	adds	r2, #57	; 0x39
    4860:	711a      	strb	r2, [r3, #4]
	myLongAddress[5] = 37;
    4862:	3a34      	subs	r2, #52	; 0x34
    4864:	715a      	strb	r2, [r3, #5]
	myLongAddress[6] = 128;
    4866:	325b      	adds	r2, #91	; 0x5b
    4868:	719a      	strb	r2, [r3, #6]
	myLongAddress[7] = 127;
    486a:	3a01      	subs	r2, #1
    486c:	71da      	strb	r2, [r3, #7]
}
    486e:	4770      	bx	lr
    4870:	20000090 	.word	0x20000090

00004874 <configure_tc>:
	config->clock_source               = GCLK_GENERATOR_0;
    4874:	4b11      	ldr	r3, [pc, #68]	; (48bc <configure_tc+0x48>)
    4876:	2200      	movs	r2, #0
    4878:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    487a:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    487c:	2100      	movs	r1, #0
    487e:	809a      	strh	r2, [r3, #4]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    4880:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    4882:	7059      	strb	r1, [r3, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    4884:	7299      	strb	r1, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    4886:	72d9      	strb	r1, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    4888:	7319      	strb	r1, [r3, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    488a:	7399      	strb	r1, [r3, #14]
	config->oneshot                    = false;
    488c:	7359      	strb	r1, [r3, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    488e:	7419      	strb	r1, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    4890:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    4892:	619a      	str	r2, [r3, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    4894:	7719      	strb	r1, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    4896:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    4898:	625a      	str	r2, [r3, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    489a:	851a      	strh	r2, [r3, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    489c:	859a      	strh	r2, [r3, #44]	; 0x2c

void configure_tc(void)
{	
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    489e:	3240      	adds	r2, #64	; 0x40
    48a0:	719a      	strb	r2, [r3, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 0xFFFF;
    48a2:	3a41      	subs	r2, #65	; 0x41
    48a4:	855a      	strh	r2, [r3, #42]	; 0x2a
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    48a6:	4b06      	ldr	r3, [pc, #24]	; (48c0 <configure_tc+0x4c>)
    48a8:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    48aa:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    48ac:	b25b      	sxtb	r3, r3
    48ae:	2b00      	cmp	r3, #0
    48b0:	dbfb      	blt.n	48aa <configure_tc+0x36>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    48b2:	8813      	ldrh	r3, [r2, #0]
    48b4:	2102      	movs	r1, #2
    48b6:	430b      	orrs	r3, r1
    48b8:	8013      	strh	r3, [r2, #0]
	// tc_init(&tc_instance, PWM_MODULE, &config_tc);
	tc_enable(&tc_instance);	
}
    48ba:	4770      	bx	lr
    48bc:	20002fac 	.word	0x20002fac
    48c0:	20002ff0 	.word	0x20002ff0

000048c4 <main>:
{	
    48c4:	b510      	push	{r4, lr}
	system_init();
    48c6:	4b0d      	ldr	r3, [pc, #52]	; (48fc <main+0x38>)
    48c8:	4798      	blx	r3
	delay_init();
    48ca:	4b0d      	ldr	r3, [pc, #52]	; (4900 <main+0x3c>)
    48cc:	4798      	blx	r3
	cpu_irq_enable();	
    48ce:	2201      	movs	r2, #1
    48d0:	4b0c      	ldr	r3, [pc, #48]	; (4904 <main+0x40>)
    48d2:	701a      	strb	r2, [r3, #0]
    48d4:	f3bf 8f5f 	dmb	sy
    48d8:	b662      	cpsie	i
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA27;	// RS3485 ENABLE PIN CONTROL PORT
    48da:	2280      	movs	r2, #128	; 0x80
    48dc:	0512      	lsls	r2, r2, #20
    48de:	4b0a      	ldr	r3, [pc, #40]	; (4908 <main+0x44>)
    48e0:	609a      	str	r2, [r3, #8]
	configure_tc();
    48e2:	4b0a      	ldr	r3, [pc, #40]	; (490c <main+0x48>)
    48e4:	4798      	blx	r3
	sio2host_init();
    48e6:	4b0a      	ldr	r3, [pc, #40]	; (4910 <main+0x4c>)
    48e8:	4798      	blx	r3
	readMacAddress();
    48ea:	4b0a      	ldr	r3, [pc, #40]	; (4914 <main+0x50>)
    48ec:	4798      	blx	r3
	wsndemo_init();
    48ee:	4b0a      	ldr	r3, [pc, #40]	; (4918 <main+0x54>)
    48f0:	4798      	blx	r3
	configure_usart();
    48f2:	4b0a      	ldr	r3, [pc, #40]	; (491c <main+0x58>)
    48f4:	4798      	blx	r3
		wsndemo_task();
    48f6:	4c0a      	ldr	r4, [pc, #40]	; (4920 <main+0x5c>)
    48f8:	47a0      	blx	r4
    48fa:	e7fd      	b.n	48f8 <main+0x34>
    48fc:	00001c25 	.word	0x00001c25
    4900:	00000115 	.word	0x00000115
    4904:	20000008 	.word	0x20000008
    4908:	41004400 	.word	0x41004400
    490c:	00004875 	.word	0x00004875
    4910:	00002265 	.word	0x00002265
    4914:	0000484d 	.word	0x0000484d
    4918:	00004ae5 	.word	0x00004ae5
    491c:	00004795 	.word	0x00004795
    4920:	00004b05 	.word	0x00004b05

00004924 <Connection_Confirm>:
/**
 * Connection confirmation
 */
static void Connection_Confirm(miwi_status_t status)
{
	if (SUCCESS == status)
    4924:	2800      	cmp	r0, #0
    4926:	d003      	beq.n	4930 <Connection_Confirm+0xc>
        appState = APP_STATE_SEND;
	}
	else
	{
#if defined(PAN_COORDINATOR)
		appState = APP_STATE_START_NETWORK;
    4928:	2201      	movs	r2, #1
    492a:	4b03      	ldr	r3, [pc, #12]	; (4938 <Connection_Confirm+0x14>)
    492c:	701a      	strb	r2, [r3, #0]
#else
        appState = APP_STATE_CONNECT_NETWORK;
#endif
	}
}
    492e:	4770      	bx	lr
        appState = APP_STATE_SEND;
    4930:	2205      	movs	r2, #5
    4932:	4b01      	ldr	r3, [pc, #4]	; (4938 <Connection_Confirm+0x14>)
    4934:	701a      	strb	r2, [r3, #0]
    4936:	e7fa      	b.n	492e <Connection_Confirm+0xa>
    4938:	20000391 	.word	0x20000391

0000493c <appBroadcastDataConf>:

#if defined(PAN_COORDINATOR) && defined(MIWI_MESH_TOPOLOGY_SIMULATION_MODE)
static void appBroadcastDataConf(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
		
}
    493c:	4770      	bx	lr
	...

00004940 <appUartSendMessage>:
{
    4940:	b5f0      	push	{r4, r5, r6, r7, lr}
    4942:	46c6      	mov	lr, r8
    4944:	b500      	push	{lr}
    4946:	0006      	movs	r6, r0
    4948:	000d      	movs	r5, r1
	sio2host_putchar(0x10);
    494a:	2010      	movs	r0, #16
    494c:	4c15      	ldr	r4, [pc, #84]	; (49a4 <appUartSendMessage+0x64>)
    494e:	47a0      	blx	r4
	sio2host_putchar(0x02);
    4950:	2002      	movs	r0, #2
    4952:	47a0      	blx	r4
	for (uint8_t i = 0; i < size; i++) {
    4954:	2d00      	cmp	r5, #0
    4956:	d01a      	beq.n	498e <appUartSendMessage+0x4e>
    4958:	0034      	movs	r4, r6
    495a:	3d01      	subs	r5, #1
    495c:	b2ef      	uxtb	r7, r5
    495e:	3701      	adds	r7, #1
    4960:	19f7      	adds	r7, r6, r7
    4962:	2500      	movs	r5, #0
		sio2host_putchar(data[i]);
    4964:	4b0f      	ldr	r3, [pc, #60]	; (49a4 <appUartSendMessage+0x64>)
    4966:	4698      	mov	r8, r3
    4968:	e007      	b.n	497a <appUartSendMessage+0x3a>
    496a:	7830      	ldrb	r0, [r6, #0]
    496c:	47c0      	blx	r8
		cs += data[i];
    496e:	7831      	ldrb	r1, [r6, #0]
    4970:	186d      	adds	r5, r5, r1
    4972:	b2ed      	uxtb	r5, r5
    4974:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < size; i++) {
    4976:	42bc      	cmp	r4, r7
    4978:	d009      	beq.n	498e <appUartSendMessage+0x4e>
    497a:	0026      	movs	r6, r4
		if (data[i] == 0x10) {
    497c:	7823      	ldrb	r3, [r4, #0]
    497e:	2b10      	cmp	r3, #16
    4980:	d1f3      	bne.n	496a <appUartSendMessage+0x2a>
			sio2host_putchar(0x10);
    4982:	2010      	movs	r0, #16
    4984:	4b07      	ldr	r3, [pc, #28]	; (49a4 <appUartSendMessage+0x64>)
    4986:	4798      	blx	r3
			cs += 0x10;
    4988:	3510      	adds	r5, #16
    498a:	b2ed      	uxtb	r5, r5
    498c:	e7ed      	b.n	496a <appUartSendMessage+0x2a>
	sio2host_putchar(0x10);
    498e:	2010      	movs	r0, #16
    4990:	4c04      	ldr	r4, [pc, #16]	; (49a4 <appUartSendMessage+0x64>)
    4992:	47a0      	blx	r4
	sio2host_putchar(0x03);
    4994:	2003      	movs	r0, #3
    4996:	47a0      	blx	r4
	cs += 0x10 + 0x02 + 0x10 + 0x03;
    4998:	3525      	adds	r5, #37	; 0x25
	sio2host_putchar(cs);
    499a:	b2e8      	uxtb	r0, r5
    499c:	47a0      	blx	r4
}
    499e:	bc04      	pop	{r2}
    49a0:	4690      	mov	r8, r2
    49a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49a4:	00002479 	.word	0x00002479

000049a8 <appDataInd>:
{
    49a8:	b570      	push	{r4, r5, r6, lr}
    49aa:	b088      	sub	sp, #32
    49ac:	0004      	movs	r4, r0
	uint8_t bufTest1[]={0x02,0x52,'W','P','A','5','5','5','5','5','5',0x03,0x00};
    49ae:	aa04      	add	r2, sp, #16
    49b0:	4b31      	ldr	r3, [pc, #196]	; (4a78 <appDataInd+0xd0>)
    49b2:	0018      	movs	r0, r3
    49b4:	c862      	ldmia	r0!, {r1, r5, r6}
    49b6:	c262      	stmia	r2!, {r1, r5, r6}
    49b8:	0011      	movs	r1, r2
    49ba:	7802      	ldrb	r2, [r0, #0]
    49bc:	700a      	strb	r2, [r1, #0]
	uint8_t bufTest2[]={0x02,0x52,'W','P','A','A','A','A','A','A','A',0x03,0x00};
    49be:	466a      	mov	r2, sp
    49c0:	3310      	adds	r3, #16
    49c2:	cb23      	ldmia	r3!, {r0, r1, r5}
    49c4:	c223      	stmia	r2!, {r0, r1, r5}
    49c6:	781b      	ldrb	r3, [r3, #0]
    49c8:	7013      	strb	r3, [r2, #0]
	AppMessage_t *msg = (AppMessage_t *)ind->payload;
    49ca:	6862      	ldr	r2, [r4, #4]
	port_base->OUTTGL.reg = pin_mask;
    49cc:	2180      	movs	r1, #128	; 0x80
    49ce:	0309      	lsls	r1, r1, #12
    49d0:	4b2a      	ldr	r3, [pc, #168]	; (4a7c <appDataInd+0xd4>)
    49d2:	61d9      	str	r1, [r3, #28]
	msg->lqi = ind->packetLQI;
    49d4:	7aa3      	ldrb	r3, [r4, #10]
    49d6:	7653      	strb	r3, [r2, #25]
	msg->rssi = ind->packetRSSI;
    49d8:	7a63      	ldrb	r3, [r4, #9]
    49da:	7693      	strb	r3, [r2, #26]
	addrId = (*(caption+5)-'0')*10 + *(caption +6)-'0';
    49dc:	2330      	movs	r3, #48	; 0x30
    49de:	5cd1      	ldrb	r1, [r2, r3]
    49e0:	3930      	subs	r1, #48	; 0x30
    49e2:	008b      	lsls	r3, r1, #2
    49e4:	185b      	adds	r3, r3, r1
    49e6:	005b      	lsls	r3, r3, #1
    49e8:	2131      	movs	r1, #49	; 0x31
    49ea:	5c51      	ldrb	r1, [r2, r1]
    49ec:	185b      	adds	r3, r3, r1
    49ee:	3b30      	subs	r3, #48	; 0x30
	byteNo = addrId / 8;
    49f0:	17d8      	asrs	r0, r3, #31
    49f2:	2107      	movs	r1, #7
    49f4:	4001      	ands	r1, r0
    49f6:	18c9      	adds	r1, r1, r3
    49f8:	10cd      	asrs	r5, r1, #3
	setValue = (((msg->sensors).light) > 1200 ) ? bitFlag[bitNo] : 0x00;
    49fa:	2125      	movs	r1, #37	; 0x25
    49fc:	5c50      	ldrb	r0, [r2, r1]
    49fe:	3101      	adds	r1, #1
    4a00:	5c51      	ldrb	r1, [r2, r1]
    4a02:	0209      	lsls	r1, r1, #8
    4a04:	4308      	orrs	r0, r1
    4a06:	2127      	movs	r1, #39	; 0x27
    4a08:	5c51      	ldrb	r1, [r2, r1]
    4a0a:	0409      	lsls	r1, r1, #16
    4a0c:	4301      	orrs	r1, r0
    4a0e:	2028      	movs	r0, #40	; 0x28
    4a10:	5c12      	ldrb	r2, [r2, r0]
    4a12:	0612      	lsls	r2, r2, #24
    4a14:	430a      	orrs	r2, r1
    4a16:	2196      	movs	r1, #150	; 0x96
    4a18:	00c9      	lsls	r1, r1, #3
    4a1a:	2000      	movs	r0, #0
    4a1c:	428a      	cmp	r2, r1
    4a1e:	dd07      	ble.n	4a30 <appDataInd+0x88>
	bitNo = addrId % 8;		
    4a20:	17d9      	asrs	r1, r3, #31
    4a22:	0f49      	lsrs	r1, r1, #29
    4a24:	185b      	adds	r3, r3, r1
    4a26:	2207      	movs	r2, #7
    4a28:	4013      	ands	r3, r2
    4a2a:	1a5b      	subs	r3, r3, r1
	setValue = (((msg->sensors).light) > 1200 ) ? bitFlag[bitNo] : 0x00;
    4a2c:	4a14      	ldr	r2, [pc, #80]	; (4a80 <appDataInd+0xd8>)
    4a2e:	5cd0      	ldrb	r0, [r2, r3]
	write_plc[13+ byteNo] += setValue;
    4a30:	350d      	adds	r5, #13
    4a32:	4b14      	ldr	r3, [pc, #80]	; (4a84 <appDataInd+0xdc>)
    4a34:	5d5a      	ldrb	r2, [r3, r5]
    4a36:	1880      	adds	r0, r0, r2
    4a38:	5558      	strb	r0, [r3, r5]
	txd_en;
    4a3a:	2280      	movs	r2, #128	; 0x80
    4a3c:	0512      	lsls	r2, r2, #20
    4a3e:	4b0f      	ldr	r3, [pc, #60]	; (4a7c <appDataInd+0xd4>)
    4a40:	619a      	str	r2, [r3, #24]
	temp = (temp) ? 0 : 1;
    4a42:	4a11      	ldr	r2, [pc, #68]	; (4a88 <appDataInd+0xe0>)
    4a44:	6813      	ldr	r3, [r2, #0]
    4a46:	4259      	negs	r1, r3
    4a48:	4159      	adcs	r1, r3
    4a4a:	6011      	str	r1, [r2, #0]
	(temp ) ? printf("%s",bufTest1): printf("%s",bufTest2);
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d00d      	beq.n	4a6c <appDataInd+0xc4>
    4a50:	4669      	mov	r1, sp
    4a52:	480e      	ldr	r0, [pc, #56]	; (4a8c <appDataInd+0xe4>)
    4a54:	4b0e      	ldr	r3, [pc, #56]	; (4a90 <appDataInd+0xe8>)
    4a56:	4798      	blx	r3
	rxd_en;
    4a58:	2280      	movs	r2, #128	; 0x80
    4a5a:	0512      	lsls	r2, r2, #20
    4a5c:	4b07      	ldr	r3, [pc, #28]	; (4a7c <appDataInd+0xd4>)
    4a5e:	615a      	str	r2, [r3, #20]
	appUartSendMessage(ind->payload, ind->payloadSize);
    4a60:	7a21      	ldrb	r1, [r4, #8]
    4a62:	6860      	ldr	r0, [r4, #4]
    4a64:	4b0b      	ldr	r3, [pc, #44]	; (4a94 <appDataInd+0xec>)
    4a66:	4798      	blx	r3
}
    4a68:	b008      	add	sp, #32
    4a6a:	bd70      	pop	{r4, r5, r6, pc}
	(temp ) ? printf("%s",bufTest1): printf("%s",bufTest2);
    4a6c:	a904      	add	r1, sp, #16
    4a6e:	4807      	ldr	r0, [pc, #28]	; (4a8c <appDataInd+0xe4>)
    4a70:	4b07      	ldr	r3, [pc, #28]	; (4a90 <appDataInd+0xe8>)
    4a72:	4798      	blx	r3
    4a74:	e7f0      	b.n	4a58 <appDataInd+0xb0>
    4a76:	46c0      	nop			; (mov r8, r8)
    4a78:	0000a7e4 	.word	0x0000a7e4
    4a7c:	41004400 	.word	0x41004400
    4a80:	20000084 	.word	0x20000084
    4a84:	20000070 	.word	0x20000070
    4a88:	200003a8 	.word	0x200003a8
    4a8c:	0000a804 	.word	0x0000a804
    4a90:	00009351 	.word	0x00009351
    4a94:	00004941 	.word	0x00004941

00004a98 <appDataSendingTimerHandler>:
{
    4a98:	b510      	push	{r4, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    4a9a:	4b06      	ldr	r3, [pc, #24]	; (4ab4 <appDataSendingTimerHandler+0x1c>)
    4a9c:	781b      	ldrb	r3, [r3, #0]
    4a9e:	2b08      	cmp	r3, #8
    4aa0:	d003      	beq.n	4aaa <appDataSendingTimerHandler+0x12>
		SYS_TimerStart(&appDataSendingTimer);
    4aa2:	4805      	ldr	r0, [pc, #20]	; (4ab8 <appDataSendingTimerHandler+0x20>)
    4aa4:	4b05      	ldr	r3, [pc, #20]	; (4abc <appDataSendingTimerHandler+0x24>)
    4aa6:	4798      	blx	r3
}
    4aa8:	bd10      	pop	{r4, pc}
		appState = APP_STATE_SEND;
    4aaa:	2205      	movs	r2, #5
    4aac:	4b01      	ldr	r3, [pc, #4]	; (4ab4 <appDataSendingTimerHandler+0x1c>)
    4aae:	701a      	strb	r2, [r3, #0]
    4ab0:	e7fa      	b.n	4aa8 <appDataSendingTimerHandler+0x10>
    4ab2:	46c0      	nop			; (mov r8, r8)
    4ab4:	20000391 	.word	0x20000391
    4ab8:	2000300c 	.word	0x2000300c
    4abc:	00003675 	.word	0x00003675

00004ac0 <UartBytesReceived>:
{
    4ac0:	b570      	push	{r4, r5, r6, lr}
	for (uint16_t i = 0; i < bytes; i++) {
    4ac2:	2800      	cmp	r0, #0
    4ac4:	d00a      	beq.n	4adc <UartBytesReceived+0x1c>
    4ac6:	000c      	movs	r4, r1
    4ac8:	3801      	subs	r0, #1
    4aca:	b285      	uxth	r5, r0
    4acc:	3501      	adds	r5, #1
    4ace:	194d      	adds	r5, r1, r5
		APP_CommandsByteReceived(byte[i]);
    4ad0:	4e03      	ldr	r6, [pc, #12]	; (4ae0 <UartBytesReceived+0x20>)
    4ad2:	7820      	ldrb	r0, [r4, #0]
    4ad4:	47b0      	blx	r6
    4ad6:	3401      	adds	r4, #1
	for (uint16_t i = 0; i < bytes; i++) {
    4ad8:	42ac      	cmp	r4, r5
    4ada:	d1fa      	bne.n	4ad2 <UartBytesReceived+0x12>
}
    4adc:	bd70      	pop	{r4, r5, r6, pc}
    4ade:	46c0      	nop			; (mov r8, r8)
    4ae0:	0000463d 	.word	0x0000463d

00004ae4 <wsndemo_init>:
{
    4ae4:	b510      	push	{r4, lr}
	MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly);
    4ae6:	4903      	ldr	r1, [pc, #12]	; (4af4 <wsndemo_init+0x10>)
    4ae8:	4803      	ldr	r0, [pc, #12]	; (4af8 <wsndemo_init+0x14>)
    4aea:	4b04      	ldr	r3, [pc, #16]	; (4afc <wsndemo_init+0x18>)
    4aec:	4798      	blx	r3
	sio2host_init();
    4aee:	4b04      	ldr	r3, [pc, #16]	; (4b00 <wsndemo_init+0x1c>)
    4af0:	4798      	blx	r3
}
    4af2:	bd10      	pop	{r4, pc}
    4af4:	2000000c 	.word	0x2000000c
    4af8:	20000030 	.word	0x20000030
    4afc:	00005181 	.word	0x00005181
    4b00:	00002265 	.word	0x00002265

00004b04 <wsndemo_task>:
{
    4b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b06:	b087      	sub	sp, #28
	MeshTasks();
    4b08:	4b80      	ldr	r3, [pc, #512]	; (4d0c <wsndemo_task+0x208>)
    4b0a:	4798      	blx	r3
	switch (appState) {
    4b0c:	4b80      	ldr	r3, [pc, #512]	; (4d10 <wsndemo_task+0x20c>)
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	2b01      	cmp	r3, #1
    4b12:	d05c      	beq.n	4bce <wsndemo_task+0xca>
    4b14:	2b00      	cmp	r3, #0
    4b16:	d013      	beq.n	4b40 <wsndemo_task+0x3c>
    4b18:	2b05      	cmp	r3, #5
    4b1a:	d063      	beq.n	4be4 <wsndemo_task+0xe0>
    4b1c:	2b07      	cmp	r3, #7
    4b1e:	d100      	bne.n	4b22 <wsndemo_task+0x1e>
    4b20:	e0af      	b.n	4c82 <wsndemo_task+0x17e>
	if ((bytes = sio2host_rx(rx_data, APP_RX_BUF_SIZE)) > 0) {
    4b22:	2114      	movs	r1, #20
    4b24:	487b      	ldr	r0, [pc, #492]	; (4d14 <wsndemo_task+0x210>)
    4b26:	4b7c      	ldr	r3, [pc, #496]	; (4d18 <wsndemo_task+0x214>)
    4b28:	4798      	blx	r3
    4b2a:	b280      	uxth	r0, r0
    4b2c:	2800      	cmp	r0, #0
    4b2e:	d000      	beq.n	4b32 <wsndemo_task+0x2e>
    4b30:	e0ae      	b.n	4c90 <wsndemo_task+0x18c>
	return (port_base->IN.reg & pin_mask);
    4b32:	4b7a      	ldr	r3, [pc, #488]	; (4d1c <wsndemo_task+0x218>)
    4b34:	6a1b      	ldr	r3, [r3, #32]
	if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    4b36:	00db      	lsls	r3, r3, #3
    4b38:	d400      	bmi.n	4b3c <wsndemo_task+0x38>
    4b3a:	e0ad      	b.n	4c98 <wsndemo_task+0x194>
}
    4b3c:	b007      	add	sp, #28
    4b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    4b40:	4877      	ldr	r0, [pc, #476]	; (4d20 <wsndemo_task+0x21c>)
    4b42:	2401      	movs	r4, #1
    4b44:	7004      	strb	r4, [r0, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    4b46:	2200      	movs	r2, #0
    4b48:	7042      	strb	r2, [r0, #1]
	appMsg.extAddr              = 0;
    4b4a:	2500      	movs	r5, #0
    4b4c:	2100      	movs	r1, #0
    4b4e:	8041      	strh	r1, [r0, #2]
    4b50:	8081      	strh	r1, [r0, #4]
    4b52:	80c1      	strh	r1, [r0, #6]
    4b54:	8101      	strh	r1, [r0, #8]
	appMsg.shortAddr            = 0;
    4b56:	8142      	strh	r2, [r0, #10]
	appMsg.softVersion          = 0x01100000;
    4b58:	2388      	movs	r3, #136	; 0x88
    4b5a:	045b      	lsls	r3, r3, #17
    4b5c:	60c3      	str	r3, [r0, #12]
	appMsg.channelMask          = CHANNEL_MAP;
    4b5e:	2380      	movs	r3, #128	; 0x80
    4b60:	049b      	lsls	r3, r3, #18
    4b62:	6103      	str	r3, [r0, #16]
	appMsg.nextHopAddr          = 0;
    4b64:	75c2      	strb	r2, [r0, #23]
    4b66:	7602      	strb	r2, [r0, #24]
	appMsg.lqi                  = 0;
    4b68:	7645      	strb	r5, [r0, #25]
	appMsg.rssi                 = 0;
    4b6a:	7685      	strb	r5, [r0, #26]
	appMsg.sensors.type        = 1;
    4b6c:	76c4      	strb	r4, [r0, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    4b6e:	230c      	movs	r3, #12
    4b70:	7703      	strb	r3, [r0, #28]
	appMsg.sensors.battery     = 0;
    4b72:	0003      	movs	r3, r0
    4b74:	7742      	strb	r2, [r0, #29]
    4b76:	7782      	strb	r2, [r0, #30]
    4b78:	77c2      	strb	r2, [r0, #31]
    4b7a:	331d      	adds	r3, #29
    4b7c:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 0;
    4b7e:	0003      	movs	r3, r0
    4b80:	3321      	adds	r3, #33	; 0x21
    4b82:	701a      	strb	r2, [r3, #0]
    4b84:	705a      	strb	r2, [r3, #1]
    4b86:	709a      	strb	r2, [r3, #2]
    4b88:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.light       = 0;
    4b8a:	0003      	movs	r3, r0
    4b8c:	3325      	adds	r3, #37	; 0x25
    4b8e:	701a      	strb	r2, [r3, #0]
    4b90:	705a      	strb	r2, [r3, #1]
    4b92:	709a      	strb	r2, [r3, #2]
    4b94:	70da      	strb	r2, [r3, #3]
	appMsg.caption.type         = 32;
    4b96:	3220      	adds	r2, #32
    4b98:	2329      	movs	r3, #41	; 0x29
    4b9a:	54c2      	strb	r2, [r0, r3]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    4b9c:	3a0a      	subs	r2, #10
    4b9e:	3301      	adds	r3, #1
    4ba0:	54c2      	strb	r2, [r0, r3]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    4ba2:	302b      	adds	r0, #43	; 0x2b
    4ba4:	495f      	ldr	r1, [pc, #380]	; (4d24 <wsndemo_task+0x220>)
    4ba6:	4b60      	ldr	r3, [pc, #384]	; (4d28 <wsndemo_task+0x224>)
    4ba8:	4798      	blx	r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    4baa:	4b60      	ldr	r3, [pc, #384]	; (4d2c <wsndemo_task+0x228>)
    4bac:	4a60      	ldr	r2, [pc, #384]	; (4d30 <wsndemo_task+0x22c>)
    4bae:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4bb0:	731d      	strb	r5, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    4bb2:	4a60      	ldr	r2, [pc, #384]	; (4d34 <wsndemo_task+0x230>)
    4bb4:	611a      	str	r2, [r3, #16]
		port_base->OUTCLR.reg = pin_mask;
    4bb6:	2280      	movs	r2, #128	; 0x80
    4bb8:	0312      	lsls	r2, r2, #12
    4bba:	4b58      	ldr	r3, [pc, #352]	; (4d1c <wsndemo_task+0x218>)
    4bbc:	615a      	str	r2, [r3, #20]
	APP_CommandsInit();
    4bbe:	4b5e      	ldr	r3, [pc, #376]	; (4d38 <wsndemo_task+0x234>)
    4bc0:	4798      	blx	r3
	MiApp_SubscribeDataIndicationCallback(appDataInd);
    4bc2:	485e      	ldr	r0, [pc, #376]	; (4d3c <wsndemo_task+0x238>)
    4bc4:	4b5e      	ldr	r3, [pc, #376]	; (4d40 <wsndemo_task+0x23c>)
    4bc6:	4798      	blx	r3
    appState = APP_STATE_START_NETWORK;
    4bc8:	4b51      	ldr	r3, [pc, #324]	; (4d10 <wsndemo_task+0x20c>)
    4bca:	701c      	strb	r4, [r3, #0]
    4bcc:	e7a9      	b.n	4b22 <wsndemo_task+0x1e>
		MiApp_StartConnection(START_CONN_DIRECT, APP_SCAN_DURATION, CHANNEL_MAP, Connection_Confirm);
    4bce:	4b5d      	ldr	r3, [pc, #372]	; (4d44 <wsndemo_task+0x240>)
    4bd0:	2280      	movs	r2, #128	; 0x80
    4bd2:	0492      	lsls	r2, r2, #18
    4bd4:	210a      	movs	r1, #10
    4bd6:	2000      	movs	r0, #0
    4bd8:	4c5b      	ldr	r4, [pc, #364]	; (4d48 <wsndemo_task+0x244>)
    4bda:	47a0      	blx	r4
		appState = APP_STATE_SEND;
    4bdc:	2205      	movs	r2, #5
    4bde:	4b4c      	ldr	r3, [pc, #304]	; (4d10 <wsndemo_task+0x20c>)
    4be0:	701a      	strb	r2, [r3, #0]
    4be2:	e79e      	b.n	4b22 <wsndemo_task+0x1e>
    uint16_t shortAddressLocal = 0xFFFF;
    4be4:	ad05      	add	r5, sp, #20
    4be6:	2301      	movs	r3, #1
    4be8:	425b      	negs	r3, r3
    4bea:	802b      	strh	r3, [r5, #0]
    uint16_t shortAddressPanId = 0xFFFF;
    4bec:	2616      	movs	r6, #22
    4bee:	446e      	add	r6, sp
    4bf0:	8033      	strh	r3, [r6, #0]
	appMsg.sensors.battery     = rand() & 0xffff;
    4bf2:	4f56      	ldr	r7, [pc, #344]	; (4d4c <wsndemo_task+0x248>)
    4bf4:	47b8      	blx	r7
    4bf6:	4c4a      	ldr	r4, [pc, #296]	; (4d20 <wsndemo_task+0x21c>)
    4bf8:	0023      	movs	r3, r4
    4bfa:	7760      	strb	r0, [r4, #29]
    4bfc:	0a00      	lsrs	r0, r0, #8
    4bfe:	77a0      	strb	r0, [r4, #30]
    4c00:	2200      	movs	r2, #0
    4c02:	77e2      	strb	r2, [r4, #31]
    4c04:	331d      	adds	r3, #29
    4c06:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = rand() & 0x7f;
    4c08:	47b8      	blx	r7
    4c0a:	237f      	movs	r3, #127	; 0x7f
    4c0c:	4018      	ands	r0, r3
    4c0e:	0023      	movs	r3, r4
    4c10:	3321      	adds	r3, #33	; 0x21
    4c12:	7018      	strb	r0, [r3, #0]
    4c14:	2200      	movs	r2, #0
    4c16:	705a      	strb	r2, [r3, #1]
    4c18:	709a      	strb	r2, [r3, #2]
    4c1a:	0e00      	lsrs	r0, r0, #24
    4c1c:	70d8      	strb	r0, [r3, #3]
	appMsg.sensors.light       = rand() & 0xff;
    4c1e:	47b8      	blx	r7
    4c20:	23ff      	movs	r3, #255	; 0xff
    4c22:	4018      	ands	r0, r3
    4c24:	0023      	movs	r3, r4
    4c26:	3325      	adds	r3, #37	; 0x25
    4c28:	7018      	strb	r0, [r3, #0]
    4c2a:	0a02      	lsrs	r2, r0, #8
    4c2c:	705a      	strb	r2, [r3, #1]
    4c2e:	0c02      	lsrs	r2, r0, #16
    4c30:	709a      	strb	r2, [r3, #2]
    4c32:	0e00      	lsrs	r0, r0, #24
    4c34:	70d8      	strb	r0, [r3, #3]
	MiApp_Get(SHORT_ADDRESS, (uint8_t *)&shortAddressLocal);
    4c36:	0029      	movs	r1, r5
    4c38:	2002      	movs	r0, #2
    4c3a:	4f45      	ldr	r7, [pc, #276]	; (4d50 <wsndemo_task+0x24c>)
    4c3c:	47b8      	blx	r7
        appMsg.shortAddr = shortAddressLocal;
    4c3e:	882b      	ldrh	r3, [r5, #0]
    4c40:	8163      	strh	r3, [r4, #10]
	appMsg.extAddr   = appMsg.shortAddr;
    4c42:	8063      	strh	r3, [r4, #2]
    4c44:	0c1b      	lsrs	r3, r3, #16
    4c46:	80a3      	strh	r3, [r4, #4]
    4c48:	2300      	movs	r3, #0
    4c4a:	80e3      	strh	r3, [r4, #6]
    4c4c:	8123      	strh	r3, [r4, #8]
	MiApp_Get(CHANNEL, (uint8_t *)&appMsg.workingChannel);
    4c4e:	0021      	movs	r1, r4
    4c50:	3116      	adds	r1, #22
    4c52:	2000      	movs	r0, #0
    4c54:	47b8      	blx	r7
	MiApp_Get(PANID, (uint8_t *)&shortAddressPanId);
    4c56:	0031      	movs	r1, r6
    4c58:	2001      	movs	r0, #1
    4c5a:	47b8      	blx	r7
        appMsg.panId = shortAddressPanId;
    4c5c:	8833      	ldrh	r3, [r6, #0]
    4c5e:	82a3      	strh	r3, [r4, #20]
	sprintf(&(appMsg.caption.text[APP_CAPTION_SIZE - SHORT_ADDRESS_CAPTION_SIZE]), "-0x%04X", shortAddressLocal);
    4c60:	882a      	ldrh	r2, [r5, #0]
    4c62:	0020      	movs	r0, r4
    4c64:	303a      	adds	r0, #58	; 0x3a
    4c66:	493b      	ldr	r1, [pc, #236]	; (4d54 <wsndemo_task+0x250>)
    4c68:	4b3b      	ldr	r3, [pc, #236]	; (4d58 <wsndemo_task+0x254>)
    4c6a:	4798      	blx	r3
	appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg));
    4c6c:	2141      	movs	r1, #65	; 0x41
    4c6e:	0020      	movs	r0, r4
    4c70:	4b3a      	ldr	r3, [pc, #232]	; (4d5c <wsndemo_task+0x258>)
    4c72:	4798      	blx	r3
	SYS_TimerStart(&appDataSendingTimer);
    4c74:	482d      	ldr	r0, [pc, #180]	; (4d2c <wsndemo_task+0x228>)
    4c76:	4b3a      	ldr	r3, [pc, #232]	; (4d60 <wsndemo_task+0x25c>)
    4c78:	4798      	blx	r3
	appState = APP_STATE_WAIT_SEND_TIMER;
    4c7a:	2208      	movs	r2, #8
    4c7c:	4b24      	ldr	r3, [pc, #144]	; (4d10 <wsndemo_task+0x20c>)
    4c7e:	701a      	strb	r2, [r3, #0]
    4c80:	e74f      	b.n	4b22 <wsndemo_task+0x1e>
		SYS_TimerStart(&appDataSendingTimer);
    4c82:	482a      	ldr	r0, [pc, #168]	; (4d2c <wsndemo_task+0x228>)
    4c84:	4b36      	ldr	r3, [pc, #216]	; (4d60 <wsndemo_task+0x25c>)
    4c86:	4798      	blx	r3
		appState = APP_STATE_WAIT_SEND_TIMER;
    4c88:	2208      	movs	r2, #8
    4c8a:	4b21      	ldr	r3, [pc, #132]	; (4d10 <wsndemo_task+0x20c>)
    4c8c:	701a      	strb	r2, [r3, #0]
    4c8e:	e748      	b.n	4b22 <wsndemo_task+0x1e>
		UartBytesReceived(bytes, (uint8_t *)&rx_data);
    4c90:	4920      	ldr	r1, [pc, #128]	; (4d14 <wsndemo_task+0x210>)
    4c92:	4b34      	ldr	r3, [pc, #208]	; (4d64 <wsndemo_task+0x260>)
    4c94:	4798      	blx	r3
    4c96:	e74c      	b.n	4b32 <wsndemo_task+0x2e>
		uint16_t dstAddr = MESH_BROADCAST_TO_COORDINATORS;
    4c98:	2203      	movs	r2, #3
    4c9a:	4252      	negs	r2, r2
    4c9c:	2316      	movs	r3, #22
    4c9e:	446b      	add	r3, sp
    4ca0:	801a      	strh	r2, [r3, #0]
		delay_ms(50);
    4ca2:	2032      	movs	r0, #50	; 0x32
    4ca4:	4b30      	ldr	r3, [pc, #192]	; (4d68 <wsndemo_task+0x264>)
    4ca6:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    4ca8:	4b1c      	ldr	r3, [pc, #112]	; (4d1c <wsndemo_task+0x218>)
    4caa:	6a1b      	ldr	r3, [r3, #32]
		while(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    4cac:	00db      	lsls	r3, r3, #3
    4cae:	d41c      	bmi.n	4cea <wsndemo_task+0x1e6>
    4cb0:	2400      	movs	r4, #0
			delay_ms(500);
    4cb2:	25fa      	movs	r5, #250	; 0xfa
    4cb4:	006d      	lsls	r5, r5, #1
    4cb6:	4f2c      	ldr	r7, [pc, #176]	; (4d68 <wsndemo_task+0x264>)
    4cb8:	4e18      	ldr	r6, [pc, #96]	; (4d1c <wsndemo_task+0x218>)
    4cba:	0028      	movs	r0, r5
    4cbc:	47b8      	blx	r7
			count += 1;
    4cbe:	3401      	adds	r4, #1
    4cc0:	b2e4      	uxtb	r4, r4
    4cc2:	6a33      	ldr	r3, [r6, #32]
		while(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    4cc4:	00db      	lsls	r3, r3, #3
    4cc6:	d5f8      	bpl.n	4cba <wsndemo_task+0x1b6>
		if (count > 5)
    4cc8:	2c05      	cmp	r4, #5
    4cca:	d90e      	bls.n	4cea <wsndemo_task+0x1e6>
			commandId = APP_COMMAND_ID_TOPOLOGY_SIMULATION_RESET;
    4ccc:	ab05      	add	r3, sp, #20
    4cce:	2220      	movs	r2, #32
    4cd0:	701a      	strb	r2, [r3, #0]
			MiApp_SendData(2, (uint8_t *)&dstAddr, 1, &commandId, 1, false, appBroadcastDataConf);
    4cd2:	4a26      	ldr	r2, [pc, #152]	; (4d6c <wsndemo_task+0x268>)
    4cd4:	9202      	str	r2, [sp, #8]
    4cd6:	2200      	movs	r2, #0
    4cd8:	9201      	str	r2, [sp, #4]
    4cda:	3201      	adds	r2, #1
    4cdc:	9200      	str	r2, [sp, #0]
    4cde:	2116      	movs	r1, #22
    4ce0:	4469      	add	r1, sp
    4ce2:	2002      	movs	r0, #2
    4ce4:	4c22      	ldr	r4, [pc, #136]	; (4d70 <wsndemo_task+0x26c>)
    4ce6:	47a0      	blx	r4
    4ce8:	e728      	b.n	4b3c <wsndemo_task+0x38>
			commandId = APP_COMMAND_ID_SIMULATE_LINE_TOPOLOGY;
    4cea:	ab05      	add	r3, sp, #20
    4cec:	2221      	movs	r2, #33	; 0x21
    4cee:	701a      	strb	r2, [r3, #0]
			MiApp_SendData(2, (uint8_t *)&dstAddr, 1, &commandId, 2, false, appBroadcastDataConf);
    4cf0:	4a1e      	ldr	r2, [pc, #120]	; (4d6c <wsndemo_task+0x268>)
    4cf2:	9202      	str	r2, [sp, #8]
    4cf4:	2200      	movs	r2, #0
    4cf6:	9201      	str	r2, [sp, #4]
    4cf8:	3202      	adds	r2, #2
    4cfa:	9200      	str	r2, [sp, #0]
    4cfc:	3a01      	subs	r2, #1
    4cfe:	2116      	movs	r1, #22
    4d00:	4469      	add	r1, sp
    4d02:	2002      	movs	r0, #2
    4d04:	4c1a      	ldr	r4, [pc, #104]	; (4d70 <wsndemo_task+0x26c>)
    4d06:	47a0      	blx	r4
}
    4d08:	e718      	b.n	4b3c <wsndemo_task+0x38>
    4d0a:	46c0      	nop			; (mov r8, r8)
    4d0c:	00005305 	.word	0x00005305
    4d10:	20000391 	.word	0x20000391
    4d14:	20000394 	.word	0x20000394
    4d18:	000023e1 	.word	0x000023e1
    4d1c:	41004400 	.word	0x41004400
    4d20:	20000350 	.word	0x20000350
    4d24:	0000a808 	.word	0x0000a808
    4d28:	0000932f 	.word	0x0000932f
    4d2c:	2000300c 	.word	0x2000300c
    4d30:	00002710 	.word	0x00002710
    4d34:	00004a99 	.word	0x00004a99
    4d38:	00004615 	.word	0x00004615
    4d3c:	000049a9 	.word	0x000049a9
    4d40:	00006681 	.word	0x00006681
    4d44:	00004925 	.word	0x00004925
    4d48:	00007b8d 	.word	0x00007b8d
    4d4c:	00009385 	.word	0x00009385
    4d50:	000055ad 	.word	0x000055ad
    4d54:	0000a818 	.word	0x0000a818
    4d58:	00009569 	.word	0x00009569
    4d5c:	00004941 	.word	0x00004941
    4d60:	00003675 	.word	0x00003675
    4d64:	00004ac1 	.word	0x00004ac1
    4d68:	00000181 	.word	0x00000181
    4d6c:	0000493d 	.word	0x0000493d
    4d70:	00005399 	.word	0x00005399

00004d74 <common_tc_delay>:
    4d74:	b510      	push	{r4, lr}
    4d76:	1c04      	adds	r4, r0, #0
    4d78:	4b13      	ldr	r3, [pc, #76]	; (4dc8 <common_tc_delay+0x54>)
    4d7a:	4798      	blx	r3
    4d7c:	4b13      	ldr	r3, [pc, #76]	; (4dcc <common_tc_delay+0x58>)
    4d7e:	781a      	ldrb	r2, [r3, #0]
    4d80:	4362      	muls	r2, r4
    4d82:	1881      	adds	r1, r0, r2
    4d84:	4b12      	ldr	r3, [pc, #72]	; (4dd0 <common_tc_delay+0x5c>)
    4d86:	6059      	str	r1, [r3, #4]
    4d88:	6859      	ldr	r1, [r3, #4]
    4d8a:	0c09      	lsrs	r1, r1, #16
    4d8c:	6059      	str	r1, [r3, #4]
    4d8e:	685b      	ldr	r3, [r3, #4]
    4d90:	2b00      	cmp	r3, #0
    4d92:	d007      	beq.n	4da4 <common_tc_delay+0x30>
    4d94:	4b0e      	ldr	r3, [pc, #56]	; (4dd0 <common_tc_delay+0x5c>)
    4d96:	6859      	ldr	r1, [r3, #4]
    4d98:	3201      	adds	r2, #1
    4d9a:	1880      	adds	r0, r0, r2
    4d9c:	8118      	strh	r0, [r3, #8]
    4d9e:	4b0d      	ldr	r3, [pc, #52]	; (4dd4 <common_tc_delay+0x60>)
    4da0:	4798      	blx	r3
    4da2:	e004      	b.n	4dae <common_tc_delay+0x3a>
    4da4:	1882      	adds	r2, r0, r2
    4da6:	4b0a      	ldr	r3, [pc, #40]	; (4dd0 <common_tc_delay+0x5c>)
    4da8:	811a      	strh	r2, [r3, #8]
    4daa:	4b0b      	ldr	r3, [pc, #44]	; (4dd8 <common_tc_delay+0x64>)
    4dac:	4798      	blx	r3
    4dae:	4b08      	ldr	r3, [pc, #32]	; (4dd0 <common_tc_delay+0x5c>)
    4db0:	891b      	ldrh	r3, [r3, #8]
    4db2:	2b63      	cmp	r3, #99	; 0x63
    4db4:	d802      	bhi.n	4dbc <common_tc_delay+0x48>
    4db6:	3364      	adds	r3, #100	; 0x64
    4db8:	4a05      	ldr	r2, [pc, #20]	; (4dd0 <common_tc_delay+0x5c>)
    4dba:	8113      	strh	r3, [r2, #8]
    4dbc:	4b04      	ldr	r3, [pc, #16]	; (4dd0 <common_tc_delay+0x5c>)
    4dbe:	8918      	ldrh	r0, [r3, #8]
    4dc0:	4b06      	ldr	r3, [pc, #24]	; (4ddc <common_tc_delay+0x68>)
    4dc2:	4798      	blx	r3
    4dc4:	bd10      	pop	{r4, pc}
    4dc6:	46c0      	nop			; (mov r8, r8)
    4dc8:	00003739 	.word	0x00003739
    4dcc:	20003020 	.word	0x20003020
    4dd0:	200003ac 	.word	0x200003ac
    4dd4:	0000374d 	.word	0x0000374d
    4dd8:	00003761 	.word	0x00003761
    4ddc:	0000379d 	.word	0x0000379d

00004de0 <common_tc_init>:
    4de0:	b508      	push	{r3, lr}
    4de2:	2200      	movs	r2, #0
    4de4:	4b03      	ldr	r3, [pc, #12]	; (4df4 <common_tc_init+0x14>)
    4de6:	701a      	strb	r2, [r3, #0]
    4de8:	4b03      	ldr	r3, [pc, #12]	; (4df8 <common_tc_init+0x18>)
    4dea:	4798      	blx	r3
    4dec:	4b03      	ldr	r3, [pc, #12]	; (4dfc <common_tc_init+0x1c>)
    4dee:	7018      	strb	r0, [r3, #0]
    4df0:	bd08      	pop	{r3, pc}
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	200003ac 	.word	0x200003ac
    4df8:	000037b5 	.word	0x000037b5
    4dfc:	20003020 	.word	0x20003020

00004e00 <tmr_ovf_callback>:
    4e00:	b508      	push	{r3, lr}
    4e02:	4b0e      	ldr	r3, [pc, #56]	; (4e3c <tmr_ovf_callback+0x3c>)
    4e04:	685b      	ldr	r3, [r3, #4]
    4e06:	2b00      	cmp	r3, #0
    4e08:	d007      	beq.n	4e1a <tmr_ovf_callback+0x1a>
    4e0a:	4a0c      	ldr	r2, [pc, #48]	; (4e3c <tmr_ovf_callback+0x3c>)
    4e0c:	6853      	ldr	r3, [r2, #4]
    4e0e:	3b01      	subs	r3, #1
    4e10:	6053      	str	r3, [r2, #4]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d101      	bne.n	4e1a <tmr_ovf_callback+0x1a>
    4e16:	4b0a      	ldr	r3, [pc, #40]	; (4e40 <tmr_ovf_callback+0x40>)
    4e18:	4798      	blx	r3
    4e1a:	4a08      	ldr	r2, [pc, #32]	; (4e3c <tmr_ovf_callback+0x3c>)
    4e1c:	7813      	ldrb	r3, [r2, #0]
    4e1e:	3301      	adds	r3, #1
    4e20:	b2db      	uxtb	r3, r3
    4e22:	7013      	strb	r3, [r2, #0]
    4e24:	4a07      	ldr	r2, [pc, #28]	; (4e44 <tmr_ovf_callback+0x44>)
    4e26:	7812      	ldrb	r2, [r2, #0]
    4e28:	429a      	cmp	r2, r3
    4e2a:	d806      	bhi.n	4e3a <tmr_ovf_callback+0x3a>
    4e2c:	4b03      	ldr	r3, [pc, #12]	; (4e3c <tmr_ovf_callback+0x3c>)
    4e2e:	2200      	movs	r2, #0
    4e30:	701a      	strb	r2, [r3, #0]
    4e32:	68db      	ldr	r3, [r3, #12]
    4e34:	2b00      	cmp	r3, #0
    4e36:	d000      	beq.n	4e3a <tmr_ovf_callback+0x3a>
    4e38:	4798      	blx	r3
    4e3a:	bd08      	pop	{r3, pc}
    4e3c:	200003ac 	.word	0x200003ac
    4e40:	00003761 	.word	0x00003761
    4e44:	20003020 	.word	0x20003020

00004e48 <tmr_cca_callback>:
    4e48:	b508      	push	{r3, lr}
    4e4a:	4b04      	ldr	r3, [pc, #16]	; (4e5c <tmr_cca_callback+0x14>)
    4e4c:	4798      	blx	r3
    4e4e:	4b04      	ldr	r3, [pc, #16]	; (4e60 <tmr_cca_callback+0x18>)
    4e50:	691b      	ldr	r3, [r3, #16]
    4e52:	2b00      	cmp	r3, #0
    4e54:	d000      	beq.n	4e58 <tmr_cca_callback+0x10>
    4e56:	4798      	blx	r3
    4e58:	bd08      	pop	{r3, pc}
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	0000374d 	.word	0x0000374d
    4e60:	200003ac 	.word	0x200003ac

00004e64 <set_common_tc_expiry_callback>:
    4e64:	4b01      	ldr	r3, [pc, #4]	; (4e6c <set_common_tc_expiry_callback+0x8>)
    4e66:	6118      	str	r0, [r3, #16]
    4e68:	4770      	bx	lr
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	200003ac 	.word	0x200003ac

00004e70 <frameTxCallback>:
    4e70:	b570      	push	{r4, r5, r6, lr}
    4e72:	2401      	movs	r4, #1
    4e74:	4b07      	ldr	r3, [pc, #28]	; (4e94 <frameTxCallback+0x24>)
    4e76:	701c      	strb	r4, [r3, #0]
    4e78:	4c07      	ldr	r4, [pc, #28]	; (4e98 <frameTxCallback+0x28>)
    4e7a:	6823      	ldr	r3, [r4, #0]
    4e7c:	691b      	ldr	r3, [r3, #16]
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d004      	beq.n	4e8c <frameTxCallback+0x1c>
    4e82:	4798      	blx	r3
    4e84:	4d05      	ldr	r5, [pc, #20]	; (4e9c <frameTxCallback+0x2c>)
    4e86:	6820      	ldr	r0, [r4, #0]
    4e88:	47a8      	blx	r5
    4e8a:	bd70      	pop	{r4, r5, r6, pc}
    4e8c:	0010      	movs	r0, r2
    4e8e:	4d03      	ldr	r5, [pc, #12]	; (4e9c <frameTxCallback+0x2c>)
    4e90:	47a8      	blx	r5
    4e92:	e7f8      	b.n	4e86 <frameTxCallback+0x16>
    4e94:	2000008c 	.word	0x2000008c
    4e98:	20003054 	.word	0x20003054
    4e9c:	000033f1 	.word	0x000033f1

00004ea0 <nonAckDataCallback>:
    4ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ea2:	46c6      	mov	lr, r8
    4ea4:	0007      	movs	r7, r0
    4ea6:	b500      	push	{lr}
    4ea8:	0010      	movs	r0, r2
    4eaa:	4e0f      	ldr	r6, [pc, #60]	; (4ee8 <nonAckDataCallback+0x48>)
    4eac:	4688      	mov	r8, r1
    4eae:	0015      	movs	r5, r2
    4eb0:	47b0      	blx	r6
    4eb2:	2100      	movs	r1, #0
    4eb4:	480d      	ldr	r0, [pc, #52]	; (4eec <nonAckDataCallback+0x4c>)
    4eb6:	4b0e      	ldr	r3, [pc, #56]	; (4ef0 <nonAckDataCallback+0x50>)
    4eb8:	4798      	blx	r3
    4eba:	1e04      	subs	r4, r0, #0
    4ebc:	d00e      	beq.n	4edc <nonAckDataCallback+0x3c>
    4ebe:	68a3      	ldr	r3, [r4, #8]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d003      	beq.n	4ecc <nonAckDataCallback+0x2c>
    4ec4:	002a      	movs	r2, r5
    4ec6:	4641      	mov	r1, r8
    4ec8:	0038      	movs	r0, r7
    4eca:	4798      	blx	r3
    4ecc:	7d23      	ldrb	r3, [r4, #20]
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d101      	bne.n	4ed6 <nonAckDataCallback+0x36>
    4ed2:	0020      	movs	r0, r4
    4ed4:	47b0      	blx	r6
    4ed6:	bc04      	pop	{r2}
    4ed8:	4690      	mov	r8, r2
    4eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4edc:	4b05      	ldr	r3, [pc, #20]	; (4ef4 <nonAckDataCallback+0x54>)
    4ede:	781b      	ldrb	r3, [r3, #0]
    4ee0:	2b08      	cmp	r3, #8
    4ee2:	d1f8      	bne.n	4ed6 <nonAckDataCallback+0x36>
    4ee4:	e7eb      	b.n	4ebe <nonAckDataCallback+0x1e>
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	000033f1 	.word	0x000033f1
    4eec:	20003024 	.word	0x20003024
    4ef0:	00003545 	.word	0x00003545
    4ef4:	200003c0 	.word	0x200003c0

00004ef8 <dataTimerHandler>:
    4ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4efa:	464e      	mov	r6, r9
    4efc:	46de      	mov	lr, fp
    4efe:	4657      	mov	r7, sl
    4f00:	4645      	mov	r5, r8
    4f02:	b5e0      	push	{r5, r6, r7, lr}
    4f04:	4e40      	ldr	r6, [pc, #256]	; (5008 <dataTimerHandler+0x110>)
    4f06:	7a33      	ldrb	r3, [r6, #8]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d049      	beq.n	4fa0 <dataTimerHandler+0xa8>
    4f0c:	4b3f      	ldr	r3, [pc, #252]	; (500c <dataTimerHandler+0x114>)
    4f0e:	2500      	movs	r5, #0
    4f10:	4698      	mov	r8, r3
    4f12:	4b3f      	ldr	r3, [pc, #252]	; (5010 <dataTimerHandler+0x118>)
    4f14:	46c1      	mov	r9, r8
    4f16:	469a      	mov	sl, r3
    4f18:	4f3e      	ldr	r7, [pc, #248]	; (5014 <dataTimerHandler+0x11c>)
    4f1a:	2100      	movs	r1, #0
    4f1c:	0030      	movs	r0, r6
    4f1e:	47b8      	blx	r7
    4f20:	1e04      	subs	r4, r0, #0
    4f22:	d03d      	beq.n	4fa0 <dataTimerHandler+0xa8>
    4f24:	7c03      	ldrb	r3, [r0, #16]
    4f26:	2b00      	cmp	r3, #0
    4f28:	d046      	beq.n	4fb8 <dataTimerHandler+0xc0>
    4f2a:	3b01      	subs	r3, #1
    4f2c:	b2db      	uxtb	r3, r3
    4f2e:	7403      	strb	r3, [r0, #16]
    4f30:	2b00      	cmp	r3, #0
    4f32:	d141      	bne.n	4fb8 <dataTimerHandler+0xc0>
    4f34:	7c43      	ldrb	r3, [r0, #17]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d047      	beq.n	4fca <dataTimerHandler+0xd2>
    4f3a:	3b01      	subs	r3, #1
    4f3c:	b2db      	uxtb	r3, r3
    4f3e:	7443      	strb	r3, [r0, #17]
    4f40:	2b00      	cmp	r3, #0
    4f42:	d142      	bne.n	4fca <dataTimerHandler+0xd2>
    4f44:	6883      	ldr	r3, [r0, #8]
    4f46:	2b00      	cmp	r3, #0
    4f48:	d003      	beq.n	4f52 <dataTimerHandler+0x5a>
    4f4a:	7c80      	ldrb	r0, [r0, #18]
    4f4c:	0022      	movs	r2, r4
    4f4e:	2103      	movs	r1, #3
    4f50:	4798      	blx	r3
    4f52:	4b31      	ldr	r3, [pc, #196]	; (5018 <dataTimerHandler+0x120>)
    4f54:	0020      	movs	r0, r4
    4f56:	4798      	blx	r3
    4f58:	23ff      	movs	r3, #255	; 0xff
    4f5a:	8ba0      	ldrh	r0, [r4, #28]
    4f5c:	4398      	bics	r0, r3
    4f5e:	4b2f      	ldr	r3, [pc, #188]	; (501c <dataTimerHandler+0x124>)
    4f60:	881b      	ldrh	r3, [r3, #0]
    4f62:	4298      	cmp	r0, r3
    4f64:	d017      	beq.n	4f96 <dataTimerHandler+0x9e>
    4f66:	4b2a      	ldr	r3, [pc, #168]	; (5010 <dataTimerHandler+0x118>)
    4f68:	0a02      	lsrs	r2, r0, #8
    4f6a:	681b      	ldr	r3, [r3, #0]
    4f6c:	0052      	lsls	r2, r2, #1
    4f6e:	691b      	ldr	r3, [r3, #16]
    4f70:	189a      	adds	r2, r3, r2
    4f72:	7854      	ldrb	r4, [r2, #1]
    4f74:	230f      	movs	r3, #15
    4f76:	0021      	movs	r1, r4
    4f78:	469b      	mov	fp, r3
    4f7a:	4399      	bics	r1, r3
    4f7c:	d00b      	beq.n	4f96 <dataTimerHandler+0x9e>
    4f7e:	0921      	lsrs	r1, r4, #4
    4f80:	310f      	adds	r1, #15
    4f82:	4019      	ands	r1, r3
    4f84:	010b      	lsls	r3, r1, #4
    4f86:	469c      	mov	ip, r3
    4f88:	465b      	mov	r3, fp
    4f8a:	4023      	ands	r3, r4
    4f8c:	4664      	mov	r4, ip
    4f8e:	4323      	orrs	r3, r4
    4f90:	7053      	strb	r3, [r2, #1]
    4f92:	2900      	cmp	r1, #0
    4f94:	d028      	beq.n	4fe8 <dataTimerHandler+0xf0>
    4f96:	3501      	adds	r5, #1
    4f98:	7a33      	ldrb	r3, [r6, #8]
    4f9a:	b2ed      	uxtb	r5, r5
    4f9c:	42ab      	cmp	r3, r5
    4f9e:	d8bc      	bhi.n	4f1a <dataTimerHandler+0x22>
    4fa0:	4b1f      	ldr	r3, [pc, #124]	; (5020 <dataTimerHandler+0x128>)
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	2b06      	cmp	r3, #6
    4fa6:	d028      	beq.n	4ffa <dataTimerHandler+0x102>
    4fa8:	4b1e      	ldr	r3, [pc, #120]	; (5024 <dataTimerHandler+0x12c>)
    4faa:	4798      	blx	r3
    4fac:	bc3c      	pop	{r2, r3, r4, r5}
    4fae:	4690      	mov	r8, r2
    4fb0:	4699      	mov	r9, r3
    4fb2:	46a2      	mov	sl, r4
    4fb4:	46ab      	mov	fp, r5
    4fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fb8:	0021      	movs	r1, r4
    4fba:	0030      	movs	r0, r6
    4fbc:	47c0      	blx	r8
    4fbe:	3501      	adds	r5, #1
    4fc0:	7a33      	ldrb	r3, [r6, #8]
    4fc2:	b2ed      	uxtb	r5, r5
    4fc4:	42ab      	cmp	r3, r5
    4fc6:	d8a8      	bhi.n	4f1a <dataTimerHandler+0x22>
    4fc8:	e7ea      	b.n	4fa0 <dataTimerHandler+0xa8>
    4fca:	4652      	mov	r2, sl
    4fcc:	2337      	movs	r3, #55	; 0x37
    4fce:	6812      	ldr	r2, [r2, #0]
    4fd0:	0021      	movs	r1, r4
    4fd2:	5cd3      	ldrb	r3, [r2, r3]
    4fd4:	0030      	movs	r0, r6
    4fd6:	3301      	adds	r3, #1
    4fd8:	7423      	strb	r3, [r4, #16]
    4fda:	47c8      	blx	r9
    4fdc:	3501      	adds	r5, #1
    4fde:	7a33      	ldrb	r3, [r6, #8]
    4fe0:	b2ed      	uxtb	r5, r5
    4fe2:	42ab      	cmp	r3, r5
    4fe4:	d899      	bhi.n	4f1a <dataTimerHandler+0x22>
    4fe6:	e7db      	b.n	4fa0 <dataTimerHandler+0xa8>
    4fe8:	4b0f      	ldr	r3, [pc, #60]	; (5028 <dataTimerHandler+0x130>)
    4fea:	4798      	blx	r3
    4fec:	3501      	adds	r5, #1
    4fee:	7a33      	ldrb	r3, [r6, #8]
    4ff0:	b2ed      	uxtb	r5, r5
    4ff2:	42ab      	cmp	r3, r5
    4ff4:	d900      	bls.n	4ff8 <dataTimerHandler+0x100>
    4ff6:	e790      	b.n	4f1a <dataTimerHandler+0x22>
    4ff8:	e7d2      	b.n	4fa0 <dataTimerHandler+0xa8>
    4ffa:	4b0c      	ldr	r3, [pc, #48]	; (502c <dataTimerHandler+0x134>)
    4ffc:	4798      	blx	r3
    4ffe:	4b0c      	ldr	r3, [pc, #48]	; (5030 <dataTimerHandler+0x138>)
    5000:	4798      	blx	r3
    5002:	4b0c      	ldr	r3, [pc, #48]	; (5034 <dataTimerHandler+0x13c>)
    5004:	4798      	blx	r3
    5006:	e7cf      	b.n	4fa8 <dataTimerHandler+0xb0>
    5008:	20003044 	.word	0x20003044
    500c:	0000350d 	.word	0x0000350d
    5010:	2000303c 	.word	0x2000303c
    5014:	00003545 	.word	0x00003545
    5018:	000033f1 	.word	0x000033f1
    501c:	20003084 	.word	0x20003084
    5020:	200003c0 	.word	0x200003c0
    5024:	000083f5 	.word	0x000083f5
    5028:	00008a95 	.word	0x00008a95
    502c:	00008b19 	.word	0x00008b19
    5030:	00006cb1 	.word	0x00006cb1
    5034:	0000775d 	.word	0x0000775d

00005038 <ackReqDataConfcb>:
    5038:	b5f0      	push	{r4, r5, r6, r7, lr}
    503a:	46de      	mov	lr, fp
    503c:	464e      	mov	r6, r9
    503e:	4645      	mov	r5, r8
    5040:	4657      	mov	r7, sl
    5042:	0013      	movs	r3, r2
    5044:	b5e0      	push	{r5, r6, r7, lr}
    5046:	b085      	sub	sp, #20
    5048:	9202      	str	r2, [sp, #8]
    504a:	7892      	ldrb	r2, [r2, #2]
    504c:	4683      	mov	fp, r0
    504e:	0018      	movs	r0, r3
    5050:	4b41      	ldr	r3, [pc, #260]	; (5158 <ackReqDataConfcb+0x120>)
    5052:	9101      	str	r1, [sp, #4]
    5054:	4690      	mov	r8, r2
    5056:	4798      	blx	r3
    5058:	4e40      	ldr	r6, [pc, #256]	; (515c <ackReqDataConfcb+0x124>)
    505a:	7a33      	ldrb	r3, [r6, #8]
    505c:	2b00      	cmp	r3, #0
    505e:	d035      	beq.n	50cc <ackReqDataConfcb+0x94>
    5060:	4b3f      	ldr	r3, [pc, #252]	; (5160 <ackReqDataConfcb+0x128>)
    5062:	2400      	movs	r4, #0
    5064:	4f3f      	ldr	r7, [pc, #252]	; (5164 <ackReqDataConfcb+0x12c>)
    5066:	4699      	mov	r9, r3
    5068:	e007      	b.n	507a <ackReqDataConfcb+0x42>
    506a:	0029      	movs	r1, r5
    506c:	0030      	movs	r0, r6
    506e:	47c8      	blx	r9
    5070:	3401      	adds	r4, #1
    5072:	7a33      	ldrb	r3, [r6, #8]
    5074:	b2e4      	uxtb	r4, r4
    5076:	42a3      	cmp	r3, r4
    5078:	d928      	bls.n	50cc <ackReqDataConfcb+0x94>
    507a:	2100      	movs	r1, #0
    507c:	0030      	movs	r0, r6
    507e:	47b8      	blx	r7
    5080:	1e05      	subs	r5, r0, #0
    5082:	d023      	beq.n	50cc <ackReqDataConfcb+0x94>
    5084:	2320      	movs	r3, #32
    5086:	5cc3      	ldrb	r3, [r0, r3]
    5088:	4543      	cmp	r3, r8
    508a:	d1ee      	bne.n	506a <ackReqDataConfcb+0x32>
    508c:	7c83      	ldrb	r3, [r0, #18]
    508e:	469a      	mov	sl, r3
    5090:	455b      	cmp	r3, fp
    5092:	d1ea      	bne.n	506a <ackReqDataConfcb+0x32>
    5094:	9b01      	ldr	r3, [sp, #4]
    5096:	2b00      	cmp	r3, #0
    5098:	d02d      	beq.n	50f6 <ackReqDataConfcb+0xbe>
    509a:	2b03      	cmp	r3, #3
    509c:	d039      	beq.n	5112 <ackReqDataConfcb+0xda>
    509e:	7c6b      	ldrb	r3, [r5, #17]
    50a0:	2b00      	cmp	r3, #0
    50a2:	d01a      	beq.n	50da <ackReqDataConfcb+0xa2>
    50a4:	3b01      	subs	r3, #1
    50a6:	b2db      	uxtb	r3, r3
    50a8:	746b      	strb	r3, [r5, #17]
    50aa:	2b00      	cmp	r3, #0
    50ac:	d115      	bne.n	50da <ackReqDataConfcb+0xa2>
    50ae:	68ab      	ldr	r3, [r5, #8]
    50b0:	2b00      	cmp	r3, #0
    50b2:	d003      	beq.n	50bc <ackReqDataConfcb+0x84>
    50b4:	9a02      	ldr	r2, [sp, #8]
    50b6:	9901      	ldr	r1, [sp, #4]
    50b8:	4650      	mov	r0, sl
    50ba:	4798      	blx	r3
    50bc:	4b26      	ldr	r3, [pc, #152]	; (5158 <ackReqDataConfcb+0x120>)
    50be:	0028      	movs	r0, r5
    50c0:	4798      	blx	r3
    50c2:	3401      	adds	r4, #1
    50c4:	7a33      	ldrb	r3, [r6, #8]
    50c6:	b2e4      	uxtb	r4, r4
    50c8:	42a3      	cmp	r3, r4
    50ca:	d8d6      	bhi.n	507a <ackReqDataConfcb+0x42>
    50cc:	b005      	add	sp, #20
    50ce:	bc3c      	pop	{r2, r3, r4, r5}
    50d0:	4690      	mov	r8, r2
    50d2:	4699      	mov	r9, r3
    50d4:	46a2      	mov	sl, r4
    50d6:	46ab      	mov	fp, r5
    50d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50da:	4b23      	ldr	r3, [pc, #140]	; (5168 <ackReqDataConfcb+0x130>)
    50dc:	781b      	ldrb	r3, [r3, #0]
    50de:	2b08      	cmp	r3, #8
    50e0:	d0e5      	beq.n	50ae <ackReqDataConfcb+0x76>
    50e2:	0029      	movs	r1, r5
    50e4:	0030      	movs	r0, r6
    50e6:	4b1e      	ldr	r3, [pc, #120]	; (5160 <ackReqDataConfcb+0x128>)
    50e8:	4798      	blx	r3
    50ea:	89a9      	ldrh	r1, [r5, #12]
    50ec:	4a1f      	ldr	r2, [pc, #124]	; (516c <ackReqDataConfcb+0x134>)
    50ee:	0028      	movs	r0, r5
    50f0:	4b1f      	ldr	r3, [pc, #124]	; (5170 <ackReqDataConfcb+0x138>)
    50f2:	4798      	blx	r3
    50f4:	e7bc      	b.n	5070 <ackReqDataConfcb+0x38>
    50f6:	4b1f      	ldr	r3, [pc, #124]	; (5174 <ackReqDataConfcb+0x13c>)
    50f8:	0001      	movs	r1, r0
    50fa:	681a      	ldr	r2, [r3, #0]
    50fc:	2337      	movs	r3, #55	; 0x37
    50fe:	5cd3      	ldrb	r3, [r2, r3]
    5100:	3301      	adds	r3, #1
    5102:	7403      	strb	r3, [r0, #16]
    5104:	2338      	movs	r3, #56	; 0x38
    5106:	5cd3      	ldrb	r3, [r2, r3]
    5108:	7443      	strb	r3, [r0, #17]
    510a:	0030      	movs	r0, r6
    510c:	4b14      	ldr	r3, [pc, #80]	; (5160 <ackReqDataConfcb+0x128>)
    510e:	4798      	blx	r3
    5110:	e7ae      	b.n	5070 <ackReqDataConfcb+0x38>
    5112:	8b80      	ldrh	r0, [r0, #28]
    5114:	33fc      	adds	r3, #252	; 0xfc
    5116:	4398      	bics	r0, r3
    5118:	4b17      	ldr	r3, [pc, #92]	; (5178 <ackReqDataConfcb+0x140>)
    511a:	4684      	mov	ip, r0
    511c:	881b      	ldrh	r3, [r3, #0]
    511e:	4298      	cmp	r0, r3
    5120:	d0bd      	beq.n	509e <ackReqDataConfcb+0x66>
    5122:	4b14      	ldr	r3, [pc, #80]	; (5174 <ackReqDataConfcb+0x13c>)
    5124:	0a02      	lsrs	r2, r0, #8
    5126:	681b      	ldr	r3, [r3, #0]
    5128:	0052      	lsls	r2, r2, #1
    512a:	691b      	ldr	r3, [r3, #16]
    512c:	189a      	adds	r2, r3, r2
    512e:	7850      	ldrb	r0, [r2, #1]
    5130:	230f      	movs	r3, #15
    5132:	0001      	movs	r1, r0
    5134:	9203      	str	r2, [sp, #12]
    5136:	4399      	bics	r1, r3
    5138:	d0b1      	beq.n	509e <ackReqDataConfcb+0x66>
    513a:	0901      	lsrs	r1, r0, #4
    513c:	310f      	adds	r1, #15
    513e:	4019      	ands	r1, r3
    5140:	010a      	lsls	r2, r1, #4
    5142:	4003      	ands	r3, r0
    5144:	4313      	orrs	r3, r2
    5146:	9a03      	ldr	r2, [sp, #12]
    5148:	7053      	strb	r3, [r2, #1]
    514a:	2900      	cmp	r1, #0
    514c:	d1a7      	bne.n	509e <ackReqDataConfcb+0x66>
    514e:	4660      	mov	r0, ip
    5150:	4b0a      	ldr	r3, [pc, #40]	; (517c <ackReqDataConfcb+0x144>)
    5152:	4798      	blx	r3
    5154:	e7a3      	b.n	509e <ackReqDataConfcb+0x66>
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	000033f1 	.word	0x000033f1
    515c:	20003044 	.word	0x20003044
    5160:	0000350d 	.word	0x0000350d
    5164:	00003545 	.word	0x00003545
    5168:	200003c0 	.word	0x200003c0
    516c:	00005039 	.word	0x00005039
    5170:	000068b1 	.word	0x000068b1
    5174:	2000303c 	.word	0x2000303c
    5178:	20003084 	.word	0x20003084
    517c:	00008a95 	.word	0x00008a95

00005180 <MiApp_ProtocolInit>:
    5180:	b570      	push	{r4, r5, r6, lr}
    5182:	4b25      	ldr	r3, [pc, #148]	; (5218 <MiApp_ProtocolInit+0x98>)
    5184:	b084      	sub	sp, #16
    5186:	6018      	str	r0, [r3, #0]
    5188:	4b24      	ldr	r3, [pc, #144]	; (521c <MiApp_ProtocolInit+0x9c>)
    518a:	2501      	movs	r5, #1
    518c:	6019      	str	r1, [r3, #0]
    518e:	4b24      	ldr	r3, [pc, #144]	; (5220 <MiApp_ProtocolInit+0xa0>)
    5190:	4798      	blx	r3
    5192:	2102      	movs	r1, #2
    5194:	4c23      	ldr	r4, [pc, #140]	; (5224 <MiApp_ProtocolInit+0xa4>)
    5196:	4b24      	ldr	r3, [pc, #144]	; (5228 <MiApp_ProtocolInit+0xa8>)
    5198:	aa02      	add	r2, sp, #8
    519a:	8023      	strh	r3, [r4, #0]
    519c:	7813      	ldrb	r3, [r2, #0]
    519e:	2601      	movs	r6, #1
    51a0:	430b      	orrs	r3, r1
    51a2:	2187      	movs	r1, #135	; 0x87
    51a4:	400b      	ands	r3, r1
    51a6:	2140      	movs	r1, #64	; 0x40
    51a8:	430b      	orrs	r3, r1
    51aa:	21c3      	movs	r1, #195	; 0xc3
    51ac:	400b      	ands	r3, r1
    51ae:	43ab      	bics	r3, r5
    51b0:	7013      	strb	r3, [r2, #0]
    51b2:	491e      	ldr	r1, [pc, #120]	; (522c <MiApp_ProtocolInit+0xac>)
    51b4:	9802      	ldr	r0, [sp, #8]
    51b6:	4b1e      	ldr	r3, [pc, #120]	; (5230 <MiApp_ProtocolInit+0xb0>)
    51b8:	4798      	blx	r3
    51ba:	4b1e      	ldr	r3, [pc, #120]	; (5234 <MiApp_ProtocolInit+0xb4>)
    51bc:	4798      	blx	r3
    51be:	466b      	mov	r3, sp
    51c0:	4276      	negs	r6, r6
    51c2:	1d98      	adds	r0, r3, #6
    51c4:	0021      	movs	r1, r4
    51c6:	4b1c      	ldr	r3, [pc, #112]	; (5238 <MiApp_ProtocolInit+0xb8>)
    51c8:	8006      	strh	r6, [r0, #0]
    51ca:	4798      	blx	r3
    51cc:	491b      	ldr	r1, [pc, #108]	; (523c <MiApp_ProtocolInit+0xbc>)
    51ce:	4b1c      	ldr	r3, [pc, #112]	; (5240 <MiApp_ProtocolInit+0xc0>)
    51d0:	2000      	movs	r0, #0
    51d2:	4798      	blx	r3
    51d4:	4b1b      	ldr	r3, [pc, #108]	; (5244 <MiApp_ProtocolInit+0xc4>)
    51d6:	4798      	blx	r3
    51d8:	4b1b      	ldr	r3, [pc, #108]	; (5248 <MiApp_ProtocolInit+0xc8>)
    51da:	4798      	blx	r3
    51dc:	4b1b      	ldr	r3, [pc, #108]	; (524c <MiApp_ProtocolInit+0xcc>)
    51de:	4798      	blx	r3
    51e0:	4b1b      	ldr	r3, [pc, #108]	; (5250 <MiApp_ProtocolInit+0xd0>)
    51e2:	4798      	blx	r3
    51e4:	4b1b      	ldr	r3, [pc, #108]	; (5254 <MiApp_ProtocolInit+0xd4>)
    51e6:	4c1c      	ldr	r4, [pc, #112]	; (5258 <MiApp_ProtocolInit+0xd8>)
    51e8:	701d      	strb	r5, [r3, #0]
    51ea:	4b1c      	ldr	r3, [pc, #112]	; (525c <MiApp_ProtocolInit+0xdc>)
    51ec:	481c      	ldr	r0, [pc, #112]	; (5260 <MiApp_ProtocolInit+0xe0>)
    51ee:	801e      	strh	r6, [r3, #0]
    51f0:	47a0      	blx	r4
    51f2:	481c      	ldr	r0, [pc, #112]	; (5264 <MiApp_ProtocolInit+0xe4>)
    51f4:	47a0      	blx	r4
    51f6:	481c      	ldr	r0, [pc, #112]	; (5268 <MiApp_ProtocolInit+0xe8>)
    51f8:	47a0      	blx	r4
    51fa:	481c      	ldr	r0, [pc, #112]	; (526c <MiApp_ProtocolInit+0xec>)
    51fc:	47a0      	blx	r4
    51fe:	23fa      	movs	r3, #250	; 0xfa
    5200:	481b      	ldr	r0, [pc, #108]	; (5270 <MiApp_ProtocolInit+0xf0>)
    5202:	009b      	lsls	r3, r3, #2
    5204:	6083      	str	r3, [r0, #8]
    5206:	4b1b      	ldr	r3, [pc, #108]	; (5274 <MiApp_ProtocolInit+0xf4>)
    5208:	7305      	strb	r5, [r0, #12]
    520a:	6103      	str	r3, [r0, #16]
    520c:	4b1a      	ldr	r3, [pc, #104]	; (5278 <MiApp_ProtocolInit+0xf8>)
    520e:	4798      	blx	r3
    5210:	2001      	movs	r0, #1
    5212:	b004      	add	sp, #16
    5214:	bd70      	pop	{r4, r5, r6, pc}
    5216:	46c0      	nop			; (mov r8, r8)
    5218:	2000303c 	.word	0x2000303c
    521c:	20003040 	.word	0x20003040
    5220:	000035cd 	.word	0x000035cd
    5224:	20003070 	.word	0x20003070
    5228:	00001234 	.word	0x00001234
    522c:	20000090 	.word	0x20000090
    5230:	000024f5 	.word	0x000024f5
    5234:	00002f81 	.word	0x00002f81
    5238:	00002495 	.word	0x00002495
    523c:	20003050 	.word	0x20003050
    5240:	000024cd 	.word	0x000024cd
    5244:	00008241 	.word	0x00008241
    5248:	00008615 	.word	0x00008615
    524c:	000082a1 	.word	0x000082a1
    5250:	00006c81 	.word	0x00006c81
    5254:	200003c0 	.word	0x200003c0
    5258:	00003501 	.word	0x00003501
    525c:	20003084 	.word	0x20003084
    5260:	20003044 	.word	0x20003044
    5264:	20003024 	.word	0x20003024
    5268:	20003030 	.word	0x20003030
    526c:	20003078 	.word	0x20003078
    5270:	200003c4 	.word	0x200003c4
    5274:	00004ef9 	.word	0x00004ef9
    5278:	00003675 	.word	0x00003675

0000527c <MiApp_Set>:
    527c:	b530      	push	{r4, r5, lr}
    527e:	000c      	movs	r4, r1
    5280:	b083      	sub	sp, #12
    5282:	2802      	cmp	r0, #2
    5284:	d020      	beq.n	52c8 <MiApp_Set+0x4c>
    5286:	d912      	bls.n	52ae <MiApp_Set+0x32>
    5288:	2880      	cmp	r0, #128	; 0x80
    528a:	d009      	beq.n	52a0 <MiApp_Set+0x24>
    528c:	2881      	cmp	r0, #129	; 0x81
    528e:	d119      	bne.n	52c4 <MiApp_Set+0x48>
    5290:	780b      	ldrb	r3, [r1, #0]
    5292:	2001      	movs	r0, #1
    5294:	1e5a      	subs	r2, r3, #1
    5296:	4193      	sbcs	r3, r2
    5298:	4a13      	ldr	r2, [pc, #76]	; (52e8 <MiApp_Set+0x6c>)
    529a:	7013      	strb	r3, [r2, #0]
    529c:	b003      	add	sp, #12
    529e:	bd30      	pop	{r4, r5, pc}
    52a0:	780b      	ldrb	r3, [r1, #0]
    52a2:	2001      	movs	r0, #1
    52a4:	1e5a      	subs	r2, r3, #1
    52a6:	4193      	sbcs	r3, r2
    52a8:	4a10      	ldr	r2, [pc, #64]	; (52ec <MiApp_Set+0x70>)
    52aa:	7013      	strb	r3, [r2, #0]
    52ac:	e7f6      	b.n	529c <MiApp_Set+0x20>
    52ae:	2800      	cmp	r0, #0
    52b0:	d108      	bne.n	52c4 <MiApp_Set+0x48>
    52b2:	2000      	movs	r0, #0
    52b4:	4b0e      	ldr	r3, [pc, #56]	; (52f0 <MiApp_Set+0x74>)
    52b6:	4798      	blx	r3
    52b8:	2800      	cmp	r0, #0
    52ba:	d0ef      	beq.n	529c <MiApp_Set+0x20>
    52bc:	7822      	ldrb	r2, [r4, #0]
    52be:	4b0d      	ldr	r3, [pc, #52]	; (52f4 <MiApp_Set+0x78>)
    52c0:	701a      	strb	r2, [r3, #0]
    52c2:	e7eb      	b.n	529c <MiApp_Set+0x20>
    52c4:	2000      	movs	r0, #0
    52c6:	e7e9      	b.n	529c <MiApp_Set+0x20>
    52c8:	780b      	ldrb	r3, [r1, #0]
    52ca:	ad01      	add	r5, sp, #4
    52cc:	702b      	strb	r3, [r5, #0]
    52ce:	784b      	ldrb	r3, [r1, #1]
    52d0:	0028      	movs	r0, r5
    52d2:	706b      	strb	r3, [r5, #1]
    52d4:	4908      	ldr	r1, [pc, #32]	; (52f8 <MiApp_Set+0x7c>)
    52d6:	4b09      	ldr	r3, [pc, #36]	; (52fc <MiApp_Set+0x80>)
    52d8:	4798      	blx	r3
    52da:	2800      	cmp	r0, #0
    52dc:	d0de      	beq.n	529c <MiApp_Set+0x20>
    52de:	882a      	ldrh	r2, [r5, #0]
    52e0:	4b07      	ldr	r3, [pc, #28]	; (5300 <MiApp_Set+0x84>)
    52e2:	801a      	strh	r2, [r3, #0]
    52e4:	e7da      	b.n	529c <MiApp_Set+0x20>
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	200003e0 	.word	0x200003e0
    52ec:	2000008d 	.word	0x2000008d
    52f0:	000024cd 	.word	0x000024cd
    52f4:	20003050 	.word	0x20003050
    52f8:	20003070 	.word	0x20003070
    52fc:	00002495 	.word	0x00002495
    5300:	20003084 	.word	0x20003084

00005304 <MeshTasks>:
    5304:	b530      	push	{r4, r5, lr}
    5306:	4b18      	ldr	r3, [pc, #96]	; (5368 <MeshTasks+0x64>)
    5308:	b085      	sub	sp, #20
    530a:	4798      	blx	r3
    530c:	4817      	ldr	r0, [pc, #92]	; (536c <MeshTasks+0x68>)
    530e:	7a03      	ldrb	r3, [r0, #8]
    5310:	2b00      	cmp	r3, #0
    5312:	d003      	beq.n	531c <MeshTasks+0x18>
    5314:	4c16      	ldr	r4, [pc, #88]	; (5370 <MeshTasks+0x6c>)
    5316:	7823      	ldrb	r3, [r4, #0]
    5318:	2b00      	cmp	r3, #0
    531a:	d10c      	bne.n	5336 <MeshTasks+0x32>
    531c:	4b15      	ldr	r3, [pc, #84]	; (5374 <MeshTasks+0x70>)
    531e:	4798      	blx	r3
    5320:	2800      	cmp	r0, #0
    5322:	d004      	beq.n	532e <MeshTasks+0x2a>
    5324:	4b14      	ldr	r3, [pc, #80]	; (5378 <MeshTasks+0x74>)
    5326:	4815      	ldr	r0, [pc, #84]	; (537c <MeshTasks+0x78>)
    5328:	4798      	blx	r3
    532a:	4b15      	ldr	r3, [pc, #84]	; (5380 <MeshTasks+0x7c>)
    532c:	4798      	blx	r3
    532e:	4b15      	ldr	r3, [pc, #84]	; (5384 <MeshTasks+0x80>)
    5330:	4798      	blx	r3
    5332:	b005      	add	sp, #20
    5334:	bd30      	pop	{r4, r5, pc}
    5336:	2100      	movs	r1, #0
    5338:	4b13      	ldr	r3, [pc, #76]	; (5388 <MeshTasks+0x84>)
    533a:	4798      	blx	r3
    533c:	1e02      	subs	r2, r0, #0
    533e:	d0ed      	beq.n	531c <MeshTasks+0x18>
    5340:	4b12      	ldr	r3, [pc, #72]	; (538c <MeshTasks+0x88>)
    5342:	4913      	ldr	r1, [pc, #76]	; (5390 <MeshTasks+0x8c>)
    5344:	6018      	str	r0, [r3, #0]
    5346:	6943      	ldr	r3, [r0, #20]
    5348:	9102      	str	r1, [sp, #8]
    534a:	2125      	movs	r1, #37	; 0x25
    534c:	5c41      	ldrb	r1, [r0, r1]
    534e:	4d11      	ldr	r5, [pc, #68]	; (5394 <MeshTasks+0x90>)
    5350:	9101      	str	r1, [sp, #4]
    5352:	2124      	movs	r1, #36	; 0x24
    5354:	5c41      	ldrb	r1, [r0, r1]
    5356:	9100      	str	r1, [sp, #0]
    5358:	69d1      	ldr	r1, [r2, #28]
    535a:	6980      	ldr	r0, [r0, #24]
    535c:	6a12      	ldr	r2, [r2, #32]
    535e:	47a8      	blx	r5
    5360:	2300      	movs	r3, #0
    5362:	7023      	strb	r3, [r4, #0]
    5364:	e7da      	b.n	531c <MeshTasks+0x18>
    5366:	46c0      	nop			; (mov r8, r8)
    5368:	00002bb9 	.word	0x00002bb9
    536c:	20003078 	.word	0x20003078
    5370:	2000008c 	.word	0x2000008c
    5374:	000027dd 	.word	0x000027dd
    5378:	00006ee9 	.word	0x00006ee9
    537c:	2000305c 	.word	0x2000305c
    5380:	000027c1 	.word	0x000027c1
    5384:	00003695 	.word	0x00003695
    5388:	00003545 	.word	0x00003545
    538c:	20003054 	.word	0x20003054
    5390:	00004e71 	.word	0x00004e71
    5394:	00002561 	.word	0x00002561

00005398 <MiApp_SendData>:
    5398:	b5f0      	push	{r4, r5, r6, r7, lr}
    539a:	4657      	mov	r7, sl
    539c:	464e      	mov	r6, r9
    539e:	4645      	mov	r5, r8
    53a0:	46de      	mov	lr, fp
    53a2:	b5e0      	push	{r5, r6, r7, lr}
    53a4:	b083      	sub	sp, #12
    53a6:	001e      	movs	r6, r3
    53a8:	ab0c      	add	r3, sp, #48	; 0x30
    53aa:	781f      	ldrb	r7, [r3, #0]
    53ac:	ab0d      	add	r3, sp, #52	; 0x34
    53ae:	781c      	ldrb	r4, [r3, #0]
    53b0:	4b6b      	ldr	r3, [pc, #428]	; (5560 <MiApp_SendData+0x1c8>)
    53b2:	0015      	movs	r5, r2
    53b4:	781b      	ldrb	r3, [r3, #0]
    53b6:	3b06      	subs	r3, #6
    53b8:	2b01      	cmp	r3, #1
    53ba:	d907      	bls.n	53cc <MiApp_SendData+0x34>
    53bc:	2000      	movs	r0, #0
    53be:	b003      	add	sp, #12
    53c0:	bc3c      	pop	{r2, r3, r4, r5}
    53c2:	4690      	mov	r8, r2
    53c4:	4699      	mov	r9, r3
    53c6:	46a2      	mov	sl, r4
    53c8:	46ab      	mov	fp, r5
    53ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53cc:	2802      	cmp	r0, #2
    53ce:	d1f5      	bne.n	53bc <MiApp_SendData+0x24>
    53d0:	23ff      	movs	r3, #255	; 0xff
    53d2:	469a      	mov	sl, r3
    53d4:	784b      	ldrb	r3, [r1, #1]
    53d6:	780a      	ldrb	r2, [r1, #0]
    53d8:	021b      	lsls	r3, r3, #8
    53da:	431a      	orrs	r2, r3
    53dc:	4b61      	ldr	r3, [pc, #388]	; (5564 <MiApp_SendData+0x1cc>)
    53de:	308e      	adds	r0, #142	; 0x8e
    53e0:	4691      	mov	r9, r2
    53e2:	469b      	mov	fp, r3
    53e4:	4798      	blx	r3
    53e6:	4680      	mov	r8, r0
    53e8:	2800      	cmp	r0, #0
    53ea:	d0e7      	beq.n	53bc <MiApp_SendData+0x24>
    53ec:	2203      	movs	r2, #3
    53ee:	7e43      	ldrb	r3, [r0, #25]
    53f0:	2110      	movs	r1, #16
    53f2:	4393      	bics	r3, r2
    53f4:	7643      	strb	r3, [r0, #25]
    53f6:	466a      	mov	r2, sp
    53f8:	464b      	mov	r3, r9
    53fa:	80d3      	strh	r3, [r2, #6]
    53fc:	88d3      	ldrh	r3, [r2, #6]
    53fe:	4699      	mov	r9, r3
    5400:	464a      	mov	r2, r9
    5402:	8382      	strh	r2, [r0, #28]
    5404:	2201      	movs	r2, #1
    5406:	4b58      	ldr	r3, [pc, #352]	; (5568 <MiApp_SendData+0x1d0>)
    5408:	4022      	ands	r2, r4
    540a:	881b      	ldrh	r3, [r3, #0]
    540c:	0112      	lsls	r2, r2, #4
    540e:	83c3      	strh	r3, [r0, #30]
    5410:	7e43      	ldrb	r3, [r0, #25]
    5412:	438b      	bics	r3, r1
    5414:	4313      	orrs	r3, r2
    5416:	2238      	movs	r2, #56	; 0x38
    5418:	7643      	strb	r3, [r0, #25]
    541a:	5485      	strb	r5, [r0, r2]
    541c:	7487      	strb	r7, [r0, #18]
    541e:	2700      	movs	r7, #0
    5420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5422:	74c7      	strb	r7, [r0, #19]
    5424:	6082      	str	r2, [r0, #8]
    5426:	7507      	strb	r7, [r0, #20]
    5428:	002a      	movs	r2, r5
    542a:	0031      	movs	r1, r6
    542c:	3039      	adds	r0, #57	; 0x39
    542e:	4d4f      	ldr	r5, [pc, #316]	; (556c <MiApp_SendData+0x1d4>)
    5430:	47a8      	blx	r5
    5432:	4b4f      	ldr	r3, [pc, #316]	; (5570 <MiApp_SendData+0x1d8>)
    5434:	4599      	cmp	r9, r3
    5436:	d821      	bhi.n	547c <MiApp_SendData+0xe4>
    5438:	4653      	mov	r3, sl
    543a:	464a      	mov	r2, r9
    543c:	4213      	tst	r3, r2
    543e:	d031      	beq.n	54a4 <MiApp_SendData+0x10c>
    5440:	4648      	mov	r0, r9
    5442:	4652      	mov	r2, sl
    5444:	4b48      	ldr	r3, [pc, #288]	; (5568 <MiApp_SendData+0x1d0>)
    5446:	4390      	bics	r0, r2
    5448:	881b      	ldrh	r3, [r3, #0]
    544a:	4298      	cmp	r0, r3
    544c:	d043      	beq.n	54d6 <MiApp_SendData+0x13e>
    544e:	4b49      	ldr	r3, [pc, #292]	; (5574 <MiApp_SendData+0x1dc>)
    5450:	4798      	blx	r3
    5452:	4643      	mov	r3, r8
    5454:	8198      	strh	r0, [r3, #12]
    5456:	4b48      	ldr	r3, [pc, #288]	; (5578 <MiApp_SendData+0x1e0>)
    5458:	4298      	cmp	r0, r3
    545a:	d070      	beq.n	553e <MiApp_SendData+0x1a6>
    545c:	2c00      	cmp	r4, #0
    545e:	d125      	bne.n	54ac <MiApp_SendData+0x114>
    5460:	4643      	mov	r3, r8
    5462:	4641      	mov	r1, r8
    5464:	745c      	strb	r4, [r3, #17]
    5466:	4845      	ldr	r0, [pc, #276]	; (557c <MiApp_SendData+0x1e4>)
    5468:	4b45      	ldr	r3, [pc, #276]	; (5580 <MiApp_SendData+0x1e8>)
    546a:	4798      	blx	r3
    546c:	4643      	mov	r3, r8
    546e:	4a45      	ldr	r2, [pc, #276]	; (5584 <MiApp_SendData+0x1ec>)
    5470:	8999      	ldrh	r1, [r3, #12]
    5472:	4640      	mov	r0, r8
    5474:	4b44      	ldr	r3, [pc, #272]	; (5588 <MiApp_SendData+0x1f0>)
    5476:	4798      	blx	r3
    5478:	2001      	movs	r0, #1
    547a:	e7a0      	b.n	53be <MiApp_SendData+0x26>
    547c:	4643      	mov	r3, r8
    547e:	2210      	movs	r2, #16
    5480:	7e5b      	ldrb	r3, [r3, #25]
    5482:	4641      	mov	r1, r8
    5484:	4393      	bics	r3, r2
    5486:	4642      	mov	r2, r8
    5488:	483c      	ldr	r0, [pc, #240]	; (557c <MiApp_SendData+0x1e4>)
    548a:	7653      	strb	r3, [r2, #25]
    548c:	4c3c      	ldr	r4, [pc, #240]	; (5580 <MiApp_SendData+0x1e8>)
    548e:	47a0      	blx	r4
    5490:	4b39      	ldr	r3, [pc, #228]	; (5578 <MiApp_SendData+0x1e0>)
    5492:	4599      	cmp	r9, r3
    5494:	d034      	beq.n	5500 <MiApp_SendData+0x168>
    5496:	4a3b      	ldr	r2, [pc, #236]	; (5584 <MiApp_SendData+0x1ec>)
    5498:	4937      	ldr	r1, [pc, #220]	; (5578 <MiApp_SendData+0x1e0>)
    549a:	4640      	mov	r0, r8
    549c:	4b3a      	ldr	r3, [pc, #232]	; (5588 <MiApp_SendData+0x1f0>)
    549e:	4798      	blx	r3
    54a0:	2001      	movs	r0, #1
    54a2:	e78c      	b.n	53be <MiApp_SendData+0x26>
    54a4:	4648      	mov	r0, r9
    54a6:	4653      	mov	r3, sl
    54a8:	4398      	bics	r0, r3
    54aa:	e7d0      	b.n	544e <MiApp_SendData+0xb6>
    54ac:	4b37      	ldr	r3, [pc, #220]	; (558c <MiApp_SendData+0x1f4>)
    54ae:	4641      	mov	r1, r8
    54b0:	681a      	ldr	r2, [r3, #0]
    54b2:	2337      	movs	r3, #55	; 0x37
    54b4:	5cd3      	ldrb	r3, [r2, r3]
    54b6:	4836      	ldr	r0, [pc, #216]	; (5590 <MiApp_SendData+0x1f8>)
    54b8:	3301      	adds	r3, #1
    54ba:	740b      	strb	r3, [r1, #16]
    54bc:	2338      	movs	r3, #56	; 0x38
    54be:	5cd3      	ldrb	r3, [r2, r3]
    54c0:	744b      	strb	r3, [r1, #17]
    54c2:	4b2f      	ldr	r3, [pc, #188]	; (5580 <MiApp_SendData+0x1e8>)
    54c4:	4798      	blx	r3
    54c6:	4643      	mov	r3, r8
    54c8:	4a32      	ldr	r2, [pc, #200]	; (5594 <MiApp_SendData+0x1fc>)
    54ca:	8999      	ldrh	r1, [r3, #12]
    54cc:	4640      	mov	r0, r8
    54ce:	4b2e      	ldr	r3, [pc, #184]	; (5588 <MiApp_SendData+0x1f0>)
    54d0:	4798      	blx	r3
    54d2:	0020      	movs	r0, r4
    54d4:	e773      	b.n	53be <MiApp_SendData+0x26>
    54d6:	4643      	mov	r3, r8
    54d8:	464a      	mov	r2, r9
    54da:	819a      	strh	r2, [r3, #12]
    54dc:	464b      	mov	r3, r9
    54de:	061b      	lsls	r3, r3, #24
    54e0:	d4bc      	bmi.n	545c <MiApp_SendData+0xc4>
    54e2:	4b2a      	ldr	r3, [pc, #168]	; (558c <MiApp_SendData+0x1f4>)
    54e4:	4641      	mov	r1, r8
    54e6:	681a      	ldr	r2, [r3, #0]
    54e8:	2327      	movs	r3, #39	; 0x27
    54ea:	5cd3      	ldrb	r3, [r2, r3]
    54ec:	482a      	ldr	r0, [pc, #168]	; (5598 <MiApp_SendData+0x200>)
    54ee:	3301      	adds	r3, #1
    54f0:	740b      	strb	r3, [r1, #16]
    54f2:	2338      	movs	r3, #56	; 0x38
    54f4:	5cd3      	ldrb	r3, [r2, r3]
    54f6:	744b      	strb	r3, [r1, #17]
    54f8:	4b21      	ldr	r3, [pc, #132]	; (5580 <MiApp_SendData+0x1e8>)
    54fa:	4798      	blx	r3
    54fc:	2001      	movs	r0, #1
    54fe:	e75e      	b.n	53be <MiApp_SendData+0x26>
    5500:	4b26      	ldr	r3, [pc, #152]	; (559c <MiApp_SendData+0x204>)
    5502:	4798      	blx	r3
    5504:	2800      	cmp	r0, #0
    5506:	d0c6      	beq.n	5496 <MiApp_SendData+0xfe>
    5508:	4b25      	ldr	r3, [pc, #148]	; (55a0 <MiApp_SendData+0x208>)
    550a:	4798      	blx	r3
    550c:	2832      	cmp	r0, #50	; 0x32
    550e:	d9c2      	bls.n	5496 <MiApp_SendData+0xfe>
    5510:	2090      	movs	r0, #144	; 0x90
    5512:	47d8      	blx	fp
    5514:	0006      	movs	r6, r0
    5516:	42b8      	cmp	r0, r7
    5518:	d0bd      	beq.n	5496 <MiApp_SendData+0xfe>
    551a:	4641      	mov	r1, r8
    551c:	2290      	movs	r2, #144	; 0x90
    551e:	47a8      	blx	r5
    5520:	4b1a      	ldr	r3, [pc, #104]	; (558c <MiApp_SendData+0x1f4>)
    5522:	0031      	movs	r1, r6
    5524:	681a      	ldr	r2, [r3, #0]
    5526:	2327      	movs	r3, #39	; 0x27
    5528:	5cd3      	ldrb	r3, [r2, r3]
    552a:	2201      	movs	r2, #1
    552c:	3301      	adds	r3, #1
    552e:	7433      	strb	r3, [r6, #16]
    5530:	4643      	mov	r3, r8
    5532:	7477      	strb	r7, [r6, #17]
    5534:	4818      	ldr	r0, [pc, #96]	; (5598 <MiApp_SendData+0x200>)
    5536:	751a      	strb	r2, [r3, #20]
    5538:	60b7      	str	r7, [r6, #8]
    553a:	47a0      	blx	r4
    553c:	e7ab      	b.n	5496 <MiApp_SendData+0xfe>
    553e:	4b19      	ldr	r3, [pc, #100]	; (55a4 <MiApp_SendData+0x20c>)
    5540:	4648      	mov	r0, r9
    5542:	4798      	blx	r3
    5544:	4b11      	ldr	r3, [pc, #68]	; (558c <MiApp_SendData+0x1f4>)
    5546:	4818      	ldr	r0, [pc, #96]	; (55a8 <MiApp_SendData+0x210>)
    5548:	681a      	ldr	r2, [r3, #0]
    554a:	2326      	movs	r3, #38	; 0x26
    554c:	5cd3      	ldrb	r3, [r2, r3]
    554e:	4642      	mov	r2, r8
    5550:	3301      	adds	r3, #1
    5552:	7413      	strb	r3, [r2, #16]
    5554:	4641      	mov	r1, r8
    5556:	4b0a      	ldr	r3, [pc, #40]	; (5580 <MiApp_SendData+0x1e8>)
    5558:	4798      	blx	r3
    555a:	2001      	movs	r0, #1
    555c:	e72f      	b.n	53be <MiApp_SendData+0x26>
    555e:	46c0      	nop			; (mov r8, r8)
    5560:	200003c0 	.word	0x200003c0
    5564:	000033a1 	.word	0x000033a1
    5568:	20003084 	.word	0x20003084
    556c:	0000932f 	.word	0x0000932f
    5570:	0000fffc 	.word	0x0000fffc
    5574:	00008af1 	.word	0x00008af1
    5578:	0000ffff 	.word	0x0000ffff
    557c:	20003024 	.word	0x20003024
    5580:	0000350d 	.word	0x0000350d
    5584:	00004ea1 	.word	0x00004ea1
    5588:	000068b1 	.word	0x000068b1
    558c:	2000303c 	.word	0x2000303c
    5590:	20003044 	.word	0x20003044
    5594:	00005039 	.word	0x00005039
    5598:	20003030 	.word	0x20003030
    559c:	00008565 	.word	0x00008565
    55a0:	0000342d 	.word	0x0000342d
    55a4:	00008cf9 	.word	0x00008cf9
    55a8:	200030c0 	.word	0x200030c0

000055ac <MiApp_Get>:
    55ac:	2801      	cmp	r0, #1
    55ae:	d012      	beq.n	55d6 <MiApp_Get+0x2a>
    55b0:	2800      	cmp	r0, #0
    55b2:	d00b      	beq.n	55cc <MiApp_Get+0x20>
    55b4:	2802      	cmp	r0, #2
    55b6:	d107      	bne.n	55c8 <MiApp_Get+0x1c>
    55b8:	4b08      	ldr	r3, [pc, #32]	; (55dc <MiApp_Get+0x30>)
    55ba:	881a      	ldrh	r2, [r3, #0]
    55bc:	2001      	movs	r0, #1
    55be:	700a      	strb	r2, [r1, #0]
    55c0:	881b      	ldrh	r3, [r3, #0]
    55c2:	0a1b      	lsrs	r3, r3, #8
    55c4:	704b      	strb	r3, [r1, #1]
    55c6:	e000      	b.n	55ca <MiApp_Get+0x1e>
    55c8:	2000      	movs	r0, #0
    55ca:	4770      	bx	lr
    55cc:	4b04      	ldr	r3, [pc, #16]	; (55e0 <MiApp_Get+0x34>)
    55ce:	2001      	movs	r0, #1
    55d0:	781b      	ldrb	r3, [r3, #0]
    55d2:	700b      	strb	r3, [r1, #0]
    55d4:	e7f9      	b.n	55ca <MiApp_Get+0x1e>
    55d6:	4b03      	ldr	r3, [pc, #12]	; (55e4 <MiApp_Get+0x38>)
    55d8:	e7ef      	b.n	55ba <MiApp_Get+0xe>
    55da:	46c0      	nop			; (mov r8, r8)
    55dc:	20003084 	.word	0x20003084
    55e0:	20003050 	.word	0x20003050
    55e4:	20003070 	.word	0x20003070

000055e8 <bloomFilterAddressCheck>:
    55e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ea:	464e      	mov	r6, r9
    55ec:	46de      	mov	lr, fp
    55ee:	4657      	mov	r7, sl
    55f0:	4645      	mov	r5, r8
    55f2:	b5e0      	push	{r5, r6, r7, lr}
    55f4:	4bf5      	ldr	r3, [pc, #980]	; (59cc <bloomFilterAddressCheck+0x3e4>)
    55f6:	b087      	sub	sp, #28
    55f8:	781b      	ldrb	r3, [r3, #0]
    55fa:	9003      	str	r0, [sp, #12]
    55fc:	000e      	movs	r6, r1
    55fe:	9300      	str	r3, [sp, #0]
    5600:	2b00      	cmp	r3, #0
    5602:	d001      	beq.n	5608 <bloomFilterAddressCheck+0x20>
    5604:	f000 fe65 	bl	62d2 <bloomFilterAddressCheck+0xcea>
    5608:	7811      	ldrb	r1, [r2, #0]
    560a:	020b      	lsls	r3, r1, #8
    560c:	0249      	lsls	r1, r1, #9
    560e:	b209      	sxth	r1, r1
    5610:	b218      	sxth	r0, r3
    5612:	468c      	mov	ip, r1
    5614:	4680      	mov	r8, r0
    5616:	4660      	mov	r0, ip
    5618:	4644      	mov	r4, r8
    561a:	49ed      	ldr	r1, [pc, #948]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    561c:	005b      	lsls	r3, r3, #1
    561e:	4041      	eors	r1, r0
    5620:	b29b      	uxth	r3, r3
    5622:	b289      	uxth	r1, r1
    5624:	9304      	str	r3, [sp, #16]
    5626:	1c18      	adds	r0, r3, #0
    5628:	2c00      	cmp	r4, #0
    562a:	da01      	bge.n	5630 <bloomFilterAddressCheck+0x48>
    562c:	f000 fe5b 	bl	62e6 <bloomFilterAddressCheck+0xcfe>
    5630:	b284      	uxth	r4, r0
    5632:	49e7      	ldr	r1, [pc, #924]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5634:	0064      	lsls	r4, r4, #1
    5636:	4061      	eors	r1, r4
    5638:	b209      	sxth	r1, r1
    563a:	b289      	uxth	r1, r1
    563c:	0044      	lsls	r4, r0, #1
    563e:	0403      	lsls	r3, r0, #16
    5640:	d501      	bpl.n	5646 <bloomFilterAddressCheck+0x5e>
    5642:	f000 fe53 	bl	62ec <bloomFilterAddressCheck+0xd04>
    5646:	b2a0      	uxth	r0, r4
    5648:	49e1      	ldr	r1, [pc, #900]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    564a:	0040      	lsls	r0, r0, #1
    564c:	4041      	eors	r1, r0
    564e:	b289      	uxth	r1, r1
    5650:	0060      	lsls	r0, r4, #1
    5652:	0423      	lsls	r3, r4, #16
    5654:	d501      	bpl.n	565a <bloomFilterAddressCheck+0x72>
    5656:	f000 fe54 	bl	6302 <bloomFilterAddressCheck+0xd1a>
    565a:	b284      	uxth	r4, r0
    565c:	49dc      	ldr	r1, [pc, #880]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    565e:	0064      	lsls	r4, r4, #1
    5660:	4061      	eors	r1, r4
    5662:	b289      	uxth	r1, r1
    5664:	0044      	lsls	r4, r0, #1
    5666:	0403      	lsls	r3, r0, #16
    5668:	d501      	bpl.n	566e <bloomFilterAddressCheck+0x86>
    566a:	f000 fe55 	bl	6318 <bloomFilterAddressCheck+0xd30>
    566e:	b2a0      	uxth	r0, r4
    5670:	49d7      	ldr	r1, [pc, #860]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5672:	0040      	lsls	r0, r0, #1
    5674:	4041      	eors	r1, r0
    5676:	b289      	uxth	r1, r1
    5678:	0060      	lsls	r0, r4, #1
    567a:	0423      	lsls	r3, r4, #16
    567c:	d501      	bpl.n	5682 <bloomFilterAddressCheck+0x9a>
    567e:	f000 fe56 	bl	632e <bloomFilterAddressCheck+0xd46>
    5682:	b284      	uxth	r4, r0
    5684:	49d2      	ldr	r1, [pc, #840]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5686:	0064      	lsls	r4, r4, #1
    5688:	4061      	eors	r1, r4
    568a:	b289      	uxth	r1, r1
    568c:	0044      	lsls	r4, r0, #1
    568e:	0403      	lsls	r3, r0, #16
    5690:	d501      	bpl.n	5696 <bloomFilterAddressCheck+0xae>
    5692:	f000 fe57 	bl	6344 <bloomFilterAddressCheck+0xd5c>
    5696:	b2a0      	uxth	r0, r4
    5698:	49cd      	ldr	r1, [pc, #820]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    569a:	0040      	lsls	r0, r0, #1
    569c:	4041      	eors	r1, r0
    569e:	b289      	uxth	r1, r1
    56a0:	0060      	lsls	r0, r4, #1
    56a2:	0423      	lsls	r3, r4, #16
    56a4:	d501      	bpl.n	56aa <bloomFilterAddressCheck+0xc2>
    56a6:	f000 fe58 	bl	635a <bloomFilterAddressCheck+0xd72>
    56aa:	b284      	uxth	r4, r0
    56ac:	49c8      	ldr	r1, [pc, #800]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    56ae:	0064      	lsls	r4, r4, #1
    56b0:	4061      	eors	r1, r4
    56b2:	2401      	movs	r4, #1
    56b4:	5714      	ldrsb	r4, [r2, r4]
    56b6:	b289      	uxth	r1, r1
    56b8:	0224      	lsls	r4, r4, #8
    56ba:	0045      	lsls	r5, r0, #1
    56bc:	0403      	lsls	r3, r0, #16
    56be:	d501      	bpl.n	56c4 <bloomFilterAddressCheck+0xdc>
    56c0:	f000 fe4e 	bl	6360 <bloomFilterAddressCheck+0xd78>
    56c4:	4065      	eors	r5, r4
    56c6:	b22d      	sxth	r5, r5
    56c8:	b2a9      	uxth	r1, r5
    56ca:	48c1      	ldr	r0, [pc, #772]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    56cc:	0049      	lsls	r1, r1, #1
    56ce:	4048      	eors	r0, r1
    56d0:	b280      	uxth	r0, r0
    56d2:	2d00      	cmp	r5, #0
    56d4:	da01      	bge.n	56da <bloomFilterAddressCheck+0xf2>
    56d6:	f000 fe46 	bl	6366 <bloomFilterAddressCheck+0xd7e>
    56da:	48bd      	ldr	r0, [pc, #756]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    56dc:	b28d      	uxth	r5, r1
    56de:	006d      	lsls	r5, r5, #1
    56e0:	4045      	eors	r5, r0
    56e2:	b2ad      	uxth	r5, r5
    56e4:	0048      	lsls	r0, r1, #1
    56e6:	040b      	lsls	r3, r1, #16
    56e8:	d501      	bpl.n	56ee <bloomFilterAddressCheck+0x106>
    56ea:	f000 fe47 	bl	637c <bloomFilterAddressCheck+0xd94>
    56ee:	b285      	uxth	r5, r0
    56f0:	49b7      	ldr	r1, [pc, #732]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    56f2:	006d      	lsls	r5, r5, #1
    56f4:	4069      	eors	r1, r5
    56f6:	b289      	uxth	r1, r1
    56f8:	0045      	lsls	r5, r0, #1
    56fa:	0403      	lsls	r3, r0, #16
    56fc:	d501      	bpl.n	5702 <bloomFilterAddressCheck+0x11a>
    56fe:	f000 fe48 	bl	6392 <bloomFilterAddressCheck+0xdaa>
    5702:	b2a8      	uxth	r0, r5
    5704:	49b2      	ldr	r1, [pc, #712]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5706:	0040      	lsls	r0, r0, #1
    5708:	4041      	eors	r1, r0
    570a:	b289      	uxth	r1, r1
    570c:	0068      	lsls	r0, r5, #1
    570e:	042b      	lsls	r3, r5, #16
    5710:	d501      	bpl.n	5716 <bloomFilterAddressCheck+0x12e>
    5712:	f000 fe49 	bl	63a8 <bloomFilterAddressCheck+0xdc0>
    5716:	b285      	uxth	r5, r0
    5718:	49ad      	ldr	r1, [pc, #692]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    571a:	006d      	lsls	r5, r5, #1
    571c:	4069      	eors	r1, r5
    571e:	b289      	uxth	r1, r1
    5720:	0045      	lsls	r5, r0, #1
    5722:	0403      	lsls	r3, r0, #16
    5724:	d501      	bpl.n	572a <bloomFilterAddressCheck+0x142>
    5726:	f000 fe4a 	bl	63be <bloomFilterAddressCheck+0xdd6>
    572a:	b2a8      	uxth	r0, r5
    572c:	49a8      	ldr	r1, [pc, #672]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    572e:	0040      	lsls	r0, r0, #1
    5730:	4041      	eors	r1, r0
    5732:	b289      	uxth	r1, r1
    5734:	0068      	lsls	r0, r5, #1
    5736:	042b      	lsls	r3, r5, #16
    5738:	d501      	bpl.n	573e <bloomFilterAddressCheck+0x156>
    573a:	f000 fe4b 	bl	63d4 <bloomFilterAddressCheck+0xdec>
    573e:	b285      	uxth	r5, r0
    5740:	49a3      	ldr	r1, [pc, #652]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5742:	006d      	lsls	r5, r5, #1
    5744:	4069      	eors	r1, r5
    5746:	b289      	uxth	r1, r1
    5748:	0045      	lsls	r5, r0, #1
    574a:	0403      	lsls	r3, r0, #16
    574c:	d501      	bpl.n	5752 <bloomFilterAddressCheck+0x16a>
    574e:	f000 fe4c 	bl	63ea <bloomFilterAddressCheck+0xe02>
    5752:	b2a8      	uxth	r0, r5
    5754:	499e      	ldr	r1, [pc, #632]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5756:	0040      	lsls	r0, r0, #1
    5758:	4041      	eors	r1, r0
    575a:	2002      	movs	r0, #2
    575c:	5610      	ldrsb	r0, [r2, r0]
    575e:	006f      	lsls	r7, r5, #1
    5760:	b289      	uxth	r1, r1
    5762:	0200      	lsls	r0, r0, #8
    5764:	46b9      	mov	r9, r7
    5766:	042b      	lsls	r3, r5, #16
    5768:	d501      	bpl.n	576e <bloomFilterAddressCheck+0x186>
    576a:	f000 fe41 	bl	63f0 <bloomFilterAddressCheck+0xe08>
    576e:	464d      	mov	r5, r9
    5770:	4045      	eors	r5, r0
    5772:	b22d      	sxth	r5, r5
    5774:	b2a9      	uxth	r1, r5
    5776:	0049      	lsls	r1, r1, #1
    5778:	4689      	mov	r9, r1
    577a:	464f      	mov	r7, r9
    577c:	4994      	ldr	r1, [pc, #592]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    577e:	4079      	eors	r1, r7
    5780:	b289      	uxth	r1, r1
    5782:	468a      	mov	sl, r1
    5784:	4649      	mov	r1, r9
    5786:	2d00      	cmp	r5, #0
    5788:	da01      	bge.n	578e <bloomFilterAddressCheck+0x1a6>
    578a:	f000 fe34 	bl	63f6 <bloomFilterAddressCheck+0xe0e>
    578e:	b28d      	uxth	r5, r1
    5790:	006d      	lsls	r5, r5, #1
    5792:	46a9      	mov	r9, r5
    5794:	464f      	mov	r7, r9
    5796:	4d8e      	ldr	r5, [pc, #568]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5798:	407d      	eors	r5, r7
    579a:	b2ad      	uxth	r5, r5
    579c:	46a9      	mov	r9, r5
    579e:	004d      	lsls	r5, r1, #1
    57a0:	040b      	lsls	r3, r1, #16
    57a2:	d501      	bpl.n	57a8 <bloomFilterAddressCheck+0x1c0>
    57a4:	f000 fe2a 	bl	63fc <bloomFilterAddressCheck+0xe14>
    57a8:	b2a9      	uxth	r1, r5
    57aa:	0049      	lsls	r1, r1, #1
    57ac:	4689      	mov	r9, r1
    57ae:	464f      	mov	r7, r9
    57b0:	4987      	ldr	r1, [pc, #540]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    57b2:	4079      	eors	r1, r7
    57b4:	006f      	lsls	r7, r5, #1
    57b6:	b289      	uxth	r1, r1
    57b8:	46b9      	mov	r9, r7
    57ba:	042b      	lsls	r3, r5, #16
    57bc:	d501      	bpl.n	57c2 <bloomFilterAddressCheck+0x1da>
    57be:	f000 fe20 	bl	6402 <bloomFilterAddressCheck+0xe1a>
    57c2:	4649      	mov	r1, r9
    57c4:	466b      	mov	r3, sp
    57c6:	b28d      	uxth	r5, r1
    57c8:	8099      	strh	r1, [r3, #4]
    57ca:	4981      	ldr	r1, [pc, #516]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    57cc:	006d      	lsls	r5, r5, #1
    57ce:	4069      	eors	r1, r5
    57d0:	464f      	mov	r7, r9
    57d2:	464d      	mov	r5, r9
    57d4:	b289      	uxth	r1, r1
    57d6:	006d      	lsls	r5, r5, #1
    57d8:	043b      	lsls	r3, r7, #16
    57da:	d501      	bpl.n	57e0 <bloomFilterAddressCheck+0x1f8>
    57dc:	f000 fe14 	bl	6408 <bloomFilterAddressCheck+0xe20>
    57e0:	b2a9      	uxth	r1, r5
    57e2:	0049      	lsls	r1, r1, #1
    57e4:	4689      	mov	r9, r1
    57e6:	464f      	mov	r7, r9
    57e8:	4979      	ldr	r1, [pc, #484]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    57ea:	4079      	eors	r1, r7
    57ec:	006f      	lsls	r7, r5, #1
    57ee:	b289      	uxth	r1, r1
    57f0:	46b9      	mov	r9, r7
    57f2:	042b      	lsls	r3, r5, #16
    57f4:	d501      	bpl.n	57fa <bloomFilterAddressCheck+0x212>
    57f6:	f000 fe0a 	bl	640e <bloomFilterAddressCheck+0xe26>
    57fa:	4649      	mov	r1, r9
    57fc:	466b      	mov	r3, sp
    57fe:	b28d      	uxth	r5, r1
    5800:	8099      	strh	r1, [r3, #4]
    5802:	4973      	ldr	r1, [pc, #460]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5804:	006d      	lsls	r5, r5, #1
    5806:	4069      	eors	r1, r5
    5808:	464f      	mov	r7, r9
    580a:	464d      	mov	r5, r9
    580c:	b289      	uxth	r1, r1
    580e:	006d      	lsls	r5, r5, #1
    5810:	043b      	lsls	r3, r7, #16
    5812:	d501      	bpl.n	5818 <bloomFilterAddressCheck+0x230>
    5814:	f000 fdfe 	bl	6414 <bloomFilterAddressCheck+0xe2c>
    5818:	b2a9      	uxth	r1, r5
    581a:	0049      	lsls	r1, r1, #1
    581c:	4689      	mov	r9, r1
    581e:	464f      	mov	r7, r9
    5820:	496b      	ldr	r1, [pc, #428]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5822:	4079      	eors	r1, r7
    5824:	006f      	lsls	r7, r5, #1
    5826:	b289      	uxth	r1, r1
    5828:	46ba      	mov	sl, r7
    582a:	042b      	lsls	r3, r5, #16
    582c:	d501      	bpl.n	5832 <bloomFilterAddressCheck+0x24a>
    582e:	f000 fdf4 	bl	641a <bloomFilterAddressCheck+0xe32>
    5832:	4651      	mov	r1, sl
    5834:	466b      	mov	r3, sp
    5836:	b28d      	uxth	r5, r1
    5838:	8099      	strh	r1, [r3, #4]
    583a:	4965      	ldr	r1, [pc, #404]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    583c:	006d      	lsls	r5, r5, #1
    583e:	4069      	eors	r1, r5
    5840:	b289      	uxth	r1, r1
    5842:	4689      	mov	r9, r1
    5844:	2103      	movs	r1, #3
    5846:	4655      	mov	r5, sl
    5848:	4657      	mov	r7, sl
    584a:	5651      	ldrsb	r1, [r2, r1]
    584c:	006d      	lsls	r5, r5, #1
    584e:	0209      	lsls	r1, r1, #8
    5850:	043b      	lsls	r3, r7, #16
    5852:	d501      	bpl.n	5858 <bloomFilterAddressCheck+0x270>
    5854:	f000 fde4 	bl	6420 <bloomFilterAddressCheck+0xe38>
    5858:	404d      	eors	r5, r1
    585a:	b22d      	sxth	r5, r5
    585c:	466b      	mov	r3, sp
    585e:	46a9      	mov	r9, r5
    5860:	4f5b      	ldr	r7, [pc, #364]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5862:	b2ad      	uxth	r5, r5
    5864:	006d      	lsls	r5, r5, #1
    5866:	406f      	eors	r7, r5
    5868:	809f      	strh	r7, [r3, #4]
    586a:	b2bf      	uxth	r7, r7
    586c:	46ba      	mov	sl, r7
    586e:	464f      	mov	r7, r9
    5870:	2f00      	cmp	r7, #0
    5872:	da01      	bge.n	5878 <bloomFilterAddressCheck+0x290>
    5874:	f000 fdd7 	bl	6426 <bloomFilterAddressCheck+0xe3e>
    5878:	b2af      	uxth	r7, r5
    587a:	007f      	lsls	r7, r7, #1
    587c:	46ba      	mov	sl, r7
    587e:	4f54      	ldr	r7, [pc, #336]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5880:	46b9      	mov	r9, r7
    5882:	4657      	mov	r7, sl
    5884:	464b      	mov	r3, r9
    5886:	405f      	eors	r7, r3
    5888:	1c3b      	adds	r3, r7, #0
    588a:	466f      	mov	r7, sp
    588c:	80bb      	strh	r3, [r7, #4]
    588e:	88bb      	ldrh	r3, [r7, #4]
    5890:	469a      	mov	sl, r3
    5892:	006b      	lsls	r3, r5, #1
    5894:	4699      	mov	r9, r3
    5896:	042b      	lsls	r3, r5, #16
    5898:	d501      	bpl.n	589e <bloomFilterAddressCheck+0x2b6>
    589a:	f000 fdc7 	bl	642c <bloomFilterAddressCheck+0xe44>
    589e:	464b      	mov	r3, r9
    58a0:	466d      	mov	r5, sp
    58a2:	80ab      	strh	r3, [r5, #4]
    58a4:	88ad      	ldrh	r5, [r5, #4]
    58a6:	006b      	lsls	r3, r5, #1
    58a8:	4d49      	ldr	r5, [pc, #292]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    58aa:	405d      	eors	r5, r3
    58ac:	464b      	mov	r3, r9
    58ae:	005b      	lsls	r3, r3, #1
    58b0:	469a      	mov	sl, r3
    58b2:	464b      	mov	r3, r9
    58b4:	b2ad      	uxth	r5, r5
    58b6:	041b      	lsls	r3, r3, #16
    58b8:	d501      	bpl.n	58be <bloomFilterAddressCheck+0x2d6>
    58ba:	f000 fdba 	bl	6432 <bloomFilterAddressCheck+0xe4a>
    58be:	4653      	mov	r3, sl
    58c0:	466d      	mov	r5, sp
    58c2:	80ab      	strh	r3, [r5, #4]
    58c4:	88ad      	ldrh	r5, [r5, #4]
    58c6:	006b      	lsls	r3, r5, #1
    58c8:	4d41      	ldr	r5, [pc, #260]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    58ca:	405d      	eors	r5, r3
    58cc:	4653      	mov	r3, sl
    58ce:	005b      	lsls	r3, r3, #1
    58d0:	4699      	mov	r9, r3
    58d2:	4653      	mov	r3, sl
    58d4:	b2ad      	uxth	r5, r5
    58d6:	041b      	lsls	r3, r3, #16
    58d8:	d501      	bpl.n	58de <bloomFilterAddressCheck+0x2f6>
    58da:	f000 fdad 	bl	6438 <bloomFilterAddressCheck+0xe50>
    58de:	464b      	mov	r3, r9
    58e0:	466d      	mov	r5, sp
    58e2:	80ab      	strh	r3, [r5, #4]
    58e4:	88ad      	ldrh	r5, [r5, #4]
    58e6:	006b      	lsls	r3, r5, #1
    58e8:	4d39      	ldr	r5, [pc, #228]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    58ea:	405d      	eors	r5, r3
    58ec:	464b      	mov	r3, r9
    58ee:	005b      	lsls	r3, r3, #1
    58f0:	469a      	mov	sl, r3
    58f2:	464b      	mov	r3, r9
    58f4:	b2ad      	uxth	r5, r5
    58f6:	041b      	lsls	r3, r3, #16
    58f8:	d501      	bpl.n	58fe <bloomFilterAddressCheck+0x316>
    58fa:	f000 fda0 	bl	643e <bloomFilterAddressCheck+0xe56>
    58fe:	4653      	mov	r3, sl
    5900:	466d      	mov	r5, sp
    5902:	80ab      	strh	r3, [r5, #4]
    5904:	88ad      	ldrh	r5, [r5, #4]
    5906:	006b      	lsls	r3, r5, #1
    5908:	4d31      	ldr	r5, [pc, #196]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    590a:	405d      	eors	r5, r3
    590c:	4653      	mov	r3, sl
    590e:	005b      	lsls	r3, r3, #1
    5910:	4699      	mov	r9, r3
    5912:	4653      	mov	r3, sl
    5914:	b2ad      	uxth	r5, r5
    5916:	041b      	lsls	r3, r3, #16
    5918:	d501      	bpl.n	591e <bloomFilterAddressCheck+0x336>
    591a:	f000 fd93 	bl	6444 <bloomFilterAddressCheck+0xe5c>
    591e:	464b      	mov	r3, r9
    5920:	466d      	mov	r5, sp
    5922:	80ab      	strh	r3, [r5, #4]
    5924:	88ad      	ldrh	r5, [r5, #4]
    5926:	006b      	lsls	r3, r5, #1
    5928:	4d29      	ldr	r5, [pc, #164]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    592a:	405d      	eors	r5, r3
    592c:	464b      	mov	r3, r9
    592e:	005b      	lsls	r3, r3, #1
    5930:	469a      	mov	sl, r3
    5932:	464b      	mov	r3, r9
    5934:	b2ad      	uxth	r5, r5
    5936:	041b      	lsls	r3, r3, #16
    5938:	d501      	bpl.n	593e <bloomFilterAddressCheck+0x356>
    593a:	f000 fd86 	bl	644a <bloomFilterAddressCheck+0xe62>
    593e:	4653      	mov	r3, sl
    5940:	466d      	mov	r5, sp
    5942:	80ab      	strh	r3, [r5, #4]
    5944:	88ad      	ldrh	r5, [r5, #4]
    5946:	006b      	lsls	r3, r5, #1
    5948:	4d21      	ldr	r5, [pc, #132]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    594a:	405d      	eors	r5, r3
    594c:	b2ab      	uxth	r3, r5
    594e:	2504      	movs	r5, #4
    5950:	5755      	ldrsb	r5, [r2, r5]
    5952:	4699      	mov	r9, r3
    5954:	022b      	lsls	r3, r5, #8
    5956:	469b      	mov	fp, r3
    5958:	4653      	mov	r3, sl
    595a:	005d      	lsls	r5, r3, #1
    595c:	041b      	lsls	r3, r3, #16
    595e:	d501      	bpl.n	5964 <bloomFilterAddressCheck+0x37c>
    5960:	f000 fd76 	bl	6450 <bloomFilterAddressCheck+0xe68>
    5964:	465b      	mov	r3, fp
    5966:	405d      	eors	r5, r3
    5968:	b22b      	sxth	r3, r5
    596a:	466d      	mov	r5, sp
    596c:	4699      	mov	r9, r3
    596e:	80ab      	strh	r3, [r5, #4]
    5970:	4b17      	ldr	r3, [pc, #92]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5972:	88ad      	ldrh	r5, [r5, #4]
    5974:	001f      	movs	r7, r3
    5976:	006d      	lsls	r5, r5, #1
    5978:	406f      	eors	r7, r5
    597a:	1c3b      	adds	r3, r7, #0
    597c:	466f      	mov	r7, sp
    597e:	80bb      	strh	r3, [r7, #4]
    5980:	88bb      	ldrh	r3, [r7, #4]
    5982:	469a      	mov	sl, r3
    5984:	464b      	mov	r3, r9
    5986:	2b00      	cmp	r3, #0
    5988:	da01      	bge.n	598e <bloomFilterAddressCheck+0x3a6>
    598a:	f000 fd64 	bl	6456 <bloomFilterAddressCheck+0xe6e>
    598e:	b2ab      	uxth	r3, r5
    5990:	005b      	lsls	r3, r3, #1
    5992:	469a      	mov	sl, r3
    5994:	4657      	mov	r7, sl
    5996:	4b0e      	ldr	r3, [pc, #56]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    5998:	405f      	eors	r7, r3
    599a:	1c3b      	adds	r3, r7, #0
    599c:	466f      	mov	r7, sp
    599e:	80bb      	strh	r3, [r7, #4]
    59a0:	88bb      	ldrh	r3, [r7, #4]
    59a2:	469a      	mov	sl, r3
    59a4:	006b      	lsls	r3, r5, #1
    59a6:	4699      	mov	r9, r3
    59a8:	042b      	lsls	r3, r5, #16
    59aa:	d501      	bpl.n	59b0 <bloomFilterAddressCheck+0x3c8>
    59ac:	f000 fd56 	bl	645c <bloomFilterAddressCheck+0xe74>
    59b0:	464b      	mov	r3, r9
    59b2:	466d      	mov	r5, sp
    59b4:	80ab      	strh	r3, [r5, #4]
    59b6:	88ad      	ldrh	r5, [r5, #4]
    59b8:	006b      	lsls	r3, r5, #1
    59ba:	4d05      	ldr	r5, [pc, #20]	; (59d0 <bloomFilterAddressCheck+0x3e8>)
    59bc:	405d      	eors	r5, r3
    59be:	464b      	mov	r3, r9
    59c0:	005b      	lsls	r3, r3, #1
    59c2:	469a      	mov	sl, r3
    59c4:	464b      	mov	r3, r9
    59c6:	b2ad      	uxth	r5, r5
    59c8:	e004      	b.n	59d4 <bloomFilterAddressCheck+0x3ec>
    59ca:	46c0      	nop			; (mov r8, r8)
    59cc:	2000008d 	.word	0x2000008d
    59d0:	00001021 	.word	0x00001021
    59d4:	041b      	lsls	r3, r3, #16
    59d6:	d501      	bpl.n	59dc <bloomFilterAddressCheck+0x3f4>
    59d8:	f000 fd43 	bl	6462 <bloomFilterAddressCheck+0xe7a>
    59dc:	4653      	mov	r3, sl
    59de:	466d      	mov	r5, sp
    59e0:	80ab      	strh	r3, [r5, #4]
    59e2:	88ad      	ldrh	r5, [r5, #4]
    59e4:	006b      	lsls	r3, r5, #1
    59e6:	4de9      	ldr	r5, [pc, #932]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    59e8:	405d      	eors	r5, r3
    59ea:	4653      	mov	r3, sl
    59ec:	005b      	lsls	r3, r3, #1
    59ee:	4699      	mov	r9, r3
    59f0:	4653      	mov	r3, sl
    59f2:	b2ad      	uxth	r5, r5
    59f4:	041b      	lsls	r3, r3, #16
    59f6:	d501      	bpl.n	59fc <bloomFilterAddressCheck+0x414>
    59f8:	f000 fd36 	bl	6468 <bloomFilterAddressCheck+0xe80>
    59fc:	464b      	mov	r3, r9
    59fe:	466d      	mov	r5, sp
    5a00:	80ab      	strh	r3, [r5, #4]
    5a02:	88ad      	ldrh	r5, [r5, #4]
    5a04:	006b      	lsls	r3, r5, #1
    5a06:	4de1      	ldr	r5, [pc, #900]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5a08:	405d      	eors	r5, r3
    5a0a:	464b      	mov	r3, r9
    5a0c:	005b      	lsls	r3, r3, #1
    5a0e:	469a      	mov	sl, r3
    5a10:	464b      	mov	r3, r9
    5a12:	b2ad      	uxth	r5, r5
    5a14:	041b      	lsls	r3, r3, #16
    5a16:	d501      	bpl.n	5a1c <bloomFilterAddressCheck+0x434>
    5a18:	f000 fd29 	bl	646e <bloomFilterAddressCheck+0xe86>
    5a1c:	4653      	mov	r3, sl
    5a1e:	466d      	mov	r5, sp
    5a20:	80ab      	strh	r3, [r5, #4]
    5a22:	88ad      	ldrh	r5, [r5, #4]
    5a24:	006b      	lsls	r3, r5, #1
    5a26:	4dd9      	ldr	r5, [pc, #868]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5a28:	405d      	eors	r5, r3
    5a2a:	4653      	mov	r3, sl
    5a2c:	005b      	lsls	r3, r3, #1
    5a2e:	4699      	mov	r9, r3
    5a30:	4653      	mov	r3, sl
    5a32:	b2ad      	uxth	r5, r5
    5a34:	041b      	lsls	r3, r3, #16
    5a36:	d501      	bpl.n	5a3c <bloomFilterAddressCheck+0x454>
    5a38:	f000 fd1c 	bl	6474 <bloomFilterAddressCheck+0xe8c>
    5a3c:	464b      	mov	r3, r9
    5a3e:	466d      	mov	r5, sp
    5a40:	80ab      	strh	r3, [r5, #4]
    5a42:	88ad      	ldrh	r5, [r5, #4]
    5a44:	006b      	lsls	r3, r5, #1
    5a46:	4dd1      	ldr	r5, [pc, #836]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5a48:	405d      	eors	r5, r3
    5a4a:	464b      	mov	r3, r9
    5a4c:	005b      	lsls	r3, r3, #1
    5a4e:	469a      	mov	sl, r3
    5a50:	464b      	mov	r3, r9
    5a52:	b2ad      	uxth	r5, r5
    5a54:	041b      	lsls	r3, r3, #16
    5a56:	d501      	bpl.n	5a5c <bloomFilterAddressCheck+0x474>
    5a58:	f000 fd0f 	bl	647a <bloomFilterAddressCheck+0xe92>
    5a5c:	4653      	mov	r3, sl
    5a5e:	466d      	mov	r5, sp
    5a60:	80ab      	strh	r3, [r5, #4]
    5a62:	88ad      	ldrh	r5, [r5, #4]
    5a64:	006b      	lsls	r3, r5, #1
    5a66:	4dc9      	ldr	r5, [pc, #804]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5a68:	405d      	eors	r5, r3
    5a6a:	b2ab      	uxth	r3, r5
    5a6c:	2505      	movs	r5, #5
    5a6e:	5755      	ldrsb	r5, [r2, r5]
    5a70:	4699      	mov	r9, r3
    5a72:	022b      	lsls	r3, r5, #8
    5a74:	9301      	str	r3, [sp, #4]
    5a76:	4653      	mov	r3, sl
    5a78:	005d      	lsls	r5, r3, #1
    5a7a:	041b      	lsls	r3, r3, #16
    5a7c:	d501      	bpl.n	5a82 <bloomFilterAddressCheck+0x49a>
    5a7e:	f000 fcff 	bl	6480 <bloomFilterAddressCheck+0xe98>
    5a82:	9b01      	ldr	r3, [sp, #4]
    5a84:	405d      	eors	r5, r3
    5a86:	b22b      	sxth	r3, r5
    5a88:	466d      	mov	r5, sp
    5a8a:	4699      	mov	r9, r3
    5a8c:	812b      	strh	r3, [r5, #8]
    5a8e:	4bbf      	ldr	r3, [pc, #764]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5a90:	892d      	ldrh	r5, [r5, #8]
    5a92:	001f      	movs	r7, r3
    5a94:	006d      	lsls	r5, r5, #1
    5a96:	406f      	eors	r7, r5
    5a98:	1c3b      	adds	r3, r7, #0
    5a9a:	466f      	mov	r7, sp
    5a9c:	813b      	strh	r3, [r7, #8]
    5a9e:	893b      	ldrh	r3, [r7, #8]
    5aa0:	469a      	mov	sl, r3
    5aa2:	464b      	mov	r3, r9
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	da01      	bge.n	5aac <bloomFilterAddressCheck+0x4c4>
    5aa8:	f000 fced 	bl	6486 <bloomFilterAddressCheck+0xe9e>
    5aac:	b2ab      	uxth	r3, r5
    5aae:	005b      	lsls	r3, r3, #1
    5ab0:	469a      	mov	sl, r3
    5ab2:	4657      	mov	r7, sl
    5ab4:	4bb5      	ldr	r3, [pc, #724]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5ab6:	405f      	eors	r7, r3
    5ab8:	1c3b      	adds	r3, r7, #0
    5aba:	466f      	mov	r7, sp
    5abc:	813b      	strh	r3, [r7, #8]
    5abe:	893b      	ldrh	r3, [r7, #8]
    5ac0:	469a      	mov	sl, r3
    5ac2:	006b      	lsls	r3, r5, #1
    5ac4:	4699      	mov	r9, r3
    5ac6:	042b      	lsls	r3, r5, #16
    5ac8:	d501      	bpl.n	5ace <bloomFilterAddressCheck+0x4e6>
    5aca:	f000 fcdf 	bl	648c <bloomFilterAddressCheck+0xea4>
    5ace:	464b      	mov	r3, r9
    5ad0:	466d      	mov	r5, sp
    5ad2:	812b      	strh	r3, [r5, #8]
    5ad4:	892d      	ldrh	r5, [r5, #8]
    5ad6:	006b      	lsls	r3, r5, #1
    5ad8:	4dac      	ldr	r5, [pc, #688]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5ada:	405d      	eors	r5, r3
    5adc:	464b      	mov	r3, r9
    5ade:	005b      	lsls	r3, r3, #1
    5ae0:	469a      	mov	sl, r3
    5ae2:	464b      	mov	r3, r9
    5ae4:	b2ad      	uxth	r5, r5
    5ae6:	041b      	lsls	r3, r3, #16
    5ae8:	d501      	bpl.n	5aee <bloomFilterAddressCheck+0x506>
    5aea:	f000 fcd2 	bl	6492 <bloomFilterAddressCheck+0xeaa>
    5aee:	4653      	mov	r3, sl
    5af0:	466d      	mov	r5, sp
    5af2:	812b      	strh	r3, [r5, #8]
    5af4:	892d      	ldrh	r5, [r5, #8]
    5af6:	006b      	lsls	r3, r5, #1
    5af8:	4da4      	ldr	r5, [pc, #656]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5afa:	405d      	eors	r5, r3
    5afc:	4653      	mov	r3, sl
    5afe:	005b      	lsls	r3, r3, #1
    5b00:	4699      	mov	r9, r3
    5b02:	4653      	mov	r3, sl
    5b04:	b2ad      	uxth	r5, r5
    5b06:	041b      	lsls	r3, r3, #16
    5b08:	d501      	bpl.n	5b0e <bloomFilterAddressCheck+0x526>
    5b0a:	f000 fcc5 	bl	6498 <bloomFilterAddressCheck+0xeb0>
    5b0e:	464b      	mov	r3, r9
    5b10:	466d      	mov	r5, sp
    5b12:	812b      	strh	r3, [r5, #8]
    5b14:	892d      	ldrh	r5, [r5, #8]
    5b16:	006b      	lsls	r3, r5, #1
    5b18:	4d9c      	ldr	r5, [pc, #624]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5b1a:	405d      	eors	r5, r3
    5b1c:	464b      	mov	r3, r9
    5b1e:	005b      	lsls	r3, r3, #1
    5b20:	469a      	mov	sl, r3
    5b22:	464b      	mov	r3, r9
    5b24:	b2ad      	uxth	r5, r5
    5b26:	041b      	lsls	r3, r3, #16
    5b28:	d501      	bpl.n	5b2e <bloomFilterAddressCheck+0x546>
    5b2a:	f000 fcb8 	bl	649e <bloomFilterAddressCheck+0xeb6>
    5b2e:	4653      	mov	r3, sl
    5b30:	466d      	mov	r5, sp
    5b32:	812b      	strh	r3, [r5, #8]
    5b34:	892d      	ldrh	r5, [r5, #8]
    5b36:	006b      	lsls	r3, r5, #1
    5b38:	4d94      	ldr	r5, [pc, #592]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5b3a:	405d      	eors	r5, r3
    5b3c:	4653      	mov	r3, sl
    5b3e:	005b      	lsls	r3, r3, #1
    5b40:	4699      	mov	r9, r3
    5b42:	4653      	mov	r3, sl
    5b44:	b2ad      	uxth	r5, r5
    5b46:	041b      	lsls	r3, r3, #16
    5b48:	d501      	bpl.n	5b4e <bloomFilterAddressCheck+0x566>
    5b4a:	f000 fcab 	bl	64a4 <bloomFilterAddressCheck+0xebc>
    5b4e:	464b      	mov	r3, r9
    5b50:	466d      	mov	r5, sp
    5b52:	812b      	strh	r3, [r5, #8]
    5b54:	892d      	ldrh	r5, [r5, #8]
    5b56:	006b      	lsls	r3, r5, #1
    5b58:	4d8c      	ldr	r5, [pc, #560]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5b5a:	405d      	eors	r5, r3
    5b5c:	464b      	mov	r3, r9
    5b5e:	005b      	lsls	r3, r3, #1
    5b60:	469a      	mov	sl, r3
    5b62:	464b      	mov	r3, r9
    5b64:	b2ad      	uxth	r5, r5
    5b66:	041b      	lsls	r3, r3, #16
    5b68:	d501      	bpl.n	5b6e <bloomFilterAddressCheck+0x586>
    5b6a:	f000 fc9e 	bl	64aa <bloomFilterAddressCheck+0xec2>
    5b6e:	4653      	mov	r3, sl
    5b70:	466d      	mov	r5, sp
    5b72:	812b      	strh	r3, [r5, #8]
    5b74:	892d      	ldrh	r5, [r5, #8]
    5b76:	006b      	lsls	r3, r5, #1
    5b78:	4d84      	ldr	r5, [pc, #528]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5b7a:	405d      	eors	r5, r3
    5b7c:	b2ab      	uxth	r3, r5
    5b7e:	2506      	movs	r5, #6
    5b80:	5755      	ldrsb	r5, [r2, r5]
    5b82:	4699      	mov	r9, r3
    5b84:	022b      	lsls	r3, r5, #8
    5b86:	9302      	str	r3, [sp, #8]
    5b88:	4653      	mov	r3, sl
    5b8a:	005d      	lsls	r5, r3, #1
    5b8c:	041b      	lsls	r3, r3, #16
    5b8e:	d501      	bpl.n	5b94 <bloomFilterAddressCheck+0x5ac>
    5b90:	f000 fc8e 	bl	64b0 <bloomFilterAddressCheck+0xec8>
    5b94:	9b02      	ldr	r3, [sp, #8]
    5b96:	405d      	eors	r5, r3
    5b98:	b22b      	sxth	r3, r5
    5b9a:	466d      	mov	r5, sp
    5b9c:	4699      	mov	r9, r3
    5b9e:	82ab      	strh	r3, [r5, #20]
    5ba0:	4b7a      	ldr	r3, [pc, #488]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5ba2:	8aad      	ldrh	r5, [r5, #20]
    5ba4:	001f      	movs	r7, r3
    5ba6:	006d      	lsls	r5, r5, #1
    5ba8:	406f      	eors	r7, r5
    5baa:	1c3b      	adds	r3, r7, #0
    5bac:	466f      	mov	r7, sp
    5bae:	82bb      	strh	r3, [r7, #20]
    5bb0:	8abb      	ldrh	r3, [r7, #20]
    5bb2:	469a      	mov	sl, r3
    5bb4:	464b      	mov	r3, r9
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	da01      	bge.n	5bbe <bloomFilterAddressCheck+0x5d6>
    5bba:	f000 fc7c 	bl	64b6 <bloomFilterAddressCheck+0xece>
    5bbe:	b2ab      	uxth	r3, r5
    5bc0:	005b      	lsls	r3, r3, #1
    5bc2:	469a      	mov	sl, r3
    5bc4:	4657      	mov	r7, sl
    5bc6:	4b71      	ldr	r3, [pc, #452]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5bc8:	405f      	eors	r7, r3
    5bca:	1c3b      	adds	r3, r7, #0
    5bcc:	466f      	mov	r7, sp
    5bce:	82bb      	strh	r3, [r7, #20]
    5bd0:	8abb      	ldrh	r3, [r7, #20]
    5bd2:	4699      	mov	r9, r3
    5bd4:	006b      	lsls	r3, r5, #1
    5bd6:	469a      	mov	sl, r3
    5bd8:	042b      	lsls	r3, r5, #16
    5bda:	d501      	bpl.n	5be0 <bloomFilterAddressCheck+0x5f8>
    5bdc:	f000 fc6e 	bl	64bc <bloomFilterAddressCheck+0xed4>
    5be0:	4653      	mov	r3, sl
    5be2:	466d      	mov	r5, sp
    5be4:	82ab      	strh	r3, [r5, #20]
    5be6:	8aad      	ldrh	r5, [r5, #20]
    5be8:	006b      	lsls	r3, r5, #1
    5bea:	4d68      	ldr	r5, [pc, #416]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5bec:	405d      	eors	r5, r3
    5bee:	4653      	mov	r3, sl
    5bf0:	005b      	lsls	r3, r3, #1
    5bf2:	4699      	mov	r9, r3
    5bf4:	4653      	mov	r3, sl
    5bf6:	b2ad      	uxth	r5, r5
    5bf8:	041b      	lsls	r3, r3, #16
    5bfa:	d501      	bpl.n	5c00 <bloomFilterAddressCheck+0x618>
    5bfc:	f000 fc61 	bl	64c2 <bloomFilterAddressCheck+0xeda>
    5c00:	464b      	mov	r3, r9
    5c02:	466d      	mov	r5, sp
    5c04:	82ab      	strh	r3, [r5, #20]
    5c06:	8aad      	ldrh	r5, [r5, #20]
    5c08:	006b      	lsls	r3, r5, #1
    5c0a:	4d60      	ldr	r5, [pc, #384]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5c0c:	405d      	eors	r5, r3
    5c0e:	464b      	mov	r3, r9
    5c10:	005b      	lsls	r3, r3, #1
    5c12:	469a      	mov	sl, r3
    5c14:	464b      	mov	r3, r9
    5c16:	b2ad      	uxth	r5, r5
    5c18:	041b      	lsls	r3, r3, #16
    5c1a:	d501      	bpl.n	5c20 <bloomFilterAddressCheck+0x638>
    5c1c:	f000 fc54 	bl	64c8 <bloomFilterAddressCheck+0xee0>
    5c20:	4653      	mov	r3, sl
    5c22:	466d      	mov	r5, sp
    5c24:	82ab      	strh	r3, [r5, #20]
    5c26:	8aad      	ldrh	r5, [r5, #20]
    5c28:	006b      	lsls	r3, r5, #1
    5c2a:	4d58      	ldr	r5, [pc, #352]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5c2c:	405d      	eors	r5, r3
    5c2e:	4653      	mov	r3, sl
    5c30:	005b      	lsls	r3, r3, #1
    5c32:	4699      	mov	r9, r3
    5c34:	4653      	mov	r3, sl
    5c36:	b2ad      	uxth	r5, r5
    5c38:	041b      	lsls	r3, r3, #16
    5c3a:	d501      	bpl.n	5c40 <bloomFilterAddressCheck+0x658>
    5c3c:	f000 fc47 	bl	64ce <bloomFilterAddressCheck+0xee6>
    5c40:	464b      	mov	r3, r9
    5c42:	466d      	mov	r5, sp
    5c44:	82ab      	strh	r3, [r5, #20]
    5c46:	8aad      	ldrh	r5, [r5, #20]
    5c48:	006b      	lsls	r3, r5, #1
    5c4a:	4d50      	ldr	r5, [pc, #320]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5c4c:	405d      	eors	r5, r3
    5c4e:	464b      	mov	r3, r9
    5c50:	005b      	lsls	r3, r3, #1
    5c52:	469a      	mov	sl, r3
    5c54:	464b      	mov	r3, r9
    5c56:	b2ad      	uxth	r5, r5
    5c58:	041b      	lsls	r3, r3, #16
    5c5a:	d501      	bpl.n	5c60 <bloomFilterAddressCheck+0x678>
    5c5c:	f000 fc3a 	bl	64d4 <bloomFilterAddressCheck+0xeec>
    5c60:	4653      	mov	r3, sl
    5c62:	466d      	mov	r5, sp
    5c64:	82ab      	strh	r3, [r5, #20]
    5c66:	8aad      	ldrh	r5, [r5, #20]
    5c68:	006b      	lsls	r3, r5, #1
    5c6a:	4d48      	ldr	r5, [pc, #288]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5c6c:	405d      	eors	r5, r3
    5c6e:	4653      	mov	r3, sl
    5c70:	005b      	lsls	r3, r3, #1
    5c72:	4699      	mov	r9, r3
    5c74:	4653      	mov	r3, sl
    5c76:	b2ad      	uxth	r5, r5
    5c78:	041b      	lsls	r3, r3, #16
    5c7a:	d501      	bpl.n	5c80 <bloomFilterAddressCheck+0x698>
    5c7c:	f000 fc2d 	bl	64da <bloomFilterAddressCheck+0xef2>
    5c80:	464b      	mov	r3, r9
    5c82:	466d      	mov	r5, sp
    5c84:	82ab      	strh	r3, [r5, #20]
    5c86:	8aad      	ldrh	r5, [r5, #20]
    5c88:	79d2      	ldrb	r2, [r2, #7]
    5c8a:	006b      	lsls	r3, r5, #1
    5c8c:	4d3f      	ldr	r5, [pc, #252]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5c8e:	b252      	sxtb	r2, r2
    5c90:	405d      	eors	r5, r3
    5c92:	0213      	lsls	r3, r2, #8
    5c94:	469a      	mov	sl, r3
    5c96:	464b      	mov	r3, r9
    5c98:	b2ad      	uxth	r5, r5
    5c9a:	005a      	lsls	r2, r3, #1
    5c9c:	041b      	lsls	r3, r3, #16
    5c9e:	d501      	bpl.n	5ca4 <bloomFilterAddressCheck+0x6bc>
    5ca0:	f000 fc1e 	bl	64e0 <bloomFilterAddressCheck+0xef8>
    5ca4:	4653      	mov	r3, sl
    5ca6:	405a      	eors	r2, r3
    5ca8:	4b38      	ldr	r3, [pc, #224]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5caa:	b212      	sxth	r2, r2
    5cac:	001f      	movs	r7, r3
    5cae:	b295      	uxth	r5, r2
    5cb0:	006d      	lsls	r5, r5, #1
    5cb2:	406f      	eors	r7, r5
    5cb4:	1c3b      	adds	r3, r7, #0
    5cb6:	466f      	mov	r7, sp
    5cb8:	82bb      	strh	r3, [r7, #20]
    5cba:	8abb      	ldrh	r3, [r7, #20]
    5cbc:	b2ad      	uxth	r5, r5
    5cbe:	2a00      	cmp	r2, #0
    5cc0:	da00      	bge.n	5cc4 <bloomFilterAddressCheck+0x6dc>
    5cc2:	e30e      	b.n	62e2 <bloomFilterAddressCheck+0xcfa>
    5cc4:	1c2a      	adds	r2, r5, #0
    5cc6:	466f      	mov	r7, sp
    5cc8:	b295      	uxth	r5, r2
    5cca:	006b      	lsls	r3, r5, #1
    5ccc:	4d2f      	ldr	r5, [pc, #188]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5cce:	405d      	eors	r5, r3
    5cd0:	0053      	lsls	r3, r2, #1
    5cd2:	82bb      	strh	r3, [r7, #20]
    5cd4:	8abb      	ldrh	r3, [r7, #20]
    5cd6:	b2ad      	uxth	r5, r5
    5cd8:	4699      	mov	r9, r3
    5cda:	0413      	lsls	r3, r2, #16
    5cdc:	d501      	bpl.n	5ce2 <bloomFilterAddressCheck+0x6fa>
    5cde:	f000 fcb4 	bl	664a <bloomFilterAddressCheck+0x1062>
    5ce2:	464a      	mov	r2, r9
    5ce4:	466f      	mov	r7, sp
    5ce6:	b295      	uxth	r5, r2
    5ce8:	006b      	lsls	r3, r5, #1
    5cea:	4d28      	ldr	r5, [pc, #160]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5cec:	405d      	eors	r5, r3
    5cee:	0053      	lsls	r3, r2, #1
    5cf0:	82bb      	strh	r3, [r7, #20]
    5cf2:	8abb      	ldrh	r3, [r7, #20]
    5cf4:	b2ad      	uxth	r5, r5
    5cf6:	4699      	mov	r9, r3
    5cf8:	0413      	lsls	r3, r2, #16
    5cfa:	d400      	bmi.n	5cfe <bloomFilterAddressCheck+0x716>
    5cfc:	464d      	mov	r5, r9
    5cfe:	466f      	mov	r7, sp
    5d00:	b2aa      	uxth	r2, r5
    5d02:	0053      	lsls	r3, r2, #1
    5d04:	4a21      	ldr	r2, [pc, #132]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5d06:	405a      	eors	r2, r3
    5d08:	006b      	lsls	r3, r5, #1
    5d0a:	82bb      	strh	r3, [r7, #20]
    5d0c:	8abb      	ldrh	r3, [r7, #20]
    5d0e:	b292      	uxth	r2, r2
    5d10:	4699      	mov	r9, r3
    5d12:	042b      	lsls	r3, r5, #16
    5d14:	d400      	bmi.n	5d18 <bloomFilterAddressCheck+0x730>
    5d16:	464a      	mov	r2, r9
    5d18:	466f      	mov	r7, sp
    5d1a:	b295      	uxth	r5, r2
    5d1c:	006b      	lsls	r3, r5, #1
    5d1e:	4d1b      	ldr	r5, [pc, #108]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5d20:	405d      	eors	r5, r3
    5d22:	0053      	lsls	r3, r2, #1
    5d24:	82bb      	strh	r3, [r7, #20]
    5d26:	8abb      	ldrh	r3, [r7, #20]
    5d28:	b2ad      	uxth	r5, r5
    5d2a:	4699      	mov	r9, r3
    5d2c:	0413      	lsls	r3, r2, #16
    5d2e:	d400      	bmi.n	5d32 <bloomFilterAddressCheck+0x74a>
    5d30:	464d      	mov	r5, r9
    5d32:	466f      	mov	r7, sp
    5d34:	b2aa      	uxth	r2, r5
    5d36:	0053      	lsls	r3, r2, #1
    5d38:	4a14      	ldr	r2, [pc, #80]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5d3a:	405a      	eors	r2, r3
    5d3c:	006b      	lsls	r3, r5, #1
    5d3e:	82bb      	strh	r3, [r7, #20]
    5d40:	8abb      	ldrh	r3, [r7, #20]
    5d42:	b292      	uxth	r2, r2
    5d44:	4699      	mov	r9, r3
    5d46:	042b      	lsls	r3, r5, #16
    5d48:	d400      	bmi.n	5d4c <bloomFilterAddressCheck+0x764>
    5d4a:	464a      	mov	r2, r9
    5d4c:	b295      	uxth	r5, r2
    5d4e:	006b      	lsls	r3, r5, #1
    5d50:	4d0e      	ldr	r5, [pc, #56]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5d52:	405d      	eors	r5, r3
    5d54:	b2ab      	uxth	r3, r5
    5d56:	0055      	lsls	r5, r2, #1
    5d58:	4699      	mov	r9, r3
    5d5a:	b2ad      	uxth	r5, r5
    5d5c:	0413      	lsls	r3, r2, #16
    5d5e:	d501      	bpl.n	5d64 <bloomFilterAddressCheck+0x77c>
    5d60:	f000 fc70 	bl	6644 <bloomFilterAddressCheck+0x105c>
    5d64:	1c2a      	adds	r2, r5, #0
    5d66:	b295      	uxth	r5, r2
    5d68:	b213      	sxth	r3, r2
    5d6a:	001f      	movs	r7, r3
    5d6c:	006b      	lsls	r3, r5, #1
    5d6e:	4d07      	ldr	r5, [pc, #28]	; (5d8c <bloomFilterAddressCheck+0x7a4>)
    5d70:	0052      	lsls	r2, r2, #1
    5d72:	405d      	eors	r5, r3
    5d74:	b2ab      	uxth	r3, r5
    5d76:	9305      	str	r3, [sp, #20]
    5d78:	b293      	uxth	r3, r2
    5d7a:	4699      	mov	r9, r3
    5d7c:	4663      	mov	r3, ip
    5d7e:	4a04      	ldr	r2, [pc, #16]	; (5d90 <bloomFilterAddressCheck+0x7a8>)
    5d80:	4645      	mov	r5, r8
    5d82:	405a      	eors	r2, r3
    5d84:	466b      	mov	r3, sp
    5d86:	b292      	uxth	r2, r2
    5d88:	8a1b      	ldrh	r3, [r3, #16]
    5d8a:	e003      	b.n	5d94 <bloomFilterAddressCheck+0x7ac>
    5d8c:	00001021 	.word	0x00001021
    5d90:	ffff8005 	.word	0xffff8005
    5d94:	2d00      	cmp	r5, #0
    5d96:	da01      	bge.n	5d9c <bloomFilterAddressCheck+0x7b4>
    5d98:	f000 fc51 	bl	663e <bloomFilterAddressCheck+0x1056>
    5d9c:	b29d      	uxth	r5, r3
    5d9e:	4ae9      	ldr	r2, [pc, #932]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5da0:	006d      	lsls	r5, r5, #1
    5da2:	406a      	eors	r2, r5
    5da4:	b212      	sxth	r2, r2
    5da6:	b295      	uxth	r5, r2
    5da8:	005a      	lsls	r2, r3, #1
    5daa:	b292      	uxth	r2, r2
    5dac:	041b      	lsls	r3, r3, #16
    5dae:	d501      	bpl.n	5db4 <bloomFilterAddressCheck+0x7cc>
    5db0:	f000 fc42 	bl	6638 <bloomFilterAddressCheck+0x1050>
    5db4:	4be3      	ldr	r3, [pc, #908]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5db6:	b295      	uxth	r5, r2
    5db8:	006d      	lsls	r5, r5, #1
    5dba:	405d      	eors	r5, r3
    5dbc:	0053      	lsls	r3, r2, #1
    5dbe:	b2ad      	uxth	r5, r5
    5dc0:	b29b      	uxth	r3, r3
    5dc2:	0412      	lsls	r2, r2, #16
    5dc4:	d501      	bpl.n	5dca <bloomFilterAddressCheck+0x7e2>
    5dc6:	f000 fc34 	bl	6632 <bloomFilterAddressCheck+0x104a>
    5dca:	4ade      	ldr	r2, [pc, #888]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5dcc:	b29d      	uxth	r5, r3
    5dce:	006d      	lsls	r5, r5, #1
    5dd0:	4055      	eors	r5, r2
    5dd2:	005a      	lsls	r2, r3, #1
    5dd4:	b2ad      	uxth	r5, r5
    5dd6:	b292      	uxth	r2, r2
    5dd8:	041b      	lsls	r3, r3, #16
    5dda:	d501      	bpl.n	5de0 <bloomFilterAddressCheck+0x7f8>
    5ddc:	f000 fc26 	bl	662c <bloomFilterAddressCheck+0x1044>
    5de0:	4bd8      	ldr	r3, [pc, #864]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5de2:	b295      	uxth	r5, r2
    5de4:	006d      	lsls	r5, r5, #1
    5de6:	405d      	eors	r5, r3
    5de8:	0053      	lsls	r3, r2, #1
    5dea:	b2ad      	uxth	r5, r5
    5dec:	b29b      	uxth	r3, r3
    5dee:	0412      	lsls	r2, r2, #16
    5df0:	d501      	bpl.n	5df6 <bloomFilterAddressCheck+0x80e>
    5df2:	f000 fc18 	bl	6626 <bloomFilterAddressCheck+0x103e>
    5df6:	4ad3      	ldr	r2, [pc, #844]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5df8:	b29d      	uxth	r5, r3
    5dfa:	006d      	lsls	r5, r5, #1
    5dfc:	4055      	eors	r5, r2
    5dfe:	005a      	lsls	r2, r3, #1
    5e00:	b2ad      	uxth	r5, r5
    5e02:	b292      	uxth	r2, r2
    5e04:	041b      	lsls	r3, r3, #16
    5e06:	d501      	bpl.n	5e0c <bloomFilterAddressCheck+0x824>
    5e08:	f000 fc0a 	bl	6620 <bloomFilterAddressCheck+0x1038>
    5e0c:	4bcd      	ldr	r3, [pc, #820]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5e0e:	b295      	uxth	r5, r2
    5e10:	006d      	lsls	r5, r5, #1
    5e12:	405d      	eors	r5, r3
    5e14:	0053      	lsls	r3, r2, #1
    5e16:	b2ad      	uxth	r5, r5
    5e18:	b29b      	uxth	r3, r3
    5e1a:	0412      	lsls	r2, r2, #16
    5e1c:	d500      	bpl.n	5e20 <bloomFilterAddressCheck+0x838>
    5e1e:	e3c1      	b.n	65a4 <bloomFilterAddressCheck+0xfbc>
    5e20:	b29a      	uxth	r2, r3
    5e22:	4dc8      	ldr	r5, [pc, #800]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5e24:	0052      	lsls	r2, r2, #1
    5e26:	4055      	eors	r5, r2
    5e28:	005a      	lsls	r2, r3, #1
    5e2a:	b2ad      	uxth	r5, r5
    5e2c:	b292      	uxth	r2, r2
    5e2e:	041b      	lsls	r3, r3, #16
    5e30:	d500      	bpl.n	5e34 <bloomFilterAddressCheck+0x84c>
    5e32:	e3b5      	b.n	65a0 <bloomFilterAddressCheck+0xfb8>
    5e34:	4054      	eors	r4, r2
    5e36:	b224      	sxth	r4, r4
    5e38:	b2a2      	uxth	r2, r4
    5e3a:	4bc2      	ldr	r3, [pc, #776]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5e3c:	0052      	lsls	r2, r2, #1
    5e3e:	4053      	eors	r3, r2
    5e40:	b29d      	uxth	r5, r3
    5e42:	b293      	uxth	r3, r2
    5e44:	2c00      	cmp	r4, #0
    5e46:	da00      	bge.n	5e4a <bloomFilterAddressCheck+0x862>
    5e48:	e3a8      	b.n	659c <bloomFilterAddressCheck+0xfb4>
    5e4a:	4abe      	ldr	r2, [pc, #760]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5e4c:	b29c      	uxth	r4, r3
    5e4e:	0064      	lsls	r4, r4, #1
    5e50:	4054      	eors	r4, r2
    5e52:	005a      	lsls	r2, r3, #1
    5e54:	b2a4      	uxth	r4, r4
    5e56:	b292      	uxth	r2, r2
    5e58:	041b      	lsls	r3, r3, #16
    5e5a:	d500      	bpl.n	5e5e <bloomFilterAddressCheck+0x876>
    5e5c:	e39c      	b.n	6598 <bloomFilterAddressCheck+0xfb0>
    5e5e:	4bb9      	ldr	r3, [pc, #740]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5e60:	b294      	uxth	r4, r2
    5e62:	0064      	lsls	r4, r4, #1
    5e64:	405c      	eors	r4, r3
    5e66:	0053      	lsls	r3, r2, #1
    5e68:	b2a4      	uxth	r4, r4
    5e6a:	b29b      	uxth	r3, r3
    5e6c:	0412      	lsls	r2, r2, #16
    5e6e:	d500      	bpl.n	5e72 <bloomFilterAddressCheck+0x88a>
    5e70:	e390      	b.n	6594 <bloomFilterAddressCheck+0xfac>
    5e72:	4ab4      	ldr	r2, [pc, #720]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5e74:	b29c      	uxth	r4, r3
    5e76:	0064      	lsls	r4, r4, #1
    5e78:	4054      	eors	r4, r2
    5e7a:	005a      	lsls	r2, r3, #1
    5e7c:	b2a4      	uxth	r4, r4
    5e7e:	b292      	uxth	r2, r2
    5e80:	041b      	lsls	r3, r3, #16
    5e82:	d500      	bpl.n	5e86 <bloomFilterAddressCheck+0x89e>
    5e84:	e384      	b.n	6590 <bloomFilterAddressCheck+0xfa8>
    5e86:	4baf      	ldr	r3, [pc, #700]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5e88:	b294      	uxth	r4, r2
    5e8a:	0064      	lsls	r4, r4, #1
    5e8c:	405c      	eors	r4, r3
    5e8e:	0053      	lsls	r3, r2, #1
    5e90:	b2a4      	uxth	r4, r4
    5e92:	b29b      	uxth	r3, r3
    5e94:	0412      	lsls	r2, r2, #16
    5e96:	d500      	bpl.n	5e9a <bloomFilterAddressCheck+0x8b2>
    5e98:	e378      	b.n	658c <bloomFilterAddressCheck+0xfa4>
    5e9a:	4aaa      	ldr	r2, [pc, #680]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5e9c:	b29c      	uxth	r4, r3
    5e9e:	0064      	lsls	r4, r4, #1
    5ea0:	4054      	eors	r4, r2
    5ea2:	005a      	lsls	r2, r3, #1
    5ea4:	b2a4      	uxth	r4, r4
    5ea6:	b292      	uxth	r2, r2
    5ea8:	041b      	lsls	r3, r3, #16
    5eaa:	d500      	bpl.n	5eae <bloomFilterAddressCheck+0x8c6>
    5eac:	e36c      	b.n	6588 <bloomFilterAddressCheck+0xfa0>
    5eae:	4ba5      	ldr	r3, [pc, #660]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5eb0:	b294      	uxth	r4, r2
    5eb2:	0064      	lsls	r4, r4, #1
    5eb4:	405c      	eors	r4, r3
    5eb6:	0053      	lsls	r3, r2, #1
    5eb8:	b2a4      	uxth	r4, r4
    5eba:	b29b      	uxth	r3, r3
    5ebc:	0412      	lsls	r2, r2, #16
    5ebe:	d500      	bpl.n	5ec2 <bloomFilterAddressCheck+0x8da>
    5ec0:	e360      	b.n	6584 <bloomFilterAddressCheck+0xf9c>
    5ec2:	b29a      	uxth	r2, r3
    5ec4:	4c9f      	ldr	r4, [pc, #636]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5ec6:	0052      	lsls	r2, r2, #1
    5ec8:	4054      	eors	r4, r2
    5eca:	005a      	lsls	r2, r3, #1
    5ecc:	b2a4      	uxth	r4, r4
    5ece:	b292      	uxth	r2, r2
    5ed0:	041b      	lsls	r3, r3, #16
    5ed2:	d500      	bpl.n	5ed6 <bloomFilterAddressCheck+0x8ee>
    5ed4:	e354      	b.n	6580 <bloomFilterAddressCheck+0xf98>
    5ed6:	4050      	eors	r0, r2
    5ed8:	b200      	sxth	r0, r0
    5eda:	b282      	uxth	r2, r0
    5edc:	4b99      	ldr	r3, [pc, #612]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5ede:	0052      	lsls	r2, r2, #1
    5ee0:	4053      	eors	r3, r2
    5ee2:	b29c      	uxth	r4, r3
    5ee4:	b293      	uxth	r3, r2
    5ee6:	2800      	cmp	r0, #0
    5ee8:	da00      	bge.n	5eec <bloomFilterAddressCheck+0x904>
    5eea:	e347      	b.n	657c <bloomFilterAddressCheck+0xf94>
    5eec:	4a95      	ldr	r2, [pc, #596]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5eee:	b298      	uxth	r0, r3
    5ef0:	0040      	lsls	r0, r0, #1
    5ef2:	4050      	eors	r0, r2
    5ef4:	005a      	lsls	r2, r3, #1
    5ef6:	b280      	uxth	r0, r0
    5ef8:	b292      	uxth	r2, r2
    5efa:	041b      	lsls	r3, r3, #16
    5efc:	d500      	bpl.n	5f00 <bloomFilterAddressCheck+0x918>
    5efe:	e33b      	b.n	6578 <bloomFilterAddressCheck+0xf90>
    5f00:	4b90      	ldr	r3, [pc, #576]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5f02:	b290      	uxth	r0, r2
    5f04:	0040      	lsls	r0, r0, #1
    5f06:	4058      	eors	r0, r3
    5f08:	0053      	lsls	r3, r2, #1
    5f0a:	b280      	uxth	r0, r0
    5f0c:	b29b      	uxth	r3, r3
    5f0e:	0412      	lsls	r2, r2, #16
    5f10:	d500      	bpl.n	5f14 <bloomFilterAddressCheck+0x92c>
    5f12:	e32f      	b.n	6574 <bloomFilterAddressCheck+0xf8c>
    5f14:	4a8b      	ldr	r2, [pc, #556]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5f16:	b298      	uxth	r0, r3
    5f18:	0040      	lsls	r0, r0, #1
    5f1a:	4050      	eors	r0, r2
    5f1c:	005a      	lsls	r2, r3, #1
    5f1e:	b280      	uxth	r0, r0
    5f20:	b292      	uxth	r2, r2
    5f22:	041b      	lsls	r3, r3, #16
    5f24:	d500      	bpl.n	5f28 <bloomFilterAddressCheck+0x940>
    5f26:	e323      	b.n	6570 <bloomFilterAddressCheck+0xf88>
    5f28:	4b86      	ldr	r3, [pc, #536]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5f2a:	b290      	uxth	r0, r2
    5f2c:	0040      	lsls	r0, r0, #1
    5f2e:	4058      	eors	r0, r3
    5f30:	0053      	lsls	r3, r2, #1
    5f32:	b280      	uxth	r0, r0
    5f34:	b29b      	uxth	r3, r3
    5f36:	0412      	lsls	r2, r2, #16
    5f38:	d500      	bpl.n	5f3c <bloomFilterAddressCheck+0x954>
    5f3a:	e317      	b.n	656c <bloomFilterAddressCheck+0xf84>
    5f3c:	4a81      	ldr	r2, [pc, #516]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5f3e:	b298      	uxth	r0, r3
    5f40:	0040      	lsls	r0, r0, #1
    5f42:	4050      	eors	r0, r2
    5f44:	005a      	lsls	r2, r3, #1
    5f46:	b280      	uxth	r0, r0
    5f48:	b292      	uxth	r2, r2
    5f4a:	041b      	lsls	r3, r3, #16
    5f4c:	d500      	bpl.n	5f50 <bloomFilterAddressCheck+0x968>
    5f4e:	e30b      	b.n	6568 <bloomFilterAddressCheck+0xf80>
    5f50:	4b7c      	ldr	r3, [pc, #496]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5f52:	b290      	uxth	r0, r2
    5f54:	0040      	lsls	r0, r0, #1
    5f56:	4058      	eors	r0, r3
    5f58:	0053      	lsls	r3, r2, #1
    5f5a:	b280      	uxth	r0, r0
    5f5c:	b29b      	uxth	r3, r3
    5f5e:	0412      	lsls	r2, r2, #16
    5f60:	d500      	bpl.n	5f64 <bloomFilterAddressCheck+0x97c>
    5f62:	e2ff      	b.n	6564 <bloomFilterAddressCheck+0xf7c>
    5f64:	b29a      	uxth	r2, r3
    5f66:	4877      	ldr	r0, [pc, #476]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5f68:	0052      	lsls	r2, r2, #1
    5f6a:	4050      	eors	r0, r2
    5f6c:	005a      	lsls	r2, r3, #1
    5f6e:	b280      	uxth	r0, r0
    5f70:	b292      	uxth	r2, r2
    5f72:	041b      	lsls	r3, r3, #16
    5f74:	d500      	bpl.n	5f78 <bloomFilterAddressCheck+0x990>
    5f76:	e2f3      	b.n	6560 <bloomFilterAddressCheck+0xf78>
    5f78:	4051      	eors	r1, r2
    5f7a:	b209      	sxth	r1, r1
    5f7c:	b28b      	uxth	r3, r1
    5f7e:	4a71      	ldr	r2, [pc, #452]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5f80:	005b      	lsls	r3, r3, #1
    5f82:	405a      	eors	r2, r3
    5f84:	b292      	uxth	r2, r2
    5f86:	2900      	cmp	r1, #0
    5f88:	da00      	bge.n	5f8c <bloomFilterAddressCheck+0x9a4>
    5f8a:	e2e7      	b.n	655c <bloomFilterAddressCheck+0xf74>
    5f8c:	4a6d      	ldr	r2, [pc, #436]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5f8e:	b299      	uxth	r1, r3
    5f90:	0049      	lsls	r1, r1, #1
    5f92:	4051      	eors	r1, r2
    5f94:	b289      	uxth	r1, r1
    5f96:	005a      	lsls	r2, r3, #1
    5f98:	041b      	lsls	r3, r3, #16
    5f9a:	d500      	bpl.n	5f9e <bloomFilterAddressCheck+0x9b6>
    5f9c:	e2dc      	b.n	6558 <bloomFilterAddressCheck+0xf70>
    5f9e:	b291      	uxth	r1, r2
    5fa0:	4b68      	ldr	r3, [pc, #416]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5fa2:	0049      	lsls	r1, r1, #1
    5fa4:	404b      	eors	r3, r1
    5fa6:	b29b      	uxth	r3, r3
    5fa8:	0051      	lsls	r1, r2, #1
    5faa:	0412      	lsls	r2, r2, #16
    5fac:	d500      	bpl.n	5fb0 <bloomFilterAddressCheck+0x9c8>
    5fae:	e2d1      	b.n	6554 <bloomFilterAddressCheck+0xf6c>
    5fb0:	b28a      	uxth	r2, r1
    5fb2:	4b64      	ldr	r3, [pc, #400]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5fb4:	0052      	lsls	r2, r2, #1
    5fb6:	4053      	eors	r3, r2
    5fb8:	b29b      	uxth	r3, r3
    5fba:	004a      	lsls	r2, r1, #1
    5fbc:	0409      	lsls	r1, r1, #16
    5fbe:	d500      	bpl.n	5fc2 <bloomFilterAddressCheck+0x9da>
    5fc0:	e2c6      	b.n	6550 <bloomFilterAddressCheck+0xf68>
    5fc2:	b291      	uxth	r1, r2
    5fc4:	4b5f      	ldr	r3, [pc, #380]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5fc6:	0049      	lsls	r1, r1, #1
    5fc8:	404b      	eors	r3, r1
    5fca:	b29b      	uxth	r3, r3
    5fcc:	0051      	lsls	r1, r2, #1
    5fce:	0412      	lsls	r2, r2, #16
    5fd0:	d500      	bpl.n	5fd4 <bloomFilterAddressCheck+0x9ec>
    5fd2:	e2bb      	b.n	654c <bloomFilterAddressCheck+0xf64>
    5fd4:	b28a      	uxth	r2, r1
    5fd6:	4b5b      	ldr	r3, [pc, #364]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5fd8:	0052      	lsls	r2, r2, #1
    5fda:	4053      	eors	r3, r2
    5fdc:	b29b      	uxth	r3, r3
    5fde:	004a      	lsls	r2, r1, #1
    5fe0:	0409      	lsls	r1, r1, #16
    5fe2:	d500      	bpl.n	5fe6 <bloomFilterAddressCheck+0x9fe>
    5fe4:	e2b0      	b.n	6548 <bloomFilterAddressCheck+0xf60>
    5fe6:	b291      	uxth	r1, r2
    5fe8:	4b56      	ldr	r3, [pc, #344]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5fea:	0049      	lsls	r1, r1, #1
    5fec:	404b      	eors	r3, r1
    5fee:	b29b      	uxth	r3, r3
    5ff0:	0051      	lsls	r1, r2, #1
    5ff2:	0412      	lsls	r2, r2, #16
    5ff4:	d500      	bpl.n	5ff8 <bloomFilterAddressCheck+0xa10>
    5ff6:	e2a5      	b.n	6544 <bloomFilterAddressCheck+0xf5c>
    5ff8:	b28a      	uxth	r2, r1
    5ffa:	4b52      	ldr	r3, [pc, #328]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    5ffc:	0052      	lsls	r2, r2, #1
    5ffe:	4053      	eors	r3, r2
    6000:	b29b      	uxth	r3, r3
    6002:	004a      	lsls	r2, r1, #1
    6004:	0409      	lsls	r1, r1, #16
    6006:	d500      	bpl.n	600a <bloomFilterAddressCheck+0xa22>
    6008:	e29a      	b.n	6540 <bloomFilterAddressCheck+0xf58>
    600a:	465b      	mov	r3, fp
    600c:	4053      	eors	r3, r2
    600e:	b21a      	sxth	r2, r3
    6010:	b293      	uxth	r3, r2
    6012:	494c      	ldr	r1, [pc, #304]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6014:	005b      	lsls	r3, r3, #1
    6016:	4059      	eors	r1, r3
    6018:	b289      	uxth	r1, r1
    601a:	2a00      	cmp	r2, #0
    601c:	da00      	bge.n	6020 <bloomFilterAddressCheck+0xa38>
    601e:	e28d      	b.n	653c <bloomFilterAddressCheck+0xf54>
    6020:	b299      	uxth	r1, r3
    6022:	4a48      	ldr	r2, [pc, #288]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6024:	0049      	lsls	r1, r1, #1
    6026:	404a      	eors	r2, r1
    6028:	b292      	uxth	r2, r2
    602a:	0059      	lsls	r1, r3, #1
    602c:	041b      	lsls	r3, r3, #16
    602e:	d500      	bpl.n	6032 <bloomFilterAddressCheck+0xa4a>
    6030:	e282      	b.n	6538 <bloomFilterAddressCheck+0xf50>
    6032:	b28a      	uxth	r2, r1
    6034:	4b43      	ldr	r3, [pc, #268]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6036:	0052      	lsls	r2, r2, #1
    6038:	4053      	eors	r3, r2
    603a:	b29b      	uxth	r3, r3
    603c:	004a      	lsls	r2, r1, #1
    603e:	0409      	lsls	r1, r1, #16
    6040:	d500      	bpl.n	6044 <bloomFilterAddressCheck+0xa5c>
    6042:	e277      	b.n	6534 <bloomFilterAddressCheck+0xf4c>
    6044:	b291      	uxth	r1, r2
    6046:	4b3f      	ldr	r3, [pc, #252]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6048:	0049      	lsls	r1, r1, #1
    604a:	404b      	eors	r3, r1
    604c:	b29b      	uxth	r3, r3
    604e:	0051      	lsls	r1, r2, #1
    6050:	0412      	lsls	r2, r2, #16
    6052:	d500      	bpl.n	6056 <bloomFilterAddressCheck+0xa6e>
    6054:	e26c      	b.n	6530 <bloomFilterAddressCheck+0xf48>
    6056:	b28a      	uxth	r2, r1
    6058:	4b3a      	ldr	r3, [pc, #232]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    605a:	0052      	lsls	r2, r2, #1
    605c:	4053      	eors	r3, r2
    605e:	b29b      	uxth	r3, r3
    6060:	004a      	lsls	r2, r1, #1
    6062:	0409      	lsls	r1, r1, #16
    6064:	d500      	bpl.n	6068 <bloomFilterAddressCheck+0xa80>
    6066:	e261      	b.n	652c <bloomFilterAddressCheck+0xf44>
    6068:	b291      	uxth	r1, r2
    606a:	4b36      	ldr	r3, [pc, #216]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    606c:	0049      	lsls	r1, r1, #1
    606e:	404b      	eors	r3, r1
    6070:	b29b      	uxth	r3, r3
    6072:	0051      	lsls	r1, r2, #1
    6074:	0412      	lsls	r2, r2, #16
    6076:	d500      	bpl.n	607a <bloomFilterAddressCheck+0xa92>
    6078:	e242      	b.n	6500 <bloomFilterAddressCheck+0xf18>
    607a:	b28a      	uxth	r2, r1
    607c:	4b31      	ldr	r3, [pc, #196]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    607e:	0052      	lsls	r2, r2, #1
    6080:	4053      	eors	r3, r2
    6082:	b29b      	uxth	r3, r3
    6084:	004a      	lsls	r2, r1, #1
    6086:	0409      	lsls	r1, r1, #16
    6088:	d500      	bpl.n	608c <bloomFilterAddressCheck+0xaa4>
    608a:	e243      	b.n	6514 <bloomFilterAddressCheck+0xf2c>
    608c:	b291      	uxth	r1, r2
    608e:	4b2d      	ldr	r3, [pc, #180]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6090:	0049      	lsls	r1, r1, #1
    6092:	404b      	eors	r3, r1
    6094:	b29b      	uxth	r3, r3
    6096:	0055      	lsls	r5, r2, #1
    6098:	0412      	lsls	r2, r2, #16
    609a:	d500      	bpl.n	609e <bloomFilterAddressCheck+0xab6>
    609c:	e244      	b.n	6528 <bloomFilterAddressCheck+0xf40>
    609e:	9b01      	ldr	r3, [sp, #4]
    60a0:	4a28      	ldr	r2, [pc, #160]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    60a2:	406b      	eors	r3, r5
    60a4:	b21d      	sxth	r5, r3
    60a6:	b2ab      	uxth	r3, r5
    60a8:	005b      	lsls	r3, r3, #1
    60aa:	405a      	eors	r2, r3
    60ac:	b292      	uxth	r2, r2
    60ae:	2d00      	cmp	r5, #0
    60b0:	da00      	bge.n	60b4 <bloomFilterAddressCheck+0xacc>
    60b2:	e2a7      	b.n	6604 <bloomFilterAddressCheck+0x101c>
    60b4:	b299      	uxth	r1, r3
    60b6:	4a23      	ldr	r2, [pc, #140]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    60b8:	0049      	lsls	r1, r1, #1
    60ba:	404a      	eors	r2, r1
    60bc:	b292      	uxth	r2, r2
    60be:	0059      	lsls	r1, r3, #1
    60c0:	041b      	lsls	r3, r3, #16
    60c2:	d500      	bpl.n	60c6 <bloomFilterAddressCheck+0xade>
    60c4:	e29c      	b.n	6600 <bloomFilterAddressCheck+0x1018>
    60c6:	b28a      	uxth	r2, r1
    60c8:	4b1e      	ldr	r3, [pc, #120]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    60ca:	0052      	lsls	r2, r2, #1
    60cc:	4053      	eors	r3, r2
    60ce:	b29b      	uxth	r3, r3
    60d0:	004a      	lsls	r2, r1, #1
    60d2:	0409      	lsls	r1, r1, #16
    60d4:	d500      	bpl.n	60d8 <bloomFilterAddressCheck+0xaf0>
    60d6:	e291      	b.n	65fc <bloomFilterAddressCheck+0x1014>
    60d8:	b291      	uxth	r1, r2
    60da:	4b1a      	ldr	r3, [pc, #104]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    60dc:	0049      	lsls	r1, r1, #1
    60de:	404b      	eors	r3, r1
    60e0:	b29b      	uxth	r3, r3
    60e2:	0051      	lsls	r1, r2, #1
    60e4:	0412      	lsls	r2, r2, #16
    60e6:	d500      	bpl.n	60ea <bloomFilterAddressCheck+0xb02>
    60e8:	e286      	b.n	65f8 <bloomFilterAddressCheck+0x1010>
    60ea:	b28a      	uxth	r2, r1
    60ec:	4b15      	ldr	r3, [pc, #84]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    60ee:	0052      	lsls	r2, r2, #1
    60f0:	4053      	eors	r3, r2
    60f2:	b29b      	uxth	r3, r3
    60f4:	004a      	lsls	r2, r1, #1
    60f6:	0409      	lsls	r1, r1, #16
    60f8:	d500      	bpl.n	60fc <bloomFilterAddressCheck+0xb14>
    60fa:	e27b      	b.n	65f4 <bloomFilterAddressCheck+0x100c>
    60fc:	b291      	uxth	r1, r2
    60fe:	4b11      	ldr	r3, [pc, #68]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6100:	0049      	lsls	r1, r1, #1
    6102:	404b      	eors	r3, r1
    6104:	b29b      	uxth	r3, r3
    6106:	0051      	lsls	r1, r2, #1
    6108:	0412      	lsls	r2, r2, #16
    610a:	d500      	bpl.n	610e <bloomFilterAddressCheck+0xb26>
    610c:	e270      	b.n	65f0 <bloomFilterAddressCheck+0x1008>
    610e:	b28a      	uxth	r2, r1
    6110:	4b0c      	ldr	r3, [pc, #48]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6112:	0052      	lsls	r2, r2, #1
    6114:	4053      	eors	r3, r2
    6116:	b29b      	uxth	r3, r3
    6118:	004a      	lsls	r2, r1, #1
    611a:	0409      	lsls	r1, r1, #16
    611c:	d500      	bpl.n	6120 <bloomFilterAddressCheck+0xb38>
    611e:	e265      	b.n	65ec <bloomFilterAddressCheck+0x1004>
    6120:	b291      	uxth	r1, r2
    6122:	4b08      	ldr	r3, [pc, #32]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6124:	0049      	lsls	r1, r1, #1
    6126:	404b      	eors	r3, r1
    6128:	b29b      	uxth	r3, r3
    612a:	0055      	lsls	r5, r2, #1
    612c:	0412      	lsls	r2, r2, #16
    612e:	d500      	bpl.n	6132 <bloomFilterAddressCheck+0xb4a>
    6130:	e25a      	b.n	65e8 <bloomFilterAddressCheck+0x1000>
    6132:	9b02      	ldr	r3, [sp, #8]
    6134:	4a03      	ldr	r2, [pc, #12]	; (6144 <bloomFilterAddressCheck+0xb5c>)
    6136:	406b      	eors	r3, r5
    6138:	b21d      	sxth	r5, r3
    613a:	b2ab      	uxth	r3, r5
    613c:	005b      	lsls	r3, r3, #1
    613e:	405a      	eors	r2, r3
    6140:	b292      	uxth	r2, r2
    6142:	e001      	b.n	6148 <bloomFilterAddressCheck+0xb60>
    6144:	ffff8005 	.word	0xffff8005
    6148:	2d00      	cmp	r5, #0
    614a:	da00      	bge.n	614e <bloomFilterAddressCheck+0xb66>
    614c:	e24a      	b.n	65e4 <bloomFilterAddressCheck+0xffc>
    614e:	b299      	uxth	r1, r3
    6150:	4ae8      	ldr	r2, [pc, #928]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    6152:	0049      	lsls	r1, r1, #1
    6154:	404a      	eors	r2, r1
    6156:	b292      	uxth	r2, r2
    6158:	0059      	lsls	r1, r3, #1
    615a:	041b      	lsls	r3, r3, #16
    615c:	d500      	bpl.n	6160 <bloomFilterAddressCheck+0xb78>
    615e:	e23f      	b.n	65e0 <bloomFilterAddressCheck+0xff8>
    6160:	b28a      	uxth	r2, r1
    6162:	4be4      	ldr	r3, [pc, #912]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    6164:	0052      	lsls	r2, r2, #1
    6166:	4053      	eors	r3, r2
    6168:	b29b      	uxth	r3, r3
    616a:	004a      	lsls	r2, r1, #1
    616c:	0409      	lsls	r1, r1, #16
    616e:	d500      	bpl.n	6172 <bloomFilterAddressCheck+0xb8a>
    6170:	e234      	b.n	65dc <bloomFilterAddressCheck+0xff4>
    6172:	b291      	uxth	r1, r2
    6174:	4bdf      	ldr	r3, [pc, #892]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    6176:	0049      	lsls	r1, r1, #1
    6178:	404b      	eors	r3, r1
    617a:	b29b      	uxth	r3, r3
    617c:	0051      	lsls	r1, r2, #1
    617e:	0412      	lsls	r2, r2, #16
    6180:	d500      	bpl.n	6184 <bloomFilterAddressCheck+0xb9c>
    6182:	e229      	b.n	65d8 <bloomFilterAddressCheck+0xff0>
    6184:	b28a      	uxth	r2, r1
    6186:	4bdb      	ldr	r3, [pc, #876]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    6188:	0052      	lsls	r2, r2, #1
    618a:	4053      	eors	r3, r2
    618c:	b29b      	uxth	r3, r3
    618e:	004a      	lsls	r2, r1, #1
    6190:	0409      	lsls	r1, r1, #16
    6192:	d500      	bpl.n	6196 <bloomFilterAddressCheck+0xbae>
    6194:	e21e      	b.n	65d4 <bloomFilterAddressCheck+0xfec>
    6196:	b291      	uxth	r1, r2
    6198:	4bd6      	ldr	r3, [pc, #856]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    619a:	0049      	lsls	r1, r1, #1
    619c:	404b      	eors	r3, r1
    619e:	b29b      	uxth	r3, r3
    61a0:	0051      	lsls	r1, r2, #1
    61a2:	0412      	lsls	r2, r2, #16
    61a4:	d500      	bpl.n	61a8 <bloomFilterAddressCheck+0xbc0>
    61a6:	e1ff      	b.n	65a8 <bloomFilterAddressCheck+0xfc0>
    61a8:	b28a      	uxth	r2, r1
    61aa:	4bd2      	ldr	r3, [pc, #840]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    61ac:	0052      	lsls	r2, r2, #1
    61ae:	4053      	eors	r3, r2
    61b0:	b29b      	uxth	r3, r3
    61b2:	0048      	lsls	r0, r1, #1
    61b4:	040a      	lsls	r2, r1, #16
    61b6:	d500      	bpl.n	61ba <bloomFilterAddressCheck+0xbd2>
    61b8:	e200      	b.n	65bc <bloomFilterAddressCheck+0xfd4>
    61ba:	b282      	uxth	r2, r0
    61bc:	4bcd      	ldr	r3, [pc, #820]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    61be:	0052      	lsls	r2, r2, #1
    61c0:	4053      	eors	r3, r2
    61c2:	b29b      	uxth	r3, r3
    61c4:	0042      	lsls	r2, r0, #1
    61c6:	0401      	lsls	r1, r0, #16
    61c8:	d500      	bpl.n	61cc <bloomFilterAddressCheck+0xbe4>
    61ca:	e201      	b.n	65d0 <bloomFilterAddressCheck+0xfe8>
    61cc:	4653      	mov	r3, sl
    61ce:	4053      	eors	r3, r2
    61d0:	b21a      	sxth	r2, r3
    61d2:	b291      	uxth	r1, r2
    61d4:	4bc7      	ldr	r3, [pc, #796]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    61d6:	0049      	lsls	r1, r1, #1
    61d8:	404b      	eors	r3, r1
    61da:	b298      	uxth	r0, r3
    61dc:	b28b      	uxth	r3, r1
    61de:	2a00      	cmp	r2, #0
    61e0:	da00      	bge.n	61e4 <bloomFilterAddressCheck+0xbfc>
    61e2:	e21b      	b.n	661c <bloomFilterAddressCheck+0x1034>
    61e4:	4ac3      	ldr	r2, [pc, #780]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    61e6:	b299      	uxth	r1, r3
    61e8:	0049      	lsls	r1, r1, #1
    61ea:	4051      	eors	r1, r2
    61ec:	005a      	lsls	r2, r3, #1
    61ee:	b289      	uxth	r1, r1
    61f0:	b292      	uxth	r2, r2
    61f2:	041b      	lsls	r3, r3, #16
    61f4:	d500      	bpl.n	61f8 <bloomFilterAddressCheck+0xc10>
    61f6:	e20f      	b.n	6618 <bloomFilterAddressCheck+0x1030>
    61f8:	4bbe      	ldr	r3, [pc, #760]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    61fa:	b291      	uxth	r1, r2
    61fc:	0049      	lsls	r1, r1, #1
    61fe:	4059      	eors	r1, r3
    6200:	0053      	lsls	r3, r2, #1
    6202:	b289      	uxth	r1, r1
    6204:	b29b      	uxth	r3, r3
    6206:	0412      	lsls	r2, r2, #16
    6208:	d500      	bpl.n	620c <bloomFilterAddressCheck+0xc24>
    620a:	e203      	b.n	6614 <bloomFilterAddressCheck+0x102c>
    620c:	4ab9      	ldr	r2, [pc, #740]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    620e:	b299      	uxth	r1, r3
    6210:	0049      	lsls	r1, r1, #1
    6212:	4051      	eors	r1, r2
    6214:	005a      	lsls	r2, r3, #1
    6216:	b289      	uxth	r1, r1
    6218:	b292      	uxth	r2, r2
    621a:	041b      	lsls	r3, r3, #16
    621c:	d500      	bpl.n	6220 <bloomFilterAddressCheck+0xc38>
    621e:	e1f7      	b.n	6610 <bloomFilterAddressCheck+0x1028>
    6220:	4bb4      	ldr	r3, [pc, #720]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    6222:	b291      	uxth	r1, r2
    6224:	0049      	lsls	r1, r1, #1
    6226:	4059      	eors	r1, r3
    6228:	0053      	lsls	r3, r2, #1
    622a:	b289      	uxth	r1, r1
    622c:	b29b      	uxth	r3, r3
    622e:	0412      	lsls	r2, r2, #16
    6230:	d500      	bpl.n	6234 <bloomFilterAddressCheck+0xc4c>
    6232:	e1eb      	b.n	660c <bloomFilterAddressCheck+0x1024>
    6234:	4aaf      	ldr	r2, [pc, #700]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    6236:	b299      	uxth	r1, r3
    6238:	0049      	lsls	r1, r1, #1
    623a:	4051      	eors	r1, r2
    623c:	005a      	lsls	r2, r3, #1
    623e:	b289      	uxth	r1, r1
    6240:	b292      	uxth	r2, r2
    6242:	041b      	lsls	r3, r3, #16
    6244:	d500      	bpl.n	6248 <bloomFilterAddressCheck+0xc60>
    6246:	e1df      	b.n	6608 <bloomFilterAddressCheck+0x1020>
    6248:	b293      	uxth	r3, r2
    624a:	4caa      	ldr	r4, [pc, #680]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    624c:	005b      	lsls	r3, r3, #1
    624e:	405c      	eors	r4, r3
    6250:	b2a1      	uxth	r1, r4
    6252:	0054      	lsls	r4, r2, #1
    6254:	b2a4      	uxth	r4, r4
    6256:	0413      	lsls	r3, r2, #16
    6258:	d500      	bpl.n	625c <bloomFilterAddressCheck+0xc74>
    625a:	e149      	b.n	64f0 <bloomFilterAddressCheck+0xf08>
    625c:	b223      	sxth	r3, r4
    625e:	b2a2      	uxth	r2, r4
    6260:	469b      	mov	fp, r3
    6262:	4ba4      	ldr	r3, [pc, #656]	; (64f4 <bloomFilterAddressCheck+0xf0c>)
    6264:	0052      	lsls	r2, r2, #1
    6266:	4053      	eors	r3, r2
    6268:	00f5      	lsls	r5, r6, #3
    626a:	b29b      	uxth	r3, r3
    626c:	0064      	lsls	r4, r4, #1
    626e:	3d01      	subs	r5, #1
    6270:	4698      	mov	r8, r3
    6272:	b2a4      	uxth	r4, r4
    6274:	b2ed      	uxtb	r5, r5
    6276:	2f00      	cmp	r7, #0
    6278:	da00      	bge.n	627c <bloomFilterAddressCheck+0xc94>
    627a:	e136      	b.n	64ea <bloomFilterAddressCheck+0xf02>
    627c:	4648      	mov	r0, r9
    627e:	4b9e      	ldr	r3, [pc, #632]	; (64f8 <bloomFilterAddressCheck+0xf10>)
    6280:	b280      	uxth	r0, r0
    6282:	0029      	movs	r1, r5
    6284:	469a      	mov	sl, r3
    6286:	4798      	blx	r3
    6288:	465b      	mov	r3, fp
    628a:	4689      	mov	r9, r1
    628c:	2b00      	cmp	r3, #0
    628e:	da00      	bge.n	6292 <bloomFilterAddressCheck+0xcaa>
    6290:	e129      	b.n	64e6 <bloomFilterAddressCheck+0xefe>
    6292:	b2a0      	uxth	r0, r4
    6294:	0029      	movs	r1, r5
    6296:	47d0      	blx	sl
    6298:	b2cb      	uxtb	r3, r1
    629a:	08db      	lsrs	r3, r3, #3
    629c:	9f03      	ldr	r7, [sp, #12]
    629e:	3301      	adds	r3, #1
    62a0:	1af3      	subs	r3, r6, r3
    62a2:	466a      	mov	r2, sp
    62a4:	5cf8      	ldrb	r0, [r7, r3]
    62a6:	464b      	mov	r3, r9
    62a8:	7113      	strb	r3, [r2, #4]
    62aa:	7913      	ldrb	r3, [r2, #4]
    62ac:	2201      	movs	r2, #1
    62ae:	08db      	lsrs	r3, r3, #3
    62b0:	3301      	adds	r3, #1
    62b2:	1af6      	subs	r6, r6, r3
    62b4:	2407      	movs	r4, #7
    62b6:	464b      	mov	r3, r9
    62b8:	0015      	movs	r5, r2
    62ba:	4023      	ands	r3, r4
    62bc:	409d      	lsls	r5, r3
    62be:	5dbb      	ldrb	r3, [r7, r6]
    62c0:	421d      	tst	r5, r3
    62c2:	d006      	beq.n	62d2 <bloomFilterAddressCheck+0xcea>
    62c4:	4021      	ands	r1, r4
    62c6:	408a      	lsls	r2, r1
    62c8:	4002      	ands	r2, r0
    62ca:	1e50      	subs	r0, r2, #1
    62cc:	4182      	sbcs	r2, r0
    62ce:	b2d3      	uxtb	r3, r2
    62d0:	9300      	str	r3, [sp, #0]
    62d2:	9800      	ldr	r0, [sp, #0]
    62d4:	b007      	add	sp, #28
    62d6:	bc3c      	pop	{r2, r3, r4, r5}
    62d8:	4690      	mov	r8, r2
    62da:	4699      	mov	r9, r3
    62dc:	46a2      	mov	sl, r4
    62de:	46ab      	mov	fp, r5
    62e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62e2:	1c1a      	adds	r2, r3, #0
    62e4:	e4ef      	b.n	5cc6 <bloomFilterAddressCheck+0x6de>
    62e6:	1c08      	adds	r0, r1, #0
    62e8:	f7ff f9a2 	bl	5630 <bloomFilterAddressCheck+0x48>
    62ec:	1c0c      	adds	r4, r1, #0
    62ee:	b2a0      	uxth	r0, r4
    62f0:	4982      	ldr	r1, [pc, #520]	; (64fc <bloomFilterAddressCheck+0xf14>)
    62f2:	0040      	lsls	r0, r0, #1
    62f4:	4041      	eors	r1, r0
    62f6:	b289      	uxth	r1, r1
    62f8:	0060      	lsls	r0, r4, #1
    62fa:	0423      	lsls	r3, r4, #16
    62fc:	d401      	bmi.n	6302 <bloomFilterAddressCheck+0xd1a>
    62fe:	f7ff f9ac 	bl	565a <bloomFilterAddressCheck+0x72>
    6302:	1c08      	adds	r0, r1, #0
    6304:	b284      	uxth	r4, r0
    6306:	497d      	ldr	r1, [pc, #500]	; (64fc <bloomFilterAddressCheck+0xf14>)
    6308:	0064      	lsls	r4, r4, #1
    630a:	4061      	eors	r1, r4
    630c:	b289      	uxth	r1, r1
    630e:	0044      	lsls	r4, r0, #1
    6310:	0403      	lsls	r3, r0, #16
    6312:	d401      	bmi.n	6318 <bloomFilterAddressCheck+0xd30>
    6314:	f7ff f9ab 	bl	566e <bloomFilterAddressCheck+0x86>
    6318:	1c0c      	adds	r4, r1, #0
    631a:	b2a0      	uxth	r0, r4
    631c:	4977      	ldr	r1, [pc, #476]	; (64fc <bloomFilterAddressCheck+0xf14>)
    631e:	0040      	lsls	r0, r0, #1
    6320:	4041      	eors	r1, r0
    6322:	b289      	uxth	r1, r1
    6324:	0060      	lsls	r0, r4, #1
    6326:	0423      	lsls	r3, r4, #16
    6328:	d401      	bmi.n	632e <bloomFilterAddressCheck+0xd46>
    632a:	f7ff f9aa 	bl	5682 <bloomFilterAddressCheck+0x9a>
    632e:	1c08      	adds	r0, r1, #0
    6330:	b284      	uxth	r4, r0
    6332:	4972      	ldr	r1, [pc, #456]	; (64fc <bloomFilterAddressCheck+0xf14>)
    6334:	0064      	lsls	r4, r4, #1
    6336:	4061      	eors	r1, r4
    6338:	b289      	uxth	r1, r1
    633a:	0044      	lsls	r4, r0, #1
    633c:	0403      	lsls	r3, r0, #16
    633e:	d401      	bmi.n	6344 <bloomFilterAddressCheck+0xd5c>
    6340:	f7ff f9a9 	bl	5696 <bloomFilterAddressCheck+0xae>
    6344:	1c0c      	adds	r4, r1, #0
    6346:	b2a0      	uxth	r0, r4
    6348:	496c      	ldr	r1, [pc, #432]	; (64fc <bloomFilterAddressCheck+0xf14>)
    634a:	0040      	lsls	r0, r0, #1
    634c:	4041      	eors	r1, r0
    634e:	b289      	uxth	r1, r1
    6350:	0060      	lsls	r0, r4, #1
    6352:	0423      	lsls	r3, r4, #16
    6354:	d401      	bmi.n	635a <bloomFilterAddressCheck+0xd72>
    6356:	f7ff f9a8 	bl	56aa <bloomFilterAddressCheck+0xc2>
    635a:	1c08      	adds	r0, r1, #0
    635c:	f7ff f9a5 	bl	56aa <bloomFilterAddressCheck+0xc2>
    6360:	1c0d      	adds	r5, r1, #0
    6362:	f7ff f9af 	bl	56c4 <bloomFilterAddressCheck+0xdc>
    6366:	1c01      	adds	r1, r0, #0
    6368:	b28d      	uxth	r5, r1
    636a:	4864      	ldr	r0, [pc, #400]	; (64fc <bloomFilterAddressCheck+0xf14>)
    636c:	006d      	lsls	r5, r5, #1
    636e:	4045      	eors	r5, r0
    6370:	b2ad      	uxth	r5, r5
    6372:	0048      	lsls	r0, r1, #1
    6374:	040b      	lsls	r3, r1, #16
    6376:	d401      	bmi.n	637c <bloomFilterAddressCheck+0xd94>
    6378:	f7ff f9b9 	bl	56ee <bloomFilterAddressCheck+0x106>
    637c:	1c28      	adds	r0, r5, #0
    637e:	b285      	uxth	r5, r0
    6380:	495e      	ldr	r1, [pc, #376]	; (64fc <bloomFilterAddressCheck+0xf14>)
    6382:	006d      	lsls	r5, r5, #1
    6384:	4069      	eors	r1, r5
    6386:	b289      	uxth	r1, r1
    6388:	0045      	lsls	r5, r0, #1
    638a:	0403      	lsls	r3, r0, #16
    638c:	d401      	bmi.n	6392 <bloomFilterAddressCheck+0xdaa>
    638e:	f7ff f9b8 	bl	5702 <bloomFilterAddressCheck+0x11a>
    6392:	1c0d      	adds	r5, r1, #0
    6394:	b2a8      	uxth	r0, r5
    6396:	4959      	ldr	r1, [pc, #356]	; (64fc <bloomFilterAddressCheck+0xf14>)
    6398:	0040      	lsls	r0, r0, #1
    639a:	4041      	eors	r1, r0
    639c:	b289      	uxth	r1, r1
    639e:	0068      	lsls	r0, r5, #1
    63a0:	042b      	lsls	r3, r5, #16
    63a2:	d401      	bmi.n	63a8 <bloomFilterAddressCheck+0xdc0>
    63a4:	f7ff f9b7 	bl	5716 <bloomFilterAddressCheck+0x12e>
    63a8:	1c08      	adds	r0, r1, #0
    63aa:	b285      	uxth	r5, r0
    63ac:	4953      	ldr	r1, [pc, #332]	; (64fc <bloomFilterAddressCheck+0xf14>)
    63ae:	006d      	lsls	r5, r5, #1
    63b0:	4069      	eors	r1, r5
    63b2:	b289      	uxth	r1, r1
    63b4:	0045      	lsls	r5, r0, #1
    63b6:	0403      	lsls	r3, r0, #16
    63b8:	d401      	bmi.n	63be <bloomFilterAddressCheck+0xdd6>
    63ba:	f7ff f9b6 	bl	572a <bloomFilterAddressCheck+0x142>
    63be:	1c0d      	adds	r5, r1, #0
    63c0:	b2a8      	uxth	r0, r5
    63c2:	494e      	ldr	r1, [pc, #312]	; (64fc <bloomFilterAddressCheck+0xf14>)
    63c4:	0040      	lsls	r0, r0, #1
    63c6:	4041      	eors	r1, r0
    63c8:	b289      	uxth	r1, r1
    63ca:	0068      	lsls	r0, r5, #1
    63cc:	042b      	lsls	r3, r5, #16
    63ce:	d401      	bmi.n	63d4 <bloomFilterAddressCheck+0xdec>
    63d0:	f7ff f9b5 	bl	573e <bloomFilterAddressCheck+0x156>
    63d4:	1c08      	adds	r0, r1, #0
    63d6:	b285      	uxth	r5, r0
    63d8:	4948      	ldr	r1, [pc, #288]	; (64fc <bloomFilterAddressCheck+0xf14>)
    63da:	006d      	lsls	r5, r5, #1
    63dc:	4069      	eors	r1, r5
    63de:	b289      	uxth	r1, r1
    63e0:	0045      	lsls	r5, r0, #1
    63e2:	0403      	lsls	r3, r0, #16
    63e4:	d401      	bmi.n	63ea <bloomFilterAddressCheck+0xe02>
    63e6:	f7ff f9b4 	bl	5752 <bloomFilterAddressCheck+0x16a>
    63ea:	1c0d      	adds	r5, r1, #0
    63ec:	f7ff f9b1 	bl	5752 <bloomFilterAddressCheck+0x16a>
    63f0:	4689      	mov	r9, r1
    63f2:	f7ff f9bc 	bl	576e <bloomFilterAddressCheck+0x186>
    63f6:	4651      	mov	r1, sl
    63f8:	f7ff f9c9 	bl	578e <bloomFilterAddressCheck+0x1a6>
    63fc:	464d      	mov	r5, r9
    63fe:	f7ff f9d3 	bl	57a8 <bloomFilterAddressCheck+0x1c0>
    6402:	4689      	mov	r9, r1
    6404:	f7ff f9dd 	bl	57c2 <bloomFilterAddressCheck+0x1da>
    6408:	1c0d      	adds	r5, r1, #0
    640a:	f7ff f9e9 	bl	57e0 <bloomFilterAddressCheck+0x1f8>
    640e:	4689      	mov	r9, r1
    6410:	f7ff f9f3 	bl	57fa <bloomFilterAddressCheck+0x212>
    6414:	1c0d      	adds	r5, r1, #0
    6416:	f7ff f9ff 	bl	5818 <bloomFilterAddressCheck+0x230>
    641a:	468a      	mov	sl, r1
    641c:	f7ff fa09 	bl	5832 <bloomFilterAddressCheck+0x24a>
    6420:	464d      	mov	r5, r9
    6422:	f7ff fa19 	bl	5858 <bloomFilterAddressCheck+0x270>
    6426:	4655      	mov	r5, sl
    6428:	f7ff fa26 	bl	5878 <bloomFilterAddressCheck+0x290>
    642c:	46d1      	mov	r9, sl
    642e:	f7ff fa36 	bl	589e <bloomFilterAddressCheck+0x2b6>
    6432:	46aa      	mov	sl, r5
    6434:	f7ff fa43 	bl	58be <bloomFilterAddressCheck+0x2d6>
    6438:	46a9      	mov	r9, r5
    643a:	f7ff fa50 	bl	58de <bloomFilterAddressCheck+0x2f6>
    643e:	46aa      	mov	sl, r5
    6440:	f7ff fa5d 	bl	58fe <bloomFilterAddressCheck+0x316>
    6444:	46a9      	mov	r9, r5
    6446:	f7ff fa6a 	bl	591e <bloomFilterAddressCheck+0x336>
    644a:	46aa      	mov	sl, r5
    644c:	f7ff fa77 	bl	593e <bloomFilterAddressCheck+0x356>
    6450:	464d      	mov	r5, r9
    6452:	f7ff fa87 	bl	5964 <bloomFilterAddressCheck+0x37c>
    6456:	4655      	mov	r5, sl
    6458:	f7ff fa99 	bl	598e <bloomFilterAddressCheck+0x3a6>
    645c:	46d1      	mov	r9, sl
    645e:	f7ff faa7 	bl	59b0 <bloomFilterAddressCheck+0x3c8>
    6462:	46aa      	mov	sl, r5
    6464:	f7ff faba 	bl	59dc <bloomFilterAddressCheck+0x3f4>
    6468:	46a9      	mov	r9, r5
    646a:	f7ff fac7 	bl	59fc <bloomFilterAddressCheck+0x414>
    646e:	46aa      	mov	sl, r5
    6470:	f7ff fad4 	bl	5a1c <bloomFilterAddressCheck+0x434>
    6474:	46a9      	mov	r9, r5
    6476:	f7ff fae1 	bl	5a3c <bloomFilterAddressCheck+0x454>
    647a:	46aa      	mov	sl, r5
    647c:	f7ff faee 	bl	5a5c <bloomFilterAddressCheck+0x474>
    6480:	464d      	mov	r5, r9
    6482:	f7ff fafe 	bl	5a82 <bloomFilterAddressCheck+0x49a>
    6486:	4655      	mov	r5, sl
    6488:	f7ff fb10 	bl	5aac <bloomFilterAddressCheck+0x4c4>
    648c:	46d1      	mov	r9, sl
    648e:	f7ff fb1e 	bl	5ace <bloomFilterAddressCheck+0x4e6>
    6492:	46aa      	mov	sl, r5
    6494:	f7ff fb2b 	bl	5aee <bloomFilterAddressCheck+0x506>
    6498:	46a9      	mov	r9, r5
    649a:	f7ff fb38 	bl	5b0e <bloomFilterAddressCheck+0x526>
    649e:	46aa      	mov	sl, r5
    64a0:	f7ff fb45 	bl	5b2e <bloomFilterAddressCheck+0x546>
    64a4:	46a9      	mov	r9, r5
    64a6:	f7ff fb52 	bl	5b4e <bloomFilterAddressCheck+0x566>
    64aa:	46aa      	mov	sl, r5
    64ac:	f7ff fb5f 	bl	5b6e <bloomFilterAddressCheck+0x586>
    64b0:	464d      	mov	r5, r9
    64b2:	f7ff fb6f 	bl	5b94 <bloomFilterAddressCheck+0x5ac>
    64b6:	4655      	mov	r5, sl
    64b8:	f7ff fb81 	bl	5bbe <bloomFilterAddressCheck+0x5d6>
    64bc:	46ca      	mov	sl, r9
    64be:	f7ff fb8f 	bl	5be0 <bloomFilterAddressCheck+0x5f8>
    64c2:	46a9      	mov	r9, r5
    64c4:	f7ff fb9c 	bl	5c00 <bloomFilterAddressCheck+0x618>
    64c8:	46aa      	mov	sl, r5
    64ca:	f7ff fba9 	bl	5c20 <bloomFilterAddressCheck+0x638>
    64ce:	46a9      	mov	r9, r5
    64d0:	f7ff fbb6 	bl	5c40 <bloomFilterAddressCheck+0x658>
    64d4:	46aa      	mov	sl, r5
    64d6:	f7ff fbc3 	bl	5c60 <bloomFilterAddressCheck+0x678>
    64da:	46a9      	mov	r9, r5
    64dc:	f7ff fbd0 	bl	5c80 <bloomFilterAddressCheck+0x698>
    64e0:	1c2a      	adds	r2, r5, #0
    64e2:	f7ff fbdf 	bl	5ca4 <bloomFilterAddressCheck+0x6bc>
    64e6:	4644      	mov	r4, r8
    64e8:	e6d3      	b.n	6292 <bloomFilterAddressCheck+0xcaa>
    64ea:	466b      	mov	r3, sp
    64ec:	8a98      	ldrh	r0, [r3, #20]
    64ee:	e6c6      	b.n	627e <bloomFilterAddressCheck+0xc96>
    64f0:	1c0c      	adds	r4, r1, #0
    64f2:	e6b3      	b.n	625c <bloomFilterAddressCheck+0xc74>
    64f4:	ffff8005 	.word	0xffff8005
    64f8:	00009269 	.word	0x00009269
    64fc:	00001021 	.word	0x00001021
    6500:	1c19      	adds	r1, r3, #0
    6502:	b28a      	uxth	r2, r1
    6504:	4b52      	ldr	r3, [pc, #328]	; (6650 <bloomFilterAddressCheck+0x1068>)
    6506:	0052      	lsls	r2, r2, #1
    6508:	4053      	eors	r3, r2
    650a:	b29b      	uxth	r3, r3
    650c:	004a      	lsls	r2, r1, #1
    650e:	0409      	lsls	r1, r1, #16
    6510:	d400      	bmi.n	6514 <bloomFilterAddressCheck+0xf2c>
    6512:	e5bb      	b.n	608c <bloomFilterAddressCheck+0xaa4>
    6514:	1c1a      	adds	r2, r3, #0
    6516:	b291      	uxth	r1, r2
    6518:	4b4d      	ldr	r3, [pc, #308]	; (6650 <bloomFilterAddressCheck+0x1068>)
    651a:	0049      	lsls	r1, r1, #1
    651c:	404b      	eors	r3, r1
    651e:	b29b      	uxth	r3, r3
    6520:	0055      	lsls	r5, r2, #1
    6522:	0412      	lsls	r2, r2, #16
    6524:	d400      	bmi.n	6528 <bloomFilterAddressCheck+0xf40>
    6526:	e5ba      	b.n	609e <bloomFilterAddressCheck+0xab6>
    6528:	1c1d      	adds	r5, r3, #0
    652a:	e5b8      	b.n	609e <bloomFilterAddressCheck+0xab6>
    652c:	1c1a      	adds	r2, r3, #0
    652e:	e59b      	b.n	6068 <bloomFilterAddressCheck+0xa80>
    6530:	1c19      	adds	r1, r3, #0
    6532:	e590      	b.n	6056 <bloomFilterAddressCheck+0xa6e>
    6534:	1c1a      	adds	r2, r3, #0
    6536:	e585      	b.n	6044 <bloomFilterAddressCheck+0xa5c>
    6538:	1c11      	adds	r1, r2, #0
    653a:	e57a      	b.n	6032 <bloomFilterAddressCheck+0xa4a>
    653c:	1c0b      	adds	r3, r1, #0
    653e:	e56f      	b.n	6020 <bloomFilterAddressCheck+0xa38>
    6540:	1c1a      	adds	r2, r3, #0
    6542:	e562      	b.n	600a <bloomFilterAddressCheck+0xa22>
    6544:	1c19      	adds	r1, r3, #0
    6546:	e557      	b.n	5ff8 <bloomFilterAddressCheck+0xa10>
    6548:	1c1a      	adds	r2, r3, #0
    654a:	e54c      	b.n	5fe6 <bloomFilterAddressCheck+0x9fe>
    654c:	1c19      	adds	r1, r3, #0
    654e:	e541      	b.n	5fd4 <bloomFilterAddressCheck+0x9ec>
    6550:	1c1a      	adds	r2, r3, #0
    6552:	e536      	b.n	5fc2 <bloomFilterAddressCheck+0x9da>
    6554:	1c19      	adds	r1, r3, #0
    6556:	e52b      	b.n	5fb0 <bloomFilterAddressCheck+0x9c8>
    6558:	1c0a      	adds	r2, r1, #0
    655a:	e520      	b.n	5f9e <bloomFilterAddressCheck+0x9b6>
    655c:	1c13      	adds	r3, r2, #0
    655e:	e515      	b.n	5f8c <bloomFilterAddressCheck+0x9a4>
    6560:	1c02      	adds	r2, r0, #0
    6562:	e509      	b.n	5f78 <bloomFilterAddressCheck+0x990>
    6564:	1c03      	adds	r3, r0, #0
    6566:	e4fd      	b.n	5f64 <bloomFilterAddressCheck+0x97c>
    6568:	1c02      	adds	r2, r0, #0
    656a:	e4f1      	b.n	5f50 <bloomFilterAddressCheck+0x968>
    656c:	1c03      	adds	r3, r0, #0
    656e:	e4e5      	b.n	5f3c <bloomFilterAddressCheck+0x954>
    6570:	1c02      	adds	r2, r0, #0
    6572:	e4d9      	b.n	5f28 <bloomFilterAddressCheck+0x940>
    6574:	1c03      	adds	r3, r0, #0
    6576:	e4cd      	b.n	5f14 <bloomFilterAddressCheck+0x92c>
    6578:	1c02      	adds	r2, r0, #0
    657a:	e4c1      	b.n	5f00 <bloomFilterAddressCheck+0x918>
    657c:	1c23      	adds	r3, r4, #0
    657e:	e4b5      	b.n	5eec <bloomFilterAddressCheck+0x904>
    6580:	1c22      	adds	r2, r4, #0
    6582:	e4a8      	b.n	5ed6 <bloomFilterAddressCheck+0x8ee>
    6584:	1c23      	adds	r3, r4, #0
    6586:	e49c      	b.n	5ec2 <bloomFilterAddressCheck+0x8da>
    6588:	1c22      	adds	r2, r4, #0
    658a:	e490      	b.n	5eae <bloomFilterAddressCheck+0x8c6>
    658c:	1c23      	adds	r3, r4, #0
    658e:	e484      	b.n	5e9a <bloomFilterAddressCheck+0x8b2>
    6590:	1c22      	adds	r2, r4, #0
    6592:	e478      	b.n	5e86 <bloomFilterAddressCheck+0x89e>
    6594:	1c23      	adds	r3, r4, #0
    6596:	e46c      	b.n	5e72 <bloomFilterAddressCheck+0x88a>
    6598:	1c22      	adds	r2, r4, #0
    659a:	e460      	b.n	5e5e <bloomFilterAddressCheck+0x876>
    659c:	1c2b      	adds	r3, r5, #0
    659e:	e454      	b.n	5e4a <bloomFilterAddressCheck+0x862>
    65a0:	1c2a      	adds	r2, r5, #0
    65a2:	e447      	b.n	5e34 <bloomFilterAddressCheck+0x84c>
    65a4:	1c2b      	adds	r3, r5, #0
    65a6:	e43b      	b.n	5e20 <bloomFilterAddressCheck+0x838>
    65a8:	1c19      	adds	r1, r3, #0
    65aa:	b28a      	uxth	r2, r1
    65ac:	4b28      	ldr	r3, [pc, #160]	; (6650 <bloomFilterAddressCheck+0x1068>)
    65ae:	0052      	lsls	r2, r2, #1
    65b0:	4053      	eors	r3, r2
    65b2:	b29b      	uxth	r3, r3
    65b4:	0048      	lsls	r0, r1, #1
    65b6:	040a      	lsls	r2, r1, #16
    65b8:	d400      	bmi.n	65bc <bloomFilterAddressCheck+0xfd4>
    65ba:	e5fe      	b.n	61ba <bloomFilterAddressCheck+0xbd2>
    65bc:	1c18      	adds	r0, r3, #0
    65be:	b282      	uxth	r2, r0
    65c0:	4b23      	ldr	r3, [pc, #140]	; (6650 <bloomFilterAddressCheck+0x1068>)
    65c2:	0052      	lsls	r2, r2, #1
    65c4:	4053      	eors	r3, r2
    65c6:	b29b      	uxth	r3, r3
    65c8:	0042      	lsls	r2, r0, #1
    65ca:	0401      	lsls	r1, r0, #16
    65cc:	d400      	bmi.n	65d0 <bloomFilterAddressCheck+0xfe8>
    65ce:	e5fd      	b.n	61cc <bloomFilterAddressCheck+0xbe4>
    65d0:	1c1a      	adds	r2, r3, #0
    65d2:	e5fb      	b.n	61cc <bloomFilterAddressCheck+0xbe4>
    65d4:	1c1a      	adds	r2, r3, #0
    65d6:	e5de      	b.n	6196 <bloomFilterAddressCheck+0xbae>
    65d8:	1c19      	adds	r1, r3, #0
    65da:	e5d3      	b.n	6184 <bloomFilterAddressCheck+0xb9c>
    65dc:	1c1a      	adds	r2, r3, #0
    65de:	e5c8      	b.n	6172 <bloomFilterAddressCheck+0xb8a>
    65e0:	1c11      	adds	r1, r2, #0
    65e2:	e5bd      	b.n	6160 <bloomFilterAddressCheck+0xb78>
    65e4:	1c13      	adds	r3, r2, #0
    65e6:	e5b2      	b.n	614e <bloomFilterAddressCheck+0xb66>
    65e8:	1c1d      	adds	r5, r3, #0
    65ea:	e5a2      	b.n	6132 <bloomFilterAddressCheck+0xb4a>
    65ec:	1c1a      	adds	r2, r3, #0
    65ee:	e597      	b.n	6120 <bloomFilterAddressCheck+0xb38>
    65f0:	1c19      	adds	r1, r3, #0
    65f2:	e58c      	b.n	610e <bloomFilterAddressCheck+0xb26>
    65f4:	1c1a      	adds	r2, r3, #0
    65f6:	e581      	b.n	60fc <bloomFilterAddressCheck+0xb14>
    65f8:	1c19      	adds	r1, r3, #0
    65fa:	e576      	b.n	60ea <bloomFilterAddressCheck+0xb02>
    65fc:	1c1a      	adds	r2, r3, #0
    65fe:	e56b      	b.n	60d8 <bloomFilterAddressCheck+0xaf0>
    6600:	1c11      	adds	r1, r2, #0
    6602:	e560      	b.n	60c6 <bloomFilterAddressCheck+0xade>
    6604:	1c13      	adds	r3, r2, #0
    6606:	e555      	b.n	60b4 <bloomFilterAddressCheck+0xacc>
    6608:	1c0a      	adds	r2, r1, #0
    660a:	e61d      	b.n	6248 <bloomFilterAddressCheck+0xc60>
    660c:	1c0b      	adds	r3, r1, #0
    660e:	e611      	b.n	6234 <bloomFilterAddressCheck+0xc4c>
    6610:	1c0a      	adds	r2, r1, #0
    6612:	e605      	b.n	6220 <bloomFilterAddressCheck+0xc38>
    6614:	1c0b      	adds	r3, r1, #0
    6616:	e5f9      	b.n	620c <bloomFilterAddressCheck+0xc24>
    6618:	1c0a      	adds	r2, r1, #0
    661a:	e5ed      	b.n	61f8 <bloomFilterAddressCheck+0xc10>
    661c:	1c03      	adds	r3, r0, #0
    661e:	e5e1      	b.n	61e4 <bloomFilterAddressCheck+0xbfc>
    6620:	1c2a      	adds	r2, r5, #0
    6622:	f7ff fbf3 	bl	5e0c <bloomFilterAddressCheck+0x824>
    6626:	1c2b      	adds	r3, r5, #0
    6628:	f7ff fbe5 	bl	5df6 <bloomFilterAddressCheck+0x80e>
    662c:	1c2a      	adds	r2, r5, #0
    662e:	f7ff fbd7 	bl	5de0 <bloomFilterAddressCheck+0x7f8>
    6632:	1c2b      	adds	r3, r5, #0
    6634:	f7ff fbc9 	bl	5dca <bloomFilterAddressCheck+0x7e2>
    6638:	1c2a      	adds	r2, r5, #0
    663a:	f7ff fbbb 	bl	5db4 <bloomFilterAddressCheck+0x7cc>
    663e:	1c13      	adds	r3, r2, #0
    6640:	f7ff fbac 	bl	5d9c <bloomFilterAddressCheck+0x7b4>
    6644:	464a      	mov	r2, r9
    6646:	f7ff fb8e 	bl	5d66 <bloomFilterAddressCheck+0x77e>
    664a:	1c2a      	adds	r2, r5, #0
    664c:	f7ff fb4a 	bl	5ce4 <bloomFilterAddressCheck+0x6fc>
    6650:	ffff8005 	.word	0xffff8005

00006654 <handleCommissiongMessage>:
    6654:	b510      	push	{r4, lr}
    6656:	780b      	ldrb	r3, [r1, #0]
    6658:	2b21      	cmp	r3, #33	; 0x21
    665a:	d105      	bne.n	6668 <handleCommissiongMessage+0x14>
    665c:	88c3      	ldrh	r3, [r0, #6]
    665e:	2b00      	cmp	r3, #0
    6660:	d102      	bne.n	6668 <handleCommissiongMessage+0x14>
    6662:	784b      	ldrb	r3, [r1, #1]
    6664:	2b08      	cmp	r3, #8
    6666:	d000      	beq.n	666a <handleCommissiongMessage+0x16>
    6668:	bd10      	pop	{r4, pc}
    666a:	3102      	adds	r1, #2
    666c:	2208      	movs	r2, #8
    666e:	4b02      	ldr	r3, [pc, #8]	; (6678 <handleCommissiongMessage+0x24>)
    6670:	4802      	ldr	r0, [pc, #8]	; (667c <handleCommissiongMessage+0x28>)
    6672:	4798      	blx	r3
    6674:	e7f8      	b.n	6668 <handleCommissiongMessage+0x14>
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	0000932f 	.word	0x0000932f
    667c:	200030b4 	.word	0x200030b4

00006680 <MiApp_SubscribeDataIndicationCallback>:
    6680:	2800      	cmp	r0, #0
    6682:	d003      	beq.n	668c <MiApp_SubscribeDataIndicationCallback+0xc>
    6684:	4b02      	ldr	r3, [pc, #8]	; (6690 <MiApp_SubscribeDataIndicationCallback+0x10>)
    6686:	6018      	str	r0, [r3, #0]
    6688:	2001      	movs	r0, #1
    668a:	4770      	bx	lr
    668c:	2000      	movs	r0, #0
    668e:	e7fc      	b.n	668a <MiApp_SubscribeDataIndicationCallback+0xa>
    6690:	200003d8 	.word	0x200003d8

00006694 <prepareGenericHeader>:
    6694:	b510      	push	{r4, lr}
    6696:	2403      	movs	r4, #3
    6698:	7018      	strb	r0, [r3, #0]
    669a:	7858      	ldrb	r0, [r3, #1]
    669c:	809a      	strh	r2, [r3, #4]
    669e:	43a0      	bics	r0, r4
    66a0:	2401      	movs	r4, #1
    66a2:	4304      	orrs	r4, r0
    66a4:	20f7      	movs	r0, #247	; 0xf7
    66a6:	4020      	ands	r0, r4
    66a8:	2404      	movs	r4, #4
    66aa:	4320      	orrs	r0, r4
    66ac:	2447      	movs	r4, #71	; 0x47
    66ae:	4020      	ands	r0, r4
    66b0:	7058      	strb	r0, [r3, #1]
    66b2:	4802      	ldr	r0, [pc, #8]	; (66bc <prepareGenericHeader+0x28>)
    66b4:	80d9      	strh	r1, [r3, #6]
    66b6:	8800      	ldrh	r0, [r0, #0]
    66b8:	8058      	strh	r0, [r3, #2]
    66ba:	bd10      	pop	{r4, pc}
    66bc:	20003070 	.word	0x20003070

000066c0 <generalFrameConstruct>:
    66c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66c2:	000c      	movs	r4, r1
    66c4:	7802      	ldrb	r2, [r0, #0]
    66c6:	0003      	movs	r3, r0
    66c8:	700a      	strb	r2, [r1, #0]
    66ca:	7842      	ldrb	r2, [r0, #1]
    66cc:	704a      	strb	r2, [r1, #1]
    66ce:	491d      	ldr	r1, [pc, #116]	; (6744 <generalFrameConstruct+0x84>)
    66d0:	780a      	ldrb	r2, [r1, #0]
    66d2:	3201      	adds	r2, #1
    66d4:	b2d2      	uxtb	r2, r2
    66d6:	70a2      	strb	r2, [r4, #2]
    66d8:	700a      	strb	r2, [r1, #0]
    66da:	7842      	ldrb	r2, [r0, #1]
    66dc:	0691      	lsls	r1, r2, #26
    66de:	d42b      	bmi.n	6738 <generalFrameConstruct+0x78>
    66e0:	8842      	ldrh	r2, [r0, #2]
    66e2:	2516      	movs	r5, #22
    66e4:	70e2      	strb	r2, [r4, #3]
    66e6:	8842      	ldrh	r2, [r0, #2]
    66e8:	260e      	movs	r6, #14
    66ea:	0a12      	lsrs	r2, r2, #8
    66ec:	7122      	strb	r2, [r4, #4]
    66ee:	8882      	ldrh	r2, [r0, #4]
    66f0:	210a      	movs	r1, #10
    66f2:	7162      	strb	r2, [r4, #5]
    66f4:	8882      	ldrh	r2, [r0, #4]
    66f6:	2709      	movs	r7, #9
    66f8:	0a12      	lsrs	r2, r2, #8
    66fa:	71a2      	strb	r2, [r4, #6]
    66fc:	88c2      	ldrh	r2, [r0, #6]
    66fe:	71e2      	strb	r2, [r4, #7]
    6700:	88c2      	ldrh	r2, [r0, #6]
    6702:	0a12      	lsrs	r2, r2, #8
    6704:	7222      	strb	r2, [r4, #8]
    6706:	7842      	ldrb	r2, [r0, #1]
    6708:	2009      	movs	r0, #9
    670a:	0752      	lsls	r2, r2, #29
    670c:	d513      	bpl.n	6736 <generalFrameConstruct+0x76>
    670e:	4a0e      	ldr	r2, [pc, #56]	; (6748 <generalFrameConstruct+0x88>)
    6710:	6810      	ldr	r0, [r2, #0]
    6712:	2220      	movs	r2, #32
    6714:	5c82      	ldrb	r2, [r0, r2]
    6716:	480d      	ldr	r0, [pc, #52]	; (674c <generalFrameConstruct+0x8c>)
    6718:	741a      	strb	r2, [r3, #16]
    671a:	6800      	ldr	r0, [r0, #0]
    671c:	3314      	adds	r3, #20
    671e:	6018      	str	r0, [r3, #0]
    6720:	55e2      	strb	r2, [r4, r7]
    6722:	1860      	adds	r0, r4, r1
    6724:	2204      	movs	r2, #4
    6726:	0019      	movs	r1, r3
    6728:	4f09      	ldr	r7, [pc, #36]	; (6750 <generalFrameConstruct+0x90>)
    672a:	47b8      	blx	r7
    672c:	19a0      	adds	r0, r4, r6
    672e:	2208      	movs	r2, #8
    6730:	4908      	ldr	r1, [pc, #32]	; (6754 <generalFrameConstruct+0x94>)
    6732:	47b8      	blx	r7
    6734:	0028      	movs	r0, r5
    6736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6738:	2510      	movs	r5, #16
    673a:	2608      	movs	r6, #8
    673c:	2104      	movs	r1, #4
    673e:	2703      	movs	r7, #3
    6740:	2003      	movs	r0, #3
    6742:	e7e2      	b.n	670a <generalFrameConstruct+0x4a>
    6744:	20003058 	.word	0x20003058
    6748:	20003040 	.word	0x20003040
    674c:	200030cc 	.word	0x200030cc
    6750:	0000932f 	.word	0x0000932f
    6754:	20000090 	.word	0x20000090

00006758 <frameTransmit>:
    6758:	b5f0      	push	{r4, r5, r6, r7, lr}
    675a:	4657      	mov	r7, sl
    675c:	464e      	mov	r6, r9
    675e:	46de      	mov	lr, fp
    6760:	4645      	mov	r5, r8
    6762:	b5e0      	push	{r5, r6, r7, lr}
    6764:	b085      	sub	sp, #20
    6766:	4699      	mov	r9, r3
    6768:	ab0e      	add	r3, sp, #56	; 0x38
    676a:	781e      	ldrb	r6, [r3, #0]
    676c:	ab10      	add	r3, sp, #64	; 0x40
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	0007      	movs	r7, r0
    6772:	469a      	mov	sl, r3
    6774:	2028      	movs	r0, #40	; 0x28
    6776:	4b45      	ldr	r3, [pc, #276]	; (688c <frameTransmit+0x134>)
    6778:	4688      	mov	r8, r1
    677a:	9203      	str	r2, [sp, #12]
    677c:	4798      	blx	r3
    677e:	1e04      	subs	r4, r0, #0
    6780:	d100      	bne.n	6784 <frameTransmit+0x2c>
    6782:	e081      	b.n	6888 <frameTransmit+0x130>
    6784:	2300      	movs	r3, #0
    6786:	7603      	strb	r3, [r0, #24]
    6788:	787b      	ldrb	r3, [r7, #1]
    678a:	075b      	lsls	r3, r3, #29
    678c:	d45b      	bmi.n	6846 <frameTransmit+0xee>
    678e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6790:	781a      	ldrb	r2, [r3, #0]
    6792:	785b      	ldrb	r3, [r3, #1]
    6794:	2e02      	cmp	r6, #2
    6796:	d06b      	beq.n	6870 <frameTransmit+0x118>
    6798:	2101      	movs	r1, #1
    679a:	2200      	movs	r2, #0
    679c:	2020      	movs	r0, #32
    679e:	7e23      	ldrb	r3, [r4, #24]
    67a0:	0149      	lsls	r1, r1, #5
    67a2:	4383      	bics	r3, r0
    67a4:	430b      	orrs	r3, r1
    67a6:	2104      	movs	r1, #4
    67a8:	0092      	lsls	r2, r2, #2
    67aa:	438b      	bics	r3, r1
    67ac:	4313      	orrs	r3, r2
    67ae:	2208      	movs	r2, #8
    67b0:	4393      	bics	r3, r2
    67b2:	7623      	strb	r3, [r4, #24]
    67b4:	4b36      	ldr	r3, [pc, #216]	; (6890 <frameTransmit+0x138>)
    67b6:	881a      	ldrh	r2, [r3, #0]
    67b8:	4b36      	ldr	r3, [pc, #216]	; (6894 <frameTransmit+0x13c>)
    67ba:	429a      	cmp	r2, r3
    67bc:	d062      	beq.n	6884 <frameTransmit+0x12c>
    67be:	787a      	ldrb	r2, [r7, #1]
    67c0:	2301      	movs	r3, #1
    67c2:	4211      	tst	r1, r2
    67c4:	d136      	bne.n	6834 <frameTransmit+0xdc>
    67c6:	2221      	movs	r2, #33	; 0x21
    67c8:	54a3      	strb	r3, [r4, r2]
    67ca:	1eb3      	subs	r3, r6, #2
    67cc:	425a      	negs	r2, r3
    67ce:	4153      	adcs	r3, r2
    67d0:	2220      	movs	r2, #32
    67d2:	2101      	movs	r1, #1
    67d4:	54a3      	strb	r3, [r4, r2]
    67d6:	7e23      	ldrb	r3, [r4, #24]
    67d8:	089a      	lsrs	r2, r3, #2
    67da:	4051      	eors	r1, r2
    67dc:	2201      	movs	r2, #1
    67de:	400a      	ands	r2, r1
    67e0:	2140      	movs	r1, #64	; 0x40
    67e2:	0192      	lsls	r2, r2, #6
    67e4:	438b      	bics	r3, r1
    67e6:	4313      	orrs	r3, r2
    67e8:	2280      	movs	r2, #128	; 0x80
    67ea:	4252      	negs	r2, r2
    67ec:	4313      	orrs	r3, r2
    67ee:	7623      	strb	r3, [r4, #24]
    67f0:	887b      	ldrh	r3, [r7, #2]
    67f2:	0027      	movs	r7, r4
    67f4:	8463      	strh	r3, [r4, #34]	; 0x22
    67f6:	464b      	mov	r3, r9
    67f8:	3708      	adds	r7, #8
    67fa:	6163      	str	r3, [r4, #20]
    67fc:	0032      	movs	r2, r6
    67fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6800:	4b25      	ldr	r3, [pc, #148]	; (6898 <frameTransmit+0x140>)
    6802:	0038      	movs	r0, r7
    6804:	4798      	blx	r3
    6806:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6808:	4652      	mov	r2, sl
    680a:	6123      	str	r3, [r4, #16]
    680c:	2325      	movs	r3, #37	; 0x25
    680e:	61e7      	str	r7, [r4, #28]
    6810:	54e2      	strb	r2, [r4, r3]
    6812:	9b03      	ldr	r3, [sp, #12]
    6814:	4821      	ldr	r0, [pc, #132]	; (689c <frameTransmit+0x144>)
    6816:	4443      	add	r3, r8
    6818:	001d      	movs	r5, r3
    681a:	2324      	movs	r3, #36	; 0x24
    681c:	0021      	movs	r1, r4
    681e:	54e5      	strb	r5, [r4, r3]
    6820:	4b1f      	ldr	r3, [pc, #124]	; (68a0 <frameTransmit+0x148>)
    6822:	4798      	blx	r3
    6824:	2001      	movs	r0, #1
    6826:	b005      	add	sp, #20
    6828:	bc3c      	pop	{r2, r3, r4, r5}
    682a:	4690      	mov	r8, r2
    682c:	4699      	mov	r9, r3
    682e:	46a2      	mov	sl, r4
    6830:	46ab      	mov	fp, r5
    6832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6834:	2100      	movs	r1, #0
    6836:	4a1b      	ldr	r2, [pc, #108]	; (68a4 <frameTransmit+0x14c>)
    6838:	7812      	ldrb	r2, [r2, #0]
    683a:	3a06      	subs	r2, #6
    683c:	b2d2      	uxtb	r2, r2
    683e:	4293      	cmp	r3, r2
    6840:	4149      	adcs	r1, r1
    6842:	b2cb      	uxtb	r3, r1
    6844:	e7bf      	b.n	67c6 <frameTransmit+0x6e>
    6846:	4b18      	ldr	r3, [pc, #96]	; (68a8 <frameTransmit+0x150>)
    6848:	0030      	movs	r0, r6
    684a:	4798      	blx	r3
    684c:	464b      	mov	r3, r9
    684e:	9000      	str	r0, [sp, #0]
    6850:	9a03      	ldr	r2, [sp, #12]
    6852:	4641      	mov	r1, r8
    6854:	0038      	movs	r0, r7
    6856:	4d15      	ldr	r5, [pc, #84]	; (68ac <frameTransmit+0x154>)
    6858:	47a8      	blx	r5
    685a:	28ff      	cmp	r0, #255	; 0xff
    685c:	d014      	beq.n	6888 <frameTransmit+0x130>
    685e:	9b03      	ldr	r3, [sp, #12]
    6860:	181d      	adds	r5, r3, r0
    6862:	b2eb      	uxtb	r3, r5
    6864:	9303      	str	r3, [sp, #12]
    6866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6868:	781a      	ldrb	r2, [r3, #0]
    686a:	785b      	ldrb	r3, [r3, #1]
    686c:	2e02      	cmp	r6, #2
    686e:	d193      	bne.n	6798 <frameTransmit+0x40>
    6870:	021b      	lsls	r3, r3, #8
    6872:	189b      	adds	r3, r3, r2
    6874:	4a07      	ldr	r2, [pc, #28]	; (6894 <frameTransmit+0x13c>)
    6876:	b29b      	uxth	r3, r3
    6878:	4293      	cmp	r3, r2
    687a:	d000      	beq.n	687e <frameTransmit+0x126>
    687c:	e78c      	b.n	6798 <frameTransmit+0x40>
    687e:	2100      	movs	r1, #0
    6880:	2201      	movs	r2, #1
    6882:	e78b      	b.n	679c <frameTransmit+0x44>
    6884:	2300      	movs	r3, #0
    6886:	e79e      	b.n	67c6 <frameTransmit+0x6e>
    6888:	2000      	movs	r0, #0
    688a:	e7cc      	b.n	6826 <frameTransmit+0xce>
    688c:	000033a1 	.word	0x000033a1
    6890:	20003084 	.word	0x20003084
    6894:	0000ffff 	.word	0x0000ffff
    6898:	0000932f 	.word	0x0000932f
    689c:	20003078 	.word	0x20003078
    68a0:	0000350d 	.word	0x0000350d
    68a4:	200003c0 	.word	0x200003c0
    68a8:	00008da5 	.word	0x00008da5
    68ac:	00008dc9 	.word	0x00008dc9

000068b0 <sendDataFrame>:
    68b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68b2:	464e      	mov	r6, r9
    68b4:	4657      	mov	r7, sl
    68b6:	4645      	mov	r5, r8
    68b8:	46de      	mov	lr, fp
    68ba:	b5e0      	push	{r5, r6, r7, lr}
    68bc:	b091      	sub	sp, #68	; 0x44
    68be:	ab04      	add	r3, sp, #16
    68c0:	469c      	mov	ip, r3
    68c2:	270e      	movs	r7, #14
    68c4:	4bc3      	ldr	r3, [pc, #780]	; (6bd4 <sendDataFrame+0x324>)
    68c6:	4467      	add	r7, ip
    68c8:	4699      	mov	r9, r3
    68ca:	881b      	ldrh	r3, [r3, #0]
    68cc:	b28d      	uxth	r5, r1
    68ce:	0006      	movs	r6, r0
    68d0:	9202      	str	r2, [sp, #8]
    68d2:	9703      	str	r7, [sp, #12]
    68d4:	8039      	strh	r1, [r7, #0]
    68d6:	42ab      	cmp	r3, r5
    68d8:	d100      	bne.n	68dc <sendDataFrame+0x2c>
    68da:	e119      	b.n	6b10 <sendDataFrame+0x260>
    68dc:	2800      	cmp	r0, #0
    68de:	d100      	bne.n	68e2 <sendDataFrame+0x32>
    68e0:	e114      	b.n	6b0c <sendDataFrame+0x25c>
    68e2:	2078      	movs	r0, #120	; 0x78
    68e4:	4bbc      	ldr	r3, [pc, #752]	; (6bd8 <sendDataFrame+0x328>)
    68e6:	4798      	blx	r3
    68e8:	4680      	mov	r8, r0
    68ea:	2800      	cmp	r0, #0
    68ec:	d100      	bne.n	68f0 <sendDataFrame+0x40>
    68ee:	e108      	b.n	6b02 <sendDataFrame+0x252>
    68f0:	2108      	movs	r1, #8
    68f2:	8bb2      	ldrh	r2, [r6, #28]
    68f4:	ac08      	add	r4, sp, #32
    68f6:	4694      	mov	ip, r2
    68f8:	7862      	ldrb	r2, [r4, #1]
    68fa:	8bf3      	ldrh	r3, [r6, #30]
    68fc:	438a      	bics	r2, r1
    68fe:	2104      	movs	r1, #4
    6900:	430a      	orrs	r2, r1
    6902:	49b6      	ldr	r1, [pc, #728]	; (6bdc <sendDataFrame+0x32c>)
    6904:	80e3      	strh	r3, [r4, #6]
    6906:	8809      	ldrh	r1, [r1, #0]
    6908:	7e73      	ldrb	r3, [r6, #25]
    690a:	8061      	strh	r1, [r4, #2]
    690c:	4661      	mov	r1, ip
    690e:	469c      	mov	ip, r3
    6910:	2303      	movs	r3, #3
    6912:	469a      	mov	sl, r3
    6914:	80a1      	strh	r1, [r4, #4]
    6916:	4663      	mov	r3, ip
    6918:	4651      	mov	r1, sl
    691a:	2720      	movs	r7, #32
    691c:	400b      	ands	r3, r1
    691e:	469b      	mov	fp, r3
    6920:	237f      	movs	r3, #127	; 0x7f
    6922:	b2d2      	uxtb	r2, r2
    6924:	43ba      	bics	r2, r7
    6926:	4013      	ands	r3, r2
    6928:	4652      	mov	r2, sl
    692a:	438b      	bics	r3, r1
    692c:	4661      	mov	r1, ip
    692e:	320d      	adds	r2, #13
    6930:	400a      	ands	r2, r1
    6932:	4659      	mov	r1, fp
    6934:	430b      	orrs	r3, r1
    6936:	2110      	movs	r1, #16
    6938:	438b      	bics	r3, r1
    693a:	431a      	orrs	r2, r3
    693c:	20ff      	movs	r0, #255	; 0xff
    693e:	4643      	mov	r3, r8
    6940:	7062      	strb	r2, [r4, #1]
    6942:	4642      	mov	r2, r8
    6944:	7020      	strb	r0, [r4, #0]
    6946:	7018      	strb	r0, [r3, #0]
    6948:	7863      	ldrb	r3, [r4, #1]
    694a:	7053      	strb	r3, [r2, #1]
    694c:	4ba4      	ldr	r3, [pc, #656]	; (6be0 <sendDataFrame+0x330>)
    694e:	469a      	mov	sl, r3
    6950:	4652      	mov	r2, sl
    6952:	781b      	ldrb	r3, [r3, #0]
    6954:	3301      	adds	r3, #1
    6956:	b2db      	uxtb	r3, r3
    6958:	7013      	strb	r3, [r2, #0]
    695a:	4642      	mov	r2, r8
    695c:	7093      	strb	r3, [r2, #2]
    695e:	7863      	ldrb	r3, [r4, #1]
    6960:	421f      	tst	r7, r3
    6962:	d100      	bne.n	6966 <sendDataFrame+0xb6>
    6964:	e08e      	b.n	6a84 <sendDataFrame+0x1d4>
    6966:	2210      	movs	r2, #16
    6968:	2103      	movs	r1, #3
    696a:	0017      	movs	r7, r2
    696c:	9206      	str	r2, [sp, #24]
    696e:	3a08      	subs	r2, #8
    6970:	4693      	mov	fp, r2
    6972:	2003      	movs	r0, #3
    6974:	3a04      	subs	r2, #4
    6976:	9105      	str	r1, [sp, #20]
    6978:	075b      	lsls	r3, r3, #29
    697a:	d500      	bpl.n	697e <sendDataFrame+0xce>
    697c:	e09e      	b.n	6abc <sendDataFrame+0x20c>
    697e:	4b99      	ldr	r3, [pc, #612]	; (6be4 <sendDataFrame+0x334>)
    6980:	9304      	str	r3, [sp, #16]
    6982:	7cf3      	ldrb	r3, [r6, #19]
    6984:	2b00      	cmp	r3, #0
    6986:	d100      	bne.n	698a <sendDataFrame+0xda>
    6988:	e0b6      	b.n	6af8 <sendDataFrame+0x248>
    698a:	2320      	movs	r3, #32
    698c:	4642      	mov	r2, r8
    698e:	5cf3      	ldrb	r3, [r6, r3]
    6990:	7093      	strb	r3, [r2, #2]
    6992:	4653      	mov	r3, sl
    6994:	4652      	mov	r2, sl
    6996:	781b      	ldrb	r3, [r3, #0]
    6998:	3b01      	subs	r3, #1
    699a:	7013      	strb	r3, [r2, #0]
    699c:	2338      	movs	r3, #56	; 0x38
    699e:	0031      	movs	r1, r6
    69a0:	469a      	mov	sl, r3
    69a2:	5cf2      	ldrb	r2, [r6, r3]
    69a4:	4440      	add	r0, r8
    69a6:	9b04      	ldr	r3, [sp, #16]
    69a8:	3139      	adds	r1, #57	; 0x39
    69aa:	4798      	blx	r3
    69ac:	4653      	mov	r3, sl
    69ae:	5cf3      	ldrb	r3, [r6, r3]
    69b0:	469b      	mov	fp, r3
    69b2:	4b8d      	ldr	r3, [pc, #564]	; (6be8 <sendDataFrame+0x338>)
    69b4:	429d      	cmp	r5, r3
    69b6:	d100      	bne.n	69ba <sendDataFrame+0x10a>
    69b8:	e0d1      	b.n	6b5e <sendDataFrame+0x2ae>
    69ba:	7cb3      	ldrb	r3, [r6, #18]
    69bc:	2028      	movs	r0, #40	; 0x28
    69be:	469a      	mov	sl, r3
    69c0:	4b85      	ldr	r3, [pc, #532]	; (6bd8 <sendDataFrame+0x328>)
    69c2:	4798      	blx	r3
    69c4:	1e05      	subs	r5, r0, #0
    69c6:	d100      	bne.n	69ca <sendDataFrame+0x11a>
    69c8:	e09b      	b.n	6b02 <sendDataFrame+0x252>
    69ca:	2300      	movs	r3, #0
    69cc:	7603      	strb	r3, [r0, #24]
    69ce:	7863      	ldrb	r3, [r4, #1]
    69d0:	075b      	lsls	r3, r3, #29
    69d2:	d500      	bpl.n	69d6 <sendDataFrame+0x126>
    69d4:	e0ae      	b.n	6b34 <sendDataFrame+0x284>
    69d6:	9b03      	ldr	r3, [sp, #12]
    69d8:	785a      	ldrb	r2, [r3, #1]
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	0212      	lsls	r2, r2, #8
    69de:	189b      	adds	r3, r3, r2
    69e0:	4a81      	ldr	r2, [pc, #516]	; (6be8 <sendDataFrame+0x338>)
    69e2:	b29b      	uxth	r3, r3
    69e4:	4293      	cmp	r3, r2
    69e6:	d100      	bne.n	69ea <sendDataFrame+0x13a>
    69e8:	e0b4      	b.n	6b54 <sendDataFrame+0x2a4>
    69ea:	2201      	movs	r2, #1
    69ec:	2100      	movs	r1, #0
    69ee:	2020      	movs	r0, #32
    69f0:	7e2b      	ldrb	r3, [r5, #24]
    69f2:	0152      	lsls	r2, r2, #5
    69f4:	4383      	bics	r3, r0
    69f6:	4313      	orrs	r3, r2
    69f8:	2204      	movs	r2, #4
    69fa:	0089      	lsls	r1, r1, #2
    69fc:	4393      	bics	r3, r2
    69fe:	430b      	orrs	r3, r1
    6a00:	2108      	movs	r1, #8
    6a02:	438b      	bics	r3, r1
    6a04:	762b      	strb	r3, [r5, #24]
    6a06:	464b      	mov	r3, r9
    6a08:	8819      	ldrh	r1, [r3, #0]
    6a0a:	4b77      	ldr	r3, [pc, #476]	; (6be8 <sendDataFrame+0x338>)
    6a0c:	4299      	cmp	r1, r3
    6a0e:	d100      	bne.n	6a12 <sendDataFrame+0x162>
    6a10:	e0a3      	b.n	6b5a <sendDataFrame+0x2aa>
    6a12:	7861      	ldrb	r1, [r4, #1]
    6a14:	2301      	movs	r3, #1
    6a16:	420a      	tst	r2, r1
    6a18:	d000      	beq.n	6a1c <sendDataFrame+0x16c>
    6a1a:	e082      	b.n	6b22 <sendDataFrame+0x272>
    6a1c:	2221      	movs	r2, #33	; 0x21
    6a1e:	54ab      	strb	r3, [r5, r2]
    6a20:	2320      	movs	r3, #32
    6a22:	2001      	movs	r0, #1
    6a24:	3a20      	subs	r2, #32
    6a26:	54ea      	strb	r2, [r5, r3]
    6a28:	7e2b      	ldrb	r3, [r5, #24]
    6a2a:	0899      	lsrs	r1, r3, #2
    6a2c:	4041      	eors	r1, r0
    6a2e:	400a      	ands	r2, r1
    6a30:	2140      	movs	r1, #64	; 0x40
    6a32:	0192      	lsls	r2, r2, #6
    6a34:	438b      	bics	r3, r1
    6a36:	4313      	orrs	r3, r2
    6a38:	2280      	movs	r2, #128	; 0x80
    6a3a:	4252      	negs	r2, r2
    6a3c:	4313      	orrs	r3, r2
    6a3e:	762b      	strb	r3, [r5, #24]
    6a40:	8863      	ldrh	r3, [r4, #2]
    6a42:	002c      	movs	r4, r5
    6a44:	846b      	strh	r3, [r5, #34]	; 0x22
    6a46:	4643      	mov	r3, r8
    6a48:	3408      	adds	r4, #8
    6a4a:	616b      	str	r3, [r5, #20]
    6a4c:	3282      	adds	r2, #130	; 0x82
    6a4e:	9903      	ldr	r1, [sp, #12]
    6a50:	9b04      	ldr	r3, [sp, #16]
    6a52:	0020      	movs	r0, r4
    6a54:	4798      	blx	r3
    6a56:	9b02      	ldr	r3, [sp, #8]
    6a58:	4652      	mov	r2, sl
    6a5a:	612b      	str	r3, [r5, #16]
    6a5c:	2325      	movs	r3, #37	; 0x25
    6a5e:	61ec      	str	r4, [r5, #28]
    6a60:	54ea      	strb	r2, [r5, r3]
    6a62:	9b05      	ldr	r3, [sp, #20]
    6a64:	0029      	movs	r1, r5
    6a66:	445b      	add	r3, fp
    6a68:	0018      	movs	r0, r3
    6a6a:	2324      	movs	r3, #36	; 0x24
    6a6c:	54e8      	strb	r0, [r5, r3]
    6a6e:	485f      	ldr	r0, [pc, #380]	; (6bec <sendDataFrame+0x33c>)
    6a70:	4b5f      	ldr	r3, [pc, #380]	; (6bf0 <sendDataFrame+0x340>)
    6a72:	4798      	blx	r3
    6a74:	2001      	movs	r0, #1
    6a76:	b011      	add	sp, #68	; 0x44
    6a78:	bc3c      	pop	{r2, r3, r4, r5}
    6a7a:	4690      	mov	r8, r2
    6a7c:	4699      	mov	r9, r3
    6a7e:	46a2      	mov	sl, r4
    6a80:	46ab      	mov	fp, r5
    6a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a84:	4641      	mov	r1, r8
    6a86:	8862      	ldrh	r2, [r4, #2]
    6a88:	38f6      	subs	r0, #246	; 0xf6
    6a8a:	70ca      	strb	r2, [r1, #3]
    6a8c:	8862      	ldrh	r2, [r4, #2]
    6a8e:	0a12      	lsrs	r2, r2, #8
    6a90:	710a      	strb	r2, [r1, #4]
    6a92:	88a2      	ldrh	r2, [r4, #4]
    6a94:	714a      	strb	r2, [r1, #5]
    6a96:	88a2      	ldrh	r2, [r4, #4]
    6a98:	0a12      	lsrs	r2, r2, #8
    6a9a:	718a      	strb	r2, [r1, #6]
    6a9c:	88e2      	ldrh	r2, [r4, #6]
    6a9e:	71ca      	strb	r2, [r1, #7]
    6aa0:	88e2      	ldrh	r2, [r4, #6]
    6aa2:	0a12      	lsrs	r2, r2, #8
    6aa4:	720a      	strb	r2, [r1, #8]
    6aa6:	2216      	movs	r2, #22
    6aa8:	2109      	movs	r1, #9
    6aaa:	0017      	movs	r7, r2
    6aac:	9206      	str	r2, [sp, #24]
    6aae:	3a08      	subs	r2, #8
    6ab0:	4693      	mov	fp, r2
    6ab2:	9105      	str	r1, [sp, #20]
    6ab4:	3a04      	subs	r2, #4
    6ab6:	075b      	lsls	r3, r3, #29
    6ab8:	d400      	bmi.n	6abc <sendDataFrame+0x20c>
    6aba:	e760      	b.n	697e <sendDataFrame+0xce>
    6abc:	4b4d      	ldr	r3, [pc, #308]	; (6bf4 <sendDataFrame+0x344>)
    6abe:	4442      	add	r2, r8
    6ac0:	6819      	ldr	r1, [r3, #0]
    6ac2:	2320      	movs	r3, #32
    6ac4:	5ccb      	ldrb	r3, [r1, r3]
    6ac6:	494c      	ldr	r1, [pc, #304]	; (6bf8 <sendDataFrame+0x348>)
    6ac8:	7423      	strb	r3, [r4, #16]
    6aca:	6809      	ldr	r1, [r1, #0]
    6acc:	6161      	str	r1, [r4, #20]
    6ace:	4641      	mov	r1, r8
    6ad0:	540b      	strb	r3, [r1, r0]
    6ad2:	4b44      	ldr	r3, [pc, #272]	; (6be4 <sendDataFrame+0x334>)
    6ad4:	0010      	movs	r0, r2
    6ad6:	a90d      	add	r1, sp, #52	; 0x34
    6ad8:	2204      	movs	r2, #4
    6ada:	9304      	str	r3, [sp, #16]
    6adc:	4798      	blx	r3
    6ade:	4658      	mov	r0, fp
    6ae0:	9b04      	ldr	r3, [sp, #16]
    6ae2:	4440      	add	r0, r8
    6ae4:	2208      	movs	r2, #8
    6ae6:	4945      	ldr	r1, [pc, #276]	; (6bfc <sendDataFrame+0x34c>)
    6ae8:	4798      	blx	r3
    6aea:	9b06      	ldr	r3, [sp, #24]
    6aec:	0038      	movs	r0, r7
    6aee:	9305      	str	r3, [sp, #20]
    6af0:	7cf3      	ldrb	r3, [r6, #19]
    6af2:	2b00      	cmp	r3, #0
    6af4:	d000      	beq.n	6af8 <sendDataFrame+0x248>
    6af6:	e748      	b.n	698a <sendDataFrame+0xda>
    6af8:	4643      	mov	r3, r8
    6afa:	789a      	ldrb	r2, [r3, #2]
    6afc:	2320      	movs	r3, #32
    6afe:	54f2      	strb	r2, [r6, r3]
    6b00:	e74c      	b.n	699c <sendDataFrame+0xec>
    6b02:	7cb0      	ldrb	r0, [r6, #18]
    6b04:	0032      	movs	r2, r6
    6b06:	2101      	movs	r1, #1
    6b08:	9b02      	ldr	r3, [sp, #8]
    6b0a:	4798      	blx	r3
    6b0c:	2000      	movs	r0, #0
    6b0e:	e7b2      	b.n	6a76 <sendDataFrame+0x1c6>
    6b10:	9b02      	ldr	r3, [sp, #8]
    6b12:	2b00      	cmp	r3, #0
    6b14:	d0fa      	beq.n	6b0c <sendDataFrame+0x25c>
    6b16:	7c80      	ldrb	r0, [r0, #18]
    6b18:	0032      	movs	r2, r6
    6b1a:	2101      	movs	r1, #1
    6b1c:	4798      	blx	r3
    6b1e:	2000      	movs	r0, #0
    6b20:	e7a9      	b.n	6a76 <sendDataFrame+0x1c6>
    6b22:	2100      	movs	r1, #0
    6b24:	4a36      	ldr	r2, [pc, #216]	; (6c00 <sendDataFrame+0x350>)
    6b26:	7812      	ldrb	r2, [r2, #0]
    6b28:	3a06      	subs	r2, #6
    6b2a:	b2d2      	uxtb	r2, r2
    6b2c:	4293      	cmp	r3, r2
    6b2e:	4149      	adcs	r1, r1
    6b30:	b2cb      	uxtb	r3, r1
    6b32:	e773      	b.n	6a1c <sendDataFrame+0x16c>
    6b34:	4b33      	ldr	r3, [pc, #204]	; (6c04 <sendDataFrame+0x354>)
    6b36:	2002      	movs	r0, #2
    6b38:	4798      	blx	r3
    6b3a:	4643      	mov	r3, r8
    6b3c:	9000      	str	r0, [sp, #0]
    6b3e:	465a      	mov	r2, fp
    6b40:	9905      	ldr	r1, [sp, #20]
    6b42:	0020      	movs	r0, r4
    6b44:	4f30      	ldr	r7, [pc, #192]	; (6c08 <sendDataFrame+0x358>)
    6b46:	47b8      	blx	r7
    6b48:	28ff      	cmp	r0, #255	; 0xff
    6b4a:	d0da      	beq.n	6b02 <sendDataFrame+0x252>
    6b4c:	4458      	add	r0, fp
    6b4e:	b2c3      	uxtb	r3, r0
    6b50:	469b      	mov	fp, r3
    6b52:	e740      	b.n	69d6 <sendDataFrame+0x126>
    6b54:	2200      	movs	r2, #0
    6b56:	2101      	movs	r1, #1
    6b58:	e749      	b.n	69ee <sendDataFrame+0x13e>
    6b5a:	2300      	movs	r3, #0
    6b5c:	e75e      	b.n	6a1c <sendDataFrame+0x16c>
    6b5e:	464b      	mov	r3, r9
    6b60:	2228      	movs	r2, #40	; 0x28
    6b62:	881b      	ldrh	r3, [r3, #0]
    6b64:	b29b      	uxth	r3, r3
    6b66:	001f      	movs	r7, r3
    6b68:	4b28      	ldr	r3, [pc, #160]	; (6c0c <sendDataFrame+0x35c>)
    6b6a:	681b      	ldr	r3, [r3, #0]
    6b6c:	5c9a      	ldrb	r2, [r3, r2]
    6b6e:	2a00      	cmp	r2, #0
    6b70:	d100      	bne.n	6b74 <sendDataFrame+0x2c4>
    6b72:	e722      	b.n	69ba <sendDataFrame+0x10a>
    6b74:	6998      	ldr	r0, [r3, #24]
    6b76:	8803      	ldrh	r3, [r0, #0]
    6b78:	42ab      	cmp	r3, r5
    6b7a:	d028      	beq.n	6bce <sendDataFrame+0x31e>
    6b7c:	3a01      	subs	r2, #1
    6b7e:	b2d2      	uxtb	r2, r2
    6b80:	3201      	adds	r2, #1
    6b82:	0092      	lsls	r2, r2, #2
    6b84:	1d03      	adds	r3, r0, #4
    6b86:	1882      	adds	r2, r0, r2
    6b88:	46ac      	mov	ip, r5
    6b8a:	46b2      	mov	sl, r6
    6b8c:	e006      	b.n	6b9c <sendDataFrame+0x2ec>
    6b8e:	1a1e      	subs	r6, r3, r0
    6b90:	001d      	movs	r5, r3
    6b92:	3304      	adds	r3, #4
    6b94:	1f19      	subs	r1, r3, #4
    6b96:	8809      	ldrh	r1, [r1, #0]
    6b98:	4561      	cmp	r1, ip
    6b9a:	d003      	beq.n	6ba4 <sendDataFrame+0x2f4>
    6b9c:	429a      	cmp	r2, r3
    6b9e:	d1f6      	bne.n	6b8e <sendDataFrame+0x2de>
    6ba0:	4656      	mov	r6, sl
    6ba2:	e70a      	b.n	69ba <sendDataFrame+0x10a>
    6ba4:	4653      	mov	r3, sl
    6ba6:	46aa      	mov	sl, r5
    6ba8:	0035      	movs	r5, r6
    6baa:	001e      	movs	r6, r3
    6bac:	4652      	mov	r2, sl
    6bae:	4643      	mov	r3, r8
    6bb0:	789b      	ldrb	r3, [r3, #2]
    6bb2:	8017      	strh	r7, [r2, #0]
    6bb4:	4a15      	ldr	r2, [pc, #84]	; (6c0c <sendDataFrame+0x35c>)
    6bb6:	6812      	ldr	r2, [r2, #0]
    6bb8:	6992      	ldr	r2, [r2, #24]
    6bba:	1952      	adds	r2, r2, r5
    6bbc:	7093      	strb	r3, [r2, #2]
    6bbe:	2229      	movs	r2, #41	; 0x29
    6bc0:	4b12      	ldr	r3, [pc, #72]	; (6c0c <sendDataFrame+0x35c>)
    6bc2:	681b      	ldr	r3, [r3, #0]
    6bc4:	5c9a      	ldrb	r2, [r3, r2]
    6bc6:	699b      	ldr	r3, [r3, #24]
    6bc8:	195d      	adds	r5, r3, r5
    6bca:	70ea      	strb	r2, [r5, #3]
    6bcc:	e6f5      	b.n	69ba <sendDataFrame+0x10a>
    6bce:	4682      	mov	sl, r0
    6bd0:	2500      	movs	r5, #0
    6bd2:	e7eb      	b.n	6bac <sendDataFrame+0x2fc>
    6bd4:	20003084 	.word	0x20003084
    6bd8:	000033a1 	.word	0x000033a1
    6bdc:	20003070 	.word	0x20003070
    6be0:	20003058 	.word	0x20003058
    6be4:	0000932f 	.word	0x0000932f
    6be8:	0000ffff 	.word	0x0000ffff
    6bec:	20003078 	.word	0x20003078
    6bf0:	0000350d 	.word	0x0000350d
    6bf4:	20003040 	.word	0x20003040
    6bf8:	200030cc 	.word	0x200030cc
    6bfc:	20000090 	.word	0x20000090
    6c00:	200003c0 	.word	0x200003c0
    6c04:	00008da5 	.word	0x00008da5
    6c08:	00008dc9 	.word	0x00008dc9
    6c0c:	2000303c 	.word	0x2000303c

00006c10 <addRebroadcastTableEntry>:
    6c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c12:	46c6      	mov	lr, r8
    6c14:	2228      	movs	r2, #40	; 0x28
    6c16:	b500      	push	{lr}
    6c18:	4e17      	ldr	r6, [pc, #92]	; (6c78 <addRebroadcastTableEntry+0x68>)
    6c1a:	4684      	mov	ip, r0
    6c1c:	6833      	ldr	r3, [r6, #0]
    6c1e:	4688      	mov	r8, r1
    6c20:	5c9a      	ldrb	r2, [r3, r2]
    6c22:	2a00      	cmp	r2, #0
    6c24:	d014      	beq.n	6c50 <addRebroadcastTableEntry+0x40>
    6c26:	699d      	ldr	r5, [r3, #24]
    6c28:	4f14      	ldr	r7, [pc, #80]	; (6c7c <addRebroadcastTableEntry+0x6c>)
    6c2a:	882b      	ldrh	r3, [r5, #0]
    6c2c:	42bb      	cmp	r3, r7
    6c2e:	d012      	beq.n	6c56 <addRebroadcastTableEntry+0x46>
    6c30:	3a01      	subs	r2, #1
    6c32:	b2d2      	uxtb	r2, r2
    6c34:	3201      	adds	r2, #1
    6c36:	0092      	lsls	r2, r2, #2
    6c38:	1d2b      	adds	r3, r5, #4
    6c3a:	18aa      	adds	r2, r5, r2
    6c3c:	e006      	b.n	6c4c <addRebroadcastTableEntry+0x3c>
    6c3e:	1b59      	subs	r1, r3, r5
    6c40:	0018      	movs	r0, r3
    6c42:	3304      	adds	r3, #4
    6c44:	1f1c      	subs	r4, r3, #4
    6c46:	8824      	ldrh	r4, [r4, #0]
    6c48:	42bc      	cmp	r4, r7
    6c4a:	d006      	beq.n	6c5a <addRebroadcastTableEntry+0x4a>
    6c4c:	4293      	cmp	r3, r2
    6c4e:	d1f6      	bne.n	6c3e <addRebroadcastTableEntry+0x2e>
    6c50:	bc04      	pop	{r2}
    6c52:	4690      	mov	r8, r2
    6c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c56:	0028      	movs	r0, r5
    6c58:	2100      	movs	r1, #0
    6c5a:	4663      	mov	r3, ip
    6c5c:	4642      	mov	r2, r8
    6c5e:	8003      	strh	r3, [r0, #0]
    6c60:	6833      	ldr	r3, [r6, #0]
    6c62:	699b      	ldr	r3, [r3, #24]
    6c64:	185b      	adds	r3, r3, r1
    6c66:	709a      	strb	r2, [r3, #2]
    6c68:	2229      	movs	r2, #41	; 0x29
    6c6a:	6833      	ldr	r3, [r6, #0]
    6c6c:	5c9a      	ldrb	r2, [r3, r2]
    6c6e:	699b      	ldr	r3, [r3, #24]
    6c70:	185b      	adds	r3, r3, r1
    6c72:	70da      	strb	r2, [r3, #3]
    6c74:	e7ec      	b.n	6c50 <addRebroadcastTableEntry+0x40>
    6c76:	46c0      	nop			; (mov r8, r8)
    6c78:	2000303c 	.word	0x2000303c
    6c7c:	0000ffff 	.word	0x0000ffff

00006c80 <initRebroadcastTable>:
    6c80:	2328      	movs	r3, #40	; 0x28
    6c82:	b530      	push	{r4, r5, lr}
    6c84:	4809      	ldr	r0, [pc, #36]	; (6cac <initRebroadcastTable+0x2c>)
    6c86:	6802      	ldr	r2, [r0, #0]
    6c88:	5cd1      	ldrb	r1, [r2, r3]
    6c8a:	2300      	movs	r3, #0
    6c8c:	2900      	cmp	r1, #0
    6c8e:	d00b      	beq.n	6ca8 <initRebroadcastTable+0x28>
    6c90:	2501      	movs	r5, #1
    6c92:	2428      	movs	r4, #40	; 0x28
    6c94:	426d      	negs	r5, r5
    6c96:	6992      	ldr	r2, [r2, #24]
    6c98:	0099      	lsls	r1, r3, #2
    6c9a:	528d      	strh	r5, [r1, r2]
    6c9c:	6802      	ldr	r2, [r0, #0]
    6c9e:	3301      	adds	r3, #1
    6ca0:	5d11      	ldrb	r1, [r2, r4]
    6ca2:	b2db      	uxtb	r3, r3
    6ca4:	4299      	cmp	r1, r3
    6ca6:	d8f6      	bhi.n	6c96 <initRebroadcastTable+0x16>
    6ca8:	bd30      	pop	{r4, r5, pc}
    6caa:	46c0      	nop			; (mov r8, r8)
    6cac:	2000303c 	.word	0x2000303c

00006cb0 <rebroadcastTimerHandler>:
    6cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cb2:	46c6      	mov	lr, r8
    6cb4:	2328      	movs	r3, #40	; 0x28
    6cb6:	b500      	push	{lr}
    6cb8:	4e13      	ldr	r6, [pc, #76]	; (6d08 <rebroadcastTimerHandler+0x58>)
    6cba:	6834      	ldr	r4, [r6, #0]
    6cbc:	5ce7      	ldrb	r7, [r4, r3]
    6cbe:	2300      	movs	r3, #0
    6cc0:	2f00      	cmp	r7, #0
    6cc2:	d01e      	beq.n	6d02 <rebroadcastTimerHandler+0x52>
    6cc4:	2201      	movs	r2, #1
    6cc6:	4252      	negs	r2, r2
    6cc8:	4694      	mov	ip, r2
    6cca:	3229      	adds	r2, #41	; 0x29
    6ccc:	4690      	mov	r8, r2
    6cce:	4d0f      	ldr	r5, [pc, #60]	; (6d0c <rebroadcastTimerHandler+0x5c>)
    6cd0:	69a2      	ldr	r2, [r4, #24]
    6cd2:	0098      	lsls	r0, r3, #2
    6cd4:	1812      	adds	r2, r2, r0
    6cd6:	8811      	ldrh	r1, [r2, #0]
    6cd8:	42a9      	cmp	r1, r5
    6cda:	d00e      	beq.n	6cfa <rebroadcastTimerHandler+0x4a>
    6cdc:	78d1      	ldrb	r1, [r2, #3]
    6cde:	2900      	cmp	r1, #0
    6ce0:	d00b      	beq.n	6cfa <rebroadcastTimerHandler+0x4a>
    6ce2:	3901      	subs	r1, #1
    6ce4:	b2c9      	uxtb	r1, r1
    6ce6:	70d1      	strb	r1, [r2, #3]
    6ce8:	2900      	cmp	r1, #0
    6cea:	d103      	bne.n	6cf4 <rebroadcastTimerHandler+0x44>
    6cec:	4661      	mov	r1, ip
    6cee:	6832      	ldr	r2, [r6, #0]
    6cf0:	6992      	ldr	r2, [r2, #24]
    6cf2:	5211      	strh	r1, [r2, r0]
    6cf4:	4642      	mov	r2, r8
    6cf6:	6834      	ldr	r4, [r6, #0]
    6cf8:	5ca7      	ldrb	r7, [r4, r2]
    6cfa:	3301      	adds	r3, #1
    6cfc:	b2db      	uxtb	r3, r3
    6cfe:	42bb      	cmp	r3, r7
    6d00:	d3e6      	bcc.n	6cd0 <rebroadcastTimerHandler+0x20>
    6d02:	bc04      	pop	{r2}
    6d04:	4690      	mov	r8, r2
    6d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d08:	2000303c 	.word	0x2000303c
    6d0c:	0000ffff 	.word	0x0000ffff

00006d10 <handleDataMessage>:
    6d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d12:	46de      	mov	lr, fp
    6d14:	4657      	mov	r7, sl
    6d16:	464e      	mov	r6, r9
    6d18:	4645      	mov	r5, r8
    6d1a:	b5e0      	push	{r5, r6, r7, lr}
    6d1c:	780b      	ldrb	r3, [r1, #0]
    6d1e:	b083      	sub	sp, #12
    6d20:	0004      	movs	r4, r0
    6d22:	2b31      	cmp	r3, #49	; 0x31
    6d24:	d04d      	beq.n	6dc2 <handleDataMessage+0xb2>
    6d26:	2b32      	cmp	r3, #50	; 0x32
    6d28:	d144      	bne.n	6db4 <handleDataMessage+0xa4>
    6d2a:	4d61      	ldr	r5, [pc, #388]	; (6eb0 <handleDataMessage+0x1a0>)
    6d2c:	7a2b      	ldrb	r3, [r5, #8]
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d040      	beq.n	6db4 <handleDataMessage+0xa4>
    6d32:	4a60      	ldr	r2, [pc, #384]	; (6eb4 <handleDataMessage+0x1a4>)
    6d34:	4b60      	ldr	r3, [pc, #384]	; (6eb8 <handleDataMessage+0x1a8>)
    6d36:	4691      	mov	r9, r2
    6d38:	4a60      	ldr	r2, [pc, #384]	; (6ebc <handleDataMessage+0x1ac>)
    6d3a:	2600      	movs	r6, #0
    6d3c:	4693      	mov	fp, r2
    6d3e:	4a60      	ldr	r2, [pc, #384]	; (6ec0 <handleDataMessage+0x1b0>)
    6d40:	4698      	mov	r8, r3
    6d42:	4692      	mov	sl, r2
    6d44:	e007      	b.n	6d56 <handleDataMessage+0x46>
    6d46:	0039      	movs	r1, r7
    6d48:	0028      	movs	r0, r5
    6d4a:	47c8      	blx	r9
    6d4c:	3601      	adds	r6, #1
    6d4e:	7a2b      	ldrb	r3, [r5, #8]
    6d50:	b2f6      	uxtb	r6, r6
    6d52:	42b3      	cmp	r3, r6
    6d54:	d92e      	bls.n	6db4 <handleDataMessage+0xa4>
    6d56:	2100      	movs	r1, #0
    6d58:	0028      	movs	r0, r5
    6d5a:	47c0      	blx	r8
    6d5c:	1e07      	subs	r7, r0, #0
    6d5e:	d029      	beq.n	6db4 <handleDataMessage+0xa4>
    6d60:	2320      	movs	r3, #32
    6d62:	7a22      	ldrb	r2, [r4, #8]
    6d64:	5cc3      	ldrb	r3, [r0, r3]
    6d66:	429a      	cmp	r2, r3
    6d68:	d1ed      	bne.n	6d46 <handleDataMessage+0x36>
    6d6a:	88e2      	ldrh	r2, [r4, #6]
    6d6c:	8b83      	ldrh	r3, [r0, #28]
    6d6e:	429a      	cmp	r2, r3
    6d70:	d1e9      	bne.n	6d46 <handleDataMessage+0x36>
    6d72:	6883      	ldr	r3, [r0, #8]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d003      	beq.n	6d80 <handleDataMessage+0x70>
    6d78:	7c80      	ldrb	r0, [r0, #18]
    6d7a:	003a      	movs	r2, r7
    6d7c:	2100      	movs	r1, #0
    6d7e:	4798      	blx	r3
    6d80:	0038      	movs	r0, r7
    6d82:	47d8      	blx	fp
    6d84:	22ff      	movs	r2, #255	; 0xff
    6d86:	8bbb      	ldrh	r3, [r7, #28]
    6d88:	4393      	bics	r3, r2
    6d8a:	4652      	mov	r2, sl
    6d8c:	8812      	ldrh	r2, [r2, #0]
    6d8e:	4293      	cmp	r3, r2
    6d90:	d0dc      	beq.n	6d4c <handleDataMessage+0x3c>
    6d92:	4a4c      	ldr	r2, [pc, #304]	; (6ec4 <handleDataMessage+0x1b4>)
    6d94:	0a1b      	lsrs	r3, r3, #8
    6d96:	6812      	ldr	r2, [r2, #0]
    6d98:	005b      	lsls	r3, r3, #1
    6d9a:	6912      	ldr	r2, [r2, #16]
    6d9c:	3601      	adds	r6, #1
    6d9e:	18d3      	adds	r3, r2, r3
    6da0:	220f      	movs	r2, #15
    6da2:	7859      	ldrb	r1, [r3, #1]
    6da4:	b2f6      	uxtb	r6, r6
    6da6:	400a      	ands	r2, r1
    6da8:	2130      	movs	r1, #48	; 0x30
    6daa:	430a      	orrs	r2, r1
    6dac:	705a      	strb	r2, [r3, #1]
    6dae:	7a2b      	ldrb	r3, [r5, #8]
    6db0:	42b3      	cmp	r3, r6
    6db2:	d8d0      	bhi.n	6d56 <handleDataMessage+0x46>
    6db4:	b003      	add	sp, #12
    6db6:	bc3c      	pop	{r2, r3, r4, r5}
    6db8:	4690      	mov	r8, r2
    6dba:	4699      	mov	r9, r3
    6dbc:	46a2      	mov	sl, r4
    6dbe:	46ab      	mov	fp, r5
    6dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6dc2:	7983      	ldrb	r3, [r0, #6]
    6dc4:	009d      	lsls	r5, r3, #2
    6dc6:	18ed      	adds	r5, r5, r3
    6dc8:	4b3e      	ldr	r3, [pc, #248]	; (6ec4 <handleDataMessage+0x1b4>)
    6dca:	00ad      	lsls	r5, r5, #2
    6dcc:	4699      	mov	r9, r3
    6dce:	681b      	ldr	r3, [r3, #0]
    6dd0:	68d8      	ldr	r0, [r3, #12]
    6dd2:	4b3d      	ldr	r3, [pc, #244]	; (6ec8 <handleDataMessage+0x1b8>)
    6dd4:	1940      	adds	r0, r0, r5
    6dd6:	4798      	blx	r3
    6dd8:	2800      	cmp	r0, #0
    6dda:	d065      	beq.n	6ea8 <handleDataMessage+0x198>
    6ddc:	464b      	mov	r3, r9
    6dde:	681b      	ldr	r3, [r3, #0]
    6de0:	68db      	ldr	r3, [r3, #12]
    6de2:	195d      	adds	r5, r3, r5
    6de4:	68ab      	ldr	r3, [r5, #8]
    6de6:	60eb      	str	r3, [r5, #12]
    6de8:	4d38      	ldr	r5, [pc, #224]	; (6ecc <handleDataMessage+0x1bc>)
    6dea:	7a2b      	ldrb	r3, [r5, #8]
    6dec:	2b00      	cmp	r3, #0
    6dee:	d0e1      	beq.n	6db4 <handleDataMessage+0xa4>
    6df0:	21ff      	movs	r1, #255	; 0xff
    6df2:	4b33      	ldr	r3, [pc, #204]	; (6ec0 <handleDataMessage+0x1b0>)
    6df4:	881a      	ldrh	r2, [r3, #0]
    6df6:	88e3      	ldrh	r3, [r4, #6]
    6df8:	438b      	bics	r3, r1
    6dfa:	429a      	cmp	r2, r3
    6dfc:	d1da      	bne.n	6db4 <handleDataMessage+0xa4>
    6dfe:	4b2e      	ldr	r3, [pc, #184]	; (6eb8 <handleDataMessage+0x1a8>)
    6e00:	2700      	movs	r7, #0
    6e02:	9301      	str	r3, [sp, #4]
    6e04:	4b2b      	ldr	r3, [pc, #172]	; (6eb4 <handleDataMessage+0x1a4>)
    6e06:	469a      	mov	sl, r3
    6e08:	4b31      	ldr	r3, [pc, #196]	; (6ed0 <handleDataMessage+0x1c0>)
    6e0a:	46d0      	mov	r8, sl
    6e0c:	469b      	mov	fp, r3
    6e0e:	e00a      	b.n	6e26 <handleDataMessage+0x116>
    6e10:	4a30      	ldr	r2, [pc, #192]	; (6ed4 <handleDataMessage+0x1c4>)
    6e12:	4293      	cmp	r3, r2
    6e14:	d02a      	beq.n	6e6c <handleDataMessage+0x15c>
    6e16:	0001      	movs	r1, r0
    6e18:	0028      	movs	r0, r5
    6e1a:	47d0      	blx	sl
    6e1c:	3701      	adds	r7, #1
    6e1e:	7a2b      	ldrb	r3, [r5, #8]
    6e20:	b2ff      	uxtb	r7, r7
    6e22:	42bb      	cmp	r3, r7
    6e24:	d9c6      	bls.n	6db4 <handleDataMessage+0xa4>
    6e26:	2100      	movs	r1, #0
    6e28:	0028      	movs	r0, r5
    6e2a:	9b01      	ldr	r3, [sp, #4]
    6e2c:	4798      	blx	r3
    6e2e:	1e06      	subs	r6, r0, #0
    6e30:	d0c0      	beq.n	6db4 <handleDataMessage+0xa4>
    6e32:	8b83      	ldrh	r3, [r0, #28]
    6e34:	88e2      	ldrh	r2, [r4, #6]
    6e36:	429a      	cmp	r2, r3
    6e38:	d1ea      	bne.n	6e10 <handleDataMessage+0x100>
    6e3a:	2310      	movs	r3, #16
    6e3c:	7e42      	ldrb	r2, [r0, #25]
    6e3e:	4013      	ands	r3, r2
    6e40:	d025      	beq.n	6e8e <handleDataMessage+0x17e>
    6e42:	464b      	mov	r3, r9
    6e44:	681a      	ldr	r2, [r3, #0]
    6e46:	2337      	movs	r3, #55	; 0x37
    6e48:	5cd3      	ldrb	r3, [r2, r3]
    6e4a:	0001      	movs	r1, r0
    6e4c:	3301      	adds	r3, #1
    6e4e:	7403      	strb	r3, [r0, #16]
    6e50:	2338      	movs	r3, #56	; 0x38
    6e52:	5cd3      	ldrb	r3, [r2, r3]
    6e54:	7443      	strb	r3, [r0, #17]
    6e56:	2300      	movs	r3, #0
    6e58:	6083      	str	r3, [r0, #8]
    6e5a:	4815      	ldr	r0, [pc, #84]	; (6eb0 <handleDataMessage+0x1a0>)
    6e5c:	4b15      	ldr	r3, [pc, #84]	; (6eb4 <handleDataMessage+0x1a4>)
    6e5e:	4798      	blx	r3
    6e60:	8bb1      	ldrh	r1, [r6, #28]
    6e62:	4a1d      	ldr	r2, [pc, #116]	; (6ed8 <handleDataMessage+0x1c8>)
    6e64:	0030      	movs	r0, r6
    6e66:	4b1d      	ldr	r3, [pc, #116]	; (6edc <handleDataMessage+0x1cc>)
    6e68:	4798      	blx	r3
    6e6a:	e7d7      	b.n	6e1c <handleDataMessage+0x10c>
    6e6c:	2300      	movs	r3, #0
    6e6e:	2201      	movs	r2, #1
    6e70:	7443      	strb	r3, [r0, #17]
    6e72:	7502      	strb	r2, [r0, #20]
    6e74:	6083      	str	r3, [r0, #8]
    6e76:	0001      	movs	r1, r0
    6e78:	4658      	mov	r0, fp
    6e7a:	47c0      	blx	r8
    6e7c:	88e1      	ldrh	r1, [r4, #6]
    6e7e:	4a18      	ldr	r2, [pc, #96]	; (6ee0 <handleDataMessage+0x1d0>)
    6e80:	0030      	movs	r0, r6
    6e82:	4b16      	ldr	r3, [pc, #88]	; (6edc <handleDataMessage+0x1cc>)
    6e84:	4798      	blx	r3
    6e86:	0031      	movs	r1, r6
    6e88:	0028      	movs	r0, r5
    6e8a:	47c0      	blx	r8
    6e8c:	e7c6      	b.n	6e1c <handleDataMessage+0x10c>
    6e8e:	7443      	strb	r3, [r0, #17]
    6e90:	7503      	strb	r3, [r0, #20]
    6e92:	6083      	str	r3, [r0, #8]
    6e94:	0001      	movs	r1, r0
    6e96:	4b07      	ldr	r3, [pc, #28]	; (6eb4 <handleDataMessage+0x1a4>)
    6e98:	480d      	ldr	r0, [pc, #52]	; (6ed0 <handleDataMessage+0x1c0>)
    6e9a:	4798      	blx	r3
    6e9c:	8bb1      	ldrh	r1, [r6, #28]
    6e9e:	4a10      	ldr	r2, [pc, #64]	; (6ee0 <handleDataMessage+0x1d0>)
    6ea0:	0030      	movs	r0, r6
    6ea2:	4b0e      	ldr	r3, [pc, #56]	; (6edc <handleDataMessage+0x1cc>)
    6ea4:	4798      	blx	r3
    6ea6:	e7b9      	b.n	6e1c <handleDataMessage+0x10c>
    6ea8:	88e0      	ldrh	r0, [r4, #6]
    6eaa:	4b0e      	ldr	r3, [pc, #56]	; (6ee4 <handleDataMessage+0x1d4>)
    6eac:	4798      	blx	r3
    6eae:	e781      	b.n	6db4 <handleDataMessage+0xa4>
    6eb0:	20003044 	.word	0x20003044
    6eb4:	0000350d 	.word	0x0000350d
    6eb8:	00003545 	.word	0x00003545
    6ebc:	000033f1 	.word	0x000033f1
    6ec0:	20003084 	.word	0x20003084
    6ec4:	2000303c 	.word	0x2000303c
    6ec8:	000083b9 	.word	0x000083b9
    6ecc:	20003030 	.word	0x20003030
    6ed0:	20003024 	.word	0x20003024
    6ed4:	0000ffff 	.word	0x0000ffff
    6ed8:	00005039 	.word	0x00005039
    6edc:	000068b1 	.word	0x000068b1
    6ee0:	00004ea1 	.word	0x00004ea1
    6ee4:	00008351 	.word	0x00008351

00006ee8 <frameParse>:
    6ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6eea:	464e      	mov	r6, r9
    6eec:	4645      	mov	r5, r8
    6eee:	46de      	mov	lr, fp
    6ef0:	4657      	mov	r7, sl
    6ef2:	b5e0      	push	{r5, r6, r7, lr}
    6ef4:	6885      	ldr	r5, [r0, #8]
    6ef6:	b09f      	sub	sp, #124	; 0x7c
    6ef8:	782b      	ldrb	r3, [r5, #0]
    6efa:	ac0e      	add	r4, sp, #56	; 0x38
    6efc:	7023      	strb	r3, [r4, #0]
    6efe:	786b      	ldrb	r3, [r5, #1]
    6f00:	0006      	movs	r6, r0
    6f02:	7063      	strb	r3, [r4, #1]
    6f04:	78ab      	ldrb	r3, [r5, #2]
    6f06:	7223      	strb	r3, [r4, #8]
    6f08:	7bc3      	ldrb	r3, [r0, #15]
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d015      	beq.n	6f3a <frameParse+0x52>
    6f0e:	7863      	ldrb	r3, [r4, #1]
    6f10:	069a      	lsls	r2, r3, #26
    6f12:	d400      	bmi.n	6f16 <frameParse+0x2e>
    6f14:	e094      	b.n	7040 <frameParse+0x158>
    6f16:	6873      	ldr	r3, [r6, #4]
    6f18:	4698      	mov	r8, r3
    6f1a:	8a33      	ldrh	r3, [r6, #16]
    6f1c:	8063      	strh	r3, [r4, #2]
    6f1e:	4643      	mov	r3, r8
    6f20:	785a      	ldrb	r2, [r3, #1]
    6f22:	781b      	ldrb	r3, [r3, #0]
    6f24:	0212      	lsls	r2, r2, #8
    6f26:	4313      	orrs	r3, r2
    6f28:	80e3      	strh	r3, [r4, #6]
    6f2a:	2302      	movs	r3, #2
    6f2c:	4699      	mov	r9, r3
    6f2e:	7833      	ldrb	r3, [r6, #0]
    6f30:	075b      	lsls	r3, r3, #29
    6f32:	d40e      	bmi.n	6f52 <frameParse+0x6a>
    6f34:	4bcb      	ldr	r3, [pc, #812]	; (7264 <frameParse+0x37c>)
    6f36:	881b      	ldrh	r3, [r3, #0]
    6f38:	e00d      	b.n	6f56 <frameParse+0x6e>
    6f3a:	7863      	ldrb	r3, [r4, #1]
    6f3c:	069a      	lsls	r2, r3, #26
    6f3e:	d55c      	bpl.n	6ffa <frameParse+0x112>
    6f40:	6873      	ldr	r3, [r6, #4]
    6f42:	4698      	mov	r8, r3
    6f44:	8a33      	ldrh	r3, [r6, #16]
    6f46:	8063      	strh	r3, [r4, #2]
    6f48:	2308      	movs	r3, #8
    6f4a:	4699      	mov	r9, r3
    6f4c:	7833      	ldrb	r3, [r6, #0]
    6f4e:	075b      	lsls	r3, r3, #29
    6f50:	d5f0      	bpl.n	6f34 <frameParse+0x4c>
    6f52:	2301      	movs	r3, #1
    6f54:	425b      	negs	r3, r3
    6f56:	2210      	movs	r2, #16
    6f58:	80a3      	strh	r3, [r4, #4]
    6f5a:	7863      	ldrb	r3, [r4, #1]
    6f5c:	9205      	str	r2, [sp, #20]
    6f5e:	4692      	mov	sl, r2
    6f60:	4693      	mov	fp, r2
    6f62:	2708      	movs	r7, #8
    6f64:	2104      	movs	r1, #4
    6f66:	3a0d      	subs	r2, #13
    6f68:	075b      	lsls	r3, r3, #29
    6f6a:	d562      	bpl.n	7032 <frameParse+0x14a>
    6f6c:	5cab      	ldrb	r3, [r5, r2]
    6f6e:	1869      	adds	r1, r5, r1
    6f70:	7423      	strb	r3, [r4, #16]
    6f72:	2204      	movs	r2, #4
    6f74:	4bbc      	ldr	r3, [pc, #752]	; (7268 <frameParse+0x380>)
    6f76:	a813      	add	r0, sp, #76	; 0x4c
    6f78:	4798      	blx	r3
    6f7a:	19e9      	adds	r1, r5, r7
    6f7c:	2208      	movs	r2, #8
    6f7e:	4bba      	ldr	r3, [pc, #744]	; (7268 <frameParse+0x380>)
    6f80:	a814      	add	r0, sp, #80	; 0x50
    6f82:	4798      	blx	r3
    6f84:	465b      	mov	r3, fp
    6f86:	7b37      	ldrb	r7, [r6, #12]
    6f88:	4648      	mov	r0, r9
    6f8a:	1aff      	subs	r7, r7, r3
    6f8c:	b2fb      	uxtb	r3, r7
    6f8e:	001f      	movs	r7, r3
    6f90:	4bb6      	ldr	r3, [pc, #728]	; (726c <frameParse+0x384>)
    6f92:	4798      	blx	r3
    6f94:	9001      	str	r0, [sp, #4]
    6f96:	68b3      	ldr	r3, [r6, #8]
    6f98:	9706      	str	r7, [sp, #24]
    6f9a:	9300      	str	r3, [sp, #0]
    6f9c:	465a      	mov	r2, fp
    6f9e:	003b      	movs	r3, r7
    6fa0:	a914      	add	r1, sp, #80	; 0x50
    6fa2:	0020      	movs	r0, r4
    6fa4:	4fb2      	ldr	r7, [pc, #712]	; (7270 <frameParse+0x388>)
    6fa6:	47b8      	blx	r7
    6fa8:	28ff      	cmp	r0, #255	; 0xff
    6faa:	d042      	beq.n	7032 <frameParse+0x14a>
    6fac:	002b      	movs	r3, r5
    6fae:	9f06      	ldr	r7, [sp, #24]
    6fb0:	4453      	add	r3, sl
    6fb2:	1a3f      	subs	r7, r7, r0
    6fb4:	9307      	str	r3, [sp, #28]
    6fb6:	b2fb      	uxtb	r3, r7
    6fb8:	9306      	str	r3, [sp, #24]
    6fba:	88a0      	ldrh	r0, [r4, #4]
    6fbc:	4bad      	ldr	r3, [pc, #692]	; (7274 <frameParse+0x38c>)
    6fbe:	4298      	cmp	r0, r3
    6fc0:	d941      	bls.n	7046 <frameParse+0x15e>
    6fc2:	2228      	movs	r2, #40	; 0x28
    6fc4:	4bac      	ldr	r3, [pc, #688]	; (7278 <frameParse+0x390>)
    6fc6:	88e5      	ldrh	r5, [r4, #6]
    6fc8:	469a      	mov	sl, r3
    6fca:	681b      	ldr	r3, [r3, #0]
    6fcc:	7a27      	ldrb	r7, [r4, #8]
    6fce:	5c9a      	ldrb	r2, [r3, r2]
    6fd0:	2a00      	cmp	r2, #0
    6fd2:	d100      	bne.n	6fd6 <frameParse+0xee>
    6fd4:	e07c      	b.n	70d0 <frameParse+0x1e8>
    6fd6:	3a01      	subs	r2, #1
    6fd8:	b2d1      	uxtb	r1, r2
    6fda:	699b      	ldr	r3, [r3, #24]
    6fdc:	3101      	adds	r1, #1
    6fde:	0089      	lsls	r1, r1, #2
    6fe0:	1859      	adds	r1, r3, r1
    6fe2:	e003      	b.n	6fec <frameParse+0x104>
    6fe4:	3304      	adds	r3, #4
    6fe6:	4299      	cmp	r1, r3
    6fe8:	d100      	bne.n	6fec <frameParse+0x104>
    6fea:	e071      	b.n	70d0 <frameParse+0x1e8>
    6fec:	881a      	ldrh	r2, [r3, #0]
    6fee:	42aa      	cmp	r2, r5
    6ff0:	d1f8      	bne.n	6fe4 <frameParse+0xfc>
    6ff2:	789a      	ldrb	r2, [r3, #2]
    6ff4:	42ba      	cmp	r2, r7
    6ff6:	d1f5      	bne.n	6fe4 <frameParse+0xfc>
    6ff8:	e01b      	b.n	7032 <frameParse+0x14a>
    6ffa:	2208      	movs	r2, #8
    6ffc:	4691      	mov	r9, r2
    6ffe:	6872      	ldr	r2, [r6, #4]
    7000:	7929      	ldrb	r1, [r5, #4]
    7002:	4690      	mov	r8, r2
    7004:	78ea      	ldrb	r2, [r5, #3]
    7006:	0209      	lsls	r1, r1, #8
    7008:	430a      	orrs	r2, r1
    700a:	79a9      	ldrb	r1, [r5, #6]
    700c:	8062      	strh	r2, [r4, #2]
    700e:	796a      	ldrb	r2, [r5, #5]
    7010:	0209      	lsls	r1, r1, #8
    7012:	430a      	orrs	r2, r1
    7014:	7a29      	ldrb	r1, [r5, #8]
    7016:	80a2      	strh	r2, [r4, #4]
    7018:	79ea      	ldrb	r2, [r5, #7]
    701a:	0209      	lsls	r1, r1, #8
    701c:	430a      	orrs	r2, r1
    701e:	80e2      	strh	r2, [r4, #6]
    7020:	2216      	movs	r2, #22
    7022:	270e      	movs	r7, #14
    7024:	9205      	str	r2, [sp, #20]
    7026:	4692      	mov	sl, r2
    7028:	4693      	mov	fp, r2
    702a:	210a      	movs	r1, #10
    702c:	3a0d      	subs	r2, #13
    702e:	075b      	lsls	r3, r3, #29
    7030:	d49c      	bmi.n	6f6c <frameParse+0x84>
    7032:	b01f      	add	sp, #124	; 0x7c
    7034:	bc3c      	pop	{r2, r3, r4, r5}
    7036:	4690      	mov	r8, r2
    7038:	4699      	mov	r9, r3
    703a:	46a2      	mov	sl, r4
    703c:	46ab      	mov	fp, r5
    703e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7040:	2202      	movs	r2, #2
    7042:	4691      	mov	r9, r2
    7044:	e7db      	b.n	6ffe <frameParse+0x116>
    7046:	4b87      	ldr	r3, [pc, #540]	; (7264 <frameParse+0x37c>)
    7048:	881a      	ldrh	r2, [r3, #0]
    704a:	4290      	cmp	r0, r2
    704c:	d100      	bne.n	7050 <frameParse+0x168>
    704e:	e12d      	b.n	72ac <frameParse+0x3c4>
    7050:	21ff      	movs	r1, #255	; 0xff
    7052:	0005      	movs	r5, r0
    7054:	881a      	ldrh	r2, [r3, #0]
    7056:	438d      	bics	r5, r1
    7058:	4295      	cmp	r5, r2
    705a:	d100      	bne.n	705e <frameParse+0x176>
    705c:	e129      	b.n	72b2 <frameParse+0x3ca>
    705e:	881b      	ldrh	r3, [r3, #0]
    7060:	4298      	cmp	r0, r3
    7062:	d0e6      	beq.n	7032 <frameParse+0x14a>
    7064:	7823      	ldrb	r3, [r4, #0]
    7066:	2b00      	cmp	r3, #0
    7068:	d0e3      	beq.n	7032 <frameParse+0x14a>
    706a:	4a84      	ldr	r2, [pc, #528]	; (727c <frameParse+0x394>)
    706c:	7812      	ldrb	r2, [r2, #0]
    706e:	2a06      	cmp	r2, #6
    7070:	d1df      	bne.n	7032 <frameParse+0x14a>
    7072:	3b01      	subs	r3, #1
    7074:	7023      	strb	r3, [r4, #0]
    7076:	4b82      	ldr	r3, [pc, #520]	; (7280 <frameParse+0x398>)
    7078:	4798      	blx	r3
    707a:	ab0a      	add	r3, sp, #40	; 0x28
    707c:	8618      	strh	r0, [r3, #48]	; 0x30
    707e:	4b81      	ldr	r3, [pc, #516]	; (7284 <frameParse+0x39c>)
    7080:	4298      	cmp	r0, r3
    7082:	d100      	bne.n	7086 <frameParse+0x19e>
    7084:	e32e      	b.n	76e4 <frameParse+0x7fc>
    7086:	2078      	movs	r0, #120	; 0x78
    7088:	4b7f      	ldr	r3, [pc, #508]	; (7288 <frameParse+0x3a0>)
    708a:	4798      	blx	r3
    708c:	1e05      	subs	r5, r0, #0
    708e:	d0d0      	beq.n	7032 <frameParse+0x14a>
    7090:	0001      	movs	r1, r0
    7092:	4b7e      	ldr	r3, [pc, #504]	; (728c <frameParse+0x3a4>)
    7094:	0020      	movs	r0, r4
    7096:	4798      	blx	r3
    7098:	7a23      	ldrb	r3, [r4, #8]
    709a:	9f06      	ldr	r7, [sp, #24]
    709c:	0006      	movs	r6, r0
    709e:	70ab      	strb	r3, [r5, #2]
    70a0:	003a      	movs	r2, r7
    70a2:	9907      	ldr	r1, [sp, #28]
    70a4:	4b70      	ldr	r3, [pc, #448]	; (7268 <frameParse+0x380>)
    70a6:	1828      	adds	r0, r5, r0
    70a8:	4798      	blx	r3
    70aa:	2300      	movs	r3, #0
    70ac:	9303      	str	r3, [sp, #12]
    70ae:	9302      	str	r3, [sp, #8]
    70b0:	ab16      	add	r3, sp, #88	; 0x58
    70b2:	9301      	str	r3, [sp, #4]
    70b4:	2302      	movs	r3, #2
    70b6:	0020      	movs	r0, r4
    70b8:	9300      	str	r3, [sp, #0]
    70ba:	003a      	movs	r2, r7
    70bc:	002b      	movs	r3, r5
    70be:	0031      	movs	r1, r6
    70c0:	4c73      	ldr	r4, [pc, #460]	; (7290 <frameParse+0x3a8>)
    70c2:	47a0      	blx	r4
    70c4:	2800      	cmp	r0, #0
    70c6:	d1b4      	bne.n	7032 <frameParse+0x14a>
    70c8:	0028      	movs	r0, r5
    70ca:	4b72      	ldr	r3, [pc, #456]	; (7294 <frameParse+0x3ac>)
    70cc:	4798      	blx	r3
    70ce:	e7b0      	b.n	7032 <frameParse+0x14a>
    70d0:	4b6c      	ldr	r3, [pc, #432]	; (7284 <frameParse+0x39c>)
    70d2:	4298      	cmp	r0, r3
    70d4:	d100      	bne.n	70d8 <frameParse+0x1f0>
    70d6:	e0b6      	b.n	7246 <frameParse+0x35e>
    70d8:	2701      	movs	r7, #1
    70da:	7863      	ldrb	r3, [r4, #1]
    70dc:	2510      	movs	r5, #16
    70de:	421d      	tst	r5, r3
    70e0:	d006      	beq.n	70f0 <frameParse+0x208>
    70e2:	4a60      	ldr	r2, [pc, #384]	; (7264 <frameParse+0x37c>)
    70e4:	88a1      	ldrh	r1, [r4, #4]
    70e6:	4692      	mov	sl, r2
    70e8:	8812      	ldrh	r2, [r2, #0]
    70ea:	4291      	cmp	r1, r2
    70ec:	d100      	bne.n	70f0 <frameParse+0x208>
    70ee:	e1c7      	b.n	7480 <frameParse+0x598>
    70f0:	2503      	movs	r5, #3
    70f2:	402b      	ands	r3, r5
    70f4:	2b01      	cmp	r3, #1
    70f6:	d100      	bne.n	70fa <frameParse+0x212>
    70f8:	e160      	b.n	73bc <frameParse+0x4d4>
    70fa:	2b00      	cmp	r3, #0
    70fc:	d105      	bne.n	710a <frameParse+0x222>
    70fe:	4b5f      	ldr	r3, [pc, #380]	; (727c <frameParse+0x394>)
    7100:	781b      	ldrb	r3, [r3, #0]
    7102:	3b06      	subs	r3, #6
    7104:	2b01      	cmp	r3, #1
    7106:	d800      	bhi.n	710a <frameParse+0x222>
    7108:	e16d      	b.n	73e6 <frameParse+0x4fe>
    710a:	2f00      	cmp	r7, #0
    710c:	d100      	bne.n	7110 <frameParse+0x228>
    710e:	e790      	b.n	7032 <frameParse+0x14a>
    7110:	7823      	ldrb	r3, [r4, #0]
    7112:	2b00      	cmp	r3, #0
    7114:	d100      	bne.n	7118 <frameParse+0x230>
    7116:	e78c      	b.n	7032 <frameParse+0x14a>
    7118:	4b58      	ldr	r3, [pc, #352]	; (727c <frameParse+0x394>)
    711a:	781b      	ldrb	r3, [r3, #0]
    711c:	2b06      	cmp	r3, #6
    711e:	d000      	beq.n	7122 <frameParse+0x23a>
    7120:	e787      	b.n	7032 <frameParse+0x14a>
    7122:	ab16      	add	r3, sp, #88	; 0x58
    7124:	001a      	movs	r2, r3
    7126:	9308      	str	r3, [sp, #32]
    7128:	2301      	movs	r3, #1
    712a:	425b      	negs	r3, r3
    712c:	8013      	strh	r3, [r2, #0]
    712e:	2078      	movs	r0, #120	; 0x78
    7130:	4b55      	ldr	r3, [pc, #340]	; (7288 <frameParse+0x3a0>)
    7132:	4798      	blx	r3
    7134:	4680      	mov	r8, r0
    7136:	2800      	cmp	r0, #0
    7138:	d100      	bne.n	713c <frameParse+0x254>
    713a:	e77a      	b.n	7032 <frameParse+0x14a>
    713c:	7823      	ldrb	r3, [r4, #0]
    713e:	4a56      	ldr	r2, [pc, #344]	; (7298 <frameParse+0x3b0>)
    7140:	3b01      	subs	r3, #1
    7142:	b2db      	uxtb	r3, r3
    7144:	7023      	strb	r3, [r4, #0]
    7146:	7003      	strb	r3, [r0, #0]
    7148:	7863      	ldrb	r3, [r4, #1]
    714a:	7043      	strb	r3, [r0, #1]
    714c:	7813      	ldrb	r3, [r2, #0]
    714e:	3301      	adds	r3, #1
    7150:	b2db      	uxtb	r3, r3
    7152:	7083      	strb	r3, [r0, #2]
    7154:	7013      	strb	r3, [r2, #0]
    7156:	7863      	ldrb	r3, [r4, #1]
    7158:	069a      	lsls	r2, r3, #26
    715a:	d500      	bpl.n	715e <frameParse+0x276>
    715c:	e172      	b.n	7444 <frameParse+0x55c>
    715e:	8862      	ldrh	r2, [r4, #2]
    7160:	2716      	movs	r7, #22
    7162:	70c2      	strb	r2, [r0, #3]
    7164:	8862      	ldrh	r2, [r4, #2]
    7166:	250e      	movs	r5, #14
    7168:	0a12      	lsrs	r2, r2, #8
    716a:	7102      	strb	r2, [r0, #4]
    716c:	88a2      	ldrh	r2, [r4, #4]
    716e:	7142      	strb	r2, [r0, #5]
    7170:	88a2      	ldrh	r2, [r4, #4]
    7172:	0a12      	lsrs	r2, r2, #8
    7174:	7182      	strb	r2, [r0, #6]
    7176:	88e2      	ldrh	r2, [r4, #6]
    7178:	71c2      	strb	r2, [r0, #7]
    717a:	88e2      	ldrh	r2, [r4, #6]
    717c:	0a12      	lsrs	r2, r2, #8
    717e:	7202      	strb	r2, [r0, #8]
    7180:	2216      	movs	r2, #22
    7182:	4692      	mov	sl, r2
    7184:	3a0d      	subs	r2, #13
    7186:	200a      	movs	r0, #10
    7188:	4691      	mov	r9, r2
    718a:	9206      	str	r2, [sp, #24]
    718c:	075b      	lsls	r3, r3, #29
    718e:	d518      	bpl.n	71c2 <frameParse+0x2da>
    7190:	4b42      	ldr	r3, [pc, #264]	; (729c <frameParse+0x3b4>)
    7192:	4649      	mov	r1, r9
    7194:	681a      	ldr	r2, [r3, #0]
    7196:	2320      	movs	r3, #32
    7198:	5cd3      	ldrb	r3, [r2, r3]
    719a:	4a41      	ldr	r2, [pc, #260]	; (72a0 <frameParse+0x3b8>)
    719c:	7423      	strb	r3, [r4, #16]
    719e:	6812      	ldr	r2, [r2, #0]
    71a0:	4440      	add	r0, r8
    71a2:	6162      	str	r2, [r4, #20]
    71a4:	4642      	mov	r2, r8
    71a6:	5453      	strb	r3, [r2, r1]
    71a8:	2204      	movs	r2, #4
    71aa:	a913      	add	r1, sp, #76	; 0x4c
    71ac:	4b2e      	ldr	r3, [pc, #184]	; (7268 <frameParse+0x380>)
    71ae:	4798      	blx	r3
    71b0:	0028      	movs	r0, r5
    71b2:	4b2d      	ldr	r3, [pc, #180]	; (7268 <frameParse+0x380>)
    71b4:	4440      	add	r0, r8
    71b6:	2208      	movs	r2, #8
    71b8:	493a      	ldr	r1, [pc, #232]	; (72a4 <frameParse+0x3bc>)
    71ba:	4798      	blx	r3
    71bc:	4653      	mov	r3, sl
    71be:	46b9      	mov	r9, r7
    71c0:	9306      	str	r3, [sp, #24]
    71c2:	4642      	mov	r2, r8
    71c4:	7a23      	ldrb	r3, [r4, #8]
    71c6:	7093      	strb	r3, [r2, #2]
    71c8:	2228      	movs	r2, #40	; 0x28
    71ca:	4b2b      	ldr	r3, [pc, #172]	; (7278 <frameParse+0x390>)
    71cc:	469a      	mov	sl, r3
    71ce:	681b      	ldr	r3, [r3, #0]
    71d0:	5c9a      	ldrb	r2, [r3, r2]
    71d2:	2a00      	cmp	r2, #0
    71d4:	d018      	beq.n	7208 <frameParse+0x320>
    71d6:	6998      	ldr	r0, [r3, #24]
    71d8:	4d2a      	ldr	r5, [pc, #168]	; (7284 <frameParse+0x39c>)
    71da:	8803      	ldrh	r3, [r0, #0]
    71dc:	42ab      	cmp	r3, r5
    71de:	d100      	bne.n	71e2 <frameParse+0x2fa>
    71e0:	e2a8      	b.n	7734 <frameParse+0x84c>
    71e2:	3a01      	subs	r2, #1
    71e4:	b2d2      	uxtb	r2, r2
    71e6:	3201      	adds	r2, #1
    71e8:	0092      	lsls	r2, r2, #2
    71ea:	1d03      	adds	r3, r0, #4
    71ec:	1882      	adds	r2, r0, r2
    71ee:	46b4      	mov	ip, r6
    71f0:	e007      	b.n	7202 <frameParse+0x31a>
    71f2:	1a1e      	subs	r6, r3, r0
    71f4:	001f      	movs	r7, r3
    71f6:	3304      	adds	r3, #4
    71f8:	1f19      	subs	r1, r3, #4
    71fa:	8809      	ldrh	r1, [r1, #0]
    71fc:	42a9      	cmp	r1, r5
    71fe:	d100      	bne.n	7202 <frameParse+0x31a>
    7200:	e129      	b.n	7456 <frameParse+0x56e>
    7202:	429a      	cmp	r2, r3
    7204:	d1f5      	bne.n	71f2 <frameParse+0x30a>
    7206:	4666      	mov	r6, ip
    7208:	4648      	mov	r0, r9
    720a:	9b05      	ldr	r3, [sp, #20]
    720c:	7b32      	ldrb	r2, [r6, #12]
    720e:	9907      	ldr	r1, [sp, #28]
    7210:	1ad2      	subs	r2, r2, r3
    7212:	4440      	add	r0, r8
    7214:	4b14      	ldr	r3, [pc, #80]	; (7268 <frameParse+0x380>)
    7216:	4798      	blx	r3
    7218:	465b      	mov	r3, fp
    721a:	7b32      	ldrb	r2, [r6, #12]
    721c:	0020      	movs	r0, r4
    721e:	1ad2      	subs	r2, r2, r3
    7220:	2300      	movs	r3, #0
    7222:	9303      	str	r3, [sp, #12]
    7224:	9302      	str	r3, [sp, #8]
    7226:	9b08      	ldr	r3, [sp, #32]
    7228:	b2d2      	uxtb	r2, r2
    722a:	9301      	str	r3, [sp, #4]
    722c:	2302      	movs	r3, #2
    722e:	9906      	ldr	r1, [sp, #24]
    7230:	9300      	str	r3, [sp, #0]
    7232:	4c17      	ldr	r4, [pc, #92]	; (7290 <frameParse+0x3a8>)
    7234:	4643      	mov	r3, r8
    7236:	47a0      	blx	r4
    7238:	2800      	cmp	r0, #0
    723a:	d000      	beq.n	723e <frameParse+0x356>
    723c:	e6f9      	b.n	7032 <frameParse+0x14a>
    723e:	4640      	mov	r0, r8
    7240:	4b14      	ldr	r3, [pc, #80]	; (7294 <frameParse+0x3ac>)
    7242:	4798      	blx	r3
    7244:	e6f5      	b.n	7032 <frameParse+0x14a>
    7246:	2503      	movs	r5, #3
    7248:	7863      	ldrb	r3, [r4, #1]
    724a:	2701      	movs	r7, #1
    724c:	401d      	ands	r5, r3
    724e:	d000      	beq.n	7252 <frameParse+0x36a>
    7250:	e744      	b.n	70dc <frameParse+0x1f4>
    7252:	4b15      	ldr	r3, [pc, #84]	; (72a8 <frameParse+0x3c0>)
    7254:	4798      	blx	r3
    7256:	1e07      	subs	r7, r0, #0
    7258:	d000      	beq.n	725c <frameParse+0x374>
    725a:	e214      	b.n	7686 <frameParse+0x79e>
    725c:	7863      	ldrb	r3, [r4, #1]
    725e:	3701      	adds	r7, #1
    7260:	e73c      	b.n	70dc <frameParse+0x1f4>
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	20003084 	.word	0x20003084
    7268:	0000932f 	.word	0x0000932f
    726c:	00008da5 	.word	0x00008da5
    7270:	00008ed1 	.word	0x00008ed1
    7274:	0000fffc 	.word	0x0000fffc
    7278:	2000303c 	.word	0x2000303c
    727c:	200003c0 	.word	0x200003c0
    7280:	00008af1 	.word	0x00008af1
    7284:	0000ffff 	.word	0x0000ffff
    7288:	000033a1 	.word	0x000033a1
    728c:	000066c1 	.word	0x000066c1
    7290:	00006759 	.word	0x00006759
    7294:	000033f1 	.word	0x000033f1
    7298:	20003058 	.word	0x20003058
    729c:	20003040 	.word	0x20003040
    72a0:	200030cc 	.word	0x200030cc
    72a4:	20000090 	.word	0x20000090
    72a8:	00008565 	.word	0x00008565
    72ac:	7863      	ldrb	r3, [r4, #1]
    72ae:	2700      	movs	r7, #0
    72b0:	e714      	b.n	70dc <frameParse+0x1f4>
    72b2:	4ada      	ldr	r2, [pc, #872]	; (761c <frameParse+0x734>)
    72b4:	7812      	ldrb	r2, [r2, #0]
    72b6:	2a06      	cmp	r2, #6
    72b8:	d000      	beq.n	72bc <frameParse+0x3d4>
    72ba:	e6d0      	b.n	705e <frameParse+0x176>
    72bc:	2580      	movs	r5, #128	; 0x80
    72be:	4005      	ands	r5, r0
    72c0:	d100      	bne.n	72c4 <frameParse+0x3dc>
    72c2:	e18a      	b.n	75da <frameParse+0x6f2>
    72c4:	2078      	movs	r0, #120	; 0x78
    72c6:	4bd6      	ldr	r3, [pc, #856]	; (7620 <frameParse+0x738>)
    72c8:	4798      	blx	r3
    72ca:	1e05      	subs	r5, r0, #0
    72cc:	d100      	bne.n	72d0 <frameParse+0x3e8>
    72ce:	e6b0      	b.n	7032 <frameParse+0x14a>
    72d0:	2203      	movs	r2, #3
    72d2:	7821      	ldrb	r1, [r4, #0]
    72d4:	ab16      	add	r3, sp, #88	; 0x58
    72d6:	88e0      	ldrh	r0, [r4, #6]
    72d8:	88a7      	ldrh	r7, [r4, #4]
    72da:	7019      	strb	r1, [r3, #0]
    72dc:	9308      	str	r3, [sp, #32]
    72de:	785b      	ldrb	r3, [r3, #1]
    72e0:	4393      	bics	r3, r2
    72e2:	2201      	movs	r2, #1
    72e4:	4313      	orrs	r3, r2
    72e6:	2208      	movs	r2, #8
    72e8:	b2db      	uxtb	r3, r3
    72ea:	4393      	bics	r3, r2
    72ec:	2204      	movs	r2, #4
    72ee:	4313      	orrs	r3, r2
    72f0:	2220      	movs	r2, #32
    72f2:	4690      	mov	r8, r2
    72f4:	b2db      	uxtb	r3, r3
    72f6:	4393      	bics	r3, r2
    72f8:	324f      	adds	r2, #79	; 0x4f
    72fa:	4013      	ands	r3, r2
    72fc:	9a08      	ldr	r2, [sp, #32]
    72fe:	7053      	strb	r3, [r2, #1]
    7300:	4bc8      	ldr	r3, [pc, #800]	; (7624 <frameParse+0x73c>)
    7302:	8097      	strh	r7, [r2, #4]
    7304:	881b      	ldrh	r3, [r3, #0]
    7306:	80d0      	strh	r0, [r2, #6]
    7308:	8053      	strh	r3, [r2, #2]
    730a:	7029      	strb	r1, [r5, #0]
    730c:	7853      	ldrb	r3, [r2, #1]
    730e:	49c6      	ldr	r1, [pc, #792]	; (7628 <frameParse+0x740>)
    7310:	706b      	strb	r3, [r5, #1]
    7312:	780b      	ldrb	r3, [r1, #0]
    7314:	3301      	adds	r3, #1
    7316:	b2db      	uxtb	r3, r3
    7318:	700b      	strb	r3, [r1, #0]
    731a:	70ab      	strb	r3, [r5, #2]
    731c:	4643      	mov	r3, r8
    731e:	7851      	ldrb	r1, [r2, #1]
    7320:	420b      	tst	r3, r1
    7322:	d000      	beq.n	7326 <frameParse+0x43e>
    7324:	e1db      	b.n	76de <frameParse+0x7f6>
    7326:	2009      	movs	r0, #9
    7328:	2709      	movs	r7, #9
    732a:	8853      	ldrh	r3, [r2, #2]
    732c:	70eb      	strb	r3, [r5, #3]
    732e:	8853      	ldrh	r3, [r2, #2]
    7330:	0a1b      	lsrs	r3, r3, #8
    7332:	712b      	strb	r3, [r5, #4]
    7334:	8893      	ldrh	r3, [r2, #4]
    7336:	716b      	strb	r3, [r5, #5]
    7338:	8893      	ldrh	r3, [r2, #4]
    733a:	0a1b      	lsrs	r3, r3, #8
    733c:	71ab      	strb	r3, [r5, #6]
    733e:	88d3      	ldrh	r3, [r2, #6]
    7340:	71eb      	strb	r3, [r5, #7]
    7342:	88d3      	ldrh	r3, [r2, #6]
    7344:	0a1b      	lsrs	r3, r3, #8
    7346:	722b      	strb	r3, [r5, #8]
    7348:	074b      	lsls	r3, r1, #29
    734a:	d51d      	bpl.n	7388 <frameParse+0x4a0>
    734c:	4bb7      	ldr	r3, [pc, #732]	; (762c <frameParse+0x744>)
    734e:	9908      	ldr	r1, [sp, #32]
    7350:	681a      	ldr	r2, [r3, #0]
    7352:	2320      	movs	r3, #32
    7354:	5cd3      	ldrb	r3, [r2, r3]
    7356:	4ab6      	ldr	r2, [pc, #728]	; (7630 <frameParse+0x748>)
    7358:	740b      	strb	r3, [r1, #16]
    735a:	6812      	ldr	r2, [r2, #0]
    735c:	9206      	str	r2, [sp, #24]
    735e:	000a      	movs	r2, r1
    7360:	9906      	ldr	r1, [sp, #24]
    7362:	6151      	str	r1, [r2, #20]
    7364:	542b      	strb	r3, [r5, r0]
    7366:	1c78      	adds	r0, r7, #1
    7368:	b2c0      	uxtb	r0, r0
    736a:	2204      	movs	r2, #4
    736c:	a91b      	add	r1, sp, #108	; 0x6c
    736e:	4bb1      	ldr	r3, [pc, #708]	; (7634 <frameParse+0x74c>)
    7370:	1828      	adds	r0, r5, r0
    7372:	4798      	blx	r3
    7374:	1d78      	adds	r0, r7, #5
    7376:	b2c0      	uxtb	r0, r0
    7378:	370d      	adds	r7, #13
    737a:	1828      	adds	r0, r5, r0
    737c:	2208      	movs	r2, #8
    737e:	49ae      	ldr	r1, [pc, #696]	; (7638 <frameParse+0x750>)
    7380:	4bac      	ldr	r3, [pc, #688]	; (7634 <frameParse+0x74c>)
    7382:	b2ff      	uxtb	r7, r7
    7384:	4798      	blx	r3
    7386:	0038      	movs	r0, r7
    7388:	7a23      	ldrb	r3, [r4, #8]
    738a:	9907      	ldr	r1, [sp, #28]
    738c:	70ab      	strb	r3, [r5, #2]
    738e:	7b32      	ldrb	r2, [r6, #12]
    7390:	9b05      	ldr	r3, [sp, #20]
    7392:	1828      	adds	r0, r5, r0
    7394:	1ad2      	subs	r2, r2, r3
    7396:	4ba7      	ldr	r3, [pc, #668]	; (7634 <frameParse+0x74c>)
    7398:	4798      	blx	r3
    739a:	465b      	mov	r3, fp
    739c:	7b32      	ldrb	r2, [r6, #12]
    739e:	0039      	movs	r1, r7
    73a0:	1ad2      	subs	r2, r2, r3
    73a2:	2300      	movs	r3, #0
    73a4:	9303      	str	r3, [sp, #12]
    73a6:	9302      	str	r3, [sp, #8]
    73a8:	ab0f      	add	r3, sp, #60	; 0x3c
    73aa:	9301      	str	r3, [sp, #4]
    73ac:	2302      	movs	r3, #2
    73ae:	b2d2      	uxtb	r2, r2
    73b0:	9300      	str	r3, [sp, #0]
    73b2:	9808      	ldr	r0, [sp, #32]
    73b4:	002b      	movs	r3, r5
    73b6:	4ca1      	ldr	r4, [pc, #644]	; (763c <frameParse+0x754>)
    73b8:	47a0      	blx	r4
    73ba:	e63a      	b.n	7032 <frameParse+0x14a>
    73bc:	220f      	movs	r2, #15
    73be:	9b07      	ldr	r3, [sp, #28]
    73c0:	781b      	ldrb	r3, [r3, #0]
    73c2:	4393      	bics	r3, r2
    73c4:	2b10      	cmp	r3, #16
    73c6:	d100      	bne.n	73ca <frameParse+0x4e2>
    73c8:	e0ed      	b.n	75a6 <frameParse+0x6be>
    73ca:	d92f      	bls.n	742c <frameParse+0x544>
    73cc:	2b20      	cmp	r3, #32
    73ce:	d100      	bne.n	73d2 <frameParse+0x4ea>
    73d0:	e0e2      	b.n	7598 <frameParse+0x6b0>
    73d2:	2b30      	cmp	r3, #48	; 0x30
    73d4:	d000      	beq.n	73d8 <frameParse+0x4f0>
    73d6:	e698      	b.n	710a <frameParse+0x222>
    73d8:	4b99      	ldr	r3, [pc, #612]	; (7640 <frameParse+0x758>)
    73da:	9907      	ldr	r1, [sp, #28]
    73dc:	0020      	movs	r0, r4
    73de:	4798      	blx	r3
    73e0:	7863      	ldrb	r3, [r4, #1]
    73e2:	402b      	ands	r3, r5
    73e4:	e689      	b.n	70fa <frameParse+0x212>
    73e6:	88a2      	ldrh	r2, [r4, #4]
    73e8:	4b96      	ldr	r3, [pc, #600]	; (7644 <frameParse+0x75c>)
    73ea:	429a      	cmp	r2, r3
    73ec:	d90e      	bls.n	740c <frameParse+0x524>
    73ee:	20ff      	movs	r0, #255	; 0xff
    73f0:	4b95      	ldr	r3, [pc, #596]	; (7648 <frameParse+0x760>)
    73f2:	8819      	ldrh	r1, [r3, #0]
    73f4:	4208      	tst	r0, r1
    73f6:	d100      	bne.n	73fa <frameParse+0x512>
    73f8:	e0e6      	b.n	75c8 <frameParse+0x6e0>
    73fa:	8819      	ldrh	r1, [r3, #0]
    73fc:	0609      	lsls	r1, r1, #24
    73fe:	d500      	bpl.n	7402 <frameParse+0x51a>
    7400:	e0e2      	b.n	75c8 <frameParse+0x6e0>
    7402:	4992      	ldr	r1, [pc, #584]	; (764c <frameParse+0x764>)
    7404:	428a      	cmp	r2, r1
    7406:	d000      	beq.n	740a <frameParse+0x522>
    7408:	e67f      	b.n	710a <frameParse+0x222>
    740a:	881b      	ldrh	r3, [r3, #0]
    740c:	88e3      	ldrh	r3, [r4, #6]
    740e:	a816      	add	r0, sp, #88	; 0x58
    7410:	8003      	strh	r3, [r0, #0]
    7412:	466b      	mov	r3, sp
    7414:	7e1b      	ldrb	r3, [r3, #24]
    7416:	7203      	strb	r3, [r0, #8]
    7418:	9b07      	ldr	r3, [sp, #28]
    741a:	6043      	str	r3, [r0, #4]
    741c:	7bb3      	ldrb	r3, [r6, #14]
    741e:	7283      	strb	r3, [r0, #10]
    7420:	7b73      	ldrb	r3, [r6, #13]
    7422:	7243      	strb	r3, [r0, #9]
    7424:	4b8a      	ldr	r3, [pc, #552]	; (7650 <frameParse+0x768>)
    7426:	681b      	ldr	r3, [r3, #0]
    7428:	4798      	blx	r3
    742a:	e66e      	b.n	710a <frameParse+0x222>
    742c:	2b00      	cmp	r3, #0
    742e:	d000      	beq.n	7432 <frameParse+0x54a>
    7430:	e66b      	b.n	710a <frameParse+0x222>
    7432:	7bb3      	ldrb	r3, [r6, #14]
    7434:	0020      	movs	r0, r4
    7436:	9300      	str	r3, [sp, #0]
    7438:	4642      	mov	r2, r8
    743a:	9b07      	ldr	r3, [sp, #28]
    743c:	4649      	mov	r1, r9
    743e:	4c85      	ldr	r4, [pc, #532]	; (7654 <frameParse+0x76c>)
    7440:	47a0      	blx	r4
    7442:	e5f6      	b.n	7032 <frameParse+0x14a>
    7444:	2210      	movs	r2, #16
    7446:	4692      	mov	sl, r2
    7448:	3a0d      	subs	r2, #13
    744a:	2710      	movs	r7, #16
    744c:	2508      	movs	r5, #8
    744e:	2004      	movs	r0, #4
    7450:	4691      	mov	r9, r2
    7452:	9206      	str	r2, [sp, #24]
    7454:	e69a      	b.n	718c <frameParse+0x2a4>
    7456:	4663      	mov	r3, ip
    7458:	46bc      	mov	ip, r7
    745a:	0037      	movs	r7, r6
    745c:	001e      	movs	r6, r3
    745e:	4661      	mov	r1, ip
    7460:	88e3      	ldrh	r3, [r4, #6]
    7462:	7a22      	ldrb	r2, [r4, #8]
    7464:	800b      	strh	r3, [r1, #0]
    7466:	4653      	mov	r3, sl
    7468:	681b      	ldr	r3, [r3, #0]
    746a:	699b      	ldr	r3, [r3, #24]
    746c:	19db      	adds	r3, r3, r7
    746e:	709a      	strb	r2, [r3, #2]
    7470:	4653      	mov	r3, sl
    7472:	2229      	movs	r2, #41	; 0x29
    7474:	681b      	ldr	r3, [r3, #0]
    7476:	5c9a      	ldrb	r2, [r3, r2]
    7478:	699b      	ldr	r3, [r3, #24]
    747a:	19df      	adds	r7, r3, r7
    747c:	70fa      	strb	r2, [r7, #3]
    747e:	e6c3      	b.n	7208 <frameParse+0x320>
    7480:	88e3      	ldrh	r3, [r4, #6]
    7482:	2078      	movs	r0, #120	; 0x78
    7484:	930a      	str	r3, [sp, #40]	; 0x28
    7486:	7a23      	ldrb	r3, [r4, #8]
    7488:	930b      	str	r3, [sp, #44]	; 0x2c
    748a:	4b65      	ldr	r3, [pc, #404]	; (7620 <frameParse+0x738>)
    748c:	4798      	blx	r3
    748e:	9009      	str	r0, [sp, #36]	; 0x24
    7490:	2800      	cmp	r0, #0
    7492:	d100      	bne.n	7496 <frameParse+0x5ae>
    7494:	e079      	b.n	758a <frameParse+0x6a2>
    7496:	4652      	mov	r2, sl
    7498:	8811      	ldrh	r1, [r2, #0]
    749a:	22ff      	movs	r2, #255	; 0xff
    749c:	2003      	movs	r0, #3
    749e:	ab16      	add	r3, sp, #88	; 0x58
    74a0:	701a      	strb	r2, [r3, #0]
    74a2:	9308      	str	r3, [sp, #32]
    74a4:	785b      	ldrb	r3, [r3, #1]
    74a6:	4692      	mov	sl, r2
    74a8:	4383      	bics	r3, r0
    74aa:	2001      	movs	r0, #1
    74ac:	4318      	orrs	r0, r3
    74ae:	23f7      	movs	r3, #247	; 0xf7
    74b0:	4003      	ands	r3, r0
    74b2:	2004      	movs	r0, #4
    74b4:	4303      	orrs	r3, r0
    74b6:	2020      	movs	r0, #32
    74b8:	227f      	movs	r2, #127	; 0x7f
    74ba:	b2db      	uxtb	r3, r3
    74bc:	4383      	bics	r3, r0
    74be:	4013      	ands	r3, r2
    74c0:	43ab      	bics	r3, r5
    74c2:	9d08      	ldr	r5, [sp, #32]
    74c4:	466a      	mov	r2, sp
    74c6:	706b      	strb	r3, [r5, #1]
    74c8:	4b56      	ldr	r3, [pc, #344]	; (7624 <frameParse+0x73c>)
    74ca:	80e9      	strh	r1, [r5, #6]
    74cc:	881b      	ldrh	r3, [r3, #0]
    74ce:	9909      	ldr	r1, [sp, #36]	; 0x24
    74d0:	806b      	strh	r3, [r5, #2]
    74d2:	4653      	mov	r3, sl
    74d4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    74d6:	80aa      	strh	r2, [r5, #4]
    74d8:	700b      	strb	r3, [r1, #0]
    74da:	786b      	ldrb	r3, [r5, #1]
    74dc:	4a52      	ldr	r2, [pc, #328]	; (7628 <frameParse+0x740>)
    74de:	704b      	strb	r3, [r1, #1]
    74e0:	7813      	ldrb	r3, [r2, #0]
    74e2:	3301      	adds	r3, #1
    74e4:	b2db      	uxtb	r3, r3
    74e6:	708b      	strb	r3, [r1, #2]
    74e8:	7013      	strb	r3, [r2, #0]
    74ea:	786a      	ldrb	r2, [r5, #1]
    74ec:	4210      	tst	r0, r2
    74ee:	d000      	beq.n	74f2 <frameParse+0x60a>
    74f0:	e0c0      	b.n	7674 <frameParse+0x78c>
    74f2:	0008      	movs	r0, r1
    74f4:	886b      	ldrh	r3, [r5, #2]
    74f6:	70cb      	strb	r3, [r1, #3]
    74f8:	886b      	ldrh	r3, [r5, #2]
    74fa:	0a1b      	lsrs	r3, r3, #8
    74fc:	710b      	strb	r3, [r1, #4]
    74fe:	88ab      	ldrh	r3, [r5, #4]
    7500:	714b      	strb	r3, [r1, #5]
    7502:	88ab      	ldrh	r3, [r5, #4]
    7504:	2109      	movs	r1, #9
    7506:	0a1b      	lsrs	r3, r3, #8
    7508:	7183      	strb	r3, [r0, #6]
    750a:	88eb      	ldrh	r3, [r5, #6]
    750c:	71c3      	strb	r3, [r0, #7]
    750e:	88eb      	ldrh	r3, [r5, #6]
    7510:	0a1b      	lsrs	r3, r3, #8
    7512:	7203      	strb	r3, [r0, #8]
    7514:	2316      	movs	r3, #22
    7516:	200a      	movs	r0, #10
    7518:	469a      	mov	sl, r3
    751a:	930c      	str	r3, [sp, #48]	; 0x30
    751c:	3b08      	subs	r3, #8
    751e:	930a      	str	r3, [sp, #40]	; 0x28
    7520:	3b05      	subs	r3, #5
    7522:	0752      	lsls	r2, r2, #29
    7524:	d51b      	bpl.n	755e <frameParse+0x676>
    7526:	4a41      	ldr	r2, [pc, #260]	; (762c <frameParse+0x744>)
    7528:	9d08      	ldr	r5, [sp, #32]
    752a:	6811      	ldr	r1, [r2, #0]
    752c:	2220      	movs	r2, #32
    752e:	5c8a      	ldrb	r2, [r1, r2]
    7530:	493f      	ldr	r1, [pc, #252]	; (7630 <frameParse+0x748>)
    7532:	742a      	strb	r2, [r5, #16]
    7534:	6809      	ldr	r1, [r1, #0]
    7536:	910d      	str	r1, [sp, #52]	; 0x34
    7538:	0029      	movs	r1, r5
    753a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    753c:	614d      	str	r5, [r1, #20]
    753e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7540:	a91b      	add	r1, sp, #108	; 0x6c
    7542:	46ac      	mov	ip, r5
    7544:	54ea      	strb	r2, [r5, r3]
    7546:	4460      	add	r0, ip
    7548:	2204      	movs	r2, #4
    754a:	4b3a      	ldr	r3, [pc, #232]	; (7634 <frameParse+0x74c>)
    754c:	4798      	blx	r3
    754e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7550:	4939      	ldr	r1, [pc, #228]	; (7638 <frameParse+0x750>)
    7552:	18e8      	adds	r0, r5, r3
    7554:	2208      	movs	r2, #8
    7556:	4b37      	ldr	r3, [pc, #220]	; (7634 <frameParse+0x74c>)
    7558:	4798      	blx	r3
    755a:	4653      	mov	r3, sl
    755c:	990c      	ldr	r1, [sp, #48]	; 0x30
    755e:	222c      	movs	r2, #44	; 0x2c
    7560:	466d      	mov	r5, sp
    7562:	18ad      	adds	r5, r5, r2
    7564:	782d      	ldrb	r5, [r5, #0]
    7566:	9809      	ldr	r0, [sp, #36]	; 0x24
    7568:	3206      	adds	r2, #6
    756a:	7085      	strb	r5, [r0, #2]
    756c:	54c2      	strb	r2, [r0, r3]
    756e:	2300      	movs	r3, #0
    7570:	9303      	str	r3, [sp, #12]
    7572:	9302      	str	r3, [sp, #8]
    7574:	4643      	mov	r3, r8
    7576:	9301      	str	r3, [sp, #4]
    7578:	464b      	mov	r3, r9
    757a:	3a31      	subs	r2, #49	; 0x31
    757c:	9300      	str	r3, [sp, #0]
    757e:	4d2f      	ldr	r5, [pc, #188]	; (763c <frameParse+0x754>)
    7580:	0003      	movs	r3, r0
    7582:	9808      	ldr	r0, [sp, #32]
    7584:	47a8      	blx	r5
    7586:	2800      	cmp	r0, #0
    7588:	d001      	beq.n	758e <frameParse+0x6a6>
    758a:	7863      	ldrb	r3, [r4, #1]
    758c:	e5b0      	b.n	70f0 <frameParse+0x208>
    758e:	4b32      	ldr	r3, [pc, #200]	; (7658 <frameParse+0x770>)
    7590:	9809      	ldr	r0, [sp, #36]	; 0x24
    7592:	4798      	blx	r3
    7594:	7863      	ldrb	r3, [r4, #1]
    7596:	e5ab      	b.n	70f0 <frameParse+0x208>
    7598:	4b30      	ldr	r3, [pc, #192]	; (765c <frameParse+0x774>)
    759a:	9907      	ldr	r1, [sp, #28]
    759c:	0020      	movs	r0, r4
    759e:	4798      	blx	r3
    75a0:	7863      	ldrb	r3, [r4, #1]
    75a2:	402b      	ands	r3, r5
    75a4:	e5a9      	b.n	70fa <frameParse+0x212>
    75a6:	4b1d      	ldr	r3, [pc, #116]	; (761c <frameParse+0x734>)
    75a8:	781b      	ldrb	r3, [r3, #0]
    75aa:	2b06      	cmp	r3, #6
    75ac:	d000      	beq.n	75b0 <frameParse+0x6c8>
    75ae:	e5ac      	b.n	710a <frameParse+0x222>
    75b0:	7bb3      	ldrb	r3, [r6, #14]
    75b2:	4f2b      	ldr	r7, [pc, #172]	; (7660 <frameParse+0x778>)
    75b4:	9300      	str	r3, [sp, #0]
    75b6:	4642      	mov	r2, r8
    75b8:	9b07      	ldr	r3, [sp, #28]
    75ba:	4649      	mov	r1, r9
    75bc:	0020      	movs	r0, r4
    75be:	47b8      	blx	r7
    75c0:	7863      	ldrb	r3, [r4, #1]
    75c2:	0007      	movs	r7, r0
    75c4:	402b      	ands	r3, r5
    75c6:	e598      	b.n	70fa <frameParse+0x212>
    75c8:	881b      	ldrh	r3, [r3, #0]
    75ca:	061b      	lsls	r3, r3, #24
    75cc:	d400      	bmi.n	75d0 <frameParse+0x6e8>
    75ce:	e71d      	b.n	740c <frameParse+0x524>
    75d0:	4b24      	ldr	r3, [pc, #144]	; (7664 <frameParse+0x77c>)
    75d2:	429a      	cmp	r2, r3
    75d4:	d000      	beq.n	75d8 <frameParse+0x6f0>
    75d6:	e719      	b.n	740c <frameParse+0x524>
    75d8:	e597      	b.n	710a <frameParse+0x222>
    75da:	2090      	movs	r0, #144	; 0x90
    75dc:	4b10      	ldr	r3, [pc, #64]	; (7620 <frameParse+0x738>)
    75de:	4798      	blx	r3
    75e0:	1e06      	subs	r6, r0, #0
    75e2:	d100      	bne.n	75e6 <frameParse+0x6fe>
    75e4:	e525      	b.n	7032 <frameParse+0x14a>
    75e6:	0021      	movs	r1, r4
    75e8:	2220      	movs	r2, #32
    75ea:	4b12      	ldr	r3, [pc, #72]	; (7634 <frameParse+0x74c>)
    75ec:	3018      	adds	r0, #24
    75ee:	4798      	blx	r3
    75f0:	2338      	movs	r3, #56	; 0x38
    75f2:	0030      	movs	r0, r6
    75f4:	9a06      	ldr	r2, [sp, #24]
    75f6:	9907      	ldr	r1, [sp, #28]
    75f8:	54f2      	strb	r2, [r6, r3]
    75fa:	3039      	adds	r0, #57	; 0x39
    75fc:	60b5      	str	r5, [r6, #8]
    75fe:	4b0d      	ldr	r3, [pc, #52]	; (7634 <frameParse+0x74c>)
    7600:	4798      	blx	r3
    7602:	2301      	movs	r3, #1
    7604:	74f3      	strb	r3, [r6, #19]
    7606:	4b18      	ldr	r3, [pc, #96]	; (7668 <frameParse+0x780>)
    7608:	0031      	movs	r1, r6
    760a:	681a      	ldr	r2, [r3, #0]
    760c:	2327      	movs	r3, #39	; 0x27
    760e:	5cd3      	ldrb	r3, [r2, r3]
    7610:	4816      	ldr	r0, [pc, #88]	; (766c <frameParse+0x784>)
    7612:	3301      	adds	r3, #1
    7614:	7433      	strb	r3, [r6, #16]
    7616:	4b16      	ldr	r3, [pc, #88]	; (7670 <frameParse+0x788>)
    7618:	4798      	blx	r3
    761a:	e50a      	b.n	7032 <frameParse+0x14a>
    761c:	200003c0 	.word	0x200003c0
    7620:	000033a1 	.word	0x000033a1
    7624:	20003070 	.word	0x20003070
    7628:	20003058 	.word	0x20003058
    762c:	20003040 	.word	0x20003040
    7630:	200030cc 	.word	0x200030cc
    7634:	0000932f 	.word	0x0000932f
    7638:	20000090 	.word	0x20000090
    763c:	00006759 	.word	0x00006759
    7640:	00006d11 	.word	0x00006d11
    7644:	0000fffc 	.word	0x0000fffc
    7648:	20003084 	.word	0x20003084
    764c:	0000ffff 	.word	0x0000ffff
    7650:	200003d8 	.word	0x200003d8
    7654:	00007de5 	.word	0x00007de5
    7658:	000033f1 	.word	0x000033f1
    765c:	00006655 	.word	0x00006655
    7660:	00008749 	.word	0x00008749
    7664:	0000fffd 	.word	0x0000fffd
    7668:	2000303c 	.word	0x2000303c
    766c:	20003030 	.word	0x20003030
    7670:	0000350d 	.word	0x0000350d
    7674:	2310      	movs	r3, #16
    7676:	469a      	mov	sl, r3
    7678:	930c      	str	r3, [sp, #48]	; 0x30
    767a:	3b08      	subs	r3, #8
    767c:	930a      	str	r3, [sp, #40]	; 0x28
    767e:	2004      	movs	r0, #4
    7680:	3b05      	subs	r3, #5
    7682:	2103      	movs	r1, #3
    7684:	e74d      	b.n	7522 <frameParse+0x63a>
    7686:	4b2d      	ldr	r3, [pc, #180]	; (773c <frameParse+0x854>)
    7688:	4798      	blx	r3
    768a:	2832      	cmp	r0, #50	; 0x32
    768c:	d801      	bhi.n	7692 <frameParse+0x7aa>
    768e:	7863      	ldrb	r3, [r4, #1]
    7690:	e524      	b.n	70dc <frameParse+0x1f4>
    7692:	2090      	movs	r0, #144	; 0x90
    7694:	4b2a      	ldr	r3, [pc, #168]	; (7740 <frameParse+0x858>)
    7696:	4798      	blx	r3
    7698:	2800      	cmp	r0, #0
    769a:	d100      	bne.n	769e <frameParse+0x7b6>
    769c:	e4c9      	b.n	7032 <frameParse+0x14a>
    769e:	9008      	str	r0, [sp, #32]
    76a0:	2220      	movs	r2, #32
    76a2:	0021      	movs	r1, r4
    76a4:	4b27      	ldr	r3, [pc, #156]	; (7744 <frameParse+0x85c>)
    76a6:	3018      	adds	r0, #24
    76a8:	4798      	blx	r3
    76aa:	2338      	movs	r3, #56	; 0x38
    76ac:	9808      	ldr	r0, [sp, #32]
    76ae:	9a06      	ldr	r2, [sp, #24]
    76b0:	9907      	ldr	r1, [sp, #28]
    76b2:	54c2      	strb	r2, [r0, r3]
    76b4:	6085      	str	r5, [r0, #8]
    76b6:	4b23      	ldr	r3, [pc, #140]	; (7744 <frameParse+0x85c>)
    76b8:	3039      	adds	r0, #57	; 0x39
    76ba:	4798      	blx	r3
    76bc:	4653      	mov	r3, sl
    76be:	2201      	movs	r2, #1
    76c0:	6819      	ldr	r1, [r3, #0]
    76c2:	2327      	movs	r3, #39	; 0x27
    76c4:	9808      	ldr	r0, [sp, #32]
    76c6:	74c2      	strb	r2, [r0, #19]
    76c8:	5ccb      	ldrb	r3, [r1, r3]
    76ca:	7445      	strb	r5, [r0, #17]
    76cc:	189b      	adds	r3, r3, r2
    76ce:	7403      	strb	r3, [r0, #16]
    76d0:	7502      	strb	r2, [r0, #20]
    76d2:	0001      	movs	r1, r0
    76d4:	4b1c      	ldr	r3, [pc, #112]	; (7748 <frameParse+0x860>)
    76d6:	481d      	ldr	r0, [pc, #116]	; (774c <frameParse+0x864>)
    76d8:	4798      	blx	r3
    76da:	7863      	ldrb	r3, [r4, #1]
    76dc:	e4fe      	b.n	70dc <frameParse+0x1f4>
    76de:	2003      	movs	r0, #3
    76e0:	2703      	movs	r7, #3
    76e2:	e631      	b.n	7348 <frameParse+0x460>
    76e4:	2090      	movs	r0, #144	; 0x90
    76e6:	4b16      	ldr	r3, [pc, #88]	; (7740 <frameParse+0x858>)
    76e8:	4798      	blx	r3
    76ea:	1e05      	subs	r5, r0, #0
    76ec:	d100      	bne.n	76f0 <frameParse+0x808>
    76ee:	e4a0      	b.n	7032 <frameParse+0x14a>
    76f0:	2220      	movs	r2, #32
    76f2:	0021      	movs	r1, r4
    76f4:	4b13      	ldr	r3, [pc, #76]	; (7744 <frameParse+0x85c>)
    76f6:	3018      	adds	r0, #24
    76f8:	4798      	blx	r3
    76fa:	2338      	movs	r3, #56	; 0x38
    76fc:	9a06      	ldr	r2, [sp, #24]
    76fe:	0028      	movs	r0, r5
    7700:	54ea      	strb	r2, [r5, r3]
    7702:	2300      	movs	r3, #0
    7704:	9907      	ldr	r1, [sp, #28]
    7706:	60ab      	str	r3, [r5, #8]
    7708:	3039      	adds	r0, #57	; 0x39
    770a:	4b0e      	ldr	r3, [pc, #56]	; (7744 <frameParse+0x85c>)
    770c:	4798      	blx	r3
    770e:	2301      	movs	r3, #1
    7710:	74eb      	strb	r3, [r5, #19]
    7712:	88a0      	ldrh	r0, [r4, #4]
    7714:	4b0e      	ldr	r3, [pc, #56]	; (7750 <frameParse+0x868>)
    7716:	4798      	blx	r3
    7718:	2800      	cmp	r0, #0
    771a:	d100      	bne.n	771e <frameParse+0x836>
    771c:	e4d4      	b.n	70c8 <frameParse+0x1e0>
    771e:	4b0d      	ldr	r3, [pc, #52]	; (7754 <frameParse+0x86c>)
    7720:	0029      	movs	r1, r5
    7722:	681a      	ldr	r2, [r3, #0]
    7724:	2326      	movs	r3, #38	; 0x26
    7726:	5cd3      	ldrb	r3, [r2, r3]
    7728:	480b      	ldr	r0, [pc, #44]	; (7758 <frameParse+0x870>)
    772a:	3301      	adds	r3, #1
    772c:	742b      	strb	r3, [r5, #16]
    772e:	4b06      	ldr	r3, [pc, #24]	; (7748 <frameParse+0x860>)
    7730:	4798      	blx	r3
    7732:	e47e      	b.n	7032 <frameParse+0x14a>
    7734:	4684      	mov	ip, r0
    7736:	2700      	movs	r7, #0
    7738:	e691      	b.n	745e <frameParse+0x576>
    773a:	46c0      	nop			; (mov r8, r8)
    773c:	0000342d 	.word	0x0000342d
    7740:	000033a1 	.word	0x000033a1
    7744:	0000932f 	.word	0x0000932f
    7748:	0000350d 	.word	0x0000350d
    774c:	20003030 	.word	0x20003030
    7750:	00008cf9 	.word	0x00008cf9
    7754:	2000303c 	.word	0x2000303c
    7758:	200030c0 	.word	0x200030c0

0000775c <indirectDataTimerHandler>:
    775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    775e:	46ce      	mov	lr, r9
    7760:	4647      	mov	r7, r8
    7762:	b580      	push	{r7, lr}
    7764:	4e18      	ldr	r6, [pc, #96]	; (77c8 <indirectDataTimerHandler+0x6c>)
    7766:	7a33      	ldrb	r3, [r6, #8]
    7768:	2b00      	cmp	r3, #0
    776a:	d029      	beq.n	77c0 <indirectDataTimerHandler+0x64>
    776c:	4b17      	ldr	r3, [pc, #92]	; (77cc <indirectDataTimerHandler+0x70>)
    776e:	2500      	movs	r5, #0
    7770:	4698      	mov	r8, r3
    7772:	4b17      	ldr	r3, [pc, #92]	; (77d0 <indirectDataTimerHandler+0x74>)
    7774:	4f17      	ldr	r7, [pc, #92]	; (77d4 <indirectDataTimerHandler+0x78>)
    7776:	4699      	mov	r9, r3
    7778:	e00d      	b.n	7796 <indirectDataTimerHandler+0x3a>
    777a:	6883      	ldr	r3, [r0, #8]
    777c:	2b00      	cmp	r3, #0
    777e:	d003      	beq.n	7788 <indirectDataTimerHandler+0x2c>
    7780:	7c80      	ldrb	r0, [r0, #18]
    7782:	0022      	movs	r2, r4
    7784:	2105      	movs	r1, #5
    7786:	4798      	blx	r3
    7788:	0020      	movs	r0, r4
    778a:	47c8      	blx	r9
    778c:	3501      	adds	r5, #1
    778e:	7a33      	ldrb	r3, [r6, #8]
    7790:	b2ed      	uxtb	r5, r5
    7792:	42ab      	cmp	r3, r5
    7794:	d914      	bls.n	77c0 <indirectDataTimerHandler+0x64>
    7796:	2100      	movs	r1, #0
    7798:	0030      	movs	r0, r6
    779a:	47b8      	blx	r7
    779c:	1e04      	subs	r4, r0, #0
    779e:	d00f      	beq.n	77c0 <indirectDataTimerHandler+0x64>
    77a0:	7c03      	ldrb	r3, [r0, #16]
    77a2:	2b00      	cmp	r3, #0
    77a4:	d004      	beq.n	77b0 <indirectDataTimerHandler+0x54>
    77a6:	3b01      	subs	r3, #1
    77a8:	b2db      	uxtb	r3, r3
    77aa:	7403      	strb	r3, [r0, #16]
    77ac:	2b00      	cmp	r3, #0
    77ae:	d0e4      	beq.n	777a <indirectDataTimerHandler+0x1e>
    77b0:	0021      	movs	r1, r4
    77b2:	0030      	movs	r0, r6
    77b4:	47c0      	blx	r8
    77b6:	3501      	adds	r5, #1
    77b8:	7a33      	ldrb	r3, [r6, #8]
    77ba:	b2ed      	uxtb	r5, r5
    77bc:	42ab      	cmp	r3, r5
    77be:	d8ea      	bhi.n	7796 <indirectDataTimerHandler+0x3a>
    77c0:	bc0c      	pop	{r2, r3}
    77c2:	4690      	mov	r8, r2
    77c4:	4699      	mov	r9, r3
    77c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77c8:	20003030 	.word	0x20003030
    77cc:	0000350d 	.word	0x0000350d
    77d0:	000033f1 	.word	0x000033f1
    77d4:	00003545 	.word	0x00003545

000077d8 <edScanDurationExpired>:
    77d8:	2200      	movs	r2, #0
    77da:	4b01      	ldr	r3, [pc, #4]	; (77e0 <edScanDurationExpired+0x8>)
    77dc:	701a      	strb	r2, [r3, #0]
    77de:	4770      	bx	lr
    77e0:	200003df 	.word	0x200003df

000077e4 <assignAddress>:
    77e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    77e6:	4645      	mov	r5, r8
    77e8:	46de      	mov	lr, fp
    77ea:	4657      	mov	r7, sl
    77ec:	464e      	mov	r6, r9
    77ee:	b5e0      	push	{r5, r6, r7, lr}
    77f0:	b087      	sub	sp, #28
    77f2:	9303      	str	r3, [sp, #12]
    77f4:	b2cb      	uxtb	r3, r1
    77f6:	4698      	mov	r8, r3
    77f8:	0005      	movs	r5, r0
    77fa:	2306      	movs	r3, #6
    77fc:	4668      	mov	r0, sp
    77fe:	4641      	mov	r1, r8
    7800:	7002      	strb	r2, [r0, #0]
    7802:	420b      	tst	r3, r1
    7804:	d003      	beq.n	780e <assignAddress+0x2a>
    7806:	4013      	ands	r3, r2
    7808:	2b04      	cmp	r3, #4
    780a:	d100      	bne.n	780e <assignAddress+0x2a>
    780c:	e0ae      	b.n	796c <assignAddress+0x188>
    780e:	4643      	mov	r3, r8
    7810:	079b      	lsls	r3, r3, #30
    7812:	d107      	bne.n	7824 <assignAddress+0x40>
    7814:	488e      	ldr	r0, [pc, #568]	; (7a50 <assignAddress+0x26c>)
    7816:	b007      	add	sp, #28
    7818:	bc3c      	pop	{r2, r3, r4, r5}
    781a:	4690      	mov	r8, r2
    781c:	4699      	mov	r9, r3
    781e:	46a2      	mov	sl, r4
    7820:	46ab      	mov	fp, r5
    7822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7824:	9b00      	ldr	r3, [sp, #0]
    7826:	07db      	lsls	r3, r3, #31
    7828:	d550      	bpl.n	78cc <assignAddress+0xe8>
    782a:	4b8a      	ldr	r3, [pc, #552]	; (7a54 <assignAddress+0x270>)
    782c:	4699      	mov	r9, r3
    782e:	681b      	ldr	r3, [r3, #0]
    7830:	001a      	movs	r2, r3
    7832:	9303      	str	r3, [sp, #12]
    7834:	2323      	movs	r3, #35	; 0x23
    7836:	5cd3      	ldrb	r3, [r2, r3]
    7838:	469b      	mov	fp, r3
    783a:	2b00      	cmp	r3, #0
    783c:	d0ea      	beq.n	7814 <assignAddress+0x30>
    783e:	6893      	ldr	r3, [r2, #8]
    7840:	4f85      	ldr	r7, [pc, #532]	; (7a58 <assignAddress+0x274>)
    7842:	469a      	mov	sl, r3
    7844:	001c      	movs	r4, r3
    7846:	003b      	movs	r3, r7
    7848:	2600      	movs	r6, #0
    784a:	4657      	mov	r7, sl
    784c:	469a      	mov	sl, r3
    784e:	1be3      	subs	r3, r4, r7
    7850:	2208      	movs	r2, #8
    7852:	0029      	movs	r1, r5
    7854:	0020      	movs	r0, r4
    7856:	4698      	mov	r8, r3
    7858:	47d0      	blx	sl
    785a:	2800      	cmp	r0, #0
    785c:	d100      	bne.n	7860 <assignAddress+0x7c>
    785e:	e0e9      	b.n	7a34 <assignAddress+0x250>
    7860:	7823      	ldrb	r3, [r4, #0]
    7862:	2bff      	cmp	r3, #255	; 0xff
    7864:	d000      	beq.n	7868 <assignAddress+0x84>
    7866:	e0c2      	b.n	79ee <assignAddress+0x20a>
    7868:	7863      	ldrb	r3, [r4, #1]
    786a:	2bff      	cmp	r3, #255	; 0xff
    786c:	d000      	beq.n	7870 <assignAddress+0x8c>
    786e:	e0be      	b.n	79ee <assignAddress+0x20a>
    7870:	78a3      	ldrb	r3, [r4, #2]
    7872:	2bff      	cmp	r3, #255	; 0xff
    7874:	d000      	beq.n	7878 <assignAddress+0x94>
    7876:	e0ba      	b.n	79ee <assignAddress+0x20a>
    7878:	78e3      	ldrb	r3, [r4, #3]
    787a:	2bff      	cmp	r3, #255	; 0xff
    787c:	d000      	beq.n	7880 <assignAddress+0x9c>
    787e:	e0b6      	b.n	79ee <assignAddress+0x20a>
    7880:	7923      	ldrb	r3, [r4, #4]
    7882:	2bff      	cmp	r3, #255	; 0xff
    7884:	d000      	beq.n	7888 <assignAddress+0xa4>
    7886:	e0b2      	b.n	79ee <assignAddress+0x20a>
    7888:	7963      	ldrb	r3, [r4, #5]
    788a:	2bff      	cmp	r3, #255	; 0xff
    788c:	d000      	beq.n	7890 <assignAddress+0xac>
    788e:	e0ae      	b.n	79ee <assignAddress+0x20a>
    7890:	79a3      	ldrb	r3, [r4, #6]
    7892:	2bff      	cmp	r3, #255	; 0xff
    7894:	d000      	beq.n	7898 <assignAddress+0xb4>
    7896:	e0aa      	b.n	79ee <assignAddress+0x20a>
    7898:	79e3      	ldrb	r3, [r4, #7]
    789a:	2bff      	cmp	r3, #255	; 0xff
    789c:	d000      	beq.n	78a0 <assignAddress+0xbc>
    789e:	e0a6      	b.n	79ee <assignAddress+0x20a>
    78a0:	2208      	movs	r2, #8
    78a2:	0029      	movs	r1, r5
    78a4:	4b6d      	ldr	r3, [pc, #436]	; (7a5c <assignAddress+0x278>)
    78a6:	0020      	movs	r0, r4
    78a8:	4798      	blx	r3
    78aa:	464b      	mov	r3, r9
    78ac:	4669      	mov	r1, sp
    78ae:	681a      	ldr	r2, [r3, #0]
    78b0:	7809      	ldrb	r1, [r1, #0]
    78b2:	6893      	ldr	r3, [r2, #8]
    78b4:	4443      	add	r3, r8
    78b6:	7319      	strb	r1, [r3, #12]
    78b8:	6893      	ldr	r3, [r2, #8]
    78ba:	4443      	add	r3, r8
    78bc:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    78be:	609a      	str	r2, [r3, #8]
    78c0:	4b67      	ldr	r3, [pc, #412]	; (7a60 <assignAddress+0x27c>)
    78c2:	8818      	ldrh	r0, [r3, #0]
    78c4:	3080      	adds	r0, #128	; 0x80
    78c6:	1980      	adds	r0, r0, r6
    78c8:	b280      	uxth	r0, r0
    78ca:	e7a4      	b.n	7816 <assignAddress+0x32>
    78cc:	4b61      	ldr	r3, [pc, #388]	; (7a54 <assignAddress+0x270>)
    78ce:	4699      	mov	r9, r3
    78d0:	681b      	ldr	r3, [r3, #0]
    78d2:	001a      	movs	r2, r3
    78d4:	9304      	str	r3, [sp, #16]
    78d6:	2324      	movs	r3, #36	; 0x24
    78d8:	5cd3      	ldrb	r3, [r2, r3]
    78da:	469b      	mov	fp, r3
    78dc:	2b01      	cmp	r3, #1
    78de:	d999      	bls.n	7814 <assignAddress+0x30>
    78e0:	68d3      	ldr	r3, [r2, #12]
    78e2:	4f5d      	ldr	r7, [pc, #372]	; (7a58 <assignAddress+0x274>)
    78e4:	469a      	mov	sl, r3
    78e6:	001c      	movs	r4, r3
    78e8:	003b      	movs	r3, r7
    78ea:	2601      	movs	r6, #1
    78ec:	4657      	mov	r7, sl
    78ee:	469a      	mov	sl, r3
    78f0:	3414      	adds	r4, #20
    78f2:	1be3      	subs	r3, r4, r7
    78f4:	2208      	movs	r2, #8
    78f6:	0029      	movs	r1, r5
    78f8:	0020      	movs	r0, r4
    78fa:	4698      	mov	r8, r3
    78fc:	47d0      	blx	sl
    78fe:	2800      	cmp	r0, #0
    7900:	d100      	bne.n	7904 <assignAddress+0x120>
    7902:	e08a      	b.n	7a1a <assignAddress+0x236>
    7904:	7823      	ldrb	r3, [r4, #0]
    7906:	2bff      	cmp	r3, #255	; 0xff
    7908:	d178      	bne.n	79fc <assignAddress+0x218>
    790a:	7863      	ldrb	r3, [r4, #1]
    790c:	2bff      	cmp	r3, #255	; 0xff
    790e:	d175      	bne.n	79fc <assignAddress+0x218>
    7910:	78a3      	ldrb	r3, [r4, #2]
    7912:	2bff      	cmp	r3, #255	; 0xff
    7914:	d172      	bne.n	79fc <assignAddress+0x218>
    7916:	78e3      	ldrb	r3, [r4, #3]
    7918:	2bff      	cmp	r3, #255	; 0xff
    791a:	d16f      	bne.n	79fc <assignAddress+0x218>
    791c:	7923      	ldrb	r3, [r4, #4]
    791e:	2bff      	cmp	r3, #255	; 0xff
    7920:	d16c      	bne.n	79fc <assignAddress+0x218>
    7922:	7963      	ldrb	r3, [r4, #5]
    7924:	2bff      	cmp	r3, #255	; 0xff
    7926:	d169      	bne.n	79fc <assignAddress+0x218>
    7928:	79a3      	ldrb	r3, [r4, #6]
    792a:	2bff      	cmp	r3, #255	; 0xff
    792c:	d166      	bne.n	79fc <assignAddress+0x218>
    792e:	79e3      	ldrb	r3, [r4, #7]
    7930:	2bff      	cmp	r3, #255	; 0xff
    7932:	d163      	bne.n	79fc <assignAddress+0x218>
    7934:	0029      	movs	r1, r5
    7936:	2208      	movs	r2, #8
    7938:	0020      	movs	r0, r4
    793a:	4c48      	ldr	r4, [pc, #288]	; (7a5c <assignAddress+0x278>)
    793c:	47a0      	blx	r4
    793e:	464b      	mov	r3, r9
    7940:	466a      	mov	r2, sp
    7942:	681d      	ldr	r5, [r3, #0]
    7944:	7812      	ldrb	r2, [r2, #0]
    7946:	68eb      	ldr	r3, [r5, #12]
    7948:	9903      	ldr	r1, [sp, #12]
    794a:	4443      	add	r3, r8
    794c:	741a      	strb	r2, [r3, #16]
    794e:	68eb      	ldr	r3, [r5, #12]
    7950:	2204      	movs	r2, #4
    7952:	4443      	add	r3, r8
    7954:	0018      	movs	r0, r3
    7956:	3008      	adds	r0, #8
    7958:	47a0      	blx	r4
    795a:	68eb      	ldr	r3, [r5, #12]
    795c:	4443      	add	r3, r8
    795e:	689a      	ldr	r2, [r3, #8]
    7960:	60da      	str	r2, [r3, #12]
    7962:	4b3f      	ldr	r3, [pc, #252]	; (7a60 <assignAddress+0x27c>)
    7964:	8818      	ldrh	r0, [r3, #0]
    7966:	1980      	adds	r0, r0, r6
    7968:	b280      	uxth	r0, r0
    796a:	e754      	b.n	7816 <assignAddress+0x32>
    796c:	4b39      	ldr	r3, [pc, #228]	; (7a54 <assignAddress+0x270>)
    796e:	4699      	mov	r9, r3
    7970:	681b      	ldr	r3, [r3, #0]
    7972:	001a      	movs	r2, r3
    7974:	9304      	str	r3, [sp, #16]
    7976:	2320      	movs	r3, #32
    7978:	5cd3      	ldrb	r3, [r2, r3]
    797a:	2b01      	cmp	r3, #1
    797c:	d800      	bhi.n	7980 <assignAddress+0x19c>
    797e:	e746      	b.n	780e <assignAddress+0x2a>
    7980:	6812      	ldr	r2, [r2, #0]
    7982:	4f35      	ldr	r7, [pc, #212]	; (7a58 <assignAddress+0x274>)
    7984:	4693      	mov	fp, r2
    7986:	0014      	movs	r4, r2
    7988:	46b8      	mov	r8, r7
    798a:	2601      	movs	r6, #1
    798c:	465f      	mov	r7, fp
    798e:	469b      	mov	fp, r3
    7990:	340c      	adds	r4, #12
    7992:	9105      	str	r1, [sp, #20]
    7994:	1be3      	subs	r3, r4, r7
    7996:	2208      	movs	r2, #8
    7998:	0029      	movs	r1, r5
    799a:	0020      	movs	r0, r4
    799c:	469a      	mov	sl, r3
    799e:	47c0      	blx	r8
    79a0:	2800      	cmp	r0, #0
    79a2:	d04d      	beq.n	7a40 <assignAddress+0x25c>
    79a4:	7823      	ldrb	r3, [r4, #0]
    79a6:	2bff      	cmp	r3, #255	; 0xff
    79a8:	d12f      	bne.n	7a0a <assignAddress+0x226>
    79aa:	7863      	ldrb	r3, [r4, #1]
    79ac:	2bff      	cmp	r3, #255	; 0xff
    79ae:	d12c      	bne.n	7a0a <assignAddress+0x226>
    79b0:	78a3      	ldrb	r3, [r4, #2]
    79b2:	2bff      	cmp	r3, #255	; 0xff
    79b4:	d129      	bne.n	7a0a <assignAddress+0x226>
    79b6:	78e3      	ldrb	r3, [r4, #3]
    79b8:	2bff      	cmp	r3, #255	; 0xff
    79ba:	d126      	bne.n	7a0a <assignAddress+0x226>
    79bc:	7923      	ldrb	r3, [r4, #4]
    79be:	2bff      	cmp	r3, #255	; 0xff
    79c0:	d123      	bne.n	7a0a <assignAddress+0x226>
    79c2:	7963      	ldrb	r3, [r4, #5]
    79c4:	2bff      	cmp	r3, #255	; 0xff
    79c6:	d120      	bne.n	7a0a <assignAddress+0x226>
    79c8:	79a3      	ldrb	r3, [r4, #6]
    79ca:	2bff      	cmp	r3, #255	; 0xff
    79cc:	d11d      	bne.n	7a0a <assignAddress+0x226>
    79ce:	79e3      	ldrb	r3, [r4, #7]
    79d0:	2bff      	cmp	r3, #255	; 0xff
    79d2:	d11a      	bne.n	7a0a <assignAddress+0x226>
    79d4:	2208      	movs	r2, #8
    79d6:	4b21      	ldr	r3, [pc, #132]	; (7a5c <assignAddress+0x278>)
    79d8:	0029      	movs	r1, r5
    79da:	0020      	movs	r0, r4
    79dc:	4798      	blx	r3
    79de:	464b      	mov	r3, r9
    79e0:	681a      	ldr	r2, [r3, #0]
    79e2:	0230      	lsls	r0, r6, #8
    79e4:	6813      	ldr	r3, [r2, #0]
    79e6:	8bd2      	ldrh	r2, [r2, #30]
    79e8:	4453      	add	r3, sl
    79ea:	609a      	str	r2, [r3, #8]
    79ec:	e713      	b.n	7816 <assignAddress+0x32>
    79ee:	3601      	adds	r6, #1
    79f0:	b2f6      	uxtb	r6, r6
    79f2:	3410      	adds	r4, #16
    79f4:	455e      	cmp	r6, fp
    79f6:	d000      	beq.n	79fa <assignAddress+0x216>
    79f8:	e729      	b.n	784e <assignAddress+0x6a>
    79fa:	e70b      	b.n	7814 <assignAddress+0x30>
    79fc:	3601      	adds	r6, #1
    79fe:	b2f6      	uxtb	r6, r6
    7a00:	3414      	adds	r4, #20
    7a02:	455e      	cmp	r6, fp
    7a04:	d000      	beq.n	7a08 <assignAddress+0x224>
    7a06:	e774      	b.n	78f2 <assignAddress+0x10e>
    7a08:	e704      	b.n	7814 <assignAddress+0x30>
    7a0a:	3601      	adds	r6, #1
    7a0c:	b2f6      	uxtb	r6, r6
    7a0e:	340c      	adds	r4, #12
    7a10:	455e      	cmp	r6, fp
    7a12:	d1bf      	bne.n	7994 <assignAddress+0x1b0>
    7a14:	9b05      	ldr	r3, [sp, #20]
    7a16:	4698      	mov	r8, r3
    7a18:	e6f9      	b.n	780e <assignAddress+0x2a>
    7a1a:	46ba      	mov	sl, r7
    7a1c:	4811      	ldr	r0, [pc, #68]	; (7a64 <assignAddress+0x280>)
    7a1e:	2204      	movs	r2, #4
    7a20:	4b0e      	ldr	r3, [pc, #56]	; (7a5c <assignAddress+0x278>)
    7a22:	4450      	add	r0, sl
    7a24:	9903      	ldr	r1, [sp, #12]
    7a26:	4798      	blx	r3
    7a28:	4a0f      	ldr	r2, [pc, #60]	; (7a68 <assignAddress+0x284>)
    7a2a:	9b04      	ldr	r3, [sp, #16]
    7a2c:	4694      	mov	ip, r2
    7a2e:	68db      	ldr	r3, [r3, #12]
    7a30:	4463      	add	r3, ip
    7a32:	e794      	b.n	795e <assignAddress+0x17a>
    7a34:	23ff      	movs	r3, #255	; 0xff
    7a36:	46ba      	mov	sl, r7
    7a38:	011b      	lsls	r3, r3, #4
    7a3a:	4453      	add	r3, sl
    7a3c:	9a03      	ldr	r2, [sp, #12]
    7a3e:	e73d      	b.n	78bc <assignAddress+0xd8>
    7a40:	46bb      	mov	fp, r7
    7a42:	9a04      	ldr	r2, [sp, #16]
    7a44:	4b09      	ldr	r3, [pc, #36]	; (7a6c <assignAddress+0x288>)
    7a46:	8bd2      	ldrh	r2, [r2, #30]
    7a48:	445b      	add	r3, fp
    7a4a:	609a      	str	r2, [r3, #8]
    7a4c:	0230      	lsls	r0, r6, #8
    7a4e:	e6e2      	b.n	7816 <assignAddress+0x32>
    7a50:	0000ffff 	.word	0x0000ffff
    7a54:	2000303c 	.word	0x2000303c
    7a58:	00009311 	.word	0x00009311
    7a5c:	0000932f 	.word	0x0000932f
    7a60:	20003084 	.word	0x20003084
    7a64:	000013f4 	.word	0x000013f4
    7a68:	000013ec 	.word	0x000013ec
    7a6c:	00000bf4 	.word	0x00000bf4

00007a70 <commandConfcb>:
    7a70:	b510      	push	{r4, lr}
    7a72:	0010      	movs	r0, r2
    7a74:	4b01      	ldr	r3, [pc, #4]	; (7a7c <commandConfcb+0xc>)
    7a76:	4798      	blx	r3
    7a78:	bd10      	pop	{r4, pc}
    7a7a:	46c0      	nop			; (mov r8, r8)
    7a7c:	000033f1 	.word	0x000033f1

00007a80 <MiApp_NoiseDetection.part.0>:
    7a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a82:	4645      	mov	r5, r8
    7a84:	464e      	mov	r6, r9
    7a86:	46de      	mov	lr, fp
    7a88:	4657      	mov	r7, sl
    7a8a:	b5e0      	push	{r5, r6, r7, lr}
    7a8c:	b087      	sub	sp, #28
    7a8e:	ab04      	add	r3, sp, #16
    7a90:	1ddd      	adds	r5, r3, #7
    7a92:	2300      	movs	r3, #0
    7a94:	702b      	strb	r3, [r5, #0]
    7a96:	3301      	adds	r3, #1
    7a98:	408b      	lsls	r3, r1
    7a9a:	3301      	adds	r3, #1
    7a9c:	9203      	str	r2, [sp, #12]
    7a9e:	011a      	lsls	r2, r3, #4
    7aa0:	1ad3      	subs	r3, r2, r3
    7aa2:	019b      	lsls	r3, r3, #6
    7aa4:	9300      	str	r3, [sp, #0]
    7aa6:	23ff      	movs	r3, #255	; 0xff
    7aa8:	9302      	str	r3, [sp, #8]
    7aaa:	9301      	str	r3, [sp, #4]
    7aac:	4b2d      	ldr	r3, [pc, #180]	; (7b64 <MiApp_NoiseDetection.part.0+0xe4>)
    7aae:	4681      	mov	r9, r0
    7ab0:	4698      	mov	r8, r3
    7ab2:	4c2d      	ldr	r4, [pc, #180]	; (7b68 <MiApp_NoiseDetection.part.0+0xe8>)
    7ab4:	e004      	b.n	7ac0 <MiApp_NoiseDetection.part.0+0x40>
    7ab6:	3301      	adds	r3, #1
    7ab8:	b2db      	uxtb	r3, r3
    7aba:	702b      	strb	r3, [r5, #0]
    7abc:	2b1f      	cmp	r3, #31
    7abe:	d83e      	bhi.n	7b3e <MiApp_NoiseDetection.part.0+0xbe>
    7ac0:	2601      	movs	r6, #1
    7ac2:	47c0      	blx	r8
    7ac4:	0032      	movs	r2, r6
    7ac6:	782b      	ldrb	r3, [r5, #0]
    7ac8:	4649      	mov	r1, r9
    7aca:	409a      	lsls	r2, r3
    7acc:	400a      	ands	r2, r1
    7ace:	4210      	tst	r0, r2
    7ad0:	d0f1      	beq.n	7ab6 <MiApp_NoiseDetection.part.0+0x36>
    7ad2:	0029      	movs	r1, r5
    7ad4:	4b25      	ldr	r3, [pc, #148]	; (7b6c <MiApp_NoiseDetection.part.0+0xec>)
    7ad6:	2000      	movs	r0, #0
    7ad8:	4798      	blx	r3
    7ada:	4f25      	ldr	r7, [pc, #148]	; (7b70 <MiApp_NoiseDetection.part.0+0xf0>)
    7adc:	4b25      	ldr	r3, [pc, #148]	; (7b74 <MiApp_NoiseDetection.part.0+0xf4>)
    7ade:	9800      	ldr	r0, [sp, #0]
    7ae0:	613b      	str	r3, [r7, #16]
    7ae2:	4b25      	ldr	r3, [pc, #148]	; (7b78 <MiApp_NoiseDetection.part.0+0xf8>)
    7ae4:	469b      	mov	fp, r3
    7ae6:	4798      	blx	r3
    7ae8:	21fa      	movs	r1, #250	; 0xfa
    7aea:	4b24      	ldr	r3, [pc, #144]	; (7b7c <MiApp_NoiseDetection.part.0+0xfc>)
    7aec:	0089      	lsls	r1, r1, #2
    7aee:	469a      	mov	sl, r3
    7af0:	4798      	blx	r3
    7af2:	6078      	str	r0, [r7, #4]
    7af4:	9800      	ldr	r0, [sp, #0]
    7af6:	47d8      	blx	fp
    7af8:	21fa      	movs	r1, #250	; 0xfa
    7afa:	0089      	lsls	r1, r1, #2
    7afc:	47d0      	blx	sl
    7afe:	2300      	movs	r3, #0
    7b00:	60b8      	str	r0, [r7, #8]
    7b02:	733b      	strb	r3, [r7, #12]
    7b04:	0038      	movs	r0, r7
    7b06:	4b1e      	ldr	r3, [pc, #120]	; (7b80 <MiApp_NoiseDetection.part.0+0x100>)
    7b08:	4798      	blx	r3
    7b0a:	4f1e      	ldr	r7, [pc, #120]	; (7b84 <MiApp_NoiseDetection.part.0+0x104>)
    7b0c:	4b1e      	ldr	r3, [pc, #120]	; (7b88 <MiApp_NoiseDetection.part.0+0x108>)
    7b0e:	703e      	strb	r6, [r7, #0]
    7b10:	469a      	mov	sl, r3
    7b12:	2600      	movs	r6, #0
    7b14:	e000      	b.n	7b18 <MiApp_NoiseDetection.part.0+0x98>
    7b16:	47a0      	blx	r4
    7b18:	2001      	movs	r0, #1
    7b1a:	47d0      	blx	sl
    7b1c:	1c03      	adds	r3, r0, #0
    7b1e:	42b0      	cmp	r0, r6
    7b20:	d200      	bcs.n	7b24 <MiApp_NoiseDetection.part.0+0xa4>
    7b22:	1c33      	adds	r3, r6, #0
    7b24:	b2de      	uxtb	r6, r3
    7b26:	783b      	ldrb	r3, [r7, #0]
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d1f4      	bne.n	7b16 <MiApp_NoiseDetection.part.0+0x96>
    7b2c:	9b01      	ldr	r3, [sp, #4]
    7b2e:	429e      	cmp	r6, r3
    7b30:	d30d      	bcc.n	7b4e <MiApp_NoiseDetection.part.0+0xce>
    7b32:	782b      	ldrb	r3, [r5, #0]
    7b34:	3301      	adds	r3, #1
    7b36:	b2db      	uxtb	r3, r3
    7b38:	702b      	strb	r3, [r5, #0]
    7b3a:	2b1f      	cmp	r3, #31
    7b3c:	d9c0      	bls.n	7ac0 <MiApp_NoiseDetection.part.0+0x40>
    7b3e:	9802      	ldr	r0, [sp, #8]
    7b40:	b007      	add	sp, #28
    7b42:	bc3c      	pop	{r2, r3, r4, r5}
    7b44:	4690      	mov	r8, r2
    7b46:	4699      	mov	r9, r3
    7b48:	46a2      	mov	sl, r4
    7b4a:	46ab      	mov	fp, r5
    7b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b4e:	782b      	ldrb	r3, [r5, #0]
    7b50:	9a03      	ldr	r2, [sp, #12]
    7b52:	9302      	str	r3, [sp, #8]
    7b54:	2a00      	cmp	r2, #0
    7b56:	d002      	beq.n	7b5e <MiApp_NoiseDetection.part.0+0xde>
    7b58:	7016      	strb	r6, [r2, #0]
    7b5a:	9601      	str	r6, [sp, #4]
    7b5c:	e7ab      	b.n	7ab6 <MiApp_NoiseDetection.part.0+0x36>
    7b5e:	9601      	str	r6, [sp, #4]
    7b60:	e7a9      	b.n	7ab6 <MiApp_NoiseDetection.part.0+0x36>
    7b62:	46c0      	nop			; (mov r8, r8)
    7b64:	00002b9d 	.word	0x00002b9d
    7b68:	00003695 	.word	0x00003695
    7b6c:	0000527d 	.word	0x0000527d
    7b70:	200030a0 	.word	0x200030a0
    7b74:	000077d9 	.word	0x000077d9
    7b78:	00002b99 	.word	0x00002b99
    7b7c:	00008f89 	.word	0x00008f89
    7b80:	00003675 	.word	0x00003675
    7b84:	200003df 	.word	0x200003df
    7b88:	00002b81 	.word	0x00002b81

00007b8c <MiApp_StartConnection>:
    7b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b8e:	4647      	mov	r7, r8
    7b90:	46ce      	mov	lr, r9
    7b92:	b580      	push	{r7, lr}
    7b94:	000d      	movs	r5, r1
    7b96:	b083      	sub	sp, #12
    7b98:	0017      	movs	r7, r2
    7b9a:	001e      	movs	r6, r3
    7b9c:	2400      	movs	r4, #0
    7b9e:	290e      	cmp	r1, #14
    7ba0:	d807      	bhi.n	7bb2 <MiApp_StartConnection+0x26>
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d005      	beq.n	7bb2 <MiApp_StartConnection+0x26>
    7ba6:	4b2a      	ldr	r3, [pc, #168]	; (7c50 <MiApp_StartConnection+0xc4>)
    7ba8:	4698      	mov	r8, r3
    7baa:	781b      	ldrb	r3, [r3, #0]
    7bac:	4699      	mov	r9, r3
    7bae:	2b01      	cmp	r3, #1
    7bb0:	d005      	beq.n	7bbe <MiApp_StartConnection+0x32>
    7bb2:	0020      	movs	r0, r4
    7bb4:	b003      	add	sp, #12
    7bb6:	bc0c      	pop	{r2, r3}
    7bb8:	4690      	mov	r8, r2
    7bba:	4699      	mov	r9, r3
    7bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bbe:	4642      	mov	r2, r8
    7bc0:	3301      	adds	r3, #1
    7bc2:	7013      	strb	r3, [r2, #0]
    7bc4:	2801      	cmp	r0, #1
    7bc6:	d007      	beq.n	7bd8 <MiApp_StartConnection+0x4c>
    7bc8:	2800      	cmp	r0, #0
    7bca:	d022      	beq.n	7c12 <MiApp_StartConnection+0x86>
    7bcc:	2001      	movs	r0, #1
    7bce:	47b0      	blx	r6
    7bd0:	4643      	mov	r3, r8
    7bd2:	464a      	mov	r2, r9
    7bd4:	701a      	strb	r2, [r3, #0]
    7bd6:	e7ec      	b.n	7bb2 <MiApp_StartConnection+0x26>
    7bd8:	491e      	ldr	r1, [pc, #120]	; (7c54 <MiApp_StartConnection+0xc8>)
    7bda:	4b1f      	ldr	r3, [pc, #124]	; (7c58 <MiApp_StartConnection+0xcc>)
    7bdc:	481f      	ldr	r0, [pc, #124]	; (7c5c <MiApp_StartConnection+0xd0>)
    7bde:	800b      	strh	r3, [r1, #0]
    7be0:	4b1f      	ldr	r3, [pc, #124]	; (7c60 <MiApp_StartConnection+0xd4>)
    7be2:	8004      	strh	r4, [r0, #0]
    7be4:	4798      	blx	r3
    7be6:	2200      	movs	r2, #0
    7be8:	4b1e      	ldr	r3, [pc, #120]	; (7c64 <MiApp_StartConnection+0xd8>)
    7bea:	0029      	movs	r1, r5
    7bec:	701a      	strb	r2, [r3, #0]
    7bee:	466b      	mov	r3, sp
    7bf0:	0038      	movs	r0, r7
    7bf2:	1dda      	adds	r2, r3, #7
    7bf4:	4b1c      	ldr	r3, [pc, #112]	; (7c68 <MiApp_StartConnection+0xdc>)
    7bf6:	4798      	blx	r3
    7bf8:	466b      	mov	r3, sp
    7bfa:	1d99      	adds	r1, r3, #6
    7bfc:	7008      	strb	r0, [r1, #0]
    7bfe:	4b1b      	ldr	r3, [pc, #108]	; (7c6c <MiApp_StartConnection+0xe0>)
    7c00:	2000      	movs	r0, #0
    7c02:	4798      	blx	r3
    7c04:	2000      	movs	r0, #0
    7c06:	47b0      	blx	r6
    7c08:	2306      	movs	r3, #6
    7c0a:	4642      	mov	r2, r8
    7c0c:	2401      	movs	r4, #1
    7c0e:	7013      	strb	r3, [r2, #0]
    7c10:	e7cf      	b.n	7bb2 <MiApp_StartConnection+0x26>
    7c12:	466b      	mov	r3, sp
    7c14:	4c0f      	ldr	r4, [pc, #60]	; (7c54 <MiApp_StartConnection+0xc8>)
    7c16:	71d8      	strb	r0, [r3, #7]
    7c18:	4b0f      	ldr	r3, [pc, #60]	; (7c58 <MiApp_StartConnection+0xcc>)
    7c1a:	2101      	movs	r1, #1
    7c1c:	8023      	strh	r3, [r4, #0]
    7c1e:	464b      	mov	r3, r9
    7c20:	2201      	movs	r2, #1
    7c22:	423b      	tst	r3, r7
    7c24:	d00c      	beq.n	7c40 <MiApp_StartConnection+0xb4>
    7c26:	466b      	mov	r3, sp
    7c28:	2000      	movs	r0, #0
    7c2a:	1dd9      	adds	r1, r3, #7
    7c2c:	4b0f      	ldr	r3, [pc, #60]	; (7c6c <MiApp_StartConnection+0xe0>)
    7c2e:	4798      	blx	r3
    7c30:	2300      	movs	r3, #0
    7c32:	480a      	ldr	r0, [pc, #40]	; (7c5c <MiApp_StartConnection+0xd0>)
    7c34:	0021      	movs	r1, r4
    7c36:	8003      	strh	r3, [r0, #0]
    7c38:	4b09      	ldr	r3, [pc, #36]	; (7c60 <MiApp_StartConnection+0xd4>)
    7c3a:	4798      	blx	r3
    7c3c:	e7e2      	b.n	7c04 <MiApp_StartConnection+0x78>
    7c3e:	0019      	movs	r1, r3
    7c40:	1c4b      	adds	r3, r1, #1
    7c42:	0052      	lsls	r2, r2, #1
    7c44:	b2db      	uxtb	r3, r3
    7c46:	423a      	tst	r2, r7
    7c48:	d0f9      	beq.n	7c3e <MiApp_StartConnection+0xb2>
    7c4a:	466b      	mov	r3, sp
    7c4c:	71d9      	strb	r1, [r3, #7]
    7c4e:	e7ea      	b.n	7c26 <MiApp_StartConnection+0x9a>
    7c50:	200003c0 	.word	0x200003c0
    7c54:	20003070 	.word	0x20003070
    7c58:	00001234 	.word	0x00001234
    7c5c:	20003084 	.word	0x20003084
    7c60:	00002495 	.word	0x00002495
    7c64:	200003df 	.word	0x200003df
    7c68:	00007a81 	.word	0x00007a81
    7c6c:	0000527d 	.word	0x0000527d

00007c70 <calculatePermitCapacity>:
    7c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c72:	46de      	mov	lr, fp
    7c74:	4657      	mov	r7, sl
    7c76:	4645      	mov	r5, r8
    7c78:	464e      	mov	r6, r9
    7c7a:	2320      	movs	r3, #32
    7c7c:	b5e0      	push	{r5, r6, r7, lr}
    7c7e:	4d57      	ldr	r5, [pc, #348]	; (7ddc <calculatePermitCapacity+0x16c>)
    7c80:	468a      	mov	sl, r1
    7c82:	6829      	ldr	r1, [r5, #0]
    7c84:	4683      	mov	fp, r0
    7c86:	5cca      	ldrb	r2, [r1, r3]
    7c88:	2a01      	cmp	r2, #1
    7c8a:	d800      	bhi.n	7c8e <calculatePermitCapacity+0x1e>
    7c8c:	e09d      	b.n	7dca <calculatePermitCapacity+0x15a>
    7c8e:	6808      	ldr	r0, [r1, #0]
    7c90:	3a02      	subs	r2, #2
    7c92:	b2d2      	uxtb	r2, r2
    7c94:	0003      	movs	r3, r0
    7c96:	0054      	lsls	r4, r2, #1
    7c98:	18a2      	adds	r2, r4, r2
    7c9a:	2400      	movs	r4, #0
    7c9c:	0092      	lsls	r2, r2, #2
    7c9e:	3218      	adds	r2, #24
    7ca0:	330c      	adds	r3, #12
    7ca2:	1880      	adds	r0, r0, r2
    7ca4:	781a      	ldrb	r2, [r3, #0]
    7ca6:	2aff      	cmp	r2, #255	; 0xff
    7ca8:	d115      	bne.n	7cd6 <calculatePermitCapacity+0x66>
    7caa:	785a      	ldrb	r2, [r3, #1]
    7cac:	2aff      	cmp	r2, #255	; 0xff
    7cae:	d112      	bne.n	7cd6 <calculatePermitCapacity+0x66>
    7cb0:	789a      	ldrb	r2, [r3, #2]
    7cb2:	2aff      	cmp	r2, #255	; 0xff
    7cb4:	d10f      	bne.n	7cd6 <calculatePermitCapacity+0x66>
    7cb6:	78da      	ldrb	r2, [r3, #3]
    7cb8:	2aff      	cmp	r2, #255	; 0xff
    7cba:	d10c      	bne.n	7cd6 <calculatePermitCapacity+0x66>
    7cbc:	791a      	ldrb	r2, [r3, #4]
    7cbe:	2aff      	cmp	r2, #255	; 0xff
    7cc0:	d109      	bne.n	7cd6 <calculatePermitCapacity+0x66>
    7cc2:	795a      	ldrb	r2, [r3, #5]
    7cc4:	2aff      	cmp	r2, #255	; 0xff
    7cc6:	d106      	bne.n	7cd6 <calculatePermitCapacity+0x66>
    7cc8:	799a      	ldrb	r2, [r3, #6]
    7cca:	2aff      	cmp	r2, #255	; 0xff
    7ccc:	d103      	bne.n	7cd6 <calculatePermitCapacity+0x66>
    7cce:	79da      	ldrb	r2, [r3, #7]
    7cd0:	2aff      	cmp	r2, #255	; 0xff
    7cd2:	d100      	bne.n	7cd6 <calculatePermitCapacity+0x66>
    7cd4:	2401      	movs	r4, #1
    7cd6:	330c      	adds	r3, #12
    7cd8:	4298      	cmp	r0, r3
    7cda:	d1e3      	bne.n	7ca4 <calculatePermitCapacity+0x34>
    7cdc:	2323      	movs	r3, #35	; 0x23
    7cde:	5cce      	ldrb	r6, [r1, r3]
    7ce0:	2e00      	cmp	r6, #0
    7ce2:	d100      	bne.n	7ce6 <calculatePermitCapacity+0x76>
    7ce4:	e073      	b.n	7dce <calculatePermitCapacity+0x15e>
    7ce6:	1e72      	subs	r2, r6, #1
    7ce8:	b2d2      	uxtb	r2, r2
    7cea:	688b      	ldr	r3, [r1, #8]
    7cec:	3201      	adds	r2, #1
    7cee:	0112      	lsls	r2, r2, #4
    7cf0:	189f      	adds	r7, r3, r2
    7cf2:	2200      	movs	r2, #0
    7cf4:	7818      	ldrb	r0, [r3, #0]
    7cf6:	28ff      	cmp	r0, #255	; 0xff
    7cf8:	d164      	bne.n	7dc4 <calculatePermitCapacity+0x154>
    7cfa:	7858      	ldrb	r0, [r3, #1]
    7cfc:	28ff      	cmp	r0, #255	; 0xff
    7cfe:	d161      	bne.n	7dc4 <calculatePermitCapacity+0x154>
    7d00:	7898      	ldrb	r0, [r3, #2]
    7d02:	28ff      	cmp	r0, #255	; 0xff
    7d04:	d15e      	bne.n	7dc4 <calculatePermitCapacity+0x154>
    7d06:	78d8      	ldrb	r0, [r3, #3]
    7d08:	28ff      	cmp	r0, #255	; 0xff
    7d0a:	d15b      	bne.n	7dc4 <calculatePermitCapacity+0x154>
    7d0c:	7918      	ldrb	r0, [r3, #4]
    7d0e:	28ff      	cmp	r0, #255	; 0xff
    7d10:	d158      	bne.n	7dc4 <calculatePermitCapacity+0x154>
    7d12:	7958      	ldrb	r0, [r3, #5]
    7d14:	28ff      	cmp	r0, #255	; 0xff
    7d16:	d155      	bne.n	7dc4 <calculatePermitCapacity+0x154>
    7d18:	7998      	ldrb	r0, [r3, #6]
    7d1a:	28ff      	cmp	r0, #255	; 0xff
    7d1c:	d152      	bne.n	7dc4 <calculatePermitCapacity+0x154>
    7d1e:	79d8      	ldrb	r0, [r3, #7]
    7d20:	28ff      	cmp	r0, #255	; 0xff
    7d22:	d14f      	bne.n	7dc4 <calculatePermitCapacity+0x154>
    7d24:	2401      	movs	r4, #1
    7d26:	3310      	adds	r3, #16
    7d28:	42bb      	cmp	r3, r7
    7d2a:	d1e3      	bne.n	7cf4 <calculatePermitCapacity+0x84>
    7d2c:	2364      	movs	r3, #100	; 0x64
    7d2e:	1ab2      	subs	r2, r6, r2
    7d30:	4353      	muls	r3, r2
    7d32:	0030      	movs	r0, r6
    7d34:	469c      	mov	ip, r3
    7d36:	2324      	movs	r3, #36	; 0x24
    7d38:	5cca      	ldrb	r2, [r1, r3]
    7d3a:	2a01      	cmp	r2, #1
    7d3c:	d94b      	bls.n	7dd6 <calculatePermitCapacity+0x166>
    7d3e:	3a02      	subs	r2, #2
    7d40:	b2d2      	uxtb	r2, r2
    7d42:	0096      	lsls	r6, r2, #2
    7d44:	68c9      	ldr	r1, [r1, #12]
    7d46:	18b2      	adds	r2, r6, r2
    7d48:	0092      	lsls	r2, r2, #2
    7d4a:	3228      	adds	r2, #40	; 0x28
    7d4c:	000b      	movs	r3, r1
    7d4e:	188e      	adds	r6, r1, r2
    7d50:	2200      	movs	r2, #0
    7d52:	3314      	adds	r3, #20
    7d54:	7819      	ldrb	r1, [r3, #0]
    7d56:	29ff      	cmp	r1, #255	; 0xff
    7d58:	d131      	bne.n	7dbe <calculatePermitCapacity+0x14e>
    7d5a:	7859      	ldrb	r1, [r3, #1]
    7d5c:	29ff      	cmp	r1, #255	; 0xff
    7d5e:	d12e      	bne.n	7dbe <calculatePermitCapacity+0x14e>
    7d60:	7899      	ldrb	r1, [r3, #2]
    7d62:	29ff      	cmp	r1, #255	; 0xff
    7d64:	d12b      	bne.n	7dbe <calculatePermitCapacity+0x14e>
    7d66:	78d9      	ldrb	r1, [r3, #3]
    7d68:	29ff      	cmp	r1, #255	; 0xff
    7d6a:	d128      	bne.n	7dbe <calculatePermitCapacity+0x14e>
    7d6c:	7919      	ldrb	r1, [r3, #4]
    7d6e:	29ff      	cmp	r1, #255	; 0xff
    7d70:	d125      	bne.n	7dbe <calculatePermitCapacity+0x14e>
    7d72:	7959      	ldrb	r1, [r3, #5]
    7d74:	29ff      	cmp	r1, #255	; 0xff
    7d76:	d122      	bne.n	7dbe <calculatePermitCapacity+0x14e>
    7d78:	7999      	ldrb	r1, [r3, #6]
    7d7a:	29ff      	cmp	r1, #255	; 0xff
    7d7c:	d11f      	bne.n	7dbe <calculatePermitCapacity+0x14e>
    7d7e:	79d9      	ldrb	r1, [r3, #7]
    7d80:	29ff      	cmp	r1, #255	; 0xff
    7d82:	d11c      	bne.n	7dbe <calculatePermitCapacity+0x14e>
    7d84:	2401      	movs	r4, #1
    7d86:	3314      	adds	r3, #20
    7d88:	429e      	cmp	r6, r3
    7d8a:	d1e3      	bne.n	7d54 <calculatePermitCapacity+0xe4>
    7d8c:	4691      	mov	r9, r2
    7d8e:	4b14      	ldr	r3, [pc, #80]	; (7de0 <calculatePermitCapacity+0x170>)
    7d90:	0001      	movs	r1, r0
    7d92:	4660      	mov	r0, ip
    7d94:	4698      	mov	r8, r3
    7d96:	4798      	blx	r3
    7d98:	465b      	mov	r3, fp
    7d9a:	7018      	strb	r0, [r3, #0]
    7d9c:	2324      	movs	r3, #36	; 0x24
    7d9e:	682a      	ldr	r2, [r5, #0]
    7da0:	2064      	movs	r0, #100	; 0x64
    7da2:	5cd1      	ldrb	r1, [r2, r3]
    7da4:	464b      	mov	r3, r9
    7da6:	1aca      	subs	r2, r1, r3
    7da8:	4350      	muls	r0, r2
    7daa:	47c0      	blx	r8
    7dac:	4653      	mov	r3, sl
    7dae:	7018      	strb	r0, [r3, #0]
    7db0:	0020      	movs	r0, r4
    7db2:	bc3c      	pop	{r2, r3, r4, r5}
    7db4:	4690      	mov	r8, r2
    7db6:	4699      	mov	r9, r3
    7db8:	46a2      	mov	sl, r4
    7dba:	46ab      	mov	fp, r5
    7dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7dbe:	3201      	adds	r2, #1
    7dc0:	b2d2      	uxtb	r2, r2
    7dc2:	e7e0      	b.n	7d86 <calculatePermitCapacity+0x116>
    7dc4:	3201      	adds	r2, #1
    7dc6:	b2d2      	uxtb	r2, r2
    7dc8:	e7ad      	b.n	7d26 <calculatePermitCapacity+0xb6>
    7dca:	2400      	movs	r4, #0
    7dcc:	e786      	b.n	7cdc <calculatePermitCapacity+0x6c>
    7dce:	2300      	movs	r3, #0
    7dd0:	2000      	movs	r0, #0
    7dd2:	469c      	mov	ip, r3
    7dd4:	e7af      	b.n	7d36 <calculatePermitCapacity+0xc6>
    7dd6:	2300      	movs	r3, #0
    7dd8:	4699      	mov	r9, r3
    7dda:	e7d8      	b.n	7d8e <calculatePermitCapacity+0x11e>
    7ddc:	2000303c 	.word	0x2000303c
    7de0:	0000909d 	.word	0x0000909d

00007de4 <handleJoinMessage>:
    7de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7de6:	4645      	mov	r5, r8
    7de8:	4657      	mov	r7, sl
    7dea:	464e      	mov	r6, r9
    7dec:	46de      	mov	lr, fp
    7dee:	b5e0      	push	{r5, r6, r7, lr}
    7df0:	001d      	movs	r5, r3
    7df2:	b091      	sub	sp, #68	; 0x44
    7df4:	ab1a      	add	r3, sp, #104	; 0x68
    7df6:	781b      	ldrb	r3, [r3, #0]
    7df8:	0006      	movs	r6, r0
    7dfa:	4698      	mov	r8, r3
    7dfc:	782b      	ldrb	r3, [r5, #0]
    7dfe:	000f      	movs	r7, r1
    7e00:	0014      	movs	r4, r2
    7e02:	2b03      	cmp	r3, #3
    7e04:	d100      	bne.n	7e08 <handleJoinMessage+0x24>
    7e06:	e0b6      	b.n	7f76 <handleJoinMessage+0x192>
    7e08:	d957      	bls.n	7eba <handleJoinMessage+0xd6>
    7e0a:	2b05      	cmp	r3, #5
    7e0c:	d00d      	beq.n	7e2a <handleJoinMessage+0x46>
    7e0e:	2b07      	cmp	r3, #7
    7e10:	d104      	bne.n	7e1c <handleJoinMessage+0x38>
    7e12:	4bd4      	ldr	r3, [pc, #848]	; (8164 <handleJoinMessage+0x380>)
    7e14:	781b      	ldrb	r3, [r3, #0]
    7e16:	2b06      	cmp	r3, #6
    7e18:	d100      	bne.n	7e1c <handleJoinMessage+0x38>
    7e1a:	e10d      	b.n	8038 <handleJoinMessage+0x254>
    7e1c:	b011      	add	sp, #68	; 0x44
    7e1e:	bc3c      	pop	{r2, r3, r4, r5}
    7e20:	4690      	mov	r8, r2
    7e22:	4699      	mov	r9, r3
    7e24:	46a2      	mov	sl, r4
    7e26:	46ab      	mov	fp, r5
    7e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e2a:	2400      	movs	r4, #0
    7e2c:	ab02      	add	r3, sp, #8
    7e2e:	82dc      	strh	r4, [r3, #22]
    7e30:	4bcc      	ldr	r3, [pc, #816]	; (8164 <handleJoinMessage+0x380>)
    7e32:	781f      	ldrb	r7, [r3, #0]
    7e34:	2f06      	cmp	r7, #6
    7e36:	d1f1      	bne.n	7e1c <handleJoinMessage+0x38>
    7e38:	1c68      	adds	r0, r5, #1
    7e3a:	2300      	movs	r3, #0
    7e3c:	4dca      	ldr	r5, [pc, #808]	; (8168 <handleJoinMessage+0x384>)
    7e3e:	2205      	movs	r2, #5
    7e40:	2102      	movs	r1, #2
    7e42:	47a8      	blx	r5
    7e44:	4bc9      	ldr	r3, [pc, #804]	; (816c <handleJoinMessage+0x388>)
    7e46:	0005      	movs	r5, r0
    7e48:	4298      	cmp	r0, r3
    7e4a:	d0e7      	beq.n	7e1c <handleJoinMessage+0x38>
    7e4c:	2078      	movs	r0, #120	; 0x78
    7e4e:	4bc8      	ldr	r3, [pc, #800]	; (8170 <handleJoinMessage+0x38c>)
    7e50:	4798      	blx	r3
    7e52:	4680      	mov	r8, r0
    7e54:	2800      	cmp	r0, #0
    7e56:	d0e1      	beq.n	7e1c <handleJoinMessage+0x38>
    7e58:	4bc6      	ldr	r3, [pc, #792]	; (8174 <handleJoinMessage+0x390>)
    7e5a:	88f2      	ldrh	r2, [r6, #6]
    7e5c:	8819      	ldrh	r1, [r3, #0]
    7e5e:	ab08      	add	r3, sp, #32
    7e60:	4699      	mov	r9, r3
    7e62:	b289      	uxth	r1, r1
    7e64:	20ff      	movs	r0, #255	; 0xff
    7e66:	4ec4      	ldr	r6, [pc, #784]	; (8178 <handleJoinMessage+0x394>)
    7e68:	47b0      	blx	r6
    7e6a:	4641      	mov	r1, r8
    7e6c:	4648      	mov	r0, r9
    7e6e:	4bc3      	ldr	r3, [pc, #780]	; (817c <handleJoinMessage+0x398>)
    7e70:	4798      	blx	r3
    7e72:	4643      	mov	r3, r8
    7e74:	4642      	mov	r2, r8
    7e76:	541f      	strb	r7, [r3, r0]
    7e78:	1c43      	adds	r3, r0, #1
    7e7a:	b2db      	uxtb	r3, r3
    7e7c:	54d5      	strb	r5, [r2, r3]
    7e7e:	1c83      	adds	r3, r0, #2
    7e80:	b2db      	uxtb	r3, r3
    7e82:	0a2d      	lsrs	r5, r5, #8
    7e84:	54d5      	strb	r5, [r2, r3]
    7e86:	464b      	mov	r3, r9
    7e88:	0006      	movs	r6, r0
    7e8a:	8898      	ldrh	r0, [r3, #4]
    7e8c:	23ff      	movs	r3, #255	; 0xff
    7e8e:	4398      	bics	r0, r3
    7e90:	4bbb      	ldr	r3, [pc, #748]	; (8180 <handleJoinMessage+0x39c>)
    7e92:	4798      	blx	r3
    7e94:	ab02      	add	r3, sp, #8
    7e96:	82d8      	strh	r0, [r3, #22]
    7e98:	4bba      	ldr	r3, [pc, #744]	; (8184 <handleJoinMessage+0x3a0>)
    7e9a:	aa02      	add	r2, sp, #8
    7e9c:	4694      	mov	ip, r2
    7e9e:	9303      	str	r3, [sp, #12]
    7ea0:	2316      	movs	r3, #22
    7ea2:	4463      	add	r3, ip
    7ea4:	9301      	str	r3, [sp, #4]
    7ea6:	2302      	movs	r3, #2
    7ea8:	9402      	str	r4, [sp, #8]
    7eaa:	9300      	str	r3, [sp, #0]
    7eac:	2203      	movs	r2, #3
    7eae:	4643      	mov	r3, r8
    7eb0:	0031      	movs	r1, r6
    7eb2:	4648      	mov	r0, r9
    7eb4:	4cb4      	ldr	r4, [pc, #720]	; (8188 <handleJoinMessage+0x3a4>)
    7eb6:	47a0      	blx	r4
    7eb8:	e7b0      	b.n	7e1c <handleJoinMessage+0x38>
    7eba:	2b01      	cmp	r3, #1
    7ebc:	d1ae      	bne.n	7e1c <handleJoinMessage+0x38>
    7ebe:	4ba9      	ldr	r3, [pc, #676]	; (8164 <handleJoinMessage+0x380>)
    7ec0:	781b      	ldrb	r3, [r3, #0]
    7ec2:	2b06      	cmp	r3, #6
    7ec4:	d1aa      	bne.n	7e1c <handleJoinMessage+0x38>
    7ec6:	4bb1      	ldr	r3, [pc, #708]	; (818c <handleJoinMessage+0x3a8>)
    7ec8:	2108      	movs	r1, #8
    7eca:	4699      	mov	r9, r3
    7ecc:	0018      	movs	r0, r3
    7ece:	4bb0      	ldr	r3, [pc, #704]	; (8190 <handleJoinMessage+0x3ac>)
    7ed0:	4798      	blx	r3
    7ed2:	2800      	cmp	r0, #0
    7ed4:	d0a2      	beq.n	7e1c <handleJoinMessage+0x38>
    7ed6:	2078      	movs	r0, #120	; 0x78
    7ed8:	4ba5      	ldr	r3, [pc, #660]	; (8170 <handleJoinMessage+0x38c>)
    7eda:	4798      	blx	r3
    7edc:	1e05      	subs	r5, r0, #0
    7ede:	d09d      	beq.n	7e1c <handleJoinMessage+0x38>
    7ee0:	4ba4      	ldr	r3, [pc, #656]	; (8174 <handleJoinMessage+0x390>)
    7ee2:	aa08      	add	r2, sp, #32
    7ee4:	8819      	ldrh	r1, [r3, #0]
    7ee6:	9205      	str	r2, [sp, #20]
    7ee8:	0013      	movs	r3, r2
    7eea:	b289      	uxth	r1, r1
    7eec:	2200      	movs	r2, #0
    7eee:	2001      	movs	r0, #1
    7ef0:	4ea1      	ldr	r6, [pc, #644]	; (8178 <handleJoinMessage+0x394>)
    7ef2:	47b0      	blx	r6
    7ef4:	2220      	movs	r2, #32
    7ef6:	9e05      	ldr	r6, [sp, #20]
    7ef8:	0029      	movs	r1, r5
    7efa:	7873      	ldrb	r3, [r6, #1]
    7efc:	0030      	movs	r0, r6
    7efe:	4313      	orrs	r3, r2
    7f00:	7073      	strb	r3, [r6, #1]
    7f02:	4b9e      	ldr	r3, [pc, #632]	; (817c <handleJoinMessage+0x398>)
    7f04:	4798      	blx	r3
    7f06:	2302      	movs	r3, #2
    7f08:	542b      	strb	r3, [r5, r0]
    7f0a:	4ba2      	ldr	r3, [pc, #648]	; (8194 <handleJoinMessage+0x3b0>)
    7f0c:	4680      	mov	r8, r0
    7f0e:	781a      	ldrb	r2, [r3, #0]
    7f10:	0003      	movs	r3, r0
    7f12:	3301      	adds	r3, #1
    7f14:	b2db      	uxtb	r3, r3
    7f16:	54ea      	strb	r2, [r5, r3]
    7f18:	4b9f      	ldr	r3, [pc, #636]	; (8198 <handleJoinMessage+0x3b4>)
    7f1a:	469a      	mov	sl, r3
    7f1c:	4b9f      	ldr	r3, [pc, #636]	; (819c <handleJoinMessage+0x3b8>)
    7f1e:	4651      	mov	r1, sl
    7f20:	469b      	mov	fp, r3
    7f22:	0018      	movs	r0, r3
    7f24:	4b9e      	ldr	r3, [pc, #632]	; (81a0 <handleJoinMessage+0x3bc>)
    7f26:	4798      	blx	r3
    7f28:	4b9e      	ldr	r3, [pc, #632]	; (81a4 <handleJoinMessage+0x3c0>)
    7f2a:	4649      	mov	r1, r9
    7f2c:	7018      	strb	r0, [r3, #0]
    7f2e:	4643      	mov	r3, r8
    7f30:	3302      	adds	r3, #2
    7f32:	b2db      	uxtb	r3, r3
    7f34:	54e8      	strb	r0, [r5, r3]
    7f36:	465b      	mov	r3, fp
    7f38:	781a      	ldrb	r2, [r3, #0]
    7f3a:	4643      	mov	r3, r8
    7f3c:	3303      	adds	r3, #3
    7f3e:	b2db      	uxtb	r3, r3
    7f40:	54ea      	strb	r2, [r5, r3]
    7f42:	4653      	mov	r3, sl
    7f44:	781a      	ldrb	r2, [r3, #0]
    7f46:	4643      	mov	r3, r8
    7f48:	3304      	adds	r3, #4
    7f4a:	b2db      	uxtb	r3, r3
    7f4c:	54ea      	strb	r2, [r5, r3]
    7f4e:	4643      	mov	r3, r8
    7f50:	1d58      	adds	r0, r3, #5
    7f52:	b2c0      	uxtb	r0, r0
    7f54:	1828      	adds	r0, r5, r0
    7f56:	2208      	movs	r2, #8
    7f58:	4b93      	ldr	r3, [pc, #588]	; (81a8 <handleJoinMessage+0x3c4>)
    7f5a:	4798      	blx	r3
    7f5c:	4b89      	ldr	r3, [pc, #548]	; (8184 <handleJoinMessage+0x3a0>)
    7f5e:	9401      	str	r4, [sp, #4]
    7f60:	9303      	str	r3, [sp, #12]
    7f62:	2300      	movs	r3, #0
    7f64:	9700      	str	r7, [sp, #0]
    7f66:	9302      	str	r3, [sp, #8]
    7f68:	220d      	movs	r2, #13
    7f6a:	002b      	movs	r3, r5
    7f6c:	4641      	mov	r1, r8
    7f6e:	0030      	movs	r0, r6
    7f70:	4c85      	ldr	r4, [pc, #532]	; (8188 <handleJoinMessage+0x3a4>)
    7f72:	47a0      	blx	r4
    7f74:	e752      	b.n	7e1c <handleJoinMessage+0x38>
    7f76:	78ab      	ldrb	r3, [r5, #2]
    7f78:	786e      	ldrb	r6, [r5, #1]
    7f7a:	469a      	mov	sl, r3
    7f7c:	4b79      	ldr	r3, [pc, #484]	; (8164 <handleJoinMessage+0x380>)
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	2b06      	cmp	r3, #6
    7f82:	d000      	beq.n	7f86 <handleJoinMessage+0x1a2>
    7f84:	e74a      	b.n	7e1c <handleJoinMessage+0x38>
    7f86:	2078      	movs	r0, #120	; 0x78
    7f88:	4b79      	ldr	r3, [pc, #484]	; (8170 <handleJoinMessage+0x38c>)
    7f8a:	4798      	blx	r3
    7f8c:	4681      	mov	r9, r0
    7f8e:	2800      	cmp	r0, #0
    7f90:	d100      	bne.n	7f94 <handleJoinMessage+0x1b0>
    7f92:	e743      	b.n	7e1c <handleJoinMessage+0x38>
    7f94:	1ceb      	adds	r3, r5, #3
    7f96:	4652      	mov	r2, sl
    7f98:	1c31      	adds	r1, r6, #0
    7f9a:	4d73      	ldr	r5, [pc, #460]	; (8168 <handleJoinMessage+0x384>)
    7f9c:	0020      	movs	r0, r4
    7f9e:	47a8      	blx	r5
    7fa0:	4b74      	ldr	r3, [pc, #464]	; (8174 <handleJoinMessage+0x390>)
    7fa2:	ad08      	add	r5, sp, #32
    7fa4:	8819      	ldrh	r1, [r3, #0]
    7fa6:	2201      	movs	r2, #1
    7fa8:	b289      	uxth	r1, r1
    7faa:	002b      	movs	r3, r5
    7fac:	4683      	mov	fp, r0
    7fae:	4e72      	ldr	r6, [pc, #456]	; (8178 <handleJoinMessage+0x394>)
    7fb0:	2001      	movs	r0, #1
    7fb2:	47b0      	blx	r6
    7fb4:	2220      	movs	r2, #32
    7fb6:	786b      	ldrb	r3, [r5, #1]
    7fb8:	4649      	mov	r1, r9
    7fba:	4313      	orrs	r3, r2
    7fbc:	706b      	strb	r3, [r5, #1]
    7fbe:	0028      	movs	r0, r5
    7fc0:	4b6e      	ldr	r3, [pc, #440]	; (817c <handleJoinMessage+0x398>)
    7fc2:	4798      	blx	r3
    7fc4:	2204      	movs	r2, #4
    7fc6:	4649      	mov	r1, r9
    7fc8:	0003      	movs	r3, r0
    7fca:	540a      	strb	r2, [r1, r0]
    7fcc:	4a67      	ldr	r2, [pc, #412]	; (816c <handleJoinMessage+0x388>)
    7fce:	3301      	adds	r3, #1
    7fd0:	4682      	mov	sl, r0
    7fd2:	b2db      	uxtb	r3, r3
    7fd4:	4593      	cmp	fp, r2
    7fd6:	d100      	bne.n	7fda <handleJoinMessage+0x1f6>
    7fd8:	e11e      	b.n	8218 <handleJoinMessage+0x434>
    7fda:	1c86      	adds	r6, r0, #2
    7fdc:	b2f2      	uxtb	r2, r6
    7fde:	9205      	str	r2, [sp, #20]
    7fe0:	2200      	movs	r2, #0
    7fe2:	4658      	mov	r0, fp
    7fe4:	54ca      	strb	r2, [r1, r3]
    7fe6:	4e71      	ldr	r6, [pc, #452]	; (81ac <handleJoinMessage+0x3c8>)
    7fe8:	4643      	mov	r3, r8
    7fea:	3201      	adds	r2, #1
    7fec:	4659      	mov	r1, fp
    7fee:	47b0      	blx	r6
    7ff0:	464b      	mov	r3, r9
    7ff2:	465a      	mov	r2, fp
    7ff4:	9e05      	ldr	r6, [sp, #20]
    7ff6:	4649      	mov	r1, r9
    7ff8:	559a      	strb	r2, [r3, r6]
    7ffa:	0032      	movs	r2, r6
    7ffc:	465b      	mov	r3, fp
    7ffe:	3201      	adds	r2, #1
    8000:	b2d2      	uxtb	r2, r2
    8002:	0a1b      	lsrs	r3, r3, #8
    8004:	548b      	strb	r3, [r1, r2]
    8006:	4b6a      	ldr	r3, [pc, #424]	; (81b0 <handleJoinMessage+0x3cc>)
    8008:	1cb0      	adds	r0, r6, #2
    800a:	6819      	ldr	r1, [r3, #0]
    800c:	b2c0      	uxtb	r0, r0
    800e:	4448      	add	r0, r9
    8010:	3110      	adds	r1, #16
    8012:	2210      	movs	r2, #16
    8014:	4b64      	ldr	r3, [pc, #400]	; (81a8 <handleJoinMessage+0x3c4>)
    8016:	4798      	blx	r3
    8018:	4653      	mov	r3, sl
    801a:	1af2      	subs	r2, r6, r3
    801c:	4b59      	ldr	r3, [pc, #356]	; (8184 <handleJoinMessage+0x3a0>)
    801e:	3212      	adds	r2, #18
    8020:	9303      	str	r3, [sp, #12]
    8022:	2300      	movs	r3, #0
    8024:	9401      	str	r4, [sp, #4]
    8026:	9302      	str	r3, [sp, #8]
    8028:	b2d2      	uxtb	r2, r2
    802a:	9700      	str	r7, [sp, #0]
    802c:	464b      	mov	r3, r9
    802e:	4651      	mov	r1, sl
    8030:	0028      	movs	r0, r5
    8032:	4c55      	ldr	r4, [pc, #340]	; (8188 <handleJoinMessage+0x3a4>)
    8034:	47a0      	blx	r4
    8036:	e6f1      	b.n	7e1c <handleJoinMessage+0x38>
    8038:	88c3      	ldrh	r3, [r0, #6]
    803a:	4698      	mov	r8, r3
    803c:	23ff      	movs	r3, #255	; 0xff
    803e:	4642      	mov	r2, r8
    8040:	4213      	tst	r3, r2
    8042:	d131      	bne.n	80a8 <handleJoinMessage+0x2c4>
    8044:	439a      	bics	r2, r3
    8046:	d02f      	beq.n	80a8 <handleJoinMessage+0x2c4>
    8048:	4b5a      	ldr	r3, [pc, #360]	; (81b4 <handleJoinMessage+0x3d0>)
    804a:	4699      	mov	r9, r3
    804c:	681b      	ldr	r3, [r3, #0]
    804e:	469b      	mov	fp, r3
    8050:	2320      	movs	r3, #32
    8052:	465a      	mov	r2, fp
    8054:	5cd2      	ldrb	r2, [r2, r3]
    8056:	2a01      	cmp	r2, #1
    8058:	d926      	bls.n	80a8 <handleJoinMessage+0x2c4>
    805a:	4b57      	ldr	r3, [pc, #348]	; (81b8 <handleJoinMessage+0x3d4>)
    805c:	4644      	mov	r4, r8
    805e:	2701      	movs	r7, #1
    8060:	46a8      	mov	r8, r5
    8062:	469a      	mov	sl, r3
    8064:	465d      	mov	r5, fp
    8066:	e003      	b.n	8070 <handleJoinMessage+0x28c>
    8068:	3701      	adds	r7, #1
    806a:	b2ff      	uxtb	r7, r7
    806c:	4297      	cmp	r7, r2
    806e:	d219      	bcs.n	80a4 <handleJoinMessage+0x2c0>
    8070:	0a23      	lsrs	r3, r4, #8
    8072:	429f      	cmp	r7, r3
    8074:	d1f8      	bne.n	8068 <handleJoinMessage+0x284>
    8076:	682b      	ldr	r3, [r5, #0]
    8078:	0078      	lsls	r0, r7, #1
    807a:	469b      	mov	fp, r3
    807c:	4643      	mov	r3, r8
    807e:	19c0      	adds	r0, r0, r7
    8080:	0080      	lsls	r0, r0, #2
    8082:	4483      	add	fp, r0
    8084:	1c59      	adds	r1, r3, #1
    8086:	2208      	movs	r2, #8
    8088:	4658      	mov	r0, fp
    808a:	47d0      	blx	sl
    808c:	2800      	cmp	r0, #0
    808e:	d000      	beq.n	8092 <handleJoinMessage+0x2ae>
    8090:	e094      	b.n	81bc <handleJoinMessage+0x3d8>
    8092:	465a      	mov	r2, fp
    8094:	8beb      	ldrh	r3, [r5, #30]
    8096:	6093      	str	r3, [r2, #8]
    8098:	464b      	mov	r3, r9
    809a:	681d      	ldr	r5, [r3, #0]
    809c:	2320      	movs	r3, #32
    809e:	88f4      	ldrh	r4, [r6, #6]
    80a0:	5cea      	ldrb	r2, [r5, r3]
    80a2:	e7e1      	b.n	8068 <handleJoinMessage+0x284>
    80a4:	4645      	mov	r5, r8
    80a6:	46a0      	mov	r8, r4
    80a8:	4643      	mov	r3, r8
    80aa:	061b      	lsls	r3, r3, #24
    80ac:	d400      	bmi.n	80b0 <handleJoinMessage+0x2cc>
    80ae:	e6b5      	b.n	7e1c <handleJoinMessage+0x38>
    80b0:	4b40      	ldr	r3, [pc, #256]	; (81b4 <handleJoinMessage+0x3d0>)
    80b2:	4699      	mov	r9, r3
    80b4:	681b      	ldr	r3, [r3, #0]
    80b6:	469b      	mov	fp, r3
    80b8:	2323      	movs	r3, #35	; 0x23
    80ba:	465a      	mov	r2, fp
    80bc:	5cd2      	ldrb	r2, [r2, r3]
    80be:	2a00      	cmp	r2, #0
    80c0:	d100      	bne.n	80c4 <handleJoinMessage+0x2e0>
    80c2:	e6ab      	b.n	7e1c <handleJoinMessage+0x38>
    80c4:	4b3c      	ldr	r3, [pc, #240]	; (81b8 <handleJoinMessage+0x3d4>)
    80c6:	4647      	mov	r7, r8
    80c8:	2400      	movs	r4, #0
    80ca:	46a8      	mov	r8, r5
    80cc:	469a      	mov	sl, r3
    80ce:	465d      	mov	r5, fp
    80d0:	e005      	b.n	80de <handleJoinMessage+0x2fa>
    80d2:	3401      	adds	r4, #1
    80d4:	b2e4      	uxtb	r4, r4
    80d6:	4294      	cmp	r4, r2
    80d8:	d300      	bcc.n	80dc <handleJoinMessage+0x2f8>
    80da:	e69f      	b.n	7e1c <handleJoinMessage+0x38>
    80dc:	88f7      	ldrh	r7, [r6, #6]
    80de:	2380      	movs	r3, #128	; 0x80
    80e0:	403b      	ands	r3, r7
    80e2:	429c      	cmp	r4, r3
    80e4:	d1f5      	bne.n	80d2 <handleJoinMessage+0x2ee>
    80e6:	68aa      	ldr	r2, [r5, #8]
    80e8:	0123      	lsls	r3, r4, #4
    80ea:	4693      	mov	fp, r2
    80ec:	449b      	add	fp, r3
    80ee:	4643      	mov	r3, r8
    80f0:	2208      	movs	r2, #8
    80f2:	1c59      	adds	r1, r3, #1
    80f4:	4658      	mov	r0, fp
    80f6:	47d0      	blx	sl
    80f8:	2800      	cmp	r0, #0
    80fa:	d107      	bne.n	810c <handleJoinMessage+0x328>
    80fc:	465a      	mov	r2, fp
    80fe:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    8100:	6093      	str	r3, [r2, #8]
    8102:	464b      	mov	r3, r9
    8104:	681d      	ldr	r5, [r3, #0]
    8106:	2323      	movs	r3, #35	; 0x23
    8108:	5cea      	ldrb	r2, [r5, r3]
    810a:	e7e2      	b.n	80d2 <handleJoinMessage+0x2ee>
    810c:	ab02      	add	r3, sp, #8
    810e:	469c      	mov	ip, r3
    8110:	2516      	movs	r5, #22
    8112:	2078      	movs	r0, #120	; 0x78
    8114:	4465      	add	r5, ip
    8116:	4b16      	ldr	r3, [pc, #88]	; (8170 <handleJoinMessage+0x38c>)
    8118:	802f      	strh	r7, [r5, #0]
    811a:	4798      	blx	r3
    811c:	1e07      	subs	r7, r0, #0
    811e:	d076      	beq.n	820e <handleJoinMessage+0x42a>
    8120:	4b14      	ldr	r3, [pc, #80]	; (8174 <handleJoinMessage+0x390>)
    8122:	882a      	ldrh	r2, [r5, #0]
    8124:	8819      	ldrh	r1, [r3, #0]
    8126:	9505      	str	r5, [sp, #20]
    8128:	b289      	uxth	r1, r1
    812a:	ab08      	add	r3, sp, #32
    812c:	20ff      	movs	r0, #255	; 0xff
    812e:	4d12      	ldr	r5, [pc, #72]	; (8178 <handleJoinMessage+0x394>)
    8130:	47a8      	blx	r5
    8132:	0039      	movs	r1, r7
    8134:	4b11      	ldr	r3, [pc, #68]	; (817c <handleJoinMessage+0x398>)
    8136:	a808      	add	r0, sp, #32
    8138:	4798      	blx	r3
    813a:	2308      	movs	r3, #8
    813c:	543b      	strb	r3, [r7, r0]
    813e:	4b11      	ldr	r3, [pc, #68]	; (8184 <handleJoinMessage+0x3a0>)
    8140:	0001      	movs	r1, r0
    8142:	9303      	str	r3, [sp, #12]
    8144:	2300      	movs	r3, #0
    8146:	9302      	str	r3, [sp, #8]
    8148:	9b05      	ldr	r3, [sp, #20]
    814a:	2201      	movs	r2, #1
    814c:	9301      	str	r3, [sp, #4]
    814e:	2302      	movs	r3, #2
    8150:	4d0d      	ldr	r5, [pc, #52]	; (8188 <handleJoinMessage+0x3a4>)
    8152:	9300      	str	r3, [sp, #0]
    8154:	a808      	add	r0, sp, #32
    8156:	003b      	movs	r3, r7
    8158:	47a8      	blx	r5
    815a:	464b      	mov	r3, r9
    815c:	681d      	ldr	r5, [r3, #0]
    815e:	2323      	movs	r3, #35	; 0x23
    8160:	5cea      	ldrb	r2, [r5, r3]
    8162:	e7b6      	b.n	80d2 <handleJoinMessage+0x2ee>
    8164:	200003c0 	.word	0x200003c0
    8168:	000077e5 	.word	0x000077e5
    816c:	0000ffff 	.word	0x0000ffff
    8170:	000033a1 	.word	0x000033a1
    8174:	20003084 	.word	0x20003084
    8178:	00006695 	.word	0x00006695
    817c:	000066c1 	.word	0x000066c1
    8180:	00008af1 	.word	0x00008af1
    8184:	00007a71 	.word	0x00007a71
    8188:	00006759 	.word	0x00006759
    818c:	200030b4 	.word	0x200030b4
    8190:	000055e9 	.word	0x000055e9
    8194:	20003086 	.word	0x20003086
    8198:	200003dc 	.word	0x200003dc
    819c:	200003de 	.word	0x200003de
    81a0:	00007c71 	.word	0x00007c71
    81a4:	200003dd 	.word	0x200003dd
    81a8:	0000932f 	.word	0x0000932f
    81ac:	00008685 	.word	0x00008685
    81b0:	20003040 	.word	0x20003040
    81b4:	2000303c 	.word	0x2000303c
    81b8:	00009311 	.word	0x00009311
    81bc:	ab02      	add	r3, sp, #8
    81be:	469c      	mov	ip, r3
    81c0:	2516      	movs	r5, #22
    81c2:	2078      	movs	r0, #120	; 0x78
    81c4:	4465      	add	r5, ip
    81c6:	4b18      	ldr	r3, [pc, #96]	; (8228 <handleJoinMessage+0x444>)
    81c8:	802c      	strh	r4, [r5, #0]
    81ca:	4798      	blx	r3
    81cc:	1e04      	subs	r4, r0, #0
    81ce:	d100      	bne.n	81d2 <handleJoinMessage+0x3ee>
    81d0:	e762      	b.n	8098 <handleJoinMessage+0x2b4>
    81d2:	4b16      	ldr	r3, [pc, #88]	; (822c <handleJoinMessage+0x448>)
    81d4:	882a      	ldrh	r2, [r5, #0]
    81d6:	8819      	ldrh	r1, [r3, #0]
    81d8:	9505      	str	r5, [sp, #20]
    81da:	ab08      	add	r3, sp, #32
    81dc:	b289      	uxth	r1, r1
    81de:	20ff      	movs	r0, #255	; 0xff
    81e0:	4d13      	ldr	r5, [pc, #76]	; (8230 <handleJoinMessage+0x44c>)
    81e2:	47a8      	blx	r5
    81e4:	0021      	movs	r1, r4
    81e6:	a808      	add	r0, sp, #32
    81e8:	4b12      	ldr	r3, [pc, #72]	; (8234 <handleJoinMessage+0x450>)
    81ea:	4798      	blx	r3
    81ec:	2308      	movs	r3, #8
    81ee:	5423      	strb	r3, [r4, r0]
    81f0:	4b11      	ldr	r3, [pc, #68]	; (8238 <handleJoinMessage+0x454>)
    81f2:	0001      	movs	r1, r0
    81f4:	9303      	str	r3, [sp, #12]
    81f6:	2300      	movs	r3, #0
    81f8:	9302      	str	r3, [sp, #8]
    81fa:	9b05      	ldr	r3, [sp, #20]
    81fc:	2201      	movs	r2, #1
    81fe:	9301      	str	r3, [sp, #4]
    8200:	2302      	movs	r3, #2
    8202:	a808      	add	r0, sp, #32
    8204:	9300      	str	r3, [sp, #0]
    8206:	0023      	movs	r3, r4
    8208:	4c0c      	ldr	r4, [pc, #48]	; (823c <handleJoinMessage+0x458>)
    820a:	47a0      	blx	r4
    820c:	e744      	b.n	8098 <handleJoinMessage+0x2b4>
    820e:	464b      	mov	r3, r9
    8210:	681d      	ldr	r5, [r3, #0]
    8212:	2323      	movs	r3, #35	; 0x23
    8214:	5cea      	ldrb	r2, [r5, r3]
    8216:	e75c      	b.n	80d2 <handleJoinMessage+0x2ee>
    8218:	1c86      	adds	r6, r0, #2
    821a:	b2f2      	uxtb	r2, r6
    821c:	9205      	str	r2, [sp, #20]
    821e:	4649      	mov	r1, r9
    8220:	2201      	movs	r2, #1
    8222:	54ca      	strb	r2, [r1, r3]
    8224:	e6e4      	b.n	7ff0 <handleJoinMessage+0x20c>
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	000033a1 	.word	0x000033a1
    822c:	20003084 	.word	0x20003084
    8230:	00006695 	.word	0x00006695
    8234:	000066c1 	.word	0x000066c1
    8238:	00007a71 	.word	0x00007a71
    823c:	00006759 	.word	0x00006759

00008240 <coordinatorTableInit>:
    8240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8242:	4647      	mov	r7, r8
    8244:	46ce      	mov	lr, r9
    8246:	b580      	push	{r7, lr}
    8248:	4b13      	ldr	r3, [pc, #76]	; (8298 <coordinatorTableInit+0x58>)
    824a:	681e      	ldr	r6, [r3, #0]
    824c:	4698      	mov	r8, r3
    824e:	2320      	movs	r3, #32
    8250:	5cf3      	ldrb	r3, [r6, r3]
    8252:	2b00      	cmp	r3, #0
    8254:	d01b      	beq.n	828e <coordinatorTableInit+0x4e>
    8256:	2320      	movs	r3, #32
    8258:	2400      	movs	r4, #0
    825a:	4699      	mov	r9, r3
    825c:	4f0f      	ldr	r7, [pc, #60]	; (829c <coordinatorTableInit+0x5c>)
    825e:	0065      	lsls	r5, r4, #1
    8260:	6830      	ldr	r0, [r6, #0]
    8262:	192d      	adds	r5, r5, r4
    8264:	00ad      	lsls	r5, r5, #2
    8266:	1940      	adds	r0, r0, r5
    8268:	2208      	movs	r2, #8
    826a:	21ff      	movs	r1, #255	; 0xff
    826c:	47b8      	blx	r7
    826e:	4643      	mov	r3, r8
    8270:	681e      	ldr	r6, [r3, #0]
    8272:	2204      	movs	r2, #4
    8274:	6833      	ldr	r3, [r6, #0]
    8276:	21ff      	movs	r1, #255	; 0xff
    8278:	469c      	mov	ip, r3
    827a:	4465      	add	r5, ip
    827c:	0028      	movs	r0, r5
    827e:	3008      	adds	r0, #8
    8280:	47b8      	blx	r7
    8282:	464b      	mov	r3, r9
    8284:	3401      	adds	r4, #1
    8286:	5cf3      	ldrb	r3, [r6, r3]
    8288:	b2e4      	uxtb	r4, r4
    828a:	42a3      	cmp	r3, r4
    828c:	d8e7      	bhi.n	825e <coordinatorTableInit+0x1e>
    828e:	bc0c      	pop	{r2, r3}
    8290:	4690      	mov	r8, r2
    8292:	4699      	mov	r9, r3
    8294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8296:	46c0      	nop			; (mov r8, r8)
    8298:	2000303c 	.word	0x2000303c
    829c:	00009341 	.word	0x00009341

000082a0 <deviceTableInit>:
    82a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82a2:	4647      	mov	r7, r8
    82a4:	46ce      	mov	lr, r9
    82a6:	b580      	push	{r7, lr}
    82a8:	4b27      	ldr	r3, [pc, #156]	; (8348 <deviceTableInit+0xa8>)
    82aa:	681c      	ldr	r4, [r3, #0]
    82ac:	4698      	mov	r8, r3
    82ae:	2323      	movs	r3, #35	; 0x23
    82b0:	5ce3      	ldrb	r3, [r4, r3]
    82b2:	2b00      	cmp	r3, #0
    82b4:	d01b      	beq.n	82ee <deviceTableInit+0x4e>
    82b6:	2323      	movs	r3, #35	; 0x23
    82b8:	2500      	movs	r5, #0
    82ba:	4699      	mov	r9, r3
    82bc:	4f23      	ldr	r7, [pc, #140]	; (834c <deviceTableInit+0xac>)
    82be:	68a0      	ldr	r0, [r4, #8]
    82c0:	012e      	lsls	r6, r5, #4
    82c2:	2208      	movs	r2, #8
    82c4:	21ff      	movs	r1, #255	; 0xff
    82c6:	1980      	adds	r0, r0, r6
    82c8:	47b8      	blx	r7
    82ca:	4643      	mov	r3, r8
    82cc:	681c      	ldr	r4, [r3, #0]
    82ce:	2204      	movs	r2, #4
    82d0:	68a3      	ldr	r3, [r4, #8]
    82d2:	21ff      	movs	r1, #255	; 0xff
    82d4:	1998      	adds	r0, r3, r6
    82d6:	3008      	adds	r0, #8
    82d8:	47b8      	blx	r7
    82da:	22ff      	movs	r2, #255	; 0xff
    82dc:	68a3      	ldr	r3, [r4, #8]
    82de:	3501      	adds	r5, #1
    82e0:	199b      	adds	r3, r3, r6
    82e2:	731a      	strb	r2, [r3, #12]
    82e4:	464b      	mov	r3, r9
    82e6:	5ce3      	ldrb	r3, [r4, r3]
    82e8:	b2ed      	uxtb	r5, r5
    82ea:	42ab      	cmp	r3, r5
    82ec:	d8e7      	bhi.n	82be <deviceTableInit+0x1e>
    82ee:	2324      	movs	r3, #36	; 0x24
    82f0:	5ce3      	ldrb	r3, [r4, r3]
    82f2:	2b00      	cmp	r3, #0
    82f4:	d024      	beq.n	8340 <deviceTableInit+0xa0>
    82f6:	2324      	movs	r3, #36	; 0x24
    82f8:	2600      	movs	r6, #0
    82fa:	4699      	mov	r9, r3
    82fc:	4f13      	ldr	r7, [pc, #76]	; (834c <deviceTableInit+0xac>)
    82fe:	00b5      	lsls	r5, r6, #2
    8300:	68e0      	ldr	r0, [r4, #12]
    8302:	19ad      	adds	r5, r5, r6
    8304:	00ad      	lsls	r5, r5, #2
    8306:	1940      	adds	r0, r0, r5
    8308:	2208      	movs	r2, #8
    830a:	21ff      	movs	r1, #255	; 0xff
    830c:	47b8      	blx	r7
    830e:	4643      	mov	r3, r8
    8310:	681c      	ldr	r4, [r3, #0]
    8312:	2204      	movs	r2, #4
    8314:	68e3      	ldr	r3, [r4, #12]
    8316:	21ff      	movs	r1, #255	; 0xff
    8318:	1958      	adds	r0, r3, r5
    831a:	3008      	adds	r0, #8
    831c:	47b8      	blx	r7
    831e:	68e3      	ldr	r3, [r4, #12]
    8320:	2204      	movs	r2, #4
    8322:	1958      	adds	r0, r3, r5
    8324:	300c      	adds	r0, #12
    8326:	21ff      	movs	r1, #255	; 0xff
    8328:	47b8      	blx	r7
    832a:	68e3      	ldr	r3, [r4, #12]
    832c:	3601      	adds	r6, #1
    832e:	469c      	mov	ip, r3
    8330:	23ff      	movs	r3, #255	; 0xff
    8332:	4465      	add	r5, ip
    8334:	742b      	strb	r3, [r5, #16]
    8336:	464b      	mov	r3, r9
    8338:	5ce3      	ldrb	r3, [r4, r3]
    833a:	b2f6      	uxtb	r6, r6
    833c:	42b3      	cmp	r3, r6
    833e:	d8de      	bhi.n	82fe <deviceTableInit+0x5e>
    8340:	bc0c      	pop	{r2, r3}
    8342:	4690      	mov	r8, r2
    8344:	4699      	mov	r9, r3
    8346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8348:	2000303c 	.word	0x2000303c
    834c:	00009341 	.word	0x00009341

00008350 <sendForceLeaveNetwork>:
    8350:	b570      	push	{r4, r5, r6, lr}
    8352:	2516      	movs	r5, #22
    8354:	b08e      	sub	sp, #56	; 0x38
    8356:	446d      	add	r5, sp
    8358:	8028      	strh	r0, [r5, #0]
    835a:	4b11      	ldr	r3, [pc, #68]	; (83a0 <sendForceLeaveNetwork+0x50>)
    835c:	2078      	movs	r0, #120	; 0x78
    835e:	4798      	blx	r3
    8360:	1e04      	subs	r4, r0, #0
    8362:	d01a      	beq.n	839a <sendForceLeaveNetwork+0x4a>
    8364:	4b0f      	ldr	r3, [pc, #60]	; (83a4 <sendForceLeaveNetwork+0x54>)
    8366:	882a      	ldrh	r2, [r5, #0]
    8368:	8819      	ldrh	r1, [r3, #0]
    836a:	20ff      	movs	r0, #255	; 0xff
    836c:	b289      	uxth	r1, r1
    836e:	ab06      	add	r3, sp, #24
    8370:	4e0d      	ldr	r6, [pc, #52]	; (83a8 <sendForceLeaveNetwork+0x58>)
    8372:	47b0      	blx	r6
    8374:	0021      	movs	r1, r4
    8376:	4b0d      	ldr	r3, [pc, #52]	; (83ac <sendForceLeaveNetwork+0x5c>)
    8378:	a806      	add	r0, sp, #24
    837a:	4798      	blx	r3
    837c:	2308      	movs	r3, #8
    837e:	5423      	strb	r3, [r4, r0]
    8380:	4b0b      	ldr	r3, [pc, #44]	; (83b0 <sendForceLeaveNetwork+0x60>)
    8382:	0001      	movs	r1, r0
    8384:	9303      	str	r3, [sp, #12]
    8386:	2300      	movs	r3, #0
    8388:	9302      	str	r3, [sp, #8]
    838a:	3302      	adds	r3, #2
    838c:	9300      	str	r3, [sp, #0]
    838e:	9501      	str	r5, [sp, #4]
    8390:	0023      	movs	r3, r4
    8392:	2201      	movs	r2, #1
    8394:	a806      	add	r0, sp, #24
    8396:	4c07      	ldr	r4, [pc, #28]	; (83b4 <sendForceLeaveNetwork+0x64>)
    8398:	47a0      	blx	r4
    839a:	b00e      	add	sp, #56	; 0x38
    839c:	bd70      	pop	{r4, r5, r6, pc}
    839e:	46c0      	nop			; (mov r8, r8)
    83a0:	000033a1 	.word	0x000033a1
    83a4:	20003084 	.word	0x20003084
    83a8:	00006695 	.word	0x00006695
    83ac:	000066c1 	.word	0x000066c1
    83b0:	00007a71 	.word	0x00007a71
    83b4:	00006759 	.word	0x00006759

000083b8 <isCorrectIeeeAddr>:
    83b8:	7803      	ldrb	r3, [r0, #0]
    83ba:	2bff      	cmp	r3, #255	; 0xff
    83bc:	d117      	bne.n	83ee <isCorrectIeeeAddr+0x36>
    83be:	7843      	ldrb	r3, [r0, #1]
    83c0:	2bff      	cmp	r3, #255	; 0xff
    83c2:	d114      	bne.n	83ee <isCorrectIeeeAddr+0x36>
    83c4:	7883      	ldrb	r3, [r0, #2]
    83c6:	2bff      	cmp	r3, #255	; 0xff
    83c8:	d111      	bne.n	83ee <isCorrectIeeeAddr+0x36>
    83ca:	78c3      	ldrb	r3, [r0, #3]
    83cc:	2bff      	cmp	r3, #255	; 0xff
    83ce:	d10e      	bne.n	83ee <isCorrectIeeeAddr+0x36>
    83d0:	7903      	ldrb	r3, [r0, #4]
    83d2:	2bff      	cmp	r3, #255	; 0xff
    83d4:	d10b      	bne.n	83ee <isCorrectIeeeAddr+0x36>
    83d6:	7943      	ldrb	r3, [r0, #5]
    83d8:	2bff      	cmp	r3, #255	; 0xff
    83da:	d108      	bne.n	83ee <isCorrectIeeeAddr+0x36>
    83dc:	7983      	ldrb	r3, [r0, #6]
    83de:	2bff      	cmp	r3, #255	; 0xff
    83e0:	d105      	bne.n	83ee <isCorrectIeeeAddr+0x36>
    83e2:	79c0      	ldrb	r0, [r0, #7]
    83e4:	38ff      	subs	r0, #255	; 0xff
    83e6:	1e43      	subs	r3, r0, #1
    83e8:	4198      	sbcs	r0, r3
    83ea:	b2c0      	uxtb	r0, r0
    83ec:	4770      	bx	lr
    83ee:	2001      	movs	r0, #1
    83f0:	e7fc      	b.n	83ec <isCorrectIeeeAddr+0x34>
    83f2:	46c0      	nop			; (mov r8, r8)

000083f4 <keepAliveTimerHandler>:
    83f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    83f6:	46c6      	mov	lr, r8
    83f8:	2320      	movs	r3, #32
    83fa:	b500      	push	{lr}
    83fc:	4d57      	ldr	r5, [pc, #348]	; (855c <keepAliveTimerHandler+0x168>)
    83fe:	682a      	ldr	r2, [r5, #0]
    8400:	5cd7      	ldrb	r7, [r2, r3]
    8402:	2f00      	cmp	r7, #0
    8404:	d027      	beq.n	8456 <keepAliveTimerHandler+0x62>
    8406:	4b56      	ldr	r3, [pc, #344]	; (8560 <keepAliveTimerHandler+0x16c>)
    8408:	2400      	movs	r4, #0
    840a:	4698      	mov	r8, r3
    840c:	2620      	movs	r6, #32
    840e:	0060      	lsls	r0, r4, #1
    8410:	1900      	adds	r0, r0, r4
    8412:	6813      	ldr	r3, [r2, #0]
    8414:	0080      	lsls	r0, r0, #2
    8416:	181b      	adds	r3, r3, r0
    8418:	7819      	ldrb	r1, [r3, #0]
    841a:	29ff      	cmp	r1, #255	; 0xff
    841c:	d000      	beq.n	8420 <keepAliveTimerHandler+0x2c>
    841e:	e077      	b.n	8510 <keepAliveTimerHandler+0x11c>
    8420:	7859      	ldrb	r1, [r3, #1]
    8422:	29ff      	cmp	r1, #255	; 0xff
    8424:	d000      	beq.n	8428 <keepAliveTimerHandler+0x34>
    8426:	e073      	b.n	8510 <keepAliveTimerHandler+0x11c>
    8428:	7899      	ldrb	r1, [r3, #2]
    842a:	29ff      	cmp	r1, #255	; 0xff
    842c:	d000      	beq.n	8430 <keepAliveTimerHandler+0x3c>
    842e:	e06f      	b.n	8510 <keepAliveTimerHandler+0x11c>
    8430:	78d9      	ldrb	r1, [r3, #3]
    8432:	29ff      	cmp	r1, #255	; 0xff
    8434:	d16c      	bne.n	8510 <keepAliveTimerHandler+0x11c>
    8436:	7919      	ldrb	r1, [r3, #4]
    8438:	29ff      	cmp	r1, #255	; 0xff
    843a:	d169      	bne.n	8510 <keepAliveTimerHandler+0x11c>
    843c:	7959      	ldrb	r1, [r3, #5]
    843e:	29ff      	cmp	r1, #255	; 0xff
    8440:	d166      	bne.n	8510 <keepAliveTimerHandler+0x11c>
    8442:	7999      	ldrb	r1, [r3, #6]
    8444:	29ff      	cmp	r1, #255	; 0xff
    8446:	d163      	bne.n	8510 <keepAliveTimerHandler+0x11c>
    8448:	79d9      	ldrb	r1, [r3, #7]
    844a:	29ff      	cmp	r1, #255	; 0xff
    844c:	d160      	bne.n	8510 <keepAliveTimerHandler+0x11c>
    844e:	3401      	adds	r4, #1
    8450:	b2e4      	uxtb	r4, r4
    8452:	42bc      	cmp	r4, r7
    8454:	d3db      	bcc.n	840e <keepAliveTimerHandler+0x1a>
    8456:	2323      	movs	r3, #35	; 0x23
    8458:	5cd7      	ldrb	r7, [r2, r3]
    845a:	2f00      	cmp	r7, #0
    845c:	d022      	beq.n	84a4 <keepAliveTimerHandler+0xb0>
    845e:	4b40      	ldr	r3, [pc, #256]	; (8560 <keepAliveTimerHandler+0x16c>)
    8460:	2400      	movs	r4, #0
    8462:	4698      	mov	r8, r3
    8464:	2623      	movs	r6, #35	; 0x23
    8466:	6893      	ldr	r3, [r2, #8]
    8468:	0120      	lsls	r0, r4, #4
    846a:	181b      	adds	r3, r3, r0
    846c:	7819      	ldrb	r1, [r3, #0]
    846e:	29ff      	cmp	r1, #255	; 0xff
    8470:	d158      	bne.n	8524 <keepAliveTimerHandler+0x130>
    8472:	7859      	ldrb	r1, [r3, #1]
    8474:	29ff      	cmp	r1, #255	; 0xff
    8476:	d155      	bne.n	8524 <keepAliveTimerHandler+0x130>
    8478:	7899      	ldrb	r1, [r3, #2]
    847a:	29ff      	cmp	r1, #255	; 0xff
    847c:	d152      	bne.n	8524 <keepAliveTimerHandler+0x130>
    847e:	78d9      	ldrb	r1, [r3, #3]
    8480:	29ff      	cmp	r1, #255	; 0xff
    8482:	d14f      	bne.n	8524 <keepAliveTimerHandler+0x130>
    8484:	7919      	ldrb	r1, [r3, #4]
    8486:	29ff      	cmp	r1, #255	; 0xff
    8488:	d14c      	bne.n	8524 <keepAliveTimerHandler+0x130>
    848a:	7959      	ldrb	r1, [r3, #5]
    848c:	29ff      	cmp	r1, #255	; 0xff
    848e:	d149      	bne.n	8524 <keepAliveTimerHandler+0x130>
    8490:	7999      	ldrb	r1, [r3, #6]
    8492:	29ff      	cmp	r1, #255	; 0xff
    8494:	d146      	bne.n	8524 <keepAliveTimerHandler+0x130>
    8496:	79d9      	ldrb	r1, [r3, #7]
    8498:	29ff      	cmp	r1, #255	; 0xff
    849a:	d143      	bne.n	8524 <keepAliveTimerHandler+0x130>
    849c:	3401      	adds	r4, #1
    849e:	b2e4      	uxtb	r4, r4
    84a0:	42bc      	cmp	r4, r7
    84a2:	d3e0      	bcc.n	8466 <keepAliveTimerHandler+0x72>
    84a4:	2324      	movs	r3, #36	; 0x24
    84a6:	5cd7      	ldrb	r7, [r2, r3]
    84a8:	2401      	movs	r4, #1
    84aa:	2f01      	cmp	r7, #1
    84ac:	d923      	bls.n	84f6 <keepAliveTimerHandler+0x102>
    84ae:	4b2c      	ldr	r3, [pc, #176]	; (8560 <keepAliveTimerHandler+0x16c>)
    84b0:	2624      	movs	r6, #36	; 0x24
    84b2:	4698      	mov	r8, r3
    84b4:	00a0      	lsls	r0, r4, #2
    84b6:	1900      	adds	r0, r0, r4
    84b8:	68d3      	ldr	r3, [r2, #12]
    84ba:	0080      	lsls	r0, r0, #2
    84bc:	181b      	adds	r3, r3, r0
    84be:	7819      	ldrb	r1, [r3, #0]
    84c0:	29ff      	cmp	r1, #255	; 0xff
    84c2:	d11b      	bne.n	84fc <keepAliveTimerHandler+0x108>
    84c4:	7859      	ldrb	r1, [r3, #1]
    84c6:	29ff      	cmp	r1, #255	; 0xff
    84c8:	d118      	bne.n	84fc <keepAliveTimerHandler+0x108>
    84ca:	7899      	ldrb	r1, [r3, #2]
    84cc:	29ff      	cmp	r1, #255	; 0xff
    84ce:	d115      	bne.n	84fc <keepAliveTimerHandler+0x108>
    84d0:	78d9      	ldrb	r1, [r3, #3]
    84d2:	29ff      	cmp	r1, #255	; 0xff
    84d4:	d112      	bne.n	84fc <keepAliveTimerHandler+0x108>
    84d6:	7919      	ldrb	r1, [r3, #4]
    84d8:	29ff      	cmp	r1, #255	; 0xff
    84da:	d10f      	bne.n	84fc <keepAliveTimerHandler+0x108>
    84dc:	7959      	ldrb	r1, [r3, #5]
    84de:	29ff      	cmp	r1, #255	; 0xff
    84e0:	d10c      	bne.n	84fc <keepAliveTimerHandler+0x108>
    84e2:	7999      	ldrb	r1, [r3, #6]
    84e4:	29ff      	cmp	r1, #255	; 0xff
    84e6:	d109      	bne.n	84fc <keepAliveTimerHandler+0x108>
    84e8:	79d9      	ldrb	r1, [r3, #7]
    84ea:	29ff      	cmp	r1, #255	; 0xff
    84ec:	d106      	bne.n	84fc <keepAliveTimerHandler+0x108>
    84ee:	3401      	adds	r4, #1
    84f0:	b2e4      	uxtb	r4, r4
    84f2:	42bc      	cmp	r4, r7
    84f4:	d3de      	bcc.n	84b4 <keepAliveTimerHandler+0xc0>
    84f6:	bc04      	pop	{r2}
    84f8:	4690      	mov	r8, r2
    84fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84fc:	68d9      	ldr	r1, [r3, #12]
    84fe:	2900      	cmp	r1, #0
    8500:	d0f5      	beq.n	84ee <keepAliveTimerHandler+0xfa>
    8502:	3901      	subs	r1, #1
    8504:	60d9      	str	r1, [r3, #12]
    8506:	2900      	cmp	r1, #0
    8508:	d016      	beq.n	8538 <keepAliveTimerHandler+0x144>
    850a:	682a      	ldr	r2, [r5, #0]
    850c:	5d97      	ldrb	r7, [r2, r6]
    850e:	e7ee      	b.n	84ee <keepAliveTimerHandler+0xfa>
    8510:	6899      	ldr	r1, [r3, #8]
    8512:	2900      	cmp	r1, #0
    8514:	d09b      	beq.n	844e <keepAliveTimerHandler+0x5a>
    8516:	3901      	subs	r1, #1
    8518:	6099      	str	r1, [r3, #8]
    851a:	2900      	cmp	r1, #0
    851c:	d012      	beq.n	8544 <keepAliveTimerHandler+0x150>
    851e:	682a      	ldr	r2, [r5, #0]
    8520:	5d97      	ldrb	r7, [r2, r6]
    8522:	e794      	b.n	844e <keepAliveTimerHandler+0x5a>
    8524:	6899      	ldr	r1, [r3, #8]
    8526:	2900      	cmp	r1, #0
    8528:	d0b8      	beq.n	849c <keepAliveTimerHandler+0xa8>
    852a:	3901      	subs	r1, #1
    852c:	6099      	str	r1, [r3, #8]
    852e:	2900      	cmp	r1, #0
    8530:	d00e      	beq.n	8550 <keepAliveTimerHandler+0x15c>
    8532:	682a      	ldr	r2, [r5, #0]
    8534:	5d97      	ldrb	r7, [r2, r6]
    8536:	e7b1      	b.n	849c <keepAliveTimerHandler+0xa8>
    8538:	68d3      	ldr	r3, [r2, #12]
    853a:	21ff      	movs	r1, #255	; 0xff
    853c:	1818      	adds	r0, r3, r0
    853e:	2208      	movs	r2, #8
    8540:	47c0      	blx	r8
    8542:	e7e2      	b.n	850a <keepAliveTimerHandler+0x116>
    8544:	6813      	ldr	r3, [r2, #0]
    8546:	21ff      	movs	r1, #255	; 0xff
    8548:	1818      	adds	r0, r3, r0
    854a:	2208      	movs	r2, #8
    854c:	47c0      	blx	r8
    854e:	e7e6      	b.n	851e <keepAliveTimerHandler+0x12a>
    8550:	6893      	ldr	r3, [r2, #8]
    8552:	21ff      	movs	r1, #255	; 0xff
    8554:	1818      	adds	r0, r3, r0
    8556:	2208      	movs	r2, #8
    8558:	47c0      	blx	r8
    855a:	e7ea      	b.n	8532 <keepAliveTimerHandler+0x13e>
    855c:	2000303c 	.word	0x2000303c
    8560:	00009341 	.word	0x00009341

00008564 <isRxOffEdAvailable>:
    8564:	2224      	movs	r2, #36	; 0x24
    8566:	4b1e      	ldr	r3, [pc, #120]	; (85e0 <isRxOffEdAvailable+0x7c>)
    8568:	681b      	ldr	r3, [r3, #0]
    856a:	5c9a      	ldrb	r2, [r3, r2]
    856c:	2a01      	cmp	r2, #1
    856e:	d932      	bls.n	85d6 <isRxOffEdAvailable+0x72>
    8570:	68d9      	ldr	r1, [r3, #12]
    8572:	7d0b      	ldrb	r3, [r1, #20]
    8574:	2bff      	cmp	r3, #255	; 0xff
    8576:	d130      	bne.n	85da <isRxOffEdAvailable+0x76>
    8578:	7d4b      	ldrb	r3, [r1, #21]
    857a:	2bff      	cmp	r3, #255	; 0xff
    857c:	d12d      	bne.n	85da <isRxOffEdAvailable+0x76>
    857e:	7d8b      	ldrb	r3, [r1, #22]
    8580:	2bff      	cmp	r3, #255	; 0xff
    8582:	d12a      	bne.n	85da <isRxOffEdAvailable+0x76>
    8584:	7dcb      	ldrb	r3, [r1, #23]
    8586:	2bff      	cmp	r3, #255	; 0xff
    8588:	d127      	bne.n	85da <isRxOffEdAvailable+0x76>
    858a:	000b      	movs	r3, r1
    858c:	3a02      	subs	r2, #2
    858e:	b2d2      	uxtb	r2, r2
    8590:	0090      	lsls	r0, r2, #2
    8592:	1882      	adds	r2, r0, r2
    8594:	0092      	lsls	r2, r2, #2
    8596:	3218      	adds	r2, #24
    8598:	3318      	adds	r3, #24
    859a:	1889      	adds	r1, r1, r2
    859c:	e00d      	b.n	85ba <isRxOffEdAvailable+0x56>
    859e:	7c1a      	ldrb	r2, [r3, #16]
    85a0:	2aff      	cmp	r2, #255	; 0xff
    85a2:	d11a      	bne.n	85da <isRxOffEdAvailable+0x76>
    85a4:	7c5a      	ldrb	r2, [r3, #17]
    85a6:	2aff      	cmp	r2, #255	; 0xff
    85a8:	d117      	bne.n	85da <isRxOffEdAvailable+0x76>
    85aa:	7c9a      	ldrb	r2, [r3, #18]
    85ac:	2aff      	cmp	r2, #255	; 0xff
    85ae:	d114      	bne.n	85da <isRxOffEdAvailable+0x76>
    85b0:	3314      	adds	r3, #20
    85b2:	1e5a      	subs	r2, r3, #1
    85b4:	7812      	ldrb	r2, [r2, #0]
    85b6:	2aff      	cmp	r2, #255	; 0xff
    85b8:	d10f      	bne.n	85da <isRxOffEdAvailable+0x76>
    85ba:	781a      	ldrb	r2, [r3, #0]
    85bc:	2aff      	cmp	r2, #255	; 0xff
    85be:	d10c      	bne.n	85da <isRxOffEdAvailable+0x76>
    85c0:	785a      	ldrb	r2, [r3, #1]
    85c2:	2aff      	cmp	r2, #255	; 0xff
    85c4:	d109      	bne.n	85da <isRxOffEdAvailable+0x76>
    85c6:	789a      	ldrb	r2, [r3, #2]
    85c8:	2aff      	cmp	r2, #255	; 0xff
    85ca:	d106      	bne.n	85da <isRxOffEdAvailable+0x76>
    85cc:	78da      	ldrb	r2, [r3, #3]
    85ce:	2aff      	cmp	r2, #255	; 0xff
    85d0:	d103      	bne.n	85da <isRxOffEdAvailable+0x76>
    85d2:	4299      	cmp	r1, r3
    85d4:	d1e3      	bne.n	859e <isRxOffEdAvailable+0x3a>
    85d6:	2000      	movs	r0, #0
    85d8:	4770      	bx	lr
    85da:	2001      	movs	r0, #1
    85dc:	e7fc      	b.n	85d8 <isRxOffEdAvailable+0x74>
    85de:	46c0      	nop			; (mov r8, r8)
    85e0:	2000303c 	.word	0x2000303c

000085e4 <routeReplyConfcb>:
    85e4:	b510      	push	{r4, lr}
    85e6:	0010      	movs	r0, r2
    85e8:	4b01      	ldr	r3, [pc, #4]	; (85f0 <routeReplyConfcb+0xc>)
    85ea:	4798      	blx	r3
    85ec:	bd10      	pop	{r4, pc}
    85ee:	46c0      	nop			; (mov r8, r8)
    85f0:	000033f1 	.word	0x000033f1

000085f4 <routeUpdateConfcb>:
    85f4:	b510      	push	{r4, lr}
    85f6:	0010      	movs	r0, r2
    85f8:	4b01      	ldr	r3, [pc, #4]	; (8600 <routeUpdateConfcb+0xc>)
    85fa:	4798      	blx	r3
    85fc:	bd10      	pop	{r4, pc}
    85fe:	46c0      	nop			; (mov r8, r8)
    8600:	000033f1 	.word	0x000033f1

00008604 <routeReqConfcb>:
    8604:	b510      	push	{r4, lr}
    8606:	0010      	movs	r0, r2
    8608:	4b01      	ldr	r3, [pc, #4]	; (8610 <routeReqConfcb+0xc>)
    860a:	4798      	blx	r3
    860c:	bd10      	pop	{r4, pc}
    860e:	46c0      	nop			; (mov r8, r8)
    8610:	000033f1 	.word	0x000033f1

00008614 <initRouteTable>:
    8614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8616:	2320      	movs	r3, #32
    8618:	4c15      	ldr	r4, [pc, #84]	; (8670 <initRouteTable+0x5c>)
    861a:	6822      	ldr	r2, [r4, #0]
    861c:	5cd3      	ldrb	r3, [r2, r3]
    861e:	2b00      	cmp	r3, #0
    8620:	d018      	beq.n	8654 <initRouteTable+0x40>
    8622:	2300      	movs	r3, #0
    8624:	27ff      	movs	r7, #255	; 0xff
    8626:	250f      	movs	r5, #15
    8628:	2620      	movs	r6, #32
    862a:	6912      	ldr	r2, [r2, #16]
    862c:	0058      	lsls	r0, r3, #1
    862e:	5417      	strb	r7, [r2, r0]
    8630:	6822      	ldr	r2, [r4, #0]
    8632:	3301      	adds	r3, #1
    8634:	6911      	ldr	r1, [r2, #16]
    8636:	b2db      	uxtb	r3, r3
    8638:	1809      	adds	r1, r1, r0
    863a:	784a      	ldrb	r2, [r1, #1]
    863c:	43aa      	bics	r2, r5
    863e:	704a      	strb	r2, [r1, #1]
    8640:	6822      	ldr	r2, [r4, #0]
    8642:	6912      	ldr	r2, [r2, #16]
    8644:	1812      	adds	r2, r2, r0
    8646:	7851      	ldrb	r1, [r2, #1]
    8648:	4029      	ands	r1, r5
    864a:	7051      	strb	r1, [r2, #1]
    864c:	6822      	ldr	r2, [r4, #0]
    864e:	5d91      	ldrb	r1, [r2, r6]
    8650:	4299      	cmp	r1, r3
    8652:	d8ea      	bhi.n	862a <initRouteTable+0x16>
    8654:	2100      	movs	r1, #0
    8656:	6950      	ldr	r0, [r2, #20]
    8658:	4b06      	ldr	r3, [pc, #24]	; (8674 <initRouteTable+0x60>)
    865a:	2220      	movs	r2, #32
    865c:	4798      	blx	r3
    865e:	4806      	ldr	r0, [pc, #24]	; (8678 <initRouteTable+0x64>)
    8660:	4b06      	ldr	r3, [pc, #24]	; (867c <initRouteTable+0x68>)
    8662:	4798      	blx	r3
    8664:	2325      	movs	r3, #37	; 0x25
    8666:	6822      	ldr	r2, [r4, #0]
    8668:	5cd2      	ldrb	r2, [r2, r3]
    866a:	4b05      	ldr	r3, [pc, #20]	; (8680 <initRouteTable+0x6c>)
    866c:	701a      	strb	r2, [r3, #0]
    866e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8670:	2000303c 	.word	0x2000303c
    8674:	00009341 	.word	0x00009341
    8678:	200030c0 	.word	0x200030c0
    867c:	00003501 	.word	0x00003501
    8680:	200030bc 	.word	0x200030bc

00008684 <addRoute>:
    8684:	b5f0      	push	{r4, r5, r6, r7, lr}
    8686:	46c6      	mov	lr, r8
    8688:	0a04      	lsrs	r4, r0, #8
    868a:	2020      	movs	r0, #32
    868c:	b500      	push	{lr}
    868e:	4f2d      	ldr	r7, [pc, #180]	; (8744 <addRoute+0xc0>)
    8690:	683d      	ldr	r5, [r7, #0]
    8692:	5c2e      	ldrb	r6, [r5, r0]
    8694:	2000      	movs	r0, #0
    8696:	42b4      	cmp	r4, r6
    8698:	d237      	bcs.n	870a <addRoute+0x86>
    869a:	0a09      	lsrs	r1, r1, #8
    869c:	42b1      	cmp	r1, r6
    869e:	d234      	bcs.n	870a <addRoute+0x86>
    86a0:	1c10      	adds	r0, r2, #0
    86a2:	2a0f      	cmp	r2, #15
    86a4:	d834      	bhi.n	8710 <addRoute+0x8c>
    86a6:	b2c2      	uxtb	r2, r0
    86a8:	2001      	movs	r0, #1
    86aa:	4020      	ands	r0, r4
    86ac:	4684      	mov	ip, r0
    86ae:	d135      	bne.n	871c <addRoute+0x98>
    86b0:	0860      	lsrs	r0, r4, #1
    86b2:	4680      	mov	r8, r0
    86b4:	4646      	mov	r6, r8
    86b6:	6968      	ldr	r0, [r5, #20]
    86b8:	5d86      	ldrb	r6, [r0, r6]
    86ba:	0936      	lsrs	r6, r6, #4
    86bc:	2e00      	cmp	r6, #0
    86be:	d002      	beq.n	86c6 <addRoute+0x42>
    86c0:	2000      	movs	r0, #0
    86c2:	42b2      	cmp	r2, r6
    86c4:	d221      	bcs.n	870a <addRoute+0x86>
    86c6:	0060      	lsls	r0, r4, #1
    86c8:	692c      	ldr	r4, [r5, #16]
    86ca:	5421      	strb	r1, [r4, r0]
    86cc:	4661      	mov	r1, ip
    86ce:	2900      	cmp	r1, #0
    86d0:	d12c      	bne.n	872c <addRoute+0xa8>
    86d2:	0114      	lsls	r4, r2, #4
    86d4:	4642      	mov	r2, r8
    86d6:	6839      	ldr	r1, [r7, #0]
    86d8:	6949      	ldr	r1, [r1, #20]
    86da:	5c8d      	ldrb	r5, [r1, r2]
    86dc:	220f      	movs	r2, #15
    86de:	402a      	ands	r2, r5
    86e0:	4322      	orrs	r2, r4
    86e2:	4644      	mov	r4, r8
    86e4:	550a      	strb	r2, [r1, r4]
    86e6:	683a      	ldr	r2, [r7, #0]
    86e8:	091c      	lsrs	r4, r3, #4
    86ea:	6911      	ldr	r1, [r2, #16]
    86ec:	220f      	movs	r2, #15
    86ee:	1809      	adds	r1, r1, r0
    86f0:	784b      	ldrb	r3, [r1, #1]
    86f2:	4393      	bics	r3, r2
    86f4:	4323      	orrs	r3, r4
    86f6:	704b      	strb	r3, [r1, #1]
    86f8:	683b      	ldr	r3, [r7, #0]
    86fa:	691c      	ldr	r4, [r3, #16]
    86fc:	1824      	adds	r4, r4, r0
    86fe:	7863      	ldrb	r3, [r4, #1]
    8700:	2001      	movs	r0, #1
    8702:	401a      	ands	r2, r3
    8704:	2330      	movs	r3, #48	; 0x30
    8706:	431a      	orrs	r2, r3
    8708:	7062      	strb	r2, [r4, #1]
    870a:	bc04      	pop	{r2}
    870c:	4690      	mov	r8, r2
    870e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8710:	200f      	movs	r0, #15
    8712:	b2c2      	uxtb	r2, r0
    8714:	2001      	movs	r0, #1
    8716:	4020      	ands	r0, r4
    8718:	4684      	mov	ip, r0
    871a:	d0c9      	beq.n	86b0 <addRoute+0x2c>
    871c:	0860      	lsrs	r0, r4, #1
    871e:	4680      	mov	r8, r0
    8720:	4646      	mov	r6, r8
    8722:	6968      	ldr	r0, [r5, #20]
    8724:	5d86      	ldrb	r6, [r0, r6]
    8726:	0736      	lsls	r6, r6, #28
    8728:	0f36      	lsrs	r6, r6, #28
    872a:	e7c7      	b.n	86bc <addRoute+0x38>
    872c:	240f      	movs	r4, #15
    872e:	4022      	ands	r2, r4
    8730:	0015      	movs	r5, r2
    8732:	4642      	mov	r2, r8
    8734:	6839      	ldr	r1, [r7, #0]
    8736:	6949      	ldr	r1, [r1, #20]
    8738:	5c8a      	ldrb	r2, [r1, r2]
    873a:	43a2      	bics	r2, r4
    873c:	4644      	mov	r4, r8
    873e:	432a      	orrs	r2, r5
    8740:	550a      	strb	r2, [r1, r4]
    8742:	e7d0      	b.n	86e6 <addRoute+0x62>
    8744:	2000303c 	.word	0x2000303c

00008748 <handleRouteMessage>:
    8748:	b5f0      	push	{r4, r5, r6, r7, lr}
    874a:	4657      	mov	r7, sl
    874c:	46de      	mov	lr, fp
    874e:	464e      	mov	r6, r9
    8750:	4645      	mov	r5, r8
    8752:	b5e0      	push	{r5, r6, r7, lr}
    8754:	0004      	movs	r4, r0
    8756:	b093      	sub	sp, #76	; 0x4c
    8758:	7850      	ldrb	r0, [r2, #1]
    875a:	a91c      	add	r1, sp, #112	; 0x70
    875c:	7812      	ldrb	r2, [r2, #0]
    875e:	780f      	ldrb	r7, [r1, #0]
    8760:	0201      	lsls	r1, r0, #8
    8762:	4311      	orrs	r1, r2
    8764:	781a      	ldrb	r2, [r3, #0]
    8766:	2a12      	cmp	r2, #18
    8768:	d100      	bne.n	876c <handleRouteMessage+0x24>
    876a:	e150      	b.n	8a0e <handleRouteMessage+0x2c6>
    876c:	2a13      	cmp	r2, #19
    876e:	d100      	bne.n	8772 <handleRouteMessage+0x2a>
    8770:	e07f      	b.n	8872 <handleRouteMessage+0x12a>
    8772:	2a11      	cmp	r2, #17
    8774:	d009      	beq.n	878a <handleRouteMessage+0x42>
    8776:	2300      	movs	r3, #0
    8778:	4698      	mov	r8, r3
    877a:	4640      	mov	r0, r8
    877c:	b013      	add	sp, #76	; 0x4c
    877e:	bc3c      	pop	{r2, r3, r4, r5}
    8780:	4690      	mov	r8, r2
    8782:	4699      	mov	r9, r3
    8784:	46a2      	mov	sl, r4
    8786:	46ab      	mov	fp, r5
    8788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    878a:	789d      	ldrb	r5, [r3, #2]
    878c:	785a      	ldrb	r2, [r3, #1]
    878e:	022b      	lsls	r3, r5, #8
    8790:	431a      	orrs	r2, r3
    8792:	4691      	mov	r9, r2
    8794:	7822      	ldrb	r2, [r4, #0]
    8796:	b289      	uxth	r1, r1
    8798:	4252      	negs	r2, r2
    879a:	b2d2      	uxtb	r2, r2
    879c:	003b      	movs	r3, r7
    879e:	4eb3      	ldr	r6, [pc, #716]	; (8a6c <handleRouteMessage+0x324>)
    87a0:	88e0      	ldrh	r0, [r4, #6]
    87a2:	47b0      	blx	r6
    87a4:	2220      	movs	r2, #32
    87a6:	2101      	movs	r1, #1
    87a8:	4eb1      	ldr	r6, [pc, #708]	; (8a70 <handleRouteMessage+0x328>)
    87aa:	4688      	mov	r8, r1
    87ac:	6833      	ldr	r3, [r6, #0]
    87ae:	5c9a      	ldrb	r2, [r3, r2]
    87b0:	42aa      	cmp	r2, r5
    87b2:	d9e2      	bls.n	877a <handleRouteMessage+0x32>
    87b4:	4229      	tst	r1, r5
    87b6:	d000      	beq.n	87ba <handleRouteMessage+0x72>
    87b8:	e147      	b.n	8a4a <handleRouteMessage+0x302>
    87ba:	695b      	ldr	r3, [r3, #20]
    87bc:	086a      	lsrs	r2, r5, #1
    87be:	5c9f      	ldrb	r7, [r3, r2]
    87c0:	093b      	lsrs	r3, r7, #4
    87c2:	469b      	mov	fp, r3
    87c4:	4bab      	ldr	r3, [pc, #684]	; (8a74 <handleRouteMessage+0x32c>)
    87c6:	469a      	mov	sl, r3
    87c8:	881b      	ldrh	r3, [r3, #0]
    87ca:	4599      	cmp	r9, r3
    87cc:	d004      	beq.n	87d8 <handleRouteMessage+0x90>
    87ce:	2301      	movs	r3, #1
    87d0:	4698      	mov	r8, r3
    87d2:	465b      	mov	r3, fp
    87d4:	2b00      	cmp	r3, #0
    87d6:	d0d0      	beq.n	877a <handleRouteMessage+0x32>
    87d8:	88e3      	ldrh	r3, [r4, #6]
    87da:	2078      	movs	r0, #120	; 0x78
    87dc:	4699      	mov	r9, r3
    87de:	4ba6      	ldr	r3, [pc, #664]	; (8a78 <handleRouteMessage+0x330>)
    87e0:	4798      	blx	r3
    87e2:	4680      	mov	r8, r0
    87e4:	2800      	cmp	r0, #0
    87e6:	d0c6      	beq.n	8776 <handleRouteMessage+0x2e>
    87e8:	4653      	mov	r3, sl
    87ea:	8819      	ldrh	r1, [r3, #0]
    87ec:	ac0a      	add	r4, sp, #40	; 0x28
    87ee:	b289      	uxth	r1, r1
    87f0:	0023      	movs	r3, r4
    87f2:	464a      	mov	r2, r9
    87f4:	20ff      	movs	r0, #255	; 0xff
    87f6:	4fa1      	ldr	r7, [pc, #644]	; (8a7c <handleRouteMessage+0x334>)
    87f8:	47b8      	blx	r7
    87fa:	2210      	movs	r2, #16
    87fc:	7863      	ldrb	r3, [r4, #1]
    87fe:	4641      	mov	r1, r8
    8800:	4393      	bics	r3, r2
    8802:	7063      	strb	r3, [r4, #1]
    8804:	0020      	movs	r0, r4
    8806:	4b9e      	ldr	r3, [pc, #632]	; (8a80 <handleRouteMessage+0x338>)
    8808:	4798      	blx	r3
    880a:	2312      	movs	r3, #18
    880c:	4642      	mov	r2, r8
    880e:	0001      	movs	r1, r0
    8810:	5413      	strb	r3, [r2, r0]
    8812:	1c43      	adds	r3, r0, #1
    8814:	2200      	movs	r2, #0
    8816:	4640      	mov	r0, r8
    8818:	b2db      	uxtb	r3, r3
    881a:	54c2      	strb	r2, [r0, r3]
    881c:	1c8b      	adds	r3, r1, #2
    881e:	b2db      	uxtb	r3, r3
    8820:	54c5      	strb	r5, [r0, r3]
    8822:	4642      	mov	r2, r8
    8824:	4658      	mov	r0, fp
    8826:	1ccb      	adds	r3, r1, #3
    8828:	b2db      	uxtb	r3, r3
    882a:	54d0      	strb	r0, [r2, r3]
    882c:	2020      	movs	r0, #32
    882e:	464b      	mov	r3, r9
    8830:	6832      	ldr	r2, [r6, #0]
    8832:	0a1b      	lsrs	r3, r3, #8
    8834:	5c10      	ldrb	r0, [r2, r0]
    8836:	4298      	cmp	r0, r3
    8838:	d800      	bhi.n	883c <handleRouteMessage+0xf4>
    883a:	e10d      	b.n	8a58 <handleRouteMessage+0x310>
    883c:	6912      	ldr	r2, [r2, #16]
    883e:	005b      	lsls	r3, r3, #1
    8840:	5c9b      	ldrb	r3, [r3, r2]
    8842:	2bff      	cmp	r3, #255	; 0xff
    8844:	d100      	bne.n	8848 <handleRouteMessage+0x100>
    8846:	e107      	b.n	8a58 <handleRouteMessage+0x310>
    8848:	021b      	lsls	r3, r3, #8
    884a:	a804      	add	r0, sp, #16
    884c:	4684      	mov	ip, r0
    884e:	2216      	movs	r2, #22
    8850:	4462      	add	r2, ip
    8852:	8013      	strh	r3, [r2, #0]
    8854:	4b8b      	ldr	r3, [pc, #556]	; (8a84 <handleRouteMessage+0x33c>)
    8856:	9201      	str	r2, [sp, #4]
    8858:	9303      	str	r3, [sp, #12]
    885a:	2300      	movs	r3, #0
    885c:	9302      	str	r3, [sp, #8]
    885e:	3302      	adds	r3, #2
    8860:	9300      	str	r3, [sp, #0]
    8862:	0020      	movs	r0, r4
    8864:	4643      	mov	r3, r8
    8866:	2204      	movs	r2, #4
    8868:	4c87      	ldr	r4, [pc, #540]	; (8a88 <handleRouteMessage+0x340>)
    886a:	47a0      	blx	r4
    886c:	2300      	movs	r3, #0
    886e:	4698      	mov	r8, r3
    8870:	e783      	b.n	877a <handleRouteMessage+0x32>
    8872:	4a86      	ldr	r2, [pc, #536]	; (8a8c <handleRouteMessage+0x344>)
    8874:	7812      	ldrb	r2, [r2, #0]
    8876:	4690      	mov	r8, r2
    8878:	2a00      	cmp	r2, #0
    887a:	d000      	beq.n	887e <handleRouteMessage+0x136>
    887c:	e77b      	b.n	8776 <handleRouteMessage+0x2e>
    887e:	785a      	ldrb	r2, [r3, #1]
    8880:	1c9d      	adds	r5, r3, #2
    8882:	4693      	mov	fp, r2
    8884:	2a00      	cmp	r2, #0
    8886:	d100      	bne.n	888a <handleRouteMessage+0x142>
    8888:	e0e8      	b.n	8a5c <handleRouteMessage+0x314>
    888a:	4e79      	ldr	r6, [pc, #484]	; (8a70 <handleRouteMessage+0x328>)
    888c:	240f      	movs	r4, #15
    888e:	6833      	ldr	r3, [r6, #0]
    8890:	4641      	mov	r1, r8
    8892:	695b      	ldr	r3, [r3, #20]
    8894:	9107      	str	r1, [sp, #28]
    8896:	469c      	mov	ip, r3
    8898:	093b      	lsrs	r3, r7, #4
    889a:	001a      	movs	r2, r3
    889c:	4022      	ands	r2, r4
    889e:	9205      	str	r2, [sp, #20]
    88a0:	4662      	mov	r2, ip
    88a2:	2702      	movs	r7, #2
    88a4:	9306      	str	r3, [sp, #24]
    88a6:	4684      	mov	ip, r0
    88a8:	2300      	movs	r3, #0
    88aa:	0010      	movs	r0, r2
    88ac:	9704      	str	r7, [sp, #16]
    88ae:	782a      	ldrb	r2, [r5, #0]
    88b0:	0011      	movs	r1, r2
    88b2:	43a1      	bics	r1, r4
    88b4:	d02d      	beq.n	8912 <handleRouteMessage+0x1ca>
    88b6:	0911      	lsrs	r1, r2, #4
    88b8:	3101      	adds	r1, #1
    88ba:	2910      	cmp	r1, #16
    88bc:	d100      	bne.n	88c0 <handleRouteMessage+0x178>
    88be:	3901      	subs	r1, #1
    88c0:	18c7      	adds	r7, r0, r3
    88c2:	46b8      	mov	r8, r7
    88c4:	783f      	ldrb	r7, [r7, #0]
    88c6:	46b9      	mov	r9, r7
    88c8:	43a7      	bics	r7, r4
    88ca:	d003      	beq.n	88d4 <handleRouteMessage+0x18c>
    88cc:	464f      	mov	r7, r9
    88ce:	093f      	lsrs	r7, r7, #4
    88d0:	42b9      	cmp	r1, r7
    88d2:	da1e      	bge.n	8912 <handleRouteMessage+0x1ca>
    88d4:	4642      	mov	r2, r8
    88d6:	7812      	ldrb	r2, [r2, #0]
    88d8:	0109      	lsls	r1, r1, #4
    88da:	4022      	ands	r2, r4
    88dc:	4311      	orrs	r1, r2
    88de:	4642      	mov	r2, r8
    88e0:	4660      	mov	r0, ip
    88e2:	7011      	strb	r1, [r2, #0]
    88e4:	6831      	ldr	r1, [r6, #0]
    88e6:	009a      	lsls	r2, r3, #2
    88e8:	6909      	ldr	r1, [r1, #16]
    88ea:	9f05      	ldr	r7, [sp, #20]
    88ec:	5488      	strb	r0, [r1, r2]
    88ee:	6831      	ldr	r1, [r6, #0]
    88f0:	6908      	ldr	r0, [r1, #16]
    88f2:	1880      	adds	r0, r0, r2
    88f4:	7841      	ldrb	r1, [r0, #1]
    88f6:	43a1      	bics	r1, r4
    88f8:	4339      	orrs	r1, r7
    88fa:	7041      	strb	r1, [r0, #1]
    88fc:	2030      	movs	r0, #48	; 0x30
    88fe:	6831      	ldr	r1, [r6, #0]
    8900:	6909      	ldr	r1, [r1, #16]
    8902:	188a      	adds	r2, r1, r2
    8904:	7851      	ldrb	r1, [r2, #1]
    8906:	4021      	ands	r1, r4
    8908:	4301      	orrs	r1, r0
    890a:	7051      	strb	r1, [r2, #1]
    890c:	6831      	ldr	r1, [r6, #0]
    890e:	782a      	ldrb	r2, [r5, #0]
    8910:	6948      	ldr	r0, [r1, #20]
    8912:	4214      	tst	r4, r2
    8914:	d02a      	beq.n	896c <handleRouteMessage+0x224>
    8916:	0712      	lsls	r2, r2, #28
    8918:	0f12      	lsrs	r2, r2, #28
    891a:	3201      	adds	r2, #1
    891c:	2a10      	cmp	r2, #16
    891e:	d100      	bne.n	8922 <handleRouteMessage+0x1da>
    8920:	3a01      	subs	r2, #1
    8922:	18c1      	adds	r1, r0, r3
    8924:	780f      	ldrb	r7, [r1, #0]
    8926:	423c      	tst	r4, r7
    8928:	d003      	beq.n	8932 <handleRouteMessage+0x1ea>
    892a:	073f      	lsls	r7, r7, #28
    892c:	0f3f      	lsrs	r7, r7, #28
    892e:	42ba      	cmp	r2, r7
    8930:	da1c      	bge.n	896c <handleRouteMessage+0x224>
    8932:	7808      	ldrb	r0, [r1, #0]
    8934:	4022      	ands	r2, r4
    8936:	43a0      	bics	r0, r4
    8938:	4302      	orrs	r2, r0
    893a:	700a      	strb	r2, [r1, #0]
    893c:	4661      	mov	r1, ip
    893e:	9f04      	ldr	r7, [sp, #16]
    8940:	6832      	ldr	r2, [r6, #0]
    8942:	46b8      	mov	r8, r7
    8944:	6912      	ldr	r2, [r2, #16]
    8946:	9805      	ldr	r0, [sp, #20]
    8948:	55d1      	strb	r1, [r2, r7]
    894a:	6832      	ldr	r2, [r6, #0]
    894c:	6911      	ldr	r1, [r2, #16]
    894e:	4441      	add	r1, r8
    8950:	784a      	ldrb	r2, [r1, #1]
    8952:	43a2      	bics	r2, r4
    8954:	4302      	orrs	r2, r0
    8956:	2030      	movs	r0, #48	; 0x30
    8958:	704a      	strb	r2, [r1, #1]
    895a:	6832      	ldr	r2, [r6, #0]
    895c:	6911      	ldr	r1, [r2, #16]
    895e:	4441      	add	r1, r8
    8960:	784a      	ldrb	r2, [r1, #1]
    8962:	4022      	ands	r2, r4
    8964:	4302      	orrs	r2, r0
    8966:	704a      	strb	r2, [r1, #1]
    8968:	6832      	ldr	r2, [r6, #0]
    896a:	6950      	ldr	r0, [r2, #20]
    896c:	9a04      	ldr	r2, [sp, #16]
    896e:	3301      	adds	r3, #1
    8970:	3204      	adds	r2, #4
    8972:	9204      	str	r2, [sp, #16]
    8974:	b2da      	uxtb	r2, r3
    8976:	3501      	adds	r5, #1
    8978:	4593      	cmp	fp, r2
    897a:	d898      	bhi.n	88ae <handleRouteMessage+0x166>
    897c:	0002      	movs	r2, r0
    897e:	9b07      	ldr	r3, [sp, #28]
    8980:	4660      	mov	r0, ip
    8982:	4698      	mov	r8, r3
    8984:	4694      	mov	ip, r2
    8986:	0842      	lsrs	r2, r0, #1
    8988:	07c3      	lsls	r3, r0, #31
    898a:	d54f      	bpl.n	8a2c <handleRouteMessage+0x2e4>
    898c:	4663      	mov	r3, ip
    898e:	210f      	movs	r1, #15
    8990:	5c9b      	ldrb	r3, [r3, r2]
    8992:	438b      	bics	r3, r1
    8994:	2101      	movs	r1, #1
    8996:	430b      	orrs	r3, r1
    8998:	4661      	mov	r1, ip
    899a:	548b      	strb	r3, [r1, r2]
    899c:	210f      	movs	r1, #15
    899e:	6833      	ldr	r3, [r6, #0]
    89a0:	0044      	lsls	r4, r0, #1
    89a2:	691b      	ldr	r3, [r3, #16]
    89a4:	9a06      	ldr	r2, [sp, #24]
    89a6:	5518      	strb	r0, [r3, r4]
    89a8:	6833      	ldr	r3, [r6, #0]
    89aa:	6918      	ldr	r0, [r3, #16]
    89ac:	1900      	adds	r0, r0, r4
    89ae:	7843      	ldrb	r3, [r0, #1]
    89b0:	438b      	bics	r3, r1
    89b2:	4313      	orrs	r3, r2
    89b4:	7043      	strb	r3, [r0, #1]
    89b6:	2030      	movs	r0, #48	; 0x30
    89b8:	6833      	ldr	r3, [r6, #0]
    89ba:	691a      	ldr	r2, [r3, #16]
    89bc:	1912      	adds	r2, r2, r4
    89be:	7853      	ldrb	r3, [r2, #1]
    89c0:	400b      	ands	r3, r1
    89c2:	4303      	orrs	r3, r0
    89c4:	7053      	strb	r3, [r2, #1]
    89c6:	4b2b      	ldr	r3, [pc, #172]	; (8a74 <handleRouteMessage+0x32c>)
    89c8:	6830      	ldr	r0, [r6, #0]
    89ca:	881b      	ldrh	r3, [r3, #0]
    89cc:	6904      	ldr	r4, [r0, #16]
    89ce:	0a1b      	lsrs	r3, r3, #8
    89d0:	b2da      	uxtb	r2, r3
    89d2:	005b      	lsls	r3, r3, #1
    89d4:	5ce4      	ldrb	r4, [r4, r3]
    89d6:	2cff      	cmp	r4, #255	; 0xff
    89d8:	d100      	bne.n	89dc <handleRouteMessage+0x294>
    89da:	e6cc      	b.n	8776 <handleRouteMessage+0x2e>
    89dc:	07d4      	lsls	r4, r2, #31
    89de:	d52e      	bpl.n	8a3e <handleRouteMessage+0x2f6>
    89e0:	6944      	ldr	r4, [r0, #20]
    89e2:	0852      	lsrs	r2, r2, #1
    89e4:	5ca0      	ldrb	r0, [r4, r2]
    89e6:	4388      	bics	r0, r1
    89e8:	54a0      	strb	r0, [r4, r2]
    89ea:	21ff      	movs	r1, #255	; 0xff
    89ec:	6832      	ldr	r2, [r6, #0]
    89ee:	6912      	ldr	r2, [r2, #16]
    89f0:	54d1      	strb	r1, [r2, r3]
    89f2:	6832      	ldr	r2, [r6, #0]
    89f4:	39f0      	subs	r1, #240	; 0xf0
    89f6:	6912      	ldr	r2, [r2, #16]
    89f8:	18d2      	adds	r2, r2, r3
    89fa:	7850      	ldrb	r0, [r2, #1]
    89fc:	4388      	bics	r0, r1
    89fe:	7050      	strb	r0, [r2, #1]
    8a00:	6832      	ldr	r2, [r6, #0]
    8a02:	6912      	ldr	r2, [r2, #16]
    8a04:	18d3      	adds	r3, r2, r3
    8a06:	785a      	ldrb	r2, [r3, #1]
    8a08:	4011      	ands	r1, r2
    8a0a:	7059      	strb	r1, [r3, #1]
    8a0c:	e6b5      	b.n	877a <handleRouteMessage+0x32>
    8a0e:	7858      	ldrb	r0, [r3, #1]
    8a10:	789d      	ldrb	r5, [r3, #2]
    8a12:	78da      	ldrb	r2, [r3, #3]
    8a14:	7823      	ldrb	r3, [r4, #0]
    8a16:	022d      	lsls	r5, r5, #8
    8a18:	1ad2      	subs	r2, r2, r3
    8a1a:	b2d2      	uxtb	r2, r2
    8a1c:	003b      	movs	r3, r7
    8a1e:	b289      	uxth	r1, r1
    8a20:	4328      	orrs	r0, r5
    8a22:	4c12      	ldr	r4, [pc, #72]	; (8a6c <handleRouteMessage+0x324>)
    8a24:	47a0      	blx	r4
    8a26:	2300      	movs	r3, #0
    8a28:	4698      	mov	r8, r3
    8a2a:	e6a6      	b.n	877a <handleRouteMessage+0x32>
    8a2c:	4663      	mov	r3, ip
    8a2e:	5c99      	ldrb	r1, [r3, r2]
    8a30:	230f      	movs	r3, #15
    8a32:	400b      	ands	r3, r1
    8a34:	2110      	movs	r1, #16
    8a36:	430b      	orrs	r3, r1
    8a38:	4661      	mov	r1, ip
    8a3a:	548b      	strb	r3, [r1, r2]
    8a3c:	e7ae      	b.n	899c <handleRouteMessage+0x254>
    8a3e:	6940      	ldr	r0, [r0, #20]
    8a40:	0852      	lsrs	r2, r2, #1
    8a42:	5c84      	ldrb	r4, [r0, r2]
    8a44:	4021      	ands	r1, r4
    8a46:	5481      	strb	r1, [r0, r2]
    8a48:	e7cf      	b.n	89ea <handleRouteMessage+0x2a2>
    8a4a:	695b      	ldr	r3, [r3, #20]
    8a4c:	086a      	lsrs	r2, r5, #1
    8a4e:	5c9f      	ldrb	r7, [r3, r2]
    8a50:	073f      	lsls	r7, r7, #28
    8a52:	0f3b      	lsrs	r3, r7, #28
    8a54:	469b      	mov	fp, r3
    8a56:	e6b5      	b.n	87c4 <handleRouteMessage+0x7c>
    8a58:	4b0d      	ldr	r3, [pc, #52]	; (8a90 <handleRouteMessage+0x348>)
    8a5a:	e6f6      	b.n	884a <handleRouteMessage+0x102>
    8a5c:	4e04      	ldr	r6, [pc, #16]	; (8a70 <handleRouteMessage+0x328>)
    8a5e:	093b      	lsrs	r3, r7, #4
    8a60:	9306      	str	r3, [sp, #24]
    8a62:	6833      	ldr	r3, [r6, #0]
    8a64:	695b      	ldr	r3, [r3, #20]
    8a66:	469c      	mov	ip, r3
    8a68:	e78d      	b.n	8986 <handleRouteMessage+0x23e>
    8a6a:	46c0      	nop			; (mov r8, r8)
    8a6c:	00008685 	.word	0x00008685
    8a70:	2000303c 	.word	0x2000303c
    8a74:	20003084 	.word	0x20003084
    8a78:	000033a1 	.word	0x000033a1
    8a7c:	00006695 	.word	0x00006695
    8a80:	000066c1 	.word	0x000066c1
    8a84:	000085e5 	.word	0x000085e5
    8a88:	00006759 	.word	0x00006759
    8a8c:	200003e0 	.word	0x200003e0
    8a90:	0000ffff 	.word	0x0000ffff

00008a94 <removeRoute>:
    8a94:	2120      	movs	r1, #32
    8a96:	b530      	push	{r4, r5, lr}
    8a98:	4a14      	ldr	r2, [pc, #80]	; (8aec <removeRoute+0x58>)
    8a9a:	0a03      	lsrs	r3, r0, #8
    8a9c:	6814      	ldr	r4, [r2, #0]
    8a9e:	2000      	movs	r0, #0
    8aa0:	5c61      	ldrb	r1, [r4, r1]
    8aa2:	4299      	cmp	r1, r3
    8aa4:	d919      	bls.n	8ada <removeRoute+0x46>
    8aa6:	6920      	ldr	r0, [r4, #16]
    8aa8:	24ff      	movs	r4, #255	; 0xff
    8aaa:	0059      	lsls	r1, r3, #1
    8aac:	5444      	strb	r4, [r0, r1]
    8aae:	6810      	ldr	r0, [r2, #0]
    8ab0:	3cf0      	subs	r4, #240	; 0xf0
    8ab2:	6900      	ldr	r0, [r0, #16]
    8ab4:	1840      	adds	r0, r0, r1
    8ab6:	7845      	ldrb	r5, [r0, #1]
    8ab8:	43a5      	bics	r5, r4
    8aba:	7045      	strb	r5, [r0, #1]
    8abc:	6810      	ldr	r0, [r2, #0]
    8abe:	6900      	ldr	r0, [r0, #16]
    8ac0:	1841      	adds	r1, r0, r1
    8ac2:	7848      	ldrb	r0, [r1, #1]
    8ac4:	4020      	ands	r0, r4
    8ac6:	7048      	strb	r0, [r1, #1]
    8ac8:	6812      	ldr	r2, [r2, #0]
    8aca:	07d9      	lsls	r1, r3, #31
    8acc:	d406      	bmi.n	8adc <removeRoute+0x48>
    8ace:	2001      	movs	r0, #1
    8ad0:	6952      	ldr	r2, [r2, #20]
    8ad2:	085b      	lsrs	r3, r3, #1
    8ad4:	5cd1      	ldrb	r1, [r2, r3]
    8ad6:	400c      	ands	r4, r1
    8ad8:	54d4      	strb	r4, [r2, r3]
    8ada:	bd30      	pop	{r4, r5, pc}
    8adc:	6951      	ldr	r1, [r2, #20]
    8ade:	085b      	lsrs	r3, r3, #1
    8ae0:	5cca      	ldrb	r2, [r1, r3]
    8ae2:	2001      	movs	r0, #1
    8ae4:	43a2      	bics	r2, r4
    8ae6:	54ca      	strb	r2, [r1, r3]
    8ae8:	e7f7      	b.n	8ada <removeRoute+0x46>
    8aea:	46c0      	nop			; (mov r8, r8)
    8aec:	2000303c 	.word	0x2000303c

00008af0 <getNextHopAddr>:
    8af0:	2220      	movs	r2, #32
    8af2:	4b07      	ldr	r3, [pc, #28]	; (8b10 <getNextHopAddr+0x20>)
    8af4:	0a00      	lsrs	r0, r0, #8
    8af6:	681b      	ldr	r3, [r3, #0]
    8af8:	5c9a      	ldrb	r2, [r3, r2]
    8afa:	4282      	cmp	r2, r0
    8afc:	d801      	bhi.n	8b02 <getNextHopAddr+0x12>
    8afe:	4805      	ldr	r0, [pc, #20]	; (8b14 <getNextHopAddr+0x24>)
    8b00:	4770      	bx	lr
    8b02:	691b      	ldr	r3, [r3, #16]
    8b04:	0040      	lsls	r0, r0, #1
    8b06:	5cc0      	ldrb	r0, [r0, r3]
    8b08:	28ff      	cmp	r0, #255	; 0xff
    8b0a:	d0f8      	beq.n	8afe <getNextHopAddr+0xe>
    8b0c:	0200      	lsls	r0, r0, #8
    8b0e:	e7f7      	b.n	8b00 <getNextHopAddr+0x10>
    8b10:	2000303c 	.word	0x2000303c
    8b14:	0000ffff 	.word	0x0000ffff

00008b18 <routeTimerHandler>:
    8b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b1a:	464e      	mov	r6, r9
    8b1c:	46de      	mov	lr, fp
    8b1e:	4657      	mov	r7, sl
    8b20:	4645      	mov	r5, r8
    8b22:	b5e0      	push	{r5, r6, r7, lr}
    8b24:	4e64      	ldr	r6, [pc, #400]	; (8cb8 <routeTimerHandler+0x1a0>)
    8b26:	b08f      	sub	sp, #60	; 0x3c
    8b28:	7a33      	ldrb	r3, [r6, #8]
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d045      	beq.n	8bba <routeTimerHandler+0xa2>
    8b2e:	4b63      	ldr	r3, [pc, #396]	; (8cbc <routeTimerHandler+0x1a4>)
    8b30:	2500      	movs	r5, #0
    8b32:	4698      	mov	r8, r3
    8b34:	4b62      	ldr	r3, [pc, #392]	; (8cc0 <routeTimerHandler+0x1a8>)
    8b36:	4f63      	ldr	r7, [pc, #396]	; (8cc4 <routeTimerHandler+0x1ac>)
    8b38:	4699      	mov	r9, r3
    8b3a:	4b63      	ldr	r3, [pc, #396]	; (8cc8 <routeTimerHandler+0x1b0>)
    8b3c:	469a      	mov	sl, r3
    8b3e:	e027      	b.n	8b90 <routeTimerHandler+0x78>
    8b40:	464b      	mov	r3, r9
    8b42:	2120      	movs	r1, #32
    8b44:	681a      	ldr	r2, [r3, #0]
    8b46:	8b83      	ldrh	r3, [r0, #28]
    8b48:	5c51      	ldrb	r1, [r2, r1]
    8b4a:	0a1b      	lsrs	r3, r3, #8
    8b4c:	4299      	cmp	r1, r3
    8b4e:	d944      	bls.n	8bda <routeTimerHandler+0xc2>
    8b50:	6911      	ldr	r1, [r2, #16]
    8b52:	005b      	lsls	r3, r3, #1
    8b54:	5c5b      	ldrb	r3, [r3, r1]
    8b56:	2bff      	cmp	r3, #255	; 0xff
    8b58:	d03f      	beq.n	8bda <routeTimerHandler+0xc2>
    8b5a:	021b      	lsls	r3, r3, #8
    8b5c:	469b      	mov	fp, r3
    8b5e:	2310      	movs	r3, #16
    8b60:	7e41      	ldrb	r1, [r0, #25]
    8b62:	400b      	ands	r3, r1
    8b64:	d041      	beq.n	8bea <routeTimerHandler+0xd2>
    8b66:	2337      	movs	r3, #55	; 0x37
    8b68:	5cd3      	ldrb	r3, [r2, r3]
    8b6a:	0001      	movs	r1, r0
    8b6c:	3301      	adds	r3, #1
    8b6e:	7403      	strb	r3, [r0, #16]
    8b70:	2338      	movs	r3, #56	; 0x38
    8b72:	5cd3      	ldrb	r3, [r2, r3]
    8b74:	7443      	strb	r3, [r0, #17]
    8b76:	4855      	ldr	r0, [pc, #340]	; (8ccc <routeTimerHandler+0x1b4>)
    8b78:	4b50      	ldr	r3, [pc, #320]	; (8cbc <routeTimerHandler+0x1a4>)
    8b7a:	4798      	blx	r3
    8b7c:	4a54      	ldr	r2, [pc, #336]	; (8cd0 <routeTimerHandler+0x1b8>)
    8b7e:	4659      	mov	r1, fp
    8b80:	0020      	movs	r0, r4
    8b82:	4b51      	ldr	r3, [pc, #324]	; (8cc8 <routeTimerHandler+0x1b0>)
    8b84:	4798      	blx	r3
    8b86:	3501      	adds	r5, #1
    8b88:	7a33      	ldrb	r3, [r6, #8]
    8b8a:	b2ed      	uxtb	r5, r5
    8b8c:	42ab      	cmp	r3, r5
    8b8e:	d914      	bls.n	8bba <routeTimerHandler+0xa2>
    8b90:	2100      	movs	r1, #0
    8b92:	0030      	movs	r0, r6
    8b94:	47b8      	blx	r7
    8b96:	1e04      	subs	r4, r0, #0
    8b98:	d018      	beq.n	8bcc <routeTimerHandler+0xb4>
    8b9a:	7c03      	ldrb	r3, [r0, #16]
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d004      	beq.n	8baa <routeTimerHandler+0x92>
    8ba0:	3b01      	subs	r3, #1
    8ba2:	b2db      	uxtb	r3, r3
    8ba4:	7403      	strb	r3, [r0, #16]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d0ca      	beq.n	8b40 <routeTimerHandler+0x28>
    8baa:	0021      	movs	r1, r4
    8bac:	0030      	movs	r0, r6
    8bae:	47c0      	blx	r8
    8bb0:	3501      	adds	r5, #1
    8bb2:	7a33      	ldrb	r3, [r6, #8]
    8bb4:	b2ed      	uxtb	r5, r5
    8bb6:	42ab      	cmp	r3, r5
    8bb8:	d8ea      	bhi.n	8b90 <routeTimerHandler+0x78>
    8bba:	4b46      	ldr	r3, [pc, #280]	; (8cd4 <routeTimerHandler+0x1bc>)
    8bbc:	781a      	ldrb	r2, [r3, #0]
    8bbe:	2a00      	cmp	r2, #0
    8bc0:	d004      	beq.n	8bcc <routeTimerHandler+0xb4>
    8bc2:	3a01      	subs	r2, #1
    8bc4:	b2d2      	uxtb	r2, r2
    8bc6:	701a      	strb	r2, [r3, #0]
    8bc8:	2a00      	cmp	r2, #0
    8bca:	d016      	beq.n	8bfa <routeTimerHandler+0xe2>
    8bcc:	b00f      	add	sp, #60	; 0x3c
    8bce:	bc3c      	pop	{r2, r3, r4, r5}
    8bd0:	4690      	mov	r8, r2
    8bd2:	4699      	mov	r9, r3
    8bd4:	46a2      	mov	sl, r4
    8bd6:	46ab      	mov	fp, r5
    8bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bda:	68a3      	ldr	r3, [r4, #8]
    8bdc:	2b00      	cmp	r3, #0
    8bde:	d0d2      	beq.n	8b86 <routeTimerHandler+0x6e>
    8be0:	7ca0      	ldrb	r0, [r4, #18]
    8be2:	0022      	movs	r2, r4
    8be4:	2107      	movs	r1, #7
    8be6:	4798      	blx	r3
    8be8:	e7cd      	b.n	8b86 <routeTimerHandler+0x6e>
    8bea:	7443      	strb	r3, [r0, #17]
    8bec:	6882      	ldr	r2, [r0, #8]
    8bee:	4659      	mov	r1, fp
    8bf0:	47d0      	blx	sl
    8bf2:	0020      	movs	r0, r4
    8bf4:	4b38      	ldr	r3, [pc, #224]	; (8cd8 <routeTimerHandler+0x1c0>)
    8bf6:	4798      	blx	r3
    8bf8:	e7c5      	b.n	8b86 <routeTimerHandler+0x6e>
    8bfa:	2025      	movs	r0, #37	; 0x25
    8bfc:	4930      	ldr	r1, [pc, #192]	; (8cc0 <routeTimerHandler+0x1a8>)
    8bfe:	4689      	mov	r9, r1
    8c00:	6809      	ldr	r1, [r1, #0]
    8c02:	5c08      	ldrb	r0, [r1, r0]
    8c04:	7018      	strb	r0, [r3, #0]
    8c06:	2320      	movs	r3, #32
    8c08:	5cce      	ldrb	r6, [r1, r3]
    8c0a:	2e00      	cmp	r6, #0
    8c0c:	d0de      	beq.n	8bcc <routeTimerHandler+0xb4>
    8c0e:	3601      	adds	r6, #1
    8c10:	6909      	ldr	r1, [r1, #16]
    8c12:	b2f6      	uxtb	r6, r6
    8c14:	3b1f      	subs	r3, #31
    8c16:	e005      	b.n	8c24 <routeTimerHandler+0x10c>
    8c18:	3301      	adds	r3, #1
    8c1a:	b2db      	uxtb	r3, r3
    8c1c:	b2c2      	uxtb	r2, r0
    8c1e:	3102      	adds	r1, #2
    8c20:	429e      	cmp	r6, r3
    8c22:	d00a      	beq.n	8c3a <routeTimerHandler+0x122>
    8c24:	780c      	ldrb	r4, [r1, #0]
    8c26:	1c18      	adds	r0, r3, #0
    8c28:	2cff      	cmp	r4, #255	; 0xff
    8c2a:	d1f5      	bne.n	8c18 <routeTimerHandler+0x100>
    8c2c:	3301      	adds	r3, #1
    8c2e:	1c10      	adds	r0, r2, #0
    8c30:	b2db      	uxtb	r3, r3
    8c32:	b2c2      	uxtb	r2, r0
    8c34:	3102      	adds	r1, #2
    8c36:	429e      	cmp	r6, r3
    8c38:	d1f4      	bne.n	8c24 <routeTimerHandler+0x10c>
    8c3a:	2a00      	cmp	r2, #0
    8c3c:	d0c6      	beq.n	8bcc <routeTimerHandler+0xb4>
    8c3e:	0854      	lsrs	r4, r2, #1
    8c40:	07d3      	lsls	r3, r2, #31
    8c42:	d501      	bpl.n	8c48 <routeTimerHandler+0x130>
    8c44:	0852      	lsrs	r2, r2, #1
    8c46:	1c54      	adds	r4, r2, #1
    8c48:	2616      	movs	r6, #22
    8c4a:	2303      	movs	r3, #3
    8c4c:	446e      	add	r6, sp
    8c4e:	425b      	negs	r3, r3
    8c50:	8033      	strh	r3, [r6, #0]
    8c52:	2078      	movs	r0, #120	; 0x78
    8c54:	4b21      	ldr	r3, [pc, #132]	; (8cdc <routeTimerHandler+0x1c4>)
    8c56:	4798      	blx	r3
    8c58:	1e07      	subs	r7, r0, #0
    8c5a:	d0b7      	beq.n	8bcc <routeTimerHandler+0xb4>
    8c5c:	4b20      	ldr	r3, [pc, #128]	; (8ce0 <routeTimerHandler+0x1c8>)
    8c5e:	8832      	ldrh	r2, [r6, #0]
    8c60:	8819      	ldrh	r1, [r3, #0]
    8c62:	2001      	movs	r0, #1
    8c64:	ab06      	add	r3, sp, #24
    8c66:	b289      	uxth	r1, r1
    8c68:	4d1e      	ldr	r5, [pc, #120]	; (8ce4 <routeTimerHandler+0x1cc>)
    8c6a:	47a8      	blx	r5
    8c6c:	0039      	movs	r1, r7
    8c6e:	a806      	add	r0, sp, #24
    8c70:	4b1d      	ldr	r3, [pc, #116]	; (8ce8 <routeTimerHandler+0x1d0>)
    8c72:	4798      	blx	r3
    8c74:	2313      	movs	r3, #19
    8c76:	543b      	strb	r3, [r7, r0]
    8c78:	0003      	movs	r3, r0
    8c7a:	3301      	adds	r3, #1
    8c7c:	b2db      	uxtb	r3, r3
    8c7e:	54fc      	strb	r4, [r7, r3]
    8c80:	464b      	mov	r3, r9
    8c82:	4680      	mov	r8, r0
    8c84:	681b      	ldr	r3, [r3, #0]
    8c86:	3002      	adds	r0, #2
    8c88:	b2c0      	uxtb	r0, r0
    8c8a:	6959      	ldr	r1, [r3, #20]
    8c8c:	0022      	movs	r2, r4
    8c8e:	1838      	adds	r0, r7, r0
    8c90:	4b16      	ldr	r3, [pc, #88]	; (8cec <routeTimerHandler+0x1d4>)
    8c92:	4798      	blx	r3
    8c94:	2301      	movs	r3, #1
    8c96:	425b      	negs	r3, r3
    8c98:	8033      	strh	r3, [r6, #0]
    8c9a:	4b15      	ldr	r3, [pc, #84]	; (8cf0 <routeTimerHandler+0x1d8>)
    8c9c:	3402      	adds	r4, #2
    8c9e:	9303      	str	r3, [sp, #12]
    8ca0:	2300      	movs	r3, #0
    8ca2:	9302      	str	r3, [sp, #8]
    8ca4:	3302      	adds	r3, #2
    8ca6:	b2e2      	uxtb	r2, r4
    8ca8:	9300      	str	r3, [sp, #0]
    8caa:	9601      	str	r6, [sp, #4]
    8cac:	003b      	movs	r3, r7
    8cae:	4641      	mov	r1, r8
    8cb0:	a806      	add	r0, sp, #24
    8cb2:	4c10      	ldr	r4, [pc, #64]	; (8cf4 <routeTimerHandler+0x1dc>)
    8cb4:	47a0      	blx	r4
    8cb6:	e789      	b.n	8bcc <routeTimerHandler+0xb4>
    8cb8:	200030c0 	.word	0x200030c0
    8cbc:	0000350d 	.word	0x0000350d
    8cc0:	2000303c 	.word	0x2000303c
    8cc4:	00003545 	.word	0x00003545
    8cc8:	000068b1 	.word	0x000068b1
    8ccc:	20003044 	.word	0x20003044
    8cd0:	00005039 	.word	0x00005039
    8cd4:	200030bc 	.word	0x200030bc
    8cd8:	000033f1 	.word	0x000033f1
    8cdc:	000033a1 	.word	0x000033a1
    8ce0:	20003084 	.word	0x20003084
    8ce4:	00006695 	.word	0x00006695
    8ce8:	000066c1 	.word	0x000066c1
    8cec:	0000932f 	.word	0x0000932f
    8cf0:	000085f5 	.word	0x000085f5
    8cf4:	00006759 	.word	0x00006759

00008cf8 <initiateRouteReq>:
    8cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cfa:	4647      	mov	r7, r8
    8cfc:	46ce      	mov	lr, r9
    8cfe:	2301      	movs	r3, #1
    8d00:	b580      	push	{r7, lr}
    8d02:	2716      	movs	r7, #22
    8d04:	b08f      	sub	sp, #60	; 0x3c
    8d06:	425b      	negs	r3, r3
    8d08:	446f      	add	r7, sp
    8d0a:	803b      	strh	r3, [r7, #0]
    8d0c:	4680      	mov	r8, r0
    8d0e:	4b1e      	ldr	r3, [pc, #120]	; (8d88 <initiateRouteReq+0x90>)
    8d10:	2078      	movs	r0, #120	; 0x78
    8d12:	4798      	blx	r3
    8d14:	1e04      	subs	r4, r0, #0
    8d16:	d034      	beq.n	8d82 <initiateRouteReq+0x8a>
    8d18:	4b1c      	ldr	r3, [pc, #112]	; (8d8c <initiateRouteReq+0x94>)
    8d1a:	ad06      	add	r5, sp, #24
    8d1c:	8819      	ldrh	r1, [r3, #0]
    8d1e:	4699      	mov	r9, r3
    8d20:	b289      	uxth	r1, r1
    8d22:	883a      	ldrh	r2, [r7, #0]
    8d24:	002b      	movs	r3, r5
    8d26:	20ff      	movs	r0, #255	; 0xff
    8d28:	4e19      	ldr	r6, [pc, #100]	; (8d90 <initiateRouteReq+0x98>)
    8d2a:	47b0      	blx	r6
    8d2c:	2220      	movs	r2, #32
    8d2e:	786b      	ldrb	r3, [r5, #1]
    8d30:	0021      	movs	r1, r4
    8d32:	4313      	orrs	r3, r2
    8d34:	706b      	strb	r3, [r5, #1]
    8d36:	0028      	movs	r0, r5
    8d38:	4b16      	ldr	r3, [pc, #88]	; (8d94 <initiateRouteReq+0x9c>)
    8d3a:	4798      	blx	r3
    8d3c:	464b      	mov	r3, r9
    8d3e:	0006      	movs	r6, r0
    8d40:	8818      	ldrh	r0, [r3, #0]
    8d42:	78a1      	ldrb	r1, [r4, #2]
    8d44:	b280      	uxth	r0, r0
    8d46:	4b14      	ldr	r3, [pc, #80]	; (8d98 <initiateRouteReq+0xa0>)
    8d48:	4798      	blx	r3
    8d4a:	2311      	movs	r3, #17
    8d4c:	2100      	movs	r1, #0
    8d4e:	55a3      	strb	r3, [r4, r6]
    8d50:	1c73      	adds	r3, r6, #1
    8d52:	b2db      	uxtb	r3, r3
    8d54:	54e1      	strb	r1, [r4, r3]
    8d56:	4643      	mov	r3, r8
    8d58:	1cb2      	adds	r2, r6, #2
    8d5a:	b2d2      	uxtb	r2, r2
    8d5c:	0a1b      	lsrs	r3, r3, #8
    8d5e:	54a3      	strb	r3, [r4, r2]
    8d60:	4b0e      	ldr	r3, [pc, #56]	; (8d9c <initiateRouteReq+0xa4>)
    8d62:	9102      	str	r1, [sp, #8]
    8d64:	9303      	str	r3, [sp, #12]
    8d66:	2302      	movs	r3, #2
    8d68:	9701      	str	r7, [sp, #4]
    8d6a:	9300      	str	r3, [sp, #0]
    8d6c:	2203      	movs	r2, #3
    8d6e:	0023      	movs	r3, r4
    8d70:	0031      	movs	r1, r6
    8d72:	0028      	movs	r0, r5
    8d74:	4c0a      	ldr	r4, [pc, #40]	; (8da0 <initiateRouteReq+0xa8>)
    8d76:	47a0      	blx	r4
    8d78:	b00f      	add	sp, #60	; 0x3c
    8d7a:	bc0c      	pop	{r2, r3}
    8d7c:	4690      	mov	r8, r2
    8d7e:	4699      	mov	r9, r3
    8d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d82:	2000      	movs	r0, #0
    8d84:	e7f8      	b.n	8d78 <initiateRouteReq+0x80>
    8d86:	46c0      	nop			; (mov r8, r8)
    8d88:	000033a1 	.word	0x000033a1
    8d8c:	20003084 	.word	0x20003084
    8d90:	00006695 	.word	0x00006695
    8d94:	000066c1 	.word	0x000066c1
    8d98:	00006c11 	.word	0x00006c11
    8d9c:	00008605 	.word	0x00008605
    8da0:	00006759 	.word	0x00006759

00008da4 <keyDetermineProcedure>:
    8da4:	4b06      	ldr	r3, [pc, #24]	; (8dc0 <keyDetermineProcedure+0x1c>)
    8da6:	781b      	ldrb	r3, [r3, #0]
    8da8:	3b06      	subs	r3, #6
    8daa:	2b01      	cmp	r3, #1
    8dac:	d902      	bls.n	8db4 <keyDetermineProcedure+0x10>
    8dae:	4b05      	ldr	r3, [pc, #20]	; (8dc4 <keyDetermineProcedure+0x20>)
    8db0:	6818      	ldr	r0, [r3, #0]
    8db2:	4770      	bx	lr
    8db4:	2808      	cmp	r0, #8
    8db6:	d0fa      	beq.n	8dae <keyDetermineProcedure+0xa>
    8db8:	4b02      	ldr	r3, [pc, #8]	; (8dc4 <keyDetermineProcedure+0x20>)
    8dba:	6818      	ldr	r0, [r3, #0]
    8dbc:	3010      	adds	r0, #16
    8dbe:	e7f8      	b.n	8db2 <keyDetermineProcedure+0xe>
    8dc0:	200003c0 	.word	0x200003c0
    8dc4:	20003040 	.word	0x20003040

00008dc8 <secureFrame>:
    8dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dca:	4657      	mov	r7, sl
    8dcc:	4645      	mov	r5, r8
    8dce:	46de      	mov	lr, fp
    8dd0:	464e      	mov	r6, r9
    8dd2:	b5e0      	push	{r5, r6, r7, lr}
    8dd4:	0005      	movs	r5, r0
    8dd6:	b0af      	sub	sp, #188	; 0xbc
    8dd8:	ac06      	add	r4, sp, #24
    8dda:	000e      	movs	r6, r1
    8ddc:	4690      	mov	r8, r2
    8dde:	469a      	mov	sl, r3
    8de0:	2210      	movs	r2, #16
    8de2:	2100      	movs	r1, #0
    8de4:	0020      	movs	r0, r4
    8de6:	4b35      	ldr	r3, [pc, #212]	; (8ebc <secureFrame+0xf4>)
    8de8:	4798      	blx	r3
    8dea:	7c2f      	ldrb	r7, [r5, #16]
    8dec:	2f07      	cmp	r7, #7
    8dee:	d80e      	bhi.n	8e0e <secureFrame+0x46>
    8df0:	2301      	movs	r3, #1
    8df2:	2288      	movs	r2, #136	; 0x88
    8df4:	40bb      	lsls	r3, r7
    8df6:	421a      	tst	r2, r3
    8df8:	d14e      	bne.n	8e98 <secureFrame+0xd0>
    8dfa:	3a44      	subs	r2, #68	; 0x44
    8dfc:	421a      	tst	r2, r3
    8dfe:	d14f      	bne.n	8ea0 <secureFrame+0xd8>
    8e00:	3a22      	subs	r2, #34	; 0x22
    8e02:	421a      	tst	r2, r3
    8e04:	d003      	beq.n	8e0e <secureFrame+0x46>
    8e06:	2304      	movs	r3, #4
    8e08:	9305      	str	r3, [sp, #20]
    8e0a:	469b      	mov	fp, r3
    8e0c:	e002      	b.n	8e14 <secureFrame+0x4c>
    8e0e:	2300      	movs	r3, #0
    8e10:	469b      	mov	fp, r3
    8e12:	9305      	str	r3, [sp, #20]
    8e14:	4b2a      	ldr	r3, [pc, #168]	; (8ec0 <secureFrame+0xf8>)
    8e16:	4d2b      	ldr	r5, [pc, #172]	; (8ec4 <secureFrame+0xfc>)
    8e18:	79da      	ldrb	r2, [r3, #7]
    8e1a:	4651      	mov	r1, sl
    8e1c:	7062      	strb	r2, [r4, #1]
    8e1e:	799a      	ldrb	r2, [r3, #6]
    8e20:	7367      	strb	r7, [r4, #13]
    8e22:	70a2      	strb	r2, [r4, #2]
    8e24:	795a      	ldrb	r2, [r3, #5]
    8e26:	a80a      	add	r0, sp, #40	; 0x28
    8e28:	70e2      	strb	r2, [r4, #3]
    8e2a:	791a      	ldrb	r2, [r3, #4]
    8e2c:	44b2      	add	sl, r6
    8e2e:	7122      	strb	r2, [r4, #4]
    8e30:	78da      	ldrb	r2, [r3, #3]
    8e32:	7162      	strb	r2, [r4, #5]
    8e34:	789a      	ldrb	r2, [r3, #2]
    8e36:	71a2      	strb	r2, [r4, #6]
    8e38:	785a      	ldrb	r2, [r3, #1]
    8e3a:	781b      	ldrb	r3, [r3, #0]
    8e3c:	71e2      	strb	r2, [r4, #7]
    8e3e:	7223      	strb	r3, [r4, #8]
    8e40:	78eb      	ldrb	r3, [r5, #3]
    8e42:	0032      	movs	r2, r6
    8e44:	7263      	strb	r3, [r4, #9]
    8e46:	78ab      	ldrb	r3, [r5, #2]
    8e48:	72a3      	strb	r3, [r4, #10]
    8e4a:	786b      	ldrb	r3, [r5, #1]
    8e4c:	72e3      	strb	r3, [r4, #11]
    8e4e:	782b      	ldrb	r3, [r5, #0]
    8e50:	7323      	strb	r3, [r4, #12]
    8e52:	4b1d      	ldr	r3, [pc, #116]	; (8ec8 <secureFrame+0x100>)
    8e54:	4699      	mov	r9, r3
    8e56:	4798      	blx	r3
    8e58:	ab0a      	add	r3, sp, #40	; 0x28
    8e5a:	469c      	mov	ip, r3
    8e5c:	44b4      	add	ip, r6
    8e5e:	4663      	mov	r3, ip
    8e60:	4642      	mov	r2, r8
    8e62:	4651      	mov	r1, sl
    8e64:	4660      	mov	r0, ip
    8e66:	9304      	str	r3, [sp, #16]
    8e68:	47c8      	blx	r9
    8e6a:	2300      	movs	r3, #0
    8e6c:	9302      	str	r3, [sp, #8]
    8e6e:	4643      	mov	r3, r8
    8e70:	0021      	movs	r1, r4
    8e72:	9300      	str	r3, [sp, #0]
    8e74:	9701      	str	r7, [sp, #4]
    8e76:	0033      	movs	r3, r6
    8e78:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8e7a:	a80a      	add	r0, sp, #40	; 0x28
    8e7c:	4c13      	ldr	r4, [pc, #76]	; (8ecc <secureFrame+0x104>)
    8e7e:	47a0      	blx	r4
    8e80:	2800      	cmp	r0, #0
    8e82:	d011      	beq.n	8ea8 <secureFrame+0xe0>
    8e84:	23ff      	movs	r3, #255	; 0xff
    8e86:	469b      	mov	fp, r3
    8e88:	4658      	mov	r0, fp
    8e8a:	b02f      	add	sp, #188	; 0xbc
    8e8c:	bc3c      	pop	{r2, r3, r4, r5}
    8e8e:	4690      	mov	r8, r2
    8e90:	4699      	mov	r9, r3
    8e92:	46a2      	mov	sl, r4
    8e94:	46ab      	mov	fp, r5
    8e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e98:	2310      	movs	r3, #16
    8e9a:	9305      	str	r3, [sp, #20]
    8e9c:	469b      	mov	fp, r3
    8e9e:	e7b9      	b.n	8e14 <secureFrame+0x4c>
    8ea0:	2308      	movs	r3, #8
    8ea2:	9305      	str	r3, [sp, #20]
    8ea4:	469b      	mov	fp, r3
    8ea6:	e7b5      	b.n	8e14 <secureFrame+0x4c>
    8ea8:	682b      	ldr	r3, [r5, #0]
    8eaa:	9904      	ldr	r1, [sp, #16]
    8eac:	3301      	adds	r3, #1
    8eae:	602b      	str	r3, [r5, #0]
    8eb0:	9b05      	ldr	r3, [sp, #20]
    8eb2:	4650      	mov	r0, sl
    8eb4:	4443      	add	r3, r8
    8eb6:	001a      	movs	r2, r3
    8eb8:	47c8      	blx	r9
    8eba:	e7e5      	b.n	8e88 <secureFrame+0xc0>
    8ebc:	00009341 	.word	0x00009341
    8ec0:	20000090 	.word	0x20000090
    8ec4:	200030cc 	.word	0x200030cc
    8ec8:	0000932f 	.word	0x0000932f
    8ecc:	00002f8d 	.word	0x00002f8d

00008ed0 <unsecureFrame>:
    8ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ed2:	46ce      	mov	lr, r9
    8ed4:	4647      	mov	r7, r8
    8ed6:	b580      	push	{r7, lr}
    8ed8:	b089      	sub	sp, #36	; 0x24
    8eda:	0007      	movs	r7, r0
    8edc:	ac04      	add	r4, sp, #16
    8ede:	000d      	movs	r5, r1
    8ee0:	4691      	mov	r9, r2
    8ee2:	001e      	movs	r6, r3
    8ee4:	2210      	movs	r2, #16
    8ee6:	4b26      	ldr	r3, [pc, #152]	; (8f80 <unsecureFrame+0xb0>)
    8ee8:	2100      	movs	r1, #0
    8eea:	0020      	movs	r0, r4
    8eec:	4798      	blx	r3
    8eee:	2200      	movs	r2, #0
    8ef0:	7c3b      	ldrb	r3, [r7, #16]
    8ef2:	4690      	mov	r8, r2
    8ef4:	2b07      	cmp	r3, #7
    8ef6:	d806      	bhi.n	8f06 <unsecureFrame+0x36>
    8ef8:	3201      	adds	r2, #1
    8efa:	2010      	movs	r0, #16
    8efc:	409a      	lsls	r2, r3
    8efe:	2188      	movs	r1, #136	; 0x88
    8f00:	4680      	mov	r8, r0
    8f02:	4211      	tst	r1, r2
    8f04:	d02f      	beq.n	8f66 <unsecureFrame+0x96>
    8f06:	79ea      	ldrb	r2, [r5, #7]
    8f08:	7363      	strb	r3, [r4, #13]
    8f0a:	7062      	strb	r2, [r4, #1]
    8f0c:	79aa      	ldrb	r2, [r5, #6]
    8f0e:	0021      	movs	r1, r4
    8f10:	70a2      	strb	r2, [r4, #2]
    8f12:	796a      	ldrb	r2, [r5, #5]
    8f14:	9810      	ldr	r0, [sp, #64]	; 0x40
    8f16:	70e2      	strb	r2, [r4, #3]
    8f18:	792a      	ldrb	r2, [r5, #4]
    8f1a:	7122      	strb	r2, [r4, #4]
    8f1c:	78ea      	ldrb	r2, [r5, #3]
    8f1e:	7162      	strb	r2, [r4, #5]
    8f20:	78aa      	ldrb	r2, [r5, #2]
    8f22:	71a2      	strb	r2, [r4, #6]
    8f24:	786a      	ldrb	r2, [r5, #1]
    8f26:	71e2      	strb	r2, [r4, #7]
    8f28:	782a      	ldrb	r2, [r5, #0]
    8f2a:	7222      	strb	r2, [r4, #8]
    8f2c:	7dfa      	ldrb	r2, [r7, #23]
    8f2e:	7262      	strb	r2, [r4, #9]
    8f30:	7dba      	ldrb	r2, [r7, #22]
    8f32:	72a2      	strb	r2, [r4, #10]
    8f34:	7d7a      	ldrb	r2, [r7, #21]
    8f36:	72e2      	strb	r2, [r4, #11]
    8f38:	7d3a      	ldrb	r2, [r7, #20]
    8f3a:	7322      	strb	r2, [r4, #12]
    8f3c:	9301      	str	r3, [sp, #4]
    8f3e:	4643      	mov	r3, r8
    8f40:	2201      	movs	r2, #1
    8f42:	1af6      	subs	r6, r6, r3
    8f44:	b2f6      	uxtb	r6, r6
    8f46:	9202      	str	r2, [sp, #8]
    8f48:	9600      	str	r6, [sp, #0]
    8f4a:	464b      	mov	r3, r9
    8f4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8f4e:	4c0d      	ldr	r4, [pc, #52]	; (8f84 <unsecureFrame+0xb4>)
    8f50:	47a0      	blx	r4
    8f52:	2800      	cmp	r0, #0
    8f54:	d001      	beq.n	8f5a <unsecureFrame+0x8a>
    8f56:	23ff      	movs	r3, #255	; 0xff
    8f58:	4698      	mov	r8, r3
    8f5a:	4640      	mov	r0, r8
    8f5c:	b009      	add	sp, #36	; 0x24
    8f5e:	bc0c      	pop	{r2, r3}
    8f60:	4690      	mov	r8, r2
    8f62:	4699      	mov	r9, r3
    8f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f66:	3808      	subs	r0, #8
    8f68:	3944      	subs	r1, #68	; 0x44
    8f6a:	4680      	mov	r8, r0
    8f6c:	4211      	tst	r1, r2
    8f6e:	d1ca      	bne.n	8f06 <unsecureFrame+0x36>
    8f70:	3922      	subs	r1, #34	; 0x22
    8f72:	400a      	ands	r2, r1
    8f74:	1e51      	subs	r1, r2, #1
    8f76:	418a      	sbcs	r2, r1
    8f78:	0092      	lsls	r2, r2, #2
    8f7a:	4690      	mov	r8, r2
    8f7c:	e7c3      	b.n	8f06 <unsecureFrame+0x36>
    8f7e:	46c0      	nop			; (mov r8, r8)
    8f80:	00009341 	.word	0x00009341
    8f84:	00002f8d 	.word	0x00002f8d

00008f88 <__udivsi3>:
    8f88:	2200      	movs	r2, #0
    8f8a:	0843      	lsrs	r3, r0, #1
    8f8c:	428b      	cmp	r3, r1
    8f8e:	d374      	bcc.n	907a <__udivsi3+0xf2>
    8f90:	0903      	lsrs	r3, r0, #4
    8f92:	428b      	cmp	r3, r1
    8f94:	d35f      	bcc.n	9056 <__udivsi3+0xce>
    8f96:	0a03      	lsrs	r3, r0, #8
    8f98:	428b      	cmp	r3, r1
    8f9a:	d344      	bcc.n	9026 <__udivsi3+0x9e>
    8f9c:	0b03      	lsrs	r3, r0, #12
    8f9e:	428b      	cmp	r3, r1
    8fa0:	d328      	bcc.n	8ff4 <__udivsi3+0x6c>
    8fa2:	0c03      	lsrs	r3, r0, #16
    8fa4:	428b      	cmp	r3, r1
    8fa6:	d30d      	bcc.n	8fc4 <__udivsi3+0x3c>
    8fa8:	22ff      	movs	r2, #255	; 0xff
    8faa:	0209      	lsls	r1, r1, #8
    8fac:	ba12      	rev	r2, r2
    8fae:	0c03      	lsrs	r3, r0, #16
    8fb0:	428b      	cmp	r3, r1
    8fb2:	d302      	bcc.n	8fba <__udivsi3+0x32>
    8fb4:	1212      	asrs	r2, r2, #8
    8fb6:	0209      	lsls	r1, r1, #8
    8fb8:	d065      	beq.n	9086 <__udivsi3+0xfe>
    8fba:	0b03      	lsrs	r3, r0, #12
    8fbc:	428b      	cmp	r3, r1
    8fbe:	d319      	bcc.n	8ff4 <__udivsi3+0x6c>
    8fc0:	e000      	b.n	8fc4 <__udivsi3+0x3c>
    8fc2:	0a09      	lsrs	r1, r1, #8
    8fc4:	0bc3      	lsrs	r3, r0, #15
    8fc6:	428b      	cmp	r3, r1
    8fc8:	d301      	bcc.n	8fce <__udivsi3+0x46>
    8fca:	03cb      	lsls	r3, r1, #15
    8fcc:	1ac0      	subs	r0, r0, r3
    8fce:	4152      	adcs	r2, r2
    8fd0:	0b83      	lsrs	r3, r0, #14
    8fd2:	428b      	cmp	r3, r1
    8fd4:	d301      	bcc.n	8fda <__udivsi3+0x52>
    8fd6:	038b      	lsls	r3, r1, #14
    8fd8:	1ac0      	subs	r0, r0, r3
    8fda:	4152      	adcs	r2, r2
    8fdc:	0b43      	lsrs	r3, r0, #13
    8fde:	428b      	cmp	r3, r1
    8fe0:	d301      	bcc.n	8fe6 <__udivsi3+0x5e>
    8fe2:	034b      	lsls	r3, r1, #13
    8fe4:	1ac0      	subs	r0, r0, r3
    8fe6:	4152      	adcs	r2, r2
    8fe8:	0b03      	lsrs	r3, r0, #12
    8fea:	428b      	cmp	r3, r1
    8fec:	d301      	bcc.n	8ff2 <__udivsi3+0x6a>
    8fee:	030b      	lsls	r3, r1, #12
    8ff0:	1ac0      	subs	r0, r0, r3
    8ff2:	4152      	adcs	r2, r2
    8ff4:	0ac3      	lsrs	r3, r0, #11
    8ff6:	428b      	cmp	r3, r1
    8ff8:	d301      	bcc.n	8ffe <__udivsi3+0x76>
    8ffa:	02cb      	lsls	r3, r1, #11
    8ffc:	1ac0      	subs	r0, r0, r3
    8ffe:	4152      	adcs	r2, r2
    9000:	0a83      	lsrs	r3, r0, #10
    9002:	428b      	cmp	r3, r1
    9004:	d301      	bcc.n	900a <__udivsi3+0x82>
    9006:	028b      	lsls	r3, r1, #10
    9008:	1ac0      	subs	r0, r0, r3
    900a:	4152      	adcs	r2, r2
    900c:	0a43      	lsrs	r3, r0, #9
    900e:	428b      	cmp	r3, r1
    9010:	d301      	bcc.n	9016 <__udivsi3+0x8e>
    9012:	024b      	lsls	r3, r1, #9
    9014:	1ac0      	subs	r0, r0, r3
    9016:	4152      	adcs	r2, r2
    9018:	0a03      	lsrs	r3, r0, #8
    901a:	428b      	cmp	r3, r1
    901c:	d301      	bcc.n	9022 <__udivsi3+0x9a>
    901e:	020b      	lsls	r3, r1, #8
    9020:	1ac0      	subs	r0, r0, r3
    9022:	4152      	adcs	r2, r2
    9024:	d2cd      	bcs.n	8fc2 <__udivsi3+0x3a>
    9026:	09c3      	lsrs	r3, r0, #7
    9028:	428b      	cmp	r3, r1
    902a:	d301      	bcc.n	9030 <__udivsi3+0xa8>
    902c:	01cb      	lsls	r3, r1, #7
    902e:	1ac0      	subs	r0, r0, r3
    9030:	4152      	adcs	r2, r2
    9032:	0983      	lsrs	r3, r0, #6
    9034:	428b      	cmp	r3, r1
    9036:	d301      	bcc.n	903c <__udivsi3+0xb4>
    9038:	018b      	lsls	r3, r1, #6
    903a:	1ac0      	subs	r0, r0, r3
    903c:	4152      	adcs	r2, r2
    903e:	0943      	lsrs	r3, r0, #5
    9040:	428b      	cmp	r3, r1
    9042:	d301      	bcc.n	9048 <__udivsi3+0xc0>
    9044:	014b      	lsls	r3, r1, #5
    9046:	1ac0      	subs	r0, r0, r3
    9048:	4152      	adcs	r2, r2
    904a:	0903      	lsrs	r3, r0, #4
    904c:	428b      	cmp	r3, r1
    904e:	d301      	bcc.n	9054 <__udivsi3+0xcc>
    9050:	010b      	lsls	r3, r1, #4
    9052:	1ac0      	subs	r0, r0, r3
    9054:	4152      	adcs	r2, r2
    9056:	08c3      	lsrs	r3, r0, #3
    9058:	428b      	cmp	r3, r1
    905a:	d301      	bcc.n	9060 <__udivsi3+0xd8>
    905c:	00cb      	lsls	r3, r1, #3
    905e:	1ac0      	subs	r0, r0, r3
    9060:	4152      	adcs	r2, r2
    9062:	0883      	lsrs	r3, r0, #2
    9064:	428b      	cmp	r3, r1
    9066:	d301      	bcc.n	906c <__udivsi3+0xe4>
    9068:	008b      	lsls	r3, r1, #2
    906a:	1ac0      	subs	r0, r0, r3
    906c:	4152      	adcs	r2, r2
    906e:	0843      	lsrs	r3, r0, #1
    9070:	428b      	cmp	r3, r1
    9072:	d301      	bcc.n	9078 <__udivsi3+0xf0>
    9074:	004b      	lsls	r3, r1, #1
    9076:	1ac0      	subs	r0, r0, r3
    9078:	4152      	adcs	r2, r2
    907a:	1a41      	subs	r1, r0, r1
    907c:	d200      	bcs.n	9080 <__udivsi3+0xf8>
    907e:	4601      	mov	r1, r0
    9080:	4152      	adcs	r2, r2
    9082:	4610      	mov	r0, r2
    9084:	4770      	bx	lr
    9086:	e7ff      	b.n	9088 <__udivsi3+0x100>
    9088:	b501      	push	{r0, lr}
    908a:	2000      	movs	r0, #0
    908c:	f000 f8f0 	bl	9270 <__aeabi_idiv0>
    9090:	bd02      	pop	{r1, pc}
    9092:	46c0      	nop			; (mov r8, r8)

00009094 <__aeabi_uidivmod>:
    9094:	2900      	cmp	r1, #0
    9096:	d0f7      	beq.n	9088 <__udivsi3+0x100>
    9098:	e776      	b.n	8f88 <__udivsi3>
    909a:	4770      	bx	lr

0000909c <__divsi3>:
    909c:	4603      	mov	r3, r0
    909e:	430b      	orrs	r3, r1
    90a0:	d47f      	bmi.n	91a2 <__divsi3+0x106>
    90a2:	2200      	movs	r2, #0
    90a4:	0843      	lsrs	r3, r0, #1
    90a6:	428b      	cmp	r3, r1
    90a8:	d374      	bcc.n	9194 <__divsi3+0xf8>
    90aa:	0903      	lsrs	r3, r0, #4
    90ac:	428b      	cmp	r3, r1
    90ae:	d35f      	bcc.n	9170 <__divsi3+0xd4>
    90b0:	0a03      	lsrs	r3, r0, #8
    90b2:	428b      	cmp	r3, r1
    90b4:	d344      	bcc.n	9140 <__divsi3+0xa4>
    90b6:	0b03      	lsrs	r3, r0, #12
    90b8:	428b      	cmp	r3, r1
    90ba:	d328      	bcc.n	910e <__divsi3+0x72>
    90bc:	0c03      	lsrs	r3, r0, #16
    90be:	428b      	cmp	r3, r1
    90c0:	d30d      	bcc.n	90de <__divsi3+0x42>
    90c2:	22ff      	movs	r2, #255	; 0xff
    90c4:	0209      	lsls	r1, r1, #8
    90c6:	ba12      	rev	r2, r2
    90c8:	0c03      	lsrs	r3, r0, #16
    90ca:	428b      	cmp	r3, r1
    90cc:	d302      	bcc.n	90d4 <__divsi3+0x38>
    90ce:	1212      	asrs	r2, r2, #8
    90d0:	0209      	lsls	r1, r1, #8
    90d2:	d065      	beq.n	91a0 <__divsi3+0x104>
    90d4:	0b03      	lsrs	r3, r0, #12
    90d6:	428b      	cmp	r3, r1
    90d8:	d319      	bcc.n	910e <__divsi3+0x72>
    90da:	e000      	b.n	90de <__divsi3+0x42>
    90dc:	0a09      	lsrs	r1, r1, #8
    90de:	0bc3      	lsrs	r3, r0, #15
    90e0:	428b      	cmp	r3, r1
    90e2:	d301      	bcc.n	90e8 <__divsi3+0x4c>
    90e4:	03cb      	lsls	r3, r1, #15
    90e6:	1ac0      	subs	r0, r0, r3
    90e8:	4152      	adcs	r2, r2
    90ea:	0b83      	lsrs	r3, r0, #14
    90ec:	428b      	cmp	r3, r1
    90ee:	d301      	bcc.n	90f4 <__divsi3+0x58>
    90f0:	038b      	lsls	r3, r1, #14
    90f2:	1ac0      	subs	r0, r0, r3
    90f4:	4152      	adcs	r2, r2
    90f6:	0b43      	lsrs	r3, r0, #13
    90f8:	428b      	cmp	r3, r1
    90fa:	d301      	bcc.n	9100 <__divsi3+0x64>
    90fc:	034b      	lsls	r3, r1, #13
    90fe:	1ac0      	subs	r0, r0, r3
    9100:	4152      	adcs	r2, r2
    9102:	0b03      	lsrs	r3, r0, #12
    9104:	428b      	cmp	r3, r1
    9106:	d301      	bcc.n	910c <__divsi3+0x70>
    9108:	030b      	lsls	r3, r1, #12
    910a:	1ac0      	subs	r0, r0, r3
    910c:	4152      	adcs	r2, r2
    910e:	0ac3      	lsrs	r3, r0, #11
    9110:	428b      	cmp	r3, r1
    9112:	d301      	bcc.n	9118 <__divsi3+0x7c>
    9114:	02cb      	lsls	r3, r1, #11
    9116:	1ac0      	subs	r0, r0, r3
    9118:	4152      	adcs	r2, r2
    911a:	0a83      	lsrs	r3, r0, #10
    911c:	428b      	cmp	r3, r1
    911e:	d301      	bcc.n	9124 <__divsi3+0x88>
    9120:	028b      	lsls	r3, r1, #10
    9122:	1ac0      	subs	r0, r0, r3
    9124:	4152      	adcs	r2, r2
    9126:	0a43      	lsrs	r3, r0, #9
    9128:	428b      	cmp	r3, r1
    912a:	d301      	bcc.n	9130 <__divsi3+0x94>
    912c:	024b      	lsls	r3, r1, #9
    912e:	1ac0      	subs	r0, r0, r3
    9130:	4152      	adcs	r2, r2
    9132:	0a03      	lsrs	r3, r0, #8
    9134:	428b      	cmp	r3, r1
    9136:	d301      	bcc.n	913c <__divsi3+0xa0>
    9138:	020b      	lsls	r3, r1, #8
    913a:	1ac0      	subs	r0, r0, r3
    913c:	4152      	adcs	r2, r2
    913e:	d2cd      	bcs.n	90dc <__divsi3+0x40>
    9140:	09c3      	lsrs	r3, r0, #7
    9142:	428b      	cmp	r3, r1
    9144:	d301      	bcc.n	914a <__divsi3+0xae>
    9146:	01cb      	lsls	r3, r1, #7
    9148:	1ac0      	subs	r0, r0, r3
    914a:	4152      	adcs	r2, r2
    914c:	0983      	lsrs	r3, r0, #6
    914e:	428b      	cmp	r3, r1
    9150:	d301      	bcc.n	9156 <__divsi3+0xba>
    9152:	018b      	lsls	r3, r1, #6
    9154:	1ac0      	subs	r0, r0, r3
    9156:	4152      	adcs	r2, r2
    9158:	0943      	lsrs	r3, r0, #5
    915a:	428b      	cmp	r3, r1
    915c:	d301      	bcc.n	9162 <__divsi3+0xc6>
    915e:	014b      	lsls	r3, r1, #5
    9160:	1ac0      	subs	r0, r0, r3
    9162:	4152      	adcs	r2, r2
    9164:	0903      	lsrs	r3, r0, #4
    9166:	428b      	cmp	r3, r1
    9168:	d301      	bcc.n	916e <__divsi3+0xd2>
    916a:	010b      	lsls	r3, r1, #4
    916c:	1ac0      	subs	r0, r0, r3
    916e:	4152      	adcs	r2, r2
    9170:	08c3      	lsrs	r3, r0, #3
    9172:	428b      	cmp	r3, r1
    9174:	d301      	bcc.n	917a <__divsi3+0xde>
    9176:	00cb      	lsls	r3, r1, #3
    9178:	1ac0      	subs	r0, r0, r3
    917a:	4152      	adcs	r2, r2
    917c:	0883      	lsrs	r3, r0, #2
    917e:	428b      	cmp	r3, r1
    9180:	d301      	bcc.n	9186 <__divsi3+0xea>
    9182:	008b      	lsls	r3, r1, #2
    9184:	1ac0      	subs	r0, r0, r3
    9186:	4152      	adcs	r2, r2
    9188:	0843      	lsrs	r3, r0, #1
    918a:	428b      	cmp	r3, r1
    918c:	d301      	bcc.n	9192 <__divsi3+0xf6>
    918e:	004b      	lsls	r3, r1, #1
    9190:	1ac0      	subs	r0, r0, r3
    9192:	4152      	adcs	r2, r2
    9194:	1a41      	subs	r1, r0, r1
    9196:	d200      	bcs.n	919a <__divsi3+0xfe>
    9198:	4601      	mov	r1, r0
    919a:	4152      	adcs	r2, r2
    919c:	4610      	mov	r0, r2
    919e:	4770      	bx	lr
    91a0:	e05d      	b.n	925e <__divsi3+0x1c2>
    91a2:	0fca      	lsrs	r2, r1, #31
    91a4:	d000      	beq.n	91a8 <__divsi3+0x10c>
    91a6:	4249      	negs	r1, r1
    91a8:	1003      	asrs	r3, r0, #32
    91aa:	d300      	bcc.n	91ae <__divsi3+0x112>
    91ac:	4240      	negs	r0, r0
    91ae:	4053      	eors	r3, r2
    91b0:	2200      	movs	r2, #0
    91b2:	469c      	mov	ip, r3
    91b4:	0903      	lsrs	r3, r0, #4
    91b6:	428b      	cmp	r3, r1
    91b8:	d32d      	bcc.n	9216 <__divsi3+0x17a>
    91ba:	0a03      	lsrs	r3, r0, #8
    91bc:	428b      	cmp	r3, r1
    91be:	d312      	bcc.n	91e6 <__divsi3+0x14a>
    91c0:	22fc      	movs	r2, #252	; 0xfc
    91c2:	0189      	lsls	r1, r1, #6
    91c4:	ba12      	rev	r2, r2
    91c6:	0a03      	lsrs	r3, r0, #8
    91c8:	428b      	cmp	r3, r1
    91ca:	d30c      	bcc.n	91e6 <__divsi3+0x14a>
    91cc:	0189      	lsls	r1, r1, #6
    91ce:	1192      	asrs	r2, r2, #6
    91d0:	428b      	cmp	r3, r1
    91d2:	d308      	bcc.n	91e6 <__divsi3+0x14a>
    91d4:	0189      	lsls	r1, r1, #6
    91d6:	1192      	asrs	r2, r2, #6
    91d8:	428b      	cmp	r3, r1
    91da:	d304      	bcc.n	91e6 <__divsi3+0x14a>
    91dc:	0189      	lsls	r1, r1, #6
    91de:	d03a      	beq.n	9256 <__divsi3+0x1ba>
    91e0:	1192      	asrs	r2, r2, #6
    91e2:	e000      	b.n	91e6 <__divsi3+0x14a>
    91e4:	0989      	lsrs	r1, r1, #6
    91e6:	09c3      	lsrs	r3, r0, #7
    91e8:	428b      	cmp	r3, r1
    91ea:	d301      	bcc.n	91f0 <__divsi3+0x154>
    91ec:	01cb      	lsls	r3, r1, #7
    91ee:	1ac0      	subs	r0, r0, r3
    91f0:	4152      	adcs	r2, r2
    91f2:	0983      	lsrs	r3, r0, #6
    91f4:	428b      	cmp	r3, r1
    91f6:	d301      	bcc.n	91fc <__divsi3+0x160>
    91f8:	018b      	lsls	r3, r1, #6
    91fa:	1ac0      	subs	r0, r0, r3
    91fc:	4152      	adcs	r2, r2
    91fe:	0943      	lsrs	r3, r0, #5
    9200:	428b      	cmp	r3, r1
    9202:	d301      	bcc.n	9208 <__divsi3+0x16c>
    9204:	014b      	lsls	r3, r1, #5
    9206:	1ac0      	subs	r0, r0, r3
    9208:	4152      	adcs	r2, r2
    920a:	0903      	lsrs	r3, r0, #4
    920c:	428b      	cmp	r3, r1
    920e:	d301      	bcc.n	9214 <__divsi3+0x178>
    9210:	010b      	lsls	r3, r1, #4
    9212:	1ac0      	subs	r0, r0, r3
    9214:	4152      	adcs	r2, r2
    9216:	08c3      	lsrs	r3, r0, #3
    9218:	428b      	cmp	r3, r1
    921a:	d301      	bcc.n	9220 <__divsi3+0x184>
    921c:	00cb      	lsls	r3, r1, #3
    921e:	1ac0      	subs	r0, r0, r3
    9220:	4152      	adcs	r2, r2
    9222:	0883      	lsrs	r3, r0, #2
    9224:	428b      	cmp	r3, r1
    9226:	d301      	bcc.n	922c <__divsi3+0x190>
    9228:	008b      	lsls	r3, r1, #2
    922a:	1ac0      	subs	r0, r0, r3
    922c:	4152      	adcs	r2, r2
    922e:	d2d9      	bcs.n	91e4 <__divsi3+0x148>
    9230:	0843      	lsrs	r3, r0, #1
    9232:	428b      	cmp	r3, r1
    9234:	d301      	bcc.n	923a <__divsi3+0x19e>
    9236:	004b      	lsls	r3, r1, #1
    9238:	1ac0      	subs	r0, r0, r3
    923a:	4152      	adcs	r2, r2
    923c:	1a41      	subs	r1, r0, r1
    923e:	d200      	bcs.n	9242 <__divsi3+0x1a6>
    9240:	4601      	mov	r1, r0
    9242:	4663      	mov	r3, ip
    9244:	4152      	adcs	r2, r2
    9246:	105b      	asrs	r3, r3, #1
    9248:	4610      	mov	r0, r2
    924a:	d301      	bcc.n	9250 <__divsi3+0x1b4>
    924c:	4240      	negs	r0, r0
    924e:	2b00      	cmp	r3, #0
    9250:	d500      	bpl.n	9254 <__divsi3+0x1b8>
    9252:	4249      	negs	r1, r1
    9254:	4770      	bx	lr
    9256:	4663      	mov	r3, ip
    9258:	105b      	asrs	r3, r3, #1
    925a:	d300      	bcc.n	925e <__divsi3+0x1c2>
    925c:	4240      	negs	r0, r0
    925e:	b501      	push	{r0, lr}
    9260:	2000      	movs	r0, #0
    9262:	f000 f805 	bl	9270 <__aeabi_idiv0>
    9266:	bd02      	pop	{r1, pc}

00009268 <__aeabi_idivmod>:
    9268:	2900      	cmp	r1, #0
    926a:	d0f8      	beq.n	925e <__divsi3+0x1c2>
    926c:	e716      	b.n	909c <__divsi3>
    926e:	4770      	bx	lr

00009270 <__aeabi_idiv0>:
    9270:	4770      	bx	lr
    9272:	46c0      	nop			; (mov r8, r8)

00009274 <__aeabi_lmul>:
    9274:	b5f0      	push	{r4, r5, r6, r7, lr}
    9276:	46ce      	mov	lr, r9
    9278:	4647      	mov	r7, r8
    927a:	0415      	lsls	r5, r2, #16
    927c:	0c2d      	lsrs	r5, r5, #16
    927e:	002e      	movs	r6, r5
    9280:	b580      	push	{r7, lr}
    9282:	0407      	lsls	r7, r0, #16
    9284:	0c14      	lsrs	r4, r2, #16
    9286:	0c3f      	lsrs	r7, r7, #16
    9288:	4699      	mov	r9, r3
    928a:	0c03      	lsrs	r3, r0, #16
    928c:	437e      	muls	r6, r7
    928e:	435d      	muls	r5, r3
    9290:	4367      	muls	r7, r4
    9292:	4363      	muls	r3, r4
    9294:	197f      	adds	r7, r7, r5
    9296:	0c34      	lsrs	r4, r6, #16
    9298:	19e4      	adds	r4, r4, r7
    929a:	469c      	mov	ip, r3
    929c:	42a5      	cmp	r5, r4
    929e:	d903      	bls.n	92a8 <__aeabi_lmul+0x34>
    92a0:	2380      	movs	r3, #128	; 0x80
    92a2:	025b      	lsls	r3, r3, #9
    92a4:	4698      	mov	r8, r3
    92a6:	44c4      	add	ip, r8
    92a8:	464b      	mov	r3, r9
    92aa:	4351      	muls	r1, r2
    92ac:	4343      	muls	r3, r0
    92ae:	0436      	lsls	r6, r6, #16
    92b0:	0c36      	lsrs	r6, r6, #16
    92b2:	0c25      	lsrs	r5, r4, #16
    92b4:	0424      	lsls	r4, r4, #16
    92b6:	4465      	add	r5, ip
    92b8:	19a4      	adds	r4, r4, r6
    92ba:	1859      	adds	r1, r3, r1
    92bc:	1949      	adds	r1, r1, r5
    92be:	0020      	movs	r0, r4
    92c0:	bc0c      	pop	{r2, r3}
    92c2:	4690      	mov	r8, r2
    92c4:	4699      	mov	r9, r3
    92c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000092c8 <__libc_init_array>:
    92c8:	b570      	push	{r4, r5, r6, lr}
    92ca:	2600      	movs	r6, #0
    92cc:	4d0c      	ldr	r5, [pc, #48]	; (9300 <__libc_init_array+0x38>)
    92ce:	4c0d      	ldr	r4, [pc, #52]	; (9304 <__libc_init_array+0x3c>)
    92d0:	1b64      	subs	r4, r4, r5
    92d2:	10a4      	asrs	r4, r4, #2
    92d4:	42a6      	cmp	r6, r4
    92d6:	d109      	bne.n	92ec <__libc_init_array+0x24>
    92d8:	2600      	movs	r6, #0
    92da:	f001 faed 	bl	a8b8 <_init>
    92de:	4d0a      	ldr	r5, [pc, #40]	; (9308 <__libc_init_array+0x40>)
    92e0:	4c0a      	ldr	r4, [pc, #40]	; (930c <__libc_init_array+0x44>)
    92e2:	1b64      	subs	r4, r4, r5
    92e4:	10a4      	asrs	r4, r4, #2
    92e6:	42a6      	cmp	r6, r4
    92e8:	d105      	bne.n	92f6 <__libc_init_array+0x2e>
    92ea:	bd70      	pop	{r4, r5, r6, pc}
    92ec:	00b3      	lsls	r3, r6, #2
    92ee:	58eb      	ldr	r3, [r5, r3]
    92f0:	4798      	blx	r3
    92f2:	3601      	adds	r6, #1
    92f4:	e7ee      	b.n	92d4 <__libc_init_array+0xc>
    92f6:	00b3      	lsls	r3, r6, #2
    92f8:	58eb      	ldr	r3, [r5, r3]
    92fa:	4798      	blx	r3
    92fc:	3601      	adds	r6, #1
    92fe:	e7f2      	b.n	92e6 <__libc_init_array+0x1e>
    9300:	0000a8c4 	.word	0x0000a8c4
    9304:	0000a8c4 	.word	0x0000a8c4
    9308:	0000a8c4 	.word	0x0000a8c4
    930c:	0000a8c8 	.word	0x0000a8c8

00009310 <memcmp>:
    9310:	b530      	push	{r4, r5, lr}
    9312:	2400      	movs	r4, #0
    9314:	42a2      	cmp	r2, r4
    9316:	d101      	bne.n	931c <memcmp+0xc>
    9318:	2000      	movs	r0, #0
    931a:	e005      	b.n	9328 <memcmp+0x18>
    931c:	5d03      	ldrb	r3, [r0, r4]
    931e:	1c65      	adds	r5, r4, #1
    9320:	5d0c      	ldrb	r4, [r1, r4]
    9322:	42a3      	cmp	r3, r4
    9324:	d001      	beq.n	932a <memcmp+0x1a>
    9326:	1b18      	subs	r0, r3, r4
    9328:	bd30      	pop	{r4, r5, pc}
    932a:	002c      	movs	r4, r5
    932c:	e7f2      	b.n	9314 <memcmp+0x4>

0000932e <memcpy>:
    932e:	2300      	movs	r3, #0
    9330:	b510      	push	{r4, lr}
    9332:	429a      	cmp	r2, r3
    9334:	d100      	bne.n	9338 <memcpy+0xa>
    9336:	bd10      	pop	{r4, pc}
    9338:	5ccc      	ldrb	r4, [r1, r3]
    933a:	54c4      	strb	r4, [r0, r3]
    933c:	3301      	adds	r3, #1
    933e:	e7f8      	b.n	9332 <memcpy+0x4>

00009340 <memset>:
    9340:	0003      	movs	r3, r0
    9342:	1882      	adds	r2, r0, r2
    9344:	4293      	cmp	r3, r2
    9346:	d100      	bne.n	934a <memset+0xa>
    9348:	4770      	bx	lr
    934a:	7019      	strb	r1, [r3, #0]
    934c:	3301      	adds	r3, #1
    934e:	e7f9      	b.n	9344 <memset+0x4>

00009350 <iprintf>:
    9350:	b40f      	push	{r0, r1, r2, r3}
    9352:	4b0b      	ldr	r3, [pc, #44]	; (9380 <iprintf+0x30>)
    9354:	b513      	push	{r0, r1, r4, lr}
    9356:	681c      	ldr	r4, [r3, #0]
    9358:	2c00      	cmp	r4, #0
    935a:	d005      	beq.n	9368 <iprintf+0x18>
    935c:	69a3      	ldr	r3, [r4, #24]
    935e:	2b00      	cmp	r3, #0
    9360:	d102      	bne.n	9368 <iprintf+0x18>
    9362:	0020      	movs	r0, r4
    9364:	f000 fae6 	bl	9934 <__sinit>
    9368:	ab05      	add	r3, sp, #20
    936a:	9a04      	ldr	r2, [sp, #16]
    936c:	68a1      	ldr	r1, [r4, #8]
    936e:	0020      	movs	r0, r4
    9370:	9301      	str	r3, [sp, #4]
    9372:	f000 fe21 	bl	9fb8 <_vfiprintf_r>
    9376:	bc16      	pop	{r1, r2, r4}
    9378:	bc08      	pop	{r3}
    937a:	b004      	add	sp, #16
    937c:	4718      	bx	r3
    937e:	46c0      	nop			; (mov r8, r8)
    9380:	20000098 	.word	0x20000098

00009384 <rand>:
    9384:	4b15      	ldr	r3, [pc, #84]	; (93dc <rand+0x58>)
    9386:	b510      	push	{r4, lr}
    9388:	681c      	ldr	r4, [r3, #0]
    938a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    938c:	2b00      	cmp	r3, #0
    938e:	d115      	bne.n	93bc <rand+0x38>
    9390:	2018      	movs	r0, #24
    9392:	f000 fbd1 	bl	9b38 <malloc>
    9396:	4b12      	ldr	r3, [pc, #72]	; (93e0 <rand+0x5c>)
    9398:	63a0      	str	r0, [r4, #56]	; 0x38
    939a:	8003      	strh	r3, [r0, #0]
    939c:	4b11      	ldr	r3, [pc, #68]	; (93e4 <rand+0x60>)
    939e:	2201      	movs	r2, #1
    93a0:	8043      	strh	r3, [r0, #2]
    93a2:	4b11      	ldr	r3, [pc, #68]	; (93e8 <rand+0x64>)
    93a4:	8083      	strh	r3, [r0, #4]
    93a6:	4b11      	ldr	r3, [pc, #68]	; (93ec <rand+0x68>)
    93a8:	80c3      	strh	r3, [r0, #6]
    93aa:	4b11      	ldr	r3, [pc, #68]	; (93f0 <rand+0x6c>)
    93ac:	8103      	strh	r3, [r0, #8]
    93ae:	2305      	movs	r3, #5
    93b0:	8143      	strh	r3, [r0, #10]
    93b2:	3306      	adds	r3, #6
    93b4:	8183      	strh	r3, [r0, #12]
    93b6:	2300      	movs	r3, #0
    93b8:	6102      	str	r2, [r0, #16]
    93ba:	6143      	str	r3, [r0, #20]
    93bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    93be:	4a0d      	ldr	r2, [pc, #52]	; (93f4 <rand+0x70>)
    93c0:	6920      	ldr	r0, [r4, #16]
    93c2:	6961      	ldr	r1, [r4, #20]
    93c4:	4b0c      	ldr	r3, [pc, #48]	; (93f8 <rand+0x74>)
    93c6:	f7ff ff55 	bl	9274 <__aeabi_lmul>
    93ca:	2201      	movs	r2, #1
    93cc:	2300      	movs	r3, #0
    93ce:	1880      	adds	r0, r0, r2
    93d0:	4159      	adcs	r1, r3
    93d2:	6120      	str	r0, [r4, #16]
    93d4:	6161      	str	r1, [r4, #20]
    93d6:	0048      	lsls	r0, r1, #1
    93d8:	0840      	lsrs	r0, r0, #1
    93da:	bd10      	pop	{r4, pc}
    93dc:	20000098 	.word	0x20000098
    93e0:	0000330e 	.word	0x0000330e
    93e4:	ffffabcd 	.word	0xffffabcd
    93e8:	00001234 	.word	0x00001234
    93ec:	ffffe66d 	.word	0xffffe66d
    93f0:	ffffdeec 	.word	0xffffdeec
    93f4:	4c957f2d 	.word	0x4c957f2d
    93f8:	5851f42d 	.word	0x5851f42d

000093fc <setbuf>:
    93fc:	424a      	negs	r2, r1
    93fe:	414a      	adcs	r2, r1
    9400:	2380      	movs	r3, #128	; 0x80
    9402:	b510      	push	{r4, lr}
    9404:	0052      	lsls	r2, r2, #1
    9406:	00db      	lsls	r3, r3, #3
    9408:	f000 f802 	bl	9410 <setvbuf>
    940c:	bd10      	pop	{r4, pc}
	...

00009410 <setvbuf>:
    9410:	b5f0      	push	{r4, r5, r6, r7, lr}
    9412:	001d      	movs	r5, r3
    9414:	4b4f      	ldr	r3, [pc, #316]	; (9554 <setvbuf+0x144>)
    9416:	b085      	sub	sp, #20
    9418:	681e      	ldr	r6, [r3, #0]
    941a:	0004      	movs	r4, r0
    941c:	000f      	movs	r7, r1
    941e:	9200      	str	r2, [sp, #0]
    9420:	2e00      	cmp	r6, #0
    9422:	d005      	beq.n	9430 <setvbuf+0x20>
    9424:	69b3      	ldr	r3, [r6, #24]
    9426:	2b00      	cmp	r3, #0
    9428:	d102      	bne.n	9430 <setvbuf+0x20>
    942a:	0030      	movs	r0, r6
    942c:	f000 fa82 	bl	9934 <__sinit>
    9430:	4b49      	ldr	r3, [pc, #292]	; (9558 <setvbuf+0x148>)
    9432:	429c      	cmp	r4, r3
    9434:	d150      	bne.n	94d8 <setvbuf+0xc8>
    9436:	6874      	ldr	r4, [r6, #4]
    9438:	9b00      	ldr	r3, [sp, #0]
    943a:	2b02      	cmp	r3, #2
    943c:	d005      	beq.n	944a <setvbuf+0x3a>
    943e:	2b01      	cmp	r3, #1
    9440:	d900      	bls.n	9444 <setvbuf+0x34>
    9442:	e084      	b.n	954e <setvbuf+0x13e>
    9444:	2d00      	cmp	r5, #0
    9446:	da00      	bge.n	944a <setvbuf+0x3a>
    9448:	e081      	b.n	954e <setvbuf+0x13e>
    944a:	0021      	movs	r1, r4
    944c:	0030      	movs	r0, r6
    944e:	f000 fa03 	bl	9858 <_fflush_r>
    9452:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9454:	2900      	cmp	r1, #0
    9456:	d008      	beq.n	946a <setvbuf+0x5a>
    9458:	0023      	movs	r3, r4
    945a:	3344      	adds	r3, #68	; 0x44
    945c:	4299      	cmp	r1, r3
    945e:	d002      	beq.n	9466 <setvbuf+0x56>
    9460:	0030      	movs	r0, r6
    9462:	f000 fb73 	bl	9b4c <_free_r>
    9466:	2300      	movs	r3, #0
    9468:	6363      	str	r3, [r4, #52]	; 0x34
    946a:	2300      	movs	r3, #0
    946c:	61a3      	str	r3, [r4, #24]
    946e:	6063      	str	r3, [r4, #4]
    9470:	89a3      	ldrh	r3, [r4, #12]
    9472:	061b      	lsls	r3, r3, #24
    9474:	d503      	bpl.n	947e <setvbuf+0x6e>
    9476:	6921      	ldr	r1, [r4, #16]
    9478:	0030      	movs	r0, r6
    947a:	f000 fb67 	bl	9b4c <_free_r>
    947e:	89a3      	ldrh	r3, [r4, #12]
    9480:	4a36      	ldr	r2, [pc, #216]	; (955c <setvbuf+0x14c>)
    9482:	4013      	ands	r3, r2
    9484:	81a3      	strh	r3, [r4, #12]
    9486:	9b00      	ldr	r3, [sp, #0]
    9488:	2b02      	cmp	r3, #2
    948a:	d05a      	beq.n	9542 <setvbuf+0x132>
    948c:	ab03      	add	r3, sp, #12
    948e:	aa02      	add	r2, sp, #8
    9490:	0021      	movs	r1, r4
    9492:	0030      	movs	r0, r6
    9494:	f000 fae4 	bl	9a60 <__swhatbuf_r>
    9498:	89a3      	ldrh	r3, [r4, #12]
    949a:	4318      	orrs	r0, r3
    949c:	81a0      	strh	r0, [r4, #12]
    949e:	2d00      	cmp	r5, #0
    94a0:	d124      	bne.n	94ec <setvbuf+0xdc>
    94a2:	9d02      	ldr	r5, [sp, #8]
    94a4:	0028      	movs	r0, r5
    94a6:	f000 fb47 	bl	9b38 <malloc>
    94aa:	9501      	str	r5, [sp, #4]
    94ac:	1e07      	subs	r7, r0, #0
    94ae:	d142      	bne.n	9536 <setvbuf+0x126>
    94b0:	9b02      	ldr	r3, [sp, #8]
    94b2:	9301      	str	r3, [sp, #4]
    94b4:	42ab      	cmp	r3, r5
    94b6:	d139      	bne.n	952c <setvbuf+0x11c>
    94b8:	2001      	movs	r0, #1
    94ba:	4240      	negs	r0, r0
    94bc:	2302      	movs	r3, #2
    94be:	89a2      	ldrh	r2, [r4, #12]
    94c0:	4313      	orrs	r3, r2
    94c2:	81a3      	strh	r3, [r4, #12]
    94c4:	2300      	movs	r3, #0
    94c6:	60a3      	str	r3, [r4, #8]
    94c8:	0023      	movs	r3, r4
    94ca:	3347      	adds	r3, #71	; 0x47
    94cc:	6023      	str	r3, [r4, #0]
    94ce:	6123      	str	r3, [r4, #16]
    94d0:	2301      	movs	r3, #1
    94d2:	6163      	str	r3, [r4, #20]
    94d4:	b005      	add	sp, #20
    94d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94d8:	4b21      	ldr	r3, [pc, #132]	; (9560 <setvbuf+0x150>)
    94da:	429c      	cmp	r4, r3
    94dc:	d101      	bne.n	94e2 <setvbuf+0xd2>
    94de:	68b4      	ldr	r4, [r6, #8]
    94e0:	e7aa      	b.n	9438 <setvbuf+0x28>
    94e2:	4b20      	ldr	r3, [pc, #128]	; (9564 <setvbuf+0x154>)
    94e4:	429c      	cmp	r4, r3
    94e6:	d1a7      	bne.n	9438 <setvbuf+0x28>
    94e8:	68f4      	ldr	r4, [r6, #12]
    94ea:	e7a5      	b.n	9438 <setvbuf+0x28>
    94ec:	2f00      	cmp	r7, #0
    94ee:	d0d9      	beq.n	94a4 <setvbuf+0x94>
    94f0:	69b3      	ldr	r3, [r6, #24]
    94f2:	2b00      	cmp	r3, #0
    94f4:	d102      	bne.n	94fc <setvbuf+0xec>
    94f6:	0030      	movs	r0, r6
    94f8:	f000 fa1c 	bl	9934 <__sinit>
    94fc:	9b00      	ldr	r3, [sp, #0]
    94fe:	2b01      	cmp	r3, #1
    9500:	d103      	bne.n	950a <setvbuf+0xfa>
    9502:	89a3      	ldrh	r3, [r4, #12]
    9504:	9a00      	ldr	r2, [sp, #0]
    9506:	431a      	orrs	r2, r3
    9508:	81a2      	strh	r2, [r4, #12]
    950a:	2008      	movs	r0, #8
    950c:	89a3      	ldrh	r3, [r4, #12]
    950e:	6027      	str	r7, [r4, #0]
    9510:	6127      	str	r7, [r4, #16]
    9512:	6165      	str	r5, [r4, #20]
    9514:	4018      	ands	r0, r3
    9516:	d018      	beq.n	954a <setvbuf+0x13a>
    9518:	2001      	movs	r0, #1
    951a:	4018      	ands	r0, r3
    951c:	2300      	movs	r3, #0
    951e:	4298      	cmp	r0, r3
    9520:	d011      	beq.n	9546 <setvbuf+0x136>
    9522:	426d      	negs	r5, r5
    9524:	60a3      	str	r3, [r4, #8]
    9526:	61a5      	str	r5, [r4, #24]
    9528:	0018      	movs	r0, r3
    952a:	e7d3      	b.n	94d4 <setvbuf+0xc4>
    952c:	9801      	ldr	r0, [sp, #4]
    952e:	f000 fb03 	bl	9b38 <malloc>
    9532:	1e07      	subs	r7, r0, #0
    9534:	d0c0      	beq.n	94b8 <setvbuf+0xa8>
    9536:	2380      	movs	r3, #128	; 0x80
    9538:	89a2      	ldrh	r2, [r4, #12]
    953a:	9d01      	ldr	r5, [sp, #4]
    953c:	4313      	orrs	r3, r2
    953e:	81a3      	strh	r3, [r4, #12]
    9540:	e7d6      	b.n	94f0 <setvbuf+0xe0>
    9542:	2000      	movs	r0, #0
    9544:	e7ba      	b.n	94bc <setvbuf+0xac>
    9546:	60a5      	str	r5, [r4, #8]
    9548:	e7c4      	b.n	94d4 <setvbuf+0xc4>
    954a:	60a0      	str	r0, [r4, #8]
    954c:	e7c2      	b.n	94d4 <setvbuf+0xc4>
    954e:	2001      	movs	r0, #1
    9550:	4240      	negs	r0, r0
    9552:	e7bf      	b.n	94d4 <setvbuf+0xc4>
    9554:	20000098 	.word	0x20000098
    9558:	0000a844 	.word	0x0000a844
    955c:	fffff35c 	.word	0xfffff35c
    9560:	0000a864 	.word	0x0000a864
    9564:	0000a824 	.word	0x0000a824

00009568 <siprintf>:
    9568:	b40e      	push	{r1, r2, r3}
    956a:	b510      	push	{r4, lr}
    956c:	b09d      	sub	sp, #116	; 0x74
    956e:	a902      	add	r1, sp, #8
    9570:	9002      	str	r0, [sp, #8]
    9572:	6108      	str	r0, [r1, #16]
    9574:	480b      	ldr	r0, [pc, #44]	; (95a4 <siprintf+0x3c>)
    9576:	2482      	movs	r4, #130	; 0x82
    9578:	6088      	str	r0, [r1, #8]
    957a:	6148      	str	r0, [r1, #20]
    957c:	2001      	movs	r0, #1
    957e:	4240      	negs	r0, r0
    9580:	ab1f      	add	r3, sp, #124	; 0x7c
    9582:	81c8      	strh	r0, [r1, #14]
    9584:	4808      	ldr	r0, [pc, #32]	; (95a8 <siprintf+0x40>)
    9586:	cb04      	ldmia	r3!, {r2}
    9588:	00a4      	lsls	r4, r4, #2
    958a:	6800      	ldr	r0, [r0, #0]
    958c:	9301      	str	r3, [sp, #4]
    958e:	818c      	strh	r4, [r1, #12]
    9590:	f000 fbe6 	bl	9d60 <_svfiprintf_r>
    9594:	2300      	movs	r3, #0
    9596:	9a02      	ldr	r2, [sp, #8]
    9598:	7013      	strb	r3, [r2, #0]
    959a:	b01d      	add	sp, #116	; 0x74
    959c:	bc10      	pop	{r4}
    959e:	bc08      	pop	{r3}
    95a0:	b003      	add	sp, #12
    95a2:	4718      	bx	r3
    95a4:	7fffffff 	.word	0x7fffffff
    95a8:	20000098 	.word	0x20000098

000095ac <__swbuf_r>:
    95ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    95ae:	0005      	movs	r5, r0
    95b0:	000e      	movs	r6, r1
    95b2:	0014      	movs	r4, r2
    95b4:	2800      	cmp	r0, #0
    95b6:	d004      	beq.n	95c2 <__swbuf_r+0x16>
    95b8:	6983      	ldr	r3, [r0, #24]
    95ba:	2b00      	cmp	r3, #0
    95bc:	d101      	bne.n	95c2 <__swbuf_r+0x16>
    95be:	f000 f9b9 	bl	9934 <__sinit>
    95c2:	4b22      	ldr	r3, [pc, #136]	; (964c <__swbuf_r+0xa0>)
    95c4:	429c      	cmp	r4, r3
    95c6:	d12d      	bne.n	9624 <__swbuf_r+0x78>
    95c8:	686c      	ldr	r4, [r5, #4]
    95ca:	69a3      	ldr	r3, [r4, #24]
    95cc:	60a3      	str	r3, [r4, #8]
    95ce:	89a3      	ldrh	r3, [r4, #12]
    95d0:	071b      	lsls	r3, r3, #28
    95d2:	d531      	bpl.n	9638 <__swbuf_r+0x8c>
    95d4:	6923      	ldr	r3, [r4, #16]
    95d6:	2b00      	cmp	r3, #0
    95d8:	d02e      	beq.n	9638 <__swbuf_r+0x8c>
    95da:	6823      	ldr	r3, [r4, #0]
    95dc:	6922      	ldr	r2, [r4, #16]
    95de:	b2f7      	uxtb	r7, r6
    95e0:	1a98      	subs	r0, r3, r2
    95e2:	6963      	ldr	r3, [r4, #20]
    95e4:	b2f6      	uxtb	r6, r6
    95e6:	4298      	cmp	r0, r3
    95e8:	db05      	blt.n	95f6 <__swbuf_r+0x4a>
    95ea:	0021      	movs	r1, r4
    95ec:	0028      	movs	r0, r5
    95ee:	f000 f933 	bl	9858 <_fflush_r>
    95f2:	2800      	cmp	r0, #0
    95f4:	d126      	bne.n	9644 <__swbuf_r+0x98>
    95f6:	68a3      	ldr	r3, [r4, #8]
    95f8:	3001      	adds	r0, #1
    95fa:	3b01      	subs	r3, #1
    95fc:	60a3      	str	r3, [r4, #8]
    95fe:	6823      	ldr	r3, [r4, #0]
    9600:	1c5a      	adds	r2, r3, #1
    9602:	6022      	str	r2, [r4, #0]
    9604:	701f      	strb	r7, [r3, #0]
    9606:	6963      	ldr	r3, [r4, #20]
    9608:	4298      	cmp	r0, r3
    960a:	d004      	beq.n	9616 <__swbuf_r+0x6a>
    960c:	89a3      	ldrh	r3, [r4, #12]
    960e:	07db      	lsls	r3, r3, #31
    9610:	d51a      	bpl.n	9648 <__swbuf_r+0x9c>
    9612:	2e0a      	cmp	r6, #10
    9614:	d118      	bne.n	9648 <__swbuf_r+0x9c>
    9616:	0021      	movs	r1, r4
    9618:	0028      	movs	r0, r5
    961a:	f000 f91d 	bl	9858 <_fflush_r>
    961e:	2800      	cmp	r0, #0
    9620:	d012      	beq.n	9648 <__swbuf_r+0x9c>
    9622:	e00f      	b.n	9644 <__swbuf_r+0x98>
    9624:	4b0a      	ldr	r3, [pc, #40]	; (9650 <__swbuf_r+0xa4>)
    9626:	429c      	cmp	r4, r3
    9628:	d101      	bne.n	962e <__swbuf_r+0x82>
    962a:	68ac      	ldr	r4, [r5, #8]
    962c:	e7cd      	b.n	95ca <__swbuf_r+0x1e>
    962e:	4b09      	ldr	r3, [pc, #36]	; (9654 <__swbuf_r+0xa8>)
    9630:	429c      	cmp	r4, r3
    9632:	d1ca      	bne.n	95ca <__swbuf_r+0x1e>
    9634:	68ec      	ldr	r4, [r5, #12]
    9636:	e7c8      	b.n	95ca <__swbuf_r+0x1e>
    9638:	0021      	movs	r1, r4
    963a:	0028      	movs	r0, r5
    963c:	f000 f80c 	bl	9658 <__swsetup_r>
    9640:	2800      	cmp	r0, #0
    9642:	d0ca      	beq.n	95da <__swbuf_r+0x2e>
    9644:	2601      	movs	r6, #1
    9646:	4276      	negs	r6, r6
    9648:	0030      	movs	r0, r6
    964a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    964c:	0000a844 	.word	0x0000a844
    9650:	0000a864 	.word	0x0000a864
    9654:	0000a824 	.word	0x0000a824

00009658 <__swsetup_r>:
    9658:	4b36      	ldr	r3, [pc, #216]	; (9734 <__swsetup_r+0xdc>)
    965a:	b570      	push	{r4, r5, r6, lr}
    965c:	681d      	ldr	r5, [r3, #0]
    965e:	0006      	movs	r6, r0
    9660:	000c      	movs	r4, r1
    9662:	2d00      	cmp	r5, #0
    9664:	d005      	beq.n	9672 <__swsetup_r+0x1a>
    9666:	69ab      	ldr	r3, [r5, #24]
    9668:	2b00      	cmp	r3, #0
    966a:	d102      	bne.n	9672 <__swsetup_r+0x1a>
    966c:	0028      	movs	r0, r5
    966e:	f000 f961 	bl	9934 <__sinit>
    9672:	4b31      	ldr	r3, [pc, #196]	; (9738 <__swsetup_r+0xe0>)
    9674:	429c      	cmp	r4, r3
    9676:	d10f      	bne.n	9698 <__swsetup_r+0x40>
    9678:	686c      	ldr	r4, [r5, #4]
    967a:	230c      	movs	r3, #12
    967c:	5ee2      	ldrsh	r2, [r4, r3]
    967e:	b293      	uxth	r3, r2
    9680:	0719      	lsls	r1, r3, #28
    9682:	d42d      	bmi.n	96e0 <__swsetup_r+0x88>
    9684:	06d9      	lsls	r1, r3, #27
    9686:	d411      	bmi.n	96ac <__swsetup_r+0x54>
    9688:	2309      	movs	r3, #9
    968a:	2001      	movs	r0, #1
    968c:	6033      	str	r3, [r6, #0]
    968e:	3337      	adds	r3, #55	; 0x37
    9690:	4313      	orrs	r3, r2
    9692:	81a3      	strh	r3, [r4, #12]
    9694:	4240      	negs	r0, r0
    9696:	bd70      	pop	{r4, r5, r6, pc}
    9698:	4b28      	ldr	r3, [pc, #160]	; (973c <__swsetup_r+0xe4>)
    969a:	429c      	cmp	r4, r3
    969c:	d101      	bne.n	96a2 <__swsetup_r+0x4a>
    969e:	68ac      	ldr	r4, [r5, #8]
    96a0:	e7eb      	b.n	967a <__swsetup_r+0x22>
    96a2:	4b27      	ldr	r3, [pc, #156]	; (9740 <__swsetup_r+0xe8>)
    96a4:	429c      	cmp	r4, r3
    96a6:	d1e8      	bne.n	967a <__swsetup_r+0x22>
    96a8:	68ec      	ldr	r4, [r5, #12]
    96aa:	e7e6      	b.n	967a <__swsetup_r+0x22>
    96ac:	075b      	lsls	r3, r3, #29
    96ae:	d513      	bpl.n	96d8 <__swsetup_r+0x80>
    96b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    96b2:	2900      	cmp	r1, #0
    96b4:	d008      	beq.n	96c8 <__swsetup_r+0x70>
    96b6:	0023      	movs	r3, r4
    96b8:	3344      	adds	r3, #68	; 0x44
    96ba:	4299      	cmp	r1, r3
    96bc:	d002      	beq.n	96c4 <__swsetup_r+0x6c>
    96be:	0030      	movs	r0, r6
    96c0:	f000 fa44 	bl	9b4c <_free_r>
    96c4:	2300      	movs	r3, #0
    96c6:	6363      	str	r3, [r4, #52]	; 0x34
    96c8:	2224      	movs	r2, #36	; 0x24
    96ca:	89a3      	ldrh	r3, [r4, #12]
    96cc:	4393      	bics	r3, r2
    96ce:	81a3      	strh	r3, [r4, #12]
    96d0:	2300      	movs	r3, #0
    96d2:	6063      	str	r3, [r4, #4]
    96d4:	6923      	ldr	r3, [r4, #16]
    96d6:	6023      	str	r3, [r4, #0]
    96d8:	2308      	movs	r3, #8
    96da:	89a2      	ldrh	r2, [r4, #12]
    96dc:	4313      	orrs	r3, r2
    96de:	81a3      	strh	r3, [r4, #12]
    96e0:	6923      	ldr	r3, [r4, #16]
    96e2:	2b00      	cmp	r3, #0
    96e4:	d10b      	bne.n	96fe <__swsetup_r+0xa6>
    96e6:	21a0      	movs	r1, #160	; 0xa0
    96e8:	2280      	movs	r2, #128	; 0x80
    96ea:	89a3      	ldrh	r3, [r4, #12]
    96ec:	0089      	lsls	r1, r1, #2
    96ee:	0092      	lsls	r2, r2, #2
    96f0:	400b      	ands	r3, r1
    96f2:	4293      	cmp	r3, r2
    96f4:	d003      	beq.n	96fe <__swsetup_r+0xa6>
    96f6:	0021      	movs	r1, r4
    96f8:	0030      	movs	r0, r6
    96fa:	f000 f9d9 	bl	9ab0 <__smakebuf_r>
    96fe:	2301      	movs	r3, #1
    9700:	89a2      	ldrh	r2, [r4, #12]
    9702:	4013      	ands	r3, r2
    9704:	d011      	beq.n	972a <__swsetup_r+0xd2>
    9706:	2300      	movs	r3, #0
    9708:	60a3      	str	r3, [r4, #8]
    970a:	6963      	ldr	r3, [r4, #20]
    970c:	425b      	negs	r3, r3
    970e:	61a3      	str	r3, [r4, #24]
    9710:	2000      	movs	r0, #0
    9712:	6923      	ldr	r3, [r4, #16]
    9714:	4283      	cmp	r3, r0
    9716:	d1be      	bne.n	9696 <__swsetup_r+0x3e>
    9718:	230c      	movs	r3, #12
    971a:	5ee2      	ldrsh	r2, [r4, r3]
    971c:	0613      	lsls	r3, r2, #24
    971e:	d5ba      	bpl.n	9696 <__swsetup_r+0x3e>
    9720:	2340      	movs	r3, #64	; 0x40
    9722:	4313      	orrs	r3, r2
    9724:	81a3      	strh	r3, [r4, #12]
    9726:	3801      	subs	r0, #1
    9728:	e7b5      	b.n	9696 <__swsetup_r+0x3e>
    972a:	0792      	lsls	r2, r2, #30
    972c:	d400      	bmi.n	9730 <__swsetup_r+0xd8>
    972e:	6963      	ldr	r3, [r4, #20]
    9730:	60a3      	str	r3, [r4, #8]
    9732:	e7ed      	b.n	9710 <__swsetup_r+0xb8>
    9734:	20000098 	.word	0x20000098
    9738:	0000a844 	.word	0x0000a844
    973c:	0000a864 	.word	0x0000a864
    9740:	0000a824 	.word	0x0000a824

00009744 <__sflush_r>:
    9744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9746:	898a      	ldrh	r2, [r1, #12]
    9748:	0005      	movs	r5, r0
    974a:	000c      	movs	r4, r1
    974c:	0713      	lsls	r3, r2, #28
    974e:	d460      	bmi.n	9812 <__sflush_r+0xce>
    9750:	684b      	ldr	r3, [r1, #4]
    9752:	2b00      	cmp	r3, #0
    9754:	dc04      	bgt.n	9760 <__sflush_r+0x1c>
    9756:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9758:	2b00      	cmp	r3, #0
    975a:	dc01      	bgt.n	9760 <__sflush_r+0x1c>
    975c:	2000      	movs	r0, #0
    975e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9760:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9762:	2f00      	cmp	r7, #0
    9764:	d0fa      	beq.n	975c <__sflush_r+0x18>
    9766:	2300      	movs	r3, #0
    9768:	682e      	ldr	r6, [r5, #0]
    976a:	602b      	str	r3, [r5, #0]
    976c:	2380      	movs	r3, #128	; 0x80
    976e:	015b      	lsls	r3, r3, #5
    9770:	401a      	ands	r2, r3
    9772:	d034      	beq.n	97de <__sflush_r+0x9a>
    9774:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9776:	89a3      	ldrh	r3, [r4, #12]
    9778:	075b      	lsls	r3, r3, #29
    977a:	d506      	bpl.n	978a <__sflush_r+0x46>
    977c:	6863      	ldr	r3, [r4, #4]
    977e:	1ac0      	subs	r0, r0, r3
    9780:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9782:	2b00      	cmp	r3, #0
    9784:	d001      	beq.n	978a <__sflush_r+0x46>
    9786:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9788:	1ac0      	subs	r0, r0, r3
    978a:	0002      	movs	r2, r0
    978c:	6a21      	ldr	r1, [r4, #32]
    978e:	2300      	movs	r3, #0
    9790:	0028      	movs	r0, r5
    9792:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9794:	47b8      	blx	r7
    9796:	89a1      	ldrh	r1, [r4, #12]
    9798:	1c43      	adds	r3, r0, #1
    979a:	d106      	bne.n	97aa <__sflush_r+0x66>
    979c:	682b      	ldr	r3, [r5, #0]
    979e:	2b1d      	cmp	r3, #29
    97a0:	d831      	bhi.n	9806 <__sflush_r+0xc2>
    97a2:	4a2c      	ldr	r2, [pc, #176]	; (9854 <__sflush_r+0x110>)
    97a4:	40da      	lsrs	r2, r3
    97a6:	07d3      	lsls	r3, r2, #31
    97a8:	d52d      	bpl.n	9806 <__sflush_r+0xc2>
    97aa:	2300      	movs	r3, #0
    97ac:	6063      	str	r3, [r4, #4]
    97ae:	6923      	ldr	r3, [r4, #16]
    97b0:	6023      	str	r3, [r4, #0]
    97b2:	04cb      	lsls	r3, r1, #19
    97b4:	d505      	bpl.n	97c2 <__sflush_r+0x7e>
    97b6:	1c43      	adds	r3, r0, #1
    97b8:	d102      	bne.n	97c0 <__sflush_r+0x7c>
    97ba:	682b      	ldr	r3, [r5, #0]
    97bc:	2b00      	cmp	r3, #0
    97be:	d100      	bne.n	97c2 <__sflush_r+0x7e>
    97c0:	6560      	str	r0, [r4, #84]	; 0x54
    97c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    97c4:	602e      	str	r6, [r5, #0]
    97c6:	2900      	cmp	r1, #0
    97c8:	d0c8      	beq.n	975c <__sflush_r+0x18>
    97ca:	0023      	movs	r3, r4
    97cc:	3344      	adds	r3, #68	; 0x44
    97ce:	4299      	cmp	r1, r3
    97d0:	d002      	beq.n	97d8 <__sflush_r+0x94>
    97d2:	0028      	movs	r0, r5
    97d4:	f000 f9ba 	bl	9b4c <_free_r>
    97d8:	2000      	movs	r0, #0
    97da:	6360      	str	r0, [r4, #52]	; 0x34
    97dc:	e7bf      	b.n	975e <__sflush_r+0x1a>
    97de:	2301      	movs	r3, #1
    97e0:	6a21      	ldr	r1, [r4, #32]
    97e2:	0028      	movs	r0, r5
    97e4:	47b8      	blx	r7
    97e6:	1c43      	adds	r3, r0, #1
    97e8:	d1c5      	bne.n	9776 <__sflush_r+0x32>
    97ea:	682b      	ldr	r3, [r5, #0]
    97ec:	2b00      	cmp	r3, #0
    97ee:	d0c2      	beq.n	9776 <__sflush_r+0x32>
    97f0:	2b1d      	cmp	r3, #29
    97f2:	d001      	beq.n	97f8 <__sflush_r+0xb4>
    97f4:	2b16      	cmp	r3, #22
    97f6:	d101      	bne.n	97fc <__sflush_r+0xb8>
    97f8:	602e      	str	r6, [r5, #0]
    97fa:	e7af      	b.n	975c <__sflush_r+0x18>
    97fc:	2340      	movs	r3, #64	; 0x40
    97fe:	89a2      	ldrh	r2, [r4, #12]
    9800:	4313      	orrs	r3, r2
    9802:	81a3      	strh	r3, [r4, #12]
    9804:	e7ab      	b.n	975e <__sflush_r+0x1a>
    9806:	2340      	movs	r3, #64	; 0x40
    9808:	430b      	orrs	r3, r1
    980a:	2001      	movs	r0, #1
    980c:	81a3      	strh	r3, [r4, #12]
    980e:	4240      	negs	r0, r0
    9810:	e7a5      	b.n	975e <__sflush_r+0x1a>
    9812:	690f      	ldr	r7, [r1, #16]
    9814:	2f00      	cmp	r7, #0
    9816:	d0a1      	beq.n	975c <__sflush_r+0x18>
    9818:	680b      	ldr	r3, [r1, #0]
    981a:	600f      	str	r7, [r1, #0]
    981c:	1bdb      	subs	r3, r3, r7
    981e:	9301      	str	r3, [sp, #4]
    9820:	2300      	movs	r3, #0
    9822:	0792      	lsls	r2, r2, #30
    9824:	d100      	bne.n	9828 <__sflush_r+0xe4>
    9826:	694b      	ldr	r3, [r1, #20]
    9828:	60a3      	str	r3, [r4, #8]
    982a:	9b01      	ldr	r3, [sp, #4]
    982c:	2b00      	cmp	r3, #0
    982e:	dc00      	bgt.n	9832 <__sflush_r+0xee>
    9830:	e794      	b.n	975c <__sflush_r+0x18>
    9832:	9b01      	ldr	r3, [sp, #4]
    9834:	003a      	movs	r2, r7
    9836:	6a21      	ldr	r1, [r4, #32]
    9838:	0028      	movs	r0, r5
    983a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    983c:	47b0      	blx	r6
    983e:	2800      	cmp	r0, #0
    9840:	dc03      	bgt.n	984a <__sflush_r+0x106>
    9842:	2340      	movs	r3, #64	; 0x40
    9844:	89a2      	ldrh	r2, [r4, #12]
    9846:	4313      	orrs	r3, r2
    9848:	e7df      	b.n	980a <__sflush_r+0xc6>
    984a:	9b01      	ldr	r3, [sp, #4]
    984c:	183f      	adds	r7, r7, r0
    984e:	1a1b      	subs	r3, r3, r0
    9850:	9301      	str	r3, [sp, #4]
    9852:	e7ea      	b.n	982a <__sflush_r+0xe6>
    9854:	20400001 	.word	0x20400001

00009858 <_fflush_r>:
    9858:	690b      	ldr	r3, [r1, #16]
    985a:	b570      	push	{r4, r5, r6, lr}
    985c:	0005      	movs	r5, r0
    985e:	000c      	movs	r4, r1
    9860:	2b00      	cmp	r3, #0
    9862:	d101      	bne.n	9868 <_fflush_r+0x10>
    9864:	2000      	movs	r0, #0
    9866:	bd70      	pop	{r4, r5, r6, pc}
    9868:	2800      	cmp	r0, #0
    986a:	d004      	beq.n	9876 <_fflush_r+0x1e>
    986c:	6983      	ldr	r3, [r0, #24]
    986e:	2b00      	cmp	r3, #0
    9870:	d101      	bne.n	9876 <_fflush_r+0x1e>
    9872:	f000 f85f 	bl	9934 <__sinit>
    9876:	4b0b      	ldr	r3, [pc, #44]	; (98a4 <_fflush_r+0x4c>)
    9878:	429c      	cmp	r4, r3
    987a:	d109      	bne.n	9890 <_fflush_r+0x38>
    987c:	686c      	ldr	r4, [r5, #4]
    987e:	220c      	movs	r2, #12
    9880:	5ea3      	ldrsh	r3, [r4, r2]
    9882:	2b00      	cmp	r3, #0
    9884:	d0ee      	beq.n	9864 <_fflush_r+0xc>
    9886:	0021      	movs	r1, r4
    9888:	0028      	movs	r0, r5
    988a:	f7ff ff5b 	bl	9744 <__sflush_r>
    988e:	e7ea      	b.n	9866 <_fflush_r+0xe>
    9890:	4b05      	ldr	r3, [pc, #20]	; (98a8 <_fflush_r+0x50>)
    9892:	429c      	cmp	r4, r3
    9894:	d101      	bne.n	989a <_fflush_r+0x42>
    9896:	68ac      	ldr	r4, [r5, #8]
    9898:	e7f1      	b.n	987e <_fflush_r+0x26>
    989a:	4b04      	ldr	r3, [pc, #16]	; (98ac <_fflush_r+0x54>)
    989c:	429c      	cmp	r4, r3
    989e:	d1ee      	bne.n	987e <_fflush_r+0x26>
    98a0:	68ec      	ldr	r4, [r5, #12]
    98a2:	e7ec      	b.n	987e <_fflush_r+0x26>
    98a4:	0000a844 	.word	0x0000a844
    98a8:	0000a864 	.word	0x0000a864
    98ac:	0000a824 	.word	0x0000a824

000098b0 <_cleanup_r>:
    98b0:	b510      	push	{r4, lr}
    98b2:	4902      	ldr	r1, [pc, #8]	; (98bc <_cleanup_r+0xc>)
    98b4:	f000 f8b2 	bl	9a1c <_fwalk_reent>
    98b8:	bd10      	pop	{r4, pc}
    98ba:	46c0      	nop			; (mov r8, r8)
    98bc:	00009859 	.word	0x00009859

000098c0 <std.isra.0>:
    98c0:	2300      	movs	r3, #0
    98c2:	b510      	push	{r4, lr}
    98c4:	0004      	movs	r4, r0
    98c6:	6003      	str	r3, [r0, #0]
    98c8:	6043      	str	r3, [r0, #4]
    98ca:	6083      	str	r3, [r0, #8]
    98cc:	8181      	strh	r1, [r0, #12]
    98ce:	6643      	str	r3, [r0, #100]	; 0x64
    98d0:	81c2      	strh	r2, [r0, #14]
    98d2:	6103      	str	r3, [r0, #16]
    98d4:	6143      	str	r3, [r0, #20]
    98d6:	6183      	str	r3, [r0, #24]
    98d8:	0019      	movs	r1, r3
    98da:	2208      	movs	r2, #8
    98dc:	305c      	adds	r0, #92	; 0x5c
    98de:	f7ff fd2f 	bl	9340 <memset>
    98e2:	4b05      	ldr	r3, [pc, #20]	; (98f8 <std.isra.0+0x38>)
    98e4:	6224      	str	r4, [r4, #32]
    98e6:	6263      	str	r3, [r4, #36]	; 0x24
    98e8:	4b04      	ldr	r3, [pc, #16]	; (98fc <std.isra.0+0x3c>)
    98ea:	62a3      	str	r3, [r4, #40]	; 0x28
    98ec:	4b04      	ldr	r3, [pc, #16]	; (9900 <std.isra.0+0x40>)
    98ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    98f0:	4b04      	ldr	r3, [pc, #16]	; (9904 <std.isra.0+0x44>)
    98f2:	6323      	str	r3, [r4, #48]	; 0x30
    98f4:	bd10      	pop	{r4, pc}
    98f6:	46c0      	nop			; (mov r8, r8)
    98f8:	0000a525 	.word	0x0000a525
    98fc:	0000a54d 	.word	0x0000a54d
    9900:	0000a585 	.word	0x0000a585
    9904:	0000a5b1 	.word	0x0000a5b1

00009908 <__sfmoreglue>:
    9908:	b570      	push	{r4, r5, r6, lr}
    990a:	2568      	movs	r5, #104	; 0x68
    990c:	1e4a      	subs	r2, r1, #1
    990e:	4355      	muls	r5, r2
    9910:	000e      	movs	r6, r1
    9912:	0029      	movs	r1, r5
    9914:	3174      	adds	r1, #116	; 0x74
    9916:	f000 f963 	bl	9be0 <_malloc_r>
    991a:	1e04      	subs	r4, r0, #0
    991c:	d008      	beq.n	9930 <__sfmoreglue+0x28>
    991e:	2100      	movs	r1, #0
    9920:	002a      	movs	r2, r5
    9922:	6001      	str	r1, [r0, #0]
    9924:	6046      	str	r6, [r0, #4]
    9926:	300c      	adds	r0, #12
    9928:	60a0      	str	r0, [r4, #8]
    992a:	3268      	adds	r2, #104	; 0x68
    992c:	f7ff fd08 	bl	9340 <memset>
    9930:	0020      	movs	r0, r4
    9932:	bd70      	pop	{r4, r5, r6, pc}

00009934 <__sinit>:
    9934:	6983      	ldr	r3, [r0, #24]
    9936:	b513      	push	{r0, r1, r4, lr}
    9938:	0004      	movs	r4, r0
    993a:	2b00      	cmp	r3, #0
    993c:	d128      	bne.n	9990 <__sinit+0x5c>
    993e:	6483      	str	r3, [r0, #72]	; 0x48
    9940:	64c3      	str	r3, [r0, #76]	; 0x4c
    9942:	6503      	str	r3, [r0, #80]	; 0x50
    9944:	4b13      	ldr	r3, [pc, #76]	; (9994 <__sinit+0x60>)
    9946:	4a14      	ldr	r2, [pc, #80]	; (9998 <__sinit+0x64>)
    9948:	681b      	ldr	r3, [r3, #0]
    994a:	6282      	str	r2, [r0, #40]	; 0x28
    994c:	9301      	str	r3, [sp, #4]
    994e:	4298      	cmp	r0, r3
    9950:	d101      	bne.n	9956 <__sinit+0x22>
    9952:	2301      	movs	r3, #1
    9954:	6183      	str	r3, [r0, #24]
    9956:	0020      	movs	r0, r4
    9958:	f000 f820 	bl	999c <__sfp>
    995c:	6060      	str	r0, [r4, #4]
    995e:	0020      	movs	r0, r4
    9960:	f000 f81c 	bl	999c <__sfp>
    9964:	60a0      	str	r0, [r4, #8]
    9966:	0020      	movs	r0, r4
    9968:	f000 f818 	bl	999c <__sfp>
    996c:	2200      	movs	r2, #0
    996e:	60e0      	str	r0, [r4, #12]
    9970:	2104      	movs	r1, #4
    9972:	6860      	ldr	r0, [r4, #4]
    9974:	f7ff ffa4 	bl	98c0 <std.isra.0>
    9978:	2201      	movs	r2, #1
    997a:	2109      	movs	r1, #9
    997c:	68a0      	ldr	r0, [r4, #8]
    997e:	f7ff ff9f 	bl	98c0 <std.isra.0>
    9982:	2202      	movs	r2, #2
    9984:	2112      	movs	r1, #18
    9986:	68e0      	ldr	r0, [r4, #12]
    9988:	f7ff ff9a 	bl	98c0 <std.isra.0>
    998c:	2301      	movs	r3, #1
    998e:	61a3      	str	r3, [r4, #24]
    9990:	bd13      	pop	{r0, r1, r4, pc}
    9992:	46c0      	nop			; (mov r8, r8)
    9994:	0000a820 	.word	0x0000a820
    9998:	000098b1 	.word	0x000098b1

0000999c <__sfp>:
    999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    999e:	4b1e      	ldr	r3, [pc, #120]	; (9a18 <__sfp+0x7c>)
    99a0:	0007      	movs	r7, r0
    99a2:	681e      	ldr	r6, [r3, #0]
    99a4:	69b3      	ldr	r3, [r6, #24]
    99a6:	2b00      	cmp	r3, #0
    99a8:	d102      	bne.n	99b0 <__sfp+0x14>
    99aa:	0030      	movs	r0, r6
    99ac:	f7ff ffc2 	bl	9934 <__sinit>
    99b0:	3648      	adds	r6, #72	; 0x48
    99b2:	68b4      	ldr	r4, [r6, #8]
    99b4:	6873      	ldr	r3, [r6, #4]
    99b6:	3b01      	subs	r3, #1
    99b8:	d504      	bpl.n	99c4 <__sfp+0x28>
    99ba:	6833      	ldr	r3, [r6, #0]
    99bc:	2b00      	cmp	r3, #0
    99be:	d007      	beq.n	99d0 <__sfp+0x34>
    99c0:	6836      	ldr	r6, [r6, #0]
    99c2:	e7f6      	b.n	99b2 <__sfp+0x16>
    99c4:	220c      	movs	r2, #12
    99c6:	5ea5      	ldrsh	r5, [r4, r2]
    99c8:	2d00      	cmp	r5, #0
    99ca:	d00d      	beq.n	99e8 <__sfp+0x4c>
    99cc:	3468      	adds	r4, #104	; 0x68
    99ce:	e7f2      	b.n	99b6 <__sfp+0x1a>
    99d0:	2104      	movs	r1, #4
    99d2:	0038      	movs	r0, r7
    99d4:	f7ff ff98 	bl	9908 <__sfmoreglue>
    99d8:	6030      	str	r0, [r6, #0]
    99da:	2800      	cmp	r0, #0
    99dc:	d1f0      	bne.n	99c0 <__sfp+0x24>
    99de:	230c      	movs	r3, #12
    99e0:	0004      	movs	r4, r0
    99e2:	603b      	str	r3, [r7, #0]
    99e4:	0020      	movs	r0, r4
    99e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99e8:	2301      	movs	r3, #1
    99ea:	0020      	movs	r0, r4
    99ec:	425b      	negs	r3, r3
    99ee:	81e3      	strh	r3, [r4, #14]
    99f0:	3302      	adds	r3, #2
    99f2:	81a3      	strh	r3, [r4, #12]
    99f4:	6665      	str	r5, [r4, #100]	; 0x64
    99f6:	6025      	str	r5, [r4, #0]
    99f8:	60a5      	str	r5, [r4, #8]
    99fa:	6065      	str	r5, [r4, #4]
    99fc:	6125      	str	r5, [r4, #16]
    99fe:	6165      	str	r5, [r4, #20]
    9a00:	61a5      	str	r5, [r4, #24]
    9a02:	2208      	movs	r2, #8
    9a04:	0029      	movs	r1, r5
    9a06:	305c      	adds	r0, #92	; 0x5c
    9a08:	f7ff fc9a 	bl	9340 <memset>
    9a0c:	6365      	str	r5, [r4, #52]	; 0x34
    9a0e:	63a5      	str	r5, [r4, #56]	; 0x38
    9a10:	64a5      	str	r5, [r4, #72]	; 0x48
    9a12:	64e5      	str	r5, [r4, #76]	; 0x4c
    9a14:	e7e6      	b.n	99e4 <__sfp+0x48>
    9a16:	46c0      	nop			; (mov r8, r8)
    9a18:	0000a820 	.word	0x0000a820

00009a1c <_fwalk_reent>:
    9a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9a1e:	0004      	movs	r4, r0
    9a20:	0007      	movs	r7, r0
    9a22:	2600      	movs	r6, #0
    9a24:	9101      	str	r1, [sp, #4]
    9a26:	3448      	adds	r4, #72	; 0x48
    9a28:	2c00      	cmp	r4, #0
    9a2a:	d101      	bne.n	9a30 <_fwalk_reent+0x14>
    9a2c:	0030      	movs	r0, r6
    9a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9a30:	6863      	ldr	r3, [r4, #4]
    9a32:	68a5      	ldr	r5, [r4, #8]
    9a34:	9300      	str	r3, [sp, #0]
    9a36:	9b00      	ldr	r3, [sp, #0]
    9a38:	3b01      	subs	r3, #1
    9a3a:	9300      	str	r3, [sp, #0]
    9a3c:	d501      	bpl.n	9a42 <_fwalk_reent+0x26>
    9a3e:	6824      	ldr	r4, [r4, #0]
    9a40:	e7f2      	b.n	9a28 <_fwalk_reent+0xc>
    9a42:	89ab      	ldrh	r3, [r5, #12]
    9a44:	2b01      	cmp	r3, #1
    9a46:	d908      	bls.n	9a5a <_fwalk_reent+0x3e>
    9a48:	220e      	movs	r2, #14
    9a4a:	5eab      	ldrsh	r3, [r5, r2]
    9a4c:	3301      	adds	r3, #1
    9a4e:	d004      	beq.n	9a5a <_fwalk_reent+0x3e>
    9a50:	0029      	movs	r1, r5
    9a52:	0038      	movs	r0, r7
    9a54:	9b01      	ldr	r3, [sp, #4]
    9a56:	4798      	blx	r3
    9a58:	4306      	orrs	r6, r0
    9a5a:	3568      	adds	r5, #104	; 0x68
    9a5c:	e7eb      	b.n	9a36 <_fwalk_reent+0x1a>
	...

00009a60 <__swhatbuf_r>:
    9a60:	b570      	push	{r4, r5, r6, lr}
    9a62:	000e      	movs	r6, r1
    9a64:	001d      	movs	r5, r3
    9a66:	230e      	movs	r3, #14
    9a68:	5ec9      	ldrsh	r1, [r1, r3]
    9a6a:	b090      	sub	sp, #64	; 0x40
    9a6c:	0014      	movs	r4, r2
    9a6e:	2900      	cmp	r1, #0
    9a70:	da07      	bge.n	9a82 <__swhatbuf_r+0x22>
    9a72:	2300      	movs	r3, #0
    9a74:	602b      	str	r3, [r5, #0]
    9a76:	89b3      	ldrh	r3, [r6, #12]
    9a78:	061b      	lsls	r3, r3, #24
    9a7a:	d411      	bmi.n	9aa0 <__swhatbuf_r+0x40>
    9a7c:	2380      	movs	r3, #128	; 0x80
    9a7e:	00db      	lsls	r3, r3, #3
    9a80:	e00f      	b.n	9aa2 <__swhatbuf_r+0x42>
    9a82:	aa01      	add	r2, sp, #4
    9a84:	f000 fdc0 	bl	a608 <_fstat_r>
    9a88:	2800      	cmp	r0, #0
    9a8a:	dbf2      	blt.n	9a72 <__swhatbuf_r+0x12>
    9a8c:	22f0      	movs	r2, #240	; 0xf0
    9a8e:	9b02      	ldr	r3, [sp, #8]
    9a90:	0212      	lsls	r2, r2, #8
    9a92:	4013      	ands	r3, r2
    9a94:	4a05      	ldr	r2, [pc, #20]	; (9aac <__swhatbuf_r+0x4c>)
    9a96:	189b      	adds	r3, r3, r2
    9a98:	425a      	negs	r2, r3
    9a9a:	4153      	adcs	r3, r2
    9a9c:	602b      	str	r3, [r5, #0]
    9a9e:	e7ed      	b.n	9a7c <__swhatbuf_r+0x1c>
    9aa0:	2340      	movs	r3, #64	; 0x40
    9aa2:	2000      	movs	r0, #0
    9aa4:	6023      	str	r3, [r4, #0]
    9aa6:	b010      	add	sp, #64	; 0x40
    9aa8:	bd70      	pop	{r4, r5, r6, pc}
    9aaa:	46c0      	nop			; (mov r8, r8)
    9aac:	ffffe000 	.word	0xffffe000

00009ab0 <__smakebuf_r>:
    9ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9ab2:	2602      	movs	r6, #2
    9ab4:	898b      	ldrh	r3, [r1, #12]
    9ab6:	0005      	movs	r5, r0
    9ab8:	000c      	movs	r4, r1
    9aba:	4233      	tst	r3, r6
    9abc:	d006      	beq.n	9acc <__smakebuf_r+0x1c>
    9abe:	0023      	movs	r3, r4
    9ac0:	3347      	adds	r3, #71	; 0x47
    9ac2:	6023      	str	r3, [r4, #0]
    9ac4:	6123      	str	r3, [r4, #16]
    9ac6:	2301      	movs	r3, #1
    9ac8:	6163      	str	r3, [r4, #20]
    9aca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9acc:	ab01      	add	r3, sp, #4
    9ace:	466a      	mov	r2, sp
    9ad0:	f7ff ffc6 	bl	9a60 <__swhatbuf_r>
    9ad4:	9900      	ldr	r1, [sp, #0]
    9ad6:	0007      	movs	r7, r0
    9ad8:	0028      	movs	r0, r5
    9ada:	f000 f881 	bl	9be0 <_malloc_r>
    9ade:	2800      	cmp	r0, #0
    9ae0:	d108      	bne.n	9af4 <__smakebuf_r+0x44>
    9ae2:	220c      	movs	r2, #12
    9ae4:	5ea3      	ldrsh	r3, [r4, r2]
    9ae6:	059a      	lsls	r2, r3, #22
    9ae8:	d4ef      	bmi.n	9aca <__smakebuf_r+0x1a>
    9aea:	2203      	movs	r2, #3
    9aec:	4393      	bics	r3, r2
    9aee:	431e      	orrs	r6, r3
    9af0:	81a6      	strh	r6, [r4, #12]
    9af2:	e7e4      	b.n	9abe <__smakebuf_r+0xe>
    9af4:	4b0f      	ldr	r3, [pc, #60]	; (9b34 <__smakebuf_r+0x84>)
    9af6:	62ab      	str	r3, [r5, #40]	; 0x28
    9af8:	2380      	movs	r3, #128	; 0x80
    9afa:	89a2      	ldrh	r2, [r4, #12]
    9afc:	6020      	str	r0, [r4, #0]
    9afe:	4313      	orrs	r3, r2
    9b00:	81a3      	strh	r3, [r4, #12]
    9b02:	9b00      	ldr	r3, [sp, #0]
    9b04:	6120      	str	r0, [r4, #16]
    9b06:	6163      	str	r3, [r4, #20]
    9b08:	9b01      	ldr	r3, [sp, #4]
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d00d      	beq.n	9b2a <__smakebuf_r+0x7a>
    9b0e:	230e      	movs	r3, #14
    9b10:	5ee1      	ldrsh	r1, [r4, r3]
    9b12:	0028      	movs	r0, r5
    9b14:	f000 fd8a 	bl	a62c <_isatty_r>
    9b18:	2800      	cmp	r0, #0
    9b1a:	d006      	beq.n	9b2a <__smakebuf_r+0x7a>
    9b1c:	2203      	movs	r2, #3
    9b1e:	89a3      	ldrh	r3, [r4, #12]
    9b20:	4393      	bics	r3, r2
    9b22:	001a      	movs	r2, r3
    9b24:	2301      	movs	r3, #1
    9b26:	4313      	orrs	r3, r2
    9b28:	81a3      	strh	r3, [r4, #12]
    9b2a:	89a0      	ldrh	r0, [r4, #12]
    9b2c:	4338      	orrs	r0, r7
    9b2e:	81a0      	strh	r0, [r4, #12]
    9b30:	e7cb      	b.n	9aca <__smakebuf_r+0x1a>
    9b32:	46c0      	nop			; (mov r8, r8)
    9b34:	000098b1 	.word	0x000098b1

00009b38 <malloc>:
    9b38:	b510      	push	{r4, lr}
    9b3a:	4b03      	ldr	r3, [pc, #12]	; (9b48 <malloc+0x10>)
    9b3c:	0001      	movs	r1, r0
    9b3e:	6818      	ldr	r0, [r3, #0]
    9b40:	f000 f84e 	bl	9be0 <_malloc_r>
    9b44:	bd10      	pop	{r4, pc}
    9b46:	46c0      	nop			; (mov r8, r8)
    9b48:	20000098 	.word	0x20000098

00009b4c <_free_r>:
    9b4c:	b570      	push	{r4, r5, r6, lr}
    9b4e:	0005      	movs	r5, r0
    9b50:	2900      	cmp	r1, #0
    9b52:	d010      	beq.n	9b76 <_free_r+0x2a>
    9b54:	1f0c      	subs	r4, r1, #4
    9b56:	6823      	ldr	r3, [r4, #0]
    9b58:	2b00      	cmp	r3, #0
    9b5a:	da00      	bge.n	9b5e <_free_r+0x12>
    9b5c:	18e4      	adds	r4, r4, r3
    9b5e:	0028      	movs	r0, r5
    9b60:	f000 fda7 	bl	a6b2 <__malloc_lock>
    9b64:	4a1d      	ldr	r2, [pc, #116]	; (9bdc <_free_r+0x90>)
    9b66:	6813      	ldr	r3, [r2, #0]
    9b68:	2b00      	cmp	r3, #0
    9b6a:	d105      	bne.n	9b78 <_free_r+0x2c>
    9b6c:	6063      	str	r3, [r4, #4]
    9b6e:	6014      	str	r4, [r2, #0]
    9b70:	0028      	movs	r0, r5
    9b72:	f000 fd9f 	bl	a6b4 <__malloc_unlock>
    9b76:	bd70      	pop	{r4, r5, r6, pc}
    9b78:	42a3      	cmp	r3, r4
    9b7a:	d909      	bls.n	9b90 <_free_r+0x44>
    9b7c:	6821      	ldr	r1, [r4, #0]
    9b7e:	1860      	adds	r0, r4, r1
    9b80:	4283      	cmp	r3, r0
    9b82:	d1f3      	bne.n	9b6c <_free_r+0x20>
    9b84:	6818      	ldr	r0, [r3, #0]
    9b86:	685b      	ldr	r3, [r3, #4]
    9b88:	1841      	adds	r1, r0, r1
    9b8a:	6021      	str	r1, [r4, #0]
    9b8c:	e7ee      	b.n	9b6c <_free_r+0x20>
    9b8e:	0013      	movs	r3, r2
    9b90:	685a      	ldr	r2, [r3, #4]
    9b92:	2a00      	cmp	r2, #0
    9b94:	d001      	beq.n	9b9a <_free_r+0x4e>
    9b96:	42a2      	cmp	r2, r4
    9b98:	d9f9      	bls.n	9b8e <_free_r+0x42>
    9b9a:	6819      	ldr	r1, [r3, #0]
    9b9c:	1858      	adds	r0, r3, r1
    9b9e:	42a0      	cmp	r0, r4
    9ba0:	d10b      	bne.n	9bba <_free_r+0x6e>
    9ba2:	6820      	ldr	r0, [r4, #0]
    9ba4:	1809      	adds	r1, r1, r0
    9ba6:	1858      	adds	r0, r3, r1
    9ba8:	6019      	str	r1, [r3, #0]
    9baa:	4282      	cmp	r2, r0
    9bac:	d1e0      	bne.n	9b70 <_free_r+0x24>
    9bae:	6810      	ldr	r0, [r2, #0]
    9bb0:	6852      	ldr	r2, [r2, #4]
    9bb2:	1841      	adds	r1, r0, r1
    9bb4:	6019      	str	r1, [r3, #0]
    9bb6:	605a      	str	r2, [r3, #4]
    9bb8:	e7da      	b.n	9b70 <_free_r+0x24>
    9bba:	42a0      	cmp	r0, r4
    9bbc:	d902      	bls.n	9bc4 <_free_r+0x78>
    9bbe:	230c      	movs	r3, #12
    9bc0:	602b      	str	r3, [r5, #0]
    9bc2:	e7d5      	b.n	9b70 <_free_r+0x24>
    9bc4:	6821      	ldr	r1, [r4, #0]
    9bc6:	1860      	adds	r0, r4, r1
    9bc8:	4282      	cmp	r2, r0
    9bca:	d103      	bne.n	9bd4 <_free_r+0x88>
    9bcc:	6810      	ldr	r0, [r2, #0]
    9bce:	6852      	ldr	r2, [r2, #4]
    9bd0:	1841      	adds	r1, r0, r1
    9bd2:	6021      	str	r1, [r4, #0]
    9bd4:	6062      	str	r2, [r4, #4]
    9bd6:	605c      	str	r4, [r3, #4]
    9bd8:	e7ca      	b.n	9b70 <_free_r+0x24>
    9bda:	46c0      	nop			; (mov r8, r8)
    9bdc:	200003e4 	.word	0x200003e4

00009be0 <_malloc_r>:
    9be0:	2303      	movs	r3, #3
    9be2:	b570      	push	{r4, r5, r6, lr}
    9be4:	1ccd      	adds	r5, r1, #3
    9be6:	439d      	bics	r5, r3
    9be8:	3508      	adds	r5, #8
    9bea:	0006      	movs	r6, r0
    9bec:	2d0c      	cmp	r5, #12
    9bee:	d21e      	bcs.n	9c2e <_malloc_r+0x4e>
    9bf0:	250c      	movs	r5, #12
    9bf2:	42a9      	cmp	r1, r5
    9bf4:	d81d      	bhi.n	9c32 <_malloc_r+0x52>
    9bf6:	0030      	movs	r0, r6
    9bf8:	f000 fd5b 	bl	a6b2 <__malloc_lock>
    9bfc:	4a25      	ldr	r2, [pc, #148]	; (9c94 <_malloc_r+0xb4>)
    9bfe:	6814      	ldr	r4, [r2, #0]
    9c00:	0021      	movs	r1, r4
    9c02:	2900      	cmp	r1, #0
    9c04:	d119      	bne.n	9c3a <_malloc_r+0x5a>
    9c06:	4c24      	ldr	r4, [pc, #144]	; (9c98 <_malloc_r+0xb8>)
    9c08:	6823      	ldr	r3, [r4, #0]
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	d103      	bne.n	9c16 <_malloc_r+0x36>
    9c0e:	0030      	movs	r0, r6
    9c10:	f000 fc76 	bl	a500 <_sbrk_r>
    9c14:	6020      	str	r0, [r4, #0]
    9c16:	0029      	movs	r1, r5
    9c18:	0030      	movs	r0, r6
    9c1a:	f000 fc71 	bl	a500 <_sbrk_r>
    9c1e:	1c43      	adds	r3, r0, #1
    9c20:	d12c      	bne.n	9c7c <_malloc_r+0x9c>
    9c22:	230c      	movs	r3, #12
    9c24:	0030      	movs	r0, r6
    9c26:	6033      	str	r3, [r6, #0]
    9c28:	f000 fd44 	bl	a6b4 <__malloc_unlock>
    9c2c:	e003      	b.n	9c36 <_malloc_r+0x56>
    9c2e:	2d00      	cmp	r5, #0
    9c30:	dadf      	bge.n	9bf2 <_malloc_r+0x12>
    9c32:	230c      	movs	r3, #12
    9c34:	6033      	str	r3, [r6, #0]
    9c36:	2000      	movs	r0, #0
    9c38:	bd70      	pop	{r4, r5, r6, pc}
    9c3a:	680b      	ldr	r3, [r1, #0]
    9c3c:	1b5b      	subs	r3, r3, r5
    9c3e:	d41a      	bmi.n	9c76 <_malloc_r+0x96>
    9c40:	2b0b      	cmp	r3, #11
    9c42:	d903      	bls.n	9c4c <_malloc_r+0x6c>
    9c44:	600b      	str	r3, [r1, #0]
    9c46:	18cc      	adds	r4, r1, r3
    9c48:	6025      	str	r5, [r4, #0]
    9c4a:	e003      	b.n	9c54 <_malloc_r+0x74>
    9c4c:	428c      	cmp	r4, r1
    9c4e:	d10e      	bne.n	9c6e <_malloc_r+0x8e>
    9c50:	6863      	ldr	r3, [r4, #4]
    9c52:	6013      	str	r3, [r2, #0]
    9c54:	0030      	movs	r0, r6
    9c56:	f000 fd2d 	bl	a6b4 <__malloc_unlock>
    9c5a:	0020      	movs	r0, r4
    9c5c:	2207      	movs	r2, #7
    9c5e:	300b      	adds	r0, #11
    9c60:	1d23      	adds	r3, r4, #4
    9c62:	4390      	bics	r0, r2
    9c64:	1ac3      	subs	r3, r0, r3
    9c66:	d0e7      	beq.n	9c38 <_malloc_r+0x58>
    9c68:	425a      	negs	r2, r3
    9c6a:	50e2      	str	r2, [r4, r3]
    9c6c:	e7e4      	b.n	9c38 <_malloc_r+0x58>
    9c6e:	684b      	ldr	r3, [r1, #4]
    9c70:	6063      	str	r3, [r4, #4]
    9c72:	000c      	movs	r4, r1
    9c74:	e7ee      	b.n	9c54 <_malloc_r+0x74>
    9c76:	000c      	movs	r4, r1
    9c78:	6849      	ldr	r1, [r1, #4]
    9c7a:	e7c2      	b.n	9c02 <_malloc_r+0x22>
    9c7c:	2303      	movs	r3, #3
    9c7e:	1cc4      	adds	r4, r0, #3
    9c80:	439c      	bics	r4, r3
    9c82:	42a0      	cmp	r0, r4
    9c84:	d0e0      	beq.n	9c48 <_malloc_r+0x68>
    9c86:	1a21      	subs	r1, r4, r0
    9c88:	0030      	movs	r0, r6
    9c8a:	f000 fc39 	bl	a500 <_sbrk_r>
    9c8e:	1c43      	adds	r3, r0, #1
    9c90:	d1da      	bne.n	9c48 <_malloc_r+0x68>
    9c92:	e7c6      	b.n	9c22 <_malloc_r+0x42>
    9c94:	200003e4 	.word	0x200003e4
    9c98:	200003e8 	.word	0x200003e8

00009c9c <__ssputs_r>:
    9c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c9e:	688e      	ldr	r6, [r1, #8]
    9ca0:	b085      	sub	sp, #20
    9ca2:	0007      	movs	r7, r0
    9ca4:	000c      	movs	r4, r1
    9ca6:	9203      	str	r2, [sp, #12]
    9ca8:	9301      	str	r3, [sp, #4]
    9caa:	429e      	cmp	r6, r3
    9cac:	d839      	bhi.n	9d22 <__ssputs_r+0x86>
    9cae:	2390      	movs	r3, #144	; 0x90
    9cb0:	898a      	ldrh	r2, [r1, #12]
    9cb2:	00db      	lsls	r3, r3, #3
    9cb4:	421a      	tst	r2, r3
    9cb6:	d034      	beq.n	9d22 <__ssputs_r+0x86>
    9cb8:	2503      	movs	r5, #3
    9cba:	6909      	ldr	r1, [r1, #16]
    9cbc:	6823      	ldr	r3, [r4, #0]
    9cbe:	1a5b      	subs	r3, r3, r1
    9cc0:	9302      	str	r3, [sp, #8]
    9cc2:	6963      	ldr	r3, [r4, #20]
    9cc4:	9802      	ldr	r0, [sp, #8]
    9cc6:	435d      	muls	r5, r3
    9cc8:	0feb      	lsrs	r3, r5, #31
    9cca:	195d      	adds	r5, r3, r5
    9ccc:	9b01      	ldr	r3, [sp, #4]
    9cce:	106d      	asrs	r5, r5, #1
    9cd0:	3301      	adds	r3, #1
    9cd2:	181b      	adds	r3, r3, r0
    9cd4:	42ab      	cmp	r3, r5
    9cd6:	d900      	bls.n	9cda <__ssputs_r+0x3e>
    9cd8:	001d      	movs	r5, r3
    9cda:	0553      	lsls	r3, r2, #21
    9cdc:	d532      	bpl.n	9d44 <__ssputs_r+0xa8>
    9cde:	0029      	movs	r1, r5
    9ce0:	0038      	movs	r0, r7
    9ce2:	f7ff ff7d 	bl	9be0 <_malloc_r>
    9ce6:	1e06      	subs	r6, r0, #0
    9ce8:	d109      	bne.n	9cfe <__ssputs_r+0x62>
    9cea:	230c      	movs	r3, #12
    9cec:	603b      	str	r3, [r7, #0]
    9cee:	2340      	movs	r3, #64	; 0x40
    9cf0:	2001      	movs	r0, #1
    9cf2:	89a2      	ldrh	r2, [r4, #12]
    9cf4:	4240      	negs	r0, r0
    9cf6:	4313      	orrs	r3, r2
    9cf8:	81a3      	strh	r3, [r4, #12]
    9cfa:	b005      	add	sp, #20
    9cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cfe:	9a02      	ldr	r2, [sp, #8]
    9d00:	6921      	ldr	r1, [r4, #16]
    9d02:	f7ff fb14 	bl	932e <memcpy>
    9d06:	89a3      	ldrh	r3, [r4, #12]
    9d08:	4a14      	ldr	r2, [pc, #80]	; (9d5c <__ssputs_r+0xc0>)
    9d0a:	401a      	ands	r2, r3
    9d0c:	2380      	movs	r3, #128	; 0x80
    9d0e:	4313      	orrs	r3, r2
    9d10:	81a3      	strh	r3, [r4, #12]
    9d12:	9b02      	ldr	r3, [sp, #8]
    9d14:	6126      	str	r6, [r4, #16]
    9d16:	18f6      	adds	r6, r6, r3
    9d18:	6026      	str	r6, [r4, #0]
    9d1a:	6165      	str	r5, [r4, #20]
    9d1c:	9e01      	ldr	r6, [sp, #4]
    9d1e:	1aed      	subs	r5, r5, r3
    9d20:	60a5      	str	r5, [r4, #8]
    9d22:	9b01      	ldr	r3, [sp, #4]
    9d24:	42b3      	cmp	r3, r6
    9d26:	d200      	bcs.n	9d2a <__ssputs_r+0x8e>
    9d28:	001e      	movs	r6, r3
    9d2a:	0032      	movs	r2, r6
    9d2c:	9903      	ldr	r1, [sp, #12]
    9d2e:	6820      	ldr	r0, [r4, #0]
    9d30:	f000 fcad 	bl	a68e <memmove>
    9d34:	68a3      	ldr	r3, [r4, #8]
    9d36:	2000      	movs	r0, #0
    9d38:	1b9b      	subs	r3, r3, r6
    9d3a:	60a3      	str	r3, [r4, #8]
    9d3c:	6823      	ldr	r3, [r4, #0]
    9d3e:	199e      	adds	r6, r3, r6
    9d40:	6026      	str	r6, [r4, #0]
    9d42:	e7da      	b.n	9cfa <__ssputs_r+0x5e>
    9d44:	002a      	movs	r2, r5
    9d46:	0038      	movs	r0, r7
    9d48:	f000 fcb5 	bl	a6b6 <_realloc_r>
    9d4c:	1e06      	subs	r6, r0, #0
    9d4e:	d1e0      	bne.n	9d12 <__ssputs_r+0x76>
    9d50:	6921      	ldr	r1, [r4, #16]
    9d52:	0038      	movs	r0, r7
    9d54:	f7ff fefa 	bl	9b4c <_free_r>
    9d58:	e7c7      	b.n	9cea <__ssputs_r+0x4e>
    9d5a:	46c0      	nop			; (mov r8, r8)
    9d5c:	fffffb7f 	.word	0xfffffb7f

00009d60 <_svfiprintf_r>:
    9d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d62:	b09f      	sub	sp, #124	; 0x7c
    9d64:	9002      	str	r0, [sp, #8]
    9d66:	9305      	str	r3, [sp, #20]
    9d68:	898b      	ldrh	r3, [r1, #12]
    9d6a:	000f      	movs	r7, r1
    9d6c:	0016      	movs	r6, r2
    9d6e:	061b      	lsls	r3, r3, #24
    9d70:	d511      	bpl.n	9d96 <_svfiprintf_r+0x36>
    9d72:	690b      	ldr	r3, [r1, #16]
    9d74:	2b00      	cmp	r3, #0
    9d76:	d10e      	bne.n	9d96 <_svfiprintf_r+0x36>
    9d78:	2140      	movs	r1, #64	; 0x40
    9d7a:	f7ff ff31 	bl	9be0 <_malloc_r>
    9d7e:	6038      	str	r0, [r7, #0]
    9d80:	6138      	str	r0, [r7, #16]
    9d82:	2800      	cmp	r0, #0
    9d84:	d105      	bne.n	9d92 <_svfiprintf_r+0x32>
    9d86:	230c      	movs	r3, #12
    9d88:	9a02      	ldr	r2, [sp, #8]
    9d8a:	3801      	subs	r0, #1
    9d8c:	6013      	str	r3, [r2, #0]
    9d8e:	b01f      	add	sp, #124	; 0x7c
    9d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d92:	2340      	movs	r3, #64	; 0x40
    9d94:	617b      	str	r3, [r7, #20]
    9d96:	2300      	movs	r3, #0
    9d98:	ad06      	add	r5, sp, #24
    9d9a:	616b      	str	r3, [r5, #20]
    9d9c:	3320      	adds	r3, #32
    9d9e:	766b      	strb	r3, [r5, #25]
    9da0:	3310      	adds	r3, #16
    9da2:	76ab      	strb	r3, [r5, #26]
    9da4:	0034      	movs	r4, r6
    9da6:	7823      	ldrb	r3, [r4, #0]
    9da8:	2b00      	cmp	r3, #0
    9daa:	d147      	bne.n	9e3c <_svfiprintf_r+0xdc>
    9dac:	1ba3      	subs	r3, r4, r6
    9dae:	9304      	str	r3, [sp, #16]
    9db0:	d00d      	beq.n	9dce <_svfiprintf_r+0x6e>
    9db2:	1ba3      	subs	r3, r4, r6
    9db4:	0032      	movs	r2, r6
    9db6:	0039      	movs	r1, r7
    9db8:	9802      	ldr	r0, [sp, #8]
    9dba:	f7ff ff6f 	bl	9c9c <__ssputs_r>
    9dbe:	1c43      	adds	r3, r0, #1
    9dc0:	d100      	bne.n	9dc4 <_svfiprintf_r+0x64>
    9dc2:	e0b5      	b.n	9f30 <_svfiprintf_r+0x1d0>
    9dc4:	696a      	ldr	r2, [r5, #20]
    9dc6:	9b04      	ldr	r3, [sp, #16]
    9dc8:	4694      	mov	ip, r2
    9dca:	4463      	add	r3, ip
    9dcc:	616b      	str	r3, [r5, #20]
    9dce:	7823      	ldrb	r3, [r4, #0]
    9dd0:	2b00      	cmp	r3, #0
    9dd2:	d100      	bne.n	9dd6 <_svfiprintf_r+0x76>
    9dd4:	e0ac      	b.n	9f30 <_svfiprintf_r+0x1d0>
    9dd6:	2201      	movs	r2, #1
    9dd8:	2300      	movs	r3, #0
    9dda:	4252      	negs	r2, r2
    9ddc:	606a      	str	r2, [r5, #4]
    9dde:	a902      	add	r1, sp, #8
    9de0:	3254      	adds	r2, #84	; 0x54
    9de2:	1852      	adds	r2, r2, r1
    9de4:	3401      	adds	r4, #1
    9de6:	602b      	str	r3, [r5, #0]
    9de8:	60eb      	str	r3, [r5, #12]
    9dea:	60ab      	str	r3, [r5, #8]
    9dec:	7013      	strb	r3, [r2, #0]
    9dee:	65ab      	str	r3, [r5, #88]	; 0x58
    9df0:	4e58      	ldr	r6, [pc, #352]	; (9f54 <_svfiprintf_r+0x1f4>)
    9df2:	2205      	movs	r2, #5
    9df4:	7821      	ldrb	r1, [r4, #0]
    9df6:	0030      	movs	r0, r6
    9df8:	f000 fc3e 	bl	a678 <memchr>
    9dfc:	1c62      	adds	r2, r4, #1
    9dfe:	2800      	cmp	r0, #0
    9e00:	d120      	bne.n	9e44 <_svfiprintf_r+0xe4>
    9e02:	6829      	ldr	r1, [r5, #0]
    9e04:	06cb      	lsls	r3, r1, #27
    9e06:	d504      	bpl.n	9e12 <_svfiprintf_r+0xb2>
    9e08:	2353      	movs	r3, #83	; 0x53
    9e0a:	ae02      	add	r6, sp, #8
    9e0c:	3020      	adds	r0, #32
    9e0e:	199b      	adds	r3, r3, r6
    9e10:	7018      	strb	r0, [r3, #0]
    9e12:	070b      	lsls	r3, r1, #28
    9e14:	d504      	bpl.n	9e20 <_svfiprintf_r+0xc0>
    9e16:	2353      	movs	r3, #83	; 0x53
    9e18:	202b      	movs	r0, #43	; 0x2b
    9e1a:	ae02      	add	r6, sp, #8
    9e1c:	199b      	adds	r3, r3, r6
    9e1e:	7018      	strb	r0, [r3, #0]
    9e20:	7823      	ldrb	r3, [r4, #0]
    9e22:	2b2a      	cmp	r3, #42	; 0x2a
    9e24:	d016      	beq.n	9e54 <_svfiprintf_r+0xf4>
    9e26:	2000      	movs	r0, #0
    9e28:	210a      	movs	r1, #10
    9e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e2c:	7822      	ldrb	r2, [r4, #0]
    9e2e:	3a30      	subs	r2, #48	; 0x30
    9e30:	2a09      	cmp	r2, #9
    9e32:	d955      	bls.n	9ee0 <_svfiprintf_r+0x180>
    9e34:	2800      	cmp	r0, #0
    9e36:	d015      	beq.n	9e64 <_svfiprintf_r+0x104>
    9e38:	9309      	str	r3, [sp, #36]	; 0x24
    9e3a:	e013      	b.n	9e64 <_svfiprintf_r+0x104>
    9e3c:	2b25      	cmp	r3, #37	; 0x25
    9e3e:	d0b5      	beq.n	9dac <_svfiprintf_r+0x4c>
    9e40:	3401      	adds	r4, #1
    9e42:	e7b0      	b.n	9da6 <_svfiprintf_r+0x46>
    9e44:	2301      	movs	r3, #1
    9e46:	1b80      	subs	r0, r0, r6
    9e48:	4083      	lsls	r3, r0
    9e4a:	6829      	ldr	r1, [r5, #0]
    9e4c:	0014      	movs	r4, r2
    9e4e:	430b      	orrs	r3, r1
    9e50:	602b      	str	r3, [r5, #0]
    9e52:	e7cd      	b.n	9df0 <_svfiprintf_r+0x90>
    9e54:	9b05      	ldr	r3, [sp, #20]
    9e56:	1d18      	adds	r0, r3, #4
    9e58:	681b      	ldr	r3, [r3, #0]
    9e5a:	9005      	str	r0, [sp, #20]
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	db39      	blt.n	9ed4 <_svfiprintf_r+0x174>
    9e60:	9309      	str	r3, [sp, #36]	; 0x24
    9e62:	0014      	movs	r4, r2
    9e64:	7823      	ldrb	r3, [r4, #0]
    9e66:	2b2e      	cmp	r3, #46	; 0x2e
    9e68:	d10b      	bne.n	9e82 <_svfiprintf_r+0x122>
    9e6a:	7863      	ldrb	r3, [r4, #1]
    9e6c:	1c62      	adds	r2, r4, #1
    9e6e:	2b2a      	cmp	r3, #42	; 0x2a
    9e70:	d13e      	bne.n	9ef0 <_svfiprintf_r+0x190>
    9e72:	9b05      	ldr	r3, [sp, #20]
    9e74:	3402      	adds	r4, #2
    9e76:	1d1a      	adds	r2, r3, #4
    9e78:	681b      	ldr	r3, [r3, #0]
    9e7a:	9205      	str	r2, [sp, #20]
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	db34      	blt.n	9eea <_svfiprintf_r+0x18a>
    9e80:	9307      	str	r3, [sp, #28]
    9e82:	4e35      	ldr	r6, [pc, #212]	; (9f58 <_svfiprintf_r+0x1f8>)
    9e84:	7821      	ldrb	r1, [r4, #0]
    9e86:	2203      	movs	r2, #3
    9e88:	0030      	movs	r0, r6
    9e8a:	f000 fbf5 	bl	a678 <memchr>
    9e8e:	2800      	cmp	r0, #0
    9e90:	d006      	beq.n	9ea0 <_svfiprintf_r+0x140>
    9e92:	2340      	movs	r3, #64	; 0x40
    9e94:	1b80      	subs	r0, r0, r6
    9e96:	4083      	lsls	r3, r0
    9e98:	682a      	ldr	r2, [r5, #0]
    9e9a:	3401      	adds	r4, #1
    9e9c:	4313      	orrs	r3, r2
    9e9e:	602b      	str	r3, [r5, #0]
    9ea0:	7821      	ldrb	r1, [r4, #0]
    9ea2:	2206      	movs	r2, #6
    9ea4:	482d      	ldr	r0, [pc, #180]	; (9f5c <_svfiprintf_r+0x1fc>)
    9ea6:	1c66      	adds	r6, r4, #1
    9ea8:	7629      	strb	r1, [r5, #24]
    9eaa:	f000 fbe5 	bl	a678 <memchr>
    9eae:	2800      	cmp	r0, #0
    9eb0:	d046      	beq.n	9f40 <_svfiprintf_r+0x1e0>
    9eb2:	4b2b      	ldr	r3, [pc, #172]	; (9f60 <_svfiprintf_r+0x200>)
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d12f      	bne.n	9f18 <_svfiprintf_r+0x1b8>
    9eb8:	6829      	ldr	r1, [r5, #0]
    9eba:	9b05      	ldr	r3, [sp, #20]
    9ebc:	2207      	movs	r2, #7
    9ebe:	05c9      	lsls	r1, r1, #23
    9ec0:	d528      	bpl.n	9f14 <_svfiprintf_r+0x1b4>
    9ec2:	189b      	adds	r3, r3, r2
    9ec4:	4393      	bics	r3, r2
    9ec6:	3308      	adds	r3, #8
    9ec8:	9305      	str	r3, [sp, #20]
    9eca:	696b      	ldr	r3, [r5, #20]
    9ecc:	9a03      	ldr	r2, [sp, #12]
    9ece:	189b      	adds	r3, r3, r2
    9ed0:	616b      	str	r3, [r5, #20]
    9ed2:	e767      	b.n	9da4 <_svfiprintf_r+0x44>
    9ed4:	425b      	negs	r3, r3
    9ed6:	60eb      	str	r3, [r5, #12]
    9ed8:	2302      	movs	r3, #2
    9eda:	430b      	orrs	r3, r1
    9edc:	602b      	str	r3, [r5, #0]
    9ede:	e7c0      	b.n	9e62 <_svfiprintf_r+0x102>
    9ee0:	434b      	muls	r3, r1
    9ee2:	3401      	adds	r4, #1
    9ee4:	189b      	adds	r3, r3, r2
    9ee6:	2001      	movs	r0, #1
    9ee8:	e7a0      	b.n	9e2c <_svfiprintf_r+0xcc>
    9eea:	2301      	movs	r3, #1
    9eec:	425b      	negs	r3, r3
    9eee:	e7c7      	b.n	9e80 <_svfiprintf_r+0x120>
    9ef0:	2300      	movs	r3, #0
    9ef2:	0014      	movs	r4, r2
    9ef4:	200a      	movs	r0, #10
    9ef6:	001a      	movs	r2, r3
    9ef8:	606b      	str	r3, [r5, #4]
    9efa:	7821      	ldrb	r1, [r4, #0]
    9efc:	3930      	subs	r1, #48	; 0x30
    9efe:	2909      	cmp	r1, #9
    9f00:	d903      	bls.n	9f0a <_svfiprintf_r+0x1aa>
    9f02:	2b00      	cmp	r3, #0
    9f04:	d0bd      	beq.n	9e82 <_svfiprintf_r+0x122>
    9f06:	9207      	str	r2, [sp, #28]
    9f08:	e7bb      	b.n	9e82 <_svfiprintf_r+0x122>
    9f0a:	4342      	muls	r2, r0
    9f0c:	3401      	adds	r4, #1
    9f0e:	1852      	adds	r2, r2, r1
    9f10:	2301      	movs	r3, #1
    9f12:	e7f2      	b.n	9efa <_svfiprintf_r+0x19a>
    9f14:	3307      	adds	r3, #7
    9f16:	e7d5      	b.n	9ec4 <_svfiprintf_r+0x164>
    9f18:	ab05      	add	r3, sp, #20
    9f1a:	9300      	str	r3, [sp, #0]
    9f1c:	003a      	movs	r2, r7
    9f1e:	4b11      	ldr	r3, [pc, #68]	; (9f64 <_svfiprintf_r+0x204>)
    9f20:	0029      	movs	r1, r5
    9f22:	9802      	ldr	r0, [sp, #8]
    9f24:	e000      	b.n	9f28 <_svfiprintf_r+0x1c8>
    9f26:	bf00      	nop
    9f28:	9003      	str	r0, [sp, #12]
    9f2a:	9b03      	ldr	r3, [sp, #12]
    9f2c:	3301      	adds	r3, #1
    9f2e:	d1cc      	bne.n	9eca <_svfiprintf_r+0x16a>
    9f30:	89bb      	ldrh	r3, [r7, #12]
    9f32:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9f34:	065b      	lsls	r3, r3, #25
    9f36:	d400      	bmi.n	9f3a <_svfiprintf_r+0x1da>
    9f38:	e729      	b.n	9d8e <_svfiprintf_r+0x2e>
    9f3a:	2001      	movs	r0, #1
    9f3c:	4240      	negs	r0, r0
    9f3e:	e726      	b.n	9d8e <_svfiprintf_r+0x2e>
    9f40:	ab05      	add	r3, sp, #20
    9f42:	9300      	str	r3, [sp, #0]
    9f44:	003a      	movs	r2, r7
    9f46:	4b07      	ldr	r3, [pc, #28]	; (9f64 <_svfiprintf_r+0x204>)
    9f48:	0029      	movs	r1, r5
    9f4a:	9802      	ldr	r0, [sp, #8]
    9f4c:	f000 f9be 	bl	a2cc <_printf_i>
    9f50:	e7ea      	b.n	9f28 <_svfiprintf_r+0x1c8>
    9f52:	46c0      	nop			; (mov r8, r8)
    9f54:	0000a884 	.word	0x0000a884
    9f58:	0000a88a 	.word	0x0000a88a
    9f5c:	0000a88e 	.word	0x0000a88e
    9f60:	00000000 	.word	0x00000000
    9f64:	00009c9d 	.word	0x00009c9d

00009f68 <__sfputc_r>:
    9f68:	6893      	ldr	r3, [r2, #8]
    9f6a:	b510      	push	{r4, lr}
    9f6c:	3b01      	subs	r3, #1
    9f6e:	6093      	str	r3, [r2, #8]
    9f70:	2b00      	cmp	r3, #0
    9f72:	da05      	bge.n	9f80 <__sfputc_r+0x18>
    9f74:	6994      	ldr	r4, [r2, #24]
    9f76:	42a3      	cmp	r3, r4
    9f78:	db08      	blt.n	9f8c <__sfputc_r+0x24>
    9f7a:	b2cb      	uxtb	r3, r1
    9f7c:	2b0a      	cmp	r3, #10
    9f7e:	d005      	beq.n	9f8c <__sfputc_r+0x24>
    9f80:	6813      	ldr	r3, [r2, #0]
    9f82:	1c58      	adds	r0, r3, #1
    9f84:	6010      	str	r0, [r2, #0]
    9f86:	7019      	strb	r1, [r3, #0]
    9f88:	b2c8      	uxtb	r0, r1
    9f8a:	bd10      	pop	{r4, pc}
    9f8c:	f7ff fb0e 	bl	95ac <__swbuf_r>
    9f90:	e7fb      	b.n	9f8a <__sfputc_r+0x22>

00009f92 <__sfputs_r>:
    9f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f94:	0006      	movs	r6, r0
    9f96:	000f      	movs	r7, r1
    9f98:	0014      	movs	r4, r2
    9f9a:	18d5      	adds	r5, r2, r3
    9f9c:	42ac      	cmp	r4, r5
    9f9e:	d101      	bne.n	9fa4 <__sfputs_r+0x12>
    9fa0:	2000      	movs	r0, #0
    9fa2:	e007      	b.n	9fb4 <__sfputs_r+0x22>
    9fa4:	7821      	ldrb	r1, [r4, #0]
    9fa6:	003a      	movs	r2, r7
    9fa8:	0030      	movs	r0, r6
    9faa:	f7ff ffdd 	bl	9f68 <__sfputc_r>
    9fae:	3401      	adds	r4, #1
    9fb0:	1c43      	adds	r3, r0, #1
    9fb2:	d1f3      	bne.n	9f9c <__sfputs_r+0xa>
    9fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009fb8 <_vfiprintf_r>:
    9fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fba:	b09f      	sub	sp, #124	; 0x7c
    9fbc:	0006      	movs	r6, r0
    9fbe:	000f      	movs	r7, r1
    9fc0:	0014      	movs	r4, r2
    9fc2:	9305      	str	r3, [sp, #20]
    9fc4:	2800      	cmp	r0, #0
    9fc6:	d004      	beq.n	9fd2 <_vfiprintf_r+0x1a>
    9fc8:	6983      	ldr	r3, [r0, #24]
    9fca:	2b00      	cmp	r3, #0
    9fcc:	d101      	bne.n	9fd2 <_vfiprintf_r+0x1a>
    9fce:	f7ff fcb1 	bl	9934 <__sinit>
    9fd2:	4b7f      	ldr	r3, [pc, #508]	; (a1d0 <_vfiprintf_r+0x218>)
    9fd4:	429f      	cmp	r7, r3
    9fd6:	d15c      	bne.n	a092 <_vfiprintf_r+0xda>
    9fd8:	6877      	ldr	r7, [r6, #4]
    9fda:	89bb      	ldrh	r3, [r7, #12]
    9fdc:	071b      	lsls	r3, r3, #28
    9fde:	d562      	bpl.n	a0a6 <_vfiprintf_r+0xee>
    9fe0:	693b      	ldr	r3, [r7, #16]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d05f      	beq.n	a0a6 <_vfiprintf_r+0xee>
    9fe6:	2300      	movs	r3, #0
    9fe8:	ad06      	add	r5, sp, #24
    9fea:	616b      	str	r3, [r5, #20]
    9fec:	3320      	adds	r3, #32
    9fee:	766b      	strb	r3, [r5, #25]
    9ff0:	3310      	adds	r3, #16
    9ff2:	76ab      	strb	r3, [r5, #26]
    9ff4:	9402      	str	r4, [sp, #8]
    9ff6:	9c02      	ldr	r4, [sp, #8]
    9ff8:	7823      	ldrb	r3, [r4, #0]
    9ffa:	2b00      	cmp	r3, #0
    9ffc:	d15d      	bne.n	a0ba <_vfiprintf_r+0x102>
    9ffe:	9b02      	ldr	r3, [sp, #8]
    a000:	1ae3      	subs	r3, r4, r3
    a002:	9304      	str	r3, [sp, #16]
    a004:	d00d      	beq.n	a022 <_vfiprintf_r+0x6a>
    a006:	9b04      	ldr	r3, [sp, #16]
    a008:	9a02      	ldr	r2, [sp, #8]
    a00a:	0039      	movs	r1, r7
    a00c:	0030      	movs	r0, r6
    a00e:	f7ff ffc0 	bl	9f92 <__sfputs_r>
    a012:	1c43      	adds	r3, r0, #1
    a014:	d100      	bne.n	a018 <_vfiprintf_r+0x60>
    a016:	e0cc      	b.n	a1b2 <_vfiprintf_r+0x1fa>
    a018:	696a      	ldr	r2, [r5, #20]
    a01a:	9b04      	ldr	r3, [sp, #16]
    a01c:	4694      	mov	ip, r2
    a01e:	4463      	add	r3, ip
    a020:	616b      	str	r3, [r5, #20]
    a022:	7823      	ldrb	r3, [r4, #0]
    a024:	2b00      	cmp	r3, #0
    a026:	d100      	bne.n	a02a <_vfiprintf_r+0x72>
    a028:	e0c3      	b.n	a1b2 <_vfiprintf_r+0x1fa>
    a02a:	2201      	movs	r2, #1
    a02c:	2300      	movs	r3, #0
    a02e:	4252      	negs	r2, r2
    a030:	606a      	str	r2, [r5, #4]
    a032:	a902      	add	r1, sp, #8
    a034:	3254      	adds	r2, #84	; 0x54
    a036:	1852      	adds	r2, r2, r1
    a038:	3401      	adds	r4, #1
    a03a:	602b      	str	r3, [r5, #0]
    a03c:	60eb      	str	r3, [r5, #12]
    a03e:	60ab      	str	r3, [r5, #8]
    a040:	7013      	strb	r3, [r2, #0]
    a042:	65ab      	str	r3, [r5, #88]	; 0x58
    a044:	7821      	ldrb	r1, [r4, #0]
    a046:	2205      	movs	r2, #5
    a048:	4862      	ldr	r0, [pc, #392]	; (a1d4 <_vfiprintf_r+0x21c>)
    a04a:	f000 fb15 	bl	a678 <memchr>
    a04e:	1c63      	adds	r3, r4, #1
    a050:	469c      	mov	ip, r3
    a052:	2800      	cmp	r0, #0
    a054:	d135      	bne.n	a0c2 <_vfiprintf_r+0x10a>
    a056:	6829      	ldr	r1, [r5, #0]
    a058:	06cb      	lsls	r3, r1, #27
    a05a:	d504      	bpl.n	a066 <_vfiprintf_r+0xae>
    a05c:	2353      	movs	r3, #83	; 0x53
    a05e:	aa02      	add	r2, sp, #8
    a060:	3020      	adds	r0, #32
    a062:	189b      	adds	r3, r3, r2
    a064:	7018      	strb	r0, [r3, #0]
    a066:	070b      	lsls	r3, r1, #28
    a068:	d504      	bpl.n	a074 <_vfiprintf_r+0xbc>
    a06a:	2353      	movs	r3, #83	; 0x53
    a06c:	202b      	movs	r0, #43	; 0x2b
    a06e:	aa02      	add	r2, sp, #8
    a070:	189b      	adds	r3, r3, r2
    a072:	7018      	strb	r0, [r3, #0]
    a074:	7823      	ldrb	r3, [r4, #0]
    a076:	2b2a      	cmp	r3, #42	; 0x2a
    a078:	d02c      	beq.n	a0d4 <_vfiprintf_r+0x11c>
    a07a:	2000      	movs	r0, #0
    a07c:	210a      	movs	r1, #10
    a07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a080:	7822      	ldrb	r2, [r4, #0]
    a082:	3a30      	subs	r2, #48	; 0x30
    a084:	2a09      	cmp	r2, #9
    a086:	d800      	bhi.n	a08a <_vfiprintf_r+0xd2>
    a088:	e06b      	b.n	a162 <_vfiprintf_r+0x1aa>
    a08a:	2800      	cmp	r0, #0
    a08c:	d02a      	beq.n	a0e4 <_vfiprintf_r+0x12c>
    a08e:	9309      	str	r3, [sp, #36]	; 0x24
    a090:	e028      	b.n	a0e4 <_vfiprintf_r+0x12c>
    a092:	4b51      	ldr	r3, [pc, #324]	; (a1d8 <_vfiprintf_r+0x220>)
    a094:	429f      	cmp	r7, r3
    a096:	d101      	bne.n	a09c <_vfiprintf_r+0xe4>
    a098:	68b7      	ldr	r7, [r6, #8]
    a09a:	e79e      	b.n	9fda <_vfiprintf_r+0x22>
    a09c:	4b4f      	ldr	r3, [pc, #316]	; (a1dc <_vfiprintf_r+0x224>)
    a09e:	429f      	cmp	r7, r3
    a0a0:	d19b      	bne.n	9fda <_vfiprintf_r+0x22>
    a0a2:	68f7      	ldr	r7, [r6, #12]
    a0a4:	e799      	b.n	9fda <_vfiprintf_r+0x22>
    a0a6:	0039      	movs	r1, r7
    a0a8:	0030      	movs	r0, r6
    a0aa:	f7ff fad5 	bl	9658 <__swsetup_r>
    a0ae:	2800      	cmp	r0, #0
    a0b0:	d099      	beq.n	9fe6 <_vfiprintf_r+0x2e>
    a0b2:	2001      	movs	r0, #1
    a0b4:	4240      	negs	r0, r0
    a0b6:	b01f      	add	sp, #124	; 0x7c
    a0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0ba:	2b25      	cmp	r3, #37	; 0x25
    a0bc:	d09f      	beq.n	9ffe <_vfiprintf_r+0x46>
    a0be:	3401      	adds	r4, #1
    a0c0:	e79a      	b.n	9ff8 <_vfiprintf_r+0x40>
    a0c2:	4b44      	ldr	r3, [pc, #272]	; (a1d4 <_vfiprintf_r+0x21c>)
    a0c4:	6829      	ldr	r1, [r5, #0]
    a0c6:	1ac0      	subs	r0, r0, r3
    a0c8:	2301      	movs	r3, #1
    a0ca:	4083      	lsls	r3, r0
    a0cc:	430b      	orrs	r3, r1
    a0ce:	602b      	str	r3, [r5, #0]
    a0d0:	4664      	mov	r4, ip
    a0d2:	e7b7      	b.n	a044 <_vfiprintf_r+0x8c>
    a0d4:	9b05      	ldr	r3, [sp, #20]
    a0d6:	1d18      	adds	r0, r3, #4
    a0d8:	681b      	ldr	r3, [r3, #0]
    a0da:	9005      	str	r0, [sp, #20]
    a0dc:	2b00      	cmp	r3, #0
    a0de:	db3a      	blt.n	a156 <_vfiprintf_r+0x19e>
    a0e0:	9309      	str	r3, [sp, #36]	; 0x24
    a0e2:	4664      	mov	r4, ip
    a0e4:	7823      	ldrb	r3, [r4, #0]
    a0e6:	2b2e      	cmp	r3, #46	; 0x2e
    a0e8:	d10b      	bne.n	a102 <_vfiprintf_r+0x14a>
    a0ea:	7863      	ldrb	r3, [r4, #1]
    a0ec:	1c62      	adds	r2, r4, #1
    a0ee:	2b2a      	cmp	r3, #42	; 0x2a
    a0f0:	d13f      	bne.n	a172 <_vfiprintf_r+0x1ba>
    a0f2:	9b05      	ldr	r3, [sp, #20]
    a0f4:	3402      	adds	r4, #2
    a0f6:	1d1a      	adds	r2, r3, #4
    a0f8:	681b      	ldr	r3, [r3, #0]
    a0fa:	9205      	str	r2, [sp, #20]
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	db35      	blt.n	a16c <_vfiprintf_r+0x1b4>
    a100:	9307      	str	r3, [sp, #28]
    a102:	7821      	ldrb	r1, [r4, #0]
    a104:	2203      	movs	r2, #3
    a106:	4836      	ldr	r0, [pc, #216]	; (a1e0 <_vfiprintf_r+0x228>)
    a108:	f000 fab6 	bl	a678 <memchr>
    a10c:	2800      	cmp	r0, #0
    a10e:	d007      	beq.n	a120 <_vfiprintf_r+0x168>
    a110:	4b33      	ldr	r3, [pc, #204]	; (a1e0 <_vfiprintf_r+0x228>)
    a112:	682a      	ldr	r2, [r5, #0]
    a114:	1ac0      	subs	r0, r0, r3
    a116:	2340      	movs	r3, #64	; 0x40
    a118:	4083      	lsls	r3, r0
    a11a:	4313      	orrs	r3, r2
    a11c:	602b      	str	r3, [r5, #0]
    a11e:	3401      	adds	r4, #1
    a120:	7821      	ldrb	r1, [r4, #0]
    a122:	1c63      	adds	r3, r4, #1
    a124:	2206      	movs	r2, #6
    a126:	482f      	ldr	r0, [pc, #188]	; (a1e4 <_vfiprintf_r+0x22c>)
    a128:	9302      	str	r3, [sp, #8]
    a12a:	7629      	strb	r1, [r5, #24]
    a12c:	f000 faa4 	bl	a678 <memchr>
    a130:	2800      	cmp	r0, #0
    a132:	d044      	beq.n	a1be <_vfiprintf_r+0x206>
    a134:	4b2c      	ldr	r3, [pc, #176]	; (a1e8 <_vfiprintf_r+0x230>)
    a136:	2b00      	cmp	r3, #0
    a138:	d12f      	bne.n	a19a <_vfiprintf_r+0x1e2>
    a13a:	6829      	ldr	r1, [r5, #0]
    a13c:	9b05      	ldr	r3, [sp, #20]
    a13e:	2207      	movs	r2, #7
    a140:	05c9      	lsls	r1, r1, #23
    a142:	d528      	bpl.n	a196 <_vfiprintf_r+0x1de>
    a144:	189b      	adds	r3, r3, r2
    a146:	4393      	bics	r3, r2
    a148:	3308      	adds	r3, #8
    a14a:	9305      	str	r3, [sp, #20]
    a14c:	696b      	ldr	r3, [r5, #20]
    a14e:	9a03      	ldr	r2, [sp, #12]
    a150:	189b      	adds	r3, r3, r2
    a152:	616b      	str	r3, [r5, #20]
    a154:	e74f      	b.n	9ff6 <_vfiprintf_r+0x3e>
    a156:	425b      	negs	r3, r3
    a158:	60eb      	str	r3, [r5, #12]
    a15a:	2302      	movs	r3, #2
    a15c:	430b      	orrs	r3, r1
    a15e:	602b      	str	r3, [r5, #0]
    a160:	e7bf      	b.n	a0e2 <_vfiprintf_r+0x12a>
    a162:	434b      	muls	r3, r1
    a164:	3401      	adds	r4, #1
    a166:	189b      	adds	r3, r3, r2
    a168:	2001      	movs	r0, #1
    a16a:	e789      	b.n	a080 <_vfiprintf_r+0xc8>
    a16c:	2301      	movs	r3, #1
    a16e:	425b      	negs	r3, r3
    a170:	e7c6      	b.n	a100 <_vfiprintf_r+0x148>
    a172:	2300      	movs	r3, #0
    a174:	0014      	movs	r4, r2
    a176:	200a      	movs	r0, #10
    a178:	001a      	movs	r2, r3
    a17a:	606b      	str	r3, [r5, #4]
    a17c:	7821      	ldrb	r1, [r4, #0]
    a17e:	3930      	subs	r1, #48	; 0x30
    a180:	2909      	cmp	r1, #9
    a182:	d903      	bls.n	a18c <_vfiprintf_r+0x1d4>
    a184:	2b00      	cmp	r3, #0
    a186:	d0bc      	beq.n	a102 <_vfiprintf_r+0x14a>
    a188:	9207      	str	r2, [sp, #28]
    a18a:	e7ba      	b.n	a102 <_vfiprintf_r+0x14a>
    a18c:	4342      	muls	r2, r0
    a18e:	3401      	adds	r4, #1
    a190:	1852      	adds	r2, r2, r1
    a192:	2301      	movs	r3, #1
    a194:	e7f2      	b.n	a17c <_vfiprintf_r+0x1c4>
    a196:	3307      	adds	r3, #7
    a198:	e7d5      	b.n	a146 <_vfiprintf_r+0x18e>
    a19a:	ab05      	add	r3, sp, #20
    a19c:	9300      	str	r3, [sp, #0]
    a19e:	003a      	movs	r2, r7
    a1a0:	4b12      	ldr	r3, [pc, #72]	; (a1ec <_vfiprintf_r+0x234>)
    a1a2:	0029      	movs	r1, r5
    a1a4:	0030      	movs	r0, r6
    a1a6:	e000      	b.n	a1aa <_vfiprintf_r+0x1f2>
    a1a8:	bf00      	nop
    a1aa:	9003      	str	r0, [sp, #12]
    a1ac:	9b03      	ldr	r3, [sp, #12]
    a1ae:	3301      	adds	r3, #1
    a1b0:	d1cc      	bne.n	a14c <_vfiprintf_r+0x194>
    a1b2:	89bb      	ldrh	r3, [r7, #12]
    a1b4:	065b      	lsls	r3, r3, #25
    a1b6:	d500      	bpl.n	a1ba <_vfiprintf_r+0x202>
    a1b8:	e77b      	b.n	a0b2 <_vfiprintf_r+0xfa>
    a1ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a1bc:	e77b      	b.n	a0b6 <_vfiprintf_r+0xfe>
    a1be:	ab05      	add	r3, sp, #20
    a1c0:	9300      	str	r3, [sp, #0]
    a1c2:	003a      	movs	r2, r7
    a1c4:	4b09      	ldr	r3, [pc, #36]	; (a1ec <_vfiprintf_r+0x234>)
    a1c6:	0029      	movs	r1, r5
    a1c8:	0030      	movs	r0, r6
    a1ca:	f000 f87f 	bl	a2cc <_printf_i>
    a1ce:	e7ec      	b.n	a1aa <_vfiprintf_r+0x1f2>
    a1d0:	0000a844 	.word	0x0000a844
    a1d4:	0000a884 	.word	0x0000a884
    a1d8:	0000a864 	.word	0x0000a864
    a1dc:	0000a824 	.word	0x0000a824
    a1e0:	0000a88a 	.word	0x0000a88a
    a1e4:	0000a88e 	.word	0x0000a88e
    a1e8:	00000000 	.word	0x00000000
    a1ec:	00009f93 	.word	0x00009f93

0000a1f0 <_printf_common>:
    a1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a1f2:	0015      	movs	r5, r2
    a1f4:	9301      	str	r3, [sp, #4]
    a1f6:	688a      	ldr	r2, [r1, #8]
    a1f8:	690b      	ldr	r3, [r1, #16]
    a1fa:	9000      	str	r0, [sp, #0]
    a1fc:	000c      	movs	r4, r1
    a1fe:	4293      	cmp	r3, r2
    a200:	da00      	bge.n	a204 <_printf_common+0x14>
    a202:	0013      	movs	r3, r2
    a204:	0022      	movs	r2, r4
    a206:	602b      	str	r3, [r5, #0]
    a208:	3243      	adds	r2, #67	; 0x43
    a20a:	7812      	ldrb	r2, [r2, #0]
    a20c:	2a00      	cmp	r2, #0
    a20e:	d001      	beq.n	a214 <_printf_common+0x24>
    a210:	3301      	adds	r3, #1
    a212:	602b      	str	r3, [r5, #0]
    a214:	6823      	ldr	r3, [r4, #0]
    a216:	069b      	lsls	r3, r3, #26
    a218:	d502      	bpl.n	a220 <_printf_common+0x30>
    a21a:	682b      	ldr	r3, [r5, #0]
    a21c:	3302      	adds	r3, #2
    a21e:	602b      	str	r3, [r5, #0]
    a220:	2706      	movs	r7, #6
    a222:	6823      	ldr	r3, [r4, #0]
    a224:	401f      	ands	r7, r3
    a226:	d027      	beq.n	a278 <_printf_common+0x88>
    a228:	0023      	movs	r3, r4
    a22a:	3343      	adds	r3, #67	; 0x43
    a22c:	781b      	ldrb	r3, [r3, #0]
    a22e:	1e5a      	subs	r2, r3, #1
    a230:	4193      	sbcs	r3, r2
    a232:	6822      	ldr	r2, [r4, #0]
    a234:	0692      	lsls	r2, r2, #26
    a236:	d430      	bmi.n	a29a <_printf_common+0xaa>
    a238:	0022      	movs	r2, r4
    a23a:	9901      	ldr	r1, [sp, #4]
    a23c:	3243      	adds	r2, #67	; 0x43
    a23e:	9800      	ldr	r0, [sp, #0]
    a240:	9e08      	ldr	r6, [sp, #32]
    a242:	47b0      	blx	r6
    a244:	1c43      	adds	r3, r0, #1
    a246:	d025      	beq.n	a294 <_printf_common+0xa4>
    a248:	2306      	movs	r3, #6
    a24a:	6820      	ldr	r0, [r4, #0]
    a24c:	682a      	ldr	r2, [r5, #0]
    a24e:	68e1      	ldr	r1, [r4, #12]
    a250:	4003      	ands	r3, r0
    a252:	2500      	movs	r5, #0
    a254:	2b04      	cmp	r3, #4
    a256:	d103      	bne.n	a260 <_printf_common+0x70>
    a258:	1a8d      	subs	r5, r1, r2
    a25a:	43eb      	mvns	r3, r5
    a25c:	17db      	asrs	r3, r3, #31
    a25e:	401d      	ands	r5, r3
    a260:	68a3      	ldr	r3, [r4, #8]
    a262:	6922      	ldr	r2, [r4, #16]
    a264:	4293      	cmp	r3, r2
    a266:	dd01      	ble.n	a26c <_printf_common+0x7c>
    a268:	1a9b      	subs	r3, r3, r2
    a26a:	18ed      	adds	r5, r5, r3
    a26c:	2700      	movs	r7, #0
    a26e:	42bd      	cmp	r5, r7
    a270:	d120      	bne.n	a2b4 <_printf_common+0xc4>
    a272:	2000      	movs	r0, #0
    a274:	e010      	b.n	a298 <_printf_common+0xa8>
    a276:	3701      	adds	r7, #1
    a278:	68e3      	ldr	r3, [r4, #12]
    a27a:	682a      	ldr	r2, [r5, #0]
    a27c:	1a9b      	subs	r3, r3, r2
    a27e:	429f      	cmp	r7, r3
    a280:	dad2      	bge.n	a228 <_printf_common+0x38>
    a282:	0022      	movs	r2, r4
    a284:	2301      	movs	r3, #1
    a286:	3219      	adds	r2, #25
    a288:	9901      	ldr	r1, [sp, #4]
    a28a:	9800      	ldr	r0, [sp, #0]
    a28c:	9e08      	ldr	r6, [sp, #32]
    a28e:	47b0      	blx	r6
    a290:	1c43      	adds	r3, r0, #1
    a292:	d1f0      	bne.n	a276 <_printf_common+0x86>
    a294:	2001      	movs	r0, #1
    a296:	4240      	negs	r0, r0
    a298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a29a:	2030      	movs	r0, #48	; 0x30
    a29c:	18e1      	adds	r1, r4, r3
    a29e:	3143      	adds	r1, #67	; 0x43
    a2a0:	7008      	strb	r0, [r1, #0]
    a2a2:	0021      	movs	r1, r4
    a2a4:	1c5a      	adds	r2, r3, #1
    a2a6:	3145      	adds	r1, #69	; 0x45
    a2a8:	7809      	ldrb	r1, [r1, #0]
    a2aa:	18a2      	adds	r2, r4, r2
    a2ac:	3243      	adds	r2, #67	; 0x43
    a2ae:	3302      	adds	r3, #2
    a2b0:	7011      	strb	r1, [r2, #0]
    a2b2:	e7c1      	b.n	a238 <_printf_common+0x48>
    a2b4:	0022      	movs	r2, r4
    a2b6:	2301      	movs	r3, #1
    a2b8:	321a      	adds	r2, #26
    a2ba:	9901      	ldr	r1, [sp, #4]
    a2bc:	9800      	ldr	r0, [sp, #0]
    a2be:	9e08      	ldr	r6, [sp, #32]
    a2c0:	47b0      	blx	r6
    a2c2:	1c43      	adds	r3, r0, #1
    a2c4:	d0e6      	beq.n	a294 <_printf_common+0xa4>
    a2c6:	3701      	adds	r7, #1
    a2c8:	e7d1      	b.n	a26e <_printf_common+0x7e>
	...

0000a2cc <_printf_i>:
    a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ce:	b08b      	sub	sp, #44	; 0x2c
    a2d0:	9206      	str	r2, [sp, #24]
    a2d2:	000a      	movs	r2, r1
    a2d4:	3243      	adds	r2, #67	; 0x43
    a2d6:	9307      	str	r3, [sp, #28]
    a2d8:	9005      	str	r0, [sp, #20]
    a2da:	9204      	str	r2, [sp, #16]
    a2dc:	7e0a      	ldrb	r2, [r1, #24]
    a2de:	000c      	movs	r4, r1
    a2e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a2e2:	2a6e      	cmp	r2, #110	; 0x6e
    a2e4:	d100      	bne.n	a2e8 <_printf_i+0x1c>
    a2e6:	e08f      	b.n	a408 <_printf_i+0x13c>
    a2e8:	d817      	bhi.n	a31a <_printf_i+0x4e>
    a2ea:	2a63      	cmp	r2, #99	; 0x63
    a2ec:	d02c      	beq.n	a348 <_printf_i+0x7c>
    a2ee:	d808      	bhi.n	a302 <_printf_i+0x36>
    a2f0:	2a00      	cmp	r2, #0
    a2f2:	d100      	bne.n	a2f6 <_printf_i+0x2a>
    a2f4:	e099      	b.n	a42a <_printf_i+0x15e>
    a2f6:	2a58      	cmp	r2, #88	; 0x58
    a2f8:	d054      	beq.n	a3a4 <_printf_i+0xd8>
    a2fa:	0026      	movs	r6, r4
    a2fc:	3642      	adds	r6, #66	; 0x42
    a2fe:	7032      	strb	r2, [r6, #0]
    a300:	e029      	b.n	a356 <_printf_i+0x8a>
    a302:	2a64      	cmp	r2, #100	; 0x64
    a304:	d001      	beq.n	a30a <_printf_i+0x3e>
    a306:	2a69      	cmp	r2, #105	; 0x69
    a308:	d1f7      	bne.n	a2fa <_printf_i+0x2e>
    a30a:	6821      	ldr	r1, [r4, #0]
    a30c:	681a      	ldr	r2, [r3, #0]
    a30e:	0608      	lsls	r0, r1, #24
    a310:	d523      	bpl.n	a35a <_printf_i+0x8e>
    a312:	1d11      	adds	r1, r2, #4
    a314:	6019      	str	r1, [r3, #0]
    a316:	6815      	ldr	r5, [r2, #0]
    a318:	e025      	b.n	a366 <_printf_i+0x9a>
    a31a:	2a73      	cmp	r2, #115	; 0x73
    a31c:	d100      	bne.n	a320 <_printf_i+0x54>
    a31e:	e088      	b.n	a432 <_printf_i+0x166>
    a320:	d808      	bhi.n	a334 <_printf_i+0x68>
    a322:	2a6f      	cmp	r2, #111	; 0x6f
    a324:	d029      	beq.n	a37a <_printf_i+0xae>
    a326:	2a70      	cmp	r2, #112	; 0x70
    a328:	d1e7      	bne.n	a2fa <_printf_i+0x2e>
    a32a:	2220      	movs	r2, #32
    a32c:	6809      	ldr	r1, [r1, #0]
    a32e:	430a      	orrs	r2, r1
    a330:	6022      	str	r2, [r4, #0]
    a332:	e003      	b.n	a33c <_printf_i+0x70>
    a334:	2a75      	cmp	r2, #117	; 0x75
    a336:	d020      	beq.n	a37a <_printf_i+0xae>
    a338:	2a78      	cmp	r2, #120	; 0x78
    a33a:	d1de      	bne.n	a2fa <_printf_i+0x2e>
    a33c:	0022      	movs	r2, r4
    a33e:	2178      	movs	r1, #120	; 0x78
    a340:	3245      	adds	r2, #69	; 0x45
    a342:	7011      	strb	r1, [r2, #0]
    a344:	4a6c      	ldr	r2, [pc, #432]	; (a4f8 <_printf_i+0x22c>)
    a346:	e030      	b.n	a3aa <_printf_i+0xde>
    a348:	000e      	movs	r6, r1
    a34a:	681a      	ldr	r2, [r3, #0]
    a34c:	3642      	adds	r6, #66	; 0x42
    a34e:	1d11      	adds	r1, r2, #4
    a350:	6019      	str	r1, [r3, #0]
    a352:	6813      	ldr	r3, [r2, #0]
    a354:	7033      	strb	r3, [r6, #0]
    a356:	2301      	movs	r3, #1
    a358:	e079      	b.n	a44e <_printf_i+0x182>
    a35a:	0649      	lsls	r1, r1, #25
    a35c:	d5d9      	bpl.n	a312 <_printf_i+0x46>
    a35e:	1d11      	adds	r1, r2, #4
    a360:	6019      	str	r1, [r3, #0]
    a362:	2300      	movs	r3, #0
    a364:	5ed5      	ldrsh	r5, [r2, r3]
    a366:	2d00      	cmp	r5, #0
    a368:	da03      	bge.n	a372 <_printf_i+0xa6>
    a36a:	232d      	movs	r3, #45	; 0x2d
    a36c:	9a04      	ldr	r2, [sp, #16]
    a36e:	426d      	negs	r5, r5
    a370:	7013      	strb	r3, [r2, #0]
    a372:	4b62      	ldr	r3, [pc, #392]	; (a4fc <_printf_i+0x230>)
    a374:	270a      	movs	r7, #10
    a376:	9303      	str	r3, [sp, #12]
    a378:	e02f      	b.n	a3da <_printf_i+0x10e>
    a37a:	6820      	ldr	r0, [r4, #0]
    a37c:	6819      	ldr	r1, [r3, #0]
    a37e:	0605      	lsls	r5, r0, #24
    a380:	d503      	bpl.n	a38a <_printf_i+0xbe>
    a382:	1d08      	adds	r0, r1, #4
    a384:	6018      	str	r0, [r3, #0]
    a386:	680d      	ldr	r5, [r1, #0]
    a388:	e005      	b.n	a396 <_printf_i+0xca>
    a38a:	0640      	lsls	r0, r0, #25
    a38c:	d5f9      	bpl.n	a382 <_printf_i+0xb6>
    a38e:	680d      	ldr	r5, [r1, #0]
    a390:	1d08      	adds	r0, r1, #4
    a392:	6018      	str	r0, [r3, #0]
    a394:	b2ad      	uxth	r5, r5
    a396:	4b59      	ldr	r3, [pc, #356]	; (a4fc <_printf_i+0x230>)
    a398:	2708      	movs	r7, #8
    a39a:	9303      	str	r3, [sp, #12]
    a39c:	2a6f      	cmp	r2, #111	; 0x6f
    a39e:	d018      	beq.n	a3d2 <_printf_i+0x106>
    a3a0:	270a      	movs	r7, #10
    a3a2:	e016      	b.n	a3d2 <_printf_i+0x106>
    a3a4:	3145      	adds	r1, #69	; 0x45
    a3a6:	700a      	strb	r2, [r1, #0]
    a3a8:	4a54      	ldr	r2, [pc, #336]	; (a4fc <_printf_i+0x230>)
    a3aa:	9203      	str	r2, [sp, #12]
    a3ac:	681a      	ldr	r2, [r3, #0]
    a3ae:	6821      	ldr	r1, [r4, #0]
    a3b0:	1d10      	adds	r0, r2, #4
    a3b2:	6018      	str	r0, [r3, #0]
    a3b4:	6815      	ldr	r5, [r2, #0]
    a3b6:	0608      	lsls	r0, r1, #24
    a3b8:	d522      	bpl.n	a400 <_printf_i+0x134>
    a3ba:	07cb      	lsls	r3, r1, #31
    a3bc:	d502      	bpl.n	a3c4 <_printf_i+0xf8>
    a3be:	2320      	movs	r3, #32
    a3c0:	4319      	orrs	r1, r3
    a3c2:	6021      	str	r1, [r4, #0]
    a3c4:	2710      	movs	r7, #16
    a3c6:	2d00      	cmp	r5, #0
    a3c8:	d103      	bne.n	a3d2 <_printf_i+0x106>
    a3ca:	2320      	movs	r3, #32
    a3cc:	6822      	ldr	r2, [r4, #0]
    a3ce:	439a      	bics	r2, r3
    a3d0:	6022      	str	r2, [r4, #0]
    a3d2:	0023      	movs	r3, r4
    a3d4:	2200      	movs	r2, #0
    a3d6:	3343      	adds	r3, #67	; 0x43
    a3d8:	701a      	strb	r2, [r3, #0]
    a3da:	6863      	ldr	r3, [r4, #4]
    a3dc:	60a3      	str	r3, [r4, #8]
    a3de:	2b00      	cmp	r3, #0
    a3e0:	db5c      	blt.n	a49c <_printf_i+0x1d0>
    a3e2:	2204      	movs	r2, #4
    a3e4:	6821      	ldr	r1, [r4, #0]
    a3e6:	4391      	bics	r1, r2
    a3e8:	6021      	str	r1, [r4, #0]
    a3ea:	2d00      	cmp	r5, #0
    a3ec:	d158      	bne.n	a4a0 <_printf_i+0x1d4>
    a3ee:	9e04      	ldr	r6, [sp, #16]
    a3f0:	2b00      	cmp	r3, #0
    a3f2:	d064      	beq.n	a4be <_printf_i+0x1f2>
    a3f4:	0026      	movs	r6, r4
    a3f6:	9b03      	ldr	r3, [sp, #12]
    a3f8:	3642      	adds	r6, #66	; 0x42
    a3fa:	781b      	ldrb	r3, [r3, #0]
    a3fc:	7033      	strb	r3, [r6, #0]
    a3fe:	e05e      	b.n	a4be <_printf_i+0x1f2>
    a400:	0648      	lsls	r0, r1, #25
    a402:	d5da      	bpl.n	a3ba <_printf_i+0xee>
    a404:	b2ad      	uxth	r5, r5
    a406:	e7d8      	b.n	a3ba <_printf_i+0xee>
    a408:	6809      	ldr	r1, [r1, #0]
    a40a:	681a      	ldr	r2, [r3, #0]
    a40c:	0608      	lsls	r0, r1, #24
    a40e:	d505      	bpl.n	a41c <_printf_i+0x150>
    a410:	1d11      	adds	r1, r2, #4
    a412:	6019      	str	r1, [r3, #0]
    a414:	6813      	ldr	r3, [r2, #0]
    a416:	6962      	ldr	r2, [r4, #20]
    a418:	601a      	str	r2, [r3, #0]
    a41a:	e006      	b.n	a42a <_printf_i+0x15e>
    a41c:	0649      	lsls	r1, r1, #25
    a41e:	d5f7      	bpl.n	a410 <_printf_i+0x144>
    a420:	1d11      	adds	r1, r2, #4
    a422:	6019      	str	r1, [r3, #0]
    a424:	6813      	ldr	r3, [r2, #0]
    a426:	8aa2      	ldrh	r2, [r4, #20]
    a428:	801a      	strh	r2, [r3, #0]
    a42a:	2300      	movs	r3, #0
    a42c:	9e04      	ldr	r6, [sp, #16]
    a42e:	6123      	str	r3, [r4, #16]
    a430:	e054      	b.n	a4dc <_printf_i+0x210>
    a432:	681a      	ldr	r2, [r3, #0]
    a434:	1d11      	adds	r1, r2, #4
    a436:	6019      	str	r1, [r3, #0]
    a438:	6816      	ldr	r6, [r2, #0]
    a43a:	2100      	movs	r1, #0
    a43c:	6862      	ldr	r2, [r4, #4]
    a43e:	0030      	movs	r0, r6
    a440:	f000 f91a 	bl	a678 <memchr>
    a444:	2800      	cmp	r0, #0
    a446:	d001      	beq.n	a44c <_printf_i+0x180>
    a448:	1b80      	subs	r0, r0, r6
    a44a:	6060      	str	r0, [r4, #4]
    a44c:	6863      	ldr	r3, [r4, #4]
    a44e:	6123      	str	r3, [r4, #16]
    a450:	2300      	movs	r3, #0
    a452:	9a04      	ldr	r2, [sp, #16]
    a454:	7013      	strb	r3, [r2, #0]
    a456:	e041      	b.n	a4dc <_printf_i+0x210>
    a458:	6923      	ldr	r3, [r4, #16]
    a45a:	0032      	movs	r2, r6
    a45c:	9906      	ldr	r1, [sp, #24]
    a45e:	9805      	ldr	r0, [sp, #20]
    a460:	9d07      	ldr	r5, [sp, #28]
    a462:	47a8      	blx	r5
    a464:	1c43      	adds	r3, r0, #1
    a466:	d043      	beq.n	a4f0 <_printf_i+0x224>
    a468:	6823      	ldr	r3, [r4, #0]
    a46a:	2500      	movs	r5, #0
    a46c:	079b      	lsls	r3, r3, #30
    a46e:	d40f      	bmi.n	a490 <_printf_i+0x1c4>
    a470:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a472:	68e0      	ldr	r0, [r4, #12]
    a474:	4298      	cmp	r0, r3
    a476:	da3d      	bge.n	a4f4 <_printf_i+0x228>
    a478:	0018      	movs	r0, r3
    a47a:	e03b      	b.n	a4f4 <_printf_i+0x228>
    a47c:	0022      	movs	r2, r4
    a47e:	2301      	movs	r3, #1
    a480:	3219      	adds	r2, #25
    a482:	9906      	ldr	r1, [sp, #24]
    a484:	9805      	ldr	r0, [sp, #20]
    a486:	9e07      	ldr	r6, [sp, #28]
    a488:	47b0      	blx	r6
    a48a:	1c43      	adds	r3, r0, #1
    a48c:	d030      	beq.n	a4f0 <_printf_i+0x224>
    a48e:	3501      	adds	r5, #1
    a490:	68e3      	ldr	r3, [r4, #12]
    a492:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a494:	1a9b      	subs	r3, r3, r2
    a496:	429d      	cmp	r5, r3
    a498:	dbf0      	blt.n	a47c <_printf_i+0x1b0>
    a49a:	e7e9      	b.n	a470 <_printf_i+0x1a4>
    a49c:	2d00      	cmp	r5, #0
    a49e:	d0a9      	beq.n	a3f4 <_printf_i+0x128>
    a4a0:	9e04      	ldr	r6, [sp, #16]
    a4a2:	0028      	movs	r0, r5
    a4a4:	0039      	movs	r1, r7
    a4a6:	f7fe fdf5 	bl	9094 <__aeabi_uidivmod>
    a4aa:	9b03      	ldr	r3, [sp, #12]
    a4ac:	3e01      	subs	r6, #1
    a4ae:	5c5b      	ldrb	r3, [r3, r1]
    a4b0:	0028      	movs	r0, r5
    a4b2:	7033      	strb	r3, [r6, #0]
    a4b4:	0039      	movs	r1, r7
    a4b6:	f7fe fd67 	bl	8f88 <__udivsi3>
    a4ba:	1e05      	subs	r5, r0, #0
    a4bc:	d1f1      	bne.n	a4a2 <_printf_i+0x1d6>
    a4be:	2f08      	cmp	r7, #8
    a4c0:	d109      	bne.n	a4d6 <_printf_i+0x20a>
    a4c2:	6823      	ldr	r3, [r4, #0]
    a4c4:	07db      	lsls	r3, r3, #31
    a4c6:	d506      	bpl.n	a4d6 <_printf_i+0x20a>
    a4c8:	6863      	ldr	r3, [r4, #4]
    a4ca:	6922      	ldr	r2, [r4, #16]
    a4cc:	4293      	cmp	r3, r2
    a4ce:	dc02      	bgt.n	a4d6 <_printf_i+0x20a>
    a4d0:	2330      	movs	r3, #48	; 0x30
    a4d2:	3e01      	subs	r6, #1
    a4d4:	7033      	strb	r3, [r6, #0]
    a4d6:	9b04      	ldr	r3, [sp, #16]
    a4d8:	1b9b      	subs	r3, r3, r6
    a4da:	6123      	str	r3, [r4, #16]
    a4dc:	9b07      	ldr	r3, [sp, #28]
    a4de:	aa09      	add	r2, sp, #36	; 0x24
    a4e0:	9300      	str	r3, [sp, #0]
    a4e2:	0021      	movs	r1, r4
    a4e4:	9b06      	ldr	r3, [sp, #24]
    a4e6:	9805      	ldr	r0, [sp, #20]
    a4e8:	f7ff fe82 	bl	a1f0 <_printf_common>
    a4ec:	1c43      	adds	r3, r0, #1
    a4ee:	d1b3      	bne.n	a458 <_printf_i+0x18c>
    a4f0:	2001      	movs	r0, #1
    a4f2:	4240      	negs	r0, r0
    a4f4:	b00b      	add	sp, #44	; 0x2c
    a4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4f8:	0000a8a6 	.word	0x0000a8a6
    a4fc:	0000a895 	.word	0x0000a895

0000a500 <_sbrk_r>:
    a500:	2300      	movs	r3, #0
    a502:	b570      	push	{r4, r5, r6, lr}
    a504:	4c06      	ldr	r4, [pc, #24]	; (a520 <_sbrk_r+0x20>)
    a506:	0005      	movs	r5, r0
    a508:	0008      	movs	r0, r1
    a50a:	6023      	str	r3, [r4, #0]
    a50c:	f7f7 fe3a 	bl	2184 <_sbrk>
    a510:	1c43      	adds	r3, r0, #1
    a512:	d103      	bne.n	a51c <_sbrk_r+0x1c>
    a514:	6823      	ldr	r3, [r4, #0]
    a516:	2b00      	cmp	r3, #0
    a518:	d000      	beq.n	a51c <_sbrk_r+0x1c>
    a51a:	602b      	str	r3, [r5, #0]
    a51c:	bd70      	pop	{r4, r5, r6, pc}
    a51e:	46c0      	nop			; (mov r8, r8)
    a520:	200030d0 	.word	0x200030d0

0000a524 <__sread>:
    a524:	b570      	push	{r4, r5, r6, lr}
    a526:	000c      	movs	r4, r1
    a528:	250e      	movs	r5, #14
    a52a:	5f49      	ldrsh	r1, [r1, r5]
    a52c:	f000 f8ea 	bl	a704 <_read_r>
    a530:	2800      	cmp	r0, #0
    a532:	db03      	blt.n	a53c <__sread+0x18>
    a534:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a536:	181b      	adds	r3, r3, r0
    a538:	6563      	str	r3, [r4, #84]	; 0x54
    a53a:	bd70      	pop	{r4, r5, r6, pc}
    a53c:	89a3      	ldrh	r3, [r4, #12]
    a53e:	4a02      	ldr	r2, [pc, #8]	; (a548 <__sread+0x24>)
    a540:	4013      	ands	r3, r2
    a542:	81a3      	strh	r3, [r4, #12]
    a544:	e7f9      	b.n	a53a <__sread+0x16>
    a546:	46c0      	nop			; (mov r8, r8)
    a548:	ffffefff 	.word	0xffffefff

0000a54c <__swrite>:
    a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a54e:	001f      	movs	r7, r3
    a550:	898b      	ldrh	r3, [r1, #12]
    a552:	0005      	movs	r5, r0
    a554:	000c      	movs	r4, r1
    a556:	0016      	movs	r6, r2
    a558:	05db      	lsls	r3, r3, #23
    a55a:	d505      	bpl.n	a568 <__swrite+0x1c>
    a55c:	230e      	movs	r3, #14
    a55e:	5ec9      	ldrsh	r1, [r1, r3]
    a560:	2200      	movs	r2, #0
    a562:	2302      	movs	r3, #2
    a564:	f000 f874 	bl	a650 <_lseek_r>
    a568:	89a3      	ldrh	r3, [r4, #12]
    a56a:	4a05      	ldr	r2, [pc, #20]	; (a580 <__swrite+0x34>)
    a56c:	0028      	movs	r0, r5
    a56e:	4013      	ands	r3, r2
    a570:	81a3      	strh	r3, [r4, #12]
    a572:	0032      	movs	r2, r6
    a574:	230e      	movs	r3, #14
    a576:	5ee1      	ldrsh	r1, [r4, r3]
    a578:	003b      	movs	r3, r7
    a57a:	f000 f81f 	bl	a5bc <_write_r>
    a57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a580:	ffffefff 	.word	0xffffefff

0000a584 <__sseek>:
    a584:	b570      	push	{r4, r5, r6, lr}
    a586:	000c      	movs	r4, r1
    a588:	250e      	movs	r5, #14
    a58a:	5f49      	ldrsh	r1, [r1, r5]
    a58c:	f000 f860 	bl	a650 <_lseek_r>
    a590:	89a3      	ldrh	r3, [r4, #12]
    a592:	1c42      	adds	r2, r0, #1
    a594:	d103      	bne.n	a59e <__sseek+0x1a>
    a596:	4a05      	ldr	r2, [pc, #20]	; (a5ac <__sseek+0x28>)
    a598:	4013      	ands	r3, r2
    a59a:	81a3      	strh	r3, [r4, #12]
    a59c:	bd70      	pop	{r4, r5, r6, pc}
    a59e:	2280      	movs	r2, #128	; 0x80
    a5a0:	0152      	lsls	r2, r2, #5
    a5a2:	4313      	orrs	r3, r2
    a5a4:	81a3      	strh	r3, [r4, #12]
    a5a6:	6560      	str	r0, [r4, #84]	; 0x54
    a5a8:	e7f8      	b.n	a59c <__sseek+0x18>
    a5aa:	46c0      	nop			; (mov r8, r8)
    a5ac:	ffffefff 	.word	0xffffefff

0000a5b0 <__sclose>:
    a5b0:	b510      	push	{r4, lr}
    a5b2:	230e      	movs	r3, #14
    a5b4:	5ec9      	ldrsh	r1, [r1, r3]
    a5b6:	f000 f815 	bl	a5e4 <_close_r>
    a5ba:	bd10      	pop	{r4, pc}

0000a5bc <_write_r>:
    a5bc:	b570      	push	{r4, r5, r6, lr}
    a5be:	0005      	movs	r5, r0
    a5c0:	0008      	movs	r0, r1
    a5c2:	0011      	movs	r1, r2
    a5c4:	2200      	movs	r2, #0
    a5c6:	4c06      	ldr	r4, [pc, #24]	; (a5e0 <_write_r+0x24>)
    a5c8:	6022      	str	r2, [r4, #0]
    a5ca:	001a      	movs	r2, r3
    a5cc:	f7f7 fdb2 	bl	2134 <_write>
    a5d0:	1c43      	adds	r3, r0, #1
    a5d2:	d103      	bne.n	a5dc <_write_r+0x20>
    a5d4:	6823      	ldr	r3, [r4, #0]
    a5d6:	2b00      	cmp	r3, #0
    a5d8:	d000      	beq.n	a5dc <_write_r+0x20>
    a5da:	602b      	str	r3, [r5, #0]
    a5dc:	bd70      	pop	{r4, r5, r6, pc}
    a5de:	46c0      	nop			; (mov r8, r8)
    a5e0:	200030d0 	.word	0x200030d0

0000a5e4 <_close_r>:
    a5e4:	2300      	movs	r3, #0
    a5e6:	b570      	push	{r4, r5, r6, lr}
    a5e8:	4c06      	ldr	r4, [pc, #24]	; (a604 <_close_r+0x20>)
    a5ea:	0005      	movs	r5, r0
    a5ec:	0008      	movs	r0, r1
    a5ee:	6023      	str	r3, [r4, #0]
    a5f0:	f7f7 fdda 	bl	21a8 <_close>
    a5f4:	1c43      	adds	r3, r0, #1
    a5f6:	d103      	bne.n	a600 <_close_r+0x1c>
    a5f8:	6823      	ldr	r3, [r4, #0]
    a5fa:	2b00      	cmp	r3, #0
    a5fc:	d000      	beq.n	a600 <_close_r+0x1c>
    a5fe:	602b      	str	r3, [r5, #0]
    a600:	bd70      	pop	{r4, r5, r6, pc}
    a602:	46c0      	nop			; (mov r8, r8)
    a604:	200030d0 	.word	0x200030d0

0000a608 <_fstat_r>:
    a608:	2300      	movs	r3, #0
    a60a:	b570      	push	{r4, r5, r6, lr}
    a60c:	4c06      	ldr	r4, [pc, #24]	; (a628 <_fstat_r+0x20>)
    a60e:	0005      	movs	r5, r0
    a610:	0008      	movs	r0, r1
    a612:	0011      	movs	r1, r2
    a614:	6023      	str	r3, [r4, #0]
    a616:	f7f7 fdca 	bl	21ae <_fstat>
    a61a:	1c43      	adds	r3, r0, #1
    a61c:	d103      	bne.n	a626 <_fstat_r+0x1e>
    a61e:	6823      	ldr	r3, [r4, #0]
    a620:	2b00      	cmp	r3, #0
    a622:	d000      	beq.n	a626 <_fstat_r+0x1e>
    a624:	602b      	str	r3, [r5, #0]
    a626:	bd70      	pop	{r4, r5, r6, pc}
    a628:	200030d0 	.word	0x200030d0

0000a62c <_isatty_r>:
    a62c:	2300      	movs	r3, #0
    a62e:	b570      	push	{r4, r5, r6, lr}
    a630:	4c06      	ldr	r4, [pc, #24]	; (a64c <_isatty_r+0x20>)
    a632:	0005      	movs	r5, r0
    a634:	0008      	movs	r0, r1
    a636:	6023      	str	r3, [r4, #0]
    a638:	f7f7 fdbe 	bl	21b8 <_isatty>
    a63c:	1c43      	adds	r3, r0, #1
    a63e:	d103      	bne.n	a648 <_isatty_r+0x1c>
    a640:	6823      	ldr	r3, [r4, #0]
    a642:	2b00      	cmp	r3, #0
    a644:	d000      	beq.n	a648 <_isatty_r+0x1c>
    a646:	602b      	str	r3, [r5, #0]
    a648:	bd70      	pop	{r4, r5, r6, pc}
    a64a:	46c0      	nop			; (mov r8, r8)
    a64c:	200030d0 	.word	0x200030d0

0000a650 <_lseek_r>:
    a650:	b570      	push	{r4, r5, r6, lr}
    a652:	0005      	movs	r5, r0
    a654:	0008      	movs	r0, r1
    a656:	0011      	movs	r1, r2
    a658:	2200      	movs	r2, #0
    a65a:	4c06      	ldr	r4, [pc, #24]	; (a674 <_lseek_r+0x24>)
    a65c:	6022      	str	r2, [r4, #0]
    a65e:	001a      	movs	r2, r3
    a660:	f7f7 fdac 	bl	21bc <_lseek>
    a664:	1c43      	adds	r3, r0, #1
    a666:	d103      	bne.n	a670 <_lseek_r+0x20>
    a668:	6823      	ldr	r3, [r4, #0]
    a66a:	2b00      	cmp	r3, #0
    a66c:	d000      	beq.n	a670 <_lseek_r+0x20>
    a66e:	602b      	str	r3, [r5, #0]
    a670:	bd70      	pop	{r4, r5, r6, pc}
    a672:	46c0      	nop			; (mov r8, r8)
    a674:	200030d0 	.word	0x200030d0

0000a678 <memchr>:
    a678:	b2c9      	uxtb	r1, r1
    a67a:	1882      	adds	r2, r0, r2
    a67c:	4290      	cmp	r0, r2
    a67e:	d101      	bne.n	a684 <memchr+0xc>
    a680:	2000      	movs	r0, #0
    a682:	4770      	bx	lr
    a684:	7803      	ldrb	r3, [r0, #0]
    a686:	428b      	cmp	r3, r1
    a688:	d0fb      	beq.n	a682 <memchr+0xa>
    a68a:	3001      	adds	r0, #1
    a68c:	e7f6      	b.n	a67c <memchr+0x4>

0000a68e <memmove>:
    a68e:	b510      	push	{r4, lr}
    a690:	4288      	cmp	r0, r1
    a692:	d902      	bls.n	a69a <memmove+0xc>
    a694:	188b      	adds	r3, r1, r2
    a696:	4298      	cmp	r0, r3
    a698:	d308      	bcc.n	a6ac <memmove+0x1e>
    a69a:	2300      	movs	r3, #0
    a69c:	429a      	cmp	r2, r3
    a69e:	d007      	beq.n	a6b0 <memmove+0x22>
    a6a0:	5ccc      	ldrb	r4, [r1, r3]
    a6a2:	54c4      	strb	r4, [r0, r3]
    a6a4:	3301      	adds	r3, #1
    a6a6:	e7f9      	b.n	a69c <memmove+0xe>
    a6a8:	5c8b      	ldrb	r3, [r1, r2]
    a6aa:	5483      	strb	r3, [r0, r2]
    a6ac:	3a01      	subs	r2, #1
    a6ae:	d2fb      	bcs.n	a6a8 <memmove+0x1a>
    a6b0:	bd10      	pop	{r4, pc}

0000a6b2 <__malloc_lock>:
    a6b2:	4770      	bx	lr

0000a6b4 <__malloc_unlock>:
    a6b4:	4770      	bx	lr

0000a6b6 <_realloc_r>:
    a6b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6b8:	0007      	movs	r7, r0
    a6ba:	000d      	movs	r5, r1
    a6bc:	0016      	movs	r6, r2
    a6be:	2900      	cmp	r1, #0
    a6c0:	d105      	bne.n	a6ce <_realloc_r+0x18>
    a6c2:	0011      	movs	r1, r2
    a6c4:	f7ff fa8c 	bl	9be0 <_malloc_r>
    a6c8:	0004      	movs	r4, r0
    a6ca:	0020      	movs	r0, r4
    a6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6ce:	2a00      	cmp	r2, #0
    a6d0:	d103      	bne.n	a6da <_realloc_r+0x24>
    a6d2:	f7ff fa3b 	bl	9b4c <_free_r>
    a6d6:	0034      	movs	r4, r6
    a6d8:	e7f7      	b.n	a6ca <_realloc_r+0x14>
    a6da:	f000 f827 	bl	a72c <_malloc_usable_size_r>
    a6de:	002c      	movs	r4, r5
    a6e0:	4286      	cmp	r6, r0
    a6e2:	d9f2      	bls.n	a6ca <_realloc_r+0x14>
    a6e4:	0031      	movs	r1, r6
    a6e6:	0038      	movs	r0, r7
    a6e8:	f7ff fa7a 	bl	9be0 <_malloc_r>
    a6ec:	1e04      	subs	r4, r0, #0
    a6ee:	d0ec      	beq.n	a6ca <_realloc_r+0x14>
    a6f0:	0029      	movs	r1, r5
    a6f2:	0032      	movs	r2, r6
    a6f4:	f7fe fe1b 	bl	932e <memcpy>
    a6f8:	0029      	movs	r1, r5
    a6fa:	0038      	movs	r0, r7
    a6fc:	f7ff fa26 	bl	9b4c <_free_r>
    a700:	e7e3      	b.n	a6ca <_realloc_r+0x14>
	...

0000a704 <_read_r>:
    a704:	b570      	push	{r4, r5, r6, lr}
    a706:	0005      	movs	r5, r0
    a708:	0008      	movs	r0, r1
    a70a:	0011      	movs	r1, r2
    a70c:	2200      	movs	r2, #0
    a70e:	4c06      	ldr	r4, [pc, #24]	; (a728 <_read_r+0x24>)
    a710:	6022      	str	r2, [r4, #0]
    a712:	001a      	movs	r2, r3
    a714:	f7f7 fcec 	bl	20f0 <_read>
    a718:	1c43      	adds	r3, r0, #1
    a71a:	d103      	bne.n	a724 <_read_r+0x20>
    a71c:	6823      	ldr	r3, [r4, #0]
    a71e:	2b00      	cmp	r3, #0
    a720:	d000      	beq.n	a724 <_read_r+0x20>
    a722:	602b      	str	r3, [r5, #0]
    a724:	bd70      	pop	{r4, r5, r6, pc}
    a726:	46c0      	nop			; (mov r8, r8)
    a728:	200030d0 	.word	0x200030d0

0000a72c <_malloc_usable_size_r>:
    a72c:	1f0b      	subs	r3, r1, #4
    a72e:	681b      	ldr	r3, [r3, #0]
    a730:	1f18      	subs	r0, r3, #4
    a732:	2b00      	cmp	r3, #0
    a734:	da01      	bge.n	a73a <_malloc_usable_size_r+0xe>
    a736:	580b      	ldr	r3, [r1, r0]
    a738:	18c0      	adds	r0, r0, r3
    a73a:	4770      	bx	lr
    a73c:	42000800 	.word	0x42000800
    a740:	42000c00 	.word	0x42000c00
    a744:	42001000 	.word	0x42001000
    a748:	42001400 	.word	0x42001400
    a74c:	42001800 	.word	0x42001800
    a750:	42001c00 	.word	0x42001c00
    a754:	000013be 	.word	0x000013be
    a758:	000013ba 	.word	0x000013ba
    a75c:	000013ba 	.word	0x000013ba
    a760:	00001420 	.word	0x00001420
    a764:	00001420 	.word	0x00001420
    a768:	000013d2 	.word	0x000013d2
    a76c:	000013c4 	.word	0x000013c4
    a770:	000013d8 	.word	0x000013d8
    a774:	0000140e 	.word	0x0000140e
    a778:	0000165c 	.word	0x0000165c
    a77c:	0000163c 	.word	0x0000163c
    a780:	0000163c 	.word	0x0000163c
    a784:	000016c8 	.word	0x000016c8
    a788:	0000164e 	.word	0x0000164e
    a78c:	0000166a 	.word	0x0000166a
    a790:	00001640 	.word	0x00001640
    a794:	00001678 	.word	0x00001678
    a798:	000016b8 	.word	0x000016b8
    a79c:	42002c00 	.word	0x42002c00
    a7a0:	42003000 	.word	0x42003000
    a7a4:	42003400 	.word	0x42003400
    a7a8:	0000009c 	.word	0x0000009c
    a7ac:	00002ffc 	.word	0x00002ffc
    a7b0:	00003146 	.word	0x00003146
    a7b4:	00002fd4 	.word	0x00002fd4
    a7b8:	0000314e 	.word	0x0000314e
    a7bc:	00002fdc 	.word	0x00002fdc
    a7c0:	00002fe4 	.word	0x00002fe4
    a7c4:	00002fec 	.word	0x00002fec
    a7c8:	00002ff4 	.word	0x00002ff4

0000a7cc <tc_interrupt_vectors.11908>:
    a7cc:	00141312 00004650 00004668 00004684     ....PF..hF...F..
    a7dc:	000046b4 000046f6 50575202 35353541     .F...F...RWPA555
    a7ec:	03353535 00000000 50575202 41414141     555......RWPAAAA
    a7fc:	03414141 00000000 00007325 204e4150     AAA.....%s..PAN 
    a80c:	726f6f43 616e6964 00726f74 2578302d     Coordinator.-0x%
    a81c:	00583430                                04X.

0000a820 <_global_impure_ptr>:
    a820:	2000009c                                ... 

0000a824 <__sf_fake_stderr>:
	...

0000a844 <__sf_fake_stdin>:
	...

0000a864 <__sf_fake_stdout>:
	...
    a884:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    a894:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    a8a4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    a8b4:	00006665                                ef..

0000a8b8 <_init>:
    a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8ba:	46c0      	nop			; (mov r8, r8)
    a8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a8be:	bc08      	pop	{r3}
    a8c0:	469e      	mov	lr, r3
    a8c2:	4770      	bx	lr

0000a8c4 <__init_array_start>:
    a8c4:	000000dd 	.word	0x000000dd

0000a8c8 <_fini>:
    a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8ca:	46c0      	nop			; (mov r8, r8)
    a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a8ce:	bc08      	pop	{r3}
    a8d0:	469e      	mov	lr, r3
    a8d2:	4770      	bx	lr

0000a8d4 <__fini_array_start>:
    a8d4:	000000b5 	.word	0x000000b5
