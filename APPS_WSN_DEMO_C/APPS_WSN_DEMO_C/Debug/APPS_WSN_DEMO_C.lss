
APPS_WSN_DEMO_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a2f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ec  20000000  0000a2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002c0c  200000f0  0000a3e8  000200f0  2**3
                  ALLOC
  3 .stack        00002004  20002cfc  0000cff4  000200f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  5 .comment      000000e5  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  6 .debug_info   000535c8  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008193  00000000  00000000  000737c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000efd3  00000000  00000000  0007b954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b40  00000000  00000000  0008a927  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000012f8  00000000  00000000  0008b467  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000212fe  00000000  00000000  0008c75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001be02  00000000  00000000  000ada5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e14c  00000000  00000000  000c985f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000022e8  00000000  00000000  001579ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
       0:	00 4d 00 20 0d 20 00 00 09 20 00 00 09 20 00 00     .M. . ... ... ..
	...
	if (pu8Mosi == NULL) {
      2c:	09 20 00 00 00 00 00 00 00 00 00 00 09 20 00 00     . ........... ..
	spi_select_slave(&master, &slave_inst, true);
      3c:	09 20 00 00 09 20 00 00 09 20 00 00 09 20 00 00     . ... ... ... ..
			pu8Miso++;
      4c:	09 20 00 00 5d 03 00 00 09 20 00 00 09 20 00 00     . ..].... ... ..
		while (!spi_is_ready_to_write(&master))
      5c:	09 20 00 00 09 20 00 00 c9 08 00 00 d9 08 00 00     . ... ..........
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
      6c:	e9 08 00 00 f9 08 00 00 09 09 00 00 19 09 00 00     ................
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
      7c:	09 20 00 00 09 20 00 00 09 20 00 00 e9 1c 00 00     . ... ... ......
      8c:	f9 1c 00 00 09 1d 00 00 00 00 00 00 00 00 00 00     ................
	if (!spi_is_ready_to_read(module)) {
      9c:	09 20 00 00 09 20 00 00 00 00 00 00 09 20 00 00     . ... ....... ..
	...

000000b4 <__do_global_dtors_aux>:
		*pu8Miso = rxd_data;
      b4:	b510      	push	{r4, lr}
		u16Sz--;
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			pu8Miso++;
      ba:	2b00      	cmp	r3, #0
			pu8Mosi++;
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
	while (u16Sz) {
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
	SercomSpi *const spi_module = &(module->hw->SPI);
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
	while (!spi_is_write_complete(&master))
      cc:	7023      	strb	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
      ce:	bd10      	pop	{r4, pc}
      d0:	200000f0 	.word	0x200000f0
	spi_select_slave(&master, &slave_inst, false);
      d4:	00000000 	.word	0x00000000
      d8:	0000a2f4 	.word	0x0000a2f4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
	return M2M_SUCCESS;
      de:	b510      	push	{r4, lr}
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		return M2M_ERR_INVALID_ARG;
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
		break;
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
			M2M_ERR("invalide ioclt cmd\n");
     100:	00000000 	.word	0x00000000
     104:	200000f4 	.word	0x200000f4
     108:	0000a2f4 	.word	0x0000a2f4
     10c:	0000a2f4 	.word	0x0000a2f4
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000019e1 	.word	0x000019e1
     140:	00008ec9 	.word	0x00008ec9
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ac:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d106      	bne.n	1c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b8:	2b00      	cmp	r3, #0
     1ba:	d007      	beq.n	1cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b09      	ldr	r3, [pc, #36]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1c2:	4a07      	ldr	r2, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1c4:	6813      	ldr	r3, [r2, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	6013      	str	r3, [r2, #0]
}
     1ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1d2:	2200      	movs	r2, #0
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_enter_critical+0x3c>)
     1d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1d8:	3201      	adds	r2, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	e7f0      	b.n	1c2 <cpu_irq_enter_critical+0x16>
     1e0:	2000010c 	.word	0x2000010c
     1e4:	20000110 	.word	0x20000110
     1e8:	20000008 	.word	0x20000008

000001ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <cpu_irq_leave_critical+0x24>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	3a01      	subs	r2, #1
     1f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d109      	bne.n	20e <cpu_irq_leave_critical+0x22>
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <cpu_irq_leave_critical+0x28>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d005      	beq.n	20e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     202:	2201      	movs	r2, #1
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_leave_critical+0x2c>)
     206:	701a      	strb	r2, [r3, #0]
     208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     20c:	b662      	cpsie	i
	}
}
     20e:	4770      	bx	lr
     210:	2000010c 	.word	0x2000010c
     214:	20000110 	.word	0x20000110
     218:	20000008 	.word	0x20000008

0000021c <system_board_init>:




void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	46c6      	mov	lr, r8
     220:	b500      	push	{lr}
     222:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     224:	ac01      	add	r4, sp, #4
     226:	2601      	movs	r6, #1
     228:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     22a:	2700      	movs	r7, #0
     22c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     22e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     230:	0021      	movs	r1, r4
     232:	2013      	movs	r0, #19
     234:	4d27      	ldr	r5, [pc, #156]	; (2d4 <system_board_init+0xb8>)
     236:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     238:	4b27      	ldr	r3, [pc, #156]	; (2d8 <system_board_init+0xbc>)
     23a:	4698      	mov	r8, r3
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	031b      	lsls	r3, r3, #12
     240:	4642      	mov	r2, r8
     242:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     244:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     246:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     248:	0021      	movs	r1, r4
     24a:	201c      	movs	r0, #28
     24c:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     24e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     250:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     252:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     254:	0021      	movs	r1, r4
     256:	2052      	movs	r0, #82	; 0x52
     258:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     25a:	0021      	movs	r1, r4
     25c:	203e      	movs	r0, #62	; 0x3e
     25e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     260:	0021      	movs	r1, r4
     262:	203f      	movs	r0, #63	; 0x3f
     264:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     266:	0021      	movs	r1, r4
     268:	202f      	movs	r0, #47	; 0x2f
     26a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     26c:	0021      	movs	r1, r4
     26e:	2014      	movs	r0, #20
     270:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     272:	2280      	movs	r2, #128	; 0x80
     274:	02d2      	lsls	r2, r2, #11
     276:	4b19      	ldr	r3, [pc, #100]	; (2dc <system_board_init+0xc0>)
     278:	619a      	str	r2, [r3, #24]
     27a:	4b19      	ldr	r3, [pc, #100]	; (2e0 <system_board_init+0xc4>)
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	05d2      	lsls	r2, r2, #23
     280:	619a      	str	r2, [r3, #24]
     282:	2280      	movs	r2, #128	; 0x80
     284:	0612      	lsls	r2, r2, #24
     286:	619a      	str	r2, [r3, #24]
     288:	2280      	movs	r2, #128	; 0x80
     28a:	0212      	lsls	r2, r2, #8
     28c:	619a      	str	r2, [r3, #24]
     28e:	2380      	movs	r3, #128	; 0x80
     290:	035b      	lsls	r3, r3, #13
     292:	4642      	mov	r2, r8
     294:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     296:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     298:	0021      	movs	r1, r4
     29a:	2053      	movs	r0, #83	; 0x53
     29c:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     29e:	4a11      	ldr	r2, [pc, #68]	; (2e4 <system_board_init+0xc8>)
     2a0:	6a11      	ldr	r1, [r2, #32]
     2a2:	2380      	movs	r3, #128	; 0x80
     2a4:	039b      	lsls	r3, r3, #14
     2a6:	430b      	orrs	r3, r1
     2a8:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     2aa:	2204      	movs	r2, #4
     2ac:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <system_board_init+0xcc>)
     2ae:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2b0:	466b      	mov	r3, sp
     2b2:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     2b4:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     2b6:	2305      	movs	r3, #5
     2b8:	466a      	mov	r2, sp
     2ba:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     2bc:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     2be:	4669      	mov	r1, sp
     2c0:	2009      	movs	r0, #9
     2c2:	4c0a      	ldr	r4, [pc, #40]	; (2ec <system_board_init+0xd0>)
     2c4:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     2c6:	4669      	mov	r1, sp
     2c8:	200c      	movs	r0, #12
     2ca:	47a0      	blx	r4
#endif

}
     2cc:	b002      	add	sp, #8
     2ce:	bc04      	pop	{r2}
     2d0:	4690      	mov	r8, r2
     2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2d4:	000004c1 	.word	0x000004c1
     2d8:	41004400 	.word	0x41004400
     2dc:	41004500 	.word	0x41004500
     2e0:	41004480 	.word	0x41004480
     2e4:	40000400 	.word	0x40000400
     2e8:	42005400 	.word	0x42005400
     2ec:	00001bf1 	.word	0x00001bf1

000002f0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2f0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2f2:	2a00      	cmp	r2, #0
     2f4:	d001      	beq.n	2fa <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2f6:	0018      	movs	r0, r3
     2f8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     2fa:	008b      	lsls	r3, r1, #2
     2fc:	4a06      	ldr	r2, [pc, #24]	; (318 <extint_register_callback+0x28>)
     2fe:	589b      	ldr	r3, [r3, r2]
     300:	2b00      	cmp	r3, #0
     302:	d003      	beq.n	30c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     304:	4283      	cmp	r3, r0
     306:	d005      	beq.n	314 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     308:	231d      	movs	r3, #29
     30a:	e7f4      	b.n	2f6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     30c:	0089      	lsls	r1, r1, #2
     30e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     310:	2300      	movs	r3, #0
     312:	e7f0      	b.n	2f6 <extint_register_callback+0x6>
		return STATUS_OK;
     314:	2300      	movs	r3, #0
     316:	e7ee      	b.n	2f6 <extint_register_callback+0x6>
     318:	200003ec 	.word	0x200003ec

0000031c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     31c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     31e:	2900      	cmp	r1, #0
     320:	d001      	beq.n	326 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     322:	0018      	movs	r0, r3
     324:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     326:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     328:	281f      	cmp	r0, #31
     32a:	d800      	bhi.n	32e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     32c:	4a02      	ldr	r2, [pc, #8]	; (338 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     32e:	2301      	movs	r3, #1
     330:	4083      	lsls	r3, r0
     332:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     334:	2300      	movs	r3, #0
     336:	e7f4      	b.n	322 <extint_chan_enable_callback+0x6>
     338:	40001800 	.word	0x40001800

0000033c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     33c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     33e:	2900      	cmp	r1, #0
     340:	d001      	beq.n	346 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     342:	0018      	movs	r0, r3
     344:	4770      	bx	lr
		return NULL;
     346:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     348:	281f      	cmp	r0, #31
     34a:	d800      	bhi.n	34e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     34c:	4a02      	ldr	r2, [pc, #8]	; (358 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     34e:	2301      	movs	r3, #1
     350:	4083      	lsls	r3, r0
     352:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     354:	2300      	movs	r3, #0
     356:	e7f4      	b.n	342 <extint_chan_disable_callback+0x6>
     358:	40001800 	.word	0x40001800

0000035c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     35c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     35e:	2200      	movs	r2, #0
     360:	4b10      	ldr	r3, [pc, #64]	; (3a4 <EIC_Handler+0x48>)
     362:	701a      	strb	r2, [r3, #0]
     364:	2300      	movs	r3, #0
     366:	4910      	ldr	r1, [pc, #64]	; (3a8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     368:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     36a:	4e10      	ldr	r6, [pc, #64]	; (3ac <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     36c:	4c0d      	ldr	r4, [pc, #52]	; (3a4 <EIC_Handler+0x48>)
     36e:	e00a      	b.n	386 <EIC_Handler+0x2a>
		return eics[eic_index];
     370:	490d      	ldr	r1, [pc, #52]	; (3a8 <EIC_Handler+0x4c>)
     372:	e008      	b.n	386 <EIC_Handler+0x2a>
     374:	7823      	ldrb	r3, [r4, #0]
     376:	3301      	adds	r3, #1
     378:	b2db      	uxtb	r3, r3
     37a:	7023      	strb	r3, [r4, #0]
     37c:	2b0f      	cmp	r3, #15
     37e:	d810      	bhi.n	3a2 <EIC_Handler+0x46>
		return NULL;
     380:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     382:	2b1f      	cmp	r3, #31
     384:	d9f4      	bls.n	370 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     386:	0028      	movs	r0, r5
     388:	4018      	ands	r0, r3
     38a:	2201      	movs	r2, #1
     38c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     38e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     390:	4210      	tst	r0, r2
     392:	d0ef      	beq.n	374 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     394:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     396:	009b      	lsls	r3, r3, #2
     398:	599b      	ldr	r3, [r3, r6]
     39a:	2b00      	cmp	r3, #0
     39c:	d0ea      	beq.n	374 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     39e:	4798      	blx	r3
     3a0:	e7e8      	b.n	374 <EIC_Handler+0x18>
			}
		}
	}
}
     3a2:	bd70      	pop	{r4, r5, r6, pc}
     3a4:	200003e8 	.word	0x200003e8
     3a8:	40001800 	.word	0x40001800
     3ac:	200003ec 	.word	0x200003ec

000003b0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3b0:	4a04      	ldr	r2, [pc, #16]	; (3c4 <_extint_enable+0x14>)
     3b2:	7813      	ldrb	r3, [r2, #0]
     3b4:	2102      	movs	r1, #2
     3b6:	430b      	orrs	r3, r1
     3b8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3ba:	7853      	ldrb	r3, [r2, #1]
     3bc:	b25b      	sxtb	r3, r3
     3be:	2b00      	cmp	r3, #0
     3c0:	dbfb      	blt.n	3ba <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3c2:	4770      	bx	lr
     3c4:	40001800 	.word	0x40001800

000003c8 <_system_extint_init>:
{
     3c8:	b500      	push	{lr}
     3ca:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3cc:	4a12      	ldr	r2, [pc, #72]	; (418 <_system_extint_init+0x50>)
     3ce:	6993      	ldr	r3, [r2, #24]
     3d0:	2140      	movs	r1, #64	; 0x40
     3d2:	430b      	orrs	r3, r1
     3d4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3d6:	a901      	add	r1, sp, #4
     3d8:	2300      	movs	r3, #0
     3da:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3dc:	2005      	movs	r0, #5
     3de:	4b0f      	ldr	r3, [pc, #60]	; (41c <_system_extint_init+0x54>)
     3e0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     3e2:	2005      	movs	r0, #5
     3e4:	4b0e      	ldr	r3, [pc, #56]	; (420 <_system_extint_init+0x58>)
     3e6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3e8:	4a0e      	ldr	r2, [pc, #56]	; (424 <_system_extint_init+0x5c>)
     3ea:	7813      	ldrb	r3, [r2, #0]
     3ec:	2101      	movs	r1, #1
     3ee:	430b      	orrs	r3, r1
     3f0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3f2:	7853      	ldrb	r3, [r2, #1]
     3f4:	b25b      	sxtb	r3, r3
     3f6:	2b00      	cmp	r3, #0
     3f8:	dbfb      	blt.n	3f2 <_system_extint_init+0x2a>
     3fa:	4b0b      	ldr	r3, [pc, #44]	; (428 <_system_extint_init+0x60>)
     3fc:	0019      	movs	r1, r3
     3fe:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     400:	2200      	movs	r2, #0
     402:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     404:	4299      	cmp	r1, r3
     406:	d1fc      	bne.n	402 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     408:	2210      	movs	r2, #16
     40a:	4b08      	ldr	r3, [pc, #32]	; (42c <_system_extint_init+0x64>)
     40c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     40e:	4b08      	ldr	r3, [pc, #32]	; (430 <_system_extint_init+0x68>)
     410:	4798      	blx	r3
}
     412:	b003      	add	sp, #12
     414:	bd00      	pop	{pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	40000400 	.word	0x40000400
     41c:	00001af9 	.word	0x00001af9
     420:	00001a6d 	.word	0x00001a6d
     424:	40001800 	.word	0x40001800
     428:	200003ec 	.word	0x200003ec
     42c:	e000e100 	.word	0xe000e100
     430:	000003b1 	.word	0x000003b1

00000434 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     434:	2300      	movs	r3, #0
     436:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     438:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     43a:	2201      	movs	r2, #1
     43c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     43e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     440:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     442:	3302      	adds	r3, #2
     444:	72c3      	strb	r3, [r0, #11]
}
     446:	4770      	bx	lr

00000448 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     448:	b5f0      	push	{r4, r5, r6, r7, lr}
     44a:	b083      	sub	sp, #12
     44c:	0005      	movs	r5, r0
     44e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     450:	a901      	add	r1, sp, #4
     452:	2300      	movs	r3, #0
     454:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     456:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     458:	7923      	ldrb	r3, [r4, #4]
     45a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     45c:	7a23      	ldrb	r3, [r4, #8]
     45e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     460:	7820      	ldrb	r0, [r4, #0]
     462:	4b15      	ldr	r3, [pc, #84]	; (4b8 <extint_chan_set_config+0x70>)
     464:	4798      	blx	r3
		return NULL;
     466:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     468:	2d1f      	cmp	r5, #31
     46a:	d800      	bhi.n	46e <extint_chan_set_config+0x26>
		return eics[eic_index];
     46c:	4813      	ldr	r0, [pc, #76]	; (4bc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     46e:	2207      	movs	r2, #7
     470:	402a      	ands	r2, r5
     472:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     474:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     476:	7aa3      	ldrb	r3, [r4, #10]
     478:	2b00      	cmp	r3, #0
     47a:	d001      	beq.n	480 <extint_chan_set_config+0x38>
     47c:	2308      	movs	r3, #8
     47e:	431f      	orrs	r7, r3
     480:	08eb      	lsrs	r3, r5, #3
     482:	009b      	lsls	r3, r3, #2
     484:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     486:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     488:	260f      	movs	r6, #15
     48a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     48c:	43b1      	bics	r1, r6
			(new_config << config_pos);
     48e:	4097      	lsls	r7, r2
     490:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     492:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     494:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     496:	7a63      	ldrb	r3, [r4, #9]
     498:	2b00      	cmp	r3, #0
     49a:	d106      	bne.n	4aa <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     49c:	6943      	ldr	r3, [r0, #20]
     49e:	2201      	movs	r2, #1
     4a0:	40aa      	lsls	r2, r5
     4a2:	4393      	bics	r3, r2
     4a4:	6143      	str	r3, [r0, #20]
	}
}
     4a6:	b003      	add	sp, #12
     4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4aa:	6942      	ldr	r2, [r0, #20]
     4ac:	2301      	movs	r3, #1
     4ae:	40ab      	lsls	r3, r5
     4b0:	4313      	orrs	r3, r2
     4b2:	6143      	str	r3, [r0, #20]
     4b4:	e7f7      	b.n	4a6 <extint_chan_set_config+0x5e>
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	00001bf1 	.word	0x00001bf1
     4bc:	40001800 	.word	0x40001800

000004c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4c0:	b500      	push	{lr}
     4c2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4c4:	ab01      	add	r3, sp, #4
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4ca:	780a      	ldrb	r2, [r1, #0]
     4cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ce:	784a      	ldrb	r2, [r1, #1]
     4d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4d2:	788a      	ldrb	r2, [r1, #2]
     4d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4d6:	0019      	movs	r1, r3
     4d8:	4b01      	ldr	r3, [pc, #4]	; (4e0 <port_pin_set_config+0x20>)
     4da:	4798      	blx	r3
}
     4dc:	b003      	add	sp, #12
     4de:	bd00      	pop	{pc}
     4e0:	00001bf1 	.word	0x00001bf1

000004e4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4e6:	46de      	mov	lr, fp
     4e8:	4657      	mov	r7, sl
     4ea:	464e      	mov	r6, r9
     4ec:	4645      	mov	r5, r8
     4ee:	b5e0      	push	{r5, r6, r7, lr}
     4f0:	b087      	sub	sp, #28
     4f2:	4680      	mov	r8, r0
     4f4:	9104      	str	r1, [sp, #16]
     4f6:	0016      	movs	r6, r2
     4f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4fa:	2200      	movs	r2, #0
     4fc:	2300      	movs	r3, #0
     4fe:	2100      	movs	r1, #0
     500:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     502:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     504:	2001      	movs	r0, #1
     506:	0021      	movs	r1, r4
     508:	9600      	str	r6, [sp, #0]
     50a:	9701      	str	r7, [sp, #4]
     50c:	465c      	mov	r4, fp
     50e:	9403      	str	r4, [sp, #12]
     510:	4644      	mov	r4, r8
     512:	9405      	str	r4, [sp, #20]
     514:	e013      	b.n	53e <long_division+0x5a>
     516:	2420      	movs	r4, #32
     518:	1a64      	subs	r4, r4, r1
     51a:	0005      	movs	r5, r0
     51c:	40e5      	lsrs	r5, r4
     51e:	46a8      	mov	r8, r5
     520:	e014      	b.n	54c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     522:	9c00      	ldr	r4, [sp, #0]
     524:	9d01      	ldr	r5, [sp, #4]
     526:	1b12      	subs	r2, r2, r4
     528:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     52a:	465c      	mov	r4, fp
     52c:	464d      	mov	r5, r9
     52e:	432c      	orrs	r4, r5
     530:	46a3      	mov	fp, r4
     532:	9c03      	ldr	r4, [sp, #12]
     534:	4645      	mov	r5, r8
     536:	432c      	orrs	r4, r5
     538:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     53a:	3901      	subs	r1, #1
     53c:	d325      	bcc.n	58a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     53e:	2420      	movs	r4, #32
     540:	4264      	negs	r4, r4
     542:	190c      	adds	r4, r1, r4
     544:	d4e7      	bmi.n	516 <long_division+0x32>
     546:	0005      	movs	r5, r0
     548:	40a5      	lsls	r5, r4
     54a:	46a8      	mov	r8, r5
     54c:	0004      	movs	r4, r0
     54e:	408c      	lsls	r4, r1
     550:	46a1      	mov	r9, r4
		r = r << 1;
     552:	1892      	adds	r2, r2, r2
     554:	415b      	adcs	r3, r3
     556:	0014      	movs	r4, r2
     558:	001d      	movs	r5, r3
		if (n & bit_shift) {
     55a:	9e05      	ldr	r6, [sp, #20]
     55c:	464f      	mov	r7, r9
     55e:	403e      	ands	r6, r7
     560:	46b4      	mov	ip, r6
     562:	9e04      	ldr	r6, [sp, #16]
     564:	4647      	mov	r7, r8
     566:	403e      	ands	r6, r7
     568:	46b2      	mov	sl, r6
     56a:	4666      	mov	r6, ip
     56c:	4657      	mov	r7, sl
     56e:	433e      	orrs	r6, r7
     570:	d003      	beq.n	57a <long_division+0x96>
			r |= 0x01;
     572:	0006      	movs	r6, r0
     574:	4326      	orrs	r6, r4
     576:	0032      	movs	r2, r6
     578:	002b      	movs	r3, r5
		if (r >= d) {
     57a:	9c00      	ldr	r4, [sp, #0]
     57c:	9d01      	ldr	r5, [sp, #4]
     57e:	429d      	cmp	r5, r3
     580:	d8db      	bhi.n	53a <long_division+0x56>
     582:	d1ce      	bne.n	522 <long_division+0x3e>
     584:	4294      	cmp	r4, r2
     586:	d8d8      	bhi.n	53a <long_division+0x56>
     588:	e7cb      	b.n	522 <long_division+0x3e>
     58a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     58c:	4658      	mov	r0, fp
     58e:	0019      	movs	r1, r3
     590:	b007      	add	sp, #28
     592:	bc3c      	pop	{r2, r3, r4, r5}
     594:	4690      	mov	r8, r2
     596:	4699      	mov	r9, r3
     598:	46a2      	mov	sl, r4
     59a:	46ab      	mov	fp, r5
     59c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000059e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     59e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5a0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5a2:	2340      	movs	r3, #64	; 0x40
     5a4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     5a6:	4281      	cmp	r1, r0
     5a8:	d202      	bcs.n	5b0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     5aa:	0018      	movs	r0, r3
     5ac:	bd10      	pop	{r4, pc}
		baud_calculated++;
     5ae:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     5b0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     5b2:	1c63      	adds	r3, r4, #1
     5b4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     5b6:	4288      	cmp	r0, r1
     5b8:	d9f9      	bls.n	5ae <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5ba:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     5bc:	2cff      	cmp	r4, #255	; 0xff
     5be:	d8f4      	bhi.n	5aa <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     5c0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     5c2:	2300      	movs	r3, #0
     5c4:	e7f1      	b.n	5aa <_sercom_get_sync_baud_val+0xc>
	...

000005c8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	b083      	sub	sp, #12
     5cc:	000f      	movs	r7, r1
     5ce:	0016      	movs	r6, r2
     5d0:	aa08      	add	r2, sp, #32
     5d2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     5d4:	0004      	movs	r4, r0
     5d6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5d8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     5da:	42bc      	cmp	r4, r7
     5dc:	d902      	bls.n	5e4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     5de:	0010      	movs	r0, r2
     5e0:	b003      	add	sp, #12
     5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     5e4:	2b00      	cmp	r3, #0
     5e6:	d114      	bne.n	612 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     5e8:	0002      	movs	r2, r0
     5ea:	0008      	movs	r0, r1
     5ec:	2100      	movs	r1, #0
     5ee:	4c19      	ldr	r4, [pc, #100]	; (654 <_sercom_get_async_baud_val+0x8c>)
     5f0:	47a0      	blx	r4
     5f2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     5f4:	003a      	movs	r2, r7
     5f6:	2300      	movs	r3, #0
     5f8:	2000      	movs	r0, #0
     5fa:	4c17      	ldr	r4, [pc, #92]	; (658 <_sercom_get_async_baud_val+0x90>)
     5fc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5fe:	2200      	movs	r2, #0
     600:	2301      	movs	r3, #1
     602:	1a12      	subs	r2, r2, r0
     604:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     606:	0c12      	lsrs	r2, r2, #16
     608:	041b      	lsls	r3, r3, #16
     60a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     60c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     60e:	2200      	movs	r2, #0
     610:	e7e5      	b.n	5de <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     612:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     614:	2b01      	cmp	r3, #1
     616:	d1f9      	bne.n	60c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     618:	000a      	movs	r2, r1
     61a:	2300      	movs	r3, #0
     61c:	2100      	movs	r1, #0
     61e:	4c0d      	ldr	r4, [pc, #52]	; (654 <_sercom_get_async_baud_val+0x8c>)
     620:	47a0      	blx	r4
     622:	0002      	movs	r2, r0
     624:	000b      	movs	r3, r1
     626:	9200      	str	r2, [sp, #0]
     628:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     62a:	0038      	movs	r0, r7
     62c:	2100      	movs	r1, #0
     62e:	4c0a      	ldr	r4, [pc, #40]	; (658 <_sercom_get_async_baud_val+0x90>)
     630:	47a0      	blx	r4
     632:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     634:	2380      	movs	r3, #128	; 0x80
     636:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     638:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     63a:	4298      	cmp	r0, r3
     63c:	d8cf      	bhi.n	5de <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     63e:	0f79      	lsrs	r1, r7, #29
     640:	00f8      	lsls	r0, r7, #3
     642:	9a00      	ldr	r2, [sp, #0]
     644:	9b01      	ldr	r3, [sp, #4]
     646:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     648:	00ea      	lsls	r2, r5, #3
     64a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     64c:	b2d2      	uxtb	r2, r2
     64e:	0352      	lsls	r2, r2, #13
     650:	432a      	orrs	r2, r5
     652:	e7db      	b.n	60c <_sercom_get_async_baud_val+0x44>
     654:	000091b5 	.word	0x000091b5
     658:	000004e5 	.word	0x000004e5

0000065c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     65c:	b510      	push	{r4, lr}
     65e:	b082      	sub	sp, #8
     660:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     662:	4b0e      	ldr	r3, [pc, #56]	; (69c <sercom_set_gclk_generator+0x40>)
     664:	781b      	ldrb	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	d007      	beq.n	67a <sercom_set_gclk_generator+0x1e>
     66a:	2900      	cmp	r1, #0
     66c:	d105      	bne.n	67a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     66e:	4b0b      	ldr	r3, [pc, #44]	; (69c <sercom_set_gclk_generator+0x40>)
     670:	785b      	ldrb	r3, [r3, #1]
     672:	4283      	cmp	r3, r0
     674:	d010      	beq.n	698 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     676:	201d      	movs	r0, #29
     678:	e00c      	b.n	694 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     67a:	a901      	add	r1, sp, #4
     67c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     67e:	2013      	movs	r0, #19
     680:	4b07      	ldr	r3, [pc, #28]	; (6a0 <sercom_set_gclk_generator+0x44>)
     682:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     684:	2013      	movs	r0, #19
     686:	4b07      	ldr	r3, [pc, #28]	; (6a4 <sercom_set_gclk_generator+0x48>)
     688:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <sercom_set_gclk_generator+0x40>)
     68c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     68e:	2201      	movs	r2, #1
     690:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     692:	2000      	movs	r0, #0
}
     694:	b002      	add	sp, #8
     696:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     698:	2000      	movs	r0, #0
     69a:	e7fb      	b.n	694 <sercom_set_gclk_generator+0x38>
     69c:	20000114 	.word	0x20000114
     6a0:	00001af9 	.word	0x00001af9
     6a4:	00001a6d 	.word	0x00001a6d

000006a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     6a8:	4b40      	ldr	r3, [pc, #256]	; (7ac <_sercom_get_default_pad+0x104>)
     6aa:	4298      	cmp	r0, r3
     6ac:	d031      	beq.n	712 <_sercom_get_default_pad+0x6a>
     6ae:	d90a      	bls.n	6c6 <_sercom_get_default_pad+0x1e>
     6b0:	4b3f      	ldr	r3, [pc, #252]	; (7b0 <_sercom_get_default_pad+0x108>)
     6b2:	4298      	cmp	r0, r3
     6b4:	d04d      	beq.n	752 <_sercom_get_default_pad+0xaa>
     6b6:	4b3f      	ldr	r3, [pc, #252]	; (7b4 <_sercom_get_default_pad+0x10c>)
     6b8:	4298      	cmp	r0, r3
     6ba:	d05a      	beq.n	772 <_sercom_get_default_pad+0xca>
     6bc:	4b3e      	ldr	r3, [pc, #248]	; (7b8 <_sercom_get_default_pad+0x110>)
     6be:	4298      	cmp	r0, r3
     6c0:	d037      	beq.n	732 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     6c2:	2000      	movs	r0, #0
}
     6c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     6c6:	4b3d      	ldr	r3, [pc, #244]	; (7bc <_sercom_get_default_pad+0x114>)
     6c8:	4298      	cmp	r0, r3
     6ca:	d00c      	beq.n	6e6 <_sercom_get_default_pad+0x3e>
     6cc:	4b3c      	ldr	r3, [pc, #240]	; (7c0 <_sercom_get_default_pad+0x118>)
     6ce:	4298      	cmp	r0, r3
     6d0:	d1f7      	bne.n	6c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d2:	2901      	cmp	r1, #1
     6d4:	d017      	beq.n	706 <_sercom_get_default_pad+0x5e>
     6d6:	2900      	cmp	r1, #0
     6d8:	d05d      	beq.n	796 <_sercom_get_default_pad+0xee>
     6da:	2902      	cmp	r1, #2
     6dc:	d015      	beq.n	70a <_sercom_get_default_pad+0x62>
     6de:	2903      	cmp	r1, #3
     6e0:	d015      	beq.n	70e <_sercom_get_default_pad+0x66>
	return 0;
     6e2:	2000      	movs	r0, #0
     6e4:	e7ee      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6e6:	2901      	cmp	r1, #1
     6e8:	d007      	beq.n	6fa <_sercom_get_default_pad+0x52>
     6ea:	2900      	cmp	r1, #0
     6ec:	d051      	beq.n	792 <_sercom_get_default_pad+0xea>
     6ee:	2902      	cmp	r1, #2
     6f0:	d005      	beq.n	6fe <_sercom_get_default_pad+0x56>
     6f2:	2903      	cmp	r1, #3
     6f4:	d005      	beq.n	702 <_sercom_get_default_pad+0x5a>
	return 0;
     6f6:	2000      	movs	r0, #0
     6f8:	e7e4      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6fa:	4832      	ldr	r0, [pc, #200]	; (7c4 <_sercom_get_default_pad+0x11c>)
     6fc:	e7e2      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     6fe:	4832      	ldr	r0, [pc, #200]	; (7c8 <_sercom_get_default_pad+0x120>)
     700:	e7e0      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     702:	4832      	ldr	r0, [pc, #200]	; (7cc <_sercom_get_default_pad+0x124>)
     704:	e7de      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     706:	4832      	ldr	r0, [pc, #200]	; (7d0 <_sercom_get_default_pad+0x128>)
     708:	e7dc      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     70a:	4832      	ldr	r0, [pc, #200]	; (7d4 <_sercom_get_default_pad+0x12c>)
     70c:	e7da      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     70e:	4832      	ldr	r0, [pc, #200]	; (7d8 <_sercom_get_default_pad+0x130>)
     710:	e7d8      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     712:	2901      	cmp	r1, #1
     714:	d007      	beq.n	726 <_sercom_get_default_pad+0x7e>
     716:	2900      	cmp	r1, #0
     718:	d03f      	beq.n	79a <_sercom_get_default_pad+0xf2>
     71a:	2902      	cmp	r1, #2
     71c:	d005      	beq.n	72a <_sercom_get_default_pad+0x82>
     71e:	2903      	cmp	r1, #3
     720:	d005      	beq.n	72e <_sercom_get_default_pad+0x86>
	return 0;
     722:	2000      	movs	r0, #0
     724:	e7ce      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     726:	482d      	ldr	r0, [pc, #180]	; (7dc <_sercom_get_default_pad+0x134>)
     728:	e7cc      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     72a:	482d      	ldr	r0, [pc, #180]	; (7e0 <_sercom_get_default_pad+0x138>)
     72c:	e7ca      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     72e:	482d      	ldr	r0, [pc, #180]	; (7e4 <_sercom_get_default_pad+0x13c>)
     730:	e7c8      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     732:	2901      	cmp	r1, #1
     734:	d007      	beq.n	746 <_sercom_get_default_pad+0x9e>
     736:	2900      	cmp	r1, #0
     738:	d031      	beq.n	79e <_sercom_get_default_pad+0xf6>
     73a:	2902      	cmp	r1, #2
     73c:	d005      	beq.n	74a <_sercom_get_default_pad+0xa2>
     73e:	2903      	cmp	r1, #3
     740:	d005      	beq.n	74e <_sercom_get_default_pad+0xa6>
	return 0;
     742:	2000      	movs	r0, #0
     744:	e7be      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     746:	4828      	ldr	r0, [pc, #160]	; (7e8 <_sercom_get_default_pad+0x140>)
     748:	e7bc      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     74a:	4828      	ldr	r0, [pc, #160]	; (7ec <_sercom_get_default_pad+0x144>)
     74c:	e7ba      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     74e:	4828      	ldr	r0, [pc, #160]	; (7f0 <_sercom_get_default_pad+0x148>)
     750:	e7b8      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     752:	2901      	cmp	r1, #1
     754:	d007      	beq.n	766 <_sercom_get_default_pad+0xbe>
     756:	2900      	cmp	r1, #0
     758:	d023      	beq.n	7a2 <_sercom_get_default_pad+0xfa>
     75a:	2902      	cmp	r1, #2
     75c:	d005      	beq.n	76a <_sercom_get_default_pad+0xc2>
     75e:	2903      	cmp	r1, #3
     760:	d005      	beq.n	76e <_sercom_get_default_pad+0xc6>
	return 0;
     762:	2000      	movs	r0, #0
     764:	e7ae      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     766:	4823      	ldr	r0, [pc, #140]	; (7f4 <_sercom_get_default_pad+0x14c>)
     768:	e7ac      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     76a:	4823      	ldr	r0, [pc, #140]	; (7f8 <_sercom_get_default_pad+0x150>)
     76c:	e7aa      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     76e:	4823      	ldr	r0, [pc, #140]	; (7fc <_sercom_get_default_pad+0x154>)
     770:	e7a8      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     772:	2901      	cmp	r1, #1
     774:	d007      	beq.n	786 <_sercom_get_default_pad+0xde>
     776:	2900      	cmp	r1, #0
     778:	d015      	beq.n	7a6 <_sercom_get_default_pad+0xfe>
     77a:	2902      	cmp	r1, #2
     77c:	d005      	beq.n	78a <_sercom_get_default_pad+0xe2>
     77e:	2903      	cmp	r1, #3
     780:	d005      	beq.n	78e <_sercom_get_default_pad+0xe6>
	return 0;
     782:	2000      	movs	r0, #0
     784:	e79e      	b.n	6c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     786:	481e      	ldr	r0, [pc, #120]	; (800 <_sercom_get_default_pad+0x158>)
     788:	e79c      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     78a:	481e      	ldr	r0, [pc, #120]	; (804 <_sercom_get_default_pad+0x15c>)
     78c:	e79a      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     78e:	481e      	ldr	r0, [pc, #120]	; (808 <_sercom_get_default_pad+0x160>)
     790:	e798      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     792:	481e      	ldr	r0, [pc, #120]	; (80c <_sercom_get_default_pad+0x164>)
     794:	e796      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     796:	2003      	movs	r0, #3
     798:	e794      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     79a:	481d      	ldr	r0, [pc, #116]	; (810 <_sercom_get_default_pad+0x168>)
     79c:	e792      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     79e:	481d      	ldr	r0, [pc, #116]	; (814 <_sercom_get_default_pad+0x16c>)
     7a0:	e790      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     7a2:	481d      	ldr	r0, [pc, #116]	; (818 <_sercom_get_default_pad+0x170>)
     7a4:	e78e      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     7a6:	481d      	ldr	r0, [pc, #116]	; (81c <_sercom_get_default_pad+0x174>)
     7a8:	e78c      	b.n	6c4 <_sercom_get_default_pad+0x1c>
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	42001000 	.word	0x42001000
     7b0:	42001800 	.word	0x42001800
     7b4:	42001c00 	.word	0x42001c00
     7b8:	42001400 	.word	0x42001400
     7bc:	42000800 	.word	0x42000800
     7c0:	42000c00 	.word	0x42000c00
     7c4:	00050003 	.word	0x00050003
     7c8:	00060003 	.word	0x00060003
     7cc:	00070003 	.word	0x00070003
     7d0:	00010003 	.word	0x00010003
     7d4:	001e0003 	.word	0x001e0003
     7d8:	001f0003 	.word	0x001f0003
     7dc:	000d0002 	.word	0x000d0002
     7e0:	000e0002 	.word	0x000e0002
     7e4:	000f0002 	.word	0x000f0002
     7e8:	00110003 	.word	0x00110003
     7ec:	00120003 	.word	0x00120003
     7f0:	00130003 	.word	0x00130003
     7f4:	003f0005 	.word	0x003f0005
     7f8:	003e0005 	.word	0x003e0005
     7fc:	00520005 	.word	0x00520005
     800:	00170003 	.word	0x00170003
     804:	00180003 	.word	0x00180003
     808:	00190003 	.word	0x00190003
     80c:	00040003 	.word	0x00040003
     810:	000c0002 	.word	0x000c0002
     814:	00100003 	.word	0x00100003
     818:	00530005 	.word	0x00530005
     81c:	00160003 	.word	0x00160003

00000820 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     820:	b530      	push	{r4, r5, lr}
     822:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     824:	4b0b      	ldr	r3, [pc, #44]	; (854 <_sercom_get_sercom_inst_index+0x34>)
     826:	466a      	mov	r2, sp
     828:	cb32      	ldmia	r3!, {r1, r4, r5}
     82a:	c232      	stmia	r2!, {r1, r4, r5}
     82c:	cb32      	ldmia	r3!, {r1, r4, r5}
     82e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     830:	9b00      	ldr	r3, [sp, #0]
     832:	4283      	cmp	r3, r0
     834:	d00b      	beq.n	84e <_sercom_get_sercom_inst_index+0x2e>
     836:	2301      	movs	r3, #1
     838:	009a      	lsls	r2, r3, #2
     83a:	4669      	mov	r1, sp
     83c:	5852      	ldr	r2, [r2, r1]
     83e:	4282      	cmp	r2, r0
     840:	d006      	beq.n	850 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     842:	3301      	adds	r3, #1
     844:	2b06      	cmp	r3, #6
     846:	d1f7      	bne.n	838 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     848:	2000      	movs	r0, #0
}
     84a:	b007      	add	sp, #28
     84c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     84e:	2300      	movs	r3, #0
			return i;
     850:	b2d8      	uxtb	r0, r3
     852:	e7fa      	b.n	84a <_sercom_get_sercom_inst_index+0x2a>
     854:	0000a17c 	.word	0x0000a17c

00000858 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     858:	4770      	bx	lr
	...

0000085c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     85c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     85e:	4b0a      	ldr	r3, [pc, #40]	; (888 <_sercom_set_handler+0x2c>)
     860:	781b      	ldrb	r3, [r3, #0]
     862:	2b00      	cmp	r3, #0
     864:	d10c      	bne.n	880 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     866:	4f09      	ldr	r7, [pc, #36]	; (88c <_sercom_set_handler+0x30>)
     868:	4e09      	ldr	r6, [pc, #36]	; (890 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     86a:	4d0a      	ldr	r5, [pc, #40]	; (894 <_sercom_set_handler+0x38>)
     86c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     86e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     870:	195a      	adds	r2, r3, r5
     872:	6014      	str	r4, [r2, #0]
     874:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     876:	2b18      	cmp	r3, #24
     878:	d1f9      	bne.n	86e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     87a:	2201      	movs	r2, #1
     87c:	4b02      	ldr	r3, [pc, #8]	; (888 <_sercom_set_handler+0x2c>)
     87e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     880:	0080      	lsls	r0, r0, #2
     882:	4b02      	ldr	r3, [pc, #8]	; (88c <_sercom_set_handler+0x30>)
     884:	50c1      	str	r1, [r0, r3]
}
     886:	bdf0      	pop	{r4, r5, r6, r7, pc}
     888:	20000116 	.word	0x20000116
     88c:	20000118 	.word	0x20000118
     890:	00000859 	.word	0x00000859
     894:	2000042c 	.word	0x2000042c

00000898 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     898:	b500      	push	{lr}
     89a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     89c:	2309      	movs	r3, #9
     89e:	466a      	mov	r2, sp
     8a0:	7013      	strb	r3, [r2, #0]
     8a2:	3301      	adds	r3, #1
     8a4:	7053      	strb	r3, [r2, #1]
     8a6:	3301      	adds	r3, #1
     8a8:	7093      	strb	r3, [r2, #2]
     8aa:	3301      	adds	r3, #1
     8ac:	70d3      	strb	r3, [r2, #3]
     8ae:	3301      	adds	r3, #1
     8b0:	7113      	strb	r3, [r2, #4]
     8b2:	3301      	adds	r3, #1
     8b4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     8b6:	4b03      	ldr	r3, [pc, #12]	; (8c4 <_sercom_get_interrupt_vector+0x2c>)
     8b8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     8ba:	466b      	mov	r3, sp
     8bc:	5618      	ldrsb	r0, [r3, r0]
}
     8be:	b003      	add	sp, #12
     8c0:	bd00      	pop	{pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	00000821 	.word	0x00000821

000008c8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     8c8:	b510      	push	{r4, lr}
     8ca:	4b02      	ldr	r3, [pc, #8]	; (8d4 <SERCOM0_Handler+0xc>)
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	2000      	movs	r0, #0
     8d0:	4798      	blx	r3
     8d2:	bd10      	pop	{r4, pc}
     8d4:	20000118 	.word	0x20000118

000008d8 <SERCOM1_Handler>:
     8d8:	b510      	push	{r4, lr}
     8da:	4b02      	ldr	r3, [pc, #8]	; (8e4 <SERCOM1_Handler+0xc>)
     8dc:	685b      	ldr	r3, [r3, #4]
     8de:	2001      	movs	r0, #1
     8e0:	4798      	blx	r3
     8e2:	bd10      	pop	{r4, pc}
     8e4:	20000118 	.word	0x20000118

000008e8 <SERCOM2_Handler>:
     8e8:	b510      	push	{r4, lr}
     8ea:	4b02      	ldr	r3, [pc, #8]	; (8f4 <SERCOM2_Handler+0xc>)
     8ec:	689b      	ldr	r3, [r3, #8]
     8ee:	2002      	movs	r0, #2
     8f0:	4798      	blx	r3
     8f2:	bd10      	pop	{r4, pc}
     8f4:	20000118 	.word	0x20000118

000008f8 <SERCOM3_Handler>:
     8f8:	b510      	push	{r4, lr}
     8fa:	4b02      	ldr	r3, [pc, #8]	; (904 <SERCOM3_Handler+0xc>)
     8fc:	68db      	ldr	r3, [r3, #12]
     8fe:	2003      	movs	r0, #3
     900:	4798      	blx	r3
     902:	bd10      	pop	{r4, pc}
     904:	20000118 	.word	0x20000118

00000908 <SERCOM4_Handler>:
     908:	b510      	push	{r4, lr}
     90a:	4b02      	ldr	r3, [pc, #8]	; (914 <SERCOM4_Handler+0xc>)
     90c:	691b      	ldr	r3, [r3, #16]
     90e:	2004      	movs	r0, #4
     910:	4798      	blx	r3
     912:	bd10      	pop	{r4, pc}
     914:	20000118 	.word	0x20000118

00000918 <SERCOM5_Handler>:
     918:	b510      	push	{r4, lr}
     91a:	4b02      	ldr	r3, [pc, #8]	; (924 <SERCOM5_Handler+0xc>)
     91c:	695b      	ldr	r3, [r3, #20]
     91e:	2005      	movs	r0, #5
     920:	4798      	blx	r3
     922:	bd10      	pop	{r4, pc}
     924:	20000118 	.word	0x20000118

00000928 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     928:	b5f0      	push	{r4, r5, r6, r7, lr}
     92a:	46d6      	mov	lr, sl
     92c:	464f      	mov	r7, r9
     92e:	b580      	push	{r7, lr}
     930:	b08b      	sub	sp, #44	; 0x2c
     932:	4681      	mov	r9, r0
     934:	000f      	movs	r7, r1
     936:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     938:	0003      	movs	r3, r0
     93a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     93c:	680b      	ldr	r3, [r1, #0]
     93e:	079b      	lsls	r3, r3, #30
     940:	d409      	bmi.n	956 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     942:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     944:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     946:	07db      	lsls	r3, r3, #31
     948:	d400      	bmi.n	94c <spi_init+0x24>
     94a:	e098      	b.n	a7e <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     94c:	b00b      	add	sp, #44	; 0x2c
     94e:	bc0c      	pop	{r2, r3}
     950:	4691      	mov	r9, r2
     952:	469a      	mov	sl, r3
     954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     956:	6a93      	ldr	r3, [r2, #40]	; 0x28
     958:	9305      	str	r3, [sp, #20]
     95a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     95c:	9306      	str	r3, [sp, #24]
     95e:	6b13      	ldr	r3, [r2, #48]	; 0x30
     960:	9307      	str	r3, [sp, #28]
     962:	6b53      	ldr	r3, [r2, #52]	; 0x34
     964:	9308      	str	r3, [sp, #32]
     966:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     968:	ab05      	add	r3, sp, #20
     96a:	9301      	str	r3, [sp, #4]
     96c:	e00a      	b.n	984 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     96e:	0038      	movs	r0, r7
     970:	4b93      	ldr	r3, [pc, #588]	; (bc0 <spi_init+0x298>)
     972:	4798      	blx	r3
     974:	e00c      	b.n	990 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     976:	230f      	movs	r3, #15
     978:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     97a:	4281      	cmp	r1, r0
     97c:	d12d      	bne.n	9da <spi_init+0xb2>
     97e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     980:	2e04      	cmp	r6, #4
     982:	d02f      	beq.n	9e4 <spi_init+0xbc>
     984:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     986:	00b3      	lsls	r3, r6, #2
     988:	9a01      	ldr	r2, [sp, #4]
     98a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     98c:	2800      	cmp	r0, #0
     98e:	d0ee      	beq.n	96e <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     990:	1c43      	adds	r3, r0, #1
     992:	d0f4      	beq.n	97e <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     994:	0401      	lsls	r1, r0, #16
     996:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     998:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     99a:	b2c3      	uxtb	r3, r0
     99c:	469c      	mov	ip, r3
		return NULL;
     99e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9a0:	0602      	lsls	r2, r0, #24
     9a2:	d405      	bmi.n	9b0 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     9a4:	4663      	mov	r3, ip
     9a6:	095b      	lsrs	r3, r3, #5
     9a8:	01db      	lsls	r3, r3, #7
     9aa:	4a86      	ldr	r2, [pc, #536]	; (bc4 <spi_init+0x29c>)
     9ac:	4692      	mov	sl, r2
     9ae:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     9b0:	221f      	movs	r2, #31
     9b2:	4660      	mov	r0, ip
     9b4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9b6:	1898      	adds	r0, r3, r2
     9b8:	3040      	adds	r0, #64	; 0x40
     9ba:	7800      	ldrb	r0, [r0, #0]
     9bc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     9be:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9c0:	4655      	mov	r5, sl
     9c2:	07ed      	lsls	r5, r5, #31
     9c4:	d5d9      	bpl.n	97a <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     9c6:	0852      	lsrs	r2, r2, #1
     9c8:	189b      	adds	r3, r3, r2
     9ca:	3330      	adds	r3, #48	; 0x30
     9cc:	7818      	ldrb	r0, [r3, #0]
     9ce:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     9d0:	4663      	mov	r3, ip
     9d2:	07db      	lsls	r3, r3, #31
     9d4:	d5cf      	bpl.n	976 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     9d6:	0900      	lsrs	r0, r0, #4
     9d8:	e7cf      	b.n	97a <spi_init+0x52>
			module->hw = NULL;
     9da:	2300      	movs	r3, #0
     9dc:	464a      	mov	r2, r9
     9de:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     9e0:	201c      	movs	r0, #28
     9e2:	e7b3      	b.n	94c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     9e4:	2013      	movs	r0, #19
     9e6:	4b78      	ldr	r3, [pc, #480]	; (bc8 <spi_init+0x2a0>)
     9e8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     9ea:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     9ec:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     9ee:	2a01      	cmp	r2, #1
     9f0:	d027      	beq.n	a42 <spi_init+0x11a>
	ctrla |= config->mux_setting;
     9f2:	6863      	ldr	r3, [r4, #4]
     9f4:	68a2      	ldr	r2, [r4, #8]
     9f6:	4313      	orrs	r3, r2
     9f8:	68e2      	ldr	r2, [r4, #12]
     9fa:	4313      	orrs	r3, r2
     9fc:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     9fe:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
     a00:	7c61      	ldrb	r1, [r4, #17]
     a02:	2900      	cmp	r1, #0
     a04:	d001      	beq.n	a0a <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     a06:	2180      	movs	r1, #128	; 0x80
     a08:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     a0a:	7ca1      	ldrb	r1, [r4, #18]
     a0c:	2900      	cmp	r1, #0
     a0e:	d002      	beq.n	a16 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a10:	2180      	movs	r1, #128	; 0x80
     a12:	0289      	lsls	r1, r1, #10
     a14:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     a16:	7ce1      	ldrb	r1, [r4, #19]
     a18:	2900      	cmp	r1, #0
     a1a:	d002      	beq.n	a22 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     a1c:	2180      	movs	r1, #128	; 0x80
     a1e:	0089      	lsls	r1, r1, #2
     a20:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     a22:	7d21      	ldrb	r1, [r4, #20]
     a24:	2900      	cmp	r1, #0
     a26:	d002      	beq.n	a2e <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     a28:	2180      	movs	r1, #128	; 0x80
     a2a:	0189      	lsls	r1, r1, #6
     a2c:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
     a2e:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     a30:	2002      	movs	r0, #2
     a32:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
     a34:	428b      	cmp	r3, r1
     a36:	d018      	beq.n	a6a <spi_init+0x142>
	module->hw = NULL;
     a38:	2300      	movs	r3, #0
     a3a:	464a      	mov	r2, r9
     a3c:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     a3e:	201c      	movs	r0, #28
     a40:	e784      	b.n	94c <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
     a42:	aa04      	add	r2, sp, #16
     a44:	0001      	movs	r1, r0
     a46:	69a0      	ldr	r0, [r4, #24]
     a48:	4b60      	ldr	r3, [pc, #384]	; (bcc <spi_init+0x2a4>)
     a4a:	4798      	blx	r3
     a4c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     a4e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     a50:	2b00      	cmp	r3, #0
     a52:	d000      	beq.n	a56 <spi_init+0x12e>
     a54:	e77a      	b.n	94c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a56:	7b3b      	ldrb	r3, [r7, #12]
     a58:	b2db      	uxtb	r3, r3
     a5a:	aa04      	add	r2, sp, #16
     a5c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     a5e:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a60:	429a      	cmp	r2, r3
     a62:	d000      	beq.n	a66 <spi_init+0x13e>
     a64:	e772      	b.n	94c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     a66:	350c      	adds	r5, #12
     a68:	e7c3      	b.n	9f2 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
     a6a:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     a6c:	4293      	cmp	r3, r2
     a6e:	d1e3      	bne.n	a38 <spi_init+0x110>
		module->mode           = config->mode;
     a70:	7823      	ldrb	r3, [r4, #0]
     a72:	464a      	mov	r2, r9
     a74:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
     a76:	7c23      	ldrb	r3, [r4, #16]
     a78:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     a7a:	2000      	movs	r0, #0
     a7c:	e766      	b.n	94c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a7e:	0008      	movs	r0, r1
     a80:	4b53      	ldr	r3, [pc, #332]	; (bd0 <spi_init+0x2a8>)
     a82:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a84:	4a53      	ldr	r2, [pc, #332]	; (bd4 <spi_init+0x2ac>)
     a86:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a88:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a8a:	2301      	movs	r3, #1
     a8c:	40ab      	lsls	r3, r5
     a8e:	430b      	orrs	r3, r1
     a90:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     a92:	a909      	add	r1, sp, #36	; 0x24
     a94:	2624      	movs	r6, #36	; 0x24
     a96:	5da3      	ldrb	r3, [r4, r6]
     a98:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a9a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a9c:	b2c5      	uxtb	r5, r0
     a9e:	0028      	movs	r0, r5
     aa0:	4b4d      	ldr	r3, [pc, #308]	; (bd8 <spi_init+0x2b0>)
     aa2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     aa4:	0028      	movs	r0, r5
     aa6:	4b4d      	ldr	r3, [pc, #308]	; (bdc <spi_init+0x2b4>)
     aa8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     aaa:	5da0      	ldrb	r0, [r4, r6]
     aac:	2100      	movs	r1, #0
     aae:	4b4c      	ldr	r3, [pc, #304]	; (be0 <spi_init+0x2b8>)
     ab0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     ab2:	7823      	ldrb	r3, [r4, #0]
     ab4:	2b01      	cmp	r3, #1
     ab6:	d019      	beq.n	aec <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ab8:	464b      	mov	r3, r9
     aba:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     abc:	ab04      	add	r3, sp, #16
     abe:	2280      	movs	r2, #128	; 0x80
     ac0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ac2:	2200      	movs	r2, #0
     ac4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ac6:	2101      	movs	r1, #1
     ac8:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     aca:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     acc:	7823      	ldrb	r3, [r4, #0]
     ace:	2b00      	cmp	r3, #0
     ad0:	d101      	bne.n	ad6 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ad2:	ab04      	add	r3, sp, #16
     ad4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ad8:	9305      	str	r3, [sp, #20]
     ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     adc:	9306      	str	r3, [sp, #24]
     ade:	6b23      	ldr	r3, [r4, #48]	; 0x30
     ae0:	9307      	str	r3, [sp, #28]
     ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ae4:	9308      	str	r3, [sp, #32]
     ae6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ae8:	ad05      	add	r5, sp, #20
     aea:	e011      	b.n	b10 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     aec:	683b      	ldr	r3, [r7, #0]
     aee:	220c      	movs	r2, #12
     af0:	4313      	orrs	r3, r2
     af2:	603b      	str	r3, [r7, #0]
     af4:	e7e0      	b.n	ab8 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     af6:	0030      	movs	r0, r6
     af8:	4b31      	ldr	r3, [pc, #196]	; (bc0 <spi_init+0x298>)
     afa:	4798      	blx	r3
     afc:	e00d      	b.n	b1a <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     afe:	a904      	add	r1, sp, #16
     b00:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b02:	0c00      	lsrs	r0, r0, #16
     b04:	b2c0      	uxtb	r0, r0
     b06:	4b37      	ldr	r3, [pc, #220]	; (be4 <spi_init+0x2bc>)
     b08:	4798      	blx	r3
     b0a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     b0c:	2f04      	cmp	r7, #4
     b0e:	d007      	beq.n	b20 <spi_init+0x1f8>
     b10:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b12:	00bb      	lsls	r3, r7, #2
     b14:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     b16:	2800      	cmp	r0, #0
     b18:	d0ed      	beq.n	af6 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
     b1a:	1c43      	adds	r3, r0, #1
     b1c:	d1ef      	bne.n	afe <spi_init+0x1d6>
     b1e:	e7f4      	b.n	b0a <spi_init+0x1e2>
	module->mode             = config->mode;
     b20:	7823      	ldrb	r3, [r4, #0]
     b22:	464a      	mov	r2, r9
     b24:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     b26:	7c23      	ldrb	r3, [r4, #16]
     b28:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     b2a:	7ca3      	ldrb	r3, [r4, #18]
     b2c:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     b2e:	7d23      	ldrb	r3, [r4, #20]
     b30:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     b32:	2200      	movs	r2, #0
     b34:	ab02      	add	r3, sp, #8
     b36:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     b38:	7823      	ldrb	r3, [r4, #0]
     b3a:	2b01      	cmp	r3, #1
     b3c:	d028      	beq.n	b90 <spi_init+0x268>
	ctrla |= config->transfer_mode;
     b3e:	6863      	ldr	r3, [r4, #4]
     b40:	68a2      	ldr	r2, [r4, #8]
     b42:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
     b44:	68e2      	ldr	r2, [r4, #12]
     b46:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
     b48:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
     b4a:	7c62      	ldrb	r2, [r4, #17]
     b4c:	2a00      	cmp	r2, #0
     b4e:	d103      	bne.n	b58 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b50:	4a25      	ldr	r2, [pc, #148]	; (be8 <spi_init+0x2c0>)
     b52:	7892      	ldrb	r2, [r2, #2]
     b54:	0792      	lsls	r2, r2, #30
     b56:	d501      	bpl.n	b5c <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b58:	2280      	movs	r2, #128	; 0x80
     b5a:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
     b5c:	7ca2      	ldrb	r2, [r4, #18]
     b5e:	2a00      	cmp	r2, #0
     b60:	d002      	beq.n	b68 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b62:	2280      	movs	r2, #128	; 0x80
     b64:	0292      	lsls	r2, r2, #10
     b66:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
     b68:	7ce2      	ldrb	r2, [r4, #19]
     b6a:	2a00      	cmp	r2, #0
     b6c:	d002      	beq.n	b74 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b6e:	2280      	movs	r2, #128	; 0x80
     b70:	0092      	lsls	r2, r2, #2
     b72:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
     b74:	7d22      	ldrb	r2, [r4, #20]
     b76:	2a00      	cmp	r2, #0
     b78:	d002      	beq.n	b80 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b7a:	2280      	movs	r2, #128	; 0x80
     b7c:	0192      	lsls	r2, r2, #6
     b7e:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
     b80:	6832      	ldr	r2, [r6, #0]
     b82:	4313      	orrs	r3, r2
     b84:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     b86:	6873      	ldr	r3, [r6, #4]
     b88:	430b      	orrs	r3, r1
     b8a:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
     b8c:	2000      	movs	r0, #0
     b8e:	e6dd      	b.n	94c <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b90:	464b      	mov	r3, r9
     b92:	6818      	ldr	r0, [r3, #0]
     b94:	4b0e      	ldr	r3, [pc, #56]	; (bd0 <spi_init+0x2a8>)
     b96:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b98:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b9a:	b2c0      	uxtb	r0, r0
     b9c:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <spi_init+0x2a0>)
     b9e:	4798      	blx	r3
     ba0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     ba2:	ab02      	add	r3, sp, #8
     ba4:	1d9a      	adds	r2, r3, #6
     ba6:	69a0      	ldr	r0, [r4, #24]
     ba8:	4b08      	ldr	r3, [pc, #32]	; (bcc <spi_init+0x2a4>)
     baa:	4798      	blx	r3
     bac:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     bae:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     bb0:	2b00      	cmp	r3, #0
     bb2:	d000      	beq.n	bb6 <spi_init+0x28e>
     bb4:	e6ca      	b.n	94c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     bb6:	ab02      	add	r3, sp, #8
     bb8:	3306      	adds	r3, #6
     bba:	781b      	ldrb	r3, [r3, #0]
     bbc:	7333      	strb	r3, [r6, #12]
     bbe:	e7be      	b.n	b3e <spi_init+0x216>
     bc0:	000006a9 	.word	0x000006a9
     bc4:	41004400 	.word	0x41004400
     bc8:	00001b15 	.word	0x00001b15
     bcc:	0000059f 	.word	0x0000059f
     bd0:	00000821 	.word	0x00000821
     bd4:	40000400 	.word	0x40000400
     bd8:	00001af9 	.word	0x00001af9
     bdc:	00001a6d 	.word	0x00001a6d
     be0:	0000065d 	.word	0x0000065d
     be4:	00001bf1 	.word	0x00001bf1
     be8:	41002000 	.word	0x41002000

00000bec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     bec:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     bee:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     bf0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     bf2:	2c01      	cmp	r4, #1
     bf4:	d001      	beq.n	bfa <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     bf6:	0018      	movs	r0, r3
     bf8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     bfa:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     bfc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     bfe:	2c00      	cmp	r4, #0
     c00:	d1f9      	bne.n	bf6 <spi_select_slave+0xa>
		if (select) {
     c02:	2a00      	cmp	r2, #0
     c04:	d058      	beq.n	cb8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     c06:	784b      	ldrb	r3, [r1, #1]
     c08:	2b00      	cmp	r3, #0
     c0a:	d044      	beq.n	c96 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c0c:	6803      	ldr	r3, [r0, #0]
     c0e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     c10:	07db      	lsls	r3, r3, #31
     c12:	d410      	bmi.n	c36 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     c14:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c16:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c18:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c1a:	2900      	cmp	r1, #0
     c1c:	d104      	bne.n	c28 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     c1e:	0953      	lsrs	r3, r2, #5
     c20:	01db      	lsls	r3, r3, #7
     c22:	492e      	ldr	r1, [pc, #184]	; (cdc <spi_select_slave+0xf0>)
     c24:	468c      	mov	ip, r1
     c26:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c28:	211f      	movs	r1, #31
     c2a:	4011      	ands	r1, r2
     c2c:	2201      	movs	r2, #1
     c2e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     c30:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     c32:	2305      	movs	r3, #5
     c34:	e7df      	b.n	bf6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     c36:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c38:	09d4      	lsrs	r4, r2, #7
		return NULL;
     c3a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c3c:	2c00      	cmp	r4, #0
     c3e:	d104      	bne.n	c4a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     c40:	0953      	lsrs	r3, r2, #5
     c42:	01db      	lsls	r3, r3, #7
     c44:	4c25      	ldr	r4, [pc, #148]	; (cdc <spi_select_slave+0xf0>)
     c46:	46a4      	mov	ip, r4
     c48:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c4a:	241f      	movs	r4, #31
     c4c:	4014      	ands	r4, r2
     c4e:	2201      	movs	r2, #1
     c50:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c52:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     c54:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     c58:	07d2      	lsls	r2, r2, #31
     c5a:	d501      	bpl.n	c60 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     c5c:	788a      	ldrb	r2, [r1, #2]
     c5e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     c60:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     c62:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     c64:	2a00      	cmp	r2, #0
     c66:	d1c6      	bne.n	bf6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     c68:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     c6a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     c6c:	7e13      	ldrb	r3, [r2, #24]
     c6e:	420b      	tst	r3, r1
     c70:	d0fc      	beq.n	c6c <spi_select_slave+0x80>
     c72:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     c74:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
     c76:	0749      	lsls	r1, r1, #29
     c78:	d5bd      	bpl.n	bf6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     c7a:	8b53      	ldrh	r3, [r2, #26]
     c7c:	075b      	lsls	r3, r3, #29
     c7e:	d501      	bpl.n	c84 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     c80:	2304      	movs	r3, #4
     c82:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c84:	7983      	ldrb	r3, [r0, #6]
     c86:	2b01      	cmp	r3, #1
     c88:	d002      	beq.n	c90 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     c8a:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c8c:	2300      	movs	r3, #0
     c8e:	e7b2      	b.n	bf6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     c90:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c92:	2300      	movs	r3, #0
     c94:	e7af      	b.n	bf6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     c96:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c98:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c9a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c9c:	2900      	cmp	r1, #0
     c9e:	d104      	bne.n	caa <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     ca0:	0953      	lsrs	r3, r2, #5
     ca2:	01db      	lsls	r3, r3, #7
     ca4:	490d      	ldr	r1, [pc, #52]	; (cdc <spi_select_slave+0xf0>)
     ca6:	468c      	mov	ip, r1
     ca8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     caa:	211f      	movs	r1, #31
     cac:	4011      	ands	r1, r2
     cae:	2201      	movs	r2, #1
     cb0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     cb2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     cb4:	2300      	movs	r3, #0
     cb6:	e79e      	b.n	bf6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     cb8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     cba:	09d1      	lsrs	r1, r2, #7
		return NULL;
     cbc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     cbe:	2900      	cmp	r1, #0
     cc0:	d104      	bne.n	ccc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     cc2:	0953      	lsrs	r3, r2, #5
     cc4:	01db      	lsls	r3, r3, #7
     cc6:	4905      	ldr	r1, [pc, #20]	; (cdc <spi_select_slave+0xf0>)
     cc8:	468c      	mov	ip, r1
     cca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ccc:	211f      	movs	r1, #31
     cce:	4011      	ands	r1, r2
     cd0:	2201      	movs	r2, #1
     cd2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     cd4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     cd6:	2300      	movs	r3, #0
     cd8:	e78d      	b.n	bf6 <spi_select_slave+0xa>
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	41004400 	.word	0x41004400

00000ce0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ce2:	46de      	mov	lr, fp
     ce4:	4657      	mov	r7, sl
     ce6:	464e      	mov	r6, r9
     ce8:	4645      	mov	r5, r8
     cea:	b5e0      	push	{r5, r6, r7, lr}
     cec:	b091      	sub	sp, #68	; 0x44
     cee:	0005      	movs	r5, r0
     cf0:	000c      	movs	r4, r1
     cf2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     cf4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cf6:	0008      	movs	r0, r1
     cf8:	4bbc      	ldr	r3, [pc, #752]	; (fec <usart_init+0x30c>)
     cfa:	4798      	blx	r3
     cfc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     cfe:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d00:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d02:	07db      	lsls	r3, r3, #31
     d04:	d506      	bpl.n	d14 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d06:	b011      	add	sp, #68	; 0x44
     d08:	bc3c      	pop	{r2, r3, r4, r5}
     d0a:	4690      	mov	r8, r2
     d0c:	4699      	mov	r9, r3
     d0e:	46a2      	mov	sl, r4
     d10:	46ab      	mov	fp, r5
     d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d14:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     d16:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d18:	079b      	lsls	r3, r3, #30
     d1a:	d4f4      	bmi.n	d06 <usart_init+0x26>
     d1c:	49b4      	ldr	r1, [pc, #720]	; (ff0 <usart_init+0x310>)
     d1e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d20:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d22:	2301      	movs	r3, #1
     d24:	40bb      	lsls	r3, r7
     d26:	4303      	orrs	r3, r0
     d28:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d2a:	a90f      	add	r1, sp, #60	; 0x3c
     d2c:	272d      	movs	r7, #45	; 0x2d
     d2e:	5df3      	ldrb	r3, [r6, r7]
     d30:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d32:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d34:	b2d3      	uxtb	r3, r2
     d36:	9302      	str	r3, [sp, #8]
     d38:	0018      	movs	r0, r3
     d3a:	4bae      	ldr	r3, [pc, #696]	; (ff4 <usart_init+0x314>)
     d3c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d3e:	9802      	ldr	r0, [sp, #8]
     d40:	4bad      	ldr	r3, [pc, #692]	; (ff8 <usart_init+0x318>)
     d42:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d44:	5df0      	ldrb	r0, [r6, r7]
     d46:	2100      	movs	r1, #0
     d48:	4bac      	ldr	r3, [pc, #688]	; (ffc <usart_init+0x31c>)
     d4a:	4798      	blx	r3
	module->character_size = config->character_size;
     d4c:	7af3      	ldrb	r3, [r6, #11]
     d4e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     d50:	2324      	movs	r3, #36	; 0x24
     d52:	5cf3      	ldrb	r3, [r6, r3]
     d54:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d56:	2325      	movs	r3, #37	; 0x25
     d58:	5cf3      	ldrb	r3, [r6, r3]
     d5a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     d5c:	7ef3      	ldrb	r3, [r6, #27]
     d5e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     d60:	7f33      	ldrb	r3, [r6, #28]
     d62:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d64:	682b      	ldr	r3, [r5, #0]
     d66:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d68:	0018      	movs	r0, r3
     d6a:	4ba0      	ldr	r3, [pc, #640]	; (fec <usart_init+0x30c>)
     d6c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d6e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     d70:	2200      	movs	r2, #0
     d72:	230e      	movs	r3, #14
     d74:	a906      	add	r1, sp, #24
     d76:	468c      	mov	ip, r1
     d78:	4463      	add	r3, ip
     d7a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     d7c:	8a32      	ldrh	r2, [r6, #16]
     d7e:	9202      	str	r2, [sp, #8]
     d80:	2380      	movs	r3, #128	; 0x80
     d82:	01db      	lsls	r3, r3, #7
     d84:	429a      	cmp	r2, r3
     d86:	d100      	bne.n	d8a <usart_init+0xaa>
     d88:	e09e      	b.n	ec8 <usart_init+0x1e8>
     d8a:	d90f      	bls.n	dac <usart_init+0xcc>
     d8c:	23c0      	movs	r3, #192	; 0xc0
     d8e:	01db      	lsls	r3, r3, #7
     d90:	9a02      	ldr	r2, [sp, #8]
     d92:	429a      	cmp	r2, r3
     d94:	d100      	bne.n	d98 <usart_init+0xb8>
     d96:	e092      	b.n	ebe <usart_init+0x1de>
     d98:	2380      	movs	r3, #128	; 0x80
     d9a:	021b      	lsls	r3, r3, #8
     d9c:	429a      	cmp	r2, r3
     d9e:	d000      	beq.n	da2 <usart_init+0xc2>
     da0:	e11f      	b.n	fe2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     da2:	2303      	movs	r3, #3
     da4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     da6:	2300      	movs	r3, #0
     da8:	9307      	str	r3, [sp, #28]
     daa:	e008      	b.n	dbe <usart_init+0xde>
	switch (config->sample_rate) {
     dac:	2380      	movs	r3, #128	; 0x80
     dae:	019b      	lsls	r3, r3, #6
     db0:	429a      	cmp	r2, r3
     db2:	d000      	beq.n	db6 <usart_init+0xd6>
     db4:	e115      	b.n	fe2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     db6:	2310      	movs	r3, #16
     db8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     dba:	3b0f      	subs	r3, #15
     dbc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     dbe:	6833      	ldr	r3, [r6, #0]
     dc0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     dc2:	68f3      	ldr	r3, [r6, #12]
     dc4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     dc6:	6973      	ldr	r3, [r6, #20]
     dc8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     dca:	7e33      	ldrb	r3, [r6, #24]
     dcc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     dce:	2326      	movs	r3, #38	; 0x26
     dd0:	5cf3      	ldrb	r3, [r6, r3]
     dd2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     dd4:	6873      	ldr	r3, [r6, #4]
     dd6:	4699      	mov	r9, r3
	switch (transfer_mode)
     dd8:	2b00      	cmp	r3, #0
     dda:	d100      	bne.n	dde <usart_init+0xfe>
     ddc:	e0a0      	b.n	f20 <usart_init+0x240>
     dde:	2380      	movs	r3, #128	; 0x80
     de0:	055b      	lsls	r3, r3, #21
     de2:	4599      	cmp	r9, r3
     de4:	d100      	bne.n	de8 <usart_init+0x108>
     de6:	e084      	b.n	ef2 <usart_init+0x212>
	if(config->encoding_format_enable) {
     de8:	7e73      	ldrb	r3, [r6, #25]
     dea:	2b00      	cmp	r3, #0
     dec:	d002      	beq.n	df4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     dee:	7eb3      	ldrb	r3, [r6, #26]
     df0:	4642      	mov	r2, r8
     df2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     df4:	682a      	ldr	r2, [r5, #0]
     df6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     df8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     dfa:	2b00      	cmp	r3, #0
     dfc:	d1fc      	bne.n	df8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     dfe:	330e      	adds	r3, #14
     e00:	aa06      	add	r2, sp, #24
     e02:	4694      	mov	ip, r2
     e04:	4463      	add	r3, ip
     e06:	881b      	ldrh	r3, [r3, #0]
     e08:	4642      	mov	r2, r8
     e0a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     e0c:	9b05      	ldr	r3, [sp, #20]
     e0e:	9a03      	ldr	r2, [sp, #12]
     e10:	4313      	orrs	r3, r2
     e12:	9a04      	ldr	r2, [sp, #16]
     e14:	4313      	orrs	r3, r2
     e16:	464a      	mov	r2, r9
     e18:	4313      	orrs	r3, r2
     e1a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e1c:	465b      	mov	r3, fp
     e1e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     e20:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e22:	4653      	mov	r3, sl
     e24:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     e26:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     e28:	2327      	movs	r3, #39	; 0x27
     e2a:	5cf3      	ldrb	r3, [r6, r3]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d101      	bne.n	e34 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     e30:	3304      	adds	r3, #4
     e32:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e34:	7e73      	ldrb	r3, [r6, #25]
     e36:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e38:	7f32      	ldrb	r2, [r6, #28]
     e3a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e3c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e3e:	7f72      	ldrb	r2, [r6, #29]
     e40:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e42:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e44:	2224      	movs	r2, #36	; 0x24
     e46:	5cb2      	ldrb	r2, [r6, r2]
     e48:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e4a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     e4c:	2225      	movs	r2, #37	; 0x25
     e4e:	5cb2      	ldrb	r2, [r6, r2]
     e50:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e52:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     e54:	7ab1      	ldrb	r1, [r6, #10]
     e56:	7af2      	ldrb	r2, [r6, #11]
     e58:	4311      	orrs	r1, r2
     e5a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     e5c:	8933      	ldrh	r3, [r6, #8]
     e5e:	2bff      	cmp	r3, #255	; 0xff
     e60:	d100      	bne.n	e64 <usart_init+0x184>
     e62:	e081      	b.n	f68 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     e64:	2280      	movs	r2, #128	; 0x80
     e66:	0452      	lsls	r2, r2, #17
     e68:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     e6a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     e6c:	232c      	movs	r3, #44	; 0x2c
     e6e:	5cf3      	ldrb	r3, [r6, r3]
     e70:	2b00      	cmp	r3, #0
     e72:	d103      	bne.n	e7c <usart_init+0x19c>
     e74:	4b62      	ldr	r3, [pc, #392]	; (1000 <usart_init+0x320>)
     e76:	789b      	ldrb	r3, [r3, #2]
     e78:	079b      	lsls	r3, r3, #30
     e7a:	d501      	bpl.n	e80 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     e7c:	2380      	movs	r3, #128	; 0x80
     e7e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     e80:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e82:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     e84:	2b00      	cmp	r3, #0
     e86:	d1fc      	bne.n	e82 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     e88:	4643      	mov	r3, r8
     e8a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e8c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e8e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     e90:	2b00      	cmp	r3, #0
     e92:	d1fc      	bne.n	e8e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     e94:	4643      	mov	r3, r8
     e96:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e98:	ab0e      	add	r3, sp, #56	; 0x38
     e9a:	2280      	movs	r2, #128	; 0x80
     e9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e9e:	2200      	movs	r2, #0
     ea0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     ea2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ea4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     ea6:	6b33      	ldr	r3, [r6, #48]	; 0x30
     ea8:	930a      	str	r3, [sp, #40]	; 0x28
     eaa:	6b73      	ldr	r3, [r6, #52]	; 0x34
     eac:	930b      	str	r3, [sp, #44]	; 0x2c
     eae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     eb0:	930c      	str	r3, [sp, #48]	; 0x30
     eb2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     eb4:	9302      	str	r3, [sp, #8]
     eb6:	930d      	str	r3, [sp, #52]	; 0x34
     eb8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eba:	ae0a      	add	r6, sp, #40	; 0x28
     ebc:	e063      	b.n	f86 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ebe:	2308      	movs	r3, #8
     ec0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ec2:	3b07      	subs	r3, #7
     ec4:	9307      	str	r3, [sp, #28]
     ec6:	e77a      	b.n	dbe <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     ec8:	6833      	ldr	r3, [r6, #0]
     eca:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ecc:	68f3      	ldr	r3, [r6, #12]
     ece:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     ed0:	6973      	ldr	r3, [r6, #20]
     ed2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ed4:	7e33      	ldrb	r3, [r6, #24]
     ed6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ed8:	2326      	movs	r3, #38	; 0x26
     eda:	5cf3      	ldrb	r3, [r6, r3]
     edc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     ede:	6873      	ldr	r3, [r6, #4]
     ee0:	4699      	mov	r9, r3
	switch (transfer_mode)
     ee2:	2b00      	cmp	r3, #0
     ee4:	d018      	beq.n	f18 <usart_init+0x238>
     ee6:	2380      	movs	r3, #128	; 0x80
     ee8:	055b      	lsls	r3, r3, #21
     eea:	4599      	cmp	r9, r3
     eec:	d001      	beq.n	ef2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     eee:	2000      	movs	r0, #0
     ef0:	e025      	b.n	f3e <usart_init+0x25e>
			if (!config->use_external_clock) {
     ef2:	2327      	movs	r3, #39	; 0x27
     ef4:	5cf3      	ldrb	r3, [r6, r3]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d000      	beq.n	efc <usart_init+0x21c>
     efa:	e775      	b.n	de8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     efc:	6a33      	ldr	r3, [r6, #32]
     efe:	001f      	movs	r7, r3
     f00:	b2c0      	uxtb	r0, r0
     f02:	4b40      	ldr	r3, [pc, #256]	; (1004 <usart_init+0x324>)
     f04:	4798      	blx	r3
     f06:	0001      	movs	r1, r0
     f08:	220e      	movs	r2, #14
     f0a:	ab06      	add	r3, sp, #24
     f0c:	469c      	mov	ip, r3
     f0e:	4462      	add	r2, ip
     f10:	0038      	movs	r0, r7
     f12:	4b3d      	ldr	r3, [pc, #244]	; (1008 <usart_init+0x328>)
     f14:	4798      	blx	r3
     f16:	e012      	b.n	f3e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f18:	2308      	movs	r3, #8
     f1a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f1c:	2300      	movs	r3, #0
     f1e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     f20:	2327      	movs	r3, #39	; 0x27
     f22:	5cf3      	ldrb	r3, [r6, r3]
     f24:	2b00      	cmp	r3, #0
     f26:	d00e      	beq.n	f46 <usart_init+0x266>
				status_code =
     f28:	9b06      	ldr	r3, [sp, #24]
     f2a:	9300      	str	r3, [sp, #0]
     f2c:	9b07      	ldr	r3, [sp, #28]
     f2e:	220e      	movs	r2, #14
     f30:	a906      	add	r1, sp, #24
     f32:	468c      	mov	ip, r1
     f34:	4462      	add	r2, ip
     f36:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     f38:	6a30      	ldr	r0, [r6, #32]
     f3a:	4f34      	ldr	r7, [pc, #208]	; (100c <usart_init+0x32c>)
     f3c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     f3e:	2800      	cmp	r0, #0
     f40:	d000      	beq.n	f44 <usart_init+0x264>
     f42:	e6e0      	b.n	d06 <usart_init+0x26>
     f44:	e750      	b.n	de8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     f46:	6a33      	ldr	r3, [r6, #32]
     f48:	001f      	movs	r7, r3
     f4a:	b2c0      	uxtb	r0, r0
     f4c:	4b2d      	ldr	r3, [pc, #180]	; (1004 <usart_init+0x324>)
     f4e:	4798      	blx	r3
     f50:	0001      	movs	r1, r0
				status_code =
     f52:	9b06      	ldr	r3, [sp, #24]
     f54:	9300      	str	r3, [sp, #0]
     f56:	9b07      	ldr	r3, [sp, #28]
     f58:	220e      	movs	r2, #14
     f5a:	a806      	add	r0, sp, #24
     f5c:	4684      	mov	ip, r0
     f5e:	4462      	add	r2, ip
     f60:	0038      	movs	r0, r7
     f62:	4f2a      	ldr	r7, [pc, #168]	; (100c <usart_init+0x32c>)
     f64:	47b8      	blx	r7
     f66:	e7ea      	b.n	f3e <usart_init+0x25e>
		if(config->lin_slave_enable) {
     f68:	7ef3      	ldrb	r3, [r6, #27]
     f6a:	2b00      	cmp	r3, #0
     f6c:	d100      	bne.n	f70 <usart_init+0x290>
     f6e:	e77d      	b.n	e6c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f70:	2380      	movs	r3, #128	; 0x80
     f72:	04db      	lsls	r3, r3, #19
     f74:	431f      	orrs	r7, r3
     f76:	e779      	b.n	e6c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f78:	0020      	movs	r0, r4
     f7a:	4b25      	ldr	r3, [pc, #148]	; (1010 <usart_init+0x330>)
     f7c:	4798      	blx	r3
     f7e:	e007      	b.n	f90 <usart_init+0x2b0>
     f80:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     f82:	2f04      	cmp	r7, #4
     f84:	d00d      	beq.n	fa2 <usart_init+0x2c2>
     f86:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f88:	00bb      	lsls	r3, r7, #2
     f8a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     f8c:	2800      	cmp	r0, #0
     f8e:	d0f3      	beq.n	f78 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     f90:	1c43      	adds	r3, r0, #1
     f92:	d0f5      	beq.n	f80 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f94:	a90e      	add	r1, sp, #56	; 0x38
     f96:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f98:	0c00      	lsrs	r0, r0, #16
     f9a:	b2c0      	uxtb	r0, r0
     f9c:	4b1d      	ldr	r3, [pc, #116]	; (1014 <usart_init+0x334>)
     f9e:	4798      	blx	r3
     fa0:	e7ee      	b.n	f80 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     fa2:	2300      	movs	r3, #0
     fa4:	60eb      	str	r3, [r5, #12]
     fa6:	612b      	str	r3, [r5, #16]
     fa8:	616b      	str	r3, [r5, #20]
     faa:	61ab      	str	r3, [r5, #24]
     fac:	61eb      	str	r3, [r5, #28]
     fae:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     fb0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fb2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fb4:	2200      	movs	r2, #0
     fb6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fb8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fba:	3330      	adds	r3, #48	; 0x30
     fbc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     fbe:	3301      	adds	r3, #1
     fc0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     fc2:	3301      	adds	r3, #1
     fc4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     fc6:	3301      	adds	r3, #1
     fc8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fca:	6828      	ldr	r0, [r5, #0]
     fcc:	4b07      	ldr	r3, [pc, #28]	; (fec <usart_init+0x30c>)
     fce:	4798      	blx	r3
     fd0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     fd2:	4911      	ldr	r1, [pc, #68]	; (1018 <usart_init+0x338>)
     fd4:	4b11      	ldr	r3, [pc, #68]	; (101c <usart_init+0x33c>)
     fd6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     fd8:	00a4      	lsls	r4, r4, #2
     fda:	4b11      	ldr	r3, [pc, #68]	; (1020 <usart_init+0x340>)
     fdc:	50e5      	str	r5, [r4, r3]
	return status_code;
     fde:	2000      	movs	r0, #0
     fe0:	e691      	b.n	d06 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fe2:	2310      	movs	r3, #16
     fe4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fe6:	2300      	movs	r3, #0
     fe8:	9307      	str	r3, [sp, #28]
     fea:	e6e8      	b.n	dbe <usart_init+0xde>
     fec:	00000821 	.word	0x00000821
     ff0:	40000400 	.word	0x40000400
     ff4:	00001af9 	.word	0x00001af9
     ff8:	00001a6d 	.word	0x00001a6d
     ffc:	0000065d 	.word	0x0000065d
    1000:	41002000 	.word	0x41002000
    1004:	00001b15 	.word	0x00001b15
    1008:	0000059f 	.word	0x0000059f
    100c:	000005c9 	.word	0x000005c9
    1010:	000006a9 	.word	0x000006a9
    1014:	00001bf1 	.word	0x00001bf1
    1018:	00001219 	.word	0x00001219
    101c:	0000085d 	.word	0x0000085d
    1020:	2000042c 	.word	0x2000042c

00001024 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1024:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1026:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1028:	2a00      	cmp	r2, #0
    102a:	d101      	bne.n	1030 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    102c:	0018      	movs	r0, r3
    102e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1030:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1032:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1034:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1036:	2a00      	cmp	r2, #0
    1038:	d1f8      	bne.n	102c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    103a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    103c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    103e:	2a00      	cmp	r2, #0
    1040:	d1fc      	bne.n	103c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1042:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1044:	2102      	movs	r1, #2
    1046:	7e1a      	ldrb	r2, [r3, #24]
    1048:	420a      	tst	r2, r1
    104a:	d0fc      	beq.n	1046 <usart_write_wait+0x22>
	return STATUS_OK;
    104c:	2300      	movs	r3, #0
    104e:	e7ed      	b.n	102c <usart_write_wait+0x8>

00001050 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1050:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1052:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1054:	2a00      	cmp	r2, #0
    1056:	d101      	bne.n	105c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1058:	0018      	movs	r0, r3
    105a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    105c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    105e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1060:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1062:	2a00      	cmp	r2, #0
    1064:	d1f8      	bne.n	1058 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1066:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1068:	7e10      	ldrb	r0, [r2, #24]
    106a:	0740      	lsls	r0, r0, #29
    106c:	d5f4      	bpl.n	1058 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    106e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1070:	2b00      	cmp	r3, #0
    1072:	d1fc      	bne.n	106e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1074:	8b53      	ldrh	r3, [r2, #26]
    1076:	b2db      	uxtb	r3, r3
	if (error_code) {
    1078:	0698      	lsls	r0, r3, #26
    107a:	d01d      	beq.n	10b8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    107c:	0798      	lsls	r0, r3, #30
    107e:	d503      	bpl.n	1088 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1080:	2302      	movs	r3, #2
    1082:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1084:	3318      	adds	r3, #24
    1086:	e7e7      	b.n	1058 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1088:	0758      	lsls	r0, r3, #29
    108a:	d503      	bpl.n	1094 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    108c:	2304      	movs	r3, #4
    108e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1090:	331a      	adds	r3, #26
    1092:	e7e1      	b.n	1058 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1094:	07d8      	lsls	r0, r3, #31
    1096:	d503      	bpl.n	10a0 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1098:	2301      	movs	r3, #1
    109a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    109c:	3312      	adds	r3, #18
    109e:	e7db      	b.n	1058 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    10a0:	06d8      	lsls	r0, r3, #27
    10a2:	d503      	bpl.n	10ac <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    10a4:	2310      	movs	r3, #16
    10a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    10a8:	3332      	adds	r3, #50	; 0x32
    10aa:	e7d5      	b.n	1058 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10ac:	069b      	lsls	r3, r3, #26
    10ae:	d503      	bpl.n	10b8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    10b0:	2320      	movs	r3, #32
    10b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    10b4:	3321      	adds	r3, #33	; 0x21
    10b6:	e7cf      	b.n	1058 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    10b8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    10ba:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    10bc:	2300      	movs	r3, #0
    10be:	e7cb      	b.n	1058 <usart_read_wait+0x8>

000010c0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	46ce      	mov	lr, r9
    10c4:	4647      	mov	r7, r8
    10c6:	b580      	push	{r7, lr}
    10c8:	b083      	sub	sp, #12
    10ca:	0005      	movs	r5, r0
    10cc:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    10ce:	2017      	movs	r0, #23
	if (length == 0) {
    10d0:	2a00      	cmp	r2, #0
    10d2:	d104      	bne.n	10de <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    10d4:	b003      	add	sp, #12
    10d6:	bc0c      	pop	{r2, r3}
    10d8:	4690      	mov	r8, r2
    10da:	4699      	mov	r9, r3
    10dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    10de:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    10e0:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    10e2:	2b00      	cmp	r3, #0
    10e4:	d0f6      	beq.n	10d4 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    10e6:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    10e8:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    10ea:	2b00      	cmp	r3, #0
    10ec:	d1fc      	bne.n	10e8 <usart_write_buffer_wait+0x28>
	while (length--) {
    10ee:	3a01      	subs	r2, #1
    10f0:	b293      	uxth	r3, r2
    10f2:	4699      	mov	r9, r3
    10f4:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    10f6:	2701      	movs	r7, #1
	while (length--) {
    10f8:	4b1f      	ldr	r3, [pc, #124]	; (1178 <usart_write_buffer_wait+0xb8>)
    10fa:	4698      	mov	r8, r3
    10fc:	e011      	b.n	1122 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    10fe:	1c73      	adds	r3, r6, #1
    1100:	b29b      	uxth	r3, r3
    1102:	9a01      	ldr	r2, [sp, #4]
    1104:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1106:	796a      	ldrb	r2, [r5, #5]
    1108:	2a01      	cmp	r2, #1
    110a:	d017      	beq.n	113c <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    110c:	b289      	uxth	r1, r1
    110e:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    1110:	0028      	movs	r0, r5
    1112:	4b1a      	ldr	r3, [pc, #104]	; (117c <usart_write_buffer_wait+0xbc>)
    1114:	4798      	blx	r3
	while (length--) {
    1116:	464b      	mov	r3, r9
    1118:	3b01      	subs	r3, #1
    111a:	b29b      	uxth	r3, r3
    111c:	4699      	mov	r9, r3
    111e:	4543      	cmp	r3, r8
    1120:	d013      	beq.n	114a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1122:	7e23      	ldrb	r3, [r4, #24]
    1124:	423b      	tst	r3, r7
    1126:	d1ea      	bne.n	10fe <usart_write_buffer_wait+0x3e>
    1128:	4b13      	ldr	r3, [pc, #76]	; (1178 <usart_write_buffer_wait+0xb8>)
    112a:	7e22      	ldrb	r2, [r4, #24]
    112c:	423a      	tst	r2, r7
    112e:	d1e6      	bne.n	10fe <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    1130:	2b01      	cmp	r3, #1
    1132:	d019      	beq.n	1168 <usart_write_buffer_wait+0xa8>
    1134:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1136:	2b00      	cmp	r3, #0
    1138:	d1f7      	bne.n	112a <usart_write_buffer_wait+0x6a>
    113a:	e7e0      	b.n	10fe <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    113c:	3602      	adds	r6, #2
    113e:	b2b6      	uxth	r6, r6
    1140:	9a01      	ldr	r2, [sp, #4]
    1142:	5cd3      	ldrb	r3, [r2, r3]
    1144:	021b      	lsls	r3, r3, #8
    1146:	4319      	orrs	r1, r3
    1148:	e7e2      	b.n	1110 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    114a:	7e23      	ldrb	r3, [r4, #24]
    114c:	079b      	lsls	r3, r3, #30
    114e:	d40d      	bmi.n	116c <usart_write_buffer_wait+0xac>
    1150:	4b09      	ldr	r3, [pc, #36]	; (1178 <usart_write_buffer_wait+0xb8>)
    1152:	2102      	movs	r1, #2
    1154:	7e22      	ldrb	r2, [r4, #24]
    1156:	420a      	tst	r2, r1
    1158:	d10a      	bne.n	1170 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    115a:	2b01      	cmp	r3, #1
    115c:	d00a      	beq.n	1174 <usart_write_buffer_wait+0xb4>
    115e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1160:	2b00      	cmp	r3, #0
    1162:	d1f7      	bne.n	1154 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    1164:	2000      	movs	r0, #0
    1166:	e7b5      	b.n	10d4 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    1168:	2012      	movs	r0, #18
    116a:	e7b3      	b.n	10d4 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    116c:	2000      	movs	r0, #0
    116e:	e7b1      	b.n	10d4 <usart_write_buffer_wait+0x14>
    1170:	2000      	movs	r0, #0
    1172:	e7af      	b.n	10d4 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    1174:	2012      	movs	r0, #18
    1176:	e7ad      	b.n	10d4 <usart_write_buffer_wait+0x14>
    1178:	0000ffff 	.word	0x0000ffff
    117c:	00001025 	.word	0x00001025

00001180 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1180:	b5f0      	push	{r4, r5, r6, r7, lr}
    1182:	46d6      	mov	lr, sl
    1184:	b500      	push	{lr}
    1186:	b084      	sub	sp, #16
    1188:	0004      	movs	r4, r0
    118a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    118c:	2017      	movs	r0, #23
	if (length == 0) {
    118e:	2a00      	cmp	r2, #0
    1190:	d103      	bne.n	119a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1192:	b004      	add	sp, #16
    1194:	bc04      	pop	{r2}
    1196:	4692      	mov	sl, r2
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    119a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    119c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    119e:	2b00      	cmp	r3, #0
    11a0:	d0f7      	beq.n	1192 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11a2:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    11a4:	3a01      	subs	r2, #1
    11a6:	b293      	uxth	r3, r2
    11a8:	469a      	mov	sl, r3
    11aa:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    11ac:	2704      	movs	r7, #4
    11ae:	e019      	b.n	11e4 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    11b0:	2300      	movs	r3, #0
    11b2:	aa02      	add	r2, sp, #8
    11b4:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    11b6:	1d91      	adds	r1, r2, #6
    11b8:	0020      	movs	r0, r4
    11ba:	4b15      	ldr	r3, [pc, #84]	; (1210 <usart_read_buffer_wait+0x90>)
    11bc:	4798      	blx	r3
		if (retval != STATUS_OK) {
    11be:	2800      	cmp	r0, #0
    11c0:	d1e7      	bne.n	1192 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    11c2:	1c69      	adds	r1, r5, #1
    11c4:	b289      	uxth	r1, r1
    11c6:	ab02      	add	r3, sp, #8
    11c8:	88db      	ldrh	r3, [r3, #6]
    11ca:	9a01      	ldr	r2, [sp, #4]
    11cc:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11ce:	7962      	ldrb	r2, [r4, #5]
    11d0:	2a01      	cmp	r2, #1
    11d2:	d014      	beq.n	11fe <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    11d4:	000d      	movs	r5, r1
	while (length--) {
    11d6:	4653      	mov	r3, sl
    11d8:	3b01      	subs	r3, #1
    11da:	b29b      	uxth	r3, r3
    11dc:	469a      	mov	sl, r3
    11de:	4b0d      	ldr	r3, [pc, #52]	; (1214 <usart_read_buffer_wait+0x94>)
    11e0:	459a      	cmp	sl, r3
    11e2:	d0d6      	beq.n	1192 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    11e4:	7e33      	ldrb	r3, [r6, #24]
    11e6:	423b      	tst	r3, r7
    11e8:	d1e2      	bne.n	11b0 <usart_read_buffer_wait+0x30>
    11ea:	4b0a      	ldr	r3, [pc, #40]	; (1214 <usart_read_buffer_wait+0x94>)
    11ec:	7e32      	ldrb	r2, [r6, #24]
    11ee:	423a      	tst	r2, r7
    11f0:	d1de      	bne.n	11b0 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    11f2:	2b01      	cmp	r3, #1
    11f4:	d009      	beq.n	120a <usart_read_buffer_wait+0x8a>
    11f6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    11f8:	2b00      	cmp	r3, #0
    11fa:	d1f7      	bne.n	11ec <usart_read_buffer_wait+0x6c>
    11fc:	e7d8      	b.n	11b0 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    11fe:	3502      	adds	r5, #2
    1200:	b2ad      	uxth	r5, r5
    1202:	0a1b      	lsrs	r3, r3, #8
    1204:	9a01      	ldr	r2, [sp, #4]
    1206:	5453      	strb	r3, [r2, r1]
    1208:	e7e5      	b.n	11d6 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    120a:	2012      	movs	r0, #18
    120c:	e7c1      	b.n	1192 <usart_read_buffer_wait+0x12>
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	00001051 	.word	0x00001051
    1214:	0000ffff 	.word	0x0000ffff

00001218 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    121a:	0080      	lsls	r0, r0, #2
    121c:	4b62      	ldr	r3, [pc, #392]	; (13a8 <_usart_interrupt_handler+0x190>)
    121e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1220:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1222:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1224:	2b00      	cmp	r3, #0
    1226:	d1fc      	bne.n	1222 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1228:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    122a:	7da6      	ldrb	r6, [r4, #22]
    122c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    122e:	2330      	movs	r3, #48	; 0x30
    1230:	5ceb      	ldrb	r3, [r5, r3]
    1232:	2231      	movs	r2, #49	; 0x31
    1234:	5caf      	ldrb	r7, [r5, r2]
    1236:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1238:	07f3      	lsls	r3, r6, #31
    123a:	d522      	bpl.n	1282 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    123c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    123e:	b29b      	uxth	r3, r3
    1240:	2b00      	cmp	r3, #0
    1242:	d01c      	beq.n	127e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1244:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1246:	7813      	ldrb	r3, [r2, #0]
    1248:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    124a:	1c51      	adds	r1, r2, #1
    124c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    124e:	7969      	ldrb	r1, [r5, #5]
    1250:	2901      	cmp	r1, #1
    1252:	d00e      	beq.n	1272 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1254:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1256:	05db      	lsls	r3, r3, #23
    1258:	0ddb      	lsrs	r3, r3, #23
    125a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    125c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    125e:	3b01      	subs	r3, #1
    1260:	b29b      	uxth	r3, r3
    1262:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1264:	2b00      	cmp	r3, #0
    1266:	d10c      	bne.n	1282 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1268:	3301      	adds	r3, #1
    126a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    126c:	3301      	adds	r3, #1
    126e:	75a3      	strb	r3, [r4, #22]
    1270:	e007      	b.n	1282 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1272:	7851      	ldrb	r1, [r2, #1]
    1274:	0209      	lsls	r1, r1, #8
    1276:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1278:	3202      	adds	r2, #2
    127a:	62aa      	str	r2, [r5, #40]	; 0x28
    127c:	e7eb      	b.n	1256 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    127e:	2301      	movs	r3, #1
    1280:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1282:	07b3      	lsls	r3, r6, #30
    1284:	d506      	bpl.n	1294 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1286:	2302      	movs	r3, #2
    1288:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    128a:	2200      	movs	r2, #0
    128c:	3331      	adds	r3, #49	; 0x31
    128e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1290:	07fb      	lsls	r3, r7, #31
    1292:	d41a      	bmi.n	12ca <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1294:	0773      	lsls	r3, r6, #29
    1296:	d565      	bpl.n	1364 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1298:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    129a:	b29b      	uxth	r3, r3
    129c:	2b00      	cmp	r3, #0
    129e:	d05f      	beq.n	1360 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12a0:	8b63      	ldrh	r3, [r4, #26]
    12a2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    12a4:	071a      	lsls	r2, r3, #28
    12a6:	d414      	bmi.n	12d2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12a8:	223f      	movs	r2, #63	; 0x3f
    12aa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    12ac:	2b00      	cmp	r3, #0
    12ae:	d034      	beq.n	131a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    12b0:	079a      	lsls	r2, r3, #30
    12b2:	d511      	bpl.n	12d8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    12b4:	221a      	movs	r2, #26
    12b6:	2332      	movs	r3, #50	; 0x32
    12b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    12ba:	3b30      	subs	r3, #48	; 0x30
    12bc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    12be:	077b      	lsls	r3, r7, #29
    12c0:	d550      	bpl.n	1364 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    12c2:	0028      	movs	r0, r5
    12c4:	696b      	ldr	r3, [r5, #20]
    12c6:	4798      	blx	r3
    12c8:	e04c      	b.n	1364 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12ca:	0028      	movs	r0, r5
    12cc:	68eb      	ldr	r3, [r5, #12]
    12ce:	4798      	blx	r3
    12d0:	e7e0      	b.n	1294 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12d2:	2237      	movs	r2, #55	; 0x37
    12d4:	4013      	ands	r3, r2
    12d6:	e7e9      	b.n	12ac <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    12d8:	075a      	lsls	r2, r3, #29
    12da:	d505      	bpl.n	12e8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    12dc:	221e      	movs	r2, #30
    12de:	2332      	movs	r3, #50	; 0x32
    12e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    12e2:	3b2e      	subs	r3, #46	; 0x2e
    12e4:	8363      	strh	r3, [r4, #26]
    12e6:	e7ea      	b.n	12be <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    12e8:	07da      	lsls	r2, r3, #31
    12ea:	d505      	bpl.n	12f8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    12ec:	2213      	movs	r2, #19
    12ee:	2332      	movs	r3, #50	; 0x32
    12f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    12f2:	3b31      	subs	r3, #49	; 0x31
    12f4:	8363      	strh	r3, [r4, #26]
    12f6:	e7e2      	b.n	12be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    12f8:	06da      	lsls	r2, r3, #27
    12fa:	d505      	bpl.n	1308 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    12fc:	2242      	movs	r2, #66	; 0x42
    12fe:	2332      	movs	r3, #50	; 0x32
    1300:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1302:	3b22      	subs	r3, #34	; 0x22
    1304:	8363      	strh	r3, [r4, #26]
    1306:	e7da      	b.n	12be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1308:	2220      	movs	r2, #32
    130a:	421a      	tst	r2, r3
    130c:	d0d7      	beq.n	12be <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    130e:	3221      	adds	r2, #33	; 0x21
    1310:	2332      	movs	r3, #50	; 0x32
    1312:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1314:	3b12      	subs	r3, #18
    1316:	8363      	strh	r3, [r4, #26]
    1318:	e7d1      	b.n	12be <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    131a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    131c:	05db      	lsls	r3, r3, #23
    131e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1320:	b2da      	uxtb	r2, r3
    1322:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1324:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1326:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1328:	1c51      	adds	r1, r2, #1
    132a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    132c:	7969      	ldrb	r1, [r5, #5]
    132e:	2901      	cmp	r1, #1
    1330:	d010      	beq.n	1354 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1332:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1334:	3b01      	subs	r3, #1
    1336:	b29b      	uxth	r3, r3
    1338:	85ab      	strh	r3, [r5, #44]	; 0x2c
    133a:	2b00      	cmp	r3, #0
    133c:	d112      	bne.n	1364 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    133e:	3304      	adds	r3, #4
    1340:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1342:	2200      	movs	r2, #0
    1344:	332e      	adds	r3, #46	; 0x2e
    1346:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1348:	07bb      	lsls	r3, r7, #30
    134a:	d50b      	bpl.n	1364 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    134c:	0028      	movs	r0, r5
    134e:	692b      	ldr	r3, [r5, #16]
    1350:	4798      	blx	r3
    1352:	e007      	b.n	1364 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1354:	0a1b      	lsrs	r3, r3, #8
    1356:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1358:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    135a:	3301      	adds	r3, #1
    135c:	626b      	str	r3, [r5, #36]	; 0x24
    135e:	e7e8      	b.n	1332 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1360:	2304      	movs	r3, #4
    1362:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1364:	06f3      	lsls	r3, r6, #27
    1366:	d504      	bpl.n	1372 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1368:	2310      	movs	r3, #16
    136a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    136c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    136e:	06fb      	lsls	r3, r7, #27
    1370:	d40e      	bmi.n	1390 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1372:	06b3      	lsls	r3, r6, #26
    1374:	d504      	bpl.n	1380 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1376:	2320      	movs	r3, #32
    1378:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    137a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    137c:	073b      	lsls	r3, r7, #28
    137e:	d40b      	bmi.n	1398 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1380:	0733      	lsls	r3, r6, #28
    1382:	d504      	bpl.n	138e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1384:	2308      	movs	r3, #8
    1386:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1388:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    138a:	06bb      	lsls	r3, r7, #26
    138c:	d408      	bmi.n	13a0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1390:	0028      	movs	r0, r5
    1392:	69eb      	ldr	r3, [r5, #28]
    1394:	4798      	blx	r3
    1396:	e7ec      	b.n	1372 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1398:	0028      	movs	r0, r5
    139a:	69ab      	ldr	r3, [r5, #24]
    139c:	4798      	blx	r3
    139e:	e7ef      	b.n	1380 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    13a0:	6a2b      	ldr	r3, [r5, #32]
    13a2:	0028      	movs	r0, r5
    13a4:	4798      	blx	r3
}
    13a6:	e7f2      	b.n	138e <_usart_interrupt_handler+0x176>
    13a8:	2000042c 	.word	0x2000042c

000013ac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    13ac:	b510      	push	{r4, lr}
	switch (clock_source) {
    13ae:	2808      	cmp	r0, #8
    13b0:	d803      	bhi.n	13ba <system_clock_source_get_hz+0xe>
    13b2:	0080      	lsls	r0, r0, #2
    13b4:	4b1c      	ldr	r3, [pc, #112]	; (1428 <system_clock_source_get_hz+0x7c>)
    13b6:	581b      	ldr	r3, [r3, r0]
    13b8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    13ba:	2000      	movs	r0, #0
    13bc:	e032      	b.n	1424 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    13be:	4b1b      	ldr	r3, [pc, #108]	; (142c <system_clock_source_get_hz+0x80>)
    13c0:	6918      	ldr	r0, [r3, #16]
    13c2:	e02f      	b.n	1424 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    13c4:	4b1a      	ldr	r3, [pc, #104]	; (1430 <system_clock_source_get_hz+0x84>)
    13c6:	6a1b      	ldr	r3, [r3, #32]
    13c8:	059b      	lsls	r3, r3, #22
    13ca:	0f9b      	lsrs	r3, r3, #30
    13cc:	4819      	ldr	r0, [pc, #100]	; (1434 <system_clock_source_get_hz+0x88>)
    13ce:	40d8      	lsrs	r0, r3
    13d0:	e028      	b.n	1424 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    13d2:	4b16      	ldr	r3, [pc, #88]	; (142c <system_clock_source_get_hz+0x80>)
    13d4:	6958      	ldr	r0, [r3, #20]
    13d6:	e025      	b.n	1424 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13d8:	4b14      	ldr	r3, [pc, #80]	; (142c <system_clock_source_get_hz+0x80>)
    13da:	681b      	ldr	r3, [r3, #0]
			return 0;
    13dc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13de:	079b      	lsls	r3, r3, #30
    13e0:	d520      	bpl.n	1424 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13e2:	4913      	ldr	r1, [pc, #76]	; (1430 <system_clock_source_get_hz+0x84>)
    13e4:	2210      	movs	r2, #16
    13e6:	68cb      	ldr	r3, [r1, #12]
    13e8:	421a      	tst	r2, r3
    13ea:	d0fc      	beq.n	13e6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    13ec:	4b0f      	ldr	r3, [pc, #60]	; (142c <system_clock_source_get_hz+0x80>)
    13ee:	681a      	ldr	r2, [r3, #0]
    13f0:	2324      	movs	r3, #36	; 0x24
    13f2:	4013      	ands	r3, r2
    13f4:	2b04      	cmp	r3, #4
    13f6:	d001      	beq.n	13fc <system_clock_source_get_hz+0x50>
			return 48000000UL;
    13f8:	480f      	ldr	r0, [pc, #60]	; (1438 <system_clock_source_get_hz+0x8c>)
    13fa:	e013      	b.n	1424 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    13fc:	2000      	movs	r0, #0
    13fe:	4b0f      	ldr	r3, [pc, #60]	; (143c <system_clock_source_get_hz+0x90>)
    1400:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1402:	4b0a      	ldr	r3, [pc, #40]	; (142c <system_clock_source_get_hz+0x80>)
    1404:	689b      	ldr	r3, [r3, #8]
    1406:	041b      	lsls	r3, r3, #16
    1408:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    140a:	4358      	muls	r0, r3
    140c:	e00a      	b.n	1424 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    140e:	2350      	movs	r3, #80	; 0x50
    1410:	4a07      	ldr	r2, [pc, #28]	; (1430 <system_clock_source_get_hz+0x84>)
    1412:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1414:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1416:	075b      	lsls	r3, r3, #29
    1418:	d504      	bpl.n	1424 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    141a:	4b04      	ldr	r3, [pc, #16]	; (142c <system_clock_source_get_hz+0x80>)
    141c:	68d8      	ldr	r0, [r3, #12]
    141e:	e001      	b.n	1424 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1420:	2080      	movs	r0, #128	; 0x80
    1422:	0200      	lsls	r0, r0, #8
	}
}
    1424:	bd10      	pop	{r4, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	0000a194 	.word	0x0000a194
    142c:	20000130 	.word	0x20000130
    1430:	40000800 	.word	0x40000800
    1434:	007a1200 	.word	0x007a1200
    1438:	02dc6c00 	.word	0x02dc6c00
    143c:	00001b15 	.word	0x00001b15

00001440 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1440:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1442:	490c      	ldr	r1, [pc, #48]	; (1474 <system_clock_source_osc8m_set_config+0x34>)
    1444:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1446:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1448:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    144a:	7840      	ldrb	r0, [r0, #1]
    144c:	2201      	movs	r2, #1
    144e:	4010      	ands	r0, r2
    1450:	0180      	lsls	r0, r0, #6
    1452:	2640      	movs	r6, #64	; 0x40
    1454:	43b3      	bics	r3, r6
    1456:	4303      	orrs	r3, r0
    1458:	402a      	ands	r2, r5
    145a:	01d2      	lsls	r2, r2, #7
    145c:	2080      	movs	r0, #128	; 0x80
    145e:	4383      	bics	r3, r0
    1460:	4313      	orrs	r3, r2
    1462:	2203      	movs	r2, #3
    1464:	4022      	ands	r2, r4
    1466:	0212      	lsls	r2, r2, #8
    1468:	4803      	ldr	r0, [pc, #12]	; (1478 <system_clock_source_osc8m_set_config+0x38>)
    146a:	4003      	ands	r3, r0
    146c:	4313      	orrs	r3, r2
    146e:	620b      	str	r3, [r1, #32]
}
    1470:	bd70      	pop	{r4, r5, r6, pc}
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	40000800 	.word	0x40000800
    1478:	fffffcff 	.word	0xfffffcff

0000147c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    147c:	b5f0      	push	{r4, r5, r6, r7, lr}
    147e:	46ce      	mov	lr, r9
    1480:	4647      	mov	r7, r8
    1482:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1484:	4b19      	ldr	r3, [pc, #100]	; (14ec <system_clock_source_osc32k_set_config+0x70>)
    1486:	4699      	mov	r9, r3
    1488:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    148a:	7841      	ldrb	r1, [r0, #1]
    148c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    148e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1490:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1492:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1494:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1496:	7880      	ldrb	r0, [r0, #2]
    1498:	2101      	movs	r1, #1
    149a:	4008      	ands	r0, r1
    149c:	0080      	lsls	r0, r0, #2
    149e:	2204      	movs	r2, #4
    14a0:	4393      	bics	r3, r2
    14a2:	4303      	orrs	r3, r0
    14a4:	4660      	mov	r0, ip
    14a6:	4008      	ands	r0, r1
    14a8:	00c0      	lsls	r0, r0, #3
    14aa:	3204      	adds	r2, #4
    14ac:	4393      	bics	r3, r2
    14ae:	4303      	orrs	r3, r0
    14b0:	0038      	movs	r0, r7
    14b2:	4008      	ands	r0, r1
    14b4:	0180      	lsls	r0, r0, #6
    14b6:	2740      	movs	r7, #64	; 0x40
    14b8:	43bb      	bics	r3, r7
    14ba:	4303      	orrs	r3, r0
    14bc:	0030      	movs	r0, r6
    14be:	4008      	ands	r0, r1
    14c0:	01c0      	lsls	r0, r0, #7
    14c2:	2680      	movs	r6, #128	; 0x80
    14c4:	43b3      	bics	r3, r6
    14c6:	4303      	orrs	r3, r0
    14c8:	2007      	movs	r0, #7
    14ca:	4005      	ands	r5, r0
    14cc:	022d      	lsls	r5, r5, #8
    14ce:	4808      	ldr	r0, [pc, #32]	; (14f0 <system_clock_source_osc32k_set_config+0x74>)
    14d0:	4003      	ands	r3, r0
    14d2:	432b      	orrs	r3, r5
    14d4:	4021      	ands	r1, r4
    14d6:	0309      	lsls	r1, r1, #12
    14d8:	4806      	ldr	r0, [pc, #24]	; (14f4 <system_clock_source_osc32k_set_config+0x78>)
    14da:	4003      	ands	r3, r0
    14dc:	430b      	orrs	r3, r1
    14de:	464a      	mov	r2, r9
    14e0:	6193      	str	r3, [r2, #24]
}
    14e2:	bc0c      	pop	{r2, r3}
    14e4:	4690      	mov	r8, r2
    14e6:	4699      	mov	r9, r3
    14e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	40000800 	.word	0x40000800
    14f0:	fffff8ff 	.word	0xfffff8ff
    14f4:	ffffefff 	.word	0xffffefff

000014f8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    14f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14fa:	46de      	mov	lr, fp
    14fc:	4657      	mov	r7, sl
    14fe:	464e      	mov	r6, r9
    1500:	4645      	mov	r5, r8
    1502:	b5e0      	push	{r5, r6, r7, lr}
    1504:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1506:	4b26      	ldr	r3, [pc, #152]	; (15a0 <system_clock_source_xosc32k_set_config+0xa8>)
    1508:	469b      	mov	fp, r3
    150a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    150c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    150e:	7800      	ldrb	r0, [r0, #0]
    1510:	4242      	negs	r2, r0
    1512:	4142      	adcs	r2, r0
    1514:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1516:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1518:	78ca      	ldrb	r2, [r1, #3]
    151a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    151c:	790a      	ldrb	r2, [r1, #4]
    151e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1520:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1522:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1524:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1526:	688a      	ldr	r2, [r1, #8]
    1528:	491e      	ldr	r1, [pc, #120]	; (15a4 <system_clock_source_xosc32k_set_config+0xac>)
    152a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    152c:	2101      	movs	r1, #1
    152e:	464a      	mov	r2, r9
    1530:	0092      	lsls	r2, r2, #2
    1532:	4691      	mov	r9, r2
    1534:	2204      	movs	r2, #4
    1536:	4393      	bics	r3, r2
    1538:	464a      	mov	r2, r9
    153a:	4313      	orrs	r3, r2
    153c:	4642      	mov	r2, r8
    153e:	400a      	ands	r2, r1
    1540:	00d2      	lsls	r2, r2, #3
    1542:	4690      	mov	r8, r2
    1544:	2208      	movs	r2, #8
    1546:	4393      	bics	r3, r2
    1548:	4642      	mov	r2, r8
    154a:	4313      	orrs	r3, r2
    154c:	4662      	mov	r2, ip
    154e:	400a      	ands	r2, r1
    1550:	0112      	lsls	r2, r2, #4
    1552:	4694      	mov	ip, r2
    1554:	2210      	movs	r2, #16
    1556:	4393      	bics	r3, r2
    1558:	4662      	mov	r2, ip
    155a:	4313      	orrs	r3, r2
    155c:	4008      	ands	r0, r1
    155e:	0140      	lsls	r0, r0, #5
    1560:	2220      	movs	r2, #32
    1562:	4393      	bics	r3, r2
    1564:	4303      	orrs	r3, r0
    1566:	400f      	ands	r7, r1
    1568:	01bf      	lsls	r7, r7, #6
    156a:	2040      	movs	r0, #64	; 0x40
    156c:	4383      	bics	r3, r0
    156e:	433b      	orrs	r3, r7
    1570:	400e      	ands	r6, r1
    1572:	01f6      	lsls	r6, r6, #7
    1574:	3040      	adds	r0, #64	; 0x40
    1576:	4383      	bics	r3, r0
    1578:	4333      	orrs	r3, r6
    157a:	3879      	subs	r0, #121	; 0x79
    157c:	4005      	ands	r5, r0
    157e:	022d      	lsls	r5, r5, #8
    1580:	4809      	ldr	r0, [pc, #36]	; (15a8 <system_clock_source_xosc32k_set_config+0xb0>)
    1582:	4003      	ands	r3, r0
    1584:	432b      	orrs	r3, r5
    1586:	4021      	ands	r1, r4
    1588:	0309      	lsls	r1, r1, #12
    158a:	4808      	ldr	r0, [pc, #32]	; (15ac <system_clock_source_xosc32k_set_config+0xb4>)
    158c:	4003      	ands	r3, r0
    158e:	430b      	orrs	r3, r1
    1590:	465a      	mov	r2, fp
    1592:	8293      	strh	r3, [r2, #20]
}
    1594:	bc3c      	pop	{r2, r3, r4, r5}
    1596:	4690      	mov	r8, r2
    1598:	4699      	mov	r9, r3
    159a:	46a2      	mov	sl, r4
    159c:	46ab      	mov	fp, r5
    159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15a0:	40000800 	.word	0x40000800
    15a4:	20000130 	.word	0x20000130
    15a8:	fffff8ff 	.word	0xfffff8ff
    15ac:	ffffefff 	.word	0xffffefff

000015b0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    15b0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    15b2:	7a03      	ldrb	r3, [r0, #8]
    15b4:	069b      	lsls	r3, r3, #26
    15b6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    15b8:	8942      	ldrh	r2, [r0, #10]
    15ba:	0592      	lsls	r2, r2, #22
    15bc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    15be:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    15c0:	4918      	ldr	r1, [pc, #96]	; (1624 <system_clock_source_dfll_set_config+0x74>)
    15c2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    15c4:	7983      	ldrb	r3, [r0, #6]
    15c6:	79c2      	ldrb	r2, [r0, #7]
    15c8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    15ca:	8842      	ldrh	r2, [r0, #2]
    15cc:	8884      	ldrh	r4, [r0, #4]
    15ce:	4322      	orrs	r2, r4
    15d0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    15d2:	7842      	ldrb	r2, [r0, #1]
    15d4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    15d6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    15d8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    15da:	7803      	ldrb	r3, [r0, #0]
    15dc:	2b04      	cmp	r3, #4
    15de:	d011      	beq.n	1604 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    15e0:	2b20      	cmp	r3, #32
    15e2:	d10e      	bne.n	1602 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    15e4:	7b03      	ldrb	r3, [r0, #12]
    15e6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    15e8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15ea:	4313      	orrs	r3, r2
    15ec:	89c2      	ldrh	r2, [r0, #14]
    15ee:	0412      	lsls	r2, r2, #16
    15f0:	490d      	ldr	r1, [pc, #52]	; (1628 <system_clock_source_dfll_set_config+0x78>)
    15f2:	400a      	ands	r2, r1
    15f4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15f6:	4a0b      	ldr	r2, [pc, #44]	; (1624 <system_clock_source_dfll_set_config+0x74>)
    15f8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    15fa:	6811      	ldr	r1, [r2, #0]
    15fc:	4b0b      	ldr	r3, [pc, #44]	; (162c <system_clock_source_dfll_set_config+0x7c>)
    15fe:	430b      	orrs	r3, r1
    1600:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1602:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1604:	7b03      	ldrb	r3, [r0, #12]
    1606:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1608:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    160a:	4313      	orrs	r3, r2
    160c:	89c2      	ldrh	r2, [r0, #14]
    160e:	0412      	lsls	r2, r2, #16
    1610:	4905      	ldr	r1, [pc, #20]	; (1628 <system_clock_source_dfll_set_config+0x78>)
    1612:	400a      	ands	r2, r1
    1614:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1616:	4a03      	ldr	r2, [pc, #12]	; (1624 <system_clock_source_dfll_set_config+0x74>)
    1618:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    161a:	6813      	ldr	r3, [r2, #0]
    161c:	2104      	movs	r1, #4
    161e:	430b      	orrs	r3, r1
    1620:	6013      	str	r3, [r2, #0]
    1622:	e7ee      	b.n	1602 <system_clock_source_dfll_set_config+0x52>
    1624:	20000130 	.word	0x20000130
    1628:	03ff0000 	.word	0x03ff0000
    162c:	00000424 	.word	0x00000424

00001630 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1630:	2808      	cmp	r0, #8
    1632:	d803      	bhi.n	163c <system_clock_source_enable+0xc>
    1634:	0080      	lsls	r0, r0, #2
    1636:	4b25      	ldr	r3, [pc, #148]	; (16cc <system_clock_source_enable+0x9c>)
    1638:	581b      	ldr	r3, [r3, r0]
    163a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    163c:	2017      	movs	r0, #23
    163e:	e044      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1640:	4a23      	ldr	r2, [pc, #140]	; (16d0 <system_clock_source_enable+0xa0>)
    1642:	6a13      	ldr	r3, [r2, #32]
    1644:	2102      	movs	r1, #2
    1646:	430b      	orrs	r3, r1
    1648:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    164a:	2000      	movs	r0, #0
    164c:	e03d      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    164e:	4a20      	ldr	r2, [pc, #128]	; (16d0 <system_clock_source_enable+0xa0>)
    1650:	6993      	ldr	r3, [r2, #24]
    1652:	2102      	movs	r1, #2
    1654:	430b      	orrs	r3, r1
    1656:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1658:	2000      	movs	r0, #0
		break;
    165a:	e036      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    165c:	4a1c      	ldr	r2, [pc, #112]	; (16d0 <system_clock_source_enable+0xa0>)
    165e:	8a13      	ldrh	r3, [r2, #16]
    1660:	2102      	movs	r1, #2
    1662:	430b      	orrs	r3, r1
    1664:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1666:	2000      	movs	r0, #0
		break;
    1668:	e02f      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    166a:	4a19      	ldr	r2, [pc, #100]	; (16d0 <system_clock_source_enable+0xa0>)
    166c:	8a93      	ldrh	r3, [r2, #20]
    166e:	2102      	movs	r1, #2
    1670:	430b      	orrs	r3, r1
    1672:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1674:	2000      	movs	r0, #0
		break;
    1676:	e028      	b.n	16ca <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1678:	4916      	ldr	r1, [pc, #88]	; (16d4 <system_clock_source_enable+0xa4>)
    167a:	680b      	ldr	r3, [r1, #0]
    167c:	2202      	movs	r2, #2
    167e:	4313      	orrs	r3, r2
    1680:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1682:	4b13      	ldr	r3, [pc, #76]	; (16d0 <system_clock_source_enable+0xa0>)
    1684:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1686:	0019      	movs	r1, r3
    1688:	320e      	adds	r2, #14
    168a:	68cb      	ldr	r3, [r1, #12]
    168c:	421a      	tst	r2, r3
    168e:	d0fc      	beq.n	168a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1690:	4a10      	ldr	r2, [pc, #64]	; (16d4 <system_clock_source_enable+0xa4>)
    1692:	6891      	ldr	r1, [r2, #8]
    1694:	4b0e      	ldr	r3, [pc, #56]	; (16d0 <system_clock_source_enable+0xa0>)
    1696:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1698:	6852      	ldr	r2, [r2, #4]
    169a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    169c:	2200      	movs	r2, #0
    169e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16a0:	0019      	movs	r1, r3
    16a2:	3210      	adds	r2, #16
    16a4:	68cb      	ldr	r3, [r1, #12]
    16a6:	421a      	tst	r2, r3
    16a8:	d0fc      	beq.n	16a4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    16aa:	4b0a      	ldr	r3, [pc, #40]	; (16d4 <system_clock_source_enable+0xa4>)
    16ac:	681b      	ldr	r3, [r3, #0]
    16ae:	b29b      	uxth	r3, r3
    16b0:	4a07      	ldr	r2, [pc, #28]	; (16d0 <system_clock_source_enable+0xa0>)
    16b2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    16b4:	2000      	movs	r0, #0
    16b6:	e008      	b.n	16ca <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    16b8:	4905      	ldr	r1, [pc, #20]	; (16d0 <system_clock_source_enable+0xa0>)
    16ba:	2244      	movs	r2, #68	; 0x44
    16bc:	5c8b      	ldrb	r3, [r1, r2]
    16be:	2002      	movs	r0, #2
    16c0:	4303      	orrs	r3, r0
    16c2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    16c4:	2000      	movs	r0, #0
		break;
    16c6:	e000      	b.n	16ca <system_clock_source_enable+0x9a>
		return STATUS_OK;
    16c8:	2000      	movs	r0, #0
}
    16ca:	4770      	bx	lr
    16cc:	0000a1b8 	.word	0x0000a1b8
    16d0:	40000800 	.word	0x40000800
    16d4:	20000130 	.word	0x20000130

000016d8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    16d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16da:	46de      	mov	lr, fp
    16dc:	4657      	mov	r7, sl
    16de:	464e      	mov	r6, r9
    16e0:	4645      	mov	r5, r8
    16e2:	b5e0      	push	{r5, r6, r7, lr}
    16e4:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16e6:	22c2      	movs	r2, #194	; 0xc2
    16e8:	00d2      	lsls	r2, r2, #3
    16ea:	4b65      	ldr	r3, [pc, #404]	; (1880 <system_clock_init+0x1a8>)
    16ec:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    16ee:	4a65      	ldr	r2, [pc, #404]	; (1884 <system_clock_init+0x1ac>)
    16f0:	6853      	ldr	r3, [r2, #4]
    16f2:	211e      	movs	r1, #30
    16f4:	438b      	bics	r3, r1
    16f6:	391a      	subs	r1, #26
    16f8:	430b      	orrs	r3, r1
    16fa:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    16fc:	2203      	movs	r2, #3
    16fe:	ab01      	add	r3, sp, #4
    1700:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1702:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1704:	4d60      	ldr	r5, [pc, #384]	; (1888 <system_clock_init+0x1b0>)
    1706:	b2e0      	uxtb	r0, r4
    1708:	a901      	add	r1, sp, #4
    170a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    170c:	3401      	adds	r4, #1
    170e:	2c25      	cmp	r4, #37	; 0x25
    1710:	d1f9      	bne.n	1706 <system_clock_init+0x2e>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1712:	a80c      	add	r0, sp, #48	; 0x30
    1714:	2300      	movs	r3, #0
    1716:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1718:	2280      	movs	r2, #128	; 0x80
    171a:	0212      	lsls	r2, r2, #8
    171c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    171e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1720:	2201      	movs	r2, #1
    1722:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1724:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1726:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1728:	2106      	movs	r1, #6
    172a:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    172c:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    172e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1730:	4b56      	ldr	r3, [pc, #344]	; (188c <system_clock_init+0x1b4>)
    1732:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1734:	2005      	movs	r0, #5
    1736:	4b56      	ldr	r3, [pc, #344]	; (1890 <system_clock_init+0x1b8>)
    1738:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    173a:	4951      	ldr	r1, [pc, #324]	; (1880 <system_clock_init+0x1a8>)
    173c:	2202      	movs	r2, #2
    173e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1740:	421a      	tst	r2, r3
    1742:	d0fc      	beq.n	173e <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1744:	494e      	ldr	r1, [pc, #312]	; (1880 <system_clock_init+0x1a8>)
    1746:	8a8b      	ldrh	r3, [r1, #20]
    1748:	2280      	movs	r2, #128	; 0x80
    174a:	4313      	orrs	r3, r2
    174c:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    174e:	4c51      	ldr	r4, [pc, #324]	; (1894 <system_clock_init+0x1bc>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    1750:	6823      	ldr	r3, [r4, #0]
    1752:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1754:	698a      	ldr	r2, [r1, #24]
    1756:	0e5b      	lsrs	r3, r3, #25
    1758:	041b      	lsls	r3, r3, #16
    175a:	484f      	ldr	r0, [pc, #316]	; (1898 <system_clock_init+0x1c0>)
    175c:	4002      	ands	r2, r0
    175e:	4313      	orrs	r3, r2
    1760:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1762:	a80a      	add	r0, sp, #40	; 0x28
    1764:	2301      	movs	r3, #1
    1766:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1768:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    176a:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    176c:	2207      	movs	r2, #7
    176e:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1770:	2500      	movs	r5, #0
    1772:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1774:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1776:	4b49      	ldr	r3, [pc, #292]	; (189c <system_clock_init+0x1c4>)
    1778:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    177a:	2004      	movs	r0, #4
    177c:	4b44      	ldr	r3, [pc, #272]	; (1890 <system_clock_init+0x1b8>)
    177e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1780:	ab05      	add	r3, sp, #20
    1782:	2200      	movs	r2, #0
    1784:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1786:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1788:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    178a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    178c:	213f      	movs	r1, #63	; 0x3f
    178e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1790:	393b      	subs	r1, #59	; 0x3b
    1792:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1794:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1796:	6823      	ldr	r3, [r4, #0]
    1798:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    179a:	2b3f      	cmp	r3, #63	; 0x3f
    179c:	d06d      	beq.n	187a <system_clock_init+0x1a2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    179e:	a805      	add	r0, sp, #20
    17a0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    17a2:	4b3f      	ldr	r3, [pc, #252]	; (18a0 <system_clock_init+0x1c8>)
    17a4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    17a6:	2303      	movs	r3, #3
    17a8:	4699      	mov	r9, r3
    17aa:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    17ac:	231f      	movs	r3, #31
    17ae:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    17b0:	4b3c      	ldr	r3, [pc, #240]	; (18a4 <system_clock_init+0x1cc>)
    17b2:	4798      	blx	r3
	config->run_in_standby  = false;
    17b4:	a804      	add	r0, sp, #16
    17b6:	2500      	movs	r5, #0
    17b8:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17ba:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    17bc:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17be:	4b3a      	ldr	r3, [pc, #232]	; (18a8 <system_clock_init+0x1d0>)
    17c0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17c2:	2006      	movs	r0, #6
    17c4:	4b32      	ldr	r3, [pc, #200]	; (1890 <system_clock_init+0x1b8>)
    17c6:	469a      	mov	sl, r3
    17c8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17ca:	4b38      	ldr	r3, [pc, #224]	; (18ac <system_clock_init+0x1d4>)
    17cc:	4798      	blx	r3
	config->high_when_disabled = false;
    17ce:	ac01      	add	r4, sp, #4
    17d0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    17d2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    17d4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    17d6:	2305      	movs	r3, #5
    17d8:	7023      	strb	r3, [r4, #0]
    17da:	331b      	adds	r3, #27
    17dc:	4698      	mov	r8, r3
    17de:	6063      	str	r3, [r4, #4]
    17e0:	0021      	movs	r1, r4
    17e2:	2001      	movs	r0, #1
    17e4:	4f32      	ldr	r7, [pc, #200]	; (18b0 <system_clock_init+0x1d8>)
    17e6:	47b8      	blx	r7
    17e8:	2001      	movs	r0, #1
    17ea:	4e32      	ldr	r6, [pc, #200]	; (18b4 <system_clock_init+0x1dc>)
    17ec:	47b0      	blx	r6
	config->high_when_disabled = false;
    17ee:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    17f0:	7265      	strb	r5, [r4, #9]
    17f2:	2304      	movs	r3, #4
    17f4:	7023      	strb	r3, [r4, #0]
    17f6:	4643      	mov	r3, r8
    17f8:	6063      	str	r3, [r4, #4]
    17fa:	3b1f      	subs	r3, #31
    17fc:	469b      	mov	fp, r3
    17fe:	7223      	strb	r3, [r4, #8]
    1800:	0021      	movs	r1, r4
    1802:	2002      	movs	r0, #2
    1804:	47b8      	blx	r7
    1806:	2002      	movs	r0, #2
    1808:	47b0      	blx	r6
	config->high_when_disabled = false;
    180a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    180c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    180e:	7265      	strb	r5, [r4, #9]
    1810:	464b      	mov	r3, r9
    1812:	7023      	strb	r3, [r4, #0]
    1814:	4643      	mov	r3, r8
    1816:	6063      	str	r3, [r4, #4]
    1818:	0021      	movs	r1, r4
    181a:	2004      	movs	r0, #4
    181c:	47b8      	blx	r7
    181e:	2004      	movs	r0, #4
    1820:	47b0      	blx	r6
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1822:	465b      	mov	r3, fp
    1824:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1826:	0021      	movs	r1, r4
    1828:	2000      	movs	r0, #0
    182a:	4b17      	ldr	r3, [pc, #92]	; (1888 <system_clock_init+0x1b0>)
    182c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    182e:	2000      	movs	r0, #0
    1830:	4b21      	ldr	r3, [pc, #132]	; (18b8 <system_clock_init+0x1e0>)
    1832:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1834:	2007      	movs	r0, #7
    1836:	47d0      	blx	sl
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1838:	4911      	ldr	r1, [pc, #68]	; (1880 <system_clock_init+0x1a8>)
    183a:	22d0      	movs	r2, #208	; 0xd0
    183c:	68cb      	ldr	r3, [r1, #12]
    183e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1840:	2bd0      	cmp	r3, #208	; 0xd0
    1842:	d1fb      	bne.n	183c <system_clock_init+0x164>
	PM->CPUSEL.reg = (uint32_t)divider;
    1844:	4a1d      	ldr	r2, [pc, #116]	; (18bc <system_clock_init+0x1e4>)
    1846:	2300      	movs	r3, #0
    1848:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    184a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    184c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    184e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1850:	a901      	add	r1, sp, #4
    1852:	2201      	movs	r2, #1
    1854:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1856:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1858:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    185a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    185c:	3307      	adds	r3, #7
    185e:	700b      	strb	r3, [r1, #0]
    1860:	2000      	movs	r0, #0
    1862:	4b13      	ldr	r3, [pc, #76]	; (18b0 <system_clock_init+0x1d8>)
    1864:	4798      	blx	r3
    1866:	2000      	movs	r0, #0
    1868:	4b12      	ldr	r3, [pc, #72]	; (18b4 <system_clock_init+0x1dc>)
    186a:	4798      	blx	r3
#endif
}
    186c:	b011      	add	sp, #68	; 0x44
    186e:	bc3c      	pop	{r2, r3, r4, r5}
    1870:	4690      	mov	r8, r2
    1872:	4699      	mov	r9, r3
    1874:	46a2      	mov	sl, r4
    1876:	46ab      	mov	fp, r5
    1878:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    187a:	3b20      	subs	r3, #32
    187c:	e78f      	b.n	179e <system_clock_init+0xc6>
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	40000800 	.word	0x40000800
    1884:	41004000 	.word	0x41004000
    1888:	00001af9 	.word	0x00001af9
    188c:	000014f9 	.word	0x000014f9
    1890:	00001631 	.word	0x00001631
    1894:	00806024 	.word	0x00806024
    1898:	ff80ffff 	.word	0xff80ffff
    189c:	0000147d 	.word	0x0000147d
    18a0:	ffffb71b 	.word	0xffffb71b
    18a4:	000015b1 	.word	0x000015b1
    18a8:	00001441 	.word	0x00001441
    18ac:	000018c1 	.word	0x000018c1
    18b0:	000018e5 	.word	0x000018e5
    18b4:	0000199d 	.word	0x0000199d
    18b8:	00001a6d 	.word	0x00001a6d
    18bc:	40000400 	.word	0x40000400

000018c0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    18c0:	4a06      	ldr	r2, [pc, #24]	; (18dc <system_gclk_init+0x1c>)
    18c2:	6993      	ldr	r3, [r2, #24]
    18c4:	2108      	movs	r1, #8
    18c6:	430b      	orrs	r3, r1
    18c8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    18ca:	2201      	movs	r2, #1
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <system_gclk_init+0x20>)
    18ce:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18d0:	0019      	movs	r1, r3
    18d2:	780b      	ldrb	r3, [r1, #0]
    18d4:	4213      	tst	r3, r2
    18d6:	d1fc      	bne.n	18d2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    18d8:	4770      	bx	lr
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	40000400 	.word	0x40000400
    18e0:	40000c00 	.word	0x40000c00

000018e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18e4:	b570      	push	{r4, r5, r6, lr}
    18e6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18e8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18ea:	780d      	ldrb	r5, [r1, #0]
    18ec:	022d      	lsls	r5, r5, #8
    18ee:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18f0:	784b      	ldrb	r3, [r1, #1]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d002      	beq.n	18fc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18f6:	2380      	movs	r3, #128	; 0x80
    18f8:	02db      	lsls	r3, r3, #11
    18fa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    18fc:	7a4b      	ldrb	r3, [r1, #9]
    18fe:	2b00      	cmp	r3, #0
    1900:	d002      	beq.n	1908 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1902:	2380      	movs	r3, #128	; 0x80
    1904:	031b      	lsls	r3, r3, #12
    1906:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1908:	6848      	ldr	r0, [r1, #4]
    190a:	2801      	cmp	r0, #1
    190c:	d910      	bls.n	1930 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    190e:	1e43      	subs	r3, r0, #1
    1910:	4218      	tst	r0, r3
    1912:	d134      	bne.n	197e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1914:	2802      	cmp	r0, #2
    1916:	d930      	bls.n	197a <system_gclk_gen_set_config+0x96>
    1918:	2302      	movs	r3, #2
    191a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    191c:	3201      	adds	r2, #1
						mask <<= 1) {
    191e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1920:	4298      	cmp	r0, r3
    1922:	d8fb      	bhi.n	191c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1924:	0212      	lsls	r2, r2, #8
    1926:	4332      	orrs	r2, r6
    1928:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    192a:	2380      	movs	r3, #128	; 0x80
    192c:	035b      	lsls	r3, r3, #13
    192e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1930:	7a0b      	ldrb	r3, [r1, #8]
    1932:	2b00      	cmp	r3, #0
    1934:	d002      	beq.n	193c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1936:	2380      	movs	r3, #128	; 0x80
    1938:	039b      	lsls	r3, r3, #14
    193a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    193c:	4a13      	ldr	r2, [pc, #76]	; (198c <system_gclk_gen_set_config+0xa8>)
    193e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1940:	b25b      	sxtb	r3, r3
    1942:	2b00      	cmp	r3, #0
    1944:	dbfb      	blt.n	193e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1946:	4b12      	ldr	r3, [pc, #72]	; (1990 <system_gclk_gen_set_config+0xac>)
    1948:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    194a:	4b12      	ldr	r3, [pc, #72]	; (1994 <system_gclk_gen_set_config+0xb0>)
    194c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    194e:	4a0f      	ldr	r2, [pc, #60]	; (198c <system_gclk_gen_set_config+0xa8>)
    1950:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1952:	b25b      	sxtb	r3, r3
    1954:	2b00      	cmp	r3, #0
    1956:	dbfb      	blt.n	1950 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1958:	4b0c      	ldr	r3, [pc, #48]	; (198c <system_gclk_gen_set_config+0xa8>)
    195a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    195c:	001a      	movs	r2, r3
    195e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1960:	b25b      	sxtb	r3, r3
    1962:	2b00      	cmp	r3, #0
    1964:	dbfb      	blt.n	195e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1966:	4a09      	ldr	r2, [pc, #36]	; (198c <system_gclk_gen_set_config+0xa8>)
    1968:	6853      	ldr	r3, [r2, #4]
    196a:	2180      	movs	r1, #128	; 0x80
    196c:	0249      	lsls	r1, r1, #9
    196e:	400b      	ands	r3, r1
    1970:	431d      	orrs	r5, r3
    1972:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1974:	4b08      	ldr	r3, [pc, #32]	; (1998 <system_gclk_gen_set_config+0xb4>)
    1976:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1978:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    197a:	2200      	movs	r2, #0
    197c:	e7d2      	b.n	1924 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    197e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1980:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1982:	2380      	movs	r3, #128	; 0x80
    1984:	029b      	lsls	r3, r3, #10
    1986:	431d      	orrs	r5, r3
    1988:	e7d2      	b.n	1930 <system_gclk_gen_set_config+0x4c>
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	40000c00 	.word	0x40000c00
    1990:	000001ad 	.word	0x000001ad
    1994:	40000c08 	.word	0x40000c08
    1998:	000001ed 	.word	0x000001ed

0000199c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    199c:	b510      	push	{r4, lr}
    199e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19a0:	4a0b      	ldr	r2, [pc, #44]	; (19d0 <system_gclk_gen_enable+0x34>)
    19a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19a4:	b25b      	sxtb	r3, r3
    19a6:	2b00      	cmp	r3, #0
    19a8:	dbfb      	blt.n	19a2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    19aa:	4b0a      	ldr	r3, [pc, #40]	; (19d4 <system_gclk_gen_enable+0x38>)
    19ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19ae:	4b0a      	ldr	r3, [pc, #40]	; (19d8 <system_gclk_gen_enable+0x3c>)
    19b0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19b2:	4a07      	ldr	r2, [pc, #28]	; (19d0 <system_gclk_gen_enable+0x34>)
    19b4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19b6:	b25b      	sxtb	r3, r3
    19b8:	2b00      	cmp	r3, #0
    19ba:	dbfb      	blt.n	19b4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    19bc:	4a04      	ldr	r2, [pc, #16]	; (19d0 <system_gclk_gen_enable+0x34>)
    19be:	6851      	ldr	r1, [r2, #4]
    19c0:	2380      	movs	r3, #128	; 0x80
    19c2:	025b      	lsls	r3, r3, #9
    19c4:	430b      	orrs	r3, r1
    19c6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <system_gclk_gen_enable+0x40>)
    19ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19cc:	bd10      	pop	{r4, pc}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	40000c00 	.word	0x40000c00
    19d4:	000001ad 	.word	0x000001ad
    19d8:	40000c04 	.word	0x40000c04
    19dc:	000001ed 	.word	0x000001ed

000019e0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19e0:	b570      	push	{r4, r5, r6, lr}
    19e2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19e4:	4a1a      	ldr	r2, [pc, #104]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    19e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19e8:	b25b      	sxtb	r3, r3
    19ea:	2b00      	cmp	r3, #0
    19ec:	dbfb      	blt.n	19e6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    19ee:	4b19      	ldr	r3, [pc, #100]	; (1a54 <system_gclk_gen_get_hz+0x74>)
    19f0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19f2:	4b19      	ldr	r3, [pc, #100]	; (1a58 <system_gclk_gen_get_hz+0x78>)
    19f4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19f6:	4a16      	ldr	r2, [pc, #88]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    19f8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19fa:	b25b      	sxtb	r3, r3
    19fc:	2b00      	cmp	r3, #0
    19fe:	dbfb      	blt.n	19f8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a00:	4e13      	ldr	r6, [pc, #76]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    1a02:	6870      	ldr	r0, [r6, #4]
    1a04:	04c0      	lsls	r0, r0, #19
    1a06:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a08:	4b14      	ldr	r3, [pc, #80]	; (1a5c <system_gclk_gen_get_hz+0x7c>)
    1a0a:	4798      	blx	r3
    1a0c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a0e:	4b12      	ldr	r3, [pc, #72]	; (1a58 <system_gclk_gen_get_hz+0x78>)
    1a10:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a12:	6876      	ldr	r6, [r6, #4]
    1a14:	02f6      	lsls	r6, r6, #11
    1a16:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a18:	4b11      	ldr	r3, [pc, #68]	; (1a60 <system_gclk_gen_get_hz+0x80>)
    1a1a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a1c:	4a0c      	ldr	r2, [pc, #48]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    1a1e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a20:	b25b      	sxtb	r3, r3
    1a22:	2b00      	cmp	r3, #0
    1a24:	dbfb      	blt.n	1a1e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a26:	4b0a      	ldr	r3, [pc, #40]	; (1a50 <system_gclk_gen_get_hz+0x70>)
    1a28:	689c      	ldr	r4, [r3, #8]
    1a2a:	0224      	lsls	r4, r4, #8
    1a2c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1a2e:	4b0d      	ldr	r3, [pc, #52]	; (1a64 <system_gclk_gen_get_hz+0x84>)
    1a30:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a32:	2e00      	cmp	r6, #0
    1a34:	d107      	bne.n	1a46 <system_gclk_gen_get_hz+0x66>
    1a36:	2c01      	cmp	r4, #1
    1a38:	d907      	bls.n	1a4a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1a3a:	0021      	movs	r1, r4
    1a3c:	0028      	movs	r0, r5
    1a3e:	4b0a      	ldr	r3, [pc, #40]	; (1a68 <system_gclk_gen_get_hz+0x88>)
    1a40:	4798      	blx	r3
    1a42:	0005      	movs	r5, r0
    1a44:	e001      	b.n	1a4a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1a46:	3401      	adds	r4, #1
    1a48:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1a4a:	0028      	movs	r0, r5
    1a4c:	bd70      	pop	{r4, r5, r6, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	40000c00 	.word	0x40000c00
    1a54:	000001ad 	.word	0x000001ad
    1a58:	40000c04 	.word	0x40000c04
    1a5c:	000013ad 	.word	0x000013ad
    1a60:	40000c08 	.word	0x40000c08
    1a64:	000001ed 	.word	0x000001ed
    1a68:	00008ec9 	.word	0x00008ec9

00001a6c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a6c:	b510      	push	{r4, lr}
    1a6e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a70:	4b06      	ldr	r3, [pc, #24]	; (1a8c <system_gclk_chan_enable+0x20>)
    1a72:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a74:	4b06      	ldr	r3, [pc, #24]	; (1a90 <system_gclk_chan_enable+0x24>)
    1a76:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a78:	4a06      	ldr	r2, [pc, #24]	; (1a94 <system_gclk_chan_enable+0x28>)
    1a7a:	8853      	ldrh	r3, [r2, #2]
    1a7c:	2180      	movs	r1, #128	; 0x80
    1a7e:	01c9      	lsls	r1, r1, #7
    1a80:	430b      	orrs	r3, r1
    1a82:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a84:	4b04      	ldr	r3, [pc, #16]	; (1a98 <system_gclk_chan_enable+0x2c>)
    1a86:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a88:	bd10      	pop	{r4, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	000001ad 	.word	0x000001ad
    1a90:	40000c02 	.word	0x40000c02
    1a94:	40000c00 	.word	0x40000c00
    1a98:	000001ed 	.word	0x000001ed

00001a9c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a9c:	b510      	push	{r4, lr}
    1a9e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1aa0:	4b0f      	ldr	r3, [pc, #60]	; (1ae0 <system_gclk_chan_disable+0x44>)
    1aa2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1aa4:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <system_gclk_chan_disable+0x48>)
    1aa6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1aa8:	4a0f      	ldr	r2, [pc, #60]	; (1ae8 <system_gclk_chan_disable+0x4c>)
    1aaa:	8853      	ldrh	r3, [r2, #2]
    1aac:	051b      	lsls	r3, r3, #20
    1aae:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ab0:	8853      	ldrh	r3, [r2, #2]
    1ab2:	490e      	ldr	r1, [pc, #56]	; (1aec <system_gclk_chan_disable+0x50>)
    1ab4:	400b      	ands	r3, r1
    1ab6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1ab8:	8853      	ldrh	r3, [r2, #2]
    1aba:	490d      	ldr	r1, [pc, #52]	; (1af0 <system_gclk_chan_disable+0x54>)
    1abc:	400b      	ands	r3, r1
    1abe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ac0:	0011      	movs	r1, r2
    1ac2:	2280      	movs	r2, #128	; 0x80
    1ac4:	01d2      	lsls	r2, r2, #7
    1ac6:	884b      	ldrh	r3, [r1, #2]
    1ac8:	4213      	tst	r3, r2
    1aca:	d1fc      	bne.n	1ac6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1acc:	4906      	ldr	r1, [pc, #24]	; (1ae8 <system_gclk_chan_disable+0x4c>)
    1ace:	884a      	ldrh	r2, [r1, #2]
    1ad0:	0203      	lsls	r3, r0, #8
    1ad2:	4806      	ldr	r0, [pc, #24]	; (1aec <system_gclk_chan_disable+0x50>)
    1ad4:	4002      	ands	r2, r0
    1ad6:	4313      	orrs	r3, r2
    1ad8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1ada:	4b06      	ldr	r3, [pc, #24]	; (1af4 <system_gclk_chan_disable+0x58>)
    1adc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ade:	bd10      	pop	{r4, pc}
    1ae0:	000001ad 	.word	0x000001ad
    1ae4:	40000c02 	.word	0x40000c02
    1ae8:	40000c00 	.word	0x40000c00
    1aec:	fffff0ff 	.word	0xfffff0ff
    1af0:	ffffbfff 	.word	0xffffbfff
    1af4:	000001ed 	.word	0x000001ed

00001af8 <system_gclk_chan_set_config>:
{
    1af8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1afa:	780c      	ldrb	r4, [r1, #0]
    1afc:	0224      	lsls	r4, r4, #8
    1afe:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1b00:	4b02      	ldr	r3, [pc, #8]	; (1b0c <system_gclk_chan_set_config+0x14>)
    1b02:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b04:	b2a4      	uxth	r4, r4
    1b06:	4b02      	ldr	r3, [pc, #8]	; (1b10 <system_gclk_chan_set_config+0x18>)
    1b08:	805c      	strh	r4, [r3, #2]
}
    1b0a:	bd10      	pop	{r4, pc}
    1b0c:	00001a9d 	.word	0x00001a9d
    1b10:	40000c00 	.word	0x40000c00

00001b14 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1b14:	b510      	push	{r4, lr}
    1b16:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b18:	4b06      	ldr	r3, [pc, #24]	; (1b34 <system_gclk_chan_get_hz+0x20>)
    1b1a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b1c:	4b06      	ldr	r3, [pc, #24]	; (1b38 <system_gclk_chan_get_hz+0x24>)
    1b1e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1b20:	4b06      	ldr	r3, [pc, #24]	; (1b3c <system_gclk_chan_get_hz+0x28>)
    1b22:	885c      	ldrh	r4, [r3, #2]
    1b24:	0524      	lsls	r4, r4, #20
    1b26:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1b28:	4b05      	ldr	r3, [pc, #20]	; (1b40 <system_gclk_chan_get_hz+0x2c>)
    1b2a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b2c:	0020      	movs	r0, r4
    1b2e:	4b05      	ldr	r3, [pc, #20]	; (1b44 <system_gclk_chan_get_hz+0x30>)
    1b30:	4798      	blx	r3
}
    1b32:	bd10      	pop	{r4, pc}
    1b34:	000001ad 	.word	0x000001ad
    1b38:	40000c02 	.word	0x40000c02
    1b3c:	40000c00 	.word	0x40000c00
    1b40:	000001ed 	.word	0x000001ed
    1b44:	000019e1 	.word	0x000019e1

00001b48 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1b48:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b4a:	78d3      	ldrb	r3, [r2, #3]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d135      	bne.n	1bbc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b50:	7813      	ldrb	r3, [r2, #0]
    1b52:	2b80      	cmp	r3, #128	; 0x80
    1b54:	d029      	beq.n	1baa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b56:	061b      	lsls	r3, r3, #24
    1b58:	2480      	movs	r4, #128	; 0x80
    1b5a:	0264      	lsls	r4, r4, #9
    1b5c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b5e:	7854      	ldrb	r4, [r2, #1]
    1b60:	2502      	movs	r5, #2
    1b62:	43ac      	bics	r4, r5
    1b64:	d106      	bne.n	1b74 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b66:	7894      	ldrb	r4, [r2, #2]
    1b68:	2c00      	cmp	r4, #0
    1b6a:	d120      	bne.n	1bae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b6c:	2480      	movs	r4, #128	; 0x80
    1b6e:	02a4      	lsls	r4, r4, #10
    1b70:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b72:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b74:	7854      	ldrb	r4, [r2, #1]
    1b76:	3c01      	subs	r4, #1
    1b78:	2c01      	cmp	r4, #1
    1b7a:	d91c      	bls.n	1bb6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b7c:	040d      	lsls	r5, r1, #16
    1b7e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b80:	24a0      	movs	r4, #160	; 0xa0
    1b82:	05e4      	lsls	r4, r4, #23
    1b84:	432c      	orrs	r4, r5
    1b86:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b88:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b8a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b8c:	24d0      	movs	r4, #208	; 0xd0
    1b8e:	0624      	lsls	r4, r4, #24
    1b90:	432c      	orrs	r4, r5
    1b92:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b94:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b96:	78d4      	ldrb	r4, [r2, #3]
    1b98:	2c00      	cmp	r4, #0
    1b9a:	d122      	bne.n	1be2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b9c:	035b      	lsls	r3, r3, #13
    1b9e:	d51c      	bpl.n	1bda <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ba0:	7893      	ldrb	r3, [r2, #2]
    1ba2:	2b01      	cmp	r3, #1
    1ba4:	d01e      	beq.n	1be4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1ba6:	6141      	str	r1, [r0, #20]
    1ba8:	e017      	b.n	1bda <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1baa:	2300      	movs	r3, #0
    1bac:	e7d7      	b.n	1b5e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1bae:	24c0      	movs	r4, #192	; 0xc0
    1bb0:	02e4      	lsls	r4, r4, #11
    1bb2:	4323      	orrs	r3, r4
    1bb4:	e7dd      	b.n	1b72 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1bb6:	4c0d      	ldr	r4, [pc, #52]	; (1bec <_system_pinmux_config+0xa4>)
    1bb8:	4023      	ands	r3, r4
    1bba:	e7df      	b.n	1b7c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1bbc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1bbe:	040c      	lsls	r4, r1, #16
    1bc0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1bc2:	23a0      	movs	r3, #160	; 0xa0
    1bc4:	05db      	lsls	r3, r3, #23
    1bc6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bc8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1bca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1bcc:	23d0      	movs	r3, #208	; 0xd0
    1bce:	061b      	lsls	r3, r3, #24
    1bd0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bd2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1bd4:	78d3      	ldrb	r3, [r2, #3]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d103      	bne.n	1be2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1bda:	7853      	ldrb	r3, [r2, #1]
    1bdc:	3b01      	subs	r3, #1
    1bde:	2b01      	cmp	r3, #1
    1be0:	d902      	bls.n	1be8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1be2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1be4:	6181      	str	r1, [r0, #24]
    1be6:	e7f8      	b.n	1bda <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1be8:	6081      	str	r1, [r0, #8]
}
    1bea:	e7fa      	b.n	1be2 <_system_pinmux_config+0x9a>
    1bec:	fffbffff 	.word	0xfffbffff

00001bf0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1bf0:	b510      	push	{r4, lr}
    1bf2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1bf4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1bf6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1bf8:	2900      	cmp	r1, #0
    1bfa:	d104      	bne.n	1c06 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1bfc:	0943      	lsrs	r3, r0, #5
    1bfe:	01db      	lsls	r3, r3, #7
    1c00:	4905      	ldr	r1, [pc, #20]	; (1c18 <system_pinmux_pin_set_config+0x28>)
    1c02:	468c      	mov	ip, r1
    1c04:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1c06:	241f      	movs	r4, #31
    1c08:	4020      	ands	r0, r4
    1c0a:	2101      	movs	r1, #1
    1c0c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1c0e:	0018      	movs	r0, r3
    1c10:	4b02      	ldr	r3, [pc, #8]	; (1c1c <system_pinmux_pin_set_config+0x2c>)
    1c12:	4798      	blx	r3
}
    1c14:	bd10      	pop	{r4, pc}
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	41004400 	.word	0x41004400
    1c1c:	00001b49 	.word	0x00001b49

00001c20 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1c20:	4770      	bx	lr
	...

00001c24 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1c24:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1c26:	4b05      	ldr	r3, [pc, #20]	; (1c3c <system_init+0x18>)
    1c28:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1c2a:	4b05      	ldr	r3, [pc, #20]	; (1c40 <system_init+0x1c>)
    1c2c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c2e:	4b05      	ldr	r3, [pc, #20]	; (1c44 <system_init+0x20>)
    1c30:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c32:	4b05      	ldr	r3, [pc, #20]	; (1c48 <system_init+0x24>)
    1c34:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <system_init+0x28>)
    1c38:	4798      	blx	r3
}
    1c3a:	bd10      	pop	{r4, pc}
    1c3c:	000016d9 	.word	0x000016d9
    1c40:	0000021d 	.word	0x0000021d
    1c44:	00001c21 	.word	0x00001c21
    1c48:	000003c9 	.word	0x000003c9
    1c4c:	00001c21 	.word	0x00001c21

00001c50 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1c50:	1c93      	adds	r3, r2, #2
    1c52:	009b      	lsls	r3, r3, #2
    1c54:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1c56:	2a02      	cmp	r2, #2
    1c58:	d009      	beq.n	1c6e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1c5a:	2a03      	cmp	r2, #3
    1c5c:	d00c      	beq.n	1c78 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1c5e:	2301      	movs	r3, #1
    1c60:	4093      	lsls	r3, r2
    1c62:	001a      	movs	r2, r3
    1c64:	7e03      	ldrb	r3, [r0, #24]
    1c66:	4313      	orrs	r3, r2
    1c68:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1c6a:	2000      	movs	r0, #0
    1c6c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1c6e:	7e03      	ldrb	r3, [r0, #24]
    1c70:	2210      	movs	r2, #16
    1c72:	4313      	orrs	r3, r2
    1c74:	7603      	strb	r3, [r0, #24]
    1c76:	e7f8      	b.n	1c6a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1c78:	7e03      	ldrb	r3, [r0, #24]
    1c7a:	2220      	movs	r2, #32
    1c7c:	4313      	orrs	r3, r2
    1c7e:	7603      	strb	r3, [r0, #24]
    1c80:	e7f3      	b.n	1c6a <tc_register_callback+0x1a>
	...

00001c84 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1c84:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1c86:	0080      	lsls	r0, r0, #2
    1c88:	4b16      	ldr	r3, [pc, #88]	; (1ce4 <_tc_interrupt_handler+0x60>)
    1c8a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c8c:	6823      	ldr	r3, [r4, #0]
    1c8e:	7b9d      	ldrb	r5, [r3, #14]
    1c90:	7e22      	ldrb	r2, [r4, #24]
    1c92:	7e63      	ldrb	r3, [r4, #25]
    1c94:	4013      	ands	r3, r2
    1c96:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c98:	07eb      	lsls	r3, r5, #31
    1c9a:	d406      	bmi.n	1caa <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1c9c:	07ab      	lsls	r3, r5, #30
    1c9e:	d40b      	bmi.n	1cb8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1ca0:	06eb      	lsls	r3, r5, #27
    1ca2:	d410      	bmi.n	1cc6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1ca4:	06ab      	lsls	r3, r5, #26
    1ca6:	d415      	bmi.n	1cd4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1ca8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1caa:	0020      	movs	r0, r4
    1cac:	68a3      	ldr	r3, [r4, #8]
    1cae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1cb0:	2301      	movs	r3, #1
    1cb2:	6822      	ldr	r2, [r4, #0]
    1cb4:	7393      	strb	r3, [r2, #14]
    1cb6:	e7f1      	b.n	1c9c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1cb8:	0020      	movs	r0, r4
    1cba:	68e3      	ldr	r3, [r4, #12]
    1cbc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1cbe:	2302      	movs	r3, #2
    1cc0:	6822      	ldr	r2, [r4, #0]
    1cc2:	7393      	strb	r3, [r2, #14]
    1cc4:	e7ec      	b.n	1ca0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1cc6:	0020      	movs	r0, r4
    1cc8:	6923      	ldr	r3, [r4, #16]
    1cca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1ccc:	2310      	movs	r3, #16
    1cce:	6822      	ldr	r2, [r4, #0]
    1cd0:	7393      	strb	r3, [r2, #14]
    1cd2:	e7e7      	b.n	1ca4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1cd4:	0020      	movs	r0, r4
    1cd6:	6963      	ldr	r3, [r4, #20]
    1cd8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1cda:	6823      	ldr	r3, [r4, #0]
    1cdc:	2220      	movs	r2, #32
    1cde:	739a      	strb	r2, [r3, #14]
}
    1ce0:	e7e2      	b.n	1ca8 <_tc_interrupt_handler+0x24>
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	20000444 	.word	0x20000444

00001ce8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1ce8:	b510      	push	{r4, lr}
    1cea:	2000      	movs	r0, #0
    1cec:	4b01      	ldr	r3, [pc, #4]	; (1cf4 <TC3_Handler+0xc>)
    1cee:	4798      	blx	r3
    1cf0:	bd10      	pop	{r4, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	00001c85 	.word	0x00001c85

00001cf8 <TC4_Handler>:
    1cf8:	b510      	push	{r4, lr}
    1cfa:	2001      	movs	r0, #1
    1cfc:	4b01      	ldr	r3, [pc, #4]	; (1d04 <TC4_Handler+0xc>)
    1cfe:	4798      	blx	r3
    1d00:	bd10      	pop	{r4, pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	00001c85 	.word	0x00001c85

00001d08 <TC5_Handler>:
    1d08:	b510      	push	{r4, lr}
    1d0a:	2002      	movs	r0, #2
    1d0c:	4b01      	ldr	r3, [pc, #4]	; (1d14 <TC5_Handler+0xc>)
    1d0e:	4798      	blx	r3
    1d10:	bd10      	pop	{r4, pc}
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	00001c85 	.word	0x00001c85

00001d18 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1d18:	b530      	push	{r4, r5, lr}
    1d1a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1d1c:	aa01      	add	r2, sp, #4
    1d1e:	4b0b      	ldr	r3, [pc, #44]	; (1d4c <_tc_get_inst_index+0x34>)
    1d20:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d22:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1d24:	9b01      	ldr	r3, [sp, #4]
    1d26:	4298      	cmp	r0, r3
    1d28:	d00d      	beq.n	1d46 <_tc_get_inst_index+0x2e>
    1d2a:	9b02      	ldr	r3, [sp, #8]
    1d2c:	4298      	cmp	r0, r3
    1d2e:	d008      	beq.n	1d42 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1d30:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1d32:	9a03      	ldr	r2, [sp, #12]
    1d34:	4282      	cmp	r2, r0
    1d36:	d002      	beq.n	1d3e <_tc_get_inst_index+0x26>
}
    1d38:	0018      	movs	r0, r3
    1d3a:	b005      	add	sp, #20
    1d3c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d3e:	3302      	adds	r3, #2
    1d40:	e002      	b.n	1d48 <_tc_get_inst_index+0x30>
    1d42:	2301      	movs	r3, #1
    1d44:	e000      	b.n	1d48 <_tc_get_inst_index+0x30>
    1d46:	2300      	movs	r3, #0
			return i;
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	e7f5      	b.n	1d38 <_tc_get_inst_index+0x20>
    1d4c:	0000a1dc 	.word	0x0000a1dc

00001d50 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d52:	b087      	sub	sp, #28
    1d54:	0004      	movs	r4, r0
    1d56:	000d      	movs	r5, r1
    1d58:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1d5a:	0008      	movs	r0, r1
    1d5c:	4b85      	ldr	r3, [pc, #532]	; (1f74 <tc_init+0x224>)
    1d5e:	4798      	blx	r3
    1d60:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1d62:	ab05      	add	r3, sp, #20
    1d64:	221b      	movs	r2, #27
    1d66:	701a      	strb	r2, [r3, #0]
    1d68:	3201      	adds	r2, #1
    1d6a:	705a      	strb	r2, [r3, #1]
    1d6c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1d6e:	ab03      	add	r3, sp, #12
    1d70:	2280      	movs	r2, #128	; 0x80
    1d72:	0112      	lsls	r2, r2, #4
    1d74:	801a      	strh	r2, [r3, #0]
    1d76:	2280      	movs	r2, #128	; 0x80
    1d78:	0152      	lsls	r2, r2, #5
    1d7a:	805a      	strh	r2, [r3, #2]
    1d7c:	2280      	movs	r2, #128	; 0x80
    1d7e:	0192      	lsls	r2, r2, #6
    1d80:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1d82:	2300      	movs	r3, #0
    1d84:	60a3      	str	r3, [r4, #8]
    1d86:	60e3      	str	r3, [r4, #12]
    1d88:	6123      	str	r3, [r4, #16]
    1d8a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1d8c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1d8e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1d90:	0082      	lsls	r2, r0, #2
    1d92:	4b79      	ldr	r3, [pc, #484]	; (1f78 <tc_init+0x228>)
    1d94:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1d96:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d98:	78b3      	ldrb	r3, [r6, #2]
    1d9a:	2b08      	cmp	r3, #8
    1d9c:	d006      	beq.n	1dac <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1d9e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1da0:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1da2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1da4:	07db      	lsls	r3, r3, #31
    1da6:	d505      	bpl.n	1db4 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1da8:	b007      	add	sp, #28
    1daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1dac:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1dae:	07fa      	lsls	r2, r7, #31
    1db0:	d5fa      	bpl.n	1da8 <tc_init+0x58>
    1db2:	e7f4      	b.n	1d9e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1db4:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1db6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1db8:	06db      	lsls	r3, r3, #27
    1dba:	d4f5      	bmi.n	1da8 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1dbc:	882b      	ldrh	r3, [r5, #0]
    1dbe:	079b      	lsls	r3, r3, #30
    1dc0:	d4f2      	bmi.n	1da8 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1dc2:	7c33      	ldrb	r3, [r6, #16]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d179      	bne.n	1ebc <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    1dc8:	7f33      	ldrb	r3, [r6, #28]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d000      	beq.n	1dd0 <tc_init+0x80>
    1dce:	e081      	b.n	1ed4 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    1dd0:	496a      	ldr	r1, [pc, #424]	; (1f7c <tc_init+0x22c>)
    1dd2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1dd4:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1dd6:	ab03      	add	r3, sp, #12
    1dd8:	5ad3      	ldrh	r3, [r2, r3]
    1dda:	4303      	orrs	r3, r0
    1ddc:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1dde:	78b3      	ldrb	r3, [r6, #2]
    1de0:	2b08      	cmp	r3, #8
    1de2:	d100      	bne.n	1de6 <tc_init+0x96>
    1de4:	e086      	b.n	1ef4 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    1de6:	a901      	add	r1, sp, #4
    1de8:	7833      	ldrb	r3, [r6, #0]
    1dea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1dec:	ab05      	add	r3, sp, #20
    1dee:	5ddf      	ldrb	r7, [r3, r7]
    1df0:	0038      	movs	r0, r7
    1df2:	4b63      	ldr	r3, [pc, #396]	; (1f80 <tc_init+0x230>)
    1df4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1df6:	0038      	movs	r0, r7
    1df8:	4b62      	ldr	r3, [pc, #392]	; (1f84 <tc_init+0x234>)
    1dfa:	4798      	blx	r3
	ctrla_tmp =
    1dfc:	8931      	ldrh	r1, [r6, #8]
    1dfe:	88b3      	ldrh	r3, [r6, #4]
    1e00:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1e02:	78b1      	ldrb	r1, [r6, #2]
    1e04:	79b2      	ldrb	r2, [r6, #6]
    1e06:	4311      	orrs	r1, r2
	ctrla_tmp =
    1e08:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1e0a:	7873      	ldrb	r3, [r6, #1]
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	d002      	beq.n	1e16 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1e10:	2380      	movs	r3, #128	; 0x80
    1e12:	011b      	lsls	r3, r3, #4
    1e14:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e16:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e18:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e1a:	b25b      	sxtb	r3, r3
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	dbfb      	blt.n	1e18 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1e20:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1e22:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1e24:	1e4b      	subs	r3, r1, #1
    1e26:	4199      	sbcs	r1, r3
    1e28:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1e2a:	7bb3      	ldrb	r3, [r6, #14]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d001      	beq.n	1e34 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1e30:	2301      	movs	r3, #1
    1e32:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e34:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e36:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e38:	b25b      	sxtb	r3, r3
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	dbfb      	blt.n	1e36 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1e3e:	23ff      	movs	r3, #255	; 0xff
    1e40:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1e42:	2900      	cmp	r1, #0
    1e44:	d005      	beq.n	1e52 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e46:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e48:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1e4a:	b25b      	sxtb	r3, r3
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	dbfb      	blt.n	1e48 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1e50:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1e52:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1e54:	7af3      	ldrb	r3, [r6, #11]
    1e56:	2b00      	cmp	r3, #0
    1e58:	d001      	beq.n	1e5e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e5a:	2310      	movs	r3, #16
    1e5c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1e5e:	7b33      	ldrb	r3, [r6, #12]
    1e60:	2b00      	cmp	r3, #0
    1e62:	d001      	beq.n	1e68 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e64:	2320      	movs	r3, #32
    1e66:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e68:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e6a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e6c:	b25b      	sxtb	r3, r3
    1e6e:	2b00      	cmp	r3, #0
    1e70:	dbfb      	blt.n	1e6a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1e72:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e74:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e76:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e78:	b25b      	sxtb	r3, r3
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	dbfb      	blt.n	1e76 <tc_init+0x126>
	switch (module_inst->counter_size) {
    1e7e:	7923      	ldrb	r3, [r4, #4]
    1e80:	2b04      	cmp	r3, #4
    1e82:	d03f      	beq.n	1f04 <tc_init+0x1b4>
    1e84:	2b08      	cmp	r3, #8
    1e86:	d05e      	beq.n	1f46 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1e88:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	d000      	beq.n	1e90 <tc_init+0x140>
    1e8e:	e78b      	b.n	1da8 <tc_init+0x58>
    1e90:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e92:	b25b      	sxtb	r3, r3
    1e94:	2b00      	cmp	r3, #0
    1e96:	dbfb      	blt.n	1e90 <tc_init+0x140>
				= config->counter_16_bit.value;
    1e98:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1e9a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e9e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ea0:	b25b      	sxtb	r3, r3
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	dbfb      	blt.n	1e9e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1ea6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1ea8:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1eaa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1eac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1eae:	b25b      	sxtb	r3, r3
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	dbfb      	blt.n	1eac <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1eb4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1eb6:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1eb8:	2000      	movs	r0, #0
    1eba:	e775      	b.n	1da8 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ebc:	a902      	add	r1, sp, #8
    1ebe:	2301      	movs	r3, #1
    1ec0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1ec2:	2200      	movs	r2, #0
    1ec4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1ec6:	7e32      	ldrb	r2, [r6, #24]
    1ec8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1eca:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1ecc:	7d30      	ldrb	r0, [r6, #20]
    1ece:	4b2e      	ldr	r3, [pc, #184]	; (1f88 <tc_init+0x238>)
    1ed0:	4798      	blx	r3
    1ed2:	e779      	b.n	1dc8 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ed4:	a902      	add	r1, sp, #8
    1ed6:	2301      	movs	r3, #1
    1ed8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1eda:	2200      	movs	r2, #0
    1edc:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1ede:	3224      	adds	r2, #36	; 0x24
    1ee0:	18b2      	adds	r2, r6, r2
    1ee2:	7812      	ldrb	r2, [r2, #0]
    1ee4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ee6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1ee8:	331f      	adds	r3, #31
    1eea:	18f3      	adds	r3, r6, r3
    1eec:	7818      	ldrb	r0, [r3, #0]
    1eee:	4b26      	ldr	r3, [pc, #152]	; (1f88 <tc_init+0x238>)
    1ef0:	4798      	blx	r3
    1ef2:	e76d      	b.n	1dd0 <tc_init+0x80>
    1ef4:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1ef6:	1c7a      	adds	r2, r7, #1
    1ef8:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1efa:	ab03      	add	r3, sp, #12
    1efc:	5ad3      	ldrh	r3, [r2, r3]
    1efe:	4303      	orrs	r3, r0
    1f00:	620b      	str	r3, [r1, #32]
    1f02:	e770      	b.n	1de6 <tc_init+0x96>
    1f04:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f06:	b25b      	sxtb	r3, r3
    1f08:	2b00      	cmp	r3, #0
    1f0a:	dbfb      	blt.n	1f04 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1f0c:	2328      	movs	r3, #40	; 0x28
    1f0e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1f10:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f12:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f14:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f16:	b25b      	sxtb	r3, r3
    1f18:	2b00      	cmp	r3, #0
    1f1a:	dbfb      	blt.n	1f14 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1f1c:	2329      	movs	r3, #41	; 0x29
    1f1e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1f20:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f22:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f24:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f26:	b25b      	sxtb	r3, r3
    1f28:	2b00      	cmp	r3, #0
    1f2a:	dbfb      	blt.n	1f24 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1f2c:	232a      	movs	r3, #42	; 0x2a
    1f2e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1f30:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f32:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f34:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f36:	b25b      	sxtb	r3, r3
    1f38:	2b00      	cmp	r3, #0
    1f3a:	dbfb      	blt.n	1f34 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1f3c:	232b      	movs	r3, #43	; 0x2b
    1f3e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1f40:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1f42:	2000      	movs	r0, #0
    1f44:	e730      	b.n	1da8 <tc_init+0x58>
    1f46:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f48:	b25b      	sxtb	r3, r3
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	dbfb      	blt.n	1f46 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1f4e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f50:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f54:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f56:	b25b      	sxtb	r3, r3
    1f58:	2b00      	cmp	r3, #0
    1f5a:	dbfb      	blt.n	1f54 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1f5c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1f5e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f60:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f62:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f64:	b25b      	sxtb	r3, r3
    1f66:	2b00      	cmp	r3, #0
    1f68:	dbfb      	blt.n	1f62 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1f6a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1f6c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1f6e:	2000      	movs	r0, #0
    1f70:	e71a      	b.n	1da8 <tc_init+0x58>
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	00001d19 	.word	0x00001d19
    1f78:	20000444 	.word	0x20000444
    1f7c:	40000400 	.word	0x40000400
    1f80:	00001af9 	.word	0x00001af9
    1f84:	00001a6d 	.word	0x00001a6d
    1f88:	00001bf1 	.word	0x00001bf1

00001f8c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1f8c:	6802      	ldr	r2, [r0, #0]
    1f8e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1f90:	b25b      	sxtb	r3, r3
    1f92:	2b00      	cmp	r3, #0
    1f94:	dbfb      	blt.n	1f8e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1f96:	7903      	ldrb	r3, [r0, #4]
    1f98:	2b04      	cmp	r3, #4
    1f9a:	d005      	beq.n	1fa8 <tc_get_count_value+0x1c>
    1f9c:	2b08      	cmp	r3, #8
    1f9e:	d009      	beq.n	1fb4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1fa0:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d003      	beq.n	1fae <tc_get_count_value+0x22>
}
    1fa6:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1fa8:	7c10      	ldrb	r0, [r2, #16]
    1faa:	b2c0      	uxtb	r0, r0
    1fac:	e7fb      	b.n	1fa6 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1fae:	8a10      	ldrh	r0, [r2, #16]
    1fb0:	b280      	uxth	r0, r0
    1fb2:	e7f8      	b.n	1fa6 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    1fb4:	6910      	ldr	r0, [r2, #16]
    1fb6:	e7f6      	b.n	1fa6 <tc_get_count_value+0x1a>

00001fb8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1fb8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1fba:	6804      	ldr	r4, [r0, #0]
    1fbc:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1fbe:	b25b      	sxtb	r3, r3
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	dbfb      	blt.n	1fbc <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1fc4:	7903      	ldrb	r3, [r0, #4]
    1fc6:	2b04      	cmp	r3, #4
    1fc8:	d005      	beq.n	1fd6 <tc_set_compare_value+0x1e>
    1fca:	2b08      	cmp	r3, #8
    1fcc:	d014      	beq.n	1ff8 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1fce:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d008      	beq.n	1fe6 <tc_set_compare_value+0x2e>
}
    1fd4:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1fd6:	2017      	movs	r0, #23
			if (channel_index <
    1fd8:	2901      	cmp	r1, #1
    1fda:	d8fb      	bhi.n	1fd4 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    1fdc:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1fde:	1861      	adds	r1, r4, r1
    1fe0:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1fe2:	2000      	movs	r0, #0
    1fe4:	e7f6      	b.n	1fd4 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1fe6:	2017      	movs	r0, #23
			if (channel_index <
    1fe8:	2901      	cmp	r1, #1
    1fea:	d8f3      	bhi.n	1fd4 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    1fec:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1fee:	310c      	adds	r1, #12
    1ff0:	0049      	lsls	r1, r1, #1
    1ff2:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    1ff4:	2000      	movs	r0, #0
    1ff6:	e7ed      	b.n	1fd4 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1ff8:	2017      	movs	r0, #23
			if (channel_index <
    1ffa:	2901      	cmp	r1, #1
    1ffc:	d8ea      	bhi.n	1fd4 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    1ffe:	3106      	adds	r1, #6
    2000:	0089      	lsls	r1, r1, #2
    2002:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    2004:	2000      	movs	r0, #0
    2006:	e7e5      	b.n	1fd4 <tc_set_compare_value+0x1c>

00002008 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2008:	e7fe      	b.n	2008 <Dummy_Handler>
	...

0000200c <Reset_Handler>:
{
    200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    200e:	4a2a      	ldr	r2, [pc, #168]	; (20b8 <Reset_Handler+0xac>)
    2010:	4b2a      	ldr	r3, [pc, #168]	; (20bc <Reset_Handler+0xb0>)
    2012:	429a      	cmp	r2, r3
    2014:	d011      	beq.n	203a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2016:	001a      	movs	r2, r3
    2018:	4b29      	ldr	r3, [pc, #164]	; (20c0 <Reset_Handler+0xb4>)
    201a:	429a      	cmp	r2, r3
    201c:	d20d      	bcs.n	203a <Reset_Handler+0x2e>
    201e:	4a29      	ldr	r2, [pc, #164]	; (20c4 <Reset_Handler+0xb8>)
    2020:	3303      	adds	r3, #3
    2022:	1a9b      	subs	r3, r3, r2
    2024:	089b      	lsrs	r3, r3, #2
    2026:	3301      	adds	r3, #1
    2028:	009b      	lsls	r3, r3, #2
    202a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    202c:	4823      	ldr	r0, [pc, #140]	; (20bc <Reset_Handler+0xb0>)
    202e:	4922      	ldr	r1, [pc, #136]	; (20b8 <Reset_Handler+0xac>)
    2030:	588c      	ldr	r4, [r1, r2]
    2032:	5084      	str	r4, [r0, r2]
    2034:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2036:	429a      	cmp	r2, r3
    2038:	d1fa      	bne.n	2030 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    203a:	4a23      	ldr	r2, [pc, #140]	; (20c8 <Reset_Handler+0xbc>)
    203c:	4b23      	ldr	r3, [pc, #140]	; (20cc <Reset_Handler+0xc0>)
    203e:	429a      	cmp	r2, r3
    2040:	d20a      	bcs.n	2058 <Reset_Handler+0x4c>
    2042:	43d3      	mvns	r3, r2
    2044:	4921      	ldr	r1, [pc, #132]	; (20cc <Reset_Handler+0xc0>)
    2046:	185b      	adds	r3, r3, r1
    2048:	2103      	movs	r1, #3
    204a:	438b      	bics	r3, r1
    204c:	3304      	adds	r3, #4
    204e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2050:	2100      	movs	r1, #0
    2052:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2054:	4293      	cmp	r3, r2
    2056:	d1fc      	bne.n	2052 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2058:	4a1d      	ldr	r2, [pc, #116]	; (20d0 <Reset_Handler+0xc4>)
    205a:	21ff      	movs	r1, #255	; 0xff
    205c:	4b1d      	ldr	r3, [pc, #116]	; (20d4 <Reset_Handler+0xc8>)
    205e:	438b      	bics	r3, r1
    2060:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2062:	39fd      	subs	r1, #253	; 0xfd
    2064:	2390      	movs	r3, #144	; 0x90
    2066:	005b      	lsls	r3, r3, #1
    2068:	4a1b      	ldr	r2, [pc, #108]	; (20d8 <Reset_Handler+0xcc>)
    206a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    206c:	4a1b      	ldr	r2, [pc, #108]	; (20dc <Reset_Handler+0xd0>)
    206e:	78d3      	ldrb	r3, [r2, #3]
    2070:	2503      	movs	r5, #3
    2072:	43ab      	bics	r3, r5
    2074:	2402      	movs	r4, #2
    2076:	4323      	orrs	r3, r4
    2078:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    207a:	78d3      	ldrb	r3, [r2, #3]
    207c:	270c      	movs	r7, #12
    207e:	43bb      	bics	r3, r7
    2080:	2608      	movs	r6, #8
    2082:	4333      	orrs	r3, r6
    2084:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2086:	4b16      	ldr	r3, [pc, #88]	; (20e0 <Reset_Handler+0xd4>)
    2088:	7b98      	ldrb	r0, [r3, #14]
    208a:	2230      	movs	r2, #48	; 0x30
    208c:	4390      	bics	r0, r2
    208e:	2220      	movs	r2, #32
    2090:	4310      	orrs	r0, r2
    2092:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2094:	7b99      	ldrb	r1, [r3, #14]
    2096:	43b9      	bics	r1, r7
    2098:	4331      	orrs	r1, r6
    209a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    209c:	7b9a      	ldrb	r2, [r3, #14]
    209e:	43aa      	bics	r2, r5
    20a0:	4322      	orrs	r2, r4
    20a2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    20a4:	4a0f      	ldr	r2, [pc, #60]	; (20e4 <Reset_Handler+0xd8>)
    20a6:	6853      	ldr	r3, [r2, #4]
    20a8:	2180      	movs	r1, #128	; 0x80
    20aa:	430b      	orrs	r3, r1
    20ac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    20ae:	4b0e      	ldr	r3, [pc, #56]	; (20e8 <Reset_Handler+0xdc>)
    20b0:	4798      	blx	r3
        main();
    20b2:	4b0e      	ldr	r3, [pc, #56]	; (20ec <Reset_Handler+0xe0>)
    20b4:	4798      	blx	r3
    20b6:	e7fe      	b.n	20b6 <Reset_Handler+0xaa>
    20b8:	0000a2f4 	.word	0x0000a2f4
    20bc:	20000000 	.word	0x20000000
    20c0:	200000ec 	.word	0x200000ec
    20c4:	20000004 	.word	0x20000004
    20c8:	200000f0 	.word	0x200000f0
    20cc:	20002cfc 	.word	0x20002cfc
    20d0:	e000ed00 	.word	0xe000ed00
    20d4:	00000000 	.word	0x00000000
    20d8:	41007000 	.word	0x41007000
    20dc:	41005000 	.word	0x41005000
    20e0:	41004800 	.word	0x41004800
    20e4:	41004000 	.word	0x41004000
    20e8:	00009209 	.word	0x00009209
    20ec:	0000489d 	.word	0x0000489d

000020f0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f2:	46c6      	mov	lr, r8
    20f4:	b500      	push	{lr}
    20f6:	000c      	movs	r4, r1
    20f8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    20fa:	2800      	cmp	r0, #0
    20fc:	d10f      	bne.n	211e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    20fe:	2a00      	cmp	r2, #0
    2100:	dd11      	ble.n	2126 <_read+0x36>
    2102:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2104:	4e09      	ldr	r6, [pc, #36]	; (212c <_read+0x3c>)
    2106:	4d0a      	ldr	r5, [pc, #40]	; (2130 <_read+0x40>)
    2108:	6830      	ldr	r0, [r6, #0]
    210a:	0021      	movs	r1, r4
    210c:	682b      	ldr	r3, [r5, #0]
    210e:	4798      	blx	r3
		ptr++;
    2110:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2112:	42bc      	cmp	r4, r7
    2114:	d1f8      	bne.n	2108 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2116:	4640      	mov	r0, r8
    2118:	bc04      	pop	{r2}
    211a:	4690      	mov	r8, r2
    211c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    211e:	2301      	movs	r3, #1
    2120:	425b      	negs	r3, r3
    2122:	4698      	mov	r8, r3
    2124:	e7f7      	b.n	2116 <_read+0x26>
	for (; len > 0; --len) {
    2126:	4680      	mov	r8, r0
    2128:	e7f5      	b.n	2116 <_read+0x26>
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	20000458 	.word	0x20000458
    2130:	20000450 	.word	0x20000450

00002134 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2134:	b5f0      	push	{r4, r5, r6, r7, lr}
    2136:	46c6      	mov	lr, r8
    2138:	b500      	push	{lr}
    213a:	000e      	movs	r6, r1
    213c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    213e:	3801      	subs	r0, #1
    2140:	2802      	cmp	r0, #2
    2142:	d810      	bhi.n	2166 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2144:	2a00      	cmp	r2, #0
    2146:	d011      	beq.n	216c <_write+0x38>
    2148:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    214a:	4b0c      	ldr	r3, [pc, #48]	; (217c <_write+0x48>)
    214c:	4698      	mov	r8, r3
    214e:	4f0c      	ldr	r7, [pc, #48]	; (2180 <_write+0x4c>)
    2150:	4643      	mov	r3, r8
    2152:	6818      	ldr	r0, [r3, #0]
    2154:	5d31      	ldrb	r1, [r6, r4]
    2156:	683b      	ldr	r3, [r7, #0]
    2158:	4798      	blx	r3
    215a:	2800      	cmp	r0, #0
    215c:	db08      	blt.n	2170 <_write+0x3c>
			return -1;
		}
		++nChars;
    215e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2160:	42a5      	cmp	r5, r4
    2162:	d1f5      	bne.n	2150 <_write+0x1c>
    2164:	e006      	b.n	2174 <_write+0x40>
		return -1;
    2166:	2401      	movs	r4, #1
    2168:	4264      	negs	r4, r4
    216a:	e003      	b.n	2174 <_write+0x40>
	for (; len != 0; --len) {
    216c:	0014      	movs	r4, r2
    216e:	e001      	b.n	2174 <_write+0x40>
			return -1;
    2170:	2401      	movs	r4, #1
    2172:	4264      	negs	r4, r4
	}
	return nChars;
}
    2174:	0020      	movs	r0, r4
    2176:	bc04      	pop	{r2}
    2178:	4690      	mov	r8, r2
    217a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    217c:	20000458 	.word	0x20000458
    2180:	20000454 	.word	0x20000454

00002184 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2184:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2186:	4a06      	ldr	r2, [pc, #24]	; (21a0 <_sbrk+0x1c>)
    2188:	6812      	ldr	r2, [r2, #0]
    218a:	2a00      	cmp	r2, #0
    218c:	d004      	beq.n	2198 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    218e:	4a04      	ldr	r2, [pc, #16]	; (21a0 <_sbrk+0x1c>)
    2190:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2192:	18c3      	adds	r3, r0, r3
    2194:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2196:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2198:	4902      	ldr	r1, [pc, #8]	; (21a4 <_sbrk+0x20>)
    219a:	4a01      	ldr	r2, [pc, #4]	; (21a0 <_sbrk+0x1c>)
    219c:	6011      	str	r1, [r2, #0]
    219e:	e7f6      	b.n	218e <_sbrk+0xa>
    21a0:	20000148 	.word	0x20000148
    21a4:	20004d00 	.word	0x20004d00

000021a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    21a8:	2001      	movs	r0, #1
    21aa:	4240      	negs	r0, r0
    21ac:	4770      	bx	lr

000021ae <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    21ae:	2380      	movs	r3, #128	; 0x80
    21b0:	019b      	lsls	r3, r3, #6
    21b2:	604b      	str	r3, [r1, #4]

	return 0;
}
    21b4:	2000      	movs	r0, #0
    21b6:	4770      	bx	lr

000021b8 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    21b8:	2000      	movs	r0, #0
    21ba:	4770      	bx	lr

000021bc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    21bc:	b570      	push	{r4, r5, r6, lr}
    21be:	b082      	sub	sp, #8
    21c0:	0005      	movs	r5, r0
    21c2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    21c4:	2200      	movs	r2, #0
    21c6:	466b      	mov	r3, sp
    21c8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    21ca:	4c06      	ldr	r4, [pc, #24]	; (21e4 <usart_serial_getchar+0x28>)
    21cc:	466b      	mov	r3, sp
    21ce:	1d99      	adds	r1, r3, #6
    21d0:	0028      	movs	r0, r5
    21d2:	47a0      	blx	r4
    21d4:	2800      	cmp	r0, #0
    21d6:	d1f9      	bne.n	21cc <usart_serial_getchar+0x10>

	*c = temp;
    21d8:	466b      	mov	r3, sp
    21da:	3306      	adds	r3, #6
    21dc:	881b      	ldrh	r3, [r3, #0]
    21de:	7033      	strb	r3, [r6, #0]
}
    21e0:	b002      	add	sp, #8
    21e2:	bd70      	pop	{r4, r5, r6, pc}
    21e4:	00001051 	.word	0x00001051

000021e8 <usart_serial_putchar>:
{
    21e8:	b570      	push	{r4, r5, r6, lr}
    21ea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    21ec:	b28c      	uxth	r4, r1
    21ee:	4e03      	ldr	r6, [pc, #12]	; (21fc <usart_serial_putchar+0x14>)
    21f0:	0021      	movs	r1, r4
    21f2:	0028      	movs	r0, r5
    21f4:	47b0      	blx	r6
    21f6:	2800      	cmp	r0, #0
    21f8:	d1fa      	bne.n	21f0 <usart_serial_putchar+0x8>
}
    21fa:	bd70      	pop	{r4, r5, r6, pc}
    21fc:	00001025 	.word	0x00001025

00002200 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    2200:	b510      	push	{r4, lr}
    2202:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2204:	466b      	mov	r3, sp
    2206:	1ddc      	adds	r4, r3, #7
    2208:	2201      	movs	r2, #1
    220a:	0021      	movs	r1, r4
    220c:	480f      	ldr	r0, [pc, #60]	; (224c <USART_HOST_ISR_VECT+0x4c>)
    220e:	4b10      	ldr	r3, [pc, #64]	; (2250 <USART_HOST_ISR_VECT+0x50>)
    2210:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2212:	b672      	cpsid	i
    2214:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    2218:	2200      	movs	r2, #0
    221a:	4b0e      	ldr	r3, [pc, #56]	; (2254 <USART_HOST_ISR_VECT+0x54>)
    221c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    221e:	4b0e      	ldr	r3, [pc, #56]	; (2258 <USART_HOST_ISR_VECT+0x58>)
    2220:	781b      	ldrb	r3, [r3, #0]
    2222:	7821      	ldrb	r1, [r4, #0]
    2224:	4a0d      	ldr	r2, [pc, #52]	; (225c <USART_HOST_ISR_VECT+0x5c>)
    2226:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    2228:	2b9b      	cmp	r3, #155	; 0x9b
    222a:	d00a      	beq.n	2242 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    222c:	3301      	adds	r3, #1
    222e:	4a0a      	ldr	r2, [pc, #40]	; (2258 <USART_HOST_ISR_VECT+0x58>)
    2230:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    2232:	2201      	movs	r2, #1
    2234:	4b07      	ldr	r3, [pc, #28]	; (2254 <USART_HOST_ISR_VECT+0x54>)
    2236:	701a      	strb	r2, [r3, #0]
    2238:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    223c:	b662      	cpsie	i
}
    223e:	b002      	add	sp, #8
    2240:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    2242:	2200      	movs	r2, #0
    2244:	4b04      	ldr	r3, [pc, #16]	; (2258 <USART_HOST_ISR_VECT+0x58>)
    2246:	701a      	strb	r2, [r3, #0]
    2248:	e7f3      	b.n	2232 <USART_HOST_ISR_VECT+0x32>
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	2000014c 	.word	0x2000014c
    2250:	00001181 	.word	0x00001181
    2254:	20000008 	.word	0x20000008
    2258:	2000021d 	.word	0x2000021d
    225c:	20000180 	.word	0x20000180

00002260 <sio2host_init>:
{
    2260:	b5f0      	push	{r4, r5, r6, r7, lr}
    2262:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2264:	2380      	movs	r3, #128	; 0x80
    2266:	05db      	lsls	r3, r3, #23
    2268:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    226a:	2300      	movs	r3, #0
    226c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    226e:	22ff      	movs	r2, #255	; 0xff
    2270:	4669      	mov	r1, sp
    2272:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2274:	2200      	movs	r2, #0
    2276:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2278:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    227a:	2401      	movs	r4, #1
    227c:	2124      	movs	r1, #36	; 0x24
    227e:	4668      	mov	r0, sp
    2280:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2282:	3101      	adds	r1, #1
    2284:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2286:	3101      	adds	r1, #1
    2288:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    228a:	3101      	adds	r1, #1
    228c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    228e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2290:	3105      	adds	r1, #5
    2292:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2294:	3101      	adds	r1, #1
    2296:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2298:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    229a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    229c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    229e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    22a0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    22a2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    22a4:	2313      	movs	r3, #19
    22a6:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    22a8:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    22aa:	2380      	movs	r3, #128	; 0x80
    22ac:	035b      	lsls	r3, r3, #13
    22ae:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    22b0:	4b2f      	ldr	r3, [pc, #188]	; (2370 <sio2host_init+0x110>)
    22b2:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    22b4:	4b2f      	ldr	r3, [pc, #188]	; (2374 <sio2host_init+0x114>)
    22b6:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    22b8:	2301      	movs	r3, #1
    22ba:	425b      	negs	r3, r3
    22bc:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    22be:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    22c0:	2396      	movs	r3, #150	; 0x96
    22c2:	021b      	lsls	r3, r3, #8
    22c4:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    22c6:	4d2c      	ldr	r5, [pc, #176]	; (2378 <sio2host_init+0x118>)
    22c8:	4b2c      	ldr	r3, [pc, #176]	; (237c <sio2host_init+0x11c>)
    22ca:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    22cc:	4a2c      	ldr	r2, [pc, #176]	; (2380 <sio2host_init+0x120>)
    22ce:	4b2d      	ldr	r3, [pc, #180]	; (2384 <sio2host_init+0x124>)
    22d0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    22d2:	4a2d      	ldr	r2, [pc, #180]	; (2388 <sio2host_init+0x128>)
    22d4:	4b2d      	ldr	r3, [pc, #180]	; (238c <sio2host_init+0x12c>)
    22d6:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    22d8:	466a      	mov	r2, sp
    22da:	492d      	ldr	r1, [pc, #180]	; (2390 <sio2host_init+0x130>)
    22dc:	0028      	movs	r0, r5
    22de:	4b2d      	ldr	r3, [pc, #180]	; (2394 <sio2host_init+0x134>)
    22e0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    22e2:	4f2d      	ldr	r7, [pc, #180]	; (2398 <sio2host_init+0x138>)
    22e4:	683b      	ldr	r3, [r7, #0]
    22e6:	6898      	ldr	r0, [r3, #8]
    22e8:	2100      	movs	r1, #0
    22ea:	4e2c      	ldr	r6, [pc, #176]	; (239c <sio2host_init+0x13c>)
    22ec:	47b0      	blx	r6
	setbuf(stdin, NULL);
    22ee:	683b      	ldr	r3, [r7, #0]
    22f0:	6858      	ldr	r0, [r3, #4]
    22f2:	2100      	movs	r1, #0
    22f4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    22f6:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    22f8:	0030      	movs	r0, r6
    22fa:	4b29      	ldr	r3, [pc, #164]	; (23a0 <sio2host_init+0x140>)
    22fc:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    22fe:	231f      	movs	r3, #31
    2300:	4018      	ands	r0, r3
    2302:	4084      	lsls	r4, r0
    2304:	4b27      	ldr	r3, [pc, #156]	; (23a4 <sio2host_init+0x144>)
    2306:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2308:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    230a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    230c:	2b00      	cmp	r3, #0
    230e:	d1fc      	bne.n	230a <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2310:	6833      	ldr	r3, [r6, #0]
    2312:	2202      	movs	r2, #2
    2314:	4313      	orrs	r3, r2
    2316:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2318:	4b17      	ldr	r3, [pc, #92]	; (2378 <sio2host_init+0x118>)
    231a:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    231c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    231e:	2a00      	cmp	r2, #0
    2320:	d1fc      	bne.n	231c <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    2322:	6859      	ldr	r1, [r3, #4]
    2324:	2280      	movs	r2, #128	; 0x80
    2326:	0252      	lsls	r2, r2, #9
    2328:	430a      	orrs	r2, r1
    232a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    232c:	2101      	movs	r1, #1
    232e:	4a12      	ldr	r2, [pc, #72]	; (2378 <sio2host_init+0x118>)
    2330:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    2332:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2334:	2a00      	cmp	r2, #0
    2336:	d1fc      	bne.n	2332 <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    2338:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    233a:	2a00      	cmp	r2, #0
    233c:	d1fc      	bne.n	2338 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    233e:	6859      	ldr	r1, [r3, #4]
    2340:	2280      	movs	r2, #128	; 0x80
    2342:	0292      	lsls	r2, r2, #10
    2344:	430a      	orrs	r2, r1
    2346:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2348:	2101      	movs	r1, #1
    234a:	4a0b      	ldr	r2, [pc, #44]	; (2378 <sio2host_init+0x118>)
    234c:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    234e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2350:	2a00      	cmp	r2, #0
    2352:	d1fc      	bne.n	234e <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    2354:	4914      	ldr	r1, [pc, #80]	; (23a8 <sio2host_init+0x148>)
    2356:	2000      	movs	r0, #0
    2358:	4b14      	ldr	r3, [pc, #80]	; (23ac <sio2host_init+0x14c>)
    235a:	4798      	blx	r3
    235c:	2204      	movs	r2, #4
    235e:	4b0c      	ldr	r3, [pc, #48]	; (2390 <sio2host_init+0x130>)
    2360:	759a      	strb	r2, [r3, #22]
    2362:	32fd      	adds	r2, #253	; 0xfd
    2364:	32ff      	adds	r2, #255	; 0xff
    2366:	4b0f      	ldr	r3, [pc, #60]	; (23a4 <sio2host_init+0x144>)
    2368:	601a      	str	r2, [r3, #0]
}
    236a:	b011      	add	sp, #68	; 0x44
    236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	00040003 	.word	0x00040003
    2374:	00050003 	.word	0x00050003
    2378:	2000014c 	.word	0x2000014c
    237c:	20000458 	.word	0x20000458
    2380:	000021e9 	.word	0x000021e9
    2384:	20000454 	.word	0x20000454
    2388:	000021bd 	.word	0x000021bd
    238c:	20000450 	.word	0x20000450
    2390:	42000800 	.word	0x42000800
    2394:	00000ce1 	.word	0x00000ce1
    2398:	20000088 	.word	0x20000088
    239c:	00009309 	.word	0x00009309
    23a0:	00000899 	.word	0x00000899
    23a4:	e000e100 	.word	0xe000e100
    23a8:	00002201 	.word	0x00002201
    23ac:	0000085d 	.word	0x0000085d

000023b0 <sio2host_tx>:
{
    23b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23b2:	b083      	sub	sp, #12
    23b4:	0006      	movs	r6, r0
    23b6:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    23b8:	466b      	mov	r3, sp
    23ba:	889d      	ldrh	r5, [r3, #4]
    23bc:	4c05      	ldr	r4, [pc, #20]	; (23d4 <sio2host_tx+0x24>)
    23be:	4f06      	ldr	r7, [pc, #24]	; (23d8 <sio2host_tx+0x28>)
    23c0:	002a      	movs	r2, r5
    23c2:	0031      	movs	r1, r6
    23c4:	0020      	movs	r0, r4
    23c6:	47b8      	blx	r7
	} while (status != STATUS_OK);
    23c8:	2800      	cmp	r0, #0
    23ca:	d1f9      	bne.n	23c0 <sio2host_tx+0x10>
}
    23cc:	9801      	ldr	r0, [sp, #4]
    23ce:	b003      	add	sp, #12
    23d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23d2:	46c0      	nop			; (mov r8, r8)
    23d4:	2000014c 	.word	0x2000014c
    23d8:	000010c1 	.word	0x000010c1

000023dc <sio2host_rx>:
{
    23dc:	b570      	push	{r4, r5, r6, lr}
    23de:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    23e0:	4b1f      	ldr	r3, [pc, #124]	; (2460 <sio2host_rx+0x84>)
    23e2:	781c      	ldrb	r4, [r3, #0]
    23e4:	4b1f      	ldr	r3, [pc, #124]	; (2464 <sio2host_rx+0x88>)
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	429c      	cmp	r4, r3
    23ea:	d31e      	bcc.n	242a <sio2host_rx+0x4e>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    23ec:	1ae3      	subs	r3, r4, r3
    23ee:	481e      	ldr	r0, [pc, #120]	; (2468 <sio2host_rx+0x8c>)
    23f0:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    23f2:	4b1d      	ldr	r3, [pc, #116]	; (2468 <sio2host_rx+0x8c>)
    23f4:	7818      	ldrb	r0, [r3, #0]
    23f6:	2800      	cmp	r0, #0
    23f8:	d030      	beq.n	245c <sio2host_rx+0x80>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    23fa:	289b      	cmp	r0, #155	; 0x9b
    23fc:	d91b      	bls.n	2436 <sio2host_rx+0x5a>
		serial_rx_buf_head = serial_rx_buf_tail;
    23fe:	4b19      	ldr	r3, [pc, #100]	; (2464 <sio2host_rx+0x88>)
    2400:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    2402:	209c      	movs	r0, #156	; 0x9c
    2404:	4b18      	ldr	r3, [pc, #96]	; (2468 <sio2host_rx+0x8c>)
    2406:	7018      	strb	r0, [r3, #0]
    2408:	1c08      	adds	r0, r1, #0
    240a:	299c      	cmp	r1, #156	; 0x9c
    240c:	d901      	bls.n	2412 <sio2host_rx+0x36>
    240e:	4b17      	ldr	r3, [pc, #92]	; (246c <sio2host_rx+0x90>)
    2410:	7818      	ldrb	r0, [r3, #0]
    2412:	b2c0      	uxtb	r0, r0
	while (max_length > 0) {
    2414:	2800      	cmp	r0, #0
    2416:	d021      	beq.n	245c <sio2host_rx+0x80>
    2418:	4b12      	ldr	r3, [pc, #72]	; (2464 <sio2host_rx+0x88>)
    241a:	781b      	ldrb	r3, [r3, #0]
    241c:	1e44      	subs	r4, r0, #1
    241e:	b2e4      	uxtb	r4, r4
    2420:	3401      	adds	r4, #1
    2422:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    2424:	4d12      	ldr	r5, [pc, #72]	; (2470 <sio2host_rx+0x94>)
			serial_rx_buf_head = 0;
    2426:	2600      	movs	r6, #0
    2428:	e00e      	b.n	2448 <sio2host_rx+0x6c>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    242a:	0020      	movs	r0, r4
    242c:	3864      	subs	r0, #100	; 0x64
    242e:	1ac3      	subs	r3, r0, r3
    2430:	480d      	ldr	r0, [pc, #52]	; (2468 <sio2host_rx+0x8c>)
    2432:	7003      	strb	r3, [r0, #0]
    2434:	e7dd      	b.n	23f2 <sio2host_rx+0x16>
    2436:	1c03      	adds	r3, r0, #0
    2438:	4288      	cmp	r0, r1
    243a:	d900      	bls.n	243e <sio2host_rx+0x62>
    243c:	1c0b      	adds	r3, r1, #0
    243e:	b2d8      	uxtb	r0, r3
    2440:	e7e8      	b.n	2414 <sio2host_rx+0x38>
			serial_rx_buf_head = 0;
    2442:	0033      	movs	r3, r6
	while (max_length > 0) {
    2444:	4294      	cmp	r4, r2
    2446:	d007      	beq.n	2458 <sio2host_rx+0x7c>
		*data = serial_rx_buf[serial_rx_buf_head];
    2448:	5ce9      	ldrb	r1, [r5, r3]
    244a:	7011      	strb	r1, [r2, #0]
		data++;
    244c:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    244e:	2b9b      	cmp	r3, #155	; 0x9b
    2450:	d0f7      	beq.n	2442 <sio2host_rx+0x66>
			serial_rx_buf_head++;
    2452:	3301      	adds	r3, #1
    2454:	b2db      	uxtb	r3, r3
    2456:	e7f5      	b.n	2444 <sio2host_rx+0x68>
    2458:	4a02      	ldr	r2, [pc, #8]	; (2464 <sio2host_rx+0x88>)
    245a:	7013      	strb	r3, [r2, #0]
}
    245c:	bd70      	pop	{r4, r5, r6, pc}
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	2000021d 	.word	0x2000021d
    2464:	2000021c 	.word	0x2000021c
    2468:	2000021e 	.word	0x2000021e
    246c:	0000a1e8 	.word	0x0000a1e8
    2470:	20000180 	.word	0x20000180

00002474 <sio2host_putchar>:
{
    2474:	b500      	push	{lr}
    2476:	b083      	sub	sp, #12
    2478:	466b      	mov	r3, sp
    247a:	71d8      	strb	r0, [r3, #7]
    247c:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    247e:	2101      	movs	r1, #1
    2480:	0018      	movs	r0, r3
    2482:	4b02      	ldr	r3, [pc, #8]	; (248c <sio2host_putchar+0x18>)
    2484:	4798      	blx	r3
}
    2486:	b003      	add	sp, #12
    2488:	bd00      	pop	{pc}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	000023b1 	.word	0x000023b1

00002490 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    2490:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    2492:	7802      	ldrb	r2, [r0, #0]
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <MiMAC_SetAltAddress+0x28>)
    2496:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    2498:	7842      	ldrb	r2, [r0, #1]
    249a:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    249c:	780a      	ldrb	r2, [r1, #0]
    249e:	4c07      	ldr	r4, [pc, #28]	; (24bc <MiMAC_SetAltAddress+0x2c>)
    24a0:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    24a2:	784a      	ldrb	r2, [r1, #1]
    24a4:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    24a6:	8818      	ldrh	r0, [r3, #0]
    24a8:	4b05      	ldr	r3, [pc, #20]	; (24c0 <MiMAC_SetAltAddress+0x30>)
    24aa:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    24ac:	8820      	ldrh	r0, [r4, #0]
    24ae:	4b05      	ldr	r3, [pc, #20]	; (24c4 <MiMAC_SetAltAddress+0x34>)
    24b0:	4798      	blx	r3
	return true;
}
    24b2:	2001      	movs	r0, #1
    24b4:	bd10      	pop	{r4, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	20000460 	.word	0x20000460
    24bc:	20000478 	.word	0x20000478
    24c0:	00002db1 	.word	0x00002db1
    24c4:	00002d91 	.word	0x00002d91

000024c8 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    24c8:	b510      	push	{r4, lr}
    switch(id)
    24ca:	2800      	cmp	r0, #0
    24cc:	d109      	bne.n	24e2 <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    24ce:	780b      	ldrb	r3, [r1, #0]
    24d0:	2b1a      	cmp	r3, #26
    24d2:	d807      	bhi.n	24e4 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    24d4:	4a04      	ldr	r2, [pc, #16]	; (24e8 <MiMAC_Set+0x20>)
    24d6:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    24d8:	0018      	movs	r0, r3
    24da:	4b04      	ldr	r3, [pc, #16]	; (24ec <MiMAC_Set+0x24>)
    24dc:	4798      	blx	r3
          return true;
    24de:	2001      	movs	r0, #1
    24e0:	e000      	b.n	24e4 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    24e2:	2000      	movs	r0, #0
}
    24e4:	bd10      	pop	{r4, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	2000047a 	.word	0x2000047a
    24ec:	00002d6d 	.word	0x00002d6d

000024f0 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    24f0:	b530      	push	{r4, r5, lr}
    24f2:	b083      	sub	sp, #12
    24f4:	466c      	mov	r4, sp
    24f6:	9000      	str	r0, [sp, #0]
    24f8:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    24fa:	4b10      	ldr	r3, [pc, #64]	; (253c <MiMAC_Init+0x4c>)
    24fc:	4798      	blx	r3
	MACInitParams = initValue;
    24fe:	4d10      	ldr	r5, [pc, #64]	; (2540 <MiMAC_Init+0x50>)
    2500:	002b      	movs	r3, r5
    2502:	cc06      	ldmia	r4!, {r1, r2}
    2504:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    2506:	4b0f      	ldr	r3, [pc, #60]	; (2544 <MiMAC_Init+0x54>)
    2508:	4798      	blx	r3
    250a:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    250c:	2001      	movs	r0, #1
    250e:	4b0e      	ldr	r3, [pc, #56]	; (2548 <MiMAC_Init+0x58>)
    2510:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    2512:	4b0e      	ldr	r3, [pc, #56]	; (254c <MiMAC_Init+0x5c>)
    2514:	701c      	strb	r4, [r3, #0]

	MACCurrentChannel = 11;
    2516:	220b      	movs	r2, #11
    2518:	4b0d      	ldr	r3, [pc, #52]	; (2550 <MiMAC_Init+0x60>)
    251a:	701a      	strb	r2, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    251c:	6868      	ldr	r0, [r5, #4]
    251e:	4b0d      	ldr	r3, [pc, #52]	; (2554 <MiMAC_Init+0x64>)
    2520:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    2522:	4b0d      	ldr	r3, [pc, #52]	; (2558 <MiMAC_Init+0x68>)
    2524:	2200      	movs	r2, #0
    2526:	701a      	strb	r2, [r3, #0]
    2528:	217f      	movs	r1, #127	; 0x7f
    252a:	545a      	strb	r2, [r3, r1]
    252c:	317f      	adds	r1, #127	; 0x7f
    252e:	545a      	strb	r2, [r3, r1]
    2530:	217e      	movs	r1, #126	; 0x7e
    2532:	31ff      	adds	r1, #255	; 0xff
    2534:	545a      	strb	r2, [r3, r1]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    2536:	2001      	movs	r0, #1
    2538:	b003      	add	sp, #12
    253a:	bd30      	pop	{r4, r5, pc}
    253c:	00002d0d 	.word	0x00002d0d
    2540:	20000468 	.word	0x20000468
    2544:	00002cbd 	.word	0x00002cbd
    2548:	00002d59 	.word	0x00002d59
    254c:	2000045c 	.word	0x2000045c
    2550:	2000047a 	.word	0x2000047a
    2554:	00002e61 	.word	0x00002e61
    2558:	2000047c 	.word	0x2000047c

0000255c <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    255c:	b5f0      	push	{r4, r5, r6, r7, lr}
    255e:	46de      	mov	lr, fp
    2560:	4657      	mov	r7, sl
    2562:	464e      	mov	r6, r9
    2564:	4645      	mov	r5, r8
    2566:	b5e0      	push	{r5, r6, r7, lr}
    2568:	b0a5      	sub	sp, #148	; 0x94
    256a:	9001      	str	r0, [sp, #4]
    256c:	000e      	movs	r6, r1
    256e:	9102      	str	r1, [sp, #8]
    2570:	1c11      	adds	r1, r2, #0
    2572:	0014      	movs	r4, r2
    2574:	0a24      	lsrs	r4, r4, #8
    2576:	9203      	str	r2, [sp, #12]
    2578:	9300      	str	r3, [sp, #0]
    257a:	aa2e      	add	r2, sp, #184	; 0xb8
    257c:	7815      	ldrb	r5, [r2, #0]
    257e:	aa2f      	add	r2, sp, #188	; 0xbc
    2580:	7813      	ldrb	r3, [r2, #0]
    2582:	469b      	mov	fp, r3
    2584:	b2c7      	uxtb	r7, r0
    2586:	06b8      	lsls	r0, r7, #26
    2588:	0fc3      	lsrs	r3, r0, #31
    258a:	4699      	mov	r9, r3
    258c:	b2c9      	uxtb	r1, r1
    258e:	b2e2      	uxtb	r2, r4
	uint8_t frameControl = 0;
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif

    if (transParam.flags.bits.broadcast)
    2590:	077b      	lsls	r3, r7, #29
    2592:	d500      	bpl.n	2596 <MiMAC_SendPacket+0x3a>
    {
        transParam.altDestAddr = true;
    2594:	2101      	movs	r1, #1
        transParam.altSrcAddr = false;
    }
   #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    2596:	2303      	movs	r3, #3
    2598:	403b      	ands	r3, r7
    259a:	2b01      	cmp	r3, #1
    259c:	d03b      	beq.n	2616 <MiMAC_SendPacket+0xba>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    259e:	425c      	negs	r4, r3
    25a0:	415c      	adcs	r4, r3
        frameControl = 0x03;
    25a2:	b2e0      	uxtb	r0, r4
    25a4:	4682      	mov	sl, r0
        frameControl = 0x01;
    }

    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    25a6:	ac01      	add	r4, sp, #4
    25a8:	8964      	ldrh	r4, [r4, #10]
    25aa:	487b      	ldr	r0, [pc, #492]	; (2798 <MiMAC_SendPacket+0x23c>)
    25ac:	8800      	ldrh	r0, [r0, #0]
    25ae:	42a0      	cmp	r0, r4
    25b0:	d034      	beq.n	261c <MiMAC_SendPacket+0xc0>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    25b2:	2400      	movs	r4, #0
        headerLength = 7;
    25b4:	2007      	movs	r0, #7
    25b6:	4684      	mov	ip, r0
    }
#endif

    if (transParam.altDestAddr)
    25b8:	4688      	mov	r8, r1
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    25ba:	4661      	mov	r1, ip
    25bc:	3108      	adds	r1, #8
    if (transParam.altDestAddr)
    25be:	4640      	mov	r0, r8
    25c0:	2800      	cmp	r0, #0
    25c2:	d000      	beq.n	25c6 <MiMAC_SendPacket+0x6a>
        headerLength += 2;
    25c4:	3906      	subs	r1, #6
    }

    if (transParam.altSrcAddr)
    25c6:	2a00      	cmp	r2, #0
    25c8:	d037      	beq.n	263a <MiMAC_SendPacket+0xde>
    {
        headerLength += 2;
    25ca:	3102      	adds	r1, #2
    25cc:	b2c9      	uxtb	r1, r1
    25ce:	468c      	mov	ip, r1
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    25d0:	2124      	movs	r1, #36	; 0x24
    25d2:	4039      	ands	r1, r7
    25d4:	2920      	cmp	r1, #32
    25d6:	d034      	beq.n	2642 <MiMAC_SendPacket+0xe6>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    25d8:	2b03      	cmp	r3, #3
    25da:	d036      	beq.n	264a <MiMAC_SendPacket+0xee>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    25dc:	a904      	add	r1, sp, #16
    25de:	44ac      	add	ip, r5
    25e0:	4663      	mov	r3, ip
    25e2:	700b      	strb	r3, [r1, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    25e4:	4653      	mov	r3, sl
    25e6:	704b      	strb	r3, [r1, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    25e8:	a901      	add	r1, sp, #4
    25ea:	464b      	mov	r3, r9
    25ec:	015b      	lsls	r3, r3, #5
    25ee:	469c      	mov	ip, r3
    25f0:	7808      	ldrb	r0, [r1, #0]
    25f2:	2320      	movs	r3, #32
    25f4:	4398      	bics	r0, r3
    25f6:	4663      	mov	r3, ip
    25f8:	4318      	orrs	r0, r3
    25fa:	7008      	strb	r0, [r1, #0]
    25fc:	4684      	mov	ip, r0
    25fe:	43c1      	mvns	r1, r0
    2600:	078b      	lsls	r3, r1, #30
    2602:	d02a      	beq.n	265a <MiMAC_SendPacket+0xfe>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    2604:	4643      	mov	r3, r8
    2606:	2b00      	cmp	r3, #0
    2608:	d049      	beq.n	269e <MiMAC_SendPacket+0x142>
    260a:	2a00      	cmp	r2, #0
    260c:	d02f      	beq.n	266e <MiMAC_SendPacket+0x112>
        {
			packet[loc++] = 0x88;
    260e:	2088      	movs	r0, #136	; 0x88
    2610:	a904      	add	r1, sp, #16
    2612:	7088      	strb	r0, [r1, #2]
    2614:	e02e      	b.n	2674 <MiMAC_SendPacket+0x118>
        frameControl = 0x03;
    2616:	2003      	movs	r0, #3
    2618:	4682      	mov	sl, r0
    261a:	e7c4      	b.n	25a6 <MiMAC_SendPacket+0x4a>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    261c:	485f      	ldr	r0, [pc, #380]	; (279c <MiMAC_SendPacket+0x240>)
    261e:	4284      	cmp	r4, r0
    2620:	d007      	beq.n	2632 <MiMAC_SendPacket+0xd6>
        frameControl |= 0x40;
    2622:	2440      	movs	r4, #64	; 0x40
    2624:	4650      	mov	r0, sl
    2626:	4320      	orrs	r0, r4
    2628:	4682      	mov	sl, r0
        IntraPAN = true;
    262a:	3c3f      	subs	r4, #63	; 0x3f
        headerLength = 5;
    262c:	2005      	movs	r0, #5
    262e:	4684      	mov	ip, r0
        IntraPAN = true;
    2630:	e7c2      	b.n	25b8 <MiMAC_SendPacket+0x5c>
        IntraPAN = false;
    2632:	2400      	movs	r4, #0
        headerLength = 7;
    2634:	2007      	movs	r0, #7
    2636:	4684      	mov	ip, r0
    2638:	e7be      	b.n	25b8 <MiMAC_SendPacket+0x5c>
        headerLength += 8;
    263a:	3108      	adds	r1, #8
    263c:	b2c9      	uxtb	r1, r1
    263e:	468c      	mov	ip, r1
    2640:	e7c6      	b.n	25d0 <MiMAC_SendPacket+0x74>
        frameControl |= 0x20;
    2642:	4650      	mov	r0, sl
    2644:	4308      	orrs	r0, r1
    2646:	4682      	mov	sl, r0
    2648:	e7c6      	b.n	25d8 <MiMAC_SendPacket+0x7c>
        transParam.altSrcAddr = true;
    264a:	2201      	movs	r2, #1
        transParam.flags.bits.ackReq = false;
    264c:	2300      	movs	r3, #0
    264e:	4699      	mov	r9, r3
        IntraPAN = false;
    2650:	2400      	movs	r4, #0
        frameControl = 0x00;
    2652:	469a      	mov	sl, r3
        headerLength = 7;
    2654:	3307      	adds	r3, #7
    2656:	469c      	mov	ip, r3
    2658:	e7c0      	b.n	25dc <MiMAC_SendPacket+0x80>
		packet[loc++] = 0x80;
    265a:	a904      	add	r1, sp, #16
    265c:	2080      	movs	r0, #128	; 0x80
    265e:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    2660:	4e4f      	ldr	r6, [pc, #316]	; (27a0 <MiMAC_SendPacket+0x244>)
    2662:	7830      	ldrb	r0, [r6, #0]
    2664:	1c43      	adds	r3, r0, #1
    2666:	7033      	strb	r3, [r6, #0]
    2668:	70c8      	strb	r0, [r1, #3]
    266a:	2104      	movs	r1, #4
    266c:	e02e      	b.n	26cc <MiMAC_SendPacket+0x170>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    266e:	20c8      	movs	r0, #200	; 0xc8
    2670:	a904      	add	r1, sp, #16
    2672:	7088      	strb	r0, [r1, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    2674:	494a      	ldr	r1, [pc, #296]	; (27a0 <MiMAC_SendPacket+0x244>)
    2676:	7808      	ldrb	r0, [r1, #0]
    2678:	1c43      	adds	r3, r0, #1
    267a:	700b      	strb	r3, [r1, #0]
    267c:	a904      	add	r1, sp, #16
    267e:	70c8      	strb	r0, [r1, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    2680:	a801      	add	r0, sp, #4
    2682:	7a83      	ldrb	r3, [r0, #10]
    2684:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    2686:	7ac0      	ldrb	r0, [r0, #11]
    2688:	7148      	strb	r0, [r1, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    268a:	4663      	mov	r3, ip
    268c:	075b      	lsls	r3, r3, #29
    268e:	d418      	bmi.n	26c2 <MiMAC_SendPacket+0x166>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    2690:	a904      	add	r1, sp, #16
    2692:	7830      	ldrb	r0, [r6, #0]
    2694:	7188      	strb	r0, [r1, #6]
				packet[loc++] = transParam.DestAddress[1];
    2696:	7870      	ldrb	r0, [r6, #1]
    2698:	71c8      	strb	r0, [r1, #7]
    269a:	2108      	movs	r1, #8
    269c:	e016      	b.n	26cc <MiMAC_SendPacket+0x170>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    269e:	2a00      	cmp	r2, #0
    26a0:	d05c      	beq.n	275c <MiMAC_SendPacket+0x200>
			packet[loc++] = 0x8C;
    26a2:	a904      	add	r1, sp, #16
    26a4:	208c      	movs	r0, #140	; 0x8c
    26a6:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    26a8:	4b3d      	ldr	r3, [pc, #244]	; (27a0 <MiMAC_SendPacket+0x244>)
    26aa:	7818      	ldrb	r0, [r3, #0]
    26ac:	1c47      	adds	r7, r0, #1
    26ae:	701f      	strb	r7, [r3, #0]
    26b0:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    26b2:	ab01      	add	r3, sp, #4
    26b4:	7a98      	ldrb	r0, [r3, #10]
    26b6:	7108      	strb	r0, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    26b8:	7ad8      	ldrb	r0, [r3, #11]
    26ba:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    26bc:	4663      	mov	r3, ip
    26be:	075b      	lsls	r3, r3, #29
    26c0:	d560      	bpl.n	2784 <MiMAC_SendPacket+0x228>
			packet[loc++] = 0xFF;
    26c2:	a904      	add	r1, sp, #16
    26c4:	20ff      	movs	r0, #255	; 0xff
    26c6:	7188      	strb	r0, [r1, #6]
			packet[loc++] = 0xFF;
    26c8:	71c8      	strb	r0, [r1, #7]
    26ca:	2108      	movs	r1, #8
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    26cc:	2c00      	cmp	r4, #0
    26ce:	d109      	bne.n	26e4 <MiMAC_SendPacket+0x188>
    {
		packet[loc++] = MAC_PANID.v[0];
    26d0:	1c48      	adds	r0, r1, #1
    26d2:	b2c0      	uxtb	r0, r0
    26d4:	ac04      	add	r4, sp, #16
    26d6:	4e30      	ldr	r6, [pc, #192]	; (2798 <MiMAC_SendPacket+0x23c>)
    26d8:	7833      	ldrb	r3, [r6, #0]
    26da:	5463      	strb	r3, [r4, r1]
		packet[loc++] = MAC_PANID.v[1];
    26dc:	3102      	adds	r1, #2
    26de:	b2c9      	uxtb	r1, r1
    26e0:	7876      	ldrb	r6, [r6, #1]
    26e2:	5426      	strb	r6, [r4, r0]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    26e4:	2a00      	cmp	r2, #0
    26e6:	d02a      	beq.n	273e <MiMAC_SendPacket+0x1e2>
    {
		packet[loc++] = myNetworkAddress.v[0];
    26e8:	a804      	add	r0, sp, #16
    26ea:	4c2e      	ldr	r4, [pc, #184]	; (27a4 <MiMAC_SendPacket+0x248>)
    26ec:	7822      	ldrb	r2, [r4, #0]
    26ee:	5442      	strb	r2, [r0, r1]
		packet[loc++] = myNetworkAddress.v[1];
    26f0:	1c8a      	adds	r2, r1, #2
    26f2:	b2d2      	uxtb	r2, r2
		packet[loc++] = myNetworkAddress.v[0];
    26f4:	3101      	adds	r1, #1
		packet[loc++] = myNetworkAddress.v[1];
    26f6:	b2c9      	uxtb	r1, r1
    26f8:	7864      	ldrb	r4, [r4, #1]
    26fa:	5444      	strb	r4, [r0, r1]
#endif


#ifndef ENABLE_SECURITY
    // write the payload
    for (i = 0; i < MACPayloadLen; i++)
    26fc:	2d00      	cmp	r5, #0
    26fe:	d00a      	beq.n	2716 <MiMAC_SendPacket+0x1ba>
    2700:	9900      	ldr	r1, [sp, #0]
    2702:	1955      	adds	r5, r2, r5
    2704:	b2ed      	uxtb	r5, r5
    {
		packet[loc++] = MACPayload[i];
    2706:	ae04      	add	r6, sp, #16
    2708:	1c50      	adds	r0, r2, #1
    270a:	780c      	ldrb	r4, [r1, #0]
    270c:	54b4      	strb	r4, [r6, r2]
    270e:	3101      	adds	r1, #1
    2710:	b2c2      	uxtb	r2, r0
    for (i = 0; i < MACPayloadLen; i++)
    2712:	4295      	cmp	r5, r2
    2714:	d1f8      	bne.n	2708 <MiMAC_SendPacket+0x1ac>
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    2716:	4a24      	ldr	r2, [pc, #144]	; (27a8 <MiMAC_SendPacket+0x24c>)
    2718:	9b00      	ldr	r3, [sp, #0]
    271a:	6013      	str	r3, [r2, #0]
	dataConfCallback = ConfCallback;
    271c:	4b23      	ldr	r3, [pc, #140]	; (27ac <MiMAC_SendPacket+0x250>)
    271e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    2720:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    2722:	4b23      	ldr	r3, [pc, #140]	; (27b0 <MiMAC_SendPacket+0x254>)
    2724:	465a      	mov	r2, fp
    2726:	701a      	strb	r2, [r3, #0]

    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
    2728:	a804      	add	r0, sp, #16
    272a:	4b22      	ldr	r3, [pc, #136]	; (27b4 <MiMAC_SendPacket+0x258>)
    272c:	4798      	blx	r3
    return true;
}
    272e:	2001      	movs	r0, #1
    2730:	b025      	add	sp, #148	; 0x94
    2732:	bc3c      	pop	{r2, r3, r4, r5}
    2734:	4690      	mov	r8, r2
    2736:	4699      	mov	r9, r3
    2738:	46a2      	mov	sl, r4
    273a:	46ab      	mov	fp, r5
    273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			packet[loc++] = MACInitParams.PAddress[i];
    273e:	4a1e      	ldr	r2, [pc, #120]	; (27b8 <MiMAC_SendPacket+0x25c>)
    2740:	6850      	ldr	r0, [r2, #4]
    2742:	000b      	movs	r3, r1
    2744:	3308      	adds	r3, #8
    2746:	b2db      	uxtb	r3, r3
    2748:	ae04      	add	r6, sp, #16
    274a:	1c4a      	adds	r2, r1, #1
    274c:	b2d2      	uxtb	r2, r2
    274e:	7804      	ldrb	r4, [r0, #0]
    2750:	5474      	strb	r4, [r6, r1]
    2752:	3001      	adds	r0, #1
    2754:	0011      	movs	r1, r2
        for (i = 0; i < 8; i++)
    2756:	429a      	cmp	r2, r3
    2758:	d1f7      	bne.n	274a <MiMAC_SendPacket+0x1ee>
    275a:	e7cf      	b.n	26fc <MiMAC_SendPacket+0x1a0>
			packet[loc++] = 0xCC;
    275c:	a904      	add	r1, sp, #16
    275e:	20cc      	movs	r0, #204	; 0xcc
    2760:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    2762:	4b0f      	ldr	r3, [pc, #60]	; (27a0 <MiMAC_SendPacket+0x244>)
    2764:	4698      	mov	r8, r3
    2766:	7818      	ldrb	r0, [r3, #0]
    2768:	1c43      	adds	r3, r0, #1
    276a:	4699      	mov	r9, r3
    276c:	4643      	mov	r3, r8
    276e:	464f      	mov	r7, r9
    2770:	701f      	strb	r7, [r3, #0]
    2772:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    2774:	a801      	add	r0, sp, #4
    2776:	7a83      	ldrb	r3, [r0, #10]
    2778:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    277a:	7ac0      	ldrb	r0, [r0, #11]
    277c:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    277e:	4663      	mov	r3, ip
    2780:	075b      	lsls	r3, r3, #29
    2782:	d49e      	bmi.n	26c2 <MiMAC_SendPacket+0x166>
        headerLength = 7;
    2784:	2000      	movs	r0, #0
					packet[loc++] = transParam.DestAddress[i];
    2786:	ab04      	add	r3, sp, #16
    2788:	1819      	adds	r1, r3, r0
    278a:	5c33      	ldrb	r3, [r6, r0]
    278c:	718b      	strb	r3, [r1, #6]
    278e:	3001      	adds	r0, #1
                for (i = 0; i < 8; i++)
    2790:	2808      	cmp	r0, #8
    2792:	d1f8      	bne.n	2786 <MiMAC_SendPacket+0x22a>
					packet[loc++] = transParam.DestAddress[i];
    2794:	210e      	movs	r1, #14
    2796:	e799      	b.n	26cc <MiMAC_SendPacket+0x170>
    2798:	20000478 	.word	0x20000478
    279c:	0000ffff 	.word	0x0000ffff
    27a0:	2000045c 	.word	0x2000045c
    27a4:	20000460 	.word	0x20000460
    27a8:	20000228 	.word	0x20000228
    27ac:	20000220 	.word	0x20000220
    27b0:	20000224 	.word	0x20000224
    27b4:	00002c71 	.word	0x00002c71
    27b8:	20000468 	.word	0x20000468

000027bc <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    27bc:	4b04      	ldr	r3, [pc, #16]	; (27d0 <MiMAC_DiscardPacket+0x14>)
    27be:	781b      	ldrb	r3, [r3, #0]
    27c0:	2b03      	cmp	r3, #3
    27c2:	d804      	bhi.n	27ce <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    27c4:	01da      	lsls	r2, r3, #7
    27c6:	1ad3      	subs	r3, r2, r3
    27c8:	2100      	movs	r1, #0
    27ca:	4a02      	ldr	r2, [pc, #8]	; (27d4 <MiMAC_DiscardPacket+0x18>)
    27cc:	5499      	strb	r1, [r3, r2]
	}
}
    27ce:	4770      	bx	lr
    27d0:	20000009 	.word	0x20000009
    27d4:	2000047c 	.word	0x2000047c

000027d8 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    27d8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	BankIndex = 0xFF;
    27da:	22ff      	movs	r2, #255	; 0xff
    27dc:	4bcd      	ldr	r3, [pc, #820]	; (2b14 <MiMAC_ReceivedPacket+0x33c>)
    27de:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    27e0:	4bcd      	ldr	r3, [pc, #820]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d000      	beq.n	27ea <MiMAC_ReceivedPacket+0x12>
    27e8:	e1bd      	b.n	2b66 <MiMAC_ReceivedPacket+0x38e>
    27ea:	337f      	adds	r3, #127	; 0x7f
    27ec:	4aca      	ldr	r2, [pc, #808]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    27ee:	5cd3      	ldrb	r3, [r2, r3]
    27f0:	2b00      	cmp	r3, #0
    27f2:	d10b      	bne.n	280c <MiMAC_ReceivedPacket+0x34>
    27f4:	33fe      	adds	r3, #254	; 0xfe
    27f6:	5cd3      	ldrb	r3, [r2, r3]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d12e      	bne.n	285a <MiMAC_ReceivedPacket+0x82>
    27fc:	237e      	movs	r3, #126	; 0x7e
    27fe:	33ff      	adds	r3, #255	; 0xff
    2800:	5cd3      	ldrb	r3, [r2, r3]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
		#endif

		return true;
	}
	return false;
    2802:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    2804:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    2806:	2b00      	cmp	r3, #0
    2808:	d101      	bne.n	280e <MiMAC_ReceivedPacket+0x36>
}
    280a:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < BANK_SIZE; i++)
    280c:	2201      	movs	r2, #1
			BankIndex = i;
    280e:	4bc1      	ldr	r3, [pc, #772]	; (2b14 <MiMAC_ReceivedPacket+0x33c>)
    2810:	701a      	strb	r2, [r3, #0]
	return false;
    2812:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    2814:	2a03      	cmp	r2, #3
    2816:	d8f8      	bhi.n	280a <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    2818:	0010      	movs	r0, r2
    281a:	01d1      	lsls	r1, r2, #7
    281c:	1a89      	subs	r1, r1, r2
    281e:	4bbe      	ldr	r3, [pc, #760]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2820:	185b      	adds	r3, r3, r1
    2822:	785d      	ldrb	r5, [r3, #1]
    2824:	2440      	movs	r4, #64	; 0x40
    2826:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    2828:	49bc      	ldr	r1, [pc, #752]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    282a:	2400      	movs	r4, #0
    282c:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    282e:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    2830:	789b      	ldrb	r3, [r3, #2]
    2832:	2133      	movs	r1, #51	; 0x33
    2834:	438b      	bics	r3, r1
		switch (addrMode)
    2836:	b2d9      	uxtb	r1, r3
    2838:	2988      	cmp	r1, #136	; 0x88
    283a:	d100      	bne.n	283e <MiMAC_ReceivedPacket+0x66>
    283c:	e0c4      	b.n	29c8 <MiMAC_ReceivedPacket+0x1f0>
    283e:	d90e      	bls.n	285e <MiMAC_ReceivedPacket+0x86>
    2840:	b2d9      	uxtb	r1, r3
    2842:	29c8      	cmp	r1, #200	; 0xc8
    2844:	d046      	beq.n	28d4 <MiMAC_ReceivedPacket+0xfc>
    2846:	29cc      	cmp	r1, #204	; 0xcc
    2848:	d100      	bne.n	284c <MiMAC_ReceivedPacket+0x74>
    284a:	e08a      	b.n	2962 <MiMAC_ReceivedPacket+0x18a>
    284c:	298c      	cmp	r1, #140	; 0x8c
    284e:	d100      	bne.n	2852 <MiMAC_ReceivedPacket+0x7a>
    2850:	e104      	b.n	2a5c <MiMAC_ReceivedPacket+0x284>
			MiMAC_DiscardPacket();
    2852:	4bb3      	ldr	r3, [pc, #716]	; (2b20 <MiMAC_ReceivedPacket+0x348>)
    2854:	4798      	blx	r3
			return false;
    2856:	2000      	movs	r0, #0
    2858:	e7d7      	b.n	280a <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    285a:	2202      	movs	r2, #2
    285c:	e7d7      	b.n	280e <MiMAC_ReceivedPacket+0x36>
		switch (addrMode)
    285e:	2b08      	cmp	r3, #8
    2860:	d100      	bne.n	2864 <MiMAC_ReceivedPacket+0x8c>
    2862:	e131      	b.n	2ac8 <MiMAC_ReceivedPacket+0x2f0>
    2864:	2980      	cmp	r1, #128	; 0x80
    2866:	d1f4      	bne.n	2852 <MiMAC_ReceivedPacket+0x7a>
				MACRxPacket.flags.bits.broadcast = 1;
    2868:	4bac      	ldr	r3, [pc, #688]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    286a:	7819      	ldrb	r1, [r3, #0]
    286c:	2404      	movs	r4, #4
    286e:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2870:	2480      	movs	r4, #128	; 0x80
    2872:	4264      	negs	r4, r4
    2874:	4321      	orrs	r1, r4
    2876:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2878:	2101      	movs	r1, #1
    287a:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    287c:	4ca6      	ldr	r4, [pc, #664]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    287e:	01d1      	lsls	r1, r2, #7
    2880:	1a88      	subs	r0, r1, r2
    2882:	1821      	adds	r1, r4, r0
    2884:	790d      	ldrb	r5, [r1, #4]
    2886:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2888:	7949      	ldrb	r1, [r1, #5]
    288a:	7459      	strb	r1, [r3, #17]
    288c:	01d1      	lsls	r1, r2, #7
    288e:	1a8a      	subs	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    2890:	1d91      	adds	r1, r2, #6
    2892:	1909      	adds	r1, r1, r4
    2894:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    2896:	5d01      	ldrb	r1, [r0, r4]
    2898:	390b      	subs	r1, #11
    289a:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    289c:	3208      	adds	r2, #8
    289e:	1912      	adds	r2, r2, r4
    28a0:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    28a2:	4b9c      	ldr	r3, [pc, #624]	; (2b14 <MiMAC_ReceivedPacket+0x33c>)
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	01d9      	lsls	r1, r3, #7
    28a8:	1ac9      	subs	r1, r1, r3
    28aa:	4a9b      	ldr	r2, [pc, #620]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    28ac:	1852      	adds	r2, r2, r1
    28ae:	7851      	ldrb	r1, [r2, #1]
    28b0:	070a      	lsls	r2, r1, #28
    28b2:	d500      	bpl.n	28b6 <MiMAC_ReceivedPacket+0xde>
    28b4:	e129      	b.n	2b0a <MiMAC_ReceivedPacket+0x332>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    28b6:	2207      	movs	r2, #7
    28b8:	400a      	ands	r2, r1
    28ba:	2a01      	cmp	r2, #1
    28bc:	d100      	bne.n	28c0 <MiMAC_ReceivedPacket+0xe8>
    28be:	e131      	b.n	2b24 <MiMAC_ReceivedPacket+0x34c>
    28c0:	2a00      	cmp	r2, #0
    28c2:	d100      	bne.n	28c6 <MiMAC_ReceivedPacket+0xee>
    28c4:	e149      	b.n	2b5a <MiMAC_ReceivedPacket+0x382>
    28c6:	2a03      	cmp	r2, #3
    28c8:	d100      	bne.n	28cc <MiMAC_ReceivedPacket+0xf4>
    28ca:	e13e      	b.n	2b4a <MiMAC_ReceivedPacket+0x372>
			MiMAC_DiscardPacket();
    28cc:	4b94      	ldr	r3, [pc, #592]	; (2b20 <MiMAC_ReceivedPacket+0x348>)
    28ce:	4798      	blx	r3
			return false;
    28d0:	2000      	movs	r0, #0
    28d2:	e79a      	b.n	280a <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    28d4:	01d1      	lsls	r1, r2, #7
    28d6:	1a89      	subs	r1, r1, r2
    28d8:	4b8f      	ldr	r3, [pc, #572]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    28da:	185b      	adds	r3, r3, r1
    28dc:	799b      	ldrb	r3, [r3, #6]
    28de:	2bff      	cmp	r3, #255	; 0xff
    28e0:	d01c      	beq.n	291c <MiMAC_ReceivedPacket+0x144>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    28e2:	498e      	ldr	r1, [pc, #568]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    28e4:	780c      	ldrb	r4, [r1, #0]
    28e6:	2380      	movs	r3, #128	; 0x80
    28e8:	425b      	negs	r3, r3
    28ea:	4323      	orrs	r3, r4
    28ec:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    28ee:	2d00      	cmp	r5, #0
    28f0:	d021      	beq.n	2936 <MiMAC_ReceivedPacket+0x15e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    28f2:	4c89      	ldr	r4, [pc, #548]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    28f4:	01c3      	lsls	r3, r0, #7
    28f6:	1a18      	subs	r0, r3, r0
    28f8:	1823      	adds	r3, r4, r0
    28fa:	791d      	ldrb	r5, [r3, #4]
    28fc:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    28fe:	795b      	ldrb	r3, [r3, #5]
    2900:	744b      	strb	r3, [r1, #17]
    2902:	01d3      	lsls	r3, r2, #7
    2904:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    2906:	0013      	movs	r3, r2
    2908:	3308      	adds	r3, #8
    290a:	191b      	adds	r3, r3, r4
    290c:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    290e:	5d03      	ldrb	r3, [r0, r4]
    2910:	3b13      	subs	r3, #19
    2912:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2914:	3210      	adds	r2, #16
    2916:	1912      	adds	r2, r2, r4
    2918:	608a      	str	r2, [r1, #8]
    291a:	e7c2      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    291c:	01d1      	lsls	r1, r2, #7
    291e:	1a89      	subs	r1, r1, r2
    2920:	4b7d      	ldr	r3, [pc, #500]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2922:	185b      	adds	r3, r3, r1
    2924:	79db      	ldrb	r3, [r3, #7]
    2926:	2bff      	cmp	r3, #255	; 0xff
    2928:	d1db      	bne.n	28e2 <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.flags.bits.broadcast = 1;
    292a:	497c      	ldr	r1, [pc, #496]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    292c:	780b      	ldrb	r3, [r1, #0]
    292e:	2404      	movs	r4, #4
    2930:	4323      	orrs	r3, r4
    2932:	700b      	strb	r3, [r1, #0]
    2934:	e7d5      	b.n	28e2 <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    2936:	4979      	ldr	r1, [pc, #484]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    2938:	4c77      	ldr	r4, [pc, #476]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    293a:	01c3      	lsls	r3, r0, #7
    293c:	1a18      	subs	r0, r3, r0
    293e:	1823      	adds	r3, r4, r0
    2940:	7a1d      	ldrb	r5, [r3, #8]
    2942:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2944:	7a5b      	ldrb	r3, [r3, #9]
    2946:	744b      	strb	r3, [r1, #17]
    2948:	01d3      	lsls	r3, r2, #7
    294a:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    294c:	0013      	movs	r3, r2
    294e:	330a      	adds	r3, #10
    2950:	191b      	adds	r3, r3, r4
    2952:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2954:	5d03      	ldrb	r3, [r0, r4]
    2956:	3b15      	subs	r3, #21
    2958:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    295a:	3212      	adds	r2, #18
    295c:	1912      	adds	r2, r2, r4
    295e:	608a      	str	r2, [r1, #8]
    2960:	e79f      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    2962:	496e      	ldr	r1, [pc, #440]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    2964:	780c      	ldrb	r4, [r1, #0]
    2966:	2380      	movs	r3, #128	; 0x80
    2968:	425b      	negs	r3, r3
    296a:	4323      	orrs	r3, r4
    296c:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    296e:	2d00      	cmp	r5, #0
    2970:	d014      	beq.n	299c <MiMAC_ReceivedPacket+0x1c4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2972:	4c69      	ldr	r4, [pc, #420]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2974:	01d3      	lsls	r3, r2, #7
    2976:	1a98      	subs	r0, r3, r2
    2978:	1823      	adds	r3, r4, r0
    297a:	791d      	ldrb	r5, [r3, #4]
    297c:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    297e:	795b      	ldrb	r3, [r3, #5]
    2980:	744b      	strb	r3, [r1, #17]
    2982:	01d3      	lsls	r3, r2, #7
    2984:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    2986:	0013      	movs	r3, r2
    2988:	330e      	adds	r3, #14
    298a:	191b      	adds	r3, r3, r4
    298c:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    298e:	5d03      	ldrb	r3, [r0, r4]
    2990:	3b19      	subs	r3, #25
    2992:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    2994:	3216      	adds	r2, #22
    2996:	1912      	adds	r2, r2, r4
    2998:	608a      	str	r2, [r1, #8]
    299a:	e782      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    299c:	495f      	ldr	r1, [pc, #380]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    299e:	4c5e      	ldr	r4, [pc, #376]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    29a0:	01d3      	lsls	r3, r2, #7
    29a2:	1a98      	subs	r0, r3, r2
    29a4:	1823      	adds	r3, r4, r0
    29a6:	7b9d      	ldrb	r5, [r3, #14]
    29a8:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    29aa:	7bdb      	ldrb	r3, [r3, #15]
    29ac:	744b      	strb	r3, [r1, #17]
    29ae:	01d3      	lsls	r3, r2, #7
    29b0:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    29b2:	0013      	movs	r3, r2
    29b4:	3310      	adds	r3, #16
    29b6:	191b      	adds	r3, r3, r4
    29b8:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    29ba:	5d03      	ldrb	r3, [r0, r4]
    29bc:	3b1b      	subs	r3, #27
    29be:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    29c0:	3218      	adds	r2, #24
    29c2:	1912      	adds	r2, r2, r4
    29c4:	608a      	str	r2, [r1, #8]
    29c6:	e76c      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    29c8:	01d1      	lsls	r1, r2, #7
    29ca:	1a89      	subs	r1, r1, r2
    29cc:	4b52      	ldr	r3, [pc, #328]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    29ce:	185b      	adds	r3, r3, r1
    29d0:	799b      	ldrb	r3, [r3, #6]
    29d2:	2bff      	cmp	r3, #255	; 0xff
    29d4:	d01f      	beq.n	2a16 <MiMAC_ReceivedPacket+0x23e>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    29d6:	4b51      	ldr	r3, [pc, #324]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    29d8:	781c      	ldrb	r4, [r3, #0]
    29da:	2180      	movs	r1, #128	; 0x80
    29dc:	4249      	negs	r1, r1
    29de:	4321      	orrs	r1, r4
    29e0:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    29e2:	2101      	movs	r1, #1
    29e4:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    29e6:	2d00      	cmp	r5, #0
    29e8:	d122      	bne.n	2a30 <MiMAC_ReceivedPacket+0x258>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    29ea:	0019      	movs	r1, r3
    29ec:	4c4a      	ldr	r4, [pc, #296]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    29ee:	01c3      	lsls	r3, r0, #7
    29f0:	1a18      	subs	r0, r3, r0
    29f2:	1823      	adds	r3, r4, r0
    29f4:	7a1d      	ldrb	r5, [r3, #8]
    29f6:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    29f8:	7a5b      	ldrb	r3, [r3, #9]
    29fa:	744b      	strb	r3, [r1, #17]
    29fc:	01d3      	lsls	r3, r2, #7
    29fe:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2a00:	0013      	movs	r3, r2
    2a02:	330a      	adds	r3, #10
    2a04:	191b      	adds	r3, r3, r4
    2a06:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    2a08:	5d03      	ldrb	r3, [r0, r4]
    2a0a:	3b0f      	subs	r3, #15
    2a0c:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    2a0e:	320c      	adds	r2, #12
    2a10:	1912      	adds	r2, r2, r4
    2a12:	608a      	str	r2, [r1, #8]
    2a14:	e745      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2a16:	01d1      	lsls	r1, r2, #7
    2a18:	1a89      	subs	r1, r1, r2
    2a1a:	4b3f      	ldr	r3, [pc, #252]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2a1c:	185b      	adds	r3, r3, r1
    2a1e:	79db      	ldrb	r3, [r3, #7]
    2a20:	2bff      	cmp	r3, #255	; 0xff
    2a22:	d1d8      	bne.n	29d6 <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.flags.bits.broadcast = 1;
    2a24:	493d      	ldr	r1, [pc, #244]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    2a26:	780b      	ldrb	r3, [r1, #0]
    2a28:	2404      	movs	r4, #4
    2a2a:	4323      	orrs	r3, r4
    2a2c:	700b      	strb	r3, [r1, #0]
    2a2e:	e7d2      	b.n	29d6 <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2a30:	493a      	ldr	r1, [pc, #232]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    2a32:	4c39      	ldr	r4, [pc, #228]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2a34:	01c3      	lsls	r3, r0, #7
    2a36:	1a18      	subs	r0, r3, r0
    2a38:	1823      	adds	r3, r4, r0
    2a3a:	791d      	ldrb	r5, [r3, #4]
    2a3c:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2a3e:	795b      	ldrb	r3, [r3, #5]
    2a40:	744b      	strb	r3, [r1, #17]
    2a42:	01d3      	lsls	r3, r2, #7
    2a44:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    2a46:	0013      	movs	r3, r2
    2a48:	3308      	adds	r3, #8
    2a4a:	191b      	adds	r3, r3, r4
    2a4c:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    2a4e:	5d03      	ldrb	r3, [r0, r4]
    2a50:	3b0d      	subs	r3, #13
    2a52:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    2a54:	320a      	adds	r2, #10
    2a56:	1912      	adds	r2, r2, r4
    2a58:	608a      	str	r2, [r1, #8]
    2a5a:	e722      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2a5c:	4b2f      	ldr	r3, [pc, #188]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    2a5e:	781c      	ldrb	r4, [r3, #0]
    2a60:	2180      	movs	r1, #128	; 0x80
    2a62:	4249      	negs	r1, r1
    2a64:	4321      	orrs	r1, r4
    2a66:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2a68:	2101      	movs	r1, #1
    2a6a:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    2a6c:	2d00      	cmp	r5, #0
    2a6e:	d015      	beq.n	2a9c <MiMAC_ReceivedPacket+0x2c4>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2a70:	0019      	movs	r1, r3
    2a72:	4c29      	ldr	r4, [pc, #164]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2a74:	01d3      	lsls	r3, r2, #7
    2a76:	1a98      	subs	r0, r3, r2
    2a78:	1823      	adds	r3, r4, r0
    2a7a:	791d      	ldrb	r5, [r3, #4]
    2a7c:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2a7e:	795b      	ldrb	r3, [r3, #5]
    2a80:	744b      	strb	r3, [r1, #17]
    2a82:	01d3      	lsls	r3, r2, #7
    2a84:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    2a86:	0013      	movs	r3, r2
    2a88:	330e      	adds	r3, #14
    2a8a:	191b      	adds	r3, r3, r4
    2a8c:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    2a8e:	5d03      	ldrb	r3, [r0, r4]
    2a90:	3b13      	subs	r3, #19
    2a92:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2a94:	3210      	adds	r2, #16
    2a96:	1912      	adds	r2, r2, r4
    2a98:	608a      	str	r2, [r1, #8]
    2a9a:	e702      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    2a9c:	491f      	ldr	r1, [pc, #124]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    2a9e:	4c1e      	ldr	r4, [pc, #120]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2aa0:	01d3      	lsls	r3, r2, #7
    2aa2:	1a98      	subs	r0, r3, r2
    2aa4:	1823      	adds	r3, r4, r0
    2aa6:	7b5d      	ldrb	r5, [r3, #13]
    2aa8:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    2aaa:	7b9b      	ldrb	r3, [r3, #14]
    2aac:	744b      	strb	r3, [r1, #17]
    2aae:	01d3      	lsls	r3, r2, #7
    2ab0:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    2ab2:	0013      	movs	r3, r2
    2ab4:	330f      	adds	r3, #15
    2ab6:	191b      	adds	r3, r3, r4
    2ab8:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2aba:	5d03      	ldrb	r3, [r0, r4]
    2abc:	3b15      	subs	r3, #21
    2abe:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2ac0:	3212      	adds	r2, #18
    2ac2:	1912      	adds	r2, r2, r4
    2ac4:	608a      	str	r2, [r1, #8]
    2ac6:	e6ec      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2ac8:	01d1      	lsls	r1, r2, #7
    2aca:	1a89      	subs	r1, r1, r2
    2acc:	4b12      	ldr	r3, [pc, #72]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2ace:	185b      	adds	r3, r3, r1
    2ad0:	799b      	ldrb	r3, [r3, #6]
    2ad2:	2bff      	cmp	r3, #255	; 0xff
    2ad4:	d00c      	beq.n	2af0 <MiMAC_ReceivedPacket+0x318>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    2ad6:	4911      	ldr	r1, [pc, #68]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    2ad8:	4c0f      	ldr	r4, [pc, #60]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2ada:	01c3      	lsls	r3, r0, #7
    2adc:	1a18      	subs	r0, r3, r0
    2ade:	5d03      	ldrb	r3, [r0, r4]
    2ae0:	3b0a      	subs	r3, #10
    2ae2:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    2ae4:	01d3      	lsls	r3, r2, #7
    2ae6:	1a9a      	subs	r2, r3, r2
    2ae8:	3208      	adds	r2, #8
    2aea:	1912      	adds	r2, r2, r4
    2aec:	608a      	str	r2, [r1, #8]
			break;
    2aee:	e6d8      	b.n	28a2 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2af0:	01d1      	lsls	r1, r2, #7
    2af2:	1a89      	subs	r1, r1, r2
    2af4:	4b08      	ldr	r3, [pc, #32]	; (2b18 <MiMAC_ReceivedPacket+0x340>)
    2af6:	185b      	adds	r3, r3, r1
    2af8:	79db      	ldrb	r3, [r3, #7]
    2afa:	2bff      	cmp	r3, #255	; 0xff
    2afc:	d1eb      	bne.n	2ad6 <MiMAC_ReceivedPacket+0x2fe>
					MACRxPacket.flags.bits.broadcast = 1;
    2afe:	4907      	ldr	r1, [pc, #28]	; (2b1c <MiMAC_ReceivedPacket+0x344>)
    2b00:	780b      	ldrb	r3, [r1, #0]
    2b02:	2404      	movs	r4, #4
    2b04:	4323      	orrs	r3, r4
    2b06:	700b      	strb	r3, [r1, #0]
    2b08:	e7e5      	b.n	2ad6 <MiMAC_ReceivedPacket+0x2fe>
			MiMAC_DiscardPacket();
    2b0a:	4b05      	ldr	r3, [pc, #20]	; (2b20 <MiMAC_ReceivedPacket+0x348>)
    2b0c:	4798      	blx	r3
			return false;
    2b0e:	2000      	movs	r0, #0
    2b10:	e67b      	b.n	280a <MiMAC_ReceivedPacket+0x32>
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	20000009 	.word	0x20000009
    2b18:	2000047c 	.word	0x2000047c
    2b1c:	20002c84 	.word	0x20002c84
    2b20:	000027bd 	.word	0x000027bd
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    2b24:	4912      	ldr	r1, [pc, #72]	; (2b70 <MiMAC_ReceivedPacket+0x398>)
    2b26:	780a      	ldrb	r2, [r1, #0]
    2b28:	2003      	movs	r0, #3
    2b2a:	4382      	bics	r2, r0
    2b2c:	700a      	strb	r2, [r1, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    2b2e:	4a11      	ldr	r2, [pc, #68]	; (2b74 <MiMAC_ReceivedPacket+0x39c>)
    2b30:	01d9      	lsls	r1, r3, #7
    2b32:	1acb      	subs	r3, r1, r3
    2b34:	5c98      	ldrb	r0, [r3, r2]
    2b36:	490e      	ldr	r1, [pc, #56]	; (2b70 <MiMAC_ReceivedPacket+0x398>)
    2b38:	18d3      	adds	r3, r2, r3
    2b3a:	181a      	adds	r2, r3, r0
    2b3c:	3a01      	subs	r2, #1
    2b3e:	7812      	ldrb	r2, [r2, #0]
    2b40:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    2b42:	5c1b      	ldrb	r3, [r3, r0]
    2b44:	734b      	strb	r3, [r1, #13]
		return true;
    2b46:	2001      	movs	r0, #1
    2b48:	e65f      	b.n	280a <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    2b4a:	4909      	ldr	r1, [pc, #36]	; (2b70 <MiMAC_ReceivedPacket+0x398>)
    2b4c:	780a      	ldrb	r2, [r1, #0]
    2b4e:	2003      	movs	r0, #3
    2b50:	4382      	bics	r2, r0
    2b52:	2001      	movs	r0, #1
    2b54:	4302      	orrs	r2, r0
    2b56:	700a      	strb	r2, [r1, #0]
			break;
    2b58:	e7e9      	b.n	2b2e <MiMAC_ReceivedPacket+0x356>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    2b5a:	4905      	ldr	r1, [pc, #20]	; (2b70 <MiMAC_ReceivedPacket+0x398>)
    2b5c:	780a      	ldrb	r2, [r1, #0]
    2b5e:	2003      	movs	r0, #3
    2b60:	4302      	orrs	r2, r0
    2b62:	700a      	strb	r2, [r1, #0]
			break;
    2b64:	e7e3      	b.n	2b2e <MiMAC_ReceivedPacket+0x356>
			BankIndex = i;
    2b66:	2200      	movs	r2, #0
    2b68:	4b03      	ldr	r3, [pc, #12]	; (2b78 <MiMAC_ReceivedPacket+0x3a0>)
    2b6a:	701a      	strb	r2, [r3, #0]
    2b6c:	e654      	b.n	2818 <MiMAC_ReceivedPacket+0x40>
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	20002c84 	.word	0x20002c84
    2b74:	2000047c 	.word	0x2000047c
    2b78:	20000009 	.word	0x20000009

00002b7c <MiMAC_ChannelAssessment>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
uint8_t MiMAC_ChannelAssessment(uint8_t AssessmentMode)
{
    2b7c:	b510      	push	{r4, lr}
		uint8_t ed;
		ed = PHY_EdReq();
		//printf(" %u ", ed);
		return ed;
	}
	return 0;
    2b7e:	2300      	movs	r3, #0
	if( AssessmentMode == CHANNEL_ASSESSMENT_ENERGY_DETECT)
    2b80:	2801      	cmp	r0, #1
    2b82:	d001      	beq.n	2b88 <MiMAC_ChannelAssessment+0xc>
}
    2b84:	0018      	movs	r0, r3
    2b86:	bd10      	pop	{r4, pc}
		ed = PHY_EdReq();
    2b88:	4b01      	ldr	r3, [pc, #4]	; (2b90 <MiMAC_ChannelAssessment+0x14>)
    2b8a:	4798      	blx	r3
    2b8c:	0003      	movs	r3, r0
		return ed;
    2b8e:	e7f9      	b.n	2b84 <MiMAC_ChannelAssessment+0x8>
    2b90:	00002e01 	.word	0x00002e01

00002b94 <MiMAC_SymbolToTicks>:
* Returns:
*      converted value in uint32.
*****************************************************************************************/
uint32_t MiMAC_SymbolToTicks(uint32_t symbols)
{
	return SYMBOLS_TO_TICKS(symbols);
    2b94:	0100      	lsls	r0, r0, #4
}
    2b96:	4770      	bx	lr

00002b98 <MiMAC_GetPHYChannelInfo>:
*****************************************************************************************/
uint32_t MiMAC_GetPHYChannelInfo(void)
{
	uint32_t channelMap = FULL_CHANNEL_MAP;
	return channelMap;
}
    2b98:	4800      	ldr	r0, [pc, #0]	; (2b9c <MiMAC_GetPHYChannelInfo+0x4>)
    2b9a:	4770      	bx	lr
    2b9c:	07fff800 	.word	0x07fff800

00002ba0 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    2ba0:	4b02      	ldr	r3, [pc, #8]	; (2bac <PHY_DataConf+0xc>)
    2ba2:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    2ba4:	2201      	movs	r2, #1
    2ba6:	4b02      	ldr	r3, [pc, #8]	; (2bb0 <PHY_DataConf+0x10>)
    2ba8:	701a      	strb	r2, [r3, #0]
}
    2baa:	4770      	bx	lr
    2bac:	20000470 	.word	0x20000470
    2bb0:	2000021f 	.word	0x2000021f

00002bb4 <MiMAC_Task>:

void MiMAC_Task(void)
{
    2bb4:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    2bb6:	4b0b      	ldr	r3, [pc, #44]	; (2be4 <MiMAC_Task+0x30>)
    2bb8:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    2bba:	4b0b      	ldr	r3, [pc, #44]	; (2be8 <MiMAC_Task+0x34>)
    2bbc:	681b      	ldr	r3, [r3, #0]
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d003      	beq.n	2bca <MiMAC_Task+0x16>
    2bc2:	4a0a      	ldr	r2, [pc, #40]	; (2bec <MiMAC_Task+0x38>)
    2bc4:	7812      	ldrb	r2, [r2, #0]
    2bc6:	2a00      	cmp	r2, #0
    2bc8:	d100      	bne.n	2bcc <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    2bca:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    2bcc:	4a08      	ldr	r2, [pc, #32]	; (2bf0 <MiMAC_Task+0x3c>)
    2bce:	6812      	ldr	r2, [r2, #0]
    2bd0:	4908      	ldr	r1, [pc, #32]	; (2bf4 <MiMAC_Task+0x40>)
    2bd2:	7809      	ldrb	r1, [r1, #0]
    2bd4:	4808      	ldr	r0, [pc, #32]	; (2bf8 <MiMAC_Task+0x44>)
    2bd6:	7800      	ldrb	r0, [r0, #0]
    2bd8:	4798      	blx	r3
	  dataConfAvailable = false;
    2bda:	2200      	movs	r2, #0
    2bdc:	4b03      	ldr	r3, [pc, #12]	; (2bec <MiMAC_Task+0x38>)
    2bde:	701a      	strb	r2, [r3, #0]
}
    2be0:	e7f3      	b.n	2bca <MiMAC_Task+0x16>
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	00002e81 	.word	0x00002e81
    2be8:	20000220 	.word	0x20000220
    2bec:	2000021f 	.word	0x2000021f
    2bf0:	20000228 	.word	0x20000228
    2bf4:	20000470 	.word	0x20000470
    2bf8:	20000224 	.word	0x20000224

00002bfc <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bfe:	0004      	movs	r4, r0
	trx_reg_write(reg, value);
    2c00:	4f0b      	ldr	r7, [pc, #44]	; (2c30 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    2c02:	4e0c      	ldr	r6, [pc, #48]	; (2c34 <phyTrxSetState+0x38>)
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c04:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2c06:	2103      	movs	r1, #3
    2c08:	2002      	movs	r0, #2
    2c0a:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2c0c:	2001      	movs	r0, #1
    2c0e:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c10:	4028      	ands	r0, r5
    2c12:	2808      	cmp	r0, #8
    2c14:	d1f7      	bne.n	2c06 <phyTrxSetState+0xa>
	trx_reg_write(reg, value);
    2c16:	4f06      	ldr	r7, [pc, #24]	; (2c30 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    2c18:	4e06      	ldr	r6, [pc, #24]	; (2c34 <phyTrxSetState+0x38>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c1a:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2c1c:	0021      	movs	r1, r4
    2c1e:	2002      	movs	r0, #2
    2c20:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2c22:	2001      	movs	r0, #1
    2c24:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c26:	4028      	ands	r0, r5
    2c28:	4284      	cmp	r4, r0
    2c2a:	d1f7      	bne.n	2c1c <phyTrxSetState+0x20>
}
    2c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	00003d19 	.word	0x00003d19
    2c34:	00003c1d 	.word	0x00003c1d

00002c38 <phySetRxState>:
{
    2c38:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2c3a:	2008      	movs	r0, #8
    2c3c:	4b08      	ldr	r3, [pc, #32]	; (2c60 <phySetRxState+0x28>)
    2c3e:	4798      	blx	r3
	value = trx_reg_read(reg);
    2c40:	200f      	movs	r0, #15
    2c42:	4b08      	ldr	r3, [pc, #32]	; (2c64 <phySetRxState+0x2c>)
    2c44:	4798      	blx	r3
	if (phyRxState) {
    2c46:	4b08      	ldr	r3, [pc, #32]	; (2c68 <phySetRxState+0x30>)
    2c48:	781b      	ldrb	r3, [r3, #0]
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d100      	bne.n	2c50 <phySetRxState+0x18>
}
    2c4e:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    2c50:	2016      	movs	r0, #22
    2c52:	4b03      	ldr	r3, [pc, #12]	; (2c60 <phySetRxState+0x28>)
    2c54:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    2c56:	2201      	movs	r2, #1
    2c58:	4b04      	ldr	r3, [pc, #16]	; (2c6c <phySetRxState+0x34>)
    2c5a:	701a      	strb	r2, [r3, #0]
}
    2c5c:	e7f7      	b.n	2c4e <phySetRxState+0x16>
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	00002bfd 	.word	0x00002bfd
    2c64:	00003c1d 	.word	0x00003c1d
    2c68:	200002ac 	.word	0x200002ac
    2c6c:	200002ad 	.word	0x200002ad

00002c70 <PHY_DataReq>:
{
    2c70:	b510      	push	{r4, lr}
    2c72:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2c74:	2019      	movs	r0, #25
    2c76:	4b0c      	ldr	r3, [pc, #48]	; (2ca8 <PHY_DataReq+0x38>)
    2c78:	4798      	blx	r3
	value = trx_reg_read(reg);
    2c7a:	200f      	movs	r0, #15
    2c7c:	4b0b      	ldr	r3, [pc, #44]	; (2cac <PHY_DataReq+0x3c>)
    2c7e:	4798      	blx	r3
	data[0] += 2;// 2
    2c80:	7821      	ldrb	r1, [r4, #0]
    2c82:	1c8b      	adds	r3, r1, #2
    2c84:	7023      	strb	r3, [r4, #0]
	trx_frame_write(&data[0], (data[0]-1 ) /* length value*/);
    2c86:	3101      	adds	r1, #1
    2c88:	b2c9      	uxtb	r1, r1
    2c8a:	0020      	movs	r0, r4
    2c8c:	4b08      	ldr	r3, [pc, #32]	; (2cb0 <PHY_DataReq+0x40>)
    2c8e:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
    2c90:	2203      	movs	r2, #3
    2c92:	4b08      	ldr	r3, [pc, #32]	; (2cb4 <PHY_DataReq+0x44>)
    2c94:	701a      	strb	r2, [r3, #0]
    2c96:	4b08      	ldr	r3, [pc, #32]	; (2cb8 <PHY_DataReq+0x48>)
    2c98:	2280      	movs	r2, #128	; 0x80
    2c9a:	0352      	lsls	r2, r2, #13
    2c9c:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    2c9e:	46c0      	nop			; (mov r8, r8)
    2ca0:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    2ca2:	615a      	str	r2, [r3, #20]
}
    2ca4:	bd10      	pop	{r4, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	00002bfd 	.word	0x00002bfd
    2cac:	00003c1d 	.word	0x00003c1d
    2cb0:	00003f49 	.word	0x00003f49
    2cb4:	200002ad 	.word	0x200002ad
    2cb8:	41004400 	.word	0x41004400

00002cbc <PHY_RandomReq>:
{
    2cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cbe:	46c6      	mov	lr, r8
    2cc0:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    2cc2:	2006      	movs	r0, #6
    2cc4:	4b0d      	ldr	r3, [pc, #52]	; (2cfc <PHY_RandomReq+0x40>)
    2cc6:	4798      	blx	r3
    2cc8:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    2cca:	2500      	movs	r5, #0
		delay_cycles_us(1);
    2ccc:	4f0c      	ldr	r7, [pc, #48]	; (2d00 <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    2cce:	4e0d      	ldr	r6, [pc, #52]	; (2d04 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2cd0:	2303      	movs	r3, #3
    2cd2:	4698      	mov	r8, r3
		delay_cycles_us(1);
    2cd4:	2001      	movs	r0, #1
    2cd6:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2cd8:	2006      	movs	r0, #6
    2cda:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2cdc:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    2cde:	4643      	mov	r3, r8
    2ce0:	4018      	ands	r0, r3
    2ce2:	40a0      	lsls	r0, r4
    2ce4:	4305      	orrs	r5, r0
    2ce6:	b2ad      	uxth	r5, r5
    2ce8:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    2cea:	2c10      	cmp	r4, #16
    2cec:	d1f2      	bne.n	2cd4 <PHY_RandomReq+0x18>
	phySetRxState();
    2cee:	4b06      	ldr	r3, [pc, #24]	; (2d08 <PHY_RandomReq+0x4c>)
    2cf0:	4798      	blx	r3
}
    2cf2:	0028      	movs	r0, r5
    2cf4:	bc04      	pop	{r2}
    2cf6:	4690      	mov	r8, r2
    2cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	00002bfd 	.word	0x00002bfd
    2d00:	00000155 	.word	0x00000155
    2d04:	00003c1d 	.word	0x00003c1d
    2d08:	00002c39 	.word	0x00002c39

00002d0c <PHY_Init>:
{
    2d0c:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2d0e:	4b0d      	ldr	r3, [pc, #52]	; (2d44 <PHY_Init+0x38>)
    2d10:	4798      	blx	r3
	PhyReset();
    2d12:	4b0d      	ldr	r3, [pc, #52]	; (2d48 <PHY_Init+0x3c>)
    2d14:	4798      	blx	r3
	phyRxState = false;
    2d16:	2200      	movs	r2, #0
    2d18:	4b0c      	ldr	r3, [pc, #48]	; (2d4c <PHY_Init+0x40>)
    2d1a:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    2d1c:	4e0c      	ldr	r6, [pc, #48]	; (2d50 <PHY_Init+0x44>)
	value = trx_reg_read(reg);
    2d1e:	4d0d      	ldr	r5, [pc, #52]	; (2d54 <PHY_Init+0x48>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d20:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2d22:	2108      	movs	r1, #8
    2d24:	2002      	movs	r0, #2
    2d26:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2d28:	2001      	movs	r0, #1
    2d2a:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d2c:	4020      	ands	r0, r4
    2d2e:	2808      	cmp	r0, #8
    2d30:	d1f7      	bne.n	2d22 <PHY_Init+0x16>
	trx_reg_write(reg, value);
    2d32:	212e      	movs	r1, #46	; 0x2e
    2d34:	3804      	subs	r0, #4
    2d36:	4c06      	ldr	r4, [pc, #24]	; (2d50 <PHY_Init+0x44>)
    2d38:	47a0      	blx	r4
    2d3a:	21a0      	movs	r1, #160	; 0xa0
    2d3c:	200c      	movs	r0, #12
    2d3e:	47a0      	blx	r4
}
    2d40:	bd70      	pop	{r4, r5, r6, pc}
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	00003ad1 	.word	0x00003ad1
    2d48:	00003bed 	.word	0x00003bed
    2d4c:	200002ac 	.word	0x200002ac
    2d50:	00003d19 	.word	0x00003d19
    2d54:	00003c1d 	.word	0x00003c1d

00002d58 <PHY_SetRxState>:
{
    2d58:	b510      	push	{r4, lr}
	phyRxState = rx;
    2d5a:	4b02      	ldr	r3, [pc, #8]	; (2d64 <PHY_SetRxState+0xc>)
    2d5c:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    2d5e:	4b02      	ldr	r3, [pc, #8]	; (2d68 <PHY_SetRxState+0x10>)
    2d60:	4798      	blx	r3
}
    2d62:	bd10      	pop	{r4, pc}
    2d64:	200002ac 	.word	0x200002ac
    2d68:	00002c39 	.word	0x00002c39

00002d6c <PHY_SetChannel>:
{
    2d6c:	b510      	push	{r4, lr}
    2d6e:	0004      	movs	r4, r0
	value = trx_reg_read(reg);
    2d70:	2008      	movs	r0, #8
    2d72:	4b05      	ldr	r3, [pc, #20]	; (2d88 <PHY_SetChannel+0x1c>)
    2d74:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    2d76:	231f      	movs	r3, #31
    2d78:	0001      	movs	r1, r0
    2d7a:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    2d7c:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    2d7e:	b2c9      	uxtb	r1, r1
    2d80:	2008      	movs	r0, #8
    2d82:	4b02      	ldr	r3, [pc, #8]	; (2d8c <PHY_SetChannel+0x20>)
    2d84:	4798      	blx	r3
}
    2d86:	bd10      	pop	{r4, pc}
    2d88:	00003c1d 	.word	0x00003c1d
    2d8c:	00003d19 	.word	0x00003d19

00002d90 <PHY_SetPanId>:
{
    2d90:	b530      	push	{r4, r5, lr}
    2d92:	b083      	sub	sp, #12
    2d94:	466b      	mov	r3, sp
    2d96:	1d9d      	adds	r5, r3, #6
    2d98:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    2d9a:	b2c1      	uxtb	r1, r0
    2d9c:	2022      	movs	r0, #34	; 0x22
    2d9e:	4c03      	ldr	r4, [pc, #12]	; (2dac <PHY_SetPanId+0x1c>)
    2da0:	47a0      	blx	r4
    2da2:	7869      	ldrb	r1, [r5, #1]
    2da4:	2023      	movs	r0, #35	; 0x23
    2da6:	47a0      	blx	r4
}
    2da8:	b003      	add	sp, #12
    2daa:	bd30      	pop	{r4, r5, pc}
    2dac:	00003d19 	.word	0x00003d19

00002db0 <PHY_SetShortAddr>:
{
    2db0:	b570      	push	{r4, r5, r6, lr}
    2db2:	b082      	sub	sp, #8
    2db4:	466b      	mov	r3, sp
    2db6:	1d9e      	adds	r6, r3, #6
    2db8:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    2dba:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    2dbc:	0021      	movs	r1, r4
    2dbe:	2020      	movs	r0, #32
    2dc0:	4d05      	ldr	r5, [pc, #20]	; (2dd8 <PHY_SetShortAddr+0x28>)
    2dc2:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    2dc4:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    2dc6:	0031      	movs	r1, r6
    2dc8:	2021      	movs	r0, #33	; 0x21
    2dca:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    2dcc:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    2dce:	b2e1      	uxtb	r1, r4
    2dd0:	202d      	movs	r0, #45	; 0x2d
    2dd2:	47a8      	blx	r5
}
    2dd4:	b002      	add	sp, #8
    2dd6:	bd70      	pop	{r4, r5, r6, pc}
    2dd8:	00003d19 	.word	0x00003d19

00002ddc <PHY_Sleep>:
{
    2ddc:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2dde:	2008      	movs	r0, #8
    2de0:	4b04      	ldr	r3, [pc, #16]	; (2df4 <PHY_Sleep+0x18>)
    2de2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2de4:	2280      	movs	r2, #128	; 0x80
    2de6:	0352      	lsls	r2, r2, #13
    2de8:	4b03      	ldr	r3, [pc, #12]	; (2df8 <PHY_Sleep+0x1c>)
    2dea:	619a      	str	r2, [r3, #24]
	phyState = PHY_STATE_SLEEP;
    2dec:	2202      	movs	r2, #2
    2dee:	4b03      	ldr	r3, [pc, #12]	; (2dfc <PHY_Sleep+0x20>)
    2df0:	701a      	strb	r2, [r3, #0]
}
    2df2:	bd10      	pop	{r4, pc}
    2df4:	00002bfd 	.word	0x00002bfd
    2df8:	41004400 	.word	0x41004400
    2dfc:	200002ad 	.word	0x200002ad

00002e00 <PHY_EdReq>:
{
    2e00:	b570      	push	{r4, r5, r6, lr}
	phyTrxSetState(TRX_CMD_PLL_ON);
    2e02:	2009      	movs	r0, #9
    2e04:	4d12      	ldr	r5, [pc, #72]	; (2e50 <PHY_EdReq+0x50>)
    2e06:	47a8      	blx	r5
	value = trx_reg_read(reg);
    2e08:	200f      	movs	r0, #15
    2e0a:	4c12      	ldr	r4, [pc, #72]	; (2e54 <PHY_EdReq+0x54>)
    2e0c:	47a0      	blx	r4
    2e0e:	2015      	movs	r0, #21
    2e10:	47a0      	blx	r4
    2e12:	0006      	movs	r6, r0
	phyWriteRegister(RX_SYN_REG, (prev_rx_pdt_dis | (1<<7)));
    2e14:	2180      	movs	r1, #128	; 0x80
    2e16:	4249      	negs	r1, r1
    2e18:	4301      	orrs	r1, r0
	trx_reg_write(reg, value);
    2e1a:	b2c9      	uxtb	r1, r1
    2e1c:	2015      	movs	r0, #21
    2e1e:	4c0e      	ldr	r4, [pc, #56]	; (2e58 <PHY_EdReq+0x58>)
    2e20:	47a0      	blx	r4
	phyTrxSetState(TRX_CMD_RX_ON);
    2e22:	2006      	movs	r0, #6
    2e24:	47a8      	blx	r5
	trx_reg_write(reg, value);
    2e26:	21ff      	movs	r1, #255	; 0xff
    2e28:	2007      	movs	r0, #7
    2e2a:	47a0      	blx	r4
	value = trx_reg_read(reg);
    2e2c:	4d09      	ldr	r5, [pc, #36]	; (2e54 <PHY_EdReq+0x54>)
	while (0 == (phyReadRegister(IRQ_STATUS_REG) & (1 << CCA_ED_DONE))) {
    2e2e:	2410      	movs	r4, #16
	value = trx_reg_read(reg);
    2e30:	200f      	movs	r0, #15
    2e32:	47a8      	blx	r5
	while (0 == (phyReadRegister(IRQ_STATUS_REG) & (1 << CCA_ED_DONE))) {
    2e34:	4204      	tst	r4, r0
    2e36:	d0fb      	beq.n	2e30 <PHY_EdReq+0x30>
	value = trx_reg_read(reg);
    2e38:	2007      	movs	r0, #7
    2e3a:	4b06      	ldr	r3, [pc, #24]	; (2e54 <PHY_EdReq+0x54>)
    2e3c:	4798      	blx	r3
    2e3e:	0004      	movs	r4, r0
	phySetRxState();
    2e40:	4b06      	ldr	r3, [pc, #24]	; (2e5c <PHY_EdReq+0x5c>)
    2e42:	4798      	blx	r3
	trx_reg_write(reg, value);
    2e44:	0031      	movs	r1, r6
    2e46:	2015      	movs	r0, #21
    2e48:	4b03      	ldr	r3, [pc, #12]	; (2e58 <PHY_EdReq+0x58>)
    2e4a:	4798      	blx	r3
}
    2e4c:	0020      	movs	r0, r4
    2e4e:	bd70      	pop	{r4, r5, r6, pc}
    2e50:	00002bfd 	.word	0x00002bfd
    2e54:	00003c1d 	.word	0x00003c1d
    2e58:	00003d19 	.word	0x00003d19
    2e5c:	00002c39 	.word	0x00002c39

00002e60 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    2e60:	b570      	push	{r4, r5, r6, lr}
    2e62:	0005      	movs	r5, r0
    2e64:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    2e66:	4e05      	ldr	r6, [pc, #20]	; (2e7c <PHY_SetIEEEAddr+0x1c>)
    2e68:	7829      	ldrb	r1, [r5, #0]
    2e6a:	0020      	movs	r0, r4
    2e6c:	47b0      	blx	r6
		ptr_to_reg++;
    2e6e:	3501      	adds	r5, #1
    2e70:	3401      	adds	r4, #1
    2e72:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    2e74:	2c2c      	cmp	r4, #44	; 0x2c
    2e76:	d1f7      	bne.n	2e68 <PHY_SetIEEEAddr+0x8>
	}
}
    2e78:	bd70      	pop	{r4, r5, r6, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	00003d19 	.word	0x00003d19

00002e80 <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
// Handle Packet Received
void PHY_TaskHandler(void)
{
    2e80:	b570      	push	{r4, r5, r6, lr}
    2e82:	b082      	sub	sp, #8
	if (PHY_STATE_SLEEP == phyState)
    2e84:	4b36      	ldr	r3, [pc, #216]	; (2f60 <PHY_TaskHandler+0xe0>)
    2e86:	781b      	ldrb	r3, [r3, #0]
    2e88:	2b02      	cmp	r3, #2
    2e8a:	d00a      	beq.n	2ea2 <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    2e8c:	200f      	movs	r0, #15
    2e8e:	4b35      	ldr	r3, [pc, #212]	; (2f64 <PHY_TaskHandler+0xe4>)
    2e90:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    2e92:	0703      	lsls	r3, r0, #28
    2e94:	d505      	bpl.n	2ea2 <PHY_TaskHandler+0x22>
	{
		if (PHY_STATE_IDLE == phyState)
    2e96:	4b32      	ldr	r3, [pc, #200]	; (2f60 <PHY_TaskHandler+0xe0>)
    2e98:	781b      	ldrb	r3, [r3, #0]
    2e9a:	2b01      	cmp	r3, #1
    2e9c:	d003      	beq.n	2ea6 <PHY_TaskHandler+0x26>
					}
			    }
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    2e9e:	2b03      	cmp	r3, #3
    2ea0:	d045      	beq.n	2f2e <PHY_TaskHandler+0xae>
			phySetRxState();
			phyState = PHY_STATE_IDLE;
			PHY_DataConf(status);
		}
	}
}
    2ea2:	b002      	add	sp, #8
    2ea4:	bd70      	pop	{r4, r5, r6, pc}
				if (RxBuffer[i].PayloadLen == 0)
    2ea6:	4b30      	ldr	r3, [pc, #192]	; (2f68 <PHY_TaskHandler+0xe8>)
    2ea8:	781c      	ldrb	r4, [r3, #0]
    2eaa:	2c00      	cmp	r4, #0
    2eac:	d010      	beq.n	2ed0 <PHY_TaskHandler+0x50>
    2eae:	237f      	movs	r3, #127	; 0x7f
    2eb0:	4a2d      	ldr	r2, [pc, #180]	; (2f68 <PHY_TaskHandler+0xe8>)
    2eb2:	5cd3      	ldrb	r3, [r2, r3]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d00a      	beq.n	2ece <PHY_TaskHandler+0x4e>
    2eb8:	23fe      	movs	r3, #254	; 0xfe
    2eba:	5cd3      	ldrb	r3, [r2, r3]
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d024      	beq.n	2f0a <PHY_TaskHandler+0x8a>
    2ec0:	237e      	movs	r3, #126	; 0x7e
    2ec2:	33ff      	adds	r3, #255	; 0xff
    2ec4:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    2ec6:	2403      	movs	r4, #3
				if (RxBuffer[i].PayloadLen == 0)
    2ec8:	2b00      	cmp	r3, #0
    2eca:	d1ea      	bne.n	2ea2 <PHY_TaskHandler+0x22>
    2ecc:	e000      	b.n	2ed0 <PHY_TaskHandler+0x50>
			for (i = 0; i < BANK_SIZE; i++)
    2ece:	2401      	movs	r4, #1
				trx_frame_read(&size, 1);
    2ed0:	466b      	mov	r3, sp
    2ed2:	1ddd      	adds	r5, r3, #7
    2ed4:	2101      	movs	r1, #1
    2ed6:	0028      	movs	r0, r5
    2ed8:	4e24      	ldr	r6, [pc, #144]	; (2f6c <PHY_TaskHandler+0xec>)
    2eda:	47b0      	blx	r6
			 	trx_frame_read(phyRxBuffer, size + 2);
    2edc:	7829      	ldrb	r1, [r5, #0]
    2ede:	3102      	adds	r1, #2
    2ee0:	b2c9      	uxtb	r1, r1
    2ee2:	4823      	ldr	r0, [pc, #140]	; (2f70 <PHY_TaskHandler+0xf0>)
    2ee4:	47b0      	blx	r6
				RxBuffer[RxBank].PayloadLen = size+2;
    2ee6:	0021      	movs	r1, r4
    2ee8:	7828      	ldrb	r0, [r5, #0]
    2eea:	1c83      	adds	r3, r0, #2
    2eec:	b2db      	uxtb	r3, r3
    2eee:	01e2      	lsls	r2, r4, #7
    2ef0:	1b14      	subs	r4, r2, r4
    2ef2:	4a1d      	ldr	r2, [pc, #116]	; (2f68 <PHY_TaskHandler+0xe8>)
    2ef4:	54a3      	strb	r3, [r4, r2]
				if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    2ef6:	2b7d      	cmp	r3, #125	; 0x7d
    2ef8:	d909      	bls.n	2f0e <PHY_TaskHandler+0x8e>
	value = trx_reg_read(reg);
    2efa:	4d1a      	ldr	r5, [pc, #104]	; (2f64 <PHY_TaskHandler+0xe4>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2efc:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    2efe:	2001      	movs	r0, #1
    2f00:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2f02:	4020      	ands	r0, r4
    2f04:	2816      	cmp	r0, #22
    2f06:	d1fa      	bne.n	2efe <PHY_TaskHandler+0x7e>
    2f08:	e7cb      	b.n	2ea2 <PHY_TaskHandler+0x22>
			for (i = 0; i < BANK_SIZE; i++)
    2f0a:	2402      	movs	r4, #2
    2f0c:	e7e0      	b.n	2ed0 <PHY_TaskHandler+0x50>
					for (i = 1; i <= size+2; i++)
    2f0e:	3002      	adds	r0, #2
    2f10:	2201      	movs	r2, #1
    2f12:	2301      	movs	r3, #1
						RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    2f14:	01cc      	lsls	r4, r1, #7
    2f16:	1a61      	subs	r1, r4, r1
    2f18:	4c13      	ldr	r4, [pc, #76]	; (2f68 <PHY_TaskHandler+0xe8>)
    2f1a:	1864      	adds	r4, r4, r1
    2f1c:	4d14      	ldr	r5, [pc, #80]	; (2f70 <PHY_TaskHandler+0xf0>)
    2f1e:	5ca9      	ldrb	r1, [r5, r2]
    2f20:	54a1      	strb	r1, [r4, r2]
					for (i = 1; i <= size+2; i++)
    2f22:	3301      	adds	r3, #1
    2f24:	b2db      	uxtb	r3, r3
    2f26:	001a      	movs	r2, r3
    2f28:	4283      	cmp	r3, r0
    2f2a:	ddf8      	ble.n	2f1e <PHY_TaskHandler+0x9e>
    2f2c:	e7e5      	b.n	2efa <PHY_TaskHandler+0x7a>
	value = trx_reg_read(reg);
    2f2e:	2002      	movs	r0, #2
    2f30:	4b0c      	ldr	r3, [pc, #48]	; (2f64 <PHY_TaskHandler+0xe4>)
    2f32:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    2f34:	0940      	lsrs	r0, r0, #5
    2f36:	b2c4      	uxtb	r4, r0
   			if (TRAC_STATUS_SUCCESS == status)
    2f38:	2c00      	cmp	r4, #0
    2f3a:	d004      	beq.n	2f46 <PHY_TaskHandler+0xc6>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2f3c:	2c03      	cmp	r4, #3
    2f3e:	d00b      	beq.n	2f58 <PHY_TaskHandler+0xd8>
			else if (TRAC_STATUS_NO_ACK == status)
    2f40:	2c05      	cmp	r4, #5
    2f42:	d00b      	beq.n	2f5c <PHY_TaskHandler+0xdc>
				status = PHY_STATUS_ERROR;
    2f44:	2401      	movs	r4, #1
			phySetRxState();
    2f46:	4b0b      	ldr	r3, [pc, #44]	; (2f74 <PHY_TaskHandler+0xf4>)
    2f48:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    2f4a:	2201      	movs	r2, #1
    2f4c:	4b04      	ldr	r3, [pc, #16]	; (2f60 <PHY_TaskHandler+0xe0>)
    2f4e:	701a      	strb	r2, [r3, #0]
			PHY_DataConf(status);
    2f50:	0020      	movs	r0, r4
    2f52:	4b09      	ldr	r3, [pc, #36]	; (2f78 <PHY_TaskHandler+0xf8>)
    2f54:	4798      	blx	r3
    2f56:	e7a4      	b.n	2ea2 <PHY_TaskHandler+0x22>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2f58:	2402      	movs	r4, #2
    2f5a:	e7f4      	b.n	2f46 <PHY_TaskHandler+0xc6>
				status = PHY_STATUS_NO_ACK;
    2f5c:	2403      	movs	r4, #3
    2f5e:	e7f2      	b.n	2f46 <PHY_TaskHandler+0xc6>
    2f60:	200002ad 	.word	0x200002ad
    2f64:	00003c1d 	.word	0x00003c1d
    2f68:	2000047c 	.word	0x2000047c
    2f6c:	00003e19 	.word	0x00003e19
    2f70:	2000022c 	.word	0x2000022c
    2f74:	00002c39 	.word	0x00002c39
    2f78:	00002ba1 	.word	0x00002ba1

00002f7c <stb_init>:
 * @brief STB Initialization
 *
 * This function initializes the STB.
 */
void stb_init(void)
{
    2f7c:	b510      	push	{r4, lr}
	sal_init();
    2f7e:	4b01      	ldr	r3, [pc, #4]	; (2f84 <stb_init+0x8>)
    2f80:	4798      	blx	r3
}
    2f82:	bd10      	pop	{r4, pc}
    2f84:	000038a5 	.word	0x000038a5

00002f88 <stb_ccm_secure>:
		uint8_t *key,
		uint8_t hdr_len,
		uint8_t pld_len,
		uint8_t sec_level,
		uint8_t aes_dir)
{
    2f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8a:	46de      	mov	lr, fp
    2f8c:	4657      	mov	r7, sl
    2f8e:	464e      	mov	r6, r9
    2f90:	4645      	mov	r5, r8
    2f92:	b5e0      	push	{r5, r6, r7, lr}
    2f94:	b08b      	sub	sp, #44	; 0x2c
    2f96:	9003      	str	r0, [sp, #12]
    2f98:	000d      	movs	r5, r1
    2f9a:	0014      	movs	r4, r2
    2f9c:	9304      	str	r3, [sp, #16]
    2f9e:	ab14      	add	r3, sp, #80	; 0x50
    2fa0:	781e      	ldrb	r6, [r3, #0]
    2fa2:	ab15      	add	r3, sp, #84	; 0x54
    2fa4:	781f      	ldrb	r7, [r3, #0]
    2fa6:	ab16      	add	r3, sp, #88	; 0x58
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	469a      	mov	sl, r3
	uint8_t nonce_0; /* nonce[0] for MIC computation. */
	uint8_t mic_len = 0;
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;

	if (stb_restart_required) {
    2fac:	4b77      	ldr	r3, [pc, #476]	; (318c <stb_ccm_secure+0x204>)
    2fae:	781b      	ldrb	r3, [r3, #0]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d007      	beq.n	2fc4 <stb_ccm_secure+0x3c>
#if (SAL_TYPE != ATXMEGA_SAL)
		prev_trx_status = tal_trx_status;
    2fb4:	2202      	movs	r2, #2
    2fb6:	4b76      	ldr	r3, [pc, #472]	; (3190 <stb_ccm_secure+0x208>)
    2fb8:	701a      	strb	r2, [r3, #0]
		if (tal_trx_status == TRX_SLEEP) {
			PHY_Wakeup();
		}
#endif
		sal_aes_restart();
    2fba:	4b76      	ldr	r3, [pc, #472]	; (3194 <stb_ccm_secure+0x20c>)
    2fbc:	4798      	blx	r3
		stb_restart_required = false;
    2fbe:	2200      	movs	r2, #0
    2fc0:	4b72      	ldr	r3, [pc, #456]	; (318c <stb_ccm_secure+0x204>)
    2fc2:	701a      	strb	r2, [r3, #0]
	}

	switch (sec_level) {
    2fc4:	2f07      	cmp	r7, #7
    2fc6:	d817      	bhi.n	2ff8 <stb_ccm_secure+0x70>
    2fc8:	00bb      	lsls	r3, r7, #2
    2fca:	4a73      	ldr	r2, [pc, #460]	; (3198 <stb_ccm_secure+0x210>)
    2fcc:	58d3      	ldr	r3, [r2, r3]
    2fce:	469f      	mov	pc, r3
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    2fd0:	2300      	movs	r3, #0
    2fd2:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
		break;

	case SECURITY_02_LEVEL:
		/* MIC-64 & No Encryption at Security Level -2 */
		mic_len = LEN_MIC_64;
    2fd4:	2708      	movs	r7, #8
    2fd6:	e0bb      	b.n	3150 <stb_ccm_secure+0x1c8>
		break;

	case SECURITY_04_LEVEL:
		/* No MIC & Encryption at Security Level -4 */
		mic_len = LEN_MIC_00;
		enc_flag = ENCRYPTION_REQD;
    2fd8:	2301      	movs	r3, #1
    2fda:	4698      	mov	r8, r3
		mic_len = LEN_MIC_00;
    2fdc:	2700      	movs	r7, #0
		break;
    2fde:	e0b7      	b.n	3150 <stb_ccm_secure+0x1c8>

	case SECURITY_05_LEVEL:
		/* MIC-32 & Encryption at Security Level -5 */
		mic_len = LEN_MIC_32;
		enc_flag = ENCRYPTION_REQD;
    2fe0:	2301      	movs	r3, #1
    2fe2:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    2fe4:	2704      	movs	r7, #4
		break;
    2fe6:	e0b3      	b.n	3150 <stb_ccm_secure+0x1c8>

	case SECURITY_06_LEVEL:
		/* MIC-64 & Encryption at Security Level -6 */
		mic_len = LEN_MIC_64;
		enc_flag = ENCRYPTION_REQD;
    2fe8:	2301      	movs	r3, #1
    2fea:	4698      	mov	r8, r3
		mic_len = LEN_MIC_64;
    2fec:	2708      	movs	r7, #8
		break;
    2fee:	e0af      	b.n	3150 <stb_ccm_secure+0x1c8>

	case SECURITY_07_LEVEL:
		/* MIC-128 & Encryption at Security Level -7 */
		mic_len = LEN_MIC_128;
		enc_flag = ENCRYPTION_REQD;
    2ff0:	2301      	movs	r3, #1
    2ff2:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    2ff4:	2710      	movs	r7, #16
		break;
    2ff6:	e0ab      	b.n	3150 <stb_ccm_secure+0x1c8>
		break;
	}

	/* Test on correct parameters. */

	if ((sec_level & ~0x7) ||
    2ff8:	2307      	movs	r3, #7
    2ffa:	439f      	bics	r7, r3
    2ffc:	d000      	beq.n	3000 <stb_ccm_secure+0x78>
    2ffe:	e0b5      	b.n	316c <stb_ccm_secure+0x1e4>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    3000:	46b8      	mov	r8, r7
    3002:	e0a5      	b.n	3150 <stb_ccm_secure+0x1c8>
			(nonce == NULL) ||
			((uint16_t)pld_len + (uint16_t)hdr_len +
			(uint16_t)mic_len > 127)
			) {
#if (SAL_TYPE != ATXMEGA_SAL)
		TRX_SLEEP();
    3004:	4b65      	ldr	r3, [pc, #404]	; (319c <stb_ccm_secure+0x214>)
    3006:	4798      	blx	r3
    3008:	e0b5      	b.n	3176 <stb_ccm_secure+0x1ee>
		sal_aes_clean_up();
#endif
		return (STB_CCM_ILLPARM);
	}

	if (key_change && (key == NULL)) {
    300a:	4b65      	ldr	r3, [pc, #404]	; (31a0 <stb_ccm_secure+0x218>)
    300c:	781b      	ldrb	r3, [r3, #0]
    300e:	2b00      	cmp	r3, #0
    3010:	d01a      	beq.n	3048 <stb_ccm_secure+0xc0>
    3012:	2c00      	cmp	r4, #0
    3014:	d00d      	beq.n	3032 <stb_ccm_secure+0xaa>
	if (key_change) {
		/*
		 * Key must be non-NULL because of test above, and
		 * ECB encryption is always the initial encryption mode.
		 */
		sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    3016:	2200      	movs	r2, #0
    3018:	2100      	movs	r1, #0
    301a:	0020      	movs	r0, r4
    301c:	4b61      	ldr	r3, [pc, #388]	; (31a4 <stb_ccm_secure+0x21c>)
    301e:	4798      	blx	r3
		memcpy(last_key, key, AES_KEYSIZE);
    3020:	2210      	movs	r2, #16
    3022:	0021      	movs	r1, r4
    3024:	4860      	ldr	r0, [pc, #384]	; (31a8 <stb_ccm_secure+0x220>)
    3026:	4b61      	ldr	r3, [pc, #388]	; (31ac <stb_ccm_secure+0x224>)
    3028:	4798      	blx	r3
		key_change = false;
    302a:	2200      	movs	r2, #0
    302c:	4b5c      	ldr	r3, [pc, #368]	; (31a0 <stb_ccm_secure+0x218>)
    302e:	701a      	strb	r2, [r3, #0]
    3030:	e01e      	b.n	3070 <stb_ccm_secure+0xe8>
		TRX_SLEEP();
    3032:	4b57      	ldr	r3, [pc, #348]	; (3190 <stb_ccm_secure+0x208>)
    3034:	781b      	ldrb	r3, [r3, #0]
    3036:	2b01      	cmp	r3, #1
    3038:	d003      	beq.n	3042 <stb_ccm_secure+0xba>
		sal_aes_clean_up();
    303a:	4b5d      	ldr	r3, [pc, #372]	; (31b0 <stb_ccm_secure+0x228>)
    303c:	4798      	blx	r3
		return (STB_CCM_KEYMISS);
    303e:	2002      	movs	r0, #2
    3040:	e09c      	b.n	317c <stb_ccm_secure+0x1f4>
		TRX_SLEEP();
    3042:	4b56      	ldr	r3, [pc, #344]	; (319c <stb_ccm_secure+0x214>)
    3044:	4798      	blx	r3
    3046:	e7f8      	b.n	303a <stb_ccm_secure+0xb2>
	if (!key_change && key != NULL) { /* There was some previous key. */
    3048:	2c00      	cmp	r4, #0
    304a:	d011      	beq.n	3070 <stb_ccm_secure+0xe8>
    304c:	220f      	movs	r2, #15
			key_change |= (last_key[i] ^ key[i]);
    304e:	4956      	ldr	r1, [pc, #344]	; (31a8 <stb_ccm_secure+0x220>)
    3050:	0018      	movs	r0, r3
    3052:	46ac      	mov	ip, r5
    3054:	5c53      	ldrb	r3, [r2, r1]
    3056:	5ca5      	ldrb	r5, [r4, r2]
    3058:	406b      	eors	r3, r5
    305a:	4303      	orrs	r3, r0
    305c:	1e58      	subs	r0, r3, #1
    305e:	4183      	sbcs	r3, r0
    3060:	b2d8      	uxtb	r0, r3
		for (i = AES_BLOCKSIZE; i--; /* */) {
    3062:	3a01      	subs	r2, #1
    3064:	d2f6      	bcs.n	3054 <stb_ccm_secure+0xcc>
    3066:	4665      	mov	r5, ip
    3068:	4a4d      	ldr	r2, [pc, #308]	; (31a0 <stb_ccm_secure+0x218>)
    306a:	7010      	strb	r0, [r2, #0]
	if (key_change) {
    306c:	2800      	cmp	r0, #0
    306e:	d1d2      	bne.n	3016 <stb_ccm_secure+0x8e>
	}

	/* Prepare nonce. */
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */

	if (mic_len > 0) {
    3070:	2f00      	cmp	r7, #0
    3072:	d129      	bne.n	30c8 <stb_ccm_secure+0x140>
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */
    3074:	2301      	movs	r3, #1
    3076:	702b      	strb	r3, [r5, #0]
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
	}

	if (hdr_len) {
    3078:	9b04      	ldr	r3, [sp, #16]
    307a:	2b00      	cmp	r3, #0
    307c:	d003      	beq.n	3086 <stb_ccm_secure+0xfe>
		nonce[0] |= ADATA;
    307e:	782b      	ldrb	r3, [r5, #0]
    3080:	2240      	movs	r2, #64	; 0x40
    3082:	4313      	orrs	r3, r2
    3084:	702b      	strb	r3, [r5, #0]
	}

	nonce_0 = nonce[0];
    3086:	782b      	ldrb	r3, [r5, #0]
    3088:	4699      	mov	r9, r3
	nonce[AES_BLOCKSIZE - 2] = 0;
    308a:	2300      	movs	r3, #0
    308c:	73ab      	strb	r3, [r5, #14]

	if (aes_dir == AES_DIR_ENCRYPT) {
    308e:	4653      	mov	r3, sl
    3090:	2b00      	cmp	r3, #0
    3092:	d12a      	bne.n	30ea <stb_ccm_secure+0x162>
		/* Authenticate. */
		if (mic_len > 0) {
    3094:	2f00      	cmp	r7, #0
    3096:	d003      	beq.n	30a0 <stb_ccm_secure+0x118>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    3098:	73ee      	strb	r6, [r5, #15]

			if (ENCRYPTION_REQD == enc_flag) {
    309a:	4643      	mov	r3, r8
    309c:	2b01      	cmp	r3, #1
    309e:	d01a      	beq.n	30d6 <stb_ccm_secure+0x14e>
						hdr_len,
						pld_len);
			}
		}

		nonce[0] = PLAINTEXT_FLAG;
    30a0:	2301      	movs	r3, #1
    30a2:	702b      	strb	r3, [r5, #0]
		encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    30a4:	9b03      	ldr	r3, [sp, #12]
    30a6:	9a04      	ldr	r2, [sp, #16]
    30a8:	4694      	mov	ip, r2
    30aa:	4463      	add	r3, ip
    30ac:	0018      	movs	r0, r3
    30ae:	0033      	movs	r3, r6
    30b0:	003a      	movs	r2, r7
    30b2:	0029      	movs	r1, r5
    30b4:	4c3f      	ldr	r4, [pc, #252]	; (31b4 <stb_ccm_secure+0x22c>)
    30b6:	47a0      	blx	r4
			}
		}
	}

#if (SAL_TYPE != ATXMEGA_SAL)
	TRX_SLEEP();
    30b8:	4b35      	ldr	r3, [pc, #212]	; (3190 <stb_ccm_secure+0x208>)
    30ba:	781b      	ldrb	r3, [r3, #0]
    30bc:	2b01      	cmp	r3, #1
    30be:	d03d      	beq.n	313c <stb_ccm_secure+0x1b4>
	sal_aes_clean_up();
    30c0:	4b3b      	ldr	r3, [pc, #236]	; (31b0 <stb_ccm_secure+0x228>)
    30c2:	4798      	blx	r3
#endif
	return (STB_CCM_OK);
    30c4:	2000      	movs	r0, #0
    30c6:	e059      	b.n	317c <stb_ccm_secure+0x1f4>
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
    30c8:	9b05      	ldr	r3, [sp, #20]
    30ca:	3b02      	subs	r3, #2
    30cc:	009b      	lsls	r3, r3, #2
    30ce:	2201      	movs	r2, #1
    30d0:	4313      	orrs	r3, r2
    30d2:	702b      	strb	r3, [r5, #0]
    30d4:	e7d0      	b.n	3078 <stb_ccm_secure+0xf0>
						buffer + hdr_len + pld_len,
    30d6:	9b04      	ldr	r3, [sp, #16]
    30d8:	1999      	adds	r1, r3, r6
				compute_mic(buffer,
    30da:	9803      	ldr	r0, [sp, #12]
    30dc:	4684      	mov	ip, r0
    30de:	4461      	add	r1, ip
    30e0:	9600      	str	r6, [sp, #0]
    30e2:	002a      	movs	r2, r5
    30e4:	4c34      	ldr	r4, [pc, #208]	; (31b8 <stb_ccm_secure+0x230>)
    30e6:	47a0      	blx	r4
    30e8:	e7da      	b.n	30a0 <stb_ccm_secure+0x118>
		if (enc_flag == ENCRYPTION_REQD) {
    30ea:	4643      	mov	r3, r8
    30ec:	2b01      	cmp	r3, #1
    30ee:	d00d      	beq.n	310c <stb_ccm_secure+0x184>
		if (mic_len > 0) {
    30f0:	2f00      	cmp	r7, #0
    30f2:	d0e1      	beq.n	30b8 <stb_ccm_secure+0x130>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    30f4:	73ee      	strb	r6, [r5, #15]
			buffer += hdr_len + pld_len;
    30f6:	9b03      	ldr	r3, [sp, #12]
    30f8:	445b      	add	r3, fp
    30fa:	0018      	movs	r0, r3
			if (memcmp(buffer, rcvd_mic, mic_len)) {
    30fc:	003a      	movs	r2, r7
    30fe:	a906      	add	r1, sp, #24
    3100:	4b2e      	ldr	r3, [pc, #184]	; (31bc <stb_ccm_secure+0x234>)
    3102:	4798      	blx	r3
    3104:	2800      	cmp	r0, #0
    3106:	d0d7      	beq.n	30b8 <stb_ccm_secure+0x130>
				return STB_CCM_MICERR;
    3108:	2003      	movs	r0, #3
    310a:	e037      	b.n	317c <stb_ccm_secure+0x1f4>
			nonce[0] = PLAINTEXT_FLAG;
    310c:	702b      	strb	r3, [r5, #0]
			encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    310e:	9b03      	ldr	r3, [sp, #12]
    3110:	9a04      	ldr	r2, [sp, #16]
    3112:	4694      	mov	ip, r2
    3114:	4463      	add	r3, ip
    3116:	0018      	movs	r0, r3
    3118:	0033      	movs	r3, r6
    311a:	003a      	movs	r2, r7
    311c:	0029      	movs	r1, r5
    311e:	4c25      	ldr	r4, [pc, #148]	; (31b4 <stb_ccm_secure+0x22c>)
    3120:	47a0      	blx	r4
		if (mic_len > 0) {
    3122:	2f00      	cmp	r7, #0
    3124:	d0c8      	beq.n	30b8 <stb_ccm_secure+0x130>
			nonce[0] = nonce_0;
    3126:	464b      	mov	r3, r9
    3128:	702b      	strb	r3, [r5, #0]
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    312a:	73ee      	strb	r6, [r5, #15]
				compute_mic(buffer,
    312c:	9600      	str	r6, [sp, #0]
    312e:	9b04      	ldr	r3, [sp, #16]
    3130:	002a      	movs	r2, r5
    3132:	a906      	add	r1, sp, #24
    3134:	9803      	ldr	r0, [sp, #12]
    3136:	4c20      	ldr	r4, [pc, #128]	; (31b8 <stb_ccm_secure+0x230>)
    3138:	47a0      	blx	r4
    313a:	e7dc      	b.n	30f6 <stb_ccm_secure+0x16e>
	TRX_SLEEP();
    313c:	4b17      	ldr	r3, [pc, #92]	; (319c <stb_ccm_secure+0x214>)
    313e:	4798      	blx	r3
    3140:	e7be      	b.n	30c0 <stb_ccm_secure+0x138>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    3142:	2300      	movs	r3, #0
    3144:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    3146:	2704      	movs	r7, #4
    3148:	e002      	b.n	3150 <stb_ccm_secure+0x1c8>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    314a:	2300      	movs	r3, #0
    314c:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    314e:	2710      	movs	r7, #16
	if ((sec_level & ~0x7) ||
    3150:	9b03      	ldr	r3, [sp, #12]
    3152:	2b00      	cmp	r3, #0
    3154:	d00a      	beq.n	316c <stb_ccm_secure+0x1e4>
			(buffer == NULL) ||
    3156:	2d00      	cmp	r5, #0
    3158:	d008      	beq.n	316c <stb_ccm_secure+0x1e4>
			((uint16_t)pld_len + (uint16_t)hdr_len +
    315a:	9b04      	ldr	r3, [sp, #16]
    315c:	469b      	mov	fp, r3
    315e:	44b3      	add	fp, r6
			(uint16_t)mic_len > 127)
    3160:	9705      	str	r7, [sp, #20]
			((uint16_t)pld_len + (uint16_t)hdr_len +
    3162:	465b      	mov	r3, fp
    3164:	19db      	adds	r3, r3, r7
			(nonce == NULL) ||
    3166:	2b7f      	cmp	r3, #127	; 0x7f
    3168:	dc00      	bgt.n	316c <stb_ccm_secure+0x1e4>
    316a:	e74e      	b.n	300a <stb_ccm_secure+0x82>
		TRX_SLEEP();
    316c:	4b08      	ldr	r3, [pc, #32]	; (3190 <stb_ccm_secure+0x208>)
    316e:	781b      	ldrb	r3, [r3, #0]
    3170:	2b01      	cmp	r3, #1
    3172:	d100      	bne.n	3176 <stb_ccm_secure+0x1ee>
    3174:	e746      	b.n	3004 <stb_ccm_secure+0x7c>
		sal_aes_clean_up();
    3176:	4b0e      	ldr	r3, [pc, #56]	; (31b0 <stb_ccm_secure+0x228>)
    3178:	4798      	blx	r3
		return (STB_CCM_ILLPARM);
    317a:	2001      	movs	r0, #1
}
    317c:	b00b      	add	sp, #44	; 0x2c
    317e:	bc3c      	pop	{r2, r3, r4, r5}
    3180:	4690      	mov	r8, r2
    3182:	4699      	mov	r9, r3
    3184:	46a2      	mov	sl, r4
    3186:	46ab      	mov	fp, r5
    3188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	200002c1 	.word	0x200002c1
    3190:	200002c0 	.word	0x200002c0
    3194:	000038a9 	.word	0x000038a9
    3198:	0000a1ec 	.word	0x0000a1ec
    319c:	00002ddd 	.word	0x00002ddd
    31a0:	2000006c 	.word	0x2000006c
    31a4:	00003969 	.word	0x00003969
    31a8:	200002b0 	.word	0x200002b0
    31ac:	0000926f 	.word	0x0000926f
    31b0:	000038f9 	.word	0x000038f9
    31b4:	000032b1 	.word	0x000032b1
    31b8:	00003225 	.word	0x00003225
    31bc:	00009251 	.word	0x00009251

000031c0 <encrypt_with_padding>:
 *
 * @param start Pointer to start address
 * @param buflen Number of bytes to be encrypted; if 0, nothing happens
 */
void encrypt_with_padding(uint8_t *start, uint8_t buflen)
{
    31c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31c2:	b085      	sub	sp, #20
    31c4:	0004      	movs	r4, r0
    31c6:	000e      	movs	r6, r1
	/* Encrypt the "full blocks". */
	while (buflen >= AES_BLOCKSIZE) {
    31c8:	290f      	cmp	r1, #15
    31ca:	d90f      	bls.n	31ec <encrypt_with_padding+0x2c>
    31cc:	000d      	movs	r5, r1
    31ce:	3d10      	subs	r5, #16
    31d0:	b2ed      	uxtb	r5, r5
    31d2:	092d      	lsrs	r5, r5, #4
    31d4:	3501      	adds	r5, #1
    31d6:	012d      	lsls	r5, r5, #4
    31d8:	1945      	adds	r5, r0, r5
#if (SAL_TYPE == AT86RF2xx)
		sal_aes_wrrd(start, NULL);
    31da:	4f0f      	ldr	r7, [pc, #60]	; (3218 <encrypt_with_padding+0x58>)
    31dc:	2100      	movs	r1, #0
    31de:	0020      	movs	r0, r4
    31e0:	47b8      	blx	r7
#else
		sal_aes_exec(start);
#endif
		start += AES_BLOCKSIZE;
    31e2:	3410      	adds	r4, #16
	while (buflen >= AES_BLOCKSIZE) {
    31e4:	42ac      	cmp	r4, r5
    31e6:	d1f9      	bne.n	31dc <encrypt_with_padding+0x1c>
    31e8:	230f      	movs	r3, #15
    31ea:	401e      	ands	r6, r3
		buflen -= AES_BLOCKSIZE;
	}

	/* Pad the possible rest and encrypt it. */
	if (buflen) {
    31ec:	2e00      	cmp	r6, #0
    31ee:	d101      	bne.n	31f4 <encrypt_with_padding+0x34>
		sal_aes_wrrd(locbuf, NULL);
#else
		sal_aes_exec(locbuf);
#endif
	}
}
    31f0:	b005      	add	sp, #20
    31f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(locbuf, start, buflen);
    31f4:	0032      	movs	r2, r6
    31f6:	0021      	movs	r1, r4
    31f8:	4668      	mov	r0, sp
    31fa:	4b08      	ldr	r3, [pc, #32]	; (321c <encrypt_with_padding+0x5c>)
    31fc:	4798      	blx	r3
		memset(locbuf + buflen, 0, AES_BLOCKSIZE - buflen);
    31fe:	2210      	movs	r2, #16
    3200:	1b92      	subs	r2, r2, r6
    3202:	0030      	movs	r0, r6
    3204:	4468      	add	r0, sp
    3206:	2100      	movs	r1, #0
    3208:	4b05      	ldr	r3, [pc, #20]	; (3220 <encrypt_with_padding+0x60>)
    320a:	4798      	blx	r3
		sal_aes_wrrd(locbuf, NULL);
    320c:	2100      	movs	r1, #0
    320e:	4668      	mov	r0, sp
    3210:	4b01      	ldr	r3, [pc, #4]	; (3218 <encrypt_with_padding+0x58>)
    3212:	4798      	blx	r3
}
    3214:	e7ec      	b.n	31f0 <encrypt_with_padding+0x30>
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	000038fd 	.word	0x000038fd
    321c:	0000926f 	.word	0x0000926f
    3220:	00009281 	.word	0x00009281

00003224 <compute_mic>:
void compute_mic(uint8_t *buffer,
		uint8_t *mic,
		uint8_t *nonce,
		uint8_t hdr_len,
		uint8_t pld_len)
{
    3224:	b5f0      	push	{r4, r5, r6, r7, lr}
    3226:	b087      	sub	sp, #28
    3228:	0005      	movs	r5, r0
    322a:	9100      	str	r1, [sp, #0]
    322c:	9201      	str	r2, [sp, #4]
    322e:	001c      	movs	r4, r3
    3230:	ab0c      	add	r3, sp, #48	; 0x30
    3232:	781e      	ldrb	r6, [r3, #0]
	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    3234:	2200      	movs	r2, #0
    3236:	2100      	movs	r1, #0
    3238:	2000      	movs	r0, #0
    323a:	4f18      	ldr	r7, [pc, #96]	; (329c <compute_mic+0x78>)
    323c:	47b8      	blx	r7
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(nonce, NULL);
    323e:	2100      	movs	r1, #0
    3240:	9801      	ldr	r0, [sp, #4]
    3242:	4b17      	ldr	r3, [pc, #92]	; (32a0 <compute_mic+0x7c>)
    3244:	4798      	blx	r3
#else
	sal_aes_exec(nonce);
#endif
	sal_aes_setup(NULL, AES_MODE_CBC, AES_DIR_ENCRYPT);
    3246:	2200      	movs	r2, #0
    3248:	2102      	movs	r1, #2
    324a:	2000      	movs	r0, #0
    324c:	47b8      	blx	r7

	if (hdr_len) {
    324e:	2c00      	cmp	r4, #0
    3250:	d108      	bne.n	3264 <compute_mic+0x40>
			encrypt_with_padding(buffer + firstlen,
					hdr_len - firstlen);
		}
	}

	encrypt_with_padding(buffer + hdr_len, pld_len);
    3252:	1928      	adds	r0, r5, r4
    3254:	0031      	movs	r1, r6
    3256:	4b13      	ldr	r3, [pc, #76]	; (32a4 <compute_mic+0x80>)
    3258:	4798      	blx	r3

	sal_aes_read(mic);
    325a:	9800      	ldr	r0, [sp, #0]
    325c:	4b12      	ldr	r3, [pc, #72]	; (32a8 <compute_mic+0x84>)
    325e:	4798      	blx	r3
}
    3260:	b007      	add	sp, #28
    3262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		firstlen = MIN(AES_BLOCKSIZE - 2, hdr_len);
    3264:	1c27      	adds	r7, r4, #0
    3266:	2c0e      	cmp	r4, #14
    3268:	d900      	bls.n	326c <compute_mic+0x48>
    326a:	270e      	movs	r7, #14
    326c:	b2ff      	uxtb	r7, r7
		locbuf[0] = 0;
    326e:	2300      	movs	r3, #0
    3270:	aa02      	add	r2, sp, #8
    3272:	7013      	strb	r3, [r2, #0]
		locbuf[1] = hdr_len;
    3274:	0013      	movs	r3, r2
    3276:	7054      	strb	r4, [r2, #1]
		memcpy(locbuf + 2, buffer, firstlen);
    3278:	003a      	movs	r2, r7
    327a:	0029      	movs	r1, r5
    327c:	1c98      	adds	r0, r3, #2
    327e:	4b0b      	ldr	r3, [pc, #44]	; (32ac <compute_mic+0x88>)
    3280:	4798      	blx	r3
		encrypt_with_padding(locbuf, firstlen + 2);
    3282:	1cb9      	adds	r1, r7, #2
    3284:	b2c9      	uxtb	r1, r1
    3286:	a802      	add	r0, sp, #8
    3288:	4b06      	ldr	r3, [pc, #24]	; (32a4 <compute_mic+0x80>)
    328a:	4798      	blx	r3
		if (firstlen < hdr_len) {
    328c:	42bc      	cmp	r4, r7
    328e:	d9e0      	bls.n	3252 <compute_mic+0x2e>
			encrypt_with_padding(buffer + firstlen,
    3290:	1be1      	subs	r1, r4, r7
    3292:	b2c9      	uxtb	r1, r1
    3294:	19e8      	adds	r0, r5, r7
    3296:	4b03      	ldr	r3, [pc, #12]	; (32a4 <compute_mic+0x80>)
    3298:	4798      	blx	r3
    329a:	e7da      	b.n	3252 <compute_mic+0x2e>
    329c:	00003969 	.word	0x00003969
    32a0:	000038fd 	.word	0x000038fd
    32a4:	000031c1 	.word	0x000031c1
    32a8:	00003aa1 	.word	0x00003aa1
    32ac:	0000926f 	.word	0x0000926f

000032b0 <encrypt_pldmic>:
 */
void encrypt_pldmic(uint8_t *buffer,
		uint8_t *nonce,
		uint8_t mic_len,
		uint8_t pld_len)
{
    32b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32b2:	46d6      	mov	lr, sl
    32b4:	464f      	mov	r7, r9
    32b6:	4646      	mov	r6, r8
    32b8:	b5c0      	push	{r6, r7, lr}
    32ba:	b084      	sub	sp, #16
    32bc:	0004      	movs	r4, r0
    32be:	000f      	movs	r7, r1
    32c0:	0016      	movs	r6, r2
    32c2:	001d      	movs	r5, r3
	uint8_t ctr;
	uint8_t i;
	uint8_t keystream[AES_BLOCKSIZE];
	uint8_t *keystreamptr;

	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    32c4:	2200      	movs	r2, #0
    32c6:	2100      	movs	r1, #0
    32c8:	2000      	movs	r0, #0
    32ca:	4b31      	ldr	r3, [pc, #196]	; (3390 <encrypt_pldmic+0xe0>)
    32cc:	4798      	blx	r3

	/* Init first keystream block. */
	nonce[AES_BLOCKSIZE - 1] = ctr = 1;
    32ce:	2301      	movs	r3, #1
    32d0:	73fb      	strb	r3, [r7, #15]

	if (pld_len > 0) {
    32d2:	2d00      	cmp	r5, #0
    32d4:	d106      	bne.n	32e4 <encrypt_pldmic+0x34>
{
    32d6:	2301      	movs	r3, #1
    32d8:	469a      	mov	sl, r3
				/* Prepare the keystream for MIC. */
				nonce[AES_BLOCKSIZE - 1] = 0;

				sal_aes_wrrd(nonce, keystream);
			} else {
				sal_aes_read(keystream);
    32da:	4b2e      	ldr	r3, [pc, #184]	; (3394 <encrypt_pldmic+0xe4>)
    32dc:	4699      	mov	r9, r3
				sal_aes_wrrd(nonce, keystream);
    32de:	4b2e      	ldr	r3, [pc, #184]	; (3398 <encrypt_pldmic+0xe8>)
    32e0:	4698      	mov	r8, r3
    32e2:	e02e      	b.n	3342 <encrypt_pldmic+0x92>
		sal_aes_wrrd(nonce, NULL);
    32e4:	2100      	movs	r1, #0
    32e6:	0038      	movs	r0, r7
    32e8:	4b2b      	ldr	r3, [pc, #172]	; (3398 <encrypt_pldmic+0xe8>)
    32ea:	4798      	blx	r3
    32ec:	e7f3      	b.n	32d6 <encrypt_pldmic+0x26>
				sal_aes_read(keystream);
    32ee:	4668      	mov	r0, sp
    32f0:	47c8      	blx	r9
    32f2:	e02f      	b.n	3354 <encrypt_pldmic+0xa4>
			}
		} else {
			/* Prepare the next keystream block. */
			nonce[AES_BLOCKSIZE - 1] = ++ctr;
    32f4:	4653      	mov	r3, sl
    32f6:	3301      	adds	r3, #1
    32f8:	b2db      	uxtb	r3, r3
    32fa:	469a      	mov	sl, r3
    32fc:	73fb      	strb	r3, [r7, #15]

			sal_aes_wrrd(nonce, keystream);
    32fe:	4669      	mov	r1, sp
    3300:	0038      	movs	r0, r7
    3302:	4b25      	ldr	r3, [pc, #148]	; (3398 <encrypt_pldmic+0xe8>)
    3304:	4798      	blx	r3
		}

		/* En/decrypt payload. */

		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3306:	1c2b      	adds	r3, r5, #0
    3308:	2d10      	cmp	r5, #16
    330a:	d900      	bls.n	330e <encrypt_pldmic+0x5e>
    330c:	2310      	movs	r3, #16
    330e:	b2db      	uxtb	r3, r3
				i--;
    3310:	1e58      	subs	r0, r3, #1
    3312:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3314:	2b00      	cmp	r3, #0
    3316:	d105      	bne.n	3324 <encrypt_pldmic+0x74>
    3318:	e011      	b.n	333e <encrypt_pldmic+0x8e>
    331a:	b2db      	uxtb	r3, r3
				i--;
    331c:	1e58      	subs	r0, r3, #1
    331e:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3320:	2b00      	cmp	r3, #0
    3322:	d01c      	beq.n	335e <encrypt_pldmic+0xae>
    3324:	3001      	adds	r0, #1
{
    3326:	2300      	movs	r3, #0
		                /* */) {
			*buffer++ ^= *keystreamptr++;
    3328:	466a      	mov	r2, sp
    332a:	5c9a      	ldrb	r2, [r3, r2]
    332c:	5ce1      	ldrb	r1, [r4, r3]
    332e:	404a      	eors	r2, r1
    3330:	54e2      	strb	r2, [r4, r3]
    3332:	3301      	adds	r3, #1
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3334:	4298      	cmp	r0, r3
    3336:	d1f7      	bne.n	3328 <encrypt_pldmic+0x78>
    3338:	18e4      	adds	r4, r4, r3
		}

		if (pld_len <= AES_BLOCKSIZE) {
    333a:	2d10      	cmp	r5, #16
    333c:	d90f      	bls.n	335e <encrypt_pldmic+0xae>
			break;
		}

		pld_len -= AES_BLOCKSIZE;
    333e:	3d10      	subs	r5, #16
    3340:	b2ed      	uxtb	r5, r5
		if (pld_len <= AES_BLOCKSIZE) { /* Last block */
    3342:	2d10      	cmp	r5, #16
    3344:	d8d6      	bhi.n	32f4 <encrypt_pldmic+0x44>
			if (mic_len) {
    3346:	2e00      	cmp	r6, #0
    3348:	d0d1      	beq.n	32ee <encrypt_pldmic+0x3e>
				nonce[AES_BLOCKSIZE - 1] = 0;
    334a:	2300      	movs	r3, #0
    334c:	73fb      	strb	r3, [r7, #15]
				sal_aes_wrrd(nonce, keystream);
    334e:	4669      	mov	r1, sp
    3350:	0038      	movs	r0, r7
    3352:	47c0      	blx	r8
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3354:	1c2b      	adds	r3, r5, #0
    3356:	2d10      	cmp	r5, #16
    3358:	d9df      	bls.n	331a <encrypt_pldmic+0x6a>
    335a:	2310      	movs	r3, #16
    335c:	e7dd      	b.n	331a <encrypt_pldmic+0x6a>
	}

	/* En/decrypt MIC. */

	if (mic_len) {
    335e:	2e00      	cmp	r6, #0
    3360:	d105      	bne.n	336e <encrypt_pldmic+0xbe>

		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
			*buffer++ ^= *keystreamptr++;
		}
	}
}
    3362:	b004      	add	sp, #16
    3364:	bc1c      	pop	{r2, r3, r4}
    3366:	4690      	mov	r8, r2
    3368:	4699      	mov	r9, r3
    336a:	46a2      	mov	sl, r4
    336c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sal_aes_read(keystream);
    336e:	4668      	mov	r0, sp
    3370:	4b08      	ldr	r3, [pc, #32]	; (3394 <encrypt_pldmic+0xe4>)
    3372:	4798      	blx	r3
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    3374:	3e01      	subs	r6, #1
    3376:	b2f2      	uxtb	r2, r6
    3378:	3201      	adds	r2, #1
    337a:	2300      	movs	r3, #0
			*buffer++ ^= *keystreamptr++;
    337c:	4669      	mov	r1, sp
    337e:	5c59      	ldrb	r1, [r3, r1]
    3380:	5ce0      	ldrb	r0, [r4, r3]
    3382:	4041      	eors	r1, r0
    3384:	54e1      	strb	r1, [r4, r3]
    3386:	3301      	adds	r3, #1
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    3388:	4293      	cmp	r3, r2
    338a:	d1f7      	bne.n	337c <encrypt_pldmic+0xcc>
    338c:	e7e9      	b.n	3362 <encrypt_pldmic+0xb2>
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	00003969 	.word	0x00003969
    3394:	00003aa1 	.word	0x00003aa1
    3398:	000038fd 	.word	0x000038fd

0000339c <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
uint8_t* MiMem_Alloc(uint8_t size)
{
    339c:	b510      	push	{r4, lr}
    uint8_t loopIndex = 0;

    if (size <= MIMEM_BUFFER_SIZE)
    339e:	28a0      	cmp	r0, #160	; 0xa0
    33a0:	d81c      	bhi.n	33dc <MiMem_Alloc+0x40>
    {
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
        {
            if (mimemBuffers[loopIndex].bufferFlag == false)
    33a2:	23a4      	movs	r3, #164	; 0xa4
    33a4:	4a0e      	ldr	r2, [pc, #56]	; (33e0 <MiMem_Alloc+0x44>)
    33a6:	5cd3      	ldrb	r3, [r2, r3]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d00d      	beq.n	33c8 <MiMem_Alloc+0x2c>
    33ac:	4b0d      	ldr	r3, [pc, #52]	; (33e4 <MiMem_Alloc+0x48>)
    33ae:	4a0e      	ldr	r2, [pc, #56]	; (33e8 <MiMem_Alloc+0x4c>)
    33b0:	189c      	adds	r4, r3, r2
    33b2:	2201      	movs	r2, #1
    33b4:	0010      	movs	r0, r2
    33b6:	7819      	ldrb	r1, [r3, #0]
    33b8:	2900      	cmp	r1, #0
    33ba:	d006      	beq.n	33ca <MiMem_Alloc+0x2e>
    33bc:	3201      	adds	r2, #1
    33be:	33a8      	adds	r3, #168	; 0xa8
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    33c0:	42a3      	cmp	r3, r4
    33c2:	d1f7      	bne.n	33b4 <MiMem_Alloc+0x18>
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
            }
        }
    }
    //printf("\r\n MiMem Buffer Full/unavailable for given size");
    return NULL;
    33c4:	2000      	movs	r0, #0
    33c6:	e008      	b.n	33da <MiMem_Alloc+0x3e>
            if (mimemBuffers[loopIndex].bufferFlag == false)
    33c8:	2000      	movs	r0, #0
                mimemBuffers[loopIndex].bufferFlag = true;
    33ca:	23a8      	movs	r3, #168	; 0xa8
    33cc:	4343      	muls	r3, r0
    33ce:	4804      	ldr	r0, [pc, #16]	; (33e0 <MiMem_Alloc+0x44>)
    33d0:	18c0      	adds	r0, r0, r3
    33d2:	0003      	movs	r3, r0
    33d4:	33a4      	adds	r3, #164	; 0xa4
    33d6:	2201      	movs	r2, #1
    33d8:	701a      	strb	r2, [r3, #0]
}
    33da:	bd10      	pop	{r4, pc}
    return NULL;
    33dc:	2000      	movs	r0, #0
    33de:	e7fc      	b.n	33da <MiMem_Alloc+0x3e>
    33e0:	200017a0 	.word	0x200017a0
    33e4:	200018ec 	.word	0x200018ec
    33e8:	00001308 	.word	0x00001308

000033ec <MiMem_Free>:
* the given memory else returns error
*
* Note:			    none
********************************************************************/
uint8_t MiMem_Free(uint8_t* buffPtr)
{
    33ec:	b530      	push	{r4, r5, lr}
    33ee:	4b0d      	ldr	r3, [pc, #52]	; (3424 <MiMem_Free+0x38>)
    33f0:	2200      	movs	r2, #0
    33f2:	e003      	b.n	33fc <MiMem_Free+0x10>
    33f4:	3201      	adds	r2, #1
    33f6:	33a8      	adds	r3, #168	; 0xa8
	uint8_t loopIndex = 0;
	for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    33f8:	2a1e      	cmp	r2, #30
    33fa:	d010      	beq.n	341e <MiMem_Free+0x32>
	{
		if ((mimemBuffers[loopIndex].bufferFlag == true) &&
    33fc:	0015      	movs	r5, r2
    33fe:	0019      	movs	r1, r3
    3400:	31a4      	adds	r1, #164	; 0xa4
    3402:	7809      	ldrb	r1, [r1, #0]
    3404:	2900      	cmp	r1, #0
    3406:	d0f5      	beq.n	33f4 <MiMem_Free+0x8>
    3408:	4298      	cmp	r0, r3
    340a:	d1f3      	bne.n	33f4 <MiMem_Free+0x8>
		   ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer == buffPtr))
		{
			//printf("\r\n MiMem Buffer Free: %d", loopIndex);
			mimemBuffers[loopIndex].bufferFlag = false;
    340c:	23a8      	movs	r3, #168	; 0xa8
    340e:	435d      	muls	r5, r3
    3410:	4b04      	ldr	r3, [pc, #16]	; (3424 <MiMem_Free+0x38>)
    3412:	195d      	adds	r5, r3, r5
    3414:	35a4      	adds	r5, #164	; 0xa4
    3416:	2200      	movs	r2, #0
    3418:	702a      	strb	r2, [r5, #0]
			return 0;
    341a:	2000      	movs	r0, #0
    341c:	e000      	b.n	3420 <MiMem_Free+0x34>
		}
	}
	//printf("\r\n MiMem Buffer Already Free");
	return 0xff;
    341e:	20ff      	movs	r0, #255	; 0xff
}
    3420:	bd30      	pop	{r4, r5, pc}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	200017a0 	.word	0x200017a0

00003428 <MiMem_PercentageOfFreeBuffers>:


uint8_t MiMem_PercentageOfFreeBuffers(void)
{
    3428:	b510      	push	{r4, lr}
    342a:	4b0b      	ldr	r3, [pc, #44]	; (3458 <MiMem_PercentageOfFreeBuffers+0x30>)
    342c:	4a0b      	ldr	r2, [pc, #44]	; (345c <MiMem_PercentageOfFreeBuffers+0x34>)
    342e:	1899      	adds	r1, r3, r2
	uint8_t loopIndex = 0;
	uint8_t numUsedBuffers = 0;
    3430:	2000      	movs	r0, #0
    3432:	e002      	b.n	343a <MiMem_PercentageOfFreeBuffers+0x12>
    3434:	33a8      	adds	r3, #168	; 0xa8
	for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    3436:	428b      	cmp	r3, r1
    3438:	d005      	beq.n	3446 <MiMem_PercentageOfFreeBuffers+0x1e>
	{
		if (mimemBuffers[loopIndex].bufferFlag == true)
    343a:	781a      	ldrb	r2, [r3, #0]
    343c:	2a00      	cmp	r2, #0
    343e:	d0f9      	beq.n	3434 <MiMem_PercentageOfFreeBuffers+0xc>
		{
			numUsedBuffers++;
    3440:	3001      	adds	r0, #1
    3442:	b2c0      	uxtb	r0, r0
    3444:	e7f6      	b.n	3434 <MiMem_PercentageOfFreeBuffers+0xc>
		}
	}
	return ((NUMBER_OF_MIMEM_BUFFERS - numUsedBuffers) * 100) / NUMBER_OF_MIMEM_BUFFERS;
    3446:	231e      	movs	r3, #30
    3448:	1a1b      	subs	r3, r3, r0
    344a:	2064      	movs	r0, #100	; 0x64
    344c:	4358      	muls	r0, r3
    344e:	211e      	movs	r1, #30
    3450:	4b03      	ldr	r3, [pc, #12]	; (3460 <MiMem_PercentageOfFreeBuffers+0x38>)
    3452:	4798      	blx	r3
    3454:	b2c0      	uxtb	r0, r0
    3456:	bd10      	pop	{r4, pc}
    3458:	20001844 	.word	0x20001844
    345c:	000013b0 	.word	0x000013b0
    3460:	00008fdd 	.word	0x00008fdd

00003464 <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    3464:	b5f0      	push	{r4, r5, r6, r7, lr}
    3466:	46c6      	mov	lr, r8
    3468:	b500      	push	{lr}
    346a:	0007      	movs	r7, r0
    346c:	4688      	mov	r8, r1
    346e:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    3470:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3472:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    3476:	2200      	movs	r2, #0
    3478:	4b1f      	ldr	r3, [pc, #124]	; (34f8 <miQueueReadOrRemove+0x94>)
    347a:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    347c:	7a03      	ldrb	r3, [r0, #8]
    347e:	2b00      	cmp	r3, #0
    3480:	d037      	beq.n	34f2 <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    3482:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    3484:	2d00      	cmp	r5, #0
    3486:	d019      	beq.n	34bc <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    3488:	2c00      	cmp	r4, #0
    348a:	d00c      	beq.n	34a6 <miQueueReadOrRemove+0x42>
    348c:	0026      	movs	r6, r4
    348e:	e000      	b.n	3492 <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    3490:	001c      	movs	r4, r3
				match = search->criteria_func(
    3492:	6869      	ldr	r1, [r5, #4]
    3494:	6860      	ldr	r0, [r4, #4]
    3496:	682b      	ldr	r3, [r5, #0]
    3498:	4798      	blx	r3
				if (match) {
    349a:	2800      	cmp	r0, #0
    349c:	d10f      	bne.n	34be <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    349e:	6823      	ldr	r3, [r4, #0]
    34a0:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    34a2:	2b00      	cmp	r3, #0
    34a4:	d1f4      	bne.n	3490 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    34a6:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    34a8:	2201      	movs	r2, #1
    34aa:	4b13      	ldr	r3, [pc, #76]	; (34f8 <miQueueReadOrRemove+0x94>)
    34ac:	701a      	strb	r2, [r3, #0]
    34ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    34b2:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    34b4:	0020      	movs	r0, r4
    34b6:	bc04      	pop	{r2}
    34b8:	4690      	mov	r8, r2
    34ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    34bc:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    34be:	2c00      	cmp	r4, #0
    34c0:	d0f2      	beq.n	34a8 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    34c2:	4643      	mov	r3, r8
    34c4:	2b00      	cmp	r3, #0
    34c6:	d1ef      	bne.n	34a8 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    34c8:	683b      	ldr	r3, [r7, #0]
    34ca:	429c      	cmp	r4, r3
    34cc:	d00c      	beq.n	34e8 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    34ce:	6823      	ldr	r3, [r4, #0]
    34d0:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	429c      	cmp	r4, r3
    34d6:	d00a      	beq.n	34ee <miQueueReadOrRemove+0x8a>
				q->size--;
    34d8:	7a3b      	ldrb	r3, [r7, #8]
    34da:	3b01      	subs	r3, #1
    34dc:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    34de:	683b      	ldr	r3, [r7, #0]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d1e1      	bne.n	34a8 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    34e4:	607b      	str	r3, [r7, #4]
    34e6:	e7df      	b.n	34a8 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    34e8:	6823      	ldr	r3, [r4, #0]
    34ea:	603b      	str	r3, [r7, #0]
    34ec:	e7f1      	b.n	34d2 <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    34ee:	607e      	str	r6, [r7, #4]
    34f0:	e7f2      	b.n	34d8 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    34f2:	2400      	movs	r4, #0
    34f4:	e7d8      	b.n	34a8 <miQueueReadOrRemove+0x44>
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	20000008 	.word	0x20000008

000034fc <miQueueInit>:
	q->head = NULL;
    34fc:	2300      	movs	r3, #0
    34fe:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    3500:	6043      	str	r3, [r0, #4]
	q->size = 0;
    3502:	7203      	strb	r3, [r0, #8]
}
    3504:	4770      	bx	lr
	...

00003508 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    3508:	b672      	cpsid	i
    350a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    350e:	2200      	movs	r2, #0
    3510:	4b0a      	ldr	r3, [pc, #40]	; (353c <miQueueAppend+0x34>)
    3512:	701a      	strb	r2, [r3, #0]
		if (q->size == 0) {
    3514:	7a03      	ldrb	r3, [r0, #8]
    3516:	2b00      	cmp	r3, #0
    3518:	d00e      	beq.n	3538 <miQueueAppend+0x30>
			q->tail->nextItem = buf;
    351a:	6843      	ldr	r3, [r0, #4]
    351c:	6019      	str	r1, [r3, #0]
		q->tail = buf;
    351e:	6041      	str	r1, [r0, #4]
		buf->nextItem = NULL;
    3520:	2300      	movs	r3, #0
    3522:	600b      	str	r3, [r1, #0]
		q->size++;
    3524:	7a03      	ldrb	r3, [r0, #8]
    3526:	3301      	adds	r3, #1
    3528:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    352a:	2201      	movs	r2, #1
    352c:	4b03      	ldr	r3, [pc, #12]	; (353c <miQueueAppend+0x34>)
    352e:	701a      	strb	r2, [r3, #0]
    3530:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3534:	b662      	cpsie	i
} /* miQueueAppend */
    3536:	4770      	bx	lr
			q->head = buf;
    3538:	6001      	str	r1, [r0, #0]
    353a:	e7f0      	b.n	351e <miQueueAppend+0x16>
    353c:	20000008 	.word	0x20000008

00003540 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    3540:	b510      	push	{r4, lr}
    3542:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    3544:	2100      	movs	r1, #0
    3546:	4b01      	ldr	r3, [pc, #4]	; (354c <miQueueRemove+0xc>)
    3548:	4798      	blx	r3
}
    354a:	bd10      	pop	{r4, pc}
    354c:	00003465 	.word	0x00003465

00003550 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3550:	b530      	push	{r4, r5, lr}
	if (timers) {
    3552:	4b14      	ldr	r3, [pc, #80]	; (35a4 <placeTimer+0x54>)
    3554:	681d      	ldr	r5, [r3, #0]
    3556:	2d00      	cmp	r5, #0
    3558:	d01c      	beq.n	3594 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    355a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    355c:	6869      	ldr	r1, [r5, #4]
    355e:	428a      	cmp	r2, r1
    3560:	d309      	bcc.n	3576 <placeTimer+0x26>
    3562:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    3564:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3566:	6823      	ldr	r3, [r4, #0]
    3568:	2b00      	cmp	r3, #0
    356a:	d008      	beq.n	357e <placeTimer+0x2e>
			if (timeout < t->timeout) {
    356c:	6859      	ldr	r1, [r3, #4]
    356e:	4291      	cmp	r1, r2
    3570:	d803      	bhi.n	357a <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3572:	001c      	movs	r4, r3
    3574:	e7f6      	b.n	3564 <placeTimer+0x14>
    3576:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    3578:	2400      	movs	r4, #0
				t->timeout -= timeout;
    357a:	1a89      	subs	r1, r1, r2
    357c:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    357e:	6042      	str	r2, [r0, #4]

		if (prev) {
    3580:	2c00      	cmp	r4, #0
    3582:	d003      	beq.n	358c <placeTimer+0x3c>
			timer->next = prev->next;
    3584:	6823      	ldr	r3, [r4, #0]
    3586:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3588:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    358a:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    358c:	6005      	str	r5, [r0, #0]
			timers = timer;
    358e:	4b05      	ldr	r3, [pc, #20]	; (35a4 <placeTimer+0x54>)
    3590:	6018      	str	r0, [r3, #0]
    3592:	e7fa      	b.n	358a <placeTimer+0x3a>
		timer->next = NULL;
    3594:	2300      	movs	r3, #0
    3596:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3598:	6883      	ldr	r3, [r0, #8]
    359a:	6043      	str	r3, [r0, #4]
		timers = timer;
    359c:	4b01      	ldr	r3, [pc, #4]	; (35a4 <placeTimer+0x54>)
    359e:	6018      	str	r0, [r3, #0]
}
    35a0:	e7f3      	b.n	358a <placeTimer+0x3a>
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	200002c4 	.word	0x200002c4

000035a8 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    35a8:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    35aa:	4a04      	ldr	r2, [pc, #16]	; (35bc <SYS_HwExpiry_Cb+0x14>)
    35ac:	7813      	ldrb	r3, [r2, #0]
    35ae:	3301      	adds	r3, #1
    35b0:	b2db      	uxtb	r3, r3
    35b2:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    35b4:	4802      	ldr	r0, [pc, #8]	; (35c0 <SYS_HwExpiry_Cb+0x18>)
    35b6:	4b03      	ldr	r3, [pc, #12]	; (35c4 <SYS_HwExpiry_Cb+0x1c>)
    35b8:	4798      	blx	r3
}
    35ba:	bd10      	pop	{r4, pc}
    35bc:	20002b50 	.word	0x20002b50
    35c0:	00002710 	.word	0x00002710
    35c4:	00004cb5 	.word	0x00004cb5

000035c8 <SYS_TimerInit>:
{
    35c8:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    35ca:	2400      	movs	r4, #0
    35cc:	4b06      	ldr	r3, [pc, #24]	; (35e8 <SYS_TimerInit+0x20>)
    35ce:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    35d0:	4806      	ldr	r0, [pc, #24]	; (35ec <SYS_TimerInit+0x24>)
    35d2:	4b07      	ldr	r3, [pc, #28]	; (35f0 <SYS_TimerInit+0x28>)
    35d4:	4798      	blx	r3
	common_tc_init();
    35d6:	4b07      	ldr	r3, [pc, #28]	; (35f4 <SYS_TimerInit+0x2c>)
    35d8:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    35da:	4807      	ldr	r0, [pc, #28]	; (35f8 <SYS_TimerInit+0x30>)
    35dc:	4b07      	ldr	r3, [pc, #28]	; (35fc <SYS_TimerInit+0x34>)
    35de:	4798      	blx	r3
	timers = NULL;
    35e0:	4b07      	ldr	r3, [pc, #28]	; (3600 <SYS_TimerInit+0x38>)
    35e2:	601c      	str	r4, [r3, #0]
}
    35e4:	bd10      	pop	{r4, pc}
    35e6:	46c0      	nop			; (mov r8, r8)
    35e8:	20002b50 	.word	0x20002b50
    35ec:	000035a9 	.word	0x000035a9
    35f0:	00004da5 	.word	0x00004da5
    35f4:	00004d21 	.word	0x00004d21
    35f8:	00002710 	.word	0x00002710
    35fc:	00004cb5 	.word	0x00004cb5
    3600:	200002c4 	.word	0x200002c4

00003604 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3604:	4b0e      	ldr	r3, [pc, #56]	; (3640 <SYS_TimerStop+0x3c>)
    3606:	681a      	ldr	r2, [r3, #0]
    3608:	2a00      	cmp	r2, #0
    360a:	d014      	beq.n	3636 <SYS_TimerStop+0x32>
		if (t == timer) {
    360c:	4282      	cmp	r2, r0
    360e:	d013      	beq.n	3638 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3610:	6813      	ldr	r3, [r2, #0]
    3612:	2b00      	cmp	r3, #0
    3614:	d00f      	beq.n	3636 <SYS_TimerStop+0x32>
		if (t == timer) {
    3616:	4298      	cmp	r0, r3
    3618:	d001      	beq.n	361e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    361a:	001a      	movs	r2, r3
    361c:	e7f8      	b.n	3610 <SYS_TimerStop+0xc>
			if (prev) {
    361e:	2a00      	cmp	r2, #0
    3620:	d00a      	beq.n	3638 <SYS_TimerStop+0x34>
				prev->next = t->next;
    3622:	6803      	ldr	r3, [r0, #0]
    3624:	6013      	str	r3, [r2, #0]
			if (t->next) {
    3626:	6803      	ldr	r3, [r0, #0]
    3628:	2b00      	cmp	r3, #0
    362a:	d004      	beq.n	3636 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    362c:	6842      	ldr	r2, [r0, #4]
    362e:	6859      	ldr	r1, [r3, #4]
    3630:	468c      	mov	ip, r1
    3632:	4462      	add	r2, ip
    3634:	605a      	str	r2, [r3, #4]
}
    3636:	4770      	bx	lr
				timers = t->next;
    3638:	4b01      	ldr	r3, [pc, #4]	; (3640 <SYS_TimerStop+0x3c>)
    363a:	6802      	ldr	r2, [r0, #0]
    363c:	601a      	str	r2, [r3, #0]
    363e:	e7f2      	b.n	3626 <SYS_TimerStop+0x22>
    3640:	200002c4 	.word	0x200002c4

00003644 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3644:	4b09      	ldr	r3, [pc, #36]	; (366c <SYS_TimerStarted+0x28>)
    3646:	681b      	ldr	r3, [r3, #0]
    3648:	2b00      	cmp	r3, #0
    364a:	d00a      	beq.n	3662 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    364c:	4283      	cmp	r3, r0
    364e:	d00a      	beq.n	3666 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3650:	681b      	ldr	r3, [r3, #0]
    3652:	2b00      	cmp	r3, #0
    3654:	d003      	beq.n	365e <SYS_TimerStarted+0x1a>
		if (t == timer) {
    3656:	4298      	cmp	r0, r3
    3658:	d1fa      	bne.n	3650 <SYS_TimerStarted+0xc>
			return true;
    365a:	2001      	movs	r0, #1
    365c:	e000      	b.n	3660 <SYS_TimerStarted+0x1c>
	return false;
    365e:	2000      	movs	r0, #0
}
    3660:	4770      	bx	lr
	return false;
    3662:	2000      	movs	r0, #0
    3664:	e7fc      	b.n	3660 <SYS_TimerStarted+0x1c>
			return true;
    3666:	2001      	movs	r0, #1
    3668:	e7fa      	b.n	3660 <SYS_TimerStarted+0x1c>
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	200002c4 	.word	0x200002c4

00003670 <SYS_TimerStart>:
{
    3670:	b510      	push	{r4, lr}
    3672:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    3674:	4b04      	ldr	r3, [pc, #16]	; (3688 <SYS_TimerStart+0x18>)
    3676:	4798      	blx	r3
    3678:	2800      	cmp	r0, #0
    367a:	d000      	beq.n	367e <SYS_TimerStart+0xe>
}
    367c:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    367e:	0020      	movs	r0, r4
    3680:	4b02      	ldr	r3, [pc, #8]	; (368c <SYS_TimerStart+0x1c>)
    3682:	4798      	blx	r3
}
    3684:	e7fa      	b.n	367c <SYS_TimerStart+0xc>
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	00003645 	.word	0x00003645
    368c:	00003551 	.word	0x00003551

00003690 <SYS_TimerTaskHandler>:
{
    3690:	b5f0      	push	{r4, r5, r6, r7, lr}
    3692:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    3694:	4b1d      	ldr	r3, [pc, #116]	; (370c <SYS_TimerTaskHandler+0x7c>)
    3696:	781b      	ldrb	r3, [r3, #0]
    3698:	2b00      	cmp	r3, #0
    369a:	d035      	beq.n	3708 <SYS_TimerTaskHandler+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    369c:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    36a0:	4253      	negs	r3, r2
    36a2:	4153      	adcs	r3, r2
    36a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    36a6:	b672      	cpsid	i
    36a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    36ac:	2100      	movs	r1, #0
    36ae:	4b18      	ldr	r3, [pc, #96]	; (3710 <SYS_TimerTaskHandler+0x80>)
    36b0:	7019      	strb	r1, [r3, #0]
	return flags;
    36b2:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    36b4:	4a15      	ldr	r2, [pc, #84]	; (370c <SYS_TimerTaskHandler+0x7c>)
    36b6:	7813      	ldrb	r3, [r2, #0]
    36b8:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    36ba:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    36bc:	2800      	cmp	r0, #0
    36be:	d005      	beq.n	36cc <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    36c0:	3101      	adds	r1, #1
    36c2:	4a13      	ldr	r2, [pc, #76]	; (3710 <SYS_TimerTaskHandler+0x80>)
    36c4:	7011      	strb	r1, [r2, #0]
    36c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    36ca:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    36cc:	009d      	lsls	r5, r3, #2
    36ce:	18ed      	adds	r5, r5, r3
    36d0:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    36d2:	4e10      	ldr	r6, [pc, #64]	; (3714 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    36d4:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    36d6:	e005      	b.n	36e4 <SYS_TimerTaskHandler+0x54>
			placeTimer(timer);
    36d8:	0020      	movs	r0, r4
    36da:	4b0f      	ldr	r3, [pc, #60]	; (3718 <SYS_TimerTaskHandler+0x88>)
    36dc:	4798      	blx	r3
    36de:	e00d      	b.n	36fc <SYS_TimerTaskHandler+0x6c>
			timer->handler(timer);
    36e0:	0020      	movs	r0, r4
    36e2:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    36e4:	6834      	ldr	r4, [r6, #0]
    36e6:	2c00      	cmp	r4, #0
    36e8:	d00e      	beq.n	3708 <SYS_TimerTaskHandler+0x78>
    36ea:	6863      	ldr	r3, [r4, #4]
    36ec:	429d      	cmp	r5, r3
    36ee:	d309      	bcc.n	3704 <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    36f0:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    36f2:	6823      	ldr	r3, [r4, #0]
    36f4:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    36f6:	7b23      	ldrb	r3, [r4, #12]
    36f8:	2b01      	cmp	r3, #1
    36fa:	d0ed      	beq.n	36d8 <SYS_TimerTaskHandler+0x48>
		if (timer->handler) {
    36fc:	6923      	ldr	r3, [r4, #16]
    36fe:	2b00      	cmp	r3, #0
    3700:	d1ee      	bne.n	36e0 <SYS_TimerTaskHandler+0x50>
    3702:	e7ef      	b.n	36e4 <SYS_TimerTaskHandler+0x54>
		timers->timeout -= elapsed;
    3704:	1b5d      	subs	r5, r3, r5
    3706:	6065      	str	r5, [r4, #4]
}
    3708:	b003      	add	sp, #12
    370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    370c:	20002b50 	.word	0x20002b50
    3710:	20000008 	.word	0x20000008
    3714:	200002c4 	.word	0x200002c4
    3718:	00003551 	.word	0x00003551

0000371c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    371c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    371e:	4b01      	ldr	r3, [pc, #4]	; (3724 <tc_cca_callback+0x8>)
    3720:	4798      	blx	r3
}
    3722:	bd10      	pop	{r4, pc}
    3724:	00004d89 	.word	0x00004d89

00003728 <tc_ovf_callback>:
{
    3728:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    372a:	4b01      	ldr	r3, [pc, #4]	; (3730 <tc_ovf_callback+0x8>)
    372c:	4798      	blx	r3
}
    372e:	bd10      	pop	{r4, pc}
    3730:	00004d41 	.word	0x00004d41

00003734 <tmr_read_count>:
{
    3734:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    3736:	4802      	ldr	r0, [pc, #8]	; (3740 <tmr_read_count+0xc>)
    3738:	4b02      	ldr	r3, [pc, #8]	; (3744 <tmr_read_count+0x10>)
    373a:	4798      	blx	r3
    373c:	b280      	uxth	r0, r0
}
    373e:	bd10      	pop	{r4, pc}
    3740:	20002b88 	.word	0x20002b88
    3744:	00001f8d 	.word	0x00001f8d

00003748 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    3748:	4b03      	ldr	r3, [pc, #12]	; (3758 <tmr_disable_cc_interrupt+0x10>)
    374a:	2110      	movs	r1, #16
    374c:	681a      	ldr	r2, [r3, #0]
    374e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    3750:	7e5a      	ldrb	r2, [r3, #25]
    3752:	438a      	bics	r2, r1
    3754:	765a      	strb	r2, [r3, #25]
}
    3756:	4770      	bx	lr
    3758:	20002b88 	.word	0x20002b88

0000375c <tmr_enable_cc_interrupt>:
{
    375c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    375e:	4c0a      	ldr	r4, [pc, #40]	; (3788 <tmr_enable_cc_interrupt+0x2c>)
    3760:	6820      	ldr	r0, [r4, #0]
    3762:	4b0a      	ldr	r3, [pc, #40]	; (378c <tmr_enable_cc_interrupt+0x30>)
    3764:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3766:	4b0a      	ldr	r3, [pc, #40]	; (3790 <tmr_enable_cc_interrupt+0x34>)
    3768:	5c1b      	ldrb	r3, [r3, r0]
    376a:	221f      	movs	r2, #31
    376c:	401a      	ands	r2, r3
    376e:	2301      	movs	r3, #1
    3770:	4093      	lsls	r3, r2
    3772:	4a08      	ldr	r2, [pc, #32]	; (3794 <tmr_enable_cc_interrupt+0x38>)
    3774:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3776:	7e63      	ldrb	r3, [r4, #25]
    3778:	2210      	movs	r2, #16
    377a:	4313      	orrs	r3, r2
    377c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    377e:	6823      	ldr	r3, [r4, #0]
    3780:	2210      	movs	r2, #16
    3782:	735a      	strb	r2, [r3, #13]
}
    3784:	bd10      	pop	{r4, pc}
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	20002b88 	.word	0x20002b88
    378c:	00001d19 	.word	0x00001d19
    3790:	0000a20c 	.word	0x0000a20c
    3794:	e000e100 	.word	0xe000e100

00003798 <tmr_write_cmpreg>:
{
    3798:	b510      	push	{r4, lr}
    379a:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    379c:	2100      	movs	r1, #0
    379e:	4802      	ldr	r0, [pc, #8]	; (37a8 <tmr_write_cmpreg+0x10>)
    37a0:	4b02      	ldr	r3, [pc, #8]	; (37ac <tmr_write_cmpreg+0x14>)
    37a2:	4798      	blx	r3
}
    37a4:	bd10      	pop	{r4, pc}
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	20002b88 	.word	0x20002b88
    37ac:	00001fb9 	.word	0x00001fb9

000037b0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    37b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b2:	46ce      	mov	lr, r9
    37b4:	4647      	mov	r7, r8
    37b6:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    37b8:	4a2d      	ldr	r2, [pc, #180]	; (3870 <tmr_init+0xc0>)
    37ba:	2300      	movs	r3, #0
    37bc:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    37be:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    37c0:	2100      	movs	r1, #0
    37c2:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    37c4:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    37c6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    37c8:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    37ca:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    37cc:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    37ce:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    37d0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    37d2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    37d4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    37d6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    37d8:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    37da:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    37dc:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    37de:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    37e0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    37e2:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    37e4:	3b01      	subs	r3, #1
    37e6:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    37e8:	4c22      	ldr	r4, [pc, #136]	; (3874 <tmr_init+0xc4>)
    37ea:	4923      	ldr	r1, [pc, #140]	; (3878 <tmr_init+0xc8>)
    37ec:	0020      	movs	r0, r4
    37ee:	4b23      	ldr	r3, [pc, #140]	; (387c <tmr_init+0xcc>)
    37f0:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    37f2:	2200      	movs	r2, #0
    37f4:	4922      	ldr	r1, [pc, #136]	; (3880 <tmr_init+0xd0>)
    37f6:	0020      	movs	r0, r4
    37f8:	4d22      	ldr	r5, [pc, #136]	; (3884 <tmr_init+0xd4>)
    37fa:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    37fc:	2202      	movs	r2, #2
    37fe:	4922      	ldr	r1, [pc, #136]	; (3888 <tmr_init+0xd8>)
    3800:	0020      	movs	r0, r4
    3802:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3804:	6820      	ldr	r0, [r4, #0]
    3806:	4b21      	ldr	r3, [pc, #132]	; (388c <tmr_init+0xdc>)
    3808:	4699      	mov	r9, r3
    380a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    380c:	4b20      	ldr	r3, [pc, #128]	; (3890 <tmr_init+0xe0>)
    380e:	4698      	mov	r8, r3
    3810:	5c1b      	ldrb	r3, [r3, r0]
    3812:	261f      	movs	r6, #31
    3814:	4033      	ands	r3, r6
    3816:	2501      	movs	r5, #1
    3818:	002a      	movs	r2, r5
    381a:	409a      	lsls	r2, r3
    381c:	4f1d      	ldr	r7, [pc, #116]	; (3894 <tmr_init+0xe4>)
    381e:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    3820:	7e63      	ldrb	r3, [r4, #25]
    3822:	2201      	movs	r2, #1
    3824:	4313      	orrs	r3, r2
    3826:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3828:	6823      	ldr	r3, [r4, #0]
    382a:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    382c:	0018      	movs	r0, r3
    382e:	47c8      	blx	r9
    3830:	4643      	mov	r3, r8
    3832:	5c1b      	ldrb	r3, [r3, r0]
    3834:	401e      	ands	r6, r3
    3836:	40b5      	lsls	r5, r6
    3838:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    383a:	7e63      	ldrb	r3, [r4, #25]
    383c:	2210      	movs	r2, #16
    383e:	4313      	orrs	r3, r2
    3840:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3842:	6822      	ldr	r2, [r4, #0]
    3844:	2310      	movs	r3, #16
    3846:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3848:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    384a:	b25b      	sxtb	r3, r3
    384c:	2b00      	cmp	r3, #0
    384e:	dbfb      	blt.n	3848 <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3850:	8813      	ldrh	r3, [r2, #0]
    3852:	2102      	movs	r1, #2
    3854:	430b      	orrs	r3, r1
    3856:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3858:	2000      	movs	r0, #0
    385a:	4b0f      	ldr	r3, [pc, #60]	; (3898 <tmr_init+0xe8>)
    385c:	4798      	blx	r3
    385e:	490f      	ldr	r1, [pc, #60]	; (389c <tmr_init+0xec>)
    3860:	4b0f      	ldr	r3, [pc, #60]	; (38a0 <tmr_init+0xf0>)
    3862:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3864:	b2c0      	uxtb	r0, r0
}
    3866:	bc0c      	pop	{r2, r3}
    3868:	4690      	mov	r8, r2
    386a:	4699      	mov	r9, r3
    386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	20002b54 	.word	0x20002b54
    3874:	20002b88 	.word	0x20002b88
    3878:	42002c00 	.word	0x42002c00
    387c:	00001d51 	.word	0x00001d51
    3880:	00003729 	.word	0x00003729
    3884:	00001c51 	.word	0x00001c51
    3888:	0000371d 	.word	0x0000371d
    388c:	00001d19 	.word	0x00001d19
    3890:	0000a20c 	.word	0x0000a20c
    3894:	e000e100 	.word	0xe000e100
    3898:	000019e1 	.word	0x000019e1
    389c:	000f4240 	.word	0x000f4240
    38a0:	00008ec9 	.word	0x00008ec9

000038a4 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    38a4:	4770      	bx	lr
	...

000038a8 <sal_aes_restart>:
 * When using sal_aes_wrrd(), call sal_aes_read() to get the result
 * of the last AES operation BEFORE you put the transceiver unit to
 * sleep state!
 */
void sal_aes_restart(void)
{
    38a8:	b570      	push	{r4, r5, r6, lr}
	 * This is not required anymore for SPI transceivers beyond
	 * these two mentioned transceivers.
	 */
	uint8_t *keyp;
	uint8_t save_cmd;
	if (last_dir == AES_DIR_ENCRYPT) {
    38aa:	4b0c      	ldr	r3, [pc, #48]	; (38dc <sal_aes_restart+0x34>)
    38ac:	781b      	ldrb	r3, [r3, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d012      	beq.n	38d8 <sal_aes_restart+0x30>
		keyp = enc_key;
	} else {
		keyp = dec_key;
    38b2:	490b      	ldr	r1, [pc, #44]	; (38e0 <sal_aes_restart+0x38>)
	}

	save_cmd = aes_buf[0];
    38b4:	4c0b      	ldr	r4, [pc, #44]	; (38e4 <sal_aes_restart+0x3c>)
    38b6:	7825      	ldrb	r5, [r4, #0]
	aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    38b8:	2310      	movs	r3, #16
    38ba:	7023      	strb	r3, [r4, #0]

	/* Fill in key. */
	memcpy(aes_buf + 1, keyp, AES_KEYSIZE);
    38bc:	1c60      	adds	r0, r4, #1
    38be:	2210      	movs	r2, #16
    38c0:	4b09      	ldr	r3, [pc, #36]	; (38e8 <sal_aes_restart+0x40>)
    38c2:	4798      	blx	r3

	/* Write to SRAM in one step. */
	trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    38c4:	2211      	movs	r2, #17
    38c6:	0021      	movs	r1, r4
    38c8:	2083      	movs	r0, #131	; 0x83
    38ca:	4b08      	ldr	r3, [pc, #32]	; (38ec <sal_aes_restart+0x44>)
    38cc:	4798      	blx	r3
			AES_BLOCKSIZE + 1);

	aes_buf[0] = save_cmd;
    38ce:	7025      	strb	r5, [r4, #0]
	setup_flag = true;
    38d0:	2201      	movs	r2, #1
    38d2:	4b07      	ldr	r3, [pc, #28]	; (38f0 <sal_aes_restart+0x48>)
    38d4:	701a      	strb	r2, [r3, #0]
}
    38d6:	bd70      	pop	{r4, r5, r6, pc}
		keyp = enc_key;
    38d8:	4906      	ldr	r1, [pc, #24]	; (38f4 <sal_aes_restart+0x4c>)
    38da:	e7eb      	b.n	38b4 <sal_aes_restart+0xc>
    38dc:	2000006d 	.word	0x2000006d
    38e0:	200002dc 	.word	0x200002dc
    38e4:	200002c8 	.word	0x200002c8
    38e8:	0000926f 	.word	0x0000926f
    38ec:	00004065 	.word	0x00004065
    38f0:	200002fc 	.word	0x200002fc
    38f4:	200002ec 	.word	0x200002ec

000038f8 <_sal_aes_clean_up>:
/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
}
    38f8:	4770      	bx	lr
	...

000038fc <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    38fc:	b570      	push	{r4, r5, r6, lr}
    38fe:	0003      	movs	r3, r0
    3900:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3902:	4c14      	ldr	r4, [pc, #80]	; (3954 <sal_aes_wrrd+0x58>)
    3904:	1c60      	adds	r0, r4, #1
    3906:	2210      	movs	r2, #16
    3908:	0019      	movs	r1, r3
    390a:	4b13      	ldr	r3, [pc, #76]	; (3958 <sal_aes_wrrd+0x5c>)
    390c:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    390e:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3910:	4b12      	ldr	r3, [pc, #72]	; (395c <sal_aes_wrrd+0x60>)
    3912:	781b      	ldrb	r3, [r3, #0]
    3914:	2b00      	cmp	r3, #0
    3916:	d015      	beq.n	3944 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3918:	2212      	movs	r2, #18
    391a:	490e      	ldr	r1, [pc, #56]	; (3954 <sal_aes_wrrd+0x58>)
    391c:	2083      	movs	r0, #131	; 0x83
    391e:	4b10      	ldr	r3, [pc, #64]	; (3960 <sal_aes_wrrd+0x64>)
    3920:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3922:	2200      	movs	r2, #0
    3924:	4b0d      	ldr	r3, [pc, #52]	; (395c <sal_aes_wrrd+0x60>)
    3926:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    3928:	2d00      	cmp	r5, #0
    392a:	d005      	beq.n	3938 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    392c:	2210      	movs	r2, #16
    392e:	4909      	ldr	r1, [pc, #36]	; (3954 <sal_aes_wrrd+0x58>)
    3930:	3101      	adds	r1, #1
    3932:	0028      	movs	r0, r5
    3934:	4b08      	ldr	r3, [pc, #32]	; (3958 <sal_aes_wrrd+0x5c>)
    3936:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    3938:	4b06      	ldr	r3, [pc, #24]	; (3954 <sal_aes_wrrd+0x58>)
    393a:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    393c:	2018      	movs	r0, #24
    393e:	4b09      	ldr	r3, [pc, #36]	; (3964 <sal_aes_wrrd+0x68>)
    3940:	4798      	blx	r3
}
    3942:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3944:	2211      	movs	r2, #17
    3946:	4903      	ldr	r1, [pc, #12]	; (3954 <sal_aes_wrrd+0x58>)
    3948:	3101      	adds	r1, #1
    394a:	2084      	movs	r0, #132	; 0x84
    394c:	4b04      	ldr	r3, [pc, #16]	; (3960 <sal_aes_wrrd+0x64>)
    394e:	4798      	blx	r3
    3950:	e7ea      	b.n	3928 <sal_aes_wrrd+0x2c>
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	200002c8 	.word	0x200002c8
    3958:	0000926f 	.word	0x0000926f
    395c:	200002fc 	.word	0x200002fc
    3960:	00004359 	.word	0x00004359
    3964:	00000155 	.word	0x00000155

00003968 <sal_aes_setup>:
{
    3968:	b5f0      	push	{r4, r5, r6, r7, lr}
    396a:	46c6      	mov	lr, r8
    396c:	b500      	push	{lr}
    396e:	b084      	sub	sp, #16
    3970:	0005      	movs	r5, r0
    3972:	000e      	movs	r6, r1
    3974:	0014      	movs	r4, r2
	if (key != NULL) {
    3976:	2800      	cmp	r0, #0
    3978:	d017      	beq.n	39aa <sal_aes_setup+0x42>
		dec_initialized = false;
    397a:	2200      	movs	r2, #0
    397c:	4b3e      	ldr	r3, [pc, #248]	; (3a78 <sal_aes_setup+0x110>)
    397e:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    3980:	3202      	adds	r2, #2
    3982:	4b3e      	ldr	r3, [pc, #248]	; (3a7c <sal_aes_setup+0x114>)
    3984:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    3986:	320e      	adds	r2, #14
    3988:	0001      	movs	r1, r0
    398a:	483d      	ldr	r0, [pc, #244]	; (3a80 <sal_aes_setup+0x118>)
    398c:	4b3d      	ldr	r3, [pc, #244]	; (3a84 <sal_aes_setup+0x11c>)
    398e:	4698      	mov	r8, r3
    3990:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3992:	4f3d      	ldr	r7, [pc, #244]	; (3a88 <sal_aes_setup+0x120>)
    3994:	2310      	movs	r3, #16
    3996:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3998:	1c78      	adds	r0, r7, #1
    399a:	2210      	movs	r2, #16
    399c:	0029      	movs	r1, r5
    399e:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    39a0:	2211      	movs	r2, #17
    39a2:	0039      	movs	r1, r7
    39a4:	2083      	movs	r0, #131	; 0x83
    39a6:	4b39      	ldr	r3, [pc, #228]	; (3a8c <sal_aes_setup+0x124>)
    39a8:	4798      	blx	r3
	switch (dir) {
    39aa:	2c00      	cmp	r4, #0
    39ac:	d003      	beq.n	39b6 <sal_aes_setup+0x4e>
    39ae:	2c01      	cmp	r4, #1
    39b0:	d02f      	beq.n	3a12 <sal_aes_setup+0xaa>
		return false;
    39b2:	2000      	movs	r0, #0
    39b4:	e01b      	b.n	39ee <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    39b6:	4b31      	ldr	r3, [pc, #196]	; (3a7c <sal_aes_setup+0x114>)
    39b8:	781b      	ldrb	r3, [r3, #0]
    39ba:	2b01      	cmp	r3, #1
    39bc:	d01b      	beq.n	39f6 <sal_aes_setup+0x8e>
	last_dir = dir;
    39be:	4b2f      	ldr	r3, [pc, #188]	; (3a7c <sal_aes_setup+0x114>)
    39c0:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    39c2:	2e00      	cmp	r6, #0
    39c4:	d002      	beq.n	39cc <sal_aes_setup+0x64>
		return (false);
    39c6:	2000      	movs	r0, #0
	switch (enc_mode) {
    39c8:	2e02      	cmp	r6, #2
    39ca:	d110      	bne.n	39ee <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    39cc:	0136      	lsls	r6, r6, #4
    39ce:	2370      	movs	r3, #112	; 0x70
    39d0:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    39d2:	00e4      	lsls	r4, r4, #3
    39d4:	3b68      	subs	r3, #104	; 0x68
    39d6:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    39d8:	4334      	orrs	r4, r6
    39da:	4b2b      	ldr	r3, [pc, #172]	; (3a88 <sal_aes_setup+0x120>)
    39dc:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    39de:	2680      	movs	r6, #128	; 0x80
    39e0:	4276      	negs	r6, r6
    39e2:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    39e4:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    39e6:	2201      	movs	r2, #1
    39e8:	4b29      	ldr	r3, [pc, #164]	; (3a90 <sal_aes_setup+0x128>)
    39ea:	701a      	strb	r2, [r3, #0]
	return (true);
    39ec:	2001      	movs	r0, #1
}
    39ee:	b004      	add	sp, #16
    39f0:	bc04      	pop	{r2}
    39f2:	4690      	mov	r8, r2
    39f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    39f6:	4d24      	ldr	r5, [pc, #144]	; (3a88 <sal_aes_setup+0x120>)
    39f8:	330f      	adds	r3, #15
    39fa:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    39fc:	1c68      	adds	r0, r5, #1
    39fe:	2210      	movs	r2, #16
    3a00:	491f      	ldr	r1, [pc, #124]	; (3a80 <sal_aes_setup+0x118>)
    3a02:	4b20      	ldr	r3, [pc, #128]	; (3a84 <sal_aes_setup+0x11c>)
    3a04:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3a06:	2211      	movs	r2, #17
    3a08:	0029      	movs	r1, r5
    3a0a:	2083      	movs	r0, #131	; 0x83
    3a0c:	4b1f      	ldr	r3, [pc, #124]	; (3a8c <sal_aes_setup+0x124>)
    3a0e:	4798      	blx	r3
    3a10:	e7d5      	b.n	39be <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    3a12:	4b1a      	ldr	r3, [pc, #104]	; (3a7c <sal_aes_setup+0x114>)
    3a14:	781b      	ldrb	r3, [r3, #0]
    3a16:	2b01      	cmp	r3, #1
    3a18:	d0d1      	beq.n	39be <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3a1a:	2210      	movs	r2, #16
    3a1c:	4b1a      	ldr	r3, [pc, #104]	; (3a88 <sal_aes_setup+0x120>)
    3a1e:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    3a20:	4b15      	ldr	r3, [pc, #84]	; (3a78 <sal_aes_setup+0x110>)
    3a22:	781b      	ldrb	r3, [r3, #0]
    3a24:	2b00      	cmp	r3, #0
    3a26:	d00e      	beq.n	3a46 <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3a28:	4d17      	ldr	r5, [pc, #92]	; (3a88 <sal_aes_setup+0x120>)
    3a2a:	1c68      	adds	r0, r5, #1
    3a2c:	2210      	movs	r2, #16
    3a2e:	4919      	ldr	r1, [pc, #100]	; (3a94 <sal_aes_setup+0x12c>)
    3a30:	4b14      	ldr	r3, [pc, #80]	; (3a84 <sal_aes_setup+0x11c>)
    3a32:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3a34:	2211      	movs	r2, #17
    3a36:	0029      	movs	r1, r5
    3a38:	2083      	movs	r0, #131	; 0x83
    3a3a:	4b14      	ldr	r3, [pc, #80]	; (3a8c <sal_aes_setup+0x124>)
    3a3c:	4798      	blx	r3
			dec_initialized = true;
    3a3e:	4b0e      	ldr	r3, [pc, #56]	; (3a78 <sal_aes_setup+0x110>)
    3a40:	2201      	movs	r2, #1
    3a42:	701a      	strb	r2, [r3, #0]
    3a44:	e7bb      	b.n	39be <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3a46:	4d10      	ldr	r5, [pc, #64]	; (3a88 <sal_aes_setup+0x120>)
    3a48:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    3a4a:	3380      	adds	r3, #128	; 0x80
    3a4c:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    3a4e:	3a0f      	subs	r2, #15
    3a50:	4b0f      	ldr	r3, [pc, #60]	; (3a90 <sal_aes_setup+0x128>)
    3a52:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    3a54:	2100      	movs	r1, #0
    3a56:	4668      	mov	r0, sp
    3a58:	4b0f      	ldr	r3, [pc, #60]	; (3a98 <sal_aes_setup+0x130>)
    3a5a:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3a5c:	2310      	movs	r3, #16
    3a5e:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3a60:	2201      	movs	r2, #1
    3a62:	0029      	movs	r1, r5
    3a64:	2083      	movs	r0, #131	; 0x83
    3a66:	4b09      	ldr	r3, [pc, #36]	; (3a8c <sal_aes_setup+0x124>)
    3a68:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    3a6a:	2210      	movs	r2, #16
    3a6c:	4909      	ldr	r1, [pc, #36]	; (3a94 <sal_aes_setup+0x12c>)
    3a6e:	2084      	movs	r0, #132	; 0x84
    3a70:	4b0a      	ldr	r3, [pc, #40]	; (3a9c <sal_aes_setup+0x134>)
    3a72:	4798      	blx	r3
    3a74:	e7d8      	b.n	3a28 <sal_aes_setup+0xc0>
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	200002da 	.word	0x200002da
    3a7c:	2000006d 	.word	0x2000006d
    3a80:	200002ec 	.word	0x200002ec
    3a84:	0000926f 	.word	0x0000926f
    3a88:	200002c8 	.word	0x200002c8
    3a8c:	00004065 	.word	0x00004065
    3a90:	200002fc 	.word	0x200002fc
    3a94:	200002dc 	.word	0x200002dc
    3a98:	000038fd 	.word	0x000038fd
    3a9c:	000041d1 	.word	0x000041d1

00003aa0 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3aa0:	b510      	push	{r4, lr}
    3aa2:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    3aa4:	2210      	movs	r2, #16
    3aa6:	2084      	movs	r0, #132	; 0x84
    3aa8:	4b01      	ldr	r3, [pc, #4]	; (3ab0 <sal_aes_read+0x10>)
    3aaa:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3aac:	bd10      	pop	{r4, pc}
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	000041d1 	.word	0x000041d1

00003ab4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3ab4:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    3ab6:	2201      	movs	r2, #1
    3ab8:	4b03      	ldr	r3, [pc, #12]	; (3ac8 <AT86RFX_ISR+0x14>)
    3aba:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3abc:	4b03      	ldr	r3, [pc, #12]	; (3acc <AT86RFX_ISR+0x18>)
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d000      	beq.n	3ac6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3ac4:	4798      	blx	r3
	}
}
    3ac6:	bd10      	pop	{r4, pc}
    3ac8:	40001800 	.word	0x40001800
    3acc:	20000300 	.word	0x20000300

00003ad0 <trx_spi_init>:

void trx_spi_init(void)
{
    3ad0:	b530      	push	{r4, r5, lr}
    3ad2:	b085      	sub	sp, #20
	config->address_enabled = false;
    3ad4:	4a34      	ldr	r2, [pc, #208]	; (3ba8 <trx_spi_init+0xd8>)
    3ad6:	2300      	movs	r3, #0
    3ad8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3ada:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3adc:	213f      	movs	r1, #63	; 0x3f
    3ade:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    3ae0:	4c32      	ldr	r4, [pc, #200]	; (3bac <trx_spi_init+0xdc>)
    3ae2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3ae4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3ae6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3ae8:	2201      	movs	r2, #1
    3aea:	4669      	mov	r1, sp
    3aec:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3aee:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3af0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3af2:	203f      	movs	r0, #63	; 0x3f
    3af4:	4b2e      	ldr	r3, [pc, #184]	; (3bb0 <trx_spi_init+0xe0>)
    3af6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3af8:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    3afa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3afc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3afe:	2900      	cmp	r1, #0
    3b00:	d104      	bne.n	3b0c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3b02:	0953      	lsrs	r3, r2, #5
    3b04:	01db      	lsls	r3, r3, #7
    3b06:	492b      	ldr	r1, [pc, #172]	; (3bb4 <trx_spi_init+0xe4>)
    3b08:	468c      	mov	ip, r1
    3b0a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b0c:	211f      	movs	r1, #31
    3b0e:	4011      	ands	r1, r2
    3b10:	2201      	movs	r2, #1
    3b12:	0010      	movs	r0, r2
    3b14:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3b16:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3b18:	4c27      	ldr	r4, [pc, #156]	; (3bb8 <trx_spi_init+0xe8>)
    3b1a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3b1c:	2300      	movs	r3, #0
    3b1e:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3b20:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3b22:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3b24:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3b26:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3b28:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3b2a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3b2c:	3223      	adds	r2, #35	; 0x23
    3b2e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3b30:	0020      	movs	r0, r4
    3b32:	3018      	adds	r0, #24
    3b34:	3a18      	subs	r2, #24
    3b36:	2100      	movs	r1, #0
    3b38:	4b20      	ldr	r3, [pc, #128]	; (3bbc <trx_spi_init+0xec>)
    3b3a:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3b3c:	2380      	movs	r3, #128	; 0x80
    3b3e:	025b      	lsls	r3, r3, #9
    3b40:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3b42:	4b1f      	ldr	r3, [pc, #124]	; (3bc0 <trx_spi_init+0xf0>)
    3b44:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3b46:	4b1f      	ldr	r3, [pc, #124]	; (3bc4 <trx_spi_init+0xf4>)
    3b48:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3b4a:	2301      	movs	r3, #1
    3b4c:	425b      	negs	r3, r3
    3b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3b50:	4b1d      	ldr	r3, [pc, #116]	; (3bc8 <trx_spi_init+0xf8>)
    3b52:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3b54:	4b1d      	ldr	r3, [pc, #116]	; (3bcc <trx_spi_init+0xfc>)
    3b56:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3b58:	4d1d      	ldr	r5, [pc, #116]	; (3bd0 <trx_spi_init+0x100>)
    3b5a:	0022      	movs	r2, r4
    3b5c:	491d      	ldr	r1, [pc, #116]	; (3bd4 <trx_spi_init+0x104>)
    3b5e:	0028      	movs	r0, r5
    3b60:	4b1d      	ldr	r3, [pc, #116]	; (3bd8 <trx_spi_init+0x108>)
    3b62:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b64:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3b66:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d1fc      	bne.n	3b66 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3b6c:	6813      	ldr	r3, [r2, #0]
    3b6e:	2502      	movs	r5, #2
    3b70:	432b      	orrs	r3, r5
    3b72:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3b74:	ac01      	add	r4, sp, #4
    3b76:	0020      	movs	r0, r4
    3b78:	4b18      	ldr	r3, [pc, #96]	; (3bdc <trx_spi_init+0x10c>)
    3b7a:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    3b7c:	2320      	movs	r3, #32
    3b7e:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3b80:	2380      	movs	r3, #128	; 0x80
    3b82:	039b      	lsls	r3, r3, #14
    3b84:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    3b86:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3b88:	2301      	movs	r3, #1
    3b8a:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3b8c:	2200      	movs	r2, #0
    3b8e:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3b90:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    3b92:	0021      	movs	r1, r4
    3b94:	2000      	movs	r0, #0
    3b96:	4b12      	ldr	r3, [pc, #72]	; (3be0 <trx_spi_init+0x110>)
    3b98:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3b9a:	2200      	movs	r2, #0
    3b9c:	2100      	movs	r1, #0
    3b9e:	4811      	ldr	r0, [pc, #68]	; (3be4 <trx_spi_init+0x114>)
    3ba0:	4b11      	ldr	r3, [pc, #68]	; (3be8 <trx_spi_init+0x118>)
    3ba2:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3ba4:	b005      	add	sp, #20
    3ba6:	bd30      	pop	{r4, r5, pc}
    3ba8:	20002ba8 	.word	0x20002ba8
    3bac:	20002bac 	.word	0x20002bac
    3bb0:	000004c1 	.word	0x000004c1
    3bb4:	41004400 	.word	0x41004400
    3bb8:	20002bb0 	.word	0x20002bb0
    3bbc:	00009281 	.word	0x00009281
    3bc0:	003d0900 	.word	0x003d0900
    3bc4:	00530005 	.word	0x00530005
    3bc8:	003e0005 	.word	0x003e0005
    3bcc:	00520005 	.word	0x00520005
    3bd0:	200003dc 	.word	0x200003dc
    3bd4:	42001800 	.word	0x42001800
    3bd8:	00000929 	.word	0x00000929
    3bdc:	00000435 	.word	0x00000435
    3be0:	00000449 	.word	0x00000449
    3be4:	00003ab5 	.word	0x00003ab5
    3be8:	000002f1 	.word	0x000002f1

00003bec <PhyReset>:

void PhyReset(void)
{
    3bec:	b570      	push	{r4, r5, r6, lr}
    3bee:	4c08      	ldr	r4, [pc, #32]	; (3c10 <PhyReset+0x24>)
    3bf0:	2580      	movs	r5, #128	; 0x80
    3bf2:	022d      	lsls	r5, r5, #8
    3bf4:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    3bf6:	2280      	movs	r2, #128	; 0x80
    3bf8:	0352      	lsls	r2, r2, #13
    3bfa:	4b06      	ldr	r3, [pc, #24]	; (3c14 <PhyReset+0x28>)
    3bfc:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3bfe:	20a5      	movs	r0, #165	; 0xa5
    3c00:	0040      	lsls	r0, r0, #1
    3c02:	4e05      	ldr	r6, [pc, #20]	; (3c18 <PhyReset+0x2c>)
    3c04:	47b0      	blx	r6
    3c06:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3c08:	200a      	movs	r0, #10
    3c0a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3c0c:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3c0e:	bd70      	pop	{r4, r5, r6, pc}
    3c10:	41004480 	.word	0x41004480
    3c14:	41004400 	.word	0x41004400
    3c18:	00000155 	.word	0x00000155

00003c1c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3c1c:	b570      	push	{r4, r5, r6, lr}
    3c1e:	b082      	sub	sp, #8
    3c20:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c22:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3c26:	425a      	negs	r2, r3
    3c28:	4153      	adcs	r3, r2
    3c2a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3c2c:	b672      	cpsid	i
    3c2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c32:	2200      	movs	r2, #0
    3c34:	4b33      	ldr	r3, [pc, #204]	; (3d04 <trx_reg_read+0xe8>)
    3c36:	701a      	strb	r2, [r3, #0]
	return flags;
    3c38:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3c3a:	4e33      	ldr	r6, [pc, #204]	; (3d08 <trx_reg_read+0xec>)
    3c3c:	3201      	adds	r2, #1
    3c3e:	4933      	ldr	r1, [pc, #204]	; (3d0c <trx_reg_read+0xf0>)
    3c40:	0030      	movs	r0, r6
    3c42:	4b33      	ldr	r3, [pc, #204]	; (3d10 <trx_reg_read+0xf4>)
    3c44:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c46:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3c48:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c4a:	7e1a      	ldrb	r2, [r3, #24]
    3c4c:	420a      	tst	r2, r1
    3c4e:	d0fc      	beq.n	3c4a <trx_reg_read+0x2e>
    3c50:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c52:	07d2      	lsls	r2, r2, #31
    3c54:	d502      	bpl.n	3c5c <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c56:	2280      	movs	r2, #128	; 0x80
    3c58:	4315      	orrs	r5, r2
    3c5a:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3c5c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c5e:	7e1a      	ldrb	r2, [r3, #24]
    3c60:	420a      	tst	r2, r1
    3c62:	d0fc      	beq.n	3c5e <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c64:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c66:	7e1a      	ldrb	r2, [r3, #24]
    3c68:	420a      	tst	r2, r1
    3c6a:	d0fc      	beq.n	3c66 <trx_reg_read+0x4a>
    3c6c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3c6e:	0752      	lsls	r2, r2, #29
    3c70:	d50c      	bpl.n	3c8c <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c72:	8b5a      	ldrh	r2, [r3, #26]
    3c74:	0752      	lsls	r2, r2, #29
    3c76:	d501      	bpl.n	3c7c <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3c78:	2204      	movs	r2, #4
    3c7a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c7c:	4a22      	ldr	r2, [pc, #136]	; (3d08 <trx_reg_read+0xec>)
    3c7e:	7992      	ldrb	r2, [r2, #6]
    3c80:	2a01      	cmp	r2, #1
    3c82:	d034      	beq.n	3cee <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c86:	b2d2      	uxtb	r2, r2
    3c88:	4922      	ldr	r1, [pc, #136]	; (3d14 <trx_reg_read+0xf8>)
    3c8a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3c8c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c8e:	7e1a      	ldrb	r2, [r3, #24]
    3c90:	420a      	tst	r2, r1
    3c92:	d0fc      	beq.n	3c8e <trx_reg_read+0x72>
    3c94:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c96:	07d2      	lsls	r2, r2, #31
    3c98:	d501      	bpl.n	3c9e <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c9a:	2200      	movs	r2, #0
    3c9c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3c9e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ca0:	7e1a      	ldrb	r2, [r3, #24]
    3ca2:	420a      	tst	r2, r1
    3ca4:	d0fc      	beq.n	3ca0 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    3ca6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ca8:	7e1a      	ldrb	r2, [r3, #24]
    3caa:	420a      	tst	r2, r1
    3cac:	d0fc      	beq.n	3ca8 <trx_reg_read+0x8c>
    3cae:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    3cb0:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    3cb2:	0752      	lsls	r2, r2, #29
    3cb4:	d50a      	bpl.n	3ccc <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cb6:	8b5a      	ldrh	r2, [r3, #26]
    3cb8:	0752      	lsls	r2, r2, #29
    3cba:	d501      	bpl.n	3cc0 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cbc:	2204      	movs	r2, #4
    3cbe:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cc0:	4a11      	ldr	r2, [pc, #68]	; (3d08 <trx_reg_read+0xec>)
    3cc2:	7992      	ldrb	r2, [r2, #6]
    3cc4:	2a01      	cmp	r2, #1
    3cc6:	d018      	beq.n	3cfa <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cc8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3cca:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3ccc:	2200      	movs	r2, #0
    3cce:	490f      	ldr	r1, [pc, #60]	; (3d0c <trx_reg_read+0xf0>)
    3cd0:	480d      	ldr	r0, [pc, #52]	; (3d08 <trx_reg_read+0xec>)
    3cd2:	4b0f      	ldr	r3, [pc, #60]	; (3d10 <trx_reg_read+0xf4>)
    3cd4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3cd6:	23ff      	movs	r3, #255	; 0xff
    3cd8:	4223      	tst	r3, r4
    3cda:	d005      	beq.n	3ce8 <trx_reg_read+0xcc>
		cpu_irq_enable();
    3cdc:	2201      	movs	r2, #1
    3cde:	4b09      	ldr	r3, [pc, #36]	; (3d04 <trx_reg_read+0xe8>)
    3ce0:	701a      	strb	r2, [r3, #0]
    3ce2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ce6:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3ce8:	b2e8      	uxtb	r0, r5
}
    3cea:	b002      	add	sp, #8
    3cec:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3cf0:	05d2      	lsls	r2, r2, #23
    3cf2:	0dd2      	lsrs	r2, r2, #23
    3cf4:	4907      	ldr	r1, [pc, #28]	; (3d14 <trx_reg_read+0xf8>)
    3cf6:	800a      	strh	r2, [r1, #0]
    3cf8:	e7c8      	b.n	3c8c <trx_reg_read+0x70>
    3cfa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3cfc:	05ed      	lsls	r5, r5, #23
    3cfe:	0ded      	lsrs	r5, r5, #23
    3d00:	e7e4      	b.n	3ccc <trx_reg_read+0xb0>
    3d02:	46c0      	nop			; (mov r8, r8)
    3d04:	20000008 	.word	0x20000008
    3d08:	200003dc 	.word	0x200003dc
    3d0c:	20002bac 	.word	0x20002bac
    3d10:	00000bed 	.word	0x00000bed
    3d14:	20002ba4 	.word	0x20002ba4

00003d18 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d1a:	b083      	sub	sp, #12
    3d1c:	0006      	movs	r6, r0
    3d1e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d20:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3d24:	425a      	negs	r2, r3
    3d26:	4153      	adcs	r3, r2
    3d28:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3d2a:	b672      	cpsid	i
    3d2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3d30:	2200      	movs	r2, #0
    3d32:	4b34      	ldr	r3, [pc, #208]	; (3e04 <trx_reg_write+0xec>)
    3d34:	701a      	strb	r2, [r3, #0]
	return flags;
    3d36:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3d38:	4f33      	ldr	r7, [pc, #204]	; (3e08 <trx_reg_write+0xf0>)
    3d3a:	3201      	adds	r2, #1
    3d3c:	4933      	ldr	r1, [pc, #204]	; (3e0c <trx_reg_write+0xf4>)
    3d3e:	0038      	movs	r0, r7
    3d40:	4b33      	ldr	r3, [pc, #204]	; (3e10 <trx_reg_write+0xf8>)
    3d42:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d44:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3d46:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d48:	7e1a      	ldrb	r2, [r3, #24]
    3d4a:	420a      	tst	r2, r1
    3d4c:	d0fc      	beq.n	3d48 <trx_reg_write+0x30>
    3d4e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d50:	07d2      	lsls	r2, r2, #31
    3d52:	d502      	bpl.n	3d5a <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d54:	22c0      	movs	r2, #192	; 0xc0
    3d56:	4316      	orrs	r6, r2
    3d58:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3d5a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d5c:	7e1a      	ldrb	r2, [r3, #24]
    3d5e:	420a      	tst	r2, r1
    3d60:	d0fc      	beq.n	3d5c <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3d62:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d64:	7e1a      	ldrb	r2, [r3, #24]
    3d66:	420a      	tst	r2, r1
    3d68:	d0fc      	beq.n	3d64 <trx_reg_write+0x4c>
    3d6a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3d6c:	0752      	lsls	r2, r2, #29
    3d6e:	d50c      	bpl.n	3d8a <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d70:	8b5a      	ldrh	r2, [r3, #26]
    3d72:	0752      	lsls	r2, r2, #29
    3d74:	d501      	bpl.n	3d7a <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d76:	2204      	movs	r2, #4
    3d78:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d7a:	4a23      	ldr	r2, [pc, #140]	; (3e08 <trx_reg_write+0xf0>)
    3d7c:	7992      	ldrb	r2, [r2, #6]
    3d7e:	2a01      	cmp	r2, #1
    3d80:	d033      	beq.n	3dea <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d84:	b2d2      	uxtb	r2, r2
    3d86:	4923      	ldr	r1, [pc, #140]	; (3e14 <trx_reg_write+0xfc>)
    3d88:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3d8a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d8c:	7e1a      	ldrb	r2, [r3, #24]
    3d8e:	420a      	tst	r2, r1
    3d90:	d0fc      	beq.n	3d8c <trx_reg_write+0x74>
    3d92:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d94:	07d2      	lsls	r2, r2, #31
    3d96:	d500      	bpl.n	3d9a <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d98:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3d9a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d9c:	7e1a      	ldrb	r2, [r3, #24]
    3d9e:	420a      	tst	r2, r1
    3da0:	d0fc      	beq.n	3d9c <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3da2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3da4:	7e1a      	ldrb	r2, [r3, #24]
    3da6:	420a      	tst	r2, r1
    3da8:	d0fc      	beq.n	3da4 <trx_reg_write+0x8c>
    3daa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3dac:	0752      	lsls	r2, r2, #29
    3dae:	d50c      	bpl.n	3dca <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3db0:	8b5a      	ldrh	r2, [r3, #26]
    3db2:	0752      	lsls	r2, r2, #29
    3db4:	d501      	bpl.n	3dba <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3db6:	2204      	movs	r2, #4
    3db8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3dba:	4a13      	ldr	r2, [pc, #76]	; (3e08 <trx_reg_write+0xf0>)
    3dbc:	7992      	ldrb	r2, [r2, #6]
    3dbe:	2a01      	cmp	r2, #1
    3dc0:	d019      	beq.n	3df6 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3dc4:	b2db      	uxtb	r3, r3
    3dc6:	4a13      	ldr	r2, [pc, #76]	; (3e14 <trx_reg_write+0xfc>)
    3dc8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3dca:	2200      	movs	r2, #0
    3dcc:	490f      	ldr	r1, [pc, #60]	; (3e0c <trx_reg_write+0xf4>)
    3dce:	480e      	ldr	r0, [pc, #56]	; (3e08 <trx_reg_write+0xf0>)
    3dd0:	4b0f      	ldr	r3, [pc, #60]	; (3e10 <trx_reg_write+0xf8>)
    3dd2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3dd4:	23ff      	movs	r3, #255	; 0xff
    3dd6:	422b      	tst	r3, r5
    3dd8:	d005      	beq.n	3de6 <trx_reg_write+0xce>
		cpu_irq_enable();
    3dda:	2201      	movs	r2, #1
    3ddc:	4b09      	ldr	r3, [pc, #36]	; (3e04 <trx_reg_write+0xec>)
    3dde:	701a      	strb	r2, [r3, #0]
    3de0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3de4:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3de6:	b003      	add	sp, #12
    3de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3dea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3dec:	05d2      	lsls	r2, r2, #23
    3dee:	0dd2      	lsrs	r2, r2, #23
    3df0:	4908      	ldr	r1, [pc, #32]	; (3e14 <trx_reg_write+0xfc>)
    3df2:	800a      	strh	r2, [r1, #0]
    3df4:	e7c9      	b.n	3d8a <trx_reg_write+0x72>
    3df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3df8:	05db      	lsls	r3, r3, #23
    3dfa:	0ddb      	lsrs	r3, r3, #23
    3dfc:	4a05      	ldr	r2, [pc, #20]	; (3e14 <trx_reg_write+0xfc>)
    3dfe:	8013      	strh	r3, [r2, #0]
    3e00:	e7e3      	b.n	3dca <trx_reg_write+0xb2>
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	20000008 	.word	0x20000008
    3e08:	200003dc 	.word	0x200003dc
    3e0c:	20002bac 	.word	0x20002bac
    3e10:	00000bed 	.word	0x00000bed
    3e14:	20002ba4 	.word	0x20002ba4

00003e18 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e1a:	46d6      	mov	lr, sl
    3e1c:	464f      	mov	r7, r9
    3e1e:	4646      	mov	r6, r8
    3e20:	b5c0      	push	{r6, r7, lr}
    3e22:	b082      	sub	sp, #8
    3e24:	0005      	movs	r5, r0
    3e26:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e28:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3e2c:	425a      	negs	r2, r3
    3e2e:	4153      	adcs	r3, r2
    3e30:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3e32:	b672      	cpsid	i
    3e34:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e38:	2200      	movs	r2, #0
    3e3a:	4b3e      	ldr	r3, [pc, #248]	; (3f34 <trx_frame_read+0x11c>)
    3e3c:	701a      	strb	r2, [r3, #0]
	return flags;
    3e3e:	9b01      	ldr	r3, [sp, #4]
    3e40:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3e42:	4f3d      	ldr	r7, [pc, #244]	; (3f38 <trx_frame_read+0x120>)
    3e44:	3201      	adds	r2, #1
    3e46:	493d      	ldr	r1, [pc, #244]	; (3f3c <trx_frame_read+0x124>)
    3e48:	0038      	movs	r0, r7
    3e4a:	4b3d      	ldr	r3, [pc, #244]	; (3f40 <trx_frame_read+0x128>)
    3e4c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e4e:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3e50:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e52:	7e1a      	ldrb	r2, [r3, #24]
    3e54:	420a      	tst	r2, r1
    3e56:	d0fc      	beq.n	3e52 <trx_frame_read+0x3a>
    3e58:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3e5a:	07d2      	lsls	r2, r2, #31
    3e5c:	d501      	bpl.n	3e62 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e5e:	2220      	movs	r2, #32
    3e60:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3e62:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e64:	7e1a      	ldrb	r2, [r3, #24]
    3e66:	420a      	tst	r2, r1
    3e68:	d0fc      	beq.n	3e64 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3e6a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e6c:	7e1a      	ldrb	r2, [r3, #24]
    3e6e:	420a      	tst	r2, r1
    3e70:	d0fc      	beq.n	3e6c <trx_frame_read+0x54>
    3e72:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3e74:	0752      	lsls	r2, r2, #29
    3e76:	d50c      	bpl.n	3e92 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e78:	8b5a      	ldrh	r2, [r3, #26]
    3e7a:	0752      	lsls	r2, r2, #29
    3e7c:	d501      	bpl.n	3e82 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e7e:	2204      	movs	r2, #4
    3e80:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e82:	4a2d      	ldr	r2, [pc, #180]	; (3f38 <trx_frame_read+0x120>)
    3e84:	7992      	ldrb	r2, [r2, #6]
    3e86:	2a01      	cmp	r2, #1
    3e88:	d013      	beq.n	3eb2 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e8c:	b2db      	uxtb	r3, r3
    3e8e:	4a2d      	ldr	r2, [pc, #180]	; (3f44 <trx_frame_read+0x12c>)
    3e90:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3e92:	1e63      	subs	r3, r4, #1
    3e94:	b2db      	uxtb	r3, r3
    3e96:	2c00      	cmp	r4, #0
    3e98:	d036      	beq.n	3f08 <trx_frame_read+0xf0>
    3e9a:	3301      	adds	r3, #1
    3e9c:	469c      	mov	ip, r3
    3e9e:	44ac      	add	ip, r5
    3ea0:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ea2:	4e25      	ldr	r6, [pc, #148]	; (3f38 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    3ea4:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ea6:	2300      	movs	r3, #0
    3ea8:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3eaa:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3eac:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3eae:	46b1      	mov	r9, r6
    3eb0:	e00f      	b.n	3ed2 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3eb4:	05db      	lsls	r3, r3, #23
    3eb6:	0ddb      	lsrs	r3, r3, #23
    3eb8:	4a22      	ldr	r2, [pc, #136]	; (3f44 <trx_frame_read+0x12c>)
    3eba:	8013      	strh	r3, [r2, #0]
    3ebc:	e7e9      	b.n	3e92 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ebe:	464a      	mov	r2, r9
    3ec0:	7992      	ldrb	r2, [r2, #6]
    3ec2:	2a01      	cmp	r2, #1
    3ec4:	d01c      	beq.n	3f00 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ec6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3ec8:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    3eca:	702f      	strb	r7, [r5, #0]
		data++;
    3ecc:	3501      	adds	r5, #1
	while (length--) {
    3ece:	4565      	cmp	r5, ip
    3ed0:	d01a      	beq.n	3f08 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ed2:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ed4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3ed6:	4202      	tst	r2, r0
    3ed8:	d0fc      	beq.n	3ed4 <trx_frame_read+0xbc>
    3eda:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3edc:	4202      	tst	r2, r0
    3ede:	d001      	beq.n	3ee4 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ee0:	4652      	mov	r2, sl
    3ee2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ee4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3ee6:	4222      	tst	r2, r4
    3ee8:	d0fc      	beq.n	3ee4 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3eea:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3eec:	420a      	tst	r2, r1
    3eee:	d0fc      	beq.n	3eea <trx_frame_read+0xd2>
    3ef0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3ef2:	420a      	tst	r2, r1
    3ef4:	d0e9      	beq.n	3eca <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ef6:	8b5a      	ldrh	r2, [r3, #26]
    3ef8:	420a      	tst	r2, r1
    3efa:	d0e0      	beq.n	3ebe <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3efc:	8359      	strh	r1, [r3, #26]
    3efe:	e7de      	b.n	3ebe <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f00:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3f02:	05ff      	lsls	r7, r7, #23
    3f04:	0dff      	lsrs	r7, r7, #23
    3f06:	e7e0      	b.n	3eca <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3f08:	2200      	movs	r2, #0
    3f0a:	490c      	ldr	r1, [pc, #48]	; (3f3c <trx_frame_read+0x124>)
    3f0c:	480a      	ldr	r0, [pc, #40]	; (3f38 <trx_frame_read+0x120>)
    3f0e:	4b0c      	ldr	r3, [pc, #48]	; (3f40 <trx_frame_read+0x128>)
    3f10:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3f12:	23ff      	movs	r3, #255	; 0xff
    3f14:	4642      	mov	r2, r8
    3f16:	4213      	tst	r3, r2
    3f18:	d005      	beq.n	3f26 <trx_frame_read+0x10e>
		cpu_irq_enable();
    3f1a:	2201      	movs	r2, #1
    3f1c:	4b05      	ldr	r3, [pc, #20]	; (3f34 <trx_frame_read+0x11c>)
    3f1e:	701a      	strb	r2, [r3, #0]
    3f20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3f24:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3f26:	b002      	add	sp, #8
    3f28:	bc1c      	pop	{r2, r3, r4}
    3f2a:	4690      	mov	r8, r2
    3f2c:	4699      	mov	r9, r3
    3f2e:	46a2      	mov	sl, r4
    3f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	20000008 	.word	0x20000008
    3f38:	200003dc 	.word	0x200003dc
    3f3c:	20002bac 	.word	0x20002bac
    3f40:	00000bed 	.word	0x00000bed
    3f44:	20002ba4 	.word	0x20002ba4

00003f48 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f4a:	46c6      	mov	lr, r8
    3f4c:	b500      	push	{lr}
    3f4e:	b082      	sub	sp, #8
    3f50:	0004      	movs	r4, r0
    3f52:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f54:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3f58:	425a      	negs	r2, r3
    3f5a:	4153      	adcs	r3, r2
    3f5c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3f5e:	b672      	cpsid	i
    3f60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3f64:	2200      	movs	r2, #0
    3f66:	4b3a      	ldr	r3, [pc, #232]	; (4050 <trx_frame_write+0x108>)
    3f68:	701a      	strb	r2, [r3, #0]
	return flags;
    3f6a:	9b01      	ldr	r3, [sp, #4]
    3f6c:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3f6e:	4f39      	ldr	r7, [pc, #228]	; (4054 <trx_frame_write+0x10c>)
    3f70:	3201      	adds	r2, #1
    3f72:	4939      	ldr	r1, [pc, #228]	; (4058 <trx_frame_write+0x110>)
    3f74:	0038      	movs	r0, r7
    3f76:	4b39      	ldr	r3, [pc, #228]	; (405c <trx_frame_write+0x114>)
    3f78:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f7a:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3f7c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f7e:	7e1a      	ldrb	r2, [r3, #24]
    3f80:	420a      	tst	r2, r1
    3f82:	d0fc      	beq.n	3f7e <trx_frame_write+0x36>
    3f84:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3f86:	07d2      	lsls	r2, r2, #31
    3f88:	d501      	bpl.n	3f8e <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3f8a:	2260      	movs	r2, #96	; 0x60
    3f8c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3f8e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3f90:	7e1a      	ldrb	r2, [r3, #24]
    3f92:	420a      	tst	r2, r1
    3f94:	d0fc      	beq.n	3f90 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3f96:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3f98:	7e1a      	ldrb	r2, [r3, #24]
    3f9a:	420a      	tst	r2, r1
    3f9c:	d0fc      	beq.n	3f98 <trx_frame_write+0x50>
    3f9e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3fa0:	0752      	lsls	r2, r2, #29
    3fa2:	d50c      	bpl.n	3fbe <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3fa4:	8b5a      	ldrh	r2, [r3, #26]
    3fa6:	0752      	lsls	r2, r2, #29
    3fa8:	d501      	bpl.n	3fae <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3faa:	2204      	movs	r2, #4
    3fac:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fae:	4a29      	ldr	r2, [pc, #164]	; (4054 <trx_frame_write+0x10c>)
    3fb0:	7992      	ldrb	r2, [r2, #6]
    3fb2:	2a01      	cmp	r2, #1
    3fb4:	d00b      	beq.n	3fce <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fb8:	b2d2      	uxtb	r2, r2
    3fba:	4929      	ldr	r1, [pc, #164]	; (4060 <trx_frame_write+0x118>)
    3fbc:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fbe:	4a25      	ldr	r2, [pc, #148]	; (4054 <trx_frame_write+0x10c>)
    3fc0:	7992      	ldrb	r2, [r2, #6]
    3fc2:	4694      	mov	ip, r2
    3fc4:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3fc6:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    3fc8:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3fca:	2404      	movs	r4, #4
    3fcc:	e00d      	b.n	3fea <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fd0:	05d2      	lsls	r2, r2, #23
    3fd2:	0dd2      	lsrs	r2, r2, #23
    3fd4:	4922      	ldr	r1, [pc, #136]	; (4060 <trx_frame_write+0x118>)
    3fd6:	800a      	strh	r2, [r1, #0]
    3fd8:	e7f1      	b.n	3fbe <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fda:	4662      	mov	r2, ip
    3fdc:	2a01      	cmp	r2, #1
    3fde:	d01e      	beq.n	401e <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fe2:	b2d2      	uxtb	r2, r2
    3fe4:	4e1e      	ldr	r6, [pc, #120]	; (4060 <trx_frame_write+0x118>)
    3fe6:	8032      	strh	r2, [r6, #0]
    3fe8:	3101      	adds	r1, #1
	while (length--) {
    3fea:	3d01      	subs	r5, #1
    3fec:	b2ed      	uxtb	r5, r5
    3fee:	2dff      	cmp	r5, #255	; 0xff
    3ff0:	d01b      	beq.n	402a <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ff2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3ff4:	423a      	tst	r2, r7
    3ff6:	d0fc      	beq.n	3ff2 <trx_frame_write+0xaa>
    3ff8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ffa:	423a      	tst	r2, r7
    3ffc:	d001      	beq.n	4002 <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ffe:	780a      	ldrb	r2, [r1, #0]
    4000:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4002:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4004:	4202      	tst	r2, r0
    4006:	d0fc      	beq.n	4002 <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4008:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    400a:	4222      	tst	r2, r4
    400c:	d0fc      	beq.n	4008 <trx_frame_write+0xc0>
    400e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4010:	4222      	tst	r2, r4
    4012:	d0e9      	beq.n	3fe8 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4014:	8b5a      	ldrh	r2, [r3, #26]
    4016:	4222      	tst	r2, r4
    4018:	d0df      	beq.n	3fda <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    401a:	835c      	strh	r4, [r3, #26]
    401c:	e7dd      	b.n	3fda <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    401e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4020:	05d2      	lsls	r2, r2, #23
    4022:	0dd2      	lsrs	r2, r2, #23
    4024:	4e0e      	ldr	r6, [pc, #56]	; (4060 <trx_frame_write+0x118>)
    4026:	8032      	strh	r2, [r6, #0]
    4028:	e7de      	b.n	3fe8 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    402a:	2200      	movs	r2, #0
    402c:	490a      	ldr	r1, [pc, #40]	; (4058 <trx_frame_write+0x110>)
    402e:	4809      	ldr	r0, [pc, #36]	; (4054 <trx_frame_write+0x10c>)
    4030:	4b0a      	ldr	r3, [pc, #40]	; (405c <trx_frame_write+0x114>)
    4032:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    4034:	23ff      	movs	r3, #255	; 0xff
    4036:	4642      	mov	r2, r8
    4038:	4213      	tst	r3, r2
    403a:	d005      	beq.n	4048 <trx_frame_write+0x100>
		cpu_irq_enable();
    403c:	2201      	movs	r2, #1
    403e:	4b04      	ldr	r3, [pc, #16]	; (4050 <trx_frame_write+0x108>)
    4040:	701a      	strb	r2, [r3, #0]
    4042:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4046:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4048:	b002      	add	sp, #8
    404a:	bc04      	pop	{r2}
    404c:	4690      	mov	r8, r2
    404e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4050:	20000008 	.word	0x20000008
    4054:	200003dc 	.word	0x200003dc
    4058:	20002bac 	.word	0x20002bac
    405c:	00000bed 	.word	0x00000bed
    4060:	20002ba4 	.word	0x20002ba4

00004064 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    4064:	b5f0      	push	{r4, r5, r6, r7, lr}
    4066:	46c6      	mov	lr, r8
    4068:	b500      	push	{lr}
    406a:	b082      	sub	sp, #8
    406c:	0006      	movs	r6, r0
    406e:	000d      	movs	r5, r1
    4070:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4072:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4076:	425a      	negs	r2, r3
    4078:	4153      	adcs	r3, r2
    407a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    407c:	b672      	cpsid	i
    407e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4082:	2200      	movs	r2, #0
    4084:	4b4d      	ldr	r3, [pc, #308]	; (41bc <trx_sram_write+0x158>)
    4086:	701a      	strb	r2, [r3, #0]
	return flags;
    4088:	9b01      	ldr	r3, [sp, #4]
    408a:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    408c:	4f4c      	ldr	r7, [pc, #304]	; (41c0 <trx_sram_write+0x15c>)
    408e:	3201      	adds	r2, #1
    4090:	494c      	ldr	r1, [pc, #304]	; (41c4 <trx_sram_write+0x160>)
    4092:	0038      	movs	r0, r7
    4094:	4b4c      	ldr	r3, [pc, #304]	; (41c8 <trx_sram_write+0x164>)
    4096:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4098:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    409a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    409c:	7e1a      	ldrb	r2, [r3, #24]
    409e:	420a      	tst	r2, r1
    40a0:	d0fc      	beq.n	409c <trx_sram_write+0x38>
    40a2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    40a4:	07d2      	lsls	r2, r2, #31
    40a6:	d501      	bpl.n	40ac <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40a8:	2240      	movs	r2, #64	; 0x40
    40aa:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    40ac:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40ae:	7e1a      	ldrb	r2, [r3, #24]
    40b0:	420a      	tst	r2, r1
    40b2:	d0fc      	beq.n	40ae <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    40b4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40b6:	7e1a      	ldrb	r2, [r3, #24]
    40b8:	420a      	tst	r2, r1
    40ba:	d0fc      	beq.n	40b6 <trx_sram_write+0x52>
    40bc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    40be:	0752      	lsls	r2, r2, #29
    40c0:	d50c      	bpl.n	40dc <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    40c2:	8b5a      	ldrh	r2, [r3, #26]
    40c4:	0752      	lsls	r2, r2, #29
    40c6:	d501      	bpl.n	40cc <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    40c8:	2204      	movs	r2, #4
    40ca:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    40cc:	4a3c      	ldr	r2, [pc, #240]	; (41c0 <trx_sram_write+0x15c>)
    40ce:	7992      	ldrb	r2, [r2, #6]
    40d0:	2a01      	cmp	r2, #1
    40d2:	d02b      	beq.n	412c <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    40d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40d6:	b2d2      	uxtb	r2, r2
    40d8:	493c      	ldr	r1, [pc, #240]	; (41cc <trx_sram_write+0x168>)
    40da:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    40dc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40de:	7e1a      	ldrb	r2, [r3, #24]
    40e0:	420a      	tst	r2, r1
    40e2:	d0fc      	beq.n	40de <trx_sram_write+0x7a>
    40e4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    40e6:	07d2      	lsls	r2, r2, #31
    40e8:	d500      	bpl.n	40ec <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40ea:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    40ec:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40ee:	7e1a      	ldrb	r2, [r3, #24]
    40f0:	420a      	tst	r2, r1
    40f2:	d0fc      	beq.n	40ee <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    40f4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40f6:	7e1a      	ldrb	r2, [r3, #24]
    40f8:	420a      	tst	r2, r1
    40fa:	d0fc      	beq.n	40f6 <trx_sram_write+0x92>
    40fc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    40fe:	0752      	lsls	r2, r2, #29
    4100:	d50c      	bpl.n	411c <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4102:	8b5a      	ldrh	r2, [r3, #26]
    4104:	0752      	lsls	r2, r2, #29
    4106:	d501      	bpl.n	410c <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4108:	2204      	movs	r2, #4
    410a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    410c:	4a2c      	ldr	r2, [pc, #176]	; (41c0 <trx_sram_write+0x15c>)
    410e:	7992      	ldrb	r2, [r2, #6]
    4110:	2a01      	cmp	r2, #1
    4112:	d011      	beq.n	4138 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4116:	b2d2      	uxtb	r2, r2
    4118:	492c      	ldr	r1, [pc, #176]	; (41cc <trx_sram_write+0x168>)
    411a:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    411c:	4a28      	ldr	r2, [pc, #160]	; (41c0 <trx_sram_write+0x15c>)
    411e:	7992      	ldrb	r2, [r2, #6]
    4120:	4694      	mov	ip, r2
    4122:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4124:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4126:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4128:	2104      	movs	r1, #4
    412a:	e013      	b.n	4154 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    412c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    412e:	05d2      	lsls	r2, r2, #23
    4130:	0dd2      	lsrs	r2, r2, #23
    4132:	4926      	ldr	r1, [pc, #152]	; (41cc <trx_sram_write+0x168>)
    4134:	800a      	strh	r2, [r1, #0]
    4136:	e7d1      	b.n	40dc <trx_sram_write+0x78>
    4138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    413a:	05d2      	lsls	r2, r2, #23
    413c:	0dd2      	lsrs	r2, r2, #23
    413e:	4923      	ldr	r1, [pc, #140]	; (41cc <trx_sram_write+0x168>)
    4140:	800a      	strh	r2, [r1, #0]
    4142:	e7eb      	b.n	411c <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4144:	4662      	mov	r2, ip
    4146:	2a01      	cmp	r2, #1
    4148:	d01e      	beq.n	4188 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    414a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    414c:	b2d2      	uxtb	r2, r2
    414e:	4f1f      	ldr	r7, [pc, #124]	; (41cc <trx_sram_write+0x168>)
    4150:	803a      	strh	r2, [r7, #0]
    4152:	3001      	adds	r0, #1
	while (length--) {
    4154:	3c01      	subs	r4, #1
    4156:	b2e4      	uxtb	r4, r4
    4158:	2cff      	cmp	r4, #255	; 0xff
    415a:	d01b      	beq.n	4194 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    415c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    415e:	4232      	tst	r2, r6
    4160:	d0fc      	beq.n	415c <trx_sram_write+0xf8>
    4162:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4164:	4232      	tst	r2, r6
    4166:	d001      	beq.n	416c <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4168:	7802      	ldrb	r2, [r0, #0]
    416a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    416c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    416e:	422a      	tst	r2, r5
    4170:	d0fc      	beq.n	416c <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4172:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    4174:	420a      	tst	r2, r1
    4176:	d0fc      	beq.n	4172 <trx_sram_write+0x10e>
    4178:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    417a:	420a      	tst	r2, r1
    417c:	d0e9      	beq.n	4152 <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    417e:	8b5a      	ldrh	r2, [r3, #26]
    4180:	420a      	tst	r2, r1
    4182:	d0df      	beq.n	4144 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4184:	8359      	strh	r1, [r3, #26]
    4186:	e7dd      	b.n	4144 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    418a:	05d2      	lsls	r2, r2, #23
    418c:	0dd2      	lsrs	r2, r2, #23
    418e:	4f0f      	ldr	r7, [pc, #60]	; (41cc <trx_sram_write+0x168>)
    4190:	803a      	strh	r2, [r7, #0]
    4192:	e7de      	b.n	4152 <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4194:	2200      	movs	r2, #0
    4196:	490b      	ldr	r1, [pc, #44]	; (41c4 <trx_sram_write+0x160>)
    4198:	4809      	ldr	r0, [pc, #36]	; (41c0 <trx_sram_write+0x15c>)
    419a:	4b0b      	ldr	r3, [pc, #44]	; (41c8 <trx_sram_write+0x164>)
    419c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    419e:	23ff      	movs	r3, #255	; 0xff
    41a0:	4642      	mov	r2, r8
    41a2:	4213      	tst	r3, r2
    41a4:	d005      	beq.n	41b2 <trx_sram_write+0x14e>
		cpu_irq_enable();
    41a6:	2201      	movs	r2, #1
    41a8:	4b04      	ldr	r3, [pc, #16]	; (41bc <trx_sram_write+0x158>)
    41aa:	701a      	strb	r2, [r3, #0]
    41ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    41b0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    41b2:	b002      	add	sp, #8
    41b4:	bc04      	pop	{r2}
    41b6:	4690      	mov	r8, r2
    41b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	20000008 	.word	0x20000008
    41c0:	200003dc 	.word	0x200003dc
    41c4:	20002bac 	.word	0x20002bac
    41c8:	00000bed 	.word	0x00000bed
    41cc:	20002ba4 	.word	0x20002ba4

000041d0 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    41d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41d2:	46d6      	mov	lr, sl
    41d4:	464f      	mov	r7, r9
    41d6:	4646      	mov	r6, r8
    41d8:	b5c0      	push	{r6, r7, lr}
    41da:	b082      	sub	sp, #8
    41dc:	0004      	movs	r4, r0
    41de:	000d      	movs	r5, r1
    41e0:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    41e2:	2001      	movs	r0, #1
    41e4:	4b56      	ldr	r3, [pc, #344]	; (4340 <trx_sram_read+0x170>)
    41e6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    41e8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    41ec:	425a      	negs	r2, r3
    41ee:	4153      	adcs	r3, r2
    41f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    41f2:	b672      	cpsid	i
    41f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    41f8:	2200      	movs	r2, #0
    41fa:	4b52      	ldr	r3, [pc, #328]	; (4344 <trx_sram_read+0x174>)
    41fc:	701a      	strb	r2, [r3, #0]
	return flags;
    41fe:	9b01      	ldr	r3, [sp, #4]
    4200:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4202:	4e51      	ldr	r6, [pc, #324]	; (4348 <trx_sram_read+0x178>)
    4204:	3201      	adds	r2, #1
    4206:	4951      	ldr	r1, [pc, #324]	; (434c <trx_sram_read+0x17c>)
    4208:	0030      	movs	r0, r6
    420a:	4b51      	ldr	r3, [pc, #324]	; (4350 <trx_sram_read+0x180>)
    420c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    420e:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4210:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4212:	7e1a      	ldrb	r2, [r3, #24]
    4214:	420a      	tst	r2, r1
    4216:	d0fc      	beq.n	4212 <trx_sram_read+0x42>
    4218:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    421a:	07d2      	lsls	r2, r2, #31
    421c:	d501      	bpl.n	4222 <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    421e:	2200      	movs	r2, #0
    4220:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4222:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4224:	7e1a      	ldrb	r2, [r3, #24]
    4226:	420a      	tst	r2, r1
    4228:	d0fc      	beq.n	4224 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    422a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    422c:	7e1a      	ldrb	r2, [r3, #24]
    422e:	420a      	tst	r2, r1
    4230:	d0fc      	beq.n	422c <trx_sram_read+0x5c>
    4232:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4234:	0752      	lsls	r2, r2, #29
    4236:	d50c      	bpl.n	4252 <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4238:	8b5a      	ldrh	r2, [r3, #26]
    423a:	0752      	lsls	r2, r2, #29
    423c:	d501      	bpl.n	4242 <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    423e:	2204      	movs	r2, #4
    4240:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4242:	4a41      	ldr	r2, [pc, #260]	; (4348 <trx_sram_read+0x178>)
    4244:	7992      	ldrb	r2, [r2, #6]
    4246:	2a01      	cmp	r2, #1
    4248:	d033      	beq.n	42b2 <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    424a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    424c:	b2d2      	uxtb	r2, r2
    424e:	4941      	ldr	r1, [pc, #260]	; (4354 <trx_sram_read+0x184>)
    4250:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4252:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4254:	7e1a      	ldrb	r2, [r3, #24]
    4256:	420a      	tst	r2, r1
    4258:	d0fc      	beq.n	4254 <trx_sram_read+0x84>
    425a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    425c:	07d2      	lsls	r2, r2, #31
    425e:	d500      	bpl.n	4262 <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4260:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4262:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4264:	7e1a      	ldrb	r2, [r3, #24]
    4266:	420a      	tst	r2, r1
    4268:	d0fc      	beq.n	4264 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    426a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    426c:	7e1a      	ldrb	r2, [r3, #24]
    426e:	420a      	tst	r2, r1
    4270:	d0fc      	beq.n	426c <trx_sram_read+0x9c>
    4272:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4274:	0752      	lsls	r2, r2, #29
    4276:	d50c      	bpl.n	4292 <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4278:	8b5a      	ldrh	r2, [r3, #26]
    427a:	0752      	lsls	r2, r2, #29
    427c:	d501      	bpl.n	4282 <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    427e:	2204      	movs	r2, #4
    4280:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4282:	4a31      	ldr	r2, [pc, #196]	; (4348 <trx_sram_read+0x178>)
    4284:	7992      	ldrb	r2, [r2, #6]
    4286:	2a01      	cmp	r2, #1
    4288:	d019      	beq.n	42be <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    428c:	b2db      	uxtb	r3, r3
    428e:	4a31      	ldr	r2, [pc, #196]	; (4354 <trx_sram_read+0x184>)
    4290:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4292:	1e7b      	subs	r3, r7, #1
    4294:	b2db      	uxtb	r3, r3
    4296:	2f00      	cmp	r7, #0
    4298:	d03c      	beq.n	4314 <trx_sram_read+0x144>
    429a:	3301      	adds	r3, #1
    429c:	469c      	mov	ip, r3
    429e:	44ac      	add	ip, r5
    42a0:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    42a2:	4e29      	ldr	r6, [pc, #164]	; (4348 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    42a4:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42a6:	2300      	movs	r3, #0
    42a8:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    42aa:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    42ac:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42ae:	46b1      	mov	r9, r6
    42b0:	e015      	b.n	42de <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    42b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42b4:	05d2      	lsls	r2, r2, #23
    42b6:	0dd2      	lsrs	r2, r2, #23
    42b8:	4926      	ldr	r1, [pc, #152]	; (4354 <trx_sram_read+0x184>)
    42ba:	800a      	strh	r2, [r1, #0]
    42bc:	e7c9      	b.n	4252 <trx_sram_read+0x82>
    42be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42c0:	05db      	lsls	r3, r3, #23
    42c2:	0ddb      	lsrs	r3, r3, #23
    42c4:	4a23      	ldr	r2, [pc, #140]	; (4354 <trx_sram_read+0x184>)
    42c6:	8013      	strh	r3, [r2, #0]
    42c8:	e7e3      	b.n	4292 <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42ca:	464a      	mov	r2, r9
    42cc:	7992      	ldrb	r2, [r2, #6]
    42ce:	2a01      	cmp	r2, #1
    42d0:	d01c      	beq.n	430c <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42d2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    42d4:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    42d6:	702f      	strb	r7, [r5, #0]
		data++;
    42d8:	3501      	adds	r5, #1
	while (length--) {
    42da:	4565      	cmp	r5, ip
    42dc:	d01a      	beq.n	4314 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    42de:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42e0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    42e2:	4202      	tst	r2, r0
    42e4:	d0fc      	beq.n	42e0 <trx_sram_read+0x110>
    42e6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    42e8:	4202      	tst	r2, r0
    42ea:	d001      	beq.n	42f0 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42ec:	4652      	mov	r2, sl
    42ee:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42f0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    42f2:	4222      	tst	r2, r4
    42f4:	d0fc      	beq.n	42f0 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42f6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    42f8:	420a      	tst	r2, r1
    42fa:	d0fc      	beq.n	42f6 <trx_sram_read+0x126>
    42fc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    42fe:	420a      	tst	r2, r1
    4300:	d0e9      	beq.n	42d6 <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4302:	8b5a      	ldrh	r2, [r3, #26]
    4304:	420a      	tst	r2, r1
    4306:	d0e0      	beq.n	42ca <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4308:	8359      	strh	r1, [r3, #26]
    430a:	e7de      	b.n	42ca <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    430c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    430e:	05ff      	lsls	r7, r7, #23
    4310:	0dff      	lsrs	r7, r7, #23
    4312:	e7e0      	b.n	42d6 <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4314:	2200      	movs	r2, #0
    4316:	490d      	ldr	r1, [pc, #52]	; (434c <trx_sram_read+0x17c>)
    4318:	480b      	ldr	r0, [pc, #44]	; (4348 <trx_sram_read+0x178>)
    431a:	4b0d      	ldr	r3, [pc, #52]	; (4350 <trx_sram_read+0x180>)
    431c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    431e:	23ff      	movs	r3, #255	; 0xff
    4320:	4642      	mov	r2, r8
    4322:	4213      	tst	r3, r2
    4324:	d005      	beq.n	4332 <trx_sram_read+0x162>
		cpu_irq_enable();
    4326:	2201      	movs	r2, #1
    4328:	4b06      	ldr	r3, [pc, #24]	; (4344 <trx_sram_read+0x174>)
    432a:	701a      	strb	r2, [r3, #0]
    432c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4330:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4332:	b002      	add	sp, #8
    4334:	bc1c      	pop	{r2, r3, r4}
    4336:	4690      	mov	r8, r2
    4338:	4699      	mov	r9, r3
    433a:	46a2      	mov	sl, r4
    433c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	00000155 	.word	0x00000155
    4344:	20000008 	.word	0x20000008
    4348:	200003dc 	.word	0x200003dc
    434c:	20002bac 	.word	0x20002bac
    4350:	00000bed 	.word	0x00000bed
    4354:	20002ba4 	.word	0x20002ba4

00004358 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    4358:	b5f0      	push	{r4, r5, r6, r7, lr}
    435a:	46d6      	mov	lr, sl
    435c:	464f      	mov	r7, r9
    435e:	4646      	mov	r6, r8
    4360:	b5c0      	push	{r6, r7, lr}
    4362:	0006      	movs	r6, r0
    4364:	468a      	mov	sl, r1
    4366:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    4368:	2001      	movs	r0, #1
    436a:	4b76      	ldr	r3, [pc, #472]	; (4544 <trx_aes_wrrd+0x1ec>)
    436c:	4798      	blx	r3

	ENTER_TRX_REGION();
    436e:	2100      	movs	r1, #0
    4370:	2000      	movs	r0, #0
    4372:	4b75      	ldr	r3, [pc, #468]	; (4548 <trx_aes_wrrd+0x1f0>)
    4374:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4376:	4f75      	ldr	r7, [pc, #468]	; (454c <trx_aes_wrrd+0x1f4>)
    4378:	2201      	movs	r2, #1
    437a:	4975      	ldr	r1, [pc, #468]	; (4550 <trx_aes_wrrd+0x1f8>)
    437c:	0038      	movs	r0, r7
    437e:	4b75      	ldr	r3, [pc, #468]	; (4554 <trx_aes_wrrd+0x1fc>)
    4380:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4382:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4384:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4386:	7e1a      	ldrb	r2, [r3, #24]
    4388:	420a      	tst	r2, r1
    438a:	d0fc      	beq.n	4386 <trx_aes_wrrd+0x2e>
    438c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    438e:	07d2      	lsls	r2, r2, #31
    4390:	d501      	bpl.n	4396 <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4392:	2240      	movs	r2, #64	; 0x40
    4394:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4396:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4398:	7e1a      	ldrb	r2, [r3, #24]
    439a:	420a      	tst	r2, r1
    439c:	d0fc      	beq.n	4398 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    439e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43a0:	7e1a      	ldrb	r2, [r3, #24]
    43a2:	420a      	tst	r2, r1
    43a4:	d0fc      	beq.n	43a0 <trx_aes_wrrd+0x48>
    43a6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    43a8:	0752      	lsls	r2, r2, #29
    43aa:	d50c      	bpl.n	43c6 <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43ac:	8b5a      	ldrh	r2, [r3, #26]
    43ae:	0752      	lsls	r2, r2, #29
    43b0:	d501      	bpl.n	43b6 <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    43b2:	2204      	movs	r2, #4
    43b4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    43b6:	4a65      	ldr	r2, [pc, #404]	; (454c <trx_aes_wrrd+0x1f4>)
    43b8:	7992      	ldrb	r2, [r2, #6]
    43ba:	2a01      	cmp	r2, #1
    43bc:	d055      	beq.n	446a <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43c0:	b2d2      	uxtb	r2, r2
    43c2:	4965      	ldr	r1, [pc, #404]	; (4558 <trx_aes_wrrd+0x200>)
    43c4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    43c6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43c8:	7e1a      	ldrb	r2, [r3, #24]
    43ca:	420a      	tst	r2, r1
    43cc:	d0fc      	beq.n	43c8 <trx_aes_wrrd+0x70>
    43ce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    43d0:	07d2      	lsls	r2, r2, #31
    43d2:	d500      	bpl.n	43d6 <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    43d4:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    43d6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43d8:	7e1a      	ldrb	r2, [r3, #24]
    43da:	420a      	tst	r2, r1
    43dc:	d0fc      	beq.n	43d8 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    43de:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43e0:	7e1a      	ldrb	r2, [r3, #24]
    43e2:	420a      	tst	r2, r1
    43e4:	d0fc      	beq.n	43e0 <trx_aes_wrrd+0x88>
    43e6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    43e8:	0752      	lsls	r2, r2, #29
    43ea:	d50c      	bpl.n	4406 <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43ec:	8b5a      	ldrh	r2, [r3, #26]
    43ee:	0752      	lsls	r2, r2, #29
    43f0:	d501      	bpl.n	43f6 <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    43f2:	2204      	movs	r2, #4
    43f4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    43f6:	4a55      	ldr	r2, [pc, #340]	; (454c <trx_aes_wrrd+0x1f4>)
    43f8:	7992      	ldrb	r2, [r2, #6]
    43fa:	2a01      	cmp	r2, #1
    43fc:	d03b      	beq.n	4476 <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4400:	b2d2      	uxtb	r2, r2
    4402:	4955      	ldr	r1, [pc, #340]	; (4558 <trx_aes_wrrd+0x200>)
    4404:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    4406:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4408:	7e1a      	ldrb	r2, [r3, #24]
    440a:	420a      	tst	r2, r1
    440c:	d0fc      	beq.n	4408 <trx_aes_wrrd+0xb0>
    440e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4410:	07d2      	lsls	r2, r2, #31
    4412:	d502      	bpl.n	441a <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4414:	4652      	mov	r2, sl
    4416:	7812      	ldrb	r2, [r2, #0]
    4418:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    441a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    441c:	7e1a      	ldrb	r2, [r3, #24]
    441e:	420a      	tst	r2, r1
    4420:	d0fc      	beq.n	441c <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4422:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4424:	7e1a      	ldrb	r2, [r3, #24]
    4426:	420a      	tst	r2, r1
    4428:	d0fc      	beq.n	4424 <trx_aes_wrrd+0xcc>
    442a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    442c:	0752      	lsls	r2, r2, #29
    442e:	d50c      	bpl.n	444a <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4430:	8b5a      	ldrh	r2, [r3, #26]
    4432:	0752      	lsls	r2, r2, #29
    4434:	d501      	bpl.n	443a <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4436:	2204      	movs	r2, #4
    4438:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    443a:	4a44      	ldr	r2, [pc, #272]	; (454c <trx_aes_wrrd+0x1f4>)
    443c:	7992      	ldrb	r2, [r2, #6]
    443e:	2a01      	cmp	r2, #1
    4440:	d01f      	beq.n	4482 <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4444:	b2db      	uxtb	r3, r3
    4446:	4a44      	ldr	r2, [pc, #272]	; (4558 <trx_aes_wrrd+0x200>)
    4448:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    444a:	2700      	movs	r7, #0
    444c:	2c00      	cmp	r4, #0
    444e:	d043      	beq.n	44d8 <trx_aes_wrrd+0x180>
    4450:	4656      	mov	r6, sl
    4452:	3c01      	subs	r4, #1
    4454:	b2e4      	uxtb	r4, r4
    4456:	3401      	adds	r4, #1
    4458:	44a2      	add	sl, r4
    445a:	46d0      	mov	r8, sl
    445c:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    445e:	4d3b      	ldr	r5, [pc, #236]	; (454c <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    4460:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    4462:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    4464:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4466:	46a9      	mov	r9, r5
    4468:	e01b      	b.n	44a2 <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    446a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    446c:	05d2      	lsls	r2, r2, #23
    446e:	0dd2      	lsrs	r2, r2, #23
    4470:	4939      	ldr	r1, [pc, #228]	; (4558 <trx_aes_wrrd+0x200>)
    4472:	800a      	strh	r2, [r1, #0]
    4474:	e7a7      	b.n	43c6 <trx_aes_wrrd+0x6e>
    4476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4478:	05d2      	lsls	r2, r2, #23
    447a:	0dd2      	lsrs	r2, r2, #23
    447c:	4936      	ldr	r1, [pc, #216]	; (4558 <trx_aes_wrrd+0x200>)
    447e:	800a      	strh	r2, [r1, #0]
    4480:	e7c1      	b.n	4406 <trx_aes_wrrd+0xae>
    4482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4484:	05db      	lsls	r3, r3, #23
    4486:	0ddb      	lsrs	r3, r3, #23
    4488:	4a33      	ldr	r2, [pc, #204]	; (4558 <trx_aes_wrrd+0x200>)
    448a:	8013      	strh	r3, [r2, #0]
    448c:	e7dd      	b.n	444a <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    448e:	464a      	mov	r2, r9
    4490:	7992      	ldrb	r2, [r2, #6]
    4492:	2a01      	cmp	r2, #1
    4494:	d01c      	beq.n	44d0 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4496:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4498:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    449a:	7037      	strb	r7, [r6, #0]
    449c:	3601      	adds	r6, #1
	while (length > 0) {
    449e:	45b0      	cmp	r8, r6
    44a0:	d01a      	beq.n	44d8 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    44a2:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44a4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    44a6:	4202      	tst	r2, r0
    44a8:	d0fc      	beq.n	44a4 <trx_aes_wrrd+0x14c>
    44aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    44ac:	4202      	tst	r2, r0
    44ae:	d001      	beq.n	44b4 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    44b0:	7872      	ldrb	r2, [r6, #1]
    44b2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    44b4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    44b6:	4222      	tst	r2, r4
    44b8:	d0fc      	beq.n	44b4 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44ba:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    44bc:	420a      	tst	r2, r1
    44be:	d0fc      	beq.n	44ba <trx_aes_wrrd+0x162>
    44c0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    44c2:	420a      	tst	r2, r1
    44c4:	d0e9      	beq.n	449a <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    44c6:	8b5a      	ldrh	r2, [r3, #26]
    44c8:	420a      	tst	r2, r1
    44ca:	d0e0      	beq.n	448e <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    44cc:	8359      	strh	r1, [r3, #26]
    44ce:	e7de      	b.n	448e <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    44d0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    44d2:	05ff      	lsls	r7, r7, #23
    44d4:	0dff      	lsrs	r7, r7, #23
    44d6:	e7e0      	b.n	449a <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    44d8:	4b1c      	ldr	r3, [pc, #112]	; (454c <trx_aes_wrrd+0x1f4>)
    44da:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    44dc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44de:	7e1a      	ldrb	r2, [r3, #24]
    44e0:	420a      	tst	r2, r1
    44e2:	d0fc      	beq.n	44de <trx_aes_wrrd+0x186>
    44e4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    44e6:	07d2      	lsls	r2, r2, #31
    44e8:	d501      	bpl.n	44ee <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    44ea:	2200      	movs	r2, #0
    44ec:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    44ee:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    44f0:	7e1a      	ldrb	r2, [r3, #24]
    44f2:	420a      	tst	r2, r1
    44f4:	d0fc      	beq.n	44f0 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    44f6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44f8:	7e1a      	ldrb	r2, [r3, #24]
    44fa:	420a      	tst	r2, r1
    44fc:	d0fc      	beq.n	44f8 <trx_aes_wrrd+0x1a0>
    44fe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4500:	0752      	lsls	r2, r2, #29
    4502:	d50a      	bpl.n	451a <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4504:	8b5a      	ldrh	r2, [r3, #26]
    4506:	0752      	lsls	r2, r2, #29
    4508:	d501      	bpl.n	450e <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    450a:	2204      	movs	r2, #4
    450c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    450e:	4a0f      	ldr	r2, [pc, #60]	; (454c <trx_aes_wrrd+0x1f4>)
    4510:	7992      	ldrb	r2, [r2, #6]
    4512:	2a01      	cmp	r2, #1
    4514:	d011      	beq.n	453a <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4516:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4518:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    451a:	4653      	mov	r3, sl
    451c:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    451e:	2200      	movs	r2, #0
    4520:	490b      	ldr	r1, [pc, #44]	; (4550 <trx_aes_wrrd+0x1f8>)
    4522:	480a      	ldr	r0, [pc, #40]	; (454c <trx_aes_wrrd+0x1f4>)
    4524:	4b0b      	ldr	r3, [pc, #44]	; (4554 <trx_aes_wrrd+0x1fc>)
    4526:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    4528:	2100      	movs	r1, #0
    452a:	2000      	movs	r0, #0
    452c:	4b0b      	ldr	r3, [pc, #44]	; (455c <trx_aes_wrrd+0x204>)
    452e:	4798      	blx	r3
}
    4530:	bc1c      	pop	{r2, r3, r4}
    4532:	4690      	mov	r8, r2
    4534:	4699      	mov	r9, r3
    4536:	46a2      	mov	sl, r4
    4538:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    453a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    453c:	05ff      	lsls	r7, r7, #23
    453e:	0dff      	lsrs	r7, r7, #23
    4540:	e7eb      	b.n	451a <trx_aes_wrrd+0x1c2>
    4542:	46c0      	nop			; (mov r8, r8)
    4544:	00000155 	.word	0x00000155
    4548:	0000033d 	.word	0x0000033d
    454c:	200003dc 	.word	0x200003dc
    4550:	20002bac 	.word	0x20002bac
    4554:	00000bed 	.word	0x00000bed
    4558:	20002ba4 	.word	0x20002ba4
    455c:	0000031d 	.word	0x0000031d

00004560 <appCmdDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataConf(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
}
    4560:	4770      	bx	lr
	...

00004564 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4564:	2280      	movs	r2, #128	; 0x80
    4566:	0312      	lsls	r2, r2, #12
    4568:	4b01      	ldr	r3, [pc, #4]	; (4570 <appCmdIdentifyPeriodTimerHandler+0xc>)
    456a:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    456c:	4770      	bx	lr
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	41004400 	.word	0x41004400

00004574 <appCmdIdentifyDurationTimerHandler>:
{
    4574:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    4576:	2280      	movs	r2, #128	; 0x80
    4578:	0312      	lsls	r2, r2, #12
    457a:	4b03      	ldr	r3, [pc, #12]	; (4588 <appCmdIdentifyDurationTimerHandler+0x14>)
    457c:	619a      	str	r2, [r3, #24]
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    457e:	4803      	ldr	r0, [pc, #12]	; (458c <appCmdIdentifyDurationTimerHandler+0x18>)
    4580:	4b03      	ldr	r3, [pc, #12]	; (4590 <appCmdIdentifyDurationTimerHandler+0x1c>)
    4582:	4798      	blx	r3
}
    4584:	bd10      	pop	{r4, pc}
    4586:	46c0      	nop			; (mov r8, r8)
    4588:	41004400 	.word	0x41004400
    458c:	20000318 	.word	0x20000318
    4590:	00003605 	.word	0x00003605

00004594 <appCmdHandle>:
{
    4594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4596:	0004      	movs	r4, r0
		return false;
    4598:	2000      	movs	r0, #0
	if (size < sizeof(AppCmdHeader_t)) {
    459a:	2900      	cmp	r1, #0
    459c:	d002      	beq.n	45a4 <appCmdHandle+0x10>
	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    459e:	7823      	ldrb	r3, [r4, #0]
    45a0:	2b10      	cmp	r3, #16
    45a2:	d000      	beq.n	45a6 <appCmdHandle+0x12>
}
    45a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sizeof(AppCmdIdentify_t) != size) {
    45a6:	2905      	cmp	r1, #5
    45a8:	d1fc      	bne.n	45a4 <appCmdHandle+0x10>
		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    45aa:	4e12      	ldr	r6, [pc, #72]	; (45f4 <appCmdHandle+0x60>)
    45ac:	0030      	movs	r0, r6
    45ae:	4f12      	ldr	r7, [pc, #72]	; (45f8 <appCmdHandle+0x64>)
    45b0:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    45b2:	4d12      	ldr	r5, [pc, #72]	; (45fc <appCmdHandle+0x68>)
    45b4:	0028      	movs	r0, r5
    45b6:	47b8      	blx	r7
		appCmdIdentifyDurationTimer.interval = req->duration;
    45b8:	7862      	ldrb	r2, [r4, #1]
    45ba:	78a3      	ldrb	r3, [r4, #2]
    45bc:	021b      	lsls	r3, r3, #8
    45be:	4313      	orrs	r3, r2
    45c0:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    45c2:	2300      	movs	r3, #0
    45c4:	7333      	strb	r3, [r6, #12]
			= appCmdIdentifyDurationTimerHandler;
    45c6:	4b0e      	ldr	r3, [pc, #56]	; (4600 <appCmdHandle+0x6c>)
    45c8:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    45ca:	0030      	movs	r0, r6
    45cc:	4e0d      	ldr	r6, [pc, #52]	; (4604 <appCmdHandle+0x70>)
    45ce:	47b0      	blx	r6
		appCmdIdentifyPeriodTimer.interval = req->period;
    45d0:	78e2      	ldrb	r2, [r4, #3]
    45d2:	7923      	ldrb	r3, [r4, #4]
    45d4:	021b      	lsls	r3, r3, #8
    45d6:	4313      	orrs	r3, r2
    45d8:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    45da:	2301      	movs	r3, #1
    45dc:	732b      	strb	r3, [r5, #12]
			= appCmdIdentifyPeriodTimerHandler;
    45de:	4b0a      	ldr	r3, [pc, #40]	; (4608 <appCmdHandle+0x74>)
    45e0:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    45e2:	0028      	movs	r0, r5
    45e4:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    45e6:	2280      	movs	r2, #128	; 0x80
    45e8:	0312      	lsls	r2, r2, #12
    45ea:	4b08      	ldr	r3, [pc, #32]	; (460c <appCmdHandle+0x78>)
    45ec:	615a      	str	r2, [r3, #20]
		return true;
    45ee:	2001      	movs	r0, #1
    45f0:	e7d8      	b.n	45a4 <appCmdHandle+0x10>
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	20000304 	.word	0x20000304
    45f8:	00003605 	.word	0x00003605
    45fc:	20000318 	.word	0x20000318
    4600:	00004575 	.word	0x00004575
    4604:	00003671 	.word	0x00003671
    4608:	00004565 	.word	0x00004565
    460c:	41004400 	.word	0x41004400

00004610 <APP_CommandsInit>:
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4610:	4b05      	ldr	r3, [pc, #20]	; (4628 <APP_CommandsInit+0x18>)
    4612:	2200      	movs	r2, #0
    4614:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
    4616:	4a05      	ldr	r2, [pc, #20]	; (462c <APP_CommandsInit+0x1c>)
    4618:	611a      	str	r2, [r3, #16]
	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    461a:	4b05      	ldr	r3, [pc, #20]	; (4630 <APP_CommandsInit+0x20>)
    461c:	2201      	movs	r2, #1
    461e:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    4620:	4a04      	ldr	r2, [pc, #16]	; (4634 <APP_CommandsInit+0x24>)
    4622:	611a      	str	r2, [r3, #16]
}
    4624:	4770      	bx	lr
    4626:	46c0      	nop			; (mov r8, r8)
    4628:	20000304 	.word	0x20000304
    462c:	00004575 	.word	0x00004575
    4630:	20000318 	.word	0x20000318
    4634:	00004565 	.word	0x00004565

00004638 <APP_CommandsByteReceived>:
{
    4638:	b510      	push	{r4, lr}
    463a:	b088      	sub	sp, #32
	switch (appCmdUartState) {
    463c:	4b4b      	ldr	r3, [pc, #300]	; (476c <APP_CommandsByteReceived+0x134>)
    463e:	781a      	ldrb	r2, [r3, #0]
    4640:	2a04      	cmp	r2, #4
    4642:	d85d      	bhi.n	4700 <APP_CommandsByteReceived+0xc8>
    4644:	0093      	lsls	r3, r2, #2
    4646:	4a4a      	ldr	r2, [pc, #296]	; (4770 <APP_CommandsByteReceived+0x138>)
    4648:	58d3      	ldr	r3, [r2, r3]
    464a:	469f      	mov	pc, r3
		if (0x10 == byte) {
    464c:	2810      	cmp	r0, #16
    464e:	d157      	bne.n	4700 <APP_CommandsByteReceived+0xc8>
			appCmdUartPtr = 0;
    4650:	2200      	movs	r2, #0
    4652:	4b48      	ldr	r3, [pc, #288]	; (4774 <APP_CommandsByteReceived+0x13c>)
    4654:	701a      	strb	r2, [r3, #0]
			appCmdUartCsum = byte;
    4656:	3210      	adds	r2, #16
    4658:	4b47      	ldr	r3, [pc, #284]	; (4778 <APP_CommandsByteReceived+0x140>)
    465a:	701a      	strb	r2, [r3, #0]
			appCmdUartState = APP_CMD_UART_STATE_SYNC;
    465c:	3a0f      	subs	r2, #15
    465e:	4b43      	ldr	r3, [pc, #268]	; (476c <APP_CommandsByteReceived+0x134>)
    4660:	701a      	strb	r2, [r3, #0]
    4662:	e04d      	b.n	4700 <APP_CommandsByteReceived+0xc8>
		appCmdUartCsum += byte;
    4664:	4a44      	ldr	r2, [pc, #272]	; (4778 <APP_CommandsByteReceived+0x140>)
    4666:	7813      	ldrb	r3, [r2, #0]
    4668:	18c3      	adds	r3, r0, r3
    466a:	7013      	strb	r3, [r2, #0]
		if (0x02 == byte) {
    466c:	2802      	cmp	r0, #2
    466e:	d003      	beq.n	4678 <APP_CommandsByteReceived+0x40>
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    4670:	2200      	movs	r2, #0
    4672:	4b3e      	ldr	r3, [pc, #248]	; (476c <APP_CommandsByteReceived+0x134>)
    4674:	701a      	strb	r2, [r3, #0]
    4676:	e043      	b.n	4700 <APP_CommandsByteReceived+0xc8>
			appCmdUartState = APP_CMD_UART_STATE_DATA;
    4678:	2202      	movs	r2, #2
    467a:	4b3c      	ldr	r3, [pc, #240]	; (476c <APP_CommandsByteReceived+0x134>)
    467c:	701a      	strb	r2, [r3, #0]
    467e:	e03f      	b.n	4700 <APP_CommandsByteReceived+0xc8>
		appCmdUartCsum += byte;
    4680:	4a3d      	ldr	r2, [pc, #244]	; (4778 <APP_CommandsByteReceived+0x140>)
    4682:	7813      	ldrb	r3, [r2, #0]
    4684:	18c3      	adds	r3, r0, r3
    4686:	7013      	strb	r3, [r2, #0]
		if (0x10 == byte) {
    4688:	2810      	cmp	r0, #16
    468a:	d00d      	beq.n	46a8 <APP_CommandsByteReceived+0x70>
			appCmdUartBuf[appCmdUartPtr++] = byte;
    468c:	4a39      	ldr	r2, [pc, #228]	; (4774 <APP_CommandsByteReceived+0x13c>)
    468e:	7813      	ldrb	r3, [r2, #0]
    4690:	1c59      	adds	r1, r3, #1
    4692:	7011      	strb	r1, [r2, #0]
    4694:	4a39      	ldr	r2, [pc, #228]	; (477c <APP_CommandsByteReceived+0x144>)
    4696:	54d0      	strb	r0, [r2, r3]
		if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
    4698:	4b36      	ldr	r3, [pc, #216]	; (4774 <APP_CommandsByteReceived+0x13c>)
    469a:	781b      	ldrb	r3, [r3, #0]
    469c:	2b10      	cmp	r3, #16
    469e:	d12f      	bne.n	4700 <APP_CommandsByteReceived+0xc8>
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    46a0:	2200      	movs	r2, #0
    46a2:	4b32      	ldr	r3, [pc, #200]	; (476c <APP_CommandsByteReceived+0x134>)
    46a4:	701a      	strb	r2, [r3, #0]
    46a6:	e02b      	b.n	4700 <APP_CommandsByteReceived+0xc8>
			appCmdUartState = APP_CMD_UART_STATE_MARK;
    46a8:	2203      	movs	r2, #3
    46aa:	4b30      	ldr	r3, [pc, #192]	; (476c <APP_CommandsByteReceived+0x134>)
    46ac:	701a      	strb	r2, [r3, #0]
    46ae:	e7f3      	b.n	4698 <APP_CommandsByteReceived+0x60>
		appCmdUartCsum += byte;
    46b0:	4a31      	ldr	r2, [pc, #196]	; (4778 <APP_CommandsByteReceived+0x140>)
    46b2:	7813      	ldrb	r3, [r2, #0]
    46b4:	18c3      	adds	r3, r0, r3
    46b6:	7013      	strb	r3, [r2, #0]
		if (0x10 == byte) {
    46b8:	2810      	cmp	r0, #16
    46ba:	d005      	beq.n	46c8 <APP_CommandsByteReceived+0x90>
		} else if (0x03 == byte) {
    46bc:	2803      	cmp	r0, #3
    46be:	d014      	beq.n	46ea <APP_CommandsByteReceived+0xb2>
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    46c0:	2200      	movs	r2, #0
    46c2:	4b2a      	ldr	r3, [pc, #168]	; (476c <APP_CommandsByteReceived+0x134>)
    46c4:	701a      	strb	r2, [r3, #0]
    46c6:	e01b      	b.n	4700 <APP_CommandsByteReceived+0xc8>
			appCmdUartBuf[appCmdUartPtr++] = byte;
    46c8:	492a      	ldr	r1, [pc, #168]	; (4774 <APP_CommandsByteReceived+0x13c>)
    46ca:	780a      	ldrb	r2, [r1, #0]
    46cc:	1c53      	adds	r3, r2, #1
    46ce:	b2db      	uxtb	r3, r3
    46d0:	700b      	strb	r3, [r1, #0]
    46d2:	492a      	ldr	r1, [pc, #168]	; (477c <APP_CommandsByteReceived+0x144>)
    46d4:	5488      	strb	r0, [r1, r2]
			if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
    46d6:	2b10      	cmp	r3, #16
    46d8:	d003      	beq.n	46e2 <APP_CommandsByteReceived+0xaa>
				appCmdUartState = APP_CMD_UART_STATE_DATA;
    46da:	2202      	movs	r2, #2
    46dc:	4b23      	ldr	r3, [pc, #140]	; (476c <APP_CommandsByteReceived+0x134>)
    46de:	701a      	strb	r2, [r3, #0]
    46e0:	e00e      	b.n	4700 <APP_CommandsByteReceived+0xc8>
				appCmdUartState = APP_CMD_UART_STATE_IDLE;
    46e2:	2200      	movs	r2, #0
    46e4:	4b21      	ldr	r3, [pc, #132]	; (476c <APP_CommandsByteReceived+0x134>)
    46e6:	701a      	strb	r2, [r3, #0]
    46e8:	e00a      	b.n	4700 <APP_CommandsByteReceived+0xc8>
			appCmdUartState = APP_CMD_UART_STATE_CSUM;
    46ea:	2204      	movs	r2, #4
    46ec:	4b1f      	ldr	r3, [pc, #124]	; (476c <APP_CommandsByteReceived+0x134>)
    46ee:	701a      	strb	r2, [r3, #0]
    46f0:	e006      	b.n	4700 <APP_CommandsByteReceived+0xc8>
		if (byte == appCmdUartCsum) {
    46f2:	4b21      	ldr	r3, [pc, #132]	; (4778 <APP_CommandsByteReceived+0x140>)
    46f4:	781b      	ldrb	r3, [r3, #0]
    46f6:	4283      	cmp	r3, r0
    46f8:	d004      	beq.n	4704 <APP_CommandsByteReceived+0xcc>
		appCmdUartState = APP_CMD_UART_STATE_IDLE;
    46fa:	2200      	movs	r2, #0
    46fc:	4b1b      	ldr	r3, [pc, #108]	; (476c <APP_CommandsByteReceived+0x134>)
    46fe:	701a      	strb	r2, [r3, #0]
}
    4700:	b008      	add	sp, #32
    4702:	bd10      	pop	{r4, pc}
			appCmdUartProcess(appCmdUartBuf, appCmdUartPtr);
    4704:	4b1b      	ldr	r3, [pc, #108]	; (4774 <APP_CommandsByteReceived+0x13c>)
	if (size < sizeof(AppCmdUartHeader_t)) {
    4706:	781b      	ldrb	r3, [r3, #0]
    4708:	2b08      	cmp	r3, #8
    470a:	d9f6      	bls.n	46fa <APP_CommandsByteReceived+0xc2>
	if (APP_COMMAND_ID_IDENTIFY == header->commandId) {
    470c:	4b1b      	ldr	r3, [pc, #108]	; (477c <APP_CommandsByteReceived+0x144>)
    470e:	781b      	ldrb	r3, [r3, #0]
    4710:	2b10      	cmp	r3, #16
    4712:	d1f2      	bne.n	46fa <APP_CommandsByteReceived+0xc2>
		cmd.id = APP_COMMAND_ID_IDENTIFY;
    4714:	2210      	movs	r2, #16
    4716:	ab06      	add	r3, sp, #24
    4718:	701a      	strb	r2, [r3, #0]
		cmd.duration = uartCmd->duration;
    471a:	4a18      	ldr	r2, [pc, #96]	; (477c <APP_CommandsByteReceived+0x144>)
    471c:	6893      	ldr	r3, [r2, #8]
    471e:	021b      	lsls	r3, r3, #8
    4720:	2119      	movs	r1, #25
    4722:	4469      	add	r1, sp
    4724:	0c1b      	lsrs	r3, r3, #16
    4726:	700b      	strb	r3, [r1, #0]
    4728:	0a1b      	lsrs	r3, r3, #8
    472a:	704b      	strb	r3, [r1, #1]
		cmd.period = uartCmd->period;
    472c:	7ad0      	ldrb	r0, [r2, #11]
    472e:	7b11      	ldrb	r1, [r2, #12]
    4730:	231b      	movs	r3, #27
    4732:	446b      	add	r3, sp
    4734:	7018      	strb	r0, [r3, #0]
    4736:	7059      	strb	r1, [r3, #1]
		appCmdBuffer(header->dstAddr, (uint8_t *)&cmd,
    4738:	6813      	ldr	r3, [r2, #0]
    473a:	0a1b      	lsrs	r3, r3, #8
    473c:	b29b      	uxth	r3, r3
	if (0 == addr)
    473e:	2b00      	cmp	r3, #0
    4740:	d00f      	beq.n	4762 <APP_CommandsByteReceived+0x12a>
    4742:	2116      	movs	r1, #22
    4744:	4469      	add	r1, sp
    4746:	800b      	strh	r3, [r1, #0]
	MiApp_SendData(SHORT_ADDR_LEN, (uint8_t*)&addr, size, payload, wsnmsghandle, true, appCmdDataConf);
    4748:	4b0d      	ldr	r3, [pc, #52]	; (4780 <APP_CommandsByteReceived+0x148>)
    474a:	9302      	str	r3, [sp, #8]
    474c:	2301      	movs	r3, #1
    474e:	9301      	str	r3, [sp, #4]
    4750:	4b0c      	ldr	r3, [pc, #48]	; (4784 <APP_CommandsByteReceived+0x14c>)
    4752:	781b      	ldrb	r3, [r3, #0]
    4754:	9300      	str	r3, [sp, #0]
    4756:	ab06      	add	r3, sp, #24
    4758:	2205      	movs	r2, #5
    475a:	2002      	movs	r0, #2
    475c:	4c0a      	ldr	r4, [pc, #40]	; (4788 <APP_CommandsByteReceived+0x150>)
    475e:	47a0      	blx	r4
    4760:	e7cb      	b.n	46fa <APP_CommandsByteReceived+0xc2>
		appCmdHandle(data, size);
    4762:	2105      	movs	r1, #5
    4764:	a806      	add	r0, sp, #24
    4766:	4b09      	ldr	r3, [pc, #36]	; (478c <APP_CommandsByteReceived+0x154>)
    4768:	4798      	blx	r3
    476a:	e7c6      	b.n	46fa <APP_CommandsByteReceived+0xc2>
    476c:	2000033e 	.word	0x2000033e
    4770:	0000a210 	.word	0x0000a210
    4774:	2000033d 	.word	0x2000033d
    4778:	2000033c 	.word	0x2000033c
    477c:	2000032c 	.word	0x2000032c
    4780:	00004561 	.word	0x00004561
    4784:	20002be8 	.word	0x20002be8
    4788:	000052d9 	.word	0x000052d9
    478c:	00004595 	.word	0x00004595

00004790 <configure_usart>:

void config_rs485_TX_EN(void);


void configure_usart(void)
{
    4790:	b530      	push	{r4, r5, lr}
    4792:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    4794:	2380      	movs	r3, #128	; 0x80
    4796:	05db      	lsls	r3, r3, #23
    4798:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    479a:	2300      	movs	r3, #0
    479c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    479e:	22ff      	movs	r2, #255	; 0xff
    47a0:	4669      	mov	r1, sp
    47a2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    47a4:	2200      	movs	r2, #0
    47a6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    47a8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    47aa:	2196      	movs	r1, #150	; 0x96
    47ac:	0189      	lsls	r1, r1, #6
    47ae:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    47b0:	2101      	movs	r1, #1
    47b2:	2024      	movs	r0, #36	; 0x24
    47b4:	466c      	mov	r4, sp
    47b6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    47b8:	3001      	adds	r0, #1
    47ba:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    47bc:	3125      	adds	r1, #37	; 0x25
    47be:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    47c0:	3101      	adds	r1, #1
    47c2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    47c4:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    47c6:	3105      	adds	r1, #5
    47c8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    47ca:	3101      	adds	r1, #1
    47cc:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    47ce:	930c      	str	r3, [sp, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    47d0:	930d      	str	r3, [sp, #52]	; 0x34
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    47d2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    47d4:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    47d6:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    47d8:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    47da:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    47dc:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    47de:	2313      	movs	r3, #19
    47e0:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    47e2:	7762      	strb	r2, [r4, #29]
//	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
//	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
//	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
//	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;

	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    47e4:	23c4      	movs	r3, #196	; 0xc4
    47e6:	039b      	lsls	r3, r3, #14
    47e8:	9303      	str	r3, [sp, #12]
	// config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
	// config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
	config_usart.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;		// Tx
    47ea:	4b10      	ldr	r3, [pc, #64]	; (482c <configure_usart+0x9c>)
    47ec:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;		// Rx
    47ee:	4b10      	ldr	r3, [pc, #64]	; (4830 <configure_usart+0xa0>)
    47f0:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance, SERCOM5, &config_usart) != STATUS_OK) {
    47f2:	4d10      	ldr	r5, [pc, #64]	; (4834 <configure_usart+0xa4>)
    47f4:	4c10      	ldr	r4, [pc, #64]	; (4838 <configure_usart+0xa8>)
    47f6:	466a      	mov	r2, sp
    47f8:	4910      	ldr	r1, [pc, #64]	; (483c <configure_usart+0xac>)
    47fa:	0028      	movs	r0, r5
    47fc:	47a0      	blx	r4
    47fe:	2800      	cmp	r0, #0
    4800:	d1f9      	bne.n	47f6 <configure_usart+0x66>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4802:	4d0c      	ldr	r5, [pc, #48]	; (4834 <configure_usart+0xa4>)
    4804:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4806:	0020      	movs	r0, r4
    4808:	4b0d      	ldr	r3, [pc, #52]	; (4840 <configure_usart+0xb0>)
    480a:	4798      	blx	r3
    480c:	231f      	movs	r3, #31
    480e:	4018      	ands	r0, r3
    4810:	3b1e      	subs	r3, #30
    4812:	4083      	lsls	r3, r0
    4814:	4a0b      	ldr	r2, [pc, #44]	; (4844 <configure_usart+0xb4>)
    4816:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4818:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    481a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    481c:	2b00      	cmp	r3, #0
    481e:	d1fc      	bne.n	481a <configure_usart+0x8a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4820:	6823      	ldr	r3, [r4, #0]
    4822:	2202      	movs	r2, #2
    4824:	4313      	orrs	r3, r2
    4826:	6023      	str	r3, [r4, #0]
	}

	usart_enable(&usart_instance);
}
    4828:	b011      	add	sp, #68	; 0x44
    482a:	bd30      	pop	{r4, r5, pc}
    482c:	00360003 	.word	0x00360003
    4830:	00370003 	.word	0x00370003
    4834:	20002bec 	.word	0x20002bec
    4838:	00000ce1 	.word	0x00000ce1
    483c:	42001c00 	.word	0x42001c00
    4840:	00000899 	.word	0x00000899
    4844:	e000e100 	.word	0xe000e100

00004848 <config_rs485_TX_EN>:

void config_rs485_TX_EN(void){
    4848:	b500      	push	{lr}
    484a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    484c:	a901      	add	r1, sp, #4
    484e:	2301      	movs	r3, #1
    4850:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    4852:	2200      	movs	r2, #0
    4854:	708a      	strb	r2, [r1, #2]
	struct port_config pin_config;
	port_get_config_defaults( &pin_config);
	pin_config.direction  = PORT_PIN_DIR_OUTPUT;
    4856:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA27, &pin_config);
    4858:	201b      	movs	r0, #27
    485a:	4b04      	ldr	r3, [pc, #16]	; (486c <config_rs485_TX_EN+0x24>)
    485c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    485e:	2280      	movs	r2, #128	; 0x80
    4860:	0512      	lsls	r2, r2, #20
    4862:	4b03      	ldr	r3, [pc, #12]	; (4870 <config_rs485_TX_EN+0x28>)
    4864:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA27, false);
}
    4866:	b003      	add	sp, #12
    4868:	bd00      	pop	{pc}
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	000004c1 	.word	0x000004c1
    4870:	41004400 	.word	0x41004400

00004874 <readMacAddress>:
    }
*/
}

void readMacAddress(void){
	myLongAddress[0] = 16;
    4874:	4b08      	ldr	r3, [pc, #32]	; (4898 <readMacAddress+0x24>)
    4876:	2210      	movs	r2, #16
    4878:	701a      	strb	r2, [r3, #0]
	myLongAddress[1] = 53;
    487a:	3225      	adds	r2, #37	; 0x25
    487c:	705a      	strb	r2, [r3, #1]
	myLongAddress[2] = 0;
    487e:	2200      	movs	r2, #0
    4880:	709a      	strb	r2, [r3, #2]
	myLongAddress[3] = 32;
    4882:	3220      	adds	r2, #32
    4884:	70da      	strb	r2, [r3, #3]
	myLongAddress[4] = 89;
    4886:	3239      	adds	r2, #57	; 0x39
    4888:	711a      	strb	r2, [r3, #4]
	myLongAddress[5] = 37;
    488a:	3a34      	subs	r2, #52	; 0x34
    488c:	715a      	strb	r2, [r3, #5]
	myLongAddress[6] = 128;
    488e:	325b      	adds	r2, #91	; 0x5b
    4890:	719a      	strb	r2, [r3, #6]
	myLongAddress[7] = 127;
    4892:	3a01      	subs	r2, #1
    4894:	71da      	strb	r2, [r3, #7]
}
    4896:	4770      	bx	lr
    4898:	20000080 	.word	0x20000080

0000489c <main>:
{
    489c:	b570      	push	{r4, r5, r6, lr}
	system_init();
    489e:	4b14      	ldr	r3, [pc, #80]	; (48f0 <main+0x54>)
    48a0:	4798      	blx	r3
	delay_init();
    48a2:	4b14      	ldr	r3, [pc, #80]	; (48f4 <main+0x58>)
    48a4:	4798      	blx	r3
	cpu_irq_enable();	
    48a6:	2201      	movs	r2, #1
    48a8:	4b13      	ldr	r3, [pc, #76]	; (48f8 <main+0x5c>)
    48aa:	701a      	strb	r2, [r3, #0]
    48ac:	f3bf 8f5f 	dmb	sy
    48b0:	b662      	cpsie	i
	config_rs485_TX_EN( );
    48b2:	4b12      	ldr	r3, [pc, #72]	; (48fc <main+0x60>)
    48b4:	4798      	blx	r3
	sio2host_init();
    48b6:	4b12      	ldr	r3, [pc, #72]	; (4900 <main+0x64>)
    48b8:	4798      	blx	r3
	readMacAddress();
    48ba:	4b12      	ldr	r3, [pc, #72]	; (4904 <main+0x68>)
    48bc:	4798      	blx	r3
	wsndemo_init();
    48be:	4b12      	ldr	r3, [pc, #72]	; (4908 <main+0x6c>)
    48c0:	4798      	blx	r3
	configure_usart();
    48c2:	4b12      	ldr	r3, [pc, #72]	; (490c <main+0x70>)
    48c4:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    48c6:	4c12      	ldr	r4, [pc, #72]	; (4910 <main+0x74>)
    48c8:	2580      	movs	r5, #128	; 0x80
    48ca:	052d      	lsls	r5, r5, #20
    48cc:	61a5      	str	r5, [r4, #24]
	usart_write_buffer_wait(&usart_instance, writeDout485, sizeof(writeDout485));
    48ce:	220d      	movs	r2, #13
    48d0:	4910      	ldr	r1, [pc, #64]	; (4914 <main+0x78>)
    48d2:	4811      	ldr	r0, [pc, #68]	; (4918 <main+0x7c>)
    48d4:	4b11      	ldr	r3, [pc, #68]	; (491c <main+0x80>)
    48d6:	4798      	blx	r3
	delay_us(100);
    48d8:	2064      	movs	r0, #100	; 0x64
    48da:	4b11      	ldr	r3, [pc, #68]	; (4920 <main+0x84>)
    48dc:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    48de:	6165      	str	r5, [r4, #20]
	delay_ms(10);
    48e0:	200a      	movs	r0, #10
    48e2:	4b10      	ldr	r3, [pc, #64]	; (4924 <main+0x88>)
    48e4:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    48e6:	61a5      	str	r5, [r4, #24]
		wsndemo_task();
    48e8:	4c0f      	ldr	r4, [pc, #60]	; (4928 <main+0x8c>)
    48ea:	47a0      	blx	r4
    48ec:	e7fd      	b.n	48ea <main+0x4e>
    48ee:	46c0      	nop			; (mov r8, r8)
    48f0:	00001c25 	.word	0x00001c25
    48f4:	00000115 	.word	0x00000115
    48f8:	20000008 	.word	0x20000008
    48fc:	00004849 	.word	0x00004849
    4900:	00002261 	.word	0x00002261
    4904:	00004875 	.word	0x00004875
    4908:	00004a25 	.word	0x00004a25
    490c:	00004791 	.word	0x00004791
    4910:	41004400 	.word	0x41004400
    4914:	20000070 	.word	0x20000070
    4918:	20002bec 	.word	0x20002bec
    491c:	000010c1 	.word	0x000010c1
    4920:	00000155 	.word	0x00000155
    4924:	00000181 	.word	0x00000181
    4928:	00004a45 	.word	0x00004a45

0000492c <Connection_Confirm>:
/**
 * Connection confirmation
 */
static void Connection_Confirm(miwi_status_t status)
{
	if (SUCCESS == status)
    492c:	2800      	cmp	r0, #0
    492e:	d003      	beq.n	4938 <Connection_Confirm+0xc>
        appState = APP_STATE_SEND;
	}
	else
	{
#if defined(PAN_COORDINATOR)
		appState = APP_STATE_START_NETWORK;
    4930:	2201      	movs	r2, #1
    4932:	4b03      	ldr	r3, [pc, #12]	; (4940 <Connection_Confirm+0x14>)
    4934:	701a      	strb	r2, [r3, #0]
#else
        appState = APP_STATE_CONNECT_NETWORK;
#endif
	}
}
    4936:	4770      	bx	lr
        appState = APP_STATE_SEND;
    4938:	2205      	movs	r2, #5
    493a:	4b01      	ldr	r3, [pc, #4]	; (4940 <Connection_Confirm+0x14>)
    493c:	701a      	strb	r2, [r3, #0]
    493e:	e7fa      	b.n	4936 <Connection_Confirm+0xa>
    4940:	20000381 	.word	0x20000381

00004944 <appBroadcastDataConf>:

#if defined(PAN_COORDINATOR) && defined(MIWI_MESH_TOPOLOGY_SIMULATION_MODE)
static void appBroadcastDataConf(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
		
}
    4944:	4770      	bx	lr
	...

00004948 <appDataSendingTimerHandler>:
{
    4948:	b510      	push	{r4, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    494a:	4b06      	ldr	r3, [pc, #24]	; (4964 <appDataSendingTimerHandler+0x1c>)
    494c:	781b      	ldrb	r3, [r3, #0]
    494e:	2b08      	cmp	r3, #8
    4950:	d003      	beq.n	495a <appDataSendingTimerHandler+0x12>
		SYS_TimerStart(&appDataSendingTimer);
    4952:	4805      	ldr	r0, [pc, #20]	; (4968 <appDataSendingTimerHandler+0x20>)
    4954:	4b05      	ldr	r3, [pc, #20]	; (496c <appDataSendingTimerHandler+0x24>)
    4956:	4798      	blx	r3
}
    4958:	bd10      	pop	{r4, pc}
		appState = APP_STATE_SEND;
    495a:	2205      	movs	r2, #5
    495c:	4b01      	ldr	r3, [pc, #4]	; (4964 <appDataSendingTimerHandler+0x1c>)
    495e:	701a      	strb	r2, [r3, #0]
    4960:	e7fa      	b.n	4958 <appDataSendingTimerHandler+0x10>
    4962:	46c0      	nop			; (mov r8, r8)
    4964:	20000381 	.word	0x20000381
    4968:	20002c34 	.word	0x20002c34
    496c:	00003671 	.word	0x00003671

00004970 <appUartSendMessage>:
{
    4970:	b5f0      	push	{r4, r5, r6, r7, lr}
    4972:	46c6      	mov	lr, r8
    4974:	b500      	push	{lr}
    4976:	0006      	movs	r6, r0
    4978:	000d      	movs	r5, r1
	sio2host_putchar(0x10);
    497a:	2010      	movs	r0, #16
    497c:	4c15      	ldr	r4, [pc, #84]	; (49d4 <appUartSendMessage+0x64>)
    497e:	47a0      	blx	r4
	sio2host_putchar(0x02);
    4980:	2002      	movs	r0, #2
    4982:	47a0      	blx	r4
	for (uint8_t i = 0; i < size; i++) {
    4984:	2d00      	cmp	r5, #0
    4986:	d01a      	beq.n	49be <appUartSendMessage+0x4e>
    4988:	0034      	movs	r4, r6
    498a:	3d01      	subs	r5, #1
    498c:	b2ef      	uxtb	r7, r5
    498e:	3701      	adds	r7, #1
    4990:	19f7      	adds	r7, r6, r7
    4992:	2500      	movs	r5, #0
		sio2host_putchar(data[i]);
    4994:	4b0f      	ldr	r3, [pc, #60]	; (49d4 <appUartSendMessage+0x64>)
    4996:	4698      	mov	r8, r3
    4998:	e007      	b.n	49aa <appUartSendMessage+0x3a>
    499a:	7830      	ldrb	r0, [r6, #0]
    499c:	47c0      	blx	r8
		cs += data[i];
    499e:	7831      	ldrb	r1, [r6, #0]
    49a0:	186d      	adds	r5, r5, r1
    49a2:	b2ed      	uxtb	r5, r5
    49a4:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < size; i++) {
    49a6:	42bc      	cmp	r4, r7
    49a8:	d009      	beq.n	49be <appUartSendMessage+0x4e>
    49aa:	0026      	movs	r6, r4
		if (data[i] == 0x10) {
    49ac:	7823      	ldrb	r3, [r4, #0]
    49ae:	2b10      	cmp	r3, #16
    49b0:	d1f3      	bne.n	499a <appUartSendMessage+0x2a>
			sio2host_putchar(0x10);
    49b2:	2010      	movs	r0, #16
    49b4:	4b07      	ldr	r3, [pc, #28]	; (49d4 <appUartSendMessage+0x64>)
    49b6:	4798      	blx	r3
			cs += 0x10;
    49b8:	3510      	adds	r5, #16
    49ba:	b2ed      	uxtb	r5, r5
    49bc:	e7ed      	b.n	499a <appUartSendMessage+0x2a>
	sio2host_putchar(0x10);
    49be:	2010      	movs	r0, #16
    49c0:	4c04      	ldr	r4, [pc, #16]	; (49d4 <appUartSendMessage+0x64>)
    49c2:	47a0      	blx	r4
	sio2host_putchar(0x03);
    49c4:	2003      	movs	r0, #3
    49c6:	47a0      	blx	r4
	cs += 0x10 + 0x02 + 0x10 + 0x03;
    49c8:	3525      	adds	r5, #37	; 0x25
	sio2host_putchar(cs);
    49ca:	b2e8      	uxtb	r0, r5
    49cc:	47a0      	blx	r4
}
    49ce:	bc04      	pop	{r2}
    49d0:	4690      	mov	r8, r2
    49d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49d4:	00002475 	.word	0x00002475

000049d8 <appDataInd>:
{
    49d8:	b510      	push	{r4, lr}
	AppMessage_t *msg = (AppMessage_t *)ind->payload;
    49da:	6843      	ldr	r3, [r0, #4]
	port_base->OUTTGL.reg = pin_mask;
    49dc:	2180      	movs	r1, #128	; 0x80
    49de:	0309      	lsls	r1, r1, #12
    49e0:	4a05      	ldr	r2, [pc, #20]	; (49f8 <appDataInd+0x20>)
    49e2:	61d1      	str	r1, [r2, #28]
	msg->lqi = ind->packetLQI;
    49e4:	7a82      	ldrb	r2, [r0, #10]
    49e6:	765a      	strb	r2, [r3, #25]
	msg->rssi = ind->packetRSSI;
    49e8:	7a42      	ldrb	r2, [r0, #9]
    49ea:	769a      	strb	r2, [r3, #26]
	appUartSendMessage(ind->payload, ind->payloadSize);
    49ec:	7a01      	ldrb	r1, [r0, #8]
    49ee:	6840      	ldr	r0, [r0, #4]
    49f0:	4b02      	ldr	r3, [pc, #8]	; (49fc <appDataInd+0x24>)
    49f2:	4798      	blx	r3
}
    49f4:	bd10      	pop	{r4, pc}
    49f6:	46c0      	nop			; (mov r8, r8)
    49f8:	41004400 	.word	0x41004400
    49fc:	00004971 	.word	0x00004971

00004a00 <UartBytesReceived>:
{
    4a00:	b570      	push	{r4, r5, r6, lr}
	for (uint16_t i = 0; i < bytes; i++) {
    4a02:	2800      	cmp	r0, #0
    4a04:	d00a      	beq.n	4a1c <UartBytesReceived+0x1c>
    4a06:	000c      	movs	r4, r1
    4a08:	3801      	subs	r0, #1
    4a0a:	b285      	uxth	r5, r0
    4a0c:	3501      	adds	r5, #1
    4a0e:	194d      	adds	r5, r1, r5
		APP_CommandsByteReceived(byte[i]);
    4a10:	4e03      	ldr	r6, [pc, #12]	; (4a20 <UartBytesReceived+0x20>)
    4a12:	7820      	ldrb	r0, [r4, #0]
    4a14:	47b0      	blx	r6
    4a16:	3401      	adds	r4, #1
	for (uint16_t i = 0; i < bytes; i++) {
    4a18:	42ac      	cmp	r4, r5
    4a1a:	d1fa      	bne.n	4a12 <UartBytesReceived+0x12>
}
    4a1c:	bd70      	pop	{r4, r5, r6, pc}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	00004639 	.word	0x00004639

00004a24 <wsndemo_init>:
{
    4a24:	b510      	push	{r4, lr}
	MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly);
    4a26:	4903      	ldr	r1, [pc, #12]	; (4a34 <wsndemo_init+0x10>)
    4a28:	4803      	ldr	r0, [pc, #12]	; (4a38 <wsndemo_init+0x14>)
    4a2a:	4b04      	ldr	r3, [pc, #16]	; (4a3c <wsndemo_init+0x18>)
    4a2c:	4798      	blx	r3
	sio2host_init();
    4a2e:	4b04      	ldr	r3, [pc, #16]	; (4a40 <wsndemo_init+0x1c>)
    4a30:	4798      	blx	r3
}
    4a32:	bd10      	pop	{r4, pc}
    4a34:	2000000c 	.word	0x2000000c
    4a38:	20000030 	.word	0x20000030
    4a3c:	000050c1 	.word	0x000050c1
    4a40:	00002261 	.word	0x00002261

00004a44 <wsndemo_task>:
{
    4a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a46:	b087      	sub	sp, #28
	MeshTasks();
    4a48:	4b80      	ldr	r3, [pc, #512]	; (4c4c <wsndemo_task+0x208>)
    4a4a:	4798      	blx	r3
	switch (appState) {
    4a4c:	4b80      	ldr	r3, [pc, #512]	; (4c50 <wsndemo_task+0x20c>)
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	2b01      	cmp	r3, #1
    4a52:	d05c      	beq.n	4b0e <wsndemo_task+0xca>
    4a54:	2b00      	cmp	r3, #0
    4a56:	d013      	beq.n	4a80 <wsndemo_task+0x3c>
    4a58:	2b05      	cmp	r3, #5
    4a5a:	d063      	beq.n	4b24 <wsndemo_task+0xe0>
    4a5c:	2b07      	cmp	r3, #7
    4a5e:	d100      	bne.n	4a62 <wsndemo_task+0x1e>
    4a60:	e0af      	b.n	4bc2 <wsndemo_task+0x17e>
	if ((bytes = sio2host_rx(rx_data, APP_RX_BUF_SIZE)) > 0) {
    4a62:	2114      	movs	r1, #20
    4a64:	487b      	ldr	r0, [pc, #492]	; (4c54 <wsndemo_task+0x210>)
    4a66:	4b7c      	ldr	r3, [pc, #496]	; (4c58 <wsndemo_task+0x214>)
    4a68:	4798      	blx	r3
    4a6a:	b280      	uxth	r0, r0
    4a6c:	2800      	cmp	r0, #0
    4a6e:	d000      	beq.n	4a72 <wsndemo_task+0x2e>
    4a70:	e0ae      	b.n	4bd0 <wsndemo_task+0x18c>
	return (port_base->IN.reg & pin_mask);
    4a72:	4b7a      	ldr	r3, [pc, #488]	; (4c5c <wsndemo_task+0x218>)
    4a74:	6a1b      	ldr	r3, [r3, #32]
	if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    4a76:	00db      	lsls	r3, r3, #3
    4a78:	d400      	bmi.n	4a7c <wsndemo_task+0x38>
    4a7a:	e0ad      	b.n	4bd8 <wsndemo_task+0x194>
}
    4a7c:	b007      	add	sp, #28
    4a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    4a80:	4877      	ldr	r0, [pc, #476]	; (4c60 <wsndemo_task+0x21c>)
    4a82:	2401      	movs	r4, #1
    4a84:	7004      	strb	r4, [r0, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    4a86:	2200      	movs	r2, #0
    4a88:	7042      	strb	r2, [r0, #1]
	appMsg.extAddr              = 0;
    4a8a:	2500      	movs	r5, #0
    4a8c:	2100      	movs	r1, #0
    4a8e:	8041      	strh	r1, [r0, #2]
    4a90:	8081      	strh	r1, [r0, #4]
    4a92:	80c1      	strh	r1, [r0, #6]
    4a94:	8101      	strh	r1, [r0, #8]
	appMsg.shortAddr            = 0;
    4a96:	8142      	strh	r2, [r0, #10]
	appMsg.softVersion          = 0x01100000;
    4a98:	2388      	movs	r3, #136	; 0x88
    4a9a:	045b      	lsls	r3, r3, #17
    4a9c:	60c3      	str	r3, [r0, #12]
	appMsg.channelMask          = CHANNEL_MAP;
    4a9e:	2380      	movs	r3, #128	; 0x80
    4aa0:	049b      	lsls	r3, r3, #18
    4aa2:	6103      	str	r3, [r0, #16]
	appMsg.nextHopAddr          = 0;
    4aa4:	75c2      	strb	r2, [r0, #23]
    4aa6:	7602      	strb	r2, [r0, #24]
	appMsg.lqi                  = 0;
    4aa8:	7645      	strb	r5, [r0, #25]
	appMsg.rssi                 = 0;
    4aaa:	7685      	strb	r5, [r0, #26]
	appMsg.sensors.type        = 1;
    4aac:	76c4      	strb	r4, [r0, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    4aae:	230c      	movs	r3, #12
    4ab0:	7703      	strb	r3, [r0, #28]
	appMsg.sensors.battery     = 0;
    4ab2:	0003      	movs	r3, r0
    4ab4:	7742      	strb	r2, [r0, #29]
    4ab6:	7782      	strb	r2, [r0, #30]
    4ab8:	77c2      	strb	r2, [r0, #31]
    4aba:	331d      	adds	r3, #29
    4abc:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 0;
    4abe:	0003      	movs	r3, r0
    4ac0:	3321      	adds	r3, #33	; 0x21
    4ac2:	701a      	strb	r2, [r3, #0]
    4ac4:	705a      	strb	r2, [r3, #1]
    4ac6:	709a      	strb	r2, [r3, #2]
    4ac8:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.light       = 0;
    4aca:	0003      	movs	r3, r0
    4acc:	3325      	adds	r3, #37	; 0x25
    4ace:	701a      	strb	r2, [r3, #0]
    4ad0:	705a      	strb	r2, [r3, #1]
    4ad2:	709a      	strb	r2, [r3, #2]
    4ad4:	70da      	strb	r2, [r3, #3]
	appMsg.caption.type         = 32;
    4ad6:	3220      	adds	r2, #32
    4ad8:	2329      	movs	r3, #41	; 0x29
    4ada:	54c2      	strb	r2, [r0, r3]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    4adc:	3a0a      	subs	r2, #10
    4ade:	3301      	adds	r3, #1
    4ae0:	54c2      	strb	r2, [r0, r3]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    4ae2:	302b      	adds	r0, #43	; 0x2b
    4ae4:	495f      	ldr	r1, [pc, #380]	; (4c64 <wsndemo_task+0x220>)
    4ae6:	4b60      	ldr	r3, [pc, #384]	; (4c68 <wsndemo_task+0x224>)
    4ae8:	4798      	blx	r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    4aea:	4b60      	ldr	r3, [pc, #384]	; (4c6c <wsndemo_task+0x228>)
    4aec:	4a60      	ldr	r2, [pc, #384]	; (4c70 <wsndemo_task+0x22c>)
    4aee:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4af0:	731d      	strb	r5, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    4af2:	4a60      	ldr	r2, [pc, #384]	; (4c74 <wsndemo_task+0x230>)
    4af4:	611a      	str	r2, [r3, #16]
		port_base->OUTCLR.reg = pin_mask;
    4af6:	2280      	movs	r2, #128	; 0x80
    4af8:	0312      	lsls	r2, r2, #12
    4afa:	4b58      	ldr	r3, [pc, #352]	; (4c5c <wsndemo_task+0x218>)
    4afc:	615a      	str	r2, [r3, #20]
	APP_CommandsInit();
    4afe:	4b5e      	ldr	r3, [pc, #376]	; (4c78 <wsndemo_task+0x234>)
    4b00:	4798      	blx	r3
	MiApp_SubscribeDataIndicationCallback(appDataInd);
    4b02:	485e      	ldr	r0, [pc, #376]	; (4c7c <wsndemo_task+0x238>)
    4b04:	4b5e      	ldr	r3, [pc, #376]	; (4c80 <wsndemo_task+0x23c>)
    4b06:	4798      	blx	r3
    appState = APP_STATE_START_NETWORK;
    4b08:	4b51      	ldr	r3, [pc, #324]	; (4c50 <wsndemo_task+0x20c>)
    4b0a:	701c      	strb	r4, [r3, #0]
    4b0c:	e7a9      	b.n	4a62 <wsndemo_task+0x1e>
		MiApp_StartConnection(START_CONN_DIRECT, APP_SCAN_DURATION, CHANNEL_MAP, Connection_Confirm);
    4b0e:	4b5d      	ldr	r3, [pc, #372]	; (4c84 <wsndemo_task+0x240>)
    4b10:	2280      	movs	r2, #128	; 0x80
    4b12:	0492      	lsls	r2, r2, #18
    4b14:	210a      	movs	r1, #10
    4b16:	2000      	movs	r0, #0
    4b18:	4c5b      	ldr	r4, [pc, #364]	; (4c88 <wsndemo_task+0x244>)
    4b1a:	47a0      	blx	r4
		appState = APP_STATE_SEND;
    4b1c:	2205      	movs	r2, #5
    4b1e:	4b4c      	ldr	r3, [pc, #304]	; (4c50 <wsndemo_task+0x20c>)
    4b20:	701a      	strb	r2, [r3, #0]
    4b22:	e79e      	b.n	4a62 <wsndemo_task+0x1e>
    uint16_t shortAddressLocal = 0xFFFF;
    4b24:	ad05      	add	r5, sp, #20
    4b26:	2301      	movs	r3, #1
    4b28:	425b      	negs	r3, r3
    4b2a:	802b      	strh	r3, [r5, #0]
    uint16_t shortAddressPanId = 0xFFFF;
    4b2c:	2616      	movs	r6, #22
    4b2e:	446e      	add	r6, sp
    4b30:	8033      	strh	r3, [r6, #0]
	appMsg.sensors.battery     = rand() & 0xffff;
    4b32:	4f56      	ldr	r7, [pc, #344]	; (4c8c <wsndemo_task+0x248>)
    4b34:	47b8      	blx	r7
    4b36:	4c4a      	ldr	r4, [pc, #296]	; (4c60 <wsndemo_task+0x21c>)
    4b38:	0023      	movs	r3, r4
    4b3a:	7760      	strb	r0, [r4, #29]
    4b3c:	0a00      	lsrs	r0, r0, #8
    4b3e:	77a0      	strb	r0, [r4, #30]
    4b40:	2200      	movs	r2, #0
    4b42:	77e2      	strb	r2, [r4, #31]
    4b44:	331d      	adds	r3, #29
    4b46:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = rand() & 0x7f;
    4b48:	47b8      	blx	r7
    4b4a:	237f      	movs	r3, #127	; 0x7f
    4b4c:	4018      	ands	r0, r3
    4b4e:	0023      	movs	r3, r4
    4b50:	3321      	adds	r3, #33	; 0x21
    4b52:	7018      	strb	r0, [r3, #0]
    4b54:	2200      	movs	r2, #0
    4b56:	705a      	strb	r2, [r3, #1]
    4b58:	709a      	strb	r2, [r3, #2]
    4b5a:	0e00      	lsrs	r0, r0, #24
    4b5c:	70d8      	strb	r0, [r3, #3]
	appMsg.sensors.light       = rand() & 0xff;
    4b5e:	47b8      	blx	r7
    4b60:	23ff      	movs	r3, #255	; 0xff
    4b62:	4018      	ands	r0, r3
    4b64:	0023      	movs	r3, r4
    4b66:	3325      	adds	r3, #37	; 0x25
    4b68:	7018      	strb	r0, [r3, #0]
    4b6a:	0a02      	lsrs	r2, r0, #8
    4b6c:	705a      	strb	r2, [r3, #1]
    4b6e:	0c02      	lsrs	r2, r0, #16
    4b70:	709a      	strb	r2, [r3, #2]
    4b72:	0e00      	lsrs	r0, r0, #24
    4b74:	70d8      	strb	r0, [r3, #3]
	MiApp_Get(SHORT_ADDRESS, (uint8_t *)&shortAddressLocal);
    4b76:	0029      	movs	r1, r5
    4b78:	2002      	movs	r0, #2
    4b7a:	4f45      	ldr	r7, [pc, #276]	; (4c90 <wsndemo_task+0x24c>)
    4b7c:	47b8      	blx	r7
        appMsg.shortAddr = shortAddressLocal;
    4b7e:	882b      	ldrh	r3, [r5, #0]
    4b80:	8163      	strh	r3, [r4, #10]
	appMsg.extAddr   = appMsg.shortAddr;
    4b82:	8063      	strh	r3, [r4, #2]
    4b84:	0c1b      	lsrs	r3, r3, #16
    4b86:	80a3      	strh	r3, [r4, #4]
    4b88:	2300      	movs	r3, #0
    4b8a:	80e3      	strh	r3, [r4, #6]
    4b8c:	8123      	strh	r3, [r4, #8]
	MiApp_Get(CHANNEL, (uint8_t *)&appMsg.workingChannel);
    4b8e:	0021      	movs	r1, r4
    4b90:	3116      	adds	r1, #22
    4b92:	2000      	movs	r0, #0
    4b94:	47b8      	blx	r7
	MiApp_Get(PANID, (uint8_t *)&shortAddressPanId);
    4b96:	0031      	movs	r1, r6
    4b98:	2001      	movs	r0, #1
    4b9a:	47b8      	blx	r7
        appMsg.panId = shortAddressPanId;
    4b9c:	8833      	ldrh	r3, [r6, #0]
    4b9e:	82a3      	strh	r3, [r4, #20]
	sprintf(&(appMsg.caption.text[APP_CAPTION_SIZE - SHORT_ADDRESS_CAPTION_SIZE]), "-0x%04X", shortAddressLocal);
    4ba0:	882a      	ldrh	r2, [r5, #0]
    4ba2:	0020      	movs	r0, r4
    4ba4:	303a      	adds	r0, #58	; 0x3a
    4ba6:	493b      	ldr	r1, [pc, #236]	; (4c94 <wsndemo_task+0x250>)
    4ba8:	4b3b      	ldr	r3, [pc, #236]	; (4c98 <wsndemo_task+0x254>)
    4baa:	4798      	blx	r3
	appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg));
    4bac:	2141      	movs	r1, #65	; 0x41
    4bae:	0020      	movs	r0, r4
    4bb0:	4b3a      	ldr	r3, [pc, #232]	; (4c9c <wsndemo_task+0x258>)
    4bb2:	4798      	blx	r3
	SYS_TimerStart(&appDataSendingTimer);
    4bb4:	482d      	ldr	r0, [pc, #180]	; (4c6c <wsndemo_task+0x228>)
    4bb6:	4b3a      	ldr	r3, [pc, #232]	; (4ca0 <wsndemo_task+0x25c>)
    4bb8:	4798      	blx	r3
	appState = APP_STATE_WAIT_SEND_TIMER;
    4bba:	2208      	movs	r2, #8
    4bbc:	4b24      	ldr	r3, [pc, #144]	; (4c50 <wsndemo_task+0x20c>)
    4bbe:	701a      	strb	r2, [r3, #0]
    4bc0:	e74f      	b.n	4a62 <wsndemo_task+0x1e>
		SYS_TimerStart(&appDataSendingTimer);
    4bc2:	482a      	ldr	r0, [pc, #168]	; (4c6c <wsndemo_task+0x228>)
    4bc4:	4b36      	ldr	r3, [pc, #216]	; (4ca0 <wsndemo_task+0x25c>)
    4bc6:	4798      	blx	r3
		appState = APP_STATE_WAIT_SEND_TIMER;
    4bc8:	2208      	movs	r2, #8
    4bca:	4b21      	ldr	r3, [pc, #132]	; (4c50 <wsndemo_task+0x20c>)
    4bcc:	701a      	strb	r2, [r3, #0]
    4bce:	e748      	b.n	4a62 <wsndemo_task+0x1e>
		UartBytesReceived(bytes, (uint8_t *)&rx_data);
    4bd0:	4920      	ldr	r1, [pc, #128]	; (4c54 <wsndemo_task+0x210>)
    4bd2:	4b34      	ldr	r3, [pc, #208]	; (4ca4 <wsndemo_task+0x260>)
    4bd4:	4798      	blx	r3
    4bd6:	e74c      	b.n	4a72 <wsndemo_task+0x2e>
		uint16_t dstAddr = MESH_BROADCAST_TO_COORDINATORS;
    4bd8:	2203      	movs	r2, #3
    4bda:	4252      	negs	r2, r2
    4bdc:	2316      	movs	r3, #22
    4bde:	446b      	add	r3, sp
    4be0:	801a      	strh	r2, [r3, #0]
		delay_ms(50);
    4be2:	2032      	movs	r0, #50	; 0x32
    4be4:	4b30      	ldr	r3, [pc, #192]	; (4ca8 <wsndemo_task+0x264>)
    4be6:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    4be8:	4b1c      	ldr	r3, [pc, #112]	; (4c5c <wsndemo_task+0x218>)
    4bea:	6a1b      	ldr	r3, [r3, #32]
		while(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    4bec:	00db      	lsls	r3, r3, #3
    4bee:	d41c      	bmi.n	4c2a <wsndemo_task+0x1e6>
    4bf0:	2400      	movs	r4, #0
			delay_ms(500);
    4bf2:	25fa      	movs	r5, #250	; 0xfa
    4bf4:	006d      	lsls	r5, r5, #1
    4bf6:	4f2c      	ldr	r7, [pc, #176]	; (4ca8 <wsndemo_task+0x264>)
    4bf8:	4e18      	ldr	r6, [pc, #96]	; (4c5c <wsndemo_task+0x218>)
    4bfa:	0028      	movs	r0, r5
    4bfc:	47b8      	blx	r7
			count += 1;
    4bfe:	3401      	adds	r4, #1
    4c00:	b2e4      	uxtb	r4, r4
    4c02:	6a33      	ldr	r3, [r6, #32]
		while(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    4c04:	00db      	lsls	r3, r3, #3
    4c06:	d5f8      	bpl.n	4bfa <wsndemo_task+0x1b6>
		if (count > 5)
    4c08:	2c05      	cmp	r4, #5
    4c0a:	d90e      	bls.n	4c2a <wsndemo_task+0x1e6>
			commandId = APP_COMMAND_ID_TOPOLOGY_SIMULATION_RESET;
    4c0c:	ab05      	add	r3, sp, #20
    4c0e:	2220      	movs	r2, #32
    4c10:	701a      	strb	r2, [r3, #0]
			MiApp_SendData(2, (uint8_t *)&dstAddr, 1, &commandId, 1, false, appBroadcastDataConf);
    4c12:	4a26      	ldr	r2, [pc, #152]	; (4cac <wsndemo_task+0x268>)
    4c14:	9202      	str	r2, [sp, #8]
    4c16:	2200      	movs	r2, #0
    4c18:	9201      	str	r2, [sp, #4]
    4c1a:	3201      	adds	r2, #1
    4c1c:	9200      	str	r2, [sp, #0]
    4c1e:	2116      	movs	r1, #22
    4c20:	4469      	add	r1, sp
    4c22:	2002      	movs	r0, #2
    4c24:	4c22      	ldr	r4, [pc, #136]	; (4cb0 <wsndemo_task+0x26c>)
    4c26:	47a0      	blx	r4
    4c28:	e728      	b.n	4a7c <wsndemo_task+0x38>
			commandId = APP_COMMAND_ID_SIMULATE_LINE_TOPOLOGY;
    4c2a:	ab05      	add	r3, sp, #20
    4c2c:	2221      	movs	r2, #33	; 0x21
    4c2e:	701a      	strb	r2, [r3, #0]
			MiApp_SendData(2, (uint8_t *)&dstAddr, 1, &commandId, 2, false, appBroadcastDataConf);
    4c30:	4a1e      	ldr	r2, [pc, #120]	; (4cac <wsndemo_task+0x268>)
    4c32:	9202      	str	r2, [sp, #8]
    4c34:	2200      	movs	r2, #0
    4c36:	9201      	str	r2, [sp, #4]
    4c38:	3202      	adds	r2, #2
    4c3a:	9200      	str	r2, [sp, #0]
    4c3c:	3a01      	subs	r2, #1
    4c3e:	2116      	movs	r1, #22
    4c40:	4469      	add	r1, sp
    4c42:	2002      	movs	r0, #2
    4c44:	4c1a      	ldr	r4, [pc, #104]	; (4cb0 <wsndemo_task+0x26c>)
    4c46:	47a0      	blx	r4
}
    4c48:	e718      	b.n	4a7c <wsndemo_task+0x38>
    4c4a:	46c0      	nop			; (mov r8, r8)
    4c4c:	00005245 	.word	0x00005245
    4c50:	20000381 	.word	0x20000381
    4c54:	20000384 	.word	0x20000384
    4c58:	000023dd 	.word	0x000023dd
    4c5c:	41004400 	.word	0x41004400
    4c60:	20000340 	.word	0x20000340
    4c64:	0000a224 	.word	0x0000a224
    4c68:	0000926f 	.word	0x0000926f
    4c6c:	20002c34 	.word	0x20002c34
    4c70:	00002710 	.word	0x00002710
    4c74:	00004949 	.word	0x00004949
    4c78:	00004611 	.word	0x00004611
    4c7c:	000049d9 	.word	0x000049d9
    4c80:	000065c1 	.word	0x000065c1
    4c84:	0000492d 	.word	0x0000492d
    4c88:	00007acd 	.word	0x00007acd
    4c8c:	00009291 	.word	0x00009291
    4c90:	000054ed 	.word	0x000054ed
    4c94:	0000a234 	.word	0x0000a234
    4c98:	00009475 	.word	0x00009475
    4c9c:	00004971 	.word	0x00004971
    4ca0:	00003671 	.word	0x00003671
    4ca4:	00004a01 	.word	0x00004a01
    4ca8:	00000181 	.word	0x00000181
    4cac:	00004945 	.word	0x00004945
    4cb0:	000052d9 	.word	0x000052d9

00004cb4 <common_tc_delay>:
    4cb4:	b510      	push	{r4, lr}
    4cb6:	1c04      	adds	r4, r0, #0
    4cb8:	4b13      	ldr	r3, [pc, #76]	; (4d08 <common_tc_delay+0x54>)
    4cba:	4798      	blx	r3
    4cbc:	4b13      	ldr	r3, [pc, #76]	; (4d0c <common_tc_delay+0x58>)
    4cbe:	781a      	ldrb	r2, [r3, #0]
    4cc0:	4362      	muls	r2, r4
    4cc2:	1881      	adds	r1, r0, r2
    4cc4:	4b12      	ldr	r3, [pc, #72]	; (4d10 <common_tc_delay+0x5c>)
    4cc6:	6059      	str	r1, [r3, #4]
    4cc8:	6859      	ldr	r1, [r3, #4]
    4cca:	0c09      	lsrs	r1, r1, #16
    4ccc:	6059      	str	r1, [r3, #4]
    4cce:	685b      	ldr	r3, [r3, #4]
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d007      	beq.n	4ce4 <common_tc_delay+0x30>
    4cd4:	4b0e      	ldr	r3, [pc, #56]	; (4d10 <common_tc_delay+0x5c>)
    4cd6:	6859      	ldr	r1, [r3, #4]
    4cd8:	3201      	adds	r2, #1
    4cda:	1880      	adds	r0, r0, r2
    4cdc:	8118      	strh	r0, [r3, #8]
    4cde:	4b0d      	ldr	r3, [pc, #52]	; (4d14 <common_tc_delay+0x60>)
    4ce0:	4798      	blx	r3
    4ce2:	e004      	b.n	4cee <common_tc_delay+0x3a>
    4ce4:	1882      	adds	r2, r0, r2
    4ce6:	4b0a      	ldr	r3, [pc, #40]	; (4d10 <common_tc_delay+0x5c>)
    4ce8:	811a      	strh	r2, [r3, #8]
    4cea:	4b0b      	ldr	r3, [pc, #44]	; (4d18 <common_tc_delay+0x64>)
    4cec:	4798      	blx	r3
    4cee:	4b08      	ldr	r3, [pc, #32]	; (4d10 <common_tc_delay+0x5c>)
    4cf0:	891b      	ldrh	r3, [r3, #8]
    4cf2:	2b63      	cmp	r3, #99	; 0x63
    4cf4:	d802      	bhi.n	4cfc <common_tc_delay+0x48>
    4cf6:	3364      	adds	r3, #100	; 0x64
    4cf8:	4a05      	ldr	r2, [pc, #20]	; (4d10 <common_tc_delay+0x5c>)
    4cfa:	8113      	strh	r3, [r2, #8]
    4cfc:	4b04      	ldr	r3, [pc, #16]	; (4d10 <common_tc_delay+0x5c>)
    4cfe:	8918      	ldrh	r0, [r3, #8]
    4d00:	4b06      	ldr	r3, [pc, #24]	; (4d1c <common_tc_delay+0x68>)
    4d02:	4798      	blx	r3
    4d04:	bd10      	pop	{r4, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	00003735 	.word	0x00003735
    4d0c:	20002c48 	.word	0x20002c48
    4d10:	20000398 	.word	0x20000398
    4d14:	00003749 	.word	0x00003749
    4d18:	0000375d 	.word	0x0000375d
    4d1c:	00003799 	.word	0x00003799

00004d20 <common_tc_init>:
    4d20:	b508      	push	{r3, lr}
    4d22:	2200      	movs	r2, #0
    4d24:	4b03      	ldr	r3, [pc, #12]	; (4d34 <common_tc_init+0x14>)
    4d26:	701a      	strb	r2, [r3, #0]
    4d28:	4b03      	ldr	r3, [pc, #12]	; (4d38 <common_tc_init+0x18>)
    4d2a:	4798      	blx	r3
    4d2c:	4b03      	ldr	r3, [pc, #12]	; (4d3c <common_tc_init+0x1c>)
    4d2e:	7018      	strb	r0, [r3, #0]
    4d30:	bd08      	pop	{r3, pc}
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	20000398 	.word	0x20000398
    4d38:	000037b1 	.word	0x000037b1
    4d3c:	20002c48 	.word	0x20002c48

00004d40 <tmr_ovf_callback>:
    4d40:	b508      	push	{r3, lr}
    4d42:	4b0e      	ldr	r3, [pc, #56]	; (4d7c <tmr_ovf_callback+0x3c>)
    4d44:	685b      	ldr	r3, [r3, #4]
    4d46:	2b00      	cmp	r3, #0
    4d48:	d007      	beq.n	4d5a <tmr_ovf_callback+0x1a>
    4d4a:	4a0c      	ldr	r2, [pc, #48]	; (4d7c <tmr_ovf_callback+0x3c>)
    4d4c:	6853      	ldr	r3, [r2, #4]
    4d4e:	3b01      	subs	r3, #1
    4d50:	6053      	str	r3, [r2, #4]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d101      	bne.n	4d5a <tmr_ovf_callback+0x1a>
    4d56:	4b0a      	ldr	r3, [pc, #40]	; (4d80 <tmr_ovf_callback+0x40>)
    4d58:	4798      	blx	r3
    4d5a:	4a08      	ldr	r2, [pc, #32]	; (4d7c <tmr_ovf_callback+0x3c>)
    4d5c:	7813      	ldrb	r3, [r2, #0]
    4d5e:	3301      	adds	r3, #1
    4d60:	b2db      	uxtb	r3, r3
    4d62:	7013      	strb	r3, [r2, #0]
    4d64:	4a07      	ldr	r2, [pc, #28]	; (4d84 <tmr_ovf_callback+0x44>)
    4d66:	7812      	ldrb	r2, [r2, #0]
    4d68:	429a      	cmp	r2, r3
    4d6a:	d806      	bhi.n	4d7a <tmr_ovf_callback+0x3a>
    4d6c:	4b03      	ldr	r3, [pc, #12]	; (4d7c <tmr_ovf_callback+0x3c>)
    4d6e:	2200      	movs	r2, #0
    4d70:	701a      	strb	r2, [r3, #0]
    4d72:	68db      	ldr	r3, [r3, #12]
    4d74:	2b00      	cmp	r3, #0
    4d76:	d000      	beq.n	4d7a <tmr_ovf_callback+0x3a>
    4d78:	4798      	blx	r3
    4d7a:	bd08      	pop	{r3, pc}
    4d7c:	20000398 	.word	0x20000398
    4d80:	0000375d 	.word	0x0000375d
    4d84:	20002c48 	.word	0x20002c48

00004d88 <tmr_cca_callback>:
    4d88:	b508      	push	{r3, lr}
    4d8a:	4b04      	ldr	r3, [pc, #16]	; (4d9c <tmr_cca_callback+0x14>)
    4d8c:	4798      	blx	r3
    4d8e:	4b04      	ldr	r3, [pc, #16]	; (4da0 <tmr_cca_callback+0x18>)
    4d90:	691b      	ldr	r3, [r3, #16]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d000      	beq.n	4d98 <tmr_cca_callback+0x10>
    4d96:	4798      	blx	r3
    4d98:	bd08      	pop	{r3, pc}
    4d9a:	46c0      	nop			; (mov r8, r8)
    4d9c:	00003749 	.word	0x00003749
    4da0:	20000398 	.word	0x20000398

00004da4 <set_common_tc_expiry_callback>:
    4da4:	4b01      	ldr	r3, [pc, #4]	; (4dac <set_common_tc_expiry_callback+0x8>)
    4da6:	6118      	str	r0, [r3, #16]
    4da8:	4770      	bx	lr
    4daa:	46c0      	nop			; (mov r8, r8)
    4dac:	20000398 	.word	0x20000398

00004db0 <frameTxCallback>:
    4db0:	b570      	push	{r4, r5, r6, lr}
    4db2:	2401      	movs	r4, #1
    4db4:	4b07      	ldr	r3, [pc, #28]	; (4dd4 <frameTxCallback+0x24>)
    4db6:	701c      	strb	r4, [r3, #0]
    4db8:	4c07      	ldr	r4, [pc, #28]	; (4dd8 <frameTxCallback+0x28>)
    4dba:	6823      	ldr	r3, [r4, #0]
    4dbc:	691b      	ldr	r3, [r3, #16]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d004      	beq.n	4dcc <frameTxCallback+0x1c>
    4dc2:	4798      	blx	r3
    4dc4:	4d05      	ldr	r5, [pc, #20]	; (4ddc <frameTxCallback+0x2c>)
    4dc6:	6820      	ldr	r0, [r4, #0]
    4dc8:	47a8      	blx	r5
    4dca:	bd70      	pop	{r4, r5, r6, pc}
    4dcc:	0010      	movs	r0, r2
    4dce:	4d03      	ldr	r5, [pc, #12]	; (4ddc <frameTxCallback+0x2c>)
    4dd0:	47a8      	blx	r5
    4dd2:	e7f8      	b.n	4dc6 <frameTxCallback+0x16>
    4dd4:	2000007d 	.word	0x2000007d
    4dd8:	20002c7c 	.word	0x20002c7c
    4ddc:	000033ed 	.word	0x000033ed

00004de0 <nonAckDataCallback>:
    4de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4de2:	46c6      	mov	lr, r8
    4de4:	0007      	movs	r7, r0
    4de6:	b500      	push	{lr}
    4de8:	0010      	movs	r0, r2
    4dea:	4e0f      	ldr	r6, [pc, #60]	; (4e28 <nonAckDataCallback+0x48>)
    4dec:	4688      	mov	r8, r1
    4dee:	0015      	movs	r5, r2
    4df0:	47b0      	blx	r6
    4df2:	2100      	movs	r1, #0
    4df4:	480d      	ldr	r0, [pc, #52]	; (4e2c <nonAckDataCallback+0x4c>)
    4df6:	4b0e      	ldr	r3, [pc, #56]	; (4e30 <nonAckDataCallback+0x50>)
    4df8:	4798      	blx	r3
    4dfa:	1e04      	subs	r4, r0, #0
    4dfc:	d00e      	beq.n	4e1c <nonAckDataCallback+0x3c>
    4dfe:	68a3      	ldr	r3, [r4, #8]
    4e00:	2b00      	cmp	r3, #0
    4e02:	d003      	beq.n	4e0c <nonAckDataCallback+0x2c>
    4e04:	002a      	movs	r2, r5
    4e06:	4641      	mov	r1, r8
    4e08:	0038      	movs	r0, r7
    4e0a:	4798      	blx	r3
    4e0c:	7d23      	ldrb	r3, [r4, #20]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d101      	bne.n	4e16 <nonAckDataCallback+0x36>
    4e12:	0020      	movs	r0, r4
    4e14:	47b0      	blx	r6
    4e16:	bc04      	pop	{r2}
    4e18:	4690      	mov	r8, r2
    4e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e1c:	4b05      	ldr	r3, [pc, #20]	; (4e34 <nonAckDataCallback+0x54>)
    4e1e:	781b      	ldrb	r3, [r3, #0]
    4e20:	2b08      	cmp	r3, #8
    4e22:	d1f8      	bne.n	4e16 <nonAckDataCallback+0x36>
    4e24:	e7eb      	b.n	4dfe <nonAckDataCallback+0x1e>
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	000033ed 	.word	0x000033ed
    4e2c:	20002c4c 	.word	0x20002c4c
    4e30:	00003541 	.word	0x00003541
    4e34:	200003ac 	.word	0x200003ac

00004e38 <dataTimerHandler>:
    4e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e3a:	464e      	mov	r6, r9
    4e3c:	46de      	mov	lr, fp
    4e3e:	4657      	mov	r7, sl
    4e40:	4645      	mov	r5, r8
    4e42:	b5e0      	push	{r5, r6, r7, lr}
    4e44:	4e40      	ldr	r6, [pc, #256]	; (4f48 <dataTimerHandler+0x110>)
    4e46:	7a33      	ldrb	r3, [r6, #8]
    4e48:	2b00      	cmp	r3, #0
    4e4a:	d049      	beq.n	4ee0 <dataTimerHandler+0xa8>
    4e4c:	4b3f      	ldr	r3, [pc, #252]	; (4f4c <dataTimerHandler+0x114>)
    4e4e:	2500      	movs	r5, #0
    4e50:	4698      	mov	r8, r3
    4e52:	4b3f      	ldr	r3, [pc, #252]	; (4f50 <dataTimerHandler+0x118>)
    4e54:	46c1      	mov	r9, r8
    4e56:	469a      	mov	sl, r3
    4e58:	4f3e      	ldr	r7, [pc, #248]	; (4f54 <dataTimerHandler+0x11c>)
    4e5a:	2100      	movs	r1, #0
    4e5c:	0030      	movs	r0, r6
    4e5e:	47b8      	blx	r7
    4e60:	1e04      	subs	r4, r0, #0
    4e62:	d03d      	beq.n	4ee0 <dataTimerHandler+0xa8>
    4e64:	7c03      	ldrb	r3, [r0, #16]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d046      	beq.n	4ef8 <dataTimerHandler+0xc0>
    4e6a:	3b01      	subs	r3, #1
    4e6c:	b2db      	uxtb	r3, r3
    4e6e:	7403      	strb	r3, [r0, #16]
    4e70:	2b00      	cmp	r3, #0
    4e72:	d141      	bne.n	4ef8 <dataTimerHandler+0xc0>
    4e74:	7c43      	ldrb	r3, [r0, #17]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d047      	beq.n	4f0a <dataTimerHandler+0xd2>
    4e7a:	3b01      	subs	r3, #1
    4e7c:	b2db      	uxtb	r3, r3
    4e7e:	7443      	strb	r3, [r0, #17]
    4e80:	2b00      	cmp	r3, #0
    4e82:	d142      	bne.n	4f0a <dataTimerHandler+0xd2>
    4e84:	6883      	ldr	r3, [r0, #8]
    4e86:	2b00      	cmp	r3, #0
    4e88:	d003      	beq.n	4e92 <dataTimerHandler+0x5a>
    4e8a:	7c80      	ldrb	r0, [r0, #18]
    4e8c:	0022      	movs	r2, r4
    4e8e:	2103      	movs	r1, #3
    4e90:	4798      	blx	r3
    4e92:	4b31      	ldr	r3, [pc, #196]	; (4f58 <dataTimerHandler+0x120>)
    4e94:	0020      	movs	r0, r4
    4e96:	4798      	blx	r3
    4e98:	23ff      	movs	r3, #255	; 0xff
    4e9a:	8ba0      	ldrh	r0, [r4, #28]
    4e9c:	4398      	bics	r0, r3
    4e9e:	4b2f      	ldr	r3, [pc, #188]	; (4f5c <dataTimerHandler+0x124>)
    4ea0:	881b      	ldrh	r3, [r3, #0]
    4ea2:	4298      	cmp	r0, r3
    4ea4:	d017      	beq.n	4ed6 <dataTimerHandler+0x9e>
    4ea6:	4b2a      	ldr	r3, [pc, #168]	; (4f50 <dataTimerHandler+0x118>)
    4ea8:	0a02      	lsrs	r2, r0, #8
    4eaa:	681b      	ldr	r3, [r3, #0]
    4eac:	0052      	lsls	r2, r2, #1
    4eae:	691b      	ldr	r3, [r3, #16]
    4eb0:	189a      	adds	r2, r3, r2
    4eb2:	7854      	ldrb	r4, [r2, #1]
    4eb4:	230f      	movs	r3, #15
    4eb6:	0021      	movs	r1, r4
    4eb8:	469b      	mov	fp, r3
    4eba:	4399      	bics	r1, r3
    4ebc:	d00b      	beq.n	4ed6 <dataTimerHandler+0x9e>
    4ebe:	0921      	lsrs	r1, r4, #4
    4ec0:	310f      	adds	r1, #15
    4ec2:	4019      	ands	r1, r3
    4ec4:	010b      	lsls	r3, r1, #4
    4ec6:	469c      	mov	ip, r3
    4ec8:	465b      	mov	r3, fp
    4eca:	4023      	ands	r3, r4
    4ecc:	4664      	mov	r4, ip
    4ece:	4323      	orrs	r3, r4
    4ed0:	7053      	strb	r3, [r2, #1]
    4ed2:	2900      	cmp	r1, #0
    4ed4:	d028      	beq.n	4f28 <dataTimerHandler+0xf0>
    4ed6:	3501      	adds	r5, #1
    4ed8:	7a33      	ldrb	r3, [r6, #8]
    4eda:	b2ed      	uxtb	r5, r5
    4edc:	42ab      	cmp	r3, r5
    4ede:	d8bc      	bhi.n	4e5a <dataTimerHandler+0x22>
    4ee0:	4b1f      	ldr	r3, [pc, #124]	; (4f60 <dataTimerHandler+0x128>)
    4ee2:	781b      	ldrb	r3, [r3, #0]
    4ee4:	2b06      	cmp	r3, #6
    4ee6:	d028      	beq.n	4f3a <dataTimerHandler+0x102>
    4ee8:	4b1e      	ldr	r3, [pc, #120]	; (4f64 <dataTimerHandler+0x12c>)
    4eea:	4798      	blx	r3
    4eec:	bc3c      	pop	{r2, r3, r4, r5}
    4eee:	4690      	mov	r8, r2
    4ef0:	4699      	mov	r9, r3
    4ef2:	46a2      	mov	sl, r4
    4ef4:	46ab      	mov	fp, r5
    4ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ef8:	0021      	movs	r1, r4
    4efa:	0030      	movs	r0, r6
    4efc:	47c0      	blx	r8
    4efe:	3501      	adds	r5, #1
    4f00:	7a33      	ldrb	r3, [r6, #8]
    4f02:	b2ed      	uxtb	r5, r5
    4f04:	42ab      	cmp	r3, r5
    4f06:	d8a8      	bhi.n	4e5a <dataTimerHandler+0x22>
    4f08:	e7ea      	b.n	4ee0 <dataTimerHandler+0xa8>
    4f0a:	4652      	mov	r2, sl
    4f0c:	2337      	movs	r3, #55	; 0x37
    4f0e:	6812      	ldr	r2, [r2, #0]
    4f10:	0021      	movs	r1, r4
    4f12:	5cd3      	ldrb	r3, [r2, r3]
    4f14:	0030      	movs	r0, r6
    4f16:	3301      	adds	r3, #1
    4f18:	7423      	strb	r3, [r4, #16]
    4f1a:	47c8      	blx	r9
    4f1c:	3501      	adds	r5, #1
    4f1e:	7a33      	ldrb	r3, [r6, #8]
    4f20:	b2ed      	uxtb	r5, r5
    4f22:	42ab      	cmp	r3, r5
    4f24:	d899      	bhi.n	4e5a <dataTimerHandler+0x22>
    4f26:	e7db      	b.n	4ee0 <dataTimerHandler+0xa8>
    4f28:	4b0f      	ldr	r3, [pc, #60]	; (4f68 <dataTimerHandler+0x130>)
    4f2a:	4798      	blx	r3
    4f2c:	3501      	adds	r5, #1
    4f2e:	7a33      	ldrb	r3, [r6, #8]
    4f30:	b2ed      	uxtb	r5, r5
    4f32:	42ab      	cmp	r3, r5
    4f34:	d900      	bls.n	4f38 <dataTimerHandler+0x100>
    4f36:	e790      	b.n	4e5a <dataTimerHandler+0x22>
    4f38:	e7d2      	b.n	4ee0 <dataTimerHandler+0xa8>
    4f3a:	4b0c      	ldr	r3, [pc, #48]	; (4f6c <dataTimerHandler+0x134>)
    4f3c:	4798      	blx	r3
    4f3e:	4b0c      	ldr	r3, [pc, #48]	; (4f70 <dataTimerHandler+0x138>)
    4f40:	4798      	blx	r3
    4f42:	4b0c      	ldr	r3, [pc, #48]	; (4f74 <dataTimerHandler+0x13c>)
    4f44:	4798      	blx	r3
    4f46:	e7cf      	b.n	4ee8 <dataTimerHandler+0xb0>
    4f48:	20002c6c 	.word	0x20002c6c
    4f4c:	00003509 	.word	0x00003509
    4f50:	20002c64 	.word	0x20002c64
    4f54:	00003541 	.word	0x00003541
    4f58:	000033ed 	.word	0x000033ed
    4f5c:	20002cac 	.word	0x20002cac
    4f60:	200003ac 	.word	0x200003ac
    4f64:	00008335 	.word	0x00008335
    4f68:	000089d5 	.word	0x000089d5
    4f6c:	00008a59 	.word	0x00008a59
    4f70:	00006bf1 	.word	0x00006bf1
    4f74:	0000769d 	.word	0x0000769d

00004f78 <ackReqDataConfcb>:
    4f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f7a:	46de      	mov	lr, fp
    4f7c:	464e      	mov	r6, r9
    4f7e:	4645      	mov	r5, r8
    4f80:	4657      	mov	r7, sl
    4f82:	0013      	movs	r3, r2
    4f84:	b5e0      	push	{r5, r6, r7, lr}
    4f86:	b085      	sub	sp, #20
    4f88:	9202      	str	r2, [sp, #8]
    4f8a:	7892      	ldrb	r2, [r2, #2]
    4f8c:	4683      	mov	fp, r0
    4f8e:	0018      	movs	r0, r3
    4f90:	4b41      	ldr	r3, [pc, #260]	; (5098 <ackReqDataConfcb+0x120>)
    4f92:	9101      	str	r1, [sp, #4]
    4f94:	4690      	mov	r8, r2
    4f96:	4798      	blx	r3
    4f98:	4e40      	ldr	r6, [pc, #256]	; (509c <ackReqDataConfcb+0x124>)
    4f9a:	7a33      	ldrb	r3, [r6, #8]
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d035      	beq.n	500c <ackReqDataConfcb+0x94>
    4fa0:	4b3f      	ldr	r3, [pc, #252]	; (50a0 <ackReqDataConfcb+0x128>)
    4fa2:	2400      	movs	r4, #0
    4fa4:	4f3f      	ldr	r7, [pc, #252]	; (50a4 <ackReqDataConfcb+0x12c>)
    4fa6:	4699      	mov	r9, r3
    4fa8:	e007      	b.n	4fba <ackReqDataConfcb+0x42>
    4faa:	0029      	movs	r1, r5
    4fac:	0030      	movs	r0, r6
    4fae:	47c8      	blx	r9
    4fb0:	3401      	adds	r4, #1
    4fb2:	7a33      	ldrb	r3, [r6, #8]
    4fb4:	b2e4      	uxtb	r4, r4
    4fb6:	42a3      	cmp	r3, r4
    4fb8:	d928      	bls.n	500c <ackReqDataConfcb+0x94>
    4fba:	2100      	movs	r1, #0
    4fbc:	0030      	movs	r0, r6
    4fbe:	47b8      	blx	r7
    4fc0:	1e05      	subs	r5, r0, #0
    4fc2:	d023      	beq.n	500c <ackReqDataConfcb+0x94>
    4fc4:	2320      	movs	r3, #32
    4fc6:	5cc3      	ldrb	r3, [r0, r3]
    4fc8:	4543      	cmp	r3, r8
    4fca:	d1ee      	bne.n	4faa <ackReqDataConfcb+0x32>
    4fcc:	7c83      	ldrb	r3, [r0, #18]
    4fce:	469a      	mov	sl, r3
    4fd0:	455b      	cmp	r3, fp
    4fd2:	d1ea      	bne.n	4faa <ackReqDataConfcb+0x32>
    4fd4:	9b01      	ldr	r3, [sp, #4]
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d02d      	beq.n	5036 <ackReqDataConfcb+0xbe>
    4fda:	2b03      	cmp	r3, #3
    4fdc:	d039      	beq.n	5052 <ackReqDataConfcb+0xda>
    4fde:	7c6b      	ldrb	r3, [r5, #17]
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d01a      	beq.n	501a <ackReqDataConfcb+0xa2>
    4fe4:	3b01      	subs	r3, #1
    4fe6:	b2db      	uxtb	r3, r3
    4fe8:	746b      	strb	r3, [r5, #17]
    4fea:	2b00      	cmp	r3, #0
    4fec:	d115      	bne.n	501a <ackReqDataConfcb+0xa2>
    4fee:	68ab      	ldr	r3, [r5, #8]
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d003      	beq.n	4ffc <ackReqDataConfcb+0x84>
    4ff4:	9a02      	ldr	r2, [sp, #8]
    4ff6:	9901      	ldr	r1, [sp, #4]
    4ff8:	4650      	mov	r0, sl
    4ffa:	4798      	blx	r3
    4ffc:	4b26      	ldr	r3, [pc, #152]	; (5098 <ackReqDataConfcb+0x120>)
    4ffe:	0028      	movs	r0, r5
    5000:	4798      	blx	r3
    5002:	3401      	adds	r4, #1
    5004:	7a33      	ldrb	r3, [r6, #8]
    5006:	b2e4      	uxtb	r4, r4
    5008:	42a3      	cmp	r3, r4
    500a:	d8d6      	bhi.n	4fba <ackReqDataConfcb+0x42>
    500c:	b005      	add	sp, #20
    500e:	bc3c      	pop	{r2, r3, r4, r5}
    5010:	4690      	mov	r8, r2
    5012:	4699      	mov	r9, r3
    5014:	46a2      	mov	sl, r4
    5016:	46ab      	mov	fp, r5
    5018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    501a:	4b23      	ldr	r3, [pc, #140]	; (50a8 <ackReqDataConfcb+0x130>)
    501c:	781b      	ldrb	r3, [r3, #0]
    501e:	2b08      	cmp	r3, #8
    5020:	d0e5      	beq.n	4fee <ackReqDataConfcb+0x76>
    5022:	0029      	movs	r1, r5
    5024:	0030      	movs	r0, r6
    5026:	4b1e      	ldr	r3, [pc, #120]	; (50a0 <ackReqDataConfcb+0x128>)
    5028:	4798      	blx	r3
    502a:	89a9      	ldrh	r1, [r5, #12]
    502c:	4a1f      	ldr	r2, [pc, #124]	; (50ac <ackReqDataConfcb+0x134>)
    502e:	0028      	movs	r0, r5
    5030:	4b1f      	ldr	r3, [pc, #124]	; (50b0 <ackReqDataConfcb+0x138>)
    5032:	4798      	blx	r3
    5034:	e7bc      	b.n	4fb0 <ackReqDataConfcb+0x38>
    5036:	4b1f      	ldr	r3, [pc, #124]	; (50b4 <ackReqDataConfcb+0x13c>)
    5038:	0001      	movs	r1, r0
    503a:	681a      	ldr	r2, [r3, #0]
    503c:	2337      	movs	r3, #55	; 0x37
    503e:	5cd3      	ldrb	r3, [r2, r3]
    5040:	3301      	adds	r3, #1
    5042:	7403      	strb	r3, [r0, #16]
    5044:	2338      	movs	r3, #56	; 0x38
    5046:	5cd3      	ldrb	r3, [r2, r3]
    5048:	7443      	strb	r3, [r0, #17]
    504a:	0030      	movs	r0, r6
    504c:	4b14      	ldr	r3, [pc, #80]	; (50a0 <ackReqDataConfcb+0x128>)
    504e:	4798      	blx	r3
    5050:	e7ae      	b.n	4fb0 <ackReqDataConfcb+0x38>
    5052:	8b80      	ldrh	r0, [r0, #28]
    5054:	33fc      	adds	r3, #252	; 0xfc
    5056:	4398      	bics	r0, r3
    5058:	4b17      	ldr	r3, [pc, #92]	; (50b8 <ackReqDataConfcb+0x140>)
    505a:	4684      	mov	ip, r0
    505c:	881b      	ldrh	r3, [r3, #0]
    505e:	4298      	cmp	r0, r3
    5060:	d0bd      	beq.n	4fde <ackReqDataConfcb+0x66>
    5062:	4b14      	ldr	r3, [pc, #80]	; (50b4 <ackReqDataConfcb+0x13c>)
    5064:	0a02      	lsrs	r2, r0, #8
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	0052      	lsls	r2, r2, #1
    506a:	691b      	ldr	r3, [r3, #16]
    506c:	189a      	adds	r2, r3, r2
    506e:	7850      	ldrb	r0, [r2, #1]
    5070:	230f      	movs	r3, #15
    5072:	0001      	movs	r1, r0
    5074:	9203      	str	r2, [sp, #12]
    5076:	4399      	bics	r1, r3
    5078:	d0b1      	beq.n	4fde <ackReqDataConfcb+0x66>
    507a:	0901      	lsrs	r1, r0, #4
    507c:	310f      	adds	r1, #15
    507e:	4019      	ands	r1, r3
    5080:	010a      	lsls	r2, r1, #4
    5082:	4003      	ands	r3, r0
    5084:	4313      	orrs	r3, r2
    5086:	9a03      	ldr	r2, [sp, #12]
    5088:	7053      	strb	r3, [r2, #1]
    508a:	2900      	cmp	r1, #0
    508c:	d1a7      	bne.n	4fde <ackReqDataConfcb+0x66>
    508e:	4660      	mov	r0, ip
    5090:	4b0a      	ldr	r3, [pc, #40]	; (50bc <ackReqDataConfcb+0x144>)
    5092:	4798      	blx	r3
    5094:	e7a3      	b.n	4fde <ackReqDataConfcb+0x66>
    5096:	46c0      	nop			; (mov r8, r8)
    5098:	000033ed 	.word	0x000033ed
    509c:	20002c6c 	.word	0x20002c6c
    50a0:	00003509 	.word	0x00003509
    50a4:	00003541 	.word	0x00003541
    50a8:	200003ac 	.word	0x200003ac
    50ac:	00004f79 	.word	0x00004f79
    50b0:	000067f1 	.word	0x000067f1
    50b4:	20002c64 	.word	0x20002c64
    50b8:	20002cac 	.word	0x20002cac
    50bc:	000089d5 	.word	0x000089d5

000050c0 <MiApp_ProtocolInit>:
    50c0:	b570      	push	{r4, r5, r6, lr}
    50c2:	4b25      	ldr	r3, [pc, #148]	; (5158 <MiApp_ProtocolInit+0x98>)
    50c4:	b084      	sub	sp, #16
    50c6:	6018      	str	r0, [r3, #0]
    50c8:	4b24      	ldr	r3, [pc, #144]	; (515c <MiApp_ProtocolInit+0x9c>)
    50ca:	2501      	movs	r5, #1
    50cc:	6019      	str	r1, [r3, #0]
    50ce:	4b24      	ldr	r3, [pc, #144]	; (5160 <MiApp_ProtocolInit+0xa0>)
    50d0:	4798      	blx	r3
    50d2:	2102      	movs	r1, #2
    50d4:	4c23      	ldr	r4, [pc, #140]	; (5164 <MiApp_ProtocolInit+0xa4>)
    50d6:	4b24      	ldr	r3, [pc, #144]	; (5168 <MiApp_ProtocolInit+0xa8>)
    50d8:	aa02      	add	r2, sp, #8
    50da:	8023      	strh	r3, [r4, #0]
    50dc:	7813      	ldrb	r3, [r2, #0]
    50de:	2601      	movs	r6, #1
    50e0:	430b      	orrs	r3, r1
    50e2:	2187      	movs	r1, #135	; 0x87
    50e4:	400b      	ands	r3, r1
    50e6:	2140      	movs	r1, #64	; 0x40
    50e8:	430b      	orrs	r3, r1
    50ea:	21c3      	movs	r1, #195	; 0xc3
    50ec:	400b      	ands	r3, r1
    50ee:	43ab      	bics	r3, r5
    50f0:	7013      	strb	r3, [r2, #0]
    50f2:	491e      	ldr	r1, [pc, #120]	; (516c <MiApp_ProtocolInit+0xac>)
    50f4:	9802      	ldr	r0, [sp, #8]
    50f6:	4b1e      	ldr	r3, [pc, #120]	; (5170 <MiApp_ProtocolInit+0xb0>)
    50f8:	4798      	blx	r3
    50fa:	4b1e      	ldr	r3, [pc, #120]	; (5174 <MiApp_ProtocolInit+0xb4>)
    50fc:	4798      	blx	r3
    50fe:	466b      	mov	r3, sp
    5100:	4276      	negs	r6, r6
    5102:	1d98      	adds	r0, r3, #6
    5104:	0021      	movs	r1, r4
    5106:	4b1c      	ldr	r3, [pc, #112]	; (5178 <MiApp_ProtocolInit+0xb8>)
    5108:	8006      	strh	r6, [r0, #0]
    510a:	4798      	blx	r3
    510c:	491b      	ldr	r1, [pc, #108]	; (517c <MiApp_ProtocolInit+0xbc>)
    510e:	4b1c      	ldr	r3, [pc, #112]	; (5180 <MiApp_ProtocolInit+0xc0>)
    5110:	2000      	movs	r0, #0
    5112:	4798      	blx	r3
    5114:	4b1b      	ldr	r3, [pc, #108]	; (5184 <MiApp_ProtocolInit+0xc4>)
    5116:	4798      	blx	r3
    5118:	4b1b      	ldr	r3, [pc, #108]	; (5188 <MiApp_ProtocolInit+0xc8>)
    511a:	4798      	blx	r3
    511c:	4b1b      	ldr	r3, [pc, #108]	; (518c <MiApp_ProtocolInit+0xcc>)
    511e:	4798      	blx	r3
    5120:	4b1b      	ldr	r3, [pc, #108]	; (5190 <MiApp_ProtocolInit+0xd0>)
    5122:	4798      	blx	r3
    5124:	4b1b      	ldr	r3, [pc, #108]	; (5194 <MiApp_ProtocolInit+0xd4>)
    5126:	4c1c      	ldr	r4, [pc, #112]	; (5198 <MiApp_ProtocolInit+0xd8>)
    5128:	701d      	strb	r5, [r3, #0]
    512a:	4b1c      	ldr	r3, [pc, #112]	; (519c <MiApp_ProtocolInit+0xdc>)
    512c:	481c      	ldr	r0, [pc, #112]	; (51a0 <MiApp_ProtocolInit+0xe0>)
    512e:	801e      	strh	r6, [r3, #0]
    5130:	47a0      	blx	r4
    5132:	481c      	ldr	r0, [pc, #112]	; (51a4 <MiApp_ProtocolInit+0xe4>)
    5134:	47a0      	blx	r4
    5136:	481c      	ldr	r0, [pc, #112]	; (51a8 <MiApp_ProtocolInit+0xe8>)
    5138:	47a0      	blx	r4
    513a:	481c      	ldr	r0, [pc, #112]	; (51ac <MiApp_ProtocolInit+0xec>)
    513c:	47a0      	blx	r4
    513e:	23fa      	movs	r3, #250	; 0xfa
    5140:	481b      	ldr	r0, [pc, #108]	; (51b0 <MiApp_ProtocolInit+0xf0>)
    5142:	009b      	lsls	r3, r3, #2
    5144:	6083      	str	r3, [r0, #8]
    5146:	4b1b      	ldr	r3, [pc, #108]	; (51b4 <MiApp_ProtocolInit+0xf4>)
    5148:	7305      	strb	r5, [r0, #12]
    514a:	6103      	str	r3, [r0, #16]
    514c:	4b1a      	ldr	r3, [pc, #104]	; (51b8 <MiApp_ProtocolInit+0xf8>)
    514e:	4798      	blx	r3
    5150:	2001      	movs	r0, #1
    5152:	b004      	add	sp, #16
    5154:	bd70      	pop	{r4, r5, r6, pc}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	20002c64 	.word	0x20002c64
    515c:	20002c68 	.word	0x20002c68
    5160:	000035c9 	.word	0x000035c9
    5164:	20002c98 	.word	0x20002c98
    5168:	00001234 	.word	0x00001234
    516c:	20000080 	.word	0x20000080
    5170:	000024f1 	.word	0x000024f1
    5174:	00002f7d 	.word	0x00002f7d
    5178:	00002491 	.word	0x00002491
    517c:	20002c78 	.word	0x20002c78
    5180:	000024c9 	.word	0x000024c9
    5184:	00008181 	.word	0x00008181
    5188:	00008555 	.word	0x00008555
    518c:	000081e1 	.word	0x000081e1
    5190:	00006bc1 	.word	0x00006bc1
    5194:	200003ac 	.word	0x200003ac
    5198:	000034fd 	.word	0x000034fd
    519c:	20002cac 	.word	0x20002cac
    51a0:	20002c6c 	.word	0x20002c6c
    51a4:	20002c4c 	.word	0x20002c4c
    51a8:	20002c58 	.word	0x20002c58
    51ac:	20002ca0 	.word	0x20002ca0
    51b0:	200003b0 	.word	0x200003b0
    51b4:	00004e39 	.word	0x00004e39
    51b8:	00003671 	.word	0x00003671

000051bc <MiApp_Set>:
    51bc:	b530      	push	{r4, r5, lr}
    51be:	000c      	movs	r4, r1
    51c0:	b083      	sub	sp, #12
    51c2:	2802      	cmp	r0, #2
    51c4:	d020      	beq.n	5208 <MiApp_Set+0x4c>
    51c6:	d912      	bls.n	51ee <MiApp_Set+0x32>
    51c8:	2880      	cmp	r0, #128	; 0x80
    51ca:	d009      	beq.n	51e0 <MiApp_Set+0x24>
    51cc:	2881      	cmp	r0, #129	; 0x81
    51ce:	d119      	bne.n	5204 <MiApp_Set+0x48>
    51d0:	780b      	ldrb	r3, [r1, #0]
    51d2:	2001      	movs	r0, #1
    51d4:	1e5a      	subs	r2, r3, #1
    51d6:	4193      	sbcs	r3, r2
    51d8:	4a13      	ldr	r2, [pc, #76]	; (5228 <MiApp_Set+0x6c>)
    51da:	7013      	strb	r3, [r2, #0]
    51dc:	b003      	add	sp, #12
    51de:	bd30      	pop	{r4, r5, pc}
    51e0:	780b      	ldrb	r3, [r1, #0]
    51e2:	2001      	movs	r0, #1
    51e4:	1e5a      	subs	r2, r3, #1
    51e6:	4193      	sbcs	r3, r2
    51e8:	4a10      	ldr	r2, [pc, #64]	; (522c <MiApp_Set+0x70>)
    51ea:	7013      	strb	r3, [r2, #0]
    51ec:	e7f6      	b.n	51dc <MiApp_Set+0x20>
    51ee:	2800      	cmp	r0, #0
    51f0:	d108      	bne.n	5204 <MiApp_Set+0x48>
    51f2:	2000      	movs	r0, #0
    51f4:	4b0e      	ldr	r3, [pc, #56]	; (5230 <MiApp_Set+0x74>)
    51f6:	4798      	blx	r3
    51f8:	2800      	cmp	r0, #0
    51fa:	d0ef      	beq.n	51dc <MiApp_Set+0x20>
    51fc:	7822      	ldrb	r2, [r4, #0]
    51fe:	4b0d      	ldr	r3, [pc, #52]	; (5234 <MiApp_Set+0x78>)
    5200:	701a      	strb	r2, [r3, #0]
    5202:	e7eb      	b.n	51dc <MiApp_Set+0x20>
    5204:	2000      	movs	r0, #0
    5206:	e7e9      	b.n	51dc <MiApp_Set+0x20>
    5208:	780b      	ldrb	r3, [r1, #0]
    520a:	ad01      	add	r5, sp, #4
    520c:	702b      	strb	r3, [r5, #0]
    520e:	784b      	ldrb	r3, [r1, #1]
    5210:	0028      	movs	r0, r5
    5212:	706b      	strb	r3, [r5, #1]
    5214:	4908      	ldr	r1, [pc, #32]	; (5238 <MiApp_Set+0x7c>)
    5216:	4b09      	ldr	r3, [pc, #36]	; (523c <MiApp_Set+0x80>)
    5218:	4798      	blx	r3
    521a:	2800      	cmp	r0, #0
    521c:	d0de      	beq.n	51dc <MiApp_Set+0x20>
    521e:	882a      	ldrh	r2, [r5, #0]
    5220:	4b07      	ldr	r3, [pc, #28]	; (5240 <MiApp_Set+0x84>)
    5222:	801a      	strh	r2, [r3, #0]
    5224:	e7da      	b.n	51dc <MiApp_Set+0x20>
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	200003cc 	.word	0x200003cc
    522c:	2000007e 	.word	0x2000007e
    5230:	000024c9 	.word	0x000024c9
    5234:	20002c78 	.word	0x20002c78
    5238:	20002c98 	.word	0x20002c98
    523c:	00002491 	.word	0x00002491
    5240:	20002cac 	.word	0x20002cac

00005244 <MeshTasks>:
    5244:	b530      	push	{r4, r5, lr}
    5246:	4b18      	ldr	r3, [pc, #96]	; (52a8 <MeshTasks+0x64>)
    5248:	b085      	sub	sp, #20
    524a:	4798      	blx	r3
    524c:	4817      	ldr	r0, [pc, #92]	; (52ac <MeshTasks+0x68>)
    524e:	7a03      	ldrb	r3, [r0, #8]
    5250:	2b00      	cmp	r3, #0
    5252:	d003      	beq.n	525c <MeshTasks+0x18>
    5254:	4c16      	ldr	r4, [pc, #88]	; (52b0 <MeshTasks+0x6c>)
    5256:	7823      	ldrb	r3, [r4, #0]
    5258:	2b00      	cmp	r3, #0
    525a:	d10c      	bne.n	5276 <MeshTasks+0x32>
    525c:	4b15      	ldr	r3, [pc, #84]	; (52b4 <MeshTasks+0x70>)
    525e:	4798      	blx	r3
    5260:	2800      	cmp	r0, #0
    5262:	d004      	beq.n	526e <MeshTasks+0x2a>
    5264:	4b14      	ldr	r3, [pc, #80]	; (52b8 <MeshTasks+0x74>)
    5266:	4815      	ldr	r0, [pc, #84]	; (52bc <MeshTasks+0x78>)
    5268:	4798      	blx	r3
    526a:	4b15      	ldr	r3, [pc, #84]	; (52c0 <MeshTasks+0x7c>)
    526c:	4798      	blx	r3
    526e:	4b15      	ldr	r3, [pc, #84]	; (52c4 <MeshTasks+0x80>)
    5270:	4798      	blx	r3
    5272:	b005      	add	sp, #20
    5274:	bd30      	pop	{r4, r5, pc}
    5276:	2100      	movs	r1, #0
    5278:	4b13      	ldr	r3, [pc, #76]	; (52c8 <MeshTasks+0x84>)
    527a:	4798      	blx	r3
    527c:	1e02      	subs	r2, r0, #0
    527e:	d0ed      	beq.n	525c <MeshTasks+0x18>
    5280:	4b12      	ldr	r3, [pc, #72]	; (52cc <MeshTasks+0x88>)
    5282:	4913      	ldr	r1, [pc, #76]	; (52d0 <MeshTasks+0x8c>)
    5284:	6018      	str	r0, [r3, #0]
    5286:	6943      	ldr	r3, [r0, #20]
    5288:	9102      	str	r1, [sp, #8]
    528a:	2125      	movs	r1, #37	; 0x25
    528c:	5c41      	ldrb	r1, [r0, r1]
    528e:	4d11      	ldr	r5, [pc, #68]	; (52d4 <MeshTasks+0x90>)
    5290:	9101      	str	r1, [sp, #4]
    5292:	2124      	movs	r1, #36	; 0x24
    5294:	5c41      	ldrb	r1, [r0, r1]
    5296:	9100      	str	r1, [sp, #0]
    5298:	69d1      	ldr	r1, [r2, #28]
    529a:	6980      	ldr	r0, [r0, #24]
    529c:	6a12      	ldr	r2, [r2, #32]
    529e:	47a8      	blx	r5
    52a0:	2300      	movs	r3, #0
    52a2:	7023      	strb	r3, [r4, #0]
    52a4:	e7da      	b.n	525c <MeshTasks+0x18>
    52a6:	46c0      	nop			; (mov r8, r8)
    52a8:	00002bb5 	.word	0x00002bb5
    52ac:	20002ca0 	.word	0x20002ca0
    52b0:	2000007d 	.word	0x2000007d
    52b4:	000027d9 	.word	0x000027d9
    52b8:	00006e29 	.word	0x00006e29
    52bc:	20002c84 	.word	0x20002c84
    52c0:	000027bd 	.word	0x000027bd
    52c4:	00003691 	.word	0x00003691
    52c8:	00003541 	.word	0x00003541
    52cc:	20002c7c 	.word	0x20002c7c
    52d0:	00004db1 	.word	0x00004db1
    52d4:	0000255d 	.word	0x0000255d

000052d8 <MiApp_SendData>:
    52d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52da:	4657      	mov	r7, sl
    52dc:	464e      	mov	r6, r9
    52de:	4645      	mov	r5, r8
    52e0:	46de      	mov	lr, fp
    52e2:	b5e0      	push	{r5, r6, r7, lr}
    52e4:	b083      	sub	sp, #12
    52e6:	001e      	movs	r6, r3
    52e8:	ab0c      	add	r3, sp, #48	; 0x30
    52ea:	781f      	ldrb	r7, [r3, #0]
    52ec:	ab0d      	add	r3, sp, #52	; 0x34
    52ee:	781c      	ldrb	r4, [r3, #0]
    52f0:	4b6b      	ldr	r3, [pc, #428]	; (54a0 <MiApp_SendData+0x1c8>)
    52f2:	0015      	movs	r5, r2
    52f4:	781b      	ldrb	r3, [r3, #0]
    52f6:	3b06      	subs	r3, #6
    52f8:	2b01      	cmp	r3, #1
    52fa:	d907      	bls.n	530c <MiApp_SendData+0x34>
    52fc:	2000      	movs	r0, #0
    52fe:	b003      	add	sp, #12
    5300:	bc3c      	pop	{r2, r3, r4, r5}
    5302:	4690      	mov	r8, r2
    5304:	4699      	mov	r9, r3
    5306:	46a2      	mov	sl, r4
    5308:	46ab      	mov	fp, r5
    530a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    530c:	2802      	cmp	r0, #2
    530e:	d1f5      	bne.n	52fc <MiApp_SendData+0x24>
    5310:	23ff      	movs	r3, #255	; 0xff
    5312:	469a      	mov	sl, r3
    5314:	784b      	ldrb	r3, [r1, #1]
    5316:	780a      	ldrb	r2, [r1, #0]
    5318:	021b      	lsls	r3, r3, #8
    531a:	431a      	orrs	r2, r3
    531c:	4b61      	ldr	r3, [pc, #388]	; (54a4 <MiApp_SendData+0x1cc>)
    531e:	308e      	adds	r0, #142	; 0x8e
    5320:	4691      	mov	r9, r2
    5322:	469b      	mov	fp, r3
    5324:	4798      	blx	r3
    5326:	4680      	mov	r8, r0
    5328:	2800      	cmp	r0, #0
    532a:	d0e7      	beq.n	52fc <MiApp_SendData+0x24>
    532c:	2203      	movs	r2, #3
    532e:	7e43      	ldrb	r3, [r0, #25]
    5330:	2110      	movs	r1, #16
    5332:	4393      	bics	r3, r2
    5334:	7643      	strb	r3, [r0, #25]
    5336:	466a      	mov	r2, sp
    5338:	464b      	mov	r3, r9
    533a:	80d3      	strh	r3, [r2, #6]
    533c:	88d3      	ldrh	r3, [r2, #6]
    533e:	4699      	mov	r9, r3
    5340:	464a      	mov	r2, r9
    5342:	8382      	strh	r2, [r0, #28]
    5344:	2201      	movs	r2, #1
    5346:	4b58      	ldr	r3, [pc, #352]	; (54a8 <MiApp_SendData+0x1d0>)
    5348:	4022      	ands	r2, r4
    534a:	881b      	ldrh	r3, [r3, #0]
    534c:	0112      	lsls	r2, r2, #4
    534e:	83c3      	strh	r3, [r0, #30]
    5350:	7e43      	ldrb	r3, [r0, #25]
    5352:	438b      	bics	r3, r1
    5354:	4313      	orrs	r3, r2
    5356:	2238      	movs	r2, #56	; 0x38
    5358:	7643      	strb	r3, [r0, #25]
    535a:	5485      	strb	r5, [r0, r2]
    535c:	7487      	strb	r7, [r0, #18]
    535e:	2700      	movs	r7, #0
    5360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5362:	74c7      	strb	r7, [r0, #19]
    5364:	6082      	str	r2, [r0, #8]
    5366:	7507      	strb	r7, [r0, #20]
    5368:	002a      	movs	r2, r5
    536a:	0031      	movs	r1, r6
    536c:	3039      	adds	r0, #57	; 0x39
    536e:	4d4f      	ldr	r5, [pc, #316]	; (54ac <MiApp_SendData+0x1d4>)
    5370:	47a8      	blx	r5
    5372:	4b4f      	ldr	r3, [pc, #316]	; (54b0 <MiApp_SendData+0x1d8>)
    5374:	4599      	cmp	r9, r3
    5376:	d821      	bhi.n	53bc <MiApp_SendData+0xe4>
    5378:	4653      	mov	r3, sl
    537a:	464a      	mov	r2, r9
    537c:	4213      	tst	r3, r2
    537e:	d031      	beq.n	53e4 <MiApp_SendData+0x10c>
    5380:	4648      	mov	r0, r9
    5382:	4652      	mov	r2, sl
    5384:	4b48      	ldr	r3, [pc, #288]	; (54a8 <MiApp_SendData+0x1d0>)
    5386:	4390      	bics	r0, r2
    5388:	881b      	ldrh	r3, [r3, #0]
    538a:	4298      	cmp	r0, r3
    538c:	d043      	beq.n	5416 <MiApp_SendData+0x13e>
    538e:	4b49      	ldr	r3, [pc, #292]	; (54b4 <MiApp_SendData+0x1dc>)
    5390:	4798      	blx	r3
    5392:	4643      	mov	r3, r8
    5394:	8198      	strh	r0, [r3, #12]
    5396:	4b48      	ldr	r3, [pc, #288]	; (54b8 <MiApp_SendData+0x1e0>)
    5398:	4298      	cmp	r0, r3
    539a:	d070      	beq.n	547e <MiApp_SendData+0x1a6>
    539c:	2c00      	cmp	r4, #0
    539e:	d125      	bne.n	53ec <MiApp_SendData+0x114>
    53a0:	4643      	mov	r3, r8
    53a2:	4641      	mov	r1, r8
    53a4:	745c      	strb	r4, [r3, #17]
    53a6:	4845      	ldr	r0, [pc, #276]	; (54bc <MiApp_SendData+0x1e4>)
    53a8:	4b45      	ldr	r3, [pc, #276]	; (54c0 <MiApp_SendData+0x1e8>)
    53aa:	4798      	blx	r3
    53ac:	4643      	mov	r3, r8
    53ae:	4a45      	ldr	r2, [pc, #276]	; (54c4 <MiApp_SendData+0x1ec>)
    53b0:	8999      	ldrh	r1, [r3, #12]
    53b2:	4640      	mov	r0, r8
    53b4:	4b44      	ldr	r3, [pc, #272]	; (54c8 <MiApp_SendData+0x1f0>)
    53b6:	4798      	blx	r3
    53b8:	2001      	movs	r0, #1
    53ba:	e7a0      	b.n	52fe <MiApp_SendData+0x26>
    53bc:	4643      	mov	r3, r8
    53be:	2210      	movs	r2, #16
    53c0:	7e5b      	ldrb	r3, [r3, #25]
    53c2:	4641      	mov	r1, r8
    53c4:	4393      	bics	r3, r2
    53c6:	4642      	mov	r2, r8
    53c8:	483c      	ldr	r0, [pc, #240]	; (54bc <MiApp_SendData+0x1e4>)
    53ca:	7653      	strb	r3, [r2, #25]
    53cc:	4c3c      	ldr	r4, [pc, #240]	; (54c0 <MiApp_SendData+0x1e8>)
    53ce:	47a0      	blx	r4
    53d0:	4b39      	ldr	r3, [pc, #228]	; (54b8 <MiApp_SendData+0x1e0>)
    53d2:	4599      	cmp	r9, r3
    53d4:	d034      	beq.n	5440 <MiApp_SendData+0x168>
    53d6:	4a3b      	ldr	r2, [pc, #236]	; (54c4 <MiApp_SendData+0x1ec>)
    53d8:	4937      	ldr	r1, [pc, #220]	; (54b8 <MiApp_SendData+0x1e0>)
    53da:	4640      	mov	r0, r8
    53dc:	4b3a      	ldr	r3, [pc, #232]	; (54c8 <MiApp_SendData+0x1f0>)
    53de:	4798      	blx	r3
    53e0:	2001      	movs	r0, #1
    53e2:	e78c      	b.n	52fe <MiApp_SendData+0x26>
    53e4:	4648      	mov	r0, r9
    53e6:	4653      	mov	r3, sl
    53e8:	4398      	bics	r0, r3
    53ea:	e7d0      	b.n	538e <MiApp_SendData+0xb6>
    53ec:	4b37      	ldr	r3, [pc, #220]	; (54cc <MiApp_SendData+0x1f4>)
    53ee:	4641      	mov	r1, r8
    53f0:	681a      	ldr	r2, [r3, #0]
    53f2:	2337      	movs	r3, #55	; 0x37
    53f4:	5cd3      	ldrb	r3, [r2, r3]
    53f6:	4836      	ldr	r0, [pc, #216]	; (54d0 <MiApp_SendData+0x1f8>)
    53f8:	3301      	adds	r3, #1
    53fa:	740b      	strb	r3, [r1, #16]
    53fc:	2338      	movs	r3, #56	; 0x38
    53fe:	5cd3      	ldrb	r3, [r2, r3]
    5400:	744b      	strb	r3, [r1, #17]
    5402:	4b2f      	ldr	r3, [pc, #188]	; (54c0 <MiApp_SendData+0x1e8>)
    5404:	4798      	blx	r3
    5406:	4643      	mov	r3, r8
    5408:	4a32      	ldr	r2, [pc, #200]	; (54d4 <MiApp_SendData+0x1fc>)
    540a:	8999      	ldrh	r1, [r3, #12]
    540c:	4640      	mov	r0, r8
    540e:	4b2e      	ldr	r3, [pc, #184]	; (54c8 <MiApp_SendData+0x1f0>)
    5410:	4798      	blx	r3
    5412:	0020      	movs	r0, r4
    5414:	e773      	b.n	52fe <MiApp_SendData+0x26>
    5416:	4643      	mov	r3, r8
    5418:	464a      	mov	r2, r9
    541a:	819a      	strh	r2, [r3, #12]
    541c:	464b      	mov	r3, r9
    541e:	061b      	lsls	r3, r3, #24
    5420:	d4bc      	bmi.n	539c <MiApp_SendData+0xc4>
    5422:	4b2a      	ldr	r3, [pc, #168]	; (54cc <MiApp_SendData+0x1f4>)
    5424:	4641      	mov	r1, r8
    5426:	681a      	ldr	r2, [r3, #0]
    5428:	2327      	movs	r3, #39	; 0x27
    542a:	5cd3      	ldrb	r3, [r2, r3]
    542c:	482a      	ldr	r0, [pc, #168]	; (54d8 <MiApp_SendData+0x200>)
    542e:	3301      	adds	r3, #1
    5430:	740b      	strb	r3, [r1, #16]
    5432:	2338      	movs	r3, #56	; 0x38
    5434:	5cd3      	ldrb	r3, [r2, r3]
    5436:	744b      	strb	r3, [r1, #17]
    5438:	4b21      	ldr	r3, [pc, #132]	; (54c0 <MiApp_SendData+0x1e8>)
    543a:	4798      	blx	r3
    543c:	2001      	movs	r0, #1
    543e:	e75e      	b.n	52fe <MiApp_SendData+0x26>
    5440:	4b26      	ldr	r3, [pc, #152]	; (54dc <MiApp_SendData+0x204>)
    5442:	4798      	blx	r3
    5444:	2800      	cmp	r0, #0
    5446:	d0c6      	beq.n	53d6 <MiApp_SendData+0xfe>
    5448:	4b25      	ldr	r3, [pc, #148]	; (54e0 <MiApp_SendData+0x208>)
    544a:	4798      	blx	r3
    544c:	2832      	cmp	r0, #50	; 0x32
    544e:	d9c2      	bls.n	53d6 <MiApp_SendData+0xfe>
    5450:	2090      	movs	r0, #144	; 0x90
    5452:	47d8      	blx	fp
    5454:	0006      	movs	r6, r0
    5456:	42b8      	cmp	r0, r7
    5458:	d0bd      	beq.n	53d6 <MiApp_SendData+0xfe>
    545a:	4641      	mov	r1, r8
    545c:	2290      	movs	r2, #144	; 0x90
    545e:	47a8      	blx	r5
    5460:	4b1a      	ldr	r3, [pc, #104]	; (54cc <MiApp_SendData+0x1f4>)
    5462:	0031      	movs	r1, r6
    5464:	681a      	ldr	r2, [r3, #0]
    5466:	2327      	movs	r3, #39	; 0x27
    5468:	5cd3      	ldrb	r3, [r2, r3]
    546a:	2201      	movs	r2, #1
    546c:	3301      	adds	r3, #1
    546e:	7433      	strb	r3, [r6, #16]
    5470:	4643      	mov	r3, r8
    5472:	7477      	strb	r7, [r6, #17]
    5474:	4818      	ldr	r0, [pc, #96]	; (54d8 <MiApp_SendData+0x200>)
    5476:	751a      	strb	r2, [r3, #20]
    5478:	60b7      	str	r7, [r6, #8]
    547a:	47a0      	blx	r4
    547c:	e7ab      	b.n	53d6 <MiApp_SendData+0xfe>
    547e:	4b19      	ldr	r3, [pc, #100]	; (54e4 <MiApp_SendData+0x20c>)
    5480:	4648      	mov	r0, r9
    5482:	4798      	blx	r3
    5484:	4b11      	ldr	r3, [pc, #68]	; (54cc <MiApp_SendData+0x1f4>)
    5486:	4818      	ldr	r0, [pc, #96]	; (54e8 <MiApp_SendData+0x210>)
    5488:	681a      	ldr	r2, [r3, #0]
    548a:	2326      	movs	r3, #38	; 0x26
    548c:	5cd3      	ldrb	r3, [r2, r3]
    548e:	4642      	mov	r2, r8
    5490:	3301      	adds	r3, #1
    5492:	7413      	strb	r3, [r2, #16]
    5494:	4641      	mov	r1, r8
    5496:	4b0a      	ldr	r3, [pc, #40]	; (54c0 <MiApp_SendData+0x1e8>)
    5498:	4798      	blx	r3
    549a:	2001      	movs	r0, #1
    549c:	e72f      	b.n	52fe <MiApp_SendData+0x26>
    549e:	46c0      	nop			; (mov r8, r8)
    54a0:	200003ac 	.word	0x200003ac
    54a4:	0000339d 	.word	0x0000339d
    54a8:	20002cac 	.word	0x20002cac
    54ac:	0000926f 	.word	0x0000926f
    54b0:	0000fffc 	.word	0x0000fffc
    54b4:	00008a31 	.word	0x00008a31
    54b8:	0000ffff 	.word	0x0000ffff
    54bc:	20002c4c 	.word	0x20002c4c
    54c0:	00003509 	.word	0x00003509
    54c4:	00004de1 	.word	0x00004de1
    54c8:	000067f1 	.word	0x000067f1
    54cc:	20002c64 	.word	0x20002c64
    54d0:	20002c6c 	.word	0x20002c6c
    54d4:	00004f79 	.word	0x00004f79
    54d8:	20002c58 	.word	0x20002c58
    54dc:	000084a5 	.word	0x000084a5
    54e0:	00003429 	.word	0x00003429
    54e4:	00008c39 	.word	0x00008c39
    54e8:	20002ce8 	.word	0x20002ce8

000054ec <MiApp_Get>:
    54ec:	2801      	cmp	r0, #1
    54ee:	d012      	beq.n	5516 <MiApp_Get+0x2a>
    54f0:	2800      	cmp	r0, #0
    54f2:	d00b      	beq.n	550c <MiApp_Get+0x20>
    54f4:	2802      	cmp	r0, #2
    54f6:	d107      	bne.n	5508 <MiApp_Get+0x1c>
    54f8:	4b08      	ldr	r3, [pc, #32]	; (551c <MiApp_Get+0x30>)
    54fa:	881a      	ldrh	r2, [r3, #0]
    54fc:	2001      	movs	r0, #1
    54fe:	700a      	strb	r2, [r1, #0]
    5500:	881b      	ldrh	r3, [r3, #0]
    5502:	0a1b      	lsrs	r3, r3, #8
    5504:	704b      	strb	r3, [r1, #1]
    5506:	e000      	b.n	550a <MiApp_Get+0x1e>
    5508:	2000      	movs	r0, #0
    550a:	4770      	bx	lr
    550c:	4b04      	ldr	r3, [pc, #16]	; (5520 <MiApp_Get+0x34>)
    550e:	2001      	movs	r0, #1
    5510:	781b      	ldrb	r3, [r3, #0]
    5512:	700b      	strb	r3, [r1, #0]
    5514:	e7f9      	b.n	550a <MiApp_Get+0x1e>
    5516:	4b03      	ldr	r3, [pc, #12]	; (5524 <MiApp_Get+0x38>)
    5518:	e7ef      	b.n	54fa <MiApp_Get+0xe>
    551a:	46c0      	nop			; (mov r8, r8)
    551c:	20002cac 	.word	0x20002cac
    5520:	20002c78 	.word	0x20002c78
    5524:	20002c98 	.word	0x20002c98

00005528 <bloomFilterAddressCheck>:
    5528:	b5f0      	push	{r4, r5, r6, r7, lr}
    552a:	464e      	mov	r6, r9
    552c:	46de      	mov	lr, fp
    552e:	4657      	mov	r7, sl
    5530:	4645      	mov	r5, r8
    5532:	b5e0      	push	{r5, r6, r7, lr}
    5534:	4bf5      	ldr	r3, [pc, #980]	; (590c <bloomFilterAddressCheck+0x3e4>)
    5536:	b087      	sub	sp, #28
    5538:	781b      	ldrb	r3, [r3, #0]
    553a:	9003      	str	r0, [sp, #12]
    553c:	000e      	movs	r6, r1
    553e:	9300      	str	r3, [sp, #0]
    5540:	2b00      	cmp	r3, #0
    5542:	d001      	beq.n	5548 <bloomFilterAddressCheck+0x20>
    5544:	f000 fe65 	bl	6212 <bloomFilterAddressCheck+0xcea>
    5548:	7811      	ldrb	r1, [r2, #0]
    554a:	020b      	lsls	r3, r1, #8
    554c:	0249      	lsls	r1, r1, #9
    554e:	b209      	sxth	r1, r1
    5550:	b218      	sxth	r0, r3
    5552:	468c      	mov	ip, r1
    5554:	4680      	mov	r8, r0
    5556:	4660      	mov	r0, ip
    5558:	4644      	mov	r4, r8
    555a:	49ed      	ldr	r1, [pc, #948]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    555c:	005b      	lsls	r3, r3, #1
    555e:	4041      	eors	r1, r0
    5560:	b29b      	uxth	r3, r3
    5562:	b289      	uxth	r1, r1
    5564:	9304      	str	r3, [sp, #16]
    5566:	1c18      	adds	r0, r3, #0
    5568:	2c00      	cmp	r4, #0
    556a:	da01      	bge.n	5570 <bloomFilterAddressCheck+0x48>
    556c:	f000 fe5b 	bl	6226 <bloomFilterAddressCheck+0xcfe>
    5570:	b284      	uxth	r4, r0
    5572:	49e7      	ldr	r1, [pc, #924]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    5574:	0064      	lsls	r4, r4, #1
    5576:	4061      	eors	r1, r4
    5578:	b209      	sxth	r1, r1
    557a:	b289      	uxth	r1, r1
    557c:	0044      	lsls	r4, r0, #1
    557e:	0403      	lsls	r3, r0, #16
    5580:	d501      	bpl.n	5586 <bloomFilterAddressCheck+0x5e>
    5582:	f000 fe53 	bl	622c <bloomFilterAddressCheck+0xd04>
    5586:	b2a0      	uxth	r0, r4
    5588:	49e1      	ldr	r1, [pc, #900]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    558a:	0040      	lsls	r0, r0, #1
    558c:	4041      	eors	r1, r0
    558e:	b289      	uxth	r1, r1
    5590:	0060      	lsls	r0, r4, #1
    5592:	0423      	lsls	r3, r4, #16
    5594:	d501      	bpl.n	559a <bloomFilterAddressCheck+0x72>
    5596:	f000 fe54 	bl	6242 <bloomFilterAddressCheck+0xd1a>
    559a:	b284      	uxth	r4, r0
    559c:	49dc      	ldr	r1, [pc, #880]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    559e:	0064      	lsls	r4, r4, #1
    55a0:	4061      	eors	r1, r4
    55a2:	b289      	uxth	r1, r1
    55a4:	0044      	lsls	r4, r0, #1
    55a6:	0403      	lsls	r3, r0, #16
    55a8:	d501      	bpl.n	55ae <bloomFilterAddressCheck+0x86>
    55aa:	f000 fe55 	bl	6258 <bloomFilterAddressCheck+0xd30>
    55ae:	b2a0      	uxth	r0, r4
    55b0:	49d7      	ldr	r1, [pc, #860]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    55b2:	0040      	lsls	r0, r0, #1
    55b4:	4041      	eors	r1, r0
    55b6:	b289      	uxth	r1, r1
    55b8:	0060      	lsls	r0, r4, #1
    55ba:	0423      	lsls	r3, r4, #16
    55bc:	d501      	bpl.n	55c2 <bloomFilterAddressCheck+0x9a>
    55be:	f000 fe56 	bl	626e <bloomFilterAddressCheck+0xd46>
    55c2:	b284      	uxth	r4, r0
    55c4:	49d2      	ldr	r1, [pc, #840]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    55c6:	0064      	lsls	r4, r4, #1
    55c8:	4061      	eors	r1, r4
    55ca:	b289      	uxth	r1, r1
    55cc:	0044      	lsls	r4, r0, #1
    55ce:	0403      	lsls	r3, r0, #16
    55d0:	d501      	bpl.n	55d6 <bloomFilterAddressCheck+0xae>
    55d2:	f000 fe57 	bl	6284 <bloomFilterAddressCheck+0xd5c>
    55d6:	b2a0      	uxth	r0, r4
    55d8:	49cd      	ldr	r1, [pc, #820]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    55da:	0040      	lsls	r0, r0, #1
    55dc:	4041      	eors	r1, r0
    55de:	b289      	uxth	r1, r1
    55e0:	0060      	lsls	r0, r4, #1
    55e2:	0423      	lsls	r3, r4, #16
    55e4:	d501      	bpl.n	55ea <bloomFilterAddressCheck+0xc2>
    55e6:	f000 fe58 	bl	629a <bloomFilterAddressCheck+0xd72>
    55ea:	b284      	uxth	r4, r0
    55ec:	49c8      	ldr	r1, [pc, #800]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    55ee:	0064      	lsls	r4, r4, #1
    55f0:	4061      	eors	r1, r4
    55f2:	2401      	movs	r4, #1
    55f4:	5714      	ldrsb	r4, [r2, r4]
    55f6:	b289      	uxth	r1, r1
    55f8:	0224      	lsls	r4, r4, #8
    55fa:	0045      	lsls	r5, r0, #1
    55fc:	0403      	lsls	r3, r0, #16
    55fe:	d501      	bpl.n	5604 <bloomFilterAddressCheck+0xdc>
    5600:	f000 fe4e 	bl	62a0 <bloomFilterAddressCheck+0xd78>
    5604:	4065      	eors	r5, r4
    5606:	b22d      	sxth	r5, r5
    5608:	b2a9      	uxth	r1, r5
    560a:	48c1      	ldr	r0, [pc, #772]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    560c:	0049      	lsls	r1, r1, #1
    560e:	4048      	eors	r0, r1
    5610:	b280      	uxth	r0, r0
    5612:	2d00      	cmp	r5, #0
    5614:	da01      	bge.n	561a <bloomFilterAddressCheck+0xf2>
    5616:	f000 fe46 	bl	62a6 <bloomFilterAddressCheck+0xd7e>
    561a:	48bd      	ldr	r0, [pc, #756]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    561c:	b28d      	uxth	r5, r1
    561e:	006d      	lsls	r5, r5, #1
    5620:	4045      	eors	r5, r0
    5622:	b2ad      	uxth	r5, r5
    5624:	0048      	lsls	r0, r1, #1
    5626:	040b      	lsls	r3, r1, #16
    5628:	d501      	bpl.n	562e <bloomFilterAddressCheck+0x106>
    562a:	f000 fe47 	bl	62bc <bloomFilterAddressCheck+0xd94>
    562e:	b285      	uxth	r5, r0
    5630:	49b7      	ldr	r1, [pc, #732]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    5632:	006d      	lsls	r5, r5, #1
    5634:	4069      	eors	r1, r5
    5636:	b289      	uxth	r1, r1
    5638:	0045      	lsls	r5, r0, #1
    563a:	0403      	lsls	r3, r0, #16
    563c:	d501      	bpl.n	5642 <bloomFilterAddressCheck+0x11a>
    563e:	f000 fe48 	bl	62d2 <bloomFilterAddressCheck+0xdaa>
    5642:	b2a8      	uxth	r0, r5
    5644:	49b2      	ldr	r1, [pc, #712]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    5646:	0040      	lsls	r0, r0, #1
    5648:	4041      	eors	r1, r0
    564a:	b289      	uxth	r1, r1
    564c:	0068      	lsls	r0, r5, #1
    564e:	042b      	lsls	r3, r5, #16
    5650:	d501      	bpl.n	5656 <bloomFilterAddressCheck+0x12e>
    5652:	f000 fe49 	bl	62e8 <bloomFilterAddressCheck+0xdc0>
    5656:	b285      	uxth	r5, r0
    5658:	49ad      	ldr	r1, [pc, #692]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    565a:	006d      	lsls	r5, r5, #1
    565c:	4069      	eors	r1, r5
    565e:	b289      	uxth	r1, r1
    5660:	0045      	lsls	r5, r0, #1
    5662:	0403      	lsls	r3, r0, #16
    5664:	d501      	bpl.n	566a <bloomFilterAddressCheck+0x142>
    5666:	f000 fe4a 	bl	62fe <bloomFilterAddressCheck+0xdd6>
    566a:	b2a8      	uxth	r0, r5
    566c:	49a8      	ldr	r1, [pc, #672]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    566e:	0040      	lsls	r0, r0, #1
    5670:	4041      	eors	r1, r0
    5672:	b289      	uxth	r1, r1
    5674:	0068      	lsls	r0, r5, #1
    5676:	042b      	lsls	r3, r5, #16
    5678:	d501      	bpl.n	567e <bloomFilterAddressCheck+0x156>
    567a:	f000 fe4b 	bl	6314 <bloomFilterAddressCheck+0xdec>
    567e:	b285      	uxth	r5, r0
    5680:	49a3      	ldr	r1, [pc, #652]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    5682:	006d      	lsls	r5, r5, #1
    5684:	4069      	eors	r1, r5
    5686:	b289      	uxth	r1, r1
    5688:	0045      	lsls	r5, r0, #1
    568a:	0403      	lsls	r3, r0, #16
    568c:	d501      	bpl.n	5692 <bloomFilterAddressCheck+0x16a>
    568e:	f000 fe4c 	bl	632a <bloomFilterAddressCheck+0xe02>
    5692:	b2a8      	uxth	r0, r5
    5694:	499e      	ldr	r1, [pc, #632]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    5696:	0040      	lsls	r0, r0, #1
    5698:	4041      	eors	r1, r0
    569a:	2002      	movs	r0, #2
    569c:	5610      	ldrsb	r0, [r2, r0]
    569e:	006f      	lsls	r7, r5, #1
    56a0:	b289      	uxth	r1, r1
    56a2:	0200      	lsls	r0, r0, #8
    56a4:	46b9      	mov	r9, r7
    56a6:	042b      	lsls	r3, r5, #16
    56a8:	d501      	bpl.n	56ae <bloomFilterAddressCheck+0x186>
    56aa:	f000 fe41 	bl	6330 <bloomFilterAddressCheck+0xe08>
    56ae:	464d      	mov	r5, r9
    56b0:	4045      	eors	r5, r0
    56b2:	b22d      	sxth	r5, r5
    56b4:	b2a9      	uxth	r1, r5
    56b6:	0049      	lsls	r1, r1, #1
    56b8:	4689      	mov	r9, r1
    56ba:	464f      	mov	r7, r9
    56bc:	4994      	ldr	r1, [pc, #592]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    56be:	4079      	eors	r1, r7
    56c0:	b289      	uxth	r1, r1
    56c2:	468a      	mov	sl, r1
    56c4:	4649      	mov	r1, r9
    56c6:	2d00      	cmp	r5, #0
    56c8:	da01      	bge.n	56ce <bloomFilterAddressCheck+0x1a6>
    56ca:	f000 fe34 	bl	6336 <bloomFilterAddressCheck+0xe0e>
    56ce:	b28d      	uxth	r5, r1
    56d0:	006d      	lsls	r5, r5, #1
    56d2:	46a9      	mov	r9, r5
    56d4:	464f      	mov	r7, r9
    56d6:	4d8e      	ldr	r5, [pc, #568]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    56d8:	407d      	eors	r5, r7
    56da:	b2ad      	uxth	r5, r5
    56dc:	46a9      	mov	r9, r5
    56de:	004d      	lsls	r5, r1, #1
    56e0:	040b      	lsls	r3, r1, #16
    56e2:	d501      	bpl.n	56e8 <bloomFilterAddressCheck+0x1c0>
    56e4:	f000 fe2a 	bl	633c <bloomFilterAddressCheck+0xe14>
    56e8:	b2a9      	uxth	r1, r5
    56ea:	0049      	lsls	r1, r1, #1
    56ec:	4689      	mov	r9, r1
    56ee:	464f      	mov	r7, r9
    56f0:	4987      	ldr	r1, [pc, #540]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    56f2:	4079      	eors	r1, r7
    56f4:	006f      	lsls	r7, r5, #1
    56f6:	b289      	uxth	r1, r1
    56f8:	46b9      	mov	r9, r7
    56fa:	042b      	lsls	r3, r5, #16
    56fc:	d501      	bpl.n	5702 <bloomFilterAddressCheck+0x1da>
    56fe:	f000 fe20 	bl	6342 <bloomFilterAddressCheck+0xe1a>
    5702:	4649      	mov	r1, r9
    5704:	466b      	mov	r3, sp
    5706:	b28d      	uxth	r5, r1
    5708:	8099      	strh	r1, [r3, #4]
    570a:	4981      	ldr	r1, [pc, #516]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    570c:	006d      	lsls	r5, r5, #1
    570e:	4069      	eors	r1, r5
    5710:	464f      	mov	r7, r9
    5712:	464d      	mov	r5, r9
    5714:	b289      	uxth	r1, r1
    5716:	006d      	lsls	r5, r5, #1
    5718:	043b      	lsls	r3, r7, #16
    571a:	d501      	bpl.n	5720 <bloomFilterAddressCheck+0x1f8>
    571c:	f000 fe14 	bl	6348 <bloomFilterAddressCheck+0xe20>
    5720:	b2a9      	uxth	r1, r5
    5722:	0049      	lsls	r1, r1, #1
    5724:	4689      	mov	r9, r1
    5726:	464f      	mov	r7, r9
    5728:	4979      	ldr	r1, [pc, #484]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    572a:	4079      	eors	r1, r7
    572c:	006f      	lsls	r7, r5, #1
    572e:	b289      	uxth	r1, r1
    5730:	46b9      	mov	r9, r7
    5732:	042b      	lsls	r3, r5, #16
    5734:	d501      	bpl.n	573a <bloomFilterAddressCheck+0x212>
    5736:	f000 fe0a 	bl	634e <bloomFilterAddressCheck+0xe26>
    573a:	4649      	mov	r1, r9
    573c:	466b      	mov	r3, sp
    573e:	b28d      	uxth	r5, r1
    5740:	8099      	strh	r1, [r3, #4]
    5742:	4973      	ldr	r1, [pc, #460]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    5744:	006d      	lsls	r5, r5, #1
    5746:	4069      	eors	r1, r5
    5748:	464f      	mov	r7, r9
    574a:	464d      	mov	r5, r9
    574c:	b289      	uxth	r1, r1
    574e:	006d      	lsls	r5, r5, #1
    5750:	043b      	lsls	r3, r7, #16
    5752:	d501      	bpl.n	5758 <bloomFilterAddressCheck+0x230>
    5754:	f000 fdfe 	bl	6354 <bloomFilterAddressCheck+0xe2c>
    5758:	b2a9      	uxth	r1, r5
    575a:	0049      	lsls	r1, r1, #1
    575c:	4689      	mov	r9, r1
    575e:	464f      	mov	r7, r9
    5760:	496b      	ldr	r1, [pc, #428]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    5762:	4079      	eors	r1, r7
    5764:	006f      	lsls	r7, r5, #1
    5766:	b289      	uxth	r1, r1
    5768:	46ba      	mov	sl, r7
    576a:	042b      	lsls	r3, r5, #16
    576c:	d501      	bpl.n	5772 <bloomFilterAddressCheck+0x24a>
    576e:	f000 fdf4 	bl	635a <bloomFilterAddressCheck+0xe32>
    5772:	4651      	mov	r1, sl
    5774:	466b      	mov	r3, sp
    5776:	b28d      	uxth	r5, r1
    5778:	8099      	strh	r1, [r3, #4]
    577a:	4965      	ldr	r1, [pc, #404]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    577c:	006d      	lsls	r5, r5, #1
    577e:	4069      	eors	r1, r5
    5780:	b289      	uxth	r1, r1
    5782:	4689      	mov	r9, r1
    5784:	2103      	movs	r1, #3
    5786:	4655      	mov	r5, sl
    5788:	4657      	mov	r7, sl
    578a:	5651      	ldrsb	r1, [r2, r1]
    578c:	006d      	lsls	r5, r5, #1
    578e:	0209      	lsls	r1, r1, #8
    5790:	043b      	lsls	r3, r7, #16
    5792:	d501      	bpl.n	5798 <bloomFilterAddressCheck+0x270>
    5794:	f000 fde4 	bl	6360 <bloomFilterAddressCheck+0xe38>
    5798:	404d      	eors	r5, r1
    579a:	b22d      	sxth	r5, r5
    579c:	466b      	mov	r3, sp
    579e:	46a9      	mov	r9, r5
    57a0:	4f5b      	ldr	r7, [pc, #364]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    57a2:	b2ad      	uxth	r5, r5
    57a4:	006d      	lsls	r5, r5, #1
    57a6:	406f      	eors	r7, r5
    57a8:	809f      	strh	r7, [r3, #4]
    57aa:	b2bf      	uxth	r7, r7
    57ac:	46ba      	mov	sl, r7
    57ae:	464f      	mov	r7, r9
    57b0:	2f00      	cmp	r7, #0
    57b2:	da01      	bge.n	57b8 <bloomFilterAddressCheck+0x290>
    57b4:	f000 fdd7 	bl	6366 <bloomFilterAddressCheck+0xe3e>
    57b8:	b2af      	uxth	r7, r5
    57ba:	007f      	lsls	r7, r7, #1
    57bc:	46ba      	mov	sl, r7
    57be:	4f54      	ldr	r7, [pc, #336]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    57c0:	46b9      	mov	r9, r7
    57c2:	4657      	mov	r7, sl
    57c4:	464b      	mov	r3, r9
    57c6:	405f      	eors	r7, r3
    57c8:	1c3b      	adds	r3, r7, #0
    57ca:	466f      	mov	r7, sp
    57cc:	80bb      	strh	r3, [r7, #4]
    57ce:	88bb      	ldrh	r3, [r7, #4]
    57d0:	469a      	mov	sl, r3
    57d2:	006b      	lsls	r3, r5, #1
    57d4:	4699      	mov	r9, r3
    57d6:	042b      	lsls	r3, r5, #16
    57d8:	d501      	bpl.n	57de <bloomFilterAddressCheck+0x2b6>
    57da:	f000 fdc7 	bl	636c <bloomFilterAddressCheck+0xe44>
    57de:	464b      	mov	r3, r9
    57e0:	466d      	mov	r5, sp
    57e2:	80ab      	strh	r3, [r5, #4]
    57e4:	88ad      	ldrh	r5, [r5, #4]
    57e6:	006b      	lsls	r3, r5, #1
    57e8:	4d49      	ldr	r5, [pc, #292]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    57ea:	405d      	eors	r5, r3
    57ec:	464b      	mov	r3, r9
    57ee:	005b      	lsls	r3, r3, #1
    57f0:	469a      	mov	sl, r3
    57f2:	464b      	mov	r3, r9
    57f4:	b2ad      	uxth	r5, r5
    57f6:	041b      	lsls	r3, r3, #16
    57f8:	d501      	bpl.n	57fe <bloomFilterAddressCheck+0x2d6>
    57fa:	f000 fdba 	bl	6372 <bloomFilterAddressCheck+0xe4a>
    57fe:	4653      	mov	r3, sl
    5800:	466d      	mov	r5, sp
    5802:	80ab      	strh	r3, [r5, #4]
    5804:	88ad      	ldrh	r5, [r5, #4]
    5806:	006b      	lsls	r3, r5, #1
    5808:	4d41      	ldr	r5, [pc, #260]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    580a:	405d      	eors	r5, r3
    580c:	4653      	mov	r3, sl
    580e:	005b      	lsls	r3, r3, #1
    5810:	4699      	mov	r9, r3
    5812:	4653      	mov	r3, sl
    5814:	b2ad      	uxth	r5, r5
    5816:	041b      	lsls	r3, r3, #16
    5818:	d501      	bpl.n	581e <bloomFilterAddressCheck+0x2f6>
    581a:	f000 fdad 	bl	6378 <bloomFilterAddressCheck+0xe50>
    581e:	464b      	mov	r3, r9
    5820:	466d      	mov	r5, sp
    5822:	80ab      	strh	r3, [r5, #4]
    5824:	88ad      	ldrh	r5, [r5, #4]
    5826:	006b      	lsls	r3, r5, #1
    5828:	4d39      	ldr	r5, [pc, #228]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    582a:	405d      	eors	r5, r3
    582c:	464b      	mov	r3, r9
    582e:	005b      	lsls	r3, r3, #1
    5830:	469a      	mov	sl, r3
    5832:	464b      	mov	r3, r9
    5834:	b2ad      	uxth	r5, r5
    5836:	041b      	lsls	r3, r3, #16
    5838:	d501      	bpl.n	583e <bloomFilterAddressCheck+0x316>
    583a:	f000 fda0 	bl	637e <bloomFilterAddressCheck+0xe56>
    583e:	4653      	mov	r3, sl
    5840:	466d      	mov	r5, sp
    5842:	80ab      	strh	r3, [r5, #4]
    5844:	88ad      	ldrh	r5, [r5, #4]
    5846:	006b      	lsls	r3, r5, #1
    5848:	4d31      	ldr	r5, [pc, #196]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    584a:	405d      	eors	r5, r3
    584c:	4653      	mov	r3, sl
    584e:	005b      	lsls	r3, r3, #1
    5850:	4699      	mov	r9, r3
    5852:	4653      	mov	r3, sl
    5854:	b2ad      	uxth	r5, r5
    5856:	041b      	lsls	r3, r3, #16
    5858:	d501      	bpl.n	585e <bloomFilterAddressCheck+0x336>
    585a:	f000 fd93 	bl	6384 <bloomFilterAddressCheck+0xe5c>
    585e:	464b      	mov	r3, r9
    5860:	466d      	mov	r5, sp
    5862:	80ab      	strh	r3, [r5, #4]
    5864:	88ad      	ldrh	r5, [r5, #4]
    5866:	006b      	lsls	r3, r5, #1
    5868:	4d29      	ldr	r5, [pc, #164]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    586a:	405d      	eors	r5, r3
    586c:	464b      	mov	r3, r9
    586e:	005b      	lsls	r3, r3, #1
    5870:	469a      	mov	sl, r3
    5872:	464b      	mov	r3, r9
    5874:	b2ad      	uxth	r5, r5
    5876:	041b      	lsls	r3, r3, #16
    5878:	d501      	bpl.n	587e <bloomFilterAddressCheck+0x356>
    587a:	f000 fd86 	bl	638a <bloomFilterAddressCheck+0xe62>
    587e:	4653      	mov	r3, sl
    5880:	466d      	mov	r5, sp
    5882:	80ab      	strh	r3, [r5, #4]
    5884:	88ad      	ldrh	r5, [r5, #4]
    5886:	006b      	lsls	r3, r5, #1
    5888:	4d21      	ldr	r5, [pc, #132]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    588a:	405d      	eors	r5, r3
    588c:	b2ab      	uxth	r3, r5
    588e:	2504      	movs	r5, #4
    5890:	5755      	ldrsb	r5, [r2, r5]
    5892:	4699      	mov	r9, r3
    5894:	022b      	lsls	r3, r5, #8
    5896:	469b      	mov	fp, r3
    5898:	4653      	mov	r3, sl
    589a:	005d      	lsls	r5, r3, #1
    589c:	041b      	lsls	r3, r3, #16
    589e:	d501      	bpl.n	58a4 <bloomFilterAddressCheck+0x37c>
    58a0:	f000 fd76 	bl	6390 <bloomFilterAddressCheck+0xe68>
    58a4:	465b      	mov	r3, fp
    58a6:	405d      	eors	r5, r3
    58a8:	b22b      	sxth	r3, r5
    58aa:	466d      	mov	r5, sp
    58ac:	4699      	mov	r9, r3
    58ae:	80ab      	strh	r3, [r5, #4]
    58b0:	4b17      	ldr	r3, [pc, #92]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    58b2:	88ad      	ldrh	r5, [r5, #4]
    58b4:	001f      	movs	r7, r3
    58b6:	006d      	lsls	r5, r5, #1
    58b8:	406f      	eors	r7, r5
    58ba:	1c3b      	adds	r3, r7, #0
    58bc:	466f      	mov	r7, sp
    58be:	80bb      	strh	r3, [r7, #4]
    58c0:	88bb      	ldrh	r3, [r7, #4]
    58c2:	469a      	mov	sl, r3
    58c4:	464b      	mov	r3, r9
    58c6:	2b00      	cmp	r3, #0
    58c8:	da01      	bge.n	58ce <bloomFilterAddressCheck+0x3a6>
    58ca:	f000 fd64 	bl	6396 <bloomFilterAddressCheck+0xe6e>
    58ce:	b2ab      	uxth	r3, r5
    58d0:	005b      	lsls	r3, r3, #1
    58d2:	469a      	mov	sl, r3
    58d4:	4657      	mov	r7, sl
    58d6:	4b0e      	ldr	r3, [pc, #56]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    58d8:	405f      	eors	r7, r3
    58da:	1c3b      	adds	r3, r7, #0
    58dc:	466f      	mov	r7, sp
    58de:	80bb      	strh	r3, [r7, #4]
    58e0:	88bb      	ldrh	r3, [r7, #4]
    58e2:	469a      	mov	sl, r3
    58e4:	006b      	lsls	r3, r5, #1
    58e6:	4699      	mov	r9, r3
    58e8:	042b      	lsls	r3, r5, #16
    58ea:	d501      	bpl.n	58f0 <bloomFilterAddressCheck+0x3c8>
    58ec:	f000 fd56 	bl	639c <bloomFilterAddressCheck+0xe74>
    58f0:	464b      	mov	r3, r9
    58f2:	466d      	mov	r5, sp
    58f4:	80ab      	strh	r3, [r5, #4]
    58f6:	88ad      	ldrh	r5, [r5, #4]
    58f8:	006b      	lsls	r3, r5, #1
    58fa:	4d05      	ldr	r5, [pc, #20]	; (5910 <bloomFilterAddressCheck+0x3e8>)
    58fc:	405d      	eors	r5, r3
    58fe:	464b      	mov	r3, r9
    5900:	005b      	lsls	r3, r3, #1
    5902:	469a      	mov	sl, r3
    5904:	464b      	mov	r3, r9
    5906:	b2ad      	uxth	r5, r5
    5908:	e004      	b.n	5914 <bloomFilterAddressCheck+0x3ec>
    590a:	46c0      	nop			; (mov r8, r8)
    590c:	2000007e 	.word	0x2000007e
    5910:	00001021 	.word	0x00001021
    5914:	041b      	lsls	r3, r3, #16
    5916:	d501      	bpl.n	591c <bloomFilterAddressCheck+0x3f4>
    5918:	f000 fd43 	bl	63a2 <bloomFilterAddressCheck+0xe7a>
    591c:	4653      	mov	r3, sl
    591e:	466d      	mov	r5, sp
    5920:	80ab      	strh	r3, [r5, #4]
    5922:	88ad      	ldrh	r5, [r5, #4]
    5924:	006b      	lsls	r3, r5, #1
    5926:	4de9      	ldr	r5, [pc, #932]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5928:	405d      	eors	r5, r3
    592a:	4653      	mov	r3, sl
    592c:	005b      	lsls	r3, r3, #1
    592e:	4699      	mov	r9, r3
    5930:	4653      	mov	r3, sl
    5932:	b2ad      	uxth	r5, r5
    5934:	041b      	lsls	r3, r3, #16
    5936:	d501      	bpl.n	593c <bloomFilterAddressCheck+0x414>
    5938:	f000 fd36 	bl	63a8 <bloomFilterAddressCheck+0xe80>
    593c:	464b      	mov	r3, r9
    593e:	466d      	mov	r5, sp
    5940:	80ab      	strh	r3, [r5, #4]
    5942:	88ad      	ldrh	r5, [r5, #4]
    5944:	006b      	lsls	r3, r5, #1
    5946:	4de1      	ldr	r5, [pc, #900]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5948:	405d      	eors	r5, r3
    594a:	464b      	mov	r3, r9
    594c:	005b      	lsls	r3, r3, #1
    594e:	469a      	mov	sl, r3
    5950:	464b      	mov	r3, r9
    5952:	b2ad      	uxth	r5, r5
    5954:	041b      	lsls	r3, r3, #16
    5956:	d501      	bpl.n	595c <bloomFilterAddressCheck+0x434>
    5958:	f000 fd29 	bl	63ae <bloomFilterAddressCheck+0xe86>
    595c:	4653      	mov	r3, sl
    595e:	466d      	mov	r5, sp
    5960:	80ab      	strh	r3, [r5, #4]
    5962:	88ad      	ldrh	r5, [r5, #4]
    5964:	006b      	lsls	r3, r5, #1
    5966:	4dd9      	ldr	r5, [pc, #868]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5968:	405d      	eors	r5, r3
    596a:	4653      	mov	r3, sl
    596c:	005b      	lsls	r3, r3, #1
    596e:	4699      	mov	r9, r3
    5970:	4653      	mov	r3, sl
    5972:	b2ad      	uxth	r5, r5
    5974:	041b      	lsls	r3, r3, #16
    5976:	d501      	bpl.n	597c <bloomFilterAddressCheck+0x454>
    5978:	f000 fd1c 	bl	63b4 <bloomFilterAddressCheck+0xe8c>
    597c:	464b      	mov	r3, r9
    597e:	466d      	mov	r5, sp
    5980:	80ab      	strh	r3, [r5, #4]
    5982:	88ad      	ldrh	r5, [r5, #4]
    5984:	006b      	lsls	r3, r5, #1
    5986:	4dd1      	ldr	r5, [pc, #836]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5988:	405d      	eors	r5, r3
    598a:	464b      	mov	r3, r9
    598c:	005b      	lsls	r3, r3, #1
    598e:	469a      	mov	sl, r3
    5990:	464b      	mov	r3, r9
    5992:	b2ad      	uxth	r5, r5
    5994:	041b      	lsls	r3, r3, #16
    5996:	d501      	bpl.n	599c <bloomFilterAddressCheck+0x474>
    5998:	f000 fd0f 	bl	63ba <bloomFilterAddressCheck+0xe92>
    599c:	4653      	mov	r3, sl
    599e:	466d      	mov	r5, sp
    59a0:	80ab      	strh	r3, [r5, #4]
    59a2:	88ad      	ldrh	r5, [r5, #4]
    59a4:	006b      	lsls	r3, r5, #1
    59a6:	4dc9      	ldr	r5, [pc, #804]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    59a8:	405d      	eors	r5, r3
    59aa:	b2ab      	uxth	r3, r5
    59ac:	2505      	movs	r5, #5
    59ae:	5755      	ldrsb	r5, [r2, r5]
    59b0:	4699      	mov	r9, r3
    59b2:	022b      	lsls	r3, r5, #8
    59b4:	9301      	str	r3, [sp, #4]
    59b6:	4653      	mov	r3, sl
    59b8:	005d      	lsls	r5, r3, #1
    59ba:	041b      	lsls	r3, r3, #16
    59bc:	d501      	bpl.n	59c2 <bloomFilterAddressCheck+0x49a>
    59be:	f000 fcff 	bl	63c0 <bloomFilterAddressCheck+0xe98>
    59c2:	9b01      	ldr	r3, [sp, #4]
    59c4:	405d      	eors	r5, r3
    59c6:	b22b      	sxth	r3, r5
    59c8:	466d      	mov	r5, sp
    59ca:	4699      	mov	r9, r3
    59cc:	812b      	strh	r3, [r5, #8]
    59ce:	4bbf      	ldr	r3, [pc, #764]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    59d0:	892d      	ldrh	r5, [r5, #8]
    59d2:	001f      	movs	r7, r3
    59d4:	006d      	lsls	r5, r5, #1
    59d6:	406f      	eors	r7, r5
    59d8:	1c3b      	adds	r3, r7, #0
    59da:	466f      	mov	r7, sp
    59dc:	813b      	strh	r3, [r7, #8]
    59de:	893b      	ldrh	r3, [r7, #8]
    59e0:	469a      	mov	sl, r3
    59e2:	464b      	mov	r3, r9
    59e4:	2b00      	cmp	r3, #0
    59e6:	da01      	bge.n	59ec <bloomFilterAddressCheck+0x4c4>
    59e8:	f000 fced 	bl	63c6 <bloomFilterAddressCheck+0xe9e>
    59ec:	b2ab      	uxth	r3, r5
    59ee:	005b      	lsls	r3, r3, #1
    59f0:	469a      	mov	sl, r3
    59f2:	4657      	mov	r7, sl
    59f4:	4bb5      	ldr	r3, [pc, #724]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    59f6:	405f      	eors	r7, r3
    59f8:	1c3b      	adds	r3, r7, #0
    59fa:	466f      	mov	r7, sp
    59fc:	813b      	strh	r3, [r7, #8]
    59fe:	893b      	ldrh	r3, [r7, #8]
    5a00:	469a      	mov	sl, r3
    5a02:	006b      	lsls	r3, r5, #1
    5a04:	4699      	mov	r9, r3
    5a06:	042b      	lsls	r3, r5, #16
    5a08:	d501      	bpl.n	5a0e <bloomFilterAddressCheck+0x4e6>
    5a0a:	f000 fcdf 	bl	63cc <bloomFilterAddressCheck+0xea4>
    5a0e:	464b      	mov	r3, r9
    5a10:	466d      	mov	r5, sp
    5a12:	812b      	strh	r3, [r5, #8]
    5a14:	892d      	ldrh	r5, [r5, #8]
    5a16:	006b      	lsls	r3, r5, #1
    5a18:	4dac      	ldr	r5, [pc, #688]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5a1a:	405d      	eors	r5, r3
    5a1c:	464b      	mov	r3, r9
    5a1e:	005b      	lsls	r3, r3, #1
    5a20:	469a      	mov	sl, r3
    5a22:	464b      	mov	r3, r9
    5a24:	b2ad      	uxth	r5, r5
    5a26:	041b      	lsls	r3, r3, #16
    5a28:	d501      	bpl.n	5a2e <bloomFilterAddressCheck+0x506>
    5a2a:	f000 fcd2 	bl	63d2 <bloomFilterAddressCheck+0xeaa>
    5a2e:	4653      	mov	r3, sl
    5a30:	466d      	mov	r5, sp
    5a32:	812b      	strh	r3, [r5, #8]
    5a34:	892d      	ldrh	r5, [r5, #8]
    5a36:	006b      	lsls	r3, r5, #1
    5a38:	4da4      	ldr	r5, [pc, #656]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5a3a:	405d      	eors	r5, r3
    5a3c:	4653      	mov	r3, sl
    5a3e:	005b      	lsls	r3, r3, #1
    5a40:	4699      	mov	r9, r3
    5a42:	4653      	mov	r3, sl
    5a44:	b2ad      	uxth	r5, r5
    5a46:	041b      	lsls	r3, r3, #16
    5a48:	d501      	bpl.n	5a4e <bloomFilterAddressCheck+0x526>
    5a4a:	f000 fcc5 	bl	63d8 <bloomFilterAddressCheck+0xeb0>
    5a4e:	464b      	mov	r3, r9
    5a50:	466d      	mov	r5, sp
    5a52:	812b      	strh	r3, [r5, #8]
    5a54:	892d      	ldrh	r5, [r5, #8]
    5a56:	006b      	lsls	r3, r5, #1
    5a58:	4d9c      	ldr	r5, [pc, #624]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5a5a:	405d      	eors	r5, r3
    5a5c:	464b      	mov	r3, r9
    5a5e:	005b      	lsls	r3, r3, #1
    5a60:	469a      	mov	sl, r3
    5a62:	464b      	mov	r3, r9
    5a64:	b2ad      	uxth	r5, r5
    5a66:	041b      	lsls	r3, r3, #16
    5a68:	d501      	bpl.n	5a6e <bloomFilterAddressCheck+0x546>
    5a6a:	f000 fcb8 	bl	63de <bloomFilterAddressCheck+0xeb6>
    5a6e:	4653      	mov	r3, sl
    5a70:	466d      	mov	r5, sp
    5a72:	812b      	strh	r3, [r5, #8]
    5a74:	892d      	ldrh	r5, [r5, #8]
    5a76:	006b      	lsls	r3, r5, #1
    5a78:	4d94      	ldr	r5, [pc, #592]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5a7a:	405d      	eors	r5, r3
    5a7c:	4653      	mov	r3, sl
    5a7e:	005b      	lsls	r3, r3, #1
    5a80:	4699      	mov	r9, r3
    5a82:	4653      	mov	r3, sl
    5a84:	b2ad      	uxth	r5, r5
    5a86:	041b      	lsls	r3, r3, #16
    5a88:	d501      	bpl.n	5a8e <bloomFilterAddressCheck+0x566>
    5a8a:	f000 fcab 	bl	63e4 <bloomFilterAddressCheck+0xebc>
    5a8e:	464b      	mov	r3, r9
    5a90:	466d      	mov	r5, sp
    5a92:	812b      	strh	r3, [r5, #8]
    5a94:	892d      	ldrh	r5, [r5, #8]
    5a96:	006b      	lsls	r3, r5, #1
    5a98:	4d8c      	ldr	r5, [pc, #560]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5a9a:	405d      	eors	r5, r3
    5a9c:	464b      	mov	r3, r9
    5a9e:	005b      	lsls	r3, r3, #1
    5aa0:	469a      	mov	sl, r3
    5aa2:	464b      	mov	r3, r9
    5aa4:	b2ad      	uxth	r5, r5
    5aa6:	041b      	lsls	r3, r3, #16
    5aa8:	d501      	bpl.n	5aae <bloomFilterAddressCheck+0x586>
    5aaa:	f000 fc9e 	bl	63ea <bloomFilterAddressCheck+0xec2>
    5aae:	4653      	mov	r3, sl
    5ab0:	466d      	mov	r5, sp
    5ab2:	812b      	strh	r3, [r5, #8]
    5ab4:	892d      	ldrh	r5, [r5, #8]
    5ab6:	006b      	lsls	r3, r5, #1
    5ab8:	4d84      	ldr	r5, [pc, #528]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5aba:	405d      	eors	r5, r3
    5abc:	b2ab      	uxth	r3, r5
    5abe:	2506      	movs	r5, #6
    5ac0:	5755      	ldrsb	r5, [r2, r5]
    5ac2:	4699      	mov	r9, r3
    5ac4:	022b      	lsls	r3, r5, #8
    5ac6:	9302      	str	r3, [sp, #8]
    5ac8:	4653      	mov	r3, sl
    5aca:	005d      	lsls	r5, r3, #1
    5acc:	041b      	lsls	r3, r3, #16
    5ace:	d501      	bpl.n	5ad4 <bloomFilterAddressCheck+0x5ac>
    5ad0:	f000 fc8e 	bl	63f0 <bloomFilterAddressCheck+0xec8>
    5ad4:	9b02      	ldr	r3, [sp, #8]
    5ad6:	405d      	eors	r5, r3
    5ad8:	b22b      	sxth	r3, r5
    5ada:	466d      	mov	r5, sp
    5adc:	4699      	mov	r9, r3
    5ade:	82ab      	strh	r3, [r5, #20]
    5ae0:	4b7a      	ldr	r3, [pc, #488]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5ae2:	8aad      	ldrh	r5, [r5, #20]
    5ae4:	001f      	movs	r7, r3
    5ae6:	006d      	lsls	r5, r5, #1
    5ae8:	406f      	eors	r7, r5
    5aea:	1c3b      	adds	r3, r7, #0
    5aec:	466f      	mov	r7, sp
    5aee:	82bb      	strh	r3, [r7, #20]
    5af0:	8abb      	ldrh	r3, [r7, #20]
    5af2:	469a      	mov	sl, r3
    5af4:	464b      	mov	r3, r9
    5af6:	2b00      	cmp	r3, #0
    5af8:	da01      	bge.n	5afe <bloomFilterAddressCheck+0x5d6>
    5afa:	f000 fc7c 	bl	63f6 <bloomFilterAddressCheck+0xece>
    5afe:	b2ab      	uxth	r3, r5
    5b00:	005b      	lsls	r3, r3, #1
    5b02:	469a      	mov	sl, r3
    5b04:	4657      	mov	r7, sl
    5b06:	4b71      	ldr	r3, [pc, #452]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5b08:	405f      	eors	r7, r3
    5b0a:	1c3b      	adds	r3, r7, #0
    5b0c:	466f      	mov	r7, sp
    5b0e:	82bb      	strh	r3, [r7, #20]
    5b10:	8abb      	ldrh	r3, [r7, #20]
    5b12:	4699      	mov	r9, r3
    5b14:	006b      	lsls	r3, r5, #1
    5b16:	469a      	mov	sl, r3
    5b18:	042b      	lsls	r3, r5, #16
    5b1a:	d501      	bpl.n	5b20 <bloomFilterAddressCheck+0x5f8>
    5b1c:	f000 fc6e 	bl	63fc <bloomFilterAddressCheck+0xed4>
    5b20:	4653      	mov	r3, sl
    5b22:	466d      	mov	r5, sp
    5b24:	82ab      	strh	r3, [r5, #20]
    5b26:	8aad      	ldrh	r5, [r5, #20]
    5b28:	006b      	lsls	r3, r5, #1
    5b2a:	4d68      	ldr	r5, [pc, #416]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5b2c:	405d      	eors	r5, r3
    5b2e:	4653      	mov	r3, sl
    5b30:	005b      	lsls	r3, r3, #1
    5b32:	4699      	mov	r9, r3
    5b34:	4653      	mov	r3, sl
    5b36:	b2ad      	uxth	r5, r5
    5b38:	041b      	lsls	r3, r3, #16
    5b3a:	d501      	bpl.n	5b40 <bloomFilterAddressCheck+0x618>
    5b3c:	f000 fc61 	bl	6402 <bloomFilterAddressCheck+0xeda>
    5b40:	464b      	mov	r3, r9
    5b42:	466d      	mov	r5, sp
    5b44:	82ab      	strh	r3, [r5, #20]
    5b46:	8aad      	ldrh	r5, [r5, #20]
    5b48:	006b      	lsls	r3, r5, #1
    5b4a:	4d60      	ldr	r5, [pc, #384]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5b4c:	405d      	eors	r5, r3
    5b4e:	464b      	mov	r3, r9
    5b50:	005b      	lsls	r3, r3, #1
    5b52:	469a      	mov	sl, r3
    5b54:	464b      	mov	r3, r9
    5b56:	b2ad      	uxth	r5, r5
    5b58:	041b      	lsls	r3, r3, #16
    5b5a:	d501      	bpl.n	5b60 <bloomFilterAddressCheck+0x638>
    5b5c:	f000 fc54 	bl	6408 <bloomFilterAddressCheck+0xee0>
    5b60:	4653      	mov	r3, sl
    5b62:	466d      	mov	r5, sp
    5b64:	82ab      	strh	r3, [r5, #20]
    5b66:	8aad      	ldrh	r5, [r5, #20]
    5b68:	006b      	lsls	r3, r5, #1
    5b6a:	4d58      	ldr	r5, [pc, #352]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5b6c:	405d      	eors	r5, r3
    5b6e:	4653      	mov	r3, sl
    5b70:	005b      	lsls	r3, r3, #1
    5b72:	4699      	mov	r9, r3
    5b74:	4653      	mov	r3, sl
    5b76:	b2ad      	uxth	r5, r5
    5b78:	041b      	lsls	r3, r3, #16
    5b7a:	d501      	bpl.n	5b80 <bloomFilterAddressCheck+0x658>
    5b7c:	f000 fc47 	bl	640e <bloomFilterAddressCheck+0xee6>
    5b80:	464b      	mov	r3, r9
    5b82:	466d      	mov	r5, sp
    5b84:	82ab      	strh	r3, [r5, #20]
    5b86:	8aad      	ldrh	r5, [r5, #20]
    5b88:	006b      	lsls	r3, r5, #1
    5b8a:	4d50      	ldr	r5, [pc, #320]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5b8c:	405d      	eors	r5, r3
    5b8e:	464b      	mov	r3, r9
    5b90:	005b      	lsls	r3, r3, #1
    5b92:	469a      	mov	sl, r3
    5b94:	464b      	mov	r3, r9
    5b96:	b2ad      	uxth	r5, r5
    5b98:	041b      	lsls	r3, r3, #16
    5b9a:	d501      	bpl.n	5ba0 <bloomFilterAddressCheck+0x678>
    5b9c:	f000 fc3a 	bl	6414 <bloomFilterAddressCheck+0xeec>
    5ba0:	4653      	mov	r3, sl
    5ba2:	466d      	mov	r5, sp
    5ba4:	82ab      	strh	r3, [r5, #20]
    5ba6:	8aad      	ldrh	r5, [r5, #20]
    5ba8:	006b      	lsls	r3, r5, #1
    5baa:	4d48      	ldr	r5, [pc, #288]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5bac:	405d      	eors	r5, r3
    5bae:	4653      	mov	r3, sl
    5bb0:	005b      	lsls	r3, r3, #1
    5bb2:	4699      	mov	r9, r3
    5bb4:	4653      	mov	r3, sl
    5bb6:	b2ad      	uxth	r5, r5
    5bb8:	041b      	lsls	r3, r3, #16
    5bba:	d501      	bpl.n	5bc0 <bloomFilterAddressCheck+0x698>
    5bbc:	f000 fc2d 	bl	641a <bloomFilterAddressCheck+0xef2>
    5bc0:	464b      	mov	r3, r9
    5bc2:	466d      	mov	r5, sp
    5bc4:	82ab      	strh	r3, [r5, #20]
    5bc6:	8aad      	ldrh	r5, [r5, #20]
    5bc8:	79d2      	ldrb	r2, [r2, #7]
    5bca:	006b      	lsls	r3, r5, #1
    5bcc:	4d3f      	ldr	r5, [pc, #252]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5bce:	b252      	sxtb	r2, r2
    5bd0:	405d      	eors	r5, r3
    5bd2:	0213      	lsls	r3, r2, #8
    5bd4:	469a      	mov	sl, r3
    5bd6:	464b      	mov	r3, r9
    5bd8:	b2ad      	uxth	r5, r5
    5bda:	005a      	lsls	r2, r3, #1
    5bdc:	041b      	lsls	r3, r3, #16
    5bde:	d501      	bpl.n	5be4 <bloomFilterAddressCheck+0x6bc>
    5be0:	f000 fc1e 	bl	6420 <bloomFilterAddressCheck+0xef8>
    5be4:	4653      	mov	r3, sl
    5be6:	405a      	eors	r2, r3
    5be8:	4b38      	ldr	r3, [pc, #224]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5bea:	b212      	sxth	r2, r2
    5bec:	001f      	movs	r7, r3
    5bee:	b295      	uxth	r5, r2
    5bf0:	006d      	lsls	r5, r5, #1
    5bf2:	406f      	eors	r7, r5
    5bf4:	1c3b      	adds	r3, r7, #0
    5bf6:	466f      	mov	r7, sp
    5bf8:	82bb      	strh	r3, [r7, #20]
    5bfa:	8abb      	ldrh	r3, [r7, #20]
    5bfc:	b2ad      	uxth	r5, r5
    5bfe:	2a00      	cmp	r2, #0
    5c00:	da00      	bge.n	5c04 <bloomFilterAddressCheck+0x6dc>
    5c02:	e30e      	b.n	6222 <bloomFilterAddressCheck+0xcfa>
    5c04:	1c2a      	adds	r2, r5, #0
    5c06:	466f      	mov	r7, sp
    5c08:	b295      	uxth	r5, r2
    5c0a:	006b      	lsls	r3, r5, #1
    5c0c:	4d2f      	ldr	r5, [pc, #188]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5c0e:	405d      	eors	r5, r3
    5c10:	0053      	lsls	r3, r2, #1
    5c12:	82bb      	strh	r3, [r7, #20]
    5c14:	8abb      	ldrh	r3, [r7, #20]
    5c16:	b2ad      	uxth	r5, r5
    5c18:	4699      	mov	r9, r3
    5c1a:	0413      	lsls	r3, r2, #16
    5c1c:	d501      	bpl.n	5c22 <bloomFilterAddressCheck+0x6fa>
    5c1e:	f000 fcb4 	bl	658a <bloomFilterAddressCheck+0x1062>
    5c22:	464a      	mov	r2, r9
    5c24:	466f      	mov	r7, sp
    5c26:	b295      	uxth	r5, r2
    5c28:	006b      	lsls	r3, r5, #1
    5c2a:	4d28      	ldr	r5, [pc, #160]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5c2c:	405d      	eors	r5, r3
    5c2e:	0053      	lsls	r3, r2, #1
    5c30:	82bb      	strh	r3, [r7, #20]
    5c32:	8abb      	ldrh	r3, [r7, #20]
    5c34:	b2ad      	uxth	r5, r5
    5c36:	4699      	mov	r9, r3
    5c38:	0413      	lsls	r3, r2, #16
    5c3a:	d400      	bmi.n	5c3e <bloomFilterAddressCheck+0x716>
    5c3c:	464d      	mov	r5, r9
    5c3e:	466f      	mov	r7, sp
    5c40:	b2aa      	uxth	r2, r5
    5c42:	0053      	lsls	r3, r2, #1
    5c44:	4a21      	ldr	r2, [pc, #132]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5c46:	405a      	eors	r2, r3
    5c48:	006b      	lsls	r3, r5, #1
    5c4a:	82bb      	strh	r3, [r7, #20]
    5c4c:	8abb      	ldrh	r3, [r7, #20]
    5c4e:	b292      	uxth	r2, r2
    5c50:	4699      	mov	r9, r3
    5c52:	042b      	lsls	r3, r5, #16
    5c54:	d400      	bmi.n	5c58 <bloomFilterAddressCheck+0x730>
    5c56:	464a      	mov	r2, r9
    5c58:	466f      	mov	r7, sp
    5c5a:	b295      	uxth	r5, r2
    5c5c:	006b      	lsls	r3, r5, #1
    5c5e:	4d1b      	ldr	r5, [pc, #108]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5c60:	405d      	eors	r5, r3
    5c62:	0053      	lsls	r3, r2, #1
    5c64:	82bb      	strh	r3, [r7, #20]
    5c66:	8abb      	ldrh	r3, [r7, #20]
    5c68:	b2ad      	uxth	r5, r5
    5c6a:	4699      	mov	r9, r3
    5c6c:	0413      	lsls	r3, r2, #16
    5c6e:	d400      	bmi.n	5c72 <bloomFilterAddressCheck+0x74a>
    5c70:	464d      	mov	r5, r9
    5c72:	466f      	mov	r7, sp
    5c74:	b2aa      	uxth	r2, r5
    5c76:	0053      	lsls	r3, r2, #1
    5c78:	4a14      	ldr	r2, [pc, #80]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5c7a:	405a      	eors	r2, r3
    5c7c:	006b      	lsls	r3, r5, #1
    5c7e:	82bb      	strh	r3, [r7, #20]
    5c80:	8abb      	ldrh	r3, [r7, #20]
    5c82:	b292      	uxth	r2, r2
    5c84:	4699      	mov	r9, r3
    5c86:	042b      	lsls	r3, r5, #16
    5c88:	d400      	bmi.n	5c8c <bloomFilterAddressCheck+0x764>
    5c8a:	464a      	mov	r2, r9
    5c8c:	b295      	uxth	r5, r2
    5c8e:	006b      	lsls	r3, r5, #1
    5c90:	4d0e      	ldr	r5, [pc, #56]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5c92:	405d      	eors	r5, r3
    5c94:	b2ab      	uxth	r3, r5
    5c96:	0055      	lsls	r5, r2, #1
    5c98:	4699      	mov	r9, r3
    5c9a:	b2ad      	uxth	r5, r5
    5c9c:	0413      	lsls	r3, r2, #16
    5c9e:	d501      	bpl.n	5ca4 <bloomFilterAddressCheck+0x77c>
    5ca0:	f000 fc70 	bl	6584 <bloomFilterAddressCheck+0x105c>
    5ca4:	1c2a      	adds	r2, r5, #0
    5ca6:	b295      	uxth	r5, r2
    5ca8:	b213      	sxth	r3, r2
    5caa:	001f      	movs	r7, r3
    5cac:	006b      	lsls	r3, r5, #1
    5cae:	4d07      	ldr	r5, [pc, #28]	; (5ccc <bloomFilterAddressCheck+0x7a4>)
    5cb0:	0052      	lsls	r2, r2, #1
    5cb2:	405d      	eors	r5, r3
    5cb4:	b2ab      	uxth	r3, r5
    5cb6:	9305      	str	r3, [sp, #20]
    5cb8:	b293      	uxth	r3, r2
    5cba:	4699      	mov	r9, r3
    5cbc:	4663      	mov	r3, ip
    5cbe:	4a04      	ldr	r2, [pc, #16]	; (5cd0 <bloomFilterAddressCheck+0x7a8>)
    5cc0:	4645      	mov	r5, r8
    5cc2:	405a      	eors	r2, r3
    5cc4:	466b      	mov	r3, sp
    5cc6:	b292      	uxth	r2, r2
    5cc8:	8a1b      	ldrh	r3, [r3, #16]
    5cca:	e003      	b.n	5cd4 <bloomFilterAddressCheck+0x7ac>
    5ccc:	00001021 	.word	0x00001021
    5cd0:	ffff8005 	.word	0xffff8005
    5cd4:	2d00      	cmp	r5, #0
    5cd6:	da01      	bge.n	5cdc <bloomFilterAddressCheck+0x7b4>
    5cd8:	f000 fc51 	bl	657e <bloomFilterAddressCheck+0x1056>
    5cdc:	b29d      	uxth	r5, r3
    5cde:	4ae9      	ldr	r2, [pc, #932]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5ce0:	006d      	lsls	r5, r5, #1
    5ce2:	406a      	eors	r2, r5
    5ce4:	b212      	sxth	r2, r2
    5ce6:	b295      	uxth	r5, r2
    5ce8:	005a      	lsls	r2, r3, #1
    5cea:	b292      	uxth	r2, r2
    5cec:	041b      	lsls	r3, r3, #16
    5cee:	d501      	bpl.n	5cf4 <bloomFilterAddressCheck+0x7cc>
    5cf0:	f000 fc42 	bl	6578 <bloomFilterAddressCheck+0x1050>
    5cf4:	4be3      	ldr	r3, [pc, #908]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5cf6:	b295      	uxth	r5, r2
    5cf8:	006d      	lsls	r5, r5, #1
    5cfa:	405d      	eors	r5, r3
    5cfc:	0053      	lsls	r3, r2, #1
    5cfe:	b2ad      	uxth	r5, r5
    5d00:	b29b      	uxth	r3, r3
    5d02:	0412      	lsls	r2, r2, #16
    5d04:	d501      	bpl.n	5d0a <bloomFilterAddressCheck+0x7e2>
    5d06:	f000 fc34 	bl	6572 <bloomFilterAddressCheck+0x104a>
    5d0a:	4ade      	ldr	r2, [pc, #888]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5d0c:	b29d      	uxth	r5, r3
    5d0e:	006d      	lsls	r5, r5, #1
    5d10:	4055      	eors	r5, r2
    5d12:	005a      	lsls	r2, r3, #1
    5d14:	b2ad      	uxth	r5, r5
    5d16:	b292      	uxth	r2, r2
    5d18:	041b      	lsls	r3, r3, #16
    5d1a:	d501      	bpl.n	5d20 <bloomFilterAddressCheck+0x7f8>
    5d1c:	f000 fc26 	bl	656c <bloomFilterAddressCheck+0x1044>
    5d20:	4bd8      	ldr	r3, [pc, #864]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5d22:	b295      	uxth	r5, r2
    5d24:	006d      	lsls	r5, r5, #1
    5d26:	405d      	eors	r5, r3
    5d28:	0053      	lsls	r3, r2, #1
    5d2a:	b2ad      	uxth	r5, r5
    5d2c:	b29b      	uxth	r3, r3
    5d2e:	0412      	lsls	r2, r2, #16
    5d30:	d501      	bpl.n	5d36 <bloomFilterAddressCheck+0x80e>
    5d32:	f000 fc18 	bl	6566 <bloomFilterAddressCheck+0x103e>
    5d36:	4ad3      	ldr	r2, [pc, #844]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5d38:	b29d      	uxth	r5, r3
    5d3a:	006d      	lsls	r5, r5, #1
    5d3c:	4055      	eors	r5, r2
    5d3e:	005a      	lsls	r2, r3, #1
    5d40:	b2ad      	uxth	r5, r5
    5d42:	b292      	uxth	r2, r2
    5d44:	041b      	lsls	r3, r3, #16
    5d46:	d501      	bpl.n	5d4c <bloomFilterAddressCheck+0x824>
    5d48:	f000 fc0a 	bl	6560 <bloomFilterAddressCheck+0x1038>
    5d4c:	4bcd      	ldr	r3, [pc, #820]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5d4e:	b295      	uxth	r5, r2
    5d50:	006d      	lsls	r5, r5, #1
    5d52:	405d      	eors	r5, r3
    5d54:	0053      	lsls	r3, r2, #1
    5d56:	b2ad      	uxth	r5, r5
    5d58:	b29b      	uxth	r3, r3
    5d5a:	0412      	lsls	r2, r2, #16
    5d5c:	d500      	bpl.n	5d60 <bloomFilterAddressCheck+0x838>
    5d5e:	e3c1      	b.n	64e4 <bloomFilterAddressCheck+0xfbc>
    5d60:	b29a      	uxth	r2, r3
    5d62:	4dc8      	ldr	r5, [pc, #800]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5d64:	0052      	lsls	r2, r2, #1
    5d66:	4055      	eors	r5, r2
    5d68:	005a      	lsls	r2, r3, #1
    5d6a:	b2ad      	uxth	r5, r5
    5d6c:	b292      	uxth	r2, r2
    5d6e:	041b      	lsls	r3, r3, #16
    5d70:	d500      	bpl.n	5d74 <bloomFilterAddressCheck+0x84c>
    5d72:	e3b5      	b.n	64e0 <bloomFilterAddressCheck+0xfb8>
    5d74:	4054      	eors	r4, r2
    5d76:	b224      	sxth	r4, r4
    5d78:	b2a2      	uxth	r2, r4
    5d7a:	4bc2      	ldr	r3, [pc, #776]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5d7c:	0052      	lsls	r2, r2, #1
    5d7e:	4053      	eors	r3, r2
    5d80:	b29d      	uxth	r5, r3
    5d82:	b293      	uxth	r3, r2
    5d84:	2c00      	cmp	r4, #0
    5d86:	da00      	bge.n	5d8a <bloomFilterAddressCheck+0x862>
    5d88:	e3a8      	b.n	64dc <bloomFilterAddressCheck+0xfb4>
    5d8a:	4abe      	ldr	r2, [pc, #760]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5d8c:	b29c      	uxth	r4, r3
    5d8e:	0064      	lsls	r4, r4, #1
    5d90:	4054      	eors	r4, r2
    5d92:	005a      	lsls	r2, r3, #1
    5d94:	b2a4      	uxth	r4, r4
    5d96:	b292      	uxth	r2, r2
    5d98:	041b      	lsls	r3, r3, #16
    5d9a:	d500      	bpl.n	5d9e <bloomFilterAddressCheck+0x876>
    5d9c:	e39c      	b.n	64d8 <bloomFilterAddressCheck+0xfb0>
    5d9e:	4bb9      	ldr	r3, [pc, #740]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5da0:	b294      	uxth	r4, r2
    5da2:	0064      	lsls	r4, r4, #1
    5da4:	405c      	eors	r4, r3
    5da6:	0053      	lsls	r3, r2, #1
    5da8:	b2a4      	uxth	r4, r4
    5daa:	b29b      	uxth	r3, r3
    5dac:	0412      	lsls	r2, r2, #16
    5dae:	d500      	bpl.n	5db2 <bloomFilterAddressCheck+0x88a>
    5db0:	e390      	b.n	64d4 <bloomFilterAddressCheck+0xfac>
    5db2:	4ab4      	ldr	r2, [pc, #720]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5db4:	b29c      	uxth	r4, r3
    5db6:	0064      	lsls	r4, r4, #1
    5db8:	4054      	eors	r4, r2
    5dba:	005a      	lsls	r2, r3, #1
    5dbc:	b2a4      	uxth	r4, r4
    5dbe:	b292      	uxth	r2, r2
    5dc0:	041b      	lsls	r3, r3, #16
    5dc2:	d500      	bpl.n	5dc6 <bloomFilterAddressCheck+0x89e>
    5dc4:	e384      	b.n	64d0 <bloomFilterAddressCheck+0xfa8>
    5dc6:	4baf      	ldr	r3, [pc, #700]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5dc8:	b294      	uxth	r4, r2
    5dca:	0064      	lsls	r4, r4, #1
    5dcc:	405c      	eors	r4, r3
    5dce:	0053      	lsls	r3, r2, #1
    5dd0:	b2a4      	uxth	r4, r4
    5dd2:	b29b      	uxth	r3, r3
    5dd4:	0412      	lsls	r2, r2, #16
    5dd6:	d500      	bpl.n	5dda <bloomFilterAddressCheck+0x8b2>
    5dd8:	e378      	b.n	64cc <bloomFilterAddressCheck+0xfa4>
    5dda:	4aaa      	ldr	r2, [pc, #680]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5ddc:	b29c      	uxth	r4, r3
    5dde:	0064      	lsls	r4, r4, #1
    5de0:	4054      	eors	r4, r2
    5de2:	005a      	lsls	r2, r3, #1
    5de4:	b2a4      	uxth	r4, r4
    5de6:	b292      	uxth	r2, r2
    5de8:	041b      	lsls	r3, r3, #16
    5dea:	d500      	bpl.n	5dee <bloomFilterAddressCheck+0x8c6>
    5dec:	e36c      	b.n	64c8 <bloomFilterAddressCheck+0xfa0>
    5dee:	4ba5      	ldr	r3, [pc, #660]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5df0:	b294      	uxth	r4, r2
    5df2:	0064      	lsls	r4, r4, #1
    5df4:	405c      	eors	r4, r3
    5df6:	0053      	lsls	r3, r2, #1
    5df8:	b2a4      	uxth	r4, r4
    5dfa:	b29b      	uxth	r3, r3
    5dfc:	0412      	lsls	r2, r2, #16
    5dfe:	d500      	bpl.n	5e02 <bloomFilterAddressCheck+0x8da>
    5e00:	e360      	b.n	64c4 <bloomFilterAddressCheck+0xf9c>
    5e02:	b29a      	uxth	r2, r3
    5e04:	4c9f      	ldr	r4, [pc, #636]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5e06:	0052      	lsls	r2, r2, #1
    5e08:	4054      	eors	r4, r2
    5e0a:	005a      	lsls	r2, r3, #1
    5e0c:	b2a4      	uxth	r4, r4
    5e0e:	b292      	uxth	r2, r2
    5e10:	041b      	lsls	r3, r3, #16
    5e12:	d500      	bpl.n	5e16 <bloomFilterAddressCheck+0x8ee>
    5e14:	e354      	b.n	64c0 <bloomFilterAddressCheck+0xf98>
    5e16:	4050      	eors	r0, r2
    5e18:	b200      	sxth	r0, r0
    5e1a:	b282      	uxth	r2, r0
    5e1c:	4b99      	ldr	r3, [pc, #612]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5e1e:	0052      	lsls	r2, r2, #1
    5e20:	4053      	eors	r3, r2
    5e22:	b29c      	uxth	r4, r3
    5e24:	b293      	uxth	r3, r2
    5e26:	2800      	cmp	r0, #0
    5e28:	da00      	bge.n	5e2c <bloomFilterAddressCheck+0x904>
    5e2a:	e347      	b.n	64bc <bloomFilterAddressCheck+0xf94>
    5e2c:	4a95      	ldr	r2, [pc, #596]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5e2e:	b298      	uxth	r0, r3
    5e30:	0040      	lsls	r0, r0, #1
    5e32:	4050      	eors	r0, r2
    5e34:	005a      	lsls	r2, r3, #1
    5e36:	b280      	uxth	r0, r0
    5e38:	b292      	uxth	r2, r2
    5e3a:	041b      	lsls	r3, r3, #16
    5e3c:	d500      	bpl.n	5e40 <bloomFilterAddressCheck+0x918>
    5e3e:	e33b      	b.n	64b8 <bloomFilterAddressCheck+0xf90>
    5e40:	4b90      	ldr	r3, [pc, #576]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5e42:	b290      	uxth	r0, r2
    5e44:	0040      	lsls	r0, r0, #1
    5e46:	4058      	eors	r0, r3
    5e48:	0053      	lsls	r3, r2, #1
    5e4a:	b280      	uxth	r0, r0
    5e4c:	b29b      	uxth	r3, r3
    5e4e:	0412      	lsls	r2, r2, #16
    5e50:	d500      	bpl.n	5e54 <bloomFilterAddressCheck+0x92c>
    5e52:	e32f      	b.n	64b4 <bloomFilterAddressCheck+0xf8c>
    5e54:	4a8b      	ldr	r2, [pc, #556]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5e56:	b298      	uxth	r0, r3
    5e58:	0040      	lsls	r0, r0, #1
    5e5a:	4050      	eors	r0, r2
    5e5c:	005a      	lsls	r2, r3, #1
    5e5e:	b280      	uxth	r0, r0
    5e60:	b292      	uxth	r2, r2
    5e62:	041b      	lsls	r3, r3, #16
    5e64:	d500      	bpl.n	5e68 <bloomFilterAddressCheck+0x940>
    5e66:	e323      	b.n	64b0 <bloomFilterAddressCheck+0xf88>
    5e68:	4b86      	ldr	r3, [pc, #536]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5e6a:	b290      	uxth	r0, r2
    5e6c:	0040      	lsls	r0, r0, #1
    5e6e:	4058      	eors	r0, r3
    5e70:	0053      	lsls	r3, r2, #1
    5e72:	b280      	uxth	r0, r0
    5e74:	b29b      	uxth	r3, r3
    5e76:	0412      	lsls	r2, r2, #16
    5e78:	d500      	bpl.n	5e7c <bloomFilterAddressCheck+0x954>
    5e7a:	e317      	b.n	64ac <bloomFilterAddressCheck+0xf84>
    5e7c:	4a81      	ldr	r2, [pc, #516]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5e7e:	b298      	uxth	r0, r3
    5e80:	0040      	lsls	r0, r0, #1
    5e82:	4050      	eors	r0, r2
    5e84:	005a      	lsls	r2, r3, #1
    5e86:	b280      	uxth	r0, r0
    5e88:	b292      	uxth	r2, r2
    5e8a:	041b      	lsls	r3, r3, #16
    5e8c:	d500      	bpl.n	5e90 <bloomFilterAddressCheck+0x968>
    5e8e:	e30b      	b.n	64a8 <bloomFilterAddressCheck+0xf80>
    5e90:	4b7c      	ldr	r3, [pc, #496]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5e92:	b290      	uxth	r0, r2
    5e94:	0040      	lsls	r0, r0, #1
    5e96:	4058      	eors	r0, r3
    5e98:	0053      	lsls	r3, r2, #1
    5e9a:	b280      	uxth	r0, r0
    5e9c:	b29b      	uxth	r3, r3
    5e9e:	0412      	lsls	r2, r2, #16
    5ea0:	d500      	bpl.n	5ea4 <bloomFilterAddressCheck+0x97c>
    5ea2:	e2ff      	b.n	64a4 <bloomFilterAddressCheck+0xf7c>
    5ea4:	b29a      	uxth	r2, r3
    5ea6:	4877      	ldr	r0, [pc, #476]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5ea8:	0052      	lsls	r2, r2, #1
    5eaa:	4050      	eors	r0, r2
    5eac:	005a      	lsls	r2, r3, #1
    5eae:	b280      	uxth	r0, r0
    5eb0:	b292      	uxth	r2, r2
    5eb2:	041b      	lsls	r3, r3, #16
    5eb4:	d500      	bpl.n	5eb8 <bloomFilterAddressCheck+0x990>
    5eb6:	e2f3      	b.n	64a0 <bloomFilterAddressCheck+0xf78>
    5eb8:	4051      	eors	r1, r2
    5eba:	b209      	sxth	r1, r1
    5ebc:	b28b      	uxth	r3, r1
    5ebe:	4a71      	ldr	r2, [pc, #452]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5ec0:	005b      	lsls	r3, r3, #1
    5ec2:	405a      	eors	r2, r3
    5ec4:	b292      	uxth	r2, r2
    5ec6:	2900      	cmp	r1, #0
    5ec8:	da00      	bge.n	5ecc <bloomFilterAddressCheck+0x9a4>
    5eca:	e2e7      	b.n	649c <bloomFilterAddressCheck+0xf74>
    5ecc:	4a6d      	ldr	r2, [pc, #436]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5ece:	b299      	uxth	r1, r3
    5ed0:	0049      	lsls	r1, r1, #1
    5ed2:	4051      	eors	r1, r2
    5ed4:	b289      	uxth	r1, r1
    5ed6:	005a      	lsls	r2, r3, #1
    5ed8:	041b      	lsls	r3, r3, #16
    5eda:	d500      	bpl.n	5ede <bloomFilterAddressCheck+0x9b6>
    5edc:	e2dc      	b.n	6498 <bloomFilterAddressCheck+0xf70>
    5ede:	b291      	uxth	r1, r2
    5ee0:	4b68      	ldr	r3, [pc, #416]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5ee2:	0049      	lsls	r1, r1, #1
    5ee4:	404b      	eors	r3, r1
    5ee6:	b29b      	uxth	r3, r3
    5ee8:	0051      	lsls	r1, r2, #1
    5eea:	0412      	lsls	r2, r2, #16
    5eec:	d500      	bpl.n	5ef0 <bloomFilterAddressCheck+0x9c8>
    5eee:	e2d1      	b.n	6494 <bloomFilterAddressCheck+0xf6c>
    5ef0:	b28a      	uxth	r2, r1
    5ef2:	4b64      	ldr	r3, [pc, #400]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5ef4:	0052      	lsls	r2, r2, #1
    5ef6:	4053      	eors	r3, r2
    5ef8:	b29b      	uxth	r3, r3
    5efa:	004a      	lsls	r2, r1, #1
    5efc:	0409      	lsls	r1, r1, #16
    5efe:	d500      	bpl.n	5f02 <bloomFilterAddressCheck+0x9da>
    5f00:	e2c6      	b.n	6490 <bloomFilterAddressCheck+0xf68>
    5f02:	b291      	uxth	r1, r2
    5f04:	4b5f      	ldr	r3, [pc, #380]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f06:	0049      	lsls	r1, r1, #1
    5f08:	404b      	eors	r3, r1
    5f0a:	b29b      	uxth	r3, r3
    5f0c:	0051      	lsls	r1, r2, #1
    5f0e:	0412      	lsls	r2, r2, #16
    5f10:	d500      	bpl.n	5f14 <bloomFilterAddressCheck+0x9ec>
    5f12:	e2bb      	b.n	648c <bloomFilterAddressCheck+0xf64>
    5f14:	b28a      	uxth	r2, r1
    5f16:	4b5b      	ldr	r3, [pc, #364]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f18:	0052      	lsls	r2, r2, #1
    5f1a:	4053      	eors	r3, r2
    5f1c:	b29b      	uxth	r3, r3
    5f1e:	004a      	lsls	r2, r1, #1
    5f20:	0409      	lsls	r1, r1, #16
    5f22:	d500      	bpl.n	5f26 <bloomFilterAddressCheck+0x9fe>
    5f24:	e2b0      	b.n	6488 <bloomFilterAddressCheck+0xf60>
    5f26:	b291      	uxth	r1, r2
    5f28:	4b56      	ldr	r3, [pc, #344]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f2a:	0049      	lsls	r1, r1, #1
    5f2c:	404b      	eors	r3, r1
    5f2e:	b29b      	uxth	r3, r3
    5f30:	0051      	lsls	r1, r2, #1
    5f32:	0412      	lsls	r2, r2, #16
    5f34:	d500      	bpl.n	5f38 <bloomFilterAddressCheck+0xa10>
    5f36:	e2a5      	b.n	6484 <bloomFilterAddressCheck+0xf5c>
    5f38:	b28a      	uxth	r2, r1
    5f3a:	4b52      	ldr	r3, [pc, #328]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f3c:	0052      	lsls	r2, r2, #1
    5f3e:	4053      	eors	r3, r2
    5f40:	b29b      	uxth	r3, r3
    5f42:	004a      	lsls	r2, r1, #1
    5f44:	0409      	lsls	r1, r1, #16
    5f46:	d500      	bpl.n	5f4a <bloomFilterAddressCheck+0xa22>
    5f48:	e29a      	b.n	6480 <bloomFilterAddressCheck+0xf58>
    5f4a:	465b      	mov	r3, fp
    5f4c:	4053      	eors	r3, r2
    5f4e:	b21a      	sxth	r2, r3
    5f50:	b293      	uxth	r3, r2
    5f52:	494c      	ldr	r1, [pc, #304]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f54:	005b      	lsls	r3, r3, #1
    5f56:	4059      	eors	r1, r3
    5f58:	b289      	uxth	r1, r1
    5f5a:	2a00      	cmp	r2, #0
    5f5c:	da00      	bge.n	5f60 <bloomFilterAddressCheck+0xa38>
    5f5e:	e28d      	b.n	647c <bloomFilterAddressCheck+0xf54>
    5f60:	b299      	uxth	r1, r3
    5f62:	4a48      	ldr	r2, [pc, #288]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f64:	0049      	lsls	r1, r1, #1
    5f66:	404a      	eors	r2, r1
    5f68:	b292      	uxth	r2, r2
    5f6a:	0059      	lsls	r1, r3, #1
    5f6c:	041b      	lsls	r3, r3, #16
    5f6e:	d500      	bpl.n	5f72 <bloomFilterAddressCheck+0xa4a>
    5f70:	e282      	b.n	6478 <bloomFilterAddressCheck+0xf50>
    5f72:	b28a      	uxth	r2, r1
    5f74:	4b43      	ldr	r3, [pc, #268]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f76:	0052      	lsls	r2, r2, #1
    5f78:	4053      	eors	r3, r2
    5f7a:	b29b      	uxth	r3, r3
    5f7c:	004a      	lsls	r2, r1, #1
    5f7e:	0409      	lsls	r1, r1, #16
    5f80:	d500      	bpl.n	5f84 <bloomFilterAddressCheck+0xa5c>
    5f82:	e277      	b.n	6474 <bloomFilterAddressCheck+0xf4c>
    5f84:	b291      	uxth	r1, r2
    5f86:	4b3f      	ldr	r3, [pc, #252]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f88:	0049      	lsls	r1, r1, #1
    5f8a:	404b      	eors	r3, r1
    5f8c:	b29b      	uxth	r3, r3
    5f8e:	0051      	lsls	r1, r2, #1
    5f90:	0412      	lsls	r2, r2, #16
    5f92:	d500      	bpl.n	5f96 <bloomFilterAddressCheck+0xa6e>
    5f94:	e26c      	b.n	6470 <bloomFilterAddressCheck+0xf48>
    5f96:	b28a      	uxth	r2, r1
    5f98:	4b3a      	ldr	r3, [pc, #232]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5f9a:	0052      	lsls	r2, r2, #1
    5f9c:	4053      	eors	r3, r2
    5f9e:	b29b      	uxth	r3, r3
    5fa0:	004a      	lsls	r2, r1, #1
    5fa2:	0409      	lsls	r1, r1, #16
    5fa4:	d500      	bpl.n	5fa8 <bloomFilterAddressCheck+0xa80>
    5fa6:	e261      	b.n	646c <bloomFilterAddressCheck+0xf44>
    5fa8:	b291      	uxth	r1, r2
    5faa:	4b36      	ldr	r3, [pc, #216]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5fac:	0049      	lsls	r1, r1, #1
    5fae:	404b      	eors	r3, r1
    5fb0:	b29b      	uxth	r3, r3
    5fb2:	0051      	lsls	r1, r2, #1
    5fb4:	0412      	lsls	r2, r2, #16
    5fb6:	d500      	bpl.n	5fba <bloomFilterAddressCheck+0xa92>
    5fb8:	e242      	b.n	6440 <bloomFilterAddressCheck+0xf18>
    5fba:	b28a      	uxth	r2, r1
    5fbc:	4b31      	ldr	r3, [pc, #196]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5fbe:	0052      	lsls	r2, r2, #1
    5fc0:	4053      	eors	r3, r2
    5fc2:	b29b      	uxth	r3, r3
    5fc4:	004a      	lsls	r2, r1, #1
    5fc6:	0409      	lsls	r1, r1, #16
    5fc8:	d500      	bpl.n	5fcc <bloomFilterAddressCheck+0xaa4>
    5fca:	e243      	b.n	6454 <bloomFilterAddressCheck+0xf2c>
    5fcc:	b291      	uxth	r1, r2
    5fce:	4b2d      	ldr	r3, [pc, #180]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5fd0:	0049      	lsls	r1, r1, #1
    5fd2:	404b      	eors	r3, r1
    5fd4:	b29b      	uxth	r3, r3
    5fd6:	0055      	lsls	r5, r2, #1
    5fd8:	0412      	lsls	r2, r2, #16
    5fda:	d500      	bpl.n	5fde <bloomFilterAddressCheck+0xab6>
    5fdc:	e244      	b.n	6468 <bloomFilterAddressCheck+0xf40>
    5fde:	9b01      	ldr	r3, [sp, #4]
    5fe0:	4a28      	ldr	r2, [pc, #160]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5fe2:	406b      	eors	r3, r5
    5fe4:	b21d      	sxth	r5, r3
    5fe6:	b2ab      	uxth	r3, r5
    5fe8:	005b      	lsls	r3, r3, #1
    5fea:	405a      	eors	r2, r3
    5fec:	b292      	uxth	r2, r2
    5fee:	2d00      	cmp	r5, #0
    5ff0:	da00      	bge.n	5ff4 <bloomFilterAddressCheck+0xacc>
    5ff2:	e2a7      	b.n	6544 <bloomFilterAddressCheck+0x101c>
    5ff4:	b299      	uxth	r1, r3
    5ff6:	4a23      	ldr	r2, [pc, #140]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    5ff8:	0049      	lsls	r1, r1, #1
    5ffa:	404a      	eors	r2, r1
    5ffc:	b292      	uxth	r2, r2
    5ffe:	0059      	lsls	r1, r3, #1
    6000:	041b      	lsls	r3, r3, #16
    6002:	d500      	bpl.n	6006 <bloomFilterAddressCheck+0xade>
    6004:	e29c      	b.n	6540 <bloomFilterAddressCheck+0x1018>
    6006:	b28a      	uxth	r2, r1
    6008:	4b1e      	ldr	r3, [pc, #120]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    600a:	0052      	lsls	r2, r2, #1
    600c:	4053      	eors	r3, r2
    600e:	b29b      	uxth	r3, r3
    6010:	004a      	lsls	r2, r1, #1
    6012:	0409      	lsls	r1, r1, #16
    6014:	d500      	bpl.n	6018 <bloomFilterAddressCheck+0xaf0>
    6016:	e291      	b.n	653c <bloomFilterAddressCheck+0x1014>
    6018:	b291      	uxth	r1, r2
    601a:	4b1a      	ldr	r3, [pc, #104]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    601c:	0049      	lsls	r1, r1, #1
    601e:	404b      	eors	r3, r1
    6020:	b29b      	uxth	r3, r3
    6022:	0051      	lsls	r1, r2, #1
    6024:	0412      	lsls	r2, r2, #16
    6026:	d500      	bpl.n	602a <bloomFilterAddressCheck+0xb02>
    6028:	e286      	b.n	6538 <bloomFilterAddressCheck+0x1010>
    602a:	b28a      	uxth	r2, r1
    602c:	4b15      	ldr	r3, [pc, #84]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    602e:	0052      	lsls	r2, r2, #1
    6030:	4053      	eors	r3, r2
    6032:	b29b      	uxth	r3, r3
    6034:	004a      	lsls	r2, r1, #1
    6036:	0409      	lsls	r1, r1, #16
    6038:	d500      	bpl.n	603c <bloomFilterAddressCheck+0xb14>
    603a:	e27b      	b.n	6534 <bloomFilterAddressCheck+0x100c>
    603c:	b291      	uxth	r1, r2
    603e:	4b11      	ldr	r3, [pc, #68]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    6040:	0049      	lsls	r1, r1, #1
    6042:	404b      	eors	r3, r1
    6044:	b29b      	uxth	r3, r3
    6046:	0051      	lsls	r1, r2, #1
    6048:	0412      	lsls	r2, r2, #16
    604a:	d500      	bpl.n	604e <bloomFilterAddressCheck+0xb26>
    604c:	e270      	b.n	6530 <bloomFilterAddressCheck+0x1008>
    604e:	b28a      	uxth	r2, r1
    6050:	4b0c      	ldr	r3, [pc, #48]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    6052:	0052      	lsls	r2, r2, #1
    6054:	4053      	eors	r3, r2
    6056:	b29b      	uxth	r3, r3
    6058:	004a      	lsls	r2, r1, #1
    605a:	0409      	lsls	r1, r1, #16
    605c:	d500      	bpl.n	6060 <bloomFilterAddressCheck+0xb38>
    605e:	e265      	b.n	652c <bloomFilterAddressCheck+0x1004>
    6060:	b291      	uxth	r1, r2
    6062:	4b08      	ldr	r3, [pc, #32]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    6064:	0049      	lsls	r1, r1, #1
    6066:	404b      	eors	r3, r1
    6068:	b29b      	uxth	r3, r3
    606a:	0055      	lsls	r5, r2, #1
    606c:	0412      	lsls	r2, r2, #16
    606e:	d500      	bpl.n	6072 <bloomFilterAddressCheck+0xb4a>
    6070:	e25a      	b.n	6528 <bloomFilterAddressCheck+0x1000>
    6072:	9b02      	ldr	r3, [sp, #8]
    6074:	4a03      	ldr	r2, [pc, #12]	; (6084 <bloomFilterAddressCheck+0xb5c>)
    6076:	406b      	eors	r3, r5
    6078:	b21d      	sxth	r5, r3
    607a:	b2ab      	uxth	r3, r5
    607c:	005b      	lsls	r3, r3, #1
    607e:	405a      	eors	r2, r3
    6080:	b292      	uxth	r2, r2
    6082:	e001      	b.n	6088 <bloomFilterAddressCheck+0xb60>
    6084:	ffff8005 	.word	0xffff8005
    6088:	2d00      	cmp	r5, #0
    608a:	da00      	bge.n	608e <bloomFilterAddressCheck+0xb66>
    608c:	e24a      	b.n	6524 <bloomFilterAddressCheck+0xffc>
    608e:	b299      	uxth	r1, r3
    6090:	4ae8      	ldr	r2, [pc, #928]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    6092:	0049      	lsls	r1, r1, #1
    6094:	404a      	eors	r2, r1
    6096:	b292      	uxth	r2, r2
    6098:	0059      	lsls	r1, r3, #1
    609a:	041b      	lsls	r3, r3, #16
    609c:	d500      	bpl.n	60a0 <bloomFilterAddressCheck+0xb78>
    609e:	e23f      	b.n	6520 <bloomFilterAddressCheck+0xff8>
    60a0:	b28a      	uxth	r2, r1
    60a2:	4be4      	ldr	r3, [pc, #912]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    60a4:	0052      	lsls	r2, r2, #1
    60a6:	4053      	eors	r3, r2
    60a8:	b29b      	uxth	r3, r3
    60aa:	004a      	lsls	r2, r1, #1
    60ac:	0409      	lsls	r1, r1, #16
    60ae:	d500      	bpl.n	60b2 <bloomFilterAddressCheck+0xb8a>
    60b0:	e234      	b.n	651c <bloomFilterAddressCheck+0xff4>
    60b2:	b291      	uxth	r1, r2
    60b4:	4bdf      	ldr	r3, [pc, #892]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    60b6:	0049      	lsls	r1, r1, #1
    60b8:	404b      	eors	r3, r1
    60ba:	b29b      	uxth	r3, r3
    60bc:	0051      	lsls	r1, r2, #1
    60be:	0412      	lsls	r2, r2, #16
    60c0:	d500      	bpl.n	60c4 <bloomFilterAddressCheck+0xb9c>
    60c2:	e229      	b.n	6518 <bloomFilterAddressCheck+0xff0>
    60c4:	b28a      	uxth	r2, r1
    60c6:	4bdb      	ldr	r3, [pc, #876]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    60c8:	0052      	lsls	r2, r2, #1
    60ca:	4053      	eors	r3, r2
    60cc:	b29b      	uxth	r3, r3
    60ce:	004a      	lsls	r2, r1, #1
    60d0:	0409      	lsls	r1, r1, #16
    60d2:	d500      	bpl.n	60d6 <bloomFilterAddressCheck+0xbae>
    60d4:	e21e      	b.n	6514 <bloomFilterAddressCheck+0xfec>
    60d6:	b291      	uxth	r1, r2
    60d8:	4bd6      	ldr	r3, [pc, #856]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    60da:	0049      	lsls	r1, r1, #1
    60dc:	404b      	eors	r3, r1
    60de:	b29b      	uxth	r3, r3
    60e0:	0051      	lsls	r1, r2, #1
    60e2:	0412      	lsls	r2, r2, #16
    60e4:	d500      	bpl.n	60e8 <bloomFilterAddressCheck+0xbc0>
    60e6:	e1ff      	b.n	64e8 <bloomFilterAddressCheck+0xfc0>
    60e8:	b28a      	uxth	r2, r1
    60ea:	4bd2      	ldr	r3, [pc, #840]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    60ec:	0052      	lsls	r2, r2, #1
    60ee:	4053      	eors	r3, r2
    60f0:	b29b      	uxth	r3, r3
    60f2:	0048      	lsls	r0, r1, #1
    60f4:	040a      	lsls	r2, r1, #16
    60f6:	d500      	bpl.n	60fa <bloomFilterAddressCheck+0xbd2>
    60f8:	e200      	b.n	64fc <bloomFilterAddressCheck+0xfd4>
    60fa:	b282      	uxth	r2, r0
    60fc:	4bcd      	ldr	r3, [pc, #820]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    60fe:	0052      	lsls	r2, r2, #1
    6100:	4053      	eors	r3, r2
    6102:	b29b      	uxth	r3, r3
    6104:	0042      	lsls	r2, r0, #1
    6106:	0401      	lsls	r1, r0, #16
    6108:	d500      	bpl.n	610c <bloomFilterAddressCheck+0xbe4>
    610a:	e201      	b.n	6510 <bloomFilterAddressCheck+0xfe8>
    610c:	4653      	mov	r3, sl
    610e:	4053      	eors	r3, r2
    6110:	b21a      	sxth	r2, r3
    6112:	b291      	uxth	r1, r2
    6114:	4bc7      	ldr	r3, [pc, #796]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    6116:	0049      	lsls	r1, r1, #1
    6118:	404b      	eors	r3, r1
    611a:	b298      	uxth	r0, r3
    611c:	b28b      	uxth	r3, r1
    611e:	2a00      	cmp	r2, #0
    6120:	da00      	bge.n	6124 <bloomFilterAddressCheck+0xbfc>
    6122:	e21b      	b.n	655c <bloomFilterAddressCheck+0x1034>
    6124:	4ac3      	ldr	r2, [pc, #780]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    6126:	b299      	uxth	r1, r3
    6128:	0049      	lsls	r1, r1, #1
    612a:	4051      	eors	r1, r2
    612c:	005a      	lsls	r2, r3, #1
    612e:	b289      	uxth	r1, r1
    6130:	b292      	uxth	r2, r2
    6132:	041b      	lsls	r3, r3, #16
    6134:	d500      	bpl.n	6138 <bloomFilterAddressCheck+0xc10>
    6136:	e20f      	b.n	6558 <bloomFilterAddressCheck+0x1030>
    6138:	4bbe      	ldr	r3, [pc, #760]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    613a:	b291      	uxth	r1, r2
    613c:	0049      	lsls	r1, r1, #1
    613e:	4059      	eors	r1, r3
    6140:	0053      	lsls	r3, r2, #1
    6142:	b289      	uxth	r1, r1
    6144:	b29b      	uxth	r3, r3
    6146:	0412      	lsls	r2, r2, #16
    6148:	d500      	bpl.n	614c <bloomFilterAddressCheck+0xc24>
    614a:	e203      	b.n	6554 <bloomFilterAddressCheck+0x102c>
    614c:	4ab9      	ldr	r2, [pc, #740]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    614e:	b299      	uxth	r1, r3
    6150:	0049      	lsls	r1, r1, #1
    6152:	4051      	eors	r1, r2
    6154:	005a      	lsls	r2, r3, #1
    6156:	b289      	uxth	r1, r1
    6158:	b292      	uxth	r2, r2
    615a:	041b      	lsls	r3, r3, #16
    615c:	d500      	bpl.n	6160 <bloomFilterAddressCheck+0xc38>
    615e:	e1f7      	b.n	6550 <bloomFilterAddressCheck+0x1028>
    6160:	4bb4      	ldr	r3, [pc, #720]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    6162:	b291      	uxth	r1, r2
    6164:	0049      	lsls	r1, r1, #1
    6166:	4059      	eors	r1, r3
    6168:	0053      	lsls	r3, r2, #1
    616a:	b289      	uxth	r1, r1
    616c:	b29b      	uxth	r3, r3
    616e:	0412      	lsls	r2, r2, #16
    6170:	d500      	bpl.n	6174 <bloomFilterAddressCheck+0xc4c>
    6172:	e1eb      	b.n	654c <bloomFilterAddressCheck+0x1024>
    6174:	4aaf      	ldr	r2, [pc, #700]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    6176:	b299      	uxth	r1, r3
    6178:	0049      	lsls	r1, r1, #1
    617a:	4051      	eors	r1, r2
    617c:	005a      	lsls	r2, r3, #1
    617e:	b289      	uxth	r1, r1
    6180:	b292      	uxth	r2, r2
    6182:	041b      	lsls	r3, r3, #16
    6184:	d500      	bpl.n	6188 <bloomFilterAddressCheck+0xc60>
    6186:	e1df      	b.n	6548 <bloomFilterAddressCheck+0x1020>
    6188:	b293      	uxth	r3, r2
    618a:	4caa      	ldr	r4, [pc, #680]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    618c:	005b      	lsls	r3, r3, #1
    618e:	405c      	eors	r4, r3
    6190:	b2a1      	uxth	r1, r4
    6192:	0054      	lsls	r4, r2, #1
    6194:	b2a4      	uxth	r4, r4
    6196:	0413      	lsls	r3, r2, #16
    6198:	d500      	bpl.n	619c <bloomFilterAddressCheck+0xc74>
    619a:	e149      	b.n	6430 <bloomFilterAddressCheck+0xf08>
    619c:	b223      	sxth	r3, r4
    619e:	b2a2      	uxth	r2, r4
    61a0:	469b      	mov	fp, r3
    61a2:	4ba4      	ldr	r3, [pc, #656]	; (6434 <bloomFilterAddressCheck+0xf0c>)
    61a4:	0052      	lsls	r2, r2, #1
    61a6:	4053      	eors	r3, r2
    61a8:	00f5      	lsls	r5, r6, #3
    61aa:	b29b      	uxth	r3, r3
    61ac:	0064      	lsls	r4, r4, #1
    61ae:	3d01      	subs	r5, #1
    61b0:	4698      	mov	r8, r3
    61b2:	b2a4      	uxth	r4, r4
    61b4:	b2ed      	uxtb	r5, r5
    61b6:	2f00      	cmp	r7, #0
    61b8:	da00      	bge.n	61bc <bloomFilterAddressCheck+0xc94>
    61ba:	e136      	b.n	642a <bloomFilterAddressCheck+0xf02>
    61bc:	4648      	mov	r0, r9
    61be:	4b9e      	ldr	r3, [pc, #632]	; (6438 <bloomFilterAddressCheck+0xf10>)
    61c0:	b280      	uxth	r0, r0
    61c2:	0029      	movs	r1, r5
    61c4:	469a      	mov	sl, r3
    61c6:	4798      	blx	r3
    61c8:	465b      	mov	r3, fp
    61ca:	4689      	mov	r9, r1
    61cc:	2b00      	cmp	r3, #0
    61ce:	da00      	bge.n	61d2 <bloomFilterAddressCheck+0xcaa>
    61d0:	e129      	b.n	6426 <bloomFilterAddressCheck+0xefe>
    61d2:	b2a0      	uxth	r0, r4
    61d4:	0029      	movs	r1, r5
    61d6:	47d0      	blx	sl
    61d8:	b2cb      	uxtb	r3, r1
    61da:	08db      	lsrs	r3, r3, #3
    61dc:	9f03      	ldr	r7, [sp, #12]
    61de:	3301      	adds	r3, #1
    61e0:	1af3      	subs	r3, r6, r3
    61e2:	466a      	mov	r2, sp
    61e4:	5cf8      	ldrb	r0, [r7, r3]
    61e6:	464b      	mov	r3, r9
    61e8:	7113      	strb	r3, [r2, #4]
    61ea:	7913      	ldrb	r3, [r2, #4]
    61ec:	2201      	movs	r2, #1
    61ee:	08db      	lsrs	r3, r3, #3
    61f0:	3301      	adds	r3, #1
    61f2:	1af6      	subs	r6, r6, r3
    61f4:	2407      	movs	r4, #7
    61f6:	464b      	mov	r3, r9
    61f8:	0015      	movs	r5, r2
    61fa:	4023      	ands	r3, r4
    61fc:	409d      	lsls	r5, r3
    61fe:	5dbb      	ldrb	r3, [r7, r6]
    6200:	421d      	tst	r5, r3
    6202:	d006      	beq.n	6212 <bloomFilterAddressCheck+0xcea>
    6204:	4021      	ands	r1, r4
    6206:	408a      	lsls	r2, r1
    6208:	4002      	ands	r2, r0
    620a:	1e50      	subs	r0, r2, #1
    620c:	4182      	sbcs	r2, r0
    620e:	b2d3      	uxtb	r3, r2
    6210:	9300      	str	r3, [sp, #0]
    6212:	9800      	ldr	r0, [sp, #0]
    6214:	b007      	add	sp, #28
    6216:	bc3c      	pop	{r2, r3, r4, r5}
    6218:	4690      	mov	r8, r2
    621a:	4699      	mov	r9, r3
    621c:	46a2      	mov	sl, r4
    621e:	46ab      	mov	fp, r5
    6220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6222:	1c1a      	adds	r2, r3, #0
    6224:	e4ef      	b.n	5c06 <bloomFilterAddressCheck+0x6de>
    6226:	1c08      	adds	r0, r1, #0
    6228:	f7ff f9a2 	bl	5570 <bloomFilterAddressCheck+0x48>
    622c:	1c0c      	adds	r4, r1, #0
    622e:	b2a0      	uxth	r0, r4
    6230:	4982      	ldr	r1, [pc, #520]	; (643c <bloomFilterAddressCheck+0xf14>)
    6232:	0040      	lsls	r0, r0, #1
    6234:	4041      	eors	r1, r0
    6236:	b289      	uxth	r1, r1
    6238:	0060      	lsls	r0, r4, #1
    623a:	0423      	lsls	r3, r4, #16
    623c:	d401      	bmi.n	6242 <bloomFilterAddressCheck+0xd1a>
    623e:	f7ff f9ac 	bl	559a <bloomFilterAddressCheck+0x72>
    6242:	1c08      	adds	r0, r1, #0
    6244:	b284      	uxth	r4, r0
    6246:	497d      	ldr	r1, [pc, #500]	; (643c <bloomFilterAddressCheck+0xf14>)
    6248:	0064      	lsls	r4, r4, #1
    624a:	4061      	eors	r1, r4
    624c:	b289      	uxth	r1, r1
    624e:	0044      	lsls	r4, r0, #1
    6250:	0403      	lsls	r3, r0, #16
    6252:	d401      	bmi.n	6258 <bloomFilterAddressCheck+0xd30>
    6254:	f7ff f9ab 	bl	55ae <bloomFilterAddressCheck+0x86>
    6258:	1c0c      	adds	r4, r1, #0
    625a:	b2a0      	uxth	r0, r4
    625c:	4977      	ldr	r1, [pc, #476]	; (643c <bloomFilterAddressCheck+0xf14>)
    625e:	0040      	lsls	r0, r0, #1
    6260:	4041      	eors	r1, r0
    6262:	b289      	uxth	r1, r1
    6264:	0060      	lsls	r0, r4, #1
    6266:	0423      	lsls	r3, r4, #16
    6268:	d401      	bmi.n	626e <bloomFilterAddressCheck+0xd46>
    626a:	f7ff f9aa 	bl	55c2 <bloomFilterAddressCheck+0x9a>
    626e:	1c08      	adds	r0, r1, #0
    6270:	b284      	uxth	r4, r0
    6272:	4972      	ldr	r1, [pc, #456]	; (643c <bloomFilterAddressCheck+0xf14>)
    6274:	0064      	lsls	r4, r4, #1
    6276:	4061      	eors	r1, r4
    6278:	b289      	uxth	r1, r1
    627a:	0044      	lsls	r4, r0, #1
    627c:	0403      	lsls	r3, r0, #16
    627e:	d401      	bmi.n	6284 <bloomFilterAddressCheck+0xd5c>
    6280:	f7ff f9a9 	bl	55d6 <bloomFilterAddressCheck+0xae>
    6284:	1c0c      	adds	r4, r1, #0
    6286:	b2a0      	uxth	r0, r4
    6288:	496c      	ldr	r1, [pc, #432]	; (643c <bloomFilterAddressCheck+0xf14>)
    628a:	0040      	lsls	r0, r0, #1
    628c:	4041      	eors	r1, r0
    628e:	b289      	uxth	r1, r1
    6290:	0060      	lsls	r0, r4, #1
    6292:	0423      	lsls	r3, r4, #16
    6294:	d401      	bmi.n	629a <bloomFilterAddressCheck+0xd72>
    6296:	f7ff f9a8 	bl	55ea <bloomFilterAddressCheck+0xc2>
    629a:	1c08      	adds	r0, r1, #0
    629c:	f7ff f9a5 	bl	55ea <bloomFilterAddressCheck+0xc2>
    62a0:	1c0d      	adds	r5, r1, #0
    62a2:	f7ff f9af 	bl	5604 <bloomFilterAddressCheck+0xdc>
    62a6:	1c01      	adds	r1, r0, #0
    62a8:	b28d      	uxth	r5, r1
    62aa:	4864      	ldr	r0, [pc, #400]	; (643c <bloomFilterAddressCheck+0xf14>)
    62ac:	006d      	lsls	r5, r5, #1
    62ae:	4045      	eors	r5, r0
    62b0:	b2ad      	uxth	r5, r5
    62b2:	0048      	lsls	r0, r1, #1
    62b4:	040b      	lsls	r3, r1, #16
    62b6:	d401      	bmi.n	62bc <bloomFilterAddressCheck+0xd94>
    62b8:	f7ff f9b9 	bl	562e <bloomFilterAddressCheck+0x106>
    62bc:	1c28      	adds	r0, r5, #0
    62be:	b285      	uxth	r5, r0
    62c0:	495e      	ldr	r1, [pc, #376]	; (643c <bloomFilterAddressCheck+0xf14>)
    62c2:	006d      	lsls	r5, r5, #1
    62c4:	4069      	eors	r1, r5
    62c6:	b289      	uxth	r1, r1
    62c8:	0045      	lsls	r5, r0, #1
    62ca:	0403      	lsls	r3, r0, #16
    62cc:	d401      	bmi.n	62d2 <bloomFilterAddressCheck+0xdaa>
    62ce:	f7ff f9b8 	bl	5642 <bloomFilterAddressCheck+0x11a>
    62d2:	1c0d      	adds	r5, r1, #0
    62d4:	b2a8      	uxth	r0, r5
    62d6:	4959      	ldr	r1, [pc, #356]	; (643c <bloomFilterAddressCheck+0xf14>)
    62d8:	0040      	lsls	r0, r0, #1
    62da:	4041      	eors	r1, r0
    62dc:	b289      	uxth	r1, r1
    62de:	0068      	lsls	r0, r5, #1
    62e0:	042b      	lsls	r3, r5, #16
    62e2:	d401      	bmi.n	62e8 <bloomFilterAddressCheck+0xdc0>
    62e4:	f7ff f9b7 	bl	5656 <bloomFilterAddressCheck+0x12e>
    62e8:	1c08      	adds	r0, r1, #0
    62ea:	b285      	uxth	r5, r0
    62ec:	4953      	ldr	r1, [pc, #332]	; (643c <bloomFilterAddressCheck+0xf14>)
    62ee:	006d      	lsls	r5, r5, #1
    62f0:	4069      	eors	r1, r5
    62f2:	b289      	uxth	r1, r1
    62f4:	0045      	lsls	r5, r0, #1
    62f6:	0403      	lsls	r3, r0, #16
    62f8:	d401      	bmi.n	62fe <bloomFilterAddressCheck+0xdd6>
    62fa:	f7ff f9b6 	bl	566a <bloomFilterAddressCheck+0x142>
    62fe:	1c0d      	adds	r5, r1, #0
    6300:	b2a8      	uxth	r0, r5
    6302:	494e      	ldr	r1, [pc, #312]	; (643c <bloomFilterAddressCheck+0xf14>)
    6304:	0040      	lsls	r0, r0, #1
    6306:	4041      	eors	r1, r0
    6308:	b289      	uxth	r1, r1
    630a:	0068      	lsls	r0, r5, #1
    630c:	042b      	lsls	r3, r5, #16
    630e:	d401      	bmi.n	6314 <bloomFilterAddressCheck+0xdec>
    6310:	f7ff f9b5 	bl	567e <bloomFilterAddressCheck+0x156>
    6314:	1c08      	adds	r0, r1, #0
    6316:	b285      	uxth	r5, r0
    6318:	4948      	ldr	r1, [pc, #288]	; (643c <bloomFilterAddressCheck+0xf14>)
    631a:	006d      	lsls	r5, r5, #1
    631c:	4069      	eors	r1, r5
    631e:	b289      	uxth	r1, r1
    6320:	0045      	lsls	r5, r0, #1
    6322:	0403      	lsls	r3, r0, #16
    6324:	d401      	bmi.n	632a <bloomFilterAddressCheck+0xe02>
    6326:	f7ff f9b4 	bl	5692 <bloomFilterAddressCheck+0x16a>
    632a:	1c0d      	adds	r5, r1, #0
    632c:	f7ff f9b1 	bl	5692 <bloomFilterAddressCheck+0x16a>
    6330:	4689      	mov	r9, r1
    6332:	f7ff f9bc 	bl	56ae <bloomFilterAddressCheck+0x186>
    6336:	4651      	mov	r1, sl
    6338:	f7ff f9c9 	bl	56ce <bloomFilterAddressCheck+0x1a6>
    633c:	464d      	mov	r5, r9
    633e:	f7ff f9d3 	bl	56e8 <bloomFilterAddressCheck+0x1c0>
    6342:	4689      	mov	r9, r1
    6344:	f7ff f9dd 	bl	5702 <bloomFilterAddressCheck+0x1da>
    6348:	1c0d      	adds	r5, r1, #0
    634a:	f7ff f9e9 	bl	5720 <bloomFilterAddressCheck+0x1f8>
    634e:	4689      	mov	r9, r1
    6350:	f7ff f9f3 	bl	573a <bloomFilterAddressCheck+0x212>
    6354:	1c0d      	adds	r5, r1, #0
    6356:	f7ff f9ff 	bl	5758 <bloomFilterAddressCheck+0x230>
    635a:	468a      	mov	sl, r1
    635c:	f7ff fa09 	bl	5772 <bloomFilterAddressCheck+0x24a>
    6360:	464d      	mov	r5, r9
    6362:	f7ff fa19 	bl	5798 <bloomFilterAddressCheck+0x270>
    6366:	4655      	mov	r5, sl
    6368:	f7ff fa26 	bl	57b8 <bloomFilterAddressCheck+0x290>
    636c:	46d1      	mov	r9, sl
    636e:	f7ff fa36 	bl	57de <bloomFilterAddressCheck+0x2b6>
    6372:	46aa      	mov	sl, r5
    6374:	f7ff fa43 	bl	57fe <bloomFilterAddressCheck+0x2d6>
    6378:	46a9      	mov	r9, r5
    637a:	f7ff fa50 	bl	581e <bloomFilterAddressCheck+0x2f6>
    637e:	46aa      	mov	sl, r5
    6380:	f7ff fa5d 	bl	583e <bloomFilterAddressCheck+0x316>
    6384:	46a9      	mov	r9, r5
    6386:	f7ff fa6a 	bl	585e <bloomFilterAddressCheck+0x336>
    638a:	46aa      	mov	sl, r5
    638c:	f7ff fa77 	bl	587e <bloomFilterAddressCheck+0x356>
    6390:	464d      	mov	r5, r9
    6392:	f7ff fa87 	bl	58a4 <bloomFilterAddressCheck+0x37c>
    6396:	4655      	mov	r5, sl
    6398:	f7ff fa99 	bl	58ce <bloomFilterAddressCheck+0x3a6>
    639c:	46d1      	mov	r9, sl
    639e:	f7ff faa7 	bl	58f0 <bloomFilterAddressCheck+0x3c8>
    63a2:	46aa      	mov	sl, r5
    63a4:	f7ff faba 	bl	591c <bloomFilterAddressCheck+0x3f4>
    63a8:	46a9      	mov	r9, r5
    63aa:	f7ff fac7 	bl	593c <bloomFilterAddressCheck+0x414>
    63ae:	46aa      	mov	sl, r5
    63b0:	f7ff fad4 	bl	595c <bloomFilterAddressCheck+0x434>
    63b4:	46a9      	mov	r9, r5
    63b6:	f7ff fae1 	bl	597c <bloomFilterAddressCheck+0x454>
    63ba:	46aa      	mov	sl, r5
    63bc:	f7ff faee 	bl	599c <bloomFilterAddressCheck+0x474>
    63c0:	464d      	mov	r5, r9
    63c2:	f7ff fafe 	bl	59c2 <bloomFilterAddressCheck+0x49a>
    63c6:	4655      	mov	r5, sl
    63c8:	f7ff fb10 	bl	59ec <bloomFilterAddressCheck+0x4c4>
    63cc:	46d1      	mov	r9, sl
    63ce:	f7ff fb1e 	bl	5a0e <bloomFilterAddressCheck+0x4e6>
    63d2:	46aa      	mov	sl, r5
    63d4:	f7ff fb2b 	bl	5a2e <bloomFilterAddressCheck+0x506>
    63d8:	46a9      	mov	r9, r5
    63da:	f7ff fb38 	bl	5a4e <bloomFilterAddressCheck+0x526>
    63de:	46aa      	mov	sl, r5
    63e0:	f7ff fb45 	bl	5a6e <bloomFilterAddressCheck+0x546>
    63e4:	46a9      	mov	r9, r5
    63e6:	f7ff fb52 	bl	5a8e <bloomFilterAddressCheck+0x566>
    63ea:	46aa      	mov	sl, r5
    63ec:	f7ff fb5f 	bl	5aae <bloomFilterAddressCheck+0x586>
    63f0:	464d      	mov	r5, r9
    63f2:	f7ff fb6f 	bl	5ad4 <bloomFilterAddressCheck+0x5ac>
    63f6:	4655      	mov	r5, sl
    63f8:	f7ff fb81 	bl	5afe <bloomFilterAddressCheck+0x5d6>
    63fc:	46ca      	mov	sl, r9
    63fe:	f7ff fb8f 	bl	5b20 <bloomFilterAddressCheck+0x5f8>
    6402:	46a9      	mov	r9, r5
    6404:	f7ff fb9c 	bl	5b40 <bloomFilterAddressCheck+0x618>
    6408:	46aa      	mov	sl, r5
    640a:	f7ff fba9 	bl	5b60 <bloomFilterAddressCheck+0x638>
    640e:	46a9      	mov	r9, r5
    6410:	f7ff fbb6 	bl	5b80 <bloomFilterAddressCheck+0x658>
    6414:	46aa      	mov	sl, r5
    6416:	f7ff fbc3 	bl	5ba0 <bloomFilterAddressCheck+0x678>
    641a:	46a9      	mov	r9, r5
    641c:	f7ff fbd0 	bl	5bc0 <bloomFilterAddressCheck+0x698>
    6420:	1c2a      	adds	r2, r5, #0
    6422:	f7ff fbdf 	bl	5be4 <bloomFilterAddressCheck+0x6bc>
    6426:	4644      	mov	r4, r8
    6428:	e6d3      	b.n	61d2 <bloomFilterAddressCheck+0xcaa>
    642a:	466b      	mov	r3, sp
    642c:	8a98      	ldrh	r0, [r3, #20]
    642e:	e6c6      	b.n	61be <bloomFilterAddressCheck+0xc96>
    6430:	1c0c      	adds	r4, r1, #0
    6432:	e6b3      	b.n	619c <bloomFilterAddressCheck+0xc74>
    6434:	ffff8005 	.word	0xffff8005
    6438:	000091a9 	.word	0x000091a9
    643c:	00001021 	.word	0x00001021
    6440:	1c19      	adds	r1, r3, #0
    6442:	b28a      	uxth	r2, r1
    6444:	4b52      	ldr	r3, [pc, #328]	; (6590 <bloomFilterAddressCheck+0x1068>)
    6446:	0052      	lsls	r2, r2, #1
    6448:	4053      	eors	r3, r2
    644a:	b29b      	uxth	r3, r3
    644c:	004a      	lsls	r2, r1, #1
    644e:	0409      	lsls	r1, r1, #16
    6450:	d400      	bmi.n	6454 <bloomFilterAddressCheck+0xf2c>
    6452:	e5bb      	b.n	5fcc <bloomFilterAddressCheck+0xaa4>
    6454:	1c1a      	adds	r2, r3, #0
    6456:	b291      	uxth	r1, r2
    6458:	4b4d      	ldr	r3, [pc, #308]	; (6590 <bloomFilterAddressCheck+0x1068>)
    645a:	0049      	lsls	r1, r1, #1
    645c:	404b      	eors	r3, r1
    645e:	b29b      	uxth	r3, r3
    6460:	0055      	lsls	r5, r2, #1
    6462:	0412      	lsls	r2, r2, #16
    6464:	d400      	bmi.n	6468 <bloomFilterAddressCheck+0xf40>
    6466:	e5ba      	b.n	5fde <bloomFilterAddressCheck+0xab6>
    6468:	1c1d      	adds	r5, r3, #0
    646a:	e5b8      	b.n	5fde <bloomFilterAddressCheck+0xab6>
    646c:	1c1a      	adds	r2, r3, #0
    646e:	e59b      	b.n	5fa8 <bloomFilterAddressCheck+0xa80>
    6470:	1c19      	adds	r1, r3, #0
    6472:	e590      	b.n	5f96 <bloomFilterAddressCheck+0xa6e>
    6474:	1c1a      	adds	r2, r3, #0
    6476:	e585      	b.n	5f84 <bloomFilterAddressCheck+0xa5c>
    6478:	1c11      	adds	r1, r2, #0
    647a:	e57a      	b.n	5f72 <bloomFilterAddressCheck+0xa4a>
    647c:	1c0b      	adds	r3, r1, #0
    647e:	e56f      	b.n	5f60 <bloomFilterAddressCheck+0xa38>
    6480:	1c1a      	adds	r2, r3, #0
    6482:	e562      	b.n	5f4a <bloomFilterAddressCheck+0xa22>
    6484:	1c19      	adds	r1, r3, #0
    6486:	e557      	b.n	5f38 <bloomFilterAddressCheck+0xa10>
    6488:	1c1a      	adds	r2, r3, #0
    648a:	e54c      	b.n	5f26 <bloomFilterAddressCheck+0x9fe>
    648c:	1c19      	adds	r1, r3, #0
    648e:	e541      	b.n	5f14 <bloomFilterAddressCheck+0x9ec>
    6490:	1c1a      	adds	r2, r3, #0
    6492:	e536      	b.n	5f02 <bloomFilterAddressCheck+0x9da>
    6494:	1c19      	adds	r1, r3, #0
    6496:	e52b      	b.n	5ef0 <bloomFilterAddressCheck+0x9c8>
    6498:	1c0a      	adds	r2, r1, #0
    649a:	e520      	b.n	5ede <bloomFilterAddressCheck+0x9b6>
    649c:	1c13      	adds	r3, r2, #0
    649e:	e515      	b.n	5ecc <bloomFilterAddressCheck+0x9a4>
    64a0:	1c02      	adds	r2, r0, #0
    64a2:	e509      	b.n	5eb8 <bloomFilterAddressCheck+0x990>
    64a4:	1c03      	adds	r3, r0, #0
    64a6:	e4fd      	b.n	5ea4 <bloomFilterAddressCheck+0x97c>
    64a8:	1c02      	adds	r2, r0, #0
    64aa:	e4f1      	b.n	5e90 <bloomFilterAddressCheck+0x968>
    64ac:	1c03      	adds	r3, r0, #0
    64ae:	e4e5      	b.n	5e7c <bloomFilterAddressCheck+0x954>
    64b0:	1c02      	adds	r2, r0, #0
    64b2:	e4d9      	b.n	5e68 <bloomFilterAddressCheck+0x940>
    64b4:	1c03      	adds	r3, r0, #0
    64b6:	e4cd      	b.n	5e54 <bloomFilterAddressCheck+0x92c>
    64b8:	1c02      	adds	r2, r0, #0
    64ba:	e4c1      	b.n	5e40 <bloomFilterAddressCheck+0x918>
    64bc:	1c23      	adds	r3, r4, #0
    64be:	e4b5      	b.n	5e2c <bloomFilterAddressCheck+0x904>
    64c0:	1c22      	adds	r2, r4, #0
    64c2:	e4a8      	b.n	5e16 <bloomFilterAddressCheck+0x8ee>
    64c4:	1c23      	adds	r3, r4, #0
    64c6:	e49c      	b.n	5e02 <bloomFilterAddressCheck+0x8da>
    64c8:	1c22      	adds	r2, r4, #0
    64ca:	e490      	b.n	5dee <bloomFilterAddressCheck+0x8c6>
    64cc:	1c23      	adds	r3, r4, #0
    64ce:	e484      	b.n	5dda <bloomFilterAddressCheck+0x8b2>
    64d0:	1c22      	adds	r2, r4, #0
    64d2:	e478      	b.n	5dc6 <bloomFilterAddressCheck+0x89e>
    64d4:	1c23      	adds	r3, r4, #0
    64d6:	e46c      	b.n	5db2 <bloomFilterAddressCheck+0x88a>
    64d8:	1c22      	adds	r2, r4, #0
    64da:	e460      	b.n	5d9e <bloomFilterAddressCheck+0x876>
    64dc:	1c2b      	adds	r3, r5, #0
    64de:	e454      	b.n	5d8a <bloomFilterAddressCheck+0x862>
    64e0:	1c2a      	adds	r2, r5, #0
    64e2:	e447      	b.n	5d74 <bloomFilterAddressCheck+0x84c>
    64e4:	1c2b      	adds	r3, r5, #0
    64e6:	e43b      	b.n	5d60 <bloomFilterAddressCheck+0x838>
    64e8:	1c19      	adds	r1, r3, #0
    64ea:	b28a      	uxth	r2, r1
    64ec:	4b28      	ldr	r3, [pc, #160]	; (6590 <bloomFilterAddressCheck+0x1068>)
    64ee:	0052      	lsls	r2, r2, #1
    64f0:	4053      	eors	r3, r2
    64f2:	b29b      	uxth	r3, r3
    64f4:	0048      	lsls	r0, r1, #1
    64f6:	040a      	lsls	r2, r1, #16
    64f8:	d400      	bmi.n	64fc <bloomFilterAddressCheck+0xfd4>
    64fa:	e5fe      	b.n	60fa <bloomFilterAddressCheck+0xbd2>
    64fc:	1c18      	adds	r0, r3, #0
    64fe:	b282      	uxth	r2, r0
    6500:	4b23      	ldr	r3, [pc, #140]	; (6590 <bloomFilterAddressCheck+0x1068>)
    6502:	0052      	lsls	r2, r2, #1
    6504:	4053      	eors	r3, r2
    6506:	b29b      	uxth	r3, r3
    6508:	0042      	lsls	r2, r0, #1
    650a:	0401      	lsls	r1, r0, #16
    650c:	d400      	bmi.n	6510 <bloomFilterAddressCheck+0xfe8>
    650e:	e5fd      	b.n	610c <bloomFilterAddressCheck+0xbe4>
    6510:	1c1a      	adds	r2, r3, #0
    6512:	e5fb      	b.n	610c <bloomFilterAddressCheck+0xbe4>
    6514:	1c1a      	adds	r2, r3, #0
    6516:	e5de      	b.n	60d6 <bloomFilterAddressCheck+0xbae>
    6518:	1c19      	adds	r1, r3, #0
    651a:	e5d3      	b.n	60c4 <bloomFilterAddressCheck+0xb9c>
    651c:	1c1a      	adds	r2, r3, #0
    651e:	e5c8      	b.n	60b2 <bloomFilterAddressCheck+0xb8a>
    6520:	1c11      	adds	r1, r2, #0
    6522:	e5bd      	b.n	60a0 <bloomFilterAddressCheck+0xb78>
    6524:	1c13      	adds	r3, r2, #0
    6526:	e5b2      	b.n	608e <bloomFilterAddressCheck+0xb66>
    6528:	1c1d      	adds	r5, r3, #0
    652a:	e5a2      	b.n	6072 <bloomFilterAddressCheck+0xb4a>
    652c:	1c1a      	adds	r2, r3, #0
    652e:	e597      	b.n	6060 <bloomFilterAddressCheck+0xb38>
    6530:	1c19      	adds	r1, r3, #0
    6532:	e58c      	b.n	604e <bloomFilterAddressCheck+0xb26>
    6534:	1c1a      	adds	r2, r3, #0
    6536:	e581      	b.n	603c <bloomFilterAddressCheck+0xb14>
    6538:	1c19      	adds	r1, r3, #0
    653a:	e576      	b.n	602a <bloomFilterAddressCheck+0xb02>
    653c:	1c1a      	adds	r2, r3, #0
    653e:	e56b      	b.n	6018 <bloomFilterAddressCheck+0xaf0>
    6540:	1c11      	adds	r1, r2, #0
    6542:	e560      	b.n	6006 <bloomFilterAddressCheck+0xade>
    6544:	1c13      	adds	r3, r2, #0
    6546:	e555      	b.n	5ff4 <bloomFilterAddressCheck+0xacc>
    6548:	1c0a      	adds	r2, r1, #0
    654a:	e61d      	b.n	6188 <bloomFilterAddressCheck+0xc60>
    654c:	1c0b      	adds	r3, r1, #0
    654e:	e611      	b.n	6174 <bloomFilterAddressCheck+0xc4c>
    6550:	1c0a      	adds	r2, r1, #0
    6552:	e605      	b.n	6160 <bloomFilterAddressCheck+0xc38>
    6554:	1c0b      	adds	r3, r1, #0
    6556:	e5f9      	b.n	614c <bloomFilterAddressCheck+0xc24>
    6558:	1c0a      	adds	r2, r1, #0
    655a:	e5ed      	b.n	6138 <bloomFilterAddressCheck+0xc10>
    655c:	1c03      	adds	r3, r0, #0
    655e:	e5e1      	b.n	6124 <bloomFilterAddressCheck+0xbfc>
    6560:	1c2a      	adds	r2, r5, #0
    6562:	f7ff fbf3 	bl	5d4c <bloomFilterAddressCheck+0x824>
    6566:	1c2b      	adds	r3, r5, #0
    6568:	f7ff fbe5 	bl	5d36 <bloomFilterAddressCheck+0x80e>
    656c:	1c2a      	adds	r2, r5, #0
    656e:	f7ff fbd7 	bl	5d20 <bloomFilterAddressCheck+0x7f8>
    6572:	1c2b      	adds	r3, r5, #0
    6574:	f7ff fbc9 	bl	5d0a <bloomFilterAddressCheck+0x7e2>
    6578:	1c2a      	adds	r2, r5, #0
    657a:	f7ff fbbb 	bl	5cf4 <bloomFilterAddressCheck+0x7cc>
    657e:	1c13      	adds	r3, r2, #0
    6580:	f7ff fbac 	bl	5cdc <bloomFilterAddressCheck+0x7b4>
    6584:	464a      	mov	r2, r9
    6586:	f7ff fb8e 	bl	5ca6 <bloomFilterAddressCheck+0x77e>
    658a:	1c2a      	adds	r2, r5, #0
    658c:	f7ff fb4a 	bl	5c24 <bloomFilterAddressCheck+0x6fc>
    6590:	ffff8005 	.word	0xffff8005

00006594 <handleCommissiongMessage>:
    6594:	b510      	push	{r4, lr}
    6596:	780b      	ldrb	r3, [r1, #0]
    6598:	2b21      	cmp	r3, #33	; 0x21
    659a:	d105      	bne.n	65a8 <handleCommissiongMessage+0x14>
    659c:	88c3      	ldrh	r3, [r0, #6]
    659e:	2b00      	cmp	r3, #0
    65a0:	d102      	bne.n	65a8 <handleCommissiongMessage+0x14>
    65a2:	784b      	ldrb	r3, [r1, #1]
    65a4:	2b08      	cmp	r3, #8
    65a6:	d000      	beq.n	65aa <handleCommissiongMessage+0x16>
    65a8:	bd10      	pop	{r4, pc}
    65aa:	3102      	adds	r1, #2
    65ac:	2208      	movs	r2, #8
    65ae:	4b02      	ldr	r3, [pc, #8]	; (65b8 <handleCommissiongMessage+0x24>)
    65b0:	4802      	ldr	r0, [pc, #8]	; (65bc <handleCommissiongMessage+0x28>)
    65b2:	4798      	blx	r3
    65b4:	e7f8      	b.n	65a8 <handleCommissiongMessage+0x14>
    65b6:	46c0      	nop			; (mov r8, r8)
    65b8:	0000926f 	.word	0x0000926f
    65bc:	20002cdc 	.word	0x20002cdc

000065c0 <MiApp_SubscribeDataIndicationCallback>:
    65c0:	2800      	cmp	r0, #0
    65c2:	d003      	beq.n	65cc <MiApp_SubscribeDataIndicationCallback+0xc>
    65c4:	4b02      	ldr	r3, [pc, #8]	; (65d0 <MiApp_SubscribeDataIndicationCallback+0x10>)
    65c6:	6018      	str	r0, [r3, #0]
    65c8:	2001      	movs	r0, #1
    65ca:	4770      	bx	lr
    65cc:	2000      	movs	r0, #0
    65ce:	e7fc      	b.n	65ca <MiApp_SubscribeDataIndicationCallback+0xa>
    65d0:	200003c4 	.word	0x200003c4

000065d4 <prepareGenericHeader>:
    65d4:	b510      	push	{r4, lr}
    65d6:	2403      	movs	r4, #3
    65d8:	7018      	strb	r0, [r3, #0]
    65da:	7858      	ldrb	r0, [r3, #1]
    65dc:	809a      	strh	r2, [r3, #4]
    65de:	43a0      	bics	r0, r4
    65e0:	2401      	movs	r4, #1
    65e2:	4304      	orrs	r4, r0
    65e4:	20f7      	movs	r0, #247	; 0xf7
    65e6:	4020      	ands	r0, r4
    65e8:	2404      	movs	r4, #4
    65ea:	4320      	orrs	r0, r4
    65ec:	2447      	movs	r4, #71	; 0x47
    65ee:	4020      	ands	r0, r4
    65f0:	7058      	strb	r0, [r3, #1]
    65f2:	4802      	ldr	r0, [pc, #8]	; (65fc <prepareGenericHeader+0x28>)
    65f4:	80d9      	strh	r1, [r3, #6]
    65f6:	8800      	ldrh	r0, [r0, #0]
    65f8:	8058      	strh	r0, [r3, #2]
    65fa:	bd10      	pop	{r4, pc}
    65fc:	20002c98 	.word	0x20002c98

00006600 <generalFrameConstruct>:
    6600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6602:	000c      	movs	r4, r1
    6604:	7802      	ldrb	r2, [r0, #0]
    6606:	0003      	movs	r3, r0
    6608:	700a      	strb	r2, [r1, #0]
    660a:	7842      	ldrb	r2, [r0, #1]
    660c:	704a      	strb	r2, [r1, #1]
    660e:	491d      	ldr	r1, [pc, #116]	; (6684 <generalFrameConstruct+0x84>)
    6610:	780a      	ldrb	r2, [r1, #0]
    6612:	3201      	adds	r2, #1
    6614:	b2d2      	uxtb	r2, r2
    6616:	70a2      	strb	r2, [r4, #2]
    6618:	700a      	strb	r2, [r1, #0]
    661a:	7842      	ldrb	r2, [r0, #1]
    661c:	0691      	lsls	r1, r2, #26
    661e:	d42b      	bmi.n	6678 <generalFrameConstruct+0x78>
    6620:	8842      	ldrh	r2, [r0, #2]
    6622:	2516      	movs	r5, #22
    6624:	70e2      	strb	r2, [r4, #3]
    6626:	8842      	ldrh	r2, [r0, #2]
    6628:	260e      	movs	r6, #14
    662a:	0a12      	lsrs	r2, r2, #8
    662c:	7122      	strb	r2, [r4, #4]
    662e:	8882      	ldrh	r2, [r0, #4]
    6630:	210a      	movs	r1, #10
    6632:	7162      	strb	r2, [r4, #5]
    6634:	8882      	ldrh	r2, [r0, #4]
    6636:	2709      	movs	r7, #9
    6638:	0a12      	lsrs	r2, r2, #8
    663a:	71a2      	strb	r2, [r4, #6]
    663c:	88c2      	ldrh	r2, [r0, #6]
    663e:	71e2      	strb	r2, [r4, #7]
    6640:	88c2      	ldrh	r2, [r0, #6]
    6642:	0a12      	lsrs	r2, r2, #8
    6644:	7222      	strb	r2, [r4, #8]
    6646:	7842      	ldrb	r2, [r0, #1]
    6648:	2009      	movs	r0, #9
    664a:	0752      	lsls	r2, r2, #29
    664c:	d513      	bpl.n	6676 <generalFrameConstruct+0x76>
    664e:	4a0e      	ldr	r2, [pc, #56]	; (6688 <generalFrameConstruct+0x88>)
    6650:	6810      	ldr	r0, [r2, #0]
    6652:	2220      	movs	r2, #32
    6654:	5c82      	ldrb	r2, [r0, r2]
    6656:	480d      	ldr	r0, [pc, #52]	; (668c <generalFrameConstruct+0x8c>)
    6658:	741a      	strb	r2, [r3, #16]
    665a:	6800      	ldr	r0, [r0, #0]
    665c:	3314      	adds	r3, #20
    665e:	6018      	str	r0, [r3, #0]
    6660:	55e2      	strb	r2, [r4, r7]
    6662:	1860      	adds	r0, r4, r1
    6664:	2204      	movs	r2, #4
    6666:	0019      	movs	r1, r3
    6668:	4f09      	ldr	r7, [pc, #36]	; (6690 <generalFrameConstruct+0x90>)
    666a:	47b8      	blx	r7
    666c:	19a0      	adds	r0, r4, r6
    666e:	2208      	movs	r2, #8
    6670:	4908      	ldr	r1, [pc, #32]	; (6694 <generalFrameConstruct+0x94>)
    6672:	47b8      	blx	r7
    6674:	0028      	movs	r0, r5
    6676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6678:	2510      	movs	r5, #16
    667a:	2608      	movs	r6, #8
    667c:	2104      	movs	r1, #4
    667e:	2703      	movs	r7, #3
    6680:	2003      	movs	r0, #3
    6682:	e7e2      	b.n	664a <generalFrameConstruct+0x4a>
    6684:	20002c80 	.word	0x20002c80
    6688:	20002c68 	.word	0x20002c68
    668c:	20002cf4 	.word	0x20002cf4
    6690:	0000926f 	.word	0x0000926f
    6694:	20000080 	.word	0x20000080

00006698 <frameTransmit>:
    6698:	b5f0      	push	{r4, r5, r6, r7, lr}
    669a:	4657      	mov	r7, sl
    669c:	464e      	mov	r6, r9
    669e:	46de      	mov	lr, fp
    66a0:	4645      	mov	r5, r8
    66a2:	b5e0      	push	{r5, r6, r7, lr}
    66a4:	b085      	sub	sp, #20
    66a6:	4699      	mov	r9, r3
    66a8:	ab0e      	add	r3, sp, #56	; 0x38
    66aa:	781e      	ldrb	r6, [r3, #0]
    66ac:	ab10      	add	r3, sp, #64	; 0x40
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	0007      	movs	r7, r0
    66b2:	469a      	mov	sl, r3
    66b4:	2028      	movs	r0, #40	; 0x28
    66b6:	4b45      	ldr	r3, [pc, #276]	; (67cc <frameTransmit+0x134>)
    66b8:	4688      	mov	r8, r1
    66ba:	9203      	str	r2, [sp, #12]
    66bc:	4798      	blx	r3
    66be:	1e04      	subs	r4, r0, #0
    66c0:	d100      	bne.n	66c4 <frameTransmit+0x2c>
    66c2:	e081      	b.n	67c8 <frameTransmit+0x130>
    66c4:	2300      	movs	r3, #0
    66c6:	7603      	strb	r3, [r0, #24]
    66c8:	787b      	ldrb	r3, [r7, #1]
    66ca:	075b      	lsls	r3, r3, #29
    66cc:	d45b      	bmi.n	6786 <frameTransmit+0xee>
    66ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    66d0:	781a      	ldrb	r2, [r3, #0]
    66d2:	785b      	ldrb	r3, [r3, #1]
    66d4:	2e02      	cmp	r6, #2
    66d6:	d06b      	beq.n	67b0 <frameTransmit+0x118>
    66d8:	2101      	movs	r1, #1
    66da:	2200      	movs	r2, #0
    66dc:	2020      	movs	r0, #32
    66de:	7e23      	ldrb	r3, [r4, #24]
    66e0:	0149      	lsls	r1, r1, #5
    66e2:	4383      	bics	r3, r0
    66e4:	430b      	orrs	r3, r1
    66e6:	2104      	movs	r1, #4
    66e8:	0092      	lsls	r2, r2, #2
    66ea:	438b      	bics	r3, r1
    66ec:	4313      	orrs	r3, r2
    66ee:	2208      	movs	r2, #8
    66f0:	4393      	bics	r3, r2
    66f2:	7623      	strb	r3, [r4, #24]
    66f4:	4b36      	ldr	r3, [pc, #216]	; (67d0 <frameTransmit+0x138>)
    66f6:	881a      	ldrh	r2, [r3, #0]
    66f8:	4b36      	ldr	r3, [pc, #216]	; (67d4 <frameTransmit+0x13c>)
    66fa:	429a      	cmp	r2, r3
    66fc:	d062      	beq.n	67c4 <frameTransmit+0x12c>
    66fe:	787a      	ldrb	r2, [r7, #1]
    6700:	2301      	movs	r3, #1
    6702:	4211      	tst	r1, r2
    6704:	d136      	bne.n	6774 <frameTransmit+0xdc>
    6706:	2221      	movs	r2, #33	; 0x21
    6708:	54a3      	strb	r3, [r4, r2]
    670a:	1eb3      	subs	r3, r6, #2
    670c:	425a      	negs	r2, r3
    670e:	4153      	adcs	r3, r2
    6710:	2220      	movs	r2, #32
    6712:	2101      	movs	r1, #1
    6714:	54a3      	strb	r3, [r4, r2]
    6716:	7e23      	ldrb	r3, [r4, #24]
    6718:	089a      	lsrs	r2, r3, #2
    671a:	4051      	eors	r1, r2
    671c:	2201      	movs	r2, #1
    671e:	400a      	ands	r2, r1
    6720:	2140      	movs	r1, #64	; 0x40
    6722:	0192      	lsls	r2, r2, #6
    6724:	438b      	bics	r3, r1
    6726:	4313      	orrs	r3, r2
    6728:	2280      	movs	r2, #128	; 0x80
    672a:	4252      	negs	r2, r2
    672c:	4313      	orrs	r3, r2
    672e:	7623      	strb	r3, [r4, #24]
    6730:	887b      	ldrh	r3, [r7, #2]
    6732:	0027      	movs	r7, r4
    6734:	8463      	strh	r3, [r4, #34]	; 0x22
    6736:	464b      	mov	r3, r9
    6738:	3708      	adds	r7, #8
    673a:	6163      	str	r3, [r4, #20]
    673c:	0032      	movs	r2, r6
    673e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6740:	4b25      	ldr	r3, [pc, #148]	; (67d8 <frameTransmit+0x140>)
    6742:	0038      	movs	r0, r7
    6744:	4798      	blx	r3
    6746:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6748:	4652      	mov	r2, sl
    674a:	6123      	str	r3, [r4, #16]
    674c:	2325      	movs	r3, #37	; 0x25
    674e:	61e7      	str	r7, [r4, #28]
    6750:	54e2      	strb	r2, [r4, r3]
    6752:	9b03      	ldr	r3, [sp, #12]
    6754:	4821      	ldr	r0, [pc, #132]	; (67dc <frameTransmit+0x144>)
    6756:	4443      	add	r3, r8
    6758:	001d      	movs	r5, r3
    675a:	2324      	movs	r3, #36	; 0x24
    675c:	0021      	movs	r1, r4
    675e:	54e5      	strb	r5, [r4, r3]
    6760:	4b1f      	ldr	r3, [pc, #124]	; (67e0 <frameTransmit+0x148>)
    6762:	4798      	blx	r3
    6764:	2001      	movs	r0, #1
    6766:	b005      	add	sp, #20
    6768:	bc3c      	pop	{r2, r3, r4, r5}
    676a:	4690      	mov	r8, r2
    676c:	4699      	mov	r9, r3
    676e:	46a2      	mov	sl, r4
    6770:	46ab      	mov	fp, r5
    6772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6774:	2100      	movs	r1, #0
    6776:	4a1b      	ldr	r2, [pc, #108]	; (67e4 <frameTransmit+0x14c>)
    6778:	7812      	ldrb	r2, [r2, #0]
    677a:	3a06      	subs	r2, #6
    677c:	b2d2      	uxtb	r2, r2
    677e:	4293      	cmp	r3, r2
    6780:	4149      	adcs	r1, r1
    6782:	b2cb      	uxtb	r3, r1
    6784:	e7bf      	b.n	6706 <frameTransmit+0x6e>
    6786:	4b18      	ldr	r3, [pc, #96]	; (67e8 <frameTransmit+0x150>)
    6788:	0030      	movs	r0, r6
    678a:	4798      	blx	r3
    678c:	464b      	mov	r3, r9
    678e:	9000      	str	r0, [sp, #0]
    6790:	9a03      	ldr	r2, [sp, #12]
    6792:	4641      	mov	r1, r8
    6794:	0038      	movs	r0, r7
    6796:	4d15      	ldr	r5, [pc, #84]	; (67ec <frameTransmit+0x154>)
    6798:	47a8      	blx	r5
    679a:	28ff      	cmp	r0, #255	; 0xff
    679c:	d014      	beq.n	67c8 <frameTransmit+0x130>
    679e:	9b03      	ldr	r3, [sp, #12]
    67a0:	181d      	adds	r5, r3, r0
    67a2:	b2eb      	uxtb	r3, r5
    67a4:	9303      	str	r3, [sp, #12]
    67a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    67a8:	781a      	ldrb	r2, [r3, #0]
    67aa:	785b      	ldrb	r3, [r3, #1]
    67ac:	2e02      	cmp	r6, #2
    67ae:	d193      	bne.n	66d8 <frameTransmit+0x40>
    67b0:	021b      	lsls	r3, r3, #8
    67b2:	189b      	adds	r3, r3, r2
    67b4:	4a07      	ldr	r2, [pc, #28]	; (67d4 <frameTransmit+0x13c>)
    67b6:	b29b      	uxth	r3, r3
    67b8:	4293      	cmp	r3, r2
    67ba:	d000      	beq.n	67be <frameTransmit+0x126>
    67bc:	e78c      	b.n	66d8 <frameTransmit+0x40>
    67be:	2100      	movs	r1, #0
    67c0:	2201      	movs	r2, #1
    67c2:	e78b      	b.n	66dc <frameTransmit+0x44>
    67c4:	2300      	movs	r3, #0
    67c6:	e79e      	b.n	6706 <frameTransmit+0x6e>
    67c8:	2000      	movs	r0, #0
    67ca:	e7cc      	b.n	6766 <frameTransmit+0xce>
    67cc:	0000339d 	.word	0x0000339d
    67d0:	20002cac 	.word	0x20002cac
    67d4:	0000ffff 	.word	0x0000ffff
    67d8:	0000926f 	.word	0x0000926f
    67dc:	20002ca0 	.word	0x20002ca0
    67e0:	00003509 	.word	0x00003509
    67e4:	200003ac 	.word	0x200003ac
    67e8:	00008ce5 	.word	0x00008ce5
    67ec:	00008d09 	.word	0x00008d09

000067f0 <sendDataFrame>:
    67f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    67f2:	464e      	mov	r6, r9
    67f4:	4657      	mov	r7, sl
    67f6:	4645      	mov	r5, r8
    67f8:	46de      	mov	lr, fp
    67fa:	b5e0      	push	{r5, r6, r7, lr}
    67fc:	b091      	sub	sp, #68	; 0x44
    67fe:	ab04      	add	r3, sp, #16
    6800:	469c      	mov	ip, r3
    6802:	270e      	movs	r7, #14
    6804:	4bc3      	ldr	r3, [pc, #780]	; (6b14 <sendDataFrame+0x324>)
    6806:	4467      	add	r7, ip
    6808:	4699      	mov	r9, r3
    680a:	881b      	ldrh	r3, [r3, #0]
    680c:	b28d      	uxth	r5, r1
    680e:	0006      	movs	r6, r0
    6810:	9202      	str	r2, [sp, #8]
    6812:	9703      	str	r7, [sp, #12]
    6814:	8039      	strh	r1, [r7, #0]
    6816:	42ab      	cmp	r3, r5
    6818:	d100      	bne.n	681c <sendDataFrame+0x2c>
    681a:	e119      	b.n	6a50 <sendDataFrame+0x260>
    681c:	2800      	cmp	r0, #0
    681e:	d100      	bne.n	6822 <sendDataFrame+0x32>
    6820:	e114      	b.n	6a4c <sendDataFrame+0x25c>
    6822:	2078      	movs	r0, #120	; 0x78
    6824:	4bbc      	ldr	r3, [pc, #752]	; (6b18 <sendDataFrame+0x328>)
    6826:	4798      	blx	r3
    6828:	4680      	mov	r8, r0
    682a:	2800      	cmp	r0, #0
    682c:	d100      	bne.n	6830 <sendDataFrame+0x40>
    682e:	e108      	b.n	6a42 <sendDataFrame+0x252>
    6830:	2108      	movs	r1, #8
    6832:	8bb2      	ldrh	r2, [r6, #28]
    6834:	ac08      	add	r4, sp, #32
    6836:	4694      	mov	ip, r2
    6838:	7862      	ldrb	r2, [r4, #1]
    683a:	8bf3      	ldrh	r3, [r6, #30]
    683c:	438a      	bics	r2, r1
    683e:	2104      	movs	r1, #4
    6840:	430a      	orrs	r2, r1
    6842:	49b6      	ldr	r1, [pc, #728]	; (6b1c <sendDataFrame+0x32c>)
    6844:	80e3      	strh	r3, [r4, #6]
    6846:	8809      	ldrh	r1, [r1, #0]
    6848:	7e73      	ldrb	r3, [r6, #25]
    684a:	8061      	strh	r1, [r4, #2]
    684c:	4661      	mov	r1, ip
    684e:	469c      	mov	ip, r3
    6850:	2303      	movs	r3, #3
    6852:	469a      	mov	sl, r3
    6854:	80a1      	strh	r1, [r4, #4]
    6856:	4663      	mov	r3, ip
    6858:	4651      	mov	r1, sl
    685a:	2720      	movs	r7, #32
    685c:	400b      	ands	r3, r1
    685e:	469b      	mov	fp, r3
    6860:	237f      	movs	r3, #127	; 0x7f
    6862:	b2d2      	uxtb	r2, r2
    6864:	43ba      	bics	r2, r7
    6866:	4013      	ands	r3, r2
    6868:	4652      	mov	r2, sl
    686a:	438b      	bics	r3, r1
    686c:	4661      	mov	r1, ip
    686e:	320d      	adds	r2, #13
    6870:	400a      	ands	r2, r1
    6872:	4659      	mov	r1, fp
    6874:	430b      	orrs	r3, r1
    6876:	2110      	movs	r1, #16
    6878:	438b      	bics	r3, r1
    687a:	431a      	orrs	r2, r3
    687c:	20ff      	movs	r0, #255	; 0xff
    687e:	4643      	mov	r3, r8
    6880:	7062      	strb	r2, [r4, #1]
    6882:	4642      	mov	r2, r8
    6884:	7020      	strb	r0, [r4, #0]
    6886:	7018      	strb	r0, [r3, #0]
    6888:	7863      	ldrb	r3, [r4, #1]
    688a:	7053      	strb	r3, [r2, #1]
    688c:	4ba4      	ldr	r3, [pc, #656]	; (6b20 <sendDataFrame+0x330>)
    688e:	469a      	mov	sl, r3
    6890:	4652      	mov	r2, sl
    6892:	781b      	ldrb	r3, [r3, #0]
    6894:	3301      	adds	r3, #1
    6896:	b2db      	uxtb	r3, r3
    6898:	7013      	strb	r3, [r2, #0]
    689a:	4642      	mov	r2, r8
    689c:	7093      	strb	r3, [r2, #2]
    689e:	7863      	ldrb	r3, [r4, #1]
    68a0:	421f      	tst	r7, r3
    68a2:	d100      	bne.n	68a6 <sendDataFrame+0xb6>
    68a4:	e08e      	b.n	69c4 <sendDataFrame+0x1d4>
    68a6:	2210      	movs	r2, #16
    68a8:	2103      	movs	r1, #3
    68aa:	0017      	movs	r7, r2
    68ac:	9206      	str	r2, [sp, #24]
    68ae:	3a08      	subs	r2, #8
    68b0:	4693      	mov	fp, r2
    68b2:	2003      	movs	r0, #3
    68b4:	3a04      	subs	r2, #4
    68b6:	9105      	str	r1, [sp, #20]
    68b8:	075b      	lsls	r3, r3, #29
    68ba:	d500      	bpl.n	68be <sendDataFrame+0xce>
    68bc:	e09e      	b.n	69fc <sendDataFrame+0x20c>
    68be:	4b99      	ldr	r3, [pc, #612]	; (6b24 <sendDataFrame+0x334>)
    68c0:	9304      	str	r3, [sp, #16]
    68c2:	7cf3      	ldrb	r3, [r6, #19]
    68c4:	2b00      	cmp	r3, #0
    68c6:	d100      	bne.n	68ca <sendDataFrame+0xda>
    68c8:	e0b6      	b.n	6a38 <sendDataFrame+0x248>
    68ca:	2320      	movs	r3, #32
    68cc:	4642      	mov	r2, r8
    68ce:	5cf3      	ldrb	r3, [r6, r3]
    68d0:	7093      	strb	r3, [r2, #2]
    68d2:	4653      	mov	r3, sl
    68d4:	4652      	mov	r2, sl
    68d6:	781b      	ldrb	r3, [r3, #0]
    68d8:	3b01      	subs	r3, #1
    68da:	7013      	strb	r3, [r2, #0]
    68dc:	2338      	movs	r3, #56	; 0x38
    68de:	0031      	movs	r1, r6
    68e0:	469a      	mov	sl, r3
    68e2:	5cf2      	ldrb	r2, [r6, r3]
    68e4:	4440      	add	r0, r8
    68e6:	9b04      	ldr	r3, [sp, #16]
    68e8:	3139      	adds	r1, #57	; 0x39
    68ea:	4798      	blx	r3
    68ec:	4653      	mov	r3, sl
    68ee:	5cf3      	ldrb	r3, [r6, r3]
    68f0:	469b      	mov	fp, r3
    68f2:	4b8d      	ldr	r3, [pc, #564]	; (6b28 <sendDataFrame+0x338>)
    68f4:	429d      	cmp	r5, r3
    68f6:	d100      	bne.n	68fa <sendDataFrame+0x10a>
    68f8:	e0d1      	b.n	6a9e <sendDataFrame+0x2ae>
    68fa:	7cb3      	ldrb	r3, [r6, #18]
    68fc:	2028      	movs	r0, #40	; 0x28
    68fe:	469a      	mov	sl, r3
    6900:	4b85      	ldr	r3, [pc, #532]	; (6b18 <sendDataFrame+0x328>)
    6902:	4798      	blx	r3
    6904:	1e05      	subs	r5, r0, #0
    6906:	d100      	bne.n	690a <sendDataFrame+0x11a>
    6908:	e09b      	b.n	6a42 <sendDataFrame+0x252>
    690a:	2300      	movs	r3, #0
    690c:	7603      	strb	r3, [r0, #24]
    690e:	7863      	ldrb	r3, [r4, #1]
    6910:	075b      	lsls	r3, r3, #29
    6912:	d500      	bpl.n	6916 <sendDataFrame+0x126>
    6914:	e0ae      	b.n	6a74 <sendDataFrame+0x284>
    6916:	9b03      	ldr	r3, [sp, #12]
    6918:	785a      	ldrb	r2, [r3, #1]
    691a:	781b      	ldrb	r3, [r3, #0]
    691c:	0212      	lsls	r2, r2, #8
    691e:	189b      	adds	r3, r3, r2
    6920:	4a81      	ldr	r2, [pc, #516]	; (6b28 <sendDataFrame+0x338>)
    6922:	b29b      	uxth	r3, r3
    6924:	4293      	cmp	r3, r2
    6926:	d100      	bne.n	692a <sendDataFrame+0x13a>
    6928:	e0b4      	b.n	6a94 <sendDataFrame+0x2a4>
    692a:	2201      	movs	r2, #1
    692c:	2100      	movs	r1, #0
    692e:	2020      	movs	r0, #32
    6930:	7e2b      	ldrb	r3, [r5, #24]
    6932:	0152      	lsls	r2, r2, #5
    6934:	4383      	bics	r3, r0
    6936:	4313      	orrs	r3, r2
    6938:	2204      	movs	r2, #4
    693a:	0089      	lsls	r1, r1, #2
    693c:	4393      	bics	r3, r2
    693e:	430b      	orrs	r3, r1
    6940:	2108      	movs	r1, #8
    6942:	438b      	bics	r3, r1
    6944:	762b      	strb	r3, [r5, #24]
    6946:	464b      	mov	r3, r9
    6948:	8819      	ldrh	r1, [r3, #0]
    694a:	4b77      	ldr	r3, [pc, #476]	; (6b28 <sendDataFrame+0x338>)
    694c:	4299      	cmp	r1, r3
    694e:	d100      	bne.n	6952 <sendDataFrame+0x162>
    6950:	e0a3      	b.n	6a9a <sendDataFrame+0x2aa>
    6952:	7861      	ldrb	r1, [r4, #1]
    6954:	2301      	movs	r3, #1
    6956:	420a      	tst	r2, r1
    6958:	d000      	beq.n	695c <sendDataFrame+0x16c>
    695a:	e082      	b.n	6a62 <sendDataFrame+0x272>
    695c:	2221      	movs	r2, #33	; 0x21
    695e:	54ab      	strb	r3, [r5, r2]
    6960:	2320      	movs	r3, #32
    6962:	2001      	movs	r0, #1
    6964:	3a20      	subs	r2, #32
    6966:	54ea      	strb	r2, [r5, r3]
    6968:	7e2b      	ldrb	r3, [r5, #24]
    696a:	0899      	lsrs	r1, r3, #2
    696c:	4041      	eors	r1, r0
    696e:	400a      	ands	r2, r1
    6970:	2140      	movs	r1, #64	; 0x40
    6972:	0192      	lsls	r2, r2, #6
    6974:	438b      	bics	r3, r1
    6976:	4313      	orrs	r3, r2
    6978:	2280      	movs	r2, #128	; 0x80
    697a:	4252      	negs	r2, r2
    697c:	4313      	orrs	r3, r2
    697e:	762b      	strb	r3, [r5, #24]
    6980:	8863      	ldrh	r3, [r4, #2]
    6982:	002c      	movs	r4, r5
    6984:	846b      	strh	r3, [r5, #34]	; 0x22
    6986:	4643      	mov	r3, r8
    6988:	3408      	adds	r4, #8
    698a:	616b      	str	r3, [r5, #20]
    698c:	3282      	adds	r2, #130	; 0x82
    698e:	9903      	ldr	r1, [sp, #12]
    6990:	9b04      	ldr	r3, [sp, #16]
    6992:	0020      	movs	r0, r4
    6994:	4798      	blx	r3
    6996:	9b02      	ldr	r3, [sp, #8]
    6998:	4652      	mov	r2, sl
    699a:	612b      	str	r3, [r5, #16]
    699c:	2325      	movs	r3, #37	; 0x25
    699e:	61ec      	str	r4, [r5, #28]
    69a0:	54ea      	strb	r2, [r5, r3]
    69a2:	9b05      	ldr	r3, [sp, #20]
    69a4:	0029      	movs	r1, r5
    69a6:	445b      	add	r3, fp
    69a8:	0018      	movs	r0, r3
    69aa:	2324      	movs	r3, #36	; 0x24
    69ac:	54e8      	strb	r0, [r5, r3]
    69ae:	485f      	ldr	r0, [pc, #380]	; (6b2c <sendDataFrame+0x33c>)
    69b0:	4b5f      	ldr	r3, [pc, #380]	; (6b30 <sendDataFrame+0x340>)
    69b2:	4798      	blx	r3
    69b4:	2001      	movs	r0, #1
    69b6:	b011      	add	sp, #68	; 0x44
    69b8:	bc3c      	pop	{r2, r3, r4, r5}
    69ba:	4690      	mov	r8, r2
    69bc:	4699      	mov	r9, r3
    69be:	46a2      	mov	sl, r4
    69c0:	46ab      	mov	fp, r5
    69c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69c4:	4641      	mov	r1, r8
    69c6:	8862      	ldrh	r2, [r4, #2]
    69c8:	38f6      	subs	r0, #246	; 0xf6
    69ca:	70ca      	strb	r2, [r1, #3]
    69cc:	8862      	ldrh	r2, [r4, #2]
    69ce:	0a12      	lsrs	r2, r2, #8
    69d0:	710a      	strb	r2, [r1, #4]
    69d2:	88a2      	ldrh	r2, [r4, #4]
    69d4:	714a      	strb	r2, [r1, #5]
    69d6:	88a2      	ldrh	r2, [r4, #4]
    69d8:	0a12      	lsrs	r2, r2, #8
    69da:	718a      	strb	r2, [r1, #6]
    69dc:	88e2      	ldrh	r2, [r4, #6]
    69de:	71ca      	strb	r2, [r1, #7]
    69e0:	88e2      	ldrh	r2, [r4, #6]
    69e2:	0a12      	lsrs	r2, r2, #8
    69e4:	720a      	strb	r2, [r1, #8]
    69e6:	2216      	movs	r2, #22
    69e8:	2109      	movs	r1, #9
    69ea:	0017      	movs	r7, r2
    69ec:	9206      	str	r2, [sp, #24]
    69ee:	3a08      	subs	r2, #8
    69f0:	4693      	mov	fp, r2
    69f2:	9105      	str	r1, [sp, #20]
    69f4:	3a04      	subs	r2, #4
    69f6:	075b      	lsls	r3, r3, #29
    69f8:	d400      	bmi.n	69fc <sendDataFrame+0x20c>
    69fa:	e760      	b.n	68be <sendDataFrame+0xce>
    69fc:	4b4d      	ldr	r3, [pc, #308]	; (6b34 <sendDataFrame+0x344>)
    69fe:	4442      	add	r2, r8
    6a00:	6819      	ldr	r1, [r3, #0]
    6a02:	2320      	movs	r3, #32
    6a04:	5ccb      	ldrb	r3, [r1, r3]
    6a06:	494c      	ldr	r1, [pc, #304]	; (6b38 <sendDataFrame+0x348>)
    6a08:	7423      	strb	r3, [r4, #16]
    6a0a:	6809      	ldr	r1, [r1, #0]
    6a0c:	6161      	str	r1, [r4, #20]
    6a0e:	4641      	mov	r1, r8
    6a10:	540b      	strb	r3, [r1, r0]
    6a12:	4b44      	ldr	r3, [pc, #272]	; (6b24 <sendDataFrame+0x334>)
    6a14:	0010      	movs	r0, r2
    6a16:	a90d      	add	r1, sp, #52	; 0x34
    6a18:	2204      	movs	r2, #4
    6a1a:	9304      	str	r3, [sp, #16]
    6a1c:	4798      	blx	r3
    6a1e:	4658      	mov	r0, fp
    6a20:	9b04      	ldr	r3, [sp, #16]
    6a22:	4440      	add	r0, r8
    6a24:	2208      	movs	r2, #8
    6a26:	4945      	ldr	r1, [pc, #276]	; (6b3c <sendDataFrame+0x34c>)
    6a28:	4798      	blx	r3
    6a2a:	9b06      	ldr	r3, [sp, #24]
    6a2c:	0038      	movs	r0, r7
    6a2e:	9305      	str	r3, [sp, #20]
    6a30:	7cf3      	ldrb	r3, [r6, #19]
    6a32:	2b00      	cmp	r3, #0
    6a34:	d000      	beq.n	6a38 <sendDataFrame+0x248>
    6a36:	e748      	b.n	68ca <sendDataFrame+0xda>
    6a38:	4643      	mov	r3, r8
    6a3a:	789a      	ldrb	r2, [r3, #2]
    6a3c:	2320      	movs	r3, #32
    6a3e:	54f2      	strb	r2, [r6, r3]
    6a40:	e74c      	b.n	68dc <sendDataFrame+0xec>
    6a42:	7cb0      	ldrb	r0, [r6, #18]
    6a44:	0032      	movs	r2, r6
    6a46:	2101      	movs	r1, #1
    6a48:	9b02      	ldr	r3, [sp, #8]
    6a4a:	4798      	blx	r3
    6a4c:	2000      	movs	r0, #0
    6a4e:	e7b2      	b.n	69b6 <sendDataFrame+0x1c6>
    6a50:	9b02      	ldr	r3, [sp, #8]
    6a52:	2b00      	cmp	r3, #0
    6a54:	d0fa      	beq.n	6a4c <sendDataFrame+0x25c>
    6a56:	7c80      	ldrb	r0, [r0, #18]
    6a58:	0032      	movs	r2, r6
    6a5a:	2101      	movs	r1, #1
    6a5c:	4798      	blx	r3
    6a5e:	2000      	movs	r0, #0
    6a60:	e7a9      	b.n	69b6 <sendDataFrame+0x1c6>
    6a62:	2100      	movs	r1, #0
    6a64:	4a36      	ldr	r2, [pc, #216]	; (6b40 <sendDataFrame+0x350>)
    6a66:	7812      	ldrb	r2, [r2, #0]
    6a68:	3a06      	subs	r2, #6
    6a6a:	b2d2      	uxtb	r2, r2
    6a6c:	4293      	cmp	r3, r2
    6a6e:	4149      	adcs	r1, r1
    6a70:	b2cb      	uxtb	r3, r1
    6a72:	e773      	b.n	695c <sendDataFrame+0x16c>
    6a74:	4b33      	ldr	r3, [pc, #204]	; (6b44 <sendDataFrame+0x354>)
    6a76:	2002      	movs	r0, #2
    6a78:	4798      	blx	r3
    6a7a:	4643      	mov	r3, r8
    6a7c:	9000      	str	r0, [sp, #0]
    6a7e:	465a      	mov	r2, fp
    6a80:	9905      	ldr	r1, [sp, #20]
    6a82:	0020      	movs	r0, r4
    6a84:	4f30      	ldr	r7, [pc, #192]	; (6b48 <sendDataFrame+0x358>)
    6a86:	47b8      	blx	r7
    6a88:	28ff      	cmp	r0, #255	; 0xff
    6a8a:	d0da      	beq.n	6a42 <sendDataFrame+0x252>
    6a8c:	4458      	add	r0, fp
    6a8e:	b2c3      	uxtb	r3, r0
    6a90:	469b      	mov	fp, r3
    6a92:	e740      	b.n	6916 <sendDataFrame+0x126>
    6a94:	2200      	movs	r2, #0
    6a96:	2101      	movs	r1, #1
    6a98:	e749      	b.n	692e <sendDataFrame+0x13e>
    6a9a:	2300      	movs	r3, #0
    6a9c:	e75e      	b.n	695c <sendDataFrame+0x16c>
    6a9e:	464b      	mov	r3, r9
    6aa0:	2228      	movs	r2, #40	; 0x28
    6aa2:	881b      	ldrh	r3, [r3, #0]
    6aa4:	b29b      	uxth	r3, r3
    6aa6:	001f      	movs	r7, r3
    6aa8:	4b28      	ldr	r3, [pc, #160]	; (6b4c <sendDataFrame+0x35c>)
    6aaa:	681b      	ldr	r3, [r3, #0]
    6aac:	5c9a      	ldrb	r2, [r3, r2]
    6aae:	2a00      	cmp	r2, #0
    6ab0:	d100      	bne.n	6ab4 <sendDataFrame+0x2c4>
    6ab2:	e722      	b.n	68fa <sendDataFrame+0x10a>
    6ab4:	6998      	ldr	r0, [r3, #24]
    6ab6:	8803      	ldrh	r3, [r0, #0]
    6ab8:	42ab      	cmp	r3, r5
    6aba:	d028      	beq.n	6b0e <sendDataFrame+0x31e>
    6abc:	3a01      	subs	r2, #1
    6abe:	b2d2      	uxtb	r2, r2
    6ac0:	3201      	adds	r2, #1
    6ac2:	0092      	lsls	r2, r2, #2
    6ac4:	1d03      	adds	r3, r0, #4
    6ac6:	1882      	adds	r2, r0, r2
    6ac8:	46ac      	mov	ip, r5
    6aca:	46b2      	mov	sl, r6
    6acc:	e006      	b.n	6adc <sendDataFrame+0x2ec>
    6ace:	1a1e      	subs	r6, r3, r0
    6ad0:	001d      	movs	r5, r3
    6ad2:	3304      	adds	r3, #4
    6ad4:	1f19      	subs	r1, r3, #4
    6ad6:	8809      	ldrh	r1, [r1, #0]
    6ad8:	4561      	cmp	r1, ip
    6ada:	d003      	beq.n	6ae4 <sendDataFrame+0x2f4>
    6adc:	429a      	cmp	r2, r3
    6ade:	d1f6      	bne.n	6ace <sendDataFrame+0x2de>
    6ae0:	4656      	mov	r6, sl
    6ae2:	e70a      	b.n	68fa <sendDataFrame+0x10a>
    6ae4:	4653      	mov	r3, sl
    6ae6:	46aa      	mov	sl, r5
    6ae8:	0035      	movs	r5, r6
    6aea:	001e      	movs	r6, r3
    6aec:	4652      	mov	r2, sl
    6aee:	4643      	mov	r3, r8
    6af0:	789b      	ldrb	r3, [r3, #2]
    6af2:	8017      	strh	r7, [r2, #0]
    6af4:	4a15      	ldr	r2, [pc, #84]	; (6b4c <sendDataFrame+0x35c>)
    6af6:	6812      	ldr	r2, [r2, #0]
    6af8:	6992      	ldr	r2, [r2, #24]
    6afa:	1952      	adds	r2, r2, r5
    6afc:	7093      	strb	r3, [r2, #2]
    6afe:	2229      	movs	r2, #41	; 0x29
    6b00:	4b12      	ldr	r3, [pc, #72]	; (6b4c <sendDataFrame+0x35c>)
    6b02:	681b      	ldr	r3, [r3, #0]
    6b04:	5c9a      	ldrb	r2, [r3, r2]
    6b06:	699b      	ldr	r3, [r3, #24]
    6b08:	195d      	adds	r5, r3, r5
    6b0a:	70ea      	strb	r2, [r5, #3]
    6b0c:	e6f5      	b.n	68fa <sendDataFrame+0x10a>
    6b0e:	4682      	mov	sl, r0
    6b10:	2500      	movs	r5, #0
    6b12:	e7eb      	b.n	6aec <sendDataFrame+0x2fc>
    6b14:	20002cac 	.word	0x20002cac
    6b18:	0000339d 	.word	0x0000339d
    6b1c:	20002c98 	.word	0x20002c98
    6b20:	20002c80 	.word	0x20002c80
    6b24:	0000926f 	.word	0x0000926f
    6b28:	0000ffff 	.word	0x0000ffff
    6b2c:	20002ca0 	.word	0x20002ca0
    6b30:	00003509 	.word	0x00003509
    6b34:	20002c68 	.word	0x20002c68
    6b38:	20002cf4 	.word	0x20002cf4
    6b3c:	20000080 	.word	0x20000080
    6b40:	200003ac 	.word	0x200003ac
    6b44:	00008ce5 	.word	0x00008ce5
    6b48:	00008d09 	.word	0x00008d09
    6b4c:	20002c64 	.word	0x20002c64

00006b50 <addRebroadcastTableEntry>:
    6b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b52:	46c6      	mov	lr, r8
    6b54:	2228      	movs	r2, #40	; 0x28
    6b56:	b500      	push	{lr}
    6b58:	4e17      	ldr	r6, [pc, #92]	; (6bb8 <addRebroadcastTableEntry+0x68>)
    6b5a:	4684      	mov	ip, r0
    6b5c:	6833      	ldr	r3, [r6, #0]
    6b5e:	4688      	mov	r8, r1
    6b60:	5c9a      	ldrb	r2, [r3, r2]
    6b62:	2a00      	cmp	r2, #0
    6b64:	d014      	beq.n	6b90 <addRebroadcastTableEntry+0x40>
    6b66:	699d      	ldr	r5, [r3, #24]
    6b68:	4f14      	ldr	r7, [pc, #80]	; (6bbc <addRebroadcastTableEntry+0x6c>)
    6b6a:	882b      	ldrh	r3, [r5, #0]
    6b6c:	42bb      	cmp	r3, r7
    6b6e:	d012      	beq.n	6b96 <addRebroadcastTableEntry+0x46>
    6b70:	3a01      	subs	r2, #1
    6b72:	b2d2      	uxtb	r2, r2
    6b74:	3201      	adds	r2, #1
    6b76:	0092      	lsls	r2, r2, #2
    6b78:	1d2b      	adds	r3, r5, #4
    6b7a:	18aa      	adds	r2, r5, r2
    6b7c:	e006      	b.n	6b8c <addRebroadcastTableEntry+0x3c>
    6b7e:	1b59      	subs	r1, r3, r5
    6b80:	0018      	movs	r0, r3
    6b82:	3304      	adds	r3, #4
    6b84:	1f1c      	subs	r4, r3, #4
    6b86:	8824      	ldrh	r4, [r4, #0]
    6b88:	42bc      	cmp	r4, r7
    6b8a:	d006      	beq.n	6b9a <addRebroadcastTableEntry+0x4a>
    6b8c:	4293      	cmp	r3, r2
    6b8e:	d1f6      	bne.n	6b7e <addRebroadcastTableEntry+0x2e>
    6b90:	bc04      	pop	{r2}
    6b92:	4690      	mov	r8, r2
    6b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b96:	0028      	movs	r0, r5
    6b98:	2100      	movs	r1, #0
    6b9a:	4663      	mov	r3, ip
    6b9c:	4642      	mov	r2, r8
    6b9e:	8003      	strh	r3, [r0, #0]
    6ba0:	6833      	ldr	r3, [r6, #0]
    6ba2:	699b      	ldr	r3, [r3, #24]
    6ba4:	185b      	adds	r3, r3, r1
    6ba6:	709a      	strb	r2, [r3, #2]
    6ba8:	2229      	movs	r2, #41	; 0x29
    6baa:	6833      	ldr	r3, [r6, #0]
    6bac:	5c9a      	ldrb	r2, [r3, r2]
    6bae:	699b      	ldr	r3, [r3, #24]
    6bb0:	185b      	adds	r3, r3, r1
    6bb2:	70da      	strb	r2, [r3, #3]
    6bb4:	e7ec      	b.n	6b90 <addRebroadcastTableEntry+0x40>
    6bb6:	46c0      	nop			; (mov r8, r8)
    6bb8:	20002c64 	.word	0x20002c64
    6bbc:	0000ffff 	.word	0x0000ffff

00006bc0 <initRebroadcastTable>:
    6bc0:	2328      	movs	r3, #40	; 0x28
    6bc2:	b530      	push	{r4, r5, lr}
    6bc4:	4809      	ldr	r0, [pc, #36]	; (6bec <initRebroadcastTable+0x2c>)
    6bc6:	6802      	ldr	r2, [r0, #0]
    6bc8:	5cd1      	ldrb	r1, [r2, r3]
    6bca:	2300      	movs	r3, #0
    6bcc:	2900      	cmp	r1, #0
    6bce:	d00b      	beq.n	6be8 <initRebroadcastTable+0x28>
    6bd0:	2501      	movs	r5, #1
    6bd2:	2428      	movs	r4, #40	; 0x28
    6bd4:	426d      	negs	r5, r5
    6bd6:	6992      	ldr	r2, [r2, #24]
    6bd8:	0099      	lsls	r1, r3, #2
    6bda:	528d      	strh	r5, [r1, r2]
    6bdc:	6802      	ldr	r2, [r0, #0]
    6bde:	3301      	adds	r3, #1
    6be0:	5d11      	ldrb	r1, [r2, r4]
    6be2:	b2db      	uxtb	r3, r3
    6be4:	4299      	cmp	r1, r3
    6be6:	d8f6      	bhi.n	6bd6 <initRebroadcastTable+0x16>
    6be8:	bd30      	pop	{r4, r5, pc}
    6bea:	46c0      	nop			; (mov r8, r8)
    6bec:	20002c64 	.word	0x20002c64

00006bf0 <rebroadcastTimerHandler>:
    6bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bf2:	46c6      	mov	lr, r8
    6bf4:	2328      	movs	r3, #40	; 0x28
    6bf6:	b500      	push	{lr}
    6bf8:	4e13      	ldr	r6, [pc, #76]	; (6c48 <rebroadcastTimerHandler+0x58>)
    6bfa:	6834      	ldr	r4, [r6, #0]
    6bfc:	5ce7      	ldrb	r7, [r4, r3]
    6bfe:	2300      	movs	r3, #0
    6c00:	2f00      	cmp	r7, #0
    6c02:	d01e      	beq.n	6c42 <rebroadcastTimerHandler+0x52>
    6c04:	2201      	movs	r2, #1
    6c06:	4252      	negs	r2, r2
    6c08:	4694      	mov	ip, r2
    6c0a:	3229      	adds	r2, #41	; 0x29
    6c0c:	4690      	mov	r8, r2
    6c0e:	4d0f      	ldr	r5, [pc, #60]	; (6c4c <rebroadcastTimerHandler+0x5c>)
    6c10:	69a2      	ldr	r2, [r4, #24]
    6c12:	0098      	lsls	r0, r3, #2
    6c14:	1812      	adds	r2, r2, r0
    6c16:	8811      	ldrh	r1, [r2, #0]
    6c18:	42a9      	cmp	r1, r5
    6c1a:	d00e      	beq.n	6c3a <rebroadcastTimerHandler+0x4a>
    6c1c:	78d1      	ldrb	r1, [r2, #3]
    6c1e:	2900      	cmp	r1, #0
    6c20:	d00b      	beq.n	6c3a <rebroadcastTimerHandler+0x4a>
    6c22:	3901      	subs	r1, #1
    6c24:	b2c9      	uxtb	r1, r1
    6c26:	70d1      	strb	r1, [r2, #3]
    6c28:	2900      	cmp	r1, #0
    6c2a:	d103      	bne.n	6c34 <rebroadcastTimerHandler+0x44>
    6c2c:	4661      	mov	r1, ip
    6c2e:	6832      	ldr	r2, [r6, #0]
    6c30:	6992      	ldr	r2, [r2, #24]
    6c32:	5211      	strh	r1, [r2, r0]
    6c34:	4642      	mov	r2, r8
    6c36:	6834      	ldr	r4, [r6, #0]
    6c38:	5ca7      	ldrb	r7, [r4, r2]
    6c3a:	3301      	adds	r3, #1
    6c3c:	b2db      	uxtb	r3, r3
    6c3e:	42bb      	cmp	r3, r7
    6c40:	d3e6      	bcc.n	6c10 <rebroadcastTimerHandler+0x20>
    6c42:	bc04      	pop	{r2}
    6c44:	4690      	mov	r8, r2
    6c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c48:	20002c64 	.word	0x20002c64
    6c4c:	0000ffff 	.word	0x0000ffff

00006c50 <handleDataMessage>:
    6c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c52:	46de      	mov	lr, fp
    6c54:	4657      	mov	r7, sl
    6c56:	464e      	mov	r6, r9
    6c58:	4645      	mov	r5, r8
    6c5a:	b5e0      	push	{r5, r6, r7, lr}
    6c5c:	780b      	ldrb	r3, [r1, #0]
    6c5e:	b083      	sub	sp, #12
    6c60:	0004      	movs	r4, r0
    6c62:	2b31      	cmp	r3, #49	; 0x31
    6c64:	d04d      	beq.n	6d02 <handleDataMessage+0xb2>
    6c66:	2b32      	cmp	r3, #50	; 0x32
    6c68:	d144      	bne.n	6cf4 <handleDataMessage+0xa4>
    6c6a:	4d61      	ldr	r5, [pc, #388]	; (6df0 <handleDataMessage+0x1a0>)
    6c6c:	7a2b      	ldrb	r3, [r5, #8]
    6c6e:	2b00      	cmp	r3, #0
    6c70:	d040      	beq.n	6cf4 <handleDataMessage+0xa4>
    6c72:	4a60      	ldr	r2, [pc, #384]	; (6df4 <handleDataMessage+0x1a4>)
    6c74:	4b60      	ldr	r3, [pc, #384]	; (6df8 <handleDataMessage+0x1a8>)
    6c76:	4691      	mov	r9, r2
    6c78:	4a60      	ldr	r2, [pc, #384]	; (6dfc <handleDataMessage+0x1ac>)
    6c7a:	2600      	movs	r6, #0
    6c7c:	4693      	mov	fp, r2
    6c7e:	4a60      	ldr	r2, [pc, #384]	; (6e00 <handleDataMessage+0x1b0>)
    6c80:	4698      	mov	r8, r3
    6c82:	4692      	mov	sl, r2
    6c84:	e007      	b.n	6c96 <handleDataMessage+0x46>
    6c86:	0039      	movs	r1, r7
    6c88:	0028      	movs	r0, r5
    6c8a:	47c8      	blx	r9
    6c8c:	3601      	adds	r6, #1
    6c8e:	7a2b      	ldrb	r3, [r5, #8]
    6c90:	b2f6      	uxtb	r6, r6
    6c92:	42b3      	cmp	r3, r6
    6c94:	d92e      	bls.n	6cf4 <handleDataMessage+0xa4>
    6c96:	2100      	movs	r1, #0
    6c98:	0028      	movs	r0, r5
    6c9a:	47c0      	blx	r8
    6c9c:	1e07      	subs	r7, r0, #0
    6c9e:	d029      	beq.n	6cf4 <handleDataMessage+0xa4>
    6ca0:	2320      	movs	r3, #32
    6ca2:	7a22      	ldrb	r2, [r4, #8]
    6ca4:	5cc3      	ldrb	r3, [r0, r3]
    6ca6:	429a      	cmp	r2, r3
    6ca8:	d1ed      	bne.n	6c86 <handleDataMessage+0x36>
    6caa:	88e2      	ldrh	r2, [r4, #6]
    6cac:	8b83      	ldrh	r3, [r0, #28]
    6cae:	429a      	cmp	r2, r3
    6cb0:	d1e9      	bne.n	6c86 <handleDataMessage+0x36>
    6cb2:	6883      	ldr	r3, [r0, #8]
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d003      	beq.n	6cc0 <handleDataMessage+0x70>
    6cb8:	7c80      	ldrb	r0, [r0, #18]
    6cba:	003a      	movs	r2, r7
    6cbc:	2100      	movs	r1, #0
    6cbe:	4798      	blx	r3
    6cc0:	0038      	movs	r0, r7
    6cc2:	47d8      	blx	fp
    6cc4:	22ff      	movs	r2, #255	; 0xff
    6cc6:	8bbb      	ldrh	r3, [r7, #28]
    6cc8:	4393      	bics	r3, r2
    6cca:	4652      	mov	r2, sl
    6ccc:	8812      	ldrh	r2, [r2, #0]
    6cce:	4293      	cmp	r3, r2
    6cd0:	d0dc      	beq.n	6c8c <handleDataMessage+0x3c>
    6cd2:	4a4c      	ldr	r2, [pc, #304]	; (6e04 <handleDataMessage+0x1b4>)
    6cd4:	0a1b      	lsrs	r3, r3, #8
    6cd6:	6812      	ldr	r2, [r2, #0]
    6cd8:	005b      	lsls	r3, r3, #1
    6cda:	6912      	ldr	r2, [r2, #16]
    6cdc:	3601      	adds	r6, #1
    6cde:	18d3      	adds	r3, r2, r3
    6ce0:	220f      	movs	r2, #15
    6ce2:	7859      	ldrb	r1, [r3, #1]
    6ce4:	b2f6      	uxtb	r6, r6
    6ce6:	400a      	ands	r2, r1
    6ce8:	2130      	movs	r1, #48	; 0x30
    6cea:	430a      	orrs	r2, r1
    6cec:	705a      	strb	r2, [r3, #1]
    6cee:	7a2b      	ldrb	r3, [r5, #8]
    6cf0:	42b3      	cmp	r3, r6
    6cf2:	d8d0      	bhi.n	6c96 <handleDataMessage+0x46>
    6cf4:	b003      	add	sp, #12
    6cf6:	bc3c      	pop	{r2, r3, r4, r5}
    6cf8:	4690      	mov	r8, r2
    6cfa:	4699      	mov	r9, r3
    6cfc:	46a2      	mov	sl, r4
    6cfe:	46ab      	mov	fp, r5
    6d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d02:	7983      	ldrb	r3, [r0, #6]
    6d04:	009d      	lsls	r5, r3, #2
    6d06:	18ed      	adds	r5, r5, r3
    6d08:	4b3e      	ldr	r3, [pc, #248]	; (6e04 <handleDataMessage+0x1b4>)
    6d0a:	00ad      	lsls	r5, r5, #2
    6d0c:	4699      	mov	r9, r3
    6d0e:	681b      	ldr	r3, [r3, #0]
    6d10:	68d8      	ldr	r0, [r3, #12]
    6d12:	4b3d      	ldr	r3, [pc, #244]	; (6e08 <handleDataMessage+0x1b8>)
    6d14:	1940      	adds	r0, r0, r5
    6d16:	4798      	blx	r3
    6d18:	2800      	cmp	r0, #0
    6d1a:	d065      	beq.n	6de8 <handleDataMessage+0x198>
    6d1c:	464b      	mov	r3, r9
    6d1e:	681b      	ldr	r3, [r3, #0]
    6d20:	68db      	ldr	r3, [r3, #12]
    6d22:	195d      	adds	r5, r3, r5
    6d24:	68ab      	ldr	r3, [r5, #8]
    6d26:	60eb      	str	r3, [r5, #12]
    6d28:	4d38      	ldr	r5, [pc, #224]	; (6e0c <handleDataMessage+0x1bc>)
    6d2a:	7a2b      	ldrb	r3, [r5, #8]
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	d0e1      	beq.n	6cf4 <handleDataMessage+0xa4>
    6d30:	21ff      	movs	r1, #255	; 0xff
    6d32:	4b33      	ldr	r3, [pc, #204]	; (6e00 <handleDataMessage+0x1b0>)
    6d34:	881a      	ldrh	r2, [r3, #0]
    6d36:	88e3      	ldrh	r3, [r4, #6]
    6d38:	438b      	bics	r3, r1
    6d3a:	429a      	cmp	r2, r3
    6d3c:	d1da      	bne.n	6cf4 <handleDataMessage+0xa4>
    6d3e:	4b2e      	ldr	r3, [pc, #184]	; (6df8 <handleDataMessage+0x1a8>)
    6d40:	2700      	movs	r7, #0
    6d42:	9301      	str	r3, [sp, #4]
    6d44:	4b2b      	ldr	r3, [pc, #172]	; (6df4 <handleDataMessage+0x1a4>)
    6d46:	469a      	mov	sl, r3
    6d48:	4b31      	ldr	r3, [pc, #196]	; (6e10 <handleDataMessage+0x1c0>)
    6d4a:	46d0      	mov	r8, sl
    6d4c:	469b      	mov	fp, r3
    6d4e:	e00a      	b.n	6d66 <handleDataMessage+0x116>
    6d50:	4a30      	ldr	r2, [pc, #192]	; (6e14 <handleDataMessage+0x1c4>)
    6d52:	4293      	cmp	r3, r2
    6d54:	d02a      	beq.n	6dac <handleDataMessage+0x15c>
    6d56:	0001      	movs	r1, r0
    6d58:	0028      	movs	r0, r5
    6d5a:	47d0      	blx	sl
    6d5c:	3701      	adds	r7, #1
    6d5e:	7a2b      	ldrb	r3, [r5, #8]
    6d60:	b2ff      	uxtb	r7, r7
    6d62:	42bb      	cmp	r3, r7
    6d64:	d9c6      	bls.n	6cf4 <handleDataMessage+0xa4>
    6d66:	2100      	movs	r1, #0
    6d68:	0028      	movs	r0, r5
    6d6a:	9b01      	ldr	r3, [sp, #4]
    6d6c:	4798      	blx	r3
    6d6e:	1e06      	subs	r6, r0, #0
    6d70:	d0c0      	beq.n	6cf4 <handleDataMessage+0xa4>
    6d72:	8b83      	ldrh	r3, [r0, #28]
    6d74:	88e2      	ldrh	r2, [r4, #6]
    6d76:	429a      	cmp	r2, r3
    6d78:	d1ea      	bne.n	6d50 <handleDataMessage+0x100>
    6d7a:	2310      	movs	r3, #16
    6d7c:	7e42      	ldrb	r2, [r0, #25]
    6d7e:	4013      	ands	r3, r2
    6d80:	d025      	beq.n	6dce <handleDataMessage+0x17e>
    6d82:	464b      	mov	r3, r9
    6d84:	681a      	ldr	r2, [r3, #0]
    6d86:	2337      	movs	r3, #55	; 0x37
    6d88:	5cd3      	ldrb	r3, [r2, r3]
    6d8a:	0001      	movs	r1, r0
    6d8c:	3301      	adds	r3, #1
    6d8e:	7403      	strb	r3, [r0, #16]
    6d90:	2338      	movs	r3, #56	; 0x38
    6d92:	5cd3      	ldrb	r3, [r2, r3]
    6d94:	7443      	strb	r3, [r0, #17]
    6d96:	2300      	movs	r3, #0
    6d98:	6083      	str	r3, [r0, #8]
    6d9a:	4815      	ldr	r0, [pc, #84]	; (6df0 <handleDataMessage+0x1a0>)
    6d9c:	4b15      	ldr	r3, [pc, #84]	; (6df4 <handleDataMessage+0x1a4>)
    6d9e:	4798      	blx	r3
    6da0:	8bb1      	ldrh	r1, [r6, #28]
    6da2:	4a1d      	ldr	r2, [pc, #116]	; (6e18 <handleDataMessage+0x1c8>)
    6da4:	0030      	movs	r0, r6
    6da6:	4b1d      	ldr	r3, [pc, #116]	; (6e1c <handleDataMessage+0x1cc>)
    6da8:	4798      	blx	r3
    6daa:	e7d7      	b.n	6d5c <handleDataMessage+0x10c>
    6dac:	2300      	movs	r3, #0
    6dae:	2201      	movs	r2, #1
    6db0:	7443      	strb	r3, [r0, #17]
    6db2:	7502      	strb	r2, [r0, #20]
    6db4:	6083      	str	r3, [r0, #8]
    6db6:	0001      	movs	r1, r0
    6db8:	4658      	mov	r0, fp
    6dba:	47c0      	blx	r8
    6dbc:	88e1      	ldrh	r1, [r4, #6]
    6dbe:	4a18      	ldr	r2, [pc, #96]	; (6e20 <handleDataMessage+0x1d0>)
    6dc0:	0030      	movs	r0, r6
    6dc2:	4b16      	ldr	r3, [pc, #88]	; (6e1c <handleDataMessage+0x1cc>)
    6dc4:	4798      	blx	r3
    6dc6:	0031      	movs	r1, r6
    6dc8:	0028      	movs	r0, r5
    6dca:	47c0      	blx	r8
    6dcc:	e7c6      	b.n	6d5c <handleDataMessage+0x10c>
    6dce:	7443      	strb	r3, [r0, #17]
    6dd0:	7503      	strb	r3, [r0, #20]
    6dd2:	6083      	str	r3, [r0, #8]
    6dd4:	0001      	movs	r1, r0
    6dd6:	4b07      	ldr	r3, [pc, #28]	; (6df4 <handleDataMessage+0x1a4>)
    6dd8:	480d      	ldr	r0, [pc, #52]	; (6e10 <handleDataMessage+0x1c0>)
    6dda:	4798      	blx	r3
    6ddc:	8bb1      	ldrh	r1, [r6, #28]
    6dde:	4a10      	ldr	r2, [pc, #64]	; (6e20 <handleDataMessage+0x1d0>)
    6de0:	0030      	movs	r0, r6
    6de2:	4b0e      	ldr	r3, [pc, #56]	; (6e1c <handleDataMessage+0x1cc>)
    6de4:	4798      	blx	r3
    6de6:	e7b9      	b.n	6d5c <handleDataMessage+0x10c>
    6de8:	88e0      	ldrh	r0, [r4, #6]
    6dea:	4b0e      	ldr	r3, [pc, #56]	; (6e24 <handleDataMessage+0x1d4>)
    6dec:	4798      	blx	r3
    6dee:	e781      	b.n	6cf4 <handleDataMessage+0xa4>
    6df0:	20002c6c 	.word	0x20002c6c
    6df4:	00003509 	.word	0x00003509
    6df8:	00003541 	.word	0x00003541
    6dfc:	000033ed 	.word	0x000033ed
    6e00:	20002cac 	.word	0x20002cac
    6e04:	20002c64 	.word	0x20002c64
    6e08:	000082f9 	.word	0x000082f9
    6e0c:	20002c58 	.word	0x20002c58
    6e10:	20002c4c 	.word	0x20002c4c
    6e14:	0000ffff 	.word	0x0000ffff
    6e18:	00004f79 	.word	0x00004f79
    6e1c:	000067f1 	.word	0x000067f1
    6e20:	00004de1 	.word	0x00004de1
    6e24:	00008291 	.word	0x00008291

00006e28 <frameParse>:
    6e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e2a:	464e      	mov	r6, r9
    6e2c:	4645      	mov	r5, r8
    6e2e:	46de      	mov	lr, fp
    6e30:	4657      	mov	r7, sl
    6e32:	b5e0      	push	{r5, r6, r7, lr}
    6e34:	6885      	ldr	r5, [r0, #8]
    6e36:	b09f      	sub	sp, #124	; 0x7c
    6e38:	782b      	ldrb	r3, [r5, #0]
    6e3a:	ac0e      	add	r4, sp, #56	; 0x38
    6e3c:	7023      	strb	r3, [r4, #0]
    6e3e:	786b      	ldrb	r3, [r5, #1]
    6e40:	0006      	movs	r6, r0
    6e42:	7063      	strb	r3, [r4, #1]
    6e44:	78ab      	ldrb	r3, [r5, #2]
    6e46:	7223      	strb	r3, [r4, #8]
    6e48:	7bc3      	ldrb	r3, [r0, #15]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d015      	beq.n	6e7a <frameParse+0x52>
    6e4e:	7863      	ldrb	r3, [r4, #1]
    6e50:	069a      	lsls	r2, r3, #26
    6e52:	d400      	bmi.n	6e56 <frameParse+0x2e>
    6e54:	e094      	b.n	6f80 <frameParse+0x158>
    6e56:	6873      	ldr	r3, [r6, #4]
    6e58:	4698      	mov	r8, r3
    6e5a:	8a33      	ldrh	r3, [r6, #16]
    6e5c:	8063      	strh	r3, [r4, #2]
    6e5e:	4643      	mov	r3, r8
    6e60:	785a      	ldrb	r2, [r3, #1]
    6e62:	781b      	ldrb	r3, [r3, #0]
    6e64:	0212      	lsls	r2, r2, #8
    6e66:	4313      	orrs	r3, r2
    6e68:	80e3      	strh	r3, [r4, #6]
    6e6a:	2302      	movs	r3, #2
    6e6c:	4699      	mov	r9, r3
    6e6e:	7833      	ldrb	r3, [r6, #0]
    6e70:	075b      	lsls	r3, r3, #29
    6e72:	d40e      	bmi.n	6e92 <frameParse+0x6a>
    6e74:	4bcb      	ldr	r3, [pc, #812]	; (71a4 <frameParse+0x37c>)
    6e76:	881b      	ldrh	r3, [r3, #0]
    6e78:	e00d      	b.n	6e96 <frameParse+0x6e>
    6e7a:	7863      	ldrb	r3, [r4, #1]
    6e7c:	069a      	lsls	r2, r3, #26
    6e7e:	d55c      	bpl.n	6f3a <frameParse+0x112>
    6e80:	6873      	ldr	r3, [r6, #4]
    6e82:	4698      	mov	r8, r3
    6e84:	8a33      	ldrh	r3, [r6, #16]
    6e86:	8063      	strh	r3, [r4, #2]
    6e88:	2308      	movs	r3, #8
    6e8a:	4699      	mov	r9, r3
    6e8c:	7833      	ldrb	r3, [r6, #0]
    6e8e:	075b      	lsls	r3, r3, #29
    6e90:	d5f0      	bpl.n	6e74 <frameParse+0x4c>
    6e92:	2301      	movs	r3, #1
    6e94:	425b      	negs	r3, r3
    6e96:	2210      	movs	r2, #16
    6e98:	80a3      	strh	r3, [r4, #4]
    6e9a:	7863      	ldrb	r3, [r4, #1]
    6e9c:	9205      	str	r2, [sp, #20]
    6e9e:	4692      	mov	sl, r2
    6ea0:	4693      	mov	fp, r2
    6ea2:	2708      	movs	r7, #8
    6ea4:	2104      	movs	r1, #4
    6ea6:	3a0d      	subs	r2, #13
    6ea8:	075b      	lsls	r3, r3, #29
    6eaa:	d562      	bpl.n	6f72 <frameParse+0x14a>
    6eac:	5cab      	ldrb	r3, [r5, r2]
    6eae:	1869      	adds	r1, r5, r1
    6eb0:	7423      	strb	r3, [r4, #16]
    6eb2:	2204      	movs	r2, #4
    6eb4:	4bbc      	ldr	r3, [pc, #752]	; (71a8 <frameParse+0x380>)
    6eb6:	a813      	add	r0, sp, #76	; 0x4c
    6eb8:	4798      	blx	r3
    6eba:	19e9      	adds	r1, r5, r7
    6ebc:	2208      	movs	r2, #8
    6ebe:	4bba      	ldr	r3, [pc, #744]	; (71a8 <frameParse+0x380>)
    6ec0:	a814      	add	r0, sp, #80	; 0x50
    6ec2:	4798      	blx	r3
    6ec4:	465b      	mov	r3, fp
    6ec6:	7b37      	ldrb	r7, [r6, #12]
    6ec8:	4648      	mov	r0, r9
    6eca:	1aff      	subs	r7, r7, r3
    6ecc:	b2fb      	uxtb	r3, r7
    6ece:	001f      	movs	r7, r3
    6ed0:	4bb6      	ldr	r3, [pc, #728]	; (71ac <frameParse+0x384>)
    6ed2:	4798      	blx	r3
    6ed4:	9001      	str	r0, [sp, #4]
    6ed6:	68b3      	ldr	r3, [r6, #8]
    6ed8:	9706      	str	r7, [sp, #24]
    6eda:	9300      	str	r3, [sp, #0]
    6edc:	465a      	mov	r2, fp
    6ede:	003b      	movs	r3, r7
    6ee0:	a914      	add	r1, sp, #80	; 0x50
    6ee2:	0020      	movs	r0, r4
    6ee4:	4fb2      	ldr	r7, [pc, #712]	; (71b0 <frameParse+0x388>)
    6ee6:	47b8      	blx	r7
    6ee8:	28ff      	cmp	r0, #255	; 0xff
    6eea:	d042      	beq.n	6f72 <frameParse+0x14a>
    6eec:	002b      	movs	r3, r5
    6eee:	9f06      	ldr	r7, [sp, #24]
    6ef0:	4453      	add	r3, sl
    6ef2:	1a3f      	subs	r7, r7, r0
    6ef4:	9307      	str	r3, [sp, #28]
    6ef6:	b2fb      	uxtb	r3, r7
    6ef8:	9306      	str	r3, [sp, #24]
    6efa:	88a0      	ldrh	r0, [r4, #4]
    6efc:	4bad      	ldr	r3, [pc, #692]	; (71b4 <frameParse+0x38c>)
    6efe:	4298      	cmp	r0, r3
    6f00:	d941      	bls.n	6f86 <frameParse+0x15e>
    6f02:	2228      	movs	r2, #40	; 0x28
    6f04:	4bac      	ldr	r3, [pc, #688]	; (71b8 <frameParse+0x390>)
    6f06:	88e5      	ldrh	r5, [r4, #6]
    6f08:	469a      	mov	sl, r3
    6f0a:	681b      	ldr	r3, [r3, #0]
    6f0c:	7a27      	ldrb	r7, [r4, #8]
    6f0e:	5c9a      	ldrb	r2, [r3, r2]
    6f10:	2a00      	cmp	r2, #0
    6f12:	d100      	bne.n	6f16 <frameParse+0xee>
    6f14:	e07c      	b.n	7010 <frameParse+0x1e8>
    6f16:	3a01      	subs	r2, #1
    6f18:	b2d1      	uxtb	r1, r2
    6f1a:	699b      	ldr	r3, [r3, #24]
    6f1c:	3101      	adds	r1, #1
    6f1e:	0089      	lsls	r1, r1, #2
    6f20:	1859      	adds	r1, r3, r1
    6f22:	e003      	b.n	6f2c <frameParse+0x104>
    6f24:	3304      	adds	r3, #4
    6f26:	4299      	cmp	r1, r3
    6f28:	d100      	bne.n	6f2c <frameParse+0x104>
    6f2a:	e071      	b.n	7010 <frameParse+0x1e8>
    6f2c:	881a      	ldrh	r2, [r3, #0]
    6f2e:	42aa      	cmp	r2, r5
    6f30:	d1f8      	bne.n	6f24 <frameParse+0xfc>
    6f32:	789a      	ldrb	r2, [r3, #2]
    6f34:	42ba      	cmp	r2, r7
    6f36:	d1f5      	bne.n	6f24 <frameParse+0xfc>
    6f38:	e01b      	b.n	6f72 <frameParse+0x14a>
    6f3a:	2208      	movs	r2, #8
    6f3c:	4691      	mov	r9, r2
    6f3e:	6872      	ldr	r2, [r6, #4]
    6f40:	7929      	ldrb	r1, [r5, #4]
    6f42:	4690      	mov	r8, r2
    6f44:	78ea      	ldrb	r2, [r5, #3]
    6f46:	0209      	lsls	r1, r1, #8
    6f48:	430a      	orrs	r2, r1
    6f4a:	79a9      	ldrb	r1, [r5, #6]
    6f4c:	8062      	strh	r2, [r4, #2]
    6f4e:	796a      	ldrb	r2, [r5, #5]
    6f50:	0209      	lsls	r1, r1, #8
    6f52:	430a      	orrs	r2, r1
    6f54:	7a29      	ldrb	r1, [r5, #8]
    6f56:	80a2      	strh	r2, [r4, #4]
    6f58:	79ea      	ldrb	r2, [r5, #7]
    6f5a:	0209      	lsls	r1, r1, #8
    6f5c:	430a      	orrs	r2, r1
    6f5e:	80e2      	strh	r2, [r4, #6]
    6f60:	2216      	movs	r2, #22
    6f62:	270e      	movs	r7, #14
    6f64:	9205      	str	r2, [sp, #20]
    6f66:	4692      	mov	sl, r2
    6f68:	4693      	mov	fp, r2
    6f6a:	210a      	movs	r1, #10
    6f6c:	3a0d      	subs	r2, #13
    6f6e:	075b      	lsls	r3, r3, #29
    6f70:	d49c      	bmi.n	6eac <frameParse+0x84>
    6f72:	b01f      	add	sp, #124	; 0x7c
    6f74:	bc3c      	pop	{r2, r3, r4, r5}
    6f76:	4690      	mov	r8, r2
    6f78:	4699      	mov	r9, r3
    6f7a:	46a2      	mov	sl, r4
    6f7c:	46ab      	mov	fp, r5
    6f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f80:	2202      	movs	r2, #2
    6f82:	4691      	mov	r9, r2
    6f84:	e7db      	b.n	6f3e <frameParse+0x116>
    6f86:	4b87      	ldr	r3, [pc, #540]	; (71a4 <frameParse+0x37c>)
    6f88:	881a      	ldrh	r2, [r3, #0]
    6f8a:	4290      	cmp	r0, r2
    6f8c:	d100      	bne.n	6f90 <frameParse+0x168>
    6f8e:	e12d      	b.n	71ec <frameParse+0x3c4>
    6f90:	21ff      	movs	r1, #255	; 0xff
    6f92:	0005      	movs	r5, r0
    6f94:	881a      	ldrh	r2, [r3, #0]
    6f96:	438d      	bics	r5, r1
    6f98:	4295      	cmp	r5, r2
    6f9a:	d100      	bne.n	6f9e <frameParse+0x176>
    6f9c:	e129      	b.n	71f2 <frameParse+0x3ca>
    6f9e:	881b      	ldrh	r3, [r3, #0]
    6fa0:	4298      	cmp	r0, r3
    6fa2:	d0e6      	beq.n	6f72 <frameParse+0x14a>
    6fa4:	7823      	ldrb	r3, [r4, #0]
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d0e3      	beq.n	6f72 <frameParse+0x14a>
    6faa:	4a84      	ldr	r2, [pc, #528]	; (71bc <frameParse+0x394>)
    6fac:	7812      	ldrb	r2, [r2, #0]
    6fae:	2a06      	cmp	r2, #6
    6fb0:	d1df      	bne.n	6f72 <frameParse+0x14a>
    6fb2:	3b01      	subs	r3, #1
    6fb4:	7023      	strb	r3, [r4, #0]
    6fb6:	4b82      	ldr	r3, [pc, #520]	; (71c0 <frameParse+0x398>)
    6fb8:	4798      	blx	r3
    6fba:	ab0a      	add	r3, sp, #40	; 0x28
    6fbc:	8618      	strh	r0, [r3, #48]	; 0x30
    6fbe:	4b81      	ldr	r3, [pc, #516]	; (71c4 <frameParse+0x39c>)
    6fc0:	4298      	cmp	r0, r3
    6fc2:	d100      	bne.n	6fc6 <frameParse+0x19e>
    6fc4:	e32e      	b.n	7624 <frameParse+0x7fc>
    6fc6:	2078      	movs	r0, #120	; 0x78
    6fc8:	4b7f      	ldr	r3, [pc, #508]	; (71c8 <frameParse+0x3a0>)
    6fca:	4798      	blx	r3
    6fcc:	1e05      	subs	r5, r0, #0
    6fce:	d0d0      	beq.n	6f72 <frameParse+0x14a>
    6fd0:	0001      	movs	r1, r0
    6fd2:	4b7e      	ldr	r3, [pc, #504]	; (71cc <frameParse+0x3a4>)
    6fd4:	0020      	movs	r0, r4
    6fd6:	4798      	blx	r3
    6fd8:	7a23      	ldrb	r3, [r4, #8]
    6fda:	9f06      	ldr	r7, [sp, #24]
    6fdc:	0006      	movs	r6, r0
    6fde:	70ab      	strb	r3, [r5, #2]
    6fe0:	003a      	movs	r2, r7
    6fe2:	9907      	ldr	r1, [sp, #28]
    6fe4:	4b70      	ldr	r3, [pc, #448]	; (71a8 <frameParse+0x380>)
    6fe6:	1828      	adds	r0, r5, r0
    6fe8:	4798      	blx	r3
    6fea:	2300      	movs	r3, #0
    6fec:	9303      	str	r3, [sp, #12]
    6fee:	9302      	str	r3, [sp, #8]
    6ff0:	ab16      	add	r3, sp, #88	; 0x58
    6ff2:	9301      	str	r3, [sp, #4]
    6ff4:	2302      	movs	r3, #2
    6ff6:	0020      	movs	r0, r4
    6ff8:	9300      	str	r3, [sp, #0]
    6ffa:	003a      	movs	r2, r7
    6ffc:	002b      	movs	r3, r5
    6ffe:	0031      	movs	r1, r6
    7000:	4c73      	ldr	r4, [pc, #460]	; (71d0 <frameParse+0x3a8>)
    7002:	47a0      	blx	r4
    7004:	2800      	cmp	r0, #0
    7006:	d1b4      	bne.n	6f72 <frameParse+0x14a>
    7008:	0028      	movs	r0, r5
    700a:	4b72      	ldr	r3, [pc, #456]	; (71d4 <frameParse+0x3ac>)
    700c:	4798      	blx	r3
    700e:	e7b0      	b.n	6f72 <frameParse+0x14a>
    7010:	4b6c      	ldr	r3, [pc, #432]	; (71c4 <frameParse+0x39c>)
    7012:	4298      	cmp	r0, r3
    7014:	d100      	bne.n	7018 <frameParse+0x1f0>
    7016:	e0b6      	b.n	7186 <frameParse+0x35e>
    7018:	2701      	movs	r7, #1
    701a:	7863      	ldrb	r3, [r4, #1]
    701c:	2510      	movs	r5, #16
    701e:	421d      	tst	r5, r3
    7020:	d006      	beq.n	7030 <frameParse+0x208>
    7022:	4a60      	ldr	r2, [pc, #384]	; (71a4 <frameParse+0x37c>)
    7024:	88a1      	ldrh	r1, [r4, #4]
    7026:	4692      	mov	sl, r2
    7028:	8812      	ldrh	r2, [r2, #0]
    702a:	4291      	cmp	r1, r2
    702c:	d100      	bne.n	7030 <frameParse+0x208>
    702e:	e1c7      	b.n	73c0 <frameParse+0x598>
    7030:	2503      	movs	r5, #3
    7032:	402b      	ands	r3, r5
    7034:	2b01      	cmp	r3, #1
    7036:	d100      	bne.n	703a <frameParse+0x212>
    7038:	e160      	b.n	72fc <frameParse+0x4d4>
    703a:	2b00      	cmp	r3, #0
    703c:	d105      	bne.n	704a <frameParse+0x222>
    703e:	4b5f      	ldr	r3, [pc, #380]	; (71bc <frameParse+0x394>)
    7040:	781b      	ldrb	r3, [r3, #0]
    7042:	3b06      	subs	r3, #6
    7044:	2b01      	cmp	r3, #1
    7046:	d800      	bhi.n	704a <frameParse+0x222>
    7048:	e16d      	b.n	7326 <frameParse+0x4fe>
    704a:	2f00      	cmp	r7, #0
    704c:	d100      	bne.n	7050 <frameParse+0x228>
    704e:	e790      	b.n	6f72 <frameParse+0x14a>
    7050:	7823      	ldrb	r3, [r4, #0]
    7052:	2b00      	cmp	r3, #0
    7054:	d100      	bne.n	7058 <frameParse+0x230>
    7056:	e78c      	b.n	6f72 <frameParse+0x14a>
    7058:	4b58      	ldr	r3, [pc, #352]	; (71bc <frameParse+0x394>)
    705a:	781b      	ldrb	r3, [r3, #0]
    705c:	2b06      	cmp	r3, #6
    705e:	d000      	beq.n	7062 <frameParse+0x23a>
    7060:	e787      	b.n	6f72 <frameParse+0x14a>
    7062:	ab16      	add	r3, sp, #88	; 0x58
    7064:	001a      	movs	r2, r3
    7066:	9308      	str	r3, [sp, #32]
    7068:	2301      	movs	r3, #1
    706a:	425b      	negs	r3, r3
    706c:	8013      	strh	r3, [r2, #0]
    706e:	2078      	movs	r0, #120	; 0x78
    7070:	4b55      	ldr	r3, [pc, #340]	; (71c8 <frameParse+0x3a0>)
    7072:	4798      	blx	r3
    7074:	4680      	mov	r8, r0
    7076:	2800      	cmp	r0, #0
    7078:	d100      	bne.n	707c <frameParse+0x254>
    707a:	e77a      	b.n	6f72 <frameParse+0x14a>
    707c:	7823      	ldrb	r3, [r4, #0]
    707e:	4a56      	ldr	r2, [pc, #344]	; (71d8 <frameParse+0x3b0>)
    7080:	3b01      	subs	r3, #1
    7082:	b2db      	uxtb	r3, r3
    7084:	7023      	strb	r3, [r4, #0]
    7086:	7003      	strb	r3, [r0, #0]
    7088:	7863      	ldrb	r3, [r4, #1]
    708a:	7043      	strb	r3, [r0, #1]
    708c:	7813      	ldrb	r3, [r2, #0]
    708e:	3301      	adds	r3, #1
    7090:	b2db      	uxtb	r3, r3
    7092:	7083      	strb	r3, [r0, #2]
    7094:	7013      	strb	r3, [r2, #0]
    7096:	7863      	ldrb	r3, [r4, #1]
    7098:	069a      	lsls	r2, r3, #26
    709a:	d500      	bpl.n	709e <frameParse+0x276>
    709c:	e172      	b.n	7384 <frameParse+0x55c>
    709e:	8862      	ldrh	r2, [r4, #2]
    70a0:	2716      	movs	r7, #22
    70a2:	70c2      	strb	r2, [r0, #3]
    70a4:	8862      	ldrh	r2, [r4, #2]
    70a6:	250e      	movs	r5, #14
    70a8:	0a12      	lsrs	r2, r2, #8
    70aa:	7102      	strb	r2, [r0, #4]
    70ac:	88a2      	ldrh	r2, [r4, #4]
    70ae:	7142      	strb	r2, [r0, #5]
    70b0:	88a2      	ldrh	r2, [r4, #4]
    70b2:	0a12      	lsrs	r2, r2, #8
    70b4:	7182      	strb	r2, [r0, #6]
    70b6:	88e2      	ldrh	r2, [r4, #6]
    70b8:	71c2      	strb	r2, [r0, #7]
    70ba:	88e2      	ldrh	r2, [r4, #6]
    70bc:	0a12      	lsrs	r2, r2, #8
    70be:	7202      	strb	r2, [r0, #8]
    70c0:	2216      	movs	r2, #22
    70c2:	4692      	mov	sl, r2
    70c4:	3a0d      	subs	r2, #13
    70c6:	200a      	movs	r0, #10
    70c8:	4691      	mov	r9, r2
    70ca:	9206      	str	r2, [sp, #24]
    70cc:	075b      	lsls	r3, r3, #29
    70ce:	d518      	bpl.n	7102 <frameParse+0x2da>
    70d0:	4b42      	ldr	r3, [pc, #264]	; (71dc <frameParse+0x3b4>)
    70d2:	4649      	mov	r1, r9
    70d4:	681a      	ldr	r2, [r3, #0]
    70d6:	2320      	movs	r3, #32
    70d8:	5cd3      	ldrb	r3, [r2, r3]
    70da:	4a41      	ldr	r2, [pc, #260]	; (71e0 <frameParse+0x3b8>)
    70dc:	7423      	strb	r3, [r4, #16]
    70de:	6812      	ldr	r2, [r2, #0]
    70e0:	4440      	add	r0, r8
    70e2:	6162      	str	r2, [r4, #20]
    70e4:	4642      	mov	r2, r8
    70e6:	5453      	strb	r3, [r2, r1]
    70e8:	2204      	movs	r2, #4
    70ea:	a913      	add	r1, sp, #76	; 0x4c
    70ec:	4b2e      	ldr	r3, [pc, #184]	; (71a8 <frameParse+0x380>)
    70ee:	4798      	blx	r3
    70f0:	0028      	movs	r0, r5
    70f2:	4b2d      	ldr	r3, [pc, #180]	; (71a8 <frameParse+0x380>)
    70f4:	4440      	add	r0, r8
    70f6:	2208      	movs	r2, #8
    70f8:	493a      	ldr	r1, [pc, #232]	; (71e4 <frameParse+0x3bc>)
    70fa:	4798      	blx	r3
    70fc:	4653      	mov	r3, sl
    70fe:	46b9      	mov	r9, r7
    7100:	9306      	str	r3, [sp, #24]
    7102:	4642      	mov	r2, r8
    7104:	7a23      	ldrb	r3, [r4, #8]
    7106:	7093      	strb	r3, [r2, #2]
    7108:	2228      	movs	r2, #40	; 0x28
    710a:	4b2b      	ldr	r3, [pc, #172]	; (71b8 <frameParse+0x390>)
    710c:	469a      	mov	sl, r3
    710e:	681b      	ldr	r3, [r3, #0]
    7110:	5c9a      	ldrb	r2, [r3, r2]
    7112:	2a00      	cmp	r2, #0
    7114:	d018      	beq.n	7148 <frameParse+0x320>
    7116:	6998      	ldr	r0, [r3, #24]
    7118:	4d2a      	ldr	r5, [pc, #168]	; (71c4 <frameParse+0x39c>)
    711a:	8803      	ldrh	r3, [r0, #0]
    711c:	42ab      	cmp	r3, r5
    711e:	d100      	bne.n	7122 <frameParse+0x2fa>
    7120:	e2a8      	b.n	7674 <frameParse+0x84c>
    7122:	3a01      	subs	r2, #1
    7124:	b2d2      	uxtb	r2, r2
    7126:	3201      	adds	r2, #1
    7128:	0092      	lsls	r2, r2, #2
    712a:	1d03      	adds	r3, r0, #4
    712c:	1882      	adds	r2, r0, r2
    712e:	46b4      	mov	ip, r6
    7130:	e007      	b.n	7142 <frameParse+0x31a>
    7132:	1a1e      	subs	r6, r3, r0
    7134:	001f      	movs	r7, r3
    7136:	3304      	adds	r3, #4
    7138:	1f19      	subs	r1, r3, #4
    713a:	8809      	ldrh	r1, [r1, #0]
    713c:	42a9      	cmp	r1, r5
    713e:	d100      	bne.n	7142 <frameParse+0x31a>
    7140:	e129      	b.n	7396 <frameParse+0x56e>
    7142:	429a      	cmp	r2, r3
    7144:	d1f5      	bne.n	7132 <frameParse+0x30a>
    7146:	4666      	mov	r6, ip
    7148:	4648      	mov	r0, r9
    714a:	9b05      	ldr	r3, [sp, #20]
    714c:	7b32      	ldrb	r2, [r6, #12]
    714e:	9907      	ldr	r1, [sp, #28]
    7150:	1ad2      	subs	r2, r2, r3
    7152:	4440      	add	r0, r8
    7154:	4b14      	ldr	r3, [pc, #80]	; (71a8 <frameParse+0x380>)
    7156:	4798      	blx	r3
    7158:	465b      	mov	r3, fp
    715a:	7b32      	ldrb	r2, [r6, #12]
    715c:	0020      	movs	r0, r4
    715e:	1ad2      	subs	r2, r2, r3
    7160:	2300      	movs	r3, #0
    7162:	9303      	str	r3, [sp, #12]
    7164:	9302      	str	r3, [sp, #8]
    7166:	9b08      	ldr	r3, [sp, #32]
    7168:	b2d2      	uxtb	r2, r2
    716a:	9301      	str	r3, [sp, #4]
    716c:	2302      	movs	r3, #2
    716e:	9906      	ldr	r1, [sp, #24]
    7170:	9300      	str	r3, [sp, #0]
    7172:	4c17      	ldr	r4, [pc, #92]	; (71d0 <frameParse+0x3a8>)
    7174:	4643      	mov	r3, r8
    7176:	47a0      	blx	r4
    7178:	2800      	cmp	r0, #0
    717a:	d000      	beq.n	717e <frameParse+0x356>
    717c:	e6f9      	b.n	6f72 <frameParse+0x14a>
    717e:	4640      	mov	r0, r8
    7180:	4b14      	ldr	r3, [pc, #80]	; (71d4 <frameParse+0x3ac>)
    7182:	4798      	blx	r3
    7184:	e6f5      	b.n	6f72 <frameParse+0x14a>
    7186:	2503      	movs	r5, #3
    7188:	7863      	ldrb	r3, [r4, #1]
    718a:	2701      	movs	r7, #1
    718c:	401d      	ands	r5, r3
    718e:	d000      	beq.n	7192 <frameParse+0x36a>
    7190:	e744      	b.n	701c <frameParse+0x1f4>
    7192:	4b15      	ldr	r3, [pc, #84]	; (71e8 <frameParse+0x3c0>)
    7194:	4798      	blx	r3
    7196:	1e07      	subs	r7, r0, #0
    7198:	d000      	beq.n	719c <frameParse+0x374>
    719a:	e214      	b.n	75c6 <frameParse+0x79e>
    719c:	7863      	ldrb	r3, [r4, #1]
    719e:	3701      	adds	r7, #1
    71a0:	e73c      	b.n	701c <frameParse+0x1f4>
    71a2:	46c0      	nop			; (mov r8, r8)
    71a4:	20002cac 	.word	0x20002cac
    71a8:	0000926f 	.word	0x0000926f
    71ac:	00008ce5 	.word	0x00008ce5
    71b0:	00008e11 	.word	0x00008e11
    71b4:	0000fffc 	.word	0x0000fffc
    71b8:	20002c64 	.word	0x20002c64
    71bc:	200003ac 	.word	0x200003ac
    71c0:	00008a31 	.word	0x00008a31
    71c4:	0000ffff 	.word	0x0000ffff
    71c8:	0000339d 	.word	0x0000339d
    71cc:	00006601 	.word	0x00006601
    71d0:	00006699 	.word	0x00006699
    71d4:	000033ed 	.word	0x000033ed
    71d8:	20002c80 	.word	0x20002c80
    71dc:	20002c68 	.word	0x20002c68
    71e0:	20002cf4 	.word	0x20002cf4
    71e4:	20000080 	.word	0x20000080
    71e8:	000084a5 	.word	0x000084a5
    71ec:	7863      	ldrb	r3, [r4, #1]
    71ee:	2700      	movs	r7, #0
    71f0:	e714      	b.n	701c <frameParse+0x1f4>
    71f2:	4ada      	ldr	r2, [pc, #872]	; (755c <frameParse+0x734>)
    71f4:	7812      	ldrb	r2, [r2, #0]
    71f6:	2a06      	cmp	r2, #6
    71f8:	d000      	beq.n	71fc <frameParse+0x3d4>
    71fa:	e6d0      	b.n	6f9e <frameParse+0x176>
    71fc:	2580      	movs	r5, #128	; 0x80
    71fe:	4005      	ands	r5, r0
    7200:	d100      	bne.n	7204 <frameParse+0x3dc>
    7202:	e18a      	b.n	751a <frameParse+0x6f2>
    7204:	2078      	movs	r0, #120	; 0x78
    7206:	4bd6      	ldr	r3, [pc, #856]	; (7560 <frameParse+0x738>)
    7208:	4798      	blx	r3
    720a:	1e05      	subs	r5, r0, #0
    720c:	d100      	bne.n	7210 <frameParse+0x3e8>
    720e:	e6b0      	b.n	6f72 <frameParse+0x14a>
    7210:	2203      	movs	r2, #3
    7212:	7821      	ldrb	r1, [r4, #0]
    7214:	ab16      	add	r3, sp, #88	; 0x58
    7216:	88e0      	ldrh	r0, [r4, #6]
    7218:	88a7      	ldrh	r7, [r4, #4]
    721a:	7019      	strb	r1, [r3, #0]
    721c:	9308      	str	r3, [sp, #32]
    721e:	785b      	ldrb	r3, [r3, #1]
    7220:	4393      	bics	r3, r2
    7222:	2201      	movs	r2, #1
    7224:	4313      	orrs	r3, r2
    7226:	2208      	movs	r2, #8
    7228:	b2db      	uxtb	r3, r3
    722a:	4393      	bics	r3, r2
    722c:	2204      	movs	r2, #4
    722e:	4313      	orrs	r3, r2
    7230:	2220      	movs	r2, #32
    7232:	4690      	mov	r8, r2
    7234:	b2db      	uxtb	r3, r3
    7236:	4393      	bics	r3, r2
    7238:	324f      	adds	r2, #79	; 0x4f
    723a:	4013      	ands	r3, r2
    723c:	9a08      	ldr	r2, [sp, #32]
    723e:	7053      	strb	r3, [r2, #1]
    7240:	4bc8      	ldr	r3, [pc, #800]	; (7564 <frameParse+0x73c>)
    7242:	8097      	strh	r7, [r2, #4]
    7244:	881b      	ldrh	r3, [r3, #0]
    7246:	80d0      	strh	r0, [r2, #6]
    7248:	8053      	strh	r3, [r2, #2]
    724a:	7029      	strb	r1, [r5, #0]
    724c:	7853      	ldrb	r3, [r2, #1]
    724e:	49c6      	ldr	r1, [pc, #792]	; (7568 <frameParse+0x740>)
    7250:	706b      	strb	r3, [r5, #1]
    7252:	780b      	ldrb	r3, [r1, #0]
    7254:	3301      	adds	r3, #1
    7256:	b2db      	uxtb	r3, r3
    7258:	700b      	strb	r3, [r1, #0]
    725a:	70ab      	strb	r3, [r5, #2]
    725c:	4643      	mov	r3, r8
    725e:	7851      	ldrb	r1, [r2, #1]
    7260:	420b      	tst	r3, r1
    7262:	d000      	beq.n	7266 <frameParse+0x43e>
    7264:	e1db      	b.n	761e <frameParse+0x7f6>
    7266:	2009      	movs	r0, #9
    7268:	2709      	movs	r7, #9
    726a:	8853      	ldrh	r3, [r2, #2]
    726c:	70eb      	strb	r3, [r5, #3]
    726e:	8853      	ldrh	r3, [r2, #2]
    7270:	0a1b      	lsrs	r3, r3, #8
    7272:	712b      	strb	r3, [r5, #4]
    7274:	8893      	ldrh	r3, [r2, #4]
    7276:	716b      	strb	r3, [r5, #5]
    7278:	8893      	ldrh	r3, [r2, #4]
    727a:	0a1b      	lsrs	r3, r3, #8
    727c:	71ab      	strb	r3, [r5, #6]
    727e:	88d3      	ldrh	r3, [r2, #6]
    7280:	71eb      	strb	r3, [r5, #7]
    7282:	88d3      	ldrh	r3, [r2, #6]
    7284:	0a1b      	lsrs	r3, r3, #8
    7286:	722b      	strb	r3, [r5, #8]
    7288:	074b      	lsls	r3, r1, #29
    728a:	d51d      	bpl.n	72c8 <frameParse+0x4a0>
    728c:	4bb7      	ldr	r3, [pc, #732]	; (756c <frameParse+0x744>)
    728e:	9908      	ldr	r1, [sp, #32]
    7290:	681a      	ldr	r2, [r3, #0]
    7292:	2320      	movs	r3, #32
    7294:	5cd3      	ldrb	r3, [r2, r3]
    7296:	4ab6      	ldr	r2, [pc, #728]	; (7570 <frameParse+0x748>)
    7298:	740b      	strb	r3, [r1, #16]
    729a:	6812      	ldr	r2, [r2, #0]
    729c:	9206      	str	r2, [sp, #24]
    729e:	000a      	movs	r2, r1
    72a0:	9906      	ldr	r1, [sp, #24]
    72a2:	6151      	str	r1, [r2, #20]
    72a4:	542b      	strb	r3, [r5, r0]
    72a6:	1c78      	adds	r0, r7, #1
    72a8:	b2c0      	uxtb	r0, r0
    72aa:	2204      	movs	r2, #4
    72ac:	a91b      	add	r1, sp, #108	; 0x6c
    72ae:	4bb1      	ldr	r3, [pc, #708]	; (7574 <frameParse+0x74c>)
    72b0:	1828      	adds	r0, r5, r0
    72b2:	4798      	blx	r3
    72b4:	1d78      	adds	r0, r7, #5
    72b6:	b2c0      	uxtb	r0, r0
    72b8:	370d      	adds	r7, #13
    72ba:	1828      	adds	r0, r5, r0
    72bc:	2208      	movs	r2, #8
    72be:	49ae      	ldr	r1, [pc, #696]	; (7578 <frameParse+0x750>)
    72c0:	4bac      	ldr	r3, [pc, #688]	; (7574 <frameParse+0x74c>)
    72c2:	b2ff      	uxtb	r7, r7
    72c4:	4798      	blx	r3
    72c6:	0038      	movs	r0, r7
    72c8:	7a23      	ldrb	r3, [r4, #8]
    72ca:	9907      	ldr	r1, [sp, #28]
    72cc:	70ab      	strb	r3, [r5, #2]
    72ce:	7b32      	ldrb	r2, [r6, #12]
    72d0:	9b05      	ldr	r3, [sp, #20]
    72d2:	1828      	adds	r0, r5, r0
    72d4:	1ad2      	subs	r2, r2, r3
    72d6:	4ba7      	ldr	r3, [pc, #668]	; (7574 <frameParse+0x74c>)
    72d8:	4798      	blx	r3
    72da:	465b      	mov	r3, fp
    72dc:	7b32      	ldrb	r2, [r6, #12]
    72de:	0039      	movs	r1, r7
    72e0:	1ad2      	subs	r2, r2, r3
    72e2:	2300      	movs	r3, #0
    72e4:	9303      	str	r3, [sp, #12]
    72e6:	9302      	str	r3, [sp, #8]
    72e8:	ab0f      	add	r3, sp, #60	; 0x3c
    72ea:	9301      	str	r3, [sp, #4]
    72ec:	2302      	movs	r3, #2
    72ee:	b2d2      	uxtb	r2, r2
    72f0:	9300      	str	r3, [sp, #0]
    72f2:	9808      	ldr	r0, [sp, #32]
    72f4:	002b      	movs	r3, r5
    72f6:	4ca1      	ldr	r4, [pc, #644]	; (757c <frameParse+0x754>)
    72f8:	47a0      	blx	r4
    72fa:	e63a      	b.n	6f72 <frameParse+0x14a>
    72fc:	220f      	movs	r2, #15
    72fe:	9b07      	ldr	r3, [sp, #28]
    7300:	781b      	ldrb	r3, [r3, #0]
    7302:	4393      	bics	r3, r2
    7304:	2b10      	cmp	r3, #16
    7306:	d100      	bne.n	730a <frameParse+0x4e2>
    7308:	e0ed      	b.n	74e6 <frameParse+0x6be>
    730a:	d92f      	bls.n	736c <frameParse+0x544>
    730c:	2b20      	cmp	r3, #32
    730e:	d100      	bne.n	7312 <frameParse+0x4ea>
    7310:	e0e2      	b.n	74d8 <frameParse+0x6b0>
    7312:	2b30      	cmp	r3, #48	; 0x30
    7314:	d000      	beq.n	7318 <frameParse+0x4f0>
    7316:	e698      	b.n	704a <frameParse+0x222>
    7318:	4b99      	ldr	r3, [pc, #612]	; (7580 <frameParse+0x758>)
    731a:	9907      	ldr	r1, [sp, #28]
    731c:	0020      	movs	r0, r4
    731e:	4798      	blx	r3
    7320:	7863      	ldrb	r3, [r4, #1]
    7322:	402b      	ands	r3, r5
    7324:	e689      	b.n	703a <frameParse+0x212>
    7326:	88a2      	ldrh	r2, [r4, #4]
    7328:	4b96      	ldr	r3, [pc, #600]	; (7584 <frameParse+0x75c>)
    732a:	429a      	cmp	r2, r3
    732c:	d90e      	bls.n	734c <frameParse+0x524>
    732e:	20ff      	movs	r0, #255	; 0xff
    7330:	4b95      	ldr	r3, [pc, #596]	; (7588 <frameParse+0x760>)
    7332:	8819      	ldrh	r1, [r3, #0]
    7334:	4208      	tst	r0, r1
    7336:	d100      	bne.n	733a <frameParse+0x512>
    7338:	e0e6      	b.n	7508 <frameParse+0x6e0>
    733a:	8819      	ldrh	r1, [r3, #0]
    733c:	0609      	lsls	r1, r1, #24
    733e:	d500      	bpl.n	7342 <frameParse+0x51a>
    7340:	e0e2      	b.n	7508 <frameParse+0x6e0>
    7342:	4992      	ldr	r1, [pc, #584]	; (758c <frameParse+0x764>)
    7344:	428a      	cmp	r2, r1
    7346:	d000      	beq.n	734a <frameParse+0x522>
    7348:	e67f      	b.n	704a <frameParse+0x222>
    734a:	881b      	ldrh	r3, [r3, #0]
    734c:	88e3      	ldrh	r3, [r4, #6]
    734e:	a816      	add	r0, sp, #88	; 0x58
    7350:	8003      	strh	r3, [r0, #0]
    7352:	466b      	mov	r3, sp
    7354:	7e1b      	ldrb	r3, [r3, #24]
    7356:	7203      	strb	r3, [r0, #8]
    7358:	9b07      	ldr	r3, [sp, #28]
    735a:	6043      	str	r3, [r0, #4]
    735c:	7bb3      	ldrb	r3, [r6, #14]
    735e:	7283      	strb	r3, [r0, #10]
    7360:	7b73      	ldrb	r3, [r6, #13]
    7362:	7243      	strb	r3, [r0, #9]
    7364:	4b8a      	ldr	r3, [pc, #552]	; (7590 <frameParse+0x768>)
    7366:	681b      	ldr	r3, [r3, #0]
    7368:	4798      	blx	r3
    736a:	e66e      	b.n	704a <frameParse+0x222>
    736c:	2b00      	cmp	r3, #0
    736e:	d000      	beq.n	7372 <frameParse+0x54a>
    7370:	e66b      	b.n	704a <frameParse+0x222>
    7372:	7bb3      	ldrb	r3, [r6, #14]
    7374:	0020      	movs	r0, r4
    7376:	9300      	str	r3, [sp, #0]
    7378:	4642      	mov	r2, r8
    737a:	9b07      	ldr	r3, [sp, #28]
    737c:	4649      	mov	r1, r9
    737e:	4c85      	ldr	r4, [pc, #532]	; (7594 <frameParse+0x76c>)
    7380:	47a0      	blx	r4
    7382:	e5f6      	b.n	6f72 <frameParse+0x14a>
    7384:	2210      	movs	r2, #16
    7386:	4692      	mov	sl, r2
    7388:	3a0d      	subs	r2, #13
    738a:	2710      	movs	r7, #16
    738c:	2508      	movs	r5, #8
    738e:	2004      	movs	r0, #4
    7390:	4691      	mov	r9, r2
    7392:	9206      	str	r2, [sp, #24]
    7394:	e69a      	b.n	70cc <frameParse+0x2a4>
    7396:	4663      	mov	r3, ip
    7398:	46bc      	mov	ip, r7
    739a:	0037      	movs	r7, r6
    739c:	001e      	movs	r6, r3
    739e:	4661      	mov	r1, ip
    73a0:	88e3      	ldrh	r3, [r4, #6]
    73a2:	7a22      	ldrb	r2, [r4, #8]
    73a4:	800b      	strh	r3, [r1, #0]
    73a6:	4653      	mov	r3, sl
    73a8:	681b      	ldr	r3, [r3, #0]
    73aa:	699b      	ldr	r3, [r3, #24]
    73ac:	19db      	adds	r3, r3, r7
    73ae:	709a      	strb	r2, [r3, #2]
    73b0:	4653      	mov	r3, sl
    73b2:	2229      	movs	r2, #41	; 0x29
    73b4:	681b      	ldr	r3, [r3, #0]
    73b6:	5c9a      	ldrb	r2, [r3, r2]
    73b8:	699b      	ldr	r3, [r3, #24]
    73ba:	19df      	adds	r7, r3, r7
    73bc:	70fa      	strb	r2, [r7, #3]
    73be:	e6c3      	b.n	7148 <frameParse+0x320>
    73c0:	88e3      	ldrh	r3, [r4, #6]
    73c2:	2078      	movs	r0, #120	; 0x78
    73c4:	930a      	str	r3, [sp, #40]	; 0x28
    73c6:	7a23      	ldrb	r3, [r4, #8]
    73c8:	930b      	str	r3, [sp, #44]	; 0x2c
    73ca:	4b65      	ldr	r3, [pc, #404]	; (7560 <frameParse+0x738>)
    73cc:	4798      	blx	r3
    73ce:	9009      	str	r0, [sp, #36]	; 0x24
    73d0:	2800      	cmp	r0, #0
    73d2:	d100      	bne.n	73d6 <frameParse+0x5ae>
    73d4:	e079      	b.n	74ca <frameParse+0x6a2>
    73d6:	4652      	mov	r2, sl
    73d8:	8811      	ldrh	r1, [r2, #0]
    73da:	22ff      	movs	r2, #255	; 0xff
    73dc:	2003      	movs	r0, #3
    73de:	ab16      	add	r3, sp, #88	; 0x58
    73e0:	701a      	strb	r2, [r3, #0]
    73e2:	9308      	str	r3, [sp, #32]
    73e4:	785b      	ldrb	r3, [r3, #1]
    73e6:	4692      	mov	sl, r2
    73e8:	4383      	bics	r3, r0
    73ea:	2001      	movs	r0, #1
    73ec:	4318      	orrs	r0, r3
    73ee:	23f7      	movs	r3, #247	; 0xf7
    73f0:	4003      	ands	r3, r0
    73f2:	2004      	movs	r0, #4
    73f4:	4303      	orrs	r3, r0
    73f6:	2020      	movs	r0, #32
    73f8:	227f      	movs	r2, #127	; 0x7f
    73fa:	b2db      	uxtb	r3, r3
    73fc:	4383      	bics	r3, r0
    73fe:	4013      	ands	r3, r2
    7400:	43ab      	bics	r3, r5
    7402:	9d08      	ldr	r5, [sp, #32]
    7404:	466a      	mov	r2, sp
    7406:	706b      	strb	r3, [r5, #1]
    7408:	4b56      	ldr	r3, [pc, #344]	; (7564 <frameParse+0x73c>)
    740a:	80e9      	strh	r1, [r5, #6]
    740c:	881b      	ldrh	r3, [r3, #0]
    740e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7410:	806b      	strh	r3, [r5, #2]
    7412:	4653      	mov	r3, sl
    7414:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    7416:	80aa      	strh	r2, [r5, #4]
    7418:	700b      	strb	r3, [r1, #0]
    741a:	786b      	ldrb	r3, [r5, #1]
    741c:	4a52      	ldr	r2, [pc, #328]	; (7568 <frameParse+0x740>)
    741e:	704b      	strb	r3, [r1, #1]
    7420:	7813      	ldrb	r3, [r2, #0]
    7422:	3301      	adds	r3, #1
    7424:	b2db      	uxtb	r3, r3
    7426:	708b      	strb	r3, [r1, #2]
    7428:	7013      	strb	r3, [r2, #0]
    742a:	786a      	ldrb	r2, [r5, #1]
    742c:	4210      	tst	r0, r2
    742e:	d000      	beq.n	7432 <frameParse+0x60a>
    7430:	e0c0      	b.n	75b4 <frameParse+0x78c>
    7432:	0008      	movs	r0, r1
    7434:	886b      	ldrh	r3, [r5, #2]
    7436:	70cb      	strb	r3, [r1, #3]
    7438:	886b      	ldrh	r3, [r5, #2]
    743a:	0a1b      	lsrs	r3, r3, #8
    743c:	710b      	strb	r3, [r1, #4]
    743e:	88ab      	ldrh	r3, [r5, #4]
    7440:	714b      	strb	r3, [r1, #5]
    7442:	88ab      	ldrh	r3, [r5, #4]
    7444:	2109      	movs	r1, #9
    7446:	0a1b      	lsrs	r3, r3, #8
    7448:	7183      	strb	r3, [r0, #6]
    744a:	88eb      	ldrh	r3, [r5, #6]
    744c:	71c3      	strb	r3, [r0, #7]
    744e:	88eb      	ldrh	r3, [r5, #6]
    7450:	0a1b      	lsrs	r3, r3, #8
    7452:	7203      	strb	r3, [r0, #8]
    7454:	2316      	movs	r3, #22
    7456:	200a      	movs	r0, #10
    7458:	469a      	mov	sl, r3
    745a:	930c      	str	r3, [sp, #48]	; 0x30
    745c:	3b08      	subs	r3, #8
    745e:	930a      	str	r3, [sp, #40]	; 0x28
    7460:	3b05      	subs	r3, #5
    7462:	0752      	lsls	r2, r2, #29
    7464:	d51b      	bpl.n	749e <frameParse+0x676>
    7466:	4a41      	ldr	r2, [pc, #260]	; (756c <frameParse+0x744>)
    7468:	9d08      	ldr	r5, [sp, #32]
    746a:	6811      	ldr	r1, [r2, #0]
    746c:	2220      	movs	r2, #32
    746e:	5c8a      	ldrb	r2, [r1, r2]
    7470:	493f      	ldr	r1, [pc, #252]	; (7570 <frameParse+0x748>)
    7472:	742a      	strb	r2, [r5, #16]
    7474:	6809      	ldr	r1, [r1, #0]
    7476:	910d      	str	r1, [sp, #52]	; 0x34
    7478:	0029      	movs	r1, r5
    747a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    747c:	614d      	str	r5, [r1, #20]
    747e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7480:	a91b      	add	r1, sp, #108	; 0x6c
    7482:	46ac      	mov	ip, r5
    7484:	54ea      	strb	r2, [r5, r3]
    7486:	4460      	add	r0, ip
    7488:	2204      	movs	r2, #4
    748a:	4b3a      	ldr	r3, [pc, #232]	; (7574 <frameParse+0x74c>)
    748c:	4798      	blx	r3
    748e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7490:	4939      	ldr	r1, [pc, #228]	; (7578 <frameParse+0x750>)
    7492:	18e8      	adds	r0, r5, r3
    7494:	2208      	movs	r2, #8
    7496:	4b37      	ldr	r3, [pc, #220]	; (7574 <frameParse+0x74c>)
    7498:	4798      	blx	r3
    749a:	4653      	mov	r3, sl
    749c:	990c      	ldr	r1, [sp, #48]	; 0x30
    749e:	222c      	movs	r2, #44	; 0x2c
    74a0:	466d      	mov	r5, sp
    74a2:	18ad      	adds	r5, r5, r2
    74a4:	782d      	ldrb	r5, [r5, #0]
    74a6:	9809      	ldr	r0, [sp, #36]	; 0x24
    74a8:	3206      	adds	r2, #6
    74aa:	7085      	strb	r5, [r0, #2]
    74ac:	54c2      	strb	r2, [r0, r3]
    74ae:	2300      	movs	r3, #0
    74b0:	9303      	str	r3, [sp, #12]
    74b2:	9302      	str	r3, [sp, #8]
    74b4:	4643      	mov	r3, r8
    74b6:	9301      	str	r3, [sp, #4]
    74b8:	464b      	mov	r3, r9
    74ba:	3a31      	subs	r2, #49	; 0x31
    74bc:	9300      	str	r3, [sp, #0]
    74be:	4d2f      	ldr	r5, [pc, #188]	; (757c <frameParse+0x754>)
    74c0:	0003      	movs	r3, r0
    74c2:	9808      	ldr	r0, [sp, #32]
    74c4:	47a8      	blx	r5
    74c6:	2800      	cmp	r0, #0
    74c8:	d001      	beq.n	74ce <frameParse+0x6a6>
    74ca:	7863      	ldrb	r3, [r4, #1]
    74cc:	e5b0      	b.n	7030 <frameParse+0x208>
    74ce:	4b32      	ldr	r3, [pc, #200]	; (7598 <frameParse+0x770>)
    74d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    74d2:	4798      	blx	r3
    74d4:	7863      	ldrb	r3, [r4, #1]
    74d6:	e5ab      	b.n	7030 <frameParse+0x208>
    74d8:	4b30      	ldr	r3, [pc, #192]	; (759c <frameParse+0x774>)
    74da:	9907      	ldr	r1, [sp, #28]
    74dc:	0020      	movs	r0, r4
    74de:	4798      	blx	r3
    74e0:	7863      	ldrb	r3, [r4, #1]
    74e2:	402b      	ands	r3, r5
    74e4:	e5a9      	b.n	703a <frameParse+0x212>
    74e6:	4b1d      	ldr	r3, [pc, #116]	; (755c <frameParse+0x734>)
    74e8:	781b      	ldrb	r3, [r3, #0]
    74ea:	2b06      	cmp	r3, #6
    74ec:	d000      	beq.n	74f0 <frameParse+0x6c8>
    74ee:	e5ac      	b.n	704a <frameParse+0x222>
    74f0:	7bb3      	ldrb	r3, [r6, #14]
    74f2:	4f2b      	ldr	r7, [pc, #172]	; (75a0 <frameParse+0x778>)
    74f4:	9300      	str	r3, [sp, #0]
    74f6:	4642      	mov	r2, r8
    74f8:	9b07      	ldr	r3, [sp, #28]
    74fa:	4649      	mov	r1, r9
    74fc:	0020      	movs	r0, r4
    74fe:	47b8      	blx	r7
    7500:	7863      	ldrb	r3, [r4, #1]
    7502:	0007      	movs	r7, r0
    7504:	402b      	ands	r3, r5
    7506:	e598      	b.n	703a <frameParse+0x212>
    7508:	881b      	ldrh	r3, [r3, #0]
    750a:	061b      	lsls	r3, r3, #24
    750c:	d400      	bmi.n	7510 <frameParse+0x6e8>
    750e:	e71d      	b.n	734c <frameParse+0x524>
    7510:	4b24      	ldr	r3, [pc, #144]	; (75a4 <frameParse+0x77c>)
    7512:	429a      	cmp	r2, r3
    7514:	d000      	beq.n	7518 <frameParse+0x6f0>
    7516:	e719      	b.n	734c <frameParse+0x524>
    7518:	e597      	b.n	704a <frameParse+0x222>
    751a:	2090      	movs	r0, #144	; 0x90
    751c:	4b10      	ldr	r3, [pc, #64]	; (7560 <frameParse+0x738>)
    751e:	4798      	blx	r3
    7520:	1e06      	subs	r6, r0, #0
    7522:	d100      	bne.n	7526 <frameParse+0x6fe>
    7524:	e525      	b.n	6f72 <frameParse+0x14a>
    7526:	0021      	movs	r1, r4
    7528:	2220      	movs	r2, #32
    752a:	4b12      	ldr	r3, [pc, #72]	; (7574 <frameParse+0x74c>)
    752c:	3018      	adds	r0, #24
    752e:	4798      	blx	r3
    7530:	2338      	movs	r3, #56	; 0x38
    7532:	0030      	movs	r0, r6
    7534:	9a06      	ldr	r2, [sp, #24]
    7536:	9907      	ldr	r1, [sp, #28]
    7538:	54f2      	strb	r2, [r6, r3]
    753a:	3039      	adds	r0, #57	; 0x39
    753c:	60b5      	str	r5, [r6, #8]
    753e:	4b0d      	ldr	r3, [pc, #52]	; (7574 <frameParse+0x74c>)
    7540:	4798      	blx	r3
    7542:	2301      	movs	r3, #1
    7544:	74f3      	strb	r3, [r6, #19]
    7546:	4b18      	ldr	r3, [pc, #96]	; (75a8 <frameParse+0x780>)
    7548:	0031      	movs	r1, r6
    754a:	681a      	ldr	r2, [r3, #0]
    754c:	2327      	movs	r3, #39	; 0x27
    754e:	5cd3      	ldrb	r3, [r2, r3]
    7550:	4816      	ldr	r0, [pc, #88]	; (75ac <frameParse+0x784>)
    7552:	3301      	adds	r3, #1
    7554:	7433      	strb	r3, [r6, #16]
    7556:	4b16      	ldr	r3, [pc, #88]	; (75b0 <frameParse+0x788>)
    7558:	4798      	blx	r3
    755a:	e50a      	b.n	6f72 <frameParse+0x14a>
    755c:	200003ac 	.word	0x200003ac
    7560:	0000339d 	.word	0x0000339d
    7564:	20002c98 	.word	0x20002c98
    7568:	20002c80 	.word	0x20002c80
    756c:	20002c68 	.word	0x20002c68
    7570:	20002cf4 	.word	0x20002cf4
    7574:	0000926f 	.word	0x0000926f
    7578:	20000080 	.word	0x20000080
    757c:	00006699 	.word	0x00006699
    7580:	00006c51 	.word	0x00006c51
    7584:	0000fffc 	.word	0x0000fffc
    7588:	20002cac 	.word	0x20002cac
    758c:	0000ffff 	.word	0x0000ffff
    7590:	200003c4 	.word	0x200003c4
    7594:	00007d25 	.word	0x00007d25
    7598:	000033ed 	.word	0x000033ed
    759c:	00006595 	.word	0x00006595
    75a0:	00008689 	.word	0x00008689
    75a4:	0000fffd 	.word	0x0000fffd
    75a8:	20002c64 	.word	0x20002c64
    75ac:	20002c58 	.word	0x20002c58
    75b0:	00003509 	.word	0x00003509
    75b4:	2310      	movs	r3, #16
    75b6:	469a      	mov	sl, r3
    75b8:	930c      	str	r3, [sp, #48]	; 0x30
    75ba:	3b08      	subs	r3, #8
    75bc:	930a      	str	r3, [sp, #40]	; 0x28
    75be:	2004      	movs	r0, #4
    75c0:	3b05      	subs	r3, #5
    75c2:	2103      	movs	r1, #3
    75c4:	e74d      	b.n	7462 <frameParse+0x63a>
    75c6:	4b2d      	ldr	r3, [pc, #180]	; (767c <frameParse+0x854>)
    75c8:	4798      	blx	r3
    75ca:	2832      	cmp	r0, #50	; 0x32
    75cc:	d801      	bhi.n	75d2 <frameParse+0x7aa>
    75ce:	7863      	ldrb	r3, [r4, #1]
    75d0:	e524      	b.n	701c <frameParse+0x1f4>
    75d2:	2090      	movs	r0, #144	; 0x90
    75d4:	4b2a      	ldr	r3, [pc, #168]	; (7680 <frameParse+0x858>)
    75d6:	4798      	blx	r3
    75d8:	2800      	cmp	r0, #0
    75da:	d100      	bne.n	75de <frameParse+0x7b6>
    75dc:	e4c9      	b.n	6f72 <frameParse+0x14a>
    75de:	9008      	str	r0, [sp, #32]
    75e0:	2220      	movs	r2, #32
    75e2:	0021      	movs	r1, r4
    75e4:	4b27      	ldr	r3, [pc, #156]	; (7684 <frameParse+0x85c>)
    75e6:	3018      	adds	r0, #24
    75e8:	4798      	blx	r3
    75ea:	2338      	movs	r3, #56	; 0x38
    75ec:	9808      	ldr	r0, [sp, #32]
    75ee:	9a06      	ldr	r2, [sp, #24]
    75f0:	9907      	ldr	r1, [sp, #28]
    75f2:	54c2      	strb	r2, [r0, r3]
    75f4:	6085      	str	r5, [r0, #8]
    75f6:	4b23      	ldr	r3, [pc, #140]	; (7684 <frameParse+0x85c>)
    75f8:	3039      	adds	r0, #57	; 0x39
    75fa:	4798      	blx	r3
    75fc:	4653      	mov	r3, sl
    75fe:	2201      	movs	r2, #1
    7600:	6819      	ldr	r1, [r3, #0]
    7602:	2327      	movs	r3, #39	; 0x27
    7604:	9808      	ldr	r0, [sp, #32]
    7606:	74c2      	strb	r2, [r0, #19]
    7608:	5ccb      	ldrb	r3, [r1, r3]
    760a:	7445      	strb	r5, [r0, #17]
    760c:	189b      	adds	r3, r3, r2
    760e:	7403      	strb	r3, [r0, #16]
    7610:	7502      	strb	r2, [r0, #20]
    7612:	0001      	movs	r1, r0
    7614:	4b1c      	ldr	r3, [pc, #112]	; (7688 <frameParse+0x860>)
    7616:	481d      	ldr	r0, [pc, #116]	; (768c <frameParse+0x864>)
    7618:	4798      	blx	r3
    761a:	7863      	ldrb	r3, [r4, #1]
    761c:	e4fe      	b.n	701c <frameParse+0x1f4>
    761e:	2003      	movs	r0, #3
    7620:	2703      	movs	r7, #3
    7622:	e631      	b.n	7288 <frameParse+0x460>
    7624:	2090      	movs	r0, #144	; 0x90
    7626:	4b16      	ldr	r3, [pc, #88]	; (7680 <frameParse+0x858>)
    7628:	4798      	blx	r3
    762a:	1e05      	subs	r5, r0, #0
    762c:	d100      	bne.n	7630 <frameParse+0x808>
    762e:	e4a0      	b.n	6f72 <frameParse+0x14a>
    7630:	2220      	movs	r2, #32
    7632:	0021      	movs	r1, r4
    7634:	4b13      	ldr	r3, [pc, #76]	; (7684 <frameParse+0x85c>)
    7636:	3018      	adds	r0, #24
    7638:	4798      	blx	r3
    763a:	2338      	movs	r3, #56	; 0x38
    763c:	9a06      	ldr	r2, [sp, #24]
    763e:	0028      	movs	r0, r5
    7640:	54ea      	strb	r2, [r5, r3]
    7642:	2300      	movs	r3, #0
    7644:	9907      	ldr	r1, [sp, #28]
    7646:	60ab      	str	r3, [r5, #8]
    7648:	3039      	adds	r0, #57	; 0x39
    764a:	4b0e      	ldr	r3, [pc, #56]	; (7684 <frameParse+0x85c>)
    764c:	4798      	blx	r3
    764e:	2301      	movs	r3, #1
    7650:	74eb      	strb	r3, [r5, #19]
    7652:	88a0      	ldrh	r0, [r4, #4]
    7654:	4b0e      	ldr	r3, [pc, #56]	; (7690 <frameParse+0x868>)
    7656:	4798      	blx	r3
    7658:	2800      	cmp	r0, #0
    765a:	d100      	bne.n	765e <frameParse+0x836>
    765c:	e4d4      	b.n	7008 <frameParse+0x1e0>
    765e:	4b0d      	ldr	r3, [pc, #52]	; (7694 <frameParse+0x86c>)
    7660:	0029      	movs	r1, r5
    7662:	681a      	ldr	r2, [r3, #0]
    7664:	2326      	movs	r3, #38	; 0x26
    7666:	5cd3      	ldrb	r3, [r2, r3]
    7668:	480b      	ldr	r0, [pc, #44]	; (7698 <frameParse+0x870>)
    766a:	3301      	adds	r3, #1
    766c:	742b      	strb	r3, [r5, #16]
    766e:	4b06      	ldr	r3, [pc, #24]	; (7688 <frameParse+0x860>)
    7670:	4798      	blx	r3
    7672:	e47e      	b.n	6f72 <frameParse+0x14a>
    7674:	4684      	mov	ip, r0
    7676:	2700      	movs	r7, #0
    7678:	e691      	b.n	739e <frameParse+0x576>
    767a:	46c0      	nop			; (mov r8, r8)
    767c:	00003429 	.word	0x00003429
    7680:	0000339d 	.word	0x0000339d
    7684:	0000926f 	.word	0x0000926f
    7688:	00003509 	.word	0x00003509
    768c:	20002c58 	.word	0x20002c58
    7690:	00008c39 	.word	0x00008c39
    7694:	20002c64 	.word	0x20002c64
    7698:	20002ce8 	.word	0x20002ce8

0000769c <indirectDataTimerHandler>:
    769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    769e:	46ce      	mov	lr, r9
    76a0:	4647      	mov	r7, r8
    76a2:	b580      	push	{r7, lr}
    76a4:	4e18      	ldr	r6, [pc, #96]	; (7708 <indirectDataTimerHandler+0x6c>)
    76a6:	7a33      	ldrb	r3, [r6, #8]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d029      	beq.n	7700 <indirectDataTimerHandler+0x64>
    76ac:	4b17      	ldr	r3, [pc, #92]	; (770c <indirectDataTimerHandler+0x70>)
    76ae:	2500      	movs	r5, #0
    76b0:	4698      	mov	r8, r3
    76b2:	4b17      	ldr	r3, [pc, #92]	; (7710 <indirectDataTimerHandler+0x74>)
    76b4:	4f17      	ldr	r7, [pc, #92]	; (7714 <indirectDataTimerHandler+0x78>)
    76b6:	4699      	mov	r9, r3
    76b8:	e00d      	b.n	76d6 <indirectDataTimerHandler+0x3a>
    76ba:	6883      	ldr	r3, [r0, #8]
    76bc:	2b00      	cmp	r3, #0
    76be:	d003      	beq.n	76c8 <indirectDataTimerHandler+0x2c>
    76c0:	7c80      	ldrb	r0, [r0, #18]
    76c2:	0022      	movs	r2, r4
    76c4:	2105      	movs	r1, #5
    76c6:	4798      	blx	r3
    76c8:	0020      	movs	r0, r4
    76ca:	47c8      	blx	r9
    76cc:	3501      	adds	r5, #1
    76ce:	7a33      	ldrb	r3, [r6, #8]
    76d0:	b2ed      	uxtb	r5, r5
    76d2:	42ab      	cmp	r3, r5
    76d4:	d914      	bls.n	7700 <indirectDataTimerHandler+0x64>
    76d6:	2100      	movs	r1, #0
    76d8:	0030      	movs	r0, r6
    76da:	47b8      	blx	r7
    76dc:	1e04      	subs	r4, r0, #0
    76de:	d00f      	beq.n	7700 <indirectDataTimerHandler+0x64>
    76e0:	7c03      	ldrb	r3, [r0, #16]
    76e2:	2b00      	cmp	r3, #0
    76e4:	d004      	beq.n	76f0 <indirectDataTimerHandler+0x54>
    76e6:	3b01      	subs	r3, #1
    76e8:	b2db      	uxtb	r3, r3
    76ea:	7403      	strb	r3, [r0, #16]
    76ec:	2b00      	cmp	r3, #0
    76ee:	d0e4      	beq.n	76ba <indirectDataTimerHandler+0x1e>
    76f0:	0021      	movs	r1, r4
    76f2:	0030      	movs	r0, r6
    76f4:	47c0      	blx	r8
    76f6:	3501      	adds	r5, #1
    76f8:	7a33      	ldrb	r3, [r6, #8]
    76fa:	b2ed      	uxtb	r5, r5
    76fc:	42ab      	cmp	r3, r5
    76fe:	d8ea      	bhi.n	76d6 <indirectDataTimerHandler+0x3a>
    7700:	bc0c      	pop	{r2, r3}
    7702:	4690      	mov	r8, r2
    7704:	4699      	mov	r9, r3
    7706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7708:	20002c58 	.word	0x20002c58
    770c:	00003509 	.word	0x00003509
    7710:	000033ed 	.word	0x000033ed
    7714:	00003541 	.word	0x00003541

00007718 <edScanDurationExpired>:
    7718:	2200      	movs	r2, #0
    771a:	4b01      	ldr	r3, [pc, #4]	; (7720 <edScanDurationExpired+0x8>)
    771c:	701a      	strb	r2, [r3, #0]
    771e:	4770      	bx	lr
    7720:	200003cb 	.word	0x200003cb

00007724 <assignAddress>:
    7724:	b5f0      	push	{r4, r5, r6, r7, lr}
    7726:	4645      	mov	r5, r8
    7728:	46de      	mov	lr, fp
    772a:	4657      	mov	r7, sl
    772c:	464e      	mov	r6, r9
    772e:	b5e0      	push	{r5, r6, r7, lr}
    7730:	b087      	sub	sp, #28
    7732:	9303      	str	r3, [sp, #12]
    7734:	b2cb      	uxtb	r3, r1
    7736:	4698      	mov	r8, r3
    7738:	0005      	movs	r5, r0
    773a:	2306      	movs	r3, #6
    773c:	4668      	mov	r0, sp
    773e:	4641      	mov	r1, r8
    7740:	7002      	strb	r2, [r0, #0]
    7742:	420b      	tst	r3, r1
    7744:	d003      	beq.n	774e <assignAddress+0x2a>
    7746:	4013      	ands	r3, r2
    7748:	2b04      	cmp	r3, #4
    774a:	d100      	bne.n	774e <assignAddress+0x2a>
    774c:	e0ae      	b.n	78ac <assignAddress+0x188>
    774e:	4643      	mov	r3, r8
    7750:	079b      	lsls	r3, r3, #30
    7752:	d107      	bne.n	7764 <assignAddress+0x40>
    7754:	488e      	ldr	r0, [pc, #568]	; (7990 <assignAddress+0x26c>)
    7756:	b007      	add	sp, #28
    7758:	bc3c      	pop	{r2, r3, r4, r5}
    775a:	4690      	mov	r8, r2
    775c:	4699      	mov	r9, r3
    775e:	46a2      	mov	sl, r4
    7760:	46ab      	mov	fp, r5
    7762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7764:	9b00      	ldr	r3, [sp, #0]
    7766:	07db      	lsls	r3, r3, #31
    7768:	d550      	bpl.n	780c <assignAddress+0xe8>
    776a:	4b8a      	ldr	r3, [pc, #552]	; (7994 <assignAddress+0x270>)
    776c:	4699      	mov	r9, r3
    776e:	681b      	ldr	r3, [r3, #0]
    7770:	001a      	movs	r2, r3
    7772:	9303      	str	r3, [sp, #12]
    7774:	2323      	movs	r3, #35	; 0x23
    7776:	5cd3      	ldrb	r3, [r2, r3]
    7778:	469b      	mov	fp, r3
    777a:	2b00      	cmp	r3, #0
    777c:	d0ea      	beq.n	7754 <assignAddress+0x30>
    777e:	6893      	ldr	r3, [r2, #8]
    7780:	4f85      	ldr	r7, [pc, #532]	; (7998 <assignAddress+0x274>)
    7782:	469a      	mov	sl, r3
    7784:	001c      	movs	r4, r3
    7786:	003b      	movs	r3, r7
    7788:	2600      	movs	r6, #0
    778a:	4657      	mov	r7, sl
    778c:	469a      	mov	sl, r3
    778e:	1be3      	subs	r3, r4, r7
    7790:	2208      	movs	r2, #8
    7792:	0029      	movs	r1, r5
    7794:	0020      	movs	r0, r4
    7796:	4698      	mov	r8, r3
    7798:	47d0      	blx	sl
    779a:	2800      	cmp	r0, #0
    779c:	d100      	bne.n	77a0 <assignAddress+0x7c>
    779e:	e0e9      	b.n	7974 <assignAddress+0x250>
    77a0:	7823      	ldrb	r3, [r4, #0]
    77a2:	2bff      	cmp	r3, #255	; 0xff
    77a4:	d000      	beq.n	77a8 <assignAddress+0x84>
    77a6:	e0c2      	b.n	792e <assignAddress+0x20a>
    77a8:	7863      	ldrb	r3, [r4, #1]
    77aa:	2bff      	cmp	r3, #255	; 0xff
    77ac:	d000      	beq.n	77b0 <assignAddress+0x8c>
    77ae:	e0be      	b.n	792e <assignAddress+0x20a>
    77b0:	78a3      	ldrb	r3, [r4, #2]
    77b2:	2bff      	cmp	r3, #255	; 0xff
    77b4:	d000      	beq.n	77b8 <assignAddress+0x94>
    77b6:	e0ba      	b.n	792e <assignAddress+0x20a>
    77b8:	78e3      	ldrb	r3, [r4, #3]
    77ba:	2bff      	cmp	r3, #255	; 0xff
    77bc:	d000      	beq.n	77c0 <assignAddress+0x9c>
    77be:	e0b6      	b.n	792e <assignAddress+0x20a>
    77c0:	7923      	ldrb	r3, [r4, #4]
    77c2:	2bff      	cmp	r3, #255	; 0xff
    77c4:	d000      	beq.n	77c8 <assignAddress+0xa4>
    77c6:	e0b2      	b.n	792e <assignAddress+0x20a>
    77c8:	7963      	ldrb	r3, [r4, #5]
    77ca:	2bff      	cmp	r3, #255	; 0xff
    77cc:	d000      	beq.n	77d0 <assignAddress+0xac>
    77ce:	e0ae      	b.n	792e <assignAddress+0x20a>
    77d0:	79a3      	ldrb	r3, [r4, #6]
    77d2:	2bff      	cmp	r3, #255	; 0xff
    77d4:	d000      	beq.n	77d8 <assignAddress+0xb4>
    77d6:	e0aa      	b.n	792e <assignAddress+0x20a>
    77d8:	79e3      	ldrb	r3, [r4, #7]
    77da:	2bff      	cmp	r3, #255	; 0xff
    77dc:	d000      	beq.n	77e0 <assignAddress+0xbc>
    77de:	e0a6      	b.n	792e <assignAddress+0x20a>
    77e0:	2208      	movs	r2, #8
    77e2:	0029      	movs	r1, r5
    77e4:	4b6d      	ldr	r3, [pc, #436]	; (799c <assignAddress+0x278>)
    77e6:	0020      	movs	r0, r4
    77e8:	4798      	blx	r3
    77ea:	464b      	mov	r3, r9
    77ec:	4669      	mov	r1, sp
    77ee:	681a      	ldr	r2, [r3, #0]
    77f0:	7809      	ldrb	r1, [r1, #0]
    77f2:	6893      	ldr	r3, [r2, #8]
    77f4:	4443      	add	r3, r8
    77f6:	7319      	strb	r1, [r3, #12]
    77f8:	6893      	ldr	r3, [r2, #8]
    77fa:	4443      	add	r3, r8
    77fc:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    77fe:	609a      	str	r2, [r3, #8]
    7800:	4b67      	ldr	r3, [pc, #412]	; (79a0 <assignAddress+0x27c>)
    7802:	8818      	ldrh	r0, [r3, #0]
    7804:	3080      	adds	r0, #128	; 0x80
    7806:	1980      	adds	r0, r0, r6
    7808:	b280      	uxth	r0, r0
    780a:	e7a4      	b.n	7756 <assignAddress+0x32>
    780c:	4b61      	ldr	r3, [pc, #388]	; (7994 <assignAddress+0x270>)
    780e:	4699      	mov	r9, r3
    7810:	681b      	ldr	r3, [r3, #0]
    7812:	001a      	movs	r2, r3
    7814:	9304      	str	r3, [sp, #16]
    7816:	2324      	movs	r3, #36	; 0x24
    7818:	5cd3      	ldrb	r3, [r2, r3]
    781a:	469b      	mov	fp, r3
    781c:	2b01      	cmp	r3, #1
    781e:	d999      	bls.n	7754 <assignAddress+0x30>
    7820:	68d3      	ldr	r3, [r2, #12]
    7822:	4f5d      	ldr	r7, [pc, #372]	; (7998 <assignAddress+0x274>)
    7824:	469a      	mov	sl, r3
    7826:	001c      	movs	r4, r3
    7828:	003b      	movs	r3, r7
    782a:	2601      	movs	r6, #1
    782c:	4657      	mov	r7, sl
    782e:	469a      	mov	sl, r3
    7830:	3414      	adds	r4, #20
    7832:	1be3      	subs	r3, r4, r7
    7834:	2208      	movs	r2, #8
    7836:	0029      	movs	r1, r5
    7838:	0020      	movs	r0, r4
    783a:	4698      	mov	r8, r3
    783c:	47d0      	blx	sl
    783e:	2800      	cmp	r0, #0
    7840:	d100      	bne.n	7844 <assignAddress+0x120>
    7842:	e08a      	b.n	795a <assignAddress+0x236>
    7844:	7823      	ldrb	r3, [r4, #0]
    7846:	2bff      	cmp	r3, #255	; 0xff
    7848:	d178      	bne.n	793c <assignAddress+0x218>
    784a:	7863      	ldrb	r3, [r4, #1]
    784c:	2bff      	cmp	r3, #255	; 0xff
    784e:	d175      	bne.n	793c <assignAddress+0x218>
    7850:	78a3      	ldrb	r3, [r4, #2]
    7852:	2bff      	cmp	r3, #255	; 0xff
    7854:	d172      	bne.n	793c <assignAddress+0x218>
    7856:	78e3      	ldrb	r3, [r4, #3]
    7858:	2bff      	cmp	r3, #255	; 0xff
    785a:	d16f      	bne.n	793c <assignAddress+0x218>
    785c:	7923      	ldrb	r3, [r4, #4]
    785e:	2bff      	cmp	r3, #255	; 0xff
    7860:	d16c      	bne.n	793c <assignAddress+0x218>
    7862:	7963      	ldrb	r3, [r4, #5]
    7864:	2bff      	cmp	r3, #255	; 0xff
    7866:	d169      	bne.n	793c <assignAddress+0x218>
    7868:	79a3      	ldrb	r3, [r4, #6]
    786a:	2bff      	cmp	r3, #255	; 0xff
    786c:	d166      	bne.n	793c <assignAddress+0x218>
    786e:	79e3      	ldrb	r3, [r4, #7]
    7870:	2bff      	cmp	r3, #255	; 0xff
    7872:	d163      	bne.n	793c <assignAddress+0x218>
    7874:	0029      	movs	r1, r5
    7876:	2208      	movs	r2, #8
    7878:	0020      	movs	r0, r4
    787a:	4c48      	ldr	r4, [pc, #288]	; (799c <assignAddress+0x278>)
    787c:	47a0      	blx	r4
    787e:	464b      	mov	r3, r9
    7880:	466a      	mov	r2, sp
    7882:	681d      	ldr	r5, [r3, #0]
    7884:	7812      	ldrb	r2, [r2, #0]
    7886:	68eb      	ldr	r3, [r5, #12]
    7888:	9903      	ldr	r1, [sp, #12]
    788a:	4443      	add	r3, r8
    788c:	741a      	strb	r2, [r3, #16]
    788e:	68eb      	ldr	r3, [r5, #12]
    7890:	2204      	movs	r2, #4
    7892:	4443      	add	r3, r8
    7894:	0018      	movs	r0, r3
    7896:	3008      	adds	r0, #8
    7898:	47a0      	blx	r4
    789a:	68eb      	ldr	r3, [r5, #12]
    789c:	4443      	add	r3, r8
    789e:	689a      	ldr	r2, [r3, #8]
    78a0:	60da      	str	r2, [r3, #12]
    78a2:	4b3f      	ldr	r3, [pc, #252]	; (79a0 <assignAddress+0x27c>)
    78a4:	8818      	ldrh	r0, [r3, #0]
    78a6:	1980      	adds	r0, r0, r6
    78a8:	b280      	uxth	r0, r0
    78aa:	e754      	b.n	7756 <assignAddress+0x32>
    78ac:	4b39      	ldr	r3, [pc, #228]	; (7994 <assignAddress+0x270>)
    78ae:	4699      	mov	r9, r3
    78b0:	681b      	ldr	r3, [r3, #0]
    78b2:	001a      	movs	r2, r3
    78b4:	9304      	str	r3, [sp, #16]
    78b6:	2320      	movs	r3, #32
    78b8:	5cd3      	ldrb	r3, [r2, r3]
    78ba:	2b01      	cmp	r3, #1
    78bc:	d800      	bhi.n	78c0 <assignAddress+0x19c>
    78be:	e746      	b.n	774e <assignAddress+0x2a>
    78c0:	6812      	ldr	r2, [r2, #0]
    78c2:	4f35      	ldr	r7, [pc, #212]	; (7998 <assignAddress+0x274>)
    78c4:	4693      	mov	fp, r2
    78c6:	0014      	movs	r4, r2
    78c8:	46b8      	mov	r8, r7
    78ca:	2601      	movs	r6, #1
    78cc:	465f      	mov	r7, fp
    78ce:	469b      	mov	fp, r3
    78d0:	340c      	adds	r4, #12
    78d2:	9105      	str	r1, [sp, #20]
    78d4:	1be3      	subs	r3, r4, r7
    78d6:	2208      	movs	r2, #8
    78d8:	0029      	movs	r1, r5
    78da:	0020      	movs	r0, r4
    78dc:	469a      	mov	sl, r3
    78de:	47c0      	blx	r8
    78e0:	2800      	cmp	r0, #0
    78e2:	d04d      	beq.n	7980 <assignAddress+0x25c>
    78e4:	7823      	ldrb	r3, [r4, #0]
    78e6:	2bff      	cmp	r3, #255	; 0xff
    78e8:	d12f      	bne.n	794a <assignAddress+0x226>
    78ea:	7863      	ldrb	r3, [r4, #1]
    78ec:	2bff      	cmp	r3, #255	; 0xff
    78ee:	d12c      	bne.n	794a <assignAddress+0x226>
    78f0:	78a3      	ldrb	r3, [r4, #2]
    78f2:	2bff      	cmp	r3, #255	; 0xff
    78f4:	d129      	bne.n	794a <assignAddress+0x226>
    78f6:	78e3      	ldrb	r3, [r4, #3]
    78f8:	2bff      	cmp	r3, #255	; 0xff
    78fa:	d126      	bne.n	794a <assignAddress+0x226>
    78fc:	7923      	ldrb	r3, [r4, #4]
    78fe:	2bff      	cmp	r3, #255	; 0xff
    7900:	d123      	bne.n	794a <assignAddress+0x226>
    7902:	7963      	ldrb	r3, [r4, #5]
    7904:	2bff      	cmp	r3, #255	; 0xff
    7906:	d120      	bne.n	794a <assignAddress+0x226>
    7908:	79a3      	ldrb	r3, [r4, #6]
    790a:	2bff      	cmp	r3, #255	; 0xff
    790c:	d11d      	bne.n	794a <assignAddress+0x226>
    790e:	79e3      	ldrb	r3, [r4, #7]
    7910:	2bff      	cmp	r3, #255	; 0xff
    7912:	d11a      	bne.n	794a <assignAddress+0x226>
    7914:	2208      	movs	r2, #8
    7916:	4b21      	ldr	r3, [pc, #132]	; (799c <assignAddress+0x278>)
    7918:	0029      	movs	r1, r5
    791a:	0020      	movs	r0, r4
    791c:	4798      	blx	r3
    791e:	464b      	mov	r3, r9
    7920:	681a      	ldr	r2, [r3, #0]
    7922:	0230      	lsls	r0, r6, #8
    7924:	6813      	ldr	r3, [r2, #0]
    7926:	8bd2      	ldrh	r2, [r2, #30]
    7928:	4453      	add	r3, sl
    792a:	609a      	str	r2, [r3, #8]
    792c:	e713      	b.n	7756 <assignAddress+0x32>
    792e:	3601      	adds	r6, #1
    7930:	b2f6      	uxtb	r6, r6
    7932:	3410      	adds	r4, #16
    7934:	455e      	cmp	r6, fp
    7936:	d000      	beq.n	793a <assignAddress+0x216>
    7938:	e729      	b.n	778e <assignAddress+0x6a>
    793a:	e70b      	b.n	7754 <assignAddress+0x30>
    793c:	3601      	adds	r6, #1
    793e:	b2f6      	uxtb	r6, r6
    7940:	3414      	adds	r4, #20
    7942:	455e      	cmp	r6, fp
    7944:	d000      	beq.n	7948 <assignAddress+0x224>
    7946:	e774      	b.n	7832 <assignAddress+0x10e>
    7948:	e704      	b.n	7754 <assignAddress+0x30>
    794a:	3601      	adds	r6, #1
    794c:	b2f6      	uxtb	r6, r6
    794e:	340c      	adds	r4, #12
    7950:	455e      	cmp	r6, fp
    7952:	d1bf      	bne.n	78d4 <assignAddress+0x1b0>
    7954:	9b05      	ldr	r3, [sp, #20]
    7956:	4698      	mov	r8, r3
    7958:	e6f9      	b.n	774e <assignAddress+0x2a>
    795a:	46ba      	mov	sl, r7
    795c:	4811      	ldr	r0, [pc, #68]	; (79a4 <assignAddress+0x280>)
    795e:	2204      	movs	r2, #4
    7960:	4b0e      	ldr	r3, [pc, #56]	; (799c <assignAddress+0x278>)
    7962:	4450      	add	r0, sl
    7964:	9903      	ldr	r1, [sp, #12]
    7966:	4798      	blx	r3
    7968:	4a0f      	ldr	r2, [pc, #60]	; (79a8 <assignAddress+0x284>)
    796a:	9b04      	ldr	r3, [sp, #16]
    796c:	4694      	mov	ip, r2
    796e:	68db      	ldr	r3, [r3, #12]
    7970:	4463      	add	r3, ip
    7972:	e794      	b.n	789e <assignAddress+0x17a>
    7974:	23ff      	movs	r3, #255	; 0xff
    7976:	46ba      	mov	sl, r7
    7978:	011b      	lsls	r3, r3, #4
    797a:	4453      	add	r3, sl
    797c:	9a03      	ldr	r2, [sp, #12]
    797e:	e73d      	b.n	77fc <assignAddress+0xd8>
    7980:	46bb      	mov	fp, r7
    7982:	9a04      	ldr	r2, [sp, #16]
    7984:	4b09      	ldr	r3, [pc, #36]	; (79ac <assignAddress+0x288>)
    7986:	8bd2      	ldrh	r2, [r2, #30]
    7988:	445b      	add	r3, fp
    798a:	609a      	str	r2, [r3, #8]
    798c:	0230      	lsls	r0, r6, #8
    798e:	e6e2      	b.n	7756 <assignAddress+0x32>
    7990:	0000ffff 	.word	0x0000ffff
    7994:	20002c64 	.word	0x20002c64
    7998:	00009251 	.word	0x00009251
    799c:	0000926f 	.word	0x0000926f
    79a0:	20002cac 	.word	0x20002cac
    79a4:	000013f4 	.word	0x000013f4
    79a8:	000013ec 	.word	0x000013ec
    79ac:	00000bf4 	.word	0x00000bf4

000079b0 <commandConfcb>:
    79b0:	b510      	push	{r4, lr}
    79b2:	0010      	movs	r0, r2
    79b4:	4b01      	ldr	r3, [pc, #4]	; (79bc <commandConfcb+0xc>)
    79b6:	4798      	blx	r3
    79b8:	bd10      	pop	{r4, pc}
    79ba:	46c0      	nop			; (mov r8, r8)
    79bc:	000033ed 	.word	0x000033ed

000079c0 <MiApp_NoiseDetection.part.0>:
    79c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79c2:	4645      	mov	r5, r8
    79c4:	464e      	mov	r6, r9
    79c6:	46de      	mov	lr, fp
    79c8:	4657      	mov	r7, sl
    79ca:	b5e0      	push	{r5, r6, r7, lr}
    79cc:	b087      	sub	sp, #28
    79ce:	ab04      	add	r3, sp, #16
    79d0:	1ddd      	adds	r5, r3, #7
    79d2:	2300      	movs	r3, #0
    79d4:	702b      	strb	r3, [r5, #0]
    79d6:	3301      	adds	r3, #1
    79d8:	408b      	lsls	r3, r1
    79da:	3301      	adds	r3, #1
    79dc:	9203      	str	r2, [sp, #12]
    79de:	011a      	lsls	r2, r3, #4
    79e0:	1ad3      	subs	r3, r2, r3
    79e2:	019b      	lsls	r3, r3, #6
    79e4:	9300      	str	r3, [sp, #0]
    79e6:	23ff      	movs	r3, #255	; 0xff
    79e8:	9302      	str	r3, [sp, #8]
    79ea:	9301      	str	r3, [sp, #4]
    79ec:	4b2d      	ldr	r3, [pc, #180]	; (7aa4 <MiApp_NoiseDetection.part.0+0xe4>)
    79ee:	4681      	mov	r9, r0
    79f0:	4698      	mov	r8, r3
    79f2:	4c2d      	ldr	r4, [pc, #180]	; (7aa8 <MiApp_NoiseDetection.part.0+0xe8>)
    79f4:	e004      	b.n	7a00 <MiApp_NoiseDetection.part.0+0x40>
    79f6:	3301      	adds	r3, #1
    79f8:	b2db      	uxtb	r3, r3
    79fa:	702b      	strb	r3, [r5, #0]
    79fc:	2b1f      	cmp	r3, #31
    79fe:	d83e      	bhi.n	7a7e <MiApp_NoiseDetection.part.0+0xbe>
    7a00:	2601      	movs	r6, #1
    7a02:	47c0      	blx	r8
    7a04:	0032      	movs	r2, r6
    7a06:	782b      	ldrb	r3, [r5, #0]
    7a08:	4649      	mov	r1, r9
    7a0a:	409a      	lsls	r2, r3
    7a0c:	400a      	ands	r2, r1
    7a0e:	4210      	tst	r0, r2
    7a10:	d0f1      	beq.n	79f6 <MiApp_NoiseDetection.part.0+0x36>
    7a12:	0029      	movs	r1, r5
    7a14:	4b25      	ldr	r3, [pc, #148]	; (7aac <MiApp_NoiseDetection.part.0+0xec>)
    7a16:	2000      	movs	r0, #0
    7a18:	4798      	blx	r3
    7a1a:	4f25      	ldr	r7, [pc, #148]	; (7ab0 <MiApp_NoiseDetection.part.0+0xf0>)
    7a1c:	4b25      	ldr	r3, [pc, #148]	; (7ab4 <MiApp_NoiseDetection.part.0+0xf4>)
    7a1e:	9800      	ldr	r0, [sp, #0]
    7a20:	613b      	str	r3, [r7, #16]
    7a22:	4b25      	ldr	r3, [pc, #148]	; (7ab8 <MiApp_NoiseDetection.part.0+0xf8>)
    7a24:	469b      	mov	fp, r3
    7a26:	4798      	blx	r3
    7a28:	21fa      	movs	r1, #250	; 0xfa
    7a2a:	4b24      	ldr	r3, [pc, #144]	; (7abc <MiApp_NoiseDetection.part.0+0xfc>)
    7a2c:	0089      	lsls	r1, r1, #2
    7a2e:	469a      	mov	sl, r3
    7a30:	4798      	blx	r3
    7a32:	6078      	str	r0, [r7, #4]
    7a34:	9800      	ldr	r0, [sp, #0]
    7a36:	47d8      	blx	fp
    7a38:	21fa      	movs	r1, #250	; 0xfa
    7a3a:	0089      	lsls	r1, r1, #2
    7a3c:	47d0      	blx	sl
    7a3e:	2300      	movs	r3, #0
    7a40:	60b8      	str	r0, [r7, #8]
    7a42:	733b      	strb	r3, [r7, #12]
    7a44:	0038      	movs	r0, r7
    7a46:	4b1e      	ldr	r3, [pc, #120]	; (7ac0 <MiApp_NoiseDetection.part.0+0x100>)
    7a48:	4798      	blx	r3
    7a4a:	4f1e      	ldr	r7, [pc, #120]	; (7ac4 <MiApp_NoiseDetection.part.0+0x104>)
    7a4c:	4b1e      	ldr	r3, [pc, #120]	; (7ac8 <MiApp_NoiseDetection.part.0+0x108>)
    7a4e:	703e      	strb	r6, [r7, #0]
    7a50:	469a      	mov	sl, r3
    7a52:	2600      	movs	r6, #0
    7a54:	e000      	b.n	7a58 <MiApp_NoiseDetection.part.0+0x98>
    7a56:	47a0      	blx	r4
    7a58:	2001      	movs	r0, #1
    7a5a:	47d0      	blx	sl
    7a5c:	1c03      	adds	r3, r0, #0
    7a5e:	42b0      	cmp	r0, r6
    7a60:	d200      	bcs.n	7a64 <MiApp_NoiseDetection.part.0+0xa4>
    7a62:	1c33      	adds	r3, r6, #0
    7a64:	b2de      	uxtb	r6, r3
    7a66:	783b      	ldrb	r3, [r7, #0]
    7a68:	2b00      	cmp	r3, #0
    7a6a:	d1f4      	bne.n	7a56 <MiApp_NoiseDetection.part.0+0x96>
    7a6c:	9b01      	ldr	r3, [sp, #4]
    7a6e:	429e      	cmp	r6, r3
    7a70:	d30d      	bcc.n	7a8e <MiApp_NoiseDetection.part.0+0xce>
    7a72:	782b      	ldrb	r3, [r5, #0]
    7a74:	3301      	adds	r3, #1
    7a76:	b2db      	uxtb	r3, r3
    7a78:	702b      	strb	r3, [r5, #0]
    7a7a:	2b1f      	cmp	r3, #31
    7a7c:	d9c0      	bls.n	7a00 <MiApp_NoiseDetection.part.0+0x40>
    7a7e:	9802      	ldr	r0, [sp, #8]
    7a80:	b007      	add	sp, #28
    7a82:	bc3c      	pop	{r2, r3, r4, r5}
    7a84:	4690      	mov	r8, r2
    7a86:	4699      	mov	r9, r3
    7a88:	46a2      	mov	sl, r4
    7a8a:	46ab      	mov	fp, r5
    7a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a8e:	782b      	ldrb	r3, [r5, #0]
    7a90:	9a03      	ldr	r2, [sp, #12]
    7a92:	9302      	str	r3, [sp, #8]
    7a94:	2a00      	cmp	r2, #0
    7a96:	d002      	beq.n	7a9e <MiApp_NoiseDetection.part.0+0xde>
    7a98:	7016      	strb	r6, [r2, #0]
    7a9a:	9601      	str	r6, [sp, #4]
    7a9c:	e7ab      	b.n	79f6 <MiApp_NoiseDetection.part.0+0x36>
    7a9e:	9601      	str	r6, [sp, #4]
    7aa0:	e7a9      	b.n	79f6 <MiApp_NoiseDetection.part.0+0x36>
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	00002b99 	.word	0x00002b99
    7aa8:	00003691 	.word	0x00003691
    7aac:	000051bd 	.word	0x000051bd
    7ab0:	20002cc8 	.word	0x20002cc8
    7ab4:	00007719 	.word	0x00007719
    7ab8:	00002b95 	.word	0x00002b95
    7abc:	00008ec9 	.word	0x00008ec9
    7ac0:	00003671 	.word	0x00003671
    7ac4:	200003cb 	.word	0x200003cb
    7ac8:	00002b7d 	.word	0x00002b7d

00007acc <MiApp_StartConnection>:
    7acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ace:	4647      	mov	r7, r8
    7ad0:	46ce      	mov	lr, r9
    7ad2:	b580      	push	{r7, lr}
    7ad4:	000d      	movs	r5, r1
    7ad6:	b083      	sub	sp, #12
    7ad8:	0017      	movs	r7, r2
    7ada:	001e      	movs	r6, r3
    7adc:	2400      	movs	r4, #0
    7ade:	290e      	cmp	r1, #14
    7ae0:	d807      	bhi.n	7af2 <MiApp_StartConnection+0x26>
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	d005      	beq.n	7af2 <MiApp_StartConnection+0x26>
    7ae6:	4b2a      	ldr	r3, [pc, #168]	; (7b90 <MiApp_StartConnection+0xc4>)
    7ae8:	4698      	mov	r8, r3
    7aea:	781b      	ldrb	r3, [r3, #0]
    7aec:	4699      	mov	r9, r3
    7aee:	2b01      	cmp	r3, #1
    7af0:	d005      	beq.n	7afe <MiApp_StartConnection+0x32>
    7af2:	0020      	movs	r0, r4
    7af4:	b003      	add	sp, #12
    7af6:	bc0c      	pop	{r2, r3}
    7af8:	4690      	mov	r8, r2
    7afa:	4699      	mov	r9, r3
    7afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7afe:	4642      	mov	r2, r8
    7b00:	3301      	adds	r3, #1
    7b02:	7013      	strb	r3, [r2, #0]
    7b04:	2801      	cmp	r0, #1
    7b06:	d007      	beq.n	7b18 <MiApp_StartConnection+0x4c>
    7b08:	2800      	cmp	r0, #0
    7b0a:	d022      	beq.n	7b52 <MiApp_StartConnection+0x86>
    7b0c:	2001      	movs	r0, #1
    7b0e:	47b0      	blx	r6
    7b10:	4643      	mov	r3, r8
    7b12:	464a      	mov	r2, r9
    7b14:	701a      	strb	r2, [r3, #0]
    7b16:	e7ec      	b.n	7af2 <MiApp_StartConnection+0x26>
    7b18:	491e      	ldr	r1, [pc, #120]	; (7b94 <MiApp_StartConnection+0xc8>)
    7b1a:	4b1f      	ldr	r3, [pc, #124]	; (7b98 <MiApp_StartConnection+0xcc>)
    7b1c:	481f      	ldr	r0, [pc, #124]	; (7b9c <MiApp_StartConnection+0xd0>)
    7b1e:	800b      	strh	r3, [r1, #0]
    7b20:	4b1f      	ldr	r3, [pc, #124]	; (7ba0 <MiApp_StartConnection+0xd4>)
    7b22:	8004      	strh	r4, [r0, #0]
    7b24:	4798      	blx	r3
    7b26:	2200      	movs	r2, #0
    7b28:	4b1e      	ldr	r3, [pc, #120]	; (7ba4 <MiApp_StartConnection+0xd8>)
    7b2a:	0029      	movs	r1, r5
    7b2c:	701a      	strb	r2, [r3, #0]
    7b2e:	466b      	mov	r3, sp
    7b30:	0038      	movs	r0, r7
    7b32:	1dda      	adds	r2, r3, #7
    7b34:	4b1c      	ldr	r3, [pc, #112]	; (7ba8 <MiApp_StartConnection+0xdc>)
    7b36:	4798      	blx	r3
    7b38:	466b      	mov	r3, sp
    7b3a:	1d99      	adds	r1, r3, #6
    7b3c:	7008      	strb	r0, [r1, #0]
    7b3e:	4b1b      	ldr	r3, [pc, #108]	; (7bac <MiApp_StartConnection+0xe0>)
    7b40:	2000      	movs	r0, #0
    7b42:	4798      	blx	r3
    7b44:	2000      	movs	r0, #0
    7b46:	47b0      	blx	r6
    7b48:	2306      	movs	r3, #6
    7b4a:	4642      	mov	r2, r8
    7b4c:	2401      	movs	r4, #1
    7b4e:	7013      	strb	r3, [r2, #0]
    7b50:	e7cf      	b.n	7af2 <MiApp_StartConnection+0x26>
    7b52:	466b      	mov	r3, sp
    7b54:	4c0f      	ldr	r4, [pc, #60]	; (7b94 <MiApp_StartConnection+0xc8>)
    7b56:	71d8      	strb	r0, [r3, #7]
    7b58:	4b0f      	ldr	r3, [pc, #60]	; (7b98 <MiApp_StartConnection+0xcc>)
    7b5a:	2101      	movs	r1, #1
    7b5c:	8023      	strh	r3, [r4, #0]
    7b5e:	464b      	mov	r3, r9
    7b60:	2201      	movs	r2, #1
    7b62:	423b      	tst	r3, r7
    7b64:	d00c      	beq.n	7b80 <MiApp_StartConnection+0xb4>
    7b66:	466b      	mov	r3, sp
    7b68:	2000      	movs	r0, #0
    7b6a:	1dd9      	adds	r1, r3, #7
    7b6c:	4b0f      	ldr	r3, [pc, #60]	; (7bac <MiApp_StartConnection+0xe0>)
    7b6e:	4798      	blx	r3
    7b70:	2300      	movs	r3, #0
    7b72:	480a      	ldr	r0, [pc, #40]	; (7b9c <MiApp_StartConnection+0xd0>)
    7b74:	0021      	movs	r1, r4
    7b76:	8003      	strh	r3, [r0, #0]
    7b78:	4b09      	ldr	r3, [pc, #36]	; (7ba0 <MiApp_StartConnection+0xd4>)
    7b7a:	4798      	blx	r3
    7b7c:	e7e2      	b.n	7b44 <MiApp_StartConnection+0x78>
    7b7e:	0019      	movs	r1, r3
    7b80:	1c4b      	adds	r3, r1, #1
    7b82:	0052      	lsls	r2, r2, #1
    7b84:	b2db      	uxtb	r3, r3
    7b86:	423a      	tst	r2, r7
    7b88:	d0f9      	beq.n	7b7e <MiApp_StartConnection+0xb2>
    7b8a:	466b      	mov	r3, sp
    7b8c:	71d9      	strb	r1, [r3, #7]
    7b8e:	e7ea      	b.n	7b66 <MiApp_StartConnection+0x9a>
    7b90:	200003ac 	.word	0x200003ac
    7b94:	20002c98 	.word	0x20002c98
    7b98:	00001234 	.word	0x00001234
    7b9c:	20002cac 	.word	0x20002cac
    7ba0:	00002491 	.word	0x00002491
    7ba4:	200003cb 	.word	0x200003cb
    7ba8:	000079c1 	.word	0x000079c1
    7bac:	000051bd 	.word	0x000051bd

00007bb0 <calculatePermitCapacity>:
    7bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bb2:	46de      	mov	lr, fp
    7bb4:	4657      	mov	r7, sl
    7bb6:	4645      	mov	r5, r8
    7bb8:	464e      	mov	r6, r9
    7bba:	2320      	movs	r3, #32
    7bbc:	b5e0      	push	{r5, r6, r7, lr}
    7bbe:	4d57      	ldr	r5, [pc, #348]	; (7d1c <calculatePermitCapacity+0x16c>)
    7bc0:	468a      	mov	sl, r1
    7bc2:	6829      	ldr	r1, [r5, #0]
    7bc4:	4683      	mov	fp, r0
    7bc6:	5cca      	ldrb	r2, [r1, r3]
    7bc8:	2a01      	cmp	r2, #1
    7bca:	d800      	bhi.n	7bce <calculatePermitCapacity+0x1e>
    7bcc:	e09d      	b.n	7d0a <calculatePermitCapacity+0x15a>
    7bce:	6808      	ldr	r0, [r1, #0]
    7bd0:	3a02      	subs	r2, #2
    7bd2:	b2d2      	uxtb	r2, r2
    7bd4:	0003      	movs	r3, r0
    7bd6:	0054      	lsls	r4, r2, #1
    7bd8:	18a2      	adds	r2, r4, r2
    7bda:	2400      	movs	r4, #0
    7bdc:	0092      	lsls	r2, r2, #2
    7bde:	3218      	adds	r2, #24
    7be0:	330c      	adds	r3, #12
    7be2:	1880      	adds	r0, r0, r2
    7be4:	781a      	ldrb	r2, [r3, #0]
    7be6:	2aff      	cmp	r2, #255	; 0xff
    7be8:	d115      	bne.n	7c16 <calculatePermitCapacity+0x66>
    7bea:	785a      	ldrb	r2, [r3, #1]
    7bec:	2aff      	cmp	r2, #255	; 0xff
    7bee:	d112      	bne.n	7c16 <calculatePermitCapacity+0x66>
    7bf0:	789a      	ldrb	r2, [r3, #2]
    7bf2:	2aff      	cmp	r2, #255	; 0xff
    7bf4:	d10f      	bne.n	7c16 <calculatePermitCapacity+0x66>
    7bf6:	78da      	ldrb	r2, [r3, #3]
    7bf8:	2aff      	cmp	r2, #255	; 0xff
    7bfa:	d10c      	bne.n	7c16 <calculatePermitCapacity+0x66>
    7bfc:	791a      	ldrb	r2, [r3, #4]
    7bfe:	2aff      	cmp	r2, #255	; 0xff
    7c00:	d109      	bne.n	7c16 <calculatePermitCapacity+0x66>
    7c02:	795a      	ldrb	r2, [r3, #5]
    7c04:	2aff      	cmp	r2, #255	; 0xff
    7c06:	d106      	bne.n	7c16 <calculatePermitCapacity+0x66>
    7c08:	799a      	ldrb	r2, [r3, #6]
    7c0a:	2aff      	cmp	r2, #255	; 0xff
    7c0c:	d103      	bne.n	7c16 <calculatePermitCapacity+0x66>
    7c0e:	79da      	ldrb	r2, [r3, #7]
    7c10:	2aff      	cmp	r2, #255	; 0xff
    7c12:	d100      	bne.n	7c16 <calculatePermitCapacity+0x66>
    7c14:	2401      	movs	r4, #1
    7c16:	330c      	adds	r3, #12
    7c18:	4298      	cmp	r0, r3
    7c1a:	d1e3      	bne.n	7be4 <calculatePermitCapacity+0x34>
    7c1c:	2323      	movs	r3, #35	; 0x23
    7c1e:	5cce      	ldrb	r6, [r1, r3]
    7c20:	2e00      	cmp	r6, #0
    7c22:	d100      	bne.n	7c26 <calculatePermitCapacity+0x76>
    7c24:	e073      	b.n	7d0e <calculatePermitCapacity+0x15e>
    7c26:	1e72      	subs	r2, r6, #1
    7c28:	b2d2      	uxtb	r2, r2
    7c2a:	688b      	ldr	r3, [r1, #8]
    7c2c:	3201      	adds	r2, #1
    7c2e:	0112      	lsls	r2, r2, #4
    7c30:	189f      	adds	r7, r3, r2
    7c32:	2200      	movs	r2, #0
    7c34:	7818      	ldrb	r0, [r3, #0]
    7c36:	28ff      	cmp	r0, #255	; 0xff
    7c38:	d164      	bne.n	7d04 <calculatePermitCapacity+0x154>
    7c3a:	7858      	ldrb	r0, [r3, #1]
    7c3c:	28ff      	cmp	r0, #255	; 0xff
    7c3e:	d161      	bne.n	7d04 <calculatePermitCapacity+0x154>
    7c40:	7898      	ldrb	r0, [r3, #2]
    7c42:	28ff      	cmp	r0, #255	; 0xff
    7c44:	d15e      	bne.n	7d04 <calculatePermitCapacity+0x154>
    7c46:	78d8      	ldrb	r0, [r3, #3]
    7c48:	28ff      	cmp	r0, #255	; 0xff
    7c4a:	d15b      	bne.n	7d04 <calculatePermitCapacity+0x154>
    7c4c:	7918      	ldrb	r0, [r3, #4]
    7c4e:	28ff      	cmp	r0, #255	; 0xff
    7c50:	d158      	bne.n	7d04 <calculatePermitCapacity+0x154>
    7c52:	7958      	ldrb	r0, [r3, #5]
    7c54:	28ff      	cmp	r0, #255	; 0xff
    7c56:	d155      	bne.n	7d04 <calculatePermitCapacity+0x154>
    7c58:	7998      	ldrb	r0, [r3, #6]
    7c5a:	28ff      	cmp	r0, #255	; 0xff
    7c5c:	d152      	bne.n	7d04 <calculatePermitCapacity+0x154>
    7c5e:	79d8      	ldrb	r0, [r3, #7]
    7c60:	28ff      	cmp	r0, #255	; 0xff
    7c62:	d14f      	bne.n	7d04 <calculatePermitCapacity+0x154>
    7c64:	2401      	movs	r4, #1
    7c66:	3310      	adds	r3, #16
    7c68:	42bb      	cmp	r3, r7
    7c6a:	d1e3      	bne.n	7c34 <calculatePermitCapacity+0x84>
    7c6c:	2364      	movs	r3, #100	; 0x64
    7c6e:	1ab2      	subs	r2, r6, r2
    7c70:	4353      	muls	r3, r2
    7c72:	0030      	movs	r0, r6
    7c74:	469c      	mov	ip, r3
    7c76:	2324      	movs	r3, #36	; 0x24
    7c78:	5cca      	ldrb	r2, [r1, r3]
    7c7a:	2a01      	cmp	r2, #1
    7c7c:	d94b      	bls.n	7d16 <calculatePermitCapacity+0x166>
    7c7e:	3a02      	subs	r2, #2
    7c80:	b2d2      	uxtb	r2, r2
    7c82:	0096      	lsls	r6, r2, #2
    7c84:	68c9      	ldr	r1, [r1, #12]
    7c86:	18b2      	adds	r2, r6, r2
    7c88:	0092      	lsls	r2, r2, #2
    7c8a:	3228      	adds	r2, #40	; 0x28
    7c8c:	000b      	movs	r3, r1
    7c8e:	188e      	adds	r6, r1, r2
    7c90:	2200      	movs	r2, #0
    7c92:	3314      	adds	r3, #20
    7c94:	7819      	ldrb	r1, [r3, #0]
    7c96:	29ff      	cmp	r1, #255	; 0xff
    7c98:	d131      	bne.n	7cfe <calculatePermitCapacity+0x14e>
    7c9a:	7859      	ldrb	r1, [r3, #1]
    7c9c:	29ff      	cmp	r1, #255	; 0xff
    7c9e:	d12e      	bne.n	7cfe <calculatePermitCapacity+0x14e>
    7ca0:	7899      	ldrb	r1, [r3, #2]
    7ca2:	29ff      	cmp	r1, #255	; 0xff
    7ca4:	d12b      	bne.n	7cfe <calculatePermitCapacity+0x14e>
    7ca6:	78d9      	ldrb	r1, [r3, #3]
    7ca8:	29ff      	cmp	r1, #255	; 0xff
    7caa:	d128      	bne.n	7cfe <calculatePermitCapacity+0x14e>
    7cac:	7919      	ldrb	r1, [r3, #4]
    7cae:	29ff      	cmp	r1, #255	; 0xff
    7cb0:	d125      	bne.n	7cfe <calculatePermitCapacity+0x14e>
    7cb2:	7959      	ldrb	r1, [r3, #5]
    7cb4:	29ff      	cmp	r1, #255	; 0xff
    7cb6:	d122      	bne.n	7cfe <calculatePermitCapacity+0x14e>
    7cb8:	7999      	ldrb	r1, [r3, #6]
    7cba:	29ff      	cmp	r1, #255	; 0xff
    7cbc:	d11f      	bne.n	7cfe <calculatePermitCapacity+0x14e>
    7cbe:	79d9      	ldrb	r1, [r3, #7]
    7cc0:	29ff      	cmp	r1, #255	; 0xff
    7cc2:	d11c      	bne.n	7cfe <calculatePermitCapacity+0x14e>
    7cc4:	2401      	movs	r4, #1
    7cc6:	3314      	adds	r3, #20
    7cc8:	429e      	cmp	r6, r3
    7cca:	d1e3      	bne.n	7c94 <calculatePermitCapacity+0xe4>
    7ccc:	4691      	mov	r9, r2
    7cce:	4b14      	ldr	r3, [pc, #80]	; (7d20 <calculatePermitCapacity+0x170>)
    7cd0:	0001      	movs	r1, r0
    7cd2:	4660      	mov	r0, ip
    7cd4:	4698      	mov	r8, r3
    7cd6:	4798      	blx	r3
    7cd8:	465b      	mov	r3, fp
    7cda:	7018      	strb	r0, [r3, #0]
    7cdc:	2324      	movs	r3, #36	; 0x24
    7cde:	682a      	ldr	r2, [r5, #0]
    7ce0:	2064      	movs	r0, #100	; 0x64
    7ce2:	5cd1      	ldrb	r1, [r2, r3]
    7ce4:	464b      	mov	r3, r9
    7ce6:	1aca      	subs	r2, r1, r3
    7ce8:	4350      	muls	r0, r2
    7cea:	47c0      	blx	r8
    7cec:	4653      	mov	r3, sl
    7cee:	7018      	strb	r0, [r3, #0]
    7cf0:	0020      	movs	r0, r4
    7cf2:	bc3c      	pop	{r2, r3, r4, r5}
    7cf4:	4690      	mov	r8, r2
    7cf6:	4699      	mov	r9, r3
    7cf8:	46a2      	mov	sl, r4
    7cfa:	46ab      	mov	fp, r5
    7cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cfe:	3201      	adds	r2, #1
    7d00:	b2d2      	uxtb	r2, r2
    7d02:	e7e0      	b.n	7cc6 <calculatePermitCapacity+0x116>
    7d04:	3201      	adds	r2, #1
    7d06:	b2d2      	uxtb	r2, r2
    7d08:	e7ad      	b.n	7c66 <calculatePermitCapacity+0xb6>
    7d0a:	2400      	movs	r4, #0
    7d0c:	e786      	b.n	7c1c <calculatePermitCapacity+0x6c>
    7d0e:	2300      	movs	r3, #0
    7d10:	2000      	movs	r0, #0
    7d12:	469c      	mov	ip, r3
    7d14:	e7af      	b.n	7c76 <calculatePermitCapacity+0xc6>
    7d16:	2300      	movs	r3, #0
    7d18:	4699      	mov	r9, r3
    7d1a:	e7d8      	b.n	7cce <calculatePermitCapacity+0x11e>
    7d1c:	20002c64 	.word	0x20002c64
    7d20:	00008fdd 	.word	0x00008fdd

00007d24 <handleJoinMessage>:
    7d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d26:	4645      	mov	r5, r8
    7d28:	4657      	mov	r7, sl
    7d2a:	464e      	mov	r6, r9
    7d2c:	46de      	mov	lr, fp
    7d2e:	b5e0      	push	{r5, r6, r7, lr}
    7d30:	001d      	movs	r5, r3
    7d32:	b091      	sub	sp, #68	; 0x44
    7d34:	ab1a      	add	r3, sp, #104	; 0x68
    7d36:	781b      	ldrb	r3, [r3, #0]
    7d38:	0006      	movs	r6, r0
    7d3a:	4698      	mov	r8, r3
    7d3c:	782b      	ldrb	r3, [r5, #0]
    7d3e:	000f      	movs	r7, r1
    7d40:	0014      	movs	r4, r2
    7d42:	2b03      	cmp	r3, #3
    7d44:	d100      	bne.n	7d48 <handleJoinMessage+0x24>
    7d46:	e0b6      	b.n	7eb6 <handleJoinMessage+0x192>
    7d48:	d957      	bls.n	7dfa <handleJoinMessage+0xd6>
    7d4a:	2b05      	cmp	r3, #5
    7d4c:	d00d      	beq.n	7d6a <handleJoinMessage+0x46>
    7d4e:	2b07      	cmp	r3, #7
    7d50:	d104      	bne.n	7d5c <handleJoinMessage+0x38>
    7d52:	4bd4      	ldr	r3, [pc, #848]	; (80a4 <handleJoinMessage+0x380>)
    7d54:	781b      	ldrb	r3, [r3, #0]
    7d56:	2b06      	cmp	r3, #6
    7d58:	d100      	bne.n	7d5c <handleJoinMessage+0x38>
    7d5a:	e10d      	b.n	7f78 <handleJoinMessage+0x254>
    7d5c:	b011      	add	sp, #68	; 0x44
    7d5e:	bc3c      	pop	{r2, r3, r4, r5}
    7d60:	4690      	mov	r8, r2
    7d62:	4699      	mov	r9, r3
    7d64:	46a2      	mov	sl, r4
    7d66:	46ab      	mov	fp, r5
    7d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d6a:	2400      	movs	r4, #0
    7d6c:	ab02      	add	r3, sp, #8
    7d6e:	82dc      	strh	r4, [r3, #22]
    7d70:	4bcc      	ldr	r3, [pc, #816]	; (80a4 <handleJoinMessage+0x380>)
    7d72:	781f      	ldrb	r7, [r3, #0]
    7d74:	2f06      	cmp	r7, #6
    7d76:	d1f1      	bne.n	7d5c <handleJoinMessage+0x38>
    7d78:	1c68      	adds	r0, r5, #1
    7d7a:	2300      	movs	r3, #0
    7d7c:	4dca      	ldr	r5, [pc, #808]	; (80a8 <handleJoinMessage+0x384>)
    7d7e:	2205      	movs	r2, #5
    7d80:	2102      	movs	r1, #2
    7d82:	47a8      	blx	r5
    7d84:	4bc9      	ldr	r3, [pc, #804]	; (80ac <handleJoinMessage+0x388>)
    7d86:	0005      	movs	r5, r0
    7d88:	4298      	cmp	r0, r3
    7d8a:	d0e7      	beq.n	7d5c <handleJoinMessage+0x38>
    7d8c:	2078      	movs	r0, #120	; 0x78
    7d8e:	4bc8      	ldr	r3, [pc, #800]	; (80b0 <handleJoinMessage+0x38c>)
    7d90:	4798      	blx	r3
    7d92:	4680      	mov	r8, r0
    7d94:	2800      	cmp	r0, #0
    7d96:	d0e1      	beq.n	7d5c <handleJoinMessage+0x38>
    7d98:	4bc6      	ldr	r3, [pc, #792]	; (80b4 <handleJoinMessage+0x390>)
    7d9a:	88f2      	ldrh	r2, [r6, #6]
    7d9c:	8819      	ldrh	r1, [r3, #0]
    7d9e:	ab08      	add	r3, sp, #32
    7da0:	4699      	mov	r9, r3
    7da2:	b289      	uxth	r1, r1
    7da4:	20ff      	movs	r0, #255	; 0xff
    7da6:	4ec4      	ldr	r6, [pc, #784]	; (80b8 <handleJoinMessage+0x394>)
    7da8:	47b0      	blx	r6
    7daa:	4641      	mov	r1, r8
    7dac:	4648      	mov	r0, r9
    7dae:	4bc3      	ldr	r3, [pc, #780]	; (80bc <handleJoinMessage+0x398>)
    7db0:	4798      	blx	r3
    7db2:	4643      	mov	r3, r8
    7db4:	4642      	mov	r2, r8
    7db6:	541f      	strb	r7, [r3, r0]
    7db8:	1c43      	adds	r3, r0, #1
    7dba:	b2db      	uxtb	r3, r3
    7dbc:	54d5      	strb	r5, [r2, r3]
    7dbe:	1c83      	adds	r3, r0, #2
    7dc0:	b2db      	uxtb	r3, r3
    7dc2:	0a2d      	lsrs	r5, r5, #8
    7dc4:	54d5      	strb	r5, [r2, r3]
    7dc6:	464b      	mov	r3, r9
    7dc8:	0006      	movs	r6, r0
    7dca:	8898      	ldrh	r0, [r3, #4]
    7dcc:	23ff      	movs	r3, #255	; 0xff
    7dce:	4398      	bics	r0, r3
    7dd0:	4bbb      	ldr	r3, [pc, #748]	; (80c0 <handleJoinMessage+0x39c>)
    7dd2:	4798      	blx	r3
    7dd4:	ab02      	add	r3, sp, #8
    7dd6:	82d8      	strh	r0, [r3, #22]
    7dd8:	4bba      	ldr	r3, [pc, #744]	; (80c4 <handleJoinMessage+0x3a0>)
    7dda:	aa02      	add	r2, sp, #8
    7ddc:	4694      	mov	ip, r2
    7dde:	9303      	str	r3, [sp, #12]
    7de0:	2316      	movs	r3, #22
    7de2:	4463      	add	r3, ip
    7de4:	9301      	str	r3, [sp, #4]
    7de6:	2302      	movs	r3, #2
    7de8:	9402      	str	r4, [sp, #8]
    7dea:	9300      	str	r3, [sp, #0]
    7dec:	2203      	movs	r2, #3
    7dee:	4643      	mov	r3, r8
    7df0:	0031      	movs	r1, r6
    7df2:	4648      	mov	r0, r9
    7df4:	4cb4      	ldr	r4, [pc, #720]	; (80c8 <handleJoinMessage+0x3a4>)
    7df6:	47a0      	blx	r4
    7df8:	e7b0      	b.n	7d5c <handleJoinMessage+0x38>
    7dfa:	2b01      	cmp	r3, #1
    7dfc:	d1ae      	bne.n	7d5c <handleJoinMessage+0x38>
    7dfe:	4ba9      	ldr	r3, [pc, #676]	; (80a4 <handleJoinMessage+0x380>)
    7e00:	781b      	ldrb	r3, [r3, #0]
    7e02:	2b06      	cmp	r3, #6
    7e04:	d1aa      	bne.n	7d5c <handleJoinMessage+0x38>
    7e06:	4bb1      	ldr	r3, [pc, #708]	; (80cc <handleJoinMessage+0x3a8>)
    7e08:	2108      	movs	r1, #8
    7e0a:	4699      	mov	r9, r3
    7e0c:	0018      	movs	r0, r3
    7e0e:	4bb0      	ldr	r3, [pc, #704]	; (80d0 <handleJoinMessage+0x3ac>)
    7e10:	4798      	blx	r3
    7e12:	2800      	cmp	r0, #0
    7e14:	d0a2      	beq.n	7d5c <handleJoinMessage+0x38>
    7e16:	2078      	movs	r0, #120	; 0x78
    7e18:	4ba5      	ldr	r3, [pc, #660]	; (80b0 <handleJoinMessage+0x38c>)
    7e1a:	4798      	blx	r3
    7e1c:	1e05      	subs	r5, r0, #0
    7e1e:	d09d      	beq.n	7d5c <handleJoinMessage+0x38>
    7e20:	4ba4      	ldr	r3, [pc, #656]	; (80b4 <handleJoinMessage+0x390>)
    7e22:	aa08      	add	r2, sp, #32
    7e24:	8819      	ldrh	r1, [r3, #0]
    7e26:	9205      	str	r2, [sp, #20]
    7e28:	0013      	movs	r3, r2
    7e2a:	b289      	uxth	r1, r1
    7e2c:	2200      	movs	r2, #0
    7e2e:	2001      	movs	r0, #1
    7e30:	4ea1      	ldr	r6, [pc, #644]	; (80b8 <handleJoinMessage+0x394>)
    7e32:	47b0      	blx	r6
    7e34:	2220      	movs	r2, #32
    7e36:	9e05      	ldr	r6, [sp, #20]
    7e38:	0029      	movs	r1, r5
    7e3a:	7873      	ldrb	r3, [r6, #1]
    7e3c:	0030      	movs	r0, r6
    7e3e:	4313      	orrs	r3, r2
    7e40:	7073      	strb	r3, [r6, #1]
    7e42:	4b9e      	ldr	r3, [pc, #632]	; (80bc <handleJoinMessage+0x398>)
    7e44:	4798      	blx	r3
    7e46:	2302      	movs	r3, #2
    7e48:	542b      	strb	r3, [r5, r0]
    7e4a:	4ba2      	ldr	r3, [pc, #648]	; (80d4 <handleJoinMessage+0x3b0>)
    7e4c:	4680      	mov	r8, r0
    7e4e:	781a      	ldrb	r2, [r3, #0]
    7e50:	0003      	movs	r3, r0
    7e52:	3301      	adds	r3, #1
    7e54:	b2db      	uxtb	r3, r3
    7e56:	54ea      	strb	r2, [r5, r3]
    7e58:	4b9f      	ldr	r3, [pc, #636]	; (80d8 <handleJoinMessage+0x3b4>)
    7e5a:	469a      	mov	sl, r3
    7e5c:	4b9f      	ldr	r3, [pc, #636]	; (80dc <handleJoinMessage+0x3b8>)
    7e5e:	4651      	mov	r1, sl
    7e60:	469b      	mov	fp, r3
    7e62:	0018      	movs	r0, r3
    7e64:	4b9e      	ldr	r3, [pc, #632]	; (80e0 <handleJoinMessage+0x3bc>)
    7e66:	4798      	blx	r3
    7e68:	4b9e      	ldr	r3, [pc, #632]	; (80e4 <handleJoinMessage+0x3c0>)
    7e6a:	4649      	mov	r1, r9
    7e6c:	7018      	strb	r0, [r3, #0]
    7e6e:	4643      	mov	r3, r8
    7e70:	3302      	adds	r3, #2
    7e72:	b2db      	uxtb	r3, r3
    7e74:	54e8      	strb	r0, [r5, r3]
    7e76:	465b      	mov	r3, fp
    7e78:	781a      	ldrb	r2, [r3, #0]
    7e7a:	4643      	mov	r3, r8
    7e7c:	3303      	adds	r3, #3
    7e7e:	b2db      	uxtb	r3, r3
    7e80:	54ea      	strb	r2, [r5, r3]
    7e82:	4653      	mov	r3, sl
    7e84:	781a      	ldrb	r2, [r3, #0]
    7e86:	4643      	mov	r3, r8
    7e88:	3304      	adds	r3, #4
    7e8a:	b2db      	uxtb	r3, r3
    7e8c:	54ea      	strb	r2, [r5, r3]
    7e8e:	4643      	mov	r3, r8
    7e90:	1d58      	adds	r0, r3, #5
    7e92:	b2c0      	uxtb	r0, r0
    7e94:	1828      	adds	r0, r5, r0
    7e96:	2208      	movs	r2, #8
    7e98:	4b93      	ldr	r3, [pc, #588]	; (80e8 <handleJoinMessage+0x3c4>)
    7e9a:	4798      	blx	r3
    7e9c:	4b89      	ldr	r3, [pc, #548]	; (80c4 <handleJoinMessage+0x3a0>)
    7e9e:	9401      	str	r4, [sp, #4]
    7ea0:	9303      	str	r3, [sp, #12]
    7ea2:	2300      	movs	r3, #0
    7ea4:	9700      	str	r7, [sp, #0]
    7ea6:	9302      	str	r3, [sp, #8]
    7ea8:	220d      	movs	r2, #13
    7eaa:	002b      	movs	r3, r5
    7eac:	4641      	mov	r1, r8
    7eae:	0030      	movs	r0, r6
    7eb0:	4c85      	ldr	r4, [pc, #532]	; (80c8 <handleJoinMessage+0x3a4>)
    7eb2:	47a0      	blx	r4
    7eb4:	e752      	b.n	7d5c <handleJoinMessage+0x38>
    7eb6:	78ab      	ldrb	r3, [r5, #2]
    7eb8:	786e      	ldrb	r6, [r5, #1]
    7eba:	469a      	mov	sl, r3
    7ebc:	4b79      	ldr	r3, [pc, #484]	; (80a4 <handleJoinMessage+0x380>)
    7ebe:	781b      	ldrb	r3, [r3, #0]
    7ec0:	2b06      	cmp	r3, #6
    7ec2:	d000      	beq.n	7ec6 <handleJoinMessage+0x1a2>
    7ec4:	e74a      	b.n	7d5c <handleJoinMessage+0x38>
    7ec6:	2078      	movs	r0, #120	; 0x78
    7ec8:	4b79      	ldr	r3, [pc, #484]	; (80b0 <handleJoinMessage+0x38c>)
    7eca:	4798      	blx	r3
    7ecc:	4681      	mov	r9, r0
    7ece:	2800      	cmp	r0, #0
    7ed0:	d100      	bne.n	7ed4 <handleJoinMessage+0x1b0>
    7ed2:	e743      	b.n	7d5c <handleJoinMessage+0x38>
    7ed4:	1ceb      	adds	r3, r5, #3
    7ed6:	4652      	mov	r2, sl
    7ed8:	1c31      	adds	r1, r6, #0
    7eda:	4d73      	ldr	r5, [pc, #460]	; (80a8 <handleJoinMessage+0x384>)
    7edc:	0020      	movs	r0, r4
    7ede:	47a8      	blx	r5
    7ee0:	4b74      	ldr	r3, [pc, #464]	; (80b4 <handleJoinMessage+0x390>)
    7ee2:	ad08      	add	r5, sp, #32
    7ee4:	8819      	ldrh	r1, [r3, #0]
    7ee6:	2201      	movs	r2, #1
    7ee8:	b289      	uxth	r1, r1
    7eea:	002b      	movs	r3, r5
    7eec:	4683      	mov	fp, r0
    7eee:	4e72      	ldr	r6, [pc, #456]	; (80b8 <handleJoinMessage+0x394>)
    7ef0:	2001      	movs	r0, #1
    7ef2:	47b0      	blx	r6
    7ef4:	2220      	movs	r2, #32
    7ef6:	786b      	ldrb	r3, [r5, #1]
    7ef8:	4649      	mov	r1, r9
    7efa:	4313      	orrs	r3, r2
    7efc:	706b      	strb	r3, [r5, #1]
    7efe:	0028      	movs	r0, r5
    7f00:	4b6e      	ldr	r3, [pc, #440]	; (80bc <handleJoinMessage+0x398>)
    7f02:	4798      	blx	r3
    7f04:	2204      	movs	r2, #4
    7f06:	4649      	mov	r1, r9
    7f08:	0003      	movs	r3, r0
    7f0a:	540a      	strb	r2, [r1, r0]
    7f0c:	4a67      	ldr	r2, [pc, #412]	; (80ac <handleJoinMessage+0x388>)
    7f0e:	3301      	adds	r3, #1
    7f10:	4682      	mov	sl, r0
    7f12:	b2db      	uxtb	r3, r3
    7f14:	4593      	cmp	fp, r2
    7f16:	d100      	bne.n	7f1a <handleJoinMessage+0x1f6>
    7f18:	e11e      	b.n	8158 <handleJoinMessage+0x434>
    7f1a:	1c86      	adds	r6, r0, #2
    7f1c:	b2f2      	uxtb	r2, r6
    7f1e:	9205      	str	r2, [sp, #20]
    7f20:	2200      	movs	r2, #0
    7f22:	4658      	mov	r0, fp
    7f24:	54ca      	strb	r2, [r1, r3]
    7f26:	4e71      	ldr	r6, [pc, #452]	; (80ec <handleJoinMessage+0x3c8>)
    7f28:	4643      	mov	r3, r8
    7f2a:	3201      	adds	r2, #1
    7f2c:	4659      	mov	r1, fp
    7f2e:	47b0      	blx	r6
    7f30:	464b      	mov	r3, r9
    7f32:	465a      	mov	r2, fp
    7f34:	9e05      	ldr	r6, [sp, #20]
    7f36:	4649      	mov	r1, r9
    7f38:	559a      	strb	r2, [r3, r6]
    7f3a:	0032      	movs	r2, r6
    7f3c:	465b      	mov	r3, fp
    7f3e:	3201      	adds	r2, #1
    7f40:	b2d2      	uxtb	r2, r2
    7f42:	0a1b      	lsrs	r3, r3, #8
    7f44:	548b      	strb	r3, [r1, r2]
    7f46:	4b6a      	ldr	r3, [pc, #424]	; (80f0 <handleJoinMessage+0x3cc>)
    7f48:	1cb0      	adds	r0, r6, #2
    7f4a:	6819      	ldr	r1, [r3, #0]
    7f4c:	b2c0      	uxtb	r0, r0
    7f4e:	4448      	add	r0, r9
    7f50:	3110      	adds	r1, #16
    7f52:	2210      	movs	r2, #16
    7f54:	4b64      	ldr	r3, [pc, #400]	; (80e8 <handleJoinMessage+0x3c4>)
    7f56:	4798      	blx	r3
    7f58:	4653      	mov	r3, sl
    7f5a:	1af2      	subs	r2, r6, r3
    7f5c:	4b59      	ldr	r3, [pc, #356]	; (80c4 <handleJoinMessage+0x3a0>)
    7f5e:	3212      	adds	r2, #18
    7f60:	9303      	str	r3, [sp, #12]
    7f62:	2300      	movs	r3, #0
    7f64:	9401      	str	r4, [sp, #4]
    7f66:	9302      	str	r3, [sp, #8]
    7f68:	b2d2      	uxtb	r2, r2
    7f6a:	9700      	str	r7, [sp, #0]
    7f6c:	464b      	mov	r3, r9
    7f6e:	4651      	mov	r1, sl
    7f70:	0028      	movs	r0, r5
    7f72:	4c55      	ldr	r4, [pc, #340]	; (80c8 <handleJoinMessage+0x3a4>)
    7f74:	47a0      	blx	r4
    7f76:	e6f1      	b.n	7d5c <handleJoinMessage+0x38>
    7f78:	88c3      	ldrh	r3, [r0, #6]
    7f7a:	4698      	mov	r8, r3
    7f7c:	23ff      	movs	r3, #255	; 0xff
    7f7e:	4642      	mov	r2, r8
    7f80:	4213      	tst	r3, r2
    7f82:	d131      	bne.n	7fe8 <handleJoinMessage+0x2c4>
    7f84:	439a      	bics	r2, r3
    7f86:	d02f      	beq.n	7fe8 <handleJoinMessage+0x2c4>
    7f88:	4b5a      	ldr	r3, [pc, #360]	; (80f4 <handleJoinMessage+0x3d0>)
    7f8a:	4699      	mov	r9, r3
    7f8c:	681b      	ldr	r3, [r3, #0]
    7f8e:	469b      	mov	fp, r3
    7f90:	2320      	movs	r3, #32
    7f92:	465a      	mov	r2, fp
    7f94:	5cd2      	ldrb	r2, [r2, r3]
    7f96:	2a01      	cmp	r2, #1
    7f98:	d926      	bls.n	7fe8 <handleJoinMessage+0x2c4>
    7f9a:	4b57      	ldr	r3, [pc, #348]	; (80f8 <handleJoinMessage+0x3d4>)
    7f9c:	4644      	mov	r4, r8
    7f9e:	2701      	movs	r7, #1
    7fa0:	46a8      	mov	r8, r5
    7fa2:	469a      	mov	sl, r3
    7fa4:	465d      	mov	r5, fp
    7fa6:	e003      	b.n	7fb0 <handleJoinMessage+0x28c>
    7fa8:	3701      	adds	r7, #1
    7faa:	b2ff      	uxtb	r7, r7
    7fac:	4297      	cmp	r7, r2
    7fae:	d219      	bcs.n	7fe4 <handleJoinMessage+0x2c0>
    7fb0:	0a23      	lsrs	r3, r4, #8
    7fb2:	429f      	cmp	r7, r3
    7fb4:	d1f8      	bne.n	7fa8 <handleJoinMessage+0x284>
    7fb6:	682b      	ldr	r3, [r5, #0]
    7fb8:	0078      	lsls	r0, r7, #1
    7fba:	469b      	mov	fp, r3
    7fbc:	4643      	mov	r3, r8
    7fbe:	19c0      	adds	r0, r0, r7
    7fc0:	0080      	lsls	r0, r0, #2
    7fc2:	4483      	add	fp, r0
    7fc4:	1c59      	adds	r1, r3, #1
    7fc6:	2208      	movs	r2, #8
    7fc8:	4658      	mov	r0, fp
    7fca:	47d0      	blx	sl
    7fcc:	2800      	cmp	r0, #0
    7fce:	d000      	beq.n	7fd2 <handleJoinMessage+0x2ae>
    7fd0:	e094      	b.n	80fc <handleJoinMessage+0x3d8>
    7fd2:	465a      	mov	r2, fp
    7fd4:	8beb      	ldrh	r3, [r5, #30]
    7fd6:	6093      	str	r3, [r2, #8]
    7fd8:	464b      	mov	r3, r9
    7fda:	681d      	ldr	r5, [r3, #0]
    7fdc:	2320      	movs	r3, #32
    7fde:	88f4      	ldrh	r4, [r6, #6]
    7fe0:	5cea      	ldrb	r2, [r5, r3]
    7fe2:	e7e1      	b.n	7fa8 <handleJoinMessage+0x284>
    7fe4:	4645      	mov	r5, r8
    7fe6:	46a0      	mov	r8, r4
    7fe8:	4643      	mov	r3, r8
    7fea:	061b      	lsls	r3, r3, #24
    7fec:	d400      	bmi.n	7ff0 <handleJoinMessage+0x2cc>
    7fee:	e6b5      	b.n	7d5c <handleJoinMessage+0x38>
    7ff0:	4b40      	ldr	r3, [pc, #256]	; (80f4 <handleJoinMessage+0x3d0>)
    7ff2:	4699      	mov	r9, r3
    7ff4:	681b      	ldr	r3, [r3, #0]
    7ff6:	469b      	mov	fp, r3
    7ff8:	2323      	movs	r3, #35	; 0x23
    7ffa:	465a      	mov	r2, fp
    7ffc:	5cd2      	ldrb	r2, [r2, r3]
    7ffe:	2a00      	cmp	r2, #0
    8000:	d100      	bne.n	8004 <handleJoinMessage+0x2e0>
    8002:	e6ab      	b.n	7d5c <handleJoinMessage+0x38>
    8004:	4b3c      	ldr	r3, [pc, #240]	; (80f8 <handleJoinMessage+0x3d4>)
    8006:	4647      	mov	r7, r8
    8008:	2400      	movs	r4, #0
    800a:	46a8      	mov	r8, r5
    800c:	469a      	mov	sl, r3
    800e:	465d      	mov	r5, fp
    8010:	e005      	b.n	801e <handleJoinMessage+0x2fa>
    8012:	3401      	adds	r4, #1
    8014:	b2e4      	uxtb	r4, r4
    8016:	4294      	cmp	r4, r2
    8018:	d300      	bcc.n	801c <handleJoinMessage+0x2f8>
    801a:	e69f      	b.n	7d5c <handleJoinMessage+0x38>
    801c:	88f7      	ldrh	r7, [r6, #6]
    801e:	2380      	movs	r3, #128	; 0x80
    8020:	403b      	ands	r3, r7
    8022:	429c      	cmp	r4, r3
    8024:	d1f5      	bne.n	8012 <handleJoinMessage+0x2ee>
    8026:	68aa      	ldr	r2, [r5, #8]
    8028:	0123      	lsls	r3, r4, #4
    802a:	4693      	mov	fp, r2
    802c:	449b      	add	fp, r3
    802e:	4643      	mov	r3, r8
    8030:	2208      	movs	r2, #8
    8032:	1c59      	adds	r1, r3, #1
    8034:	4658      	mov	r0, fp
    8036:	47d0      	blx	sl
    8038:	2800      	cmp	r0, #0
    803a:	d107      	bne.n	804c <handleJoinMessage+0x328>
    803c:	465a      	mov	r2, fp
    803e:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    8040:	6093      	str	r3, [r2, #8]
    8042:	464b      	mov	r3, r9
    8044:	681d      	ldr	r5, [r3, #0]
    8046:	2323      	movs	r3, #35	; 0x23
    8048:	5cea      	ldrb	r2, [r5, r3]
    804a:	e7e2      	b.n	8012 <handleJoinMessage+0x2ee>
    804c:	ab02      	add	r3, sp, #8
    804e:	469c      	mov	ip, r3
    8050:	2516      	movs	r5, #22
    8052:	2078      	movs	r0, #120	; 0x78
    8054:	4465      	add	r5, ip
    8056:	4b16      	ldr	r3, [pc, #88]	; (80b0 <handleJoinMessage+0x38c>)
    8058:	802f      	strh	r7, [r5, #0]
    805a:	4798      	blx	r3
    805c:	1e07      	subs	r7, r0, #0
    805e:	d076      	beq.n	814e <handleJoinMessage+0x42a>
    8060:	4b14      	ldr	r3, [pc, #80]	; (80b4 <handleJoinMessage+0x390>)
    8062:	882a      	ldrh	r2, [r5, #0]
    8064:	8819      	ldrh	r1, [r3, #0]
    8066:	9505      	str	r5, [sp, #20]
    8068:	b289      	uxth	r1, r1
    806a:	ab08      	add	r3, sp, #32
    806c:	20ff      	movs	r0, #255	; 0xff
    806e:	4d12      	ldr	r5, [pc, #72]	; (80b8 <handleJoinMessage+0x394>)
    8070:	47a8      	blx	r5
    8072:	0039      	movs	r1, r7
    8074:	4b11      	ldr	r3, [pc, #68]	; (80bc <handleJoinMessage+0x398>)
    8076:	a808      	add	r0, sp, #32
    8078:	4798      	blx	r3
    807a:	2308      	movs	r3, #8
    807c:	543b      	strb	r3, [r7, r0]
    807e:	4b11      	ldr	r3, [pc, #68]	; (80c4 <handleJoinMessage+0x3a0>)
    8080:	0001      	movs	r1, r0
    8082:	9303      	str	r3, [sp, #12]
    8084:	2300      	movs	r3, #0
    8086:	9302      	str	r3, [sp, #8]
    8088:	9b05      	ldr	r3, [sp, #20]
    808a:	2201      	movs	r2, #1
    808c:	9301      	str	r3, [sp, #4]
    808e:	2302      	movs	r3, #2
    8090:	4d0d      	ldr	r5, [pc, #52]	; (80c8 <handleJoinMessage+0x3a4>)
    8092:	9300      	str	r3, [sp, #0]
    8094:	a808      	add	r0, sp, #32
    8096:	003b      	movs	r3, r7
    8098:	47a8      	blx	r5
    809a:	464b      	mov	r3, r9
    809c:	681d      	ldr	r5, [r3, #0]
    809e:	2323      	movs	r3, #35	; 0x23
    80a0:	5cea      	ldrb	r2, [r5, r3]
    80a2:	e7b6      	b.n	8012 <handleJoinMessage+0x2ee>
    80a4:	200003ac 	.word	0x200003ac
    80a8:	00007725 	.word	0x00007725
    80ac:	0000ffff 	.word	0x0000ffff
    80b0:	0000339d 	.word	0x0000339d
    80b4:	20002cac 	.word	0x20002cac
    80b8:	000065d5 	.word	0x000065d5
    80bc:	00006601 	.word	0x00006601
    80c0:	00008a31 	.word	0x00008a31
    80c4:	000079b1 	.word	0x000079b1
    80c8:	00006699 	.word	0x00006699
    80cc:	20002cdc 	.word	0x20002cdc
    80d0:	00005529 	.word	0x00005529
    80d4:	20002cae 	.word	0x20002cae
    80d8:	200003c8 	.word	0x200003c8
    80dc:	200003ca 	.word	0x200003ca
    80e0:	00007bb1 	.word	0x00007bb1
    80e4:	200003c9 	.word	0x200003c9
    80e8:	0000926f 	.word	0x0000926f
    80ec:	000085c5 	.word	0x000085c5
    80f0:	20002c68 	.word	0x20002c68
    80f4:	20002c64 	.word	0x20002c64
    80f8:	00009251 	.word	0x00009251
    80fc:	ab02      	add	r3, sp, #8
    80fe:	469c      	mov	ip, r3
    8100:	2516      	movs	r5, #22
    8102:	2078      	movs	r0, #120	; 0x78
    8104:	4465      	add	r5, ip
    8106:	4b18      	ldr	r3, [pc, #96]	; (8168 <handleJoinMessage+0x444>)
    8108:	802c      	strh	r4, [r5, #0]
    810a:	4798      	blx	r3
    810c:	1e04      	subs	r4, r0, #0
    810e:	d100      	bne.n	8112 <handleJoinMessage+0x3ee>
    8110:	e762      	b.n	7fd8 <handleJoinMessage+0x2b4>
    8112:	4b16      	ldr	r3, [pc, #88]	; (816c <handleJoinMessage+0x448>)
    8114:	882a      	ldrh	r2, [r5, #0]
    8116:	8819      	ldrh	r1, [r3, #0]
    8118:	9505      	str	r5, [sp, #20]
    811a:	ab08      	add	r3, sp, #32
    811c:	b289      	uxth	r1, r1
    811e:	20ff      	movs	r0, #255	; 0xff
    8120:	4d13      	ldr	r5, [pc, #76]	; (8170 <handleJoinMessage+0x44c>)
    8122:	47a8      	blx	r5
    8124:	0021      	movs	r1, r4
    8126:	a808      	add	r0, sp, #32
    8128:	4b12      	ldr	r3, [pc, #72]	; (8174 <handleJoinMessage+0x450>)
    812a:	4798      	blx	r3
    812c:	2308      	movs	r3, #8
    812e:	5423      	strb	r3, [r4, r0]
    8130:	4b11      	ldr	r3, [pc, #68]	; (8178 <handleJoinMessage+0x454>)
    8132:	0001      	movs	r1, r0
    8134:	9303      	str	r3, [sp, #12]
    8136:	2300      	movs	r3, #0
    8138:	9302      	str	r3, [sp, #8]
    813a:	9b05      	ldr	r3, [sp, #20]
    813c:	2201      	movs	r2, #1
    813e:	9301      	str	r3, [sp, #4]
    8140:	2302      	movs	r3, #2
    8142:	a808      	add	r0, sp, #32
    8144:	9300      	str	r3, [sp, #0]
    8146:	0023      	movs	r3, r4
    8148:	4c0c      	ldr	r4, [pc, #48]	; (817c <handleJoinMessage+0x458>)
    814a:	47a0      	blx	r4
    814c:	e744      	b.n	7fd8 <handleJoinMessage+0x2b4>
    814e:	464b      	mov	r3, r9
    8150:	681d      	ldr	r5, [r3, #0]
    8152:	2323      	movs	r3, #35	; 0x23
    8154:	5cea      	ldrb	r2, [r5, r3]
    8156:	e75c      	b.n	8012 <handleJoinMessage+0x2ee>
    8158:	1c86      	adds	r6, r0, #2
    815a:	b2f2      	uxtb	r2, r6
    815c:	9205      	str	r2, [sp, #20]
    815e:	4649      	mov	r1, r9
    8160:	2201      	movs	r2, #1
    8162:	54ca      	strb	r2, [r1, r3]
    8164:	e6e4      	b.n	7f30 <handleJoinMessage+0x20c>
    8166:	46c0      	nop			; (mov r8, r8)
    8168:	0000339d 	.word	0x0000339d
    816c:	20002cac 	.word	0x20002cac
    8170:	000065d5 	.word	0x000065d5
    8174:	00006601 	.word	0x00006601
    8178:	000079b1 	.word	0x000079b1
    817c:	00006699 	.word	0x00006699

00008180 <coordinatorTableInit>:
    8180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8182:	4647      	mov	r7, r8
    8184:	46ce      	mov	lr, r9
    8186:	b580      	push	{r7, lr}
    8188:	4b13      	ldr	r3, [pc, #76]	; (81d8 <coordinatorTableInit+0x58>)
    818a:	681e      	ldr	r6, [r3, #0]
    818c:	4698      	mov	r8, r3
    818e:	2320      	movs	r3, #32
    8190:	5cf3      	ldrb	r3, [r6, r3]
    8192:	2b00      	cmp	r3, #0
    8194:	d01b      	beq.n	81ce <coordinatorTableInit+0x4e>
    8196:	2320      	movs	r3, #32
    8198:	2400      	movs	r4, #0
    819a:	4699      	mov	r9, r3
    819c:	4f0f      	ldr	r7, [pc, #60]	; (81dc <coordinatorTableInit+0x5c>)
    819e:	0065      	lsls	r5, r4, #1
    81a0:	6830      	ldr	r0, [r6, #0]
    81a2:	192d      	adds	r5, r5, r4
    81a4:	00ad      	lsls	r5, r5, #2
    81a6:	1940      	adds	r0, r0, r5
    81a8:	2208      	movs	r2, #8
    81aa:	21ff      	movs	r1, #255	; 0xff
    81ac:	47b8      	blx	r7
    81ae:	4643      	mov	r3, r8
    81b0:	681e      	ldr	r6, [r3, #0]
    81b2:	2204      	movs	r2, #4
    81b4:	6833      	ldr	r3, [r6, #0]
    81b6:	21ff      	movs	r1, #255	; 0xff
    81b8:	469c      	mov	ip, r3
    81ba:	4465      	add	r5, ip
    81bc:	0028      	movs	r0, r5
    81be:	3008      	adds	r0, #8
    81c0:	47b8      	blx	r7
    81c2:	464b      	mov	r3, r9
    81c4:	3401      	adds	r4, #1
    81c6:	5cf3      	ldrb	r3, [r6, r3]
    81c8:	b2e4      	uxtb	r4, r4
    81ca:	42a3      	cmp	r3, r4
    81cc:	d8e7      	bhi.n	819e <coordinatorTableInit+0x1e>
    81ce:	bc0c      	pop	{r2, r3}
    81d0:	4690      	mov	r8, r2
    81d2:	4699      	mov	r9, r3
    81d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    81d6:	46c0      	nop			; (mov r8, r8)
    81d8:	20002c64 	.word	0x20002c64
    81dc:	00009281 	.word	0x00009281

000081e0 <deviceTableInit>:
    81e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81e2:	4647      	mov	r7, r8
    81e4:	46ce      	mov	lr, r9
    81e6:	b580      	push	{r7, lr}
    81e8:	4b27      	ldr	r3, [pc, #156]	; (8288 <deviceTableInit+0xa8>)
    81ea:	681c      	ldr	r4, [r3, #0]
    81ec:	4698      	mov	r8, r3
    81ee:	2323      	movs	r3, #35	; 0x23
    81f0:	5ce3      	ldrb	r3, [r4, r3]
    81f2:	2b00      	cmp	r3, #0
    81f4:	d01b      	beq.n	822e <deviceTableInit+0x4e>
    81f6:	2323      	movs	r3, #35	; 0x23
    81f8:	2500      	movs	r5, #0
    81fa:	4699      	mov	r9, r3
    81fc:	4f23      	ldr	r7, [pc, #140]	; (828c <deviceTableInit+0xac>)
    81fe:	68a0      	ldr	r0, [r4, #8]
    8200:	012e      	lsls	r6, r5, #4
    8202:	2208      	movs	r2, #8
    8204:	21ff      	movs	r1, #255	; 0xff
    8206:	1980      	adds	r0, r0, r6
    8208:	47b8      	blx	r7
    820a:	4643      	mov	r3, r8
    820c:	681c      	ldr	r4, [r3, #0]
    820e:	2204      	movs	r2, #4
    8210:	68a3      	ldr	r3, [r4, #8]
    8212:	21ff      	movs	r1, #255	; 0xff
    8214:	1998      	adds	r0, r3, r6
    8216:	3008      	adds	r0, #8
    8218:	47b8      	blx	r7
    821a:	22ff      	movs	r2, #255	; 0xff
    821c:	68a3      	ldr	r3, [r4, #8]
    821e:	3501      	adds	r5, #1
    8220:	199b      	adds	r3, r3, r6
    8222:	731a      	strb	r2, [r3, #12]
    8224:	464b      	mov	r3, r9
    8226:	5ce3      	ldrb	r3, [r4, r3]
    8228:	b2ed      	uxtb	r5, r5
    822a:	42ab      	cmp	r3, r5
    822c:	d8e7      	bhi.n	81fe <deviceTableInit+0x1e>
    822e:	2324      	movs	r3, #36	; 0x24
    8230:	5ce3      	ldrb	r3, [r4, r3]
    8232:	2b00      	cmp	r3, #0
    8234:	d024      	beq.n	8280 <deviceTableInit+0xa0>
    8236:	2324      	movs	r3, #36	; 0x24
    8238:	2600      	movs	r6, #0
    823a:	4699      	mov	r9, r3
    823c:	4f13      	ldr	r7, [pc, #76]	; (828c <deviceTableInit+0xac>)
    823e:	00b5      	lsls	r5, r6, #2
    8240:	68e0      	ldr	r0, [r4, #12]
    8242:	19ad      	adds	r5, r5, r6
    8244:	00ad      	lsls	r5, r5, #2
    8246:	1940      	adds	r0, r0, r5
    8248:	2208      	movs	r2, #8
    824a:	21ff      	movs	r1, #255	; 0xff
    824c:	47b8      	blx	r7
    824e:	4643      	mov	r3, r8
    8250:	681c      	ldr	r4, [r3, #0]
    8252:	2204      	movs	r2, #4
    8254:	68e3      	ldr	r3, [r4, #12]
    8256:	21ff      	movs	r1, #255	; 0xff
    8258:	1958      	adds	r0, r3, r5
    825a:	3008      	adds	r0, #8
    825c:	47b8      	blx	r7
    825e:	68e3      	ldr	r3, [r4, #12]
    8260:	2204      	movs	r2, #4
    8262:	1958      	adds	r0, r3, r5
    8264:	300c      	adds	r0, #12
    8266:	21ff      	movs	r1, #255	; 0xff
    8268:	47b8      	blx	r7
    826a:	68e3      	ldr	r3, [r4, #12]
    826c:	3601      	adds	r6, #1
    826e:	469c      	mov	ip, r3
    8270:	23ff      	movs	r3, #255	; 0xff
    8272:	4465      	add	r5, ip
    8274:	742b      	strb	r3, [r5, #16]
    8276:	464b      	mov	r3, r9
    8278:	5ce3      	ldrb	r3, [r4, r3]
    827a:	b2f6      	uxtb	r6, r6
    827c:	42b3      	cmp	r3, r6
    827e:	d8de      	bhi.n	823e <deviceTableInit+0x5e>
    8280:	bc0c      	pop	{r2, r3}
    8282:	4690      	mov	r8, r2
    8284:	4699      	mov	r9, r3
    8286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8288:	20002c64 	.word	0x20002c64
    828c:	00009281 	.word	0x00009281

00008290 <sendForceLeaveNetwork>:
    8290:	b570      	push	{r4, r5, r6, lr}
    8292:	2516      	movs	r5, #22
    8294:	b08e      	sub	sp, #56	; 0x38
    8296:	446d      	add	r5, sp
    8298:	8028      	strh	r0, [r5, #0]
    829a:	4b11      	ldr	r3, [pc, #68]	; (82e0 <sendForceLeaveNetwork+0x50>)
    829c:	2078      	movs	r0, #120	; 0x78
    829e:	4798      	blx	r3
    82a0:	1e04      	subs	r4, r0, #0
    82a2:	d01a      	beq.n	82da <sendForceLeaveNetwork+0x4a>
    82a4:	4b0f      	ldr	r3, [pc, #60]	; (82e4 <sendForceLeaveNetwork+0x54>)
    82a6:	882a      	ldrh	r2, [r5, #0]
    82a8:	8819      	ldrh	r1, [r3, #0]
    82aa:	20ff      	movs	r0, #255	; 0xff
    82ac:	b289      	uxth	r1, r1
    82ae:	ab06      	add	r3, sp, #24
    82b0:	4e0d      	ldr	r6, [pc, #52]	; (82e8 <sendForceLeaveNetwork+0x58>)
    82b2:	47b0      	blx	r6
    82b4:	0021      	movs	r1, r4
    82b6:	4b0d      	ldr	r3, [pc, #52]	; (82ec <sendForceLeaveNetwork+0x5c>)
    82b8:	a806      	add	r0, sp, #24
    82ba:	4798      	blx	r3
    82bc:	2308      	movs	r3, #8
    82be:	5423      	strb	r3, [r4, r0]
    82c0:	4b0b      	ldr	r3, [pc, #44]	; (82f0 <sendForceLeaveNetwork+0x60>)
    82c2:	0001      	movs	r1, r0
    82c4:	9303      	str	r3, [sp, #12]
    82c6:	2300      	movs	r3, #0
    82c8:	9302      	str	r3, [sp, #8]
    82ca:	3302      	adds	r3, #2
    82cc:	9300      	str	r3, [sp, #0]
    82ce:	9501      	str	r5, [sp, #4]
    82d0:	0023      	movs	r3, r4
    82d2:	2201      	movs	r2, #1
    82d4:	a806      	add	r0, sp, #24
    82d6:	4c07      	ldr	r4, [pc, #28]	; (82f4 <sendForceLeaveNetwork+0x64>)
    82d8:	47a0      	blx	r4
    82da:	b00e      	add	sp, #56	; 0x38
    82dc:	bd70      	pop	{r4, r5, r6, pc}
    82de:	46c0      	nop			; (mov r8, r8)
    82e0:	0000339d 	.word	0x0000339d
    82e4:	20002cac 	.word	0x20002cac
    82e8:	000065d5 	.word	0x000065d5
    82ec:	00006601 	.word	0x00006601
    82f0:	000079b1 	.word	0x000079b1
    82f4:	00006699 	.word	0x00006699

000082f8 <isCorrectIeeeAddr>:
    82f8:	7803      	ldrb	r3, [r0, #0]
    82fa:	2bff      	cmp	r3, #255	; 0xff
    82fc:	d117      	bne.n	832e <isCorrectIeeeAddr+0x36>
    82fe:	7843      	ldrb	r3, [r0, #1]
    8300:	2bff      	cmp	r3, #255	; 0xff
    8302:	d114      	bne.n	832e <isCorrectIeeeAddr+0x36>
    8304:	7883      	ldrb	r3, [r0, #2]
    8306:	2bff      	cmp	r3, #255	; 0xff
    8308:	d111      	bne.n	832e <isCorrectIeeeAddr+0x36>
    830a:	78c3      	ldrb	r3, [r0, #3]
    830c:	2bff      	cmp	r3, #255	; 0xff
    830e:	d10e      	bne.n	832e <isCorrectIeeeAddr+0x36>
    8310:	7903      	ldrb	r3, [r0, #4]
    8312:	2bff      	cmp	r3, #255	; 0xff
    8314:	d10b      	bne.n	832e <isCorrectIeeeAddr+0x36>
    8316:	7943      	ldrb	r3, [r0, #5]
    8318:	2bff      	cmp	r3, #255	; 0xff
    831a:	d108      	bne.n	832e <isCorrectIeeeAddr+0x36>
    831c:	7983      	ldrb	r3, [r0, #6]
    831e:	2bff      	cmp	r3, #255	; 0xff
    8320:	d105      	bne.n	832e <isCorrectIeeeAddr+0x36>
    8322:	79c0      	ldrb	r0, [r0, #7]
    8324:	38ff      	subs	r0, #255	; 0xff
    8326:	1e43      	subs	r3, r0, #1
    8328:	4198      	sbcs	r0, r3
    832a:	b2c0      	uxtb	r0, r0
    832c:	4770      	bx	lr
    832e:	2001      	movs	r0, #1
    8330:	e7fc      	b.n	832c <isCorrectIeeeAddr+0x34>
    8332:	46c0      	nop			; (mov r8, r8)

00008334 <keepAliveTimerHandler>:
    8334:	b5f0      	push	{r4, r5, r6, r7, lr}
    8336:	46c6      	mov	lr, r8
    8338:	2320      	movs	r3, #32
    833a:	b500      	push	{lr}
    833c:	4d57      	ldr	r5, [pc, #348]	; (849c <keepAliveTimerHandler+0x168>)
    833e:	682a      	ldr	r2, [r5, #0]
    8340:	5cd7      	ldrb	r7, [r2, r3]
    8342:	2f00      	cmp	r7, #0
    8344:	d027      	beq.n	8396 <keepAliveTimerHandler+0x62>
    8346:	4b56      	ldr	r3, [pc, #344]	; (84a0 <keepAliveTimerHandler+0x16c>)
    8348:	2400      	movs	r4, #0
    834a:	4698      	mov	r8, r3
    834c:	2620      	movs	r6, #32
    834e:	0060      	lsls	r0, r4, #1
    8350:	1900      	adds	r0, r0, r4
    8352:	6813      	ldr	r3, [r2, #0]
    8354:	0080      	lsls	r0, r0, #2
    8356:	181b      	adds	r3, r3, r0
    8358:	7819      	ldrb	r1, [r3, #0]
    835a:	29ff      	cmp	r1, #255	; 0xff
    835c:	d000      	beq.n	8360 <keepAliveTimerHandler+0x2c>
    835e:	e077      	b.n	8450 <keepAliveTimerHandler+0x11c>
    8360:	7859      	ldrb	r1, [r3, #1]
    8362:	29ff      	cmp	r1, #255	; 0xff
    8364:	d000      	beq.n	8368 <keepAliveTimerHandler+0x34>
    8366:	e073      	b.n	8450 <keepAliveTimerHandler+0x11c>
    8368:	7899      	ldrb	r1, [r3, #2]
    836a:	29ff      	cmp	r1, #255	; 0xff
    836c:	d000      	beq.n	8370 <keepAliveTimerHandler+0x3c>
    836e:	e06f      	b.n	8450 <keepAliveTimerHandler+0x11c>
    8370:	78d9      	ldrb	r1, [r3, #3]
    8372:	29ff      	cmp	r1, #255	; 0xff
    8374:	d16c      	bne.n	8450 <keepAliveTimerHandler+0x11c>
    8376:	7919      	ldrb	r1, [r3, #4]
    8378:	29ff      	cmp	r1, #255	; 0xff
    837a:	d169      	bne.n	8450 <keepAliveTimerHandler+0x11c>
    837c:	7959      	ldrb	r1, [r3, #5]
    837e:	29ff      	cmp	r1, #255	; 0xff
    8380:	d166      	bne.n	8450 <keepAliveTimerHandler+0x11c>
    8382:	7999      	ldrb	r1, [r3, #6]
    8384:	29ff      	cmp	r1, #255	; 0xff
    8386:	d163      	bne.n	8450 <keepAliveTimerHandler+0x11c>
    8388:	79d9      	ldrb	r1, [r3, #7]
    838a:	29ff      	cmp	r1, #255	; 0xff
    838c:	d160      	bne.n	8450 <keepAliveTimerHandler+0x11c>
    838e:	3401      	adds	r4, #1
    8390:	b2e4      	uxtb	r4, r4
    8392:	42bc      	cmp	r4, r7
    8394:	d3db      	bcc.n	834e <keepAliveTimerHandler+0x1a>
    8396:	2323      	movs	r3, #35	; 0x23
    8398:	5cd7      	ldrb	r7, [r2, r3]
    839a:	2f00      	cmp	r7, #0
    839c:	d022      	beq.n	83e4 <keepAliveTimerHandler+0xb0>
    839e:	4b40      	ldr	r3, [pc, #256]	; (84a0 <keepAliveTimerHandler+0x16c>)
    83a0:	2400      	movs	r4, #0
    83a2:	4698      	mov	r8, r3
    83a4:	2623      	movs	r6, #35	; 0x23
    83a6:	6893      	ldr	r3, [r2, #8]
    83a8:	0120      	lsls	r0, r4, #4
    83aa:	181b      	adds	r3, r3, r0
    83ac:	7819      	ldrb	r1, [r3, #0]
    83ae:	29ff      	cmp	r1, #255	; 0xff
    83b0:	d158      	bne.n	8464 <keepAliveTimerHandler+0x130>
    83b2:	7859      	ldrb	r1, [r3, #1]
    83b4:	29ff      	cmp	r1, #255	; 0xff
    83b6:	d155      	bne.n	8464 <keepAliveTimerHandler+0x130>
    83b8:	7899      	ldrb	r1, [r3, #2]
    83ba:	29ff      	cmp	r1, #255	; 0xff
    83bc:	d152      	bne.n	8464 <keepAliveTimerHandler+0x130>
    83be:	78d9      	ldrb	r1, [r3, #3]
    83c0:	29ff      	cmp	r1, #255	; 0xff
    83c2:	d14f      	bne.n	8464 <keepAliveTimerHandler+0x130>
    83c4:	7919      	ldrb	r1, [r3, #4]
    83c6:	29ff      	cmp	r1, #255	; 0xff
    83c8:	d14c      	bne.n	8464 <keepAliveTimerHandler+0x130>
    83ca:	7959      	ldrb	r1, [r3, #5]
    83cc:	29ff      	cmp	r1, #255	; 0xff
    83ce:	d149      	bne.n	8464 <keepAliveTimerHandler+0x130>
    83d0:	7999      	ldrb	r1, [r3, #6]
    83d2:	29ff      	cmp	r1, #255	; 0xff
    83d4:	d146      	bne.n	8464 <keepAliveTimerHandler+0x130>
    83d6:	79d9      	ldrb	r1, [r3, #7]
    83d8:	29ff      	cmp	r1, #255	; 0xff
    83da:	d143      	bne.n	8464 <keepAliveTimerHandler+0x130>
    83dc:	3401      	adds	r4, #1
    83de:	b2e4      	uxtb	r4, r4
    83e0:	42bc      	cmp	r4, r7
    83e2:	d3e0      	bcc.n	83a6 <keepAliveTimerHandler+0x72>
    83e4:	2324      	movs	r3, #36	; 0x24
    83e6:	5cd7      	ldrb	r7, [r2, r3]
    83e8:	2401      	movs	r4, #1
    83ea:	2f01      	cmp	r7, #1
    83ec:	d923      	bls.n	8436 <keepAliveTimerHandler+0x102>
    83ee:	4b2c      	ldr	r3, [pc, #176]	; (84a0 <keepAliveTimerHandler+0x16c>)
    83f0:	2624      	movs	r6, #36	; 0x24
    83f2:	4698      	mov	r8, r3
    83f4:	00a0      	lsls	r0, r4, #2
    83f6:	1900      	adds	r0, r0, r4
    83f8:	68d3      	ldr	r3, [r2, #12]
    83fa:	0080      	lsls	r0, r0, #2
    83fc:	181b      	adds	r3, r3, r0
    83fe:	7819      	ldrb	r1, [r3, #0]
    8400:	29ff      	cmp	r1, #255	; 0xff
    8402:	d11b      	bne.n	843c <keepAliveTimerHandler+0x108>
    8404:	7859      	ldrb	r1, [r3, #1]
    8406:	29ff      	cmp	r1, #255	; 0xff
    8408:	d118      	bne.n	843c <keepAliveTimerHandler+0x108>
    840a:	7899      	ldrb	r1, [r3, #2]
    840c:	29ff      	cmp	r1, #255	; 0xff
    840e:	d115      	bne.n	843c <keepAliveTimerHandler+0x108>
    8410:	78d9      	ldrb	r1, [r3, #3]
    8412:	29ff      	cmp	r1, #255	; 0xff
    8414:	d112      	bne.n	843c <keepAliveTimerHandler+0x108>
    8416:	7919      	ldrb	r1, [r3, #4]
    8418:	29ff      	cmp	r1, #255	; 0xff
    841a:	d10f      	bne.n	843c <keepAliveTimerHandler+0x108>
    841c:	7959      	ldrb	r1, [r3, #5]
    841e:	29ff      	cmp	r1, #255	; 0xff
    8420:	d10c      	bne.n	843c <keepAliveTimerHandler+0x108>
    8422:	7999      	ldrb	r1, [r3, #6]
    8424:	29ff      	cmp	r1, #255	; 0xff
    8426:	d109      	bne.n	843c <keepAliveTimerHandler+0x108>
    8428:	79d9      	ldrb	r1, [r3, #7]
    842a:	29ff      	cmp	r1, #255	; 0xff
    842c:	d106      	bne.n	843c <keepAliveTimerHandler+0x108>
    842e:	3401      	adds	r4, #1
    8430:	b2e4      	uxtb	r4, r4
    8432:	42bc      	cmp	r4, r7
    8434:	d3de      	bcc.n	83f4 <keepAliveTimerHandler+0xc0>
    8436:	bc04      	pop	{r2}
    8438:	4690      	mov	r8, r2
    843a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    843c:	68d9      	ldr	r1, [r3, #12]
    843e:	2900      	cmp	r1, #0
    8440:	d0f5      	beq.n	842e <keepAliveTimerHandler+0xfa>
    8442:	3901      	subs	r1, #1
    8444:	60d9      	str	r1, [r3, #12]
    8446:	2900      	cmp	r1, #0
    8448:	d016      	beq.n	8478 <keepAliveTimerHandler+0x144>
    844a:	682a      	ldr	r2, [r5, #0]
    844c:	5d97      	ldrb	r7, [r2, r6]
    844e:	e7ee      	b.n	842e <keepAliveTimerHandler+0xfa>
    8450:	6899      	ldr	r1, [r3, #8]
    8452:	2900      	cmp	r1, #0
    8454:	d09b      	beq.n	838e <keepAliveTimerHandler+0x5a>
    8456:	3901      	subs	r1, #1
    8458:	6099      	str	r1, [r3, #8]
    845a:	2900      	cmp	r1, #0
    845c:	d012      	beq.n	8484 <keepAliveTimerHandler+0x150>
    845e:	682a      	ldr	r2, [r5, #0]
    8460:	5d97      	ldrb	r7, [r2, r6]
    8462:	e794      	b.n	838e <keepAliveTimerHandler+0x5a>
    8464:	6899      	ldr	r1, [r3, #8]
    8466:	2900      	cmp	r1, #0
    8468:	d0b8      	beq.n	83dc <keepAliveTimerHandler+0xa8>
    846a:	3901      	subs	r1, #1
    846c:	6099      	str	r1, [r3, #8]
    846e:	2900      	cmp	r1, #0
    8470:	d00e      	beq.n	8490 <keepAliveTimerHandler+0x15c>
    8472:	682a      	ldr	r2, [r5, #0]
    8474:	5d97      	ldrb	r7, [r2, r6]
    8476:	e7b1      	b.n	83dc <keepAliveTimerHandler+0xa8>
    8478:	68d3      	ldr	r3, [r2, #12]
    847a:	21ff      	movs	r1, #255	; 0xff
    847c:	1818      	adds	r0, r3, r0
    847e:	2208      	movs	r2, #8
    8480:	47c0      	blx	r8
    8482:	e7e2      	b.n	844a <keepAliveTimerHandler+0x116>
    8484:	6813      	ldr	r3, [r2, #0]
    8486:	21ff      	movs	r1, #255	; 0xff
    8488:	1818      	adds	r0, r3, r0
    848a:	2208      	movs	r2, #8
    848c:	47c0      	blx	r8
    848e:	e7e6      	b.n	845e <keepAliveTimerHandler+0x12a>
    8490:	6893      	ldr	r3, [r2, #8]
    8492:	21ff      	movs	r1, #255	; 0xff
    8494:	1818      	adds	r0, r3, r0
    8496:	2208      	movs	r2, #8
    8498:	47c0      	blx	r8
    849a:	e7ea      	b.n	8472 <keepAliveTimerHandler+0x13e>
    849c:	20002c64 	.word	0x20002c64
    84a0:	00009281 	.word	0x00009281

000084a4 <isRxOffEdAvailable>:
    84a4:	2224      	movs	r2, #36	; 0x24
    84a6:	4b1e      	ldr	r3, [pc, #120]	; (8520 <isRxOffEdAvailable+0x7c>)
    84a8:	681b      	ldr	r3, [r3, #0]
    84aa:	5c9a      	ldrb	r2, [r3, r2]
    84ac:	2a01      	cmp	r2, #1
    84ae:	d932      	bls.n	8516 <isRxOffEdAvailable+0x72>
    84b0:	68d9      	ldr	r1, [r3, #12]
    84b2:	7d0b      	ldrb	r3, [r1, #20]
    84b4:	2bff      	cmp	r3, #255	; 0xff
    84b6:	d130      	bne.n	851a <isRxOffEdAvailable+0x76>
    84b8:	7d4b      	ldrb	r3, [r1, #21]
    84ba:	2bff      	cmp	r3, #255	; 0xff
    84bc:	d12d      	bne.n	851a <isRxOffEdAvailable+0x76>
    84be:	7d8b      	ldrb	r3, [r1, #22]
    84c0:	2bff      	cmp	r3, #255	; 0xff
    84c2:	d12a      	bne.n	851a <isRxOffEdAvailable+0x76>
    84c4:	7dcb      	ldrb	r3, [r1, #23]
    84c6:	2bff      	cmp	r3, #255	; 0xff
    84c8:	d127      	bne.n	851a <isRxOffEdAvailable+0x76>
    84ca:	000b      	movs	r3, r1
    84cc:	3a02      	subs	r2, #2
    84ce:	b2d2      	uxtb	r2, r2
    84d0:	0090      	lsls	r0, r2, #2
    84d2:	1882      	adds	r2, r0, r2
    84d4:	0092      	lsls	r2, r2, #2
    84d6:	3218      	adds	r2, #24
    84d8:	3318      	adds	r3, #24
    84da:	1889      	adds	r1, r1, r2
    84dc:	e00d      	b.n	84fa <isRxOffEdAvailable+0x56>
    84de:	7c1a      	ldrb	r2, [r3, #16]
    84e0:	2aff      	cmp	r2, #255	; 0xff
    84e2:	d11a      	bne.n	851a <isRxOffEdAvailable+0x76>
    84e4:	7c5a      	ldrb	r2, [r3, #17]
    84e6:	2aff      	cmp	r2, #255	; 0xff
    84e8:	d117      	bne.n	851a <isRxOffEdAvailable+0x76>
    84ea:	7c9a      	ldrb	r2, [r3, #18]
    84ec:	2aff      	cmp	r2, #255	; 0xff
    84ee:	d114      	bne.n	851a <isRxOffEdAvailable+0x76>
    84f0:	3314      	adds	r3, #20
    84f2:	1e5a      	subs	r2, r3, #1
    84f4:	7812      	ldrb	r2, [r2, #0]
    84f6:	2aff      	cmp	r2, #255	; 0xff
    84f8:	d10f      	bne.n	851a <isRxOffEdAvailable+0x76>
    84fa:	781a      	ldrb	r2, [r3, #0]
    84fc:	2aff      	cmp	r2, #255	; 0xff
    84fe:	d10c      	bne.n	851a <isRxOffEdAvailable+0x76>
    8500:	785a      	ldrb	r2, [r3, #1]
    8502:	2aff      	cmp	r2, #255	; 0xff
    8504:	d109      	bne.n	851a <isRxOffEdAvailable+0x76>
    8506:	789a      	ldrb	r2, [r3, #2]
    8508:	2aff      	cmp	r2, #255	; 0xff
    850a:	d106      	bne.n	851a <isRxOffEdAvailable+0x76>
    850c:	78da      	ldrb	r2, [r3, #3]
    850e:	2aff      	cmp	r2, #255	; 0xff
    8510:	d103      	bne.n	851a <isRxOffEdAvailable+0x76>
    8512:	4299      	cmp	r1, r3
    8514:	d1e3      	bne.n	84de <isRxOffEdAvailable+0x3a>
    8516:	2000      	movs	r0, #0
    8518:	4770      	bx	lr
    851a:	2001      	movs	r0, #1
    851c:	e7fc      	b.n	8518 <isRxOffEdAvailable+0x74>
    851e:	46c0      	nop			; (mov r8, r8)
    8520:	20002c64 	.word	0x20002c64

00008524 <routeReplyConfcb>:
    8524:	b510      	push	{r4, lr}
    8526:	0010      	movs	r0, r2
    8528:	4b01      	ldr	r3, [pc, #4]	; (8530 <routeReplyConfcb+0xc>)
    852a:	4798      	blx	r3
    852c:	bd10      	pop	{r4, pc}
    852e:	46c0      	nop			; (mov r8, r8)
    8530:	000033ed 	.word	0x000033ed

00008534 <routeUpdateConfcb>:
    8534:	b510      	push	{r4, lr}
    8536:	0010      	movs	r0, r2
    8538:	4b01      	ldr	r3, [pc, #4]	; (8540 <routeUpdateConfcb+0xc>)
    853a:	4798      	blx	r3
    853c:	bd10      	pop	{r4, pc}
    853e:	46c0      	nop			; (mov r8, r8)
    8540:	000033ed 	.word	0x000033ed

00008544 <routeReqConfcb>:
    8544:	b510      	push	{r4, lr}
    8546:	0010      	movs	r0, r2
    8548:	4b01      	ldr	r3, [pc, #4]	; (8550 <routeReqConfcb+0xc>)
    854a:	4798      	blx	r3
    854c:	bd10      	pop	{r4, pc}
    854e:	46c0      	nop			; (mov r8, r8)
    8550:	000033ed 	.word	0x000033ed

00008554 <initRouteTable>:
    8554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8556:	2320      	movs	r3, #32
    8558:	4c15      	ldr	r4, [pc, #84]	; (85b0 <initRouteTable+0x5c>)
    855a:	6822      	ldr	r2, [r4, #0]
    855c:	5cd3      	ldrb	r3, [r2, r3]
    855e:	2b00      	cmp	r3, #0
    8560:	d018      	beq.n	8594 <initRouteTable+0x40>
    8562:	2300      	movs	r3, #0
    8564:	27ff      	movs	r7, #255	; 0xff
    8566:	250f      	movs	r5, #15
    8568:	2620      	movs	r6, #32
    856a:	6912      	ldr	r2, [r2, #16]
    856c:	0058      	lsls	r0, r3, #1
    856e:	5417      	strb	r7, [r2, r0]
    8570:	6822      	ldr	r2, [r4, #0]
    8572:	3301      	adds	r3, #1
    8574:	6911      	ldr	r1, [r2, #16]
    8576:	b2db      	uxtb	r3, r3
    8578:	1809      	adds	r1, r1, r0
    857a:	784a      	ldrb	r2, [r1, #1]
    857c:	43aa      	bics	r2, r5
    857e:	704a      	strb	r2, [r1, #1]
    8580:	6822      	ldr	r2, [r4, #0]
    8582:	6912      	ldr	r2, [r2, #16]
    8584:	1812      	adds	r2, r2, r0
    8586:	7851      	ldrb	r1, [r2, #1]
    8588:	4029      	ands	r1, r5
    858a:	7051      	strb	r1, [r2, #1]
    858c:	6822      	ldr	r2, [r4, #0]
    858e:	5d91      	ldrb	r1, [r2, r6]
    8590:	4299      	cmp	r1, r3
    8592:	d8ea      	bhi.n	856a <initRouteTable+0x16>
    8594:	2100      	movs	r1, #0
    8596:	6950      	ldr	r0, [r2, #20]
    8598:	4b06      	ldr	r3, [pc, #24]	; (85b4 <initRouteTable+0x60>)
    859a:	2220      	movs	r2, #32
    859c:	4798      	blx	r3
    859e:	4806      	ldr	r0, [pc, #24]	; (85b8 <initRouteTable+0x64>)
    85a0:	4b06      	ldr	r3, [pc, #24]	; (85bc <initRouteTable+0x68>)
    85a2:	4798      	blx	r3
    85a4:	2325      	movs	r3, #37	; 0x25
    85a6:	6822      	ldr	r2, [r4, #0]
    85a8:	5cd2      	ldrb	r2, [r2, r3]
    85aa:	4b05      	ldr	r3, [pc, #20]	; (85c0 <initRouteTable+0x6c>)
    85ac:	701a      	strb	r2, [r3, #0]
    85ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85b0:	20002c64 	.word	0x20002c64
    85b4:	00009281 	.word	0x00009281
    85b8:	20002ce8 	.word	0x20002ce8
    85bc:	000034fd 	.word	0x000034fd
    85c0:	20002ce4 	.word	0x20002ce4

000085c4 <addRoute>:
    85c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    85c6:	46c6      	mov	lr, r8
    85c8:	0a04      	lsrs	r4, r0, #8
    85ca:	2020      	movs	r0, #32
    85cc:	b500      	push	{lr}
    85ce:	4f2d      	ldr	r7, [pc, #180]	; (8684 <addRoute+0xc0>)
    85d0:	683d      	ldr	r5, [r7, #0]
    85d2:	5c2e      	ldrb	r6, [r5, r0]
    85d4:	2000      	movs	r0, #0
    85d6:	42b4      	cmp	r4, r6
    85d8:	d237      	bcs.n	864a <addRoute+0x86>
    85da:	0a09      	lsrs	r1, r1, #8
    85dc:	42b1      	cmp	r1, r6
    85de:	d234      	bcs.n	864a <addRoute+0x86>
    85e0:	1c10      	adds	r0, r2, #0
    85e2:	2a0f      	cmp	r2, #15
    85e4:	d834      	bhi.n	8650 <addRoute+0x8c>
    85e6:	b2c2      	uxtb	r2, r0
    85e8:	2001      	movs	r0, #1
    85ea:	4020      	ands	r0, r4
    85ec:	4684      	mov	ip, r0
    85ee:	d135      	bne.n	865c <addRoute+0x98>
    85f0:	0860      	lsrs	r0, r4, #1
    85f2:	4680      	mov	r8, r0
    85f4:	4646      	mov	r6, r8
    85f6:	6968      	ldr	r0, [r5, #20]
    85f8:	5d86      	ldrb	r6, [r0, r6]
    85fa:	0936      	lsrs	r6, r6, #4
    85fc:	2e00      	cmp	r6, #0
    85fe:	d002      	beq.n	8606 <addRoute+0x42>
    8600:	2000      	movs	r0, #0
    8602:	42b2      	cmp	r2, r6
    8604:	d221      	bcs.n	864a <addRoute+0x86>
    8606:	0060      	lsls	r0, r4, #1
    8608:	692c      	ldr	r4, [r5, #16]
    860a:	5421      	strb	r1, [r4, r0]
    860c:	4661      	mov	r1, ip
    860e:	2900      	cmp	r1, #0
    8610:	d12c      	bne.n	866c <addRoute+0xa8>
    8612:	0114      	lsls	r4, r2, #4
    8614:	4642      	mov	r2, r8
    8616:	6839      	ldr	r1, [r7, #0]
    8618:	6949      	ldr	r1, [r1, #20]
    861a:	5c8d      	ldrb	r5, [r1, r2]
    861c:	220f      	movs	r2, #15
    861e:	402a      	ands	r2, r5
    8620:	4322      	orrs	r2, r4
    8622:	4644      	mov	r4, r8
    8624:	550a      	strb	r2, [r1, r4]
    8626:	683a      	ldr	r2, [r7, #0]
    8628:	091c      	lsrs	r4, r3, #4
    862a:	6911      	ldr	r1, [r2, #16]
    862c:	220f      	movs	r2, #15
    862e:	1809      	adds	r1, r1, r0
    8630:	784b      	ldrb	r3, [r1, #1]
    8632:	4393      	bics	r3, r2
    8634:	4323      	orrs	r3, r4
    8636:	704b      	strb	r3, [r1, #1]
    8638:	683b      	ldr	r3, [r7, #0]
    863a:	691c      	ldr	r4, [r3, #16]
    863c:	1824      	adds	r4, r4, r0
    863e:	7863      	ldrb	r3, [r4, #1]
    8640:	2001      	movs	r0, #1
    8642:	401a      	ands	r2, r3
    8644:	2330      	movs	r3, #48	; 0x30
    8646:	431a      	orrs	r2, r3
    8648:	7062      	strb	r2, [r4, #1]
    864a:	bc04      	pop	{r2}
    864c:	4690      	mov	r8, r2
    864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8650:	200f      	movs	r0, #15
    8652:	b2c2      	uxtb	r2, r0
    8654:	2001      	movs	r0, #1
    8656:	4020      	ands	r0, r4
    8658:	4684      	mov	ip, r0
    865a:	d0c9      	beq.n	85f0 <addRoute+0x2c>
    865c:	0860      	lsrs	r0, r4, #1
    865e:	4680      	mov	r8, r0
    8660:	4646      	mov	r6, r8
    8662:	6968      	ldr	r0, [r5, #20]
    8664:	5d86      	ldrb	r6, [r0, r6]
    8666:	0736      	lsls	r6, r6, #28
    8668:	0f36      	lsrs	r6, r6, #28
    866a:	e7c7      	b.n	85fc <addRoute+0x38>
    866c:	240f      	movs	r4, #15
    866e:	4022      	ands	r2, r4
    8670:	0015      	movs	r5, r2
    8672:	4642      	mov	r2, r8
    8674:	6839      	ldr	r1, [r7, #0]
    8676:	6949      	ldr	r1, [r1, #20]
    8678:	5c8a      	ldrb	r2, [r1, r2]
    867a:	43a2      	bics	r2, r4
    867c:	4644      	mov	r4, r8
    867e:	432a      	orrs	r2, r5
    8680:	550a      	strb	r2, [r1, r4]
    8682:	e7d0      	b.n	8626 <addRoute+0x62>
    8684:	20002c64 	.word	0x20002c64

00008688 <handleRouteMessage>:
    8688:	b5f0      	push	{r4, r5, r6, r7, lr}
    868a:	4657      	mov	r7, sl
    868c:	46de      	mov	lr, fp
    868e:	464e      	mov	r6, r9
    8690:	4645      	mov	r5, r8
    8692:	b5e0      	push	{r5, r6, r7, lr}
    8694:	0004      	movs	r4, r0
    8696:	b093      	sub	sp, #76	; 0x4c
    8698:	7850      	ldrb	r0, [r2, #1]
    869a:	a91c      	add	r1, sp, #112	; 0x70
    869c:	7812      	ldrb	r2, [r2, #0]
    869e:	780f      	ldrb	r7, [r1, #0]
    86a0:	0201      	lsls	r1, r0, #8
    86a2:	4311      	orrs	r1, r2
    86a4:	781a      	ldrb	r2, [r3, #0]
    86a6:	2a12      	cmp	r2, #18
    86a8:	d100      	bne.n	86ac <handleRouteMessage+0x24>
    86aa:	e150      	b.n	894e <handleRouteMessage+0x2c6>
    86ac:	2a13      	cmp	r2, #19
    86ae:	d100      	bne.n	86b2 <handleRouteMessage+0x2a>
    86b0:	e07f      	b.n	87b2 <handleRouteMessage+0x12a>
    86b2:	2a11      	cmp	r2, #17
    86b4:	d009      	beq.n	86ca <handleRouteMessage+0x42>
    86b6:	2300      	movs	r3, #0
    86b8:	4698      	mov	r8, r3
    86ba:	4640      	mov	r0, r8
    86bc:	b013      	add	sp, #76	; 0x4c
    86be:	bc3c      	pop	{r2, r3, r4, r5}
    86c0:	4690      	mov	r8, r2
    86c2:	4699      	mov	r9, r3
    86c4:	46a2      	mov	sl, r4
    86c6:	46ab      	mov	fp, r5
    86c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86ca:	789d      	ldrb	r5, [r3, #2]
    86cc:	785a      	ldrb	r2, [r3, #1]
    86ce:	022b      	lsls	r3, r5, #8
    86d0:	431a      	orrs	r2, r3
    86d2:	4691      	mov	r9, r2
    86d4:	7822      	ldrb	r2, [r4, #0]
    86d6:	b289      	uxth	r1, r1
    86d8:	4252      	negs	r2, r2
    86da:	b2d2      	uxtb	r2, r2
    86dc:	003b      	movs	r3, r7
    86de:	4eb3      	ldr	r6, [pc, #716]	; (89ac <handleRouteMessage+0x324>)
    86e0:	88e0      	ldrh	r0, [r4, #6]
    86e2:	47b0      	blx	r6
    86e4:	2220      	movs	r2, #32
    86e6:	2101      	movs	r1, #1
    86e8:	4eb1      	ldr	r6, [pc, #708]	; (89b0 <handleRouteMessage+0x328>)
    86ea:	4688      	mov	r8, r1
    86ec:	6833      	ldr	r3, [r6, #0]
    86ee:	5c9a      	ldrb	r2, [r3, r2]
    86f0:	42aa      	cmp	r2, r5
    86f2:	d9e2      	bls.n	86ba <handleRouteMessage+0x32>
    86f4:	4229      	tst	r1, r5
    86f6:	d000      	beq.n	86fa <handleRouteMessage+0x72>
    86f8:	e147      	b.n	898a <handleRouteMessage+0x302>
    86fa:	695b      	ldr	r3, [r3, #20]
    86fc:	086a      	lsrs	r2, r5, #1
    86fe:	5c9f      	ldrb	r7, [r3, r2]
    8700:	093b      	lsrs	r3, r7, #4
    8702:	469b      	mov	fp, r3
    8704:	4bab      	ldr	r3, [pc, #684]	; (89b4 <handleRouteMessage+0x32c>)
    8706:	469a      	mov	sl, r3
    8708:	881b      	ldrh	r3, [r3, #0]
    870a:	4599      	cmp	r9, r3
    870c:	d004      	beq.n	8718 <handleRouteMessage+0x90>
    870e:	2301      	movs	r3, #1
    8710:	4698      	mov	r8, r3
    8712:	465b      	mov	r3, fp
    8714:	2b00      	cmp	r3, #0
    8716:	d0d0      	beq.n	86ba <handleRouteMessage+0x32>
    8718:	88e3      	ldrh	r3, [r4, #6]
    871a:	2078      	movs	r0, #120	; 0x78
    871c:	4699      	mov	r9, r3
    871e:	4ba6      	ldr	r3, [pc, #664]	; (89b8 <handleRouteMessage+0x330>)
    8720:	4798      	blx	r3
    8722:	4680      	mov	r8, r0
    8724:	2800      	cmp	r0, #0
    8726:	d0c6      	beq.n	86b6 <handleRouteMessage+0x2e>
    8728:	4653      	mov	r3, sl
    872a:	8819      	ldrh	r1, [r3, #0]
    872c:	ac0a      	add	r4, sp, #40	; 0x28
    872e:	b289      	uxth	r1, r1
    8730:	0023      	movs	r3, r4
    8732:	464a      	mov	r2, r9
    8734:	20ff      	movs	r0, #255	; 0xff
    8736:	4fa1      	ldr	r7, [pc, #644]	; (89bc <handleRouteMessage+0x334>)
    8738:	47b8      	blx	r7
    873a:	2210      	movs	r2, #16
    873c:	7863      	ldrb	r3, [r4, #1]
    873e:	4641      	mov	r1, r8
    8740:	4393      	bics	r3, r2
    8742:	7063      	strb	r3, [r4, #1]
    8744:	0020      	movs	r0, r4
    8746:	4b9e      	ldr	r3, [pc, #632]	; (89c0 <handleRouteMessage+0x338>)
    8748:	4798      	blx	r3
    874a:	2312      	movs	r3, #18
    874c:	4642      	mov	r2, r8
    874e:	0001      	movs	r1, r0
    8750:	5413      	strb	r3, [r2, r0]
    8752:	1c43      	adds	r3, r0, #1
    8754:	2200      	movs	r2, #0
    8756:	4640      	mov	r0, r8
    8758:	b2db      	uxtb	r3, r3
    875a:	54c2      	strb	r2, [r0, r3]
    875c:	1c8b      	adds	r3, r1, #2
    875e:	b2db      	uxtb	r3, r3
    8760:	54c5      	strb	r5, [r0, r3]
    8762:	4642      	mov	r2, r8
    8764:	4658      	mov	r0, fp
    8766:	1ccb      	adds	r3, r1, #3
    8768:	b2db      	uxtb	r3, r3
    876a:	54d0      	strb	r0, [r2, r3]
    876c:	2020      	movs	r0, #32
    876e:	464b      	mov	r3, r9
    8770:	6832      	ldr	r2, [r6, #0]
    8772:	0a1b      	lsrs	r3, r3, #8
    8774:	5c10      	ldrb	r0, [r2, r0]
    8776:	4298      	cmp	r0, r3
    8778:	d800      	bhi.n	877c <handleRouteMessage+0xf4>
    877a:	e10d      	b.n	8998 <handleRouteMessage+0x310>
    877c:	6912      	ldr	r2, [r2, #16]
    877e:	005b      	lsls	r3, r3, #1
    8780:	5c9b      	ldrb	r3, [r3, r2]
    8782:	2bff      	cmp	r3, #255	; 0xff
    8784:	d100      	bne.n	8788 <handleRouteMessage+0x100>
    8786:	e107      	b.n	8998 <handleRouteMessage+0x310>
    8788:	021b      	lsls	r3, r3, #8
    878a:	a804      	add	r0, sp, #16
    878c:	4684      	mov	ip, r0
    878e:	2216      	movs	r2, #22
    8790:	4462      	add	r2, ip
    8792:	8013      	strh	r3, [r2, #0]
    8794:	4b8b      	ldr	r3, [pc, #556]	; (89c4 <handleRouteMessage+0x33c>)
    8796:	9201      	str	r2, [sp, #4]
    8798:	9303      	str	r3, [sp, #12]
    879a:	2300      	movs	r3, #0
    879c:	9302      	str	r3, [sp, #8]
    879e:	3302      	adds	r3, #2
    87a0:	9300      	str	r3, [sp, #0]
    87a2:	0020      	movs	r0, r4
    87a4:	4643      	mov	r3, r8
    87a6:	2204      	movs	r2, #4
    87a8:	4c87      	ldr	r4, [pc, #540]	; (89c8 <handleRouteMessage+0x340>)
    87aa:	47a0      	blx	r4
    87ac:	2300      	movs	r3, #0
    87ae:	4698      	mov	r8, r3
    87b0:	e783      	b.n	86ba <handleRouteMessage+0x32>
    87b2:	4a86      	ldr	r2, [pc, #536]	; (89cc <handleRouteMessage+0x344>)
    87b4:	7812      	ldrb	r2, [r2, #0]
    87b6:	4690      	mov	r8, r2
    87b8:	2a00      	cmp	r2, #0
    87ba:	d000      	beq.n	87be <handleRouteMessage+0x136>
    87bc:	e77b      	b.n	86b6 <handleRouteMessage+0x2e>
    87be:	785a      	ldrb	r2, [r3, #1]
    87c0:	1c9d      	adds	r5, r3, #2
    87c2:	4693      	mov	fp, r2
    87c4:	2a00      	cmp	r2, #0
    87c6:	d100      	bne.n	87ca <handleRouteMessage+0x142>
    87c8:	e0e8      	b.n	899c <handleRouteMessage+0x314>
    87ca:	4e79      	ldr	r6, [pc, #484]	; (89b0 <handleRouteMessage+0x328>)
    87cc:	240f      	movs	r4, #15
    87ce:	6833      	ldr	r3, [r6, #0]
    87d0:	4641      	mov	r1, r8
    87d2:	695b      	ldr	r3, [r3, #20]
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	469c      	mov	ip, r3
    87d8:	093b      	lsrs	r3, r7, #4
    87da:	001a      	movs	r2, r3
    87dc:	4022      	ands	r2, r4
    87de:	9205      	str	r2, [sp, #20]
    87e0:	4662      	mov	r2, ip
    87e2:	2702      	movs	r7, #2
    87e4:	9306      	str	r3, [sp, #24]
    87e6:	4684      	mov	ip, r0
    87e8:	2300      	movs	r3, #0
    87ea:	0010      	movs	r0, r2
    87ec:	9704      	str	r7, [sp, #16]
    87ee:	782a      	ldrb	r2, [r5, #0]
    87f0:	0011      	movs	r1, r2
    87f2:	43a1      	bics	r1, r4
    87f4:	d02d      	beq.n	8852 <handleRouteMessage+0x1ca>
    87f6:	0911      	lsrs	r1, r2, #4
    87f8:	3101      	adds	r1, #1
    87fa:	2910      	cmp	r1, #16
    87fc:	d100      	bne.n	8800 <handleRouteMessage+0x178>
    87fe:	3901      	subs	r1, #1
    8800:	18c7      	adds	r7, r0, r3
    8802:	46b8      	mov	r8, r7
    8804:	783f      	ldrb	r7, [r7, #0]
    8806:	46b9      	mov	r9, r7
    8808:	43a7      	bics	r7, r4
    880a:	d003      	beq.n	8814 <handleRouteMessage+0x18c>
    880c:	464f      	mov	r7, r9
    880e:	093f      	lsrs	r7, r7, #4
    8810:	42b9      	cmp	r1, r7
    8812:	da1e      	bge.n	8852 <handleRouteMessage+0x1ca>
    8814:	4642      	mov	r2, r8
    8816:	7812      	ldrb	r2, [r2, #0]
    8818:	0109      	lsls	r1, r1, #4
    881a:	4022      	ands	r2, r4
    881c:	4311      	orrs	r1, r2
    881e:	4642      	mov	r2, r8
    8820:	4660      	mov	r0, ip
    8822:	7011      	strb	r1, [r2, #0]
    8824:	6831      	ldr	r1, [r6, #0]
    8826:	009a      	lsls	r2, r3, #2
    8828:	6909      	ldr	r1, [r1, #16]
    882a:	9f05      	ldr	r7, [sp, #20]
    882c:	5488      	strb	r0, [r1, r2]
    882e:	6831      	ldr	r1, [r6, #0]
    8830:	6908      	ldr	r0, [r1, #16]
    8832:	1880      	adds	r0, r0, r2
    8834:	7841      	ldrb	r1, [r0, #1]
    8836:	43a1      	bics	r1, r4
    8838:	4339      	orrs	r1, r7
    883a:	7041      	strb	r1, [r0, #1]
    883c:	2030      	movs	r0, #48	; 0x30
    883e:	6831      	ldr	r1, [r6, #0]
    8840:	6909      	ldr	r1, [r1, #16]
    8842:	188a      	adds	r2, r1, r2
    8844:	7851      	ldrb	r1, [r2, #1]
    8846:	4021      	ands	r1, r4
    8848:	4301      	orrs	r1, r0
    884a:	7051      	strb	r1, [r2, #1]
    884c:	6831      	ldr	r1, [r6, #0]
    884e:	782a      	ldrb	r2, [r5, #0]
    8850:	6948      	ldr	r0, [r1, #20]
    8852:	4214      	tst	r4, r2
    8854:	d02a      	beq.n	88ac <handleRouteMessage+0x224>
    8856:	0712      	lsls	r2, r2, #28
    8858:	0f12      	lsrs	r2, r2, #28
    885a:	3201      	adds	r2, #1
    885c:	2a10      	cmp	r2, #16
    885e:	d100      	bne.n	8862 <handleRouteMessage+0x1da>
    8860:	3a01      	subs	r2, #1
    8862:	18c1      	adds	r1, r0, r3
    8864:	780f      	ldrb	r7, [r1, #0]
    8866:	423c      	tst	r4, r7
    8868:	d003      	beq.n	8872 <handleRouteMessage+0x1ea>
    886a:	073f      	lsls	r7, r7, #28
    886c:	0f3f      	lsrs	r7, r7, #28
    886e:	42ba      	cmp	r2, r7
    8870:	da1c      	bge.n	88ac <handleRouteMessage+0x224>
    8872:	7808      	ldrb	r0, [r1, #0]
    8874:	4022      	ands	r2, r4
    8876:	43a0      	bics	r0, r4
    8878:	4302      	orrs	r2, r0
    887a:	700a      	strb	r2, [r1, #0]
    887c:	4661      	mov	r1, ip
    887e:	9f04      	ldr	r7, [sp, #16]
    8880:	6832      	ldr	r2, [r6, #0]
    8882:	46b8      	mov	r8, r7
    8884:	6912      	ldr	r2, [r2, #16]
    8886:	9805      	ldr	r0, [sp, #20]
    8888:	55d1      	strb	r1, [r2, r7]
    888a:	6832      	ldr	r2, [r6, #0]
    888c:	6911      	ldr	r1, [r2, #16]
    888e:	4441      	add	r1, r8
    8890:	784a      	ldrb	r2, [r1, #1]
    8892:	43a2      	bics	r2, r4
    8894:	4302      	orrs	r2, r0
    8896:	2030      	movs	r0, #48	; 0x30
    8898:	704a      	strb	r2, [r1, #1]
    889a:	6832      	ldr	r2, [r6, #0]
    889c:	6911      	ldr	r1, [r2, #16]
    889e:	4441      	add	r1, r8
    88a0:	784a      	ldrb	r2, [r1, #1]
    88a2:	4022      	ands	r2, r4
    88a4:	4302      	orrs	r2, r0
    88a6:	704a      	strb	r2, [r1, #1]
    88a8:	6832      	ldr	r2, [r6, #0]
    88aa:	6950      	ldr	r0, [r2, #20]
    88ac:	9a04      	ldr	r2, [sp, #16]
    88ae:	3301      	adds	r3, #1
    88b0:	3204      	adds	r2, #4
    88b2:	9204      	str	r2, [sp, #16]
    88b4:	b2da      	uxtb	r2, r3
    88b6:	3501      	adds	r5, #1
    88b8:	4593      	cmp	fp, r2
    88ba:	d898      	bhi.n	87ee <handleRouteMessage+0x166>
    88bc:	0002      	movs	r2, r0
    88be:	9b07      	ldr	r3, [sp, #28]
    88c0:	4660      	mov	r0, ip
    88c2:	4698      	mov	r8, r3
    88c4:	4694      	mov	ip, r2
    88c6:	0842      	lsrs	r2, r0, #1
    88c8:	07c3      	lsls	r3, r0, #31
    88ca:	d54f      	bpl.n	896c <handleRouteMessage+0x2e4>
    88cc:	4663      	mov	r3, ip
    88ce:	210f      	movs	r1, #15
    88d0:	5c9b      	ldrb	r3, [r3, r2]
    88d2:	438b      	bics	r3, r1
    88d4:	2101      	movs	r1, #1
    88d6:	430b      	orrs	r3, r1
    88d8:	4661      	mov	r1, ip
    88da:	548b      	strb	r3, [r1, r2]
    88dc:	210f      	movs	r1, #15
    88de:	6833      	ldr	r3, [r6, #0]
    88e0:	0044      	lsls	r4, r0, #1
    88e2:	691b      	ldr	r3, [r3, #16]
    88e4:	9a06      	ldr	r2, [sp, #24]
    88e6:	5518      	strb	r0, [r3, r4]
    88e8:	6833      	ldr	r3, [r6, #0]
    88ea:	6918      	ldr	r0, [r3, #16]
    88ec:	1900      	adds	r0, r0, r4
    88ee:	7843      	ldrb	r3, [r0, #1]
    88f0:	438b      	bics	r3, r1
    88f2:	4313      	orrs	r3, r2
    88f4:	7043      	strb	r3, [r0, #1]
    88f6:	2030      	movs	r0, #48	; 0x30
    88f8:	6833      	ldr	r3, [r6, #0]
    88fa:	691a      	ldr	r2, [r3, #16]
    88fc:	1912      	adds	r2, r2, r4
    88fe:	7853      	ldrb	r3, [r2, #1]
    8900:	400b      	ands	r3, r1
    8902:	4303      	orrs	r3, r0
    8904:	7053      	strb	r3, [r2, #1]
    8906:	4b2b      	ldr	r3, [pc, #172]	; (89b4 <handleRouteMessage+0x32c>)
    8908:	6830      	ldr	r0, [r6, #0]
    890a:	881b      	ldrh	r3, [r3, #0]
    890c:	6904      	ldr	r4, [r0, #16]
    890e:	0a1b      	lsrs	r3, r3, #8
    8910:	b2da      	uxtb	r2, r3
    8912:	005b      	lsls	r3, r3, #1
    8914:	5ce4      	ldrb	r4, [r4, r3]
    8916:	2cff      	cmp	r4, #255	; 0xff
    8918:	d100      	bne.n	891c <handleRouteMessage+0x294>
    891a:	e6cc      	b.n	86b6 <handleRouteMessage+0x2e>
    891c:	07d4      	lsls	r4, r2, #31
    891e:	d52e      	bpl.n	897e <handleRouteMessage+0x2f6>
    8920:	6944      	ldr	r4, [r0, #20]
    8922:	0852      	lsrs	r2, r2, #1
    8924:	5ca0      	ldrb	r0, [r4, r2]
    8926:	4388      	bics	r0, r1
    8928:	54a0      	strb	r0, [r4, r2]
    892a:	21ff      	movs	r1, #255	; 0xff
    892c:	6832      	ldr	r2, [r6, #0]
    892e:	6912      	ldr	r2, [r2, #16]
    8930:	54d1      	strb	r1, [r2, r3]
    8932:	6832      	ldr	r2, [r6, #0]
    8934:	39f0      	subs	r1, #240	; 0xf0
    8936:	6912      	ldr	r2, [r2, #16]
    8938:	18d2      	adds	r2, r2, r3
    893a:	7850      	ldrb	r0, [r2, #1]
    893c:	4388      	bics	r0, r1
    893e:	7050      	strb	r0, [r2, #1]
    8940:	6832      	ldr	r2, [r6, #0]
    8942:	6912      	ldr	r2, [r2, #16]
    8944:	18d3      	adds	r3, r2, r3
    8946:	785a      	ldrb	r2, [r3, #1]
    8948:	4011      	ands	r1, r2
    894a:	7059      	strb	r1, [r3, #1]
    894c:	e6b5      	b.n	86ba <handleRouteMessage+0x32>
    894e:	7858      	ldrb	r0, [r3, #1]
    8950:	789d      	ldrb	r5, [r3, #2]
    8952:	78da      	ldrb	r2, [r3, #3]
    8954:	7823      	ldrb	r3, [r4, #0]
    8956:	022d      	lsls	r5, r5, #8
    8958:	1ad2      	subs	r2, r2, r3
    895a:	b2d2      	uxtb	r2, r2
    895c:	003b      	movs	r3, r7
    895e:	b289      	uxth	r1, r1
    8960:	4328      	orrs	r0, r5
    8962:	4c12      	ldr	r4, [pc, #72]	; (89ac <handleRouteMessage+0x324>)
    8964:	47a0      	blx	r4
    8966:	2300      	movs	r3, #0
    8968:	4698      	mov	r8, r3
    896a:	e6a6      	b.n	86ba <handleRouteMessage+0x32>
    896c:	4663      	mov	r3, ip
    896e:	5c99      	ldrb	r1, [r3, r2]
    8970:	230f      	movs	r3, #15
    8972:	400b      	ands	r3, r1
    8974:	2110      	movs	r1, #16
    8976:	430b      	orrs	r3, r1
    8978:	4661      	mov	r1, ip
    897a:	548b      	strb	r3, [r1, r2]
    897c:	e7ae      	b.n	88dc <handleRouteMessage+0x254>
    897e:	6940      	ldr	r0, [r0, #20]
    8980:	0852      	lsrs	r2, r2, #1
    8982:	5c84      	ldrb	r4, [r0, r2]
    8984:	4021      	ands	r1, r4
    8986:	5481      	strb	r1, [r0, r2]
    8988:	e7cf      	b.n	892a <handleRouteMessage+0x2a2>
    898a:	695b      	ldr	r3, [r3, #20]
    898c:	086a      	lsrs	r2, r5, #1
    898e:	5c9f      	ldrb	r7, [r3, r2]
    8990:	073f      	lsls	r7, r7, #28
    8992:	0f3b      	lsrs	r3, r7, #28
    8994:	469b      	mov	fp, r3
    8996:	e6b5      	b.n	8704 <handleRouteMessage+0x7c>
    8998:	4b0d      	ldr	r3, [pc, #52]	; (89d0 <handleRouteMessage+0x348>)
    899a:	e6f6      	b.n	878a <handleRouteMessage+0x102>
    899c:	4e04      	ldr	r6, [pc, #16]	; (89b0 <handleRouteMessage+0x328>)
    899e:	093b      	lsrs	r3, r7, #4
    89a0:	9306      	str	r3, [sp, #24]
    89a2:	6833      	ldr	r3, [r6, #0]
    89a4:	695b      	ldr	r3, [r3, #20]
    89a6:	469c      	mov	ip, r3
    89a8:	e78d      	b.n	88c6 <handleRouteMessage+0x23e>
    89aa:	46c0      	nop			; (mov r8, r8)
    89ac:	000085c5 	.word	0x000085c5
    89b0:	20002c64 	.word	0x20002c64
    89b4:	20002cac 	.word	0x20002cac
    89b8:	0000339d 	.word	0x0000339d
    89bc:	000065d5 	.word	0x000065d5
    89c0:	00006601 	.word	0x00006601
    89c4:	00008525 	.word	0x00008525
    89c8:	00006699 	.word	0x00006699
    89cc:	200003cc 	.word	0x200003cc
    89d0:	0000ffff 	.word	0x0000ffff

000089d4 <removeRoute>:
    89d4:	2120      	movs	r1, #32
    89d6:	b530      	push	{r4, r5, lr}
    89d8:	4a14      	ldr	r2, [pc, #80]	; (8a2c <removeRoute+0x58>)
    89da:	0a03      	lsrs	r3, r0, #8
    89dc:	6814      	ldr	r4, [r2, #0]
    89de:	2000      	movs	r0, #0
    89e0:	5c61      	ldrb	r1, [r4, r1]
    89e2:	4299      	cmp	r1, r3
    89e4:	d919      	bls.n	8a1a <removeRoute+0x46>
    89e6:	6920      	ldr	r0, [r4, #16]
    89e8:	24ff      	movs	r4, #255	; 0xff
    89ea:	0059      	lsls	r1, r3, #1
    89ec:	5444      	strb	r4, [r0, r1]
    89ee:	6810      	ldr	r0, [r2, #0]
    89f0:	3cf0      	subs	r4, #240	; 0xf0
    89f2:	6900      	ldr	r0, [r0, #16]
    89f4:	1840      	adds	r0, r0, r1
    89f6:	7845      	ldrb	r5, [r0, #1]
    89f8:	43a5      	bics	r5, r4
    89fa:	7045      	strb	r5, [r0, #1]
    89fc:	6810      	ldr	r0, [r2, #0]
    89fe:	6900      	ldr	r0, [r0, #16]
    8a00:	1841      	adds	r1, r0, r1
    8a02:	7848      	ldrb	r0, [r1, #1]
    8a04:	4020      	ands	r0, r4
    8a06:	7048      	strb	r0, [r1, #1]
    8a08:	6812      	ldr	r2, [r2, #0]
    8a0a:	07d9      	lsls	r1, r3, #31
    8a0c:	d406      	bmi.n	8a1c <removeRoute+0x48>
    8a0e:	2001      	movs	r0, #1
    8a10:	6952      	ldr	r2, [r2, #20]
    8a12:	085b      	lsrs	r3, r3, #1
    8a14:	5cd1      	ldrb	r1, [r2, r3]
    8a16:	400c      	ands	r4, r1
    8a18:	54d4      	strb	r4, [r2, r3]
    8a1a:	bd30      	pop	{r4, r5, pc}
    8a1c:	6951      	ldr	r1, [r2, #20]
    8a1e:	085b      	lsrs	r3, r3, #1
    8a20:	5cca      	ldrb	r2, [r1, r3]
    8a22:	2001      	movs	r0, #1
    8a24:	43a2      	bics	r2, r4
    8a26:	54ca      	strb	r2, [r1, r3]
    8a28:	e7f7      	b.n	8a1a <removeRoute+0x46>
    8a2a:	46c0      	nop			; (mov r8, r8)
    8a2c:	20002c64 	.word	0x20002c64

00008a30 <getNextHopAddr>:
    8a30:	2220      	movs	r2, #32
    8a32:	4b07      	ldr	r3, [pc, #28]	; (8a50 <getNextHopAddr+0x20>)
    8a34:	0a00      	lsrs	r0, r0, #8
    8a36:	681b      	ldr	r3, [r3, #0]
    8a38:	5c9a      	ldrb	r2, [r3, r2]
    8a3a:	4282      	cmp	r2, r0
    8a3c:	d801      	bhi.n	8a42 <getNextHopAddr+0x12>
    8a3e:	4805      	ldr	r0, [pc, #20]	; (8a54 <getNextHopAddr+0x24>)
    8a40:	4770      	bx	lr
    8a42:	691b      	ldr	r3, [r3, #16]
    8a44:	0040      	lsls	r0, r0, #1
    8a46:	5cc0      	ldrb	r0, [r0, r3]
    8a48:	28ff      	cmp	r0, #255	; 0xff
    8a4a:	d0f8      	beq.n	8a3e <getNextHopAddr+0xe>
    8a4c:	0200      	lsls	r0, r0, #8
    8a4e:	e7f7      	b.n	8a40 <getNextHopAddr+0x10>
    8a50:	20002c64 	.word	0x20002c64
    8a54:	0000ffff 	.word	0x0000ffff

00008a58 <routeTimerHandler>:
    8a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a5a:	464e      	mov	r6, r9
    8a5c:	46de      	mov	lr, fp
    8a5e:	4657      	mov	r7, sl
    8a60:	4645      	mov	r5, r8
    8a62:	b5e0      	push	{r5, r6, r7, lr}
    8a64:	4e64      	ldr	r6, [pc, #400]	; (8bf8 <routeTimerHandler+0x1a0>)
    8a66:	b08f      	sub	sp, #60	; 0x3c
    8a68:	7a33      	ldrb	r3, [r6, #8]
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d045      	beq.n	8afa <routeTimerHandler+0xa2>
    8a6e:	4b63      	ldr	r3, [pc, #396]	; (8bfc <routeTimerHandler+0x1a4>)
    8a70:	2500      	movs	r5, #0
    8a72:	4698      	mov	r8, r3
    8a74:	4b62      	ldr	r3, [pc, #392]	; (8c00 <routeTimerHandler+0x1a8>)
    8a76:	4f63      	ldr	r7, [pc, #396]	; (8c04 <routeTimerHandler+0x1ac>)
    8a78:	4699      	mov	r9, r3
    8a7a:	4b63      	ldr	r3, [pc, #396]	; (8c08 <routeTimerHandler+0x1b0>)
    8a7c:	469a      	mov	sl, r3
    8a7e:	e027      	b.n	8ad0 <routeTimerHandler+0x78>
    8a80:	464b      	mov	r3, r9
    8a82:	2120      	movs	r1, #32
    8a84:	681a      	ldr	r2, [r3, #0]
    8a86:	8b83      	ldrh	r3, [r0, #28]
    8a88:	5c51      	ldrb	r1, [r2, r1]
    8a8a:	0a1b      	lsrs	r3, r3, #8
    8a8c:	4299      	cmp	r1, r3
    8a8e:	d944      	bls.n	8b1a <routeTimerHandler+0xc2>
    8a90:	6911      	ldr	r1, [r2, #16]
    8a92:	005b      	lsls	r3, r3, #1
    8a94:	5c5b      	ldrb	r3, [r3, r1]
    8a96:	2bff      	cmp	r3, #255	; 0xff
    8a98:	d03f      	beq.n	8b1a <routeTimerHandler+0xc2>
    8a9a:	021b      	lsls	r3, r3, #8
    8a9c:	469b      	mov	fp, r3
    8a9e:	2310      	movs	r3, #16
    8aa0:	7e41      	ldrb	r1, [r0, #25]
    8aa2:	400b      	ands	r3, r1
    8aa4:	d041      	beq.n	8b2a <routeTimerHandler+0xd2>
    8aa6:	2337      	movs	r3, #55	; 0x37
    8aa8:	5cd3      	ldrb	r3, [r2, r3]
    8aaa:	0001      	movs	r1, r0
    8aac:	3301      	adds	r3, #1
    8aae:	7403      	strb	r3, [r0, #16]
    8ab0:	2338      	movs	r3, #56	; 0x38
    8ab2:	5cd3      	ldrb	r3, [r2, r3]
    8ab4:	7443      	strb	r3, [r0, #17]
    8ab6:	4855      	ldr	r0, [pc, #340]	; (8c0c <routeTimerHandler+0x1b4>)
    8ab8:	4b50      	ldr	r3, [pc, #320]	; (8bfc <routeTimerHandler+0x1a4>)
    8aba:	4798      	blx	r3
    8abc:	4a54      	ldr	r2, [pc, #336]	; (8c10 <routeTimerHandler+0x1b8>)
    8abe:	4659      	mov	r1, fp
    8ac0:	0020      	movs	r0, r4
    8ac2:	4b51      	ldr	r3, [pc, #324]	; (8c08 <routeTimerHandler+0x1b0>)
    8ac4:	4798      	blx	r3
    8ac6:	3501      	adds	r5, #1
    8ac8:	7a33      	ldrb	r3, [r6, #8]
    8aca:	b2ed      	uxtb	r5, r5
    8acc:	42ab      	cmp	r3, r5
    8ace:	d914      	bls.n	8afa <routeTimerHandler+0xa2>
    8ad0:	2100      	movs	r1, #0
    8ad2:	0030      	movs	r0, r6
    8ad4:	47b8      	blx	r7
    8ad6:	1e04      	subs	r4, r0, #0
    8ad8:	d018      	beq.n	8b0c <routeTimerHandler+0xb4>
    8ada:	7c03      	ldrb	r3, [r0, #16]
    8adc:	2b00      	cmp	r3, #0
    8ade:	d004      	beq.n	8aea <routeTimerHandler+0x92>
    8ae0:	3b01      	subs	r3, #1
    8ae2:	b2db      	uxtb	r3, r3
    8ae4:	7403      	strb	r3, [r0, #16]
    8ae6:	2b00      	cmp	r3, #0
    8ae8:	d0ca      	beq.n	8a80 <routeTimerHandler+0x28>
    8aea:	0021      	movs	r1, r4
    8aec:	0030      	movs	r0, r6
    8aee:	47c0      	blx	r8
    8af0:	3501      	adds	r5, #1
    8af2:	7a33      	ldrb	r3, [r6, #8]
    8af4:	b2ed      	uxtb	r5, r5
    8af6:	42ab      	cmp	r3, r5
    8af8:	d8ea      	bhi.n	8ad0 <routeTimerHandler+0x78>
    8afa:	4b46      	ldr	r3, [pc, #280]	; (8c14 <routeTimerHandler+0x1bc>)
    8afc:	781a      	ldrb	r2, [r3, #0]
    8afe:	2a00      	cmp	r2, #0
    8b00:	d004      	beq.n	8b0c <routeTimerHandler+0xb4>
    8b02:	3a01      	subs	r2, #1
    8b04:	b2d2      	uxtb	r2, r2
    8b06:	701a      	strb	r2, [r3, #0]
    8b08:	2a00      	cmp	r2, #0
    8b0a:	d016      	beq.n	8b3a <routeTimerHandler+0xe2>
    8b0c:	b00f      	add	sp, #60	; 0x3c
    8b0e:	bc3c      	pop	{r2, r3, r4, r5}
    8b10:	4690      	mov	r8, r2
    8b12:	4699      	mov	r9, r3
    8b14:	46a2      	mov	sl, r4
    8b16:	46ab      	mov	fp, r5
    8b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b1a:	68a3      	ldr	r3, [r4, #8]
    8b1c:	2b00      	cmp	r3, #0
    8b1e:	d0d2      	beq.n	8ac6 <routeTimerHandler+0x6e>
    8b20:	7ca0      	ldrb	r0, [r4, #18]
    8b22:	0022      	movs	r2, r4
    8b24:	2107      	movs	r1, #7
    8b26:	4798      	blx	r3
    8b28:	e7cd      	b.n	8ac6 <routeTimerHandler+0x6e>
    8b2a:	7443      	strb	r3, [r0, #17]
    8b2c:	6882      	ldr	r2, [r0, #8]
    8b2e:	4659      	mov	r1, fp
    8b30:	47d0      	blx	sl
    8b32:	0020      	movs	r0, r4
    8b34:	4b38      	ldr	r3, [pc, #224]	; (8c18 <routeTimerHandler+0x1c0>)
    8b36:	4798      	blx	r3
    8b38:	e7c5      	b.n	8ac6 <routeTimerHandler+0x6e>
    8b3a:	2025      	movs	r0, #37	; 0x25
    8b3c:	4930      	ldr	r1, [pc, #192]	; (8c00 <routeTimerHandler+0x1a8>)
    8b3e:	4689      	mov	r9, r1
    8b40:	6809      	ldr	r1, [r1, #0]
    8b42:	5c08      	ldrb	r0, [r1, r0]
    8b44:	7018      	strb	r0, [r3, #0]
    8b46:	2320      	movs	r3, #32
    8b48:	5cce      	ldrb	r6, [r1, r3]
    8b4a:	2e00      	cmp	r6, #0
    8b4c:	d0de      	beq.n	8b0c <routeTimerHandler+0xb4>
    8b4e:	3601      	adds	r6, #1
    8b50:	6909      	ldr	r1, [r1, #16]
    8b52:	b2f6      	uxtb	r6, r6
    8b54:	3b1f      	subs	r3, #31
    8b56:	e005      	b.n	8b64 <routeTimerHandler+0x10c>
    8b58:	3301      	adds	r3, #1
    8b5a:	b2db      	uxtb	r3, r3
    8b5c:	b2c2      	uxtb	r2, r0
    8b5e:	3102      	adds	r1, #2
    8b60:	429e      	cmp	r6, r3
    8b62:	d00a      	beq.n	8b7a <routeTimerHandler+0x122>
    8b64:	780c      	ldrb	r4, [r1, #0]
    8b66:	1c18      	adds	r0, r3, #0
    8b68:	2cff      	cmp	r4, #255	; 0xff
    8b6a:	d1f5      	bne.n	8b58 <routeTimerHandler+0x100>
    8b6c:	3301      	adds	r3, #1
    8b6e:	1c10      	adds	r0, r2, #0
    8b70:	b2db      	uxtb	r3, r3
    8b72:	b2c2      	uxtb	r2, r0
    8b74:	3102      	adds	r1, #2
    8b76:	429e      	cmp	r6, r3
    8b78:	d1f4      	bne.n	8b64 <routeTimerHandler+0x10c>
    8b7a:	2a00      	cmp	r2, #0
    8b7c:	d0c6      	beq.n	8b0c <routeTimerHandler+0xb4>
    8b7e:	0854      	lsrs	r4, r2, #1
    8b80:	07d3      	lsls	r3, r2, #31
    8b82:	d501      	bpl.n	8b88 <routeTimerHandler+0x130>
    8b84:	0852      	lsrs	r2, r2, #1
    8b86:	1c54      	adds	r4, r2, #1
    8b88:	2616      	movs	r6, #22
    8b8a:	2303      	movs	r3, #3
    8b8c:	446e      	add	r6, sp
    8b8e:	425b      	negs	r3, r3
    8b90:	8033      	strh	r3, [r6, #0]
    8b92:	2078      	movs	r0, #120	; 0x78
    8b94:	4b21      	ldr	r3, [pc, #132]	; (8c1c <routeTimerHandler+0x1c4>)
    8b96:	4798      	blx	r3
    8b98:	1e07      	subs	r7, r0, #0
    8b9a:	d0b7      	beq.n	8b0c <routeTimerHandler+0xb4>
    8b9c:	4b20      	ldr	r3, [pc, #128]	; (8c20 <routeTimerHandler+0x1c8>)
    8b9e:	8832      	ldrh	r2, [r6, #0]
    8ba0:	8819      	ldrh	r1, [r3, #0]
    8ba2:	2001      	movs	r0, #1
    8ba4:	ab06      	add	r3, sp, #24
    8ba6:	b289      	uxth	r1, r1
    8ba8:	4d1e      	ldr	r5, [pc, #120]	; (8c24 <routeTimerHandler+0x1cc>)
    8baa:	47a8      	blx	r5
    8bac:	0039      	movs	r1, r7
    8bae:	a806      	add	r0, sp, #24
    8bb0:	4b1d      	ldr	r3, [pc, #116]	; (8c28 <routeTimerHandler+0x1d0>)
    8bb2:	4798      	blx	r3
    8bb4:	2313      	movs	r3, #19
    8bb6:	543b      	strb	r3, [r7, r0]
    8bb8:	0003      	movs	r3, r0
    8bba:	3301      	adds	r3, #1
    8bbc:	b2db      	uxtb	r3, r3
    8bbe:	54fc      	strb	r4, [r7, r3]
    8bc0:	464b      	mov	r3, r9
    8bc2:	4680      	mov	r8, r0
    8bc4:	681b      	ldr	r3, [r3, #0]
    8bc6:	3002      	adds	r0, #2
    8bc8:	b2c0      	uxtb	r0, r0
    8bca:	6959      	ldr	r1, [r3, #20]
    8bcc:	0022      	movs	r2, r4
    8bce:	1838      	adds	r0, r7, r0
    8bd0:	4b16      	ldr	r3, [pc, #88]	; (8c2c <routeTimerHandler+0x1d4>)
    8bd2:	4798      	blx	r3
    8bd4:	2301      	movs	r3, #1
    8bd6:	425b      	negs	r3, r3
    8bd8:	8033      	strh	r3, [r6, #0]
    8bda:	4b15      	ldr	r3, [pc, #84]	; (8c30 <routeTimerHandler+0x1d8>)
    8bdc:	3402      	adds	r4, #2
    8bde:	9303      	str	r3, [sp, #12]
    8be0:	2300      	movs	r3, #0
    8be2:	9302      	str	r3, [sp, #8]
    8be4:	3302      	adds	r3, #2
    8be6:	b2e2      	uxtb	r2, r4
    8be8:	9300      	str	r3, [sp, #0]
    8bea:	9601      	str	r6, [sp, #4]
    8bec:	003b      	movs	r3, r7
    8bee:	4641      	mov	r1, r8
    8bf0:	a806      	add	r0, sp, #24
    8bf2:	4c10      	ldr	r4, [pc, #64]	; (8c34 <routeTimerHandler+0x1dc>)
    8bf4:	47a0      	blx	r4
    8bf6:	e789      	b.n	8b0c <routeTimerHandler+0xb4>
    8bf8:	20002ce8 	.word	0x20002ce8
    8bfc:	00003509 	.word	0x00003509
    8c00:	20002c64 	.word	0x20002c64
    8c04:	00003541 	.word	0x00003541
    8c08:	000067f1 	.word	0x000067f1
    8c0c:	20002c6c 	.word	0x20002c6c
    8c10:	00004f79 	.word	0x00004f79
    8c14:	20002ce4 	.word	0x20002ce4
    8c18:	000033ed 	.word	0x000033ed
    8c1c:	0000339d 	.word	0x0000339d
    8c20:	20002cac 	.word	0x20002cac
    8c24:	000065d5 	.word	0x000065d5
    8c28:	00006601 	.word	0x00006601
    8c2c:	0000926f 	.word	0x0000926f
    8c30:	00008535 	.word	0x00008535
    8c34:	00006699 	.word	0x00006699

00008c38 <initiateRouteReq>:
    8c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c3a:	4647      	mov	r7, r8
    8c3c:	46ce      	mov	lr, r9
    8c3e:	2301      	movs	r3, #1
    8c40:	b580      	push	{r7, lr}
    8c42:	2716      	movs	r7, #22
    8c44:	b08f      	sub	sp, #60	; 0x3c
    8c46:	425b      	negs	r3, r3
    8c48:	446f      	add	r7, sp
    8c4a:	803b      	strh	r3, [r7, #0]
    8c4c:	4680      	mov	r8, r0
    8c4e:	4b1e      	ldr	r3, [pc, #120]	; (8cc8 <initiateRouteReq+0x90>)
    8c50:	2078      	movs	r0, #120	; 0x78
    8c52:	4798      	blx	r3
    8c54:	1e04      	subs	r4, r0, #0
    8c56:	d034      	beq.n	8cc2 <initiateRouteReq+0x8a>
    8c58:	4b1c      	ldr	r3, [pc, #112]	; (8ccc <initiateRouteReq+0x94>)
    8c5a:	ad06      	add	r5, sp, #24
    8c5c:	8819      	ldrh	r1, [r3, #0]
    8c5e:	4699      	mov	r9, r3
    8c60:	b289      	uxth	r1, r1
    8c62:	883a      	ldrh	r2, [r7, #0]
    8c64:	002b      	movs	r3, r5
    8c66:	20ff      	movs	r0, #255	; 0xff
    8c68:	4e19      	ldr	r6, [pc, #100]	; (8cd0 <initiateRouteReq+0x98>)
    8c6a:	47b0      	blx	r6
    8c6c:	2220      	movs	r2, #32
    8c6e:	786b      	ldrb	r3, [r5, #1]
    8c70:	0021      	movs	r1, r4
    8c72:	4313      	orrs	r3, r2
    8c74:	706b      	strb	r3, [r5, #1]
    8c76:	0028      	movs	r0, r5
    8c78:	4b16      	ldr	r3, [pc, #88]	; (8cd4 <initiateRouteReq+0x9c>)
    8c7a:	4798      	blx	r3
    8c7c:	464b      	mov	r3, r9
    8c7e:	0006      	movs	r6, r0
    8c80:	8818      	ldrh	r0, [r3, #0]
    8c82:	78a1      	ldrb	r1, [r4, #2]
    8c84:	b280      	uxth	r0, r0
    8c86:	4b14      	ldr	r3, [pc, #80]	; (8cd8 <initiateRouteReq+0xa0>)
    8c88:	4798      	blx	r3
    8c8a:	2311      	movs	r3, #17
    8c8c:	2100      	movs	r1, #0
    8c8e:	55a3      	strb	r3, [r4, r6]
    8c90:	1c73      	adds	r3, r6, #1
    8c92:	b2db      	uxtb	r3, r3
    8c94:	54e1      	strb	r1, [r4, r3]
    8c96:	4643      	mov	r3, r8
    8c98:	1cb2      	adds	r2, r6, #2
    8c9a:	b2d2      	uxtb	r2, r2
    8c9c:	0a1b      	lsrs	r3, r3, #8
    8c9e:	54a3      	strb	r3, [r4, r2]
    8ca0:	4b0e      	ldr	r3, [pc, #56]	; (8cdc <initiateRouteReq+0xa4>)
    8ca2:	9102      	str	r1, [sp, #8]
    8ca4:	9303      	str	r3, [sp, #12]
    8ca6:	2302      	movs	r3, #2
    8ca8:	9701      	str	r7, [sp, #4]
    8caa:	9300      	str	r3, [sp, #0]
    8cac:	2203      	movs	r2, #3
    8cae:	0023      	movs	r3, r4
    8cb0:	0031      	movs	r1, r6
    8cb2:	0028      	movs	r0, r5
    8cb4:	4c0a      	ldr	r4, [pc, #40]	; (8ce0 <initiateRouteReq+0xa8>)
    8cb6:	47a0      	blx	r4
    8cb8:	b00f      	add	sp, #60	; 0x3c
    8cba:	bc0c      	pop	{r2, r3}
    8cbc:	4690      	mov	r8, r2
    8cbe:	4699      	mov	r9, r3
    8cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cc2:	2000      	movs	r0, #0
    8cc4:	e7f8      	b.n	8cb8 <initiateRouteReq+0x80>
    8cc6:	46c0      	nop			; (mov r8, r8)
    8cc8:	0000339d 	.word	0x0000339d
    8ccc:	20002cac 	.word	0x20002cac
    8cd0:	000065d5 	.word	0x000065d5
    8cd4:	00006601 	.word	0x00006601
    8cd8:	00006b51 	.word	0x00006b51
    8cdc:	00008545 	.word	0x00008545
    8ce0:	00006699 	.word	0x00006699

00008ce4 <keyDetermineProcedure>:
    8ce4:	4b06      	ldr	r3, [pc, #24]	; (8d00 <keyDetermineProcedure+0x1c>)
    8ce6:	781b      	ldrb	r3, [r3, #0]
    8ce8:	3b06      	subs	r3, #6
    8cea:	2b01      	cmp	r3, #1
    8cec:	d902      	bls.n	8cf4 <keyDetermineProcedure+0x10>
    8cee:	4b05      	ldr	r3, [pc, #20]	; (8d04 <keyDetermineProcedure+0x20>)
    8cf0:	6818      	ldr	r0, [r3, #0]
    8cf2:	4770      	bx	lr
    8cf4:	2808      	cmp	r0, #8
    8cf6:	d0fa      	beq.n	8cee <keyDetermineProcedure+0xa>
    8cf8:	4b02      	ldr	r3, [pc, #8]	; (8d04 <keyDetermineProcedure+0x20>)
    8cfa:	6818      	ldr	r0, [r3, #0]
    8cfc:	3010      	adds	r0, #16
    8cfe:	e7f8      	b.n	8cf2 <keyDetermineProcedure+0xe>
    8d00:	200003ac 	.word	0x200003ac
    8d04:	20002c68 	.word	0x20002c68

00008d08 <secureFrame>:
    8d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d0a:	4657      	mov	r7, sl
    8d0c:	4645      	mov	r5, r8
    8d0e:	46de      	mov	lr, fp
    8d10:	464e      	mov	r6, r9
    8d12:	b5e0      	push	{r5, r6, r7, lr}
    8d14:	0005      	movs	r5, r0
    8d16:	b0af      	sub	sp, #188	; 0xbc
    8d18:	ac06      	add	r4, sp, #24
    8d1a:	000e      	movs	r6, r1
    8d1c:	4690      	mov	r8, r2
    8d1e:	469a      	mov	sl, r3
    8d20:	2210      	movs	r2, #16
    8d22:	2100      	movs	r1, #0
    8d24:	0020      	movs	r0, r4
    8d26:	4b35      	ldr	r3, [pc, #212]	; (8dfc <secureFrame+0xf4>)
    8d28:	4798      	blx	r3
    8d2a:	7c2f      	ldrb	r7, [r5, #16]
    8d2c:	2f07      	cmp	r7, #7
    8d2e:	d80e      	bhi.n	8d4e <secureFrame+0x46>
    8d30:	2301      	movs	r3, #1
    8d32:	2288      	movs	r2, #136	; 0x88
    8d34:	40bb      	lsls	r3, r7
    8d36:	421a      	tst	r2, r3
    8d38:	d14e      	bne.n	8dd8 <secureFrame+0xd0>
    8d3a:	3a44      	subs	r2, #68	; 0x44
    8d3c:	421a      	tst	r2, r3
    8d3e:	d14f      	bne.n	8de0 <secureFrame+0xd8>
    8d40:	3a22      	subs	r2, #34	; 0x22
    8d42:	421a      	tst	r2, r3
    8d44:	d003      	beq.n	8d4e <secureFrame+0x46>
    8d46:	2304      	movs	r3, #4
    8d48:	9305      	str	r3, [sp, #20]
    8d4a:	469b      	mov	fp, r3
    8d4c:	e002      	b.n	8d54 <secureFrame+0x4c>
    8d4e:	2300      	movs	r3, #0
    8d50:	469b      	mov	fp, r3
    8d52:	9305      	str	r3, [sp, #20]
    8d54:	4b2a      	ldr	r3, [pc, #168]	; (8e00 <secureFrame+0xf8>)
    8d56:	4d2b      	ldr	r5, [pc, #172]	; (8e04 <secureFrame+0xfc>)
    8d58:	79da      	ldrb	r2, [r3, #7]
    8d5a:	4651      	mov	r1, sl
    8d5c:	7062      	strb	r2, [r4, #1]
    8d5e:	799a      	ldrb	r2, [r3, #6]
    8d60:	7367      	strb	r7, [r4, #13]
    8d62:	70a2      	strb	r2, [r4, #2]
    8d64:	795a      	ldrb	r2, [r3, #5]
    8d66:	a80a      	add	r0, sp, #40	; 0x28
    8d68:	70e2      	strb	r2, [r4, #3]
    8d6a:	791a      	ldrb	r2, [r3, #4]
    8d6c:	44b2      	add	sl, r6
    8d6e:	7122      	strb	r2, [r4, #4]
    8d70:	78da      	ldrb	r2, [r3, #3]
    8d72:	7162      	strb	r2, [r4, #5]
    8d74:	789a      	ldrb	r2, [r3, #2]
    8d76:	71a2      	strb	r2, [r4, #6]
    8d78:	785a      	ldrb	r2, [r3, #1]
    8d7a:	781b      	ldrb	r3, [r3, #0]
    8d7c:	71e2      	strb	r2, [r4, #7]
    8d7e:	7223      	strb	r3, [r4, #8]
    8d80:	78eb      	ldrb	r3, [r5, #3]
    8d82:	0032      	movs	r2, r6
    8d84:	7263      	strb	r3, [r4, #9]
    8d86:	78ab      	ldrb	r3, [r5, #2]
    8d88:	72a3      	strb	r3, [r4, #10]
    8d8a:	786b      	ldrb	r3, [r5, #1]
    8d8c:	72e3      	strb	r3, [r4, #11]
    8d8e:	782b      	ldrb	r3, [r5, #0]
    8d90:	7323      	strb	r3, [r4, #12]
    8d92:	4b1d      	ldr	r3, [pc, #116]	; (8e08 <secureFrame+0x100>)
    8d94:	4699      	mov	r9, r3
    8d96:	4798      	blx	r3
    8d98:	ab0a      	add	r3, sp, #40	; 0x28
    8d9a:	469c      	mov	ip, r3
    8d9c:	44b4      	add	ip, r6
    8d9e:	4663      	mov	r3, ip
    8da0:	4642      	mov	r2, r8
    8da2:	4651      	mov	r1, sl
    8da4:	4660      	mov	r0, ip
    8da6:	9304      	str	r3, [sp, #16]
    8da8:	47c8      	blx	r9
    8daa:	2300      	movs	r3, #0
    8dac:	9302      	str	r3, [sp, #8]
    8dae:	4643      	mov	r3, r8
    8db0:	0021      	movs	r1, r4
    8db2:	9300      	str	r3, [sp, #0]
    8db4:	9701      	str	r7, [sp, #4]
    8db6:	0033      	movs	r3, r6
    8db8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8dba:	a80a      	add	r0, sp, #40	; 0x28
    8dbc:	4c13      	ldr	r4, [pc, #76]	; (8e0c <secureFrame+0x104>)
    8dbe:	47a0      	blx	r4
    8dc0:	2800      	cmp	r0, #0
    8dc2:	d011      	beq.n	8de8 <secureFrame+0xe0>
    8dc4:	23ff      	movs	r3, #255	; 0xff
    8dc6:	469b      	mov	fp, r3
    8dc8:	4658      	mov	r0, fp
    8dca:	b02f      	add	sp, #188	; 0xbc
    8dcc:	bc3c      	pop	{r2, r3, r4, r5}
    8dce:	4690      	mov	r8, r2
    8dd0:	4699      	mov	r9, r3
    8dd2:	46a2      	mov	sl, r4
    8dd4:	46ab      	mov	fp, r5
    8dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8dd8:	2310      	movs	r3, #16
    8dda:	9305      	str	r3, [sp, #20]
    8ddc:	469b      	mov	fp, r3
    8dde:	e7b9      	b.n	8d54 <secureFrame+0x4c>
    8de0:	2308      	movs	r3, #8
    8de2:	9305      	str	r3, [sp, #20]
    8de4:	469b      	mov	fp, r3
    8de6:	e7b5      	b.n	8d54 <secureFrame+0x4c>
    8de8:	682b      	ldr	r3, [r5, #0]
    8dea:	9904      	ldr	r1, [sp, #16]
    8dec:	3301      	adds	r3, #1
    8dee:	602b      	str	r3, [r5, #0]
    8df0:	9b05      	ldr	r3, [sp, #20]
    8df2:	4650      	mov	r0, sl
    8df4:	4443      	add	r3, r8
    8df6:	001a      	movs	r2, r3
    8df8:	47c8      	blx	r9
    8dfa:	e7e5      	b.n	8dc8 <secureFrame+0xc0>
    8dfc:	00009281 	.word	0x00009281
    8e00:	20000080 	.word	0x20000080
    8e04:	20002cf4 	.word	0x20002cf4
    8e08:	0000926f 	.word	0x0000926f
    8e0c:	00002f89 	.word	0x00002f89

00008e10 <unsecureFrame>:
    8e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e12:	46ce      	mov	lr, r9
    8e14:	4647      	mov	r7, r8
    8e16:	b580      	push	{r7, lr}
    8e18:	b089      	sub	sp, #36	; 0x24
    8e1a:	0007      	movs	r7, r0
    8e1c:	ac04      	add	r4, sp, #16
    8e1e:	000d      	movs	r5, r1
    8e20:	4691      	mov	r9, r2
    8e22:	001e      	movs	r6, r3
    8e24:	2210      	movs	r2, #16
    8e26:	4b26      	ldr	r3, [pc, #152]	; (8ec0 <unsecureFrame+0xb0>)
    8e28:	2100      	movs	r1, #0
    8e2a:	0020      	movs	r0, r4
    8e2c:	4798      	blx	r3
    8e2e:	2200      	movs	r2, #0
    8e30:	7c3b      	ldrb	r3, [r7, #16]
    8e32:	4690      	mov	r8, r2
    8e34:	2b07      	cmp	r3, #7
    8e36:	d806      	bhi.n	8e46 <unsecureFrame+0x36>
    8e38:	3201      	adds	r2, #1
    8e3a:	2010      	movs	r0, #16
    8e3c:	409a      	lsls	r2, r3
    8e3e:	2188      	movs	r1, #136	; 0x88
    8e40:	4680      	mov	r8, r0
    8e42:	4211      	tst	r1, r2
    8e44:	d02f      	beq.n	8ea6 <unsecureFrame+0x96>
    8e46:	79ea      	ldrb	r2, [r5, #7]
    8e48:	7363      	strb	r3, [r4, #13]
    8e4a:	7062      	strb	r2, [r4, #1]
    8e4c:	79aa      	ldrb	r2, [r5, #6]
    8e4e:	0021      	movs	r1, r4
    8e50:	70a2      	strb	r2, [r4, #2]
    8e52:	796a      	ldrb	r2, [r5, #5]
    8e54:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e56:	70e2      	strb	r2, [r4, #3]
    8e58:	792a      	ldrb	r2, [r5, #4]
    8e5a:	7122      	strb	r2, [r4, #4]
    8e5c:	78ea      	ldrb	r2, [r5, #3]
    8e5e:	7162      	strb	r2, [r4, #5]
    8e60:	78aa      	ldrb	r2, [r5, #2]
    8e62:	71a2      	strb	r2, [r4, #6]
    8e64:	786a      	ldrb	r2, [r5, #1]
    8e66:	71e2      	strb	r2, [r4, #7]
    8e68:	782a      	ldrb	r2, [r5, #0]
    8e6a:	7222      	strb	r2, [r4, #8]
    8e6c:	7dfa      	ldrb	r2, [r7, #23]
    8e6e:	7262      	strb	r2, [r4, #9]
    8e70:	7dba      	ldrb	r2, [r7, #22]
    8e72:	72a2      	strb	r2, [r4, #10]
    8e74:	7d7a      	ldrb	r2, [r7, #21]
    8e76:	72e2      	strb	r2, [r4, #11]
    8e78:	7d3a      	ldrb	r2, [r7, #20]
    8e7a:	7322      	strb	r2, [r4, #12]
    8e7c:	9301      	str	r3, [sp, #4]
    8e7e:	4643      	mov	r3, r8
    8e80:	2201      	movs	r2, #1
    8e82:	1af6      	subs	r6, r6, r3
    8e84:	b2f6      	uxtb	r6, r6
    8e86:	9202      	str	r2, [sp, #8]
    8e88:	9600      	str	r6, [sp, #0]
    8e8a:	464b      	mov	r3, r9
    8e8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8e8e:	4c0d      	ldr	r4, [pc, #52]	; (8ec4 <unsecureFrame+0xb4>)
    8e90:	47a0      	blx	r4
    8e92:	2800      	cmp	r0, #0
    8e94:	d001      	beq.n	8e9a <unsecureFrame+0x8a>
    8e96:	23ff      	movs	r3, #255	; 0xff
    8e98:	4698      	mov	r8, r3
    8e9a:	4640      	mov	r0, r8
    8e9c:	b009      	add	sp, #36	; 0x24
    8e9e:	bc0c      	pop	{r2, r3}
    8ea0:	4690      	mov	r8, r2
    8ea2:	4699      	mov	r9, r3
    8ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ea6:	3808      	subs	r0, #8
    8ea8:	3944      	subs	r1, #68	; 0x44
    8eaa:	4680      	mov	r8, r0
    8eac:	4211      	tst	r1, r2
    8eae:	d1ca      	bne.n	8e46 <unsecureFrame+0x36>
    8eb0:	3922      	subs	r1, #34	; 0x22
    8eb2:	400a      	ands	r2, r1
    8eb4:	1e51      	subs	r1, r2, #1
    8eb6:	418a      	sbcs	r2, r1
    8eb8:	0092      	lsls	r2, r2, #2
    8eba:	4690      	mov	r8, r2
    8ebc:	e7c3      	b.n	8e46 <unsecureFrame+0x36>
    8ebe:	46c0      	nop			; (mov r8, r8)
    8ec0:	00009281 	.word	0x00009281
    8ec4:	00002f89 	.word	0x00002f89

00008ec8 <__udivsi3>:
    8ec8:	2200      	movs	r2, #0
    8eca:	0843      	lsrs	r3, r0, #1
    8ecc:	428b      	cmp	r3, r1
    8ece:	d374      	bcc.n	8fba <__udivsi3+0xf2>
    8ed0:	0903      	lsrs	r3, r0, #4
    8ed2:	428b      	cmp	r3, r1
    8ed4:	d35f      	bcc.n	8f96 <__udivsi3+0xce>
    8ed6:	0a03      	lsrs	r3, r0, #8
    8ed8:	428b      	cmp	r3, r1
    8eda:	d344      	bcc.n	8f66 <__udivsi3+0x9e>
    8edc:	0b03      	lsrs	r3, r0, #12
    8ede:	428b      	cmp	r3, r1
    8ee0:	d328      	bcc.n	8f34 <__udivsi3+0x6c>
    8ee2:	0c03      	lsrs	r3, r0, #16
    8ee4:	428b      	cmp	r3, r1
    8ee6:	d30d      	bcc.n	8f04 <__udivsi3+0x3c>
    8ee8:	22ff      	movs	r2, #255	; 0xff
    8eea:	0209      	lsls	r1, r1, #8
    8eec:	ba12      	rev	r2, r2
    8eee:	0c03      	lsrs	r3, r0, #16
    8ef0:	428b      	cmp	r3, r1
    8ef2:	d302      	bcc.n	8efa <__udivsi3+0x32>
    8ef4:	1212      	asrs	r2, r2, #8
    8ef6:	0209      	lsls	r1, r1, #8
    8ef8:	d065      	beq.n	8fc6 <__udivsi3+0xfe>
    8efa:	0b03      	lsrs	r3, r0, #12
    8efc:	428b      	cmp	r3, r1
    8efe:	d319      	bcc.n	8f34 <__udivsi3+0x6c>
    8f00:	e000      	b.n	8f04 <__udivsi3+0x3c>
    8f02:	0a09      	lsrs	r1, r1, #8
    8f04:	0bc3      	lsrs	r3, r0, #15
    8f06:	428b      	cmp	r3, r1
    8f08:	d301      	bcc.n	8f0e <__udivsi3+0x46>
    8f0a:	03cb      	lsls	r3, r1, #15
    8f0c:	1ac0      	subs	r0, r0, r3
    8f0e:	4152      	adcs	r2, r2
    8f10:	0b83      	lsrs	r3, r0, #14
    8f12:	428b      	cmp	r3, r1
    8f14:	d301      	bcc.n	8f1a <__udivsi3+0x52>
    8f16:	038b      	lsls	r3, r1, #14
    8f18:	1ac0      	subs	r0, r0, r3
    8f1a:	4152      	adcs	r2, r2
    8f1c:	0b43      	lsrs	r3, r0, #13
    8f1e:	428b      	cmp	r3, r1
    8f20:	d301      	bcc.n	8f26 <__udivsi3+0x5e>
    8f22:	034b      	lsls	r3, r1, #13
    8f24:	1ac0      	subs	r0, r0, r3
    8f26:	4152      	adcs	r2, r2
    8f28:	0b03      	lsrs	r3, r0, #12
    8f2a:	428b      	cmp	r3, r1
    8f2c:	d301      	bcc.n	8f32 <__udivsi3+0x6a>
    8f2e:	030b      	lsls	r3, r1, #12
    8f30:	1ac0      	subs	r0, r0, r3
    8f32:	4152      	adcs	r2, r2
    8f34:	0ac3      	lsrs	r3, r0, #11
    8f36:	428b      	cmp	r3, r1
    8f38:	d301      	bcc.n	8f3e <__udivsi3+0x76>
    8f3a:	02cb      	lsls	r3, r1, #11
    8f3c:	1ac0      	subs	r0, r0, r3
    8f3e:	4152      	adcs	r2, r2
    8f40:	0a83      	lsrs	r3, r0, #10
    8f42:	428b      	cmp	r3, r1
    8f44:	d301      	bcc.n	8f4a <__udivsi3+0x82>
    8f46:	028b      	lsls	r3, r1, #10
    8f48:	1ac0      	subs	r0, r0, r3
    8f4a:	4152      	adcs	r2, r2
    8f4c:	0a43      	lsrs	r3, r0, #9
    8f4e:	428b      	cmp	r3, r1
    8f50:	d301      	bcc.n	8f56 <__udivsi3+0x8e>
    8f52:	024b      	lsls	r3, r1, #9
    8f54:	1ac0      	subs	r0, r0, r3
    8f56:	4152      	adcs	r2, r2
    8f58:	0a03      	lsrs	r3, r0, #8
    8f5a:	428b      	cmp	r3, r1
    8f5c:	d301      	bcc.n	8f62 <__udivsi3+0x9a>
    8f5e:	020b      	lsls	r3, r1, #8
    8f60:	1ac0      	subs	r0, r0, r3
    8f62:	4152      	adcs	r2, r2
    8f64:	d2cd      	bcs.n	8f02 <__udivsi3+0x3a>
    8f66:	09c3      	lsrs	r3, r0, #7
    8f68:	428b      	cmp	r3, r1
    8f6a:	d301      	bcc.n	8f70 <__udivsi3+0xa8>
    8f6c:	01cb      	lsls	r3, r1, #7
    8f6e:	1ac0      	subs	r0, r0, r3
    8f70:	4152      	adcs	r2, r2
    8f72:	0983      	lsrs	r3, r0, #6
    8f74:	428b      	cmp	r3, r1
    8f76:	d301      	bcc.n	8f7c <__udivsi3+0xb4>
    8f78:	018b      	lsls	r3, r1, #6
    8f7a:	1ac0      	subs	r0, r0, r3
    8f7c:	4152      	adcs	r2, r2
    8f7e:	0943      	lsrs	r3, r0, #5
    8f80:	428b      	cmp	r3, r1
    8f82:	d301      	bcc.n	8f88 <__udivsi3+0xc0>
    8f84:	014b      	lsls	r3, r1, #5
    8f86:	1ac0      	subs	r0, r0, r3
    8f88:	4152      	adcs	r2, r2
    8f8a:	0903      	lsrs	r3, r0, #4
    8f8c:	428b      	cmp	r3, r1
    8f8e:	d301      	bcc.n	8f94 <__udivsi3+0xcc>
    8f90:	010b      	lsls	r3, r1, #4
    8f92:	1ac0      	subs	r0, r0, r3
    8f94:	4152      	adcs	r2, r2
    8f96:	08c3      	lsrs	r3, r0, #3
    8f98:	428b      	cmp	r3, r1
    8f9a:	d301      	bcc.n	8fa0 <__udivsi3+0xd8>
    8f9c:	00cb      	lsls	r3, r1, #3
    8f9e:	1ac0      	subs	r0, r0, r3
    8fa0:	4152      	adcs	r2, r2
    8fa2:	0883      	lsrs	r3, r0, #2
    8fa4:	428b      	cmp	r3, r1
    8fa6:	d301      	bcc.n	8fac <__udivsi3+0xe4>
    8fa8:	008b      	lsls	r3, r1, #2
    8faa:	1ac0      	subs	r0, r0, r3
    8fac:	4152      	adcs	r2, r2
    8fae:	0843      	lsrs	r3, r0, #1
    8fb0:	428b      	cmp	r3, r1
    8fb2:	d301      	bcc.n	8fb8 <__udivsi3+0xf0>
    8fb4:	004b      	lsls	r3, r1, #1
    8fb6:	1ac0      	subs	r0, r0, r3
    8fb8:	4152      	adcs	r2, r2
    8fba:	1a41      	subs	r1, r0, r1
    8fbc:	d200      	bcs.n	8fc0 <__udivsi3+0xf8>
    8fbe:	4601      	mov	r1, r0
    8fc0:	4152      	adcs	r2, r2
    8fc2:	4610      	mov	r0, r2
    8fc4:	4770      	bx	lr
    8fc6:	e7ff      	b.n	8fc8 <__udivsi3+0x100>
    8fc8:	b501      	push	{r0, lr}
    8fca:	2000      	movs	r0, #0
    8fcc:	f000 f8f0 	bl	91b0 <__aeabi_idiv0>
    8fd0:	bd02      	pop	{r1, pc}
    8fd2:	46c0      	nop			; (mov r8, r8)

00008fd4 <__aeabi_uidivmod>:
    8fd4:	2900      	cmp	r1, #0
    8fd6:	d0f7      	beq.n	8fc8 <__udivsi3+0x100>
    8fd8:	e776      	b.n	8ec8 <__udivsi3>
    8fda:	4770      	bx	lr

00008fdc <__divsi3>:
    8fdc:	4603      	mov	r3, r0
    8fde:	430b      	orrs	r3, r1
    8fe0:	d47f      	bmi.n	90e2 <__divsi3+0x106>
    8fe2:	2200      	movs	r2, #0
    8fe4:	0843      	lsrs	r3, r0, #1
    8fe6:	428b      	cmp	r3, r1
    8fe8:	d374      	bcc.n	90d4 <__divsi3+0xf8>
    8fea:	0903      	lsrs	r3, r0, #4
    8fec:	428b      	cmp	r3, r1
    8fee:	d35f      	bcc.n	90b0 <__divsi3+0xd4>
    8ff0:	0a03      	lsrs	r3, r0, #8
    8ff2:	428b      	cmp	r3, r1
    8ff4:	d344      	bcc.n	9080 <__divsi3+0xa4>
    8ff6:	0b03      	lsrs	r3, r0, #12
    8ff8:	428b      	cmp	r3, r1
    8ffa:	d328      	bcc.n	904e <__divsi3+0x72>
    8ffc:	0c03      	lsrs	r3, r0, #16
    8ffe:	428b      	cmp	r3, r1
    9000:	d30d      	bcc.n	901e <__divsi3+0x42>
    9002:	22ff      	movs	r2, #255	; 0xff
    9004:	0209      	lsls	r1, r1, #8
    9006:	ba12      	rev	r2, r2
    9008:	0c03      	lsrs	r3, r0, #16
    900a:	428b      	cmp	r3, r1
    900c:	d302      	bcc.n	9014 <__divsi3+0x38>
    900e:	1212      	asrs	r2, r2, #8
    9010:	0209      	lsls	r1, r1, #8
    9012:	d065      	beq.n	90e0 <__divsi3+0x104>
    9014:	0b03      	lsrs	r3, r0, #12
    9016:	428b      	cmp	r3, r1
    9018:	d319      	bcc.n	904e <__divsi3+0x72>
    901a:	e000      	b.n	901e <__divsi3+0x42>
    901c:	0a09      	lsrs	r1, r1, #8
    901e:	0bc3      	lsrs	r3, r0, #15
    9020:	428b      	cmp	r3, r1
    9022:	d301      	bcc.n	9028 <__divsi3+0x4c>
    9024:	03cb      	lsls	r3, r1, #15
    9026:	1ac0      	subs	r0, r0, r3
    9028:	4152      	adcs	r2, r2
    902a:	0b83      	lsrs	r3, r0, #14
    902c:	428b      	cmp	r3, r1
    902e:	d301      	bcc.n	9034 <__divsi3+0x58>
    9030:	038b      	lsls	r3, r1, #14
    9032:	1ac0      	subs	r0, r0, r3
    9034:	4152      	adcs	r2, r2
    9036:	0b43      	lsrs	r3, r0, #13
    9038:	428b      	cmp	r3, r1
    903a:	d301      	bcc.n	9040 <__divsi3+0x64>
    903c:	034b      	lsls	r3, r1, #13
    903e:	1ac0      	subs	r0, r0, r3
    9040:	4152      	adcs	r2, r2
    9042:	0b03      	lsrs	r3, r0, #12
    9044:	428b      	cmp	r3, r1
    9046:	d301      	bcc.n	904c <__divsi3+0x70>
    9048:	030b      	lsls	r3, r1, #12
    904a:	1ac0      	subs	r0, r0, r3
    904c:	4152      	adcs	r2, r2
    904e:	0ac3      	lsrs	r3, r0, #11
    9050:	428b      	cmp	r3, r1
    9052:	d301      	bcc.n	9058 <__divsi3+0x7c>
    9054:	02cb      	lsls	r3, r1, #11
    9056:	1ac0      	subs	r0, r0, r3
    9058:	4152      	adcs	r2, r2
    905a:	0a83      	lsrs	r3, r0, #10
    905c:	428b      	cmp	r3, r1
    905e:	d301      	bcc.n	9064 <__divsi3+0x88>
    9060:	028b      	lsls	r3, r1, #10
    9062:	1ac0      	subs	r0, r0, r3
    9064:	4152      	adcs	r2, r2
    9066:	0a43      	lsrs	r3, r0, #9
    9068:	428b      	cmp	r3, r1
    906a:	d301      	bcc.n	9070 <__divsi3+0x94>
    906c:	024b      	lsls	r3, r1, #9
    906e:	1ac0      	subs	r0, r0, r3
    9070:	4152      	adcs	r2, r2
    9072:	0a03      	lsrs	r3, r0, #8
    9074:	428b      	cmp	r3, r1
    9076:	d301      	bcc.n	907c <__divsi3+0xa0>
    9078:	020b      	lsls	r3, r1, #8
    907a:	1ac0      	subs	r0, r0, r3
    907c:	4152      	adcs	r2, r2
    907e:	d2cd      	bcs.n	901c <__divsi3+0x40>
    9080:	09c3      	lsrs	r3, r0, #7
    9082:	428b      	cmp	r3, r1
    9084:	d301      	bcc.n	908a <__divsi3+0xae>
    9086:	01cb      	lsls	r3, r1, #7
    9088:	1ac0      	subs	r0, r0, r3
    908a:	4152      	adcs	r2, r2
    908c:	0983      	lsrs	r3, r0, #6
    908e:	428b      	cmp	r3, r1
    9090:	d301      	bcc.n	9096 <__divsi3+0xba>
    9092:	018b      	lsls	r3, r1, #6
    9094:	1ac0      	subs	r0, r0, r3
    9096:	4152      	adcs	r2, r2
    9098:	0943      	lsrs	r3, r0, #5
    909a:	428b      	cmp	r3, r1
    909c:	d301      	bcc.n	90a2 <__divsi3+0xc6>
    909e:	014b      	lsls	r3, r1, #5
    90a0:	1ac0      	subs	r0, r0, r3
    90a2:	4152      	adcs	r2, r2
    90a4:	0903      	lsrs	r3, r0, #4
    90a6:	428b      	cmp	r3, r1
    90a8:	d301      	bcc.n	90ae <__divsi3+0xd2>
    90aa:	010b      	lsls	r3, r1, #4
    90ac:	1ac0      	subs	r0, r0, r3
    90ae:	4152      	adcs	r2, r2
    90b0:	08c3      	lsrs	r3, r0, #3
    90b2:	428b      	cmp	r3, r1
    90b4:	d301      	bcc.n	90ba <__divsi3+0xde>
    90b6:	00cb      	lsls	r3, r1, #3
    90b8:	1ac0      	subs	r0, r0, r3
    90ba:	4152      	adcs	r2, r2
    90bc:	0883      	lsrs	r3, r0, #2
    90be:	428b      	cmp	r3, r1
    90c0:	d301      	bcc.n	90c6 <__divsi3+0xea>
    90c2:	008b      	lsls	r3, r1, #2
    90c4:	1ac0      	subs	r0, r0, r3
    90c6:	4152      	adcs	r2, r2
    90c8:	0843      	lsrs	r3, r0, #1
    90ca:	428b      	cmp	r3, r1
    90cc:	d301      	bcc.n	90d2 <__divsi3+0xf6>
    90ce:	004b      	lsls	r3, r1, #1
    90d0:	1ac0      	subs	r0, r0, r3
    90d2:	4152      	adcs	r2, r2
    90d4:	1a41      	subs	r1, r0, r1
    90d6:	d200      	bcs.n	90da <__divsi3+0xfe>
    90d8:	4601      	mov	r1, r0
    90da:	4152      	adcs	r2, r2
    90dc:	4610      	mov	r0, r2
    90de:	4770      	bx	lr
    90e0:	e05d      	b.n	919e <__divsi3+0x1c2>
    90e2:	0fca      	lsrs	r2, r1, #31
    90e4:	d000      	beq.n	90e8 <__divsi3+0x10c>
    90e6:	4249      	negs	r1, r1
    90e8:	1003      	asrs	r3, r0, #32
    90ea:	d300      	bcc.n	90ee <__divsi3+0x112>
    90ec:	4240      	negs	r0, r0
    90ee:	4053      	eors	r3, r2
    90f0:	2200      	movs	r2, #0
    90f2:	469c      	mov	ip, r3
    90f4:	0903      	lsrs	r3, r0, #4
    90f6:	428b      	cmp	r3, r1
    90f8:	d32d      	bcc.n	9156 <__divsi3+0x17a>
    90fa:	0a03      	lsrs	r3, r0, #8
    90fc:	428b      	cmp	r3, r1
    90fe:	d312      	bcc.n	9126 <__divsi3+0x14a>
    9100:	22fc      	movs	r2, #252	; 0xfc
    9102:	0189      	lsls	r1, r1, #6
    9104:	ba12      	rev	r2, r2
    9106:	0a03      	lsrs	r3, r0, #8
    9108:	428b      	cmp	r3, r1
    910a:	d30c      	bcc.n	9126 <__divsi3+0x14a>
    910c:	0189      	lsls	r1, r1, #6
    910e:	1192      	asrs	r2, r2, #6
    9110:	428b      	cmp	r3, r1
    9112:	d308      	bcc.n	9126 <__divsi3+0x14a>
    9114:	0189      	lsls	r1, r1, #6
    9116:	1192      	asrs	r2, r2, #6
    9118:	428b      	cmp	r3, r1
    911a:	d304      	bcc.n	9126 <__divsi3+0x14a>
    911c:	0189      	lsls	r1, r1, #6
    911e:	d03a      	beq.n	9196 <__divsi3+0x1ba>
    9120:	1192      	asrs	r2, r2, #6
    9122:	e000      	b.n	9126 <__divsi3+0x14a>
    9124:	0989      	lsrs	r1, r1, #6
    9126:	09c3      	lsrs	r3, r0, #7
    9128:	428b      	cmp	r3, r1
    912a:	d301      	bcc.n	9130 <__divsi3+0x154>
    912c:	01cb      	lsls	r3, r1, #7
    912e:	1ac0      	subs	r0, r0, r3
    9130:	4152      	adcs	r2, r2
    9132:	0983      	lsrs	r3, r0, #6
    9134:	428b      	cmp	r3, r1
    9136:	d301      	bcc.n	913c <__divsi3+0x160>
    9138:	018b      	lsls	r3, r1, #6
    913a:	1ac0      	subs	r0, r0, r3
    913c:	4152      	adcs	r2, r2
    913e:	0943      	lsrs	r3, r0, #5
    9140:	428b      	cmp	r3, r1
    9142:	d301      	bcc.n	9148 <__divsi3+0x16c>
    9144:	014b      	lsls	r3, r1, #5
    9146:	1ac0      	subs	r0, r0, r3
    9148:	4152      	adcs	r2, r2
    914a:	0903      	lsrs	r3, r0, #4
    914c:	428b      	cmp	r3, r1
    914e:	d301      	bcc.n	9154 <__divsi3+0x178>
    9150:	010b      	lsls	r3, r1, #4
    9152:	1ac0      	subs	r0, r0, r3
    9154:	4152      	adcs	r2, r2
    9156:	08c3      	lsrs	r3, r0, #3
    9158:	428b      	cmp	r3, r1
    915a:	d301      	bcc.n	9160 <__divsi3+0x184>
    915c:	00cb      	lsls	r3, r1, #3
    915e:	1ac0      	subs	r0, r0, r3
    9160:	4152      	adcs	r2, r2
    9162:	0883      	lsrs	r3, r0, #2
    9164:	428b      	cmp	r3, r1
    9166:	d301      	bcc.n	916c <__divsi3+0x190>
    9168:	008b      	lsls	r3, r1, #2
    916a:	1ac0      	subs	r0, r0, r3
    916c:	4152      	adcs	r2, r2
    916e:	d2d9      	bcs.n	9124 <__divsi3+0x148>
    9170:	0843      	lsrs	r3, r0, #1
    9172:	428b      	cmp	r3, r1
    9174:	d301      	bcc.n	917a <__divsi3+0x19e>
    9176:	004b      	lsls	r3, r1, #1
    9178:	1ac0      	subs	r0, r0, r3
    917a:	4152      	adcs	r2, r2
    917c:	1a41      	subs	r1, r0, r1
    917e:	d200      	bcs.n	9182 <__divsi3+0x1a6>
    9180:	4601      	mov	r1, r0
    9182:	4663      	mov	r3, ip
    9184:	4152      	adcs	r2, r2
    9186:	105b      	asrs	r3, r3, #1
    9188:	4610      	mov	r0, r2
    918a:	d301      	bcc.n	9190 <__divsi3+0x1b4>
    918c:	4240      	negs	r0, r0
    918e:	2b00      	cmp	r3, #0
    9190:	d500      	bpl.n	9194 <__divsi3+0x1b8>
    9192:	4249      	negs	r1, r1
    9194:	4770      	bx	lr
    9196:	4663      	mov	r3, ip
    9198:	105b      	asrs	r3, r3, #1
    919a:	d300      	bcc.n	919e <__divsi3+0x1c2>
    919c:	4240      	negs	r0, r0
    919e:	b501      	push	{r0, lr}
    91a0:	2000      	movs	r0, #0
    91a2:	f000 f805 	bl	91b0 <__aeabi_idiv0>
    91a6:	bd02      	pop	{r1, pc}

000091a8 <__aeabi_idivmod>:
    91a8:	2900      	cmp	r1, #0
    91aa:	d0f8      	beq.n	919e <__divsi3+0x1c2>
    91ac:	e716      	b.n	8fdc <__divsi3>
    91ae:	4770      	bx	lr

000091b0 <__aeabi_idiv0>:
    91b0:	4770      	bx	lr
    91b2:	46c0      	nop			; (mov r8, r8)

000091b4 <__aeabi_lmul>:
    91b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    91b6:	46ce      	mov	lr, r9
    91b8:	4647      	mov	r7, r8
    91ba:	0415      	lsls	r5, r2, #16
    91bc:	0c2d      	lsrs	r5, r5, #16
    91be:	002e      	movs	r6, r5
    91c0:	b580      	push	{r7, lr}
    91c2:	0407      	lsls	r7, r0, #16
    91c4:	0c14      	lsrs	r4, r2, #16
    91c6:	0c3f      	lsrs	r7, r7, #16
    91c8:	4699      	mov	r9, r3
    91ca:	0c03      	lsrs	r3, r0, #16
    91cc:	437e      	muls	r6, r7
    91ce:	435d      	muls	r5, r3
    91d0:	4367      	muls	r7, r4
    91d2:	4363      	muls	r3, r4
    91d4:	197f      	adds	r7, r7, r5
    91d6:	0c34      	lsrs	r4, r6, #16
    91d8:	19e4      	adds	r4, r4, r7
    91da:	469c      	mov	ip, r3
    91dc:	42a5      	cmp	r5, r4
    91de:	d903      	bls.n	91e8 <__aeabi_lmul+0x34>
    91e0:	2380      	movs	r3, #128	; 0x80
    91e2:	025b      	lsls	r3, r3, #9
    91e4:	4698      	mov	r8, r3
    91e6:	44c4      	add	ip, r8
    91e8:	464b      	mov	r3, r9
    91ea:	4351      	muls	r1, r2
    91ec:	4343      	muls	r3, r0
    91ee:	0436      	lsls	r6, r6, #16
    91f0:	0c36      	lsrs	r6, r6, #16
    91f2:	0c25      	lsrs	r5, r4, #16
    91f4:	0424      	lsls	r4, r4, #16
    91f6:	4465      	add	r5, ip
    91f8:	19a4      	adds	r4, r4, r6
    91fa:	1859      	adds	r1, r3, r1
    91fc:	1949      	adds	r1, r1, r5
    91fe:	0020      	movs	r0, r4
    9200:	bc0c      	pop	{r2, r3}
    9202:	4690      	mov	r8, r2
    9204:	4699      	mov	r9, r3
    9206:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009208 <__libc_init_array>:
    9208:	b570      	push	{r4, r5, r6, lr}
    920a:	2600      	movs	r6, #0
    920c:	4d0c      	ldr	r5, [pc, #48]	; (9240 <__libc_init_array+0x38>)
    920e:	4c0d      	ldr	r4, [pc, #52]	; (9244 <__libc_init_array+0x3c>)
    9210:	1b64      	subs	r4, r4, r5
    9212:	10a4      	asrs	r4, r4, #2
    9214:	42a6      	cmp	r6, r4
    9216:	d109      	bne.n	922c <__libc_init_array+0x24>
    9218:	2600      	movs	r6, #0
    921a:	f001 f85b 	bl	a2d4 <_init>
    921e:	4d0a      	ldr	r5, [pc, #40]	; (9248 <__libc_init_array+0x40>)
    9220:	4c0a      	ldr	r4, [pc, #40]	; (924c <__libc_init_array+0x44>)
    9222:	1b64      	subs	r4, r4, r5
    9224:	10a4      	asrs	r4, r4, #2
    9226:	42a6      	cmp	r6, r4
    9228:	d105      	bne.n	9236 <__libc_init_array+0x2e>
    922a:	bd70      	pop	{r4, r5, r6, pc}
    922c:	00b3      	lsls	r3, r6, #2
    922e:	58eb      	ldr	r3, [r5, r3]
    9230:	4798      	blx	r3
    9232:	3601      	adds	r6, #1
    9234:	e7ee      	b.n	9214 <__libc_init_array+0xc>
    9236:	00b3      	lsls	r3, r6, #2
    9238:	58eb      	ldr	r3, [r5, r3]
    923a:	4798      	blx	r3
    923c:	3601      	adds	r6, #1
    923e:	e7f2      	b.n	9226 <__libc_init_array+0x1e>
    9240:	0000a2e0 	.word	0x0000a2e0
    9244:	0000a2e0 	.word	0x0000a2e0
    9248:	0000a2e0 	.word	0x0000a2e0
    924c:	0000a2e4 	.word	0x0000a2e4

00009250 <memcmp>:
    9250:	b530      	push	{r4, r5, lr}
    9252:	2400      	movs	r4, #0
    9254:	42a2      	cmp	r2, r4
    9256:	d101      	bne.n	925c <memcmp+0xc>
    9258:	2000      	movs	r0, #0
    925a:	e005      	b.n	9268 <memcmp+0x18>
    925c:	5d03      	ldrb	r3, [r0, r4]
    925e:	1c65      	adds	r5, r4, #1
    9260:	5d0c      	ldrb	r4, [r1, r4]
    9262:	42a3      	cmp	r3, r4
    9264:	d001      	beq.n	926a <memcmp+0x1a>
    9266:	1b18      	subs	r0, r3, r4
    9268:	bd30      	pop	{r4, r5, pc}
    926a:	002c      	movs	r4, r5
    926c:	e7f2      	b.n	9254 <memcmp+0x4>

0000926e <memcpy>:
    926e:	2300      	movs	r3, #0
    9270:	b510      	push	{r4, lr}
    9272:	429a      	cmp	r2, r3
    9274:	d100      	bne.n	9278 <memcpy+0xa>
    9276:	bd10      	pop	{r4, pc}
    9278:	5ccc      	ldrb	r4, [r1, r3]
    927a:	54c4      	strb	r4, [r0, r3]
    927c:	3301      	adds	r3, #1
    927e:	e7f8      	b.n	9272 <memcpy+0x4>

00009280 <memset>:
    9280:	0003      	movs	r3, r0
    9282:	1882      	adds	r2, r0, r2
    9284:	4293      	cmp	r3, r2
    9286:	d100      	bne.n	928a <memset+0xa>
    9288:	4770      	bx	lr
    928a:	7019      	strb	r1, [r3, #0]
    928c:	3301      	adds	r3, #1
    928e:	e7f9      	b.n	9284 <memset+0x4>

00009290 <rand>:
    9290:	4b15      	ldr	r3, [pc, #84]	; (92e8 <rand+0x58>)
    9292:	b510      	push	{r4, lr}
    9294:	681c      	ldr	r4, [r3, #0]
    9296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9298:	2b00      	cmp	r3, #0
    929a:	d115      	bne.n	92c8 <rand+0x38>
    929c:	2018      	movs	r0, #24
    929e:	f000 fac1 	bl	9824 <malloc>
    92a2:	4b12      	ldr	r3, [pc, #72]	; (92ec <rand+0x5c>)
    92a4:	63a0      	str	r0, [r4, #56]	; 0x38
    92a6:	8003      	strh	r3, [r0, #0]
    92a8:	4b11      	ldr	r3, [pc, #68]	; (92f0 <rand+0x60>)
    92aa:	2201      	movs	r2, #1
    92ac:	8043      	strh	r3, [r0, #2]
    92ae:	4b11      	ldr	r3, [pc, #68]	; (92f4 <rand+0x64>)
    92b0:	8083      	strh	r3, [r0, #4]
    92b2:	4b11      	ldr	r3, [pc, #68]	; (92f8 <rand+0x68>)
    92b4:	80c3      	strh	r3, [r0, #6]
    92b6:	4b11      	ldr	r3, [pc, #68]	; (92fc <rand+0x6c>)
    92b8:	8103      	strh	r3, [r0, #8]
    92ba:	2305      	movs	r3, #5
    92bc:	8143      	strh	r3, [r0, #10]
    92be:	3306      	adds	r3, #6
    92c0:	8183      	strh	r3, [r0, #12]
    92c2:	2300      	movs	r3, #0
    92c4:	6102      	str	r2, [r0, #16]
    92c6:	6143      	str	r3, [r0, #20]
    92c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    92ca:	4a0d      	ldr	r2, [pc, #52]	; (9300 <rand+0x70>)
    92cc:	6920      	ldr	r0, [r4, #16]
    92ce:	6961      	ldr	r1, [r4, #20]
    92d0:	4b0c      	ldr	r3, [pc, #48]	; (9304 <rand+0x74>)
    92d2:	f7ff ff6f 	bl	91b4 <__aeabi_lmul>
    92d6:	2201      	movs	r2, #1
    92d8:	2300      	movs	r3, #0
    92da:	1880      	adds	r0, r0, r2
    92dc:	4159      	adcs	r1, r3
    92de:	6120      	str	r0, [r4, #16]
    92e0:	6161      	str	r1, [r4, #20]
    92e2:	0048      	lsls	r0, r1, #1
    92e4:	0840      	lsrs	r0, r0, #1
    92e6:	bd10      	pop	{r4, pc}
    92e8:	20000088 	.word	0x20000088
    92ec:	0000330e 	.word	0x0000330e
    92f0:	ffffabcd 	.word	0xffffabcd
    92f4:	00001234 	.word	0x00001234
    92f8:	ffffe66d 	.word	0xffffe66d
    92fc:	ffffdeec 	.word	0xffffdeec
    9300:	4c957f2d 	.word	0x4c957f2d
    9304:	5851f42d 	.word	0x5851f42d

00009308 <setbuf>:
    9308:	424a      	negs	r2, r1
    930a:	414a      	adcs	r2, r1
    930c:	2380      	movs	r3, #128	; 0x80
    930e:	b510      	push	{r4, lr}
    9310:	0052      	lsls	r2, r2, #1
    9312:	00db      	lsls	r3, r3, #3
    9314:	f000 f802 	bl	931c <setvbuf>
    9318:	bd10      	pop	{r4, pc}
	...

0000931c <setvbuf>:
    931c:	b5f0      	push	{r4, r5, r6, r7, lr}
    931e:	001d      	movs	r5, r3
    9320:	4b4f      	ldr	r3, [pc, #316]	; (9460 <setvbuf+0x144>)
    9322:	b085      	sub	sp, #20
    9324:	681e      	ldr	r6, [r3, #0]
    9326:	0004      	movs	r4, r0
    9328:	000f      	movs	r7, r1
    932a:	9200      	str	r2, [sp, #0]
    932c:	2e00      	cmp	r6, #0
    932e:	d005      	beq.n	933c <setvbuf+0x20>
    9330:	69b3      	ldr	r3, [r6, #24]
    9332:	2b00      	cmp	r3, #0
    9334:	d102      	bne.n	933c <setvbuf+0x20>
    9336:	0030      	movs	r0, r6
    9338:	f000 f9b6 	bl	96a8 <__sinit>
    933c:	4b49      	ldr	r3, [pc, #292]	; (9464 <setvbuf+0x148>)
    933e:	429c      	cmp	r4, r3
    9340:	d150      	bne.n	93e4 <setvbuf+0xc8>
    9342:	6874      	ldr	r4, [r6, #4]
    9344:	9b00      	ldr	r3, [sp, #0]
    9346:	2b02      	cmp	r3, #2
    9348:	d005      	beq.n	9356 <setvbuf+0x3a>
    934a:	2b01      	cmp	r3, #1
    934c:	d900      	bls.n	9350 <setvbuf+0x34>
    934e:	e084      	b.n	945a <setvbuf+0x13e>
    9350:	2d00      	cmp	r5, #0
    9352:	da00      	bge.n	9356 <setvbuf+0x3a>
    9354:	e081      	b.n	945a <setvbuf+0x13e>
    9356:	0021      	movs	r1, r4
    9358:	0030      	movs	r0, r6
    935a:	f000 f937 	bl	95cc <_fflush_r>
    935e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9360:	2900      	cmp	r1, #0
    9362:	d008      	beq.n	9376 <setvbuf+0x5a>
    9364:	0023      	movs	r3, r4
    9366:	3344      	adds	r3, #68	; 0x44
    9368:	4299      	cmp	r1, r3
    936a:	d002      	beq.n	9372 <setvbuf+0x56>
    936c:	0030      	movs	r0, r6
    936e:	f000 fa63 	bl	9838 <_free_r>
    9372:	2300      	movs	r3, #0
    9374:	6363      	str	r3, [r4, #52]	; 0x34
    9376:	2300      	movs	r3, #0
    9378:	61a3      	str	r3, [r4, #24]
    937a:	6063      	str	r3, [r4, #4]
    937c:	89a3      	ldrh	r3, [r4, #12]
    937e:	061b      	lsls	r3, r3, #24
    9380:	d503      	bpl.n	938a <setvbuf+0x6e>
    9382:	6921      	ldr	r1, [r4, #16]
    9384:	0030      	movs	r0, r6
    9386:	f000 fa57 	bl	9838 <_free_r>
    938a:	89a3      	ldrh	r3, [r4, #12]
    938c:	4a36      	ldr	r2, [pc, #216]	; (9468 <setvbuf+0x14c>)
    938e:	4013      	ands	r3, r2
    9390:	81a3      	strh	r3, [r4, #12]
    9392:	9b00      	ldr	r3, [sp, #0]
    9394:	2b02      	cmp	r3, #2
    9396:	d05a      	beq.n	944e <setvbuf+0x132>
    9398:	ab03      	add	r3, sp, #12
    939a:	aa02      	add	r2, sp, #8
    939c:	0021      	movs	r1, r4
    939e:	0030      	movs	r0, r6
    93a0:	f000 fa18 	bl	97d4 <__swhatbuf_r>
    93a4:	89a3      	ldrh	r3, [r4, #12]
    93a6:	4318      	orrs	r0, r3
    93a8:	81a0      	strh	r0, [r4, #12]
    93aa:	2d00      	cmp	r5, #0
    93ac:	d124      	bne.n	93f8 <setvbuf+0xdc>
    93ae:	9d02      	ldr	r5, [sp, #8]
    93b0:	0028      	movs	r0, r5
    93b2:	f000 fa37 	bl	9824 <malloc>
    93b6:	9501      	str	r5, [sp, #4]
    93b8:	1e07      	subs	r7, r0, #0
    93ba:	d142      	bne.n	9442 <setvbuf+0x126>
    93bc:	9b02      	ldr	r3, [sp, #8]
    93be:	9301      	str	r3, [sp, #4]
    93c0:	42ab      	cmp	r3, r5
    93c2:	d139      	bne.n	9438 <setvbuf+0x11c>
    93c4:	2001      	movs	r0, #1
    93c6:	4240      	negs	r0, r0
    93c8:	2302      	movs	r3, #2
    93ca:	89a2      	ldrh	r2, [r4, #12]
    93cc:	4313      	orrs	r3, r2
    93ce:	81a3      	strh	r3, [r4, #12]
    93d0:	2300      	movs	r3, #0
    93d2:	60a3      	str	r3, [r4, #8]
    93d4:	0023      	movs	r3, r4
    93d6:	3347      	adds	r3, #71	; 0x47
    93d8:	6023      	str	r3, [r4, #0]
    93da:	6123      	str	r3, [r4, #16]
    93dc:	2301      	movs	r3, #1
    93de:	6163      	str	r3, [r4, #20]
    93e0:	b005      	add	sp, #20
    93e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93e4:	4b21      	ldr	r3, [pc, #132]	; (946c <setvbuf+0x150>)
    93e6:	429c      	cmp	r4, r3
    93e8:	d101      	bne.n	93ee <setvbuf+0xd2>
    93ea:	68b4      	ldr	r4, [r6, #8]
    93ec:	e7aa      	b.n	9344 <setvbuf+0x28>
    93ee:	4b20      	ldr	r3, [pc, #128]	; (9470 <setvbuf+0x154>)
    93f0:	429c      	cmp	r4, r3
    93f2:	d1a7      	bne.n	9344 <setvbuf+0x28>
    93f4:	68f4      	ldr	r4, [r6, #12]
    93f6:	e7a5      	b.n	9344 <setvbuf+0x28>
    93f8:	2f00      	cmp	r7, #0
    93fa:	d0d9      	beq.n	93b0 <setvbuf+0x94>
    93fc:	69b3      	ldr	r3, [r6, #24]
    93fe:	2b00      	cmp	r3, #0
    9400:	d102      	bne.n	9408 <setvbuf+0xec>
    9402:	0030      	movs	r0, r6
    9404:	f000 f950 	bl	96a8 <__sinit>
    9408:	9b00      	ldr	r3, [sp, #0]
    940a:	2b01      	cmp	r3, #1
    940c:	d103      	bne.n	9416 <setvbuf+0xfa>
    940e:	89a3      	ldrh	r3, [r4, #12]
    9410:	9a00      	ldr	r2, [sp, #0]
    9412:	431a      	orrs	r2, r3
    9414:	81a2      	strh	r2, [r4, #12]
    9416:	2008      	movs	r0, #8
    9418:	89a3      	ldrh	r3, [r4, #12]
    941a:	6027      	str	r7, [r4, #0]
    941c:	6127      	str	r7, [r4, #16]
    941e:	6165      	str	r5, [r4, #20]
    9420:	4018      	ands	r0, r3
    9422:	d018      	beq.n	9456 <setvbuf+0x13a>
    9424:	2001      	movs	r0, #1
    9426:	4018      	ands	r0, r3
    9428:	2300      	movs	r3, #0
    942a:	4298      	cmp	r0, r3
    942c:	d011      	beq.n	9452 <setvbuf+0x136>
    942e:	426d      	negs	r5, r5
    9430:	60a3      	str	r3, [r4, #8]
    9432:	61a5      	str	r5, [r4, #24]
    9434:	0018      	movs	r0, r3
    9436:	e7d3      	b.n	93e0 <setvbuf+0xc4>
    9438:	9801      	ldr	r0, [sp, #4]
    943a:	f000 f9f3 	bl	9824 <malloc>
    943e:	1e07      	subs	r7, r0, #0
    9440:	d0c0      	beq.n	93c4 <setvbuf+0xa8>
    9442:	2380      	movs	r3, #128	; 0x80
    9444:	89a2      	ldrh	r2, [r4, #12]
    9446:	9d01      	ldr	r5, [sp, #4]
    9448:	4313      	orrs	r3, r2
    944a:	81a3      	strh	r3, [r4, #12]
    944c:	e7d6      	b.n	93fc <setvbuf+0xe0>
    944e:	2000      	movs	r0, #0
    9450:	e7ba      	b.n	93c8 <setvbuf+0xac>
    9452:	60a5      	str	r5, [r4, #8]
    9454:	e7c4      	b.n	93e0 <setvbuf+0xc4>
    9456:	60a0      	str	r0, [r4, #8]
    9458:	e7c2      	b.n	93e0 <setvbuf+0xc4>
    945a:	2001      	movs	r0, #1
    945c:	4240      	negs	r0, r0
    945e:	e7bf      	b.n	93e0 <setvbuf+0xc4>
    9460:	20000088 	.word	0x20000088
    9464:	0000a260 	.word	0x0000a260
    9468:	fffff35c 	.word	0xfffff35c
    946c:	0000a280 	.word	0x0000a280
    9470:	0000a240 	.word	0x0000a240

00009474 <siprintf>:
    9474:	b40e      	push	{r1, r2, r3}
    9476:	b510      	push	{r4, lr}
    9478:	b09d      	sub	sp, #116	; 0x74
    947a:	a902      	add	r1, sp, #8
    947c:	9002      	str	r0, [sp, #8]
    947e:	6108      	str	r0, [r1, #16]
    9480:	480b      	ldr	r0, [pc, #44]	; (94b0 <siprintf+0x3c>)
    9482:	2482      	movs	r4, #130	; 0x82
    9484:	6088      	str	r0, [r1, #8]
    9486:	6148      	str	r0, [r1, #20]
    9488:	2001      	movs	r0, #1
    948a:	4240      	negs	r0, r0
    948c:	ab1f      	add	r3, sp, #124	; 0x7c
    948e:	81c8      	strh	r0, [r1, #14]
    9490:	4808      	ldr	r0, [pc, #32]	; (94b4 <siprintf+0x40>)
    9492:	cb04      	ldmia	r3!, {r2}
    9494:	00a4      	lsls	r4, r4, #2
    9496:	6800      	ldr	r0, [r0, #0]
    9498:	9301      	str	r3, [sp, #4]
    949a:	818c      	strh	r4, [r1, #12]
    949c:	f000 fad6 	bl	9a4c <_svfiprintf_r>
    94a0:	2300      	movs	r3, #0
    94a2:	9a02      	ldr	r2, [sp, #8]
    94a4:	7013      	strb	r3, [r2, #0]
    94a6:	b01d      	add	sp, #116	; 0x74
    94a8:	bc10      	pop	{r4}
    94aa:	bc08      	pop	{r3}
    94ac:	b003      	add	sp, #12
    94ae:	4718      	bx	r3
    94b0:	7fffffff 	.word	0x7fffffff
    94b4:	20000088 	.word	0x20000088

000094b8 <__sflush_r>:
    94b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    94ba:	898a      	ldrh	r2, [r1, #12]
    94bc:	0005      	movs	r5, r0
    94be:	000c      	movs	r4, r1
    94c0:	0713      	lsls	r3, r2, #28
    94c2:	d460      	bmi.n	9586 <__sflush_r+0xce>
    94c4:	684b      	ldr	r3, [r1, #4]
    94c6:	2b00      	cmp	r3, #0
    94c8:	dc04      	bgt.n	94d4 <__sflush_r+0x1c>
    94ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    94cc:	2b00      	cmp	r3, #0
    94ce:	dc01      	bgt.n	94d4 <__sflush_r+0x1c>
    94d0:	2000      	movs	r0, #0
    94d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    94d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    94d6:	2f00      	cmp	r7, #0
    94d8:	d0fa      	beq.n	94d0 <__sflush_r+0x18>
    94da:	2300      	movs	r3, #0
    94dc:	682e      	ldr	r6, [r5, #0]
    94de:	602b      	str	r3, [r5, #0]
    94e0:	2380      	movs	r3, #128	; 0x80
    94e2:	015b      	lsls	r3, r3, #5
    94e4:	401a      	ands	r2, r3
    94e6:	d034      	beq.n	9552 <__sflush_r+0x9a>
    94e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    94ea:	89a3      	ldrh	r3, [r4, #12]
    94ec:	075b      	lsls	r3, r3, #29
    94ee:	d506      	bpl.n	94fe <__sflush_r+0x46>
    94f0:	6863      	ldr	r3, [r4, #4]
    94f2:	1ac0      	subs	r0, r0, r3
    94f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    94f6:	2b00      	cmp	r3, #0
    94f8:	d001      	beq.n	94fe <__sflush_r+0x46>
    94fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    94fc:	1ac0      	subs	r0, r0, r3
    94fe:	0002      	movs	r2, r0
    9500:	6a21      	ldr	r1, [r4, #32]
    9502:	2300      	movs	r3, #0
    9504:	0028      	movs	r0, r5
    9506:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9508:	47b8      	blx	r7
    950a:	89a1      	ldrh	r1, [r4, #12]
    950c:	1c43      	adds	r3, r0, #1
    950e:	d106      	bne.n	951e <__sflush_r+0x66>
    9510:	682b      	ldr	r3, [r5, #0]
    9512:	2b1d      	cmp	r3, #29
    9514:	d831      	bhi.n	957a <__sflush_r+0xc2>
    9516:	4a2c      	ldr	r2, [pc, #176]	; (95c8 <__sflush_r+0x110>)
    9518:	40da      	lsrs	r2, r3
    951a:	07d3      	lsls	r3, r2, #31
    951c:	d52d      	bpl.n	957a <__sflush_r+0xc2>
    951e:	2300      	movs	r3, #0
    9520:	6063      	str	r3, [r4, #4]
    9522:	6923      	ldr	r3, [r4, #16]
    9524:	6023      	str	r3, [r4, #0]
    9526:	04cb      	lsls	r3, r1, #19
    9528:	d505      	bpl.n	9536 <__sflush_r+0x7e>
    952a:	1c43      	adds	r3, r0, #1
    952c:	d102      	bne.n	9534 <__sflush_r+0x7c>
    952e:	682b      	ldr	r3, [r5, #0]
    9530:	2b00      	cmp	r3, #0
    9532:	d100      	bne.n	9536 <__sflush_r+0x7e>
    9534:	6560      	str	r0, [r4, #84]	; 0x54
    9536:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9538:	602e      	str	r6, [r5, #0]
    953a:	2900      	cmp	r1, #0
    953c:	d0c8      	beq.n	94d0 <__sflush_r+0x18>
    953e:	0023      	movs	r3, r4
    9540:	3344      	adds	r3, #68	; 0x44
    9542:	4299      	cmp	r1, r3
    9544:	d002      	beq.n	954c <__sflush_r+0x94>
    9546:	0028      	movs	r0, r5
    9548:	f000 f976 	bl	9838 <_free_r>
    954c:	2000      	movs	r0, #0
    954e:	6360      	str	r0, [r4, #52]	; 0x34
    9550:	e7bf      	b.n	94d2 <__sflush_r+0x1a>
    9552:	2301      	movs	r3, #1
    9554:	6a21      	ldr	r1, [r4, #32]
    9556:	0028      	movs	r0, r5
    9558:	47b8      	blx	r7
    955a:	1c43      	adds	r3, r0, #1
    955c:	d1c5      	bne.n	94ea <__sflush_r+0x32>
    955e:	682b      	ldr	r3, [r5, #0]
    9560:	2b00      	cmp	r3, #0
    9562:	d0c2      	beq.n	94ea <__sflush_r+0x32>
    9564:	2b1d      	cmp	r3, #29
    9566:	d001      	beq.n	956c <__sflush_r+0xb4>
    9568:	2b16      	cmp	r3, #22
    956a:	d101      	bne.n	9570 <__sflush_r+0xb8>
    956c:	602e      	str	r6, [r5, #0]
    956e:	e7af      	b.n	94d0 <__sflush_r+0x18>
    9570:	2340      	movs	r3, #64	; 0x40
    9572:	89a2      	ldrh	r2, [r4, #12]
    9574:	4313      	orrs	r3, r2
    9576:	81a3      	strh	r3, [r4, #12]
    9578:	e7ab      	b.n	94d2 <__sflush_r+0x1a>
    957a:	2340      	movs	r3, #64	; 0x40
    957c:	430b      	orrs	r3, r1
    957e:	2001      	movs	r0, #1
    9580:	81a3      	strh	r3, [r4, #12]
    9582:	4240      	negs	r0, r0
    9584:	e7a5      	b.n	94d2 <__sflush_r+0x1a>
    9586:	690f      	ldr	r7, [r1, #16]
    9588:	2f00      	cmp	r7, #0
    958a:	d0a1      	beq.n	94d0 <__sflush_r+0x18>
    958c:	680b      	ldr	r3, [r1, #0]
    958e:	600f      	str	r7, [r1, #0]
    9590:	1bdb      	subs	r3, r3, r7
    9592:	9301      	str	r3, [sp, #4]
    9594:	2300      	movs	r3, #0
    9596:	0792      	lsls	r2, r2, #30
    9598:	d100      	bne.n	959c <__sflush_r+0xe4>
    959a:	694b      	ldr	r3, [r1, #20]
    959c:	60a3      	str	r3, [r4, #8]
    959e:	9b01      	ldr	r3, [sp, #4]
    95a0:	2b00      	cmp	r3, #0
    95a2:	dc00      	bgt.n	95a6 <__sflush_r+0xee>
    95a4:	e794      	b.n	94d0 <__sflush_r+0x18>
    95a6:	9b01      	ldr	r3, [sp, #4]
    95a8:	003a      	movs	r2, r7
    95aa:	6a21      	ldr	r1, [r4, #32]
    95ac:	0028      	movs	r0, r5
    95ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    95b0:	47b0      	blx	r6
    95b2:	2800      	cmp	r0, #0
    95b4:	dc03      	bgt.n	95be <__sflush_r+0x106>
    95b6:	2340      	movs	r3, #64	; 0x40
    95b8:	89a2      	ldrh	r2, [r4, #12]
    95ba:	4313      	orrs	r3, r2
    95bc:	e7df      	b.n	957e <__sflush_r+0xc6>
    95be:	9b01      	ldr	r3, [sp, #4]
    95c0:	183f      	adds	r7, r7, r0
    95c2:	1a1b      	subs	r3, r3, r0
    95c4:	9301      	str	r3, [sp, #4]
    95c6:	e7ea      	b.n	959e <__sflush_r+0xe6>
    95c8:	20400001 	.word	0x20400001

000095cc <_fflush_r>:
    95cc:	690b      	ldr	r3, [r1, #16]
    95ce:	b570      	push	{r4, r5, r6, lr}
    95d0:	0005      	movs	r5, r0
    95d2:	000c      	movs	r4, r1
    95d4:	2b00      	cmp	r3, #0
    95d6:	d101      	bne.n	95dc <_fflush_r+0x10>
    95d8:	2000      	movs	r0, #0
    95da:	bd70      	pop	{r4, r5, r6, pc}
    95dc:	2800      	cmp	r0, #0
    95de:	d004      	beq.n	95ea <_fflush_r+0x1e>
    95e0:	6983      	ldr	r3, [r0, #24]
    95e2:	2b00      	cmp	r3, #0
    95e4:	d101      	bne.n	95ea <_fflush_r+0x1e>
    95e6:	f000 f85f 	bl	96a8 <__sinit>
    95ea:	4b0b      	ldr	r3, [pc, #44]	; (9618 <_fflush_r+0x4c>)
    95ec:	429c      	cmp	r4, r3
    95ee:	d109      	bne.n	9604 <_fflush_r+0x38>
    95f0:	686c      	ldr	r4, [r5, #4]
    95f2:	220c      	movs	r2, #12
    95f4:	5ea3      	ldrsh	r3, [r4, r2]
    95f6:	2b00      	cmp	r3, #0
    95f8:	d0ee      	beq.n	95d8 <_fflush_r+0xc>
    95fa:	0021      	movs	r1, r4
    95fc:	0028      	movs	r0, r5
    95fe:	f7ff ff5b 	bl	94b8 <__sflush_r>
    9602:	e7ea      	b.n	95da <_fflush_r+0xe>
    9604:	4b05      	ldr	r3, [pc, #20]	; (961c <_fflush_r+0x50>)
    9606:	429c      	cmp	r4, r3
    9608:	d101      	bne.n	960e <_fflush_r+0x42>
    960a:	68ac      	ldr	r4, [r5, #8]
    960c:	e7f1      	b.n	95f2 <_fflush_r+0x26>
    960e:	4b04      	ldr	r3, [pc, #16]	; (9620 <_fflush_r+0x54>)
    9610:	429c      	cmp	r4, r3
    9612:	d1ee      	bne.n	95f2 <_fflush_r+0x26>
    9614:	68ec      	ldr	r4, [r5, #12]
    9616:	e7ec      	b.n	95f2 <_fflush_r+0x26>
    9618:	0000a260 	.word	0x0000a260
    961c:	0000a280 	.word	0x0000a280
    9620:	0000a240 	.word	0x0000a240

00009624 <_cleanup_r>:
    9624:	b510      	push	{r4, lr}
    9626:	4902      	ldr	r1, [pc, #8]	; (9630 <_cleanup_r+0xc>)
    9628:	f000 f8b2 	bl	9790 <_fwalk_reent>
    962c:	bd10      	pop	{r4, pc}
    962e:	46c0      	nop			; (mov r8, r8)
    9630:	000095cd 	.word	0x000095cd

00009634 <std.isra.0>:
    9634:	2300      	movs	r3, #0
    9636:	b510      	push	{r4, lr}
    9638:	0004      	movs	r4, r0
    963a:	6003      	str	r3, [r0, #0]
    963c:	6043      	str	r3, [r0, #4]
    963e:	6083      	str	r3, [r0, #8]
    9640:	8181      	strh	r1, [r0, #12]
    9642:	6643      	str	r3, [r0, #100]	; 0x64
    9644:	81c2      	strh	r2, [r0, #14]
    9646:	6103      	str	r3, [r0, #16]
    9648:	6143      	str	r3, [r0, #20]
    964a:	6183      	str	r3, [r0, #24]
    964c:	0019      	movs	r1, r3
    964e:	2208      	movs	r2, #8
    9650:	305c      	adds	r0, #92	; 0x5c
    9652:	f7ff fe15 	bl	9280 <memset>
    9656:	4b05      	ldr	r3, [pc, #20]	; (966c <std.isra.0+0x38>)
    9658:	6224      	str	r4, [r4, #32]
    965a:	6263      	str	r3, [r4, #36]	; 0x24
    965c:	4b04      	ldr	r3, [pc, #16]	; (9670 <std.isra.0+0x3c>)
    965e:	62a3      	str	r3, [r4, #40]	; 0x28
    9660:	4b04      	ldr	r3, [pc, #16]	; (9674 <std.isra.0+0x40>)
    9662:	62e3      	str	r3, [r4, #44]	; 0x2c
    9664:	4b04      	ldr	r3, [pc, #16]	; (9678 <std.isra.0+0x44>)
    9666:	6323      	str	r3, [r4, #48]	; 0x30
    9668:	bd10      	pop	{r4, pc}
    966a:	46c0      	nop			; (mov r8, r8)
    966c:	00009f89 	.word	0x00009f89
    9670:	00009fb1 	.word	0x00009fb1
    9674:	00009fe9 	.word	0x00009fe9
    9678:	0000a015 	.word	0x0000a015

0000967c <__sfmoreglue>:
    967c:	b570      	push	{r4, r5, r6, lr}
    967e:	2568      	movs	r5, #104	; 0x68
    9680:	1e4a      	subs	r2, r1, #1
    9682:	4355      	muls	r5, r2
    9684:	000e      	movs	r6, r1
    9686:	0029      	movs	r1, r5
    9688:	3174      	adds	r1, #116	; 0x74
    968a:	f000 f91f 	bl	98cc <_malloc_r>
    968e:	1e04      	subs	r4, r0, #0
    9690:	d008      	beq.n	96a4 <__sfmoreglue+0x28>
    9692:	2100      	movs	r1, #0
    9694:	002a      	movs	r2, r5
    9696:	6001      	str	r1, [r0, #0]
    9698:	6046      	str	r6, [r0, #4]
    969a:	300c      	adds	r0, #12
    969c:	60a0      	str	r0, [r4, #8]
    969e:	3268      	adds	r2, #104	; 0x68
    96a0:	f7ff fdee 	bl	9280 <memset>
    96a4:	0020      	movs	r0, r4
    96a6:	bd70      	pop	{r4, r5, r6, pc}

000096a8 <__sinit>:
    96a8:	6983      	ldr	r3, [r0, #24]
    96aa:	b513      	push	{r0, r1, r4, lr}
    96ac:	0004      	movs	r4, r0
    96ae:	2b00      	cmp	r3, #0
    96b0:	d128      	bne.n	9704 <__sinit+0x5c>
    96b2:	6483      	str	r3, [r0, #72]	; 0x48
    96b4:	64c3      	str	r3, [r0, #76]	; 0x4c
    96b6:	6503      	str	r3, [r0, #80]	; 0x50
    96b8:	4b13      	ldr	r3, [pc, #76]	; (9708 <__sinit+0x60>)
    96ba:	4a14      	ldr	r2, [pc, #80]	; (970c <__sinit+0x64>)
    96bc:	681b      	ldr	r3, [r3, #0]
    96be:	6282      	str	r2, [r0, #40]	; 0x28
    96c0:	9301      	str	r3, [sp, #4]
    96c2:	4298      	cmp	r0, r3
    96c4:	d101      	bne.n	96ca <__sinit+0x22>
    96c6:	2301      	movs	r3, #1
    96c8:	6183      	str	r3, [r0, #24]
    96ca:	0020      	movs	r0, r4
    96cc:	f000 f820 	bl	9710 <__sfp>
    96d0:	6060      	str	r0, [r4, #4]
    96d2:	0020      	movs	r0, r4
    96d4:	f000 f81c 	bl	9710 <__sfp>
    96d8:	60a0      	str	r0, [r4, #8]
    96da:	0020      	movs	r0, r4
    96dc:	f000 f818 	bl	9710 <__sfp>
    96e0:	2200      	movs	r2, #0
    96e2:	60e0      	str	r0, [r4, #12]
    96e4:	2104      	movs	r1, #4
    96e6:	6860      	ldr	r0, [r4, #4]
    96e8:	f7ff ffa4 	bl	9634 <std.isra.0>
    96ec:	2201      	movs	r2, #1
    96ee:	2109      	movs	r1, #9
    96f0:	68a0      	ldr	r0, [r4, #8]
    96f2:	f7ff ff9f 	bl	9634 <std.isra.0>
    96f6:	2202      	movs	r2, #2
    96f8:	2112      	movs	r1, #18
    96fa:	68e0      	ldr	r0, [r4, #12]
    96fc:	f7ff ff9a 	bl	9634 <std.isra.0>
    9700:	2301      	movs	r3, #1
    9702:	61a3      	str	r3, [r4, #24]
    9704:	bd13      	pop	{r0, r1, r4, pc}
    9706:	46c0      	nop			; (mov r8, r8)
    9708:	0000a23c 	.word	0x0000a23c
    970c:	00009625 	.word	0x00009625

00009710 <__sfp>:
    9710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9712:	4b1e      	ldr	r3, [pc, #120]	; (978c <__sfp+0x7c>)
    9714:	0007      	movs	r7, r0
    9716:	681e      	ldr	r6, [r3, #0]
    9718:	69b3      	ldr	r3, [r6, #24]
    971a:	2b00      	cmp	r3, #0
    971c:	d102      	bne.n	9724 <__sfp+0x14>
    971e:	0030      	movs	r0, r6
    9720:	f7ff ffc2 	bl	96a8 <__sinit>
    9724:	3648      	adds	r6, #72	; 0x48
    9726:	68b4      	ldr	r4, [r6, #8]
    9728:	6873      	ldr	r3, [r6, #4]
    972a:	3b01      	subs	r3, #1
    972c:	d504      	bpl.n	9738 <__sfp+0x28>
    972e:	6833      	ldr	r3, [r6, #0]
    9730:	2b00      	cmp	r3, #0
    9732:	d007      	beq.n	9744 <__sfp+0x34>
    9734:	6836      	ldr	r6, [r6, #0]
    9736:	e7f6      	b.n	9726 <__sfp+0x16>
    9738:	220c      	movs	r2, #12
    973a:	5ea5      	ldrsh	r5, [r4, r2]
    973c:	2d00      	cmp	r5, #0
    973e:	d00d      	beq.n	975c <__sfp+0x4c>
    9740:	3468      	adds	r4, #104	; 0x68
    9742:	e7f2      	b.n	972a <__sfp+0x1a>
    9744:	2104      	movs	r1, #4
    9746:	0038      	movs	r0, r7
    9748:	f7ff ff98 	bl	967c <__sfmoreglue>
    974c:	6030      	str	r0, [r6, #0]
    974e:	2800      	cmp	r0, #0
    9750:	d1f0      	bne.n	9734 <__sfp+0x24>
    9752:	230c      	movs	r3, #12
    9754:	0004      	movs	r4, r0
    9756:	603b      	str	r3, [r7, #0]
    9758:	0020      	movs	r0, r4
    975a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    975c:	2301      	movs	r3, #1
    975e:	0020      	movs	r0, r4
    9760:	425b      	negs	r3, r3
    9762:	81e3      	strh	r3, [r4, #14]
    9764:	3302      	adds	r3, #2
    9766:	81a3      	strh	r3, [r4, #12]
    9768:	6665      	str	r5, [r4, #100]	; 0x64
    976a:	6025      	str	r5, [r4, #0]
    976c:	60a5      	str	r5, [r4, #8]
    976e:	6065      	str	r5, [r4, #4]
    9770:	6125      	str	r5, [r4, #16]
    9772:	6165      	str	r5, [r4, #20]
    9774:	61a5      	str	r5, [r4, #24]
    9776:	2208      	movs	r2, #8
    9778:	0029      	movs	r1, r5
    977a:	305c      	adds	r0, #92	; 0x5c
    977c:	f7ff fd80 	bl	9280 <memset>
    9780:	6365      	str	r5, [r4, #52]	; 0x34
    9782:	63a5      	str	r5, [r4, #56]	; 0x38
    9784:	64a5      	str	r5, [r4, #72]	; 0x48
    9786:	64e5      	str	r5, [r4, #76]	; 0x4c
    9788:	e7e6      	b.n	9758 <__sfp+0x48>
    978a:	46c0      	nop			; (mov r8, r8)
    978c:	0000a23c 	.word	0x0000a23c

00009790 <_fwalk_reent>:
    9790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9792:	0004      	movs	r4, r0
    9794:	0007      	movs	r7, r0
    9796:	2600      	movs	r6, #0
    9798:	9101      	str	r1, [sp, #4]
    979a:	3448      	adds	r4, #72	; 0x48
    979c:	2c00      	cmp	r4, #0
    979e:	d101      	bne.n	97a4 <_fwalk_reent+0x14>
    97a0:	0030      	movs	r0, r6
    97a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    97a4:	6863      	ldr	r3, [r4, #4]
    97a6:	68a5      	ldr	r5, [r4, #8]
    97a8:	9300      	str	r3, [sp, #0]
    97aa:	9b00      	ldr	r3, [sp, #0]
    97ac:	3b01      	subs	r3, #1
    97ae:	9300      	str	r3, [sp, #0]
    97b0:	d501      	bpl.n	97b6 <_fwalk_reent+0x26>
    97b2:	6824      	ldr	r4, [r4, #0]
    97b4:	e7f2      	b.n	979c <_fwalk_reent+0xc>
    97b6:	89ab      	ldrh	r3, [r5, #12]
    97b8:	2b01      	cmp	r3, #1
    97ba:	d908      	bls.n	97ce <_fwalk_reent+0x3e>
    97bc:	220e      	movs	r2, #14
    97be:	5eab      	ldrsh	r3, [r5, r2]
    97c0:	3301      	adds	r3, #1
    97c2:	d004      	beq.n	97ce <_fwalk_reent+0x3e>
    97c4:	0029      	movs	r1, r5
    97c6:	0038      	movs	r0, r7
    97c8:	9b01      	ldr	r3, [sp, #4]
    97ca:	4798      	blx	r3
    97cc:	4306      	orrs	r6, r0
    97ce:	3568      	adds	r5, #104	; 0x68
    97d0:	e7eb      	b.n	97aa <_fwalk_reent+0x1a>
	...

000097d4 <__swhatbuf_r>:
    97d4:	b570      	push	{r4, r5, r6, lr}
    97d6:	000e      	movs	r6, r1
    97d8:	001d      	movs	r5, r3
    97da:	230e      	movs	r3, #14
    97dc:	5ec9      	ldrsh	r1, [r1, r3]
    97de:	b090      	sub	sp, #64	; 0x40
    97e0:	0014      	movs	r4, r2
    97e2:	2900      	cmp	r1, #0
    97e4:	da07      	bge.n	97f6 <__swhatbuf_r+0x22>
    97e6:	2300      	movs	r3, #0
    97e8:	602b      	str	r3, [r5, #0]
    97ea:	89b3      	ldrh	r3, [r6, #12]
    97ec:	061b      	lsls	r3, r3, #24
    97ee:	d411      	bmi.n	9814 <__swhatbuf_r+0x40>
    97f0:	2380      	movs	r3, #128	; 0x80
    97f2:	00db      	lsls	r3, r3, #3
    97f4:	e00f      	b.n	9816 <__swhatbuf_r+0x42>
    97f6:	aa01      	add	r2, sp, #4
    97f8:	f000 fc38 	bl	a06c <_fstat_r>
    97fc:	2800      	cmp	r0, #0
    97fe:	dbf2      	blt.n	97e6 <__swhatbuf_r+0x12>
    9800:	22f0      	movs	r2, #240	; 0xf0
    9802:	9b02      	ldr	r3, [sp, #8]
    9804:	0212      	lsls	r2, r2, #8
    9806:	4013      	ands	r3, r2
    9808:	4a05      	ldr	r2, [pc, #20]	; (9820 <__swhatbuf_r+0x4c>)
    980a:	189b      	adds	r3, r3, r2
    980c:	425a      	negs	r2, r3
    980e:	4153      	adcs	r3, r2
    9810:	602b      	str	r3, [r5, #0]
    9812:	e7ed      	b.n	97f0 <__swhatbuf_r+0x1c>
    9814:	2340      	movs	r3, #64	; 0x40
    9816:	2000      	movs	r0, #0
    9818:	6023      	str	r3, [r4, #0]
    981a:	b010      	add	sp, #64	; 0x40
    981c:	bd70      	pop	{r4, r5, r6, pc}
    981e:	46c0      	nop			; (mov r8, r8)
    9820:	ffffe000 	.word	0xffffe000

00009824 <malloc>:
    9824:	b510      	push	{r4, lr}
    9826:	4b03      	ldr	r3, [pc, #12]	; (9834 <malloc+0x10>)
    9828:	0001      	movs	r1, r0
    982a:	6818      	ldr	r0, [r3, #0]
    982c:	f000 f84e 	bl	98cc <_malloc_r>
    9830:	bd10      	pop	{r4, pc}
    9832:	46c0      	nop			; (mov r8, r8)
    9834:	20000088 	.word	0x20000088

00009838 <_free_r>:
    9838:	b570      	push	{r4, r5, r6, lr}
    983a:	0005      	movs	r5, r0
    983c:	2900      	cmp	r1, #0
    983e:	d010      	beq.n	9862 <_free_r+0x2a>
    9840:	1f0c      	subs	r4, r1, #4
    9842:	6823      	ldr	r3, [r4, #0]
    9844:	2b00      	cmp	r3, #0
    9846:	da00      	bge.n	984a <_free_r+0x12>
    9848:	18e4      	adds	r4, r4, r3
    984a:	0028      	movs	r0, r5
    984c:	f000 fc51 	bl	a0f2 <__malloc_lock>
    9850:	4a1d      	ldr	r2, [pc, #116]	; (98c8 <_free_r+0x90>)
    9852:	6813      	ldr	r3, [r2, #0]
    9854:	2b00      	cmp	r3, #0
    9856:	d105      	bne.n	9864 <_free_r+0x2c>
    9858:	6063      	str	r3, [r4, #4]
    985a:	6014      	str	r4, [r2, #0]
    985c:	0028      	movs	r0, r5
    985e:	f000 fc49 	bl	a0f4 <__malloc_unlock>
    9862:	bd70      	pop	{r4, r5, r6, pc}
    9864:	42a3      	cmp	r3, r4
    9866:	d909      	bls.n	987c <_free_r+0x44>
    9868:	6821      	ldr	r1, [r4, #0]
    986a:	1860      	adds	r0, r4, r1
    986c:	4283      	cmp	r3, r0
    986e:	d1f3      	bne.n	9858 <_free_r+0x20>
    9870:	6818      	ldr	r0, [r3, #0]
    9872:	685b      	ldr	r3, [r3, #4]
    9874:	1841      	adds	r1, r0, r1
    9876:	6021      	str	r1, [r4, #0]
    9878:	e7ee      	b.n	9858 <_free_r+0x20>
    987a:	0013      	movs	r3, r2
    987c:	685a      	ldr	r2, [r3, #4]
    987e:	2a00      	cmp	r2, #0
    9880:	d001      	beq.n	9886 <_free_r+0x4e>
    9882:	42a2      	cmp	r2, r4
    9884:	d9f9      	bls.n	987a <_free_r+0x42>
    9886:	6819      	ldr	r1, [r3, #0]
    9888:	1858      	adds	r0, r3, r1
    988a:	42a0      	cmp	r0, r4
    988c:	d10b      	bne.n	98a6 <_free_r+0x6e>
    988e:	6820      	ldr	r0, [r4, #0]
    9890:	1809      	adds	r1, r1, r0
    9892:	1858      	adds	r0, r3, r1
    9894:	6019      	str	r1, [r3, #0]
    9896:	4282      	cmp	r2, r0
    9898:	d1e0      	bne.n	985c <_free_r+0x24>
    989a:	6810      	ldr	r0, [r2, #0]
    989c:	6852      	ldr	r2, [r2, #4]
    989e:	1841      	adds	r1, r0, r1
    98a0:	6019      	str	r1, [r3, #0]
    98a2:	605a      	str	r2, [r3, #4]
    98a4:	e7da      	b.n	985c <_free_r+0x24>
    98a6:	42a0      	cmp	r0, r4
    98a8:	d902      	bls.n	98b0 <_free_r+0x78>
    98aa:	230c      	movs	r3, #12
    98ac:	602b      	str	r3, [r5, #0]
    98ae:	e7d5      	b.n	985c <_free_r+0x24>
    98b0:	6821      	ldr	r1, [r4, #0]
    98b2:	1860      	adds	r0, r4, r1
    98b4:	4282      	cmp	r2, r0
    98b6:	d103      	bne.n	98c0 <_free_r+0x88>
    98b8:	6810      	ldr	r0, [r2, #0]
    98ba:	6852      	ldr	r2, [r2, #4]
    98bc:	1841      	adds	r1, r0, r1
    98be:	6021      	str	r1, [r4, #0]
    98c0:	6062      	str	r2, [r4, #4]
    98c2:	605c      	str	r4, [r3, #4]
    98c4:	e7ca      	b.n	985c <_free_r+0x24>
    98c6:	46c0      	nop			; (mov r8, r8)
    98c8:	200003d0 	.word	0x200003d0

000098cc <_malloc_r>:
    98cc:	2303      	movs	r3, #3
    98ce:	b570      	push	{r4, r5, r6, lr}
    98d0:	1ccd      	adds	r5, r1, #3
    98d2:	439d      	bics	r5, r3
    98d4:	3508      	adds	r5, #8
    98d6:	0006      	movs	r6, r0
    98d8:	2d0c      	cmp	r5, #12
    98da:	d21e      	bcs.n	991a <_malloc_r+0x4e>
    98dc:	250c      	movs	r5, #12
    98de:	42a9      	cmp	r1, r5
    98e0:	d81d      	bhi.n	991e <_malloc_r+0x52>
    98e2:	0030      	movs	r0, r6
    98e4:	f000 fc05 	bl	a0f2 <__malloc_lock>
    98e8:	4a25      	ldr	r2, [pc, #148]	; (9980 <_malloc_r+0xb4>)
    98ea:	6814      	ldr	r4, [r2, #0]
    98ec:	0021      	movs	r1, r4
    98ee:	2900      	cmp	r1, #0
    98f0:	d119      	bne.n	9926 <_malloc_r+0x5a>
    98f2:	4c24      	ldr	r4, [pc, #144]	; (9984 <_malloc_r+0xb8>)
    98f4:	6823      	ldr	r3, [r4, #0]
    98f6:	2b00      	cmp	r3, #0
    98f8:	d103      	bne.n	9902 <_malloc_r+0x36>
    98fa:	0030      	movs	r0, r6
    98fc:	f000 fb32 	bl	9f64 <_sbrk_r>
    9900:	6020      	str	r0, [r4, #0]
    9902:	0029      	movs	r1, r5
    9904:	0030      	movs	r0, r6
    9906:	f000 fb2d 	bl	9f64 <_sbrk_r>
    990a:	1c43      	adds	r3, r0, #1
    990c:	d12c      	bne.n	9968 <_malloc_r+0x9c>
    990e:	230c      	movs	r3, #12
    9910:	0030      	movs	r0, r6
    9912:	6033      	str	r3, [r6, #0]
    9914:	f000 fbee 	bl	a0f4 <__malloc_unlock>
    9918:	e003      	b.n	9922 <_malloc_r+0x56>
    991a:	2d00      	cmp	r5, #0
    991c:	dadf      	bge.n	98de <_malloc_r+0x12>
    991e:	230c      	movs	r3, #12
    9920:	6033      	str	r3, [r6, #0]
    9922:	2000      	movs	r0, #0
    9924:	bd70      	pop	{r4, r5, r6, pc}
    9926:	680b      	ldr	r3, [r1, #0]
    9928:	1b5b      	subs	r3, r3, r5
    992a:	d41a      	bmi.n	9962 <_malloc_r+0x96>
    992c:	2b0b      	cmp	r3, #11
    992e:	d903      	bls.n	9938 <_malloc_r+0x6c>
    9930:	600b      	str	r3, [r1, #0]
    9932:	18cc      	adds	r4, r1, r3
    9934:	6025      	str	r5, [r4, #0]
    9936:	e003      	b.n	9940 <_malloc_r+0x74>
    9938:	428c      	cmp	r4, r1
    993a:	d10e      	bne.n	995a <_malloc_r+0x8e>
    993c:	6863      	ldr	r3, [r4, #4]
    993e:	6013      	str	r3, [r2, #0]
    9940:	0030      	movs	r0, r6
    9942:	f000 fbd7 	bl	a0f4 <__malloc_unlock>
    9946:	0020      	movs	r0, r4
    9948:	2207      	movs	r2, #7
    994a:	300b      	adds	r0, #11
    994c:	1d23      	adds	r3, r4, #4
    994e:	4390      	bics	r0, r2
    9950:	1ac3      	subs	r3, r0, r3
    9952:	d0e7      	beq.n	9924 <_malloc_r+0x58>
    9954:	425a      	negs	r2, r3
    9956:	50e2      	str	r2, [r4, r3]
    9958:	e7e4      	b.n	9924 <_malloc_r+0x58>
    995a:	684b      	ldr	r3, [r1, #4]
    995c:	6063      	str	r3, [r4, #4]
    995e:	000c      	movs	r4, r1
    9960:	e7ee      	b.n	9940 <_malloc_r+0x74>
    9962:	000c      	movs	r4, r1
    9964:	6849      	ldr	r1, [r1, #4]
    9966:	e7c2      	b.n	98ee <_malloc_r+0x22>
    9968:	2303      	movs	r3, #3
    996a:	1cc4      	adds	r4, r0, #3
    996c:	439c      	bics	r4, r3
    996e:	42a0      	cmp	r0, r4
    9970:	d0e0      	beq.n	9934 <_malloc_r+0x68>
    9972:	1a21      	subs	r1, r4, r0
    9974:	0030      	movs	r0, r6
    9976:	f000 faf5 	bl	9f64 <_sbrk_r>
    997a:	1c43      	adds	r3, r0, #1
    997c:	d1da      	bne.n	9934 <_malloc_r+0x68>
    997e:	e7c6      	b.n	990e <_malloc_r+0x42>
    9980:	200003d0 	.word	0x200003d0
    9984:	200003d4 	.word	0x200003d4

00009988 <__ssputs_r>:
    9988:	b5f0      	push	{r4, r5, r6, r7, lr}
    998a:	688e      	ldr	r6, [r1, #8]
    998c:	b085      	sub	sp, #20
    998e:	0007      	movs	r7, r0
    9990:	000c      	movs	r4, r1
    9992:	9203      	str	r2, [sp, #12]
    9994:	9301      	str	r3, [sp, #4]
    9996:	429e      	cmp	r6, r3
    9998:	d839      	bhi.n	9a0e <__ssputs_r+0x86>
    999a:	2390      	movs	r3, #144	; 0x90
    999c:	898a      	ldrh	r2, [r1, #12]
    999e:	00db      	lsls	r3, r3, #3
    99a0:	421a      	tst	r2, r3
    99a2:	d034      	beq.n	9a0e <__ssputs_r+0x86>
    99a4:	2503      	movs	r5, #3
    99a6:	6909      	ldr	r1, [r1, #16]
    99a8:	6823      	ldr	r3, [r4, #0]
    99aa:	1a5b      	subs	r3, r3, r1
    99ac:	9302      	str	r3, [sp, #8]
    99ae:	6963      	ldr	r3, [r4, #20]
    99b0:	9802      	ldr	r0, [sp, #8]
    99b2:	435d      	muls	r5, r3
    99b4:	0feb      	lsrs	r3, r5, #31
    99b6:	195d      	adds	r5, r3, r5
    99b8:	9b01      	ldr	r3, [sp, #4]
    99ba:	106d      	asrs	r5, r5, #1
    99bc:	3301      	adds	r3, #1
    99be:	181b      	adds	r3, r3, r0
    99c0:	42ab      	cmp	r3, r5
    99c2:	d900      	bls.n	99c6 <__ssputs_r+0x3e>
    99c4:	001d      	movs	r5, r3
    99c6:	0553      	lsls	r3, r2, #21
    99c8:	d532      	bpl.n	9a30 <__ssputs_r+0xa8>
    99ca:	0029      	movs	r1, r5
    99cc:	0038      	movs	r0, r7
    99ce:	f7ff ff7d 	bl	98cc <_malloc_r>
    99d2:	1e06      	subs	r6, r0, #0
    99d4:	d109      	bne.n	99ea <__ssputs_r+0x62>
    99d6:	230c      	movs	r3, #12
    99d8:	603b      	str	r3, [r7, #0]
    99da:	2340      	movs	r3, #64	; 0x40
    99dc:	2001      	movs	r0, #1
    99de:	89a2      	ldrh	r2, [r4, #12]
    99e0:	4240      	negs	r0, r0
    99e2:	4313      	orrs	r3, r2
    99e4:	81a3      	strh	r3, [r4, #12]
    99e6:	b005      	add	sp, #20
    99e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99ea:	9a02      	ldr	r2, [sp, #8]
    99ec:	6921      	ldr	r1, [r4, #16]
    99ee:	f7ff fc3e 	bl	926e <memcpy>
    99f2:	89a3      	ldrh	r3, [r4, #12]
    99f4:	4a14      	ldr	r2, [pc, #80]	; (9a48 <__ssputs_r+0xc0>)
    99f6:	401a      	ands	r2, r3
    99f8:	2380      	movs	r3, #128	; 0x80
    99fa:	4313      	orrs	r3, r2
    99fc:	81a3      	strh	r3, [r4, #12]
    99fe:	9b02      	ldr	r3, [sp, #8]
    9a00:	6126      	str	r6, [r4, #16]
    9a02:	18f6      	adds	r6, r6, r3
    9a04:	6026      	str	r6, [r4, #0]
    9a06:	6165      	str	r5, [r4, #20]
    9a08:	9e01      	ldr	r6, [sp, #4]
    9a0a:	1aed      	subs	r5, r5, r3
    9a0c:	60a5      	str	r5, [r4, #8]
    9a0e:	9b01      	ldr	r3, [sp, #4]
    9a10:	42b3      	cmp	r3, r6
    9a12:	d200      	bcs.n	9a16 <__ssputs_r+0x8e>
    9a14:	001e      	movs	r6, r3
    9a16:	0032      	movs	r2, r6
    9a18:	9903      	ldr	r1, [sp, #12]
    9a1a:	6820      	ldr	r0, [r4, #0]
    9a1c:	f000 fb57 	bl	a0ce <memmove>
    9a20:	68a3      	ldr	r3, [r4, #8]
    9a22:	2000      	movs	r0, #0
    9a24:	1b9b      	subs	r3, r3, r6
    9a26:	60a3      	str	r3, [r4, #8]
    9a28:	6823      	ldr	r3, [r4, #0]
    9a2a:	199e      	adds	r6, r3, r6
    9a2c:	6026      	str	r6, [r4, #0]
    9a2e:	e7da      	b.n	99e6 <__ssputs_r+0x5e>
    9a30:	002a      	movs	r2, r5
    9a32:	0038      	movs	r0, r7
    9a34:	f000 fb5f 	bl	a0f6 <_realloc_r>
    9a38:	1e06      	subs	r6, r0, #0
    9a3a:	d1e0      	bne.n	99fe <__ssputs_r+0x76>
    9a3c:	6921      	ldr	r1, [r4, #16]
    9a3e:	0038      	movs	r0, r7
    9a40:	f7ff fefa 	bl	9838 <_free_r>
    9a44:	e7c7      	b.n	99d6 <__ssputs_r+0x4e>
    9a46:	46c0      	nop			; (mov r8, r8)
    9a48:	fffffb7f 	.word	0xfffffb7f

00009a4c <_svfiprintf_r>:
    9a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a4e:	b09f      	sub	sp, #124	; 0x7c
    9a50:	9002      	str	r0, [sp, #8]
    9a52:	9305      	str	r3, [sp, #20]
    9a54:	898b      	ldrh	r3, [r1, #12]
    9a56:	000f      	movs	r7, r1
    9a58:	0016      	movs	r6, r2
    9a5a:	061b      	lsls	r3, r3, #24
    9a5c:	d511      	bpl.n	9a82 <_svfiprintf_r+0x36>
    9a5e:	690b      	ldr	r3, [r1, #16]
    9a60:	2b00      	cmp	r3, #0
    9a62:	d10e      	bne.n	9a82 <_svfiprintf_r+0x36>
    9a64:	2140      	movs	r1, #64	; 0x40
    9a66:	f7ff ff31 	bl	98cc <_malloc_r>
    9a6a:	6038      	str	r0, [r7, #0]
    9a6c:	6138      	str	r0, [r7, #16]
    9a6e:	2800      	cmp	r0, #0
    9a70:	d105      	bne.n	9a7e <_svfiprintf_r+0x32>
    9a72:	230c      	movs	r3, #12
    9a74:	9a02      	ldr	r2, [sp, #8]
    9a76:	3801      	subs	r0, #1
    9a78:	6013      	str	r3, [r2, #0]
    9a7a:	b01f      	add	sp, #124	; 0x7c
    9a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a7e:	2340      	movs	r3, #64	; 0x40
    9a80:	617b      	str	r3, [r7, #20]
    9a82:	2300      	movs	r3, #0
    9a84:	ad06      	add	r5, sp, #24
    9a86:	616b      	str	r3, [r5, #20]
    9a88:	3320      	adds	r3, #32
    9a8a:	766b      	strb	r3, [r5, #25]
    9a8c:	3310      	adds	r3, #16
    9a8e:	76ab      	strb	r3, [r5, #26]
    9a90:	0034      	movs	r4, r6
    9a92:	7823      	ldrb	r3, [r4, #0]
    9a94:	2b00      	cmp	r3, #0
    9a96:	d147      	bne.n	9b28 <_svfiprintf_r+0xdc>
    9a98:	1ba3      	subs	r3, r4, r6
    9a9a:	9304      	str	r3, [sp, #16]
    9a9c:	d00d      	beq.n	9aba <_svfiprintf_r+0x6e>
    9a9e:	1ba3      	subs	r3, r4, r6
    9aa0:	0032      	movs	r2, r6
    9aa2:	0039      	movs	r1, r7
    9aa4:	9802      	ldr	r0, [sp, #8]
    9aa6:	f7ff ff6f 	bl	9988 <__ssputs_r>
    9aaa:	1c43      	adds	r3, r0, #1
    9aac:	d100      	bne.n	9ab0 <_svfiprintf_r+0x64>
    9aae:	e0b5      	b.n	9c1c <_svfiprintf_r+0x1d0>
    9ab0:	696a      	ldr	r2, [r5, #20]
    9ab2:	9b04      	ldr	r3, [sp, #16]
    9ab4:	4694      	mov	ip, r2
    9ab6:	4463      	add	r3, ip
    9ab8:	616b      	str	r3, [r5, #20]
    9aba:	7823      	ldrb	r3, [r4, #0]
    9abc:	2b00      	cmp	r3, #0
    9abe:	d100      	bne.n	9ac2 <_svfiprintf_r+0x76>
    9ac0:	e0ac      	b.n	9c1c <_svfiprintf_r+0x1d0>
    9ac2:	2201      	movs	r2, #1
    9ac4:	2300      	movs	r3, #0
    9ac6:	4252      	negs	r2, r2
    9ac8:	606a      	str	r2, [r5, #4]
    9aca:	a902      	add	r1, sp, #8
    9acc:	3254      	adds	r2, #84	; 0x54
    9ace:	1852      	adds	r2, r2, r1
    9ad0:	3401      	adds	r4, #1
    9ad2:	602b      	str	r3, [r5, #0]
    9ad4:	60eb      	str	r3, [r5, #12]
    9ad6:	60ab      	str	r3, [r5, #8]
    9ad8:	7013      	strb	r3, [r2, #0]
    9ada:	65ab      	str	r3, [r5, #88]	; 0x58
    9adc:	4e58      	ldr	r6, [pc, #352]	; (9c40 <_svfiprintf_r+0x1f4>)
    9ade:	2205      	movs	r2, #5
    9ae0:	7821      	ldrb	r1, [r4, #0]
    9ae2:	0030      	movs	r0, r6
    9ae4:	f000 fae8 	bl	a0b8 <memchr>
    9ae8:	1c62      	adds	r2, r4, #1
    9aea:	2800      	cmp	r0, #0
    9aec:	d120      	bne.n	9b30 <_svfiprintf_r+0xe4>
    9aee:	6829      	ldr	r1, [r5, #0]
    9af0:	06cb      	lsls	r3, r1, #27
    9af2:	d504      	bpl.n	9afe <_svfiprintf_r+0xb2>
    9af4:	2353      	movs	r3, #83	; 0x53
    9af6:	ae02      	add	r6, sp, #8
    9af8:	3020      	adds	r0, #32
    9afa:	199b      	adds	r3, r3, r6
    9afc:	7018      	strb	r0, [r3, #0]
    9afe:	070b      	lsls	r3, r1, #28
    9b00:	d504      	bpl.n	9b0c <_svfiprintf_r+0xc0>
    9b02:	2353      	movs	r3, #83	; 0x53
    9b04:	202b      	movs	r0, #43	; 0x2b
    9b06:	ae02      	add	r6, sp, #8
    9b08:	199b      	adds	r3, r3, r6
    9b0a:	7018      	strb	r0, [r3, #0]
    9b0c:	7823      	ldrb	r3, [r4, #0]
    9b0e:	2b2a      	cmp	r3, #42	; 0x2a
    9b10:	d016      	beq.n	9b40 <_svfiprintf_r+0xf4>
    9b12:	2000      	movs	r0, #0
    9b14:	210a      	movs	r1, #10
    9b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9b18:	7822      	ldrb	r2, [r4, #0]
    9b1a:	3a30      	subs	r2, #48	; 0x30
    9b1c:	2a09      	cmp	r2, #9
    9b1e:	d955      	bls.n	9bcc <_svfiprintf_r+0x180>
    9b20:	2800      	cmp	r0, #0
    9b22:	d015      	beq.n	9b50 <_svfiprintf_r+0x104>
    9b24:	9309      	str	r3, [sp, #36]	; 0x24
    9b26:	e013      	b.n	9b50 <_svfiprintf_r+0x104>
    9b28:	2b25      	cmp	r3, #37	; 0x25
    9b2a:	d0b5      	beq.n	9a98 <_svfiprintf_r+0x4c>
    9b2c:	3401      	adds	r4, #1
    9b2e:	e7b0      	b.n	9a92 <_svfiprintf_r+0x46>
    9b30:	2301      	movs	r3, #1
    9b32:	1b80      	subs	r0, r0, r6
    9b34:	4083      	lsls	r3, r0
    9b36:	6829      	ldr	r1, [r5, #0]
    9b38:	0014      	movs	r4, r2
    9b3a:	430b      	orrs	r3, r1
    9b3c:	602b      	str	r3, [r5, #0]
    9b3e:	e7cd      	b.n	9adc <_svfiprintf_r+0x90>
    9b40:	9b05      	ldr	r3, [sp, #20]
    9b42:	1d18      	adds	r0, r3, #4
    9b44:	681b      	ldr	r3, [r3, #0]
    9b46:	9005      	str	r0, [sp, #20]
    9b48:	2b00      	cmp	r3, #0
    9b4a:	db39      	blt.n	9bc0 <_svfiprintf_r+0x174>
    9b4c:	9309      	str	r3, [sp, #36]	; 0x24
    9b4e:	0014      	movs	r4, r2
    9b50:	7823      	ldrb	r3, [r4, #0]
    9b52:	2b2e      	cmp	r3, #46	; 0x2e
    9b54:	d10b      	bne.n	9b6e <_svfiprintf_r+0x122>
    9b56:	7863      	ldrb	r3, [r4, #1]
    9b58:	1c62      	adds	r2, r4, #1
    9b5a:	2b2a      	cmp	r3, #42	; 0x2a
    9b5c:	d13e      	bne.n	9bdc <_svfiprintf_r+0x190>
    9b5e:	9b05      	ldr	r3, [sp, #20]
    9b60:	3402      	adds	r4, #2
    9b62:	1d1a      	adds	r2, r3, #4
    9b64:	681b      	ldr	r3, [r3, #0]
    9b66:	9205      	str	r2, [sp, #20]
    9b68:	2b00      	cmp	r3, #0
    9b6a:	db34      	blt.n	9bd6 <_svfiprintf_r+0x18a>
    9b6c:	9307      	str	r3, [sp, #28]
    9b6e:	4e35      	ldr	r6, [pc, #212]	; (9c44 <_svfiprintf_r+0x1f8>)
    9b70:	7821      	ldrb	r1, [r4, #0]
    9b72:	2203      	movs	r2, #3
    9b74:	0030      	movs	r0, r6
    9b76:	f000 fa9f 	bl	a0b8 <memchr>
    9b7a:	2800      	cmp	r0, #0
    9b7c:	d006      	beq.n	9b8c <_svfiprintf_r+0x140>
    9b7e:	2340      	movs	r3, #64	; 0x40
    9b80:	1b80      	subs	r0, r0, r6
    9b82:	4083      	lsls	r3, r0
    9b84:	682a      	ldr	r2, [r5, #0]
    9b86:	3401      	adds	r4, #1
    9b88:	4313      	orrs	r3, r2
    9b8a:	602b      	str	r3, [r5, #0]
    9b8c:	7821      	ldrb	r1, [r4, #0]
    9b8e:	2206      	movs	r2, #6
    9b90:	482d      	ldr	r0, [pc, #180]	; (9c48 <_svfiprintf_r+0x1fc>)
    9b92:	1c66      	adds	r6, r4, #1
    9b94:	7629      	strb	r1, [r5, #24]
    9b96:	f000 fa8f 	bl	a0b8 <memchr>
    9b9a:	2800      	cmp	r0, #0
    9b9c:	d046      	beq.n	9c2c <_svfiprintf_r+0x1e0>
    9b9e:	4b2b      	ldr	r3, [pc, #172]	; (9c4c <_svfiprintf_r+0x200>)
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d12f      	bne.n	9c04 <_svfiprintf_r+0x1b8>
    9ba4:	6829      	ldr	r1, [r5, #0]
    9ba6:	9b05      	ldr	r3, [sp, #20]
    9ba8:	2207      	movs	r2, #7
    9baa:	05c9      	lsls	r1, r1, #23
    9bac:	d528      	bpl.n	9c00 <_svfiprintf_r+0x1b4>
    9bae:	189b      	adds	r3, r3, r2
    9bb0:	4393      	bics	r3, r2
    9bb2:	3308      	adds	r3, #8
    9bb4:	9305      	str	r3, [sp, #20]
    9bb6:	696b      	ldr	r3, [r5, #20]
    9bb8:	9a03      	ldr	r2, [sp, #12]
    9bba:	189b      	adds	r3, r3, r2
    9bbc:	616b      	str	r3, [r5, #20]
    9bbe:	e767      	b.n	9a90 <_svfiprintf_r+0x44>
    9bc0:	425b      	negs	r3, r3
    9bc2:	60eb      	str	r3, [r5, #12]
    9bc4:	2302      	movs	r3, #2
    9bc6:	430b      	orrs	r3, r1
    9bc8:	602b      	str	r3, [r5, #0]
    9bca:	e7c0      	b.n	9b4e <_svfiprintf_r+0x102>
    9bcc:	434b      	muls	r3, r1
    9bce:	3401      	adds	r4, #1
    9bd0:	189b      	adds	r3, r3, r2
    9bd2:	2001      	movs	r0, #1
    9bd4:	e7a0      	b.n	9b18 <_svfiprintf_r+0xcc>
    9bd6:	2301      	movs	r3, #1
    9bd8:	425b      	negs	r3, r3
    9bda:	e7c7      	b.n	9b6c <_svfiprintf_r+0x120>
    9bdc:	2300      	movs	r3, #0
    9bde:	0014      	movs	r4, r2
    9be0:	200a      	movs	r0, #10
    9be2:	001a      	movs	r2, r3
    9be4:	606b      	str	r3, [r5, #4]
    9be6:	7821      	ldrb	r1, [r4, #0]
    9be8:	3930      	subs	r1, #48	; 0x30
    9bea:	2909      	cmp	r1, #9
    9bec:	d903      	bls.n	9bf6 <_svfiprintf_r+0x1aa>
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d0bd      	beq.n	9b6e <_svfiprintf_r+0x122>
    9bf2:	9207      	str	r2, [sp, #28]
    9bf4:	e7bb      	b.n	9b6e <_svfiprintf_r+0x122>
    9bf6:	4342      	muls	r2, r0
    9bf8:	3401      	adds	r4, #1
    9bfa:	1852      	adds	r2, r2, r1
    9bfc:	2301      	movs	r3, #1
    9bfe:	e7f2      	b.n	9be6 <_svfiprintf_r+0x19a>
    9c00:	3307      	adds	r3, #7
    9c02:	e7d5      	b.n	9bb0 <_svfiprintf_r+0x164>
    9c04:	ab05      	add	r3, sp, #20
    9c06:	9300      	str	r3, [sp, #0]
    9c08:	003a      	movs	r2, r7
    9c0a:	4b11      	ldr	r3, [pc, #68]	; (9c50 <_svfiprintf_r+0x204>)
    9c0c:	0029      	movs	r1, r5
    9c0e:	9802      	ldr	r0, [sp, #8]
    9c10:	e000      	b.n	9c14 <_svfiprintf_r+0x1c8>
    9c12:	bf00      	nop
    9c14:	9003      	str	r0, [sp, #12]
    9c16:	9b03      	ldr	r3, [sp, #12]
    9c18:	3301      	adds	r3, #1
    9c1a:	d1cc      	bne.n	9bb6 <_svfiprintf_r+0x16a>
    9c1c:	89bb      	ldrh	r3, [r7, #12]
    9c1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9c20:	065b      	lsls	r3, r3, #25
    9c22:	d400      	bmi.n	9c26 <_svfiprintf_r+0x1da>
    9c24:	e729      	b.n	9a7a <_svfiprintf_r+0x2e>
    9c26:	2001      	movs	r0, #1
    9c28:	4240      	negs	r0, r0
    9c2a:	e726      	b.n	9a7a <_svfiprintf_r+0x2e>
    9c2c:	ab05      	add	r3, sp, #20
    9c2e:	9300      	str	r3, [sp, #0]
    9c30:	003a      	movs	r2, r7
    9c32:	4b07      	ldr	r3, [pc, #28]	; (9c50 <_svfiprintf_r+0x204>)
    9c34:	0029      	movs	r1, r5
    9c36:	9802      	ldr	r0, [sp, #8]
    9c38:	f000 f87a 	bl	9d30 <_printf_i>
    9c3c:	e7ea      	b.n	9c14 <_svfiprintf_r+0x1c8>
    9c3e:	46c0      	nop			; (mov r8, r8)
    9c40:	0000a2a0 	.word	0x0000a2a0
    9c44:	0000a2a6 	.word	0x0000a2a6
    9c48:	0000a2aa 	.word	0x0000a2aa
    9c4c:	00000000 	.word	0x00000000
    9c50:	00009989 	.word	0x00009989

00009c54 <_printf_common>:
    9c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9c56:	0015      	movs	r5, r2
    9c58:	9301      	str	r3, [sp, #4]
    9c5a:	688a      	ldr	r2, [r1, #8]
    9c5c:	690b      	ldr	r3, [r1, #16]
    9c5e:	9000      	str	r0, [sp, #0]
    9c60:	000c      	movs	r4, r1
    9c62:	4293      	cmp	r3, r2
    9c64:	da00      	bge.n	9c68 <_printf_common+0x14>
    9c66:	0013      	movs	r3, r2
    9c68:	0022      	movs	r2, r4
    9c6a:	602b      	str	r3, [r5, #0]
    9c6c:	3243      	adds	r2, #67	; 0x43
    9c6e:	7812      	ldrb	r2, [r2, #0]
    9c70:	2a00      	cmp	r2, #0
    9c72:	d001      	beq.n	9c78 <_printf_common+0x24>
    9c74:	3301      	adds	r3, #1
    9c76:	602b      	str	r3, [r5, #0]
    9c78:	6823      	ldr	r3, [r4, #0]
    9c7a:	069b      	lsls	r3, r3, #26
    9c7c:	d502      	bpl.n	9c84 <_printf_common+0x30>
    9c7e:	682b      	ldr	r3, [r5, #0]
    9c80:	3302      	adds	r3, #2
    9c82:	602b      	str	r3, [r5, #0]
    9c84:	2706      	movs	r7, #6
    9c86:	6823      	ldr	r3, [r4, #0]
    9c88:	401f      	ands	r7, r3
    9c8a:	d027      	beq.n	9cdc <_printf_common+0x88>
    9c8c:	0023      	movs	r3, r4
    9c8e:	3343      	adds	r3, #67	; 0x43
    9c90:	781b      	ldrb	r3, [r3, #0]
    9c92:	1e5a      	subs	r2, r3, #1
    9c94:	4193      	sbcs	r3, r2
    9c96:	6822      	ldr	r2, [r4, #0]
    9c98:	0692      	lsls	r2, r2, #26
    9c9a:	d430      	bmi.n	9cfe <_printf_common+0xaa>
    9c9c:	0022      	movs	r2, r4
    9c9e:	9901      	ldr	r1, [sp, #4]
    9ca0:	3243      	adds	r2, #67	; 0x43
    9ca2:	9800      	ldr	r0, [sp, #0]
    9ca4:	9e08      	ldr	r6, [sp, #32]
    9ca6:	47b0      	blx	r6
    9ca8:	1c43      	adds	r3, r0, #1
    9caa:	d025      	beq.n	9cf8 <_printf_common+0xa4>
    9cac:	2306      	movs	r3, #6
    9cae:	6820      	ldr	r0, [r4, #0]
    9cb0:	682a      	ldr	r2, [r5, #0]
    9cb2:	68e1      	ldr	r1, [r4, #12]
    9cb4:	4003      	ands	r3, r0
    9cb6:	2500      	movs	r5, #0
    9cb8:	2b04      	cmp	r3, #4
    9cba:	d103      	bne.n	9cc4 <_printf_common+0x70>
    9cbc:	1a8d      	subs	r5, r1, r2
    9cbe:	43eb      	mvns	r3, r5
    9cc0:	17db      	asrs	r3, r3, #31
    9cc2:	401d      	ands	r5, r3
    9cc4:	68a3      	ldr	r3, [r4, #8]
    9cc6:	6922      	ldr	r2, [r4, #16]
    9cc8:	4293      	cmp	r3, r2
    9cca:	dd01      	ble.n	9cd0 <_printf_common+0x7c>
    9ccc:	1a9b      	subs	r3, r3, r2
    9cce:	18ed      	adds	r5, r5, r3
    9cd0:	2700      	movs	r7, #0
    9cd2:	42bd      	cmp	r5, r7
    9cd4:	d120      	bne.n	9d18 <_printf_common+0xc4>
    9cd6:	2000      	movs	r0, #0
    9cd8:	e010      	b.n	9cfc <_printf_common+0xa8>
    9cda:	3701      	adds	r7, #1
    9cdc:	68e3      	ldr	r3, [r4, #12]
    9cde:	682a      	ldr	r2, [r5, #0]
    9ce0:	1a9b      	subs	r3, r3, r2
    9ce2:	429f      	cmp	r7, r3
    9ce4:	dad2      	bge.n	9c8c <_printf_common+0x38>
    9ce6:	0022      	movs	r2, r4
    9ce8:	2301      	movs	r3, #1
    9cea:	3219      	adds	r2, #25
    9cec:	9901      	ldr	r1, [sp, #4]
    9cee:	9800      	ldr	r0, [sp, #0]
    9cf0:	9e08      	ldr	r6, [sp, #32]
    9cf2:	47b0      	blx	r6
    9cf4:	1c43      	adds	r3, r0, #1
    9cf6:	d1f0      	bne.n	9cda <_printf_common+0x86>
    9cf8:	2001      	movs	r0, #1
    9cfa:	4240      	negs	r0, r0
    9cfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9cfe:	2030      	movs	r0, #48	; 0x30
    9d00:	18e1      	adds	r1, r4, r3
    9d02:	3143      	adds	r1, #67	; 0x43
    9d04:	7008      	strb	r0, [r1, #0]
    9d06:	0021      	movs	r1, r4
    9d08:	1c5a      	adds	r2, r3, #1
    9d0a:	3145      	adds	r1, #69	; 0x45
    9d0c:	7809      	ldrb	r1, [r1, #0]
    9d0e:	18a2      	adds	r2, r4, r2
    9d10:	3243      	adds	r2, #67	; 0x43
    9d12:	3302      	adds	r3, #2
    9d14:	7011      	strb	r1, [r2, #0]
    9d16:	e7c1      	b.n	9c9c <_printf_common+0x48>
    9d18:	0022      	movs	r2, r4
    9d1a:	2301      	movs	r3, #1
    9d1c:	321a      	adds	r2, #26
    9d1e:	9901      	ldr	r1, [sp, #4]
    9d20:	9800      	ldr	r0, [sp, #0]
    9d22:	9e08      	ldr	r6, [sp, #32]
    9d24:	47b0      	blx	r6
    9d26:	1c43      	adds	r3, r0, #1
    9d28:	d0e6      	beq.n	9cf8 <_printf_common+0xa4>
    9d2a:	3701      	adds	r7, #1
    9d2c:	e7d1      	b.n	9cd2 <_printf_common+0x7e>
	...

00009d30 <_printf_i>:
    9d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d32:	b08b      	sub	sp, #44	; 0x2c
    9d34:	9206      	str	r2, [sp, #24]
    9d36:	000a      	movs	r2, r1
    9d38:	3243      	adds	r2, #67	; 0x43
    9d3a:	9307      	str	r3, [sp, #28]
    9d3c:	9005      	str	r0, [sp, #20]
    9d3e:	9204      	str	r2, [sp, #16]
    9d40:	7e0a      	ldrb	r2, [r1, #24]
    9d42:	000c      	movs	r4, r1
    9d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d46:	2a6e      	cmp	r2, #110	; 0x6e
    9d48:	d100      	bne.n	9d4c <_printf_i+0x1c>
    9d4a:	e08f      	b.n	9e6c <_printf_i+0x13c>
    9d4c:	d817      	bhi.n	9d7e <_printf_i+0x4e>
    9d4e:	2a63      	cmp	r2, #99	; 0x63
    9d50:	d02c      	beq.n	9dac <_printf_i+0x7c>
    9d52:	d808      	bhi.n	9d66 <_printf_i+0x36>
    9d54:	2a00      	cmp	r2, #0
    9d56:	d100      	bne.n	9d5a <_printf_i+0x2a>
    9d58:	e099      	b.n	9e8e <_printf_i+0x15e>
    9d5a:	2a58      	cmp	r2, #88	; 0x58
    9d5c:	d054      	beq.n	9e08 <_printf_i+0xd8>
    9d5e:	0026      	movs	r6, r4
    9d60:	3642      	adds	r6, #66	; 0x42
    9d62:	7032      	strb	r2, [r6, #0]
    9d64:	e029      	b.n	9dba <_printf_i+0x8a>
    9d66:	2a64      	cmp	r2, #100	; 0x64
    9d68:	d001      	beq.n	9d6e <_printf_i+0x3e>
    9d6a:	2a69      	cmp	r2, #105	; 0x69
    9d6c:	d1f7      	bne.n	9d5e <_printf_i+0x2e>
    9d6e:	6821      	ldr	r1, [r4, #0]
    9d70:	681a      	ldr	r2, [r3, #0]
    9d72:	0608      	lsls	r0, r1, #24
    9d74:	d523      	bpl.n	9dbe <_printf_i+0x8e>
    9d76:	1d11      	adds	r1, r2, #4
    9d78:	6019      	str	r1, [r3, #0]
    9d7a:	6815      	ldr	r5, [r2, #0]
    9d7c:	e025      	b.n	9dca <_printf_i+0x9a>
    9d7e:	2a73      	cmp	r2, #115	; 0x73
    9d80:	d100      	bne.n	9d84 <_printf_i+0x54>
    9d82:	e088      	b.n	9e96 <_printf_i+0x166>
    9d84:	d808      	bhi.n	9d98 <_printf_i+0x68>
    9d86:	2a6f      	cmp	r2, #111	; 0x6f
    9d88:	d029      	beq.n	9dde <_printf_i+0xae>
    9d8a:	2a70      	cmp	r2, #112	; 0x70
    9d8c:	d1e7      	bne.n	9d5e <_printf_i+0x2e>
    9d8e:	2220      	movs	r2, #32
    9d90:	6809      	ldr	r1, [r1, #0]
    9d92:	430a      	orrs	r2, r1
    9d94:	6022      	str	r2, [r4, #0]
    9d96:	e003      	b.n	9da0 <_printf_i+0x70>
    9d98:	2a75      	cmp	r2, #117	; 0x75
    9d9a:	d020      	beq.n	9dde <_printf_i+0xae>
    9d9c:	2a78      	cmp	r2, #120	; 0x78
    9d9e:	d1de      	bne.n	9d5e <_printf_i+0x2e>
    9da0:	0022      	movs	r2, r4
    9da2:	2178      	movs	r1, #120	; 0x78
    9da4:	3245      	adds	r2, #69	; 0x45
    9da6:	7011      	strb	r1, [r2, #0]
    9da8:	4a6c      	ldr	r2, [pc, #432]	; (9f5c <_printf_i+0x22c>)
    9daa:	e030      	b.n	9e0e <_printf_i+0xde>
    9dac:	000e      	movs	r6, r1
    9dae:	681a      	ldr	r2, [r3, #0]
    9db0:	3642      	adds	r6, #66	; 0x42
    9db2:	1d11      	adds	r1, r2, #4
    9db4:	6019      	str	r1, [r3, #0]
    9db6:	6813      	ldr	r3, [r2, #0]
    9db8:	7033      	strb	r3, [r6, #0]
    9dba:	2301      	movs	r3, #1
    9dbc:	e079      	b.n	9eb2 <_printf_i+0x182>
    9dbe:	0649      	lsls	r1, r1, #25
    9dc0:	d5d9      	bpl.n	9d76 <_printf_i+0x46>
    9dc2:	1d11      	adds	r1, r2, #4
    9dc4:	6019      	str	r1, [r3, #0]
    9dc6:	2300      	movs	r3, #0
    9dc8:	5ed5      	ldrsh	r5, [r2, r3]
    9dca:	2d00      	cmp	r5, #0
    9dcc:	da03      	bge.n	9dd6 <_printf_i+0xa6>
    9dce:	232d      	movs	r3, #45	; 0x2d
    9dd0:	9a04      	ldr	r2, [sp, #16]
    9dd2:	426d      	negs	r5, r5
    9dd4:	7013      	strb	r3, [r2, #0]
    9dd6:	4b62      	ldr	r3, [pc, #392]	; (9f60 <_printf_i+0x230>)
    9dd8:	270a      	movs	r7, #10
    9dda:	9303      	str	r3, [sp, #12]
    9ddc:	e02f      	b.n	9e3e <_printf_i+0x10e>
    9dde:	6820      	ldr	r0, [r4, #0]
    9de0:	6819      	ldr	r1, [r3, #0]
    9de2:	0605      	lsls	r5, r0, #24
    9de4:	d503      	bpl.n	9dee <_printf_i+0xbe>
    9de6:	1d08      	adds	r0, r1, #4
    9de8:	6018      	str	r0, [r3, #0]
    9dea:	680d      	ldr	r5, [r1, #0]
    9dec:	e005      	b.n	9dfa <_printf_i+0xca>
    9dee:	0640      	lsls	r0, r0, #25
    9df0:	d5f9      	bpl.n	9de6 <_printf_i+0xb6>
    9df2:	680d      	ldr	r5, [r1, #0]
    9df4:	1d08      	adds	r0, r1, #4
    9df6:	6018      	str	r0, [r3, #0]
    9df8:	b2ad      	uxth	r5, r5
    9dfa:	4b59      	ldr	r3, [pc, #356]	; (9f60 <_printf_i+0x230>)
    9dfc:	2708      	movs	r7, #8
    9dfe:	9303      	str	r3, [sp, #12]
    9e00:	2a6f      	cmp	r2, #111	; 0x6f
    9e02:	d018      	beq.n	9e36 <_printf_i+0x106>
    9e04:	270a      	movs	r7, #10
    9e06:	e016      	b.n	9e36 <_printf_i+0x106>
    9e08:	3145      	adds	r1, #69	; 0x45
    9e0a:	700a      	strb	r2, [r1, #0]
    9e0c:	4a54      	ldr	r2, [pc, #336]	; (9f60 <_printf_i+0x230>)
    9e0e:	9203      	str	r2, [sp, #12]
    9e10:	681a      	ldr	r2, [r3, #0]
    9e12:	6821      	ldr	r1, [r4, #0]
    9e14:	1d10      	adds	r0, r2, #4
    9e16:	6018      	str	r0, [r3, #0]
    9e18:	6815      	ldr	r5, [r2, #0]
    9e1a:	0608      	lsls	r0, r1, #24
    9e1c:	d522      	bpl.n	9e64 <_printf_i+0x134>
    9e1e:	07cb      	lsls	r3, r1, #31
    9e20:	d502      	bpl.n	9e28 <_printf_i+0xf8>
    9e22:	2320      	movs	r3, #32
    9e24:	4319      	orrs	r1, r3
    9e26:	6021      	str	r1, [r4, #0]
    9e28:	2710      	movs	r7, #16
    9e2a:	2d00      	cmp	r5, #0
    9e2c:	d103      	bne.n	9e36 <_printf_i+0x106>
    9e2e:	2320      	movs	r3, #32
    9e30:	6822      	ldr	r2, [r4, #0]
    9e32:	439a      	bics	r2, r3
    9e34:	6022      	str	r2, [r4, #0]
    9e36:	0023      	movs	r3, r4
    9e38:	2200      	movs	r2, #0
    9e3a:	3343      	adds	r3, #67	; 0x43
    9e3c:	701a      	strb	r2, [r3, #0]
    9e3e:	6863      	ldr	r3, [r4, #4]
    9e40:	60a3      	str	r3, [r4, #8]
    9e42:	2b00      	cmp	r3, #0
    9e44:	db5c      	blt.n	9f00 <_printf_i+0x1d0>
    9e46:	2204      	movs	r2, #4
    9e48:	6821      	ldr	r1, [r4, #0]
    9e4a:	4391      	bics	r1, r2
    9e4c:	6021      	str	r1, [r4, #0]
    9e4e:	2d00      	cmp	r5, #0
    9e50:	d158      	bne.n	9f04 <_printf_i+0x1d4>
    9e52:	9e04      	ldr	r6, [sp, #16]
    9e54:	2b00      	cmp	r3, #0
    9e56:	d064      	beq.n	9f22 <_printf_i+0x1f2>
    9e58:	0026      	movs	r6, r4
    9e5a:	9b03      	ldr	r3, [sp, #12]
    9e5c:	3642      	adds	r6, #66	; 0x42
    9e5e:	781b      	ldrb	r3, [r3, #0]
    9e60:	7033      	strb	r3, [r6, #0]
    9e62:	e05e      	b.n	9f22 <_printf_i+0x1f2>
    9e64:	0648      	lsls	r0, r1, #25
    9e66:	d5da      	bpl.n	9e1e <_printf_i+0xee>
    9e68:	b2ad      	uxth	r5, r5
    9e6a:	e7d8      	b.n	9e1e <_printf_i+0xee>
    9e6c:	6809      	ldr	r1, [r1, #0]
    9e6e:	681a      	ldr	r2, [r3, #0]
    9e70:	0608      	lsls	r0, r1, #24
    9e72:	d505      	bpl.n	9e80 <_printf_i+0x150>
    9e74:	1d11      	adds	r1, r2, #4
    9e76:	6019      	str	r1, [r3, #0]
    9e78:	6813      	ldr	r3, [r2, #0]
    9e7a:	6962      	ldr	r2, [r4, #20]
    9e7c:	601a      	str	r2, [r3, #0]
    9e7e:	e006      	b.n	9e8e <_printf_i+0x15e>
    9e80:	0649      	lsls	r1, r1, #25
    9e82:	d5f7      	bpl.n	9e74 <_printf_i+0x144>
    9e84:	1d11      	adds	r1, r2, #4
    9e86:	6019      	str	r1, [r3, #0]
    9e88:	6813      	ldr	r3, [r2, #0]
    9e8a:	8aa2      	ldrh	r2, [r4, #20]
    9e8c:	801a      	strh	r2, [r3, #0]
    9e8e:	2300      	movs	r3, #0
    9e90:	9e04      	ldr	r6, [sp, #16]
    9e92:	6123      	str	r3, [r4, #16]
    9e94:	e054      	b.n	9f40 <_printf_i+0x210>
    9e96:	681a      	ldr	r2, [r3, #0]
    9e98:	1d11      	adds	r1, r2, #4
    9e9a:	6019      	str	r1, [r3, #0]
    9e9c:	6816      	ldr	r6, [r2, #0]
    9e9e:	2100      	movs	r1, #0
    9ea0:	6862      	ldr	r2, [r4, #4]
    9ea2:	0030      	movs	r0, r6
    9ea4:	f000 f908 	bl	a0b8 <memchr>
    9ea8:	2800      	cmp	r0, #0
    9eaa:	d001      	beq.n	9eb0 <_printf_i+0x180>
    9eac:	1b80      	subs	r0, r0, r6
    9eae:	6060      	str	r0, [r4, #4]
    9eb0:	6863      	ldr	r3, [r4, #4]
    9eb2:	6123      	str	r3, [r4, #16]
    9eb4:	2300      	movs	r3, #0
    9eb6:	9a04      	ldr	r2, [sp, #16]
    9eb8:	7013      	strb	r3, [r2, #0]
    9eba:	e041      	b.n	9f40 <_printf_i+0x210>
    9ebc:	6923      	ldr	r3, [r4, #16]
    9ebe:	0032      	movs	r2, r6
    9ec0:	9906      	ldr	r1, [sp, #24]
    9ec2:	9805      	ldr	r0, [sp, #20]
    9ec4:	9d07      	ldr	r5, [sp, #28]
    9ec6:	47a8      	blx	r5
    9ec8:	1c43      	adds	r3, r0, #1
    9eca:	d043      	beq.n	9f54 <_printf_i+0x224>
    9ecc:	6823      	ldr	r3, [r4, #0]
    9ece:	2500      	movs	r5, #0
    9ed0:	079b      	lsls	r3, r3, #30
    9ed2:	d40f      	bmi.n	9ef4 <_printf_i+0x1c4>
    9ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ed6:	68e0      	ldr	r0, [r4, #12]
    9ed8:	4298      	cmp	r0, r3
    9eda:	da3d      	bge.n	9f58 <_printf_i+0x228>
    9edc:	0018      	movs	r0, r3
    9ede:	e03b      	b.n	9f58 <_printf_i+0x228>
    9ee0:	0022      	movs	r2, r4
    9ee2:	2301      	movs	r3, #1
    9ee4:	3219      	adds	r2, #25
    9ee6:	9906      	ldr	r1, [sp, #24]
    9ee8:	9805      	ldr	r0, [sp, #20]
    9eea:	9e07      	ldr	r6, [sp, #28]
    9eec:	47b0      	blx	r6
    9eee:	1c43      	adds	r3, r0, #1
    9ef0:	d030      	beq.n	9f54 <_printf_i+0x224>
    9ef2:	3501      	adds	r5, #1
    9ef4:	68e3      	ldr	r3, [r4, #12]
    9ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ef8:	1a9b      	subs	r3, r3, r2
    9efa:	429d      	cmp	r5, r3
    9efc:	dbf0      	blt.n	9ee0 <_printf_i+0x1b0>
    9efe:	e7e9      	b.n	9ed4 <_printf_i+0x1a4>
    9f00:	2d00      	cmp	r5, #0
    9f02:	d0a9      	beq.n	9e58 <_printf_i+0x128>
    9f04:	9e04      	ldr	r6, [sp, #16]
    9f06:	0028      	movs	r0, r5
    9f08:	0039      	movs	r1, r7
    9f0a:	f7ff f863 	bl	8fd4 <__aeabi_uidivmod>
    9f0e:	9b03      	ldr	r3, [sp, #12]
    9f10:	3e01      	subs	r6, #1
    9f12:	5c5b      	ldrb	r3, [r3, r1]
    9f14:	0028      	movs	r0, r5
    9f16:	7033      	strb	r3, [r6, #0]
    9f18:	0039      	movs	r1, r7
    9f1a:	f7fe ffd5 	bl	8ec8 <__udivsi3>
    9f1e:	1e05      	subs	r5, r0, #0
    9f20:	d1f1      	bne.n	9f06 <_printf_i+0x1d6>
    9f22:	2f08      	cmp	r7, #8
    9f24:	d109      	bne.n	9f3a <_printf_i+0x20a>
    9f26:	6823      	ldr	r3, [r4, #0]
    9f28:	07db      	lsls	r3, r3, #31
    9f2a:	d506      	bpl.n	9f3a <_printf_i+0x20a>
    9f2c:	6863      	ldr	r3, [r4, #4]
    9f2e:	6922      	ldr	r2, [r4, #16]
    9f30:	4293      	cmp	r3, r2
    9f32:	dc02      	bgt.n	9f3a <_printf_i+0x20a>
    9f34:	2330      	movs	r3, #48	; 0x30
    9f36:	3e01      	subs	r6, #1
    9f38:	7033      	strb	r3, [r6, #0]
    9f3a:	9b04      	ldr	r3, [sp, #16]
    9f3c:	1b9b      	subs	r3, r3, r6
    9f3e:	6123      	str	r3, [r4, #16]
    9f40:	9b07      	ldr	r3, [sp, #28]
    9f42:	aa09      	add	r2, sp, #36	; 0x24
    9f44:	9300      	str	r3, [sp, #0]
    9f46:	0021      	movs	r1, r4
    9f48:	9b06      	ldr	r3, [sp, #24]
    9f4a:	9805      	ldr	r0, [sp, #20]
    9f4c:	f7ff fe82 	bl	9c54 <_printf_common>
    9f50:	1c43      	adds	r3, r0, #1
    9f52:	d1b3      	bne.n	9ebc <_printf_i+0x18c>
    9f54:	2001      	movs	r0, #1
    9f56:	4240      	negs	r0, r0
    9f58:	b00b      	add	sp, #44	; 0x2c
    9f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f5c:	0000a2c2 	.word	0x0000a2c2
    9f60:	0000a2b1 	.word	0x0000a2b1

00009f64 <_sbrk_r>:
    9f64:	2300      	movs	r3, #0
    9f66:	b570      	push	{r4, r5, r6, lr}
    9f68:	4c06      	ldr	r4, [pc, #24]	; (9f84 <_sbrk_r+0x20>)
    9f6a:	0005      	movs	r5, r0
    9f6c:	0008      	movs	r0, r1
    9f6e:	6023      	str	r3, [r4, #0]
    9f70:	f7f8 f908 	bl	2184 <_sbrk>
    9f74:	1c43      	adds	r3, r0, #1
    9f76:	d103      	bne.n	9f80 <_sbrk_r+0x1c>
    9f78:	6823      	ldr	r3, [r4, #0]
    9f7a:	2b00      	cmp	r3, #0
    9f7c:	d000      	beq.n	9f80 <_sbrk_r+0x1c>
    9f7e:	602b      	str	r3, [r5, #0]
    9f80:	bd70      	pop	{r4, r5, r6, pc}
    9f82:	46c0      	nop			; (mov r8, r8)
    9f84:	20002cf8 	.word	0x20002cf8

00009f88 <__sread>:
    9f88:	b570      	push	{r4, r5, r6, lr}
    9f8a:	000c      	movs	r4, r1
    9f8c:	250e      	movs	r5, #14
    9f8e:	5f49      	ldrsh	r1, [r1, r5]
    9f90:	f000 f8d8 	bl	a144 <_read_r>
    9f94:	2800      	cmp	r0, #0
    9f96:	db03      	blt.n	9fa0 <__sread+0x18>
    9f98:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9f9a:	181b      	adds	r3, r3, r0
    9f9c:	6563      	str	r3, [r4, #84]	; 0x54
    9f9e:	bd70      	pop	{r4, r5, r6, pc}
    9fa0:	89a3      	ldrh	r3, [r4, #12]
    9fa2:	4a02      	ldr	r2, [pc, #8]	; (9fac <__sread+0x24>)
    9fa4:	4013      	ands	r3, r2
    9fa6:	81a3      	strh	r3, [r4, #12]
    9fa8:	e7f9      	b.n	9f9e <__sread+0x16>
    9faa:	46c0      	nop			; (mov r8, r8)
    9fac:	ffffefff 	.word	0xffffefff

00009fb0 <__swrite>:
    9fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fb2:	001f      	movs	r7, r3
    9fb4:	898b      	ldrh	r3, [r1, #12]
    9fb6:	0005      	movs	r5, r0
    9fb8:	000c      	movs	r4, r1
    9fba:	0016      	movs	r6, r2
    9fbc:	05db      	lsls	r3, r3, #23
    9fbe:	d505      	bpl.n	9fcc <__swrite+0x1c>
    9fc0:	230e      	movs	r3, #14
    9fc2:	5ec9      	ldrsh	r1, [r1, r3]
    9fc4:	2200      	movs	r2, #0
    9fc6:	2302      	movs	r3, #2
    9fc8:	f000 f862 	bl	a090 <_lseek_r>
    9fcc:	89a3      	ldrh	r3, [r4, #12]
    9fce:	4a05      	ldr	r2, [pc, #20]	; (9fe4 <__swrite+0x34>)
    9fd0:	0028      	movs	r0, r5
    9fd2:	4013      	ands	r3, r2
    9fd4:	81a3      	strh	r3, [r4, #12]
    9fd6:	0032      	movs	r2, r6
    9fd8:	230e      	movs	r3, #14
    9fda:	5ee1      	ldrsh	r1, [r4, r3]
    9fdc:	003b      	movs	r3, r7
    9fde:	f000 f81f 	bl	a020 <_write_r>
    9fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fe4:	ffffefff 	.word	0xffffefff

00009fe8 <__sseek>:
    9fe8:	b570      	push	{r4, r5, r6, lr}
    9fea:	000c      	movs	r4, r1
    9fec:	250e      	movs	r5, #14
    9fee:	5f49      	ldrsh	r1, [r1, r5]
    9ff0:	f000 f84e 	bl	a090 <_lseek_r>
    9ff4:	89a3      	ldrh	r3, [r4, #12]
    9ff6:	1c42      	adds	r2, r0, #1
    9ff8:	d103      	bne.n	a002 <__sseek+0x1a>
    9ffa:	4a05      	ldr	r2, [pc, #20]	; (a010 <__sseek+0x28>)
    9ffc:	4013      	ands	r3, r2
    9ffe:	81a3      	strh	r3, [r4, #12]
    a000:	bd70      	pop	{r4, r5, r6, pc}
    a002:	2280      	movs	r2, #128	; 0x80
    a004:	0152      	lsls	r2, r2, #5
    a006:	4313      	orrs	r3, r2
    a008:	81a3      	strh	r3, [r4, #12]
    a00a:	6560      	str	r0, [r4, #84]	; 0x54
    a00c:	e7f8      	b.n	a000 <__sseek+0x18>
    a00e:	46c0      	nop			; (mov r8, r8)
    a010:	ffffefff 	.word	0xffffefff

0000a014 <__sclose>:
    a014:	b510      	push	{r4, lr}
    a016:	230e      	movs	r3, #14
    a018:	5ec9      	ldrsh	r1, [r1, r3]
    a01a:	f000 f815 	bl	a048 <_close_r>
    a01e:	bd10      	pop	{r4, pc}

0000a020 <_write_r>:
    a020:	b570      	push	{r4, r5, r6, lr}
    a022:	0005      	movs	r5, r0
    a024:	0008      	movs	r0, r1
    a026:	0011      	movs	r1, r2
    a028:	2200      	movs	r2, #0
    a02a:	4c06      	ldr	r4, [pc, #24]	; (a044 <_write_r+0x24>)
    a02c:	6022      	str	r2, [r4, #0]
    a02e:	001a      	movs	r2, r3
    a030:	f7f8 f880 	bl	2134 <_write>
    a034:	1c43      	adds	r3, r0, #1
    a036:	d103      	bne.n	a040 <_write_r+0x20>
    a038:	6823      	ldr	r3, [r4, #0]
    a03a:	2b00      	cmp	r3, #0
    a03c:	d000      	beq.n	a040 <_write_r+0x20>
    a03e:	602b      	str	r3, [r5, #0]
    a040:	bd70      	pop	{r4, r5, r6, pc}
    a042:	46c0      	nop			; (mov r8, r8)
    a044:	20002cf8 	.word	0x20002cf8

0000a048 <_close_r>:
    a048:	2300      	movs	r3, #0
    a04a:	b570      	push	{r4, r5, r6, lr}
    a04c:	4c06      	ldr	r4, [pc, #24]	; (a068 <_close_r+0x20>)
    a04e:	0005      	movs	r5, r0
    a050:	0008      	movs	r0, r1
    a052:	6023      	str	r3, [r4, #0]
    a054:	f7f8 f8a8 	bl	21a8 <_close>
    a058:	1c43      	adds	r3, r0, #1
    a05a:	d103      	bne.n	a064 <_close_r+0x1c>
    a05c:	6823      	ldr	r3, [r4, #0]
    a05e:	2b00      	cmp	r3, #0
    a060:	d000      	beq.n	a064 <_close_r+0x1c>
    a062:	602b      	str	r3, [r5, #0]
    a064:	bd70      	pop	{r4, r5, r6, pc}
    a066:	46c0      	nop			; (mov r8, r8)
    a068:	20002cf8 	.word	0x20002cf8

0000a06c <_fstat_r>:
    a06c:	2300      	movs	r3, #0
    a06e:	b570      	push	{r4, r5, r6, lr}
    a070:	4c06      	ldr	r4, [pc, #24]	; (a08c <_fstat_r+0x20>)
    a072:	0005      	movs	r5, r0
    a074:	0008      	movs	r0, r1
    a076:	0011      	movs	r1, r2
    a078:	6023      	str	r3, [r4, #0]
    a07a:	f7f8 f898 	bl	21ae <_fstat>
    a07e:	1c43      	adds	r3, r0, #1
    a080:	d103      	bne.n	a08a <_fstat_r+0x1e>
    a082:	6823      	ldr	r3, [r4, #0]
    a084:	2b00      	cmp	r3, #0
    a086:	d000      	beq.n	a08a <_fstat_r+0x1e>
    a088:	602b      	str	r3, [r5, #0]
    a08a:	bd70      	pop	{r4, r5, r6, pc}
    a08c:	20002cf8 	.word	0x20002cf8

0000a090 <_lseek_r>:
    a090:	b570      	push	{r4, r5, r6, lr}
    a092:	0005      	movs	r5, r0
    a094:	0008      	movs	r0, r1
    a096:	0011      	movs	r1, r2
    a098:	2200      	movs	r2, #0
    a09a:	4c06      	ldr	r4, [pc, #24]	; (a0b4 <_lseek_r+0x24>)
    a09c:	6022      	str	r2, [r4, #0]
    a09e:	001a      	movs	r2, r3
    a0a0:	f7f8 f88a 	bl	21b8 <_lseek>
    a0a4:	1c43      	adds	r3, r0, #1
    a0a6:	d103      	bne.n	a0b0 <_lseek_r+0x20>
    a0a8:	6823      	ldr	r3, [r4, #0]
    a0aa:	2b00      	cmp	r3, #0
    a0ac:	d000      	beq.n	a0b0 <_lseek_r+0x20>
    a0ae:	602b      	str	r3, [r5, #0]
    a0b0:	bd70      	pop	{r4, r5, r6, pc}
    a0b2:	46c0      	nop			; (mov r8, r8)
    a0b4:	20002cf8 	.word	0x20002cf8

0000a0b8 <memchr>:
    a0b8:	b2c9      	uxtb	r1, r1
    a0ba:	1882      	adds	r2, r0, r2
    a0bc:	4290      	cmp	r0, r2
    a0be:	d101      	bne.n	a0c4 <memchr+0xc>
    a0c0:	2000      	movs	r0, #0
    a0c2:	4770      	bx	lr
    a0c4:	7803      	ldrb	r3, [r0, #0]
    a0c6:	428b      	cmp	r3, r1
    a0c8:	d0fb      	beq.n	a0c2 <memchr+0xa>
    a0ca:	3001      	adds	r0, #1
    a0cc:	e7f6      	b.n	a0bc <memchr+0x4>

0000a0ce <memmove>:
    a0ce:	b510      	push	{r4, lr}
    a0d0:	4288      	cmp	r0, r1
    a0d2:	d902      	bls.n	a0da <memmove+0xc>
    a0d4:	188b      	adds	r3, r1, r2
    a0d6:	4298      	cmp	r0, r3
    a0d8:	d308      	bcc.n	a0ec <memmove+0x1e>
    a0da:	2300      	movs	r3, #0
    a0dc:	429a      	cmp	r2, r3
    a0de:	d007      	beq.n	a0f0 <memmove+0x22>
    a0e0:	5ccc      	ldrb	r4, [r1, r3]
    a0e2:	54c4      	strb	r4, [r0, r3]
    a0e4:	3301      	adds	r3, #1
    a0e6:	e7f9      	b.n	a0dc <memmove+0xe>
    a0e8:	5c8b      	ldrb	r3, [r1, r2]
    a0ea:	5483      	strb	r3, [r0, r2]
    a0ec:	3a01      	subs	r2, #1
    a0ee:	d2fb      	bcs.n	a0e8 <memmove+0x1a>
    a0f0:	bd10      	pop	{r4, pc}

0000a0f2 <__malloc_lock>:
    a0f2:	4770      	bx	lr

0000a0f4 <__malloc_unlock>:
    a0f4:	4770      	bx	lr

0000a0f6 <_realloc_r>:
    a0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0f8:	0007      	movs	r7, r0
    a0fa:	000d      	movs	r5, r1
    a0fc:	0016      	movs	r6, r2
    a0fe:	2900      	cmp	r1, #0
    a100:	d105      	bne.n	a10e <_realloc_r+0x18>
    a102:	0011      	movs	r1, r2
    a104:	f7ff fbe2 	bl	98cc <_malloc_r>
    a108:	0004      	movs	r4, r0
    a10a:	0020      	movs	r0, r4
    a10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a10e:	2a00      	cmp	r2, #0
    a110:	d103      	bne.n	a11a <_realloc_r+0x24>
    a112:	f7ff fb91 	bl	9838 <_free_r>
    a116:	0034      	movs	r4, r6
    a118:	e7f7      	b.n	a10a <_realloc_r+0x14>
    a11a:	f000 f827 	bl	a16c <_malloc_usable_size_r>
    a11e:	002c      	movs	r4, r5
    a120:	4286      	cmp	r6, r0
    a122:	d9f2      	bls.n	a10a <_realloc_r+0x14>
    a124:	0031      	movs	r1, r6
    a126:	0038      	movs	r0, r7
    a128:	f7ff fbd0 	bl	98cc <_malloc_r>
    a12c:	1e04      	subs	r4, r0, #0
    a12e:	d0ec      	beq.n	a10a <_realloc_r+0x14>
    a130:	0029      	movs	r1, r5
    a132:	0032      	movs	r2, r6
    a134:	f7ff f89b 	bl	926e <memcpy>
    a138:	0029      	movs	r1, r5
    a13a:	0038      	movs	r0, r7
    a13c:	f7ff fb7c 	bl	9838 <_free_r>
    a140:	e7e3      	b.n	a10a <_realloc_r+0x14>
	...

0000a144 <_read_r>:
    a144:	b570      	push	{r4, r5, r6, lr}
    a146:	0005      	movs	r5, r0
    a148:	0008      	movs	r0, r1
    a14a:	0011      	movs	r1, r2
    a14c:	2200      	movs	r2, #0
    a14e:	4c06      	ldr	r4, [pc, #24]	; (a168 <_read_r+0x24>)
    a150:	6022      	str	r2, [r4, #0]
    a152:	001a      	movs	r2, r3
    a154:	f7f7 ffcc 	bl	20f0 <_read>
    a158:	1c43      	adds	r3, r0, #1
    a15a:	d103      	bne.n	a164 <_read_r+0x20>
    a15c:	6823      	ldr	r3, [r4, #0]
    a15e:	2b00      	cmp	r3, #0
    a160:	d000      	beq.n	a164 <_read_r+0x20>
    a162:	602b      	str	r3, [r5, #0]
    a164:	bd70      	pop	{r4, r5, r6, pc}
    a166:	46c0      	nop			; (mov r8, r8)
    a168:	20002cf8 	.word	0x20002cf8

0000a16c <_malloc_usable_size_r>:
    a16c:	1f0b      	subs	r3, r1, #4
    a16e:	681b      	ldr	r3, [r3, #0]
    a170:	1f18      	subs	r0, r3, #4
    a172:	2b00      	cmp	r3, #0
    a174:	da01      	bge.n	a17a <_malloc_usable_size_r+0xe>
    a176:	580b      	ldr	r3, [r1, r0]
    a178:	18c0      	adds	r0, r0, r3
    a17a:	4770      	bx	lr
    a17c:	42000800 	.word	0x42000800
    a180:	42000c00 	.word	0x42000c00
    a184:	42001000 	.word	0x42001000
    a188:	42001400 	.word	0x42001400
    a18c:	42001800 	.word	0x42001800
    a190:	42001c00 	.word	0x42001c00
    a194:	000013be 	.word	0x000013be
    a198:	000013ba 	.word	0x000013ba
    a19c:	000013ba 	.word	0x000013ba
    a1a0:	00001420 	.word	0x00001420
    a1a4:	00001420 	.word	0x00001420
    a1a8:	000013d2 	.word	0x000013d2
    a1ac:	000013c4 	.word	0x000013c4
    a1b0:	000013d8 	.word	0x000013d8
    a1b4:	0000140e 	.word	0x0000140e
    a1b8:	0000165c 	.word	0x0000165c
    a1bc:	0000163c 	.word	0x0000163c
    a1c0:	0000163c 	.word	0x0000163c
    a1c4:	000016c8 	.word	0x000016c8
    a1c8:	0000164e 	.word	0x0000164e
    a1cc:	0000166a 	.word	0x0000166a
    a1d0:	00001640 	.word	0x00001640
    a1d4:	00001678 	.word	0x00001678
    a1d8:	000016b8 	.word	0x000016b8
    a1dc:	42002c00 	.word	0x42002c00
    a1e0:	42003000 	.word	0x42003000
    a1e4:	42003400 	.word	0x42003400
    a1e8:	0000009c 	.word	0x0000009c
    a1ec:	00002ff8 	.word	0x00002ff8
    a1f0:	00003142 	.word	0x00003142
    a1f4:	00002fd0 	.word	0x00002fd0
    a1f8:	0000314a 	.word	0x0000314a
    a1fc:	00002fd8 	.word	0x00002fd8
    a200:	00002fe0 	.word	0x00002fe0
    a204:	00002fe8 	.word	0x00002fe8
    a208:	00002ff0 	.word	0x00002ff0

0000a20c <tc_interrupt_vectors.11908>:
    a20c:	00141312 0000464c 00004664 00004680     ....LF..dF...F..
    a21c:	000046b0 000046f2 204e4150 726f6f43     .F...F..PAN Coor
    a22c:	616e6964 00726f74 2578302d 00583430     dinator.-0x%04X.

0000a23c <_global_impure_ptr>:
    a23c:	2000008c                                ... 

0000a240 <__sf_fake_stderr>:
	...

0000a260 <__sf_fake_stdin>:
	...

0000a280 <__sf_fake_stdout>:
	...
    a2a0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    a2b0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    a2c0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    a2d0:	00006665                                ef..

0000a2d4 <_init>:
    a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2d6:	46c0      	nop			; (mov r8, r8)
    a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a2da:	bc08      	pop	{r3}
    a2dc:	469e      	mov	lr, r3
    a2de:	4770      	bx	lr

0000a2e0 <__init_array_start>:
    a2e0:	000000dd 	.word	0x000000dd

0000a2e4 <_fini>:
    a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2e6:	46c0      	nop			; (mov r8, r8)
    a2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a2ea:	bc08      	pop	{r3}
    a2ec:	469e      	mov	lr, r3
    a2ee:	4770      	bx	lr

0000a2f0 <__fini_array_start>:
    a2f0:	000000b5 	.word	0x000000b5
