
APPS_WSN_DEMO_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004dd8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  00004dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d0  2000007c  00004e54  0002007c  2**2
                  ALLOC
  3 .stack        00002004  2000034c  00005124  0002007c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003c5e1  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005130  00000000  00000000  0005c6de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006a29  00000000  00000000  0006180e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f8  00000000  00000000  00068237  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000758  00000000  00000000  0006892f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b2a8  00000000  00000000  00069087  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001119c  00000000  00000000  0008432f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b7e7  00000000  00000000  000954cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001970  00000000  00000000  00120cb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
       0:	50 23 00 20 6d 1c 00 00 69 1c 00 00 69 1c 00 00     P#. m...i...i...
	...
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
      2c:	69 1c 00 00 00 00 00 00 00 00 00 00 69 1c 00 00     i...........i...
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
      3c:	69 1c 00 00 69 1c 00 00 69 1c 00 00 69 1c 00 00     i...i...i...i...
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
      4c:	69 1c 00 00 f1 02 00 00 69 1c 00 00 69 1c 00 00     i.......i...i...

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
      5c:	69 1c 00 00 69 1c 00 00 dd 0d 00 00 ed 0d 00 00     i...i...........
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
      6c:	fd 0d 00 00 0d 0e 00 00 1d 0e 00 00 2d 0e 00 00     ............-...

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
      7c:	69 1c 00 00 69 1c 00 00 69 1c 00 00 39 1c 00 00     i...i...i...9...
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
      8c:	49 1c 00 00 59 1c 00 00 00 00 00 00 00 00 00 00     I...Y...........
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
      9c:	69 1c 00 00 69 1c 00 00 00 00 00 00 69 1c 00 00     i...i.......i...
	...

000000b4 <__do_global_dtors_aux>:
  packet.data_length = sizeof(readbuf);
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
}
  i2c_master_reset(&i2c_master_instance);
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
      d0:	2000007c 	.word	0x2000007c
      d4:	00000000 	.word	0x00000000
      d8:	00004dd8 	.word	0x00004dd8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  packet.data = readbuf;
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  packet.data_length = sizeof(readbuf);
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
  i2c_master_reset(&i2c_master_instance);
     100:	00000000 	.word	0x00000000
     104:	20000080 	.word	0x20000080
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
     108:	00004dd8 	.word	0x00004dd8
     10c:	00004dd8 	.word	0x00004dd8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001965 	.word	0x00001965
     140:	000021bd 	.word	0x000021bd
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ac:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d106      	bne.n	1c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b8:	2b00      	cmp	r3, #0
     1ba:	d007      	beq.n	1cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b09      	ldr	r3, [pc, #36]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1c2:	4a07      	ldr	r2, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1c4:	6813      	ldr	r3, [r2, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	6013      	str	r3, [r2, #0]
}
     1ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1d2:	2200      	movs	r2, #0
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_enter_critical+0x3c>)
     1d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1d8:	3201      	adds	r2, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	e7f0      	b.n	1c2 <cpu_irq_enter_critical+0x16>
     1e0:	20000098 	.word	0x20000098
     1e4:	2000009c 	.word	0x2000009c
     1e8:	20000008 	.word	0x20000008

000001ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <cpu_irq_leave_critical+0x24>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	3a01      	subs	r2, #1
     1f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d109      	bne.n	20e <cpu_irq_leave_critical+0x22>
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <cpu_irq_leave_critical+0x28>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d005      	beq.n	20e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     202:	2201      	movs	r2, #1
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_leave_critical+0x2c>)
     206:	701a      	strb	r2, [r3, #0]
     208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     20c:	b662      	cpsie	i
	}
}
     20e:	4770      	bx	lr
     210:	20000098 	.word	0x20000098
     214:	2000009c 	.word	0x2000009c
     218:	20000008 	.word	0x20000008

0000021c <system_board_init>:




void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	46c6      	mov	lr, r8
     220:	b500      	push	{lr}
     222:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     224:	ac01      	add	r4, sp, #4
     226:	2601      	movs	r6, #1
     228:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     22a:	2700      	movs	r7, #0
     22c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     22e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     230:	0021      	movs	r1, r4
     232:	2013      	movs	r0, #19
     234:	4d27      	ldr	r5, [pc, #156]	; (2d4 <system_board_init+0xb8>)
     236:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     238:	4b27      	ldr	r3, [pc, #156]	; (2d8 <system_board_init+0xbc>)
     23a:	4698      	mov	r8, r3
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	031b      	lsls	r3, r3, #12
     240:	4642      	mov	r2, r8
     242:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     244:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     246:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     248:	0021      	movs	r1, r4
     24a:	201c      	movs	r0, #28
     24c:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     24e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     250:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     252:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     254:	0021      	movs	r1, r4
     256:	2052      	movs	r0, #82	; 0x52
     258:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     25a:	0021      	movs	r1, r4
     25c:	203e      	movs	r0, #62	; 0x3e
     25e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     260:	0021      	movs	r1, r4
     262:	203f      	movs	r0, #63	; 0x3f
     264:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     266:	0021      	movs	r1, r4
     268:	202f      	movs	r0, #47	; 0x2f
     26a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     26c:	0021      	movs	r1, r4
     26e:	2014      	movs	r0, #20
     270:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     272:	2280      	movs	r2, #128	; 0x80
     274:	02d2      	lsls	r2, r2, #11
     276:	4b19      	ldr	r3, [pc, #100]	; (2dc <system_board_init+0xc0>)
     278:	619a      	str	r2, [r3, #24]
     27a:	4b19      	ldr	r3, [pc, #100]	; (2e0 <system_board_init+0xc4>)
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	05d2      	lsls	r2, r2, #23
     280:	619a      	str	r2, [r3, #24]
     282:	2280      	movs	r2, #128	; 0x80
     284:	0612      	lsls	r2, r2, #24
     286:	619a      	str	r2, [r3, #24]
     288:	2280      	movs	r2, #128	; 0x80
     28a:	0212      	lsls	r2, r2, #8
     28c:	619a      	str	r2, [r3, #24]
     28e:	2380      	movs	r3, #128	; 0x80
     290:	035b      	lsls	r3, r3, #13
     292:	4642      	mov	r2, r8
     294:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     296:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     298:	0021      	movs	r1, r4
     29a:	2053      	movs	r0, #83	; 0x53
     29c:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     29e:	4a11      	ldr	r2, [pc, #68]	; (2e4 <system_board_init+0xc8>)
     2a0:	6a11      	ldr	r1, [r2, #32]
     2a2:	2380      	movs	r3, #128	; 0x80
     2a4:	039b      	lsls	r3, r3, #14
     2a6:	430b      	orrs	r3, r1
     2a8:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     2aa:	2204      	movs	r2, #4
     2ac:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <system_board_init+0xcc>)
     2ae:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2b0:	466b      	mov	r3, sp
     2b2:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     2b4:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     2b6:	2305      	movs	r3, #5
     2b8:	466a      	mov	r2, sp
     2ba:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     2bc:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     2be:	4669      	mov	r1, sp
     2c0:	2009      	movs	r0, #9
     2c2:	4c0a      	ldr	r4, [pc, #40]	; (2ec <system_board_init+0xd0>)
     2c4:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     2c6:	4669      	mov	r1, sp
     2c8:	200c      	movs	r0, #12
     2ca:	47a0      	blx	r4
#endif

}
     2cc:	b002      	add	sp, #8
     2ce:	bc04      	pop	{r2}
     2d0:	4690      	mov	r8, r2
     2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2d4:	000003c9 	.word	0x000003c9
     2d8:	41004400 	.word	0x41004400
     2dc:	41004500 	.word	0x41004500
     2e0:	41004480 	.word	0x41004480
     2e4:	40000400 	.word	0x40000400
     2e8:	42005400 	.word	0x42005400
     2ec:	00001b75 	.word	0x00001b75

000002f0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2f0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2f2:	2200      	movs	r2, #0
     2f4:	4b10      	ldr	r3, [pc, #64]	; (338 <EIC_Handler+0x48>)
     2f6:	701a      	strb	r2, [r3, #0]
     2f8:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2fa:	4910      	ldr	r1, [pc, #64]	; (33c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2fc:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2fe:	4e10      	ldr	r6, [pc, #64]	; (340 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     300:	4c0d      	ldr	r4, [pc, #52]	; (338 <EIC_Handler+0x48>)
     302:	e00a      	b.n	31a <EIC_Handler+0x2a>
		return eics[eic_index];
     304:	490d      	ldr	r1, [pc, #52]	; (33c <EIC_Handler+0x4c>)
     306:	e008      	b.n	31a <EIC_Handler+0x2a>
     308:	7823      	ldrb	r3, [r4, #0]
     30a:	3301      	adds	r3, #1
     30c:	b2db      	uxtb	r3, r3
     30e:	7023      	strb	r3, [r4, #0]
     310:	2b0f      	cmp	r3, #15
     312:	d810      	bhi.n	336 <EIC_Handler+0x46>
		return NULL;
     314:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     316:	2b1f      	cmp	r3, #31
     318:	d9f4      	bls.n	304 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     31a:	0028      	movs	r0, r5
     31c:	4018      	ands	r0, r3
     31e:	2201      	movs	r2, #1
     320:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     322:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     324:	4210      	tst	r0, r2
     326:	d0ef      	beq.n	308 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     328:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     32a:	009b      	lsls	r3, r3, #2
     32c:	599b      	ldr	r3, [r3, r6]
     32e:	2b00      	cmp	r3, #0
     330:	d0ea      	beq.n	308 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     332:	4798      	blx	r3
     334:	e7e8      	b.n	308 <EIC_Handler+0x18>
			}
		}
	}
}
     336:	bd70      	pop	{r4, r5, r6, pc}
     338:	200001c8 	.word	0x200001c8
     33c:	40001800 	.word	0x40001800
     340:	200001cc 	.word	0x200001cc

00000344 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     344:	4a04      	ldr	r2, [pc, #16]	; (358 <_extint_enable+0x14>)
     346:	7813      	ldrb	r3, [r2, #0]
     348:	2102      	movs	r1, #2
     34a:	430b      	orrs	r3, r1
     34c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     34e:	7853      	ldrb	r3, [r2, #1]
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     356:	4770      	bx	lr
     358:	40001800 	.word	0x40001800

0000035c <_system_extint_init>:
{
     35c:	b500      	push	{lr}
     35e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     360:	4a12      	ldr	r2, [pc, #72]	; (3ac <_system_extint_init+0x50>)
     362:	6993      	ldr	r3, [r2, #24]
     364:	2140      	movs	r1, #64	; 0x40
     366:	430b      	orrs	r3, r1
     368:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     36a:	a901      	add	r1, sp, #4
     36c:	2300      	movs	r3, #0
     36e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     370:	2005      	movs	r0, #5
     372:	4b0f      	ldr	r3, [pc, #60]	; (3b0 <_system_extint_init+0x54>)
     374:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     376:	2005      	movs	r0, #5
     378:	4b0e      	ldr	r3, [pc, #56]	; (3b4 <_system_extint_init+0x58>)
     37a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     37c:	4a0e      	ldr	r2, [pc, #56]	; (3b8 <_system_extint_init+0x5c>)
     37e:	7813      	ldrb	r3, [r2, #0]
     380:	2101      	movs	r1, #1
     382:	430b      	orrs	r3, r1
     384:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     386:	7853      	ldrb	r3, [r2, #1]
     388:	b25b      	sxtb	r3, r3
     38a:	2b00      	cmp	r3, #0
     38c:	dbfb      	blt.n	386 <_system_extint_init+0x2a>
     38e:	4b0b      	ldr	r3, [pc, #44]	; (3bc <_system_extint_init+0x60>)
     390:	0019      	movs	r1, r3
     392:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     394:	2200      	movs	r2, #0
     396:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     398:	4299      	cmp	r1, r3
     39a:	d1fc      	bne.n	396 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     39c:	2210      	movs	r2, #16
     39e:	4b08      	ldr	r3, [pc, #32]	; (3c0 <_system_extint_init+0x64>)
     3a0:	601a      	str	r2, [r3, #0]
	_extint_enable();
     3a2:	4b08      	ldr	r3, [pc, #32]	; (3c4 <_system_extint_init+0x68>)
     3a4:	4798      	blx	r3
}
     3a6:	b003      	add	sp, #12
     3a8:	bd00      	pop	{pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	40000400 	.word	0x40000400
     3b0:	00001a7d 	.word	0x00001a7d
     3b4:	000019f1 	.word	0x000019f1
     3b8:	40001800 	.word	0x40001800
     3bc:	200001cc 	.word	0x200001cc
     3c0:	e000e100 	.word	0xe000e100
     3c4:	00000345 	.word	0x00000345

000003c8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     3c8:	b500      	push	{lr}
     3ca:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3cc:	ab01      	add	r3, sp, #4
     3ce:	2280      	movs	r2, #128	; 0x80
     3d0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3d2:	780a      	ldrb	r2, [r1, #0]
     3d4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3d6:	784a      	ldrb	r2, [r1, #1]
     3d8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3da:	788a      	ldrb	r2, [r1, #2]
     3dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3de:	0019      	movs	r1, r3
     3e0:	4b01      	ldr	r3, [pc, #4]	; (3e8 <port_pin_set_config+0x20>)
     3e2:	4798      	blx	r3
}
     3e4:	b003      	add	sp, #12
     3e6:	bd00      	pop	{pc}
     3e8:	00001b75 	.word	0x00001b75

000003ec <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     3ec:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     3ee:	2207      	movs	r2, #7
     3f0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     3f2:	421a      	tst	r2, r3
     3f4:	d1fc      	bne.n	3f0 <_i2c_master_wait_for_sync+0x4>
}
     3f6:	4770      	bx	lr

000003f8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3fa:	46d6      	mov	lr, sl
     3fc:	464f      	mov	r7, r9
     3fe:	4646      	mov	r6, r8
     400:	b5c0      	push	{r6, r7, lr}
     402:	b08a      	sub	sp, #40	; 0x28
     404:	0006      	movs	r6, r0
     406:	000f      	movs	r7, r1
     408:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     40a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     40c:	0008      	movs	r0, r1
     40e:	4b97      	ldr	r3, [pc, #604]	; (66c <i2c_master_init+0x274>)
     410:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     412:	4a97      	ldr	r2, [pc, #604]	; (670 <i2c_master_init+0x278>)
     414:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     416:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     418:	2301      	movs	r3, #1
     41a:	40ab      	lsls	r3, r5
     41c:	430b      	orrs	r3, r1
     41e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     420:	a909      	add	r1, sp, #36	; 0x24
     422:	7b23      	ldrb	r3, [r4, #12]
     424:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     426:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     428:	b2c5      	uxtb	r5, r0
     42a:	0028      	movs	r0, r5
     42c:	4b91      	ldr	r3, [pc, #580]	; (674 <i2c_master_init+0x27c>)
     42e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     430:	0028      	movs	r0, r5
     432:	4b91      	ldr	r3, [pc, #580]	; (678 <i2c_master_init+0x280>)
     434:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     436:	7b20      	ldrb	r0, [r4, #12]
     438:	2100      	movs	r1, #0
     43a:	4b90      	ldr	r3, [pc, #576]	; (67c <i2c_master_init+0x284>)
     43c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     43e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     440:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     442:	079b      	lsls	r3, r3, #30
     444:	d505      	bpl.n	452 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     446:	b00a      	add	sp, #40	; 0x28
     448:	bc1c      	pop	{r2, r3, r4}
     44a:	4690      	mov	r8, r2
     44c:	4699      	mov	r9, r3
     44e:	46a2      	mov	sl, r4
     450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     452:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     454:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     456:	07db      	lsls	r3, r3, #31
     458:	d4f5      	bmi.n	446 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     45a:	2314      	movs	r3, #20
     45c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     45e:	6833      	ldr	r3, [r6, #0]
     460:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     462:	0018      	movs	r0, r3
     464:	4b81      	ldr	r3, [pc, #516]	; (66c <i2c_master_init+0x274>)
     466:	4798      	blx	r3
     468:	0005      	movs	r5, r0
     46a:	2380      	movs	r3, #128	; 0x80
     46c:	aa08      	add	r2, sp, #32
     46e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     470:	2300      	movs	r3, #0
     472:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     474:	2201      	movs	r2, #1
     476:	a908      	add	r1, sp, #32
     478:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     47a:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     47c:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     47e:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     480:	2800      	cmp	r0, #0
     482:	d100      	bne.n	486 <i2c_master_init+0x8e>
     484:	e0af      	b.n	5e6 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     486:	ab08      	add	r3, sp, #32
     488:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     48a:	2302      	movs	r3, #2
     48c:	aa08      	add	r2, sp, #32
     48e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     490:	0c00      	lsrs	r0, r0, #16
     492:	b2c0      	uxtb	r0, r0
     494:	0011      	movs	r1, r2
     496:	4b7a      	ldr	r3, [pc, #488]	; (680 <i2c_master_init+0x288>)
     498:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     49a:	2f00      	cmp	r7, #0
     49c:	d100      	bne.n	4a0 <i2c_master_init+0xa8>
     49e:	e0a7      	b.n	5f0 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     4a0:	ab08      	add	r3, sp, #32
     4a2:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     4a4:	2302      	movs	r3, #2
     4a6:	aa08      	add	r2, sp, #32
     4a8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     4aa:	0c3f      	lsrs	r7, r7, #16
     4ac:	b2f8      	uxtb	r0, r7
     4ae:	0011      	movs	r1, r2
     4b0:	4b73      	ldr	r3, [pc, #460]	; (680 <i2c_master_init+0x288>)
     4b2:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     4b4:	8aa3      	ldrh	r3, [r4, #20]
     4b6:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     4b8:	8ae3      	ldrh	r3, [r4, #22]
     4ba:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     4bc:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     4be:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     4c0:	2b00      	cmp	r3, #0
     4c2:	d104      	bne.n	4ce <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     4c4:	4b6f      	ldr	r3, [pc, #444]	; (684 <i2c_master_init+0x28c>)
     4c6:	789b      	ldrb	r3, [r3, #2]
     4c8:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     4ca:	0fdb      	lsrs	r3, r3, #31
     4cc:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     4ce:	68a1      	ldr	r1, [r4, #8]
     4d0:	6923      	ldr	r3, [r4, #16]
     4d2:	430b      	orrs	r3, r1
     4d4:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     4d6:	2224      	movs	r2, #36	; 0x24
     4d8:	5ca2      	ldrb	r2, [r4, r2]
     4da:	2a00      	cmp	r2, #0
     4dc:	d002      	beq.n	4e4 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     4de:	2280      	movs	r2, #128	; 0x80
     4e0:	05d2      	lsls	r2, r2, #23
     4e2:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     4e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     4e6:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     4e8:	222c      	movs	r2, #44	; 0x2c
     4ea:	5ca2      	ldrb	r2, [r4, r2]
     4ec:	2a00      	cmp	r2, #0
     4ee:	d103      	bne.n	4f8 <i2c_master_init+0x100>
     4f0:	2280      	movs	r2, #128	; 0x80
     4f2:	0492      	lsls	r2, r2, #18
     4f4:	4291      	cmp	r1, r2
     4f6:	d102      	bne.n	4fe <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     4f8:	2280      	movs	r2, #128	; 0x80
     4fa:	0512      	lsls	r2, r2, #20
     4fc:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     4fe:	222d      	movs	r2, #45	; 0x2d
     500:	5ca2      	ldrb	r2, [r4, r2]
     502:	2a00      	cmp	r2, #0
     504:	d002      	beq.n	50c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     506:	2280      	movs	r2, #128	; 0x80
     508:	0412      	lsls	r2, r2, #16
     50a:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     50c:	222e      	movs	r2, #46	; 0x2e
     50e:	5ca2      	ldrb	r2, [r4, r2]
     510:	2a00      	cmp	r2, #0
     512:	d002      	beq.n	51a <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     514:	2280      	movs	r2, #128	; 0x80
     516:	03d2      	lsls	r2, r2, #15
     518:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     51a:	4642      	mov	r2, r8
     51c:	6812      	ldr	r2, [r2, #0]
     51e:	4313      	orrs	r3, r2
     520:	4642      	mov	r2, r8
     522:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     524:	2380      	movs	r3, #128	; 0x80
     526:	005b      	lsls	r3, r3, #1
     528:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     52a:	0028      	movs	r0, r5
     52c:	3014      	adds	r0, #20
     52e:	b2c0      	uxtb	r0, r0
     530:	4b55      	ldr	r3, [pc, #340]	; (688 <i2c_master_init+0x290>)
     532:	4798      	blx	r3
     534:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     536:	23fa      	movs	r3, #250	; 0xfa
     538:	009b      	lsls	r3, r3, #2
     53a:	6822      	ldr	r2, [r4, #0]
     53c:	435a      	muls	r2, r3
     53e:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     540:	6863      	ldr	r3, [r4, #4]
     542:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     544:	4d51      	ldr	r5, [pc, #324]	; (68c <i2c_master_init+0x294>)
     546:	47a8      	blx	r5
     548:	9000      	str	r0, [sp, #0]
     54a:	9101      	str	r1, [sp, #4]
     54c:	464b      	mov	r3, r9
     54e:	0058      	lsls	r0, r3, #1
     550:	47a8      	blx	r5
     552:	9002      	str	r0, [sp, #8]
     554:	9103      	str	r1, [sp, #12]
     556:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     558:	47a8      	blx	r5
     55a:	9004      	str	r0, [sp, #16]
     55c:	9105      	str	r1, [sp, #20]
     55e:	4f4c      	ldr	r7, [pc, #304]	; (690 <i2c_master_init+0x298>)
     560:	4a4c      	ldr	r2, [pc, #304]	; (694 <i2c_master_init+0x29c>)
     562:	4b4d      	ldr	r3, [pc, #308]	; (698 <i2c_master_init+0x2a0>)
     564:	9800      	ldr	r0, [sp, #0]
     566:	9901      	ldr	r1, [sp, #4]
     568:	47b8      	blx	r7
     56a:	0002      	movs	r2, r0
     56c:	000b      	movs	r3, r1
     56e:	9804      	ldr	r0, [sp, #16]
     570:	9905      	ldr	r1, [sp, #20]
     572:	47b8      	blx	r7
     574:	4e49      	ldr	r6, [pc, #292]	; (69c <i2c_master_init+0x2a4>)
     576:	2200      	movs	r2, #0
     578:	4b49      	ldr	r3, [pc, #292]	; (6a0 <i2c_master_init+0x2a8>)
     57a:	47b0      	blx	r6
     57c:	9004      	str	r0, [sp, #16]
     57e:	9105      	str	r1, [sp, #20]
     580:	4648      	mov	r0, r9
     582:	47a8      	blx	r5
     584:	0002      	movs	r2, r0
     586:	000b      	movs	r3, r1
     588:	9804      	ldr	r0, [sp, #16]
     58a:	9905      	ldr	r1, [sp, #20]
     58c:	47b8      	blx	r7
     58e:	0002      	movs	r2, r0
     590:	000b      	movs	r3, r1
     592:	4d44      	ldr	r5, [pc, #272]	; (6a4 <i2c_master_init+0x2ac>)
     594:	9800      	ldr	r0, [sp, #0]
     596:	9901      	ldr	r1, [sp, #4]
     598:	47a8      	blx	r5
     59a:	9a02      	ldr	r2, [sp, #8]
     59c:	9b03      	ldr	r3, [sp, #12]
     59e:	47b0      	blx	r6
     5a0:	2200      	movs	r2, #0
     5a2:	4b41      	ldr	r3, [pc, #260]	; (6a8 <i2c_master_init+0x2b0>)
     5a4:	47a8      	blx	r5
     5a6:	9a02      	ldr	r2, [sp, #8]
     5a8:	9b03      	ldr	r3, [sp, #12]
     5aa:	4d40      	ldr	r5, [pc, #256]	; (6ac <i2c_master_init+0x2b4>)
     5ac:	47a8      	blx	r5
     5ae:	4b40      	ldr	r3, [pc, #256]	; (6b0 <i2c_master_init+0x2b8>)
     5b0:	4798      	blx	r3
     5b2:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     5b4:	2380      	movs	r3, #128	; 0x80
     5b6:	049b      	lsls	r3, r3, #18
     5b8:	68a2      	ldr	r2, [r4, #8]
     5ba:	429a      	cmp	r2, r3
     5bc:	d01e      	beq.n	5fc <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     5be:	0003      	movs	r3, r0
     5c0:	2040      	movs	r0, #64	; 0x40
     5c2:	2dff      	cmp	r5, #255	; 0xff
     5c4:	d900      	bls.n	5c8 <i2c_master_init+0x1d0>
     5c6:	e73e      	b.n	446 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     5c8:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     5ca:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     5cc:	25ff      	movs	r5, #255	; 0xff
     5ce:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     5d0:	0624      	lsls	r4, r4, #24
     5d2:	4325      	orrs	r5, r4
     5d4:	0400      	lsls	r0, r0, #16
     5d6:	23ff      	movs	r3, #255	; 0xff
     5d8:	041b      	lsls	r3, r3, #16
     5da:	4018      	ands	r0, r3
     5dc:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     5de:	4643      	mov	r3, r8
     5e0:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     5e2:	2000      	movs	r0, #0
     5e4:	e72f      	b.n	446 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     5e6:	2100      	movs	r1, #0
     5e8:	4640      	mov	r0, r8
     5ea:	4b32      	ldr	r3, [pc, #200]	; (6b4 <i2c_master_init+0x2bc>)
     5ec:	4798      	blx	r3
     5ee:	e74a      	b.n	486 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     5f0:	2101      	movs	r1, #1
     5f2:	4640      	mov	r0, r8
     5f4:	4b2f      	ldr	r3, [pc, #188]	; (6b4 <i2c_master_init+0x2bc>)
     5f6:	4798      	blx	r3
     5f8:	0007      	movs	r7, r0
     5fa:	e751      	b.n	4a0 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     5fc:	26fa      	movs	r6, #250	; 0xfa
     5fe:	00b6      	lsls	r6, r6, #2
     600:	4653      	mov	r3, sl
     602:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     604:	9800      	ldr	r0, [sp, #0]
     606:	9901      	ldr	r1, [sp, #4]
     608:	0002      	movs	r2, r0
     60a:	000b      	movs	r3, r1
     60c:	4c23      	ldr	r4, [pc, #140]	; (69c <i2c_master_init+0x2a4>)
     60e:	47a0      	blx	r4
     610:	9000      	str	r0, [sp, #0]
     612:	9101      	str	r1, [sp, #4]
     614:	0030      	movs	r0, r6
     616:	4b1d      	ldr	r3, [pc, #116]	; (68c <i2c_master_init+0x294>)
     618:	4798      	blx	r3
     61a:	2200      	movs	r2, #0
     61c:	4b26      	ldr	r3, [pc, #152]	; (6b8 <i2c_master_init+0x2c0>)
     61e:	47b8      	blx	r7
     620:	0002      	movs	r2, r0
     622:	000b      	movs	r3, r1
     624:	9800      	ldr	r0, [sp, #0]
     626:	9901      	ldr	r1, [sp, #4]
     628:	4c20      	ldr	r4, [pc, #128]	; (6ac <i2c_master_init+0x2b4>)
     62a:	47a0      	blx	r4
     62c:	2200      	movs	r2, #0
     62e:	4b1e      	ldr	r3, [pc, #120]	; (6a8 <i2c_master_init+0x2b0>)
     630:	4c1c      	ldr	r4, [pc, #112]	; (6a4 <i2c_master_init+0x2ac>)
     632:	47a0      	blx	r4
     634:	4b1e      	ldr	r3, [pc, #120]	; (6b0 <i2c_master_init+0x2b8>)
     636:	4798      	blx	r3
     638:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     63a:	d00c      	beq.n	656 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     63c:	0031      	movs	r1, r6
     63e:	9807      	ldr	r0, [sp, #28]
     640:	4b1e      	ldr	r3, [pc, #120]	; (6bc <i2c_master_init+0x2c4>)
     642:	4798      	blx	r3
     644:	3802      	subs	r0, #2
     646:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     648:	002b      	movs	r3, r5
     64a:	2dff      	cmp	r5, #255	; 0xff
     64c:	d80c      	bhi.n	668 <i2c_master_init+0x270>
     64e:	28ff      	cmp	r0, #255	; 0xff
     650:	d9bc      	bls.n	5cc <i2c_master_init+0x1d4>
     652:	2040      	movs	r0, #64	; 0x40
     654:	e6f7      	b.n	446 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     656:	0071      	lsls	r1, r6, #1
     658:	1e48      	subs	r0, r1, #1
     65a:	9b07      	ldr	r3, [sp, #28]
     65c:	469c      	mov	ip, r3
     65e:	4460      	add	r0, ip
     660:	4b16      	ldr	r3, [pc, #88]	; (6bc <i2c_master_init+0x2c4>)
     662:	4798      	blx	r3
     664:	3801      	subs	r0, #1
     666:	e7ef      	b.n	648 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     668:	2040      	movs	r0, #64	; 0x40
     66a:	e6ec      	b.n	446 <i2c_master_init+0x4e>
     66c:	00000d35 	.word	0x00000d35
     670:	40000400 	.word	0x40000400
     674:	00001a7d 	.word	0x00001a7d
     678:	000019f1 	.word	0x000019f1
     67c:	00000b71 	.word	0x00000b71
     680:	00001b75 	.word	0x00001b75
     684:	41002000 	.word	0x41002000
     688:	00001a99 	.word	0x00001a99
     68c:	00003b45 	.word	0x00003b45
     690:	00002fb1 	.word	0x00002fb1
     694:	e826d695 	.word	0xe826d695
     698:	3e112e0b 	.word	0x3e112e0b
     69c:	00002329 	.word	0x00002329
     6a0:	40240000 	.word	0x40240000
     6a4:	000034b1 	.word	0x000034b1
     6a8:	3ff00000 	.word	0x3ff00000
     6ac:	00002949 	.word	0x00002949
     6b0:	00003add 	.word	0x00003add
     6b4:	00000bbd 	.word	0x00000bbd
     6b8:	40080000 	.word	0x40080000
     6bc:	000021bd 	.word	0x000021bd

000006c0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6c0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     6c2:	7e1a      	ldrb	r2, [r3, #24]
     6c4:	0792      	lsls	r2, r2, #30
     6c6:	d507      	bpl.n	6d8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     6c8:	2202      	movs	r2, #2
     6ca:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     6cc:	8b5b      	ldrh	r3, [r3, #26]
     6ce:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     6d0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     6d2:	17db      	asrs	r3, r3, #31
     6d4:	4018      	ands	r0, r3
}
     6d6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6d8:	8b5a      	ldrh	r2, [r3, #26]
     6da:	0752      	lsls	r2, r2, #29
     6dc:	d506      	bpl.n	6ec <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6de:	6859      	ldr	r1, [r3, #4]
     6e0:	22c0      	movs	r2, #192	; 0xc0
     6e2:	0292      	lsls	r2, r2, #10
     6e4:	430a      	orrs	r2, r1
     6e6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     6e8:	2018      	movs	r0, #24
     6ea:	e7f4      	b.n	6d6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     6ec:	2000      	movs	r0, #0
     6ee:	e7f2      	b.n	6d6 <_i2c_master_address_response+0x16>

000006f0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     6f0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6f2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     6f4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     6f6:	2401      	movs	r4, #1
     6f8:	2502      	movs	r5, #2
     6fa:	7e11      	ldrb	r1, [r2, #24]
     6fc:	4221      	tst	r1, r4
     6fe:	d10b      	bne.n	718 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     700:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     702:	4229      	tst	r1, r5
     704:	d106      	bne.n	714 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     706:	3301      	adds	r3, #1
     708:	b29b      	uxth	r3, r3
     70a:	8901      	ldrh	r1, [r0, #8]
     70c:	4299      	cmp	r1, r3
     70e:	d8f4      	bhi.n	6fa <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     710:	2012      	movs	r0, #18
     712:	e002      	b.n	71a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     714:	2000      	movs	r0, #0
     716:	e000      	b.n	71a <_i2c_master_wait_for_bus+0x2a>
     718:	2000      	movs	r0, #0
}
     71a:	bd30      	pop	{r4, r5, pc}

0000071c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     71c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     71e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     720:	6862      	ldr	r2, [r4, #4]
     722:	2380      	movs	r3, #128	; 0x80
     724:	02db      	lsls	r3, r3, #11
     726:	4313      	orrs	r3, r2
     728:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     72a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     72c:	4b02      	ldr	r3, [pc, #8]	; (738 <_i2c_master_send_hs_master_code+0x1c>)
     72e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     730:	2301      	movs	r3, #1
     732:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     734:	bd10      	pop	{r4, pc}
     736:	46c0      	nop			; (mov r8, r8)
     738:	000006f1 	.word	0x000006f1

0000073c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     73c:	b5f0      	push	{r4, r5, r6, r7, lr}
     73e:	46de      	mov	lr, fp
     740:	4657      	mov	r7, sl
     742:	464e      	mov	r6, r9
     744:	4645      	mov	r5, r8
     746:	b5e0      	push	{r5, r6, r7, lr}
     748:	b083      	sub	sp, #12
     74a:	0006      	movs	r6, r0
     74c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     74e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     750:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     752:	682b      	ldr	r3, [r5, #0]
     754:	011b      	lsls	r3, r3, #4
     756:	0fdb      	lsrs	r3, r3, #31
     758:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     75a:	7a4b      	ldrb	r3, [r1, #9]
     75c:	2b00      	cmp	r3, #0
     75e:	d12b      	bne.n	7b8 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     760:	686b      	ldr	r3, [r5, #4]
     762:	4a58      	ldr	r2, [pc, #352]	; (8c4 <_i2c_master_read_packet+0x188>)
     764:	4013      	ands	r3, r2
     766:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     768:	464b      	mov	r3, r9
     76a:	7a1b      	ldrb	r3, [r3, #8]
     76c:	2b00      	cmp	r3, #0
     76e:	d127      	bne.n	7c0 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     770:	464b      	mov	r3, r9
     772:	881b      	ldrh	r3, [r3, #0]
     774:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     776:	464a      	mov	r2, r9
     778:	7a52      	ldrb	r2, [r2, #9]
     77a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     77c:	4313      	orrs	r3, r2
     77e:	2201      	movs	r2, #1
     780:	4313      	orrs	r3, r2
     782:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     784:	0030      	movs	r0, r6
     786:	4b50      	ldr	r3, [pc, #320]	; (8c8 <_i2c_master_read_packet+0x18c>)
     788:	4798      	blx	r3
     78a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     78c:	4653      	mov	r3, sl
     78e:	2b00      	cmp	r3, #0
     790:	d003      	beq.n	79a <_i2c_master_read_packet+0x5e>
     792:	464b      	mov	r3, r9
     794:	885b      	ldrh	r3, [r3, #2]
     796:	2b01      	cmp	r3, #1
     798:	d03b      	beq.n	812 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     79a:	686b      	ldr	r3, [r5, #4]
     79c:	4a49      	ldr	r2, [pc, #292]	; (8c4 <_i2c_master_read_packet+0x188>)
     79e:	4013      	ands	r3, r2
     7a0:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     7a2:	9b01      	ldr	r3, [sp, #4]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d03a      	beq.n	81e <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     7a8:	9801      	ldr	r0, [sp, #4]
     7aa:	b003      	add	sp, #12
     7ac:	bc3c      	pop	{r2, r3, r4, r5}
     7ae:	4690      	mov	r8, r2
     7b0:	4699      	mov	r9, r3
     7b2:	46a2      	mov	sl, r4
     7b4:	46ab      	mov	fp, r5
     7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     7b8:	7a89      	ldrb	r1, [r1, #10]
     7ba:	4b44      	ldr	r3, [pc, #272]	; (8cc <_i2c_master_read_packet+0x190>)
     7bc:	4798      	blx	r3
     7be:	e7cf      	b.n	760 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     7c0:	464b      	mov	r3, r9
     7c2:	881b      	ldrh	r3, [r3, #0]
     7c4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7c6:	464a      	mov	r2, r9
     7c8:	7a52      	ldrb	r2, [r2, #9]
     7ca:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     7cc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7ce:	2280      	movs	r2, #128	; 0x80
     7d0:	0212      	lsls	r2, r2, #8
     7d2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     7d4:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     7d6:	0030      	movs	r0, r6
     7d8:	4b3b      	ldr	r3, [pc, #236]	; (8c8 <_i2c_master_read_packet+0x18c>)
     7da:	4798      	blx	r3
     7dc:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     7de:	686b      	ldr	r3, [r5, #4]
     7e0:	4a38      	ldr	r2, [pc, #224]	; (8c4 <_i2c_master_read_packet+0x188>)
     7e2:	4013      	ands	r3, r2
     7e4:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     7e6:	2800      	cmp	r0, #0
     7e8:	d1de      	bne.n	7a8 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     7ea:	0030      	movs	r0, r6
     7ec:	4b38      	ldr	r3, [pc, #224]	; (8d0 <_i2c_master_read_packet+0x194>)
     7ee:	4798      	blx	r3
     7f0:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     7f2:	2800      	cmp	r0, #0
     7f4:	d1d8      	bne.n	7a8 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7f6:	464b      	mov	r3, r9
     7f8:	881b      	ldrh	r3, [r3, #0]
     7fa:	0a1b      	lsrs	r3, r3, #8
     7fc:	2278      	movs	r2, #120	; 0x78
     7fe:	4313      	orrs	r3, r2
     800:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     802:	464a      	mov	r2, r9
     804:	7a52      	ldrb	r2, [r2, #9]
     806:	0392      	lsls	r2, r2, #14
     808:	2101      	movs	r1, #1
     80a:	430a      	orrs	r2, r1
     80c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     80e:	626b      	str	r3, [r5, #36]	; 0x24
     810:	e7b8      	b.n	784 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     812:	686a      	ldr	r2, [r5, #4]
     814:	2380      	movs	r3, #128	; 0x80
     816:	02db      	lsls	r3, r3, #11
     818:	4313      	orrs	r3, r2
     81a:	606b      	str	r3, [r5, #4]
     81c:	e7c1      	b.n	7a2 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     81e:	0030      	movs	r0, r6
     820:	4b2b      	ldr	r3, [pc, #172]	; (8d0 <_i2c_master_read_packet+0x194>)
     822:	4798      	blx	r3
     824:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     826:	2800      	cmp	r0, #0
     828:	d1be      	bne.n	7a8 <_i2c_master_read_packet+0x6c>
     82a:	3c01      	subs	r4, #1
     82c:	b2a4      	uxth	r4, r4
     82e:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     830:	4b28      	ldr	r3, [pc, #160]	; (8d4 <_i2c_master_read_packet+0x198>)
     832:	469b      	mov	fp, r3
     834:	e015      	b.n	862 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     836:	2c01      	cmp	r4, #1
     838:	d020      	beq.n	87c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     83a:	0030      	movs	r0, r6
     83c:	4b26      	ldr	r3, [pc, #152]	; (8d8 <_i2c_master_read_packet+0x19c>)
     83e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     840:	4643      	mov	r3, r8
     842:	1c5f      	adds	r7, r3, #1
     844:	b2bf      	uxth	r7, r7
     846:	2328      	movs	r3, #40	; 0x28
     848:	5ceb      	ldrb	r3, [r5, r3]
     84a:	464a      	mov	r2, r9
     84c:	6852      	ldr	r2, [r2, #4]
     84e:	4641      	mov	r1, r8
     850:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     852:	0030      	movs	r0, r6
     854:	4b1c      	ldr	r3, [pc, #112]	; (8c8 <_i2c_master_read_packet+0x18c>)
     856:	4798      	blx	r3
     858:	3c01      	subs	r4, #1
     85a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     85c:	2800      	cmp	r0, #0
     85e:	d115      	bne.n	88c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     860:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     862:	455c      	cmp	r4, fp
     864:	d014      	beq.n	890 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     866:	8b6b      	ldrh	r3, [r5, #26]
     868:	069b      	lsls	r3, r3, #26
     86a:	d527      	bpl.n	8bc <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     86c:	7af3      	ldrb	r3, [r6, #11]
     86e:	2b00      	cmp	r3, #0
     870:	d0e3      	beq.n	83a <_i2c_master_read_packet+0xfe>
     872:	4653      	mov	r3, sl
     874:	2b00      	cmp	r3, #0
     876:	d1de      	bne.n	836 <_i2c_master_read_packet+0xfa>
     878:	2c00      	cmp	r4, #0
     87a:	d1de      	bne.n	83a <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     87c:	686a      	ldr	r2, [r5, #4]
     87e:	2380      	movs	r3, #128	; 0x80
     880:	02db      	lsls	r3, r3, #11
     882:	4313      	orrs	r3, r2
     884:	606b      	str	r3, [r5, #4]
     886:	3c01      	subs	r4, #1
     888:	b2a4      	uxth	r4, r4
     88a:	e7ea      	b.n	862 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     88c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     88e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     890:	7ab3      	ldrb	r3, [r6, #10]
     892:	2b00      	cmp	r3, #0
     894:	d109      	bne.n	8aa <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     896:	0030      	movs	r0, r6
     898:	4b0f      	ldr	r3, [pc, #60]	; (8d8 <_i2c_master_read_packet+0x19c>)
     89a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     89c:	2328      	movs	r3, #40	; 0x28
     89e:	5cea      	ldrb	r2, [r5, r3]
     8a0:	464b      	mov	r3, r9
     8a2:	685b      	ldr	r3, [r3, #4]
     8a4:	4641      	mov	r1, r8
     8a6:	545a      	strb	r2, [r3, r1]
     8a8:	e77e      	b.n	7a8 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     8aa:	0030      	movs	r0, r6
     8ac:	4b0a      	ldr	r3, [pc, #40]	; (8d8 <_i2c_master_read_packet+0x19c>)
     8ae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8b0:	686a      	ldr	r2, [r5, #4]
     8b2:	23c0      	movs	r3, #192	; 0xc0
     8b4:	029b      	lsls	r3, r3, #10
     8b6:	4313      	orrs	r3, r2
     8b8:	606b      	str	r3, [r5, #4]
     8ba:	e7ec      	b.n	896 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     8bc:	2341      	movs	r3, #65	; 0x41
     8be:	9301      	str	r3, [sp, #4]
     8c0:	e772      	b.n	7a8 <_i2c_master_read_packet+0x6c>
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	fffbffff 	.word	0xfffbffff
     8c8:	000006f1 	.word	0x000006f1
     8cc:	0000071d 	.word	0x0000071d
     8d0:	000006c1 	.word	0x000006c1
     8d4:	0000ffff 	.word	0x0000ffff
     8d8:	000003ed 	.word	0x000003ed

000008dc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8de:	46de      	mov	lr, fp
     8e0:	4657      	mov	r7, sl
     8e2:	464e      	mov	r6, r9
     8e4:	4645      	mov	r5, r8
     8e6:	b5e0      	push	{r5, r6, r7, lr}
     8e8:	b083      	sub	sp, #12
     8ea:	0006      	movs	r6, r0
     8ec:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8ee:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     8f0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     8f2:	4b32      	ldr	r3, [pc, #200]	; (9bc <_i2c_master_write_packet+0xe0>)
     8f4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     8f6:	7a7b      	ldrb	r3, [r7, #9]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d11d      	bne.n	938 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     8fc:	686b      	ldr	r3, [r5, #4]
     8fe:	4a30      	ldr	r2, [pc, #192]	; (9c0 <_i2c_master_write_packet+0xe4>)
     900:	4013      	ands	r3, r2
     902:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     904:	7a3b      	ldrb	r3, [r7, #8]
     906:	2b00      	cmp	r3, #0
     908:	d01b      	beq.n	942 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     90a:	883b      	ldrh	r3, [r7, #0]
     90c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     90e:	7a7a      	ldrb	r2, [r7, #9]
     910:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     912:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     914:	2280      	movs	r2, #128	; 0x80
     916:	0212      	lsls	r2, r2, #8
     918:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     91a:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     91c:	0030      	movs	r0, r6
     91e:	4b29      	ldr	r3, [pc, #164]	; (9c4 <_i2c_master_write_packet+0xe8>)
     920:	4798      	blx	r3
     922:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     924:	2800      	cmp	r0, #0
     926:	d013      	beq.n	950 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     928:	9801      	ldr	r0, [sp, #4]
     92a:	b003      	add	sp, #12
     92c:	bc3c      	pop	{r2, r3, r4, r5}
     92e:	4690      	mov	r8, r2
     930:	4699      	mov	r9, r3
     932:	46a2      	mov	sl, r4
     934:	46ab      	mov	fp, r5
     936:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     938:	7ab9      	ldrb	r1, [r7, #10]
     93a:	0030      	movs	r0, r6
     93c:	4b22      	ldr	r3, [pc, #136]	; (9c8 <_i2c_master_write_packet+0xec>)
     93e:	4798      	blx	r3
     940:	e7dc      	b.n	8fc <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     942:	883b      	ldrh	r3, [r7, #0]
     944:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     946:	7a7a      	ldrb	r2, [r7, #9]
     948:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     94a:	4313      	orrs	r3, r2
     94c:	626b      	str	r3, [r5, #36]	; 0x24
     94e:	e7e5      	b.n	91c <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     950:	0030      	movs	r0, r6
     952:	4b1e      	ldr	r3, [pc, #120]	; (9cc <_i2c_master_write_packet+0xf0>)
     954:	4798      	blx	r3
     956:	1e03      	subs	r3, r0, #0
     958:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     95a:	d1e5      	bne.n	928 <_i2c_master_write_packet+0x4c>
     95c:	46a0      	mov	r8, r4
     95e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     960:	3320      	adds	r3, #32
     962:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     964:	4b15      	ldr	r3, [pc, #84]	; (9bc <_i2c_master_write_packet+0xe0>)
     966:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     968:	4b16      	ldr	r3, [pc, #88]	; (9c4 <_i2c_master_write_packet+0xe8>)
     96a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     96c:	4544      	cmp	r4, r8
     96e:	d015      	beq.n	99c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     970:	8b6b      	ldrh	r3, [r5, #26]
     972:	464a      	mov	r2, r9
     974:	4213      	tst	r3, r2
     976:	d01d      	beq.n	9b4 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     978:	0030      	movs	r0, r6
     97a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	5d1a      	ldrb	r2, [r3, r4]
     980:	2328      	movs	r3, #40	; 0x28
     982:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     984:	0030      	movs	r0, r6
     986:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     988:	2800      	cmp	r0, #0
     98a:	d106      	bne.n	99a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     98c:	8b6b      	ldrh	r3, [r5, #26]
     98e:	3401      	adds	r4, #1
     990:	075b      	lsls	r3, r3, #29
     992:	d5eb      	bpl.n	96c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     994:	231e      	movs	r3, #30
     996:	9301      	str	r3, [sp, #4]
     998:	e000      	b.n	99c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     99a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     99c:	7ab3      	ldrb	r3, [r6, #10]
     99e:	2b00      	cmp	r3, #0
     9a0:	d0c2      	beq.n	928 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     9a2:	0030      	movs	r0, r6
     9a4:	4b05      	ldr	r3, [pc, #20]	; (9bc <_i2c_master_write_packet+0xe0>)
     9a6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9a8:	686a      	ldr	r2, [r5, #4]
     9aa:	23c0      	movs	r3, #192	; 0xc0
     9ac:	029b      	lsls	r3, r3, #10
     9ae:	4313      	orrs	r3, r2
     9b0:	606b      	str	r3, [r5, #4]
     9b2:	e7b9      	b.n	928 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     9b4:	2341      	movs	r3, #65	; 0x41
     9b6:	9301      	str	r3, [sp, #4]
     9b8:	e7b6      	b.n	928 <_i2c_master_write_packet+0x4c>
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	000003ed 	.word	0x000003ed
     9c0:	fffbffff 	.word	0xfffbffff
     9c4:	000006f1 	.word	0x000006f1
     9c8:	0000071d 	.word	0x0000071d
     9cc:	000006c1 	.word	0x000006c1

000009d0 <i2c_master_read_packet_wait>:
{
     9d0:	b510      	push	{r4, lr}
	module->send_stop = true;
     9d2:	2301      	movs	r3, #1
     9d4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9d6:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     9d8:	4b01      	ldr	r3, [pc, #4]	; (9e0 <i2c_master_read_packet_wait+0x10>)
     9da:	4798      	blx	r3
}
     9dc:	bd10      	pop	{r4, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	0000073d 	.word	0x0000073d

000009e4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9e4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     9e6:	2301      	movs	r3, #1
     9e8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9ea:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     9ec:	4b01      	ldr	r3, [pc, #4]	; (9f4 <i2c_master_write_packet_wait+0x10>)
     9ee:	4798      	blx	r3
}
     9f0:	bd10      	pop	{r4, pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	000008dd 	.word	0x000008dd

000009f8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9fa:	46de      	mov	lr, fp
     9fc:	4657      	mov	r7, sl
     9fe:	464e      	mov	r6, r9
     a00:	4645      	mov	r5, r8
     a02:	b5e0      	push	{r5, r6, r7, lr}
     a04:	b087      	sub	sp, #28
     a06:	4680      	mov	r8, r0
     a08:	9104      	str	r1, [sp, #16]
     a0a:	0016      	movs	r6, r2
     a0c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a0e:	2200      	movs	r2, #0
     a10:	2300      	movs	r3, #0
     a12:	2100      	movs	r1, #0
     a14:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     a16:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     a18:	2001      	movs	r0, #1
     a1a:	0021      	movs	r1, r4
     a1c:	9600      	str	r6, [sp, #0]
     a1e:	9701      	str	r7, [sp, #4]
     a20:	465c      	mov	r4, fp
     a22:	9403      	str	r4, [sp, #12]
     a24:	4644      	mov	r4, r8
     a26:	9405      	str	r4, [sp, #20]
     a28:	e013      	b.n	a52 <long_division+0x5a>
     a2a:	2420      	movs	r4, #32
     a2c:	1a64      	subs	r4, r4, r1
     a2e:	0005      	movs	r5, r0
     a30:	40e5      	lsrs	r5, r4
     a32:	46a8      	mov	r8, r5
     a34:	e014      	b.n	a60 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     a36:	9c00      	ldr	r4, [sp, #0]
     a38:	9d01      	ldr	r5, [sp, #4]
     a3a:	1b12      	subs	r2, r2, r4
     a3c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     a3e:	465c      	mov	r4, fp
     a40:	464d      	mov	r5, r9
     a42:	432c      	orrs	r4, r5
     a44:	46a3      	mov	fp, r4
     a46:	9c03      	ldr	r4, [sp, #12]
     a48:	4645      	mov	r5, r8
     a4a:	432c      	orrs	r4, r5
     a4c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     a4e:	3901      	subs	r1, #1
     a50:	d325      	bcc.n	a9e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     a52:	2420      	movs	r4, #32
     a54:	4264      	negs	r4, r4
     a56:	190c      	adds	r4, r1, r4
     a58:	d4e7      	bmi.n	a2a <long_division+0x32>
     a5a:	0005      	movs	r5, r0
     a5c:	40a5      	lsls	r5, r4
     a5e:	46a8      	mov	r8, r5
     a60:	0004      	movs	r4, r0
     a62:	408c      	lsls	r4, r1
     a64:	46a1      	mov	r9, r4
		r = r << 1;
     a66:	1892      	adds	r2, r2, r2
     a68:	415b      	adcs	r3, r3
     a6a:	0014      	movs	r4, r2
     a6c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     a6e:	9e05      	ldr	r6, [sp, #20]
     a70:	464f      	mov	r7, r9
     a72:	403e      	ands	r6, r7
     a74:	46b4      	mov	ip, r6
     a76:	9e04      	ldr	r6, [sp, #16]
     a78:	4647      	mov	r7, r8
     a7a:	403e      	ands	r6, r7
     a7c:	46b2      	mov	sl, r6
     a7e:	4666      	mov	r6, ip
     a80:	4657      	mov	r7, sl
     a82:	433e      	orrs	r6, r7
     a84:	d003      	beq.n	a8e <long_division+0x96>
			r |= 0x01;
     a86:	0006      	movs	r6, r0
     a88:	4326      	orrs	r6, r4
     a8a:	0032      	movs	r2, r6
     a8c:	002b      	movs	r3, r5
		if (r >= d) {
     a8e:	9c00      	ldr	r4, [sp, #0]
     a90:	9d01      	ldr	r5, [sp, #4]
     a92:	429d      	cmp	r5, r3
     a94:	d8db      	bhi.n	a4e <long_division+0x56>
     a96:	d1ce      	bne.n	a36 <long_division+0x3e>
     a98:	4294      	cmp	r4, r2
     a9a:	d8d8      	bhi.n	a4e <long_division+0x56>
     a9c:	e7cb      	b.n	a36 <long_division+0x3e>
     a9e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     aa0:	4658      	mov	r0, fp
     aa2:	0019      	movs	r1, r3
     aa4:	b007      	add	sp, #28
     aa6:	bc3c      	pop	{r2, r3, r4, r5}
     aa8:	4690      	mov	r8, r2
     aaa:	4699      	mov	r9, r3
     aac:	46a2      	mov	sl, r4
     aae:	46ab      	mov	fp, r5
     ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ab2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     ab2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     ab4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ab6:	2340      	movs	r3, #64	; 0x40
     ab8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     aba:	4281      	cmp	r1, r0
     abc:	d202      	bcs.n	ac4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     abe:	0018      	movs	r0, r3
     ac0:	bd10      	pop	{r4, pc}
		baud_calculated++;
     ac2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     ac4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     ac6:	1c63      	adds	r3, r4, #1
     ac8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     aca:	4288      	cmp	r0, r1
     acc:	d9f9      	bls.n	ac2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ace:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     ad0:	2cff      	cmp	r4, #255	; 0xff
     ad2:	d8f4      	bhi.n	abe <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     ad4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     ad6:	2300      	movs	r3, #0
     ad8:	e7f1      	b.n	abe <_sercom_get_sync_baud_val+0xc>
	...

00000adc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     adc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ade:	b083      	sub	sp, #12
     ae0:	000f      	movs	r7, r1
     ae2:	0016      	movs	r6, r2
     ae4:	aa08      	add	r2, sp, #32
     ae6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     ae8:	0004      	movs	r4, r0
     aea:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     aec:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     aee:	42bc      	cmp	r4, r7
     af0:	d902      	bls.n	af8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     af2:	0010      	movs	r0, r2
     af4:	b003      	add	sp, #12
     af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     af8:	2b00      	cmp	r3, #0
     afa:	d114      	bne.n	b26 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     afc:	0002      	movs	r2, r0
     afe:	0008      	movs	r0, r1
     b00:	2100      	movs	r1, #0
     b02:	4c19      	ldr	r4, [pc, #100]	; (b68 <_sercom_get_async_baud_val+0x8c>)
     b04:	47a0      	blx	r4
     b06:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     b08:	003a      	movs	r2, r7
     b0a:	2300      	movs	r3, #0
     b0c:	2000      	movs	r0, #0
     b0e:	4c17      	ldr	r4, [pc, #92]	; (b6c <_sercom_get_async_baud_val+0x90>)
     b10:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b12:	2200      	movs	r2, #0
     b14:	2301      	movs	r3, #1
     b16:	1a12      	subs	r2, r2, r0
     b18:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     b1a:	0c12      	lsrs	r2, r2, #16
     b1c:	041b      	lsls	r3, r3, #16
     b1e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     b20:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     b22:	2200      	movs	r2, #0
     b24:	e7e5      	b.n	af2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     b26:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b28:	2b01      	cmp	r3, #1
     b2a:	d1f9      	bne.n	b20 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     b2c:	000a      	movs	r2, r1
     b2e:	2300      	movs	r3, #0
     b30:	2100      	movs	r1, #0
     b32:	4c0d      	ldr	r4, [pc, #52]	; (b68 <_sercom_get_async_baud_val+0x8c>)
     b34:	47a0      	blx	r4
     b36:	0002      	movs	r2, r0
     b38:	000b      	movs	r3, r1
     b3a:	9200      	str	r2, [sp, #0]
     b3c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     b3e:	0038      	movs	r0, r7
     b40:	2100      	movs	r1, #0
     b42:	4c0a      	ldr	r4, [pc, #40]	; (b6c <_sercom_get_async_baud_val+0x90>)
     b44:	47a0      	blx	r4
     b46:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     b48:	2380      	movs	r3, #128	; 0x80
     b4a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b4c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     b4e:	4298      	cmp	r0, r3
     b50:	d8cf      	bhi.n	af2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     b52:	0f79      	lsrs	r1, r7, #29
     b54:	00f8      	lsls	r0, r7, #3
     b56:	9a00      	ldr	r2, [sp, #0]
     b58:	9b01      	ldr	r3, [sp, #4]
     b5a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     b5c:	00ea      	lsls	r2, r5, #3
     b5e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     b60:	b2d2      	uxtb	r2, r2
     b62:	0352      	lsls	r2, r2, #13
     b64:	432a      	orrs	r2, r5
     b66:	e7db      	b.n	b20 <_sercom_get_async_baud_val+0x44>
     b68:	000022d5 	.word	0x000022d5
     b6c:	000009f9 	.word	0x000009f9

00000b70 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     b70:	b510      	push	{r4, lr}
     b72:	b082      	sub	sp, #8
     b74:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     b76:	4b0e      	ldr	r3, [pc, #56]	; (bb0 <sercom_set_gclk_generator+0x40>)
     b78:	781b      	ldrb	r3, [r3, #0]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d007      	beq.n	b8e <sercom_set_gclk_generator+0x1e>
     b7e:	2900      	cmp	r1, #0
     b80:	d105      	bne.n	b8e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     b82:	4b0b      	ldr	r3, [pc, #44]	; (bb0 <sercom_set_gclk_generator+0x40>)
     b84:	785b      	ldrb	r3, [r3, #1]
     b86:	4283      	cmp	r3, r0
     b88:	d010      	beq.n	bac <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b8a:	201d      	movs	r0, #29
     b8c:	e00c      	b.n	ba8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     b8e:	a901      	add	r1, sp, #4
     b90:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b92:	2013      	movs	r0, #19
     b94:	4b07      	ldr	r3, [pc, #28]	; (bb4 <sercom_set_gclk_generator+0x44>)
     b96:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b98:	2013      	movs	r0, #19
     b9a:	4b07      	ldr	r3, [pc, #28]	; (bb8 <sercom_set_gclk_generator+0x48>)
     b9c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     b9e:	4b04      	ldr	r3, [pc, #16]	; (bb0 <sercom_set_gclk_generator+0x40>)
     ba0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     ba2:	2201      	movs	r2, #1
     ba4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     ba6:	2000      	movs	r0, #0
}
     ba8:	b002      	add	sp, #8
     baa:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     bac:	2000      	movs	r0, #0
     bae:	e7fb      	b.n	ba8 <sercom_set_gclk_generator+0x38>
     bb0:	200000a0 	.word	0x200000a0
     bb4:	00001a7d 	.word	0x00001a7d
     bb8:	000019f1 	.word	0x000019f1

00000bbc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     bbc:	4b40      	ldr	r3, [pc, #256]	; (cc0 <_sercom_get_default_pad+0x104>)
     bbe:	4298      	cmp	r0, r3
     bc0:	d031      	beq.n	c26 <_sercom_get_default_pad+0x6a>
     bc2:	d90a      	bls.n	bda <_sercom_get_default_pad+0x1e>
     bc4:	4b3f      	ldr	r3, [pc, #252]	; (cc4 <_sercom_get_default_pad+0x108>)
     bc6:	4298      	cmp	r0, r3
     bc8:	d04d      	beq.n	c66 <_sercom_get_default_pad+0xaa>
     bca:	4b3f      	ldr	r3, [pc, #252]	; (cc8 <_sercom_get_default_pad+0x10c>)
     bcc:	4298      	cmp	r0, r3
     bce:	d05a      	beq.n	c86 <_sercom_get_default_pad+0xca>
     bd0:	4b3e      	ldr	r3, [pc, #248]	; (ccc <_sercom_get_default_pad+0x110>)
     bd2:	4298      	cmp	r0, r3
     bd4:	d037      	beq.n	c46 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     bd6:	2000      	movs	r0, #0
}
     bd8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     bda:	4b3d      	ldr	r3, [pc, #244]	; (cd0 <_sercom_get_default_pad+0x114>)
     bdc:	4298      	cmp	r0, r3
     bde:	d00c      	beq.n	bfa <_sercom_get_default_pad+0x3e>
     be0:	4b3c      	ldr	r3, [pc, #240]	; (cd4 <_sercom_get_default_pad+0x118>)
     be2:	4298      	cmp	r0, r3
     be4:	d1f7      	bne.n	bd6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     be6:	2901      	cmp	r1, #1
     be8:	d017      	beq.n	c1a <_sercom_get_default_pad+0x5e>
     bea:	2900      	cmp	r1, #0
     bec:	d05d      	beq.n	caa <_sercom_get_default_pad+0xee>
     bee:	2902      	cmp	r1, #2
     bf0:	d015      	beq.n	c1e <_sercom_get_default_pad+0x62>
     bf2:	2903      	cmp	r1, #3
     bf4:	d015      	beq.n	c22 <_sercom_get_default_pad+0x66>
	return 0;
     bf6:	2000      	movs	r0, #0
     bf8:	e7ee      	b.n	bd8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bfa:	2901      	cmp	r1, #1
     bfc:	d007      	beq.n	c0e <_sercom_get_default_pad+0x52>
     bfe:	2900      	cmp	r1, #0
     c00:	d051      	beq.n	ca6 <_sercom_get_default_pad+0xea>
     c02:	2902      	cmp	r1, #2
     c04:	d005      	beq.n	c12 <_sercom_get_default_pad+0x56>
     c06:	2903      	cmp	r1, #3
     c08:	d005      	beq.n	c16 <_sercom_get_default_pad+0x5a>
	return 0;
     c0a:	2000      	movs	r0, #0
     c0c:	e7e4      	b.n	bd8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c0e:	4832      	ldr	r0, [pc, #200]	; (cd8 <_sercom_get_default_pad+0x11c>)
     c10:	e7e2      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c12:	4832      	ldr	r0, [pc, #200]	; (cdc <_sercom_get_default_pad+0x120>)
     c14:	e7e0      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c16:	4832      	ldr	r0, [pc, #200]	; (ce0 <_sercom_get_default_pad+0x124>)
     c18:	e7de      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c1a:	4832      	ldr	r0, [pc, #200]	; (ce4 <_sercom_get_default_pad+0x128>)
     c1c:	e7dc      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c1e:	4832      	ldr	r0, [pc, #200]	; (ce8 <_sercom_get_default_pad+0x12c>)
     c20:	e7da      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c22:	4832      	ldr	r0, [pc, #200]	; (cec <_sercom_get_default_pad+0x130>)
     c24:	e7d8      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c26:	2901      	cmp	r1, #1
     c28:	d007      	beq.n	c3a <_sercom_get_default_pad+0x7e>
     c2a:	2900      	cmp	r1, #0
     c2c:	d03f      	beq.n	cae <_sercom_get_default_pad+0xf2>
     c2e:	2902      	cmp	r1, #2
     c30:	d005      	beq.n	c3e <_sercom_get_default_pad+0x82>
     c32:	2903      	cmp	r1, #3
     c34:	d005      	beq.n	c42 <_sercom_get_default_pad+0x86>
	return 0;
     c36:	2000      	movs	r0, #0
     c38:	e7ce      	b.n	bd8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c3a:	482d      	ldr	r0, [pc, #180]	; (cf0 <_sercom_get_default_pad+0x134>)
     c3c:	e7cc      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c3e:	482d      	ldr	r0, [pc, #180]	; (cf4 <_sercom_get_default_pad+0x138>)
     c40:	e7ca      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c42:	482d      	ldr	r0, [pc, #180]	; (cf8 <_sercom_get_default_pad+0x13c>)
     c44:	e7c8      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c46:	2901      	cmp	r1, #1
     c48:	d007      	beq.n	c5a <_sercom_get_default_pad+0x9e>
     c4a:	2900      	cmp	r1, #0
     c4c:	d031      	beq.n	cb2 <_sercom_get_default_pad+0xf6>
     c4e:	2902      	cmp	r1, #2
     c50:	d005      	beq.n	c5e <_sercom_get_default_pad+0xa2>
     c52:	2903      	cmp	r1, #3
     c54:	d005      	beq.n	c62 <_sercom_get_default_pad+0xa6>
	return 0;
     c56:	2000      	movs	r0, #0
     c58:	e7be      	b.n	bd8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c5a:	4828      	ldr	r0, [pc, #160]	; (cfc <_sercom_get_default_pad+0x140>)
     c5c:	e7bc      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c5e:	4828      	ldr	r0, [pc, #160]	; (d00 <_sercom_get_default_pad+0x144>)
     c60:	e7ba      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c62:	4828      	ldr	r0, [pc, #160]	; (d04 <_sercom_get_default_pad+0x148>)
     c64:	e7b8      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c66:	2901      	cmp	r1, #1
     c68:	d007      	beq.n	c7a <_sercom_get_default_pad+0xbe>
     c6a:	2900      	cmp	r1, #0
     c6c:	d023      	beq.n	cb6 <_sercom_get_default_pad+0xfa>
     c6e:	2902      	cmp	r1, #2
     c70:	d005      	beq.n	c7e <_sercom_get_default_pad+0xc2>
     c72:	2903      	cmp	r1, #3
     c74:	d005      	beq.n	c82 <_sercom_get_default_pad+0xc6>
	return 0;
     c76:	2000      	movs	r0, #0
     c78:	e7ae      	b.n	bd8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c7a:	4823      	ldr	r0, [pc, #140]	; (d08 <_sercom_get_default_pad+0x14c>)
     c7c:	e7ac      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c7e:	4823      	ldr	r0, [pc, #140]	; (d0c <_sercom_get_default_pad+0x150>)
     c80:	e7aa      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c82:	4823      	ldr	r0, [pc, #140]	; (d10 <_sercom_get_default_pad+0x154>)
     c84:	e7a8      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c86:	2901      	cmp	r1, #1
     c88:	d007      	beq.n	c9a <_sercom_get_default_pad+0xde>
     c8a:	2900      	cmp	r1, #0
     c8c:	d015      	beq.n	cba <_sercom_get_default_pad+0xfe>
     c8e:	2902      	cmp	r1, #2
     c90:	d005      	beq.n	c9e <_sercom_get_default_pad+0xe2>
     c92:	2903      	cmp	r1, #3
     c94:	d005      	beq.n	ca2 <_sercom_get_default_pad+0xe6>
	return 0;
     c96:	2000      	movs	r0, #0
     c98:	e79e      	b.n	bd8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c9a:	481e      	ldr	r0, [pc, #120]	; (d14 <_sercom_get_default_pad+0x158>)
     c9c:	e79c      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     c9e:	481e      	ldr	r0, [pc, #120]	; (d18 <_sercom_get_default_pad+0x15c>)
     ca0:	e79a      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     ca2:	481e      	ldr	r0, [pc, #120]	; (d1c <_sercom_get_default_pad+0x160>)
     ca4:	e798      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     ca6:	481e      	ldr	r0, [pc, #120]	; (d20 <_sercom_get_default_pad+0x164>)
     ca8:	e796      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     caa:	2003      	movs	r0, #3
     cac:	e794      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     cae:	481d      	ldr	r0, [pc, #116]	; (d24 <_sercom_get_default_pad+0x168>)
     cb0:	e792      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     cb2:	481d      	ldr	r0, [pc, #116]	; (d28 <_sercom_get_default_pad+0x16c>)
     cb4:	e790      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     cb6:	481d      	ldr	r0, [pc, #116]	; (d2c <_sercom_get_default_pad+0x170>)
     cb8:	e78e      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     cba:	481d      	ldr	r0, [pc, #116]	; (d30 <_sercom_get_default_pad+0x174>)
     cbc:	e78c      	b.n	bd8 <_sercom_get_default_pad+0x1c>
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	42001000 	.word	0x42001000
     cc4:	42001800 	.word	0x42001800
     cc8:	42001c00 	.word	0x42001c00
     ccc:	42001400 	.word	0x42001400
     cd0:	42000800 	.word	0x42000800
     cd4:	42000c00 	.word	0x42000c00
     cd8:	00050003 	.word	0x00050003
     cdc:	00060003 	.word	0x00060003
     ce0:	00070003 	.word	0x00070003
     ce4:	00010003 	.word	0x00010003
     ce8:	001e0003 	.word	0x001e0003
     cec:	001f0003 	.word	0x001f0003
     cf0:	000d0002 	.word	0x000d0002
     cf4:	000e0002 	.word	0x000e0002
     cf8:	000f0002 	.word	0x000f0002
     cfc:	00110003 	.word	0x00110003
     d00:	00120003 	.word	0x00120003
     d04:	00130003 	.word	0x00130003
     d08:	003f0005 	.word	0x003f0005
     d0c:	003e0005 	.word	0x003e0005
     d10:	00520005 	.word	0x00520005
     d14:	00170003 	.word	0x00170003
     d18:	00180003 	.word	0x00180003
     d1c:	00190003 	.word	0x00190003
     d20:	00040003 	.word	0x00040003
     d24:	000c0002 	.word	0x000c0002
     d28:	00100003 	.word	0x00100003
     d2c:	00530005 	.word	0x00530005
     d30:	00160003 	.word	0x00160003

00000d34 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d34:	b530      	push	{r4, r5, lr}
     d36:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d38:	4b0b      	ldr	r3, [pc, #44]	; (d68 <_sercom_get_sercom_inst_index+0x34>)
     d3a:	466a      	mov	r2, sp
     d3c:	cb32      	ldmia	r3!, {r1, r4, r5}
     d3e:	c232      	stmia	r2!, {r1, r4, r5}
     d40:	cb32      	ldmia	r3!, {r1, r4, r5}
     d42:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d44:	9b00      	ldr	r3, [sp, #0]
     d46:	4283      	cmp	r3, r0
     d48:	d00b      	beq.n	d62 <_sercom_get_sercom_inst_index+0x2e>
     d4a:	2301      	movs	r3, #1
     d4c:	009a      	lsls	r2, r3, #2
     d4e:	4669      	mov	r1, sp
     d50:	5852      	ldr	r2, [r2, r1]
     d52:	4282      	cmp	r2, r0
     d54:	d006      	beq.n	d64 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d56:	3301      	adds	r3, #1
     d58:	2b06      	cmp	r3, #6
     d5a:	d1f7      	bne.n	d4c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d5c:	2000      	movs	r0, #0
}
     d5e:	b007      	add	sp, #28
     d60:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d62:	2300      	movs	r3, #0
			return i;
     d64:	b2d8      	uxtb	r0, r3
     d66:	e7fa      	b.n	d5e <_sercom_get_sercom_inst_index+0x2a>
     d68:	00004c2c 	.word	0x00004c2c

00000d6c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d6c:	4770      	bx	lr
	...

00000d70 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d70:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d72:	4b0a      	ldr	r3, [pc, #40]	; (d9c <_sercom_set_handler+0x2c>)
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	2b00      	cmp	r3, #0
     d78:	d10c      	bne.n	d94 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d7a:	4f09      	ldr	r7, [pc, #36]	; (da0 <_sercom_set_handler+0x30>)
     d7c:	4e09      	ldr	r6, [pc, #36]	; (da4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     d7e:	4d0a      	ldr	r5, [pc, #40]	; (da8 <_sercom_set_handler+0x38>)
     d80:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d82:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     d84:	195a      	adds	r2, r3, r5
     d86:	6014      	str	r4, [r2, #0]
     d88:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d8a:	2b18      	cmp	r3, #24
     d8c:	d1f9      	bne.n	d82 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     d8e:	2201      	movs	r2, #1
     d90:	4b02      	ldr	r3, [pc, #8]	; (d9c <_sercom_set_handler+0x2c>)
     d92:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d94:	0080      	lsls	r0, r0, #2
     d96:	4b02      	ldr	r3, [pc, #8]	; (da0 <_sercom_set_handler+0x30>)
     d98:	50c1      	str	r1, [r0, r3]
}
     d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d9c:	200000a2 	.word	0x200000a2
     da0:	200000a4 	.word	0x200000a4
     da4:	00000d6d 	.word	0x00000d6d
     da8:	2000020c 	.word	0x2000020c

00000dac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     dac:	b500      	push	{lr}
     dae:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     db0:	2309      	movs	r3, #9
     db2:	466a      	mov	r2, sp
     db4:	7013      	strb	r3, [r2, #0]
     db6:	3301      	adds	r3, #1
     db8:	7053      	strb	r3, [r2, #1]
     dba:	3301      	adds	r3, #1
     dbc:	7093      	strb	r3, [r2, #2]
     dbe:	3301      	adds	r3, #1
     dc0:	70d3      	strb	r3, [r2, #3]
     dc2:	3301      	adds	r3, #1
     dc4:	7113      	strb	r3, [r2, #4]
     dc6:	3301      	adds	r3, #1
     dc8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <_sercom_get_interrupt_vector+0x2c>)
     dcc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     dce:	466b      	mov	r3, sp
     dd0:	5618      	ldrsb	r0, [r3, r0]
}
     dd2:	b003      	add	sp, #12
     dd4:	bd00      	pop	{pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	00000d35 	.word	0x00000d35

00000ddc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ddc:	b510      	push	{r4, lr}
     dde:	4b02      	ldr	r3, [pc, #8]	; (de8 <SERCOM0_Handler+0xc>)
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	2000      	movs	r0, #0
     de4:	4798      	blx	r3
     de6:	bd10      	pop	{r4, pc}
     de8:	200000a4 	.word	0x200000a4

00000dec <SERCOM1_Handler>:
     dec:	b510      	push	{r4, lr}
     dee:	4b02      	ldr	r3, [pc, #8]	; (df8 <SERCOM1_Handler+0xc>)
     df0:	685b      	ldr	r3, [r3, #4]
     df2:	2001      	movs	r0, #1
     df4:	4798      	blx	r3
     df6:	bd10      	pop	{r4, pc}
     df8:	200000a4 	.word	0x200000a4

00000dfc <SERCOM2_Handler>:
     dfc:	b510      	push	{r4, lr}
     dfe:	4b02      	ldr	r3, [pc, #8]	; (e08 <SERCOM2_Handler+0xc>)
     e00:	689b      	ldr	r3, [r3, #8]
     e02:	2002      	movs	r0, #2
     e04:	4798      	blx	r3
     e06:	bd10      	pop	{r4, pc}
     e08:	200000a4 	.word	0x200000a4

00000e0c <SERCOM3_Handler>:
     e0c:	b510      	push	{r4, lr}
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <SERCOM3_Handler+0xc>)
     e10:	68db      	ldr	r3, [r3, #12]
     e12:	2003      	movs	r0, #3
     e14:	4798      	blx	r3
     e16:	bd10      	pop	{r4, pc}
     e18:	200000a4 	.word	0x200000a4

00000e1c <SERCOM4_Handler>:
     e1c:	b510      	push	{r4, lr}
     e1e:	4b02      	ldr	r3, [pc, #8]	; (e28 <SERCOM4_Handler+0xc>)
     e20:	691b      	ldr	r3, [r3, #16]
     e22:	2004      	movs	r0, #4
     e24:	4798      	blx	r3
     e26:	bd10      	pop	{r4, pc}
     e28:	200000a4 	.word	0x200000a4

00000e2c <SERCOM5_Handler>:
     e2c:	b510      	push	{r4, lr}
     e2e:	4b02      	ldr	r3, [pc, #8]	; (e38 <SERCOM5_Handler+0xc>)
     e30:	695b      	ldr	r3, [r3, #20]
     e32:	2005      	movs	r0, #5
     e34:	4798      	blx	r3
     e36:	bd10      	pop	{r4, pc}
     e38:	200000a4 	.word	0x200000a4

00000e3c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e3e:	46de      	mov	lr, fp
     e40:	4657      	mov	r7, sl
     e42:	464e      	mov	r6, r9
     e44:	4645      	mov	r5, r8
     e46:	b5e0      	push	{r5, r6, r7, lr}
     e48:	b091      	sub	sp, #68	; 0x44
     e4a:	0005      	movs	r5, r0
     e4c:	000c      	movs	r4, r1
     e4e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e50:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e52:	0008      	movs	r0, r1
     e54:	4bbc      	ldr	r3, [pc, #752]	; (1148 <usart_init+0x30c>)
     e56:	4798      	blx	r3
     e58:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e5a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e5c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e5e:	07db      	lsls	r3, r3, #31
     e60:	d506      	bpl.n	e70 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     e62:	b011      	add	sp, #68	; 0x44
     e64:	bc3c      	pop	{r2, r3, r4, r5}
     e66:	4690      	mov	r8, r2
     e68:	4699      	mov	r9, r3
     e6a:	46a2      	mov	sl, r4
     e6c:	46ab      	mov	fp, r5
     e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e70:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     e72:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e74:	079b      	lsls	r3, r3, #30
     e76:	d4f4      	bmi.n	e62 <usart_init+0x26>
     e78:	49b4      	ldr	r1, [pc, #720]	; (114c <usart_init+0x310>)
     e7a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e7c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e7e:	2301      	movs	r3, #1
     e80:	40bb      	lsls	r3, r7
     e82:	4303      	orrs	r3, r0
     e84:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     e86:	a90f      	add	r1, sp, #60	; 0x3c
     e88:	272d      	movs	r7, #45	; 0x2d
     e8a:	5df3      	ldrb	r3, [r6, r7]
     e8c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e8e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e90:	b2d3      	uxtb	r3, r2
     e92:	9302      	str	r3, [sp, #8]
     e94:	0018      	movs	r0, r3
     e96:	4bae      	ldr	r3, [pc, #696]	; (1150 <usart_init+0x314>)
     e98:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e9a:	9802      	ldr	r0, [sp, #8]
     e9c:	4bad      	ldr	r3, [pc, #692]	; (1154 <usart_init+0x318>)
     e9e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ea0:	5df0      	ldrb	r0, [r6, r7]
     ea2:	2100      	movs	r1, #0
     ea4:	4bac      	ldr	r3, [pc, #688]	; (1158 <usart_init+0x31c>)
     ea6:	4798      	blx	r3
	module->character_size = config->character_size;
     ea8:	7af3      	ldrb	r3, [r6, #11]
     eaa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     eac:	2324      	movs	r3, #36	; 0x24
     eae:	5cf3      	ldrb	r3, [r6, r3]
     eb0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     eb2:	2325      	movs	r3, #37	; 0x25
     eb4:	5cf3      	ldrb	r3, [r6, r3]
     eb6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     eb8:	7ef3      	ldrb	r3, [r6, #27]
     eba:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     ebc:	7f33      	ldrb	r3, [r6, #28]
     ebe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ec0:	682b      	ldr	r3, [r5, #0]
     ec2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ec4:	0018      	movs	r0, r3
     ec6:	4ba0      	ldr	r3, [pc, #640]	; (1148 <usart_init+0x30c>)
     ec8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     eca:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     ecc:	2200      	movs	r2, #0
     ece:	230e      	movs	r3, #14
     ed0:	a906      	add	r1, sp, #24
     ed2:	468c      	mov	ip, r1
     ed4:	4463      	add	r3, ip
     ed6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     ed8:	8a32      	ldrh	r2, [r6, #16]
     eda:	9202      	str	r2, [sp, #8]
     edc:	2380      	movs	r3, #128	; 0x80
     ede:	01db      	lsls	r3, r3, #7
     ee0:	429a      	cmp	r2, r3
     ee2:	d100      	bne.n	ee6 <usart_init+0xaa>
     ee4:	e09e      	b.n	1024 <usart_init+0x1e8>
     ee6:	d90f      	bls.n	f08 <usart_init+0xcc>
     ee8:	23c0      	movs	r3, #192	; 0xc0
     eea:	01db      	lsls	r3, r3, #7
     eec:	9a02      	ldr	r2, [sp, #8]
     eee:	429a      	cmp	r2, r3
     ef0:	d100      	bne.n	ef4 <usart_init+0xb8>
     ef2:	e092      	b.n	101a <usart_init+0x1de>
     ef4:	2380      	movs	r3, #128	; 0x80
     ef6:	021b      	lsls	r3, r3, #8
     ef8:	429a      	cmp	r2, r3
     efa:	d000      	beq.n	efe <usart_init+0xc2>
     efc:	e11f      	b.n	113e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     efe:	2303      	movs	r3, #3
     f00:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f02:	2300      	movs	r3, #0
     f04:	9307      	str	r3, [sp, #28]
     f06:	e008      	b.n	f1a <usart_init+0xde>
	switch (config->sample_rate) {
     f08:	2380      	movs	r3, #128	; 0x80
     f0a:	019b      	lsls	r3, r3, #6
     f0c:	429a      	cmp	r2, r3
     f0e:	d000      	beq.n	f12 <usart_init+0xd6>
     f10:	e115      	b.n	113e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f12:	2310      	movs	r3, #16
     f14:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f16:	3b0f      	subs	r3, #15
     f18:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     f1a:	6833      	ldr	r3, [r6, #0]
     f1c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     f1e:	68f3      	ldr	r3, [r6, #12]
     f20:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     f22:	6973      	ldr	r3, [r6, #20]
     f24:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f26:	7e33      	ldrb	r3, [r6, #24]
     f28:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f2a:	2326      	movs	r3, #38	; 0x26
     f2c:	5cf3      	ldrb	r3, [r6, r3]
     f2e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     f30:	6873      	ldr	r3, [r6, #4]
     f32:	4699      	mov	r9, r3
	switch (transfer_mode)
     f34:	2b00      	cmp	r3, #0
     f36:	d100      	bne.n	f3a <usart_init+0xfe>
     f38:	e0a0      	b.n	107c <usart_init+0x240>
     f3a:	2380      	movs	r3, #128	; 0x80
     f3c:	055b      	lsls	r3, r3, #21
     f3e:	4599      	cmp	r9, r3
     f40:	d100      	bne.n	f44 <usart_init+0x108>
     f42:	e084      	b.n	104e <usart_init+0x212>
	if(config->encoding_format_enable) {
     f44:	7e73      	ldrb	r3, [r6, #25]
     f46:	2b00      	cmp	r3, #0
     f48:	d002      	beq.n	f50 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     f4a:	7eb3      	ldrb	r3, [r6, #26]
     f4c:	4642      	mov	r2, r8
     f4e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f50:	682a      	ldr	r2, [r5, #0]
     f52:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f54:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f56:	2b00      	cmp	r3, #0
     f58:	d1fc      	bne.n	f54 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     f5a:	330e      	adds	r3, #14
     f5c:	aa06      	add	r2, sp, #24
     f5e:	4694      	mov	ip, r2
     f60:	4463      	add	r3, ip
     f62:	881b      	ldrh	r3, [r3, #0]
     f64:	4642      	mov	r2, r8
     f66:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     f68:	9b05      	ldr	r3, [sp, #20]
     f6a:	9a03      	ldr	r2, [sp, #12]
     f6c:	4313      	orrs	r3, r2
     f6e:	9a04      	ldr	r2, [sp, #16]
     f70:	4313      	orrs	r3, r2
     f72:	464a      	mov	r2, r9
     f74:	4313      	orrs	r3, r2
     f76:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f78:	465b      	mov	r3, fp
     f7a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     f7c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f7e:	4653      	mov	r3, sl
     f80:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     f82:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     f84:	2327      	movs	r3, #39	; 0x27
     f86:	5cf3      	ldrb	r3, [r6, r3]
     f88:	2b00      	cmp	r3, #0
     f8a:	d101      	bne.n	f90 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     f8c:	3304      	adds	r3, #4
     f8e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f90:	7e73      	ldrb	r3, [r6, #25]
     f92:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f94:	7f32      	ldrb	r2, [r6, #28]
     f96:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f98:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f9a:	7f72      	ldrb	r2, [r6, #29]
     f9c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f9e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fa0:	2224      	movs	r2, #36	; 0x24
     fa2:	5cb2      	ldrb	r2, [r6, r2]
     fa4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     fa6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     fa8:	2225      	movs	r2, #37	; 0x25
     faa:	5cb2      	ldrb	r2, [r6, r2]
     fac:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fae:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     fb0:	7ab1      	ldrb	r1, [r6, #10]
     fb2:	7af2      	ldrb	r2, [r6, #11]
     fb4:	4311      	orrs	r1, r2
     fb6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     fb8:	8933      	ldrh	r3, [r6, #8]
     fba:	2bff      	cmp	r3, #255	; 0xff
     fbc:	d100      	bne.n	fc0 <usart_init+0x184>
     fbe:	e081      	b.n	10c4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     fc0:	2280      	movs	r2, #128	; 0x80
     fc2:	0452      	lsls	r2, r2, #17
     fc4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     fc6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     fc8:	232c      	movs	r3, #44	; 0x2c
     fca:	5cf3      	ldrb	r3, [r6, r3]
     fcc:	2b00      	cmp	r3, #0
     fce:	d103      	bne.n	fd8 <usart_init+0x19c>
     fd0:	4b62      	ldr	r3, [pc, #392]	; (115c <usart_init+0x320>)
     fd2:	789b      	ldrb	r3, [r3, #2]
     fd4:	079b      	lsls	r3, r3, #30
     fd6:	d501      	bpl.n	fdc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     fd8:	2380      	movs	r3, #128	; 0x80
     fda:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     fdc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     fde:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     fe0:	2b00      	cmp	r3, #0
     fe2:	d1fc      	bne.n	fde <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     fe4:	4643      	mov	r3, r8
     fe6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     fe8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     fea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     fec:	2b00      	cmp	r3, #0
     fee:	d1fc      	bne.n	fea <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     ff0:	4643      	mov	r3, r8
     ff2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ff4:	ab0e      	add	r3, sp, #56	; 0x38
     ff6:	2280      	movs	r2, #128	; 0x80
     ff8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ffa:	2200      	movs	r2, #0
     ffc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     ffe:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1000:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1002:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1004:	930a      	str	r3, [sp, #40]	; 0x28
    1006:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1008:	930b      	str	r3, [sp, #44]	; 0x2c
    100a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    100c:	930c      	str	r3, [sp, #48]	; 0x30
    100e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1010:	9302      	str	r3, [sp, #8]
    1012:	930d      	str	r3, [sp, #52]	; 0x34
    1014:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1016:	ae0a      	add	r6, sp, #40	; 0x28
    1018:	e063      	b.n	10e2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    101a:	2308      	movs	r3, #8
    101c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    101e:	3b07      	subs	r3, #7
    1020:	9307      	str	r3, [sp, #28]
    1022:	e77a      	b.n	f1a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1024:	6833      	ldr	r3, [r6, #0]
    1026:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1028:	68f3      	ldr	r3, [r6, #12]
    102a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    102c:	6973      	ldr	r3, [r6, #20]
    102e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1030:	7e33      	ldrb	r3, [r6, #24]
    1032:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1034:	2326      	movs	r3, #38	; 0x26
    1036:	5cf3      	ldrb	r3, [r6, r3]
    1038:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    103a:	6873      	ldr	r3, [r6, #4]
    103c:	4699      	mov	r9, r3
	switch (transfer_mode)
    103e:	2b00      	cmp	r3, #0
    1040:	d018      	beq.n	1074 <usart_init+0x238>
    1042:	2380      	movs	r3, #128	; 0x80
    1044:	055b      	lsls	r3, r3, #21
    1046:	4599      	cmp	r9, r3
    1048:	d001      	beq.n	104e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    104a:	2000      	movs	r0, #0
    104c:	e025      	b.n	109a <usart_init+0x25e>
			if (!config->use_external_clock) {
    104e:	2327      	movs	r3, #39	; 0x27
    1050:	5cf3      	ldrb	r3, [r6, r3]
    1052:	2b00      	cmp	r3, #0
    1054:	d000      	beq.n	1058 <usart_init+0x21c>
    1056:	e775      	b.n	f44 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1058:	6a33      	ldr	r3, [r6, #32]
    105a:	001f      	movs	r7, r3
    105c:	b2c0      	uxtb	r0, r0
    105e:	4b40      	ldr	r3, [pc, #256]	; (1160 <usart_init+0x324>)
    1060:	4798      	blx	r3
    1062:	0001      	movs	r1, r0
    1064:	220e      	movs	r2, #14
    1066:	ab06      	add	r3, sp, #24
    1068:	469c      	mov	ip, r3
    106a:	4462      	add	r2, ip
    106c:	0038      	movs	r0, r7
    106e:	4b3d      	ldr	r3, [pc, #244]	; (1164 <usart_init+0x328>)
    1070:	4798      	blx	r3
    1072:	e012      	b.n	109a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1074:	2308      	movs	r3, #8
    1076:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1078:	2300      	movs	r3, #0
    107a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    107c:	2327      	movs	r3, #39	; 0x27
    107e:	5cf3      	ldrb	r3, [r6, r3]
    1080:	2b00      	cmp	r3, #0
    1082:	d00e      	beq.n	10a2 <usart_init+0x266>
				status_code =
    1084:	9b06      	ldr	r3, [sp, #24]
    1086:	9300      	str	r3, [sp, #0]
    1088:	9b07      	ldr	r3, [sp, #28]
    108a:	220e      	movs	r2, #14
    108c:	a906      	add	r1, sp, #24
    108e:	468c      	mov	ip, r1
    1090:	4462      	add	r2, ip
    1092:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1094:	6a30      	ldr	r0, [r6, #32]
    1096:	4f34      	ldr	r7, [pc, #208]	; (1168 <usart_init+0x32c>)
    1098:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    109a:	2800      	cmp	r0, #0
    109c:	d000      	beq.n	10a0 <usart_init+0x264>
    109e:	e6e0      	b.n	e62 <usart_init+0x26>
    10a0:	e750      	b.n	f44 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    10a2:	6a33      	ldr	r3, [r6, #32]
    10a4:	001f      	movs	r7, r3
    10a6:	b2c0      	uxtb	r0, r0
    10a8:	4b2d      	ldr	r3, [pc, #180]	; (1160 <usart_init+0x324>)
    10aa:	4798      	blx	r3
    10ac:	0001      	movs	r1, r0
				status_code =
    10ae:	9b06      	ldr	r3, [sp, #24]
    10b0:	9300      	str	r3, [sp, #0]
    10b2:	9b07      	ldr	r3, [sp, #28]
    10b4:	220e      	movs	r2, #14
    10b6:	a806      	add	r0, sp, #24
    10b8:	4684      	mov	ip, r0
    10ba:	4462      	add	r2, ip
    10bc:	0038      	movs	r0, r7
    10be:	4f2a      	ldr	r7, [pc, #168]	; (1168 <usart_init+0x32c>)
    10c0:	47b8      	blx	r7
    10c2:	e7ea      	b.n	109a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    10c4:	7ef3      	ldrb	r3, [r6, #27]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d100      	bne.n	10cc <usart_init+0x290>
    10ca:	e77d      	b.n	fc8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    10cc:	2380      	movs	r3, #128	; 0x80
    10ce:	04db      	lsls	r3, r3, #19
    10d0:	431f      	orrs	r7, r3
    10d2:	e779      	b.n	fc8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10d4:	0020      	movs	r0, r4
    10d6:	4b25      	ldr	r3, [pc, #148]	; (116c <usart_init+0x330>)
    10d8:	4798      	blx	r3
    10da:	e007      	b.n	10ec <usart_init+0x2b0>
    10dc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    10de:	2f04      	cmp	r7, #4
    10e0:	d00d      	beq.n	10fe <usart_init+0x2c2>
    10e2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10e4:	00bb      	lsls	r3, r7, #2
    10e6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    10e8:	2800      	cmp	r0, #0
    10ea:	d0f3      	beq.n	10d4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    10ec:	1c43      	adds	r3, r0, #1
    10ee:	d0f5      	beq.n	10dc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10f0:	a90e      	add	r1, sp, #56	; 0x38
    10f2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10f4:	0c00      	lsrs	r0, r0, #16
    10f6:	b2c0      	uxtb	r0, r0
    10f8:	4b1d      	ldr	r3, [pc, #116]	; (1170 <usart_init+0x334>)
    10fa:	4798      	blx	r3
    10fc:	e7ee      	b.n	10dc <usart_init+0x2a0>
		module->callback[i]            = NULL;
    10fe:	2300      	movs	r3, #0
    1100:	60eb      	str	r3, [r5, #12]
    1102:	612b      	str	r3, [r5, #16]
    1104:	616b      	str	r3, [r5, #20]
    1106:	61ab      	str	r3, [r5, #24]
    1108:	61eb      	str	r3, [r5, #28]
    110a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    110c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    110e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1110:	2200      	movs	r2, #0
    1112:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1114:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1116:	3330      	adds	r3, #48	; 0x30
    1118:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    111a:	3301      	adds	r3, #1
    111c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    111e:	3301      	adds	r3, #1
    1120:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1122:	3301      	adds	r3, #1
    1124:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1126:	6828      	ldr	r0, [r5, #0]
    1128:	4b07      	ldr	r3, [pc, #28]	; (1148 <usart_init+0x30c>)
    112a:	4798      	blx	r3
    112c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    112e:	4911      	ldr	r1, [pc, #68]	; (1174 <usart_init+0x338>)
    1130:	4b11      	ldr	r3, [pc, #68]	; (1178 <usart_init+0x33c>)
    1132:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1134:	00a4      	lsls	r4, r4, #2
    1136:	4b11      	ldr	r3, [pc, #68]	; (117c <usart_init+0x340>)
    1138:	50e5      	str	r5, [r4, r3]
	return status_code;
    113a:	2000      	movs	r0, #0
    113c:	e691      	b.n	e62 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    113e:	2310      	movs	r3, #16
    1140:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1142:	2300      	movs	r3, #0
    1144:	9307      	str	r3, [sp, #28]
    1146:	e6e8      	b.n	f1a <usart_init+0xde>
    1148:	00000d35 	.word	0x00000d35
    114c:	40000400 	.word	0x40000400
    1150:	00001a7d 	.word	0x00001a7d
    1154:	000019f1 	.word	0x000019f1
    1158:	00000b71 	.word	0x00000b71
    115c:	41002000 	.word	0x41002000
    1160:	00001a99 	.word	0x00001a99
    1164:	00000ab3 	.word	0x00000ab3
    1168:	00000add 	.word	0x00000add
    116c:	00000bbd 	.word	0x00000bbd
    1170:	00001b75 	.word	0x00001b75
    1174:	000012b5 	.word	0x000012b5
    1178:	00000d71 	.word	0x00000d71
    117c:	2000020c 	.word	0x2000020c

00001180 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1180:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1182:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1184:	2a00      	cmp	r2, #0
    1186:	d101      	bne.n	118c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1188:	0018      	movs	r0, r3
    118a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    118c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    118e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1190:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1192:	2a00      	cmp	r2, #0
    1194:	d1f8      	bne.n	1188 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1196:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1198:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    119a:	2a00      	cmp	r2, #0
    119c:	d1fc      	bne.n	1198 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    119e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    11a0:	2102      	movs	r1, #2
    11a2:	7e1a      	ldrb	r2, [r3, #24]
    11a4:	420a      	tst	r2, r1
    11a6:	d0fc      	beq.n	11a2 <usart_write_wait+0x22>
	return STATUS_OK;
    11a8:	2300      	movs	r3, #0
    11aa:	e7ed      	b.n	1188 <usart_write_wait+0x8>

000011ac <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    11ac:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    11ae:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    11b0:	2a00      	cmp	r2, #0
    11b2:	d101      	bne.n	11b8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    11b4:	0018      	movs	r0, r3
    11b6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    11b8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    11ba:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11bc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    11be:	2a00      	cmp	r2, #0
    11c0:	d1f8      	bne.n	11b4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11c2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    11c4:	7e10      	ldrb	r0, [r2, #24]
    11c6:	0740      	lsls	r0, r0, #29
    11c8:	d5f4      	bpl.n	11b4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    11ca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    11cc:	2b00      	cmp	r3, #0
    11ce:	d1fc      	bne.n	11ca <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    11d0:	8b53      	ldrh	r3, [r2, #26]
    11d2:	b2db      	uxtb	r3, r3
	if (error_code) {
    11d4:	0698      	lsls	r0, r3, #26
    11d6:	d01d      	beq.n	1214 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    11d8:	0798      	lsls	r0, r3, #30
    11da:	d503      	bpl.n	11e4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    11dc:	2302      	movs	r3, #2
    11de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    11e0:	3318      	adds	r3, #24
    11e2:	e7e7      	b.n	11b4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    11e4:	0758      	lsls	r0, r3, #29
    11e6:	d503      	bpl.n	11f0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    11e8:	2304      	movs	r3, #4
    11ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    11ec:	331a      	adds	r3, #26
    11ee:	e7e1      	b.n	11b4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    11f0:	07d8      	lsls	r0, r3, #31
    11f2:	d503      	bpl.n	11fc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    11f4:	2301      	movs	r3, #1
    11f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    11f8:	3312      	adds	r3, #18
    11fa:	e7db      	b.n	11b4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    11fc:	06d8      	lsls	r0, r3, #27
    11fe:	d503      	bpl.n	1208 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1200:	2310      	movs	r3, #16
    1202:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1204:	3332      	adds	r3, #50	; 0x32
    1206:	e7d5      	b.n	11b4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1208:	069b      	lsls	r3, r3, #26
    120a:	d503      	bpl.n	1214 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    120c:	2320      	movs	r3, #32
    120e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1210:	3321      	adds	r3, #33	; 0x21
    1212:	e7cf      	b.n	11b4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1214:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1216:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1218:	2300      	movs	r3, #0
    121a:	e7cb      	b.n	11b4 <usart_read_wait+0x8>

0000121c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    121c:	b5f0      	push	{r4, r5, r6, r7, lr}
    121e:	46d6      	mov	lr, sl
    1220:	b500      	push	{lr}
    1222:	b084      	sub	sp, #16
    1224:	0004      	movs	r4, r0
    1226:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1228:	2017      	movs	r0, #23
	if (length == 0) {
    122a:	2a00      	cmp	r2, #0
    122c:	d103      	bne.n	1236 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    122e:	b004      	add	sp, #16
    1230:	bc04      	pop	{r2}
    1232:	4692      	mov	sl, r2
    1234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    1236:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1238:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    123a:	2b00      	cmp	r3, #0
    123c:	d0f7      	beq.n	122e <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    123e:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    1240:	3a01      	subs	r2, #1
    1242:	b293      	uxth	r3, r2
    1244:	469a      	mov	sl, r3
    1246:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1248:	2704      	movs	r7, #4
    124a:	e019      	b.n	1280 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    124c:	2300      	movs	r3, #0
    124e:	aa02      	add	r2, sp, #8
    1250:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    1252:	1d91      	adds	r1, r2, #6
    1254:	0020      	movs	r0, r4
    1256:	4b15      	ldr	r3, [pc, #84]	; (12ac <usart_read_buffer_wait+0x90>)
    1258:	4798      	blx	r3
		if (retval != STATUS_OK) {
    125a:	2800      	cmp	r0, #0
    125c:	d1e7      	bne.n	122e <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    125e:	1c69      	adds	r1, r5, #1
    1260:	b289      	uxth	r1, r1
    1262:	ab02      	add	r3, sp, #8
    1264:	88db      	ldrh	r3, [r3, #6]
    1266:	9a01      	ldr	r2, [sp, #4]
    1268:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    126a:	7962      	ldrb	r2, [r4, #5]
    126c:	2a01      	cmp	r2, #1
    126e:	d014      	beq.n	129a <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    1270:	000d      	movs	r5, r1
	while (length--) {
    1272:	4653      	mov	r3, sl
    1274:	3b01      	subs	r3, #1
    1276:	b29b      	uxth	r3, r3
    1278:	469a      	mov	sl, r3
    127a:	4b0d      	ldr	r3, [pc, #52]	; (12b0 <usart_read_buffer_wait+0x94>)
    127c:	459a      	cmp	sl, r3
    127e:	d0d6      	beq.n	122e <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1280:	7e33      	ldrb	r3, [r6, #24]
    1282:	423b      	tst	r3, r7
    1284:	d1e2      	bne.n	124c <usart_read_buffer_wait+0x30>
    1286:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <usart_read_buffer_wait+0x94>)
    1288:	7e32      	ldrb	r2, [r6, #24]
    128a:	423a      	tst	r2, r7
    128c:	d1de      	bne.n	124c <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    128e:	2b01      	cmp	r3, #1
    1290:	d009      	beq.n	12a6 <usart_read_buffer_wait+0x8a>
    1292:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1294:	2b00      	cmp	r3, #0
    1296:	d1f7      	bne.n	1288 <usart_read_buffer_wait+0x6c>
    1298:	e7d8      	b.n	124c <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    129a:	3502      	adds	r5, #2
    129c:	b2ad      	uxth	r5, r5
    129e:	0a1b      	lsrs	r3, r3, #8
    12a0:	9a01      	ldr	r2, [sp, #4]
    12a2:	5453      	strb	r3, [r2, r1]
    12a4:	e7e5      	b.n	1272 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    12a6:	2012      	movs	r0, #18
    12a8:	e7c1      	b.n	122e <usart_read_buffer_wait+0x12>
    12aa:	46c0      	nop			; (mov r8, r8)
    12ac:	000011ad 	.word	0x000011ad
    12b0:	0000ffff 	.word	0x0000ffff

000012b4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    12b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    12b6:	0080      	lsls	r0, r0, #2
    12b8:	4b62      	ldr	r3, [pc, #392]	; (1444 <_usart_interrupt_handler+0x190>)
    12ba:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    12bc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    12be:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    12c0:	2b00      	cmp	r3, #0
    12c2:	d1fc      	bne.n	12be <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    12c4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    12c6:	7da6      	ldrb	r6, [r4, #22]
    12c8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    12ca:	2330      	movs	r3, #48	; 0x30
    12cc:	5ceb      	ldrb	r3, [r5, r3]
    12ce:	2231      	movs	r2, #49	; 0x31
    12d0:	5caf      	ldrb	r7, [r5, r2]
    12d2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    12d4:	07f3      	lsls	r3, r6, #31
    12d6:	d522      	bpl.n	131e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    12d8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    12da:	b29b      	uxth	r3, r3
    12dc:	2b00      	cmp	r3, #0
    12de:	d01c      	beq.n	131a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    12e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    12e2:	7813      	ldrb	r3, [r2, #0]
    12e4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    12e6:	1c51      	adds	r1, r2, #1
    12e8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12ea:	7969      	ldrb	r1, [r5, #5]
    12ec:	2901      	cmp	r1, #1
    12ee:	d00e      	beq.n	130e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    12f0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    12f2:	05db      	lsls	r3, r3, #23
    12f4:	0ddb      	lsrs	r3, r3, #23
    12f6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    12f8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    12fa:	3b01      	subs	r3, #1
    12fc:	b29b      	uxth	r3, r3
    12fe:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1300:	2b00      	cmp	r3, #0
    1302:	d10c      	bne.n	131e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1304:	3301      	adds	r3, #1
    1306:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1308:	3301      	adds	r3, #1
    130a:	75a3      	strb	r3, [r4, #22]
    130c:	e007      	b.n	131e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    130e:	7851      	ldrb	r1, [r2, #1]
    1310:	0209      	lsls	r1, r1, #8
    1312:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1314:	3202      	adds	r2, #2
    1316:	62aa      	str	r2, [r5, #40]	; 0x28
    1318:	e7eb      	b.n	12f2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    131a:	2301      	movs	r3, #1
    131c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    131e:	07b3      	lsls	r3, r6, #30
    1320:	d506      	bpl.n	1330 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1322:	2302      	movs	r3, #2
    1324:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1326:	2200      	movs	r2, #0
    1328:	3331      	adds	r3, #49	; 0x31
    132a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    132c:	07fb      	lsls	r3, r7, #31
    132e:	d41a      	bmi.n	1366 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1330:	0773      	lsls	r3, r6, #29
    1332:	d565      	bpl.n	1400 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1334:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1336:	b29b      	uxth	r3, r3
    1338:	2b00      	cmp	r3, #0
    133a:	d05f      	beq.n	13fc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    133c:	8b63      	ldrh	r3, [r4, #26]
    133e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1340:	071a      	lsls	r2, r3, #28
    1342:	d414      	bmi.n	136e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1344:	223f      	movs	r2, #63	; 0x3f
    1346:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1348:	2b00      	cmp	r3, #0
    134a:	d034      	beq.n	13b6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    134c:	079a      	lsls	r2, r3, #30
    134e:	d511      	bpl.n	1374 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1350:	221a      	movs	r2, #26
    1352:	2332      	movs	r3, #50	; 0x32
    1354:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1356:	3b30      	subs	r3, #48	; 0x30
    1358:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    135a:	077b      	lsls	r3, r7, #29
    135c:	d550      	bpl.n	1400 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    135e:	0028      	movs	r0, r5
    1360:	696b      	ldr	r3, [r5, #20]
    1362:	4798      	blx	r3
    1364:	e04c      	b.n	1400 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1366:	0028      	movs	r0, r5
    1368:	68eb      	ldr	r3, [r5, #12]
    136a:	4798      	blx	r3
    136c:	e7e0      	b.n	1330 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    136e:	2237      	movs	r2, #55	; 0x37
    1370:	4013      	ands	r3, r2
    1372:	e7e9      	b.n	1348 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1374:	075a      	lsls	r2, r3, #29
    1376:	d505      	bpl.n	1384 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1378:	221e      	movs	r2, #30
    137a:	2332      	movs	r3, #50	; 0x32
    137c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    137e:	3b2e      	subs	r3, #46	; 0x2e
    1380:	8363      	strh	r3, [r4, #26]
    1382:	e7ea      	b.n	135a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1384:	07da      	lsls	r2, r3, #31
    1386:	d505      	bpl.n	1394 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1388:	2213      	movs	r2, #19
    138a:	2332      	movs	r3, #50	; 0x32
    138c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    138e:	3b31      	subs	r3, #49	; 0x31
    1390:	8363      	strh	r3, [r4, #26]
    1392:	e7e2      	b.n	135a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1394:	06da      	lsls	r2, r3, #27
    1396:	d505      	bpl.n	13a4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1398:	2242      	movs	r2, #66	; 0x42
    139a:	2332      	movs	r3, #50	; 0x32
    139c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    139e:	3b22      	subs	r3, #34	; 0x22
    13a0:	8363      	strh	r3, [r4, #26]
    13a2:	e7da      	b.n	135a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    13a4:	2220      	movs	r2, #32
    13a6:	421a      	tst	r2, r3
    13a8:	d0d7      	beq.n	135a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    13aa:	3221      	adds	r2, #33	; 0x21
    13ac:	2332      	movs	r3, #50	; 0x32
    13ae:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    13b0:	3b12      	subs	r3, #18
    13b2:	8363      	strh	r3, [r4, #26]
    13b4:	e7d1      	b.n	135a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    13b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    13b8:	05db      	lsls	r3, r3, #23
    13ba:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    13bc:	b2da      	uxtb	r2, r3
    13be:	6a69      	ldr	r1, [r5, #36]	; 0x24
    13c0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    13c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    13c4:	1c51      	adds	r1, r2, #1
    13c6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13c8:	7969      	ldrb	r1, [r5, #5]
    13ca:	2901      	cmp	r1, #1
    13cc:	d010      	beq.n	13f0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    13ce:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    13d0:	3b01      	subs	r3, #1
    13d2:	b29b      	uxth	r3, r3
    13d4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    13d6:	2b00      	cmp	r3, #0
    13d8:	d112      	bne.n	1400 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13da:	3304      	adds	r3, #4
    13dc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    13de:	2200      	movs	r2, #0
    13e0:	332e      	adds	r3, #46	; 0x2e
    13e2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    13e4:	07bb      	lsls	r3, r7, #30
    13e6:	d50b      	bpl.n	1400 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    13e8:	0028      	movs	r0, r5
    13ea:	692b      	ldr	r3, [r5, #16]
    13ec:	4798      	blx	r3
    13ee:	e007      	b.n	1400 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    13f0:	0a1b      	lsrs	r3, r3, #8
    13f2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    13f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    13f6:	3301      	adds	r3, #1
    13f8:	626b      	str	r3, [r5, #36]	; 0x24
    13fa:	e7e8      	b.n	13ce <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13fc:	2304      	movs	r3, #4
    13fe:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1400:	06f3      	lsls	r3, r6, #27
    1402:	d504      	bpl.n	140e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1404:	2310      	movs	r3, #16
    1406:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1408:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    140a:	06fb      	lsls	r3, r7, #27
    140c:	d40e      	bmi.n	142c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    140e:	06b3      	lsls	r3, r6, #26
    1410:	d504      	bpl.n	141c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1412:	2320      	movs	r3, #32
    1414:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1416:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1418:	073b      	lsls	r3, r7, #28
    141a:	d40b      	bmi.n	1434 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    141c:	0733      	lsls	r3, r6, #28
    141e:	d504      	bpl.n	142a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1420:	2308      	movs	r3, #8
    1422:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1424:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1426:	06bb      	lsls	r3, r7, #26
    1428:	d408      	bmi.n	143c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    142c:	0028      	movs	r0, r5
    142e:	69eb      	ldr	r3, [r5, #28]
    1430:	4798      	blx	r3
    1432:	e7ec      	b.n	140e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1434:	0028      	movs	r0, r5
    1436:	69ab      	ldr	r3, [r5, #24]
    1438:	4798      	blx	r3
    143a:	e7ef      	b.n	141c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    143c:	6a2b      	ldr	r3, [r5, #32]
    143e:	0028      	movs	r0, r5
    1440:	4798      	blx	r3
}
    1442:	e7f2      	b.n	142a <_usart_interrupt_handler+0x176>
    1444:	2000020c 	.word	0x2000020c

00001448 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1448:	b510      	push	{r4, lr}
	switch (clock_source) {
    144a:	2808      	cmp	r0, #8
    144c:	d803      	bhi.n	1456 <system_clock_source_get_hz+0xe>
    144e:	0080      	lsls	r0, r0, #2
    1450:	4b1c      	ldr	r3, [pc, #112]	; (14c4 <system_clock_source_get_hz+0x7c>)
    1452:	581b      	ldr	r3, [r3, r0]
    1454:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1456:	2000      	movs	r0, #0
    1458:	e032      	b.n	14c0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    145a:	4b1b      	ldr	r3, [pc, #108]	; (14c8 <system_clock_source_get_hz+0x80>)
    145c:	6918      	ldr	r0, [r3, #16]
    145e:	e02f      	b.n	14c0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1460:	4b1a      	ldr	r3, [pc, #104]	; (14cc <system_clock_source_get_hz+0x84>)
    1462:	6a1b      	ldr	r3, [r3, #32]
    1464:	059b      	lsls	r3, r3, #22
    1466:	0f9b      	lsrs	r3, r3, #30
    1468:	4819      	ldr	r0, [pc, #100]	; (14d0 <system_clock_source_get_hz+0x88>)
    146a:	40d8      	lsrs	r0, r3
    146c:	e028      	b.n	14c0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    146e:	4b16      	ldr	r3, [pc, #88]	; (14c8 <system_clock_source_get_hz+0x80>)
    1470:	6958      	ldr	r0, [r3, #20]
    1472:	e025      	b.n	14c0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1474:	4b14      	ldr	r3, [pc, #80]	; (14c8 <system_clock_source_get_hz+0x80>)
    1476:	681b      	ldr	r3, [r3, #0]
			return 0;
    1478:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    147a:	079b      	lsls	r3, r3, #30
    147c:	d520      	bpl.n	14c0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    147e:	4913      	ldr	r1, [pc, #76]	; (14cc <system_clock_source_get_hz+0x84>)
    1480:	2210      	movs	r2, #16
    1482:	68cb      	ldr	r3, [r1, #12]
    1484:	421a      	tst	r2, r3
    1486:	d0fc      	beq.n	1482 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1488:	4b0f      	ldr	r3, [pc, #60]	; (14c8 <system_clock_source_get_hz+0x80>)
    148a:	681a      	ldr	r2, [r3, #0]
    148c:	2324      	movs	r3, #36	; 0x24
    148e:	4013      	ands	r3, r2
    1490:	2b04      	cmp	r3, #4
    1492:	d001      	beq.n	1498 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1494:	480f      	ldr	r0, [pc, #60]	; (14d4 <system_clock_source_get_hz+0x8c>)
    1496:	e013      	b.n	14c0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1498:	2000      	movs	r0, #0
    149a:	4b0f      	ldr	r3, [pc, #60]	; (14d8 <system_clock_source_get_hz+0x90>)
    149c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    149e:	4b0a      	ldr	r3, [pc, #40]	; (14c8 <system_clock_source_get_hz+0x80>)
    14a0:	689b      	ldr	r3, [r3, #8]
    14a2:	041b      	lsls	r3, r3, #16
    14a4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    14a6:	4358      	muls	r0, r3
    14a8:	e00a      	b.n	14c0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    14aa:	2350      	movs	r3, #80	; 0x50
    14ac:	4a07      	ldr	r2, [pc, #28]	; (14cc <system_clock_source_get_hz+0x84>)
    14ae:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    14b0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    14b2:	075b      	lsls	r3, r3, #29
    14b4:	d504      	bpl.n	14c0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    14b6:	4b04      	ldr	r3, [pc, #16]	; (14c8 <system_clock_source_get_hz+0x80>)
    14b8:	68d8      	ldr	r0, [r3, #12]
    14ba:	e001      	b.n	14c0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    14bc:	2080      	movs	r0, #128	; 0x80
    14be:	0200      	lsls	r0, r0, #8
	}
}
    14c0:	bd10      	pop	{r4, pc}
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	00004c44 	.word	0x00004c44
    14c8:	200000bc 	.word	0x200000bc
    14cc:	40000800 	.word	0x40000800
    14d0:	007a1200 	.word	0x007a1200
    14d4:	02dc6c00 	.word	0x02dc6c00
    14d8:	00001a99 	.word	0x00001a99

000014dc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    14dc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    14de:	490c      	ldr	r1, [pc, #48]	; (1510 <system_clock_source_osc8m_set_config+0x34>)
    14e0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    14e2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    14e4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    14e6:	7840      	ldrb	r0, [r0, #1]
    14e8:	2201      	movs	r2, #1
    14ea:	4010      	ands	r0, r2
    14ec:	0180      	lsls	r0, r0, #6
    14ee:	2640      	movs	r6, #64	; 0x40
    14f0:	43b3      	bics	r3, r6
    14f2:	4303      	orrs	r3, r0
    14f4:	402a      	ands	r2, r5
    14f6:	01d2      	lsls	r2, r2, #7
    14f8:	2080      	movs	r0, #128	; 0x80
    14fa:	4383      	bics	r3, r0
    14fc:	4313      	orrs	r3, r2
    14fe:	2203      	movs	r2, #3
    1500:	4022      	ands	r2, r4
    1502:	0212      	lsls	r2, r2, #8
    1504:	4803      	ldr	r0, [pc, #12]	; (1514 <system_clock_source_osc8m_set_config+0x38>)
    1506:	4003      	ands	r3, r0
    1508:	4313      	orrs	r3, r2
    150a:	620b      	str	r3, [r1, #32]
}
    150c:	bd70      	pop	{r4, r5, r6, pc}
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	40000800 	.word	0x40000800
    1514:	fffffcff 	.word	0xfffffcff

00001518 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1518:	b5f0      	push	{r4, r5, r6, r7, lr}
    151a:	46ce      	mov	lr, r9
    151c:	4647      	mov	r7, r8
    151e:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1520:	4b19      	ldr	r3, [pc, #100]	; (1588 <system_clock_source_osc32k_set_config+0x70>)
    1522:	4699      	mov	r9, r3
    1524:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1526:	7841      	ldrb	r1, [r0, #1]
    1528:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    152a:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    152c:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    152e:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1530:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1532:	7880      	ldrb	r0, [r0, #2]
    1534:	2101      	movs	r1, #1
    1536:	4008      	ands	r0, r1
    1538:	0080      	lsls	r0, r0, #2
    153a:	2204      	movs	r2, #4
    153c:	4393      	bics	r3, r2
    153e:	4303      	orrs	r3, r0
    1540:	4660      	mov	r0, ip
    1542:	4008      	ands	r0, r1
    1544:	00c0      	lsls	r0, r0, #3
    1546:	3204      	adds	r2, #4
    1548:	4393      	bics	r3, r2
    154a:	4303      	orrs	r3, r0
    154c:	0038      	movs	r0, r7
    154e:	4008      	ands	r0, r1
    1550:	0180      	lsls	r0, r0, #6
    1552:	2740      	movs	r7, #64	; 0x40
    1554:	43bb      	bics	r3, r7
    1556:	4303      	orrs	r3, r0
    1558:	0030      	movs	r0, r6
    155a:	4008      	ands	r0, r1
    155c:	01c0      	lsls	r0, r0, #7
    155e:	2680      	movs	r6, #128	; 0x80
    1560:	43b3      	bics	r3, r6
    1562:	4303      	orrs	r3, r0
    1564:	2007      	movs	r0, #7
    1566:	4005      	ands	r5, r0
    1568:	022d      	lsls	r5, r5, #8
    156a:	4808      	ldr	r0, [pc, #32]	; (158c <system_clock_source_osc32k_set_config+0x74>)
    156c:	4003      	ands	r3, r0
    156e:	432b      	orrs	r3, r5
    1570:	4021      	ands	r1, r4
    1572:	0309      	lsls	r1, r1, #12
    1574:	4806      	ldr	r0, [pc, #24]	; (1590 <system_clock_source_osc32k_set_config+0x78>)
    1576:	4003      	ands	r3, r0
    1578:	430b      	orrs	r3, r1
    157a:	464a      	mov	r2, r9
    157c:	6193      	str	r3, [r2, #24]
}
    157e:	bc0c      	pop	{r2, r3}
    1580:	4690      	mov	r8, r2
    1582:	4699      	mov	r9, r3
    1584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	40000800 	.word	0x40000800
    158c:	fffff8ff 	.word	0xfffff8ff
    1590:	ffffefff 	.word	0xffffefff

00001594 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1594:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1596:	7a03      	ldrb	r3, [r0, #8]
    1598:	069b      	lsls	r3, r3, #26
    159a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    159c:	8942      	ldrh	r2, [r0, #10]
    159e:	0592      	lsls	r2, r2, #22
    15a0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    15a2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    15a4:	4918      	ldr	r1, [pc, #96]	; (1608 <system_clock_source_dfll_set_config+0x74>)
    15a6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    15a8:	7983      	ldrb	r3, [r0, #6]
    15aa:	79c2      	ldrb	r2, [r0, #7]
    15ac:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    15ae:	8842      	ldrh	r2, [r0, #2]
    15b0:	8884      	ldrh	r4, [r0, #4]
    15b2:	4322      	orrs	r2, r4
    15b4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    15b6:	7842      	ldrb	r2, [r0, #1]
    15b8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    15ba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    15bc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    15be:	7803      	ldrb	r3, [r0, #0]
    15c0:	2b04      	cmp	r3, #4
    15c2:	d011      	beq.n	15e8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    15c4:	2b20      	cmp	r3, #32
    15c6:	d10e      	bne.n	15e6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    15c8:	7b03      	ldrb	r3, [r0, #12]
    15ca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    15cc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15ce:	4313      	orrs	r3, r2
    15d0:	89c2      	ldrh	r2, [r0, #14]
    15d2:	0412      	lsls	r2, r2, #16
    15d4:	490d      	ldr	r1, [pc, #52]	; (160c <system_clock_source_dfll_set_config+0x78>)
    15d6:	400a      	ands	r2, r1
    15d8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15da:	4a0b      	ldr	r2, [pc, #44]	; (1608 <system_clock_source_dfll_set_config+0x74>)
    15dc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    15de:	6811      	ldr	r1, [r2, #0]
    15e0:	4b0b      	ldr	r3, [pc, #44]	; (1610 <system_clock_source_dfll_set_config+0x7c>)
    15e2:	430b      	orrs	r3, r1
    15e4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    15e6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    15e8:	7b03      	ldrb	r3, [r0, #12]
    15ea:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    15ec:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15ee:	4313      	orrs	r3, r2
    15f0:	89c2      	ldrh	r2, [r0, #14]
    15f2:	0412      	lsls	r2, r2, #16
    15f4:	4905      	ldr	r1, [pc, #20]	; (160c <system_clock_source_dfll_set_config+0x78>)
    15f6:	400a      	ands	r2, r1
    15f8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15fa:	4a03      	ldr	r2, [pc, #12]	; (1608 <system_clock_source_dfll_set_config+0x74>)
    15fc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    15fe:	6813      	ldr	r3, [r2, #0]
    1600:	2104      	movs	r1, #4
    1602:	430b      	orrs	r3, r1
    1604:	6013      	str	r3, [r2, #0]
    1606:	e7ee      	b.n	15e6 <system_clock_source_dfll_set_config+0x52>
    1608:	200000bc 	.word	0x200000bc
    160c:	03ff0000 	.word	0x03ff0000
    1610:	00000424 	.word	0x00000424

00001614 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1614:	2808      	cmp	r0, #8
    1616:	d803      	bhi.n	1620 <system_clock_source_enable+0xc>
    1618:	0080      	lsls	r0, r0, #2
    161a:	4b25      	ldr	r3, [pc, #148]	; (16b0 <system_clock_source_enable+0x9c>)
    161c:	581b      	ldr	r3, [r3, r0]
    161e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1620:	2017      	movs	r0, #23
    1622:	e044      	b.n	16ae <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1624:	4a23      	ldr	r2, [pc, #140]	; (16b4 <system_clock_source_enable+0xa0>)
    1626:	6a13      	ldr	r3, [r2, #32]
    1628:	2102      	movs	r1, #2
    162a:	430b      	orrs	r3, r1
    162c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    162e:	2000      	movs	r0, #0
    1630:	e03d      	b.n	16ae <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1632:	4a20      	ldr	r2, [pc, #128]	; (16b4 <system_clock_source_enable+0xa0>)
    1634:	6993      	ldr	r3, [r2, #24]
    1636:	2102      	movs	r1, #2
    1638:	430b      	orrs	r3, r1
    163a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    163c:	2000      	movs	r0, #0
		break;
    163e:	e036      	b.n	16ae <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1640:	4a1c      	ldr	r2, [pc, #112]	; (16b4 <system_clock_source_enable+0xa0>)
    1642:	8a13      	ldrh	r3, [r2, #16]
    1644:	2102      	movs	r1, #2
    1646:	430b      	orrs	r3, r1
    1648:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    164a:	2000      	movs	r0, #0
		break;
    164c:	e02f      	b.n	16ae <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    164e:	4a19      	ldr	r2, [pc, #100]	; (16b4 <system_clock_source_enable+0xa0>)
    1650:	8a93      	ldrh	r3, [r2, #20]
    1652:	2102      	movs	r1, #2
    1654:	430b      	orrs	r3, r1
    1656:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1658:	2000      	movs	r0, #0
		break;
    165a:	e028      	b.n	16ae <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    165c:	4916      	ldr	r1, [pc, #88]	; (16b8 <system_clock_source_enable+0xa4>)
    165e:	680b      	ldr	r3, [r1, #0]
    1660:	2202      	movs	r2, #2
    1662:	4313      	orrs	r3, r2
    1664:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1666:	4b13      	ldr	r3, [pc, #76]	; (16b4 <system_clock_source_enable+0xa0>)
    1668:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    166a:	0019      	movs	r1, r3
    166c:	320e      	adds	r2, #14
    166e:	68cb      	ldr	r3, [r1, #12]
    1670:	421a      	tst	r2, r3
    1672:	d0fc      	beq.n	166e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1674:	4a10      	ldr	r2, [pc, #64]	; (16b8 <system_clock_source_enable+0xa4>)
    1676:	6891      	ldr	r1, [r2, #8]
    1678:	4b0e      	ldr	r3, [pc, #56]	; (16b4 <system_clock_source_enable+0xa0>)
    167a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    167c:	6852      	ldr	r2, [r2, #4]
    167e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1680:	2200      	movs	r2, #0
    1682:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1684:	0019      	movs	r1, r3
    1686:	3210      	adds	r2, #16
    1688:	68cb      	ldr	r3, [r1, #12]
    168a:	421a      	tst	r2, r3
    168c:	d0fc      	beq.n	1688 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    168e:	4b0a      	ldr	r3, [pc, #40]	; (16b8 <system_clock_source_enable+0xa4>)
    1690:	681b      	ldr	r3, [r3, #0]
    1692:	b29b      	uxth	r3, r3
    1694:	4a07      	ldr	r2, [pc, #28]	; (16b4 <system_clock_source_enable+0xa0>)
    1696:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1698:	2000      	movs	r0, #0
    169a:	e008      	b.n	16ae <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    169c:	4905      	ldr	r1, [pc, #20]	; (16b4 <system_clock_source_enable+0xa0>)
    169e:	2244      	movs	r2, #68	; 0x44
    16a0:	5c8b      	ldrb	r3, [r1, r2]
    16a2:	2002      	movs	r0, #2
    16a4:	4303      	orrs	r3, r0
    16a6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    16a8:	2000      	movs	r0, #0
		break;
    16aa:	e000      	b.n	16ae <system_clock_source_enable+0x9a>
		return STATUS_OK;
    16ac:	2000      	movs	r0, #0
}
    16ae:	4770      	bx	lr
    16b0:	00004c68 	.word	0x00004c68
    16b4:	40000800 	.word	0x40000800
    16b8:	200000bc 	.word	0x200000bc

000016bc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    16bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16be:	46ce      	mov	lr, r9
    16c0:	4647      	mov	r7, r8
    16c2:	b580      	push	{r7, lr}
    16c4:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16c6:	22c2      	movs	r2, #194	; 0xc2
    16c8:	00d2      	lsls	r2, r2, #3
    16ca:	4b50      	ldr	r3, [pc, #320]	; (180c <system_clock_init+0x150>)
    16cc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    16ce:	4a50      	ldr	r2, [pc, #320]	; (1810 <system_clock_init+0x154>)
    16d0:	6853      	ldr	r3, [r2, #4]
    16d2:	211e      	movs	r1, #30
    16d4:	438b      	bics	r3, r1
    16d6:	391a      	subs	r1, #26
    16d8:	430b      	orrs	r3, r1
    16da:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    16dc:	2203      	movs	r2, #3
    16de:	ab01      	add	r3, sp, #4
    16e0:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16e2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    16e4:	4d4b      	ldr	r5, [pc, #300]	; (1814 <system_clock_init+0x158>)
    16e6:	b2e0      	uxtb	r0, r4
    16e8:	a901      	add	r1, sp, #4
    16ea:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16ec:	3401      	adds	r4, #1
    16ee:	2c25      	cmp	r4, #37	; 0x25
    16f0:	d1f9      	bne.n	16e6 <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    16f2:	4d49      	ldr	r5, [pc, #292]	; (1818 <system_clock_init+0x15c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    16f4:	682b      	ldr	r3, [r5, #0]
    16f6:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    16f8:	4944      	ldr	r1, [pc, #272]	; (180c <system_clock_init+0x150>)
    16fa:	698a      	ldr	r2, [r1, #24]
    16fc:	0e5b      	lsrs	r3, r3, #25
    16fe:	041b      	lsls	r3, r3, #16
    1700:	4846      	ldr	r0, [pc, #280]	; (181c <system_clock_init+0x160>)
    1702:	4002      	ands	r2, r0
    1704:	4313      	orrs	r3, r2
    1706:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    1708:	a80a      	add	r0, sp, #40	; 0x28
    170a:	2301      	movs	r3, #1
    170c:	7083      	strb	r3, [r0, #2]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    170e:	2207      	movs	r2, #7
    1710:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1712:	2400      	movs	r4, #0
    1714:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    1716:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    1718:	7104      	strb	r4, [r0, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    171a:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    171c:	4b40      	ldr	r3, [pc, #256]	; (1820 <system_clock_init+0x164>)
    171e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1720:	2004      	movs	r0, #4
    1722:	4b40      	ldr	r3, [pc, #256]	; (1824 <system_clock_init+0x168>)
    1724:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1726:	ab05      	add	r3, sp, #20
    1728:	2200      	movs	r2, #0
    172a:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    172c:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    172e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1730:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1732:	213f      	movs	r1, #63	; 0x3f
    1734:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1736:	393b      	subs	r1, #59	; 0x3b
    1738:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    173a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    173c:	682b      	ldr	r3, [r5, #0]
    173e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1740:	2b3f      	cmp	r3, #63	; 0x3f
    1742:	d060      	beq.n	1806 <system_clock_init+0x14a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1744:	a805      	add	r0, sp, #20
    1746:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1748:	2304      	movs	r3, #4
    174a:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    174c:	3303      	adds	r3, #3
    174e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1750:	3338      	adds	r3, #56	; 0x38
    1752:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1754:	4b34      	ldr	r3, [pc, #208]	; (1828 <system_clock_init+0x16c>)
    1756:	4798      	blx	r3
	config->run_in_standby  = false;
    1758:	a804      	add	r0, sp, #16
    175a:	2500      	movs	r5, #0
    175c:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    175e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1760:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1762:	4b32      	ldr	r3, [pc, #200]	; (182c <system_clock_init+0x170>)
    1764:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1766:	2006      	movs	r0, #6
    1768:	4f2e      	ldr	r7, [pc, #184]	; (1824 <system_clock_init+0x168>)
    176a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    176c:	4b30      	ldr	r3, [pc, #192]	; (1830 <system_clock_init+0x174>)
    176e:	4798      	blx	r3
	config->division_factor    = 1;
    1770:	ac01      	add	r4, sp, #4
    1772:	2601      	movs	r6, #1
    1774:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1776:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1778:	2306      	movs	r3, #6
    177a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    177c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    177e:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1780:	0021      	movs	r1, r4
    1782:	2001      	movs	r0, #1
    1784:	4b2b      	ldr	r3, [pc, #172]	; (1834 <system_clock_init+0x178>)
    1786:	4699      	mov	r9, r3
    1788:	4798      	blx	r3
    178a:	2001      	movs	r0, #1
    178c:	4b2a      	ldr	r3, [pc, #168]	; (1838 <system_clock_init+0x17c>)
    178e:	4698      	mov	r8, r3
    1790:	4798      	blx	r3
	config->high_when_disabled = false;
    1792:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1794:	7265      	strb	r5, [r4, #9]
    1796:	2304      	movs	r3, #4
    1798:	7023      	strb	r3, [r4, #0]
    179a:	2320      	movs	r3, #32
    179c:	6063      	str	r3, [r4, #4]
    179e:	7226      	strb	r6, [r4, #8]
    17a0:	0021      	movs	r1, r4
    17a2:	2002      	movs	r0, #2
    17a4:	47c8      	blx	r9
    17a6:	2002      	movs	r0, #2
    17a8:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    17aa:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    17ac:	0021      	movs	r1, r4
    17ae:	2000      	movs	r0, #0
    17b0:	4b18      	ldr	r3, [pc, #96]	; (1814 <system_clock_init+0x158>)
    17b2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    17b4:	2000      	movs	r0, #0
    17b6:	4b21      	ldr	r3, [pc, #132]	; (183c <system_clock_init+0x180>)
    17b8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    17ba:	2007      	movs	r0, #7
    17bc:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    17be:	4913      	ldr	r1, [pc, #76]	; (180c <system_clock_init+0x150>)
    17c0:	22d0      	movs	r2, #208	; 0xd0
    17c2:	68cb      	ldr	r3, [r1, #12]
    17c4:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    17c6:	2bd0      	cmp	r3, #208	; 0xd0
    17c8:	d1fb      	bne.n	17c2 <system_clock_init+0x106>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    17ca:	4a10      	ldr	r2, [pc, #64]	; (180c <system_clock_init+0x150>)
    17cc:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    17ce:	2180      	movs	r1, #128	; 0x80
    17d0:	430b      	orrs	r3, r1
    17d2:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    17d4:	4a1a      	ldr	r2, [pc, #104]	; (1840 <system_clock_init+0x184>)
    17d6:	2300      	movs	r3, #0
    17d8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    17da:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    17dc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    17de:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    17e0:	a901      	add	r1, sp, #4
    17e2:	2201      	movs	r2, #1
    17e4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    17e6:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    17e8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    17ea:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    17ec:	3307      	adds	r3, #7
    17ee:	700b      	strb	r3, [r1, #0]
    17f0:	2000      	movs	r0, #0
    17f2:	4b10      	ldr	r3, [pc, #64]	; (1834 <system_clock_init+0x178>)
    17f4:	4798      	blx	r3
    17f6:	2000      	movs	r0, #0
    17f8:	4b0f      	ldr	r3, [pc, #60]	; (1838 <system_clock_init+0x17c>)
    17fa:	4798      	blx	r3
#endif
}
    17fc:	b00d      	add	sp, #52	; 0x34
    17fe:	bc0c      	pop	{r2, r3}
    1800:	4690      	mov	r8, r2
    1802:	4699      	mov	r9, r3
    1804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1806:	3b20      	subs	r3, #32
    1808:	e79c      	b.n	1744 <system_clock_init+0x88>
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	40000800 	.word	0x40000800
    1810:	41004000 	.word	0x41004000
    1814:	00001a7d 	.word	0x00001a7d
    1818:	00806024 	.word	0x00806024
    181c:	ff80ffff 	.word	0xff80ffff
    1820:	00001519 	.word	0x00001519
    1824:	00001615 	.word	0x00001615
    1828:	00001595 	.word	0x00001595
    182c:	000014dd 	.word	0x000014dd
    1830:	00001845 	.word	0x00001845
    1834:	00001869 	.word	0x00001869
    1838:	00001921 	.word	0x00001921
    183c:	000019f1 	.word	0x000019f1
    1840:	40000400 	.word	0x40000400

00001844 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1844:	4a06      	ldr	r2, [pc, #24]	; (1860 <system_gclk_init+0x1c>)
    1846:	6993      	ldr	r3, [r2, #24]
    1848:	2108      	movs	r1, #8
    184a:	430b      	orrs	r3, r1
    184c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    184e:	2201      	movs	r2, #1
    1850:	4b04      	ldr	r3, [pc, #16]	; (1864 <system_gclk_init+0x20>)
    1852:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1854:	0019      	movs	r1, r3
    1856:	780b      	ldrb	r3, [r1, #0]
    1858:	4213      	tst	r3, r2
    185a:	d1fc      	bne.n	1856 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    185c:	4770      	bx	lr
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	40000400 	.word	0x40000400
    1864:	40000c00 	.word	0x40000c00

00001868 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1868:	b570      	push	{r4, r5, r6, lr}
    186a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    186c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    186e:	780d      	ldrb	r5, [r1, #0]
    1870:	022d      	lsls	r5, r5, #8
    1872:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1874:	784b      	ldrb	r3, [r1, #1]
    1876:	2b00      	cmp	r3, #0
    1878:	d002      	beq.n	1880 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    187a:	2380      	movs	r3, #128	; 0x80
    187c:	02db      	lsls	r3, r3, #11
    187e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1880:	7a4b      	ldrb	r3, [r1, #9]
    1882:	2b00      	cmp	r3, #0
    1884:	d002      	beq.n	188c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1886:	2380      	movs	r3, #128	; 0x80
    1888:	031b      	lsls	r3, r3, #12
    188a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    188c:	6848      	ldr	r0, [r1, #4]
    188e:	2801      	cmp	r0, #1
    1890:	d910      	bls.n	18b4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1892:	1e43      	subs	r3, r0, #1
    1894:	4218      	tst	r0, r3
    1896:	d134      	bne.n	1902 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1898:	2802      	cmp	r0, #2
    189a:	d930      	bls.n	18fe <system_gclk_gen_set_config+0x96>
    189c:	2302      	movs	r3, #2
    189e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    18a0:	3201      	adds	r2, #1
						mask <<= 1) {
    18a2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    18a4:	4298      	cmp	r0, r3
    18a6:	d8fb      	bhi.n	18a0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    18a8:	0212      	lsls	r2, r2, #8
    18aa:	4332      	orrs	r2, r6
    18ac:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    18ae:	2380      	movs	r3, #128	; 0x80
    18b0:	035b      	lsls	r3, r3, #13
    18b2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    18b4:	7a0b      	ldrb	r3, [r1, #8]
    18b6:	2b00      	cmp	r3, #0
    18b8:	d002      	beq.n	18c0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    18ba:	2380      	movs	r3, #128	; 0x80
    18bc:	039b      	lsls	r3, r3, #14
    18be:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18c0:	4a13      	ldr	r2, [pc, #76]	; (1910 <system_gclk_gen_set_config+0xa8>)
    18c2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    18c4:	b25b      	sxtb	r3, r3
    18c6:	2b00      	cmp	r3, #0
    18c8:	dbfb      	blt.n	18c2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    18ca:	4b12      	ldr	r3, [pc, #72]	; (1914 <system_gclk_gen_set_config+0xac>)
    18cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18ce:	4b12      	ldr	r3, [pc, #72]	; (1918 <system_gclk_gen_set_config+0xb0>)
    18d0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18d2:	4a0f      	ldr	r2, [pc, #60]	; (1910 <system_gclk_gen_set_config+0xa8>)
    18d4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    18d6:	b25b      	sxtb	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	dbfb      	blt.n	18d4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    18dc:	4b0c      	ldr	r3, [pc, #48]	; (1910 <system_gclk_gen_set_config+0xa8>)
    18de:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18e0:	001a      	movs	r2, r3
    18e2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    18e4:	b25b      	sxtb	r3, r3
    18e6:	2b00      	cmp	r3, #0
    18e8:	dbfb      	blt.n	18e2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    18ea:	4a09      	ldr	r2, [pc, #36]	; (1910 <system_gclk_gen_set_config+0xa8>)
    18ec:	6853      	ldr	r3, [r2, #4]
    18ee:	2180      	movs	r1, #128	; 0x80
    18f0:	0249      	lsls	r1, r1, #9
    18f2:	400b      	ands	r3, r1
    18f4:	431d      	orrs	r5, r3
    18f6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    18f8:	4b08      	ldr	r3, [pc, #32]	; (191c <system_gclk_gen_set_config+0xb4>)
    18fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18fc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    18fe:	2200      	movs	r2, #0
    1900:	e7d2      	b.n	18a8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1902:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1904:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1906:	2380      	movs	r3, #128	; 0x80
    1908:	029b      	lsls	r3, r3, #10
    190a:	431d      	orrs	r5, r3
    190c:	e7d2      	b.n	18b4 <system_gclk_gen_set_config+0x4c>
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	40000c00 	.word	0x40000c00
    1914:	000001ad 	.word	0x000001ad
    1918:	40000c08 	.word	0x40000c08
    191c:	000001ed 	.word	0x000001ed

00001920 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1920:	b510      	push	{r4, lr}
    1922:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1924:	4a0b      	ldr	r2, [pc, #44]	; (1954 <system_gclk_gen_enable+0x34>)
    1926:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1928:	b25b      	sxtb	r3, r3
    192a:	2b00      	cmp	r3, #0
    192c:	dbfb      	blt.n	1926 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    192e:	4b0a      	ldr	r3, [pc, #40]	; (1958 <system_gclk_gen_enable+0x38>)
    1930:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1932:	4b0a      	ldr	r3, [pc, #40]	; (195c <system_gclk_gen_enable+0x3c>)
    1934:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1936:	4a07      	ldr	r2, [pc, #28]	; (1954 <system_gclk_gen_enable+0x34>)
    1938:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    193a:	b25b      	sxtb	r3, r3
    193c:	2b00      	cmp	r3, #0
    193e:	dbfb      	blt.n	1938 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1940:	4a04      	ldr	r2, [pc, #16]	; (1954 <system_gclk_gen_enable+0x34>)
    1942:	6851      	ldr	r1, [r2, #4]
    1944:	2380      	movs	r3, #128	; 0x80
    1946:	025b      	lsls	r3, r3, #9
    1948:	430b      	orrs	r3, r1
    194a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    194c:	4b04      	ldr	r3, [pc, #16]	; (1960 <system_gclk_gen_enable+0x40>)
    194e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1950:	bd10      	pop	{r4, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	40000c00 	.word	0x40000c00
    1958:	000001ad 	.word	0x000001ad
    195c:	40000c04 	.word	0x40000c04
    1960:	000001ed 	.word	0x000001ed

00001964 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1964:	b570      	push	{r4, r5, r6, lr}
    1966:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1968:	4a1a      	ldr	r2, [pc, #104]	; (19d4 <system_gclk_gen_get_hz+0x70>)
    196a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    196c:	b25b      	sxtb	r3, r3
    196e:	2b00      	cmp	r3, #0
    1970:	dbfb      	blt.n	196a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1972:	4b19      	ldr	r3, [pc, #100]	; (19d8 <system_gclk_gen_get_hz+0x74>)
    1974:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1976:	4b19      	ldr	r3, [pc, #100]	; (19dc <system_gclk_gen_get_hz+0x78>)
    1978:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    197a:	4a16      	ldr	r2, [pc, #88]	; (19d4 <system_gclk_gen_get_hz+0x70>)
    197c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    197e:	b25b      	sxtb	r3, r3
    1980:	2b00      	cmp	r3, #0
    1982:	dbfb      	blt.n	197c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1984:	4e13      	ldr	r6, [pc, #76]	; (19d4 <system_gclk_gen_get_hz+0x70>)
    1986:	6870      	ldr	r0, [r6, #4]
    1988:	04c0      	lsls	r0, r0, #19
    198a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    198c:	4b14      	ldr	r3, [pc, #80]	; (19e0 <system_gclk_gen_get_hz+0x7c>)
    198e:	4798      	blx	r3
    1990:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1992:	4b12      	ldr	r3, [pc, #72]	; (19dc <system_gclk_gen_get_hz+0x78>)
    1994:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1996:	6876      	ldr	r6, [r6, #4]
    1998:	02f6      	lsls	r6, r6, #11
    199a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    199c:	4b11      	ldr	r3, [pc, #68]	; (19e4 <system_gclk_gen_get_hz+0x80>)
    199e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19a0:	4a0c      	ldr	r2, [pc, #48]	; (19d4 <system_gclk_gen_get_hz+0x70>)
    19a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19a4:	b25b      	sxtb	r3, r3
    19a6:	2b00      	cmp	r3, #0
    19a8:	dbfb      	blt.n	19a2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    19aa:	4b0a      	ldr	r3, [pc, #40]	; (19d4 <system_gclk_gen_get_hz+0x70>)
    19ac:	689c      	ldr	r4, [r3, #8]
    19ae:	0224      	lsls	r4, r4, #8
    19b0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    19b2:	4b0d      	ldr	r3, [pc, #52]	; (19e8 <system_gclk_gen_get_hz+0x84>)
    19b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    19b6:	2e00      	cmp	r6, #0
    19b8:	d107      	bne.n	19ca <system_gclk_gen_get_hz+0x66>
    19ba:	2c01      	cmp	r4, #1
    19bc:	d907      	bls.n	19ce <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    19be:	0021      	movs	r1, r4
    19c0:	0028      	movs	r0, r5
    19c2:	4b0a      	ldr	r3, [pc, #40]	; (19ec <system_gclk_gen_get_hz+0x88>)
    19c4:	4798      	blx	r3
    19c6:	0005      	movs	r5, r0
    19c8:	e001      	b.n	19ce <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    19ca:	3401      	adds	r4, #1
    19cc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    19ce:	0028      	movs	r0, r5
    19d0:	bd70      	pop	{r4, r5, r6, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	40000c00 	.word	0x40000c00
    19d8:	000001ad 	.word	0x000001ad
    19dc:	40000c04 	.word	0x40000c04
    19e0:	00001449 	.word	0x00001449
    19e4:	40000c08 	.word	0x40000c08
    19e8:	000001ed 	.word	0x000001ed
    19ec:	000021bd 	.word	0x000021bd

000019f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    19f0:	b510      	push	{r4, lr}
    19f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19f4:	4b06      	ldr	r3, [pc, #24]	; (1a10 <system_gclk_chan_enable+0x20>)
    19f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19f8:	4b06      	ldr	r3, [pc, #24]	; (1a14 <system_gclk_chan_enable+0x24>)
    19fa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    19fc:	4a06      	ldr	r2, [pc, #24]	; (1a18 <system_gclk_chan_enable+0x28>)
    19fe:	8853      	ldrh	r3, [r2, #2]
    1a00:	2180      	movs	r1, #128	; 0x80
    1a02:	01c9      	lsls	r1, r1, #7
    1a04:	430b      	orrs	r3, r1
    1a06:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a08:	4b04      	ldr	r3, [pc, #16]	; (1a1c <system_gclk_chan_enable+0x2c>)
    1a0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a0c:	bd10      	pop	{r4, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	000001ad 	.word	0x000001ad
    1a14:	40000c02 	.word	0x40000c02
    1a18:	40000c00 	.word	0x40000c00
    1a1c:	000001ed 	.word	0x000001ed

00001a20 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a20:	b510      	push	{r4, lr}
    1a22:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a24:	4b0f      	ldr	r3, [pc, #60]	; (1a64 <system_gclk_chan_disable+0x44>)
    1a26:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a28:	4b0f      	ldr	r3, [pc, #60]	; (1a68 <system_gclk_chan_disable+0x48>)
    1a2a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a2c:	4a0f      	ldr	r2, [pc, #60]	; (1a6c <system_gclk_chan_disable+0x4c>)
    1a2e:	8853      	ldrh	r3, [r2, #2]
    1a30:	051b      	lsls	r3, r3, #20
    1a32:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1a34:	8853      	ldrh	r3, [r2, #2]
    1a36:	490e      	ldr	r1, [pc, #56]	; (1a70 <system_gclk_chan_disable+0x50>)
    1a38:	400b      	ands	r3, r1
    1a3a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a3c:	8853      	ldrh	r3, [r2, #2]
    1a3e:	490d      	ldr	r1, [pc, #52]	; (1a74 <system_gclk_chan_disable+0x54>)
    1a40:	400b      	ands	r3, r1
    1a42:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a44:	0011      	movs	r1, r2
    1a46:	2280      	movs	r2, #128	; 0x80
    1a48:	01d2      	lsls	r2, r2, #7
    1a4a:	884b      	ldrh	r3, [r1, #2]
    1a4c:	4213      	tst	r3, r2
    1a4e:	d1fc      	bne.n	1a4a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1a50:	4906      	ldr	r1, [pc, #24]	; (1a6c <system_gclk_chan_disable+0x4c>)
    1a52:	884a      	ldrh	r2, [r1, #2]
    1a54:	0203      	lsls	r3, r0, #8
    1a56:	4806      	ldr	r0, [pc, #24]	; (1a70 <system_gclk_chan_disable+0x50>)
    1a58:	4002      	ands	r2, r0
    1a5a:	4313      	orrs	r3, r2
    1a5c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1a5e:	4b06      	ldr	r3, [pc, #24]	; (1a78 <system_gclk_chan_disable+0x58>)
    1a60:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a62:	bd10      	pop	{r4, pc}
    1a64:	000001ad 	.word	0x000001ad
    1a68:	40000c02 	.word	0x40000c02
    1a6c:	40000c00 	.word	0x40000c00
    1a70:	fffff0ff 	.word	0xfffff0ff
    1a74:	ffffbfff 	.word	0xffffbfff
    1a78:	000001ed 	.word	0x000001ed

00001a7c <system_gclk_chan_set_config>:
{
    1a7c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a7e:	780c      	ldrb	r4, [r1, #0]
    1a80:	0224      	lsls	r4, r4, #8
    1a82:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a84:	4b02      	ldr	r3, [pc, #8]	; (1a90 <system_gclk_chan_set_config+0x14>)
    1a86:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a88:	b2a4      	uxth	r4, r4
    1a8a:	4b02      	ldr	r3, [pc, #8]	; (1a94 <system_gclk_chan_set_config+0x18>)
    1a8c:	805c      	strh	r4, [r3, #2]
}
    1a8e:	bd10      	pop	{r4, pc}
    1a90:	00001a21 	.word	0x00001a21
    1a94:	40000c00 	.word	0x40000c00

00001a98 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a98:	b510      	push	{r4, lr}
    1a9a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a9c:	4b06      	ldr	r3, [pc, #24]	; (1ab8 <system_gclk_chan_get_hz+0x20>)
    1a9e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1aa0:	4b06      	ldr	r3, [pc, #24]	; (1abc <system_gclk_chan_get_hz+0x24>)
    1aa2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1aa4:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <system_gclk_chan_get_hz+0x28>)
    1aa6:	885c      	ldrh	r4, [r3, #2]
    1aa8:	0524      	lsls	r4, r4, #20
    1aaa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1aac:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <system_gclk_chan_get_hz+0x2c>)
    1aae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ab0:	0020      	movs	r0, r4
    1ab2:	4b05      	ldr	r3, [pc, #20]	; (1ac8 <system_gclk_chan_get_hz+0x30>)
    1ab4:	4798      	blx	r3
}
    1ab6:	bd10      	pop	{r4, pc}
    1ab8:	000001ad 	.word	0x000001ad
    1abc:	40000c02 	.word	0x40000c02
    1ac0:	40000c00 	.word	0x40000c00
    1ac4:	000001ed 	.word	0x000001ed
    1ac8:	00001965 	.word	0x00001965

00001acc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1acc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1ace:	78d3      	ldrb	r3, [r2, #3]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d135      	bne.n	1b40 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ad4:	7813      	ldrb	r3, [r2, #0]
    1ad6:	2b80      	cmp	r3, #128	; 0x80
    1ad8:	d029      	beq.n	1b2e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ada:	061b      	lsls	r3, r3, #24
    1adc:	2480      	movs	r4, #128	; 0x80
    1ade:	0264      	lsls	r4, r4, #9
    1ae0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ae2:	7854      	ldrb	r4, [r2, #1]
    1ae4:	2502      	movs	r5, #2
    1ae6:	43ac      	bics	r4, r5
    1ae8:	d106      	bne.n	1af8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1aea:	7894      	ldrb	r4, [r2, #2]
    1aec:	2c00      	cmp	r4, #0
    1aee:	d120      	bne.n	1b32 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1af0:	2480      	movs	r4, #128	; 0x80
    1af2:	02a4      	lsls	r4, r4, #10
    1af4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1af6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1af8:	7854      	ldrb	r4, [r2, #1]
    1afa:	3c01      	subs	r4, #1
    1afc:	2c01      	cmp	r4, #1
    1afe:	d91c      	bls.n	1b3a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b00:	040d      	lsls	r5, r1, #16
    1b02:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b04:	24a0      	movs	r4, #160	; 0xa0
    1b06:	05e4      	lsls	r4, r4, #23
    1b08:	432c      	orrs	r4, r5
    1b0a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b0c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b0e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b10:	24d0      	movs	r4, #208	; 0xd0
    1b12:	0624      	lsls	r4, r4, #24
    1b14:	432c      	orrs	r4, r5
    1b16:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b18:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b1a:	78d4      	ldrb	r4, [r2, #3]
    1b1c:	2c00      	cmp	r4, #0
    1b1e:	d122      	bne.n	1b66 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b20:	035b      	lsls	r3, r3, #13
    1b22:	d51c      	bpl.n	1b5e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b24:	7893      	ldrb	r3, [r2, #2]
    1b26:	2b01      	cmp	r3, #1
    1b28:	d01e      	beq.n	1b68 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1b2a:	6141      	str	r1, [r0, #20]
    1b2c:	e017      	b.n	1b5e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1b2e:	2300      	movs	r3, #0
    1b30:	e7d7      	b.n	1ae2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b32:	24c0      	movs	r4, #192	; 0xc0
    1b34:	02e4      	lsls	r4, r4, #11
    1b36:	4323      	orrs	r3, r4
    1b38:	e7dd      	b.n	1af6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b3a:	4c0d      	ldr	r4, [pc, #52]	; (1b70 <_system_pinmux_config+0xa4>)
    1b3c:	4023      	ands	r3, r4
    1b3e:	e7df      	b.n	1b00 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1b40:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b42:	040c      	lsls	r4, r1, #16
    1b44:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b46:	23a0      	movs	r3, #160	; 0xa0
    1b48:	05db      	lsls	r3, r3, #23
    1b4a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b4c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b4e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b50:	23d0      	movs	r3, #208	; 0xd0
    1b52:	061b      	lsls	r3, r3, #24
    1b54:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b56:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1b58:	78d3      	ldrb	r3, [r2, #3]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d103      	bne.n	1b66 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b5e:	7853      	ldrb	r3, [r2, #1]
    1b60:	3b01      	subs	r3, #1
    1b62:	2b01      	cmp	r3, #1
    1b64:	d902      	bls.n	1b6c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1b66:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1b68:	6181      	str	r1, [r0, #24]
    1b6a:	e7f8      	b.n	1b5e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1b6c:	6081      	str	r1, [r0, #8]
}
    1b6e:	e7fa      	b.n	1b66 <_system_pinmux_config+0x9a>
    1b70:	fffbffff 	.word	0xfffbffff

00001b74 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b74:	b510      	push	{r4, lr}
    1b76:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b78:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b7a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b7c:	2900      	cmp	r1, #0
    1b7e:	d104      	bne.n	1b8a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b80:	0943      	lsrs	r3, r0, #5
    1b82:	01db      	lsls	r3, r3, #7
    1b84:	4905      	ldr	r1, [pc, #20]	; (1b9c <system_pinmux_pin_set_config+0x28>)
    1b86:	468c      	mov	ip, r1
    1b88:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b8a:	241f      	movs	r4, #31
    1b8c:	4020      	ands	r0, r4
    1b8e:	2101      	movs	r1, #1
    1b90:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1b92:	0018      	movs	r0, r3
    1b94:	4b02      	ldr	r3, [pc, #8]	; (1ba0 <system_pinmux_pin_set_config+0x2c>)
    1b96:	4798      	blx	r3
}
    1b98:	bd10      	pop	{r4, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	41004400 	.word	0x41004400
    1ba0:	00001acd 	.word	0x00001acd

00001ba4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1ba4:	4770      	bx	lr
	...

00001ba8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1ba8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1baa:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <system_init+0x18>)
    1bac:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1bae:	4b05      	ldr	r3, [pc, #20]	; (1bc4 <system_init+0x1c>)
    1bb0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1bb2:	4b05      	ldr	r3, [pc, #20]	; (1bc8 <system_init+0x20>)
    1bb4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1bb6:	4b05      	ldr	r3, [pc, #20]	; (1bcc <system_init+0x24>)
    1bb8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1bba:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <system_init+0x28>)
    1bbc:	4798      	blx	r3
}
    1bbe:	bd10      	pop	{r4, pc}
    1bc0:	000016bd 	.word	0x000016bd
    1bc4:	0000021d 	.word	0x0000021d
    1bc8:	00001ba5 	.word	0x00001ba5
    1bcc:	0000035d 	.word	0x0000035d
    1bd0:	00001ba5 	.word	0x00001ba5

00001bd4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1bd4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1bd6:	0080      	lsls	r0, r0, #2
    1bd8:	4b16      	ldr	r3, [pc, #88]	; (1c34 <_tc_interrupt_handler+0x60>)
    1bda:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1bdc:	6823      	ldr	r3, [r4, #0]
    1bde:	7b9d      	ldrb	r5, [r3, #14]
    1be0:	7e22      	ldrb	r2, [r4, #24]
    1be2:	7e63      	ldrb	r3, [r4, #25]
    1be4:	4013      	ands	r3, r2
    1be6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1be8:	07eb      	lsls	r3, r5, #31
    1bea:	d406      	bmi.n	1bfa <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1bec:	07ab      	lsls	r3, r5, #30
    1bee:	d40b      	bmi.n	1c08 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1bf0:	06eb      	lsls	r3, r5, #27
    1bf2:	d410      	bmi.n	1c16 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1bf4:	06ab      	lsls	r3, r5, #26
    1bf6:	d415      	bmi.n	1c24 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1bfa:	0020      	movs	r0, r4
    1bfc:	68a3      	ldr	r3, [r4, #8]
    1bfe:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1c00:	2301      	movs	r3, #1
    1c02:	6822      	ldr	r2, [r4, #0]
    1c04:	7393      	strb	r3, [r2, #14]
    1c06:	e7f1      	b.n	1bec <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c08:	0020      	movs	r0, r4
    1c0a:	68e3      	ldr	r3, [r4, #12]
    1c0c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c0e:	2302      	movs	r3, #2
    1c10:	6822      	ldr	r2, [r4, #0]
    1c12:	7393      	strb	r3, [r2, #14]
    1c14:	e7ec      	b.n	1bf0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1c16:	0020      	movs	r0, r4
    1c18:	6923      	ldr	r3, [r4, #16]
    1c1a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1c1c:	2310      	movs	r3, #16
    1c1e:	6822      	ldr	r2, [r4, #0]
    1c20:	7393      	strb	r3, [r2, #14]
    1c22:	e7e7      	b.n	1bf4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1c24:	0020      	movs	r0, r4
    1c26:	6963      	ldr	r3, [r4, #20]
    1c28:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1c2a:	6823      	ldr	r3, [r4, #0]
    1c2c:	2220      	movs	r2, #32
    1c2e:	739a      	strb	r2, [r3, #14]
}
    1c30:	e7e2      	b.n	1bf8 <_tc_interrupt_handler+0x24>
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	20000224 	.word	0x20000224

00001c38 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1c38:	b510      	push	{r4, lr}
    1c3a:	2000      	movs	r0, #0
    1c3c:	4b01      	ldr	r3, [pc, #4]	; (1c44 <TC3_Handler+0xc>)
    1c3e:	4798      	blx	r3
    1c40:	bd10      	pop	{r4, pc}
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	00001bd5 	.word	0x00001bd5

00001c48 <TC4_Handler>:
    1c48:	b510      	push	{r4, lr}
    1c4a:	2001      	movs	r0, #1
    1c4c:	4b01      	ldr	r3, [pc, #4]	; (1c54 <TC4_Handler+0xc>)
    1c4e:	4798      	blx	r3
    1c50:	bd10      	pop	{r4, pc}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	00001bd5 	.word	0x00001bd5

00001c58 <TC5_Handler>:
    1c58:	b510      	push	{r4, lr}
    1c5a:	2002      	movs	r0, #2
    1c5c:	4b01      	ldr	r3, [pc, #4]	; (1c64 <TC5_Handler+0xc>)
    1c5e:	4798      	blx	r3
    1c60:	bd10      	pop	{r4, pc}
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	00001bd5 	.word	0x00001bd5

00001c68 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1c68:	e7fe      	b.n	1c68 <Dummy_Handler>
	...

00001c6c <Reset_Handler>:
{
    1c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1c6e:	4a2a      	ldr	r2, [pc, #168]	; (1d18 <Reset_Handler+0xac>)
    1c70:	4b2a      	ldr	r3, [pc, #168]	; (1d1c <Reset_Handler+0xb0>)
    1c72:	429a      	cmp	r2, r3
    1c74:	d011      	beq.n	1c9a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1c76:	001a      	movs	r2, r3
    1c78:	4b29      	ldr	r3, [pc, #164]	; (1d20 <Reset_Handler+0xb4>)
    1c7a:	429a      	cmp	r2, r3
    1c7c:	d20d      	bcs.n	1c9a <Reset_Handler+0x2e>
    1c7e:	4a29      	ldr	r2, [pc, #164]	; (1d24 <Reset_Handler+0xb8>)
    1c80:	3303      	adds	r3, #3
    1c82:	1a9b      	subs	r3, r3, r2
    1c84:	089b      	lsrs	r3, r3, #2
    1c86:	3301      	adds	r3, #1
    1c88:	009b      	lsls	r3, r3, #2
    1c8a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1c8c:	4823      	ldr	r0, [pc, #140]	; (1d1c <Reset_Handler+0xb0>)
    1c8e:	4922      	ldr	r1, [pc, #136]	; (1d18 <Reset_Handler+0xac>)
    1c90:	588c      	ldr	r4, [r1, r2]
    1c92:	5084      	str	r4, [r0, r2]
    1c94:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1c96:	429a      	cmp	r2, r3
    1c98:	d1fa      	bne.n	1c90 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1c9a:	4a23      	ldr	r2, [pc, #140]	; (1d28 <Reset_Handler+0xbc>)
    1c9c:	4b23      	ldr	r3, [pc, #140]	; (1d2c <Reset_Handler+0xc0>)
    1c9e:	429a      	cmp	r2, r3
    1ca0:	d20a      	bcs.n	1cb8 <Reset_Handler+0x4c>
    1ca2:	43d3      	mvns	r3, r2
    1ca4:	4921      	ldr	r1, [pc, #132]	; (1d2c <Reset_Handler+0xc0>)
    1ca6:	185b      	adds	r3, r3, r1
    1ca8:	2103      	movs	r1, #3
    1caa:	438b      	bics	r3, r1
    1cac:	3304      	adds	r3, #4
    1cae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1cb0:	2100      	movs	r1, #0
    1cb2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1cb4:	4293      	cmp	r3, r2
    1cb6:	d1fc      	bne.n	1cb2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1cb8:	4a1d      	ldr	r2, [pc, #116]	; (1d30 <Reset_Handler+0xc4>)
    1cba:	21ff      	movs	r1, #255	; 0xff
    1cbc:	4b1d      	ldr	r3, [pc, #116]	; (1d34 <Reset_Handler+0xc8>)
    1cbe:	438b      	bics	r3, r1
    1cc0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1cc2:	39fd      	subs	r1, #253	; 0xfd
    1cc4:	2390      	movs	r3, #144	; 0x90
    1cc6:	005b      	lsls	r3, r3, #1
    1cc8:	4a1b      	ldr	r2, [pc, #108]	; (1d38 <Reset_Handler+0xcc>)
    1cca:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ccc:	4a1b      	ldr	r2, [pc, #108]	; (1d3c <Reset_Handler+0xd0>)
    1cce:	78d3      	ldrb	r3, [r2, #3]
    1cd0:	2503      	movs	r5, #3
    1cd2:	43ab      	bics	r3, r5
    1cd4:	2402      	movs	r4, #2
    1cd6:	4323      	orrs	r3, r4
    1cd8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1cda:	78d3      	ldrb	r3, [r2, #3]
    1cdc:	270c      	movs	r7, #12
    1cde:	43bb      	bics	r3, r7
    1ce0:	2608      	movs	r6, #8
    1ce2:	4333      	orrs	r3, r6
    1ce4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1ce6:	4b16      	ldr	r3, [pc, #88]	; (1d40 <Reset_Handler+0xd4>)
    1ce8:	7b98      	ldrb	r0, [r3, #14]
    1cea:	2230      	movs	r2, #48	; 0x30
    1cec:	4390      	bics	r0, r2
    1cee:	2220      	movs	r2, #32
    1cf0:	4310      	orrs	r0, r2
    1cf2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1cf4:	7b99      	ldrb	r1, [r3, #14]
    1cf6:	43b9      	bics	r1, r7
    1cf8:	4331      	orrs	r1, r6
    1cfa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1cfc:	7b9a      	ldrb	r2, [r3, #14]
    1cfe:	43aa      	bics	r2, r5
    1d00:	4322      	orrs	r2, r4
    1d02:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1d04:	4a0f      	ldr	r2, [pc, #60]	; (1d44 <Reset_Handler+0xd8>)
    1d06:	6853      	ldr	r3, [r2, #4]
    1d08:	2180      	movs	r1, #128	; 0x80
    1d0a:	430b      	orrs	r3, r1
    1d0c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1d0e:	4b0e      	ldr	r3, [pc, #56]	; (1d48 <Reset_Handler+0xdc>)
    1d10:	4798      	blx	r3
        main();
    1d12:	4b0e      	ldr	r3, [pc, #56]	; (1d4c <Reset_Handler+0xe0>)
    1d14:	4798      	blx	r3
    1d16:	e7fe      	b.n	1d16 <Reset_Handler+0xaa>
    1d18:	00004dd8 	.word	0x00004dd8
    1d1c:	20000000 	.word	0x20000000
    1d20:	2000007c 	.word	0x2000007c
    1d24:	20000004 	.word	0x20000004
    1d28:	2000007c 	.word	0x2000007c
    1d2c:	2000034c 	.word	0x2000034c
    1d30:	e000ed00 	.word	0xe000ed00
    1d34:	00000000 	.word	0x00000000
    1d38:	41007000 	.word	0x41007000
    1d3c:	41005000 	.word	0x41005000
    1d40:	41004800 	.word	0x41004800
    1d44:	41004000 	.word	0x41004000
    1d48:	00003bf1 	.word	0x00003bf1
    1d4c:	000020e5 	.word	0x000020e5

00001d50 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d52:	46c6      	mov	lr, r8
    1d54:	b500      	push	{lr}
    1d56:	000c      	movs	r4, r1
    1d58:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1d5a:	2800      	cmp	r0, #0
    1d5c:	d10f      	bne.n	1d7e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1d5e:	2a00      	cmp	r2, #0
    1d60:	dd11      	ble.n	1d86 <_read+0x36>
    1d62:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1d64:	4e09      	ldr	r6, [pc, #36]	; (1d8c <_read+0x3c>)
    1d66:	4d0a      	ldr	r5, [pc, #40]	; (1d90 <_read+0x40>)
    1d68:	6830      	ldr	r0, [r6, #0]
    1d6a:	0021      	movs	r1, r4
    1d6c:	682b      	ldr	r3, [r5, #0]
    1d6e:	4798      	blx	r3
		ptr++;
    1d70:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1d72:	42bc      	cmp	r4, r7
    1d74:	d1f8      	bne.n	1d68 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1d76:	4640      	mov	r0, r8
    1d78:	bc04      	pop	{r2}
    1d7a:	4690      	mov	r8, r2
    1d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1d7e:	2301      	movs	r3, #1
    1d80:	425b      	negs	r3, r3
    1d82:	4698      	mov	r8, r3
    1d84:	e7f7      	b.n	1d76 <_read+0x26>
	for (; len > 0; --len) {
    1d86:	4680      	mov	r8, r0
    1d88:	e7f5      	b.n	1d76 <_read+0x26>
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	20000238 	.word	0x20000238
    1d90:	20000230 	.word	0x20000230

00001d94 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d96:	46c6      	mov	lr, r8
    1d98:	b500      	push	{lr}
    1d9a:	000e      	movs	r6, r1
    1d9c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1d9e:	3801      	subs	r0, #1
    1da0:	2802      	cmp	r0, #2
    1da2:	d810      	bhi.n	1dc6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1da4:	2a00      	cmp	r2, #0
    1da6:	d011      	beq.n	1dcc <_write+0x38>
    1da8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1daa:	4b0c      	ldr	r3, [pc, #48]	; (1ddc <_write+0x48>)
    1dac:	4698      	mov	r8, r3
    1dae:	4f0c      	ldr	r7, [pc, #48]	; (1de0 <_write+0x4c>)
    1db0:	4643      	mov	r3, r8
    1db2:	6818      	ldr	r0, [r3, #0]
    1db4:	5d31      	ldrb	r1, [r6, r4]
    1db6:	683b      	ldr	r3, [r7, #0]
    1db8:	4798      	blx	r3
    1dba:	2800      	cmp	r0, #0
    1dbc:	db08      	blt.n	1dd0 <_write+0x3c>
			return -1;
		}
		++nChars;
    1dbe:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1dc0:	42a5      	cmp	r5, r4
    1dc2:	d1f5      	bne.n	1db0 <_write+0x1c>
    1dc4:	e006      	b.n	1dd4 <_write+0x40>
		return -1;
    1dc6:	2401      	movs	r4, #1
    1dc8:	4264      	negs	r4, r4
    1dca:	e003      	b.n	1dd4 <_write+0x40>
	for (; len != 0; --len) {
    1dcc:	0014      	movs	r4, r2
    1dce:	e001      	b.n	1dd4 <_write+0x40>
			return -1;
    1dd0:	2401      	movs	r4, #1
    1dd2:	4264      	negs	r4, r4
	}
	return nChars;
}
    1dd4:	0020      	movs	r0, r4
    1dd6:	bc04      	pop	{r2}
    1dd8:	4690      	mov	r8, r2
    1dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ddc:	20000238 	.word	0x20000238
    1de0:	20000234 	.word	0x20000234

00001de4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1de4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1de6:	4a06      	ldr	r2, [pc, #24]	; (1e00 <_sbrk+0x1c>)
    1de8:	6812      	ldr	r2, [r2, #0]
    1dea:	2a00      	cmp	r2, #0
    1dec:	d004      	beq.n	1df8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1dee:	4a04      	ldr	r2, [pc, #16]	; (1e00 <_sbrk+0x1c>)
    1df0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1df2:	18c3      	adds	r3, r0, r3
    1df4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1df6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1df8:	4902      	ldr	r1, [pc, #8]	; (1e04 <_sbrk+0x20>)
    1dfa:	4a01      	ldr	r2, [pc, #4]	; (1e00 <_sbrk+0x1c>)
    1dfc:	6011      	str	r1, [r2, #0]
    1dfe:	e7f6      	b.n	1dee <_sbrk+0xa>
    1e00:	200000d4 	.word	0x200000d4
    1e04:	20002350 	.word	0x20002350

00001e08 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1e08:	2001      	movs	r0, #1
    1e0a:	4240      	negs	r0, r0
    1e0c:	4770      	bx	lr

00001e0e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1e0e:	2380      	movs	r3, #128	; 0x80
    1e10:	019b      	lsls	r3, r3, #6
    1e12:	604b      	str	r3, [r1, #4]

	return 0;
}
    1e14:	2000      	movs	r0, #0
    1e16:	4770      	bx	lr

00001e18 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1e18:	2001      	movs	r0, #1
    1e1a:	4770      	bx	lr

00001e1c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1e1c:	2000      	movs	r0, #0
    1e1e:	4770      	bx	lr

00001e20 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1e20:	b570      	push	{r4, r5, r6, lr}
    1e22:	b082      	sub	sp, #8
    1e24:	0005      	movs	r5, r0
    1e26:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1e28:	2200      	movs	r2, #0
    1e2a:	466b      	mov	r3, sp
    1e2c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1e2e:	4c06      	ldr	r4, [pc, #24]	; (1e48 <usart_serial_getchar+0x28>)
    1e30:	466b      	mov	r3, sp
    1e32:	1d99      	adds	r1, r3, #6
    1e34:	0028      	movs	r0, r5
    1e36:	47a0      	blx	r4
    1e38:	2800      	cmp	r0, #0
    1e3a:	d1f9      	bne.n	1e30 <usart_serial_getchar+0x10>

	*c = temp;
    1e3c:	466b      	mov	r3, sp
    1e3e:	3306      	adds	r3, #6
    1e40:	881b      	ldrh	r3, [r3, #0]
    1e42:	7033      	strb	r3, [r6, #0]
}
    1e44:	b002      	add	sp, #8
    1e46:	bd70      	pop	{r4, r5, r6, pc}
    1e48:	000011ad 	.word	0x000011ad

00001e4c <usart_serial_putchar>:
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1e50:	b28c      	uxth	r4, r1
    1e52:	4e03      	ldr	r6, [pc, #12]	; (1e60 <usart_serial_putchar+0x14>)
    1e54:	0021      	movs	r1, r4
    1e56:	0028      	movs	r0, r5
    1e58:	47b0      	blx	r6
    1e5a:	2800      	cmp	r0, #0
    1e5c:	d1fa      	bne.n	1e54 <usart_serial_putchar+0x8>
}
    1e5e:	bd70      	pop	{r4, r5, r6, pc}
    1e60:	00001181 	.word	0x00001181

00001e64 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    1e64:	b510      	push	{r4, lr}
    1e66:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    1e68:	466b      	mov	r3, sp
    1e6a:	1ddc      	adds	r4, r3, #7
    1e6c:	2201      	movs	r2, #1
    1e6e:	0021      	movs	r1, r4
    1e70:	480f      	ldr	r0, [pc, #60]	; (1eb0 <USART_HOST_ISR_VECT+0x4c>)
    1e72:	4b10      	ldr	r3, [pc, #64]	; (1eb4 <USART_HOST_ISR_VECT+0x50>)
    1e74:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    1e76:	b672      	cpsid	i
    1e78:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    1e7c:	2200      	movs	r2, #0
    1e7e:	4b0e      	ldr	r3, [pc, #56]	; (1eb8 <USART_HOST_ISR_VECT+0x54>)
    1e80:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    1e82:	4b0e      	ldr	r3, [pc, #56]	; (1ebc <USART_HOST_ISR_VECT+0x58>)
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	7821      	ldrb	r1, [r4, #0]
    1e88:	4a0d      	ldr	r2, [pc, #52]	; (1ec0 <USART_HOST_ISR_VECT+0x5c>)
    1e8a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    1e8c:	2b9b      	cmp	r3, #155	; 0x9b
    1e8e:	d00a      	beq.n	1ea6 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    1e90:	3301      	adds	r3, #1
    1e92:	4a0a      	ldr	r2, [pc, #40]	; (1ebc <USART_HOST_ISR_VECT+0x58>)
    1e94:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    1e96:	2201      	movs	r2, #1
    1e98:	4b07      	ldr	r3, [pc, #28]	; (1eb8 <USART_HOST_ISR_VECT+0x54>)
    1e9a:	701a      	strb	r2, [r3, #0]
    1e9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1ea0:	b662      	cpsie	i
}
    1ea2:	b002      	add	sp, #8
    1ea4:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    1ea6:	2200      	movs	r2, #0
    1ea8:	4b04      	ldr	r3, [pc, #16]	; (1ebc <USART_HOST_ISR_VECT+0x58>)
    1eaa:	701a      	strb	r2, [r3, #0]
    1eac:	e7f3      	b.n	1e96 <USART_HOST_ISR_VECT+0x32>
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	200000d8 	.word	0x200000d8
    1eb4:	0000121d 	.word	0x0000121d
    1eb8:	20000008 	.word	0x20000008
    1ebc:	200001a8 	.word	0x200001a8
    1ec0:	2000010c 	.word	0x2000010c

00001ec4 <sio2host_init>:
{
    1ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1ec8:	2380      	movs	r3, #128	; 0x80
    1eca:	05db      	lsls	r3, r3, #23
    1ecc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1ece:	2300      	movs	r3, #0
    1ed0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1ed2:	22ff      	movs	r2, #255	; 0xff
    1ed4:	4669      	mov	r1, sp
    1ed6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1ed8:	2200      	movs	r2, #0
    1eda:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1edc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1ede:	2401      	movs	r4, #1
    1ee0:	2124      	movs	r1, #36	; 0x24
    1ee2:	4668      	mov	r0, sp
    1ee4:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1ee6:	3101      	adds	r1, #1
    1ee8:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1eea:	3101      	adds	r1, #1
    1eec:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1eee:	3101      	adds	r1, #1
    1ef0:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1ef2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1ef4:	3105      	adds	r1, #5
    1ef6:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1ef8:	3101      	adds	r1, #1
    1efa:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1efc:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1efe:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1f00:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1f02:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1f04:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1f06:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1f08:	2313      	movs	r3, #19
    1f0a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1f0c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    1f0e:	2380      	movs	r3, #128	; 0x80
    1f10:	035b      	lsls	r3, r3, #13
    1f12:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    1f14:	4b2f      	ldr	r3, [pc, #188]	; (1fd4 <sio2host_init+0x110>)
    1f16:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    1f18:	4b2f      	ldr	r3, [pc, #188]	; (1fd8 <sio2host_init+0x114>)
    1f1a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    1f1c:	2301      	movs	r3, #1
    1f1e:	425b      	negs	r3, r3
    1f20:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    1f22:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    1f24:	23e1      	movs	r3, #225	; 0xe1
    1f26:	025b      	lsls	r3, r3, #9
    1f28:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1f2a:	4d2c      	ldr	r5, [pc, #176]	; (1fdc <sio2host_init+0x118>)
    1f2c:	4b2c      	ldr	r3, [pc, #176]	; (1fe0 <sio2host_init+0x11c>)
    1f2e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1f30:	4a2c      	ldr	r2, [pc, #176]	; (1fe4 <sio2host_init+0x120>)
    1f32:	4b2d      	ldr	r3, [pc, #180]	; (1fe8 <sio2host_init+0x124>)
    1f34:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1f36:	4a2d      	ldr	r2, [pc, #180]	; (1fec <sio2host_init+0x128>)
    1f38:	4b2d      	ldr	r3, [pc, #180]	; (1ff0 <sio2host_init+0x12c>)
    1f3a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1f3c:	466a      	mov	r2, sp
    1f3e:	492d      	ldr	r1, [pc, #180]	; (1ff4 <sio2host_init+0x130>)
    1f40:	0028      	movs	r0, r5
    1f42:	4b2d      	ldr	r3, [pc, #180]	; (1ff8 <sio2host_init+0x134>)
    1f44:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1f46:	4f2d      	ldr	r7, [pc, #180]	; (1ffc <sio2host_init+0x138>)
    1f48:	683b      	ldr	r3, [r7, #0]
    1f4a:	6898      	ldr	r0, [r3, #8]
    1f4c:	2100      	movs	r1, #0
    1f4e:	4e2c      	ldr	r6, [pc, #176]	; (2000 <STACK_SIZE>)
    1f50:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1f52:	683b      	ldr	r3, [r7, #0]
    1f54:	6858      	ldr	r0, [r3, #4]
    1f56:	2100      	movs	r1, #0
    1f58:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f5a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1f5c:	0030      	movs	r0, r6
    1f5e:	4b29      	ldr	r3, [pc, #164]	; (2004 <STACK_SIZE+0x4>)
    1f60:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1f62:	231f      	movs	r3, #31
    1f64:	4018      	ands	r0, r3
    1f66:	4084      	lsls	r4, r0
    1f68:	4b27      	ldr	r3, [pc, #156]	; (2008 <STACK_SIZE+0x8>)
    1f6a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f6c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f6e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1f70:	2b00      	cmp	r3, #0
    1f72:	d1fc      	bne.n	1f6e <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1f74:	6833      	ldr	r3, [r6, #0]
    1f76:	2202      	movs	r2, #2
    1f78:	4313      	orrs	r3, r2
    1f7a:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f7c:	4b17      	ldr	r3, [pc, #92]	; (1fdc <sio2host_init+0x118>)
    1f7e:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f80:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1f82:	2a00      	cmp	r2, #0
    1f84:	d1fc      	bne.n	1f80 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    1f86:	6859      	ldr	r1, [r3, #4]
    1f88:	2280      	movs	r2, #128	; 0x80
    1f8a:	0252      	lsls	r2, r2, #9
    1f8c:	430a      	orrs	r2, r1
    1f8e:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1f90:	2101      	movs	r1, #1
    1f92:	4a12      	ldr	r2, [pc, #72]	; (1fdc <sio2host_init+0x118>)
    1f94:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    1f96:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1f98:	2a00      	cmp	r2, #0
    1f9a:	d1fc      	bne.n	1f96 <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    1f9c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1f9e:	2a00      	cmp	r2, #0
    1fa0:	d1fc      	bne.n	1f9c <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    1fa2:	6859      	ldr	r1, [r3, #4]
    1fa4:	2280      	movs	r2, #128	; 0x80
    1fa6:	0292      	lsls	r2, r2, #10
    1fa8:	430a      	orrs	r2, r1
    1faa:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    1fac:	2101      	movs	r1, #1
    1fae:	4a0b      	ldr	r2, [pc, #44]	; (1fdc <sio2host_init+0x118>)
    1fb0:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    1fb2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1fb4:	2a00      	cmp	r2, #0
    1fb6:	d1fc      	bne.n	1fb2 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    1fb8:	4914      	ldr	r1, [pc, #80]	; (200c <STACK_SIZE+0xc>)
    1fba:	2000      	movs	r0, #0
    1fbc:	4b14      	ldr	r3, [pc, #80]	; (2010 <STACK_SIZE+0x10>)
    1fbe:	4798      	blx	r3
    1fc0:	2204      	movs	r2, #4
    1fc2:	4b0c      	ldr	r3, [pc, #48]	; (1ff4 <sio2host_init+0x130>)
    1fc4:	759a      	strb	r2, [r3, #22]
    1fc6:	32fd      	adds	r2, #253	; 0xfd
    1fc8:	32ff      	adds	r2, #255	; 0xff
    1fca:	4b0f      	ldr	r3, [pc, #60]	; (2008 <STACK_SIZE+0x8>)
    1fcc:	601a      	str	r2, [r3, #0]
}
    1fce:	b011      	add	sp, #68	; 0x44
    1fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	00040003 	.word	0x00040003
    1fd8:	00050003 	.word	0x00050003
    1fdc:	200000d8 	.word	0x200000d8
    1fe0:	20000238 	.word	0x20000238
    1fe4:	00001e4d 	.word	0x00001e4d
    1fe8:	20000234 	.word	0x20000234
    1fec:	00001e21 	.word	0x00001e21
    1ff0:	20000230 	.word	0x20000230
    1ff4:	42000800 	.word	0x42000800
    1ff8:	00000e3d 	.word	0x00000e3d
    1ffc:	20000018 	.word	0x20000018
    2000:	00003c7d 	.word	0x00003c7d
    2004:	00000dad 	.word	0x00000dad
    2008:	e000e100 	.word	0xe000e100
    200c:	00001e65 	.word	0x00001e65
    2010:	00000d71 	.word	0x00000d71

00002014 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2014:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2016:	2207      	movs	r2, #7
    2018:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    201a:	421a      	tst	r2, r3
    201c:	d1fc      	bne.n	2018 <_i2c_master_wait_for_sync+0x4>
}
    201e:	4770      	bx	lr

00002020 <config_i2c_GLCD_Select>:

#include "header.h"
#include "extern.h"


void config_i2c_GLCD_Select(void){
    2020:	b500      	push	{lr}
    2022:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2024:	a901      	add	r1, sp, #4
    2026:	2301      	movs	r3, #1
    2028:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    202a:	2200      	movs	r2, #0
    202c:	708a      	strb	r2, [r1, #2]
	struct port_config pin_config;
	port_get_config_defaults( &pin_config);
	pin_config.direction  = PORT_PIN_DIR_OUTPUT;
    202e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA23, &pin_config);
    2030:	2017      	movs	r0, #23
    2032:	4b04      	ldr	r3, [pc, #16]	; (2044 <config_i2c_GLCD_Select+0x24>)
    2034:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2036:	2280      	movs	r2, #128	; 0x80
    2038:	0412      	lsls	r2, r2, #16
    203a:	4b03      	ldr	r3, [pc, #12]	; (2048 <config_i2c_GLCD_Select+0x28>)
    203c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA23, true);
}
    203e:	b003      	add	sp, #12
    2040:	bd00      	pop	{pc}
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	000003c9 	.word	0x000003c9
    2048:	41004400 	.word	0x41004400

0000204c <configure_i2c_master>:

void configure_i2c_master(void){
    204c:	b530      	push	{r4, r5, lr}
    204e:	b08f      	sub	sp, #60	; 0x3c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2050:	aa01      	add	r2, sp, #4
    2052:	2364      	movs	r3, #100	; 0x64
    2054:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2056:	4b1b      	ldr	r3, [pc, #108]	; (20c4 <configure_i2c_master+0x78>)
    2058:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    205a:	2300      	movs	r3, #0
    205c:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    205e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2060:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2062:	2180      	movs	r1, #128	; 0x80
    2064:	0389      	lsls	r1, r1, #14
    2066:	6111      	str	r1, [r2, #16]
	config->unknown_bus_state_timeout = 65535;
    2068:	2101      	movs	r1, #1
    206a:	4249      	negs	r1, r1
    206c:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    206e:	3125      	adds	r1, #37	; 0x25
    2070:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2072:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    2074:	3108      	adds	r1, #8
    2076:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    2078:	3101      	adds	r1, #1
    207a:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    207c:	3101      	adds	r1, #1
    207e:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    2080:	33d7      	adds	r3, #215	; 0xd7
    2082:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	
	i2c_master_get_config_defaults(&config_i2c_master);
//	config_i2c_master.buffer_timeout = 1000;
	config_i2c_master.buffer_timeout = 10000;
    2084:	4b10      	ldr	r3, [pc, #64]	; (20c8 <configure_i2c_master+0x7c>)
    2086:	82d3      	strh	r3, [r2, #22]
	
	config_i2c_master.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    2088:	4b10      	ldr	r3, [pc, #64]	; (20cc <configure_i2c_master+0x80>)
    208a:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    208c:	4b10      	ldr	r3, [pc, #64]	; (20d0 <configure_i2c_master+0x84>)
    208e:	6213      	str	r3, [r2, #32]
	
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    2090:	4d10      	ldr	r5, [pc, #64]	; (20d4 <configure_i2c_master+0x88>)
    2092:	4911      	ldr	r1, [pc, #68]	; (20d8 <configure_i2c_master+0x8c>)
    2094:	0028      	movs	r0, r5
    2096:	4b11      	ldr	r3, [pc, #68]	; (20dc <configure_i2c_master+0x90>)
    2098:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    209a:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    209c:	0028      	movs	r0, r5
    209e:	4b10      	ldr	r3, [pc, #64]	; (20e0 <configure_i2c_master+0x94>)
    20a0:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    20a2:	6823      	ldr	r3, [r4, #0]
    20a4:	2202      	movs	r2, #2
    20a6:	4313      	orrs	r3, r2
    20a8:	6023      	str	r3, [r4, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    20aa:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    20ac:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    20ae:	2110      	movs	r1, #16
    20b0:	8b62      	ldrh	r2, [r4, #26]
    20b2:	420a      	tst	r2, r1
    20b4:	d104      	bne.n	20c0 <configure_i2c_master+0x74>
		timeout_counter++;
    20b6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    20b8:	4283      	cmp	r3, r0
    20ba:	d3f9      	bcc.n	20b0 <configure_i2c_master+0x64>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    20bc:	2310      	movs	r3, #16
    20be:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_instance);
}
    20c0:	b00f      	add	sp, #60	; 0x3c
    20c2:	bd30      	pop	{r4, r5, pc}
    20c4:	00000d48 	.word	0x00000d48
    20c8:	00002710 	.word	0x00002710
    20cc:	00080003 	.word	0x00080003
    20d0:	00090003 	.word	0x00090003
    20d4:	2000033c 	.word	0x2000033c
    20d8:	42001000 	.word	0x42001000
    20dc:	000003f9 	.word	0x000003f9
    20e0:	00002015 	.word	0x00002015

000020e4 <main>:

uint32_t rtcCount, rtcCountTag, rtcTagSocket;
volatile uint8_t retAt24C02D[20]={0x00};
	
int main ( void )
{	
    20e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20e6:	b085      	sub	sp, #20
	int8_t ret;
	struct sockaddr_in addr;
	struct i2c_master_packet i2cMastPack;

	irq_initialize_vectors();
	system_init();
    20e8:	4b24      	ldr	r3, [pc, #144]	; (217c <main+0x98>)
    20ea:	4798      	blx	r3
	delay_init();
    20ec:	4b24      	ldr	r3, [pc, #144]	; (2180 <main+0x9c>)
    20ee:	4798      	blx	r3
	cpu_irq_enable();	
    20f0:	2201      	movs	r2, #1
    20f2:	4b24      	ldr	r3, [pc, #144]	; (2184 <main+0xa0>)
    20f4:	701a      	strb	r2, [r3, #0]
    20f6:	f3bf 8f5f 	dmb	sy
    20fa:	b662      	cpsie	i
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA27;	// RS3485 ENABLE PIN CONTROL PORT
    20fc:	4c22      	ldr	r4, [pc, #136]	; (2188 <main+0xa4>)
    20fe:	2380      	movs	r3, #128	; 0x80
    2100:	051b      	lsls	r3, r3, #20
    2102:	60a3      	str	r3, [r4, #8]
	initGpio();
//	configure_tc();
//	configure_tc_callbacks();
//	configure_rtc_count( );

	config_i2c_GLCD_Select();
    2104:	4b21      	ldr	r3, [pc, #132]	; (218c <main+0xa8>)
    2106:	4798      	blx	r3
	configure_i2c_master();
    2108:	4b21      	ldr	r3, [pc, #132]	; (2190 <main+0xac>)
    210a:	4798      	blx	r3
    210c:	2380      	movs	r3, #128	; 0x80
    210e:	041b      	lsls	r3, r3, #16
    2110:	61a3      	str	r3, [r4, #24]
//	port_pin_set_output_level(PIN_PA23, false); // GLCD /EN high
	port_pin_set_output_level(PIN_PA23, true); // GLCD /EN high
	delay_us(10);
    2112:	200a      	movs	r0, #10
    2114:	4b1f      	ldr	r3, [pc, #124]	; (2194 <main+0xb0>)
    2116:	4798      	blx	r3
//	i2c_packet.data				= gAt24C02DTest;
	i2c_packet.data_length		= 13;
	i2c_packet.data				= stTest;
*/

	i2cMastPack.hs_master_code	= 0x00;
    2118:	ac01      	add	r4, sp, #4
    211a:	2500      	movs	r5, #0
    211c:	72a5      	strb	r5, [r4, #10]
	i2cMastPack.address			= 0x50 ;	// at 1010 >> 1
    211e:	2750      	movs	r7, #80	; 0x50
    2120:	8027      	strh	r7, [r4, #0]
	i2cMastPack.data_length		= 9;
    2122:	2609      	movs	r6, #9
    2124:	8066      	strh	r6, [r4, #2]
	i2cMastPack.data			= gAt24C02DTest;
    2126:	4b1c      	ldr	r3, [pc, #112]	; (2198 <main+0xb4>)
    2128:	9302      	str	r3, [sp, #8]

	i2c_master_write_packet_wait(&i2c_master_instance,&i2cMastPack);
    212a:	0021      	movs	r1, r4
    212c:	481b      	ldr	r0, [pc, #108]	; (219c <main+0xb8>)
    212e:	4b1c      	ldr	r3, [pc, #112]	; (21a0 <main+0xbc>)
    2130:	4798      	blx	r3
	delay_ms(2);
    2132:	2002      	movs	r0, #2
    2134:	4b1b      	ldr	r3, [pc, #108]	; (21a4 <main+0xc0>)
    2136:	4798      	blx	r3

	i2cMastPack.hs_master_code	= 0x00;
    2138:	72a5      	strb	r5, [r4, #10]
	i2cMastPack.address			= 0x50 ;	// at 1010 >> 1
    213a:	8027      	strh	r7, [r4, #0]
	i2cMastPack.data_length		= 9;
    213c:	8066      	strh	r6, [r4, #2]
	i2cMastPack.data			= retAt24C02D;
    213e:	4b1a      	ldr	r3, [pc, #104]	; (21a8 <main+0xc4>)
    2140:	6063      	str	r3, [r4, #4]

	i2c_master_read_packet_wait(&i2c_master_instance,&i2cMastPack);
    2142:	0021      	movs	r1, r4
    2144:	4815      	ldr	r0, [pc, #84]	; (219c <main+0xb8>)
    2146:	4b19      	ldr	r3, [pc, #100]	; (21ac <main+0xc8>)
    2148:	4798      	blx	r3

	sio2host_init();
    214a:	4b19      	ldr	r3, [pc, #100]	; (21b0 <main+0xcc>)
    214c:	4798      	blx	r3

	while(1){
		i2cMastPack.hs_master_code	= 0x00;
    214e:	ac01      	add	r4, sp, #4
		i2cMastPack.address			= 0x50 ;	// at 1010 >> 1
		i2cMastPack.data_length		= 9;
		i2cMastPack.data			= retAt24C02D;
    2150:	4d15      	ldr	r5, [pc, #84]	; (21a8 <main+0xc4>)
		i2cMastPack.hs_master_code	= 0x00;
    2152:	2300      	movs	r3, #0
    2154:	72a3      	strb	r3, [r4, #10]
		i2cMastPack.address			= 0x50 ;	// at 1010 >> 1
    2156:	3350      	adds	r3, #80	; 0x50
    2158:	8023      	strh	r3, [r4, #0]
		i2cMastPack.data_length		= 9;
    215a:	3b47      	subs	r3, #71	; 0x47
    215c:	8063      	strh	r3, [r4, #2]
		i2cMastPack.data			= retAt24C02D;
    215e:	6065      	str	r5, [r4, #4]

		i2c_master_read_packet_wait(&i2c_master_instance,&i2cMastPack);
    2160:	0021      	movs	r1, r4
    2162:	480e      	ldr	r0, [pc, #56]	; (219c <main+0xb8>)
    2164:	4b11      	ldr	r3, [pc, #68]	; (21ac <main+0xc8>)
    2166:	4798      	blx	r3
		printf("read At24C02D= %s",retAt24C02D);
    2168:	0029      	movs	r1, r5
    216a:	4812      	ldr	r0, [pc, #72]	; (21b4 <main+0xd0>)
    216c:	4b12      	ldr	r3, [pc, #72]	; (21b8 <main+0xd4>)
    216e:	4798      	blx	r3
		delay_ms(1000);
    2170:	20fa      	movs	r0, #250	; 0xfa
    2172:	0080      	lsls	r0, r0, #2
    2174:	4b0b      	ldr	r3, [pc, #44]	; (21a4 <main+0xc0>)
    2176:	4798      	blx	r3
    2178:	e7eb      	b.n	2152 <main+0x6e>
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	00001ba9 	.word	0x00001ba9
    2180:	00000115 	.word	0x00000115
    2184:	20000008 	.word	0x20000008
    2188:	41004400 	.word	0x41004400
    218c:	00002021 	.word	0x00002021
    2190:	0000204d 	.word	0x0000204d
    2194:	00000155 	.word	0x00000155
    2198:	2000000c 	.word	0x2000000c
    219c:	2000033c 	.word	0x2000033c
    21a0:	000009e5 	.word	0x000009e5
    21a4:	00000181 	.word	0x00000181
    21a8:	200001ac 	.word	0x200001ac
    21ac:	000009d1 	.word	0x000009d1
    21b0:	00001ec5 	.word	0x00001ec5
    21b4:	00004c8c 	.word	0x00004c8c
    21b8:	00003c49 	.word	0x00003c49

000021bc <__udivsi3>:
    21bc:	2200      	movs	r2, #0
    21be:	0843      	lsrs	r3, r0, #1
    21c0:	428b      	cmp	r3, r1
    21c2:	d374      	bcc.n	22ae <__udivsi3+0xf2>
    21c4:	0903      	lsrs	r3, r0, #4
    21c6:	428b      	cmp	r3, r1
    21c8:	d35f      	bcc.n	228a <__udivsi3+0xce>
    21ca:	0a03      	lsrs	r3, r0, #8
    21cc:	428b      	cmp	r3, r1
    21ce:	d344      	bcc.n	225a <__udivsi3+0x9e>
    21d0:	0b03      	lsrs	r3, r0, #12
    21d2:	428b      	cmp	r3, r1
    21d4:	d328      	bcc.n	2228 <__udivsi3+0x6c>
    21d6:	0c03      	lsrs	r3, r0, #16
    21d8:	428b      	cmp	r3, r1
    21da:	d30d      	bcc.n	21f8 <__udivsi3+0x3c>
    21dc:	22ff      	movs	r2, #255	; 0xff
    21de:	0209      	lsls	r1, r1, #8
    21e0:	ba12      	rev	r2, r2
    21e2:	0c03      	lsrs	r3, r0, #16
    21e4:	428b      	cmp	r3, r1
    21e6:	d302      	bcc.n	21ee <__udivsi3+0x32>
    21e8:	1212      	asrs	r2, r2, #8
    21ea:	0209      	lsls	r1, r1, #8
    21ec:	d065      	beq.n	22ba <__udivsi3+0xfe>
    21ee:	0b03      	lsrs	r3, r0, #12
    21f0:	428b      	cmp	r3, r1
    21f2:	d319      	bcc.n	2228 <__udivsi3+0x6c>
    21f4:	e000      	b.n	21f8 <__udivsi3+0x3c>
    21f6:	0a09      	lsrs	r1, r1, #8
    21f8:	0bc3      	lsrs	r3, r0, #15
    21fa:	428b      	cmp	r3, r1
    21fc:	d301      	bcc.n	2202 <__udivsi3+0x46>
    21fe:	03cb      	lsls	r3, r1, #15
    2200:	1ac0      	subs	r0, r0, r3
    2202:	4152      	adcs	r2, r2
    2204:	0b83      	lsrs	r3, r0, #14
    2206:	428b      	cmp	r3, r1
    2208:	d301      	bcc.n	220e <__udivsi3+0x52>
    220a:	038b      	lsls	r3, r1, #14
    220c:	1ac0      	subs	r0, r0, r3
    220e:	4152      	adcs	r2, r2
    2210:	0b43      	lsrs	r3, r0, #13
    2212:	428b      	cmp	r3, r1
    2214:	d301      	bcc.n	221a <__udivsi3+0x5e>
    2216:	034b      	lsls	r3, r1, #13
    2218:	1ac0      	subs	r0, r0, r3
    221a:	4152      	adcs	r2, r2
    221c:	0b03      	lsrs	r3, r0, #12
    221e:	428b      	cmp	r3, r1
    2220:	d301      	bcc.n	2226 <__udivsi3+0x6a>
    2222:	030b      	lsls	r3, r1, #12
    2224:	1ac0      	subs	r0, r0, r3
    2226:	4152      	adcs	r2, r2
    2228:	0ac3      	lsrs	r3, r0, #11
    222a:	428b      	cmp	r3, r1
    222c:	d301      	bcc.n	2232 <__udivsi3+0x76>
    222e:	02cb      	lsls	r3, r1, #11
    2230:	1ac0      	subs	r0, r0, r3
    2232:	4152      	adcs	r2, r2
    2234:	0a83      	lsrs	r3, r0, #10
    2236:	428b      	cmp	r3, r1
    2238:	d301      	bcc.n	223e <__udivsi3+0x82>
    223a:	028b      	lsls	r3, r1, #10
    223c:	1ac0      	subs	r0, r0, r3
    223e:	4152      	adcs	r2, r2
    2240:	0a43      	lsrs	r3, r0, #9
    2242:	428b      	cmp	r3, r1
    2244:	d301      	bcc.n	224a <__udivsi3+0x8e>
    2246:	024b      	lsls	r3, r1, #9
    2248:	1ac0      	subs	r0, r0, r3
    224a:	4152      	adcs	r2, r2
    224c:	0a03      	lsrs	r3, r0, #8
    224e:	428b      	cmp	r3, r1
    2250:	d301      	bcc.n	2256 <__udivsi3+0x9a>
    2252:	020b      	lsls	r3, r1, #8
    2254:	1ac0      	subs	r0, r0, r3
    2256:	4152      	adcs	r2, r2
    2258:	d2cd      	bcs.n	21f6 <__udivsi3+0x3a>
    225a:	09c3      	lsrs	r3, r0, #7
    225c:	428b      	cmp	r3, r1
    225e:	d301      	bcc.n	2264 <__udivsi3+0xa8>
    2260:	01cb      	lsls	r3, r1, #7
    2262:	1ac0      	subs	r0, r0, r3
    2264:	4152      	adcs	r2, r2
    2266:	0983      	lsrs	r3, r0, #6
    2268:	428b      	cmp	r3, r1
    226a:	d301      	bcc.n	2270 <__udivsi3+0xb4>
    226c:	018b      	lsls	r3, r1, #6
    226e:	1ac0      	subs	r0, r0, r3
    2270:	4152      	adcs	r2, r2
    2272:	0943      	lsrs	r3, r0, #5
    2274:	428b      	cmp	r3, r1
    2276:	d301      	bcc.n	227c <__udivsi3+0xc0>
    2278:	014b      	lsls	r3, r1, #5
    227a:	1ac0      	subs	r0, r0, r3
    227c:	4152      	adcs	r2, r2
    227e:	0903      	lsrs	r3, r0, #4
    2280:	428b      	cmp	r3, r1
    2282:	d301      	bcc.n	2288 <__udivsi3+0xcc>
    2284:	010b      	lsls	r3, r1, #4
    2286:	1ac0      	subs	r0, r0, r3
    2288:	4152      	adcs	r2, r2
    228a:	08c3      	lsrs	r3, r0, #3
    228c:	428b      	cmp	r3, r1
    228e:	d301      	bcc.n	2294 <__udivsi3+0xd8>
    2290:	00cb      	lsls	r3, r1, #3
    2292:	1ac0      	subs	r0, r0, r3
    2294:	4152      	adcs	r2, r2
    2296:	0883      	lsrs	r3, r0, #2
    2298:	428b      	cmp	r3, r1
    229a:	d301      	bcc.n	22a0 <__udivsi3+0xe4>
    229c:	008b      	lsls	r3, r1, #2
    229e:	1ac0      	subs	r0, r0, r3
    22a0:	4152      	adcs	r2, r2
    22a2:	0843      	lsrs	r3, r0, #1
    22a4:	428b      	cmp	r3, r1
    22a6:	d301      	bcc.n	22ac <__udivsi3+0xf0>
    22a8:	004b      	lsls	r3, r1, #1
    22aa:	1ac0      	subs	r0, r0, r3
    22ac:	4152      	adcs	r2, r2
    22ae:	1a41      	subs	r1, r0, r1
    22b0:	d200      	bcs.n	22b4 <__udivsi3+0xf8>
    22b2:	4601      	mov	r1, r0
    22b4:	4152      	adcs	r2, r2
    22b6:	4610      	mov	r0, r2
    22b8:	4770      	bx	lr
    22ba:	e7ff      	b.n	22bc <__udivsi3+0x100>
    22bc:	b501      	push	{r0, lr}
    22be:	2000      	movs	r0, #0
    22c0:	f000 f806 	bl	22d0 <__aeabi_idiv0>
    22c4:	bd02      	pop	{r1, pc}
    22c6:	46c0      	nop			; (mov r8, r8)

000022c8 <__aeabi_uidivmod>:
    22c8:	2900      	cmp	r1, #0
    22ca:	d0f7      	beq.n	22bc <__udivsi3+0x100>
    22cc:	e776      	b.n	21bc <__udivsi3>
    22ce:	4770      	bx	lr

000022d0 <__aeabi_idiv0>:
    22d0:	4770      	bx	lr
    22d2:	46c0      	nop			; (mov r8, r8)

000022d4 <__aeabi_lmul>:
    22d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d6:	46ce      	mov	lr, r9
    22d8:	4647      	mov	r7, r8
    22da:	0415      	lsls	r5, r2, #16
    22dc:	0c2d      	lsrs	r5, r5, #16
    22de:	002e      	movs	r6, r5
    22e0:	b580      	push	{r7, lr}
    22e2:	0407      	lsls	r7, r0, #16
    22e4:	0c14      	lsrs	r4, r2, #16
    22e6:	0c3f      	lsrs	r7, r7, #16
    22e8:	4699      	mov	r9, r3
    22ea:	0c03      	lsrs	r3, r0, #16
    22ec:	437e      	muls	r6, r7
    22ee:	435d      	muls	r5, r3
    22f0:	4367      	muls	r7, r4
    22f2:	4363      	muls	r3, r4
    22f4:	197f      	adds	r7, r7, r5
    22f6:	0c34      	lsrs	r4, r6, #16
    22f8:	19e4      	adds	r4, r4, r7
    22fa:	469c      	mov	ip, r3
    22fc:	42a5      	cmp	r5, r4
    22fe:	d903      	bls.n	2308 <__aeabi_lmul+0x34>
    2300:	2380      	movs	r3, #128	; 0x80
    2302:	025b      	lsls	r3, r3, #9
    2304:	4698      	mov	r8, r3
    2306:	44c4      	add	ip, r8
    2308:	464b      	mov	r3, r9
    230a:	4351      	muls	r1, r2
    230c:	4343      	muls	r3, r0
    230e:	0436      	lsls	r6, r6, #16
    2310:	0c36      	lsrs	r6, r6, #16
    2312:	0c25      	lsrs	r5, r4, #16
    2314:	0424      	lsls	r4, r4, #16
    2316:	4465      	add	r5, ip
    2318:	19a4      	adds	r4, r4, r6
    231a:	1859      	adds	r1, r3, r1
    231c:	1949      	adds	r1, r1, r5
    231e:	0020      	movs	r0, r4
    2320:	bc0c      	pop	{r2, r3}
    2322:	4690      	mov	r8, r2
    2324:	4699      	mov	r9, r3
    2326:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002328 <__aeabi_dadd>:
    2328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    232a:	4645      	mov	r5, r8
    232c:	46de      	mov	lr, fp
    232e:	4657      	mov	r7, sl
    2330:	464e      	mov	r6, r9
    2332:	030c      	lsls	r4, r1, #12
    2334:	b5e0      	push	{r5, r6, r7, lr}
    2336:	004e      	lsls	r6, r1, #1
    2338:	0fc9      	lsrs	r1, r1, #31
    233a:	4688      	mov	r8, r1
    233c:	000d      	movs	r5, r1
    233e:	0a61      	lsrs	r1, r4, #9
    2340:	0f44      	lsrs	r4, r0, #29
    2342:	430c      	orrs	r4, r1
    2344:	00c7      	lsls	r7, r0, #3
    2346:	0319      	lsls	r1, r3, #12
    2348:	0058      	lsls	r0, r3, #1
    234a:	0fdb      	lsrs	r3, r3, #31
    234c:	469b      	mov	fp, r3
    234e:	0a4b      	lsrs	r3, r1, #9
    2350:	0f51      	lsrs	r1, r2, #29
    2352:	430b      	orrs	r3, r1
    2354:	0d76      	lsrs	r6, r6, #21
    2356:	0d40      	lsrs	r0, r0, #21
    2358:	0019      	movs	r1, r3
    235a:	00d2      	lsls	r2, r2, #3
    235c:	45d8      	cmp	r8, fp
    235e:	d100      	bne.n	2362 <__aeabi_dadd+0x3a>
    2360:	e0ae      	b.n	24c0 <__aeabi_dadd+0x198>
    2362:	1a35      	subs	r5, r6, r0
    2364:	2d00      	cmp	r5, #0
    2366:	dc00      	bgt.n	236a <__aeabi_dadd+0x42>
    2368:	e0f6      	b.n	2558 <__aeabi_dadd+0x230>
    236a:	2800      	cmp	r0, #0
    236c:	d10f      	bne.n	238e <__aeabi_dadd+0x66>
    236e:	4313      	orrs	r3, r2
    2370:	d100      	bne.n	2374 <__aeabi_dadd+0x4c>
    2372:	e0db      	b.n	252c <__aeabi_dadd+0x204>
    2374:	1e6b      	subs	r3, r5, #1
    2376:	2b00      	cmp	r3, #0
    2378:	d000      	beq.n	237c <__aeabi_dadd+0x54>
    237a:	e137      	b.n	25ec <__aeabi_dadd+0x2c4>
    237c:	1aba      	subs	r2, r7, r2
    237e:	4297      	cmp	r7, r2
    2380:	41bf      	sbcs	r7, r7
    2382:	1a64      	subs	r4, r4, r1
    2384:	427f      	negs	r7, r7
    2386:	1be4      	subs	r4, r4, r7
    2388:	2601      	movs	r6, #1
    238a:	0017      	movs	r7, r2
    238c:	e024      	b.n	23d8 <__aeabi_dadd+0xb0>
    238e:	4bc6      	ldr	r3, [pc, #792]	; (26a8 <__aeabi_dadd+0x380>)
    2390:	429e      	cmp	r6, r3
    2392:	d04d      	beq.n	2430 <__aeabi_dadd+0x108>
    2394:	2380      	movs	r3, #128	; 0x80
    2396:	041b      	lsls	r3, r3, #16
    2398:	4319      	orrs	r1, r3
    239a:	2d38      	cmp	r5, #56	; 0x38
    239c:	dd00      	ble.n	23a0 <__aeabi_dadd+0x78>
    239e:	e107      	b.n	25b0 <__aeabi_dadd+0x288>
    23a0:	2d1f      	cmp	r5, #31
    23a2:	dd00      	ble.n	23a6 <__aeabi_dadd+0x7e>
    23a4:	e138      	b.n	2618 <__aeabi_dadd+0x2f0>
    23a6:	2020      	movs	r0, #32
    23a8:	1b43      	subs	r3, r0, r5
    23aa:	469a      	mov	sl, r3
    23ac:	000b      	movs	r3, r1
    23ae:	4650      	mov	r0, sl
    23b0:	4083      	lsls	r3, r0
    23b2:	4699      	mov	r9, r3
    23b4:	0013      	movs	r3, r2
    23b6:	4648      	mov	r0, r9
    23b8:	40eb      	lsrs	r3, r5
    23ba:	4318      	orrs	r0, r3
    23bc:	0003      	movs	r3, r0
    23be:	4650      	mov	r0, sl
    23c0:	4082      	lsls	r2, r0
    23c2:	1e50      	subs	r0, r2, #1
    23c4:	4182      	sbcs	r2, r0
    23c6:	40e9      	lsrs	r1, r5
    23c8:	431a      	orrs	r2, r3
    23ca:	1aba      	subs	r2, r7, r2
    23cc:	1a61      	subs	r1, r4, r1
    23ce:	4297      	cmp	r7, r2
    23d0:	41a4      	sbcs	r4, r4
    23d2:	0017      	movs	r7, r2
    23d4:	4264      	negs	r4, r4
    23d6:	1b0c      	subs	r4, r1, r4
    23d8:	0223      	lsls	r3, r4, #8
    23da:	d562      	bpl.n	24a2 <__aeabi_dadd+0x17a>
    23dc:	0264      	lsls	r4, r4, #9
    23de:	0a65      	lsrs	r5, r4, #9
    23e0:	2d00      	cmp	r5, #0
    23e2:	d100      	bne.n	23e6 <__aeabi_dadd+0xbe>
    23e4:	e0df      	b.n	25a6 <__aeabi_dadd+0x27e>
    23e6:	0028      	movs	r0, r5
    23e8:	f001 fbe4 	bl	3bb4 <__clzsi2>
    23ec:	0003      	movs	r3, r0
    23ee:	3b08      	subs	r3, #8
    23f0:	2b1f      	cmp	r3, #31
    23f2:	dd00      	ble.n	23f6 <__aeabi_dadd+0xce>
    23f4:	e0d2      	b.n	259c <__aeabi_dadd+0x274>
    23f6:	2220      	movs	r2, #32
    23f8:	003c      	movs	r4, r7
    23fa:	1ad2      	subs	r2, r2, r3
    23fc:	409d      	lsls	r5, r3
    23fe:	40d4      	lsrs	r4, r2
    2400:	409f      	lsls	r7, r3
    2402:	4325      	orrs	r5, r4
    2404:	429e      	cmp	r6, r3
    2406:	dd00      	ble.n	240a <__aeabi_dadd+0xe2>
    2408:	e0c4      	b.n	2594 <__aeabi_dadd+0x26c>
    240a:	1b9e      	subs	r6, r3, r6
    240c:	1c73      	adds	r3, r6, #1
    240e:	2b1f      	cmp	r3, #31
    2410:	dd00      	ble.n	2414 <__aeabi_dadd+0xec>
    2412:	e0f1      	b.n	25f8 <__aeabi_dadd+0x2d0>
    2414:	2220      	movs	r2, #32
    2416:	0038      	movs	r0, r7
    2418:	0029      	movs	r1, r5
    241a:	1ad2      	subs	r2, r2, r3
    241c:	40d8      	lsrs	r0, r3
    241e:	4091      	lsls	r1, r2
    2420:	4097      	lsls	r7, r2
    2422:	002c      	movs	r4, r5
    2424:	4301      	orrs	r1, r0
    2426:	1e78      	subs	r0, r7, #1
    2428:	4187      	sbcs	r7, r0
    242a:	40dc      	lsrs	r4, r3
    242c:	2600      	movs	r6, #0
    242e:	430f      	orrs	r7, r1
    2430:	077b      	lsls	r3, r7, #29
    2432:	d009      	beq.n	2448 <__aeabi_dadd+0x120>
    2434:	230f      	movs	r3, #15
    2436:	403b      	ands	r3, r7
    2438:	2b04      	cmp	r3, #4
    243a:	d005      	beq.n	2448 <__aeabi_dadd+0x120>
    243c:	1d3b      	adds	r3, r7, #4
    243e:	42bb      	cmp	r3, r7
    2440:	41bf      	sbcs	r7, r7
    2442:	427f      	negs	r7, r7
    2444:	19e4      	adds	r4, r4, r7
    2446:	001f      	movs	r7, r3
    2448:	0223      	lsls	r3, r4, #8
    244a:	d52c      	bpl.n	24a6 <__aeabi_dadd+0x17e>
    244c:	4b96      	ldr	r3, [pc, #600]	; (26a8 <__aeabi_dadd+0x380>)
    244e:	3601      	adds	r6, #1
    2450:	429e      	cmp	r6, r3
    2452:	d100      	bne.n	2456 <__aeabi_dadd+0x12e>
    2454:	e09a      	b.n	258c <__aeabi_dadd+0x264>
    2456:	4645      	mov	r5, r8
    2458:	4b94      	ldr	r3, [pc, #592]	; (26ac <__aeabi_dadd+0x384>)
    245a:	08ff      	lsrs	r7, r7, #3
    245c:	401c      	ands	r4, r3
    245e:	0760      	lsls	r0, r4, #29
    2460:	0576      	lsls	r6, r6, #21
    2462:	0264      	lsls	r4, r4, #9
    2464:	4307      	orrs	r7, r0
    2466:	0b24      	lsrs	r4, r4, #12
    2468:	0d76      	lsrs	r6, r6, #21
    246a:	2100      	movs	r1, #0
    246c:	0324      	lsls	r4, r4, #12
    246e:	0b23      	lsrs	r3, r4, #12
    2470:	0d0c      	lsrs	r4, r1, #20
    2472:	4a8f      	ldr	r2, [pc, #572]	; (26b0 <__aeabi_dadd+0x388>)
    2474:	0524      	lsls	r4, r4, #20
    2476:	431c      	orrs	r4, r3
    2478:	4014      	ands	r4, r2
    247a:	0533      	lsls	r3, r6, #20
    247c:	4323      	orrs	r3, r4
    247e:	005b      	lsls	r3, r3, #1
    2480:	07ed      	lsls	r5, r5, #31
    2482:	085b      	lsrs	r3, r3, #1
    2484:	432b      	orrs	r3, r5
    2486:	0038      	movs	r0, r7
    2488:	0019      	movs	r1, r3
    248a:	bc3c      	pop	{r2, r3, r4, r5}
    248c:	4690      	mov	r8, r2
    248e:	4699      	mov	r9, r3
    2490:	46a2      	mov	sl, r4
    2492:	46ab      	mov	fp, r5
    2494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2496:	4664      	mov	r4, ip
    2498:	4304      	orrs	r4, r0
    249a:	d100      	bne.n	249e <__aeabi_dadd+0x176>
    249c:	e211      	b.n	28c2 <__aeabi_dadd+0x59a>
    249e:	0004      	movs	r4, r0
    24a0:	4667      	mov	r7, ip
    24a2:	077b      	lsls	r3, r7, #29
    24a4:	d1c6      	bne.n	2434 <__aeabi_dadd+0x10c>
    24a6:	4645      	mov	r5, r8
    24a8:	0760      	lsls	r0, r4, #29
    24aa:	08ff      	lsrs	r7, r7, #3
    24ac:	4307      	orrs	r7, r0
    24ae:	08e4      	lsrs	r4, r4, #3
    24b0:	4b7d      	ldr	r3, [pc, #500]	; (26a8 <__aeabi_dadd+0x380>)
    24b2:	429e      	cmp	r6, r3
    24b4:	d030      	beq.n	2518 <__aeabi_dadd+0x1f0>
    24b6:	0324      	lsls	r4, r4, #12
    24b8:	0576      	lsls	r6, r6, #21
    24ba:	0b24      	lsrs	r4, r4, #12
    24bc:	0d76      	lsrs	r6, r6, #21
    24be:	e7d4      	b.n	246a <__aeabi_dadd+0x142>
    24c0:	1a33      	subs	r3, r6, r0
    24c2:	469a      	mov	sl, r3
    24c4:	2b00      	cmp	r3, #0
    24c6:	dd78      	ble.n	25ba <__aeabi_dadd+0x292>
    24c8:	2800      	cmp	r0, #0
    24ca:	d031      	beq.n	2530 <__aeabi_dadd+0x208>
    24cc:	4876      	ldr	r0, [pc, #472]	; (26a8 <__aeabi_dadd+0x380>)
    24ce:	4286      	cmp	r6, r0
    24d0:	d0ae      	beq.n	2430 <__aeabi_dadd+0x108>
    24d2:	2080      	movs	r0, #128	; 0x80
    24d4:	0400      	lsls	r0, r0, #16
    24d6:	4301      	orrs	r1, r0
    24d8:	4653      	mov	r3, sl
    24da:	2b38      	cmp	r3, #56	; 0x38
    24dc:	dc00      	bgt.n	24e0 <__aeabi_dadd+0x1b8>
    24de:	e0e9      	b.n	26b4 <__aeabi_dadd+0x38c>
    24e0:	430a      	orrs	r2, r1
    24e2:	1e51      	subs	r1, r2, #1
    24e4:	418a      	sbcs	r2, r1
    24e6:	2100      	movs	r1, #0
    24e8:	19d2      	adds	r2, r2, r7
    24ea:	42ba      	cmp	r2, r7
    24ec:	41bf      	sbcs	r7, r7
    24ee:	1909      	adds	r1, r1, r4
    24f0:	427c      	negs	r4, r7
    24f2:	0017      	movs	r7, r2
    24f4:	190c      	adds	r4, r1, r4
    24f6:	0223      	lsls	r3, r4, #8
    24f8:	d5d3      	bpl.n	24a2 <__aeabi_dadd+0x17a>
    24fa:	4b6b      	ldr	r3, [pc, #428]	; (26a8 <__aeabi_dadd+0x380>)
    24fc:	3601      	adds	r6, #1
    24fe:	429e      	cmp	r6, r3
    2500:	d100      	bne.n	2504 <__aeabi_dadd+0x1dc>
    2502:	e13a      	b.n	277a <__aeabi_dadd+0x452>
    2504:	2001      	movs	r0, #1
    2506:	4b69      	ldr	r3, [pc, #420]	; (26ac <__aeabi_dadd+0x384>)
    2508:	401c      	ands	r4, r3
    250a:	087b      	lsrs	r3, r7, #1
    250c:	4007      	ands	r7, r0
    250e:	431f      	orrs	r7, r3
    2510:	07e0      	lsls	r0, r4, #31
    2512:	4307      	orrs	r7, r0
    2514:	0864      	lsrs	r4, r4, #1
    2516:	e78b      	b.n	2430 <__aeabi_dadd+0x108>
    2518:	0023      	movs	r3, r4
    251a:	433b      	orrs	r3, r7
    251c:	d100      	bne.n	2520 <__aeabi_dadd+0x1f8>
    251e:	e1cb      	b.n	28b8 <__aeabi_dadd+0x590>
    2520:	2280      	movs	r2, #128	; 0x80
    2522:	0312      	lsls	r2, r2, #12
    2524:	4314      	orrs	r4, r2
    2526:	0324      	lsls	r4, r4, #12
    2528:	0b24      	lsrs	r4, r4, #12
    252a:	e79e      	b.n	246a <__aeabi_dadd+0x142>
    252c:	002e      	movs	r6, r5
    252e:	e77f      	b.n	2430 <__aeabi_dadd+0x108>
    2530:	0008      	movs	r0, r1
    2532:	4310      	orrs	r0, r2
    2534:	d100      	bne.n	2538 <__aeabi_dadd+0x210>
    2536:	e0b4      	b.n	26a2 <__aeabi_dadd+0x37a>
    2538:	1e58      	subs	r0, r3, #1
    253a:	2800      	cmp	r0, #0
    253c:	d000      	beq.n	2540 <__aeabi_dadd+0x218>
    253e:	e0de      	b.n	26fe <__aeabi_dadd+0x3d6>
    2540:	18ba      	adds	r2, r7, r2
    2542:	42ba      	cmp	r2, r7
    2544:	419b      	sbcs	r3, r3
    2546:	1864      	adds	r4, r4, r1
    2548:	425b      	negs	r3, r3
    254a:	18e4      	adds	r4, r4, r3
    254c:	0017      	movs	r7, r2
    254e:	2601      	movs	r6, #1
    2550:	0223      	lsls	r3, r4, #8
    2552:	d5a6      	bpl.n	24a2 <__aeabi_dadd+0x17a>
    2554:	2602      	movs	r6, #2
    2556:	e7d5      	b.n	2504 <__aeabi_dadd+0x1dc>
    2558:	2d00      	cmp	r5, #0
    255a:	d16e      	bne.n	263a <__aeabi_dadd+0x312>
    255c:	1c70      	adds	r0, r6, #1
    255e:	0540      	lsls	r0, r0, #21
    2560:	0d40      	lsrs	r0, r0, #21
    2562:	2801      	cmp	r0, #1
    2564:	dc00      	bgt.n	2568 <__aeabi_dadd+0x240>
    2566:	e0f9      	b.n	275c <__aeabi_dadd+0x434>
    2568:	1ab8      	subs	r0, r7, r2
    256a:	4684      	mov	ip, r0
    256c:	4287      	cmp	r7, r0
    256e:	4180      	sbcs	r0, r0
    2570:	1ae5      	subs	r5, r4, r3
    2572:	4240      	negs	r0, r0
    2574:	1a2d      	subs	r5, r5, r0
    2576:	0228      	lsls	r0, r5, #8
    2578:	d400      	bmi.n	257c <__aeabi_dadd+0x254>
    257a:	e089      	b.n	2690 <__aeabi_dadd+0x368>
    257c:	1bd7      	subs	r7, r2, r7
    257e:	42ba      	cmp	r2, r7
    2580:	4192      	sbcs	r2, r2
    2582:	1b1c      	subs	r4, r3, r4
    2584:	4252      	negs	r2, r2
    2586:	1aa5      	subs	r5, r4, r2
    2588:	46d8      	mov	r8, fp
    258a:	e729      	b.n	23e0 <__aeabi_dadd+0xb8>
    258c:	4645      	mov	r5, r8
    258e:	2400      	movs	r4, #0
    2590:	2700      	movs	r7, #0
    2592:	e76a      	b.n	246a <__aeabi_dadd+0x142>
    2594:	4c45      	ldr	r4, [pc, #276]	; (26ac <__aeabi_dadd+0x384>)
    2596:	1af6      	subs	r6, r6, r3
    2598:	402c      	ands	r4, r5
    259a:	e749      	b.n	2430 <__aeabi_dadd+0x108>
    259c:	003d      	movs	r5, r7
    259e:	3828      	subs	r0, #40	; 0x28
    25a0:	4085      	lsls	r5, r0
    25a2:	2700      	movs	r7, #0
    25a4:	e72e      	b.n	2404 <__aeabi_dadd+0xdc>
    25a6:	0038      	movs	r0, r7
    25a8:	f001 fb04 	bl	3bb4 <__clzsi2>
    25ac:	3020      	adds	r0, #32
    25ae:	e71d      	b.n	23ec <__aeabi_dadd+0xc4>
    25b0:	430a      	orrs	r2, r1
    25b2:	1e51      	subs	r1, r2, #1
    25b4:	418a      	sbcs	r2, r1
    25b6:	2100      	movs	r1, #0
    25b8:	e707      	b.n	23ca <__aeabi_dadd+0xa2>
    25ba:	2b00      	cmp	r3, #0
    25bc:	d000      	beq.n	25c0 <__aeabi_dadd+0x298>
    25be:	e0f3      	b.n	27a8 <__aeabi_dadd+0x480>
    25c0:	1c70      	adds	r0, r6, #1
    25c2:	0543      	lsls	r3, r0, #21
    25c4:	0d5b      	lsrs	r3, r3, #21
    25c6:	2b01      	cmp	r3, #1
    25c8:	dc00      	bgt.n	25cc <__aeabi_dadd+0x2a4>
    25ca:	e0ad      	b.n	2728 <__aeabi_dadd+0x400>
    25cc:	4b36      	ldr	r3, [pc, #216]	; (26a8 <__aeabi_dadd+0x380>)
    25ce:	4298      	cmp	r0, r3
    25d0:	d100      	bne.n	25d4 <__aeabi_dadd+0x2ac>
    25d2:	e0d1      	b.n	2778 <__aeabi_dadd+0x450>
    25d4:	18ba      	adds	r2, r7, r2
    25d6:	42ba      	cmp	r2, r7
    25d8:	41bf      	sbcs	r7, r7
    25da:	1864      	adds	r4, r4, r1
    25dc:	427f      	negs	r7, r7
    25de:	19e4      	adds	r4, r4, r7
    25e0:	07e7      	lsls	r7, r4, #31
    25e2:	0852      	lsrs	r2, r2, #1
    25e4:	4317      	orrs	r7, r2
    25e6:	0864      	lsrs	r4, r4, #1
    25e8:	0006      	movs	r6, r0
    25ea:	e721      	b.n	2430 <__aeabi_dadd+0x108>
    25ec:	482e      	ldr	r0, [pc, #184]	; (26a8 <__aeabi_dadd+0x380>)
    25ee:	4285      	cmp	r5, r0
    25f0:	d100      	bne.n	25f4 <__aeabi_dadd+0x2cc>
    25f2:	e093      	b.n	271c <__aeabi_dadd+0x3f4>
    25f4:	001d      	movs	r5, r3
    25f6:	e6d0      	b.n	239a <__aeabi_dadd+0x72>
    25f8:	0029      	movs	r1, r5
    25fa:	3e1f      	subs	r6, #31
    25fc:	40f1      	lsrs	r1, r6
    25fe:	2b20      	cmp	r3, #32
    2600:	d100      	bne.n	2604 <__aeabi_dadd+0x2dc>
    2602:	e08d      	b.n	2720 <__aeabi_dadd+0x3f8>
    2604:	2240      	movs	r2, #64	; 0x40
    2606:	1ad3      	subs	r3, r2, r3
    2608:	409d      	lsls	r5, r3
    260a:	432f      	orrs	r7, r5
    260c:	1e7d      	subs	r5, r7, #1
    260e:	41af      	sbcs	r7, r5
    2610:	2400      	movs	r4, #0
    2612:	430f      	orrs	r7, r1
    2614:	2600      	movs	r6, #0
    2616:	e744      	b.n	24a2 <__aeabi_dadd+0x17a>
    2618:	002b      	movs	r3, r5
    261a:	0008      	movs	r0, r1
    261c:	3b20      	subs	r3, #32
    261e:	40d8      	lsrs	r0, r3
    2620:	0003      	movs	r3, r0
    2622:	2d20      	cmp	r5, #32
    2624:	d100      	bne.n	2628 <__aeabi_dadd+0x300>
    2626:	e07d      	b.n	2724 <__aeabi_dadd+0x3fc>
    2628:	2040      	movs	r0, #64	; 0x40
    262a:	1b45      	subs	r5, r0, r5
    262c:	40a9      	lsls	r1, r5
    262e:	430a      	orrs	r2, r1
    2630:	1e51      	subs	r1, r2, #1
    2632:	418a      	sbcs	r2, r1
    2634:	2100      	movs	r1, #0
    2636:	431a      	orrs	r2, r3
    2638:	e6c7      	b.n	23ca <__aeabi_dadd+0xa2>
    263a:	2e00      	cmp	r6, #0
    263c:	d050      	beq.n	26e0 <__aeabi_dadd+0x3b8>
    263e:	4e1a      	ldr	r6, [pc, #104]	; (26a8 <__aeabi_dadd+0x380>)
    2640:	42b0      	cmp	r0, r6
    2642:	d057      	beq.n	26f4 <__aeabi_dadd+0x3cc>
    2644:	2680      	movs	r6, #128	; 0x80
    2646:	426b      	negs	r3, r5
    2648:	4699      	mov	r9, r3
    264a:	0436      	lsls	r6, r6, #16
    264c:	4334      	orrs	r4, r6
    264e:	464b      	mov	r3, r9
    2650:	2b38      	cmp	r3, #56	; 0x38
    2652:	dd00      	ble.n	2656 <__aeabi_dadd+0x32e>
    2654:	e0d6      	b.n	2804 <__aeabi_dadd+0x4dc>
    2656:	2b1f      	cmp	r3, #31
    2658:	dd00      	ble.n	265c <__aeabi_dadd+0x334>
    265a:	e135      	b.n	28c8 <__aeabi_dadd+0x5a0>
    265c:	2620      	movs	r6, #32
    265e:	1af5      	subs	r5, r6, r3
    2660:	0026      	movs	r6, r4
    2662:	40ae      	lsls	r6, r5
    2664:	46b2      	mov	sl, r6
    2666:	003e      	movs	r6, r7
    2668:	40de      	lsrs	r6, r3
    266a:	46ac      	mov	ip, r5
    266c:	0035      	movs	r5, r6
    266e:	4656      	mov	r6, sl
    2670:	432e      	orrs	r6, r5
    2672:	4665      	mov	r5, ip
    2674:	40af      	lsls	r7, r5
    2676:	1e7d      	subs	r5, r7, #1
    2678:	41af      	sbcs	r7, r5
    267a:	40dc      	lsrs	r4, r3
    267c:	4337      	orrs	r7, r6
    267e:	1bd7      	subs	r7, r2, r7
    2680:	42ba      	cmp	r2, r7
    2682:	4192      	sbcs	r2, r2
    2684:	1b0c      	subs	r4, r1, r4
    2686:	4252      	negs	r2, r2
    2688:	1aa4      	subs	r4, r4, r2
    268a:	0006      	movs	r6, r0
    268c:	46d8      	mov	r8, fp
    268e:	e6a3      	b.n	23d8 <__aeabi_dadd+0xb0>
    2690:	4664      	mov	r4, ip
    2692:	4667      	mov	r7, ip
    2694:	432c      	orrs	r4, r5
    2696:	d000      	beq.n	269a <__aeabi_dadd+0x372>
    2698:	e6a2      	b.n	23e0 <__aeabi_dadd+0xb8>
    269a:	2500      	movs	r5, #0
    269c:	2600      	movs	r6, #0
    269e:	2700      	movs	r7, #0
    26a0:	e706      	b.n	24b0 <__aeabi_dadd+0x188>
    26a2:	001e      	movs	r6, r3
    26a4:	e6c4      	b.n	2430 <__aeabi_dadd+0x108>
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	000007ff 	.word	0x000007ff
    26ac:	ff7fffff 	.word	0xff7fffff
    26b0:	800fffff 	.word	0x800fffff
    26b4:	2b1f      	cmp	r3, #31
    26b6:	dc63      	bgt.n	2780 <__aeabi_dadd+0x458>
    26b8:	2020      	movs	r0, #32
    26ba:	1ac3      	subs	r3, r0, r3
    26bc:	0008      	movs	r0, r1
    26be:	4098      	lsls	r0, r3
    26c0:	469c      	mov	ip, r3
    26c2:	4683      	mov	fp, r0
    26c4:	4653      	mov	r3, sl
    26c6:	0010      	movs	r0, r2
    26c8:	40d8      	lsrs	r0, r3
    26ca:	0003      	movs	r3, r0
    26cc:	4658      	mov	r0, fp
    26ce:	4318      	orrs	r0, r3
    26d0:	4663      	mov	r3, ip
    26d2:	409a      	lsls	r2, r3
    26d4:	1e53      	subs	r3, r2, #1
    26d6:	419a      	sbcs	r2, r3
    26d8:	4653      	mov	r3, sl
    26da:	4302      	orrs	r2, r0
    26dc:	40d9      	lsrs	r1, r3
    26de:	e703      	b.n	24e8 <__aeabi_dadd+0x1c0>
    26e0:	0026      	movs	r6, r4
    26e2:	433e      	orrs	r6, r7
    26e4:	d006      	beq.n	26f4 <__aeabi_dadd+0x3cc>
    26e6:	43eb      	mvns	r3, r5
    26e8:	4699      	mov	r9, r3
    26ea:	2b00      	cmp	r3, #0
    26ec:	d0c7      	beq.n	267e <__aeabi_dadd+0x356>
    26ee:	4e94      	ldr	r6, [pc, #592]	; (2940 <__aeabi_dadd+0x618>)
    26f0:	42b0      	cmp	r0, r6
    26f2:	d1ac      	bne.n	264e <__aeabi_dadd+0x326>
    26f4:	000c      	movs	r4, r1
    26f6:	0017      	movs	r7, r2
    26f8:	0006      	movs	r6, r0
    26fa:	46d8      	mov	r8, fp
    26fc:	e698      	b.n	2430 <__aeabi_dadd+0x108>
    26fe:	4b90      	ldr	r3, [pc, #576]	; (2940 <__aeabi_dadd+0x618>)
    2700:	459a      	cmp	sl, r3
    2702:	d00b      	beq.n	271c <__aeabi_dadd+0x3f4>
    2704:	4682      	mov	sl, r0
    2706:	e6e7      	b.n	24d8 <__aeabi_dadd+0x1b0>
    2708:	2800      	cmp	r0, #0
    270a:	d000      	beq.n	270e <__aeabi_dadd+0x3e6>
    270c:	e09e      	b.n	284c <__aeabi_dadd+0x524>
    270e:	0018      	movs	r0, r3
    2710:	4310      	orrs	r0, r2
    2712:	d100      	bne.n	2716 <__aeabi_dadd+0x3ee>
    2714:	e0e9      	b.n	28ea <__aeabi_dadd+0x5c2>
    2716:	001c      	movs	r4, r3
    2718:	0017      	movs	r7, r2
    271a:	46d8      	mov	r8, fp
    271c:	4e88      	ldr	r6, [pc, #544]	; (2940 <__aeabi_dadd+0x618>)
    271e:	e687      	b.n	2430 <__aeabi_dadd+0x108>
    2720:	2500      	movs	r5, #0
    2722:	e772      	b.n	260a <__aeabi_dadd+0x2e2>
    2724:	2100      	movs	r1, #0
    2726:	e782      	b.n	262e <__aeabi_dadd+0x306>
    2728:	0023      	movs	r3, r4
    272a:	433b      	orrs	r3, r7
    272c:	2e00      	cmp	r6, #0
    272e:	d000      	beq.n	2732 <__aeabi_dadd+0x40a>
    2730:	e0ab      	b.n	288a <__aeabi_dadd+0x562>
    2732:	2b00      	cmp	r3, #0
    2734:	d100      	bne.n	2738 <__aeabi_dadd+0x410>
    2736:	e0e7      	b.n	2908 <__aeabi_dadd+0x5e0>
    2738:	000b      	movs	r3, r1
    273a:	4313      	orrs	r3, r2
    273c:	d100      	bne.n	2740 <__aeabi_dadd+0x418>
    273e:	e677      	b.n	2430 <__aeabi_dadd+0x108>
    2740:	18ba      	adds	r2, r7, r2
    2742:	42ba      	cmp	r2, r7
    2744:	41bf      	sbcs	r7, r7
    2746:	1864      	adds	r4, r4, r1
    2748:	427f      	negs	r7, r7
    274a:	19e4      	adds	r4, r4, r7
    274c:	0223      	lsls	r3, r4, #8
    274e:	d400      	bmi.n	2752 <__aeabi_dadd+0x42a>
    2750:	e0f2      	b.n	2938 <__aeabi_dadd+0x610>
    2752:	4b7c      	ldr	r3, [pc, #496]	; (2944 <__aeabi_dadd+0x61c>)
    2754:	0017      	movs	r7, r2
    2756:	401c      	ands	r4, r3
    2758:	0006      	movs	r6, r0
    275a:	e669      	b.n	2430 <__aeabi_dadd+0x108>
    275c:	0020      	movs	r0, r4
    275e:	4338      	orrs	r0, r7
    2760:	2e00      	cmp	r6, #0
    2762:	d1d1      	bne.n	2708 <__aeabi_dadd+0x3e0>
    2764:	2800      	cmp	r0, #0
    2766:	d15b      	bne.n	2820 <__aeabi_dadd+0x4f8>
    2768:	001c      	movs	r4, r3
    276a:	4314      	orrs	r4, r2
    276c:	d100      	bne.n	2770 <__aeabi_dadd+0x448>
    276e:	e0a8      	b.n	28c2 <__aeabi_dadd+0x59a>
    2770:	001c      	movs	r4, r3
    2772:	0017      	movs	r7, r2
    2774:	46d8      	mov	r8, fp
    2776:	e65b      	b.n	2430 <__aeabi_dadd+0x108>
    2778:	0006      	movs	r6, r0
    277a:	2400      	movs	r4, #0
    277c:	2700      	movs	r7, #0
    277e:	e697      	b.n	24b0 <__aeabi_dadd+0x188>
    2780:	4650      	mov	r0, sl
    2782:	000b      	movs	r3, r1
    2784:	3820      	subs	r0, #32
    2786:	40c3      	lsrs	r3, r0
    2788:	4699      	mov	r9, r3
    278a:	4653      	mov	r3, sl
    278c:	2b20      	cmp	r3, #32
    278e:	d100      	bne.n	2792 <__aeabi_dadd+0x46a>
    2790:	e095      	b.n	28be <__aeabi_dadd+0x596>
    2792:	2340      	movs	r3, #64	; 0x40
    2794:	4650      	mov	r0, sl
    2796:	1a1b      	subs	r3, r3, r0
    2798:	4099      	lsls	r1, r3
    279a:	430a      	orrs	r2, r1
    279c:	1e51      	subs	r1, r2, #1
    279e:	418a      	sbcs	r2, r1
    27a0:	464b      	mov	r3, r9
    27a2:	2100      	movs	r1, #0
    27a4:	431a      	orrs	r2, r3
    27a6:	e69f      	b.n	24e8 <__aeabi_dadd+0x1c0>
    27a8:	2e00      	cmp	r6, #0
    27aa:	d130      	bne.n	280e <__aeabi_dadd+0x4e6>
    27ac:	0026      	movs	r6, r4
    27ae:	433e      	orrs	r6, r7
    27b0:	d067      	beq.n	2882 <__aeabi_dadd+0x55a>
    27b2:	43db      	mvns	r3, r3
    27b4:	469a      	mov	sl, r3
    27b6:	2b00      	cmp	r3, #0
    27b8:	d01c      	beq.n	27f4 <__aeabi_dadd+0x4cc>
    27ba:	4e61      	ldr	r6, [pc, #388]	; (2940 <__aeabi_dadd+0x618>)
    27bc:	42b0      	cmp	r0, r6
    27be:	d060      	beq.n	2882 <__aeabi_dadd+0x55a>
    27c0:	4653      	mov	r3, sl
    27c2:	2b38      	cmp	r3, #56	; 0x38
    27c4:	dd00      	ble.n	27c8 <__aeabi_dadd+0x4a0>
    27c6:	e096      	b.n	28f6 <__aeabi_dadd+0x5ce>
    27c8:	2b1f      	cmp	r3, #31
    27ca:	dd00      	ble.n	27ce <__aeabi_dadd+0x4a6>
    27cc:	e09f      	b.n	290e <__aeabi_dadd+0x5e6>
    27ce:	2620      	movs	r6, #32
    27d0:	1af3      	subs	r3, r6, r3
    27d2:	0026      	movs	r6, r4
    27d4:	409e      	lsls	r6, r3
    27d6:	469c      	mov	ip, r3
    27d8:	46b3      	mov	fp, r6
    27da:	4653      	mov	r3, sl
    27dc:	003e      	movs	r6, r7
    27de:	40de      	lsrs	r6, r3
    27e0:	0033      	movs	r3, r6
    27e2:	465e      	mov	r6, fp
    27e4:	431e      	orrs	r6, r3
    27e6:	4663      	mov	r3, ip
    27e8:	409f      	lsls	r7, r3
    27ea:	1e7b      	subs	r3, r7, #1
    27ec:	419f      	sbcs	r7, r3
    27ee:	4653      	mov	r3, sl
    27f0:	40dc      	lsrs	r4, r3
    27f2:	4337      	orrs	r7, r6
    27f4:	18bf      	adds	r7, r7, r2
    27f6:	4297      	cmp	r7, r2
    27f8:	4192      	sbcs	r2, r2
    27fa:	1864      	adds	r4, r4, r1
    27fc:	4252      	negs	r2, r2
    27fe:	18a4      	adds	r4, r4, r2
    2800:	0006      	movs	r6, r0
    2802:	e678      	b.n	24f6 <__aeabi_dadd+0x1ce>
    2804:	4327      	orrs	r7, r4
    2806:	1e7c      	subs	r4, r7, #1
    2808:	41a7      	sbcs	r7, r4
    280a:	2400      	movs	r4, #0
    280c:	e737      	b.n	267e <__aeabi_dadd+0x356>
    280e:	4e4c      	ldr	r6, [pc, #304]	; (2940 <__aeabi_dadd+0x618>)
    2810:	42b0      	cmp	r0, r6
    2812:	d036      	beq.n	2882 <__aeabi_dadd+0x55a>
    2814:	2680      	movs	r6, #128	; 0x80
    2816:	425b      	negs	r3, r3
    2818:	0436      	lsls	r6, r6, #16
    281a:	469a      	mov	sl, r3
    281c:	4334      	orrs	r4, r6
    281e:	e7cf      	b.n	27c0 <__aeabi_dadd+0x498>
    2820:	0018      	movs	r0, r3
    2822:	4310      	orrs	r0, r2
    2824:	d100      	bne.n	2828 <__aeabi_dadd+0x500>
    2826:	e603      	b.n	2430 <__aeabi_dadd+0x108>
    2828:	1ab8      	subs	r0, r7, r2
    282a:	4684      	mov	ip, r0
    282c:	4567      	cmp	r7, ip
    282e:	41ad      	sbcs	r5, r5
    2830:	1ae0      	subs	r0, r4, r3
    2832:	426d      	negs	r5, r5
    2834:	1b40      	subs	r0, r0, r5
    2836:	0205      	lsls	r5, r0, #8
    2838:	d400      	bmi.n	283c <__aeabi_dadd+0x514>
    283a:	e62c      	b.n	2496 <__aeabi_dadd+0x16e>
    283c:	1bd7      	subs	r7, r2, r7
    283e:	42ba      	cmp	r2, r7
    2840:	4192      	sbcs	r2, r2
    2842:	1b1c      	subs	r4, r3, r4
    2844:	4252      	negs	r2, r2
    2846:	1aa4      	subs	r4, r4, r2
    2848:	46d8      	mov	r8, fp
    284a:	e5f1      	b.n	2430 <__aeabi_dadd+0x108>
    284c:	0018      	movs	r0, r3
    284e:	4310      	orrs	r0, r2
    2850:	d100      	bne.n	2854 <__aeabi_dadd+0x52c>
    2852:	e763      	b.n	271c <__aeabi_dadd+0x3f4>
    2854:	08f8      	lsrs	r0, r7, #3
    2856:	0767      	lsls	r7, r4, #29
    2858:	4307      	orrs	r7, r0
    285a:	2080      	movs	r0, #128	; 0x80
    285c:	08e4      	lsrs	r4, r4, #3
    285e:	0300      	lsls	r0, r0, #12
    2860:	4204      	tst	r4, r0
    2862:	d008      	beq.n	2876 <__aeabi_dadd+0x54e>
    2864:	08dd      	lsrs	r5, r3, #3
    2866:	4205      	tst	r5, r0
    2868:	d105      	bne.n	2876 <__aeabi_dadd+0x54e>
    286a:	08d2      	lsrs	r2, r2, #3
    286c:	0759      	lsls	r1, r3, #29
    286e:	4311      	orrs	r1, r2
    2870:	000f      	movs	r7, r1
    2872:	002c      	movs	r4, r5
    2874:	46d8      	mov	r8, fp
    2876:	0f7b      	lsrs	r3, r7, #29
    2878:	00e4      	lsls	r4, r4, #3
    287a:	431c      	orrs	r4, r3
    287c:	00ff      	lsls	r7, r7, #3
    287e:	4e30      	ldr	r6, [pc, #192]	; (2940 <__aeabi_dadd+0x618>)
    2880:	e5d6      	b.n	2430 <__aeabi_dadd+0x108>
    2882:	000c      	movs	r4, r1
    2884:	0017      	movs	r7, r2
    2886:	0006      	movs	r6, r0
    2888:	e5d2      	b.n	2430 <__aeabi_dadd+0x108>
    288a:	2b00      	cmp	r3, #0
    288c:	d038      	beq.n	2900 <__aeabi_dadd+0x5d8>
    288e:	000b      	movs	r3, r1
    2890:	4313      	orrs	r3, r2
    2892:	d100      	bne.n	2896 <__aeabi_dadd+0x56e>
    2894:	e742      	b.n	271c <__aeabi_dadd+0x3f4>
    2896:	08f8      	lsrs	r0, r7, #3
    2898:	0767      	lsls	r7, r4, #29
    289a:	4307      	orrs	r7, r0
    289c:	2080      	movs	r0, #128	; 0x80
    289e:	08e4      	lsrs	r4, r4, #3
    28a0:	0300      	lsls	r0, r0, #12
    28a2:	4204      	tst	r4, r0
    28a4:	d0e7      	beq.n	2876 <__aeabi_dadd+0x54e>
    28a6:	08cb      	lsrs	r3, r1, #3
    28a8:	4203      	tst	r3, r0
    28aa:	d1e4      	bne.n	2876 <__aeabi_dadd+0x54e>
    28ac:	08d2      	lsrs	r2, r2, #3
    28ae:	0749      	lsls	r1, r1, #29
    28b0:	4311      	orrs	r1, r2
    28b2:	000f      	movs	r7, r1
    28b4:	001c      	movs	r4, r3
    28b6:	e7de      	b.n	2876 <__aeabi_dadd+0x54e>
    28b8:	2700      	movs	r7, #0
    28ba:	2400      	movs	r4, #0
    28bc:	e5d5      	b.n	246a <__aeabi_dadd+0x142>
    28be:	2100      	movs	r1, #0
    28c0:	e76b      	b.n	279a <__aeabi_dadd+0x472>
    28c2:	2500      	movs	r5, #0
    28c4:	2700      	movs	r7, #0
    28c6:	e5f3      	b.n	24b0 <__aeabi_dadd+0x188>
    28c8:	464e      	mov	r6, r9
    28ca:	0025      	movs	r5, r4
    28cc:	3e20      	subs	r6, #32
    28ce:	40f5      	lsrs	r5, r6
    28d0:	464b      	mov	r3, r9
    28d2:	002e      	movs	r6, r5
    28d4:	2b20      	cmp	r3, #32
    28d6:	d02d      	beq.n	2934 <__aeabi_dadd+0x60c>
    28d8:	2540      	movs	r5, #64	; 0x40
    28da:	1aed      	subs	r5, r5, r3
    28dc:	40ac      	lsls	r4, r5
    28de:	4327      	orrs	r7, r4
    28e0:	1e7c      	subs	r4, r7, #1
    28e2:	41a7      	sbcs	r7, r4
    28e4:	2400      	movs	r4, #0
    28e6:	4337      	orrs	r7, r6
    28e8:	e6c9      	b.n	267e <__aeabi_dadd+0x356>
    28ea:	2480      	movs	r4, #128	; 0x80
    28ec:	2500      	movs	r5, #0
    28ee:	0324      	lsls	r4, r4, #12
    28f0:	4e13      	ldr	r6, [pc, #76]	; (2940 <__aeabi_dadd+0x618>)
    28f2:	2700      	movs	r7, #0
    28f4:	e5dc      	b.n	24b0 <__aeabi_dadd+0x188>
    28f6:	4327      	orrs	r7, r4
    28f8:	1e7c      	subs	r4, r7, #1
    28fa:	41a7      	sbcs	r7, r4
    28fc:	2400      	movs	r4, #0
    28fe:	e779      	b.n	27f4 <__aeabi_dadd+0x4cc>
    2900:	000c      	movs	r4, r1
    2902:	0017      	movs	r7, r2
    2904:	4e0e      	ldr	r6, [pc, #56]	; (2940 <__aeabi_dadd+0x618>)
    2906:	e593      	b.n	2430 <__aeabi_dadd+0x108>
    2908:	000c      	movs	r4, r1
    290a:	0017      	movs	r7, r2
    290c:	e590      	b.n	2430 <__aeabi_dadd+0x108>
    290e:	4656      	mov	r6, sl
    2910:	0023      	movs	r3, r4
    2912:	3e20      	subs	r6, #32
    2914:	40f3      	lsrs	r3, r6
    2916:	4699      	mov	r9, r3
    2918:	4653      	mov	r3, sl
    291a:	2b20      	cmp	r3, #32
    291c:	d00e      	beq.n	293c <__aeabi_dadd+0x614>
    291e:	2340      	movs	r3, #64	; 0x40
    2920:	4656      	mov	r6, sl
    2922:	1b9b      	subs	r3, r3, r6
    2924:	409c      	lsls	r4, r3
    2926:	4327      	orrs	r7, r4
    2928:	1e7c      	subs	r4, r7, #1
    292a:	41a7      	sbcs	r7, r4
    292c:	464b      	mov	r3, r9
    292e:	2400      	movs	r4, #0
    2930:	431f      	orrs	r7, r3
    2932:	e75f      	b.n	27f4 <__aeabi_dadd+0x4cc>
    2934:	2400      	movs	r4, #0
    2936:	e7d2      	b.n	28de <__aeabi_dadd+0x5b6>
    2938:	0017      	movs	r7, r2
    293a:	e5b2      	b.n	24a2 <__aeabi_dadd+0x17a>
    293c:	2400      	movs	r4, #0
    293e:	e7f2      	b.n	2926 <__aeabi_dadd+0x5fe>
    2940:	000007ff 	.word	0x000007ff
    2944:	ff7fffff 	.word	0xff7fffff

00002948 <__aeabi_ddiv>:
    2948:	b5f0      	push	{r4, r5, r6, r7, lr}
    294a:	4657      	mov	r7, sl
    294c:	4645      	mov	r5, r8
    294e:	46de      	mov	lr, fp
    2950:	464e      	mov	r6, r9
    2952:	b5e0      	push	{r5, r6, r7, lr}
    2954:	004c      	lsls	r4, r1, #1
    2956:	030e      	lsls	r6, r1, #12
    2958:	b087      	sub	sp, #28
    295a:	4683      	mov	fp, r0
    295c:	4692      	mov	sl, r2
    295e:	001d      	movs	r5, r3
    2960:	4680      	mov	r8, r0
    2962:	0b36      	lsrs	r6, r6, #12
    2964:	0d64      	lsrs	r4, r4, #21
    2966:	0fcf      	lsrs	r7, r1, #31
    2968:	2c00      	cmp	r4, #0
    296a:	d04f      	beq.n	2a0c <__aeabi_ddiv+0xc4>
    296c:	4b6f      	ldr	r3, [pc, #444]	; (2b2c <__aeabi_ddiv+0x1e4>)
    296e:	429c      	cmp	r4, r3
    2970:	d035      	beq.n	29de <__aeabi_ddiv+0x96>
    2972:	2380      	movs	r3, #128	; 0x80
    2974:	0f42      	lsrs	r2, r0, #29
    2976:	041b      	lsls	r3, r3, #16
    2978:	00f6      	lsls	r6, r6, #3
    297a:	4313      	orrs	r3, r2
    297c:	4333      	orrs	r3, r6
    297e:	4699      	mov	r9, r3
    2980:	00c3      	lsls	r3, r0, #3
    2982:	4698      	mov	r8, r3
    2984:	4b6a      	ldr	r3, [pc, #424]	; (2b30 <__aeabi_ddiv+0x1e8>)
    2986:	2600      	movs	r6, #0
    2988:	469c      	mov	ip, r3
    298a:	2300      	movs	r3, #0
    298c:	4464      	add	r4, ip
    298e:	9303      	str	r3, [sp, #12]
    2990:	032b      	lsls	r3, r5, #12
    2992:	0b1b      	lsrs	r3, r3, #12
    2994:	469b      	mov	fp, r3
    2996:	006b      	lsls	r3, r5, #1
    2998:	0fed      	lsrs	r5, r5, #31
    299a:	4650      	mov	r0, sl
    299c:	0d5b      	lsrs	r3, r3, #21
    299e:	9501      	str	r5, [sp, #4]
    29a0:	d05e      	beq.n	2a60 <__aeabi_ddiv+0x118>
    29a2:	4a62      	ldr	r2, [pc, #392]	; (2b2c <__aeabi_ddiv+0x1e4>)
    29a4:	4293      	cmp	r3, r2
    29a6:	d053      	beq.n	2a50 <__aeabi_ddiv+0x108>
    29a8:	465a      	mov	r2, fp
    29aa:	00d1      	lsls	r1, r2, #3
    29ac:	2280      	movs	r2, #128	; 0x80
    29ae:	0f40      	lsrs	r0, r0, #29
    29b0:	0412      	lsls	r2, r2, #16
    29b2:	4302      	orrs	r2, r0
    29b4:	430a      	orrs	r2, r1
    29b6:	4693      	mov	fp, r2
    29b8:	4652      	mov	r2, sl
    29ba:	00d1      	lsls	r1, r2, #3
    29bc:	4a5c      	ldr	r2, [pc, #368]	; (2b30 <__aeabi_ddiv+0x1e8>)
    29be:	4694      	mov	ip, r2
    29c0:	2200      	movs	r2, #0
    29c2:	4463      	add	r3, ip
    29c4:	0038      	movs	r0, r7
    29c6:	4068      	eors	r0, r5
    29c8:	4684      	mov	ip, r0
    29ca:	9002      	str	r0, [sp, #8]
    29cc:	1ae4      	subs	r4, r4, r3
    29ce:	4316      	orrs	r6, r2
    29d0:	2e0f      	cmp	r6, #15
    29d2:	d900      	bls.n	29d6 <__aeabi_ddiv+0x8e>
    29d4:	e0b4      	b.n	2b40 <__aeabi_ddiv+0x1f8>
    29d6:	4b57      	ldr	r3, [pc, #348]	; (2b34 <__aeabi_ddiv+0x1ec>)
    29d8:	00b6      	lsls	r6, r6, #2
    29da:	599b      	ldr	r3, [r3, r6]
    29dc:	469f      	mov	pc, r3
    29de:	0003      	movs	r3, r0
    29e0:	4333      	orrs	r3, r6
    29e2:	4699      	mov	r9, r3
    29e4:	d16c      	bne.n	2ac0 <__aeabi_ddiv+0x178>
    29e6:	2300      	movs	r3, #0
    29e8:	4698      	mov	r8, r3
    29ea:	3302      	adds	r3, #2
    29ec:	2608      	movs	r6, #8
    29ee:	9303      	str	r3, [sp, #12]
    29f0:	e7ce      	b.n	2990 <__aeabi_ddiv+0x48>
    29f2:	46cb      	mov	fp, r9
    29f4:	4641      	mov	r1, r8
    29f6:	9a03      	ldr	r2, [sp, #12]
    29f8:	9701      	str	r7, [sp, #4]
    29fa:	2a02      	cmp	r2, #2
    29fc:	d165      	bne.n	2aca <__aeabi_ddiv+0x182>
    29fe:	9b01      	ldr	r3, [sp, #4]
    2a00:	4c4a      	ldr	r4, [pc, #296]	; (2b2c <__aeabi_ddiv+0x1e4>)
    2a02:	469c      	mov	ip, r3
    2a04:	2300      	movs	r3, #0
    2a06:	2200      	movs	r2, #0
    2a08:	4698      	mov	r8, r3
    2a0a:	e06b      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2a0c:	0003      	movs	r3, r0
    2a0e:	4333      	orrs	r3, r6
    2a10:	4699      	mov	r9, r3
    2a12:	d04e      	beq.n	2ab2 <__aeabi_ddiv+0x16a>
    2a14:	2e00      	cmp	r6, #0
    2a16:	d100      	bne.n	2a1a <__aeabi_ddiv+0xd2>
    2a18:	e1bc      	b.n	2d94 <__aeabi_ddiv+0x44c>
    2a1a:	0030      	movs	r0, r6
    2a1c:	f001 f8ca 	bl	3bb4 <__clzsi2>
    2a20:	0003      	movs	r3, r0
    2a22:	3b0b      	subs	r3, #11
    2a24:	2b1c      	cmp	r3, #28
    2a26:	dd00      	ble.n	2a2a <__aeabi_ddiv+0xe2>
    2a28:	e1ac      	b.n	2d84 <__aeabi_ddiv+0x43c>
    2a2a:	221d      	movs	r2, #29
    2a2c:	1ad3      	subs	r3, r2, r3
    2a2e:	465a      	mov	r2, fp
    2a30:	0001      	movs	r1, r0
    2a32:	40da      	lsrs	r2, r3
    2a34:	3908      	subs	r1, #8
    2a36:	408e      	lsls	r6, r1
    2a38:	0013      	movs	r3, r2
    2a3a:	4333      	orrs	r3, r6
    2a3c:	4699      	mov	r9, r3
    2a3e:	465b      	mov	r3, fp
    2a40:	408b      	lsls	r3, r1
    2a42:	4698      	mov	r8, r3
    2a44:	2300      	movs	r3, #0
    2a46:	4c3c      	ldr	r4, [pc, #240]	; (2b38 <__aeabi_ddiv+0x1f0>)
    2a48:	2600      	movs	r6, #0
    2a4a:	1a24      	subs	r4, r4, r0
    2a4c:	9303      	str	r3, [sp, #12]
    2a4e:	e79f      	b.n	2990 <__aeabi_ddiv+0x48>
    2a50:	4651      	mov	r1, sl
    2a52:	465a      	mov	r2, fp
    2a54:	4311      	orrs	r1, r2
    2a56:	d129      	bne.n	2aac <__aeabi_ddiv+0x164>
    2a58:	2200      	movs	r2, #0
    2a5a:	4693      	mov	fp, r2
    2a5c:	3202      	adds	r2, #2
    2a5e:	e7b1      	b.n	29c4 <__aeabi_ddiv+0x7c>
    2a60:	4659      	mov	r1, fp
    2a62:	4301      	orrs	r1, r0
    2a64:	d01e      	beq.n	2aa4 <__aeabi_ddiv+0x15c>
    2a66:	465b      	mov	r3, fp
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d100      	bne.n	2a6e <__aeabi_ddiv+0x126>
    2a6c:	e19e      	b.n	2dac <__aeabi_ddiv+0x464>
    2a6e:	4658      	mov	r0, fp
    2a70:	f001 f8a0 	bl	3bb4 <__clzsi2>
    2a74:	0003      	movs	r3, r0
    2a76:	3b0b      	subs	r3, #11
    2a78:	2b1c      	cmp	r3, #28
    2a7a:	dd00      	ble.n	2a7e <__aeabi_ddiv+0x136>
    2a7c:	e18f      	b.n	2d9e <__aeabi_ddiv+0x456>
    2a7e:	0002      	movs	r2, r0
    2a80:	4659      	mov	r1, fp
    2a82:	3a08      	subs	r2, #8
    2a84:	4091      	lsls	r1, r2
    2a86:	468b      	mov	fp, r1
    2a88:	211d      	movs	r1, #29
    2a8a:	1acb      	subs	r3, r1, r3
    2a8c:	4651      	mov	r1, sl
    2a8e:	40d9      	lsrs	r1, r3
    2a90:	000b      	movs	r3, r1
    2a92:	4659      	mov	r1, fp
    2a94:	430b      	orrs	r3, r1
    2a96:	4651      	mov	r1, sl
    2a98:	469b      	mov	fp, r3
    2a9a:	4091      	lsls	r1, r2
    2a9c:	4b26      	ldr	r3, [pc, #152]	; (2b38 <__aeabi_ddiv+0x1f0>)
    2a9e:	2200      	movs	r2, #0
    2aa0:	1a1b      	subs	r3, r3, r0
    2aa2:	e78f      	b.n	29c4 <__aeabi_ddiv+0x7c>
    2aa4:	2300      	movs	r3, #0
    2aa6:	2201      	movs	r2, #1
    2aa8:	469b      	mov	fp, r3
    2aaa:	e78b      	b.n	29c4 <__aeabi_ddiv+0x7c>
    2aac:	4651      	mov	r1, sl
    2aae:	2203      	movs	r2, #3
    2ab0:	e788      	b.n	29c4 <__aeabi_ddiv+0x7c>
    2ab2:	2300      	movs	r3, #0
    2ab4:	4698      	mov	r8, r3
    2ab6:	3301      	adds	r3, #1
    2ab8:	2604      	movs	r6, #4
    2aba:	2400      	movs	r4, #0
    2abc:	9303      	str	r3, [sp, #12]
    2abe:	e767      	b.n	2990 <__aeabi_ddiv+0x48>
    2ac0:	2303      	movs	r3, #3
    2ac2:	46b1      	mov	r9, r6
    2ac4:	9303      	str	r3, [sp, #12]
    2ac6:	260c      	movs	r6, #12
    2ac8:	e762      	b.n	2990 <__aeabi_ddiv+0x48>
    2aca:	2a03      	cmp	r2, #3
    2acc:	d100      	bne.n	2ad0 <__aeabi_ddiv+0x188>
    2ace:	e25c      	b.n	2f8a <__aeabi_ddiv+0x642>
    2ad0:	9b01      	ldr	r3, [sp, #4]
    2ad2:	2a01      	cmp	r2, #1
    2ad4:	d000      	beq.n	2ad8 <__aeabi_ddiv+0x190>
    2ad6:	e1e4      	b.n	2ea2 <__aeabi_ddiv+0x55a>
    2ad8:	4013      	ands	r3, r2
    2ada:	469c      	mov	ip, r3
    2adc:	2300      	movs	r3, #0
    2ade:	2400      	movs	r4, #0
    2ae0:	2200      	movs	r2, #0
    2ae2:	4698      	mov	r8, r3
    2ae4:	2100      	movs	r1, #0
    2ae6:	0312      	lsls	r2, r2, #12
    2ae8:	0b13      	lsrs	r3, r2, #12
    2aea:	0d0a      	lsrs	r2, r1, #20
    2aec:	0512      	lsls	r2, r2, #20
    2aee:	431a      	orrs	r2, r3
    2af0:	0523      	lsls	r3, r4, #20
    2af2:	4c12      	ldr	r4, [pc, #72]	; (2b3c <__aeabi_ddiv+0x1f4>)
    2af4:	4640      	mov	r0, r8
    2af6:	4022      	ands	r2, r4
    2af8:	4313      	orrs	r3, r2
    2afa:	4662      	mov	r2, ip
    2afc:	005b      	lsls	r3, r3, #1
    2afe:	07d2      	lsls	r2, r2, #31
    2b00:	085b      	lsrs	r3, r3, #1
    2b02:	4313      	orrs	r3, r2
    2b04:	0019      	movs	r1, r3
    2b06:	b007      	add	sp, #28
    2b08:	bc3c      	pop	{r2, r3, r4, r5}
    2b0a:	4690      	mov	r8, r2
    2b0c:	4699      	mov	r9, r3
    2b0e:	46a2      	mov	sl, r4
    2b10:	46ab      	mov	fp, r5
    2b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b14:	2300      	movs	r3, #0
    2b16:	2280      	movs	r2, #128	; 0x80
    2b18:	469c      	mov	ip, r3
    2b1a:	0312      	lsls	r2, r2, #12
    2b1c:	4698      	mov	r8, r3
    2b1e:	4c03      	ldr	r4, [pc, #12]	; (2b2c <__aeabi_ddiv+0x1e4>)
    2b20:	e7e0      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2b22:	2300      	movs	r3, #0
    2b24:	4c01      	ldr	r4, [pc, #4]	; (2b2c <__aeabi_ddiv+0x1e4>)
    2b26:	2200      	movs	r2, #0
    2b28:	4698      	mov	r8, r3
    2b2a:	e7db      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2b2c:	000007ff 	.word	0x000007ff
    2b30:	fffffc01 	.word	0xfffffc01
    2b34:	00004ca0 	.word	0x00004ca0
    2b38:	fffffc0d 	.word	0xfffffc0d
    2b3c:	800fffff 	.word	0x800fffff
    2b40:	45d9      	cmp	r9, fp
    2b42:	d900      	bls.n	2b46 <__aeabi_ddiv+0x1fe>
    2b44:	e139      	b.n	2dba <__aeabi_ddiv+0x472>
    2b46:	d100      	bne.n	2b4a <__aeabi_ddiv+0x202>
    2b48:	e134      	b.n	2db4 <__aeabi_ddiv+0x46c>
    2b4a:	2300      	movs	r3, #0
    2b4c:	4646      	mov	r6, r8
    2b4e:	464d      	mov	r5, r9
    2b50:	469a      	mov	sl, r3
    2b52:	3c01      	subs	r4, #1
    2b54:	465b      	mov	r3, fp
    2b56:	0e0a      	lsrs	r2, r1, #24
    2b58:	021b      	lsls	r3, r3, #8
    2b5a:	431a      	orrs	r2, r3
    2b5c:	020b      	lsls	r3, r1, #8
    2b5e:	0c17      	lsrs	r7, r2, #16
    2b60:	9303      	str	r3, [sp, #12]
    2b62:	0413      	lsls	r3, r2, #16
    2b64:	0c1b      	lsrs	r3, r3, #16
    2b66:	0039      	movs	r1, r7
    2b68:	0028      	movs	r0, r5
    2b6a:	4690      	mov	r8, r2
    2b6c:	9301      	str	r3, [sp, #4]
    2b6e:	f7ff fb25 	bl	21bc <__udivsi3>
    2b72:	0002      	movs	r2, r0
    2b74:	9b01      	ldr	r3, [sp, #4]
    2b76:	4683      	mov	fp, r0
    2b78:	435a      	muls	r2, r3
    2b7a:	0028      	movs	r0, r5
    2b7c:	0039      	movs	r1, r7
    2b7e:	4691      	mov	r9, r2
    2b80:	f7ff fba2 	bl	22c8 <__aeabi_uidivmod>
    2b84:	0c35      	lsrs	r5, r6, #16
    2b86:	0409      	lsls	r1, r1, #16
    2b88:	430d      	orrs	r5, r1
    2b8a:	45a9      	cmp	r9, r5
    2b8c:	d90d      	bls.n	2baa <__aeabi_ddiv+0x262>
    2b8e:	465b      	mov	r3, fp
    2b90:	4445      	add	r5, r8
    2b92:	3b01      	subs	r3, #1
    2b94:	45a8      	cmp	r8, r5
    2b96:	d900      	bls.n	2b9a <__aeabi_ddiv+0x252>
    2b98:	e13a      	b.n	2e10 <__aeabi_ddiv+0x4c8>
    2b9a:	45a9      	cmp	r9, r5
    2b9c:	d800      	bhi.n	2ba0 <__aeabi_ddiv+0x258>
    2b9e:	e137      	b.n	2e10 <__aeabi_ddiv+0x4c8>
    2ba0:	2302      	movs	r3, #2
    2ba2:	425b      	negs	r3, r3
    2ba4:	469c      	mov	ip, r3
    2ba6:	4445      	add	r5, r8
    2ba8:	44e3      	add	fp, ip
    2baa:	464b      	mov	r3, r9
    2bac:	1aeb      	subs	r3, r5, r3
    2bae:	0039      	movs	r1, r7
    2bb0:	0018      	movs	r0, r3
    2bb2:	9304      	str	r3, [sp, #16]
    2bb4:	f7ff fb02 	bl	21bc <__udivsi3>
    2bb8:	9b01      	ldr	r3, [sp, #4]
    2bba:	0005      	movs	r5, r0
    2bbc:	4343      	muls	r3, r0
    2bbe:	0039      	movs	r1, r7
    2bc0:	9804      	ldr	r0, [sp, #16]
    2bc2:	4699      	mov	r9, r3
    2bc4:	f7ff fb80 	bl	22c8 <__aeabi_uidivmod>
    2bc8:	0433      	lsls	r3, r6, #16
    2bca:	0409      	lsls	r1, r1, #16
    2bcc:	0c1b      	lsrs	r3, r3, #16
    2bce:	430b      	orrs	r3, r1
    2bd0:	4599      	cmp	r9, r3
    2bd2:	d909      	bls.n	2be8 <__aeabi_ddiv+0x2a0>
    2bd4:	4443      	add	r3, r8
    2bd6:	1e6a      	subs	r2, r5, #1
    2bd8:	4598      	cmp	r8, r3
    2bda:	d900      	bls.n	2bde <__aeabi_ddiv+0x296>
    2bdc:	e11a      	b.n	2e14 <__aeabi_ddiv+0x4cc>
    2bde:	4599      	cmp	r9, r3
    2be0:	d800      	bhi.n	2be4 <__aeabi_ddiv+0x29c>
    2be2:	e117      	b.n	2e14 <__aeabi_ddiv+0x4cc>
    2be4:	3d02      	subs	r5, #2
    2be6:	4443      	add	r3, r8
    2be8:	464a      	mov	r2, r9
    2bea:	1a9b      	subs	r3, r3, r2
    2bec:	465a      	mov	r2, fp
    2bee:	0412      	lsls	r2, r2, #16
    2bf0:	432a      	orrs	r2, r5
    2bf2:	9903      	ldr	r1, [sp, #12]
    2bf4:	4693      	mov	fp, r2
    2bf6:	0c10      	lsrs	r0, r2, #16
    2bf8:	0c0a      	lsrs	r2, r1, #16
    2bfa:	4691      	mov	r9, r2
    2bfc:	0409      	lsls	r1, r1, #16
    2bfe:	465a      	mov	r2, fp
    2c00:	0c09      	lsrs	r1, r1, #16
    2c02:	464e      	mov	r6, r9
    2c04:	000d      	movs	r5, r1
    2c06:	0412      	lsls	r2, r2, #16
    2c08:	0c12      	lsrs	r2, r2, #16
    2c0a:	4345      	muls	r5, r0
    2c0c:	9105      	str	r1, [sp, #20]
    2c0e:	4351      	muls	r1, r2
    2c10:	4372      	muls	r2, r6
    2c12:	4370      	muls	r0, r6
    2c14:	1952      	adds	r2, r2, r5
    2c16:	0c0e      	lsrs	r6, r1, #16
    2c18:	18b2      	adds	r2, r6, r2
    2c1a:	4295      	cmp	r5, r2
    2c1c:	d903      	bls.n	2c26 <__aeabi_ddiv+0x2de>
    2c1e:	2580      	movs	r5, #128	; 0x80
    2c20:	026d      	lsls	r5, r5, #9
    2c22:	46ac      	mov	ip, r5
    2c24:	4460      	add	r0, ip
    2c26:	0c15      	lsrs	r5, r2, #16
    2c28:	0409      	lsls	r1, r1, #16
    2c2a:	0412      	lsls	r2, r2, #16
    2c2c:	0c09      	lsrs	r1, r1, #16
    2c2e:	1828      	adds	r0, r5, r0
    2c30:	1852      	adds	r2, r2, r1
    2c32:	4283      	cmp	r3, r0
    2c34:	d200      	bcs.n	2c38 <__aeabi_ddiv+0x2f0>
    2c36:	e0ce      	b.n	2dd6 <__aeabi_ddiv+0x48e>
    2c38:	d100      	bne.n	2c3c <__aeabi_ddiv+0x2f4>
    2c3a:	e0c8      	b.n	2dce <__aeabi_ddiv+0x486>
    2c3c:	1a1d      	subs	r5, r3, r0
    2c3e:	4653      	mov	r3, sl
    2c40:	1a9e      	subs	r6, r3, r2
    2c42:	45b2      	cmp	sl, r6
    2c44:	4192      	sbcs	r2, r2
    2c46:	4252      	negs	r2, r2
    2c48:	1aab      	subs	r3, r5, r2
    2c4a:	469a      	mov	sl, r3
    2c4c:	4598      	cmp	r8, r3
    2c4e:	d100      	bne.n	2c52 <__aeabi_ddiv+0x30a>
    2c50:	e117      	b.n	2e82 <__aeabi_ddiv+0x53a>
    2c52:	0039      	movs	r1, r7
    2c54:	0018      	movs	r0, r3
    2c56:	f7ff fab1 	bl	21bc <__udivsi3>
    2c5a:	9b01      	ldr	r3, [sp, #4]
    2c5c:	0005      	movs	r5, r0
    2c5e:	4343      	muls	r3, r0
    2c60:	0039      	movs	r1, r7
    2c62:	4650      	mov	r0, sl
    2c64:	9304      	str	r3, [sp, #16]
    2c66:	f7ff fb2f 	bl	22c8 <__aeabi_uidivmod>
    2c6a:	9804      	ldr	r0, [sp, #16]
    2c6c:	040b      	lsls	r3, r1, #16
    2c6e:	0c31      	lsrs	r1, r6, #16
    2c70:	4319      	orrs	r1, r3
    2c72:	4288      	cmp	r0, r1
    2c74:	d909      	bls.n	2c8a <__aeabi_ddiv+0x342>
    2c76:	4441      	add	r1, r8
    2c78:	1e6b      	subs	r3, r5, #1
    2c7a:	4588      	cmp	r8, r1
    2c7c:	d900      	bls.n	2c80 <__aeabi_ddiv+0x338>
    2c7e:	e107      	b.n	2e90 <__aeabi_ddiv+0x548>
    2c80:	4288      	cmp	r0, r1
    2c82:	d800      	bhi.n	2c86 <__aeabi_ddiv+0x33e>
    2c84:	e104      	b.n	2e90 <__aeabi_ddiv+0x548>
    2c86:	3d02      	subs	r5, #2
    2c88:	4441      	add	r1, r8
    2c8a:	9b04      	ldr	r3, [sp, #16]
    2c8c:	1acb      	subs	r3, r1, r3
    2c8e:	0018      	movs	r0, r3
    2c90:	0039      	movs	r1, r7
    2c92:	9304      	str	r3, [sp, #16]
    2c94:	f7ff fa92 	bl	21bc <__udivsi3>
    2c98:	9b01      	ldr	r3, [sp, #4]
    2c9a:	4682      	mov	sl, r0
    2c9c:	4343      	muls	r3, r0
    2c9e:	0039      	movs	r1, r7
    2ca0:	9804      	ldr	r0, [sp, #16]
    2ca2:	9301      	str	r3, [sp, #4]
    2ca4:	f7ff fb10 	bl	22c8 <__aeabi_uidivmod>
    2ca8:	9801      	ldr	r0, [sp, #4]
    2caa:	040b      	lsls	r3, r1, #16
    2cac:	0431      	lsls	r1, r6, #16
    2cae:	0c09      	lsrs	r1, r1, #16
    2cb0:	4319      	orrs	r1, r3
    2cb2:	4288      	cmp	r0, r1
    2cb4:	d90d      	bls.n	2cd2 <__aeabi_ddiv+0x38a>
    2cb6:	4653      	mov	r3, sl
    2cb8:	4441      	add	r1, r8
    2cba:	3b01      	subs	r3, #1
    2cbc:	4588      	cmp	r8, r1
    2cbe:	d900      	bls.n	2cc2 <__aeabi_ddiv+0x37a>
    2cc0:	e0e8      	b.n	2e94 <__aeabi_ddiv+0x54c>
    2cc2:	4288      	cmp	r0, r1
    2cc4:	d800      	bhi.n	2cc8 <__aeabi_ddiv+0x380>
    2cc6:	e0e5      	b.n	2e94 <__aeabi_ddiv+0x54c>
    2cc8:	2302      	movs	r3, #2
    2cca:	425b      	negs	r3, r3
    2ccc:	469c      	mov	ip, r3
    2cce:	4441      	add	r1, r8
    2cd0:	44e2      	add	sl, ip
    2cd2:	9b01      	ldr	r3, [sp, #4]
    2cd4:	042d      	lsls	r5, r5, #16
    2cd6:	1ace      	subs	r6, r1, r3
    2cd8:	4651      	mov	r1, sl
    2cda:	4329      	orrs	r1, r5
    2cdc:	9d05      	ldr	r5, [sp, #20]
    2cde:	464f      	mov	r7, r9
    2ce0:	002a      	movs	r2, r5
    2ce2:	040b      	lsls	r3, r1, #16
    2ce4:	0c08      	lsrs	r0, r1, #16
    2ce6:	0c1b      	lsrs	r3, r3, #16
    2ce8:	435a      	muls	r2, r3
    2cea:	4345      	muls	r5, r0
    2cec:	437b      	muls	r3, r7
    2cee:	4378      	muls	r0, r7
    2cf0:	195b      	adds	r3, r3, r5
    2cf2:	0c17      	lsrs	r7, r2, #16
    2cf4:	18fb      	adds	r3, r7, r3
    2cf6:	429d      	cmp	r5, r3
    2cf8:	d903      	bls.n	2d02 <__aeabi_ddiv+0x3ba>
    2cfa:	2580      	movs	r5, #128	; 0x80
    2cfc:	026d      	lsls	r5, r5, #9
    2cfe:	46ac      	mov	ip, r5
    2d00:	4460      	add	r0, ip
    2d02:	0c1d      	lsrs	r5, r3, #16
    2d04:	0412      	lsls	r2, r2, #16
    2d06:	041b      	lsls	r3, r3, #16
    2d08:	0c12      	lsrs	r2, r2, #16
    2d0a:	1828      	adds	r0, r5, r0
    2d0c:	189b      	adds	r3, r3, r2
    2d0e:	4286      	cmp	r6, r0
    2d10:	d200      	bcs.n	2d14 <__aeabi_ddiv+0x3cc>
    2d12:	e093      	b.n	2e3c <__aeabi_ddiv+0x4f4>
    2d14:	d100      	bne.n	2d18 <__aeabi_ddiv+0x3d0>
    2d16:	e08e      	b.n	2e36 <__aeabi_ddiv+0x4ee>
    2d18:	2301      	movs	r3, #1
    2d1a:	4319      	orrs	r1, r3
    2d1c:	4ba0      	ldr	r3, [pc, #640]	; (2fa0 <__aeabi_ddiv+0x658>)
    2d1e:	18e3      	adds	r3, r4, r3
    2d20:	2b00      	cmp	r3, #0
    2d22:	dc00      	bgt.n	2d26 <__aeabi_ddiv+0x3de>
    2d24:	e099      	b.n	2e5a <__aeabi_ddiv+0x512>
    2d26:	074a      	lsls	r2, r1, #29
    2d28:	d000      	beq.n	2d2c <__aeabi_ddiv+0x3e4>
    2d2a:	e09e      	b.n	2e6a <__aeabi_ddiv+0x522>
    2d2c:	465a      	mov	r2, fp
    2d2e:	01d2      	lsls	r2, r2, #7
    2d30:	d506      	bpl.n	2d40 <__aeabi_ddiv+0x3f8>
    2d32:	465a      	mov	r2, fp
    2d34:	4b9b      	ldr	r3, [pc, #620]	; (2fa4 <__aeabi_ddiv+0x65c>)
    2d36:	401a      	ands	r2, r3
    2d38:	2380      	movs	r3, #128	; 0x80
    2d3a:	4693      	mov	fp, r2
    2d3c:	00db      	lsls	r3, r3, #3
    2d3e:	18e3      	adds	r3, r4, r3
    2d40:	4a99      	ldr	r2, [pc, #612]	; (2fa8 <__aeabi_ddiv+0x660>)
    2d42:	4293      	cmp	r3, r2
    2d44:	dd68      	ble.n	2e18 <__aeabi_ddiv+0x4d0>
    2d46:	2301      	movs	r3, #1
    2d48:	9a02      	ldr	r2, [sp, #8]
    2d4a:	4c98      	ldr	r4, [pc, #608]	; (2fac <__aeabi_ddiv+0x664>)
    2d4c:	401a      	ands	r2, r3
    2d4e:	2300      	movs	r3, #0
    2d50:	4694      	mov	ip, r2
    2d52:	4698      	mov	r8, r3
    2d54:	2200      	movs	r2, #0
    2d56:	e6c5      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2d58:	2280      	movs	r2, #128	; 0x80
    2d5a:	464b      	mov	r3, r9
    2d5c:	0312      	lsls	r2, r2, #12
    2d5e:	4213      	tst	r3, r2
    2d60:	d00a      	beq.n	2d78 <__aeabi_ddiv+0x430>
    2d62:	465b      	mov	r3, fp
    2d64:	4213      	tst	r3, r2
    2d66:	d106      	bne.n	2d76 <__aeabi_ddiv+0x42e>
    2d68:	431a      	orrs	r2, r3
    2d6a:	0312      	lsls	r2, r2, #12
    2d6c:	0b12      	lsrs	r2, r2, #12
    2d6e:	46ac      	mov	ip, r5
    2d70:	4688      	mov	r8, r1
    2d72:	4c8e      	ldr	r4, [pc, #568]	; (2fac <__aeabi_ddiv+0x664>)
    2d74:	e6b6      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2d76:	464b      	mov	r3, r9
    2d78:	431a      	orrs	r2, r3
    2d7a:	0312      	lsls	r2, r2, #12
    2d7c:	0b12      	lsrs	r2, r2, #12
    2d7e:	46bc      	mov	ip, r7
    2d80:	4c8a      	ldr	r4, [pc, #552]	; (2fac <__aeabi_ddiv+0x664>)
    2d82:	e6af      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2d84:	0003      	movs	r3, r0
    2d86:	465a      	mov	r2, fp
    2d88:	3b28      	subs	r3, #40	; 0x28
    2d8a:	409a      	lsls	r2, r3
    2d8c:	2300      	movs	r3, #0
    2d8e:	4691      	mov	r9, r2
    2d90:	4698      	mov	r8, r3
    2d92:	e657      	b.n	2a44 <__aeabi_ddiv+0xfc>
    2d94:	4658      	mov	r0, fp
    2d96:	f000 ff0d 	bl	3bb4 <__clzsi2>
    2d9a:	3020      	adds	r0, #32
    2d9c:	e640      	b.n	2a20 <__aeabi_ddiv+0xd8>
    2d9e:	0003      	movs	r3, r0
    2da0:	4652      	mov	r2, sl
    2da2:	3b28      	subs	r3, #40	; 0x28
    2da4:	409a      	lsls	r2, r3
    2da6:	2100      	movs	r1, #0
    2da8:	4693      	mov	fp, r2
    2daa:	e677      	b.n	2a9c <__aeabi_ddiv+0x154>
    2dac:	f000 ff02 	bl	3bb4 <__clzsi2>
    2db0:	3020      	adds	r0, #32
    2db2:	e65f      	b.n	2a74 <__aeabi_ddiv+0x12c>
    2db4:	4588      	cmp	r8, r1
    2db6:	d200      	bcs.n	2dba <__aeabi_ddiv+0x472>
    2db8:	e6c7      	b.n	2b4a <__aeabi_ddiv+0x202>
    2dba:	464b      	mov	r3, r9
    2dbc:	07de      	lsls	r6, r3, #31
    2dbe:	085d      	lsrs	r5, r3, #1
    2dc0:	4643      	mov	r3, r8
    2dc2:	085b      	lsrs	r3, r3, #1
    2dc4:	431e      	orrs	r6, r3
    2dc6:	4643      	mov	r3, r8
    2dc8:	07db      	lsls	r3, r3, #31
    2dca:	469a      	mov	sl, r3
    2dcc:	e6c2      	b.n	2b54 <__aeabi_ddiv+0x20c>
    2dce:	2500      	movs	r5, #0
    2dd0:	4592      	cmp	sl, r2
    2dd2:	d300      	bcc.n	2dd6 <__aeabi_ddiv+0x48e>
    2dd4:	e733      	b.n	2c3e <__aeabi_ddiv+0x2f6>
    2dd6:	9e03      	ldr	r6, [sp, #12]
    2dd8:	4659      	mov	r1, fp
    2dda:	46b4      	mov	ip, r6
    2ddc:	44e2      	add	sl, ip
    2dde:	45b2      	cmp	sl, r6
    2de0:	41ad      	sbcs	r5, r5
    2de2:	426d      	negs	r5, r5
    2de4:	4445      	add	r5, r8
    2de6:	18eb      	adds	r3, r5, r3
    2de8:	3901      	subs	r1, #1
    2dea:	4598      	cmp	r8, r3
    2dec:	d207      	bcs.n	2dfe <__aeabi_ddiv+0x4b6>
    2dee:	4298      	cmp	r0, r3
    2df0:	d900      	bls.n	2df4 <__aeabi_ddiv+0x4ac>
    2df2:	e07f      	b.n	2ef4 <__aeabi_ddiv+0x5ac>
    2df4:	d100      	bne.n	2df8 <__aeabi_ddiv+0x4b0>
    2df6:	e0bc      	b.n	2f72 <__aeabi_ddiv+0x62a>
    2df8:	1a1d      	subs	r5, r3, r0
    2dfa:	468b      	mov	fp, r1
    2dfc:	e71f      	b.n	2c3e <__aeabi_ddiv+0x2f6>
    2dfe:	4598      	cmp	r8, r3
    2e00:	d1fa      	bne.n	2df8 <__aeabi_ddiv+0x4b0>
    2e02:	9d03      	ldr	r5, [sp, #12]
    2e04:	4555      	cmp	r5, sl
    2e06:	d9f2      	bls.n	2dee <__aeabi_ddiv+0x4a6>
    2e08:	4643      	mov	r3, r8
    2e0a:	468b      	mov	fp, r1
    2e0c:	1a1d      	subs	r5, r3, r0
    2e0e:	e716      	b.n	2c3e <__aeabi_ddiv+0x2f6>
    2e10:	469b      	mov	fp, r3
    2e12:	e6ca      	b.n	2baa <__aeabi_ddiv+0x262>
    2e14:	0015      	movs	r5, r2
    2e16:	e6e7      	b.n	2be8 <__aeabi_ddiv+0x2a0>
    2e18:	465a      	mov	r2, fp
    2e1a:	08c9      	lsrs	r1, r1, #3
    2e1c:	0752      	lsls	r2, r2, #29
    2e1e:	430a      	orrs	r2, r1
    2e20:	055b      	lsls	r3, r3, #21
    2e22:	4690      	mov	r8, r2
    2e24:	0d5c      	lsrs	r4, r3, #21
    2e26:	465a      	mov	r2, fp
    2e28:	2301      	movs	r3, #1
    2e2a:	9902      	ldr	r1, [sp, #8]
    2e2c:	0252      	lsls	r2, r2, #9
    2e2e:	4019      	ands	r1, r3
    2e30:	0b12      	lsrs	r2, r2, #12
    2e32:	468c      	mov	ip, r1
    2e34:	e656      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2e36:	2b00      	cmp	r3, #0
    2e38:	d100      	bne.n	2e3c <__aeabi_ddiv+0x4f4>
    2e3a:	e76f      	b.n	2d1c <__aeabi_ddiv+0x3d4>
    2e3c:	4446      	add	r6, r8
    2e3e:	1e4a      	subs	r2, r1, #1
    2e40:	45b0      	cmp	r8, r6
    2e42:	d929      	bls.n	2e98 <__aeabi_ddiv+0x550>
    2e44:	0011      	movs	r1, r2
    2e46:	4286      	cmp	r6, r0
    2e48:	d000      	beq.n	2e4c <__aeabi_ddiv+0x504>
    2e4a:	e765      	b.n	2d18 <__aeabi_ddiv+0x3d0>
    2e4c:	9a03      	ldr	r2, [sp, #12]
    2e4e:	4293      	cmp	r3, r2
    2e50:	d000      	beq.n	2e54 <__aeabi_ddiv+0x50c>
    2e52:	e761      	b.n	2d18 <__aeabi_ddiv+0x3d0>
    2e54:	e762      	b.n	2d1c <__aeabi_ddiv+0x3d4>
    2e56:	2101      	movs	r1, #1
    2e58:	4249      	negs	r1, r1
    2e5a:	2001      	movs	r0, #1
    2e5c:	1ac2      	subs	r2, r0, r3
    2e5e:	2a38      	cmp	r2, #56	; 0x38
    2e60:	dd21      	ble.n	2ea6 <__aeabi_ddiv+0x55e>
    2e62:	9b02      	ldr	r3, [sp, #8]
    2e64:	4003      	ands	r3, r0
    2e66:	469c      	mov	ip, r3
    2e68:	e638      	b.n	2adc <__aeabi_ddiv+0x194>
    2e6a:	220f      	movs	r2, #15
    2e6c:	400a      	ands	r2, r1
    2e6e:	2a04      	cmp	r2, #4
    2e70:	d100      	bne.n	2e74 <__aeabi_ddiv+0x52c>
    2e72:	e75b      	b.n	2d2c <__aeabi_ddiv+0x3e4>
    2e74:	000a      	movs	r2, r1
    2e76:	1d11      	adds	r1, r2, #4
    2e78:	4291      	cmp	r1, r2
    2e7a:	4192      	sbcs	r2, r2
    2e7c:	4252      	negs	r2, r2
    2e7e:	4493      	add	fp, r2
    2e80:	e754      	b.n	2d2c <__aeabi_ddiv+0x3e4>
    2e82:	4b47      	ldr	r3, [pc, #284]	; (2fa0 <__aeabi_ddiv+0x658>)
    2e84:	18e3      	adds	r3, r4, r3
    2e86:	2b00      	cmp	r3, #0
    2e88:	dde5      	ble.n	2e56 <__aeabi_ddiv+0x50e>
    2e8a:	2201      	movs	r2, #1
    2e8c:	4252      	negs	r2, r2
    2e8e:	e7f2      	b.n	2e76 <__aeabi_ddiv+0x52e>
    2e90:	001d      	movs	r5, r3
    2e92:	e6fa      	b.n	2c8a <__aeabi_ddiv+0x342>
    2e94:	469a      	mov	sl, r3
    2e96:	e71c      	b.n	2cd2 <__aeabi_ddiv+0x38a>
    2e98:	42b0      	cmp	r0, r6
    2e9a:	d839      	bhi.n	2f10 <__aeabi_ddiv+0x5c8>
    2e9c:	d06e      	beq.n	2f7c <__aeabi_ddiv+0x634>
    2e9e:	0011      	movs	r1, r2
    2ea0:	e73a      	b.n	2d18 <__aeabi_ddiv+0x3d0>
    2ea2:	9302      	str	r3, [sp, #8]
    2ea4:	e73a      	b.n	2d1c <__aeabi_ddiv+0x3d4>
    2ea6:	2a1f      	cmp	r2, #31
    2ea8:	dc3c      	bgt.n	2f24 <__aeabi_ddiv+0x5dc>
    2eaa:	2320      	movs	r3, #32
    2eac:	1a9b      	subs	r3, r3, r2
    2eae:	000c      	movs	r4, r1
    2eb0:	4658      	mov	r0, fp
    2eb2:	4099      	lsls	r1, r3
    2eb4:	4098      	lsls	r0, r3
    2eb6:	1e4b      	subs	r3, r1, #1
    2eb8:	4199      	sbcs	r1, r3
    2eba:	465b      	mov	r3, fp
    2ebc:	40d4      	lsrs	r4, r2
    2ebe:	40d3      	lsrs	r3, r2
    2ec0:	4320      	orrs	r0, r4
    2ec2:	4308      	orrs	r0, r1
    2ec4:	001a      	movs	r2, r3
    2ec6:	0743      	lsls	r3, r0, #29
    2ec8:	d009      	beq.n	2ede <__aeabi_ddiv+0x596>
    2eca:	230f      	movs	r3, #15
    2ecc:	4003      	ands	r3, r0
    2ece:	2b04      	cmp	r3, #4
    2ed0:	d005      	beq.n	2ede <__aeabi_ddiv+0x596>
    2ed2:	0001      	movs	r1, r0
    2ed4:	1d08      	adds	r0, r1, #4
    2ed6:	4288      	cmp	r0, r1
    2ed8:	419b      	sbcs	r3, r3
    2eda:	425b      	negs	r3, r3
    2edc:	18d2      	adds	r2, r2, r3
    2ede:	0213      	lsls	r3, r2, #8
    2ee0:	d53a      	bpl.n	2f58 <__aeabi_ddiv+0x610>
    2ee2:	2301      	movs	r3, #1
    2ee4:	9a02      	ldr	r2, [sp, #8]
    2ee6:	2401      	movs	r4, #1
    2ee8:	401a      	ands	r2, r3
    2eea:	2300      	movs	r3, #0
    2eec:	4694      	mov	ip, r2
    2eee:	4698      	mov	r8, r3
    2ef0:	2200      	movs	r2, #0
    2ef2:	e5f7      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2ef4:	2102      	movs	r1, #2
    2ef6:	4249      	negs	r1, r1
    2ef8:	468c      	mov	ip, r1
    2efa:	9d03      	ldr	r5, [sp, #12]
    2efc:	44e3      	add	fp, ip
    2efe:	46ac      	mov	ip, r5
    2f00:	44e2      	add	sl, ip
    2f02:	45aa      	cmp	sl, r5
    2f04:	41ad      	sbcs	r5, r5
    2f06:	426d      	negs	r5, r5
    2f08:	4445      	add	r5, r8
    2f0a:	18ed      	adds	r5, r5, r3
    2f0c:	1a2d      	subs	r5, r5, r0
    2f0e:	e696      	b.n	2c3e <__aeabi_ddiv+0x2f6>
    2f10:	1e8a      	subs	r2, r1, #2
    2f12:	9903      	ldr	r1, [sp, #12]
    2f14:	004d      	lsls	r5, r1, #1
    2f16:	428d      	cmp	r5, r1
    2f18:	4189      	sbcs	r1, r1
    2f1a:	4249      	negs	r1, r1
    2f1c:	4441      	add	r1, r8
    2f1e:	1876      	adds	r6, r6, r1
    2f20:	9503      	str	r5, [sp, #12]
    2f22:	e78f      	b.n	2e44 <__aeabi_ddiv+0x4fc>
    2f24:	201f      	movs	r0, #31
    2f26:	4240      	negs	r0, r0
    2f28:	1ac3      	subs	r3, r0, r3
    2f2a:	4658      	mov	r0, fp
    2f2c:	40d8      	lsrs	r0, r3
    2f2e:	0003      	movs	r3, r0
    2f30:	2a20      	cmp	r2, #32
    2f32:	d028      	beq.n	2f86 <__aeabi_ddiv+0x63e>
    2f34:	2040      	movs	r0, #64	; 0x40
    2f36:	465d      	mov	r5, fp
    2f38:	1a82      	subs	r2, r0, r2
    2f3a:	4095      	lsls	r5, r2
    2f3c:	4329      	orrs	r1, r5
    2f3e:	1e4a      	subs	r2, r1, #1
    2f40:	4191      	sbcs	r1, r2
    2f42:	4319      	orrs	r1, r3
    2f44:	2307      	movs	r3, #7
    2f46:	2200      	movs	r2, #0
    2f48:	400b      	ands	r3, r1
    2f4a:	d009      	beq.n	2f60 <__aeabi_ddiv+0x618>
    2f4c:	230f      	movs	r3, #15
    2f4e:	2200      	movs	r2, #0
    2f50:	400b      	ands	r3, r1
    2f52:	0008      	movs	r0, r1
    2f54:	2b04      	cmp	r3, #4
    2f56:	d1bd      	bne.n	2ed4 <__aeabi_ddiv+0x58c>
    2f58:	0001      	movs	r1, r0
    2f5a:	0753      	lsls	r3, r2, #29
    2f5c:	0252      	lsls	r2, r2, #9
    2f5e:	0b12      	lsrs	r2, r2, #12
    2f60:	08c9      	lsrs	r1, r1, #3
    2f62:	4319      	orrs	r1, r3
    2f64:	2301      	movs	r3, #1
    2f66:	4688      	mov	r8, r1
    2f68:	9902      	ldr	r1, [sp, #8]
    2f6a:	2400      	movs	r4, #0
    2f6c:	4019      	ands	r1, r3
    2f6e:	468c      	mov	ip, r1
    2f70:	e5b8      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2f72:	4552      	cmp	r2, sl
    2f74:	d8be      	bhi.n	2ef4 <__aeabi_ddiv+0x5ac>
    2f76:	468b      	mov	fp, r1
    2f78:	2500      	movs	r5, #0
    2f7a:	e660      	b.n	2c3e <__aeabi_ddiv+0x2f6>
    2f7c:	9d03      	ldr	r5, [sp, #12]
    2f7e:	429d      	cmp	r5, r3
    2f80:	d3c6      	bcc.n	2f10 <__aeabi_ddiv+0x5c8>
    2f82:	0011      	movs	r1, r2
    2f84:	e762      	b.n	2e4c <__aeabi_ddiv+0x504>
    2f86:	2500      	movs	r5, #0
    2f88:	e7d8      	b.n	2f3c <__aeabi_ddiv+0x5f4>
    2f8a:	2280      	movs	r2, #128	; 0x80
    2f8c:	465b      	mov	r3, fp
    2f8e:	0312      	lsls	r2, r2, #12
    2f90:	431a      	orrs	r2, r3
    2f92:	9b01      	ldr	r3, [sp, #4]
    2f94:	0312      	lsls	r2, r2, #12
    2f96:	0b12      	lsrs	r2, r2, #12
    2f98:	469c      	mov	ip, r3
    2f9a:	4688      	mov	r8, r1
    2f9c:	4c03      	ldr	r4, [pc, #12]	; (2fac <__aeabi_ddiv+0x664>)
    2f9e:	e5a1      	b.n	2ae4 <__aeabi_ddiv+0x19c>
    2fa0:	000003ff 	.word	0x000003ff
    2fa4:	feffffff 	.word	0xfeffffff
    2fa8:	000007fe 	.word	0x000007fe
    2fac:	000007ff 	.word	0x000007ff

00002fb0 <__aeabi_dmul>:
    2fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fb2:	4657      	mov	r7, sl
    2fb4:	4645      	mov	r5, r8
    2fb6:	46de      	mov	lr, fp
    2fb8:	464e      	mov	r6, r9
    2fba:	b5e0      	push	{r5, r6, r7, lr}
    2fbc:	030c      	lsls	r4, r1, #12
    2fbe:	4698      	mov	r8, r3
    2fc0:	004e      	lsls	r6, r1, #1
    2fc2:	0b23      	lsrs	r3, r4, #12
    2fc4:	b087      	sub	sp, #28
    2fc6:	0007      	movs	r7, r0
    2fc8:	4692      	mov	sl, r2
    2fca:	469b      	mov	fp, r3
    2fcc:	0d76      	lsrs	r6, r6, #21
    2fce:	0fcd      	lsrs	r5, r1, #31
    2fd0:	2e00      	cmp	r6, #0
    2fd2:	d06b      	beq.n	30ac <__aeabi_dmul+0xfc>
    2fd4:	4b6d      	ldr	r3, [pc, #436]	; (318c <__aeabi_dmul+0x1dc>)
    2fd6:	429e      	cmp	r6, r3
    2fd8:	d035      	beq.n	3046 <__aeabi_dmul+0x96>
    2fda:	2480      	movs	r4, #128	; 0x80
    2fdc:	465b      	mov	r3, fp
    2fde:	0f42      	lsrs	r2, r0, #29
    2fe0:	0424      	lsls	r4, r4, #16
    2fe2:	00db      	lsls	r3, r3, #3
    2fe4:	4314      	orrs	r4, r2
    2fe6:	431c      	orrs	r4, r3
    2fe8:	00c3      	lsls	r3, r0, #3
    2fea:	4699      	mov	r9, r3
    2fec:	4b68      	ldr	r3, [pc, #416]	; (3190 <__aeabi_dmul+0x1e0>)
    2fee:	46a3      	mov	fp, r4
    2ff0:	469c      	mov	ip, r3
    2ff2:	2300      	movs	r3, #0
    2ff4:	2700      	movs	r7, #0
    2ff6:	4466      	add	r6, ip
    2ff8:	9302      	str	r3, [sp, #8]
    2ffa:	4643      	mov	r3, r8
    2ffc:	031c      	lsls	r4, r3, #12
    2ffe:	005a      	lsls	r2, r3, #1
    3000:	0fdb      	lsrs	r3, r3, #31
    3002:	4650      	mov	r0, sl
    3004:	0b24      	lsrs	r4, r4, #12
    3006:	0d52      	lsrs	r2, r2, #21
    3008:	4698      	mov	r8, r3
    300a:	d100      	bne.n	300e <__aeabi_dmul+0x5e>
    300c:	e076      	b.n	30fc <__aeabi_dmul+0x14c>
    300e:	4b5f      	ldr	r3, [pc, #380]	; (318c <__aeabi_dmul+0x1dc>)
    3010:	429a      	cmp	r2, r3
    3012:	d06d      	beq.n	30f0 <__aeabi_dmul+0x140>
    3014:	2380      	movs	r3, #128	; 0x80
    3016:	0f41      	lsrs	r1, r0, #29
    3018:	041b      	lsls	r3, r3, #16
    301a:	430b      	orrs	r3, r1
    301c:	495c      	ldr	r1, [pc, #368]	; (3190 <__aeabi_dmul+0x1e0>)
    301e:	00e4      	lsls	r4, r4, #3
    3020:	468c      	mov	ip, r1
    3022:	431c      	orrs	r4, r3
    3024:	00c3      	lsls	r3, r0, #3
    3026:	2000      	movs	r0, #0
    3028:	4462      	add	r2, ip
    302a:	4641      	mov	r1, r8
    302c:	18b6      	adds	r6, r6, r2
    302e:	4069      	eors	r1, r5
    3030:	1c72      	adds	r2, r6, #1
    3032:	9101      	str	r1, [sp, #4]
    3034:	4694      	mov	ip, r2
    3036:	4307      	orrs	r7, r0
    3038:	2f0f      	cmp	r7, #15
    303a:	d900      	bls.n	303e <__aeabi_dmul+0x8e>
    303c:	e0b0      	b.n	31a0 <__aeabi_dmul+0x1f0>
    303e:	4a55      	ldr	r2, [pc, #340]	; (3194 <__aeabi_dmul+0x1e4>)
    3040:	00bf      	lsls	r7, r7, #2
    3042:	59d2      	ldr	r2, [r2, r7]
    3044:	4697      	mov	pc, r2
    3046:	465b      	mov	r3, fp
    3048:	4303      	orrs	r3, r0
    304a:	4699      	mov	r9, r3
    304c:	d000      	beq.n	3050 <__aeabi_dmul+0xa0>
    304e:	e087      	b.n	3160 <__aeabi_dmul+0x1b0>
    3050:	2300      	movs	r3, #0
    3052:	469b      	mov	fp, r3
    3054:	3302      	adds	r3, #2
    3056:	2708      	movs	r7, #8
    3058:	9302      	str	r3, [sp, #8]
    305a:	e7ce      	b.n	2ffa <__aeabi_dmul+0x4a>
    305c:	4642      	mov	r2, r8
    305e:	9201      	str	r2, [sp, #4]
    3060:	2802      	cmp	r0, #2
    3062:	d067      	beq.n	3134 <__aeabi_dmul+0x184>
    3064:	2803      	cmp	r0, #3
    3066:	d100      	bne.n	306a <__aeabi_dmul+0xba>
    3068:	e20e      	b.n	3488 <__aeabi_dmul+0x4d8>
    306a:	2801      	cmp	r0, #1
    306c:	d000      	beq.n	3070 <__aeabi_dmul+0xc0>
    306e:	e162      	b.n	3336 <__aeabi_dmul+0x386>
    3070:	2300      	movs	r3, #0
    3072:	2400      	movs	r4, #0
    3074:	2200      	movs	r2, #0
    3076:	4699      	mov	r9, r3
    3078:	9901      	ldr	r1, [sp, #4]
    307a:	4001      	ands	r1, r0
    307c:	b2cd      	uxtb	r5, r1
    307e:	2100      	movs	r1, #0
    3080:	0312      	lsls	r2, r2, #12
    3082:	0d0b      	lsrs	r3, r1, #20
    3084:	0b12      	lsrs	r2, r2, #12
    3086:	051b      	lsls	r3, r3, #20
    3088:	4313      	orrs	r3, r2
    308a:	4a43      	ldr	r2, [pc, #268]	; (3198 <__aeabi_dmul+0x1e8>)
    308c:	0524      	lsls	r4, r4, #20
    308e:	4013      	ands	r3, r2
    3090:	431c      	orrs	r4, r3
    3092:	0064      	lsls	r4, r4, #1
    3094:	07ed      	lsls	r5, r5, #31
    3096:	0864      	lsrs	r4, r4, #1
    3098:	432c      	orrs	r4, r5
    309a:	4648      	mov	r0, r9
    309c:	0021      	movs	r1, r4
    309e:	b007      	add	sp, #28
    30a0:	bc3c      	pop	{r2, r3, r4, r5}
    30a2:	4690      	mov	r8, r2
    30a4:	4699      	mov	r9, r3
    30a6:	46a2      	mov	sl, r4
    30a8:	46ab      	mov	fp, r5
    30aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30ac:	4303      	orrs	r3, r0
    30ae:	4699      	mov	r9, r3
    30b0:	d04f      	beq.n	3152 <__aeabi_dmul+0x1a2>
    30b2:	465b      	mov	r3, fp
    30b4:	2b00      	cmp	r3, #0
    30b6:	d100      	bne.n	30ba <__aeabi_dmul+0x10a>
    30b8:	e189      	b.n	33ce <__aeabi_dmul+0x41e>
    30ba:	4658      	mov	r0, fp
    30bc:	f000 fd7a 	bl	3bb4 <__clzsi2>
    30c0:	0003      	movs	r3, r0
    30c2:	3b0b      	subs	r3, #11
    30c4:	2b1c      	cmp	r3, #28
    30c6:	dd00      	ble.n	30ca <__aeabi_dmul+0x11a>
    30c8:	e17a      	b.n	33c0 <__aeabi_dmul+0x410>
    30ca:	221d      	movs	r2, #29
    30cc:	1ad3      	subs	r3, r2, r3
    30ce:	003a      	movs	r2, r7
    30d0:	0001      	movs	r1, r0
    30d2:	465c      	mov	r4, fp
    30d4:	40da      	lsrs	r2, r3
    30d6:	3908      	subs	r1, #8
    30d8:	408c      	lsls	r4, r1
    30da:	0013      	movs	r3, r2
    30dc:	408f      	lsls	r7, r1
    30de:	4323      	orrs	r3, r4
    30e0:	469b      	mov	fp, r3
    30e2:	46b9      	mov	r9, r7
    30e4:	2300      	movs	r3, #0
    30e6:	4e2d      	ldr	r6, [pc, #180]	; (319c <__aeabi_dmul+0x1ec>)
    30e8:	2700      	movs	r7, #0
    30ea:	1a36      	subs	r6, r6, r0
    30ec:	9302      	str	r3, [sp, #8]
    30ee:	e784      	b.n	2ffa <__aeabi_dmul+0x4a>
    30f0:	4653      	mov	r3, sl
    30f2:	4323      	orrs	r3, r4
    30f4:	d12a      	bne.n	314c <__aeabi_dmul+0x19c>
    30f6:	2400      	movs	r4, #0
    30f8:	2002      	movs	r0, #2
    30fa:	e796      	b.n	302a <__aeabi_dmul+0x7a>
    30fc:	4653      	mov	r3, sl
    30fe:	4323      	orrs	r3, r4
    3100:	d020      	beq.n	3144 <__aeabi_dmul+0x194>
    3102:	2c00      	cmp	r4, #0
    3104:	d100      	bne.n	3108 <__aeabi_dmul+0x158>
    3106:	e157      	b.n	33b8 <__aeabi_dmul+0x408>
    3108:	0020      	movs	r0, r4
    310a:	f000 fd53 	bl	3bb4 <__clzsi2>
    310e:	0003      	movs	r3, r0
    3110:	3b0b      	subs	r3, #11
    3112:	2b1c      	cmp	r3, #28
    3114:	dd00      	ble.n	3118 <__aeabi_dmul+0x168>
    3116:	e149      	b.n	33ac <__aeabi_dmul+0x3fc>
    3118:	211d      	movs	r1, #29
    311a:	1acb      	subs	r3, r1, r3
    311c:	4651      	mov	r1, sl
    311e:	0002      	movs	r2, r0
    3120:	40d9      	lsrs	r1, r3
    3122:	4653      	mov	r3, sl
    3124:	3a08      	subs	r2, #8
    3126:	4094      	lsls	r4, r2
    3128:	4093      	lsls	r3, r2
    312a:	430c      	orrs	r4, r1
    312c:	4a1b      	ldr	r2, [pc, #108]	; (319c <__aeabi_dmul+0x1ec>)
    312e:	1a12      	subs	r2, r2, r0
    3130:	2000      	movs	r0, #0
    3132:	e77a      	b.n	302a <__aeabi_dmul+0x7a>
    3134:	2501      	movs	r5, #1
    3136:	9b01      	ldr	r3, [sp, #4]
    3138:	4c14      	ldr	r4, [pc, #80]	; (318c <__aeabi_dmul+0x1dc>)
    313a:	401d      	ands	r5, r3
    313c:	2300      	movs	r3, #0
    313e:	2200      	movs	r2, #0
    3140:	4699      	mov	r9, r3
    3142:	e79c      	b.n	307e <__aeabi_dmul+0xce>
    3144:	2400      	movs	r4, #0
    3146:	2200      	movs	r2, #0
    3148:	2001      	movs	r0, #1
    314a:	e76e      	b.n	302a <__aeabi_dmul+0x7a>
    314c:	4653      	mov	r3, sl
    314e:	2003      	movs	r0, #3
    3150:	e76b      	b.n	302a <__aeabi_dmul+0x7a>
    3152:	2300      	movs	r3, #0
    3154:	469b      	mov	fp, r3
    3156:	3301      	adds	r3, #1
    3158:	2704      	movs	r7, #4
    315a:	2600      	movs	r6, #0
    315c:	9302      	str	r3, [sp, #8]
    315e:	e74c      	b.n	2ffa <__aeabi_dmul+0x4a>
    3160:	2303      	movs	r3, #3
    3162:	4681      	mov	r9, r0
    3164:	270c      	movs	r7, #12
    3166:	9302      	str	r3, [sp, #8]
    3168:	e747      	b.n	2ffa <__aeabi_dmul+0x4a>
    316a:	2280      	movs	r2, #128	; 0x80
    316c:	2300      	movs	r3, #0
    316e:	2500      	movs	r5, #0
    3170:	0312      	lsls	r2, r2, #12
    3172:	4699      	mov	r9, r3
    3174:	4c05      	ldr	r4, [pc, #20]	; (318c <__aeabi_dmul+0x1dc>)
    3176:	e782      	b.n	307e <__aeabi_dmul+0xce>
    3178:	465c      	mov	r4, fp
    317a:	464b      	mov	r3, r9
    317c:	9802      	ldr	r0, [sp, #8]
    317e:	e76f      	b.n	3060 <__aeabi_dmul+0xb0>
    3180:	465c      	mov	r4, fp
    3182:	464b      	mov	r3, r9
    3184:	9501      	str	r5, [sp, #4]
    3186:	9802      	ldr	r0, [sp, #8]
    3188:	e76a      	b.n	3060 <__aeabi_dmul+0xb0>
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	000007ff 	.word	0x000007ff
    3190:	fffffc01 	.word	0xfffffc01
    3194:	00004ce0 	.word	0x00004ce0
    3198:	800fffff 	.word	0x800fffff
    319c:	fffffc0d 	.word	0xfffffc0d
    31a0:	464a      	mov	r2, r9
    31a2:	4649      	mov	r1, r9
    31a4:	0c17      	lsrs	r7, r2, #16
    31a6:	0c1a      	lsrs	r2, r3, #16
    31a8:	041b      	lsls	r3, r3, #16
    31aa:	0c1b      	lsrs	r3, r3, #16
    31ac:	0408      	lsls	r0, r1, #16
    31ae:	0019      	movs	r1, r3
    31b0:	0c00      	lsrs	r0, r0, #16
    31b2:	4341      	muls	r1, r0
    31b4:	0015      	movs	r5, r2
    31b6:	4688      	mov	r8, r1
    31b8:	0019      	movs	r1, r3
    31ba:	437d      	muls	r5, r7
    31bc:	4379      	muls	r1, r7
    31be:	9503      	str	r5, [sp, #12]
    31c0:	4689      	mov	r9, r1
    31c2:	0029      	movs	r1, r5
    31c4:	0015      	movs	r5, r2
    31c6:	4345      	muls	r5, r0
    31c8:	444d      	add	r5, r9
    31ca:	9502      	str	r5, [sp, #8]
    31cc:	4645      	mov	r5, r8
    31ce:	0c2d      	lsrs	r5, r5, #16
    31d0:	46aa      	mov	sl, r5
    31d2:	9d02      	ldr	r5, [sp, #8]
    31d4:	4455      	add	r5, sl
    31d6:	45a9      	cmp	r9, r5
    31d8:	d906      	bls.n	31e8 <__aeabi_dmul+0x238>
    31da:	468a      	mov	sl, r1
    31dc:	2180      	movs	r1, #128	; 0x80
    31de:	0249      	lsls	r1, r1, #9
    31e0:	4689      	mov	r9, r1
    31e2:	44ca      	add	sl, r9
    31e4:	4651      	mov	r1, sl
    31e6:	9103      	str	r1, [sp, #12]
    31e8:	0c29      	lsrs	r1, r5, #16
    31ea:	9104      	str	r1, [sp, #16]
    31ec:	4641      	mov	r1, r8
    31ee:	0409      	lsls	r1, r1, #16
    31f0:	042d      	lsls	r5, r5, #16
    31f2:	0c09      	lsrs	r1, r1, #16
    31f4:	4688      	mov	r8, r1
    31f6:	0029      	movs	r1, r5
    31f8:	0c25      	lsrs	r5, r4, #16
    31fa:	0424      	lsls	r4, r4, #16
    31fc:	4441      	add	r1, r8
    31fe:	0c24      	lsrs	r4, r4, #16
    3200:	9105      	str	r1, [sp, #20]
    3202:	0021      	movs	r1, r4
    3204:	4341      	muls	r1, r0
    3206:	4688      	mov	r8, r1
    3208:	0021      	movs	r1, r4
    320a:	4379      	muls	r1, r7
    320c:	468a      	mov	sl, r1
    320e:	4368      	muls	r0, r5
    3210:	4641      	mov	r1, r8
    3212:	4450      	add	r0, sl
    3214:	4681      	mov	r9, r0
    3216:	0c08      	lsrs	r0, r1, #16
    3218:	4448      	add	r0, r9
    321a:	436f      	muls	r7, r5
    321c:	4582      	cmp	sl, r0
    321e:	d903      	bls.n	3228 <__aeabi_dmul+0x278>
    3220:	2180      	movs	r1, #128	; 0x80
    3222:	0249      	lsls	r1, r1, #9
    3224:	4689      	mov	r9, r1
    3226:	444f      	add	r7, r9
    3228:	0c01      	lsrs	r1, r0, #16
    322a:	4689      	mov	r9, r1
    322c:	0039      	movs	r1, r7
    322e:	4449      	add	r1, r9
    3230:	9102      	str	r1, [sp, #8]
    3232:	4641      	mov	r1, r8
    3234:	040f      	lsls	r7, r1, #16
    3236:	9904      	ldr	r1, [sp, #16]
    3238:	0c3f      	lsrs	r7, r7, #16
    323a:	4688      	mov	r8, r1
    323c:	0400      	lsls	r0, r0, #16
    323e:	19c0      	adds	r0, r0, r7
    3240:	4480      	add	r8, r0
    3242:	4641      	mov	r1, r8
    3244:	9104      	str	r1, [sp, #16]
    3246:	4659      	mov	r1, fp
    3248:	0c0f      	lsrs	r7, r1, #16
    324a:	0409      	lsls	r1, r1, #16
    324c:	0c09      	lsrs	r1, r1, #16
    324e:	4688      	mov	r8, r1
    3250:	4359      	muls	r1, r3
    3252:	468a      	mov	sl, r1
    3254:	0039      	movs	r1, r7
    3256:	4351      	muls	r1, r2
    3258:	4689      	mov	r9, r1
    325a:	4641      	mov	r1, r8
    325c:	434a      	muls	r2, r1
    325e:	4651      	mov	r1, sl
    3260:	0c09      	lsrs	r1, r1, #16
    3262:	468b      	mov	fp, r1
    3264:	437b      	muls	r3, r7
    3266:	18d2      	adds	r2, r2, r3
    3268:	445a      	add	r2, fp
    326a:	4293      	cmp	r3, r2
    326c:	d903      	bls.n	3276 <__aeabi_dmul+0x2c6>
    326e:	2380      	movs	r3, #128	; 0x80
    3270:	025b      	lsls	r3, r3, #9
    3272:	469b      	mov	fp, r3
    3274:	44d9      	add	r9, fp
    3276:	4651      	mov	r1, sl
    3278:	0409      	lsls	r1, r1, #16
    327a:	0c09      	lsrs	r1, r1, #16
    327c:	468a      	mov	sl, r1
    327e:	4641      	mov	r1, r8
    3280:	4361      	muls	r1, r4
    3282:	437c      	muls	r4, r7
    3284:	0c13      	lsrs	r3, r2, #16
    3286:	0412      	lsls	r2, r2, #16
    3288:	444b      	add	r3, r9
    328a:	4452      	add	r2, sl
    328c:	46a1      	mov	r9, r4
    328e:	468a      	mov	sl, r1
    3290:	003c      	movs	r4, r7
    3292:	4641      	mov	r1, r8
    3294:	436c      	muls	r4, r5
    3296:	434d      	muls	r5, r1
    3298:	4651      	mov	r1, sl
    329a:	444d      	add	r5, r9
    329c:	0c0f      	lsrs	r7, r1, #16
    329e:	197d      	adds	r5, r7, r5
    32a0:	45a9      	cmp	r9, r5
    32a2:	d903      	bls.n	32ac <__aeabi_dmul+0x2fc>
    32a4:	2180      	movs	r1, #128	; 0x80
    32a6:	0249      	lsls	r1, r1, #9
    32a8:	4688      	mov	r8, r1
    32aa:	4444      	add	r4, r8
    32ac:	9f04      	ldr	r7, [sp, #16]
    32ae:	9903      	ldr	r1, [sp, #12]
    32b0:	46b8      	mov	r8, r7
    32b2:	4441      	add	r1, r8
    32b4:	468b      	mov	fp, r1
    32b6:	4583      	cmp	fp, r0
    32b8:	4180      	sbcs	r0, r0
    32ba:	4241      	negs	r1, r0
    32bc:	4688      	mov	r8, r1
    32be:	4651      	mov	r1, sl
    32c0:	0408      	lsls	r0, r1, #16
    32c2:	042f      	lsls	r7, r5, #16
    32c4:	0c00      	lsrs	r0, r0, #16
    32c6:	183f      	adds	r7, r7, r0
    32c8:	4658      	mov	r0, fp
    32ca:	9902      	ldr	r1, [sp, #8]
    32cc:	1810      	adds	r0, r2, r0
    32ce:	4689      	mov	r9, r1
    32d0:	4290      	cmp	r0, r2
    32d2:	4192      	sbcs	r2, r2
    32d4:	444f      	add	r7, r9
    32d6:	46ba      	mov	sl, r7
    32d8:	4252      	negs	r2, r2
    32da:	4699      	mov	r9, r3
    32dc:	4693      	mov	fp, r2
    32de:	44c2      	add	sl, r8
    32e0:	44d1      	add	r9, sl
    32e2:	44cb      	add	fp, r9
    32e4:	428f      	cmp	r7, r1
    32e6:	41bf      	sbcs	r7, r7
    32e8:	45c2      	cmp	sl, r8
    32ea:	4189      	sbcs	r1, r1
    32ec:	4599      	cmp	r9, r3
    32ee:	419b      	sbcs	r3, r3
    32f0:	4593      	cmp	fp, r2
    32f2:	4192      	sbcs	r2, r2
    32f4:	427f      	negs	r7, r7
    32f6:	4249      	negs	r1, r1
    32f8:	0c2d      	lsrs	r5, r5, #16
    32fa:	4252      	negs	r2, r2
    32fc:	430f      	orrs	r7, r1
    32fe:	425b      	negs	r3, r3
    3300:	4313      	orrs	r3, r2
    3302:	197f      	adds	r7, r7, r5
    3304:	18ff      	adds	r7, r7, r3
    3306:	465b      	mov	r3, fp
    3308:	193c      	adds	r4, r7, r4
    330a:	0ddb      	lsrs	r3, r3, #23
    330c:	9a05      	ldr	r2, [sp, #20]
    330e:	0264      	lsls	r4, r4, #9
    3310:	431c      	orrs	r4, r3
    3312:	0243      	lsls	r3, r0, #9
    3314:	4313      	orrs	r3, r2
    3316:	1e5d      	subs	r5, r3, #1
    3318:	41ab      	sbcs	r3, r5
    331a:	465a      	mov	r2, fp
    331c:	0dc0      	lsrs	r0, r0, #23
    331e:	4303      	orrs	r3, r0
    3320:	0252      	lsls	r2, r2, #9
    3322:	4313      	orrs	r3, r2
    3324:	01e2      	lsls	r2, r4, #7
    3326:	d556      	bpl.n	33d6 <__aeabi_dmul+0x426>
    3328:	2001      	movs	r0, #1
    332a:	085a      	lsrs	r2, r3, #1
    332c:	4003      	ands	r3, r0
    332e:	4313      	orrs	r3, r2
    3330:	07e2      	lsls	r2, r4, #31
    3332:	4313      	orrs	r3, r2
    3334:	0864      	lsrs	r4, r4, #1
    3336:	485a      	ldr	r0, [pc, #360]	; (34a0 <__aeabi_dmul+0x4f0>)
    3338:	4460      	add	r0, ip
    333a:	2800      	cmp	r0, #0
    333c:	dd4d      	ble.n	33da <__aeabi_dmul+0x42a>
    333e:	075a      	lsls	r2, r3, #29
    3340:	d009      	beq.n	3356 <__aeabi_dmul+0x3a6>
    3342:	220f      	movs	r2, #15
    3344:	401a      	ands	r2, r3
    3346:	2a04      	cmp	r2, #4
    3348:	d005      	beq.n	3356 <__aeabi_dmul+0x3a6>
    334a:	1d1a      	adds	r2, r3, #4
    334c:	429a      	cmp	r2, r3
    334e:	419b      	sbcs	r3, r3
    3350:	425b      	negs	r3, r3
    3352:	18e4      	adds	r4, r4, r3
    3354:	0013      	movs	r3, r2
    3356:	01e2      	lsls	r2, r4, #7
    3358:	d504      	bpl.n	3364 <__aeabi_dmul+0x3b4>
    335a:	2080      	movs	r0, #128	; 0x80
    335c:	4a51      	ldr	r2, [pc, #324]	; (34a4 <__aeabi_dmul+0x4f4>)
    335e:	00c0      	lsls	r0, r0, #3
    3360:	4014      	ands	r4, r2
    3362:	4460      	add	r0, ip
    3364:	4a50      	ldr	r2, [pc, #320]	; (34a8 <__aeabi_dmul+0x4f8>)
    3366:	4290      	cmp	r0, r2
    3368:	dd00      	ble.n	336c <__aeabi_dmul+0x3bc>
    336a:	e6e3      	b.n	3134 <__aeabi_dmul+0x184>
    336c:	2501      	movs	r5, #1
    336e:	08db      	lsrs	r3, r3, #3
    3370:	0762      	lsls	r2, r4, #29
    3372:	431a      	orrs	r2, r3
    3374:	0264      	lsls	r4, r4, #9
    3376:	9b01      	ldr	r3, [sp, #4]
    3378:	4691      	mov	r9, r2
    337a:	0b22      	lsrs	r2, r4, #12
    337c:	0544      	lsls	r4, r0, #21
    337e:	0d64      	lsrs	r4, r4, #21
    3380:	401d      	ands	r5, r3
    3382:	e67c      	b.n	307e <__aeabi_dmul+0xce>
    3384:	2280      	movs	r2, #128	; 0x80
    3386:	4659      	mov	r1, fp
    3388:	0312      	lsls	r2, r2, #12
    338a:	4211      	tst	r1, r2
    338c:	d008      	beq.n	33a0 <__aeabi_dmul+0x3f0>
    338e:	4214      	tst	r4, r2
    3390:	d106      	bne.n	33a0 <__aeabi_dmul+0x3f0>
    3392:	4322      	orrs	r2, r4
    3394:	0312      	lsls	r2, r2, #12
    3396:	0b12      	lsrs	r2, r2, #12
    3398:	4645      	mov	r5, r8
    339a:	4699      	mov	r9, r3
    339c:	4c43      	ldr	r4, [pc, #268]	; (34ac <__aeabi_dmul+0x4fc>)
    339e:	e66e      	b.n	307e <__aeabi_dmul+0xce>
    33a0:	465b      	mov	r3, fp
    33a2:	431a      	orrs	r2, r3
    33a4:	0312      	lsls	r2, r2, #12
    33a6:	0b12      	lsrs	r2, r2, #12
    33a8:	4c40      	ldr	r4, [pc, #256]	; (34ac <__aeabi_dmul+0x4fc>)
    33aa:	e668      	b.n	307e <__aeabi_dmul+0xce>
    33ac:	0003      	movs	r3, r0
    33ae:	4654      	mov	r4, sl
    33b0:	3b28      	subs	r3, #40	; 0x28
    33b2:	409c      	lsls	r4, r3
    33b4:	2300      	movs	r3, #0
    33b6:	e6b9      	b.n	312c <__aeabi_dmul+0x17c>
    33b8:	f000 fbfc 	bl	3bb4 <__clzsi2>
    33bc:	3020      	adds	r0, #32
    33be:	e6a6      	b.n	310e <__aeabi_dmul+0x15e>
    33c0:	0003      	movs	r3, r0
    33c2:	3b28      	subs	r3, #40	; 0x28
    33c4:	409f      	lsls	r7, r3
    33c6:	2300      	movs	r3, #0
    33c8:	46bb      	mov	fp, r7
    33ca:	4699      	mov	r9, r3
    33cc:	e68a      	b.n	30e4 <__aeabi_dmul+0x134>
    33ce:	f000 fbf1 	bl	3bb4 <__clzsi2>
    33d2:	3020      	adds	r0, #32
    33d4:	e674      	b.n	30c0 <__aeabi_dmul+0x110>
    33d6:	46b4      	mov	ip, r6
    33d8:	e7ad      	b.n	3336 <__aeabi_dmul+0x386>
    33da:	2501      	movs	r5, #1
    33dc:	1a2a      	subs	r2, r5, r0
    33de:	2a38      	cmp	r2, #56	; 0x38
    33e0:	dd06      	ble.n	33f0 <__aeabi_dmul+0x440>
    33e2:	9b01      	ldr	r3, [sp, #4]
    33e4:	2400      	movs	r4, #0
    33e6:	401d      	ands	r5, r3
    33e8:	2300      	movs	r3, #0
    33ea:	2200      	movs	r2, #0
    33ec:	4699      	mov	r9, r3
    33ee:	e646      	b.n	307e <__aeabi_dmul+0xce>
    33f0:	2a1f      	cmp	r2, #31
    33f2:	dc21      	bgt.n	3438 <__aeabi_dmul+0x488>
    33f4:	2520      	movs	r5, #32
    33f6:	0020      	movs	r0, r4
    33f8:	1aad      	subs	r5, r5, r2
    33fa:	001e      	movs	r6, r3
    33fc:	40ab      	lsls	r3, r5
    33fe:	40a8      	lsls	r0, r5
    3400:	40d6      	lsrs	r6, r2
    3402:	1e5d      	subs	r5, r3, #1
    3404:	41ab      	sbcs	r3, r5
    3406:	4330      	orrs	r0, r6
    3408:	4318      	orrs	r0, r3
    340a:	40d4      	lsrs	r4, r2
    340c:	0743      	lsls	r3, r0, #29
    340e:	d009      	beq.n	3424 <__aeabi_dmul+0x474>
    3410:	230f      	movs	r3, #15
    3412:	4003      	ands	r3, r0
    3414:	2b04      	cmp	r3, #4
    3416:	d005      	beq.n	3424 <__aeabi_dmul+0x474>
    3418:	0003      	movs	r3, r0
    341a:	1d18      	adds	r0, r3, #4
    341c:	4298      	cmp	r0, r3
    341e:	419b      	sbcs	r3, r3
    3420:	425b      	negs	r3, r3
    3422:	18e4      	adds	r4, r4, r3
    3424:	0223      	lsls	r3, r4, #8
    3426:	d521      	bpl.n	346c <__aeabi_dmul+0x4bc>
    3428:	2501      	movs	r5, #1
    342a:	9b01      	ldr	r3, [sp, #4]
    342c:	2401      	movs	r4, #1
    342e:	401d      	ands	r5, r3
    3430:	2300      	movs	r3, #0
    3432:	2200      	movs	r2, #0
    3434:	4699      	mov	r9, r3
    3436:	e622      	b.n	307e <__aeabi_dmul+0xce>
    3438:	251f      	movs	r5, #31
    343a:	0021      	movs	r1, r4
    343c:	426d      	negs	r5, r5
    343e:	1a28      	subs	r0, r5, r0
    3440:	40c1      	lsrs	r1, r0
    3442:	0008      	movs	r0, r1
    3444:	2a20      	cmp	r2, #32
    3446:	d01d      	beq.n	3484 <__aeabi_dmul+0x4d4>
    3448:	355f      	adds	r5, #95	; 0x5f
    344a:	1aaa      	subs	r2, r5, r2
    344c:	4094      	lsls	r4, r2
    344e:	4323      	orrs	r3, r4
    3450:	1e5c      	subs	r4, r3, #1
    3452:	41a3      	sbcs	r3, r4
    3454:	2507      	movs	r5, #7
    3456:	4303      	orrs	r3, r0
    3458:	401d      	ands	r5, r3
    345a:	2200      	movs	r2, #0
    345c:	2d00      	cmp	r5, #0
    345e:	d009      	beq.n	3474 <__aeabi_dmul+0x4c4>
    3460:	220f      	movs	r2, #15
    3462:	2400      	movs	r4, #0
    3464:	401a      	ands	r2, r3
    3466:	0018      	movs	r0, r3
    3468:	2a04      	cmp	r2, #4
    346a:	d1d6      	bne.n	341a <__aeabi_dmul+0x46a>
    346c:	0003      	movs	r3, r0
    346e:	0765      	lsls	r5, r4, #29
    3470:	0264      	lsls	r4, r4, #9
    3472:	0b22      	lsrs	r2, r4, #12
    3474:	08db      	lsrs	r3, r3, #3
    3476:	432b      	orrs	r3, r5
    3478:	2501      	movs	r5, #1
    347a:	4699      	mov	r9, r3
    347c:	9b01      	ldr	r3, [sp, #4]
    347e:	2400      	movs	r4, #0
    3480:	401d      	ands	r5, r3
    3482:	e5fc      	b.n	307e <__aeabi_dmul+0xce>
    3484:	2400      	movs	r4, #0
    3486:	e7e2      	b.n	344e <__aeabi_dmul+0x49e>
    3488:	2280      	movs	r2, #128	; 0x80
    348a:	2501      	movs	r5, #1
    348c:	0312      	lsls	r2, r2, #12
    348e:	4322      	orrs	r2, r4
    3490:	9901      	ldr	r1, [sp, #4]
    3492:	0312      	lsls	r2, r2, #12
    3494:	0b12      	lsrs	r2, r2, #12
    3496:	400d      	ands	r5, r1
    3498:	4699      	mov	r9, r3
    349a:	4c04      	ldr	r4, [pc, #16]	; (34ac <__aeabi_dmul+0x4fc>)
    349c:	e5ef      	b.n	307e <__aeabi_dmul+0xce>
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	000003ff 	.word	0x000003ff
    34a4:	feffffff 	.word	0xfeffffff
    34a8:	000007fe 	.word	0x000007fe
    34ac:	000007ff 	.word	0x000007ff

000034b0 <__aeabi_dsub>:
    34b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34b2:	4646      	mov	r6, r8
    34b4:	46d6      	mov	lr, sl
    34b6:	464f      	mov	r7, r9
    34b8:	030c      	lsls	r4, r1, #12
    34ba:	b5c0      	push	{r6, r7, lr}
    34bc:	0fcd      	lsrs	r5, r1, #31
    34be:	004e      	lsls	r6, r1, #1
    34c0:	0a61      	lsrs	r1, r4, #9
    34c2:	0f44      	lsrs	r4, r0, #29
    34c4:	430c      	orrs	r4, r1
    34c6:	00c1      	lsls	r1, r0, #3
    34c8:	0058      	lsls	r0, r3, #1
    34ca:	0d40      	lsrs	r0, r0, #21
    34cc:	4684      	mov	ip, r0
    34ce:	468a      	mov	sl, r1
    34d0:	000f      	movs	r7, r1
    34d2:	0319      	lsls	r1, r3, #12
    34d4:	0f50      	lsrs	r0, r2, #29
    34d6:	0a49      	lsrs	r1, r1, #9
    34d8:	4301      	orrs	r1, r0
    34da:	48c6      	ldr	r0, [pc, #792]	; (37f4 <__aeabi_dsub+0x344>)
    34dc:	0d76      	lsrs	r6, r6, #21
    34de:	46a8      	mov	r8, r5
    34e0:	0fdb      	lsrs	r3, r3, #31
    34e2:	00d2      	lsls	r2, r2, #3
    34e4:	4584      	cmp	ip, r0
    34e6:	d100      	bne.n	34ea <__aeabi_dsub+0x3a>
    34e8:	e0d8      	b.n	369c <__aeabi_dsub+0x1ec>
    34ea:	2001      	movs	r0, #1
    34ec:	4043      	eors	r3, r0
    34ee:	42ab      	cmp	r3, r5
    34f0:	d100      	bne.n	34f4 <__aeabi_dsub+0x44>
    34f2:	e0a6      	b.n	3642 <__aeabi_dsub+0x192>
    34f4:	4660      	mov	r0, ip
    34f6:	1a35      	subs	r5, r6, r0
    34f8:	2d00      	cmp	r5, #0
    34fa:	dc00      	bgt.n	34fe <__aeabi_dsub+0x4e>
    34fc:	e105      	b.n	370a <__aeabi_dsub+0x25a>
    34fe:	2800      	cmp	r0, #0
    3500:	d110      	bne.n	3524 <__aeabi_dsub+0x74>
    3502:	000b      	movs	r3, r1
    3504:	4313      	orrs	r3, r2
    3506:	d100      	bne.n	350a <__aeabi_dsub+0x5a>
    3508:	e0d7      	b.n	36ba <__aeabi_dsub+0x20a>
    350a:	1e6b      	subs	r3, r5, #1
    350c:	2b00      	cmp	r3, #0
    350e:	d000      	beq.n	3512 <__aeabi_dsub+0x62>
    3510:	e14b      	b.n	37aa <__aeabi_dsub+0x2fa>
    3512:	4653      	mov	r3, sl
    3514:	1a9f      	subs	r7, r3, r2
    3516:	45ba      	cmp	sl, r7
    3518:	4180      	sbcs	r0, r0
    351a:	1a64      	subs	r4, r4, r1
    351c:	4240      	negs	r0, r0
    351e:	1a24      	subs	r4, r4, r0
    3520:	2601      	movs	r6, #1
    3522:	e01e      	b.n	3562 <__aeabi_dsub+0xb2>
    3524:	4bb3      	ldr	r3, [pc, #716]	; (37f4 <__aeabi_dsub+0x344>)
    3526:	429e      	cmp	r6, r3
    3528:	d048      	beq.n	35bc <__aeabi_dsub+0x10c>
    352a:	2380      	movs	r3, #128	; 0x80
    352c:	041b      	lsls	r3, r3, #16
    352e:	4319      	orrs	r1, r3
    3530:	2d38      	cmp	r5, #56	; 0x38
    3532:	dd00      	ble.n	3536 <__aeabi_dsub+0x86>
    3534:	e119      	b.n	376a <__aeabi_dsub+0x2ba>
    3536:	2d1f      	cmp	r5, #31
    3538:	dd00      	ble.n	353c <__aeabi_dsub+0x8c>
    353a:	e14c      	b.n	37d6 <__aeabi_dsub+0x326>
    353c:	2320      	movs	r3, #32
    353e:	000f      	movs	r7, r1
    3540:	1b5b      	subs	r3, r3, r5
    3542:	0010      	movs	r0, r2
    3544:	409a      	lsls	r2, r3
    3546:	409f      	lsls	r7, r3
    3548:	40e8      	lsrs	r0, r5
    354a:	1e53      	subs	r3, r2, #1
    354c:	419a      	sbcs	r2, r3
    354e:	40e9      	lsrs	r1, r5
    3550:	4307      	orrs	r7, r0
    3552:	4317      	orrs	r7, r2
    3554:	4653      	mov	r3, sl
    3556:	1bdf      	subs	r7, r3, r7
    3558:	1a61      	subs	r1, r4, r1
    355a:	45ba      	cmp	sl, r7
    355c:	41a4      	sbcs	r4, r4
    355e:	4264      	negs	r4, r4
    3560:	1b0c      	subs	r4, r1, r4
    3562:	0223      	lsls	r3, r4, #8
    3564:	d400      	bmi.n	3568 <__aeabi_dsub+0xb8>
    3566:	e0c5      	b.n	36f4 <__aeabi_dsub+0x244>
    3568:	0264      	lsls	r4, r4, #9
    356a:	0a65      	lsrs	r5, r4, #9
    356c:	2d00      	cmp	r5, #0
    356e:	d100      	bne.n	3572 <__aeabi_dsub+0xc2>
    3570:	e0f6      	b.n	3760 <__aeabi_dsub+0x2b0>
    3572:	0028      	movs	r0, r5
    3574:	f000 fb1e 	bl	3bb4 <__clzsi2>
    3578:	0003      	movs	r3, r0
    357a:	3b08      	subs	r3, #8
    357c:	2b1f      	cmp	r3, #31
    357e:	dd00      	ble.n	3582 <__aeabi_dsub+0xd2>
    3580:	e0e9      	b.n	3756 <__aeabi_dsub+0x2a6>
    3582:	2220      	movs	r2, #32
    3584:	003c      	movs	r4, r7
    3586:	1ad2      	subs	r2, r2, r3
    3588:	409d      	lsls	r5, r3
    358a:	40d4      	lsrs	r4, r2
    358c:	409f      	lsls	r7, r3
    358e:	4325      	orrs	r5, r4
    3590:	429e      	cmp	r6, r3
    3592:	dd00      	ble.n	3596 <__aeabi_dsub+0xe6>
    3594:	e0db      	b.n	374e <__aeabi_dsub+0x29e>
    3596:	1b9e      	subs	r6, r3, r6
    3598:	1c73      	adds	r3, r6, #1
    359a:	2b1f      	cmp	r3, #31
    359c:	dd00      	ble.n	35a0 <__aeabi_dsub+0xf0>
    359e:	e10a      	b.n	37b6 <__aeabi_dsub+0x306>
    35a0:	2220      	movs	r2, #32
    35a2:	0038      	movs	r0, r7
    35a4:	1ad2      	subs	r2, r2, r3
    35a6:	0029      	movs	r1, r5
    35a8:	4097      	lsls	r7, r2
    35aa:	002c      	movs	r4, r5
    35ac:	4091      	lsls	r1, r2
    35ae:	40d8      	lsrs	r0, r3
    35b0:	1e7a      	subs	r2, r7, #1
    35b2:	4197      	sbcs	r7, r2
    35b4:	40dc      	lsrs	r4, r3
    35b6:	2600      	movs	r6, #0
    35b8:	4301      	orrs	r1, r0
    35ba:	430f      	orrs	r7, r1
    35bc:	077b      	lsls	r3, r7, #29
    35be:	d009      	beq.n	35d4 <__aeabi_dsub+0x124>
    35c0:	230f      	movs	r3, #15
    35c2:	403b      	ands	r3, r7
    35c4:	2b04      	cmp	r3, #4
    35c6:	d005      	beq.n	35d4 <__aeabi_dsub+0x124>
    35c8:	1d3b      	adds	r3, r7, #4
    35ca:	42bb      	cmp	r3, r7
    35cc:	41bf      	sbcs	r7, r7
    35ce:	427f      	negs	r7, r7
    35d0:	19e4      	adds	r4, r4, r7
    35d2:	001f      	movs	r7, r3
    35d4:	0223      	lsls	r3, r4, #8
    35d6:	d525      	bpl.n	3624 <__aeabi_dsub+0x174>
    35d8:	4b86      	ldr	r3, [pc, #536]	; (37f4 <__aeabi_dsub+0x344>)
    35da:	3601      	adds	r6, #1
    35dc:	429e      	cmp	r6, r3
    35de:	d100      	bne.n	35e2 <__aeabi_dsub+0x132>
    35e0:	e0af      	b.n	3742 <__aeabi_dsub+0x292>
    35e2:	4b85      	ldr	r3, [pc, #532]	; (37f8 <__aeabi_dsub+0x348>)
    35e4:	2501      	movs	r5, #1
    35e6:	401c      	ands	r4, r3
    35e8:	4643      	mov	r3, r8
    35ea:	0762      	lsls	r2, r4, #29
    35ec:	08ff      	lsrs	r7, r7, #3
    35ee:	0264      	lsls	r4, r4, #9
    35f0:	0576      	lsls	r6, r6, #21
    35f2:	4317      	orrs	r7, r2
    35f4:	0b24      	lsrs	r4, r4, #12
    35f6:	0d76      	lsrs	r6, r6, #21
    35f8:	401d      	ands	r5, r3
    35fa:	2100      	movs	r1, #0
    35fc:	0324      	lsls	r4, r4, #12
    35fe:	0b23      	lsrs	r3, r4, #12
    3600:	0d0c      	lsrs	r4, r1, #20
    3602:	4a7e      	ldr	r2, [pc, #504]	; (37fc <__aeabi_dsub+0x34c>)
    3604:	0524      	lsls	r4, r4, #20
    3606:	431c      	orrs	r4, r3
    3608:	4014      	ands	r4, r2
    360a:	0533      	lsls	r3, r6, #20
    360c:	4323      	orrs	r3, r4
    360e:	005b      	lsls	r3, r3, #1
    3610:	07ed      	lsls	r5, r5, #31
    3612:	085b      	lsrs	r3, r3, #1
    3614:	432b      	orrs	r3, r5
    3616:	0038      	movs	r0, r7
    3618:	0019      	movs	r1, r3
    361a:	bc1c      	pop	{r2, r3, r4}
    361c:	4690      	mov	r8, r2
    361e:	4699      	mov	r9, r3
    3620:	46a2      	mov	sl, r4
    3622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3624:	2501      	movs	r5, #1
    3626:	4643      	mov	r3, r8
    3628:	0762      	lsls	r2, r4, #29
    362a:	08ff      	lsrs	r7, r7, #3
    362c:	4317      	orrs	r7, r2
    362e:	08e4      	lsrs	r4, r4, #3
    3630:	401d      	ands	r5, r3
    3632:	4b70      	ldr	r3, [pc, #448]	; (37f4 <__aeabi_dsub+0x344>)
    3634:	429e      	cmp	r6, r3
    3636:	d036      	beq.n	36a6 <__aeabi_dsub+0x1f6>
    3638:	0324      	lsls	r4, r4, #12
    363a:	0576      	lsls	r6, r6, #21
    363c:	0b24      	lsrs	r4, r4, #12
    363e:	0d76      	lsrs	r6, r6, #21
    3640:	e7db      	b.n	35fa <__aeabi_dsub+0x14a>
    3642:	4663      	mov	r3, ip
    3644:	1af3      	subs	r3, r6, r3
    3646:	2b00      	cmp	r3, #0
    3648:	dc00      	bgt.n	364c <__aeabi_dsub+0x19c>
    364a:	e094      	b.n	3776 <__aeabi_dsub+0x2c6>
    364c:	4660      	mov	r0, ip
    364e:	2800      	cmp	r0, #0
    3650:	d035      	beq.n	36be <__aeabi_dsub+0x20e>
    3652:	4868      	ldr	r0, [pc, #416]	; (37f4 <__aeabi_dsub+0x344>)
    3654:	4286      	cmp	r6, r0
    3656:	d0b1      	beq.n	35bc <__aeabi_dsub+0x10c>
    3658:	2780      	movs	r7, #128	; 0x80
    365a:	043f      	lsls	r7, r7, #16
    365c:	4339      	orrs	r1, r7
    365e:	2b38      	cmp	r3, #56	; 0x38
    3660:	dc00      	bgt.n	3664 <__aeabi_dsub+0x1b4>
    3662:	e0fd      	b.n	3860 <__aeabi_dsub+0x3b0>
    3664:	430a      	orrs	r2, r1
    3666:	0017      	movs	r7, r2
    3668:	2100      	movs	r1, #0
    366a:	1e7a      	subs	r2, r7, #1
    366c:	4197      	sbcs	r7, r2
    366e:	4457      	add	r7, sl
    3670:	4557      	cmp	r7, sl
    3672:	4180      	sbcs	r0, r0
    3674:	1909      	adds	r1, r1, r4
    3676:	4244      	negs	r4, r0
    3678:	190c      	adds	r4, r1, r4
    367a:	0223      	lsls	r3, r4, #8
    367c:	d53a      	bpl.n	36f4 <__aeabi_dsub+0x244>
    367e:	4b5d      	ldr	r3, [pc, #372]	; (37f4 <__aeabi_dsub+0x344>)
    3680:	3601      	adds	r6, #1
    3682:	429e      	cmp	r6, r3
    3684:	d100      	bne.n	3688 <__aeabi_dsub+0x1d8>
    3686:	e14b      	b.n	3920 <__aeabi_dsub+0x470>
    3688:	2201      	movs	r2, #1
    368a:	4b5b      	ldr	r3, [pc, #364]	; (37f8 <__aeabi_dsub+0x348>)
    368c:	401c      	ands	r4, r3
    368e:	087b      	lsrs	r3, r7, #1
    3690:	4017      	ands	r7, r2
    3692:	431f      	orrs	r7, r3
    3694:	07e2      	lsls	r2, r4, #31
    3696:	4317      	orrs	r7, r2
    3698:	0864      	lsrs	r4, r4, #1
    369a:	e78f      	b.n	35bc <__aeabi_dsub+0x10c>
    369c:	0008      	movs	r0, r1
    369e:	4310      	orrs	r0, r2
    36a0:	d000      	beq.n	36a4 <__aeabi_dsub+0x1f4>
    36a2:	e724      	b.n	34ee <__aeabi_dsub+0x3e>
    36a4:	e721      	b.n	34ea <__aeabi_dsub+0x3a>
    36a6:	0023      	movs	r3, r4
    36a8:	433b      	orrs	r3, r7
    36aa:	d100      	bne.n	36ae <__aeabi_dsub+0x1fe>
    36ac:	e1b9      	b.n	3a22 <__aeabi_dsub+0x572>
    36ae:	2280      	movs	r2, #128	; 0x80
    36b0:	0312      	lsls	r2, r2, #12
    36b2:	4314      	orrs	r4, r2
    36b4:	0324      	lsls	r4, r4, #12
    36b6:	0b24      	lsrs	r4, r4, #12
    36b8:	e79f      	b.n	35fa <__aeabi_dsub+0x14a>
    36ba:	002e      	movs	r6, r5
    36bc:	e77e      	b.n	35bc <__aeabi_dsub+0x10c>
    36be:	0008      	movs	r0, r1
    36c0:	4310      	orrs	r0, r2
    36c2:	d100      	bne.n	36c6 <__aeabi_dsub+0x216>
    36c4:	e0ca      	b.n	385c <__aeabi_dsub+0x3ac>
    36c6:	1e58      	subs	r0, r3, #1
    36c8:	4684      	mov	ip, r0
    36ca:	2800      	cmp	r0, #0
    36cc:	d000      	beq.n	36d0 <__aeabi_dsub+0x220>
    36ce:	e0e7      	b.n	38a0 <__aeabi_dsub+0x3f0>
    36d0:	4452      	add	r2, sl
    36d2:	4552      	cmp	r2, sl
    36d4:	4180      	sbcs	r0, r0
    36d6:	1864      	adds	r4, r4, r1
    36d8:	4240      	negs	r0, r0
    36da:	1824      	adds	r4, r4, r0
    36dc:	0017      	movs	r7, r2
    36de:	2601      	movs	r6, #1
    36e0:	0223      	lsls	r3, r4, #8
    36e2:	d507      	bpl.n	36f4 <__aeabi_dsub+0x244>
    36e4:	2602      	movs	r6, #2
    36e6:	e7cf      	b.n	3688 <__aeabi_dsub+0x1d8>
    36e8:	4664      	mov	r4, ip
    36ea:	432c      	orrs	r4, r5
    36ec:	d100      	bne.n	36f0 <__aeabi_dsub+0x240>
    36ee:	e1b3      	b.n	3a58 <__aeabi_dsub+0x5a8>
    36f0:	002c      	movs	r4, r5
    36f2:	4667      	mov	r7, ip
    36f4:	077b      	lsls	r3, r7, #29
    36f6:	d000      	beq.n	36fa <__aeabi_dsub+0x24a>
    36f8:	e762      	b.n	35c0 <__aeabi_dsub+0x110>
    36fa:	0763      	lsls	r3, r4, #29
    36fc:	08ff      	lsrs	r7, r7, #3
    36fe:	431f      	orrs	r7, r3
    3700:	2501      	movs	r5, #1
    3702:	4643      	mov	r3, r8
    3704:	08e4      	lsrs	r4, r4, #3
    3706:	401d      	ands	r5, r3
    3708:	e793      	b.n	3632 <__aeabi_dsub+0x182>
    370a:	2d00      	cmp	r5, #0
    370c:	d178      	bne.n	3800 <__aeabi_dsub+0x350>
    370e:	1c75      	adds	r5, r6, #1
    3710:	056d      	lsls	r5, r5, #21
    3712:	0d6d      	lsrs	r5, r5, #21
    3714:	2d01      	cmp	r5, #1
    3716:	dc00      	bgt.n	371a <__aeabi_dsub+0x26a>
    3718:	e0f2      	b.n	3900 <__aeabi_dsub+0x450>
    371a:	4650      	mov	r0, sl
    371c:	1a80      	subs	r0, r0, r2
    371e:	4582      	cmp	sl, r0
    3720:	41bf      	sbcs	r7, r7
    3722:	1a65      	subs	r5, r4, r1
    3724:	427f      	negs	r7, r7
    3726:	1bed      	subs	r5, r5, r7
    3728:	4684      	mov	ip, r0
    372a:	0228      	lsls	r0, r5, #8
    372c:	d400      	bmi.n	3730 <__aeabi_dsub+0x280>
    372e:	e08c      	b.n	384a <__aeabi_dsub+0x39a>
    3730:	4650      	mov	r0, sl
    3732:	1a17      	subs	r7, r2, r0
    3734:	42ba      	cmp	r2, r7
    3736:	4192      	sbcs	r2, r2
    3738:	1b0c      	subs	r4, r1, r4
    373a:	4255      	negs	r5, r2
    373c:	1b65      	subs	r5, r4, r5
    373e:	4698      	mov	r8, r3
    3740:	e714      	b.n	356c <__aeabi_dsub+0xbc>
    3742:	2501      	movs	r5, #1
    3744:	4643      	mov	r3, r8
    3746:	2400      	movs	r4, #0
    3748:	401d      	ands	r5, r3
    374a:	2700      	movs	r7, #0
    374c:	e755      	b.n	35fa <__aeabi_dsub+0x14a>
    374e:	4c2a      	ldr	r4, [pc, #168]	; (37f8 <__aeabi_dsub+0x348>)
    3750:	1af6      	subs	r6, r6, r3
    3752:	402c      	ands	r4, r5
    3754:	e732      	b.n	35bc <__aeabi_dsub+0x10c>
    3756:	003d      	movs	r5, r7
    3758:	3828      	subs	r0, #40	; 0x28
    375a:	4085      	lsls	r5, r0
    375c:	2700      	movs	r7, #0
    375e:	e717      	b.n	3590 <__aeabi_dsub+0xe0>
    3760:	0038      	movs	r0, r7
    3762:	f000 fa27 	bl	3bb4 <__clzsi2>
    3766:	3020      	adds	r0, #32
    3768:	e706      	b.n	3578 <__aeabi_dsub+0xc8>
    376a:	430a      	orrs	r2, r1
    376c:	0017      	movs	r7, r2
    376e:	2100      	movs	r1, #0
    3770:	1e7a      	subs	r2, r7, #1
    3772:	4197      	sbcs	r7, r2
    3774:	e6ee      	b.n	3554 <__aeabi_dsub+0xa4>
    3776:	2b00      	cmp	r3, #0
    3778:	d000      	beq.n	377c <__aeabi_dsub+0x2cc>
    377a:	e0e5      	b.n	3948 <__aeabi_dsub+0x498>
    377c:	1c73      	adds	r3, r6, #1
    377e:	469c      	mov	ip, r3
    3780:	055b      	lsls	r3, r3, #21
    3782:	0d5b      	lsrs	r3, r3, #21
    3784:	2b01      	cmp	r3, #1
    3786:	dc00      	bgt.n	378a <__aeabi_dsub+0x2da>
    3788:	e09f      	b.n	38ca <__aeabi_dsub+0x41a>
    378a:	4b1a      	ldr	r3, [pc, #104]	; (37f4 <__aeabi_dsub+0x344>)
    378c:	459c      	cmp	ip, r3
    378e:	d100      	bne.n	3792 <__aeabi_dsub+0x2e2>
    3790:	e0c5      	b.n	391e <__aeabi_dsub+0x46e>
    3792:	4452      	add	r2, sl
    3794:	4552      	cmp	r2, sl
    3796:	4180      	sbcs	r0, r0
    3798:	1864      	adds	r4, r4, r1
    379a:	4240      	negs	r0, r0
    379c:	1824      	adds	r4, r4, r0
    379e:	07e7      	lsls	r7, r4, #31
    37a0:	0852      	lsrs	r2, r2, #1
    37a2:	4317      	orrs	r7, r2
    37a4:	0864      	lsrs	r4, r4, #1
    37a6:	4666      	mov	r6, ip
    37a8:	e708      	b.n	35bc <__aeabi_dsub+0x10c>
    37aa:	4812      	ldr	r0, [pc, #72]	; (37f4 <__aeabi_dsub+0x344>)
    37ac:	4285      	cmp	r5, r0
    37ae:	d100      	bne.n	37b2 <__aeabi_dsub+0x302>
    37b0:	e085      	b.n	38be <__aeabi_dsub+0x40e>
    37b2:	001d      	movs	r5, r3
    37b4:	e6bc      	b.n	3530 <__aeabi_dsub+0x80>
    37b6:	0029      	movs	r1, r5
    37b8:	3e1f      	subs	r6, #31
    37ba:	40f1      	lsrs	r1, r6
    37bc:	2b20      	cmp	r3, #32
    37be:	d100      	bne.n	37c2 <__aeabi_dsub+0x312>
    37c0:	e07f      	b.n	38c2 <__aeabi_dsub+0x412>
    37c2:	2240      	movs	r2, #64	; 0x40
    37c4:	1ad3      	subs	r3, r2, r3
    37c6:	409d      	lsls	r5, r3
    37c8:	432f      	orrs	r7, r5
    37ca:	1e7d      	subs	r5, r7, #1
    37cc:	41af      	sbcs	r7, r5
    37ce:	2400      	movs	r4, #0
    37d0:	430f      	orrs	r7, r1
    37d2:	2600      	movs	r6, #0
    37d4:	e78e      	b.n	36f4 <__aeabi_dsub+0x244>
    37d6:	002b      	movs	r3, r5
    37d8:	000f      	movs	r7, r1
    37da:	3b20      	subs	r3, #32
    37dc:	40df      	lsrs	r7, r3
    37de:	2d20      	cmp	r5, #32
    37e0:	d071      	beq.n	38c6 <__aeabi_dsub+0x416>
    37e2:	2340      	movs	r3, #64	; 0x40
    37e4:	1b5d      	subs	r5, r3, r5
    37e6:	40a9      	lsls	r1, r5
    37e8:	430a      	orrs	r2, r1
    37ea:	1e51      	subs	r1, r2, #1
    37ec:	418a      	sbcs	r2, r1
    37ee:	2100      	movs	r1, #0
    37f0:	4317      	orrs	r7, r2
    37f2:	e6af      	b.n	3554 <__aeabi_dsub+0xa4>
    37f4:	000007ff 	.word	0x000007ff
    37f8:	ff7fffff 	.word	0xff7fffff
    37fc:	800fffff 	.word	0x800fffff
    3800:	2e00      	cmp	r6, #0
    3802:	d03e      	beq.n	3882 <__aeabi_dsub+0x3d2>
    3804:	4eb3      	ldr	r6, [pc, #716]	; (3ad4 <__aeabi_dsub+0x624>)
    3806:	45b4      	cmp	ip, r6
    3808:	d045      	beq.n	3896 <__aeabi_dsub+0x3e6>
    380a:	2680      	movs	r6, #128	; 0x80
    380c:	0436      	lsls	r6, r6, #16
    380e:	426d      	negs	r5, r5
    3810:	4334      	orrs	r4, r6
    3812:	2d38      	cmp	r5, #56	; 0x38
    3814:	dd00      	ble.n	3818 <__aeabi_dsub+0x368>
    3816:	e0a8      	b.n	396a <__aeabi_dsub+0x4ba>
    3818:	2d1f      	cmp	r5, #31
    381a:	dd00      	ble.n	381e <__aeabi_dsub+0x36e>
    381c:	e11f      	b.n	3a5e <__aeabi_dsub+0x5ae>
    381e:	2620      	movs	r6, #32
    3820:	0027      	movs	r7, r4
    3822:	4650      	mov	r0, sl
    3824:	1b76      	subs	r6, r6, r5
    3826:	40b7      	lsls	r7, r6
    3828:	40e8      	lsrs	r0, r5
    382a:	4307      	orrs	r7, r0
    382c:	4650      	mov	r0, sl
    382e:	40b0      	lsls	r0, r6
    3830:	1e46      	subs	r6, r0, #1
    3832:	41b0      	sbcs	r0, r6
    3834:	40ec      	lsrs	r4, r5
    3836:	4338      	orrs	r0, r7
    3838:	1a17      	subs	r7, r2, r0
    383a:	42ba      	cmp	r2, r7
    383c:	4192      	sbcs	r2, r2
    383e:	1b0c      	subs	r4, r1, r4
    3840:	4252      	negs	r2, r2
    3842:	1aa4      	subs	r4, r4, r2
    3844:	4666      	mov	r6, ip
    3846:	4698      	mov	r8, r3
    3848:	e68b      	b.n	3562 <__aeabi_dsub+0xb2>
    384a:	4664      	mov	r4, ip
    384c:	4667      	mov	r7, ip
    384e:	432c      	orrs	r4, r5
    3850:	d000      	beq.n	3854 <__aeabi_dsub+0x3a4>
    3852:	e68b      	b.n	356c <__aeabi_dsub+0xbc>
    3854:	2500      	movs	r5, #0
    3856:	2600      	movs	r6, #0
    3858:	2700      	movs	r7, #0
    385a:	e6ea      	b.n	3632 <__aeabi_dsub+0x182>
    385c:	001e      	movs	r6, r3
    385e:	e6ad      	b.n	35bc <__aeabi_dsub+0x10c>
    3860:	2b1f      	cmp	r3, #31
    3862:	dc60      	bgt.n	3926 <__aeabi_dsub+0x476>
    3864:	2720      	movs	r7, #32
    3866:	1af8      	subs	r0, r7, r3
    3868:	000f      	movs	r7, r1
    386a:	4684      	mov	ip, r0
    386c:	4087      	lsls	r7, r0
    386e:	0010      	movs	r0, r2
    3870:	40d8      	lsrs	r0, r3
    3872:	4307      	orrs	r7, r0
    3874:	4660      	mov	r0, ip
    3876:	4082      	lsls	r2, r0
    3878:	1e50      	subs	r0, r2, #1
    387a:	4182      	sbcs	r2, r0
    387c:	40d9      	lsrs	r1, r3
    387e:	4317      	orrs	r7, r2
    3880:	e6f5      	b.n	366e <__aeabi_dsub+0x1be>
    3882:	0026      	movs	r6, r4
    3884:	4650      	mov	r0, sl
    3886:	4306      	orrs	r6, r0
    3888:	d005      	beq.n	3896 <__aeabi_dsub+0x3e6>
    388a:	43ed      	mvns	r5, r5
    388c:	2d00      	cmp	r5, #0
    388e:	d0d3      	beq.n	3838 <__aeabi_dsub+0x388>
    3890:	4e90      	ldr	r6, [pc, #576]	; (3ad4 <__aeabi_dsub+0x624>)
    3892:	45b4      	cmp	ip, r6
    3894:	d1bd      	bne.n	3812 <__aeabi_dsub+0x362>
    3896:	000c      	movs	r4, r1
    3898:	0017      	movs	r7, r2
    389a:	4666      	mov	r6, ip
    389c:	4698      	mov	r8, r3
    389e:	e68d      	b.n	35bc <__aeabi_dsub+0x10c>
    38a0:	488c      	ldr	r0, [pc, #560]	; (3ad4 <__aeabi_dsub+0x624>)
    38a2:	4283      	cmp	r3, r0
    38a4:	d00b      	beq.n	38be <__aeabi_dsub+0x40e>
    38a6:	4663      	mov	r3, ip
    38a8:	e6d9      	b.n	365e <__aeabi_dsub+0x1ae>
    38aa:	2d00      	cmp	r5, #0
    38ac:	d000      	beq.n	38b0 <__aeabi_dsub+0x400>
    38ae:	e096      	b.n	39de <__aeabi_dsub+0x52e>
    38b0:	0008      	movs	r0, r1
    38b2:	4310      	orrs	r0, r2
    38b4:	d100      	bne.n	38b8 <__aeabi_dsub+0x408>
    38b6:	e0e2      	b.n	3a7e <__aeabi_dsub+0x5ce>
    38b8:	000c      	movs	r4, r1
    38ba:	0017      	movs	r7, r2
    38bc:	4698      	mov	r8, r3
    38be:	4e85      	ldr	r6, [pc, #532]	; (3ad4 <__aeabi_dsub+0x624>)
    38c0:	e67c      	b.n	35bc <__aeabi_dsub+0x10c>
    38c2:	2500      	movs	r5, #0
    38c4:	e780      	b.n	37c8 <__aeabi_dsub+0x318>
    38c6:	2100      	movs	r1, #0
    38c8:	e78e      	b.n	37e8 <__aeabi_dsub+0x338>
    38ca:	0023      	movs	r3, r4
    38cc:	4650      	mov	r0, sl
    38ce:	4303      	orrs	r3, r0
    38d0:	2e00      	cmp	r6, #0
    38d2:	d000      	beq.n	38d6 <__aeabi_dsub+0x426>
    38d4:	e0a8      	b.n	3a28 <__aeabi_dsub+0x578>
    38d6:	2b00      	cmp	r3, #0
    38d8:	d100      	bne.n	38dc <__aeabi_dsub+0x42c>
    38da:	e0de      	b.n	3a9a <__aeabi_dsub+0x5ea>
    38dc:	000b      	movs	r3, r1
    38de:	4313      	orrs	r3, r2
    38e0:	d100      	bne.n	38e4 <__aeabi_dsub+0x434>
    38e2:	e66b      	b.n	35bc <__aeabi_dsub+0x10c>
    38e4:	4452      	add	r2, sl
    38e6:	4552      	cmp	r2, sl
    38e8:	4180      	sbcs	r0, r0
    38ea:	1864      	adds	r4, r4, r1
    38ec:	4240      	negs	r0, r0
    38ee:	1824      	adds	r4, r4, r0
    38f0:	0017      	movs	r7, r2
    38f2:	0223      	lsls	r3, r4, #8
    38f4:	d400      	bmi.n	38f8 <__aeabi_dsub+0x448>
    38f6:	e6fd      	b.n	36f4 <__aeabi_dsub+0x244>
    38f8:	4b77      	ldr	r3, [pc, #476]	; (3ad8 <__aeabi_dsub+0x628>)
    38fa:	4666      	mov	r6, ip
    38fc:	401c      	ands	r4, r3
    38fe:	e65d      	b.n	35bc <__aeabi_dsub+0x10c>
    3900:	0025      	movs	r5, r4
    3902:	4650      	mov	r0, sl
    3904:	4305      	orrs	r5, r0
    3906:	2e00      	cmp	r6, #0
    3908:	d1cf      	bne.n	38aa <__aeabi_dsub+0x3fa>
    390a:	2d00      	cmp	r5, #0
    390c:	d14f      	bne.n	39ae <__aeabi_dsub+0x4fe>
    390e:	000c      	movs	r4, r1
    3910:	4314      	orrs	r4, r2
    3912:	d100      	bne.n	3916 <__aeabi_dsub+0x466>
    3914:	e0a0      	b.n	3a58 <__aeabi_dsub+0x5a8>
    3916:	000c      	movs	r4, r1
    3918:	0017      	movs	r7, r2
    391a:	4698      	mov	r8, r3
    391c:	e64e      	b.n	35bc <__aeabi_dsub+0x10c>
    391e:	4666      	mov	r6, ip
    3920:	2400      	movs	r4, #0
    3922:	2700      	movs	r7, #0
    3924:	e685      	b.n	3632 <__aeabi_dsub+0x182>
    3926:	001f      	movs	r7, r3
    3928:	0008      	movs	r0, r1
    392a:	3f20      	subs	r7, #32
    392c:	40f8      	lsrs	r0, r7
    392e:	0007      	movs	r7, r0
    3930:	2b20      	cmp	r3, #32
    3932:	d100      	bne.n	3936 <__aeabi_dsub+0x486>
    3934:	e08e      	b.n	3a54 <__aeabi_dsub+0x5a4>
    3936:	2040      	movs	r0, #64	; 0x40
    3938:	1ac3      	subs	r3, r0, r3
    393a:	4099      	lsls	r1, r3
    393c:	430a      	orrs	r2, r1
    393e:	1e51      	subs	r1, r2, #1
    3940:	418a      	sbcs	r2, r1
    3942:	2100      	movs	r1, #0
    3944:	4317      	orrs	r7, r2
    3946:	e692      	b.n	366e <__aeabi_dsub+0x1be>
    3948:	2e00      	cmp	r6, #0
    394a:	d114      	bne.n	3976 <__aeabi_dsub+0x4c6>
    394c:	0026      	movs	r6, r4
    394e:	4650      	mov	r0, sl
    3950:	4306      	orrs	r6, r0
    3952:	d062      	beq.n	3a1a <__aeabi_dsub+0x56a>
    3954:	43db      	mvns	r3, r3
    3956:	2b00      	cmp	r3, #0
    3958:	d15c      	bne.n	3a14 <__aeabi_dsub+0x564>
    395a:	1887      	adds	r7, r0, r2
    395c:	4297      	cmp	r7, r2
    395e:	4192      	sbcs	r2, r2
    3960:	1864      	adds	r4, r4, r1
    3962:	4252      	negs	r2, r2
    3964:	18a4      	adds	r4, r4, r2
    3966:	4666      	mov	r6, ip
    3968:	e687      	b.n	367a <__aeabi_dsub+0x1ca>
    396a:	4650      	mov	r0, sl
    396c:	4320      	orrs	r0, r4
    396e:	1e44      	subs	r4, r0, #1
    3970:	41a0      	sbcs	r0, r4
    3972:	2400      	movs	r4, #0
    3974:	e760      	b.n	3838 <__aeabi_dsub+0x388>
    3976:	4e57      	ldr	r6, [pc, #348]	; (3ad4 <__aeabi_dsub+0x624>)
    3978:	45b4      	cmp	ip, r6
    397a:	d04e      	beq.n	3a1a <__aeabi_dsub+0x56a>
    397c:	2680      	movs	r6, #128	; 0x80
    397e:	0436      	lsls	r6, r6, #16
    3980:	425b      	negs	r3, r3
    3982:	4334      	orrs	r4, r6
    3984:	2b38      	cmp	r3, #56	; 0x38
    3986:	dd00      	ble.n	398a <__aeabi_dsub+0x4da>
    3988:	e07f      	b.n	3a8a <__aeabi_dsub+0x5da>
    398a:	2b1f      	cmp	r3, #31
    398c:	dd00      	ble.n	3990 <__aeabi_dsub+0x4e0>
    398e:	e08b      	b.n	3aa8 <__aeabi_dsub+0x5f8>
    3990:	2620      	movs	r6, #32
    3992:	0027      	movs	r7, r4
    3994:	4650      	mov	r0, sl
    3996:	1af6      	subs	r6, r6, r3
    3998:	40b7      	lsls	r7, r6
    399a:	40d8      	lsrs	r0, r3
    399c:	4307      	orrs	r7, r0
    399e:	4650      	mov	r0, sl
    39a0:	40b0      	lsls	r0, r6
    39a2:	1e46      	subs	r6, r0, #1
    39a4:	41b0      	sbcs	r0, r6
    39a6:	4307      	orrs	r7, r0
    39a8:	40dc      	lsrs	r4, r3
    39aa:	18bf      	adds	r7, r7, r2
    39ac:	e7d6      	b.n	395c <__aeabi_dsub+0x4ac>
    39ae:	000d      	movs	r5, r1
    39b0:	4315      	orrs	r5, r2
    39b2:	d100      	bne.n	39b6 <__aeabi_dsub+0x506>
    39b4:	e602      	b.n	35bc <__aeabi_dsub+0x10c>
    39b6:	4650      	mov	r0, sl
    39b8:	1a80      	subs	r0, r0, r2
    39ba:	4582      	cmp	sl, r0
    39bc:	41bf      	sbcs	r7, r7
    39be:	1a65      	subs	r5, r4, r1
    39c0:	427f      	negs	r7, r7
    39c2:	1bed      	subs	r5, r5, r7
    39c4:	4684      	mov	ip, r0
    39c6:	0228      	lsls	r0, r5, #8
    39c8:	d400      	bmi.n	39cc <__aeabi_dsub+0x51c>
    39ca:	e68d      	b.n	36e8 <__aeabi_dsub+0x238>
    39cc:	4650      	mov	r0, sl
    39ce:	1a17      	subs	r7, r2, r0
    39d0:	42ba      	cmp	r2, r7
    39d2:	4192      	sbcs	r2, r2
    39d4:	1b0c      	subs	r4, r1, r4
    39d6:	4252      	negs	r2, r2
    39d8:	1aa4      	subs	r4, r4, r2
    39da:	4698      	mov	r8, r3
    39dc:	e5ee      	b.n	35bc <__aeabi_dsub+0x10c>
    39de:	000d      	movs	r5, r1
    39e0:	4315      	orrs	r5, r2
    39e2:	d100      	bne.n	39e6 <__aeabi_dsub+0x536>
    39e4:	e76b      	b.n	38be <__aeabi_dsub+0x40e>
    39e6:	4650      	mov	r0, sl
    39e8:	0767      	lsls	r7, r4, #29
    39ea:	08c0      	lsrs	r0, r0, #3
    39ec:	4307      	orrs	r7, r0
    39ee:	2080      	movs	r0, #128	; 0x80
    39f0:	08e4      	lsrs	r4, r4, #3
    39f2:	0300      	lsls	r0, r0, #12
    39f4:	4204      	tst	r4, r0
    39f6:	d007      	beq.n	3a08 <__aeabi_dsub+0x558>
    39f8:	08cd      	lsrs	r5, r1, #3
    39fa:	4205      	tst	r5, r0
    39fc:	d104      	bne.n	3a08 <__aeabi_dsub+0x558>
    39fe:	002c      	movs	r4, r5
    3a00:	4698      	mov	r8, r3
    3a02:	08d7      	lsrs	r7, r2, #3
    3a04:	0749      	lsls	r1, r1, #29
    3a06:	430f      	orrs	r7, r1
    3a08:	0f7b      	lsrs	r3, r7, #29
    3a0a:	00e4      	lsls	r4, r4, #3
    3a0c:	431c      	orrs	r4, r3
    3a0e:	00ff      	lsls	r7, r7, #3
    3a10:	4e30      	ldr	r6, [pc, #192]	; (3ad4 <__aeabi_dsub+0x624>)
    3a12:	e5d3      	b.n	35bc <__aeabi_dsub+0x10c>
    3a14:	4e2f      	ldr	r6, [pc, #188]	; (3ad4 <__aeabi_dsub+0x624>)
    3a16:	45b4      	cmp	ip, r6
    3a18:	d1b4      	bne.n	3984 <__aeabi_dsub+0x4d4>
    3a1a:	000c      	movs	r4, r1
    3a1c:	0017      	movs	r7, r2
    3a1e:	4666      	mov	r6, ip
    3a20:	e5cc      	b.n	35bc <__aeabi_dsub+0x10c>
    3a22:	2700      	movs	r7, #0
    3a24:	2400      	movs	r4, #0
    3a26:	e5e8      	b.n	35fa <__aeabi_dsub+0x14a>
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d039      	beq.n	3aa0 <__aeabi_dsub+0x5f0>
    3a2c:	000b      	movs	r3, r1
    3a2e:	4313      	orrs	r3, r2
    3a30:	d100      	bne.n	3a34 <__aeabi_dsub+0x584>
    3a32:	e744      	b.n	38be <__aeabi_dsub+0x40e>
    3a34:	08c0      	lsrs	r0, r0, #3
    3a36:	0767      	lsls	r7, r4, #29
    3a38:	4307      	orrs	r7, r0
    3a3a:	2080      	movs	r0, #128	; 0x80
    3a3c:	08e4      	lsrs	r4, r4, #3
    3a3e:	0300      	lsls	r0, r0, #12
    3a40:	4204      	tst	r4, r0
    3a42:	d0e1      	beq.n	3a08 <__aeabi_dsub+0x558>
    3a44:	08cb      	lsrs	r3, r1, #3
    3a46:	4203      	tst	r3, r0
    3a48:	d1de      	bne.n	3a08 <__aeabi_dsub+0x558>
    3a4a:	08d7      	lsrs	r7, r2, #3
    3a4c:	0749      	lsls	r1, r1, #29
    3a4e:	430f      	orrs	r7, r1
    3a50:	001c      	movs	r4, r3
    3a52:	e7d9      	b.n	3a08 <__aeabi_dsub+0x558>
    3a54:	2100      	movs	r1, #0
    3a56:	e771      	b.n	393c <__aeabi_dsub+0x48c>
    3a58:	2500      	movs	r5, #0
    3a5a:	2700      	movs	r7, #0
    3a5c:	e5e9      	b.n	3632 <__aeabi_dsub+0x182>
    3a5e:	002e      	movs	r6, r5
    3a60:	0027      	movs	r7, r4
    3a62:	3e20      	subs	r6, #32
    3a64:	40f7      	lsrs	r7, r6
    3a66:	2d20      	cmp	r5, #32
    3a68:	d02f      	beq.n	3aca <__aeabi_dsub+0x61a>
    3a6a:	2640      	movs	r6, #64	; 0x40
    3a6c:	1b75      	subs	r5, r6, r5
    3a6e:	40ac      	lsls	r4, r5
    3a70:	4650      	mov	r0, sl
    3a72:	4320      	orrs	r0, r4
    3a74:	1e44      	subs	r4, r0, #1
    3a76:	41a0      	sbcs	r0, r4
    3a78:	2400      	movs	r4, #0
    3a7a:	4338      	orrs	r0, r7
    3a7c:	e6dc      	b.n	3838 <__aeabi_dsub+0x388>
    3a7e:	2480      	movs	r4, #128	; 0x80
    3a80:	2500      	movs	r5, #0
    3a82:	0324      	lsls	r4, r4, #12
    3a84:	4e13      	ldr	r6, [pc, #76]	; (3ad4 <__aeabi_dsub+0x624>)
    3a86:	2700      	movs	r7, #0
    3a88:	e5d3      	b.n	3632 <__aeabi_dsub+0x182>
    3a8a:	4650      	mov	r0, sl
    3a8c:	4320      	orrs	r0, r4
    3a8e:	0007      	movs	r7, r0
    3a90:	1e78      	subs	r0, r7, #1
    3a92:	4187      	sbcs	r7, r0
    3a94:	2400      	movs	r4, #0
    3a96:	18bf      	adds	r7, r7, r2
    3a98:	e760      	b.n	395c <__aeabi_dsub+0x4ac>
    3a9a:	000c      	movs	r4, r1
    3a9c:	0017      	movs	r7, r2
    3a9e:	e58d      	b.n	35bc <__aeabi_dsub+0x10c>
    3aa0:	000c      	movs	r4, r1
    3aa2:	0017      	movs	r7, r2
    3aa4:	4e0b      	ldr	r6, [pc, #44]	; (3ad4 <__aeabi_dsub+0x624>)
    3aa6:	e589      	b.n	35bc <__aeabi_dsub+0x10c>
    3aa8:	001e      	movs	r6, r3
    3aaa:	0027      	movs	r7, r4
    3aac:	3e20      	subs	r6, #32
    3aae:	40f7      	lsrs	r7, r6
    3ab0:	2b20      	cmp	r3, #32
    3ab2:	d00c      	beq.n	3ace <__aeabi_dsub+0x61e>
    3ab4:	2640      	movs	r6, #64	; 0x40
    3ab6:	1af3      	subs	r3, r6, r3
    3ab8:	409c      	lsls	r4, r3
    3aba:	4650      	mov	r0, sl
    3abc:	4320      	orrs	r0, r4
    3abe:	1e44      	subs	r4, r0, #1
    3ac0:	41a0      	sbcs	r0, r4
    3ac2:	4307      	orrs	r7, r0
    3ac4:	2400      	movs	r4, #0
    3ac6:	18bf      	adds	r7, r7, r2
    3ac8:	e748      	b.n	395c <__aeabi_dsub+0x4ac>
    3aca:	2400      	movs	r4, #0
    3acc:	e7d0      	b.n	3a70 <__aeabi_dsub+0x5c0>
    3ace:	2400      	movs	r4, #0
    3ad0:	e7f3      	b.n	3aba <__aeabi_dsub+0x60a>
    3ad2:	46c0      	nop			; (mov r8, r8)
    3ad4:	000007ff 	.word	0x000007ff
    3ad8:	ff7fffff 	.word	0xff7fffff

00003adc <__aeabi_d2iz>:
    3adc:	b530      	push	{r4, r5, lr}
    3ade:	4d13      	ldr	r5, [pc, #76]	; (3b2c <__aeabi_d2iz+0x50>)
    3ae0:	030a      	lsls	r2, r1, #12
    3ae2:	004b      	lsls	r3, r1, #1
    3ae4:	0b12      	lsrs	r2, r2, #12
    3ae6:	0d5b      	lsrs	r3, r3, #21
    3ae8:	0fc9      	lsrs	r1, r1, #31
    3aea:	2400      	movs	r4, #0
    3aec:	42ab      	cmp	r3, r5
    3aee:	dd10      	ble.n	3b12 <__aeabi_d2iz+0x36>
    3af0:	4c0f      	ldr	r4, [pc, #60]	; (3b30 <__aeabi_d2iz+0x54>)
    3af2:	42a3      	cmp	r3, r4
    3af4:	dc0f      	bgt.n	3b16 <__aeabi_d2iz+0x3a>
    3af6:	2480      	movs	r4, #128	; 0x80
    3af8:	4d0e      	ldr	r5, [pc, #56]	; (3b34 <__aeabi_d2iz+0x58>)
    3afa:	0364      	lsls	r4, r4, #13
    3afc:	4322      	orrs	r2, r4
    3afe:	1aed      	subs	r5, r5, r3
    3b00:	2d1f      	cmp	r5, #31
    3b02:	dd0b      	ble.n	3b1c <__aeabi_d2iz+0x40>
    3b04:	480c      	ldr	r0, [pc, #48]	; (3b38 <__aeabi_d2iz+0x5c>)
    3b06:	1ac3      	subs	r3, r0, r3
    3b08:	40da      	lsrs	r2, r3
    3b0a:	4254      	negs	r4, r2
    3b0c:	2900      	cmp	r1, #0
    3b0e:	d100      	bne.n	3b12 <__aeabi_d2iz+0x36>
    3b10:	0014      	movs	r4, r2
    3b12:	0020      	movs	r0, r4
    3b14:	bd30      	pop	{r4, r5, pc}
    3b16:	4b09      	ldr	r3, [pc, #36]	; (3b3c <__aeabi_d2iz+0x60>)
    3b18:	18cc      	adds	r4, r1, r3
    3b1a:	e7fa      	b.n	3b12 <__aeabi_d2iz+0x36>
    3b1c:	4c08      	ldr	r4, [pc, #32]	; (3b40 <__aeabi_d2iz+0x64>)
    3b1e:	40e8      	lsrs	r0, r5
    3b20:	46a4      	mov	ip, r4
    3b22:	4463      	add	r3, ip
    3b24:	409a      	lsls	r2, r3
    3b26:	4302      	orrs	r2, r0
    3b28:	e7ef      	b.n	3b0a <__aeabi_d2iz+0x2e>
    3b2a:	46c0      	nop			; (mov r8, r8)
    3b2c:	000003fe 	.word	0x000003fe
    3b30:	0000041d 	.word	0x0000041d
    3b34:	00000433 	.word	0x00000433
    3b38:	00000413 	.word	0x00000413
    3b3c:	7fffffff 	.word	0x7fffffff
    3b40:	fffffbed 	.word	0xfffffbed

00003b44 <__aeabi_ui2d>:
    3b44:	b510      	push	{r4, lr}
    3b46:	1e04      	subs	r4, r0, #0
    3b48:	d028      	beq.n	3b9c <__aeabi_ui2d+0x58>
    3b4a:	f000 f833 	bl	3bb4 <__clzsi2>
    3b4e:	4b15      	ldr	r3, [pc, #84]	; (3ba4 <__aeabi_ui2d+0x60>)
    3b50:	4a15      	ldr	r2, [pc, #84]	; (3ba8 <__aeabi_ui2d+0x64>)
    3b52:	1a1b      	subs	r3, r3, r0
    3b54:	1ad2      	subs	r2, r2, r3
    3b56:	2a1f      	cmp	r2, #31
    3b58:	dd15      	ble.n	3b86 <__aeabi_ui2d+0x42>
    3b5a:	4a14      	ldr	r2, [pc, #80]	; (3bac <__aeabi_ui2d+0x68>)
    3b5c:	1ad2      	subs	r2, r2, r3
    3b5e:	4094      	lsls	r4, r2
    3b60:	2200      	movs	r2, #0
    3b62:	0324      	lsls	r4, r4, #12
    3b64:	055b      	lsls	r3, r3, #21
    3b66:	0b24      	lsrs	r4, r4, #12
    3b68:	0d5b      	lsrs	r3, r3, #21
    3b6a:	2100      	movs	r1, #0
    3b6c:	0010      	movs	r0, r2
    3b6e:	0324      	lsls	r4, r4, #12
    3b70:	0d0a      	lsrs	r2, r1, #20
    3b72:	0b24      	lsrs	r4, r4, #12
    3b74:	0512      	lsls	r2, r2, #20
    3b76:	4322      	orrs	r2, r4
    3b78:	4c0d      	ldr	r4, [pc, #52]	; (3bb0 <__aeabi_ui2d+0x6c>)
    3b7a:	051b      	lsls	r3, r3, #20
    3b7c:	4022      	ands	r2, r4
    3b7e:	4313      	orrs	r3, r2
    3b80:	005b      	lsls	r3, r3, #1
    3b82:	0859      	lsrs	r1, r3, #1
    3b84:	bd10      	pop	{r4, pc}
    3b86:	0021      	movs	r1, r4
    3b88:	4091      	lsls	r1, r2
    3b8a:	000a      	movs	r2, r1
    3b8c:	210b      	movs	r1, #11
    3b8e:	1a08      	subs	r0, r1, r0
    3b90:	40c4      	lsrs	r4, r0
    3b92:	055b      	lsls	r3, r3, #21
    3b94:	0324      	lsls	r4, r4, #12
    3b96:	0b24      	lsrs	r4, r4, #12
    3b98:	0d5b      	lsrs	r3, r3, #21
    3b9a:	e7e6      	b.n	3b6a <__aeabi_ui2d+0x26>
    3b9c:	2300      	movs	r3, #0
    3b9e:	2400      	movs	r4, #0
    3ba0:	2200      	movs	r2, #0
    3ba2:	e7e2      	b.n	3b6a <__aeabi_ui2d+0x26>
    3ba4:	0000041e 	.word	0x0000041e
    3ba8:	00000433 	.word	0x00000433
    3bac:	00000413 	.word	0x00000413
    3bb0:	800fffff 	.word	0x800fffff

00003bb4 <__clzsi2>:
    3bb4:	211c      	movs	r1, #28
    3bb6:	2301      	movs	r3, #1
    3bb8:	041b      	lsls	r3, r3, #16
    3bba:	4298      	cmp	r0, r3
    3bbc:	d301      	bcc.n	3bc2 <__clzsi2+0xe>
    3bbe:	0c00      	lsrs	r0, r0, #16
    3bc0:	3910      	subs	r1, #16
    3bc2:	0a1b      	lsrs	r3, r3, #8
    3bc4:	4298      	cmp	r0, r3
    3bc6:	d301      	bcc.n	3bcc <__clzsi2+0x18>
    3bc8:	0a00      	lsrs	r0, r0, #8
    3bca:	3908      	subs	r1, #8
    3bcc:	091b      	lsrs	r3, r3, #4
    3bce:	4298      	cmp	r0, r3
    3bd0:	d301      	bcc.n	3bd6 <__clzsi2+0x22>
    3bd2:	0900      	lsrs	r0, r0, #4
    3bd4:	3904      	subs	r1, #4
    3bd6:	a202      	add	r2, pc, #8	; (adr r2, 3be0 <__clzsi2+0x2c>)
    3bd8:	5c10      	ldrb	r0, [r2, r0]
    3bda:	1840      	adds	r0, r0, r1
    3bdc:	4770      	bx	lr
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	02020304 	.word	0x02020304
    3be4:	01010101 	.word	0x01010101
	...

00003bf0 <__libc_init_array>:
    3bf0:	b570      	push	{r4, r5, r6, lr}
    3bf2:	2600      	movs	r6, #0
    3bf4:	4d0c      	ldr	r5, [pc, #48]	; (3c28 <__libc_init_array+0x38>)
    3bf6:	4c0d      	ldr	r4, [pc, #52]	; (3c2c <__libc_init_array+0x3c>)
    3bf8:	1b64      	subs	r4, r4, r5
    3bfa:	10a4      	asrs	r4, r4, #2
    3bfc:	42a6      	cmp	r6, r4
    3bfe:	d109      	bne.n	3c14 <__libc_init_array+0x24>
    3c00:	2600      	movs	r6, #0
    3c02:	f001 f8d9 	bl	4db8 <_init>
    3c06:	4d0a      	ldr	r5, [pc, #40]	; (3c30 <__libc_init_array+0x40>)
    3c08:	4c0a      	ldr	r4, [pc, #40]	; (3c34 <__libc_init_array+0x44>)
    3c0a:	1b64      	subs	r4, r4, r5
    3c0c:	10a4      	asrs	r4, r4, #2
    3c0e:	42a6      	cmp	r6, r4
    3c10:	d105      	bne.n	3c1e <__libc_init_array+0x2e>
    3c12:	bd70      	pop	{r4, r5, r6, pc}
    3c14:	00b3      	lsls	r3, r6, #2
    3c16:	58eb      	ldr	r3, [r5, r3]
    3c18:	4798      	blx	r3
    3c1a:	3601      	adds	r6, #1
    3c1c:	e7ee      	b.n	3bfc <__libc_init_array+0xc>
    3c1e:	00b3      	lsls	r3, r6, #2
    3c20:	58eb      	ldr	r3, [r5, r3]
    3c22:	4798      	blx	r3
    3c24:	3601      	adds	r6, #1
    3c26:	e7f2      	b.n	3c0e <__libc_init_array+0x1e>
    3c28:	00004dc4 	.word	0x00004dc4
    3c2c:	00004dc4 	.word	0x00004dc4
    3c30:	00004dc4 	.word	0x00004dc4
    3c34:	00004dc8 	.word	0x00004dc8

00003c38 <memset>:
    3c38:	0003      	movs	r3, r0
    3c3a:	1882      	adds	r2, r0, r2
    3c3c:	4293      	cmp	r3, r2
    3c3e:	d100      	bne.n	3c42 <memset+0xa>
    3c40:	4770      	bx	lr
    3c42:	7019      	strb	r1, [r3, #0]
    3c44:	3301      	adds	r3, #1
    3c46:	e7f9      	b.n	3c3c <memset+0x4>

00003c48 <iprintf>:
    3c48:	b40f      	push	{r0, r1, r2, r3}
    3c4a:	4b0b      	ldr	r3, [pc, #44]	; (3c78 <iprintf+0x30>)
    3c4c:	b513      	push	{r0, r1, r4, lr}
    3c4e:	681c      	ldr	r4, [r3, #0]
    3c50:	2c00      	cmp	r4, #0
    3c52:	d005      	beq.n	3c60 <iprintf+0x18>
    3c54:	69a3      	ldr	r3, [r4, #24]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d102      	bne.n	3c60 <iprintf+0x18>
    3c5a:	0020      	movs	r0, r4
    3c5c:	f000 fa88 	bl	4170 <__sinit>
    3c60:	ab05      	add	r3, sp, #20
    3c62:	9a04      	ldr	r2, [sp, #16]
    3c64:	68a1      	ldr	r1, [r4, #8]
    3c66:	0020      	movs	r0, r4
    3c68:	9301      	str	r3, [sp, #4]
    3c6a:	f000 fc5d 	bl	4528 <_vfiprintf_r>
    3c6e:	bc16      	pop	{r1, r2, r4}
    3c70:	bc08      	pop	{r3}
    3c72:	b004      	add	sp, #16
    3c74:	4718      	bx	r3
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	20000018 	.word	0x20000018

00003c7c <setbuf>:
    3c7c:	424a      	negs	r2, r1
    3c7e:	414a      	adcs	r2, r1
    3c80:	2380      	movs	r3, #128	; 0x80
    3c82:	b510      	push	{r4, lr}
    3c84:	0052      	lsls	r2, r2, #1
    3c86:	00db      	lsls	r3, r3, #3
    3c88:	f000 f802 	bl	3c90 <setvbuf>
    3c8c:	bd10      	pop	{r4, pc}
	...

00003c90 <setvbuf>:
    3c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c92:	001d      	movs	r5, r3
    3c94:	4b4f      	ldr	r3, [pc, #316]	; (3dd4 <setvbuf+0x144>)
    3c96:	b085      	sub	sp, #20
    3c98:	681e      	ldr	r6, [r3, #0]
    3c9a:	0004      	movs	r4, r0
    3c9c:	000f      	movs	r7, r1
    3c9e:	9200      	str	r2, [sp, #0]
    3ca0:	2e00      	cmp	r6, #0
    3ca2:	d005      	beq.n	3cb0 <setvbuf+0x20>
    3ca4:	69b3      	ldr	r3, [r6, #24]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d102      	bne.n	3cb0 <setvbuf+0x20>
    3caa:	0030      	movs	r0, r6
    3cac:	f000 fa60 	bl	4170 <__sinit>
    3cb0:	4b49      	ldr	r3, [pc, #292]	; (3dd8 <setvbuf+0x148>)
    3cb2:	429c      	cmp	r4, r3
    3cb4:	d150      	bne.n	3d58 <setvbuf+0xc8>
    3cb6:	6874      	ldr	r4, [r6, #4]
    3cb8:	9b00      	ldr	r3, [sp, #0]
    3cba:	2b02      	cmp	r3, #2
    3cbc:	d005      	beq.n	3cca <setvbuf+0x3a>
    3cbe:	2b01      	cmp	r3, #1
    3cc0:	d900      	bls.n	3cc4 <setvbuf+0x34>
    3cc2:	e084      	b.n	3dce <setvbuf+0x13e>
    3cc4:	2d00      	cmp	r5, #0
    3cc6:	da00      	bge.n	3cca <setvbuf+0x3a>
    3cc8:	e081      	b.n	3dce <setvbuf+0x13e>
    3cca:	0021      	movs	r1, r4
    3ccc:	0030      	movs	r0, r6
    3cce:	f000 f9e1 	bl	4094 <_fflush_r>
    3cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3cd4:	2900      	cmp	r1, #0
    3cd6:	d008      	beq.n	3cea <setvbuf+0x5a>
    3cd8:	0023      	movs	r3, r4
    3cda:	3344      	adds	r3, #68	; 0x44
    3cdc:	4299      	cmp	r1, r3
    3cde:	d002      	beq.n	3ce6 <setvbuf+0x56>
    3ce0:	0030      	movs	r0, r6
    3ce2:	f000 fb51 	bl	4388 <_free_r>
    3ce6:	2300      	movs	r3, #0
    3ce8:	6363      	str	r3, [r4, #52]	; 0x34
    3cea:	2300      	movs	r3, #0
    3cec:	61a3      	str	r3, [r4, #24]
    3cee:	6063      	str	r3, [r4, #4]
    3cf0:	89a3      	ldrh	r3, [r4, #12]
    3cf2:	061b      	lsls	r3, r3, #24
    3cf4:	d503      	bpl.n	3cfe <setvbuf+0x6e>
    3cf6:	6921      	ldr	r1, [r4, #16]
    3cf8:	0030      	movs	r0, r6
    3cfa:	f000 fb45 	bl	4388 <_free_r>
    3cfe:	89a3      	ldrh	r3, [r4, #12]
    3d00:	4a36      	ldr	r2, [pc, #216]	; (3ddc <setvbuf+0x14c>)
    3d02:	4013      	ands	r3, r2
    3d04:	81a3      	strh	r3, [r4, #12]
    3d06:	9b00      	ldr	r3, [sp, #0]
    3d08:	2b02      	cmp	r3, #2
    3d0a:	d05a      	beq.n	3dc2 <setvbuf+0x132>
    3d0c:	ab03      	add	r3, sp, #12
    3d0e:	aa02      	add	r2, sp, #8
    3d10:	0021      	movs	r1, r4
    3d12:	0030      	movs	r0, r6
    3d14:	f000 fac2 	bl	429c <__swhatbuf_r>
    3d18:	89a3      	ldrh	r3, [r4, #12]
    3d1a:	4318      	orrs	r0, r3
    3d1c:	81a0      	strh	r0, [r4, #12]
    3d1e:	2d00      	cmp	r5, #0
    3d20:	d124      	bne.n	3d6c <setvbuf+0xdc>
    3d22:	9d02      	ldr	r5, [sp, #8]
    3d24:	0028      	movs	r0, r5
    3d26:	f000 fb25 	bl	4374 <malloc>
    3d2a:	9501      	str	r5, [sp, #4]
    3d2c:	1e07      	subs	r7, r0, #0
    3d2e:	d142      	bne.n	3db6 <setvbuf+0x126>
    3d30:	9b02      	ldr	r3, [sp, #8]
    3d32:	9301      	str	r3, [sp, #4]
    3d34:	42ab      	cmp	r3, r5
    3d36:	d139      	bne.n	3dac <setvbuf+0x11c>
    3d38:	2001      	movs	r0, #1
    3d3a:	4240      	negs	r0, r0
    3d3c:	2302      	movs	r3, #2
    3d3e:	89a2      	ldrh	r2, [r4, #12]
    3d40:	4313      	orrs	r3, r2
    3d42:	81a3      	strh	r3, [r4, #12]
    3d44:	2300      	movs	r3, #0
    3d46:	60a3      	str	r3, [r4, #8]
    3d48:	0023      	movs	r3, r4
    3d4a:	3347      	adds	r3, #71	; 0x47
    3d4c:	6023      	str	r3, [r4, #0]
    3d4e:	6123      	str	r3, [r4, #16]
    3d50:	2301      	movs	r3, #1
    3d52:	6163      	str	r3, [r4, #20]
    3d54:	b005      	add	sp, #20
    3d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d58:	4b21      	ldr	r3, [pc, #132]	; (3de0 <setvbuf+0x150>)
    3d5a:	429c      	cmp	r4, r3
    3d5c:	d101      	bne.n	3d62 <setvbuf+0xd2>
    3d5e:	68b4      	ldr	r4, [r6, #8]
    3d60:	e7aa      	b.n	3cb8 <setvbuf+0x28>
    3d62:	4b20      	ldr	r3, [pc, #128]	; (3de4 <setvbuf+0x154>)
    3d64:	429c      	cmp	r4, r3
    3d66:	d1a7      	bne.n	3cb8 <setvbuf+0x28>
    3d68:	68f4      	ldr	r4, [r6, #12]
    3d6a:	e7a5      	b.n	3cb8 <setvbuf+0x28>
    3d6c:	2f00      	cmp	r7, #0
    3d6e:	d0d9      	beq.n	3d24 <setvbuf+0x94>
    3d70:	69b3      	ldr	r3, [r6, #24]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d102      	bne.n	3d7c <setvbuf+0xec>
    3d76:	0030      	movs	r0, r6
    3d78:	f000 f9fa 	bl	4170 <__sinit>
    3d7c:	9b00      	ldr	r3, [sp, #0]
    3d7e:	2b01      	cmp	r3, #1
    3d80:	d103      	bne.n	3d8a <setvbuf+0xfa>
    3d82:	89a3      	ldrh	r3, [r4, #12]
    3d84:	9a00      	ldr	r2, [sp, #0]
    3d86:	431a      	orrs	r2, r3
    3d88:	81a2      	strh	r2, [r4, #12]
    3d8a:	2008      	movs	r0, #8
    3d8c:	89a3      	ldrh	r3, [r4, #12]
    3d8e:	6027      	str	r7, [r4, #0]
    3d90:	6127      	str	r7, [r4, #16]
    3d92:	6165      	str	r5, [r4, #20]
    3d94:	4018      	ands	r0, r3
    3d96:	d018      	beq.n	3dca <setvbuf+0x13a>
    3d98:	2001      	movs	r0, #1
    3d9a:	4018      	ands	r0, r3
    3d9c:	2300      	movs	r3, #0
    3d9e:	4298      	cmp	r0, r3
    3da0:	d011      	beq.n	3dc6 <setvbuf+0x136>
    3da2:	426d      	negs	r5, r5
    3da4:	60a3      	str	r3, [r4, #8]
    3da6:	61a5      	str	r5, [r4, #24]
    3da8:	0018      	movs	r0, r3
    3daa:	e7d3      	b.n	3d54 <setvbuf+0xc4>
    3dac:	9801      	ldr	r0, [sp, #4]
    3dae:	f000 fae1 	bl	4374 <malloc>
    3db2:	1e07      	subs	r7, r0, #0
    3db4:	d0c0      	beq.n	3d38 <setvbuf+0xa8>
    3db6:	2380      	movs	r3, #128	; 0x80
    3db8:	89a2      	ldrh	r2, [r4, #12]
    3dba:	9d01      	ldr	r5, [sp, #4]
    3dbc:	4313      	orrs	r3, r2
    3dbe:	81a3      	strh	r3, [r4, #12]
    3dc0:	e7d6      	b.n	3d70 <setvbuf+0xe0>
    3dc2:	2000      	movs	r0, #0
    3dc4:	e7ba      	b.n	3d3c <setvbuf+0xac>
    3dc6:	60a5      	str	r5, [r4, #8]
    3dc8:	e7c4      	b.n	3d54 <setvbuf+0xc4>
    3dca:	60a0      	str	r0, [r4, #8]
    3dcc:	e7c2      	b.n	3d54 <setvbuf+0xc4>
    3dce:	2001      	movs	r0, #1
    3dd0:	4240      	negs	r0, r0
    3dd2:	e7bf      	b.n	3d54 <setvbuf+0xc4>
    3dd4:	20000018 	.word	0x20000018
    3dd8:	00004d44 	.word	0x00004d44
    3ddc:	fffff35c 	.word	0xfffff35c
    3de0:	00004d64 	.word	0x00004d64
    3de4:	00004d24 	.word	0x00004d24

00003de8 <__swbuf_r>:
    3de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dea:	0005      	movs	r5, r0
    3dec:	000e      	movs	r6, r1
    3dee:	0014      	movs	r4, r2
    3df0:	2800      	cmp	r0, #0
    3df2:	d004      	beq.n	3dfe <__swbuf_r+0x16>
    3df4:	6983      	ldr	r3, [r0, #24]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d101      	bne.n	3dfe <__swbuf_r+0x16>
    3dfa:	f000 f9b9 	bl	4170 <__sinit>
    3dfe:	4b22      	ldr	r3, [pc, #136]	; (3e88 <__swbuf_r+0xa0>)
    3e00:	429c      	cmp	r4, r3
    3e02:	d12d      	bne.n	3e60 <__swbuf_r+0x78>
    3e04:	686c      	ldr	r4, [r5, #4]
    3e06:	69a3      	ldr	r3, [r4, #24]
    3e08:	60a3      	str	r3, [r4, #8]
    3e0a:	89a3      	ldrh	r3, [r4, #12]
    3e0c:	071b      	lsls	r3, r3, #28
    3e0e:	d531      	bpl.n	3e74 <__swbuf_r+0x8c>
    3e10:	6923      	ldr	r3, [r4, #16]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d02e      	beq.n	3e74 <__swbuf_r+0x8c>
    3e16:	6823      	ldr	r3, [r4, #0]
    3e18:	6922      	ldr	r2, [r4, #16]
    3e1a:	b2f7      	uxtb	r7, r6
    3e1c:	1a98      	subs	r0, r3, r2
    3e1e:	6963      	ldr	r3, [r4, #20]
    3e20:	b2f6      	uxtb	r6, r6
    3e22:	4298      	cmp	r0, r3
    3e24:	db05      	blt.n	3e32 <__swbuf_r+0x4a>
    3e26:	0021      	movs	r1, r4
    3e28:	0028      	movs	r0, r5
    3e2a:	f000 f933 	bl	4094 <_fflush_r>
    3e2e:	2800      	cmp	r0, #0
    3e30:	d126      	bne.n	3e80 <__swbuf_r+0x98>
    3e32:	68a3      	ldr	r3, [r4, #8]
    3e34:	3001      	adds	r0, #1
    3e36:	3b01      	subs	r3, #1
    3e38:	60a3      	str	r3, [r4, #8]
    3e3a:	6823      	ldr	r3, [r4, #0]
    3e3c:	1c5a      	adds	r2, r3, #1
    3e3e:	6022      	str	r2, [r4, #0]
    3e40:	701f      	strb	r7, [r3, #0]
    3e42:	6963      	ldr	r3, [r4, #20]
    3e44:	4298      	cmp	r0, r3
    3e46:	d004      	beq.n	3e52 <__swbuf_r+0x6a>
    3e48:	89a3      	ldrh	r3, [r4, #12]
    3e4a:	07db      	lsls	r3, r3, #31
    3e4c:	d51a      	bpl.n	3e84 <__swbuf_r+0x9c>
    3e4e:	2e0a      	cmp	r6, #10
    3e50:	d118      	bne.n	3e84 <__swbuf_r+0x9c>
    3e52:	0021      	movs	r1, r4
    3e54:	0028      	movs	r0, r5
    3e56:	f000 f91d 	bl	4094 <_fflush_r>
    3e5a:	2800      	cmp	r0, #0
    3e5c:	d012      	beq.n	3e84 <__swbuf_r+0x9c>
    3e5e:	e00f      	b.n	3e80 <__swbuf_r+0x98>
    3e60:	4b0a      	ldr	r3, [pc, #40]	; (3e8c <__swbuf_r+0xa4>)
    3e62:	429c      	cmp	r4, r3
    3e64:	d101      	bne.n	3e6a <__swbuf_r+0x82>
    3e66:	68ac      	ldr	r4, [r5, #8]
    3e68:	e7cd      	b.n	3e06 <__swbuf_r+0x1e>
    3e6a:	4b09      	ldr	r3, [pc, #36]	; (3e90 <__swbuf_r+0xa8>)
    3e6c:	429c      	cmp	r4, r3
    3e6e:	d1ca      	bne.n	3e06 <__swbuf_r+0x1e>
    3e70:	68ec      	ldr	r4, [r5, #12]
    3e72:	e7c8      	b.n	3e06 <__swbuf_r+0x1e>
    3e74:	0021      	movs	r1, r4
    3e76:	0028      	movs	r0, r5
    3e78:	f000 f80c 	bl	3e94 <__swsetup_r>
    3e7c:	2800      	cmp	r0, #0
    3e7e:	d0ca      	beq.n	3e16 <__swbuf_r+0x2e>
    3e80:	2601      	movs	r6, #1
    3e82:	4276      	negs	r6, r6
    3e84:	0030      	movs	r0, r6
    3e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e88:	00004d44 	.word	0x00004d44
    3e8c:	00004d64 	.word	0x00004d64
    3e90:	00004d24 	.word	0x00004d24

00003e94 <__swsetup_r>:
    3e94:	4b36      	ldr	r3, [pc, #216]	; (3f70 <__swsetup_r+0xdc>)
    3e96:	b570      	push	{r4, r5, r6, lr}
    3e98:	681d      	ldr	r5, [r3, #0]
    3e9a:	0006      	movs	r6, r0
    3e9c:	000c      	movs	r4, r1
    3e9e:	2d00      	cmp	r5, #0
    3ea0:	d005      	beq.n	3eae <__swsetup_r+0x1a>
    3ea2:	69ab      	ldr	r3, [r5, #24]
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d102      	bne.n	3eae <__swsetup_r+0x1a>
    3ea8:	0028      	movs	r0, r5
    3eaa:	f000 f961 	bl	4170 <__sinit>
    3eae:	4b31      	ldr	r3, [pc, #196]	; (3f74 <__swsetup_r+0xe0>)
    3eb0:	429c      	cmp	r4, r3
    3eb2:	d10f      	bne.n	3ed4 <__swsetup_r+0x40>
    3eb4:	686c      	ldr	r4, [r5, #4]
    3eb6:	230c      	movs	r3, #12
    3eb8:	5ee2      	ldrsh	r2, [r4, r3]
    3eba:	b293      	uxth	r3, r2
    3ebc:	0719      	lsls	r1, r3, #28
    3ebe:	d42d      	bmi.n	3f1c <__swsetup_r+0x88>
    3ec0:	06d9      	lsls	r1, r3, #27
    3ec2:	d411      	bmi.n	3ee8 <__swsetup_r+0x54>
    3ec4:	2309      	movs	r3, #9
    3ec6:	2001      	movs	r0, #1
    3ec8:	6033      	str	r3, [r6, #0]
    3eca:	3337      	adds	r3, #55	; 0x37
    3ecc:	4313      	orrs	r3, r2
    3ece:	81a3      	strh	r3, [r4, #12]
    3ed0:	4240      	negs	r0, r0
    3ed2:	bd70      	pop	{r4, r5, r6, pc}
    3ed4:	4b28      	ldr	r3, [pc, #160]	; (3f78 <__swsetup_r+0xe4>)
    3ed6:	429c      	cmp	r4, r3
    3ed8:	d101      	bne.n	3ede <__swsetup_r+0x4a>
    3eda:	68ac      	ldr	r4, [r5, #8]
    3edc:	e7eb      	b.n	3eb6 <__swsetup_r+0x22>
    3ede:	4b27      	ldr	r3, [pc, #156]	; (3f7c <__swsetup_r+0xe8>)
    3ee0:	429c      	cmp	r4, r3
    3ee2:	d1e8      	bne.n	3eb6 <__swsetup_r+0x22>
    3ee4:	68ec      	ldr	r4, [r5, #12]
    3ee6:	e7e6      	b.n	3eb6 <__swsetup_r+0x22>
    3ee8:	075b      	lsls	r3, r3, #29
    3eea:	d513      	bpl.n	3f14 <__swsetup_r+0x80>
    3eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3eee:	2900      	cmp	r1, #0
    3ef0:	d008      	beq.n	3f04 <__swsetup_r+0x70>
    3ef2:	0023      	movs	r3, r4
    3ef4:	3344      	adds	r3, #68	; 0x44
    3ef6:	4299      	cmp	r1, r3
    3ef8:	d002      	beq.n	3f00 <__swsetup_r+0x6c>
    3efa:	0030      	movs	r0, r6
    3efc:	f000 fa44 	bl	4388 <_free_r>
    3f00:	2300      	movs	r3, #0
    3f02:	6363      	str	r3, [r4, #52]	; 0x34
    3f04:	2224      	movs	r2, #36	; 0x24
    3f06:	89a3      	ldrh	r3, [r4, #12]
    3f08:	4393      	bics	r3, r2
    3f0a:	81a3      	strh	r3, [r4, #12]
    3f0c:	2300      	movs	r3, #0
    3f0e:	6063      	str	r3, [r4, #4]
    3f10:	6923      	ldr	r3, [r4, #16]
    3f12:	6023      	str	r3, [r4, #0]
    3f14:	2308      	movs	r3, #8
    3f16:	89a2      	ldrh	r2, [r4, #12]
    3f18:	4313      	orrs	r3, r2
    3f1a:	81a3      	strh	r3, [r4, #12]
    3f1c:	6923      	ldr	r3, [r4, #16]
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d10b      	bne.n	3f3a <__swsetup_r+0xa6>
    3f22:	21a0      	movs	r1, #160	; 0xa0
    3f24:	2280      	movs	r2, #128	; 0x80
    3f26:	89a3      	ldrh	r3, [r4, #12]
    3f28:	0089      	lsls	r1, r1, #2
    3f2a:	0092      	lsls	r2, r2, #2
    3f2c:	400b      	ands	r3, r1
    3f2e:	4293      	cmp	r3, r2
    3f30:	d003      	beq.n	3f3a <__swsetup_r+0xa6>
    3f32:	0021      	movs	r1, r4
    3f34:	0030      	movs	r0, r6
    3f36:	f000 f9d9 	bl	42ec <__smakebuf_r>
    3f3a:	2301      	movs	r3, #1
    3f3c:	89a2      	ldrh	r2, [r4, #12]
    3f3e:	4013      	ands	r3, r2
    3f40:	d011      	beq.n	3f66 <__swsetup_r+0xd2>
    3f42:	2300      	movs	r3, #0
    3f44:	60a3      	str	r3, [r4, #8]
    3f46:	6963      	ldr	r3, [r4, #20]
    3f48:	425b      	negs	r3, r3
    3f4a:	61a3      	str	r3, [r4, #24]
    3f4c:	2000      	movs	r0, #0
    3f4e:	6923      	ldr	r3, [r4, #16]
    3f50:	4283      	cmp	r3, r0
    3f52:	d1be      	bne.n	3ed2 <__swsetup_r+0x3e>
    3f54:	230c      	movs	r3, #12
    3f56:	5ee2      	ldrsh	r2, [r4, r3]
    3f58:	0613      	lsls	r3, r2, #24
    3f5a:	d5ba      	bpl.n	3ed2 <__swsetup_r+0x3e>
    3f5c:	2340      	movs	r3, #64	; 0x40
    3f5e:	4313      	orrs	r3, r2
    3f60:	81a3      	strh	r3, [r4, #12]
    3f62:	3801      	subs	r0, #1
    3f64:	e7b5      	b.n	3ed2 <__swsetup_r+0x3e>
    3f66:	0792      	lsls	r2, r2, #30
    3f68:	d400      	bmi.n	3f6c <__swsetup_r+0xd8>
    3f6a:	6963      	ldr	r3, [r4, #20]
    3f6c:	60a3      	str	r3, [r4, #8]
    3f6e:	e7ed      	b.n	3f4c <__swsetup_r+0xb8>
    3f70:	20000018 	.word	0x20000018
    3f74:	00004d44 	.word	0x00004d44
    3f78:	00004d64 	.word	0x00004d64
    3f7c:	00004d24 	.word	0x00004d24

00003f80 <__sflush_r>:
    3f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f82:	898a      	ldrh	r2, [r1, #12]
    3f84:	0005      	movs	r5, r0
    3f86:	000c      	movs	r4, r1
    3f88:	0713      	lsls	r3, r2, #28
    3f8a:	d460      	bmi.n	404e <__sflush_r+0xce>
    3f8c:	684b      	ldr	r3, [r1, #4]
    3f8e:	2b00      	cmp	r3, #0
    3f90:	dc04      	bgt.n	3f9c <__sflush_r+0x1c>
    3f92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3f94:	2b00      	cmp	r3, #0
    3f96:	dc01      	bgt.n	3f9c <__sflush_r+0x1c>
    3f98:	2000      	movs	r0, #0
    3f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3f9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3f9e:	2f00      	cmp	r7, #0
    3fa0:	d0fa      	beq.n	3f98 <__sflush_r+0x18>
    3fa2:	2300      	movs	r3, #0
    3fa4:	682e      	ldr	r6, [r5, #0]
    3fa6:	602b      	str	r3, [r5, #0]
    3fa8:	2380      	movs	r3, #128	; 0x80
    3faa:	015b      	lsls	r3, r3, #5
    3fac:	401a      	ands	r2, r3
    3fae:	d034      	beq.n	401a <__sflush_r+0x9a>
    3fb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3fb2:	89a3      	ldrh	r3, [r4, #12]
    3fb4:	075b      	lsls	r3, r3, #29
    3fb6:	d506      	bpl.n	3fc6 <__sflush_r+0x46>
    3fb8:	6863      	ldr	r3, [r4, #4]
    3fba:	1ac0      	subs	r0, r0, r3
    3fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d001      	beq.n	3fc6 <__sflush_r+0x46>
    3fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3fc4:	1ac0      	subs	r0, r0, r3
    3fc6:	0002      	movs	r2, r0
    3fc8:	6a21      	ldr	r1, [r4, #32]
    3fca:	2300      	movs	r3, #0
    3fcc:	0028      	movs	r0, r5
    3fce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3fd0:	47b8      	blx	r7
    3fd2:	89a1      	ldrh	r1, [r4, #12]
    3fd4:	1c43      	adds	r3, r0, #1
    3fd6:	d106      	bne.n	3fe6 <__sflush_r+0x66>
    3fd8:	682b      	ldr	r3, [r5, #0]
    3fda:	2b1d      	cmp	r3, #29
    3fdc:	d831      	bhi.n	4042 <__sflush_r+0xc2>
    3fde:	4a2c      	ldr	r2, [pc, #176]	; (4090 <__sflush_r+0x110>)
    3fe0:	40da      	lsrs	r2, r3
    3fe2:	07d3      	lsls	r3, r2, #31
    3fe4:	d52d      	bpl.n	4042 <__sflush_r+0xc2>
    3fe6:	2300      	movs	r3, #0
    3fe8:	6063      	str	r3, [r4, #4]
    3fea:	6923      	ldr	r3, [r4, #16]
    3fec:	6023      	str	r3, [r4, #0]
    3fee:	04cb      	lsls	r3, r1, #19
    3ff0:	d505      	bpl.n	3ffe <__sflush_r+0x7e>
    3ff2:	1c43      	adds	r3, r0, #1
    3ff4:	d102      	bne.n	3ffc <__sflush_r+0x7c>
    3ff6:	682b      	ldr	r3, [r5, #0]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d100      	bne.n	3ffe <__sflush_r+0x7e>
    3ffc:	6560      	str	r0, [r4, #84]	; 0x54
    3ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4000:	602e      	str	r6, [r5, #0]
    4002:	2900      	cmp	r1, #0
    4004:	d0c8      	beq.n	3f98 <__sflush_r+0x18>
    4006:	0023      	movs	r3, r4
    4008:	3344      	adds	r3, #68	; 0x44
    400a:	4299      	cmp	r1, r3
    400c:	d002      	beq.n	4014 <__sflush_r+0x94>
    400e:	0028      	movs	r0, r5
    4010:	f000 f9ba 	bl	4388 <_free_r>
    4014:	2000      	movs	r0, #0
    4016:	6360      	str	r0, [r4, #52]	; 0x34
    4018:	e7bf      	b.n	3f9a <__sflush_r+0x1a>
    401a:	2301      	movs	r3, #1
    401c:	6a21      	ldr	r1, [r4, #32]
    401e:	0028      	movs	r0, r5
    4020:	47b8      	blx	r7
    4022:	1c43      	adds	r3, r0, #1
    4024:	d1c5      	bne.n	3fb2 <__sflush_r+0x32>
    4026:	682b      	ldr	r3, [r5, #0]
    4028:	2b00      	cmp	r3, #0
    402a:	d0c2      	beq.n	3fb2 <__sflush_r+0x32>
    402c:	2b1d      	cmp	r3, #29
    402e:	d001      	beq.n	4034 <__sflush_r+0xb4>
    4030:	2b16      	cmp	r3, #22
    4032:	d101      	bne.n	4038 <__sflush_r+0xb8>
    4034:	602e      	str	r6, [r5, #0]
    4036:	e7af      	b.n	3f98 <__sflush_r+0x18>
    4038:	2340      	movs	r3, #64	; 0x40
    403a:	89a2      	ldrh	r2, [r4, #12]
    403c:	4313      	orrs	r3, r2
    403e:	81a3      	strh	r3, [r4, #12]
    4040:	e7ab      	b.n	3f9a <__sflush_r+0x1a>
    4042:	2340      	movs	r3, #64	; 0x40
    4044:	430b      	orrs	r3, r1
    4046:	2001      	movs	r0, #1
    4048:	81a3      	strh	r3, [r4, #12]
    404a:	4240      	negs	r0, r0
    404c:	e7a5      	b.n	3f9a <__sflush_r+0x1a>
    404e:	690f      	ldr	r7, [r1, #16]
    4050:	2f00      	cmp	r7, #0
    4052:	d0a1      	beq.n	3f98 <__sflush_r+0x18>
    4054:	680b      	ldr	r3, [r1, #0]
    4056:	600f      	str	r7, [r1, #0]
    4058:	1bdb      	subs	r3, r3, r7
    405a:	9301      	str	r3, [sp, #4]
    405c:	2300      	movs	r3, #0
    405e:	0792      	lsls	r2, r2, #30
    4060:	d100      	bne.n	4064 <__sflush_r+0xe4>
    4062:	694b      	ldr	r3, [r1, #20]
    4064:	60a3      	str	r3, [r4, #8]
    4066:	9b01      	ldr	r3, [sp, #4]
    4068:	2b00      	cmp	r3, #0
    406a:	dc00      	bgt.n	406e <__sflush_r+0xee>
    406c:	e794      	b.n	3f98 <__sflush_r+0x18>
    406e:	9b01      	ldr	r3, [sp, #4]
    4070:	003a      	movs	r2, r7
    4072:	6a21      	ldr	r1, [r4, #32]
    4074:	0028      	movs	r0, r5
    4076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4078:	47b0      	blx	r6
    407a:	2800      	cmp	r0, #0
    407c:	dc03      	bgt.n	4086 <__sflush_r+0x106>
    407e:	2340      	movs	r3, #64	; 0x40
    4080:	89a2      	ldrh	r2, [r4, #12]
    4082:	4313      	orrs	r3, r2
    4084:	e7df      	b.n	4046 <__sflush_r+0xc6>
    4086:	9b01      	ldr	r3, [sp, #4]
    4088:	183f      	adds	r7, r7, r0
    408a:	1a1b      	subs	r3, r3, r0
    408c:	9301      	str	r3, [sp, #4]
    408e:	e7ea      	b.n	4066 <__sflush_r+0xe6>
    4090:	20400001 	.word	0x20400001

00004094 <_fflush_r>:
    4094:	690b      	ldr	r3, [r1, #16]
    4096:	b570      	push	{r4, r5, r6, lr}
    4098:	0005      	movs	r5, r0
    409a:	000c      	movs	r4, r1
    409c:	2b00      	cmp	r3, #0
    409e:	d101      	bne.n	40a4 <_fflush_r+0x10>
    40a0:	2000      	movs	r0, #0
    40a2:	bd70      	pop	{r4, r5, r6, pc}
    40a4:	2800      	cmp	r0, #0
    40a6:	d004      	beq.n	40b2 <_fflush_r+0x1e>
    40a8:	6983      	ldr	r3, [r0, #24]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d101      	bne.n	40b2 <_fflush_r+0x1e>
    40ae:	f000 f85f 	bl	4170 <__sinit>
    40b2:	4b0b      	ldr	r3, [pc, #44]	; (40e0 <_fflush_r+0x4c>)
    40b4:	429c      	cmp	r4, r3
    40b6:	d109      	bne.n	40cc <_fflush_r+0x38>
    40b8:	686c      	ldr	r4, [r5, #4]
    40ba:	220c      	movs	r2, #12
    40bc:	5ea3      	ldrsh	r3, [r4, r2]
    40be:	2b00      	cmp	r3, #0
    40c0:	d0ee      	beq.n	40a0 <_fflush_r+0xc>
    40c2:	0021      	movs	r1, r4
    40c4:	0028      	movs	r0, r5
    40c6:	f7ff ff5b 	bl	3f80 <__sflush_r>
    40ca:	e7ea      	b.n	40a2 <_fflush_r+0xe>
    40cc:	4b05      	ldr	r3, [pc, #20]	; (40e4 <_fflush_r+0x50>)
    40ce:	429c      	cmp	r4, r3
    40d0:	d101      	bne.n	40d6 <_fflush_r+0x42>
    40d2:	68ac      	ldr	r4, [r5, #8]
    40d4:	e7f1      	b.n	40ba <_fflush_r+0x26>
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <_fflush_r+0x54>)
    40d8:	429c      	cmp	r4, r3
    40da:	d1ee      	bne.n	40ba <_fflush_r+0x26>
    40dc:	68ec      	ldr	r4, [r5, #12]
    40de:	e7ec      	b.n	40ba <_fflush_r+0x26>
    40e0:	00004d44 	.word	0x00004d44
    40e4:	00004d64 	.word	0x00004d64
    40e8:	00004d24 	.word	0x00004d24

000040ec <_cleanup_r>:
    40ec:	b510      	push	{r4, lr}
    40ee:	4902      	ldr	r1, [pc, #8]	; (40f8 <_cleanup_r+0xc>)
    40f0:	f000 f8b2 	bl	4258 <_fwalk_reent>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	46c0      	nop			; (mov r8, r8)
    40f8:	00004095 	.word	0x00004095

000040fc <std.isra.0>:
    40fc:	2300      	movs	r3, #0
    40fe:	b510      	push	{r4, lr}
    4100:	0004      	movs	r4, r0
    4102:	6003      	str	r3, [r0, #0]
    4104:	6043      	str	r3, [r0, #4]
    4106:	6083      	str	r3, [r0, #8]
    4108:	8181      	strh	r1, [r0, #12]
    410a:	6643      	str	r3, [r0, #100]	; 0x64
    410c:	81c2      	strh	r2, [r0, #14]
    410e:	6103      	str	r3, [r0, #16]
    4110:	6143      	str	r3, [r0, #20]
    4112:	6183      	str	r3, [r0, #24]
    4114:	0019      	movs	r1, r3
    4116:	2208      	movs	r2, #8
    4118:	305c      	adds	r0, #92	; 0x5c
    411a:	f7ff fd8d 	bl	3c38 <memset>
    411e:	4b05      	ldr	r3, [pc, #20]	; (4134 <std.isra.0+0x38>)
    4120:	6224      	str	r4, [r4, #32]
    4122:	6263      	str	r3, [r4, #36]	; 0x24
    4124:	4b04      	ldr	r3, [pc, #16]	; (4138 <std.isra.0+0x3c>)
    4126:	62a3      	str	r3, [r4, #40]	; 0x28
    4128:	4b04      	ldr	r3, [pc, #16]	; (413c <std.isra.0+0x40>)
    412a:	62e3      	str	r3, [r4, #44]	; 0x2c
    412c:	4b04      	ldr	r3, [pc, #16]	; (4140 <std.isra.0+0x44>)
    412e:	6323      	str	r3, [r4, #48]	; 0x30
    4130:	bd10      	pop	{r4, pc}
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	00004a95 	.word	0x00004a95
    4138:	00004abd 	.word	0x00004abd
    413c:	00004af5 	.word	0x00004af5
    4140:	00004b21 	.word	0x00004b21

00004144 <__sfmoreglue>:
    4144:	b570      	push	{r4, r5, r6, lr}
    4146:	2568      	movs	r5, #104	; 0x68
    4148:	1e4a      	subs	r2, r1, #1
    414a:	4355      	muls	r5, r2
    414c:	000e      	movs	r6, r1
    414e:	0029      	movs	r1, r5
    4150:	3174      	adds	r1, #116	; 0x74
    4152:	f000 f963 	bl	441c <_malloc_r>
    4156:	1e04      	subs	r4, r0, #0
    4158:	d008      	beq.n	416c <__sfmoreglue+0x28>
    415a:	2100      	movs	r1, #0
    415c:	002a      	movs	r2, r5
    415e:	6001      	str	r1, [r0, #0]
    4160:	6046      	str	r6, [r0, #4]
    4162:	300c      	adds	r0, #12
    4164:	60a0      	str	r0, [r4, #8]
    4166:	3268      	adds	r2, #104	; 0x68
    4168:	f7ff fd66 	bl	3c38 <memset>
    416c:	0020      	movs	r0, r4
    416e:	bd70      	pop	{r4, r5, r6, pc}

00004170 <__sinit>:
    4170:	6983      	ldr	r3, [r0, #24]
    4172:	b513      	push	{r0, r1, r4, lr}
    4174:	0004      	movs	r4, r0
    4176:	2b00      	cmp	r3, #0
    4178:	d128      	bne.n	41cc <__sinit+0x5c>
    417a:	6483      	str	r3, [r0, #72]	; 0x48
    417c:	64c3      	str	r3, [r0, #76]	; 0x4c
    417e:	6503      	str	r3, [r0, #80]	; 0x50
    4180:	4b13      	ldr	r3, [pc, #76]	; (41d0 <__sinit+0x60>)
    4182:	4a14      	ldr	r2, [pc, #80]	; (41d4 <__sinit+0x64>)
    4184:	681b      	ldr	r3, [r3, #0]
    4186:	6282      	str	r2, [r0, #40]	; 0x28
    4188:	9301      	str	r3, [sp, #4]
    418a:	4298      	cmp	r0, r3
    418c:	d101      	bne.n	4192 <__sinit+0x22>
    418e:	2301      	movs	r3, #1
    4190:	6183      	str	r3, [r0, #24]
    4192:	0020      	movs	r0, r4
    4194:	f000 f820 	bl	41d8 <__sfp>
    4198:	6060      	str	r0, [r4, #4]
    419a:	0020      	movs	r0, r4
    419c:	f000 f81c 	bl	41d8 <__sfp>
    41a0:	60a0      	str	r0, [r4, #8]
    41a2:	0020      	movs	r0, r4
    41a4:	f000 f818 	bl	41d8 <__sfp>
    41a8:	2200      	movs	r2, #0
    41aa:	60e0      	str	r0, [r4, #12]
    41ac:	2104      	movs	r1, #4
    41ae:	6860      	ldr	r0, [r4, #4]
    41b0:	f7ff ffa4 	bl	40fc <std.isra.0>
    41b4:	2201      	movs	r2, #1
    41b6:	2109      	movs	r1, #9
    41b8:	68a0      	ldr	r0, [r4, #8]
    41ba:	f7ff ff9f 	bl	40fc <std.isra.0>
    41be:	2202      	movs	r2, #2
    41c0:	2112      	movs	r1, #18
    41c2:	68e0      	ldr	r0, [r4, #12]
    41c4:	f7ff ff9a 	bl	40fc <std.isra.0>
    41c8:	2301      	movs	r3, #1
    41ca:	61a3      	str	r3, [r4, #24]
    41cc:	bd13      	pop	{r0, r1, r4, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	00004d20 	.word	0x00004d20
    41d4:	000040ed 	.word	0x000040ed

000041d8 <__sfp>:
    41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41da:	4b1e      	ldr	r3, [pc, #120]	; (4254 <__sfp+0x7c>)
    41dc:	0007      	movs	r7, r0
    41de:	681e      	ldr	r6, [r3, #0]
    41e0:	69b3      	ldr	r3, [r6, #24]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d102      	bne.n	41ec <__sfp+0x14>
    41e6:	0030      	movs	r0, r6
    41e8:	f7ff ffc2 	bl	4170 <__sinit>
    41ec:	3648      	adds	r6, #72	; 0x48
    41ee:	68b4      	ldr	r4, [r6, #8]
    41f0:	6873      	ldr	r3, [r6, #4]
    41f2:	3b01      	subs	r3, #1
    41f4:	d504      	bpl.n	4200 <__sfp+0x28>
    41f6:	6833      	ldr	r3, [r6, #0]
    41f8:	2b00      	cmp	r3, #0
    41fa:	d007      	beq.n	420c <__sfp+0x34>
    41fc:	6836      	ldr	r6, [r6, #0]
    41fe:	e7f6      	b.n	41ee <__sfp+0x16>
    4200:	220c      	movs	r2, #12
    4202:	5ea5      	ldrsh	r5, [r4, r2]
    4204:	2d00      	cmp	r5, #0
    4206:	d00d      	beq.n	4224 <__sfp+0x4c>
    4208:	3468      	adds	r4, #104	; 0x68
    420a:	e7f2      	b.n	41f2 <__sfp+0x1a>
    420c:	2104      	movs	r1, #4
    420e:	0038      	movs	r0, r7
    4210:	f7ff ff98 	bl	4144 <__sfmoreglue>
    4214:	6030      	str	r0, [r6, #0]
    4216:	2800      	cmp	r0, #0
    4218:	d1f0      	bne.n	41fc <__sfp+0x24>
    421a:	230c      	movs	r3, #12
    421c:	0004      	movs	r4, r0
    421e:	603b      	str	r3, [r7, #0]
    4220:	0020      	movs	r0, r4
    4222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4224:	2301      	movs	r3, #1
    4226:	0020      	movs	r0, r4
    4228:	425b      	negs	r3, r3
    422a:	81e3      	strh	r3, [r4, #14]
    422c:	3302      	adds	r3, #2
    422e:	81a3      	strh	r3, [r4, #12]
    4230:	6665      	str	r5, [r4, #100]	; 0x64
    4232:	6025      	str	r5, [r4, #0]
    4234:	60a5      	str	r5, [r4, #8]
    4236:	6065      	str	r5, [r4, #4]
    4238:	6125      	str	r5, [r4, #16]
    423a:	6165      	str	r5, [r4, #20]
    423c:	61a5      	str	r5, [r4, #24]
    423e:	2208      	movs	r2, #8
    4240:	0029      	movs	r1, r5
    4242:	305c      	adds	r0, #92	; 0x5c
    4244:	f7ff fcf8 	bl	3c38 <memset>
    4248:	6365      	str	r5, [r4, #52]	; 0x34
    424a:	63a5      	str	r5, [r4, #56]	; 0x38
    424c:	64a5      	str	r5, [r4, #72]	; 0x48
    424e:	64e5      	str	r5, [r4, #76]	; 0x4c
    4250:	e7e6      	b.n	4220 <__sfp+0x48>
    4252:	46c0      	nop			; (mov r8, r8)
    4254:	00004d20 	.word	0x00004d20

00004258 <_fwalk_reent>:
    4258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    425a:	0004      	movs	r4, r0
    425c:	0007      	movs	r7, r0
    425e:	2600      	movs	r6, #0
    4260:	9101      	str	r1, [sp, #4]
    4262:	3448      	adds	r4, #72	; 0x48
    4264:	2c00      	cmp	r4, #0
    4266:	d101      	bne.n	426c <_fwalk_reent+0x14>
    4268:	0030      	movs	r0, r6
    426a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    426c:	6863      	ldr	r3, [r4, #4]
    426e:	68a5      	ldr	r5, [r4, #8]
    4270:	9300      	str	r3, [sp, #0]
    4272:	9b00      	ldr	r3, [sp, #0]
    4274:	3b01      	subs	r3, #1
    4276:	9300      	str	r3, [sp, #0]
    4278:	d501      	bpl.n	427e <_fwalk_reent+0x26>
    427a:	6824      	ldr	r4, [r4, #0]
    427c:	e7f2      	b.n	4264 <_fwalk_reent+0xc>
    427e:	89ab      	ldrh	r3, [r5, #12]
    4280:	2b01      	cmp	r3, #1
    4282:	d908      	bls.n	4296 <_fwalk_reent+0x3e>
    4284:	220e      	movs	r2, #14
    4286:	5eab      	ldrsh	r3, [r5, r2]
    4288:	3301      	adds	r3, #1
    428a:	d004      	beq.n	4296 <_fwalk_reent+0x3e>
    428c:	0029      	movs	r1, r5
    428e:	0038      	movs	r0, r7
    4290:	9b01      	ldr	r3, [sp, #4]
    4292:	4798      	blx	r3
    4294:	4306      	orrs	r6, r0
    4296:	3568      	adds	r5, #104	; 0x68
    4298:	e7eb      	b.n	4272 <_fwalk_reent+0x1a>
	...

0000429c <__swhatbuf_r>:
    429c:	b570      	push	{r4, r5, r6, lr}
    429e:	000e      	movs	r6, r1
    42a0:	001d      	movs	r5, r3
    42a2:	230e      	movs	r3, #14
    42a4:	5ec9      	ldrsh	r1, [r1, r3]
    42a6:	b090      	sub	sp, #64	; 0x40
    42a8:	0014      	movs	r4, r2
    42aa:	2900      	cmp	r1, #0
    42ac:	da07      	bge.n	42be <__swhatbuf_r+0x22>
    42ae:	2300      	movs	r3, #0
    42b0:	602b      	str	r3, [r5, #0]
    42b2:	89b3      	ldrh	r3, [r6, #12]
    42b4:	061b      	lsls	r3, r3, #24
    42b6:	d411      	bmi.n	42dc <__swhatbuf_r+0x40>
    42b8:	2380      	movs	r3, #128	; 0x80
    42ba:	00db      	lsls	r3, r3, #3
    42bc:	e00f      	b.n	42de <__swhatbuf_r+0x42>
    42be:	aa01      	add	r2, sp, #4
    42c0:	f000 fc5a 	bl	4b78 <_fstat_r>
    42c4:	2800      	cmp	r0, #0
    42c6:	dbf2      	blt.n	42ae <__swhatbuf_r+0x12>
    42c8:	22f0      	movs	r2, #240	; 0xf0
    42ca:	9b02      	ldr	r3, [sp, #8]
    42cc:	0212      	lsls	r2, r2, #8
    42ce:	4013      	ands	r3, r2
    42d0:	4a05      	ldr	r2, [pc, #20]	; (42e8 <__swhatbuf_r+0x4c>)
    42d2:	189b      	adds	r3, r3, r2
    42d4:	425a      	negs	r2, r3
    42d6:	4153      	adcs	r3, r2
    42d8:	602b      	str	r3, [r5, #0]
    42da:	e7ed      	b.n	42b8 <__swhatbuf_r+0x1c>
    42dc:	2340      	movs	r3, #64	; 0x40
    42de:	2000      	movs	r0, #0
    42e0:	6023      	str	r3, [r4, #0]
    42e2:	b010      	add	sp, #64	; 0x40
    42e4:	bd70      	pop	{r4, r5, r6, pc}
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	ffffe000 	.word	0xffffe000

000042ec <__smakebuf_r>:
    42ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42ee:	2602      	movs	r6, #2
    42f0:	898b      	ldrh	r3, [r1, #12]
    42f2:	0005      	movs	r5, r0
    42f4:	000c      	movs	r4, r1
    42f6:	4233      	tst	r3, r6
    42f8:	d006      	beq.n	4308 <__smakebuf_r+0x1c>
    42fa:	0023      	movs	r3, r4
    42fc:	3347      	adds	r3, #71	; 0x47
    42fe:	6023      	str	r3, [r4, #0]
    4300:	6123      	str	r3, [r4, #16]
    4302:	2301      	movs	r3, #1
    4304:	6163      	str	r3, [r4, #20]
    4306:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4308:	ab01      	add	r3, sp, #4
    430a:	466a      	mov	r2, sp
    430c:	f7ff ffc6 	bl	429c <__swhatbuf_r>
    4310:	9900      	ldr	r1, [sp, #0]
    4312:	0007      	movs	r7, r0
    4314:	0028      	movs	r0, r5
    4316:	f000 f881 	bl	441c <_malloc_r>
    431a:	2800      	cmp	r0, #0
    431c:	d108      	bne.n	4330 <__smakebuf_r+0x44>
    431e:	220c      	movs	r2, #12
    4320:	5ea3      	ldrsh	r3, [r4, r2]
    4322:	059a      	lsls	r2, r3, #22
    4324:	d4ef      	bmi.n	4306 <__smakebuf_r+0x1a>
    4326:	2203      	movs	r2, #3
    4328:	4393      	bics	r3, r2
    432a:	431e      	orrs	r6, r3
    432c:	81a6      	strh	r6, [r4, #12]
    432e:	e7e4      	b.n	42fa <__smakebuf_r+0xe>
    4330:	4b0f      	ldr	r3, [pc, #60]	; (4370 <__smakebuf_r+0x84>)
    4332:	62ab      	str	r3, [r5, #40]	; 0x28
    4334:	2380      	movs	r3, #128	; 0x80
    4336:	89a2      	ldrh	r2, [r4, #12]
    4338:	6020      	str	r0, [r4, #0]
    433a:	4313      	orrs	r3, r2
    433c:	81a3      	strh	r3, [r4, #12]
    433e:	9b00      	ldr	r3, [sp, #0]
    4340:	6120      	str	r0, [r4, #16]
    4342:	6163      	str	r3, [r4, #20]
    4344:	9b01      	ldr	r3, [sp, #4]
    4346:	2b00      	cmp	r3, #0
    4348:	d00d      	beq.n	4366 <__smakebuf_r+0x7a>
    434a:	230e      	movs	r3, #14
    434c:	5ee1      	ldrsh	r1, [r4, r3]
    434e:	0028      	movs	r0, r5
    4350:	f000 fc24 	bl	4b9c <_isatty_r>
    4354:	2800      	cmp	r0, #0
    4356:	d006      	beq.n	4366 <__smakebuf_r+0x7a>
    4358:	2203      	movs	r2, #3
    435a:	89a3      	ldrh	r3, [r4, #12]
    435c:	4393      	bics	r3, r2
    435e:	001a      	movs	r2, r3
    4360:	2301      	movs	r3, #1
    4362:	4313      	orrs	r3, r2
    4364:	81a3      	strh	r3, [r4, #12]
    4366:	89a0      	ldrh	r0, [r4, #12]
    4368:	4338      	orrs	r0, r7
    436a:	81a0      	strh	r0, [r4, #12]
    436c:	e7cb      	b.n	4306 <__smakebuf_r+0x1a>
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	000040ed 	.word	0x000040ed

00004374 <malloc>:
    4374:	b510      	push	{r4, lr}
    4376:	4b03      	ldr	r3, [pc, #12]	; (4384 <malloc+0x10>)
    4378:	0001      	movs	r1, r0
    437a:	6818      	ldr	r0, [r3, #0]
    437c:	f000 f84e 	bl	441c <_malloc_r>
    4380:	bd10      	pop	{r4, pc}
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	20000018 	.word	0x20000018

00004388 <_free_r>:
    4388:	b570      	push	{r4, r5, r6, lr}
    438a:	0005      	movs	r5, r0
    438c:	2900      	cmp	r1, #0
    438e:	d010      	beq.n	43b2 <_free_r+0x2a>
    4390:	1f0c      	subs	r4, r1, #4
    4392:	6823      	ldr	r3, [r4, #0]
    4394:	2b00      	cmp	r3, #0
    4396:	da00      	bge.n	439a <_free_r+0x12>
    4398:	18e4      	adds	r4, r4, r3
    439a:	0028      	movs	r0, r5
    439c:	f000 fc2f 	bl	4bfe <__malloc_lock>
    43a0:	4a1d      	ldr	r2, [pc, #116]	; (4418 <_free_r+0x90>)
    43a2:	6813      	ldr	r3, [r2, #0]
    43a4:	2b00      	cmp	r3, #0
    43a6:	d105      	bne.n	43b4 <_free_r+0x2c>
    43a8:	6063      	str	r3, [r4, #4]
    43aa:	6014      	str	r4, [r2, #0]
    43ac:	0028      	movs	r0, r5
    43ae:	f000 fc27 	bl	4c00 <__malloc_unlock>
    43b2:	bd70      	pop	{r4, r5, r6, pc}
    43b4:	42a3      	cmp	r3, r4
    43b6:	d909      	bls.n	43cc <_free_r+0x44>
    43b8:	6821      	ldr	r1, [r4, #0]
    43ba:	1860      	adds	r0, r4, r1
    43bc:	4283      	cmp	r3, r0
    43be:	d1f3      	bne.n	43a8 <_free_r+0x20>
    43c0:	6818      	ldr	r0, [r3, #0]
    43c2:	685b      	ldr	r3, [r3, #4]
    43c4:	1841      	adds	r1, r0, r1
    43c6:	6021      	str	r1, [r4, #0]
    43c8:	e7ee      	b.n	43a8 <_free_r+0x20>
    43ca:	0013      	movs	r3, r2
    43cc:	685a      	ldr	r2, [r3, #4]
    43ce:	2a00      	cmp	r2, #0
    43d0:	d001      	beq.n	43d6 <_free_r+0x4e>
    43d2:	42a2      	cmp	r2, r4
    43d4:	d9f9      	bls.n	43ca <_free_r+0x42>
    43d6:	6819      	ldr	r1, [r3, #0]
    43d8:	1858      	adds	r0, r3, r1
    43da:	42a0      	cmp	r0, r4
    43dc:	d10b      	bne.n	43f6 <_free_r+0x6e>
    43de:	6820      	ldr	r0, [r4, #0]
    43e0:	1809      	adds	r1, r1, r0
    43e2:	1858      	adds	r0, r3, r1
    43e4:	6019      	str	r1, [r3, #0]
    43e6:	4282      	cmp	r2, r0
    43e8:	d1e0      	bne.n	43ac <_free_r+0x24>
    43ea:	6810      	ldr	r0, [r2, #0]
    43ec:	6852      	ldr	r2, [r2, #4]
    43ee:	1841      	adds	r1, r0, r1
    43f0:	6019      	str	r1, [r3, #0]
    43f2:	605a      	str	r2, [r3, #4]
    43f4:	e7da      	b.n	43ac <_free_r+0x24>
    43f6:	42a0      	cmp	r0, r4
    43f8:	d902      	bls.n	4400 <_free_r+0x78>
    43fa:	230c      	movs	r3, #12
    43fc:	602b      	str	r3, [r5, #0]
    43fe:	e7d5      	b.n	43ac <_free_r+0x24>
    4400:	6821      	ldr	r1, [r4, #0]
    4402:	1860      	adds	r0, r4, r1
    4404:	4282      	cmp	r2, r0
    4406:	d103      	bne.n	4410 <_free_r+0x88>
    4408:	6810      	ldr	r0, [r2, #0]
    440a:	6852      	ldr	r2, [r2, #4]
    440c:	1841      	adds	r1, r0, r1
    440e:	6021      	str	r1, [r4, #0]
    4410:	6062      	str	r2, [r4, #4]
    4412:	605c      	str	r4, [r3, #4]
    4414:	e7ca      	b.n	43ac <_free_r+0x24>
    4416:	46c0      	nop			; (mov r8, r8)
    4418:	200001c0 	.word	0x200001c0

0000441c <_malloc_r>:
    441c:	2303      	movs	r3, #3
    441e:	b570      	push	{r4, r5, r6, lr}
    4420:	1ccd      	adds	r5, r1, #3
    4422:	439d      	bics	r5, r3
    4424:	3508      	adds	r5, #8
    4426:	0006      	movs	r6, r0
    4428:	2d0c      	cmp	r5, #12
    442a:	d21e      	bcs.n	446a <_malloc_r+0x4e>
    442c:	250c      	movs	r5, #12
    442e:	42a9      	cmp	r1, r5
    4430:	d81d      	bhi.n	446e <_malloc_r+0x52>
    4432:	0030      	movs	r0, r6
    4434:	f000 fbe3 	bl	4bfe <__malloc_lock>
    4438:	4a25      	ldr	r2, [pc, #148]	; (44d0 <_malloc_r+0xb4>)
    443a:	6814      	ldr	r4, [r2, #0]
    443c:	0021      	movs	r1, r4
    443e:	2900      	cmp	r1, #0
    4440:	d119      	bne.n	4476 <_malloc_r+0x5a>
    4442:	4c24      	ldr	r4, [pc, #144]	; (44d4 <_malloc_r+0xb8>)
    4444:	6823      	ldr	r3, [r4, #0]
    4446:	2b00      	cmp	r3, #0
    4448:	d103      	bne.n	4452 <_malloc_r+0x36>
    444a:	0030      	movs	r0, r6
    444c:	f000 fb10 	bl	4a70 <_sbrk_r>
    4450:	6020      	str	r0, [r4, #0]
    4452:	0029      	movs	r1, r5
    4454:	0030      	movs	r0, r6
    4456:	f000 fb0b 	bl	4a70 <_sbrk_r>
    445a:	1c43      	adds	r3, r0, #1
    445c:	d12c      	bne.n	44b8 <_malloc_r+0x9c>
    445e:	230c      	movs	r3, #12
    4460:	0030      	movs	r0, r6
    4462:	6033      	str	r3, [r6, #0]
    4464:	f000 fbcc 	bl	4c00 <__malloc_unlock>
    4468:	e003      	b.n	4472 <_malloc_r+0x56>
    446a:	2d00      	cmp	r5, #0
    446c:	dadf      	bge.n	442e <_malloc_r+0x12>
    446e:	230c      	movs	r3, #12
    4470:	6033      	str	r3, [r6, #0]
    4472:	2000      	movs	r0, #0
    4474:	bd70      	pop	{r4, r5, r6, pc}
    4476:	680b      	ldr	r3, [r1, #0]
    4478:	1b5b      	subs	r3, r3, r5
    447a:	d41a      	bmi.n	44b2 <_malloc_r+0x96>
    447c:	2b0b      	cmp	r3, #11
    447e:	d903      	bls.n	4488 <_malloc_r+0x6c>
    4480:	600b      	str	r3, [r1, #0]
    4482:	18cc      	adds	r4, r1, r3
    4484:	6025      	str	r5, [r4, #0]
    4486:	e003      	b.n	4490 <_malloc_r+0x74>
    4488:	428c      	cmp	r4, r1
    448a:	d10e      	bne.n	44aa <_malloc_r+0x8e>
    448c:	6863      	ldr	r3, [r4, #4]
    448e:	6013      	str	r3, [r2, #0]
    4490:	0030      	movs	r0, r6
    4492:	f000 fbb5 	bl	4c00 <__malloc_unlock>
    4496:	0020      	movs	r0, r4
    4498:	2207      	movs	r2, #7
    449a:	300b      	adds	r0, #11
    449c:	1d23      	adds	r3, r4, #4
    449e:	4390      	bics	r0, r2
    44a0:	1ac3      	subs	r3, r0, r3
    44a2:	d0e7      	beq.n	4474 <_malloc_r+0x58>
    44a4:	425a      	negs	r2, r3
    44a6:	50e2      	str	r2, [r4, r3]
    44a8:	e7e4      	b.n	4474 <_malloc_r+0x58>
    44aa:	684b      	ldr	r3, [r1, #4]
    44ac:	6063      	str	r3, [r4, #4]
    44ae:	000c      	movs	r4, r1
    44b0:	e7ee      	b.n	4490 <_malloc_r+0x74>
    44b2:	000c      	movs	r4, r1
    44b4:	6849      	ldr	r1, [r1, #4]
    44b6:	e7c2      	b.n	443e <_malloc_r+0x22>
    44b8:	2303      	movs	r3, #3
    44ba:	1cc4      	adds	r4, r0, #3
    44bc:	439c      	bics	r4, r3
    44be:	42a0      	cmp	r0, r4
    44c0:	d0e0      	beq.n	4484 <_malloc_r+0x68>
    44c2:	1a21      	subs	r1, r4, r0
    44c4:	0030      	movs	r0, r6
    44c6:	f000 fad3 	bl	4a70 <_sbrk_r>
    44ca:	1c43      	adds	r3, r0, #1
    44cc:	d1da      	bne.n	4484 <_malloc_r+0x68>
    44ce:	e7c6      	b.n	445e <_malloc_r+0x42>
    44d0:	200001c0 	.word	0x200001c0
    44d4:	200001c4 	.word	0x200001c4

000044d8 <__sfputc_r>:
    44d8:	6893      	ldr	r3, [r2, #8]
    44da:	b510      	push	{r4, lr}
    44dc:	3b01      	subs	r3, #1
    44de:	6093      	str	r3, [r2, #8]
    44e0:	2b00      	cmp	r3, #0
    44e2:	da05      	bge.n	44f0 <__sfputc_r+0x18>
    44e4:	6994      	ldr	r4, [r2, #24]
    44e6:	42a3      	cmp	r3, r4
    44e8:	db08      	blt.n	44fc <__sfputc_r+0x24>
    44ea:	b2cb      	uxtb	r3, r1
    44ec:	2b0a      	cmp	r3, #10
    44ee:	d005      	beq.n	44fc <__sfputc_r+0x24>
    44f0:	6813      	ldr	r3, [r2, #0]
    44f2:	1c58      	adds	r0, r3, #1
    44f4:	6010      	str	r0, [r2, #0]
    44f6:	7019      	strb	r1, [r3, #0]
    44f8:	b2c8      	uxtb	r0, r1
    44fa:	bd10      	pop	{r4, pc}
    44fc:	f7ff fc74 	bl	3de8 <__swbuf_r>
    4500:	e7fb      	b.n	44fa <__sfputc_r+0x22>

00004502 <__sfputs_r>:
    4502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4504:	0006      	movs	r6, r0
    4506:	000f      	movs	r7, r1
    4508:	0014      	movs	r4, r2
    450a:	18d5      	adds	r5, r2, r3
    450c:	42ac      	cmp	r4, r5
    450e:	d101      	bne.n	4514 <__sfputs_r+0x12>
    4510:	2000      	movs	r0, #0
    4512:	e007      	b.n	4524 <__sfputs_r+0x22>
    4514:	7821      	ldrb	r1, [r4, #0]
    4516:	003a      	movs	r2, r7
    4518:	0030      	movs	r0, r6
    451a:	f7ff ffdd 	bl	44d8 <__sfputc_r>
    451e:	3401      	adds	r4, #1
    4520:	1c43      	adds	r3, r0, #1
    4522:	d1f3      	bne.n	450c <__sfputs_r+0xa>
    4524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004528 <_vfiprintf_r>:
    4528:	b5f0      	push	{r4, r5, r6, r7, lr}
    452a:	b09f      	sub	sp, #124	; 0x7c
    452c:	0006      	movs	r6, r0
    452e:	000f      	movs	r7, r1
    4530:	0014      	movs	r4, r2
    4532:	9305      	str	r3, [sp, #20]
    4534:	2800      	cmp	r0, #0
    4536:	d004      	beq.n	4542 <_vfiprintf_r+0x1a>
    4538:	6983      	ldr	r3, [r0, #24]
    453a:	2b00      	cmp	r3, #0
    453c:	d101      	bne.n	4542 <_vfiprintf_r+0x1a>
    453e:	f7ff fe17 	bl	4170 <__sinit>
    4542:	4b7f      	ldr	r3, [pc, #508]	; (4740 <_vfiprintf_r+0x218>)
    4544:	429f      	cmp	r7, r3
    4546:	d15c      	bne.n	4602 <_vfiprintf_r+0xda>
    4548:	6877      	ldr	r7, [r6, #4]
    454a:	89bb      	ldrh	r3, [r7, #12]
    454c:	071b      	lsls	r3, r3, #28
    454e:	d562      	bpl.n	4616 <_vfiprintf_r+0xee>
    4550:	693b      	ldr	r3, [r7, #16]
    4552:	2b00      	cmp	r3, #0
    4554:	d05f      	beq.n	4616 <_vfiprintf_r+0xee>
    4556:	2300      	movs	r3, #0
    4558:	ad06      	add	r5, sp, #24
    455a:	616b      	str	r3, [r5, #20]
    455c:	3320      	adds	r3, #32
    455e:	766b      	strb	r3, [r5, #25]
    4560:	3310      	adds	r3, #16
    4562:	76ab      	strb	r3, [r5, #26]
    4564:	9402      	str	r4, [sp, #8]
    4566:	9c02      	ldr	r4, [sp, #8]
    4568:	7823      	ldrb	r3, [r4, #0]
    456a:	2b00      	cmp	r3, #0
    456c:	d15d      	bne.n	462a <_vfiprintf_r+0x102>
    456e:	9b02      	ldr	r3, [sp, #8]
    4570:	1ae3      	subs	r3, r4, r3
    4572:	9304      	str	r3, [sp, #16]
    4574:	d00d      	beq.n	4592 <_vfiprintf_r+0x6a>
    4576:	9b04      	ldr	r3, [sp, #16]
    4578:	9a02      	ldr	r2, [sp, #8]
    457a:	0039      	movs	r1, r7
    457c:	0030      	movs	r0, r6
    457e:	f7ff ffc0 	bl	4502 <__sfputs_r>
    4582:	1c43      	adds	r3, r0, #1
    4584:	d100      	bne.n	4588 <_vfiprintf_r+0x60>
    4586:	e0cc      	b.n	4722 <_vfiprintf_r+0x1fa>
    4588:	696a      	ldr	r2, [r5, #20]
    458a:	9b04      	ldr	r3, [sp, #16]
    458c:	4694      	mov	ip, r2
    458e:	4463      	add	r3, ip
    4590:	616b      	str	r3, [r5, #20]
    4592:	7823      	ldrb	r3, [r4, #0]
    4594:	2b00      	cmp	r3, #0
    4596:	d100      	bne.n	459a <_vfiprintf_r+0x72>
    4598:	e0c3      	b.n	4722 <_vfiprintf_r+0x1fa>
    459a:	2201      	movs	r2, #1
    459c:	2300      	movs	r3, #0
    459e:	4252      	negs	r2, r2
    45a0:	606a      	str	r2, [r5, #4]
    45a2:	a902      	add	r1, sp, #8
    45a4:	3254      	adds	r2, #84	; 0x54
    45a6:	1852      	adds	r2, r2, r1
    45a8:	3401      	adds	r4, #1
    45aa:	602b      	str	r3, [r5, #0]
    45ac:	60eb      	str	r3, [r5, #12]
    45ae:	60ab      	str	r3, [r5, #8]
    45b0:	7013      	strb	r3, [r2, #0]
    45b2:	65ab      	str	r3, [r5, #88]	; 0x58
    45b4:	7821      	ldrb	r1, [r4, #0]
    45b6:	2205      	movs	r2, #5
    45b8:	4862      	ldr	r0, [pc, #392]	; (4744 <_vfiprintf_r+0x21c>)
    45ba:	f000 fb15 	bl	4be8 <memchr>
    45be:	1c63      	adds	r3, r4, #1
    45c0:	469c      	mov	ip, r3
    45c2:	2800      	cmp	r0, #0
    45c4:	d135      	bne.n	4632 <_vfiprintf_r+0x10a>
    45c6:	6829      	ldr	r1, [r5, #0]
    45c8:	06cb      	lsls	r3, r1, #27
    45ca:	d504      	bpl.n	45d6 <_vfiprintf_r+0xae>
    45cc:	2353      	movs	r3, #83	; 0x53
    45ce:	aa02      	add	r2, sp, #8
    45d0:	3020      	adds	r0, #32
    45d2:	189b      	adds	r3, r3, r2
    45d4:	7018      	strb	r0, [r3, #0]
    45d6:	070b      	lsls	r3, r1, #28
    45d8:	d504      	bpl.n	45e4 <_vfiprintf_r+0xbc>
    45da:	2353      	movs	r3, #83	; 0x53
    45dc:	202b      	movs	r0, #43	; 0x2b
    45de:	aa02      	add	r2, sp, #8
    45e0:	189b      	adds	r3, r3, r2
    45e2:	7018      	strb	r0, [r3, #0]
    45e4:	7823      	ldrb	r3, [r4, #0]
    45e6:	2b2a      	cmp	r3, #42	; 0x2a
    45e8:	d02c      	beq.n	4644 <_vfiprintf_r+0x11c>
    45ea:	2000      	movs	r0, #0
    45ec:	210a      	movs	r1, #10
    45ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    45f0:	7822      	ldrb	r2, [r4, #0]
    45f2:	3a30      	subs	r2, #48	; 0x30
    45f4:	2a09      	cmp	r2, #9
    45f6:	d800      	bhi.n	45fa <_vfiprintf_r+0xd2>
    45f8:	e06b      	b.n	46d2 <_vfiprintf_r+0x1aa>
    45fa:	2800      	cmp	r0, #0
    45fc:	d02a      	beq.n	4654 <_vfiprintf_r+0x12c>
    45fe:	9309      	str	r3, [sp, #36]	; 0x24
    4600:	e028      	b.n	4654 <_vfiprintf_r+0x12c>
    4602:	4b51      	ldr	r3, [pc, #324]	; (4748 <_vfiprintf_r+0x220>)
    4604:	429f      	cmp	r7, r3
    4606:	d101      	bne.n	460c <_vfiprintf_r+0xe4>
    4608:	68b7      	ldr	r7, [r6, #8]
    460a:	e79e      	b.n	454a <_vfiprintf_r+0x22>
    460c:	4b4f      	ldr	r3, [pc, #316]	; (474c <_vfiprintf_r+0x224>)
    460e:	429f      	cmp	r7, r3
    4610:	d19b      	bne.n	454a <_vfiprintf_r+0x22>
    4612:	68f7      	ldr	r7, [r6, #12]
    4614:	e799      	b.n	454a <_vfiprintf_r+0x22>
    4616:	0039      	movs	r1, r7
    4618:	0030      	movs	r0, r6
    461a:	f7ff fc3b 	bl	3e94 <__swsetup_r>
    461e:	2800      	cmp	r0, #0
    4620:	d099      	beq.n	4556 <_vfiprintf_r+0x2e>
    4622:	2001      	movs	r0, #1
    4624:	4240      	negs	r0, r0
    4626:	b01f      	add	sp, #124	; 0x7c
    4628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    462a:	2b25      	cmp	r3, #37	; 0x25
    462c:	d09f      	beq.n	456e <_vfiprintf_r+0x46>
    462e:	3401      	adds	r4, #1
    4630:	e79a      	b.n	4568 <_vfiprintf_r+0x40>
    4632:	4b44      	ldr	r3, [pc, #272]	; (4744 <_vfiprintf_r+0x21c>)
    4634:	6829      	ldr	r1, [r5, #0]
    4636:	1ac0      	subs	r0, r0, r3
    4638:	2301      	movs	r3, #1
    463a:	4083      	lsls	r3, r0
    463c:	430b      	orrs	r3, r1
    463e:	602b      	str	r3, [r5, #0]
    4640:	4664      	mov	r4, ip
    4642:	e7b7      	b.n	45b4 <_vfiprintf_r+0x8c>
    4644:	9b05      	ldr	r3, [sp, #20]
    4646:	1d18      	adds	r0, r3, #4
    4648:	681b      	ldr	r3, [r3, #0]
    464a:	9005      	str	r0, [sp, #20]
    464c:	2b00      	cmp	r3, #0
    464e:	db3a      	blt.n	46c6 <_vfiprintf_r+0x19e>
    4650:	9309      	str	r3, [sp, #36]	; 0x24
    4652:	4664      	mov	r4, ip
    4654:	7823      	ldrb	r3, [r4, #0]
    4656:	2b2e      	cmp	r3, #46	; 0x2e
    4658:	d10b      	bne.n	4672 <_vfiprintf_r+0x14a>
    465a:	7863      	ldrb	r3, [r4, #1]
    465c:	1c62      	adds	r2, r4, #1
    465e:	2b2a      	cmp	r3, #42	; 0x2a
    4660:	d13f      	bne.n	46e2 <_vfiprintf_r+0x1ba>
    4662:	9b05      	ldr	r3, [sp, #20]
    4664:	3402      	adds	r4, #2
    4666:	1d1a      	adds	r2, r3, #4
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	9205      	str	r2, [sp, #20]
    466c:	2b00      	cmp	r3, #0
    466e:	db35      	blt.n	46dc <_vfiprintf_r+0x1b4>
    4670:	9307      	str	r3, [sp, #28]
    4672:	7821      	ldrb	r1, [r4, #0]
    4674:	2203      	movs	r2, #3
    4676:	4836      	ldr	r0, [pc, #216]	; (4750 <_vfiprintf_r+0x228>)
    4678:	f000 fab6 	bl	4be8 <memchr>
    467c:	2800      	cmp	r0, #0
    467e:	d007      	beq.n	4690 <_vfiprintf_r+0x168>
    4680:	4b33      	ldr	r3, [pc, #204]	; (4750 <_vfiprintf_r+0x228>)
    4682:	682a      	ldr	r2, [r5, #0]
    4684:	1ac0      	subs	r0, r0, r3
    4686:	2340      	movs	r3, #64	; 0x40
    4688:	4083      	lsls	r3, r0
    468a:	4313      	orrs	r3, r2
    468c:	602b      	str	r3, [r5, #0]
    468e:	3401      	adds	r4, #1
    4690:	7821      	ldrb	r1, [r4, #0]
    4692:	1c63      	adds	r3, r4, #1
    4694:	2206      	movs	r2, #6
    4696:	482f      	ldr	r0, [pc, #188]	; (4754 <_vfiprintf_r+0x22c>)
    4698:	9302      	str	r3, [sp, #8]
    469a:	7629      	strb	r1, [r5, #24]
    469c:	f000 faa4 	bl	4be8 <memchr>
    46a0:	2800      	cmp	r0, #0
    46a2:	d044      	beq.n	472e <_vfiprintf_r+0x206>
    46a4:	4b2c      	ldr	r3, [pc, #176]	; (4758 <_vfiprintf_r+0x230>)
    46a6:	2b00      	cmp	r3, #0
    46a8:	d12f      	bne.n	470a <_vfiprintf_r+0x1e2>
    46aa:	6829      	ldr	r1, [r5, #0]
    46ac:	9b05      	ldr	r3, [sp, #20]
    46ae:	2207      	movs	r2, #7
    46b0:	05c9      	lsls	r1, r1, #23
    46b2:	d528      	bpl.n	4706 <_vfiprintf_r+0x1de>
    46b4:	189b      	adds	r3, r3, r2
    46b6:	4393      	bics	r3, r2
    46b8:	3308      	adds	r3, #8
    46ba:	9305      	str	r3, [sp, #20]
    46bc:	696b      	ldr	r3, [r5, #20]
    46be:	9a03      	ldr	r2, [sp, #12]
    46c0:	189b      	adds	r3, r3, r2
    46c2:	616b      	str	r3, [r5, #20]
    46c4:	e74f      	b.n	4566 <_vfiprintf_r+0x3e>
    46c6:	425b      	negs	r3, r3
    46c8:	60eb      	str	r3, [r5, #12]
    46ca:	2302      	movs	r3, #2
    46cc:	430b      	orrs	r3, r1
    46ce:	602b      	str	r3, [r5, #0]
    46d0:	e7bf      	b.n	4652 <_vfiprintf_r+0x12a>
    46d2:	434b      	muls	r3, r1
    46d4:	3401      	adds	r4, #1
    46d6:	189b      	adds	r3, r3, r2
    46d8:	2001      	movs	r0, #1
    46da:	e789      	b.n	45f0 <_vfiprintf_r+0xc8>
    46dc:	2301      	movs	r3, #1
    46de:	425b      	negs	r3, r3
    46e0:	e7c6      	b.n	4670 <_vfiprintf_r+0x148>
    46e2:	2300      	movs	r3, #0
    46e4:	0014      	movs	r4, r2
    46e6:	200a      	movs	r0, #10
    46e8:	001a      	movs	r2, r3
    46ea:	606b      	str	r3, [r5, #4]
    46ec:	7821      	ldrb	r1, [r4, #0]
    46ee:	3930      	subs	r1, #48	; 0x30
    46f0:	2909      	cmp	r1, #9
    46f2:	d903      	bls.n	46fc <_vfiprintf_r+0x1d4>
    46f4:	2b00      	cmp	r3, #0
    46f6:	d0bc      	beq.n	4672 <_vfiprintf_r+0x14a>
    46f8:	9207      	str	r2, [sp, #28]
    46fa:	e7ba      	b.n	4672 <_vfiprintf_r+0x14a>
    46fc:	4342      	muls	r2, r0
    46fe:	3401      	adds	r4, #1
    4700:	1852      	adds	r2, r2, r1
    4702:	2301      	movs	r3, #1
    4704:	e7f2      	b.n	46ec <_vfiprintf_r+0x1c4>
    4706:	3307      	adds	r3, #7
    4708:	e7d5      	b.n	46b6 <_vfiprintf_r+0x18e>
    470a:	ab05      	add	r3, sp, #20
    470c:	9300      	str	r3, [sp, #0]
    470e:	003a      	movs	r2, r7
    4710:	4b12      	ldr	r3, [pc, #72]	; (475c <_vfiprintf_r+0x234>)
    4712:	0029      	movs	r1, r5
    4714:	0030      	movs	r0, r6
    4716:	e000      	b.n	471a <_vfiprintf_r+0x1f2>
    4718:	bf00      	nop
    471a:	9003      	str	r0, [sp, #12]
    471c:	9b03      	ldr	r3, [sp, #12]
    471e:	3301      	adds	r3, #1
    4720:	d1cc      	bne.n	46bc <_vfiprintf_r+0x194>
    4722:	89bb      	ldrh	r3, [r7, #12]
    4724:	065b      	lsls	r3, r3, #25
    4726:	d500      	bpl.n	472a <_vfiprintf_r+0x202>
    4728:	e77b      	b.n	4622 <_vfiprintf_r+0xfa>
    472a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    472c:	e77b      	b.n	4626 <_vfiprintf_r+0xfe>
    472e:	ab05      	add	r3, sp, #20
    4730:	9300      	str	r3, [sp, #0]
    4732:	003a      	movs	r2, r7
    4734:	4b09      	ldr	r3, [pc, #36]	; (475c <_vfiprintf_r+0x234>)
    4736:	0029      	movs	r1, r5
    4738:	0030      	movs	r0, r6
    473a:	f000 f87f 	bl	483c <_printf_i>
    473e:	e7ec      	b.n	471a <_vfiprintf_r+0x1f2>
    4740:	00004d44 	.word	0x00004d44
    4744:	00004d84 	.word	0x00004d84
    4748:	00004d64 	.word	0x00004d64
    474c:	00004d24 	.word	0x00004d24
    4750:	00004d8a 	.word	0x00004d8a
    4754:	00004d8e 	.word	0x00004d8e
    4758:	00000000 	.word	0x00000000
    475c:	00004503 	.word	0x00004503

00004760 <_printf_common>:
    4760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4762:	0015      	movs	r5, r2
    4764:	9301      	str	r3, [sp, #4]
    4766:	688a      	ldr	r2, [r1, #8]
    4768:	690b      	ldr	r3, [r1, #16]
    476a:	9000      	str	r0, [sp, #0]
    476c:	000c      	movs	r4, r1
    476e:	4293      	cmp	r3, r2
    4770:	da00      	bge.n	4774 <_printf_common+0x14>
    4772:	0013      	movs	r3, r2
    4774:	0022      	movs	r2, r4
    4776:	602b      	str	r3, [r5, #0]
    4778:	3243      	adds	r2, #67	; 0x43
    477a:	7812      	ldrb	r2, [r2, #0]
    477c:	2a00      	cmp	r2, #0
    477e:	d001      	beq.n	4784 <_printf_common+0x24>
    4780:	3301      	adds	r3, #1
    4782:	602b      	str	r3, [r5, #0]
    4784:	6823      	ldr	r3, [r4, #0]
    4786:	069b      	lsls	r3, r3, #26
    4788:	d502      	bpl.n	4790 <_printf_common+0x30>
    478a:	682b      	ldr	r3, [r5, #0]
    478c:	3302      	adds	r3, #2
    478e:	602b      	str	r3, [r5, #0]
    4790:	2706      	movs	r7, #6
    4792:	6823      	ldr	r3, [r4, #0]
    4794:	401f      	ands	r7, r3
    4796:	d027      	beq.n	47e8 <_printf_common+0x88>
    4798:	0023      	movs	r3, r4
    479a:	3343      	adds	r3, #67	; 0x43
    479c:	781b      	ldrb	r3, [r3, #0]
    479e:	1e5a      	subs	r2, r3, #1
    47a0:	4193      	sbcs	r3, r2
    47a2:	6822      	ldr	r2, [r4, #0]
    47a4:	0692      	lsls	r2, r2, #26
    47a6:	d430      	bmi.n	480a <_printf_common+0xaa>
    47a8:	0022      	movs	r2, r4
    47aa:	9901      	ldr	r1, [sp, #4]
    47ac:	3243      	adds	r2, #67	; 0x43
    47ae:	9800      	ldr	r0, [sp, #0]
    47b0:	9e08      	ldr	r6, [sp, #32]
    47b2:	47b0      	blx	r6
    47b4:	1c43      	adds	r3, r0, #1
    47b6:	d025      	beq.n	4804 <_printf_common+0xa4>
    47b8:	2306      	movs	r3, #6
    47ba:	6820      	ldr	r0, [r4, #0]
    47bc:	682a      	ldr	r2, [r5, #0]
    47be:	68e1      	ldr	r1, [r4, #12]
    47c0:	4003      	ands	r3, r0
    47c2:	2500      	movs	r5, #0
    47c4:	2b04      	cmp	r3, #4
    47c6:	d103      	bne.n	47d0 <_printf_common+0x70>
    47c8:	1a8d      	subs	r5, r1, r2
    47ca:	43eb      	mvns	r3, r5
    47cc:	17db      	asrs	r3, r3, #31
    47ce:	401d      	ands	r5, r3
    47d0:	68a3      	ldr	r3, [r4, #8]
    47d2:	6922      	ldr	r2, [r4, #16]
    47d4:	4293      	cmp	r3, r2
    47d6:	dd01      	ble.n	47dc <_printf_common+0x7c>
    47d8:	1a9b      	subs	r3, r3, r2
    47da:	18ed      	adds	r5, r5, r3
    47dc:	2700      	movs	r7, #0
    47de:	42bd      	cmp	r5, r7
    47e0:	d120      	bne.n	4824 <_printf_common+0xc4>
    47e2:	2000      	movs	r0, #0
    47e4:	e010      	b.n	4808 <_printf_common+0xa8>
    47e6:	3701      	adds	r7, #1
    47e8:	68e3      	ldr	r3, [r4, #12]
    47ea:	682a      	ldr	r2, [r5, #0]
    47ec:	1a9b      	subs	r3, r3, r2
    47ee:	429f      	cmp	r7, r3
    47f0:	dad2      	bge.n	4798 <_printf_common+0x38>
    47f2:	0022      	movs	r2, r4
    47f4:	2301      	movs	r3, #1
    47f6:	3219      	adds	r2, #25
    47f8:	9901      	ldr	r1, [sp, #4]
    47fa:	9800      	ldr	r0, [sp, #0]
    47fc:	9e08      	ldr	r6, [sp, #32]
    47fe:	47b0      	blx	r6
    4800:	1c43      	adds	r3, r0, #1
    4802:	d1f0      	bne.n	47e6 <_printf_common+0x86>
    4804:	2001      	movs	r0, #1
    4806:	4240      	negs	r0, r0
    4808:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    480a:	2030      	movs	r0, #48	; 0x30
    480c:	18e1      	adds	r1, r4, r3
    480e:	3143      	adds	r1, #67	; 0x43
    4810:	7008      	strb	r0, [r1, #0]
    4812:	0021      	movs	r1, r4
    4814:	1c5a      	adds	r2, r3, #1
    4816:	3145      	adds	r1, #69	; 0x45
    4818:	7809      	ldrb	r1, [r1, #0]
    481a:	18a2      	adds	r2, r4, r2
    481c:	3243      	adds	r2, #67	; 0x43
    481e:	3302      	adds	r3, #2
    4820:	7011      	strb	r1, [r2, #0]
    4822:	e7c1      	b.n	47a8 <_printf_common+0x48>
    4824:	0022      	movs	r2, r4
    4826:	2301      	movs	r3, #1
    4828:	321a      	adds	r2, #26
    482a:	9901      	ldr	r1, [sp, #4]
    482c:	9800      	ldr	r0, [sp, #0]
    482e:	9e08      	ldr	r6, [sp, #32]
    4830:	47b0      	blx	r6
    4832:	1c43      	adds	r3, r0, #1
    4834:	d0e6      	beq.n	4804 <_printf_common+0xa4>
    4836:	3701      	adds	r7, #1
    4838:	e7d1      	b.n	47de <_printf_common+0x7e>
	...

0000483c <_printf_i>:
    483c:	b5f0      	push	{r4, r5, r6, r7, lr}
    483e:	b08b      	sub	sp, #44	; 0x2c
    4840:	9206      	str	r2, [sp, #24]
    4842:	000a      	movs	r2, r1
    4844:	3243      	adds	r2, #67	; 0x43
    4846:	9307      	str	r3, [sp, #28]
    4848:	9005      	str	r0, [sp, #20]
    484a:	9204      	str	r2, [sp, #16]
    484c:	7e0a      	ldrb	r2, [r1, #24]
    484e:	000c      	movs	r4, r1
    4850:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4852:	2a6e      	cmp	r2, #110	; 0x6e
    4854:	d100      	bne.n	4858 <_printf_i+0x1c>
    4856:	e08f      	b.n	4978 <_printf_i+0x13c>
    4858:	d817      	bhi.n	488a <_printf_i+0x4e>
    485a:	2a63      	cmp	r2, #99	; 0x63
    485c:	d02c      	beq.n	48b8 <_printf_i+0x7c>
    485e:	d808      	bhi.n	4872 <_printf_i+0x36>
    4860:	2a00      	cmp	r2, #0
    4862:	d100      	bne.n	4866 <_printf_i+0x2a>
    4864:	e099      	b.n	499a <_printf_i+0x15e>
    4866:	2a58      	cmp	r2, #88	; 0x58
    4868:	d054      	beq.n	4914 <_printf_i+0xd8>
    486a:	0026      	movs	r6, r4
    486c:	3642      	adds	r6, #66	; 0x42
    486e:	7032      	strb	r2, [r6, #0]
    4870:	e029      	b.n	48c6 <_printf_i+0x8a>
    4872:	2a64      	cmp	r2, #100	; 0x64
    4874:	d001      	beq.n	487a <_printf_i+0x3e>
    4876:	2a69      	cmp	r2, #105	; 0x69
    4878:	d1f7      	bne.n	486a <_printf_i+0x2e>
    487a:	6821      	ldr	r1, [r4, #0]
    487c:	681a      	ldr	r2, [r3, #0]
    487e:	0608      	lsls	r0, r1, #24
    4880:	d523      	bpl.n	48ca <_printf_i+0x8e>
    4882:	1d11      	adds	r1, r2, #4
    4884:	6019      	str	r1, [r3, #0]
    4886:	6815      	ldr	r5, [r2, #0]
    4888:	e025      	b.n	48d6 <_printf_i+0x9a>
    488a:	2a73      	cmp	r2, #115	; 0x73
    488c:	d100      	bne.n	4890 <_printf_i+0x54>
    488e:	e088      	b.n	49a2 <_printf_i+0x166>
    4890:	d808      	bhi.n	48a4 <_printf_i+0x68>
    4892:	2a6f      	cmp	r2, #111	; 0x6f
    4894:	d029      	beq.n	48ea <_printf_i+0xae>
    4896:	2a70      	cmp	r2, #112	; 0x70
    4898:	d1e7      	bne.n	486a <_printf_i+0x2e>
    489a:	2220      	movs	r2, #32
    489c:	6809      	ldr	r1, [r1, #0]
    489e:	430a      	orrs	r2, r1
    48a0:	6022      	str	r2, [r4, #0]
    48a2:	e003      	b.n	48ac <_printf_i+0x70>
    48a4:	2a75      	cmp	r2, #117	; 0x75
    48a6:	d020      	beq.n	48ea <_printf_i+0xae>
    48a8:	2a78      	cmp	r2, #120	; 0x78
    48aa:	d1de      	bne.n	486a <_printf_i+0x2e>
    48ac:	0022      	movs	r2, r4
    48ae:	2178      	movs	r1, #120	; 0x78
    48b0:	3245      	adds	r2, #69	; 0x45
    48b2:	7011      	strb	r1, [r2, #0]
    48b4:	4a6c      	ldr	r2, [pc, #432]	; (4a68 <_printf_i+0x22c>)
    48b6:	e030      	b.n	491a <_printf_i+0xde>
    48b8:	000e      	movs	r6, r1
    48ba:	681a      	ldr	r2, [r3, #0]
    48bc:	3642      	adds	r6, #66	; 0x42
    48be:	1d11      	adds	r1, r2, #4
    48c0:	6019      	str	r1, [r3, #0]
    48c2:	6813      	ldr	r3, [r2, #0]
    48c4:	7033      	strb	r3, [r6, #0]
    48c6:	2301      	movs	r3, #1
    48c8:	e079      	b.n	49be <_printf_i+0x182>
    48ca:	0649      	lsls	r1, r1, #25
    48cc:	d5d9      	bpl.n	4882 <_printf_i+0x46>
    48ce:	1d11      	adds	r1, r2, #4
    48d0:	6019      	str	r1, [r3, #0]
    48d2:	2300      	movs	r3, #0
    48d4:	5ed5      	ldrsh	r5, [r2, r3]
    48d6:	2d00      	cmp	r5, #0
    48d8:	da03      	bge.n	48e2 <_printf_i+0xa6>
    48da:	232d      	movs	r3, #45	; 0x2d
    48dc:	9a04      	ldr	r2, [sp, #16]
    48de:	426d      	negs	r5, r5
    48e0:	7013      	strb	r3, [r2, #0]
    48e2:	4b62      	ldr	r3, [pc, #392]	; (4a6c <_printf_i+0x230>)
    48e4:	270a      	movs	r7, #10
    48e6:	9303      	str	r3, [sp, #12]
    48e8:	e02f      	b.n	494a <_printf_i+0x10e>
    48ea:	6820      	ldr	r0, [r4, #0]
    48ec:	6819      	ldr	r1, [r3, #0]
    48ee:	0605      	lsls	r5, r0, #24
    48f0:	d503      	bpl.n	48fa <_printf_i+0xbe>
    48f2:	1d08      	adds	r0, r1, #4
    48f4:	6018      	str	r0, [r3, #0]
    48f6:	680d      	ldr	r5, [r1, #0]
    48f8:	e005      	b.n	4906 <_printf_i+0xca>
    48fa:	0640      	lsls	r0, r0, #25
    48fc:	d5f9      	bpl.n	48f2 <_printf_i+0xb6>
    48fe:	680d      	ldr	r5, [r1, #0]
    4900:	1d08      	adds	r0, r1, #4
    4902:	6018      	str	r0, [r3, #0]
    4904:	b2ad      	uxth	r5, r5
    4906:	4b59      	ldr	r3, [pc, #356]	; (4a6c <_printf_i+0x230>)
    4908:	2708      	movs	r7, #8
    490a:	9303      	str	r3, [sp, #12]
    490c:	2a6f      	cmp	r2, #111	; 0x6f
    490e:	d018      	beq.n	4942 <_printf_i+0x106>
    4910:	270a      	movs	r7, #10
    4912:	e016      	b.n	4942 <_printf_i+0x106>
    4914:	3145      	adds	r1, #69	; 0x45
    4916:	700a      	strb	r2, [r1, #0]
    4918:	4a54      	ldr	r2, [pc, #336]	; (4a6c <_printf_i+0x230>)
    491a:	9203      	str	r2, [sp, #12]
    491c:	681a      	ldr	r2, [r3, #0]
    491e:	6821      	ldr	r1, [r4, #0]
    4920:	1d10      	adds	r0, r2, #4
    4922:	6018      	str	r0, [r3, #0]
    4924:	6815      	ldr	r5, [r2, #0]
    4926:	0608      	lsls	r0, r1, #24
    4928:	d522      	bpl.n	4970 <_printf_i+0x134>
    492a:	07cb      	lsls	r3, r1, #31
    492c:	d502      	bpl.n	4934 <_printf_i+0xf8>
    492e:	2320      	movs	r3, #32
    4930:	4319      	orrs	r1, r3
    4932:	6021      	str	r1, [r4, #0]
    4934:	2710      	movs	r7, #16
    4936:	2d00      	cmp	r5, #0
    4938:	d103      	bne.n	4942 <_printf_i+0x106>
    493a:	2320      	movs	r3, #32
    493c:	6822      	ldr	r2, [r4, #0]
    493e:	439a      	bics	r2, r3
    4940:	6022      	str	r2, [r4, #0]
    4942:	0023      	movs	r3, r4
    4944:	2200      	movs	r2, #0
    4946:	3343      	adds	r3, #67	; 0x43
    4948:	701a      	strb	r2, [r3, #0]
    494a:	6863      	ldr	r3, [r4, #4]
    494c:	60a3      	str	r3, [r4, #8]
    494e:	2b00      	cmp	r3, #0
    4950:	db5c      	blt.n	4a0c <_printf_i+0x1d0>
    4952:	2204      	movs	r2, #4
    4954:	6821      	ldr	r1, [r4, #0]
    4956:	4391      	bics	r1, r2
    4958:	6021      	str	r1, [r4, #0]
    495a:	2d00      	cmp	r5, #0
    495c:	d158      	bne.n	4a10 <_printf_i+0x1d4>
    495e:	9e04      	ldr	r6, [sp, #16]
    4960:	2b00      	cmp	r3, #0
    4962:	d064      	beq.n	4a2e <_printf_i+0x1f2>
    4964:	0026      	movs	r6, r4
    4966:	9b03      	ldr	r3, [sp, #12]
    4968:	3642      	adds	r6, #66	; 0x42
    496a:	781b      	ldrb	r3, [r3, #0]
    496c:	7033      	strb	r3, [r6, #0]
    496e:	e05e      	b.n	4a2e <_printf_i+0x1f2>
    4970:	0648      	lsls	r0, r1, #25
    4972:	d5da      	bpl.n	492a <_printf_i+0xee>
    4974:	b2ad      	uxth	r5, r5
    4976:	e7d8      	b.n	492a <_printf_i+0xee>
    4978:	6809      	ldr	r1, [r1, #0]
    497a:	681a      	ldr	r2, [r3, #0]
    497c:	0608      	lsls	r0, r1, #24
    497e:	d505      	bpl.n	498c <_printf_i+0x150>
    4980:	1d11      	adds	r1, r2, #4
    4982:	6019      	str	r1, [r3, #0]
    4984:	6813      	ldr	r3, [r2, #0]
    4986:	6962      	ldr	r2, [r4, #20]
    4988:	601a      	str	r2, [r3, #0]
    498a:	e006      	b.n	499a <_printf_i+0x15e>
    498c:	0649      	lsls	r1, r1, #25
    498e:	d5f7      	bpl.n	4980 <_printf_i+0x144>
    4990:	1d11      	adds	r1, r2, #4
    4992:	6019      	str	r1, [r3, #0]
    4994:	6813      	ldr	r3, [r2, #0]
    4996:	8aa2      	ldrh	r2, [r4, #20]
    4998:	801a      	strh	r2, [r3, #0]
    499a:	2300      	movs	r3, #0
    499c:	9e04      	ldr	r6, [sp, #16]
    499e:	6123      	str	r3, [r4, #16]
    49a0:	e054      	b.n	4a4c <_printf_i+0x210>
    49a2:	681a      	ldr	r2, [r3, #0]
    49a4:	1d11      	adds	r1, r2, #4
    49a6:	6019      	str	r1, [r3, #0]
    49a8:	6816      	ldr	r6, [r2, #0]
    49aa:	2100      	movs	r1, #0
    49ac:	6862      	ldr	r2, [r4, #4]
    49ae:	0030      	movs	r0, r6
    49b0:	f000 f91a 	bl	4be8 <memchr>
    49b4:	2800      	cmp	r0, #0
    49b6:	d001      	beq.n	49bc <_printf_i+0x180>
    49b8:	1b80      	subs	r0, r0, r6
    49ba:	6060      	str	r0, [r4, #4]
    49bc:	6863      	ldr	r3, [r4, #4]
    49be:	6123      	str	r3, [r4, #16]
    49c0:	2300      	movs	r3, #0
    49c2:	9a04      	ldr	r2, [sp, #16]
    49c4:	7013      	strb	r3, [r2, #0]
    49c6:	e041      	b.n	4a4c <_printf_i+0x210>
    49c8:	6923      	ldr	r3, [r4, #16]
    49ca:	0032      	movs	r2, r6
    49cc:	9906      	ldr	r1, [sp, #24]
    49ce:	9805      	ldr	r0, [sp, #20]
    49d0:	9d07      	ldr	r5, [sp, #28]
    49d2:	47a8      	blx	r5
    49d4:	1c43      	adds	r3, r0, #1
    49d6:	d043      	beq.n	4a60 <_printf_i+0x224>
    49d8:	6823      	ldr	r3, [r4, #0]
    49da:	2500      	movs	r5, #0
    49dc:	079b      	lsls	r3, r3, #30
    49de:	d40f      	bmi.n	4a00 <_printf_i+0x1c4>
    49e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49e2:	68e0      	ldr	r0, [r4, #12]
    49e4:	4298      	cmp	r0, r3
    49e6:	da3d      	bge.n	4a64 <_printf_i+0x228>
    49e8:	0018      	movs	r0, r3
    49ea:	e03b      	b.n	4a64 <_printf_i+0x228>
    49ec:	0022      	movs	r2, r4
    49ee:	2301      	movs	r3, #1
    49f0:	3219      	adds	r2, #25
    49f2:	9906      	ldr	r1, [sp, #24]
    49f4:	9805      	ldr	r0, [sp, #20]
    49f6:	9e07      	ldr	r6, [sp, #28]
    49f8:	47b0      	blx	r6
    49fa:	1c43      	adds	r3, r0, #1
    49fc:	d030      	beq.n	4a60 <_printf_i+0x224>
    49fe:	3501      	adds	r5, #1
    4a00:	68e3      	ldr	r3, [r4, #12]
    4a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4a04:	1a9b      	subs	r3, r3, r2
    4a06:	429d      	cmp	r5, r3
    4a08:	dbf0      	blt.n	49ec <_printf_i+0x1b0>
    4a0a:	e7e9      	b.n	49e0 <_printf_i+0x1a4>
    4a0c:	2d00      	cmp	r5, #0
    4a0e:	d0a9      	beq.n	4964 <_printf_i+0x128>
    4a10:	9e04      	ldr	r6, [sp, #16]
    4a12:	0028      	movs	r0, r5
    4a14:	0039      	movs	r1, r7
    4a16:	f7fd fc57 	bl	22c8 <__aeabi_uidivmod>
    4a1a:	9b03      	ldr	r3, [sp, #12]
    4a1c:	3e01      	subs	r6, #1
    4a1e:	5c5b      	ldrb	r3, [r3, r1]
    4a20:	0028      	movs	r0, r5
    4a22:	7033      	strb	r3, [r6, #0]
    4a24:	0039      	movs	r1, r7
    4a26:	f7fd fbc9 	bl	21bc <__udivsi3>
    4a2a:	1e05      	subs	r5, r0, #0
    4a2c:	d1f1      	bne.n	4a12 <_printf_i+0x1d6>
    4a2e:	2f08      	cmp	r7, #8
    4a30:	d109      	bne.n	4a46 <_printf_i+0x20a>
    4a32:	6823      	ldr	r3, [r4, #0]
    4a34:	07db      	lsls	r3, r3, #31
    4a36:	d506      	bpl.n	4a46 <_printf_i+0x20a>
    4a38:	6863      	ldr	r3, [r4, #4]
    4a3a:	6922      	ldr	r2, [r4, #16]
    4a3c:	4293      	cmp	r3, r2
    4a3e:	dc02      	bgt.n	4a46 <_printf_i+0x20a>
    4a40:	2330      	movs	r3, #48	; 0x30
    4a42:	3e01      	subs	r6, #1
    4a44:	7033      	strb	r3, [r6, #0]
    4a46:	9b04      	ldr	r3, [sp, #16]
    4a48:	1b9b      	subs	r3, r3, r6
    4a4a:	6123      	str	r3, [r4, #16]
    4a4c:	9b07      	ldr	r3, [sp, #28]
    4a4e:	aa09      	add	r2, sp, #36	; 0x24
    4a50:	9300      	str	r3, [sp, #0]
    4a52:	0021      	movs	r1, r4
    4a54:	9b06      	ldr	r3, [sp, #24]
    4a56:	9805      	ldr	r0, [sp, #20]
    4a58:	f7ff fe82 	bl	4760 <_printf_common>
    4a5c:	1c43      	adds	r3, r0, #1
    4a5e:	d1b3      	bne.n	49c8 <_printf_i+0x18c>
    4a60:	2001      	movs	r0, #1
    4a62:	4240      	negs	r0, r0
    4a64:	b00b      	add	sp, #44	; 0x2c
    4a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a68:	00004da6 	.word	0x00004da6
    4a6c:	00004d95 	.word	0x00004d95

00004a70 <_sbrk_r>:
    4a70:	2300      	movs	r3, #0
    4a72:	b570      	push	{r4, r5, r6, lr}
    4a74:	4c06      	ldr	r4, [pc, #24]	; (4a90 <_sbrk_r+0x20>)
    4a76:	0005      	movs	r5, r0
    4a78:	0008      	movs	r0, r1
    4a7a:	6023      	str	r3, [r4, #0]
    4a7c:	f7fd f9b2 	bl	1de4 <_sbrk>
    4a80:	1c43      	adds	r3, r0, #1
    4a82:	d103      	bne.n	4a8c <_sbrk_r+0x1c>
    4a84:	6823      	ldr	r3, [r4, #0]
    4a86:	2b00      	cmp	r3, #0
    4a88:	d000      	beq.n	4a8c <_sbrk_r+0x1c>
    4a8a:	602b      	str	r3, [r5, #0]
    4a8c:	bd70      	pop	{r4, r5, r6, pc}
    4a8e:	46c0      	nop			; (mov r8, r8)
    4a90:	20000348 	.word	0x20000348

00004a94 <__sread>:
    4a94:	b570      	push	{r4, r5, r6, lr}
    4a96:	000c      	movs	r4, r1
    4a98:	250e      	movs	r5, #14
    4a9a:	5f49      	ldrsh	r1, [r1, r5]
    4a9c:	f000 f8b2 	bl	4c04 <_read_r>
    4aa0:	2800      	cmp	r0, #0
    4aa2:	db03      	blt.n	4aac <__sread+0x18>
    4aa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4aa6:	181b      	adds	r3, r3, r0
    4aa8:	6563      	str	r3, [r4, #84]	; 0x54
    4aaa:	bd70      	pop	{r4, r5, r6, pc}
    4aac:	89a3      	ldrh	r3, [r4, #12]
    4aae:	4a02      	ldr	r2, [pc, #8]	; (4ab8 <__sread+0x24>)
    4ab0:	4013      	ands	r3, r2
    4ab2:	81a3      	strh	r3, [r4, #12]
    4ab4:	e7f9      	b.n	4aaa <__sread+0x16>
    4ab6:	46c0      	nop			; (mov r8, r8)
    4ab8:	ffffefff 	.word	0xffffefff

00004abc <__swrite>:
    4abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4abe:	001f      	movs	r7, r3
    4ac0:	898b      	ldrh	r3, [r1, #12]
    4ac2:	0005      	movs	r5, r0
    4ac4:	000c      	movs	r4, r1
    4ac6:	0016      	movs	r6, r2
    4ac8:	05db      	lsls	r3, r3, #23
    4aca:	d505      	bpl.n	4ad8 <__swrite+0x1c>
    4acc:	230e      	movs	r3, #14
    4ace:	5ec9      	ldrsh	r1, [r1, r3]
    4ad0:	2200      	movs	r2, #0
    4ad2:	2302      	movs	r3, #2
    4ad4:	f000 f874 	bl	4bc0 <_lseek_r>
    4ad8:	89a3      	ldrh	r3, [r4, #12]
    4ada:	4a05      	ldr	r2, [pc, #20]	; (4af0 <__swrite+0x34>)
    4adc:	0028      	movs	r0, r5
    4ade:	4013      	ands	r3, r2
    4ae0:	81a3      	strh	r3, [r4, #12]
    4ae2:	0032      	movs	r2, r6
    4ae4:	230e      	movs	r3, #14
    4ae6:	5ee1      	ldrsh	r1, [r4, r3]
    4ae8:	003b      	movs	r3, r7
    4aea:	f000 f81f 	bl	4b2c <_write_r>
    4aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4af0:	ffffefff 	.word	0xffffefff

00004af4 <__sseek>:
    4af4:	b570      	push	{r4, r5, r6, lr}
    4af6:	000c      	movs	r4, r1
    4af8:	250e      	movs	r5, #14
    4afa:	5f49      	ldrsh	r1, [r1, r5]
    4afc:	f000 f860 	bl	4bc0 <_lseek_r>
    4b00:	89a3      	ldrh	r3, [r4, #12]
    4b02:	1c42      	adds	r2, r0, #1
    4b04:	d103      	bne.n	4b0e <__sseek+0x1a>
    4b06:	4a05      	ldr	r2, [pc, #20]	; (4b1c <__sseek+0x28>)
    4b08:	4013      	ands	r3, r2
    4b0a:	81a3      	strh	r3, [r4, #12]
    4b0c:	bd70      	pop	{r4, r5, r6, pc}
    4b0e:	2280      	movs	r2, #128	; 0x80
    4b10:	0152      	lsls	r2, r2, #5
    4b12:	4313      	orrs	r3, r2
    4b14:	81a3      	strh	r3, [r4, #12]
    4b16:	6560      	str	r0, [r4, #84]	; 0x54
    4b18:	e7f8      	b.n	4b0c <__sseek+0x18>
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	ffffefff 	.word	0xffffefff

00004b20 <__sclose>:
    4b20:	b510      	push	{r4, lr}
    4b22:	230e      	movs	r3, #14
    4b24:	5ec9      	ldrsh	r1, [r1, r3]
    4b26:	f000 f815 	bl	4b54 <_close_r>
    4b2a:	bd10      	pop	{r4, pc}

00004b2c <_write_r>:
    4b2c:	b570      	push	{r4, r5, r6, lr}
    4b2e:	0005      	movs	r5, r0
    4b30:	0008      	movs	r0, r1
    4b32:	0011      	movs	r1, r2
    4b34:	2200      	movs	r2, #0
    4b36:	4c06      	ldr	r4, [pc, #24]	; (4b50 <_write_r+0x24>)
    4b38:	6022      	str	r2, [r4, #0]
    4b3a:	001a      	movs	r2, r3
    4b3c:	f7fd f92a 	bl	1d94 <_write>
    4b40:	1c43      	adds	r3, r0, #1
    4b42:	d103      	bne.n	4b4c <_write_r+0x20>
    4b44:	6823      	ldr	r3, [r4, #0]
    4b46:	2b00      	cmp	r3, #0
    4b48:	d000      	beq.n	4b4c <_write_r+0x20>
    4b4a:	602b      	str	r3, [r5, #0]
    4b4c:	bd70      	pop	{r4, r5, r6, pc}
    4b4e:	46c0      	nop			; (mov r8, r8)
    4b50:	20000348 	.word	0x20000348

00004b54 <_close_r>:
    4b54:	2300      	movs	r3, #0
    4b56:	b570      	push	{r4, r5, r6, lr}
    4b58:	4c06      	ldr	r4, [pc, #24]	; (4b74 <_close_r+0x20>)
    4b5a:	0005      	movs	r5, r0
    4b5c:	0008      	movs	r0, r1
    4b5e:	6023      	str	r3, [r4, #0]
    4b60:	f7fd f952 	bl	1e08 <_close>
    4b64:	1c43      	adds	r3, r0, #1
    4b66:	d103      	bne.n	4b70 <_close_r+0x1c>
    4b68:	6823      	ldr	r3, [r4, #0]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d000      	beq.n	4b70 <_close_r+0x1c>
    4b6e:	602b      	str	r3, [r5, #0]
    4b70:	bd70      	pop	{r4, r5, r6, pc}
    4b72:	46c0      	nop			; (mov r8, r8)
    4b74:	20000348 	.word	0x20000348

00004b78 <_fstat_r>:
    4b78:	2300      	movs	r3, #0
    4b7a:	b570      	push	{r4, r5, r6, lr}
    4b7c:	4c06      	ldr	r4, [pc, #24]	; (4b98 <_fstat_r+0x20>)
    4b7e:	0005      	movs	r5, r0
    4b80:	0008      	movs	r0, r1
    4b82:	0011      	movs	r1, r2
    4b84:	6023      	str	r3, [r4, #0]
    4b86:	f7fd f942 	bl	1e0e <_fstat>
    4b8a:	1c43      	adds	r3, r0, #1
    4b8c:	d103      	bne.n	4b96 <_fstat_r+0x1e>
    4b8e:	6823      	ldr	r3, [r4, #0]
    4b90:	2b00      	cmp	r3, #0
    4b92:	d000      	beq.n	4b96 <_fstat_r+0x1e>
    4b94:	602b      	str	r3, [r5, #0]
    4b96:	bd70      	pop	{r4, r5, r6, pc}
    4b98:	20000348 	.word	0x20000348

00004b9c <_isatty_r>:
    4b9c:	2300      	movs	r3, #0
    4b9e:	b570      	push	{r4, r5, r6, lr}
    4ba0:	4c06      	ldr	r4, [pc, #24]	; (4bbc <_isatty_r+0x20>)
    4ba2:	0005      	movs	r5, r0
    4ba4:	0008      	movs	r0, r1
    4ba6:	6023      	str	r3, [r4, #0]
    4ba8:	f7fd f936 	bl	1e18 <_isatty>
    4bac:	1c43      	adds	r3, r0, #1
    4bae:	d103      	bne.n	4bb8 <_isatty_r+0x1c>
    4bb0:	6823      	ldr	r3, [r4, #0]
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d000      	beq.n	4bb8 <_isatty_r+0x1c>
    4bb6:	602b      	str	r3, [r5, #0]
    4bb8:	bd70      	pop	{r4, r5, r6, pc}
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	20000348 	.word	0x20000348

00004bc0 <_lseek_r>:
    4bc0:	b570      	push	{r4, r5, r6, lr}
    4bc2:	0005      	movs	r5, r0
    4bc4:	0008      	movs	r0, r1
    4bc6:	0011      	movs	r1, r2
    4bc8:	2200      	movs	r2, #0
    4bca:	4c06      	ldr	r4, [pc, #24]	; (4be4 <_lseek_r+0x24>)
    4bcc:	6022      	str	r2, [r4, #0]
    4bce:	001a      	movs	r2, r3
    4bd0:	f7fd f924 	bl	1e1c <_lseek>
    4bd4:	1c43      	adds	r3, r0, #1
    4bd6:	d103      	bne.n	4be0 <_lseek_r+0x20>
    4bd8:	6823      	ldr	r3, [r4, #0]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d000      	beq.n	4be0 <_lseek_r+0x20>
    4bde:	602b      	str	r3, [r5, #0]
    4be0:	bd70      	pop	{r4, r5, r6, pc}
    4be2:	46c0      	nop			; (mov r8, r8)
    4be4:	20000348 	.word	0x20000348

00004be8 <memchr>:
    4be8:	b2c9      	uxtb	r1, r1
    4bea:	1882      	adds	r2, r0, r2
    4bec:	4290      	cmp	r0, r2
    4bee:	d101      	bne.n	4bf4 <memchr+0xc>
    4bf0:	2000      	movs	r0, #0
    4bf2:	4770      	bx	lr
    4bf4:	7803      	ldrb	r3, [r0, #0]
    4bf6:	428b      	cmp	r3, r1
    4bf8:	d0fb      	beq.n	4bf2 <memchr+0xa>
    4bfa:	3001      	adds	r0, #1
    4bfc:	e7f6      	b.n	4bec <memchr+0x4>

00004bfe <__malloc_lock>:
    4bfe:	4770      	bx	lr

00004c00 <__malloc_unlock>:
    4c00:	4770      	bx	lr
	...

00004c04 <_read_r>:
    4c04:	b570      	push	{r4, r5, r6, lr}
    4c06:	0005      	movs	r5, r0
    4c08:	0008      	movs	r0, r1
    4c0a:	0011      	movs	r1, r2
    4c0c:	2200      	movs	r2, #0
    4c0e:	4c06      	ldr	r4, [pc, #24]	; (4c28 <_read_r+0x24>)
    4c10:	6022      	str	r2, [r4, #0]
    4c12:	001a      	movs	r2, r3
    4c14:	f7fd f89c 	bl	1d50 <_read>
    4c18:	1c43      	adds	r3, r0, #1
    4c1a:	d103      	bne.n	4c24 <_read_r+0x20>
    4c1c:	6823      	ldr	r3, [r4, #0]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d000      	beq.n	4c24 <_read_r+0x20>
    4c22:	602b      	str	r3, [r5, #0]
    4c24:	bd70      	pop	{r4, r5, r6, pc}
    4c26:	46c0      	nop			; (mov r8, r8)
    4c28:	20000348 	.word	0x20000348
    4c2c:	42000800 	.word	0x42000800
    4c30:	42000c00 	.word	0x42000c00
    4c34:	42001000 	.word	0x42001000
    4c38:	42001400 	.word	0x42001400
    4c3c:	42001800 	.word	0x42001800
    4c40:	42001c00 	.word	0x42001c00
    4c44:	0000145a 	.word	0x0000145a
    4c48:	00001456 	.word	0x00001456
    4c4c:	00001456 	.word	0x00001456
    4c50:	000014bc 	.word	0x000014bc
    4c54:	000014bc 	.word	0x000014bc
    4c58:	0000146e 	.word	0x0000146e
    4c5c:	00001460 	.word	0x00001460
    4c60:	00001474 	.word	0x00001474
    4c64:	000014aa 	.word	0x000014aa
    4c68:	00001640 	.word	0x00001640
    4c6c:	00001620 	.word	0x00001620
    4c70:	00001620 	.word	0x00001620
    4c74:	000016ac 	.word	0x000016ac
    4c78:	00001632 	.word	0x00001632
    4c7c:	0000164e 	.word	0x0000164e
    4c80:	00001624 	.word	0x00001624
    4c84:	0000165c 	.word	0x0000165c
    4c88:	0000169c 	.word	0x0000169c
    4c8c:	64616572 	.word	0x64616572
    4c90:	32744120 	.word	0x32744120
    4c94:	32304334 	.word	0x32304334
    4c98:	25203d44 	.word	0x25203d44
    4c9c:	00000073 	.word	0x00000073
    4ca0:	00002b40 	.word	0x00002b40
    4ca4:	00002b22 	.word	0x00002b22
    4ca8:	00002adc 	.word	0x00002adc
    4cac:	000029fa 	.word	0x000029fa
    4cb0:	00002adc 	.word	0x00002adc
    4cb4:	00002b14 	.word	0x00002b14
    4cb8:	00002adc 	.word	0x00002adc
    4cbc:	000029fa 	.word	0x000029fa
    4cc0:	00002b22 	.word	0x00002b22
    4cc4:	00002b22 	.word	0x00002b22
    4cc8:	00002b14 	.word	0x00002b14
    4ccc:	000029fa 	.word	0x000029fa
    4cd0:	000029f2 	.word	0x000029f2
    4cd4:	000029f2 	.word	0x000029f2
    4cd8:	000029f2 	.word	0x000029f2
    4cdc:	00002d58 	.word	0x00002d58
    4ce0:	000031a0 	.word	0x000031a0
    4ce4:	00003060 	.word	0x00003060
    4ce8:	00003060 	.word	0x00003060
    4cec:	0000305c 	.word	0x0000305c
    4cf0:	00003178 	.word	0x00003178
    4cf4:	00003178 	.word	0x00003178
    4cf8:	0000316a 	.word	0x0000316a
    4cfc:	0000305c 	.word	0x0000305c
    4d00:	00003178 	.word	0x00003178
    4d04:	0000316a 	.word	0x0000316a
    4d08:	00003178 	.word	0x00003178
    4d0c:	0000305c 	.word	0x0000305c
    4d10:	00003180 	.word	0x00003180
    4d14:	00003180 	.word	0x00003180
    4d18:	00003180 	.word	0x00003180
    4d1c:	00003384 	.word	0x00003384

00004d20 <_global_impure_ptr>:
    4d20:	2000001c                                ... 

00004d24 <__sf_fake_stderr>:
	...

00004d44 <__sf_fake_stdin>:
	...

00004d64 <__sf_fake_stdout>:
	...
    4d84:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4d94:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4da4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4db4:	00006665                                ef..

00004db8 <_init>:
    4db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dba:	46c0      	nop			; (mov r8, r8)
    4dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4dbe:	bc08      	pop	{r3}
    4dc0:	469e      	mov	lr, r3
    4dc2:	4770      	bx	lr

00004dc4 <__init_array_start>:
    4dc4:	000000dd 	.word	0x000000dd

00004dc8 <_fini>:
    4dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dca:	46c0      	nop			; (mov r8, r8)
    4dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4dce:	bc08      	pop	{r3}
    4dd0:	469e      	mov	lr, r3
    4dd2:	4770      	bx	lr

00004dd4 <__fini_array_start>:
    4dd4:	000000b5 	.word	0x000000b5
