
APPS_WSN_DEMO_ED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000801c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  0000801c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001274  200000c0  000080e0  000200c0  2**3
                  ALLOC
  3 .stack        00002004  20001334  00009354  000200c0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      000000e5  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00051edc  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000784a  00000000  00000000  000720a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e4ae  00000000  00000000  000798ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ab8  00000000  00000000  00087d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001200  00000000  00000000  00088855  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000203bc  00000000  00000000  00089a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019bc1  00000000  00000000  000a9e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000899b3  00000000  00000000  000c39d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e0c  00000000  00000000  0014d388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 33 00 20 2d 1c 00 00 29 1c 00 00 29 1c 00 00     83. -...)...)...
	...
      2c:	29 1c 00 00 00 00 00 00 00 00 00 00 29 1c 00 00     )...........)...
      3c:	29 1c 00 00 29 1c 00 00 29 1c 00 00 29 1c 00 00     )...)...)...)...
      4c:	61 0a 00 00 09 07 00 00 29 1c 00 00 29 1c 00 00     a.......)...)...
      5c:	29 1c 00 00 29 1c 00 00 cd 0c 00 00 dd 0c 00 00     )...)...........
      6c:	ed 0c 00 00 fd 0c 00 00 0d 0d 00 00 1d 0d 00 00     ................
      7c:	29 1c 00 00 29 1c 00 00 29 1c 00 00 09 19 00 00     )...)...).......
      8c:	19 19 00 00 29 19 00 00 00 00 00 00 00 00 00 00     ....)...........
      9c:	29 1c 00 00 29 1c 00 00 00 00 00 00 29 1c 00 00     )...).......)...
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c0 	.word	0x200000c0
      d4:	00000000 	.word	0x00000000
      d8:	0000801c 	.word	0x0000801c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c4 	.word	0x200000c4
     108:	0000801c 	.word	0x0000801c
     10c:	0000801c 	.word	0x0000801c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001601 	.word	0x00001601
     140:	000071fd 	.word	0x000071fd
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	200000dc 	.word	0x200000dc
     1b8:	200000e0 	.word	0x200000e0
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	200000dc 	.word	0x200000dc
     1e8:	200000e0 	.word	0x200000e0
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b570      	push	{r4, r5, r6, lr}
     1f2:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2301      	movs	r3, #1
     1f8:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     1fa:	2600      	movs	r6, #0
     1fc:	70a6      	strb	r6, [r4, #2]
#ifdef CONF_BOARD_AT86RFX	
//--------------------------------------------------------------------//
	struct port_config pin_conf;
//--------------------------------------------------------------------//
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	2052      	movs	r0, #82	; 0x52
     204:	4d12      	ldr	r5, [pc, #72]	; (250 <system_board_init+0x60>)
     206:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     208:	0021      	movs	r1, r4
     20a:	203e      	movs	r0, #62	; 0x3e
     20c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     20e:	0021      	movs	r1, r4
     210:	203f      	movs	r0, #63	; 0x3f
     212:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	202f      	movs	r0, #47	; 0x2f
     218:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     21a:	0021      	movs	r1, r4
     21c:	2014      	movs	r0, #20
     21e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     220:	2280      	movs	r2, #128	; 0x80
     222:	02d2      	lsls	r2, r2, #11
     224:	4b0b      	ldr	r3, [pc, #44]	; (254 <system_board_init+0x64>)
     226:	619a      	str	r2, [r3, #24]
     228:	4b0b      	ldr	r3, [pc, #44]	; (258 <system_board_init+0x68>)
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	05d2      	lsls	r2, r2, #23
     22e:	619a      	str	r2, [r3, #24]
     230:	2280      	movs	r2, #128	; 0x80
     232:	0612      	lsls	r2, r2, #24
     234:	619a      	str	r2, [r3, #24]
     236:	2280      	movs	r2, #128	; 0x80
     238:	0212      	lsls	r2, r2, #8
     23a:	619a      	str	r2, [r3, #24]
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	0352      	lsls	r2, r2, #13
     240:	4b06      	ldr	r3, [pc, #24]	; (25c <system_board_init+0x6c>)
     242:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     244:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     246:	0021      	movs	r1, r4
     248:	2053      	movs	r0, #83	; 0x53
     24a:	47a8      	blx	r5
//	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
//	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
//	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     24c:	b002      	add	sp, #8
     24e:	bd70      	pop	{r4, r5, r6, pc}
     250:	0000086d 	.word	0x0000086d
     254:	41004500 	.word	0x41004500
     258:	41004480 	.word	0x41004480
     25c:	41004400 	.word	0x41004400

00000260 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     260:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     262:	2200      	movs	r2, #0
     264:	2300      	movs	r3, #0
     266:	7002      	strb	r2, [r0, #0]
//	config->reference                     = ADC_REFERENCE_INT1V;
	config->reference                     = ADC_REFCTRL_REFSEL_INTVCC0;	// by jsk 2019.03.11
     268:	2101      	movs	r1, #1
     26a:	7041      	strb	r1, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     26c:	2100      	movs	r1, #0
     26e:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     270:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     272:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     274:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     276:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     278:	6082      	str	r2, [r0, #8]

	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ; 
     27a:	2406      	movs	r4, #6
     27c:	7304      	strb	r4, [r0, #12]
//	config->positive_input                = ADC_POSITIVE_INPUT_PIN7 ; // by jsk 2019.03.11

	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     27e:	24c0      	movs	r4, #192	; 0xc0
     280:	0164      	lsls	r4, r4, #5
     282:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     284:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     286:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     288:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     28a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     28c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     28e:	242a      	movs	r4, #42	; 0x2a
     290:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     292:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     294:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     296:	3c06      	subs	r4, #6
     298:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     29a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     29c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     29e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     2a0:	232b      	movs	r3, #43	; 0x2b
     2a2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     2a4:	3301      	adds	r3, #1
     2a6:	54c1      	strb	r1, [r0, r3]
//	config->pin_scan.inputs_to_scan       = 2; // by jsk 2019.03.11
}
     2a8:	bd10      	pop	{r4, pc}
	...

000002ac <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ae:	46d6      	mov	lr, sl
     2b0:	464f      	mov	r7, r9
     2b2:	4646      	mov	r6, r8
     2b4:	b5c0      	push	{r6, r7, lr}
     2b6:	b096      	sub	sp, #88	; 0x58
     2b8:	0007      	movs	r7, r0
     2ba:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     2bc:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2be:	4acb      	ldr	r2, [pc, #812]	; (5ec <adc_init+0x340>)
     2c0:	6a10      	ldr	r0, [r2, #32]
     2c2:	2380      	movs	r3, #128	; 0x80
     2c4:	025b      	lsls	r3, r3, #9
     2c6:	4303      	orrs	r3, r0
     2c8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2ca:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     2cc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2ce:	07db      	lsls	r3, r3, #31
     2d0:	d505      	bpl.n	2de <adc_init+0x32>
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}
	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     2d2:	b016      	add	sp, #88	; 0x58
     2d4:	bc1c      	pop	{r2, r3, r4}
     2d6:	4690      	mov	r8, r2
     2d8:	4699      	mov	r9, r3
     2da:	46a2      	mov	sl, r4
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2de:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     2e0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2e2:	079b      	lsls	r3, r3, #30
     2e4:	d4f5      	bmi.n	2d2 <adc_init+0x26>
	module_inst->reference = config->reference;
     2e6:	7873      	ldrb	r3, [r6, #1]
     2e8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     2ea:	2b00      	cmp	r3, #0
     2ec:	d104      	bne.n	2f8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     2ee:	4ac0      	ldr	r2, [pc, #768]	; (5f0 <adc_init+0x344>)
     2f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     2f2:	2104      	movs	r1, #4
     2f4:	430b      	orrs	r3, r1
     2f6:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     2fc:	7833      	ldrb	r3, [r6, #0]
     2fe:	466a      	mov	r2, sp
     300:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     302:	4669      	mov	r1, sp
     304:	201e      	movs	r0, #30
     306:	4bbb      	ldr	r3, [pc, #748]	; (5f4 <adc_init+0x348>)
     308:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     30a:	201e      	movs	r0, #30
     30c:	4bba      	ldr	r3, [pc, #744]	; (5f8 <adc_init+0x34c>)
     30e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     310:	232c      	movs	r3, #44	; 0x2c
     312:	5cf2      	ldrb	r2, [r6, r3]
     314:	2a00      	cmp	r2, #0
     316:	d054      	beq.n	3c2 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     318:	3b01      	subs	r3, #1
     31a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     31c:	7b33      	ldrb	r3, [r6, #12]
     31e:	18eb      	adds	r3, r5, r3
     320:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     322:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     324:	b2c9      	uxtb	r1, r1
     326:	428b      	cmp	r3, r1
     328:	d221      	bcs.n	36e <adc_init+0xc2>
     32a:	1952      	adds	r2, r2, r5
     32c:	b2d3      	uxtb	r3, r2
     32e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     330:	4bb2      	ldr	r3, [pc, #712]	; (5fc <adc_init+0x350>)
     332:	469a      	mov	sl, r3
     334:	e003      	b.n	33e <adc_init+0x92>
			offset++;
     336:	3501      	adds	r5, #1
     338:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     33a:	45a9      	cmp	r9, r5
     33c:	d017      	beq.n	36e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     33e:	240f      	movs	r4, #15
     340:	402c      	ands	r4, r5
     342:	7b33      	ldrb	r3, [r6, #12]
     344:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     346:	2250      	movs	r2, #80	; 0x50
     348:	49ad      	ldr	r1, [pc, #692]	; (600 <adc_init+0x354>)
     34a:	a802      	add	r0, sp, #8
     34c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     34e:	2c13      	cmp	r4, #19
     350:	d8f1      	bhi.n	336 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     352:	00a4      	lsls	r4, r4, #2
     354:	ab02      	add	r3, sp, #8
     356:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     358:	a901      	add	r1, sp, #4
     35a:	2300      	movs	r3, #0
     35c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     35e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     360:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     362:	3301      	adds	r3, #1
     364:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     366:	b2c0      	uxtb	r0, r0
     368:	4ba6      	ldr	r3, [pc, #664]	; (604 <adc_init+0x358>)
     36a:	4798      	blx	r3
     36c:	e7e3      	b.n	336 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     36e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     370:	2250      	movs	r2, #80	; 0x50
     372:	49a3      	ldr	r1, [pc, #652]	; (600 <adc_init+0x354>)
     374:	a802      	add	r0, sp, #8
     376:	4ba1      	ldr	r3, [pc, #644]	; (5fc <adc_init+0x350>)
     378:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     37a:	2c13      	cmp	r4, #19
     37c:	d913      	bls.n	3a6 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     37e:	7d73      	ldrb	r3, [r6, #21]
     380:	009b      	lsls	r3, r3, #2
     382:	b2db      	uxtb	r3, r3
     384:	4642      	mov	r2, r8
     386:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     388:	7db3      	ldrb	r3, [r6, #22]
     38a:	01db      	lsls	r3, r3, #7
     38c:	7872      	ldrb	r2, [r6, #1]
     38e:	4313      	orrs	r3, r2
     390:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     392:	4642      	mov	r2, r8
     394:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     396:	7933      	ldrb	r3, [r6, #4]
     398:	2b34      	cmp	r3, #52	; 0x34
     39a:	d900      	bls.n	39e <adc_init+0xf2>
     39c:	e178      	b.n	690 <adc_init+0x3e4>
     39e:	009b      	lsls	r3, r3, #2
     3a0:	4a99      	ldr	r2, [pc, #612]	; (608 <adc_init+0x35c>)
     3a2:	58d3      	ldr	r3, [r2, r3]
     3a4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3a6:	00a4      	lsls	r4, r4, #2
     3a8:	ab02      	add	r3, sp, #8
     3aa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3ac:	a901      	add	r1, sp, #4
     3ae:	2300      	movs	r3, #0
     3b0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3b2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3b4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3b6:	3301      	adds	r3, #1
     3b8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3ba:	b2c0      	uxtb	r0, r0
     3bc:	4b91      	ldr	r3, [pc, #580]	; (604 <adc_init+0x358>)
     3be:	4798      	blx	r3
     3c0:	e7dd      	b.n	37e <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     3c2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     3c4:	2250      	movs	r2, #80	; 0x50
     3c6:	498e      	ldr	r1, [pc, #568]	; (600 <adc_init+0x354>)
     3c8:	a802      	add	r0, sp, #8
     3ca:	4b8c      	ldr	r3, [pc, #560]	; (5fc <adc_init+0x350>)
     3cc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3ce:	2c13      	cmp	r4, #19
     3d0:	d915      	bls.n	3fe <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     3d2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     3d4:	2250      	movs	r2, #80	; 0x50
     3d6:	498a      	ldr	r1, [pc, #552]	; (600 <adc_init+0x354>)
     3d8:	a802      	add	r0, sp, #8
     3da:	4b88      	ldr	r3, [pc, #544]	; (5fc <adc_init+0x350>)
     3dc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3de:	2c13      	cmp	r4, #19
     3e0:	d8cd      	bhi.n	37e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3e2:	00a4      	lsls	r4, r4, #2
     3e4:	ab02      	add	r3, sp, #8
     3e6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3e8:	a901      	add	r1, sp, #4
     3ea:	2300      	movs	r3, #0
     3ec:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3f2:	3301      	adds	r3, #1
     3f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3f6:	b2c0      	uxtb	r0, r0
     3f8:	4b82      	ldr	r3, [pc, #520]	; (604 <adc_init+0x358>)
     3fa:	4798      	blx	r3
     3fc:	e7bf      	b.n	37e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3fe:	00a4      	lsls	r4, r4, #2
     400:	ab02      	add	r3, sp, #8
     402:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     404:	a901      	add	r1, sp, #4
     406:	2300      	movs	r3, #0
     408:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     40a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     40c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     40e:	3301      	adds	r3, #1
     410:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     412:	b2c0      	uxtb	r0, r0
     414:	4b7b      	ldr	r3, [pc, #492]	; (604 <adc_init+0x358>)
     416:	4798      	blx	r3
     418:	e7db      	b.n	3d2 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     41a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     41c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     41e:	2102      	movs	r1, #2
     420:	e01a      	b.n	458 <adc_init+0x1ac>
		adjres = config->divide_result;
     422:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     424:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     426:	2410      	movs	r4, #16
     428:	e016      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     42a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     42c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     42e:	2101      	movs	r1, #1
     430:	e012      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     432:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     434:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     436:	2100      	movs	r1, #0
     438:	e00e      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     43a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     43c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     43e:	2100      	movs	r1, #0
     440:	e00a      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     442:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     444:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     446:	2100      	movs	r1, #0
     448:	e006      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     44a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     44c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     44e:	2100      	movs	r1, #0
     450:	e002      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     452:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     454:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     456:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     458:	0109      	lsls	r1, r1, #4
     45a:	2270      	movs	r2, #112	; 0x70
     45c:	400a      	ands	r2, r1
     45e:	4313      	orrs	r3, r2
     460:	4642      	mov	r2, r8
     462:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     464:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     466:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     468:	2b3f      	cmp	r3, #63	; 0x3f
     46a:	d900      	bls.n	46e <adc_init+0x1c2>
     46c:	e731      	b.n	2d2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     46e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     470:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     472:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     474:	b25b      	sxtb	r3, r3
     476:	2b00      	cmp	r3, #0
     478:	dbfb      	blt.n	472 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     47a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     47c:	8872      	ldrh	r2, [r6, #2]
     47e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     480:	2224      	movs	r2, #36	; 0x24
     482:	5cb2      	ldrb	r2, [r6, r2]
     484:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     486:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     488:	7d32      	ldrb	r2, [r6, #20]
     48a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     48c:	4313      	orrs	r3, r2
     48e:	7cb2      	ldrb	r2, [r6, #18]
     490:	0052      	lsls	r2, r2, #1
     492:	4313      	orrs	r3, r2
     494:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     496:	4642      	mov	r2, r8
     498:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     49a:	7e33      	ldrb	r3, [r6, #24]
     49c:	2b00      	cmp	r3, #0
     49e:	d020      	beq.n	4e2 <adc_init+0x236>
		switch (resolution) {
     4a0:	2c10      	cmp	r4, #16
     4a2:	d100      	bne.n	4a6 <adc_init+0x1fa>
     4a4:	e0d6      	b.n	654 <adc_init+0x3a8>
     4a6:	d800      	bhi.n	4aa <adc_init+0x1fe>
     4a8:	e080      	b.n	5ac <adc_init+0x300>
     4aa:	2c20      	cmp	r4, #32
     4ac:	d100      	bne.n	4b0 <adc_init+0x204>
     4ae:	e0b3      	b.n	618 <adc_init+0x36c>
     4b0:	2c30      	cmp	r4, #48	; 0x30
     4b2:	d116      	bne.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     4b4:	7cf2      	ldrb	r2, [r6, #19]
     4b6:	2a00      	cmp	r2, #0
     4b8:	d00a      	beq.n	4d0 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     4ba:	69f2      	ldr	r2, [r6, #28]
     4bc:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4be:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4c0:	2aff      	cmp	r2, #255	; 0xff
     4c2:	d900      	bls.n	4c6 <adc_init+0x21a>
     4c4:	e705      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     4c6:	6a32      	ldr	r2, [r6, #32]
     4c8:	3280      	adds	r2, #128	; 0x80
     4ca:	2aff      	cmp	r2, #255	; 0xff
     4cc:	d900      	bls.n	4d0 <adc_init+0x224>
     4ce:	e700      	b.n	2d2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4d2:	69f2      	ldr	r2, [r6, #28]
     4d4:	2aff      	cmp	r2, #255	; 0xff
     4d6:	dd00      	ble.n	4da <adc_init+0x22e>
     4d8:	e6fb      	b.n	2d2 <adc_init+0x26>
     4da:	6a32      	ldr	r2, [r6, #32]
     4dc:	2aff      	cmp	r2, #255	; 0xff
     4de:	dd00      	ble.n	4e2 <adc_init+0x236>
     4e0:	e6f7      	b.n	2d2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     4e2:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4e4:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     4e6:	b252      	sxtb	r2, r2
     4e8:	2a00      	cmp	r2, #0
     4ea:	dbfb      	blt.n	4e4 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     4ec:	4642      	mov	r2, r8
     4ee:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     4f0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4f2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4f4:	b25b      	sxtb	r3, r3
     4f6:	2b00      	cmp	r3, #0
     4f8:	dbfb      	blt.n	4f2 <adc_init+0x246>
	adc_module->WINLT.reg =
     4fa:	8bb3      	ldrh	r3, [r6, #28]
     4fc:	4642      	mov	r2, r8
     4fe:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     500:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     502:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     504:	b25b      	sxtb	r3, r3
     506:	2b00      	cmp	r3, #0
     508:	dbfb      	blt.n	502 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     50a:	8c33      	ldrh	r3, [r6, #32]
     50c:	4642      	mov	r2, r8
     50e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     510:	232c      	movs	r3, #44	; 0x2c
     512:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     514:	2b00      	cmp	r3, #0
     516:	d005      	beq.n	524 <adc_init+0x278>
		inputs_to_scan--;
     518:	3b01      	subs	r3, #1
     51a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     51c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     51e:	2b0f      	cmp	r3, #15
     520:	d900      	bls.n	524 <adc_init+0x278>
     522:	e6d6      	b.n	2d2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     524:	222b      	movs	r2, #43	; 0x2b
     526:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     528:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     52a:	290f      	cmp	r1, #15
     52c:	d900      	bls.n	530 <adc_init+0x284>
     52e:	e6d0      	b.n	2d2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     530:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     532:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     534:	b252      	sxtb	r2, r2
     536:	2a00      	cmp	r2, #0
     538:	dbfb      	blt.n	532 <adc_init+0x286>
			config->negative_input |
     53a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     53c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     53e:	4302      	orrs	r2, r0
     540:	68b0      	ldr	r0, [r6, #8]
     542:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     544:	0509      	lsls	r1, r1, #20
			config->negative_input |
     546:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     548:	041b      	lsls	r3, r3, #16
			config->negative_input |
     54a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     54c:	4642      	mov	r2, r8
     54e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     550:	232a      	movs	r3, #42	; 0x2a
     552:	5cf3      	ldrb	r3, [r6, r3]
     554:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     556:	230f      	movs	r3, #15
     558:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     55a:	3315      	adds	r3, #21
     55c:	5cf3      	ldrb	r3, [r6, r3]
     55e:	2b00      	cmp	r3, #0
     560:	d012      	beq.n	588 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     562:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     564:	4a29      	ldr	r2, [pc, #164]	; (60c <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     566:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     568:	4293      	cmp	r3, r2
     56a:	d900      	bls.n	56e <adc_init+0x2c2>
     56c:	e6b1      	b.n	2d2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     56e:	4642      	mov	r2, r8
     570:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     572:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     574:	2380      	movs	r3, #128	; 0x80
     576:	011b      	lsls	r3, r3, #4
     578:	18d3      	adds	r3, r2, r3
     57a:	4924      	ldr	r1, [pc, #144]	; (60c <adc_init+0x360>)
     57c:	b29b      	uxth	r3, r3
     57e:	428b      	cmp	r3, r1
     580:	d900      	bls.n	584 <adc_init+0x2d8>
     582:	e6a6      	b.n	2d2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     584:	4643      	mov	r3, r8
     586:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     588:	4b21      	ldr	r3, [pc, #132]	; (610 <adc_init+0x364>)
     58a:	681b      	ldr	r3, [r3, #0]
     58c:	015b      	lsls	r3, r3, #5
     58e:	22e0      	movs	r2, #224	; 0xe0
     590:	00d2      	lsls	r2, r2, #3
     592:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     594:	4a1f      	ldr	r2, [pc, #124]	; (614 <adc_init+0x368>)
     596:	6851      	ldr	r1, [r2, #4]
     598:	0149      	lsls	r1, r1, #5
     59a:	6812      	ldr	r2, [r2, #0]
     59c:	0ed2      	lsrs	r2, r2, #27
     59e:	430a      	orrs	r2, r1
     5a0:	b2d2      	uxtb	r2, r2
			) |
     5a2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     5a4:	4642      	mov	r2, r8
     5a6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     5a8:	2000      	movs	r0, #0
     5aa:	e692      	b.n	2d2 <adc_init+0x26>
		switch (resolution) {
     5ac:	2c00      	cmp	r4, #0
     5ae:	d198      	bne.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     5b0:	7cf2      	ldrb	r2, [r6, #19]
     5b2:	2a00      	cmp	r2, #0
     5b4:	d00f      	beq.n	5d6 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     5b6:	69f2      	ldr	r2, [r6, #28]
     5b8:	2180      	movs	r1, #128	; 0x80
     5ba:	0109      	lsls	r1, r1, #4
     5bc:	468c      	mov	ip, r1
     5be:	4462      	add	r2, ip
			if (config->differential_mode &&
     5c0:	4912      	ldr	r1, [pc, #72]	; (60c <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     5c2:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5c4:	428a      	cmp	r2, r1
     5c6:	d900      	bls.n	5ca <adc_init+0x31e>
     5c8:	e683      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     5ca:	6a32      	ldr	r2, [r6, #32]
     5cc:	4462      	add	r2, ip
     5ce:	490f      	ldr	r1, [pc, #60]	; (60c <adc_init+0x360>)
     5d0:	428a      	cmp	r2, r1
     5d2:	d900      	bls.n	5d6 <adc_init+0x32a>
     5d4:	e67d      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     5d6:	4a0d      	ldr	r2, [pc, #52]	; (60c <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     5d8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5da:	69f1      	ldr	r1, [r6, #28]
     5dc:	4291      	cmp	r1, r2
     5de:	dd00      	ble.n	5e2 <adc_init+0x336>
     5e0:	e677      	b.n	2d2 <adc_init+0x26>
     5e2:	6a31      	ldr	r1, [r6, #32]
     5e4:	4291      	cmp	r1, r2
     5e6:	dd00      	ble.n	5ea <adc_init+0x33e>
     5e8:	e673      	b.n	2d2 <adc_init+0x26>
     5ea:	e77a      	b.n	4e2 <adc_init+0x236>
     5ec:	40000400 	.word	0x40000400
     5f0:	40000800 	.word	0x40000800
     5f4:	00001719 	.word	0x00001719
     5f8:	0000168d 	.word	0x0000168d
     5fc:	0000754f 	.word	0x0000754f
     600:	00007e74 	.word	0x00007e74
     604:	00001811 	.word	0x00001811
     608:	00007da0 	.word	0x00007da0
     60c:	00000fff 	.word	0x00000fff
     610:	00806024 	.word	0x00806024
     614:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     618:	7cf2      	ldrb	r2, [r6, #19]
     61a:	2a00      	cmp	r2, #0
     61c:	d00f      	beq.n	63e <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     61e:	69f2      	ldr	r2, [r6, #28]
     620:	2180      	movs	r1, #128	; 0x80
     622:	0089      	lsls	r1, r1, #2
     624:	468c      	mov	ip, r1
     626:	4462      	add	r2, ip
			if (config->differential_mode &&
     628:	491a      	ldr	r1, [pc, #104]	; (694 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     62a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     62c:	428a      	cmp	r2, r1
     62e:	d900      	bls.n	632 <adc_init+0x386>
     630:	e64f      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     632:	6a32      	ldr	r2, [r6, #32]
     634:	4462      	add	r2, ip
     636:	4917      	ldr	r1, [pc, #92]	; (694 <adc_init+0x3e8>)
     638:	428a      	cmp	r2, r1
     63a:	d900      	bls.n	63e <adc_init+0x392>
     63c:	e649      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     63e:	4a15      	ldr	r2, [pc, #84]	; (694 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     640:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     642:	69f1      	ldr	r1, [r6, #28]
     644:	4291      	cmp	r1, r2
     646:	dd00      	ble.n	64a <adc_init+0x39e>
     648:	e643      	b.n	2d2 <adc_init+0x26>
     64a:	6a31      	ldr	r1, [r6, #32]
     64c:	4291      	cmp	r1, r2
     64e:	dd00      	ble.n	652 <adc_init+0x3a6>
     650:	e63f      	b.n	2d2 <adc_init+0x26>
     652:	e746      	b.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     654:	7cf2      	ldrb	r2, [r6, #19]
     656:	2a00      	cmp	r2, #0
     658:	d00f      	beq.n	67a <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     65a:	69f2      	ldr	r2, [r6, #28]
     65c:	2180      	movs	r1, #128	; 0x80
     65e:	0209      	lsls	r1, r1, #8
     660:	468c      	mov	ip, r1
     662:	4462      	add	r2, ip
			if (config->differential_mode &&
     664:	490c      	ldr	r1, [pc, #48]	; (698 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     666:	2017      	movs	r0, #23
			if (config->differential_mode &&
     668:	428a      	cmp	r2, r1
     66a:	d900      	bls.n	66e <adc_init+0x3c2>
     66c:	e631      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     66e:	6a32      	ldr	r2, [r6, #32]
     670:	4462      	add	r2, ip
     672:	4909      	ldr	r1, [pc, #36]	; (698 <adc_init+0x3ec>)
     674:	428a      	cmp	r2, r1
     676:	d900      	bls.n	67a <adc_init+0x3ce>
     678:	e62b      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     67a:	4a07      	ldr	r2, [pc, #28]	; (698 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     67e:	69f1      	ldr	r1, [r6, #28]
     680:	4291      	cmp	r1, r2
     682:	dd00      	ble.n	686 <adc_init+0x3da>
     684:	e625      	b.n	2d2 <adc_init+0x26>
     686:	6a31      	ldr	r1, [r6, #32]
     688:	4291      	cmp	r1, r2
     68a:	dd00      	ble.n	68e <adc_init+0x3e2>
     68c:	e621      	b.n	2d2 <adc_init+0x26>
     68e:	e728      	b.n	4e2 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e61e      	b.n	2d2 <adc_init+0x26>
     694:	000003ff 	.word	0x000003ff
     698:	0000ffff 	.word	0x0000ffff

0000069c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     69c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     69e:	2a00      	cmp	r2, #0
     6a0:	d001      	beq.n	6a6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6a2:	0018      	movs	r0, r3
     6a4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     6a6:	008b      	lsls	r3, r1, #2
     6a8:	4a06      	ldr	r2, [pc, #24]	; (6c4 <extint_register_callback+0x28>)
     6aa:	589b      	ldr	r3, [r3, r2]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d003      	beq.n	6b8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     6b0:	4283      	cmp	r3, r0
     6b2:	d005      	beq.n	6c0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     6b4:	231d      	movs	r3, #29
     6b6:	e7f4      	b.n	6a2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     6b8:	0089      	lsls	r1, r1, #2
     6ba:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     6bc:	2300      	movs	r3, #0
     6be:	e7f0      	b.n	6a2 <extint_register_callback+0x6>
		return STATUS_OK;
     6c0:	2300      	movs	r3, #0
     6c2:	e7ee      	b.n	6a2 <extint_register_callback+0x6>
     6c4:	200002cc 	.word	0x200002cc

000006c8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6c8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     6ca:	2900      	cmp	r1, #0
     6cc:	d001      	beq.n	6d2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     6ce:	0018      	movs	r0, r3
     6d0:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     6d2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     6d4:	281f      	cmp	r0, #31
     6d6:	d800      	bhi.n	6da <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     6d8:	4a02      	ldr	r2, [pc, #8]	; (6e4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     6da:	2301      	movs	r3, #1
     6dc:	4083      	lsls	r3, r0
     6de:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     6e0:	2300      	movs	r3, #0
     6e2:	e7f4      	b.n	6ce <extint_chan_enable_callback+0x6>
     6e4:	40001800 	.word	0x40001800

000006e8 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6e8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     6ea:	2900      	cmp	r1, #0
     6ec:	d001      	beq.n	6f2 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     6ee:	0018      	movs	r0, r3
     6f0:	4770      	bx	lr
		return NULL;
     6f2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     6f4:	281f      	cmp	r0, #31
     6f6:	d800      	bhi.n	6fa <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     6f8:	4a02      	ldr	r2, [pc, #8]	; (704 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     6fa:	2301      	movs	r3, #1
     6fc:	4083      	lsls	r3, r0
     6fe:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     700:	2300      	movs	r3, #0
     702:	e7f4      	b.n	6ee <extint_chan_disable_callback+0x6>
     704:	40001800 	.word	0x40001800

00000708 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     708:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     70a:	2200      	movs	r2, #0
     70c:	4b10      	ldr	r3, [pc, #64]	; (750 <EIC_Handler+0x48>)
     70e:	701a      	strb	r2, [r3, #0]
     710:	2300      	movs	r3, #0
     712:	4910      	ldr	r1, [pc, #64]	; (754 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     714:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     716:	4e10      	ldr	r6, [pc, #64]	; (758 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     718:	4c0d      	ldr	r4, [pc, #52]	; (750 <EIC_Handler+0x48>)
     71a:	e00a      	b.n	732 <EIC_Handler+0x2a>
		return eics[eic_index];
     71c:	490d      	ldr	r1, [pc, #52]	; (754 <EIC_Handler+0x4c>)
     71e:	e008      	b.n	732 <EIC_Handler+0x2a>
     720:	7823      	ldrb	r3, [r4, #0]
     722:	3301      	adds	r3, #1
     724:	b2db      	uxtb	r3, r3
     726:	7023      	strb	r3, [r4, #0]
     728:	2b0f      	cmp	r3, #15
     72a:	d810      	bhi.n	74e <EIC_Handler+0x46>
		return NULL;
     72c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     72e:	2b1f      	cmp	r3, #31
     730:	d9f4      	bls.n	71c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     732:	0028      	movs	r0, r5
     734:	4018      	ands	r0, r3
     736:	2201      	movs	r2, #1
     738:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     73a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     73c:	4210      	tst	r0, r2
     73e:	d0ef      	beq.n	720 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     740:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     742:	009b      	lsls	r3, r3, #2
     744:	599b      	ldr	r3, [r3, r6]
     746:	2b00      	cmp	r3, #0
     748:	d0ea      	beq.n	720 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     74a:	4798      	blx	r3
     74c:	e7e8      	b.n	720 <EIC_Handler+0x18>
			}
		}
	}
}
     74e:	bd70      	pop	{r4, r5, r6, pc}
     750:	200002c8 	.word	0x200002c8
     754:	40001800 	.word	0x40001800
     758:	200002cc 	.word	0x200002cc

0000075c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     75c:	4a04      	ldr	r2, [pc, #16]	; (770 <_extint_enable+0x14>)
     75e:	7813      	ldrb	r3, [r2, #0]
     760:	2102      	movs	r1, #2
     762:	430b      	orrs	r3, r1
     764:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     766:	7853      	ldrb	r3, [r2, #1]
     768:	b25b      	sxtb	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	dbfb      	blt.n	766 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     76e:	4770      	bx	lr
     770:	40001800 	.word	0x40001800

00000774 <_system_extint_init>:
{
     774:	b500      	push	{lr}
     776:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     778:	4a12      	ldr	r2, [pc, #72]	; (7c4 <_system_extint_init+0x50>)
     77a:	6993      	ldr	r3, [r2, #24]
     77c:	2140      	movs	r1, #64	; 0x40
     77e:	430b      	orrs	r3, r1
     780:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     782:	a901      	add	r1, sp, #4
     784:	2300      	movs	r3, #0
     786:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     788:	2005      	movs	r0, #5
     78a:	4b0f      	ldr	r3, [pc, #60]	; (7c8 <_system_extint_init+0x54>)
     78c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     78e:	2005      	movs	r0, #5
     790:	4b0e      	ldr	r3, [pc, #56]	; (7cc <_system_extint_init+0x58>)
     792:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     794:	4a0e      	ldr	r2, [pc, #56]	; (7d0 <_system_extint_init+0x5c>)
     796:	7813      	ldrb	r3, [r2, #0]
     798:	2101      	movs	r1, #1
     79a:	430b      	orrs	r3, r1
     79c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     79e:	7853      	ldrb	r3, [r2, #1]
     7a0:	b25b      	sxtb	r3, r3
     7a2:	2b00      	cmp	r3, #0
     7a4:	dbfb      	blt.n	79e <_system_extint_init+0x2a>
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <_system_extint_init+0x60>)
     7a8:	0019      	movs	r1, r3
     7aa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     7ac:	2200      	movs	r2, #0
     7ae:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     7b0:	4299      	cmp	r1, r3
     7b2:	d1fc      	bne.n	7ae <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7b4:	2210      	movs	r2, #16
     7b6:	4b08      	ldr	r3, [pc, #32]	; (7d8 <_system_extint_init+0x64>)
     7b8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     7ba:	4b08      	ldr	r3, [pc, #32]	; (7dc <_system_extint_init+0x68>)
     7bc:	4798      	blx	r3
}
     7be:	b003      	add	sp, #12
     7c0:	bd00      	pop	{pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	40000400 	.word	0x40000400
     7c8:	00001719 	.word	0x00001719
     7cc:	0000168d 	.word	0x0000168d
     7d0:	40001800 	.word	0x40001800
     7d4:	200002cc 	.word	0x200002cc
     7d8:	e000e100 	.word	0xe000e100
     7dc:	0000075d 	.word	0x0000075d

000007e0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     7e0:	2300      	movs	r3, #0
     7e2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     7e4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     7e6:	2201      	movs	r2, #1
     7e8:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     7ea:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     7ec:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     7ee:	3302      	adds	r3, #2
     7f0:	72c3      	strb	r3, [r0, #11]
}
     7f2:	4770      	bx	lr

000007f4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f6:	b083      	sub	sp, #12
     7f8:	0005      	movs	r5, r0
     7fa:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7fc:	a901      	add	r1, sp, #4
     7fe:	2300      	movs	r3, #0
     800:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     802:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     804:	7923      	ldrb	r3, [r4, #4]
     806:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     808:	7a23      	ldrb	r3, [r4, #8]
     80a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     80c:	7820      	ldrb	r0, [r4, #0]
     80e:	4b15      	ldr	r3, [pc, #84]	; (864 <extint_chan_set_config+0x70>)
     810:	4798      	blx	r3
		return NULL;
     812:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     814:	2d1f      	cmp	r5, #31
     816:	d800      	bhi.n	81a <extint_chan_set_config+0x26>
		return eics[eic_index];
     818:	4813      	ldr	r0, [pc, #76]	; (868 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     81a:	2207      	movs	r2, #7
     81c:	402a      	ands	r2, r5
     81e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     820:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     822:	7aa3      	ldrb	r3, [r4, #10]
     824:	2b00      	cmp	r3, #0
     826:	d001      	beq.n	82c <extint_chan_set_config+0x38>
     828:	2308      	movs	r3, #8
     82a:	431f      	orrs	r7, r3
     82c:	08eb      	lsrs	r3, r5, #3
     82e:	009b      	lsls	r3, r3, #2
     830:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     832:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     834:	260f      	movs	r6, #15
     836:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     838:	43b1      	bics	r1, r6
			(new_config << config_pos);
     83a:	4097      	lsls	r7, r2
     83c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     83e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     840:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     842:	7a63      	ldrb	r3, [r4, #9]
     844:	2b00      	cmp	r3, #0
     846:	d106      	bne.n	856 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     848:	6943      	ldr	r3, [r0, #20]
     84a:	2201      	movs	r2, #1
     84c:	40aa      	lsls	r2, r5
     84e:	4393      	bics	r3, r2
     850:	6143      	str	r3, [r0, #20]
	}
}
     852:	b003      	add	sp, #12
     854:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     856:	6942      	ldr	r2, [r0, #20]
     858:	2301      	movs	r3, #1
     85a:	40ab      	lsls	r3, r5
     85c:	4313      	orrs	r3, r2
     85e:	6143      	str	r3, [r0, #20]
     860:	e7f7      	b.n	852 <extint_chan_set_config+0x5e>
     862:	46c0      	nop			; (mov r8, r8)
     864:	00001811 	.word	0x00001811
     868:	40001800 	.word	0x40001800

0000086c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     86c:	b500      	push	{lr}
     86e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     870:	ab01      	add	r3, sp, #4
     872:	2280      	movs	r2, #128	; 0x80
     874:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     876:	780a      	ldrb	r2, [r1, #0]
     878:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     87a:	784a      	ldrb	r2, [r1, #1]
     87c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     87e:	788a      	ldrb	r2, [r1, #2]
     880:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     882:	0019      	movs	r1, r3
     884:	4b01      	ldr	r3, [pc, #4]	; (88c <port_pin_set_config+0x20>)
     886:	4798      	blx	r3
}
     888:	b003      	add	sp, #12
     88a:	bd00      	pop	{pc}
     88c:	00001811 	.word	0x00001811

00000890 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     890:	6801      	ldr	r1, [r0, #0]
     892:	2208      	movs	r2, #8
     894:	4b05      	ldr	r3, [pc, #20]	; (8ac <rtc_calendar_enable+0x1c>)
     896:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     898:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     89a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     89c:	b25b      	sxtb	r3, r3
     89e:	2b00      	cmp	r3, #0
     8a0:	dbfb      	blt.n	89a <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     8a2:	880b      	ldrh	r3, [r1, #0]
     8a4:	2202      	movs	r2, #2
     8a6:	4313      	orrs	r3, r2
     8a8:	800b      	strh	r3, [r1, #0]
}
     8aa:	4770      	bx	lr
     8ac:	e000e100 	.word	0xe000e100

000008b0 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     8b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8b2:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8b4:	2408      	movs	r4, #8
     8b6:	2380      	movs	r3, #128	; 0x80
     8b8:	4907      	ldr	r1, [pc, #28]	; (8d8 <rtc_calendar_disable+0x28>)
     8ba:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
     8bc:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     8be:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     8c0:	b25b      	sxtb	r3, r3
     8c2:	2b00      	cmp	r3, #0
     8c4:	dbfb      	blt.n	8be <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     8c6:	23c1      	movs	r3, #193	; 0xc1
     8c8:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     8ca:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     8cc:	8813      	ldrh	r3, [r2, #0]
     8ce:	2102      	movs	r1, #2
     8d0:	438b      	bics	r3, r1
     8d2:	8013      	strh	r3, [r2, #0]
}
     8d4:	bd10      	pop	{r4, pc}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	e000e100 	.word	0xe000e100

000008dc <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     8dc:	b570      	push	{r4, r5, r6, lr}
     8de:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8e0:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     8e2:	4b07      	ldr	r3, [pc, #28]	; (900 <rtc_calendar_reset+0x24>)
     8e4:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     8e6:	2300      	movs	r3, #0
     8e8:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
     8ea:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
     8ec:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     8ee:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
     8f0:	b25b      	sxtb	r3, r3
     8f2:	2b00      	cmp	r3, #0
     8f4:	dbfb      	blt.n	8ee <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     8f6:	882b      	ldrh	r3, [r5, #0]
     8f8:	2201      	movs	r2, #1
     8fa:	4313      	orrs	r3, r2
     8fc:	802b      	strh	r3, [r5, #0]
}
     8fe:	bd70      	pop	{r4, r5, r6, pc}
     900:	000008b1 	.word	0x000008b1

00000904 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     904:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     906:	88cb      	ldrh	r3, [r1, #6]
     908:	88c2      	ldrh	r2, [r0, #6]
     90a:	1a9a      	subs	r2, r3, r2
     90c:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     90e:	794b      	ldrb	r3, [r1, #5]
     910:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     912:	790c      	ldrb	r4, [r1, #4]
     914:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     916:	4323      	orrs	r3, r4
     918:	788c      	ldrb	r4, [r1, #2]
     91a:	0324      	lsls	r4, r4, #12
     91c:	4323      	orrs	r3, r4
     91e:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     920:	7902      	ldrb	r2, [r0, #4]
     922:	2a00      	cmp	r2, #0
     924:	d105      	bne.n	932 <rtc_calendar_time_to_register_value+0x2e>
     926:	78ca      	ldrb	r2, [r1, #3]
     928:	2a00      	cmp	r2, #0
     92a:	d002      	beq.n	932 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     92c:	2280      	movs	r2, #128	; 0x80
     92e:	0252      	lsls	r2, r2, #9
     930:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     932:	7848      	ldrb	r0, [r1, #1]
     934:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     936:	780a      	ldrb	r2, [r1, #0]
     938:	4310      	orrs	r0, r2
     93a:	4318      	orrs	r0, r3

	return register_value;
}
     93c:	bd10      	pop	{r4, pc}
	...

00000940 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     940:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     942:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     944:	4b03      	ldr	r3, [pc, #12]	; (954 <rtc_calendar_set_time+0x14>)
     946:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     948:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
     94a:	b25b      	sxtb	r3, r3
     94c:	2b00      	cmp	r3, #0
     94e:	dbfb      	blt.n	948 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     950:	6120      	str	r0, [r4, #16]
}
     952:	bd10      	pop	{r4, pc}
     954:	00000905 	.word	0x00000905

00000958 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     958:	b570      	push	{r4, r5, r6, lr}
     95a:	000d      	movs	r5, r1
     95c:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     95e:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     960:	2a01      	cmp	r2, #1
     962:	d901      	bls.n	968 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
     964:	0018      	movs	r0, r3
     966:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
     968:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     96a:	4b06      	ldr	r3, [pc, #24]	; (984 <rtc_calendar_set_alarm+0x2c>)
     96c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     96e:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
     970:	b25b      	sxtb	r3, r3
     972:	2b00      	cmp	r3, #0
     974:	dbfb      	blt.n	96e <rtc_calendar_set_alarm+0x16>
     976:	00e4      	lsls	r4, r4, #3
     978:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     97a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     97c:	7a2b      	ldrb	r3, [r5, #8]
     97e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
     980:	2300      	movs	r3, #0
     982:	e7ef      	b.n	964 <rtc_calendar_set_alarm+0xc>
     984:	00000905 	.word	0x00000905

00000988 <rtc_calendar_init>:
{
     988:	b530      	push	{r4, r5, lr}
     98a:	b083      	sub	sp, #12
     98c:	0005      	movs	r5, r0
     98e:	0014      	movs	r4, r2
	module->hw = hw;
     990:	6001      	str	r1, [r0, #0]
     992:	4a1c      	ldr	r2, [pc, #112]	; (a04 <rtc_calendar_init+0x7c>)
     994:	6993      	ldr	r3, [r2, #24]
     996:	2120      	movs	r1, #32
     998:	430b      	orrs	r3, r1
     99a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     99c:	a901      	add	r1, sp, #4
     99e:	2302      	movs	r3, #2
     9a0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     9a2:	2004      	movs	r0, #4
     9a4:	4b18      	ldr	r3, [pc, #96]	; (a08 <rtc_calendar_init+0x80>)
     9a6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     9a8:	2004      	movs	r0, #4
     9aa:	4b18      	ldr	r3, [pc, #96]	; (a0c <rtc_calendar_init+0x84>)
     9ac:	4798      	blx	r3
	rtc_calendar_reset(module);
     9ae:	0028      	movs	r0, r5
     9b0:	4b17      	ldr	r3, [pc, #92]	; (a10 <rtc_calendar_init+0x88>)
     9b2:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     9b4:	7923      	ldrb	r3, [r4, #4]
     9b6:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
     9b8:	78e3      	ldrb	r3, [r4, #3]
     9ba:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
     9bc:	88e3      	ldrh	r3, [r4, #6]
     9be:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
     9c0:	4b14      	ldr	r3, [pc, #80]	; (a14 <rtc_calendar_init+0x8c>)
     9c2:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
     9c4:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     9c6:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
     9c8:	7921      	ldrb	r1, [r4, #4]
     9ca:	2900      	cmp	r1, #0
     9cc:	d017      	beq.n	9fe <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     9ce:	2108      	movs	r1, #8
     9d0:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
     9d2:	78a1      	ldrb	r1, [r4, #2]
     9d4:	2900      	cmp	r1, #0
     9d6:	d001      	beq.n	9dc <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     9d8:	2180      	movs	r1, #128	; 0x80
     9da:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     9dc:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
     9de:	78e3      	ldrb	r3, [r4, #3]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d004      	beq.n	9ee <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     9e4:	8853      	ldrh	r3, [r2, #2]
     9e6:	2180      	movs	r1, #128	; 0x80
     9e8:	01c9      	lsls	r1, r1, #7
     9ea:	430b      	orrs	r3, r1
     9ec:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     9ee:	0021      	movs	r1, r4
     9f0:	3108      	adds	r1, #8
     9f2:	2200      	movs	r2, #0
     9f4:	0028      	movs	r0, r5
     9f6:	4b08      	ldr	r3, [pc, #32]	; (a18 <rtc_calendar_init+0x90>)
     9f8:	4798      	blx	r3
}
     9fa:	b003      	add	sp, #12
     9fc:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     9fe:	2148      	movs	r1, #72	; 0x48
     a00:	430b      	orrs	r3, r1
     a02:	e7e6      	b.n	9d2 <rtc_calendar_init+0x4a>
     a04:	40000400 	.word	0x40000400
     a08:	00001719 	.word	0x00001719
     a0c:	0000168d 	.word	0x0000168d
     a10:	000008dd 	.word	0x000008dd
     a14:	2000030c 	.word	0x2000030c
     a18:	00000959 	.word	0x00000959

00000a1c <rtc_calendar_register_callback>:
	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
		status = STATUS_OK;
	} else if (callback_type > RTC_NUM_OF_ALARMS) {
     a1c:	2a01      	cmp	r2, #1
     a1e:	d901      	bls.n	a24 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     a20:	2017      	movs	r0, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     a22:	4770      	bx	lr
		module->callbacks[callback_type] = callback;
     a24:	1c93      	adds	r3, r2, #2
     a26:	009b      	lsls	r3, r3, #2
     a28:	5019      	str	r1, [r3, r0]
		module->registered_callback |= (1 << callback_type);
     a2a:	8a03      	ldrh	r3, [r0, #16]
     a2c:	2101      	movs	r1, #1
     a2e:	4091      	lsls	r1, r2
     a30:	430b      	orrs	r3, r1
     a32:	b29b      	uxth	r3, r3
     a34:	8203      	strh	r3, [r0, #16]
	enum status_code status = STATUS_OK;
     a36:	2000      	movs	r0, #0
	return status;
     a38:	e7f3      	b.n	a22 <rtc_calendar_register_callback+0x6>

00000a3a <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     a3a:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a3c:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     a3e:	2901      	cmp	r1, #1
     a40:	d00b      	beq.n	a5a <rtc_calendar_enable_callback+0x20>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
	} else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << callback_type);
     a42:	2201      	movs	r2, #1
     a44:	408a      	lsls	r2, r1
     a46:	2301      	movs	r3, #1
     a48:	4013      	ands	r3, r2
     a4a:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     a4c:	8a43      	ldrh	r3, [r0, #18]
     a4e:	2201      	movs	r2, #1
     a50:	408a      	lsls	r2, r1
     a52:	4313      	orrs	r3, r2
     a54:	b29b      	uxth	r3, r3
     a56:	8243      	strh	r3, [r0, #18]
}
     a58:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     a5a:	2380      	movs	r3, #128	; 0x80
     a5c:	71e3      	strb	r3, [r4, #7]
     a5e:	e7f5      	b.n	a4c <rtc_calendar_enable_callback+0x12>

00000a60 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     a60:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     a62:	4b0f      	ldr	r3, [pc, #60]	; (aa0 <RTC_Handler+0x40>)
     a64:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     a66:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     a68:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
     a6a:	8a13      	ldrh	r3, [r2, #16]
     a6c:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     a6e:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     a70:	79e3      	ldrb	r3, [r4, #7]
     a72:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     a74:	b258      	sxtb	r0, r3
     a76:	2800      	cmp	r0, #0
     a78:	db06      	blt.n	a88 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     a7a:	07db      	lsls	r3, r3, #31
     a7c:	d503      	bpl.n	a86 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     a7e:	07cb      	lsls	r3, r1, #31
     a80:	d40a      	bmi.n	a98 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     a82:	2301      	movs	r3, #1
     a84:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     a86:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     a88:	078b      	lsls	r3, r1, #30
     a8a:	d402      	bmi.n	a92 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     a8c:	2380      	movs	r3, #128	; 0x80
     a8e:	7223      	strb	r3, [r4, #8]
     a90:	e7f9      	b.n	a86 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     a92:	68d3      	ldr	r3, [r2, #12]
     a94:	4798      	blx	r3
     a96:	e7f9      	b.n	a8c <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     a98:	6893      	ldr	r3, [r2, #8]
     a9a:	4798      	blx	r3
     a9c:	e7f1      	b.n	a82 <RTC_Handler+0x22>
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	2000030c 	.word	0x2000030c

00000aa4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     aa4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     aa6:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     aa8:	2340      	movs	r3, #64	; 0x40
     aaa:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     aac:	4281      	cmp	r1, r0
     aae:	d202      	bcs.n	ab6 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     ab0:	0018      	movs	r0, r3
     ab2:	bd10      	pop	{r4, pc}
		baud_calculated++;
     ab4:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     ab6:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     ab8:	1c63      	adds	r3, r4, #1
     aba:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     abc:	4288      	cmp	r0, r1
     abe:	d9f9      	bls.n	ab4 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ac0:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     ac2:	2cff      	cmp	r4, #255	; 0xff
     ac4:	d8f4      	bhi.n	ab0 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     ac6:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     ac8:	2300      	movs	r3, #0
     aca:	e7f1      	b.n	ab0 <_sercom_get_sync_baud_val+0xc>

00000acc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     acc:	b510      	push	{r4, lr}
     ace:	b082      	sub	sp, #8
     ad0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     ad2:	4b0e      	ldr	r3, [pc, #56]	; (b0c <sercom_set_gclk_generator+0x40>)
     ad4:	781b      	ldrb	r3, [r3, #0]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d007      	beq.n	aea <sercom_set_gclk_generator+0x1e>
     ada:	2900      	cmp	r1, #0
     adc:	d105      	bne.n	aea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     ade:	4b0b      	ldr	r3, [pc, #44]	; (b0c <sercom_set_gclk_generator+0x40>)
     ae0:	785b      	ldrb	r3, [r3, #1]
     ae2:	4283      	cmp	r3, r0
     ae4:	d010      	beq.n	b08 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     ae6:	201d      	movs	r0, #29
     ae8:	e00c      	b.n	b04 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     aea:	a901      	add	r1, sp, #4
     aec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     aee:	2013      	movs	r0, #19
     af0:	4b07      	ldr	r3, [pc, #28]	; (b10 <sercom_set_gclk_generator+0x44>)
     af2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     af4:	2013      	movs	r0, #19
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <sercom_set_gclk_generator+0x48>)
     af8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     afa:	4b04      	ldr	r3, [pc, #16]	; (b0c <sercom_set_gclk_generator+0x40>)
     afc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     afe:	2201      	movs	r2, #1
     b00:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     b02:	2000      	movs	r0, #0
}
     b04:	b002      	add	sp, #8
     b06:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     b08:	2000      	movs	r0, #0
     b0a:	e7fb      	b.n	b04 <sercom_set_gclk_generator+0x38>
     b0c:	200000e4 	.word	0x200000e4
     b10:	00001719 	.word	0x00001719
     b14:	0000168d 	.word	0x0000168d

00000b18 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b18:	4b40      	ldr	r3, [pc, #256]	; (c1c <_sercom_get_default_pad+0x104>)
     b1a:	4298      	cmp	r0, r3
     b1c:	d031      	beq.n	b82 <_sercom_get_default_pad+0x6a>
     b1e:	d90a      	bls.n	b36 <_sercom_get_default_pad+0x1e>
     b20:	4b3f      	ldr	r3, [pc, #252]	; (c20 <_sercom_get_default_pad+0x108>)
     b22:	4298      	cmp	r0, r3
     b24:	d04d      	beq.n	bc2 <_sercom_get_default_pad+0xaa>
     b26:	4b3f      	ldr	r3, [pc, #252]	; (c24 <_sercom_get_default_pad+0x10c>)
     b28:	4298      	cmp	r0, r3
     b2a:	d05a      	beq.n	be2 <_sercom_get_default_pad+0xca>
     b2c:	4b3e      	ldr	r3, [pc, #248]	; (c28 <_sercom_get_default_pad+0x110>)
     b2e:	4298      	cmp	r0, r3
     b30:	d037      	beq.n	ba2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     b32:	2000      	movs	r0, #0
}
     b34:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     b36:	4b3d      	ldr	r3, [pc, #244]	; (c2c <_sercom_get_default_pad+0x114>)
     b38:	4298      	cmp	r0, r3
     b3a:	d00c      	beq.n	b56 <_sercom_get_default_pad+0x3e>
     b3c:	4b3c      	ldr	r3, [pc, #240]	; (c30 <_sercom_get_default_pad+0x118>)
     b3e:	4298      	cmp	r0, r3
     b40:	d1f7      	bne.n	b32 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b42:	2901      	cmp	r1, #1
     b44:	d017      	beq.n	b76 <_sercom_get_default_pad+0x5e>
     b46:	2900      	cmp	r1, #0
     b48:	d05d      	beq.n	c06 <_sercom_get_default_pad+0xee>
     b4a:	2902      	cmp	r1, #2
     b4c:	d015      	beq.n	b7a <_sercom_get_default_pad+0x62>
     b4e:	2903      	cmp	r1, #3
     b50:	d015      	beq.n	b7e <_sercom_get_default_pad+0x66>
	return 0;
     b52:	2000      	movs	r0, #0
     b54:	e7ee      	b.n	b34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b56:	2901      	cmp	r1, #1
     b58:	d007      	beq.n	b6a <_sercom_get_default_pad+0x52>
     b5a:	2900      	cmp	r1, #0
     b5c:	d051      	beq.n	c02 <_sercom_get_default_pad+0xea>
     b5e:	2902      	cmp	r1, #2
     b60:	d005      	beq.n	b6e <_sercom_get_default_pad+0x56>
     b62:	2903      	cmp	r1, #3
     b64:	d005      	beq.n	b72 <_sercom_get_default_pad+0x5a>
	return 0;
     b66:	2000      	movs	r0, #0
     b68:	e7e4      	b.n	b34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b6a:	4832      	ldr	r0, [pc, #200]	; (c34 <_sercom_get_default_pad+0x11c>)
     b6c:	e7e2      	b.n	b34 <_sercom_get_default_pad+0x1c>
     b6e:	4832      	ldr	r0, [pc, #200]	; (c38 <_sercom_get_default_pad+0x120>)
     b70:	e7e0      	b.n	b34 <_sercom_get_default_pad+0x1c>
     b72:	4832      	ldr	r0, [pc, #200]	; (c3c <_sercom_get_default_pad+0x124>)
     b74:	e7de      	b.n	b34 <_sercom_get_default_pad+0x1c>
     b76:	4832      	ldr	r0, [pc, #200]	; (c40 <_sercom_get_default_pad+0x128>)
     b78:	e7dc      	b.n	b34 <_sercom_get_default_pad+0x1c>
     b7a:	4832      	ldr	r0, [pc, #200]	; (c44 <_sercom_get_default_pad+0x12c>)
     b7c:	e7da      	b.n	b34 <_sercom_get_default_pad+0x1c>
     b7e:	4832      	ldr	r0, [pc, #200]	; (c48 <_sercom_get_default_pad+0x130>)
     b80:	e7d8      	b.n	b34 <_sercom_get_default_pad+0x1c>
     b82:	2901      	cmp	r1, #1
     b84:	d007      	beq.n	b96 <_sercom_get_default_pad+0x7e>
     b86:	2900      	cmp	r1, #0
     b88:	d03f      	beq.n	c0a <_sercom_get_default_pad+0xf2>
     b8a:	2902      	cmp	r1, #2
     b8c:	d005      	beq.n	b9a <_sercom_get_default_pad+0x82>
     b8e:	2903      	cmp	r1, #3
     b90:	d005      	beq.n	b9e <_sercom_get_default_pad+0x86>
	return 0;
     b92:	2000      	movs	r0, #0
     b94:	e7ce      	b.n	b34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b96:	482d      	ldr	r0, [pc, #180]	; (c4c <_sercom_get_default_pad+0x134>)
     b98:	e7cc      	b.n	b34 <_sercom_get_default_pad+0x1c>
     b9a:	482d      	ldr	r0, [pc, #180]	; (c50 <_sercom_get_default_pad+0x138>)
     b9c:	e7ca      	b.n	b34 <_sercom_get_default_pad+0x1c>
     b9e:	482d      	ldr	r0, [pc, #180]	; (c54 <_sercom_get_default_pad+0x13c>)
     ba0:	e7c8      	b.n	b34 <_sercom_get_default_pad+0x1c>
     ba2:	2901      	cmp	r1, #1
     ba4:	d007      	beq.n	bb6 <_sercom_get_default_pad+0x9e>
     ba6:	2900      	cmp	r1, #0
     ba8:	d031      	beq.n	c0e <_sercom_get_default_pad+0xf6>
     baa:	2902      	cmp	r1, #2
     bac:	d005      	beq.n	bba <_sercom_get_default_pad+0xa2>
     bae:	2903      	cmp	r1, #3
     bb0:	d005      	beq.n	bbe <_sercom_get_default_pad+0xa6>
	return 0;
     bb2:	2000      	movs	r0, #0
     bb4:	e7be      	b.n	b34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bb6:	4828      	ldr	r0, [pc, #160]	; (c58 <_sercom_get_default_pad+0x140>)
     bb8:	e7bc      	b.n	b34 <_sercom_get_default_pad+0x1c>
     bba:	4828      	ldr	r0, [pc, #160]	; (c5c <_sercom_get_default_pad+0x144>)
     bbc:	e7ba      	b.n	b34 <_sercom_get_default_pad+0x1c>
     bbe:	4828      	ldr	r0, [pc, #160]	; (c60 <_sercom_get_default_pad+0x148>)
     bc0:	e7b8      	b.n	b34 <_sercom_get_default_pad+0x1c>
     bc2:	2901      	cmp	r1, #1
     bc4:	d007      	beq.n	bd6 <_sercom_get_default_pad+0xbe>
     bc6:	2900      	cmp	r1, #0
     bc8:	d023      	beq.n	c12 <_sercom_get_default_pad+0xfa>
     bca:	2902      	cmp	r1, #2
     bcc:	d005      	beq.n	bda <_sercom_get_default_pad+0xc2>
     bce:	2903      	cmp	r1, #3
     bd0:	d005      	beq.n	bde <_sercom_get_default_pad+0xc6>
	return 0;
     bd2:	2000      	movs	r0, #0
     bd4:	e7ae      	b.n	b34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bd6:	4823      	ldr	r0, [pc, #140]	; (c64 <_sercom_get_default_pad+0x14c>)
     bd8:	e7ac      	b.n	b34 <_sercom_get_default_pad+0x1c>
     bda:	4823      	ldr	r0, [pc, #140]	; (c68 <_sercom_get_default_pad+0x150>)
     bdc:	e7aa      	b.n	b34 <_sercom_get_default_pad+0x1c>
     bde:	4823      	ldr	r0, [pc, #140]	; (c6c <_sercom_get_default_pad+0x154>)
     be0:	e7a8      	b.n	b34 <_sercom_get_default_pad+0x1c>
     be2:	2901      	cmp	r1, #1
     be4:	d007      	beq.n	bf6 <_sercom_get_default_pad+0xde>
     be6:	2900      	cmp	r1, #0
     be8:	d015      	beq.n	c16 <_sercom_get_default_pad+0xfe>
     bea:	2902      	cmp	r1, #2
     bec:	d005      	beq.n	bfa <_sercom_get_default_pad+0xe2>
     bee:	2903      	cmp	r1, #3
     bf0:	d005      	beq.n	bfe <_sercom_get_default_pad+0xe6>
	return 0;
     bf2:	2000      	movs	r0, #0
     bf4:	e79e      	b.n	b34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bf6:	481e      	ldr	r0, [pc, #120]	; (c70 <_sercom_get_default_pad+0x158>)
     bf8:	e79c      	b.n	b34 <_sercom_get_default_pad+0x1c>
     bfa:	481e      	ldr	r0, [pc, #120]	; (c74 <_sercom_get_default_pad+0x15c>)
     bfc:	e79a      	b.n	b34 <_sercom_get_default_pad+0x1c>
     bfe:	481e      	ldr	r0, [pc, #120]	; (c78 <_sercom_get_default_pad+0x160>)
     c00:	e798      	b.n	b34 <_sercom_get_default_pad+0x1c>
     c02:	481e      	ldr	r0, [pc, #120]	; (c7c <_sercom_get_default_pad+0x164>)
     c04:	e796      	b.n	b34 <_sercom_get_default_pad+0x1c>
     c06:	481e      	ldr	r0, [pc, #120]	; (c80 <_sercom_get_default_pad+0x168>)
     c08:	e794      	b.n	b34 <_sercom_get_default_pad+0x1c>
     c0a:	481e      	ldr	r0, [pc, #120]	; (c84 <_sercom_get_default_pad+0x16c>)
     c0c:	e792      	b.n	b34 <_sercom_get_default_pad+0x1c>
     c0e:	481e      	ldr	r0, [pc, #120]	; (c88 <_sercom_get_default_pad+0x170>)
     c10:	e790      	b.n	b34 <_sercom_get_default_pad+0x1c>
     c12:	481e      	ldr	r0, [pc, #120]	; (c8c <_sercom_get_default_pad+0x174>)
     c14:	e78e      	b.n	b34 <_sercom_get_default_pad+0x1c>
     c16:	481e      	ldr	r0, [pc, #120]	; (c90 <_sercom_get_default_pad+0x178>)
     c18:	e78c      	b.n	b34 <_sercom_get_default_pad+0x1c>
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	42001000 	.word	0x42001000
     c20:	42001800 	.word	0x42001800
     c24:	42001c00 	.word	0x42001c00
     c28:	42001400 	.word	0x42001400
     c2c:	42000800 	.word	0x42000800
     c30:	42000c00 	.word	0x42000c00
     c34:	00090002 	.word	0x00090002
     c38:	00060003 	.word	0x00060003
     c3c:	00070003 	.word	0x00070003
     c40:	00110002 	.word	0x00110002
     c44:	00120002 	.word	0x00120002
     c48:	00130002 	.word	0x00130002
     c4c:	00090003 	.word	0x00090003
     c50:	000e0002 	.word	0x000e0002
     c54:	000f0002 	.word	0x000f0002
     c58:	001c0005 	.word	0x001c0005
     c5c:	00180002 	.word	0x00180002
     c60:	00190002 	.word	0x00190002
     c64:	003f0005 	.word	0x003f0005
     c68:	003e0005 	.word	0x003e0005
     c6c:	00520005 	.word	0x00520005
     c70:	003f0003 	.word	0x003f0003
     c74:	00180003 	.word	0x00180003
     c78:	00190003 	.word	0x00190003
     c7c:	00080002 	.word	0x00080002
     c80:	00100002 	.word	0x00100002
     c84:	00080003 	.word	0x00080003
     c88:	001b0005 	.word	0x001b0005
     c8c:	00530005 	.word	0x00530005
     c90:	003e0003 	.word	0x003e0003

00000c94 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c94:	b530      	push	{r4, r5, lr}
     c96:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c98:	4b0b      	ldr	r3, [pc, #44]	; (cc8 <_sercom_get_sercom_inst_index+0x34>)
     c9a:	466a      	mov	r2, sp
     c9c:	cb32      	ldmia	r3!, {r1, r4, r5}
     c9e:	c232      	stmia	r2!, {r1, r4, r5}
     ca0:	cb32      	ldmia	r3!, {r1, r4, r5}
     ca2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ca4:	9b00      	ldr	r3, [sp, #0]
     ca6:	4283      	cmp	r3, r0
     ca8:	d00b      	beq.n	cc2 <_sercom_get_sercom_inst_index+0x2e>
     caa:	2301      	movs	r3, #1
     cac:	009a      	lsls	r2, r3, #2
     cae:	4669      	mov	r1, sp
     cb0:	5852      	ldr	r2, [r2, r1]
     cb2:	4282      	cmp	r2, r0
     cb4:	d006      	beq.n	cc4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cb6:	3301      	adds	r3, #1
     cb8:	2b06      	cmp	r3, #6
     cba:	d1f7      	bne.n	cac <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     cbc:	2000      	movs	r0, #0
}
     cbe:	b007      	add	sp, #28
     cc0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cc2:	2300      	movs	r3, #0
			return i;
     cc4:	b2d8      	uxtb	r0, r3
     cc6:	e7fa      	b.n	cbe <_sercom_get_sercom_inst_index+0x2a>
     cc8:	00007ec4 	.word	0x00007ec4

00000ccc <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ccc:	b510      	push	{r4, lr}
     cce:	4b02      	ldr	r3, [pc, #8]	; (cd8 <SERCOM0_Handler+0xc>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	2000      	movs	r0, #0
     cd4:	4798      	blx	r3
     cd6:	bd10      	pop	{r4, pc}
     cd8:	200000e8 	.word	0x200000e8

00000cdc <SERCOM1_Handler>:
     cdc:	b510      	push	{r4, lr}
     cde:	4b02      	ldr	r3, [pc, #8]	; (ce8 <SERCOM1_Handler+0xc>)
     ce0:	685b      	ldr	r3, [r3, #4]
     ce2:	2001      	movs	r0, #1
     ce4:	4798      	blx	r3
     ce6:	bd10      	pop	{r4, pc}
     ce8:	200000e8 	.word	0x200000e8

00000cec <SERCOM2_Handler>:
     cec:	b510      	push	{r4, lr}
     cee:	4b02      	ldr	r3, [pc, #8]	; (cf8 <SERCOM2_Handler+0xc>)
     cf0:	689b      	ldr	r3, [r3, #8]
     cf2:	2002      	movs	r0, #2
     cf4:	4798      	blx	r3
     cf6:	bd10      	pop	{r4, pc}
     cf8:	200000e8 	.word	0x200000e8

00000cfc <SERCOM3_Handler>:
     cfc:	b510      	push	{r4, lr}
     cfe:	4b02      	ldr	r3, [pc, #8]	; (d08 <SERCOM3_Handler+0xc>)
     d00:	68db      	ldr	r3, [r3, #12]
     d02:	2003      	movs	r0, #3
     d04:	4798      	blx	r3
     d06:	bd10      	pop	{r4, pc}
     d08:	200000e8 	.word	0x200000e8

00000d0c <SERCOM4_Handler>:
     d0c:	b510      	push	{r4, lr}
     d0e:	4b02      	ldr	r3, [pc, #8]	; (d18 <SERCOM4_Handler+0xc>)
     d10:	691b      	ldr	r3, [r3, #16]
     d12:	2004      	movs	r0, #4
     d14:	4798      	blx	r3
     d16:	bd10      	pop	{r4, pc}
     d18:	200000e8 	.word	0x200000e8

00000d1c <SERCOM5_Handler>:
     d1c:	b510      	push	{r4, lr}
     d1e:	4b02      	ldr	r3, [pc, #8]	; (d28 <SERCOM5_Handler+0xc>)
     d20:	695b      	ldr	r3, [r3, #20]
     d22:	2005      	movs	r0, #5
     d24:	4798      	blx	r3
     d26:	bd10      	pop	{r4, pc}
     d28:	200000e8 	.word	0x200000e8

00000d2c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d2e:	46d6      	mov	lr, sl
     d30:	464f      	mov	r7, r9
     d32:	b580      	push	{r7, lr}
     d34:	b08b      	sub	sp, #44	; 0x2c
     d36:	4681      	mov	r9, r0
     d38:	000f      	movs	r7, r1
     d3a:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     d3c:	0003      	movs	r3, r0
     d3e:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d40:	680b      	ldr	r3, [r1, #0]
     d42:	079b      	lsls	r3, r3, #30
     d44:	d409      	bmi.n	d5a <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d46:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     d48:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d4a:	07db      	lsls	r3, r3, #31
     d4c:	d400      	bmi.n	d50 <spi_init+0x24>
     d4e:	e098      	b.n	e82 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     d50:	b00b      	add	sp, #44	; 0x2c
     d52:	bc0c      	pop	{r2, r3}
     d54:	4691      	mov	r9, r2
     d56:	469a      	mov	sl, r3
     d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     d5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d5c:	9305      	str	r3, [sp, #20]
     d5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     d60:	9306      	str	r3, [sp, #24]
     d62:	6b13      	ldr	r3, [r2, #48]	; 0x30
     d64:	9307      	str	r3, [sp, #28]
     d66:	6b53      	ldr	r3, [r2, #52]	; 0x34
     d68:	9308      	str	r3, [sp, #32]
     d6a:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d6c:	ab05      	add	r3, sp, #20
     d6e:	9301      	str	r3, [sp, #4]
     d70:	e00a      	b.n	d88 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d72:	0038      	movs	r0, r7
     d74:	4b93      	ldr	r3, [pc, #588]	; (fc4 <spi_init+0x298>)
     d76:	4798      	blx	r3
     d78:	e00c      	b.n	d94 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     d7a:	230f      	movs	r3, #15
     d7c:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     d7e:	4281      	cmp	r1, r0
     d80:	d12d      	bne.n	dde <spi_init+0xb2>
     d82:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d84:	2e04      	cmp	r6, #4
     d86:	d02f      	beq.n	de8 <spi_init+0xbc>
     d88:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d8a:	00b3      	lsls	r3, r6, #2
     d8c:	9a01      	ldr	r2, [sp, #4]
     d8e:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     d90:	2800      	cmp	r0, #0
     d92:	d0ee      	beq.n	d72 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     d94:	1c43      	adds	r3, r0, #1
     d96:	d0f4      	beq.n	d82 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     d98:	0401      	lsls	r1, r0, #16
     d9a:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     d9c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     d9e:	b2c3      	uxtb	r3, r0
     da0:	469c      	mov	ip, r3
		return NULL;
     da2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     da4:	0602      	lsls	r2, r0, #24
     da6:	d405      	bmi.n	db4 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     da8:	4663      	mov	r3, ip
     daa:	095b      	lsrs	r3, r3, #5
     dac:	01db      	lsls	r3, r3, #7
     dae:	4a86      	ldr	r2, [pc, #536]	; (fc8 <spi_init+0x29c>)
     db0:	4692      	mov	sl, r2
     db2:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     db4:	221f      	movs	r2, #31
     db6:	4660      	mov	r0, ip
     db8:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     dba:	1898      	adds	r0, r3, r2
     dbc:	3040      	adds	r0, #64	; 0x40
     dbe:	7800      	ldrb	r0, [r0, #0]
     dc0:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     dc2:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     dc4:	4655      	mov	r5, sl
     dc6:	07ed      	lsls	r5, r5, #31
     dc8:	d5d9      	bpl.n	d7e <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     dca:	0852      	lsrs	r2, r2, #1
     dcc:	189b      	adds	r3, r3, r2
     dce:	3330      	adds	r3, #48	; 0x30
     dd0:	7818      	ldrb	r0, [r3, #0]
     dd2:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     dd4:	4663      	mov	r3, ip
     dd6:	07db      	lsls	r3, r3, #31
     dd8:	d5cf      	bpl.n	d7a <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     dda:	0900      	lsrs	r0, r0, #4
     ddc:	e7cf      	b.n	d7e <spi_init+0x52>
			module->hw = NULL;
     dde:	2300      	movs	r3, #0
     de0:	464a      	mov	r2, r9
     de2:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     de4:	201c      	movs	r0, #28
     de6:	e7b3      	b.n	d50 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     de8:	2013      	movs	r0, #19
     dea:	4b78      	ldr	r3, [pc, #480]	; (fcc <spi_init+0x2a0>)
     dec:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     dee:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     df0:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     df2:	2a01      	cmp	r2, #1
     df4:	d027      	beq.n	e46 <spi_init+0x11a>
	ctrla |= config->mux_setting;
     df6:	6863      	ldr	r3, [r4, #4]
     df8:	68a2      	ldr	r2, [r4, #8]
     dfa:	4313      	orrs	r3, r2
     dfc:	68e2      	ldr	r2, [r4, #12]
     dfe:	4313      	orrs	r3, r2
     e00:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     e02:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
     e04:	7c61      	ldrb	r1, [r4, #17]
     e06:	2900      	cmp	r1, #0
     e08:	d001      	beq.n	e0e <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     e0a:	2180      	movs	r1, #128	; 0x80
     e0c:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     e0e:	7ca1      	ldrb	r1, [r4, #18]
     e10:	2900      	cmp	r1, #0
     e12:	d002      	beq.n	e1a <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     e14:	2180      	movs	r1, #128	; 0x80
     e16:	0289      	lsls	r1, r1, #10
     e18:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     e1a:	7ce1      	ldrb	r1, [r4, #19]
     e1c:	2900      	cmp	r1, #0
     e1e:	d002      	beq.n	e26 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     e20:	2180      	movs	r1, #128	; 0x80
     e22:	0089      	lsls	r1, r1, #2
     e24:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     e26:	7d21      	ldrb	r1, [r4, #20]
     e28:	2900      	cmp	r1, #0
     e2a:	d002      	beq.n	e32 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     e2c:	2180      	movs	r1, #128	; 0x80
     e2e:	0189      	lsls	r1, r1, #6
     e30:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
     e32:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     e34:	2002      	movs	r0, #2
     e36:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
     e38:	428b      	cmp	r3, r1
     e3a:	d018      	beq.n	e6e <spi_init+0x142>
	module->hw = NULL;
     e3c:	2300      	movs	r3, #0
     e3e:	464a      	mov	r2, r9
     e40:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     e42:	201c      	movs	r0, #28
     e44:	e784      	b.n	d50 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
     e46:	aa04      	add	r2, sp, #16
     e48:	0001      	movs	r1, r0
     e4a:	69a0      	ldr	r0, [r4, #24]
     e4c:	4b60      	ldr	r3, [pc, #384]	; (fd0 <spi_init+0x2a4>)
     e4e:	4798      	blx	r3
     e50:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     e52:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     e54:	2b00      	cmp	r3, #0
     e56:	d000      	beq.n	e5a <spi_init+0x12e>
     e58:	e77a      	b.n	d50 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     e5a:	7b3b      	ldrb	r3, [r7, #12]
     e5c:	b2db      	uxtb	r3, r3
     e5e:	aa04      	add	r2, sp, #16
     e60:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     e62:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     e64:	429a      	cmp	r2, r3
     e66:	d000      	beq.n	e6a <spi_init+0x13e>
     e68:	e772      	b.n	d50 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     e6a:	350c      	adds	r5, #12
     e6c:	e7c3      	b.n	df6 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
     e6e:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     e70:	4293      	cmp	r3, r2
     e72:	d1e3      	bne.n	e3c <spi_init+0x110>
		module->mode           = config->mode;
     e74:	7823      	ldrb	r3, [r4, #0]
     e76:	464a      	mov	r2, r9
     e78:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
     e7a:	7c23      	ldrb	r3, [r4, #16]
     e7c:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     e7e:	2000      	movs	r0, #0
     e80:	e766      	b.n	d50 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e82:	0008      	movs	r0, r1
     e84:	4b53      	ldr	r3, [pc, #332]	; (fd4 <spi_init+0x2a8>)
     e86:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     e88:	4a53      	ldr	r2, [pc, #332]	; (fd8 <spi_init+0x2ac>)
     e8a:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e8c:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e8e:	2301      	movs	r3, #1
     e90:	40ab      	lsls	r3, r5
     e92:	430b      	orrs	r3, r1
     e94:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     e96:	a909      	add	r1, sp, #36	; 0x24
     e98:	2624      	movs	r6, #36	; 0x24
     e9a:	5da3      	ldrb	r3, [r4, r6]
     e9c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e9e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ea0:	b2c5      	uxtb	r5, r0
     ea2:	0028      	movs	r0, r5
     ea4:	4b4d      	ldr	r3, [pc, #308]	; (fdc <spi_init+0x2b0>)
     ea6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ea8:	0028      	movs	r0, r5
     eaa:	4b4d      	ldr	r3, [pc, #308]	; (fe0 <spi_init+0x2b4>)
     eac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     eae:	5da0      	ldrb	r0, [r4, r6]
     eb0:	2100      	movs	r1, #0
     eb2:	4b4c      	ldr	r3, [pc, #304]	; (fe4 <spi_init+0x2b8>)
     eb4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     eb6:	7823      	ldrb	r3, [r4, #0]
     eb8:	2b01      	cmp	r3, #1
     eba:	d019      	beq.n	ef0 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ebc:	464b      	mov	r3, r9
     ebe:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ec0:	ab04      	add	r3, sp, #16
     ec2:	2280      	movs	r2, #128	; 0x80
     ec4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ec6:	2200      	movs	r2, #0
     ec8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     eca:	2101      	movs	r1, #1
     ecc:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     ece:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     ed0:	7823      	ldrb	r3, [r4, #0]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d101      	bne.n	eda <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ed6:	ab04      	add	r3, sp, #16
     ed8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     edc:	9305      	str	r3, [sp, #20]
     ede:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ee0:	9306      	str	r3, [sp, #24]
     ee2:	6b23      	ldr	r3, [r4, #48]	; 0x30
     ee4:	9307      	str	r3, [sp, #28]
     ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ee8:	9308      	str	r3, [sp, #32]
     eea:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eec:	ad05      	add	r5, sp, #20
     eee:	e011      	b.n	f14 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     ef0:	683b      	ldr	r3, [r7, #0]
     ef2:	220c      	movs	r2, #12
     ef4:	4313      	orrs	r3, r2
     ef6:	603b      	str	r3, [r7, #0]
     ef8:	e7e0      	b.n	ebc <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     efa:	0030      	movs	r0, r6
     efc:	4b31      	ldr	r3, [pc, #196]	; (fc4 <spi_init+0x298>)
     efe:	4798      	blx	r3
     f00:	e00d      	b.n	f1e <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f02:	a904      	add	r1, sp, #16
     f04:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f06:	0c00      	lsrs	r0, r0, #16
     f08:	b2c0      	uxtb	r0, r0
     f0a:	4b37      	ldr	r3, [pc, #220]	; (fe8 <spi_init+0x2bc>)
     f0c:	4798      	blx	r3
     f0e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     f10:	2f04      	cmp	r7, #4
     f12:	d007      	beq.n	f24 <spi_init+0x1f8>
     f14:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f16:	00bb      	lsls	r3, r7, #2
     f18:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     f1a:	2800      	cmp	r0, #0
     f1c:	d0ed      	beq.n	efa <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
     f1e:	1c43      	adds	r3, r0, #1
     f20:	d1ef      	bne.n	f02 <spi_init+0x1d6>
     f22:	e7f4      	b.n	f0e <spi_init+0x1e2>
	module->mode             = config->mode;
     f24:	7823      	ldrb	r3, [r4, #0]
     f26:	464a      	mov	r2, r9
     f28:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     f2a:	7c23      	ldrb	r3, [r4, #16]
     f2c:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     f2e:	7ca3      	ldrb	r3, [r4, #18]
     f30:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     f32:	7d23      	ldrb	r3, [r4, #20]
     f34:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     f36:	2200      	movs	r2, #0
     f38:	ab02      	add	r3, sp, #8
     f3a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     f3c:	7823      	ldrb	r3, [r4, #0]
     f3e:	2b01      	cmp	r3, #1
     f40:	d028      	beq.n	f94 <spi_init+0x268>
	ctrla |= config->transfer_mode;
     f42:	6863      	ldr	r3, [r4, #4]
     f44:	68a2      	ldr	r2, [r4, #8]
     f46:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
     f48:	68e2      	ldr	r2, [r4, #12]
     f4a:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
     f4c:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
     f4e:	7c62      	ldrb	r2, [r4, #17]
     f50:	2a00      	cmp	r2, #0
     f52:	d103      	bne.n	f5c <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f54:	4a25      	ldr	r2, [pc, #148]	; (fec <spi_init+0x2c0>)
     f56:	7892      	ldrb	r2, [r2, #2]
     f58:	0792      	lsls	r2, r2, #30
     f5a:	d501      	bpl.n	f60 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     f5c:	2280      	movs	r2, #128	; 0x80
     f5e:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
     f60:	7ca2      	ldrb	r2, [r4, #18]
     f62:	2a00      	cmp	r2, #0
     f64:	d002      	beq.n	f6c <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     f66:	2280      	movs	r2, #128	; 0x80
     f68:	0292      	lsls	r2, r2, #10
     f6a:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
     f6c:	7ce2      	ldrb	r2, [r4, #19]
     f6e:	2a00      	cmp	r2, #0
     f70:	d002      	beq.n	f78 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     f72:	2280      	movs	r2, #128	; 0x80
     f74:	0092      	lsls	r2, r2, #2
     f76:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
     f78:	7d22      	ldrb	r2, [r4, #20]
     f7a:	2a00      	cmp	r2, #0
     f7c:	d002      	beq.n	f84 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     f7e:	2280      	movs	r2, #128	; 0x80
     f80:	0192      	lsls	r2, r2, #6
     f82:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
     f84:	6832      	ldr	r2, [r6, #0]
     f86:	4313      	orrs	r3, r2
     f88:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     f8a:	6873      	ldr	r3, [r6, #4]
     f8c:	430b      	orrs	r3, r1
     f8e:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
     f90:	2000      	movs	r0, #0
     f92:	e6dd      	b.n	d50 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f94:	464b      	mov	r3, r9
     f96:	6818      	ldr	r0, [r3, #0]
     f98:	4b0e      	ldr	r3, [pc, #56]	; (fd4 <spi_init+0x2a8>)
     f9a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f9c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     f9e:	b2c0      	uxtb	r0, r0
     fa0:	4b0a      	ldr	r3, [pc, #40]	; (fcc <spi_init+0x2a0>)
     fa2:	4798      	blx	r3
     fa4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     fa6:	ab02      	add	r3, sp, #8
     fa8:	1d9a      	adds	r2, r3, #6
     faa:	69a0      	ldr	r0, [r4, #24]
     fac:	4b08      	ldr	r3, [pc, #32]	; (fd0 <spi_init+0x2a4>)
     fae:	4798      	blx	r3
     fb0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     fb2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     fb4:	2b00      	cmp	r3, #0
     fb6:	d000      	beq.n	fba <spi_init+0x28e>
     fb8:	e6ca      	b.n	d50 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     fba:	ab02      	add	r3, sp, #8
     fbc:	3306      	adds	r3, #6
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	7333      	strb	r3, [r6, #12]
     fc2:	e7be      	b.n	f42 <spi_init+0x216>
     fc4:	00000b19 	.word	0x00000b19
     fc8:	41004400 	.word	0x41004400
     fcc:	00001735 	.word	0x00001735
     fd0:	00000aa5 	.word	0x00000aa5
     fd4:	00000c95 	.word	0x00000c95
     fd8:	40000400 	.word	0x40000400
     fdc:	00001719 	.word	0x00001719
     fe0:	0000168d 	.word	0x0000168d
     fe4:	00000acd 	.word	0x00000acd
     fe8:	00001811 	.word	0x00001811
     fec:	41002000 	.word	0x41002000

00000ff0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     ff0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     ff2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     ff4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     ff6:	2c01      	cmp	r4, #1
     ff8:	d001      	beq.n	ffe <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     ffa:	0018      	movs	r0, r3
     ffc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     ffe:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1000:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1002:	2c00      	cmp	r4, #0
    1004:	d1f9      	bne.n	ffa <spi_select_slave+0xa>
		if (select) {
    1006:	2a00      	cmp	r2, #0
    1008:	d058      	beq.n	10bc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    100a:	784b      	ldrb	r3, [r1, #1]
    100c:	2b00      	cmp	r3, #0
    100e:	d044      	beq.n	109a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1010:	6803      	ldr	r3, [r0, #0]
    1012:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1014:	07db      	lsls	r3, r3, #31
    1016:	d410      	bmi.n	103a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1018:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    101a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    101c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    101e:	2900      	cmp	r1, #0
    1020:	d104      	bne.n	102c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1022:	0953      	lsrs	r3, r2, #5
    1024:	01db      	lsls	r3, r3, #7
    1026:	492e      	ldr	r1, [pc, #184]	; (10e0 <spi_select_slave+0xf0>)
    1028:	468c      	mov	ip, r1
    102a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    102c:	211f      	movs	r1, #31
    102e:	4011      	ands	r1, r2
    1030:	2201      	movs	r2, #1
    1032:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1034:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1036:	2305      	movs	r3, #5
    1038:	e7df      	b.n	ffa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    103a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    103c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    103e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1040:	2c00      	cmp	r4, #0
    1042:	d104      	bne.n	104e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1044:	0953      	lsrs	r3, r2, #5
    1046:	01db      	lsls	r3, r3, #7
    1048:	4c25      	ldr	r4, [pc, #148]	; (10e0 <spi_select_slave+0xf0>)
    104a:	46a4      	mov	ip, r4
    104c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    104e:	241f      	movs	r4, #31
    1050:	4014      	ands	r4, r2
    1052:	2201      	movs	r2, #1
    1054:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1056:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1058:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    105a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    105c:	07d2      	lsls	r2, r2, #31
    105e:	d501      	bpl.n	1064 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1060:	788a      	ldrb	r2, [r1, #2]
    1062:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1064:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1066:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1068:	2a00      	cmp	r2, #0
    106a:	d1c6      	bne.n	ffa <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    106c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    106e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1070:	7e13      	ldrb	r3, [r2, #24]
    1072:	420b      	tst	r3, r1
    1074:	d0fc      	beq.n	1070 <spi_select_slave+0x80>
    1076:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1078:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    107a:	0749      	lsls	r1, r1, #29
    107c:	d5bd      	bpl.n	ffa <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    107e:	8b53      	ldrh	r3, [r2, #26]
    1080:	075b      	lsls	r3, r3, #29
    1082:	d501      	bpl.n	1088 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1084:	2304      	movs	r3, #4
    1086:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1088:	7983      	ldrb	r3, [r0, #6]
    108a:	2b01      	cmp	r3, #1
    108c:	d002      	beq.n	1094 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    108e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1090:	2300      	movs	r3, #0
    1092:	e7b2      	b.n	ffa <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1094:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1096:	2300      	movs	r3, #0
    1098:	e7af      	b.n	ffa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    109a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    109c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    109e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10a0:	2900      	cmp	r1, #0
    10a2:	d104      	bne.n	10ae <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    10a4:	0953      	lsrs	r3, r2, #5
    10a6:	01db      	lsls	r3, r3, #7
    10a8:	490d      	ldr	r1, [pc, #52]	; (10e0 <spi_select_slave+0xf0>)
    10aa:	468c      	mov	ip, r1
    10ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    10ae:	211f      	movs	r1, #31
    10b0:	4011      	ands	r1, r2
    10b2:	2201      	movs	r2, #1
    10b4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    10b6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    10b8:	2300      	movs	r3, #0
    10ba:	e79e      	b.n	ffa <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    10bc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    10be:	09d1      	lsrs	r1, r2, #7
		return NULL;
    10c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10c2:	2900      	cmp	r1, #0
    10c4:	d104      	bne.n	10d0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    10c6:	0953      	lsrs	r3, r2, #5
    10c8:	01db      	lsls	r3, r3, #7
    10ca:	4905      	ldr	r1, [pc, #20]	; (10e0 <spi_select_slave+0xf0>)
    10cc:	468c      	mov	ip, r1
    10ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    10d0:	211f      	movs	r1, #31
    10d2:	4011      	ands	r1, r2
    10d4:	2201      	movs	r2, #1
    10d6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    10d8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    10da:	2300      	movs	r3, #0
    10dc:	e78d      	b.n	ffa <spi_select_slave+0xa>
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	41004400 	.word	0x41004400

000010e4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    10e4:	b510      	push	{r4, lr}
	switch (clock_source) {
    10e6:	2808      	cmp	r0, #8
    10e8:	d803      	bhi.n	10f2 <system_clock_source_get_hz+0xe>
    10ea:	0080      	lsls	r0, r0, #2
    10ec:	4b1c      	ldr	r3, [pc, #112]	; (1160 <system_clock_source_get_hz+0x7c>)
    10ee:	581b      	ldr	r3, [r3, r0]
    10f0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    10f2:	2000      	movs	r0, #0
    10f4:	e032      	b.n	115c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    10f6:	4b1b      	ldr	r3, [pc, #108]	; (1164 <system_clock_source_get_hz+0x80>)
    10f8:	6918      	ldr	r0, [r3, #16]
    10fa:	e02f      	b.n	115c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    10fc:	4b1a      	ldr	r3, [pc, #104]	; (1168 <system_clock_source_get_hz+0x84>)
    10fe:	6a1b      	ldr	r3, [r3, #32]
    1100:	059b      	lsls	r3, r3, #22
    1102:	0f9b      	lsrs	r3, r3, #30
    1104:	4819      	ldr	r0, [pc, #100]	; (116c <system_clock_source_get_hz+0x88>)
    1106:	40d8      	lsrs	r0, r3
    1108:	e028      	b.n	115c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    110a:	4b16      	ldr	r3, [pc, #88]	; (1164 <system_clock_source_get_hz+0x80>)
    110c:	6958      	ldr	r0, [r3, #20]
    110e:	e025      	b.n	115c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1110:	4b14      	ldr	r3, [pc, #80]	; (1164 <system_clock_source_get_hz+0x80>)
    1112:	681b      	ldr	r3, [r3, #0]
			return 0;
    1114:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1116:	079b      	lsls	r3, r3, #30
    1118:	d520      	bpl.n	115c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    111a:	4913      	ldr	r1, [pc, #76]	; (1168 <system_clock_source_get_hz+0x84>)
    111c:	2210      	movs	r2, #16
    111e:	68cb      	ldr	r3, [r1, #12]
    1120:	421a      	tst	r2, r3
    1122:	d0fc      	beq.n	111e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1124:	4b0f      	ldr	r3, [pc, #60]	; (1164 <system_clock_source_get_hz+0x80>)
    1126:	681a      	ldr	r2, [r3, #0]
    1128:	2324      	movs	r3, #36	; 0x24
    112a:	4013      	ands	r3, r2
    112c:	2b04      	cmp	r3, #4
    112e:	d001      	beq.n	1134 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1130:	480f      	ldr	r0, [pc, #60]	; (1170 <system_clock_source_get_hz+0x8c>)
    1132:	e013      	b.n	115c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1134:	2000      	movs	r0, #0
    1136:	4b0f      	ldr	r3, [pc, #60]	; (1174 <system_clock_source_get_hz+0x90>)
    1138:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    113a:	4b0a      	ldr	r3, [pc, #40]	; (1164 <system_clock_source_get_hz+0x80>)
    113c:	689b      	ldr	r3, [r3, #8]
    113e:	041b      	lsls	r3, r3, #16
    1140:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1142:	4358      	muls	r0, r3
    1144:	e00a      	b.n	115c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1146:	2350      	movs	r3, #80	; 0x50
    1148:	4a07      	ldr	r2, [pc, #28]	; (1168 <system_clock_source_get_hz+0x84>)
    114a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    114c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    114e:	075b      	lsls	r3, r3, #29
    1150:	d504      	bpl.n	115c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1152:	4b04      	ldr	r3, [pc, #16]	; (1164 <system_clock_source_get_hz+0x80>)
    1154:	68d8      	ldr	r0, [r3, #12]
    1156:	e001      	b.n	115c <system_clock_source_get_hz+0x78>
		return 32768UL;
    1158:	2080      	movs	r0, #128	; 0x80
    115a:	0200      	lsls	r0, r0, #8
	}
}
    115c:	bd10      	pop	{r4, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	00007edc 	.word	0x00007edc
    1164:	20000100 	.word	0x20000100
    1168:	40000800 	.word	0x40000800
    116c:	007a1200 	.word	0x007a1200
    1170:	02dc6c00 	.word	0x02dc6c00
    1174:	00001735 	.word	0x00001735

00001178 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1178:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    117a:	490c      	ldr	r1, [pc, #48]	; (11ac <system_clock_source_osc8m_set_config+0x34>)
    117c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    117e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1180:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1182:	7840      	ldrb	r0, [r0, #1]
    1184:	2201      	movs	r2, #1
    1186:	4010      	ands	r0, r2
    1188:	0180      	lsls	r0, r0, #6
    118a:	2640      	movs	r6, #64	; 0x40
    118c:	43b3      	bics	r3, r6
    118e:	4303      	orrs	r3, r0
    1190:	402a      	ands	r2, r5
    1192:	01d2      	lsls	r2, r2, #7
    1194:	2080      	movs	r0, #128	; 0x80
    1196:	4383      	bics	r3, r0
    1198:	4313      	orrs	r3, r2
    119a:	2203      	movs	r2, #3
    119c:	4022      	ands	r2, r4
    119e:	0212      	lsls	r2, r2, #8
    11a0:	4803      	ldr	r0, [pc, #12]	; (11b0 <system_clock_source_osc8m_set_config+0x38>)
    11a2:	4003      	ands	r3, r0
    11a4:	4313      	orrs	r3, r2
    11a6:	620b      	str	r3, [r1, #32]
}
    11a8:	bd70      	pop	{r4, r5, r6, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	40000800 	.word	0x40000800
    11b0:	fffffcff 	.word	0xfffffcff

000011b4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    11b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11b6:	46ce      	mov	lr, r9
    11b8:	4647      	mov	r7, r8
    11ba:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    11bc:	4b19      	ldr	r3, [pc, #100]	; (1224 <system_clock_source_osc32k_set_config+0x70>)
    11be:	4699      	mov	r9, r3
    11c0:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    11c2:	7841      	ldrb	r1, [r0, #1]
    11c4:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    11c6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    11c8:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    11ca:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    11cc:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    11ce:	7880      	ldrb	r0, [r0, #2]
    11d0:	2101      	movs	r1, #1
    11d2:	4008      	ands	r0, r1
    11d4:	0080      	lsls	r0, r0, #2
    11d6:	2204      	movs	r2, #4
    11d8:	4393      	bics	r3, r2
    11da:	4303      	orrs	r3, r0
    11dc:	4660      	mov	r0, ip
    11de:	4008      	ands	r0, r1
    11e0:	00c0      	lsls	r0, r0, #3
    11e2:	3204      	adds	r2, #4
    11e4:	4393      	bics	r3, r2
    11e6:	4303      	orrs	r3, r0
    11e8:	0038      	movs	r0, r7
    11ea:	4008      	ands	r0, r1
    11ec:	0180      	lsls	r0, r0, #6
    11ee:	2740      	movs	r7, #64	; 0x40
    11f0:	43bb      	bics	r3, r7
    11f2:	4303      	orrs	r3, r0
    11f4:	0030      	movs	r0, r6
    11f6:	4008      	ands	r0, r1
    11f8:	01c0      	lsls	r0, r0, #7
    11fa:	2680      	movs	r6, #128	; 0x80
    11fc:	43b3      	bics	r3, r6
    11fe:	4303      	orrs	r3, r0
    1200:	2007      	movs	r0, #7
    1202:	4005      	ands	r5, r0
    1204:	022d      	lsls	r5, r5, #8
    1206:	4808      	ldr	r0, [pc, #32]	; (1228 <system_clock_source_osc32k_set_config+0x74>)
    1208:	4003      	ands	r3, r0
    120a:	432b      	orrs	r3, r5
    120c:	4021      	ands	r1, r4
    120e:	0309      	lsls	r1, r1, #12
    1210:	4806      	ldr	r0, [pc, #24]	; (122c <system_clock_source_osc32k_set_config+0x78>)
    1212:	4003      	ands	r3, r0
    1214:	430b      	orrs	r3, r1
    1216:	464a      	mov	r2, r9
    1218:	6193      	str	r3, [r2, #24]
}
    121a:	bc0c      	pop	{r2, r3}
    121c:	4690      	mov	r8, r2
    121e:	4699      	mov	r9, r3
    1220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	40000800 	.word	0x40000800
    1228:	fffff8ff 	.word	0xfffff8ff
    122c:	ffffefff 	.word	0xffffefff

00001230 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1230:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1232:	7a03      	ldrb	r3, [r0, #8]
    1234:	069b      	lsls	r3, r3, #26
    1236:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1238:	8942      	ldrh	r2, [r0, #10]
    123a:	0592      	lsls	r2, r2, #22
    123c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    123e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1240:	4918      	ldr	r1, [pc, #96]	; (12a4 <system_clock_source_dfll_set_config+0x74>)
    1242:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1244:	7983      	ldrb	r3, [r0, #6]
    1246:	79c2      	ldrb	r2, [r0, #7]
    1248:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    124a:	8842      	ldrh	r2, [r0, #2]
    124c:	8884      	ldrh	r4, [r0, #4]
    124e:	4322      	orrs	r2, r4
    1250:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1252:	7842      	ldrb	r2, [r0, #1]
    1254:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1256:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1258:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    125a:	7803      	ldrb	r3, [r0, #0]
    125c:	2b04      	cmp	r3, #4
    125e:	d011      	beq.n	1284 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1260:	2b20      	cmp	r3, #32
    1262:	d10e      	bne.n	1282 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1264:	7b03      	ldrb	r3, [r0, #12]
    1266:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1268:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    126a:	4313      	orrs	r3, r2
    126c:	89c2      	ldrh	r2, [r0, #14]
    126e:	0412      	lsls	r2, r2, #16
    1270:	490d      	ldr	r1, [pc, #52]	; (12a8 <system_clock_source_dfll_set_config+0x78>)
    1272:	400a      	ands	r2, r1
    1274:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1276:	4a0b      	ldr	r2, [pc, #44]	; (12a4 <system_clock_source_dfll_set_config+0x74>)
    1278:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    127a:	6811      	ldr	r1, [r2, #0]
    127c:	4b0b      	ldr	r3, [pc, #44]	; (12ac <system_clock_source_dfll_set_config+0x7c>)
    127e:	430b      	orrs	r3, r1
    1280:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1282:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1284:	7b03      	ldrb	r3, [r0, #12]
    1286:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1288:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    128a:	4313      	orrs	r3, r2
    128c:	89c2      	ldrh	r2, [r0, #14]
    128e:	0412      	lsls	r2, r2, #16
    1290:	4905      	ldr	r1, [pc, #20]	; (12a8 <system_clock_source_dfll_set_config+0x78>)
    1292:	400a      	ands	r2, r1
    1294:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1296:	4a03      	ldr	r2, [pc, #12]	; (12a4 <system_clock_source_dfll_set_config+0x74>)
    1298:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    129a:	6813      	ldr	r3, [r2, #0]
    129c:	2104      	movs	r1, #4
    129e:	430b      	orrs	r3, r1
    12a0:	6013      	str	r3, [r2, #0]
    12a2:	e7ee      	b.n	1282 <system_clock_source_dfll_set_config+0x52>
    12a4:	20000100 	.word	0x20000100
    12a8:	03ff0000 	.word	0x03ff0000
    12ac:	00000424 	.word	0x00000424

000012b0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    12b0:	2808      	cmp	r0, #8
    12b2:	d803      	bhi.n	12bc <system_clock_source_enable+0xc>
    12b4:	0080      	lsls	r0, r0, #2
    12b6:	4b25      	ldr	r3, [pc, #148]	; (134c <system_clock_source_enable+0x9c>)
    12b8:	581b      	ldr	r3, [r3, r0]
    12ba:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    12bc:	2017      	movs	r0, #23
    12be:	e044      	b.n	134a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    12c0:	4a23      	ldr	r2, [pc, #140]	; (1350 <system_clock_source_enable+0xa0>)
    12c2:	6a13      	ldr	r3, [r2, #32]
    12c4:	2102      	movs	r1, #2
    12c6:	430b      	orrs	r3, r1
    12c8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    12ca:	2000      	movs	r0, #0
    12cc:	e03d      	b.n	134a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    12ce:	4a20      	ldr	r2, [pc, #128]	; (1350 <system_clock_source_enable+0xa0>)
    12d0:	6993      	ldr	r3, [r2, #24]
    12d2:	2102      	movs	r1, #2
    12d4:	430b      	orrs	r3, r1
    12d6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    12d8:	2000      	movs	r0, #0
		break;
    12da:	e036      	b.n	134a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    12dc:	4a1c      	ldr	r2, [pc, #112]	; (1350 <system_clock_source_enable+0xa0>)
    12de:	8a13      	ldrh	r3, [r2, #16]
    12e0:	2102      	movs	r1, #2
    12e2:	430b      	orrs	r3, r1
    12e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    12e6:	2000      	movs	r0, #0
		break;
    12e8:	e02f      	b.n	134a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    12ea:	4a19      	ldr	r2, [pc, #100]	; (1350 <system_clock_source_enable+0xa0>)
    12ec:	8a93      	ldrh	r3, [r2, #20]
    12ee:	2102      	movs	r1, #2
    12f0:	430b      	orrs	r3, r1
    12f2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    12f4:	2000      	movs	r0, #0
		break;
    12f6:	e028      	b.n	134a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    12f8:	4916      	ldr	r1, [pc, #88]	; (1354 <system_clock_source_enable+0xa4>)
    12fa:	680b      	ldr	r3, [r1, #0]
    12fc:	2202      	movs	r2, #2
    12fe:	4313      	orrs	r3, r2
    1300:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1302:	4b13      	ldr	r3, [pc, #76]	; (1350 <system_clock_source_enable+0xa0>)
    1304:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1306:	0019      	movs	r1, r3
    1308:	320e      	adds	r2, #14
    130a:	68cb      	ldr	r3, [r1, #12]
    130c:	421a      	tst	r2, r3
    130e:	d0fc      	beq.n	130a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1310:	4a10      	ldr	r2, [pc, #64]	; (1354 <system_clock_source_enable+0xa4>)
    1312:	6891      	ldr	r1, [r2, #8]
    1314:	4b0e      	ldr	r3, [pc, #56]	; (1350 <system_clock_source_enable+0xa0>)
    1316:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1318:	6852      	ldr	r2, [r2, #4]
    131a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    131c:	2200      	movs	r2, #0
    131e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1320:	0019      	movs	r1, r3
    1322:	3210      	adds	r2, #16
    1324:	68cb      	ldr	r3, [r1, #12]
    1326:	421a      	tst	r2, r3
    1328:	d0fc      	beq.n	1324 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    132a:	4b0a      	ldr	r3, [pc, #40]	; (1354 <system_clock_source_enable+0xa4>)
    132c:	681b      	ldr	r3, [r3, #0]
    132e:	b29b      	uxth	r3, r3
    1330:	4a07      	ldr	r2, [pc, #28]	; (1350 <system_clock_source_enable+0xa0>)
    1332:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1334:	2000      	movs	r0, #0
    1336:	e008      	b.n	134a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1338:	4905      	ldr	r1, [pc, #20]	; (1350 <system_clock_source_enable+0xa0>)
    133a:	2244      	movs	r2, #68	; 0x44
    133c:	5c8b      	ldrb	r3, [r1, r2]
    133e:	2002      	movs	r0, #2
    1340:	4303      	orrs	r3, r0
    1342:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1344:	2000      	movs	r0, #0
		break;
    1346:	e000      	b.n	134a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1348:	2000      	movs	r0, #0
}
    134a:	4770      	bx	lr
    134c:	00007f00 	.word	0x00007f00
    1350:	40000800 	.word	0x40000800
    1354:	20000100 	.word	0x20000100

00001358 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1358:	b5f0      	push	{r4, r5, r6, r7, lr}
    135a:	46ce      	mov	lr, r9
    135c:	4647      	mov	r7, r8
    135e:	b580      	push	{r7, lr}
    1360:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1362:	22c2      	movs	r2, #194	; 0xc2
    1364:	00d2      	lsls	r2, r2, #3
    1366:	4b50      	ldr	r3, [pc, #320]	; (14a8 <system_clock_init+0x150>)
    1368:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    136a:	4a50      	ldr	r2, [pc, #320]	; (14ac <system_clock_init+0x154>)
    136c:	6853      	ldr	r3, [r2, #4]
    136e:	211e      	movs	r1, #30
    1370:	438b      	bics	r3, r1
    1372:	391a      	subs	r1, #26
    1374:	430b      	orrs	r3, r1
    1376:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    1378:	2203      	movs	r2, #3
    137a:	ab01      	add	r3, sp, #4
    137c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    137e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1380:	4d4b      	ldr	r5, [pc, #300]	; (14b0 <system_clock_init+0x158>)
    1382:	b2e0      	uxtb	r0, r4
    1384:	a901      	add	r1, sp, #4
    1386:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1388:	3401      	adds	r4, #1
    138a:	2c25      	cmp	r4, #37	; 0x25
    138c:	d1f9      	bne.n	1382 <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    138e:	4d49      	ldr	r5, [pc, #292]	; (14b4 <system_clock_init+0x15c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    1390:	682b      	ldr	r3, [r5, #0]
    1392:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1394:	4944      	ldr	r1, [pc, #272]	; (14a8 <system_clock_init+0x150>)
    1396:	698a      	ldr	r2, [r1, #24]
    1398:	0e5b      	lsrs	r3, r3, #25
    139a:	041b      	lsls	r3, r3, #16
    139c:	4846      	ldr	r0, [pc, #280]	; (14b8 <system_clock_init+0x160>)
    139e:	4002      	ands	r2, r0
    13a0:	4313      	orrs	r3, r2
    13a2:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    13a4:	a80a      	add	r0, sp, #40	; 0x28
    13a6:	2301      	movs	r3, #1
    13a8:	7083      	strb	r3, [r0, #2]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    13aa:	2207      	movs	r2, #7
    13ac:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    13ae:	2400      	movs	r4, #0
    13b0:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    13b2:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    13b4:	7104      	strb	r4, [r0, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    13b6:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    13b8:	4b40      	ldr	r3, [pc, #256]	; (14bc <system_clock_init+0x164>)
    13ba:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    13bc:	2004      	movs	r0, #4
    13be:	4b40      	ldr	r3, [pc, #256]	; (14c0 <system_clock_init+0x168>)
    13c0:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    13c2:	ab05      	add	r3, sp, #20
    13c4:	2200      	movs	r2, #0
    13c6:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    13c8:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    13ca:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    13cc:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    13ce:	213f      	movs	r1, #63	; 0x3f
    13d0:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    13d2:	393b      	subs	r1, #59	; 0x3b
    13d4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    13d6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    13d8:	682b      	ldr	r3, [r5, #0]
    13da:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    13dc:	2b3f      	cmp	r3, #63	; 0x3f
    13de:	d060      	beq.n	14a2 <system_clock_init+0x14a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    13e0:	a805      	add	r0, sp, #20
    13e2:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    13e4:	2304      	movs	r3, #4
    13e6:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    13e8:	3303      	adds	r3, #3
    13ea:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    13ec:	3338      	adds	r3, #56	; 0x38
    13ee:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    13f0:	4b34      	ldr	r3, [pc, #208]	; (14c4 <system_clock_init+0x16c>)
    13f2:	4798      	blx	r3
	config->run_in_standby  = false;
    13f4:	a804      	add	r0, sp, #16
    13f6:	2500      	movs	r5, #0
    13f8:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    13fa:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    13fc:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    13fe:	4b32      	ldr	r3, [pc, #200]	; (14c8 <system_clock_init+0x170>)
    1400:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1402:	2006      	movs	r0, #6
    1404:	4f2e      	ldr	r7, [pc, #184]	; (14c0 <system_clock_init+0x168>)
    1406:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1408:	4b30      	ldr	r3, [pc, #192]	; (14cc <system_clock_init+0x174>)
    140a:	4798      	blx	r3
	config->division_factor    = 1;
    140c:	ac01      	add	r4, sp, #4
    140e:	2601      	movs	r6, #1
    1410:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1412:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1414:	2306      	movs	r3, #6
    1416:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1418:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    141a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    141c:	0021      	movs	r1, r4
    141e:	2001      	movs	r0, #1
    1420:	4b2b      	ldr	r3, [pc, #172]	; (14d0 <system_clock_init+0x178>)
    1422:	4699      	mov	r9, r3
    1424:	4798      	blx	r3
    1426:	2001      	movs	r0, #1
    1428:	4b2a      	ldr	r3, [pc, #168]	; (14d4 <system_clock_init+0x17c>)
    142a:	4698      	mov	r8, r3
    142c:	4798      	blx	r3
	config->high_when_disabled = false;
    142e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1430:	7265      	strb	r5, [r4, #9]
    1432:	2304      	movs	r3, #4
    1434:	7023      	strb	r3, [r4, #0]
    1436:	2320      	movs	r3, #32
    1438:	6063      	str	r3, [r4, #4]
    143a:	7226      	strb	r6, [r4, #8]
    143c:	0021      	movs	r1, r4
    143e:	2002      	movs	r0, #2
    1440:	47c8      	blx	r9
    1442:	2002      	movs	r0, #2
    1444:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1446:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1448:	0021      	movs	r1, r4
    144a:	2000      	movs	r0, #0
    144c:	4b18      	ldr	r3, [pc, #96]	; (14b0 <system_clock_init+0x158>)
    144e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1450:	2000      	movs	r0, #0
    1452:	4b21      	ldr	r3, [pc, #132]	; (14d8 <system_clock_init+0x180>)
    1454:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1456:	2007      	movs	r0, #7
    1458:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    145a:	4913      	ldr	r1, [pc, #76]	; (14a8 <system_clock_init+0x150>)
    145c:	22d0      	movs	r2, #208	; 0xd0
    145e:	68cb      	ldr	r3, [r1, #12]
    1460:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1462:	2bd0      	cmp	r3, #208	; 0xd0
    1464:	d1fb      	bne.n	145e <system_clock_init+0x106>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1466:	4a10      	ldr	r2, [pc, #64]	; (14a8 <system_clock_init+0x150>)
    1468:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    146a:	2180      	movs	r1, #128	; 0x80
    146c:	430b      	orrs	r3, r1
    146e:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    1470:	4a1a      	ldr	r2, [pc, #104]	; (14dc <system_clock_init+0x184>)
    1472:	2300      	movs	r3, #0
    1474:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1476:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1478:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    147a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    147c:	a901      	add	r1, sp, #4
    147e:	2201      	movs	r2, #1
    1480:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1482:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1484:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1486:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1488:	3307      	adds	r3, #7
    148a:	700b      	strb	r3, [r1, #0]
    148c:	2000      	movs	r0, #0
    148e:	4b10      	ldr	r3, [pc, #64]	; (14d0 <system_clock_init+0x178>)
    1490:	4798      	blx	r3
    1492:	2000      	movs	r0, #0
    1494:	4b0f      	ldr	r3, [pc, #60]	; (14d4 <system_clock_init+0x17c>)
    1496:	4798      	blx	r3
#endif
}
    1498:	b00d      	add	sp, #52	; 0x34
    149a:	bc0c      	pop	{r2, r3}
    149c:	4690      	mov	r8, r2
    149e:	4699      	mov	r9, r3
    14a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    14a2:	3b20      	subs	r3, #32
    14a4:	e79c      	b.n	13e0 <system_clock_init+0x88>
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	40000800 	.word	0x40000800
    14ac:	41004000 	.word	0x41004000
    14b0:	00001719 	.word	0x00001719
    14b4:	00806024 	.word	0x00806024
    14b8:	ff80ffff 	.word	0xff80ffff
    14bc:	000011b5 	.word	0x000011b5
    14c0:	000012b1 	.word	0x000012b1
    14c4:	00001231 	.word	0x00001231
    14c8:	00001179 	.word	0x00001179
    14cc:	000014e1 	.word	0x000014e1
    14d0:	00001505 	.word	0x00001505
    14d4:	000015bd 	.word	0x000015bd
    14d8:	0000168d 	.word	0x0000168d
    14dc:	40000400 	.word	0x40000400

000014e0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    14e0:	4a06      	ldr	r2, [pc, #24]	; (14fc <system_gclk_init+0x1c>)
    14e2:	6993      	ldr	r3, [r2, #24]
    14e4:	2108      	movs	r1, #8
    14e6:	430b      	orrs	r3, r1
    14e8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    14ea:	2201      	movs	r2, #1
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <system_gclk_init+0x20>)
    14ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    14f0:	0019      	movs	r1, r3
    14f2:	780b      	ldrb	r3, [r1, #0]
    14f4:	4213      	tst	r3, r2
    14f6:	d1fc      	bne.n	14f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    14f8:	4770      	bx	lr
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	40000400 	.word	0x40000400
    1500:	40000c00 	.word	0x40000c00

00001504 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1504:	b570      	push	{r4, r5, r6, lr}
    1506:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1508:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    150a:	780d      	ldrb	r5, [r1, #0]
    150c:	022d      	lsls	r5, r5, #8
    150e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1510:	784b      	ldrb	r3, [r1, #1]
    1512:	2b00      	cmp	r3, #0
    1514:	d002      	beq.n	151c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1516:	2380      	movs	r3, #128	; 0x80
    1518:	02db      	lsls	r3, r3, #11
    151a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    151c:	7a4b      	ldrb	r3, [r1, #9]
    151e:	2b00      	cmp	r3, #0
    1520:	d002      	beq.n	1528 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1522:	2380      	movs	r3, #128	; 0x80
    1524:	031b      	lsls	r3, r3, #12
    1526:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1528:	6848      	ldr	r0, [r1, #4]
    152a:	2801      	cmp	r0, #1
    152c:	d910      	bls.n	1550 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    152e:	1e43      	subs	r3, r0, #1
    1530:	4218      	tst	r0, r3
    1532:	d134      	bne.n	159e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1534:	2802      	cmp	r0, #2
    1536:	d930      	bls.n	159a <system_gclk_gen_set_config+0x96>
    1538:	2302      	movs	r3, #2
    153a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    153c:	3201      	adds	r2, #1
						mask <<= 1) {
    153e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1540:	4298      	cmp	r0, r3
    1542:	d8fb      	bhi.n	153c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1544:	0212      	lsls	r2, r2, #8
    1546:	4332      	orrs	r2, r6
    1548:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    154a:	2380      	movs	r3, #128	; 0x80
    154c:	035b      	lsls	r3, r3, #13
    154e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1550:	7a0b      	ldrb	r3, [r1, #8]
    1552:	2b00      	cmp	r3, #0
    1554:	d002      	beq.n	155c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1556:	2380      	movs	r3, #128	; 0x80
    1558:	039b      	lsls	r3, r3, #14
    155a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    155c:	4a13      	ldr	r2, [pc, #76]	; (15ac <system_gclk_gen_set_config+0xa8>)
    155e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1560:	b25b      	sxtb	r3, r3
    1562:	2b00      	cmp	r3, #0
    1564:	dbfb      	blt.n	155e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1566:	4b12      	ldr	r3, [pc, #72]	; (15b0 <system_gclk_gen_set_config+0xac>)
    1568:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    156a:	4b12      	ldr	r3, [pc, #72]	; (15b4 <system_gclk_gen_set_config+0xb0>)
    156c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    156e:	4a0f      	ldr	r2, [pc, #60]	; (15ac <system_gclk_gen_set_config+0xa8>)
    1570:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1572:	b25b      	sxtb	r3, r3
    1574:	2b00      	cmp	r3, #0
    1576:	dbfb      	blt.n	1570 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1578:	4b0c      	ldr	r3, [pc, #48]	; (15ac <system_gclk_gen_set_config+0xa8>)
    157a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    157c:	001a      	movs	r2, r3
    157e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1580:	b25b      	sxtb	r3, r3
    1582:	2b00      	cmp	r3, #0
    1584:	dbfb      	blt.n	157e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1586:	4a09      	ldr	r2, [pc, #36]	; (15ac <system_gclk_gen_set_config+0xa8>)
    1588:	6853      	ldr	r3, [r2, #4]
    158a:	2180      	movs	r1, #128	; 0x80
    158c:	0249      	lsls	r1, r1, #9
    158e:	400b      	ands	r3, r1
    1590:	431d      	orrs	r5, r3
    1592:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1594:	4b08      	ldr	r3, [pc, #32]	; (15b8 <system_gclk_gen_set_config+0xb4>)
    1596:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1598:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    159a:	2200      	movs	r2, #0
    159c:	e7d2      	b.n	1544 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    159e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    15a0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    15a2:	2380      	movs	r3, #128	; 0x80
    15a4:	029b      	lsls	r3, r3, #10
    15a6:	431d      	orrs	r5, r3
    15a8:	e7d2      	b.n	1550 <system_gclk_gen_set_config+0x4c>
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	40000c00 	.word	0x40000c00
    15b0:	00000181 	.word	0x00000181
    15b4:	40000c08 	.word	0x40000c08
    15b8:	000001c1 	.word	0x000001c1

000015bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    15bc:	b510      	push	{r4, lr}
    15be:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15c0:	4a0b      	ldr	r2, [pc, #44]	; (15f0 <system_gclk_gen_enable+0x34>)
    15c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    15c4:	b25b      	sxtb	r3, r3
    15c6:	2b00      	cmp	r3, #0
    15c8:	dbfb      	blt.n	15c2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    15ca:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <system_gclk_gen_enable+0x38>)
    15cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15ce:	4b0a      	ldr	r3, [pc, #40]	; (15f8 <system_gclk_gen_enable+0x3c>)
    15d0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15d2:	4a07      	ldr	r2, [pc, #28]	; (15f0 <system_gclk_gen_enable+0x34>)
    15d4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    15d6:	b25b      	sxtb	r3, r3
    15d8:	2b00      	cmp	r3, #0
    15da:	dbfb      	blt.n	15d4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    15dc:	4a04      	ldr	r2, [pc, #16]	; (15f0 <system_gclk_gen_enable+0x34>)
    15de:	6851      	ldr	r1, [r2, #4]
    15e0:	2380      	movs	r3, #128	; 0x80
    15e2:	025b      	lsls	r3, r3, #9
    15e4:	430b      	orrs	r3, r1
    15e6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    15e8:	4b04      	ldr	r3, [pc, #16]	; (15fc <system_gclk_gen_enable+0x40>)
    15ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15ec:	bd10      	pop	{r4, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	40000c00 	.word	0x40000c00
    15f4:	00000181 	.word	0x00000181
    15f8:	40000c04 	.word	0x40000c04
    15fc:	000001c1 	.word	0x000001c1

00001600 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1600:	b570      	push	{r4, r5, r6, lr}
    1602:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1604:	4a1a      	ldr	r2, [pc, #104]	; (1670 <system_gclk_gen_get_hz+0x70>)
    1606:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1608:	b25b      	sxtb	r3, r3
    160a:	2b00      	cmp	r3, #0
    160c:	dbfb      	blt.n	1606 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    160e:	4b19      	ldr	r3, [pc, #100]	; (1674 <system_gclk_gen_get_hz+0x74>)
    1610:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1612:	4b19      	ldr	r3, [pc, #100]	; (1678 <system_gclk_gen_get_hz+0x78>)
    1614:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1616:	4a16      	ldr	r2, [pc, #88]	; (1670 <system_gclk_gen_get_hz+0x70>)
    1618:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    161a:	b25b      	sxtb	r3, r3
    161c:	2b00      	cmp	r3, #0
    161e:	dbfb      	blt.n	1618 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1620:	4e13      	ldr	r6, [pc, #76]	; (1670 <system_gclk_gen_get_hz+0x70>)
    1622:	6870      	ldr	r0, [r6, #4]
    1624:	04c0      	lsls	r0, r0, #19
    1626:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1628:	4b14      	ldr	r3, [pc, #80]	; (167c <system_gclk_gen_get_hz+0x7c>)
    162a:	4798      	blx	r3
    162c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    162e:	4b12      	ldr	r3, [pc, #72]	; (1678 <system_gclk_gen_get_hz+0x78>)
    1630:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1632:	6876      	ldr	r6, [r6, #4]
    1634:	02f6      	lsls	r6, r6, #11
    1636:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1638:	4b11      	ldr	r3, [pc, #68]	; (1680 <system_gclk_gen_get_hz+0x80>)
    163a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    163c:	4a0c      	ldr	r2, [pc, #48]	; (1670 <system_gclk_gen_get_hz+0x70>)
    163e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1640:	b25b      	sxtb	r3, r3
    1642:	2b00      	cmp	r3, #0
    1644:	dbfb      	blt.n	163e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1646:	4b0a      	ldr	r3, [pc, #40]	; (1670 <system_gclk_gen_get_hz+0x70>)
    1648:	689c      	ldr	r4, [r3, #8]
    164a:	0224      	lsls	r4, r4, #8
    164c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    164e:	4b0d      	ldr	r3, [pc, #52]	; (1684 <system_gclk_gen_get_hz+0x84>)
    1650:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1652:	2e00      	cmp	r6, #0
    1654:	d107      	bne.n	1666 <system_gclk_gen_get_hz+0x66>
    1656:	2c01      	cmp	r4, #1
    1658:	d907      	bls.n	166a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    165a:	0021      	movs	r1, r4
    165c:	0028      	movs	r0, r5
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <system_gclk_gen_get_hz+0x88>)
    1660:	4798      	blx	r3
    1662:	0005      	movs	r5, r0
    1664:	e001      	b.n	166a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1666:	3401      	adds	r4, #1
    1668:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    166a:	0028      	movs	r0, r5
    166c:	bd70      	pop	{r4, r5, r6, pc}
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	40000c00 	.word	0x40000c00
    1674:	00000181 	.word	0x00000181
    1678:	40000c04 	.word	0x40000c04
    167c:	000010e5 	.word	0x000010e5
    1680:	40000c08 	.word	0x40000c08
    1684:	000001c1 	.word	0x000001c1
    1688:	000071fd 	.word	0x000071fd

0000168c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    168c:	b510      	push	{r4, lr}
    168e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1690:	4b06      	ldr	r3, [pc, #24]	; (16ac <system_gclk_chan_enable+0x20>)
    1692:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1694:	4b06      	ldr	r3, [pc, #24]	; (16b0 <system_gclk_chan_enable+0x24>)
    1696:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1698:	4a06      	ldr	r2, [pc, #24]	; (16b4 <system_gclk_chan_enable+0x28>)
    169a:	8853      	ldrh	r3, [r2, #2]
    169c:	2180      	movs	r1, #128	; 0x80
    169e:	01c9      	lsls	r1, r1, #7
    16a0:	430b      	orrs	r3, r1
    16a2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    16a4:	4b04      	ldr	r3, [pc, #16]	; (16b8 <system_gclk_chan_enable+0x2c>)
    16a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16a8:	bd10      	pop	{r4, pc}
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	00000181 	.word	0x00000181
    16b0:	40000c02 	.word	0x40000c02
    16b4:	40000c00 	.word	0x40000c00
    16b8:	000001c1 	.word	0x000001c1

000016bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    16bc:	b510      	push	{r4, lr}
    16be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16c0:	4b0f      	ldr	r3, [pc, #60]	; (1700 <system_gclk_chan_disable+0x44>)
    16c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16c4:	4b0f      	ldr	r3, [pc, #60]	; (1704 <system_gclk_chan_disable+0x48>)
    16c6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    16c8:	4a0f      	ldr	r2, [pc, #60]	; (1708 <system_gclk_chan_disable+0x4c>)
    16ca:	8853      	ldrh	r3, [r2, #2]
    16cc:	051b      	lsls	r3, r3, #20
    16ce:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    16d0:	8853      	ldrh	r3, [r2, #2]
    16d2:	490e      	ldr	r1, [pc, #56]	; (170c <system_gclk_chan_disable+0x50>)
    16d4:	400b      	ands	r3, r1
    16d6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    16d8:	8853      	ldrh	r3, [r2, #2]
    16da:	490d      	ldr	r1, [pc, #52]	; (1710 <system_gclk_chan_disable+0x54>)
    16dc:	400b      	ands	r3, r1
    16de:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    16e0:	0011      	movs	r1, r2
    16e2:	2280      	movs	r2, #128	; 0x80
    16e4:	01d2      	lsls	r2, r2, #7
    16e6:	884b      	ldrh	r3, [r1, #2]
    16e8:	4213      	tst	r3, r2
    16ea:	d1fc      	bne.n	16e6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    16ec:	4906      	ldr	r1, [pc, #24]	; (1708 <system_gclk_chan_disable+0x4c>)
    16ee:	884a      	ldrh	r2, [r1, #2]
    16f0:	0203      	lsls	r3, r0, #8
    16f2:	4806      	ldr	r0, [pc, #24]	; (170c <system_gclk_chan_disable+0x50>)
    16f4:	4002      	ands	r2, r0
    16f6:	4313      	orrs	r3, r2
    16f8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    16fa:	4b06      	ldr	r3, [pc, #24]	; (1714 <system_gclk_chan_disable+0x58>)
    16fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16fe:	bd10      	pop	{r4, pc}
    1700:	00000181 	.word	0x00000181
    1704:	40000c02 	.word	0x40000c02
    1708:	40000c00 	.word	0x40000c00
    170c:	fffff0ff 	.word	0xfffff0ff
    1710:	ffffbfff 	.word	0xffffbfff
    1714:	000001c1 	.word	0x000001c1

00001718 <system_gclk_chan_set_config>:
{
    1718:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    171a:	780c      	ldrb	r4, [r1, #0]
    171c:	0224      	lsls	r4, r4, #8
    171e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1720:	4b02      	ldr	r3, [pc, #8]	; (172c <system_gclk_chan_set_config+0x14>)
    1722:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1724:	b2a4      	uxth	r4, r4
    1726:	4b02      	ldr	r3, [pc, #8]	; (1730 <system_gclk_chan_set_config+0x18>)
    1728:	805c      	strh	r4, [r3, #2]
}
    172a:	bd10      	pop	{r4, pc}
    172c:	000016bd 	.word	0x000016bd
    1730:	40000c00 	.word	0x40000c00

00001734 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1734:	b510      	push	{r4, lr}
    1736:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1738:	4b06      	ldr	r3, [pc, #24]	; (1754 <system_gclk_chan_get_hz+0x20>)
    173a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <system_gclk_chan_get_hz+0x24>)
    173e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <system_gclk_chan_get_hz+0x28>)
    1742:	885c      	ldrh	r4, [r3, #2]
    1744:	0524      	lsls	r4, r4, #20
    1746:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1748:	4b05      	ldr	r3, [pc, #20]	; (1760 <system_gclk_chan_get_hz+0x2c>)
    174a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    174c:	0020      	movs	r0, r4
    174e:	4b05      	ldr	r3, [pc, #20]	; (1764 <system_gclk_chan_get_hz+0x30>)
    1750:	4798      	blx	r3
}
    1752:	bd10      	pop	{r4, pc}
    1754:	00000181 	.word	0x00000181
    1758:	40000c02 	.word	0x40000c02
    175c:	40000c00 	.word	0x40000c00
    1760:	000001c1 	.word	0x000001c1
    1764:	00001601 	.word	0x00001601

00001768 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1768:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    176a:	78d3      	ldrb	r3, [r2, #3]
    176c:	2b00      	cmp	r3, #0
    176e:	d135      	bne.n	17dc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1770:	7813      	ldrb	r3, [r2, #0]
    1772:	2b80      	cmp	r3, #128	; 0x80
    1774:	d029      	beq.n	17ca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1776:	061b      	lsls	r3, r3, #24
    1778:	2480      	movs	r4, #128	; 0x80
    177a:	0264      	lsls	r4, r4, #9
    177c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    177e:	7854      	ldrb	r4, [r2, #1]
    1780:	2502      	movs	r5, #2
    1782:	43ac      	bics	r4, r5
    1784:	d106      	bne.n	1794 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1786:	7894      	ldrb	r4, [r2, #2]
    1788:	2c00      	cmp	r4, #0
    178a:	d120      	bne.n	17ce <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    178c:	2480      	movs	r4, #128	; 0x80
    178e:	02a4      	lsls	r4, r4, #10
    1790:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1792:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1794:	7854      	ldrb	r4, [r2, #1]
    1796:	3c01      	subs	r4, #1
    1798:	2c01      	cmp	r4, #1
    179a:	d91c      	bls.n	17d6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    179c:	040d      	lsls	r5, r1, #16
    179e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17a0:	24a0      	movs	r4, #160	; 0xa0
    17a2:	05e4      	lsls	r4, r4, #23
    17a4:	432c      	orrs	r4, r5
    17a6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17a8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17aa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17ac:	24d0      	movs	r4, #208	; 0xd0
    17ae:	0624      	lsls	r4, r4, #24
    17b0:	432c      	orrs	r4, r5
    17b2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17b4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    17b6:	78d4      	ldrb	r4, [r2, #3]
    17b8:	2c00      	cmp	r4, #0
    17ba:	d122      	bne.n	1802 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    17bc:	035b      	lsls	r3, r3, #13
    17be:	d51c      	bpl.n	17fa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    17c0:	7893      	ldrb	r3, [r2, #2]
    17c2:	2b01      	cmp	r3, #1
    17c4:	d01e      	beq.n	1804 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    17c6:	6141      	str	r1, [r0, #20]
    17c8:	e017      	b.n	17fa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    17ca:	2300      	movs	r3, #0
    17cc:	e7d7      	b.n	177e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    17ce:	24c0      	movs	r4, #192	; 0xc0
    17d0:	02e4      	lsls	r4, r4, #11
    17d2:	4323      	orrs	r3, r4
    17d4:	e7dd      	b.n	1792 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    17d6:	4c0d      	ldr	r4, [pc, #52]	; (180c <_system_pinmux_config+0xa4>)
    17d8:	4023      	ands	r3, r4
    17da:	e7df      	b.n	179c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    17dc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17de:	040c      	lsls	r4, r1, #16
    17e0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17e2:	23a0      	movs	r3, #160	; 0xa0
    17e4:	05db      	lsls	r3, r3, #23
    17e6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17e8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17ea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17ec:	23d0      	movs	r3, #208	; 0xd0
    17ee:	061b      	lsls	r3, r3, #24
    17f0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17f2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    17f4:	78d3      	ldrb	r3, [r2, #3]
    17f6:	2b00      	cmp	r3, #0
    17f8:	d103      	bne.n	1802 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17fa:	7853      	ldrb	r3, [r2, #1]
    17fc:	3b01      	subs	r3, #1
    17fe:	2b01      	cmp	r3, #1
    1800:	d902      	bls.n	1808 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1802:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1804:	6181      	str	r1, [r0, #24]
    1806:	e7f8      	b.n	17fa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1808:	6081      	str	r1, [r0, #8]
}
    180a:	e7fa      	b.n	1802 <_system_pinmux_config+0x9a>
    180c:	fffbffff 	.word	0xfffbffff

00001810 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1810:	b510      	push	{r4, lr}
    1812:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1814:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1816:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1818:	2900      	cmp	r1, #0
    181a:	d104      	bne.n	1826 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    181c:	0943      	lsrs	r3, r0, #5
    181e:	01db      	lsls	r3, r3, #7
    1820:	4905      	ldr	r1, [pc, #20]	; (1838 <system_pinmux_pin_set_config+0x28>)
    1822:	468c      	mov	ip, r1
    1824:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1826:	241f      	movs	r4, #31
    1828:	4020      	ands	r0, r4
    182a:	2101      	movs	r1, #1
    182c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    182e:	0018      	movs	r0, r3
    1830:	4b02      	ldr	r3, [pc, #8]	; (183c <system_pinmux_pin_set_config+0x2c>)
    1832:	4798      	blx	r3
}
    1834:	bd10      	pop	{r4, pc}
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	41004400 	.word	0x41004400
    183c:	00001769 	.word	0x00001769

00001840 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1840:	4770      	bx	lr
	...

00001844 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1844:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1846:	4b05      	ldr	r3, [pc, #20]	; (185c <system_init+0x18>)
    1848:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    184a:	4b05      	ldr	r3, [pc, #20]	; (1860 <system_init+0x1c>)
    184c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    184e:	4b05      	ldr	r3, [pc, #20]	; (1864 <system_init+0x20>)
    1850:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1852:	4b05      	ldr	r3, [pc, #20]	; (1868 <system_init+0x24>)
    1854:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1856:	4b05      	ldr	r3, [pc, #20]	; (186c <system_init+0x28>)
    1858:	4798      	blx	r3
}
    185a:	bd10      	pop	{r4, pc}
    185c:	00001359 	.word	0x00001359
    1860:	000001f1 	.word	0x000001f1
    1864:	00001841 	.word	0x00001841
    1868:	00000775 	.word	0x00000775
    186c:	00001841 	.word	0x00001841

00001870 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1870:	1c93      	adds	r3, r2, #2
    1872:	009b      	lsls	r3, r3, #2
    1874:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1876:	2a02      	cmp	r2, #2
    1878:	d009      	beq.n	188e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    187a:	2a03      	cmp	r2, #3
    187c:	d00c      	beq.n	1898 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    187e:	2301      	movs	r3, #1
    1880:	4093      	lsls	r3, r2
    1882:	001a      	movs	r2, r3
    1884:	7e03      	ldrb	r3, [r0, #24]
    1886:	4313      	orrs	r3, r2
    1888:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    188a:	2000      	movs	r0, #0
    188c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    188e:	7e03      	ldrb	r3, [r0, #24]
    1890:	2210      	movs	r2, #16
    1892:	4313      	orrs	r3, r2
    1894:	7603      	strb	r3, [r0, #24]
    1896:	e7f8      	b.n	188a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1898:	7e03      	ldrb	r3, [r0, #24]
    189a:	2220      	movs	r2, #32
    189c:	4313      	orrs	r3, r2
    189e:	7603      	strb	r3, [r0, #24]
    18a0:	e7f3      	b.n	188a <tc_register_callback+0x1a>
	...

000018a4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    18a4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    18a6:	0080      	lsls	r0, r0, #2
    18a8:	4b16      	ldr	r3, [pc, #88]	; (1904 <_tc_interrupt_handler+0x60>)
    18aa:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    18ac:	6823      	ldr	r3, [r4, #0]
    18ae:	7b9d      	ldrb	r5, [r3, #14]
    18b0:	7e22      	ldrb	r2, [r4, #24]
    18b2:	7e63      	ldrb	r3, [r4, #25]
    18b4:	4013      	ands	r3, r2
    18b6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    18b8:	07eb      	lsls	r3, r5, #31
    18ba:	d406      	bmi.n	18ca <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    18bc:	07ab      	lsls	r3, r5, #30
    18be:	d40b      	bmi.n	18d8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    18c0:	06eb      	lsls	r3, r5, #27
    18c2:	d410      	bmi.n	18e6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    18c4:	06ab      	lsls	r3, r5, #26
    18c6:	d415      	bmi.n	18f4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    18c8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    18ca:	0020      	movs	r0, r4
    18cc:	68a3      	ldr	r3, [r4, #8]
    18ce:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    18d0:	2301      	movs	r3, #1
    18d2:	6822      	ldr	r2, [r4, #0]
    18d4:	7393      	strb	r3, [r2, #14]
    18d6:	e7f1      	b.n	18bc <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    18d8:	0020      	movs	r0, r4
    18da:	68e3      	ldr	r3, [r4, #12]
    18dc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    18de:	2302      	movs	r3, #2
    18e0:	6822      	ldr	r2, [r4, #0]
    18e2:	7393      	strb	r3, [r2, #14]
    18e4:	e7ec      	b.n	18c0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    18e6:	0020      	movs	r0, r4
    18e8:	6923      	ldr	r3, [r4, #16]
    18ea:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    18ec:	2310      	movs	r3, #16
    18ee:	6822      	ldr	r2, [r4, #0]
    18f0:	7393      	strb	r3, [r2, #14]
    18f2:	e7e7      	b.n	18c4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    18f4:	0020      	movs	r0, r4
    18f6:	6963      	ldr	r3, [r4, #20]
    18f8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    18fa:	6823      	ldr	r3, [r4, #0]
    18fc:	2220      	movs	r2, #32
    18fe:	739a      	strb	r2, [r3, #14]
}
    1900:	e7e2      	b.n	18c8 <_tc_interrupt_handler+0x24>
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	20000310 	.word	0x20000310

00001908 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1908:	b510      	push	{r4, lr}
    190a:	2000      	movs	r0, #0
    190c:	4b01      	ldr	r3, [pc, #4]	; (1914 <TC3_Handler+0xc>)
    190e:	4798      	blx	r3
    1910:	bd10      	pop	{r4, pc}
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	000018a5 	.word	0x000018a5

00001918 <TC4_Handler>:
    1918:	b510      	push	{r4, lr}
    191a:	2001      	movs	r0, #1
    191c:	4b01      	ldr	r3, [pc, #4]	; (1924 <TC4_Handler+0xc>)
    191e:	4798      	blx	r3
    1920:	bd10      	pop	{r4, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	000018a5 	.word	0x000018a5

00001928 <TC5_Handler>:
    1928:	b510      	push	{r4, lr}
    192a:	2002      	movs	r0, #2
    192c:	4b01      	ldr	r3, [pc, #4]	; (1934 <TC5_Handler+0xc>)
    192e:	4798      	blx	r3
    1930:	bd10      	pop	{r4, pc}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	000018a5 	.word	0x000018a5

00001938 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1938:	b530      	push	{r4, r5, lr}
    193a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    193c:	aa01      	add	r2, sp, #4
    193e:	4b0b      	ldr	r3, [pc, #44]	; (196c <_tc_get_inst_index+0x34>)
    1940:	cb32      	ldmia	r3!, {r1, r4, r5}
    1942:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1944:	9b01      	ldr	r3, [sp, #4]
    1946:	4298      	cmp	r0, r3
    1948:	d00d      	beq.n	1966 <_tc_get_inst_index+0x2e>
    194a:	9b02      	ldr	r3, [sp, #8]
    194c:	4298      	cmp	r0, r3
    194e:	d008      	beq.n	1962 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1950:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1952:	9a03      	ldr	r2, [sp, #12]
    1954:	4282      	cmp	r2, r0
    1956:	d002      	beq.n	195e <_tc_get_inst_index+0x26>
}
    1958:	0018      	movs	r0, r3
    195a:	b005      	add	sp, #20
    195c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    195e:	3302      	adds	r3, #2
    1960:	e002      	b.n	1968 <_tc_get_inst_index+0x30>
    1962:	2301      	movs	r3, #1
    1964:	e000      	b.n	1968 <_tc_get_inst_index+0x30>
    1966:	2300      	movs	r3, #0
			return i;
    1968:	b2db      	uxtb	r3, r3
    196a:	e7f5      	b.n	1958 <_tc_get_inst_index+0x20>
    196c:	00007f24 	.word	0x00007f24

00001970 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1970:	b5f0      	push	{r4, r5, r6, r7, lr}
    1972:	b087      	sub	sp, #28
    1974:	0004      	movs	r4, r0
    1976:	000d      	movs	r5, r1
    1978:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    197a:	0008      	movs	r0, r1
    197c:	4b85      	ldr	r3, [pc, #532]	; (1b94 <tc_init+0x224>)
    197e:	4798      	blx	r3
    1980:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1982:	ab05      	add	r3, sp, #20
    1984:	221b      	movs	r2, #27
    1986:	701a      	strb	r2, [r3, #0]
    1988:	3201      	adds	r2, #1
    198a:	705a      	strb	r2, [r3, #1]
    198c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    198e:	ab03      	add	r3, sp, #12
    1990:	2280      	movs	r2, #128	; 0x80
    1992:	0112      	lsls	r2, r2, #4
    1994:	801a      	strh	r2, [r3, #0]
    1996:	2280      	movs	r2, #128	; 0x80
    1998:	0152      	lsls	r2, r2, #5
    199a:	805a      	strh	r2, [r3, #2]
    199c:	2280      	movs	r2, #128	; 0x80
    199e:	0192      	lsls	r2, r2, #6
    19a0:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    19a2:	2300      	movs	r3, #0
    19a4:	60a3      	str	r3, [r4, #8]
    19a6:	60e3      	str	r3, [r4, #12]
    19a8:	6123      	str	r3, [r4, #16]
    19aa:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    19ac:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    19ae:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    19b0:	0082      	lsls	r2, r0, #2
    19b2:	4b79      	ldr	r3, [pc, #484]	; (1b98 <tc_init+0x228>)
    19b4:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    19b6:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    19b8:	78b3      	ldrb	r3, [r6, #2]
    19ba:	2b08      	cmp	r3, #8
    19bc:	d006      	beq.n	19cc <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    19be:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    19c0:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    19c2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    19c4:	07db      	lsls	r3, r3, #31
    19c6:	d505      	bpl.n	19d4 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    19c8:	b007      	add	sp, #28
    19ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    19cc:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    19ce:	07fa      	lsls	r2, r7, #31
    19d0:	d5fa      	bpl.n	19c8 <tc_init+0x58>
    19d2:	e7f4      	b.n	19be <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    19d4:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    19d6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    19d8:	06db      	lsls	r3, r3, #27
    19da:	d4f5      	bmi.n	19c8 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    19dc:	882b      	ldrh	r3, [r5, #0]
    19de:	079b      	lsls	r3, r3, #30
    19e0:	d4f2      	bmi.n	19c8 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    19e2:	7c33      	ldrb	r3, [r6, #16]
    19e4:	2b00      	cmp	r3, #0
    19e6:	d179      	bne.n	1adc <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    19e8:	7f33      	ldrb	r3, [r6, #28]
    19ea:	2b00      	cmp	r3, #0
    19ec:	d000      	beq.n	19f0 <tc_init+0x80>
    19ee:	e081      	b.n	1af4 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    19f0:	496a      	ldr	r1, [pc, #424]	; (1b9c <tc_init+0x22c>)
    19f2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    19f4:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    19f6:	ab03      	add	r3, sp, #12
    19f8:	5ad3      	ldrh	r3, [r2, r3]
    19fa:	4303      	orrs	r3, r0
    19fc:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    19fe:	78b3      	ldrb	r3, [r6, #2]
    1a00:	2b08      	cmp	r3, #8
    1a02:	d100      	bne.n	1a06 <tc_init+0x96>
    1a04:	e086      	b.n	1b14 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    1a06:	a901      	add	r1, sp, #4
    1a08:	7833      	ldrb	r3, [r6, #0]
    1a0a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1a0c:	ab05      	add	r3, sp, #20
    1a0e:	5ddf      	ldrb	r7, [r3, r7]
    1a10:	0038      	movs	r0, r7
    1a12:	4b63      	ldr	r3, [pc, #396]	; (1ba0 <tc_init+0x230>)
    1a14:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1a16:	0038      	movs	r0, r7
    1a18:	4b62      	ldr	r3, [pc, #392]	; (1ba4 <tc_init+0x234>)
    1a1a:	4798      	blx	r3
	ctrla_tmp =
    1a1c:	8931      	ldrh	r1, [r6, #8]
    1a1e:	88b3      	ldrh	r3, [r6, #4]
    1a20:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1a22:	78b1      	ldrb	r1, [r6, #2]
    1a24:	79b2      	ldrb	r2, [r6, #6]
    1a26:	4311      	orrs	r1, r2
	ctrla_tmp =
    1a28:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1a2a:	7873      	ldrb	r3, [r6, #1]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d002      	beq.n	1a36 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1a30:	2380      	movs	r3, #128	; 0x80
    1a32:	011b      	lsls	r3, r3, #4
    1a34:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a36:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a38:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a3a:	b25b      	sxtb	r3, r3
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	dbfb      	blt.n	1a38 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1a40:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1a42:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1a44:	1e4b      	subs	r3, r1, #1
    1a46:	4199      	sbcs	r1, r3
    1a48:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1a4a:	7bb3      	ldrb	r3, [r6, #14]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d001      	beq.n	1a54 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1a50:	2301      	movs	r3, #1
    1a52:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a54:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a56:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a58:	b25b      	sxtb	r3, r3
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	dbfb      	blt.n	1a56 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1a5e:	23ff      	movs	r3, #255	; 0xff
    1a60:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1a62:	2900      	cmp	r1, #0
    1a64:	d005      	beq.n	1a72 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a66:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a68:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1a6a:	b25b      	sxtb	r3, r3
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	dbfb      	blt.n	1a68 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1a70:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1a72:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1a74:	7af3      	ldrb	r3, [r6, #11]
    1a76:	2b00      	cmp	r3, #0
    1a78:	d001      	beq.n	1a7e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a7a:	2310      	movs	r3, #16
    1a7c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1a7e:	7b33      	ldrb	r3, [r6, #12]
    1a80:	2b00      	cmp	r3, #0
    1a82:	d001      	beq.n	1a88 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a84:	2320      	movs	r3, #32
    1a86:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a88:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a8a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a8c:	b25b      	sxtb	r3, r3
    1a8e:	2b00      	cmp	r3, #0
    1a90:	dbfb      	blt.n	1a8a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1a92:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a94:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a96:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a98:	b25b      	sxtb	r3, r3
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	dbfb      	blt.n	1a96 <tc_init+0x126>
	switch (module_inst->counter_size) {
    1a9e:	7923      	ldrb	r3, [r4, #4]
    1aa0:	2b04      	cmp	r3, #4
    1aa2:	d03f      	beq.n	1b24 <tc_init+0x1b4>
    1aa4:	2b08      	cmp	r3, #8
    1aa6:	d05e      	beq.n	1b66 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1aa8:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d000      	beq.n	1ab0 <tc_init+0x140>
    1aae:	e78b      	b.n	19c8 <tc_init+0x58>
    1ab0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ab2:	b25b      	sxtb	r3, r3
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	dbfb      	blt.n	1ab0 <tc_init+0x140>
				= config->counter_16_bit.value;
    1ab8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1aba:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1abc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1abe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ac0:	b25b      	sxtb	r3, r3
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	dbfb      	blt.n	1abe <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1ac6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1ac8:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1aca:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1acc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ace:	b25b      	sxtb	r3, r3
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	dbfb      	blt.n	1acc <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1ad4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1ad6:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1ad8:	2000      	movs	r0, #0
    1ada:	e775      	b.n	19c8 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1adc:	a902      	add	r1, sp, #8
    1ade:	2301      	movs	r3, #1
    1ae0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1ae2:	2200      	movs	r2, #0
    1ae4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1ae6:	7e32      	ldrb	r2, [r6, #24]
    1ae8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1aea:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1aec:	7d30      	ldrb	r0, [r6, #20]
    1aee:	4b2e      	ldr	r3, [pc, #184]	; (1ba8 <tc_init+0x238>)
    1af0:	4798      	blx	r3
    1af2:	e779      	b.n	19e8 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1af4:	a902      	add	r1, sp, #8
    1af6:	2301      	movs	r3, #1
    1af8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1afa:	2200      	movs	r2, #0
    1afc:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1afe:	3224      	adds	r2, #36	; 0x24
    1b00:	18b2      	adds	r2, r6, r2
    1b02:	7812      	ldrb	r2, [r2, #0]
    1b04:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b06:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1b08:	331f      	adds	r3, #31
    1b0a:	18f3      	adds	r3, r6, r3
    1b0c:	7818      	ldrb	r0, [r3, #0]
    1b0e:	4b26      	ldr	r3, [pc, #152]	; (1ba8 <tc_init+0x238>)
    1b10:	4798      	blx	r3
    1b12:	e76d      	b.n	19f0 <tc_init+0x80>
    1b14:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1b16:	1c7a      	adds	r2, r7, #1
    1b18:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1b1a:	ab03      	add	r3, sp, #12
    1b1c:	5ad3      	ldrh	r3, [r2, r3]
    1b1e:	4303      	orrs	r3, r0
    1b20:	620b      	str	r3, [r1, #32]
    1b22:	e770      	b.n	1a06 <tc_init+0x96>
    1b24:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b26:	b25b      	sxtb	r3, r3
    1b28:	2b00      	cmp	r3, #0
    1b2a:	dbfb      	blt.n	1b24 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1b2c:	2328      	movs	r3, #40	; 0x28
    1b2e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1b30:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b32:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b34:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b36:	b25b      	sxtb	r3, r3
    1b38:	2b00      	cmp	r3, #0
    1b3a:	dbfb      	blt.n	1b34 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1b3c:	2329      	movs	r3, #41	; 0x29
    1b3e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1b40:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b42:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b44:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b46:	b25b      	sxtb	r3, r3
    1b48:	2b00      	cmp	r3, #0
    1b4a:	dbfb      	blt.n	1b44 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1b4c:	232a      	movs	r3, #42	; 0x2a
    1b4e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1b50:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b54:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b56:	b25b      	sxtb	r3, r3
    1b58:	2b00      	cmp	r3, #0
    1b5a:	dbfb      	blt.n	1b54 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1b5c:	232b      	movs	r3, #43	; 0x2b
    1b5e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1b60:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1b62:	2000      	movs	r0, #0
    1b64:	e730      	b.n	19c8 <tc_init+0x58>
    1b66:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b68:	b25b      	sxtb	r3, r3
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	dbfb      	blt.n	1b66 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1b6e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b70:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b72:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b74:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b76:	b25b      	sxtb	r3, r3
    1b78:	2b00      	cmp	r3, #0
    1b7a:	dbfb      	blt.n	1b74 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1b7c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1b7e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b80:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b82:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b84:	b25b      	sxtb	r3, r3
    1b86:	2b00      	cmp	r3, #0
    1b88:	dbfb      	blt.n	1b82 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1b8a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1b8c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1b8e:	2000      	movs	r0, #0
    1b90:	e71a      	b.n	19c8 <tc_init+0x58>
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	00001939 	.word	0x00001939
    1b98:	20000310 	.word	0x20000310
    1b9c:	40000400 	.word	0x40000400
    1ba0:	00001719 	.word	0x00001719
    1ba4:	0000168d 	.word	0x0000168d
    1ba8:	00001811 	.word	0x00001811

00001bac <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1bac:	6802      	ldr	r2, [r0, #0]
    1bae:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1bb0:	b25b      	sxtb	r3, r3
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	dbfb      	blt.n	1bae <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1bb6:	7903      	ldrb	r3, [r0, #4]
    1bb8:	2b04      	cmp	r3, #4
    1bba:	d005      	beq.n	1bc8 <tc_get_count_value+0x1c>
    1bbc:	2b08      	cmp	r3, #8
    1bbe:	d009      	beq.n	1bd4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1bc0:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d003      	beq.n	1bce <tc_get_count_value+0x22>
}
    1bc6:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1bc8:	7c10      	ldrb	r0, [r2, #16]
    1bca:	b2c0      	uxtb	r0, r0
    1bcc:	e7fb      	b.n	1bc6 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1bce:	8a10      	ldrh	r0, [r2, #16]
    1bd0:	b280      	uxth	r0, r0
    1bd2:	e7f8      	b.n	1bc6 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    1bd4:	6910      	ldr	r0, [r2, #16]
    1bd6:	e7f6      	b.n	1bc6 <tc_get_count_value+0x1a>

00001bd8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1bd8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1bda:	6804      	ldr	r4, [r0, #0]
    1bdc:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1bde:	b25b      	sxtb	r3, r3
    1be0:	2b00      	cmp	r3, #0
    1be2:	dbfb      	blt.n	1bdc <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1be4:	7903      	ldrb	r3, [r0, #4]
    1be6:	2b04      	cmp	r3, #4
    1be8:	d005      	beq.n	1bf6 <tc_set_compare_value+0x1e>
    1bea:	2b08      	cmp	r3, #8
    1bec:	d014      	beq.n	1c18 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1bee:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d008      	beq.n	1c06 <tc_set_compare_value+0x2e>
}
    1bf4:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1bf6:	2017      	movs	r0, #23
			if (channel_index <
    1bf8:	2901      	cmp	r1, #1
    1bfa:	d8fb      	bhi.n	1bf4 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    1bfc:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1bfe:	1861      	adds	r1, r4, r1
    1c00:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1c02:	2000      	movs	r0, #0
    1c04:	e7f6      	b.n	1bf4 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1c06:	2017      	movs	r0, #23
			if (channel_index <
    1c08:	2901      	cmp	r1, #1
    1c0a:	d8f3      	bhi.n	1bf4 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    1c0c:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1c0e:	310c      	adds	r1, #12
    1c10:	0049      	lsls	r1, r1, #1
    1c12:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    1c14:	2000      	movs	r0, #0
    1c16:	e7ed      	b.n	1bf4 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1c18:	2017      	movs	r0, #23
			if (channel_index <
    1c1a:	2901      	cmp	r1, #1
    1c1c:	d8ea      	bhi.n	1bf4 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    1c1e:	3106      	adds	r1, #6
    1c20:	0089      	lsls	r1, r1, #2
    1c22:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    1c24:	2000      	movs	r0, #0
    1c26:	e7e5      	b.n	1bf4 <tc_set_compare_value+0x1c>

00001c28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1c28:	e7fe      	b.n	1c28 <Dummy_Handler>
	...

00001c2c <Reset_Handler>:
{
    1c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1c2e:	4a2a      	ldr	r2, [pc, #168]	; (1cd8 <Reset_Handler+0xac>)
    1c30:	4b2a      	ldr	r3, [pc, #168]	; (1cdc <Reset_Handler+0xb0>)
    1c32:	429a      	cmp	r2, r3
    1c34:	d011      	beq.n	1c5a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1c36:	001a      	movs	r2, r3
    1c38:	4b29      	ldr	r3, [pc, #164]	; (1ce0 <Reset_Handler+0xb4>)
    1c3a:	429a      	cmp	r2, r3
    1c3c:	d20d      	bcs.n	1c5a <Reset_Handler+0x2e>
    1c3e:	4a29      	ldr	r2, [pc, #164]	; (1ce4 <Reset_Handler+0xb8>)
    1c40:	3303      	adds	r3, #3
    1c42:	1a9b      	subs	r3, r3, r2
    1c44:	089b      	lsrs	r3, r3, #2
    1c46:	3301      	adds	r3, #1
    1c48:	009b      	lsls	r3, r3, #2
    1c4a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1c4c:	4823      	ldr	r0, [pc, #140]	; (1cdc <Reset_Handler+0xb0>)
    1c4e:	4922      	ldr	r1, [pc, #136]	; (1cd8 <Reset_Handler+0xac>)
    1c50:	588c      	ldr	r4, [r1, r2]
    1c52:	5084      	str	r4, [r0, r2]
    1c54:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1c56:	429a      	cmp	r2, r3
    1c58:	d1fa      	bne.n	1c50 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1c5a:	4a23      	ldr	r2, [pc, #140]	; (1ce8 <Reset_Handler+0xbc>)
    1c5c:	4b23      	ldr	r3, [pc, #140]	; (1cec <Reset_Handler+0xc0>)
    1c5e:	429a      	cmp	r2, r3
    1c60:	d20a      	bcs.n	1c78 <Reset_Handler+0x4c>
    1c62:	43d3      	mvns	r3, r2
    1c64:	4921      	ldr	r1, [pc, #132]	; (1cec <Reset_Handler+0xc0>)
    1c66:	185b      	adds	r3, r3, r1
    1c68:	2103      	movs	r1, #3
    1c6a:	438b      	bics	r3, r1
    1c6c:	3304      	adds	r3, #4
    1c6e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1c70:	2100      	movs	r1, #0
    1c72:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1c74:	4293      	cmp	r3, r2
    1c76:	d1fc      	bne.n	1c72 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c78:	4a1d      	ldr	r2, [pc, #116]	; (1cf0 <Reset_Handler+0xc4>)
    1c7a:	21ff      	movs	r1, #255	; 0xff
    1c7c:	4b1d      	ldr	r3, [pc, #116]	; (1cf4 <Reset_Handler+0xc8>)
    1c7e:	438b      	bics	r3, r1
    1c80:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c82:	39fd      	subs	r1, #253	; 0xfd
    1c84:	2390      	movs	r3, #144	; 0x90
    1c86:	005b      	lsls	r3, r3, #1
    1c88:	4a1b      	ldr	r2, [pc, #108]	; (1cf8 <Reset_Handler+0xcc>)
    1c8a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c8c:	4a1b      	ldr	r2, [pc, #108]	; (1cfc <Reset_Handler+0xd0>)
    1c8e:	78d3      	ldrb	r3, [r2, #3]
    1c90:	2503      	movs	r5, #3
    1c92:	43ab      	bics	r3, r5
    1c94:	2402      	movs	r4, #2
    1c96:	4323      	orrs	r3, r4
    1c98:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c9a:	78d3      	ldrb	r3, [r2, #3]
    1c9c:	270c      	movs	r7, #12
    1c9e:	43bb      	bics	r3, r7
    1ca0:	2608      	movs	r6, #8
    1ca2:	4333      	orrs	r3, r6
    1ca4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1ca6:	4b16      	ldr	r3, [pc, #88]	; (1d00 <Reset_Handler+0xd4>)
    1ca8:	7b98      	ldrb	r0, [r3, #14]
    1caa:	2230      	movs	r2, #48	; 0x30
    1cac:	4390      	bics	r0, r2
    1cae:	2220      	movs	r2, #32
    1cb0:	4310      	orrs	r0, r2
    1cb2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1cb4:	7b99      	ldrb	r1, [r3, #14]
    1cb6:	43b9      	bics	r1, r7
    1cb8:	4331      	orrs	r1, r6
    1cba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1cbc:	7b9a      	ldrb	r2, [r3, #14]
    1cbe:	43aa      	bics	r2, r5
    1cc0:	4322      	orrs	r2, r4
    1cc2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1cc4:	4a0f      	ldr	r2, [pc, #60]	; (1d04 <Reset_Handler+0xd8>)
    1cc6:	6853      	ldr	r3, [r2, #4]
    1cc8:	2180      	movs	r1, #128	; 0x80
    1cca:	430b      	orrs	r3, r1
    1ccc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1cce:	4b0e      	ldr	r3, [pc, #56]	; (1d08 <Reset_Handler+0xdc>)
    1cd0:	4798      	blx	r3
        main();
    1cd2:	4b0e      	ldr	r3, [pc, #56]	; (1d0c <Reset_Handler+0xe0>)
    1cd4:	4798      	blx	r3
    1cd6:	e7fe      	b.n	1cd6 <Reset_Handler+0xaa>
    1cd8:	0000801c 	.word	0x0000801c
    1cdc:	20000000 	.word	0x20000000
    1ce0:	200000bc 	.word	0x200000bc
    1ce4:	20000004 	.word	0x20000004
    1ce8:	200000c0 	.word	0x200000c0
    1cec:	20001334 	.word	0x20001334
    1cf0:	e000ed00 	.word	0xe000ed00
    1cf4:	00000000 	.word	0x00000000
    1cf8:	41007000 	.word	0x41007000
    1cfc:	41005000 	.word	0x41005000
    1d00:	41004800 	.word	0x41004800
    1d04:	41004000 	.word	0x41004000
    1d08:	000074e9 	.word	0x000074e9
    1d0c:	00003fa1 	.word	0x00003fa1

00001d10 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1d10:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1d12:	4a06      	ldr	r2, [pc, #24]	; (1d2c <_sbrk+0x1c>)
    1d14:	6812      	ldr	r2, [r2, #0]
    1d16:	2a00      	cmp	r2, #0
    1d18:	d004      	beq.n	1d24 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1d1a:	4a04      	ldr	r2, [pc, #16]	; (1d2c <_sbrk+0x1c>)
    1d1c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1d1e:	18c3      	adds	r3, r0, r3
    1d20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1d22:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1d24:	4902      	ldr	r1, [pc, #8]	; (1d30 <_sbrk+0x20>)
    1d26:	4a01      	ldr	r2, [pc, #4]	; (1d2c <_sbrk+0x1c>)
    1d28:	6011      	str	r1, [r2, #0]
    1d2a:	e7f6      	b.n	1d1a <_sbrk+0xa>
    1d2c:	20000118 	.word	0x20000118
    1d30:	20003338 	.word	0x20003338

00001d34 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    1d34:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    1d36:	7802      	ldrb	r2, [r0, #0]
    1d38:	4b08      	ldr	r3, [pc, #32]	; (1d5c <MiMAC_SetAltAddress+0x28>)
    1d3a:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    1d3c:	7842      	ldrb	r2, [r0, #1]
    1d3e:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    1d40:	780a      	ldrb	r2, [r1, #0]
    1d42:	4c07      	ldr	r4, [pc, #28]	; (1d60 <MiMAC_SetAltAddress+0x2c>)
    1d44:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    1d46:	784a      	ldrb	r2, [r1, #1]
    1d48:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    1d4a:	8818      	ldrh	r0, [r3, #0]
    1d4c:	4b05      	ldr	r3, [pc, #20]	; (1d64 <MiMAC_SetAltAddress+0x30>)
    1d4e:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    1d50:	8820      	ldrh	r0, [r4, #0]
    1d52:	4b05      	ldr	r3, [pc, #20]	; (1d68 <MiMAC_SetAltAddress+0x34>)
    1d54:	4798      	blx	r3
	return true;
}
    1d56:	2001      	movs	r0, #1
    1d58:	bd10      	pop	{r4, pc}
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	20000320 	.word	0x20000320
    1d60:	20000338 	.word	0x20000338
    1d64:	0000263d 	.word	0x0000263d
    1d68:	0000261d 	.word	0x0000261d

00001d6c <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    1d6c:	b510      	push	{r4, lr}
    switch(id)
    1d6e:	2800      	cmp	r0, #0
    1d70:	d109      	bne.n	1d86 <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    1d72:	780b      	ldrb	r3, [r1, #0]
    1d74:	2b1a      	cmp	r3, #26
    1d76:	d807      	bhi.n	1d88 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    1d78:	4a04      	ldr	r2, [pc, #16]	; (1d8c <MiMAC_Set+0x20>)
    1d7a:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    1d7c:	0018      	movs	r0, r3
    1d7e:	4b04      	ldr	r3, [pc, #16]	; (1d90 <MiMAC_Set+0x24>)
    1d80:	4798      	blx	r3
          return true;
    1d82:	2001      	movs	r0, #1
    1d84:	e000      	b.n	1d88 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    1d86:	2000      	movs	r0, #0
}
    1d88:	bd10      	pop	{r4, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	2000033a 	.word	0x2000033a
    1d90:	000025f9 	.word	0x000025f9

00001d94 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    1d94:	b530      	push	{r4, r5, lr}
    1d96:	b083      	sub	sp, #12
    1d98:	466c      	mov	r4, sp
    1d9a:	9000      	str	r0, [sp, #0]
    1d9c:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    1d9e:	4b10      	ldr	r3, [pc, #64]	; (1de0 <MiMAC_Init+0x4c>)
    1da0:	4798      	blx	r3
	MACInitParams = initValue;
    1da2:	4d10      	ldr	r5, [pc, #64]	; (1de4 <MiMAC_Init+0x50>)
    1da4:	002b      	movs	r3, r5
    1da6:	cc06      	ldmia	r4!, {r1, r2}
    1da8:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    1daa:	4b0f      	ldr	r3, [pc, #60]	; (1de8 <MiMAC_Init+0x54>)
    1dac:	4798      	blx	r3
    1dae:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    1db0:	2001      	movs	r0, #1
    1db2:	4b0e      	ldr	r3, [pc, #56]	; (1dec <MiMAC_Init+0x58>)
    1db4:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    1db6:	4b0e      	ldr	r3, [pc, #56]	; (1df0 <MiMAC_Init+0x5c>)
    1db8:	701c      	strb	r4, [r3, #0]

	MACCurrentChannel = 11;
    1dba:	220b      	movs	r2, #11
    1dbc:	4b0d      	ldr	r3, [pc, #52]	; (1df4 <MiMAC_Init+0x60>)
    1dbe:	701a      	strb	r2, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    1dc0:	6868      	ldr	r0, [r5, #4]
    1dc2:	4b0d      	ldr	r3, [pc, #52]	; (1df8 <MiMAC_Init+0x64>)
    1dc4:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    1dc6:	4b0d      	ldr	r3, [pc, #52]	; (1dfc <MiMAC_Init+0x68>)
    1dc8:	2200      	movs	r2, #0
    1dca:	701a      	strb	r2, [r3, #0]
    1dcc:	217f      	movs	r1, #127	; 0x7f
    1dce:	545a      	strb	r2, [r3, r1]
    1dd0:	317f      	adds	r1, #127	; 0x7f
    1dd2:	545a      	strb	r2, [r3, r1]
    1dd4:	217e      	movs	r1, #126	; 0x7e
    1dd6:	31ff      	adds	r1, #255	; 0xff
    1dd8:	545a      	strb	r2, [r3, r1]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    1dda:	2001      	movs	r0, #1
    1ddc:	b003      	add	sp, #12
    1dde:	bd30      	pop	{r4, r5, pc}
    1de0:	00002599 	.word	0x00002599
    1de4:	20000328 	.word	0x20000328
    1de8:	00002549 	.word	0x00002549
    1dec:	000025e5 	.word	0x000025e5
    1df0:	2000031c 	.word	0x2000031c
    1df4:	2000033a 	.word	0x2000033a
    1df8:	0000268d 	.word	0x0000268d
    1dfc:	2000033c 	.word	0x2000033c

00001e00 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    1e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e02:	46de      	mov	lr, fp
    1e04:	4657      	mov	r7, sl
    1e06:	464e      	mov	r6, r9
    1e08:	4645      	mov	r5, r8
    1e0a:	b5e0      	push	{r5, r6, r7, lr}
    1e0c:	b0a5      	sub	sp, #148	; 0x94
    1e0e:	9001      	str	r0, [sp, #4]
    1e10:	000e      	movs	r6, r1
    1e12:	9102      	str	r1, [sp, #8]
    1e14:	1c11      	adds	r1, r2, #0
    1e16:	0014      	movs	r4, r2
    1e18:	0a24      	lsrs	r4, r4, #8
    1e1a:	9203      	str	r2, [sp, #12]
    1e1c:	9300      	str	r3, [sp, #0]
    1e1e:	aa2e      	add	r2, sp, #184	; 0xb8
    1e20:	7815      	ldrb	r5, [r2, #0]
    1e22:	aa2f      	add	r2, sp, #188	; 0xbc
    1e24:	7813      	ldrb	r3, [r2, #0]
    1e26:	469b      	mov	fp, r3
    1e28:	b2c7      	uxtb	r7, r0
    1e2a:	06b8      	lsls	r0, r7, #26
    1e2c:	0fc3      	lsrs	r3, r0, #31
    1e2e:	4699      	mov	r9, r3
    1e30:	b2c9      	uxtb	r1, r1
    1e32:	b2e2      	uxtb	r2, r4
	uint8_t frameControl = 0;
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif

    if (transParam.flags.bits.broadcast)
    1e34:	077b      	lsls	r3, r7, #29
    1e36:	d500      	bpl.n	1e3a <MiMAC_SendPacket+0x3a>
    {
        transParam.altDestAddr = true;
    1e38:	2101      	movs	r1, #1
        transParam.altSrcAddr = false;
    }
   #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    1e3a:	2303      	movs	r3, #3
    1e3c:	403b      	ands	r3, r7
    1e3e:	2b01      	cmp	r3, #1
    1e40:	d03b      	beq.n	1eba <MiMAC_SendPacket+0xba>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    1e42:	425c      	negs	r4, r3
    1e44:	415c      	adcs	r4, r3
        frameControl = 0x03;
    1e46:	b2e0      	uxtb	r0, r4
    1e48:	4682      	mov	sl, r0
        frameControl = 0x01;
    }

    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1e4a:	ac01      	add	r4, sp, #4
    1e4c:	8964      	ldrh	r4, [r4, #10]
    1e4e:	487b      	ldr	r0, [pc, #492]	; (203c <STACK_SIZE+0x3c>)
    1e50:	8800      	ldrh	r0, [r0, #0]
    1e52:	42a0      	cmp	r0, r4
    1e54:	d034      	beq.n	1ec0 <MiMAC_SendPacket+0xc0>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    1e56:	2400      	movs	r4, #0
        headerLength = 7;
    1e58:	2007      	movs	r0, #7
    1e5a:	4684      	mov	ip, r0
    }
#endif

    if (transParam.altDestAddr)
    1e5c:	4688      	mov	r8, r1
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    1e5e:	4661      	mov	r1, ip
    1e60:	3108      	adds	r1, #8
    if (transParam.altDestAddr)
    1e62:	4640      	mov	r0, r8
    1e64:	2800      	cmp	r0, #0
    1e66:	d000      	beq.n	1e6a <MiMAC_SendPacket+0x6a>
        headerLength += 2;
    1e68:	3906      	subs	r1, #6
    }

    if (transParam.altSrcAddr)
    1e6a:	2a00      	cmp	r2, #0
    1e6c:	d037      	beq.n	1ede <MiMAC_SendPacket+0xde>
    {
        headerLength += 2;
    1e6e:	3102      	adds	r1, #2
    1e70:	b2c9      	uxtb	r1, r1
    1e72:	468c      	mov	ip, r1
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    1e74:	2124      	movs	r1, #36	; 0x24
    1e76:	4039      	ands	r1, r7
    1e78:	2920      	cmp	r1, #32
    1e7a:	d034      	beq.n	1ee6 <MiMAC_SendPacket+0xe6>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    1e7c:	2b03      	cmp	r3, #3
    1e7e:	d036      	beq.n	1eee <MiMAC_SendPacket+0xee>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    1e80:	a904      	add	r1, sp, #16
    1e82:	44ac      	add	ip, r5
    1e84:	4663      	mov	r3, ip
    1e86:	700b      	strb	r3, [r1, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    1e88:	4653      	mov	r3, sl
    1e8a:	704b      	strb	r3, [r1, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    1e8c:	a901      	add	r1, sp, #4
    1e8e:	464b      	mov	r3, r9
    1e90:	015b      	lsls	r3, r3, #5
    1e92:	469c      	mov	ip, r3
    1e94:	7808      	ldrb	r0, [r1, #0]
    1e96:	2320      	movs	r3, #32
    1e98:	4398      	bics	r0, r3
    1e9a:	4663      	mov	r3, ip
    1e9c:	4318      	orrs	r0, r3
    1e9e:	7008      	strb	r0, [r1, #0]
    1ea0:	4684      	mov	ip, r0
    1ea2:	43c1      	mvns	r1, r0
    1ea4:	078b      	lsls	r3, r1, #30
    1ea6:	d02a      	beq.n	1efe <MiMAC_SendPacket+0xfe>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    1ea8:	4643      	mov	r3, r8
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d049      	beq.n	1f42 <MiMAC_SendPacket+0x142>
    1eae:	2a00      	cmp	r2, #0
    1eb0:	d02f      	beq.n	1f12 <MiMAC_SendPacket+0x112>
        {
			packet[loc++] = 0x88;
    1eb2:	2088      	movs	r0, #136	; 0x88
    1eb4:	a904      	add	r1, sp, #16
    1eb6:	7088      	strb	r0, [r1, #2]
    1eb8:	e02e      	b.n	1f18 <MiMAC_SendPacket+0x118>
        frameControl = 0x03;
    1eba:	2003      	movs	r0, #3
    1ebc:	4682      	mov	sl, r0
    1ebe:	e7c4      	b.n	1e4a <MiMAC_SendPacket+0x4a>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1ec0:	485f      	ldr	r0, [pc, #380]	; (2040 <STACK_SIZE+0x40>)
    1ec2:	4284      	cmp	r4, r0
    1ec4:	d007      	beq.n	1ed6 <MiMAC_SendPacket+0xd6>
        frameControl |= 0x40;
    1ec6:	2440      	movs	r4, #64	; 0x40
    1ec8:	4650      	mov	r0, sl
    1eca:	4320      	orrs	r0, r4
    1ecc:	4682      	mov	sl, r0
        IntraPAN = true;
    1ece:	3c3f      	subs	r4, #63	; 0x3f
        headerLength = 5;
    1ed0:	2005      	movs	r0, #5
    1ed2:	4684      	mov	ip, r0
        IntraPAN = true;
    1ed4:	e7c2      	b.n	1e5c <MiMAC_SendPacket+0x5c>
        IntraPAN = false;
    1ed6:	2400      	movs	r4, #0
        headerLength = 7;
    1ed8:	2007      	movs	r0, #7
    1eda:	4684      	mov	ip, r0
    1edc:	e7be      	b.n	1e5c <MiMAC_SendPacket+0x5c>
        headerLength += 8;
    1ede:	3108      	adds	r1, #8
    1ee0:	b2c9      	uxtb	r1, r1
    1ee2:	468c      	mov	ip, r1
    1ee4:	e7c6      	b.n	1e74 <MiMAC_SendPacket+0x74>
        frameControl |= 0x20;
    1ee6:	4650      	mov	r0, sl
    1ee8:	4308      	orrs	r0, r1
    1eea:	4682      	mov	sl, r0
    1eec:	e7c6      	b.n	1e7c <MiMAC_SendPacket+0x7c>
        transParam.altSrcAddr = true;
    1eee:	2201      	movs	r2, #1
        transParam.flags.bits.ackReq = false;
    1ef0:	2300      	movs	r3, #0
    1ef2:	4699      	mov	r9, r3
        IntraPAN = false;
    1ef4:	2400      	movs	r4, #0
        frameControl = 0x00;
    1ef6:	469a      	mov	sl, r3
        headerLength = 7;
    1ef8:	3307      	adds	r3, #7
    1efa:	469c      	mov	ip, r3
    1efc:	e7c0      	b.n	1e80 <MiMAC_SendPacket+0x80>
		packet[loc++] = 0x80;
    1efe:	a904      	add	r1, sp, #16
    1f00:	2080      	movs	r0, #128	; 0x80
    1f02:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    1f04:	4e4f      	ldr	r6, [pc, #316]	; (2044 <STACK_SIZE+0x44>)
    1f06:	7830      	ldrb	r0, [r6, #0]
    1f08:	1c43      	adds	r3, r0, #1
    1f0a:	7033      	strb	r3, [r6, #0]
    1f0c:	70c8      	strb	r0, [r1, #3]
    1f0e:	2104      	movs	r1, #4
    1f10:	e02e      	b.n	1f70 <MiMAC_SendPacket+0x170>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    1f12:	20c8      	movs	r0, #200	; 0xc8
    1f14:	a904      	add	r1, sp, #16
    1f16:	7088      	strb	r0, [r1, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    1f18:	494a      	ldr	r1, [pc, #296]	; (2044 <STACK_SIZE+0x44>)
    1f1a:	7808      	ldrb	r0, [r1, #0]
    1f1c:	1c43      	adds	r3, r0, #1
    1f1e:	700b      	strb	r3, [r1, #0]
    1f20:	a904      	add	r1, sp, #16
    1f22:	70c8      	strb	r0, [r1, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    1f24:	a801      	add	r0, sp, #4
    1f26:	7a83      	ldrb	r3, [r0, #10]
    1f28:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    1f2a:	7ac0      	ldrb	r0, [r0, #11]
    1f2c:	7148      	strb	r0, [r1, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    1f2e:	4663      	mov	r3, ip
    1f30:	075b      	lsls	r3, r3, #29
    1f32:	d418      	bmi.n	1f66 <MiMAC_SendPacket+0x166>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    1f34:	a904      	add	r1, sp, #16
    1f36:	7830      	ldrb	r0, [r6, #0]
    1f38:	7188      	strb	r0, [r1, #6]
				packet[loc++] = transParam.DestAddress[1];
    1f3a:	7870      	ldrb	r0, [r6, #1]
    1f3c:	71c8      	strb	r0, [r1, #7]
    1f3e:	2108      	movs	r1, #8
    1f40:	e016      	b.n	1f70 <MiMAC_SendPacket+0x170>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    1f42:	2a00      	cmp	r2, #0
    1f44:	d05c      	beq.n	2000 <STACK_SIZE>
			packet[loc++] = 0x8C;
    1f46:	a904      	add	r1, sp, #16
    1f48:	208c      	movs	r0, #140	; 0x8c
    1f4a:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    1f4c:	4b3d      	ldr	r3, [pc, #244]	; (2044 <STACK_SIZE+0x44>)
    1f4e:	7818      	ldrb	r0, [r3, #0]
    1f50:	1c47      	adds	r7, r0, #1
    1f52:	701f      	strb	r7, [r3, #0]
    1f54:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    1f56:	ab01      	add	r3, sp, #4
    1f58:	7a98      	ldrb	r0, [r3, #10]
    1f5a:	7108      	strb	r0, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    1f5c:	7ad8      	ldrb	r0, [r3, #11]
    1f5e:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    1f60:	4663      	mov	r3, ip
    1f62:	075b      	lsls	r3, r3, #29
    1f64:	d560      	bpl.n	2028 <STACK_SIZE+0x28>
			packet[loc++] = 0xFF;
    1f66:	a904      	add	r1, sp, #16
    1f68:	20ff      	movs	r0, #255	; 0xff
    1f6a:	7188      	strb	r0, [r1, #6]
			packet[loc++] = 0xFF;
    1f6c:	71c8      	strb	r0, [r1, #7]
    1f6e:	2108      	movs	r1, #8
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    1f70:	2c00      	cmp	r4, #0
    1f72:	d109      	bne.n	1f88 <MiMAC_SendPacket+0x188>
    {
		packet[loc++] = MAC_PANID.v[0];
    1f74:	1c48      	adds	r0, r1, #1
    1f76:	b2c0      	uxtb	r0, r0
    1f78:	ac04      	add	r4, sp, #16
    1f7a:	4e30      	ldr	r6, [pc, #192]	; (203c <STACK_SIZE+0x3c>)
    1f7c:	7833      	ldrb	r3, [r6, #0]
    1f7e:	5463      	strb	r3, [r4, r1]
		packet[loc++] = MAC_PANID.v[1];
    1f80:	3102      	adds	r1, #2
    1f82:	b2c9      	uxtb	r1, r1
    1f84:	7876      	ldrb	r6, [r6, #1]
    1f86:	5426      	strb	r6, [r4, r0]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    1f88:	2a00      	cmp	r2, #0
    1f8a:	d02a      	beq.n	1fe2 <MiMAC_SendPacket+0x1e2>
    {
		packet[loc++] = myNetworkAddress.v[0];
    1f8c:	a804      	add	r0, sp, #16
    1f8e:	4c2e      	ldr	r4, [pc, #184]	; (2048 <STACK_SIZE+0x48>)
    1f90:	7822      	ldrb	r2, [r4, #0]
    1f92:	5442      	strb	r2, [r0, r1]
		packet[loc++] = myNetworkAddress.v[1];
    1f94:	1c8a      	adds	r2, r1, #2
    1f96:	b2d2      	uxtb	r2, r2
		packet[loc++] = myNetworkAddress.v[0];
    1f98:	3101      	adds	r1, #1
		packet[loc++] = myNetworkAddress.v[1];
    1f9a:	b2c9      	uxtb	r1, r1
    1f9c:	7864      	ldrb	r4, [r4, #1]
    1f9e:	5444      	strb	r4, [r0, r1]
#endif


#ifndef ENABLE_SECURITY
    // write the payload
    for (i = 0; i < MACPayloadLen; i++)
    1fa0:	2d00      	cmp	r5, #0
    1fa2:	d00a      	beq.n	1fba <MiMAC_SendPacket+0x1ba>
    1fa4:	9900      	ldr	r1, [sp, #0]
    1fa6:	1955      	adds	r5, r2, r5
    1fa8:	b2ed      	uxtb	r5, r5
    {
		packet[loc++] = MACPayload[i];
    1faa:	ae04      	add	r6, sp, #16
    1fac:	1c50      	adds	r0, r2, #1
    1fae:	780c      	ldrb	r4, [r1, #0]
    1fb0:	54b4      	strb	r4, [r6, r2]
    1fb2:	3101      	adds	r1, #1
    1fb4:	b2c2      	uxtb	r2, r0
    for (i = 0; i < MACPayloadLen; i++)
    1fb6:	4295      	cmp	r5, r2
    1fb8:	d1f8      	bne.n	1fac <MiMAC_SendPacket+0x1ac>
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    1fba:	4a24      	ldr	r2, [pc, #144]	; (204c <STACK_SIZE+0x4c>)
    1fbc:	9b00      	ldr	r3, [sp, #0]
    1fbe:	6013      	str	r3, [r2, #0]
	dataConfCallback = ConfCallback;
    1fc0:	4b23      	ldr	r3, [pc, #140]	; (2050 <STACK_SIZE+0x50>)
    1fc2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    1fc4:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    1fc6:	4b23      	ldr	r3, [pc, #140]	; (2054 <STACK_SIZE+0x54>)
    1fc8:	465a      	mov	r2, fp
    1fca:	701a      	strb	r2, [r3, #0]

    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
    1fcc:	a804      	add	r0, sp, #16
    1fce:	4b22      	ldr	r3, [pc, #136]	; (2058 <STACK_SIZE+0x58>)
    1fd0:	4798      	blx	r3
    return true;
}
    1fd2:	2001      	movs	r0, #1
    1fd4:	b025      	add	sp, #148	; 0x94
    1fd6:	bc3c      	pop	{r2, r3, r4, r5}
    1fd8:	4690      	mov	r8, r2
    1fda:	4699      	mov	r9, r3
    1fdc:	46a2      	mov	sl, r4
    1fde:	46ab      	mov	fp, r5
    1fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			packet[loc++] = MACInitParams.PAddress[i];
    1fe2:	4a1e      	ldr	r2, [pc, #120]	; (205c <STACK_SIZE+0x5c>)
    1fe4:	6850      	ldr	r0, [r2, #4]
    1fe6:	000b      	movs	r3, r1
    1fe8:	3308      	adds	r3, #8
    1fea:	b2db      	uxtb	r3, r3
    1fec:	ae04      	add	r6, sp, #16
    1fee:	1c4a      	adds	r2, r1, #1
    1ff0:	b2d2      	uxtb	r2, r2
    1ff2:	7804      	ldrb	r4, [r0, #0]
    1ff4:	5474      	strb	r4, [r6, r1]
    1ff6:	3001      	adds	r0, #1
    1ff8:	0011      	movs	r1, r2
        for (i = 0; i < 8; i++)
    1ffa:	429a      	cmp	r2, r3
    1ffc:	d1f7      	bne.n	1fee <MiMAC_SendPacket+0x1ee>
    1ffe:	e7cf      	b.n	1fa0 <MiMAC_SendPacket+0x1a0>
			packet[loc++] = 0xCC;
    2000:	a904      	add	r1, sp, #16
    2002:	20cc      	movs	r0, #204	; 0xcc
    2004:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    2006:	4b0f      	ldr	r3, [pc, #60]	; (2044 <STACK_SIZE+0x44>)
    2008:	4698      	mov	r8, r3
    200a:	7818      	ldrb	r0, [r3, #0]
    200c:	1c43      	adds	r3, r0, #1
    200e:	4699      	mov	r9, r3
    2010:	4643      	mov	r3, r8
    2012:	464f      	mov	r7, r9
    2014:	701f      	strb	r7, [r3, #0]
    2016:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    2018:	a801      	add	r0, sp, #4
    201a:	7a83      	ldrb	r3, [r0, #10]
    201c:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    201e:	7ac0      	ldrb	r0, [r0, #11]
    2020:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    2022:	4663      	mov	r3, ip
    2024:	075b      	lsls	r3, r3, #29
    2026:	d49e      	bmi.n	1f66 <MiMAC_SendPacket+0x166>
        headerLength = 7;
    2028:	2000      	movs	r0, #0
					packet[loc++] = transParam.DestAddress[i];
    202a:	ab04      	add	r3, sp, #16
    202c:	1819      	adds	r1, r3, r0
    202e:	5c33      	ldrb	r3, [r6, r0]
    2030:	718b      	strb	r3, [r1, #6]
    2032:	3001      	adds	r0, #1
                for (i = 0; i < 8; i++)
    2034:	2808      	cmp	r0, #8
    2036:	d1f8      	bne.n	202a <STACK_SIZE+0x2a>
					packet[loc++] = transParam.DestAddress[i];
    2038:	210e      	movs	r1, #14
    203a:	e799      	b.n	1f70 <MiMAC_SendPacket+0x170>
    203c:	20000338 	.word	0x20000338
    2040:	0000ffff 	.word	0x0000ffff
    2044:	2000031c 	.word	0x2000031c
    2048:	20000320 	.word	0x20000320
    204c:	20000128 	.word	0x20000128
    2050:	20000120 	.word	0x20000120
    2054:	20000124 	.word	0x20000124
    2058:	000024fd 	.word	0x000024fd
    205c:	20000328 	.word	0x20000328

00002060 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    2060:	4b04      	ldr	r3, [pc, #16]	; (2074 <MiMAC_DiscardPacket+0x14>)
    2062:	781b      	ldrb	r3, [r3, #0]
    2064:	2b03      	cmp	r3, #3
    2066:	d804      	bhi.n	2072 <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    2068:	01da      	lsls	r2, r3, #7
    206a:	1ad3      	subs	r3, r2, r3
    206c:	2100      	movs	r1, #0
    206e:	4a02      	ldr	r2, [pc, #8]	; (2078 <MiMAC_DiscardPacket+0x18>)
    2070:	5499      	strb	r1, [r3, r2]
	}
}
    2072:	4770      	bx	lr
    2074:	20000009 	.word	0x20000009
    2078:	2000033c 	.word	0x2000033c

0000207c <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    207c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	BankIndex = 0xFF;
    207e:	22ff      	movs	r2, #255	; 0xff
    2080:	4bcd      	ldr	r3, [pc, #820]	; (23b8 <MiMAC_ReceivedPacket+0x33c>)
    2082:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    2084:	4bcd      	ldr	r3, [pc, #820]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2086:	781b      	ldrb	r3, [r3, #0]
    2088:	2b00      	cmp	r3, #0
    208a:	d000      	beq.n	208e <MiMAC_ReceivedPacket+0x12>
    208c:	e1bd      	b.n	240a <MiMAC_ReceivedPacket+0x38e>
    208e:	337f      	adds	r3, #127	; 0x7f
    2090:	4aca      	ldr	r2, [pc, #808]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2092:	5cd3      	ldrb	r3, [r2, r3]
    2094:	2b00      	cmp	r3, #0
    2096:	d10b      	bne.n	20b0 <MiMAC_ReceivedPacket+0x34>
    2098:	33fe      	adds	r3, #254	; 0xfe
    209a:	5cd3      	ldrb	r3, [r2, r3]
    209c:	2b00      	cmp	r3, #0
    209e:	d12e      	bne.n	20fe <MiMAC_ReceivedPacket+0x82>
    20a0:	237e      	movs	r3, #126	; 0x7e
    20a2:	33ff      	adds	r3, #255	; 0xff
    20a4:	5cd3      	ldrb	r3, [r2, r3]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
		#endif

		return true;
	}
	return false;
    20a6:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    20a8:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    20aa:	2b00      	cmp	r3, #0
    20ac:	d101      	bne.n	20b2 <MiMAC_ReceivedPacket+0x36>
}
    20ae:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < BANK_SIZE; i++)
    20b0:	2201      	movs	r2, #1
			BankIndex = i;
    20b2:	4bc1      	ldr	r3, [pc, #772]	; (23b8 <MiMAC_ReceivedPacket+0x33c>)
    20b4:	701a      	strb	r2, [r3, #0]
	return false;
    20b6:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    20b8:	2a03      	cmp	r2, #3
    20ba:	d8f8      	bhi.n	20ae <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    20bc:	0010      	movs	r0, r2
    20be:	01d1      	lsls	r1, r2, #7
    20c0:	1a89      	subs	r1, r1, r2
    20c2:	4bbe      	ldr	r3, [pc, #760]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    20c4:	185b      	adds	r3, r3, r1
    20c6:	785d      	ldrb	r5, [r3, #1]
    20c8:	2440      	movs	r4, #64	; 0x40
    20ca:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    20cc:	49bc      	ldr	r1, [pc, #752]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    20ce:	2400      	movs	r4, #0
    20d0:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    20d2:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    20d4:	789b      	ldrb	r3, [r3, #2]
    20d6:	2133      	movs	r1, #51	; 0x33
    20d8:	438b      	bics	r3, r1
		switch (addrMode)
    20da:	b2d9      	uxtb	r1, r3
    20dc:	2988      	cmp	r1, #136	; 0x88
    20de:	d100      	bne.n	20e2 <MiMAC_ReceivedPacket+0x66>
    20e0:	e0c4      	b.n	226c <MiMAC_ReceivedPacket+0x1f0>
    20e2:	d90e      	bls.n	2102 <MiMAC_ReceivedPacket+0x86>
    20e4:	b2d9      	uxtb	r1, r3
    20e6:	29c8      	cmp	r1, #200	; 0xc8
    20e8:	d046      	beq.n	2178 <MiMAC_ReceivedPacket+0xfc>
    20ea:	29cc      	cmp	r1, #204	; 0xcc
    20ec:	d100      	bne.n	20f0 <MiMAC_ReceivedPacket+0x74>
    20ee:	e08a      	b.n	2206 <MiMAC_ReceivedPacket+0x18a>
    20f0:	298c      	cmp	r1, #140	; 0x8c
    20f2:	d100      	bne.n	20f6 <MiMAC_ReceivedPacket+0x7a>
    20f4:	e104      	b.n	2300 <MiMAC_ReceivedPacket+0x284>
			MiMAC_DiscardPacket();
    20f6:	4bb3      	ldr	r3, [pc, #716]	; (23c4 <MiMAC_ReceivedPacket+0x348>)
    20f8:	4798      	blx	r3
			return false;
    20fa:	2000      	movs	r0, #0
    20fc:	e7d7      	b.n	20ae <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    20fe:	2202      	movs	r2, #2
    2100:	e7d7      	b.n	20b2 <MiMAC_ReceivedPacket+0x36>
		switch (addrMode)
    2102:	2b08      	cmp	r3, #8
    2104:	d100      	bne.n	2108 <MiMAC_ReceivedPacket+0x8c>
    2106:	e131      	b.n	236c <MiMAC_ReceivedPacket+0x2f0>
    2108:	2980      	cmp	r1, #128	; 0x80
    210a:	d1f4      	bne.n	20f6 <MiMAC_ReceivedPacket+0x7a>
				MACRxPacket.flags.bits.broadcast = 1;
    210c:	4bac      	ldr	r3, [pc, #688]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    210e:	7819      	ldrb	r1, [r3, #0]
    2110:	2404      	movs	r4, #4
    2112:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2114:	2480      	movs	r4, #128	; 0x80
    2116:	4264      	negs	r4, r4
    2118:	4321      	orrs	r1, r4
    211a:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    211c:	2101      	movs	r1, #1
    211e:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2120:	4ca6      	ldr	r4, [pc, #664]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2122:	01d1      	lsls	r1, r2, #7
    2124:	1a88      	subs	r0, r1, r2
    2126:	1821      	adds	r1, r4, r0
    2128:	790d      	ldrb	r5, [r1, #4]
    212a:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    212c:	7949      	ldrb	r1, [r1, #5]
    212e:	7459      	strb	r1, [r3, #17]
    2130:	01d1      	lsls	r1, r2, #7
    2132:	1a8a      	subs	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    2134:	1d91      	adds	r1, r2, #6
    2136:	1909      	adds	r1, r1, r4
    2138:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    213a:	5d01      	ldrb	r1, [r0, r4]
    213c:	390b      	subs	r1, #11
    213e:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    2140:	3208      	adds	r2, #8
    2142:	1912      	adds	r2, r2, r4
    2144:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    2146:	4b9c      	ldr	r3, [pc, #624]	; (23b8 <MiMAC_ReceivedPacket+0x33c>)
    2148:	781b      	ldrb	r3, [r3, #0]
    214a:	01d9      	lsls	r1, r3, #7
    214c:	1ac9      	subs	r1, r1, r3
    214e:	4a9b      	ldr	r2, [pc, #620]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2150:	1852      	adds	r2, r2, r1
    2152:	7851      	ldrb	r1, [r2, #1]
    2154:	070a      	lsls	r2, r1, #28
    2156:	d500      	bpl.n	215a <MiMAC_ReceivedPacket+0xde>
    2158:	e129      	b.n	23ae <MiMAC_ReceivedPacket+0x332>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    215a:	2207      	movs	r2, #7
    215c:	400a      	ands	r2, r1
    215e:	2a01      	cmp	r2, #1
    2160:	d100      	bne.n	2164 <MiMAC_ReceivedPacket+0xe8>
    2162:	e131      	b.n	23c8 <MiMAC_ReceivedPacket+0x34c>
    2164:	2a00      	cmp	r2, #0
    2166:	d100      	bne.n	216a <MiMAC_ReceivedPacket+0xee>
    2168:	e149      	b.n	23fe <MiMAC_ReceivedPacket+0x382>
    216a:	2a03      	cmp	r2, #3
    216c:	d100      	bne.n	2170 <MiMAC_ReceivedPacket+0xf4>
    216e:	e13e      	b.n	23ee <MiMAC_ReceivedPacket+0x372>
			MiMAC_DiscardPacket();
    2170:	4b94      	ldr	r3, [pc, #592]	; (23c4 <MiMAC_ReceivedPacket+0x348>)
    2172:	4798      	blx	r3
			return false;
    2174:	2000      	movs	r0, #0
    2176:	e79a      	b.n	20ae <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2178:	01d1      	lsls	r1, r2, #7
    217a:	1a89      	subs	r1, r1, r2
    217c:	4b8f      	ldr	r3, [pc, #572]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    217e:	185b      	adds	r3, r3, r1
    2180:	799b      	ldrb	r3, [r3, #6]
    2182:	2bff      	cmp	r3, #255	; 0xff
    2184:	d01c      	beq.n	21c0 <MiMAC_ReceivedPacket+0x144>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    2186:	498e      	ldr	r1, [pc, #568]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    2188:	780c      	ldrb	r4, [r1, #0]
    218a:	2380      	movs	r3, #128	; 0x80
    218c:	425b      	negs	r3, r3
    218e:	4323      	orrs	r3, r4
    2190:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    2192:	2d00      	cmp	r5, #0
    2194:	d021      	beq.n	21da <MiMAC_ReceivedPacket+0x15e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2196:	4c89      	ldr	r4, [pc, #548]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2198:	01c3      	lsls	r3, r0, #7
    219a:	1a18      	subs	r0, r3, r0
    219c:	1823      	adds	r3, r4, r0
    219e:	791d      	ldrb	r5, [r3, #4]
    21a0:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    21a2:	795b      	ldrb	r3, [r3, #5]
    21a4:	744b      	strb	r3, [r1, #17]
    21a6:	01d3      	lsls	r3, r2, #7
    21a8:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    21aa:	0013      	movs	r3, r2
    21ac:	3308      	adds	r3, #8
    21ae:	191b      	adds	r3, r3, r4
    21b0:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    21b2:	5d03      	ldrb	r3, [r0, r4]
    21b4:	3b13      	subs	r3, #19
    21b6:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    21b8:	3210      	adds	r2, #16
    21ba:	1912      	adds	r2, r2, r4
    21bc:	608a      	str	r2, [r1, #8]
    21be:	e7c2      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    21c0:	01d1      	lsls	r1, r2, #7
    21c2:	1a89      	subs	r1, r1, r2
    21c4:	4b7d      	ldr	r3, [pc, #500]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    21c6:	185b      	adds	r3, r3, r1
    21c8:	79db      	ldrb	r3, [r3, #7]
    21ca:	2bff      	cmp	r3, #255	; 0xff
    21cc:	d1db      	bne.n	2186 <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.flags.bits.broadcast = 1;
    21ce:	497c      	ldr	r1, [pc, #496]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    21d0:	780b      	ldrb	r3, [r1, #0]
    21d2:	2404      	movs	r4, #4
    21d4:	4323      	orrs	r3, r4
    21d6:	700b      	strb	r3, [r1, #0]
    21d8:	e7d5      	b.n	2186 <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    21da:	4979      	ldr	r1, [pc, #484]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    21dc:	4c77      	ldr	r4, [pc, #476]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    21de:	01c3      	lsls	r3, r0, #7
    21e0:	1a18      	subs	r0, r3, r0
    21e2:	1823      	adds	r3, r4, r0
    21e4:	7a1d      	ldrb	r5, [r3, #8]
    21e6:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    21e8:	7a5b      	ldrb	r3, [r3, #9]
    21ea:	744b      	strb	r3, [r1, #17]
    21ec:	01d3      	lsls	r3, r2, #7
    21ee:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    21f0:	0013      	movs	r3, r2
    21f2:	330a      	adds	r3, #10
    21f4:	191b      	adds	r3, r3, r4
    21f6:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    21f8:	5d03      	ldrb	r3, [r0, r4]
    21fa:	3b15      	subs	r3, #21
    21fc:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    21fe:	3212      	adds	r2, #18
    2200:	1912      	adds	r2, r2, r4
    2202:	608a      	str	r2, [r1, #8]
    2204:	e79f      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    2206:	496e      	ldr	r1, [pc, #440]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    2208:	780c      	ldrb	r4, [r1, #0]
    220a:	2380      	movs	r3, #128	; 0x80
    220c:	425b      	negs	r3, r3
    220e:	4323      	orrs	r3, r4
    2210:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    2212:	2d00      	cmp	r5, #0
    2214:	d014      	beq.n	2240 <MiMAC_ReceivedPacket+0x1c4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2216:	4c69      	ldr	r4, [pc, #420]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2218:	01d3      	lsls	r3, r2, #7
    221a:	1a98      	subs	r0, r3, r2
    221c:	1823      	adds	r3, r4, r0
    221e:	791d      	ldrb	r5, [r3, #4]
    2220:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2222:	795b      	ldrb	r3, [r3, #5]
    2224:	744b      	strb	r3, [r1, #17]
    2226:	01d3      	lsls	r3, r2, #7
    2228:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    222a:	0013      	movs	r3, r2
    222c:	330e      	adds	r3, #14
    222e:	191b      	adds	r3, r3, r4
    2230:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    2232:	5d03      	ldrb	r3, [r0, r4]
    2234:	3b19      	subs	r3, #25
    2236:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    2238:	3216      	adds	r2, #22
    223a:	1912      	adds	r2, r2, r4
    223c:	608a      	str	r2, [r1, #8]
    223e:	e782      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    2240:	495f      	ldr	r1, [pc, #380]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    2242:	4c5e      	ldr	r4, [pc, #376]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2244:	01d3      	lsls	r3, r2, #7
    2246:	1a98      	subs	r0, r3, r2
    2248:	1823      	adds	r3, r4, r0
    224a:	7b9d      	ldrb	r5, [r3, #14]
    224c:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    224e:	7bdb      	ldrb	r3, [r3, #15]
    2250:	744b      	strb	r3, [r1, #17]
    2252:	01d3      	lsls	r3, r2, #7
    2254:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    2256:	0013      	movs	r3, r2
    2258:	3310      	adds	r3, #16
    225a:	191b      	adds	r3, r3, r4
    225c:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    225e:	5d03      	ldrb	r3, [r0, r4]
    2260:	3b1b      	subs	r3, #27
    2262:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    2264:	3218      	adds	r2, #24
    2266:	1912      	adds	r2, r2, r4
    2268:	608a      	str	r2, [r1, #8]
    226a:	e76c      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    226c:	01d1      	lsls	r1, r2, #7
    226e:	1a89      	subs	r1, r1, r2
    2270:	4b52      	ldr	r3, [pc, #328]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2272:	185b      	adds	r3, r3, r1
    2274:	799b      	ldrb	r3, [r3, #6]
    2276:	2bff      	cmp	r3, #255	; 0xff
    2278:	d01f      	beq.n	22ba <MiMAC_ReceivedPacket+0x23e>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    227a:	4b51      	ldr	r3, [pc, #324]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    227c:	781c      	ldrb	r4, [r3, #0]
    227e:	2180      	movs	r1, #128	; 0x80
    2280:	4249      	negs	r1, r1
    2282:	4321      	orrs	r1, r4
    2284:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2286:	2101      	movs	r1, #1
    2288:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    228a:	2d00      	cmp	r5, #0
    228c:	d122      	bne.n	22d4 <MiMAC_ReceivedPacket+0x258>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    228e:	0019      	movs	r1, r3
    2290:	4c4a      	ldr	r4, [pc, #296]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2292:	01c3      	lsls	r3, r0, #7
    2294:	1a18      	subs	r0, r3, r0
    2296:	1823      	adds	r3, r4, r0
    2298:	7a1d      	ldrb	r5, [r3, #8]
    229a:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    229c:	7a5b      	ldrb	r3, [r3, #9]
    229e:	744b      	strb	r3, [r1, #17]
    22a0:	01d3      	lsls	r3, r2, #7
    22a2:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    22a4:	0013      	movs	r3, r2
    22a6:	330a      	adds	r3, #10
    22a8:	191b      	adds	r3, r3, r4
    22aa:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    22ac:	5d03      	ldrb	r3, [r0, r4]
    22ae:	3b0f      	subs	r3, #15
    22b0:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    22b2:	320c      	adds	r2, #12
    22b4:	1912      	adds	r2, r2, r4
    22b6:	608a      	str	r2, [r1, #8]
    22b8:	e745      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    22ba:	01d1      	lsls	r1, r2, #7
    22bc:	1a89      	subs	r1, r1, r2
    22be:	4b3f      	ldr	r3, [pc, #252]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    22c0:	185b      	adds	r3, r3, r1
    22c2:	79db      	ldrb	r3, [r3, #7]
    22c4:	2bff      	cmp	r3, #255	; 0xff
    22c6:	d1d8      	bne.n	227a <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.flags.bits.broadcast = 1;
    22c8:	493d      	ldr	r1, [pc, #244]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    22ca:	780b      	ldrb	r3, [r1, #0]
    22cc:	2404      	movs	r4, #4
    22ce:	4323      	orrs	r3, r4
    22d0:	700b      	strb	r3, [r1, #0]
    22d2:	e7d2      	b.n	227a <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    22d4:	493a      	ldr	r1, [pc, #232]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    22d6:	4c39      	ldr	r4, [pc, #228]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    22d8:	01c3      	lsls	r3, r0, #7
    22da:	1a18      	subs	r0, r3, r0
    22dc:	1823      	adds	r3, r4, r0
    22de:	791d      	ldrb	r5, [r3, #4]
    22e0:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    22e2:	795b      	ldrb	r3, [r3, #5]
    22e4:	744b      	strb	r3, [r1, #17]
    22e6:	01d3      	lsls	r3, r2, #7
    22e8:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    22ea:	0013      	movs	r3, r2
    22ec:	3308      	adds	r3, #8
    22ee:	191b      	adds	r3, r3, r4
    22f0:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    22f2:	5d03      	ldrb	r3, [r0, r4]
    22f4:	3b0d      	subs	r3, #13
    22f6:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    22f8:	320a      	adds	r2, #10
    22fa:	1912      	adds	r2, r2, r4
    22fc:	608a      	str	r2, [r1, #8]
    22fe:	e722      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2300:	4b2f      	ldr	r3, [pc, #188]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    2302:	781c      	ldrb	r4, [r3, #0]
    2304:	2180      	movs	r1, #128	; 0x80
    2306:	4249      	negs	r1, r1
    2308:	4321      	orrs	r1, r4
    230a:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    230c:	2101      	movs	r1, #1
    230e:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    2310:	2d00      	cmp	r5, #0
    2312:	d015      	beq.n	2340 <MiMAC_ReceivedPacket+0x2c4>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2314:	0019      	movs	r1, r3
    2316:	4c29      	ldr	r4, [pc, #164]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2318:	01d3      	lsls	r3, r2, #7
    231a:	1a98      	subs	r0, r3, r2
    231c:	1823      	adds	r3, r4, r0
    231e:	791d      	ldrb	r5, [r3, #4]
    2320:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2322:	795b      	ldrb	r3, [r3, #5]
    2324:	744b      	strb	r3, [r1, #17]
    2326:	01d3      	lsls	r3, r2, #7
    2328:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    232a:	0013      	movs	r3, r2
    232c:	330e      	adds	r3, #14
    232e:	191b      	adds	r3, r3, r4
    2330:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    2332:	5d03      	ldrb	r3, [r0, r4]
    2334:	3b13      	subs	r3, #19
    2336:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2338:	3210      	adds	r2, #16
    233a:	1912      	adds	r2, r2, r4
    233c:	608a      	str	r2, [r1, #8]
    233e:	e702      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    2340:	491f      	ldr	r1, [pc, #124]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    2342:	4c1e      	ldr	r4, [pc, #120]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2344:	01d3      	lsls	r3, r2, #7
    2346:	1a98      	subs	r0, r3, r2
    2348:	1823      	adds	r3, r4, r0
    234a:	7b5d      	ldrb	r5, [r3, #13]
    234c:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    234e:	7b9b      	ldrb	r3, [r3, #14]
    2350:	744b      	strb	r3, [r1, #17]
    2352:	01d3      	lsls	r3, r2, #7
    2354:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    2356:	0013      	movs	r3, r2
    2358:	330f      	adds	r3, #15
    235a:	191b      	adds	r3, r3, r4
    235c:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    235e:	5d03      	ldrb	r3, [r0, r4]
    2360:	3b15      	subs	r3, #21
    2362:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2364:	3212      	adds	r2, #18
    2366:	1912      	adds	r2, r2, r4
    2368:	608a      	str	r2, [r1, #8]
    236a:	e6ec      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    236c:	01d1      	lsls	r1, r2, #7
    236e:	1a89      	subs	r1, r1, r2
    2370:	4b12      	ldr	r3, [pc, #72]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    2372:	185b      	adds	r3, r3, r1
    2374:	799b      	ldrb	r3, [r3, #6]
    2376:	2bff      	cmp	r3, #255	; 0xff
    2378:	d00c      	beq.n	2394 <MiMAC_ReceivedPacket+0x318>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    237a:	4911      	ldr	r1, [pc, #68]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    237c:	4c0f      	ldr	r4, [pc, #60]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    237e:	01c3      	lsls	r3, r0, #7
    2380:	1a18      	subs	r0, r3, r0
    2382:	5d03      	ldrb	r3, [r0, r4]
    2384:	3b0a      	subs	r3, #10
    2386:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    2388:	01d3      	lsls	r3, r2, #7
    238a:	1a9a      	subs	r2, r3, r2
    238c:	3208      	adds	r2, #8
    238e:	1912      	adds	r2, r2, r4
    2390:	608a      	str	r2, [r1, #8]
			break;
    2392:	e6d8      	b.n	2146 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2394:	01d1      	lsls	r1, r2, #7
    2396:	1a89      	subs	r1, r1, r2
    2398:	4b08      	ldr	r3, [pc, #32]	; (23bc <MiMAC_ReceivedPacket+0x340>)
    239a:	185b      	adds	r3, r3, r1
    239c:	79db      	ldrb	r3, [r3, #7]
    239e:	2bff      	cmp	r3, #255	; 0xff
    23a0:	d1eb      	bne.n	237a <MiMAC_ReceivedPacket+0x2fe>
					MACRxPacket.flags.bits.broadcast = 1;
    23a2:	4907      	ldr	r1, [pc, #28]	; (23c0 <MiMAC_ReceivedPacket+0x344>)
    23a4:	780b      	ldrb	r3, [r1, #0]
    23a6:	2404      	movs	r4, #4
    23a8:	4323      	orrs	r3, r4
    23aa:	700b      	strb	r3, [r1, #0]
    23ac:	e7e5      	b.n	237a <MiMAC_ReceivedPacket+0x2fe>
			MiMAC_DiscardPacket();
    23ae:	4b05      	ldr	r3, [pc, #20]	; (23c4 <MiMAC_ReceivedPacket+0x348>)
    23b0:	4798      	blx	r3
			return false;
    23b2:	2000      	movs	r0, #0
    23b4:	e67b      	b.n	20ae <MiMAC_ReceivedPacket+0x32>
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	20000009 	.word	0x20000009
    23bc:	2000033c 	.word	0x2000033c
    23c0:	200012c8 	.word	0x200012c8
    23c4:	00002061 	.word	0x00002061
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    23c8:	4912      	ldr	r1, [pc, #72]	; (2414 <MiMAC_ReceivedPacket+0x398>)
    23ca:	780a      	ldrb	r2, [r1, #0]
    23cc:	2003      	movs	r0, #3
    23ce:	4382      	bics	r2, r0
    23d0:	700a      	strb	r2, [r1, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    23d2:	4a11      	ldr	r2, [pc, #68]	; (2418 <MiMAC_ReceivedPacket+0x39c>)
    23d4:	01d9      	lsls	r1, r3, #7
    23d6:	1acb      	subs	r3, r1, r3
    23d8:	5c98      	ldrb	r0, [r3, r2]
    23da:	490e      	ldr	r1, [pc, #56]	; (2414 <MiMAC_ReceivedPacket+0x398>)
    23dc:	18d3      	adds	r3, r2, r3
    23de:	181a      	adds	r2, r3, r0
    23e0:	3a01      	subs	r2, #1
    23e2:	7812      	ldrb	r2, [r2, #0]
    23e4:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    23e6:	5c1b      	ldrb	r3, [r3, r0]
    23e8:	734b      	strb	r3, [r1, #13]
		return true;
    23ea:	2001      	movs	r0, #1
    23ec:	e65f      	b.n	20ae <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    23ee:	4909      	ldr	r1, [pc, #36]	; (2414 <MiMAC_ReceivedPacket+0x398>)
    23f0:	780a      	ldrb	r2, [r1, #0]
    23f2:	2003      	movs	r0, #3
    23f4:	4382      	bics	r2, r0
    23f6:	2001      	movs	r0, #1
    23f8:	4302      	orrs	r2, r0
    23fa:	700a      	strb	r2, [r1, #0]
			break;
    23fc:	e7e9      	b.n	23d2 <MiMAC_ReceivedPacket+0x356>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    23fe:	4905      	ldr	r1, [pc, #20]	; (2414 <MiMAC_ReceivedPacket+0x398>)
    2400:	780a      	ldrb	r2, [r1, #0]
    2402:	2003      	movs	r0, #3
    2404:	4302      	orrs	r2, r0
    2406:	700a      	strb	r2, [r1, #0]
			break;
    2408:	e7e3      	b.n	23d2 <MiMAC_ReceivedPacket+0x356>
			BankIndex = i;
    240a:	2200      	movs	r2, #0
    240c:	4b03      	ldr	r3, [pc, #12]	; (241c <MiMAC_ReceivedPacket+0x3a0>)
    240e:	701a      	strb	r2, [r3, #0]
    2410:	e654      	b.n	20bc <MiMAC_ReceivedPacket+0x40>
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	200012c8 	.word	0x200012c8
    2418:	2000033c 	.word	0x2000033c
    241c:	20000009 	.word	0x20000009

00002420 <MiMAC_SymbolToTicks>:
* Returns:
*      converted value in uint32.
*****************************************************************************************/
uint32_t MiMAC_SymbolToTicks(uint32_t symbols)
{
	return SYMBOLS_TO_TICKS(symbols);
    2420:	0100      	lsls	r0, r0, #4
}
    2422:	4770      	bx	lr

00002424 <MiMAC_GetPHYChannelInfo>:
*****************************************************************************************/
uint32_t MiMAC_GetPHYChannelInfo(void)
{
	uint32_t channelMap = FULL_CHANNEL_MAP;
	return channelMap;
}
    2424:	4800      	ldr	r0, [pc, #0]	; (2428 <MiMAC_GetPHYChannelInfo+0x4>)
    2426:	4770      	bx	lr
    2428:	07fff800 	.word	0x07fff800

0000242c <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    242c:	4b02      	ldr	r3, [pc, #8]	; (2438 <PHY_DataConf+0xc>)
    242e:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    2430:	2201      	movs	r2, #1
    2432:	4b02      	ldr	r3, [pc, #8]	; (243c <PHY_DataConf+0x10>)
    2434:	701a      	strb	r2, [r3, #0]
}
    2436:	4770      	bx	lr
    2438:	20000330 	.word	0x20000330
    243c:	2000011c 	.word	0x2000011c

00002440 <MiMAC_Task>:

void MiMAC_Task(void)
{
    2440:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    2442:	4b0b      	ldr	r3, [pc, #44]	; (2470 <MiMAC_Task+0x30>)
    2444:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    2446:	4b0b      	ldr	r3, [pc, #44]	; (2474 <MiMAC_Task+0x34>)
    2448:	681b      	ldr	r3, [r3, #0]
    244a:	2b00      	cmp	r3, #0
    244c:	d003      	beq.n	2456 <MiMAC_Task+0x16>
    244e:	4a0a      	ldr	r2, [pc, #40]	; (2478 <MiMAC_Task+0x38>)
    2450:	7812      	ldrb	r2, [r2, #0]
    2452:	2a00      	cmp	r2, #0
    2454:	d100      	bne.n	2458 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    2456:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    2458:	4a08      	ldr	r2, [pc, #32]	; (247c <MiMAC_Task+0x3c>)
    245a:	6812      	ldr	r2, [r2, #0]
    245c:	4908      	ldr	r1, [pc, #32]	; (2480 <MiMAC_Task+0x40>)
    245e:	7809      	ldrb	r1, [r1, #0]
    2460:	4808      	ldr	r0, [pc, #32]	; (2484 <MiMAC_Task+0x44>)
    2462:	7800      	ldrb	r0, [r0, #0]
    2464:	4798      	blx	r3
	  dataConfAvailable = false;
    2466:	2200      	movs	r2, #0
    2468:	4b03      	ldr	r3, [pc, #12]	; (2478 <MiMAC_Task+0x38>)
    246a:	701a      	strb	r2, [r3, #0]
}
    246c:	e7f3      	b.n	2456 <MiMAC_Task+0x16>
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	000026ad 	.word	0x000026ad
    2474:	20000120 	.word	0x20000120
    2478:	2000011c 	.word	0x2000011c
    247c:	20000128 	.word	0x20000128
    2480:	20000330 	.word	0x20000330
    2484:	20000124 	.word	0x20000124

00002488 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    248a:	0004      	movs	r4, r0
	trx_reg_write(reg, value);
    248c:	4f0b      	ldr	r7, [pc, #44]	; (24bc <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    248e:	4e0c      	ldr	r6, [pc, #48]	; (24c0 <phyTrxSetState+0x38>)
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2490:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2492:	2103      	movs	r1, #3
    2494:	2002      	movs	r0, #2
    2496:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2498:	2001      	movs	r0, #1
    249a:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    249c:	4028      	ands	r0, r5
    249e:	2808      	cmp	r0, #8
    24a0:	d1f7      	bne.n	2492 <phyTrxSetState+0xa>
	trx_reg_write(reg, value);
    24a2:	4f06      	ldr	r7, [pc, #24]	; (24bc <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    24a4:	4e06      	ldr	r6, [pc, #24]	; (24c0 <phyTrxSetState+0x38>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    24a6:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    24a8:	0021      	movs	r1, r4
    24aa:	2002      	movs	r0, #2
    24ac:	47b8      	blx	r7
	value = trx_reg_read(reg);
    24ae:	2001      	movs	r0, #1
    24b0:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    24b2:	4028      	ands	r0, r5
    24b4:	4284      	cmp	r4, r0
    24b6:	d1f7      	bne.n	24a8 <phyTrxSetState+0x20>
}
    24b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	00003501 	.word	0x00003501
    24c0:	00003405 	.word	0x00003405

000024c4 <phySetRxState>:
{
    24c4:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    24c6:	2008      	movs	r0, #8
    24c8:	4b08      	ldr	r3, [pc, #32]	; (24ec <phySetRxState+0x28>)
    24ca:	4798      	blx	r3
	value = trx_reg_read(reg);
    24cc:	200f      	movs	r0, #15
    24ce:	4b08      	ldr	r3, [pc, #32]	; (24f0 <phySetRxState+0x2c>)
    24d0:	4798      	blx	r3
	if (phyRxState) {
    24d2:	4b08      	ldr	r3, [pc, #32]	; (24f4 <phySetRxState+0x30>)
    24d4:	781b      	ldrb	r3, [r3, #0]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d100      	bne.n	24dc <phySetRxState+0x18>
}
    24da:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    24dc:	2016      	movs	r0, #22
    24de:	4b03      	ldr	r3, [pc, #12]	; (24ec <phySetRxState+0x28>)
    24e0:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    24e2:	2201      	movs	r2, #1
    24e4:	4b04      	ldr	r3, [pc, #16]	; (24f8 <phySetRxState+0x34>)
    24e6:	701a      	strb	r2, [r3, #0]
}
    24e8:	e7f7      	b.n	24da <phySetRxState+0x16>
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	00002489 	.word	0x00002489
    24f0:	00003405 	.word	0x00003405
    24f4:	200001ac 	.word	0x200001ac
    24f8:	200001ad 	.word	0x200001ad

000024fc <PHY_DataReq>:
{
    24fc:	b510      	push	{r4, lr}
    24fe:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2500:	2019      	movs	r0, #25
    2502:	4b0c      	ldr	r3, [pc, #48]	; (2534 <PHY_DataReq+0x38>)
    2504:	4798      	blx	r3
	value = trx_reg_read(reg);
    2506:	200f      	movs	r0, #15
    2508:	4b0b      	ldr	r3, [pc, #44]	; (2538 <PHY_DataReq+0x3c>)
    250a:	4798      	blx	r3
	data[0] += 2;// 2
    250c:	7821      	ldrb	r1, [r4, #0]
    250e:	1c8b      	adds	r3, r1, #2
    2510:	7023      	strb	r3, [r4, #0]
	trx_frame_write(&data[0], (data[0]-1 ) /* length value*/);
    2512:	3101      	adds	r1, #1
    2514:	b2c9      	uxtb	r1, r1
    2516:	0020      	movs	r0, r4
    2518:	4b08      	ldr	r3, [pc, #32]	; (253c <PHY_DataReq+0x40>)
    251a:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
    251c:	2203      	movs	r2, #3
    251e:	4b08      	ldr	r3, [pc, #32]	; (2540 <PHY_DataReq+0x44>)
    2520:	701a      	strb	r2, [r3, #0]
    2522:	4b08      	ldr	r3, [pc, #32]	; (2544 <PHY_DataReq+0x48>)
    2524:	2280      	movs	r2, #128	; 0x80
    2526:	0352      	lsls	r2, r2, #13
    2528:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    252e:	615a      	str	r2, [r3, #20]
}
    2530:	bd10      	pop	{r4, pc}
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	00002489 	.word	0x00002489
    2538:	00003405 	.word	0x00003405
    253c:	00003731 	.word	0x00003731
    2540:	200001ad 	.word	0x200001ad
    2544:	41004400 	.word	0x41004400

00002548 <PHY_RandomReq>:
{
    2548:	b5f0      	push	{r4, r5, r6, r7, lr}
    254a:	46c6      	mov	lr, r8
    254c:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    254e:	2006      	movs	r0, #6
    2550:	4b0d      	ldr	r3, [pc, #52]	; (2588 <PHY_RandomReq+0x40>)
    2552:	4798      	blx	r3
    2554:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    2556:	2500      	movs	r5, #0
		delay_cycles_us(1);
    2558:	4f0c      	ldr	r7, [pc, #48]	; (258c <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    255a:	4e0d      	ldr	r6, [pc, #52]	; (2590 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    255c:	2303      	movs	r3, #3
    255e:	4698      	mov	r8, r3
		delay_cycles_us(1);
    2560:	2001      	movs	r0, #1
    2562:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2564:	2006      	movs	r0, #6
    2566:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2568:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    256a:	4643      	mov	r3, r8
    256c:	4018      	ands	r0, r3
    256e:	40a0      	lsls	r0, r4
    2570:	4305      	orrs	r5, r0
    2572:	b2ad      	uxth	r5, r5
    2574:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    2576:	2c10      	cmp	r4, #16
    2578:	d1f2      	bne.n	2560 <PHY_RandomReq+0x18>
	phySetRxState();
    257a:	4b06      	ldr	r3, [pc, #24]	; (2594 <PHY_RandomReq+0x4c>)
    257c:	4798      	blx	r3
}
    257e:	0028      	movs	r0, r5
    2580:	bc04      	pop	{r2}
    2582:	4690      	mov	r8, r2
    2584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	00002489 	.word	0x00002489
    258c:	00000155 	.word	0x00000155
    2590:	00003405 	.word	0x00003405
    2594:	000024c5 	.word	0x000024c5

00002598 <PHY_Init>:
{
    2598:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    259a:	4b0d      	ldr	r3, [pc, #52]	; (25d0 <PHY_Init+0x38>)
    259c:	4798      	blx	r3
	PhyReset();
    259e:	4b0d      	ldr	r3, [pc, #52]	; (25d4 <PHY_Init+0x3c>)
    25a0:	4798      	blx	r3
	phyRxState = false;
    25a2:	2200      	movs	r2, #0
    25a4:	4b0c      	ldr	r3, [pc, #48]	; (25d8 <PHY_Init+0x40>)
    25a6:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    25a8:	4e0c      	ldr	r6, [pc, #48]	; (25dc <PHY_Init+0x44>)
	value = trx_reg_read(reg);
    25aa:	4d0d      	ldr	r5, [pc, #52]	; (25e0 <PHY_Init+0x48>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    25ac:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    25ae:	2108      	movs	r1, #8
    25b0:	2002      	movs	r0, #2
    25b2:	47b0      	blx	r6
	value = trx_reg_read(reg);
    25b4:	2001      	movs	r0, #1
    25b6:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    25b8:	4020      	ands	r0, r4
    25ba:	2808      	cmp	r0, #8
    25bc:	d1f7      	bne.n	25ae <PHY_Init+0x16>
	trx_reg_write(reg, value);
    25be:	212e      	movs	r1, #46	; 0x2e
    25c0:	3804      	subs	r0, #4
    25c2:	4c06      	ldr	r4, [pc, #24]	; (25dc <PHY_Init+0x44>)
    25c4:	47a0      	blx	r4
    25c6:	21a0      	movs	r1, #160	; 0xa0
    25c8:	200c      	movs	r0, #12
    25ca:	47a0      	blx	r4
}
    25cc:	bd70      	pop	{r4, r5, r6, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	000032b9 	.word	0x000032b9
    25d4:	000033d5 	.word	0x000033d5
    25d8:	200001ac 	.word	0x200001ac
    25dc:	00003501 	.word	0x00003501
    25e0:	00003405 	.word	0x00003405

000025e4 <PHY_SetRxState>:
{
    25e4:	b510      	push	{r4, lr}
	phyRxState = rx;
    25e6:	4b02      	ldr	r3, [pc, #8]	; (25f0 <PHY_SetRxState+0xc>)
    25e8:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    25ea:	4b02      	ldr	r3, [pc, #8]	; (25f4 <PHY_SetRxState+0x10>)
    25ec:	4798      	blx	r3
}
    25ee:	bd10      	pop	{r4, pc}
    25f0:	200001ac 	.word	0x200001ac
    25f4:	000024c5 	.word	0x000024c5

000025f8 <PHY_SetChannel>:
{
    25f8:	b510      	push	{r4, lr}
    25fa:	0004      	movs	r4, r0
	value = trx_reg_read(reg);
    25fc:	2008      	movs	r0, #8
    25fe:	4b05      	ldr	r3, [pc, #20]	; (2614 <PHY_SetChannel+0x1c>)
    2600:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    2602:	231f      	movs	r3, #31
    2604:	0001      	movs	r1, r0
    2606:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    2608:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    260a:	b2c9      	uxtb	r1, r1
    260c:	2008      	movs	r0, #8
    260e:	4b02      	ldr	r3, [pc, #8]	; (2618 <PHY_SetChannel+0x20>)
    2610:	4798      	blx	r3
}
    2612:	bd10      	pop	{r4, pc}
    2614:	00003405 	.word	0x00003405
    2618:	00003501 	.word	0x00003501

0000261c <PHY_SetPanId>:
{
    261c:	b530      	push	{r4, r5, lr}
    261e:	b083      	sub	sp, #12
    2620:	466b      	mov	r3, sp
    2622:	1d9d      	adds	r5, r3, #6
    2624:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    2626:	b2c1      	uxtb	r1, r0
    2628:	2022      	movs	r0, #34	; 0x22
    262a:	4c03      	ldr	r4, [pc, #12]	; (2638 <PHY_SetPanId+0x1c>)
    262c:	47a0      	blx	r4
    262e:	7869      	ldrb	r1, [r5, #1]
    2630:	2023      	movs	r0, #35	; 0x23
    2632:	47a0      	blx	r4
}
    2634:	b003      	add	sp, #12
    2636:	bd30      	pop	{r4, r5, pc}
    2638:	00003501 	.word	0x00003501

0000263c <PHY_SetShortAddr>:
{
    263c:	b570      	push	{r4, r5, r6, lr}
    263e:	b082      	sub	sp, #8
    2640:	466b      	mov	r3, sp
    2642:	1d9e      	adds	r6, r3, #6
    2644:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    2646:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    2648:	0021      	movs	r1, r4
    264a:	2020      	movs	r0, #32
    264c:	4d05      	ldr	r5, [pc, #20]	; (2664 <PHY_SetShortAddr+0x28>)
    264e:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    2650:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    2652:	0031      	movs	r1, r6
    2654:	2021      	movs	r0, #33	; 0x21
    2656:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    2658:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    265a:	b2e1      	uxtb	r1, r4
    265c:	202d      	movs	r0, #45	; 0x2d
    265e:	47a8      	blx	r5
}
    2660:	b002      	add	sp, #8
    2662:	bd70      	pop	{r4, r5, r6, pc}
    2664:	00003501 	.word	0x00003501

00002668 <PHY_Sleep>:
{
    2668:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    266a:	2008      	movs	r0, #8
    266c:	4b04      	ldr	r3, [pc, #16]	; (2680 <PHY_Sleep+0x18>)
    266e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2670:	2280      	movs	r2, #128	; 0x80
    2672:	0352      	lsls	r2, r2, #13
    2674:	4b03      	ldr	r3, [pc, #12]	; (2684 <PHY_Sleep+0x1c>)
    2676:	619a      	str	r2, [r3, #24]
	phyState = PHY_STATE_SLEEP;
    2678:	2202      	movs	r2, #2
    267a:	4b03      	ldr	r3, [pc, #12]	; (2688 <PHY_Sleep+0x20>)
    267c:	701a      	strb	r2, [r3, #0]
}
    267e:	bd10      	pop	{r4, pc}
    2680:	00002489 	.word	0x00002489
    2684:	41004400 	.word	0x41004400
    2688:	200001ad 	.word	0x200001ad

0000268c <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    268c:	b570      	push	{r4, r5, r6, lr}
    268e:	0005      	movs	r5, r0
    2690:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    2692:	4e05      	ldr	r6, [pc, #20]	; (26a8 <PHY_SetIEEEAddr+0x1c>)
    2694:	7829      	ldrb	r1, [r5, #0]
    2696:	0020      	movs	r0, r4
    2698:	47b0      	blx	r6
		ptr_to_reg++;
    269a:	3501      	adds	r5, #1
    269c:	3401      	adds	r4, #1
    269e:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    26a0:	2c2c      	cmp	r4, #44	; 0x2c
    26a2:	d1f7      	bne.n	2694 <PHY_SetIEEEAddr+0x8>
	}
}
    26a4:	bd70      	pop	{r4, r5, r6, pc}
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	00003501 	.word	0x00003501

000026ac <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
// Handle Packet Received
void PHY_TaskHandler(void)
{
    26ac:	b570      	push	{r4, r5, r6, lr}
    26ae:	b082      	sub	sp, #8
	if (PHY_STATE_SLEEP == phyState)
    26b0:	4b36      	ldr	r3, [pc, #216]	; (278c <PHY_TaskHandler+0xe0>)
    26b2:	781b      	ldrb	r3, [r3, #0]
    26b4:	2b02      	cmp	r3, #2
    26b6:	d00a      	beq.n	26ce <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    26b8:	200f      	movs	r0, #15
    26ba:	4b35      	ldr	r3, [pc, #212]	; (2790 <PHY_TaskHandler+0xe4>)
    26bc:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    26be:	0703      	lsls	r3, r0, #28
    26c0:	d505      	bpl.n	26ce <PHY_TaskHandler+0x22>
	{
		if (PHY_STATE_IDLE == phyState)
    26c2:	4b32      	ldr	r3, [pc, #200]	; (278c <PHY_TaskHandler+0xe0>)
    26c4:	781b      	ldrb	r3, [r3, #0]
    26c6:	2b01      	cmp	r3, #1
    26c8:	d003      	beq.n	26d2 <PHY_TaskHandler+0x26>
					}
			    }
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    26ca:	2b03      	cmp	r3, #3
    26cc:	d045      	beq.n	275a <PHY_TaskHandler+0xae>
			phySetRxState();
			phyState = PHY_STATE_IDLE;
			PHY_DataConf(status);
		}
	}
}
    26ce:	b002      	add	sp, #8
    26d0:	bd70      	pop	{r4, r5, r6, pc}
				if (RxBuffer[i].PayloadLen == 0)
    26d2:	4b30      	ldr	r3, [pc, #192]	; (2794 <PHY_TaskHandler+0xe8>)
    26d4:	781c      	ldrb	r4, [r3, #0]
    26d6:	2c00      	cmp	r4, #0
    26d8:	d010      	beq.n	26fc <PHY_TaskHandler+0x50>
    26da:	237f      	movs	r3, #127	; 0x7f
    26dc:	4a2d      	ldr	r2, [pc, #180]	; (2794 <PHY_TaskHandler+0xe8>)
    26de:	5cd3      	ldrb	r3, [r2, r3]
    26e0:	2b00      	cmp	r3, #0
    26e2:	d00a      	beq.n	26fa <PHY_TaskHandler+0x4e>
    26e4:	23fe      	movs	r3, #254	; 0xfe
    26e6:	5cd3      	ldrb	r3, [r2, r3]
    26e8:	2b00      	cmp	r3, #0
    26ea:	d024      	beq.n	2736 <PHY_TaskHandler+0x8a>
    26ec:	237e      	movs	r3, #126	; 0x7e
    26ee:	33ff      	adds	r3, #255	; 0xff
    26f0:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    26f2:	2403      	movs	r4, #3
				if (RxBuffer[i].PayloadLen == 0)
    26f4:	2b00      	cmp	r3, #0
    26f6:	d1ea      	bne.n	26ce <PHY_TaskHandler+0x22>
    26f8:	e000      	b.n	26fc <PHY_TaskHandler+0x50>
			for (i = 0; i < BANK_SIZE; i++)
    26fa:	2401      	movs	r4, #1
				trx_frame_read(&size, 1);
    26fc:	466b      	mov	r3, sp
    26fe:	1ddd      	adds	r5, r3, #7
    2700:	2101      	movs	r1, #1
    2702:	0028      	movs	r0, r5
    2704:	4e24      	ldr	r6, [pc, #144]	; (2798 <PHY_TaskHandler+0xec>)
    2706:	47b0      	blx	r6
			 	trx_frame_read(phyRxBuffer, size + 2);
    2708:	7829      	ldrb	r1, [r5, #0]
    270a:	3102      	adds	r1, #2
    270c:	b2c9      	uxtb	r1, r1
    270e:	4823      	ldr	r0, [pc, #140]	; (279c <PHY_TaskHandler+0xf0>)
    2710:	47b0      	blx	r6
				RxBuffer[RxBank].PayloadLen = size+2;
    2712:	0021      	movs	r1, r4
    2714:	7828      	ldrb	r0, [r5, #0]
    2716:	1c83      	adds	r3, r0, #2
    2718:	b2db      	uxtb	r3, r3
    271a:	01e2      	lsls	r2, r4, #7
    271c:	1b14      	subs	r4, r2, r4
    271e:	4a1d      	ldr	r2, [pc, #116]	; (2794 <PHY_TaskHandler+0xe8>)
    2720:	54a3      	strb	r3, [r4, r2]
				if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    2722:	2b7d      	cmp	r3, #125	; 0x7d
    2724:	d909      	bls.n	273a <PHY_TaskHandler+0x8e>
	value = trx_reg_read(reg);
    2726:	4d1a      	ldr	r5, [pc, #104]	; (2790 <PHY_TaskHandler+0xe4>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2728:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    272a:	2001      	movs	r0, #1
    272c:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    272e:	4020      	ands	r0, r4
    2730:	2816      	cmp	r0, #22
    2732:	d1fa      	bne.n	272a <PHY_TaskHandler+0x7e>
    2734:	e7cb      	b.n	26ce <PHY_TaskHandler+0x22>
			for (i = 0; i < BANK_SIZE; i++)
    2736:	2402      	movs	r4, #2
    2738:	e7e0      	b.n	26fc <PHY_TaskHandler+0x50>
					for (i = 1; i <= size+2; i++)
    273a:	3002      	adds	r0, #2
    273c:	2201      	movs	r2, #1
    273e:	2301      	movs	r3, #1
						RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    2740:	01cc      	lsls	r4, r1, #7
    2742:	1a61      	subs	r1, r4, r1
    2744:	4c13      	ldr	r4, [pc, #76]	; (2794 <PHY_TaskHandler+0xe8>)
    2746:	1864      	adds	r4, r4, r1
    2748:	4d14      	ldr	r5, [pc, #80]	; (279c <PHY_TaskHandler+0xf0>)
    274a:	5ca9      	ldrb	r1, [r5, r2]
    274c:	54a1      	strb	r1, [r4, r2]
					for (i = 1; i <= size+2; i++)
    274e:	3301      	adds	r3, #1
    2750:	b2db      	uxtb	r3, r3
    2752:	001a      	movs	r2, r3
    2754:	4283      	cmp	r3, r0
    2756:	ddf8      	ble.n	274a <PHY_TaskHandler+0x9e>
    2758:	e7e5      	b.n	2726 <PHY_TaskHandler+0x7a>
	value = trx_reg_read(reg);
    275a:	2002      	movs	r0, #2
    275c:	4b0c      	ldr	r3, [pc, #48]	; (2790 <PHY_TaskHandler+0xe4>)
    275e:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    2760:	0940      	lsrs	r0, r0, #5
    2762:	b2c4      	uxtb	r4, r0
   			if (TRAC_STATUS_SUCCESS == status)
    2764:	2c00      	cmp	r4, #0
    2766:	d004      	beq.n	2772 <PHY_TaskHandler+0xc6>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2768:	2c03      	cmp	r4, #3
    276a:	d00b      	beq.n	2784 <PHY_TaskHandler+0xd8>
			else if (TRAC_STATUS_NO_ACK == status)
    276c:	2c05      	cmp	r4, #5
    276e:	d00b      	beq.n	2788 <PHY_TaskHandler+0xdc>
				status = PHY_STATUS_ERROR;
    2770:	2401      	movs	r4, #1
			phySetRxState();
    2772:	4b0b      	ldr	r3, [pc, #44]	; (27a0 <PHY_TaskHandler+0xf4>)
    2774:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    2776:	2201      	movs	r2, #1
    2778:	4b04      	ldr	r3, [pc, #16]	; (278c <PHY_TaskHandler+0xe0>)
    277a:	701a      	strb	r2, [r3, #0]
			PHY_DataConf(status);
    277c:	0020      	movs	r0, r4
    277e:	4b09      	ldr	r3, [pc, #36]	; (27a4 <PHY_TaskHandler+0xf8>)
    2780:	4798      	blx	r3
    2782:	e7a4      	b.n	26ce <PHY_TaskHandler+0x22>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2784:	2402      	movs	r4, #2
    2786:	e7f4      	b.n	2772 <PHY_TaskHandler+0xc6>
				status = PHY_STATUS_NO_ACK;
    2788:	2403      	movs	r4, #3
    278a:	e7f2      	b.n	2772 <PHY_TaskHandler+0xc6>
    278c:	200001ad 	.word	0x200001ad
    2790:	00003405 	.word	0x00003405
    2794:	2000033c 	.word	0x2000033c
    2798:	00003601 	.word	0x00003601
    279c:	2000012c 	.word	0x2000012c
    27a0:	000024c5 	.word	0x000024c5
    27a4:	0000242d 	.word	0x0000242d

000027a8 <stb_init>:
 * @brief STB Initialization
 *
 * This function initializes the STB.
 */
void stb_init(void)
{
    27a8:	b510      	push	{r4, lr}
	sal_init();
    27aa:	4b01      	ldr	r3, [pc, #4]	; (27b0 <stb_init+0x8>)
    27ac:	4798      	blx	r3
}
    27ae:	bd10      	pop	{r4, pc}
    27b0:	0000308d 	.word	0x0000308d

000027b4 <stb_ccm_secure>:
		uint8_t *key,
		uint8_t hdr_len,
		uint8_t pld_len,
		uint8_t sec_level,
		uint8_t aes_dir)
{
    27b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27b6:	46de      	mov	lr, fp
    27b8:	4657      	mov	r7, sl
    27ba:	464e      	mov	r6, r9
    27bc:	4645      	mov	r5, r8
    27be:	b5e0      	push	{r5, r6, r7, lr}
    27c0:	b08b      	sub	sp, #44	; 0x2c
    27c2:	9003      	str	r0, [sp, #12]
    27c4:	000d      	movs	r5, r1
    27c6:	0014      	movs	r4, r2
    27c8:	9304      	str	r3, [sp, #16]
    27ca:	ab14      	add	r3, sp, #80	; 0x50
    27cc:	781e      	ldrb	r6, [r3, #0]
    27ce:	ab15      	add	r3, sp, #84	; 0x54
    27d0:	781f      	ldrb	r7, [r3, #0]
    27d2:	ab16      	add	r3, sp, #88	; 0x58
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	469a      	mov	sl, r3
	uint8_t nonce_0; /* nonce[0] for MIC computation. */
	uint8_t mic_len = 0;
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;

	if (stb_restart_required) {
    27d8:	4b77      	ldr	r3, [pc, #476]	; (29b8 <stb_ccm_secure+0x204>)
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	2b00      	cmp	r3, #0
    27de:	d007      	beq.n	27f0 <stb_ccm_secure+0x3c>
#if (SAL_TYPE != ATXMEGA_SAL)
		prev_trx_status = tal_trx_status;
    27e0:	2202      	movs	r2, #2
    27e2:	4b76      	ldr	r3, [pc, #472]	; (29bc <stb_ccm_secure+0x208>)
    27e4:	701a      	strb	r2, [r3, #0]
		if (tal_trx_status == TRX_SLEEP) {
			PHY_Wakeup();
		}
#endif
		sal_aes_restart();
    27e6:	4b76      	ldr	r3, [pc, #472]	; (29c0 <stb_ccm_secure+0x20c>)
    27e8:	4798      	blx	r3
		stb_restart_required = false;
    27ea:	2200      	movs	r2, #0
    27ec:	4b72      	ldr	r3, [pc, #456]	; (29b8 <stb_ccm_secure+0x204>)
    27ee:	701a      	strb	r2, [r3, #0]
	}

	switch (sec_level) {
    27f0:	2f07      	cmp	r7, #7
    27f2:	d817      	bhi.n	2824 <stb_ccm_secure+0x70>
    27f4:	00bb      	lsls	r3, r7, #2
    27f6:	4a73      	ldr	r2, [pc, #460]	; (29c4 <stb_ccm_secure+0x210>)
    27f8:	58d3      	ldr	r3, [r2, r3]
    27fa:	469f      	mov	pc, r3
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    27fc:	2300      	movs	r3, #0
    27fe:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
		break;

	case SECURITY_02_LEVEL:
		/* MIC-64 & No Encryption at Security Level -2 */
		mic_len = LEN_MIC_64;
    2800:	2708      	movs	r7, #8
    2802:	e0bb      	b.n	297c <stb_ccm_secure+0x1c8>
		break;

	case SECURITY_04_LEVEL:
		/* No MIC & Encryption at Security Level -4 */
		mic_len = LEN_MIC_00;
		enc_flag = ENCRYPTION_REQD;
    2804:	2301      	movs	r3, #1
    2806:	4698      	mov	r8, r3
		mic_len = LEN_MIC_00;
    2808:	2700      	movs	r7, #0
		break;
    280a:	e0b7      	b.n	297c <stb_ccm_secure+0x1c8>

	case SECURITY_05_LEVEL:
		/* MIC-32 & Encryption at Security Level -5 */
		mic_len = LEN_MIC_32;
		enc_flag = ENCRYPTION_REQD;
    280c:	2301      	movs	r3, #1
    280e:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    2810:	2704      	movs	r7, #4
		break;
    2812:	e0b3      	b.n	297c <stb_ccm_secure+0x1c8>

	case SECURITY_06_LEVEL:
		/* MIC-64 & Encryption at Security Level -6 */
		mic_len = LEN_MIC_64;
		enc_flag = ENCRYPTION_REQD;
    2814:	2301      	movs	r3, #1
    2816:	4698      	mov	r8, r3
		mic_len = LEN_MIC_64;
    2818:	2708      	movs	r7, #8
		break;
    281a:	e0af      	b.n	297c <stb_ccm_secure+0x1c8>

	case SECURITY_07_LEVEL:
		/* MIC-128 & Encryption at Security Level -7 */
		mic_len = LEN_MIC_128;
		enc_flag = ENCRYPTION_REQD;
    281c:	2301      	movs	r3, #1
    281e:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    2820:	2710      	movs	r7, #16
		break;
    2822:	e0ab      	b.n	297c <stb_ccm_secure+0x1c8>
		break;
	}

	/* Test on correct parameters. */

	if ((sec_level & ~0x7) ||
    2824:	2307      	movs	r3, #7
    2826:	439f      	bics	r7, r3
    2828:	d000      	beq.n	282c <stb_ccm_secure+0x78>
    282a:	e0b5      	b.n	2998 <stb_ccm_secure+0x1e4>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    282c:	46b8      	mov	r8, r7
    282e:	e0a5      	b.n	297c <stb_ccm_secure+0x1c8>
			(nonce == NULL) ||
			((uint16_t)pld_len + (uint16_t)hdr_len +
			(uint16_t)mic_len > 127)
			) {
#if (SAL_TYPE != ATXMEGA_SAL)
		TRX_SLEEP();
    2830:	4b65      	ldr	r3, [pc, #404]	; (29c8 <stb_ccm_secure+0x214>)
    2832:	4798      	blx	r3
    2834:	e0b5      	b.n	29a2 <stb_ccm_secure+0x1ee>
		sal_aes_clean_up();
#endif
		return (STB_CCM_ILLPARM);
	}

	if (key_change && (key == NULL)) {
    2836:	4b65      	ldr	r3, [pc, #404]	; (29cc <stb_ccm_secure+0x218>)
    2838:	781b      	ldrb	r3, [r3, #0]
    283a:	2b00      	cmp	r3, #0
    283c:	d01a      	beq.n	2874 <stb_ccm_secure+0xc0>
    283e:	2c00      	cmp	r4, #0
    2840:	d00d      	beq.n	285e <stb_ccm_secure+0xaa>
	if (key_change) {
		/*
		 * Key must be non-NULL because of test above, and
		 * ECB encryption is always the initial encryption mode.
		 */
		sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2842:	2200      	movs	r2, #0
    2844:	2100      	movs	r1, #0
    2846:	0020      	movs	r0, r4
    2848:	4b61      	ldr	r3, [pc, #388]	; (29d0 <stb_ccm_secure+0x21c>)
    284a:	4798      	blx	r3
		memcpy(last_key, key, AES_KEYSIZE);
    284c:	2210      	movs	r2, #16
    284e:	0021      	movs	r1, r4
    2850:	4860      	ldr	r0, [pc, #384]	; (29d4 <stb_ccm_secure+0x220>)
    2852:	4b61      	ldr	r3, [pc, #388]	; (29d8 <stb_ccm_secure+0x224>)
    2854:	4798      	blx	r3
		key_change = false;
    2856:	2200      	movs	r2, #0
    2858:	4b5c      	ldr	r3, [pc, #368]	; (29cc <stb_ccm_secure+0x218>)
    285a:	701a      	strb	r2, [r3, #0]
    285c:	e01e      	b.n	289c <stb_ccm_secure+0xe8>
		TRX_SLEEP();
    285e:	4b57      	ldr	r3, [pc, #348]	; (29bc <stb_ccm_secure+0x208>)
    2860:	781b      	ldrb	r3, [r3, #0]
    2862:	2b01      	cmp	r3, #1
    2864:	d003      	beq.n	286e <stb_ccm_secure+0xba>
		sal_aes_clean_up();
    2866:	4b5d      	ldr	r3, [pc, #372]	; (29dc <stb_ccm_secure+0x228>)
    2868:	4798      	blx	r3
		return (STB_CCM_KEYMISS);
    286a:	2002      	movs	r0, #2
    286c:	e09c      	b.n	29a8 <stb_ccm_secure+0x1f4>
		TRX_SLEEP();
    286e:	4b56      	ldr	r3, [pc, #344]	; (29c8 <stb_ccm_secure+0x214>)
    2870:	4798      	blx	r3
    2872:	e7f8      	b.n	2866 <stb_ccm_secure+0xb2>
	if (!key_change && key != NULL) { /* There was some previous key. */
    2874:	2c00      	cmp	r4, #0
    2876:	d011      	beq.n	289c <stb_ccm_secure+0xe8>
    2878:	220f      	movs	r2, #15
			key_change |= (last_key[i] ^ key[i]);
    287a:	4956      	ldr	r1, [pc, #344]	; (29d4 <stb_ccm_secure+0x220>)
    287c:	0018      	movs	r0, r3
    287e:	46ac      	mov	ip, r5
    2880:	5c53      	ldrb	r3, [r2, r1]
    2882:	5ca5      	ldrb	r5, [r4, r2]
    2884:	406b      	eors	r3, r5
    2886:	4303      	orrs	r3, r0
    2888:	1e58      	subs	r0, r3, #1
    288a:	4183      	sbcs	r3, r0
    288c:	b2d8      	uxtb	r0, r3
		for (i = AES_BLOCKSIZE; i--; /* */) {
    288e:	3a01      	subs	r2, #1
    2890:	d2f6      	bcs.n	2880 <stb_ccm_secure+0xcc>
    2892:	4665      	mov	r5, ip
    2894:	4a4d      	ldr	r2, [pc, #308]	; (29cc <stb_ccm_secure+0x218>)
    2896:	7010      	strb	r0, [r2, #0]
	if (key_change) {
    2898:	2800      	cmp	r0, #0
    289a:	d1d2      	bne.n	2842 <stb_ccm_secure+0x8e>
	}

	/* Prepare nonce. */
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */

	if (mic_len > 0) {
    289c:	2f00      	cmp	r7, #0
    289e:	d129      	bne.n	28f4 <stb_ccm_secure+0x140>
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */
    28a0:	2301      	movs	r3, #1
    28a2:	702b      	strb	r3, [r5, #0]
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
	}

	if (hdr_len) {
    28a4:	9b04      	ldr	r3, [sp, #16]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d003      	beq.n	28b2 <stb_ccm_secure+0xfe>
		nonce[0] |= ADATA;
    28aa:	782b      	ldrb	r3, [r5, #0]
    28ac:	2240      	movs	r2, #64	; 0x40
    28ae:	4313      	orrs	r3, r2
    28b0:	702b      	strb	r3, [r5, #0]
	}

	nonce_0 = nonce[0];
    28b2:	782b      	ldrb	r3, [r5, #0]
    28b4:	4699      	mov	r9, r3
	nonce[AES_BLOCKSIZE - 2] = 0;
    28b6:	2300      	movs	r3, #0
    28b8:	73ab      	strb	r3, [r5, #14]

	if (aes_dir == AES_DIR_ENCRYPT) {
    28ba:	4653      	mov	r3, sl
    28bc:	2b00      	cmp	r3, #0
    28be:	d12a      	bne.n	2916 <stb_ccm_secure+0x162>
		/* Authenticate. */
		if (mic_len > 0) {
    28c0:	2f00      	cmp	r7, #0
    28c2:	d003      	beq.n	28cc <stb_ccm_secure+0x118>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    28c4:	73ee      	strb	r6, [r5, #15]

			if (ENCRYPTION_REQD == enc_flag) {
    28c6:	4643      	mov	r3, r8
    28c8:	2b01      	cmp	r3, #1
    28ca:	d01a      	beq.n	2902 <stb_ccm_secure+0x14e>
						hdr_len,
						pld_len);
			}
		}

		nonce[0] = PLAINTEXT_FLAG;
    28cc:	2301      	movs	r3, #1
    28ce:	702b      	strb	r3, [r5, #0]
		encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    28d0:	9b03      	ldr	r3, [sp, #12]
    28d2:	9a04      	ldr	r2, [sp, #16]
    28d4:	4694      	mov	ip, r2
    28d6:	4463      	add	r3, ip
    28d8:	0018      	movs	r0, r3
    28da:	0033      	movs	r3, r6
    28dc:	003a      	movs	r2, r7
    28de:	0029      	movs	r1, r5
    28e0:	4c3f      	ldr	r4, [pc, #252]	; (29e0 <stb_ccm_secure+0x22c>)
    28e2:	47a0      	blx	r4
			}
		}
	}

#if (SAL_TYPE != ATXMEGA_SAL)
	TRX_SLEEP();
    28e4:	4b35      	ldr	r3, [pc, #212]	; (29bc <stb_ccm_secure+0x208>)
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	2b01      	cmp	r3, #1
    28ea:	d03d      	beq.n	2968 <stb_ccm_secure+0x1b4>
	sal_aes_clean_up();
    28ec:	4b3b      	ldr	r3, [pc, #236]	; (29dc <stb_ccm_secure+0x228>)
    28ee:	4798      	blx	r3
#endif
	return (STB_CCM_OK);
    28f0:	2000      	movs	r0, #0
    28f2:	e059      	b.n	29a8 <stb_ccm_secure+0x1f4>
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
    28f4:	9b05      	ldr	r3, [sp, #20]
    28f6:	3b02      	subs	r3, #2
    28f8:	009b      	lsls	r3, r3, #2
    28fa:	2201      	movs	r2, #1
    28fc:	4313      	orrs	r3, r2
    28fe:	702b      	strb	r3, [r5, #0]
    2900:	e7d0      	b.n	28a4 <stb_ccm_secure+0xf0>
						buffer + hdr_len + pld_len,
    2902:	9b04      	ldr	r3, [sp, #16]
    2904:	1999      	adds	r1, r3, r6
				compute_mic(buffer,
    2906:	9803      	ldr	r0, [sp, #12]
    2908:	4684      	mov	ip, r0
    290a:	4461      	add	r1, ip
    290c:	9600      	str	r6, [sp, #0]
    290e:	002a      	movs	r2, r5
    2910:	4c34      	ldr	r4, [pc, #208]	; (29e4 <stb_ccm_secure+0x230>)
    2912:	47a0      	blx	r4
    2914:	e7da      	b.n	28cc <stb_ccm_secure+0x118>
		if (enc_flag == ENCRYPTION_REQD) {
    2916:	4643      	mov	r3, r8
    2918:	2b01      	cmp	r3, #1
    291a:	d00d      	beq.n	2938 <stb_ccm_secure+0x184>
		if (mic_len > 0) {
    291c:	2f00      	cmp	r7, #0
    291e:	d0e1      	beq.n	28e4 <stb_ccm_secure+0x130>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    2920:	73ee      	strb	r6, [r5, #15]
			buffer += hdr_len + pld_len;
    2922:	9b03      	ldr	r3, [sp, #12]
    2924:	445b      	add	r3, fp
    2926:	0018      	movs	r0, r3
			if (memcmp(buffer, rcvd_mic, mic_len)) {
    2928:	003a      	movs	r2, r7
    292a:	a906      	add	r1, sp, #24
    292c:	4b2e      	ldr	r3, [pc, #184]	; (29e8 <stb_ccm_secure+0x234>)
    292e:	4798      	blx	r3
    2930:	2800      	cmp	r0, #0
    2932:	d0d7      	beq.n	28e4 <stb_ccm_secure+0x130>
				return STB_CCM_MICERR;
    2934:	2003      	movs	r0, #3
    2936:	e037      	b.n	29a8 <stb_ccm_secure+0x1f4>
			nonce[0] = PLAINTEXT_FLAG;
    2938:	702b      	strb	r3, [r5, #0]
			encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    293a:	9b03      	ldr	r3, [sp, #12]
    293c:	9a04      	ldr	r2, [sp, #16]
    293e:	4694      	mov	ip, r2
    2940:	4463      	add	r3, ip
    2942:	0018      	movs	r0, r3
    2944:	0033      	movs	r3, r6
    2946:	003a      	movs	r2, r7
    2948:	0029      	movs	r1, r5
    294a:	4c25      	ldr	r4, [pc, #148]	; (29e0 <stb_ccm_secure+0x22c>)
    294c:	47a0      	blx	r4
		if (mic_len > 0) {
    294e:	2f00      	cmp	r7, #0
    2950:	d0c8      	beq.n	28e4 <stb_ccm_secure+0x130>
			nonce[0] = nonce_0;
    2952:	464b      	mov	r3, r9
    2954:	702b      	strb	r3, [r5, #0]
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    2956:	73ee      	strb	r6, [r5, #15]
				compute_mic(buffer,
    2958:	9600      	str	r6, [sp, #0]
    295a:	9b04      	ldr	r3, [sp, #16]
    295c:	002a      	movs	r2, r5
    295e:	a906      	add	r1, sp, #24
    2960:	9803      	ldr	r0, [sp, #12]
    2962:	4c20      	ldr	r4, [pc, #128]	; (29e4 <stb_ccm_secure+0x230>)
    2964:	47a0      	blx	r4
    2966:	e7dc      	b.n	2922 <stb_ccm_secure+0x16e>
	TRX_SLEEP();
    2968:	4b17      	ldr	r3, [pc, #92]	; (29c8 <stb_ccm_secure+0x214>)
    296a:	4798      	blx	r3
    296c:	e7be      	b.n	28ec <stb_ccm_secure+0x138>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    296e:	2300      	movs	r3, #0
    2970:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    2972:	2704      	movs	r7, #4
    2974:	e002      	b.n	297c <stb_ccm_secure+0x1c8>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    2976:	2300      	movs	r3, #0
    2978:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    297a:	2710      	movs	r7, #16
	if ((sec_level & ~0x7) ||
    297c:	9b03      	ldr	r3, [sp, #12]
    297e:	2b00      	cmp	r3, #0
    2980:	d00a      	beq.n	2998 <stb_ccm_secure+0x1e4>
			(buffer == NULL) ||
    2982:	2d00      	cmp	r5, #0
    2984:	d008      	beq.n	2998 <stb_ccm_secure+0x1e4>
			((uint16_t)pld_len + (uint16_t)hdr_len +
    2986:	9b04      	ldr	r3, [sp, #16]
    2988:	469b      	mov	fp, r3
    298a:	44b3      	add	fp, r6
			(uint16_t)mic_len > 127)
    298c:	9705      	str	r7, [sp, #20]
			((uint16_t)pld_len + (uint16_t)hdr_len +
    298e:	465b      	mov	r3, fp
    2990:	19db      	adds	r3, r3, r7
			(nonce == NULL) ||
    2992:	2b7f      	cmp	r3, #127	; 0x7f
    2994:	dc00      	bgt.n	2998 <stb_ccm_secure+0x1e4>
    2996:	e74e      	b.n	2836 <stb_ccm_secure+0x82>
		TRX_SLEEP();
    2998:	4b08      	ldr	r3, [pc, #32]	; (29bc <stb_ccm_secure+0x208>)
    299a:	781b      	ldrb	r3, [r3, #0]
    299c:	2b01      	cmp	r3, #1
    299e:	d100      	bne.n	29a2 <stb_ccm_secure+0x1ee>
    29a0:	e746      	b.n	2830 <stb_ccm_secure+0x7c>
		sal_aes_clean_up();
    29a2:	4b0e      	ldr	r3, [pc, #56]	; (29dc <stb_ccm_secure+0x228>)
    29a4:	4798      	blx	r3
		return (STB_CCM_ILLPARM);
    29a6:	2001      	movs	r0, #1
}
    29a8:	b00b      	add	sp, #44	; 0x2c
    29aa:	bc3c      	pop	{r2, r3, r4, r5}
    29ac:	4690      	mov	r8, r2
    29ae:	4699      	mov	r9, r3
    29b0:	46a2      	mov	sl, r4
    29b2:	46ab      	mov	fp, r5
    29b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	200001c1 	.word	0x200001c1
    29bc:	200001c0 	.word	0x200001c0
    29c0:	00003091 	.word	0x00003091
    29c4:	00007f30 	.word	0x00007f30
    29c8:	00002669 	.word	0x00002669
    29cc:	20000048 	.word	0x20000048
    29d0:	00003151 	.word	0x00003151
    29d4:	200001b0 	.word	0x200001b0
    29d8:	0000754f 	.word	0x0000754f
    29dc:	000030e1 	.word	0x000030e1
    29e0:	00002add 	.word	0x00002add
    29e4:	00002a51 	.word	0x00002a51
    29e8:	00007531 	.word	0x00007531

000029ec <encrypt_with_padding>:
 *
 * @param start Pointer to start address
 * @param buflen Number of bytes to be encrypted; if 0, nothing happens
 */
void encrypt_with_padding(uint8_t *start, uint8_t buflen)
{
    29ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ee:	b085      	sub	sp, #20
    29f0:	0004      	movs	r4, r0
    29f2:	000e      	movs	r6, r1
	/* Encrypt the "full blocks". */
	while (buflen >= AES_BLOCKSIZE) {
    29f4:	290f      	cmp	r1, #15
    29f6:	d90f      	bls.n	2a18 <encrypt_with_padding+0x2c>
    29f8:	000d      	movs	r5, r1
    29fa:	3d10      	subs	r5, #16
    29fc:	b2ed      	uxtb	r5, r5
    29fe:	092d      	lsrs	r5, r5, #4
    2a00:	3501      	adds	r5, #1
    2a02:	012d      	lsls	r5, r5, #4
    2a04:	1945      	adds	r5, r0, r5
#if (SAL_TYPE == AT86RF2xx)
		sal_aes_wrrd(start, NULL);
    2a06:	4f0f      	ldr	r7, [pc, #60]	; (2a44 <encrypt_with_padding+0x58>)
    2a08:	2100      	movs	r1, #0
    2a0a:	0020      	movs	r0, r4
    2a0c:	47b8      	blx	r7
#else
		sal_aes_exec(start);
#endif
		start += AES_BLOCKSIZE;
    2a0e:	3410      	adds	r4, #16
	while (buflen >= AES_BLOCKSIZE) {
    2a10:	42ac      	cmp	r4, r5
    2a12:	d1f9      	bne.n	2a08 <encrypt_with_padding+0x1c>
    2a14:	230f      	movs	r3, #15
    2a16:	401e      	ands	r6, r3
		buflen -= AES_BLOCKSIZE;
	}

	/* Pad the possible rest and encrypt it. */
	if (buflen) {
    2a18:	2e00      	cmp	r6, #0
    2a1a:	d101      	bne.n	2a20 <encrypt_with_padding+0x34>
		sal_aes_wrrd(locbuf, NULL);
#else
		sal_aes_exec(locbuf);
#endif
	}
}
    2a1c:	b005      	add	sp, #20
    2a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(locbuf, start, buflen);
    2a20:	0032      	movs	r2, r6
    2a22:	0021      	movs	r1, r4
    2a24:	4668      	mov	r0, sp
    2a26:	4b08      	ldr	r3, [pc, #32]	; (2a48 <encrypt_with_padding+0x5c>)
    2a28:	4798      	blx	r3
		memset(locbuf + buflen, 0, AES_BLOCKSIZE - buflen);
    2a2a:	2210      	movs	r2, #16
    2a2c:	1b92      	subs	r2, r2, r6
    2a2e:	0030      	movs	r0, r6
    2a30:	4468      	add	r0, sp
    2a32:	2100      	movs	r1, #0
    2a34:	4b05      	ldr	r3, [pc, #20]	; (2a4c <encrypt_with_padding+0x60>)
    2a36:	4798      	blx	r3
		sal_aes_wrrd(locbuf, NULL);
    2a38:	2100      	movs	r1, #0
    2a3a:	4668      	mov	r0, sp
    2a3c:	4b01      	ldr	r3, [pc, #4]	; (2a44 <encrypt_with_padding+0x58>)
    2a3e:	4798      	blx	r3
}
    2a40:	e7ec      	b.n	2a1c <encrypt_with_padding+0x30>
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	000030e5 	.word	0x000030e5
    2a48:	0000754f 	.word	0x0000754f
    2a4c:	00007561 	.word	0x00007561

00002a50 <compute_mic>:
void compute_mic(uint8_t *buffer,
		uint8_t *mic,
		uint8_t *nonce,
		uint8_t hdr_len,
		uint8_t pld_len)
{
    2a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a52:	b087      	sub	sp, #28
    2a54:	0005      	movs	r5, r0
    2a56:	9100      	str	r1, [sp, #0]
    2a58:	9201      	str	r2, [sp, #4]
    2a5a:	001c      	movs	r4, r3
    2a5c:	ab0c      	add	r3, sp, #48	; 0x30
    2a5e:	781e      	ldrb	r6, [r3, #0]
	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2a60:	2200      	movs	r2, #0
    2a62:	2100      	movs	r1, #0
    2a64:	2000      	movs	r0, #0
    2a66:	4f18      	ldr	r7, [pc, #96]	; (2ac8 <compute_mic+0x78>)
    2a68:	47b8      	blx	r7
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(nonce, NULL);
    2a6a:	2100      	movs	r1, #0
    2a6c:	9801      	ldr	r0, [sp, #4]
    2a6e:	4b17      	ldr	r3, [pc, #92]	; (2acc <compute_mic+0x7c>)
    2a70:	4798      	blx	r3
#else
	sal_aes_exec(nonce);
#endif
	sal_aes_setup(NULL, AES_MODE_CBC, AES_DIR_ENCRYPT);
    2a72:	2200      	movs	r2, #0
    2a74:	2102      	movs	r1, #2
    2a76:	2000      	movs	r0, #0
    2a78:	47b8      	blx	r7

	if (hdr_len) {
    2a7a:	2c00      	cmp	r4, #0
    2a7c:	d108      	bne.n	2a90 <compute_mic+0x40>
			encrypt_with_padding(buffer + firstlen,
					hdr_len - firstlen);
		}
	}

	encrypt_with_padding(buffer + hdr_len, pld_len);
    2a7e:	1928      	adds	r0, r5, r4
    2a80:	0031      	movs	r1, r6
    2a82:	4b13      	ldr	r3, [pc, #76]	; (2ad0 <compute_mic+0x80>)
    2a84:	4798      	blx	r3

	sal_aes_read(mic);
    2a86:	9800      	ldr	r0, [sp, #0]
    2a88:	4b12      	ldr	r3, [pc, #72]	; (2ad4 <compute_mic+0x84>)
    2a8a:	4798      	blx	r3
}
    2a8c:	b007      	add	sp, #28
    2a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		firstlen = MIN(AES_BLOCKSIZE - 2, hdr_len);
    2a90:	1c27      	adds	r7, r4, #0
    2a92:	2c0e      	cmp	r4, #14
    2a94:	d900      	bls.n	2a98 <compute_mic+0x48>
    2a96:	270e      	movs	r7, #14
    2a98:	b2ff      	uxtb	r7, r7
		locbuf[0] = 0;
    2a9a:	2300      	movs	r3, #0
    2a9c:	aa02      	add	r2, sp, #8
    2a9e:	7013      	strb	r3, [r2, #0]
		locbuf[1] = hdr_len;
    2aa0:	0013      	movs	r3, r2
    2aa2:	7054      	strb	r4, [r2, #1]
		memcpy(locbuf + 2, buffer, firstlen);
    2aa4:	003a      	movs	r2, r7
    2aa6:	0029      	movs	r1, r5
    2aa8:	1c98      	adds	r0, r3, #2
    2aaa:	4b0b      	ldr	r3, [pc, #44]	; (2ad8 <compute_mic+0x88>)
    2aac:	4798      	blx	r3
		encrypt_with_padding(locbuf, firstlen + 2);
    2aae:	1cb9      	adds	r1, r7, #2
    2ab0:	b2c9      	uxtb	r1, r1
    2ab2:	a802      	add	r0, sp, #8
    2ab4:	4b06      	ldr	r3, [pc, #24]	; (2ad0 <compute_mic+0x80>)
    2ab6:	4798      	blx	r3
		if (firstlen < hdr_len) {
    2ab8:	42bc      	cmp	r4, r7
    2aba:	d9e0      	bls.n	2a7e <compute_mic+0x2e>
			encrypt_with_padding(buffer + firstlen,
    2abc:	1be1      	subs	r1, r4, r7
    2abe:	b2c9      	uxtb	r1, r1
    2ac0:	19e8      	adds	r0, r5, r7
    2ac2:	4b03      	ldr	r3, [pc, #12]	; (2ad0 <compute_mic+0x80>)
    2ac4:	4798      	blx	r3
    2ac6:	e7da      	b.n	2a7e <compute_mic+0x2e>
    2ac8:	00003151 	.word	0x00003151
    2acc:	000030e5 	.word	0x000030e5
    2ad0:	000029ed 	.word	0x000029ed
    2ad4:	00003289 	.word	0x00003289
    2ad8:	0000754f 	.word	0x0000754f

00002adc <encrypt_pldmic>:
 */
void encrypt_pldmic(uint8_t *buffer,
		uint8_t *nonce,
		uint8_t mic_len,
		uint8_t pld_len)
{
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ade:	46d6      	mov	lr, sl
    2ae0:	464f      	mov	r7, r9
    2ae2:	4646      	mov	r6, r8
    2ae4:	b5c0      	push	{r6, r7, lr}
    2ae6:	b084      	sub	sp, #16
    2ae8:	0004      	movs	r4, r0
    2aea:	000f      	movs	r7, r1
    2aec:	0016      	movs	r6, r2
    2aee:	001d      	movs	r5, r3
	uint8_t ctr;
	uint8_t i;
	uint8_t keystream[AES_BLOCKSIZE];
	uint8_t *keystreamptr;

	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2af0:	2200      	movs	r2, #0
    2af2:	2100      	movs	r1, #0
    2af4:	2000      	movs	r0, #0
    2af6:	4b31      	ldr	r3, [pc, #196]	; (2bbc <encrypt_pldmic+0xe0>)
    2af8:	4798      	blx	r3

	/* Init first keystream block. */
	nonce[AES_BLOCKSIZE - 1] = ctr = 1;
    2afa:	2301      	movs	r3, #1
    2afc:	73fb      	strb	r3, [r7, #15]

	if (pld_len > 0) {
    2afe:	2d00      	cmp	r5, #0
    2b00:	d106      	bne.n	2b10 <encrypt_pldmic+0x34>
{
    2b02:	2301      	movs	r3, #1
    2b04:	469a      	mov	sl, r3
				/* Prepare the keystream for MIC. */
				nonce[AES_BLOCKSIZE - 1] = 0;

				sal_aes_wrrd(nonce, keystream);
			} else {
				sal_aes_read(keystream);
    2b06:	4b2e      	ldr	r3, [pc, #184]	; (2bc0 <encrypt_pldmic+0xe4>)
    2b08:	4699      	mov	r9, r3
				sal_aes_wrrd(nonce, keystream);
    2b0a:	4b2e      	ldr	r3, [pc, #184]	; (2bc4 <encrypt_pldmic+0xe8>)
    2b0c:	4698      	mov	r8, r3
    2b0e:	e02e      	b.n	2b6e <encrypt_pldmic+0x92>
		sal_aes_wrrd(nonce, NULL);
    2b10:	2100      	movs	r1, #0
    2b12:	0038      	movs	r0, r7
    2b14:	4b2b      	ldr	r3, [pc, #172]	; (2bc4 <encrypt_pldmic+0xe8>)
    2b16:	4798      	blx	r3
    2b18:	e7f3      	b.n	2b02 <encrypt_pldmic+0x26>
				sal_aes_read(keystream);
    2b1a:	4668      	mov	r0, sp
    2b1c:	47c8      	blx	r9
    2b1e:	e02f      	b.n	2b80 <encrypt_pldmic+0xa4>
			}
		} else {
			/* Prepare the next keystream block. */
			nonce[AES_BLOCKSIZE - 1] = ++ctr;
    2b20:	4653      	mov	r3, sl
    2b22:	3301      	adds	r3, #1
    2b24:	b2db      	uxtb	r3, r3
    2b26:	469a      	mov	sl, r3
    2b28:	73fb      	strb	r3, [r7, #15]

			sal_aes_wrrd(nonce, keystream);
    2b2a:	4669      	mov	r1, sp
    2b2c:	0038      	movs	r0, r7
    2b2e:	4b25      	ldr	r3, [pc, #148]	; (2bc4 <encrypt_pldmic+0xe8>)
    2b30:	4798      	blx	r3
		}

		/* En/decrypt payload. */

		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2b32:	1c2b      	adds	r3, r5, #0
    2b34:	2d10      	cmp	r5, #16
    2b36:	d900      	bls.n	2b3a <encrypt_pldmic+0x5e>
    2b38:	2310      	movs	r3, #16
    2b3a:	b2db      	uxtb	r3, r3
				i--;
    2b3c:	1e58      	subs	r0, r3, #1
    2b3e:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2b40:	2b00      	cmp	r3, #0
    2b42:	d105      	bne.n	2b50 <encrypt_pldmic+0x74>
    2b44:	e011      	b.n	2b6a <encrypt_pldmic+0x8e>
    2b46:	b2db      	uxtb	r3, r3
				i--;
    2b48:	1e58      	subs	r0, r3, #1
    2b4a:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d01c      	beq.n	2b8a <encrypt_pldmic+0xae>
    2b50:	3001      	adds	r0, #1
{
    2b52:	2300      	movs	r3, #0
		                /* */) {
			*buffer++ ^= *keystreamptr++;
    2b54:	466a      	mov	r2, sp
    2b56:	5c9a      	ldrb	r2, [r3, r2]
    2b58:	5ce1      	ldrb	r1, [r4, r3]
    2b5a:	404a      	eors	r2, r1
    2b5c:	54e2      	strb	r2, [r4, r3]
    2b5e:	3301      	adds	r3, #1
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2b60:	4298      	cmp	r0, r3
    2b62:	d1f7      	bne.n	2b54 <encrypt_pldmic+0x78>
    2b64:	18e4      	adds	r4, r4, r3
		}

		if (pld_len <= AES_BLOCKSIZE) {
    2b66:	2d10      	cmp	r5, #16
    2b68:	d90f      	bls.n	2b8a <encrypt_pldmic+0xae>
			break;
		}

		pld_len -= AES_BLOCKSIZE;
    2b6a:	3d10      	subs	r5, #16
    2b6c:	b2ed      	uxtb	r5, r5
		if (pld_len <= AES_BLOCKSIZE) { /* Last block */
    2b6e:	2d10      	cmp	r5, #16
    2b70:	d8d6      	bhi.n	2b20 <encrypt_pldmic+0x44>
			if (mic_len) {
    2b72:	2e00      	cmp	r6, #0
    2b74:	d0d1      	beq.n	2b1a <encrypt_pldmic+0x3e>
				nonce[AES_BLOCKSIZE - 1] = 0;
    2b76:	2300      	movs	r3, #0
    2b78:	73fb      	strb	r3, [r7, #15]
				sal_aes_wrrd(nonce, keystream);
    2b7a:	4669      	mov	r1, sp
    2b7c:	0038      	movs	r0, r7
    2b7e:	47c0      	blx	r8
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2b80:	1c2b      	adds	r3, r5, #0
    2b82:	2d10      	cmp	r5, #16
    2b84:	d9df      	bls.n	2b46 <encrypt_pldmic+0x6a>
    2b86:	2310      	movs	r3, #16
    2b88:	e7dd      	b.n	2b46 <encrypt_pldmic+0x6a>
	}

	/* En/decrypt MIC. */

	if (mic_len) {
    2b8a:	2e00      	cmp	r6, #0
    2b8c:	d105      	bne.n	2b9a <encrypt_pldmic+0xbe>

		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
			*buffer++ ^= *keystreamptr++;
		}
	}
}
    2b8e:	b004      	add	sp, #16
    2b90:	bc1c      	pop	{r2, r3, r4}
    2b92:	4690      	mov	r8, r2
    2b94:	4699      	mov	r9, r3
    2b96:	46a2      	mov	sl, r4
    2b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sal_aes_read(keystream);
    2b9a:	4668      	mov	r0, sp
    2b9c:	4b08      	ldr	r3, [pc, #32]	; (2bc0 <encrypt_pldmic+0xe4>)
    2b9e:	4798      	blx	r3
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    2ba0:	3e01      	subs	r6, #1
    2ba2:	b2f2      	uxtb	r2, r6
    2ba4:	3201      	adds	r2, #1
    2ba6:	2300      	movs	r3, #0
			*buffer++ ^= *keystreamptr++;
    2ba8:	4669      	mov	r1, sp
    2baa:	5c59      	ldrb	r1, [r3, r1]
    2bac:	5ce0      	ldrb	r0, [r4, r3]
    2bae:	4041      	eors	r1, r0
    2bb0:	54e1      	strb	r1, [r4, r3]
    2bb2:	3301      	adds	r3, #1
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    2bb4:	4293      	cmp	r3, r2
    2bb6:	d1f7      	bne.n	2ba8 <encrypt_pldmic+0xcc>
    2bb8:	e7e9      	b.n	2b8e <encrypt_pldmic+0xb2>
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	00003151 	.word	0x00003151
    2bc0:	00003289 	.word	0x00003289
    2bc4:	000030e5 	.word	0x000030e5

00002bc8 <MiMem_Alloc>:
********************************************************************/
uint8_t* MiMem_Alloc(uint8_t size)
{
    uint8_t loopIndex = 0;

    if (size <= MIMEM_BUFFER_SIZE)
    2bc8:	28a0      	cmp	r0, #160	; 0xa0
    2bca:	d81a      	bhi.n	2c02 <MiMem_Alloc+0x3a>
    {
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
        {
            if (mimemBuffers[loopIndex].bufferFlag == false)
    2bcc:	23a4      	movs	r3, #164	; 0xa4
    2bce:	4a0e      	ldr	r2, [pc, #56]	; (2c08 <MiMem_Alloc+0x40>)
    2bd0:	5cd3      	ldrb	r3, [r2, r3]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d00b      	beq.n	2bee <MiMem_Alloc+0x26>
    2bd6:	4a0d      	ldr	r2, [pc, #52]	; (2c0c <MiMem_Alloc+0x44>)
    2bd8:	2301      	movs	r3, #1
    2bda:	0018      	movs	r0, r3
    2bdc:	7811      	ldrb	r1, [r2, #0]
    2bde:	2900      	cmp	r1, #0
    2be0:	d006      	beq.n	2bf0 <MiMem_Alloc+0x28>
    2be2:	3301      	adds	r3, #1
    2be4:	32a8      	adds	r2, #168	; 0xa8
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    2be6:	2b0a      	cmp	r3, #10
    2be8:	d1f7      	bne.n	2bda <MiMem_Alloc+0x12>
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
            }
        }
    }
    //printf("\r\n MiMem Buffer Full/unavailable for given size");
    return NULL;
    2bea:	2000      	movs	r0, #0
}
    2bec:	4770      	bx	lr
            if (mimemBuffers[loopIndex].bufferFlag == false)
    2bee:	2000      	movs	r0, #0
                mimemBuffers[loopIndex].bufferFlag = true;
    2bf0:	23a8      	movs	r3, #168	; 0xa8
    2bf2:	4343      	muls	r3, r0
    2bf4:	4804      	ldr	r0, [pc, #16]	; (2c08 <MiMem_Alloc+0x40>)
    2bf6:	18c0      	adds	r0, r0, r3
    2bf8:	0003      	movs	r3, r0
    2bfa:	33a4      	adds	r3, #164	; 0xa4
    2bfc:	2201      	movs	r2, #1
    2bfe:	701a      	strb	r2, [r3, #0]
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
    2c00:	e7f4      	b.n	2bec <MiMem_Alloc+0x24>
    return NULL;
    2c02:	2000      	movs	r0, #0
    2c04:	e7f2      	b.n	2bec <MiMem_Alloc+0x24>
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	20000b1c 	.word	0x20000b1c
    2c0c:	20000c68 	.word	0x20000c68

00002c10 <MiMem_Free>:
* the given memory else returns error
*
* Note:			    none
********************************************************************/
uint8_t MiMem_Free(uint8_t* buffPtr)
{
    2c10:	b530      	push	{r4, r5, lr}
    2c12:	4b0d      	ldr	r3, [pc, #52]	; (2c48 <MiMem_Free+0x38>)
    2c14:	2200      	movs	r2, #0
    2c16:	e003      	b.n	2c20 <MiMem_Free+0x10>
    2c18:	3201      	adds	r2, #1
    2c1a:	33a8      	adds	r3, #168	; 0xa8
	uint8_t loopIndex = 0;
	for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    2c1c:	2a0a      	cmp	r2, #10
    2c1e:	d010      	beq.n	2c42 <MiMem_Free+0x32>
	{
		if ((mimemBuffers[loopIndex].bufferFlag == true) &&
    2c20:	0015      	movs	r5, r2
    2c22:	0019      	movs	r1, r3
    2c24:	31a4      	adds	r1, #164	; 0xa4
    2c26:	7809      	ldrb	r1, [r1, #0]
    2c28:	2900      	cmp	r1, #0
    2c2a:	d0f5      	beq.n	2c18 <MiMem_Free+0x8>
    2c2c:	4298      	cmp	r0, r3
    2c2e:	d1f3      	bne.n	2c18 <MiMem_Free+0x8>
		   ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer == buffPtr))
		{
			//printf("\r\n MiMem Buffer Free: %d", loopIndex);
			mimemBuffers[loopIndex].bufferFlag = false;
    2c30:	23a8      	movs	r3, #168	; 0xa8
    2c32:	435d      	muls	r5, r3
    2c34:	4b04      	ldr	r3, [pc, #16]	; (2c48 <MiMem_Free+0x38>)
    2c36:	195d      	adds	r5, r3, r5
    2c38:	35a4      	adds	r5, #164	; 0xa4
    2c3a:	2200      	movs	r2, #0
    2c3c:	702a      	strb	r2, [r5, #0]
			return 0;
    2c3e:	2000      	movs	r0, #0
    2c40:	e000      	b.n	2c44 <MiMem_Free+0x34>
		}
	}
	//printf("\r\n MiMem Buffer Already Free");
	return 0xff;
    2c42:	20ff      	movs	r0, #255	; 0xff
}
    2c44:	bd30      	pop	{r4, r5, pc}
    2c46:	46c0      	nop			; (mov r8, r8)
    2c48:	20000b1c 	.word	0x20000b1c

00002c4c <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    2c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c4e:	46c6      	mov	lr, r8
    2c50:	b500      	push	{lr}
    2c52:	0007      	movs	r7, r0
    2c54:	4688      	mov	r8, r1
    2c56:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    2c58:	b672      	cpsid	i
  __ASM volatile ("dmb");
    2c5a:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    2c5e:	2200      	movs	r2, #0
    2c60:	4b1f      	ldr	r3, [pc, #124]	; (2ce0 <miQueueReadOrRemove+0x94>)
    2c62:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    2c64:	7a03      	ldrb	r3, [r0, #8]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d037      	beq.n	2cda <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    2c6a:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    2c6c:	2d00      	cmp	r5, #0
    2c6e:	d019      	beq.n	2ca4 <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    2c70:	2c00      	cmp	r4, #0
    2c72:	d00c      	beq.n	2c8e <miQueueReadOrRemove+0x42>
    2c74:	0026      	movs	r6, r4
    2c76:	e000      	b.n	2c7a <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    2c78:	001c      	movs	r4, r3
				match = search->criteria_func(
    2c7a:	6869      	ldr	r1, [r5, #4]
    2c7c:	6860      	ldr	r0, [r4, #4]
    2c7e:	682b      	ldr	r3, [r5, #0]
    2c80:	4798      	blx	r3
				if (match) {
    2c82:	2800      	cmp	r0, #0
    2c84:	d10f      	bne.n	2ca6 <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    2c86:	6823      	ldr	r3, [r4, #0]
    2c88:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d1f4      	bne.n	2c78 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    2c8e:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    2c90:	2201      	movs	r2, #1
    2c92:	4b13      	ldr	r3, [pc, #76]	; (2ce0 <miQueueReadOrRemove+0x94>)
    2c94:	701a      	strb	r2, [r3, #0]
    2c96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2c9a:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    2c9c:	0020      	movs	r0, r4
    2c9e:	bc04      	pop	{r2}
    2ca0:	4690      	mov	r8, r2
    2ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    2ca4:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    2ca6:	2c00      	cmp	r4, #0
    2ca8:	d0f2      	beq.n	2c90 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    2caa:	4643      	mov	r3, r8
    2cac:	2b00      	cmp	r3, #0
    2cae:	d1ef      	bne.n	2c90 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    2cb0:	683b      	ldr	r3, [r7, #0]
    2cb2:	429c      	cmp	r4, r3
    2cb4:	d00c      	beq.n	2cd0 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    2cb6:	6823      	ldr	r3, [r4, #0]
    2cb8:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	429c      	cmp	r4, r3
    2cbe:	d00a      	beq.n	2cd6 <miQueueReadOrRemove+0x8a>
				q->size--;
    2cc0:	7a3b      	ldrb	r3, [r7, #8]
    2cc2:	3b01      	subs	r3, #1
    2cc4:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    2cc6:	683b      	ldr	r3, [r7, #0]
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d1e1      	bne.n	2c90 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    2ccc:	607b      	str	r3, [r7, #4]
    2cce:	e7df      	b.n	2c90 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    2cd0:	6823      	ldr	r3, [r4, #0]
    2cd2:	603b      	str	r3, [r7, #0]
    2cd4:	e7f1      	b.n	2cba <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    2cd6:	607e      	str	r6, [r7, #4]
    2cd8:	e7f2      	b.n	2cc0 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    2cda:	2400      	movs	r4, #0
    2cdc:	e7d8      	b.n	2c90 <miQueueReadOrRemove+0x44>
    2cde:	46c0      	nop			; (mov r8, r8)
    2ce0:	20000008 	.word	0x20000008

00002ce4 <miQueueInit>:
	q->head = NULL;
    2ce4:	2300      	movs	r3, #0
    2ce6:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    2ce8:	6043      	str	r3, [r0, #4]
	q->size = 0;
    2cea:	7203      	strb	r3, [r0, #8]
}
    2cec:	4770      	bx	lr
	...

00002cf0 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    2cf0:	b672      	cpsid	i
    2cf2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2cf6:	2200      	movs	r2, #0
    2cf8:	4b0a      	ldr	r3, [pc, #40]	; (2d24 <miQueueAppend+0x34>)
    2cfa:	701a      	strb	r2, [r3, #0]
		if (q->size == 0) {
    2cfc:	7a03      	ldrb	r3, [r0, #8]
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d00e      	beq.n	2d20 <miQueueAppend+0x30>
			q->tail->nextItem = buf;
    2d02:	6843      	ldr	r3, [r0, #4]
    2d04:	6019      	str	r1, [r3, #0]
		q->tail = buf;
    2d06:	6041      	str	r1, [r0, #4]
		buf->nextItem = NULL;
    2d08:	2300      	movs	r3, #0
    2d0a:	600b      	str	r3, [r1, #0]
		q->size++;
    2d0c:	7a03      	ldrb	r3, [r0, #8]
    2d0e:	3301      	adds	r3, #1
    2d10:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    2d12:	2201      	movs	r2, #1
    2d14:	4b03      	ldr	r3, [pc, #12]	; (2d24 <miQueueAppend+0x34>)
    2d16:	701a      	strb	r2, [r3, #0]
    2d18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2d1c:	b662      	cpsie	i
} /* miQueueAppend */
    2d1e:	4770      	bx	lr
			q->head = buf;
    2d20:	6001      	str	r1, [r0, #0]
    2d22:	e7f0      	b.n	2d06 <miQueueAppend+0x16>
    2d24:	20000008 	.word	0x20000008

00002d28 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    2d28:	b510      	push	{r4, lr}
    2d2a:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    2d2c:	2100      	movs	r1, #0
    2d2e:	4b01      	ldr	r3, [pc, #4]	; (2d34 <miQueueRemove+0xc>)
    2d30:	4798      	blx	r3
}
    2d32:	bd10      	pop	{r4, pc}
    2d34:	00002c4d 	.word	0x00002c4d

00002d38 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2d38:	b530      	push	{r4, r5, lr}
	if (timers) {
    2d3a:	4b14      	ldr	r3, [pc, #80]	; (2d8c <placeTimer+0x54>)
    2d3c:	681d      	ldr	r5, [r3, #0]
    2d3e:	2d00      	cmp	r5, #0
    2d40:	d01c      	beq.n	2d7c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2d42:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2d44:	6869      	ldr	r1, [r5, #4]
    2d46:	428a      	cmp	r2, r1
    2d48:	d309      	bcc.n	2d5e <placeTimer+0x26>
    2d4a:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2d4c:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d4e:	6823      	ldr	r3, [r4, #0]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d008      	beq.n	2d66 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2d54:	6859      	ldr	r1, [r3, #4]
    2d56:	4291      	cmp	r1, r2
    2d58:	d803      	bhi.n	2d62 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d5a:	001c      	movs	r4, r3
    2d5c:	e7f6      	b.n	2d4c <placeTimer+0x14>
    2d5e:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2d60:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2d62:	1a89      	subs	r1, r1, r2
    2d64:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2d66:	6042      	str	r2, [r0, #4]

		if (prev) {
    2d68:	2c00      	cmp	r4, #0
    2d6a:	d003      	beq.n	2d74 <placeTimer+0x3c>
			timer->next = prev->next;
    2d6c:	6823      	ldr	r3, [r4, #0]
    2d6e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2d70:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2d72:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2d74:	6005      	str	r5, [r0, #0]
			timers = timer;
    2d76:	4b05      	ldr	r3, [pc, #20]	; (2d8c <placeTimer+0x54>)
    2d78:	6018      	str	r0, [r3, #0]
    2d7a:	e7fa      	b.n	2d72 <placeTimer+0x3a>
		timer->next = NULL;
    2d7c:	2300      	movs	r3, #0
    2d7e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2d80:	6883      	ldr	r3, [r0, #8]
    2d82:	6043      	str	r3, [r0, #4]
		timers = timer;
    2d84:	4b01      	ldr	r3, [pc, #4]	; (2d8c <placeTimer+0x54>)
    2d86:	6018      	str	r0, [r3, #0]
}
    2d88:	e7f3      	b.n	2d72 <placeTimer+0x3a>
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	200001c4 	.word	0x200001c4

00002d90 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2d90:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2d92:	4a04      	ldr	r2, [pc, #16]	; (2da4 <SYS_HwExpiry_Cb+0x14>)
    2d94:	7813      	ldrb	r3, [r2, #0]
    2d96:	3301      	adds	r3, #1
    2d98:	b2db      	uxtb	r3, r3
    2d9a:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2d9c:	4802      	ldr	r0, [pc, #8]	; (2da8 <SYS_HwExpiry_Cb+0x18>)
    2d9e:	4b03      	ldr	r3, [pc, #12]	; (2dac <SYS_HwExpiry_Cb+0x1c>)
    2da0:	4798      	blx	r3
}
    2da2:	bd10      	pop	{r4, pc}
    2da4:	200011ac 	.word	0x200011ac
    2da8:	00002710 	.word	0x00002710
    2dac:	0000466d 	.word	0x0000466d

00002db0 <SYS_TimerInit>:
{
    2db0:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2db2:	2400      	movs	r4, #0
    2db4:	4b06      	ldr	r3, [pc, #24]	; (2dd0 <SYS_TimerInit+0x20>)
    2db6:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2db8:	4806      	ldr	r0, [pc, #24]	; (2dd4 <SYS_TimerInit+0x24>)
    2dba:	4b07      	ldr	r3, [pc, #28]	; (2dd8 <SYS_TimerInit+0x28>)
    2dbc:	4798      	blx	r3
	common_tc_init();
    2dbe:	4b07      	ldr	r3, [pc, #28]	; (2ddc <SYS_TimerInit+0x2c>)
    2dc0:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2dc2:	4807      	ldr	r0, [pc, #28]	; (2de0 <SYS_TimerInit+0x30>)
    2dc4:	4b07      	ldr	r3, [pc, #28]	; (2de4 <SYS_TimerInit+0x34>)
    2dc6:	4798      	blx	r3
	timers = NULL;
    2dc8:	4b07      	ldr	r3, [pc, #28]	; (2de8 <SYS_TimerInit+0x38>)
    2dca:	601c      	str	r4, [r3, #0]
}
    2dcc:	bd10      	pop	{r4, pc}
    2dce:	46c0      	nop			; (mov r8, r8)
    2dd0:	200011ac 	.word	0x200011ac
    2dd4:	00002d91 	.word	0x00002d91
    2dd8:	0000475d 	.word	0x0000475d
    2ddc:	000046d9 	.word	0x000046d9
    2de0:	00002710 	.word	0x00002710
    2de4:	0000466d 	.word	0x0000466d
    2de8:	200001c4 	.word	0x200001c4

00002dec <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2dec:	4b0e      	ldr	r3, [pc, #56]	; (2e28 <SYS_TimerStop+0x3c>)
    2dee:	681a      	ldr	r2, [r3, #0]
    2df0:	2a00      	cmp	r2, #0
    2df2:	d014      	beq.n	2e1e <SYS_TimerStop+0x32>
		if (t == timer) {
    2df4:	4282      	cmp	r2, r0
    2df6:	d013      	beq.n	2e20 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2df8:	6813      	ldr	r3, [r2, #0]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d00f      	beq.n	2e1e <SYS_TimerStop+0x32>
		if (t == timer) {
    2dfe:	4298      	cmp	r0, r3
    2e00:	d001      	beq.n	2e06 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e02:	001a      	movs	r2, r3
    2e04:	e7f8      	b.n	2df8 <SYS_TimerStop+0xc>
			if (prev) {
    2e06:	2a00      	cmp	r2, #0
    2e08:	d00a      	beq.n	2e20 <SYS_TimerStop+0x34>
				prev->next = t->next;
    2e0a:	6803      	ldr	r3, [r0, #0]
    2e0c:	6013      	str	r3, [r2, #0]
			if (t->next) {
    2e0e:	6803      	ldr	r3, [r0, #0]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d004      	beq.n	2e1e <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    2e14:	6842      	ldr	r2, [r0, #4]
    2e16:	6859      	ldr	r1, [r3, #4]
    2e18:	468c      	mov	ip, r1
    2e1a:	4462      	add	r2, ip
    2e1c:	605a      	str	r2, [r3, #4]
}
    2e1e:	4770      	bx	lr
				timers = t->next;
    2e20:	4b01      	ldr	r3, [pc, #4]	; (2e28 <SYS_TimerStop+0x3c>)
    2e22:	6802      	ldr	r2, [r0, #0]
    2e24:	601a      	str	r2, [r3, #0]
    2e26:	e7f2      	b.n	2e0e <SYS_TimerStop+0x22>
    2e28:	200001c4 	.word	0x200001c4

00002e2c <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e2c:	4b09      	ldr	r3, [pc, #36]	; (2e54 <SYS_TimerStarted+0x28>)
    2e2e:	681b      	ldr	r3, [r3, #0]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d00a      	beq.n	2e4a <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2e34:	4283      	cmp	r3, r0
    2e36:	d00a      	beq.n	2e4e <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e38:	681b      	ldr	r3, [r3, #0]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d003      	beq.n	2e46 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2e3e:	4298      	cmp	r0, r3
    2e40:	d1fa      	bne.n	2e38 <SYS_TimerStarted+0xc>
			return true;
    2e42:	2001      	movs	r0, #1
    2e44:	e000      	b.n	2e48 <SYS_TimerStarted+0x1c>
	return false;
    2e46:	2000      	movs	r0, #0
}
    2e48:	4770      	bx	lr
	return false;
    2e4a:	2000      	movs	r0, #0
    2e4c:	e7fc      	b.n	2e48 <SYS_TimerStarted+0x1c>
			return true;
    2e4e:	2001      	movs	r0, #1
    2e50:	e7fa      	b.n	2e48 <SYS_TimerStarted+0x1c>
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	200001c4 	.word	0x200001c4

00002e58 <SYS_TimerStart>:
{
    2e58:	b510      	push	{r4, lr}
    2e5a:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2e5c:	4b04      	ldr	r3, [pc, #16]	; (2e70 <SYS_TimerStart+0x18>)
    2e5e:	4798      	blx	r3
    2e60:	2800      	cmp	r0, #0
    2e62:	d000      	beq.n	2e66 <SYS_TimerStart+0xe>
}
    2e64:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2e66:	0020      	movs	r0, r4
    2e68:	4b02      	ldr	r3, [pc, #8]	; (2e74 <SYS_TimerStart+0x1c>)
    2e6a:	4798      	blx	r3
}
    2e6c:	e7fa      	b.n	2e64 <SYS_TimerStart+0xc>
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	00002e2d 	.word	0x00002e2d
    2e74:	00002d39 	.word	0x00002d39

00002e78 <SYS_TimerTaskHandler>:
{
    2e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e7a:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    2e7c:	4b1d      	ldr	r3, [pc, #116]	; (2ef4 <SYS_TimerTaskHandler+0x7c>)
    2e7e:	781b      	ldrb	r3, [r3, #0]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d035      	beq.n	2ef0 <SYS_TimerTaskHandler+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e84:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2e88:	4253      	negs	r3, r2
    2e8a:	4153      	adcs	r3, r2
    2e8c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2e8e:	b672      	cpsid	i
    2e90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2e94:	2100      	movs	r1, #0
    2e96:	4b18      	ldr	r3, [pc, #96]	; (2ef8 <SYS_TimerTaskHandler+0x80>)
    2e98:	7019      	strb	r1, [r3, #0]
	return flags;
    2e9a:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    2e9c:	4a15      	ldr	r2, [pc, #84]	; (2ef4 <SYS_TimerTaskHandler+0x7c>)
    2e9e:	7813      	ldrb	r3, [r2, #0]
    2ea0:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    2ea2:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2ea4:	2800      	cmp	r0, #0
    2ea6:	d005      	beq.n	2eb4 <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    2ea8:	3101      	adds	r1, #1
    2eaa:	4a13      	ldr	r2, [pc, #76]	; (2ef8 <SYS_TimerTaskHandler+0x80>)
    2eac:	7011      	strb	r1, [r2, #0]
    2eae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2eb2:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    2eb4:	009d      	lsls	r5, r3, #2
    2eb6:	18ed      	adds	r5, r5, r3
    2eb8:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    2eba:	4e10      	ldr	r6, [pc, #64]	; (2efc <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    2ebc:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    2ebe:	e005      	b.n	2ecc <SYS_TimerTaskHandler+0x54>
			placeTimer(timer);
    2ec0:	0020      	movs	r0, r4
    2ec2:	4b0f      	ldr	r3, [pc, #60]	; (2f00 <SYS_TimerTaskHandler+0x88>)
    2ec4:	4798      	blx	r3
    2ec6:	e00d      	b.n	2ee4 <SYS_TimerTaskHandler+0x6c>
			timer->handler(timer);
    2ec8:	0020      	movs	r0, r4
    2eca:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    2ecc:	6834      	ldr	r4, [r6, #0]
    2ece:	2c00      	cmp	r4, #0
    2ed0:	d00e      	beq.n	2ef0 <SYS_TimerTaskHandler+0x78>
    2ed2:	6863      	ldr	r3, [r4, #4]
    2ed4:	429d      	cmp	r5, r3
    2ed6:	d309      	bcc.n	2eec <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    2ed8:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    2eda:	6823      	ldr	r3, [r4, #0]
    2edc:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    2ede:	7b23      	ldrb	r3, [r4, #12]
    2ee0:	2b01      	cmp	r3, #1
    2ee2:	d0ed      	beq.n	2ec0 <SYS_TimerTaskHandler+0x48>
		if (timer->handler) {
    2ee4:	6923      	ldr	r3, [r4, #16]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d1ee      	bne.n	2ec8 <SYS_TimerTaskHandler+0x50>
    2eea:	e7ef      	b.n	2ecc <SYS_TimerTaskHandler+0x54>
		timers->timeout -= elapsed;
    2eec:	1b5d      	subs	r5, r3, r5
    2eee:	6065      	str	r5, [r4, #4]
}
    2ef0:	b003      	add	sp, #12
    2ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ef4:	200011ac 	.word	0x200011ac
    2ef8:	20000008 	.word	0x20000008
    2efc:	200001c4 	.word	0x200001c4
    2f00:	00002d39 	.word	0x00002d39

00002f04 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2f04:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2f06:	4b01      	ldr	r3, [pc, #4]	; (2f0c <tc_cca_callback+0x8>)
    2f08:	4798      	blx	r3
}
    2f0a:	bd10      	pop	{r4, pc}
    2f0c:	00004741 	.word	0x00004741

00002f10 <tc_ovf_callback>:
{
    2f10:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2f12:	4b01      	ldr	r3, [pc, #4]	; (2f18 <tc_ovf_callback+0x8>)
    2f14:	4798      	blx	r3
}
    2f16:	bd10      	pop	{r4, pc}
    2f18:	000046f9 	.word	0x000046f9

00002f1c <tmr_read_count>:
{
    2f1c:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2f1e:	4802      	ldr	r0, [pc, #8]	; (2f28 <tmr_read_count+0xc>)
    2f20:	4b02      	ldr	r3, [pc, #8]	; (2f2c <tmr_read_count+0x10>)
    2f22:	4798      	blx	r3
    2f24:	b280      	uxth	r0, r0
}
    2f26:	bd10      	pop	{r4, pc}
    2f28:	200011e4 	.word	0x200011e4
    2f2c:	00001bad 	.word	0x00001bad

00002f30 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2f30:	4b03      	ldr	r3, [pc, #12]	; (2f40 <tmr_disable_cc_interrupt+0x10>)
    2f32:	2110      	movs	r1, #16
    2f34:	681a      	ldr	r2, [r3, #0]
    2f36:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2f38:	7e5a      	ldrb	r2, [r3, #25]
    2f3a:	438a      	bics	r2, r1
    2f3c:	765a      	strb	r2, [r3, #25]
}
    2f3e:	4770      	bx	lr
    2f40:	200011e4 	.word	0x200011e4

00002f44 <tmr_enable_cc_interrupt>:
{
    2f44:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f46:	4c0a      	ldr	r4, [pc, #40]	; (2f70 <tmr_enable_cc_interrupt+0x2c>)
    2f48:	6820      	ldr	r0, [r4, #0]
    2f4a:	4b0a      	ldr	r3, [pc, #40]	; (2f74 <tmr_enable_cc_interrupt+0x30>)
    2f4c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f4e:	4b0a      	ldr	r3, [pc, #40]	; (2f78 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2f50:	5c1b      	ldrb	r3, [r3, r0]
    2f52:	221f      	movs	r2, #31
    2f54:	401a      	ands	r2, r3
    2f56:	2301      	movs	r3, #1
    2f58:	4093      	lsls	r3, r2
    2f5a:	4a08      	ldr	r2, [pc, #32]	; (2f7c <tmr_enable_cc_interrupt+0x38>)
    2f5c:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f5e:	7e63      	ldrb	r3, [r4, #25]
    2f60:	2210      	movs	r2, #16
    2f62:	4313      	orrs	r3, r2
    2f64:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f66:	6823      	ldr	r3, [r4, #0]
    2f68:	2210      	movs	r2, #16
    2f6a:	735a      	strb	r2, [r3, #13]
}
    2f6c:	bd10      	pop	{r4, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	200011e4 	.word	0x200011e4
    2f74:	00001939 	.word	0x00001939
    2f78:	00007f50 	.word	0x00007f50
    2f7c:	e000e100 	.word	0xe000e100

00002f80 <tmr_write_cmpreg>:
{
    2f80:	b510      	push	{r4, lr}
    2f82:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2f84:	2100      	movs	r1, #0
    2f86:	4802      	ldr	r0, [pc, #8]	; (2f90 <tmr_write_cmpreg+0x10>)
    2f88:	4b02      	ldr	r3, [pc, #8]	; (2f94 <tmr_write_cmpreg+0x14>)
    2f8a:	4798      	blx	r3
}
    2f8c:	bd10      	pop	{r4, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	200011e4 	.word	0x200011e4
    2f94:	00001bd9 	.word	0x00001bd9

00002f98 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f9a:	46ce      	mov	lr, r9
    2f9c:	4647      	mov	r7, r8
    2f9e:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2fa0:	4a2d      	ldr	r2, [pc, #180]	; (3058 <tmr_init+0xc0>)
    2fa2:	2300      	movs	r3, #0
    2fa4:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2fa6:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2fa8:	2100      	movs	r1, #0
    2faa:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2fac:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2fae:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2fb0:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2fb2:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2fb4:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2fb6:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2fb8:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2fba:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2fbc:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2fbe:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2fc0:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2fc2:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2fc4:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2fc6:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2fc8:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2fca:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2fcc:	3b01      	subs	r3, #1
    2fce:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2fd0:	4c22      	ldr	r4, [pc, #136]	; (305c <tmr_init+0xc4>)
    2fd2:	4923      	ldr	r1, [pc, #140]	; (3060 <tmr_init+0xc8>)
    2fd4:	0020      	movs	r0, r4
    2fd6:	4b23      	ldr	r3, [pc, #140]	; (3064 <tmr_init+0xcc>)
    2fd8:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2fda:	2200      	movs	r2, #0
    2fdc:	4922      	ldr	r1, [pc, #136]	; (3068 <tmr_init+0xd0>)
    2fde:	0020      	movs	r0, r4
    2fe0:	4d22      	ldr	r5, [pc, #136]	; (306c <tmr_init+0xd4>)
    2fe2:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2fe4:	2202      	movs	r2, #2
    2fe6:	4922      	ldr	r1, [pc, #136]	; (3070 <tmr_init+0xd8>)
    2fe8:	0020      	movs	r0, r4
    2fea:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2fec:	6820      	ldr	r0, [r4, #0]
    2fee:	4b21      	ldr	r3, [pc, #132]	; (3074 <tmr_init+0xdc>)
    2ff0:	4699      	mov	r9, r3
    2ff2:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2ff4:	4b20      	ldr	r3, [pc, #128]	; (3078 <tmr_init+0xe0>)
    2ff6:	4698      	mov	r8, r3
    2ff8:	5c1b      	ldrb	r3, [r3, r0]
    2ffa:	261f      	movs	r6, #31
    2ffc:	4033      	ands	r3, r6
    2ffe:	2501      	movs	r5, #1
    3000:	002a      	movs	r2, r5
    3002:	409a      	lsls	r2, r3
    3004:	4f1d      	ldr	r7, [pc, #116]	; (307c <tmr_init+0xe4>)
    3006:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    3008:	7e63      	ldrb	r3, [r4, #25]
    300a:	2201      	movs	r2, #1
    300c:	4313      	orrs	r3, r2
    300e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3010:	6823      	ldr	r3, [r4, #0]
    3012:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3014:	0018      	movs	r0, r3
    3016:	47c8      	blx	r9
    3018:	4643      	mov	r3, r8
    301a:	5c1b      	ldrb	r3, [r3, r0]
    301c:	401e      	ands	r6, r3
    301e:	40b5      	lsls	r5, r6
    3020:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3022:	7e63      	ldrb	r3, [r4, #25]
    3024:	2210      	movs	r2, #16
    3026:	4313      	orrs	r3, r2
    3028:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    302a:	6822      	ldr	r2, [r4, #0]
    302c:	2310      	movs	r3, #16
    302e:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3030:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3032:	b25b      	sxtb	r3, r3
    3034:	2b00      	cmp	r3, #0
    3036:	dbfb      	blt.n	3030 <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3038:	8813      	ldrh	r3, [r2, #0]
    303a:	2102      	movs	r1, #2
    303c:	430b      	orrs	r3, r1
    303e:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3040:	2000      	movs	r0, #0
    3042:	4b0f      	ldr	r3, [pc, #60]	; (3080 <tmr_init+0xe8>)
    3044:	4798      	blx	r3
    3046:	490f      	ldr	r1, [pc, #60]	; (3084 <tmr_init+0xec>)
    3048:	4b0f      	ldr	r3, [pc, #60]	; (3088 <tmr_init+0xf0>)
    304a:	4798      	blx	r3
	#endif
	return timer_multiplier;
    304c:	b2c0      	uxtb	r0, r0
}
    304e:	bc0c      	pop	{r2, r3}
    3050:	4690      	mov	r8, r2
    3052:	4699      	mov	r9, r3
    3054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	200011b0 	.word	0x200011b0
    305c:	200011e4 	.word	0x200011e4
    3060:	42002c00 	.word	0x42002c00
    3064:	00001971 	.word	0x00001971
    3068:	00002f11 	.word	0x00002f11
    306c:	00001871 	.word	0x00001871
    3070:	00002f05 	.word	0x00002f05
    3074:	00001939 	.word	0x00001939
    3078:	00007f50 	.word	0x00007f50
    307c:	e000e100 	.word	0xe000e100
    3080:	00001601 	.word	0x00001601
    3084:	000f4240 	.word	0x000f4240
    3088:	000071fd 	.word	0x000071fd

0000308c <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    308c:	4770      	bx	lr
	...

00003090 <sal_aes_restart>:
 * When using sal_aes_wrrd(), call sal_aes_read() to get the result
 * of the last AES operation BEFORE you put the transceiver unit to
 * sleep state!
 */
void sal_aes_restart(void)
{
    3090:	b570      	push	{r4, r5, r6, lr}
	 * This is not required anymore for SPI transceivers beyond
	 * these two mentioned transceivers.
	 */
	uint8_t *keyp;
	uint8_t save_cmd;
	if (last_dir == AES_DIR_ENCRYPT) {
    3092:	4b0c      	ldr	r3, [pc, #48]	; (30c4 <sal_aes_restart+0x34>)
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	2b00      	cmp	r3, #0
    3098:	d012      	beq.n	30c0 <sal_aes_restart+0x30>
		keyp = enc_key;
	} else {
		keyp = dec_key;
    309a:	490b      	ldr	r1, [pc, #44]	; (30c8 <sal_aes_restart+0x38>)
	}

	save_cmd = aes_buf[0];
    309c:	4c0b      	ldr	r4, [pc, #44]	; (30cc <sal_aes_restart+0x3c>)
    309e:	7825      	ldrb	r5, [r4, #0]
	aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    30a0:	2310      	movs	r3, #16
    30a2:	7023      	strb	r3, [r4, #0]

	/* Fill in key. */
	memcpy(aes_buf + 1, keyp, AES_KEYSIZE);
    30a4:	1c60      	adds	r0, r4, #1
    30a6:	2210      	movs	r2, #16
    30a8:	4b09      	ldr	r3, [pc, #36]	; (30d0 <sal_aes_restart+0x40>)
    30aa:	4798      	blx	r3

	/* Write to SRAM in one step. */
	trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    30ac:	2211      	movs	r2, #17
    30ae:	0021      	movs	r1, r4
    30b0:	2083      	movs	r0, #131	; 0x83
    30b2:	4b08      	ldr	r3, [pc, #32]	; (30d4 <sal_aes_restart+0x44>)
    30b4:	4798      	blx	r3
			AES_BLOCKSIZE + 1);

	aes_buf[0] = save_cmd;
    30b6:	7025      	strb	r5, [r4, #0]
	setup_flag = true;
    30b8:	2201      	movs	r2, #1
    30ba:	4b07      	ldr	r3, [pc, #28]	; (30d8 <sal_aes_restart+0x48>)
    30bc:	701a      	strb	r2, [r3, #0]
}
    30be:	bd70      	pop	{r4, r5, r6, pc}
		keyp = enc_key;
    30c0:	4906      	ldr	r1, [pc, #24]	; (30dc <sal_aes_restart+0x4c>)
    30c2:	e7eb      	b.n	309c <sal_aes_restart+0xc>
    30c4:	20000049 	.word	0x20000049
    30c8:	200001dc 	.word	0x200001dc
    30cc:	200001c8 	.word	0x200001c8
    30d0:	0000754f 	.word	0x0000754f
    30d4:	0000384d 	.word	0x0000384d
    30d8:	200001fc 	.word	0x200001fc
    30dc:	200001ec 	.word	0x200001ec

000030e0 <_sal_aes_clean_up>:
/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
}
    30e0:	4770      	bx	lr
	...

000030e4 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    30e4:	b570      	push	{r4, r5, r6, lr}
    30e6:	0003      	movs	r3, r0
    30e8:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    30ea:	4c14      	ldr	r4, [pc, #80]	; (313c <sal_aes_wrrd+0x58>)
    30ec:	1c60      	adds	r0, r4, #1
    30ee:	2210      	movs	r2, #16
    30f0:	0019      	movs	r1, r3
    30f2:	4b13      	ldr	r3, [pc, #76]	; (3140 <sal_aes_wrrd+0x5c>)
    30f4:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    30f6:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    30f8:	4b12      	ldr	r3, [pc, #72]	; (3144 <sal_aes_wrrd+0x60>)
    30fa:	781b      	ldrb	r3, [r3, #0]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d015      	beq.n	312c <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3100:	2212      	movs	r2, #18
    3102:	490e      	ldr	r1, [pc, #56]	; (313c <sal_aes_wrrd+0x58>)
    3104:	2083      	movs	r0, #131	; 0x83
    3106:	4b10      	ldr	r3, [pc, #64]	; (3148 <sal_aes_wrrd+0x64>)
    3108:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    310a:	2200      	movs	r2, #0
    310c:	4b0d      	ldr	r3, [pc, #52]	; (3144 <sal_aes_wrrd+0x60>)
    310e:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    3110:	2d00      	cmp	r5, #0
    3112:	d005      	beq.n	3120 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    3114:	2210      	movs	r2, #16
    3116:	4909      	ldr	r1, [pc, #36]	; (313c <sal_aes_wrrd+0x58>)
    3118:	3101      	adds	r1, #1
    311a:	0028      	movs	r0, r5
    311c:	4b08      	ldr	r3, [pc, #32]	; (3140 <sal_aes_wrrd+0x5c>)
    311e:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    3120:	4b06      	ldr	r3, [pc, #24]	; (313c <sal_aes_wrrd+0x58>)
    3122:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    3124:	2018      	movs	r0, #24
    3126:	4b09      	ldr	r3, [pc, #36]	; (314c <sal_aes_wrrd+0x68>)
    3128:	4798      	blx	r3
}
    312a:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    312c:	2211      	movs	r2, #17
    312e:	4903      	ldr	r1, [pc, #12]	; (313c <sal_aes_wrrd+0x58>)
    3130:	3101      	adds	r1, #1
    3132:	2084      	movs	r0, #132	; 0x84
    3134:	4b04      	ldr	r3, [pc, #16]	; (3148 <sal_aes_wrrd+0x64>)
    3136:	4798      	blx	r3
    3138:	e7ea      	b.n	3110 <sal_aes_wrrd+0x2c>
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	200001c8 	.word	0x200001c8
    3140:	0000754f 	.word	0x0000754f
    3144:	200001fc 	.word	0x200001fc
    3148:	00003b41 	.word	0x00003b41
    314c:	00000155 	.word	0x00000155

00003150 <sal_aes_setup>:
{
    3150:	b5f0      	push	{r4, r5, r6, r7, lr}
    3152:	46c6      	mov	lr, r8
    3154:	b500      	push	{lr}
    3156:	b084      	sub	sp, #16
    3158:	0005      	movs	r5, r0
    315a:	000e      	movs	r6, r1
    315c:	0014      	movs	r4, r2
	if (key != NULL) {
    315e:	2800      	cmp	r0, #0
    3160:	d017      	beq.n	3192 <sal_aes_setup+0x42>
		dec_initialized = false;
    3162:	2200      	movs	r2, #0
    3164:	4b3e      	ldr	r3, [pc, #248]	; (3260 <sal_aes_setup+0x110>)
    3166:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    3168:	3202      	adds	r2, #2
    316a:	4b3e      	ldr	r3, [pc, #248]	; (3264 <sal_aes_setup+0x114>)
    316c:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    316e:	320e      	adds	r2, #14
    3170:	0001      	movs	r1, r0
    3172:	483d      	ldr	r0, [pc, #244]	; (3268 <sal_aes_setup+0x118>)
    3174:	4b3d      	ldr	r3, [pc, #244]	; (326c <sal_aes_setup+0x11c>)
    3176:	4698      	mov	r8, r3
    3178:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    317a:	4f3d      	ldr	r7, [pc, #244]	; (3270 <sal_aes_setup+0x120>)
    317c:	2310      	movs	r3, #16
    317e:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3180:	1c78      	adds	r0, r7, #1
    3182:	2210      	movs	r2, #16
    3184:	0029      	movs	r1, r5
    3186:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3188:	2211      	movs	r2, #17
    318a:	0039      	movs	r1, r7
    318c:	2083      	movs	r0, #131	; 0x83
    318e:	4b39      	ldr	r3, [pc, #228]	; (3274 <sal_aes_setup+0x124>)
    3190:	4798      	blx	r3
	switch (dir) {
    3192:	2c00      	cmp	r4, #0
    3194:	d003      	beq.n	319e <sal_aes_setup+0x4e>
    3196:	2c01      	cmp	r4, #1
    3198:	d02f      	beq.n	31fa <sal_aes_setup+0xaa>
		return false;
    319a:	2000      	movs	r0, #0
    319c:	e01b      	b.n	31d6 <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    319e:	4b31      	ldr	r3, [pc, #196]	; (3264 <sal_aes_setup+0x114>)
    31a0:	781b      	ldrb	r3, [r3, #0]
    31a2:	2b01      	cmp	r3, #1
    31a4:	d01b      	beq.n	31de <sal_aes_setup+0x8e>
	last_dir = dir;
    31a6:	4b2f      	ldr	r3, [pc, #188]	; (3264 <sal_aes_setup+0x114>)
    31a8:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    31aa:	2e00      	cmp	r6, #0
    31ac:	d002      	beq.n	31b4 <sal_aes_setup+0x64>
		return (false);
    31ae:	2000      	movs	r0, #0
	switch (enc_mode) {
    31b0:	2e02      	cmp	r6, #2
    31b2:	d110      	bne.n	31d6 <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    31b4:	0136      	lsls	r6, r6, #4
    31b6:	2370      	movs	r3, #112	; 0x70
    31b8:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    31ba:	00e4      	lsls	r4, r4, #3
    31bc:	3b68      	subs	r3, #104	; 0x68
    31be:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    31c0:	4334      	orrs	r4, r6
    31c2:	4b2b      	ldr	r3, [pc, #172]	; (3270 <sal_aes_setup+0x120>)
    31c4:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    31c6:	2680      	movs	r6, #128	; 0x80
    31c8:	4276      	negs	r6, r6
    31ca:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    31cc:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    31ce:	2201      	movs	r2, #1
    31d0:	4b29      	ldr	r3, [pc, #164]	; (3278 <sal_aes_setup+0x128>)
    31d2:	701a      	strb	r2, [r3, #0]
	return (true);
    31d4:	2001      	movs	r0, #1
}
    31d6:	b004      	add	sp, #16
    31d8:	bc04      	pop	{r2}
    31da:	4690      	mov	r8, r2
    31dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    31de:	4d24      	ldr	r5, [pc, #144]	; (3270 <sal_aes_setup+0x120>)
    31e0:	330f      	adds	r3, #15
    31e2:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    31e4:	1c68      	adds	r0, r5, #1
    31e6:	2210      	movs	r2, #16
    31e8:	491f      	ldr	r1, [pc, #124]	; (3268 <sal_aes_setup+0x118>)
    31ea:	4b20      	ldr	r3, [pc, #128]	; (326c <sal_aes_setup+0x11c>)
    31ec:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    31ee:	2211      	movs	r2, #17
    31f0:	0029      	movs	r1, r5
    31f2:	2083      	movs	r0, #131	; 0x83
    31f4:	4b1f      	ldr	r3, [pc, #124]	; (3274 <sal_aes_setup+0x124>)
    31f6:	4798      	blx	r3
    31f8:	e7d5      	b.n	31a6 <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    31fa:	4b1a      	ldr	r3, [pc, #104]	; (3264 <sal_aes_setup+0x114>)
    31fc:	781b      	ldrb	r3, [r3, #0]
    31fe:	2b01      	cmp	r3, #1
    3200:	d0d1      	beq.n	31a6 <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3202:	2210      	movs	r2, #16
    3204:	4b1a      	ldr	r3, [pc, #104]	; (3270 <sal_aes_setup+0x120>)
    3206:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    3208:	4b15      	ldr	r3, [pc, #84]	; (3260 <sal_aes_setup+0x110>)
    320a:	781b      	ldrb	r3, [r3, #0]
    320c:	2b00      	cmp	r3, #0
    320e:	d00e      	beq.n	322e <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3210:	4d17      	ldr	r5, [pc, #92]	; (3270 <sal_aes_setup+0x120>)
    3212:	1c68      	adds	r0, r5, #1
    3214:	2210      	movs	r2, #16
    3216:	4919      	ldr	r1, [pc, #100]	; (327c <sal_aes_setup+0x12c>)
    3218:	4b14      	ldr	r3, [pc, #80]	; (326c <sal_aes_setup+0x11c>)
    321a:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    321c:	2211      	movs	r2, #17
    321e:	0029      	movs	r1, r5
    3220:	2083      	movs	r0, #131	; 0x83
    3222:	4b14      	ldr	r3, [pc, #80]	; (3274 <sal_aes_setup+0x124>)
    3224:	4798      	blx	r3
			dec_initialized = true;
    3226:	4b0e      	ldr	r3, [pc, #56]	; (3260 <sal_aes_setup+0x110>)
    3228:	2201      	movs	r2, #1
    322a:	701a      	strb	r2, [r3, #0]
    322c:	e7bb      	b.n	31a6 <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    322e:	4d10      	ldr	r5, [pc, #64]	; (3270 <sal_aes_setup+0x120>)
    3230:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    3232:	3380      	adds	r3, #128	; 0x80
    3234:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    3236:	3a0f      	subs	r2, #15
    3238:	4b0f      	ldr	r3, [pc, #60]	; (3278 <sal_aes_setup+0x128>)
    323a:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    323c:	2100      	movs	r1, #0
    323e:	4668      	mov	r0, sp
    3240:	4b0f      	ldr	r3, [pc, #60]	; (3280 <sal_aes_setup+0x130>)
    3242:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3244:	2310      	movs	r3, #16
    3246:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3248:	2201      	movs	r2, #1
    324a:	0029      	movs	r1, r5
    324c:	2083      	movs	r0, #131	; 0x83
    324e:	4b09      	ldr	r3, [pc, #36]	; (3274 <sal_aes_setup+0x124>)
    3250:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    3252:	2210      	movs	r2, #16
    3254:	4909      	ldr	r1, [pc, #36]	; (327c <sal_aes_setup+0x12c>)
    3256:	2084      	movs	r0, #132	; 0x84
    3258:	4b0a      	ldr	r3, [pc, #40]	; (3284 <sal_aes_setup+0x134>)
    325a:	4798      	blx	r3
    325c:	e7d8      	b.n	3210 <sal_aes_setup+0xc0>
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	200001da 	.word	0x200001da
    3264:	20000049 	.word	0x20000049
    3268:	200001ec 	.word	0x200001ec
    326c:	0000754f 	.word	0x0000754f
    3270:	200001c8 	.word	0x200001c8
    3274:	0000384d 	.word	0x0000384d
    3278:	200001fc 	.word	0x200001fc
    327c:	200001dc 	.word	0x200001dc
    3280:	000030e5 	.word	0x000030e5
    3284:	000039b9 	.word	0x000039b9

00003288 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3288:	b510      	push	{r4, lr}
    328a:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    328c:	2210      	movs	r2, #16
    328e:	2084      	movs	r0, #132	; 0x84
    3290:	4b01      	ldr	r3, [pc, #4]	; (3298 <sal_aes_read+0x10>)
    3292:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3294:	bd10      	pop	{r4, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	000039b9 	.word	0x000039b9

0000329c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    329c:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    329e:	2201      	movs	r2, #1
    32a0:	4b03      	ldr	r3, [pc, #12]	; (32b0 <AT86RFX_ISR+0x14>)
    32a2:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    32a4:	4b03      	ldr	r3, [pc, #12]	; (32b4 <AT86RFX_ISR+0x18>)
    32a6:	681b      	ldr	r3, [r3, #0]
    32a8:	2b00      	cmp	r3, #0
    32aa:	d000      	beq.n	32ae <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    32ac:	4798      	blx	r3
	}
}
    32ae:	bd10      	pop	{r4, pc}
    32b0:	40001800 	.word	0x40001800
    32b4:	20000200 	.word	0x20000200

000032b8 <trx_spi_init>:

void trx_spi_init(void)
{
    32b8:	b530      	push	{r4, r5, lr}
    32ba:	b085      	sub	sp, #20
	config->address_enabled = false;
    32bc:	4a34      	ldr	r2, [pc, #208]	; (3390 <trx_spi_init+0xd8>)
    32be:	2300      	movs	r3, #0
    32c0:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    32c2:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    32c4:	213f      	movs	r1, #63	; 0x3f
    32c6:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    32c8:	4c32      	ldr	r4, [pc, #200]	; (3394 <trx_spi_init+0xdc>)
    32ca:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    32cc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    32ce:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    32d0:	2201      	movs	r2, #1
    32d2:	4669      	mov	r1, sp
    32d4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    32d6:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    32d8:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    32da:	203f      	movs	r0, #63	; 0x3f
    32dc:	4b2e      	ldr	r3, [pc, #184]	; (3398 <trx_spi_init+0xe0>)
    32de:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    32e0:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    32e2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    32e4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    32e6:	2900      	cmp	r1, #0
    32e8:	d104      	bne.n	32f4 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    32ea:	0953      	lsrs	r3, r2, #5
    32ec:	01db      	lsls	r3, r3, #7
    32ee:	492b      	ldr	r1, [pc, #172]	; (339c <trx_spi_init+0xe4>)
    32f0:	468c      	mov	ip, r1
    32f2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    32f4:	211f      	movs	r1, #31
    32f6:	4011      	ands	r1, r2
    32f8:	2201      	movs	r2, #1
    32fa:	0010      	movs	r0, r2
    32fc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    32fe:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3300:	4c27      	ldr	r4, [pc, #156]	; (33a0 <trx_spi_init+0xe8>)
    3302:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3304:	2300      	movs	r3, #0
    3306:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3308:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    330a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    330c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    330e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3310:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3312:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3314:	3223      	adds	r2, #35	; 0x23
    3316:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3318:	0020      	movs	r0, r4
    331a:	3018      	adds	r0, #24
    331c:	3a18      	subs	r2, #24
    331e:	2100      	movs	r1, #0
    3320:	4b20      	ldr	r3, [pc, #128]	; (33a4 <trx_spi_init+0xec>)
    3322:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3324:	2380      	movs	r3, #128	; 0x80
    3326:	025b      	lsls	r3, r3, #9
    3328:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    332a:	4b1f      	ldr	r3, [pc, #124]	; (33a8 <trx_spi_init+0xf0>)
    332c:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    332e:	4b1f      	ldr	r3, [pc, #124]	; (33ac <trx_spi_init+0xf4>)
    3330:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3332:	2301      	movs	r3, #1
    3334:	425b      	negs	r3, r3
    3336:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3338:	4b1d      	ldr	r3, [pc, #116]	; (33b0 <trx_spi_init+0xf8>)
    333a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    333c:	4b1d      	ldr	r3, [pc, #116]	; (33b4 <trx_spi_init+0xfc>)
    333e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3340:	4d1d      	ldr	r5, [pc, #116]	; (33b8 <trx_spi_init+0x100>)
    3342:	0022      	movs	r2, r4
    3344:	491d      	ldr	r1, [pc, #116]	; (33bc <trx_spi_init+0x104>)
    3346:	0028      	movs	r0, r5
    3348:	4b1d      	ldr	r3, [pc, #116]	; (33c0 <trx_spi_init+0x108>)
    334a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    334c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    334e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3350:	2b00      	cmp	r3, #0
    3352:	d1fc      	bne.n	334e <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3354:	6813      	ldr	r3, [r2, #0]
    3356:	2502      	movs	r5, #2
    3358:	432b      	orrs	r3, r5
    335a:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    335c:	ac01      	add	r4, sp, #4
    335e:	0020      	movs	r0, r4
    3360:	4b18      	ldr	r3, [pc, #96]	; (33c4 <trx_spi_init+0x10c>)
    3362:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    3364:	2320      	movs	r3, #32
    3366:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3368:	2380      	movs	r3, #128	; 0x80
    336a:	039b      	lsls	r3, r3, #14
    336c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    336e:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3370:	2301      	movs	r3, #1
    3372:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3374:	2200      	movs	r2, #0
    3376:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3378:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    337a:	0021      	movs	r1, r4
    337c:	2000      	movs	r0, #0
    337e:	4b12      	ldr	r3, [pc, #72]	; (33c8 <trx_spi_init+0x110>)
    3380:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3382:	2200      	movs	r2, #0
    3384:	2100      	movs	r1, #0
    3386:	4811      	ldr	r0, [pc, #68]	; (33cc <trx_spi_init+0x114>)
    3388:	4b11      	ldr	r3, [pc, #68]	; (33d0 <trx_spi_init+0x118>)
    338a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    338c:	b005      	add	sp, #20
    338e:	bd30      	pop	{r4, r5, pc}
    3390:	20001204 	.word	0x20001204
    3394:	20001208 	.word	0x20001208
    3398:	0000086d 	.word	0x0000086d
    339c:	41004400 	.word	0x41004400
    33a0:	2000120c 	.word	0x2000120c
    33a4:	00007561 	.word	0x00007561
    33a8:	003d0900 	.word	0x003d0900
    33ac:	00530005 	.word	0x00530005
    33b0:	003e0005 	.word	0x003e0005
    33b4:	00520005 	.word	0x00520005
    33b8:	20001244 	.word	0x20001244
    33bc:	42001800 	.word	0x42001800
    33c0:	00000d2d 	.word	0x00000d2d
    33c4:	000007e1 	.word	0x000007e1
    33c8:	000007f5 	.word	0x000007f5
    33cc:	0000329d 	.word	0x0000329d
    33d0:	0000069d 	.word	0x0000069d

000033d4 <PhyReset>:

void PhyReset(void)
{
    33d4:	b570      	push	{r4, r5, r6, lr}
    33d6:	4c08      	ldr	r4, [pc, #32]	; (33f8 <PhyReset+0x24>)
    33d8:	2580      	movs	r5, #128	; 0x80
    33da:	022d      	lsls	r5, r5, #8
    33dc:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    33de:	2280      	movs	r2, #128	; 0x80
    33e0:	0352      	lsls	r2, r2, #13
    33e2:	4b06      	ldr	r3, [pc, #24]	; (33fc <PhyReset+0x28>)
    33e4:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    33e6:	20a5      	movs	r0, #165	; 0xa5
    33e8:	0040      	lsls	r0, r0, #1
    33ea:	4e05      	ldr	r6, [pc, #20]	; (3400 <PhyReset+0x2c>)
    33ec:	47b0      	blx	r6
    33ee:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    33f0:	200a      	movs	r0, #10
    33f2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    33f4:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    33f6:	bd70      	pop	{r4, r5, r6, pc}
    33f8:	41004480 	.word	0x41004480
    33fc:	41004400 	.word	0x41004400
    3400:	00000155 	.word	0x00000155

00003404 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3404:	b570      	push	{r4, r5, r6, lr}
    3406:	b082      	sub	sp, #8
    3408:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    340a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    340e:	425a      	negs	r2, r3
    3410:	4153      	adcs	r3, r2
    3412:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3414:	b672      	cpsid	i
    3416:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    341a:	2200      	movs	r2, #0
    341c:	4b33      	ldr	r3, [pc, #204]	; (34ec <trx_reg_read+0xe8>)
    341e:	701a      	strb	r2, [r3, #0]
	return flags;
    3420:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3422:	4e33      	ldr	r6, [pc, #204]	; (34f0 <trx_reg_read+0xec>)
    3424:	3201      	adds	r2, #1
    3426:	4933      	ldr	r1, [pc, #204]	; (34f4 <trx_reg_read+0xf0>)
    3428:	0030      	movs	r0, r6
    342a:	4b33      	ldr	r3, [pc, #204]	; (34f8 <trx_reg_read+0xf4>)
    342c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    342e:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3430:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3432:	7e1a      	ldrb	r2, [r3, #24]
    3434:	420a      	tst	r2, r1
    3436:	d0fc      	beq.n	3432 <trx_reg_read+0x2e>
    3438:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    343a:	07d2      	lsls	r2, r2, #31
    343c:	d502      	bpl.n	3444 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    343e:	2280      	movs	r2, #128	; 0x80
    3440:	4315      	orrs	r5, r2
    3442:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3444:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3446:	7e1a      	ldrb	r2, [r3, #24]
    3448:	420a      	tst	r2, r1
    344a:	d0fc      	beq.n	3446 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    344c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    344e:	7e1a      	ldrb	r2, [r3, #24]
    3450:	420a      	tst	r2, r1
    3452:	d0fc      	beq.n	344e <trx_reg_read+0x4a>
    3454:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3456:	0752      	lsls	r2, r2, #29
    3458:	d50c      	bpl.n	3474 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    345a:	8b5a      	ldrh	r2, [r3, #26]
    345c:	0752      	lsls	r2, r2, #29
    345e:	d501      	bpl.n	3464 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3460:	2204      	movs	r2, #4
    3462:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3464:	4a22      	ldr	r2, [pc, #136]	; (34f0 <trx_reg_read+0xec>)
    3466:	7992      	ldrb	r2, [r2, #6]
    3468:	2a01      	cmp	r2, #1
    346a:	d034      	beq.n	34d6 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    346c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    346e:	b2d2      	uxtb	r2, r2
    3470:	4922      	ldr	r1, [pc, #136]	; (34fc <trx_reg_read+0xf8>)
    3472:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3474:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3476:	7e1a      	ldrb	r2, [r3, #24]
    3478:	420a      	tst	r2, r1
    347a:	d0fc      	beq.n	3476 <trx_reg_read+0x72>
    347c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    347e:	07d2      	lsls	r2, r2, #31
    3480:	d501      	bpl.n	3486 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3482:	2200      	movs	r2, #0
    3484:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3486:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3488:	7e1a      	ldrb	r2, [r3, #24]
    348a:	420a      	tst	r2, r1
    348c:	d0fc      	beq.n	3488 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    348e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3490:	7e1a      	ldrb	r2, [r3, #24]
    3492:	420a      	tst	r2, r1
    3494:	d0fc      	beq.n	3490 <trx_reg_read+0x8c>
    3496:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    3498:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    349a:	0752      	lsls	r2, r2, #29
    349c:	d50a      	bpl.n	34b4 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    349e:	8b5a      	ldrh	r2, [r3, #26]
    34a0:	0752      	lsls	r2, r2, #29
    34a2:	d501      	bpl.n	34a8 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    34a4:	2204      	movs	r2, #4
    34a6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    34a8:	4a11      	ldr	r2, [pc, #68]	; (34f0 <trx_reg_read+0xec>)
    34aa:	7992      	ldrb	r2, [r2, #6]
    34ac:	2a01      	cmp	r2, #1
    34ae:	d018      	beq.n	34e2 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    34b0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    34b2:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    34b4:	2200      	movs	r2, #0
    34b6:	490f      	ldr	r1, [pc, #60]	; (34f4 <trx_reg_read+0xf0>)
    34b8:	480d      	ldr	r0, [pc, #52]	; (34f0 <trx_reg_read+0xec>)
    34ba:	4b0f      	ldr	r3, [pc, #60]	; (34f8 <trx_reg_read+0xf4>)
    34bc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    34be:	23ff      	movs	r3, #255	; 0xff
    34c0:	4223      	tst	r3, r4
    34c2:	d005      	beq.n	34d0 <trx_reg_read+0xcc>
		cpu_irq_enable();
    34c4:	2201      	movs	r2, #1
    34c6:	4b09      	ldr	r3, [pc, #36]	; (34ec <trx_reg_read+0xe8>)
    34c8:	701a      	strb	r2, [r3, #0]
    34ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    34ce:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    34d0:	b2e8      	uxtb	r0, r5
}
    34d2:	b002      	add	sp, #8
    34d4:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    34d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    34d8:	05d2      	lsls	r2, r2, #23
    34da:	0dd2      	lsrs	r2, r2, #23
    34dc:	4907      	ldr	r1, [pc, #28]	; (34fc <trx_reg_read+0xf8>)
    34de:	800a      	strh	r2, [r1, #0]
    34e0:	e7c8      	b.n	3474 <trx_reg_read+0x70>
    34e2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    34e4:	05ed      	lsls	r5, r5, #23
    34e6:	0ded      	lsrs	r5, r5, #23
    34e8:	e7e4      	b.n	34b4 <trx_reg_read+0xb0>
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	20000008 	.word	0x20000008
    34f0:	20001244 	.word	0x20001244
    34f4:	20001208 	.word	0x20001208
    34f8:	00000ff1 	.word	0x00000ff1
    34fc:	20001200 	.word	0x20001200

00003500 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3500:	b5f0      	push	{r4, r5, r6, r7, lr}
    3502:	b083      	sub	sp, #12
    3504:	0006      	movs	r6, r0
    3506:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3508:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    350c:	425a      	negs	r2, r3
    350e:	4153      	adcs	r3, r2
    3510:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3512:	b672      	cpsid	i
    3514:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3518:	2200      	movs	r2, #0
    351a:	4b34      	ldr	r3, [pc, #208]	; (35ec <trx_reg_write+0xec>)
    351c:	701a      	strb	r2, [r3, #0]
	return flags;
    351e:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3520:	4f33      	ldr	r7, [pc, #204]	; (35f0 <trx_reg_write+0xf0>)
    3522:	3201      	adds	r2, #1
    3524:	4933      	ldr	r1, [pc, #204]	; (35f4 <trx_reg_write+0xf4>)
    3526:	0038      	movs	r0, r7
    3528:	4b33      	ldr	r3, [pc, #204]	; (35f8 <trx_reg_write+0xf8>)
    352a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    352c:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    352e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3530:	7e1a      	ldrb	r2, [r3, #24]
    3532:	420a      	tst	r2, r1
    3534:	d0fc      	beq.n	3530 <trx_reg_write+0x30>
    3536:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3538:	07d2      	lsls	r2, r2, #31
    353a:	d502      	bpl.n	3542 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    353c:	22c0      	movs	r2, #192	; 0xc0
    353e:	4316      	orrs	r6, r2
    3540:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3542:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3544:	7e1a      	ldrb	r2, [r3, #24]
    3546:	420a      	tst	r2, r1
    3548:	d0fc      	beq.n	3544 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    354a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    354c:	7e1a      	ldrb	r2, [r3, #24]
    354e:	420a      	tst	r2, r1
    3550:	d0fc      	beq.n	354c <trx_reg_write+0x4c>
    3552:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3554:	0752      	lsls	r2, r2, #29
    3556:	d50c      	bpl.n	3572 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3558:	8b5a      	ldrh	r2, [r3, #26]
    355a:	0752      	lsls	r2, r2, #29
    355c:	d501      	bpl.n	3562 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    355e:	2204      	movs	r2, #4
    3560:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3562:	4a23      	ldr	r2, [pc, #140]	; (35f0 <trx_reg_write+0xf0>)
    3564:	7992      	ldrb	r2, [r2, #6]
    3566:	2a01      	cmp	r2, #1
    3568:	d033      	beq.n	35d2 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    356a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    356c:	b2d2      	uxtb	r2, r2
    356e:	4923      	ldr	r1, [pc, #140]	; (35fc <trx_reg_write+0xfc>)
    3570:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3572:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3574:	7e1a      	ldrb	r2, [r3, #24]
    3576:	420a      	tst	r2, r1
    3578:	d0fc      	beq.n	3574 <trx_reg_write+0x74>
    357a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    357c:	07d2      	lsls	r2, r2, #31
    357e:	d500      	bpl.n	3582 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3580:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3582:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3584:	7e1a      	ldrb	r2, [r3, #24]
    3586:	420a      	tst	r2, r1
    3588:	d0fc      	beq.n	3584 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    358a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    358c:	7e1a      	ldrb	r2, [r3, #24]
    358e:	420a      	tst	r2, r1
    3590:	d0fc      	beq.n	358c <trx_reg_write+0x8c>
    3592:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3594:	0752      	lsls	r2, r2, #29
    3596:	d50c      	bpl.n	35b2 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3598:	8b5a      	ldrh	r2, [r3, #26]
    359a:	0752      	lsls	r2, r2, #29
    359c:	d501      	bpl.n	35a2 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    359e:	2204      	movs	r2, #4
    35a0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    35a2:	4a13      	ldr	r2, [pc, #76]	; (35f0 <trx_reg_write+0xf0>)
    35a4:	7992      	ldrb	r2, [r2, #6]
    35a6:	2a01      	cmp	r2, #1
    35a8:	d019      	beq.n	35de <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    35aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35ac:	b2db      	uxtb	r3, r3
    35ae:	4a13      	ldr	r2, [pc, #76]	; (35fc <trx_reg_write+0xfc>)
    35b0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    35b2:	2200      	movs	r2, #0
    35b4:	490f      	ldr	r1, [pc, #60]	; (35f4 <trx_reg_write+0xf4>)
    35b6:	480e      	ldr	r0, [pc, #56]	; (35f0 <trx_reg_write+0xf0>)
    35b8:	4b0f      	ldr	r3, [pc, #60]	; (35f8 <trx_reg_write+0xf8>)
    35ba:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    35bc:	23ff      	movs	r3, #255	; 0xff
    35be:	422b      	tst	r3, r5
    35c0:	d005      	beq.n	35ce <trx_reg_write+0xce>
		cpu_irq_enable();
    35c2:	2201      	movs	r2, #1
    35c4:	4b09      	ldr	r3, [pc, #36]	; (35ec <trx_reg_write+0xec>)
    35c6:	701a      	strb	r2, [r3, #0]
    35c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    35cc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    35ce:	b003      	add	sp, #12
    35d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    35d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    35d4:	05d2      	lsls	r2, r2, #23
    35d6:	0dd2      	lsrs	r2, r2, #23
    35d8:	4908      	ldr	r1, [pc, #32]	; (35fc <trx_reg_write+0xfc>)
    35da:	800a      	strh	r2, [r1, #0]
    35dc:	e7c9      	b.n	3572 <trx_reg_write+0x72>
    35de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35e0:	05db      	lsls	r3, r3, #23
    35e2:	0ddb      	lsrs	r3, r3, #23
    35e4:	4a05      	ldr	r2, [pc, #20]	; (35fc <trx_reg_write+0xfc>)
    35e6:	8013      	strh	r3, [r2, #0]
    35e8:	e7e3      	b.n	35b2 <trx_reg_write+0xb2>
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	20000008 	.word	0x20000008
    35f0:	20001244 	.word	0x20001244
    35f4:	20001208 	.word	0x20001208
    35f8:	00000ff1 	.word	0x00000ff1
    35fc:	20001200 	.word	0x20001200

00003600 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3600:	b5f0      	push	{r4, r5, r6, r7, lr}
    3602:	46d6      	mov	lr, sl
    3604:	464f      	mov	r7, r9
    3606:	4646      	mov	r6, r8
    3608:	b5c0      	push	{r6, r7, lr}
    360a:	b082      	sub	sp, #8
    360c:	0005      	movs	r5, r0
    360e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3610:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3614:	425a      	negs	r2, r3
    3616:	4153      	adcs	r3, r2
    3618:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    361a:	b672      	cpsid	i
    361c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3620:	2200      	movs	r2, #0
    3622:	4b3e      	ldr	r3, [pc, #248]	; (371c <trx_frame_read+0x11c>)
    3624:	701a      	strb	r2, [r3, #0]
	return flags;
    3626:	9b01      	ldr	r3, [sp, #4]
    3628:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    362a:	4f3d      	ldr	r7, [pc, #244]	; (3720 <trx_frame_read+0x120>)
    362c:	3201      	adds	r2, #1
    362e:	493d      	ldr	r1, [pc, #244]	; (3724 <trx_frame_read+0x124>)
    3630:	0038      	movs	r0, r7
    3632:	4b3d      	ldr	r3, [pc, #244]	; (3728 <trx_frame_read+0x128>)
    3634:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3636:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3638:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    363a:	7e1a      	ldrb	r2, [r3, #24]
    363c:	420a      	tst	r2, r1
    363e:	d0fc      	beq.n	363a <trx_frame_read+0x3a>
    3640:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3642:	07d2      	lsls	r2, r2, #31
    3644:	d501      	bpl.n	364a <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3646:	2220      	movs	r2, #32
    3648:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    364a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    364c:	7e1a      	ldrb	r2, [r3, #24]
    364e:	420a      	tst	r2, r1
    3650:	d0fc      	beq.n	364c <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3652:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3654:	7e1a      	ldrb	r2, [r3, #24]
    3656:	420a      	tst	r2, r1
    3658:	d0fc      	beq.n	3654 <trx_frame_read+0x54>
    365a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    365c:	0752      	lsls	r2, r2, #29
    365e:	d50c      	bpl.n	367a <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3660:	8b5a      	ldrh	r2, [r3, #26]
    3662:	0752      	lsls	r2, r2, #29
    3664:	d501      	bpl.n	366a <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3666:	2204      	movs	r2, #4
    3668:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    366a:	4a2d      	ldr	r2, [pc, #180]	; (3720 <trx_frame_read+0x120>)
    366c:	7992      	ldrb	r2, [r2, #6]
    366e:	2a01      	cmp	r2, #1
    3670:	d013      	beq.n	369a <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3674:	b2db      	uxtb	r3, r3
    3676:	4a2d      	ldr	r2, [pc, #180]	; (372c <trx_frame_read+0x12c>)
    3678:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    367a:	1e63      	subs	r3, r4, #1
    367c:	b2db      	uxtb	r3, r3
    367e:	2c00      	cmp	r4, #0
    3680:	d036      	beq.n	36f0 <trx_frame_read+0xf0>
    3682:	3301      	adds	r3, #1
    3684:	469c      	mov	ip, r3
    3686:	44ac      	add	ip, r5
    3688:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    368a:	4e25      	ldr	r6, [pc, #148]	; (3720 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    368c:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    368e:	2300      	movs	r3, #0
    3690:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3692:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3694:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3696:	46b1      	mov	r9, r6
    3698:	e00f      	b.n	36ba <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    369c:	05db      	lsls	r3, r3, #23
    369e:	0ddb      	lsrs	r3, r3, #23
    36a0:	4a22      	ldr	r2, [pc, #136]	; (372c <trx_frame_read+0x12c>)
    36a2:	8013      	strh	r3, [r2, #0]
    36a4:	e7e9      	b.n	367a <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    36a6:	464a      	mov	r2, r9
    36a8:	7992      	ldrb	r2, [r2, #6]
    36aa:	2a01      	cmp	r2, #1
    36ac:	d01c      	beq.n	36e8 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    36ae:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    36b0:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    36b2:	702f      	strb	r7, [r5, #0]
		data++;
    36b4:	3501      	adds	r5, #1
	while (length--) {
    36b6:	4565      	cmp	r5, ip
    36b8:	d01a      	beq.n	36f0 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    36ba:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    36bc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    36be:	4202      	tst	r2, r0
    36c0:	d0fc      	beq.n	36bc <trx_frame_read+0xbc>
    36c2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    36c4:	4202      	tst	r2, r0
    36c6:	d001      	beq.n	36cc <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    36c8:	4652      	mov	r2, sl
    36ca:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    36cc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    36ce:	4222      	tst	r2, r4
    36d0:	d0fc      	beq.n	36cc <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    36d2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    36d4:	420a      	tst	r2, r1
    36d6:	d0fc      	beq.n	36d2 <trx_frame_read+0xd2>
    36d8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    36da:	420a      	tst	r2, r1
    36dc:	d0e9      	beq.n	36b2 <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    36de:	8b5a      	ldrh	r2, [r3, #26]
    36e0:	420a      	tst	r2, r1
    36e2:	d0e0      	beq.n	36a6 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    36e4:	8359      	strh	r1, [r3, #26]
    36e6:	e7de      	b.n	36a6 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    36e8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    36ea:	05ff      	lsls	r7, r7, #23
    36ec:	0dff      	lsrs	r7, r7, #23
    36ee:	e7e0      	b.n	36b2 <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    36f0:	2200      	movs	r2, #0
    36f2:	490c      	ldr	r1, [pc, #48]	; (3724 <trx_frame_read+0x124>)
    36f4:	480a      	ldr	r0, [pc, #40]	; (3720 <trx_frame_read+0x120>)
    36f6:	4b0c      	ldr	r3, [pc, #48]	; (3728 <trx_frame_read+0x128>)
    36f8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    36fa:	23ff      	movs	r3, #255	; 0xff
    36fc:	4642      	mov	r2, r8
    36fe:	4213      	tst	r3, r2
    3700:	d005      	beq.n	370e <trx_frame_read+0x10e>
		cpu_irq_enable();
    3702:	2201      	movs	r2, #1
    3704:	4b05      	ldr	r3, [pc, #20]	; (371c <trx_frame_read+0x11c>)
    3706:	701a      	strb	r2, [r3, #0]
    3708:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    370c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    370e:	b002      	add	sp, #8
    3710:	bc1c      	pop	{r2, r3, r4}
    3712:	4690      	mov	r8, r2
    3714:	4699      	mov	r9, r3
    3716:	46a2      	mov	sl, r4
    3718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    371a:	46c0      	nop			; (mov r8, r8)
    371c:	20000008 	.word	0x20000008
    3720:	20001244 	.word	0x20001244
    3724:	20001208 	.word	0x20001208
    3728:	00000ff1 	.word	0x00000ff1
    372c:	20001200 	.word	0x20001200

00003730 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3730:	b5f0      	push	{r4, r5, r6, r7, lr}
    3732:	46c6      	mov	lr, r8
    3734:	b500      	push	{lr}
    3736:	b082      	sub	sp, #8
    3738:	0004      	movs	r4, r0
    373a:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    373c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3740:	425a      	negs	r2, r3
    3742:	4153      	adcs	r3, r2
    3744:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3746:	b672      	cpsid	i
    3748:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    374c:	2200      	movs	r2, #0
    374e:	4b3a      	ldr	r3, [pc, #232]	; (3838 <trx_frame_write+0x108>)
    3750:	701a      	strb	r2, [r3, #0]
	return flags;
    3752:	9b01      	ldr	r3, [sp, #4]
    3754:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3756:	4f39      	ldr	r7, [pc, #228]	; (383c <trx_frame_write+0x10c>)
    3758:	3201      	adds	r2, #1
    375a:	4939      	ldr	r1, [pc, #228]	; (3840 <trx_frame_write+0x110>)
    375c:	0038      	movs	r0, r7
    375e:	4b39      	ldr	r3, [pc, #228]	; (3844 <trx_frame_write+0x114>)
    3760:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3762:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3764:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3766:	7e1a      	ldrb	r2, [r3, #24]
    3768:	420a      	tst	r2, r1
    376a:	d0fc      	beq.n	3766 <trx_frame_write+0x36>
    376c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    376e:	07d2      	lsls	r2, r2, #31
    3770:	d501      	bpl.n	3776 <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3772:	2260      	movs	r2, #96	; 0x60
    3774:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3776:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3778:	7e1a      	ldrb	r2, [r3, #24]
    377a:	420a      	tst	r2, r1
    377c:	d0fc      	beq.n	3778 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    377e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3780:	7e1a      	ldrb	r2, [r3, #24]
    3782:	420a      	tst	r2, r1
    3784:	d0fc      	beq.n	3780 <trx_frame_write+0x50>
    3786:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3788:	0752      	lsls	r2, r2, #29
    378a:	d50c      	bpl.n	37a6 <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    378c:	8b5a      	ldrh	r2, [r3, #26]
    378e:	0752      	lsls	r2, r2, #29
    3790:	d501      	bpl.n	3796 <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3792:	2204      	movs	r2, #4
    3794:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3796:	4a29      	ldr	r2, [pc, #164]	; (383c <trx_frame_write+0x10c>)
    3798:	7992      	ldrb	r2, [r2, #6]
    379a:	2a01      	cmp	r2, #1
    379c:	d00b      	beq.n	37b6 <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    379e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    37a0:	b2d2      	uxtb	r2, r2
    37a2:	4929      	ldr	r1, [pc, #164]	; (3848 <trx_frame_write+0x118>)
    37a4:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    37a6:	4a25      	ldr	r2, [pc, #148]	; (383c <trx_frame_write+0x10c>)
    37a8:	7992      	ldrb	r2, [r2, #6]
    37aa:	4694      	mov	ip, r2
    37ac:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    37ae:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    37b0:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    37b2:	2404      	movs	r4, #4
    37b4:	e00d      	b.n	37d2 <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    37b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    37b8:	05d2      	lsls	r2, r2, #23
    37ba:	0dd2      	lsrs	r2, r2, #23
    37bc:	4922      	ldr	r1, [pc, #136]	; (3848 <trx_frame_write+0x118>)
    37be:	800a      	strh	r2, [r1, #0]
    37c0:	e7f1      	b.n	37a6 <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    37c2:	4662      	mov	r2, ip
    37c4:	2a01      	cmp	r2, #1
    37c6:	d01e      	beq.n	3806 <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    37c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    37ca:	b2d2      	uxtb	r2, r2
    37cc:	4e1e      	ldr	r6, [pc, #120]	; (3848 <trx_frame_write+0x118>)
    37ce:	8032      	strh	r2, [r6, #0]
    37d0:	3101      	adds	r1, #1
	while (length--) {
    37d2:	3d01      	subs	r5, #1
    37d4:	b2ed      	uxtb	r5, r5
    37d6:	2dff      	cmp	r5, #255	; 0xff
    37d8:	d01b      	beq.n	3812 <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    37da:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    37dc:	423a      	tst	r2, r7
    37de:	d0fc      	beq.n	37da <trx_frame_write+0xaa>
    37e0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    37e2:	423a      	tst	r2, r7
    37e4:	d001      	beq.n	37ea <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    37e6:	780a      	ldrb	r2, [r1, #0]
    37e8:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    37ea:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    37ec:	4202      	tst	r2, r0
    37ee:	d0fc      	beq.n	37ea <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    37f0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    37f2:	4222      	tst	r2, r4
    37f4:	d0fc      	beq.n	37f0 <trx_frame_write+0xc0>
    37f6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    37f8:	4222      	tst	r2, r4
    37fa:	d0e9      	beq.n	37d0 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    37fc:	8b5a      	ldrh	r2, [r3, #26]
    37fe:	4222      	tst	r2, r4
    3800:	d0df      	beq.n	37c2 <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3802:	835c      	strh	r4, [r3, #26]
    3804:	e7dd      	b.n	37c2 <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3808:	05d2      	lsls	r2, r2, #23
    380a:	0dd2      	lsrs	r2, r2, #23
    380c:	4e0e      	ldr	r6, [pc, #56]	; (3848 <trx_frame_write+0x118>)
    380e:	8032      	strh	r2, [r6, #0]
    3810:	e7de      	b.n	37d0 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3812:	2200      	movs	r2, #0
    3814:	490a      	ldr	r1, [pc, #40]	; (3840 <trx_frame_write+0x110>)
    3816:	4809      	ldr	r0, [pc, #36]	; (383c <trx_frame_write+0x10c>)
    3818:	4b0a      	ldr	r3, [pc, #40]	; (3844 <trx_frame_write+0x114>)
    381a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    381c:	23ff      	movs	r3, #255	; 0xff
    381e:	4642      	mov	r2, r8
    3820:	4213      	tst	r3, r2
    3822:	d005      	beq.n	3830 <trx_frame_write+0x100>
		cpu_irq_enable();
    3824:	2201      	movs	r2, #1
    3826:	4b04      	ldr	r3, [pc, #16]	; (3838 <trx_frame_write+0x108>)
    3828:	701a      	strb	r2, [r3, #0]
    382a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    382e:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3830:	b002      	add	sp, #8
    3832:	bc04      	pop	{r2}
    3834:	4690      	mov	r8, r2
    3836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3838:	20000008 	.word	0x20000008
    383c:	20001244 	.word	0x20001244
    3840:	20001208 	.word	0x20001208
    3844:	00000ff1 	.word	0x00000ff1
    3848:	20001200 	.word	0x20001200

0000384c <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    384c:	b5f0      	push	{r4, r5, r6, r7, lr}
    384e:	46c6      	mov	lr, r8
    3850:	b500      	push	{lr}
    3852:	b082      	sub	sp, #8
    3854:	0006      	movs	r6, r0
    3856:	000d      	movs	r5, r1
    3858:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    385a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    385e:	425a      	negs	r2, r3
    3860:	4153      	adcs	r3, r2
    3862:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3864:	b672      	cpsid	i
    3866:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    386a:	2200      	movs	r2, #0
    386c:	4b4d      	ldr	r3, [pc, #308]	; (39a4 <trx_sram_write+0x158>)
    386e:	701a      	strb	r2, [r3, #0]
	return flags;
    3870:	9b01      	ldr	r3, [sp, #4]
    3872:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3874:	4f4c      	ldr	r7, [pc, #304]	; (39a8 <trx_sram_write+0x15c>)
    3876:	3201      	adds	r2, #1
    3878:	494c      	ldr	r1, [pc, #304]	; (39ac <trx_sram_write+0x160>)
    387a:	0038      	movs	r0, r7
    387c:	4b4c      	ldr	r3, [pc, #304]	; (39b0 <trx_sram_write+0x164>)
    387e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3880:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3882:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3884:	7e1a      	ldrb	r2, [r3, #24]
    3886:	420a      	tst	r2, r1
    3888:	d0fc      	beq.n	3884 <trx_sram_write+0x38>
    388a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    388c:	07d2      	lsls	r2, r2, #31
    388e:	d501      	bpl.n	3894 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3890:	2240      	movs	r2, #64	; 0x40
    3892:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3894:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3896:	7e1a      	ldrb	r2, [r3, #24]
    3898:	420a      	tst	r2, r1
    389a:	d0fc      	beq.n	3896 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    389c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    389e:	7e1a      	ldrb	r2, [r3, #24]
    38a0:	420a      	tst	r2, r1
    38a2:	d0fc      	beq.n	389e <trx_sram_write+0x52>
    38a4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    38a6:	0752      	lsls	r2, r2, #29
    38a8:	d50c      	bpl.n	38c4 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    38aa:	8b5a      	ldrh	r2, [r3, #26]
    38ac:	0752      	lsls	r2, r2, #29
    38ae:	d501      	bpl.n	38b4 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    38b0:	2204      	movs	r2, #4
    38b2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    38b4:	4a3c      	ldr	r2, [pc, #240]	; (39a8 <trx_sram_write+0x15c>)
    38b6:	7992      	ldrb	r2, [r2, #6]
    38b8:	2a01      	cmp	r2, #1
    38ba:	d02b      	beq.n	3914 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    38bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38be:	b2d2      	uxtb	r2, r2
    38c0:	493c      	ldr	r1, [pc, #240]	; (39b4 <trx_sram_write+0x168>)
    38c2:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    38c4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    38c6:	7e1a      	ldrb	r2, [r3, #24]
    38c8:	420a      	tst	r2, r1
    38ca:	d0fc      	beq.n	38c6 <trx_sram_write+0x7a>
    38cc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    38ce:	07d2      	lsls	r2, r2, #31
    38d0:	d500      	bpl.n	38d4 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    38d2:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    38d4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    38d6:	7e1a      	ldrb	r2, [r3, #24]
    38d8:	420a      	tst	r2, r1
    38da:	d0fc      	beq.n	38d6 <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    38dc:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    38de:	7e1a      	ldrb	r2, [r3, #24]
    38e0:	420a      	tst	r2, r1
    38e2:	d0fc      	beq.n	38de <trx_sram_write+0x92>
    38e4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    38e6:	0752      	lsls	r2, r2, #29
    38e8:	d50c      	bpl.n	3904 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    38ea:	8b5a      	ldrh	r2, [r3, #26]
    38ec:	0752      	lsls	r2, r2, #29
    38ee:	d501      	bpl.n	38f4 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    38f0:	2204      	movs	r2, #4
    38f2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    38f4:	4a2c      	ldr	r2, [pc, #176]	; (39a8 <trx_sram_write+0x15c>)
    38f6:	7992      	ldrb	r2, [r2, #6]
    38f8:	2a01      	cmp	r2, #1
    38fa:	d011      	beq.n	3920 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    38fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38fe:	b2d2      	uxtb	r2, r2
    3900:	492c      	ldr	r1, [pc, #176]	; (39b4 <trx_sram_write+0x168>)
    3902:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3904:	4a28      	ldr	r2, [pc, #160]	; (39a8 <trx_sram_write+0x15c>)
    3906:	7992      	ldrb	r2, [r2, #6]
    3908:	4694      	mov	ip, r2
    390a:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    390c:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    390e:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3910:	2104      	movs	r1, #4
    3912:	e013      	b.n	393c <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3916:	05d2      	lsls	r2, r2, #23
    3918:	0dd2      	lsrs	r2, r2, #23
    391a:	4926      	ldr	r1, [pc, #152]	; (39b4 <trx_sram_write+0x168>)
    391c:	800a      	strh	r2, [r1, #0]
    391e:	e7d1      	b.n	38c4 <trx_sram_write+0x78>
    3920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3922:	05d2      	lsls	r2, r2, #23
    3924:	0dd2      	lsrs	r2, r2, #23
    3926:	4923      	ldr	r1, [pc, #140]	; (39b4 <trx_sram_write+0x168>)
    3928:	800a      	strh	r2, [r1, #0]
    392a:	e7eb      	b.n	3904 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    392c:	4662      	mov	r2, ip
    392e:	2a01      	cmp	r2, #1
    3930:	d01e      	beq.n	3970 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3934:	b2d2      	uxtb	r2, r2
    3936:	4f1f      	ldr	r7, [pc, #124]	; (39b4 <trx_sram_write+0x168>)
    3938:	803a      	strh	r2, [r7, #0]
    393a:	3001      	adds	r0, #1
	while (length--) {
    393c:	3c01      	subs	r4, #1
    393e:	b2e4      	uxtb	r4, r4
    3940:	2cff      	cmp	r4, #255	; 0xff
    3942:	d01b      	beq.n	397c <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3944:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3946:	4232      	tst	r2, r6
    3948:	d0fc      	beq.n	3944 <trx_sram_write+0xf8>
    394a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    394c:	4232      	tst	r2, r6
    394e:	d001      	beq.n	3954 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3950:	7802      	ldrb	r2, [r0, #0]
    3952:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3954:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3956:	422a      	tst	r2, r5
    3958:	d0fc      	beq.n	3954 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    395a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    395c:	420a      	tst	r2, r1
    395e:	d0fc      	beq.n	395a <trx_sram_write+0x10e>
    3960:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3962:	420a      	tst	r2, r1
    3964:	d0e9      	beq.n	393a <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3966:	8b5a      	ldrh	r2, [r3, #26]
    3968:	420a      	tst	r2, r1
    396a:	d0df      	beq.n	392c <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    396c:	8359      	strh	r1, [r3, #26]
    396e:	e7dd      	b.n	392c <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3972:	05d2      	lsls	r2, r2, #23
    3974:	0dd2      	lsrs	r2, r2, #23
    3976:	4f0f      	ldr	r7, [pc, #60]	; (39b4 <trx_sram_write+0x168>)
    3978:	803a      	strh	r2, [r7, #0]
    397a:	e7de      	b.n	393a <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    397c:	2200      	movs	r2, #0
    397e:	490b      	ldr	r1, [pc, #44]	; (39ac <trx_sram_write+0x160>)
    3980:	4809      	ldr	r0, [pc, #36]	; (39a8 <trx_sram_write+0x15c>)
    3982:	4b0b      	ldr	r3, [pc, #44]	; (39b0 <trx_sram_write+0x164>)
    3984:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3986:	23ff      	movs	r3, #255	; 0xff
    3988:	4642      	mov	r2, r8
    398a:	4213      	tst	r3, r2
    398c:	d005      	beq.n	399a <trx_sram_write+0x14e>
		cpu_irq_enable();
    398e:	2201      	movs	r2, #1
    3990:	4b04      	ldr	r3, [pc, #16]	; (39a4 <trx_sram_write+0x158>)
    3992:	701a      	strb	r2, [r3, #0]
    3994:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3998:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    399a:	b002      	add	sp, #8
    399c:	bc04      	pop	{r2}
    399e:	4690      	mov	r8, r2
    39a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	20000008 	.word	0x20000008
    39a8:	20001244 	.word	0x20001244
    39ac:	20001208 	.word	0x20001208
    39b0:	00000ff1 	.word	0x00000ff1
    39b4:	20001200 	.word	0x20001200

000039b8 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    39b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ba:	46d6      	mov	lr, sl
    39bc:	464f      	mov	r7, r9
    39be:	4646      	mov	r6, r8
    39c0:	b5c0      	push	{r6, r7, lr}
    39c2:	b082      	sub	sp, #8
    39c4:	0004      	movs	r4, r0
    39c6:	000d      	movs	r5, r1
    39c8:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    39ca:	2001      	movs	r0, #1
    39cc:	4b56      	ldr	r3, [pc, #344]	; (3b28 <trx_sram_read+0x170>)
    39ce:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    39d0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    39d4:	425a      	negs	r2, r3
    39d6:	4153      	adcs	r3, r2
    39d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    39da:	b672      	cpsid	i
    39dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    39e0:	2200      	movs	r2, #0
    39e2:	4b52      	ldr	r3, [pc, #328]	; (3b2c <trx_sram_read+0x174>)
    39e4:	701a      	strb	r2, [r3, #0]
	return flags;
    39e6:	9b01      	ldr	r3, [sp, #4]
    39e8:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    39ea:	4e51      	ldr	r6, [pc, #324]	; (3b30 <trx_sram_read+0x178>)
    39ec:	3201      	adds	r2, #1
    39ee:	4951      	ldr	r1, [pc, #324]	; (3b34 <trx_sram_read+0x17c>)
    39f0:	0030      	movs	r0, r6
    39f2:	4b51      	ldr	r3, [pc, #324]	; (3b38 <trx_sram_read+0x180>)
    39f4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    39f6:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    39f8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    39fa:	7e1a      	ldrb	r2, [r3, #24]
    39fc:	420a      	tst	r2, r1
    39fe:	d0fc      	beq.n	39fa <trx_sram_read+0x42>
    3a00:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3a02:	07d2      	lsls	r2, r2, #31
    3a04:	d501      	bpl.n	3a0a <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a06:	2200      	movs	r2, #0
    3a08:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3a0a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a0c:	7e1a      	ldrb	r2, [r3, #24]
    3a0e:	420a      	tst	r2, r1
    3a10:	d0fc      	beq.n	3a0c <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3a12:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a14:	7e1a      	ldrb	r2, [r3, #24]
    3a16:	420a      	tst	r2, r1
    3a18:	d0fc      	beq.n	3a14 <trx_sram_read+0x5c>
    3a1a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3a1c:	0752      	lsls	r2, r2, #29
    3a1e:	d50c      	bpl.n	3a3a <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a20:	8b5a      	ldrh	r2, [r3, #26]
    3a22:	0752      	lsls	r2, r2, #29
    3a24:	d501      	bpl.n	3a2a <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3a26:	2204      	movs	r2, #4
    3a28:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a2a:	4a41      	ldr	r2, [pc, #260]	; (3b30 <trx_sram_read+0x178>)
    3a2c:	7992      	ldrb	r2, [r2, #6]
    3a2e:	2a01      	cmp	r2, #1
    3a30:	d033      	beq.n	3a9a <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3a34:	b2d2      	uxtb	r2, r2
    3a36:	4941      	ldr	r1, [pc, #260]	; (3b3c <trx_sram_read+0x184>)
    3a38:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    3a3a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a3c:	7e1a      	ldrb	r2, [r3, #24]
    3a3e:	420a      	tst	r2, r1
    3a40:	d0fc      	beq.n	3a3c <trx_sram_read+0x84>
    3a42:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3a44:	07d2      	lsls	r2, r2, #31
    3a46:	d500      	bpl.n	3a4a <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a48:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3a4a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a4c:	7e1a      	ldrb	r2, [r3, #24]
    3a4e:	420a      	tst	r2, r1
    3a50:	d0fc      	beq.n	3a4c <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3a52:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a54:	7e1a      	ldrb	r2, [r3, #24]
    3a56:	420a      	tst	r2, r1
    3a58:	d0fc      	beq.n	3a54 <trx_sram_read+0x9c>
    3a5a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3a5c:	0752      	lsls	r2, r2, #29
    3a5e:	d50c      	bpl.n	3a7a <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a60:	8b5a      	ldrh	r2, [r3, #26]
    3a62:	0752      	lsls	r2, r2, #29
    3a64:	d501      	bpl.n	3a6a <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3a66:	2204      	movs	r2, #4
    3a68:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a6a:	4a31      	ldr	r2, [pc, #196]	; (3b30 <trx_sram_read+0x178>)
    3a6c:	7992      	ldrb	r2, [r2, #6]
    3a6e:	2a01      	cmp	r2, #1
    3a70:	d019      	beq.n	3aa6 <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a74:	b2db      	uxtb	r3, r3
    3a76:	4a31      	ldr	r2, [pc, #196]	; (3b3c <trx_sram_read+0x184>)
    3a78:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    3a7a:	1e7b      	subs	r3, r7, #1
    3a7c:	b2db      	uxtb	r3, r3
    3a7e:	2f00      	cmp	r7, #0
    3a80:	d03c      	beq.n	3afc <trx_sram_read+0x144>
    3a82:	3301      	adds	r3, #1
    3a84:	469c      	mov	ip, r3
    3a86:	44ac      	add	ip, r5
    3a88:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a8a:	4e29      	ldr	r6, [pc, #164]	; (3b30 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    3a8c:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a8e:	2300      	movs	r3, #0
    3a90:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3a92:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3a94:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a96:	46b1      	mov	r9, r6
    3a98:	e015      	b.n	3ac6 <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3a9c:	05d2      	lsls	r2, r2, #23
    3a9e:	0dd2      	lsrs	r2, r2, #23
    3aa0:	4926      	ldr	r1, [pc, #152]	; (3b3c <trx_sram_read+0x184>)
    3aa2:	800a      	strh	r2, [r1, #0]
    3aa4:	e7c9      	b.n	3a3a <trx_sram_read+0x82>
    3aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3aa8:	05db      	lsls	r3, r3, #23
    3aaa:	0ddb      	lsrs	r3, r3, #23
    3aac:	4a23      	ldr	r2, [pc, #140]	; (3b3c <trx_sram_read+0x184>)
    3aae:	8013      	strh	r3, [r2, #0]
    3ab0:	e7e3      	b.n	3a7a <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ab2:	464a      	mov	r2, r9
    3ab4:	7992      	ldrb	r2, [r2, #6]
    3ab6:	2a01      	cmp	r2, #1
    3ab8:	d01c      	beq.n	3af4 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3aba:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3abc:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    3abe:	702f      	strb	r7, [r5, #0]
		data++;
    3ac0:	3501      	adds	r5, #1
	while (length--) {
    3ac2:	4565      	cmp	r5, ip
    3ac4:	d01a      	beq.n	3afc <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ac6:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ac8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3aca:	4202      	tst	r2, r0
    3acc:	d0fc      	beq.n	3ac8 <trx_sram_read+0x110>
    3ace:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ad0:	4202      	tst	r2, r0
    3ad2:	d001      	beq.n	3ad8 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ad4:	4652      	mov	r2, sl
    3ad6:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ad8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3ada:	4222      	tst	r2, r4
    3adc:	d0fc      	beq.n	3ad8 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ade:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3ae0:	420a      	tst	r2, r1
    3ae2:	d0fc      	beq.n	3ade <trx_sram_read+0x126>
    3ae4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3ae6:	420a      	tst	r2, r1
    3ae8:	d0e9      	beq.n	3abe <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3aea:	8b5a      	ldrh	r2, [r3, #26]
    3aec:	420a      	tst	r2, r1
    3aee:	d0e0      	beq.n	3ab2 <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3af0:	8359      	strh	r1, [r3, #26]
    3af2:	e7de      	b.n	3ab2 <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3af4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3af6:	05ff      	lsls	r7, r7, #23
    3af8:	0dff      	lsrs	r7, r7, #23
    3afa:	e7e0      	b.n	3abe <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3afc:	2200      	movs	r2, #0
    3afe:	490d      	ldr	r1, [pc, #52]	; (3b34 <trx_sram_read+0x17c>)
    3b00:	480b      	ldr	r0, [pc, #44]	; (3b30 <trx_sram_read+0x178>)
    3b02:	4b0d      	ldr	r3, [pc, #52]	; (3b38 <trx_sram_read+0x180>)
    3b04:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3b06:	23ff      	movs	r3, #255	; 0xff
    3b08:	4642      	mov	r2, r8
    3b0a:	4213      	tst	r3, r2
    3b0c:	d005      	beq.n	3b1a <trx_sram_read+0x162>
		cpu_irq_enable();
    3b0e:	2201      	movs	r2, #1
    3b10:	4b06      	ldr	r3, [pc, #24]	; (3b2c <trx_sram_read+0x174>)
    3b12:	701a      	strb	r2, [r3, #0]
    3b14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b18:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3b1a:	b002      	add	sp, #8
    3b1c:	bc1c      	pop	{r2, r3, r4}
    3b1e:	4690      	mov	r8, r2
    3b20:	4699      	mov	r9, r3
    3b22:	46a2      	mov	sl, r4
    3b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b26:	46c0      	nop			; (mov r8, r8)
    3b28:	00000155 	.word	0x00000155
    3b2c:	20000008 	.word	0x20000008
    3b30:	20001244 	.word	0x20001244
    3b34:	20001208 	.word	0x20001208
    3b38:	00000ff1 	.word	0x00000ff1
    3b3c:	20001200 	.word	0x20001200

00003b40 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    3b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b42:	46d6      	mov	lr, sl
    3b44:	464f      	mov	r7, r9
    3b46:	4646      	mov	r6, r8
    3b48:	b5c0      	push	{r6, r7, lr}
    3b4a:	0006      	movs	r6, r0
    3b4c:	468a      	mov	sl, r1
    3b4e:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    3b50:	2001      	movs	r0, #1
    3b52:	4b76      	ldr	r3, [pc, #472]	; (3d2c <trx_aes_wrrd+0x1ec>)
    3b54:	4798      	blx	r3

	ENTER_TRX_REGION();
    3b56:	2100      	movs	r1, #0
    3b58:	2000      	movs	r0, #0
    3b5a:	4b75      	ldr	r3, [pc, #468]	; (3d30 <trx_aes_wrrd+0x1f0>)
    3b5c:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3b5e:	4f75      	ldr	r7, [pc, #468]	; (3d34 <trx_aes_wrrd+0x1f4>)
    3b60:	2201      	movs	r2, #1
    3b62:	4975      	ldr	r1, [pc, #468]	; (3d38 <trx_aes_wrrd+0x1f8>)
    3b64:	0038      	movs	r0, r7
    3b66:	4b75      	ldr	r3, [pc, #468]	; (3d3c <trx_aes_wrrd+0x1fc>)
    3b68:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b6a:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    3b6c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b6e:	7e1a      	ldrb	r2, [r3, #24]
    3b70:	420a      	tst	r2, r1
    3b72:	d0fc      	beq.n	3b6e <trx_aes_wrrd+0x2e>
    3b74:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3b76:	07d2      	lsls	r2, r2, #31
    3b78:	d501      	bpl.n	3b7e <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b7a:	2240      	movs	r2, #64	; 0x40
    3b7c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3b7e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b80:	7e1a      	ldrb	r2, [r3, #24]
    3b82:	420a      	tst	r2, r1
    3b84:	d0fc      	beq.n	3b80 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3b86:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b88:	7e1a      	ldrb	r2, [r3, #24]
    3b8a:	420a      	tst	r2, r1
    3b8c:	d0fc      	beq.n	3b88 <trx_aes_wrrd+0x48>
    3b8e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3b90:	0752      	lsls	r2, r2, #29
    3b92:	d50c      	bpl.n	3bae <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b94:	8b5a      	ldrh	r2, [r3, #26]
    3b96:	0752      	lsls	r2, r2, #29
    3b98:	d501      	bpl.n	3b9e <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3b9a:	2204      	movs	r2, #4
    3b9c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b9e:	4a65      	ldr	r2, [pc, #404]	; (3d34 <trx_aes_wrrd+0x1f4>)
    3ba0:	7992      	ldrb	r2, [r2, #6]
    3ba2:	2a01      	cmp	r2, #1
    3ba4:	d055      	beq.n	3c52 <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ba8:	b2d2      	uxtb	r2, r2
    3baa:	4965      	ldr	r1, [pc, #404]	; (3d40 <trx_aes_wrrd+0x200>)
    3bac:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    3bae:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bb0:	7e1a      	ldrb	r2, [r3, #24]
    3bb2:	420a      	tst	r2, r1
    3bb4:	d0fc      	beq.n	3bb0 <trx_aes_wrrd+0x70>
    3bb6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3bb8:	07d2      	lsls	r2, r2, #31
    3bba:	d500      	bpl.n	3bbe <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3bbc:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3bbe:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3bc0:	7e1a      	ldrb	r2, [r3, #24]
    3bc2:	420a      	tst	r2, r1
    3bc4:	d0fc      	beq.n	3bc0 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3bc6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3bc8:	7e1a      	ldrb	r2, [r3, #24]
    3bca:	420a      	tst	r2, r1
    3bcc:	d0fc      	beq.n	3bc8 <trx_aes_wrrd+0x88>
    3bce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3bd0:	0752      	lsls	r2, r2, #29
    3bd2:	d50c      	bpl.n	3bee <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3bd4:	8b5a      	ldrh	r2, [r3, #26]
    3bd6:	0752      	lsls	r2, r2, #29
    3bd8:	d501      	bpl.n	3bde <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3bda:	2204      	movs	r2, #4
    3bdc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bde:	4a55      	ldr	r2, [pc, #340]	; (3d34 <trx_aes_wrrd+0x1f4>)
    3be0:	7992      	ldrb	r2, [r2, #6]
    3be2:	2a01      	cmp	r2, #1
    3be4:	d03b      	beq.n	3c5e <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3be8:	b2d2      	uxtb	r2, r2
    3bea:	4955      	ldr	r1, [pc, #340]	; (3d40 <trx_aes_wrrd+0x200>)
    3bec:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    3bee:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bf0:	7e1a      	ldrb	r2, [r3, #24]
    3bf2:	420a      	tst	r2, r1
    3bf4:	d0fc      	beq.n	3bf0 <trx_aes_wrrd+0xb0>
    3bf6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3bf8:	07d2      	lsls	r2, r2, #31
    3bfa:	d502      	bpl.n	3c02 <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3bfc:	4652      	mov	r2, sl
    3bfe:	7812      	ldrb	r2, [r2, #0]
    3c00:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    3c02:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c04:	7e1a      	ldrb	r2, [r3, #24]
    3c06:	420a      	tst	r2, r1
    3c08:	d0fc      	beq.n	3c04 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c0a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c0c:	7e1a      	ldrb	r2, [r3, #24]
    3c0e:	420a      	tst	r2, r1
    3c10:	d0fc      	beq.n	3c0c <trx_aes_wrrd+0xcc>
    3c12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3c14:	0752      	lsls	r2, r2, #29
    3c16:	d50c      	bpl.n	3c32 <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c18:	8b5a      	ldrh	r2, [r3, #26]
    3c1a:	0752      	lsls	r2, r2, #29
    3c1c:	d501      	bpl.n	3c22 <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3c1e:	2204      	movs	r2, #4
    3c20:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c22:	4a44      	ldr	r2, [pc, #272]	; (3d34 <trx_aes_wrrd+0x1f4>)
    3c24:	7992      	ldrb	r2, [r2, #6]
    3c26:	2a01      	cmp	r2, #1
    3c28:	d01f      	beq.n	3c6a <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c2c:	b2db      	uxtb	r3, r3
    3c2e:	4a44      	ldr	r2, [pc, #272]	; (3d40 <trx_aes_wrrd+0x200>)
    3c30:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    3c32:	2700      	movs	r7, #0
    3c34:	2c00      	cmp	r4, #0
    3c36:	d043      	beq.n	3cc0 <trx_aes_wrrd+0x180>
    3c38:	4656      	mov	r6, sl
    3c3a:	3c01      	subs	r4, #1
    3c3c:	b2e4      	uxtb	r4, r4
    3c3e:	3401      	adds	r4, #1
    3c40:	44a2      	add	sl, r4
    3c42:	46d0      	mov	r8, sl
    3c44:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c46:	4d3b      	ldr	r5, [pc, #236]	; (3d34 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    3c48:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    3c4a:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    3c4c:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c4e:	46a9      	mov	r9, r5
    3c50:	e01b      	b.n	3c8a <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c54:	05d2      	lsls	r2, r2, #23
    3c56:	0dd2      	lsrs	r2, r2, #23
    3c58:	4939      	ldr	r1, [pc, #228]	; (3d40 <trx_aes_wrrd+0x200>)
    3c5a:	800a      	strh	r2, [r1, #0]
    3c5c:	e7a7      	b.n	3bae <trx_aes_wrrd+0x6e>
    3c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c60:	05d2      	lsls	r2, r2, #23
    3c62:	0dd2      	lsrs	r2, r2, #23
    3c64:	4936      	ldr	r1, [pc, #216]	; (3d40 <trx_aes_wrrd+0x200>)
    3c66:	800a      	strh	r2, [r1, #0]
    3c68:	e7c1      	b.n	3bee <trx_aes_wrrd+0xae>
    3c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c6c:	05db      	lsls	r3, r3, #23
    3c6e:	0ddb      	lsrs	r3, r3, #23
    3c70:	4a33      	ldr	r2, [pc, #204]	; (3d40 <trx_aes_wrrd+0x200>)
    3c72:	8013      	strh	r3, [r2, #0]
    3c74:	e7dd      	b.n	3c32 <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c76:	464a      	mov	r2, r9
    3c78:	7992      	ldrb	r2, [r2, #6]
    3c7a:	2a01      	cmp	r2, #1
    3c7c:	d01c      	beq.n	3cb8 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c7e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3c80:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    3c82:	7037      	strb	r7, [r6, #0]
    3c84:	3601      	adds	r6, #1
	while (length > 0) {
    3c86:	45b0      	cmp	r8, r6
    3c88:	d01a      	beq.n	3cc0 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c8a:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c8c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3c8e:	4202      	tst	r2, r0
    3c90:	d0fc      	beq.n	3c8c <trx_aes_wrrd+0x14c>
    3c92:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c94:	4202      	tst	r2, r0
    3c96:	d001      	beq.n	3c9c <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c98:	7872      	ldrb	r2, [r6, #1]
    3c9a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c9c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3c9e:	4222      	tst	r2, r4
    3ca0:	d0fc      	beq.n	3c9c <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ca2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3ca4:	420a      	tst	r2, r1
    3ca6:	d0fc      	beq.n	3ca2 <trx_aes_wrrd+0x162>
    3ca8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3caa:	420a      	tst	r2, r1
    3cac:	d0e9      	beq.n	3c82 <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cae:	8b5a      	ldrh	r2, [r3, #26]
    3cb0:	420a      	tst	r2, r1
    3cb2:	d0e0      	beq.n	3c76 <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cb4:	8359      	strh	r1, [r3, #26]
    3cb6:	e7de      	b.n	3c76 <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3cb8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3cba:	05ff      	lsls	r7, r7, #23
    3cbc:	0dff      	lsrs	r7, r7, #23
    3cbe:	e7e0      	b.n	3c82 <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3cc0:	4b1c      	ldr	r3, [pc, #112]	; (3d34 <trx_aes_wrrd+0x1f4>)
    3cc2:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    3cc4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3cc6:	7e1a      	ldrb	r2, [r3, #24]
    3cc8:	420a      	tst	r2, r1
    3cca:	d0fc      	beq.n	3cc6 <trx_aes_wrrd+0x186>
    3ccc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3cce:	07d2      	lsls	r2, r2, #31
    3cd0:	d501      	bpl.n	3cd6 <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cd2:	2200      	movs	r2, #0
    3cd4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3cd6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cd8:	7e1a      	ldrb	r2, [r3, #24]
    3cda:	420a      	tst	r2, r1
    3cdc:	d0fc      	beq.n	3cd8 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    3cde:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ce0:	7e1a      	ldrb	r2, [r3, #24]
    3ce2:	420a      	tst	r2, r1
    3ce4:	d0fc      	beq.n	3ce0 <trx_aes_wrrd+0x1a0>
    3ce6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3ce8:	0752      	lsls	r2, r2, #29
    3cea:	d50a      	bpl.n	3d02 <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cec:	8b5a      	ldrh	r2, [r3, #26]
    3cee:	0752      	lsls	r2, r2, #29
    3cf0:	d501      	bpl.n	3cf6 <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cf2:	2204      	movs	r2, #4
    3cf4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cf6:	4a0f      	ldr	r2, [pc, #60]	; (3d34 <trx_aes_wrrd+0x1f4>)
    3cf8:	7992      	ldrb	r2, [r2, #6]
    3cfa:	2a01      	cmp	r2, #1
    3cfc:	d011      	beq.n	3d22 <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cfe:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3d00:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    3d02:	4653      	mov	r3, sl
    3d04:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3d06:	2200      	movs	r2, #0
    3d08:	490b      	ldr	r1, [pc, #44]	; (3d38 <trx_aes_wrrd+0x1f8>)
    3d0a:	480a      	ldr	r0, [pc, #40]	; (3d34 <trx_aes_wrrd+0x1f4>)
    3d0c:	4b0b      	ldr	r3, [pc, #44]	; (3d3c <trx_aes_wrrd+0x1fc>)
    3d0e:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    3d10:	2100      	movs	r1, #0
    3d12:	2000      	movs	r0, #0
    3d14:	4b0b      	ldr	r3, [pc, #44]	; (3d44 <trx_aes_wrrd+0x204>)
    3d16:	4798      	blx	r3
}
    3d18:	bc1c      	pop	{r2, r3, r4}
    3d1a:	4690      	mov	r8, r2
    3d1c:	4699      	mov	r9, r3
    3d1e:	46a2      	mov	sl, r4
    3d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d22:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3d24:	05ff      	lsls	r7, r7, #23
    3d26:	0dff      	lsrs	r7, r7, #23
    3d28:	e7eb      	b.n	3d02 <trx_aes_wrrd+0x1c2>
    3d2a:	46c0      	nop			; (mov r8, r8)
    3d2c:	00000155 	.word	0x00000155
    3d30:	000006e9 	.word	0x000006e9
    3d34:	20001244 	.word	0x20001244
    3d38:	20001208 	.word	0x20001208
    3d3c:	00000ff1 	.word	0x00000ff1
    3d40:	20001200 	.word	0x20001200
    3d44:	000006c9 	.word	0x000006c9

00003d48 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3d48:	2280      	movs	r2, #128	; 0x80
    3d4a:	0512      	lsls	r2, r2, #20
    3d4c:	4b01      	ldr	r3, [pc, #4]	; (3d54 <appCmdIdentifyPeriodTimerHandler+0xc>)
    3d4e:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    3d50:	4770      	bx	lr
    3d52:	46c0      	nop			; (mov r8, r8)
    3d54:	41004400 	.word	0x41004400

00003d58 <appCmdIdentifyDurationTimerHandler>:
{
    3d58:	b510      	push	{r4, lr}
		port_base->OUTCLR.reg = pin_mask;
    3d5a:	2280      	movs	r2, #128	; 0x80
    3d5c:	0512      	lsls	r2, r2, #20
    3d5e:	4b03      	ldr	r3, [pc, #12]	; (3d6c <appCmdIdentifyDurationTimerHandler+0x14>)
    3d60:	615a      	str	r2, [r3, #20]
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    3d62:	4803      	ldr	r0, [pc, #12]	; (3d70 <appCmdIdentifyDurationTimerHandler+0x18>)
    3d64:	4b03      	ldr	r3, [pc, #12]	; (3d74 <appCmdIdentifyDurationTimerHandler+0x1c>)
    3d66:	4798      	blx	r3
}
    3d68:	bd10      	pop	{r4, pc}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	41004400 	.word	0x41004400
    3d70:	20000218 	.word	0x20000218
    3d74:	00002ded 	.word	0x00002ded

00003d78 <appCmdHandle>:
{
    3d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d7a:	0004      	movs	r4, r0
	if (size < sizeof(AppCmdHeader_t)) return false;
    3d7c:	2000      	movs	r0, #0
    3d7e:	2900      	cmp	r1, #0
    3d80:	d002      	beq.n	3d88 <appCmdHandle+0x10>
	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    3d82:	7823      	ldrb	r3, [r4, #0]
    3d84:	2b10      	cmp	r3, #16
    3d86:	d000      	beq.n	3d8a <appCmdHandle+0x12>
}
    3d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sizeof(AppCmdIdentify_t) != size) return false;
    3d8a:	2905      	cmp	r1, #5
    3d8c:	d1fc      	bne.n	3d88 <appCmdHandle+0x10>
		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    3d8e:	4e12      	ldr	r6, [pc, #72]	; (3dd8 <appCmdHandle+0x60>)
    3d90:	0030      	movs	r0, r6
    3d92:	4f12      	ldr	r7, [pc, #72]	; (3ddc <appCmdHandle+0x64>)
    3d94:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    3d96:	4d12      	ldr	r5, [pc, #72]	; (3de0 <appCmdHandle+0x68>)
    3d98:	0028      	movs	r0, r5
    3d9a:	47b8      	blx	r7
		appCmdIdentifyDurationTimer.interval = req->duration;
    3d9c:	7862      	ldrb	r2, [r4, #1]
    3d9e:	78a3      	ldrb	r3, [r4, #2]
    3da0:	021b      	lsls	r3, r3, #8
    3da2:	4313      	orrs	r3, r2
    3da4:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3da6:	2300      	movs	r3, #0
    3da8:	7333      	strb	r3, [r6, #12]
		appCmdIdentifyDurationTimer.handler	= appCmdIdentifyDurationTimerHandler;
    3daa:	4b0e      	ldr	r3, [pc, #56]	; (3de4 <appCmdHandle+0x6c>)
    3dac:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    3dae:	0030      	movs	r0, r6
    3db0:	4e0d      	ldr	r6, [pc, #52]	; (3de8 <appCmdHandle+0x70>)
    3db2:	47b0      	blx	r6
		appCmdIdentifyPeriodTimer.interval = req->period;
    3db4:	78e2      	ldrb	r2, [r4, #3]
    3db6:	7923      	ldrb	r3, [r4, #4]
    3db8:	021b      	lsls	r3, r3, #8
    3dba:	4313      	orrs	r3, r2
    3dbc:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3dbe:	2301      	movs	r3, #1
    3dc0:	732b      	strb	r3, [r5, #12]
		appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    3dc2:	4b0a      	ldr	r3, [pc, #40]	; (3dec <appCmdHandle+0x74>)
    3dc4:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    3dc6:	0028      	movs	r0, r5
    3dc8:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3dca:	2280      	movs	r2, #128	; 0x80
    3dcc:	0512      	lsls	r2, r2, #20
    3dce:	4b08      	ldr	r3, [pc, #32]	; (3df0 <appCmdHandle+0x78>)
    3dd0:	619a      	str	r2, [r3, #24]
		return true;
    3dd2:	2001      	movs	r0, #1
    3dd4:	e7d8      	b.n	3d88 <appCmdHandle+0x10>
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	20000204 	.word	0x20000204
    3ddc:	00002ded 	.word	0x00002ded
    3de0:	20000218 	.word	0x20000218
    3de4:	00003d59 	.word	0x00003d59
    3de8:	00002e59 	.word	0x00002e59
    3dec:	00003d49 	.word	0x00003d49
    3df0:	41004400 	.word	0x41004400

00003df4 <APP_CommandsInit>:
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3df4:	4b05      	ldr	r3, [pc, #20]	; (3e0c <APP_CommandsInit+0x18>)
    3df6:	2200      	movs	r2, #0
    3df8:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
    3dfa:	4a05      	ldr	r2, [pc, #20]	; (3e10 <APP_CommandsInit+0x1c>)
    3dfc:	611a      	str	r2, [r3, #16]
	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3dfe:	4b05      	ldr	r3, [pc, #20]	; (3e14 <APP_CommandsInit+0x20>)
    3e00:	2201      	movs	r2, #1
    3e02:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    3e04:	4a04      	ldr	r2, [pc, #16]	; (3e18 <APP_CommandsInit+0x24>)
    3e06:	611a      	str	r2, [r3, #16]
}
    3e08:	4770      	bx	lr
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	20000204 	.word	0x20000204
    3e10:	00003d59 	.word	0x00003d59
    3e14:	20000218 	.word	0x20000218
    3e18:	00003d49 	.word	0x00003d49

00003e1c <appCmdDataInd>:
{
    3e1c:	b510      	push	{r4, lr}
	appCmdHandle(ind->payload, ind->payloadSize);
    3e1e:	7a01      	ldrb	r1, [r0, #8]
    3e20:	6840      	ldr	r0, [r0, #4]
    3e22:	4b01      	ldr	r3, [pc, #4]	; (3e28 <appCmdDataInd+0xc>)
    3e24:	4798      	blx	r3
}
    3e26:	bd10      	pop	{r4, pc}
    3e28:	00003d79 	.word	0x00003d79

00003e2c <configure_rtc_callbacks>:
#include "global.h"

extern AppState_t appState;


void configure_rtc_callbacks(void){
    3e2c:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(	&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    3e2e:	4c05      	ldr	r4, [pc, #20]	; (3e44 <configure_rtc_callbacks+0x18>)
    3e30:	2200      	movs	r2, #0
    3e32:	4905      	ldr	r1, [pc, #20]	; (3e48 <configure_rtc_callbacks+0x1c>)
    3e34:	0020      	movs	r0, r4
    3e36:	4b05      	ldr	r3, [pc, #20]	; (3e4c <configure_rtc_callbacks+0x20>)
    3e38:	4798      	blx	r3
	rtc_calendar_enable_callback(	&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);	
    3e3a:	2100      	movs	r1, #0
    3e3c:	0020      	movs	r0, r4
    3e3e:	4b04      	ldr	r3, [pc, #16]	; (3e50 <configure_rtc_callbacks+0x24>)
    3e40:	4798      	blx	r3
}
    3e42:	bd10      	pop	{r4, pc}
    3e44:	20001250 	.word	0x20001250
    3e48:	000041a9 	.word	0x000041a9
    3e4c:	00000a1d 	.word	0x00000a1d
    3e50:	00000a3b 	.word	0x00000a3b

00003e54 <configure_rtc_calendar>:

void configure_rtc_calendar(void){
    3e54:	b530      	push	{r4, r5, lr}
    3e56:	b087      	sub	sp, #28
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3e58:	ac01      	add	r4, sp, #4
    3e5a:	23a0      	movs	r3, #160	; 0xa0
    3e5c:	011b      	lsls	r3, r3, #4
    3e5e:	8023      	strh	r3, [r4, #0]
	config->clear_on_match      = false;
    3e60:	2300      	movs	r3, #0
    3e62:	70a3      	strb	r3, [r4, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3e64:	70e3      	strb	r3, [r4, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3e66:	22fa      	movs	r2, #250	; 0xfa
    3e68:	00d2      	lsls	r2, r2, #3
    3e6a:	80e2      	strh	r2, [r4, #6]
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	alarm.time.year		= 2019;
    3e6c:	490e      	ldr	r1, [pc, #56]	; (3ea8 <configure_rtc_calendar+0x54>)
    3e6e:	4a0f      	ldr	r2, [pc, #60]	; (3eac <configure_rtc_calendar+0x58>)
    3e70:	80ca      	strh	r2, [r1, #6]
	alarm.time.month	= 3;
    3e72:	2203      	movs	r2, #3
    3e74:	714a      	strb	r2, [r1, #5]
	alarm.time.day		= 11;
    3e76:	3208      	adds	r2, #8
    3e78:	710a      	strb	r2, [r1, #4]
	alarm.time.hour		= 8;
    3e7a:	3a03      	subs	r2, #3
    3e7c:	708a      	strb	r2, [r1, #2]
	alarm.time.minute	= 0;
    3e7e:	704b      	strb	r3, [r1, #1]
	alarm.time.second	= 10;
    3e80:	330a      	adds	r3, #10
    3e82:	700b      	strb	r3, [r1, #0]
	
	config_rtc_calendar.clock_24h = true;
    3e84:	3b09      	subs	r3, #9
    3e86:	7123      	strb	r3, [r4, #4]
	config_rtc_calendar.alarm[0].time = alarm.time;
    3e88:	a803      	add	r0, sp, #12
    3e8a:	4b09      	ldr	r3, [pc, #36]	; (3eb0 <configure_rtc_calendar+0x5c>)
    3e8c:	4798      	blx	r3
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3e8e:	2306      	movs	r3, #6
    3e90:	7423      	strb	r3, [r4, #16]
	
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);	
    3e92:	4d08      	ldr	r5, [pc, #32]	; (3eb4 <configure_rtc_calendar+0x60>)
    3e94:	0022      	movs	r2, r4
    3e96:	4908      	ldr	r1, [pc, #32]	; (3eb8 <configure_rtc_calendar+0x64>)
    3e98:	0028      	movs	r0, r5
    3e9a:	4b08      	ldr	r3, [pc, #32]	; (3ebc <configure_rtc_calendar+0x68>)
    3e9c:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3e9e:	0028      	movs	r0, r5
    3ea0:	4b07      	ldr	r3, [pc, #28]	; (3ec0 <configure_rtc_calendar+0x6c>)
    3ea2:	4798      	blx	r3
}
    3ea4:	b007      	add	sp, #28
    3ea6:	bd30      	pop	{r4, r5, pc}
    3ea8:	20001268 	.word	0x20001268
    3eac:	000007e3 	.word	0x000007e3
    3eb0:	0000754f 	.word	0x0000754f
    3eb4:	20001250 	.word	0x20001250
    3eb8:	40001400 	.word	0x40001400
    3ebc:	00000989 	.word	0x00000989
    3ec0:	00000891 	.word	0x00000891

00003ec4 <configure_adc>:
//void ReadMacAddress(void);

struct adc_module adc_instance;

void configure_adc(void)
{
    3ec4:	b510      	push	{r4, lr}
    3ec6:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	
	adc_get_config_defaults(&config_adc);
    3ec8:	4668      	mov	r0, sp
    3eca:	4b15      	ldr	r3, [pc, #84]	; (3f20 <configure_adc+0x5c>)
    3ecc:	4798      	blx	r3
	adc_init(&adc_instance, ADC, &config_adc);
    3ece:	4c15      	ldr	r4, [pc, #84]	; (3f24 <configure_adc+0x60>)
    3ed0:	466a      	mov	r2, sp
    3ed2:	4915      	ldr	r1, [pc, #84]	; (3f28 <configure_adc+0x64>)
    3ed4:	0020      	movs	r0, r4
    3ed6:	4b15      	ldr	r3, [pc, #84]	; (3f2c <configure_adc+0x68>)
    3ed8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3eda:	6823      	ldr	r3, [r4, #0]
    3edc:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    3ede:	b252      	sxtb	r2, r2
    3ee0:	2a00      	cmp	r2, #0
    3ee2:	dbfb      	blt.n	3edc <configure_adc+0x18>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    3ee4:	691a      	ldr	r2, [r3, #16]
    3ee6:	211f      	movs	r1, #31
    3ee8:	438a      	bics	r2, r1
    3eea:	3919      	subs	r1, #25
    3eec:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    3eee:	611a      	str	r2, [r3, #16]
    3ef0:	7e5a      	ldrb	r2, [r3, #25]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    3ef2:	b252      	sxtb	r2, r2
    3ef4:	2a00      	cmp	r2, #0
    3ef6:	dbfb      	blt.n	3ef0 <configure_adc+0x2c>
    3ef8:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    3efa:	b252      	sxtb	r2, r2
    3efc:	2a00      	cmp	r2, #0
    3efe:	dbfb      	blt.n	3ef8 <configure_adc+0x34>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3f00:	220f      	movs	r2, #15
    3f02:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3f04:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3f06:	781a      	ldrb	r2, [r3, #0]
    3f08:	2102      	movs	r1, #2
    3f0a:	430a      	orrs	r2, r1
    3f0c:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    3f0e:	4b05      	ldr	r3, [pc, #20]	; (3f24 <configure_adc+0x60>)
    3f10:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3f12:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3f14:	b25b      	sxtb	r3, r3
    3f16:	2b00      	cmp	r3, #0
    3f18:	dbfb      	blt.n	3f12 <configure_adc+0x4e>
	adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN6);
	adc_enable(&adc_instance);	
}
    3f1a:	b00c      	add	sp, #48	; 0x30
    3f1c:	bd10      	pop	{r4, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	00000261 	.word	0x00000261
    3f24:	2000127c 	.word	0x2000127c
    3f28:	42004000 	.word	0x42004000
    3f2c:	000002ad 	.word	0x000002ad

00003f30 <config_led>:

void config_led(void){
    3f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f32:	46c6      	mov	lr, r8
    3f34:	b500      	push	{lr}
    3f36:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    3f38:	ac01      	add	r4, sp, #4
    3f3a:	2501      	movs	r5, #1
    3f3c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3f3e:	2300      	movs	r3, #0
    3f40:	4698      	mov	r8, r3
    3f42:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_config;
	port_get_config_defaults( &pin_config);
	pin_config.direction  = PORT_PIN_DIR_OUTPUT;
    3f44:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_config);
    3f46:	0021      	movs	r1, r4
    3f48:	201b      	movs	r0, #27
    3f4a:	4f0a      	ldr	r7, [pc, #40]	; (3f74 <config_led+0x44>)
    3f4c:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    3f4e:	4e0a      	ldr	r6, [pc, #40]	; (3f78 <config_led+0x48>)
    3f50:	2380      	movs	r3, #128	; 0x80
    3f52:	051b      	lsls	r3, r3, #20
    3f54:	6173      	str	r3, [r6, #20]
	config->input_pull = PORT_PIN_PULL_UP;
    3f56:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3f58:	4643      	mov	r3, r8
    3f5a:	70a3      	strb	r3, [r4, #2]
	port_pin_set_output_level(LED_0_PIN, false);

	port_get_config_defaults( &pin_config);
	pin_config.direction  = PORT_PIN_DIR_OUTPUT;
    3f5c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PA28, &pin_config);
    3f5e:	0021      	movs	r1, r4
    3f60:	201c      	movs	r0, #28
    3f62:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    3f64:	2380      	movs	r3, #128	; 0x80
    3f66:	055b      	lsls	r3, r3, #21
    3f68:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(PIN_PA28, false);
}
    3f6a:	b002      	add	sp, #8
    3f6c:	bc04      	pop	{r2}
    3f6e:	4690      	mov	r8, r2
    3f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	0000086d 	.word	0x0000086d
    3f78:	41004400 	.word	0x41004400

00003f7c <readMacAddress>:

void readMacAddress(void){
	myLongAddress[0] = 16;
    3f7c:	4b07      	ldr	r3, [pc, #28]	; (3f9c <readMacAddress+0x20>)
    3f7e:	2210      	movs	r2, #16
    3f80:	701a      	strb	r2, [r3, #0]
	myLongAddress[1] = 53;
    3f82:	3225      	adds	r2, #37	; 0x25
    3f84:	705a      	strb	r2, [r3, #1]
	myLongAddress[2] = 0;
    3f86:	2200      	movs	r2, #0
    3f88:	709a      	strb	r2, [r3, #2]
	myLongAddress[3] = 32;
    3f8a:	3220      	adds	r2, #32
    3f8c:	70da      	strb	r2, [r3, #3]
	myLongAddress[4] = 89;
    3f8e:	3239      	adds	r2, #57	; 0x39
    3f90:	711a      	strb	r2, [r3, #4]
	myLongAddress[5] = MAC_ADDR;
    3f92:	3a56      	subs	r2, #86	; 0x56
    3f94:	715a      	strb	r2, [r3, #5]
	myLongAddress[6] = MAC_ADDR;
    3f96:	719a      	strb	r2, [r3, #6]
	myLongAddress[7] = MAC_ADDR;
    3f98:	71da      	strb	r2, [r3, #7]
}
    3f9a:	4770      	bx	lr
    3f9c:	2000004c 	.word	0x2000004c

00003fa0 <main>:

int main ( void )
{
    3fa0:	b510      	push	{r4, lr}
	
	irq_initialize_vectors();
	system_init();
    3fa2:	4b1d      	ldr	r3, [pc, #116]	; (4018 <main+0x78>)
    3fa4:	4798      	blx	r3
	delay_init();
    3fa6:	4b1d      	ldr	r3, [pc, #116]	; (401c <main+0x7c>)
    3fa8:	4798      	blx	r3
	cpu_irq_enable();
    3faa:	2201      	movs	r2, #1
    3fac:	4b1c      	ldr	r3, [pc, #112]	; (4020 <main+0x80>)
    3fae:	701a      	strb	r2, [r3, #0]
    3fb0:	f3bf 8f5f 	dmb	sy
    3fb4:	b662      	cpsie	i

	config_led();
    3fb6:	4b1b      	ldr	r3, [pc, #108]	; (4024 <main+0x84>)
    3fb8:	4798      	blx	r3
	time->second = 0;
    3fba:	4c1b      	ldr	r4, [pc, #108]	; (4028 <main+0x88>)
    3fbc:	2300      	movs	r3, #0
    3fbe:	7023      	strb	r3, [r4, #0]
	time->minute = 0;
    3fc0:	7063      	strb	r3, [r4, #1]
	time->pm     = 0;
    3fc2:	70e3      	strb	r3, [r4, #3]
	rtc_calendar_get_time_defaults(&rtc_time);
	rtc_time.year	= 2019;
    3fc4:	4b19      	ldr	r3, [pc, #100]	; (402c <main+0x8c>)
    3fc6:	80e3      	strh	r3, [r4, #6]
	rtc_time.month	= 3;
    3fc8:	2303      	movs	r3, #3
    3fca:	7163      	strb	r3, [r4, #5]
	rtc_time.day	= 11;
    3fcc:	3308      	adds	r3, #8
    3fce:	7123      	strb	r3, [r4, #4]
	rtc_time.hour	= 8;
    3fd0:	3b03      	subs	r3, #3
    3fd2:	70a3      	strb	r3, [r4, #2]
	rtc_time.minute	= 0;
	rtc_time.second	= 0;

	configure_rtc_calendar();
    3fd4:	4b16      	ldr	r3, [pc, #88]	; (4030 <main+0x90>)
    3fd6:	4798      	blx	r3
	configure_rtc_callbacks();
    3fd8:	4b16      	ldr	r3, [pc, #88]	; (4034 <main+0x94>)
    3fda:	4798      	blx	r3
	rtc_calendar_set_time(&rtc_instance, &rtc_time);
    3fdc:	0021      	movs	r1, r4
    3fde:	4816      	ldr	r0, [pc, #88]	; (4038 <main+0x98>)
    3fe0:	4b16      	ldr	r3, [pc, #88]	; (403c <main+0x9c>)
    3fe2:	4798      	blx	r3
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    3fe4:	4b16      	ldr	r3, [pc, #88]	; (4040 <main+0xa0>)
    3fe6:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    3fe8:	051b      	lsls	r3, r3, #20
    3fea:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    3fec:	2b02      	cmp	r3, #2
    3fee:	d805      	bhi.n	3ffc <main+0x5c>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    3ff0:	4a14      	ldr	r2, [pc, #80]	; (4044 <main+0xa4>)
    3ff2:	6851      	ldr	r1, [r2, #4]
    3ff4:	23c0      	movs	r3, #192	; 0xc0
    3ff6:	009b      	lsls	r3, r3, #2
    3ff8:	430b      	orrs	r3, r1
    3ffa:	6053      	str	r3, [r2, #4]
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3ffc:	4a12      	ldr	r2, [pc, #72]	; (4048 <main+0xa8>)
    3ffe:	6913      	ldr	r3, [r2, #16]
    4000:	2104      	movs	r1, #4
    4002:	430b      	orrs	r3, r1
    4004:	6113      	str	r3, [r2, #16]
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);

	readMacAddress();
    4006:	4b11      	ldr	r3, [pc, #68]	; (404c <main+0xac>)
    4008:	4798      	blx	r3
	wsndemo_init();
    400a:	4b11      	ldr	r3, [pc, #68]	; (4050 <main+0xb0>)
    400c:	4798      	blx	r3
	configure_adc();
    400e:	4b11      	ldr	r3, [pc, #68]	; (4054 <main+0xb4>)
    4010:	4798      	blx	r3
    while(1)
	{
		wsndemo_task();
    4012:	4c11      	ldr	r4, [pc, #68]	; (4058 <main+0xb8>)
    4014:	47a0      	blx	r4
    4016:	e7fd      	b.n	4014 <main+0x74>
    4018:	00001845 	.word	0x00001845
    401c:	00000115 	.word	0x00000115
    4020:	20000008 	.word	0x20000008
    4024:	00003f31 	.word	0x00003f31
    4028:	20001274 	.word	0x20001274
    402c:	000007e3 	.word	0x000007e3
    4030:	00003e55 	.word	0x00003e55
    4034:	00003e2d 	.word	0x00003e2d
    4038:	20001250 	.word	0x20001250
    403c:	00000941 	.word	0x00000941
    4040:	41002000 	.word	0x41002000
    4044:	41004000 	.word	0x41004000
    4048:	e000ed00 	.word	0xe000ed00
    404c:	00003f7d 	.word	0x00003f7d
    4050:	000041f5 	.word	0x000041f5
    4054:	00003ec5 	.word	0x00003ec5
    4058:	0000420d 	.word	0x0000420d

0000405c <appNetworkStatusTimerHandler>:
	port_base->OUTTGL.reg = pin_mask;
    405c:	2280      	movs	r2, #128	; 0x80
    405e:	0512      	lsls	r2, r2, #20
    4060:	4b01      	ldr	r3, [pc, #4]	; (4068 <appNetworkStatusTimerHandler+0xc>)
    4062:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0 )
	LED_Toggle(LED_NETWORK);
#endif
	(void)timer;
}
    4064:	4770      	bx	lr
    4066:	46c0      	nop			; (mov r8, r8)
    4068:	41004400 	.word	0x41004400

0000406c <Connection_Confirm>:
/**
 * Connection confirmation
 */
static void Connection_Confirm(miwi_status_t status)
{
	if (SUCCESS == status){		
    406c:	2800      	cmp	r0, #0
    406e:	d003      	beq.n	4078 <Connection_Confirm+0xc>
		appState = APP_STATE_SEND;
		// rtc_calendar_set_time(&rtc_instance, &rtc_time);	// jsk
		// system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);		// jsk
	} 
	else        appState = APP_STATE_CONNECT_NETWORK;
    4070:	2202      	movs	r2, #2
    4072:	4b03      	ldr	r3, [pc, #12]	; (4080 <Connection_Confirm+0x14>)
    4074:	701a      	strb	r2, [r3, #0]
}
    4076:	4770      	bx	lr
		appState = APP_STATE_SEND;
    4078:	2205      	movs	r2, #5
    407a:	4b01      	ldr	r3, [pc, #4]	; (4080 <Connection_Confirm+0x14>)
    407c:	701a      	strb	r2, [r3, #0]
    407e:	e7fa      	b.n	4076 <Connection_Confirm+0xa>
    4080:	2000027c 	.word	0x2000027c

00004084 <searchConfim>:
{
    4084:	b530      	push	{r4, r5, lr}
    4086:	b083      	sub	sp, #12
	if(foundScanResults)
    4088:	2800      	cmp	r0, #0
    408a:	d024      	beq.n	40d6 <searchConfim+0x52>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    408c:	7a4b      	ldrb	r3, [r1, #9]
    408e:	2b00      	cmp	r3, #0
    4090:	d11b      	bne.n	40ca <searchConfim+0x46>
    4092:	000a      	movs	r2, r1
    4094:	321b      	adds	r2, #27
    4096:	2301      	movs	r3, #1
		for(uint8_t loopindex = 0; loopindex < foundScanResults; loopindex++)
    4098:	b2dc      	uxtb	r4, r3
    409a:	42a0      	cmp	r0, r4
    409c:	d917      	bls.n	40ce <searchConfim+0x4a>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    409e:	001d      	movs	r5, r3
    40a0:	7814      	ldrb	r4, [r2, #0]
    40a2:	3301      	adds	r3, #1
    40a4:	3212      	adds	r2, #18
    40a6:	2c00      	cmp	r4, #0
    40a8:	d0f6      	beq.n	4098 <searchConfim+0x14>
				SHORT_ADDR_LEN, (uint8_t*)&searchConfRes->beaconList[loopindex].shortAddress, CAPABILITY_INFO, Connection_Confirm);
    40aa:	00eb      	lsls	r3, r5, #3
    40ac:	195a      	adds	r2, r3, r5
    40ae:	0052      	lsls	r2, r2, #1
    40b0:	3210      	adds	r2, #16
    40b2:	188a      	adds	r2, r1, r2
				MiApp_EstablishConnection(searchConfRes->beaconList[loopindex].logicalChannel,
    40b4:	195b      	adds	r3, r3, r5
    40b6:	005b      	lsls	r3, r3, #1
    40b8:	18c9      	adds	r1, r1, r3
    40ba:	7b08      	ldrb	r0, [r1, #12]
    40bc:	4b08      	ldr	r3, [pc, #32]	; (40e0 <searchConfim+0x5c>)
    40be:	9300      	str	r3, [sp, #0]
    40c0:	2306      	movs	r3, #6
    40c2:	2102      	movs	r1, #2
    40c4:	4c07      	ldr	r4, [pc, #28]	; (40e4 <searchConfim+0x60>)
    40c6:	47a0      	blx	r4
				return;
    40c8:	e008      	b.n	40dc <searchConfim+0x58>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    40ca:	2500      	movs	r5, #0
    40cc:	e7ed      	b.n	40aa <searchConfim+0x26>
		appState = APP_STATE_CONNECT_NETWORK;
    40ce:	2202      	movs	r2, #2
    40d0:	4b05      	ldr	r3, [pc, #20]	; (40e8 <searchConfim+0x64>)
    40d2:	701a      	strb	r2, [r3, #0]
    40d4:	e002      	b.n	40dc <searchConfim+0x58>
		appState = APP_STATE_CONNECT_NETWORK;
    40d6:	2202      	movs	r2, #2
    40d8:	4b03      	ldr	r3, [pc, #12]	; (40e8 <searchConfim+0x64>)
    40da:	701a      	strb	r2, [r3, #0]
}
    40dc:	b003      	add	sp, #12
    40de:	bd30      	pop	{r4, r5, pc}
    40e0:	0000406d 	.word	0x0000406d
    40e4:	00006bdd 	.word	0x00006bdd
    40e8:	2000027c 	.word	0x2000027c

000040ec <appDataSendingTimerHandler>:
static void appDataSendingTimerHandler(SYS_Timer_t *timer){
    40ec:	b510      	push	{r4, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) appState = APP_STATE_SEND;
    40ee:	4b06      	ldr	r3, [pc, #24]	; (4108 <appDataSendingTimerHandler+0x1c>)
    40f0:	781b      	ldrb	r3, [r3, #0]
    40f2:	2b08      	cmp	r3, #8
    40f4:	d003      	beq.n	40fe <appDataSendingTimerHandler+0x12>
	else	SYS_TimerStart(&appDataSendingTimer);
    40f6:	4805      	ldr	r0, [pc, #20]	; (410c <appDataSendingTimerHandler+0x20>)
    40f8:	4b05      	ldr	r3, [pc, #20]	; (4110 <appDataSendingTimerHandler+0x24>)
    40fa:	4798      	blx	r3
}
    40fc:	bd10      	pop	{r4, pc}
	if (APP_STATE_WAIT_SEND_TIMER == appState) appState = APP_STATE_SEND;
    40fe:	2205      	movs	r2, #5
    4100:	4b01      	ldr	r3, [pc, #4]	; (4108 <appDataSendingTimerHandler+0x1c>)
    4102:	701a      	strb	r2, [r3, #0]
    4104:	e7fa      	b.n	40fc <appDataSendingTimerHandler+0x10>
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	2000027c 	.word	0x2000027c
    410c:	20001284 	.word	0x20001284
    4110:	00002e59 	.word	0x00002e59

00004114 <appDataConf>:
{
    4114:	b510      	push	{r4, lr}
		port_base->OUTCLR.reg = pin_mask;
    4116:	2280      	movs	r2, #128	; 0x80
    4118:	0512      	lsls	r2, r2, #20
    411a:	4b14      	ldr	r3, [pc, #80]	; (416c <appDataConf+0x58>)
    411c:	615a      	str	r2, [r3, #20]
	if (SUCCESS == status) {
    411e:	2900      	cmp	r1, #0
    4120:	d111      	bne.n	4146 <appDataConf+0x32>
		if (!appNetworkStatus) {
    4122:	4b13      	ldr	r3, [pc, #76]	; (4170 <appDataConf+0x5c>)
    4124:	781b      	ldrb	r3, [r3, #0]
    4126:	2b00      	cmp	r3, #0
    4128:	d004      	beq.n	4134 <appDataConf+0x20>
	if (APP_STATE_WAIT_CONF == appState)
    412a:	4b12      	ldr	r3, [pc, #72]	; (4174 <appDataConf+0x60>)
    412c:	781b      	ldrb	r3, [r3, #0]
    412e:	2b06      	cmp	r3, #6
    4130:	d018      	beq.n	4164 <appDataConf+0x50>
}
    4132:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    4134:	4b0d      	ldr	r3, [pc, #52]	; (416c <appDataConf+0x58>)
    4136:	619a      	str	r2, [r3, #24]
			SYS_TimerStop(&appNetworkStatusTimer);
    4138:	480f      	ldr	r0, [pc, #60]	; (4178 <appDataConf+0x64>)
    413a:	4b10      	ldr	r3, [pc, #64]	; (417c <appDataConf+0x68>)
    413c:	4798      	blx	r3
			appNetworkStatus = true;
    413e:	2201      	movs	r2, #1
    4140:	4b0b      	ldr	r3, [pc, #44]	; (4170 <appDataConf+0x5c>)
    4142:	701a      	strb	r2, [r3, #0]
    4144:	e7f1      	b.n	412a <appDataConf+0x16>
		if (appNetworkStatus) {
    4146:	4b0a      	ldr	r3, [pc, #40]	; (4170 <appDataConf+0x5c>)
    4148:	781b      	ldrb	r3, [r3, #0]
    414a:	2b00      	cmp	r3, #0
    414c:	d0ed      	beq.n	412a <appDataConf+0x16>
		port_base->OUTCLR.reg = pin_mask;
    414e:	2280      	movs	r2, #128	; 0x80
    4150:	0512      	lsls	r2, r2, #20
    4152:	4b06      	ldr	r3, [pc, #24]	; (416c <appDataConf+0x58>)
    4154:	615a      	str	r2, [r3, #20]
			SYS_TimerStart(&appNetworkStatusTimer); 
    4156:	4808      	ldr	r0, [pc, #32]	; (4178 <appDataConf+0x64>)
    4158:	4b09      	ldr	r3, [pc, #36]	; (4180 <appDataConf+0x6c>)
    415a:	4798      	blx	r3
			appNetworkStatus = false;
    415c:	2200      	movs	r2, #0
    415e:	4b04      	ldr	r3, [pc, #16]	; (4170 <appDataConf+0x5c>)
    4160:	701a      	strb	r2, [r3, #0]
    4162:	e7e2      	b.n	412a <appDataConf+0x16>
		appState = APP_STATE_SENDING_DONE;
    4164:	2207      	movs	r2, #7
    4166:	4b03      	ldr	r3, [pc, #12]	; (4174 <appDataConf+0x60>)
    4168:	701a      	strb	r2, [r3, #0]
}
    416a:	e7e2      	b.n	4132 <appDataConf+0x1e>
    416c:	41004400 	.word	0x41004400
    4170:	20000266 	.word	0x20000266
    4174:	2000027c 	.word	0x2000027c
    4178:	20000268 	.word	0x20000268
    417c:	00002ded 	.word	0x00002ded
    4180:	00002e59 	.word	0x00002e59

00004184 <appDataInd>:
static void appDataInd(RECEIVED_MESH_MESSAGE *ind){
    4184:	b510      	push	{r4, lr}
	AppMessage_t *msg = (AppMessage_t *)ind->payload;
    4186:	6843      	ldr	r3, [r0, #4]
	port_base->OUTTGL.reg = pin_mask;
    4188:	2180      	movs	r1, #128	; 0x80
    418a:	0509      	lsls	r1, r1, #20
    418c:	4a04      	ldr	r2, [pc, #16]	; (41a0 <appDataInd+0x1c>)
    418e:	61d1      	str	r1, [r2, #28]
	msg->lqi = ind->packetLQI;	msg->rssi = ind->packetRSSI;
    4190:	7a82      	ldrb	r2, [r0, #10]
    4192:	765a      	strb	r2, [r3, #25]
    4194:	7a42      	ldrb	r2, [r0, #9]
    4196:	769a      	strb	r2, [r3, #26]
    appCmdDataInd(ind);
    4198:	4b02      	ldr	r3, [pc, #8]	; (41a4 <appDataInd+0x20>)
    419a:	4798      	blx	r3
}
    419c:	bd10      	pop	{r4, pc}
    419e:	46c0      	nop			; (mov r8, r8)
    41a0:	41004400 	.word	0x41004400
    41a4:	00003e1d 	.word	0x00003e1d

000041a8 <rtc_match_callback>:
void rtc_match_callback(void){
    41a8:	b510      	push	{r4, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) appState = APP_STATE_SEND;
    41aa:	4b0d      	ldr	r3, [pc, #52]	; (41e0 <rtc_match_callback+0x38>)
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	2b08      	cmp	r3, #8
    41b0:	d012      	beq.n	41d8 <rtc_match_callback+0x30>
	else 	appState= APP_STATE_INITIAL;
    41b2:	2200      	movs	r2, #0
    41b4:	4b0a      	ldr	r3, [pc, #40]	; (41e0 <rtc_match_callback+0x38>)
    41b6:	701a      	strb	r2, [r3, #0]
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    41b8:	4c0a      	ldr	r4, [pc, #40]	; (41e4 <rtc_match_callback+0x3c>)
    41ba:	2301      	movs	r3, #1
    41bc:	7223      	strb	r3, [r4, #8]
	alarm.time.second += SLEEP_SECOND;
    41be:	7820      	ldrb	r0, [r4, #0]
    41c0:	3003      	adds	r0, #3
	alarm.time.second = alarm.time.second % 60;
    41c2:	b2c0      	uxtb	r0, r0
    41c4:	213c      	movs	r1, #60	; 0x3c
    41c6:	4b08      	ldr	r3, [pc, #32]	; (41e8 <rtc_match_callback+0x40>)
    41c8:	4798      	blx	r3
    41ca:	7021      	strb	r1, [r4, #0]
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
    41cc:	2200      	movs	r2, #0
    41ce:	0021      	movs	r1, r4
    41d0:	4806      	ldr	r0, [pc, #24]	; (41ec <rtc_match_callback+0x44>)
    41d2:	4b07      	ldr	r3, [pc, #28]	; (41f0 <rtc_match_callback+0x48>)
    41d4:	4798      	blx	r3
}
    41d6:	bd10      	pop	{r4, pc}
	if (APP_STATE_WAIT_SEND_TIMER == appState) appState = APP_STATE_SEND;
    41d8:	2205      	movs	r2, #5
    41da:	4b01      	ldr	r3, [pc, #4]	; (41e0 <rtc_match_callback+0x38>)
    41dc:	701a      	strb	r2, [r3, #0]
    41de:	e7eb      	b.n	41b8 <rtc_match_callback+0x10>
    41e0:	2000027c 	.word	0x2000027c
    41e4:	20001268 	.word	0x20001268
    41e8:	00007309 	.word	0x00007309
    41ec:	20001250 	.word	0x20001250
    41f0:	00000959 	.word	0x00000959

000041f4 <wsndemo_init>:
{
    41f4:	b510      	push	{r4, lr}
	MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly);
    41f6:	4902      	ldr	r1, [pc, #8]	; (4200 <wsndemo_init+0xc>)
    41f8:	4802      	ldr	r0, [pc, #8]	; (4204 <wsndemo_init+0x10>)
    41fa:	4b03      	ldr	r3, [pc, #12]	; (4208 <wsndemo_init+0x14>)
    41fc:	4798      	blx	r3
}
    41fe:	bd10      	pop	{r4, pc}
    4200:	2000000c 	.word	0x2000000c
    4204:	20000030 	.word	0x20000030
    4208:	000049c1 	.word	0x000049c1

0000420c <wsndemo_task>:
/**
 * Task of the WSNDemo application
 * This task should be called in a while(1)
 */
void wsndemo_task(void)
{
    420c:	b5f0      	push	{r4, r5, r6, r7, lr}
    420e:	b087      	sub	sp, #28
	MeshTasks();
    4210:	4bc9      	ldr	r3, [pc, #804]	; (4538 <wsndemo_task+0x32c>)
    4212:	4798      	blx	r3
	switch(appState)
    4214:	4bc9      	ldr	r3, [pc, #804]	; (453c <wsndemo_task+0x330>)
    4216:	781b      	ldrb	r3, [r3, #0]
    4218:	2b02      	cmp	r3, #2
    421a:	d100      	bne.n	421e <wsndemo_task+0x12>
    421c:	e077      	b.n	430e <wsndemo_task+0x102>
    421e:	b2da      	uxtb	r2, r3
    4220:	2a02      	cmp	r2, #2
    4222:	d91f      	bls.n	4264 <wsndemo_task+0x58>
    4224:	2b05      	cmp	r3, #5
    4226:	d100      	bne.n	422a <wsndemo_task+0x1e>
    4228:	e07b      	b.n	4322 <wsndemo_task+0x116>
    422a:	2b07      	cmp	r3, #7
    422c:	d16d      	bne.n	430a <wsndemo_task+0xfe>
			appState = APP_STATE_WAIT_SEND_TIMER;
    422e:	2208      	movs	r2, #8
    4230:	4bc2      	ldr	r3, [pc, #776]	; (453c <wsndemo_task+0x330>)
    4232:	701a      	strb	r2, [r3, #0]
			SYS_TimerStop(&appDataSendingTimer);
    4234:	48c2      	ldr	r0, [pc, #776]	; (4540 <wsndemo_task+0x334>)
    4236:	4bc3      	ldr	r3, [pc, #780]	; (4544 <wsndemo_task+0x338>)
    4238:	4798      	blx	r3
	uint32_t rev = DSU->DID.reg;
    423a:	4bc3      	ldr	r3, [pc, #780]	; (4548 <wsndemo_task+0x33c>)
    423c:	699b      	ldr	r3, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    423e:	051b      	lsls	r3, r3, #20
    4240:	0f1b      	lsrs	r3, r3, #28
	if (rev < _SYSTEM_MCU_REVISION_D) {
    4242:	2b02      	cmp	r3, #2
    4244:	d805      	bhi.n	4252 <wsndemo_task+0x46>
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    4246:	4ac1      	ldr	r2, [pc, #772]	; (454c <wsndemo_task+0x340>)
    4248:	6851      	ldr	r1, [r2, #4]
    424a:	23c0      	movs	r3, #192	; 0xc0
    424c:	009b      	lsls	r3, r3, #2
    424e:	430b      	orrs	r3, r1
    4250:	6053      	str	r3, [r2, #4]
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    4252:	4abf      	ldr	r2, [pc, #764]	; (4550 <wsndemo_task+0x344>)
    4254:	6913      	ldr	r3, [r2, #16]
    4256:	2104      	movs	r1, #4
    4258:	430b      	orrs	r3, r1
    425a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb");
    425c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    4260:	bf30      	wfi
	APP_TaskHandler();
}
    4262:	e052      	b.n	430a <wsndemo_task+0xfe>
	switch(appState)
    4264:	2b00      	cmp	r3, #0
    4266:	d150      	bne.n	430a <wsndemo_task+0xfe>
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    4268:	48ba      	ldr	r0, [pc, #744]	; (4554 <wsndemo_task+0x348>)
    426a:	2501      	movs	r5, #1
    426c:	7005      	strb	r5, [r0, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    426e:	2602      	movs	r6, #2
    4270:	7046      	strb	r6, [r0, #1]
	appMsg.extAddr              = 0;
    4272:	2400      	movs	r4, #0
    4274:	2200      	movs	r2, #0
    4276:	8042      	strh	r2, [r0, #2]
    4278:	8082      	strh	r2, [r0, #4]
    427a:	80c2      	strh	r2, [r0, #6]
    427c:	8102      	strh	r2, [r0, #8]
	appMsg.shortAddr            = 0;
    427e:	2300      	movs	r3, #0
    4280:	8143      	strh	r3, [r0, #10]
	appMsg.softVersion          = 0x01100000;
    4282:	2388      	movs	r3, #136	; 0x88
    4284:	045b      	lsls	r3, r3, #17
    4286:	60c3      	str	r3, [r0, #12]
	appMsg.channelMask          = CHANNEL_MAP;
    4288:	2380      	movs	r3, #128	; 0x80
    428a:	049b      	lsls	r3, r3, #18
    428c:	6103      	str	r3, [r0, #16]
	appMsg.nextHopAddr          = 0;
    428e:	75c2      	strb	r2, [r0, #23]
    4290:	7602      	strb	r2, [r0, #24]
	appMsg.lqi                  = 0;
    4292:	7644      	strb	r4, [r0, #25]
	appMsg.rssi                 = 0;
    4294:	7684      	strb	r4, [r0, #26]
	appMsg.sensors.type        = 1;
    4296:	76c5      	strb	r5, [r0, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    4298:	230c      	movs	r3, #12
    429a:	7703      	strb	r3, [r0, #28]
	appMsg.sensors.battery     = 0;
    429c:	0003      	movs	r3, r0
    429e:	7742      	strb	r2, [r0, #29]
    42a0:	7782      	strb	r2, [r0, #30]
    42a2:	77c2      	strb	r2, [r0, #31]
    42a4:	331d      	adds	r3, #29
    42a6:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 0;
    42a8:	0003      	movs	r3, r0
    42aa:	3321      	adds	r3, #33	; 0x21
    42ac:	701a      	strb	r2, [r3, #0]
    42ae:	705a      	strb	r2, [r3, #1]
    42b0:	709a      	strb	r2, [r3, #2]
    42b2:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.light       = 0;
    42b4:	0003      	movs	r3, r0
    42b6:	3325      	adds	r3, #37	; 0x25
    42b8:	701a      	strb	r2, [r3, #0]
    42ba:	705a      	strb	r2, [r3, #1]
    42bc:	709a      	strb	r2, [r3, #2]
    42be:	70da      	strb	r2, [r3, #3]
	appMsg.caption.type         = 32;
    42c0:	3220      	adds	r2, #32
    42c2:	2329      	movs	r3, #41	; 0x29
    42c4:	54c2      	strb	r2, [r0, r3]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    42c6:	3a11      	subs	r2, #17
    42c8:	3301      	adds	r3, #1
    42ca:	54c2      	strb	r2, [r0, r3]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    42cc:	302b      	adds	r0, #43	; 0x2b
    42ce:	49a2      	ldr	r1, [pc, #648]	; (4558 <wsndemo_task+0x34c>)
    42d0:	4ba2      	ldr	r3, [pc, #648]	; (455c <wsndemo_task+0x350>)
    42d2:	4798      	blx	r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    42d4:	4b9a      	ldr	r3, [pc, #616]	; (4540 <wsndemo_task+0x334>)
    42d6:	22fa      	movs	r2, #250	; 0xfa
    42d8:	0092      	lsls	r2, r2, #2
    42da:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    42dc:	731c      	strb	r4, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    42de:	49a0      	ldr	r1, [pc, #640]	; (4560 <wsndemo_task+0x354>)
    42e0:	6119      	str	r1, [r3, #16]
	appNetworkStatus = false;
    42e2:	4ba0      	ldr	r3, [pc, #640]	; (4564 <wsndemo_task+0x358>)
    42e4:	701c      	strb	r4, [r3, #0]
	appNetworkStatusTimer.interval = APP_NWKSTATUS_INTERVAL;
    42e6:	48a0      	ldr	r0, [pc, #640]	; (4568 <wsndemo_task+0x35c>)
    42e8:	6082      	str	r2, [r0, #8]
	appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
    42ea:	7305      	strb	r5, [r0, #12]
	appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    42ec:	4b9f      	ldr	r3, [pc, #636]	; (456c <wsndemo_task+0x360>)
    42ee:	6103      	str	r3, [r0, #16]
	SYS_TimerStart(&appNetworkStatusTimer);
    42f0:	4b9f      	ldr	r3, [pc, #636]	; (4570 <wsndemo_task+0x364>)
    42f2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    42f4:	2280      	movs	r2, #128	; 0x80
    42f6:	0512      	lsls	r2, r2, #20
    42f8:	4b9e      	ldr	r3, [pc, #632]	; (4574 <wsndemo_task+0x368>)
    42fa:	619a      	str	r2, [r3, #24]
	APP_CommandsInit();
    42fc:	4b9e      	ldr	r3, [pc, #632]	; (4578 <wsndemo_task+0x36c>)
    42fe:	4798      	blx	r3
	MiApp_SubscribeDataIndicationCallback(appDataInd);
    4300:	489e      	ldr	r0, [pc, #632]	; (457c <wsndemo_task+0x370>)
    4302:	4b9f      	ldr	r3, [pc, #636]	; (4580 <wsndemo_task+0x374>)
    4304:	4798      	blx	r3
	appState = APP_STATE_CONNECT_NETWORK;
    4306:	4b8d      	ldr	r3, [pc, #564]	; (453c <wsndemo_task+0x330>)
    4308:	701e      	strb	r6, [r3, #0]
}
    430a:	b007      	add	sp, #28
    430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			MiApp_SearchConnection(APP_SCAN_DURATION, CHANNEL_MAP, searchConfim);
    430e:	4a9d      	ldr	r2, [pc, #628]	; (4584 <wsndemo_task+0x378>)
    4310:	2180      	movs	r1, #128	; 0x80
    4312:	0489      	lsls	r1, r1, #18
    4314:	200a      	movs	r0, #10
    4316:	4b9c      	ldr	r3, [pc, #624]	; (4588 <wsndemo_task+0x37c>)
    4318:	4798      	blx	r3
			appState = APP_STATE_CONNECTING_NETWORK;
    431a:	2203      	movs	r2, #3
    431c:	4b87      	ldr	r3, [pc, #540]	; (453c <wsndemo_task+0x330>)
    431e:	701a      	strb	r2, [r3, #0]
    4320:	e7f3      	b.n	430a <wsndemo_task+0xfe>
	uint32_t rev = DSU->DID.reg;
    4322:	4b89      	ldr	r3, [pc, #548]	; (4548 <wsndemo_task+0x33c>)
    4324:	699b      	ldr	r3, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    4326:	051b      	lsls	r3, r3, #20
    4328:	0f1b      	lsrs	r3, r3, #28
	if (rev < _SYSTEM_MCU_REVISION_D) {
    432a:	2b02      	cmp	r3, #2
    432c:	d805      	bhi.n	433a <wsndemo_task+0x12e>
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    432e:	4a87      	ldr	r2, [pc, #540]	; (454c <wsndemo_task+0x340>)
    4330:	6851      	ldr	r1, [r2, #4]
    4332:	23c0      	movs	r3, #192	; 0xc0
    4334:	009b      	lsls	r3, r3, #2
    4336:	430b      	orrs	r3, r1
    4338:	6053      	str	r3, [r2, #4]
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    433a:	4a85      	ldr	r2, [pc, #532]	; (4550 <wsndemo_task+0x344>)
    433c:	6913      	ldr	r3, [r2, #16]
    433e:	2104      	movs	r1, #4
    4340:	430b      	orrs	r3, r1
    4342:	6113      	str	r3, [r2, #16]
    uint16_t shortAddressLocal = 0xFFFF;
    4344:	2301      	movs	r3, #1
    4346:	425b      	negs	r3, r3
    4348:	2212      	movs	r2, #18
    434a:	446a      	add	r2, sp
    434c:	8013      	strh	r3, [r2, #0]
    uint16_t shortAddressPanId = 0xFFFF;
    434e:	aa05      	add	r2, sp, #20
    4350:	8013      	strh	r3, [r2, #0]
    uint16_t dstAddr = 0; /* PAN Coordinator Address */
    4352:	2200      	movs	r2, #0
    4354:	3317      	adds	r3, #23
    4356:	446b      	add	r3, sp
    4358:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    435a:	4b8c      	ldr	r3, [pc, #560]	; (458c <wsndemo_task+0x380>)
    435c:	681a      	ldr	r2, [r3, #0]
    435e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4360:	b25b      	sxtb	r3, r3
    4362:	2b00      	cmp	r3, #0
    4364:	dbfb      	blt.n	435e <wsndemo_task+0x152>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4366:	7b13      	ldrb	r3, [r2, #12]
    4368:	2102      	movs	r1, #2
    436a:	430b      	orrs	r3, r1
    436c:	7313      	strb	r3, [r2, #12]
    436e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4370:	b25b      	sxtb	r3, r3
    4372:	2b00      	cmp	r3, #0
    4374:	dbfb      	blt.n	436e <wsndemo_task+0x162>
	delay_us(100);
    4376:	2064      	movs	r0, #100	; 0x64
    4378:	4b85      	ldr	r3, [pc, #532]	; (4590 <wsndemo_task+0x384>)
    437a:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    437c:	4b83      	ldr	r3, [pc, #524]	; (458c <wsndemo_task+0x380>)
    437e:	681b      	ldr	r3, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4380:	7e19      	ldrb	r1, [r3, #24]
    4382:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4384:	2201      	movs	r2, #1
    4386:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4388:	0748      	lsls	r0, r1, #29
    438a:	d501      	bpl.n	4390 <wsndemo_task+0x184>
		status_flags |= ADC_STATUS_WINDOW;
    438c:	2002      	movs	r0, #2
    438e:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4390:	0789      	lsls	r1, r1, #30
    4392:	d501      	bpl.n	4398 <wsndemo_task+0x18c>
		status_flags |= ADC_STATUS_OVERRUN;
    4394:	2104      	movs	r1, #4
    4396:	430a      	orrs	r2, r1
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4398:	07d2      	lsls	r2, r2, #31
    439a:	d500      	bpl.n	439e <wsndemo_task+0x192>
    439c:	e10a      	b.n	45b4 <wsndemo_task+0x3a8>
	appMsg.sensors.light       = adcResult;
    439e:	4a7d      	ldr	r2, [pc, #500]	; (4594 <wsndemo_task+0x388>)
    43a0:	8811      	ldrh	r1, [r2, #0]
    43a2:	4a6c      	ldr	r2, [pc, #432]	; (4554 <wsndemo_task+0x348>)
    43a4:	3225      	adds	r2, #37	; 0x25
    43a6:	7011      	strb	r1, [r2, #0]
    43a8:	0a08      	lsrs	r0, r1, #8
    43aa:	7050      	strb	r0, [r2, #1]
    43ac:	2000      	movs	r0, #0
    43ae:	7090      	strb	r0, [r2, #2]
    43b0:	0e09      	lsrs	r1, r1, #24
    43b2:	70d1      	strb	r1, [r2, #3]
    43b4:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    43b6:	b252      	sxtb	r2, r2
    43b8:	2a00      	cmp	r2, #0
    43ba:	dbfb      	blt.n	43b4 <wsndemo_task+0x1a8>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    43bc:	691a      	ldr	r2, [r3, #16]
    43be:	211f      	movs	r1, #31
    43c0:	438a      	bics	r2, r1
    43c2:	3907      	subs	r1, #7
    43c4:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    43c6:	611a      	str	r2, [r3, #16]
    43c8:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    43ca:	b252      	sxtb	r2, r2
    43cc:	2a00      	cmp	r2, #0
    43ce:	dbfb      	blt.n	43c8 <wsndemo_task+0x1bc>
	delay_us(10);
    43d0:	200a      	movs	r0, #10
    43d2:	4b6f      	ldr	r3, [pc, #444]	; (4590 <wsndemo_task+0x384>)
    43d4:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    43d6:	4b6d      	ldr	r3, [pc, #436]	; (458c <wsndemo_task+0x380>)
    43d8:	681a      	ldr	r2, [r3, #0]
    43da:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    43dc:	b25b      	sxtb	r3, r3
    43de:	2b00      	cmp	r3, #0
    43e0:	dbfb      	blt.n	43da <wsndemo_task+0x1ce>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    43e2:	7b13      	ldrb	r3, [r2, #12]
    43e4:	2102      	movs	r1, #2
    43e6:	430b      	orrs	r3, r1
    43e8:	7313      	strb	r3, [r2, #12]
    43ea:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    43ec:	b25b      	sxtb	r3, r3
    43ee:	2b00      	cmp	r3, #0
    43f0:	dbfb      	blt.n	43ea <wsndemo_task+0x1de>
	delay_us(10);
    43f2:	200a      	movs	r0, #10
    43f4:	4b66      	ldr	r3, [pc, #408]	; (4590 <wsndemo_task+0x384>)
    43f6:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    43f8:	4b64      	ldr	r3, [pc, #400]	; (458c <wsndemo_task+0x380>)
    43fa:	681b      	ldr	r3, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    43fc:	7e19      	ldrb	r1, [r3, #24]
    43fe:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4400:	2201      	movs	r2, #1
    4402:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4404:	0748      	lsls	r0, r1, #29
    4406:	d501      	bpl.n	440c <wsndemo_task+0x200>
		status_flags |= ADC_STATUS_WINDOW;
    4408:	2002      	movs	r0, #2
    440a:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    440c:	0789      	lsls	r1, r1, #30
    440e:	d501      	bpl.n	4414 <wsndemo_task+0x208>
		status_flags |= ADC_STATUS_OVERRUN;
    4410:	2104      	movs	r1, #4
    4412:	430a      	orrs	r2, r1
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4414:	07d2      	lsls	r2, r2, #31
    4416:	d500      	bpl.n	441a <wsndemo_task+0x20e>
    4418:	e0e6      	b.n	45e8 <wsndemo_task+0x3dc>
	appMsg.sensors.temperature = adcResult;
    441a:	4a5e      	ldr	r2, [pc, #376]	; (4594 <wsndemo_task+0x388>)
    441c:	8811      	ldrh	r1, [r2, #0]
    441e:	4a4d      	ldr	r2, [pc, #308]	; (4554 <wsndemo_task+0x348>)
    4420:	3221      	adds	r2, #33	; 0x21
    4422:	7011      	strb	r1, [r2, #0]
    4424:	0a08      	lsrs	r0, r1, #8
    4426:	7050      	strb	r0, [r2, #1]
    4428:	2000      	movs	r0, #0
    442a:	7090      	strb	r0, [r2, #2]
    442c:	0e09      	lsrs	r1, r1, #24
    442e:	70d1      	strb	r1, [r2, #3]
    4430:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    4432:	b252      	sxtb	r2, r2
    4434:	2a00      	cmp	r2, #0
    4436:	dbfb      	blt.n	4430 <wsndemo_task+0x224>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    4438:	691a      	ldr	r2, [r3, #16]
    443a:	211f      	movs	r1, #31
    443c:	438a      	bics	r2, r1
    443e:	3904      	subs	r1, #4
    4440:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    4442:	611a      	str	r2, [r3, #16]
    4444:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    4446:	b252      	sxtb	r2, r2
    4448:	2a00      	cmp	r2, #0
    444a:	dbfb      	blt.n	4444 <wsndemo_task+0x238>
    444c:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    444e:	b252      	sxtb	r2, r2
    4450:	2a00      	cmp	r2, #0
    4452:	dbfb      	blt.n	444c <wsndemo_task+0x240>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4454:	7b1a      	ldrb	r2, [r3, #12]
    4456:	2102      	movs	r1, #2
    4458:	430a      	orrs	r2, r1
    445a:	731a      	strb	r2, [r3, #12]
    445c:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    445e:	b252      	sxtb	r2, r2
    4460:	2a00      	cmp	r2, #0
    4462:	dbfb      	blt.n	445c <wsndemo_task+0x250>
	delay_us(10);
    4464:	200a      	movs	r0, #10
    4466:	4b4a      	ldr	r3, [pc, #296]	; (4590 <wsndemo_task+0x384>)
    4468:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    446a:	4b48      	ldr	r3, [pc, #288]	; (458c <wsndemo_task+0x380>)
    446c:	6819      	ldr	r1, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    446e:	7e0a      	ldrb	r2, [r1, #24]
    4470:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4472:	2301      	movs	r3, #1
    4474:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    4476:	0750      	lsls	r0, r2, #29
    4478:	d501      	bpl.n	447e <wsndemo_task+0x272>
		status_flags |= ADC_STATUS_WINDOW;
    447a:	2002      	movs	r0, #2
    447c:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    447e:	0792      	lsls	r2, r2, #30
    4480:	d501      	bpl.n	4486 <wsndemo_task+0x27a>
		status_flags |= ADC_STATUS_OVERRUN;
    4482:	2204      	movs	r2, #4
    4484:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4486:	07db      	lsls	r3, r3, #31
    4488:	d500      	bpl.n	448c <wsndemo_task+0x280>
    448a:	e0c7      	b.n	461c <wsndemo_task+0x410>
	appMsg.sensors.battery     = adcResult;
    448c:	4c31      	ldr	r4, [pc, #196]	; (4554 <wsndemo_task+0x348>)
    448e:	4b41      	ldr	r3, [pc, #260]	; (4594 <wsndemo_task+0x388>)
    4490:	881b      	ldrh	r3, [r3, #0]
    4492:	0022      	movs	r2, r4
    4494:	7763      	strb	r3, [r4, #29]
    4496:	0a19      	lsrs	r1, r3, #8
    4498:	77a1      	strb	r1, [r4, #30]
    449a:	2100      	movs	r1, #0
    449c:	77e1      	strb	r1, [r4, #31]
    449e:	321d      	adds	r2, #29
    44a0:	0e1b      	lsrs	r3, r3, #24
    44a2:	70d3      	strb	r3, [r2, #3]
	MiApp_Get(SHORT_ADDRESS, (uint8_t *)&shortAddressLocal);
    44a4:	2512      	movs	r5, #18
    44a6:	446d      	add	r5, sp
    44a8:	0029      	movs	r1, r5
    44aa:	2002      	movs	r0, #2
    44ac:	4e3a      	ldr	r6, [pc, #232]	; (4598 <wsndemo_task+0x38c>)
    44ae:	47b0      	blx	r6
		appMsg.shortAddr = shortAddressLocal;
    44b0:	882b      	ldrh	r3, [r5, #0]
    44b2:	8163      	strh	r3, [r4, #10]
	appMsg.extAddr   = appMsg.shortAddr;
    44b4:	8063      	strh	r3, [r4, #2]
    44b6:	0c1b      	lsrs	r3, r3, #16
    44b8:	80a3      	strh	r3, [r4, #4]
    44ba:	2300      	movs	r3, #0
    44bc:	80e3      	strh	r3, [r4, #6]
    44be:	8123      	strh	r3, [r4, #8]
	appMsg.nextHopAddr = MiApp_MeshGetNextHopAddr(PAN_COORDINATOR_SHORT_ADDRESS);
    44c0:	2000      	movs	r0, #0
    44c2:	4b36      	ldr	r3, [pc, #216]	; (459c <wsndemo_task+0x390>)
    44c4:	4798      	blx	r3
    44c6:	75e0      	strb	r0, [r4, #23]
    44c8:	0a00      	lsrs	r0, r0, #8
    44ca:	7620      	strb	r0, [r4, #24]
	MiApp_Get(CHANNEL, (uint8_t *)&appMsg.workingChannel);
    44cc:	0021      	movs	r1, r4
    44ce:	3116      	adds	r1, #22
    44d0:	2000      	movs	r0, #0
    44d2:	47b0      	blx	r6
	MiApp_Get(PANID, (uint8_t *)&shortAddressPanId);
    44d4:	af05      	add	r7, sp, #20
    44d6:	0039      	movs	r1, r7
    44d8:	2001      	movs	r0, #1
    44da:	47b0      	blx	r6
        appMsg.panId = shortAddressPanId;
    44dc:	883b      	ldrh	r3, [r7, #0]
    44de:	82a3      	strh	r3, [r4, #20]
    44e0:	2280      	movs	r2, #128	; 0x80
    44e2:	0512      	lsls	r2, r2, #20
    44e4:	4b23      	ldr	r3, [pc, #140]	; (4574 <wsndemo_task+0x368>)
    44e6:	619a      	str	r2, [r3, #24]
	appMsg.caption.type         = 32;
    44e8:	2220      	movs	r2, #32
    44ea:	2329      	movs	r3, #41	; 0x29
    44ec:	54e2      	strb	r2, [r4, r3]
    appMsg.caption.size         = APP_CAPTION_SIZE;
    44ee:	3a11      	subs	r2, #17
    44f0:	3301      	adds	r3, #1
    44f2:	54e2      	strb	r2, [r4, r3]
    memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    44f4:	0026      	movs	r6, r4
    44f6:	362b      	adds	r6, #43	; 0x2b
    44f8:	4917      	ldr	r1, [pc, #92]	; (4558 <wsndemo_task+0x34c>)
    44fa:	0030      	movs	r0, r6
    44fc:	4b17      	ldr	r3, [pc, #92]	; (455c <wsndemo_task+0x350>)
    44fe:	4798      	blx	r3
	sprintf(appMsg.caption.text, "SUN%03d -0x%04x", MAC_ADDR, shortAddressLocal);
    4500:	882b      	ldrh	r3, [r5, #0]
    4502:	2203      	movs	r2, #3
    4504:	4926      	ldr	r1, [pc, #152]	; (45a0 <wsndemo_task+0x394>)
    4506:	0030      	movs	r0, r6
    4508:	4d26      	ldr	r5, [pc, #152]	; (45a4 <wsndemo_task+0x398>)
    450a:	47a8      	blx	r5
	if (MiApp_SendData(2, (uint8_t *)&dstAddr, sizeof(appMsg), (uint8_t *)&appMsg, wsnmsghandle, true, appDataConf))
    450c:	4b26      	ldr	r3, [pc, #152]	; (45a8 <wsndemo_task+0x39c>)
    450e:	9302      	str	r3, [sp, #8]
    4510:	2301      	movs	r3, #1
    4512:	9301      	str	r3, [sp, #4]
    4514:	4b25      	ldr	r3, [pc, #148]	; (45ac <wsndemo_task+0x3a0>)
    4516:	781b      	ldrb	r3, [r3, #0]
    4518:	9300      	str	r3, [sp, #0]
    451a:	0023      	movs	r3, r4
    451c:	223a      	movs	r2, #58	; 0x3a
    451e:	2116      	movs	r1, #22
    4520:	4469      	add	r1, sp
    4522:	2002      	movs	r0, #2
    4524:	4c22      	ldr	r4, [pc, #136]	; (45b0 <wsndemo_task+0x3a4>)
    4526:	47a0      	blx	r4
    4528:	2800      	cmp	r0, #0
    452a:	d000      	beq.n	452e <wsndemo_task+0x322>
    452c:	e090      	b.n	4650 <wsndemo_task+0x444>
		appState = APP_STATE_SENDING_DONE;
    452e:	2207      	movs	r2, #7
    4530:	4b02      	ldr	r3, [pc, #8]	; (453c <wsndemo_task+0x330>)
    4532:	701a      	strb	r2, [r3, #0]
    4534:	e6e9      	b.n	430a <wsndemo_task+0xfe>
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	00004b01 	.word	0x00004b01
    453c:	2000027c 	.word	0x2000027c
    4540:	20001284 	.word	0x20001284
    4544:	00002ded 	.word	0x00002ded
    4548:	41002000 	.word	0x41002000
    454c:	41004000 	.word	0x41004000
    4550:	e000ed00 	.word	0xe000ed00
    4554:	2000022c 	.word	0x2000022c
    4558:	00007f54 	.word	0x00007f54
    455c:	0000754f 	.word	0x0000754f
    4560:	000040ed 	.word	0x000040ed
    4564:	20000266 	.word	0x20000266
    4568:	20000268 	.word	0x20000268
    456c:	0000405d 	.word	0x0000405d
    4570:	00002e59 	.word	0x00002e59
    4574:	41004400 	.word	0x41004400
    4578:	00003df5 	.word	0x00003df5
    457c:	00004185 	.word	0x00004185
    4580:	00005da5 	.word	0x00005da5
    4584:	00004085 	.word	0x00004085
    4588:	00006ccd 	.word	0x00006ccd
    458c:	2000127c 	.word	0x2000127c
    4590:	00000155 	.word	0x00000155
    4594:	20001272 	.word	0x20001272
    4598:	00004ce1 	.word	0x00004ce1
    459c:	00004d29 	.word	0x00004d29
    45a0:	00007f58 	.word	0x00007f58
    45a4:	00007571 	.word	0x00007571
    45a8:	00004115 	.word	0x00004115
    45ac:	2000027d 	.word	0x2000027d
    45b0:	00004b9d 	.word	0x00004b9d
    45b4:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    45b6:	b252      	sxtb	r2, r2
    45b8:	2a00      	cmp	r2, #0
    45ba:	dbfb      	blt.n	45b4 <wsndemo_task+0x3a8>
	*result = adc_module->RESULT.reg;
    45bc:	8b59      	ldrh	r1, [r3, #26]
    45be:	4a28      	ldr	r2, [pc, #160]	; (4660 <wsndemo_task+0x454>)
    45c0:	8011      	strh	r1, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    45c2:	2201      	movs	r2, #1
    45c4:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    45c6:	7e19      	ldrb	r1, [r3, #24]
    45c8:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    45ca:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    45cc:	0748      	lsls	r0, r1, #29
    45ce:	d501      	bpl.n	45d4 <wsndemo_task+0x3c8>
		status_flags |= ADC_STATUS_WINDOW;
    45d0:	2002      	movs	r0, #2
    45d2:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    45d4:	0789      	lsls	r1, r1, #30
    45d6:	d501      	bpl.n	45dc <wsndemo_task+0x3d0>
		status_flags |= ADC_STATUS_OVERRUN;
    45d8:	2104      	movs	r1, #4
    45da:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    45dc:	0752      	lsls	r2, r2, #29
    45de:	d400      	bmi.n	45e2 <wsndemo_task+0x3d6>
    45e0:	e6dd      	b.n	439e <wsndemo_task+0x192>
	adc_module->INTFLAG.reg = int_flags;
    45e2:	2202      	movs	r2, #2
    45e4:	761a      	strb	r2, [r3, #24]
    45e6:	e6da      	b.n	439e <wsndemo_task+0x192>
    45e8:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    45ea:	b252      	sxtb	r2, r2
    45ec:	2a00      	cmp	r2, #0
    45ee:	dbfb      	blt.n	45e8 <wsndemo_task+0x3dc>
	*result = adc_module->RESULT.reg;
    45f0:	8b59      	ldrh	r1, [r3, #26]
    45f2:	4a1b      	ldr	r2, [pc, #108]	; (4660 <wsndemo_task+0x454>)
    45f4:	8011      	strh	r1, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    45f6:	2201      	movs	r2, #1
    45f8:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    45fa:	7e19      	ldrb	r1, [r3, #24]
    45fc:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    45fe:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4600:	0748      	lsls	r0, r1, #29
    4602:	d501      	bpl.n	4608 <wsndemo_task+0x3fc>
		status_flags |= ADC_STATUS_WINDOW;
    4604:	2002      	movs	r0, #2
    4606:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4608:	0789      	lsls	r1, r1, #30
    460a:	d501      	bpl.n	4610 <wsndemo_task+0x404>
		status_flags |= ADC_STATUS_OVERRUN;
    460c:	2104      	movs	r1, #4
    460e:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4610:	0752      	lsls	r2, r2, #29
    4612:	d400      	bmi.n	4616 <wsndemo_task+0x40a>
    4614:	e701      	b.n	441a <wsndemo_task+0x20e>
	adc_module->INTFLAG.reg = int_flags;
    4616:	2202      	movs	r2, #2
    4618:	761a      	strb	r2, [r3, #24]
    461a:	e6fe      	b.n	441a <wsndemo_task+0x20e>
    461c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    461e:	b25b      	sxtb	r3, r3
    4620:	2b00      	cmp	r3, #0
    4622:	dbfb      	blt.n	461c <wsndemo_task+0x410>
	*result = adc_module->RESULT.reg;
    4624:	8b4a      	ldrh	r2, [r1, #26]
    4626:	4b0e      	ldr	r3, [pc, #56]	; (4660 <wsndemo_task+0x454>)
    4628:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    462a:	2301      	movs	r3, #1
    462c:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    462e:	7e0a      	ldrb	r2, [r1, #24]
    4630:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4632:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    4634:	0750      	lsls	r0, r2, #29
    4636:	d501      	bpl.n	463c <wsndemo_task+0x430>
		status_flags |= ADC_STATUS_WINDOW;
    4638:	2002      	movs	r0, #2
    463a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    463c:	0792      	lsls	r2, r2, #30
    463e:	d501      	bpl.n	4644 <wsndemo_task+0x438>
		status_flags |= ADC_STATUS_OVERRUN;
    4640:	2204      	movs	r2, #4
    4642:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4644:	075b      	lsls	r3, r3, #29
    4646:	d400      	bmi.n	464a <wsndemo_task+0x43e>
    4648:	e720      	b.n	448c <wsndemo_task+0x280>
	adc_module->INTFLAG.reg = int_flags;
    464a:	2302      	movs	r3, #2
    464c:	760b      	strb	r3, [r1, #24]
    464e:	e71d      	b.n	448c <wsndemo_task+0x280>
		++wsnmsghandle;
    4650:	4a04      	ldr	r2, [pc, #16]	; (4664 <wsndemo_task+0x458>)
    4652:	7813      	ldrb	r3, [r2, #0]
    4654:	3301      	adds	r3, #1
    4656:	7013      	strb	r3, [r2, #0]
		appState = APP_STATE_WAIT_CONF;
    4658:	2206      	movs	r2, #6
    465a:	4b03      	ldr	r3, [pc, #12]	; (4668 <wsndemo_task+0x45c>)
    465c:	701a      	strb	r2, [r3, #0]
    465e:	e654      	b.n	430a <wsndemo_task+0xfe>
    4660:	20001272 	.word	0x20001272
    4664:	2000027d 	.word	0x2000027d
    4668:	2000027c 	.word	0x2000027c

0000466c <common_tc_delay>:
    466c:	b510      	push	{r4, lr}
    466e:	1c04      	adds	r4, r0, #0
    4670:	4b13      	ldr	r3, [pc, #76]	; (46c0 <common_tc_delay+0x54>)
    4672:	4798      	blx	r3
    4674:	4b13      	ldr	r3, [pc, #76]	; (46c4 <common_tc_delay+0x58>)
    4676:	781a      	ldrb	r2, [r3, #0]
    4678:	4362      	muls	r2, r4
    467a:	1881      	adds	r1, r0, r2
    467c:	4b12      	ldr	r3, [pc, #72]	; (46c8 <common_tc_delay+0x5c>)
    467e:	6059      	str	r1, [r3, #4]
    4680:	6859      	ldr	r1, [r3, #4]
    4682:	0c09      	lsrs	r1, r1, #16
    4684:	6059      	str	r1, [r3, #4]
    4686:	685b      	ldr	r3, [r3, #4]
    4688:	2b00      	cmp	r3, #0
    468a:	d007      	beq.n	469c <common_tc_delay+0x30>
    468c:	4b0e      	ldr	r3, [pc, #56]	; (46c8 <common_tc_delay+0x5c>)
    468e:	6859      	ldr	r1, [r3, #4]
    4690:	3201      	adds	r2, #1
    4692:	1880      	adds	r0, r0, r2
    4694:	8118      	strh	r0, [r3, #8]
    4696:	4b0d      	ldr	r3, [pc, #52]	; (46cc <common_tc_delay+0x60>)
    4698:	4798      	blx	r3
    469a:	e004      	b.n	46a6 <common_tc_delay+0x3a>
    469c:	1882      	adds	r2, r0, r2
    469e:	4b0a      	ldr	r3, [pc, #40]	; (46c8 <common_tc_delay+0x5c>)
    46a0:	811a      	strh	r2, [r3, #8]
    46a2:	4b0b      	ldr	r3, [pc, #44]	; (46d0 <common_tc_delay+0x64>)
    46a4:	4798      	blx	r3
    46a6:	4b08      	ldr	r3, [pc, #32]	; (46c8 <common_tc_delay+0x5c>)
    46a8:	891b      	ldrh	r3, [r3, #8]
    46aa:	2b63      	cmp	r3, #99	; 0x63
    46ac:	d802      	bhi.n	46b4 <common_tc_delay+0x48>
    46ae:	3364      	adds	r3, #100	; 0x64
    46b0:	4a05      	ldr	r2, [pc, #20]	; (46c8 <common_tc_delay+0x5c>)
    46b2:	8113      	strh	r3, [r2, #8]
    46b4:	4b04      	ldr	r3, [pc, #16]	; (46c8 <common_tc_delay+0x5c>)
    46b6:	8918      	ldrh	r0, [r3, #8]
    46b8:	4b06      	ldr	r3, [pc, #24]	; (46d4 <common_tc_delay+0x68>)
    46ba:	4798      	blx	r3
    46bc:	bd10      	pop	{r4, pc}
    46be:	46c0      	nop			; (mov r8, r8)
    46c0:	00002f1d 	.word	0x00002f1d
    46c4:	20001298 	.word	0x20001298
    46c8:	20000280 	.word	0x20000280
    46cc:	00002f31 	.word	0x00002f31
    46d0:	00002f45 	.word	0x00002f45
    46d4:	00002f81 	.word	0x00002f81

000046d8 <common_tc_init>:
    46d8:	b508      	push	{r3, lr}
    46da:	2200      	movs	r2, #0
    46dc:	4b03      	ldr	r3, [pc, #12]	; (46ec <common_tc_init+0x14>)
    46de:	701a      	strb	r2, [r3, #0]
    46e0:	4b03      	ldr	r3, [pc, #12]	; (46f0 <common_tc_init+0x18>)
    46e2:	4798      	blx	r3
    46e4:	4b03      	ldr	r3, [pc, #12]	; (46f4 <common_tc_init+0x1c>)
    46e6:	7018      	strb	r0, [r3, #0]
    46e8:	bd08      	pop	{r3, pc}
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	20000280 	.word	0x20000280
    46f0:	00002f99 	.word	0x00002f99
    46f4:	20001298 	.word	0x20001298

000046f8 <tmr_ovf_callback>:
    46f8:	b508      	push	{r3, lr}
    46fa:	4b0e      	ldr	r3, [pc, #56]	; (4734 <tmr_ovf_callback+0x3c>)
    46fc:	685b      	ldr	r3, [r3, #4]
    46fe:	2b00      	cmp	r3, #0
    4700:	d007      	beq.n	4712 <tmr_ovf_callback+0x1a>
    4702:	4a0c      	ldr	r2, [pc, #48]	; (4734 <tmr_ovf_callback+0x3c>)
    4704:	6853      	ldr	r3, [r2, #4]
    4706:	3b01      	subs	r3, #1
    4708:	6053      	str	r3, [r2, #4]
    470a:	2b00      	cmp	r3, #0
    470c:	d101      	bne.n	4712 <tmr_ovf_callback+0x1a>
    470e:	4b0a      	ldr	r3, [pc, #40]	; (4738 <tmr_ovf_callback+0x40>)
    4710:	4798      	blx	r3
    4712:	4a08      	ldr	r2, [pc, #32]	; (4734 <tmr_ovf_callback+0x3c>)
    4714:	7813      	ldrb	r3, [r2, #0]
    4716:	3301      	adds	r3, #1
    4718:	b2db      	uxtb	r3, r3
    471a:	7013      	strb	r3, [r2, #0]
    471c:	4a07      	ldr	r2, [pc, #28]	; (473c <tmr_ovf_callback+0x44>)
    471e:	7812      	ldrb	r2, [r2, #0]
    4720:	429a      	cmp	r2, r3
    4722:	d806      	bhi.n	4732 <tmr_ovf_callback+0x3a>
    4724:	4b03      	ldr	r3, [pc, #12]	; (4734 <tmr_ovf_callback+0x3c>)
    4726:	2200      	movs	r2, #0
    4728:	701a      	strb	r2, [r3, #0]
    472a:	68db      	ldr	r3, [r3, #12]
    472c:	2b00      	cmp	r3, #0
    472e:	d000      	beq.n	4732 <tmr_ovf_callback+0x3a>
    4730:	4798      	blx	r3
    4732:	bd08      	pop	{r3, pc}
    4734:	20000280 	.word	0x20000280
    4738:	00002f45 	.word	0x00002f45
    473c:	20001298 	.word	0x20001298

00004740 <tmr_cca_callback>:
    4740:	b508      	push	{r3, lr}
    4742:	4b04      	ldr	r3, [pc, #16]	; (4754 <tmr_cca_callback+0x14>)
    4744:	4798      	blx	r3
    4746:	4b04      	ldr	r3, [pc, #16]	; (4758 <tmr_cca_callback+0x18>)
    4748:	691b      	ldr	r3, [r3, #16]
    474a:	2b00      	cmp	r3, #0
    474c:	d000      	beq.n	4750 <tmr_cca_callback+0x10>
    474e:	4798      	blx	r3
    4750:	bd08      	pop	{r3, pc}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	00002f31 	.word	0x00002f31
    4758:	20000280 	.word	0x20000280

0000475c <set_common_tc_expiry_callback>:
    475c:	4b01      	ldr	r3, [pc, #4]	; (4764 <set_common_tc_expiry_callback+0x8>)
    475e:	6118      	str	r0, [r3, #16]
    4760:	4770      	bx	lr
    4762:	46c0      	nop			; (mov r8, r8)
    4764:	20000280 	.word	0x20000280

00004768 <frameTxCallback>:
    4768:	b570      	push	{r4, r5, r6, lr}
    476a:	2401      	movs	r4, #1
    476c:	4b07      	ldr	r3, [pc, #28]	; (478c <frameTxCallback+0x24>)
    476e:	701c      	strb	r4, [r3, #0]
    4770:	4c07      	ldr	r4, [pc, #28]	; (4790 <frameTxCallback+0x28>)
    4772:	6823      	ldr	r3, [r4, #0]
    4774:	691b      	ldr	r3, [r3, #16]
    4776:	2b00      	cmp	r3, #0
    4778:	d004      	beq.n	4784 <frameTxCallback+0x1c>
    477a:	4798      	blx	r3
    477c:	4d05      	ldr	r5, [pc, #20]	; (4794 <frameTxCallback+0x2c>)
    477e:	6820      	ldr	r0, [r4, #0]
    4780:	47a8      	blx	r5
    4782:	bd70      	pop	{r4, r5, r6, pc}
    4784:	0010      	movs	r0, r2
    4786:	4d03      	ldr	r5, [pc, #12]	; (4794 <frameTxCallback+0x2c>)
    4788:	47a8      	blx	r5
    478a:	e7f8      	b.n	477e <frameTxCallback+0x16>
    478c:	2000004a 	.word	0x2000004a
    4790:	200012c0 	.word	0x200012c0
    4794:	00002c11 	.word	0x00002c11

00004798 <dataTimerHandler>:
    4798:	b5f0      	push	{r4, r5, r6, r7, lr}
    479a:	4646      	mov	r6, r8
    479c:	46d6      	mov	lr, sl
    479e:	464f      	mov	r7, r9
    47a0:	b5c0      	push	{r6, r7, lr}
    47a2:	4e23      	ldr	r6, [pc, #140]	; (4830 <dataTimerHandler+0x98>)
    47a4:	7a33      	ldrb	r3, [r6, #8]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d033      	beq.n	4812 <dataTimerHandler+0x7a>
    47aa:	4b22      	ldr	r3, [pc, #136]	; (4834 <dataTimerHandler+0x9c>)
    47ac:	2500      	movs	r5, #0
    47ae:	4698      	mov	r8, r3
    47b0:	4b21      	ldr	r3, [pc, #132]	; (4838 <dataTimerHandler+0xa0>)
    47b2:	4f22      	ldr	r7, [pc, #136]	; (483c <dataTimerHandler+0xa4>)
    47b4:	469a      	mov	sl, r3
    47b6:	46c1      	mov	r9, r8
    47b8:	e016      	b.n	47e8 <dataTimerHandler+0x50>
    47ba:	7c43      	ldrb	r3, [r0, #17]
    47bc:	2b00      	cmp	r3, #0
    47be:	d02d      	beq.n	481c <dataTimerHandler+0x84>
    47c0:	3b01      	subs	r3, #1
    47c2:	b2db      	uxtb	r3, r3
    47c4:	7443      	strb	r3, [r0, #17]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d128      	bne.n	481c <dataTimerHandler+0x84>
    47ca:	6883      	ldr	r3, [r0, #8]
    47cc:	2b00      	cmp	r3, #0
    47ce:	d003      	beq.n	47d8 <dataTimerHandler+0x40>
    47d0:	7c80      	ldrb	r0, [r0, #18]
    47d2:	0022      	movs	r2, r4
    47d4:	2103      	movs	r1, #3
    47d6:	4798      	blx	r3
    47d8:	0020      	movs	r0, r4
    47da:	4b19      	ldr	r3, [pc, #100]	; (4840 <dataTimerHandler+0xa8>)
    47dc:	4798      	blx	r3
    47de:	3501      	adds	r5, #1
    47e0:	7a33      	ldrb	r3, [r6, #8]
    47e2:	b2ed      	uxtb	r5, r5
    47e4:	42ab      	cmp	r3, r5
    47e6:	d914      	bls.n	4812 <dataTimerHandler+0x7a>
    47e8:	2100      	movs	r1, #0
    47ea:	0030      	movs	r0, r6
    47ec:	47b8      	blx	r7
    47ee:	1e04      	subs	r4, r0, #0
    47f0:	d00f      	beq.n	4812 <dataTimerHandler+0x7a>
    47f2:	7c03      	ldrb	r3, [r0, #16]
    47f4:	2b00      	cmp	r3, #0
    47f6:	d004      	beq.n	4802 <dataTimerHandler+0x6a>
    47f8:	3b01      	subs	r3, #1
    47fa:	b2db      	uxtb	r3, r3
    47fc:	7403      	strb	r3, [r0, #16]
    47fe:	2b00      	cmp	r3, #0
    4800:	d0db      	beq.n	47ba <dataTimerHandler+0x22>
    4802:	0021      	movs	r1, r4
    4804:	0030      	movs	r0, r6
    4806:	47c0      	blx	r8
    4808:	3501      	adds	r5, #1
    480a:	7a33      	ldrb	r3, [r6, #8]
    480c:	b2ed      	uxtb	r5, r5
    480e:	42ab      	cmp	r3, r5
    4810:	d8ea      	bhi.n	47e8 <dataTimerHandler+0x50>
    4812:	bc1c      	pop	{r2, r3, r4}
    4814:	4690      	mov	r8, r2
    4816:	4699      	mov	r9, r3
    4818:	46a2      	mov	sl, r4
    481a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    481c:	4653      	mov	r3, sl
    481e:	681b      	ldr	r3, [r3, #0]
    4820:	0021      	movs	r1, r4
    4822:	7adb      	ldrb	r3, [r3, #11]
    4824:	0030      	movs	r0, r6
    4826:	3301      	adds	r3, #1
    4828:	7423      	strb	r3, [r4, #16]
    482a:	47c8      	blx	r9
    482c:	e7d7      	b.n	47de <dataTimerHandler+0x46>
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	200012b0 	.word	0x200012b0
    4834:	00002cf1 	.word	0x00002cf1
    4838:	200012a8 	.word	0x200012a8
    483c:	00002d29 	.word	0x00002d29
    4840:	00002c11 	.word	0x00002c11

00004844 <ackReqDataConfcb>:
    4844:	b5f0      	push	{r4, r5, r6, r7, lr}
    4846:	46de      	mov	lr, fp
    4848:	4657      	mov	r7, sl
    484a:	4645      	mov	r5, r8
    484c:	464e      	mov	r6, r9
    484e:	b5e0      	push	{r5, r6, r7, lr}
    4850:	7893      	ldrb	r3, [r2, #2]
    4852:	b083      	sub	sp, #12
    4854:	4682      	mov	sl, r0
    4856:	4698      	mov	r8, r3
    4858:	0010      	movs	r0, r2
    485a:	4b32      	ldr	r3, [pc, #200]	; (4924 <ackReqDataConfcb+0xe0>)
    485c:	4693      	mov	fp, r2
    485e:	9101      	str	r1, [sp, #4]
    4860:	4798      	blx	r3
    4862:	22ff      	movs	r2, #255	; 0xff
    4864:	4b30      	ldr	r3, [pc, #192]	; (4928 <ackReqDataConfcb+0xe4>)
    4866:	881b      	ldrh	r3, [r3, #0]
    4868:	421a      	tst	r2, r3
    486a:	d156      	bne.n	491a <ackReqDataConfcb+0xd6>
    486c:	4e2f      	ldr	r6, [pc, #188]	; (492c <ackReqDataConfcb+0xe8>)
    486e:	7a33      	ldrb	r3, [r6, #8]
    4870:	2b00      	cmp	r3, #0
    4872:	d031      	beq.n	48d8 <ackReqDataConfcb+0x94>
    4874:	4b2e      	ldr	r3, [pc, #184]	; (4930 <ackReqDataConfcb+0xec>)
    4876:	2400      	movs	r4, #0
    4878:	4f2e      	ldr	r7, [pc, #184]	; (4934 <ackReqDataConfcb+0xf0>)
    487a:	4699      	mov	r9, r3
    487c:	e007      	b.n	488e <ackReqDataConfcb+0x4a>
    487e:	0029      	movs	r1, r5
    4880:	0030      	movs	r0, r6
    4882:	47c8      	blx	r9
    4884:	3401      	adds	r4, #1
    4886:	7a33      	ldrb	r3, [r6, #8]
    4888:	b2e4      	uxtb	r4, r4
    488a:	42a3      	cmp	r3, r4
    488c:	d924      	bls.n	48d8 <ackReqDataConfcb+0x94>
    488e:	2100      	movs	r1, #0
    4890:	0030      	movs	r0, r6
    4892:	47b8      	blx	r7
    4894:	1e05      	subs	r5, r0, #0
    4896:	d01f      	beq.n	48d8 <ackReqDataConfcb+0x94>
    4898:	2320      	movs	r3, #32
    489a:	5cc3      	ldrb	r3, [r0, r3]
    489c:	4543      	cmp	r3, r8
    489e:	d1ee      	bne.n	487e <ackReqDataConfcb+0x3a>
    48a0:	7c80      	ldrb	r0, [r0, #18]
    48a2:	4550      	cmp	r0, sl
    48a4:	d1eb      	bne.n	487e <ackReqDataConfcb+0x3a>
    48a6:	9b01      	ldr	r3, [sp, #4]
    48a8:	2b00      	cmp	r3, #0
    48aa:	d02a      	beq.n	4902 <ackReqDataConfcb+0xbe>
    48ac:	7c6b      	ldrb	r3, [r5, #17]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d019      	beq.n	48e6 <ackReqDataConfcb+0xa2>
    48b2:	3b01      	subs	r3, #1
    48b4:	b2db      	uxtb	r3, r3
    48b6:	746b      	strb	r3, [r5, #17]
    48b8:	2b00      	cmp	r3, #0
    48ba:	d114      	bne.n	48e6 <ackReqDataConfcb+0xa2>
    48bc:	68ab      	ldr	r3, [r5, #8]
    48be:	2b00      	cmp	r3, #0
    48c0:	d002      	beq.n	48c8 <ackReqDataConfcb+0x84>
    48c2:	465a      	mov	r2, fp
    48c4:	9901      	ldr	r1, [sp, #4]
    48c6:	4798      	blx	r3
    48c8:	4b16      	ldr	r3, [pc, #88]	; (4924 <ackReqDataConfcb+0xe0>)
    48ca:	0028      	movs	r0, r5
    48cc:	4798      	blx	r3
    48ce:	3401      	adds	r4, #1
    48d0:	7a33      	ldrb	r3, [r6, #8]
    48d2:	b2e4      	uxtb	r4, r4
    48d4:	42a3      	cmp	r3, r4
    48d6:	d8da      	bhi.n	488e <ackReqDataConfcb+0x4a>
    48d8:	b003      	add	sp, #12
    48da:	bc3c      	pop	{r2, r3, r4, r5}
    48dc:	4690      	mov	r8, r2
    48de:	4699      	mov	r9, r3
    48e0:	46a2      	mov	sl, r4
    48e2:	46ab      	mov	fp, r5
    48e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48e6:	4b14      	ldr	r3, [pc, #80]	; (4938 <ackReqDataConfcb+0xf4>)
    48e8:	781b      	ldrb	r3, [r3, #0]
    48ea:	2b08      	cmp	r3, #8
    48ec:	d0e6      	beq.n	48bc <ackReqDataConfcb+0x78>
    48ee:	0029      	movs	r1, r5
    48f0:	0030      	movs	r0, r6
    48f2:	4b0f      	ldr	r3, [pc, #60]	; (4930 <ackReqDataConfcb+0xec>)
    48f4:	4798      	blx	r3
    48f6:	89a9      	ldrh	r1, [r5, #12]
    48f8:	4a10      	ldr	r2, [pc, #64]	; (493c <ackReqDataConfcb+0xf8>)
    48fa:	0028      	movs	r0, r5
    48fc:	4b10      	ldr	r3, [pc, #64]	; (4940 <ackReqDataConfcb+0xfc>)
    48fe:	4798      	blx	r3
    4900:	e7c0      	b.n	4884 <ackReqDataConfcb+0x40>
    4902:	4b10      	ldr	r3, [pc, #64]	; (4944 <ackReqDataConfcb+0x100>)
    4904:	0029      	movs	r1, r5
    4906:	681a      	ldr	r2, [r3, #0]
    4908:	0030      	movs	r0, r6
    490a:	7ad3      	ldrb	r3, [r2, #11]
    490c:	3301      	adds	r3, #1
    490e:	742b      	strb	r3, [r5, #16]
    4910:	7b13      	ldrb	r3, [r2, #12]
    4912:	746b      	strb	r3, [r5, #17]
    4914:	4b06      	ldr	r3, [pc, #24]	; (4930 <ackReqDataConfcb+0xec>)
    4916:	4798      	blx	r3
    4918:	e7b4      	b.n	4884 <ackReqDataConfcb+0x40>
    491a:	9801      	ldr	r0, [sp, #4]
    491c:	4b0a      	ldr	r3, [pc, #40]	; (4948 <ackReqDataConfcb+0x104>)
    491e:	4798      	blx	r3
    4920:	e7a4      	b.n	486c <ackReqDataConfcb+0x28>
    4922:	46c0      	nop			; (mov r8, r8)
    4924:	00002c11 	.word	0x00002c11
    4928:	200012f0 	.word	0x200012f0
    492c:	200012b0 	.word	0x200012b0
    4930:	00002cf1 	.word	0x00002cf1
    4934:	00002d29 	.word	0x00002d29
    4938:	20000294 	.word	0x20000294
    493c:	00004845 	.word	0x00004845
    4940:	000063e1 	.word	0x000063e1
    4944:	200012a8 	.word	0x200012a8
    4948:	00006fb9 	.word	0x00006fb9

0000494c <nonAckDataCallback>:
    494c:	b5f0      	push	{r4, r5, r6, r7, lr}
    494e:	46c6      	mov	lr, r8
    4950:	4e15      	ldr	r6, [pc, #84]	; (49a8 <nonAckDataCallback+0x5c>)
    4952:	b500      	push	{lr}
    4954:	4680      	mov	r8, r0
    4956:	0010      	movs	r0, r2
    4958:	0015      	movs	r5, r2
    495a:	000f      	movs	r7, r1
    495c:	47b0      	blx	r6
    495e:	4b13      	ldr	r3, [pc, #76]	; (49ac <nonAckDataCallback+0x60>)
    4960:	2100      	movs	r1, #0
    4962:	4813      	ldr	r0, [pc, #76]	; (49b0 <nonAckDataCallback+0x64>)
    4964:	4798      	blx	r3
    4966:	22ff      	movs	r2, #255	; 0xff
    4968:	4b12      	ldr	r3, [pc, #72]	; (49b4 <nonAckDataCallback+0x68>)
    496a:	0004      	movs	r4, r0
    496c:	881b      	ldrh	r3, [r3, #0]
    496e:	421a      	tst	r2, r3
    4970:	d110      	bne.n	4994 <nonAckDataCallback+0x48>
    4972:	2c00      	cmp	r4, #0
    4974:	d013      	beq.n	499e <nonAckDataCallback+0x52>
    4976:	68a3      	ldr	r3, [r4, #8]
    4978:	2b00      	cmp	r3, #0
    497a:	d003      	beq.n	4984 <nonAckDataCallback+0x38>
    497c:	002a      	movs	r2, r5
    497e:	0039      	movs	r1, r7
    4980:	4640      	mov	r0, r8
    4982:	4798      	blx	r3
    4984:	7d23      	ldrb	r3, [r4, #20]
    4986:	2b00      	cmp	r3, #0
    4988:	d101      	bne.n	498e <nonAckDataCallback+0x42>
    498a:	0020      	movs	r0, r4
    498c:	47b0      	blx	r6
    498e:	bc04      	pop	{r2}
    4990:	4690      	mov	r8, r2
    4992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4994:	0038      	movs	r0, r7
    4996:	4b08      	ldr	r3, [pc, #32]	; (49b8 <nonAckDataCallback+0x6c>)
    4998:	4798      	blx	r3
    499a:	2c00      	cmp	r4, #0
    499c:	d1eb      	bne.n	4976 <nonAckDataCallback+0x2a>
    499e:	4b07      	ldr	r3, [pc, #28]	; (49bc <nonAckDataCallback+0x70>)
    49a0:	781b      	ldrb	r3, [r3, #0]
    49a2:	2b08      	cmp	r3, #8
    49a4:	d1f3      	bne.n	498e <nonAckDataCallback+0x42>
    49a6:	e7e6      	b.n	4976 <nonAckDataCallback+0x2a>
    49a8:	00002c11 	.word	0x00002c11
    49ac:	00002d29 	.word	0x00002d29
    49b0:	2000129c 	.word	0x2000129c
    49b4:	200012f0 	.word	0x200012f0
    49b8:	00006fb9 	.word	0x00006fb9
    49bc:	20000294 	.word	0x20000294

000049c0 <MiApp_ProtocolInit>:
    49c0:	b570      	push	{r4, r5, r6, lr}
    49c2:	4b20      	ldr	r3, [pc, #128]	; (4a44 <MiApp_ProtocolInit+0x84>)
    49c4:	b084      	sub	sp, #16
    49c6:	6018      	str	r0, [r3, #0]
    49c8:	4b1f      	ldr	r3, [pc, #124]	; (4a48 <MiApp_ProtocolInit+0x88>)
    49ca:	2501      	movs	r5, #1
    49cc:	6019      	str	r1, [r3, #0]
    49ce:	4b1f      	ldr	r3, [pc, #124]	; (4a4c <MiApp_ProtocolInit+0x8c>)
    49d0:	4798      	blx	r3
    49d2:	2102      	movs	r1, #2
    49d4:	4c1e      	ldr	r4, [pc, #120]	; (4a50 <MiApp_ProtocolInit+0x90>)
    49d6:	4b1f      	ldr	r3, [pc, #124]	; (4a54 <MiApp_ProtocolInit+0x94>)
    49d8:	aa02      	add	r2, sp, #8
    49da:	8023      	strh	r3, [r4, #0]
    49dc:	7813      	ldrb	r3, [r2, #0]
    49de:	2601      	movs	r6, #1
    49e0:	430b      	orrs	r3, r1
    49e2:	2187      	movs	r1, #135	; 0x87
    49e4:	400b      	ands	r3, r1
    49e6:	2140      	movs	r1, #64	; 0x40
    49e8:	430b      	orrs	r3, r1
    49ea:	21c3      	movs	r1, #195	; 0xc3
    49ec:	400b      	ands	r3, r1
    49ee:	43ab      	bics	r3, r5
    49f0:	7013      	strb	r3, [r2, #0]
    49f2:	4919      	ldr	r1, [pc, #100]	; (4a58 <MiApp_ProtocolInit+0x98>)
    49f4:	9802      	ldr	r0, [sp, #8]
    49f6:	4b19      	ldr	r3, [pc, #100]	; (4a5c <MiApp_ProtocolInit+0x9c>)
    49f8:	4798      	blx	r3
    49fa:	4b19      	ldr	r3, [pc, #100]	; (4a60 <MiApp_ProtocolInit+0xa0>)
    49fc:	4798      	blx	r3
    49fe:	466b      	mov	r3, sp
    4a00:	4276      	negs	r6, r6
    4a02:	1d98      	adds	r0, r3, #6
    4a04:	0021      	movs	r1, r4
    4a06:	4b17      	ldr	r3, [pc, #92]	; (4a64 <MiApp_ProtocolInit+0xa4>)
    4a08:	8006      	strh	r6, [r0, #0]
    4a0a:	4798      	blx	r3
    4a0c:	4916      	ldr	r1, [pc, #88]	; (4a68 <MiApp_ProtocolInit+0xa8>)
    4a0e:	4b17      	ldr	r3, [pc, #92]	; (4a6c <MiApp_ProtocolInit+0xac>)
    4a10:	2000      	movs	r0, #0
    4a12:	4798      	blx	r3
    4a14:	4b16      	ldr	r3, [pc, #88]	; (4a70 <MiApp_ProtocolInit+0xb0>)
    4a16:	4c17      	ldr	r4, [pc, #92]	; (4a74 <MiApp_ProtocolInit+0xb4>)
    4a18:	701d      	strb	r5, [r3, #0]
    4a1a:	4b17      	ldr	r3, [pc, #92]	; (4a78 <MiApp_ProtocolInit+0xb8>)
    4a1c:	4817      	ldr	r0, [pc, #92]	; (4a7c <MiApp_ProtocolInit+0xbc>)
    4a1e:	801e      	strh	r6, [r3, #0]
    4a20:	47a0      	blx	r4
    4a22:	4817      	ldr	r0, [pc, #92]	; (4a80 <MiApp_ProtocolInit+0xc0>)
    4a24:	47a0      	blx	r4
    4a26:	4817      	ldr	r0, [pc, #92]	; (4a84 <MiApp_ProtocolInit+0xc4>)
    4a28:	47a0      	blx	r4
    4a2a:	23fa      	movs	r3, #250	; 0xfa
    4a2c:	4816      	ldr	r0, [pc, #88]	; (4a88 <MiApp_ProtocolInit+0xc8>)
    4a2e:	009b      	lsls	r3, r3, #2
    4a30:	6083      	str	r3, [r0, #8]
    4a32:	4b16      	ldr	r3, [pc, #88]	; (4a8c <MiApp_ProtocolInit+0xcc>)
    4a34:	7305      	strb	r5, [r0, #12]
    4a36:	6103      	str	r3, [r0, #16]
    4a38:	4b15      	ldr	r3, [pc, #84]	; (4a90 <MiApp_ProtocolInit+0xd0>)
    4a3a:	4798      	blx	r3
    4a3c:	2001      	movs	r0, #1
    4a3e:	b004      	add	sp, #16
    4a40:	bd70      	pop	{r4, r5, r6, pc}
    4a42:	46c0      	nop			; (mov r8, r8)
    4a44:	200012a8 	.word	0x200012a8
    4a48:	200012ac 	.word	0x200012ac
    4a4c:	00002db1 	.word	0x00002db1
    4a50:	200012dc 	.word	0x200012dc
    4a54:	00001234 	.word	0x00001234
    4a58:	2000004c 	.word	0x2000004c
    4a5c:	00001d95 	.word	0x00001d95
    4a60:	000027a9 	.word	0x000027a9
    4a64:	00001d35 	.word	0x00001d35
    4a68:	200012bc 	.word	0x200012bc
    4a6c:	00001d6d 	.word	0x00001d6d
    4a70:	20000294 	.word	0x20000294
    4a74:	00002ce5 	.word	0x00002ce5
    4a78:	200012f0 	.word	0x200012f0
    4a7c:	200012b0 	.word	0x200012b0
    4a80:	2000129c 	.word	0x2000129c
    4a84:	200012e4 	.word	0x200012e4
    4a88:	20000298 	.word	0x20000298
    4a8c:	00004799 	.word	0x00004799
    4a90:	00002e59 	.word	0x00002e59

00004a94 <MiApp_Set>:
    4a94:	b530      	push	{r4, r5, lr}
    4a96:	000c      	movs	r4, r1
    4a98:	b083      	sub	sp, #12
    4a9a:	2802      	cmp	r0, #2
    4a9c:	d015      	beq.n	4aca <MiApp_Set+0x36>
    4a9e:	2880      	cmp	r0, #128	; 0x80
    4aa0:	d00c      	beq.n	4abc <MiApp_Set+0x28>
    4aa2:	2800      	cmp	r0, #0
    4aa4:	d002      	beq.n	4aac <MiApp_Set+0x18>
    4aa6:	2000      	movs	r0, #0
    4aa8:	b003      	add	sp, #12
    4aaa:	bd30      	pop	{r4, r5, pc}
    4aac:	4b0e      	ldr	r3, [pc, #56]	; (4ae8 <MiApp_Set+0x54>)
    4aae:	4798      	blx	r3
    4ab0:	2800      	cmp	r0, #0
    4ab2:	d0f9      	beq.n	4aa8 <MiApp_Set+0x14>
    4ab4:	7822      	ldrb	r2, [r4, #0]
    4ab6:	4b0d      	ldr	r3, [pc, #52]	; (4aec <MiApp_Set+0x58>)
    4ab8:	701a      	strb	r2, [r3, #0]
    4aba:	e7f5      	b.n	4aa8 <MiApp_Set+0x14>
    4abc:	780b      	ldrb	r3, [r1, #0]
    4abe:	2001      	movs	r0, #1
    4ac0:	1e5a      	subs	r2, r3, #1
    4ac2:	4193      	sbcs	r3, r2
    4ac4:	4a0a      	ldr	r2, [pc, #40]	; (4af0 <MiApp_Set+0x5c>)
    4ac6:	7013      	strb	r3, [r2, #0]
    4ac8:	e7ee      	b.n	4aa8 <MiApp_Set+0x14>
    4aca:	780b      	ldrb	r3, [r1, #0]
    4acc:	ad01      	add	r5, sp, #4
    4ace:	702b      	strb	r3, [r5, #0]
    4ad0:	784b      	ldrb	r3, [r1, #1]
    4ad2:	0028      	movs	r0, r5
    4ad4:	706b      	strb	r3, [r5, #1]
    4ad6:	4907      	ldr	r1, [pc, #28]	; (4af4 <MiApp_Set+0x60>)
    4ad8:	4b07      	ldr	r3, [pc, #28]	; (4af8 <MiApp_Set+0x64>)
    4ada:	4798      	blx	r3
    4adc:	2800      	cmp	r0, #0
    4ade:	d0e3      	beq.n	4aa8 <MiApp_Set+0x14>
    4ae0:	882a      	ldrh	r2, [r5, #0]
    4ae2:	4b06      	ldr	r3, [pc, #24]	; (4afc <MiApp_Set+0x68>)
    4ae4:	801a      	strh	r2, [r3, #0]
    4ae6:	e7df      	b.n	4aa8 <MiApp_Set+0x14>
    4ae8:	00001d6d 	.word	0x00001d6d
    4aec:	200012bc 	.word	0x200012bc
    4af0:	2000004b 	.word	0x2000004b
    4af4:	200012dc 	.word	0x200012dc
    4af8:	00001d35 	.word	0x00001d35
    4afc:	200012f0 	.word	0x200012f0

00004b00 <MeshTasks>:
    4b00:	b570      	push	{r4, r5, r6, lr}
    4b02:	4b19      	ldr	r3, [pc, #100]	; (4b68 <MeshTasks+0x68>)
    4b04:	b084      	sub	sp, #16
    4b06:	4798      	blx	r3
    4b08:	4818      	ldr	r0, [pc, #96]	; (4b6c <MeshTasks+0x6c>)
    4b0a:	7a03      	ldrb	r3, [r0, #8]
    4b0c:	2b00      	cmp	r3, #0
    4b0e:	d003      	beq.n	4b18 <MeshTasks+0x18>
    4b10:	4c17      	ldr	r4, [pc, #92]	; (4b70 <MeshTasks+0x70>)
    4b12:	7823      	ldrb	r3, [r4, #0]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d10c      	bne.n	4b32 <MeshTasks+0x32>
    4b18:	4b16      	ldr	r3, [pc, #88]	; (4b74 <MeshTasks+0x74>)
    4b1a:	4798      	blx	r3
    4b1c:	2800      	cmp	r0, #0
    4b1e:	d004      	beq.n	4b2a <MeshTasks+0x2a>
    4b20:	4b15      	ldr	r3, [pc, #84]	; (4b78 <MeshTasks+0x78>)
    4b22:	4816      	ldr	r0, [pc, #88]	; (4b7c <MeshTasks+0x7c>)
    4b24:	4798      	blx	r3
    4b26:	4b16      	ldr	r3, [pc, #88]	; (4b80 <MeshTasks+0x80>)
    4b28:	4798      	blx	r3
    4b2a:	4b16      	ldr	r3, [pc, #88]	; (4b84 <MeshTasks+0x84>)
    4b2c:	4798      	blx	r3
    4b2e:	b004      	add	sp, #16
    4b30:	bd70      	pop	{r4, r5, r6, pc}
    4b32:	4b15      	ldr	r3, [pc, #84]	; (4b88 <MeshTasks+0x88>)
    4b34:	781d      	ldrb	r5, [r3, #0]
    4b36:	2d00      	cmp	r5, #0
    4b38:	d1ee      	bne.n	4b18 <MeshTasks+0x18>
    4b3a:	2100      	movs	r1, #0
    4b3c:	4b13      	ldr	r3, [pc, #76]	; (4b8c <MeshTasks+0x8c>)
    4b3e:	4798      	blx	r3
    4b40:	1e02      	subs	r2, r0, #0
    4b42:	d0e9      	beq.n	4b18 <MeshTasks+0x18>
    4b44:	4b12      	ldr	r3, [pc, #72]	; (4b90 <MeshTasks+0x90>)
    4b46:	4913      	ldr	r1, [pc, #76]	; (4b94 <MeshTasks+0x94>)
    4b48:	6018      	str	r0, [r3, #0]
    4b4a:	6943      	ldr	r3, [r0, #20]
    4b4c:	9102      	str	r1, [sp, #8]
    4b4e:	2125      	movs	r1, #37	; 0x25
    4b50:	5c41      	ldrb	r1, [r0, r1]
    4b52:	4e11      	ldr	r6, [pc, #68]	; (4b98 <MeshTasks+0x98>)
    4b54:	9101      	str	r1, [sp, #4]
    4b56:	2124      	movs	r1, #36	; 0x24
    4b58:	5c41      	ldrb	r1, [r0, r1]
    4b5a:	9100      	str	r1, [sp, #0]
    4b5c:	69d1      	ldr	r1, [r2, #28]
    4b5e:	6980      	ldr	r0, [r0, #24]
    4b60:	6a12      	ldr	r2, [r2, #32]
    4b62:	47b0      	blx	r6
    4b64:	7025      	strb	r5, [r4, #0]
    4b66:	e7d7      	b.n	4b18 <MeshTasks+0x18>
    4b68:	00002441 	.word	0x00002441
    4b6c:	200012e4 	.word	0x200012e4
    4b70:	2000004a 	.word	0x2000004a
    4b74:	0000207d 	.word	0x0000207d
    4b78:	00005fd5 	.word	0x00005fd5
    4b7c:	200012c8 	.word	0x200012c8
    4b80:	00002061 	.word	0x00002061
    4b84:	00002e79 	.word	0x00002e79
    4b88:	200002b0 	.word	0x200002b0
    4b8c:	00002d29 	.word	0x00002d29
    4b90:	200012c0 	.word	0x200012c0
    4b94:	00004769 	.word	0x00004769
    4b98:	00001e01 	.word	0x00001e01

00004b9c <MiApp_SendData>:
    4b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b9e:	4657      	mov	r7, sl
    4ba0:	464e      	mov	r6, r9
    4ba2:	4645      	mov	r5, r8
    4ba4:	46de      	mov	lr, fp
    4ba6:	b5e0      	push	{r5, r6, r7, lr}
    4ba8:	b083      	sub	sp, #12
    4baa:	001e      	movs	r6, r3
    4bac:	ab0c      	add	r3, sp, #48	; 0x30
    4bae:	781f      	ldrb	r7, [r3, #0]
    4bb0:	ab0d      	add	r3, sp, #52	; 0x34
    4bb2:	781c      	ldrb	r4, [r3, #0]
    4bb4:	4b3d      	ldr	r3, [pc, #244]	; (4cac <MiApp_SendData+0x110>)
    4bb6:	0015      	movs	r5, r2
    4bb8:	781b      	ldrb	r3, [r3, #0]
    4bba:	3b06      	subs	r3, #6
    4bbc:	2b01      	cmp	r3, #1
    4bbe:	d907      	bls.n	4bd0 <MiApp_SendData+0x34>
    4bc0:	2000      	movs	r0, #0
    4bc2:	b003      	add	sp, #12
    4bc4:	bc3c      	pop	{r2, r3, r4, r5}
    4bc6:	4690      	mov	r8, r2
    4bc8:	4699      	mov	r9, r3
    4bca:	46a2      	mov	sl, r4
    4bcc:	46ab      	mov	fp, r5
    4bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bd0:	2802      	cmp	r0, #2
    4bd2:	d1f5      	bne.n	4bc0 <MiApp_SendData+0x24>
    4bd4:	784b      	ldrb	r3, [r1, #1]
    4bd6:	780a      	ldrb	r2, [r1, #0]
    4bd8:	021b      	lsls	r3, r3, #8
    4bda:	431a      	orrs	r2, r3
    4bdc:	308e      	adds	r0, #142	; 0x8e
    4bde:	4b34      	ldr	r3, [pc, #208]	; (4cb0 <MiApp_SendData+0x114>)
    4be0:	4691      	mov	r9, r2
    4be2:	4798      	blx	r3
    4be4:	4680      	mov	r8, r0
    4be6:	2800      	cmp	r0, #0
    4be8:	d0ea      	beq.n	4bc0 <MiApp_SendData+0x24>
    4bea:	2203      	movs	r2, #3
    4bec:	7e43      	ldrb	r3, [r0, #25]
    4bee:	2110      	movs	r1, #16
    4bf0:	4393      	bics	r3, r2
    4bf2:	7643      	strb	r3, [r0, #25]
    4bf4:	466a      	mov	r2, sp
    4bf6:	464b      	mov	r3, r9
    4bf8:	80d3      	strh	r3, [r2, #6]
    4bfa:	88d3      	ldrh	r3, [r2, #6]
    4bfc:	468b      	mov	fp, r1
    4bfe:	4699      	mov	r9, r3
    4c00:	4b2c      	ldr	r3, [pc, #176]	; (4cb4 <MiApp_SendData+0x118>)
    4c02:	464a      	mov	r2, r9
    4c04:	469a      	mov	sl, r3
    4c06:	881b      	ldrh	r3, [r3, #0]
    4c08:	8382      	strh	r2, [r0, #28]
    4c0a:	83c3      	strh	r3, [r0, #30]
    4c0c:	2301      	movs	r3, #1
    4c0e:	4023      	ands	r3, r4
    4c10:	011a      	lsls	r2, r3, #4
    4c12:	7e43      	ldrb	r3, [r0, #25]
    4c14:	438b      	bics	r3, r1
    4c16:	4313      	orrs	r3, r2
    4c18:	7643      	strb	r3, [r0, #25]
    4c1a:	2338      	movs	r3, #56	; 0x38
    4c1c:	54c5      	strb	r5, [r0, r3]
    4c1e:	2300      	movs	r3, #0
    4c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4c22:	74c3      	strb	r3, [r0, #19]
    4c24:	7503      	strb	r3, [r0, #20]
    4c26:	6082      	str	r2, [r0, #8]
    4c28:	7487      	strb	r7, [r0, #18]
    4c2a:	4b23      	ldr	r3, [pc, #140]	; (4cb8 <MiApp_SendData+0x11c>)
    4c2c:	002a      	movs	r2, r5
    4c2e:	0031      	movs	r1, r6
    4c30:	3039      	adds	r0, #57	; 0x39
    4c32:	4798      	blx	r3
    4c34:	4b21      	ldr	r3, [pc, #132]	; (4cbc <MiApp_SendData+0x120>)
    4c36:	4599      	cmp	r9, r3
    4c38:	d814      	bhi.n	4c64 <MiApp_SendData+0xc8>
    4c3a:	4653      	mov	r3, sl
    4c3c:	22ff      	movs	r2, #255	; 0xff
    4c3e:	881b      	ldrh	r3, [r3, #0]
    4c40:	4393      	bics	r3, r2
    4c42:	4642      	mov	r2, r8
    4c44:	8193      	strh	r3, [r2, #12]
    4c46:	2c00      	cmp	r4, #0
    4c48:	d11d      	bne.n	4c86 <MiApp_SendData+0xea>
    4c4a:	7454      	strb	r4, [r2, #17]
    4c4c:	4641      	mov	r1, r8
    4c4e:	481c      	ldr	r0, [pc, #112]	; (4cc0 <MiApp_SendData+0x124>)
    4c50:	4b1c      	ldr	r3, [pc, #112]	; (4cc4 <MiApp_SendData+0x128>)
    4c52:	4798      	blx	r3
    4c54:	4643      	mov	r3, r8
    4c56:	4a1c      	ldr	r2, [pc, #112]	; (4cc8 <MiApp_SendData+0x12c>)
    4c58:	8999      	ldrh	r1, [r3, #12]
    4c5a:	4640      	mov	r0, r8
    4c5c:	4b1b      	ldr	r3, [pc, #108]	; (4ccc <MiApp_SendData+0x130>)
    4c5e:	4798      	blx	r3
    4c60:	2001      	movs	r0, #1
    4c62:	e7ae      	b.n	4bc2 <MiApp_SendData+0x26>
    4c64:	4643      	mov	r3, r8
    4c66:	465a      	mov	r2, fp
    4c68:	7e5b      	ldrb	r3, [r3, #25]
    4c6a:	4641      	mov	r1, r8
    4c6c:	4393      	bics	r3, r2
    4c6e:	4642      	mov	r2, r8
    4c70:	4813      	ldr	r0, [pc, #76]	; (4cc0 <MiApp_SendData+0x124>)
    4c72:	7653      	strb	r3, [r2, #25]
    4c74:	4b13      	ldr	r3, [pc, #76]	; (4cc4 <MiApp_SendData+0x128>)
    4c76:	4798      	blx	r3
    4c78:	4a13      	ldr	r2, [pc, #76]	; (4cc8 <MiApp_SendData+0x12c>)
    4c7a:	4915      	ldr	r1, [pc, #84]	; (4cd0 <MiApp_SendData+0x134>)
    4c7c:	4640      	mov	r0, r8
    4c7e:	4b13      	ldr	r3, [pc, #76]	; (4ccc <MiApp_SendData+0x130>)
    4c80:	4798      	blx	r3
    4c82:	2001      	movs	r0, #1
    4c84:	e79d      	b.n	4bc2 <MiApp_SendData+0x26>
    4c86:	4641      	mov	r1, r8
    4c88:	4b12      	ldr	r3, [pc, #72]	; (4cd4 <MiApp_SendData+0x138>)
    4c8a:	4813      	ldr	r0, [pc, #76]	; (4cd8 <MiApp_SendData+0x13c>)
    4c8c:	681a      	ldr	r2, [r3, #0]
    4c8e:	7ad3      	ldrb	r3, [r2, #11]
    4c90:	3301      	adds	r3, #1
    4c92:	740b      	strb	r3, [r1, #16]
    4c94:	7b13      	ldrb	r3, [r2, #12]
    4c96:	744b      	strb	r3, [r1, #17]
    4c98:	4b0a      	ldr	r3, [pc, #40]	; (4cc4 <MiApp_SendData+0x128>)
    4c9a:	4798      	blx	r3
    4c9c:	4643      	mov	r3, r8
    4c9e:	4a0f      	ldr	r2, [pc, #60]	; (4cdc <MiApp_SendData+0x140>)
    4ca0:	8999      	ldrh	r1, [r3, #12]
    4ca2:	4640      	mov	r0, r8
    4ca4:	4b09      	ldr	r3, [pc, #36]	; (4ccc <MiApp_SendData+0x130>)
    4ca6:	4798      	blx	r3
    4ca8:	0020      	movs	r0, r4
    4caa:	e78a      	b.n	4bc2 <MiApp_SendData+0x26>
    4cac:	20000294 	.word	0x20000294
    4cb0:	00002bc9 	.word	0x00002bc9
    4cb4:	200012f0 	.word	0x200012f0
    4cb8:	0000754f 	.word	0x0000754f
    4cbc:	0000fffc 	.word	0x0000fffc
    4cc0:	2000129c 	.word	0x2000129c
    4cc4:	00002cf1 	.word	0x00002cf1
    4cc8:	0000494d 	.word	0x0000494d
    4ccc:	000063e1 	.word	0x000063e1
    4cd0:	0000ffff 	.word	0x0000ffff
    4cd4:	200012a8 	.word	0x200012a8
    4cd8:	200012b0 	.word	0x200012b0
    4cdc:	00004845 	.word	0x00004845

00004ce0 <MiApp_Get>:
    4ce0:	2801      	cmp	r0, #1
    4ce2:	d016      	beq.n	4d12 <MiApp_Get+0x32>
    4ce4:	2800      	cmp	r0, #0
    4ce6:	d00f      	beq.n	4d08 <MiApp_Get+0x28>
    4ce8:	2802      	cmp	r0, #2
    4cea:	d009      	beq.n	4d00 <MiApp_Get+0x20>
    4cec:	2803      	cmp	r0, #3
    4cee:	d109      	bne.n	4d04 <MiApp_Get+0x24>
    4cf0:	4b09      	ldr	r3, [pc, #36]	; (4d18 <MiApp_Get+0x38>)
    4cf2:	2001      	movs	r0, #1
    4cf4:	881a      	ldrh	r2, [r3, #0]
    4cf6:	700a      	strb	r2, [r1, #0]
    4cf8:	881b      	ldrh	r3, [r3, #0]
    4cfa:	0a1b      	lsrs	r3, r3, #8
    4cfc:	704b      	strb	r3, [r1, #1]
    4cfe:	4770      	bx	lr
    4d00:	4b06      	ldr	r3, [pc, #24]	; (4d1c <MiApp_Get+0x3c>)
    4d02:	e7f6      	b.n	4cf2 <MiApp_Get+0x12>
    4d04:	2000      	movs	r0, #0
    4d06:	e7fa      	b.n	4cfe <MiApp_Get+0x1e>
    4d08:	4b05      	ldr	r3, [pc, #20]	; (4d20 <MiApp_Get+0x40>)
    4d0a:	2001      	movs	r0, #1
    4d0c:	781b      	ldrb	r3, [r3, #0]
    4d0e:	700b      	strb	r3, [r1, #0]
    4d10:	e7f5      	b.n	4cfe <MiApp_Get+0x1e>
    4d12:	4b04      	ldr	r3, [pc, #16]	; (4d24 <MiApp_Get+0x44>)
    4d14:	e7ed      	b.n	4cf2 <MiApp_Get+0x12>
    4d16:	46c0      	nop			; (mov r8, r8)
    4d18:	20000054 	.word	0x20000054
    4d1c:	200012f0 	.word	0x200012f0
    4d20:	200012bc 	.word	0x200012bc
    4d24:	200012dc 	.word	0x200012dc

00004d28 <MiApp_MeshGetNextHopAddr>:
    4d28:	4b02      	ldr	r3, [pc, #8]	; (4d34 <MiApp_MeshGetNextHopAddr+0xc>)
    4d2a:	8818      	ldrh	r0, [r3, #0]
    4d2c:	23ff      	movs	r3, #255	; 0xff
    4d2e:	4398      	bics	r0, r3
    4d30:	4770      	bx	lr
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	200012f0 	.word	0x200012f0

00004d38 <bloomFilterAddressCheck>:
    4d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d3a:	464e      	mov	r6, r9
    4d3c:	46de      	mov	lr, fp
    4d3e:	4657      	mov	r7, sl
    4d40:	4645      	mov	r5, r8
    4d42:	b5e0      	push	{r5, r6, r7, lr}
    4d44:	4bf5      	ldr	r3, [pc, #980]	; (511c <bloomFilterAddressCheck+0x3e4>)
    4d46:	b087      	sub	sp, #28
    4d48:	781b      	ldrb	r3, [r3, #0]
    4d4a:	9003      	str	r0, [sp, #12]
    4d4c:	000e      	movs	r6, r1
    4d4e:	9300      	str	r3, [sp, #0]
    4d50:	2b00      	cmp	r3, #0
    4d52:	d001      	beq.n	4d58 <bloomFilterAddressCheck+0x20>
    4d54:	f000 fe65 	bl	5a22 <bloomFilterAddressCheck+0xcea>
    4d58:	7811      	ldrb	r1, [r2, #0]
    4d5a:	020b      	lsls	r3, r1, #8
    4d5c:	0249      	lsls	r1, r1, #9
    4d5e:	b209      	sxth	r1, r1
    4d60:	b218      	sxth	r0, r3
    4d62:	468c      	mov	ip, r1
    4d64:	4680      	mov	r8, r0
    4d66:	4660      	mov	r0, ip
    4d68:	4644      	mov	r4, r8
    4d6a:	49ed      	ldr	r1, [pc, #948]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4d6c:	005b      	lsls	r3, r3, #1
    4d6e:	4041      	eors	r1, r0
    4d70:	b29b      	uxth	r3, r3
    4d72:	b289      	uxth	r1, r1
    4d74:	9304      	str	r3, [sp, #16]
    4d76:	1c18      	adds	r0, r3, #0
    4d78:	2c00      	cmp	r4, #0
    4d7a:	da01      	bge.n	4d80 <bloomFilterAddressCheck+0x48>
    4d7c:	f000 fe5b 	bl	5a36 <bloomFilterAddressCheck+0xcfe>
    4d80:	b284      	uxth	r4, r0
    4d82:	49e7      	ldr	r1, [pc, #924]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4d84:	0064      	lsls	r4, r4, #1
    4d86:	4061      	eors	r1, r4
    4d88:	b209      	sxth	r1, r1
    4d8a:	b289      	uxth	r1, r1
    4d8c:	0044      	lsls	r4, r0, #1
    4d8e:	0403      	lsls	r3, r0, #16
    4d90:	d501      	bpl.n	4d96 <bloomFilterAddressCheck+0x5e>
    4d92:	f000 fe53 	bl	5a3c <bloomFilterAddressCheck+0xd04>
    4d96:	b2a0      	uxth	r0, r4
    4d98:	49e1      	ldr	r1, [pc, #900]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4d9a:	0040      	lsls	r0, r0, #1
    4d9c:	4041      	eors	r1, r0
    4d9e:	b289      	uxth	r1, r1
    4da0:	0060      	lsls	r0, r4, #1
    4da2:	0423      	lsls	r3, r4, #16
    4da4:	d501      	bpl.n	4daa <bloomFilterAddressCheck+0x72>
    4da6:	f000 fe54 	bl	5a52 <bloomFilterAddressCheck+0xd1a>
    4daa:	b284      	uxth	r4, r0
    4dac:	49dc      	ldr	r1, [pc, #880]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4dae:	0064      	lsls	r4, r4, #1
    4db0:	4061      	eors	r1, r4
    4db2:	b289      	uxth	r1, r1
    4db4:	0044      	lsls	r4, r0, #1
    4db6:	0403      	lsls	r3, r0, #16
    4db8:	d501      	bpl.n	4dbe <bloomFilterAddressCheck+0x86>
    4dba:	f000 fe55 	bl	5a68 <bloomFilterAddressCheck+0xd30>
    4dbe:	b2a0      	uxth	r0, r4
    4dc0:	49d7      	ldr	r1, [pc, #860]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4dc2:	0040      	lsls	r0, r0, #1
    4dc4:	4041      	eors	r1, r0
    4dc6:	b289      	uxth	r1, r1
    4dc8:	0060      	lsls	r0, r4, #1
    4dca:	0423      	lsls	r3, r4, #16
    4dcc:	d501      	bpl.n	4dd2 <bloomFilterAddressCheck+0x9a>
    4dce:	f000 fe56 	bl	5a7e <bloomFilterAddressCheck+0xd46>
    4dd2:	b284      	uxth	r4, r0
    4dd4:	49d2      	ldr	r1, [pc, #840]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4dd6:	0064      	lsls	r4, r4, #1
    4dd8:	4061      	eors	r1, r4
    4dda:	b289      	uxth	r1, r1
    4ddc:	0044      	lsls	r4, r0, #1
    4dde:	0403      	lsls	r3, r0, #16
    4de0:	d501      	bpl.n	4de6 <bloomFilterAddressCheck+0xae>
    4de2:	f000 fe57 	bl	5a94 <bloomFilterAddressCheck+0xd5c>
    4de6:	b2a0      	uxth	r0, r4
    4de8:	49cd      	ldr	r1, [pc, #820]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4dea:	0040      	lsls	r0, r0, #1
    4dec:	4041      	eors	r1, r0
    4dee:	b289      	uxth	r1, r1
    4df0:	0060      	lsls	r0, r4, #1
    4df2:	0423      	lsls	r3, r4, #16
    4df4:	d501      	bpl.n	4dfa <bloomFilterAddressCheck+0xc2>
    4df6:	f000 fe58 	bl	5aaa <bloomFilterAddressCheck+0xd72>
    4dfa:	b284      	uxth	r4, r0
    4dfc:	49c8      	ldr	r1, [pc, #800]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4dfe:	0064      	lsls	r4, r4, #1
    4e00:	4061      	eors	r1, r4
    4e02:	2401      	movs	r4, #1
    4e04:	5714      	ldrsb	r4, [r2, r4]
    4e06:	b289      	uxth	r1, r1
    4e08:	0224      	lsls	r4, r4, #8
    4e0a:	0045      	lsls	r5, r0, #1
    4e0c:	0403      	lsls	r3, r0, #16
    4e0e:	d501      	bpl.n	4e14 <bloomFilterAddressCheck+0xdc>
    4e10:	f000 fe4e 	bl	5ab0 <bloomFilterAddressCheck+0xd78>
    4e14:	4065      	eors	r5, r4
    4e16:	b22d      	sxth	r5, r5
    4e18:	b2a9      	uxth	r1, r5
    4e1a:	48c1      	ldr	r0, [pc, #772]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4e1c:	0049      	lsls	r1, r1, #1
    4e1e:	4048      	eors	r0, r1
    4e20:	b280      	uxth	r0, r0
    4e22:	2d00      	cmp	r5, #0
    4e24:	da01      	bge.n	4e2a <bloomFilterAddressCheck+0xf2>
    4e26:	f000 fe46 	bl	5ab6 <bloomFilterAddressCheck+0xd7e>
    4e2a:	48bd      	ldr	r0, [pc, #756]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4e2c:	b28d      	uxth	r5, r1
    4e2e:	006d      	lsls	r5, r5, #1
    4e30:	4045      	eors	r5, r0
    4e32:	b2ad      	uxth	r5, r5
    4e34:	0048      	lsls	r0, r1, #1
    4e36:	040b      	lsls	r3, r1, #16
    4e38:	d501      	bpl.n	4e3e <bloomFilterAddressCheck+0x106>
    4e3a:	f000 fe47 	bl	5acc <bloomFilterAddressCheck+0xd94>
    4e3e:	b285      	uxth	r5, r0
    4e40:	49b7      	ldr	r1, [pc, #732]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4e42:	006d      	lsls	r5, r5, #1
    4e44:	4069      	eors	r1, r5
    4e46:	b289      	uxth	r1, r1
    4e48:	0045      	lsls	r5, r0, #1
    4e4a:	0403      	lsls	r3, r0, #16
    4e4c:	d501      	bpl.n	4e52 <bloomFilterAddressCheck+0x11a>
    4e4e:	f000 fe48 	bl	5ae2 <bloomFilterAddressCheck+0xdaa>
    4e52:	b2a8      	uxth	r0, r5
    4e54:	49b2      	ldr	r1, [pc, #712]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4e56:	0040      	lsls	r0, r0, #1
    4e58:	4041      	eors	r1, r0
    4e5a:	b289      	uxth	r1, r1
    4e5c:	0068      	lsls	r0, r5, #1
    4e5e:	042b      	lsls	r3, r5, #16
    4e60:	d501      	bpl.n	4e66 <bloomFilterAddressCheck+0x12e>
    4e62:	f000 fe49 	bl	5af8 <bloomFilterAddressCheck+0xdc0>
    4e66:	b285      	uxth	r5, r0
    4e68:	49ad      	ldr	r1, [pc, #692]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4e6a:	006d      	lsls	r5, r5, #1
    4e6c:	4069      	eors	r1, r5
    4e6e:	b289      	uxth	r1, r1
    4e70:	0045      	lsls	r5, r0, #1
    4e72:	0403      	lsls	r3, r0, #16
    4e74:	d501      	bpl.n	4e7a <bloomFilterAddressCheck+0x142>
    4e76:	f000 fe4a 	bl	5b0e <bloomFilterAddressCheck+0xdd6>
    4e7a:	b2a8      	uxth	r0, r5
    4e7c:	49a8      	ldr	r1, [pc, #672]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4e7e:	0040      	lsls	r0, r0, #1
    4e80:	4041      	eors	r1, r0
    4e82:	b289      	uxth	r1, r1
    4e84:	0068      	lsls	r0, r5, #1
    4e86:	042b      	lsls	r3, r5, #16
    4e88:	d501      	bpl.n	4e8e <bloomFilterAddressCheck+0x156>
    4e8a:	f000 fe4b 	bl	5b24 <bloomFilterAddressCheck+0xdec>
    4e8e:	b285      	uxth	r5, r0
    4e90:	49a3      	ldr	r1, [pc, #652]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4e92:	006d      	lsls	r5, r5, #1
    4e94:	4069      	eors	r1, r5
    4e96:	b289      	uxth	r1, r1
    4e98:	0045      	lsls	r5, r0, #1
    4e9a:	0403      	lsls	r3, r0, #16
    4e9c:	d501      	bpl.n	4ea2 <bloomFilterAddressCheck+0x16a>
    4e9e:	f000 fe4c 	bl	5b3a <bloomFilterAddressCheck+0xe02>
    4ea2:	b2a8      	uxth	r0, r5
    4ea4:	499e      	ldr	r1, [pc, #632]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4ea6:	0040      	lsls	r0, r0, #1
    4ea8:	4041      	eors	r1, r0
    4eaa:	2002      	movs	r0, #2
    4eac:	5610      	ldrsb	r0, [r2, r0]
    4eae:	006f      	lsls	r7, r5, #1
    4eb0:	b289      	uxth	r1, r1
    4eb2:	0200      	lsls	r0, r0, #8
    4eb4:	46b9      	mov	r9, r7
    4eb6:	042b      	lsls	r3, r5, #16
    4eb8:	d501      	bpl.n	4ebe <bloomFilterAddressCheck+0x186>
    4eba:	f000 fe41 	bl	5b40 <bloomFilterAddressCheck+0xe08>
    4ebe:	464d      	mov	r5, r9
    4ec0:	4045      	eors	r5, r0
    4ec2:	b22d      	sxth	r5, r5
    4ec4:	b2a9      	uxth	r1, r5
    4ec6:	0049      	lsls	r1, r1, #1
    4ec8:	4689      	mov	r9, r1
    4eca:	464f      	mov	r7, r9
    4ecc:	4994      	ldr	r1, [pc, #592]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4ece:	4079      	eors	r1, r7
    4ed0:	b289      	uxth	r1, r1
    4ed2:	468a      	mov	sl, r1
    4ed4:	4649      	mov	r1, r9
    4ed6:	2d00      	cmp	r5, #0
    4ed8:	da01      	bge.n	4ede <bloomFilterAddressCheck+0x1a6>
    4eda:	f000 fe34 	bl	5b46 <bloomFilterAddressCheck+0xe0e>
    4ede:	b28d      	uxth	r5, r1
    4ee0:	006d      	lsls	r5, r5, #1
    4ee2:	46a9      	mov	r9, r5
    4ee4:	464f      	mov	r7, r9
    4ee6:	4d8e      	ldr	r5, [pc, #568]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4ee8:	407d      	eors	r5, r7
    4eea:	b2ad      	uxth	r5, r5
    4eec:	46a9      	mov	r9, r5
    4eee:	004d      	lsls	r5, r1, #1
    4ef0:	040b      	lsls	r3, r1, #16
    4ef2:	d501      	bpl.n	4ef8 <bloomFilterAddressCheck+0x1c0>
    4ef4:	f000 fe2a 	bl	5b4c <bloomFilterAddressCheck+0xe14>
    4ef8:	b2a9      	uxth	r1, r5
    4efa:	0049      	lsls	r1, r1, #1
    4efc:	4689      	mov	r9, r1
    4efe:	464f      	mov	r7, r9
    4f00:	4987      	ldr	r1, [pc, #540]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4f02:	4079      	eors	r1, r7
    4f04:	006f      	lsls	r7, r5, #1
    4f06:	b289      	uxth	r1, r1
    4f08:	46b9      	mov	r9, r7
    4f0a:	042b      	lsls	r3, r5, #16
    4f0c:	d501      	bpl.n	4f12 <bloomFilterAddressCheck+0x1da>
    4f0e:	f000 fe20 	bl	5b52 <bloomFilterAddressCheck+0xe1a>
    4f12:	4649      	mov	r1, r9
    4f14:	466b      	mov	r3, sp
    4f16:	b28d      	uxth	r5, r1
    4f18:	8099      	strh	r1, [r3, #4]
    4f1a:	4981      	ldr	r1, [pc, #516]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4f1c:	006d      	lsls	r5, r5, #1
    4f1e:	4069      	eors	r1, r5
    4f20:	464f      	mov	r7, r9
    4f22:	464d      	mov	r5, r9
    4f24:	b289      	uxth	r1, r1
    4f26:	006d      	lsls	r5, r5, #1
    4f28:	043b      	lsls	r3, r7, #16
    4f2a:	d501      	bpl.n	4f30 <bloomFilterAddressCheck+0x1f8>
    4f2c:	f000 fe14 	bl	5b58 <bloomFilterAddressCheck+0xe20>
    4f30:	b2a9      	uxth	r1, r5
    4f32:	0049      	lsls	r1, r1, #1
    4f34:	4689      	mov	r9, r1
    4f36:	464f      	mov	r7, r9
    4f38:	4979      	ldr	r1, [pc, #484]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4f3a:	4079      	eors	r1, r7
    4f3c:	006f      	lsls	r7, r5, #1
    4f3e:	b289      	uxth	r1, r1
    4f40:	46b9      	mov	r9, r7
    4f42:	042b      	lsls	r3, r5, #16
    4f44:	d501      	bpl.n	4f4a <bloomFilterAddressCheck+0x212>
    4f46:	f000 fe0a 	bl	5b5e <bloomFilterAddressCheck+0xe26>
    4f4a:	4649      	mov	r1, r9
    4f4c:	466b      	mov	r3, sp
    4f4e:	b28d      	uxth	r5, r1
    4f50:	8099      	strh	r1, [r3, #4]
    4f52:	4973      	ldr	r1, [pc, #460]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4f54:	006d      	lsls	r5, r5, #1
    4f56:	4069      	eors	r1, r5
    4f58:	464f      	mov	r7, r9
    4f5a:	464d      	mov	r5, r9
    4f5c:	b289      	uxth	r1, r1
    4f5e:	006d      	lsls	r5, r5, #1
    4f60:	043b      	lsls	r3, r7, #16
    4f62:	d501      	bpl.n	4f68 <bloomFilterAddressCheck+0x230>
    4f64:	f000 fdfe 	bl	5b64 <bloomFilterAddressCheck+0xe2c>
    4f68:	b2a9      	uxth	r1, r5
    4f6a:	0049      	lsls	r1, r1, #1
    4f6c:	4689      	mov	r9, r1
    4f6e:	464f      	mov	r7, r9
    4f70:	496b      	ldr	r1, [pc, #428]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4f72:	4079      	eors	r1, r7
    4f74:	006f      	lsls	r7, r5, #1
    4f76:	b289      	uxth	r1, r1
    4f78:	46ba      	mov	sl, r7
    4f7a:	042b      	lsls	r3, r5, #16
    4f7c:	d501      	bpl.n	4f82 <bloomFilterAddressCheck+0x24a>
    4f7e:	f000 fdf4 	bl	5b6a <bloomFilterAddressCheck+0xe32>
    4f82:	4651      	mov	r1, sl
    4f84:	466b      	mov	r3, sp
    4f86:	b28d      	uxth	r5, r1
    4f88:	8099      	strh	r1, [r3, #4]
    4f8a:	4965      	ldr	r1, [pc, #404]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4f8c:	006d      	lsls	r5, r5, #1
    4f8e:	4069      	eors	r1, r5
    4f90:	b289      	uxth	r1, r1
    4f92:	4689      	mov	r9, r1
    4f94:	2103      	movs	r1, #3
    4f96:	4655      	mov	r5, sl
    4f98:	4657      	mov	r7, sl
    4f9a:	5651      	ldrsb	r1, [r2, r1]
    4f9c:	006d      	lsls	r5, r5, #1
    4f9e:	0209      	lsls	r1, r1, #8
    4fa0:	043b      	lsls	r3, r7, #16
    4fa2:	d501      	bpl.n	4fa8 <bloomFilterAddressCheck+0x270>
    4fa4:	f000 fde4 	bl	5b70 <bloomFilterAddressCheck+0xe38>
    4fa8:	404d      	eors	r5, r1
    4faa:	b22d      	sxth	r5, r5
    4fac:	466b      	mov	r3, sp
    4fae:	46a9      	mov	r9, r5
    4fb0:	4f5b      	ldr	r7, [pc, #364]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4fb2:	b2ad      	uxth	r5, r5
    4fb4:	006d      	lsls	r5, r5, #1
    4fb6:	406f      	eors	r7, r5
    4fb8:	809f      	strh	r7, [r3, #4]
    4fba:	b2bf      	uxth	r7, r7
    4fbc:	46ba      	mov	sl, r7
    4fbe:	464f      	mov	r7, r9
    4fc0:	2f00      	cmp	r7, #0
    4fc2:	da01      	bge.n	4fc8 <bloomFilterAddressCheck+0x290>
    4fc4:	f000 fdd7 	bl	5b76 <bloomFilterAddressCheck+0xe3e>
    4fc8:	b2af      	uxth	r7, r5
    4fca:	007f      	lsls	r7, r7, #1
    4fcc:	46ba      	mov	sl, r7
    4fce:	4f54      	ldr	r7, [pc, #336]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4fd0:	46b9      	mov	r9, r7
    4fd2:	4657      	mov	r7, sl
    4fd4:	464b      	mov	r3, r9
    4fd6:	405f      	eors	r7, r3
    4fd8:	1c3b      	adds	r3, r7, #0
    4fda:	466f      	mov	r7, sp
    4fdc:	80bb      	strh	r3, [r7, #4]
    4fde:	88bb      	ldrh	r3, [r7, #4]
    4fe0:	469a      	mov	sl, r3
    4fe2:	006b      	lsls	r3, r5, #1
    4fe4:	4699      	mov	r9, r3
    4fe6:	042b      	lsls	r3, r5, #16
    4fe8:	d501      	bpl.n	4fee <bloomFilterAddressCheck+0x2b6>
    4fea:	f000 fdc7 	bl	5b7c <bloomFilterAddressCheck+0xe44>
    4fee:	464b      	mov	r3, r9
    4ff0:	466d      	mov	r5, sp
    4ff2:	80ab      	strh	r3, [r5, #4]
    4ff4:	88ad      	ldrh	r5, [r5, #4]
    4ff6:	006b      	lsls	r3, r5, #1
    4ff8:	4d49      	ldr	r5, [pc, #292]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    4ffa:	405d      	eors	r5, r3
    4ffc:	464b      	mov	r3, r9
    4ffe:	005b      	lsls	r3, r3, #1
    5000:	469a      	mov	sl, r3
    5002:	464b      	mov	r3, r9
    5004:	b2ad      	uxth	r5, r5
    5006:	041b      	lsls	r3, r3, #16
    5008:	d501      	bpl.n	500e <bloomFilterAddressCheck+0x2d6>
    500a:	f000 fdba 	bl	5b82 <bloomFilterAddressCheck+0xe4a>
    500e:	4653      	mov	r3, sl
    5010:	466d      	mov	r5, sp
    5012:	80ab      	strh	r3, [r5, #4]
    5014:	88ad      	ldrh	r5, [r5, #4]
    5016:	006b      	lsls	r3, r5, #1
    5018:	4d41      	ldr	r5, [pc, #260]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    501a:	405d      	eors	r5, r3
    501c:	4653      	mov	r3, sl
    501e:	005b      	lsls	r3, r3, #1
    5020:	4699      	mov	r9, r3
    5022:	4653      	mov	r3, sl
    5024:	b2ad      	uxth	r5, r5
    5026:	041b      	lsls	r3, r3, #16
    5028:	d501      	bpl.n	502e <bloomFilterAddressCheck+0x2f6>
    502a:	f000 fdad 	bl	5b88 <bloomFilterAddressCheck+0xe50>
    502e:	464b      	mov	r3, r9
    5030:	466d      	mov	r5, sp
    5032:	80ab      	strh	r3, [r5, #4]
    5034:	88ad      	ldrh	r5, [r5, #4]
    5036:	006b      	lsls	r3, r5, #1
    5038:	4d39      	ldr	r5, [pc, #228]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    503a:	405d      	eors	r5, r3
    503c:	464b      	mov	r3, r9
    503e:	005b      	lsls	r3, r3, #1
    5040:	469a      	mov	sl, r3
    5042:	464b      	mov	r3, r9
    5044:	b2ad      	uxth	r5, r5
    5046:	041b      	lsls	r3, r3, #16
    5048:	d501      	bpl.n	504e <bloomFilterAddressCheck+0x316>
    504a:	f000 fda0 	bl	5b8e <bloomFilterAddressCheck+0xe56>
    504e:	4653      	mov	r3, sl
    5050:	466d      	mov	r5, sp
    5052:	80ab      	strh	r3, [r5, #4]
    5054:	88ad      	ldrh	r5, [r5, #4]
    5056:	006b      	lsls	r3, r5, #1
    5058:	4d31      	ldr	r5, [pc, #196]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    505a:	405d      	eors	r5, r3
    505c:	4653      	mov	r3, sl
    505e:	005b      	lsls	r3, r3, #1
    5060:	4699      	mov	r9, r3
    5062:	4653      	mov	r3, sl
    5064:	b2ad      	uxth	r5, r5
    5066:	041b      	lsls	r3, r3, #16
    5068:	d501      	bpl.n	506e <bloomFilterAddressCheck+0x336>
    506a:	f000 fd93 	bl	5b94 <bloomFilterAddressCheck+0xe5c>
    506e:	464b      	mov	r3, r9
    5070:	466d      	mov	r5, sp
    5072:	80ab      	strh	r3, [r5, #4]
    5074:	88ad      	ldrh	r5, [r5, #4]
    5076:	006b      	lsls	r3, r5, #1
    5078:	4d29      	ldr	r5, [pc, #164]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    507a:	405d      	eors	r5, r3
    507c:	464b      	mov	r3, r9
    507e:	005b      	lsls	r3, r3, #1
    5080:	469a      	mov	sl, r3
    5082:	464b      	mov	r3, r9
    5084:	b2ad      	uxth	r5, r5
    5086:	041b      	lsls	r3, r3, #16
    5088:	d501      	bpl.n	508e <bloomFilterAddressCheck+0x356>
    508a:	f000 fd86 	bl	5b9a <bloomFilterAddressCheck+0xe62>
    508e:	4653      	mov	r3, sl
    5090:	466d      	mov	r5, sp
    5092:	80ab      	strh	r3, [r5, #4]
    5094:	88ad      	ldrh	r5, [r5, #4]
    5096:	006b      	lsls	r3, r5, #1
    5098:	4d21      	ldr	r5, [pc, #132]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    509a:	405d      	eors	r5, r3
    509c:	b2ab      	uxth	r3, r5
    509e:	2504      	movs	r5, #4
    50a0:	5755      	ldrsb	r5, [r2, r5]
    50a2:	4699      	mov	r9, r3
    50a4:	022b      	lsls	r3, r5, #8
    50a6:	469b      	mov	fp, r3
    50a8:	4653      	mov	r3, sl
    50aa:	005d      	lsls	r5, r3, #1
    50ac:	041b      	lsls	r3, r3, #16
    50ae:	d501      	bpl.n	50b4 <bloomFilterAddressCheck+0x37c>
    50b0:	f000 fd76 	bl	5ba0 <bloomFilterAddressCheck+0xe68>
    50b4:	465b      	mov	r3, fp
    50b6:	405d      	eors	r5, r3
    50b8:	b22b      	sxth	r3, r5
    50ba:	466d      	mov	r5, sp
    50bc:	4699      	mov	r9, r3
    50be:	80ab      	strh	r3, [r5, #4]
    50c0:	4b17      	ldr	r3, [pc, #92]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    50c2:	88ad      	ldrh	r5, [r5, #4]
    50c4:	001f      	movs	r7, r3
    50c6:	006d      	lsls	r5, r5, #1
    50c8:	406f      	eors	r7, r5
    50ca:	1c3b      	adds	r3, r7, #0
    50cc:	466f      	mov	r7, sp
    50ce:	80bb      	strh	r3, [r7, #4]
    50d0:	88bb      	ldrh	r3, [r7, #4]
    50d2:	469a      	mov	sl, r3
    50d4:	464b      	mov	r3, r9
    50d6:	2b00      	cmp	r3, #0
    50d8:	da01      	bge.n	50de <bloomFilterAddressCheck+0x3a6>
    50da:	f000 fd64 	bl	5ba6 <bloomFilterAddressCheck+0xe6e>
    50de:	b2ab      	uxth	r3, r5
    50e0:	005b      	lsls	r3, r3, #1
    50e2:	469a      	mov	sl, r3
    50e4:	4657      	mov	r7, sl
    50e6:	4b0e      	ldr	r3, [pc, #56]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    50e8:	405f      	eors	r7, r3
    50ea:	1c3b      	adds	r3, r7, #0
    50ec:	466f      	mov	r7, sp
    50ee:	80bb      	strh	r3, [r7, #4]
    50f0:	88bb      	ldrh	r3, [r7, #4]
    50f2:	469a      	mov	sl, r3
    50f4:	006b      	lsls	r3, r5, #1
    50f6:	4699      	mov	r9, r3
    50f8:	042b      	lsls	r3, r5, #16
    50fa:	d501      	bpl.n	5100 <bloomFilterAddressCheck+0x3c8>
    50fc:	f000 fd56 	bl	5bac <bloomFilterAddressCheck+0xe74>
    5100:	464b      	mov	r3, r9
    5102:	466d      	mov	r5, sp
    5104:	80ab      	strh	r3, [r5, #4]
    5106:	88ad      	ldrh	r5, [r5, #4]
    5108:	006b      	lsls	r3, r5, #1
    510a:	4d05      	ldr	r5, [pc, #20]	; (5120 <bloomFilterAddressCheck+0x3e8>)
    510c:	405d      	eors	r5, r3
    510e:	464b      	mov	r3, r9
    5110:	005b      	lsls	r3, r3, #1
    5112:	469a      	mov	sl, r3
    5114:	464b      	mov	r3, r9
    5116:	b2ad      	uxth	r5, r5
    5118:	e004      	b.n	5124 <bloomFilterAddressCheck+0x3ec>
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	2000004b 	.word	0x2000004b
    5120:	00001021 	.word	0x00001021
    5124:	041b      	lsls	r3, r3, #16
    5126:	d501      	bpl.n	512c <bloomFilterAddressCheck+0x3f4>
    5128:	f000 fd43 	bl	5bb2 <bloomFilterAddressCheck+0xe7a>
    512c:	4653      	mov	r3, sl
    512e:	466d      	mov	r5, sp
    5130:	80ab      	strh	r3, [r5, #4]
    5132:	88ad      	ldrh	r5, [r5, #4]
    5134:	006b      	lsls	r3, r5, #1
    5136:	4de9      	ldr	r5, [pc, #932]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    5138:	405d      	eors	r5, r3
    513a:	4653      	mov	r3, sl
    513c:	005b      	lsls	r3, r3, #1
    513e:	4699      	mov	r9, r3
    5140:	4653      	mov	r3, sl
    5142:	b2ad      	uxth	r5, r5
    5144:	041b      	lsls	r3, r3, #16
    5146:	d501      	bpl.n	514c <bloomFilterAddressCheck+0x414>
    5148:	f000 fd36 	bl	5bb8 <bloomFilterAddressCheck+0xe80>
    514c:	464b      	mov	r3, r9
    514e:	466d      	mov	r5, sp
    5150:	80ab      	strh	r3, [r5, #4]
    5152:	88ad      	ldrh	r5, [r5, #4]
    5154:	006b      	lsls	r3, r5, #1
    5156:	4de1      	ldr	r5, [pc, #900]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    5158:	405d      	eors	r5, r3
    515a:	464b      	mov	r3, r9
    515c:	005b      	lsls	r3, r3, #1
    515e:	469a      	mov	sl, r3
    5160:	464b      	mov	r3, r9
    5162:	b2ad      	uxth	r5, r5
    5164:	041b      	lsls	r3, r3, #16
    5166:	d501      	bpl.n	516c <bloomFilterAddressCheck+0x434>
    5168:	f000 fd29 	bl	5bbe <bloomFilterAddressCheck+0xe86>
    516c:	4653      	mov	r3, sl
    516e:	466d      	mov	r5, sp
    5170:	80ab      	strh	r3, [r5, #4]
    5172:	88ad      	ldrh	r5, [r5, #4]
    5174:	006b      	lsls	r3, r5, #1
    5176:	4dd9      	ldr	r5, [pc, #868]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    5178:	405d      	eors	r5, r3
    517a:	4653      	mov	r3, sl
    517c:	005b      	lsls	r3, r3, #1
    517e:	4699      	mov	r9, r3
    5180:	4653      	mov	r3, sl
    5182:	b2ad      	uxth	r5, r5
    5184:	041b      	lsls	r3, r3, #16
    5186:	d501      	bpl.n	518c <bloomFilterAddressCheck+0x454>
    5188:	f000 fd1c 	bl	5bc4 <bloomFilterAddressCheck+0xe8c>
    518c:	464b      	mov	r3, r9
    518e:	466d      	mov	r5, sp
    5190:	80ab      	strh	r3, [r5, #4]
    5192:	88ad      	ldrh	r5, [r5, #4]
    5194:	006b      	lsls	r3, r5, #1
    5196:	4dd1      	ldr	r5, [pc, #836]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    5198:	405d      	eors	r5, r3
    519a:	464b      	mov	r3, r9
    519c:	005b      	lsls	r3, r3, #1
    519e:	469a      	mov	sl, r3
    51a0:	464b      	mov	r3, r9
    51a2:	b2ad      	uxth	r5, r5
    51a4:	041b      	lsls	r3, r3, #16
    51a6:	d501      	bpl.n	51ac <bloomFilterAddressCheck+0x474>
    51a8:	f000 fd0f 	bl	5bca <bloomFilterAddressCheck+0xe92>
    51ac:	4653      	mov	r3, sl
    51ae:	466d      	mov	r5, sp
    51b0:	80ab      	strh	r3, [r5, #4]
    51b2:	88ad      	ldrh	r5, [r5, #4]
    51b4:	006b      	lsls	r3, r5, #1
    51b6:	4dc9      	ldr	r5, [pc, #804]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    51b8:	405d      	eors	r5, r3
    51ba:	b2ab      	uxth	r3, r5
    51bc:	2505      	movs	r5, #5
    51be:	5755      	ldrsb	r5, [r2, r5]
    51c0:	4699      	mov	r9, r3
    51c2:	022b      	lsls	r3, r5, #8
    51c4:	9301      	str	r3, [sp, #4]
    51c6:	4653      	mov	r3, sl
    51c8:	005d      	lsls	r5, r3, #1
    51ca:	041b      	lsls	r3, r3, #16
    51cc:	d501      	bpl.n	51d2 <bloomFilterAddressCheck+0x49a>
    51ce:	f000 fcff 	bl	5bd0 <bloomFilterAddressCheck+0xe98>
    51d2:	9b01      	ldr	r3, [sp, #4]
    51d4:	405d      	eors	r5, r3
    51d6:	b22b      	sxth	r3, r5
    51d8:	466d      	mov	r5, sp
    51da:	4699      	mov	r9, r3
    51dc:	812b      	strh	r3, [r5, #8]
    51de:	4bbf      	ldr	r3, [pc, #764]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    51e0:	892d      	ldrh	r5, [r5, #8]
    51e2:	001f      	movs	r7, r3
    51e4:	006d      	lsls	r5, r5, #1
    51e6:	406f      	eors	r7, r5
    51e8:	1c3b      	adds	r3, r7, #0
    51ea:	466f      	mov	r7, sp
    51ec:	813b      	strh	r3, [r7, #8]
    51ee:	893b      	ldrh	r3, [r7, #8]
    51f0:	469a      	mov	sl, r3
    51f2:	464b      	mov	r3, r9
    51f4:	2b00      	cmp	r3, #0
    51f6:	da01      	bge.n	51fc <bloomFilterAddressCheck+0x4c4>
    51f8:	f000 fced 	bl	5bd6 <bloomFilterAddressCheck+0xe9e>
    51fc:	b2ab      	uxth	r3, r5
    51fe:	005b      	lsls	r3, r3, #1
    5200:	469a      	mov	sl, r3
    5202:	4657      	mov	r7, sl
    5204:	4bb5      	ldr	r3, [pc, #724]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    5206:	405f      	eors	r7, r3
    5208:	1c3b      	adds	r3, r7, #0
    520a:	466f      	mov	r7, sp
    520c:	813b      	strh	r3, [r7, #8]
    520e:	893b      	ldrh	r3, [r7, #8]
    5210:	469a      	mov	sl, r3
    5212:	006b      	lsls	r3, r5, #1
    5214:	4699      	mov	r9, r3
    5216:	042b      	lsls	r3, r5, #16
    5218:	d501      	bpl.n	521e <bloomFilterAddressCheck+0x4e6>
    521a:	f000 fcdf 	bl	5bdc <bloomFilterAddressCheck+0xea4>
    521e:	464b      	mov	r3, r9
    5220:	466d      	mov	r5, sp
    5222:	812b      	strh	r3, [r5, #8]
    5224:	892d      	ldrh	r5, [r5, #8]
    5226:	006b      	lsls	r3, r5, #1
    5228:	4dac      	ldr	r5, [pc, #688]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    522a:	405d      	eors	r5, r3
    522c:	464b      	mov	r3, r9
    522e:	005b      	lsls	r3, r3, #1
    5230:	469a      	mov	sl, r3
    5232:	464b      	mov	r3, r9
    5234:	b2ad      	uxth	r5, r5
    5236:	041b      	lsls	r3, r3, #16
    5238:	d501      	bpl.n	523e <bloomFilterAddressCheck+0x506>
    523a:	f000 fcd2 	bl	5be2 <bloomFilterAddressCheck+0xeaa>
    523e:	4653      	mov	r3, sl
    5240:	466d      	mov	r5, sp
    5242:	812b      	strh	r3, [r5, #8]
    5244:	892d      	ldrh	r5, [r5, #8]
    5246:	006b      	lsls	r3, r5, #1
    5248:	4da4      	ldr	r5, [pc, #656]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    524a:	405d      	eors	r5, r3
    524c:	4653      	mov	r3, sl
    524e:	005b      	lsls	r3, r3, #1
    5250:	4699      	mov	r9, r3
    5252:	4653      	mov	r3, sl
    5254:	b2ad      	uxth	r5, r5
    5256:	041b      	lsls	r3, r3, #16
    5258:	d501      	bpl.n	525e <bloomFilterAddressCheck+0x526>
    525a:	f000 fcc5 	bl	5be8 <bloomFilterAddressCheck+0xeb0>
    525e:	464b      	mov	r3, r9
    5260:	466d      	mov	r5, sp
    5262:	812b      	strh	r3, [r5, #8]
    5264:	892d      	ldrh	r5, [r5, #8]
    5266:	006b      	lsls	r3, r5, #1
    5268:	4d9c      	ldr	r5, [pc, #624]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    526a:	405d      	eors	r5, r3
    526c:	464b      	mov	r3, r9
    526e:	005b      	lsls	r3, r3, #1
    5270:	469a      	mov	sl, r3
    5272:	464b      	mov	r3, r9
    5274:	b2ad      	uxth	r5, r5
    5276:	041b      	lsls	r3, r3, #16
    5278:	d501      	bpl.n	527e <bloomFilterAddressCheck+0x546>
    527a:	f000 fcb8 	bl	5bee <bloomFilterAddressCheck+0xeb6>
    527e:	4653      	mov	r3, sl
    5280:	466d      	mov	r5, sp
    5282:	812b      	strh	r3, [r5, #8]
    5284:	892d      	ldrh	r5, [r5, #8]
    5286:	006b      	lsls	r3, r5, #1
    5288:	4d94      	ldr	r5, [pc, #592]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    528a:	405d      	eors	r5, r3
    528c:	4653      	mov	r3, sl
    528e:	005b      	lsls	r3, r3, #1
    5290:	4699      	mov	r9, r3
    5292:	4653      	mov	r3, sl
    5294:	b2ad      	uxth	r5, r5
    5296:	041b      	lsls	r3, r3, #16
    5298:	d501      	bpl.n	529e <bloomFilterAddressCheck+0x566>
    529a:	f000 fcab 	bl	5bf4 <bloomFilterAddressCheck+0xebc>
    529e:	464b      	mov	r3, r9
    52a0:	466d      	mov	r5, sp
    52a2:	812b      	strh	r3, [r5, #8]
    52a4:	892d      	ldrh	r5, [r5, #8]
    52a6:	006b      	lsls	r3, r5, #1
    52a8:	4d8c      	ldr	r5, [pc, #560]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    52aa:	405d      	eors	r5, r3
    52ac:	464b      	mov	r3, r9
    52ae:	005b      	lsls	r3, r3, #1
    52b0:	469a      	mov	sl, r3
    52b2:	464b      	mov	r3, r9
    52b4:	b2ad      	uxth	r5, r5
    52b6:	041b      	lsls	r3, r3, #16
    52b8:	d501      	bpl.n	52be <bloomFilterAddressCheck+0x586>
    52ba:	f000 fc9e 	bl	5bfa <bloomFilterAddressCheck+0xec2>
    52be:	4653      	mov	r3, sl
    52c0:	466d      	mov	r5, sp
    52c2:	812b      	strh	r3, [r5, #8]
    52c4:	892d      	ldrh	r5, [r5, #8]
    52c6:	006b      	lsls	r3, r5, #1
    52c8:	4d84      	ldr	r5, [pc, #528]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    52ca:	405d      	eors	r5, r3
    52cc:	b2ab      	uxth	r3, r5
    52ce:	2506      	movs	r5, #6
    52d0:	5755      	ldrsb	r5, [r2, r5]
    52d2:	4699      	mov	r9, r3
    52d4:	022b      	lsls	r3, r5, #8
    52d6:	9302      	str	r3, [sp, #8]
    52d8:	4653      	mov	r3, sl
    52da:	005d      	lsls	r5, r3, #1
    52dc:	041b      	lsls	r3, r3, #16
    52de:	d501      	bpl.n	52e4 <bloomFilterAddressCheck+0x5ac>
    52e0:	f000 fc8e 	bl	5c00 <bloomFilterAddressCheck+0xec8>
    52e4:	9b02      	ldr	r3, [sp, #8]
    52e6:	405d      	eors	r5, r3
    52e8:	b22b      	sxth	r3, r5
    52ea:	466d      	mov	r5, sp
    52ec:	4699      	mov	r9, r3
    52ee:	82ab      	strh	r3, [r5, #20]
    52f0:	4b7a      	ldr	r3, [pc, #488]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    52f2:	8aad      	ldrh	r5, [r5, #20]
    52f4:	001f      	movs	r7, r3
    52f6:	006d      	lsls	r5, r5, #1
    52f8:	406f      	eors	r7, r5
    52fa:	1c3b      	adds	r3, r7, #0
    52fc:	466f      	mov	r7, sp
    52fe:	82bb      	strh	r3, [r7, #20]
    5300:	8abb      	ldrh	r3, [r7, #20]
    5302:	469a      	mov	sl, r3
    5304:	464b      	mov	r3, r9
    5306:	2b00      	cmp	r3, #0
    5308:	da01      	bge.n	530e <bloomFilterAddressCheck+0x5d6>
    530a:	f000 fc7c 	bl	5c06 <bloomFilterAddressCheck+0xece>
    530e:	b2ab      	uxth	r3, r5
    5310:	005b      	lsls	r3, r3, #1
    5312:	469a      	mov	sl, r3
    5314:	4657      	mov	r7, sl
    5316:	4b71      	ldr	r3, [pc, #452]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    5318:	405f      	eors	r7, r3
    531a:	1c3b      	adds	r3, r7, #0
    531c:	466f      	mov	r7, sp
    531e:	82bb      	strh	r3, [r7, #20]
    5320:	8abb      	ldrh	r3, [r7, #20]
    5322:	4699      	mov	r9, r3
    5324:	006b      	lsls	r3, r5, #1
    5326:	469a      	mov	sl, r3
    5328:	042b      	lsls	r3, r5, #16
    532a:	d501      	bpl.n	5330 <bloomFilterAddressCheck+0x5f8>
    532c:	f000 fc6e 	bl	5c0c <bloomFilterAddressCheck+0xed4>
    5330:	4653      	mov	r3, sl
    5332:	466d      	mov	r5, sp
    5334:	82ab      	strh	r3, [r5, #20]
    5336:	8aad      	ldrh	r5, [r5, #20]
    5338:	006b      	lsls	r3, r5, #1
    533a:	4d68      	ldr	r5, [pc, #416]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    533c:	405d      	eors	r5, r3
    533e:	4653      	mov	r3, sl
    5340:	005b      	lsls	r3, r3, #1
    5342:	4699      	mov	r9, r3
    5344:	4653      	mov	r3, sl
    5346:	b2ad      	uxth	r5, r5
    5348:	041b      	lsls	r3, r3, #16
    534a:	d501      	bpl.n	5350 <bloomFilterAddressCheck+0x618>
    534c:	f000 fc61 	bl	5c12 <bloomFilterAddressCheck+0xeda>
    5350:	464b      	mov	r3, r9
    5352:	466d      	mov	r5, sp
    5354:	82ab      	strh	r3, [r5, #20]
    5356:	8aad      	ldrh	r5, [r5, #20]
    5358:	006b      	lsls	r3, r5, #1
    535a:	4d60      	ldr	r5, [pc, #384]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    535c:	405d      	eors	r5, r3
    535e:	464b      	mov	r3, r9
    5360:	005b      	lsls	r3, r3, #1
    5362:	469a      	mov	sl, r3
    5364:	464b      	mov	r3, r9
    5366:	b2ad      	uxth	r5, r5
    5368:	041b      	lsls	r3, r3, #16
    536a:	d501      	bpl.n	5370 <bloomFilterAddressCheck+0x638>
    536c:	f000 fc54 	bl	5c18 <bloomFilterAddressCheck+0xee0>
    5370:	4653      	mov	r3, sl
    5372:	466d      	mov	r5, sp
    5374:	82ab      	strh	r3, [r5, #20]
    5376:	8aad      	ldrh	r5, [r5, #20]
    5378:	006b      	lsls	r3, r5, #1
    537a:	4d58      	ldr	r5, [pc, #352]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    537c:	405d      	eors	r5, r3
    537e:	4653      	mov	r3, sl
    5380:	005b      	lsls	r3, r3, #1
    5382:	4699      	mov	r9, r3
    5384:	4653      	mov	r3, sl
    5386:	b2ad      	uxth	r5, r5
    5388:	041b      	lsls	r3, r3, #16
    538a:	d501      	bpl.n	5390 <bloomFilterAddressCheck+0x658>
    538c:	f000 fc47 	bl	5c1e <bloomFilterAddressCheck+0xee6>
    5390:	464b      	mov	r3, r9
    5392:	466d      	mov	r5, sp
    5394:	82ab      	strh	r3, [r5, #20]
    5396:	8aad      	ldrh	r5, [r5, #20]
    5398:	006b      	lsls	r3, r5, #1
    539a:	4d50      	ldr	r5, [pc, #320]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    539c:	405d      	eors	r5, r3
    539e:	464b      	mov	r3, r9
    53a0:	005b      	lsls	r3, r3, #1
    53a2:	469a      	mov	sl, r3
    53a4:	464b      	mov	r3, r9
    53a6:	b2ad      	uxth	r5, r5
    53a8:	041b      	lsls	r3, r3, #16
    53aa:	d501      	bpl.n	53b0 <bloomFilterAddressCheck+0x678>
    53ac:	f000 fc3a 	bl	5c24 <bloomFilterAddressCheck+0xeec>
    53b0:	4653      	mov	r3, sl
    53b2:	466d      	mov	r5, sp
    53b4:	82ab      	strh	r3, [r5, #20]
    53b6:	8aad      	ldrh	r5, [r5, #20]
    53b8:	006b      	lsls	r3, r5, #1
    53ba:	4d48      	ldr	r5, [pc, #288]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    53bc:	405d      	eors	r5, r3
    53be:	4653      	mov	r3, sl
    53c0:	005b      	lsls	r3, r3, #1
    53c2:	4699      	mov	r9, r3
    53c4:	4653      	mov	r3, sl
    53c6:	b2ad      	uxth	r5, r5
    53c8:	041b      	lsls	r3, r3, #16
    53ca:	d501      	bpl.n	53d0 <bloomFilterAddressCheck+0x698>
    53cc:	f000 fc2d 	bl	5c2a <bloomFilterAddressCheck+0xef2>
    53d0:	464b      	mov	r3, r9
    53d2:	466d      	mov	r5, sp
    53d4:	82ab      	strh	r3, [r5, #20]
    53d6:	8aad      	ldrh	r5, [r5, #20]
    53d8:	79d2      	ldrb	r2, [r2, #7]
    53da:	006b      	lsls	r3, r5, #1
    53dc:	4d3f      	ldr	r5, [pc, #252]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    53de:	b252      	sxtb	r2, r2
    53e0:	405d      	eors	r5, r3
    53e2:	0213      	lsls	r3, r2, #8
    53e4:	469a      	mov	sl, r3
    53e6:	464b      	mov	r3, r9
    53e8:	b2ad      	uxth	r5, r5
    53ea:	005a      	lsls	r2, r3, #1
    53ec:	041b      	lsls	r3, r3, #16
    53ee:	d501      	bpl.n	53f4 <bloomFilterAddressCheck+0x6bc>
    53f0:	f000 fc1e 	bl	5c30 <bloomFilterAddressCheck+0xef8>
    53f4:	4653      	mov	r3, sl
    53f6:	405a      	eors	r2, r3
    53f8:	4b38      	ldr	r3, [pc, #224]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    53fa:	b212      	sxth	r2, r2
    53fc:	001f      	movs	r7, r3
    53fe:	b295      	uxth	r5, r2
    5400:	006d      	lsls	r5, r5, #1
    5402:	406f      	eors	r7, r5
    5404:	1c3b      	adds	r3, r7, #0
    5406:	466f      	mov	r7, sp
    5408:	82bb      	strh	r3, [r7, #20]
    540a:	8abb      	ldrh	r3, [r7, #20]
    540c:	b2ad      	uxth	r5, r5
    540e:	2a00      	cmp	r2, #0
    5410:	da00      	bge.n	5414 <bloomFilterAddressCheck+0x6dc>
    5412:	e30e      	b.n	5a32 <bloomFilterAddressCheck+0xcfa>
    5414:	1c2a      	adds	r2, r5, #0
    5416:	466f      	mov	r7, sp
    5418:	b295      	uxth	r5, r2
    541a:	006b      	lsls	r3, r5, #1
    541c:	4d2f      	ldr	r5, [pc, #188]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    541e:	405d      	eors	r5, r3
    5420:	0053      	lsls	r3, r2, #1
    5422:	82bb      	strh	r3, [r7, #20]
    5424:	8abb      	ldrh	r3, [r7, #20]
    5426:	b2ad      	uxth	r5, r5
    5428:	4699      	mov	r9, r3
    542a:	0413      	lsls	r3, r2, #16
    542c:	d501      	bpl.n	5432 <bloomFilterAddressCheck+0x6fa>
    542e:	f000 fcb4 	bl	5d9a <bloomFilterAddressCheck+0x1062>
    5432:	464a      	mov	r2, r9
    5434:	466f      	mov	r7, sp
    5436:	b295      	uxth	r5, r2
    5438:	006b      	lsls	r3, r5, #1
    543a:	4d28      	ldr	r5, [pc, #160]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    543c:	405d      	eors	r5, r3
    543e:	0053      	lsls	r3, r2, #1
    5440:	82bb      	strh	r3, [r7, #20]
    5442:	8abb      	ldrh	r3, [r7, #20]
    5444:	b2ad      	uxth	r5, r5
    5446:	4699      	mov	r9, r3
    5448:	0413      	lsls	r3, r2, #16
    544a:	d400      	bmi.n	544e <bloomFilterAddressCheck+0x716>
    544c:	464d      	mov	r5, r9
    544e:	466f      	mov	r7, sp
    5450:	b2aa      	uxth	r2, r5
    5452:	0053      	lsls	r3, r2, #1
    5454:	4a21      	ldr	r2, [pc, #132]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    5456:	405a      	eors	r2, r3
    5458:	006b      	lsls	r3, r5, #1
    545a:	82bb      	strh	r3, [r7, #20]
    545c:	8abb      	ldrh	r3, [r7, #20]
    545e:	b292      	uxth	r2, r2
    5460:	4699      	mov	r9, r3
    5462:	042b      	lsls	r3, r5, #16
    5464:	d400      	bmi.n	5468 <bloomFilterAddressCheck+0x730>
    5466:	464a      	mov	r2, r9
    5468:	466f      	mov	r7, sp
    546a:	b295      	uxth	r5, r2
    546c:	006b      	lsls	r3, r5, #1
    546e:	4d1b      	ldr	r5, [pc, #108]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    5470:	405d      	eors	r5, r3
    5472:	0053      	lsls	r3, r2, #1
    5474:	82bb      	strh	r3, [r7, #20]
    5476:	8abb      	ldrh	r3, [r7, #20]
    5478:	b2ad      	uxth	r5, r5
    547a:	4699      	mov	r9, r3
    547c:	0413      	lsls	r3, r2, #16
    547e:	d400      	bmi.n	5482 <bloomFilterAddressCheck+0x74a>
    5480:	464d      	mov	r5, r9
    5482:	466f      	mov	r7, sp
    5484:	b2aa      	uxth	r2, r5
    5486:	0053      	lsls	r3, r2, #1
    5488:	4a14      	ldr	r2, [pc, #80]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    548a:	405a      	eors	r2, r3
    548c:	006b      	lsls	r3, r5, #1
    548e:	82bb      	strh	r3, [r7, #20]
    5490:	8abb      	ldrh	r3, [r7, #20]
    5492:	b292      	uxth	r2, r2
    5494:	4699      	mov	r9, r3
    5496:	042b      	lsls	r3, r5, #16
    5498:	d400      	bmi.n	549c <bloomFilterAddressCheck+0x764>
    549a:	464a      	mov	r2, r9
    549c:	b295      	uxth	r5, r2
    549e:	006b      	lsls	r3, r5, #1
    54a0:	4d0e      	ldr	r5, [pc, #56]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    54a2:	405d      	eors	r5, r3
    54a4:	b2ab      	uxth	r3, r5
    54a6:	0055      	lsls	r5, r2, #1
    54a8:	4699      	mov	r9, r3
    54aa:	b2ad      	uxth	r5, r5
    54ac:	0413      	lsls	r3, r2, #16
    54ae:	d501      	bpl.n	54b4 <bloomFilterAddressCheck+0x77c>
    54b0:	f000 fc70 	bl	5d94 <bloomFilterAddressCheck+0x105c>
    54b4:	1c2a      	adds	r2, r5, #0
    54b6:	b295      	uxth	r5, r2
    54b8:	b213      	sxth	r3, r2
    54ba:	001f      	movs	r7, r3
    54bc:	006b      	lsls	r3, r5, #1
    54be:	4d07      	ldr	r5, [pc, #28]	; (54dc <bloomFilterAddressCheck+0x7a4>)
    54c0:	0052      	lsls	r2, r2, #1
    54c2:	405d      	eors	r5, r3
    54c4:	b2ab      	uxth	r3, r5
    54c6:	9305      	str	r3, [sp, #20]
    54c8:	b293      	uxth	r3, r2
    54ca:	4699      	mov	r9, r3
    54cc:	4663      	mov	r3, ip
    54ce:	4a04      	ldr	r2, [pc, #16]	; (54e0 <bloomFilterAddressCheck+0x7a8>)
    54d0:	4645      	mov	r5, r8
    54d2:	405a      	eors	r2, r3
    54d4:	466b      	mov	r3, sp
    54d6:	b292      	uxth	r2, r2
    54d8:	8a1b      	ldrh	r3, [r3, #16]
    54da:	e003      	b.n	54e4 <bloomFilterAddressCheck+0x7ac>
    54dc:	00001021 	.word	0x00001021
    54e0:	ffff8005 	.word	0xffff8005
    54e4:	2d00      	cmp	r5, #0
    54e6:	da01      	bge.n	54ec <bloomFilterAddressCheck+0x7b4>
    54e8:	f000 fc51 	bl	5d8e <bloomFilterAddressCheck+0x1056>
    54ec:	b29d      	uxth	r5, r3
    54ee:	4ae9      	ldr	r2, [pc, #932]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    54f0:	006d      	lsls	r5, r5, #1
    54f2:	406a      	eors	r2, r5
    54f4:	b212      	sxth	r2, r2
    54f6:	b295      	uxth	r5, r2
    54f8:	005a      	lsls	r2, r3, #1
    54fa:	b292      	uxth	r2, r2
    54fc:	041b      	lsls	r3, r3, #16
    54fe:	d501      	bpl.n	5504 <bloomFilterAddressCheck+0x7cc>
    5500:	f000 fc42 	bl	5d88 <bloomFilterAddressCheck+0x1050>
    5504:	4be3      	ldr	r3, [pc, #908]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5506:	b295      	uxth	r5, r2
    5508:	006d      	lsls	r5, r5, #1
    550a:	405d      	eors	r5, r3
    550c:	0053      	lsls	r3, r2, #1
    550e:	b2ad      	uxth	r5, r5
    5510:	b29b      	uxth	r3, r3
    5512:	0412      	lsls	r2, r2, #16
    5514:	d501      	bpl.n	551a <bloomFilterAddressCheck+0x7e2>
    5516:	f000 fc34 	bl	5d82 <bloomFilterAddressCheck+0x104a>
    551a:	4ade      	ldr	r2, [pc, #888]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    551c:	b29d      	uxth	r5, r3
    551e:	006d      	lsls	r5, r5, #1
    5520:	4055      	eors	r5, r2
    5522:	005a      	lsls	r2, r3, #1
    5524:	b2ad      	uxth	r5, r5
    5526:	b292      	uxth	r2, r2
    5528:	041b      	lsls	r3, r3, #16
    552a:	d501      	bpl.n	5530 <bloomFilterAddressCheck+0x7f8>
    552c:	f000 fc26 	bl	5d7c <bloomFilterAddressCheck+0x1044>
    5530:	4bd8      	ldr	r3, [pc, #864]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5532:	b295      	uxth	r5, r2
    5534:	006d      	lsls	r5, r5, #1
    5536:	405d      	eors	r5, r3
    5538:	0053      	lsls	r3, r2, #1
    553a:	b2ad      	uxth	r5, r5
    553c:	b29b      	uxth	r3, r3
    553e:	0412      	lsls	r2, r2, #16
    5540:	d501      	bpl.n	5546 <bloomFilterAddressCheck+0x80e>
    5542:	f000 fc18 	bl	5d76 <bloomFilterAddressCheck+0x103e>
    5546:	4ad3      	ldr	r2, [pc, #844]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5548:	b29d      	uxth	r5, r3
    554a:	006d      	lsls	r5, r5, #1
    554c:	4055      	eors	r5, r2
    554e:	005a      	lsls	r2, r3, #1
    5550:	b2ad      	uxth	r5, r5
    5552:	b292      	uxth	r2, r2
    5554:	041b      	lsls	r3, r3, #16
    5556:	d501      	bpl.n	555c <bloomFilterAddressCheck+0x824>
    5558:	f000 fc0a 	bl	5d70 <bloomFilterAddressCheck+0x1038>
    555c:	4bcd      	ldr	r3, [pc, #820]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    555e:	b295      	uxth	r5, r2
    5560:	006d      	lsls	r5, r5, #1
    5562:	405d      	eors	r5, r3
    5564:	0053      	lsls	r3, r2, #1
    5566:	b2ad      	uxth	r5, r5
    5568:	b29b      	uxth	r3, r3
    556a:	0412      	lsls	r2, r2, #16
    556c:	d500      	bpl.n	5570 <bloomFilterAddressCheck+0x838>
    556e:	e3c1      	b.n	5cf4 <bloomFilterAddressCheck+0xfbc>
    5570:	b29a      	uxth	r2, r3
    5572:	4dc8      	ldr	r5, [pc, #800]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5574:	0052      	lsls	r2, r2, #1
    5576:	4055      	eors	r5, r2
    5578:	005a      	lsls	r2, r3, #1
    557a:	b2ad      	uxth	r5, r5
    557c:	b292      	uxth	r2, r2
    557e:	041b      	lsls	r3, r3, #16
    5580:	d500      	bpl.n	5584 <bloomFilterAddressCheck+0x84c>
    5582:	e3b5      	b.n	5cf0 <bloomFilterAddressCheck+0xfb8>
    5584:	4054      	eors	r4, r2
    5586:	b224      	sxth	r4, r4
    5588:	b2a2      	uxth	r2, r4
    558a:	4bc2      	ldr	r3, [pc, #776]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    558c:	0052      	lsls	r2, r2, #1
    558e:	4053      	eors	r3, r2
    5590:	b29d      	uxth	r5, r3
    5592:	b293      	uxth	r3, r2
    5594:	2c00      	cmp	r4, #0
    5596:	da00      	bge.n	559a <bloomFilterAddressCheck+0x862>
    5598:	e3a8      	b.n	5cec <bloomFilterAddressCheck+0xfb4>
    559a:	4abe      	ldr	r2, [pc, #760]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    559c:	b29c      	uxth	r4, r3
    559e:	0064      	lsls	r4, r4, #1
    55a0:	4054      	eors	r4, r2
    55a2:	005a      	lsls	r2, r3, #1
    55a4:	b2a4      	uxth	r4, r4
    55a6:	b292      	uxth	r2, r2
    55a8:	041b      	lsls	r3, r3, #16
    55aa:	d500      	bpl.n	55ae <bloomFilterAddressCheck+0x876>
    55ac:	e39c      	b.n	5ce8 <bloomFilterAddressCheck+0xfb0>
    55ae:	4bb9      	ldr	r3, [pc, #740]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    55b0:	b294      	uxth	r4, r2
    55b2:	0064      	lsls	r4, r4, #1
    55b4:	405c      	eors	r4, r3
    55b6:	0053      	lsls	r3, r2, #1
    55b8:	b2a4      	uxth	r4, r4
    55ba:	b29b      	uxth	r3, r3
    55bc:	0412      	lsls	r2, r2, #16
    55be:	d500      	bpl.n	55c2 <bloomFilterAddressCheck+0x88a>
    55c0:	e390      	b.n	5ce4 <bloomFilterAddressCheck+0xfac>
    55c2:	4ab4      	ldr	r2, [pc, #720]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    55c4:	b29c      	uxth	r4, r3
    55c6:	0064      	lsls	r4, r4, #1
    55c8:	4054      	eors	r4, r2
    55ca:	005a      	lsls	r2, r3, #1
    55cc:	b2a4      	uxth	r4, r4
    55ce:	b292      	uxth	r2, r2
    55d0:	041b      	lsls	r3, r3, #16
    55d2:	d500      	bpl.n	55d6 <bloomFilterAddressCheck+0x89e>
    55d4:	e384      	b.n	5ce0 <bloomFilterAddressCheck+0xfa8>
    55d6:	4baf      	ldr	r3, [pc, #700]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    55d8:	b294      	uxth	r4, r2
    55da:	0064      	lsls	r4, r4, #1
    55dc:	405c      	eors	r4, r3
    55de:	0053      	lsls	r3, r2, #1
    55e0:	b2a4      	uxth	r4, r4
    55e2:	b29b      	uxth	r3, r3
    55e4:	0412      	lsls	r2, r2, #16
    55e6:	d500      	bpl.n	55ea <bloomFilterAddressCheck+0x8b2>
    55e8:	e378      	b.n	5cdc <bloomFilterAddressCheck+0xfa4>
    55ea:	4aaa      	ldr	r2, [pc, #680]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    55ec:	b29c      	uxth	r4, r3
    55ee:	0064      	lsls	r4, r4, #1
    55f0:	4054      	eors	r4, r2
    55f2:	005a      	lsls	r2, r3, #1
    55f4:	b2a4      	uxth	r4, r4
    55f6:	b292      	uxth	r2, r2
    55f8:	041b      	lsls	r3, r3, #16
    55fa:	d500      	bpl.n	55fe <bloomFilterAddressCheck+0x8c6>
    55fc:	e36c      	b.n	5cd8 <bloomFilterAddressCheck+0xfa0>
    55fe:	4ba5      	ldr	r3, [pc, #660]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5600:	b294      	uxth	r4, r2
    5602:	0064      	lsls	r4, r4, #1
    5604:	405c      	eors	r4, r3
    5606:	0053      	lsls	r3, r2, #1
    5608:	b2a4      	uxth	r4, r4
    560a:	b29b      	uxth	r3, r3
    560c:	0412      	lsls	r2, r2, #16
    560e:	d500      	bpl.n	5612 <bloomFilterAddressCheck+0x8da>
    5610:	e360      	b.n	5cd4 <bloomFilterAddressCheck+0xf9c>
    5612:	b29a      	uxth	r2, r3
    5614:	4c9f      	ldr	r4, [pc, #636]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5616:	0052      	lsls	r2, r2, #1
    5618:	4054      	eors	r4, r2
    561a:	005a      	lsls	r2, r3, #1
    561c:	b2a4      	uxth	r4, r4
    561e:	b292      	uxth	r2, r2
    5620:	041b      	lsls	r3, r3, #16
    5622:	d500      	bpl.n	5626 <bloomFilterAddressCheck+0x8ee>
    5624:	e354      	b.n	5cd0 <bloomFilterAddressCheck+0xf98>
    5626:	4050      	eors	r0, r2
    5628:	b200      	sxth	r0, r0
    562a:	b282      	uxth	r2, r0
    562c:	4b99      	ldr	r3, [pc, #612]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    562e:	0052      	lsls	r2, r2, #1
    5630:	4053      	eors	r3, r2
    5632:	b29c      	uxth	r4, r3
    5634:	b293      	uxth	r3, r2
    5636:	2800      	cmp	r0, #0
    5638:	da00      	bge.n	563c <bloomFilterAddressCheck+0x904>
    563a:	e347      	b.n	5ccc <bloomFilterAddressCheck+0xf94>
    563c:	4a95      	ldr	r2, [pc, #596]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    563e:	b298      	uxth	r0, r3
    5640:	0040      	lsls	r0, r0, #1
    5642:	4050      	eors	r0, r2
    5644:	005a      	lsls	r2, r3, #1
    5646:	b280      	uxth	r0, r0
    5648:	b292      	uxth	r2, r2
    564a:	041b      	lsls	r3, r3, #16
    564c:	d500      	bpl.n	5650 <bloomFilterAddressCheck+0x918>
    564e:	e33b      	b.n	5cc8 <bloomFilterAddressCheck+0xf90>
    5650:	4b90      	ldr	r3, [pc, #576]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5652:	b290      	uxth	r0, r2
    5654:	0040      	lsls	r0, r0, #1
    5656:	4058      	eors	r0, r3
    5658:	0053      	lsls	r3, r2, #1
    565a:	b280      	uxth	r0, r0
    565c:	b29b      	uxth	r3, r3
    565e:	0412      	lsls	r2, r2, #16
    5660:	d500      	bpl.n	5664 <bloomFilterAddressCheck+0x92c>
    5662:	e32f      	b.n	5cc4 <bloomFilterAddressCheck+0xf8c>
    5664:	4a8b      	ldr	r2, [pc, #556]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5666:	b298      	uxth	r0, r3
    5668:	0040      	lsls	r0, r0, #1
    566a:	4050      	eors	r0, r2
    566c:	005a      	lsls	r2, r3, #1
    566e:	b280      	uxth	r0, r0
    5670:	b292      	uxth	r2, r2
    5672:	041b      	lsls	r3, r3, #16
    5674:	d500      	bpl.n	5678 <bloomFilterAddressCheck+0x940>
    5676:	e323      	b.n	5cc0 <bloomFilterAddressCheck+0xf88>
    5678:	4b86      	ldr	r3, [pc, #536]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    567a:	b290      	uxth	r0, r2
    567c:	0040      	lsls	r0, r0, #1
    567e:	4058      	eors	r0, r3
    5680:	0053      	lsls	r3, r2, #1
    5682:	b280      	uxth	r0, r0
    5684:	b29b      	uxth	r3, r3
    5686:	0412      	lsls	r2, r2, #16
    5688:	d500      	bpl.n	568c <bloomFilterAddressCheck+0x954>
    568a:	e317      	b.n	5cbc <bloomFilterAddressCheck+0xf84>
    568c:	4a81      	ldr	r2, [pc, #516]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    568e:	b298      	uxth	r0, r3
    5690:	0040      	lsls	r0, r0, #1
    5692:	4050      	eors	r0, r2
    5694:	005a      	lsls	r2, r3, #1
    5696:	b280      	uxth	r0, r0
    5698:	b292      	uxth	r2, r2
    569a:	041b      	lsls	r3, r3, #16
    569c:	d500      	bpl.n	56a0 <bloomFilterAddressCheck+0x968>
    569e:	e30b      	b.n	5cb8 <bloomFilterAddressCheck+0xf80>
    56a0:	4b7c      	ldr	r3, [pc, #496]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    56a2:	b290      	uxth	r0, r2
    56a4:	0040      	lsls	r0, r0, #1
    56a6:	4058      	eors	r0, r3
    56a8:	0053      	lsls	r3, r2, #1
    56aa:	b280      	uxth	r0, r0
    56ac:	b29b      	uxth	r3, r3
    56ae:	0412      	lsls	r2, r2, #16
    56b0:	d500      	bpl.n	56b4 <bloomFilterAddressCheck+0x97c>
    56b2:	e2ff      	b.n	5cb4 <bloomFilterAddressCheck+0xf7c>
    56b4:	b29a      	uxth	r2, r3
    56b6:	4877      	ldr	r0, [pc, #476]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    56b8:	0052      	lsls	r2, r2, #1
    56ba:	4050      	eors	r0, r2
    56bc:	005a      	lsls	r2, r3, #1
    56be:	b280      	uxth	r0, r0
    56c0:	b292      	uxth	r2, r2
    56c2:	041b      	lsls	r3, r3, #16
    56c4:	d500      	bpl.n	56c8 <bloomFilterAddressCheck+0x990>
    56c6:	e2f3      	b.n	5cb0 <bloomFilterAddressCheck+0xf78>
    56c8:	4051      	eors	r1, r2
    56ca:	b209      	sxth	r1, r1
    56cc:	b28b      	uxth	r3, r1
    56ce:	4a71      	ldr	r2, [pc, #452]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    56d0:	005b      	lsls	r3, r3, #1
    56d2:	405a      	eors	r2, r3
    56d4:	b292      	uxth	r2, r2
    56d6:	2900      	cmp	r1, #0
    56d8:	da00      	bge.n	56dc <bloomFilterAddressCheck+0x9a4>
    56da:	e2e7      	b.n	5cac <bloomFilterAddressCheck+0xf74>
    56dc:	4a6d      	ldr	r2, [pc, #436]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    56de:	b299      	uxth	r1, r3
    56e0:	0049      	lsls	r1, r1, #1
    56e2:	4051      	eors	r1, r2
    56e4:	b289      	uxth	r1, r1
    56e6:	005a      	lsls	r2, r3, #1
    56e8:	041b      	lsls	r3, r3, #16
    56ea:	d500      	bpl.n	56ee <bloomFilterAddressCheck+0x9b6>
    56ec:	e2dc      	b.n	5ca8 <bloomFilterAddressCheck+0xf70>
    56ee:	b291      	uxth	r1, r2
    56f0:	4b68      	ldr	r3, [pc, #416]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    56f2:	0049      	lsls	r1, r1, #1
    56f4:	404b      	eors	r3, r1
    56f6:	b29b      	uxth	r3, r3
    56f8:	0051      	lsls	r1, r2, #1
    56fa:	0412      	lsls	r2, r2, #16
    56fc:	d500      	bpl.n	5700 <bloomFilterAddressCheck+0x9c8>
    56fe:	e2d1      	b.n	5ca4 <bloomFilterAddressCheck+0xf6c>
    5700:	b28a      	uxth	r2, r1
    5702:	4b64      	ldr	r3, [pc, #400]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5704:	0052      	lsls	r2, r2, #1
    5706:	4053      	eors	r3, r2
    5708:	b29b      	uxth	r3, r3
    570a:	004a      	lsls	r2, r1, #1
    570c:	0409      	lsls	r1, r1, #16
    570e:	d500      	bpl.n	5712 <bloomFilterAddressCheck+0x9da>
    5710:	e2c6      	b.n	5ca0 <bloomFilterAddressCheck+0xf68>
    5712:	b291      	uxth	r1, r2
    5714:	4b5f      	ldr	r3, [pc, #380]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5716:	0049      	lsls	r1, r1, #1
    5718:	404b      	eors	r3, r1
    571a:	b29b      	uxth	r3, r3
    571c:	0051      	lsls	r1, r2, #1
    571e:	0412      	lsls	r2, r2, #16
    5720:	d500      	bpl.n	5724 <bloomFilterAddressCheck+0x9ec>
    5722:	e2bb      	b.n	5c9c <bloomFilterAddressCheck+0xf64>
    5724:	b28a      	uxth	r2, r1
    5726:	4b5b      	ldr	r3, [pc, #364]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5728:	0052      	lsls	r2, r2, #1
    572a:	4053      	eors	r3, r2
    572c:	b29b      	uxth	r3, r3
    572e:	004a      	lsls	r2, r1, #1
    5730:	0409      	lsls	r1, r1, #16
    5732:	d500      	bpl.n	5736 <bloomFilterAddressCheck+0x9fe>
    5734:	e2b0      	b.n	5c98 <bloomFilterAddressCheck+0xf60>
    5736:	b291      	uxth	r1, r2
    5738:	4b56      	ldr	r3, [pc, #344]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    573a:	0049      	lsls	r1, r1, #1
    573c:	404b      	eors	r3, r1
    573e:	b29b      	uxth	r3, r3
    5740:	0051      	lsls	r1, r2, #1
    5742:	0412      	lsls	r2, r2, #16
    5744:	d500      	bpl.n	5748 <bloomFilterAddressCheck+0xa10>
    5746:	e2a5      	b.n	5c94 <bloomFilterAddressCheck+0xf5c>
    5748:	b28a      	uxth	r2, r1
    574a:	4b52      	ldr	r3, [pc, #328]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    574c:	0052      	lsls	r2, r2, #1
    574e:	4053      	eors	r3, r2
    5750:	b29b      	uxth	r3, r3
    5752:	004a      	lsls	r2, r1, #1
    5754:	0409      	lsls	r1, r1, #16
    5756:	d500      	bpl.n	575a <bloomFilterAddressCheck+0xa22>
    5758:	e29a      	b.n	5c90 <bloomFilterAddressCheck+0xf58>
    575a:	465b      	mov	r3, fp
    575c:	4053      	eors	r3, r2
    575e:	b21a      	sxth	r2, r3
    5760:	b293      	uxth	r3, r2
    5762:	494c      	ldr	r1, [pc, #304]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5764:	005b      	lsls	r3, r3, #1
    5766:	4059      	eors	r1, r3
    5768:	b289      	uxth	r1, r1
    576a:	2a00      	cmp	r2, #0
    576c:	da00      	bge.n	5770 <bloomFilterAddressCheck+0xa38>
    576e:	e28d      	b.n	5c8c <bloomFilterAddressCheck+0xf54>
    5770:	b299      	uxth	r1, r3
    5772:	4a48      	ldr	r2, [pc, #288]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5774:	0049      	lsls	r1, r1, #1
    5776:	404a      	eors	r2, r1
    5778:	b292      	uxth	r2, r2
    577a:	0059      	lsls	r1, r3, #1
    577c:	041b      	lsls	r3, r3, #16
    577e:	d500      	bpl.n	5782 <bloomFilterAddressCheck+0xa4a>
    5780:	e282      	b.n	5c88 <bloomFilterAddressCheck+0xf50>
    5782:	b28a      	uxth	r2, r1
    5784:	4b43      	ldr	r3, [pc, #268]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5786:	0052      	lsls	r2, r2, #1
    5788:	4053      	eors	r3, r2
    578a:	b29b      	uxth	r3, r3
    578c:	004a      	lsls	r2, r1, #1
    578e:	0409      	lsls	r1, r1, #16
    5790:	d500      	bpl.n	5794 <bloomFilterAddressCheck+0xa5c>
    5792:	e277      	b.n	5c84 <bloomFilterAddressCheck+0xf4c>
    5794:	b291      	uxth	r1, r2
    5796:	4b3f      	ldr	r3, [pc, #252]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5798:	0049      	lsls	r1, r1, #1
    579a:	404b      	eors	r3, r1
    579c:	b29b      	uxth	r3, r3
    579e:	0051      	lsls	r1, r2, #1
    57a0:	0412      	lsls	r2, r2, #16
    57a2:	d500      	bpl.n	57a6 <bloomFilterAddressCheck+0xa6e>
    57a4:	e26c      	b.n	5c80 <bloomFilterAddressCheck+0xf48>
    57a6:	b28a      	uxth	r2, r1
    57a8:	4b3a      	ldr	r3, [pc, #232]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    57aa:	0052      	lsls	r2, r2, #1
    57ac:	4053      	eors	r3, r2
    57ae:	b29b      	uxth	r3, r3
    57b0:	004a      	lsls	r2, r1, #1
    57b2:	0409      	lsls	r1, r1, #16
    57b4:	d500      	bpl.n	57b8 <bloomFilterAddressCheck+0xa80>
    57b6:	e261      	b.n	5c7c <bloomFilterAddressCheck+0xf44>
    57b8:	b291      	uxth	r1, r2
    57ba:	4b36      	ldr	r3, [pc, #216]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    57bc:	0049      	lsls	r1, r1, #1
    57be:	404b      	eors	r3, r1
    57c0:	b29b      	uxth	r3, r3
    57c2:	0051      	lsls	r1, r2, #1
    57c4:	0412      	lsls	r2, r2, #16
    57c6:	d500      	bpl.n	57ca <bloomFilterAddressCheck+0xa92>
    57c8:	e242      	b.n	5c50 <bloomFilterAddressCheck+0xf18>
    57ca:	b28a      	uxth	r2, r1
    57cc:	4b31      	ldr	r3, [pc, #196]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    57ce:	0052      	lsls	r2, r2, #1
    57d0:	4053      	eors	r3, r2
    57d2:	b29b      	uxth	r3, r3
    57d4:	004a      	lsls	r2, r1, #1
    57d6:	0409      	lsls	r1, r1, #16
    57d8:	d500      	bpl.n	57dc <bloomFilterAddressCheck+0xaa4>
    57da:	e243      	b.n	5c64 <bloomFilterAddressCheck+0xf2c>
    57dc:	b291      	uxth	r1, r2
    57de:	4b2d      	ldr	r3, [pc, #180]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    57e0:	0049      	lsls	r1, r1, #1
    57e2:	404b      	eors	r3, r1
    57e4:	b29b      	uxth	r3, r3
    57e6:	0055      	lsls	r5, r2, #1
    57e8:	0412      	lsls	r2, r2, #16
    57ea:	d500      	bpl.n	57ee <bloomFilterAddressCheck+0xab6>
    57ec:	e244      	b.n	5c78 <bloomFilterAddressCheck+0xf40>
    57ee:	9b01      	ldr	r3, [sp, #4]
    57f0:	4a28      	ldr	r2, [pc, #160]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    57f2:	406b      	eors	r3, r5
    57f4:	b21d      	sxth	r5, r3
    57f6:	b2ab      	uxth	r3, r5
    57f8:	005b      	lsls	r3, r3, #1
    57fa:	405a      	eors	r2, r3
    57fc:	b292      	uxth	r2, r2
    57fe:	2d00      	cmp	r5, #0
    5800:	da00      	bge.n	5804 <bloomFilterAddressCheck+0xacc>
    5802:	e2a7      	b.n	5d54 <bloomFilterAddressCheck+0x101c>
    5804:	b299      	uxth	r1, r3
    5806:	4a23      	ldr	r2, [pc, #140]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5808:	0049      	lsls	r1, r1, #1
    580a:	404a      	eors	r2, r1
    580c:	b292      	uxth	r2, r2
    580e:	0059      	lsls	r1, r3, #1
    5810:	041b      	lsls	r3, r3, #16
    5812:	d500      	bpl.n	5816 <bloomFilterAddressCheck+0xade>
    5814:	e29c      	b.n	5d50 <bloomFilterAddressCheck+0x1018>
    5816:	b28a      	uxth	r2, r1
    5818:	4b1e      	ldr	r3, [pc, #120]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    581a:	0052      	lsls	r2, r2, #1
    581c:	4053      	eors	r3, r2
    581e:	b29b      	uxth	r3, r3
    5820:	004a      	lsls	r2, r1, #1
    5822:	0409      	lsls	r1, r1, #16
    5824:	d500      	bpl.n	5828 <bloomFilterAddressCheck+0xaf0>
    5826:	e291      	b.n	5d4c <bloomFilterAddressCheck+0x1014>
    5828:	b291      	uxth	r1, r2
    582a:	4b1a      	ldr	r3, [pc, #104]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    582c:	0049      	lsls	r1, r1, #1
    582e:	404b      	eors	r3, r1
    5830:	b29b      	uxth	r3, r3
    5832:	0051      	lsls	r1, r2, #1
    5834:	0412      	lsls	r2, r2, #16
    5836:	d500      	bpl.n	583a <bloomFilterAddressCheck+0xb02>
    5838:	e286      	b.n	5d48 <bloomFilterAddressCheck+0x1010>
    583a:	b28a      	uxth	r2, r1
    583c:	4b15      	ldr	r3, [pc, #84]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    583e:	0052      	lsls	r2, r2, #1
    5840:	4053      	eors	r3, r2
    5842:	b29b      	uxth	r3, r3
    5844:	004a      	lsls	r2, r1, #1
    5846:	0409      	lsls	r1, r1, #16
    5848:	d500      	bpl.n	584c <bloomFilterAddressCheck+0xb14>
    584a:	e27b      	b.n	5d44 <bloomFilterAddressCheck+0x100c>
    584c:	b291      	uxth	r1, r2
    584e:	4b11      	ldr	r3, [pc, #68]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5850:	0049      	lsls	r1, r1, #1
    5852:	404b      	eors	r3, r1
    5854:	b29b      	uxth	r3, r3
    5856:	0051      	lsls	r1, r2, #1
    5858:	0412      	lsls	r2, r2, #16
    585a:	d500      	bpl.n	585e <bloomFilterAddressCheck+0xb26>
    585c:	e270      	b.n	5d40 <bloomFilterAddressCheck+0x1008>
    585e:	b28a      	uxth	r2, r1
    5860:	4b0c      	ldr	r3, [pc, #48]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5862:	0052      	lsls	r2, r2, #1
    5864:	4053      	eors	r3, r2
    5866:	b29b      	uxth	r3, r3
    5868:	004a      	lsls	r2, r1, #1
    586a:	0409      	lsls	r1, r1, #16
    586c:	d500      	bpl.n	5870 <bloomFilterAddressCheck+0xb38>
    586e:	e265      	b.n	5d3c <bloomFilterAddressCheck+0x1004>
    5870:	b291      	uxth	r1, r2
    5872:	4b08      	ldr	r3, [pc, #32]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5874:	0049      	lsls	r1, r1, #1
    5876:	404b      	eors	r3, r1
    5878:	b29b      	uxth	r3, r3
    587a:	0055      	lsls	r5, r2, #1
    587c:	0412      	lsls	r2, r2, #16
    587e:	d500      	bpl.n	5882 <bloomFilterAddressCheck+0xb4a>
    5880:	e25a      	b.n	5d38 <bloomFilterAddressCheck+0x1000>
    5882:	9b02      	ldr	r3, [sp, #8]
    5884:	4a03      	ldr	r2, [pc, #12]	; (5894 <bloomFilterAddressCheck+0xb5c>)
    5886:	406b      	eors	r3, r5
    5888:	b21d      	sxth	r5, r3
    588a:	b2ab      	uxth	r3, r5
    588c:	005b      	lsls	r3, r3, #1
    588e:	405a      	eors	r2, r3
    5890:	b292      	uxth	r2, r2
    5892:	e001      	b.n	5898 <bloomFilterAddressCheck+0xb60>
    5894:	ffff8005 	.word	0xffff8005
    5898:	2d00      	cmp	r5, #0
    589a:	da00      	bge.n	589e <bloomFilterAddressCheck+0xb66>
    589c:	e24a      	b.n	5d34 <bloomFilterAddressCheck+0xffc>
    589e:	b299      	uxth	r1, r3
    58a0:	4ae8      	ldr	r2, [pc, #928]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    58a2:	0049      	lsls	r1, r1, #1
    58a4:	404a      	eors	r2, r1
    58a6:	b292      	uxth	r2, r2
    58a8:	0059      	lsls	r1, r3, #1
    58aa:	041b      	lsls	r3, r3, #16
    58ac:	d500      	bpl.n	58b0 <bloomFilterAddressCheck+0xb78>
    58ae:	e23f      	b.n	5d30 <bloomFilterAddressCheck+0xff8>
    58b0:	b28a      	uxth	r2, r1
    58b2:	4be4      	ldr	r3, [pc, #912]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    58b4:	0052      	lsls	r2, r2, #1
    58b6:	4053      	eors	r3, r2
    58b8:	b29b      	uxth	r3, r3
    58ba:	004a      	lsls	r2, r1, #1
    58bc:	0409      	lsls	r1, r1, #16
    58be:	d500      	bpl.n	58c2 <bloomFilterAddressCheck+0xb8a>
    58c0:	e234      	b.n	5d2c <bloomFilterAddressCheck+0xff4>
    58c2:	b291      	uxth	r1, r2
    58c4:	4bdf      	ldr	r3, [pc, #892]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    58c6:	0049      	lsls	r1, r1, #1
    58c8:	404b      	eors	r3, r1
    58ca:	b29b      	uxth	r3, r3
    58cc:	0051      	lsls	r1, r2, #1
    58ce:	0412      	lsls	r2, r2, #16
    58d0:	d500      	bpl.n	58d4 <bloomFilterAddressCheck+0xb9c>
    58d2:	e229      	b.n	5d28 <bloomFilterAddressCheck+0xff0>
    58d4:	b28a      	uxth	r2, r1
    58d6:	4bdb      	ldr	r3, [pc, #876]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    58d8:	0052      	lsls	r2, r2, #1
    58da:	4053      	eors	r3, r2
    58dc:	b29b      	uxth	r3, r3
    58de:	004a      	lsls	r2, r1, #1
    58e0:	0409      	lsls	r1, r1, #16
    58e2:	d500      	bpl.n	58e6 <bloomFilterAddressCheck+0xbae>
    58e4:	e21e      	b.n	5d24 <bloomFilterAddressCheck+0xfec>
    58e6:	b291      	uxth	r1, r2
    58e8:	4bd6      	ldr	r3, [pc, #856]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    58ea:	0049      	lsls	r1, r1, #1
    58ec:	404b      	eors	r3, r1
    58ee:	b29b      	uxth	r3, r3
    58f0:	0051      	lsls	r1, r2, #1
    58f2:	0412      	lsls	r2, r2, #16
    58f4:	d500      	bpl.n	58f8 <bloomFilterAddressCheck+0xbc0>
    58f6:	e1ff      	b.n	5cf8 <bloomFilterAddressCheck+0xfc0>
    58f8:	b28a      	uxth	r2, r1
    58fa:	4bd2      	ldr	r3, [pc, #840]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    58fc:	0052      	lsls	r2, r2, #1
    58fe:	4053      	eors	r3, r2
    5900:	b29b      	uxth	r3, r3
    5902:	0048      	lsls	r0, r1, #1
    5904:	040a      	lsls	r2, r1, #16
    5906:	d500      	bpl.n	590a <bloomFilterAddressCheck+0xbd2>
    5908:	e200      	b.n	5d0c <bloomFilterAddressCheck+0xfd4>
    590a:	b282      	uxth	r2, r0
    590c:	4bcd      	ldr	r3, [pc, #820]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    590e:	0052      	lsls	r2, r2, #1
    5910:	4053      	eors	r3, r2
    5912:	b29b      	uxth	r3, r3
    5914:	0042      	lsls	r2, r0, #1
    5916:	0401      	lsls	r1, r0, #16
    5918:	d500      	bpl.n	591c <bloomFilterAddressCheck+0xbe4>
    591a:	e201      	b.n	5d20 <bloomFilterAddressCheck+0xfe8>
    591c:	4653      	mov	r3, sl
    591e:	4053      	eors	r3, r2
    5920:	b21a      	sxth	r2, r3
    5922:	b291      	uxth	r1, r2
    5924:	4bc7      	ldr	r3, [pc, #796]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    5926:	0049      	lsls	r1, r1, #1
    5928:	404b      	eors	r3, r1
    592a:	b298      	uxth	r0, r3
    592c:	b28b      	uxth	r3, r1
    592e:	2a00      	cmp	r2, #0
    5930:	da00      	bge.n	5934 <bloomFilterAddressCheck+0xbfc>
    5932:	e21b      	b.n	5d6c <bloomFilterAddressCheck+0x1034>
    5934:	4ac3      	ldr	r2, [pc, #780]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    5936:	b299      	uxth	r1, r3
    5938:	0049      	lsls	r1, r1, #1
    593a:	4051      	eors	r1, r2
    593c:	005a      	lsls	r2, r3, #1
    593e:	b289      	uxth	r1, r1
    5940:	b292      	uxth	r2, r2
    5942:	041b      	lsls	r3, r3, #16
    5944:	d500      	bpl.n	5948 <bloomFilterAddressCheck+0xc10>
    5946:	e20f      	b.n	5d68 <bloomFilterAddressCheck+0x1030>
    5948:	4bbe      	ldr	r3, [pc, #760]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    594a:	b291      	uxth	r1, r2
    594c:	0049      	lsls	r1, r1, #1
    594e:	4059      	eors	r1, r3
    5950:	0053      	lsls	r3, r2, #1
    5952:	b289      	uxth	r1, r1
    5954:	b29b      	uxth	r3, r3
    5956:	0412      	lsls	r2, r2, #16
    5958:	d500      	bpl.n	595c <bloomFilterAddressCheck+0xc24>
    595a:	e203      	b.n	5d64 <bloomFilterAddressCheck+0x102c>
    595c:	4ab9      	ldr	r2, [pc, #740]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    595e:	b299      	uxth	r1, r3
    5960:	0049      	lsls	r1, r1, #1
    5962:	4051      	eors	r1, r2
    5964:	005a      	lsls	r2, r3, #1
    5966:	b289      	uxth	r1, r1
    5968:	b292      	uxth	r2, r2
    596a:	041b      	lsls	r3, r3, #16
    596c:	d500      	bpl.n	5970 <bloomFilterAddressCheck+0xc38>
    596e:	e1f7      	b.n	5d60 <bloomFilterAddressCheck+0x1028>
    5970:	4bb4      	ldr	r3, [pc, #720]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    5972:	b291      	uxth	r1, r2
    5974:	0049      	lsls	r1, r1, #1
    5976:	4059      	eors	r1, r3
    5978:	0053      	lsls	r3, r2, #1
    597a:	b289      	uxth	r1, r1
    597c:	b29b      	uxth	r3, r3
    597e:	0412      	lsls	r2, r2, #16
    5980:	d500      	bpl.n	5984 <bloomFilterAddressCheck+0xc4c>
    5982:	e1eb      	b.n	5d5c <bloomFilterAddressCheck+0x1024>
    5984:	4aaf      	ldr	r2, [pc, #700]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    5986:	b299      	uxth	r1, r3
    5988:	0049      	lsls	r1, r1, #1
    598a:	4051      	eors	r1, r2
    598c:	005a      	lsls	r2, r3, #1
    598e:	b289      	uxth	r1, r1
    5990:	b292      	uxth	r2, r2
    5992:	041b      	lsls	r3, r3, #16
    5994:	d500      	bpl.n	5998 <bloomFilterAddressCheck+0xc60>
    5996:	e1df      	b.n	5d58 <bloomFilterAddressCheck+0x1020>
    5998:	b293      	uxth	r3, r2
    599a:	4caa      	ldr	r4, [pc, #680]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    599c:	005b      	lsls	r3, r3, #1
    599e:	405c      	eors	r4, r3
    59a0:	b2a1      	uxth	r1, r4
    59a2:	0054      	lsls	r4, r2, #1
    59a4:	b2a4      	uxth	r4, r4
    59a6:	0413      	lsls	r3, r2, #16
    59a8:	d500      	bpl.n	59ac <bloomFilterAddressCheck+0xc74>
    59aa:	e149      	b.n	5c40 <bloomFilterAddressCheck+0xf08>
    59ac:	b223      	sxth	r3, r4
    59ae:	b2a2      	uxth	r2, r4
    59b0:	469b      	mov	fp, r3
    59b2:	4ba4      	ldr	r3, [pc, #656]	; (5c44 <bloomFilterAddressCheck+0xf0c>)
    59b4:	0052      	lsls	r2, r2, #1
    59b6:	4053      	eors	r3, r2
    59b8:	00f5      	lsls	r5, r6, #3
    59ba:	b29b      	uxth	r3, r3
    59bc:	0064      	lsls	r4, r4, #1
    59be:	3d01      	subs	r5, #1
    59c0:	4698      	mov	r8, r3
    59c2:	b2a4      	uxth	r4, r4
    59c4:	b2ed      	uxtb	r5, r5
    59c6:	2f00      	cmp	r7, #0
    59c8:	da00      	bge.n	59cc <bloomFilterAddressCheck+0xc94>
    59ca:	e136      	b.n	5c3a <bloomFilterAddressCheck+0xf02>
    59cc:	4648      	mov	r0, r9
    59ce:	4b9e      	ldr	r3, [pc, #632]	; (5c48 <bloomFilterAddressCheck+0xf10>)
    59d0:	b280      	uxth	r0, r0
    59d2:	0029      	movs	r1, r5
    59d4:	469a      	mov	sl, r3
    59d6:	4798      	blx	r3
    59d8:	465b      	mov	r3, fp
    59da:	4689      	mov	r9, r1
    59dc:	2b00      	cmp	r3, #0
    59de:	da00      	bge.n	59e2 <bloomFilterAddressCheck+0xcaa>
    59e0:	e129      	b.n	5c36 <bloomFilterAddressCheck+0xefe>
    59e2:	b2a0      	uxth	r0, r4
    59e4:	0029      	movs	r1, r5
    59e6:	47d0      	blx	sl
    59e8:	b2cb      	uxtb	r3, r1
    59ea:	08db      	lsrs	r3, r3, #3
    59ec:	9f03      	ldr	r7, [sp, #12]
    59ee:	3301      	adds	r3, #1
    59f0:	1af3      	subs	r3, r6, r3
    59f2:	466a      	mov	r2, sp
    59f4:	5cf8      	ldrb	r0, [r7, r3]
    59f6:	464b      	mov	r3, r9
    59f8:	7113      	strb	r3, [r2, #4]
    59fa:	7913      	ldrb	r3, [r2, #4]
    59fc:	2201      	movs	r2, #1
    59fe:	08db      	lsrs	r3, r3, #3
    5a00:	3301      	adds	r3, #1
    5a02:	1af6      	subs	r6, r6, r3
    5a04:	2407      	movs	r4, #7
    5a06:	464b      	mov	r3, r9
    5a08:	0015      	movs	r5, r2
    5a0a:	4023      	ands	r3, r4
    5a0c:	409d      	lsls	r5, r3
    5a0e:	5dbb      	ldrb	r3, [r7, r6]
    5a10:	421d      	tst	r5, r3
    5a12:	d006      	beq.n	5a22 <bloomFilterAddressCheck+0xcea>
    5a14:	4021      	ands	r1, r4
    5a16:	408a      	lsls	r2, r1
    5a18:	4002      	ands	r2, r0
    5a1a:	1e50      	subs	r0, r2, #1
    5a1c:	4182      	sbcs	r2, r0
    5a1e:	b2d3      	uxtb	r3, r2
    5a20:	9300      	str	r3, [sp, #0]
    5a22:	9800      	ldr	r0, [sp, #0]
    5a24:	b007      	add	sp, #28
    5a26:	bc3c      	pop	{r2, r3, r4, r5}
    5a28:	4690      	mov	r8, r2
    5a2a:	4699      	mov	r9, r3
    5a2c:	46a2      	mov	sl, r4
    5a2e:	46ab      	mov	fp, r5
    5a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a32:	1c1a      	adds	r2, r3, #0
    5a34:	e4ef      	b.n	5416 <bloomFilterAddressCheck+0x6de>
    5a36:	1c08      	adds	r0, r1, #0
    5a38:	f7ff f9a2 	bl	4d80 <bloomFilterAddressCheck+0x48>
    5a3c:	1c0c      	adds	r4, r1, #0
    5a3e:	b2a0      	uxth	r0, r4
    5a40:	4982      	ldr	r1, [pc, #520]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5a42:	0040      	lsls	r0, r0, #1
    5a44:	4041      	eors	r1, r0
    5a46:	b289      	uxth	r1, r1
    5a48:	0060      	lsls	r0, r4, #1
    5a4a:	0423      	lsls	r3, r4, #16
    5a4c:	d401      	bmi.n	5a52 <bloomFilterAddressCheck+0xd1a>
    5a4e:	f7ff f9ac 	bl	4daa <bloomFilterAddressCheck+0x72>
    5a52:	1c08      	adds	r0, r1, #0
    5a54:	b284      	uxth	r4, r0
    5a56:	497d      	ldr	r1, [pc, #500]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5a58:	0064      	lsls	r4, r4, #1
    5a5a:	4061      	eors	r1, r4
    5a5c:	b289      	uxth	r1, r1
    5a5e:	0044      	lsls	r4, r0, #1
    5a60:	0403      	lsls	r3, r0, #16
    5a62:	d401      	bmi.n	5a68 <bloomFilterAddressCheck+0xd30>
    5a64:	f7ff f9ab 	bl	4dbe <bloomFilterAddressCheck+0x86>
    5a68:	1c0c      	adds	r4, r1, #0
    5a6a:	b2a0      	uxth	r0, r4
    5a6c:	4977      	ldr	r1, [pc, #476]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5a6e:	0040      	lsls	r0, r0, #1
    5a70:	4041      	eors	r1, r0
    5a72:	b289      	uxth	r1, r1
    5a74:	0060      	lsls	r0, r4, #1
    5a76:	0423      	lsls	r3, r4, #16
    5a78:	d401      	bmi.n	5a7e <bloomFilterAddressCheck+0xd46>
    5a7a:	f7ff f9aa 	bl	4dd2 <bloomFilterAddressCheck+0x9a>
    5a7e:	1c08      	adds	r0, r1, #0
    5a80:	b284      	uxth	r4, r0
    5a82:	4972      	ldr	r1, [pc, #456]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5a84:	0064      	lsls	r4, r4, #1
    5a86:	4061      	eors	r1, r4
    5a88:	b289      	uxth	r1, r1
    5a8a:	0044      	lsls	r4, r0, #1
    5a8c:	0403      	lsls	r3, r0, #16
    5a8e:	d401      	bmi.n	5a94 <bloomFilterAddressCheck+0xd5c>
    5a90:	f7ff f9a9 	bl	4de6 <bloomFilterAddressCheck+0xae>
    5a94:	1c0c      	adds	r4, r1, #0
    5a96:	b2a0      	uxth	r0, r4
    5a98:	496c      	ldr	r1, [pc, #432]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5a9a:	0040      	lsls	r0, r0, #1
    5a9c:	4041      	eors	r1, r0
    5a9e:	b289      	uxth	r1, r1
    5aa0:	0060      	lsls	r0, r4, #1
    5aa2:	0423      	lsls	r3, r4, #16
    5aa4:	d401      	bmi.n	5aaa <bloomFilterAddressCheck+0xd72>
    5aa6:	f7ff f9a8 	bl	4dfa <bloomFilterAddressCheck+0xc2>
    5aaa:	1c08      	adds	r0, r1, #0
    5aac:	f7ff f9a5 	bl	4dfa <bloomFilterAddressCheck+0xc2>
    5ab0:	1c0d      	adds	r5, r1, #0
    5ab2:	f7ff f9af 	bl	4e14 <bloomFilterAddressCheck+0xdc>
    5ab6:	1c01      	adds	r1, r0, #0
    5ab8:	b28d      	uxth	r5, r1
    5aba:	4864      	ldr	r0, [pc, #400]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5abc:	006d      	lsls	r5, r5, #1
    5abe:	4045      	eors	r5, r0
    5ac0:	b2ad      	uxth	r5, r5
    5ac2:	0048      	lsls	r0, r1, #1
    5ac4:	040b      	lsls	r3, r1, #16
    5ac6:	d401      	bmi.n	5acc <bloomFilterAddressCheck+0xd94>
    5ac8:	f7ff f9b9 	bl	4e3e <bloomFilterAddressCheck+0x106>
    5acc:	1c28      	adds	r0, r5, #0
    5ace:	b285      	uxth	r5, r0
    5ad0:	495e      	ldr	r1, [pc, #376]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5ad2:	006d      	lsls	r5, r5, #1
    5ad4:	4069      	eors	r1, r5
    5ad6:	b289      	uxth	r1, r1
    5ad8:	0045      	lsls	r5, r0, #1
    5ada:	0403      	lsls	r3, r0, #16
    5adc:	d401      	bmi.n	5ae2 <bloomFilterAddressCheck+0xdaa>
    5ade:	f7ff f9b8 	bl	4e52 <bloomFilterAddressCheck+0x11a>
    5ae2:	1c0d      	adds	r5, r1, #0
    5ae4:	b2a8      	uxth	r0, r5
    5ae6:	4959      	ldr	r1, [pc, #356]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5ae8:	0040      	lsls	r0, r0, #1
    5aea:	4041      	eors	r1, r0
    5aec:	b289      	uxth	r1, r1
    5aee:	0068      	lsls	r0, r5, #1
    5af0:	042b      	lsls	r3, r5, #16
    5af2:	d401      	bmi.n	5af8 <bloomFilterAddressCheck+0xdc0>
    5af4:	f7ff f9b7 	bl	4e66 <bloomFilterAddressCheck+0x12e>
    5af8:	1c08      	adds	r0, r1, #0
    5afa:	b285      	uxth	r5, r0
    5afc:	4953      	ldr	r1, [pc, #332]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5afe:	006d      	lsls	r5, r5, #1
    5b00:	4069      	eors	r1, r5
    5b02:	b289      	uxth	r1, r1
    5b04:	0045      	lsls	r5, r0, #1
    5b06:	0403      	lsls	r3, r0, #16
    5b08:	d401      	bmi.n	5b0e <bloomFilterAddressCheck+0xdd6>
    5b0a:	f7ff f9b6 	bl	4e7a <bloomFilterAddressCheck+0x142>
    5b0e:	1c0d      	adds	r5, r1, #0
    5b10:	b2a8      	uxth	r0, r5
    5b12:	494e      	ldr	r1, [pc, #312]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5b14:	0040      	lsls	r0, r0, #1
    5b16:	4041      	eors	r1, r0
    5b18:	b289      	uxth	r1, r1
    5b1a:	0068      	lsls	r0, r5, #1
    5b1c:	042b      	lsls	r3, r5, #16
    5b1e:	d401      	bmi.n	5b24 <bloomFilterAddressCheck+0xdec>
    5b20:	f7ff f9b5 	bl	4e8e <bloomFilterAddressCheck+0x156>
    5b24:	1c08      	adds	r0, r1, #0
    5b26:	b285      	uxth	r5, r0
    5b28:	4948      	ldr	r1, [pc, #288]	; (5c4c <bloomFilterAddressCheck+0xf14>)
    5b2a:	006d      	lsls	r5, r5, #1
    5b2c:	4069      	eors	r1, r5
    5b2e:	b289      	uxth	r1, r1
    5b30:	0045      	lsls	r5, r0, #1
    5b32:	0403      	lsls	r3, r0, #16
    5b34:	d401      	bmi.n	5b3a <bloomFilterAddressCheck+0xe02>
    5b36:	f7ff f9b4 	bl	4ea2 <bloomFilterAddressCheck+0x16a>
    5b3a:	1c0d      	adds	r5, r1, #0
    5b3c:	f7ff f9b1 	bl	4ea2 <bloomFilterAddressCheck+0x16a>
    5b40:	4689      	mov	r9, r1
    5b42:	f7ff f9bc 	bl	4ebe <bloomFilterAddressCheck+0x186>
    5b46:	4651      	mov	r1, sl
    5b48:	f7ff f9c9 	bl	4ede <bloomFilterAddressCheck+0x1a6>
    5b4c:	464d      	mov	r5, r9
    5b4e:	f7ff f9d3 	bl	4ef8 <bloomFilterAddressCheck+0x1c0>
    5b52:	4689      	mov	r9, r1
    5b54:	f7ff f9dd 	bl	4f12 <bloomFilterAddressCheck+0x1da>
    5b58:	1c0d      	adds	r5, r1, #0
    5b5a:	f7ff f9e9 	bl	4f30 <bloomFilterAddressCheck+0x1f8>
    5b5e:	4689      	mov	r9, r1
    5b60:	f7ff f9f3 	bl	4f4a <bloomFilterAddressCheck+0x212>
    5b64:	1c0d      	adds	r5, r1, #0
    5b66:	f7ff f9ff 	bl	4f68 <bloomFilterAddressCheck+0x230>
    5b6a:	468a      	mov	sl, r1
    5b6c:	f7ff fa09 	bl	4f82 <bloomFilterAddressCheck+0x24a>
    5b70:	464d      	mov	r5, r9
    5b72:	f7ff fa19 	bl	4fa8 <bloomFilterAddressCheck+0x270>
    5b76:	4655      	mov	r5, sl
    5b78:	f7ff fa26 	bl	4fc8 <bloomFilterAddressCheck+0x290>
    5b7c:	46d1      	mov	r9, sl
    5b7e:	f7ff fa36 	bl	4fee <bloomFilterAddressCheck+0x2b6>
    5b82:	46aa      	mov	sl, r5
    5b84:	f7ff fa43 	bl	500e <bloomFilterAddressCheck+0x2d6>
    5b88:	46a9      	mov	r9, r5
    5b8a:	f7ff fa50 	bl	502e <bloomFilterAddressCheck+0x2f6>
    5b8e:	46aa      	mov	sl, r5
    5b90:	f7ff fa5d 	bl	504e <bloomFilterAddressCheck+0x316>
    5b94:	46a9      	mov	r9, r5
    5b96:	f7ff fa6a 	bl	506e <bloomFilterAddressCheck+0x336>
    5b9a:	46aa      	mov	sl, r5
    5b9c:	f7ff fa77 	bl	508e <bloomFilterAddressCheck+0x356>
    5ba0:	464d      	mov	r5, r9
    5ba2:	f7ff fa87 	bl	50b4 <bloomFilterAddressCheck+0x37c>
    5ba6:	4655      	mov	r5, sl
    5ba8:	f7ff fa99 	bl	50de <bloomFilterAddressCheck+0x3a6>
    5bac:	46d1      	mov	r9, sl
    5bae:	f7ff faa7 	bl	5100 <bloomFilterAddressCheck+0x3c8>
    5bb2:	46aa      	mov	sl, r5
    5bb4:	f7ff faba 	bl	512c <bloomFilterAddressCheck+0x3f4>
    5bb8:	46a9      	mov	r9, r5
    5bba:	f7ff fac7 	bl	514c <bloomFilterAddressCheck+0x414>
    5bbe:	46aa      	mov	sl, r5
    5bc0:	f7ff fad4 	bl	516c <bloomFilterAddressCheck+0x434>
    5bc4:	46a9      	mov	r9, r5
    5bc6:	f7ff fae1 	bl	518c <bloomFilterAddressCheck+0x454>
    5bca:	46aa      	mov	sl, r5
    5bcc:	f7ff faee 	bl	51ac <bloomFilterAddressCheck+0x474>
    5bd0:	464d      	mov	r5, r9
    5bd2:	f7ff fafe 	bl	51d2 <bloomFilterAddressCheck+0x49a>
    5bd6:	4655      	mov	r5, sl
    5bd8:	f7ff fb10 	bl	51fc <bloomFilterAddressCheck+0x4c4>
    5bdc:	46d1      	mov	r9, sl
    5bde:	f7ff fb1e 	bl	521e <bloomFilterAddressCheck+0x4e6>
    5be2:	46aa      	mov	sl, r5
    5be4:	f7ff fb2b 	bl	523e <bloomFilterAddressCheck+0x506>
    5be8:	46a9      	mov	r9, r5
    5bea:	f7ff fb38 	bl	525e <bloomFilterAddressCheck+0x526>
    5bee:	46aa      	mov	sl, r5
    5bf0:	f7ff fb45 	bl	527e <bloomFilterAddressCheck+0x546>
    5bf4:	46a9      	mov	r9, r5
    5bf6:	f7ff fb52 	bl	529e <bloomFilterAddressCheck+0x566>
    5bfa:	46aa      	mov	sl, r5
    5bfc:	f7ff fb5f 	bl	52be <bloomFilterAddressCheck+0x586>
    5c00:	464d      	mov	r5, r9
    5c02:	f7ff fb6f 	bl	52e4 <bloomFilterAddressCheck+0x5ac>
    5c06:	4655      	mov	r5, sl
    5c08:	f7ff fb81 	bl	530e <bloomFilterAddressCheck+0x5d6>
    5c0c:	46ca      	mov	sl, r9
    5c0e:	f7ff fb8f 	bl	5330 <bloomFilterAddressCheck+0x5f8>
    5c12:	46a9      	mov	r9, r5
    5c14:	f7ff fb9c 	bl	5350 <bloomFilterAddressCheck+0x618>
    5c18:	46aa      	mov	sl, r5
    5c1a:	f7ff fba9 	bl	5370 <bloomFilterAddressCheck+0x638>
    5c1e:	46a9      	mov	r9, r5
    5c20:	f7ff fbb6 	bl	5390 <bloomFilterAddressCheck+0x658>
    5c24:	46aa      	mov	sl, r5
    5c26:	f7ff fbc3 	bl	53b0 <bloomFilterAddressCheck+0x678>
    5c2a:	46a9      	mov	r9, r5
    5c2c:	f7ff fbd0 	bl	53d0 <bloomFilterAddressCheck+0x698>
    5c30:	1c2a      	adds	r2, r5, #0
    5c32:	f7ff fbdf 	bl	53f4 <bloomFilterAddressCheck+0x6bc>
    5c36:	4644      	mov	r4, r8
    5c38:	e6d3      	b.n	59e2 <bloomFilterAddressCheck+0xcaa>
    5c3a:	466b      	mov	r3, sp
    5c3c:	8a98      	ldrh	r0, [r3, #20]
    5c3e:	e6c6      	b.n	59ce <bloomFilterAddressCheck+0xc96>
    5c40:	1c0c      	adds	r4, r1, #0
    5c42:	e6b3      	b.n	59ac <bloomFilterAddressCheck+0xc74>
    5c44:	ffff8005 	.word	0xffff8005
    5c48:	000074dd 	.word	0x000074dd
    5c4c:	00001021 	.word	0x00001021
    5c50:	1c19      	adds	r1, r3, #0
    5c52:	b28a      	uxth	r2, r1
    5c54:	4b52      	ldr	r3, [pc, #328]	; (5da0 <bloomFilterAddressCheck+0x1068>)
    5c56:	0052      	lsls	r2, r2, #1
    5c58:	4053      	eors	r3, r2
    5c5a:	b29b      	uxth	r3, r3
    5c5c:	004a      	lsls	r2, r1, #1
    5c5e:	0409      	lsls	r1, r1, #16
    5c60:	d400      	bmi.n	5c64 <bloomFilterAddressCheck+0xf2c>
    5c62:	e5bb      	b.n	57dc <bloomFilterAddressCheck+0xaa4>
    5c64:	1c1a      	adds	r2, r3, #0
    5c66:	b291      	uxth	r1, r2
    5c68:	4b4d      	ldr	r3, [pc, #308]	; (5da0 <bloomFilterAddressCheck+0x1068>)
    5c6a:	0049      	lsls	r1, r1, #1
    5c6c:	404b      	eors	r3, r1
    5c6e:	b29b      	uxth	r3, r3
    5c70:	0055      	lsls	r5, r2, #1
    5c72:	0412      	lsls	r2, r2, #16
    5c74:	d400      	bmi.n	5c78 <bloomFilterAddressCheck+0xf40>
    5c76:	e5ba      	b.n	57ee <bloomFilterAddressCheck+0xab6>
    5c78:	1c1d      	adds	r5, r3, #0
    5c7a:	e5b8      	b.n	57ee <bloomFilterAddressCheck+0xab6>
    5c7c:	1c1a      	adds	r2, r3, #0
    5c7e:	e59b      	b.n	57b8 <bloomFilterAddressCheck+0xa80>
    5c80:	1c19      	adds	r1, r3, #0
    5c82:	e590      	b.n	57a6 <bloomFilterAddressCheck+0xa6e>
    5c84:	1c1a      	adds	r2, r3, #0
    5c86:	e585      	b.n	5794 <bloomFilterAddressCheck+0xa5c>
    5c88:	1c11      	adds	r1, r2, #0
    5c8a:	e57a      	b.n	5782 <bloomFilterAddressCheck+0xa4a>
    5c8c:	1c0b      	adds	r3, r1, #0
    5c8e:	e56f      	b.n	5770 <bloomFilterAddressCheck+0xa38>
    5c90:	1c1a      	adds	r2, r3, #0
    5c92:	e562      	b.n	575a <bloomFilterAddressCheck+0xa22>
    5c94:	1c19      	adds	r1, r3, #0
    5c96:	e557      	b.n	5748 <bloomFilterAddressCheck+0xa10>
    5c98:	1c1a      	adds	r2, r3, #0
    5c9a:	e54c      	b.n	5736 <bloomFilterAddressCheck+0x9fe>
    5c9c:	1c19      	adds	r1, r3, #0
    5c9e:	e541      	b.n	5724 <bloomFilterAddressCheck+0x9ec>
    5ca0:	1c1a      	adds	r2, r3, #0
    5ca2:	e536      	b.n	5712 <bloomFilterAddressCheck+0x9da>
    5ca4:	1c19      	adds	r1, r3, #0
    5ca6:	e52b      	b.n	5700 <bloomFilterAddressCheck+0x9c8>
    5ca8:	1c0a      	adds	r2, r1, #0
    5caa:	e520      	b.n	56ee <bloomFilterAddressCheck+0x9b6>
    5cac:	1c13      	adds	r3, r2, #0
    5cae:	e515      	b.n	56dc <bloomFilterAddressCheck+0x9a4>
    5cb0:	1c02      	adds	r2, r0, #0
    5cb2:	e509      	b.n	56c8 <bloomFilterAddressCheck+0x990>
    5cb4:	1c03      	adds	r3, r0, #0
    5cb6:	e4fd      	b.n	56b4 <bloomFilterAddressCheck+0x97c>
    5cb8:	1c02      	adds	r2, r0, #0
    5cba:	e4f1      	b.n	56a0 <bloomFilterAddressCheck+0x968>
    5cbc:	1c03      	adds	r3, r0, #0
    5cbe:	e4e5      	b.n	568c <bloomFilterAddressCheck+0x954>
    5cc0:	1c02      	adds	r2, r0, #0
    5cc2:	e4d9      	b.n	5678 <bloomFilterAddressCheck+0x940>
    5cc4:	1c03      	adds	r3, r0, #0
    5cc6:	e4cd      	b.n	5664 <bloomFilterAddressCheck+0x92c>
    5cc8:	1c02      	adds	r2, r0, #0
    5cca:	e4c1      	b.n	5650 <bloomFilterAddressCheck+0x918>
    5ccc:	1c23      	adds	r3, r4, #0
    5cce:	e4b5      	b.n	563c <bloomFilterAddressCheck+0x904>
    5cd0:	1c22      	adds	r2, r4, #0
    5cd2:	e4a8      	b.n	5626 <bloomFilterAddressCheck+0x8ee>
    5cd4:	1c23      	adds	r3, r4, #0
    5cd6:	e49c      	b.n	5612 <bloomFilterAddressCheck+0x8da>
    5cd8:	1c22      	adds	r2, r4, #0
    5cda:	e490      	b.n	55fe <bloomFilterAddressCheck+0x8c6>
    5cdc:	1c23      	adds	r3, r4, #0
    5cde:	e484      	b.n	55ea <bloomFilterAddressCheck+0x8b2>
    5ce0:	1c22      	adds	r2, r4, #0
    5ce2:	e478      	b.n	55d6 <bloomFilterAddressCheck+0x89e>
    5ce4:	1c23      	adds	r3, r4, #0
    5ce6:	e46c      	b.n	55c2 <bloomFilterAddressCheck+0x88a>
    5ce8:	1c22      	adds	r2, r4, #0
    5cea:	e460      	b.n	55ae <bloomFilterAddressCheck+0x876>
    5cec:	1c2b      	adds	r3, r5, #0
    5cee:	e454      	b.n	559a <bloomFilterAddressCheck+0x862>
    5cf0:	1c2a      	adds	r2, r5, #0
    5cf2:	e447      	b.n	5584 <bloomFilterAddressCheck+0x84c>
    5cf4:	1c2b      	adds	r3, r5, #0
    5cf6:	e43b      	b.n	5570 <bloomFilterAddressCheck+0x838>
    5cf8:	1c19      	adds	r1, r3, #0
    5cfa:	b28a      	uxth	r2, r1
    5cfc:	4b28      	ldr	r3, [pc, #160]	; (5da0 <bloomFilterAddressCheck+0x1068>)
    5cfe:	0052      	lsls	r2, r2, #1
    5d00:	4053      	eors	r3, r2
    5d02:	b29b      	uxth	r3, r3
    5d04:	0048      	lsls	r0, r1, #1
    5d06:	040a      	lsls	r2, r1, #16
    5d08:	d400      	bmi.n	5d0c <bloomFilterAddressCheck+0xfd4>
    5d0a:	e5fe      	b.n	590a <bloomFilterAddressCheck+0xbd2>
    5d0c:	1c18      	adds	r0, r3, #0
    5d0e:	b282      	uxth	r2, r0
    5d10:	4b23      	ldr	r3, [pc, #140]	; (5da0 <bloomFilterAddressCheck+0x1068>)
    5d12:	0052      	lsls	r2, r2, #1
    5d14:	4053      	eors	r3, r2
    5d16:	b29b      	uxth	r3, r3
    5d18:	0042      	lsls	r2, r0, #1
    5d1a:	0401      	lsls	r1, r0, #16
    5d1c:	d400      	bmi.n	5d20 <bloomFilterAddressCheck+0xfe8>
    5d1e:	e5fd      	b.n	591c <bloomFilterAddressCheck+0xbe4>
    5d20:	1c1a      	adds	r2, r3, #0
    5d22:	e5fb      	b.n	591c <bloomFilterAddressCheck+0xbe4>
    5d24:	1c1a      	adds	r2, r3, #0
    5d26:	e5de      	b.n	58e6 <bloomFilterAddressCheck+0xbae>
    5d28:	1c19      	adds	r1, r3, #0
    5d2a:	e5d3      	b.n	58d4 <bloomFilterAddressCheck+0xb9c>
    5d2c:	1c1a      	adds	r2, r3, #0
    5d2e:	e5c8      	b.n	58c2 <bloomFilterAddressCheck+0xb8a>
    5d30:	1c11      	adds	r1, r2, #0
    5d32:	e5bd      	b.n	58b0 <bloomFilterAddressCheck+0xb78>
    5d34:	1c13      	adds	r3, r2, #0
    5d36:	e5b2      	b.n	589e <bloomFilterAddressCheck+0xb66>
    5d38:	1c1d      	adds	r5, r3, #0
    5d3a:	e5a2      	b.n	5882 <bloomFilterAddressCheck+0xb4a>
    5d3c:	1c1a      	adds	r2, r3, #0
    5d3e:	e597      	b.n	5870 <bloomFilterAddressCheck+0xb38>
    5d40:	1c19      	adds	r1, r3, #0
    5d42:	e58c      	b.n	585e <bloomFilterAddressCheck+0xb26>
    5d44:	1c1a      	adds	r2, r3, #0
    5d46:	e581      	b.n	584c <bloomFilterAddressCheck+0xb14>
    5d48:	1c19      	adds	r1, r3, #0
    5d4a:	e576      	b.n	583a <bloomFilterAddressCheck+0xb02>
    5d4c:	1c1a      	adds	r2, r3, #0
    5d4e:	e56b      	b.n	5828 <bloomFilterAddressCheck+0xaf0>
    5d50:	1c11      	adds	r1, r2, #0
    5d52:	e560      	b.n	5816 <bloomFilterAddressCheck+0xade>
    5d54:	1c13      	adds	r3, r2, #0
    5d56:	e555      	b.n	5804 <bloomFilterAddressCheck+0xacc>
    5d58:	1c0a      	adds	r2, r1, #0
    5d5a:	e61d      	b.n	5998 <bloomFilterAddressCheck+0xc60>
    5d5c:	1c0b      	adds	r3, r1, #0
    5d5e:	e611      	b.n	5984 <bloomFilterAddressCheck+0xc4c>
    5d60:	1c0a      	adds	r2, r1, #0
    5d62:	e605      	b.n	5970 <bloomFilterAddressCheck+0xc38>
    5d64:	1c0b      	adds	r3, r1, #0
    5d66:	e5f9      	b.n	595c <bloomFilterAddressCheck+0xc24>
    5d68:	1c0a      	adds	r2, r1, #0
    5d6a:	e5ed      	b.n	5948 <bloomFilterAddressCheck+0xc10>
    5d6c:	1c03      	adds	r3, r0, #0
    5d6e:	e5e1      	b.n	5934 <bloomFilterAddressCheck+0xbfc>
    5d70:	1c2a      	adds	r2, r5, #0
    5d72:	f7ff fbf3 	bl	555c <bloomFilterAddressCheck+0x824>
    5d76:	1c2b      	adds	r3, r5, #0
    5d78:	f7ff fbe5 	bl	5546 <bloomFilterAddressCheck+0x80e>
    5d7c:	1c2a      	adds	r2, r5, #0
    5d7e:	f7ff fbd7 	bl	5530 <bloomFilterAddressCheck+0x7f8>
    5d82:	1c2b      	adds	r3, r5, #0
    5d84:	f7ff fbc9 	bl	551a <bloomFilterAddressCheck+0x7e2>
    5d88:	1c2a      	adds	r2, r5, #0
    5d8a:	f7ff fbbb 	bl	5504 <bloomFilterAddressCheck+0x7cc>
    5d8e:	1c13      	adds	r3, r2, #0
    5d90:	f7ff fbac 	bl	54ec <bloomFilterAddressCheck+0x7b4>
    5d94:	464a      	mov	r2, r9
    5d96:	f7ff fb8e 	bl	54b6 <bloomFilterAddressCheck+0x77e>
    5d9a:	1c2a      	adds	r2, r5, #0
    5d9c:	f7ff fb4a 	bl	5434 <bloomFilterAddressCheck+0x6fc>
    5da0:	ffff8005 	.word	0xffff8005

00005da4 <MiApp_SubscribeDataIndicationCallback>:
    5da4:	2800      	cmp	r0, #0
    5da6:	d003      	beq.n	5db0 <MiApp_SubscribeDataIndicationCallback+0xc>
    5da8:	4b02      	ldr	r3, [pc, #8]	; (5db4 <MiApp_SubscribeDataIndicationCallback+0x10>)
    5daa:	6018      	str	r0, [r3, #0]
    5dac:	2001      	movs	r0, #1
    5dae:	4770      	bx	lr
    5db0:	2000      	movs	r0, #0
    5db2:	e7fc      	b.n	5dae <MiApp_SubscribeDataIndicationCallback+0xa>
    5db4:	200002ac 	.word	0x200002ac

00005db8 <prepareGenericHeader>:
    5db8:	b510      	push	{r4, lr}
    5dba:	2403      	movs	r4, #3
    5dbc:	7018      	strb	r0, [r3, #0]
    5dbe:	7858      	ldrb	r0, [r3, #1]
    5dc0:	809a      	strh	r2, [r3, #4]
    5dc2:	43a0      	bics	r0, r4
    5dc4:	2401      	movs	r4, #1
    5dc6:	4304      	orrs	r4, r0
    5dc8:	20f7      	movs	r0, #247	; 0xf7
    5dca:	4020      	ands	r0, r4
    5dcc:	2404      	movs	r4, #4
    5dce:	4320      	orrs	r0, r4
    5dd0:	2447      	movs	r4, #71	; 0x47
    5dd2:	4020      	ands	r0, r4
    5dd4:	7058      	strb	r0, [r3, #1]
    5dd6:	4802      	ldr	r0, [pc, #8]	; (5de0 <prepareGenericHeader+0x28>)
    5dd8:	80d9      	strh	r1, [r3, #6]
    5dda:	8800      	ldrh	r0, [r0, #0]
    5ddc:	8058      	strh	r0, [r3, #2]
    5dde:	bd10      	pop	{r4, pc}
    5de0:	200012dc 	.word	0x200012dc

00005de4 <generalFrameConstruct>:
    5de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5de6:	000c      	movs	r4, r1
    5de8:	7802      	ldrb	r2, [r0, #0]
    5dea:	0003      	movs	r3, r0
    5dec:	700a      	strb	r2, [r1, #0]
    5dee:	7842      	ldrb	r2, [r0, #1]
    5df0:	704a      	strb	r2, [r1, #1]
    5df2:	491d      	ldr	r1, [pc, #116]	; (5e68 <generalFrameConstruct+0x84>)
    5df4:	780a      	ldrb	r2, [r1, #0]
    5df6:	3201      	adds	r2, #1
    5df8:	b2d2      	uxtb	r2, r2
    5dfa:	70a2      	strb	r2, [r4, #2]
    5dfc:	700a      	strb	r2, [r1, #0]
    5dfe:	7842      	ldrb	r2, [r0, #1]
    5e00:	0691      	lsls	r1, r2, #26
    5e02:	d42b      	bmi.n	5e5c <generalFrameConstruct+0x78>
    5e04:	8842      	ldrh	r2, [r0, #2]
    5e06:	2516      	movs	r5, #22
    5e08:	70e2      	strb	r2, [r4, #3]
    5e0a:	8842      	ldrh	r2, [r0, #2]
    5e0c:	260e      	movs	r6, #14
    5e0e:	0a12      	lsrs	r2, r2, #8
    5e10:	7122      	strb	r2, [r4, #4]
    5e12:	8882      	ldrh	r2, [r0, #4]
    5e14:	210a      	movs	r1, #10
    5e16:	7162      	strb	r2, [r4, #5]
    5e18:	8882      	ldrh	r2, [r0, #4]
    5e1a:	2709      	movs	r7, #9
    5e1c:	0a12      	lsrs	r2, r2, #8
    5e1e:	71a2      	strb	r2, [r4, #6]
    5e20:	88c2      	ldrh	r2, [r0, #6]
    5e22:	71e2      	strb	r2, [r4, #7]
    5e24:	88c2      	ldrh	r2, [r0, #6]
    5e26:	0a12      	lsrs	r2, r2, #8
    5e28:	7222      	strb	r2, [r4, #8]
    5e2a:	7842      	ldrb	r2, [r0, #1]
    5e2c:	2009      	movs	r0, #9
    5e2e:	0752      	lsls	r2, r2, #29
    5e30:	d513      	bpl.n	5e5a <generalFrameConstruct+0x76>
    5e32:	4a0e      	ldr	r2, [pc, #56]	; (5e6c <generalFrameConstruct+0x88>)
    5e34:	6810      	ldr	r0, [r2, #0]
    5e36:	2220      	movs	r2, #32
    5e38:	5c82      	ldrb	r2, [r0, r2]
    5e3a:	480d      	ldr	r0, [pc, #52]	; (5e70 <generalFrameConstruct+0x8c>)
    5e3c:	741a      	strb	r2, [r3, #16]
    5e3e:	6800      	ldr	r0, [r0, #0]
    5e40:	3314      	adds	r3, #20
    5e42:	6018      	str	r0, [r3, #0]
    5e44:	55e2      	strb	r2, [r4, r7]
    5e46:	1860      	adds	r0, r4, r1
    5e48:	2204      	movs	r2, #4
    5e4a:	0019      	movs	r1, r3
    5e4c:	4f09      	ldr	r7, [pc, #36]	; (5e74 <generalFrameConstruct+0x90>)
    5e4e:	47b8      	blx	r7
    5e50:	19a0      	adds	r0, r4, r6
    5e52:	2208      	movs	r2, #8
    5e54:	4908      	ldr	r1, [pc, #32]	; (5e78 <generalFrameConstruct+0x94>)
    5e56:	47b8      	blx	r7
    5e58:	0028      	movs	r0, r5
    5e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e5c:	2510      	movs	r5, #16
    5e5e:	2608      	movs	r6, #8
    5e60:	2104      	movs	r1, #4
    5e62:	2703      	movs	r7, #3
    5e64:	2003      	movs	r0, #3
    5e66:	e7e2      	b.n	5e2e <generalFrameConstruct+0x4a>
    5e68:	200012c4 	.word	0x200012c4
    5e6c:	200012ac 	.word	0x200012ac
    5e70:	2000132c 	.word	0x2000132c
    5e74:	0000754f 	.word	0x0000754f
    5e78:	2000004c 	.word	0x2000004c

00005e7c <frameTransmit>:
    5e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e7e:	4657      	mov	r7, sl
    5e80:	464e      	mov	r6, r9
    5e82:	46de      	mov	lr, fp
    5e84:	4645      	mov	r5, r8
    5e86:	b5e0      	push	{r5, r6, r7, lr}
    5e88:	b085      	sub	sp, #20
    5e8a:	4699      	mov	r9, r3
    5e8c:	ab0e      	add	r3, sp, #56	; 0x38
    5e8e:	781e      	ldrb	r6, [r3, #0]
    5e90:	ab10      	add	r3, sp, #64	; 0x40
    5e92:	781b      	ldrb	r3, [r3, #0]
    5e94:	0007      	movs	r7, r0
    5e96:	469a      	mov	sl, r3
    5e98:	2028      	movs	r0, #40	; 0x28
    5e9a:	4b45      	ldr	r3, [pc, #276]	; (5fb0 <frameTransmit+0x134>)
    5e9c:	4688      	mov	r8, r1
    5e9e:	9203      	str	r2, [sp, #12]
    5ea0:	4798      	blx	r3
    5ea2:	1e04      	subs	r4, r0, #0
    5ea4:	d100      	bne.n	5ea8 <frameTransmit+0x2c>
    5ea6:	e081      	b.n	5fac <frameTransmit+0x130>
    5ea8:	2300      	movs	r3, #0
    5eaa:	7603      	strb	r3, [r0, #24]
    5eac:	787b      	ldrb	r3, [r7, #1]
    5eae:	075b      	lsls	r3, r3, #29
    5eb0:	d45b      	bmi.n	5f6a <frameTransmit+0xee>
    5eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5eb4:	781a      	ldrb	r2, [r3, #0]
    5eb6:	785b      	ldrb	r3, [r3, #1]
    5eb8:	2e02      	cmp	r6, #2
    5eba:	d06b      	beq.n	5f94 <frameTransmit+0x118>
    5ebc:	2101      	movs	r1, #1
    5ebe:	2200      	movs	r2, #0
    5ec0:	2020      	movs	r0, #32
    5ec2:	7e23      	ldrb	r3, [r4, #24]
    5ec4:	0149      	lsls	r1, r1, #5
    5ec6:	4383      	bics	r3, r0
    5ec8:	430b      	orrs	r3, r1
    5eca:	2104      	movs	r1, #4
    5ecc:	0092      	lsls	r2, r2, #2
    5ece:	438b      	bics	r3, r1
    5ed0:	4313      	orrs	r3, r2
    5ed2:	2208      	movs	r2, #8
    5ed4:	4393      	bics	r3, r2
    5ed6:	7623      	strb	r3, [r4, #24]
    5ed8:	4b36      	ldr	r3, [pc, #216]	; (5fb4 <frameTransmit+0x138>)
    5eda:	881a      	ldrh	r2, [r3, #0]
    5edc:	4b36      	ldr	r3, [pc, #216]	; (5fb8 <frameTransmit+0x13c>)
    5ede:	429a      	cmp	r2, r3
    5ee0:	d062      	beq.n	5fa8 <frameTransmit+0x12c>
    5ee2:	787a      	ldrb	r2, [r7, #1]
    5ee4:	2301      	movs	r3, #1
    5ee6:	4211      	tst	r1, r2
    5ee8:	d136      	bne.n	5f58 <frameTransmit+0xdc>
    5eea:	2221      	movs	r2, #33	; 0x21
    5eec:	54a3      	strb	r3, [r4, r2]
    5eee:	1eb3      	subs	r3, r6, #2
    5ef0:	425a      	negs	r2, r3
    5ef2:	4153      	adcs	r3, r2
    5ef4:	2220      	movs	r2, #32
    5ef6:	2101      	movs	r1, #1
    5ef8:	54a3      	strb	r3, [r4, r2]
    5efa:	7e23      	ldrb	r3, [r4, #24]
    5efc:	089a      	lsrs	r2, r3, #2
    5efe:	4051      	eors	r1, r2
    5f00:	2201      	movs	r2, #1
    5f02:	400a      	ands	r2, r1
    5f04:	2140      	movs	r1, #64	; 0x40
    5f06:	0192      	lsls	r2, r2, #6
    5f08:	438b      	bics	r3, r1
    5f0a:	4313      	orrs	r3, r2
    5f0c:	2280      	movs	r2, #128	; 0x80
    5f0e:	4252      	negs	r2, r2
    5f10:	4313      	orrs	r3, r2
    5f12:	7623      	strb	r3, [r4, #24]
    5f14:	887b      	ldrh	r3, [r7, #2]
    5f16:	0027      	movs	r7, r4
    5f18:	8463      	strh	r3, [r4, #34]	; 0x22
    5f1a:	464b      	mov	r3, r9
    5f1c:	3708      	adds	r7, #8
    5f1e:	6163      	str	r3, [r4, #20]
    5f20:	0032      	movs	r2, r6
    5f22:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5f24:	4b25      	ldr	r3, [pc, #148]	; (5fbc <frameTransmit+0x140>)
    5f26:	0038      	movs	r0, r7
    5f28:	4798      	blx	r3
    5f2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5f2c:	4652      	mov	r2, sl
    5f2e:	6123      	str	r3, [r4, #16]
    5f30:	2325      	movs	r3, #37	; 0x25
    5f32:	61e7      	str	r7, [r4, #28]
    5f34:	54e2      	strb	r2, [r4, r3]
    5f36:	9b03      	ldr	r3, [sp, #12]
    5f38:	4821      	ldr	r0, [pc, #132]	; (5fc0 <frameTransmit+0x144>)
    5f3a:	4443      	add	r3, r8
    5f3c:	001d      	movs	r5, r3
    5f3e:	2324      	movs	r3, #36	; 0x24
    5f40:	0021      	movs	r1, r4
    5f42:	54e5      	strb	r5, [r4, r3]
    5f44:	4b1f      	ldr	r3, [pc, #124]	; (5fc4 <frameTransmit+0x148>)
    5f46:	4798      	blx	r3
    5f48:	2001      	movs	r0, #1
    5f4a:	b005      	add	sp, #20
    5f4c:	bc3c      	pop	{r2, r3, r4, r5}
    5f4e:	4690      	mov	r8, r2
    5f50:	4699      	mov	r9, r3
    5f52:	46a2      	mov	sl, r4
    5f54:	46ab      	mov	fp, r5
    5f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f58:	2100      	movs	r1, #0
    5f5a:	4a1b      	ldr	r2, [pc, #108]	; (5fc8 <frameTransmit+0x14c>)
    5f5c:	7812      	ldrb	r2, [r2, #0]
    5f5e:	3a06      	subs	r2, #6
    5f60:	b2d2      	uxtb	r2, r2
    5f62:	4293      	cmp	r3, r2
    5f64:	4149      	adcs	r1, r1
    5f66:	b2cb      	uxtb	r3, r1
    5f68:	e7bf      	b.n	5eea <frameTransmit+0x6e>
    5f6a:	4b18      	ldr	r3, [pc, #96]	; (5fcc <frameTransmit+0x150>)
    5f6c:	0030      	movs	r0, r6
    5f6e:	4798      	blx	r3
    5f70:	464b      	mov	r3, r9
    5f72:	9000      	str	r0, [sp, #0]
    5f74:	9a03      	ldr	r2, [sp, #12]
    5f76:	4641      	mov	r1, r8
    5f78:	0038      	movs	r0, r7
    5f7a:	4d15      	ldr	r5, [pc, #84]	; (5fd0 <frameTransmit+0x154>)
    5f7c:	47a8      	blx	r5
    5f7e:	28ff      	cmp	r0, #255	; 0xff
    5f80:	d014      	beq.n	5fac <frameTransmit+0x130>
    5f82:	9b03      	ldr	r3, [sp, #12]
    5f84:	181d      	adds	r5, r3, r0
    5f86:	b2eb      	uxtb	r3, r5
    5f88:	9303      	str	r3, [sp, #12]
    5f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5f8c:	781a      	ldrb	r2, [r3, #0]
    5f8e:	785b      	ldrb	r3, [r3, #1]
    5f90:	2e02      	cmp	r6, #2
    5f92:	d193      	bne.n	5ebc <frameTransmit+0x40>
    5f94:	021b      	lsls	r3, r3, #8
    5f96:	189b      	adds	r3, r3, r2
    5f98:	4a07      	ldr	r2, [pc, #28]	; (5fb8 <frameTransmit+0x13c>)
    5f9a:	b29b      	uxth	r3, r3
    5f9c:	4293      	cmp	r3, r2
    5f9e:	d000      	beq.n	5fa2 <frameTransmit+0x126>
    5fa0:	e78c      	b.n	5ebc <frameTransmit+0x40>
    5fa2:	2100      	movs	r1, #0
    5fa4:	2201      	movs	r2, #1
    5fa6:	e78b      	b.n	5ec0 <frameTransmit+0x44>
    5fa8:	2300      	movs	r3, #0
    5faa:	e79e      	b.n	5eea <frameTransmit+0x6e>
    5fac:	2000      	movs	r0, #0
    5fae:	e7cc      	b.n	5f4a <frameTransmit+0xce>
    5fb0:	00002bc9 	.word	0x00002bc9
    5fb4:	200012f0 	.word	0x200012f0
    5fb8:	0000ffff 	.word	0x0000ffff
    5fbc:	0000754f 	.word	0x0000754f
    5fc0:	200012e4 	.word	0x200012e4
    5fc4:	00002cf1 	.word	0x00002cf1
    5fc8:	20000294 	.word	0x20000294
    5fcc:	00007019 	.word	0x00007019
    5fd0:	0000703d 	.word	0x0000703d

00005fd4 <frameParse>:
    5fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fd6:	464e      	mov	r6, r9
    5fd8:	4645      	mov	r5, r8
    5fda:	46de      	mov	lr, fp
    5fdc:	4657      	mov	r7, sl
    5fde:	b5e0      	push	{r5, r6, r7, lr}
    5fe0:	6885      	ldr	r5, [r0, #8]
    5fe2:	b09d      	sub	sp, #116	; 0x74
    5fe4:	782b      	ldrb	r3, [r5, #0]
    5fe6:	ac0c      	add	r4, sp, #48	; 0x30
    5fe8:	7023      	strb	r3, [r4, #0]
    5fea:	786b      	ldrb	r3, [r5, #1]
    5fec:	0006      	movs	r6, r0
    5fee:	7063      	strb	r3, [r4, #1]
    5ff0:	78ab      	ldrb	r3, [r5, #2]
    5ff2:	7223      	strb	r3, [r4, #8]
    5ff4:	7bc3      	ldrb	r3, [r0, #15]
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d015      	beq.n	6026 <frameParse+0x52>
    5ffa:	7863      	ldrb	r3, [r4, #1]
    5ffc:	069a      	lsls	r2, r3, #26
    5ffe:	d400      	bmi.n	6002 <frameParse+0x2e>
    6000:	e0b5      	b.n	616e <frameParse+0x19a>
    6002:	6873      	ldr	r3, [r6, #4]
    6004:	4698      	mov	r8, r3
    6006:	8a33      	ldrh	r3, [r6, #16]
    6008:	8063      	strh	r3, [r4, #2]
    600a:	4643      	mov	r3, r8
    600c:	785a      	ldrb	r2, [r3, #1]
    600e:	781b      	ldrb	r3, [r3, #0]
    6010:	0212      	lsls	r2, r2, #8
    6012:	4313      	orrs	r3, r2
    6014:	80e3      	strh	r3, [r4, #6]
    6016:	2302      	movs	r3, #2
    6018:	469a      	mov	sl, r3
    601a:	7833      	ldrb	r3, [r6, #0]
    601c:	075b      	lsls	r3, r3, #29
    601e:	d40f      	bmi.n	6040 <frameParse+0x6c>
    6020:	4b7f      	ldr	r3, [pc, #508]	; (6220 <frameParse+0x24c>)
    6022:	881b      	ldrh	r3, [r3, #0]
    6024:	e00e      	b.n	6044 <frameParse+0x70>
    6026:	7863      	ldrb	r3, [r4, #1]
    6028:	069a      	lsls	r2, r3, #26
    602a:	d400      	bmi.n	602e <frameParse+0x5a>
    602c:	e07c      	b.n	6128 <frameParse+0x154>
    602e:	6873      	ldr	r3, [r6, #4]
    6030:	4698      	mov	r8, r3
    6032:	8a33      	ldrh	r3, [r6, #16]
    6034:	8063      	strh	r3, [r4, #2]
    6036:	2308      	movs	r3, #8
    6038:	469a      	mov	sl, r3
    603a:	7833      	ldrb	r3, [r6, #0]
    603c:	075b      	lsls	r3, r3, #29
    603e:	d5ef      	bpl.n	6020 <frameParse+0x4c>
    6040:	2301      	movs	r3, #1
    6042:	425b      	negs	r3, r3
    6044:	2210      	movs	r2, #16
    6046:	80a3      	strh	r3, [r4, #4]
    6048:	7863      	ldrb	r3, [r4, #1]
    604a:	4691      	mov	r9, r2
    604c:	4693      	mov	fp, r2
    604e:	2708      	movs	r7, #8
    6050:	2104      	movs	r1, #4
    6052:	3a0d      	subs	r2, #13
    6054:	075b      	lsls	r3, r3, #29
    6056:	d400      	bmi.n	605a <frameParse+0x86>
    6058:	e082      	b.n	6160 <frameParse+0x18c>
    605a:	5cab      	ldrb	r3, [r5, r2]
    605c:	1869      	adds	r1, r5, r1
    605e:	7423      	strb	r3, [r4, #16]
    6060:	2204      	movs	r2, #4
    6062:	4b70      	ldr	r3, [pc, #448]	; (6224 <frameParse+0x250>)
    6064:	a811      	add	r0, sp, #68	; 0x44
    6066:	4798      	blx	r3
    6068:	19e9      	adds	r1, r5, r7
    606a:	2208      	movs	r2, #8
    606c:	4b6d      	ldr	r3, [pc, #436]	; (6224 <frameParse+0x250>)
    606e:	a812      	add	r0, sp, #72	; 0x48
    6070:	4798      	blx	r3
    6072:	465a      	mov	r2, fp
    6074:	7b33      	ldrb	r3, [r6, #12]
    6076:	4650      	mov	r0, sl
    6078:	1a9b      	subs	r3, r3, r2
    607a:	b2db      	uxtb	r3, r3
    607c:	001f      	movs	r7, r3
    607e:	9306      	str	r3, [sp, #24]
    6080:	4b69      	ldr	r3, [pc, #420]	; (6228 <frameParse+0x254>)
    6082:	4798      	blx	r3
    6084:	9001      	str	r0, [sp, #4]
    6086:	68b3      	ldr	r3, [r6, #8]
    6088:	465a      	mov	r2, fp
    608a:	9300      	str	r3, [sp, #0]
    608c:	a912      	add	r1, sp, #72	; 0x48
    608e:	003b      	movs	r3, r7
    6090:	0020      	movs	r0, r4
    6092:	4f66      	ldr	r7, [pc, #408]	; (622c <frameParse+0x258>)
    6094:	47b8      	blx	r7
    6096:	9005      	str	r0, [sp, #20]
    6098:	28ff      	cmp	r0, #255	; 0xff
    609a:	d061      	beq.n	6160 <frameParse+0x18c>
    609c:	88a2      	ldrh	r2, [r4, #4]
    609e:	4b64      	ldr	r3, [pc, #400]	; (6230 <frameParse+0x25c>)
    60a0:	429a      	cmp	r2, r3
    60a2:	d967      	bls.n	6174 <frameParse+0x1a0>
    60a4:	2310      	movs	r3, #16
    60a6:	7861      	ldrb	r1, [r4, #1]
    60a8:	469b      	mov	fp, r3
    60aa:	420b      	tst	r3, r1
    60ac:	d004      	beq.n	60b8 <frameParse+0xe4>
    60ae:	4b5c      	ldr	r3, [pc, #368]	; (6220 <frameParse+0x24c>)
    60b0:	881b      	ldrh	r3, [r3, #0]
    60b2:	429a      	cmp	r2, r3
    60b4:	d100      	bne.n	60b8 <frameParse+0xe4>
    60b6:	e0cf      	b.n	6258 <frameParse+0x284>
    60b8:	2303      	movs	r3, #3
    60ba:	444d      	add	r5, r9
    60bc:	400b      	ands	r3, r1
    60be:	2b01      	cmp	r3, #1
    60c0:	d05d      	beq.n	617e <frameParse+0x1aa>
    60c2:	2b00      	cmp	r3, #0
    60c4:	d14c      	bne.n	6160 <frameParse+0x18c>
    60c6:	4b5b      	ldr	r3, [pc, #364]	; (6234 <frameParse+0x260>)
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	3b06      	subs	r3, #6
    60cc:	2b01      	cmp	r3, #1
    60ce:	d847      	bhi.n	6160 <frameParse+0x18c>
    60d0:	88a3      	ldrh	r3, [r4, #4]
    60d2:	4a57      	ldr	r2, [pc, #348]	; (6230 <frameParse+0x25c>)
    60d4:	4293      	cmp	r3, r2
    60d6:	d800      	bhi.n	60da <frameParse+0x106>
    60d8:	e08d      	b.n	61f6 <frameParse+0x222>
    60da:	20ff      	movs	r0, #255	; 0xff
    60dc:	4a50      	ldr	r2, [pc, #320]	; (6220 <frameParse+0x24c>)
    60de:	8811      	ldrh	r1, [r2, #0]
    60e0:	4208      	tst	r0, r1
    60e2:	d100      	bne.n	60e6 <frameParse+0x112>
    60e4:	e092      	b.n	620c <frameParse+0x238>
    60e6:	8811      	ldrh	r1, [r2, #0]
    60e8:	0609      	lsls	r1, r1, #24
    60ea:	d500      	bpl.n	60ee <frameParse+0x11a>
    60ec:	e08e      	b.n	620c <frameParse+0x238>
    60ee:	4952      	ldr	r1, [pc, #328]	; (6238 <frameParse+0x264>)
    60f0:	428b      	cmp	r3, r1
    60f2:	d135      	bne.n	6160 <frameParse+0x18c>
    60f4:	8813      	ldrh	r3, [r2, #0]
    60f6:	8813      	ldrh	r3, [r2, #0]
    60f8:	061b      	lsls	r3, r3, #24
    60fa:	d500      	bpl.n	60fe <frameParse+0x12a>
    60fc:	e07b      	b.n	61f6 <frameParse+0x222>
    60fe:	21ff      	movs	r1, #255	; 0xff
    6100:	8812      	ldrh	r2, [r2, #0]
    6102:	88e3      	ldrh	r3, [r4, #6]
    6104:	438a      	bics	r2, r1
    6106:	429a      	cmp	r2, r3
    6108:	d02a      	beq.n	6160 <frameParse+0x18c>
    610a:	a814      	add	r0, sp, #80	; 0x50
    610c:	8003      	strh	r3, [r0, #0]
    610e:	9a05      	ldr	r2, [sp, #20]
    6110:	9b06      	ldr	r3, [sp, #24]
    6112:	6045      	str	r5, [r0, #4]
    6114:	1a9f      	subs	r7, r3, r2
    6116:	7207      	strb	r7, [r0, #8]
    6118:	7bb3      	ldrb	r3, [r6, #14]
    611a:	7283      	strb	r3, [r0, #10]
    611c:	7b73      	ldrb	r3, [r6, #13]
    611e:	7243      	strb	r3, [r0, #9]
    6120:	4b46      	ldr	r3, [pc, #280]	; (623c <frameParse+0x268>)
    6122:	681b      	ldr	r3, [r3, #0]
    6124:	4798      	blx	r3
    6126:	e01b      	b.n	6160 <frameParse+0x18c>
    6128:	2208      	movs	r2, #8
    612a:	4692      	mov	sl, r2
    612c:	6872      	ldr	r2, [r6, #4]
    612e:	7929      	ldrb	r1, [r5, #4]
    6130:	4690      	mov	r8, r2
    6132:	78ea      	ldrb	r2, [r5, #3]
    6134:	0209      	lsls	r1, r1, #8
    6136:	430a      	orrs	r2, r1
    6138:	79a9      	ldrb	r1, [r5, #6]
    613a:	8062      	strh	r2, [r4, #2]
    613c:	796a      	ldrb	r2, [r5, #5]
    613e:	0209      	lsls	r1, r1, #8
    6140:	430a      	orrs	r2, r1
    6142:	7a29      	ldrb	r1, [r5, #8]
    6144:	80a2      	strh	r2, [r4, #4]
    6146:	79ea      	ldrb	r2, [r5, #7]
    6148:	0209      	lsls	r1, r1, #8
    614a:	430a      	orrs	r2, r1
    614c:	80e2      	strh	r2, [r4, #6]
    614e:	2216      	movs	r2, #22
    6150:	270e      	movs	r7, #14
    6152:	4691      	mov	r9, r2
    6154:	4693      	mov	fp, r2
    6156:	210a      	movs	r1, #10
    6158:	3a0d      	subs	r2, #13
    615a:	075b      	lsls	r3, r3, #29
    615c:	d500      	bpl.n	6160 <frameParse+0x18c>
    615e:	e77c      	b.n	605a <frameParse+0x86>
    6160:	b01d      	add	sp, #116	; 0x74
    6162:	bc3c      	pop	{r2, r3, r4, r5}
    6164:	4690      	mov	r8, r2
    6166:	4699      	mov	r9, r3
    6168:	46a2      	mov	sl, r4
    616a:	46ab      	mov	fp, r5
    616c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    616e:	2202      	movs	r2, #2
    6170:	4692      	mov	sl, r2
    6172:	e7db      	b.n	612c <frameParse+0x158>
    6174:	4b2a      	ldr	r3, [pc, #168]	; (6220 <frameParse+0x24c>)
    6176:	881b      	ldrh	r3, [r3, #0]
    6178:	429a      	cmp	r2, r3
    617a:	d1f1      	bne.n	6160 <frameParse+0x18c>
    617c:	e792      	b.n	60a4 <frameParse+0xd0>
    617e:	782a      	ldrb	r2, [r5, #0]
    6180:	330e      	adds	r3, #14
    6182:	0011      	movs	r1, r2
    6184:	4399      	bics	r1, r3
    6186:	d038      	beq.n	61fa <frameParse+0x226>
    6188:	2930      	cmp	r1, #48	; 0x30
    618a:	d1e9      	bne.n	6160 <frameParse+0x18c>
    618c:	2a32      	cmp	r2, #50	; 0x32
    618e:	d1e7      	bne.n	6160 <frameParse+0x18c>
    6190:	4b2b      	ldr	r3, [pc, #172]	; (6240 <frameParse+0x26c>)
    6192:	4699      	mov	r9, r3
    6194:	7a1b      	ldrb	r3, [r3, #8]
    6196:	2b00      	cmp	r3, #0
    6198:	d0e2      	beq.n	6160 <frameParse+0x18c>
    619a:	2300      	movs	r3, #0
    619c:	469b      	mov	fp, r3
    619e:	4b29      	ldr	r3, [pc, #164]	; (6244 <frameParse+0x270>)
    61a0:	46a8      	mov	r8, r5
    61a2:	469a      	mov	sl, r3
    61a4:	465d      	mov	r5, fp
    61a6:	9f05      	ldr	r7, [sp, #20]
    61a8:	46b3      	mov	fp, r6
    61aa:	e00a      	b.n	61c2 <frameParse+0x1ee>
    61ac:	0031      	movs	r1, r6
    61ae:	4648      	mov	r0, r9
    61b0:	4b25      	ldr	r3, [pc, #148]	; (6248 <frameParse+0x274>)
    61b2:	4798      	blx	r3
    61b4:	464b      	mov	r3, r9
    61b6:	3501      	adds	r5, #1
    61b8:	7a1b      	ldrb	r3, [r3, #8]
    61ba:	b2ed      	uxtb	r5, r5
    61bc:	42ab      	cmp	r3, r5
    61be:	d800      	bhi.n	61c2 <frameParse+0x1ee>
    61c0:	e0e9      	b.n	6396 <frameParse+0x3c2>
    61c2:	2100      	movs	r1, #0
    61c4:	4648      	mov	r0, r9
    61c6:	47d0      	blx	sl
    61c8:	1e06      	subs	r6, r0, #0
    61ca:	d100      	bne.n	61ce <frameParse+0x1fa>
    61cc:	e0e3      	b.n	6396 <frameParse+0x3c2>
    61ce:	2320      	movs	r3, #32
    61d0:	7a22      	ldrb	r2, [r4, #8]
    61d2:	5cc3      	ldrb	r3, [r0, r3]
    61d4:	429a      	cmp	r2, r3
    61d6:	d1e9      	bne.n	61ac <frameParse+0x1d8>
    61d8:	88e2      	ldrh	r2, [r4, #6]
    61da:	8b83      	ldrh	r3, [r0, #28]
    61dc:	429a      	cmp	r2, r3
    61de:	d1e5      	bne.n	61ac <frameParse+0x1d8>
    61e0:	6883      	ldr	r3, [r0, #8]
    61e2:	2b00      	cmp	r3, #0
    61e4:	d003      	beq.n	61ee <frameParse+0x21a>
    61e6:	7c80      	ldrb	r0, [r0, #18]
    61e8:	0032      	movs	r2, r6
    61ea:	2100      	movs	r1, #0
    61ec:	4798      	blx	r3
    61ee:	0030      	movs	r0, r6
    61f0:	4b16      	ldr	r3, [pc, #88]	; (624c <frameParse+0x278>)
    61f2:	4798      	blx	r3
    61f4:	e7de      	b.n	61b4 <frameParse+0x1e0>
    61f6:	88e3      	ldrh	r3, [r4, #6]
    61f8:	e787      	b.n	610a <frameParse+0x136>
    61fa:	7bb3      	ldrb	r3, [r6, #14]
    61fc:	0020      	movs	r0, r4
    61fe:	9300      	str	r3, [sp, #0]
    6200:	4642      	mov	r2, r8
    6202:	002b      	movs	r3, r5
    6204:	4651      	mov	r1, sl
    6206:	4c12      	ldr	r4, [pc, #72]	; (6250 <frameParse+0x27c>)
    6208:	47a0      	blx	r4
    620a:	e7a9      	b.n	6160 <frameParse+0x18c>
    620c:	8811      	ldrh	r1, [r2, #0]
    620e:	0609      	lsls	r1, r1, #24
    6210:	d400      	bmi.n	6214 <frameParse+0x240>
    6212:	e770      	b.n	60f6 <frameParse+0x122>
    6214:	490f      	ldr	r1, [pc, #60]	; (6254 <frameParse+0x280>)
    6216:	428b      	cmp	r3, r1
    6218:	d000      	beq.n	621c <frameParse+0x248>
    621a:	e76c      	b.n	60f6 <frameParse+0x122>
    621c:	e7a0      	b.n	6160 <frameParse+0x18c>
    621e:	46c0      	nop			; (mov r8, r8)
    6220:	200012f0 	.word	0x200012f0
    6224:	0000754f 	.word	0x0000754f
    6228:	00007019 	.word	0x00007019
    622c:	00007145 	.word	0x00007145
    6230:	0000fffc 	.word	0x0000fffc
    6234:	20000294 	.word	0x20000294
    6238:	0000ffff 	.word	0x0000ffff
    623c:	200002ac 	.word	0x200002ac
    6240:	200012b0 	.word	0x200012b0
    6244:	00002d29 	.word	0x00002d29
    6248:	00002cf1 	.word	0x00002cf1
    624c:	00002c11 	.word	0x00002c11
    6250:	00006d5d 	.word	0x00006d5d
    6254:	0000fffd 	.word	0x0000fffd
    6258:	88e3      	ldrh	r3, [r4, #6]
    625a:	2078      	movs	r0, #120	; 0x78
    625c:	9308      	str	r3, [sp, #32]
    625e:	7a23      	ldrb	r3, [r4, #8]
    6260:	9309      	str	r3, [sp, #36]	; 0x24
    6262:	4b55      	ldr	r3, [pc, #340]	; (63b8 <frameParse+0x3e4>)
    6264:	4798      	blx	r3
    6266:	1e07      	subs	r7, r0, #0
    6268:	9007      	str	r0, [sp, #28]
    626a:	d100      	bne.n	626e <frameParse+0x29a>
    626c:	e08c      	b.n	6388 <frameParse+0x3b4>
    626e:	2330      	movs	r3, #48	; 0x30
    6270:	a808      	add	r0, sp, #32
    6272:	18c0      	adds	r0, r0, r3
    6274:	33cf      	adds	r3, #207	; 0xcf
    6276:	7003      	strb	r3, [r0, #0]
    6278:	2331      	movs	r3, #49	; 0x31
    627a:	a808      	add	r0, sp, #32
    627c:	18c0      	adds	r0, r0, r3
    627e:	7803      	ldrb	r3, [r0, #0]
    6280:	2003      	movs	r0, #3
    6282:	4383      	bics	r3, r0
    6284:	2001      	movs	r0, #1
    6286:	4318      	orrs	r0, r3
    6288:	23f7      	movs	r3, #247	; 0xf7
    628a:	4a4c      	ldr	r2, [pc, #304]	; (63bc <frameParse+0x3e8>)
    628c:	4003      	ands	r3, r0
    628e:	2004      	movs	r0, #4
    6290:	8811      	ldrh	r1, [r2, #0]
    6292:	2220      	movs	r2, #32
    6294:	4303      	orrs	r3, r0
    6296:	b2db      	uxtb	r3, r3
    6298:	4393      	bics	r3, r2
    629a:	325f      	adds	r2, #95	; 0x5f
    629c:	4013      	ands	r3, r2
    629e:	465a      	mov	r2, fp
    62a0:	2031      	movs	r0, #49	; 0x31
    62a2:	4393      	bics	r3, r2
    62a4:	aa08      	add	r2, sp, #32
    62a6:	1812      	adds	r2, r2, r0
    62a8:	7013      	strb	r3, [r2, #0]
    62aa:	4b45      	ldr	r3, [pc, #276]	; (63c0 <frameParse+0x3ec>)
    62ac:	aa08      	add	r2, sp, #32
    62ae:	881b      	ldrh	r3, [r3, #0]
    62b0:	86d1      	strh	r1, [r2, #54]	; 0x36
    62b2:	8653      	strh	r3, [r2, #50]	; 0x32
    62b4:	466b      	mov	r3, sp
    62b6:	8c18      	ldrh	r0, [r3, #32]
    62b8:	ab08      	add	r3, sp, #32
    62ba:	8690      	strh	r0, [r2, #52]	; 0x34
    62bc:	22ff      	movs	r2, #255	; 0xff
    62be:	703a      	strb	r2, [r7, #0]
    62c0:	2231      	movs	r2, #49	; 0x31
    62c2:	189b      	adds	r3, r3, r2
    62c4:	781b      	ldrb	r3, [r3, #0]
    62c6:	4a3f      	ldr	r2, [pc, #252]	; (63c4 <frameParse+0x3f0>)
    62c8:	707b      	strb	r3, [r7, #1]
    62ca:	7813      	ldrb	r3, [r2, #0]
    62cc:	3301      	adds	r3, #1
    62ce:	b2db      	uxtb	r3, r3
    62d0:	7013      	strb	r3, [r2, #0]
    62d2:	2231      	movs	r2, #49	; 0x31
    62d4:	70bb      	strb	r3, [r7, #2]
    62d6:	ab08      	add	r3, sp, #32
    62d8:	189b      	adds	r3, r3, r2
    62da:	781b      	ldrb	r3, [r3, #0]
    62dc:	3a11      	subs	r2, #17
    62de:	421a      	tst	r2, r3
    62e0:	d160      	bne.n	63a4 <frameParse+0x3d0>
    62e2:	aa08      	add	r2, sp, #32
    62e4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    62e6:	200a      	movs	r0, #10
    62e8:	70fa      	strb	r2, [r7, #3]
    62ea:	aa08      	add	r2, sp, #32
    62ec:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    62ee:	0a12      	lsrs	r2, r2, #8
    62f0:	713a      	strb	r2, [r7, #4]
    62f2:	aa08      	add	r2, sp, #32
    62f4:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    62f6:	717a      	strb	r2, [r7, #5]
    62f8:	aa08      	add	r2, sp, #32
    62fa:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    62fc:	0a12      	lsrs	r2, r2, #8
    62fe:	71ba      	strb	r2, [r7, #6]
    6300:	aa08      	add	r2, sp, #32
    6302:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    6304:	71fa      	strb	r2, [r7, #7]
    6306:	aa08      	add	r2, sp, #32
    6308:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    630a:	0a12      	lsrs	r2, r2, #8
    630c:	723a      	strb	r2, [r7, #8]
    630e:	2216      	movs	r2, #22
    6310:	2709      	movs	r7, #9
    6312:	920a      	str	r2, [sp, #40]	; 0x28
    6314:	9208      	str	r2, [sp, #32]
    6316:	3a08      	subs	r2, #8
    6318:	4693      	mov	fp, r2
    631a:	3a05      	subs	r2, #5
    631c:	075b      	lsls	r3, r3, #29
    631e:	d51c      	bpl.n	635a <frameParse+0x386>
    6320:	4b29      	ldr	r3, [pc, #164]	; (63c8 <frameParse+0x3f4>)
    6322:	2740      	movs	r7, #64	; 0x40
    6324:	6819      	ldr	r1, [r3, #0]
    6326:	2320      	movs	r3, #32
    6328:	5ccb      	ldrb	r3, [r1, r3]
    632a:	a908      	add	r1, sp, #32
    632c:	19c9      	adds	r1, r1, r7
    632e:	9f07      	ldr	r7, [sp, #28]
    6330:	700b      	strb	r3, [r1, #0]
    6332:	46bc      	mov	ip, r7
    6334:	4925      	ldr	r1, [pc, #148]	; (63cc <frameParse+0x3f8>)
    6336:	4460      	add	r0, ip
    6338:	6809      	ldr	r1, [r1, #0]
    633a:	9119      	str	r1, [sp, #100]	; 0x64
    633c:	910b      	str	r1, [sp, #44]	; 0x2c
    633e:	54bb      	strb	r3, [r7, r2]
    6340:	a919      	add	r1, sp, #100	; 0x64
    6342:	2204      	movs	r2, #4
    6344:	4b22      	ldr	r3, [pc, #136]	; (63d0 <frameParse+0x3fc>)
    6346:	4798      	blx	r3
    6348:	0039      	movs	r1, r7
    634a:	4459      	add	r1, fp
    634c:	0008      	movs	r0, r1
    634e:	2208      	movs	r2, #8
    6350:	4920      	ldr	r1, [pc, #128]	; (63d4 <frameParse+0x400>)
    6352:	4b1f      	ldr	r3, [pc, #124]	; (63d0 <frameParse+0x3fc>)
    6354:	4798      	blx	r3
    6356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6358:	9f08      	ldr	r7, [sp, #32]
    635a:	2324      	movs	r3, #36	; 0x24
    635c:	4669      	mov	r1, sp
    635e:	18c9      	adds	r1, r1, r3
    6360:	7809      	ldrb	r1, [r1, #0]
    6362:	9807      	ldr	r0, [sp, #28]
    6364:	330e      	adds	r3, #14
    6366:	7081      	strb	r1, [r0, #2]
    6368:	5483      	strb	r3, [r0, r2]
    636a:	2300      	movs	r3, #0
    636c:	9303      	str	r3, [sp, #12]
    636e:	9302      	str	r3, [sp, #8]
    6370:	4643      	mov	r3, r8
    6372:	9301      	str	r3, [sp, #4]
    6374:	4653      	mov	r3, sl
    6376:	0039      	movs	r1, r7
    6378:	9300      	str	r3, [sp, #0]
    637a:	2201      	movs	r2, #1
    637c:	0003      	movs	r3, r0
    637e:	4f16      	ldr	r7, [pc, #88]	; (63d8 <frameParse+0x404>)
    6380:	a814      	add	r0, sp, #80	; 0x50
    6382:	47b8      	blx	r7
    6384:	2800      	cmp	r0, #0
    6386:	d001      	beq.n	638c <frameParse+0x3b8>
    6388:	7861      	ldrb	r1, [r4, #1]
    638a:	e695      	b.n	60b8 <frameParse+0xe4>
    638c:	9807      	ldr	r0, [sp, #28]
    638e:	4b13      	ldr	r3, [pc, #76]	; (63dc <frameParse+0x408>)
    6390:	4798      	blx	r3
    6392:	7861      	ldrb	r1, [r4, #1]
    6394:	e690      	b.n	60b8 <frameParse+0xe4>
    6396:	2303      	movs	r3, #3
    6398:	7862      	ldrb	r2, [r4, #1]
    639a:	4645      	mov	r5, r8
    639c:	465e      	mov	r6, fp
    639e:	9705      	str	r7, [sp, #20]
    63a0:	4013      	ands	r3, r2
    63a2:	e68e      	b.n	60c2 <frameParse+0xee>
    63a4:	2210      	movs	r2, #16
    63a6:	920a      	str	r2, [sp, #40]	; 0x28
    63a8:	9208      	str	r2, [sp, #32]
    63aa:	3a08      	subs	r2, #8
    63ac:	4693      	mov	fp, r2
    63ae:	2004      	movs	r0, #4
    63b0:	3a05      	subs	r2, #5
    63b2:	2703      	movs	r7, #3
    63b4:	e7b2      	b.n	631c <frameParse+0x348>
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	00002bc9 	.word	0x00002bc9
    63bc:	200012f0 	.word	0x200012f0
    63c0:	200012dc 	.word	0x200012dc
    63c4:	200012c4 	.word	0x200012c4
    63c8:	200012ac 	.word	0x200012ac
    63cc:	2000132c 	.word	0x2000132c
    63d0:	0000754f 	.word	0x0000754f
    63d4:	2000004c 	.word	0x2000004c
    63d8:	00005e7d 	.word	0x00005e7d
    63dc:	00002c11 	.word	0x00002c11

000063e0 <sendDataFrame>:
    63e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    63e2:	4657      	mov	r7, sl
    63e4:	46de      	mov	lr, fp
    63e6:	464e      	mov	r6, r9
    63e8:	4645      	mov	r5, r8
    63ea:	b5e0      	push	{r5, r6, r7, lr}
    63ec:	b091      	sub	sp, #68	; 0x44
    63ee:	ab04      	add	r3, sp, #16
    63f0:	469c      	mov	ip, r3
    63f2:	270e      	movs	r7, #14
    63f4:	4b9a      	ldr	r3, [pc, #616]	; (6660 <sendDataFrame+0x280>)
    63f6:	4467      	add	r7, ip
    63f8:	469a      	mov	sl, r3
    63fa:	881b      	ldrh	r3, [r3, #0]
    63fc:	4693      	mov	fp, r2
    63fe:	b28a      	uxth	r2, r1
    6400:	0006      	movs	r6, r0
    6402:	9703      	str	r7, [sp, #12]
    6404:	8039      	strh	r1, [r7, #0]
    6406:	429a      	cmp	r2, r3
    6408:	d100      	bne.n	640c <sendDataFrame+0x2c>
    640a:	e0c3      	b.n	6594 <sendDataFrame+0x1b4>
    640c:	2800      	cmp	r0, #0
    640e:	d100      	bne.n	6412 <sendDataFrame+0x32>
    6410:	e0c7      	b.n	65a2 <sendDataFrame+0x1c2>
    6412:	2078      	movs	r0, #120	; 0x78
    6414:	4b93      	ldr	r3, [pc, #588]	; (6664 <sendDataFrame+0x284>)
    6416:	4798      	blx	r3
    6418:	4680      	mov	r8, r0
    641a:	2800      	cmp	r0, #0
    641c:	d100      	bne.n	6420 <sendDataFrame+0x40>
    641e:	e0bc      	b.n	659a <sendDataFrame+0x1ba>
    6420:	2108      	movs	r1, #8
    6422:	4b91      	ldr	r3, [pc, #580]	; (6668 <sendDataFrame+0x288>)
    6424:	ac08      	add	r4, sp, #32
    6426:	7862      	ldrb	r2, [r4, #1]
    6428:	881b      	ldrh	r3, [r3, #0]
    642a:	8bf5      	ldrh	r5, [r6, #30]
    642c:	8bb7      	ldrh	r7, [r6, #28]
    642e:	438a      	bics	r2, r1
    6430:	8063      	strh	r3, [r4, #2]
    6432:	2104      	movs	r1, #4
    6434:	2303      	movs	r3, #3
    6436:	80e5      	strh	r5, [r4, #6]
    6438:	7e75      	ldrb	r5, [r6, #25]
    643a:	430a      	orrs	r2, r1
    643c:	469c      	mov	ip, r3
    643e:	2120      	movs	r1, #32
    6440:	402b      	ands	r3, r5
    6442:	4699      	mov	r9, r3
    6444:	237f      	movs	r3, #127	; 0x7f
    6446:	b2d2      	uxtb	r2, r2
    6448:	438a      	bics	r2, r1
    644a:	4013      	ands	r3, r2
    644c:	4662      	mov	r2, ip
    644e:	4393      	bics	r3, r2
    6450:	320d      	adds	r2, #13
    6452:	402a      	ands	r2, r5
    6454:	464d      	mov	r5, r9
    6456:	431d      	orrs	r5, r3
    6458:	2310      	movs	r3, #16
    645a:	20ff      	movs	r0, #255	; 0xff
    645c:	439d      	bics	r5, r3
    645e:	4643      	mov	r3, r8
    6460:	4315      	orrs	r5, r2
    6462:	4642      	mov	r2, r8
    6464:	7065      	strb	r5, [r4, #1]
    6466:	80a7      	strh	r7, [r4, #4]
    6468:	7020      	strb	r0, [r4, #0]
    646a:	7018      	strb	r0, [r3, #0]
    646c:	7863      	ldrb	r3, [r4, #1]
    646e:	4d7f      	ldr	r5, [pc, #508]	; (666c <sendDataFrame+0x28c>)
    6470:	7053      	strb	r3, [r2, #1]
    6472:	782b      	ldrb	r3, [r5, #0]
    6474:	3301      	adds	r3, #1
    6476:	b2db      	uxtb	r3, r3
    6478:	7093      	strb	r3, [r2, #2]
    647a:	702b      	strb	r3, [r5, #0]
    647c:	7863      	ldrb	r3, [r4, #1]
    647e:	4219      	tst	r1, r3
    6480:	d100      	bne.n	6484 <sendDataFrame+0xa4>
    6482:	e096      	b.n	65b2 <sendDataFrame+0x1d2>
    6484:	2210      	movs	r2, #16
    6486:	2103      	movs	r1, #3
    6488:	0017      	movs	r7, r2
    648a:	9204      	str	r2, [sp, #16]
    648c:	3a08      	subs	r2, #8
    648e:	9206      	str	r2, [sp, #24]
    6490:	2003      	movs	r0, #3
    6492:	3a04      	subs	r2, #4
    6494:	9105      	str	r1, [sp, #20]
    6496:	075b      	lsls	r3, r3, #29
    6498:	d500      	bpl.n	649c <sendDataFrame+0xbc>
    649a:	e0a6      	b.n	65ea <sendDataFrame+0x20a>
    649c:	4b74      	ldr	r3, [pc, #464]	; (6670 <sendDataFrame+0x290>)
    649e:	4699      	mov	r9, r3
    64a0:	7cf3      	ldrb	r3, [r6, #19]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d100      	bne.n	64a8 <sendDataFrame+0xc8>
    64a6:	e0be      	b.n	6626 <sendDataFrame+0x246>
    64a8:	2320      	movs	r3, #32
    64aa:	4642      	mov	r2, r8
    64ac:	5cf3      	ldrb	r3, [r6, r3]
    64ae:	7093      	strb	r3, [r2, #2]
    64b0:	782b      	ldrb	r3, [r5, #0]
    64b2:	3b01      	subs	r3, #1
    64b4:	702b      	strb	r3, [r5, #0]
    64b6:	2538      	movs	r5, #56	; 0x38
    64b8:	0031      	movs	r1, r6
    64ba:	5d72      	ldrb	r2, [r6, r5]
    64bc:	3139      	adds	r1, #57	; 0x39
    64be:	4440      	add	r0, r8
    64c0:	47c8      	blx	r9
    64c2:	5d73      	ldrb	r3, [r6, r5]
    64c4:	2028      	movs	r0, #40	; 0x28
    64c6:	9304      	str	r3, [sp, #16]
    64c8:	7cb3      	ldrb	r3, [r6, #18]
    64ca:	9306      	str	r3, [sp, #24]
    64cc:	4b65      	ldr	r3, [pc, #404]	; (6664 <sendDataFrame+0x284>)
    64ce:	4798      	blx	r3
    64d0:	1e05      	subs	r5, r0, #0
    64d2:	d062      	beq.n	659a <sendDataFrame+0x1ba>
    64d4:	2300      	movs	r3, #0
    64d6:	7603      	strb	r3, [r0, #24]
    64d8:	7863      	ldrb	r3, [r4, #1]
    64da:	075b      	lsls	r3, r3, #29
    64dc:	d500      	bpl.n	64e0 <sendDataFrame+0x100>
    64de:	e0a7      	b.n	6630 <sendDataFrame+0x250>
    64e0:	9b03      	ldr	r3, [sp, #12]
    64e2:	785a      	ldrb	r2, [r3, #1]
    64e4:	781b      	ldrb	r3, [r3, #0]
    64e6:	0212      	lsls	r2, r2, #8
    64e8:	189b      	adds	r3, r3, r2
    64ea:	4a62      	ldr	r2, [pc, #392]	; (6674 <sendDataFrame+0x294>)
    64ec:	b29b      	uxth	r3, r3
    64ee:	4293      	cmp	r3, r2
    64f0:	d100      	bne.n	64f4 <sendDataFrame+0x114>
    64f2:	e0b1      	b.n	6658 <sendDataFrame+0x278>
    64f4:	2201      	movs	r2, #1
    64f6:	2100      	movs	r1, #0
    64f8:	2020      	movs	r0, #32
    64fa:	7e2b      	ldrb	r3, [r5, #24]
    64fc:	0152      	lsls	r2, r2, #5
    64fe:	4383      	bics	r3, r0
    6500:	4313      	orrs	r3, r2
    6502:	2204      	movs	r2, #4
    6504:	0089      	lsls	r1, r1, #2
    6506:	4393      	bics	r3, r2
    6508:	430b      	orrs	r3, r1
    650a:	2108      	movs	r1, #8
    650c:	438b      	bics	r3, r1
    650e:	762b      	strb	r3, [r5, #24]
    6510:	4653      	mov	r3, sl
    6512:	8819      	ldrh	r1, [r3, #0]
    6514:	4b57      	ldr	r3, [pc, #348]	; (6674 <sendDataFrame+0x294>)
    6516:	4299      	cmp	r1, r3
    6518:	d100      	bne.n	651c <sendDataFrame+0x13c>
    651a:	e09b      	b.n	6654 <sendDataFrame+0x274>
    651c:	7861      	ldrb	r1, [r4, #1]
    651e:	2301      	movs	r3, #1
    6520:	420a      	tst	r2, r1
    6522:	d007      	beq.n	6534 <sendDataFrame+0x154>
    6524:	2100      	movs	r1, #0
    6526:	4a54      	ldr	r2, [pc, #336]	; (6678 <sendDataFrame+0x298>)
    6528:	7812      	ldrb	r2, [r2, #0]
    652a:	3a06      	subs	r2, #6
    652c:	b2d2      	uxtb	r2, r2
    652e:	4293      	cmp	r3, r2
    6530:	4149      	adcs	r1, r1
    6532:	b2cb      	uxtb	r3, r1
    6534:	2221      	movs	r2, #33	; 0x21
    6536:	54ab      	strb	r3, [r5, r2]
    6538:	2320      	movs	r3, #32
    653a:	2001      	movs	r0, #1
    653c:	3a20      	subs	r2, #32
    653e:	54ea      	strb	r2, [r5, r3]
    6540:	7e2b      	ldrb	r3, [r5, #24]
    6542:	0899      	lsrs	r1, r3, #2
    6544:	4041      	eors	r1, r0
    6546:	400a      	ands	r2, r1
    6548:	2140      	movs	r1, #64	; 0x40
    654a:	0192      	lsls	r2, r2, #6
    654c:	438b      	bics	r3, r1
    654e:	4313      	orrs	r3, r2
    6550:	2280      	movs	r2, #128	; 0x80
    6552:	4252      	negs	r2, r2
    6554:	4313      	orrs	r3, r2
    6556:	762b      	strb	r3, [r5, #24]
    6558:	8863      	ldrh	r3, [r4, #2]
    655a:	002c      	movs	r4, r5
    655c:	846b      	strh	r3, [r5, #34]	; 0x22
    655e:	4643      	mov	r3, r8
    6560:	3408      	adds	r4, #8
    6562:	616b      	str	r3, [r5, #20]
    6564:	3282      	adds	r2, #130	; 0x82
    6566:	9903      	ldr	r1, [sp, #12]
    6568:	0020      	movs	r0, r4
    656a:	47c8      	blx	r9
    656c:	465b      	mov	r3, fp
    656e:	466a      	mov	r2, sp
    6570:	612b      	str	r3, [r5, #16]
    6572:	2325      	movs	r3, #37	; 0x25
    6574:	7e12      	ldrb	r2, [r2, #24]
    6576:	61ec      	str	r4, [r5, #28]
    6578:	54ea      	strb	r2, [r5, r3]
    657a:	9a04      	ldr	r2, [sp, #16]
    657c:	9b05      	ldr	r3, [sp, #20]
    657e:	4694      	mov	ip, r2
    6580:	4463      	add	r3, ip
    6582:	0018      	movs	r0, r3
    6584:	2324      	movs	r3, #36	; 0x24
    6586:	0029      	movs	r1, r5
    6588:	54e8      	strb	r0, [r5, r3]
    658a:	483c      	ldr	r0, [pc, #240]	; (667c <sendDataFrame+0x29c>)
    658c:	4b3c      	ldr	r3, [pc, #240]	; (6680 <sendDataFrame+0x2a0>)
    658e:	4798      	blx	r3
    6590:	2001      	movs	r0, #1
    6592:	e007      	b.n	65a4 <sendDataFrame+0x1c4>
    6594:	465b      	mov	r3, fp
    6596:	2b00      	cmp	r3, #0
    6598:	d003      	beq.n	65a2 <sendDataFrame+0x1c2>
    659a:	7cb0      	ldrb	r0, [r6, #18]
    659c:	0032      	movs	r2, r6
    659e:	2101      	movs	r1, #1
    65a0:	47d8      	blx	fp
    65a2:	2000      	movs	r0, #0
    65a4:	b011      	add	sp, #68	; 0x44
    65a6:	bc3c      	pop	{r2, r3, r4, r5}
    65a8:	4690      	mov	r8, r2
    65aa:	4699      	mov	r9, r3
    65ac:	46a2      	mov	sl, r4
    65ae:	46ab      	mov	fp, r5
    65b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65b2:	4641      	mov	r1, r8
    65b4:	8862      	ldrh	r2, [r4, #2]
    65b6:	38f6      	subs	r0, #246	; 0xf6
    65b8:	70ca      	strb	r2, [r1, #3]
    65ba:	8862      	ldrh	r2, [r4, #2]
    65bc:	0a12      	lsrs	r2, r2, #8
    65be:	710a      	strb	r2, [r1, #4]
    65c0:	88a2      	ldrh	r2, [r4, #4]
    65c2:	714a      	strb	r2, [r1, #5]
    65c4:	88a2      	ldrh	r2, [r4, #4]
    65c6:	0a12      	lsrs	r2, r2, #8
    65c8:	718a      	strb	r2, [r1, #6]
    65ca:	88e2      	ldrh	r2, [r4, #6]
    65cc:	71ca      	strb	r2, [r1, #7]
    65ce:	88e2      	ldrh	r2, [r4, #6]
    65d0:	0a12      	lsrs	r2, r2, #8
    65d2:	720a      	strb	r2, [r1, #8]
    65d4:	2216      	movs	r2, #22
    65d6:	2109      	movs	r1, #9
    65d8:	0017      	movs	r7, r2
    65da:	9204      	str	r2, [sp, #16]
    65dc:	3a08      	subs	r2, #8
    65de:	9206      	str	r2, [sp, #24]
    65e0:	9105      	str	r1, [sp, #20]
    65e2:	3a04      	subs	r2, #4
    65e4:	075b      	lsls	r3, r3, #29
    65e6:	d400      	bmi.n	65ea <sendDataFrame+0x20a>
    65e8:	e758      	b.n	649c <sendDataFrame+0xbc>
    65ea:	4b26      	ldr	r3, [pc, #152]	; (6684 <sendDataFrame+0x2a4>)
    65ec:	4442      	add	r2, r8
    65ee:	6819      	ldr	r1, [r3, #0]
    65f0:	2320      	movs	r3, #32
    65f2:	5ccb      	ldrb	r3, [r1, r3]
    65f4:	4924      	ldr	r1, [pc, #144]	; (6688 <sendDataFrame+0x2a8>)
    65f6:	7423      	strb	r3, [r4, #16]
    65f8:	6809      	ldr	r1, [r1, #0]
    65fa:	6161      	str	r1, [r4, #20]
    65fc:	4641      	mov	r1, r8
    65fe:	540b      	strb	r3, [r1, r0]
    6600:	4b1b      	ldr	r3, [pc, #108]	; (6670 <sendDataFrame+0x290>)
    6602:	0010      	movs	r0, r2
    6604:	a90d      	add	r1, sp, #52	; 0x34
    6606:	2204      	movs	r2, #4
    6608:	4699      	mov	r9, r3
    660a:	4798      	blx	r3
    660c:	9b06      	ldr	r3, [sp, #24]
    660e:	2208      	movs	r2, #8
    6610:	4443      	add	r3, r8
    6612:	0018      	movs	r0, r3
    6614:	491d      	ldr	r1, [pc, #116]	; (668c <sendDataFrame+0x2ac>)
    6616:	47c8      	blx	r9
    6618:	9b04      	ldr	r3, [sp, #16]
    661a:	0038      	movs	r0, r7
    661c:	9305      	str	r3, [sp, #20]
    661e:	7cf3      	ldrb	r3, [r6, #19]
    6620:	2b00      	cmp	r3, #0
    6622:	d000      	beq.n	6626 <sendDataFrame+0x246>
    6624:	e740      	b.n	64a8 <sendDataFrame+0xc8>
    6626:	4643      	mov	r3, r8
    6628:	789a      	ldrb	r2, [r3, #2]
    662a:	2320      	movs	r3, #32
    662c:	54f2      	strb	r2, [r6, r3]
    662e:	e742      	b.n	64b6 <sendDataFrame+0xd6>
    6630:	4b17      	ldr	r3, [pc, #92]	; (6690 <sendDataFrame+0x2b0>)
    6632:	2002      	movs	r0, #2
    6634:	4798      	blx	r3
    6636:	4643      	mov	r3, r8
    6638:	9000      	str	r0, [sp, #0]
    663a:	9a04      	ldr	r2, [sp, #16]
    663c:	9905      	ldr	r1, [sp, #20]
    663e:	0020      	movs	r0, r4
    6640:	4f14      	ldr	r7, [pc, #80]	; (6694 <sendDataFrame+0x2b4>)
    6642:	47b8      	blx	r7
    6644:	28ff      	cmp	r0, #255	; 0xff
    6646:	d0a8      	beq.n	659a <sendDataFrame+0x1ba>
    6648:	9b04      	ldr	r3, [sp, #16]
    664a:	469c      	mov	ip, r3
    664c:	4460      	add	r0, ip
    664e:	b2c3      	uxtb	r3, r0
    6650:	9304      	str	r3, [sp, #16]
    6652:	e745      	b.n	64e0 <sendDataFrame+0x100>
    6654:	2300      	movs	r3, #0
    6656:	e76d      	b.n	6534 <sendDataFrame+0x154>
    6658:	2200      	movs	r2, #0
    665a:	2101      	movs	r1, #1
    665c:	e74c      	b.n	64f8 <sendDataFrame+0x118>
    665e:	46c0      	nop			; (mov r8, r8)
    6660:	200012f0 	.word	0x200012f0
    6664:	00002bc9 	.word	0x00002bc9
    6668:	200012dc 	.word	0x200012dc
    666c:	200012c4 	.word	0x200012c4
    6670:	0000754f 	.word	0x0000754f
    6674:	0000ffff 	.word	0x0000ffff
    6678:	20000294 	.word	0x20000294
    667c:	200012e4 	.word	0x200012e4
    6680:	00002cf1 	.word	0x00002cf1
    6684:	200012ac 	.word	0x200012ac
    6688:	2000132c 	.word	0x2000132c
    668c:	2000004c 	.word	0x2000004c
    6690:	00007019 	.word	0x00007019
    6694:	0000703d 	.word	0x0000703d

00006698 <establishTimerExpired>:
    6698:	2205      	movs	r2, #5
    669a:	b510      	push	{r4, lr}
    669c:	4b04      	ldr	r3, [pc, #16]	; (66b0 <establishTimerExpired+0x18>)
    669e:	4c05      	ldr	r4, [pc, #20]	; (66b4 <establishTimerExpired+0x1c>)
    66a0:	701a      	strb	r2, [r3, #0]
    66a2:	2004      	movs	r0, #4
    66a4:	6823      	ldr	r3, [r4, #0]
    66a6:	4798      	blx	r3
    66a8:	2300      	movs	r3, #0
    66aa:	6023      	str	r3, [r4, #0]
    66ac:	bd10      	pop	{r4, pc}
    66ae:	46c0      	nop			; (mov r8, r8)
    66b0:	20000294 	.word	0x20000294
    66b4:	200002b4 	.word	0x200002b4

000066b8 <sendKeepAlive>:
    66b8:	b570      	push	{r4, r5, r6, lr}
    66ba:	2078      	movs	r0, #120	; 0x78
    66bc:	b08c      	sub	sp, #48	; 0x30
    66be:	4b15      	ldr	r3, [pc, #84]	; (6714 <sendKeepAlive+0x5c>)
    66c0:	4798      	blx	r3
    66c2:	1e04      	subs	r4, r0, #0
    66c4:	d023      	beq.n	670e <sendKeepAlive+0x56>
    66c6:	4b14      	ldr	r3, [pc, #80]	; (6718 <sendKeepAlive+0x60>)
    66c8:	4e14      	ldr	r6, [pc, #80]	; (671c <sendKeepAlive+0x64>)
    66ca:	8819      	ldrh	r1, [r3, #0]
    66cc:	8832      	ldrh	r2, [r6, #0]
    66ce:	b289      	uxth	r1, r1
    66d0:	ab04      	add	r3, sp, #16
    66d2:	20ff      	movs	r0, #255	; 0xff
    66d4:	4d12      	ldr	r5, [pc, #72]	; (6720 <sendKeepAlive+0x68>)
    66d6:	47a8      	blx	r5
    66d8:	0021      	movs	r1, r4
    66da:	4b12      	ldr	r3, [pc, #72]	; (6724 <sendKeepAlive+0x6c>)
    66dc:	a804      	add	r0, sp, #16
    66de:	4798      	blx	r3
    66e0:	2307      	movs	r3, #7
    66e2:	0005      	movs	r5, r0
    66e4:	5423      	strb	r3, [r4, r0]
    66e6:	3001      	adds	r0, #1
    66e8:	b2c0      	uxtb	r0, r0
    66ea:	1820      	adds	r0, r4, r0
    66ec:	2208      	movs	r2, #8
    66ee:	490e      	ldr	r1, [pc, #56]	; (6728 <sendKeepAlive+0x70>)
    66f0:	4b0e      	ldr	r3, [pc, #56]	; (672c <sendKeepAlive+0x74>)
    66f2:	4798      	blx	r3
    66f4:	4b0e      	ldr	r3, [pc, #56]	; (6730 <sendKeepAlive+0x78>)
    66f6:	9601      	str	r6, [sp, #4]
    66f8:	9303      	str	r3, [sp, #12]
    66fa:	2300      	movs	r3, #0
    66fc:	9302      	str	r3, [sp, #8]
    66fe:	3302      	adds	r3, #2
    6700:	9300      	str	r3, [sp, #0]
    6702:	2209      	movs	r2, #9
    6704:	0023      	movs	r3, r4
    6706:	0029      	movs	r1, r5
    6708:	a804      	add	r0, sp, #16
    670a:	4c0a      	ldr	r4, [pc, #40]	; (6734 <sendKeepAlive+0x7c>)
    670c:	47a0      	blx	r4
    670e:	b00c      	add	sp, #48	; 0x30
    6710:	bd70      	pop	{r4, r5, r6, pc}
    6712:	46c0      	nop			; (mov r8, r8)
    6714:	00002bc9 	.word	0x00002bc9
    6718:	200012f0 	.word	0x200012f0
    671c:	20000054 	.word	0x20000054
    6720:	00005db9 	.word	0x00005db9
    6724:	00005de5 	.word	0x00005de5
    6728:	2000004c 	.word	0x2000004c
    672c:	0000754f 	.word	0x0000754f
    6730:	00006b65 	.word	0x00006b65
    6734:	00005e7d 	.word	0x00005e7d

00006738 <ScanChannel>:
    6738:	b5f0      	push	{r4, r5, r6, r7, lr}
    673a:	46c6      	mov	lr, r8
    673c:	b500      	push	{lr}
    673e:	4c2d      	ldr	r4, [pc, #180]	; (67f4 <ScanChannel+0xbc>)
    6740:	b090      	sub	sp, #64	; 0x40
    6742:	7823      	ldrb	r3, [r4, #0]
    6744:	0005      	movs	r5, r0
    6746:	2b1a      	cmp	r3, #26
    6748:	d816      	bhi.n	6778 <ScanChannel+0x40>
    674a:	2601      	movs	r6, #1
    674c:	4f2a      	ldr	r7, [pc, #168]	; (67f8 <ScanChannel+0xc0>)
    674e:	e004      	b.n	675a <ScanChannel+0x22>
    6750:	3301      	adds	r3, #1
    6752:	b2db      	uxtb	r3, r3
    6754:	7023      	strb	r3, [r4, #0]
    6756:	2b1a      	cmp	r3, #26
    6758:	d80e      	bhi.n	6778 <ScanChannel+0x40>
    675a:	686a      	ldr	r2, [r5, #4]
    675c:	40da      	lsrs	r2, r3
    675e:	4216      	tst	r6, r2
    6760:	d0f6      	beq.n	6750 <ScanChannel+0x18>
    6762:	0021      	movs	r1, r4
    6764:	2000      	movs	r0, #0
    6766:	47b8      	blx	r7
    6768:	2800      	cmp	r0, #0
    676a:	d114      	bne.n	6796 <ScanChannel+0x5e>
    676c:	7823      	ldrb	r3, [r4, #0]
    676e:	3301      	adds	r3, #1
    6770:	b2db      	uxtb	r3, r3
    6772:	7023      	strb	r3, [r4, #0]
    6774:	2b1a      	cmp	r3, #26
    6776:	d9f0      	bls.n	675a <ScanChannel+0x22>
    6778:	2205      	movs	r2, #5
    677a:	4b20      	ldr	r3, [pc, #128]	; (67fc <ScanChannel+0xc4>)
    677c:	4c20      	ldr	r4, [pc, #128]	; (6800 <ScanChannel+0xc8>)
    677e:	701a      	strb	r2, [r3, #0]
    6780:	7868      	ldrb	r0, [r5, #1]
    6782:	6823      	ldr	r3, [r4, #0]
    6784:	0029      	movs	r1, r5
    6786:	4798      	blx	r3
    6788:	2300      	movs	r3, #0
    678a:	2000      	movs	r0, #0
    678c:	6023      	str	r3, [r4, #0]
    678e:	b010      	add	sp, #64	; 0x40
    6790:	bc04      	pop	{r2}
    6792:	4690      	mov	r8, r2
    6794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6796:	ab02      	add	r3, sp, #8
    6798:	469c      	mov	ip, r3
    679a:	2516      	movs	r5, #22
    679c:	2301      	movs	r3, #1
    679e:	4465      	add	r5, ip
    67a0:	425b      	negs	r3, r3
    67a2:	802b      	strh	r3, [r5, #0]
    67a4:	2078      	movs	r0, #120	; 0x78
    67a6:	4b17      	ldr	r3, [pc, #92]	; (6804 <ScanChannel+0xcc>)
    67a8:	4798      	blx	r3
    67aa:	0004      	movs	r4, r0
    67ac:	200a      	movs	r0, #10
    67ae:	2c00      	cmp	r4, #0
    67b0:	d0ed      	beq.n	678e <ScanChannel+0x56>
    67b2:	af08      	add	r7, sp, #32
    67b4:	9505      	str	r5, [sp, #20]
    67b6:	882a      	ldrh	r2, [r5, #0]
    67b8:	003b      	movs	r3, r7
    67ba:	4913      	ldr	r1, [pc, #76]	; (6808 <ScanChannel+0xd0>)
    67bc:	3809      	subs	r0, #9
    67be:	4d13      	ldr	r5, [pc, #76]	; (680c <ScanChannel+0xd4>)
    67c0:	47a8      	blx	r5
    67c2:	2220      	movs	r2, #32
    67c4:	787b      	ldrb	r3, [r7, #1]
    67c6:	0021      	movs	r1, r4
    67c8:	4313      	orrs	r3, r2
    67ca:	707b      	strb	r3, [r7, #1]
    67cc:	0038      	movs	r0, r7
    67ce:	4b10      	ldr	r3, [pc, #64]	; (6810 <ScanChannel+0xd8>)
    67d0:	4798      	blx	r3
    67d2:	4b10      	ldr	r3, [pc, #64]	; (6814 <ScanChannel+0xdc>)
    67d4:	5426      	strb	r6, [r4, r0]
    67d6:	9303      	str	r3, [sp, #12]
    67d8:	2300      	movs	r3, #0
    67da:	9302      	str	r3, [sp, #8]
    67dc:	9b05      	ldr	r3, [sp, #20]
    67de:	0001      	movs	r1, r0
    67e0:	9301      	str	r3, [sp, #4]
    67e2:	2302      	movs	r3, #2
    67e4:	2201      	movs	r2, #1
    67e6:	9300      	str	r3, [sp, #0]
    67e8:	0038      	movs	r0, r7
    67ea:	0023      	movs	r3, r4
    67ec:	4c0a      	ldr	r4, [pc, #40]	; (6818 <ScanChannel+0xe0>)
    67ee:	47a0      	blx	r4
    67f0:	e7cd      	b.n	678e <ScanChannel+0x56>
    67f2:	46c0      	nop			; (mov r8, r8)
    67f4:	200012bc 	.word	0x200012bc
    67f8:	00004a95 	.word	0x00004a95
    67fc:	20000294 	.word	0x20000294
    6800:	200002b8 	.word	0x200002b8
    6804:	00002bc9 	.word	0x00002bc9
    6808:	0000ffff 	.word	0x0000ffff
    680c:	00005db9 	.word	0x00005db9
    6810:	00005de5 	.word	0x00005de5
    6814:	000069d5 	.word	0x000069d5
    6818:	00005e7d 	.word	0x00005e7d

0000681c <scanDurationExpired>:
    681c:	b510      	push	{r4, lr}
    681e:	4b0d      	ldr	r3, [pc, #52]	; (6854 <scanDurationExpired+0x38>)
    6820:	4c0d      	ldr	r4, [pc, #52]	; (6858 <scanDurationExpired+0x3c>)
    6822:	781a      	ldrb	r2, [r3, #0]
    6824:	2301      	movs	r3, #1
    6826:	4093      	lsls	r3, r2
    6828:	6820      	ldr	r0, [r4, #0]
    682a:	6842      	ldr	r2, [r0, #4]
    682c:	439a      	bics	r2, r3
    682e:	6042      	str	r2, [r0, #4]
    6830:	4b0a      	ldr	r3, [pc, #40]	; (685c <scanDurationExpired+0x40>)
    6832:	4798      	blx	r3
    6834:	2800      	cmp	r0, #0
    6836:	d00b      	beq.n	6850 <scanDurationExpired+0x34>
    6838:	2205      	movs	r2, #5
    683a:	6823      	ldr	r3, [r4, #0]
    683c:	7018      	strb	r0, [r3, #0]
    683e:	4b08      	ldr	r3, [pc, #32]	; (6860 <scanDurationExpired+0x44>)
    6840:	6821      	ldr	r1, [r4, #0]
    6842:	4c08      	ldr	r4, [pc, #32]	; (6864 <scanDurationExpired+0x48>)
    6844:	701a      	strb	r2, [r3, #0]
    6846:	7848      	ldrb	r0, [r1, #1]
    6848:	6823      	ldr	r3, [r4, #0]
    684a:	4798      	blx	r3
    684c:	2300      	movs	r3, #0
    684e:	6023      	str	r3, [r4, #0]
    6850:	bd10      	pop	{r4, pc}
    6852:	46c0      	nop			; (mov r8, r8)
    6854:	200012bc 	.word	0x200012bc
    6858:	200002bc 	.word	0x200002bc
    685c:	00006739 	.word	0x00006739
    6860:	20000294 	.word	0x20000294
    6864:	200002b8 	.word	0x200002b8

00006868 <rxOffEdKeepAliveTimerHandler>:
    6868:	b5f0      	push	{r4, r5, r6, r7, lr}
    686a:	46ce      	mov	lr, r9
    686c:	4647      	mov	r7, r8
    686e:	22ff      	movs	r2, #255	; 0xff
    6870:	2516      	movs	r5, #22
    6872:	b580      	push	{r7, lr}
    6874:	4b23      	ldr	r3, [pc, #140]	; (6904 <rxOffEdKeepAliveTimerHandler+0x9c>)
    6876:	b08f      	sub	sp, #60	; 0x3c
    6878:	4698      	mov	r8, r3
    687a:	881b      	ldrh	r3, [r3, #0]
    687c:	446d      	add	r5, sp
    687e:	4393      	bics	r3, r2
    6880:	802b      	strh	r3, [r5, #0]
    6882:	2078      	movs	r0, #120	; 0x78
    6884:	4b20      	ldr	r3, [pc, #128]	; (6908 <rxOffEdKeepAliveTimerHandler+0xa0>)
    6886:	4798      	blx	r3
    6888:	1e06      	subs	r6, r0, #0
    688a:	d035      	beq.n	68f8 <rxOffEdKeepAliveTimerHandler+0x90>
    688c:	4c1f      	ldr	r4, [pc, #124]	; (690c <rxOffEdKeepAliveTimerHandler+0xa4>)
    688e:	4b20      	ldr	r3, [pc, #128]	; (6910 <rxOffEdKeepAliveTimerHandler+0xa8>)
    6890:	0020      	movs	r0, r4
    6892:	4798      	blx	r3
    6894:	4b1f      	ldr	r3, [pc, #124]	; (6914 <rxOffEdKeepAliveTimerHandler+0xac>)
    6896:	0020      	movs	r0, r4
    6898:	6123      	str	r3, [r4, #16]
    689a:	4b1f      	ldr	r3, [pc, #124]	; (6918 <rxOffEdKeepAliveTimerHandler+0xb0>)
    689c:	681b      	ldr	r3, [r3, #0]
    689e:	7a1a      	ldrb	r2, [r3, #8]
    68a0:	23fa      	movs	r3, #250	; 0xfa
    68a2:	009b      	lsls	r3, r3, #2
    68a4:	4353      	muls	r3, r2
    68a6:	6063      	str	r3, [r4, #4]
    68a8:	60a3      	str	r3, [r4, #8]
    68aa:	2300      	movs	r3, #0
    68ac:	7323      	strb	r3, [r4, #12]
    68ae:	4699      	mov	r9, r3
    68b0:	4b1a      	ldr	r3, [pc, #104]	; (691c <rxOffEdKeepAliveTimerHandler+0xb4>)
    68b2:	4798      	blx	r3
    68b4:	4643      	mov	r3, r8
    68b6:	8819      	ldrh	r1, [r3, #0]
    68b8:	ac06      	add	r4, sp, #24
    68ba:	0023      	movs	r3, r4
    68bc:	b289      	uxth	r1, r1
    68be:	882a      	ldrh	r2, [r5, #0]
    68c0:	2001      	movs	r0, #1
    68c2:	4f17      	ldr	r7, [pc, #92]	; (6920 <rxOffEdKeepAliveTimerHandler+0xb8>)
    68c4:	47b8      	blx	r7
    68c6:	2220      	movs	r2, #32
    68c8:	7863      	ldrb	r3, [r4, #1]
    68ca:	0031      	movs	r1, r6
    68cc:	4313      	orrs	r3, r2
    68ce:	22ef      	movs	r2, #239	; 0xef
    68d0:	4013      	ands	r3, r2
    68d2:	7063      	strb	r3, [r4, #1]
    68d4:	0020      	movs	r0, r4
    68d6:	4b13      	ldr	r3, [pc, #76]	; (6924 <rxOffEdKeepAliveTimerHandler+0xbc>)
    68d8:	4798      	blx	r3
    68da:	2331      	movs	r3, #49	; 0x31
    68dc:	5433      	strb	r3, [r6, r0]
    68de:	4b12      	ldr	r3, [pc, #72]	; (6928 <rxOffEdKeepAliveTimerHandler+0xc0>)
    68e0:	0001      	movs	r1, r0
    68e2:	9303      	str	r3, [sp, #12]
    68e4:	464b      	mov	r3, r9
    68e6:	9302      	str	r3, [sp, #8]
    68e8:	3302      	adds	r3, #2
    68ea:	9300      	str	r3, [sp, #0]
    68ec:	0020      	movs	r0, r4
    68ee:	9501      	str	r5, [sp, #4]
    68f0:	0033      	movs	r3, r6
    68f2:	2201      	movs	r2, #1
    68f4:	4c0d      	ldr	r4, [pc, #52]	; (692c <rxOffEdKeepAliveTimerHandler+0xc4>)
    68f6:	47a0      	blx	r4
    68f8:	b00f      	add	sp, #60	; 0x3c
    68fa:	bc0c      	pop	{r2, r3}
    68fc:	4690      	mov	r8, r2
    68fe:	4699      	mov	r9, r3
    6900:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6902:	46c0      	nop			; (mov r8, r8)
    6904:	200012f0 	.word	0x200012f0
    6908:	00002bc9 	.word	0x00002bc9
    690c:	200012f4 	.word	0x200012f4
    6910:	00002ded 	.word	0x00002ded
    6914:	00006869 	.word	0x00006869
    6918:	200012a8 	.word	0x200012a8
    691c:	00002e59 	.word	0x00002e59
    6920:	00005db9 	.word	0x00005db9
    6924:	00005de5 	.word	0x00005de5
    6928:	00006a91 	.word	0x00006a91
    692c:	00005e7d 	.word	0x00005e7d

00006930 <dataWaitIntervalTimerHandler>:
    6930:	b570      	push	{r4, r5, r6, lr}
    6932:	2500      	movs	r5, #0
    6934:	4c0a      	ldr	r4, [pc, #40]	; (6960 <dataWaitIntervalTimerHandler+0x30>)
    6936:	4b0b      	ldr	r3, [pc, #44]	; (6964 <dataWaitIntervalTimerHandler+0x34>)
    6938:	0020      	movs	r0, r4
    693a:	701d      	strb	r5, [r3, #0]
    693c:	4b0a      	ldr	r3, [pc, #40]	; (6968 <dataWaitIntervalTimerHandler+0x38>)
    693e:	4798      	blx	r3
    6940:	4b0a      	ldr	r3, [pc, #40]	; (696c <dataWaitIntervalTimerHandler+0x3c>)
    6942:	0020      	movs	r0, r4
    6944:	6123      	str	r3, [r4, #16]
    6946:	4b0a      	ldr	r3, [pc, #40]	; (6970 <dataWaitIntervalTimerHandler+0x40>)
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	7a1a      	ldrb	r2, [r3, #8]
    694c:	23fa      	movs	r3, #250	; 0xfa
    694e:	009b      	lsls	r3, r3, #2
    6950:	4353      	muls	r3, r2
    6952:	6063      	str	r3, [r4, #4]
    6954:	60a3      	str	r3, [r4, #8]
    6956:	4b07      	ldr	r3, [pc, #28]	; (6974 <dataWaitIntervalTimerHandler+0x44>)
    6958:	7325      	strb	r5, [r4, #12]
    695a:	4798      	blx	r3
    695c:	bd70      	pop	{r4, r5, r6, pc}
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	200012f4 	.word	0x200012f4
    6964:	200002b0 	.word	0x200002b0
    6968:	00002ded 	.word	0x00002ded
    696c:	00006869 	.word	0x00006869
    6970:	200012a8 	.word	0x200012a8
    6974:	00002e59 	.word	0x00002e59

00006978 <EstcommandConfcb>:
    6978:	b570      	push	{r4, r5, r6, lr}
    697a:	0010      	movs	r0, r2
    697c:	4b0e      	ldr	r3, [pc, #56]	; (69b8 <EstcommandConfcb+0x40>)
    697e:	000c      	movs	r4, r1
    6980:	4798      	blx	r3
    6982:	2c00      	cmp	r4, #0
    6984:	d009      	beq.n	699a <EstcommandConfcb+0x22>
    6986:	2205      	movs	r2, #5
    6988:	4b0c      	ldr	r3, [pc, #48]	; (69bc <EstcommandConfcb+0x44>)
    698a:	4d0d      	ldr	r5, [pc, #52]	; (69c0 <EstcommandConfcb+0x48>)
    698c:	701a      	strb	r2, [r3, #0]
    698e:	0020      	movs	r0, r4
    6990:	682b      	ldr	r3, [r5, #0]
    6992:	4798      	blx	r3
    6994:	2300      	movs	r3, #0
    6996:	602b      	str	r3, [r5, #0]
    6998:	bd70      	pop	{r4, r5, r6, pc}
    699a:	480a      	ldr	r0, [pc, #40]	; (69c4 <EstcommandConfcb+0x4c>)
    699c:	4b0a      	ldr	r3, [pc, #40]	; (69c8 <EstcommandConfcb+0x50>)
    699e:	6103      	str	r3, [r0, #16]
    69a0:	4b0a      	ldr	r3, [pc, #40]	; (69cc <EstcommandConfcb+0x54>)
    69a2:	681b      	ldr	r3, [r3, #0]
    69a4:	7a9a      	ldrb	r2, [r3, #10]
    69a6:	23fa      	movs	r3, #250	; 0xfa
    69a8:	009b      	lsls	r3, r3, #2
    69aa:	4353      	muls	r3, r2
    69ac:	6043      	str	r3, [r0, #4]
    69ae:	6083      	str	r3, [r0, #8]
    69b0:	4b07      	ldr	r3, [pc, #28]	; (69d0 <EstcommandConfcb+0x58>)
    69b2:	7304      	strb	r4, [r0, #12]
    69b4:	4798      	blx	r3
    69b6:	e7ef      	b.n	6998 <EstcommandConfcb+0x20>
    69b8:	00002c11 	.word	0x00002c11
    69bc:	20000294 	.word	0x20000294
    69c0:	200002b4 	.word	0x200002b4
    69c4:	2000130c 	.word	0x2000130c
    69c8:	00006699 	.word	0x00006699
    69cc:	200012a8 	.word	0x200012a8
    69d0:	00002e59 	.word	0x00002e59

000069d4 <beaconReqConfcb>:
    69d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69d6:	46ce      	mov	lr, r9
    69d8:	4647      	mov	r7, r8
    69da:	0010      	movs	r0, r2
    69dc:	b580      	push	{r7, lr}
    69de:	4b21      	ldr	r3, [pc, #132]	; (6a64 <beaconReqConfcb+0x90>)
    69e0:	000d      	movs	r5, r1
    69e2:	4798      	blx	r3
    69e4:	2d00      	cmp	r5, #0
    69e6:	d016      	beq.n	6a16 <beaconReqConfcb+0x42>
    69e8:	4c1f      	ldr	r4, [pc, #124]	; (6a68 <beaconReqConfcb+0x94>)
    69ea:	4b20      	ldr	r3, [pc, #128]	; (6a6c <beaconReqConfcb+0x98>)
    69ec:	6820      	ldr	r0, [r4, #0]
    69ee:	4798      	blx	r3
    69f0:	2800      	cmp	r0, #0
    69f2:	d103      	bne.n	69fc <beaconReqConfcb+0x28>
    69f4:	bc0c      	pop	{r2, r3}
    69f6:	4690      	mov	r8, r2
    69f8:	4699      	mov	r9, r3
    69fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69fc:	2205      	movs	r2, #5
    69fe:	6823      	ldr	r3, [r4, #0]
    6a00:	7018      	strb	r0, [r3, #0]
    6a02:	4b1b      	ldr	r3, [pc, #108]	; (6a70 <beaconReqConfcb+0x9c>)
    6a04:	6821      	ldr	r1, [r4, #0]
    6a06:	4c1b      	ldr	r4, [pc, #108]	; (6a74 <beaconReqConfcb+0xa0>)
    6a08:	701a      	strb	r2, [r3, #0]
    6a0a:	7848      	ldrb	r0, [r1, #1]
    6a0c:	6823      	ldr	r3, [r4, #0]
    6a0e:	4798      	blx	r3
    6a10:	2300      	movs	r3, #0
    6a12:	6023      	str	r3, [r4, #0]
    6a14:	e7ee      	b.n	69f4 <beaconReqConfcb+0x20>
    6a16:	2401      	movs	r4, #1
    6a18:	0022      	movs	r2, r4
    6a1a:	4e17      	ldr	r6, [pc, #92]	; (6a78 <beaconReqConfcb+0xa4>)
    6a1c:	4b17      	ldr	r3, [pc, #92]	; (6a7c <beaconReqConfcb+0xa8>)
    6a1e:	6133      	str	r3, [r6, #16]
    6a20:	4b17      	ldr	r3, [pc, #92]	; (6a80 <beaconReqConfcb+0xac>)
    6a22:	4699      	mov	r9, r3
    6a24:	781b      	ldrb	r3, [r3, #0]
    6a26:	409a      	lsls	r2, r3
    6a28:	0013      	movs	r3, r2
    6a2a:	3301      	adds	r3, #1
    6a2c:	0118      	lsls	r0, r3, #4
    6a2e:	1ac0      	subs	r0, r0, r3
    6a30:	4b14      	ldr	r3, [pc, #80]	; (6a84 <beaconReqConfcb+0xb0>)
    6a32:	0180      	lsls	r0, r0, #6
    6a34:	4698      	mov	r8, r3
    6a36:	4798      	blx	r3
    6a38:	21fa      	movs	r1, #250	; 0xfa
    6a3a:	4f13      	ldr	r7, [pc, #76]	; (6a88 <beaconReqConfcb+0xb4>)
    6a3c:	0089      	lsls	r1, r1, #2
    6a3e:	47b8      	blx	r7
    6a40:	464b      	mov	r3, r9
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	6070      	str	r0, [r6, #4]
    6a46:	409c      	lsls	r4, r3
    6a48:	3401      	adds	r4, #1
    6a4a:	0120      	lsls	r0, r4, #4
    6a4c:	1b00      	subs	r0, r0, r4
    6a4e:	0180      	lsls	r0, r0, #6
    6a50:	47c0      	blx	r8
    6a52:	21fa      	movs	r1, #250	; 0xfa
    6a54:	0089      	lsls	r1, r1, #2
    6a56:	47b8      	blx	r7
    6a58:	4b0c      	ldr	r3, [pc, #48]	; (6a8c <beaconReqConfcb+0xb8>)
    6a5a:	60b0      	str	r0, [r6, #8]
    6a5c:	0030      	movs	r0, r6
    6a5e:	7335      	strb	r5, [r6, #12]
    6a60:	4798      	blx	r3
    6a62:	e7c7      	b.n	69f4 <beaconReqConfcb+0x20>
    6a64:	00002c11 	.word	0x00002c11
    6a68:	200002bc 	.word	0x200002bc
    6a6c:	00006739 	.word	0x00006739
    6a70:	20000294 	.word	0x20000294
    6a74:	200002b8 	.word	0x200002b8
    6a78:	2000130c 	.word	0x2000130c
    6a7c:	0000681d 	.word	0x0000681d
    6a80:	20001309 	.word	0x20001309
    6a84:	00002421 	.word	0x00002421
    6a88:	000071fd 	.word	0x000071fd
    6a8c:	00002e59 	.word	0x00002e59

00006a90 <dataReqConfcb>:
    6a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a92:	0010      	movs	r0, r2
    6a94:	4b26      	ldr	r3, [pc, #152]	; (6b30 <dataReqConfcb+0xa0>)
    6a96:	000c      	movs	r4, r1
    6a98:	4798      	blx	r3
    6a9a:	2c00      	cmp	r4, #0
    6a9c:	d11b      	bne.n	6ad6 <dataReqConfcb+0x46>
    6a9e:	4b25      	ldr	r3, [pc, #148]	; (6b34 <dataReqConfcb+0xa4>)
    6aa0:	2514      	movs	r5, #20
    6aa2:	781b      	ldrb	r3, [r3, #0]
    6aa4:	2b0a      	cmp	r3, #10
    6aa6:	d800      	bhi.n	6aaa <dataReqConfcb+0x1a>
    6aa8:	351e      	adds	r5, #30
    6aaa:	4c23      	ldr	r4, [pc, #140]	; (6b38 <dataReqConfcb+0xa8>)
    6aac:	4b23      	ldr	r3, [pc, #140]	; (6b3c <dataReqConfcb+0xac>)
    6aae:	0020      	movs	r0, r4
    6ab0:	4798      	blx	r3
    6ab2:	4b23      	ldr	r3, [pc, #140]	; (6b40 <dataReqConfcb+0xb0>)
    6ab4:	0020      	movs	r0, r4
    6ab6:	6123      	str	r3, [r4, #16]
    6ab8:	2300      	movs	r3, #0
    6aba:	7323      	strb	r3, [r4, #12]
    6abc:	4b21      	ldr	r3, [pc, #132]	; (6b44 <dataReqConfcb+0xb4>)
    6abe:	6065      	str	r5, [r4, #4]
    6ac0:	60a5      	str	r5, [r4, #8]
    6ac2:	4798      	blx	r3
    6ac4:	2201      	movs	r2, #1
    6ac6:	4b20      	ldr	r3, [pc, #128]	; (6b48 <dataReqConfcb+0xb8>)
    6ac8:	4e20      	ldr	r6, [pc, #128]	; (6b4c <dataReqConfcb+0xbc>)
    6aca:	701a      	strb	r2, [r3, #0]
    6acc:	6833      	ldr	r3, [r6, #0]
    6ace:	7a5a      	ldrb	r2, [r3, #9]
    6ad0:	4b1f      	ldr	r3, [pc, #124]	; (6b50 <dataReqConfcb+0xc0>)
    6ad2:	701a      	strb	r2, [r3, #0]
    6ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ad6:	4d18      	ldr	r5, [pc, #96]	; (6b38 <dataReqConfcb+0xa8>)
    6ad8:	4f18      	ldr	r7, [pc, #96]	; (6b3c <dataReqConfcb+0xac>)
    6ada:	0028      	movs	r0, r5
    6adc:	47b8      	blx	r7
    6ade:	4b1d      	ldr	r3, [pc, #116]	; (6b54 <dataReqConfcb+0xc4>)
    6ae0:	4e1a      	ldr	r6, [pc, #104]	; (6b4c <dataReqConfcb+0xbc>)
    6ae2:	612b      	str	r3, [r5, #16]
    6ae4:	6833      	ldr	r3, [r6, #0]
    6ae6:	0028      	movs	r0, r5
    6ae8:	7a1a      	ldrb	r2, [r3, #8]
    6aea:	23fa      	movs	r3, #250	; 0xfa
    6aec:	009b      	lsls	r3, r3, #2
    6aee:	4353      	muls	r3, r2
    6af0:	606b      	str	r3, [r5, #4]
    6af2:	60ab      	str	r3, [r5, #8]
    6af4:	2300      	movs	r3, #0
    6af6:	732b      	strb	r3, [r5, #12]
    6af8:	4b12      	ldr	r3, [pc, #72]	; (6b44 <dataReqConfcb+0xb4>)
    6afa:	4798      	blx	r3
    6afc:	2c03      	cmp	r4, #3
    6afe:	d1e5      	bne.n	6acc <dataReqConfcb+0x3c>
    6b00:	4a13      	ldr	r2, [pc, #76]	; (6b50 <dataReqConfcb+0xc0>)
    6b02:	7813      	ldrb	r3, [r2, #0]
    6b04:	2b00      	cmp	r3, #0
    6b06:	d0e5      	beq.n	6ad4 <dataReqConfcb+0x44>
    6b08:	3b01      	subs	r3, #1
    6b0a:	b2db      	uxtb	r3, r3
    6b0c:	7013      	strb	r3, [r2, #0]
    6b0e:	2b00      	cmp	r3, #0
    6b10:	d1e0      	bne.n	6ad4 <dataReqConfcb+0x44>
    6b12:	0028      	movs	r0, r5
    6b14:	47b8      	blx	r7
    6b16:	2208      	movs	r2, #8
    6b18:	4b0f      	ldr	r3, [pc, #60]	; (6b58 <dataReqConfcb+0xc8>)
    6b1a:	701a      	strb	r2, [r3, #0]
    6b1c:	4b0f      	ldr	r3, [pc, #60]	; (6b5c <dataReqConfcb+0xcc>)
    6b1e:	3a09      	subs	r2, #9
    6b20:	801a      	strh	r2, [r3, #0]
    6b22:	4b0f      	ldr	r3, [pc, #60]	; (6b60 <dataReqConfcb+0xd0>)
    6b24:	681b      	ldr	r3, [r3, #0]
    6b26:	2b00      	cmp	r3, #0
    6b28:	d0d4      	beq.n	6ad4 <dataReqConfcb+0x44>
    6b2a:	4798      	blx	r3
    6b2c:	e7d2      	b.n	6ad4 <dataReqConfcb+0x44>
    6b2e:	46c0      	nop			; (mov r8, r8)
    6b30:	00002c11 	.word	0x00002c11
    6b34:	200012bc 	.word	0x200012bc
    6b38:	200012f4 	.word	0x200012f4
    6b3c:	00002ded 	.word	0x00002ded
    6b40:	00006931 	.word	0x00006931
    6b44:	00002e59 	.word	0x00002e59
    6b48:	200002b0 	.word	0x200002b0
    6b4c:	200012a8 	.word	0x200012a8
    6b50:	20001308 	.word	0x20001308
    6b54:	00006869 	.word	0x00006869
    6b58:	20000294 	.word	0x20000294
    6b5c:	200012f0 	.word	0x200012f0
    6b60:	20001328 	.word	0x20001328

00006b64 <keepAliveReqConfcb>:
    6b64:	b570      	push	{r4, r5, r6, lr}
    6b66:	0015      	movs	r5, r2
    6b68:	22ff      	movs	r2, #255	; 0xff
    6b6a:	4c14      	ldr	r4, [pc, #80]	; (6bbc <keepAliveReqConfcb+0x58>)
    6b6c:	8823      	ldrh	r3, [r4, #0]
    6b6e:	421a      	tst	r2, r3
    6b70:	d103      	bne.n	6b7a <keepAliveReqConfcb+0x16>
    6b72:	0028      	movs	r0, r5
    6b74:	4b12      	ldr	r3, [pc, #72]	; (6bc0 <keepAliveReqConfcb+0x5c>)
    6b76:	4798      	blx	r3
    6b78:	bd70      	pop	{r4, r5, r6, pc}
    6b7a:	2903      	cmp	r1, #3
    6b7c:	d005      	beq.n	6b8a <keepAliveReqConfcb+0x26>
    6b7e:	4b11      	ldr	r3, [pc, #68]	; (6bc4 <keepAliveReqConfcb+0x60>)
    6b80:	681b      	ldr	r3, [r3, #0]
    6b82:	7a5a      	ldrb	r2, [r3, #9]
    6b84:	4b10      	ldr	r3, [pc, #64]	; (6bc8 <keepAliveReqConfcb+0x64>)
    6b86:	701a      	strb	r2, [r3, #0]
    6b88:	e7f3      	b.n	6b72 <keepAliveReqConfcb+0xe>
    6b8a:	4a0f      	ldr	r2, [pc, #60]	; (6bc8 <keepAliveReqConfcb+0x64>)
    6b8c:	7813      	ldrb	r3, [r2, #0]
    6b8e:	2b00      	cmp	r3, #0
    6b90:	d0ef      	beq.n	6b72 <keepAliveReqConfcb+0xe>
    6b92:	3b01      	subs	r3, #1
    6b94:	b2db      	uxtb	r3, r3
    6b96:	7013      	strb	r3, [r2, #0]
    6b98:	2b00      	cmp	r3, #0
    6b9a:	d1ea      	bne.n	6b72 <keepAliveReqConfcb+0xe>
    6b9c:	4b0b      	ldr	r3, [pc, #44]	; (6bcc <keepAliveReqConfcb+0x68>)
    6b9e:	480c      	ldr	r0, [pc, #48]	; (6bd0 <keepAliveReqConfcb+0x6c>)
    6ba0:	4798      	blx	r3
    6ba2:	2208      	movs	r2, #8
    6ba4:	4b0b      	ldr	r3, [pc, #44]	; (6bd4 <keepAliveReqConfcb+0x70>)
    6ba6:	701a      	strb	r2, [r3, #0]
    6ba8:	2301      	movs	r3, #1
    6baa:	425b      	negs	r3, r3
    6bac:	8023      	strh	r3, [r4, #0]
    6bae:	4b0a      	ldr	r3, [pc, #40]	; (6bd8 <keepAliveReqConfcb+0x74>)
    6bb0:	681b      	ldr	r3, [r3, #0]
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d0dd      	beq.n	6b72 <keepAliveReqConfcb+0xe>
    6bb6:	4798      	blx	r3
    6bb8:	e7db      	b.n	6b72 <keepAliveReqConfcb+0xe>
    6bba:	46c0      	nop			; (mov r8, r8)
    6bbc:	200012f0 	.word	0x200012f0
    6bc0:	00002c11 	.word	0x00002c11
    6bc4:	200012a8 	.word	0x200012a8
    6bc8:	20001308 	.word	0x20001308
    6bcc:	00002ded 	.word	0x00002ded
    6bd0:	200012f4 	.word	0x200012f4
    6bd4:	20000294 	.word	0x20000294
    6bd8:	20001328 	.word	0x20001328

00006bdc <MiApp_EstablishConnection>:
    6bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bde:	46ce      	mov	lr, r9
    6be0:	4647      	mov	r7, r8
    6be2:	b580      	push	{r7, lr}
    6be4:	001e      	movs	r6, r3
    6be6:	4b2e      	ldr	r3, [pc, #184]	; (6ca0 <MiApp_EstablishConnection+0xc4>)
    6be8:	b08f      	sub	sp, #60	; 0x3c
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	0004      	movs	r4, r0
    6bee:	681b      	ldr	r3, [r3, #0]
    6bf0:	0015      	movs	r5, r2
    6bf2:	9305      	str	r3, [sp, #20]
    6bf4:	4b2b      	ldr	r3, [pc, #172]	; (6ca4 <MiApp_EstablishConnection+0xc8>)
    6bf6:	4798      	blx	r3
    6bf8:	40e0      	lsrs	r0, r4
    6bfa:	2401      	movs	r4, #1
    6bfc:	07c3      	lsls	r3, r0, #31
    6bfe:	d507      	bpl.n	6c10 <MiApp_EstablishConnection+0x34>
    6c00:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6c02:	2b00      	cmp	r3, #0
    6c04:	d004      	beq.n	6c10 <MiApp_EstablishConnection+0x34>
    6c06:	4f28      	ldr	r7, [pc, #160]	; (6ca8 <MiApp_EstablishConnection+0xcc>)
    6c08:	783b      	ldrb	r3, [r7, #0]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d106      	bne.n	6c1c <MiApp_EstablishConnection+0x40>
    6c0e:	2400      	movs	r4, #0
    6c10:	0020      	movs	r0, r4
    6c12:	b00f      	add	sp, #60	; 0x3c
    6c14:	bc0c      	pop	{r2, r3}
    6c16:	4690      	mov	r8, r2
    6c18:	4699      	mov	r9, r3
    6c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c1c:	2078      	movs	r0, #120	; 0x78
    6c1e:	4b23      	ldr	r3, [pc, #140]	; (6cac <MiApp_EstablishConnection+0xd0>)
    6c20:	4798      	blx	r3
    6c22:	4680      	mov	r8, r0
    6c24:	2800      	cmp	r0, #0
    6c26:	d0f2      	beq.n	6c0e <MiApp_EstablishConnection+0x32>
    6c28:	2304      	movs	r3, #4
    6c2a:	703b      	strb	r3, [r7, #0]
    6c2c:	786b      	ldrb	r3, [r5, #1]
    6c2e:	782a      	ldrb	r2, [r5, #0]
    6c30:	021b      	lsls	r3, r3, #8
    6c32:	18d2      	adds	r2, r2, r3
    6c34:	b292      	uxth	r2, r2
    6c36:	ab06      	add	r3, sp, #24
    6c38:	491d      	ldr	r1, [pc, #116]	; (6cb0 <MiApp_EstablishConnection+0xd4>)
    6c3a:	2001      	movs	r0, #1
    6c3c:	4f1d      	ldr	r7, [pc, #116]	; (6cb4 <MiApp_EstablishConnection+0xd8>)
    6c3e:	47b8      	blx	r7
    6c40:	466b      	mov	r3, sp
    6c42:	2220      	movs	r2, #32
    6c44:	7e5b      	ldrb	r3, [r3, #25]
    6c46:	4641      	mov	r1, r8
    6c48:	4313      	orrs	r3, r2
    6c4a:	466a      	mov	r2, sp
    6c4c:	a806      	add	r0, sp, #24
    6c4e:	7653      	strb	r3, [r2, #25]
    6c50:	4b19      	ldr	r3, [pc, #100]	; (6cb8 <MiApp_EstablishConnection+0xdc>)
    6c52:	4798      	blx	r3
    6c54:	4642      	mov	r2, r8
    6c56:	2303      	movs	r3, #3
    6c58:	5413      	strb	r3, [r2, r0]
    6c5a:	0003      	movs	r3, r0
    6c5c:	3301      	adds	r3, #1
    6c5e:	b2db      	uxtb	r3, r3
    6c60:	54d4      	strb	r4, [r2, r3]
    6c62:	0003      	movs	r3, r0
    6c64:	4681      	mov	r9, r0
    6c66:	3302      	adds	r3, #2
    6c68:	3003      	adds	r0, #3
    6c6a:	b2db      	uxtb	r3, r3
    6c6c:	b2c0      	uxtb	r0, r0
    6c6e:	54d6      	strb	r6, [r2, r3]
    6c70:	a905      	add	r1, sp, #20
    6c72:	2204      	movs	r2, #4
    6c74:	4b11      	ldr	r3, [pc, #68]	; (6cbc <MiApp_EstablishConnection+0xe0>)
    6c76:	4440      	add	r0, r8
    6c78:	4798      	blx	r3
    6c7a:	4b11      	ldr	r3, [pc, #68]	; (6cc0 <MiApp_EstablishConnection+0xe4>)
    6c7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6c7e:	4c11      	ldr	r4, [pc, #68]	; (6cc4 <MiApp_EstablishConnection+0xe8>)
    6c80:	601a      	str	r2, [r3, #0]
    6c82:	4b11      	ldr	r3, [pc, #68]	; (6cc8 <MiApp_EstablishConnection+0xec>)
    6c84:	9501      	str	r5, [sp, #4]
    6c86:	9303      	str	r3, [sp, #12]
    6c88:	2300      	movs	r3, #0
    6c8a:	9302      	str	r3, [sp, #8]
    6c8c:	3302      	adds	r3, #2
    6c8e:	9300      	str	r3, [sp, #0]
    6c90:	2207      	movs	r2, #7
    6c92:	4643      	mov	r3, r8
    6c94:	4649      	mov	r1, r9
    6c96:	a806      	add	r0, sp, #24
    6c98:	47a0      	blx	r4
    6c9a:	0004      	movs	r4, r0
    6c9c:	e7b8      	b.n	6c10 <MiApp_EstablishConnection+0x34>
    6c9e:	46c0      	nop			; (mov r8, r8)
    6ca0:	200012a8 	.word	0x200012a8
    6ca4:	00002425 	.word	0x00002425
    6ca8:	20000294 	.word	0x20000294
    6cac:	00002bc9 	.word	0x00002bc9
    6cb0:	0000ffff 	.word	0x0000ffff
    6cb4:	00005db9 	.word	0x00005db9
    6cb8:	00005de5 	.word	0x00005de5
    6cbc:	0000754f 	.word	0x0000754f
    6cc0:	200002b4 	.word	0x200002b4
    6cc4:	00005e7d 	.word	0x00005e7d
    6cc8:	00006979 	.word	0x00006979

00006ccc <MiApp_SearchConnection>:
    6ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cce:	0003      	movs	r3, r0
    6cd0:	2001      	movs	r0, #1
    6cd2:	2b0e      	cmp	r3, #14
    6cd4:	d80a      	bhi.n	6cec <MiApp_SearchConnection+0x20>
    6cd6:	2a00      	cmp	r2, #0
    6cd8:	d008      	beq.n	6cec <MiApp_SearchConnection+0x20>
    6cda:	4d18      	ldr	r5, [pc, #96]	; (6d3c <MiApp_SearchConnection+0x70>)
    6cdc:	2604      	movs	r6, #4
    6cde:	782c      	ldrb	r4, [r5, #0]
    6ce0:	0027      	movs	r7, r4
    6ce2:	43b7      	bics	r7, r6
    6ce4:	2f01      	cmp	r7, #1
    6ce6:	d002      	beq.n	6cee <MiApp_SearchConnection+0x22>
    6ce8:	2c08      	cmp	r4, #8
    6cea:	d000      	beq.n	6cee <MiApp_SearchConnection+0x22>
    6cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cee:	2003      	movs	r0, #3
    6cf0:	7028      	strb	r0, [r5, #0]
    6cf2:	2500      	movs	r5, #0
    6cf4:	4812      	ldr	r0, [pc, #72]	; (6d40 <MiApp_SearchConnection+0x74>)
    6cf6:	4c13      	ldr	r4, [pc, #76]	; (6d44 <MiApp_SearchConnection+0x78>)
    6cf8:	7003      	strb	r3, [r0, #0]
    6cfa:	4b13      	ldr	r3, [pc, #76]	; (6d48 <MiApp_SearchConnection+0x7c>)
    6cfc:	681b      	ldr	r3, [r3, #0]
    6cfe:	691b      	ldr	r3, [r3, #16]
    6d00:	6023      	str	r3, [r4, #0]
    6d02:	705d      	strb	r5, [r3, #1]
    6d04:	2308      	movs	r3, #8
    6d06:	6820      	ldr	r0, [r4, #0]
    6d08:	7003      	strb	r3, [r0, #0]
    6d0a:	6823      	ldr	r3, [r4, #0]
    6d0c:	6059      	str	r1, [r3, #4]
    6d0e:	4b0f      	ldr	r3, [pc, #60]	; (6d4c <MiApp_SearchConnection+0x80>)
    6d10:	601a      	str	r2, [r3, #0]
    6d12:	4b0f      	ldr	r3, [pc, #60]	; (6d50 <MiApp_SearchConnection+0x84>)
    6d14:	4798      	blx	r3
    6d16:	4e0f      	ldr	r6, [pc, #60]	; (6d54 <MiApp_SearchConnection+0x88>)
    6d18:	2101      	movs	r1, #1
    6d1a:	7035      	strb	r5, [r6, #0]
    6d1c:	2201      	movs	r2, #1
    6d1e:	07c3      	lsls	r3, r0, #31
    6d20:	d501      	bpl.n	6d26 <MiApp_SearchConnection+0x5a>
    6d22:	e006      	b.n	6d32 <MiApp_SearchConnection+0x66>
    6d24:	0019      	movs	r1, r3
    6d26:	1c4b      	adds	r3, r1, #1
    6d28:	0052      	lsls	r2, r2, #1
    6d2a:	b2db      	uxtb	r3, r3
    6d2c:	4202      	tst	r2, r0
    6d2e:	d0f9      	beq.n	6d24 <MiApp_SearchConnection+0x58>
    6d30:	7031      	strb	r1, [r6, #0]
    6d32:	6820      	ldr	r0, [r4, #0]
    6d34:	4b08      	ldr	r3, [pc, #32]	; (6d58 <MiApp_SearchConnection+0x8c>)
    6d36:	4798      	blx	r3
    6d38:	e7d8      	b.n	6cec <MiApp_SearchConnection+0x20>
    6d3a:	46c0      	nop			; (mov r8, r8)
    6d3c:	20000294 	.word	0x20000294
    6d40:	20001309 	.word	0x20001309
    6d44:	200002bc 	.word	0x200002bc
    6d48:	200012a8 	.word	0x200012a8
    6d4c:	200002b8 	.word	0x200002b8
    6d50:	00002425 	.word	0x00002425
    6d54:	200012bc 	.word	0x200012bc
    6d58:	00006739 	.word	0x00006739

00006d5c <handleJoinMessage>:
    6d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d5e:	4657      	mov	r7, sl
    6d60:	464e      	mov	r6, r9
    6d62:	4645      	mov	r5, r8
    6d64:	46de      	mov	lr, fp
    6d66:	b5e0      	push	{r5, r6, r7, lr}
    6d68:	001d      	movs	r5, r3
    6d6a:	782c      	ldrb	r4, [r5, #0]
    6d6c:	ab0a      	add	r3, sp, #40	; 0x28
    6d6e:	0006      	movs	r6, r0
    6d70:	781f      	ldrb	r7, [r3, #0]
    6d72:	2c04      	cmp	r4, #4
    6d74:	d03a      	beq.n	6dec <handleJoinMessage+0x90>
    6d76:	2c08      	cmp	r4, #8
    6d78:	d029      	beq.n	6dce <handleJoinMessage+0x72>
    6d7a:	2c02      	cmp	r4, #2
    6d7c:	d005      	beq.n	6d8a <handleJoinMessage+0x2e>
    6d7e:	bc3c      	pop	{r2, r3, r4, r5}
    6d80:	4690      	mov	r8, r2
    6d82:	4699      	mov	r9, r3
    6d84:	46a2      	mov	sl, r4
    6d86:	46ab      	mov	fp, r5
    6d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d8a:	4c74      	ldr	r4, [pc, #464]	; (6f5c <handleJoinMessage+0x200>)
    6d8c:	7823      	ldrb	r3, [r4, #0]
    6d8e:	2b03      	cmp	r3, #3
    6d90:	d1f5      	bne.n	6d7e <handleJoinMessage+0x22>
    6d92:	4b73      	ldr	r3, [pc, #460]	; (6f60 <handleJoinMessage+0x204>)
    6d94:	4698      	mov	r8, r3
    6d96:	681b      	ldr	r3, [r3, #0]
    6d98:	785a      	ldrb	r2, [r3, #1]
    6d9a:	4b72      	ldr	r3, [pc, #456]	; (6f64 <handleJoinMessage+0x208>)
    6d9c:	4699      	mov	r9, r3
    6d9e:	681b      	ldr	r3, [r3, #0]
    6da0:	7d1b      	ldrb	r3, [r3, #20]
    6da2:	429a      	cmp	r2, r3
    6da4:	d335      	bcc.n	6e12 <handleJoinMessage+0xb6>
    6da6:	429a      	cmp	r2, r3
    6da8:	d1e9      	bne.n	6d7e <handleJoinMessage+0x22>
    6daa:	486f      	ldr	r0, [pc, #444]	; (6f68 <handleJoinMessage+0x20c>)
    6dac:	4b6f      	ldr	r3, [pc, #444]	; (6f6c <handleJoinMessage+0x210>)
    6dae:	4798      	blx	r3
    6db0:	4642      	mov	r2, r8
    6db2:	2309      	movs	r3, #9
    6db4:	6812      	ldr	r2, [r2, #0]
    6db6:	7013      	strb	r3, [r2, #0]
    6db8:	3b04      	subs	r3, #4
    6dba:	7023      	strb	r3, [r4, #0]
    6dbc:	4643      	mov	r3, r8
    6dbe:	4c6c      	ldr	r4, [pc, #432]	; (6f70 <handleJoinMessage+0x214>)
    6dc0:	6819      	ldr	r1, [r3, #0]
    6dc2:	6823      	ldr	r3, [r4, #0]
    6dc4:	7848      	ldrb	r0, [r1, #1]
    6dc6:	4798      	blx	r3
    6dc8:	2300      	movs	r3, #0
    6dca:	6023      	str	r3, [r4, #0]
    6dcc:	e7d7      	b.n	6d7e <handleJoinMessage+0x22>
    6dce:	4b67      	ldr	r3, [pc, #412]	; (6f6c <handleJoinMessage+0x210>)
    6dd0:	4868      	ldr	r0, [pc, #416]	; (6f74 <handleJoinMessage+0x218>)
    6dd2:	4798      	blx	r3
    6dd4:	2201      	movs	r2, #1
    6dd6:	4b61      	ldr	r3, [pc, #388]	; (6f5c <handleJoinMessage+0x200>)
    6dd8:	4252      	negs	r2, r2
    6dda:	701c      	strb	r4, [r3, #0]
    6ddc:	4b66      	ldr	r3, [pc, #408]	; (6f78 <handleJoinMessage+0x21c>)
    6dde:	801a      	strh	r2, [r3, #0]
    6de0:	4b66      	ldr	r3, [pc, #408]	; (6f7c <handleJoinMessage+0x220>)
    6de2:	681b      	ldr	r3, [r3, #0]
    6de4:	2b00      	cmp	r3, #0
    6de6:	d0ca      	beq.n	6d7e <handleJoinMessage+0x22>
    6de8:	4798      	blx	r3
    6dea:	e7c8      	b.n	6d7e <handleJoinMessage+0x22>
    6dec:	4c5b      	ldr	r4, [pc, #364]	; (6f5c <handleJoinMessage+0x200>)
    6dee:	7823      	ldrb	r3, [r4, #0]
    6df0:	2b04      	cmp	r3, #4
    6df2:	d1c4      	bne.n	6d7e <handleJoinMessage+0x22>
    6df4:	485c      	ldr	r0, [pc, #368]	; (6f68 <handleJoinMessage+0x20c>)
    6df6:	4b5d      	ldr	r3, [pc, #372]	; (6f6c <handleJoinMessage+0x210>)
    6df8:	4798      	blx	r3
    6dfa:	786f      	ldrb	r7, [r5, #1]
    6dfc:	2f00      	cmp	r7, #0
    6dfe:	d067      	beq.n	6ed0 <handleJoinMessage+0x174>
    6e00:	2305      	movs	r3, #5
    6e02:	7023      	strb	r3, [r4, #0]
    6e04:	4c5e      	ldr	r4, [pc, #376]	; (6f80 <handleJoinMessage+0x224>)
    6e06:	0038      	movs	r0, r7
    6e08:	6823      	ldr	r3, [r4, #0]
    6e0a:	4798      	blx	r3
    6e0c:	2300      	movs	r3, #0
    6e0e:	6023      	str	r3, [r4, #0]
    6e10:	e7b5      	b.n	6d7e <handleJoinMessage+0x22>
    6e12:	1deb      	adds	r3, r5, #7
    6e14:	469a      	mov	sl, r3
    6e16:	0018      	movs	r0, r3
    6e18:	4a5a      	ldr	r2, [pc, #360]	; (6f84 <handleJoinMessage+0x228>)
    6e1a:	2108      	movs	r1, #8
    6e1c:	4b5a      	ldr	r3, [pc, #360]	; (6f88 <handleJoinMessage+0x22c>)
    6e1e:	4798      	blx	r3
    6e20:	2800      	cmp	r0, #0
    6e22:	d0ac      	beq.n	6d7e <handleJoinMessage+0x22>
    6e24:	4642      	mov	r2, r8
    6e26:	2300      	movs	r3, #0
    6e28:	6812      	ldr	r2, [r2, #0]
    6e2a:	7013      	strb	r3, [r2, #0]
    6e2c:	4643      	mov	r3, r8
    6e2e:	681b      	ldr	r3, [r3, #0]
    6e30:	88f0      	ldrh	r0, [r6, #6]
    6e32:	469c      	mov	ip, r3
    6e34:	785b      	ldrb	r3, [r3, #1]
    6e36:	469b      	mov	fp, r3
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d017      	beq.n	6e6c <handleJoinMessage+0x110>
    6e3c:	4663      	mov	r3, ip
    6e3e:	8a1b      	ldrh	r3, [r3, #16]
    6e40:	4283      	cmp	r3, r0
    6e42:	d09c      	beq.n	6d7e <handleJoinMessage+0x22>
    6e44:	465a      	mov	r2, fp
    6e46:	4663      	mov	r3, ip
    6e48:	3a01      	subs	r2, #1
    6e4a:	b2d2      	uxtb	r2, r2
    6e4c:	00d1      	lsls	r1, r2, #3
    6e4e:	1889      	adds	r1, r1, r2
    6e50:	0049      	lsls	r1, r1, #1
    6e52:	3122      	adds	r1, #34	; 0x22
    6e54:	3322      	adds	r3, #34	; 0x22
    6e56:	4461      	add	r1, ip
    6e58:	e006      	b.n	6e68 <handleJoinMessage+0x10c>
    6e5a:	3312      	adds	r3, #18
    6e5c:	001a      	movs	r2, r3
    6e5e:	3a12      	subs	r2, #18
    6e60:	8812      	ldrh	r2, [r2, #0]
    6e62:	4282      	cmp	r2, r0
    6e64:	d100      	bne.n	6e68 <handleJoinMessage+0x10c>
    6e66:	e78a      	b.n	6d7e <handleJoinMessage+0x22>
    6e68:	4299      	cmp	r1, r3
    6e6a:	d1f6      	bne.n	6e5a <handleJoinMessage+0xfe>
    6e6c:	465b      	mov	r3, fp
    6e6e:	4a47      	ldr	r2, [pc, #284]	; (6f8c <handleJoinMessage+0x230>)
    6e70:	00db      	lsls	r3, r3, #3
    6e72:	445b      	add	r3, fp
    6e74:	7812      	ldrb	r2, [r2, #0]
    6e76:	005b      	lsls	r3, r3, #1
    6e78:	4463      	add	r3, ip
    6e7a:	8218      	strh	r0, [r3, #16]
    6e7c:	731a      	strb	r2, [r3, #12]
    6e7e:	8872      	ldrh	r2, [r6, #2]
    6e80:	1d69      	adds	r1, r5, #5
    6e82:	81da      	strh	r2, [r3, #14]
    6e84:	786a      	ldrb	r2, [r5, #1]
    6e86:	721a      	strb	r2, [r3, #8]
    6e88:	78aa      	ldrb	r2, [r5, #2]
    6e8a:	725a      	strb	r2, [r3, #9]
    6e8c:	78ea      	ldrb	r2, [r5, #3]
    6e8e:	729a      	strb	r2, [r3, #10]
    6e90:	792a      	ldrb	r2, [r5, #4]
    6e92:	4d3f      	ldr	r5, [pc, #252]	; (6f90 <handleJoinMessage+0x234>)
    6e94:	72da      	strb	r2, [r3, #11]
    6e96:	465b      	mov	r3, fp
    6e98:	3301      	adds	r3, #1
    6e9a:	00d8      	lsls	r0, r3, #3
    6e9c:	18c0      	adds	r0, r0, r3
    6e9e:	0040      	lsls	r0, r0, #1
    6ea0:	4460      	add	r0, ip
    6ea2:	2208      	movs	r2, #8
    6ea4:	47a8      	blx	r5
    6ea6:	2208      	movs	r2, #8
    6ea8:	4651      	mov	r1, sl
    6eaa:	483a      	ldr	r0, [pc, #232]	; (6f94 <handleJoinMessage+0x238>)
    6eac:	47a8      	blx	r5
    6eae:	4643      	mov	r3, r8
    6eb0:	681a      	ldr	r2, [r3, #0]
    6eb2:	7851      	ldrb	r1, [r2, #1]
    6eb4:	00cb      	lsls	r3, r1, #3
    6eb6:	185b      	adds	r3, r3, r1
    6eb8:	005b      	lsls	r3, r3, #1
    6eba:	18d3      	adds	r3, r2, r3
    6ebc:	735f      	strb	r7, [r3, #13]
    6ebe:	4643      	mov	r3, r8
    6ec0:	3101      	adds	r1, #1
    6ec2:	7051      	strb	r1, [r2, #1]
    6ec4:	681b      	ldr	r3, [r3, #0]
    6ec6:	785a      	ldrb	r2, [r3, #1]
    6ec8:	464b      	mov	r3, r9
    6eca:	681b      	ldr	r3, [r3, #0]
    6ecc:	7d1b      	ldrb	r3, [r3, #20]
    6ece:	e76a      	b.n	6da6 <handleJoinMessage+0x4a>
    6ed0:	78ea      	ldrb	r2, [r5, #3]
    6ed2:	78ab      	ldrb	r3, [r5, #2]
    6ed4:	0212      	lsls	r2, r2, #8
    6ed6:	4313      	orrs	r3, r2
    6ed8:	4a27      	ldr	r2, [pc, #156]	; (6f78 <handleJoinMessage+0x21c>)
    6eda:	492f      	ldr	r1, [pc, #188]	; (6f98 <handleJoinMessage+0x23c>)
    6edc:	4690      	mov	r8, r2
    6ede:	8013      	strh	r3, [r2, #0]
    6ee0:	88f2      	ldrh	r2, [r6, #6]
    6ee2:	4b2e      	ldr	r3, [pc, #184]	; (6f9c <handleJoinMessage+0x240>)
    6ee4:	4640      	mov	r0, r8
    6ee6:	801a      	strh	r2, [r3, #0]
    6ee8:	8873      	ldrh	r3, [r6, #2]
    6eea:	800b      	strh	r3, [r1, #0]
    6eec:	4b2c      	ldr	r3, [pc, #176]	; (6fa0 <handleJoinMessage+0x244>)
    6eee:	4798      	blx	r3
    6ef0:	4b1c      	ldr	r3, [pc, #112]	; (6f64 <handleJoinMessage+0x208>)
    6ef2:	1d29      	adds	r1, r5, #4
    6ef4:	681e      	ldr	r6, [r3, #0]
    6ef6:	4b2b      	ldr	r3, [pc, #172]	; (6fa4 <handleJoinMessage+0x248>)
    6ef8:	7a72      	ldrb	r2, [r6, #9]
    6efa:	701a      	strb	r2, [r3, #0]
    6efc:	4b2a      	ldr	r3, [pc, #168]	; (6fa8 <handleJoinMessage+0x24c>)
    6efe:	2210      	movs	r2, #16
    6f00:	6818      	ldr	r0, [r3, #0]
    6f02:	4b23      	ldr	r3, [pc, #140]	; (6f90 <handleJoinMessage+0x234>)
    6f04:	3010      	adds	r0, #16
    6f06:	4798      	blx	r3
    6f08:	2306      	movs	r3, #6
    6f0a:	7023      	strb	r3, [r4, #0]
    6f0c:	4643      	mov	r3, r8
    6f0e:	22ff      	movs	r2, #255	; 0xff
    6f10:	881b      	ldrh	r3, [r3, #0]
    6f12:	421a      	tst	r2, r3
    6f14:	d012      	beq.n	6f3c <handleJoinMessage+0x1e0>
    6f16:	4643      	mov	r3, r8
    6f18:	881b      	ldrh	r3, [r3, #0]
    6f1a:	4816      	ldr	r0, [pc, #88]	; (6f74 <handleJoinMessage+0x218>)
    6f1c:	061b      	lsls	r3, r3, #24
    6f1e:	d50f      	bpl.n	6f40 <handleJoinMessage+0x1e4>
    6f20:	4b22      	ldr	r3, [pc, #136]	; (6fac <handleJoinMessage+0x250>)
    6f22:	6103      	str	r3, [r0, #16]
    6f24:	23fa      	movs	r3, #250	; 0xfa
    6f26:	88b2      	ldrh	r2, [r6, #4]
    6f28:	009b      	lsls	r3, r3, #2
    6f2a:	435a      	muls	r2, r3
    6f2c:	6042      	str	r2, [r0, #4]
    6f2e:	88b2      	ldrh	r2, [r6, #4]
    6f30:	4353      	muls	r3, r2
    6f32:	6083      	str	r3, [r0, #8]
    6f34:	2301      	movs	r3, #1
    6f36:	7303      	strb	r3, [r0, #12]
    6f38:	4b1d      	ldr	r3, [pc, #116]	; (6fb0 <handleJoinMessage+0x254>)
    6f3a:	4798      	blx	r3
    6f3c:	786f      	ldrb	r7, [r5, #1]
    6f3e:	e761      	b.n	6e04 <handleJoinMessage+0xa8>
    6f40:	4b1c      	ldr	r3, [pc, #112]	; (6fb4 <handleJoinMessage+0x258>)
    6f42:	6103      	str	r3, [r0, #16]
    6f44:	23fa      	movs	r3, #250	; 0xfa
    6f46:	7a32      	ldrb	r2, [r6, #8]
    6f48:	009b      	lsls	r3, r3, #2
    6f4a:	4353      	muls	r3, r2
    6f4c:	6043      	str	r3, [r0, #4]
    6f4e:	6083      	str	r3, [r0, #8]
    6f50:	4b17      	ldr	r3, [pc, #92]	; (6fb0 <handleJoinMessage+0x254>)
    6f52:	7307      	strb	r7, [r0, #12]
    6f54:	4798      	blx	r3
    6f56:	786f      	ldrb	r7, [r5, #1]
    6f58:	e754      	b.n	6e04 <handleJoinMessage+0xa8>
    6f5a:	46c0      	nop			; (mov r8, r8)
    6f5c:	20000294 	.word	0x20000294
    6f60:	200002bc 	.word	0x200002bc
    6f64:	200012a8 	.word	0x200012a8
    6f68:	2000130c 	.word	0x2000130c
    6f6c:	00002ded 	.word	0x00002ded
    6f70:	200002b8 	.word	0x200002b8
    6f74:	200012f4 	.word	0x200012f4
    6f78:	200012f0 	.word	0x200012f0
    6f7c:	20001328 	.word	0x20001328
    6f80:	200002b4 	.word	0x200002b4
    6f84:	2000004c 	.word	0x2000004c
    6f88:	00004d39 	.word	0x00004d39
    6f8c:	200012bc 	.word	0x200012bc
    6f90:	0000754f 	.word	0x0000754f
    6f94:	20001320 	.word	0x20001320
    6f98:	200012dc 	.word	0x200012dc
    6f9c:	20000054 	.word	0x20000054
    6fa0:	00001d35 	.word	0x00001d35
    6fa4:	20001308 	.word	0x20001308
    6fa8:	200012ac 	.word	0x200012ac
    6fac:	000066b9 	.word	0x000066b9
    6fb0:	00002e59 	.word	0x00002e59
    6fb4:	00006869 	.word	0x00006869

00006fb8 <checkLinkFailureAtNoAck>:
    6fb8:	b510      	push	{r4, lr}
    6fba:	2803      	cmp	r0, #3
    6fbc:	d005      	beq.n	6fca <checkLinkFailureAtNoAck+0x12>
    6fbe:	4b0f      	ldr	r3, [pc, #60]	; (6ffc <checkLinkFailureAtNoAck+0x44>)
    6fc0:	681b      	ldr	r3, [r3, #0]
    6fc2:	7a5a      	ldrb	r2, [r3, #9]
    6fc4:	4b0e      	ldr	r3, [pc, #56]	; (7000 <checkLinkFailureAtNoAck+0x48>)
    6fc6:	701a      	strb	r2, [r3, #0]
    6fc8:	bd10      	pop	{r4, pc}
    6fca:	4a0d      	ldr	r2, [pc, #52]	; (7000 <checkLinkFailureAtNoAck+0x48>)
    6fcc:	7813      	ldrb	r3, [r2, #0]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d0fa      	beq.n	6fc8 <checkLinkFailureAtNoAck+0x10>
    6fd2:	3b01      	subs	r3, #1
    6fd4:	b2db      	uxtb	r3, r3
    6fd6:	7013      	strb	r3, [r2, #0]
    6fd8:	2b00      	cmp	r3, #0
    6fda:	d1f5      	bne.n	6fc8 <checkLinkFailureAtNoAck+0x10>
    6fdc:	4b09      	ldr	r3, [pc, #36]	; (7004 <checkLinkFailureAtNoAck+0x4c>)
    6fde:	480a      	ldr	r0, [pc, #40]	; (7008 <checkLinkFailureAtNoAck+0x50>)
    6fe0:	4798      	blx	r3
    6fe2:	2208      	movs	r2, #8
    6fe4:	4b09      	ldr	r3, [pc, #36]	; (700c <checkLinkFailureAtNoAck+0x54>)
    6fe6:	701a      	strb	r2, [r3, #0]
    6fe8:	4b09      	ldr	r3, [pc, #36]	; (7010 <checkLinkFailureAtNoAck+0x58>)
    6fea:	3a09      	subs	r2, #9
    6fec:	801a      	strh	r2, [r3, #0]
    6fee:	4b09      	ldr	r3, [pc, #36]	; (7014 <checkLinkFailureAtNoAck+0x5c>)
    6ff0:	681b      	ldr	r3, [r3, #0]
    6ff2:	2b00      	cmp	r3, #0
    6ff4:	d0e8      	beq.n	6fc8 <checkLinkFailureAtNoAck+0x10>
    6ff6:	4798      	blx	r3
    6ff8:	e7e6      	b.n	6fc8 <checkLinkFailureAtNoAck+0x10>
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	200012a8 	.word	0x200012a8
    7000:	20001308 	.word	0x20001308
    7004:	00002ded 	.word	0x00002ded
    7008:	200012f4 	.word	0x200012f4
    700c:	20000294 	.word	0x20000294
    7010:	200012f0 	.word	0x200012f0
    7014:	20001328 	.word	0x20001328

00007018 <keyDetermineProcedure>:
    7018:	4b06      	ldr	r3, [pc, #24]	; (7034 <keyDetermineProcedure+0x1c>)
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	3b06      	subs	r3, #6
    701e:	2b01      	cmp	r3, #1
    7020:	d902      	bls.n	7028 <keyDetermineProcedure+0x10>
    7022:	4b05      	ldr	r3, [pc, #20]	; (7038 <keyDetermineProcedure+0x20>)
    7024:	6818      	ldr	r0, [r3, #0]
    7026:	4770      	bx	lr
    7028:	2808      	cmp	r0, #8
    702a:	d0fa      	beq.n	7022 <keyDetermineProcedure+0xa>
    702c:	4b02      	ldr	r3, [pc, #8]	; (7038 <keyDetermineProcedure+0x20>)
    702e:	6818      	ldr	r0, [r3, #0]
    7030:	3010      	adds	r0, #16
    7032:	e7f8      	b.n	7026 <keyDetermineProcedure+0xe>
    7034:	20000294 	.word	0x20000294
    7038:	200012ac 	.word	0x200012ac

0000703c <secureFrame>:
    703c:	b5f0      	push	{r4, r5, r6, r7, lr}
    703e:	4657      	mov	r7, sl
    7040:	4645      	mov	r5, r8
    7042:	46de      	mov	lr, fp
    7044:	464e      	mov	r6, r9
    7046:	b5e0      	push	{r5, r6, r7, lr}
    7048:	0005      	movs	r5, r0
    704a:	b0af      	sub	sp, #188	; 0xbc
    704c:	ac06      	add	r4, sp, #24
    704e:	000e      	movs	r6, r1
    7050:	4690      	mov	r8, r2
    7052:	469a      	mov	sl, r3
    7054:	2210      	movs	r2, #16
    7056:	2100      	movs	r1, #0
    7058:	0020      	movs	r0, r4
    705a:	4b35      	ldr	r3, [pc, #212]	; (7130 <secureFrame+0xf4>)
    705c:	4798      	blx	r3
    705e:	7c2f      	ldrb	r7, [r5, #16]
    7060:	2f07      	cmp	r7, #7
    7062:	d80e      	bhi.n	7082 <secureFrame+0x46>
    7064:	2301      	movs	r3, #1
    7066:	2288      	movs	r2, #136	; 0x88
    7068:	40bb      	lsls	r3, r7
    706a:	421a      	tst	r2, r3
    706c:	d14e      	bne.n	710c <secureFrame+0xd0>
    706e:	3a44      	subs	r2, #68	; 0x44
    7070:	421a      	tst	r2, r3
    7072:	d14f      	bne.n	7114 <secureFrame+0xd8>
    7074:	3a22      	subs	r2, #34	; 0x22
    7076:	421a      	tst	r2, r3
    7078:	d003      	beq.n	7082 <secureFrame+0x46>
    707a:	2304      	movs	r3, #4
    707c:	9305      	str	r3, [sp, #20]
    707e:	469b      	mov	fp, r3
    7080:	e002      	b.n	7088 <secureFrame+0x4c>
    7082:	2300      	movs	r3, #0
    7084:	469b      	mov	fp, r3
    7086:	9305      	str	r3, [sp, #20]
    7088:	4b2a      	ldr	r3, [pc, #168]	; (7134 <secureFrame+0xf8>)
    708a:	4d2b      	ldr	r5, [pc, #172]	; (7138 <secureFrame+0xfc>)
    708c:	79da      	ldrb	r2, [r3, #7]
    708e:	4651      	mov	r1, sl
    7090:	7062      	strb	r2, [r4, #1]
    7092:	799a      	ldrb	r2, [r3, #6]
    7094:	7367      	strb	r7, [r4, #13]
    7096:	70a2      	strb	r2, [r4, #2]
    7098:	795a      	ldrb	r2, [r3, #5]
    709a:	a80a      	add	r0, sp, #40	; 0x28
    709c:	70e2      	strb	r2, [r4, #3]
    709e:	791a      	ldrb	r2, [r3, #4]
    70a0:	44b2      	add	sl, r6
    70a2:	7122      	strb	r2, [r4, #4]
    70a4:	78da      	ldrb	r2, [r3, #3]
    70a6:	7162      	strb	r2, [r4, #5]
    70a8:	789a      	ldrb	r2, [r3, #2]
    70aa:	71a2      	strb	r2, [r4, #6]
    70ac:	785a      	ldrb	r2, [r3, #1]
    70ae:	781b      	ldrb	r3, [r3, #0]
    70b0:	71e2      	strb	r2, [r4, #7]
    70b2:	7223      	strb	r3, [r4, #8]
    70b4:	78eb      	ldrb	r3, [r5, #3]
    70b6:	0032      	movs	r2, r6
    70b8:	7263      	strb	r3, [r4, #9]
    70ba:	78ab      	ldrb	r3, [r5, #2]
    70bc:	72a3      	strb	r3, [r4, #10]
    70be:	786b      	ldrb	r3, [r5, #1]
    70c0:	72e3      	strb	r3, [r4, #11]
    70c2:	782b      	ldrb	r3, [r5, #0]
    70c4:	7323      	strb	r3, [r4, #12]
    70c6:	4b1d      	ldr	r3, [pc, #116]	; (713c <secureFrame+0x100>)
    70c8:	4699      	mov	r9, r3
    70ca:	4798      	blx	r3
    70cc:	ab0a      	add	r3, sp, #40	; 0x28
    70ce:	469c      	mov	ip, r3
    70d0:	44b4      	add	ip, r6
    70d2:	4663      	mov	r3, ip
    70d4:	4642      	mov	r2, r8
    70d6:	4651      	mov	r1, sl
    70d8:	4660      	mov	r0, ip
    70da:	9304      	str	r3, [sp, #16]
    70dc:	47c8      	blx	r9
    70de:	2300      	movs	r3, #0
    70e0:	9302      	str	r3, [sp, #8]
    70e2:	4643      	mov	r3, r8
    70e4:	0021      	movs	r1, r4
    70e6:	9300      	str	r3, [sp, #0]
    70e8:	9701      	str	r7, [sp, #4]
    70ea:	0033      	movs	r3, r6
    70ec:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    70ee:	a80a      	add	r0, sp, #40	; 0x28
    70f0:	4c13      	ldr	r4, [pc, #76]	; (7140 <secureFrame+0x104>)
    70f2:	47a0      	blx	r4
    70f4:	2800      	cmp	r0, #0
    70f6:	d011      	beq.n	711c <secureFrame+0xe0>
    70f8:	23ff      	movs	r3, #255	; 0xff
    70fa:	469b      	mov	fp, r3
    70fc:	4658      	mov	r0, fp
    70fe:	b02f      	add	sp, #188	; 0xbc
    7100:	bc3c      	pop	{r2, r3, r4, r5}
    7102:	4690      	mov	r8, r2
    7104:	4699      	mov	r9, r3
    7106:	46a2      	mov	sl, r4
    7108:	46ab      	mov	fp, r5
    710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    710c:	2310      	movs	r3, #16
    710e:	9305      	str	r3, [sp, #20]
    7110:	469b      	mov	fp, r3
    7112:	e7b9      	b.n	7088 <secureFrame+0x4c>
    7114:	2308      	movs	r3, #8
    7116:	9305      	str	r3, [sp, #20]
    7118:	469b      	mov	fp, r3
    711a:	e7b5      	b.n	7088 <secureFrame+0x4c>
    711c:	682b      	ldr	r3, [r5, #0]
    711e:	9904      	ldr	r1, [sp, #16]
    7120:	3301      	adds	r3, #1
    7122:	602b      	str	r3, [r5, #0]
    7124:	9b05      	ldr	r3, [sp, #20]
    7126:	4650      	mov	r0, sl
    7128:	4443      	add	r3, r8
    712a:	001a      	movs	r2, r3
    712c:	47c8      	blx	r9
    712e:	e7e5      	b.n	70fc <secureFrame+0xc0>
    7130:	00007561 	.word	0x00007561
    7134:	2000004c 	.word	0x2000004c
    7138:	2000132c 	.word	0x2000132c
    713c:	0000754f 	.word	0x0000754f
    7140:	000027b5 	.word	0x000027b5

00007144 <unsecureFrame>:
    7144:	b5f0      	push	{r4, r5, r6, r7, lr}
    7146:	46ce      	mov	lr, r9
    7148:	4647      	mov	r7, r8
    714a:	b580      	push	{r7, lr}
    714c:	b089      	sub	sp, #36	; 0x24
    714e:	0007      	movs	r7, r0
    7150:	ac04      	add	r4, sp, #16
    7152:	000d      	movs	r5, r1
    7154:	4691      	mov	r9, r2
    7156:	001e      	movs	r6, r3
    7158:	2210      	movs	r2, #16
    715a:	4b26      	ldr	r3, [pc, #152]	; (71f4 <unsecureFrame+0xb0>)
    715c:	2100      	movs	r1, #0
    715e:	0020      	movs	r0, r4
    7160:	4798      	blx	r3
    7162:	2200      	movs	r2, #0
    7164:	7c3b      	ldrb	r3, [r7, #16]
    7166:	4690      	mov	r8, r2
    7168:	2b07      	cmp	r3, #7
    716a:	d806      	bhi.n	717a <unsecureFrame+0x36>
    716c:	3201      	adds	r2, #1
    716e:	2010      	movs	r0, #16
    7170:	409a      	lsls	r2, r3
    7172:	2188      	movs	r1, #136	; 0x88
    7174:	4680      	mov	r8, r0
    7176:	4211      	tst	r1, r2
    7178:	d02f      	beq.n	71da <unsecureFrame+0x96>
    717a:	79ea      	ldrb	r2, [r5, #7]
    717c:	7363      	strb	r3, [r4, #13]
    717e:	7062      	strb	r2, [r4, #1]
    7180:	79aa      	ldrb	r2, [r5, #6]
    7182:	0021      	movs	r1, r4
    7184:	70a2      	strb	r2, [r4, #2]
    7186:	796a      	ldrb	r2, [r5, #5]
    7188:	9810      	ldr	r0, [sp, #64]	; 0x40
    718a:	70e2      	strb	r2, [r4, #3]
    718c:	792a      	ldrb	r2, [r5, #4]
    718e:	7122      	strb	r2, [r4, #4]
    7190:	78ea      	ldrb	r2, [r5, #3]
    7192:	7162      	strb	r2, [r4, #5]
    7194:	78aa      	ldrb	r2, [r5, #2]
    7196:	71a2      	strb	r2, [r4, #6]
    7198:	786a      	ldrb	r2, [r5, #1]
    719a:	71e2      	strb	r2, [r4, #7]
    719c:	782a      	ldrb	r2, [r5, #0]
    719e:	7222      	strb	r2, [r4, #8]
    71a0:	7dfa      	ldrb	r2, [r7, #23]
    71a2:	7262      	strb	r2, [r4, #9]
    71a4:	7dba      	ldrb	r2, [r7, #22]
    71a6:	72a2      	strb	r2, [r4, #10]
    71a8:	7d7a      	ldrb	r2, [r7, #21]
    71aa:	72e2      	strb	r2, [r4, #11]
    71ac:	7d3a      	ldrb	r2, [r7, #20]
    71ae:	7322      	strb	r2, [r4, #12]
    71b0:	9301      	str	r3, [sp, #4]
    71b2:	4643      	mov	r3, r8
    71b4:	2201      	movs	r2, #1
    71b6:	1af6      	subs	r6, r6, r3
    71b8:	b2f6      	uxtb	r6, r6
    71ba:	9202      	str	r2, [sp, #8]
    71bc:	9600      	str	r6, [sp, #0]
    71be:	464b      	mov	r3, r9
    71c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    71c2:	4c0d      	ldr	r4, [pc, #52]	; (71f8 <unsecureFrame+0xb4>)
    71c4:	47a0      	blx	r4
    71c6:	2800      	cmp	r0, #0
    71c8:	d001      	beq.n	71ce <unsecureFrame+0x8a>
    71ca:	23ff      	movs	r3, #255	; 0xff
    71cc:	4698      	mov	r8, r3
    71ce:	4640      	mov	r0, r8
    71d0:	b009      	add	sp, #36	; 0x24
    71d2:	bc0c      	pop	{r2, r3}
    71d4:	4690      	mov	r8, r2
    71d6:	4699      	mov	r9, r3
    71d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71da:	3808      	subs	r0, #8
    71dc:	3944      	subs	r1, #68	; 0x44
    71de:	4680      	mov	r8, r0
    71e0:	4211      	tst	r1, r2
    71e2:	d1ca      	bne.n	717a <unsecureFrame+0x36>
    71e4:	3922      	subs	r1, #34	; 0x22
    71e6:	400a      	ands	r2, r1
    71e8:	1e51      	subs	r1, r2, #1
    71ea:	418a      	sbcs	r2, r1
    71ec:	0092      	lsls	r2, r2, #2
    71ee:	4690      	mov	r8, r2
    71f0:	e7c3      	b.n	717a <unsecureFrame+0x36>
    71f2:	46c0      	nop			; (mov r8, r8)
    71f4:	00007561 	.word	0x00007561
    71f8:	000027b5 	.word	0x000027b5

000071fc <__udivsi3>:
    71fc:	2200      	movs	r2, #0
    71fe:	0843      	lsrs	r3, r0, #1
    7200:	428b      	cmp	r3, r1
    7202:	d374      	bcc.n	72ee <__udivsi3+0xf2>
    7204:	0903      	lsrs	r3, r0, #4
    7206:	428b      	cmp	r3, r1
    7208:	d35f      	bcc.n	72ca <__udivsi3+0xce>
    720a:	0a03      	lsrs	r3, r0, #8
    720c:	428b      	cmp	r3, r1
    720e:	d344      	bcc.n	729a <__udivsi3+0x9e>
    7210:	0b03      	lsrs	r3, r0, #12
    7212:	428b      	cmp	r3, r1
    7214:	d328      	bcc.n	7268 <__udivsi3+0x6c>
    7216:	0c03      	lsrs	r3, r0, #16
    7218:	428b      	cmp	r3, r1
    721a:	d30d      	bcc.n	7238 <__udivsi3+0x3c>
    721c:	22ff      	movs	r2, #255	; 0xff
    721e:	0209      	lsls	r1, r1, #8
    7220:	ba12      	rev	r2, r2
    7222:	0c03      	lsrs	r3, r0, #16
    7224:	428b      	cmp	r3, r1
    7226:	d302      	bcc.n	722e <__udivsi3+0x32>
    7228:	1212      	asrs	r2, r2, #8
    722a:	0209      	lsls	r1, r1, #8
    722c:	d065      	beq.n	72fa <__udivsi3+0xfe>
    722e:	0b03      	lsrs	r3, r0, #12
    7230:	428b      	cmp	r3, r1
    7232:	d319      	bcc.n	7268 <__udivsi3+0x6c>
    7234:	e000      	b.n	7238 <__udivsi3+0x3c>
    7236:	0a09      	lsrs	r1, r1, #8
    7238:	0bc3      	lsrs	r3, r0, #15
    723a:	428b      	cmp	r3, r1
    723c:	d301      	bcc.n	7242 <__udivsi3+0x46>
    723e:	03cb      	lsls	r3, r1, #15
    7240:	1ac0      	subs	r0, r0, r3
    7242:	4152      	adcs	r2, r2
    7244:	0b83      	lsrs	r3, r0, #14
    7246:	428b      	cmp	r3, r1
    7248:	d301      	bcc.n	724e <__udivsi3+0x52>
    724a:	038b      	lsls	r3, r1, #14
    724c:	1ac0      	subs	r0, r0, r3
    724e:	4152      	adcs	r2, r2
    7250:	0b43      	lsrs	r3, r0, #13
    7252:	428b      	cmp	r3, r1
    7254:	d301      	bcc.n	725a <__udivsi3+0x5e>
    7256:	034b      	lsls	r3, r1, #13
    7258:	1ac0      	subs	r0, r0, r3
    725a:	4152      	adcs	r2, r2
    725c:	0b03      	lsrs	r3, r0, #12
    725e:	428b      	cmp	r3, r1
    7260:	d301      	bcc.n	7266 <__udivsi3+0x6a>
    7262:	030b      	lsls	r3, r1, #12
    7264:	1ac0      	subs	r0, r0, r3
    7266:	4152      	adcs	r2, r2
    7268:	0ac3      	lsrs	r3, r0, #11
    726a:	428b      	cmp	r3, r1
    726c:	d301      	bcc.n	7272 <__udivsi3+0x76>
    726e:	02cb      	lsls	r3, r1, #11
    7270:	1ac0      	subs	r0, r0, r3
    7272:	4152      	adcs	r2, r2
    7274:	0a83      	lsrs	r3, r0, #10
    7276:	428b      	cmp	r3, r1
    7278:	d301      	bcc.n	727e <__udivsi3+0x82>
    727a:	028b      	lsls	r3, r1, #10
    727c:	1ac0      	subs	r0, r0, r3
    727e:	4152      	adcs	r2, r2
    7280:	0a43      	lsrs	r3, r0, #9
    7282:	428b      	cmp	r3, r1
    7284:	d301      	bcc.n	728a <__udivsi3+0x8e>
    7286:	024b      	lsls	r3, r1, #9
    7288:	1ac0      	subs	r0, r0, r3
    728a:	4152      	adcs	r2, r2
    728c:	0a03      	lsrs	r3, r0, #8
    728e:	428b      	cmp	r3, r1
    7290:	d301      	bcc.n	7296 <__udivsi3+0x9a>
    7292:	020b      	lsls	r3, r1, #8
    7294:	1ac0      	subs	r0, r0, r3
    7296:	4152      	adcs	r2, r2
    7298:	d2cd      	bcs.n	7236 <__udivsi3+0x3a>
    729a:	09c3      	lsrs	r3, r0, #7
    729c:	428b      	cmp	r3, r1
    729e:	d301      	bcc.n	72a4 <__udivsi3+0xa8>
    72a0:	01cb      	lsls	r3, r1, #7
    72a2:	1ac0      	subs	r0, r0, r3
    72a4:	4152      	adcs	r2, r2
    72a6:	0983      	lsrs	r3, r0, #6
    72a8:	428b      	cmp	r3, r1
    72aa:	d301      	bcc.n	72b0 <__udivsi3+0xb4>
    72ac:	018b      	lsls	r3, r1, #6
    72ae:	1ac0      	subs	r0, r0, r3
    72b0:	4152      	adcs	r2, r2
    72b2:	0943      	lsrs	r3, r0, #5
    72b4:	428b      	cmp	r3, r1
    72b6:	d301      	bcc.n	72bc <__udivsi3+0xc0>
    72b8:	014b      	lsls	r3, r1, #5
    72ba:	1ac0      	subs	r0, r0, r3
    72bc:	4152      	adcs	r2, r2
    72be:	0903      	lsrs	r3, r0, #4
    72c0:	428b      	cmp	r3, r1
    72c2:	d301      	bcc.n	72c8 <__udivsi3+0xcc>
    72c4:	010b      	lsls	r3, r1, #4
    72c6:	1ac0      	subs	r0, r0, r3
    72c8:	4152      	adcs	r2, r2
    72ca:	08c3      	lsrs	r3, r0, #3
    72cc:	428b      	cmp	r3, r1
    72ce:	d301      	bcc.n	72d4 <__udivsi3+0xd8>
    72d0:	00cb      	lsls	r3, r1, #3
    72d2:	1ac0      	subs	r0, r0, r3
    72d4:	4152      	adcs	r2, r2
    72d6:	0883      	lsrs	r3, r0, #2
    72d8:	428b      	cmp	r3, r1
    72da:	d301      	bcc.n	72e0 <__udivsi3+0xe4>
    72dc:	008b      	lsls	r3, r1, #2
    72de:	1ac0      	subs	r0, r0, r3
    72e0:	4152      	adcs	r2, r2
    72e2:	0843      	lsrs	r3, r0, #1
    72e4:	428b      	cmp	r3, r1
    72e6:	d301      	bcc.n	72ec <__udivsi3+0xf0>
    72e8:	004b      	lsls	r3, r1, #1
    72ea:	1ac0      	subs	r0, r0, r3
    72ec:	4152      	adcs	r2, r2
    72ee:	1a41      	subs	r1, r0, r1
    72f0:	d200      	bcs.n	72f4 <__udivsi3+0xf8>
    72f2:	4601      	mov	r1, r0
    72f4:	4152      	adcs	r2, r2
    72f6:	4610      	mov	r0, r2
    72f8:	4770      	bx	lr
    72fa:	e7ff      	b.n	72fc <__udivsi3+0x100>
    72fc:	b501      	push	{r0, lr}
    72fe:	2000      	movs	r0, #0
    7300:	f000 f8f0 	bl	74e4 <__aeabi_idiv0>
    7304:	bd02      	pop	{r1, pc}
    7306:	46c0      	nop			; (mov r8, r8)

00007308 <__aeabi_uidivmod>:
    7308:	2900      	cmp	r1, #0
    730a:	d0f7      	beq.n	72fc <__udivsi3+0x100>
    730c:	e776      	b.n	71fc <__udivsi3>
    730e:	4770      	bx	lr

00007310 <__divsi3>:
    7310:	4603      	mov	r3, r0
    7312:	430b      	orrs	r3, r1
    7314:	d47f      	bmi.n	7416 <__divsi3+0x106>
    7316:	2200      	movs	r2, #0
    7318:	0843      	lsrs	r3, r0, #1
    731a:	428b      	cmp	r3, r1
    731c:	d374      	bcc.n	7408 <__divsi3+0xf8>
    731e:	0903      	lsrs	r3, r0, #4
    7320:	428b      	cmp	r3, r1
    7322:	d35f      	bcc.n	73e4 <__divsi3+0xd4>
    7324:	0a03      	lsrs	r3, r0, #8
    7326:	428b      	cmp	r3, r1
    7328:	d344      	bcc.n	73b4 <__divsi3+0xa4>
    732a:	0b03      	lsrs	r3, r0, #12
    732c:	428b      	cmp	r3, r1
    732e:	d328      	bcc.n	7382 <__divsi3+0x72>
    7330:	0c03      	lsrs	r3, r0, #16
    7332:	428b      	cmp	r3, r1
    7334:	d30d      	bcc.n	7352 <__divsi3+0x42>
    7336:	22ff      	movs	r2, #255	; 0xff
    7338:	0209      	lsls	r1, r1, #8
    733a:	ba12      	rev	r2, r2
    733c:	0c03      	lsrs	r3, r0, #16
    733e:	428b      	cmp	r3, r1
    7340:	d302      	bcc.n	7348 <__divsi3+0x38>
    7342:	1212      	asrs	r2, r2, #8
    7344:	0209      	lsls	r1, r1, #8
    7346:	d065      	beq.n	7414 <__divsi3+0x104>
    7348:	0b03      	lsrs	r3, r0, #12
    734a:	428b      	cmp	r3, r1
    734c:	d319      	bcc.n	7382 <__divsi3+0x72>
    734e:	e000      	b.n	7352 <__divsi3+0x42>
    7350:	0a09      	lsrs	r1, r1, #8
    7352:	0bc3      	lsrs	r3, r0, #15
    7354:	428b      	cmp	r3, r1
    7356:	d301      	bcc.n	735c <__divsi3+0x4c>
    7358:	03cb      	lsls	r3, r1, #15
    735a:	1ac0      	subs	r0, r0, r3
    735c:	4152      	adcs	r2, r2
    735e:	0b83      	lsrs	r3, r0, #14
    7360:	428b      	cmp	r3, r1
    7362:	d301      	bcc.n	7368 <__divsi3+0x58>
    7364:	038b      	lsls	r3, r1, #14
    7366:	1ac0      	subs	r0, r0, r3
    7368:	4152      	adcs	r2, r2
    736a:	0b43      	lsrs	r3, r0, #13
    736c:	428b      	cmp	r3, r1
    736e:	d301      	bcc.n	7374 <__divsi3+0x64>
    7370:	034b      	lsls	r3, r1, #13
    7372:	1ac0      	subs	r0, r0, r3
    7374:	4152      	adcs	r2, r2
    7376:	0b03      	lsrs	r3, r0, #12
    7378:	428b      	cmp	r3, r1
    737a:	d301      	bcc.n	7380 <__divsi3+0x70>
    737c:	030b      	lsls	r3, r1, #12
    737e:	1ac0      	subs	r0, r0, r3
    7380:	4152      	adcs	r2, r2
    7382:	0ac3      	lsrs	r3, r0, #11
    7384:	428b      	cmp	r3, r1
    7386:	d301      	bcc.n	738c <__divsi3+0x7c>
    7388:	02cb      	lsls	r3, r1, #11
    738a:	1ac0      	subs	r0, r0, r3
    738c:	4152      	adcs	r2, r2
    738e:	0a83      	lsrs	r3, r0, #10
    7390:	428b      	cmp	r3, r1
    7392:	d301      	bcc.n	7398 <__divsi3+0x88>
    7394:	028b      	lsls	r3, r1, #10
    7396:	1ac0      	subs	r0, r0, r3
    7398:	4152      	adcs	r2, r2
    739a:	0a43      	lsrs	r3, r0, #9
    739c:	428b      	cmp	r3, r1
    739e:	d301      	bcc.n	73a4 <__divsi3+0x94>
    73a0:	024b      	lsls	r3, r1, #9
    73a2:	1ac0      	subs	r0, r0, r3
    73a4:	4152      	adcs	r2, r2
    73a6:	0a03      	lsrs	r3, r0, #8
    73a8:	428b      	cmp	r3, r1
    73aa:	d301      	bcc.n	73b0 <__divsi3+0xa0>
    73ac:	020b      	lsls	r3, r1, #8
    73ae:	1ac0      	subs	r0, r0, r3
    73b0:	4152      	adcs	r2, r2
    73b2:	d2cd      	bcs.n	7350 <__divsi3+0x40>
    73b4:	09c3      	lsrs	r3, r0, #7
    73b6:	428b      	cmp	r3, r1
    73b8:	d301      	bcc.n	73be <__divsi3+0xae>
    73ba:	01cb      	lsls	r3, r1, #7
    73bc:	1ac0      	subs	r0, r0, r3
    73be:	4152      	adcs	r2, r2
    73c0:	0983      	lsrs	r3, r0, #6
    73c2:	428b      	cmp	r3, r1
    73c4:	d301      	bcc.n	73ca <__divsi3+0xba>
    73c6:	018b      	lsls	r3, r1, #6
    73c8:	1ac0      	subs	r0, r0, r3
    73ca:	4152      	adcs	r2, r2
    73cc:	0943      	lsrs	r3, r0, #5
    73ce:	428b      	cmp	r3, r1
    73d0:	d301      	bcc.n	73d6 <__divsi3+0xc6>
    73d2:	014b      	lsls	r3, r1, #5
    73d4:	1ac0      	subs	r0, r0, r3
    73d6:	4152      	adcs	r2, r2
    73d8:	0903      	lsrs	r3, r0, #4
    73da:	428b      	cmp	r3, r1
    73dc:	d301      	bcc.n	73e2 <__divsi3+0xd2>
    73de:	010b      	lsls	r3, r1, #4
    73e0:	1ac0      	subs	r0, r0, r3
    73e2:	4152      	adcs	r2, r2
    73e4:	08c3      	lsrs	r3, r0, #3
    73e6:	428b      	cmp	r3, r1
    73e8:	d301      	bcc.n	73ee <__divsi3+0xde>
    73ea:	00cb      	lsls	r3, r1, #3
    73ec:	1ac0      	subs	r0, r0, r3
    73ee:	4152      	adcs	r2, r2
    73f0:	0883      	lsrs	r3, r0, #2
    73f2:	428b      	cmp	r3, r1
    73f4:	d301      	bcc.n	73fa <__divsi3+0xea>
    73f6:	008b      	lsls	r3, r1, #2
    73f8:	1ac0      	subs	r0, r0, r3
    73fa:	4152      	adcs	r2, r2
    73fc:	0843      	lsrs	r3, r0, #1
    73fe:	428b      	cmp	r3, r1
    7400:	d301      	bcc.n	7406 <__divsi3+0xf6>
    7402:	004b      	lsls	r3, r1, #1
    7404:	1ac0      	subs	r0, r0, r3
    7406:	4152      	adcs	r2, r2
    7408:	1a41      	subs	r1, r0, r1
    740a:	d200      	bcs.n	740e <__divsi3+0xfe>
    740c:	4601      	mov	r1, r0
    740e:	4152      	adcs	r2, r2
    7410:	4610      	mov	r0, r2
    7412:	4770      	bx	lr
    7414:	e05d      	b.n	74d2 <__divsi3+0x1c2>
    7416:	0fca      	lsrs	r2, r1, #31
    7418:	d000      	beq.n	741c <__divsi3+0x10c>
    741a:	4249      	negs	r1, r1
    741c:	1003      	asrs	r3, r0, #32
    741e:	d300      	bcc.n	7422 <__divsi3+0x112>
    7420:	4240      	negs	r0, r0
    7422:	4053      	eors	r3, r2
    7424:	2200      	movs	r2, #0
    7426:	469c      	mov	ip, r3
    7428:	0903      	lsrs	r3, r0, #4
    742a:	428b      	cmp	r3, r1
    742c:	d32d      	bcc.n	748a <__divsi3+0x17a>
    742e:	0a03      	lsrs	r3, r0, #8
    7430:	428b      	cmp	r3, r1
    7432:	d312      	bcc.n	745a <__divsi3+0x14a>
    7434:	22fc      	movs	r2, #252	; 0xfc
    7436:	0189      	lsls	r1, r1, #6
    7438:	ba12      	rev	r2, r2
    743a:	0a03      	lsrs	r3, r0, #8
    743c:	428b      	cmp	r3, r1
    743e:	d30c      	bcc.n	745a <__divsi3+0x14a>
    7440:	0189      	lsls	r1, r1, #6
    7442:	1192      	asrs	r2, r2, #6
    7444:	428b      	cmp	r3, r1
    7446:	d308      	bcc.n	745a <__divsi3+0x14a>
    7448:	0189      	lsls	r1, r1, #6
    744a:	1192      	asrs	r2, r2, #6
    744c:	428b      	cmp	r3, r1
    744e:	d304      	bcc.n	745a <__divsi3+0x14a>
    7450:	0189      	lsls	r1, r1, #6
    7452:	d03a      	beq.n	74ca <__divsi3+0x1ba>
    7454:	1192      	asrs	r2, r2, #6
    7456:	e000      	b.n	745a <__divsi3+0x14a>
    7458:	0989      	lsrs	r1, r1, #6
    745a:	09c3      	lsrs	r3, r0, #7
    745c:	428b      	cmp	r3, r1
    745e:	d301      	bcc.n	7464 <__divsi3+0x154>
    7460:	01cb      	lsls	r3, r1, #7
    7462:	1ac0      	subs	r0, r0, r3
    7464:	4152      	adcs	r2, r2
    7466:	0983      	lsrs	r3, r0, #6
    7468:	428b      	cmp	r3, r1
    746a:	d301      	bcc.n	7470 <__divsi3+0x160>
    746c:	018b      	lsls	r3, r1, #6
    746e:	1ac0      	subs	r0, r0, r3
    7470:	4152      	adcs	r2, r2
    7472:	0943      	lsrs	r3, r0, #5
    7474:	428b      	cmp	r3, r1
    7476:	d301      	bcc.n	747c <__divsi3+0x16c>
    7478:	014b      	lsls	r3, r1, #5
    747a:	1ac0      	subs	r0, r0, r3
    747c:	4152      	adcs	r2, r2
    747e:	0903      	lsrs	r3, r0, #4
    7480:	428b      	cmp	r3, r1
    7482:	d301      	bcc.n	7488 <__divsi3+0x178>
    7484:	010b      	lsls	r3, r1, #4
    7486:	1ac0      	subs	r0, r0, r3
    7488:	4152      	adcs	r2, r2
    748a:	08c3      	lsrs	r3, r0, #3
    748c:	428b      	cmp	r3, r1
    748e:	d301      	bcc.n	7494 <__divsi3+0x184>
    7490:	00cb      	lsls	r3, r1, #3
    7492:	1ac0      	subs	r0, r0, r3
    7494:	4152      	adcs	r2, r2
    7496:	0883      	lsrs	r3, r0, #2
    7498:	428b      	cmp	r3, r1
    749a:	d301      	bcc.n	74a0 <__divsi3+0x190>
    749c:	008b      	lsls	r3, r1, #2
    749e:	1ac0      	subs	r0, r0, r3
    74a0:	4152      	adcs	r2, r2
    74a2:	d2d9      	bcs.n	7458 <__divsi3+0x148>
    74a4:	0843      	lsrs	r3, r0, #1
    74a6:	428b      	cmp	r3, r1
    74a8:	d301      	bcc.n	74ae <__divsi3+0x19e>
    74aa:	004b      	lsls	r3, r1, #1
    74ac:	1ac0      	subs	r0, r0, r3
    74ae:	4152      	adcs	r2, r2
    74b0:	1a41      	subs	r1, r0, r1
    74b2:	d200      	bcs.n	74b6 <__divsi3+0x1a6>
    74b4:	4601      	mov	r1, r0
    74b6:	4663      	mov	r3, ip
    74b8:	4152      	adcs	r2, r2
    74ba:	105b      	asrs	r3, r3, #1
    74bc:	4610      	mov	r0, r2
    74be:	d301      	bcc.n	74c4 <__divsi3+0x1b4>
    74c0:	4240      	negs	r0, r0
    74c2:	2b00      	cmp	r3, #0
    74c4:	d500      	bpl.n	74c8 <__divsi3+0x1b8>
    74c6:	4249      	negs	r1, r1
    74c8:	4770      	bx	lr
    74ca:	4663      	mov	r3, ip
    74cc:	105b      	asrs	r3, r3, #1
    74ce:	d300      	bcc.n	74d2 <__divsi3+0x1c2>
    74d0:	4240      	negs	r0, r0
    74d2:	b501      	push	{r0, lr}
    74d4:	2000      	movs	r0, #0
    74d6:	f000 f805 	bl	74e4 <__aeabi_idiv0>
    74da:	bd02      	pop	{r1, pc}

000074dc <__aeabi_idivmod>:
    74dc:	2900      	cmp	r1, #0
    74de:	d0f8      	beq.n	74d2 <__divsi3+0x1c2>
    74e0:	e716      	b.n	7310 <__divsi3>
    74e2:	4770      	bx	lr

000074e4 <__aeabi_idiv0>:
    74e4:	4770      	bx	lr
    74e6:	46c0      	nop			; (mov r8, r8)

000074e8 <__libc_init_array>:
    74e8:	b570      	push	{r4, r5, r6, lr}
    74ea:	2600      	movs	r6, #0
    74ec:	4d0c      	ldr	r5, [pc, #48]	; (7520 <__libc_init_array+0x38>)
    74ee:	4c0d      	ldr	r4, [pc, #52]	; (7524 <__libc_init_array+0x3c>)
    74f0:	1b64      	subs	r4, r4, r5
    74f2:	10a4      	asrs	r4, r4, #2
    74f4:	42a6      	cmp	r6, r4
    74f6:	d109      	bne.n	750c <__libc_init_array+0x24>
    74f8:	2600      	movs	r6, #0
    74fa:	f000 fd7f 	bl	7ffc <_init>
    74fe:	4d0a      	ldr	r5, [pc, #40]	; (7528 <__libc_init_array+0x40>)
    7500:	4c0a      	ldr	r4, [pc, #40]	; (752c <__libc_init_array+0x44>)
    7502:	1b64      	subs	r4, r4, r5
    7504:	10a4      	asrs	r4, r4, #2
    7506:	42a6      	cmp	r6, r4
    7508:	d105      	bne.n	7516 <__libc_init_array+0x2e>
    750a:	bd70      	pop	{r4, r5, r6, pc}
    750c:	00b3      	lsls	r3, r6, #2
    750e:	58eb      	ldr	r3, [r5, r3]
    7510:	4798      	blx	r3
    7512:	3601      	adds	r6, #1
    7514:	e7ee      	b.n	74f4 <__libc_init_array+0xc>
    7516:	00b3      	lsls	r3, r6, #2
    7518:	58eb      	ldr	r3, [r5, r3]
    751a:	4798      	blx	r3
    751c:	3601      	adds	r6, #1
    751e:	e7f2      	b.n	7506 <__libc_init_array+0x1e>
    7520:	00008008 	.word	0x00008008
    7524:	00008008 	.word	0x00008008
    7528:	00008008 	.word	0x00008008
    752c:	0000800c 	.word	0x0000800c

00007530 <memcmp>:
    7530:	b530      	push	{r4, r5, lr}
    7532:	2400      	movs	r4, #0
    7534:	42a2      	cmp	r2, r4
    7536:	d101      	bne.n	753c <memcmp+0xc>
    7538:	2000      	movs	r0, #0
    753a:	e005      	b.n	7548 <memcmp+0x18>
    753c:	5d03      	ldrb	r3, [r0, r4]
    753e:	1c65      	adds	r5, r4, #1
    7540:	5d0c      	ldrb	r4, [r1, r4]
    7542:	42a3      	cmp	r3, r4
    7544:	d001      	beq.n	754a <memcmp+0x1a>
    7546:	1b18      	subs	r0, r3, r4
    7548:	bd30      	pop	{r4, r5, pc}
    754a:	002c      	movs	r4, r5
    754c:	e7f2      	b.n	7534 <memcmp+0x4>

0000754e <memcpy>:
    754e:	2300      	movs	r3, #0
    7550:	b510      	push	{r4, lr}
    7552:	429a      	cmp	r2, r3
    7554:	d100      	bne.n	7558 <memcpy+0xa>
    7556:	bd10      	pop	{r4, pc}
    7558:	5ccc      	ldrb	r4, [r1, r3]
    755a:	54c4      	strb	r4, [r0, r3]
    755c:	3301      	adds	r3, #1
    755e:	e7f8      	b.n	7552 <memcpy+0x4>

00007560 <memset>:
    7560:	0003      	movs	r3, r0
    7562:	1882      	adds	r2, r0, r2
    7564:	4293      	cmp	r3, r2
    7566:	d100      	bne.n	756a <memset+0xa>
    7568:	4770      	bx	lr
    756a:	7019      	strb	r1, [r3, #0]
    756c:	3301      	adds	r3, #1
    756e:	e7f9      	b.n	7564 <memset+0x4>

00007570 <siprintf>:
    7570:	b40e      	push	{r1, r2, r3}
    7572:	b510      	push	{r4, lr}
    7574:	b09d      	sub	sp, #116	; 0x74
    7576:	a902      	add	r1, sp, #8
    7578:	9002      	str	r0, [sp, #8]
    757a:	6108      	str	r0, [r1, #16]
    757c:	480b      	ldr	r0, [pc, #44]	; (75ac <siprintf+0x3c>)
    757e:	2482      	movs	r4, #130	; 0x82
    7580:	6088      	str	r0, [r1, #8]
    7582:	6148      	str	r0, [r1, #20]
    7584:	2001      	movs	r0, #1
    7586:	4240      	negs	r0, r0
    7588:	ab1f      	add	r3, sp, #124	; 0x7c
    758a:	81c8      	strh	r0, [r1, #14]
    758c:	4808      	ldr	r0, [pc, #32]	; (75b0 <siprintf+0x40>)
    758e:	cb04      	ldmia	r3!, {r2}
    7590:	00a4      	lsls	r4, r4, #2
    7592:	6800      	ldr	r0, [r0, #0]
    7594:	9301      	str	r3, [sp, #4]
    7596:	818c      	strh	r4, [r1, #12]
    7598:	f000 f916 	bl	77c8 <_svfiprintf_r>
    759c:	2300      	movs	r3, #0
    759e:	9a02      	ldr	r2, [sp, #8]
    75a0:	7013      	strb	r3, [r2, #0]
    75a2:	b01d      	add	sp, #116	; 0x74
    75a4:	bc10      	pop	{r4}
    75a6:	bc08      	pop	{r3}
    75a8:	b003      	add	sp, #12
    75aa:	4718      	bx	r3
    75ac:	7fffffff 	.word	0x7fffffff
    75b0:	20000058 	.word	0x20000058

000075b4 <_free_r>:
    75b4:	b570      	push	{r4, r5, r6, lr}
    75b6:	0005      	movs	r5, r0
    75b8:	2900      	cmp	r1, #0
    75ba:	d010      	beq.n	75de <_free_r+0x2a>
    75bc:	1f0c      	subs	r4, r1, #4
    75be:	6823      	ldr	r3, [r4, #0]
    75c0:	2b00      	cmp	r3, #0
    75c2:	da00      	bge.n	75c6 <_free_r+0x12>
    75c4:	18e4      	adds	r4, r4, r3
    75c6:	0028      	movs	r0, r5
    75c8:	f000 fbb9 	bl	7d3e <__malloc_lock>
    75cc:	4a1d      	ldr	r2, [pc, #116]	; (7644 <_free_r+0x90>)
    75ce:	6813      	ldr	r3, [r2, #0]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d105      	bne.n	75e0 <_free_r+0x2c>
    75d4:	6063      	str	r3, [r4, #4]
    75d6:	6014      	str	r4, [r2, #0]
    75d8:	0028      	movs	r0, r5
    75da:	f000 fbb1 	bl	7d40 <__malloc_unlock>
    75de:	bd70      	pop	{r4, r5, r6, pc}
    75e0:	42a3      	cmp	r3, r4
    75e2:	d909      	bls.n	75f8 <_free_r+0x44>
    75e4:	6821      	ldr	r1, [r4, #0]
    75e6:	1860      	adds	r0, r4, r1
    75e8:	4283      	cmp	r3, r0
    75ea:	d1f3      	bne.n	75d4 <_free_r+0x20>
    75ec:	6818      	ldr	r0, [r3, #0]
    75ee:	685b      	ldr	r3, [r3, #4]
    75f0:	1841      	adds	r1, r0, r1
    75f2:	6021      	str	r1, [r4, #0]
    75f4:	e7ee      	b.n	75d4 <_free_r+0x20>
    75f6:	0013      	movs	r3, r2
    75f8:	685a      	ldr	r2, [r3, #4]
    75fa:	2a00      	cmp	r2, #0
    75fc:	d001      	beq.n	7602 <_free_r+0x4e>
    75fe:	42a2      	cmp	r2, r4
    7600:	d9f9      	bls.n	75f6 <_free_r+0x42>
    7602:	6819      	ldr	r1, [r3, #0]
    7604:	1858      	adds	r0, r3, r1
    7606:	42a0      	cmp	r0, r4
    7608:	d10b      	bne.n	7622 <_free_r+0x6e>
    760a:	6820      	ldr	r0, [r4, #0]
    760c:	1809      	adds	r1, r1, r0
    760e:	1858      	adds	r0, r3, r1
    7610:	6019      	str	r1, [r3, #0]
    7612:	4282      	cmp	r2, r0
    7614:	d1e0      	bne.n	75d8 <_free_r+0x24>
    7616:	6810      	ldr	r0, [r2, #0]
    7618:	6852      	ldr	r2, [r2, #4]
    761a:	1841      	adds	r1, r0, r1
    761c:	6019      	str	r1, [r3, #0]
    761e:	605a      	str	r2, [r3, #4]
    7620:	e7da      	b.n	75d8 <_free_r+0x24>
    7622:	42a0      	cmp	r0, r4
    7624:	d902      	bls.n	762c <_free_r+0x78>
    7626:	230c      	movs	r3, #12
    7628:	602b      	str	r3, [r5, #0]
    762a:	e7d5      	b.n	75d8 <_free_r+0x24>
    762c:	6821      	ldr	r1, [r4, #0]
    762e:	1860      	adds	r0, r4, r1
    7630:	4282      	cmp	r2, r0
    7632:	d103      	bne.n	763c <_free_r+0x88>
    7634:	6810      	ldr	r0, [r2, #0]
    7636:	6852      	ldr	r2, [r2, #4]
    7638:	1841      	adds	r1, r0, r1
    763a:	6021      	str	r1, [r4, #0]
    763c:	6062      	str	r2, [r4, #4]
    763e:	605c      	str	r4, [r3, #4]
    7640:	e7ca      	b.n	75d8 <_free_r+0x24>
    7642:	46c0      	nop			; (mov r8, r8)
    7644:	200002c0 	.word	0x200002c0

00007648 <_malloc_r>:
    7648:	2303      	movs	r3, #3
    764a:	b570      	push	{r4, r5, r6, lr}
    764c:	1ccd      	adds	r5, r1, #3
    764e:	439d      	bics	r5, r3
    7650:	3508      	adds	r5, #8
    7652:	0006      	movs	r6, r0
    7654:	2d0c      	cmp	r5, #12
    7656:	d21e      	bcs.n	7696 <_malloc_r+0x4e>
    7658:	250c      	movs	r5, #12
    765a:	42a9      	cmp	r1, r5
    765c:	d81d      	bhi.n	769a <_malloc_r+0x52>
    765e:	0030      	movs	r0, r6
    7660:	f000 fb6d 	bl	7d3e <__malloc_lock>
    7664:	4a25      	ldr	r2, [pc, #148]	; (76fc <_malloc_r+0xb4>)
    7666:	6814      	ldr	r4, [r2, #0]
    7668:	0021      	movs	r1, r4
    766a:	2900      	cmp	r1, #0
    766c:	d119      	bne.n	76a2 <_malloc_r+0x5a>
    766e:	4c24      	ldr	r4, [pc, #144]	; (7700 <_malloc_r+0xb8>)
    7670:	6823      	ldr	r3, [r4, #0]
    7672:	2b00      	cmp	r3, #0
    7674:	d103      	bne.n	767e <_malloc_r+0x36>
    7676:	0030      	movs	r0, r6
    7678:	f000 fb32 	bl	7ce0 <_sbrk_r>
    767c:	6020      	str	r0, [r4, #0]
    767e:	0029      	movs	r1, r5
    7680:	0030      	movs	r0, r6
    7682:	f000 fb2d 	bl	7ce0 <_sbrk_r>
    7686:	1c43      	adds	r3, r0, #1
    7688:	d12c      	bne.n	76e4 <_malloc_r+0x9c>
    768a:	230c      	movs	r3, #12
    768c:	0030      	movs	r0, r6
    768e:	6033      	str	r3, [r6, #0]
    7690:	f000 fb56 	bl	7d40 <__malloc_unlock>
    7694:	e003      	b.n	769e <_malloc_r+0x56>
    7696:	2d00      	cmp	r5, #0
    7698:	dadf      	bge.n	765a <_malloc_r+0x12>
    769a:	230c      	movs	r3, #12
    769c:	6033      	str	r3, [r6, #0]
    769e:	2000      	movs	r0, #0
    76a0:	bd70      	pop	{r4, r5, r6, pc}
    76a2:	680b      	ldr	r3, [r1, #0]
    76a4:	1b5b      	subs	r3, r3, r5
    76a6:	d41a      	bmi.n	76de <_malloc_r+0x96>
    76a8:	2b0b      	cmp	r3, #11
    76aa:	d903      	bls.n	76b4 <_malloc_r+0x6c>
    76ac:	600b      	str	r3, [r1, #0]
    76ae:	18cc      	adds	r4, r1, r3
    76b0:	6025      	str	r5, [r4, #0]
    76b2:	e003      	b.n	76bc <_malloc_r+0x74>
    76b4:	428c      	cmp	r4, r1
    76b6:	d10e      	bne.n	76d6 <_malloc_r+0x8e>
    76b8:	6863      	ldr	r3, [r4, #4]
    76ba:	6013      	str	r3, [r2, #0]
    76bc:	0030      	movs	r0, r6
    76be:	f000 fb3f 	bl	7d40 <__malloc_unlock>
    76c2:	0020      	movs	r0, r4
    76c4:	2207      	movs	r2, #7
    76c6:	300b      	adds	r0, #11
    76c8:	1d23      	adds	r3, r4, #4
    76ca:	4390      	bics	r0, r2
    76cc:	1ac3      	subs	r3, r0, r3
    76ce:	d0e7      	beq.n	76a0 <_malloc_r+0x58>
    76d0:	425a      	negs	r2, r3
    76d2:	50e2      	str	r2, [r4, r3]
    76d4:	e7e4      	b.n	76a0 <_malloc_r+0x58>
    76d6:	684b      	ldr	r3, [r1, #4]
    76d8:	6063      	str	r3, [r4, #4]
    76da:	000c      	movs	r4, r1
    76dc:	e7ee      	b.n	76bc <_malloc_r+0x74>
    76de:	000c      	movs	r4, r1
    76e0:	6849      	ldr	r1, [r1, #4]
    76e2:	e7c2      	b.n	766a <_malloc_r+0x22>
    76e4:	2303      	movs	r3, #3
    76e6:	1cc4      	adds	r4, r0, #3
    76e8:	439c      	bics	r4, r3
    76ea:	42a0      	cmp	r0, r4
    76ec:	d0e0      	beq.n	76b0 <_malloc_r+0x68>
    76ee:	1a21      	subs	r1, r4, r0
    76f0:	0030      	movs	r0, r6
    76f2:	f000 faf5 	bl	7ce0 <_sbrk_r>
    76f6:	1c43      	adds	r3, r0, #1
    76f8:	d1da      	bne.n	76b0 <_malloc_r+0x68>
    76fa:	e7c6      	b.n	768a <_malloc_r+0x42>
    76fc:	200002c0 	.word	0x200002c0
    7700:	200002c4 	.word	0x200002c4

00007704 <__ssputs_r>:
    7704:	b5f0      	push	{r4, r5, r6, r7, lr}
    7706:	688e      	ldr	r6, [r1, #8]
    7708:	b085      	sub	sp, #20
    770a:	0007      	movs	r7, r0
    770c:	000c      	movs	r4, r1
    770e:	9203      	str	r2, [sp, #12]
    7710:	9301      	str	r3, [sp, #4]
    7712:	429e      	cmp	r6, r3
    7714:	d839      	bhi.n	778a <__ssputs_r+0x86>
    7716:	2390      	movs	r3, #144	; 0x90
    7718:	898a      	ldrh	r2, [r1, #12]
    771a:	00db      	lsls	r3, r3, #3
    771c:	421a      	tst	r2, r3
    771e:	d034      	beq.n	778a <__ssputs_r+0x86>
    7720:	2503      	movs	r5, #3
    7722:	6909      	ldr	r1, [r1, #16]
    7724:	6823      	ldr	r3, [r4, #0]
    7726:	1a5b      	subs	r3, r3, r1
    7728:	9302      	str	r3, [sp, #8]
    772a:	6963      	ldr	r3, [r4, #20]
    772c:	9802      	ldr	r0, [sp, #8]
    772e:	435d      	muls	r5, r3
    7730:	0feb      	lsrs	r3, r5, #31
    7732:	195d      	adds	r5, r3, r5
    7734:	9b01      	ldr	r3, [sp, #4]
    7736:	106d      	asrs	r5, r5, #1
    7738:	3301      	adds	r3, #1
    773a:	181b      	adds	r3, r3, r0
    773c:	42ab      	cmp	r3, r5
    773e:	d900      	bls.n	7742 <__ssputs_r+0x3e>
    7740:	001d      	movs	r5, r3
    7742:	0553      	lsls	r3, r2, #21
    7744:	d532      	bpl.n	77ac <__ssputs_r+0xa8>
    7746:	0029      	movs	r1, r5
    7748:	0038      	movs	r0, r7
    774a:	f7ff ff7d 	bl	7648 <_malloc_r>
    774e:	1e06      	subs	r6, r0, #0
    7750:	d109      	bne.n	7766 <__ssputs_r+0x62>
    7752:	230c      	movs	r3, #12
    7754:	603b      	str	r3, [r7, #0]
    7756:	2340      	movs	r3, #64	; 0x40
    7758:	2001      	movs	r0, #1
    775a:	89a2      	ldrh	r2, [r4, #12]
    775c:	4240      	negs	r0, r0
    775e:	4313      	orrs	r3, r2
    7760:	81a3      	strh	r3, [r4, #12]
    7762:	b005      	add	sp, #20
    7764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7766:	9a02      	ldr	r2, [sp, #8]
    7768:	6921      	ldr	r1, [r4, #16]
    776a:	f7ff fef0 	bl	754e <memcpy>
    776e:	89a3      	ldrh	r3, [r4, #12]
    7770:	4a14      	ldr	r2, [pc, #80]	; (77c4 <__ssputs_r+0xc0>)
    7772:	401a      	ands	r2, r3
    7774:	2380      	movs	r3, #128	; 0x80
    7776:	4313      	orrs	r3, r2
    7778:	81a3      	strh	r3, [r4, #12]
    777a:	9b02      	ldr	r3, [sp, #8]
    777c:	6126      	str	r6, [r4, #16]
    777e:	18f6      	adds	r6, r6, r3
    7780:	6026      	str	r6, [r4, #0]
    7782:	6165      	str	r5, [r4, #20]
    7784:	9e01      	ldr	r6, [sp, #4]
    7786:	1aed      	subs	r5, r5, r3
    7788:	60a5      	str	r5, [r4, #8]
    778a:	9b01      	ldr	r3, [sp, #4]
    778c:	42b3      	cmp	r3, r6
    778e:	d200      	bcs.n	7792 <__ssputs_r+0x8e>
    7790:	001e      	movs	r6, r3
    7792:	0032      	movs	r2, r6
    7794:	9903      	ldr	r1, [sp, #12]
    7796:	6820      	ldr	r0, [r4, #0]
    7798:	f000 fabf 	bl	7d1a <memmove>
    779c:	68a3      	ldr	r3, [r4, #8]
    779e:	2000      	movs	r0, #0
    77a0:	1b9b      	subs	r3, r3, r6
    77a2:	60a3      	str	r3, [r4, #8]
    77a4:	6823      	ldr	r3, [r4, #0]
    77a6:	199e      	adds	r6, r3, r6
    77a8:	6026      	str	r6, [r4, #0]
    77aa:	e7da      	b.n	7762 <__ssputs_r+0x5e>
    77ac:	002a      	movs	r2, r5
    77ae:	0038      	movs	r0, r7
    77b0:	f000 fac7 	bl	7d42 <_realloc_r>
    77b4:	1e06      	subs	r6, r0, #0
    77b6:	d1e0      	bne.n	777a <__ssputs_r+0x76>
    77b8:	6921      	ldr	r1, [r4, #16]
    77ba:	0038      	movs	r0, r7
    77bc:	f7ff fefa 	bl	75b4 <_free_r>
    77c0:	e7c7      	b.n	7752 <__ssputs_r+0x4e>
    77c2:	46c0      	nop			; (mov r8, r8)
    77c4:	fffffb7f 	.word	0xfffffb7f

000077c8 <_svfiprintf_r>:
    77c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    77ca:	b09f      	sub	sp, #124	; 0x7c
    77cc:	9002      	str	r0, [sp, #8]
    77ce:	9305      	str	r3, [sp, #20]
    77d0:	898b      	ldrh	r3, [r1, #12]
    77d2:	000f      	movs	r7, r1
    77d4:	0016      	movs	r6, r2
    77d6:	061b      	lsls	r3, r3, #24
    77d8:	d511      	bpl.n	77fe <_svfiprintf_r+0x36>
    77da:	690b      	ldr	r3, [r1, #16]
    77dc:	2b00      	cmp	r3, #0
    77de:	d10e      	bne.n	77fe <_svfiprintf_r+0x36>
    77e0:	2140      	movs	r1, #64	; 0x40
    77e2:	f7ff ff31 	bl	7648 <_malloc_r>
    77e6:	6038      	str	r0, [r7, #0]
    77e8:	6138      	str	r0, [r7, #16]
    77ea:	2800      	cmp	r0, #0
    77ec:	d105      	bne.n	77fa <_svfiprintf_r+0x32>
    77ee:	230c      	movs	r3, #12
    77f0:	9a02      	ldr	r2, [sp, #8]
    77f2:	3801      	subs	r0, #1
    77f4:	6013      	str	r3, [r2, #0]
    77f6:	b01f      	add	sp, #124	; 0x7c
    77f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77fa:	2340      	movs	r3, #64	; 0x40
    77fc:	617b      	str	r3, [r7, #20]
    77fe:	2300      	movs	r3, #0
    7800:	ad06      	add	r5, sp, #24
    7802:	616b      	str	r3, [r5, #20]
    7804:	3320      	adds	r3, #32
    7806:	766b      	strb	r3, [r5, #25]
    7808:	3310      	adds	r3, #16
    780a:	76ab      	strb	r3, [r5, #26]
    780c:	0034      	movs	r4, r6
    780e:	7823      	ldrb	r3, [r4, #0]
    7810:	2b00      	cmp	r3, #0
    7812:	d147      	bne.n	78a4 <_svfiprintf_r+0xdc>
    7814:	1ba3      	subs	r3, r4, r6
    7816:	9304      	str	r3, [sp, #16]
    7818:	d00d      	beq.n	7836 <_svfiprintf_r+0x6e>
    781a:	1ba3      	subs	r3, r4, r6
    781c:	0032      	movs	r2, r6
    781e:	0039      	movs	r1, r7
    7820:	9802      	ldr	r0, [sp, #8]
    7822:	f7ff ff6f 	bl	7704 <__ssputs_r>
    7826:	1c43      	adds	r3, r0, #1
    7828:	d100      	bne.n	782c <_svfiprintf_r+0x64>
    782a:	e0b5      	b.n	7998 <_svfiprintf_r+0x1d0>
    782c:	696a      	ldr	r2, [r5, #20]
    782e:	9b04      	ldr	r3, [sp, #16]
    7830:	4694      	mov	ip, r2
    7832:	4463      	add	r3, ip
    7834:	616b      	str	r3, [r5, #20]
    7836:	7823      	ldrb	r3, [r4, #0]
    7838:	2b00      	cmp	r3, #0
    783a:	d100      	bne.n	783e <_svfiprintf_r+0x76>
    783c:	e0ac      	b.n	7998 <_svfiprintf_r+0x1d0>
    783e:	2201      	movs	r2, #1
    7840:	2300      	movs	r3, #0
    7842:	4252      	negs	r2, r2
    7844:	606a      	str	r2, [r5, #4]
    7846:	a902      	add	r1, sp, #8
    7848:	3254      	adds	r2, #84	; 0x54
    784a:	1852      	adds	r2, r2, r1
    784c:	3401      	adds	r4, #1
    784e:	602b      	str	r3, [r5, #0]
    7850:	60eb      	str	r3, [r5, #12]
    7852:	60ab      	str	r3, [r5, #8]
    7854:	7013      	strb	r3, [r2, #0]
    7856:	65ab      	str	r3, [r5, #88]	; 0x58
    7858:	4e58      	ldr	r6, [pc, #352]	; (79bc <_svfiprintf_r+0x1f4>)
    785a:	2205      	movs	r2, #5
    785c:	7821      	ldrb	r1, [r4, #0]
    785e:	0030      	movs	r0, r6
    7860:	f000 fa50 	bl	7d04 <memchr>
    7864:	1c62      	adds	r2, r4, #1
    7866:	2800      	cmp	r0, #0
    7868:	d120      	bne.n	78ac <_svfiprintf_r+0xe4>
    786a:	6829      	ldr	r1, [r5, #0]
    786c:	06cb      	lsls	r3, r1, #27
    786e:	d504      	bpl.n	787a <_svfiprintf_r+0xb2>
    7870:	2353      	movs	r3, #83	; 0x53
    7872:	ae02      	add	r6, sp, #8
    7874:	3020      	adds	r0, #32
    7876:	199b      	adds	r3, r3, r6
    7878:	7018      	strb	r0, [r3, #0]
    787a:	070b      	lsls	r3, r1, #28
    787c:	d504      	bpl.n	7888 <_svfiprintf_r+0xc0>
    787e:	2353      	movs	r3, #83	; 0x53
    7880:	202b      	movs	r0, #43	; 0x2b
    7882:	ae02      	add	r6, sp, #8
    7884:	199b      	adds	r3, r3, r6
    7886:	7018      	strb	r0, [r3, #0]
    7888:	7823      	ldrb	r3, [r4, #0]
    788a:	2b2a      	cmp	r3, #42	; 0x2a
    788c:	d016      	beq.n	78bc <_svfiprintf_r+0xf4>
    788e:	2000      	movs	r0, #0
    7890:	210a      	movs	r1, #10
    7892:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7894:	7822      	ldrb	r2, [r4, #0]
    7896:	3a30      	subs	r2, #48	; 0x30
    7898:	2a09      	cmp	r2, #9
    789a:	d955      	bls.n	7948 <_svfiprintf_r+0x180>
    789c:	2800      	cmp	r0, #0
    789e:	d015      	beq.n	78cc <_svfiprintf_r+0x104>
    78a0:	9309      	str	r3, [sp, #36]	; 0x24
    78a2:	e013      	b.n	78cc <_svfiprintf_r+0x104>
    78a4:	2b25      	cmp	r3, #37	; 0x25
    78a6:	d0b5      	beq.n	7814 <_svfiprintf_r+0x4c>
    78a8:	3401      	adds	r4, #1
    78aa:	e7b0      	b.n	780e <_svfiprintf_r+0x46>
    78ac:	2301      	movs	r3, #1
    78ae:	1b80      	subs	r0, r0, r6
    78b0:	4083      	lsls	r3, r0
    78b2:	6829      	ldr	r1, [r5, #0]
    78b4:	0014      	movs	r4, r2
    78b6:	430b      	orrs	r3, r1
    78b8:	602b      	str	r3, [r5, #0]
    78ba:	e7cd      	b.n	7858 <_svfiprintf_r+0x90>
    78bc:	9b05      	ldr	r3, [sp, #20]
    78be:	1d18      	adds	r0, r3, #4
    78c0:	681b      	ldr	r3, [r3, #0]
    78c2:	9005      	str	r0, [sp, #20]
    78c4:	2b00      	cmp	r3, #0
    78c6:	db39      	blt.n	793c <_svfiprintf_r+0x174>
    78c8:	9309      	str	r3, [sp, #36]	; 0x24
    78ca:	0014      	movs	r4, r2
    78cc:	7823      	ldrb	r3, [r4, #0]
    78ce:	2b2e      	cmp	r3, #46	; 0x2e
    78d0:	d10b      	bne.n	78ea <_svfiprintf_r+0x122>
    78d2:	7863      	ldrb	r3, [r4, #1]
    78d4:	1c62      	adds	r2, r4, #1
    78d6:	2b2a      	cmp	r3, #42	; 0x2a
    78d8:	d13e      	bne.n	7958 <_svfiprintf_r+0x190>
    78da:	9b05      	ldr	r3, [sp, #20]
    78dc:	3402      	adds	r4, #2
    78de:	1d1a      	adds	r2, r3, #4
    78e0:	681b      	ldr	r3, [r3, #0]
    78e2:	9205      	str	r2, [sp, #20]
    78e4:	2b00      	cmp	r3, #0
    78e6:	db34      	blt.n	7952 <_svfiprintf_r+0x18a>
    78e8:	9307      	str	r3, [sp, #28]
    78ea:	4e35      	ldr	r6, [pc, #212]	; (79c0 <_svfiprintf_r+0x1f8>)
    78ec:	7821      	ldrb	r1, [r4, #0]
    78ee:	2203      	movs	r2, #3
    78f0:	0030      	movs	r0, r6
    78f2:	f000 fa07 	bl	7d04 <memchr>
    78f6:	2800      	cmp	r0, #0
    78f8:	d006      	beq.n	7908 <_svfiprintf_r+0x140>
    78fa:	2340      	movs	r3, #64	; 0x40
    78fc:	1b80      	subs	r0, r0, r6
    78fe:	4083      	lsls	r3, r0
    7900:	682a      	ldr	r2, [r5, #0]
    7902:	3401      	adds	r4, #1
    7904:	4313      	orrs	r3, r2
    7906:	602b      	str	r3, [r5, #0]
    7908:	7821      	ldrb	r1, [r4, #0]
    790a:	2206      	movs	r2, #6
    790c:	482d      	ldr	r0, [pc, #180]	; (79c4 <_svfiprintf_r+0x1fc>)
    790e:	1c66      	adds	r6, r4, #1
    7910:	7629      	strb	r1, [r5, #24]
    7912:	f000 f9f7 	bl	7d04 <memchr>
    7916:	2800      	cmp	r0, #0
    7918:	d046      	beq.n	79a8 <_svfiprintf_r+0x1e0>
    791a:	4b2b      	ldr	r3, [pc, #172]	; (79c8 <_svfiprintf_r+0x200>)
    791c:	2b00      	cmp	r3, #0
    791e:	d12f      	bne.n	7980 <_svfiprintf_r+0x1b8>
    7920:	6829      	ldr	r1, [r5, #0]
    7922:	9b05      	ldr	r3, [sp, #20]
    7924:	2207      	movs	r2, #7
    7926:	05c9      	lsls	r1, r1, #23
    7928:	d528      	bpl.n	797c <_svfiprintf_r+0x1b4>
    792a:	189b      	adds	r3, r3, r2
    792c:	4393      	bics	r3, r2
    792e:	3308      	adds	r3, #8
    7930:	9305      	str	r3, [sp, #20]
    7932:	696b      	ldr	r3, [r5, #20]
    7934:	9a03      	ldr	r2, [sp, #12]
    7936:	189b      	adds	r3, r3, r2
    7938:	616b      	str	r3, [r5, #20]
    793a:	e767      	b.n	780c <_svfiprintf_r+0x44>
    793c:	425b      	negs	r3, r3
    793e:	60eb      	str	r3, [r5, #12]
    7940:	2302      	movs	r3, #2
    7942:	430b      	orrs	r3, r1
    7944:	602b      	str	r3, [r5, #0]
    7946:	e7c0      	b.n	78ca <_svfiprintf_r+0x102>
    7948:	434b      	muls	r3, r1
    794a:	3401      	adds	r4, #1
    794c:	189b      	adds	r3, r3, r2
    794e:	2001      	movs	r0, #1
    7950:	e7a0      	b.n	7894 <_svfiprintf_r+0xcc>
    7952:	2301      	movs	r3, #1
    7954:	425b      	negs	r3, r3
    7956:	e7c7      	b.n	78e8 <_svfiprintf_r+0x120>
    7958:	2300      	movs	r3, #0
    795a:	0014      	movs	r4, r2
    795c:	200a      	movs	r0, #10
    795e:	001a      	movs	r2, r3
    7960:	606b      	str	r3, [r5, #4]
    7962:	7821      	ldrb	r1, [r4, #0]
    7964:	3930      	subs	r1, #48	; 0x30
    7966:	2909      	cmp	r1, #9
    7968:	d903      	bls.n	7972 <_svfiprintf_r+0x1aa>
    796a:	2b00      	cmp	r3, #0
    796c:	d0bd      	beq.n	78ea <_svfiprintf_r+0x122>
    796e:	9207      	str	r2, [sp, #28]
    7970:	e7bb      	b.n	78ea <_svfiprintf_r+0x122>
    7972:	4342      	muls	r2, r0
    7974:	3401      	adds	r4, #1
    7976:	1852      	adds	r2, r2, r1
    7978:	2301      	movs	r3, #1
    797a:	e7f2      	b.n	7962 <_svfiprintf_r+0x19a>
    797c:	3307      	adds	r3, #7
    797e:	e7d5      	b.n	792c <_svfiprintf_r+0x164>
    7980:	ab05      	add	r3, sp, #20
    7982:	9300      	str	r3, [sp, #0]
    7984:	003a      	movs	r2, r7
    7986:	4b11      	ldr	r3, [pc, #68]	; (79cc <_svfiprintf_r+0x204>)
    7988:	0029      	movs	r1, r5
    798a:	9802      	ldr	r0, [sp, #8]
    798c:	e000      	b.n	7990 <_svfiprintf_r+0x1c8>
    798e:	bf00      	nop
    7990:	9003      	str	r0, [sp, #12]
    7992:	9b03      	ldr	r3, [sp, #12]
    7994:	3301      	adds	r3, #1
    7996:	d1cc      	bne.n	7932 <_svfiprintf_r+0x16a>
    7998:	89bb      	ldrh	r3, [r7, #12]
    799a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    799c:	065b      	lsls	r3, r3, #25
    799e:	d400      	bmi.n	79a2 <_svfiprintf_r+0x1da>
    79a0:	e729      	b.n	77f6 <_svfiprintf_r+0x2e>
    79a2:	2001      	movs	r0, #1
    79a4:	4240      	negs	r0, r0
    79a6:	e726      	b.n	77f6 <_svfiprintf_r+0x2e>
    79a8:	ab05      	add	r3, sp, #20
    79aa:	9300      	str	r3, [sp, #0]
    79ac:	003a      	movs	r2, r7
    79ae:	4b07      	ldr	r3, [pc, #28]	; (79cc <_svfiprintf_r+0x204>)
    79b0:	0029      	movs	r1, r5
    79b2:	9802      	ldr	r0, [sp, #8]
    79b4:	f000 f87a 	bl	7aac <_printf_i>
    79b8:	e7ea      	b.n	7990 <_svfiprintf_r+0x1c8>
    79ba:	46c0      	nop			; (mov r8, r8)
    79bc:	00007fc8 	.word	0x00007fc8
    79c0:	00007fce 	.word	0x00007fce
    79c4:	00007fd2 	.word	0x00007fd2
    79c8:	00000000 	.word	0x00000000
    79cc:	00007705 	.word	0x00007705

000079d0 <_printf_common>:
    79d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    79d2:	0015      	movs	r5, r2
    79d4:	9301      	str	r3, [sp, #4]
    79d6:	688a      	ldr	r2, [r1, #8]
    79d8:	690b      	ldr	r3, [r1, #16]
    79da:	9000      	str	r0, [sp, #0]
    79dc:	000c      	movs	r4, r1
    79de:	4293      	cmp	r3, r2
    79e0:	da00      	bge.n	79e4 <_printf_common+0x14>
    79e2:	0013      	movs	r3, r2
    79e4:	0022      	movs	r2, r4
    79e6:	602b      	str	r3, [r5, #0]
    79e8:	3243      	adds	r2, #67	; 0x43
    79ea:	7812      	ldrb	r2, [r2, #0]
    79ec:	2a00      	cmp	r2, #0
    79ee:	d001      	beq.n	79f4 <_printf_common+0x24>
    79f0:	3301      	adds	r3, #1
    79f2:	602b      	str	r3, [r5, #0]
    79f4:	6823      	ldr	r3, [r4, #0]
    79f6:	069b      	lsls	r3, r3, #26
    79f8:	d502      	bpl.n	7a00 <_printf_common+0x30>
    79fa:	682b      	ldr	r3, [r5, #0]
    79fc:	3302      	adds	r3, #2
    79fe:	602b      	str	r3, [r5, #0]
    7a00:	2706      	movs	r7, #6
    7a02:	6823      	ldr	r3, [r4, #0]
    7a04:	401f      	ands	r7, r3
    7a06:	d027      	beq.n	7a58 <_printf_common+0x88>
    7a08:	0023      	movs	r3, r4
    7a0a:	3343      	adds	r3, #67	; 0x43
    7a0c:	781b      	ldrb	r3, [r3, #0]
    7a0e:	1e5a      	subs	r2, r3, #1
    7a10:	4193      	sbcs	r3, r2
    7a12:	6822      	ldr	r2, [r4, #0]
    7a14:	0692      	lsls	r2, r2, #26
    7a16:	d430      	bmi.n	7a7a <_printf_common+0xaa>
    7a18:	0022      	movs	r2, r4
    7a1a:	9901      	ldr	r1, [sp, #4]
    7a1c:	3243      	adds	r2, #67	; 0x43
    7a1e:	9800      	ldr	r0, [sp, #0]
    7a20:	9e08      	ldr	r6, [sp, #32]
    7a22:	47b0      	blx	r6
    7a24:	1c43      	adds	r3, r0, #1
    7a26:	d025      	beq.n	7a74 <_printf_common+0xa4>
    7a28:	2306      	movs	r3, #6
    7a2a:	6820      	ldr	r0, [r4, #0]
    7a2c:	682a      	ldr	r2, [r5, #0]
    7a2e:	68e1      	ldr	r1, [r4, #12]
    7a30:	4003      	ands	r3, r0
    7a32:	2500      	movs	r5, #0
    7a34:	2b04      	cmp	r3, #4
    7a36:	d103      	bne.n	7a40 <_printf_common+0x70>
    7a38:	1a8d      	subs	r5, r1, r2
    7a3a:	43eb      	mvns	r3, r5
    7a3c:	17db      	asrs	r3, r3, #31
    7a3e:	401d      	ands	r5, r3
    7a40:	68a3      	ldr	r3, [r4, #8]
    7a42:	6922      	ldr	r2, [r4, #16]
    7a44:	4293      	cmp	r3, r2
    7a46:	dd01      	ble.n	7a4c <_printf_common+0x7c>
    7a48:	1a9b      	subs	r3, r3, r2
    7a4a:	18ed      	adds	r5, r5, r3
    7a4c:	2700      	movs	r7, #0
    7a4e:	42bd      	cmp	r5, r7
    7a50:	d120      	bne.n	7a94 <_printf_common+0xc4>
    7a52:	2000      	movs	r0, #0
    7a54:	e010      	b.n	7a78 <_printf_common+0xa8>
    7a56:	3701      	adds	r7, #1
    7a58:	68e3      	ldr	r3, [r4, #12]
    7a5a:	682a      	ldr	r2, [r5, #0]
    7a5c:	1a9b      	subs	r3, r3, r2
    7a5e:	429f      	cmp	r7, r3
    7a60:	dad2      	bge.n	7a08 <_printf_common+0x38>
    7a62:	0022      	movs	r2, r4
    7a64:	2301      	movs	r3, #1
    7a66:	3219      	adds	r2, #25
    7a68:	9901      	ldr	r1, [sp, #4]
    7a6a:	9800      	ldr	r0, [sp, #0]
    7a6c:	9e08      	ldr	r6, [sp, #32]
    7a6e:	47b0      	blx	r6
    7a70:	1c43      	adds	r3, r0, #1
    7a72:	d1f0      	bne.n	7a56 <_printf_common+0x86>
    7a74:	2001      	movs	r0, #1
    7a76:	4240      	negs	r0, r0
    7a78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7a7a:	2030      	movs	r0, #48	; 0x30
    7a7c:	18e1      	adds	r1, r4, r3
    7a7e:	3143      	adds	r1, #67	; 0x43
    7a80:	7008      	strb	r0, [r1, #0]
    7a82:	0021      	movs	r1, r4
    7a84:	1c5a      	adds	r2, r3, #1
    7a86:	3145      	adds	r1, #69	; 0x45
    7a88:	7809      	ldrb	r1, [r1, #0]
    7a8a:	18a2      	adds	r2, r4, r2
    7a8c:	3243      	adds	r2, #67	; 0x43
    7a8e:	3302      	adds	r3, #2
    7a90:	7011      	strb	r1, [r2, #0]
    7a92:	e7c1      	b.n	7a18 <_printf_common+0x48>
    7a94:	0022      	movs	r2, r4
    7a96:	2301      	movs	r3, #1
    7a98:	321a      	adds	r2, #26
    7a9a:	9901      	ldr	r1, [sp, #4]
    7a9c:	9800      	ldr	r0, [sp, #0]
    7a9e:	9e08      	ldr	r6, [sp, #32]
    7aa0:	47b0      	blx	r6
    7aa2:	1c43      	adds	r3, r0, #1
    7aa4:	d0e6      	beq.n	7a74 <_printf_common+0xa4>
    7aa6:	3701      	adds	r7, #1
    7aa8:	e7d1      	b.n	7a4e <_printf_common+0x7e>
	...

00007aac <_printf_i>:
    7aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aae:	b08b      	sub	sp, #44	; 0x2c
    7ab0:	9206      	str	r2, [sp, #24]
    7ab2:	000a      	movs	r2, r1
    7ab4:	3243      	adds	r2, #67	; 0x43
    7ab6:	9307      	str	r3, [sp, #28]
    7ab8:	9005      	str	r0, [sp, #20]
    7aba:	9204      	str	r2, [sp, #16]
    7abc:	7e0a      	ldrb	r2, [r1, #24]
    7abe:	000c      	movs	r4, r1
    7ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7ac2:	2a6e      	cmp	r2, #110	; 0x6e
    7ac4:	d100      	bne.n	7ac8 <_printf_i+0x1c>
    7ac6:	e08f      	b.n	7be8 <_printf_i+0x13c>
    7ac8:	d817      	bhi.n	7afa <_printf_i+0x4e>
    7aca:	2a63      	cmp	r2, #99	; 0x63
    7acc:	d02c      	beq.n	7b28 <_printf_i+0x7c>
    7ace:	d808      	bhi.n	7ae2 <_printf_i+0x36>
    7ad0:	2a00      	cmp	r2, #0
    7ad2:	d100      	bne.n	7ad6 <_printf_i+0x2a>
    7ad4:	e099      	b.n	7c0a <_printf_i+0x15e>
    7ad6:	2a58      	cmp	r2, #88	; 0x58
    7ad8:	d054      	beq.n	7b84 <_printf_i+0xd8>
    7ada:	0026      	movs	r6, r4
    7adc:	3642      	adds	r6, #66	; 0x42
    7ade:	7032      	strb	r2, [r6, #0]
    7ae0:	e029      	b.n	7b36 <_printf_i+0x8a>
    7ae2:	2a64      	cmp	r2, #100	; 0x64
    7ae4:	d001      	beq.n	7aea <_printf_i+0x3e>
    7ae6:	2a69      	cmp	r2, #105	; 0x69
    7ae8:	d1f7      	bne.n	7ada <_printf_i+0x2e>
    7aea:	6821      	ldr	r1, [r4, #0]
    7aec:	681a      	ldr	r2, [r3, #0]
    7aee:	0608      	lsls	r0, r1, #24
    7af0:	d523      	bpl.n	7b3a <_printf_i+0x8e>
    7af2:	1d11      	adds	r1, r2, #4
    7af4:	6019      	str	r1, [r3, #0]
    7af6:	6815      	ldr	r5, [r2, #0]
    7af8:	e025      	b.n	7b46 <_printf_i+0x9a>
    7afa:	2a73      	cmp	r2, #115	; 0x73
    7afc:	d100      	bne.n	7b00 <_printf_i+0x54>
    7afe:	e088      	b.n	7c12 <_printf_i+0x166>
    7b00:	d808      	bhi.n	7b14 <_printf_i+0x68>
    7b02:	2a6f      	cmp	r2, #111	; 0x6f
    7b04:	d029      	beq.n	7b5a <_printf_i+0xae>
    7b06:	2a70      	cmp	r2, #112	; 0x70
    7b08:	d1e7      	bne.n	7ada <_printf_i+0x2e>
    7b0a:	2220      	movs	r2, #32
    7b0c:	6809      	ldr	r1, [r1, #0]
    7b0e:	430a      	orrs	r2, r1
    7b10:	6022      	str	r2, [r4, #0]
    7b12:	e003      	b.n	7b1c <_printf_i+0x70>
    7b14:	2a75      	cmp	r2, #117	; 0x75
    7b16:	d020      	beq.n	7b5a <_printf_i+0xae>
    7b18:	2a78      	cmp	r2, #120	; 0x78
    7b1a:	d1de      	bne.n	7ada <_printf_i+0x2e>
    7b1c:	0022      	movs	r2, r4
    7b1e:	2178      	movs	r1, #120	; 0x78
    7b20:	3245      	adds	r2, #69	; 0x45
    7b22:	7011      	strb	r1, [r2, #0]
    7b24:	4a6c      	ldr	r2, [pc, #432]	; (7cd8 <_printf_i+0x22c>)
    7b26:	e030      	b.n	7b8a <_printf_i+0xde>
    7b28:	000e      	movs	r6, r1
    7b2a:	681a      	ldr	r2, [r3, #0]
    7b2c:	3642      	adds	r6, #66	; 0x42
    7b2e:	1d11      	adds	r1, r2, #4
    7b30:	6019      	str	r1, [r3, #0]
    7b32:	6813      	ldr	r3, [r2, #0]
    7b34:	7033      	strb	r3, [r6, #0]
    7b36:	2301      	movs	r3, #1
    7b38:	e079      	b.n	7c2e <_printf_i+0x182>
    7b3a:	0649      	lsls	r1, r1, #25
    7b3c:	d5d9      	bpl.n	7af2 <_printf_i+0x46>
    7b3e:	1d11      	adds	r1, r2, #4
    7b40:	6019      	str	r1, [r3, #0]
    7b42:	2300      	movs	r3, #0
    7b44:	5ed5      	ldrsh	r5, [r2, r3]
    7b46:	2d00      	cmp	r5, #0
    7b48:	da03      	bge.n	7b52 <_printf_i+0xa6>
    7b4a:	232d      	movs	r3, #45	; 0x2d
    7b4c:	9a04      	ldr	r2, [sp, #16]
    7b4e:	426d      	negs	r5, r5
    7b50:	7013      	strb	r3, [r2, #0]
    7b52:	4b62      	ldr	r3, [pc, #392]	; (7cdc <_printf_i+0x230>)
    7b54:	270a      	movs	r7, #10
    7b56:	9303      	str	r3, [sp, #12]
    7b58:	e02f      	b.n	7bba <_printf_i+0x10e>
    7b5a:	6820      	ldr	r0, [r4, #0]
    7b5c:	6819      	ldr	r1, [r3, #0]
    7b5e:	0605      	lsls	r5, r0, #24
    7b60:	d503      	bpl.n	7b6a <_printf_i+0xbe>
    7b62:	1d08      	adds	r0, r1, #4
    7b64:	6018      	str	r0, [r3, #0]
    7b66:	680d      	ldr	r5, [r1, #0]
    7b68:	e005      	b.n	7b76 <_printf_i+0xca>
    7b6a:	0640      	lsls	r0, r0, #25
    7b6c:	d5f9      	bpl.n	7b62 <_printf_i+0xb6>
    7b6e:	680d      	ldr	r5, [r1, #0]
    7b70:	1d08      	adds	r0, r1, #4
    7b72:	6018      	str	r0, [r3, #0]
    7b74:	b2ad      	uxth	r5, r5
    7b76:	4b59      	ldr	r3, [pc, #356]	; (7cdc <_printf_i+0x230>)
    7b78:	2708      	movs	r7, #8
    7b7a:	9303      	str	r3, [sp, #12]
    7b7c:	2a6f      	cmp	r2, #111	; 0x6f
    7b7e:	d018      	beq.n	7bb2 <_printf_i+0x106>
    7b80:	270a      	movs	r7, #10
    7b82:	e016      	b.n	7bb2 <_printf_i+0x106>
    7b84:	3145      	adds	r1, #69	; 0x45
    7b86:	700a      	strb	r2, [r1, #0]
    7b88:	4a54      	ldr	r2, [pc, #336]	; (7cdc <_printf_i+0x230>)
    7b8a:	9203      	str	r2, [sp, #12]
    7b8c:	681a      	ldr	r2, [r3, #0]
    7b8e:	6821      	ldr	r1, [r4, #0]
    7b90:	1d10      	adds	r0, r2, #4
    7b92:	6018      	str	r0, [r3, #0]
    7b94:	6815      	ldr	r5, [r2, #0]
    7b96:	0608      	lsls	r0, r1, #24
    7b98:	d522      	bpl.n	7be0 <_printf_i+0x134>
    7b9a:	07cb      	lsls	r3, r1, #31
    7b9c:	d502      	bpl.n	7ba4 <_printf_i+0xf8>
    7b9e:	2320      	movs	r3, #32
    7ba0:	4319      	orrs	r1, r3
    7ba2:	6021      	str	r1, [r4, #0]
    7ba4:	2710      	movs	r7, #16
    7ba6:	2d00      	cmp	r5, #0
    7ba8:	d103      	bne.n	7bb2 <_printf_i+0x106>
    7baa:	2320      	movs	r3, #32
    7bac:	6822      	ldr	r2, [r4, #0]
    7bae:	439a      	bics	r2, r3
    7bb0:	6022      	str	r2, [r4, #0]
    7bb2:	0023      	movs	r3, r4
    7bb4:	2200      	movs	r2, #0
    7bb6:	3343      	adds	r3, #67	; 0x43
    7bb8:	701a      	strb	r2, [r3, #0]
    7bba:	6863      	ldr	r3, [r4, #4]
    7bbc:	60a3      	str	r3, [r4, #8]
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	db5c      	blt.n	7c7c <_printf_i+0x1d0>
    7bc2:	2204      	movs	r2, #4
    7bc4:	6821      	ldr	r1, [r4, #0]
    7bc6:	4391      	bics	r1, r2
    7bc8:	6021      	str	r1, [r4, #0]
    7bca:	2d00      	cmp	r5, #0
    7bcc:	d158      	bne.n	7c80 <_printf_i+0x1d4>
    7bce:	9e04      	ldr	r6, [sp, #16]
    7bd0:	2b00      	cmp	r3, #0
    7bd2:	d064      	beq.n	7c9e <_printf_i+0x1f2>
    7bd4:	0026      	movs	r6, r4
    7bd6:	9b03      	ldr	r3, [sp, #12]
    7bd8:	3642      	adds	r6, #66	; 0x42
    7bda:	781b      	ldrb	r3, [r3, #0]
    7bdc:	7033      	strb	r3, [r6, #0]
    7bde:	e05e      	b.n	7c9e <_printf_i+0x1f2>
    7be0:	0648      	lsls	r0, r1, #25
    7be2:	d5da      	bpl.n	7b9a <_printf_i+0xee>
    7be4:	b2ad      	uxth	r5, r5
    7be6:	e7d8      	b.n	7b9a <_printf_i+0xee>
    7be8:	6809      	ldr	r1, [r1, #0]
    7bea:	681a      	ldr	r2, [r3, #0]
    7bec:	0608      	lsls	r0, r1, #24
    7bee:	d505      	bpl.n	7bfc <_printf_i+0x150>
    7bf0:	1d11      	adds	r1, r2, #4
    7bf2:	6019      	str	r1, [r3, #0]
    7bf4:	6813      	ldr	r3, [r2, #0]
    7bf6:	6962      	ldr	r2, [r4, #20]
    7bf8:	601a      	str	r2, [r3, #0]
    7bfa:	e006      	b.n	7c0a <_printf_i+0x15e>
    7bfc:	0649      	lsls	r1, r1, #25
    7bfe:	d5f7      	bpl.n	7bf0 <_printf_i+0x144>
    7c00:	1d11      	adds	r1, r2, #4
    7c02:	6019      	str	r1, [r3, #0]
    7c04:	6813      	ldr	r3, [r2, #0]
    7c06:	8aa2      	ldrh	r2, [r4, #20]
    7c08:	801a      	strh	r2, [r3, #0]
    7c0a:	2300      	movs	r3, #0
    7c0c:	9e04      	ldr	r6, [sp, #16]
    7c0e:	6123      	str	r3, [r4, #16]
    7c10:	e054      	b.n	7cbc <_printf_i+0x210>
    7c12:	681a      	ldr	r2, [r3, #0]
    7c14:	1d11      	adds	r1, r2, #4
    7c16:	6019      	str	r1, [r3, #0]
    7c18:	6816      	ldr	r6, [r2, #0]
    7c1a:	2100      	movs	r1, #0
    7c1c:	6862      	ldr	r2, [r4, #4]
    7c1e:	0030      	movs	r0, r6
    7c20:	f000 f870 	bl	7d04 <memchr>
    7c24:	2800      	cmp	r0, #0
    7c26:	d001      	beq.n	7c2c <_printf_i+0x180>
    7c28:	1b80      	subs	r0, r0, r6
    7c2a:	6060      	str	r0, [r4, #4]
    7c2c:	6863      	ldr	r3, [r4, #4]
    7c2e:	6123      	str	r3, [r4, #16]
    7c30:	2300      	movs	r3, #0
    7c32:	9a04      	ldr	r2, [sp, #16]
    7c34:	7013      	strb	r3, [r2, #0]
    7c36:	e041      	b.n	7cbc <_printf_i+0x210>
    7c38:	6923      	ldr	r3, [r4, #16]
    7c3a:	0032      	movs	r2, r6
    7c3c:	9906      	ldr	r1, [sp, #24]
    7c3e:	9805      	ldr	r0, [sp, #20]
    7c40:	9d07      	ldr	r5, [sp, #28]
    7c42:	47a8      	blx	r5
    7c44:	1c43      	adds	r3, r0, #1
    7c46:	d043      	beq.n	7cd0 <_printf_i+0x224>
    7c48:	6823      	ldr	r3, [r4, #0]
    7c4a:	2500      	movs	r5, #0
    7c4c:	079b      	lsls	r3, r3, #30
    7c4e:	d40f      	bmi.n	7c70 <_printf_i+0x1c4>
    7c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c52:	68e0      	ldr	r0, [r4, #12]
    7c54:	4298      	cmp	r0, r3
    7c56:	da3d      	bge.n	7cd4 <_printf_i+0x228>
    7c58:	0018      	movs	r0, r3
    7c5a:	e03b      	b.n	7cd4 <_printf_i+0x228>
    7c5c:	0022      	movs	r2, r4
    7c5e:	2301      	movs	r3, #1
    7c60:	3219      	adds	r2, #25
    7c62:	9906      	ldr	r1, [sp, #24]
    7c64:	9805      	ldr	r0, [sp, #20]
    7c66:	9e07      	ldr	r6, [sp, #28]
    7c68:	47b0      	blx	r6
    7c6a:	1c43      	adds	r3, r0, #1
    7c6c:	d030      	beq.n	7cd0 <_printf_i+0x224>
    7c6e:	3501      	adds	r5, #1
    7c70:	68e3      	ldr	r3, [r4, #12]
    7c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c74:	1a9b      	subs	r3, r3, r2
    7c76:	429d      	cmp	r5, r3
    7c78:	dbf0      	blt.n	7c5c <_printf_i+0x1b0>
    7c7a:	e7e9      	b.n	7c50 <_printf_i+0x1a4>
    7c7c:	2d00      	cmp	r5, #0
    7c7e:	d0a9      	beq.n	7bd4 <_printf_i+0x128>
    7c80:	9e04      	ldr	r6, [sp, #16]
    7c82:	0028      	movs	r0, r5
    7c84:	0039      	movs	r1, r7
    7c86:	f7ff fb3f 	bl	7308 <__aeabi_uidivmod>
    7c8a:	9b03      	ldr	r3, [sp, #12]
    7c8c:	3e01      	subs	r6, #1
    7c8e:	5c5b      	ldrb	r3, [r3, r1]
    7c90:	0028      	movs	r0, r5
    7c92:	7033      	strb	r3, [r6, #0]
    7c94:	0039      	movs	r1, r7
    7c96:	f7ff fab1 	bl	71fc <__udivsi3>
    7c9a:	1e05      	subs	r5, r0, #0
    7c9c:	d1f1      	bne.n	7c82 <_printf_i+0x1d6>
    7c9e:	2f08      	cmp	r7, #8
    7ca0:	d109      	bne.n	7cb6 <_printf_i+0x20a>
    7ca2:	6823      	ldr	r3, [r4, #0]
    7ca4:	07db      	lsls	r3, r3, #31
    7ca6:	d506      	bpl.n	7cb6 <_printf_i+0x20a>
    7ca8:	6863      	ldr	r3, [r4, #4]
    7caa:	6922      	ldr	r2, [r4, #16]
    7cac:	4293      	cmp	r3, r2
    7cae:	dc02      	bgt.n	7cb6 <_printf_i+0x20a>
    7cb0:	2330      	movs	r3, #48	; 0x30
    7cb2:	3e01      	subs	r6, #1
    7cb4:	7033      	strb	r3, [r6, #0]
    7cb6:	9b04      	ldr	r3, [sp, #16]
    7cb8:	1b9b      	subs	r3, r3, r6
    7cba:	6123      	str	r3, [r4, #16]
    7cbc:	9b07      	ldr	r3, [sp, #28]
    7cbe:	aa09      	add	r2, sp, #36	; 0x24
    7cc0:	9300      	str	r3, [sp, #0]
    7cc2:	0021      	movs	r1, r4
    7cc4:	9b06      	ldr	r3, [sp, #24]
    7cc6:	9805      	ldr	r0, [sp, #20]
    7cc8:	f7ff fe82 	bl	79d0 <_printf_common>
    7ccc:	1c43      	adds	r3, r0, #1
    7cce:	d1b3      	bne.n	7c38 <_printf_i+0x18c>
    7cd0:	2001      	movs	r0, #1
    7cd2:	4240      	negs	r0, r0
    7cd4:	b00b      	add	sp, #44	; 0x2c
    7cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cd8:	00007fea 	.word	0x00007fea
    7cdc:	00007fd9 	.word	0x00007fd9

00007ce0 <_sbrk_r>:
    7ce0:	2300      	movs	r3, #0
    7ce2:	b570      	push	{r4, r5, r6, lr}
    7ce4:	4c06      	ldr	r4, [pc, #24]	; (7d00 <_sbrk_r+0x20>)
    7ce6:	0005      	movs	r5, r0
    7ce8:	0008      	movs	r0, r1
    7cea:	6023      	str	r3, [r4, #0]
    7cec:	f7fa f810 	bl	1d10 <_sbrk>
    7cf0:	1c43      	adds	r3, r0, #1
    7cf2:	d103      	bne.n	7cfc <_sbrk_r+0x1c>
    7cf4:	6823      	ldr	r3, [r4, #0]
    7cf6:	2b00      	cmp	r3, #0
    7cf8:	d000      	beq.n	7cfc <_sbrk_r+0x1c>
    7cfa:	602b      	str	r3, [r5, #0]
    7cfc:	bd70      	pop	{r4, r5, r6, pc}
    7cfe:	46c0      	nop			; (mov r8, r8)
    7d00:	20001330 	.word	0x20001330

00007d04 <memchr>:
    7d04:	b2c9      	uxtb	r1, r1
    7d06:	1882      	adds	r2, r0, r2
    7d08:	4290      	cmp	r0, r2
    7d0a:	d101      	bne.n	7d10 <memchr+0xc>
    7d0c:	2000      	movs	r0, #0
    7d0e:	4770      	bx	lr
    7d10:	7803      	ldrb	r3, [r0, #0]
    7d12:	428b      	cmp	r3, r1
    7d14:	d0fb      	beq.n	7d0e <memchr+0xa>
    7d16:	3001      	adds	r0, #1
    7d18:	e7f6      	b.n	7d08 <memchr+0x4>

00007d1a <memmove>:
    7d1a:	b510      	push	{r4, lr}
    7d1c:	4288      	cmp	r0, r1
    7d1e:	d902      	bls.n	7d26 <memmove+0xc>
    7d20:	188b      	adds	r3, r1, r2
    7d22:	4298      	cmp	r0, r3
    7d24:	d308      	bcc.n	7d38 <memmove+0x1e>
    7d26:	2300      	movs	r3, #0
    7d28:	429a      	cmp	r2, r3
    7d2a:	d007      	beq.n	7d3c <memmove+0x22>
    7d2c:	5ccc      	ldrb	r4, [r1, r3]
    7d2e:	54c4      	strb	r4, [r0, r3]
    7d30:	3301      	adds	r3, #1
    7d32:	e7f9      	b.n	7d28 <memmove+0xe>
    7d34:	5c8b      	ldrb	r3, [r1, r2]
    7d36:	5483      	strb	r3, [r0, r2]
    7d38:	3a01      	subs	r2, #1
    7d3a:	d2fb      	bcs.n	7d34 <memmove+0x1a>
    7d3c:	bd10      	pop	{r4, pc}

00007d3e <__malloc_lock>:
    7d3e:	4770      	bx	lr

00007d40 <__malloc_unlock>:
    7d40:	4770      	bx	lr

00007d42 <_realloc_r>:
    7d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d44:	0007      	movs	r7, r0
    7d46:	000d      	movs	r5, r1
    7d48:	0016      	movs	r6, r2
    7d4a:	2900      	cmp	r1, #0
    7d4c:	d105      	bne.n	7d5a <_realloc_r+0x18>
    7d4e:	0011      	movs	r1, r2
    7d50:	f7ff fc7a 	bl	7648 <_malloc_r>
    7d54:	0004      	movs	r4, r0
    7d56:	0020      	movs	r0, r4
    7d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d5a:	2a00      	cmp	r2, #0
    7d5c:	d103      	bne.n	7d66 <_realloc_r+0x24>
    7d5e:	f7ff fc29 	bl	75b4 <_free_r>
    7d62:	0034      	movs	r4, r6
    7d64:	e7f7      	b.n	7d56 <_realloc_r+0x14>
    7d66:	f000 f812 	bl	7d8e <_malloc_usable_size_r>
    7d6a:	002c      	movs	r4, r5
    7d6c:	4286      	cmp	r6, r0
    7d6e:	d9f2      	bls.n	7d56 <_realloc_r+0x14>
    7d70:	0031      	movs	r1, r6
    7d72:	0038      	movs	r0, r7
    7d74:	f7ff fc68 	bl	7648 <_malloc_r>
    7d78:	1e04      	subs	r4, r0, #0
    7d7a:	d0ec      	beq.n	7d56 <_realloc_r+0x14>
    7d7c:	0029      	movs	r1, r5
    7d7e:	0032      	movs	r2, r6
    7d80:	f7ff fbe5 	bl	754e <memcpy>
    7d84:	0029      	movs	r1, r5
    7d86:	0038      	movs	r0, r7
    7d88:	f7ff fc14 	bl	75b4 <_free_r>
    7d8c:	e7e3      	b.n	7d56 <_realloc_r+0x14>

00007d8e <_malloc_usable_size_r>:
    7d8e:	1f0b      	subs	r3, r1, #4
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	1f18      	subs	r0, r3, #4
    7d94:	2b00      	cmp	r3, #0
    7d96:	da01      	bge.n	7d9c <_malloc_usable_size_r+0xe>
    7d98:	580b      	ldr	r3, [r1, r0]
    7d9a:	18c0      	adds	r0, r0, r3
    7d9c:	4770      	bx	lr
    7d9e:	0000      	movs	r0, r0
    7da0:	0000044a 	.word	0x0000044a
    7da4:	00000690 	.word	0x00000690
    7da8:	00000690 	.word	0x00000690
    7dac:	00000690 	.word	0x00000690
    7db0:	00000690 	.word	0x00000690
    7db4:	00000690 	.word	0x00000690
    7db8:	00000690 	.word	0x00000690
    7dbc:	00000690 	.word	0x00000690
    7dc0:	00000690 	.word	0x00000690
    7dc4:	00000690 	.word	0x00000690
    7dc8:	00000690 	.word	0x00000690
    7dcc:	00000690 	.word	0x00000690
    7dd0:	00000690 	.word	0x00000690
    7dd4:	00000690 	.word	0x00000690
    7dd8:	00000690 	.word	0x00000690
    7ddc:	00000690 	.word	0x00000690
    7de0:	00000432 	.word	0x00000432
    7de4:	00000690 	.word	0x00000690
    7de8:	00000690 	.word	0x00000690
    7dec:	00000690 	.word	0x00000690
    7df0:	00000690 	.word	0x00000690
    7df4:	00000690 	.word	0x00000690
    7df8:	00000690 	.word	0x00000690
    7dfc:	00000690 	.word	0x00000690
    7e00:	00000690 	.word	0x00000690
    7e04:	00000690 	.word	0x00000690
    7e08:	00000690 	.word	0x00000690
    7e0c:	00000690 	.word	0x00000690
    7e10:	00000690 	.word	0x00000690
    7e14:	00000690 	.word	0x00000690
    7e18:	00000690 	.word	0x00000690
    7e1c:	00000690 	.word	0x00000690
    7e20:	00000442 	.word	0x00000442
    7e24:	00000690 	.word	0x00000690
    7e28:	00000690 	.word	0x00000690
    7e2c:	00000690 	.word	0x00000690
    7e30:	00000690 	.word	0x00000690
    7e34:	00000690 	.word	0x00000690
    7e38:	00000690 	.word	0x00000690
    7e3c:	00000690 	.word	0x00000690
    7e40:	00000690 	.word	0x00000690
    7e44:	00000690 	.word	0x00000690
    7e48:	00000690 	.word	0x00000690
    7e4c:	00000690 	.word	0x00000690
    7e50:	00000690 	.word	0x00000690
    7e54:	00000690 	.word	0x00000690
    7e58:	00000690 	.word	0x00000690
    7e5c:	00000690 	.word	0x00000690
    7e60:	0000043a 	.word	0x0000043a
    7e64:	00000452 	.word	0x00000452
    7e68:	0000041a 	.word	0x0000041a
    7e6c:	0000042a 	.word	0x0000042a
    7e70:	00000422 	.word	0x00000422
    7e74:	0000ffff 	.word	0x0000ffff
    7e78:	0000ffff 	.word	0x0000ffff
    7e7c:	0000ffff 	.word	0x0000ffff
    7e80:	0000ffff 	.word	0x0000ffff
    7e84:	0000ffff 	.word	0x0000ffff
    7e88:	0000ffff 	.word	0x0000ffff
    7e8c:	00000006 	.word	0x00000006
    7e90:	00000007 	.word	0x00000007
    7e94:	0000ffff 	.word	0x0000ffff
    7e98:	0000ffff 	.word	0x0000ffff
    7e9c:	0000ffff 	.word	0x0000ffff
    7ea0:	0000ffff 	.word	0x0000ffff
    7ea4:	0000ffff 	.word	0x0000ffff
    7ea8:	0000ffff 	.word	0x0000ffff
    7eac:	0000ffff 	.word	0x0000ffff
    7eb0:	0000ffff 	.word	0x0000ffff
    7eb4:	00000008 	.word	0x00000008
    7eb8:	00000009 	.word	0x00000009
    7ebc:	0000ffff 	.word	0x0000ffff
    7ec0:	0000ffff 	.word	0x0000ffff
    7ec4:	42000800 	.word	0x42000800
    7ec8:	42000c00 	.word	0x42000c00
    7ecc:	42001000 	.word	0x42001000
    7ed0:	42001400 	.word	0x42001400
    7ed4:	42001800 	.word	0x42001800
    7ed8:	42001c00 	.word	0x42001c00
    7edc:	000010f6 	.word	0x000010f6
    7ee0:	000010f2 	.word	0x000010f2
    7ee4:	000010f2 	.word	0x000010f2
    7ee8:	00001158 	.word	0x00001158
    7eec:	00001158 	.word	0x00001158
    7ef0:	0000110a 	.word	0x0000110a
    7ef4:	000010fc 	.word	0x000010fc
    7ef8:	00001110 	.word	0x00001110
    7efc:	00001146 	.word	0x00001146
    7f00:	000012dc 	.word	0x000012dc
    7f04:	000012bc 	.word	0x000012bc
    7f08:	000012bc 	.word	0x000012bc
    7f0c:	00001348 	.word	0x00001348
    7f10:	000012ce 	.word	0x000012ce
    7f14:	000012ea 	.word	0x000012ea
    7f18:	000012c0 	.word	0x000012c0
    7f1c:	000012f8 	.word	0x000012f8
    7f20:	00001338 	.word	0x00001338
    7f24:	42002c00 	.word	0x42002c00
    7f28:	42003000 	.word	0x42003000
    7f2c:	42003400 	.word	0x42003400
    7f30:	00002824 	.word	0x00002824
    7f34:	0000296e 	.word	0x0000296e
    7f38:	000027fc 	.word	0x000027fc
    7f3c:	00002976 	.word	0x00002976
    7f40:	00002804 	.word	0x00002804
    7f44:	0000280c 	.word	0x0000280c
    7f48:	00002814 	.word	0x00002814
    7f4c:	0000281c 	.word	0x0000281c

00007f50 <tc_interrupt_vectors.11908>:
    7f50:	00141312 004e5553 254e5553 20643330     ....SUN.SUN%03d 
    7f60:	2578302d 00783430                       -0x%04x.

00007f68 <__sf_fake_stderr>:
	...

00007f88 <__sf_fake_stdin>:
	...

00007fa8 <__sf_fake_stdout>:
	...
    7fc8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7fd8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7fe8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7ff8:	00006665                                ef..

00007ffc <_init>:
    7ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ffe:	46c0      	nop			; (mov r8, r8)
    8000:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8002:	bc08      	pop	{r3}
    8004:	469e      	mov	lr, r3
    8006:	4770      	bx	lr

00008008 <__init_array_start>:
    8008:	000000dd 	.word	0x000000dd

0000800c <_fini>:
    800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    800e:	46c0      	nop			; (mov r8, r8)
    8010:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8012:	bc08      	pop	{r3}
    8014:	469e      	mov	lr, r3
    8016:	4770      	bx	lr

00008018 <__fini_array_start>:
    8018:	000000b5 	.word	0x000000b5
