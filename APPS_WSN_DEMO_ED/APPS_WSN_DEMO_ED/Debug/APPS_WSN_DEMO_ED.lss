
APPS_WSN_DEMO_ED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007fbc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00007fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001274  200000c0  00008080  000200c0  2**3
                  ALLOC
  3 .stack        00002004  20001334  000092f4  000200c0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      000000e5  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004cd8c  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000779a  00000000  00000000  0006cf55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e328  00000000  00000000  000746ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ac8  00000000  00000000  00082a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000011e8  00000000  00000000  000834df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020378  00000000  00000000  000846c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000199a2  00000000  00000000  000a4a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008985c  00000000  00000000  000be3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e44  00000000  00000000  00147c40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 33 00 20 bd 1c 00 00 b9 1c 00 00 b9 1c 00 00     83. ............
	...
      2c:	b9 1c 00 00 00 00 00 00 00 00 00 00 b9 1c 00 00     ................
      3c:	b9 1c 00 00 b9 1c 00 00 b9 1c 00 00 b9 1c 00 00     ................
      4c:	dd 0a 00 00 09 07 00 00 b9 1c 00 00 b9 1c 00 00     ................
      5c:	b9 1c 00 00 b9 1c 00 00 5d 0d 00 00 6d 0d 00 00     ........]...m...
      6c:	7d 0d 00 00 8d 0d 00 00 9d 0d 00 00 ad 0d 00 00     }...............
      7c:	b9 1c 00 00 b9 1c 00 00 b9 1c 00 00 99 19 00 00     ................
      8c:	a9 19 00 00 b9 19 00 00 00 00 00 00 00 00 00 00     ................
      9c:	b9 1c 00 00 b9 1c 00 00 00 00 00 00 b9 1c 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c0 	.word	0x200000c0
      d4:	00000000 	.word	0x00000000
      d8:	00007fbc 	.word	0x00007fbc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c4 	.word	0x200000c4
     108:	00007fbc 	.word	0x00007fbc
     10c:	00007fbc 	.word	0x00007fbc
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001691 	.word	0x00001691
     140:	0000719d 	.word	0x0000719d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	200000dc 	.word	0x200000dc
     1b8:	200000e0 	.word	0x200000e0
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	200000dc 	.word	0x200000dc
     1e8:	200000e0 	.word	0x200000e0
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b570      	push	{r4, r5, r6, lr}
     1f2:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2301      	movs	r3, #1
     1f8:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     1fa:	2600      	movs	r6, #0
     1fc:	70a6      	strb	r6, [r4, #2]
#ifdef CONF_BOARD_AT86RFX	
//--------------------------------------------------------------------//
	struct port_config pin_conf;
//--------------------------------------------------------------------//
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	2052      	movs	r0, #82	; 0x52
     204:	4d12      	ldr	r5, [pc, #72]	; (250 <system_board_init+0x60>)
     206:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     208:	0021      	movs	r1, r4
     20a:	203e      	movs	r0, #62	; 0x3e
     20c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     20e:	0021      	movs	r1, r4
     210:	203f      	movs	r0, #63	; 0x3f
     212:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	202f      	movs	r0, #47	; 0x2f
     218:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     21a:	0021      	movs	r1, r4
     21c:	2014      	movs	r0, #20
     21e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     220:	2280      	movs	r2, #128	; 0x80
     222:	02d2      	lsls	r2, r2, #11
     224:	4b0b      	ldr	r3, [pc, #44]	; (254 <system_board_init+0x64>)
     226:	619a      	str	r2, [r3, #24]
     228:	4b0b      	ldr	r3, [pc, #44]	; (258 <system_board_init+0x68>)
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	05d2      	lsls	r2, r2, #23
     22e:	619a      	str	r2, [r3, #24]
     230:	2280      	movs	r2, #128	; 0x80
     232:	0612      	lsls	r2, r2, #24
     234:	619a      	str	r2, [r3, #24]
     236:	2280      	movs	r2, #128	; 0x80
     238:	0212      	lsls	r2, r2, #8
     23a:	619a      	str	r2, [r3, #24]
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	0352      	lsls	r2, r2, #13
     240:	4b06      	ldr	r3, [pc, #24]	; (25c <system_board_init+0x6c>)
     242:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     244:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     246:	0021      	movs	r1, r4
     248:	2053      	movs	r0, #83	; 0x53
     24a:	47a8      	blx	r5
//	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
//	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
//	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     24c:	b002      	add	sp, #8
     24e:	bd70      	pop	{r4, r5, r6, pc}
     250:	0000086d 	.word	0x0000086d
     254:	41004500 	.word	0x41004500
     258:	41004480 	.word	0x41004480
     25c:	41004400 	.word	0x41004400

00000260 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     260:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     262:	2200      	movs	r2, #0
     264:	2300      	movs	r3, #0
     266:	7002      	strb	r2, [r0, #0]
//	config->reference                     = ADC_REFERENCE_INT1V;
	config->reference                     = ADC_REFCTRL_REFSEL_INTVCC0;	// by jsk 2019.03.11
     268:	2101      	movs	r1, #1
     26a:	7041      	strb	r1, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     26c:	2100      	movs	r1, #0
     26e:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     270:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     272:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     274:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     276:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     278:	6082      	str	r2, [r0, #8]

	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ; 
     27a:	2406      	movs	r4, #6
     27c:	7304      	strb	r4, [r0, #12]
//	config->positive_input                = ADC_POSITIVE_INPUT_PIN7 ; // by jsk 2019.03.11

	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     27e:	24c0      	movs	r4, #192	; 0xc0
     280:	0164      	lsls	r4, r4, #5
     282:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     284:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     286:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     288:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     28a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     28c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     28e:	242a      	movs	r4, #42	; 0x2a
     290:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     292:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     294:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     296:	3c06      	subs	r4, #6
     298:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     29a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     29c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     29e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     2a0:	232b      	movs	r3, #43	; 0x2b
     2a2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     2a4:	3301      	adds	r3, #1
     2a6:	54c1      	strb	r1, [r0, r3]
//	config->pin_scan.inputs_to_scan       = 2; // by jsk 2019.03.11
}
     2a8:	bd10      	pop	{r4, pc}
	...

000002ac <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ae:	46d6      	mov	lr, sl
     2b0:	464f      	mov	r7, r9
     2b2:	4646      	mov	r6, r8
     2b4:	b5c0      	push	{r6, r7, lr}
     2b6:	b096      	sub	sp, #88	; 0x58
     2b8:	0007      	movs	r7, r0
     2ba:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     2bc:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2be:	4acb      	ldr	r2, [pc, #812]	; (5ec <adc_init+0x340>)
     2c0:	6a10      	ldr	r0, [r2, #32]
     2c2:	2380      	movs	r3, #128	; 0x80
     2c4:	025b      	lsls	r3, r3, #9
     2c6:	4303      	orrs	r3, r0
     2c8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2ca:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     2cc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2ce:	07db      	lsls	r3, r3, #31
     2d0:	d505      	bpl.n	2de <adc_init+0x32>
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}
	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     2d2:	b016      	add	sp, #88	; 0x58
     2d4:	bc1c      	pop	{r2, r3, r4}
     2d6:	4690      	mov	r8, r2
     2d8:	4699      	mov	r9, r3
     2da:	46a2      	mov	sl, r4
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2de:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     2e0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2e2:	079b      	lsls	r3, r3, #30
     2e4:	d4f5      	bmi.n	2d2 <adc_init+0x26>
	module_inst->reference = config->reference;
     2e6:	7873      	ldrb	r3, [r6, #1]
     2e8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     2ea:	2b00      	cmp	r3, #0
     2ec:	d104      	bne.n	2f8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     2ee:	4ac0      	ldr	r2, [pc, #768]	; (5f0 <adc_init+0x344>)
     2f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     2f2:	2104      	movs	r1, #4
     2f4:	430b      	orrs	r3, r1
     2f6:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     2fc:	7833      	ldrb	r3, [r6, #0]
     2fe:	466a      	mov	r2, sp
     300:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     302:	4669      	mov	r1, sp
     304:	201e      	movs	r0, #30
     306:	4bbb      	ldr	r3, [pc, #748]	; (5f4 <adc_init+0x348>)
     308:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     30a:	201e      	movs	r0, #30
     30c:	4bba      	ldr	r3, [pc, #744]	; (5f8 <adc_init+0x34c>)
     30e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     310:	232c      	movs	r3, #44	; 0x2c
     312:	5cf2      	ldrb	r2, [r6, r3]
     314:	2a00      	cmp	r2, #0
     316:	d054      	beq.n	3c2 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     318:	3b01      	subs	r3, #1
     31a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     31c:	7b33      	ldrb	r3, [r6, #12]
     31e:	18eb      	adds	r3, r5, r3
     320:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     322:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     324:	b2c9      	uxtb	r1, r1
     326:	428b      	cmp	r3, r1
     328:	d221      	bcs.n	36e <adc_init+0xc2>
     32a:	1952      	adds	r2, r2, r5
     32c:	b2d3      	uxtb	r3, r2
     32e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     330:	4bb2      	ldr	r3, [pc, #712]	; (5fc <adc_init+0x350>)
     332:	469a      	mov	sl, r3
     334:	e003      	b.n	33e <adc_init+0x92>
			offset++;
     336:	3501      	adds	r5, #1
     338:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     33a:	45a9      	cmp	r9, r5
     33c:	d017      	beq.n	36e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     33e:	240f      	movs	r4, #15
     340:	402c      	ands	r4, r5
     342:	7b33      	ldrb	r3, [r6, #12]
     344:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     346:	2250      	movs	r2, #80	; 0x50
     348:	49ad      	ldr	r1, [pc, #692]	; (600 <adc_init+0x354>)
     34a:	a802      	add	r0, sp, #8
     34c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     34e:	2c13      	cmp	r4, #19
     350:	d8f1      	bhi.n	336 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     352:	00a4      	lsls	r4, r4, #2
     354:	ab02      	add	r3, sp, #8
     356:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     358:	a901      	add	r1, sp, #4
     35a:	2300      	movs	r3, #0
     35c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     35e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     360:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     362:	3301      	adds	r3, #1
     364:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     366:	b2c0      	uxtb	r0, r0
     368:	4ba6      	ldr	r3, [pc, #664]	; (604 <adc_init+0x358>)
     36a:	4798      	blx	r3
     36c:	e7e3      	b.n	336 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     36e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     370:	2250      	movs	r2, #80	; 0x50
     372:	49a3      	ldr	r1, [pc, #652]	; (600 <adc_init+0x354>)
     374:	a802      	add	r0, sp, #8
     376:	4ba1      	ldr	r3, [pc, #644]	; (5fc <adc_init+0x350>)
     378:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     37a:	2c13      	cmp	r4, #19
     37c:	d913      	bls.n	3a6 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     37e:	7d73      	ldrb	r3, [r6, #21]
     380:	009b      	lsls	r3, r3, #2
     382:	b2db      	uxtb	r3, r3
     384:	4642      	mov	r2, r8
     386:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     388:	7db3      	ldrb	r3, [r6, #22]
     38a:	01db      	lsls	r3, r3, #7
     38c:	7872      	ldrb	r2, [r6, #1]
     38e:	4313      	orrs	r3, r2
     390:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     392:	4642      	mov	r2, r8
     394:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     396:	7933      	ldrb	r3, [r6, #4]
     398:	2b34      	cmp	r3, #52	; 0x34
     39a:	d900      	bls.n	39e <adc_init+0xf2>
     39c:	e178      	b.n	690 <adc_init+0x3e4>
     39e:	009b      	lsls	r3, r3, #2
     3a0:	4a99      	ldr	r2, [pc, #612]	; (608 <adc_init+0x35c>)
     3a2:	58d3      	ldr	r3, [r2, r3]
     3a4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3a6:	00a4      	lsls	r4, r4, #2
     3a8:	ab02      	add	r3, sp, #8
     3aa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3ac:	a901      	add	r1, sp, #4
     3ae:	2300      	movs	r3, #0
     3b0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3b2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3b4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3b6:	3301      	adds	r3, #1
     3b8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3ba:	b2c0      	uxtb	r0, r0
     3bc:	4b91      	ldr	r3, [pc, #580]	; (604 <adc_init+0x358>)
     3be:	4798      	blx	r3
     3c0:	e7dd      	b.n	37e <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     3c2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     3c4:	2250      	movs	r2, #80	; 0x50
     3c6:	498e      	ldr	r1, [pc, #568]	; (600 <adc_init+0x354>)
     3c8:	a802      	add	r0, sp, #8
     3ca:	4b8c      	ldr	r3, [pc, #560]	; (5fc <adc_init+0x350>)
     3cc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3ce:	2c13      	cmp	r4, #19
     3d0:	d915      	bls.n	3fe <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     3d2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     3d4:	2250      	movs	r2, #80	; 0x50
     3d6:	498a      	ldr	r1, [pc, #552]	; (600 <adc_init+0x354>)
     3d8:	a802      	add	r0, sp, #8
     3da:	4b88      	ldr	r3, [pc, #544]	; (5fc <adc_init+0x350>)
     3dc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3de:	2c13      	cmp	r4, #19
     3e0:	d8cd      	bhi.n	37e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3e2:	00a4      	lsls	r4, r4, #2
     3e4:	ab02      	add	r3, sp, #8
     3e6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3e8:	a901      	add	r1, sp, #4
     3ea:	2300      	movs	r3, #0
     3ec:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3f2:	3301      	adds	r3, #1
     3f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3f6:	b2c0      	uxtb	r0, r0
     3f8:	4b82      	ldr	r3, [pc, #520]	; (604 <adc_init+0x358>)
     3fa:	4798      	blx	r3
     3fc:	e7bf      	b.n	37e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3fe:	00a4      	lsls	r4, r4, #2
     400:	ab02      	add	r3, sp, #8
     402:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     404:	a901      	add	r1, sp, #4
     406:	2300      	movs	r3, #0
     408:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     40a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     40c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     40e:	3301      	adds	r3, #1
     410:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     412:	b2c0      	uxtb	r0, r0
     414:	4b7b      	ldr	r3, [pc, #492]	; (604 <adc_init+0x358>)
     416:	4798      	blx	r3
     418:	e7db      	b.n	3d2 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     41a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     41c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     41e:	2102      	movs	r1, #2
     420:	e01a      	b.n	458 <adc_init+0x1ac>
		adjres = config->divide_result;
     422:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     424:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     426:	2410      	movs	r4, #16
     428:	e016      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     42a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     42c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     42e:	2101      	movs	r1, #1
     430:	e012      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     432:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     434:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     436:	2100      	movs	r1, #0
     438:	e00e      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     43a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     43c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     43e:	2100      	movs	r1, #0
     440:	e00a      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     442:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     444:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     446:	2100      	movs	r1, #0
     448:	e006      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     44a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     44c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     44e:	2100      	movs	r1, #0
     450:	e002      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     452:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     454:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     456:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     458:	0109      	lsls	r1, r1, #4
     45a:	2270      	movs	r2, #112	; 0x70
     45c:	400a      	ands	r2, r1
     45e:	4313      	orrs	r3, r2
     460:	4642      	mov	r2, r8
     462:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     464:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     466:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     468:	2b3f      	cmp	r3, #63	; 0x3f
     46a:	d900      	bls.n	46e <adc_init+0x1c2>
     46c:	e731      	b.n	2d2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     46e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     470:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     472:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     474:	b25b      	sxtb	r3, r3
     476:	2b00      	cmp	r3, #0
     478:	dbfb      	blt.n	472 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     47a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     47c:	8872      	ldrh	r2, [r6, #2]
     47e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     480:	2224      	movs	r2, #36	; 0x24
     482:	5cb2      	ldrb	r2, [r6, r2]
     484:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     486:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     488:	7d32      	ldrb	r2, [r6, #20]
     48a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     48c:	4313      	orrs	r3, r2
     48e:	7cb2      	ldrb	r2, [r6, #18]
     490:	0052      	lsls	r2, r2, #1
     492:	4313      	orrs	r3, r2
     494:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     496:	4642      	mov	r2, r8
     498:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     49a:	7e33      	ldrb	r3, [r6, #24]
     49c:	2b00      	cmp	r3, #0
     49e:	d020      	beq.n	4e2 <adc_init+0x236>
		switch (resolution) {
     4a0:	2c10      	cmp	r4, #16
     4a2:	d100      	bne.n	4a6 <adc_init+0x1fa>
     4a4:	e0d6      	b.n	654 <adc_init+0x3a8>
     4a6:	d800      	bhi.n	4aa <adc_init+0x1fe>
     4a8:	e080      	b.n	5ac <adc_init+0x300>
     4aa:	2c20      	cmp	r4, #32
     4ac:	d100      	bne.n	4b0 <adc_init+0x204>
     4ae:	e0b3      	b.n	618 <adc_init+0x36c>
     4b0:	2c30      	cmp	r4, #48	; 0x30
     4b2:	d116      	bne.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     4b4:	7cf2      	ldrb	r2, [r6, #19]
     4b6:	2a00      	cmp	r2, #0
     4b8:	d00a      	beq.n	4d0 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     4ba:	69f2      	ldr	r2, [r6, #28]
     4bc:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4be:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4c0:	2aff      	cmp	r2, #255	; 0xff
     4c2:	d900      	bls.n	4c6 <adc_init+0x21a>
     4c4:	e705      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     4c6:	6a32      	ldr	r2, [r6, #32]
     4c8:	3280      	adds	r2, #128	; 0x80
     4ca:	2aff      	cmp	r2, #255	; 0xff
     4cc:	d900      	bls.n	4d0 <adc_init+0x224>
     4ce:	e700      	b.n	2d2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4d2:	69f2      	ldr	r2, [r6, #28]
     4d4:	2aff      	cmp	r2, #255	; 0xff
     4d6:	dd00      	ble.n	4da <adc_init+0x22e>
     4d8:	e6fb      	b.n	2d2 <adc_init+0x26>
     4da:	6a32      	ldr	r2, [r6, #32]
     4dc:	2aff      	cmp	r2, #255	; 0xff
     4de:	dd00      	ble.n	4e2 <adc_init+0x236>
     4e0:	e6f7      	b.n	2d2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     4e2:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4e4:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     4e6:	b252      	sxtb	r2, r2
     4e8:	2a00      	cmp	r2, #0
     4ea:	dbfb      	blt.n	4e4 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     4ec:	4642      	mov	r2, r8
     4ee:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     4f0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4f2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4f4:	b25b      	sxtb	r3, r3
     4f6:	2b00      	cmp	r3, #0
     4f8:	dbfb      	blt.n	4f2 <adc_init+0x246>
	adc_module->WINLT.reg =
     4fa:	8bb3      	ldrh	r3, [r6, #28]
     4fc:	4642      	mov	r2, r8
     4fe:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     500:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     502:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     504:	b25b      	sxtb	r3, r3
     506:	2b00      	cmp	r3, #0
     508:	dbfb      	blt.n	502 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     50a:	8c33      	ldrh	r3, [r6, #32]
     50c:	4642      	mov	r2, r8
     50e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     510:	232c      	movs	r3, #44	; 0x2c
     512:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     514:	2b00      	cmp	r3, #0
     516:	d005      	beq.n	524 <adc_init+0x278>
		inputs_to_scan--;
     518:	3b01      	subs	r3, #1
     51a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     51c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     51e:	2b0f      	cmp	r3, #15
     520:	d900      	bls.n	524 <adc_init+0x278>
     522:	e6d6      	b.n	2d2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     524:	222b      	movs	r2, #43	; 0x2b
     526:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     528:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     52a:	290f      	cmp	r1, #15
     52c:	d900      	bls.n	530 <adc_init+0x284>
     52e:	e6d0      	b.n	2d2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     530:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     532:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     534:	b252      	sxtb	r2, r2
     536:	2a00      	cmp	r2, #0
     538:	dbfb      	blt.n	532 <adc_init+0x286>
			config->negative_input |
     53a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     53c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     53e:	4302      	orrs	r2, r0
     540:	68b0      	ldr	r0, [r6, #8]
     542:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     544:	0509      	lsls	r1, r1, #20
			config->negative_input |
     546:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     548:	041b      	lsls	r3, r3, #16
			config->negative_input |
     54a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     54c:	4642      	mov	r2, r8
     54e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     550:	232a      	movs	r3, #42	; 0x2a
     552:	5cf3      	ldrb	r3, [r6, r3]
     554:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     556:	230f      	movs	r3, #15
     558:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     55a:	3315      	adds	r3, #21
     55c:	5cf3      	ldrb	r3, [r6, r3]
     55e:	2b00      	cmp	r3, #0
     560:	d012      	beq.n	588 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     562:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     564:	4a29      	ldr	r2, [pc, #164]	; (60c <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     566:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     568:	4293      	cmp	r3, r2
     56a:	d900      	bls.n	56e <adc_init+0x2c2>
     56c:	e6b1      	b.n	2d2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     56e:	4642      	mov	r2, r8
     570:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     572:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     574:	2380      	movs	r3, #128	; 0x80
     576:	011b      	lsls	r3, r3, #4
     578:	18d3      	adds	r3, r2, r3
     57a:	4924      	ldr	r1, [pc, #144]	; (60c <adc_init+0x360>)
     57c:	b29b      	uxth	r3, r3
     57e:	428b      	cmp	r3, r1
     580:	d900      	bls.n	584 <adc_init+0x2d8>
     582:	e6a6      	b.n	2d2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     584:	4643      	mov	r3, r8
     586:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     588:	4b21      	ldr	r3, [pc, #132]	; (610 <adc_init+0x364>)
     58a:	681b      	ldr	r3, [r3, #0]
     58c:	015b      	lsls	r3, r3, #5
     58e:	22e0      	movs	r2, #224	; 0xe0
     590:	00d2      	lsls	r2, r2, #3
     592:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     594:	4a1f      	ldr	r2, [pc, #124]	; (614 <adc_init+0x368>)
     596:	6851      	ldr	r1, [r2, #4]
     598:	0149      	lsls	r1, r1, #5
     59a:	6812      	ldr	r2, [r2, #0]
     59c:	0ed2      	lsrs	r2, r2, #27
     59e:	430a      	orrs	r2, r1
     5a0:	b2d2      	uxtb	r2, r2
			) |
     5a2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     5a4:	4642      	mov	r2, r8
     5a6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     5a8:	2000      	movs	r0, #0
     5aa:	e692      	b.n	2d2 <adc_init+0x26>
		switch (resolution) {
     5ac:	2c00      	cmp	r4, #0
     5ae:	d198      	bne.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     5b0:	7cf2      	ldrb	r2, [r6, #19]
     5b2:	2a00      	cmp	r2, #0
     5b4:	d00f      	beq.n	5d6 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     5b6:	69f2      	ldr	r2, [r6, #28]
     5b8:	2180      	movs	r1, #128	; 0x80
     5ba:	0109      	lsls	r1, r1, #4
     5bc:	468c      	mov	ip, r1
     5be:	4462      	add	r2, ip
			if (config->differential_mode &&
     5c0:	4912      	ldr	r1, [pc, #72]	; (60c <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     5c2:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5c4:	428a      	cmp	r2, r1
     5c6:	d900      	bls.n	5ca <adc_init+0x31e>
     5c8:	e683      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     5ca:	6a32      	ldr	r2, [r6, #32]
     5cc:	4462      	add	r2, ip
     5ce:	490f      	ldr	r1, [pc, #60]	; (60c <adc_init+0x360>)
     5d0:	428a      	cmp	r2, r1
     5d2:	d900      	bls.n	5d6 <adc_init+0x32a>
     5d4:	e67d      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     5d6:	4a0d      	ldr	r2, [pc, #52]	; (60c <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     5d8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5da:	69f1      	ldr	r1, [r6, #28]
     5dc:	4291      	cmp	r1, r2
     5de:	dd00      	ble.n	5e2 <adc_init+0x336>
     5e0:	e677      	b.n	2d2 <adc_init+0x26>
     5e2:	6a31      	ldr	r1, [r6, #32]
     5e4:	4291      	cmp	r1, r2
     5e6:	dd00      	ble.n	5ea <adc_init+0x33e>
     5e8:	e673      	b.n	2d2 <adc_init+0x26>
     5ea:	e77a      	b.n	4e2 <adc_init+0x236>
     5ec:	40000400 	.word	0x40000400
     5f0:	40000800 	.word	0x40000800
     5f4:	000017a9 	.word	0x000017a9
     5f8:	0000171d 	.word	0x0000171d
     5fc:	000074ef 	.word	0x000074ef
     600:	00007e14 	.word	0x00007e14
     604:	000018a1 	.word	0x000018a1
     608:	00007d40 	.word	0x00007d40
     60c:	00000fff 	.word	0x00000fff
     610:	00806024 	.word	0x00806024
     614:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     618:	7cf2      	ldrb	r2, [r6, #19]
     61a:	2a00      	cmp	r2, #0
     61c:	d00f      	beq.n	63e <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     61e:	69f2      	ldr	r2, [r6, #28]
     620:	2180      	movs	r1, #128	; 0x80
     622:	0089      	lsls	r1, r1, #2
     624:	468c      	mov	ip, r1
     626:	4462      	add	r2, ip
			if (config->differential_mode &&
     628:	491a      	ldr	r1, [pc, #104]	; (694 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     62a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     62c:	428a      	cmp	r2, r1
     62e:	d900      	bls.n	632 <adc_init+0x386>
     630:	e64f      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     632:	6a32      	ldr	r2, [r6, #32]
     634:	4462      	add	r2, ip
     636:	4917      	ldr	r1, [pc, #92]	; (694 <adc_init+0x3e8>)
     638:	428a      	cmp	r2, r1
     63a:	d900      	bls.n	63e <adc_init+0x392>
     63c:	e649      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     63e:	4a15      	ldr	r2, [pc, #84]	; (694 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     640:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     642:	69f1      	ldr	r1, [r6, #28]
     644:	4291      	cmp	r1, r2
     646:	dd00      	ble.n	64a <adc_init+0x39e>
     648:	e643      	b.n	2d2 <adc_init+0x26>
     64a:	6a31      	ldr	r1, [r6, #32]
     64c:	4291      	cmp	r1, r2
     64e:	dd00      	ble.n	652 <adc_init+0x3a6>
     650:	e63f      	b.n	2d2 <adc_init+0x26>
     652:	e746      	b.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     654:	7cf2      	ldrb	r2, [r6, #19]
     656:	2a00      	cmp	r2, #0
     658:	d00f      	beq.n	67a <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     65a:	69f2      	ldr	r2, [r6, #28]
     65c:	2180      	movs	r1, #128	; 0x80
     65e:	0209      	lsls	r1, r1, #8
     660:	468c      	mov	ip, r1
     662:	4462      	add	r2, ip
			if (config->differential_mode &&
     664:	490c      	ldr	r1, [pc, #48]	; (698 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     666:	2017      	movs	r0, #23
			if (config->differential_mode &&
     668:	428a      	cmp	r2, r1
     66a:	d900      	bls.n	66e <adc_init+0x3c2>
     66c:	e631      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     66e:	6a32      	ldr	r2, [r6, #32]
     670:	4462      	add	r2, ip
     672:	4909      	ldr	r1, [pc, #36]	; (698 <adc_init+0x3ec>)
     674:	428a      	cmp	r2, r1
     676:	d900      	bls.n	67a <adc_init+0x3ce>
     678:	e62b      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     67a:	4a07      	ldr	r2, [pc, #28]	; (698 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     67e:	69f1      	ldr	r1, [r6, #28]
     680:	4291      	cmp	r1, r2
     682:	dd00      	ble.n	686 <adc_init+0x3da>
     684:	e625      	b.n	2d2 <adc_init+0x26>
     686:	6a31      	ldr	r1, [r6, #32]
     688:	4291      	cmp	r1, r2
     68a:	dd00      	ble.n	68e <adc_init+0x3e2>
     68c:	e621      	b.n	2d2 <adc_init+0x26>
     68e:	e728      	b.n	4e2 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e61e      	b.n	2d2 <adc_init+0x26>
     694:	000003ff 	.word	0x000003ff
     698:	0000ffff 	.word	0x0000ffff

0000069c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     69c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     69e:	2a00      	cmp	r2, #0
     6a0:	d001      	beq.n	6a6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6a2:	0018      	movs	r0, r3
     6a4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     6a6:	008b      	lsls	r3, r1, #2
     6a8:	4a06      	ldr	r2, [pc, #24]	; (6c4 <extint_register_callback+0x28>)
     6aa:	589b      	ldr	r3, [r3, r2]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d003      	beq.n	6b8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     6b0:	4283      	cmp	r3, r0
     6b2:	d005      	beq.n	6c0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     6b4:	231d      	movs	r3, #29
     6b6:	e7f4      	b.n	6a2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     6b8:	0089      	lsls	r1, r1, #2
     6ba:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     6bc:	2300      	movs	r3, #0
     6be:	e7f0      	b.n	6a2 <extint_register_callback+0x6>
		return STATUS_OK;
     6c0:	2300      	movs	r3, #0
     6c2:	e7ee      	b.n	6a2 <extint_register_callback+0x6>
     6c4:	200002d0 	.word	0x200002d0

000006c8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6c8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     6ca:	2900      	cmp	r1, #0
     6cc:	d001      	beq.n	6d2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     6ce:	0018      	movs	r0, r3
     6d0:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     6d2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     6d4:	281f      	cmp	r0, #31
     6d6:	d800      	bhi.n	6da <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     6d8:	4a02      	ldr	r2, [pc, #8]	; (6e4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     6da:	2301      	movs	r3, #1
     6dc:	4083      	lsls	r3, r0
     6de:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     6e0:	2300      	movs	r3, #0
     6e2:	e7f4      	b.n	6ce <extint_chan_enable_callback+0x6>
     6e4:	40001800 	.word	0x40001800

000006e8 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6e8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     6ea:	2900      	cmp	r1, #0
     6ec:	d001      	beq.n	6f2 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     6ee:	0018      	movs	r0, r3
     6f0:	4770      	bx	lr
		return NULL;
     6f2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     6f4:	281f      	cmp	r0, #31
     6f6:	d800      	bhi.n	6fa <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     6f8:	4a02      	ldr	r2, [pc, #8]	; (704 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     6fa:	2301      	movs	r3, #1
     6fc:	4083      	lsls	r3, r0
     6fe:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     700:	2300      	movs	r3, #0
     702:	e7f4      	b.n	6ee <extint_chan_disable_callback+0x6>
     704:	40001800 	.word	0x40001800

00000708 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     708:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     70a:	2200      	movs	r2, #0
     70c:	4b10      	ldr	r3, [pc, #64]	; (750 <EIC_Handler+0x48>)
     70e:	701a      	strb	r2, [r3, #0]
     710:	2300      	movs	r3, #0
     712:	4910      	ldr	r1, [pc, #64]	; (754 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     714:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     716:	4e10      	ldr	r6, [pc, #64]	; (758 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     718:	4c0d      	ldr	r4, [pc, #52]	; (750 <EIC_Handler+0x48>)
     71a:	e00a      	b.n	732 <EIC_Handler+0x2a>
		return eics[eic_index];
     71c:	490d      	ldr	r1, [pc, #52]	; (754 <EIC_Handler+0x4c>)
     71e:	e008      	b.n	732 <EIC_Handler+0x2a>
     720:	7823      	ldrb	r3, [r4, #0]
     722:	3301      	adds	r3, #1
     724:	b2db      	uxtb	r3, r3
     726:	7023      	strb	r3, [r4, #0]
     728:	2b0f      	cmp	r3, #15
     72a:	d810      	bhi.n	74e <EIC_Handler+0x46>
		return NULL;
     72c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     72e:	2b1f      	cmp	r3, #31
     730:	d9f4      	bls.n	71c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     732:	0028      	movs	r0, r5
     734:	4018      	ands	r0, r3
     736:	2201      	movs	r2, #1
     738:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     73a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     73c:	4210      	tst	r0, r2
     73e:	d0ef      	beq.n	720 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     740:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     742:	009b      	lsls	r3, r3, #2
     744:	599b      	ldr	r3, [r3, r6]
     746:	2b00      	cmp	r3, #0
     748:	d0ea      	beq.n	720 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     74a:	4798      	blx	r3
     74c:	e7e8      	b.n	720 <EIC_Handler+0x18>
			}
		}
	}
}
     74e:	bd70      	pop	{r4, r5, r6, pc}
     750:	200002cc 	.word	0x200002cc
     754:	40001800 	.word	0x40001800
     758:	200002d0 	.word	0x200002d0

0000075c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     75c:	4a04      	ldr	r2, [pc, #16]	; (770 <_extint_enable+0x14>)
     75e:	7813      	ldrb	r3, [r2, #0]
     760:	2102      	movs	r1, #2
     762:	430b      	orrs	r3, r1
     764:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     766:	7853      	ldrb	r3, [r2, #1]
     768:	b25b      	sxtb	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	dbfb      	blt.n	766 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     76e:	4770      	bx	lr
     770:	40001800 	.word	0x40001800

00000774 <_system_extint_init>:
{
     774:	b500      	push	{lr}
     776:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     778:	4a12      	ldr	r2, [pc, #72]	; (7c4 <_system_extint_init+0x50>)
     77a:	6993      	ldr	r3, [r2, #24]
     77c:	2140      	movs	r1, #64	; 0x40
     77e:	430b      	orrs	r3, r1
     780:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     782:	a901      	add	r1, sp, #4
     784:	2300      	movs	r3, #0
     786:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     788:	2005      	movs	r0, #5
     78a:	4b0f      	ldr	r3, [pc, #60]	; (7c8 <_system_extint_init+0x54>)
     78c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     78e:	2005      	movs	r0, #5
     790:	4b0e      	ldr	r3, [pc, #56]	; (7cc <_system_extint_init+0x58>)
     792:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     794:	4a0e      	ldr	r2, [pc, #56]	; (7d0 <_system_extint_init+0x5c>)
     796:	7813      	ldrb	r3, [r2, #0]
     798:	2101      	movs	r1, #1
     79a:	430b      	orrs	r3, r1
     79c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     79e:	7853      	ldrb	r3, [r2, #1]
     7a0:	b25b      	sxtb	r3, r3
     7a2:	2b00      	cmp	r3, #0
     7a4:	dbfb      	blt.n	79e <_system_extint_init+0x2a>
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <_system_extint_init+0x60>)
     7a8:	0019      	movs	r1, r3
     7aa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     7ac:	2200      	movs	r2, #0
     7ae:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     7b0:	4299      	cmp	r1, r3
     7b2:	d1fc      	bne.n	7ae <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7b4:	2210      	movs	r2, #16
     7b6:	4b08      	ldr	r3, [pc, #32]	; (7d8 <_system_extint_init+0x64>)
     7b8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     7ba:	4b08      	ldr	r3, [pc, #32]	; (7dc <_system_extint_init+0x68>)
     7bc:	4798      	blx	r3
}
     7be:	b003      	add	sp, #12
     7c0:	bd00      	pop	{pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	40000400 	.word	0x40000400
     7c8:	000017a9 	.word	0x000017a9
     7cc:	0000171d 	.word	0x0000171d
     7d0:	40001800 	.word	0x40001800
     7d4:	200002d0 	.word	0x200002d0
     7d8:	e000e100 	.word	0xe000e100
     7dc:	0000075d 	.word	0x0000075d

000007e0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     7e0:	2300      	movs	r3, #0
     7e2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     7e4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     7e6:	2201      	movs	r2, #1
     7e8:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     7ea:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     7ec:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     7ee:	3302      	adds	r3, #2
     7f0:	72c3      	strb	r3, [r0, #11]
}
     7f2:	4770      	bx	lr

000007f4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f6:	b083      	sub	sp, #12
     7f8:	0005      	movs	r5, r0
     7fa:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7fc:	a901      	add	r1, sp, #4
     7fe:	2300      	movs	r3, #0
     800:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     802:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     804:	7923      	ldrb	r3, [r4, #4]
     806:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     808:	7a23      	ldrb	r3, [r4, #8]
     80a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     80c:	7820      	ldrb	r0, [r4, #0]
     80e:	4b15      	ldr	r3, [pc, #84]	; (864 <extint_chan_set_config+0x70>)
     810:	4798      	blx	r3
		return NULL;
     812:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     814:	2d1f      	cmp	r5, #31
     816:	d800      	bhi.n	81a <extint_chan_set_config+0x26>
		return eics[eic_index];
     818:	4813      	ldr	r0, [pc, #76]	; (868 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     81a:	2207      	movs	r2, #7
     81c:	402a      	ands	r2, r5
     81e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     820:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     822:	7aa3      	ldrb	r3, [r4, #10]
     824:	2b00      	cmp	r3, #0
     826:	d001      	beq.n	82c <extint_chan_set_config+0x38>
     828:	2308      	movs	r3, #8
     82a:	431f      	orrs	r7, r3
     82c:	08eb      	lsrs	r3, r5, #3
     82e:	009b      	lsls	r3, r3, #2
     830:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     832:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     834:	260f      	movs	r6, #15
     836:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     838:	43b1      	bics	r1, r6
			(new_config << config_pos);
     83a:	4097      	lsls	r7, r2
     83c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     83e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     840:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     842:	7a63      	ldrb	r3, [r4, #9]
     844:	2b00      	cmp	r3, #0
     846:	d106      	bne.n	856 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     848:	6943      	ldr	r3, [r0, #20]
     84a:	2201      	movs	r2, #1
     84c:	40aa      	lsls	r2, r5
     84e:	4393      	bics	r3, r2
     850:	6143      	str	r3, [r0, #20]
	}
}
     852:	b003      	add	sp, #12
     854:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     856:	6942      	ldr	r2, [r0, #20]
     858:	2301      	movs	r3, #1
     85a:	40ab      	lsls	r3, r5
     85c:	4313      	orrs	r3, r2
     85e:	6143      	str	r3, [r0, #20]
     860:	e7f7      	b.n	852 <extint_chan_set_config+0x5e>
     862:	46c0      	nop			; (mov r8, r8)
     864:	000018a1 	.word	0x000018a1
     868:	40001800 	.word	0x40001800

0000086c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     86c:	b500      	push	{lr}
     86e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     870:	ab01      	add	r3, sp, #4
     872:	2280      	movs	r2, #128	; 0x80
     874:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     876:	780a      	ldrb	r2, [r1, #0]
     878:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     87a:	784a      	ldrb	r2, [r1, #1]
     87c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     87e:	788a      	ldrb	r2, [r1, #2]
     880:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     882:	0019      	movs	r1, r3
     884:	4b01      	ldr	r3, [pc, #4]	; (88c <port_pin_set_config+0x20>)
     886:	4798      	blx	r3
}
     888:	b003      	add	sp, #12
     88a:	bd00      	pop	{pc}
     88c:	000018a1 	.word	0x000018a1

00000890 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     890:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     892:	7a98      	ldrb	r0, [r3, #10]
     894:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     896:	4770      	bx	lr

00000898 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     898:	b570      	push	{r4, r5, r6, lr}
     89a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     89c:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     89e:	2208      	movs	r2, #8
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <rtc_count_enable+0x20>)
     8a2:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     8a4:	4d05      	ldr	r5, [pc, #20]	; (8bc <rtc_count_enable+0x24>)
     8a6:	0020      	movs	r0, r4
     8a8:	47a8      	blx	r5
     8aa:	2800      	cmp	r0, #0
     8ac:	d1fb      	bne.n	8a6 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     8ae:	8833      	ldrh	r3, [r6, #0]
     8b0:	2202      	movs	r2, #2
     8b2:	4313      	orrs	r3, r2
     8b4:	8033      	strh	r3, [r6, #0]
}
     8b6:	bd70      	pop	{r4, r5, r6, pc}
     8b8:	e000e100 	.word	0xe000e100
     8bc:	00000891 	.word	0x00000891

000008c0 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     8c0:	b570      	push	{r4, r5, r6, lr}
     8c2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8c4:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8c6:	2108      	movs	r1, #8
     8c8:	2380      	movs	r3, #128	; 0x80
     8ca:	4a07      	ldr	r2, [pc, #28]	; (8e8 <rtc_count_disable+0x28>)
     8cc:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     8ce:	4d07      	ldr	r5, [pc, #28]	; (8ec <rtc_count_disable+0x2c>)
     8d0:	0020      	movs	r0, r4
     8d2:	47a8      	blx	r5
     8d4:	2800      	cmp	r0, #0
     8d6:	d1fb      	bne.n	8d0 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     8d8:	23c1      	movs	r3, #193	; 0xc1
     8da:	71b3      	strb	r3, [r6, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     8dc:	7233      	strb	r3, [r6, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     8de:	8833      	ldrh	r3, [r6, #0]
     8e0:	2202      	movs	r2, #2
     8e2:	4393      	bics	r3, r2
     8e4:	8033      	strh	r3, [r6, #0]
}
     8e6:	bd70      	pop	{r4, r5, r6, pc}
     8e8:	e000e100 	.word	0xe000e100
     8ec:	00000891 	.word	0x00000891

000008f0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     8f0:	b570      	push	{r4, r5, r6, lr}
     8f2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8f4:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     8f6:	4b07      	ldr	r3, [pc, #28]	; (914 <rtc_count_reset+0x24>)
     8f8:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     8fa:	2300      	movs	r3, #0
     8fc:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     8fe:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     900:	4d05      	ldr	r5, [pc, #20]	; (918 <rtc_count_reset+0x28>)
     902:	0020      	movs	r0, r4
     904:	47a8      	blx	r5
     906:	2800      	cmp	r0, #0
     908:	d1fb      	bne.n	902 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     90a:	8833      	ldrh	r3, [r6, #0]
     90c:	2201      	movs	r2, #1
     90e:	4313      	orrs	r3, r2
     910:	8033      	strh	r3, [r6, #0]
}
     912:	bd70      	pop	{r4, r5, r6, pc}
     914:	000008c1 	.word	0x000008c1
     918:	00000891 	.word	0x00000891

0000091c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
     91e:	b083      	sub	sp, #12
     920:	0004      	movs	r4, r0
     922:	9101      	str	r1, [sp, #4]
     924:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     926:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     928:	4f11      	ldr	r7, [pc, #68]	; (970 <rtc_count_set_compare+0x54>)
     92a:	0020      	movs	r0, r4
     92c:	47b8      	blx	r7
     92e:	2800      	cmp	r0, #0
     930:	d1fb      	bne.n	92a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     932:	7923      	ldrb	r3, [r4, #4]
     934:	2b00      	cmp	r3, #0
     936:	d00a      	beq.n	94e <rtc_count_set_compare+0x32>
     938:	2b01      	cmp	r3, #1
     93a:	d116      	bne.n	96a <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     93c:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     93e:	2d01      	cmp	r5, #1
     940:	d814      	bhi.n	96c <rtc_count_set_compare+0x50>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     942:	3506      	adds	r5, #6
     944:	00ad      	lsls	r5, r5, #2
     946:	9b01      	ldr	r3, [sp, #4]
     948:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     94a:	2000      	movs	r0, #0
			break;
     94c:	e00e      	b.n	96c <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
     94e:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     950:	2d02      	cmp	r5, #2
     952:	d80b      	bhi.n	96c <rtc_count_set_compare+0x50>
			if (comp_value > 0xffff) {
     954:	4b07      	ldr	r3, [pc, #28]	; (974 <rtc_count_set_compare+0x58>)
     956:	9a01      	ldr	r2, [sp, #4]
     958:	429a      	cmp	r2, r3
     95a:	d807      	bhi.n	96c <rtc_count_set_compare+0x50>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     95c:	466b      	mov	r3, sp
     95e:	889b      	ldrh	r3, [r3, #4]
     960:	350c      	adds	r5, #12
     962:	006d      	lsls	r5, r5, #1
     964:	53ab      	strh	r3, [r5, r6]
	return STATUS_OK;
     966:	2000      	movs	r0, #0
			break;
     968:	e000      	b.n	96c <rtc_count_set_compare+0x50>
			return STATUS_ERR_BAD_FORMAT;
     96a:	201a      	movs	r0, #26
}
     96c:	b003      	add	sp, #12
     96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     970:	00000891 	.word	0x00000891
     974:	0000ffff 	.word	0x0000ffff

00000978 <rtc_count_init>:
{
     978:	b5f0      	push	{r4, r5, r6, r7, lr}
     97a:	b083      	sub	sp, #12
     97c:	0004      	movs	r4, r0
     97e:	0016      	movs	r6, r2
	module->hw = hw;
     980:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     982:	4a2e      	ldr	r2, [pc, #184]	; (a3c <rtc_count_init+0xc4>)
     984:	6993      	ldr	r3, [r2, #24]
     986:	2120      	movs	r1, #32
     988:	430b      	orrs	r3, r1
     98a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     98c:	a901      	add	r1, sp, #4
     98e:	2302      	movs	r3, #2
     990:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     992:	2004      	movs	r0, #4
     994:	4b2a      	ldr	r3, [pc, #168]	; (a40 <rtc_count_init+0xc8>)
     996:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     998:	2004      	movs	r0, #4
     99a:	4b2a      	ldr	r3, [pc, #168]	; (a44 <rtc_count_init+0xcc>)
     99c:	4798      	blx	r3
	rtc_count_reset(module);
     99e:	0020      	movs	r0, r4
     9a0:	4b29      	ldr	r3, [pc, #164]	; (a48 <rtc_count_init+0xd0>)
     9a2:	4798      	blx	r3
	module->mode                = config->mode;
     9a4:	78b3      	ldrb	r3, [r6, #2]
     9a6:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     9a8:	7933      	ldrb	r3, [r6, #4]
     9aa:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
     9ac:	4b27      	ldr	r3, [pc, #156]	; (a4c <rtc_count_init+0xd4>)
     9ae:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     9b0:	6827      	ldr	r7, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     9b2:	8833      	ldrh	r3, [r6, #0]
     9b4:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
     9b6:	78b3      	ldrb	r3, [r6, #2]
     9b8:	2b00      	cmp	r3, #0
     9ba:	d021      	beq.n	a00 <rtc_count_init+0x88>
			return STATUS_ERR_INVALID_ARG;
     9bc:	2017      	movs	r0, #23
	switch (config->mode) {
     9be:	2b01      	cmp	r3, #1
     9c0:	d11c      	bne.n	9fc <rtc_count_init+0x84>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     9c2:	883b      	ldrh	r3, [r7, #0]
     9c4:	b29b      	uxth	r3, r3
     9c6:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     9c8:	78f3      	ldrb	r3, [r6, #3]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d003      	beq.n	9d6 <rtc_count_init+0x5e>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     9ce:	883b      	ldrh	r3, [r7, #0]
     9d0:	2280      	movs	r2, #128	; 0x80
     9d2:	4313      	orrs	r3, r2
     9d4:	803b      	strh	r3, [r7, #0]
				while (rtc_count_is_syncing(module)) {
     9d6:	4d1e      	ldr	r5, [pc, #120]	; (a50 <rtc_count_init+0xd8>)
     9d8:	0020      	movs	r0, r4
     9da:	47a8      	blx	r5
     9dc:	2800      	cmp	r0, #0
     9de:	d1fb      	bne.n	9d8 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     9e0:	2200      	movs	r2, #0
     9e2:	68b1      	ldr	r1, [r6, #8]
     9e4:	0020      	movs	r0, r4
     9e6:	4b1b      	ldr	r3, [pc, #108]	; (a54 <rtc_count_init+0xdc>)
     9e8:	4798      	blx	r3
	if (config->continuously_update) {
     9ea:	7933      	ldrb	r3, [r6, #4]
	return STATUS_OK;
     9ec:	2000      	movs	r0, #0
	if (config->continuously_update) {
     9ee:	2b00      	cmp	r3, #0
     9f0:	d004      	beq.n	9fc <rtc_count_init+0x84>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     9f2:	887b      	ldrh	r3, [r7, #2]
     9f4:	2280      	movs	r2, #128	; 0x80
     9f6:	01d2      	lsls	r2, r2, #7
     9f8:	4313      	orrs	r3, r2
     9fa:	807b      	strh	r3, [r7, #2]
}
     9fc:	b003      	add	sp, #12
     9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     a00:	883b      	ldrh	r3, [r7, #0]
     a02:	2204      	movs	r2, #4
     a04:	4313      	orrs	r3, r2
     a06:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     a08:	78f3      	ldrb	r3, [r6, #3]
				return STATUS_ERR_INVALID_ARG;
     a0a:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     a0c:	2b00      	cmp	r3, #0
     a0e:	d1f5      	bne.n	9fc <rtc_count_init+0x84>
				while (rtc_count_is_syncing(module)) {
     a10:	4d0f      	ldr	r5, [pc, #60]	; (a50 <rtc_count_init+0xd8>)
     a12:	0020      	movs	r0, r4
     a14:	47a8      	blx	r5
     a16:	2800      	cmp	r0, #0
     a18:	d1fb      	bne.n	a12 <rtc_count_init+0x9a>
				rtc_count_set_compare(module, config->compare_values[i],
     a1a:	2200      	movs	r2, #0
     a1c:	68b1      	ldr	r1, [r6, #8]
     a1e:	0020      	movs	r0, r4
     a20:	4b0c      	ldr	r3, [pc, #48]	; (a54 <rtc_count_init+0xdc>)
     a22:	4798      	blx	r3
				while (rtc_count_is_syncing(module)) {
     a24:	4d0a      	ldr	r5, [pc, #40]	; (a50 <rtc_count_init+0xd8>)
     a26:	0020      	movs	r0, r4
     a28:	47a8      	blx	r5
     a2a:	2800      	cmp	r0, #0
     a2c:	d1fb      	bne.n	a26 <rtc_count_init+0xae>
				rtc_count_set_compare(module, config->compare_values[i],
     a2e:	2201      	movs	r2, #1
     a30:	68f1      	ldr	r1, [r6, #12]
     a32:	0020      	movs	r0, r4
     a34:	4b07      	ldr	r3, [pc, #28]	; (a54 <rtc_count_init+0xdc>)
     a36:	4798      	blx	r3
     a38:	e7d7      	b.n	9ea <rtc_count_init+0x72>
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	40000400 	.word	0x40000400
     a40:	000017a9 	.word	0x000017a9
     a44:	0000171d 	.word	0x0000171d
     a48:	000008f1 	.word	0x000008f1
     a4c:	20000310 	.word	0x20000310
     a50:	00000891 	.word	0x00000891
     a54:	0000091d 	.word	0x0000091d

00000a58 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a5a:	0004      	movs	r4, r0
     a5c:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     a5e:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     a60:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     a62:	2b00      	cmp	r3, #0
     a64:	d000      	beq.n	a68 <rtc_count_set_period+0x10>

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;

	return STATUS_OK;
}
     a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     a68:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
     a6a:	4d03      	ldr	r5, [pc, #12]	; (a78 <rtc_count_set_period+0x20>)
     a6c:	0020      	movs	r0, r4
     a6e:	47a8      	blx	r5
     a70:	2800      	cmp	r0, #0
     a72:	d1fb      	bne.n	a6c <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
     a74:	82be      	strh	r6, [r7, #20]
	return STATUS_OK;
     a76:	e7f6      	b.n	a66 <rtc_count_set_period+0xe>
     a78:	00000891 	.word	0x00000891

00000a7c <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     a7c:	2a02      	cmp	r2, #2
     a7e:	d00b      	beq.n	a98 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     a80:	7903      	ldrb	r3, [r0, #4]
     a82:	2b00      	cmp	r3, #0
     a84:	d005      	beq.n	a92 <rtc_count_register_callback+0x16>
     a86:	2b01      	cmp	r3, #1
     a88:	d112      	bne.n	ab0 <rtc_count_register_callback+0x34>
     a8a:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     a8c:	2a01      	cmp	r2, #1
     a8e:	d80d      	bhi.n	aac <rtc_count_register_callback+0x30>
     a90:	e002      	b.n	a98 <rtc_count_register_callback+0x1c>
     a92:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     a94:	2a02      	cmp	r2, #2
     a96:	d809      	bhi.n	aac <rtc_count_register_callback+0x30>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     a98:	1c93      	adds	r3, r2, #2
     a9a:	009b      	lsls	r3, r3, #2
     a9c:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     a9e:	8a83      	ldrh	r3, [r0, #20]
     aa0:	2101      	movs	r1, #1
     aa2:	4091      	lsls	r1, r2
     aa4:	430b      	orrs	r3, r1
     aa6:	b29b      	uxth	r3, r3
     aa8:	8283      	strh	r3, [r0, #20]
     aaa:	2300      	movs	r3, #0
	}

	return status;
}
     aac:	0018      	movs	r0, r3
     aae:	4770      	bx	lr
			status = STATUS_ERR_INVALID_ARG;
     ab0:	2317      	movs	r3, #23
     ab2:	e7fb      	b.n	aac <rtc_count_register_callback+0x30>

00000ab4 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     ab4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ab6:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     ab8:	2902      	cmp	r1, #2
     aba:	d00b      	beq.n	ad4 <rtc_count_enable_callback+0x20>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     abc:	2201      	movs	r2, #1
     abe:	408a      	lsls	r2, r1
     ac0:	2303      	movs	r3, #3
     ac2:	4013      	ands	r3, r2
     ac4:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     ac6:	8ac3      	ldrh	r3, [r0, #22]
     ac8:	2201      	movs	r2, #1
     aca:	408a      	lsls	r2, r1
     acc:	4313      	orrs	r3, r2
     ace:	b29b      	uxth	r3, r3
     ad0:	82c3      	strh	r3, [r0, #22]
}
     ad2:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     ad4:	2380      	movs	r3, #128	; 0x80
     ad6:	71e3      	strb	r3, [r4, #7]
     ad8:	e7f5      	b.n	ac6 <rtc_count_enable_callback+0x12>
	...

00000adc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     adc:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     ade:	4b14      	ldr	r3, [pc, #80]	; (b30 <RTC_Handler+0x54>)
     ae0:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     ae2:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     ae4:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
     ae6:	8a93      	ldrh	r3, [r2, #20]
     ae8:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     aea:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     aec:	79e3      	ldrb	r3, [r4, #7]
     aee:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     af0:	b258      	sxtb	r0, r3
     af2:	2800      	cmp	r0, #0
     af4:	db06      	blt.n	b04 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     af6:	07d8      	lsls	r0, r3, #31
     af8:	d50f      	bpl.n	b1a <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     afa:	07cb      	lsls	r3, r1, #31
     afc:	d40a      	bmi.n	b14 <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     afe:	2301      	movs	r3, #1
     b00:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     b02:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     b04:	074b      	lsls	r3, r1, #29
     b06:	d402      	bmi.n	b0e <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     b08:	2380      	movs	r3, #128	; 0x80
     b0a:	7223      	strb	r3, [r4, #8]
     b0c:	e7f9      	b.n	b02 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     b0e:	6913      	ldr	r3, [r2, #16]
     b10:	4798      	blx	r3
     b12:	e7f9      	b.n	b08 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     b14:	6893      	ldr	r3, [r2, #8]
     b16:	4798      	blx	r3
     b18:	e7f1      	b.n	afe <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     b1a:	079b      	lsls	r3, r3, #30
     b1c:	d5f1      	bpl.n	b02 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     b1e:	078b      	lsls	r3, r1, #30
     b20:	d402      	bmi.n	b28 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     b22:	2302      	movs	r3, #2
     b24:	7223      	strb	r3, [r4, #8]
}
     b26:	e7ec      	b.n	b02 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     b28:	68d3      	ldr	r3, [r2, #12]
     b2a:	4798      	blx	r3
     b2c:	e7f9      	b.n	b22 <RTC_Handler+0x46>
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	20000310 	.word	0x20000310

00000b34 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b34:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b36:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b38:	2340      	movs	r3, #64	; 0x40
     b3a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     b3c:	4281      	cmp	r1, r0
     b3e:	d202      	bcs.n	b46 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     b40:	0018      	movs	r0, r3
     b42:	bd10      	pop	{r4, pc}
		baud_calculated++;
     b44:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     b46:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     b48:	1c63      	adds	r3, r4, #1
     b4a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     b4c:	4288      	cmp	r0, r1
     b4e:	d9f9      	bls.n	b44 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b50:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     b52:	2cff      	cmp	r4, #255	; 0xff
     b54:	d8f4      	bhi.n	b40 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     b56:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b58:	2300      	movs	r3, #0
     b5a:	e7f1      	b.n	b40 <_sercom_get_sync_baud_val+0xc>

00000b5c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     b5c:	b510      	push	{r4, lr}
     b5e:	b082      	sub	sp, #8
     b60:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     b62:	4b0e      	ldr	r3, [pc, #56]	; (b9c <sercom_set_gclk_generator+0x40>)
     b64:	781b      	ldrb	r3, [r3, #0]
     b66:	2b00      	cmp	r3, #0
     b68:	d007      	beq.n	b7a <sercom_set_gclk_generator+0x1e>
     b6a:	2900      	cmp	r1, #0
     b6c:	d105      	bne.n	b7a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     b6e:	4b0b      	ldr	r3, [pc, #44]	; (b9c <sercom_set_gclk_generator+0x40>)
     b70:	785b      	ldrb	r3, [r3, #1]
     b72:	4283      	cmp	r3, r0
     b74:	d010      	beq.n	b98 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b76:	201d      	movs	r0, #29
     b78:	e00c      	b.n	b94 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     b7a:	a901      	add	r1, sp, #4
     b7c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b7e:	2013      	movs	r0, #19
     b80:	4b07      	ldr	r3, [pc, #28]	; (ba0 <sercom_set_gclk_generator+0x44>)
     b82:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b84:	2013      	movs	r0, #19
     b86:	4b07      	ldr	r3, [pc, #28]	; (ba4 <sercom_set_gclk_generator+0x48>)
     b88:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     b8a:	4b04      	ldr	r3, [pc, #16]	; (b9c <sercom_set_gclk_generator+0x40>)
     b8c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     b8e:	2201      	movs	r2, #1
     b90:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     b92:	2000      	movs	r0, #0
}
     b94:	b002      	add	sp, #8
     b96:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     b98:	2000      	movs	r0, #0
     b9a:	e7fb      	b.n	b94 <sercom_set_gclk_generator+0x38>
     b9c:	200000e4 	.word	0x200000e4
     ba0:	000017a9 	.word	0x000017a9
     ba4:	0000171d 	.word	0x0000171d

00000ba8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     ba8:	4b40      	ldr	r3, [pc, #256]	; (cac <_sercom_get_default_pad+0x104>)
     baa:	4298      	cmp	r0, r3
     bac:	d031      	beq.n	c12 <_sercom_get_default_pad+0x6a>
     bae:	d90a      	bls.n	bc6 <_sercom_get_default_pad+0x1e>
     bb0:	4b3f      	ldr	r3, [pc, #252]	; (cb0 <_sercom_get_default_pad+0x108>)
     bb2:	4298      	cmp	r0, r3
     bb4:	d04d      	beq.n	c52 <_sercom_get_default_pad+0xaa>
     bb6:	4b3f      	ldr	r3, [pc, #252]	; (cb4 <_sercom_get_default_pad+0x10c>)
     bb8:	4298      	cmp	r0, r3
     bba:	d05a      	beq.n	c72 <_sercom_get_default_pad+0xca>
     bbc:	4b3e      	ldr	r3, [pc, #248]	; (cb8 <_sercom_get_default_pad+0x110>)
     bbe:	4298      	cmp	r0, r3
     bc0:	d037      	beq.n	c32 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     bc2:	2000      	movs	r0, #0
}
     bc4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     bc6:	4b3d      	ldr	r3, [pc, #244]	; (cbc <_sercom_get_default_pad+0x114>)
     bc8:	4298      	cmp	r0, r3
     bca:	d00c      	beq.n	be6 <_sercom_get_default_pad+0x3e>
     bcc:	4b3c      	ldr	r3, [pc, #240]	; (cc0 <_sercom_get_default_pad+0x118>)
     bce:	4298      	cmp	r0, r3
     bd0:	d1f7      	bne.n	bc2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bd2:	2901      	cmp	r1, #1
     bd4:	d017      	beq.n	c06 <_sercom_get_default_pad+0x5e>
     bd6:	2900      	cmp	r1, #0
     bd8:	d05d      	beq.n	c96 <_sercom_get_default_pad+0xee>
     bda:	2902      	cmp	r1, #2
     bdc:	d015      	beq.n	c0a <_sercom_get_default_pad+0x62>
     bde:	2903      	cmp	r1, #3
     be0:	d015      	beq.n	c0e <_sercom_get_default_pad+0x66>
	return 0;
     be2:	2000      	movs	r0, #0
     be4:	e7ee      	b.n	bc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     be6:	2901      	cmp	r1, #1
     be8:	d007      	beq.n	bfa <_sercom_get_default_pad+0x52>
     bea:	2900      	cmp	r1, #0
     bec:	d051      	beq.n	c92 <_sercom_get_default_pad+0xea>
     bee:	2902      	cmp	r1, #2
     bf0:	d005      	beq.n	bfe <_sercom_get_default_pad+0x56>
     bf2:	2903      	cmp	r1, #3
     bf4:	d005      	beq.n	c02 <_sercom_get_default_pad+0x5a>
	return 0;
     bf6:	2000      	movs	r0, #0
     bf8:	e7e4      	b.n	bc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bfa:	4832      	ldr	r0, [pc, #200]	; (cc4 <_sercom_get_default_pad+0x11c>)
     bfc:	e7e2      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     bfe:	4832      	ldr	r0, [pc, #200]	; (cc8 <_sercom_get_default_pad+0x120>)
     c00:	e7e0      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c02:	4832      	ldr	r0, [pc, #200]	; (ccc <_sercom_get_default_pad+0x124>)
     c04:	e7de      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c06:	4832      	ldr	r0, [pc, #200]	; (cd0 <_sercom_get_default_pad+0x128>)
     c08:	e7dc      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c0a:	4832      	ldr	r0, [pc, #200]	; (cd4 <_sercom_get_default_pad+0x12c>)
     c0c:	e7da      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c0e:	4832      	ldr	r0, [pc, #200]	; (cd8 <_sercom_get_default_pad+0x130>)
     c10:	e7d8      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c12:	2901      	cmp	r1, #1
     c14:	d007      	beq.n	c26 <_sercom_get_default_pad+0x7e>
     c16:	2900      	cmp	r1, #0
     c18:	d03f      	beq.n	c9a <_sercom_get_default_pad+0xf2>
     c1a:	2902      	cmp	r1, #2
     c1c:	d005      	beq.n	c2a <_sercom_get_default_pad+0x82>
     c1e:	2903      	cmp	r1, #3
     c20:	d005      	beq.n	c2e <_sercom_get_default_pad+0x86>
	return 0;
     c22:	2000      	movs	r0, #0
     c24:	e7ce      	b.n	bc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c26:	482d      	ldr	r0, [pc, #180]	; (cdc <_sercom_get_default_pad+0x134>)
     c28:	e7cc      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c2a:	482d      	ldr	r0, [pc, #180]	; (ce0 <_sercom_get_default_pad+0x138>)
     c2c:	e7ca      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c2e:	482d      	ldr	r0, [pc, #180]	; (ce4 <_sercom_get_default_pad+0x13c>)
     c30:	e7c8      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c32:	2901      	cmp	r1, #1
     c34:	d007      	beq.n	c46 <_sercom_get_default_pad+0x9e>
     c36:	2900      	cmp	r1, #0
     c38:	d031      	beq.n	c9e <_sercom_get_default_pad+0xf6>
     c3a:	2902      	cmp	r1, #2
     c3c:	d005      	beq.n	c4a <_sercom_get_default_pad+0xa2>
     c3e:	2903      	cmp	r1, #3
     c40:	d005      	beq.n	c4e <_sercom_get_default_pad+0xa6>
	return 0;
     c42:	2000      	movs	r0, #0
     c44:	e7be      	b.n	bc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c46:	4828      	ldr	r0, [pc, #160]	; (ce8 <_sercom_get_default_pad+0x140>)
     c48:	e7bc      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c4a:	4828      	ldr	r0, [pc, #160]	; (cec <_sercom_get_default_pad+0x144>)
     c4c:	e7ba      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c4e:	4828      	ldr	r0, [pc, #160]	; (cf0 <_sercom_get_default_pad+0x148>)
     c50:	e7b8      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c52:	2901      	cmp	r1, #1
     c54:	d007      	beq.n	c66 <_sercom_get_default_pad+0xbe>
     c56:	2900      	cmp	r1, #0
     c58:	d023      	beq.n	ca2 <_sercom_get_default_pad+0xfa>
     c5a:	2902      	cmp	r1, #2
     c5c:	d005      	beq.n	c6a <_sercom_get_default_pad+0xc2>
     c5e:	2903      	cmp	r1, #3
     c60:	d005      	beq.n	c6e <_sercom_get_default_pad+0xc6>
	return 0;
     c62:	2000      	movs	r0, #0
     c64:	e7ae      	b.n	bc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c66:	4823      	ldr	r0, [pc, #140]	; (cf4 <_sercom_get_default_pad+0x14c>)
     c68:	e7ac      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c6a:	4823      	ldr	r0, [pc, #140]	; (cf8 <_sercom_get_default_pad+0x150>)
     c6c:	e7aa      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c6e:	4823      	ldr	r0, [pc, #140]	; (cfc <_sercom_get_default_pad+0x154>)
     c70:	e7a8      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c72:	2901      	cmp	r1, #1
     c74:	d007      	beq.n	c86 <_sercom_get_default_pad+0xde>
     c76:	2900      	cmp	r1, #0
     c78:	d015      	beq.n	ca6 <_sercom_get_default_pad+0xfe>
     c7a:	2902      	cmp	r1, #2
     c7c:	d005      	beq.n	c8a <_sercom_get_default_pad+0xe2>
     c7e:	2903      	cmp	r1, #3
     c80:	d005      	beq.n	c8e <_sercom_get_default_pad+0xe6>
	return 0;
     c82:	2000      	movs	r0, #0
     c84:	e79e      	b.n	bc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c86:	481e      	ldr	r0, [pc, #120]	; (d00 <_sercom_get_default_pad+0x158>)
     c88:	e79c      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c8a:	481e      	ldr	r0, [pc, #120]	; (d04 <_sercom_get_default_pad+0x15c>)
     c8c:	e79a      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c8e:	481e      	ldr	r0, [pc, #120]	; (d08 <_sercom_get_default_pad+0x160>)
     c90:	e798      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c92:	481e      	ldr	r0, [pc, #120]	; (d0c <_sercom_get_default_pad+0x164>)
     c94:	e796      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c96:	481e      	ldr	r0, [pc, #120]	; (d10 <_sercom_get_default_pad+0x168>)
     c98:	e794      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c9a:	481e      	ldr	r0, [pc, #120]	; (d14 <_sercom_get_default_pad+0x16c>)
     c9c:	e792      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     c9e:	481e      	ldr	r0, [pc, #120]	; (d18 <_sercom_get_default_pad+0x170>)
     ca0:	e790      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     ca2:	481e      	ldr	r0, [pc, #120]	; (d1c <_sercom_get_default_pad+0x174>)
     ca4:	e78e      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     ca6:	481e      	ldr	r0, [pc, #120]	; (d20 <_sercom_get_default_pad+0x178>)
     ca8:	e78c      	b.n	bc4 <_sercom_get_default_pad+0x1c>
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	42001000 	.word	0x42001000
     cb0:	42001800 	.word	0x42001800
     cb4:	42001c00 	.word	0x42001c00
     cb8:	42001400 	.word	0x42001400
     cbc:	42000800 	.word	0x42000800
     cc0:	42000c00 	.word	0x42000c00
     cc4:	00090002 	.word	0x00090002
     cc8:	00060003 	.word	0x00060003
     ccc:	00070003 	.word	0x00070003
     cd0:	00110002 	.word	0x00110002
     cd4:	00120002 	.word	0x00120002
     cd8:	00130002 	.word	0x00130002
     cdc:	00090003 	.word	0x00090003
     ce0:	000e0002 	.word	0x000e0002
     ce4:	000f0002 	.word	0x000f0002
     ce8:	001c0005 	.word	0x001c0005
     cec:	00180002 	.word	0x00180002
     cf0:	00190002 	.word	0x00190002
     cf4:	003f0005 	.word	0x003f0005
     cf8:	003e0005 	.word	0x003e0005
     cfc:	00520005 	.word	0x00520005
     d00:	003f0003 	.word	0x003f0003
     d04:	00180003 	.word	0x00180003
     d08:	00190003 	.word	0x00190003
     d0c:	00080002 	.word	0x00080002
     d10:	00100002 	.word	0x00100002
     d14:	00080003 	.word	0x00080003
     d18:	001b0005 	.word	0x001b0005
     d1c:	00530005 	.word	0x00530005
     d20:	003e0003 	.word	0x003e0003

00000d24 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d24:	b530      	push	{r4, r5, lr}
     d26:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d28:	4b0b      	ldr	r3, [pc, #44]	; (d58 <_sercom_get_sercom_inst_index+0x34>)
     d2a:	466a      	mov	r2, sp
     d2c:	cb32      	ldmia	r3!, {r1, r4, r5}
     d2e:	c232      	stmia	r2!, {r1, r4, r5}
     d30:	cb32      	ldmia	r3!, {r1, r4, r5}
     d32:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d34:	9b00      	ldr	r3, [sp, #0]
     d36:	4283      	cmp	r3, r0
     d38:	d00b      	beq.n	d52 <_sercom_get_sercom_inst_index+0x2e>
     d3a:	2301      	movs	r3, #1
     d3c:	009a      	lsls	r2, r3, #2
     d3e:	4669      	mov	r1, sp
     d40:	5852      	ldr	r2, [r2, r1]
     d42:	4282      	cmp	r2, r0
     d44:	d006      	beq.n	d54 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d46:	3301      	adds	r3, #1
     d48:	2b06      	cmp	r3, #6
     d4a:	d1f7      	bne.n	d3c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d4c:	2000      	movs	r0, #0
}
     d4e:	b007      	add	sp, #28
     d50:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d52:	2300      	movs	r3, #0
			return i;
     d54:	b2d8      	uxtb	r0, r3
     d56:	e7fa      	b.n	d4e <_sercom_get_sercom_inst_index+0x2a>
     d58:	00007e64 	.word	0x00007e64

00000d5c <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d5c:	b510      	push	{r4, lr}
     d5e:	4b02      	ldr	r3, [pc, #8]	; (d68 <SERCOM0_Handler+0xc>)
     d60:	681b      	ldr	r3, [r3, #0]
     d62:	2000      	movs	r0, #0
     d64:	4798      	blx	r3
     d66:	bd10      	pop	{r4, pc}
     d68:	200000e8 	.word	0x200000e8

00000d6c <SERCOM1_Handler>:
     d6c:	b510      	push	{r4, lr}
     d6e:	4b02      	ldr	r3, [pc, #8]	; (d78 <SERCOM1_Handler+0xc>)
     d70:	685b      	ldr	r3, [r3, #4]
     d72:	2001      	movs	r0, #1
     d74:	4798      	blx	r3
     d76:	bd10      	pop	{r4, pc}
     d78:	200000e8 	.word	0x200000e8

00000d7c <SERCOM2_Handler>:
     d7c:	b510      	push	{r4, lr}
     d7e:	4b02      	ldr	r3, [pc, #8]	; (d88 <SERCOM2_Handler+0xc>)
     d80:	689b      	ldr	r3, [r3, #8]
     d82:	2002      	movs	r0, #2
     d84:	4798      	blx	r3
     d86:	bd10      	pop	{r4, pc}
     d88:	200000e8 	.word	0x200000e8

00000d8c <SERCOM3_Handler>:
     d8c:	b510      	push	{r4, lr}
     d8e:	4b02      	ldr	r3, [pc, #8]	; (d98 <SERCOM3_Handler+0xc>)
     d90:	68db      	ldr	r3, [r3, #12]
     d92:	2003      	movs	r0, #3
     d94:	4798      	blx	r3
     d96:	bd10      	pop	{r4, pc}
     d98:	200000e8 	.word	0x200000e8

00000d9c <SERCOM4_Handler>:
     d9c:	b510      	push	{r4, lr}
     d9e:	4b02      	ldr	r3, [pc, #8]	; (da8 <SERCOM4_Handler+0xc>)
     da0:	691b      	ldr	r3, [r3, #16]
     da2:	2004      	movs	r0, #4
     da4:	4798      	blx	r3
     da6:	bd10      	pop	{r4, pc}
     da8:	200000e8 	.word	0x200000e8

00000dac <SERCOM5_Handler>:
     dac:	b510      	push	{r4, lr}
     dae:	4b02      	ldr	r3, [pc, #8]	; (db8 <SERCOM5_Handler+0xc>)
     db0:	695b      	ldr	r3, [r3, #20]
     db2:	2005      	movs	r0, #5
     db4:	4798      	blx	r3
     db6:	bd10      	pop	{r4, pc}
     db8:	200000e8 	.word	0x200000e8

00000dbc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dbe:	46d6      	mov	lr, sl
     dc0:	464f      	mov	r7, r9
     dc2:	b580      	push	{r7, lr}
     dc4:	b08b      	sub	sp, #44	; 0x2c
     dc6:	4681      	mov	r9, r0
     dc8:	000f      	movs	r7, r1
     dca:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     dcc:	0003      	movs	r3, r0
     dce:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     dd0:	680b      	ldr	r3, [r1, #0]
     dd2:	079b      	lsls	r3, r3, #30
     dd4:	d409      	bmi.n	dea <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     dd6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     dd8:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     dda:	07db      	lsls	r3, r3, #31
     ddc:	d400      	bmi.n	de0 <spi_init+0x24>
     dde:	e098      	b.n	f12 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     de0:	b00b      	add	sp, #44	; 0x2c
     de2:	bc0c      	pop	{r2, r3}
     de4:	4691      	mov	r9, r2
     de6:	469a      	mov	sl, r3
     de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     dea:	6a93      	ldr	r3, [r2, #40]	; 0x28
     dec:	9305      	str	r3, [sp, #20]
     dee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     df0:	9306      	str	r3, [sp, #24]
     df2:	6b13      	ldr	r3, [r2, #48]	; 0x30
     df4:	9307      	str	r3, [sp, #28]
     df6:	6b53      	ldr	r3, [r2, #52]	; 0x34
     df8:	9308      	str	r3, [sp, #32]
     dfa:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     dfc:	ab05      	add	r3, sp, #20
     dfe:	9301      	str	r3, [sp, #4]
     e00:	e00a      	b.n	e18 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e02:	0038      	movs	r0, r7
     e04:	4b93      	ldr	r3, [pc, #588]	; (1054 <spi_init+0x298>)
     e06:	4798      	blx	r3
     e08:	e00c      	b.n	e24 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     e0a:	230f      	movs	r3, #15
     e0c:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     e0e:	4281      	cmp	r1, r0
     e10:	d12d      	bne.n	e6e <spi_init+0xb2>
     e12:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     e14:	2e04      	cmp	r6, #4
     e16:	d02f      	beq.n	e78 <spi_init+0xbc>
     e18:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e1a:	00b3      	lsls	r3, r6, #2
     e1c:	9a01      	ldr	r2, [sp, #4]
     e1e:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     e20:	2800      	cmp	r0, #0
     e22:	d0ee      	beq.n	e02 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     e24:	1c43      	adds	r3, r0, #1
     e26:	d0f4      	beq.n	e12 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     e28:	0401      	lsls	r1, r0, #16
     e2a:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     e2c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     e2e:	b2c3      	uxtb	r3, r0
     e30:	469c      	mov	ip, r3
		return NULL;
     e32:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e34:	0602      	lsls	r2, r0, #24
     e36:	d405      	bmi.n	e44 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     e38:	4663      	mov	r3, ip
     e3a:	095b      	lsrs	r3, r3, #5
     e3c:	01db      	lsls	r3, r3, #7
     e3e:	4a86      	ldr	r2, [pc, #536]	; (1058 <spi_init+0x29c>)
     e40:	4692      	mov	sl, r2
     e42:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     e44:	221f      	movs	r2, #31
     e46:	4660      	mov	r0, ip
     e48:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     e4a:	1898      	adds	r0, r3, r2
     e4c:	3040      	adds	r0, #64	; 0x40
     e4e:	7800      	ldrb	r0, [r0, #0]
     e50:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     e52:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     e54:	4655      	mov	r5, sl
     e56:	07ed      	lsls	r5, r5, #31
     e58:	d5d9      	bpl.n	e0e <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     e5a:	0852      	lsrs	r2, r2, #1
     e5c:	189b      	adds	r3, r3, r2
     e5e:	3330      	adds	r3, #48	; 0x30
     e60:	7818      	ldrb	r0, [r3, #0]
     e62:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     e64:	4663      	mov	r3, ip
     e66:	07db      	lsls	r3, r3, #31
     e68:	d5cf      	bpl.n	e0a <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     e6a:	0900      	lsrs	r0, r0, #4
     e6c:	e7cf      	b.n	e0e <spi_init+0x52>
			module->hw = NULL;
     e6e:	2300      	movs	r3, #0
     e70:	464a      	mov	r2, r9
     e72:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     e74:	201c      	movs	r0, #28
     e76:	e7b3      	b.n	de0 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     e78:	2013      	movs	r0, #19
     e7a:	4b78      	ldr	r3, [pc, #480]	; (105c <spi_init+0x2a0>)
     e7c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     e7e:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     e80:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     e82:	2a01      	cmp	r2, #1
     e84:	d027      	beq.n	ed6 <spi_init+0x11a>
	ctrla |= config->mux_setting;
     e86:	6863      	ldr	r3, [r4, #4]
     e88:	68a2      	ldr	r2, [r4, #8]
     e8a:	4313      	orrs	r3, r2
     e8c:	68e2      	ldr	r2, [r4, #12]
     e8e:	4313      	orrs	r3, r2
     e90:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     e92:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
     e94:	7c61      	ldrb	r1, [r4, #17]
     e96:	2900      	cmp	r1, #0
     e98:	d001      	beq.n	e9e <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     e9a:	2180      	movs	r1, #128	; 0x80
     e9c:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     e9e:	7ca1      	ldrb	r1, [r4, #18]
     ea0:	2900      	cmp	r1, #0
     ea2:	d002      	beq.n	eaa <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ea4:	2180      	movs	r1, #128	; 0x80
     ea6:	0289      	lsls	r1, r1, #10
     ea8:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     eaa:	7ce1      	ldrb	r1, [r4, #19]
     eac:	2900      	cmp	r1, #0
     eae:	d002      	beq.n	eb6 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     eb0:	2180      	movs	r1, #128	; 0x80
     eb2:	0089      	lsls	r1, r1, #2
     eb4:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     eb6:	7d21      	ldrb	r1, [r4, #20]
     eb8:	2900      	cmp	r1, #0
     eba:	d002      	beq.n	ec2 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ebc:	2180      	movs	r1, #128	; 0x80
     ebe:	0189      	lsls	r1, r1, #6
     ec0:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
     ec2:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     ec4:	2002      	movs	r0, #2
     ec6:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
     ec8:	428b      	cmp	r3, r1
     eca:	d018      	beq.n	efe <spi_init+0x142>
	module->hw = NULL;
     ecc:	2300      	movs	r3, #0
     ece:	464a      	mov	r2, r9
     ed0:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     ed2:	201c      	movs	r0, #28
     ed4:	e784      	b.n	de0 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
     ed6:	aa04      	add	r2, sp, #16
     ed8:	0001      	movs	r1, r0
     eda:	69a0      	ldr	r0, [r4, #24]
     edc:	4b60      	ldr	r3, [pc, #384]	; (1060 <spi_init+0x2a4>)
     ede:	4798      	blx	r3
     ee0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     ee2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     ee4:	2b00      	cmp	r3, #0
     ee6:	d000      	beq.n	eea <spi_init+0x12e>
     ee8:	e77a      	b.n	de0 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     eea:	7b3b      	ldrb	r3, [r7, #12]
     eec:	b2db      	uxtb	r3, r3
     eee:	aa04      	add	r2, sp, #16
     ef0:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     ef2:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     ef4:	429a      	cmp	r2, r3
     ef6:	d000      	beq.n	efa <spi_init+0x13e>
     ef8:	e772      	b.n	de0 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     efa:	350c      	adds	r5, #12
     efc:	e7c3      	b.n	e86 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
     efe:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     f00:	4293      	cmp	r3, r2
     f02:	d1e3      	bne.n	ecc <spi_init+0x110>
		module->mode           = config->mode;
     f04:	7823      	ldrb	r3, [r4, #0]
     f06:	464a      	mov	r2, r9
     f08:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
     f0a:	7c23      	ldrb	r3, [r4, #16]
     f0c:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     f0e:	2000      	movs	r0, #0
     f10:	e766      	b.n	de0 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f12:	0008      	movs	r0, r1
     f14:	4b53      	ldr	r3, [pc, #332]	; (1064 <spi_init+0x2a8>)
     f16:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     f18:	4a53      	ldr	r2, [pc, #332]	; (1068 <spi_init+0x2ac>)
     f1a:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f1c:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f1e:	2301      	movs	r3, #1
     f20:	40ab      	lsls	r3, r5
     f22:	430b      	orrs	r3, r1
     f24:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     f26:	a909      	add	r1, sp, #36	; 0x24
     f28:	2624      	movs	r6, #36	; 0x24
     f2a:	5da3      	ldrb	r3, [r4, r6]
     f2c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f2e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f30:	b2c5      	uxtb	r5, r0
     f32:	0028      	movs	r0, r5
     f34:	4b4d      	ldr	r3, [pc, #308]	; (106c <spi_init+0x2b0>)
     f36:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f38:	0028      	movs	r0, r5
     f3a:	4b4d      	ldr	r3, [pc, #308]	; (1070 <spi_init+0x2b4>)
     f3c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f3e:	5da0      	ldrb	r0, [r4, r6]
     f40:	2100      	movs	r1, #0
     f42:	4b4c      	ldr	r3, [pc, #304]	; (1074 <spi_init+0x2b8>)
     f44:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     f46:	7823      	ldrb	r3, [r4, #0]
     f48:	2b01      	cmp	r3, #1
     f4a:	d019      	beq.n	f80 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f4c:	464b      	mov	r3, r9
     f4e:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f50:	ab04      	add	r3, sp, #16
     f52:	2280      	movs	r2, #128	; 0x80
     f54:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f56:	2200      	movs	r2, #0
     f58:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f5a:	2101      	movs	r1, #1
     f5c:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     f5e:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     f60:	7823      	ldrb	r3, [r4, #0]
     f62:	2b00      	cmp	r3, #0
     f64:	d101      	bne.n	f6a <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f66:	ab04      	add	r3, sp, #16
     f68:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f6c:	9305      	str	r3, [sp, #20]
     f6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     f70:	9306      	str	r3, [sp, #24]
     f72:	6b23      	ldr	r3, [r4, #48]	; 0x30
     f74:	9307      	str	r3, [sp, #28]
     f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
     f78:	9308      	str	r3, [sp, #32]
     f7a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f7c:	ad05      	add	r5, sp, #20
     f7e:	e011      	b.n	fa4 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     f80:	683b      	ldr	r3, [r7, #0]
     f82:	220c      	movs	r2, #12
     f84:	4313      	orrs	r3, r2
     f86:	603b      	str	r3, [r7, #0]
     f88:	e7e0      	b.n	f4c <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f8a:	0030      	movs	r0, r6
     f8c:	4b31      	ldr	r3, [pc, #196]	; (1054 <spi_init+0x298>)
     f8e:	4798      	blx	r3
     f90:	e00d      	b.n	fae <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f92:	a904      	add	r1, sp, #16
     f94:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f96:	0c00      	lsrs	r0, r0, #16
     f98:	b2c0      	uxtb	r0, r0
     f9a:	4b37      	ldr	r3, [pc, #220]	; (1078 <spi_init+0x2bc>)
     f9c:	4798      	blx	r3
     f9e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     fa0:	2f04      	cmp	r7, #4
     fa2:	d007      	beq.n	fb4 <spi_init+0x1f8>
     fa4:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fa6:	00bb      	lsls	r3, r7, #2
     fa8:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     faa:	2800      	cmp	r0, #0
     fac:	d0ed      	beq.n	f8a <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
     fae:	1c43      	adds	r3, r0, #1
     fb0:	d1ef      	bne.n	f92 <spi_init+0x1d6>
     fb2:	e7f4      	b.n	f9e <spi_init+0x1e2>
	module->mode             = config->mode;
     fb4:	7823      	ldrb	r3, [r4, #0]
     fb6:	464a      	mov	r2, r9
     fb8:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     fba:	7c23      	ldrb	r3, [r4, #16]
     fbc:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     fbe:	7ca3      	ldrb	r3, [r4, #18]
     fc0:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     fc2:	7d23      	ldrb	r3, [r4, #20]
     fc4:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     fc6:	2200      	movs	r2, #0
     fc8:	ab02      	add	r3, sp, #8
     fca:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     fcc:	7823      	ldrb	r3, [r4, #0]
     fce:	2b01      	cmp	r3, #1
     fd0:	d028      	beq.n	1024 <spi_init+0x268>
	ctrla |= config->transfer_mode;
     fd2:	6863      	ldr	r3, [r4, #4]
     fd4:	68a2      	ldr	r2, [r4, #8]
     fd6:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
     fd8:	68e2      	ldr	r2, [r4, #12]
     fda:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
     fdc:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
     fde:	7c62      	ldrb	r2, [r4, #17]
     fe0:	2a00      	cmp	r2, #0
     fe2:	d103      	bne.n	fec <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     fe4:	4a25      	ldr	r2, [pc, #148]	; (107c <spi_init+0x2c0>)
     fe6:	7892      	ldrb	r2, [r2, #2]
     fe8:	0792      	lsls	r2, r2, #30
     fea:	d501      	bpl.n	ff0 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     fec:	2280      	movs	r2, #128	; 0x80
     fee:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
     ff0:	7ca2      	ldrb	r2, [r4, #18]
     ff2:	2a00      	cmp	r2, #0
     ff4:	d002      	beq.n	ffc <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ff6:	2280      	movs	r2, #128	; 0x80
     ff8:	0292      	lsls	r2, r2, #10
     ffa:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
     ffc:	7ce2      	ldrb	r2, [r4, #19]
     ffe:	2a00      	cmp	r2, #0
    1000:	d002      	beq.n	1008 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1002:	2280      	movs	r2, #128	; 0x80
    1004:	0092      	lsls	r2, r2, #2
    1006:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1008:	7d22      	ldrb	r2, [r4, #20]
    100a:	2a00      	cmp	r2, #0
    100c:	d002      	beq.n	1014 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    100e:	2280      	movs	r2, #128	; 0x80
    1010:	0192      	lsls	r2, r2, #6
    1012:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1014:	6832      	ldr	r2, [r6, #0]
    1016:	4313      	orrs	r3, r2
    1018:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    101a:	6873      	ldr	r3, [r6, #4]
    101c:	430b      	orrs	r3, r1
    101e:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    1020:	2000      	movs	r0, #0
    1022:	e6dd      	b.n	de0 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1024:	464b      	mov	r3, r9
    1026:	6818      	ldr	r0, [r3, #0]
    1028:	4b0e      	ldr	r3, [pc, #56]	; (1064 <spi_init+0x2a8>)
    102a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    102c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    102e:	b2c0      	uxtb	r0, r0
    1030:	4b0a      	ldr	r3, [pc, #40]	; (105c <spi_init+0x2a0>)
    1032:	4798      	blx	r3
    1034:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1036:	ab02      	add	r3, sp, #8
    1038:	1d9a      	adds	r2, r3, #6
    103a:	69a0      	ldr	r0, [r4, #24]
    103c:	4b08      	ldr	r3, [pc, #32]	; (1060 <spi_init+0x2a4>)
    103e:	4798      	blx	r3
    1040:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1042:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1044:	2b00      	cmp	r3, #0
    1046:	d000      	beq.n	104a <spi_init+0x28e>
    1048:	e6ca      	b.n	de0 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    104a:	ab02      	add	r3, sp, #8
    104c:	3306      	adds	r3, #6
    104e:	781b      	ldrb	r3, [r3, #0]
    1050:	7333      	strb	r3, [r6, #12]
    1052:	e7be      	b.n	fd2 <spi_init+0x216>
    1054:	00000ba9 	.word	0x00000ba9
    1058:	41004400 	.word	0x41004400
    105c:	000017c5 	.word	0x000017c5
    1060:	00000b35 	.word	0x00000b35
    1064:	00000d25 	.word	0x00000d25
    1068:	40000400 	.word	0x40000400
    106c:	000017a9 	.word	0x000017a9
    1070:	0000171d 	.word	0x0000171d
    1074:	00000b5d 	.word	0x00000b5d
    1078:	000018a1 	.word	0x000018a1
    107c:	41002000 	.word	0x41002000

00001080 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1080:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1082:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1084:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1086:	2c01      	cmp	r4, #1
    1088:	d001      	beq.n	108e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    108a:	0018      	movs	r0, r3
    108c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    108e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1090:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1092:	2c00      	cmp	r4, #0
    1094:	d1f9      	bne.n	108a <spi_select_slave+0xa>
		if (select) {
    1096:	2a00      	cmp	r2, #0
    1098:	d058      	beq.n	114c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    109a:	784b      	ldrb	r3, [r1, #1]
    109c:	2b00      	cmp	r3, #0
    109e:	d044      	beq.n	112a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10a0:	6803      	ldr	r3, [r0, #0]
    10a2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    10a4:	07db      	lsls	r3, r3, #31
    10a6:	d410      	bmi.n	10ca <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    10a8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    10aa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    10ac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10ae:	2900      	cmp	r1, #0
    10b0:	d104      	bne.n	10bc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    10b2:	0953      	lsrs	r3, r2, #5
    10b4:	01db      	lsls	r3, r3, #7
    10b6:	492e      	ldr	r1, [pc, #184]	; (1170 <spi_select_slave+0xf0>)
    10b8:	468c      	mov	ip, r1
    10ba:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    10bc:	211f      	movs	r1, #31
    10be:	4011      	ands	r1, r2
    10c0:	2201      	movs	r2, #1
    10c2:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    10c4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    10c6:	2305      	movs	r3, #5
    10c8:	e7df      	b.n	108a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    10ca:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    10cc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    10ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10d0:	2c00      	cmp	r4, #0
    10d2:	d104      	bne.n	10de <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    10d4:	0953      	lsrs	r3, r2, #5
    10d6:	01db      	lsls	r3, r3, #7
    10d8:	4c25      	ldr	r4, [pc, #148]	; (1170 <spi_select_slave+0xf0>)
    10da:	46a4      	mov	ip, r4
    10dc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    10de:	241f      	movs	r4, #31
    10e0:	4014      	ands	r4, r2
    10e2:	2201      	movs	r2, #1
    10e4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    10e6:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    10e8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10ea:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    10ec:	07d2      	lsls	r2, r2, #31
    10ee:	d501      	bpl.n	10f4 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    10f0:	788a      	ldrb	r2, [r1, #2]
    10f2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    10f4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    10f6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    10f8:	2a00      	cmp	r2, #0
    10fa:	d1c6      	bne.n	108a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10fc:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    10fe:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1100:	7e13      	ldrb	r3, [r2, #24]
    1102:	420b      	tst	r3, r1
    1104:	d0fc      	beq.n	1100 <spi_select_slave+0x80>
    1106:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1108:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    110a:	0749      	lsls	r1, r1, #29
    110c:	d5bd      	bpl.n	108a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    110e:	8b53      	ldrh	r3, [r2, #26]
    1110:	075b      	lsls	r3, r3, #29
    1112:	d501      	bpl.n	1118 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1114:	2304      	movs	r3, #4
    1116:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1118:	7983      	ldrb	r3, [r0, #6]
    111a:	2b01      	cmp	r3, #1
    111c:	d002      	beq.n	1124 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    111e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1120:	2300      	movs	r3, #0
    1122:	e7b2      	b.n	108a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1124:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1126:	2300      	movs	r3, #0
    1128:	e7af      	b.n	108a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    112a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    112c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    112e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1130:	2900      	cmp	r1, #0
    1132:	d104      	bne.n	113e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1134:	0953      	lsrs	r3, r2, #5
    1136:	01db      	lsls	r3, r3, #7
    1138:	490d      	ldr	r1, [pc, #52]	; (1170 <spi_select_slave+0xf0>)
    113a:	468c      	mov	ip, r1
    113c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    113e:	211f      	movs	r1, #31
    1140:	4011      	ands	r1, r2
    1142:	2201      	movs	r2, #1
    1144:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1146:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1148:	2300      	movs	r3, #0
    114a:	e79e      	b.n	108a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    114c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    114e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1150:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1152:	2900      	cmp	r1, #0
    1154:	d104      	bne.n	1160 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1156:	0953      	lsrs	r3, r2, #5
    1158:	01db      	lsls	r3, r3, #7
    115a:	4905      	ldr	r1, [pc, #20]	; (1170 <spi_select_slave+0xf0>)
    115c:	468c      	mov	ip, r1
    115e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1160:	211f      	movs	r1, #31
    1162:	4011      	ands	r1, r2
    1164:	2201      	movs	r2, #1
    1166:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1168:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    116a:	2300      	movs	r3, #0
    116c:	e78d      	b.n	108a <spi_select_slave+0xa>
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	41004400 	.word	0x41004400

00001174 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1174:	b510      	push	{r4, lr}
	switch (clock_source) {
    1176:	2808      	cmp	r0, #8
    1178:	d803      	bhi.n	1182 <system_clock_source_get_hz+0xe>
    117a:	0080      	lsls	r0, r0, #2
    117c:	4b1c      	ldr	r3, [pc, #112]	; (11f0 <system_clock_source_get_hz+0x7c>)
    117e:	581b      	ldr	r3, [r3, r0]
    1180:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1182:	2000      	movs	r0, #0
    1184:	e032      	b.n	11ec <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1186:	4b1b      	ldr	r3, [pc, #108]	; (11f4 <system_clock_source_get_hz+0x80>)
    1188:	6918      	ldr	r0, [r3, #16]
    118a:	e02f      	b.n	11ec <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    118c:	4b1a      	ldr	r3, [pc, #104]	; (11f8 <system_clock_source_get_hz+0x84>)
    118e:	6a1b      	ldr	r3, [r3, #32]
    1190:	059b      	lsls	r3, r3, #22
    1192:	0f9b      	lsrs	r3, r3, #30
    1194:	4819      	ldr	r0, [pc, #100]	; (11fc <system_clock_source_get_hz+0x88>)
    1196:	40d8      	lsrs	r0, r3
    1198:	e028      	b.n	11ec <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    119a:	4b16      	ldr	r3, [pc, #88]	; (11f4 <system_clock_source_get_hz+0x80>)
    119c:	6958      	ldr	r0, [r3, #20]
    119e:	e025      	b.n	11ec <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    11a0:	4b14      	ldr	r3, [pc, #80]	; (11f4 <system_clock_source_get_hz+0x80>)
    11a2:	681b      	ldr	r3, [r3, #0]
			return 0;
    11a4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    11a6:	079b      	lsls	r3, r3, #30
    11a8:	d520      	bpl.n	11ec <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11aa:	4913      	ldr	r1, [pc, #76]	; (11f8 <system_clock_source_get_hz+0x84>)
    11ac:	2210      	movs	r2, #16
    11ae:	68cb      	ldr	r3, [r1, #12]
    11b0:	421a      	tst	r2, r3
    11b2:	d0fc      	beq.n	11ae <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    11b4:	4b0f      	ldr	r3, [pc, #60]	; (11f4 <system_clock_source_get_hz+0x80>)
    11b6:	681a      	ldr	r2, [r3, #0]
    11b8:	2324      	movs	r3, #36	; 0x24
    11ba:	4013      	ands	r3, r2
    11bc:	2b04      	cmp	r3, #4
    11be:	d001      	beq.n	11c4 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    11c0:	480f      	ldr	r0, [pc, #60]	; (1200 <system_clock_source_get_hz+0x8c>)
    11c2:	e013      	b.n	11ec <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    11c4:	2000      	movs	r0, #0
    11c6:	4b0f      	ldr	r3, [pc, #60]	; (1204 <system_clock_source_get_hz+0x90>)
    11c8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    11ca:	4b0a      	ldr	r3, [pc, #40]	; (11f4 <system_clock_source_get_hz+0x80>)
    11cc:	689b      	ldr	r3, [r3, #8]
    11ce:	041b      	lsls	r3, r3, #16
    11d0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    11d2:	4358      	muls	r0, r3
    11d4:	e00a      	b.n	11ec <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    11d6:	2350      	movs	r3, #80	; 0x50
    11d8:	4a07      	ldr	r2, [pc, #28]	; (11f8 <system_clock_source_get_hz+0x84>)
    11da:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    11dc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    11de:	075b      	lsls	r3, r3, #29
    11e0:	d504      	bpl.n	11ec <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    11e2:	4b04      	ldr	r3, [pc, #16]	; (11f4 <system_clock_source_get_hz+0x80>)
    11e4:	68d8      	ldr	r0, [r3, #12]
    11e6:	e001      	b.n	11ec <system_clock_source_get_hz+0x78>
		return 32768UL;
    11e8:	2080      	movs	r0, #128	; 0x80
    11ea:	0200      	lsls	r0, r0, #8
	}
}
    11ec:	bd10      	pop	{r4, pc}
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	00007e7c 	.word	0x00007e7c
    11f4:	20000100 	.word	0x20000100
    11f8:	40000800 	.word	0x40000800
    11fc:	007a1200 	.word	0x007a1200
    1200:	02dc6c00 	.word	0x02dc6c00
    1204:	000017c5 	.word	0x000017c5

00001208 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1208:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    120a:	490c      	ldr	r1, [pc, #48]	; (123c <system_clock_source_osc8m_set_config+0x34>)
    120c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    120e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1210:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1212:	7840      	ldrb	r0, [r0, #1]
    1214:	2201      	movs	r2, #1
    1216:	4010      	ands	r0, r2
    1218:	0180      	lsls	r0, r0, #6
    121a:	2640      	movs	r6, #64	; 0x40
    121c:	43b3      	bics	r3, r6
    121e:	4303      	orrs	r3, r0
    1220:	402a      	ands	r2, r5
    1222:	01d2      	lsls	r2, r2, #7
    1224:	2080      	movs	r0, #128	; 0x80
    1226:	4383      	bics	r3, r0
    1228:	4313      	orrs	r3, r2
    122a:	2203      	movs	r2, #3
    122c:	4022      	ands	r2, r4
    122e:	0212      	lsls	r2, r2, #8
    1230:	4803      	ldr	r0, [pc, #12]	; (1240 <system_clock_source_osc8m_set_config+0x38>)
    1232:	4003      	ands	r3, r0
    1234:	4313      	orrs	r3, r2
    1236:	620b      	str	r3, [r1, #32]
}
    1238:	bd70      	pop	{r4, r5, r6, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	40000800 	.word	0x40000800
    1240:	fffffcff 	.word	0xfffffcff

00001244 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1244:	b5f0      	push	{r4, r5, r6, r7, lr}
    1246:	46ce      	mov	lr, r9
    1248:	4647      	mov	r7, r8
    124a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    124c:	4b19      	ldr	r3, [pc, #100]	; (12b4 <system_clock_source_osc32k_set_config+0x70>)
    124e:	4699      	mov	r9, r3
    1250:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1252:	7841      	ldrb	r1, [r0, #1]
    1254:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1256:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1258:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    125a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    125c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    125e:	7880      	ldrb	r0, [r0, #2]
    1260:	2101      	movs	r1, #1
    1262:	4008      	ands	r0, r1
    1264:	0080      	lsls	r0, r0, #2
    1266:	2204      	movs	r2, #4
    1268:	4393      	bics	r3, r2
    126a:	4303      	orrs	r3, r0
    126c:	4660      	mov	r0, ip
    126e:	4008      	ands	r0, r1
    1270:	00c0      	lsls	r0, r0, #3
    1272:	3204      	adds	r2, #4
    1274:	4393      	bics	r3, r2
    1276:	4303      	orrs	r3, r0
    1278:	0038      	movs	r0, r7
    127a:	4008      	ands	r0, r1
    127c:	0180      	lsls	r0, r0, #6
    127e:	2740      	movs	r7, #64	; 0x40
    1280:	43bb      	bics	r3, r7
    1282:	4303      	orrs	r3, r0
    1284:	0030      	movs	r0, r6
    1286:	4008      	ands	r0, r1
    1288:	01c0      	lsls	r0, r0, #7
    128a:	2680      	movs	r6, #128	; 0x80
    128c:	43b3      	bics	r3, r6
    128e:	4303      	orrs	r3, r0
    1290:	2007      	movs	r0, #7
    1292:	4005      	ands	r5, r0
    1294:	022d      	lsls	r5, r5, #8
    1296:	4808      	ldr	r0, [pc, #32]	; (12b8 <system_clock_source_osc32k_set_config+0x74>)
    1298:	4003      	ands	r3, r0
    129a:	432b      	orrs	r3, r5
    129c:	4021      	ands	r1, r4
    129e:	0309      	lsls	r1, r1, #12
    12a0:	4806      	ldr	r0, [pc, #24]	; (12bc <system_clock_source_osc32k_set_config+0x78>)
    12a2:	4003      	ands	r3, r0
    12a4:	430b      	orrs	r3, r1
    12a6:	464a      	mov	r2, r9
    12a8:	6193      	str	r3, [r2, #24]
}
    12aa:	bc0c      	pop	{r2, r3}
    12ac:	4690      	mov	r8, r2
    12ae:	4699      	mov	r9, r3
    12b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	40000800 	.word	0x40000800
    12b8:	fffff8ff 	.word	0xfffff8ff
    12bc:	ffffefff 	.word	0xffffefff

000012c0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    12c0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12c2:	7a03      	ldrb	r3, [r0, #8]
    12c4:	069b      	lsls	r3, r3, #26
    12c6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    12c8:	8942      	ldrh	r2, [r0, #10]
    12ca:	0592      	lsls	r2, r2, #22
    12cc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12ce:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    12d0:	4918      	ldr	r1, [pc, #96]	; (1334 <system_clock_source_dfll_set_config+0x74>)
    12d2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    12d4:	7983      	ldrb	r3, [r0, #6]
    12d6:	79c2      	ldrb	r2, [r0, #7]
    12d8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    12da:	8842      	ldrh	r2, [r0, #2]
    12dc:	8884      	ldrh	r4, [r0, #4]
    12de:	4322      	orrs	r2, r4
    12e0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    12e2:	7842      	ldrb	r2, [r0, #1]
    12e4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    12e6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    12e8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    12ea:	7803      	ldrb	r3, [r0, #0]
    12ec:	2b04      	cmp	r3, #4
    12ee:	d011      	beq.n	1314 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    12f0:	2b20      	cmp	r3, #32
    12f2:	d10e      	bne.n	1312 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12f4:	7b03      	ldrb	r3, [r0, #12]
    12f6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12f8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12fa:	4313      	orrs	r3, r2
    12fc:	89c2      	ldrh	r2, [r0, #14]
    12fe:	0412      	lsls	r2, r2, #16
    1300:	490d      	ldr	r1, [pc, #52]	; (1338 <system_clock_source_dfll_set_config+0x78>)
    1302:	400a      	ands	r2, r1
    1304:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1306:	4a0b      	ldr	r2, [pc, #44]	; (1334 <system_clock_source_dfll_set_config+0x74>)
    1308:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    130a:	6811      	ldr	r1, [r2, #0]
    130c:	4b0b      	ldr	r3, [pc, #44]	; (133c <system_clock_source_dfll_set_config+0x7c>)
    130e:	430b      	orrs	r3, r1
    1310:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1312:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1314:	7b03      	ldrb	r3, [r0, #12]
    1316:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1318:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    131a:	4313      	orrs	r3, r2
    131c:	89c2      	ldrh	r2, [r0, #14]
    131e:	0412      	lsls	r2, r2, #16
    1320:	4905      	ldr	r1, [pc, #20]	; (1338 <system_clock_source_dfll_set_config+0x78>)
    1322:	400a      	ands	r2, r1
    1324:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1326:	4a03      	ldr	r2, [pc, #12]	; (1334 <system_clock_source_dfll_set_config+0x74>)
    1328:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    132a:	6813      	ldr	r3, [r2, #0]
    132c:	2104      	movs	r1, #4
    132e:	430b      	orrs	r3, r1
    1330:	6013      	str	r3, [r2, #0]
    1332:	e7ee      	b.n	1312 <system_clock_source_dfll_set_config+0x52>
    1334:	20000100 	.word	0x20000100
    1338:	03ff0000 	.word	0x03ff0000
    133c:	00000424 	.word	0x00000424

00001340 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1340:	2808      	cmp	r0, #8
    1342:	d803      	bhi.n	134c <system_clock_source_enable+0xc>
    1344:	0080      	lsls	r0, r0, #2
    1346:	4b25      	ldr	r3, [pc, #148]	; (13dc <system_clock_source_enable+0x9c>)
    1348:	581b      	ldr	r3, [r3, r0]
    134a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    134c:	2017      	movs	r0, #23
    134e:	e044      	b.n	13da <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1350:	4a23      	ldr	r2, [pc, #140]	; (13e0 <system_clock_source_enable+0xa0>)
    1352:	6a13      	ldr	r3, [r2, #32]
    1354:	2102      	movs	r1, #2
    1356:	430b      	orrs	r3, r1
    1358:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    135a:	2000      	movs	r0, #0
    135c:	e03d      	b.n	13da <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    135e:	4a20      	ldr	r2, [pc, #128]	; (13e0 <system_clock_source_enable+0xa0>)
    1360:	6993      	ldr	r3, [r2, #24]
    1362:	2102      	movs	r1, #2
    1364:	430b      	orrs	r3, r1
    1366:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1368:	2000      	movs	r0, #0
		break;
    136a:	e036      	b.n	13da <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    136c:	4a1c      	ldr	r2, [pc, #112]	; (13e0 <system_clock_source_enable+0xa0>)
    136e:	8a13      	ldrh	r3, [r2, #16]
    1370:	2102      	movs	r1, #2
    1372:	430b      	orrs	r3, r1
    1374:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1376:	2000      	movs	r0, #0
		break;
    1378:	e02f      	b.n	13da <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    137a:	4a19      	ldr	r2, [pc, #100]	; (13e0 <system_clock_source_enable+0xa0>)
    137c:	8a93      	ldrh	r3, [r2, #20]
    137e:	2102      	movs	r1, #2
    1380:	430b      	orrs	r3, r1
    1382:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1384:	2000      	movs	r0, #0
		break;
    1386:	e028      	b.n	13da <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1388:	4916      	ldr	r1, [pc, #88]	; (13e4 <system_clock_source_enable+0xa4>)
    138a:	680b      	ldr	r3, [r1, #0]
    138c:	2202      	movs	r2, #2
    138e:	4313      	orrs	r3, r2
    1390:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1392:	4b13      	ldr	r3, [pc, #76]	; (13e0 <system_clock_source_enable+0xa0>)
    1394:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1396:	0019      	movs	r1, r3
    1398:	320e      	adds	r2, #14
    139a:	68cb      	ldr	r3, [r1, #12]
    139c:	421a      	tst	r2, r3
    139e:	d0fc      	beq.n	139a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    13a0:	4a10      	ldr	r2, [pc, #64]	; (13e4 <system_clock_source_enable+0xa4>)
    13a2:	6891      	ldr	r1, [r2, #8]
    13a4:	4b0e      	ldr	r3, [pc, #56]	; (13e0 <system_clock_source_enable+0xa0>)
    13a6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    13a8:	6852      	ldr	r2, [r2, #4]
    13aa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    13ac:	2200      	movs	r2, #0
    13ae:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13b0:	0019      	movs	r1, r3
    13b2:	3210      	adds	r2, #16
    13b4:	68cb      	ldr	r3, [r1, #12]
    13b6:	421a      	tst	r2, r3
    13b8:	d0fc      	beq.n	13b4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13ba:	4b0a      	ldr	r3, [pc, #40]	; (13e4 <system_clock_source_enable+0xa4>)
    13bc:	681b      	ldr	r3, [r3, #0]
    13be:	b29b      	uxth	r3, r3
    13c0:	4a07      	ldr	r2, [pc, #28]	; (13e0 <system_clock_source_enable+0xa0>)
    13c2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    13c4:	2000      	movs	r0, #0
    13c6:	e008      	b.n	13da <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13c8:	4905      	ldr	r1, [pc, #20]	; (13e0 <system_clock_source_enable+0xa0>)
    13ca:	2244      	movs	r2, #68	; 0x44
    13cc:	5c8b      	ldrb	r3, [r1, r2]
    13ce:	2002      	movs	r0, #2
    13d0:	4303      	orrs	r3, r0
    13d2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    13d4:	2000      	movs	r0, #0
		break;
    13d6:	e000      	b.n	13da <system_clock_source_enable+0x9a>
		return STATUS_OK;
    13d8:	2000      	movs	r0, #0
}
    13da:	4770      	bx	lr
    13dc:	00007ea0 	.word	0x00007ea0
    13e0:	40000800 	.word	0x40000800
    13e4:	20000100 	.word	0x20000100

000013e8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ea:	46ce      	mov	lr, r9
    13ec:	4647      	mov	r7, r8
    13ee:	b580      	push	{r7, lr}
    13f0:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13f2:	22c2      	movs	r2, #194	; 0xc2
    13f4:	00d2      	lsls	r2, r2, #3
    13f6:	4b50      	ldr	r3, [pc, #320]	; (1538 <system_clock_init+0x150>)
    13f8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13fa:	4a50      	ldr	r2, [pc, #320]	; (153c <system_clock_init+0x154>)
    13fc:	6853      	ldr	r3, [r2, #4]
    13fe:	211e      	movs	r1, #30
    1400:	438b      	bics	r3, r1
    1402:	391a      	subs	r1, #26
    1404:	430b      	orrs	r3, r1
    1406:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    1408:	2203      	movs	r2, #3
    140a:	ab01      	add	r3, sp, #4
    140c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    140e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1410:	4d4b      	ldr	r5, [pc, #300]	; (1540 <system_clock_init+0x158>)
    1412:	b2e0      	uxtb	r0, r4
    1414:	a901      	add	r1, sp, #4
    1416:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1418:	3401      	adds	r4, #1
    141a:	2c25      	cmp	r4, #37	; 0x25
    141c:	d1f9      	bne.n	1412 <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    141e:	4d49      	ldr	r5, [pc, #292]	; (1544 <system_clock_init+0x15c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    1420:	682b      	ldr	r3, [r5, #0]
    1422:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1424:	4944      	ldr	r1, [pc, #272]	; (1538 <system_clock_init+0x150>)
    1426:	698a      	ldr	r2, [r1, #24]
    1428:	0e5b      	lsrs	r3, r3, #25
    142a:	041b      	lsls	r3, r3, #16
    142c:	4846      	ldr	r0, [pc, #280]	; (1548 <system_clock_init+0x160>)
    142e:	4002      	ands	r2, r0
    1430:	4313      	orrs	r3, r2
    1432:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    1434:	a80a      	add	r0, sp, #40	; 0x28
    1436:	2301      	movs	r3, #1
    1438:	7083      	strb	r3, [r0, #2]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    143a:	2207      	movs	r2, #7
    143c:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    143e:	2400      	movs	r4, #0
    1440:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    1442:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    1444:	7104      	strb	r4, [r0, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1446:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1448:	4b40      	ldr	r3, [pc, #256]	; (154c <system_clock_init+0x164>)
    144a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    144c:	2004      	movs	r0, #4
    144e:	4b40      	ldr	r3, [pc, #256]	; (1550 <system_clock_init+0x168>)
    1450:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1452:	ab05      	add	r3, sp, #20
    1454:	2200      	movs	r2, #0
    1456:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1458:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    145a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    145c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    145e:	213f      	movs	r1, #63	; 0x3f
    1460:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1462:	393b      	subs	r1, #59	; 0x3b
    1464:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1466:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1468:	682b      	ldr	r3, [r5, #0]
    146a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    146c:	2b3f      	cmp	r3, #63	; 0x3f
    146e:	d060      	beq.n	1532 <system_clock_init+0x14a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1470:	a805      	add	r0, sp, #20
    1472:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1474:	2304      	movs	r3, #4
    1476:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1478:	3303      	adds	r3, #3
    147a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    147c:	3338      	adds	r3, #56	; 0x38
    147e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1480:	4b34      	ldr	r3, [pc, #208]	; (1554 <system_clock_init+0x16c>)
    1482:	4798      	blx	r3
	config->run_in_standby  = false;
    1484:	a804      	add	r0, sp, #16
    1486:	2500      	movs	r5, #0
    1488:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    148a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    148c:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    148e:	4b32      	ldr	r3, [pc, #200]	; (1558 <system_clock_init+0x170>)
    1490:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1492:	2006      	movs	r0, #6
    1494:	4f2e      	ldr	r7, [pc, #184]	; (1550 <system_clock_init+0x168>)
    1496:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1498:	4b30      	ldr	r3, [pc, #192]	; (155c <system_clock_init+0x174>)
    149a:	4798      	blx	r3
	config->division_factor    = 1;
    149c:	ac01      	add	r4, sp, #4
    149e:	2601      	movs	r6, #1
    14a0:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    14a2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    14a4:	2306      	movs	r3, #6
    14a6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    14a8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    14aa:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    14ac:	0021      	movs	r1, r4
    14ae:	2001      	movs	r0, #1
    14b0:	4b2b      	ldr	r3, [pc, #172]	; (1560 <system_clock_init+0x178>)
    14b2:	4699      	mov	r9, r3
    14b4:	4798      	blx	r3
    14b6:	2001      	movs	r0, #1
    14b8:	4b2a      	ldr	r3, [pc, #168]	; (1564 <system_clock_init+0x17c>)
    14ba:	4698      	mov	r8, r3
    14bc:	4798      	blx	r3
	config->high_when_disabled = false;
    14be:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    14c0:	7265      	strb	r5, [r4, #9]
    14c2:	2304      	movs	r3, #4
    14c4:	7023      	strb	r3, [r4, #0]
    14c6:	2320      	movs	r3, #32
    14c8:	6063      	str	r3, [r4, #4]
    14ca:	7226      	strb	r6, [r4, #8]
    14cc:	0021      	movs	r1, r4
    14ce:	2002      	movs	r0, #2
    14d0:	47c8      	blx	r9
    14d2:	2002      	movs	r0, #2
    14d4:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    14d6:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    14d8:	0021      	movs	r1, r4
    14da:	2000      	movs	r0, #0
    14dc:	4b18      	ldr	r3, [pc, #96]	; (1540 <system_clock_init+0x158>)
    14de:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    14e0:	2000      	movs	r0, #0
    14e2:	4b21      	ldr	r3, [pc, #132]	; (1568 <system_clock_init+0x180>)
    14e4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    14e6:	2007      	movs	r0, #7
    14e8:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    14ea:	4913      	ldr	r1, [pc, #76]	; (1538 <system_clock_init+0x150>)
    14ec:	22d0      	movs	r2, #208	; 0xd0
    14ee:	68cb      	ldr	r3, [r1, #12]
    14f0:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    14f2:	2bd0      	cmp	r3, #208	; 0xd0
    14f4:	d1fb      	bne.n	14ee <system_clock_init+0x106>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    14f6:	4a10      	ldr	r2, [pc, #64]	; (1538 <system_clock_init+0x150>)
    14f8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    14fa:	2180      	movs	r1, #128	; 0x80
    14fc:	430b      	orrs	r3, r1
    14fe:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    1500:	4a1a      	ldr	r2, [pc, #104]	; (156c <system_clock_init+0x184>)
    1502:	2300      	movs	r3, #0
    1504:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1506:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1508:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    150a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    150c:	a901      	add	r1, sp, #4
    150e:	2201      	movs	r2, #1
    1510:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1512:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1514:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1516:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1518:	3307      	adds	r3, #7
    151a:	700b      	strb	r3, [r1, #0]
    151c:	2000      	movs	r0, #0
    151e:	4b10      	ldr	r3, [pc, #64]	; (1560 <system_clock_init+0x178>)
    1520:	4798      	blx	r3
    1522:	2000      	movs	r0, #0
    1524:	4b0f      	ldr	r3, [pc, #60]	; (1564 <system_clock_init+0x17c>)
    1526:	4798      	blx	r3
#endif
}
    1528:	b00d      	add	sp, #52	; 0x34
    152a:	bc0c      	pop	{r2, r3}
    152c:	4690      	mov	r8, r2
    152e:	4699      	mov	r9, r3
    1530:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1532:	3b20      	subs	r3, #32
    1534:	e79c      	b.n	1470 <system_clock_init+0x88>
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	40000800 	.word	0x40000800
    153c:	41004000 	.word	0x41004000
    1540:	000017a9 	.word	0x000017a9
    1544:	00806024 	.word	0x00806024
    1548:	ff80ffff 	.word	0xff80ffff
    154c:	00001245 	.word	0x00001245
    1550:	00001341 	.word	0x00001341
    1554:	000012c1 	.word	0x000012c1
    1558:	00001209 	.word	0x00001209
    155c:	00001571 	.word	0x00001571
    1560:	00001595 	.word	0x00001595
    1564:	0000164d 	.word	0x0000164d
    1568:	0000171d 	.word	0x0000171d
    156c:	40000400 	.word	0x40000400

00001570 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1570:	4a06      	ldr	r2, [pc, #24]	; (158c <system_gclk_init+0x1c>)
    1572:	6993      	ldr	r3, [r2, #24]
    1574:	2108      	movs	r1, #8
    1576:	430b      	orrs	r3, r1
    1578:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    157a:	2201      	movs	r2, #1
    157c:	4b04      	ldr	r3, [pc, #16]	; (1590 <system_gclk_init+0x20>)
    157e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1580:	0019      	movs	r1, r3
    1582:	780b      	ldrb	r3, [r1, #0]
    1584:	4213      	tst	r3, r2
    1586:	d1fc      	bne.n	1582 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1588:	4770      	bx	lr
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	40000400 	.word	0x40000400
    1590:	40000c00 	.word	0x40000c00

00001594 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1594:	b570      	push	{r4, r5, r6, lr}
    1596:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1598:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    159a:	780d      	ldrb	r5, [r1, #0]
    159c:	022d      	lsls	r5, r5, #8
    159e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    15a0:	784b      	ldrb	r3, [r1, #1]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d002      	beq.n	15ac <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    15a6:	2380      	movs	r3, #128	; 0x80
    15a8:	02db      	lsls	r3, r3, #11
    15aa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    15ac:	7a4b      	ldrb	r3, [r1, #9]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d002      	beq.n	15b8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    15b2:	2380      	movs	r3, #128	; 0x80
    15b4:	031b      	lsls	r3, r3, #12
    15b6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    15b8:	6848      	ldr	r0, [r1, #4]
    15ba:	2801      	cmp	r0, #1
    15bc:	d910      	bls.n	15e0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    15be:	1e43      	subs	r3, r0, #1
    15c0:	4218      	tst	r0, r3
    15c2:	d134      	bne.n	162e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    15c4:	2802      	cmp	r0, #2
    15c6:	d930      	bls.n	162a <system_gclk_gen_set_config+0x96>
    15c8:	2302      	movs	r3, #2
    15ca:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    15cc:	3201      	adds	r2, #1
						mask <<= 1) {
    15ce:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    15d0:	4298      	cmp	r0, r3
    15d2:	d8fb      	bhi.n	15cc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    15d4:	0212      	lsls	r2, r2, #8
    15d6:	4332      	orrs	r2, r6
    15d8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    15da:	2380      	movs	r3, #128	; 0x80
    15dc:	035b      	lsls	r3, r3, #13
    15de:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    15e0:	7a0b      	ldrb	r3, [r1, #8]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d002      	beq.n	15ec <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15e6:	2380      	movs	r3, #128	; 0x80
    15e8:	039b      	lsls	r3, r3, #14
    15ea:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15ec:	4a13      	ldr	r2, [pc, #76]	; (163c <system_gclk_gen_set_config+0xa8>)
    15ee:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    15f0:	b25b      	sxtb	r3, r3
    15f2:	2b00      	cmp	r3, #0
    15f4:	dbfb      	blt.n	15ee <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    15f6:	4b12      	ldr	r3, [pc, #72]	; (1640 <system_gclk_gen_set_config+0xac>)
    15f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15fa:	4b12      	ldr	r3, [pc, #72]	; (1644 <system_gclk_gen_set_config+0xb0>)
    15fc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15fe:	4a0f      	ldr	r2, [pc, #60]	; (163c <system_gclk_gen_set_config+0xa8>)
    1600:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1602:	b25b      	sxtb	r3, r3
    1604:	2b00      	cmp	r3, #0
    1606:	dbfb      	blt.n	1600 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1608:	4b0c      	ldr	r3, [pc, #48]	; (163c <system_gclk_gen_set_config+0xa8>)
    160a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    160c:	001a      	movs	r2, r3
    160e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1610:	b25b      	sxtb	r3, r3
    1612:	2b00      	cmp	r3, #0
    1614:	dbfb      	blt.n	160e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1616:	4a09      	ldr	r2, [pc, #36]	; (163c <system_gclk_gen_set_config+0xa8>)
    1618:	6853      	ldr	r3, [r2, #4]
    161a:	2180      	movs	r1, #128	; 0x80
    161c:	0249      	lsls	r1, r1, #9
    161e:	400b      	ands	r3, r1
    1620:	431d      	orrs	r5, r3
    1622:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <system_gclk_gen_set_config+0xb4>)
    1626:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1628:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    162a:	2200      	movs	r2, #0
    162c:	e7d2      	b.n	15d4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    162e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1630:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1632:	2380      	movs	r3, #128	; 0x80
    1634:	029b      	lsls	r3, r3, #10
    1636:	431d      	orrs	r5, r3
    1638:	e7d2      	b.n	15e0 <system_gclk_gen_set_config+0x4c>
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	40000c00 	.word	0x40000c00
    1640:	00000181 	.word	0x00000181
    1644:	40000c08 	.word	0x40000c08
    1648:	000001c1 	.word	0x000001c1

0000164c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    164c:	b510      	push	{r4, lr}
    164e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1650:	4a0b      	ldr	r2, [pc, #44]	; (1680 <system_gclk_gen_enable+0x34>)
    1652:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1654:	b25b      	sxtb	r3, r3
    1656:	2b00      	cmp	r3, #0
    1658:	dbfb      	blt.n	1652 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    165a:	4b0a      	ldr	r3, [pc, #40]	; (1684 <system_gclk_gen_enable+0x38>)
    165c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <system_gclk_gen_enable+0x3c>)
    1660:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1662:	4a07      	ldr	r2, [pc, #28]	; (1680 <system_gclk_gen_enable+0x34>)
    1664:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1666:	b25b      	sxtb	r3, r3
    1668:	2b00      	cmp	r3, #0
    166a:	dbfb      	blt.n	1664 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    166c:	4a04      	ldr	r2, [pc, #16]	; (1680 <system_gclk_gen_enable+0x34>)
    166e:	6851      	ldr	r1, [r2, #4]
    1670:	2380      	movs	r3, #128	; 0x80
    1672:	025b      	lsls	r3, r3, #9
    1674:	430b      	orrs	r3, r1
    1676:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1678:	4b04      	ldr	r3, [pc, #16]	; (168c <system_gclk_gen_enable+0x40>)
    167a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    167c:	bd10      	pop	{r4, pc}
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	40000c00 	.word	0x40000c00
    1684:	00000181 	.word	0x00000181
    1688:	40000c04 	.word	0x40000c04
    168c:	000001c1 	.word	0x000001c1

00001690 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1690:	b570      	push	{r4, r5, r6, lr}
    1692:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1694:	4a1a      	ldr	r2, [pc, #104]	; (1700 <system_gclk_gen_get_hz+0x70>)
    1696:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1698:	b25b      	sxtb	r3, r3
    169a:	2b00      	cmp	r3, #0
    169c:	dbfb      	blt.n	1696 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    169e:	4b19      	ldr	r3, [pc, #100]	; (1704 <system_gclk_gen_get_hz+0x74>)
    16a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16a2:	4b19      	ldr	r3, [pc, #100]	; (1708 <system_gclk_gen_get_hz+0x78>)
    16a4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16a6:	4a16      	ldr	r2, [pc, #88]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    16aa:	b25b      	sxtb	r3, r3
    16ac:	2b00      	cmp	r3, #0
    16ae:	dbfb      	blt.n	16a8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    16b0:	4e13      	ldr	r6, [pc, #76]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16b2:	6870      	ldr	r0, [r6, #4]
    16b4:	04c0      	lsls	r0, r0, #19
    16b6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    16b8:	4b14      	ldr	r3, [pc, #80]	; (170c <system_gclk_gen_get_hz+0x7c>)
    16ba:	4798      	blx	r3
    16bc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16be:	4b12      	ldr	r3, [pc, #72]	; (1708 <system_gclk_gen_get_hz+0x78>)
    16c0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    16c2:	6876      	ldr	r6, [r6, #4]
    16c4:	02f6      	lsls	r6, r6, #11
    16c6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16c8:	4b11      	ldr	r3, [pc, #68]	; (1710 <system_gclk_gen_get_hz+0x80>)
    16ca:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16cc:	4a0c      	ldr	r2, [pc, #48]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    16d0:	b25b      	sxtb	r3, r3
    16d2:	2b00      	cmp	r3, #0
    16d4:	dbfb      	blt.n	16ce <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    16d6:	4b0a      	ldr	r3, [pc, #40]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16d8:	689c      	ldr	r4, [r3, #8]
    16da:	0224      	lsls	r4, r4, #8
    16dc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    16de:	4b0d      	ldr	r3, [pc, #52]	; (1714 <system_gclk_gen_get_hz+0x84>)
    16e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16e2:	2e00      	cmp	r6, #0
    16e4:	d107      	bne.n	16f6 <system_gclk_gen_get_hz+0x66>
    16e6:	2c01      	cmp	r4, #1
    16e8:	d907      	bls.n	16fa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16ea:	0021      	movs	r1, r4
    16ec:	0028      	movs	r0, r5
    16ee:	4b0a      	ldr	r3, [pc, #40]	; (1718 <system_gclk_gen_get_hz+0x88>)
    16f0:	4798      	blx	r3
    16f2:	0005      	movs	r5, r0
    16f4:	e001      	b.n	16fa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    16f6:	3401      	adds	r4, #1
    16f8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    16fa:	0028      	movs	r0, r5
    16fc:	bd70      	pop	{r4, r5, r6, pc}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	40000c00 	.word	0x40000c00
    1704:	00000181 	.word	0x00000181
    1708:	40000c04 	.word	0x40000c04
    170c:	00001175 	.word	0x00001175
    1710:	40000c08 	.word	0x40000c08
    1714:	000001c1 	.word	0x000001c1
    1718:	0000719d 	.word	0x0000719d

0000171c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    171c:	b510      	push	{r4, lr}
    171e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1720:	4b06      	ldr	r3, [pc, #24]	; (173c <system_gclk_chan_enable+0x20>)
    1722:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1724:	4b06      	ldr	r3, [pc, #24]	; (1740 <system_gclk_chan_enable+0x24>)
    1726:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1728:	4a06      	ldr	r2, [pc, #24]	; (1744 <system_gclk_chan_enable+0x28>)
    172a:	8853      	ldrh	r3, [r2, #2]
    172c:	2180      	movs	r1, #128	; 0x80
    172e:	01c9      	lsls	r1, r1, #7
    1730:	430b      	orrs	r3, r1
    1732:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1734:	4b04      	ldr	r3, [pc, #16]	; (1748 <system_gclk_chan_enable+0x2c>)
    1736:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1738:	bd10      	pop	{r4, pc}
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	00000181 	.word	0x00000181
    1740:	40000c02 	.word	0x40000c02
    1744:	40000c00 	.word	0x40000c00
    1748:	000001c1 	.word	0x000001c1

0000174c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    174c:	b510      	push	{r4, lr}
    174e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1750:	4b0f      	ldr	r3, [pc, #60]	; (1790 <system_gclk_chan_disable+0x44>)
    1752:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1754:	4b0f      	ldr	r3, [pc, #60]	; (1794 <system_gclk_chan_disable+0x48>)
    1756:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1758:	4a0f      	ldr	r2, [pc, #60]	; (1798 <system_gclk_chan_disable+0x4c>)
    175a:	8853      	ldrh	r3, [r2, #2]
    175c:	051b      	lsls	r3, r3, #20
    175e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1760:	8853      	ldrh	r3, [r2, #2]
    1762:	490e      	ldr	r1, [pc, #56]	; (179c <system_gclk_chan_disable+0x50>)
    1764:	400b      	ands	r3, r1
    1766:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1768:	8853      	ldrh	r3, [r2, #2]
    176a:	490d      	ldr	r1, [pc, #52]	; (17a0 <system_gclk_chan_disable+0x54>)
    176c:	400b      	ands	r3, r1
    176e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1770:	0011      	movs	r1, r2
    1772:	2280      	movs	r2, #128	; 0x80
    1774:	01d2      	lsls	r2, r2, #7
    1776:	884b      	ldrh	r3, [r1, #2]
    1778:	4213      	tst	r3, r2
    177a:	d1fc      	bne.n	1776 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    177c:	4906      	ldr	r1, [pc, #24]	; (1798 <system_gclk_chan_disable+0x4c>)
    177e:	884a      	ldrh	r2, [r1, #2]
    1780:	0203      	lsls	r3, r0, #8
    1782:	4806      	ldr	r0, [pc, #24]	; (179c <system_gclk_chan_disable+0x50>)
    1784:	4002      	ands	r2, r0
    1786:	4313      	orrs	r3, r2
    1788:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    178a:	4b06      	ldr	r3, [pc, #24]	; (17a4 <system_gclk_chan_disable+0x58>)
    178c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    178e:	bd10      	pop	{r4, pc}
    1790:	00000181 	.word	0x00000181
    1794:	40000c02 	.word	0x40000c02
    1798:	40000c00 	.word	0x40000c00
    179c:	fffff0ff 	.word	0xfffff0ff
    17a0:	ffffbfff 	.word	0xffffbfff
    17a4:	000001c1 	.word	0x000001c1

000017a8 <system_gclk_chan_set_config>:
{
    17a8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    17aa:	780c      	ldrb	r4, [r1, #0]
    17ac:	0224      	lsls	r4, r4, #8
    17ae:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    17b0:	4b02      	ldr	r3, [pc, #8]	; (17bc <system_gclk_chan_set_config+0x14>)
    17b2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    17b4:	b2a4      	uxth	r4, r4
    17b6:	4b02      	ldr	r3, [pc, #8]	; (17c0 <system_gclk_chan_set_config+0x18>)
    17b8:	805c      	strh	r4, [r3, #2]
}
    17ba:	bd10      	pop	{r4, pc}
    17bc:	0000174d 	.word	0x0000174d
    17c0:	40000c00 	.word	0x40000c00

000017c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    17c4:	b510      	push	{r4, lr}
    17c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    17c8:	4b06      	ldr	r3, [pc, #24]	; (17e4 <system_gclk_chan_get_hz+0x20>)
    17ca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    17cc:	4b06      	ldr	r3, [pc, #24]	; (17e8 <system_gclk_chan_get_hz+0x24>)
    17ce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    17d0:	4b06      	ldr	r3, [pc, #24]	; (17ec <system_gclk_chan_get_hz+0x28>)
    17d2:	885c      	ldrh	r4, [r3, #2]
    17d4:	0524      	lsls	r4, r4, #20
    17d6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    17d8:	4b05      	ldr	r3, [pc, #20]	; (17f0 <system_gclk_chan_get_hz+0x2c>)
    17da:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    17dc:	0020      	movs	r0, r4
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <system_gclk_chan_get_hz+0x30>)
    17e0:	4798      	blx	r3
}
    17e2:	bd10      	pop	{r4, pc}
    17e4:	00000181 	.word	0x00000181
    17e8:	40000c02 	.word	0x40000c02
    17ec:	40000c00 	.word	0x40000c00
    17f0:	000001c1 	.word	0x000001c1
    17f4:	00001691 	.word	0x00001691

000017f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17f8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17fa:	78d3      	ldrb	r3, [r2, #3]
    17fc:	2b00      	cmp	r3, #0
    17fe:	d135      	bne.n	186c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1800:	7813      	ldrb	r3, [r2, #0]
    1802:	2b80      	cmp	r3, #128	; 0x80
    1804:	d029      	beq.n	185a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1806:	061b      	lsls	r3, r3, #24
    1808:	2480      	movs	r4, #128	; 0x80
    180a:	0264      	lsls	r4, r4, #9
    180c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    180e:	7854      	ldrb	r4, [r2, #1]
    1810:	2502      	movs	r5, #2
    1812:	43ac      	bics	r4, r5
    1814:	d106      	bne.n	1824 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1816:	7894      	ldrb	r4, [r2, #2]
    1818:	2c00      	cmp	r4, #0
    181a:	d120      	bne.n	185e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    181c:	2480      	movs	r4, #128	; 0x80
    181e:	02a4      	lsls	r4, r4, #10
    1820:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1822:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1824:	7854      	ldrb	r4, [r2, #1]
    1826:	3c01      	subs	r4, #1
    1828:	2c01      	cmp	r4, #1
    182a:	d91c      	bls.n	1866 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    182c:	040d      	lsls	r5, r1, #16
    182e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1830:	24a0      	movs	r4, #160	; 0xa0
    1832:	05e4      	lsls	r4, r4, #23
    1834:	432c      	orrs	r4, r5
    1836:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1838:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    183a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    183c:	24d0      	movs	r4, #208	; 0xd0
    183e:	0624      	lsls	r4, r4, #24
    1840:	432c      	orrs	r4, r5
    1842:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1844:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1846:	78d4      	ldrb	r4, [r2, #3]
    1848:	2c00      	cmp	r4, #0
    184a:	d122      	bne.n	1892 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    184c:	035b      	lsls	r3, r3, #13
    184e:	d51c      	bpl.n	188a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1850:	7893      	ldrb	r3, [r2, #2]
    1852:	2b01      	cmp	r3, #1
    1854:	d01e      	beq.n	1894 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1856:	6141      	str	r1, [r0, #20]
    1858:	e017      	b.n	188a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    185a:	2300      	movs	r3, #0
    185c:	e7d7      	b.n	180e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    185e:	24c0      	movs	r4, #192	; 0xc0
    1860:	02e4      	lsls	r4, r4, #11
    1862:	4323      	orrs	r3, r4
    1864:	e7dd      	b.n	1822 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1866:	4c0d      	ldr	r4, [pc, #52]	; (189c <_system_pinmux_config+0xa4>)
    1868:	4023      	ands	r3, r4
    186a:	e7df      	b.n	182c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    186c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    186e:	040c      	lsls	r4, r1, #16
    1870:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1872:	23a0      	movs	r3, #160	; 0xa0
    1874:	05db      	lsls	r3, r3, #23
    1876:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1878:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    187a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    187c:	23d0      	movs	r3, #208	; 0xd0
    187e:	061b      	lsls	r3, r3, #24
    1880:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1882:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1884:	78d3      	ldrb	r3, [r2, #3]
    1886:	2b00      	cmp	r3, #0
    1888:	d103      	bne.n	1892 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    188a:	7853      	ldrb	r3, [r2, #1]
    188c:	3b01      	subs	r3, #1
    188e:	2b01      	cmp	r3, #1
    1890:	d902      	bls.n	1898 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1892:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1894:	6181      	str	r1, [r0, #24]
    1896:	e7f8      	b.n	188a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1898:	6081      	str	r1, [r0, #8]
}
    189a:	e7fa      	b.n	1892 <_system_pinmux_config+0x9a>
    189c:	fffbffff 	.word	0xfffbffff

000018a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    18a0:	b510      	push	{r4, lr}
    18a2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    18a4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    18a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    18a8:	2900      	cmp	r1, #0
    18aa:	d104      	bne.n	18b6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    18ac:	0943      	lsrs	r3, r0, #5
    18ae:	01db      	lsls	r3, r3, #7
    18b0:	4905      	ldr	r1, [pc, #20]	; (18c8 <system_pinmux_pin_set_config+0x28>)
    18b2:	468c      	mov	ip, r1
    18b4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    18b6:	241f      	movs	r4, #31
    18b8:	4020      	ands	r0, r4
    18ba:	2101      	movs	r1, #1
    18bc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    18be:	0018      	movs	r0, r3
    18c0:	4b02      	ldr	r3, [pc, #8]	; (18cc <system_pinmux_pin_set_config+0x2c>)
    18c2:	4798      	blx	r3
}
    18c4:	bd10      	pop	{r4, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	41004400 	.word	0x41004400
    18cc:	000017f9 	.word	0x000017f9

000018d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    18d0:	4770      	bx	lr
	...

000018d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    18d4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    18d6:	4b05      	ldr	r3, [pc, #20]	; (18ec <system_init+0x18>)
    18d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    18da:	4b05      	ldr	r3, [pc, #20]	; (18f0 <system_init+0x1c>)
    18dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    18de:	4b05      	ldr	r3, [pc, #20]	; (18f4 <system_init+0x20>)
    18e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18e2:	4b05      	ldr	r3, [pc, #20]	; (18f8 <system_init+0x24>)
    18e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18e6:	4b05      	ldr	r3, [pc, #20]	; (18fc <system_init+0x28>)
    18e8:	4798      	blx	r3
}
    18ea:	bd10      	pop	{r4, pc}
    18ec:	000013e9 	.word	0x000013e9
    18f0:	000001f1 	.word	0x000001f1
    18f4:	000018d1 	.word	0x000018d1
    18f8:	00000775 	.word	0x00000775
    18fc:	000018d1 	.word	0x000018d1

00001900 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1900:	1c93      	adds	r3, r2, #2
    1902:	009b      	lsls	r3, r3, #2
    1904:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1906:	2a02      	cmp	r2, #2
    1908:	d009      	beq.n	191e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    190a:	2a03      	cmp	r2, #3
    190c:	d00c      	beq.n	1928 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    190e:	2301      	movs	r3, #1
    1910:	4093      	lsls	r3, r2
    1912:	001a      	movs	r2, r3
    1914:	7e03      	ldrb	r3, [r0, #24]
    1916:	4313      	orrs	r3, r2
    1918:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    191a:	2000      	movs	r0, #0
    191c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    191e:	7e03      	ldrb	r3, [r0, #24]
    1920:	2210      	movs	r2, #16
    1922:	4313      	orrs	r3, r2
    1924:	7603      	strb	r3, [r0, #24]
    1926:	e7f8      	b.n	191a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1928:	7e03      	ldrb	r3, [r0, #24]
    192a:	2220      	movs	r2, #32
    192c:	4313      	orrs	r3, r2
    192e:	7603      	strb	r3, [r0, #24]
    1930:	e7f3      	b.n	191a <tc_register_callback+0x1a>
	...

00001934 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1934:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1936:	0080      	lsls	r0, r0, #2
    1938:	4b16      	ldr	r3, [pc, #88]	; (1994 <_tc_interrupt_handler+0x60>)
    193a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    193c:	6823      	ldr	r3, [r4, #0]
    193e:	7b9d      	ldrb	r5, [r3, #14]
    1940:	7e22      	ldrb	r2, [r4, #24]
    1942:	7e63      	ldrb	r3, [r4, #25]
    1944:	4013      	ands	r3, r2
    1946:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1948:	07eb      	lsls	r3, r5, #31
    194a:	d406      	bmi.n	195a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    194c:	07ab      	lsls	r3, r5, #30
    194e:	d40b      	bmi.n	1968 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1950:	06eb      	lsls	r3, r5, #27
    1952:	d410      	bmi.n	1976 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1954:	06ab      	lsls	r3, r5, #26
    1956:	d415      	bmi.n	1984 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1958:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    195a:	0020      	movs	r0, r4
    195c:	68a3      	ldr	r3, [r4, #8]
    195e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1960:	2301      	movs	r3, #1
    1962:	6822      	ldr	r2, [r4, #0]
    1964:	7393      	strb	r3, [r2, #14]
    1966:	e7f1      	b.n	194c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1968:	0020      	movs	r0, r4
    196a:	68e3      	ldr	r3, [r4, #12]
    196c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    196e:	2302      	movs	r3, #2
    1970:	6822      	ldr	r2, [r4, #0]
    1972:	7393      	strb	r3, [r2, #14]
    1974:	e7ec      	b.n	1950 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1976:	0020      	movs	r0, r4
    1978:	6923      	ldr	r3, [r4, #16]
    197a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    197c:	2310      	movs	r3, #16
    197e:	6822      	ldr	r2, [r4, #0]
    1980:	7393      	strb	r3, [r2, #14]
    1982:	e7e7      	b.n	1954 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1984:	0020      	movs	r0, r4
    1986:	6963      	ldr	r3, [r4, #20]
    1988:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    198a:	6823      	ldr	r3, [r4, #0]
    198c:	2220      	movs	r2, #32
    198e:	739a      	strb	r2, [r3, #14]
}
    1990:	e7e2      	b.n	1958 <_tc_interrupt_handler+0x24>
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	20000314 	.word	0x20000314

00001998 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1998:	b510      	push	{r4, lr}
    199a:	2000      	movs	r0, #0
    199c:	4b01      	ldr	r3, [pc, #4]	; (19a4 <TC3_Handler+0xc>)
    199e:	4798      	blx	r3
    19a0:	bd10      	pop	{r4, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	00001935 	.word	0x00001935

000019a8 <TC4_Handler>:
    19a8:	b510      	push	{r4, lr}
    19aa:	2001      	movs	r0, #1
    19ac:	4b01      	ldr	r3, [pc, #4]	; (19b4 <TC4_Handler+0xc>)
    19ae:	4798      	blx	r3
    19b0:	bd10      	pop	{r4, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	00001935 	.word	0x00001935

000019b8 <TC5_Handler>:
    19b8:	b510      	push	{r4, lr}
    19ba:	2002      	movs	r0, #2
    19bc:	4b01      	ldr	r3, [pc, #4]	; (19c4 <TC5_Handler+0xc>)
    19be:	4798      	blx	r3
    19c0:	bd10      	pop	{r4, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	00001935 	.word	0x00001935

000019c8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    19c8:	b530      	push	{r4, r5, lr}
    19ca:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    19cc:	aa01      	add	r2, sp, #4
    19ce:	4b0b      	ldr	r3, [pc, #44]	; (19fc <_tc_get_inst_index+0x34>)
    19d0:	cb32      	ldmia	r3!, {r1, r4, r5}
    19d2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    19d4:	9b01      	ldr	r3, [sp, #4]
    19d6:	4298      	cmp	r0, r3
    19d8:	d00d      	beq.n	19f6 <_tc_get_inst_index+0x2e>
    19da:	9b02      	ldr	r3, [sp, #8]
    19dc:	4298      	cmp	r0, r3
    19de:	d008      	beq.n	19f2 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    19e0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    19e2:	9a03      	ldr	r2, [sp, #12]
    19e4:	4282      	cmp	r2, r0
    19e6:	d002      	beq.n	19ee <_tc_get_inst_index+0x26>
}
    19e8:	0018      	movs	r0, r3
    19ea:	b005      	add	sp, #20
    19ec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    19ee:	3302      	adds	r3, #2
    19f0:	e002      	b.n	19f8 <_tc_get_inst_index+0x30>
    19f2:	2301      	movs	r3, #1
    19f4:	e000      	b.n	19f8 <_tc_get_inst_index+0x30>
    19f6:	2300      	movs	r3, #0
			return i;
    19f8:	b2db      	uxtb	r3, r3
    19fa:	e7f5      	b.n	19e8 <_tc_get_inst_index+0x20>
    19fc:	00007ec4 	.word	0x00007ec4

00001a00 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a02:	b087      	sub	sp, #28
    1a04:	0004      	movs	r4, r0
    1a06:	000d      	movs	r5, r1
    1a08:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1a0a:	0008      	movs	r0, r1
    1a0c:	4b85      	ldr	r3, [pc, #532]	; (1c24 <tc_init+0x224>)
    1a0e:	4798      	blx	r3
    1a10:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1a12:	ab05      	add	r3, sp, #20
    1a14:	221b      	movs	r2, #27
    1a16:	701a      	strb	r2, [r3, #0]
    1a18:	3201      	adds	r2, #1
    1a1a:	705a      	strb	r2, [r3, #1]
    1a1c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1a1e:	ab03      	add	r3, sp, #12
    1a20:	2280      	movs	r2, #128	; 0x80
    1a22:	0112      	lsls	r2, r2, #4
    1a24:	801a      	strh	r2, [r3, #0]
    1a26:	2280      	movs	r2, #128	; 0x80
    1a28:	0152      	lsls	r2, r2, #5
    1a2a:	805a      	strh	r2, [r3, #2]
    1a2c:	2280      	movs	r2, #128	; 0x80
    1a2e:	0192      	lsls	r2, r2, #6
    1a30:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1a32:	2300      	movs	r3, #0
    1a34:	60a3      	str	r3, [r4, #8]
    1a36:	60e3      	str	r3, [r4, #12]
    1a38:	6123      	str	r3, [r4, #16]
    1a3a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1a3c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1a3e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1a40:	0082      	lsls	r2, r0, #2
    1a42:	4b79      	ldr	r3, [pc, #484]	; (1c28 <tc_init+0x228>)
    1a44:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1a46:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1a48:	78b3      	ldrb	r3, [r6, #2]
    1a4a:	2b08      	cmp	r3, #8
    1a4c:	d006      	beq.n	1a5c <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1a4e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1a50:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1a52:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1a54:	07db      	lsls	r3, r3, #31
    1a56:	d505      	bpl.n	1a64 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1a58:	b007      	add	sp, #28
    1a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1a5c:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1a5e:	07fa      	lsls	r2, r7, #31
    1a60:	d5fa      	bpl.n	1a58 <tc_init+0x58>
    1a62:	e7f4      	b.n	1a4e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1a64:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1a66:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1a68:	06db      	lsls	r3, r3, #27
    1a6a:	d4f5      	bmi.n	1a58 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1a6c:	882b      	ldrh	r3, [r5, #0]
    1a6e:	079b      	lsls	r3, r3, #30
    1a70:	d4f2      	bmi.n	1a58 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1a72:	7c33      	ldrb	r3, [r6, #16]
    1a74:	2b00      	cmp	r3, #0
    1a76:	d179      	bne.n	1b6c <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    1a78:	7f33      	ldrb	r3, [r6, #28]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d000      	beq.n	1a80 <tc_init+0x80>
    1a7e:	e081      	b.n	1b84 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    1a80:	496a      	ldr	r1, [pc, #424]	; (1c2c <tc_init+0x22c>)
    1a82:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1a84:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1a86:	ab03      	add	r3, sp, #12
    1a88:	5ad3      	ldrh	r3, [r2, r3]
    1a8a:	4303      	orrs	r3, r0
    1a8c:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1a8e:	78b3      	ldrb	r3, [r6, #2]
    1a90:	2b08      	cmp	r3, #8
    1a92:	d100      	bne.n	1a96 <tc_init+0x96>
    1a94:	e086      	b.n	1ba4 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    1a96:	a901      	add	r1, sp, #4
    1a98:	7833      	ldrb	r3, [r6, #0]
    1a9a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1a9c:	ab05      	add	r3, sp, #20
    1a9e:	5ddf      	ldrb	r7, [r3, r7]
    1aa0:	0038      	movs	r0, r7
    1aa2:	4b63      	ldr	r3, [pc, #396]	; (1c30 <tc_init+0x230>)
    1aa4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1aa6:	0038      	movs	r0, r7
    1aa8:	4b62      	ldr	r3, [pc, #392]	; (1c34 <tc_init+0x234>)
    1aaa:	4798      	blx	r3
	ctrla_tmp =
    1aac:	8931      	ldrh	r1, [r6, #8]
    1aae:	88b3      	ldrh	r3, [r6, #4]
    1ab0:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1ab2:	78b1      	ldrb	r1, [r6, #2]
    1ab4:	79b2      	ldrb	r2, [r6, #6]
    1ab6:	4311      	orrs	r1, r2
	ctrla_tmp =
    1ab8:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1aba:	7873      	ldrb	r3, [r6, #1]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d002      	beq.n	1ac6 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1ac0:	2380      	movs	r3, #128	; 0x80
    1ac2:	011b      	lsls	r3, r3, #4
    1ac4:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ac6:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ac8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1aca:	b25b      	sxtb	r3, r3
    1acc:	2b00      	cmp	r3, #0
    1ace:	dbfb      	blt.n	1ac8 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1ad0:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1ad2:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1ad4:	1e4b      	subs	r3, r1, #1
    1ad6:	4199      	sbcs	r1, r3
    1ad8:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1ada:	7bb3      	ldrb	r3, [r6, #14]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d001      	beq.n	1ae4 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1ae0:	2301      	movs	r3, #1
    1ae2:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ae4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ae6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1ae8:	b25b      	sxtb	r3, r3
    1aea:	2b00      	cmp	r3, #0
    1aec:	dbfb      	blt.n	1ae6 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1aee:	23ff      	movs	r3, #255	; 0xff
    1af0:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1af2:	2900      	cmp	r1, #0
    1af4:	d005      	beq.n	1b02 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1af6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1af8:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1afa:	b25b      	sxtb	r3, r3
    1afc:	2b00      	cmp	r3, #0
    1afe:	dbfb      	blt.n	1af8 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1b00:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1b02:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1b04:	7af3      	ldrb	r3, [r6, #11]
    1b06:	2b00      	cmp	r3, #0
    1b08:	d001      	beq.n	1b0e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1b0a:	2310      	movs	r3, #16
    1b0c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1b0e:	7b33      	ldrb	r3, [r6, #12]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d001      	beq.n	1b18 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1b14:	2320      	movs	r3, #32
    1b16:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b18:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b1a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1b1c:	b25b      	sxtb	r3, r3
    1b1e:	2b00      	cmp	r3, #0
    1b20:	dbfb      	blt.n	1b1a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1b22:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b24:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b26:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1b28:	b25b      	sxtb	r3, r3
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	dbfb      	blt.n	1b26 <tc_init+0x126>
	switch (module_inst->counter_size) {
    1b2e:	7923      	ldrb	r3, [r4, #4]
    1b30:	2b04      	cmp	r3, #4
    1b32:	d03f      	beq.n	1bb4 <tc_init+0x1b4>
    1b34:	2b08      	cmp	r3, #8
    1b36:	d05e      	beq.n	1bf6 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1b38:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d000      	beq.n	1b40 <tc_init+0x140>
    1b3e:	e78b      	b.n	1a58 <tc_init+0x58>
    1b40:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b42:	b25b      	sxtb	r3, r3
    1b44:	2b00      	cmp	r3, #0
    1b46:	dbfb      	blt.n	1b40 <tc_init+0x140>
				= config->counter_16_bit.value;
    1b48:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1b4a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b4c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b4e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b50:	b25b      	sxtb	r3, r3
    1b52:	2b00      	cmp	r3, #0
    1b54:	dbfb      	blt.n	1b4e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1b56:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1b58:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b5a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b5c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b5e:	b25b      	sxtb	r3, r3
    1b60:	2b00      	cmp	r3, #0
    1b62:	dbfb      	blt.n	1b5c <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1b64:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1b66:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1b68:	2000      	movs	r0, #0
    1b6a:	e775      	b.n	1a58 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b6c:	a902      	add	r1, sp, #8
    1b6e:	2301      	movs	r3, #1
    1b70:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1b72:	2200      	movs	r2, #0
    1b74:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1b76:	7e32      	ldrb	r2, [r6, #24]
    1b78:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b7a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1b7c:	7d30      	ldrb	r0, [r6, #20]
    1b7e:	4b2e      	ldr	r3, [pc, #184]	; (1c38 <tc_init+0x238>)
    1b80:	4798      	blx	r3
    1b82:	e779      	b.n	1a78 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b84:	a902      	add	r1, sp, #8
    1b86:	2301      	movs	r3, #1
    1b88:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1b8a:	2200      	movs	r2, #0
    1b8c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1b8e:	3224      	adds	r2, #36	; 0x24
    1b90:	18b2      	adds	r2, r6, r2
    1b92:	7812      	ldrb	r2, [r2, #0]
    1b94:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b96:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1b98:	331f      	adds	r3, #31
    1b9a:	18f3      	adds	r3, r6, r3
    1b9c:	7818      	ldrb	r0, [r3, #0]
    1b9e:	4b26      	ldr	r3, [pc, #152]	; (1c38 <tc_init+0x238>)
    1ba0:	4798      	blx	r3
    1ba2:	e76d      	b.n	1a80 <tc_init+0x80>
    1ba4:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1ba6:	1c7a      	adds	r2, r7, #1
    1ba8:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1baa:	ab03      	add	r3, sp, #12
    1bac:	5ad3      	ldrh	r3, [r2, r3]
    1bae:	4303      	orrs	r3, r0
    1bb0:	620b      	str	r3, [r1, #32]
    1bb2:	e770      	b.n	1a96 <tc_init+0x96>
    1bb4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1bb6:	b25b      	sxtb	r3, r3
    1bb8:	2b00      	cmp	r3, #0
    1bba:	dbfb      	blt.n	1bb4 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1bbc:	2328      	movs	r3, #40	; 0x28
    1bbe:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1bc0:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bc2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bc4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1bc6:	b25b      	sxtb	r3, r3
    1bc8:	2b00      	cmp	r3, #0
    1bca:	dbfb      	blt.n	1bc4 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1bcc:	2329      	movs	r3, #41	; 0x29
    1bce:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1bd0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bd2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bd4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1bd6:	b25b      	sxtb	r3, r3
    1bd8:	2b00      	cmp	r3, #0
    1bda:	dbfb      	blt.n	1bd4 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1bdc:	232a      	movs	r3, #42	; 0x2a
    1bde:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1be0:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1be2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1be4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1be6:	b25b      	sxtb	r3, r3
    1be8:	2b00      	cmp	r3, #0
    1bea:	dbfb      	blt.n	1be4 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1bec:	232b      	movs	r3, #43	; 0x2b
    1bee:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1bf0:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1bf2:	2000      	movs	r0, #0
    1bf4:	e730      	b.n	1a58 <tc_init+0x58>
    1bf6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1bf8:	b25b      	sxtb	r3, r3
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	dbfb      	blt.n	1bf6 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1bfe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1c00:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c02:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c04:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1c06:	b25b      	sxtb	r3, r3
    1c08:	2b00      	cmp	r3, #0
    1c0a:	dbfb      	blt.n	1c04 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1c0c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1c0e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c10:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c12:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1c14:	b25b      	sxtb	r3, r3
    1c16:	2b00      	cmp	r3, #0
    1c18:	dbfb      	blt.n	1c12 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1c1a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1c1c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1c1e:	2000      	movs	r0, #0
    1c20:	e71a      	b.n	1a58 <tc_init+0x58>
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	000019c9 	.word	0x000019c9
    1c28:	20000314 	.word	0x20000314
    1c2c:	40000400 	.word	0x40000400
    1c30:	000017a9 	.word	0x000017a9
    1c34:	0000171d 	.word	0x0000171d
    1c38:	000018a1 	.word	0x000018a1

00001c3c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1c3c:	6802      	ldr	r2, [r0, #0]
    1c3e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1c40:	b25b      	sxtb	r3, r3
    1c42:	2b00      	cmp	r3, #0
    1c44:	dbfb      	blt.n	1c3e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1c46:	7903      	ldrb	r3, [r0, #4]
    1c48:	2b04      	cmp	r3, #4
    1c4a:	d005      	beq.n	1c58 <tc_get_count_value+0x1c>
    1c4c:	2b08      	cmp	r3, #8
    1c4e:	d009      	beq.n	1c64 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1c50:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1c52:	2b00      	cmp	r3, #0
    1c54:	d003      	beq.n	1c5e <tc_get_count_value+0x22>
}
    1c56:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1c58:	7c10      	ldrb	r0, [r2, #16]
    1c5a:	b2c0      	uxtb	r0, r0
    1c5c:	e7fb      	b.n	1c56 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1c5e:	8a10      	ldrh	r0, [r2, #16]
    1c60:	b280      	uxth	r0, r0
    1c62:	e7f8      	b.n	1c56 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    1c64:	6910      	ldr	r0, [r2, #16]
    1c66:	e7f6      	b.n	1c56 <tc_get_count_value+0x1a>

00001c68 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1c68:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1c6a:	6804      	ldr	r4, [r0, #0]
    1c6c:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1c6e:	b25b      	sxtb	r3, r3
    1c70:	2b00      	cmp	r3, #0
    1c72:	dbfb      	blt.n	1c6c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1c74:	7903      	ldrb	r3, [r0, #4]
    1c76:	2b04      	cmp	r3, #4
    1c78:	d005      	beq.n	1c86 <tc_set_compare_value+0x1e>
    1c7a:	2b08      	cmp	r3, #8
    1c7c:	d014      	beq.n	1ca8 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1c7e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1c80:	2b00      	cmp	r3, #0
    1c82:	d008      	beq.n	1c96 <tc_set_compare_value+0x2e>
}
    1c84:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1c86:	2017      	movs	r0, #23
			if (channel_index <
    1c88:	2901      	cmp	r1, #1
    1c8a:	d8fb      	bhi.n	1c84 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    1c8c:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1c8e:	1861      	adds	r1, r4, r1
    1c90:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1c92:	2000      	movs	r0, #0
    1c94:	e7f6      	b.n	1c84 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1c96:	2017      	movs	r0, #23
			if (channel_index <
    1c98:	2901      	cmp	r1, #1
    1c9a:	d8f3      	bhi.n	1c84 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    1c9c:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1c9e:	310c      	adds	r1, #12
    1ca0:	0049      	lsls	r1, r1, #1
    1ca2:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    1ca4:	2000      	movs	r0, #0
    1ca6:	e7ed      	b.n	1c84 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1ca8:	2017      	movs	r0, #23
			if (channel_index <
    1caa:	2901      	cmp	r1, #1
    1cac:	d8ea      	bhi.n	1c84 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    1cae:	3106      	adds	r1, #6
    1cb0:	0089      	lsls	r1, r1, #2
    1cb2:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    1cb4:	2000      	movs	r0, #0
    1cb6:	e7e5      	b.n	1c84 <tc_set_compare_value+0x1c>

00001cb8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1cb8:	e7fe      	b.n	1cb8 <Dummy_Handler>
	...

00001cbc <Reset_Handler>:
{
    1cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1cbe:	4a2a      	ldr	r2, [pc, #168]	; (1d68 <Reset_Handler+0xac>)
    1cc0:	4b2a      	ldr	r3, [pc, #168]	; (1d6c <Reset_Handler+0xb0>)
    1cc2:	429a      	cmp	r2, r3
    1cc4:	d011      	beq.n	1cea <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1cc6:	001a      	movs	r2, r3
    1cc8:	4b29      	ldr	r3, [pc, #164]	; (1d70 <Reset_Handler+0xb4>)
    1cca:	429a      	cmp	r2, r3
    1ccc:	d20d      	bcs.n	1cea <Reset_Handler+0x2e>
    1cce:	4a29      	ldr	r2, [pc, #164]	; (1d74 <Reset_Handler+0xb8>)
    1cd0:	3303      	adds	r3, #3
    1cd2:	1a9b      	subs	r3, r3, r2
    1cd4:	089b      	lsrs	r3, r3, #2
    1cd6:	3301      	adds	r3, #1
    1cd8:	009b      	lsls	r3, r3, #2
    1cda:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1cdc:	4823      	ldr	r0, [pc, #140]	; (1d6c <Reset_Handler+0xb0>)
    1cde:	4922      	ldr	r1, [pc, #136]	; (1d68 <Reset_Handler+0xac>)
    1ce0:	588c      	ldr	r4, [r1, r2]
    1ce2:	5084      	str	r4, [r0, r2]
    1ce4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1ce6:	429a      	cmp	r2, r3
    1ce8:	d1fa      	bne.n	1ce0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1cea:	4a23      	ldr	r2, [pc, #140]	; (1d78 <Reset_Handler+0xbc>)
    1cec:	4b23      	ldr	r3, [pc, #140]	; (1d7c <Reset_Handler+0xc0>)
    1cee:	429a      	cmp	r2, r3
    1cf0:	d20a      	bcs.n	1d08 <Reset_Handler+0x4c>
    1cf2:	43d3      	mvns	r3, r2
    1cf4:	4921      	ldr	r1, [pc, #132]	; (1d7c <Reset_Handler+0xc0>)
    1cf6:	185b      	adds	r3, r3, r1
    1cf8:	2103      	movs	r1, #3
    1cfa:	438b      	bics	r3, r1
    1cfc:	3304      	adds	r3, #4
    1cfe:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1d00:	2100      	movs	r1, #0
    1d02:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1d04:	4293      	cmp	r3, r2
    1d06:	d1fc      	bne.n	1d02 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d08:	4a1d      	ldr	r2, [pc, #116]	; (1d80 <Reset_Handler+0xc4>)
    1d0a:	21ff      	movs	r1, #255	; 0xff
    1d0c:	4b1d      	ldr	r3, [pc, #116]	; (1d84 <Reset_Handler+0xc8>)
    1d0e:	438b      	bics	r3, r1
    1d10:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1d12:	39fd      	subs	r1, #253	; 0xfd
    1d14:	2390      	movs	r3, #144	; 0x90
    1d16:	005b      	lsls	r3, r3, #1
    1d18:	4a1b      	ldr	r2, [pc, #108]	; (1d88 <Reset_Handler+0xcc>)
    1d1a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1d1c:	4a1b      	ldr	r2, [pc, #108]	; (1d8c <Reset_Handler+0xd0>)
    1d1e:	78d3      	ldrb	r3, [r2, #3]
    1d20:	2503      	movs	r5, #3
    1d22:	43ab      	bics	r3, r5
    1d24:	2402      	movs	r4, #2
    1d26:	4323      	orrs	r3, r4
    1d28:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1d2a:	78d3      	ldrb	r3, [r2, #3]
    1d2c:	270c      	movs	r7, #12
    1d2e:	43bb      	bics	r3, r7
    1d30:	2608      	movs	r6, #8
    1d32:	4333      	orrs	r3, r6
    1d34:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1d36:	4b16      	ldr	r3, [pc, #88]	; (1d90 <Reset_Handler+0xd4>)
    1d38:	7b98      	ldrb	r0, [r3, #14]
    1d3a:	2230      	movs	r2, #48	; 0x30
    1d3c:	4390      	bics	r0, r2
    1d3e:	2220      	movs	r2, #32
    1d40:	4310      	orrs	r0, r2
    1d42:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1d44:	7b99      	ldrb	r1, [r3, #14]
    1d46:	43b9      	bics	r1, r7
    1d48:	4331      	orrs	r1, r6
    1d4a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1d4c:	7b9a      	ldrb	r2, [r3, #14]
    1d4e:	43aa      	bics	r2, r5
    1d50:	4322      	orrs	r2, r4
    1d52:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1d54:	4a0f      	ldr	r2, [pc, #60]	; (1d94 <Reset_Handler+0xd8>)
    1d56:	6853      	ldr	r3, [r2, #4]
    1d58:	2180      	movs	r1, #128	; 0x80
    1d5a:	430b      	orrs	r3, r1
    1d5c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1d5e:	4b0e      	ldr	r3, [pc, #56]	; (1d98 <Reset_Handler+0xdc>)
    1d60:	4798      	blx	r3
        main();
    1d62:	4b0e      	ldr	r3, [pc, #56]	; (1d9c <Reset_Handler+0xe0>)
    1d64:	4798      	blx	r3
    1d66:	e7fe      	b.n	1d66 <Reset_Handler+0xaa>
    1d68:	00007fbc 	.word	0x00007fbc
    1d6c:	20000000 	.word	0x20000000
    1d70:	200000bc 	.word	0x200000bc
    1d74:	20000004 	.word	0x20000004
    1d78:	200000c0 	.word	0x200000c0
    1d7c:	20001334 	.word	0x20001334
    1d80:	e000ed00 	.word	0xe000ed00
    1d84:	00000000 	.word	0x00000000
    1d88:	41007000 	.word	0x41007000
    1d8c:	41005000 	.word	0x41005000
    1d90:	41004800 	.word	0x41004800
    1d94:	41004000 	.word	0x41004000
    1d98:	00007489 	.word	0x00007489
    1d9c:	00004005 	.word	0x00004005

00001da0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1da0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1da2:	4a06      	ldr	r2, [pc, #24]	; (1dbc <_sbrk+0x1c>)
    1da4:	6812      	ldr	r2, [r2, #0]
    1da6:	2a00      	cmp	r2, #0
    1da8:	d004      	beq.n	1db4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1daa:	4a04      	ldr	r2, [pc, #16]	; (1dbc <_sbrk+0x1c>)
    1dac:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1dae:	18c3      	adds	r3, r0, r3
    1db0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1db2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1db4:	4902      	ldr	r1, [pc, #8]	; (1dc0 <_sbrk+0x20>)
    1db6:	4a01      	ldr	r2, [pc, #4]	; (1dbc <_sbrk+0x1c>)
    1db8:	6011      	str	r1, [r2, #0]
    1dba:	e7f6      	b.n	1daa <_sbrk+0xa>
    1dbc:	20000118 	.word	0x20000118
    1dc0:	20003338 	.word	0x20003338

00001dc4 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    1dc4:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    1dc6:	7802      	ldrb	r2, [r0, #0]
    1dc8:	4b08      	ldr	r3, [pc, #32]	; (1dec <MiMAC_SetAltAddress+0x28>)
    1dca:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    1dcc:	7842      	ldrb	r2, [r0, #1]
    1dce:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    1dd0:	780a      	ldrb	r2, [r1, #0]
    1dd2:	4c07      	ldr	r4, [pc, #28]	; (1df0 <MiMAC_SetAltAddress+0x2c>)
    1dd4:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    1dd6:	784a      	ldrb	r2, [r1, #1]
    1dd8:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    1dda:	8818      	ldrh	r0, [r3, #0]
    1ddc:	4b05      	ldr	r3, [pc, #20]	; (1df4 <MiMAC_SetAltAddress+0x30>)
    1dde:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    1de0:	8820      	ldrh	r0, [r4, #0]
    1de2:	4b05      	ldr	r3, [pc, #20]	; (1df8 <MiMAC_SetAltAddress+0x34>)
    1de4:	4798      	blx	r3
	return true;
}
    1de6:	2001      	movs	r0, #1
    1de8:	bd10      	pop	{r4, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	20000324 	.word	0x20000324
    1df0:	2000033c 	.word	0x2000033c
    1df4:	000026cd 	.word	0x000026cd
    1df8:	000026ad 	.word	0x000026ad

00001dfc <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    1dfc:	b510      	push	{r4, lr}
    switch(id)
    1dfe:	2800      	cmp	r0, #0
    1e00:	d109      	bne.n	1e16 <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    1e02:	780b      	ldrb	r3, [r1, #0]
    1e04:	2b1a      	cmp	r3, #26
    1e06:	d807      	bhi.n	1e18 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    1e08:	4a04      	ldr	r2, [pc, #16]	; (1e1c <MiMAC_Set+0x20>)
    1e0a:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    1e0c:	0018      	movs	r0, r3
    1e0e:	4b04      	ldr	r3, [pc, #16]	; (1e20 <MiMAC_Set+0x24>)
    1e10:	4798      	blx	r3
          return true;
    1e12:	2001      	movs	r0, #1
    1e14:	e000      	b.n	1e18 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    1e16:	2000      	movs	r0, #0
}
    1e18:	bd10      	pop	{r4, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	2000033e 	.word	0x2000033e
    1e20:	00002689 	.word	0x00002689

00001e24 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    1e24:	b530      	push	{r4, r5, lr}
    1e26:	b083      	sub	sp, #12
    1e28:	466c      	mov	r4, sp
    1e2a:	9000      	str	r0, [sp, #0]
    1e2c:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    1e2e:	4b10      	ldr	r3, [pc, #64]	; (1e70 <MiMAC_Init+0x4c>)
    1e30:	4798      	blx	r3
	MACInitParams = initValue;
    1e32:	4d10      	ldr	r5, [pc, #64]	; (1e74 <MiMAC_Init+0x50>)
    1e34:	002b      	movs	r3, r5
    1e36:	cc06      	ldmia	r4!, {r1, r2}
    1e38:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    1e3a:	4b0f      	ldr	r3, [pc, #60]	; (1e78 <MiMAC_Init+0x54>)
    1e3c:	4798      	blx	r3
    1e3e:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    1e40:	2001      	movs	r0, #1
    1e42:	4b0e      	ldr	r3, [pc, #56]	; (1e7c <MiMAC_Init+0x58>)
    1e44:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    1e46:	4b0e      	ldr	r3, [pc, #56]	; (1e80 <MiMAC_Init+0x5c>)
    1e48:	701c      	strb	r4, [r3, #0]

	MACCurrentChannel = 11;
    1e4a:	220b      	movs	r2, #11
    1e4c:	4b0d      	ldr	r3, [pc, #52]	; (1e84 <MiMAC_Init+0x60>)
    1e4e:	701a      	strb	r2, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    1e50:	6868      	ldr	r0, [r5, #4]
    1e52:	4b0d      	ldr	r3, [pc, #52]	; (1e88 <MiMAC_Init+0x64>)
    1e54:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    1e56:	4b0d      	ldr	r3, [pc, #52]	; (1e8c <MiMAC_Init+0x68>)
    1e58:	2200      	movs	r2, #0
    1e5a:	701a      	strb	r2, [r3, #0]
    1e5c:	217f      	movs	r1, #127	; 0x7f
    1e5e:	545a      	strb	r2, [r3, r1]
    1e60:	317f      	adds	r1, #127	; 0x7f
    1e62:	545a      	strb	r2, [r3, r1]
    1e64:	217e      	movs	r1, #126	; 0x7e
    1e66:	31ff      	adds	r1, #255	; 0xff
    1e68:	545a      	strb	r2, [r3, r1]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    1e6a:	2001      	movs	r0, #1
    1e6c:	b003      	add	sp, #12
    1e6e:	bd30      	pop	{r4, r5, pc}
    1e70:	00002629 	.word	0x00002629
    1e74:	2000032c 	.word	0x2000032c
    1e78:	000025d9 	.word	0x000025d9
    1e7c:	00002675 	.word	0x00002675
    1e80:	20000320 	.word	0x20000320
    1e84:	2000033e 	.word	0x2000033e
    1e88:	0000271d 	.word	0x0000271d
    1e8c:	20000340 	.word	0x20000340

00001e90 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    1e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e92:	46de      	mov	lr, fp
    1e94:	4657      	mov	r7, sl
    1e96:	464e      	mov	r6, r9
    1e98:	4645      	mov	r5, r8
    1e9a:	b5e0      	push	{r5, r6, r7, lr}
    1e9c:	b0a5      	sub	sp, #148	; 0x94
    1e9e:	9001      	str	r0, [sp, #4]
    1ea0:	000e      	movs	r6, r1
    1ea2:	9102      	str	r1, [sp, #8]
    1ea4:	1c11      	adds	r1, r2, #0
    1ea6:	0014      	movs	r4, r2
    1ea8:	0a24      	lsrs	r4, r4, #8
    1eaa:	9203      	str	r2, [sp, #12]
    1eac:	9300      	str	r3, [sp, #0]
    1eae:	aa2e      	add	r2, sp, #184	; 0xb8
    1eb0:	7815      	ldrb	r5, [r2, #0]
    1eb2:	aa2f      	add	r2, sp, #188	; 0xbc
    1eb4:	7813      	ldrb	r3, [r2, #0]
    1eb6:	469b      	mov	fp, r3
    1eb8:	b2c7      	uxtb	r7, r0
    1eba:	06b8      	lsls	r0, r7, #26
    1ebc:	0fc3      	lsrs	r3, r0, #31
    1ebe:	4699      	mov	r9, r3
    1ec0:	b2c9      	uxtb	r1, r1
    1ec2:	b2e2      	uxtb	r2, r4
	uint8_t frameControl = 0;
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif

    if (transParam.flags.bits.broadcast)
    1ec4:	077b      	lsls	r3, r7, #29
    1ec6:	d500      	bpl.n	1eca <MiMAC_SendPacket+0x3a>
    {
        transParam.altDestAddr = true;
    1ec8:	2101      	movs	r1, #1
        transParam.altSrcAddr = false;
    }
   #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    1eca:	2303      	movs	r3, #3
    1ecc:	403b      	ands	r3, r7
    1ece:	2b01      	cmp	r3, #1
    1ed0:	d03b      	beq.n	1f4a <MiMAC_SendPacket+0xba>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    1ed2:	425c      	negs	r4, r3
    1ed4:	415c      	adcs	r4, r3
        frameControl = 0x03;
    1ed6:	b2e0      	uxtb	r0, r4
    1ed8:	4682      	mov	sl, r0
        frameControl = 0x01;
    }

    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1eda:	ac01      	add	r4, sp, #4
    1edc:	8964      	ldrh	r4, [r4, #10]
    1ede:	487b      	ldr	r0, [pc, #492]	; (20cc <STACK_SIZE+0xcc>)
    1ee0:	8800      	ldrh	r0, [r0, #0]
    1ee2:	42a0      	cmp	r0, r4
    1ee4:	d034      	beq.n	1f50 <MiMAC_SendPacket+0xc0>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    1ee6:	2400      	movs	r4, #0
        headerLength = 7;
    1ee8:	2007      	movs	r0, #7
    1eea:	4684      	mov	ip, r0
    }
#endif

    if (transParam.altDestAddr)
    1eec:	4688      	mov	r8, r1
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    1eee:	4661      	mov	r1, ip
    1ef0:	3108      	adds	r1, #8
    if (transParam.altDestAddr)
    1ef2:	4640      	mov	r0, r8
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d000      	beq.n	1efa <MiMAC_SendPacket+0x6a>
        headerLength += 2;
    1ef8:	3906      	subs	r1, #6
    }

    if (transParam.altSrcAddr)
    1efa:	2a00      	cmp	r2, #0
    1efc:	d037      	beq.n	1f6e <MiMAC_SendPacket+0xde>
    {
        headerLength += 2;
    1efe:	3102      	adds	r1, #2
    1f00:	b2c9      	uxtb	r1, r1
    1f02:	468c      	mov	ip, r1
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    1f04:	2124      	movs	r1, #36	; 0x24
    1f06:	4039      	ands	r1, r7
    1f08:	2920      	cmp	r1, #32
    1f0a:	d034      	beq.n	1f76 <MiMAC_SendPacket+0xe6>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    1f0c:	2b03      	cmp	r3, #3
    1f0e:	d036      	beq.n	1f7e <MiMAC_SendPacket+0xee>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    1f10:	a904      	add	r1, sp, #16
    1f12:	44ac      	add	ip, r5
    1f14:	4663      	mov	r3, ip
    1f16:	700b      	strb	r3, [r1, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    1f18:	4653      	mov	r3, sl
    1f1a:	704b      	strb	r3, [r1, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    1f1c:	a901      	add	r1, sp, #4
    1f1e:	464b      	mov	r3, r9
    1f20:	015b      	lsls	r3, r3, #5
    1f22:	469c      	mov	ip, r3
    1f24:	7808      	ldrb	r0, [r1, #0]
    1f26:	2320      	movs	r3, #32
    1f28:	4398      	bics	r0, r3
    1f2a:	4663      	mov	r3, ip
    1f2c:	4318      	orrs	r0, r3
    1f2e:	7008      	strb	r0, [r1, #0]
    1f30:	4684      	mov	ip, r0
    1f32:	43c1      	mvns	r1, r0
    1f34:	078b      	lsls	r3, r1, #30
    1f36:	d02a      	beq.n	1f8e <MiMAC_SendPacket+0xfe>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    1f38:	4643      	mov	r3, r8
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d049      	beq.n	1fd2 <MiMAC_SendPacket+0x142>
    1f3e:	2a00      	cmp	r2, #0
    1f40:	d02f      	beq.n	1fa2 <MiMAC_SendPacket+0x112>
        {
			packet[loc++] = 0x88;
    1f42:	2088      	movs	r0, #136	; 0x88
    1f44:	a904      	add	r1, sp, #16
    1f46:	7088      	strb	r0, [r1, #2]
    1f48:	e02e      	b.n	1fa8 <MiMAC_SendPacket+0x118>
        frameControl = 0x03;
    1f4a:	2003      	movs	r0, #3
    1f4c:	4682      	mov	sl, r0
    1f4e:	e7c4      	b.n	1eda <MiMAC_SendPacket+0x4a>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1f50:	485f      	ldr	r0, [pc, #380]	; (20d0 <STACK_SIZE+0xd0>)
    1f52:	4284      	cmp	r4, r0
    1f54:	d007      	beq.n	1f66 <MiMAC_SendPacket+0xd6>
        frameControl |= 0x40;
    1f56:	2440      	movs	r4, #64	; 0x40
    1f58:	4650      	mov	r0, sl
    1f5a:	4320      	orrs	r0, r4
    1f5c:	4682      	mov	sl, r0
        IntraPAN = true;
    1f5e:	3c3f      	subs	r4, #63	; 0x3f
        headerLength = 5;
    1f60:	2005      	movs	r0, #5
    1f62:	4684      	mov	ip, r0
        IntraPAN = true;
    1f64:	e7c2      	b.n	1eec <MiMAC_SendPacket+0x5c>
        IntraPAN = false;
    1f66:	2400      	movs	r4, #0
        headerLength = 7;
    1f68:	2007      	movs	r0, #7
    1f6a:	4684      	mov	ip, r0
    1f6c:	e7be      	b.n	1eec <MiMAC_SendPacket+0x5c>
        headerLength += 8;
    1f6e:	3108      	adds	r1, #8
    1f70:	b2c9      	uxtb	r1, r1
    1f72:	468c      	mov	ip, r1
    1f74:	e7c6      	b.n	1f04 <MiMAC_SendPacket+0x74>
        frameControl |= 0x20;
    1f76:	4650      	mov	r0, sl
    1f78:	4308      	orrs	r0, r1
    1f7a:	4682      	mov	sl, r0
    1f7c:	e7c6      	b.n	1f0c <MiMAC_SendPacket+0x7c>
        transParam.altSrcAddr = true;
    1f7e:	2201      	movs	r2, #1
        transParam.flags.bits.ackReq = false;
    1f80:	2300      	movs	r3, #0
    1f82:	4699      	mov	r9, r3
        IntraPAN = false;
    1f84:	2400      	movs	r4, #0
        frameControl = 0x00;
    1f86:	469a      	mov	sl, r3
        headerLength = 7;
    1f88:	3307      	adds	r3, #7
    1f8a:	469c      	mov	ip, r3
    1f8c:	e7c0      	b.n	1f10 <MiMAC_SendPacket+0x80>
		packet[loc++] = 0x80;
    1f8e:	a904      	add	r1, sp, #16
    1f90:	2080      	movs	r0, #128	; 0x80
    1f92:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    1f94:	4e4f      	ldr	r6, [pc, #316]	; (20d4 <STACK_SIZE+0xd4>)
    1f96:	7830      	ldrb	r0, [r6, #0]
    1f98:	1c43      	adds	r3, r0, #1
    1f9a:	7033      	strb	r3, [r6, #0]
    1f9c:	70c8      	strb	r0, [r1, #3]
    1f9e:	2104      	movs	r1, #4
    1fa0:	e02e      	b.n	2000 <STACK_SIZE>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    1fa2:	20c8      	movs	r0, #200	; 0xc8
    1fa4:	a904      	add	r1, sp, #16
    1fa6:	7088      	strb	r0, [r1, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    1fa8:	494a      	ldr	r1, [pc, #296]	; (20d4 <STACK_SIZE+0xd4>)
    1faa:	7808      	ldrb	r0, [r1, #0]
    1fac:	1c43      	adds	r3, r0, #1
    1fae:	700b      	strb	r3, [r1, #0]
    1fb0:	a904      	add	r1, sp, #16
    1fb2:	70c8      	strb	r0, [r1, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    1fb4:	a801      	add	r0, sp, #4
    1fb6:	7a83      	ldrb	r3, [r0, #10]
    1fb8:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    1fba:	7ac0      	ldrb	r0, [r0, #11]
    1fbc:	7148      	strb	r0, [r1, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    1fbe:	4663      	mov	r3, ip
    1fc0:	075b      	lsls	r3, r3, #29
    1fc2:	d418      	bmi.n	1ff6 <MiMAC_SendPacket+0x166>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    1fc4:	a904      	add	r1, sp, #16
    1fc6:	7830      	ldrb	r0, [r6, #0]
    1fc8:	7188      	strb	r0, [r1, #6]
				packet[loc++] = transParam.DestAddress[1];
    1fca:	7870      	ldrb	r0, [r6, #1]
    1fcc:	71c8      	strb	r0, [r1, #7]
    1fce:	2108      	movs	r1, #8
    1fd0:	e016      	b.n	2000 <STACK_SIZE>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    1fd2:	2a00      	cmp	r2, #0
    1fd4:	d05c      	beq.n	2090 <STACK_SIZE+0x90>
			packet[loc++] = 0x8C;
    1fd6:	a904      	add	r1, sp, #16
    1fd8:	208c      	movs	r0, #140	; 0x8c
    1fda:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    1fdc:	4b3d      	ldr	r3, [pc, #244]	; (20d4 <STACK_SIZE+0xd4>)
    1fde:	7818      	ldrb	r0, [r3, #0]
    1fe0:	1c47      	adds	r7, r0, #1
    1fe2:	701f      	strb	r7, [r3, #0]
    1fe4:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    1fe6:	ab01      	add	r3, sp, #4
    1fe8:	7a98      	ldrb	r0, [r3, #10]
    1fea:	7108      	strb	r0, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    1fec:	7ad8      	ldrb	r0, [r3, #11]
    1fee:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    1ff0:	4663      	mov	r3, ip
    1ff2:	075b      	lsls	r3, r3, #29
    1ff4:	d560      	bpl.n	20b8 <STACK_SIZE+0xb8>
			packet[loc++] = 0xFF;
    1ff6:	a904      	add	r1, sp, #16
    1ff8:	20ff      	movs	r0, #255	; 0xff
    1ffa:	7188      	strb	r0, [r1, #6]
			packet[loc++] = 0xFF;
    1ffc:	71c8      	strb	r0, [r1, #7]
    1ffe:	2108      	movs	r1, #8
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    2000:	2c00      	cmp	r4, #0
    2002:	d109      	bne.n	2018 <STACK_SIZE+0x18>
    {
		packet[loc++] = MAC_PANID.v[0];
    2004:	1c48      	adds	r0, r1, #1
    2006:	b2c0      	uxtb	r0, r0
    2008:	ac04      	add	r4, sp, #16
    200a:	4e30      	ldr	r6, [pc, #192]	; (20cc <STACK_SIZE+0xcc>)
    200c:	7833      	ldrb	r3, [r6, #0]
    200e:	5463      	strb	r3, [r4, r1]
		packet[loc++] = MAC_PANID.v[1];
    2010:	3102      	adds	r1, #2
    2012:	b2c9      	uxtb	r1, r1
    2014:	7876      	ldrb	r6, [r6, #1]
    2016:	5426      	strb	r6, [r4, r0]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    2018:	2a00      	cmp	r2, #0
    201a:	d02a      	beq.n	2072 <STACK_SIZE+0x72>
    {
		packet[loc++] = myNetworkAddress.v[0];
    201c:	a804      	add	r0, sp, #16
    201e:	4c2e      	ldr	r4, [pc, #184]	; (20d8 <STACK_SIZE+0xd8>)
    2020:	7822      	ldrb	r2, [r4, #0]
    2022:	5442      	strb	r2, [r0, r1]
		packet[loc++] = myNetworkAddress.v[1];
    2024:	1c8a      	adds	r2, r1, #2
    2026:	b2d2      	uxtb	r2, r2
		packet[loc++] = myNetworkAddress.v[0];
    2028:	3101      	adds	r1, #1
		packet[loc++] = myNetworkAddress.v[1];
    202a:	b2c9      	uxtb	r1, r1
    202c:	7864      	ldrb	r4, [r4, #1]
    202e:	5444      	strb	r4, [r0, r1]
#endif


#ifndef ENABLE_SECURITY
    // write the payload
    for (i = 0; i < MACPayloadLen; i++)
    2030:	2d00      	cmp	r5, #0
    2032:	d00a      	beq.n	204a <STACK_SIZE+0x4a>
    2034:	9900      	ldr	r1, [sp, #0]
    2036:	1955      	adds	r5, r2, r5
    2038:	b2ed      	uxtb	r5, r5
    {
		packet[loc++] = MACPayload[i];
    203a:	ae04      	add	r6, sp, #16
    203c:	1c50      	adds	r0, r2, #1
    203e:	780c      	ldrb	r4, [r1, #0]
    2040:	54b4      	strb	r4, [r6, r2]
    2042:	3101      	adds	r1, #1
    2044:	b2c2      	uxtb	r2, r0
    for (i = 0; i < MACPayloadLen; i++)
    2046:	4295      	cmp	r5, r2
    2048:	d1f8      	bne.n	203c <STACK_SIZE+0x3c>
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    204a:	4a24      	ldr	r2, [pc, #144]	; (20dc <STACK_SIZE+0xdc>)
    204c:	9b00      	ldr	r3, [sp, #0]
    204e:	6013      	str	r3, [r2, #0]
	dataConfCallback = ConfCallback;
    2050:	4b23      	ldr	r3, [pc, #140]	; (20e0 <STACK_SIZE+0xe0>)
    2052:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    2054:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    2056:	4b23      	ldr	r3, [pc, #140]	; (20e4 <STACK_SIZE+0xe4>)
    2058:	465a      	mov	r2, fp
    205a:	701a      	strb	r2, [r3, #0]

    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
    205c:	a804      	add	r0, sp, #16
    205e:	4b22      	ldr	r3, [pc, #136]	; (20e8 <STACK_SIZE+0xe8>)
    2060:	4798      	blx	r3
    return true;
}
    2062:	2001      	movs	r0, #1
    2064:	b025      	add	sp, #148	; 0x94
    2066:	bc3c      	pop	{r2, r3, r4, r5}
    2068:	4690      	mov	r8, r2
    206a:	4699      	mov	r9, r3
    206c:	46a2      	mov	sl, r4
    206e:	46ab      	mov	fp, r5
    2070:	bdf0      	pop	{r4, r5, r6, r7, pc}
			packet[loc++] = MACInitParams.PAddress[i];
    2072:	4a1e      	ldr	r2, [pc, #120]	; (20ec <STACK_SIZE+0xec>)
    2074:	6850      	ldr	r0, [r2, #4]
    2076:	000b      	movs	r3, r1
    2078:	3308      	adds	r3, #8
    207a:	b2db      	uxtb	r3, r3
    207c:	ae04      	add	r6, sp, #16
    207e:	1c4a      	adds	r2, r1, #1
    2080:	b2d2      	uxtb	r2, r2
    2082:	7804      	ldrb	r4, [r0, #0]
    2084:	5474      	strb	r4, [r6, r1]
    2086:	3001      	adds	r0, #1
    2088:	0011      	movs	r1, r2
        for (i = 0; i < 8; i++)
    208a:	429a      	cmp	r2, r3
    208c:	d1f7      	bne.n	207e <STACK_SIZE+0x7e>
    208e:	e7cf      	b.n	2030 <STACK_SIZE+0x30>
			packet[loc++] = 0xCC;
    2090:	a904      	add	r1, sp, #16
    2092:	20cc      	movs	r0, #204	; 0xcc
    2094:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    2096:	4b0f      	ldr	r3, [pc, #60]	; (20d4 <STACK_SIZE+0xd4>)
    2098:	4698      	mov	r8, r3
    209a:	7818      	ldrb	r0, [r3, #0]
    209c:	1c43      	adds	r3, r0, #1
    209e:	4699      	mov	r9, r3
    20a0:	4643      	mov	r3, r8
    20a2:	464f      	mov	r7, r9
    20a4:	701f      	strb	r7, [r3, #0]
    20a6:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    20a8:	a801      	add	r0, sp, #4
    20aa:	7a83      	ldrb	r3, [r0, #10]
    20ac:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    20ae:	7ac0      	ldrb	r0, [r0, #11]
    20b0:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    20b2:	4663      	mov	r3, ip
    20b4:	075b      	lsls	r3, r3, #29
    20b6:	d49e      	bmi.n	1ff6 <MiMAC_SendPacket+0x166>
        headerLength = 7;
    20b8:	2000      	movs	r0, #0
					packet[loc++] = transParam.DestAddress[i];
    20ba:	ab04      	add	r3, sp, #16
    20bc:	1819      	adds	r1, r3, r0
    20be:	5c33      	ldrb	r3, [r6, r0]
    20c0:	718b      	strb	r3, [r1, #6]
    20c2:	3001      	adds	r0, #1
                for (i = 0; i < 8; i++)
    20c4:	2808      	cmp	r0, #8
    20c6:	d1f8      	bne.n	20ba <STACK_SIZE+0xba>
					packet[loc++] = transParam.DestAddress[i];
    20c8:	210e      	movs	r1, #14
    20ca:	e799      	b.n	2000 <STACK_SIZE>
    20cc:	2000033c 	.word	0x2000033c
    20d0:	0000ffff 	.word	0x0000ffff
    20d4:	20000320 	.word	0x20000320
    20d8:	20000324 	.word	0x20000324
    20dc:	20000128 	.word	0x20000128
    20e0:	20000120 	.word	0x20000120
    20e4:	20000124 	.word	0x20000124
    20e8:	0000258d 	.word	0x0000258d
    20ec:	2000032c 	.word	0x2000032c

000020f0 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    20f0:	4b04      	ldr	r3, [pc, #16]	; (2104 <MiMAC_DiscardPacket+0x14>)
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	2b03      	cmp	r3, #3
    20f6:	d804      	bhi.n	2102 <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    20f8:	01da      	lsls	r2, r3, #7
    20fa:	1ad3      	subs	r3, r2, r3
    20fc:	2100      	movs	r1, #0
    20fe:	4a02      	ldr	r2, [pc, #8]	; (2108 <MiMAC_DiscardPacket+0x18>)
    2100:	5499      	strb	r1, [r3, r2]
	}
}
    2102:	4770      	bx	lr
    2104:	20000009 	.word	0x20000009
    2108:	20000340 	.word	0x20000340

0000210c <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    210c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	BankIndex = 0xFF;
    210e:	22ff      	movs	r2, #255	; 0xff
    2110:	4bcd      	ldr	r3, [pc, #820]	; (2448 <MiMAC_ReceivedPacket+0x33c>)
    2112:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    2114:	4bcd      	ldr	r3, [pc, #820]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2116:	781b      	ldrb	r3, [r3, #0]
    2118:	2b00      	cmp	r3, #0
    211a:	d000      	beq.n	211e <MiMAC_ReceivedPacket+0x12>
    211c:	e1bd      	b.n	249a <MiMAC_ReceivedPacket+0x38e>
    211e:	337f      	adds	r3, #127	; 0x7f
    2120:	4aca      	ldr	r2, [pc, #808]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2122:	5cd3      	ldrb	r3, [r2, r3]
    2124:	2b00      	cmp	r3, #0
    2126:	d10b      	bne.n	2140 <MiMAC_ReceivedPacket+0x34>
    2128:	33fe      	adds	r3, #254	; 0xfe
    212a:	5cd3      	ldrb	r3, [r2, r3]
    212c:	2b00      	cmp	r3, #0
    212e:	d12e      	bne.n	218e <MiMAC_ReceivedPacket+0x82>
    2130:	237e      	movs	r3, #126	; 0x7e
    2132:	33ff      	adds	r3, #255	; 0xff
    2134:	5cd3      	ldrb	r3, [r2, r3]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
		#endif

		return true;
	}
	return false;
    2136:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    2138:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    213a:	2b00      	cmp	r3, #0
    213c:	d101      	bne.n	2142 <MiMAC_ReceivedPacket+0x36>
}
    213e:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < BANK_SIZE; i++)
    2140:	2201      	movs	r2, #1
			BankIndex = i;
    2142:	4bc1      	ldr	r3, [pc, #772]	; (2448 <MiMAC_ReceivedPacket+0x33c>)
    2144:	701a      	strb	r2, [r3, #0]
	return false;
    2146:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    2148:	2a03      	cmp	r2, #3
    214a:	d8f8      	bhi.n	213e <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    214c:	0010      	movs	r0, r2
    214e:	01d1      	lsls	r1, r2, #7
    2150:	1a89      	subs	r1, r1, r2
    2152:	4bbe      	ldr	r3, [pc, #760]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2154:	185b      	adds	r3, r3, r1
    2156:	785d      	ldrb	r5, [r3, #1]
    2158:	2440      	movs	r4, #64	; 0x40
    215a:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    215c:	49bc      	ldr	r1, [pc, #752]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    215e:	2400      	movs	r4, #0
    2160:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    2162:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    2164:	789b      	ldrb	r3, [r3, #2]
    2166:	2133      	movs	r1, #51	; 0x33
    2168:	438b      	bics	r3, r1
		switch (addrMode)
    216a:	b2d9      	uxtb	r1, r3
    216c:	2988      	cmp	r1, #136	; 0x88
    216e:	d100      	bne.n	2172 <MiMAC_ReceivedPacket+0x66>
    2170:	e0c4      	b.n	22fc <MiMAC_ReceivedPacket+0x1f0>
    2172:	d90e      	bls.n	2192 <MiMAC_ReceivedPacket+0x86>
    2174:	b2d9      	uxtb	r1, r3
    2176:	29c8      	cmp	r1, #200	; 0xc8
    2178:	d046      	beq.n	2208 <MiMAC_ReceivedPacket+0xfc>
    217a:	29cc      	cmp	r1, #204	; 0xcc
    217c:	d100      	bne.n	2180 <MiMAC_ReceivedPacket+0x74>
    217e:	e08a      	b.n	2296 <MiMAC_ReceivedPacket+0x18a>
    2180:	298c      	cmp	r1, #140	; 0x8c
    2182:	d100      	bne.n	2186 <MiMAC_ReceivedPacket+0x7a>
    2184:	e104      	b.n	2390 <MiMAC_ReceivedPacket+0x284>
			MiMAC_DiscardPacket();
    2186:	4bb3      	ldr	r3, [pc, #716]	; (2454 <MiMAC_ReceivedPacket+0x348>)
    2188:	4798      	blx	r3
			return false;
    218a:	2000      	movs	r0, #0
    218c:	e7d7      	b.n	213e <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    218e:	2202      	movs	r2, #2
    2190:	e7d7      	b.n	2142 <MiMAC_ReceivedPacket+0x36>
		switch (addrMode)
    2192:	2b08      	cmp	r3, #8
    2194:	d100      	bne.n	2198 <MiMAC_ReceivedPacket+0x8c>
    2196:	e131      	b.n	23fc <MiMAC_ReceivedPacket+0x2f0>
    2198:	2980      	cmp	r1, #128	; 0x80
    219a:	d1f4      	bne.n	2186 <MiMAC_ReceivedPacket+0x7a>
				MACRxPacket.flags.bits.broadcast = 1;
    219c:	4bac      	ldr	r3, [pc, #688]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    219e:	7819      	ldrb	r1, [r3, #0]
    21a0:	2404      	movs	r4, #4
    21a2:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    21a4:	2480      	movs	r4, #128	; 0x80
    21a6:	4264      	negs	r4, r4
    21a8:	4321      	orrs	r1, r4
    21aa:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    21ac:	2101      	movs	r1, #1
    21ae:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    21b0:	4ca6      	ldr	r4, [pc, #664]	; (244c <MiMAC_ReceivedPacket+0x340>)
    21b2:	01d1      	lsls	r1, r2, #7
    21b4:	1a88      	subs	r0, r1, r2
    21b6:	1821      	adds	r1, r4, r0
    21b8:	790d      	ldrb	r5, [r1, #4]
    21ba:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    21bc:	7949      	ldrb	r1, [r1, #5]
    21be:	7459      	strb	r1, [r3, #17]
    21c0:	01d1      	lsls	r1, r2, #7
    21c2:	1a8a      	subs	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    21c4:	1d91      	adds	r1, r2, #6
    21c6:	1909      	adds	r1, r1, r4
    21c8:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    21ca:	5d01      	ldrb	r1, [r0, r4]
    21cc:	390b      	subs	r1, #11
    21ce:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    21d0:	3208      	adds	r2, #8
    21d2:	1912      	adds	r2, r2, r4
    21d4:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    21d6:	4b9c      	ldr	r3, [pc, #624]	; (2448 <MiMAC_ReceivedPacket+0x33c>)
    21d8:	781b      	ldrb	r3, [r3, #0]
    21da:	01d9      	lsls	r1, r3, #7
    21dc:	1ac9      	subs	r1, r1, r3
    21de:	4a9b      	ldr	r2, [pc, #620]	; (244c <MiMAC_ReceivedPacket+0x340>)
    21e0:	1852      	adds	r2, r2, r1
    21e2:	7851      	ldrb	r1, [r2, #1]
    21e4:	070a      	lsls	r2, r1, #28
    21e6:	d500      	bpl.n	21ea <MiMAC_ReceivedPacket+0xde>
    21e8:	e129      	b.n	243e <MiMAC_ReceivedPacket+0x332>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    21ea:	2207      	movs	r2, #7
    21ec:	400a      	ands	r2, r1
    21ee:	2a01      	cmp	r2, #1
    21f0:	d100      	bne.n	21f4 <MiMAC_ReceivedPacket+0xe8>
    21f2:	e131      	b.n	2458 <MiMAC_ReceivedPacket+0x34c>
    21f4:	2a00      	cmp	r2, #0
    21f6:	d100      	bne.n	21fa <MiMAC_ReceivedPacket+0xee>
    21f8:	e149      	b.n	248e <MiMAC_ReceivedPacket+0x382>
    21fa:	2a03      	cmp	r2, #3
    21fc:	d100      	bne.n	2200 <MiMAC_ReceivedPacket+0xf4>
    21fe:	e13e      	b.n	247e <MiMAC_ReceivedPacket+0x372>
			MiMAC_DiscardPacket();
    2200:	4b94      	ldr	r3, [pc, #592]	; (2454 <MiMAC_ReceivedPacket+0x348>)
    2202:	4798      	blx	r3
			return false;
    2204:	2000      	movs	r0, #0
    2206:	e79a      	b.n	213e <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2208:	01d1      	lsls	r1, r2, #7
    220a:	1a89      	subs	r1, r1, r2
    220c:	4b8f      	ldr	r3, [pc, #572]	; (244c <MiMAC_ReceivedPacket+0x340>)
    220e:	185b      	adds	r3, r3, r1
    2210:	799b      	ldrb	r3, [r3, #6]
    2212:	2bff      	cmp	r3, #255	; 0xff
    2214:	d01c      	beq.n	2250 <MiMAC_ReceivedPacket+0x144>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    2216:	498e      	ldr	r1, [pc, #568]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    2218:	780c      	ldrb	r4, [r1, #0]
    221a:	2380      	movs	r3, #128	; 0x80
    221c:	425b      	negs	r3, r3
    221e:	4323      	orrs	r3, r4
    2220:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    2222:	2d00      	cmp	r5, #0
    2224:	d021      	beq.n	226a <MiMAC_ReceivedPacket+0x15e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2226:	4c89      	ldr	r4, [pc, #548]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2228:	01c3      	lsls	r3, r0, #7
    222a:	1a18      	subs	r0, r3, r0
    222c:	1823      	adds	r3, r4, r0
    222e:	791d      	ldrb	r5, [r3, #4]
    2230:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2232:	795b      	ldrb	r3, [r3, #5]
    2234:	744b      	strb	r3, [r1, #17]
    2236:	01d3      	lsls	r3, r2, #7
    2238:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    223a:	0013      	movs	r3, r2
    223c:	3308      	adds	r3, #8
    223e:	191b      	adds	r3, r3, r4
    2240:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    2242:	5d03      	ldrb	r3, [r0, r4]
    2244:	3b13      	subs	r3, #19
    2246:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2248:	3210      	adds	r2, #16
    224a:	1912      	adds	r2, r2, r4
    224c:	608a      	str	r2, [r1, #8]
    224e:	e7c2      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2250:	01d1      	lsls	r1, r2, #7
    2252:	1a89      	subs	r1, r1, r2
    2254:	4b7d      	ldr	r3, [pc, #500]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2256:	185b      	adds	r3, r3, r1
    2258:	79db      	ldrb	r3, [r3, #7]
    225a:	2bff      	cmp	r3, #255	; 0xff
    225c:	d1db      	bne.n	2216 <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.flags.bits.broadcast = 1;
    225e:	497c      	ldr	r1, [pc, #496]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    2260:	780b      	ldrb	r3, [r1, #0]
    2262:	2404      	movs	r4, #4
    2264:	4323      	orrs	r3, r4
    2266:	700b      	strb	r3, [r1, #0]
    2268:	e7d5      	b.n	2216 <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    226a:	4979      	ldr	r1, [pc, #484]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    226c:	4c77      	ldr	r4, [pc, #476]	; (244c <MiMAC_ReceivedPacket+0x340>)
    226e:	01c3      	lsls	r3, r0, #7
    2270:	1a18      	subs	r0, r3, r0
    2272:	1823      	adds	r3, r4, r0
    2274:	7a1d      	ldrb	r5, [r3, #8]
    2276:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2278:	7a5b      	ldrb	r3, [r3, #9]
    227a:	744b      	strb	r3, [r1, #17]
    227c:	01d3      	lsls	r3, r2, #7
    227e:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2280:	0013      	movs	r3, r2
    2282:	330a      	adds	r3, #10
    2284:	191b      	adds	r3, r3, r4
    2286:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2288:	5d03      	ldrb	r3, [r0, r4]
    228a:	3b15      	subs	r3, #21
    228c:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    228e:	3212      	adds	r2, #18
    2290:	1912      	adds	r2, r2, r4
    2292:	608a      	str	r2, [r1, #8]
    2294:	e79f      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    2296:	496e      	ldr	r1, [pc, #440]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    2298:	780c      	ldrb	r4, [r1, #0]
    229a:	2380      	movs	r3, #128	; 0x80
    229c:	425b      	negs	r3, r3
    229e:	4323      	orrs	r3, r4
    22a0:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    22a2:	2d00      	cmp	r5, #0
    22a4:	d014      	beq.n	22d0 <MiMAC_ReceivedPacket+0x1c4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    22a6:	4c69      	ldr	r4, [pc, #420]	; (244c <MiMAC_ReceivedPacket+0x340>)
    22a8:	01d3      	lsls	r3, r2, #7
    22aa:	1a98      	subs	r0, r3, r2
    22ac:	1823      	adds	r3, r4, r0
    22ae:	791d      	ldrb	r5, [r3, #4]
    22b0:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    22b2:	795b      	ldrb	r3, [r3, #5]
    22b4:	744b      	strb	r3, [r1, #17]
    22b6:	01d3      	lsls	r3, r2, #7
    22b8:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    22ba:	0013      	movs	r3, r2
    22bc:	330e      	adds	r3, #14
    22be:	191b      	adds	r3, r3, r4
    22c0:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    22c2:	5d03      	ldrb	r3, [r0, r4]
    22c4:	3b19      	subs	r3, #25
    22c6:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    22c8:	3216      	adds	r2, #22
    22ca:	1912      	adds	r2, r2, r4
    22cc:	608a      	str	r2, [r1, #8]
    22ce:	e782      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    22d0:	495f      	ldr	r1, [pc, #380]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    22d2:	4c5e      	ldr	r4, [pc, #376]	; (244c <MiMAC_ReceivedPacket+0x340>)
    22d4:	01d3      	lsls	r3, r2, #7
    22d6:	1a98      	subs	r0, r3, r2
    22d8:	1823      	adds	r3, r4, r0
    22da:	7b9d      	ldrb	r5, [r3, #14]
    22dc:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    22de:	7bdb      	ldrb	r3, [r3, #15]
    22e0:	744b      	strb	r3, [r1, #17]
    22e2:	01d3      	lsls	r3, r2, #7
    22e4:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    22e6:	0013      	movs	r3, r2
    22e8:	3310      	adds	r3, #16
    22ea:	191b      	adds	r3, r3, r4
    22ec:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    22ee:	5d03      	ldrb	r3, [r0, r4]
    22f0:	3b1b      	subs	r3, #27
    22f2:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    22f4:	3218      	adds	r2, #24
    22f6:	1912      	adds	r2, r2, r4
    22f8:	608a      	str	r2, [r1, #8]
    22fa:	e76c      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    22fc:	01d1      	lsls	r1, r2, #7
    22fe:	1a89      	subs	r1, r1, r2
    2300:	4b52      	ldr	r3, [pc, #328]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2302:	185b      	adds	r3, r3, r1
    2304:	799b      	ldrb	r3, [r3, #6]
    2306:	2bff      	cmp	r3, #255	; 0xff
    2308:	d01f      	beq.n	234a <MiMAC_ReceivedPacket+0x23e>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    230a:	4b51      	ldr	r3, [pc, #324]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    230c:	781c      	ldrb	r4, [r3, #0]
    230e:	2180      	movs	r1, #128	; 0x80
    2310:	4249      	negs	r1, r1
    2312:	4321      	orrs	r1, r4
    2314:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2316:	2101      	movs	r1, #1
    2318:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    231a:	2d00      	cmp	r5, #0
    231c:	d122      	bne.n	2364 <MiMAC_ReceivedPacket+0x258>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    231e:	0019      	movs	r1, r3
    2320:	4c4a      	ldr	r4, [pc, #296]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2322:	01c3      	lsls	r3, r0, #7
    2324:	1a18      	subs	r0, r3, r0
    2326:	1823      	adds	r3, r4, r0
    2328:	7a1d      	ldrb	r5, [r3, #8]
    232a:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    232c:	7a5b      	ldrb	r3, [r3, #9]
    232e:	744b      	strb	r3, [r1, #17]
    2330:	01d3      	lsls	r3, r2, #7
    2332:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2334:	0013      	movs	r3, r2
    2336:	330a      	adds	r3, #10
    2338:	191b      	adds	r3, r3, r4
    233a:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    233c:	5d03      	ldrb	r3, [r0, r4]
    233e:	3b0f      	subs	r3, #15
    2340:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    2342:	320c      	adds	r2, #12
    2344:	1912      	adds	r2, r2, r4
    2346:	608a      	str	r2, [r1, #8]
    2348:	e745      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    234a:	01d1      	lsls	r1, r2, #7
    234c:	1a89      	subs	r1, r1, r2
    234e:	4b3f      	ldr	r3, [pc, #252]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2350:	185b      	adds	r3, r3, r1
    2352:	79db      	ldrb	r3, [r3, #7]
    2354:	2bff      	cmp	r3, #255	; 0xff
    2356:	d1d8      	bne.n	230a <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.flags.bits.broadcast = 1;
    2358:	493d      	ldr	r1, [pc, #244]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    235a:	780b      	ldrb	r3, [r1, #0]
    235c:	2404      	movs	r4, #4
    235e:	4323      	orrs	r3, r4
    2360:	700b      	strb	r3, [r1, #0]
    2362:	e7d2      	b.n	230a <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2364:	493a      	ldr	r1, [pc, #232]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    2366:	4c39      	ldr	r4, [pc, #228]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2368:	01c3      	lsls	r3, r0, #7
    236a:	1a18      	subs	r0, r3, r0
    236c:	1823      	adds	r3, r4, r0
    236e:	791d      	ldrb	r5, [r3, #4]
    2370:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2372:	795b      	ldrb	r3, [r3, #5]
    2374:	744b      	strb	r3, [r1, #17]
    2376:	01d3      	lsls	r3, r2, #7
    2378:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    237a:	0013      	movs	r3, r2
    237c:	3308      	adds	r3, #8
    237e:	191b      	adds	r3, r3, r4
    2380:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    2382:	5d03      	ldrb	r3, [r0, r4]
    2384:	3b0d      	subs	r3, #13
    2386:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    2388:	320a      	adds	r2, #10
    238a:	1912      	adds	r2, r2, r4
    238c:	608a      	str	r2, [r1, #8]
    238e:	e722      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2390:	4b2f      	ldr	r3, [pc, #188]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    2392:	781c      	ldrb	r4, [r3, #0]
    2394:	2180      	movs	r1, #128	; 0x80
    2396:	4249      	negs	r1, r1
    2398:	4321      	orrs	r1, r4
    239a:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    239c:	2101      	movs	r1, #1
    239e:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    23a0:	2d00      	cmp	r5, #0
    23a2:	d015      	beq.n	23d0 <MiMAC_ReceivedPacket+0x2c4>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    23a4:	0019      	movs	r1, r3
    23a6:	4c29      	ldr	r4, [pc, #164]	; (244c <MiMAC_ReceivedPacket+0x340>)
    23a8:	01d3      	lsls	r3, r2, #7
    23aa:	1a98      	subs	r0, r3, r2
    23ac:	1823      	adds	r3, r4, r0
    23ae:	791d      	ldrb	r5, [r3, #4]
    23b0:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    23b2:	795b      	ldrb	r3, [r3, #5]
    23b4:	744b      	strb	r3, [r1, #17]
    23b6:	01d3      	lsls	r3, r2, #7
    23b8:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    23ba:	0013      	movs	r3, r2
    23bc:	330e      	adds	r3, #14
    23be:	191b      	adds	r3, r3, r4
    23c0:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    23c2:	5d03      	ldrb	r3, [r0, r4]
    23c4:	3b13      	subs	r3, #19
    23c6:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    23c8:	3210      	adds	r2, #16
    23ca:	1912      	adds	r2, r2, r4
    23cc:	608a      	str	r2, [r1, #8]
    23ce:	e702      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    23d0:	491f      	ldr	r1, [pc, #124]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    23d2:	4c1e      	ldr	r4, [pc, #120]	; (244c <MiMAC_ReceivedPacket+0x340>)
    23d4:	01d3      	lsls	r3, r2, #7
    23d6:	1a98      	subs	r0, r3, r2
    23d8:	1823      	adds	r3, r4, r0
    23da:	7b5d      	ldrb	r5, [r3, #13]
    23dc:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    23de:	7b9b      	ldrb	r3, [r3, #14]
    23e0:	744b      	strb	r3, [r1, #17]
    23e2:	01d3      	lsls	r3, r2, #7
    23e4:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    23e6:	0013      	movs	r3, r2
    23e8:	330f      	adds	r3, #15
    23ea:	191b      	adds	r3, r3, r4
    23ec:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    23ee:	5d03      	ldrb	r3, [r0, r4]
    23f0:	3b15      	subs	r3, #21
    23f2:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    23f4:	3212      	adds	r2, #18
    23f6:	1912      	adds	r2, r2, r4
    23f8:	608a      	str	r2, [r1, #8]
    23fa:	e6ec      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    23fc:	01d1      	lsls	r1, r2, #7
    23fe:	1a89      	subs	r1, r1, r2
    2400:	4b12      	ldr	r3, [pc, #72]	; (244c <MiMAC_ReceivedPacket+0x340>)
    2402:	185b      	adds	r3, r3, r1
    2404:	799b      	ldrb	r3, [r3, #6]
    2406:	2bff      	cmp	r3, #255	; 0xff
    2408:	d00c      	beq.n	2424 <MiMAC_ReceivedPacket+0x318>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    240a:	4911      	ldr	r1, [pc, #68]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    240c:	4c0f      	ldr	r4, [pc, #60]	; (244c <MiMAC_ReceivedPacket+0x340>)
    240e:	01c3      	lsls	r3, r0, #7
    2410:	1a18      	subs	r0, r3, r0
    2412:	5d03      	ldrb	r3, [r0, r4]
    2414:	3b0a      	subs	r3, #10
    2416:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    2418:	01d3      	lsls	r3, r2, #7
    241a:	1a9a      	subs	r2, r3, r2
    241c:	3208      	adds	r2, #8
    241e:	1912      	adds	r2, r2, r4
    2420:	608a      	str	r2, [r1, #8]
			break;
    2422:	e6d8      	b.n	21d6 <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2424:	01d1      	lsls	r1, r2, #7
    2426:	1a89      	subs	r1, r1, r2
    2428:	4b08      	ldr	r3, [pc, #32]	; (244c <MiMAC_ReceivedPacket+0x340>)
    242a:	185b      	adds	r3, r3, r1
    242c:	79db      	ldrb	r3, [r3, #7]
    242e:	2bff      	cmp	r3, #255	; 0xff
    2430:	d1eb      	bne.n	240a <MiMAC_ReceivedPacket+0x2fe>
					MACRxPacket.flags.bits.broadcast = 1;
    2432:	4907      	ldr	r1, [pc, #28]	; (2450 <MiMAC_ReceivedPacket+0x344>)
    2434:	780b      	ldrb	r3, [r1, #0]
    2436:	2404      	movs	r4, #4
    2438:	4323      	orrs	r3, r4
    243a:	700b      	strb	r3, [r1, #0]
    243c:	e7e5      	b.n	240a <MiMAC_ReceivedPacket+0x2fe>
			MiMAC_DiscardPacket();
    243e:	4b05      	ldr	r3, [pc, #20]	; (2454 <MiMAC_ReceivedPacket+0x348>)
    2440:	4798      	blx	r3
			return false;
    2442:	2000      	movs	r0, #0
    2444:	e67b      	b.n	213e <MiMAC_ReceivedPacket+0x32>
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	20000009 	.word	0x20000009
    244c:	20000340 	.word	0x20000340
    2450:	200012c8 	.word	0x200012c8
    2454:	000020f1 	.word	0x000020f1
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    2458:	4912      	ldr	r1, [pc, #72]	; (24a4 <MiMAC_ReceivedPacket+0x398>)
    245a:	780a      	ldrb	r2, [r1, #0]
    245c:	2003      	movs	r0, #3
    245e:	4382      	bics	r2, r0
    2460:	700a      	strb	r2, [r1, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    2462:	4a11      	ldr	r2, [pc, #68]	; (24a8 <MiMAC_ReceivedPacket+0x39c>)
    2464:	01d9      	lsls	r1, r3, #7
    2466:	1acb      	subs	r3, r1, r3
    2468:	5c98      	ldrb	r0, [r3, r2]
    246a:	490e      	ldr	r1, [pc, #56]	; (24a4 <MiMAC_ReceivedPacket+0x398>)
    246c:	18d3      	adds	r3, r2, r3
    246e:	181a      	adds	r2, r3, r0
    2470:	3a01      	subs	r2, #1
    2472:	7812      	ldrb	r2, [r2, #0]
    2474:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    2476:	5c1b      	ldrb	r3, [r3, r0]
    2478:	734b      	strb	r3, [r1, #13]
		return true;
    247a:	2001      	movs	r0, #1
    247c:	e65f      	b.n	213e <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    247e:	4909      	ldr	r1, [pc, #36]	; (24a4 <MiMAC_ReceivedPacket+0x398>)
    2480:	780a      	ldrb	r2, [r1, #0]
    2482:	2003      	movs	r0, #3
    2484:	4382      	bics	r2, r0
    2486:	2001      	movs	r0, #1
    2488:	4302      	orrs	r2, r0
    248a:	700a      	strb	r2, [r1, #0]
			break;
    248c:	e7e9      	b.n	2462 <MiMAC_ReceivedPacket+0x356>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    248e:	4905      	ldr	r1, [pc, #20]	; (24a4 <MiMAC_ReceivedPacket+0x398>)
    2490:	780a      	ldrb	r2, [r1, #0]
    2492:	2003      	movs	r0, #3
    2494:	4302      	orrs	r2, r0
    2496:	700a      	strb	r2, [r1, #0]
			break;
    2498:	e7e3      	b.n	2462 <MiMAC_ReceivedPacket+0x356>
			BankIndex = i;
    249a:	2200      	movs	r2, #0
    249c:	4b03      	ldr	r3, [pc, #12]	; (24ac <MiMAC_ReceivedPacket+0x3a0>)
    249e:	701a      	strb	r2, [r3, #0]
    24a0:	e654      	b.n	214c <MiMAC_ReceivedPacket+0x40>
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	200012c8 	.word	0x200012c8
    24a8:	20000340 	.word	0x20000340
    24ac:	20000009 	.word	0x20000009

000024b0 <MiMAC_SymbolToTicks>:
* Returns:
*      converted value in uint32.
*****************************************************************************************/
uint32_t MiMAC_SymbolToTicks(uint32_t symbols)
{
	return SYMBOLS_TO_TICKS(symbols);
    24b0:	0100      	lsls	r0, r0, #4
}
    24b2:	4770      	bx	lr

000024b4 <MiMAC_GetPHYChannelInfo>:
*****************************************************************************************/
uint32_t MiMAC_GetPHYChannelInfo(void)
{
	uint32_t channelMap = FULL_CHANNEL_MAP;
	return channelMap;
}
    24b4:	4800      	ldr	r0, [pc, #0]	; (24b8 <MiMAC_GetPHYChannelInfo+0x4>)
    24b6:	4770      	bx	lr
    24b8:	07fff800 	.word	0x07fff800

000024bc <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    24bc:	4b02      	ldr	r3, [pc, #8]	; (24c8 <PHY_DataConf+0xc>)
    24be:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    24c0:	2201      	movs	r2, #1
    24c2:	4b02      	ldr	r3, [pc, #8]	; (24cc <PHY_DataConf+0x10>)
    24c4:	701a      	strb	r2, [r3, #0]
}
    24c6:	4770      	bx	lr
    24c8:	20000334 	.word	0x20000334
    24cc:	2000011c 	.word	0x2000011c

000024d0 <MiMAC_Task>:

void MiMAC_Task(void)
{
    24d0:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    24d2:	4b0b      	ldr	r3, [pc, #44]	; (2500 <MiMAC_Task+0x30>)
    24d4:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    24d6:	4b0b      	ldr	r3, [pc, #44]	; (2504 <MiMAC_Task+0x34>)
    24d8:	681b      	ldr	r3, [r3, #0]
    24da:	2b00      	cmp	r3, #0
    24dc:	d003      	beq.n	24e6 <MiMAC_Task+0x16>
    24de:	4a0a      	ldr	r2, [pc, #40]	; (2508 <MiMAC_Task+0x38>)
    24e0:	7812      	ldrb	r2, [r2, #0]
    24e2:	2a00      	cmp	r2, #0
    24e4:	d100      	bne.n	24e8 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    24e6:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    24e8:	4a08      	ldr	r2, [pc, #32]	; (250c <MiMAC_Task+0x3c>)
    24ea:	6812      	ldr	r2, [r2, #0]
    24ec:	4908      	ldr	r1, [pc, #32]	; (2510 <MiMAC_Task+0x40>)
    24ee:	7809      	ldrb	r1, [r1, #0]
    24f0:	4808      	ldr	r0, [pc, #32]	; (2514 <MiMAC_Task+0x44>)
    24f2:	7800      	ldrb	r0, [r0, #0]
    24f4:	4798      	blx	r3
	  dataConfAvailable = false;
    24f6:	2200      	movs	r2, #0
    24f8:	4b03      	ldr	r3, [pc, #12]	; (2508 <MiMAC_Task+0x38>)
    24fa:	701a      	strb	r2, [r3, #0]
}
    24fc:	e7f3      	b.n	24e6 <MiMAC_Task+0x16>
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	0000273d 	.word	0x0000273d
    2504:	20000120 	.word	0x20000120
    2508:	2000011c 	.word	0x2000011c
    250c:	20000128 	.word	0x20000128
    2510:	20000334 	.word	0x20000334
    2514:	20000124 	.word	0x20000124

00002518 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    251a:	0004      	movs	r4, r0
	trx_reg_write(reg, value);
    251c:	4f0b      	ldr	r7, [pc, #44]	; (254c <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    251e:	4e0c      	ldr	r6, [pc, #48]	; (2550 <phyTrxSetState+0x38>)
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2520:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2522:	2103      	movs	r1, #3
    2524:	2002      	movs	r0, #2
    2526:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2528:	2001      	movs	r0, #1
    252a:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    252c:	4028      	ands	r0, r5
    252e:	2808      	cmp	r0, #8
    2530:	d1f7      	bne.n	2522 <phyTrxSetState+0xa>
	trx_reg_write(reg, value);
    2532:	4f06      	ldr	r7, [pc, #24]	; (254c <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    2534:	4e06      	ldr	r6, [pc, #24]	; (2550 <phyTrxSetState+0x38>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2536:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2538:	0021      	movs	r1, r4
    253a:	2002      	movs	r0, #2
    253c:	47b8      	blx	r7
	value = trx_reg_read(reg);
    253e:	2001      	movs	r0, #1
    2540:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2542:	4028      	ands	r0, r5
    2544:	4284      	cmp	r4, r0
    2546:	d1f7      	bne.n	2538 <phyTrxSetState+0x20>
}
    2548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	00003591 	.word	0x00003591
    2550:	00003495 	.word	0x00003495

00002554 <phySetRxState>:
{
    2554:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2556:	2008      	movs	r0, #8
    2558:	4b08      	ldr	r3, [pc, #32]	; (257c <phySetRxState+0x28>)
    255a:	4798      	blx	r3
	value = trx_reg_read(reg);
    255c:	200f      	movs	r0, #15
    255e:	4b08      	ldr	r3, [pc, #32]	; (2580 <phySetRxState+0x2c>)
    2560:	4798      	blx	r3
	if (phyRxState) {
    2562:	4b08      	ldr	r3, [pc, #32]	; (2584 <phySetRxState+0x30>)
    2564:	781b      	ldrb	r3, [r3, #0]
    2566:	2b00      	cmp	r3, #0
    2568:	d100      	bne.n	256c <phySetRxState+0x18>
}
    256a:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    256c:	2016      	movs	r0, #22
    256e:	4b03      	ldr	r3, [pc, #12]	; (257c <phySetRxState+0x28>)
    2570:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    2572:	2201      	movs	r2, #1
    2574:	4b04      	ldr	r3, [pc, #16]	; (2588 <phySetRxState+0x34>)
    2576:	701a      	strb	r2, [r3, #0]
}
    2578:	e7f7      	b.n	256a <phySetRxState+0x16>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	00002519 	.word	0x00002519
    2580:	00003495 	.word	0x00003495
    2584:	200001ac 	.word	0x200001ac
    2588:	200001ad 	.word	0x200001ad

0000258c <PHY_DataReq>:
{
    258c:	b510      	push	{r4, lr}
    258e:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2590:	2019      	movs	r0, #25
    2592:	4b0c      	ldr	r3, [pc, #48]	; (25c4 <PHY_DataReq+0x38>)
    2594:	4798      	blx	r3
	value = trx_reg_read(reg);
    2596:	200f      	movs	r0, #15
    2598:	4b0b      	ldr	r3, [pc, #44]	; (25c8 <PHY_DataReq+0x3c>)
    259a:	4798      	blx	r3
	data[0] += 2;// 2
    259c:	7821      	ldrb	r1, [r4, #0]
    259e:	1c8b      	adds	r3, r1, #2
    25a0:	7023      	strb	r3, [r4, #0]
	trx_frame_write(&data[0], (data[0]-1 ) /* length value*/);
    25a2:	3101      	adds	r1, #1
    25a4:	b2c9      	uxtb	r1, r1
    25a6:	0020      	movs	r0, r4
    25a8:	4b08      	ldr	r3, [pc, #32]	; (25cc <PHY_DataReq+0x40>)
    25aa:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
    25ac:	2203      	movs	r2, #3
    25ae:	4b08      	ldr	r3, [pc, #32]	; (25d0 <PHY_DataReq+0x44>)
    25b0:	701a      	strb	r2, [r3, #0]
    25b2:	4b08      	ldr	r3, [pc, #32]	; (25d4 <PHY_DataReq+0x48>)
    25b4:	2280      	movs	r2, #128	; 0x80
    25b6:	0352      	lsls	r2, r2, #13
    25b8:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    25be:	615a      	str	r2, [r3, #20]
}
    25c0:	bd10      	pop	{r4, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	00002519 	.word	0x00002519
    25c8:	00003495 	.word	0x00003495
    25cc:	000037c1 	.word	0x000037c1
    25d0:	200001ad 	.word	0x200001ad
    25d4:	41004400 	.word	0x41004400

000025d8 <PHY_RandomReq>:
{
    25d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25da:	46c6      	mov	lr, r8
    25dc:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    25de:	2006      	movs	r0, #6
    25e0:	4b0d      	ldr	r3, [pc, #52]	; (2618 <PHY_RandomReq+0x40>)
    25e2:	4798      	blx	r3
    25e4:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    25e6:	2500      	movs	r5, #0
		delay_cycles_us(1);
    25e8:	4f0c      	ldr	r7, [pc, #48]	; (261c <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    25ea:	4e0d      	ldr	r6, [pc, #52]	; (2620 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    25ec:	2303      	movs	r3, #3
    25ee:	4698      	mov	r8, r3
		delay_cycles_us(1);
    25f0:	2001      	movs	r0, #1
    25f2:	47b8      	blx	r7
	value = trx_reg_read(reg);
    25f4:	2006      	movs	r0, #6
    25f6:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    25f8:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    25fa:	4643      	mov	r3, r8
    25fc:	4018      	ands	r0, r3
    25fe:	40a0      	lsls	r0, r4
    2600:	4305      	orrs	r5, r0
    2602:	b2ad      	uxth	r5, r5
    2604:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    2606:	2c10      	cmp	r4, #16
    2608:	d1f2      	bne.n	25f0 <PHY_RandomReq+0x18>
	phySetRxState();
    260a:	4b06      	ldr	r3, [pc, #24]	; (2624 <PHY_RandomReq+0x4c>)
    260c:	4798      	blx	r3
}
    260e:	0028      	movs	r0, r5
    2610:	bc04      	pop	{r2}
    2612:	4690      	mov	r8, r2
    2614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	00002519 	.word	0x00002519
    261c:	00000155 	.word	0x00000155
    2620:	00003495 	.word	0x00003495
    2624:	00002555 	.word	0x00002555

00002628 <PHY_Init>:
{
    2628:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    262a:	4b0d      	ldr	r3, [pc, #52]	; (2660 <PHY_Init+0x38>)
    262c:	4798      	blx	r3
	PhyReset();
    262e:	4b0d      	ldr	r3, [pc, #52]	; (2664 <PHY_Init+0x3c>)
    2630:	4798      	blx	r3
	phyRxState = false;
    2632:	2200      	movs	r2, #0
    2634:	4b0c      	ldr	r3, [pc, #48]	; (2668 <PHY_Init+0x40>)
    2636:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    2638:	4e0c      	ldr	r6, [pc, #48]	; (266c <PHY_Init+0x44>)
	value = trx_reg_read(reg);
    263a:	4d0d      	ldr	r5, [pc, #52]	; (2670 <PHY_Init+0x48>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    263c:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    263e:	2108      	movs	r1, #8
    2640:	2002      	movs	r0, #2
    2642:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2644:	2001      	movs	r0, #1
    2646:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2648:	4020      	ands	r0, r4
    264a:	2808      	cmp	r0, #8
    264c:	d1f7      	bne.n	263e <PHY_Init+0x16>
	trx_reg_write(reg, value);
    264e:	212e      	movs	r1, #46	; 0x2e
    2650:	3804      	subs	r0, #4
    2652:	4c06      	ldr	r4, [pc, #24]	; (266c <PHY_Init+0x44>)
    2654:	47a0      	blx	r4
    2656:	21a0      	movs	r1, #160	; 0xa0
    2658:	200c      	movs	r0, #12
    265a:	47a0      	blx	r4
}
    265c:	bd70      	pop	{r4, r5, r6, pc}
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	00003349 	.word	0x00003349
    2664:	00003465 	.word	0x00003465
    2668:	200001ac 	.word	0x200001ac
    266c:	00003591 	.word	0x00003591
    2670:	00003495 	.word	0x00003495

00002674 <PHY_SetRxState>:
{
    2674:	b510      	push	{r4, lr}
	phyRxState = rx;
    2676:	4b02      	ldr	r3, [pc, #8]	; (2680 <PHY_SetRxState+0xc>)
    2678:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    267a:	4b02      	ldr	r3, [pc, #8]	; (2684 <PHY_SetRxState+0x10>)
    267c:	4798      	blx	r3
}
    267e:	bd10      	pop	{r4, pc}
    2680:	200001ac 	.word	0x200001ac
    2684:	00002555 	.word	0x00002555

00002688 <PHY_SetChannel>:
{
    2688:	b510      	push	{r4, lr}
    268a:	0004      	movs	r4, r0
	value = trx_reg_read(reg);
    268c:	2008      	movs	r0, #8
    268e:	4b05      	ldr	r3, [pc, #20]	; (26a4 <PHY_SetChannel+0x1c>)
    2690:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    2692:	231f      	movs	r3, #31
    2694:	0001      	movs	r1, r0
    2696:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    2698:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    269a:	b2c9      	uxtb	r1, r1
    269c:	2008      	movs	r0, #8
    269e:	4b02      	ldr	r3, [pc, #8]	; (26a8 <PHY_SetChannel+0x20>)
    26a0:	4798      	blx	r3
}
    26a2:	bd10      	pop	{r4, pc}
    26a4:	00003495 	.word	0x00003495
    26a8:	00003591 	.word	0x00003591

000026ac <PHY_SetPanId>:
{
    26ac:	b530      	push	{r4, r5, lr}
    26ae:	b083      	sub	sp, #12
    26b0:	466b      	mov	r3, sp
    26b2:	1d9d      	adds	r5, r3, #6
    26b4:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    26b6:	b2c1      	uxtb	r1, r0
    26b8:	2022      	movs	r0, #34	; 0x22
    26ba:	4c03      	ldr	r4, [pc, #12]	; (26c8 <PHY_SetPanId+0x1c>)
    26bc:	47a0      	blx	r4
    26be:	7869      	ldrb	r1, [r5, #1]
    26c0:	2023      	movs	r0, #35	; 0x23
    26c2:	47a0      	blx	r4
}
    26c4:	b003      	add	sp, #12
    26c6:	bd30      	pop	{r4, r5, pc}
    26c8:	00003591 	.word	0x00003591

000026cc <PHY_SetShortAddr>:
{
    26cc:	b570      	push	{r4, r5, r6, lr}
    26ce:	b082      	sub	sp, #8
    26d0:	466b      	mov	r3, sp
    26d2:	1d9e      	adds	r6, r3, #6
    26d4:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    26d6:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    26d8:	0021      	movs	r1, r4
    26da:	2020      	movs	r0, #32
    26dc:	4d05      	ldr	r5, [pc, #20]	; (26f4 <PHY_SetShortAddr+0x28>)
    26de:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    26e0:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    26e2:	0031      	movs	r1, r6
    26e4:	2021      	movs	r0, #33	; 0x21
    26e6:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    26e8:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    26ea:	b2e1      	uxtb	r1, r4
    26ec:	202d      	movs	r0, #45	; 0x2d
    26ee:	47a8      	blx	r5
}
    26f0:	b002      	add	sp, #8
    26f2:	bd70      	pop	{r4, r5, r6, pc}
    26f4:	00003591 	.word	0x00003591

000026f8 <PHY_Sleep>:
{
    26f8:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    26fa:	2008      	movs	r0, #8
    26fc:	4b04      	ldr	r3, [pc, #16]	; (2710 <PHY_Sleep+0x18>)
    26fe:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2700:	2280      	movs	r2, #128	; 0x80
    2702:	0352      	lsls	r2, r2, #13
    2704:	4b03      	ldr	r3, [pc, #12]	; (2714 <PHY_Sleep+0x1c>)
    2706:	619a      	str	r2, [r3, #24]
	phyState = PHY_STATE_SLEEP;
    2708:	2202      	movs	r2, #2
    270a:	4b03      	ldr	r3, [pc, #12]	; (2718 <PHY_Sleep+0x20>)
    270c:	701a      	strb	r2, [r3, #0]
}
    270e:	bd10      	pop	{r4, pc}
    2710:	00002519 	.word	0x00002519
    2714:	41004400 	.word	0x41004400
    2718:	200001ad 	.word	0x200001ad

0000271c <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	0005      	movs	r5, r0
    2720:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    2722:	4e05      	ldr	r6, [pc, #20]	; (2738 <PHY_SetIEEEAddr+0x1c>)
    2724:	7829      	ldrb	r1, [r5, #0]
    2726:	0020      	movs	r0, r4
    2728:	47b0      	blx	r6
		ptr_to_reg++;
    272a:	3501      	adds	r5, #1
    272c:	3401      	adds	r4, #1
    272e:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    2730:	2c2c      	cmp	r4, #44	; 0x2c
    2732:	d1f7      	bne.n	2724 <PHY_SetIEEEAddr+0x8>
	}
}
    2734:	bd70      	pop	{r4, r5, r6, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	00003591 	.word	0x00003591

0000273c <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
// Handle Packet Received
void PHY_TaskHandler(void)
{
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	b082      	sub	sp, #8
	if (PHY_STATE_SLEEP == phyState)
    2740:	4b36      	ldr	r3, [pc, #216]	; (281c <PHY_TaskHandler+0xe0>)
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	2b02      	cmp	r3, #2
    2746:	d00a      	beq.n	275e <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    2748:	200f      	movs	r0, #15
    274a:	4b35      	ldr	r3, [pc, #212]	; (2820 <PHY_TaskHandler+0xe4>)
    274c:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    274e:	0703      	lsls	r3, r0, #28
    2750:	d505      	bpl.n	275e <PHY_TaskHandler+0x22>
	{
		if (PHY_STATE_IDLE == phyState)
    2752:	4b32      	ldr	r3, [pc, #200]	; (281c <PHY_TaskHandler+0xe0>)
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	2b01      	cmp	r3, #1
    2758:	d003      	beq.n	2762 <PHY_TaskHandler+0x26>
					}
			    }
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    275a:	2b03      	cmp	r3, #3
    275c:	d045      	beq.n	27ea <PHY_TaskHandler+0xae>
			phySetRxState();
			phyState = PHY_STATE_IDLE;
			PHY_DataConf(status);
		}
	}
}
    275e:	b002      	add	sp, #8
    2760:	bd70      	pop	{r4, r5, r6, pc}
				if (RxBuffer[i].PayloadLen == 0)
    2762:	4b30      	ldr	r3, [pc, #192]	; (2824 <PHY_TaskHandler+0xe8>)
    2764:	781c      	ldrb	r4, [r3, #0]
    2766:	2c00      	cmp	r4, #0
    2768:	d010      	beq.n	278c <PHY_TaskHandler+0x50>
    276a:	237f      	movs	r3, #127	; 0x7f
    276c:	4a2d      	ldr	r2, [pc, #180]	; (2824 <PHY_TaskHandler+0xe8>)
    276e:	5cd3      	ldrb	r3, [r2, r3]
    2770:	2b00      	cmp	r3, #0
    2772:	d00a      	beq.n	278a <PHY_TaskHandler+0x4e>
    2774:	23fe      	movs	r3, #254	; 0xfe
    2776:	5cd3      	ldrb	r3, [r2, r3]
    2778:	2b00      	cmp	r3, #0
    277a:	d024      	beq.n	27c6 <PHY_TaskHandler+0x8a>
    277c:	237e      	movs	r3, #126	; 0x7e
    277e:	33ff      	adds	r3, #255	; 0xff
    2780:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    2782:	2403      	movs	r4, #3
				if (RxBuffer[i].PayloadLen == 0)
    2784:	2b00      	cmp	r3, #0
    2786:	d1ea      	bne.n	275e <PHY_TaskHandler+0x22>
    2788:	e000      	b.n	278c <PHY_TaskHandler+0x50>
			for (i = 0; i < BANK_SIZE; i++)
    278a:	2401      	movs	r4, #1
				trx_frame_read(&size, 1);
    278c:	466b      	mov	r3, sp
    278e:	1ddd      	adds	r5, r3, #7
    2790:	2101      	movs	r1, #1
    2792:	0028      	movs	r0, r5
    2794:	4e24      	ldr	r6, [pc, #144]	; (2828 <PHY_TaskHandler+0xec>)
    2796:	47b0      	blx	r6
			 	trx_frame_read(phyRxBuffer, size + 2);
    2798:	7829      	ldrb	r1, [r5, #0]
    279a:	3102      	adds	r1, #2
    279c:	b2c9      	uxtb	r1, r1
    279e:	4823      	ldr	r0, [pc, #140]	; (282c <PHY_TaskHandler+0xf0>)
    27a0:	47b0      	blx	r6
				RxBuffer[RxBank].PayloadLen = size+2;
    27a2:	0021      	movs	r1, r4
    27a4:	7828      	ldrb	r0, [r5, #0]
    27a6:	1c83      	adds	r3, r0, #2
    27a8:	b2db      	uxtb	r3, r3
    27aa:	01e2      	lsls	r2, r4, #7
    27ac:	1b14      	subs	r4, r2, r4
    27ae:	4a1d      	ldr	r2, [pc, #116]	; (2824 <PHY_TaskHandler+0xe8>)
    27b0:	54a3      	strb	r3, [r4, r2]
				if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    27b2:	2b7d      	cmp	r3, #125	; 0x7d
    27b4:	d909      	bls.n	27ca <PHY_TaskHandler+0x8e>
	value = trx_reg_read(reg);
    27b6:	4d1a      	ldr	r5, [pc, #104]	; (2820 <PHY_TaskHandler+0xe4>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    27b8:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    27ba:	2001      	movs	r0, #1
    27bc:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    27be:	4020      	ands	r0, r4
    27c0:	2816      	cmp	r0, #22
    27c2:	d1fa      	bne.n	27ba <PHY_TaskHandler+0x7e>
    27c4:	e7cb      	b.n	275e <PHY_TaskHandler+0x22>
			for (i = 0; i < BANK_SIZE; i++)
    27c6:	2402      	movs	r4, #2
    27c8:	e7e0      	b.n	278c <PHY_TaskHandler+0x50>
					for (i = 1; i <= size+2; i++)
    27ca:	3002      	adds	r0, #2
    27cc:	2201      	movs	r2, #1
    27ce:	2301      	movs	r3, #1
						RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    27d0:	01cc      	lsls	r4, r1, #7
    27d2:	1a61      	subs	r1, r4, r1
    27d4:	4c13      	ldr	r4, [pc, #76]	; (2824 <PHY_TaskHandler+0xe8>)
    27d6:	1864      	adds	r4, r4, r1
    27d8:	4d14      	ldr	r5, [pc, #80]	; (282c <PHY_TaskHandler+0xf0>)
    27da:	5ca9      	ldrb	r1, [r5, r2]
    27dc:	54a1      	strb	r1, [r4, r2]
					for (i = 1; i <= size+2; i++)
    27de:	3301      	adds	r3, #1
    27e0:	b2db      	uxtb	r3, r3
    27e2:	001a      	movs	r2, r3
    27e4:	4283      	cmp	r3, r0
    27e6:	ddf8      	ble.n	27da <PHY_TaskHandler+0x9e>
    27e8:	e7e5      	b.n	27b6 <PHY_TaskHandler+0x7a>
	value = trx_reg_read(reg);
    27ea:	2002      	movs	r0, #2
    27ec:	4b0c      	ldr	r3, [pc, #48]	; (2820 <PHY_TaskHandler+0xe4>)
    27ee:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    27f0:	0940      	lsrs	r0, r0, #5
    27f2:	b2c4      	uxtb	r4, r0
   			if (TRAC_STATUS_SUCCESS == status)
    27f4:	2c00      	cmp	r4, #0
    27f6:	d004      	beq.n	2802 <PHY_TaskHandler+0xc6>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    27f8:	2c03      	cmp	r4, #3
    27fa:	d00b      	beq.n	2814 <PHY_TaskHandler+0xd8>
			else if (TRAC_STATUS_NO_ACK == status)
    27fc:	2c05      	cmp	r4, #5
    27fe:	d00b      	beq.n	2818 <PHY_TaskHandler+0xdc>
				status = PHY_STATUS_ERROR;
    2800:	2401      	movs	r4, #1
			phySetRxState();
    2802:	4b0b      	ldr	r3, [pc, #44]	; (2830 <PHY_TaskHandler+0xf4>)
    2804:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    2806:	2201      	movs	r2, #1
    2808:	4b04      	ldr	r3, [pc, #16]	; (281c <PHY_TaskHandler+0xe0>)
    280a:	701a      	strb	r2, [r3, #0]
			PHY_DataConf(status);
    280c:	0020      	movs	r0, r4
    280e:	4b09      	ldr	r3, [pc, #36]	; (2834 <PHY_TaskHandler+0xf8>)
    2810:	4798      	blx	r3
    2812:	e7a4      	b.n	275e <PHY_TaskHandler+0x22>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2814:	2402      	movs	r4, #2
    2816:	e7f4      	b.n	2802 <PHY_TaskHandler+0xc6>
				status = PHY_STATUS_NO_ACK;
    2818:	2403      	movs	r4, #3
    281a:	e7f2      	b.n	2802 <PHY_TaskHandler+0xc6>
    281c:	200001ad 	.word	0x200001ad
    2820:	00003495 	.word	0x00003495
    2824:	20000340 	.word	0x20000340
    2828:	00003691 	.word	0x00003691
    282c:	2000012c 	.word	0x2000012c
    2830:	00002555 	.word	0x00002555
    2834:	000024bd 	.word	0x000024bd

00002838 <stb_init>:
 * @brief STB Initialization
 *
 * This function initializes the STB.
 */
void stb_init(void)
{
    2838:	b510      	push	{r4, lr}
	sal_init();
    283a:	4b01      	ldr	r3, [pc, #4]	; (2840 <stb_init+0x8>)
    283c:	4798      	blx	r3
}
    283e:	bd10      	pop	{r4, pc}
    2840:	0000311d 	.word	0x0000311d

00002844 <stb_ccm_secure>:
		uint8_t *key,
		uint8_t hdr_len,
		uint8_t pld_len,
		uint8_t sec_level,
		uint8_t aes_dir)
{
    2844:	b5f0      	push	{r4, r5, r6, r7, lr}
    2846:	46de      	mov	lr, fp
    2848:	4657      	mov	r7, sl
    284a:	464e      	mov	r6, r9
    284c:	4645      	mov	r5, r8
    284e:	b5e0      	push	{r5, r6, r7, lr}
    2850:	b08b      	sub	sp, #44	; 0x2c
    2852:	9003      	str	r0, [sp, #12]
    2854:	000d      	movs	r5, r1
    2856:	0014      	movs	r4, r2
    2858:	9304      	str	r3, [sp, #16]
    285a:	ab14      	add	r3, sp, #80	; 0x50
    285c:	781e      	ldrb	r6, [r3, #0]
    285e:	ab15      	add	r3, sp, #84	; 0x54
    2860:	781f      	ldrb	r7, [r3, #0]
    2862:	ab16      	add	r3, sp, #88	; 0x58
    2864:	781b      	ldrb	r3, [r3, #0]
    2866:	469a      	mov	sl, r3
	uint8_t nonce_0; /* nonce[0] for MIC computation. */
	uint8_t mic_len = 0;
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;

	if (stb_restart_required) {
    2868:	4b77      	ldr	r3, [pc, #476]	; (2a48 <stb_ccm_secure+0x204>)
    286a:	781b      	ldrb	r3, [r3, #0]
    286c:	2b00      	cmp	r3, #0
    286e:	d007      	beq.n	2880 <stb_ccm_secure+0x3c>
#if (SAL_TYPE != ATXMEGA_SAL)
		prev_trx_status = tal_trx_status;
    2870:	2202      	movs	r2, #2
    2872:	4b76      	ldr	r3, [pc, #472]	; (2a4c <stb_ccm_secure+0x208>)
    2874:	701a      	strb	r2, [r3, #0]
		if (tal_trx_status == TRX_SLEEP) {
			PHY_Wakeup();
		}
#endif
		sal_aes_restart();
    2876:	4b76      	ldr	r3, [pc, #472]	; (2a50 <stb_ccm_secure+0x20c>)
    2878:	4798      	blx	r3
		stb_restart_required = false;
    287a:	2200      	movs	r2, #0
    287c:	4b72      	ldr	r3, [pc, #456]	; (2a48 <stb_ccm_secure+0x204>)
    287e:	701a      	strb	r2, [r3, #0]
	}

	switch (sec_level) {
    2880:	2f07      	cmp	r7, #7
    2882:	d817      	bhi.n	28b4 <stb_ccm_secure+0x70>
    2884:	00bb      	lsls	r3, r7, #2
    2886:	4a73      	ldr	r2, [pc, #460]	; (2a54 <stb_ccm_secure+0x210>)
    2888:	58d3      	ldr	r3, [r2, r3]
    288a:	469f      	mov	pc, r3
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    288c:	2300      	movs	r3, #0
    288e:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
		break;

	case SECURITY_02_LEVEL:
		/* MIC-64 & No Encryption at Security Level -2 */
		mic_len = LEN_MIC_64;
    2890:	2708      	movs	r7, #8
    2892:	e0bb      	b.n	2a0c <stb_ccm_secure+0x1c8>
		break;

	case SECURITY_04_LEVEL:
		/* No MIC & Encryption at Security Level -4 */
		mic_len = LEN_MIC_00;
		enc_flag = ENCRYPTION_REQD;
    2894:	2301      	movs	r3, #1
    2896:	4698      	mov	r8, r3
		mic_len = LEN_MIC_00;
    2898:	2700      	movs	r7, #0
		break;
    289a:	e0b7      	b.n	2a0c <stb_ccm_secure+0x1c8>

	case SECURITY_05_LEVEL:
		/* MIC-32 & Encryption at Security Level -5 */
		mic_len = LEN_MIC_32;
		enc_flag = ENCRYPTION_REQD;
    289c:	2301      	movs	r3, #1
    289e:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    28a0:	2704      	movs	r7, #4
		break;
    28a2:	e0b3      	b.n	2a0c <stb_ccm_secure+0x1c8>

	case SECURITY_06_LEVEL:
		/* MIC-64 & Encryption at Security Level -6 */
		mic_len = LEN_MIC_64;
		enc_flag = ENCRYPTION_REQD;
    28a4:	2301      	movs	r3, #1
    28a6:	4698      	mov	r8, r3
		mic_len = LEN_MIC_64;
    28a8:	2708      	movs	r7, #8
		break;
    28aa:	e0af      	b.n	2a0c <stb_ccm_secure+0x1c8>

	case SECURITY_07_LEVEL:
		/* MIC-128 & Encryption at Security Level -7 */
		mic_len = LEN_MIC_128;
		enc_flag = ENCRYPTION_REQD;
    28ac:	2301      	movs	r3, #1
    28ae:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    28b0:	2710      	movs	r7, #16
		break;
    28b2:	e0ab      	b.n	2a0c <stb_ccm_secure+0x1c8>
		break;
	}

	/* Test on correct parameters. */

	if ((sec_level & ~0x7) ||
    28b4:	2307      	movs	r3, #7
    28b6:	439f      	bics	r7, r3
    28b8:	d000      	beq.n	28bc <stb_ccm_secure+0x78>
    28ba:	e0b5      	b.n	2a28 <stb_ccm_secure+0x1e4>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    28bc:	46b8      	mov	r8, r7
    28be:	e0a5      	b.n	2a0c <stb_ccm_secure+0x1c8>
			(nonce == NULL) ||
			((uint16_t)pld_len + (uint16_t)hdr_len +
			(uint16_t)mic_len > 127)
			) {
#if (SAL_TYPE != ATXMEGA_SAL)
		TRX_SLEEP();
    28c0:	4b65      	ldr	r3, [pc, #404]	; (2a58 <stb_ccm_secure+0x214>)
    28c2:	4798      	blx	r3
    28c4:	e0b5      	b.n	2a32 <stb_ccm_secure+0x1ee>
		sal_aes_clean_up();
#endif
		return (STB_CCM_ILLPARM);
	}

	if (key_change && (key == NULL)) {
    28c6:	4b65      	ldr	r3, [pc, #404]	; (2a5c <stb_ccm_secure+0x218>)
    28c8:	781b      	ldrb	r3, [r3, #0]
    28ca:	2b00      	cmp	r3, #0
    28cc:	d01a      	beq.n	2904 <stb_ccm_secure+0xc0>
    28ce:	2c00      	cmp	r4, #0
    28d0:	d00d      	beq.n	28ee <stb_ccm_secure+0xaa>
	if (key_change) {
		/*
		 * Key must be non-NULL because of test above, and
		 * ECB encryption is always the initial encryption mode.
		 */
		sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    28d2:	2200      	movs	r2, #0
    28d4:	2100      	movs	r1, #0
    28d6:	0020      	movs	r0, r4
    28d8:	4b61      	ldr	r3, [pc, #388]	; (2a60 <stb_ccm_secure+0x21c>)
    28da:	4798      	blx	r3
		memcpy(last_key, key, AES_KEYSIZE);
    28dc:	2210      	movs	r2, #16
    28de:	0021      	movs	r1, r4
    28e0:	4860      	ldr	r0, [pc, #384]	; (2a64 <stb_ccm_secure+0x220>)
    28e2:	4b61      	ldr	r3, [pc, #388]	; (2a68 <stb_ccm_secure+0x224>)
    28e4:	4798      	blx	r3
		key_change = false;
    28e6:	2200      	movs	r2, #0
    28e8:	4b5c      	ldr	r3, [pc, #368]	; (2a5c <stb_ccm_secure+0x218>)
    28ea:	701a      	strb	r2, [r3, #0]
    28ec:	e01e      	b.n	292c <stb_ccm_secure+0xe8>
		TRX_SLEEP();
    28ee:	4b57      	ldr	r3, [pc, #348]	; (2a4c <stb_ccm_secure+0x208>)
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	2b01      	cmp	r3, #1
    28f4:	d003      	beq.n	28fe <stb_ccm_secure+0xba>
		sal_aes_clean_up();
    28f6:	4b5d      	ldr	r3, [pc, #372]	; (2a6c <stb_ccm_secure+0x228>)
    28f8:	4798      	blx	r3
		return (STB_CCM_KEYMISS);
    28fa:	2002      	movs	r0, #2
    28fc:	e09c      	b.n	2a38 <stb_ccm_secure+0x1f4>
		TRX_SLEEP();
    28fe:	4b56      	ldr	r3, [pc, #344]	; (2a58 <stb_ccm_secure+0x214>)
    2900:	4798      	blx	r3
    2902:	e7f8      	b.n	28f6 <stb_ccm_secure+0xb2>
	if (!key_change && key != NULL) { /* There was some previous key. */
    2904:	2c00      	cmp	r4, #0
    2906:	d011      	beq.n	292c <stb_ccm_secure+0xe8>
    2908:	220f      	movs	r2, #15
			key_change |= (last_key[i] ^ key[i]);
    290a:	4956      	ldr	r1, [pc, #344]	; (2a64 <stb_ccm_secure+0x220>)
    290c:	0018      	movs	r0, r3
    290e:	46ac      	mov	ip, r5
    2910:	5c53      	ldrb	r3, [r2, r1]
    2912:	5ca5      	ldrb	r5, [r4, r2]
    2914:	406b      	eors	r3, r5
    2916:	4303      	orrs	r3, r0
    2918:	1e58      	subs	r0, r3, #1
    291a:	4183      	sbcs	r3, r0
    291c:	b2d8      	uxtb	r0, r3
		for (i = AES_BLOCKSIZE; i--; /* */) {
    291e:	3a01      	subs	r2, #1
    2920:	d2f6      	bcs.n	2910 <stb_ccm_secure+0xcc>
    2922:	4665      	mov	r5, ip
    2924:	4a4d      	ldr	r2, [pc, #308]	; (2a5c <stb_ccm_secure+0x218>)
    2926:	7010      	strb	r0, [r2, #0]
	if (key_change) {
    2928:	2800      	cmp	r0, #0
    292a:	d1d2      	bne.n	28d2 <stb_ccm_secure+0x8e>
	}

	/* Prepare nonce. */
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */

	if (mic_len > 0) {
    292c:	2f00      	cmp	r7, #0
    292e:	d129      	bne.n	2984 <stb_ccm_secure+0x140>
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */
    2930:	2301      	movs	r3, #1
    2932:	702b      	strb	r3, [r5, #0]
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
	}

	if (hdr_len) {
    2934:	9b04      	ldr	r3, [sp, #16]
    2936:	2b00      	cmp	r3, #0
    2938:	d003      	beq.n	2942 <stb_ccm_secure+0xfe>
		nonce[0] |= ADATA;
    293a:	782b      	ldrb	r3, [r5, #0]
    293c:	2240      	movs	r2, #64	; 0x40
    293e:	4313      	orrs	r3, r2
    2940:	702b      	strb	r3, [r5, #0]
	}

	nonce_0 = nonce[0];
    2942:	782b      	ldrb	r3, [r5, #0]
    2944:	4699      	mov	r9, r3
	nonce[AES_BLOCKSIZE - 2] = 0;
    2946:	2300      	movs	r3, #0
    2948:	73ab      	strb	r3, [r5, #14]

	if (aes_dir == AES_DIR_ENCRYPT) {
    294a:	4653      	mov	r3, sl
    294c:	2b00      	cmp	r3, #0
    294e:	d12a      	bne.n	29a6 <stb_ccm_secure+0x162>
		/* Authenticate. */
		if (mic_len > 0) {
    2950:	2f00      	cmp	r7, #0
    2952:	d003      	beq.n	295c <stb_ccm_secure+0x118>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    2954:	73ee      	strb	r6, [r5, #15]

			if (ENCRYPTION_REQD == enc_flag) {
    2956:	4643      	mov	r3, r8
    2958:	2b01      	cmp	r3, #1
    295a:	d01a      	beq.n	2992 <stb_ccm_secure+0x14e>
						hdr_len,
						pld_len);
			}
		}

		nonce[0] = PLAINTEXT_FLAG;
    295c:	2301      	movs	r3, #1
    295e:	702b      	strb	r3, [r5, #0]
		encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    2960:	9b03      	ldr	r3, [sp, #12]
    2962:	9a04      	ldr	r2, [sp, #16]
    2964:	4694      	mov	ip, r2
    2966:	4463      	add	r3, ip
    2968:	0018      	movs	r0, r3
    296a:	0033      	movs	r3, r6
    296c:	003a      	movs	r2, r7
    296e:	0029      	movs	r1, r5
    2970:	4c3f      	ldr	r4, [pc, #252]	; (2a70 <stb_ccm_secure+0x22c>)
    2972:	47a0      	blx	r4
			}
		}
	}

#if (SAL_TYPE != ATXMEGA_SAL)
	TRX_SLEEP();
    2974:	4b35      	ldr	r3, [pc, #212]	; (2a4c <stb_ccm_secure+0x208>)
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	2b01      	cmp	r3, #1
    297a:	d03d      	beq.n	29f8 <stb_ccm_secure+0x1b4>
	sal_aes_clean_up();
    297c:	4b3b      	ldr	r3, [pc, #236]	; (2a6c <stb_ccm_secure+0x228>)
    297e:	4798      	blx	r3
#endif
	return (STB_CCM_OK);
    2980:	2000      	movs	r0, #0
    2982:	e059      	b.n	2a38 <stb_ccm_secure+0x1f4>
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
    2984:	9b05      	ldr	r3, [sp, #20]
    2986:	3b02      	subs	r3, #2
    2988:	009b      	lsls	r3, r3, #2
    298a:	2201      	movs	r2, #1
    298c:	4313      	orrs	r3, r2
    298e:	702b      	strb	r3, [r5, #0]
    2990:	e7d0      	b.n	2934 <stb_ccm_secure+0xf0>
						buffer + hdr_len + pld_len,
    2992:	9b04      	ldr	r3, [sp, #16]
    2994:	1999      	adds	r1, r3, r6
				compute_mic(buffer,
    2996:	9803      	ldr	r0, [sp, #12]
    2998:	4684      	mov	ip, r0
    299a:	4461      	add	r1, ip
    299c:	9600      	str	r6, [sp, #0]
    299e:	002a      	movs	r2, r5
    29a0:	4c34      	ldr	r4, [pc, #208]	; (2a74 <stb_ccm_secure+0x230>)
    29a2:	47a0      	blx	r4
    29a4:	e7da      	b.n	295c <stb_ccm_secure+0x118>
		if (enc_flag == ENCRYPTION_REQD) {
    29a6:	4643      	mov	r3, r8
    29a8:	2b01      	cmp	r3, #1
    29aa:	d00d      	beq.n	29c8 <stb_ccm_secure+0x184>
		if (mic_len > 0) {
    29ac:	2f00      	cmp	r7, #0
    29ae:	d0e1      	beq.n	2974 <stb_ccm_secure+0x130>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    29b0:	73ee      	strb	r6, [r5, #15]
			buffer += hdr_len + pld_len;
    29b2:	9b03      	ldr	r3, [sp, #12]
    29b4:	445b      	add	r3, fp
    29b6:	0018      	movs	r0, r3
			if (memcmp(buffer, rcvd_mic, mic_len)) {
    29b8:	003a      	movs	r2, r7
    29ba:	a906      	add	r1, sp, #24
    29bc:	4b2e      	ldr	r3, [pc, #184]	; (2a78 <stb_ccm_secure+0x234>)
    29be:	4798      	blx	r3
    29c0:	2800      	cmp	r0, #0
    29c2:	d0d7      	beq.n	2974 <stb_ccm_secure+0x130>
				return STB_CCM_MICERR;
    29c4:	2003      	movs	r0, #3
    29c6:	e037      	b.n	2a38 <stb_ccm_secure+0x1f4>
			nonce[0] = PLAINTEXT_FLAG;
    29c8:	702b      	strb	r3, [r5, #0]
			encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    29ca:	9b03      	ldr	r3, [sp, #12]
    29cc:	9a04      	ldr	r2, [sp, #16]
    29ce:	4694      	mov	ip, r2
    29d0:	4463      	add	r3, ip
    29d2:	0018      	movs	r0, r3
    29d4:	0033      	movs	r3, r6
    29d6:	003a      	movs	r2, r7
    29d8:	0029      	movs	r1, r5
    29da:	4c25      	ldr	r4, [pc, #148]	; (2a70 <stb_ccm_secure+0x22c>)
    29dc:	47a0      	blx	r4
		if (mic_len > 0) {
    29de:	2f00      	cmp	r7, #0
    29e0:	d0c8      	beq.n	2974 <stb_ccm_secure+0x130>
			nonce[0] = nonce_0;
    29e2:	464b      	mov	r3, r9
    29e4:	702b      	strb	r3, [r5, #0]
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    29e6:	73ee      	strb	r6, [r5, #15]
				compute_mic(buffer,
    29e8:	9600      	str	r6, [sp, #0]
    29ea:	9b04      	ldr	r3, [sp, #16]
    29ec:	002a      	movs	r2, r5
    29ee:	a906      	add	r1, sp, #24
    29f0:	9803      	ldr	r0, [sp, #12]
    29f2:	4c20      	ldr	r4, [pc, #128]	; (2a74 <stb_ccm_secure+0x230>)
    29f4:	47a0      	blx	r4
    29f6:	e7dc      	b.n	29b2 <stb_ccm_secure+0x16e>
	TRX_SLEEP();
    29f8:	4b17      	ldr	r3, [pc, #92]	; (2a58 <stb_ccm_secure+0x214>)
    29fa:	4798      	blx	r3
    29fc:	e7be      	b.n	297c <stb_ccm_secure+0x138>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    29fe:	2300      	movs	r3, #0
    2a00:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    2a02:	2704      	movs	r7, #4
    2a04:	e002      	b.n	2a0c <stb_ccm_secure+0x1c8>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    2a06:	2300      	movs	r3, #0
    2a08:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    2a0a:	2710      	movs	r7, #16
	if ((sec_level & ~0x7) ||
    2a0c:	9b03      	ldr	r3, [sp, #12]
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00a      	beq.n	2a28 <stb_ccm_secure+0x1e4>
			(buffer == NULL) ||
    2a12:	2d00      	cmp	r5, #0
    2a14:	d008      	beq.n	2a28 <stb_ccm_secure+0x1e4>
			((uint16_t)pld_len + (uint16_t)hdr_len +
    2a16:	9b04      	ldr	r3, [sp, #16]
    2a18:	469b      	mov	fp, r3
    2a1a:	44b3      	add	fp, r6
			(uint16_t)mic_len > 127)
    2a1c:	9705      	str	r7, [sp, #20]
			((uint16_t)pld_len + (uint16_t)hdr_len +
    2a1e:	465b      	mov	r3, fp
    2a20:	19db      	adds	r3, r3, r7
			(nonce == NULL) ||
    2a22:	2b7f      	cmp	r3, #127	; 0x7f
    2a24:	dc00      	bgt.n	2a28 <stb_ccm_secure+0x1e4>
    2a26:	e74e      	b.n	28c6 <stb_ccm_secure+0x82>
		TRX_SLEEP();
    2a28:	4b08      	ldr	r3, [pc, #32]	; (2a4c <stb_ccm_secure+0x208>)
    2a2a:	781b      	ldrb	r3, [r3, #0]
    2a2c:	2b01      	cmp	r3, #1
    2a2e:	d100      	bne.n	2a32 <stb_ccm_secure+0x1ee>
    2a30:	e746      	b.n	28c0 <stb_ccm_secure+0x7c>
		sal_aes_clean_up();
    2a32:	4b0e      	ldr	r3, [pc, #56]	; (2a6c <stb_ccm_secure+0x228>)
    2a34:	4798      	blx	r3
		return (STB_CCM_ILLPARM);
    2a36:	2001      	movs	r0, #1
}
    2a38:	b00b      	add	sp, #44	; 0x2c
    2a3a:	bc3c      	pop	{r2, r3, r4, r5}
    2a3c:	4690      	mov	r8, r2
    2a3e:	4699      	mov	r9, r3
    2a40:	46a2      	mov	sl, r4
    2a42:	46ab      	mov	fp, r5
    2a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	200001c1 	.word	0x200001c1
    2a4c:	200001c0 	.word	0x200001c0
    2a50:	00003121 	.word	0x00003121
    2a54:	00007ed0 	.word	0x00007ed0
    2a58:	000026f9 	.word	0x000026f9
    2a5c:	20000048 	.word	0x20000048
    2a60:	000031e1 	.word	0x000031e1
    2a64:	200001b0 	.word	0x200001b0
    2a68:	000074ef 	.word	0x000074ef
    2a6c:	00003171 	.word	0x00003171
    2a70:	00002b6d 	.word	0x00002b6d
    2a74:	00002ae1 	.word	0x00002ae1
    2a78:	000074d1 	.word	0x000074d1

00002a7c <encrypt_with_padding>:
 *
 * @param start Pointer to start address
 * @param buflen Number of bytes to be encrypted; if 0, nothing happens
 */
void encrypt_with_padding(uint8_t *start, uint8_t buflen)
{
    2a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7e:	b085      	sub	sp, #20
    2a80:	0004      	movs	r4, r0
    2a82:	000e      	movs	r6, r1
	/* Encrypt the "full blocks". */
	while (buflen >= AES_BLOCKSIZE) {
    2a84:	290f      	cmp	r1, #15
    2a86:	d90f      	bls.n	2aa8 <encrypt_with_padding+0x2c>
    2a88:	000d      	movs	r5, r1
    2a8a:	3d10      	subs	r5, #16
    2a8c:	b2ed      	uxtb	r5, r5
    2a8e:	092d      	lsrs	r5, r5, #4
    2a90:	3501      	adds	r5, #1
    2a92:	012d      	lsls	r5, r5, #4
    2a94:	1945      	adds	r5, r0, r5
#if (SAL_TYPE == AT86RF2xx)
		sal_aes_wrrd(start, NULL);
    2a96:	4f0f      	ldr	r7, [pc, #60]	; (2ad4 <encrypt_with_padding+0x58>)
    2a98:	2100      	movs	r1, #0
    2a9a:	0020      	movs	r0, r4
    2a9c:	47b8      	blx	r7
#else
		sal_aes_exec(start);
#endif
		start += AES_BLOCKSIZE;
    2a9e:	3410      	adds	r4, #16
	while (buflen >= AES_BLOCKSIZE) {
    2aa0:	42ac      	cmp	r4, r5
    2aa2:	d1f9      	bne.n	2a98 <encrypt_with_padding+0x1c>
    2aa4:	230f      	movs	r3, #15
    2aa6:	401e      	ands	r6, r3
		buflen -= AES_BLOCKSIZE;
	}

	/* Pad the possible rest and encrypt it. */
	if (buflen) {
    2aa8:	2e00      	cmp	r6, #0
    2aaa:	d101      	bne.n	2ab0 <encrypt_with_padding+0x34>
		sal_aes_wrrd(locbuf, NULL);
#else
		sal_aes_exec(locbuf);
#endif
	}
}
    2aac:	b005      	add	sp, #20
    2aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(locbuf, start, buflen);
    2ab0:	0032      	movs	r2, r6
    2ab2:	0021      	movs	r1, r4
    2ab4:	4668      	mov	r0, sp
    2ab6:	4b08      	ldr	r3, [pc, #32]	; (2ad8 <encrypt_with_padding+0x5c>)
    2ab8:	4798      	blx	r3
		memset(locbuf + buflen, 0, AES_BLOCKSIZE - buflen);
    2aba:	2210      	movs	r2, #16
    2abc:	1b92      	subs	r2, r2, r6
    2abe:	0030      	movs	r0, r6
    2ac0:	4468      	add	r0, sp
    2ac2:	2100      	movs	r1, #0
    2ac4:	4b05      	ldr	r3, [pc, #20]	; (2adc <encrypt_with_padding+0x60>)
    2ac6:	4798      	blx	r3
		sal_aes_wrrd(locbuf, NULL);
    2ac8:	2100      	movs	r1, #0
    2aca:	4668      	mov	r0, sp
    2acc:	4b01      	ldr	r3, [pc, #4]	; (2ad4 <encrypt_with_padding+0x58>)
    2ace:	4798      	blx	r3
}
    2ad0:	e7ec      	b.n	2aac <encrypt_with_padding+0x30>
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	00003175 	.word	0x00003175
    2ad8:	000074ef 	.word	0x000074ef
    2adc:	00007501 	.word	0x00007501

00002ae0 <compute_mic>:
void compute_mic(uint8_t *buffer,
		uint8_t *mic,
		uint8_t *nonce,
		uint8_t hdr_len,
		uint8_t pld_len)
{
    2ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae2:	b087      	sub	sp, #28
    2ae4:	0005      	movs	r5, r0
    2ae6:	9100      	str	r1, [sp, #0]
    2ae8:	9201      	str	r2, [sp, #4]
    2aea:	001c      	movs	r4, r3
    2aec:	ab0c      	add	r3, sp, #48	; 0x30
    2aee:	781e      	ldrb	r6, [r3, #0]
	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2af0:	2200      	movs	r2, #0
    2af2:	2100      	movs	r1, #0
    2af4:	2000      	movs	r0, #0
    2af6:	4f18      	ldr	r7, [pc, #96]	; (2b58 <compute_mic+0x78>)
    2af8:	47b8      	blx	r7
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(nonce, NULL);
    2afa:	2100      	movs	r1, #0
    2afc:	9801      	ldr	r0, [sp, #4]
    2afe:	4b17      	ldr	r3, [pc, #92]	; (2b5c <compute_mic+0x7c>)
    2b00:	4798      	blx	r3
#else
	sal_aes_exec(nonce);
#endif
	sal_aes_setup(NULL, AES_MODE_CBC, AES_DIR_ENCRYPT);
    2b02:	2200      	movs	r2, #0
    2b04:	2102      	movs	r1, #2
    2b06:	2000      	movs	r0, #0
    2b08:	47b8      	blx	r7

	if (hdr_len) {
    2b0a:	2c00      	cmp	r4, #0
    2b0c:	d108      	bne.n	2b20 <compute_mic+0x40>
			encrypt_with_padding(buffer + firstlen,
					hdr_len - firstlen);
		}
	}

	encrypt_with_padding(buffer + hdr_len, pld_len);
    2b0e:	1928      	adds	r0, r5, r4
    2b10:	0031      	movs	r1, r6
    2b12:	4b13      	ldr	r3, [pc, #76]	; (2b60 <compute_mic+0x80>)
    2b14:	4798      	blx	r3

	sal_aes_read(mic);
    2b16:	9800      	ldr	r0, [sp, #0]
    2b18:	4b12      	ldr	r3, [pc, #72]	; (2b64 <compute_mic+0x84>)
    2b1a:	4798      	blx	r3
}
    2b1c:	b007      	add	sp, #28
    2b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		firstlen = MIN(AES_BLOCKSIZE - 2, hdr_len);
    2b20:	1c27      	adds	r7, r4, #0
    2b22:	2c0e      	cmp	r4, #14
    2b24:	d900      	bls.n	2b28 <compute_mic+0x48>
    2b26:	270e      	movs	r7, #14
    2b28:	b2ff      	uxtb	r7, r7
		locbuf[0] = 0;
    2b2a:	2300      	movs	r3, #0
    2b2c:	aa02      	add	r2, sp, #8
    2b2e:	7013      	strb	r3, [r2, #0]
		locbuf[1] = hdr_len;
    2b30:	0013      	movs	r3, r2
    2b32:	7054      	strb	r4, [r2, #1]
		memcpy(locbuf + 2, buffer, firstlen);
    2b34:	003a      	movs	r2, r7
    2b36:	0029      	movs	r1, r5
    2b38:	1c98      	adds	r0, r3, #2
    2b3a:	4b0b      	ldr	r3, [pc, #44]	; (2b68 <compute_mic+0x88>)
    2b3c:	4798      	blx	r3
		encrypt_with_padding(locbuf, firstlen + 2);
    2b3e:	1cb9      	adds	r1, r7, #2
    2b40:	b2c9      	uxtb	r1, r1
    2b42:	a802      	add	r0, sp, #8
    2b44:	4b06      	ldr	r3, [pc, #24]	; (2b60 <compute_mic+0x80>)
    2b46:	4798      	blx	r3
		if (firstlen < hdr_len) {
    2b48:	42bc      	cmp	r4, r7
    2b4a:	d9e0      	bls.n	2b0e <compute_mic+0x2e>
			encrypt_with_padding(buffer + firstlen,
    2b4c:	1be1      	subs	r1, r4, r7
    2b4e:	b2c9      	uxtb	r1, r1
    2b50:	19e8      	adds	r0, r5, r7
    2b52:	4b03      	ldr	r3, [pc, #12]	; (2b60 <compute_mic+0x80>)
    2b54:	4798      	blx	r3
    2b56:	e7da      	b.n	2b0e <compute_mic+0x2e>
    2b58:	000031e1 	.word	0x000031e1
    2b5c:	00003175 	.word	0x00003175
    2b60:	00002a7d 	.word	0x00002a7d
    2b64:	00003319 	.word	0x00003319
    2b68:	000074ef 	.word	0x000074ef

00002b6c <encrypt_pldmic>:
 */
void encrypt_pldmic(uint8_t *buffer,
		uint8_t *nonce,
		uint8_t mic_len,
		uint8_t pld_len)
{
    2b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b6e:	46d6      	mov	lr, sl
    2b70:	464f      	mov	r7, r9
    2b72:	4646      	mov	r6, r8
    2b74:	b5c0      	push	{r6, r7, lr}
    2b76:	b084      	sub	sp, #16
    2b78:	0004      	movs	r4, r0
    2b7a:	000f      	movs	r7, r1
    2b7c:	0016      	movs	r6, r2
    2b7e:	001d      	movs	r5, r3
	uint8_t ctr;
	uint8_t i;
	uint8_t keystream[AES_BLOCKSIZE];
	uint8_t *keystreamptr;

	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2b80:	2200      	movs	r2, #0
    2b82:	2100      	movs	r1, #0
    2b84:	2000      	movs	r0, #0
    2b86:	4b31      	ldr	r3, [pc, #196]	; (2c4c <encrypt_pldmic+0xe0>)
    2b88:	4798      	blx	r3

	/* Init first keystream block. */
	nonce[AES_BLOCKSIZE - 1] = ctr = 1;
    2b8a:	2301      	movs	r3, #1
    2b8c:	73fb      	strb	r3, [r7, #15]

	if (pld_len > 0) {
    2b8e:	2d00      	cmp	r5, #0
    2b90:	d106      	bne.n	2ba0 <encrypt_pldmic+0x34>
{
    2b92:	2301      	movs	r3, #1
    2b94:	469a      	mov	sl, r3
				/* Prepare the keystream for MIC. */
				nonce[AES_BLOCKSIZE - 1] = 0;

				sal_aes_wrrd(nonce, keystream);
			} else {
				sal_aes_read(keystream);
    2b96:	4b2e      	ldr	r3, [pc, #184]	; (2c50 <encrypt_pldmic+0xe4>)
    2b98:	4699      	mov	r9, r3
				sal_aes_wrrd(nonce, keystream);
    2b9a:	4b2e      	ldr	r3, [pc, #184]	; (2c54 <encrypt_pldmic+0xe8>)
    2b9c:	4698      	mov	r8, r3
    2b9e:	e02e      	b.n	2bfe <encrypt_pldmic+0x92>
		sal_aes_wrrd(nonce, NULL);
    2ba0:	2100      	movs	r1, #0
    2ba2:	0038      	movs	r0, r7
    2ba4:	4b2b      	ldr	r3, [pc, #172]	; (2c54 <encrypt_pldmic+0xe8>)
    2ba6:	4798      	blx	r3
    2ba8:	e7f3      	b.n	2b92 <encrypt_pldmic+0x26>
				sal_aes_read(keystream);
    2baa:	4668      	mov	r0, sp
    2bac:	47c8      	blx	r9
    2bae:	e02f      	b.n	2c10 <encrypt_pldmic+0xa4>
			}
		} else {
			/* Prepare the next keystream block. */
			nonce[AES_BLOCKSIZE - 1] = ++ctr;
    2bb0:	4653      	mov	r3, sl
    2bb2:	3301      	adds	r3, #1
    2bb4:	b2db      	uxtb	r3, r3
    2bb6:	469a      	mov	sl, r3
    2bb8:	73fb      	strb	r3, [r7, #15]

			sal_aes_wrrd(nonce, keystream);
    2bba:	4669      	mov	r1, sp
    2bbc:	0038      	movs	r0, r7
    2bbe:	4b25      	ldr	r3, [pc, #148]	; (2c54 <encrypt_pldmic+0xe8>)
    2bc0:	4798      	blx	r3
		}

		/* En/decrypt payload. */

		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2bc2:	1c2b      	adds	r3, r5, #0
    2bc4:	2d10      	cmp	r5, #16
    2bc6:	d900      	bls.n	2bca <encrypt_pldmic+0x5e>
    2bc8:	2310      	movs	r3, #16
    2bca:	b2db      	uxtb	r3, r3
				i--;
    2bcc:	1e58      	subs	r0, r3, #1
    2bce:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d105      	bne.n	2be0 <encrypt_pldmic+0x74>
    2bd4:	e011      	b.n	2bfa <encrypt_pldmic+0x8e>
    2bd6:	b2db      	uxtb	r3, r3
				i--;
    2bd8:	1e58      	subs	r0, r3, #1
    2bda:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d01c      	beq.n	2c1a <encrypt_pldmic+0xae>
    2be0:	3001      	adds	r0, #1
{
    2be2:	2300      	movs	r3, #0
		                /* */) {
			*buffer++ ^= *keystreamptr++;
    2be4:	466a      	mov	r2, sp
    2be6:	5c9a      	ldrb	r2, [r3, r2]
    2be8:	5ce1      	ldrb	r1, [r4, r3]
    2bea:	404a      	eors	r2, r1
    2bec:	54e2      	strb	r2, [r4, r3]
    2bee:	3301      	adds	r3, #1
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2bf0:	4298      	cmp	r0, r3
    2bf2:	d1f7      	bne.n	2be4 <encrypt_pldmic+0x78>
    2bf4:	18e4      	adds	r4, r4, r3
		}

		if (pld_len <= AES_BLOCKSIZE) {
    2bf6:	2d10      	cmp	r5, #16
    2bf8:	d90f      	bls.n	2c1a <encrypt_pldmic+0xae>
			break;
		}

		pld_len -= AES_BLOCKSIZE;
    2bfa:	3d10      	subs	r5, #16
    2bfc:	b2ed      	uxtb	r5, r5
		if (pld_len <= AES_BLOCKSIZE) { /* Last block */
    2bfe:	2d10      	cmp	r5, #16
    2c00:	d8d6      	bhi.n	2bb0 <encrypt_pldmic+0x44>
			if (mic_len) {
    2c02:	2e00      	cmp	r6, #0
    2c04:	d0d1      	beq.n	2baa <encrypt_pldmic+0x3e>
				nonce[AES_BLOCKSIZE - 1] = 0;
    2c06:	2300      	movs	r3, #0
    2c08:	73fb      	strb	r3, [r7, #15]
				sal_aes_wrrd(nonce, keystream);
    2c0a:	4669      	mov	r1, sp
    2c0c:	0038      	movs	r0, r7
    2c0e:	47c0      	blx	r8
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2c10:	1c2b      	adds	r3, r5, #0
    2c12:	2d10      	cmp	r5, #16
    2c14:	d9df      	bls.n	2bd6 <encrypt_pldmic+0x6a>
    2c16:	2310      	movs	r3, #16
    2c18:	e7dd      	b.n	2bd6 <encrypt_pldmic+0x6a>
	}

	/* En/decrypt MIC. */

	if (mic_len) {
    2c1a:	2e00      	cmp	r6, #0
    2c1c:	d105      	bne.n	2c2a <encrypt_pldmic+0xbe>

		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
			*buffer++ ^= *keystreamptr++;
		}
	}
}
    2c1e:	b004      	add	sp, #16
    2c20:	bc1c      	pop	{r2, r3, r4}
    2c22:	4690      	mov	r8, r2
    2c24:	4699      	mov	r9, r3
    2c26:	46a2      	mov	sl, r4
    2c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sal_aes_read(keystream);
    2c2a:	4668      	mov	r0, sp
    2c2c:	4b08      	ldr	r3, [pc, #32]	; (2c50 <encrypt_pldmic+0xe4>)
    2c2e:	4798      	blx	r3
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    2c30:	3e01      	subs	r6, #1
    2c32:	b2f2      	uxtb	r2, r6
    2c34:	3201      	adds	r2, #1
    2c36:	2300      	movs	r3, #0
			*buffer++ ^= *keystreamptr++;
    2c38:	4669      	mov	r1, sp
    2c3a:	5c59      	ldrb	r1, [r3, r1]
    2c3c:	5ce0      	ldrb	r0, [r4, r3]
    2c3e:	4041      	eors	r1, r0
    2c40:	54e1      	strb	r1, [r4, r3]
    2c42:	3301      	adds	r3, #1
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    2c44:	4293      	cmp	r3, r2
    2c46:	d1f7      	bne.n	2c38 <encrypt_pldmic+0xcc>
    2c48:	e7e9      	b.n	2c1e <encrypt_pldmic+0xb2>
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	000031e1 	.word	0x000031e1
    2c50:	00003319 	.word	0x00003319
    2c54:	00003175 	.word	0x00003175

00002c58 <MiMem_Alloc>:
********************************************************************/
uint8_t* MiMem_Alloc(uint8_t size)
{
    uint8_t loopIndex = 0;

    if (size <= MIMEM_BUFFER_SIZE)
    2c58:	28a0      	cmp	r0, #160	; 0xa0
    2c5a:	d81a      	bhi.n	2c92 <MiMem_Alloc+0x3a>
    {
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
        {
            if (mimemBuffers[loopIndex].bufferFlag == false)
    2c5c:	23a4      	movs	r3, #164	; 0xa4
    2c5e:	4a0e      	ldr	r2, [pc, #56]	; (2c98 <MiMem_Alloc+0x40>)
    2c60:	5cd3      	ldrb	r3, [r2, r3]
    2c62:	2b00      	cmp	r3, #0
    2c64:	d00b      	beq.n	2c7e <MiMem_Alloc+0x26>
    2c66:	4a0d      	ldr	r2, [pc, #52]	; (2c9c <MiMem_Alloc+0x44>)
    2c68:	2301      	movs	r3, #1
    2c6a:	0018      	movs	r0, r3
    2c6c:	7811      	ldrb	r1, [r2, #0]
    2c6e:	2900      	cmp	r1, #0
    2c70:	d006      	beq.n	2c80 <MiMem_Alloc+0x28>
    2c72:	3301      	adds	r3, #1
    2c74:	32a8      	adds	r2, #168	; 0xa8
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    2c76:	2b0a      	cmp	r3, #10
    2c78:	d1f7      	bne.n	2c6a <MiMem_Alloc+0x12>
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
            }
        }
    }
    //printf("\r\n MiMem Buffer Full/unavailable for given size");
    return NULL;
    2c7a:	2000      	movs	r0, #0
}
    2c7c:	4770      	bx	lr
            if (mimemBuffers[loopIndex].bufferFlag == false)
    2c7e:	2000      	movs	r0, #0
                mimemBuffers[loopIndex].bufferFlag = true;
    2c80:	23a8      	movs	r3, #168	; 0xa8
    2c82:	4343      	muls	r3, r0
    2c84:	4804      	ldr	r0, [pc, #16]	; (2c98 <MiMem_Alloc+0x40>)
    2c86:	18c0      	adds	r0, r0, r3
    2c88:	0003      	movs	r3, r0
    2c8a:	33a4      	adds	r3, #164	; 0xa4
    2c8c:	2201      	movs	r2, #1
    2c8e:	701a      	strb	r2, [r3, #0]
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
    2c90:	e7f4      	b.n	2c7c <MiMem_Alloc+0x24>
    return NULL;
    2c92:	2000      	movs	r0, #0
    2c94:	e7f2      	b.n	2c7c <MiMem_Alloc+0x24>
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	20000b24 	.word	0x20000b24
    2c9c:	20000c70 	.word	0x20000c70

00002ca0 <MiMem_Free>:
* the given memory else returns error
*
* Note:			    none
********************************************************************/
uint8_t MiMem_Free(uint8_t* buffPtr)
{
    2ca0:	b530      	push	{r4, r5, lr}
    2ca2:	4b0d      	ldr	r3, [pc, #52]	; (2cd8 <MiMem_Free+0x38>)
    2ca4:	2200      	movs	r2, #0
    2ca6:	e003      	b.n	2cb0 <MiMem_Free+0x10>
    2ca8:	3201      	adds	r2, #1
    2caa:	33a8      	adds	r3, #168	; 0xa8
	uint8_t loopIndex = 0;
	for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    2cac:	2a0a      	cmp	r2, #10
    2cae:	d010      	beq.n	2cd2 <MiMem_Free+0x32>
	{
		if ((mimemBuffers[loopIndex].bufferFlag == true) &&
    2cb0:	0015      	movs	r5, r2
    2cb2:	0019      	movs	r1, r3
    2cb4:	31a4      	adds	r1, #164	; 0xa4
    2cb6:	7809      	ldrb	r1, [r1, #0]
    2cb8:	2900      	cmp	r1, #0
    2cba:	d0f5      	beq.n	2ca8 <MiMem_Free+0x8>
    2cbc:	4298      	cmp	r0, r3
    2cbe:	d1f3      	bne.n	2ca8 <MiMem_Free+0x8>
		   ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer == buffPtr))
		{
			//printf("\r\n MiMem Buffer Free: %d", loopIndex);
			mimemBuffers[loopIndex].bufferFlag = false;
    2cc0:	23a8      	movs	r3, #168	; 0xa8
    2cc2:	435d      	muls	r5, r3
    2cc4:	4b04      	ldr	r3, [pc, #16]	; (2cd8 <MiMem_Free+0x38>)
    2cc6:	195d      	adds	r5, r3, r5
    2cc8:	35a4      	adds	r5, #164	; 0xa4
    2cca:	2200      	movs	r2, #0
    2ccc:	702a      	strb	r2, [r5, #0]
			return 0;
    2cce:	2000      	movs	r0, #0
    2cd0:	e000      	b.n	2cd4 <MiMem_Free+0x34>
		}
	}
	//printf("\r\n MiMem Buffer Already Free");
	return 0xff;
    2cd2:	20ff      	movs	r0, #255	; 0xff
}
    2cd4:	bd30      	pop	{r4, r5, pc}
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	20000b24 	.word	0x20000b24

00002cdc <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    2cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cde:	46c6      	mov	lr, r8
    2ce0:	b500      	push	{lr}
    2ce2:	0007      	movs	r7, r0
    2ce4:	4688      	mov	r8, r1
    2ce6:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    2ce8:	b672      	cpsid	i
    2cea:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    2cee:	2200      	movs	r2, #0
    2cf0:	4b1f      	ldr	r3, [pc, #124]	; (2d70 <miQueueReadOrRemove+0x94>)
    2cf2:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    2cf4:	7a03      	ldrb	r3, [r0, #8]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d037      	beq.n	2d6a <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    2cfa:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    2cfc:	2d00      	cmp	r5, #0
    2cfe:	d019      	beq.n	2d34 <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    2d00:	2c00      	cmp	r4, #0
    2d02:	d00c      	beq.n	2d1e <miQueueReadOrRemove+0x42>
    2d04:	0026      	movs	r6, r4
    2d06:	e000      	b.n	2d0a <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    2d08:	001c      	movs	r4, r3
				match = search->criteria_func(
    2d0a:	6869      	ldr	r1, [r5, #4]
    2d0c:	6860      	ldr	r0, [r4, #4]
    2d0e:	682b      	ldr	r3, [r5, #0]
    2d10:	4798      	blx	r3
				if (match) {
    2d12:	2800      	cmp	r0, #0
    2d14:	d10f      	bne.n	2d36 <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    2d16:	6823      	ldr	r3, [r4, #0]
    2d18:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d1f4      	bne.n	2d08 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    2d1e:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    2d20:	2201      	movs	r2, #1
    2d22:	4b13      	ldr	r3, [pc, #76]	; (2d70 <miQueueReadOrRemove+0x94>)
    2d24:	701a      	strb	r2, [r3, #0]
    2d26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2d2a:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    2d2c:	0020      	movs	r0, r4
    2d2e:	bc04      	pop	{r2}
    2d30:	4690      	mov	r8, r2
    2d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    2d34:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    2d36:	2c00      	cmp	r4, #0
    2d38:	d0f2      	beq.n	2d20 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    2d3a:	4643      	mov	r3, r8
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d1ef      	bne.n	2d20 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    2d40:	683b      	ldr	r3, [r7, #0]
    2d42:	429c      	cmp	r4, r3
    2d44:	d00c      	beq.n	2d60 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    2d46:	6823      	ldr	r3, [r4, #0]
    2d48:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    2d4a:	687b      	ldr	r3, [r7, #4]
    2d4c:	429c      	cmp	r4, r3
    2d4e:	d00a      	beq.n	2d66 <miQueueReadOrRemove+0x8a>
				q->size--;
    2d50:	7a3b      	ldrb	r3, [r7, #8]
    2d52:	3b01      	subs	r3, #1
    2d54:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    2d56:	683b      	ldr	r3, [r7, #0]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d1e1      	bne.n	2d20 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    2d5c:	607b      	str	r3, [r7, #4]
    2d5e:	e7df      	b.n	2d20 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    2d60:	6823      	ldr	r3, [r4, #0]
    2d62:	603b      	str	r3, [r7, #0]
    2d64:	e7f1      	b.n	2d4a <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    2d66:	607e      	str	r6, [r7, #4]
    2d68:	e7f2      	b.n	2d50 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    2d6a:	2400      	movs	r4, #0
    2d6c:	e7d8      	b.n	2d20 <miQueueReadOrRemove+0x44>
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	20000008 	.word	0x20000008

00002d74 <miQueueInit>:
	q->head = NULL;
    2d74:	2300      	movs	r3, #0
    2d76:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    2d78:	6043      	str	r3, [r0, #4]
	q->size = 0;
    2d7a:	7203      	strb	r3, [r0, #8]
}
    2d7c:	4770      	bx	lr
	...

00002d80 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    2d80:	b672      	cpsid	i
    2d82:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d86:	2200      	movs	r2, #0
    2d88:	4b0a      	ldr	r3, [pc, #40]	; (2db4 <miQueueAppend+0x34>)
    2d8a:	701a      	strb	r2, [r3, #0]
		if (q->size == 0) {
    2d8c:	7a03      	ldrb	r3, [r0, #8]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d00e      	beq.n	2db0 <miQueueAppend+0x30>
			q->tail->nextItem = buf;
    2d92:	6843      	ldr	r3, [r0, #4]
    2d94:	6019      	str	r1, [r3, #0]
		q->tail = buf;
    2d96:	6041      	str	r1, [r0, #4]
		buf->nextItem = NULL;
    2d98:	2300      	movs	r3, #0
    2d9a:	600b      	str	r3, [r1, #0]
		q->size++;
    2d9c:	7a03      	ldrb	r3, [r0, #8]
    2d9e:	3301      	adds	r3, #1
    2da0:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    2da2:	2201      	movs	r2, #1
    2da4:	4b03      	ldr	r3, [pc, #12]	; (2db4 <miQueueAppend+0x34>)
    2da6:	701a      	strb	r2, [r3, #0]
    2da8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2dac:	b662      	cpsie	i
} /* miQueueAppend */
    2dae:	4770      	bx	lr
			q->head = buf;
    2db0:	6001      	str	r1, [r0, #0]
    2db2:	e7f0      	b.n	2d96 <miQueueAppend+0x16>
    2db4:	20000008 	.word	0x20000008

00002db8 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    2db8:	b510      	push	{r4, lr}
    2dba:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    2dbc:	2100      	movs	r1, #0
    2dbe:	4b01      	ldr	r3, [pc, #4]	; (2dc4 <miQueueRemove+0xc>)
    2dc0:	4798      	blx	r3
}
    2dc2:	bd10      	pop	{r4, pc}
    2dc4:	00002cdd 	.word	0x00002cdd

00002dc8 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2dc8:	b530      	push	{r4, r5, lr}
	if (timers) {
    2dca:	4b14      	ldr	r3, [pc, #80]	; (2e1c <placeTimer+0x54>)
    2dcc:	681d      	ldr	r5, [r3, #0]
    2dce:	2d00      	cmp	r5, #0
    2dd0:	d01c      	beq.n	2e0c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2dd2:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2dd4:	6869      	ldr	r1, [r5, #4]
    2dd6:	428a      	cmp	r2, r1
    2dd8:	d309      	bcc.n	2dee <placeTimer+0x26>
    2dda:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2ddc:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2dde:	6823      	ldr	r3, [r4, #0]
    2de0:	2b00      	cmp	r3, #0
    2de2:	d008      	beq.n	2df6 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2de4:	6859      	ldr	r1, [r3, #4]
    2de6:	4291      	cmp	r1, r2
    2de8:	d803      	bhi.n	2df2 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2dea:	001c      	movs	r4, r3
    2dec:	e7f6      	b.n	2ddc <placeTimer+0x14>
    2dee:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2df0:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2df2:	1a89      	subs	r1, r1, r2
    2df4:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2df6:	6042      	str	r2, [r0, #4]

		if (prev) {
    2df8:	2c00      	cmp	r4, #0
    2dfa:	d003      	beq.n	2e04 <placeTimer+0x3c>
			timer->next = prev->next;
    2dfc:	6823      	ldr	r3, [r4, #0]
    2dfe:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2e00:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2e02:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2e04:	6005      	str	r5, [r0, #0]
			timers = timer;
    2e06:	4b05      	ldr	r3, [pc, #20]	; (2e1c <placeTimer+0x54>)
    2e08:	6018      	str	r0, [r3, #0]
    2e0a:	e7fa      	b.n	2e02 <placeTimer+0x3a>
		timer->next = NULL;
    2e0c:	2300      	movs	r3, #0
    2e0e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2e10:	6883      	ldr	r3, [r0, #8]
    2e12:	6043      	str	r3, [r0, #4]
		timers = timer;
    2e14:	4b01      	ldr	r3, [pc, #4]	; (2e1c <placeTimer+0x54>)
    2e16:	6018      	str	r0, [r3, #0]
}
    2e18:	e7f3      	b.n	2e02 <placeTimer+0x3a>
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	200001c4 	.word	0x200001c4

00002e20 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2e20:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2e22:	4a04      	ldr	r2, [pc, #16]	; (2e34 <SYS_HwExpiry_Cb+0x14>)
    2e24:	7813      	ldrb	r3, [r2, #0]
    2e26:	3301      	adds	r3, #1
    2e28:	b2db      	uxtb	r3, r3
    2e2a:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2e2c:	4802      	ldr	r0, [pc, #8]	; (2e38 <SYS_HwExpiry_Cb+0x18>)
    2e2e:	4b03      	ldr	r3, [pc, #12]	; (2e3c <SYS_HwExpiry_Cb+0x1c>)
    2e30:	4798      	blx	r3
}
    2e32:	bd10      	pop	{r4, pc}
    2e34:	200011b4 	.word	0x200011b4
    2e38:	00002710 	.word	0x00002710
    2e3c:	0000460d 	.word	0x0000460d

00002e40 <SYS_TimerInit>:
{
    2e40:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2e42:	2400      	movs	r4, #0
    2e44:	4b06      	ldr	r3, [pc, #24]	; (2e60 <SYS_TimerInit+0x20>)
    2e46:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2e48:	4806      	ldr	r0, [pc, #24]	; (2e64 <SYS_TimerInit+0x24>)
    2e4a:	4b07      	ldr	r3, [pc, #28]	; (2e68 <SYS_TimerInit+0x28>)
    2e4c:	4798      	blx	r3
	common_tc_init();
    2e4e:	4b07      	ldr	r3, [pc, #28]	; (2e6c <SYS_TimerInit+0x2c>)
    2e50:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2e52:	4807      	ldr	r0, [pc, #28]	; (2e70 <SYS_TimerInit+0x30>)
    2e54:	4b07      	ldr	r3, [pc, #28]	; (2e74 <SYS_TimerInit+0x34>)
    2e56:	4798      	blx	r3
	timers = NULL;
    2e58:	4b07      	ldr	r3, [pc, #28]	; (2e78 <SYS_TimerInit+0x38>)
    2e5a:	601c      	str	r4, [r3, #0]
}
    2e5c:	bd10      	pop	{r4, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	200011b4 	.word	0x200011b4
    2e64:	00002e21 	.word	0x00002e21
    2e68:	000046fd 	.word	0x000046fd
    2e6c:	00004679 	.word	0x00004679
    2e70:	00002710 	.word	0x00002710
    2e74:	0000460d 	.word	0x0000460d
    2e78:	200001c4 	.word	0x200001c4

00002e7c <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e7c:	4b0e      	ldr	r3, [pc, #56]	; (2eb8 <SYS_TimerStop+0x3c>)
    2e7e:	681a      	ldr	r2, [r3, #0]
    2e80:	2a00      	cmp	r2, #0
    2e82:	d014      	beq.n	2eae <SYS_TimerStop+0x32>
		if (t == timer) {
    2e84:	4282      	cmp	r2, r0
    2e86:	d013      	beq.n	2eb0 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e88:	6813      	ldr	r3, [r2, #0]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d00f      	beq.n	2eae <SYS_TimerStop+0x32>
		if (t == timer) {
    2e8e:	4298      	cmp	r0, r3
    2e90:	d001      	beq.n	2e96 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e92:	001a      	movs	r2, r3
    2e94:	e7f8      	b.n	2e88 <SYS_TimerStop+0xc>
			if (prev) {
    2e96:	2a00      	cmp	r2, #0
    2e98:	d00a      	beq.n	2eb0 <SYS_TimerStop+0x34>
				prev->next = t->next;
    2e9a:	6803      	ldr	r3, [r0, #0]
    2e9c:	6013      	str	r3, [r2, #0]
			if (t->next) {
    2e9e:	6803      	ldr	r3, [r0, #0]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d004      	beq.n	2eae <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    2ea4:	6842      	ldr	r2, [r0, #4]
    2ea6:	6859      	ldr	r1, [r3, #4]
    2ea8:	468c      	mov	ip, r1
    2eaa:	4462      	add	r2, ip
    2eac:	605a      	str	r2, [r3, #4]
}
    2eae:	4770      	bx	lr
				timers = t->next;
    2eb0:	4b01      	ldr	r3, [pc, #4]	; (2eb8 <SYS_TimerStop+0x3c>)
    2eb2:	6802      	ldr	r2, [r0, #0]
    2eb4:	601a      	str	r2, [r3, #0]
    2eb6:	e7f2      	b.n	2e9e <SYS_TimerStop+0x22>
    2eb8:	200001c4 	.word	0x200001c4

00002ebc <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ebc:	4b09      	ldr	r3, [pc, #36]	; (2ee4 <SYS_TimerStarted+0x28>)
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d00a      	beq.n	2eda <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2ec4:	4283      	cmp	r3, r0
    2ec6:	d00a      	beq.n	2ede <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ec8:	681b      	ldr	r3, [r3, #0]
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d003      	beq.n	2ed6 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2ece:	4298      	cmp	r0, r3
    2ed0:	d1fa      	bne.n	2ec8 <SYS_TimerStarted+0xc>
			return true;
    2ed2:	2001      	movs	r0, #1
    2ed4:	e000      	b.n	2ed8 <SYS_TimerStarted+0x1c>
	return false;
    2ed6:	2000      	movs	r0, #0
}
    2ed8:	4770      	bx	lr
	return false;
    2eda:	2000      	movs	r0, #0
    2edc:	e7fc      	b.n	2ed8 <SYS_TimerStarted+0x1c>
			return true;
    2ede:	2001      	movs	r0, #1
    2ee0:	e7fa      	b.n	2ed8 <SYS_TimerStarted+0x1c>
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	200001c4 	.word	0x200001c4

00002ee8 <SYS_TimerStart>:
{
    2ee8:	b510      	push	{r4, lr}
    2eea:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2eec:	4b04      	ldr	r3, [pc, #16]	; (2f00 <SYS_TimerStart+0x18>)
    2eee:	4798      	blx	r3
    2ef0:	2800      	cmp	r0, #0
    2ef2:	d000      	beq.n	2ef6 <SYS_TimerStart+0xe>
}
    2ef4:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2ef6:	0020      	movs	r0, r4
    2ef8:	4b02      	ldr	r3, [pc, #8]	; (2f04 <SYS_TimerStart+0x1c>)
    2efa:	4798      	blx	r3
}
    2efc:	e7fa      	b.n	2ef4 <SYS_TimerStart+0xc>
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	00002ebd 	.word	0x00002ebd
    2f04:	00002dc9 	.word	0x00002dc9

00002f08 <SYS_TimerTaskHandler>:
{
    2f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f0a:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    2f0c:	4b1d      	ldr	r3, [pc, #116]	; (2f84 <SYS_TimerTaskHandler+0x7c>)
    2f0e:	781b      	ldrb	r3, [r3, #0]
    2f10:	2b00      	cmp	r3, #0
    2f12:	d035      	beq.n	2f80 <SYS_TimerTaskHandler+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f14:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2f18:	4253      	negs	r3, r2
    2f1a:	4153      	adcs	r3, r2
    2f1c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2f1e:	b672      	cpsid	i
    2f20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2f24:	2100      	movs	r1, #0
    2f26:	4b18      	ldr	r3, [pc, #96]	; (2f88 <SYS_TimerTaskHandler+0x80>)
    2f28:	7019      	strb	r1, [r3, #0]
	return flags;
    2f2a:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    2f2c:	4a15      	ldr	r2, [pc, #84]	; (2f84 <SYS_TimerTaskHandler+0x7c>)
    2f2e:	7813      	ldrb	r3, [r2, #0]
    2f30:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    2f32:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2f34:	2800      	cmp	r0, #0
    2f36:	d005      	beq.n	2f44 <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    2f38:	3101      	adds	r1, #1
    2f3a:	4a13      	ldr	r2, [pc, #76]	; (2f88 <SYS_TimerTaskHandler+0x80>)
    2f3c:	7011      	strb	r1, [r2, #0]
    2f3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f42:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    2f44:	009d      	lsls	r5, r3, #2
    2f46:	18ed      	adds	r5, r5, r3
    2f48:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    2f4a:	4e10      	ldr	r6, [pc, #64]	; (2f8c <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    2f4c:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    2f4e:	e005      	b.n	2f5c <SYS_TimerTaskHandler+0x54>
			placeTimer(timer);
    2f50:	0020      	movs	r0, r4
    2f52:	4b0f      	ldr	r3, [pc, #60]	; (2f90 <SYS_TimerTaskHandler+0x88>)
    2f54:	4798      	blx	r3
    2f56:	e00d      	b.n	2f74 <SYS_TimerTaskHandler+0x6c>
			timer->handler(timer);
    2f58:	0020      	movs	r0, r4
    2f5a:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    2f5c:	6834      	ldr	r4, [r6, #0]
    2f5e:	2c00      	cmp	r4, #0
    2f60:	d00e      	beq.n	2f80 <SYS_TimerTaskHandler+0x78>
    2f62:	6863      	ldr	r3, [r4, #4]
    2f64:	429d      	cmp	r5, r3
    2f66:	d309      	bcc.n	2f7c <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    2f68:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    2f6a:	6823      	ldr	r3, [r4, #0]
    2f6c:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    2f6e:	7b23      	ldrb	r3, [r4, #12]
    2f70:	2b01      	cmp	r3, #1
    2f72:	d0ed      	beq.n	2f50 <SYS_TimerTaskHandler+0x48>
		if (timer->handler) {
    2f74:	6923      	ldr	r3, [r4, #16]
    2f76:	2b00      	cmp	r3, #0
    2f78:	d1ee      	bne.n	2f58 <SYS_TimerTaskHandler+0x50>
    2f7a:	e7ef      	b.n	2f5c <SYS_TimerTaskHandler+0x54>
		timers->timeout -= elapsed;
    2f7c:	1b5d      	subs	r5, r3, r5
    2f7e:	6065      	str	r5, [r4, #4]
}
    2f80:	b003      	add	sp, #12
    2f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f84:	200011b4 	.word	0x200011b4
    2f88:	20000008 	.word	0x20000008
    2f8c:	200001c4 	.word	0x200001c4
    2f90:	00002dc9 	.word	0x00002dc9

00002f94 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2f94:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2f96:	4b01      	ldr	r3, [pc, #4]	; (2f9c <tc_cca_callback+0x8>)
    2f98:	4798      	blx	r3
}
    2f9a:	bd10      	pop	{r4, pc}
    2f9c:	000046e1 	.word	0x000046e1

00002fa0 <tc_ovf_callback>:
{
    2fa0:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2fa2:	4b01      	ldr	r3, [pc, #4]	; (2fa8 <tc_ovf_callback+0x8>)
    2fa4:	4798      	blx	r3
}
    2fa6:	bd10      	pop	{r4, pc}
    2fa8:	00004699 	.word	0x00004699

00002fac <tmr_read_count>:
{
    2fac:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2fae:	4802      	ldr	r0, [pc, #8]	; (2fb8 <tmr_read_count+0xc>)
    2fb0:	4b02      	ldr	r3, [pc, #8]	; (2fbc <tmr_read_count+0x10>)
    2fb2:	4798      	blx	r3
    2fb4:	b280      	uxth	r0, r0
}
    2fb6:	bd10      	pop	{r4, pc}
    2fb8:	200011ec 	.word	0x200011ec
    2fbc:	00001c3d 	.word	0x00001c3d

00002fc0 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2fc0:	4b03      	ldr	r3, [pc, #12]	; (2fd0 <tmr_disable_cc_interrupt+0x10>)
    2fc2:	2110      	movs	r1, #16
    2fc4:	681a      	ldr	r2, [r3, #0]
    2fc6:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2fc8:	7e5a      	ldrb	r2, [r3, #25]
    2fca:	438a      	bics	r2, r1
    2fcc:	765a      	strb	r2, [r3, #25]
}
    2fce:	4770      	bx	lr
    2fd0:	200011ec 	.word	0x200011ec

00002fd4 <tmr_enable_cc_interrupt>:
{
    2fd4:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2fd6:	4c0a      	ldr	r4, [pc, #40]	; (3000 <tmr_enable_cc_interrupt+0x2c>)
    2fd8:	6820      	ldr	r0, [r4, #0]
    2fda:	4b0a      	ldr	r3, [pc, #40]	; (3004 <tmr_enable_cc_interrupt+0x30>)
    2fdc:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2fde:	4b0a      	ldr	r3, [pc, #40]	; (3008 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2fe0:	5c1b      	ldrb	r3, [r3, r0]
    2fe2:	221f      	movs	r2, #31
    2fe4:	401a      	ands	r2, r3
    2fe6:	2301      	movs	r3, #1
    2fe8:	4093      	lsls	r3, r2
    2fea:	4a08      	ldr	r2, [pc, #32]	; (300c <tmr_enable_cc_interrupt+0x38>)
    2fec:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2fee:	7e63      	ldrb	r3, [r4, #25]
    2ff0:	2210      	movs	r2, #16
    2ff2:	4313      	orrs	r3, r2
    2ff4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2ff6:	6823      	ldr	r3, [r4, #0]
    2ff8:	2210      	movs	r2, #16
    2ffa:	735a      	strb	r2, [r3, #13]
}
    2ffc:	bd10      	pop	{r4, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	200011ec 	.word	0x200011ec
    3004:	000019c9 	.word	0x000019c9
    3008:	00007ef0 	.word	0x00007ef0
    300c:	e000e100 	.word	0xe000e100

00003010 <tmr_write_cmpreg>:
{
    3010:	b510      	push	{r4, lr}
    3012:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    3014:	2100      	movs	r1, #0
    3016:	4802      	ldr	r0, [pc, #8]	; (3020 <tmr_write_cmpreg+0x10>)
    3018:	4b02      	ldr	r3, [pc, #8]	; (3024 <tmr_write_cmpreg+0x14>)
    301a:	4798      	blx	r3
}
    301c:	bd10      	pop	{r4, pc}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	200011ec 	.word	0x200011ec
    3024:	00001c69 	.word	0x00001c69

00003028 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    3028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    302a:	46ce      	mov	lr, r9
    302c:	4647      	mov	r7, r8
    302e:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3030:	4a2d      	ldr	r2, [pc, #180]	; (30e8 <tmr_init+0xc0>)
    3032:	2300      	movs	r3, #0
    3034:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3036:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3038:	2100      	movs	r1, #0
    303a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    303c:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    303e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3040:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3042:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3044:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3046:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3048:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    304a:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    304c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    304e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3050:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3052:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3054:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3056:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3058:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    305a:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    305c:	3b01      	subs	r3, #1
    305e:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    3060:	4c22      	ldr	r4, [pc, #136]	; (30ec <tmr_init+0xc4>)
    3062:	4923      	ldr	r1, [pc, #140]	; (30f0 <tmr_init+0xc8>)
    3064:	0020      	movs	r0, r4
    3066:	4b23      	ldr	r3, [pc, #140]	; (30f4 <tmr_init+0xcc>)
    3068:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    306a:	2200      	movs	r2, #0
    306c:	4922      	ldr	r1, [pc, #136]	; (30f8 <tmr_init+0xd0>)
    306e:	0020      	movs	r0, r4
    3070:	4d22      	ldr	r5, [pc, #136]	; (30fc <tmr_init+0xd4>)
    3072:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    3074:	2202      	movs	r2, #2
    3076:	4922      	ldr	r1, [pc, #136]	; (3100 <tmr_init+0xd8>)
    3078:	0020      	movs	r0, r4
    307a:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    307c:	6820      	ldr	r0, [r4, #0]
    307e:	4b21      	ldr	r3, [pc, #132]	; (3104 <tmr_init+0xdc>)
    3080:	4699      	mov	r9, r3
    3082:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3084:	4b20      	ldr	r3, [pc, #128]	; (3108 <tmr_init+0xe0>)
    3086:	4698      	mov	r8, r3
    3088:	5c1b      	ldrb	r3, [r3, r0]
    308a:	261f      	movs	r6, #31
    308c:	4033      	ands	r3, r6
    308e:	2501      	movs	r5, #1
    3090:	002a      	movs	r2, r5
    3092:	409a      	lsls	r2, r3
    3094:	4f1d      	ldr	r7, [pc, #116]	; (310c <tmr_init+0xe4>)
    3096:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    3098:	7e63      	ldrb	r3, [r4, #25]
    309a:	2201      	movs	r2, #1
    309c:	4313      	orrs	r3, r2
    309e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    30a0:	6823      	ldr	r3, [r4, #0]
    30a2:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    30a4:	0018      	movs	r0, r3
    30a6:	47c8      	blx	r9
    30a8:	4643      	mov	r3, r8
    30aa:	5c1b      	ldrb	r3, [r3, r0]
    30ac:	401e      	ands	r6, r3
    30ae:	40b5      	lsls	r5, r6
    30b0:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    30b2:	7e63      	ldrb	r3, [r4, #25]
    30b4:	2210      	movs	r2, #16
    30b6:	4313      	orrs	r3, r2
    30b8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    30ba:	6822      	ldr	r2, [r4, #0]
    30bc:	2310      	movs	r3, #16
    30be:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    30c0:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    30c2:	b25b      	sxtb	r3, r3
    30c4:	2b00      	cmp	r3, #0
    30c6:	dbfb      	blt.n	30c0 <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    30c8:	8813      	ldrh	r3, [r2, #0]
    30ca:	2102      	movs	r1, #2
    30cc:	430b      	orrs	r3, r1
    30ce:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    30d0:	2000      	movs	r0, #0
    30d2:	4b0f      	ldr	r3, [pc, #60]	; (3110 <tmr_init+0xe8>)
    30d4:	4798      	blx	r3
    30d6:	490f      	ldr	r1, [pc, #60]	; (3114 <tmr_init+0xec>)
    30d8:	4b0f      	ldr	r3, [pc, #60]	; (3118 <tmr_init+0xf0>)
    30da:	4798      	blx	r3
	#endif
	return timer_multiplier;
    30dc:	b2c0      	uxtb	r0, r0
}
    30de:	bc0c      	pop	{r2, r3}
    30e0:	4690      	mov	r8, r2
    30e2:	4699      	mov	r9, r3
    30e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	200011b8 	.word	0x200011b8
    30ec:	200011ec 	.word	0x200011ec
    30f0:	42002c00 	.word	0x42002c00
    30f4:	00001a01 	.word	0x00001a01
    30f8:	00002fa1 	.word	0x00002fa1
    30fc:	00001901 	.word	0x00001901
    3100:	00002f95 	.word	0x00002f95
    3104:	000019c9 	.word	0x000019c9
    3108:	00007ef0 	.word	0x00007ef0
    310c:	e000e100 	.word	0xe000e100
    3110:	00001691 	.word	0x00001691
    3114:	000f4240 	.word	0x000f4240
    3118:	0000719d 	.word	0x0000719d

0000311c <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    311c:	4770      	bx	lr
	...

00003120 <sal_aes_restart>:
 * When using sal_aes_wrrd(), call sal_aes_read() to get the result
 * of the last AES operation BEFORE you put the transceiver unit to
 * sleep state!
 */
void sal_aes_restart(void)
{
    3120:	b570      	push	{r4, r5, r6, lr}
	 * This is not required anymore for SPI transceivers beyond
	 * these two mentioned transceivers.
	 */
	uint8_t *keyp;
	uint8_t save_cmd;
	if (last_dir == AES_DIR_ENCRYPT) {
    3122:	4b0c      	ldr	r3, [pc, #48]	; (3154 <sal_aes_restart+0x34>)
    3124:	781b      	ldrb	r3, [r3, #0]
    3126:	2b00      	cmp	r3, #0
    3128:	d012      	beq.n	3150 <sal_aes_restart+0x30>
		keyp = enc_key;
	} else {
		keyp = dec_key;
    312a:	490b      	ldr	r1, [pc, #44]	; (3158 <sal_aes_restart+0x38>)
	}

	save_cmd = aes_buf[0];
    312c:	4c0b      	ldr	r4, [pc, #44]	; (315c <sal_aes_restart+0x3c>)
    312e:	7825      	ldrb	r5, [r4, #0]
	aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3130:	2310      	movs	r3, #16
    3132:	7023      	strb	r3, [r4, #0]

	/* Fill in key. */
	memcpy(aes_buf + 1, keyp, AES_KEYSIZE);
    3134:	1c60      	adds	r0, r4, #1
    3136:	2210      	movs	r2, #16
    3138:	4b09      	ldr	r3, [pc, #36]	; (3160 <sal_aes_restart+0x40>)
    313a:	4798      	blx	r3

	/* Write to SRAM in one step. */
	trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    313c:	2211      	movs	r2, #17
    313e:	0021      	movs	r1, r4
    3140:	2083      	movs	r0, #131	; 0x83
    3142:	4b08      	ldr	r3, [pc, #32]	; (3164 <sal_aes_restart+0x44>)
    3144:	4798      	blx	r3
			AES_BLOCKSIZE + 1);

	aes_buf[0] = save_cmd;
    3146:	7025      	strb	r5, [r4, #0]
	setup_flag = true;
    3148:	2201      	movs	r2, #1
    314a:	4b07      	ldr	r3, [pc, #28]	; (3168 <sal_aes_restart+0x48>)
    314c:	701a      	strb	r2, [r3, #0]
}
    314e:	bd70      	pop	{r4, r5, r6, pc}
		keyp = enc_key;
    3150:	4906      	ldr	r1, [pc, #24]	; (316c <sal_aes_restart+0x4c>)
    3152:	e7eb      	b.n	312c <sal_aes_restart+0xc>
    3154:	20000049 	.word	0x20000049
    3158:	200001dc 	.word	0x200001dc
    315c:	200001c8 	.word	0x200001c8
    3160:	000074ef 	.word	0x000074ef
    3164:	000038dd 	.word	0x000038dd
    3168:	200001fc 	.word	0x200001fc
    316c:	200001ec 	.word	0x200001ec

00003170 <_sal_aes_clean_up>:
/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
}
    3170:	4770      	bx	lr
	...

00003174 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    3174:	b570      	push	{r4, r5, r6, lr}
    3176:	0003      	movs	r3, r0
    3178:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    317a:	4c14      	ldr	r4, [pc, #80]	; (31cc <sal_aes_wrrd+0x58>)
    317c:	1c60      	adds	r0, r4, #1
    317e:	2210      	movs	r2, #16
    3180:	0019      	movs	r1, r3
    3182:	4b13      	ldr	r3, [pc, #76]	; (31d0 <sal_aes_wrrd+0x5c>)
    3184:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3186:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3188:	4b12      	ldr	r3, [pc, #72]	; (31d4 <sal_aes_wrrd+0x60>)
    318a:	781b      	ldrb	r3, [r3, #0]
    318c:	2b00      	cmp	r3, #0
    318e:	d015      	beq.n	31bc <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3190:	2212      	movs	r2, #18
    3192:	490e      	ldr	r1, [pc, #56]	; (31cc <sal_aes_wrrd+0x58>)
    3194:	2083      	movs	r0, #131	; 0x83
    3196:	4b10      	ldr	r3, [pc, #64]	; (31d8 <sal_aes_wrrd+0x64>)
    3198:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    319a:	2200      	movs	r2, #0
    319c:	4b0d      	ldr	r3, [pc, #52]	; (31d4 <sal_aes_wrrd+0x60>)
    319e:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    31a0:	2d00      	cmp	r5, #0
    31a2:	d005      	beq.n	31b0 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    31a4:	2210      	movs	r2, #16
    31a6:	4909      	ldr	r1, [pc, #36]	; (31cc <sal_aes_wrrd+0x58>)
    31a8:	3101      	adds	r1, #1
    31aa:	0028      	movs	r0, r5
    31ac:	4b08      	ldr	r3, [pc, #32]	; (31d0 <sal_aes_wrrd+0x5c>)
    31ae:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    31b0:	4b06      	ldr	r3, [pc, #24]	; (31cc <sal_aes_wrrd+0x58>)
    31b2:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    31b4:	2018      	movs	r0, #24
    31b6:	4b09      	ldr	r3, [pc, #36]	; (31dc <sal_aes_wrrd+0x68>)
    31b8:	4798      	blx	r3
}
    31ba:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    31bc:	2211      	movs	r2, #17
    31be:	4903      	ldr	r1, [pc, #12]	; (31cc <sal_aes_wrrd+0x58>)
    31c0:	3101      	adds	r1, #1
    31c2:	2084      	movs	r0, #132	; 0x84
    31c4:	4b04      	ldr	r3, [pc, #16]	; (31d8 <sal_aes_wrrd+0x64>)
    31c6:	4798      	blx	r3
    31c8:	e7ea      	b.n	31a0 <sal_aes_wrrd+0x2c>
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	200001c8 	.word	0x200001c8
    31d0:	000074ef 	.word	0x000074ef
    31d4:	200001fc 	.word	0x200001fc
    31d8:	00003bd1 	.word	0x00003bd1
    31dc:	00000155 	.word	0x00000155

000031e0 <sal_aes_setup>:
{
    31e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31e2:	46c6      	mov	lr, r8
    31e4:	b500      	push	{lr}
    31e6:	b084      	sub	sp, #16
    31e8:	0005      	movs	r5, r0
    31ea:	000e      	movs	r6, r1
    31ec:	0014      	movs	r4, r2
	if (key != NULL) {
    31ee:	2800      	cmp	r0, #0
    31f0:	d017      	beq.n	3222 <sal_aes_setup+0x42>
		dec_initialized = false;
    31f2:	2200      	movs	r2, #0
    31f4:	4b3e      	ldr	r3, [pc, #248]	; (32f0 <sal_aes_setup+0x110>)
    31f6:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    31f8:	3202      	adds	r2, #2
    31fa:	4b3e      	ldr	r3, [pc, #248]	; (32f4 <sal_aes_setup+0x114>)
    31fc:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    31fe:	320e      	adds	r2, #14
    3200:	0001      	movs	r1, r0
    3202:	483d      	ldr	r0, [pc, #244]	; (32f8 <sal_aes_setup+0x118>)
    3204:	4b3d      	ldr	r3, [pc, #244]	; (32fc <sal_aes_setup+0x11c>)
    3206:	4698      	mov	r8, r3
    3208:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    320a:	4f3d      	ldr	r7, [pc, #244]	; (3300 <sal_aes_setup+0x120>)
    320c:	2310      	movs	r3, #16
    320e:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3210:	1c78      	adds	r0, r7, #1
    3212:	2210      	movs	r2, #16
    3214:	0029      	movs	r1, r5
    3216:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3218:	2211      	movs	r2, #17
    321a:	0039      	movs	r1, r7
    321c:	2083      	movs	r0, #131	; 0x83
    321e:	4b39      	ldr	r3, [pc, #228]	; (3304 <sal_aes_setup+0x124>)
    3220:	4798      	blx	r3
	switch (dir) {
    3222:	2c00      	cmp	r4, #0
    3224:	d003      	beq.n	322e <sal_aes_setup+0x4e>
    3226:	2c01      	cmp	r4, #1
    3228:	d02f      	beq.n	328a <sal_aes_setup+0xaa>
		return false;
    322a:	2000      	movs	r0, #0
    322c:	e01b      	b.n	3266 <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    322e:	4b31      	ldr	r3, [pc, #196]	; (32f4 <sal_aes_setup+0x114>)
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b01      	cmp	r3, #1
    3234:	d01b      	beq.n	326e <sal_aes_setup+0x8e>
	last_dir = dir;
    3236:	4b2f      	ldr	r3, [pc, #188]	; (32f4 <sal_aes_setup+0x114>)
    3238:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    323a:	2e00      	cmp	r6, #0
    323c:	d002      	beq.n	3244 <sal_aes_setup+0x64>
		return (false);
    323e:	2000      	movs	r0, #0
	switch (enc_mode) {
    3240:	2e02      	cmp	r6, #2
    3242:	d110      	bne.n	3266 <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3244:	0136      	lsls	r6, r6, #4
    3246:	2370      	movs	r3, #112	; 0x70
    3248:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    324a:	00e4      	lsls	r4, r4, #3
    324c:	3b68      	subs	r3, #104	; 0x68
    324e:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3250:	4334      	orrs	r4, r6
    3252:	4b2b      	ldr	r3, [pc, #172]	; (3300 <sal_aes_setup+0x120>)
    3254:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    3256:	2680      	movs	r6, #128	; 0x80
    3258:	4276      	negs	r6, r6
    325a:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    325c:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    325e:	2201      	movs	r2, #1
    3260:	4b29      	ldr	r3, [pc, #164]	; (3308 <sal_aes_setup+0x128>)
    3262:	701a      	strb	r2, [r3, #0]
	return (true);
    3264:	2001      	movs	r0, #1
}
    3266:	b004      	add	sp, #16
    3268:	bc04      	pop	{r2}
    326a:	4690      	mov	r8, r2
    326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    326e:	4d24      	ldr	r5, [pc, #144]	; (3300 <sal_aes_setup+0x120>)
    3270:	330f      	adds	r3, #15
    3272:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    3274:	1c68      	adds	r0, r5, #1
    3276:	2210      	movs	r2, #16
    3278:	491f      	ldr	r1, [pc, #124]	; (32f8 <sal_aes_setup+0x118>)
    327a:	4b20      	ldr	r3, [pc, #128]	; (32fc <sal_aes_setup+0x11c>)
    327c:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    327e:	2211      	movs	r2, #17
    3280:	0029      	movs	r1, r5
    3282:	2083      	movs	r0, #131	; 0x83
    3284:	4b1f      	ldr	r3, [pc, #124]	; (3304 <sal_aes_setup+0x124>)
    3286:	4798      	blx	r3
    3288:	e7d5      	b.n	3236 <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    328a:	4b1a      	ldr	r3, [pc, #104]	; (32f4 <sal_aes_setup+0x114>)
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	2b01      	cmp	r3, #1
    3290:	d0d1      	beq.n	3236 <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3292:	2210      	movs	r2, #16
    3294:	4b1a      	ldr	r3, [pc, #104]	; (3300 <sal_aes_setup+0x120>)
    3296:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    3298:	4b15      	ldr	r3, [pc, #84]	; (32f0 <sal_aes_setup+0x110>)
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	2b00      	cmp	r3, #0
    329e:	d00e      	beq.n	32be <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    32a0:	4d17      	ldr	r5, [pc, #92]	; (3300 <sal_aes_setup+0x120>)
    32a2:	1c68      	adds	r0, r5, #1
    32a4:	2210      	movs	r2, #16
    32a6:	4919      	ldr	r1, [pc, #100]	; (330c <sal_aes_setup+0x12c>)
    32a8:	4b14      	ldr	r3, [pc, #80]	; (32fc <sal_aes_setup+0x11c>)
    32aa:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    32ac:	2211      	movs	r2, #17
    32ae:	0029      	movs	r1, r5
    32b0:	2083      	movs	r0, #131	; 0x83
    32b2:	4b14      	ldr	r3, [pc, #80]	; (3304 <sal_aes_setup+0x124>)
    32b4:	4798      	blx	r3
			dec_initialized = true;
    32b6:	4b0e      	ldr	r3, [pc, #56]	; (32f0 <sal_aes_setup+0x110>)
    32b8:	2201      	movs	r2, #1
    32ba:	701a      	strb	r2, [r3, #0]
    32bc:	e7bb      	b.n	3236 <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    32be:	4d10      	ldr	r5, [pc, #64]	; (3300 <sal_aes_setup+0x120>)
    32c0:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    32c2:	3380      	adds	r3, #128	; 0x80
    32c4:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    32c6:	3a0f      	subs	r2, #15
    32c8:	4b0f      	ldr	r3, [pc, #60]	; (3308 <sal_aes_setup+0x128>)
    32ca:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    32cc:	2100      	movs	r1, #0
    32ce:	4668      	mov	r0, sp
    32d0:	4b0f      	ldr	r3, [pc, #60]	; (3310 <sal_aes_setup+0x130>)
    32d2:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    32d4:	2310      	movs	r3, #16
    32d6:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    32d8:	2201      	movs	r2, #1
    32da:	0029      	movs	r1, r5
    32dc:	2083      	movs	r0, #131	; 0x83
    32de:	4b09      	ldr	r3, [pc, #36]	; (3304 <sal_aes_setup+0x124>)
    32e0:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    32e2:	2210      	movs	r2, #16
    32e4:	4909      	ldr	r1, [pc, #36]	; (330c <sal_aes_setup+0x12c>)
    32e6:	2084      	movs	r0, #132	; 0x84
    32e8:	4b0a      	ldr	r3, [pc, #40]	; (3314 <sal_aes_setup+0x134>)
    32ea:	4798      	blx	r3
    32ec:	e7d8      	b.n	32a0 <sal_aes_setup+0xc0>
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	200001da 	.word	0x200001da
    32f4:	20000049 	.word	0x20000049
    32f8:	200001ec 	.word	0x200001ec
    32fc:	000074ef 	.word	0x000074ef
    3300:	200001c8 	.word	0x200001c8
    3304:	000038dd 	.word	0x000038dd
    3308:	200001fc 	.word	0x200001fc
    330c:	200001dc 	.word	0x200001dc
    3310:	00003175 	.word	0x00003175
    3314:	00003a49 	.word	0x00003a49

00003318 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3318:	b510      	push	{r4, lr}
    331a:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    331c:	2210      	movs	r2, #16
    331e:	2084      	movs	r0, #132	; 0x84
    3320:	4b01      	ldr	r3, [pc, #4]	; (3328 <sal_aes_read+0x10>)
    3322:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3324:	bd10      	pop	{r4, pc}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	00003a49 	.word	0x00003a49

0000332c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    332c:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    332e:	2201      	movs	r2, #1
    3330:	4b03      	ldr	r3, [pc, #12]	; (3340 <AT86RFX_ISR+0x14>)
    3332:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3334:	4b03      	ldr	r3, [pc, #12]	; (3344 <AT86RFX_ISR+0x18>)
    3336:	681b      	ldr	r3, [r3, #0]
    3338:	2b00      	cmp	r3, #0
    333a:	d000      	beq.n	333e <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    333c:	4798      	blx	r3
	}
}
    333e:	bd10      	pop	{r4, pc}
    3340:	40001800 	.word	0x40001800
    3344:	20000200 	.word	0x20000200

00003348 <trx_spi_init>:

void trx_spi_init(void)
{
    3348:	b530      	push	{r4, r5, lr}
    334a:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    334c:	4a34      	ldr	r2, [pc, #208]	; (3420 <trx_spi_init+0xd8>)
    334e:	2300      	movs	r3, #0
    3350:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3352:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3354:	213f      	movs	r1, #63	; 0x3f
    3356:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3358:	4c32      	ldr	r4, [pc, #200]	; (3424 <trx_spi_init+0xdc>)
    335a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    335c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    335e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3360:	2201      	movs	r2, #1
    3362:	4669      	mov	r1, sp
    3364:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3366:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3368:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    336a:	203f      	movs	r0, #63	; 0x3f
    336c:	4b2e      	ldr	r3, [pc, #184]	; (3428 <trx_spi_init+0xe0>)
    336e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3370:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3372:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3374:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3376:	2900      	cmp	r1, #0
    3378:	d104      	bne.n	3384 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    337a:	0953      	lsrs	r3, r2, #5
    337c:	01db      	lsls	r3, r3, #7
    337e:	492b      	ldr	r1, [pc, #172]	; (342c <trx_spi_init+0xe4>)
    3380:	468c      	mov	ip, r1
    3382:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3384:	211f      	movs	r1, #31
    3386:	4011      	ands	r1, r2
    3388:	2201      	movs	r2, #1
    338a:	0010      	movs	r0, r2
    338c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    338e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3390:	4c27      	ldr	r4, [pc, #156]	; (3430 <trx_spi_init+0xe8>)
    3392:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3394:	2300      	movs	r3, #0
    3396:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3398:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    339a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    339c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    339e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    33a0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    33a2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    33a4:	3223      	adds	r2, #35	; 0x23
    33a6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    33a8:	0020      	movs	r0, r4
    33aa:	3018      	adds	r0, #24
    33ac:	3a18      	subs	r2, #24
    33ae:	2100      	movs	r1, #0
    33b0:	4b20      	ldr	r3, [pc, #128]	; (3434 <trx_spi_init+0xec>)
    33b2:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    33b4:	2380      	movs	r3, #128	; 0x80
    33b6:	025b      	lsls	r3, r3, #9
    33b8:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    33ba:	4b1f      	ldr	r3, [pc, #124]	; (3438 <trx_spi_init+0xf0>)
    33bc:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    33be:	4b1f      	ldr	r3, [pc, #124]	; (343c <trx_spi_init+0xf4>)
    33c0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    33c2:	2301      	movs	r3, #1
    33c4:	425b      	negs	r3, r3
    33c6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    33c8:	4b1d      	ldr	r3, [pc, #116]	; (3440 <trx_spi_init+0xf8>)
    33ca:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    33cc:	4b1d      	ldr	r3, [pc, #116]	; (3444 <trx_spi_init+0xfc>)
    33ce:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    33d0:	4d1d      	ldr	r5, [pc, #116]	; (3448 <trx_spi_init+0x100>)
    33d2:	0022      	movs	r2, r4
    33d4:	491d      	ldr	r1, [pc, #116]	; (344c <trx_spi_init+0x104>)
    33d6:	0028      	movs	r0, r5
    33d8:	4b1d      	ldr	r3, [pc, #116]	; (3450 <trx_spi_init+0x108>)
    33da:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    33dc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    33de:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    33e0:	2b00      	cmp	r3, #0
    33e2:	d1fc      	bne.n	33de <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    33e4:	6813      	ldr	r3, [r2, #0]
    33e6:	2502      	movs	r5, #2
    33e8:	432b      	orrs	r3, r5
    33ea:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    33ec:	ac01      	add	r4, sp, #4
    33ee:	0020      	movs	r0, r4
    33f0:	4b18      	ldr	r3, [pc, #96]	; (3454 <trx_spi_init+0x10c>)
    33f2:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    33f4:	2320      	movs	r3, #32
    33f6:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    33f8:	2380      	movs	r3, #128	; 0x80
    33fa:	039b      	lsls	r3, r3, #14
    33fc:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    33fe:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3400:	2301      	movs	r3, #1
    3402:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3404:	2200      	movs	r2, #0
    3406:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3408:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    340a:	0021      	movs	r1, r4
    340c:	2000      	movs	r0, #0
    340e:	4b12      	ldr	r3, [pc, #72]	; (3458 <trx_spi_init+0x110>)
    3410:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3412:	2200      	movs	r2, #0
    3414:	2100      	movs	r1, #0
    3416:	4811      	ldr	r0, [pc, #68]	; (345c <trx_spi_init+0x114>)
    3418:	4b11      	ldr	r3, [pc, #68]	; (3460 <trx_spi_init+0x118>)
    341a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    341c:	b005      	add	sp, #20
    341e:	bd30      	pop	{r4, r5, pc}
    3420:	2000120c 	.word	0x2000120c
    3424:	20001210 	.word	0x20001210
    3428:	0000086d 	.word	0x0000086d
    342c:	41004400 	.word	0x41004400
    3430:	20001214 	.word	0x20001214
    3434:	00007501 	.word	0x00007501
    3438:	003d0900 	.word	0x003d0900
    343c:	00530005 	.word	0x00530005
    3440:	003e0005 	.word	0x003e0005
    3444:	00520005 	.word	0x00520005
    3448:	2000124c 	.word	0x2000124c
    344c:	42001800 	.word	0x42001800
    3450:	00000dbd 	.word	0x00000dbd
    3454:	000007e1 	.word	0x000007e1
    3458:	000007f5 	.word	0x000007f5
    345c:	0000332d 	.word	0x0000332d
    3460:	0000069d 	.word	0x0000069d

00003464 <PhyReset>:

void PhyReset(void)
{
    3464:	b570      	push	{r4, r5, r6, lr}
    3466:	4c08      	ldr	r4, [pc, #32]	; (3488 <PhyReset+0x24>)
    3468:	2580      	movs	r5, #128	; 0x80
    346a:	022d      	lsls	r5, r5, #8
    346c:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    346e:	2280      	movs	r2, #128	; 0x80
    3470:	0352      	lsls	r2, r2, #13
    3472:	4b06      	ldr	r3, [pc, #24]	; (348c <PhyReset+0x28>)
    3474:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3476:	20a5      	movs	r0, #165	; 0xa5
    3478:	0040      	lsls	r0, r0, #1
    347a:	4e05      	ldr	r6, [pc, #20]	; (3490 <PhyReset+0x2c>)
    347c:	47b0      	blx	r6
    347e:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3480:	200a      	movs	r0, #10
    3482:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3484:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3486:	bd70      	pop	{r4, r5, r6, pc}
    3488:	41004480 	.word	0x41004480
    348c:	41004400 	.word	0x41004400
    3490:	00000155 	.word	0x00000155

00003494 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3494:	b570      	push	{r4, r5, r6, lr}
    3496:	b082      	sub	sp, #8
    3498:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    349a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    349e:	425a      	negs	r2, r3
    34a0:	4153      	adcs	r3, r2
    34a2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    34a4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    34a6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    34aa:	2200      	movs	r2, #0
    34ac:	4b33      	ldr	r3, [pc, #204]	; (357c <trx_reg_read+0xe8>)
    34ae:	701a      	strb	r2, [r3, #0]
	return flags;
    34b0:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    34b2:	4e33      	ldr	r6, [pc, #204]	; (3580 <trx_reg_read+0xec>)
    34b4:	3201      	adds	r2, #1
    34b6:	4933      	ldr	r1, [pc, #204]	; (3584 <trx_reg_read+0xf0>)
    34b8:	0030      	movs	r0, r6
    34ba:	4b33      	ldr	r3, [pc, #204]	; (3588 <trx_reg_read+0xf4>)
    34bc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34be:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    34c0:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    34c2:	7e1a      	ldrb	r2, [r3, #24]
    34c4:	420a      	tst	r2, r1
    34c6:	d0fc      	beq.n	34c2 <trx_reg_read+0x2e>
    34c8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    34ca:	07d2      	lsls	r2, r2, #31
    34cc:	d502      	bpl.n	34d4 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    34ce:	2280      	movs	r2, #128	; 0x80
    34d0:	4315      	orrs	r5, r2
    34d2:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    34d4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    34d6:	7e1a      	ldrb	r2, [r3, #24]
    34d8:	420a      	tst	r2, r1
    34da:	d0fc      	beq.n	34d6 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    34dc:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    34de:	7e1a      	ldrb	r2, [r3, #24]
    34e0:	420a      	tst	r2, r1
    34e2:	d0fc      	beq.n	34de <trx_reg_read+0x4a>
    34e4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    34e6:	0752      	lsls	r2, r2, #29
    34e8:	d50c      	bpl.n	3504 <trx_reg_read+0x70>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    34ea:	8b5a      	ldrh	r2, [r3, #26]
    34ec:	0752      	lsls	r2, r2, #29
    34ee:	d501      	bpl.n	34f4 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    34f0:	2204      	movs	r2, #4
    34f2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    34f4:	4a22      	ldr	r2, [pc, #136]	; (3580 <trx_reg_read+0xec>)
    34f6:	7992      	ldrb	r2, [r2, #6]
    34f8:	2a01      	cmp	r2, #1
    34fa:	d034      	beq.n	3566 <trx_reg_read+0xd2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    34fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    34fe:	b2d2      	uxtb	r2, r2
    3500:	4922      	ldr	r1, [pc, #136]	; (358c <trx_reg_read+0xf8>)
    3502:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3504:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3506:	7e1a      	ldrb	r2, [r3, #24]
    3508:	420a      	tst	r2, r1
    350a:	d0fc      	beq.n	3506 <trx_reg_read+0x72>
    350c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    350e:	07d2      	lsls	r2, r2, #31
    3510:	d501      	bpl.n	3516 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3512:	2200      	movs	r2, #0
    3514:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3516:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3518:	7e1a      	ldrb	r2, [r3, #24]
    351a:	420a      	tst	r2, r1
    351c:	d0fc      	beq.n	3518 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    351e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3520:	7e1a      	ldrb	r2, [r3, #24]
    3522:	420a      	tst	r2, r1
    3524:	d0fc      	beq.n	3520 <trx_reg_read+0x8c>
    3526:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    3528:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    352a:	0752      	lsls	r2, r2, #29
    352c:	d50a      	bpl.n	3544 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    352e:	8b5a      	ldrh	r2, [r3, #26]
    3530:	0752      	lsls	r2, r2, #29
    3532:	d501      	bpl.n	3538 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3534:	2204      	movs	r2, #4
    3536:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3538:	4a11      	ldr	r2, [pc, #68]	; (3580 <trx_reg_read+0xec>)
    353a:	7992      	ldrb	r2, [r2, #6]
    353c:	2a01      	cmp	r2, #1
    353e:	d018      	beq.n	3572 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3540:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3542:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3544:	2200      	movs	r2, #0
    3546:	490f      	ldr	r1, [pc, #60]	; (3584 <trx_reg_read+0xf0>)
    3548:	480d      	ldr	r0, [pc, #52]	; (3580 <trx_reg_read+0xec>)
    354a:	4b0f      	ldr	r3, [pc, #60]	; (3588 <trx_reg_read+0xf4>)
    354c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    354e:	23ff      	movs	r3, #255	; 0xff
    3550:	4223      	tst	r3, r4
    3552:	d005      	beq.n	3560 <trx_reg_read+0xcc>
		cpu_irq_enable();
    3554:	2201      	movs	r2, #1
    3556:	4b09      	ldr	r3, [pc, #36]	; (357c <trx_reg_read+0xe8>)
    3558:	701a      	strb	r2, [r3, #0]
    355a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    355e:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3560:	b2e8      	uxtb	r0, r5
}
    3562:	b002      	add	sp, #8
    3564:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3568:	05d2      	lsls	r2, r2, #23
    356a:	0dd2      	lsrs	r2, r2, #23
    356c:	4907      	ldr	r1, [pc, #28]	; (358c <trx_reg_read+0xf8>)
    356e:	800a      	strh	r2, [r1, #0]
    3570:	e7c8      	b.n	3504 <trx_reg_read+0x70>
    3572:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3574:	05ed      	lsls	r5, r5, #23
    3576:	0ded      	lsrs	r5, r5, #23
    3578:	e7e4      	b.n	3544 <trx_reg_read+0xb0>
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	20000008 	.word	0x20000008
    3580:	2000124c 	.word	0x2000124c
    3584:	20001210 	.word	0x20001210
    3588:	00001081 	.word	0x00001081
    358c:	20001208 	.word	0x20001208

00003590 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3590:	b5f0      	push	{r4, r5, r6, r7, lr}
    3592:	b083      	sub	sp, #12
    3594:	0006      	movs	r6, r0
    3596:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3598:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    359c:	425a      	negs	r2, r3
    359e:	4153      	adcs	r3, r2
    35a0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    35a2:	b672      	cpsid	i
    35a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    35a8:	2200      	movs	r2, #0
    35aa:	4b34      	ldr	r3, [pc, #208]	; (367c <trx_reg_write+0xec>)
    35ac:	701a      	strb	r2, [r3, #0]
	return flags;
    35ae:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    35b0:	4f33      	ldr	r7, [pc, #204]	; (3680 <trx_reg_write+0xf0>)
    35b2:	3201      	adds	r2, #1
    35b4:	4933      	ldr	r1, [pc, #204]	; (3684 <trx_reg_write+0xf4>)
    35b6:	0038      	movs	r0, r7
    35b8:	4b33      	ldr	r3, [pc, #204]	; (3688 <trx_reg_write+0xf8>)
    35ba:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    35bc:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    35be:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    35c0:	7e1a      	ldrb	r2, [r3, #24]
    35c2:	420a      	tst	r2, r1
    35c4:	d0fc      	beq.n	35c0 <trx_reg_write+0x30>
    35c6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    35c8:	07d2      	lsls	r2, r2, #31
    35ca:	d502      	bpl.n	35d2 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    35cc:	22c0      	movs	r2, #192	; 0xc0
    35ce:	4316      	orrs	r6, r2
    35d0:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    35d2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    35d4:	7e1a      	ldrb	r2, [r3, #24]
    35d6:	420a      	tst	r2, r1
    35d8:	d0fc      	beq.n	35d4 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    35da:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    35dc:	7e1a      	ldrb	r2, [r3, #24]
    35de:	420a      	tst	r2, r1
    35e0:	d0fc      	beq.n	35dc <trx_reg_write+0x4c>
    35e2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    35e4:	0752      	lsls	r2, r2, #29
    35e6:	d50c      	bpl.n	3602 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    35e8:	8b5a      	ldrh	r2, [r3, #26]
    35ea:	0752      	lsls	r2, r2, #29
    35ec:	d501      	bpl.n	35f2 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    35ee:	2204      	movs	r2, #4
    35f0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    35f2:	4a23      	ldr	r2, [pc, #140]	; (3680 <trx_reg_write+0xf0>)
    35f4:	7992      	ldrb	r2, [r2, #6]
    35f6:	2a01      	cmp	r2, #1
    35f8:	d033      	beq.n	3662 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    35fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    35fc:	b2d2      	uxtb	r2, r2
    35fe:	4923      	ldr	r1, [pc, #140]	; (368c <trx_reg_write+0xfc>)
    3600:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3602:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3604:	7e1a      	ldrb	r2, [r3, #24]
    3606:	420a      	tst	r2, r1
    3608:	d0fc      	beq.n	3604 <trx_reg_write+0x74>
    360a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    360c:	07d2      	lsls	r2, r2, #31
    360e:	d500      	bpl.n	3612 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3610:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3612:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3614:	7e1a      	ldrb	r2, [r3, #24]
    3616:	420a      	tst	r2, r1
    3618:	d0fc      	beq.n	3614 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    361a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    361c:	7e1a      	ldrb	r2, [r3, #24]
    361e:	420a      	tst	r2, r1
    3620:	d0fc      	beq.n	361c <trx_reg_write+0x8c>
    3622:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3624:	0752      	lsls	r2, r2, #29
    3626:	d50c      	bpl.n	3642 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3628:	8b5a      	ldrh	r2, [r3, #26]
    362a:	0752      	lsls	r2, r2, #29
    362c:	d501      	bpl.n	3632 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    362e:	2204      	movs	r2, #4
    3630:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3632:	4a13      	ldr	r2, [pc, #76]	; (3680 <trx_reg_write+0xf0>)
    3634:	7992      	ldrb	r2, [r2, #6]
    3636:	2a01      	cmp	r2, #1
    3638:	d019      	beq.n	366e <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    363c:	b2db      	uxtb	r3, r3
    363e:	4a13      	ldr	r2, [pc, #76]	; (368c <trx_reg_write+0xfc>)
    3640:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3642:	2200      	movs	r2, #0
    3644:	490f      	ldr	r1, [pc, #60]	; (3684 <trx_reg_write+0xf4>)
    3646:	480e      	ldr	r0, [pc, #56]	; (3680 <trx_reg_write+0xf0>)
    3648:	4b0f      	ldr	r3, [pc, #60]	; (3688 <trx_reg_write+0xf8>)
    364a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    364c:	23ff      	movs	r3, #255	; 0xff
    364e:	422b      	tst	r3, r5
    3650:	d005      	beq.n	365e <trx_reg_write+0xce>
		cpu_irq_enable();
    3652:	2201      	movs	r2, #1
    3654:	4b09      	ldr	r3, [pc, #36]	; (367c <trx_reg_write+0xec>)
    3656:	701a      	strb	r2, [r3, #0]
    3658:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    365c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    365e:	b003      	add	sp, #12
    3660:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3664:	05d2      	lsls	r2, r2, #23
    3666:	0dd2      	lsrs	r2, r2, #23
    3668:	4908      	ldr	r1, [pc, #32]	; (368c <trx_reg_write+0xfc>)
    366a:	800a      	strh	r2, [r1, #0]
    366c:	e7c9      	b.n	3602 <trx_reg_write+0x72>
    366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3670:	05db      	lsls	r3, r3, #23
    3672:	0ddb      	lsrs	r3, r3, #23
    3674:	4a05      	ldr	r2, [pc, #20]	; (368c <trx_reg_write+0xfc>)
    3676:	8013      	strh	r3, [r2, #0]
    3678:	e7e3      	b.n	3642 <trx_reg_write+0xb2>
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	20000008 	.word	0x20000008
    3680:	2000124c 	.word	0x2000124c
    3684:	20001210 	.word	0x20001210
    3688:	00001081 	.word	0x00001081
    368c:	20001208 	.word	0x20001208

00003690 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3690:	b5f0      	push	{r4, r5, r6, r7, lr}
    3692:	46d6      	mov	lr, sl
    3694:	464f      	mov	r7, r9
    3696:	4646      	mov	r6, r8
    3698:	b5c0      	push	{r6, r7, lr}
    369a:	b082      	sub	sp, #8
    369c:	0005      	movs	r5, r0
    369e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    36a0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    36a4:	425a      	negs	r2, r3
    36a6:	4153      	adcs	r3, r2
    36a8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    36aa:	b672      	cpsid	i
    36ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    36b0:	2200      	movs	r2, #0
    36b2:	4b3e      	ldr	r3, [pc, #248]	; (37ac <trx_frame_read+0x11c>)
    36b4:	701a      	strb	r2, [r3, #0]
	return flags;
    36b6:	9b01      	ldr	r3, [sp, #4]
    36b8:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    36ba:	4f3d      	ldr	r7, [pc, #244]	; (37b0 <trx_frame_read+0x120>)
    36bc:	3201      	adds	r2, #1
    36be:	493d      	ldr	r1, [pc, #244]	; (37b4 <trx_frame_read+0x124>)
    36c0:	0038      	movs	r0, r7
    36c2:	4b3d      	ldr	r3, [pc, #244]	; (37b8 <trx_frame_read+0x128>)
    36c4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    36c6:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    36c8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    36ca:	7e1a      	ldrb	r2, [r3, #24]
    36cc:	420a      	tst	r2, r1
    36ce:	d0fc      	beq.n	36ca <trx_frame_read+0x3a>
    36d0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    36d2:	07d2      	lsls	r2, r2, #31
    36d4:	d501      	bpl.n	36da <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    36d6:	2220      	movs	r2, #32
    36d8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    36da:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    36dc:	7e1a      	ldrb	r2, [r3, #24]
    36de:	420a      	tst	r2, r1
    36e0:	d0fc      	beq.n	36dc <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    36e2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    36e4:	7e1a      	ldrb	r2, [r3, #24]
    36e6:	420a      	tst	r2, r1
    36e8:	d0fc      	beq.n	36e4 <trx_frame_read+0x54>
    36ea:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    36ec:	0752      	lsls	r2, r2, #29
    36ee:	d50c      	bpl.n	370a <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    36f0:	8b5a      	ldrh	r2, [r3, #26]
    36f2:	0752      	lsls	r2, r2, #29
    36f4:	d501      	bpl.n	36fa <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    36f6:	2204      	movs	r2, #4
    36f8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    36fa:	4a2d      	ldr	r2, [pc, #180]	; (37b0 <trx_frame_read+0x120>)
    36fc:	7992      	ldrb	r2, [r2, #6]
    36fe:	2a01      	cmp	r2, #1
    3700:	d013      	beq.n	372a <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3704:	b2db      	uxtb	r3, r3
    3706:	4a2d      	ldr	r2, [pc, #180]	; (37bc <trx_frame_read+0x12c>)
    3708:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    370a:	1e63      	subs	r3, r4, #1
    370c:	b2db      	uxtb	r3, r3
    370e:	2c00      	cmp	r4, #0
    3710:	d036      	beq.n	3780 <trx_frame_read+0xf0>
    3712:	3301      	adds	r3, #1
    3714:	469c      	mov	ip, r3
    3716:	44ac      	add	ip, r5
    3718:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    371a:	4e25      	ldr	r6, [pc, #148]	; (37b0 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    371c:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    371e:	2300      	movs	r3, #0
    3720:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3722:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3724:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3726:	46b1      	mov	r9, r6
    3728:	e00f      	b.n	374a <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    372c:	05db      	lsls	r3, r3, #23
    372e:	0ddb      	lsrs	r3, r3, #23
    3730:	4a22      	ldr	r2, [pc, #136]	; (37bc <trx_frame_read+0x12c>)
    3732:	8013      	strh	r3, [r2, #0]
    3734:	e7e9      	b.n	370a <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3736:	464a      	mov	r2, r9
    3738:	7992      	ldrb	r2, [r2, #6]
    373a:	2a01      	cmp	r2, #1
    373c:	d01c      	beq.n	3778 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    373e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3740:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    3742:	702f      	strb	r7, [r5, #0]
		data++;
    3744:	3501      	adds	r5, #1
	while (length--) {
    3746:	4565      	cmp	r5, ip
    3748:	d01a      	beq.n	3780 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    374a:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    374c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    374e:	4202      	tst	r2, r0
    3750:	d0fc      	beq.n	374c <trx_frame_read+0xbc>
    3752:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3754:	4202      	tst	r2, r0
    3756:	d001      	beq.n	375c <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3758:	4652      	mov	r2, sl
    375a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    375c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    375e:	4222      	tst	r2, r4
    3760:	d0fc      	beq.n	375c <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3762:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3764:	420a      	tst	r2, r1
    3766:	d0fc      	beq.n	3762 <trx_frame_read+0xd2>
    3768:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    376a:	420a      	tst	r2, r1
    376c:	d0e9      	beq.n	3742 <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    376e:	8b5a      	ldrh	r2, [r3, #26]
    3770:	420a      	tst	r2, r1
    3772:	d0e0      	beq.n	3736 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3774:	8359      	strh	r1, [r3, #26]
    3776:	e7de      	b.n	3736 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3778:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    377a:	05ff      	lsls	r7, r7, #23
    377c:	0dff      	lsrs	r7, r7, #23
    377e:	e7e0      	b.n	3742 <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3780:	2200      	movs	r2, #0
    3782:	490c      	ldr	r1, [pc, #48]	; (37b4 <trx_frame_read+0x124>)
    3784:	480a      	ldr	r0, [pc, #40]	; (37b0 <trx_frame_read+0x120>)
    3786:	4b0c      	ldr	r3, [pc, #48]	; (37b8 <trx_frame_read+0x128>)
    3788:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    378a:	23ff      	movs	r3, #255	; 0xff
    378c:	4642      	mov	r2, r8
    378e:	4213      	tst	r3, r2
    3790:	d005      	beq.n	379e <trx_frame_read+0x10e>
		cpu_irq_enable();
    3792:	2201      	movs	r2, #1
    3794:	4b05      	ldr	r3, [pc, #20]	; (37ac <trx_frame_read+0x11c>)
    3796:	701a      	strb	r2, [r3, #0]
    3798:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    379c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    379e:	b002      	add	sp, #8
    37a0:	bc1c      	pop	{r2, r3, r4}
    37a2:	4690      	mov	r8, r2
    37a4:	4699      	mov	r9, r3
    37a6:	46a2      	mov	sl, r4
    37a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	20000008 	.word	0x20000008
    37b0:	2000124c 	.word	0x2000124c
    37b4:	20001210 	.word	0x20001210
    37b8:	00001081 	.word	0x00001081
    37bc:	20001208 	.word	0x20001208

000037c0 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    37c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37c2:	46c6      	mov	lr, r8
    37c4:	b500      	push	{lr}
    37c6:	b082      	sub	sp, #8
    37c8:	0004      	movs	r4, r0
    37ca:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    37cc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    37d0:	425a      	negs	r2, r3
    37d2:	4153      	adcs	r3, r2
    37d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    37d6:	b672      	cpsid	i
    37d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    37dc:	2200      	movs	r2, #0
    37de:	4b3a      	ldr	r3, [pc, #232]	; (38c8 <trx_frame_write+0x108>)
    37e0:	701a      	strb	r2, [r3, #0]
	return flags;
    37e2:	9b01      	ldr	r3, [sp, #4]
    37e4:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    37e6:	4f39      	ldr	r7, [pc, #228]	; (38cc <trx_frame_write+0x10c>)
    37e8:	3201      	adds	r2, #1
    37ea:	4939      	ldr	r1, [pc, #228]	; (38d0 <trx_frame_write+0x110>)
    37ec:	0038      	movs	r0, r7
    37ee:	4b39      	ldr	r3, [pc, #228]	; (38d4 <trx_frame_write+0x114>)
    37f0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    37f2:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    37f4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    37f6:	7e1a      	ldrb	r2, [r3, #24]
    37f8:	420a      	tst	r2, r1
    37fa:	d0fc      	beq.n	37f6 <trx_frame_write+0x36>
    37fc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    37fe:	07d2      	lsls	r2, r2, #31
    3800:	d501      	bpl.n	3806 <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3802:	2260      	movs	r2, #96	; 0x60
    3804:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3806:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3808:	7e1a      	ldrb	r2, [r3, #24]
    380a:	420a      	tst	r2, r1
    380c:	d0fc      	beq.n	3808 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    380e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3810:	7e1a      	ldrb	r2, [r3, #24]
    3812:	420a      	tst	r2, r1
    3814:	d0fc      	beq.n	3810 <trx_frame_write+0x50>
    3816:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3818:	0752      	lsls	r2, r2, #29
    381a:	d50c      	bpl.n	3836 <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    381c:	8b5a      	ldrh	r2, [r3, #26]
    381e:	0752      	lsls	r2, r2, #29
    3820:	d501      	bpl.n	3826 <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3822:	2204      	movs	r2, #4
    3824:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3826:	4a29      	ldr	r2, [pc, #164]	; (38cc <trx_frame_write+0x10c>)
    3828:	7992      	ldrb	r2, [r2, #6]
    382a:	2a01      	cmp	r2, #1
    382c:	d00b      	beq.n	3846 <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    382e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3830:	b2d2      	uxtb	r2, r2
    3832:	4929      	ldr	r1, [pc, #164]	; (38d8 <trx_frame_write+0x118>)
    3834:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3836:	4a25      	ldr	r2, [pc, #148]	; (38cc <trx_frame_write+0x10c>)
    3838:	7992      	ldrb	r2, [r2, #6]
    383a:	4694      	mov	ip, r2
    383c:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    383e:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    3840:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3842:	2404      	movs	r4, #4
    3844:	e00d      	b.n	3862 <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3848:	05d2      	lsls	r2, r2, #23
    384a:	0dd2      	lsrs	r2, r2, #23
    384c:	4922      	ldr	r1, [pc, #136]	; (38d8 <trx_frame_write+0x118>)
    384e:	800a      	strh	r2, [r1, #0]
    3850:	e7f1      	b.n	3836 <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3852:	4662      	mov	r2, ip
    3854:	2a01      	cmp	r2, #1
    3856:	d01e      	beq.n	3896 <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    385a:	b2d2      	uxtb	r2, r2
    385c:	4e1e      	ldr	r6, [pc, #120]	; (38d8 <trx_frame_write+0x118>)
    385e:	8032      	strh	r2, [r6, #0]
    3860:	3101      	adds	r1, #1
	while (length--) {
    3862:	3d01      	subs	r5, #1
    3864:	b2ed      	uxtb	r5, r5
    3866:	2dff      	cmp	r5, #255	; 0xff
    3868:	d01b      	beq.n	38a2 <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    386a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    386c:	423a      	tst	r2, r7
    386e:	d0fc      	beq.n	386a <trx_frame_write+0xaa>
    3870:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3872:	423a      	tst	r2, r7
    3874:	d001      	beq.n	387a <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3876:	780a      	ldrb	r2, [r1, #0]
    3878:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    387a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    387c:	4202      	tst	r2, r0
    387e:	d0fc      	beq.n	387a <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3880:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3882:	4222      	tst	r2, r4
    3884:	d0fc      	beq.n	3880 <trx_frame_write+0xc0>
    3886:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3888:	4222      	tst	r2, r4
    388a:	d0e9      	beq.n	3860 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    388c:	8b5a      	ldrh	r2, [r3, #26]
    388e:	4222      	tst	r2, r4
    3890:	d0df      	beq.n	3852 <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3892:	835c      	strh	r4, [r3, #26]
    3894:	e7dd      	b.n	3852 <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3898:	05d2      	lsls	r2, r2, #23
    389a:	0dd2      	lsrs	r2, r2, #23
    389c:	4e0e      	ldr	r6, [pc, #56]	; (38d8 <trx_frame_write+0x118>)
    389e:	8032      	strh	r2, [r6, #0]
    38a0:	e7de      	b.n	3860 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    38a2:	2200      	movs	r2, #0
    38a4:	490a      	ldr	r1, [pc, #40]	; (38d0 <trx_frame_write+0x110>)
    38a6:	4809      	ldr	r0, [pc, #36]	; (38cc <trx_frame_write+0x10c>)
    38a8:	4b0a      	ldr	r3, [pc, #40]	; (38d4 <trx_frame_write+0x114>)
    38aa:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    38ac:	23ff      	movs	r3, #255	; 0xff
    38ae:	4642      	mov	r2, r8
    38b0:	4213      	tst	r3, r2
    38b2:	d005      	beq.n	38c0 <trx_frame_write+0x100>
		cpu_irq_enable();
    38b4:	2201      	movs	r2, #1
    38b6:	4b04      	ldr	r3, [pc, #16]	; (38c8 <trx_frame_write+0x108>)
    38b8:	701a      	strb	r2, [r3, #0]
    38ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    38be:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    38c0:	b002      	add	sp, #8
    38c2:	bc04      	pop	{r2}
    38c4:	4690      	mov	r8, r2
    38c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38c8:	20000008 	.word	0x20000008
    38cc:	2000124c 	.word	0x2000124c
    38d0:	20001210 	.word	0x20001210
    38d4:	00001081 	.word	0x00001081
    38d8:	20001208 	.word	0x20001208

000038dc <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    38dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38de:	46c6      	mov	lr, r8
    38e0:	b500      	push	{lr}
    38e2:	b082      	sub	sp, #8
    38e4:	0006      	movs	r6, r0
    38e6:	000d      	movs	r5, r1
    38e8:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    38ea:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    38ee:	425a      	negs	r2, r3
    38f0:	4153      	adcs	r3, r2
    38f2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    38f4:	b672      	cpsid	i
    38f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    38fa:	2200      	movs	r2, #0
    38fc:	4b4d      	ldr	r3, [pc, #308]	; (3a34 <trx_sram_write+0x158>)
    38fe:	701a      	strb	r2, [r3, #0]
	return flags;
    3900:	9b01      	ldr	r3, [sp, #4]
    3902:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3904:	4f4c      	ldr	r7, [pc, #304]	; (3a38 <trx_sram_write+0x15c>)
    3906:	3201      	adds	r2, #1
    3908:	494c      	ldr	r1, [pc, #304]	; (3a3c <trx_sram_write+0x160>)
    390a:	0038      	movs	r0, r7
    390c:	4b4c      	ldr	r3, [pc, #304]	; (3a40 <trx_sram_write+0x164>)
    390e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3910:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3912:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3914:	7e1a      	ldrb	r2, [r3, #24]
    3916:	420a      	tst	r2, r1
    3918:	d0fc      	beq.n	3914 <trx_sram_write+0x38>
    391a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    391c:	07d2      	lsls	r2, r2, #31
    391e:	d501      	bpl.n	3924 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3920:	2240      	movs	r2, #64	; 0x40
    3922:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3924:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3926:	7e1a      	ldrb	r2, [r3, #24]
    3928:	420a      	tst	r2, r1
    392a:	d0fc      	beq.n	3926 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    392c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    392e:	7e1a      	ldrb	r2, [r3, #24]
    3930:	420a      	tst	r2, r1
    3932:	d0fc      	beq.n	392e <trx_sram_write+0x52>
    3934:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3936:	0752      	lsls	r2, r2, #29
    3938:	d50c      	bpl.n	3954 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    393a:	8b5a      	ldrh	r2, [r3, #26]
    393c:	0752      	lsls	r2, r2, #29
    393e:	d501      	bpl.n	3944 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3940:	2204      	movs	r2, #4
    3942:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3944:	4a3c      	ldr	r2, [pc, #240]	; (3a38 <trx_sram_write+0x15c>)
    3946:	7992      	ldrb	r2, [r2, #6]
    3948:	2a01      	cmp	r2, #1
    394a:	d02b      	beq.n	39a4 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    394c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    394e:	b2d2      	uxtb	r2, r2
    3950:	493c      	ldr	r1, [pc, #240]	; (3a44 <trx_sram_write+0x168>)
    3952:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    3954:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3956:	7e1a      	ldrb	r2, [r3, #24]
    3958:	420a      	tst	r2, r1
    395a:	d0fc      	beq.n	3956 <trx_sram_write+0x7a>
    395c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    395e:	07d2      	lsls	r2, r2, #31
    3960:	d500      	bpl.n	3964 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3962:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3964:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3966:	7e1a      	ldrb	r2, [r3, #24]
    3968:	420a      	tst	r2, r1
    396a:	d0fc      	beq.n	3966 <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    396c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    396e:	7e1a      	ldrb	r2, [r3, #24]
    3970:	420a      	tst	r2, r1
    3972:	d0fc      	beq.n	396e <trx_sram_write+0x92>
    3974:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3976:	0752      	lsls	r2, r2, #29
    3978:	d50c      	bpl.n	3994 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    397a:	8b5a      	ldrh	r2, [r3, #26]
    397c:	0752      	lsls	r2, r2, #29
    397e:	d501      	bpl.n	3984 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3980:	2204      	movs	r2, #4
    3982:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3984:	4a2c      	ldr	r2, [pc, #176]	; (3a38 <trx_sram_write+0x15c>)
    3986:	7992      	ldrb	r2, [r2, #6]
    3988:	2a01      	cmp	r2, #1
    398a:	d011      	beq.n	39b0 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    398c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    398e:	b2d2      	uxtb	r2, r2
    3990:	492c      	ldr	r1, [pc, #176]	; (3a44 <trx_sram_write+0x168>)
    3992:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3994:	4a28      	ldr	r2, [pc, #160]	; (3a38 <trx_sram_write+0x15c>)
    3996:	7992      	ldrb	r2, [r2, #6]
    3998:	4694      	mov	ip, r2
    399a:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    399c:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    399e:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    39a0:	2104      	movs	r1, #4
    39a2:	e013      	b.n	39cc <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    39a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39a6:	05d2      	lsls	r2, r2, #23
    39a8:	0dd2      	lsrs	r2, r2, #23
    39aa:	4926      	ldr	r1, [pc, #152]	; (3a44 <trx_sram_write+0x168>)
    39ac:	800a      	strh	r2, [r1, #0]
    39ae:	e7d1      	b.n	3954 <trx_sram_write+0x78>
    39b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39b2:	05d2      	lsls	r2, r2, #23
    39b4:	0dd2      	lsrs	r2, r2, #23
    39b6:	4923      	ldr	r1, [pc, #140]	; (3a44 <trx_sram_write+0x168>)
    39b8:	800a      	strh	r2, [r1, #0]
    39ba:	e7eb      	b.n	3994 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    39bc:	4662      	mov	r2, ip
    39be:	2a01      	cmp	r2, #1
    39c0:	d01e      	beq.n	3a00 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    39c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39c4:	b2d2      	uxtb	r2, r2
    39c6:	4f1f      	ldr	r7, [pc, #124]	; (3a44 <trx_sram_write+0x168>)
    39c8:	803a      	strh	r2, [r7, #0]
    39ca:	3001      	adds	r0, #1
	while (length--) {
    39cc:	3c01      	subs	r4, #1
    39ce:	b2e4      	uxtb	r4, r4
    39d0:	2cff      	cmp	r4, #255	; 0xff
    39d2:	d01b      	beq.n	3a0c <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    39d4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    39d6:	4232      	tst	r2, r6
    39d8:	d0fc      	beq.n	39d4 <trx_sram_write+0xf8>
    39da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    39dc:	4232      	tst	r2, r6
    39de:	d001      	beq.n	39e4 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    39e0:	7802      	ldrb	r2, [r0, #0]
    39e2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    39e4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    39e6:	422a      	tst	r2, r5
    39e8:	d0fc      	beq.n	39e4 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    39ea:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    39ec:	420a      	tst	r2, r1
    39ee:	d0fc      	beq.n	39ea <trx_sram_write+0x10e>
    39f0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    39f2:	420a      	tst	r2, r1
    39f4:	d0e9      	beq.n	39ca <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    39f6:	8b5a      	ldrh	r2, [r3, #26]
    39f8:	420a      	tst	r2, r1
    39fa:	d0df      	beq.n	39bc <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    39fc:	8359      	strh	r1, [r3, #26]
    39fe:	e7dd      	b.n	39bc <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3a02:	05d2      	lsls	r2, r2, #23
    3a04:	0dd2      	lsrs	r2, r2, #23
    3a06:	4f0f      	ldr	r7, [pc, #60]	; (3a44 <trx_sram_write+0x168>)
    3a08:	803a      	strh	r2, [r7, #0]
    3a0a:	e7de      	b.n	39ca <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3a0c:	2200      	movs	r2, #0
    3a0e:	490b      	ldr	r1, [pc, #44]	; (3a3c <trx_sram_write+0x160>)
    3a10:	4809      	ldr	r0, [pc, #36]	; (3a38 <trx_sram_write+0x15c>)
    3a12:	4b0b      	ldr	r3, [pc, #44]	; (3a40 <trx_sram_write+0x164>)
    3a14:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3a16:	23ff      	movs	r3, #255	; 0xff
    3a18:	4642      	mov	r2, r8
    3a1a:	4213      	tst	r3, r2
    3a1c:	d005      	beq.n	3a2a <trx_sram_write+0x14e>
		cpu_irq_enable();
    3a1e:	2201      	movs	r2, #1
    3a20:	4b04      	ldr	r3, [pc, #16]	; (3a34 <trx_sram_write+0x158>)
    3a22:	701a      	strb	r2, [r3, #0]
    3a24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a28:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3a2a:	b002      	add	sp, #8
    3a2c:	bc04      	pop	{r2}
    3a2e:	4690      	mov	r8, r2
    3a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	20000008 	.word	0x20000008
    3a38:	2000124c 	.word	0x2000124c
    3a3c:	20001210 	.word	0x20001210
    3a40:	00001081 	.word	0x00001081
    3a44:	20001208 	.word	0x20001208

00003a48 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    3a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a4a:	46d6      	mov	lr, sl
    3a4c:	464f      	mov	r7, r9
    3a4e:	4646      	mov	r6, r8
    3a50:	b5c0      	push	{r6, r7, lr}
    3a52:	b082      	sub	sp, #8
    3a54:	0004      	movs	r4, r0
    3a56:	000d      	movs	r5, r1
    3a58:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    3a5a:	2001      	movs	r0, #1
    3a5c:	4b56      	ldr	r3, [pc, #344]	; (3bb8 <trx_sram_read+0x170>)
    3a5e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a60:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3a64:	425a      	negs	r2, r3
    3a66:	4153      	adcs	r3, r2
    3a68:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3a6a:	b672      	cpsid	i
    3a6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3a70:	2200      	movs	r2, #0
    3a72:	4b52      	ldr	r3, [pc, #328]	; (3bbc <trx_sram_read+0x174>)
    3a74:	701a      	strb	r2, [r3, #0]
	return flags;
    3a76:	9b01      	ldr	r3, [sp, #4]
    3a78:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3a7a:	4e51      	ldr	r6, [pc, #324]	; (3bc0 <trx_sram_read+0x178>)
    3a7c:	3201      	adds	r2, #1
    3a7e:	4951      	ldr	r1, [pc, #324]	; (3bc4 <trx_sram_read+0x17c>)
    3a80:	0030      	movs	r0, r6
    3a82:	4b51      	ldr	r3, [pc, #324]	; (3bc8 <trx_sram_read+0x180>)
    3a84:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a86:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3a88:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a8a:	7e1a      	ldrb	r2, [r3, #24]
    3a8c:	420a      	tst	r2, r1
    3a8e:	d0fc      	beq.n	3a8a <trx_sram_read+0x42>
    3a90:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3a92:	07d2      	lsls	r2, r2, #31
    3a94:	d501      	bpl.n	3a9a <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a96:	2200      	movs	r2, #0
    3a98:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3a9a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a9c:	7e1a      	ldrb	r2, [r3, #24]
    3a9e:	420a      	tst	r2, r1
    3aa0:	d0fc      	beq.n	3a9c <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3aa2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3aa4:	7e1a      	ldrb	r2, [r3, #24]
    3aa6:	420a      	tst	r2, r1
    3aa8:	d0fc      	beq.n	3aa4 <trx_sram_read+0x5c>
    3aaa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3aac:	0752      	lsls	r2, r2, #29
    3aae:	d50c      	bpl.n	3aca <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ab0:	8b5a      	ldrh	r2, [r3, #26]
    3ab2:	0752      	lsls	r2, r2, #29
    3ab4:	d501      	bpl.n	3aba <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3ab6:	2204      	movs	r2, #4
    3ab8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3aba:	4a41      	ldr	r2, [pc, #260]	; (3bc0 <trx_sram_read+0x178>)
    3abc:	7992      	ldrb	r2, [r2, #6]
    3abe:	2a01      	cmp	r2, #1
    3ac0:	d033      	beq.n	3b2a <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ac4:	b2d2      	uxtb	r2, r2
    3ac6:	4941      	ldr	r1, [pc, #260]	; (3bcc <trx_sram_read+0x184>)
    3ac8:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    3aca:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3acc:	7e1a      	ldrb	r2, [r3, #24]
    3ace:	420a      	tst	r2, r1
    3ad0:	d0fc      	beq.n	3acc <trx_sram_read+0x84>
    3ad2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ad4:	07d2      	lsls	r2, r2, #31
    3ad6:	d500      	bpl.n	3ada <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ad8:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3ada:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3adc:	7e1a      	ldrb	r2, [r3, #24]
    3ade:	420a      	tst	r2, r1
    3ae0:	d0fc      	beq.n	3adc <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3ae2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ae4:	7e1a      	ldrb	r2, [r3, #24]
    3ae6:	420a      	tst	r2, r1
    3ae8:	d0fc      	beq.n	3ae4 <trx_sram_read+0x9c>
    3aea:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3aec:	0752      	lsls	r2, r2, #29
    3aee:	d50c      	bpl.n	3b0a <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3af0:	8b5a      	ldrh	r2, [r3, #26]
    3af2:	0752      	lsls	r2, r2, #29
    3af4:	d501      	bpl.n	3afa <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3af6:	2204      	movs	r2, #4
    3af8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3afa:	4a31      	ldr	r2, [pc, #196]	; (3bc0 <trx_sram_read+0x178>)
    3afc:	7992      	ldrb	r2, [r2, #6]
    3afe:	2a01      	cmp	r2, #1
    3b00:	d019      	beq.n	3b36 <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b04:	b2db      	uxtb	r3, r3
    3b06:	4a31      	ldr	r2, [pc, #196]	; (3bcc <trx_sram_read+0x184>)
    3b08:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    3b0a:	1e7b      	subs	r3, r7, #1
    3b0c:	b2db      	uxtb	r3, r3
    3b0e:	2f00      	cmp	r7, #0
    3b10:	d03c      	beq.n	3b8c <trx_sram_read+0x144>
    3b12:	3301      	adds	r3, #1
    3b14:	469c      	mov	ip, r3
    3b16:	44ac      	add	ip, r5
    3b18:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b1a:	4e29      	ldr	r6, [pc, #164]	; (3bc0 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    3b1c:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b1e:	2300      	movs	r3, #0
    3b20:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3b22:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3b24:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b26:	46b1      	mov	r9, r6
    3b28:	e015      	b.n	3b56 <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b2c:	05d2      	lsls	r2, r2, #23
    3b2e:	0dd2      	lsrs	r2, r2, #23
    3b30:	4926      	ldr	r1, [pc, #152]	; (3bcc <trx_sram_read+0x184>)
    3b32:	800a      	strh	r2, [r1, #0]
    3b34:	e7c9      	b.n	3aca <trx_sram_read+0x82>
    3b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b38:	05db      	lsls	r3, r3, #23
    3b3a:	0ddb      	lsrs	r3, r3, #23
    3b3c:	4a23      	ldr	r2, [pc, #140]	; (3bcc <trx_sram_read+0x184>)
    3b3e:	8013      	strh	r3, [r2, #0]
    3b40:	e7e3      	b.n	3b0a <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b42:	464a      	mov	r2, r9
    3b44:	7992      	ldrb	r2, [r2, #6]
    3b46:	2a01      	cmp	r2, #1
    3b48:	d01c      	beq.n	3b84 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b4a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3b4c:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    3b4e:	702f      	strb	r7, [r5, #0]
		data++;
    3b50:	3501      	adds	r5, #1
	while (length--) {
    3b52:	4565      	cmp	r5, ip
    3b54:	d01a      	beq.n	3b8c <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b56:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b58:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3b5a:	4202      	tst	r2, r0
    3b5c:	d0fc      	beq.n	3b58 <trx_sram_read+0x110>
    3b5e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3b60:	4202      	tst	r2, r0
    3b62:	d001      	beq.n	3b68 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b64:	4652      	mov	r2, sl
    3b66:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b68:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3b6a:	4222      	tst	r2, r4
    3b6c:	d0fc      	beq.n	3b68 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b6e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3b70:	420a      	tst	r2, r1
    3b72:	d0fc      	beq.n	3b6e <trx_sram_read+0x126>
    3b74:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3b76:	420a      	tst	r2, r1
    3b78:	d0e9      	beq.n	3b4e <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b7a:	8b5a      	ldrh	r2, [r3, #26]
    3b7c:	420a      	tst	r2, r1
    3b7e:	d0e0      	beq.n	3b42 <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3b80:	8359      	strh	r1, [r3, #26]
    3b82:	e7de      	b.n	3b42 <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b84:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3b86:	05ff      	lsls	r7, r7, #23
    3b88:	0dff      	lsrs	r7, r7, #23
    3b8a:	e7e0      	b.n	3b4e <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3b8c:	2200      	movs	r2, #0
    3b8e:	490d      	ldr	r1, [pc, #52]	; (3bc4 <trx_sram_read+0x17c>)
    3b90:	480b      	ldr	r0, [pc, #44]	; (3bc0 <trx_sram_read+0x178>)
    3b92:	4b0d      	ldr	r3, [pc, #52]	; (3bc8 <trx_sram_read+0x180>)
    3b94:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3b96:	23ff      	movs	r3, #255	; 0xff
    3b98:	4642      	mov	r2, r8
    3b9a:	4213      	tst	r3, r2
    3b9c:	d005      	beq.n	3baa <trx_sram_read+0x162>
		cpu_irq_enable();
    3b9e:	2201      	movs	r2, #1
    3ba0:	4b06      	ldr	r3, [pc, #24]	; (3bbc <trx_sram_read+0x174>)
    3ba2:	701a      	strb	r2, [r3, #0]
    3ba4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ba8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3baa:	b002      	add	sp, #8
    3bac:	bc1c      	pop	{r2, r3, r4}
    3bae:	4690      	mov	r8, r2
    3bb0:	4699      	mov	r9, r3
    3bb2:	46a2      	mov	sl, r4
    3bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	00000155 	.word	0x00000155
    3bbc:	20000008 	.word	0x20000008
    3bc0:	2000124c 	.word	0x2000124c
    3bc4:	20001210 	.word	0x20001210
    3bc8:	00001081 	.word	0x00001081
    3bcc:	20001208 	.word	0x20001208

00003bd0 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    3bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bd2:	46d6      	mov	lr, sl
    3bd4:	464f      	mov	r7, r9
    3bd6:	4646      	mov	r6, r8
    3bd8:	b5c0      	push	{r6, r7, lr}
    3bda:	0006      	movs	r6, r0
    3bdc:	468a      	mov	sl, r1
    3bde:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    3be0:	2001      	movs	r0, #1
    3be2:	4b76      	ldr	r3, [pc, #472]	; (3dbc <trx_aes_wrrd+0x1ec>)
    3be4:	4798      	blx	r3

	ENTER_TRX_REGION();
    3be6:	2100      	movs	r1, #0
    3be8:	2000      	movs	r0, #0
    3bea:	4b75      	ldr	r3, [pc, #468]	; (3dc0 <trx_aes_wrrd+0x1f0>)
    3bec:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3bee:	4f75      	ldr	r7, [pc, #468]	; (3dc4 <trx_aes_wrrd+0x1f4>)
    3bf0:	2201      	movs	r2, #1
    3bf2:	4975      	ldr	r1, [pc, #468]	; (3dc8 <trx_aes_wrrd+0x1f8>)
    3bf4:	0038      	movs	r0, r7
    3bf6:	4b75      	ldr	r3, [pc, #468]	; (3dcc <trx_aes_wrrd+0x1fc>)
    3bf8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3bfa:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    3bfc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bfe:	7e1a      	ldrb	r2, [r3, #24]
    3c00:	420a      	tst	r2, r1
    3c02:	d0fc      	beq.n	3bfe <trx_aes_wrrd+0x2e>
    3c04:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c06:	07d2      	lsls	r2, r2, #31
    3c08:	d501      	bpl.n	3c0e <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c0a:	2240      	movs	r2, #64	; 0x40
    3c0c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3c0e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c10:	7e1a      	ldrb	r2, [r3, #24]
    3c12:	420a      	tst	r2, r1
    3c14:	d0fc      	beq.n	3c10 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c16:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c18:	7e1a      	ldrb	r2, [r3, #24]
    3c1a:	420a      	tst	r2, r1
    3c1c:	d0fc      	beq.n	3c18 <trx_aes_wrrd+0x48>
    3c1e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3c20:	0752      	lsls	r2, r2, #29
    3c22:	d50c      	bpl.n	3c3e <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c24:	8b5a      	ldrh	r2, [r3, #26]
    3c26:	0752      	lsls	r2, r2, #29
    3c28:	d501      	bpl.n	3c2e <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3c2a:	2204      	movs	r2, #4
    3c2c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c2e:	4a65      	ldr	r2, [pc, #404]	; (3dc4 <trx_aes_wrrd+0x1f4>)
    3c30:	7992      	ldrb	r2, [r2, #6]
    3c32:	2a01      	cmp	r2, #1
    3c34:	d055      	beq.n	3ce2 <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c38:	b2d2      	uxtb	r2, r2
    3c3a:	4965      	ldr	r1, [pc, #404]	; (3dd0 <trx_aes_wrrd+0x200>)
    3c3c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    3c3e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c40:	7e1a      	ldrb	r2, [r3, #24]
    3c42:	420a      	tst	r2, r1
    3c44:	d0fc      	beq.n	3c40 <trx_aes_wrrd+0x70>
    3c46:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c48:	07d2      	lsls	r2, r2, #31
    3c4a:	d500      	bpl.n	3c4e <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c4c:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3c4e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c50:	7e1a      	ldrb	r2, [r3, #24]
    3c52:	420a      	tst	r2, r1
    3c54:	d0fc      	beq.n	3c50 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c56:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c58:	7e1a      	ldrb	r2, [r3, #24]
    3c5a:	420a      	tst	r2, r1
    3c5c:	d0fc      	beq.n	3c58 <trx_aes_wrrd+0x88>
    3c5e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3c60:	0752      	lsls	r2, r2, #29
    3c62:	d50c      	bpl.n	3c7e <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c64:	8b5a      	ldrh	r2, [r3, #26]
    3c66:	0752      	lsls	r2, r2, #29
    3c68:	d501      	bpl.n	3c6e <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3c6a:	2204      	movs	r2, #4
    3c6c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c6e:	4a55      	ldr	r2, [pc, #340]	; (3dc4 <trx_aes_wrrd+0x1f4>)
    3c70:	7992      	ldrb	r2, [r2, #6]
    3c72:	2a01      	cmp	r2, #1
    3c74:	d03b      	beq.n	3cee <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c78:	b2d2      	uxtb	r2, r2
    3c7a:	4955      	ldr	r1, [pc, #340]	; (3dd0 <trx_aes_wrrd+0x200>)
    3c7c:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    3c7e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c80:	7e1a      	ldrb	r2, [r3, #24]
    3c82:	420a      	tst	r2, r1
    3c84:	d0fc      	beq.n	3c80 <trx_aes_wrrd+0xb0>
    3c86:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c88:	07d2      	lsls	r2, r2, #31
    3c8a:	d502      	bpl.n	3c92 <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c8c:	4652      	mov	r2, sl
    3c8e:	7812      	ldrb	r2, [r2, #0]
    3c90:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    3c92:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c94:	7e1a      	ldrb	r2, [r3, #24]
    3c96:	420a      	tst	r2, r1
    3c98:	d0fc      	beq.n	3c94 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c9a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c9c:	7e1a      	ldrb	r2, [r3, #24]
    3c9e:	420a      	tst	r2, r1
    3ca0:	d0fc      	beq.n	3c9c <trx_aes_wrrd+0xcc>
    3ca2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3ca4:	0752      	lsls	r2, r2, #29
    3ca6:	d50c      	bpl.n	3cc2 <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ca8:	8b5a      	ldrh	r2, [r3, #26]
    3caa:	0752      	lsls	r2, r2, #29
    3cac:	d501      	bpl.n	3cb2 <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cae:	2204      	movs	r2, #4
    3cb0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cb2:	4a44      	ldr	r2, [pc, #272]	; (3dc4 <trx_aes_wrrd+0x1f4>)
    3cb4:	7992      	ldrb	r2, [r2, #6]
    3cb6:	2a01      	cmp	r2, #1
    3cb8:	d01f      	beq.n	3cfa <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cbc:	b2db      	uxtb	r3, r3
    3cbe:	4a44      	ldr	r2, [pc, #272]	; (3dd0 <trx_aes_wrrd+0x200>)
    3cc0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    3cc2:	2700      	movs	r7, #0
    3cc4:	2c00      	cmp	r4, #0
    3cc6:	d043      	beq.n	3d50 <trx_aes_wrrd+0x180>
    3cc8:	4656      	mov	r6, sl
    3cca:	3c01      	subs	r4, #1
    3ccc:	b2e4      	uxtb	r4, r4
    3cce:	3401      	adds	r4, #1
    3cd0:	44a2      	add	sl, r4
    3cd2:	46d0      	mov	r8, sl
    3cd4:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    3cd6:	4d3b      	ldr	r5, [pc, #236]	; (3dc4 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    3cd8:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    3cda:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    3cdc:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cde:	46a9      	mov	r9, r5
    3ce0:	e01b      	b.n	3d1a <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ce4:	05d2      	lsls	r2, r2, #23
    3ce6:	0dd2      	lsrs	r2, r2, #23
    3ce8:	4939      	ldr	r1, [pc, #228]	; (3dd0 <trx_aes_wrrd+0x200>)
    3cea:	800a      	strh	r2, [r1, #0]
    3cec:	e7a7      	b.n	3c3e <trx_aes_wrrd+0x6e>
    3cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3cf0:	05d2      	lsls	r2, r2, #23
    3cf2:	0dd2      	lsrs	r2, r2, #23
    3cf4:	4936      	ldr	r1, [pc, #216]	; (3dd0 <trx_aes_wrrd+0x200>)
    3cf6:	800a      	strh	r2, [r1, #0]
    3cf8:	e7c1      	b.n	3c7e <trx_aes_wrrd+0xae>
    3cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cfc:	05db      	lsls	r3, r3, #23
    3cfe:	0ddb      	lsrs	r3, r3, #23
    3d00:	4a33      	ldr	r2, [pc, #204]	; (3dd0 <trx_aes_wrrd+0x200>)
    3d02:	8013      	strh	r3, [r2, #0]
    3d04:	e7dd      	b.n	3cc2 <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d06:	464a      	mov	r2, r9
    3d08:	7992      	ldrb	r2, [r2, #6]
    3d0a:	2a01      	cmp	r2, #1
    3d0c:	d01c      	beq.n	3d48 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d0e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3d10:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    3d12:	7037      	strb	r7, [r6, #0]
    3d14:	3601      	adds	r6, #1
	while (length > 0) {
    3d16:	45b0      	cmp	r8, r6
    3d18:	d01a      	beq.n	3d50 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d1a:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d1c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3d1e:	4202      	tst	r2, r0
    3d20:	d0fc      	beq.n	3d1c <trx_aes_wrrd+0x14c>
    3d22:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d24:	4202      	tst	r2, r0
    3d26:	d001      	beq.n	3d2c <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d28:	7872      	ldrb	r2, [r6, #1]
    3d2a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d2c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3d2e:	4222      	tst	r2, r4
    3d30:	d0fc      	beq.n	3d2c <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d32:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3d34:	420a      	tst	r2, r1
    3d36:	d0fc      	beq.n	3d32 <trx_aes_wrrd+0x162>
    3d38:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3d3a:	420a      	tst	r2, r1
    3d3c:	d0e9      	beq.n	3d12 <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d3e:	8b5a      	ldrh	r2, [r3, #26]
    3d40:	420a      	tst	r2, r1
    3d42:	d0e0      	beq.n	3d06 <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d44:	8359      	strh	r1, [r3, #26]
    3d46:	e7de      	b.n	3d06 <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d48:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3d4a:	05ff      	lsls	r7, r7, #23
    3d4c:	0dff      	lsrs	r7, r7, #23
    3d4e:	e7e0      	b.n	3d12 <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d50:	4b1c      	ldr	r3, [pc, #112]	; (3dc4 <trx_aes_wrrd+0x1f4>)
    3d52:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    3d54:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d56:	7e1a      	ldrb	r2, [r3, #24]
    3d58:	420a      	tst	r2, r1
    3d5a:	d0fc      	beq.n	3d56 <trx_aes_wrrd+0x186>
    3d5c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d5e:	07d2      	lsls	r2, r2, #31
    3d60:	d501      	bpl.n	3d66 <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d62:	2200      	movs	r2, #0
    3d64:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3d66:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d68:	7e1a      	ldrb	r2, [r3, #24]
    3d6a:	420a      	tst	r2, r1
    3d6c:	d0fc      	beq.n	3d68 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    3d6e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d70:	7e1a      	ldrb	r2, [r3, #24]
    3d72:	420a      	tst	r2, r1
    3d74:	d0fc      	beq.n	3d70 <trx_aes_wrrd+0x1a0>
    3d76:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3d78:	0752      	lsls	r2, r2, #29
    3d7a:	d50a      	bpl.n	3d92 <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d7c:	8b5a      	ldrh	r2, [r3, #26]
    3d7e:	0752      	lsls	r2, r2, #29
    3d80:	d501      	bpl.n	3d86 <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d82:	2204      	movs	r2, #4
    3d84:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d86:	4a0f      	ldr	r2, [pc, #60]	; (3dc4 <trx_aes_wrrd+0x1f4>)
    3d88:	7992      	ldrb	r2, [r2, #6]
    3d8a:	2a01      	cmp	r2, #1
    3d8c:	d011      	beq.n	3db2 <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d8e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3d90:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    3d92:	4653      	mov	r3, sl
    3d94:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3d96:	2200      	movs	r2, #0
    3d98:	490b      	ldr	r1, [pc, #44]	; (3dc8 <trx_aes_wrrd+0x1f8>)
    3d9a:	480a      	ldr	r0, [pc, #40]	; (3dc4 <trx_aes_wrrd+0x1f4>)
    3d9c:	4b0b      	ldr	r3, [pc, #44]	; (3dcc <trx_aes_wrrd+0x1fc>)
    3d9e:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    3da0:	2100      	movs	r1, #0
    3da2:	2000      	movs	r0, #0
    3da4:	4b0b      	ldr	r3, [pc, #44]	; (3dd4 <trx_aes_wrrd+0x204>)
    3da6:	4798      	blx	r3
}
    3da8:	bc1c      	pop	{r2, r3, r4}
    3daa:	4690      	mov	r8, r2
    3dac:	4699      	mov	r9, r3
    3dae:	46a2      	mov	sl, r4
    3db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3db2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3db4:	05ff      	lsls	r7, r7, #23
    3db6:	0dff      	lsrs	r7, r7, #23
    3db8:	e7eb      	b.n	3d92 <trx_aes_wrrd+0x1c2>
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	00000155 	.word	0x00000155
    3dc0:	000006e9 	.word	0x000006e9
    3dc4:	2000124c 	.word	0x2000124c
    3dc8:	20001210 	.word	0x20001210
    3dcc:	00001081 	.word	0x00001081
    3dd0:	20001208 	.word	0x20001208
    3dd4:	000006c9 	.word	0x000006c9

00003dd8 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3dd8:	2280      	movs	r2, #128	; 0x80
    3dda:	0512      	lsls	r2, r2, #20
    3ddc:	4b01      	ldr	r3, [pc, #4]	; (3de4 <appCmdIdentifyPeriodTimerHandler+0xc>)
    3dde:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    3de0:	4770      	bx	lr
    3de2:	46c0      	nop			; (mov r8, r8)
    3de4:	41004400 	.word	0x41004400

00003de8 <appCmdIdentifyDurationTimerHandler>:
{
    3de8:	b510      	push	{r4, lr}
		port_base->OUTCLR.reg = pin_mask;
    3dea:	2280      	movs	r2, #128	; 0x80
    3dec:	0512      	lsls	r2, r2, #20
    3dee:	4b03      	ldr	r3, [pc, #12]	; (3dfc <appCmdIdentifyDurationTimerHandler+0x14>)
    3df0:	615a      	str	r2, [r3, #20]
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    3df2:	4803      	ldr	r0, [pc, #12]	; (3e00 <appCmdIdentifyDurationTimerHandler+0x18>)
    3df4:	4b03      	ldr	r3, [pc, #12]	; (3e04 <appCmdIdentifyDurationTimerHandler+0x1c>)
    3df6:	4798      	blx	r3
}
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	46c0      	nop			; (mov r8, r8)
    3dfc:	41004400 	.word	0x41004400
    3e00:	20000218 	.word	0x20000218
    3e04:	00002e7d 	.word	0x00002e7d

00003e08 <appCmdHandle>:
{
    3e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e0a:	0004      	movs	r4, r0
		return false;
    3e0c:	2000      	movs	r0, #0
	if (size < sizeof(AppCmdHeader_t)) {
    3e0e:	2900      	cmp	r1, #0
    3e10:	d002      	beq.n	3e18 <appCmdHandle+0x10>
	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    3e12:	7823      	ldrb	r3, [r4, #0]
    3e14:	2b10      	cmp	r3, #16
    3e16:	d000      	beq.n	3e1a <appCmdHandle+0x12>
}
    3e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sizeof(AppCmdIdentify_t) != size) {
    3e1a:	2905      	cmp	r1, #5
    3e1c:	d1fc      	bne.n	3e18 <appCmdHandle+0x10>
		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    3e1e:	4e10      	ldr	r6, [pc, #64]	; (3e60 <appCmdHandle+0x58>)
    3e20:	0030      	movs	r0, r6
    3e22:	4f10      	ldr	r7, [pc, #64]	; (3e64 <appCmdHandle+0x5c>)
    3e24:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    3e26:	4d10      	ldr	r5, [pc, #64]	; (3e68 <appCmdHandle+0x60>)
    3e28:	0028      	movs	r0, r5
    3e2a:	47b8      	blx	r7
		appCmdIdentifyDurationTimer.interval = req->duration;
    3e2c:	7862      	ldrb	r2, [r4, #1]
    3e2e:	78a3      	ldrb	r3, [r4, #2]
    3e30:	021b      	lsls	r3, r3, #8
    3e32:	4313      	orrs	r3, r2
    3e34:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3e36:	2300      	movs	r3, #0
    3e38:	7333      	strb	r3, [r6, #12]
			= appCmdIdentifyDurationTimerHandler;
    3e3a:	4b0c      	ldr	r3, [pc, #48]	; (3e6c <appCmdHandle+0x64>)
    3e3c:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    3e3e:	0030      	movs	r0, r6
    3e40:	4e0b      	ldr	r6, [pc, #44]	; (3e70 <appCmdHandle+0x68>)
    3e42:	47b0      	blx	r6
		appCmdIdentifyPeriodTimer.interval = req->period;
    3e44:	78e2      	ldrb	r2, [r4, #3]
    3e46:	7923      	ldrb	r3, [r4, #4]
    3e48:	021b      	lsls	r3, r3, #8
    3e4a:	4313      	orrs	r3, r2
    3e4c:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3e4e:	2301      	movs	r3, #1
    3e50:	732b      	strb	r3, [r5, #12]
			= appCmdIdentifyPeriodTimerHandler;
    3e52:	4b08      	ldr	r3, [pc, #32]	; (3e74 <appCmdHandle+0x6c>)
    3e54:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    3e56:	0028      	movs	r0, r5
    3e58:	47b0      	blx	r6
*/		return true;
    3e5a:	2001      	movs	r0, #1
    3e5c:	e7dc      	b.n	3e18 <appCmdHandle+0x10>
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	20000204 	.word	0x20000204
    3e64:	00002e7d 	.word	0x00002e7d
    3e68:	20000218 	.word	0x20000218
    3e6c:	00003de9 	.word	0x00003de9
    3e70:	00002ee9 	.word	0x00002ee9
    3e74:	00003dd9 	.word	0x00003dd9

00003e78 <APP_CommandsInit>:
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3e78:	4b05      	ldr	r3, [pc, #20]	; (3e90 <APP_CommandsInit+0x18>)
    3e7a:	2200      	movs	r2, #0
    3e7c:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
    3e7e:	4a05      	ldr	r2, [pc, #20]	; (3e94 <APP_CommandsInit+0x1c>)
    3e80:	611a      	str	r2, [r3, #16]
	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3e82:	4b05      	ldr	r3, [pc, #20]	; (3e98 <APP_CommandsInit+0x20>)
    3e84:	2201      	movs	r2, #1
    3e86:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    3e88:	4a04      	ldr	r2, [pc, #16]	; (3e9c <APP_CommandsInit+0x24>)
    3e8a:	611a      	str	r2, [r3, #16]
}
    3e8c:	4770      	bx	lr
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	20000204 	.word	0x20000204
    3e94:	00003de9 	.word	0x00003de9
    3e98:	20000218 	.word	0x20000218
    3e9c:	00003dd9 	.word	0x00003dd9

00003ea0 <appCmdDataInd>:
{
    3ea0:	b510      	push	{r4, lr}
	appCmdHandle(ind->payload, ind->payloadSize);
    3ea2:	7a01      	ldrb	r1, [r0, #8]
    3ea4:	6840      	ldr	r0, [r0, #4]
    3ea6:	4b01      	ldr	r3, [pc, #4]	; (3eac <appCmdDataInd+0xc>)
    3ea8:	4798      	blx	r3
}
    3eaa:	bd10      	pop	{r4, pc}
    3eac:	00003e09 	.word	0x00003e09

00003eb0 <rtc_overflow_callback>:
	port_base->OUTTGL.reg = pin_mask;
    3eb0:	2280      	movs	r2, #128	; 0x80
    3eb2:	0552      	lsls	r2, r2, #21
    3eb4:	4b01      	ldr	r3, [pc, #4]	; (3ebc <rtc_overflow_callback+0xc>)
    3eb6:	61da      	str	r2, [r3, #28]
void rtc_overflow_callback(void){	
	//port_pin_set_output_level(PIN_PA28,true);
	//delay_us(20);
	port_pin_toggle_output_level(PIN_PA28);
	//port_pin_set_output_level(PIN_PA28,false);
}
    3eb8:	4770      	bx	lr
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	41004400 	.word	0x41004400

00003ec0 <configure_rtc_count>:

AppState_t appState = APP_STATE_INITIAL;

int temp1;

void configure_rtc_count(void){
    3ec0:	b510      	push	{r4, lr}
    3ec2:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    3ec4:	2300      	movs	r3, #0
    3ec6:	466a      	mov	r2, sp
    3ec8:	70d3      	strb	r3, [r2, #3]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    3eca:	9302      	str	r3, [sp, #8]
    3ecc:	9303      	str	r3, [sp, #12]
	
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	
	config_rtc_count.prescaler				= RTC_COUNT_PRESCALER_DIV_1;
    3ece:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode					= RTC_COUNT_MODE_16BIT;
    3ed0:	7093      	strb	r3, [r2, #2]
	config_rtc_count.continuously_update	= true;
    3ed2:	2301      	movs	r3, #1
    3ed4:	7113      	strb	r3, [r2, #4]

	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    3ed6:	4c05      	ldr	r4, [pc, #20]	; (3eec <configure_rtc_count+0x2c>)
    3ed8:	4905      	ldr	r1, [pc, #20]	; (3ef0 <configure_rtc_count+0x30>)
    3eda:	0020      	movs	r0, r4
    3edc:	4b05      	ldr	r3, [pc, #20]	; (3ef4 <configure_rtc_count+0x34>)
    3ede:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    3ee0:	0020      	movs	r0, r4
    3ee2:	4b05      	ldr	r3, [pc, #20]	; (3ef8 <configure_rtc_count+0x38>)
    3ee4:	4798      	blx	r3
}
    3ee6:	b004      	add	sp, #16
    3ee8:	bd10      	pop	{r4, pc}
    3eea:	46c0      	nop			; (mov r8, r8)
    3eec:	20001258 	.word	0x20001258
    3ef0:	40001400 	.word	0x40001400
    3ef4:	00000979 	.word	0x00000979
    3ef8:	00000899 	.word	0x00000899

00003efc <configure_rtc_callbacks>:

void configure_rtc_callbacks(void){
    3efc:	b510      	push	{r4, lr}
	rtc_count_register_callback( &rtc_instance, rtc_overflow_callback,RTC_COUNT_CALLBACK_OVERFLOW);
    3efe:	4c05      	ldr	r4, [pc, #20]	; (3f14 <configure_rtc_callbacks+0x18>)
    3f00:	2202      	movs	r2, #2
    3f02:	4905      	ldr	r1, [pc, #20]	; (3f18 <configure_rtc_callbacks+0x1c>)
    3f04:	0020      	movs	r0, r4
    3f06:	4b05      	ldr	r3, [pc, #20]	; (3f1c <configure_rtc_callbacks+0x20>)
    3f08:	4798      	blx	r3
	rtc_count_enable_callback( &rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    3f0a:	2102      	movs	r1, #2
    3f0c:	0020      	movs	r0, r4
    3f0e:	4b04      	ldr	r3, [pc, #16]	; (3f20 <configure_rtc_callbacks+0x24>)
    3f10:	4798      	blx	r3
}
    3f12:	bd10      	pop	{r4, pc}
    3f14:	20001258 	.word	0x20001258
    3f18:	00003eb1 	.word	0x00003eb1
    3f1c:	00000a7d 	.word	0x00000a7d
    3f20:	00000ab5 	.word	0x00000ab5

00003f24 <configure_adc>:
//void ReadMacAddress(void);

struct adc_module adc_instance;

void configure_adc(void)
{
    3f24:	b510      	push	{r4, lr}
    3f26:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	
	adc_get_config_defaults(&config_adc);
    3f28:	4668      	mov	r0, sp
    3f2a:	4b15      	ldr	r3, [pc, #84]	; (3f80 <configure_adc+0x5c>)
    3f2c:	4798      	blx	r3
	adc_init(&adc_instance, ADC, &config_adc);
    3f2e:	4c15      	ldr	r4, [pc, #84]	; (3f84 <configure_adc+0x60>)
    3f30:	466a      	mov	r2, sp
    3f32:	4915      	ldr	r1, [pc, #84]	; (3f88 <configure_adc+0x64>)
    3f34:	0020      	movs	r0, r4
    3f36:	4b15      	ldr	r3, [pc, #84]	; (3f8c <configure_adc+0x68>)
    3f38:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3f3a:	6823      	ldr	r3, [r4, #0]
    3f3c:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    3f3e:	b252      	sxtb	r2, r2
    3f40:	2a00      	cmp	r2, #0
    3f42:	dbfb      	blt.n	3f3c <configure_adc+0x18>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    3f44:	691a      	ldr	r2, [r3, #16]
    3f46:	211f      	movs	r1, #31
    3f48:	438a      	bics	r2, r1
    3f4a:	3919      	subs	r1, #25
    3f4c:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    3f4e:	611a      	str	r2, [r3, #16]
    3f50:	7e5a      	ldrb	r2, [r3, #25]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    3f52:	b252      	sxtb	r2, r2
    3f54:	2a00      	cmp	r2, #0
    3f56:	dbfb      	blt.n	3f50 <configure_adc+0x2c>
    3f58:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    3f5a:	b252      	sxtb	r2, r2
    3f5c:	2a00      	cmp	r2, #0
    3f5e:	dbfb      	blt.n	3f58 <configure_adc+0x34>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3f60:	220f      	movs	r2, #15
    3f62:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3f64:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3f66:	781a      	ldrb	r2, [r3, #0]
    3f68:	2102      	movs	r1, #2
    3f6a:	430a      	orrs	r2, r1
    3f6c:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    3f6e:	4b05      	ldr	r3, [pc, #20]	; (3f84 <configure_adc+0x60>)
    3f70:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3f72:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3f74:	b25b      	sxtb	r3, r3
    3f76:	2b00      	cmp	r3, #0
    3f78:	dbfb      	blt.n	3f72 <configure_adc+0x4e>
	adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN6);
	adc_enable(&adc_instance);	
}
    3f7a:	b00c      	add	sp, #48	; 0x30
    3f7c:	bd10      	pop	{r4, pc}
    3f7e:	46c0      	nop			; (mov r8, r8)
    3f80:	00000261 	.word	0x00000261
    3f84:	2000127c 	.word	0x2000127c
    3f88:	42004000 	.word	0x42004000
    3f8c:	000002ad 	.word	0x000002ad

00003f90 <config_led>:

void config_led(void){
    3f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f92:	46c6      	mov	lr, r8
    3f94:	b500      	push	{lr}
    3f96:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    3f98:	ac01      	add	r4, sp, #4
    3f9a:	2501      	movs	r5, #1
    3f9c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3f9e:	2300      	movs	r3, #0
    3fa0:	4698      	mov	r8, r3
    3fa2:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_config;
	port_get_config_defaults( &pin_config);
	pin_config.direction  = PORT_PIN_DIR_OUTPUT;
    3fa4:	7025      	strb	r5, [r4, #0]
//	port_pin_set_config(LED_0_PIN, &pin_config);
//	port_pin_set_output_level(LED_0_PIN, false);
	port_pin_set_config(PIN_PA27, &pin_config);
    3fa6:	0021      	movs	r1, r4
    3fa8:	201b      	movs	r0, #27
    3faa:	4f0a      	ldr	r7, [pc, #40]	; (3fd4 <config_led+0x44>)
    3fac:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    3fae:	4e0a      	ldr	r6, [pc, #40]	; (3fd8 <config_led+0x48>)
    3fb0:	2380      	movs	r3, #128	; 0x80
    3fb2:	051b      	lsls	r3, r3, #20
    3fb4:	6173      	str	r3, [r6, #20]
	config->input_pull = PORT_PIN_PULL_UP;
    3fb6:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3fb8:	4643      	mov	r3, r8
    3fba:	70a3      	strb	r3, [r4, #2]
	port_pin_set_output_level(PIN_PA27, false);

	port_get_config_defaults( &pin_config);
	pin_config.direction  = PORT_PIN_DIR_OUTPUT;
    3fbc:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PA28, &pin_config);
    3fbe:	0021      	movs	r1, r4
    3fc0:	201c      	movs	r0, #28
    3fc2:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    3fc4:	2380      	movs	r3, #128	; 0x80
    3fc6:	055b      	lsls	r3, r3, #21
    3fc8:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(PIN_PA28, false);
}
    3fca:	b002      	add	sp, #8
    3fcc:	bc04      	pop	{r2}
    3fce:	4690      	mov	r8, r2
    3fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	0000086d 	.word	0x0000086d
    3fd8:	41004400 	.word	0x41004400

00003fdc <readMacAddress>:

uint16_t adcResult;
volatile uint16_t tmp1, tmp2;

void readMacAddress(void){
	myLongAddress[0] = 16;
    3fdc:	4b08      	ldr	r3, [pc, #32]	; (4000 <readMacAddress+0x24>)
    3fde:	2210      	movs	r2, #16
    3fe0:	701a      	strb	r2, [r3, #0]
	myLongAddress[1] = 53;
    3fe2:	3225      	adds	r2, #37	; 0x25
    3fe4:	705a      	strb	r2, [r3, #1]
	myLongAddress[2] = 0;
    3fe6:	2200      	movs	r2, #0
    3fe8:	709a      	strb	r2, [r3, #2]
	myLongAddress[3] = 32;
    3fea:	3220      	adds	r2, #32
    3fec:	70da      	strb	r2, [r3, #3]
	myLongAddress[4] = 89;
    3fee:	3239      	adds	r2, #57	; 0x39
    3ff0:	711a      	strb	r2, [r3, #4]
	myLongAddress[5] = 37;
    3ff2:	3a34      	subs	r2, #52	; 0x34
    3ff4:	715a      	strb	r2, [r3, #5]
	myLongAddress[6] = 128;
    3ff6:	325b      	adds	r2, #91	; 0x5b
    3ff8:	719a      	strb	r2, [r3, #6]
	myLongAddress[7] = MAC_ADDR;	
    3ffa:	3a6f      	subs	r2, #111	; 0x6f
    3ffc:	71da      	strb	r2, [r3, #7]
}
    3ffe:	4770      	bx	lr
    4000:	2000004c 	.word	0x2000004c

00004004 <main>:

int main ( void )
{
    4004:	b510      	push	{r4, lr}
	system_init();
    4006:	4b17      	ldr	r3, [pc, #92]	; (4064 <main+0x60>)
    4008:	4798      	blx	r3
	delay_init();
    400a:	4b17      	ldr	r3, [pc, #92]	; (4068 <main+0x64>)
    400c:	4798      	blx	r3
	irq_initialize_vectors();
	config_led();
    400e:	4b17      	ldr	r3, [pc, #92]	; (406c <main+0x68>)
    4010:	4798      	blx	r3
	readMacAddress();
    4012:	4b17      	ldr	r3, [pc, #92]	; (4070 <main+0x6c>)
    4014:	4798      	blx	r3
	wsndemo_init();
    4016:	4b17      	ldr	r3, [pc, #92]	; (4074 <main+0x70>)
    4018:	4798      	blx	r3
	configure_adc();
    401a:	4b17      	ldr	r3, [pc, #92]	; (4078 <main+0x74>)
    401c:	4798      	blx	r3
	configure_rtc_count();
    401e:	4b17      	ldr	r3, [pc, #92]	; (407c <main+0x78>)
    4020:	4798      	blx	r3
	configure_rtc_callbacks();
    4022:	4b17      	ldr	r3, [pc, #92]	; (4080 <main+0x7c>)
    4024:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 800);
    4026:	21c8      	movs	r1, #200	; 0xc8
    4028:	0089      	lsls	r1, r1, #2
    402a:	4816      	ldr	r0, [pc, #88]	; (4084 <main+0x80>)
    402c:	4b16      	ldr	r3, [pc, #88]	; (4088 <main+0x84>)
    402e:	4798      	blx	r3
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    4030:	4b16      	ldr	r3, [pc, #88]	; (408c <main+0x88>)
    4032:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    4034:	051b      	lsls	r3, r3, #20
    4036:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    4038:	2b02      	cmp	r3, #2
    403a:	d805      	bhi.n	4048 <main+0x44>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    403c:	4a14      	ldr	r2, [pc, #80]	; (4090 <main+0x8c>)
    403e:	6851      	ldr	r1, [r2, #4]
    4040:	23c0      	movs	r3, #192	; 0xc0
    4042:	009b      	lsls	r3, r3, #2
    4044:	430b      	orrs	r3, r1
    4046:	6053      	str	r3, [r2, #4]
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    4048:	4a12      	ldr	r2, [pc, #72]	; (4094 <main+0x90>)
    404a:	6913      	ldr	r3, [r2, #16]
    404c:	2104      	movs	r1, #4
    404e:	430b      	orrs	r3, r1
    4050:	6113      	str	r3, [r2, #16]
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
	cpu_irq_enable();	
    4052:	2201      	movs	r2, #1
    4054:	4b10      	ldr	r3, [pc, #64]	; (4098 <main+0x94>)
    4056:	701a      	strb	r2, [r3, #0]
    4058:	f3bf 8f5f 	dmb	sy
    405c:	b662      	cpsie	i
			delay_ms(200);
			port_pin_toggle_output_level(PIN_PA28);			
			tmp1++;
		}
*/
		wsndemo_task();
    405e:	4c0f      	ldr	r4, [pc, #60]	; (409c <main+0x98>)
    4060:	47a0      	blx	r4
    4062:	e7fd      	b.n	4060 <main+0x5c>
    4064:	000018d5 	.word	0x000018d5
    4068:	00000115 	.word	0x00000115
    406c:	00003f91 	.word	0x00003f91
    4070:	00003fdd 	.word	0x00003fdd
    4074:	000041ed 	.word	0x000041ed
    4078:	00003f25 	.word	0x00003f25
    407c:	00003ec1 	.word	0x00003ec1
    4080:	00003efd 	.word	0x00003efd
    4084:	20001258 	.word	0x20001258
    4088:	00000a59 	.word	0x00000a59
    408c:	41002000 	.word	0x41002000
    4090:	41004000 	.word	0x41004000
    4094:	e000ed00 	.word	0xe000ed00
    4098:	20000008 	.word	0x20000008
    409c:	00004205 	.word	0x00004205

000040a0 <appNetworkStatusTimerHandler>:
	port_base->OUTTGL.reg = pin_mask;
    40a0:	2280      	movs	r2, #128	; 0x80
    40a2:	0512      	lsls	r2, r2, #20
    40a4:	4b01      	ldr	r3, [pc, #4]	; (40ac <appNetworkStatusTimerHandler+0xc>)
    40a6:	61da      	str	r2, [r3, #28]
#if (LED_COUNT > 0 )
//	LED_Toggle(LED_NETWORK);
	LED_Toggle(LED_DATA);
#endif
	(void)timer;
}
    40a8:	4770      	bx	lr
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	41004400 	.word	0x41004400

000040b0 <Connection_Confirm>:
/**
 * Connection confirmation
 */
static void Connection_Confirm(miwi_status_t status)
{
	if (SUCCESS == status) appState = APP_STATE_SEND;
    40b0:	2800      	cmp	r0, #0
    40b2:	d003      	beq.n	40bc <Connection_Confirm+0xc>
	else        appState = APP_STATE_CONNECT_NETWORK;
    40b4:	2202      	movs	r2, #2
    40b6:	4b03      	ldr	r3, [pc, #12]	; (40c4 <Connection_Confirm+0x14>)
    40b8:	701a      	strb	r2, [r3, #0]
}
    40ba:	4770      	bx	lr
	if (SUCCESS == status) appState = APP_STATE_SEND;
    40bc:	2205      	movs	r2, #5
    40be:	4b01      	ldr	r3, [pc, #4]	; (40c4 <Connection_Confirm+0x14>)
    40c0:	701a      	strb	r2, [r3, #0]
    40c2:	e7fa      	b.n	40ba <Connection_Confirm+0xa>
    40c4:	2000022c 	.word	0x2000022c

000040c8 <searchConfim>:
{
    40c8:	b530      	push	{r4, r5, lr}
    40ca:	b083      	sub	sp, #12
	if(foundScanResults)
    40cc:	2800      	cmp	r0, #0
    40ce:	d024      	beq.n	411a <searchConfim+0x52>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    40d0:	7a4b      	ldrb	r3, [r1, #9]
    40d2:	2b00      	cmp	r3, #0
    40d4:	d11b      	bne.n	410e <searchConfim+0x46>
    40d6:	000a      	movs	r2, r1
    40d8:	321b      	adds	r2, #27
    40da:	2301      	movs	r3, #1
		for(uint8_t loopindex = 0; loopindex < foundScanResults; loopindex++)
    40dc:	b2dc      	uxtb	r4, r3
    40de:	42a0      	cmp	r0, r4
    40e0:	d917      	bls.n	4112 <searchConfim+0x4a>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    40e2:	001d      	movs	r5, r3
    40e4:	7814      	ldrb	r4, [r2, #0]
    40e6:	3301      	adds	r3, #1
    40e8:	3212      	adds	r2, #18
    40ea:	2c00      	cmp	r4, #0
    40ec:	d0f6      	beq.n	40dc <searchConfim+0x14>
				SHORT_ADDR_LEN, (uint8_t*)&searchConfRes->beaconList[loopindex].shortAddress, CAPABILITY_INFO, Connection_Confirm);
    40ee:	00eb      	lsls	r3, r5, #3
    40f0:	195a      	adds	r2, r3, r5
    40f2:	0052      	lsls	r2, r2, #1
    40f4:	3210      	adds	r2, #16
    40f6:	188a      	adds	r2, r1, r2
				MiApp_EstablishConnection(searchConfRes->beaconList[loopindex].logicalChannel,
    40f8:	195b      	adds	r3, r3, r5
    40fa:	005b      	lsls	r3, r3, #1
    40fc:	18c9      	adds	r1, r1, r3
    40fe:	7b08      	ldrb	r0, [r1, #12]
    4100:	4b08      	ldr	r3, [pc, #32]	; (4124 <searchConfim+0x5c>)
    4102:	9300      	str	r3, [sp, #0]
    4104:	2306      	movs	r3, #6
    4106:	2102      	movs	r1, #2
    4108:	4c07      	ldr	r4, [pc, #28]	; (4128 <searchConfim+0x60>)
    410a:	47a0      	blx	r4
				return;
    410c:	e008      	b.n	4120 <searchConfim+0x58>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    410e:	2500      	movs	r5, #0
    4110:	e7ed      	b.n	40ee <searchConfim+0x26>
		appState = APP_STATE_CONNECT_NETWORK;
    4112:	2202      	movs	r2, #2
    4114:	4b05      	ldr	r3, [pc, #20]	; (412c <searchConfim+0x64>)
    4116:	701a      	strb	r2, [r3, #0]
    4118:	e002      	b.n	4120 <searchConfim+0x58>
		appState = APP_STATE_CONNECT_NETWORK;
    411a:	2202      	movs	r2, #2
    411c:	4b03      	ldr	r3, [pc, #12]	; (412c <searchConfim+0x64>)
    411e:	701a      	strb	r2, [r3, #0]
}
    4120:	b003      	add	sp, #12
    4122:	bd30      	pop	{r4, r5, pc}
    4124:	000040b1 	.word	0x000040b1
    4128:	00006b7d 	.word	0x00006b7d
    412c:	2000022c 	.word	0x2000022c

00004130 <appDataSendingTimerHandler>:
static void appDataSendingTimerHandler(SYS_Timer_t *timer){		
    4130:	b510      	push	{r4, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) appState = APP_STATE_SEND;
    4132:	4b06      	ldr	r3, [pc, #24]	; (414c <appDataSendingTimerHandler+0x1c>)
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	2b08      	cmp	r3, #8
    4138:	d003      	beq.n	4142 <appDataSendingTimerHandler+0x12>
	else	SYS_TimerStart(&appDataSendingTimer);
    413a:	4805      	ldr	r0, [pc, #20]	; (4150 <appDataSendingTimerHandler+0x20>)
    413c:	4b05      	ldr	r3, [pc, #20]	; (4154 <appDataSendingTimerHandler+0x24>)
    413e:	4798      	blx	r3
}
    4140:	bd10      	pop	{r4, pc}
	if (APP_STATE_WAIT_SEND_TIMER == appState) appState = APP_STATE_SEND;
    4142:	2205      	movs	r2, #5
    4144:	4b01      	ldr	r3, [pc, #4]	; (414c <appDataSendingTimerHandler+0x1c>)
    4146:	701a      	strb	r2, [r3, #0]
    4148:	e7fa      	b.n	4140 <appDataSendingTimerHandler+0x10>
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	2000022c 	.word	0x2000022c
    4150:	20001284 	.word	0x20001284
    4154:	00002ee9 	.word	0x00002ee9

00004158 <appDataInd>:
static void appDataInd(RECEIVED_MESH_MESSAGE *ind){
    4158:	b510      	push	{r4, lr}
	AppMessage_t *msg = (AppMessage_t *)ind->payload;
    415a:	6843      	ldr	r3, [r0, #4]
    415c:	2180      	movs	r1, #128	; 0x80
    415e:	0509      	lsls	r1, r1, #20
    4160:	4a04      	ldr	r2, [pc, #16]	; (4174 <appDataInd+0x1c>)
    4162:	61d1      	str	r1, [r2, #28]
	msg->lqi = ind->packetLQI;	msg->rssi = ind->packetRSSI;
    4164:	7a82      	ldrb	r2, [r0, #10]
    4166:	765a      	strb	r2, [r3, #25]
    4168:	7a42      	ldrb	r2, [r0, #9]
    416a:	769a      	strb	r2, [r3, #26]
    appCmdDataInd(ind);
    416c:	4b02      	ldr	r3, [pc, #8]	; (4178 <appDataInd+0x20>)
    416e:	4798      	blx	r3
}
    4170:	bd10      	pop	{r4, pc}
    4172:	46c0      	nop			; (mov r8, r8)
    4174:	41004400 	.word	0x41004400
    4178:	00003ea1 	.word	0x00003ea1

0000417c <appDataConf>:
{
    417c:	b510      	push	{r4, lr}
		port_base->OUTCLR.reg = pin_mask;
    417e:	2280      	movs	r2, #128	; 0x80
    4180:	0512      	lsls	r2, r2, #20
    4182:	4b14      	ldr	r3, [pc, #80]	; (41d4 <appDataConf+0x58>)
    4184:	615a      	str	r2, [r3, #20]
	if (SUCCESS == status) {
    4186:	2900      	cmp	r1, #0
    4188:	d111      	bne.n	41ae <appDataConf+0x32>
		if (!appNetworkStatus) {
    418a:	4b13      	ldr	r3, [pc, #76]	; (41d8 <appDataConf+0x5c>)
    418c:	781b      	ldrb	r3, [r3, #0]
    418e:	2b00      	cmp	r3, #0
    4190:	d004      	beq.n	419c <appDataConf+0x20>
	if (APP_STATE_WAIT_CONF == appState)
    4192:	4b12      	ldr	r3, [pc, #72]	; (41dc <appDataConf+0x60>)
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	2b06      	cmp	r3, #6
    4198:	d018      	beq.n	41cc <appDataConf+0x50>
}
    419a:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    419c:	4b0d      	ldr	r3, [pc, #52]	; (41d4 <appDataConf+0x58>)
    419e:	619a      	str	r2, [r3, #24]
			SYS_TimerStop(&appNetworkStatusTimer);
    41a0:	480f      	ldr	r0, [pc, #60]	; (41e0 <appDataConf+0x64>)
    41a2:	4b10      	ldr	r3, [pc, #64]	; (41e4 <appDataConf+0x68>)
    41a4:	4798      	blx	r3
			appNetworkStatus = true;
    41a6:	2201      	movs	r2, #1
    41a8:	4b0b      	ldr	r3, [pc, #44]	; (41d8 <appDataConf+0x5c>)
    41aa:	701a      	strb	r2, [r3, #0]
    41ac:	e7f1      	b.n	4192 <appDataConf+0x16>
		if (appNetworkStatus) {
    41ae:	4b0a      	ldr	r3, [pc, #40]	; (41d8 <appDataConf+0x5c>)
    41b0:	781b      	ldrb	r3, [r3, #0]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d0ed      	beq.n	4192 <appDataConf+0x16>
		port_base->OUTCLR.reg = pin_mask;
    41b6:	2280      	movs	r2, #128	; 0x80
    41b8:	0512      	lsls	r2, r2, #20
    41ba:	4b06      	ldr	r3, [pc, #24]	; (41d4 <appDataConf+0x58>)
    41bc:	615a      	str	r2, [r3, #20]
			SYS_TimerStart(&appNetworkStatusTimer); 
    41be:	4808      	ldr	r0, [pc, #32]	; (41e0 <appDataConf+0x64>)
    41c0:	4b09      	ldr	r3, [pc, #36]	; (41e8 <appDataConf+0x6c>)
    41c2:	4798      	blx	r3
			appNetworkStatus = false;
    41c4:	2200      	movs	r2, #0
    41c6:	4b04      	ldr	r3, [pc, #16]	; (41d8 <appDataConf+0x5c>)
    41c8:	701a      	strb	r2, [r3, #0]
    41ca:	e7e2      	b.n	4192 <appDataConf+0x16>
		appState = APP_STATE_SENDING_DONE;
    41cc:	2207      	movs	r2, #7
    41ce:	4b03      	ldr	r3, [pc, #12]	; (41dc <appDataConf+0x60>)
    41d0:	701a      	strb	r2, [r3, #0]
}
    41d2:	e7e2      	b.n	419a <appDataConf+0x1e>
    41d4:	41004400 	.word	0x41004400
    41d8:	2000026a 	.word	0x2000026a
    41dc:	2000022c 	.word	0x2000022c
    41e0:	2000026c 	.word	0x2000026c
    41e4:	00002e7d 	.word	0x00002e7d
    41e8:	00002ee9 	.word	0x00002ee9

000041ec <wsndemo_init>:
{
    41ec:	b510      	push	{r4, lr}
	MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly);
    41ee:	4902      	ldr	r1, [pc, #8]	; (41f8 <wsndemo_init+0xc>)
    41f0:	4802      	ldr	r0, [pc, #8]	; (41fc <wsndemo_init+0x10>)
    41f2:	4b03      	ldr	r3, [pc, #12]	; (4200 <wsndemo_init+0x14>)
    41f4:	4798      	blx	r3
}
    41f6:	bd10      	pop	{r4, pc}
    41f8:	2000000c 	.word	0x2000000c
    41fc:	20000030 	.word	0x20000030
    4200:	00004961 	.word	0x00004961

00004204 <wsndemo_task>:
/**
 * Task of the WSNDemo application
 * This task should be called in a while(1)
 */
void wsndemo_task(void)
{
    4204:	b5f0      	push	{r4, r5, r6, r7, lr}
    4206:	b087      	sub	sp, #28
	MeshTasks();
    4208:	4bc3      	ldr	r3, [pc, #780]	; (4518 <wsndemo_task+0x314>)
    420a:	4798      	blx	r3
	switch(appState)
    420c:	4bc3      	ldr	r3, [pc, #780]	; (451c <wsndemo_task+0x318>)
    420e:	781b      	ldrb	r3, [r3, #0]
    4210:	2b02      	cmp	r3, #2
    4212:	d063      	beq.n	42dc <wsndemo_task+0xd8>
    4214:	b2da      	uxtb	r2, r3
    4216:	2a02      	cmp	r2, #2
    4218:	d90a      	bls.n	4230 <wsndemo_task+0x2c>
    421a:	2b05      	cmp	r3, #5
    421c:	d068      	beq.n	42f0 <wsndemo_task+0xec>
    421e:	2b07      	cmp	r3, #7
    4220:	d15a      	bne.n	42d8 <wsndemo_task+0xd4>
			appState = APP_STATE_WAIT_SEND_TIMER;
    4222:	2208      	movs	r2, #8
    4224:	4bbd      	ldr	r3, [pc, #756]	; (451c <wsndemo_task+0x318>)
    4226:	701a      	strb	r2, [r3, #0]
			SYS_TimerStart(&appDataSendingTimer);
    4228:	48bd      	ldr	r0, [pc, #756]	; (4520 <wsndemo_task+0x31c>)
    422a:	4bbe      	ldr	r3, [pc, #760]	; (4524 <wsndemo_task+0x320>)
    422c:	4798      	blx	r3
	APP_TaskHandler();
}
    422e:	e053      	b.n	42d8 <wsndemo_task+0xd4>
	switch(appState)
    4230:	2b00      	cmp	r3, #0
    4232:	d151      	bne.n	42d8 <wsndemo_task+0xd4>
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    4234:	48bc      	ldr	r0, [pc, #752]	; (4528 <wsndemo_task+0x324>)
    4236:	2501      	movs	r5, #1
    4238:	7005      	strb	r5, [r0, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    423a:	2602      	movs	r6, #2
    423c:	7046      	strb	r6, [r0, #1]
	appMsg.extAddr              = 0;
    423e:	2400      	movs	r4, #0
    4240:	2200      	movs	r2, #0
    4242:	8042      	strh	r2, [r0, #2]
    4244:	8082      	strh	r2, [r0, #4]
    4246:	80c2      	strh	r2, [r0, #6]
    4248:	8102      	strh	r2, [r0, #8]
	appMsg.shortAddr            = 0;
    424a:	2300      	movs	r3, #0
    424c:	8143      	strh	r3, [r0, #10]
	appMsg.softVersion          = 0x01100000;
    424e:	2388      	movs	r3, #136	; 0x88
    4250:	045b      	lsls	r3, r3, #17
    4252:	60c3      	str	r3, [r0, #12]
	appMsg.channelMask          = CHANNEL_MAP;
    4254:	2380      	movs	r3, #128	; 0x80
    4256:	049b      	lsls	r3, r3, #18
    4258:	6103      	str	r3, [r0, #16]
	appMsg.nextHopAddr          = 0;
    425a:	75c2      	strb	r2, [r0, #23]
    425c:	7602      	strb	r2, [r0, #24]
	appMsg.lqi                  = 0;
    425e:	7644      	strb	r4, [r0, #25]
	appMsg.rssi                 = 0;
    4260:	7684      	strb	r4, [r0, #26]
	appMsg.sensors.type        = 1;
    4262:	76c5      	strb	r5, [r0, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    4264:	230c      	movs	r3, #12
    4266:	7703      	strb	r3, [r0, #28]
	appMsg.sensors.battery     = 0;
    4268:	0003      	movs	r3, r0
    426a:	7742      	strb	r2, [r0, #29]
    426c:	7782      	strb	r2, [r0, #30]
    426e:	77c2      	strb	r2, [r0, #31]
    4270:	331d      	adds	r3, #29
    4272:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 0;
    4274:	0003      	movs	r3, r0
    4276:	3321      	adds	r3, #33	; 0x21
    4278:	701a      	strb	r2, [r3, #0]
    427a:	705a      	strb	r2, [r3, #1]
    427c:	709a      	strb	r2, [r3, #2]
    427e:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.light       = 0;
    4280:	0003      	movs	r3, r0
    4282:	3325      	adds	r3, #37	; 0x25
    4284:	701a      	strb	r2, [r3, #0]
    4286:	705a      	strb	r2, [r3, #1]
    4288:	709a      	strb	r2, [r3, #2]
    428a:	70da      	strb	r2, [r3, #3]
	appMsg.caption.type         = 32;
    428c:	3220      	adds	r2, #32
    428e:	2329      	movs	r3, #41	; 0x29
    4290:	54c2      	strb	r2, [r0, r3]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    4292:	3a11      	subs	r2, #17
    4294:	3301      	adds	r3, #1
    4296:	54c2      	strb	r2, [r0, r3]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    4298:	302b      	adds	r0, #43	; 0x2b
    429a:	49a4      	ldr	r1, [pc, #656]	; (452c <wsndemo_task+0x328>)
    429c:	4ba4      	ldr	r3, [pc, #656]	; (4530 <wsndemo_task+0x32c>)
    429e:	4798      	blx	r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    42a0:	4b9f      	ldr	r3, [pc, #636]	; (4520 <wsndemo_task+0x31c>)
    42a2:	22fa      	movs	r2, #250	; 0xfa
    42a4:	0092      	lsls	r2, r2, #2
    42a6:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    42a8:	731c      	strb	r4, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    42aa:	4aa2      	ldr	r2, [pc, #648]	; (4534 <wsndemo_task+0x330>)
    42ac:	611a      	str	r2, [r3, #16]
	appNetworkStatus = false;
    42ae:	4ba2      	ldr	r3, [pc, #648]	; (4538 <wsndemo_task+0x334>)
    42b0:	701c      	strb	r4, [r3, #0]
	appNetworkStatusTimer.interval = APP_NWKSTATUS_INTERVAL;
    42b2:	48a2      	ldr	r0, [pc, #648]	; (453c <wsndemo_task+0x338>)
    42b4:	4ba2      	ldr	r3, [pc, #648]	; (4540 <wsndemo_task+0x33c>)
    42b6:	6083      	str	r3, [r0, #8]
	appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
    42b8:	7305      	strb	r5, [r0, #12]
	appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    42ba:	4ba2      	ldr	r3, [pc, #648]	; (4544 <wsndemo_task+0x340>)
    42bc:	6103      	str	r3, [r0, #16]
	SYS_TimerStart(&appNetworkStatusTimer);
    42be:	4b99      	ldr	r3, [pc, #612]	; (4524 <wsndemo_task+0x320>)
    42c0:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    42c2:	2280      	movs	r2, #128	; 0x80
    42c4:	0512      	lsls	r2, r2, #20
    42c6:	4ba0      	ldr	r3, [pc, #640]	; (4548 <wsndemo_task+0x344>)
    42c8:	619a      	str	r2, [r3, #24]
	APP_CommandsInit();
    42ca:	4ba0      	ldr	r3, [pc, #640]	; (454c <wsndemo_task+0x348>)
    42cc:	4798      	blx	r3
	MiApp_SubscribeDataIndicationCallback(appDataInd);
    42ce:	48a0      	ldr	r0, [pc, #640]	; (4550 <wsndemo_task+0x34c>)
    42d0:	4ba0      	ldr	r3, [pc, #640]	; (4554 <wsndemo_task+0x350>)
    42d2:	4798      	blx	r3
	appState = APP_STATE_CONNECT_NETWORK;
    42d4:	4b91      	ldr	r3, [pc, #580]	; (451c <wsndemo_task+0x318>)
    42d6:	701e      	strb	r6, [r3, #0]
}
    42d8:	b007      	add	sp, #28
    42da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			MiApp_SearchConnection(APP_SCAN_DURATION, CHANNEL_MAP, searchConfim);
    42dc:	4a9e      	ldr	r2, [pc, #632]	; (4558 <wsndemo_task+0x354>)
    42de:	2180      	movs	r1, #128	; 0x80
    42e0:	0489      	lsls	r1, r1, #18
    42e2:	200a      	movs	r0, #10
    42e4:	4b9d      	ldr	r3, [pc, #628]	; (455c <wsndemo_task+0x358>)
    42e6:	4798      	blx	r3
			appState = APP_STATE_CONNECTING_NETWORK;
    42e8:	2203      	movs	r2, #3
    42ea:	4b8c      	ldr	r3, [pc, #560]	; (451c <wsndemo_task+0x318>)
    42ec:	701a      	strb	r2, [r3, #0]
    42ee:	e7f3      	b.n	42d8 <wsndemo_task+0xd4>
    uint16_t shortAddressLocal = 0xFFFF;
    42f0:	2301      	movs	r3, #1
    42f2:	425b      	negs	r3, r3
    42f4:	2212      	movs	r2, #18
    42f6:	446a      	add	r2, sp
    42f8:	8013      	strh	r3, [r2, #0]
    uint16_t shortAddressPanId = 0xFFFF;
    42fa:	aa05      	add	r2, sp, #20
    42fc:	8013      	strh	r3, [r2, #0]
    uint16_t dstAddr = 0; /* PAN Coordinator Address */
    42fe:	2200      	movs	r2, #0
    4300:	3317      	adds	r3, #23
    4302:	446b      	add	r3, sp
    4304:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    4306:	4b96      	ldr	r3, [pc, #600]	; (4560 <wsndemo_task+0x35c>)
    4308:	681a      	ldr	r2, [r3, #0]
    430a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    430c:	b25b      	sxtb	r3, r3
    430e:	2b00      	cmp	r3, #0
    4310:	dbfb      	blt.n	430a <wsndemo_task+0x106>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4312:	7b13      	ldrb	r3, [r2, #12]
    4314:	2102      	movs	r1, #2
    4316:	430b      	orrs	r3, r1
    4318:	7313      	strb	r3, [r2, #12]
    431a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    431c:	b25b      	sxtb	r3, r3
    431e:	2b00      	cmp	r3, #0
    4320:	dbfb      	blt.n	431a <wsndemo_task+0x116>
	delay_us(100);
    4322:	2064      	movs	r0, #100	; 0x64
    4324:	4b8f      	ldr	r3, [pc, #572]	; (4564 <wsndemo_task+0x360>)
    4326:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4328:	4b8d      	ldr	r3, [pc, #564]	; (4560 <wsndemo_task+0x35c>)
    432a:	681b      	ldr	r3, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    432c:	7e19      	ldrb	r1, [r3, #24]
    432e:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4330:	2201      	movs	r2, #1
    4332:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4334:	0748      	lsls	r0, r1, #29
    4336:	d501      	bpl.n	433c <wsndemo_task+0x138>
		status_flags |= ADC_STATUS_WINDOW;
    4338:	2002      	movs	r0, #2
    433a:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    433c:	0789      	lsls	r1, r1, #30
    433e:	d501      	bpl.n	4344 <wsndemo_task+0x140>
		status_flags |= ADC_STATUS_OVERRUN;
    4340:	2104      	movs	r1, #4
    4342:	430a      	orrs	r2, r1
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4344:	07d2      	lsls	r2, r2, #31
    4346:	d500      	bpl.n	434a <wsndemo_task+0x146>
    4348:	e0cb      	b.n	44e2 <wsndemo_task+0x2de>
	appMsg.sensors.light       = adcResult;
    434a:	4a87      	ldr	r2, [pc, #540]	; (4568 <wsndemo_task+0x364>)
    434c:	8811      	ldrh	r1, [r2, #0]
    434e:	4a76      	ldr	r2, [pc, #472]	; (4528 <wsndemo_task+0x324>)
    4350:	3225      	adds	r2, #37	; 0x25
    4352:	7011      	strb	r1, [r2, #0]
    4354:	0a08      	lsrs	r0, r1, #8
    4356:	7050      	strb	r0, [r2, #1]
    4358:	2000      	movs	r0, #0
    435a:	7090      	strb	r0, [r2, #2]
    435c:	0e09      	lsrs	r1, r1, #24
    435e:	70d1      	strb	r1, [r2, #3]
    4360:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    4362:	b252      	sxtb	r2, r2
    4364:	2a00      	cmp	r2, #0
    4366:	dbfb      	blt.n	4360 <wsndemo_task+0x15c>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    4368:	691a      	ldr	r2, [r3, #16]
    436a:	211f      	movs	r1, #31
    436c:	438a      	bics	r2, r1
    436e:	3907      	subs	r1, #7
    4370:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    4372:	611a      	str	r2, [r3, #16]
    4374:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    4376:	b252      	sxtb	r2, r2
    4378:	2a00      	cmp	r2, #0
    437a:	dbfb      	blt.n	4374 <wsndemo_task+0x170>
	delay_us(10);
    437c:	200a      	movs	r0, #10
    437e:	4b79      	ldr	r3, [pc, #484]	; (4564 <wsndemo_task+0x360>)
    4380:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4382:	4b77      	ldr	r3, [pc, #476]	; (4560 <wsndemo_task+0x35c>)
    4384:	681a      	ldr	r2, [r3, #0]
    4386:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4388:	b25b      	sxtb	r3, r3
    438a:	2b00      	cmp	r3, #0
    438c:	dbfb      	blt.n	4386 <wsndemo_task+0x182>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    438e:	7b13      	ldrb	r3, [r2, #12]
    4390:	2102      	movs	r1, #2
    4392:	430b      	orrs	r3, r1
    4394:	7313      	strb	r3, [r2, #12]
    4396:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4398:	b25b      	sxtb	r3, r3
    439a:	2b00      	cmp	r3, #0
    439c:	dbfb      	blt.n	4396 <wsndemo_task+0x192>
	delay_us(10);
    439e:	200a      	movs	r0, #10
    43a0:	4b70      	ldr	r3, [pc, #448]	; (4564 <wsndemo_task+0x360>)
    43a2:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    43a4:	4b6e      	ldr	r3, [pc, #440]	; (4560 <wsndemo_task+0x35c>)
    43a6:	681b      	ldr	r3, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    43a8:	7e19      	ldrb	r1, [r3, #24]
    43aa:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    43ac:	2201      	movs	r2, #1
    43ae:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    43b0:	0748      	lsls	r0, r1, #29
    43b2:	d501      	bpl.n	43b8 <wsndemo_task+0x1b4>
		status_flags |= ADC_STATUS_WINDOW;
    43b4:	2002      	movs	r0, #2
    43b6:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    43b8:	0789      	lsls	r1, r1, #30
    43ba:	d501      	bpl.n	43c0 <wsndemo_task+0x1bc>
		status_flags |= ADC_STATUS_OVERRUN;
    43bc:	2104      	movs	r1, #4
    43be:	430a      	orrs	r2, r1
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    43c0:	07d2      	lsls	r2, r2, #31
    43c2:	d500      	bpl.n	43c6 <wsndemo_task+0x1c2>
    43c4:	e0e0      	b.n	4588 <wsndemo_task+0x384>
	appMsg.sensors.temperature = adcResult;
    43c6:	4a68      	ldr	r2, [pc, #416]	; (4568 <wsndemo_task+0x364>)
    43c8:	8811      	ldrh	r1, [r2, #0]
    43ca:	4a57      	ldr	r2, [pc, #348]	; (4528 <wsndemo_task+0x324>)
    43cc:	3221      	adds	r2, #33	; 0x21
    43ce:	7011      	strb	r1, [r2, #0]
    43d0:	0a08      	lsrs	r0, r1, #8
    43d2:	7050      	strb	r0, [r2, #1]
    43d4:	2000      	movs	r0, #0
    43d6:	7090      	strb	r0, [r2, #2]
    43d8:	0e09      	lsrs	r1, r1, #24
    43da:	70d1      	strb	r1, [r2, #3]
    43dc:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    43de:	b252      	sxtb	r2, r2
    43e0:	2a00      	cmp	r2, #0
    43e2:	dbfb      	blt.n	43dc <wsndemo_task+0x1d8>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    43e4:	691a      	ldr	r2, [r3, #16]
    43e6:	211f      	movs	r1, #31
    43e8:	438a      	bics	r2, r1
    43ea:	3904      	subs	r1, #4
    43ec:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    43ee:	611a      	str	r2, [r3, #16]
    43f0:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    43f2:	b252      	sxtb	r2, r2
    43f4:	2a00      	cmp	r2, #0
    43f6:	dbfb      	blt.n	43f0 <wsndemo_task+0x1ec>
    43f8:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    43fa:	b252      	sxtb	r2, r2
    43fc:	2a00      	cmp	r2, #0
    43fe:	dbfb      	blt.n	43f8 <wsndemo_task+0x1f4>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4400:	7b1a      	ldrb	r2, [r3, #12]
    4402:	2102      	movs	r1, #2
    4404:	430a      	orrs	r2, r1
    4406:	731a      	strb	r2, [r3, #12]
    4408:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    440a:	b252      	sxtb	r2, r2
    440c:	2a00      	cmp	r2, #0
    440e:	dbfb      	blt.n	4408 <wsndemo_task+0x204>
	delay_us(10);
    4410:	200a      	movs	r0, #10
    4412:	4b54      	ldr	r3, [pc, #336]	; (4564 <wsndemo_task+0x360>)
    4414:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4416:	4b52      	ldr	r3, [pc, #328]	; (4560 <wsndemo_task+0x35c>)
    4418:	6819      	ldr	r1, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    441a:	7e0a      	ldrb	r2, [r1, #24]
    441c:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    441e:	2301      	movs	r3, #1
    4420:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    4422:	0750      	lsls	r0, r2, #29
    4424:	d501      	bpl.n	442a <wsndemo_task+0x226>
		status_flags |= ADC_STATUS_WINDOW;
    4426:	2002      	movs	r0, #2
    4428:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    442a:	0792      	lsls	r2, r2, #30
    442c:	d501      	bpl.n	4432 <wsndemo_task+0x22e>
		status_flags |= ADC_STATUS_OVERRUN;
    442e:	2204      	movs	r2, #4
    4430:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4432:	07db      	lsls	r3, r3, #31
    4434:	d500      	bpl.n	4438 <wsndemo_task+0x234>
    4436:	e0c1      	b.n	45bc <wsndemo_task+0x3b8>
	appMsg.sensors.battery     = adcResult;
    4438:	4c3b      	ldr	r4, [pc, #236]	; (4528 <wsndemo_task+0x324>)
    443a:	4b4b      	ldr	r3, [pc, #300]	; (4568 <wsndemo_task+0x364>)
    443c:	881b      	ldrh	r3, [r3, #0]
    443e:	0022      	movs	r2, r4
    4440:	7763      	strb	r3, [r4, #29]
    4442:	0a19      	lsrs	r1, r3, #8
    4444:	77a1      	strb	r1, [r4, #30]
    4446:	2100      	movs	r1, #0
    4448:	77e1      	strb	r1, [r4, #31]
    444a:	321d      	adds	r2, #29
    444c:	0e1b      	lsrs	r3, r3, #24
    444e:	70d3      	strb	r3, [r2, #3]
	MiApp_Get(SHORT_ADDRESS, (uint8_t *)&shortAddressLocal);
    4450:	2512      	movs	r5, #18
    4452:	446d      	add	r5, sp
    4454:	0029      	movs	r1, r5
    4456:	2002      	movs	r0, #2
    4458:	4e44      	ldr	r6, [pc, #272]	; (456c <wsndemo_task+0x368>)
    445a:	47b0      	blx	r6
		appMsg.shortAddr = shortAddressLocal;
    445c:	882b      	ldrh	r3, [r5, #0]
    445e:	8163      	strh	r3, [r4, #10]
	appMsg.extAddr   = appMsg.shortAddr;
    4460:	8063      	strh	r3, [r4, #2]
    4462:	0c1b      	lsrs	r3, r3, #16
    4464:	80a3      	strh	r3, [r4, #4]
    4466:	2300      	movs	r3, #0
    4468:	80e3      	strh	r3, [r4, #6]
    446a:	8123      	strh	r3, [r4, #8]
	appMsg.nextHopAddr = MiApp_MeshGetNextHopAddr(PAN_COORDINATOR_SHORT_ADDRESS);
    446c:	2000      	movs	r0, #0
    446e:	4b40      	ldr	r3, [pc, #256]	; (4570 <wsndemo_task+0x36c>)
    4470:	4798      	blx	r3
    4472:	75e0      	strb	r0, [r4, #23]
    4474:	0a00      	lsrs	r0, r0, #8
    4476:	7620      	strb	r0, [r4, #24]
	MiApp_Get(CHANNEL, (uint8_t *)&appMsg.workingChannel);
    4478:	0021      	movs	r1, r4
    447a:	3116      	adds	r1, #22
    447c:	2000      	movs	r0, #0
    447e:	47b0      	blx	r6
	MiApp_Get(PANID, (uint8_t *)&shortAddressPanId);
    4480:	af05      	add	r7, sp, #20
    4482:	0039      	movs	r1, r7
    4484:	2001      	movs	r0, #1
    4486:	47b0      	blx	r6
        appMsg.panId = shortAddressPanId;
    4488:	883b      	ldrh	r3, [r7, #0]
    448a:	82a3      	strh	r3, [r4, #20]
    448c:	2280      	movs	r2, #128	; 0x80
    448e:	0512      	lsls	r2, r2, #20
    4490:	4b2d      	ldr	r3, [pc, #180]	; (4548 <wsndemo_task+0x344>)
    4492:	619a      	str	r2, [r3, #24]
	appMsg.caption.type         = 32;
    4494:	2220      	movs	r2, #32
    4496:	2329      	movs	r3, #41	; 0x29
    4498:	54e2      	strb	r2, [r4, r3]
    appMsg.caption.size         = APP_CAPTION_SIZE;
    449a:	3a11      	subs	r2, #17
    449c:	3301      	adds	r3, #1
    449e:	54e2      	strb	r2, [r4, r3]
    memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    44a0:	0026      	movs	r6, r4
    44a2:	362b      	adds	r6, #43	; 0x2b
    44a4:	4921      	ldr	r1, [pc, #132]	; (452c <wsndemo_task+0x328>)
    44a6:	0030      	movs	r0, r6
    44a8:	4b21      	ldr	r3, [pc, #132]	; (4530 <wsndemo_task+0x32c>)
    44aa:	4798      	blx	r3
	sprintf(appMsg.caption.text, "SUN%03d -0x%04x", MAC_ADDR, shortAddressLocal);
    44ac:	882b      	ldrh	r3, [r5, #0]
    44ae:	2211      	movs	r2, #17
    44b0:	4930      	ldr	r1, [pc, #192]	; (4574 <wsndemo_task+0x370>)
    44b2:	0030      	movs	r0, r6
    44b4:	4d30      	ldr	r5, [pc, #192]	; (4578 <wsndemo_task+0x374>)
    44b6:	47a8      	blx	r5
	if (MiApp_SendData(2, (uint8_t *)&dstAddr, sizeof(appMsg), (uint8_t *)&appMsg, wsnmsghandle, true, appDataConf))
    44b8:	4b30      	ldr	r3, [pc, #192]	; (457c <wsndemo_task+0x378>)
    44ba:	9302      	str	r3, [sp, #8]
    44bc:	2301      	movs	r3, #1
    44be:	9301      	str	r3, [sp, #4]
    44c0:	4b2f      	ldr	r3, [pc, #188]	; (4580 <wsndemo_task+0x37c>)
    44c2:	781b      	ldrb	r3, [r3, #0]
    44c4:	9300      	str	r3, [sp, #0]
    44c6:	0023      	movs	r3, r4
    44c8:	223a      	movs	r2, #58	; 0x3a
    44ca:	2116      	movs	r1, #22
    44cc:	4469      	add	r1, sp
    44ce:	2002      	movs	r0, #2
    44d0:	4c2c      	ldr	r4, [pc, #176]	; (4584 <wsndemo_task+0x380>)
    44d2:	47a0      	blx	r4
    44d4:	2800      	cmp	r0, #0
    44d6:	d000      	beq.n	44da <wsndemo_task+0x2d6>
    44d8:	e08a      	b.n	45f0 <wsndemo_task+0x3ec>
		appState = APP_STATE_SENDING_DONE;
    44da:	2207      	movs	r2, #7
    44dc:	4b0f      	ldr	r3, [pc, #60]	; (451c <wsndemo_task+0x318>)
    44de:	701a      	strb	r2, [r3, #0]
    44e0:	e6fa      	b.n	42d8 <wsndemo_task+0xd4>
    44e2:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    44e4:	b252      	sxtb	r2, r2
    44e6:	2a00      	cmp	r2, #0
    44e8:	dbfb      	blt.n	44e2 <wsndemo_task+0x2de>
	*result = adc_module->RESULT.reg;
    44ea:	8b59      	ldrh	r1, [r3, #26]
    44ec:	4a1e      	ldr	r2, [pc, #120]	; (4568 <wsndemo_task+0x364>)
    44ee:	8011      	strh	r1, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    44f0:	2201      	movs	r2, #1
    44f2:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    44f4:	7e19      	ldrb	r1, [r3, #24]
    44f6:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    44f8:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    44fa:	0748      	lsls	r0, r1, #29
    44fc:	d501      	bpl.n	4502 <wsndemo_task+0x2fe>
		status_flags |= ADC_STATUS_WINDOW;
    44fe:	2002      	movs	r0, #2
    4500:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4502:	0789      	lsls	r1, r1, #30
    4504:	d501      	bpl.n	450a <wsndemo_task+0x306>
		status_flags |= ADC_STATUS_OVERRUN;
    4506:	2104      	movs	r1, #4
    4508:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    450a:	0752      	lsls	r2, r2, #29
    450c:	d400      	bmi.n	4510 <wsndemo_task+0x30c>
    450e:	e71c      	b.n	434a <wsndemo_task+0x146>
	adc_module->INTFLAG.reg = int_flags;
    4510:	2202      	movs	r2, #2
    4512:	761a      	strb	r2, [r3, #24]
    4514:	e719      	b.n	434a <wsndemo_task+0x146>
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	00004aa1 	.word	0x00004aa1
    451c:	2000022c 	.word	0x2000022c
    4520:	20001284 	.word	0x20001284
    4524:	00002ee9 	.word	0x00002ee9
    4528:	20000230 	.word	0x20000230
    452c:	00007ef4 	.word	0x00007ef4
    4530:	000074ef 	.word	0x000074ef
    4534:	00004131 	.word	0x00004131
    4538:	2000026a 	.word	0x2000026a
    453c:	2000026c 	.word	0x2000026c
    4540:	00002710 	.word	0x00002710
    4544:	000040a1 	.word	0x000040a1
    4548:	41004400 	.word	0x41004400
    454c:	00003e79 	.word	0x00003e79
    4550:	00004159 	.word	0x00004159
    4554:	00005d45 	.word	0x00005d45
    4558:	000040c9 	.word	0x000040c9
    455c:	00006c6d 	.word	0x00006c6d
    4560:	2000127c 	.word	0x2000127c
    4564:	00000155 	.word	0x00000155
    4568:	20001272 	.word	0x20001272
    456c:	00004c81 	.word	0x00004c81
    4570:	00004cc9 	.word	0x00004cc9
    4574:	00007ef8 	.word	0x00007ef8
    4578:	00007511 	.word	0x00007511
    457c:	0000417d 	.word	0x0000417d
    4580:	20000280 	.word	0x20000280
    4584:	00004b3d 	.word	0x00004b3d
    4588:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    458a:	b252      	sxtb	r2, r2
    458c:	2a00      	cmp	r2, #0
    458e:	dbfb      	blt.n	4588 <wsndemo_task+0x384>
	*result = adc_module->RESULT.reg;
    4590:	8b59      	ldrh	r1, [r3, #26]
    4592:	4a1b      	ldr	r2, [pc, #108]	; (4600 <wsndemo_task+0x3fc>)
    4594:	8011      	strh	r1, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    4596:	2201      	movs	r2, #1
    4598:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    459a:	7e19      	ldrb	r1, [r3, #24]
    459c:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    459e:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    45a0:	0748      	lsls	r0, r1, #29
    45a2:	d501      	bpl.n	45a8 <wsndemo_task+0x3a4>
		status_flags |= ADC_STATUS_WINDOW;
    45a4:	2002      	movs	r0, #2
    45a6:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    45a8:	0789      	lsls	r1, r1, #30
    45aa:	d501      	bpl.n	45b0 <wsndemo_task+0x3ac>
		status_flags |= ADC_STATUS_OVERRUN;
    45ac:	2104      	movs	r1, #4
    45ae:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    45b0:	0752      	lsls	r2, r2, #29
    45b2:	d400      	bmi.n	45b6 <wsndemo_task+0x3b2>
    45b4:	e707      	b.n	43c6 <wsndemo_task+0x1c2>
	adc_module->INTFLAG.reg = int_flags;
    45b6:	2202      	movs	r2, #2
    45b8:	761a      	strb	r2, [r3, #24]
    45ba:	e704      	b.n	43c6 <wsndemo_task+0x1c2>
    45bc:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    45be:	b25b      	sxtb	r3, r3
    45c0:	2b00      	cmp	r3, #0
    45c2:	dbfb      	blt.n	45bc <wsndemo_task+0x3b8>
	*result = adc_module->RESULT.reg;
    45c4:	8b4a      	ldrh	r2, [r1, #26]
    45c6:	4b0e      	ldr	r3, [pc, #56]	; (4600 <wsndemo_task+0x3fc>)
    45c8:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    45ca:	2301      	movs	r3, #1
    45cc:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    45ce:	7e0a      	ldrb	r2, [r1, #24]
    45d0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    45d2:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    45d4:	0750      	lsls	r0, r2, #29
    45d6:	d501      	bpl.n	45dc <wsndemo_task+0x3d8>
		status_flags |= ADC_STATUS_WINDOW;
    45d8:	2002      	movs	r0, #2
    45da:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    45dc:	0792      	lsls	r2, r2, #30
    45de:	d501      	bpl.n	45e4 <wsndemo_task+0x3e0>
		status_flags |= ADC_STATUS_OVERRUN;
    45e0:	2204      	movs	r2, #4
    45e2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    45e4:	075b      	lsls	r3, r3, #29
    45e6:	d400      	bmi.n	45ea <wsndemo_task+0x3e6>
    45e8:	e726      	b.n	4438 <wsndemo_task+0x234>
	adc_module->INTFLAG.reg = int_flags;
    45ea:	2302      	movs	r3, #2
    45ec:	760b      	strb	r3, [r1, #24]
    45ee:	e723      	b.n	4438 <wsndemo_task+0x234>
		++wsnmsghandle;
    45f0:	4a04      	ldr	r2, [pc, #16]	; (4604 <wsndemo_task+0x400>)
    45f2:	7813      	ldrb	r3, [r2, #0]
    45f4:	3301      	adds	r3, #1
    45f6:	7013      	strb	r3, [r2, #0]
		appState = APP_STATE_WAIT_CONF;
    45f8:	2206      	movs	r2, #6
    45fa:	4b03      	ldr	r3, [pc, #12]	; (4608 <wsndemo_task+0x404>)
    45fc:	701a      	strb	r2, [r3, #0]
    45fe:	e66b      	b.n	42d8 <wsndemo_task+0xd4>
    4600:	20001272 	.word	0x20001272
    4604:	20000280 	.word	0x20000280
    4608:	2000022c 	.word	0x2000022c

0000460c <common_tc_delay>:
    460c:	b510      	push	{r4, lr}
    460e:	1c04      	adds	r4, r0, #0
    4610:	4b13      	ldr	r3, [pc, #76]	; (4660 <common_tc_delay+0x54>)
    4612:	4798      	blx	r3
    4614:	4b13      	ldr	r3, [pc, #76]	; (4664 <common_tc_delay+0x58>)
    4616:	781a      	ldrb	r2, [r3, #0]
    4618:	4362      	muls	r2, r4
    461a:	1881      	adds	r1, r0, r2
    461c:	4b12      	ldr	r3, [pc, #72]	; (4668 <common_tc_delay+0x5c>)
    461e:	6059      	str	r1, [r3, #4]
    4620:	6859      	ldr	r1, [r3, #4]
    4622:	0c09      	lsrs	r1, r1, #16
    4624:	6059      	str	r1, [r3, #4]
    4626:	685b      	ldr	r3, [r3, #4]
    4628:	2b00      	cmp	r3, #0
    462a:	d007      	beq.n	463c <common_tc_delay+0x30>
    462c:	4b0e      	ldr	r3, [pc, #56]	; (4668 <common_tc_delay+0x5c>)
    462e:	6859      	ldr	r1, [r3, #4]
    4630:	3201      	adds	r2, #1
    4632:	1880      	adds	r0, r0, r2
    4634:	8118      	strh	r0, [r3, #8]
    4636:	4b0d      	ldr	r3, [pc, #52]	; (466c <common_tc_delay+0x60>)
    4638:	4798      	blx	r3
    463a:	e004      	b.n	4646 <common_tc_delay+0x3a>
    463c:	1882      	adds	r2, r0, r2
    463e:	4b0a      	ldr	r3, [pc, #40]	; (4668 <common_tc_delay+0x5c>)
    4640:	811a      	strh	r2, [r3, #8]
    4642:	4b0b      	ldr	r3, [pc, #44]	; (4670 <common_tc_delay+0x64>)
    4644:	4798      	blx	r3
    4646:	4b08      	ldr	r3, [pc, #32]	; (4668 <common_tc_delay+0x5c>)
    4648:	891b      	ldrh	r3, [r3, #8]
    464a:	2b63      	cmp	r3, #99	; 0x63
    464c:	d802      	bhi.n	4654 <common_tc_delay+0x48>
    464e:	3364      	adds	r3, #100	; 0x64
    4650:	4a05      	ldr	r2, [pc, #20]	; (4668 <common_tc_delay+0x5c>)
    4652:	8113      	strh	r3, [r2, #8]
    4654:	4b04      	ldr	r3, [pc, #16]	; (4668 <common_tc_delay+0x5c>)
    4656:	8918      	ldrh	r0, [r3, #8]
    4658:	4b06      	ldr	r3, [pc, #24]	; (4674 <common_tc_delay+0x68>)
    465a:	4798      	blx	r3
    465c:	bd10      	pop	{r4, pc}
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	00002fad 	.word	0x00002fad
    4664:	20001298 	.word	0x20001298
    4668:	20000284 	.word	0x20000284
    466c:	00002fc1 	.word	0x00002fc1
    4670:	00002fd5 	.word	0x00002fd5
    4674:	00003011 	.word	0x00003011

00004678 <common_tc_init>:
    4678:	b508      	push	{r3, lr}
    467a:	2200      	movs	r2, #0
    467c:	4b03      	ldr	r3, [pc, #12]	; (468c <common_tc_init+0x14>)
    467e:	701a      	strb	r2, [r3, #0]
    4680:	4b03      	ldr	r3, [pc, #12]	; (4690 <common_tc_init+0x18>)
    4682:	4798      	blx	r3
    4684:	4b03      	ldr	r3, [pc, #12]	; (4694 <common_tc_init+0x1c>)
    4686:	7018      	strb	r0, [r3, #0]
    4688:	bd08      	pop	{r3, pc}
    468a:	46c0      	nop			; (mov r8, r8)
    468c:	20000284 	.word	0x20000284
    4690:	00003029 	.word	0x00003029
    4694:	20001298 	.word	0x20001298

00004698 <tmr_ovf_callback>:
    4698:	b508      	push	{r3, lr}
    469a:	4b0e      	ldr	r3, [pc, #56]	; (46d4 <tmr_ovf_callback+0x3c>)
    469c:	685b      	ldr	r3, [r3, #4]
    469e:	2b00      	cmp	r3, #0
    46a0:	d007      	beq.n	46b2 <tmr_ovf_callback+0x1a>
    46a2:	4a0c      	ldr	r2, [pc, #48]	; (46d4 <tmr_ovf_callback+0x3c>)
    46a4:	6853      	ldr	r3, [r2, #4]
    46a6:	3b01      	subs	r3, #1
    46a8:	6053      	str	r3, [r2, #4]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d101      	bne.n	46b2 <tmr_ovf_callback+0x1a>
    46ae:	4b0a      	ldr	r3, [pc, #40]	; (46d8 <tmr_ovf_callback+0x40>)
    46b0:	4798      	blx	r3
    46b2:	4a08      	ldr	r2, [pc, #32]	; (46d4 <tmr_ovf_callback+0x3c>)
    46b4:	7813      	ldrb	r3, [r2, #0]
    46b6:	3301      	adds	r3, #1
    46b8:	b2db      	uxtb	r3, r3
    46ba:	7013      	strb	r3, [r2, #0]
    46bc:	4a07      	ldr	r2, [pc, #28]	; (46dc <tmr_ovf_callback+0x44>)
    46be:	7812      	ldrb	r2, [r2, #0]
    46c0:	429a      	cmp	r2, r3
    46c2:	d806      	bhi.n	46d2 <tmr_ovf_callback+0x3a>
    46c4:	4b03      	ldr	r3, [pc, #12]	; (46d4 <tmr_ovf_callback+0x3c>)
    46c6:	2200      	movs	r2, #0
    46c8:	701a      	strb	r2, [r3, #0]
    46ca:	68db      	ldr	r3, [r3, #12]
    46cc:	2b00      	cmp	r3, #0
    46ce:	d000      	beq.n	46d2 <tmr_ovf_callback+0x3a>
    46d0:	4798      	blx	r3
    46d2:	bd08      	pop	{r3, pc}
    46d4:	20000284 	.word	0x20000284
    46d8:	00002fd5 	.word	0x00002fd5
    46dc:	20001298 	.word	0x20001298

000046e0 <tmr_cca_callback>:
    46e0:	b508      	push	{r3, lr}
    46e2:	4b04      	ldr	r3, [pc, #16]	; (46f4 <tmr_cca_callback+0x14>)
    46e4:	4798      	blx	r3
    46e6:	4b04      	ldr	r3, [pc, #16]	; (46f8 <tmr_cca_callback+0x18>)
    46e8:	691b      	ldr	r3, [r3, #16]
    46ea:	2b00      	cmp	r3, #0
    46ec:	d000      	beq.n	46f0 <tmr_cca_callback+0x10>
    46ee:	4798      	blx	r3
    46f0:	bd08      	pop	{r3, pc}
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	00002fc1 	.word	0x00002fc1
    46f8:	20000284 	.word	0x20000284

000046fc <set_common_tc_expiry_callback>:
    46fc:	4b01      	ldr	r3, [pc, #4]	; (4704 <set_common_tc_expiry_callback+0x8>)
    46fe:	6118      	str	r0, [r3, #16]
    4700:	4770      	bx	lr
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	20000284 	.word	0x20000284

00004708 <frameTxCallback>:
    4708:	b570      	push	{r4, r5, r6, lr}
    470a:	2401      	movs	r4, #1
    470c:	4b07      	ldr	r3, [pc, #28]	; (472c <frameTxCallback+0x24>)
    470e:	701c      	strb	r4, [r3, #0]
    4710:	4c07      	ldr	r4, [pc, #28]	; (4730 <frameTxCallback+0x28>)
    4712:	6823      	ldr	r3, [r4, #0]
    4714:	691b      	ldr	r3, [r3, #16]
    4716:	2b00      	cmp	r3, #0
    4718:	d004      	beq.n	4724 <frameTxCallback+0x1c>
    471a:	4798      	blx	r3
    471c:	4d05      	ldr	r5, [pc, #20]	; (4734 <frameTxCallback+0x2c>)
    471e:	6820      	ldr	r0, [r4, #0]
    4720:	47a8      	blx	r5
    4722:	bd70      	pop	{r4, r5, r6, pc}
    4724:	0010      	movs	r0, r2
    4726:	4d03      	ldr	r5, [pc, #12]	; (4734 <frameTxCallback+0x2c>)
    4728:	47a8      	blx	r5
    472a:	e7f8      	b.n	471e <frameTxCallback+0x16>
    472c:	2000004a 	.word	0x2000004a
    4730:	200012c0 	.word	0x200012c0
    4734:	00002ca1 	.word	0x00002ca1

00004738 <dataTimerHandler>:
    4738:	b5f0      	push	{r4, r5, r6, r7, lr}
    473a:	4646      	mov	r6, r8
    473c:	46d6      	mov	lr, sl
    473e:	464f      	mov	r7, r9
    4740:	b5c0      	push	{r6, r7, lr}
    4742:	4e23      	ldr	r6, [pc, #140]	; (47d0 <dataTimerHandler+0x98>)
    4744:	7a33      	ldrb	r3, [r6, #8]
    4746:	2b00      	cmp	r3, #0
    4748:	d033      	beq.n	47b2 <dataTimerHandler+0x7a>
    474a:	4b22      	ldr	r3, [pc, #136]	; (47d4 <dataTimerHandler+0x9c>)
    474c:	2500      	movs	r5, #0
    474e:	4698      	mov	r8, r3
    4750:	4b21      	ldr	r3, [pc, #132]	; (47d8 <dataTimerHandler+0xa0>)
    4752:	4f22      	ldr	r7, [pc, #136]	; (47dc <dataTimerHandler+0xa4>)
    4754:	469a      	mov	sl, r3
    4756:	46c1      	mov	r9, r8
    4758:	e016      	b.n	4788 <dataTimerHandler+0x50>
    475a:	7c43      	ldrb	r3, [r0, #17]
    475c:	2b00      	cmp	r3, #0
    475e:	d02d      	beq.n	47bc <dataTimerHandler+0x84>
    4760:	3b01      	subs	r3, #1
    4762:	b2db      	uxtb	r3, r3
    4764:	7443      	strb	r3, [r0, #17]
    4766:	2b00      	cmp	r3, #0
    4768:	d128      	bne.n	47bc <dataTimerHandler+0x84>
    476a:	6883      	ldr	r3, [r0, #8]
    476c:	2b00      	cmp	r3, #0
    476e:	d003      	beq.n	4778 <dataTimerHandler+0x40>
    4770:	7c80      	ldrb	r0, [r0, #18]
    4772:	0022      	movs	r2, r4
    4774:	2103      	movs	r1, #3
    4776:	4798      	blx	r3
    4778:	0020      	movs	r0, r4
    477a:	4b19      	ldr	r3, [pc, #100]	; (47e0 <dataTimerHandler+0xa8>)
    477c:	4798      	blx	r3
    477e:	3501      	adds	r5, #1
    4780:	7a33      	ldrb	r3, [r6, #8]
    4782:	b2ed      	uxtb	r5, r5
    4784:	42ab      	cmp	r3, r5
    4786:	d914      	bls.n	47b2 <dataTimerHandler+0x7a>
    4788:	2100      	movs	r1, #0
    478a:	0030      	movs	r0, r6
    478c:	47b8      	blx	r7
    478e:	1e04      	subs	r4, r0, #0
    4790:	d00f      	beq.n	47b2 <dataTimerHandler+0x7a>
    4792:	7c03      	ldrb	r3, [r0, #16]
    4794:	2b00      	cmp	r3, #0
    4796:	d004      	beq.n	47a2 <dataTimerHandler+0x6a>
    4798:	3b01      	subs	r3, #1
    479a:	b2db      	uxtb	r3, r3
    479c:	7403      	strb	r3, [r0, #16]
    479e:	2b00      	cmp	r3, #0
    47a0:	d0db      	beq.n	475a <dataTimerHandler+0x22>
    47a2:	0021      	movs	r1, r4
    47a4:	0030      	movs	r0, r6
    47a6:	47c0      	blx	r8
    47a8:	3501      	adds	r5, #1
    47aa:	7a33      	ldrb	r3, [r6, #8]
    47ac:	b2ed      	uxtb	r5, r5
    47ae:	42ab      	cmp	r3, r5
    47b0:	d8ea      	bhi.n	4788 <dataTimerHandler+0x50>
    47b2:	bc1c      	pop	{r2, r3, r4}
    47b4:	4690      	mov	r8, r2
    47b6:	4699      	mov	r9, r3
    47b8:	46a2      	mov	sl, r4
    47ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47bc:	4653      	mov	r3, sl
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	0021      	movs	r1, r4
    47c2:	7adb      	ldrb	r3, [r3, #11]
    47c4:	0030      	movs	r0, r6
    47c6:	3301      	adds	r3, #1
    47c8:	7423      	strb	r3, [r4, #16]
    47ca:	47c8      	blx	r9
    47cc:	e7d7      	b.n	477e <dataTimerHandler+0x46>
    47ce:	46c0      	nop			; (mov r8, r8)
    47d0:	200012b0 	.word	0x200012b0
    47d4:	00002d81 	.word	0x00002d81
    47d8:	200012a8 	.word	0x200012a8
    47dc:	00002db9 	.word	0x00002db9
    47e0:	00002ca1 	.word	0x00002ca1

000047e4 <ackReqDataConfcb>:
    47e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47e6:	46de      	mov	lr, fp
    47e8:	4657      	mov	r7, sl
    47ea:	4645      	mov	r5, r8
    47ec:	464e      	mov	r6, r9
    47ee:	b5e0      	push	{r5, r6, r7, lr}
    47f0:	7893      	ldrb	r3, [r2, #2]
    47f2:	b083      	sub	sp, #12
    47f4:	4682      	mov	sl, r0
    47f6:	4698      	mov	r8, r3
    47f8:	0010      	movs	r0, r2
    47fa:	4b32      	ldr	r3, [pc, #200]	; (48c4 <ackReqDataConfcb+0xe0>)
    47fc:	4693      	mov	fp, r2
    47fe:	9101      	str	r1, [sp, #4]
    4800:	4798      	blx	r3
    4802:	22ff      	movs	r2, #255	; 0xff
    4804:	4b30      	ldr	r3, [pc, #192]	; (48c8 <ackReqDataConfcb+0xe4>)
    4806:	881b      	ldrh	r3, [r3, #0]
    4808:	421a      	tst	r2, r3
    480a:	d156      	bne.n	48ba <ackReqDataConfcb+0xd6>
    480c:	4e2f      	ldr	r6, [pc, #188]	; (48cc <ackReqDataConfcb+0xe8>)
    480e:	7a33      	ldrb	r3, [r6, #8]
    4810:	2b00      	cmp	r3, #0
    4812:	d031      	beq.n	4878 <ackReqDataConfcb+0x94>
    4814:	4b2e      	ldr	r3, [pc, #184]	; (48d0 <ackReqDataConfcb+0xec>)
    4816:	2400      	movs	r4, #0
    4818:	4f2e      	ldr	r7, [pc, #184]	; (48d4 <ackReqDataConfcb+0xf0>)
    481a:	4699      	mov	r9, r3
    481c:	e007      	b.n	482e <ackReqDataConfcb+0x4a>
    481e:	0029      	movs	r1, r5
    4820:	0030      	movs	r0, r6
    4822:	47c8      	blx	r9
    4824:	3401      	adds	r4, #1
    4826:	7a33      	ldrb	r3, [r6, #8]
    4828:	b2e4      	uxtb	r4, r4
    482a:	42a3      	cmp	r3, r4
    482c:	d924      	bls.n	4878 <ackReqDataConfcb+0x94>
    482e:	2100      	movs	r1, #0
    4830:	0030      	movs	r0, r6
    4832:	47b8      	blx	r7
    4834:	1e05      	subs	r5, r0, #0
    4836:	d01f      	beq.n	4878 <ackReqDataConfcb+0x94>
    4838:	2320      	movs	r3, #32
    483a:	5cc3      	ldrb	r3, [r0, r3]
    483c:	4543      	cmp	r3, r8
    483e:	d1ee      	bne.n	481e <ackReqDataConfcb+0x3a>
    4840:	7c80      	ldrb	r0, [r0, #18]
    4842:	4550      	cmp	r0, sl
    4844:	d1eb      	bne.n	481e <ackReqDataConfcb+0x3a>
    4846:	9b01      	ldr	r3, [sp, #4]
    4848:	2b00      	cmp	r3, #0
    484a:	d02a      	beq.n	48a2 <ackReqDataConfcb+0xbe>
    484c:	7c6b      	ldrb	r3, [r5, #17]
    484e:	2b00      	cmp	r3, #0
    4850:	d019      	beq.n	4886 <ackReqDataConfcb+0xa2>
    4852:	3b01      	subs	r3, #1
    4854:	b2db      	uxtb	r3, r3
    4856:	746b      	strb	r3, [r5, #17]
    4858:	2b00      	cmp	r3, #0
    485a:	d114      	bne.n	4886 <ackReqDataConfcb+0xa2>
    485c:	68ab      	ldr	r3, [r5, #8]
    485e:	2b00      	cmp	r3, #0
    4860:	d002      	beq.n	4868 <ackReqDataConfcb+0x84>
    4862:	465a      	mov	r2, fp
    4864:	9901      	ldr	r1, [sp, #4]
    4866:	4798      	blx	r3
    4868:	4b16      	ldr	r3, [pc, #88]	; (48c4 <ackReqDataConfcb+0xe0>)
    486a:	0028      	movs	r0, r5
    486c:	4798      	blx	r3
    486e:	3401      	adds	r4, #1
    4870:	7a33      	ldrb	r3, [r6, #8]
    4872:	b2e4      	uxtb	r4, r4
    4874:	42a3      	cmp	r3, r4
    4876:	d8da      	bhi.n	482e <ackReqDataConfcb+0x4a>
    4878:	b003      	add	sp, #12
    487a:	bc3c      	pop	{r2, r3, r4, r5}
    487c:	4690      	mov	r8, r2
    487e:	4699      	mov	r9, r3
    4880:	46a2      	mov	sl, r4
    4882:	46ab      	mov	fp, r5
    4884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4886:	4b14      	ldr	r3, [pc, #80]	; (48d8 <ackReqDataConfcb+0xf4>)
    4888:	781b      	ldrb	r3, [r3, #0]
    488a:	2b08      	cmp	r3, #8
    488c:	d0e6      	beq.n	485c <ackReqDataConfcb+0x78>
    488e:	0029      	movs	r1, r5
    4890:	0030      	movs	r0, r6
    4892:	4b0f      	ldr	r3, [pc, #60]	; (48d0 <ackReqDataConfcb+0xec>)
    4894:	4798      	blx	r3
    4896:	89a9      	ldrh	r1, [r5, #12]
    4898:	4a10      	ldr	r2, [pc, #64]	; (48dc <ackReqDataConfcb+0xf8>)
    489a:	0028      	movs	r0, r5
    489c:	4b10      	ldr	r3, [pc, #64]	; (48e0 <ackReqDataConfcb+0xfc>)
    489e:	4798      	blx	r3
    48a0:	e7c0      	b.n	4824 <ackReqDataConfcb+0x40>
    48a2:	4b10      	ldr	r3, [pc, #64]	; (48e4 <ackReqDataConfcb+0x100>)
    48a4:	0029      	movs	r1, r5
    48a6:	681a      	ldr	r2, [r3, #0]
    48a8:	0030      	movs	r0, r6
    48aa:	7ad3      	ldrb	r3, [r2, #11]
    48ac:	3301      	adds	r3, #1
    48ae:	742b      	strb	r3, [r5, #16]
    48b0:	7b13      	ldrb	r3, [r2, #12]
    48b2:	746b      	strb	r3, [r5, #17]
    48b4:	4b06      	ldr	r3, [pc, #24]	; (48d0 <ackReqDataConfcb+0xec>)
    48b6:	4798      	blx	r3
    48b8:	e7b4      	b.n	4824 <ackReqDataConfcb+0x40>
    48ba:	9801      	ldr	r0, [sp, #4]
    48bc:	4b0a      	ldr	r3, [pc, #40]	; (48e8 <ackReqDataConfcb+0x104>)
    48be:	4798      	blx	r3
    48c0:	e7a4      	b.n	480c <ackReqDataConfcb+0x28>
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	00002ca1 	.word	0x00002ca1
    48c8:	200012f0 	.word	0x200012f0
    48cc:	200012b0 	.word	0x200012b0
    48d0:	00002d81 	.word	0x00002d81
    48d4:	00002db9 	.word	0x00002db9
    48d8:	20000298 	.word	0x20000298
    48dc:	000047e5 	.word	0x000047e5
    48e0:	00006381 	.word	0x00006381
    48e4:	200012a8 	.word	0x200012a8
    48e8:	00006f59 	.word	0x00006f59

000048ec <nonAckDataCallback>:
    48ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ee:	46c6      	mov	lr, r8
    48f0:	4e15      	ldr	r6, [pc, #84]	; (4948 <nonAckDataCallback+0x5c>)
    48f2:	b500      	push	{lr}
    48f4:	4680      	mov	r8, r0
    48f6:	0010      	movs	r0, r2
    48f8:	0015      	movs	r5, r2
    48fa:	000f      	movs	r7, r1
    48fc:	47b0      	blx	r6
    48fe:	4b13      	ldr	r3, [pc, #76]	; (494c <nonAckDataCallback+0x60>)
    4900:	2100      	movs	r1, #0
    4902:	4813      	ldr	r0, [pc, #76]	; (4950 <nonAckDataCallback+0x64>)
    4904:	4798      	blx	r3
    4906:	22ff      	movs	r2, #255	; 0xff
    4908:	4b12      	ldr	r3, [pc, #72]	; (4954 <nonAckDataCallback+0x68>)
    490a:	0004      	movs	r4, r0
    490c:	881b      	ldrh	r3, [r3, #0]
    490e:	421a      	tst	r2, r3
    4910:	d110      	bne.n	4934 <nonAckDataCallback+0x48>
    4912:	2c00      	cmp	r4, #0
    4914:	d013      	beq.n	493e <nonAckDataCallback+0x52>
    4916:	68a3      	ldr	r3, [r4, #8]
    4918:	2b00      	cmp	r3, #0
    491a:	d003      	beq.n	4924 <nonAckDataCallback+0x38>
    491c:	002a      	movs	r2, r5
    491e:	0039      	movs	r1, r7
    4920:	4640      	mov	r0, r8
    4922:	4798      	blx	r3
    4924:	7d23      	ldrb	r3, [r4, #20]
    4926:	2b00      	cmp	r3, #0
    4928:	d101      	bne.n	492e <nonAckDataCallback+0x42>
    492a:	0020      	movs	r0, r4
    492c:	47b0      	blx	r6
    492e:	bc04      	pop	{r2}
    4930:	4690      	mov	r8, r2
    4932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4934:	0038      	movs	r0, r7
    4936:	4b08      	ldr	r3, [pc, #32]	; (4958 <nonAckDataCallback+0x6c>)
    4938:	4798      	blx	r3
    493a:	2c00      	cmp	r4, #0
    493c:	d1eb      	bne.n	4916 <nonAckDataCallback+0x2a>
    493e:	4b07      	ldr	r3, [pc, #28]	; (495c <nonAckDataCallback+0x70>)
    4940:	781b      	ldrb	r3, [r3, #0]
    4942:	2b08      	cmp	r3, #8
    4944:	d1f3      	bne.n	492e <nonAckDataCallback+0x42>
    4946:	e7e6      	b.n	4916 <nonAckDataCallback+0x2a>
    4948:	00002ca1 	.word	0x00002ca1
    494c:	00002db9 	.word	0x00002db9
    4950:	2000129c 	.word	0x2000129c
    4954:	200012f0 	.word	0x200012f0
    4958:	00006f59 	.word	0x00006f59
    495c:	20000298 	.word	0x20000298

00004960 <MiApp_ProtocolInit>:
    4960:	b570      	push	{r4, r5, r6, lr}
    4962:	4b20      	ldr	r3, [pc, #128]	; (49e4 <MiApp_ProtocolInit+0x84>)
    4964:	b084      	sub	sp, #16
    4966:	6018      	str	r0, [r3, #0]
    4968:	4b1f      	ldr	r3, [pc, #124]	; (49e8 <MiApp_ProtocolInit+0x88>)
    496a:	2501      	movs	r5, #1
    496c:	6019      	str	r1, [r3, #0]
    496e:	4b1f      	ldr	r3, [pc, #124]	; (49ec <MiApp_ProtocolInit+0x8c>)
    4970:	4798      	blx	r3
    4972:	2102      	movs	r1, #2
    4974:	4c1e      	ldr	r4, [pc, #120]	; (49f0 <MiApp_ProtocolInit+0x90>)
    4976:	4b1f      	ldr	r3, [pc, #124]	; (49f4 <MiApp_ProtocolInit+0x94>)
    4978:	aa02      	add	r2, sp, #8
    497a:	8023      	strh	r3, [r4, #0]
    497c:	7813      	ldrb	r3, [r2, #0]
    497e:	2601      	movs	r6, #1
    4980:	430b      	orrs	r3, r1
    4982:	2187      	movs	r1, #135	; 0x87
    4984:	400b      	ands	r3, r1
    4986:	2140      	movs	r1, #64	; 0x40
    4988:	430b      	orrs	r3, r1
    498a:	21c3      	movs	r1, #195	; 0xc3
    498c:	400b      	ands	r3, r1
    498e:	43ab      	bics	r3, r5
    4990:	7013      	strb	r3, [r2, #0]
    4992:	4919      	ldr	r1, [pc, #100]	; (49f8 <MiApp_ProtocolInit+0x98>)
    4994:	9802      	ldr	r0, [sp, #8]
    4996:	4b19      	ldr	r3, [pc, #100]	; (49fc <MiApp_ProtocolInit+0x9c>)
    4998:	4798      	blx	r3
    499a:	4b19      	ldr	r3, [pc, #100]	; (4a00 <MiApp_ProtocolInit+0xa0>)
    499c:	4798      	blx	r3
    499e:	466b      	mov	r3, sp
    49a0:	4276      	negs	r6, r6
    49a2:	1d98      	adds	r0, r3, #6
    49a4:	0021      	movs	r1, r4
    49a6:	4b17      	ldr	r3, [pc, #92]	; (4a04 <MiApp_ProtocolInit+0xa4>)
    49a8:	8006      	strh	r6, [r0, #0]
    49aa:	4798      	blx	r3
    49ac:	4916      	ldr	r1, [pc, #88]	; (4a08 <MiApp_ProtocolInit+0xa8>)
    49ae:	4b17      	ldr	r3, [pc, #92]	; (4a0c <MiApp_ProtocolInit+0xac>)
    49b0:	2000      	movs	r0, #0
    49b2:	4798      	blx	r3
    49b4:	4b16      	ldr	r3, [pc, #88]	; (4a10 <MiApp_ProtocolInit+0xb0>)
    49b6:	4c17      	ldr	r4, [pc, #92]	; (4a14 <MiApp_ProtocolInit+0xb4>)
    49b8:	701d      	strb	r5, [r3, #0]
    49ba:	4b17      	ldr	r3, [pc, #92]	; (4a18 <MiApp_ProtocolInit+0xb8>)
    49bc:	4817      	ldr	r0, [pc, #92]	; (4a1c <MiApp_ProtocolInit+0xbc>)
    49be:	801e      	strh	r6, [r3, #0]
    49c0:	47a0      	blx	r4
    49c2:	4817      	ldr	r0, [pc, #92]	; (4a20 <MiApp_ProtocolInit+0xc0>)
    49c4:	47a0      	blx	r4
    49c6:	4817      	ldr	r0, [pc, #92]	; (4a24 <MiApp_ProtocolInit+0xc4>)
    49c8:	47a0      	blx	r4
    49ca:	23fa      	movs	r3, #250	; 0xfa
    49cc:	4816      	ldr	r0, [pc, #88]	; (4a28 <MiApp_ProtocolInit+0xc8>)
    49ce:	009b      	lsls	r3, r3, #2
    49d0:	6083      	str	r3, [r0, #8]
    49d2:	4b16      	ldr	r3, [pc, #88]	; (4a2c <MiApp_ProtocolInit+0xcc>)
    49d4:	7305      	strb	r5, [r0, #12]
    49d6:	6103      	str	r3, [r0, #16]
    49d8:	4b15      	ldr	r3, [pc, #84]	; (4a30 <MiApp_ProtocolInit+0xd0>)
    49da:	4798      	blx	r3
    49dc:	2001      	movs	r0, #1
    49de:	b004      	add	sp, #16
    49e0:	bd70      	pop	{r4, r5, r6, pc}
    49e2:	46c0      	nop			; (mov r8, r8)
    49e4:	200012a8 	.word	0x200012a8
    49e8:	200012ac 	.word	0x200012ac
    49ec:	00002e41 	.word	0x00002e41
    49f0:	200012dc 	.word	0x200012dc
    49f4:	00001234 	.word	0x00001234
    49f8:	2000004c 	.word	0x2000004c
    49fc:	00001e25 	.word	0x00001e25
    4a00:	00002839 	.word	0x00002839
    4a04:	00001dc5 	.word	0x00001dc5
    4a08:	200012bc 	.word	0x200012bc
    4a0c:	00001dfd 	.word	0x00001dfd
    4a10:	20000298 	.word	0x20000298
    4a14:	00002d75 	.word	0x00002d75
    4a18:	200012f0 	.word	0x200012f0
    4a1c:	200012b0 	.word	0x200012b0
    4a20:	2000129c 	.word	0x2000129c
    4a24:	200012e4 	.word	0x200012e4
    4a28:	2000029c 	.word	0x2000029c
    4a2c:	00004739 	.word	0x00004739
    4a30:	00002ee9 	.word	0x00002ee9

00004a34 <MiApp_Set>:
    4a34:	b530      	push	{r4, r5, lr}
    4a36:	000c      	movs	r4, r1
    4a38:	b083      	sub	sp, #12
    4a3a:	2802      	cmp	r0, #2
    4a3c:	d015      	beq.n	4a6a <MiApp_Set+0x36>
    4a3e:	2880      	cmp	r0, #128	; 0x80
    4a40:	d00c      	beq.n	4a5c <MiApp_Set+0x28>
    4a42:	2800      	cmp	r0, #0
    4a44:	d002      	beq.n	4a4c <MiApp_Set+0x18>
    4a46:	2000      	movs	r0, #0
    4a48:	b003      	add	sp, #12
    4a4a:	bd30      	pop	{r4, r5, pc}
    4a4c:	4b0e      	ldr	r3, [pc, #56]	; (4a88 <MiApp_Set+0x54>)
    4a4e:	4798      	blx	r3
    4a50:	2800      	cmp	r0, #0
    4a52:	d0f9      	beq.n	4a48 <MiApp_Set+0x14>
    4a54:	7822      	ldrb	r2, [r4, #0]
    4a56:	4b0d      	ldr	r3, [pc, #52]	; (4a8c <MiApp_Set+0x58>)
    4a58:	701a      	strb	r2, [r3, #0]
    4a5a:	e7f5      	b.n	4a48 <MiApp_Set+0x14>
    4a5c:	780b      	ldrb	r3, [r1, #0]
    4a5e:	2001      	movs	r0, #1
    4a60:	1e5a      	subs	r2, r3, #1
    4a62:	4193      	sbcs	r3, r2
    4a64:	4a0a      	ldr	r2, [pc, #40]	; (4a90 <MiApp_Set+0x5c>)
    4a66:	7013      	strb	r3, [r2, #0]
    4a68:	e7ee      	b.n	4a48 <MiApp_Set+0x14>
    4a6a:	780b      	ldrb	r3, [r1, #0]
    4a6c:	ad01      	add	r5, sp, #4
    4a6e:	702b      	strb	r3, [r5, #0]
    4a70:	784b      	ldrb	r3, [r1, #1]
    4a72:	0028      	movs	r0, r5
    4a74:	706b      	strb	r3, [r5, #1]
    4a76:	4907      	ldr	r1, [pc, #28]	; (4a94 <MiApp_Set+0x60>)
    4a78:	4b07      	ldr	r3, [pc, #28]	; (4a98 <MiApp_Set+0x64>)
    4a7a:	4798      	blx	r3
    4a7c:	2800      	cmp	r0, #0
    4a7e:	d0e3      	beq.n	4a48 <MiApp_Set+0x14>
    4a80:	882a      	ldrh	r2, [r5, #0]
    4a82:	4b06      	ldr	r3, [pc, #24]	; (4a9c <MiApp_Set+0x68>)
    4a84:	801a      	strh	r2, [r3, #0]
    4a86:	e7df      	b.n	4a48 <MiApp_Set+0x14>
    4a88:	00001dfd 	.word	0x00001dfd
    4a8c:	200012bc 	.word	0x200012bc
    4a90:	2000004b 	.word	0x2000004b
    4a94:	200012dc 	.word	0x200012dc
    4a98:	00001dc5 	.word	0x00001dc5
    4a9c:	200012f0 	.word	0x200012f0

00004aa0 <MeshTasks>:
    4aa0:	b570      	push	{r4, r5, r6, lr}
    4aa2:	4b19      	ldr	r3, [pc, #100]	; (4b08 <MeshTasks+0x68>)
    4aa4:	b084      	sub	sp, #16
    4aa6:	4798      	blx	r3
    4aa8:	4818      	ldr	r0, [pc, #96]	; (4b0c <MeshTasks+0x6c>)
    4aaa:	7a03      	ldrb	r3, [r0, #8]
    4aac:	2b00      	cmp	r3, #0
    4aae:	d003      	beq.n	4ab8 <MeshTasks+0x18>
    4ab0:	4c17      	ldr	r4, [pc, #92]	; (4b10 <MeshTasks+0x70>)
    4ab2:	7823      	ldrb	r3, [r4, #0]
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d10c      	bne.n	4ad2 <MeshTasks+0x32>
    4ab8:	4b16      	ldr	r3, [pc, #88]	; (4b14 <MeshTasks+0x74>)
    4aba:	4798      	blx	r3
    4abc:	2800      	cmp	r0, #0
    4abe:	d004      	beq.n	4aca <MeshTasks+0x2a>
    4ac0:	4b15      	ldr	r3, [pc, #84]	; (4b18 <MeshTasks+0x78>)
    4ac2:	4816      	ldr	r0, [pc, #88]	; (4b1c <MeshTasks+0x7c>)
    4ac4:	4798      	blx	r3
    4ac6:	4b16      	ldr	r3, [pc, #88]	; (4b20 <MeshTasks+0x80>)
    4ac8:	4798      	blx	r3
    4aca:	4b16      	ldr	r3, [pc, #88]	; (4b24 <MeshTasks+0x84>)
    4acc:	4798      	blx	r3
    4ace:	b004      	add	sp, #16
    4ad0:	bd70      	pop	{r4, r5, r6, pc}
    4ad2:	4b15      	ldr	r3, [pc, #84]	; (4b28 <MeshTasks+0x88>)
    4ad4:	781d      	ldrb	r5, [r3, #0]
    4ad6:	2d00      	cmp	r5, #0
    4ad8:	d1ee      	bne.n	4ab8 <MeshTasks+0x18>
    4ada:	2100      	movs	r1, #0
    4adc:	4b13      	ldr	r3, [pc, #76]	; (4b2c <MeshTasks+0x8c>)
    4ade:	4798      	blx	r3
    4ae0:	1e02      	subs	r2, r0, #0
    4ae2:	d0e9      	beq.n	4ab8 <MeshTasks+0x18>
    4ae4:	4b12      	ldr	r3, [pc, #72]	; (4b30 <MeshTasks+0x90>)
    4ae6:	4913      	ldr	r1, [pc, #76]	; (4b34 <MeshTasks+0x94>)
    4ae8:	6018      	str	r0, [r3, #0]
    4aea:	6943      	ldr	r3, [r0, #20]
    4aec:	9102      	str	r1, [sp, #8]
    4aee:	2125      	movs	r1, #37	; 0x25
    4af0:	5c41      	ldrb	r1, [r0, r1]
    4af2:	4e11      	ldr	r6, [pc, #68]	; (4b38 <MeshTasks+0x98>)
    4af4:	9101      	str	r1, [sp, #4]
    4af6:	2124      	movs	r1, #36	; 0x24
    4af8:	5c41      	ldrb	r1, [r0, r1]
    4afa:	9100      	str	r1, [sp, #0]
    4afc:	69d1      	ldr	r1, [r2, #28]
    4afe:	6980      	ldr	r0, [r0, #24]
    4b00:	6a12      	ldr	r2, [r2, #32]
    4b02:	47b0      	blx	r6
    4b04:	7025      	strb	r5, [r4, #0]
    4b06:	e7d7      	b.n	4ab8 <MeshTasks+0x18>
    4b08:	000024d1 	.word	0x000024d1
    4b0c:	200012e4 	.word	0x200012e4
    4b10:	2000004a 	.word	0x2000004a
    4b14:	0000210d 	.word	0x0000210d
    4b18:	00005f75 	.word	0x00005f75
    4b1c:	200012c8 	.word	0x200012c8
    4b20:	000020f1 	.word	0x000020f1
    4b24:	00002f09 	.word	0x00002f09
    4b28:	200002b4 	.word	0x200002b4
    4b2c:	00002db9 	.word	0x00002db9
    4b30:	200012c0 	.word	0x200012c0
    4b34:	00004709 	.word	0x00004709
    4b38:	00001e91 	.word	0x00001e91

00004b3c <MiApp_SendData>:
    4b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b3e:	4657      	mov	r7, sl
    4b40:	464e      	mov	r6, r9
    4b42:	4645      	mov	r5, r8
    4b44:	46de      	mov	lr, fp
    4b46:	b5e0      	push	{r5, r6, r7, lr}
    4b48:	b083      	sub	sp, #12
    4b4a:	001e      	movs	r6, r3
    4b4c:	ab0c      	add	r3, sp, #48	; 0x30
    4b4e:	781f      	ldrb	r7, [r3, #0]
    4b50:	ab0d      	add	r3, sp, #52	; 0x34
    4b52:	781c      	ldrb	r4, [r3, #0]
    4b54:	4b3d      	ldr	r3, [pc, #244]	; (4c4c <MiApp_SendData+0x110>)
    4b56:	0015      	movs	r5, r2
    4b58:	781b      	ldrb	r3, [r3, #0]
    4b5a:	3b06      	subs	r3, #6
    4b5c:	2b01      	cmp	r3, #1
    4b5e:	d907      	bls.n	4b70 <MiApp_SendData+0x34>
    4b60:	2000      	movs	r0, #0
    4b62:	b003      	add	sp, #12
    4b64:	bc3c      	pop	{r2, r3, r4, r5}
    4b66:	4690      	mov	r8, r2
    4b68:	4699      	mov	r9, r3
    4b6a:	46a2      	mov	sl, r4
    4b6c:	46ab      	mov	fp, r5
    4b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b70:	2802      	cmp	r0, #2
    4b72:	d1f5      	bne.n	4b60 <MiApp_SendData+0x24>
    4b74:	784b      	ldrb	r3, [r1, #1]
    4b76:	780a      	ldrb	r2, [r1, #0]
    4b78:	021b      	lsls	r3, r3, #8
    4b7a:	431a      	orrs	r2, r3
    4b7c:	308e      	adds	r0, #142	; 0x8e
    4b7e:	4b34      	ldr	r3, [pc, #208]	; (4c50 <MiApp_SendData+0x114>)
    4b80:	4691      	mov	r9, r2
    4b82:	4798      	blx	r3
    4b84:	4680      	mov	r8, r0
    4b86:	2800      	cmp	r0, #0
    4b88:	d0ea      	beq.n	4b60 <MiApp_SendData+0x24>
    4b8a:	2203      	movs	r2, #3
    4b8c:	7e43      	ldrb	r3, [r0, #25]
    4b8e:	2110      	movs	r1, #16
    4b90:	4393      	bics	r3, r2
    4b92:	7643      	strb	r3, [r0, #25]
    4b94:	466a      	mov	r2, sp
    4b96:	464b      	mov	r3, r9
    4b98:	80d3      	strh	r3, [r2, #6]
    4b9a:	88d3      	ldrh	r3, [r2, #6]
    4b9c:	468b      	mov	fp, r1
    4b9e:	4699      	mov	r9, r3
    4ba0:	4b2c      	ldr	r3, [pc, #176]	; (4c54 <MiApp_SendData+0x118>)
    4ba2:	464a      	mov	r2, r9
    4ba4:	469a      	mov	sl, r3
    4ba6:	881b      	ldrh	r3, [r3, #0]
    4ba8:	8382      	strh	r2, [r0, #28]
    4baa:	83c3      	strh	r3, [r0, #30]
    4bac:	2301      	movs	r3, #1
    4bae:	4023      	ands	r3, r4
    4bb0:	011a      	lsls	r2, r3, #4
    4bb2:	7e43      	ldrb	r3, [r0, #25]
    4bb4:	438b      	bics	r3, r1
    4bb6:	4313      	orrs	r3, r2
    4bb8:	7643      	strb	r3, [r0, #25]
    4bba:	2338      	movs	r3, #56	; 0x38
    4bbc:	54c5      	strb	r5, [r0, r3]
    4bbe:	2300      	movs	r3, #0
    4bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4bc2:	74c3      	strb	r3, [r0, #19]
    4bc4:	7503      	strb	r3, [r0, #20]
    4bc6:	6082      	str	r2, [r0, #8]
    4bc8:	7487      	strb	r7, [r0, #18]
    4bca:	4b23      	ldr	r3, [pc, #140]	; (4c58 <MiApp_SendData+0x11c>)
    4bcc:	002a      	movs	r2, r5
    4bce:	0031      	movs	r1, r6
    4bd0:	3039      	adds	r0, #57	; 0x39
    4bd2:	4798      	blx	r3
    4bd4:	4b21      	ldr	r3, [pc, #132]	; (4c5c <MiApp_SendData+0x120>)
    4bd6:	4599      	cmp	r9, r3
    4bd8:	d814      	bhi.n	4c04 <MiApp_SendData+0xc8>
    4bda:	4653      	mov	r3, sl
    4bdc:	22ff      	movs	r2, #255	; 0xff
    4bde:	881b      	ldrh	r3, [r3, #0]
    4be0:	4393      	bics	r3, r2
    4be2:	4642      	mov	r2, r8
    4be4:	8193      	strh	r3, [r2, #12]
    4be6:	2c00      	cmp	r4, #0
    4be8:	d11d      	bne.n	4c26 <MiApp_SendData+0xea>
    4bea:	7454      	strb	r4, [r2, #17]
    4bec:	4641      	mov	r1, r8
    4bee:	481c      	ldr	r0, [pc, #112]	; (4c60 <MiApp_SendData+0x124>)
    4bf0:	4b1c      	ldr	r3, [pc, #112]	; (4c64 <MiApp_SendData+0x128>)
    4bf2:	4798      	blx	r3
    4bf4:	4643      	mov	r3, r8
    4bf6:	4a1c      	ldr	r2, [pc, #112]	; (4c68 <MiApp_SendData+0x12c>)
    4bf8:	8999      	ldrh	r1, [r3, #12]
    4bfa:	4640      	mov	r0, r8
    4bfc:	4b1b      	ldr	r3, [pc, #108]	; (4c6c <MiApp_SendData+0x130>)
    4bfe:	4798      	blx	r3
    4c00:	2001      	movs	r0, #1
    4c02:	e7ae      	b.n	4b62 <MiApp_SendData+0x26>
    4c04:	4643      	mov	r3, r8
    4c06:	465a      	mov	r2, fp
    4c08:	7e5b      	ldrb	r3, [r3, #25]
    4c0a:	4641      	mov	r1, r8
    4c0c:	4393      	bics	r3, r2
    4c0e:	4642      	mov	r2, r8
    4c10:	4813      	ldr	r0, [pc, #76]	; (4c60 <MiApp_SendData+0x124>)
    4c12:	7653      	strb	r3, [r2, #25]
    4c14:	4b13      	ldr	r3, [pc, #76]	; (4c64 <MiApp_SendData+0x128>)
    4c16:	4798      	blx	r3
    4c18:	4a13      	ldr	r2, [pc, #76]	; (4c68 <MiApp_SendData+0x12c>)
    4c1a:	4915      	ldr	r1, [pc, #84]	; (4c70 <MiApp_SendData+0x134>)
    4c1c:	4640      	mov	r0, r8
    4c1e:	4b13      	ldr	r3, [pc, #76]	; (4c6c <MiApp_SendData+0x130>)
    4c20:	4798      	blx	r3
    4c22:	2001      	movs	r0, #1
    4c24:	e79d      	b.n	4b62 <MiApp_SendData+0x26>
    4c26:	4641      	mov	r1, r8
    4c28:	4b12      	ldr	r3, [pc, #72]	; (4c74 <MiApp_SendData+0x138>)
    4c2a:	4813      	ldr	r0, [pc, #76]	; (4c78 <MiApp_SendData+0x13c>)
    4c2c:	681a      	ldr	r2, [r3, #0]
    4c2e:	7ad3      	ldrb	r3, [r2, #11]
    4c30:	3301      	adds	r3, #1
    4c32:	740b      	strb	r3, [r1, #16]
    4c34:	7b13      	ldrb	r3, [r2, #12]
    4c36:	744b      	strb	r3, [r1, #17]
    4c38:	4b0a      	ldr	r3, [pc, #40]	; (4c64 <MiApp_SendData+0x128>)
    4c3a:	4798      	blx	r3
    4c3c:	4643      	mov	r3, r8
    4c3e:	4a0f      	ldr	r2, [pc, #60]	; (4c7c <MiApp_SendData+0x140>)
    4c40:	8999      	ldrh	r1, [r3, #12]
    4c42:	4640      	mov	r0, r8
    4c44:	4b09      	ldr	r3, [pc, #36]	; (4c6c <MiApp_SendData+0x130>)
    4c46:	4798      	blx	r3
    4c48:	0020      	movs	r0, r4
    4c4a:	e78a      	b.n	4b62 <MiApp_SendData+0x26>
    4c4c:	20000298 	.word	0x20000298
    4c50:	00002c59 	.word	0x00002c59
    4c54:	200012f0 	.word	0x200012f0
    4c58:	000074ef 	.word	0x000074ef
    4c5c:	0000fffc 	.word	0x0000fffc
    4c60:	2000129c 	.word	0x2000129c
    4c64:	00002d81 	.word	0x00002d81
    4c68:	000048ed 	.word	0x000048ed
    4c6c:	00006381 	.word	0x00006381
    4c70:	0000ffff 	.word	0x0000ffff
    4c74:	200012a8 	.word	0x200012a8
    4c78:	200012b0 	.word	0x200012b0
    4c7c:	000047e5 	.word	0x000047e5

00004c80 <MiApp_Get>:
    4c80:	2801      	cmp	r0, #1
    4c82:	d016      	beq.n	4cb2 <MiApp_Get+0x32>
    4c84:	2800      	cmp	r0, #0
    4c86:	d00f      	beq.n	4ca8 <MiApp_Get+0x28>
    4c88:	2802      	cmp	r0, #2
    4c8a:	d009      	beq.n	4ca0 <MiApp_Get+0x20>
    4c8c:	2803      	cmp	r0, #3
    4c8e:	d109      	bne.n	4ca4 <MiApp_Get+0x24>
    4c90:	4b09      	ldr	r3, [pc, #36]	; (4cb8 <MiApp_Get+0x38>)
    4c92:	2001      	movs	r0, #1
    4c94:	881a      	ldrh	r2, [r3, #0]
    4c96:	700a      	strb	r2, [r1, #0]
    4c98:	881b      	ldrh	r3, [r3, #0]
    4c9a:	0a1b      	lsrs	r3, r3, #8
    4c9c:	704b      	strb	r3, [r1, #1]
    4c9e:	4770      	bx	lr
    4ca0:	4b06      	ldr	r3, [pc, #24]	; (4cbc <MiApp_Get+0x3c>)
    4ca2:	e7f6      	b.n	4c92 <MiApp_Get+0x12>
    4ca4:	2000      	movs	r0, #0
    4ca6:	e7fa      	b.n	4c9e <MiApp_Get+0x1e>
    4ca8:	4b05      	ldr	r3, [pc, #20]	; (4cc0 <MiApp_Get+0x40>)
    4caa:	2001      	movs	r0, #1
    4cac:	781b      	ldrb	r3, [r3, #0]
    4cae:	700b      	strb	r3, [r1, #0]
    4cb0:	e7f5      	b.n	4c9e <MiApp_Get+0x1e>
    4cb2:	4b04      	ldr	r3, [pc, #16]	; (4cc4 <MiApp_Get+0x44>)
    4cb4:	e7ed      	b.n	4c92 <MiApp_Get+0x12>
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	20000054 	.word	0x20000054
    4cbc:	200012f0 	.word	0x200012f0
    4cc0:	200012bc 	.word	0x200012bc
    4cc4:	200012dc 	.word	0x200012dc

00004cc8 <MiApp_MeshGetNextHopAddr>:
    4cc8:	4b02      	ldr	r3, [pc, #8]	; (4cd4 <MiApp_MeshGetNextHopAddr+0xc>)
    4cca:	8818      	ldrh	r0, [r3, #0]
    4ccc:	23ff      	movs	r3, #255	; 0xff
    4cce:	4398      	bics	r0, r3
    4cd0:	4770      	bx	lr
    4cd2:	46c0      	nop			; (mov r8, r8)
    4cd4:	200012f0 	.word	0x200012f0

00004cd8 <bloomFilterAddressCheck>:
    4cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cda:	464e      	mov	r6, r9
    4cdc:	46de      	mov	lr, fp
    4cde:	4657      	mov	r7, sl
    4ce0:	4645      	mov	r5, r8
    4ce2:	b5e0      	push	{r5, r6, r7, lr}
    4ce4:	4bf5      	ldr	r3, [pc, #980]	; (50bc <bloomFilterAddressCheck+0x3e4>)
    4ce6:	b087      	sub	sp, #28
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	9003      	str	r0, [sp, #12]
    4cec:	000e      	movs	r6, r1
    4cee:	9300      	str	r3, [sp, #0]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d001      	beq.n	4cf8 <bloomFilterAddressCheck+0x20>
    4cf4:	f000 fe65 	bl	59c2 <bloomFilterAddressCheck+0xcea>
    4cf8:	7811      	ldrb	r1, [r2, #0]
    4cfa:	020b      	lsls	r3, r1, #8
    4cfc:	0249      	lsls	r1, r1, #9
    4cfe:	b209      	sxth	r1, r1
    4d00:	b218      	sxth	r0, r3
    4d02:	468c      	mov	ip, r1
    4d04:	4680      	mov	r8, r0
    4d06:	4660      	mov	r0, ip
    4d08:	4644      	mov	r4, r8
    4d0a:	49ed      	ldr	r1, [pc, #948]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4d0c:	005b      	lsls	r3, r3, #1
    4d0e:	4041      	eors	r1, r0
    4d10:	b29b      	uxth	r3, r3
    4d12:	b289      	uxth	r1, r1
    4d14:	9304      	str	r3, [sp, #16]
    4d16:	1c18      	adds	r0, r3, #0
    4d18:	2c00      	cmp	r4, #0
    4d1a:	da01      	bge.n	4d20 <bloomFilterAddressCheck+0x48>
    4d1c:	f000 fe5b 	bl	59d6 <bloomFilterAddressCheck+0xcfe>
    4d20:	b284      	uxth	r4, r0
    4d22:	49e7      	ldr	r1, [pc, #924]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4d24:	0064      	lsls	r4, r4, #1
    4d26:	4061      	eors	r1, r4
    4d28:	b209      	sxth	r1, r1
    4d2a:	b289      	uxth	r1, r1
    4d2c:	0044      	lsls	r4, r0, #1
    4d2e:	0403      	lsls	r3, r0, #16
    4d30:	d501      	bpl.n	4d36 <bloomFilterAddressCheck+0x5e>
    4d32:	f000 fe53 	bl	59dc <bloomFilterAddressCheck+0xd04>
    4d36:	b2a0      	uxth	r0, r4
    4d38:	49e1      	ldr	r1, [pc, #900]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4d3a:	0040      	lsls	r0, r0, #1
    4d3c:	4041      	eors	r1, r0
    4d3e:	b289      	uxth	r1, r1
    4d40:	0060      	lsls	r0, r4, #1
    4d42:	0423      	lsls	r3, r4, #16
    4d44:	d501      	bpl.n	4d4a <bloomFilterAddressCheck+0x72>
    4d46:	f000 fe54 	bl	59f2 <bloomFilterAddressCheck+0xd1a>
    4d4a:	b284      	uxth	r4, r0
    4d4c:	49dc      	ldr	r1, [pc, #880]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4d4e:	0064      	lsls	r4, r4, #1
    4d50:	4061      	eors	r1, r4
    4d52:	b289      	uxth	r1, r1
    4d54:	0044      	lsls	r4, r0, #1
    4d56:	0403      	lsls	r3, r0, #16
    4d58:	d501      	bpl.n	4d5e <bloomFilterAddressCheck+0x86>
    4d5a:	f000 fe55 	bl	5a08 <bloomFilterAddressCheck+0xd30>
    4d5e:	b2a0      	uxth	r0, r4
    4d60:	49d7      	ldr	r1, [pc, #860]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4d62:	0040      	lsls	r0, r0, #1
    4d64:	4041      	eors	r1, r0
    4d66:	b289      	uxth	r1, r1
    4d68:	0060      	lsls	r0, r4, #1
    4d6a:	0423      	lsls	r3, r4, #16
    4d6c:	d501      	bpl.n	4d72 <bloomFilterAddressCheck+0x9a>
    4d6e:	f000 fe56 	bl	5a1e <bloomFilterAddressCheck+0xd46>
    4d72:	b284      	uxth	r4, r0
    4d74:	49d2      	ldr	r1, [pc, #840]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4d76:	0064      	lsls	r4, r4, #1
    4d78:	4061      	eors	r1, r4
    4d7a:	b289      	uxth	r1, r1
    4d7c:	0044      	lsls	r4, r0, #1
    4d7e:	0403      	lsls	r3, r0, #16
    4d80:	d501      	bpl.n	4d86 <bloomFilterAddressCheck+0xae>
    4d82:	f000 fe57 	bl	5a34 <bloomFilterAddressCheck+0xd5c>
    4d86:	b2a0      	uxth	r0, r4
    4d88:	49cd      	ldr	r1, [pc, #820]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4d8a:	0040      	lsls	r0, r0, #1
    4d8c:	4041      	eors	r1, r0
    4d8e:	b289      	uxth	r1, r1
    4d90:	0060      	lsls	r0, r4, #1
    4d92:	0423      	lsls	r3, r4, #16
    4d94:	d501      	bpl.n	4d9a <bloomFilterAddressCheck+0xc2>
    4d96:	f000 fe58 	bl	5a4a <bloomFilterAddressCheck+0xd72>
    4d9a:	b284      	uxth	r4, r0
    4d9c:	49c8      	ldr	r1, [pc, #800]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4d9e:	0064      	lsls	r4, r4, #1
    4da0:	4061      	eors	r1, r4
    4da2:	2401      	movs	r4, #1
    4da4:	5714      	ldrsb	r4, [r2, r4]
    4da6:	b289      	uxth	r1, r1
    4da8:	0224      	lsls	r4, r4, #8
    4daa:	0045      	lsls	r5, r0, #1
    4dac:	0403      	lsls	r3, r0, #16
    4dae:	d501      	bpl.n	4db4 <bloomFilterAddressCheck+0xdc>
    4db0:	f000 fe4e 	bl	5a50 <bloomFilterAddressCheck+0xd78>
    4db4:	4065      	eors	r5, r4
    4db6:	b22d      	sxth	r5, r5
    4db8:	b2a9      	uxth	r1, r5
    4dba:	48c1      	ldr	r0, [pc, #772]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4dbc:	0049      	lsls	r1, r1, #1
    4dbe:	4048      	eors	r0, r1
    4dc0:	b280      	uxth	r0, r0
    4dc2:	2d00      	cmp	r5, #0
    4dc4:	da01      	bge.n	4dca <bloomFilterAddressCheck+0xf2>
    4dc6:	f000 fe46 	bl	5a56 <bloomFilterAddressCheck+0xd7e>
    4dca:	48bd      	ldr	r0, [pc, #756]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4dcc:	b28d      	uxth	r5, r1
    4dce:	006d      	lsls	r5, r5, #1
    4dd0:	4045      	eors	r5, r0
    4dd2:	b2ad      	uxth	r5, r5
    4dd4:	0048      	lsls	r0, r1, #1
    4dd6:	040b      	lsls	r3, r1, #16
    4dd8:	d501      	bpl.n	4dde <bloomFilterAddressCheck+0x106>
    4dda:	f000 fe47 	bl	5a6c <bloomFilterAddressCheck+0xd94>
    4dde:	b285      	uxth	r5, r0
    4de0:	49b7      	ldr	r1, [pc, #732]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4de2:	006d      	lsls	r5, r5, #1
    4de4:	4069      	eors	r1, r5
    4de6:	b289      	uxth	r1, r1
    4de8:	0045      	lsls	r5, r0, #1
    4dea:	0403      	lsls	r3, r0, #16
    4dec:	d501      	bpl.n	4df2 <bloomFilterAddressCheck+0x11a>
    4dee:	f000 fe48 	bl	5a82 <bloomFilterAddressCheck+0xdaa>
    4df2:	b2a8      	uxth	r0, r5
    4df4:	49b2      	ldr	r1, [pc, #712]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4df6:	0040      	lsls	r0, r0, #1
    4df8:	4041      	eors	r1, r0
    4dfa:	b289      	uxth	r1, r1
    4dfc:	0068      	lsls	r0, r5, #1
    4dfe:	042b      	lsls	r3, r5, #16
    4e00:	d501      	bpl.n	4e06 <bloomFilterAddressCheck+0x12e>
    4e02:	f000 fe49 	bl	5a98 <bloomFilterAddressCheck+0xdc0>
    4e06:	b285      	uxth	r5, r0
    4e08:	49ad      	ldr	r1, [pc, #692]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4e0a:	006d      	lsls	r5, r5, #1
    4e0c:	4069      	eors	r1, r5
    4e0e:	b289      	uxth	r1, r1
    4e10:	0045      	lsls	r5, r0, #1
    4e12:	0403      	lsls	r3, r0, #16
    4e14:	d501      	bpl.n	4e1a <bloomFilterAddressCheck+0x142>
    4e16:	f000 fe4a 	bl	5aae <bloomFilterAddressCheck+0xdd6>
    4e1a:	b2a8      	uxth	r0, r5
    4e1c:	49a8      	ldr	r1, [pc, #672]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4e1e:	0040      	lsls	r0, r0, #1
    4e20:	4041      	eors	r1, r0
    4e22:	b289      	uxth	r1, r1
    4e24:	0068      	lsls	r0, r5, #1
    4e26:	042b      	lsls	r3, r5, #16
    4e28:	d501      	bpl.n	4e2e <bloomFilterAddressCheck+0x156>
    4e2a:	f000 fe4b 	bl	5ac4 <bloomFilterAddressCheck+0xdec>
    4e2e:	b285      	uxth	r5, r0
    4e30:	49a3      	ldr	r1, [pc, #652]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4e32:	006d      	lsls	r5, r5, #1
    4e34:	4069      	eors	r1, r5
    4e36:	b289      	uxth	r1, r1
    4e38:	0045      	lsls	r5, r0, #1
    4e3a:	0403      	lsls	r3, r0, #16
    4e3c:	d501      	bpl.n	4e42 <bloomFilterAddressCheck+0x16a>
    4e3e:	f000 fe4c 	bl	5ada <bloomFilterAddressCheck+0xe02>
    4e42:	b2a8      	uxth	r0, r5
    4e44:	499e      	ldr	r1, [pc, #632]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4e46:	0040      	lsls	r0, r0, #1
    4e48:	4041      	eors	r1, r0
    4e4a:	2002      	movs	r0, #2
    4e4c:	5610      	ldrsb	r0, [r2, r0]
    4e4e:	006f      	lsls	r7, r5, #1
    4e50:	b289      	uxth	r1, r1
    4e52:	0200      	lsls	r0, r0, #8
    4e54:	46b9      	mov	r9, r7
    4e56:	042b      	lsls	r3, r5, #16
    4e58:	d501      	bpl.n	4e5e <bloomFilterAddressCheck+0x186>
    4e5a:	f000 fe41 	bl	5ae0 <bloomFilterAddressCheck+0xe08>
    4e5e:	464d      	mov	r5, r9
    4e60:	4045      	eors	r5, r0
    4e62:	b22d      	sxth	r5, r5
    4e64:	b2a9      	uxth	r1, r5
    4e66:	0049      	lsls	r1, r1, #1
    4e68:	4689      	mov	r9, r1
    4e6a:	464f      	mov	r7, r9
    4e6c:	4994      	ldr	r1, [pc, #592]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4e6e:	4079      	eors	r1, r7
    4e70:	b289      	uxth	r1, r1
    4e72:	468a      	mov	sl, r1
    4e74:	4649      	mov	r1, r9
    4e76:	2d00      	cmp	r5, #0
    4e78:	da01      	bge.n	4e7e <bloomFilterAddressCheck+0x1a6>
    4e7a:	f000 fe34 	bl	5ae6 <bloomFilterAddressCheck+0xe0e>
    4e7e:	b28d      	uxth	r5, r1
    4e80:	006d      	lsls	r5, r5, #1
    4e82:	46a9      	mov	r9, r5
    4e84:	464f      	mov	r7, r9
    4e86:	4d8e      	ldr	r5, [pc, #568]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4e88:	407d      	eors	r5, r7
    4e8a:	b2ad      	uxth	r5, r5
    4e8c:	46a9      	mov	r9, r5
    4e8e:	004d      	lsls	r5, r1, #1
    4e90:	040b      	lsls	r3, r1, #16
    4e92:	d501      	bpl.n	4e98 <bloomFilterAddressCheck+0x1c0>
    4e94:	f000 fe2a 	bl	5aec <bloomFilterAddressCheck+0xe14>
    4e98:	b2a9      	uxth	r1, r5
    4e9a:	0049      	lsls	r1, r1, #1
    4e9c:	4689      	mov	r9, r1
    4e9e:	464f      	mov	r7, r9
    4ea0:	4987      	ldr	r1, [pc, #540]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4ea2:	4079      	eors	r1, r7
    4ea4:	006f      	lsls	r7, r5, #1
    4ea6:	b289      	uxth	r1, r1
    4ea8:	46b9      	mov	r9, r7
    4eaa:	042b      	lsls	r3, r5, #16
    4eac:	d501      	bpl.n	4eb2 <bloomFilterAddressCheck+0x1da>
    4eae:	f000 fe20 	bl	5af2 <bloomFilterAddressCheck+0xe1a>
    4eb2:	4649      	mov	r1, r9
    4eb4:	466b      	mov	r3, sp
    4eb6:	b28d      	uxth	r5, r1
    4eb8:	8099      	strh	r1, [r3, #4]
    4eba:	4981      	ldr	r1, [pc, #516]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4ebc:	006d      	lsls	r5, r5, #1
    4ebe:	4069      	eors	r1, r5
    4ec0:	464f      	mov	r7, r9
    4ec2:	464d      	mov	r5, r9
    4ec4:	b289      	uxth	r1, r1
    4ec6:	006d      	lsls	r5, r5, #1
    4ec8:	043b      	lsls	r3, r7, #16
    4eca:	d501      	bpl.n	4ed0 <bloomFilterAddressCheck+0x1f8>
    4ecc:	f000 fe14 	bl	5af8 <bloomFilterAddressCheck+0xe20>
    4ed0:	b2a9      	uxth	r1, r5
    4ed2:	0049      	lsls	r1, r1, #1
    4ed4:	4689      	mov	r9, r1
    4ed6:	464f      	mov	r7, r9
    4ed8:	4979      	ldr	r1, [pc, #484]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4eda:	4079      	eors	r1, r7
    4edc:	006f      	lsls	r7, r5, #1
    4ede:	b289      	uxth	r1, r1
    4ee0:	46b9      	mov	r9, r7
    4ee2:	042b      	lsls	r3, r5, #16
    4ee4:	d501      	bpl.n	4eea <bloomFilterAddressCheck+0x212>
    4ee6:	f000 fe0a 	bl	5afe <bloomFilterAddressCheck+0xe26>
    4eea:	4649      	mov	r1, r9
    4eec:	466b      	mov	r3, sp
    4eee:	b28d      	uxth	r5, r1
    4ef0:	8099      	strh	r1, [r3, #4]
    4ef2:	4973      	ldr	r1, [pc, #460]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4ef4:	006d      	lsls	r5, r5, #1
    4ef6:	4069      	eors	r1, r5
    4ef8:	464f      	mov	r7, r9
    4efa:	464d      	mov	r5, r9
    4efc:	b289      	uxth	r1, r1
    4efe:	006d      	lsls	r5, r5, #1
    4f00:	043b      	lsls	r3, r7, #16
    4f02:	d501      	bpl.n	4f08 <bloomFilterAddressCheck+0x230>
    4f04:	f000 fdfe 	bl	5b04 <bloomFilterAddressCheck+0xe2c>
    4f08:	b2a9      	uxth	r1, r5
    4f0a:	0049      	lsls	r1, r1, #1
    4f0c:	4689      	mov	r9, r1
    4f0e:	464f      	mov	r7, r9
    4f10:	496b      	ldr	r1, [pc, #428]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4f12:	4079      	eors	r1, r7
    4f14:	006f      	lsls	r7, r5, #1
    4f16:	b289      	uxth	r1, r1
    4f18:	46ba      	mov	sl, r7
    4f1a:	042b      	lsls	r3, r5, #16
    4f1c:	d501      	bpl.n	4f22 <bloomFilterAddressCheck+0x24a>
    4f1e:	f000 fdf4 	bl	5b0a <bloomFilterAddressCheck+0xe32>
    4f22:	4651      	mov	r1, sl
    4f24:	466b      	mov	r3, sp
    4f26:	b28d      	uxth	r5, r1
    4f28:	8099      	strh	r1, [r3, #4]
    4f2a:	4965      	ldr	r1, [pc, #404]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4f2c:	006d      	lsls	r5, r5, #1
    4f2e:	4069      	eors	r1, r5
    4f30:	b289      	uxth	r1, r1
    4f32:	4689      	mov	r9, r1
    4f34:	2103      	movs	r1, #3
    4f36:	4655      	mov	r5, sl
    4f38:	4657      	mov	r7, sl
    4f3a:	5651      	ldrsb	r1, [r2, r1]
    4f3c:	006d      	lsls	r5, r5, #1
    4f3e:	0209      	lsls	r1, r1, #8
    4f40:	043b      	lsls	r3, r7, #16
    4f42:	d501      	bpl.n	4f48 <bloomFilterAddressCheck+0x270>
    4f44:	f000 fde4 	bl	5b10 <bloomFilterAddressCheck+0xe38>
    4f48:	404d      	eors	r5, r1
    4f4a:	b22d      	sxth	r5, r5
    4f4c:	466b      	mov	r3, sp
    4f4e:	46a9      	mov	r9, r5
    4f50:	4f5b      	ldr	r7, [pc, #364]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4f52:	b2ad      	uxth	r5, r5
    4f54:	006d      	lsls	r5, r5, #1
    4f56:	406f      	eors	r7, r5
    4f58:	809f      	strh	r7, [r3, #4]
    4f5a:	b2bf      	uxth	r7, r7
    4f5c:	46ba      	mov	sl, r7
    4f5e:	464f      	mov	r7, r9
    4f60:	2f00      	cmp	r7, #0
    4f62:	da01      	bge.n	4f68 <bloomFilterAddressCheck+0x290>
    4f64:	f000 fdd7 	bl	5b16 <bloomFilterAddressCheck+0xe3e>
    4f68:	b2af      	uxth	r7, r5
    4f6a:	007f      	lsls	r7, r7, #1
    4f6c:	46ba      	mov	sl, r7
    4f6e:	4f54      	ldr	r7, [pc, #336]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4f70:	46b9      	mov	r9, r7
    4f72:	4657      	mov	r7, sl
    4f74:	464b      	mov	r3, r9
    4f76:	405f      	eors	r7, r3
    4f78:	1c3b      	adds	r3, r7, #0
    4f7a:	466f      	mov	r7, sp
    4f7c:	80bb      	strh	r3, [r7, #4]
    4f7e:	88bb      	ldrh	r3, [r7, #4]
    4f80:	469a      	mov	sl, r3
    4f82:	006b      	lsls	r3, r5, #1
    4f84:	4699      	mov	r9, r3
    4f86:	042b      	lsls	r3, r5, #16
    4f88:	d501      	bpl.n	4f8e <bloomFilterAddressCheck+0x2b6>
    4f8a:	f000 fdc7 	bl	5b1c <bloomFilterAddressCheck+0xe44>
    4f8e:	464b      	mov	r3, r9
    4f90:	466d      	mov	r5, sp
    4f92:	80ab      	strh	r3, [r5, #4]
    4f94:	88ad      	ldrh	r5, [r5, #4]
    4f96:	006b      	lsls	r3, r5, #1
    4f98:	4d49      	ldr	r5, [pc, #292]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4f9a:	405d      	eors	r5, r3
    4f9c:	464b      	mov	r3, r9
    4f9e:	005b      	lsls	r3, r3, #1
    4fa0:	469a      	mov	sl, r3
    4fa2:	464b      	mov	r3, r9
    4fa4:	b2ad      	uxth	r5, r5
    4fa6:	041b      	lsls	r3, r3, #16
    4fa8:	d501      	bpl.n	4fae <bloomFilterAddressCheck+0x2d6>
    4faa:	f000 fdba 	bl	5b22 <bloomFilterAddressCheck+0xe4a>
    4fae:	4653      	mov	r3, sl
    4fb0:	466d      	mov	r5, sp
    4fb2:	80ab      	strh	r3, [r5, #4]
    4fb4:	88ad      	ldrh	r5, [r5, #4]
    4fb6:	006b      	lsls	r3, r5, #1
    4fb8:	4d41      	ldr	r5, [pc, #260]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4fba:	405d      	eors	r5, r3
    4fbc:	4653      	mov	r3, sl
    4fbe:	005b      	lsls	r3, r3, #1
    4fc0:	4699      	mov	r9, r3
    4fc2:	4653      	mov	r3, sl
    4fc4:	b2ad      	uxth	r5, r5
    4fc6:	041b      	lsls	r3, r3, #16
    4fc8:	d501      	bpl.n	4fce <bloomFilterAddressCheck+0x2f6>
    4fca:	f000 fdad 	bl	5b28 <bloomFilterAddressCheck+0xe50>
    4fce:	464b      	mov	r3, r9
    4fd0:	466d      	mov	r5, sp
    4fd2:	80ab      	strh	r3, [r5, #4]
    4fd4:	88ad      	ldrh	r5, [r5, #4]
    4fd6:	006b      	lsls	r3, r5, #1
    4fd8:	4d39      	ldr	r5, [pc, #228]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4fda:	405d      	eors	r5, r3
    4fdc:	464b      	mov	r3, r9
    4fde:	005b      	lsls	r3, r3, #1
    4fe0:	469a      	mov	sl, r3
    4fe2:	464b      	mov	r3, r9
    4fe4:	b2ad      	uxth	r5, r5
    4fe6:	041b      	lsls	r3, r3, #16
    4fe8:	d501      	bpl.n	4fee <bloomFilterAddressCheck+0x316>
    4fea:	f000 fda0 	bl	5b2e <bloomFilterAddressCheck+0xe56>
    4fee:	4653      	mov	r3, sl
    4ff0:	466d      	mov	r5, sp
    4ff2:	80ab      	strh	r3, [r5, #4]
    4ff4:	88ad      	ldrh	r5, [r5, #4]
    4ff6:	006b      	lsls	r3, r5, #1
    4ff8:	4d31      	ldr	r5, [pc, #196]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    4ffa:	405d      	eors	r5, r3
    4ffc:	4653      	mov	r3, sl
    4ffe:	005b      	lsls	r3, r3, #1
    5000:	4699      	mov	r9, r3
    5002:	4653      	mov	r3, sl
    5004:	b2ad      	uxth	r5, r5
    5006:	041b      	lsls	r3, r3, #16
    5008:	d501      	bpl.n	500e <bloomFilterAddressCheck+0x336>
    500a:	f000 fd93 	bl	5b34 <bloomFilterAddressCheck+0xe5c>
    500e:	464b      	mov	r3, r9
    5010:	466d      	mov	r5, sp
    5012:	80ab      	strh	r3, [r5, #4]
    5014:	88ad      	ldrh	r5, [r5, #4]
    5016:	006b      	lsls	r3, r5, #1
    5018:	4d29      	ldr	r5, [pc, #164]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    501a:	405d      	eors	r5, r3
    501c:	464b      	mov	r3, r9
    501e:	005b      	lsls	r3, r3, #1
    5020:	469a      	mov	sl, r3
    5022:	464b      	mov	r3, r9
    5024:	b2ad      	uxth	r5, r5
    5026:	041b      	lsls	r3, r3, #16
    5028:	d501      	bpl.n	502e <bloomFilterAddressCheck+0x356>
    502a:	f000 fd86 	bl	5b3a <bloomFilterAddressCheck+0xe62>
    502e:	4653      	mov	r3, sl
    5030:	466d      	mov	r5, sp
    5032:	80ab      	strh	r3, [r5, #4]
    5034:	88ad      	ldrh	r5, [r5, #4]
    5036:	006b      	lsls	r3, r5, #1
    5038:	4d21      	ldr	r5, [pc, #132]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    503a:	405d      	eors	r5, r3
    503c:	b2ab      	uxth	r3, r5
    503e:	2504      	movs	r5, #4
    5040:	5755      	ldrsb	r5, [r2, r5]
    5042:	4699      	mov	r9, r3
    5044:	022b      	lsls	r3, r5, #8
    5046:	469b      	mov	fp, r3
    5048:	4653      	mov	r3, sl
    504a:	005d      	lsls	r5, r3, #1
    504c:	041b      	lsls	r3, r3, #16
    504e:	d501      	bpl.n	5054 <bloomFilterAddressCheck+0x37c>
    5050:	f000 fd76 	bl	5b40 <bloomFilterAddressCheck+0xe68>
    5054:	465b      	mov	r3, fp
    5056:	405d      	eors	r5, r3
    5058:	b22b      	sxth	r3, r5
    505a:	466d      	mov	r5, sp
    505c:	4699      	mov	r9, r3
    505e:	80ab      	strh	r3, [r5, #4]
    5060:	4b17      	ldr	r3, [pc, #92]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    5062:	88ad      	ldrh	r5, [r5, #4]
    5064:	001f      	movs	r7, r3
    5066:	006d      	lsls	r5, r5, #1
    5068:	406f      	eors	r7, r5
    506a:	1c3b      	adds	r3, r7, #0
    506c:	466f      	mov	r7, sp
    506e:	80bb      	strh	r3, [r7, #4]
    5070:	88bb      	ldrh	r3, [r7, #4]
    5072:	469a      	mov	sl, r3
    5074:	464b      	mov	r3, r9
    5076:	2b00      	cmp	r3, #0
    5078:	da01      	bge.n	507e <bloomFilterAddressCheck+0x3a6>
    507a:	f000 fd64 	bl	5b46 <bloomFilterAddressCheck+0xe6e>
    507e:	b2ab      	uxth	r3, r5
    5080:	005b      	lsls	r3, r3, #1
    5082:	469a      	mov	sl, r3
    5084:	4657      	mov	r7, sl
    5086:	4b0e      	ldr	r3, [pc, #56]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    5088:	405f      	eors	r7, r3
    508a:	1c3b      	adds	r3, r7, #0
    508c:	466f      	mov	r7, sp
    508e:	80bb      	strh	r3, [r7, #4]
    5090:	88bb      	ldrh	r3, [r7, #4]
    5092:	469a      	mov	sl, r3
    5094:	006b      	lsls	r3, r5, #1
    5096:	4699      	mov	r9, r3
    5098:	042b      	lsls	r3, r5, #16
    509a:	d501      	bpl.n	50a0 <bloomFilterAddressCheck+0x3c8>
    509c:	f000 fd56 	bl	5b4c <bloomFilterAddressCheck+0xe74>
    50a0:	464b      	mov	r3, r9
    50a2:	466d      	mov	r5, sp
    50a4:	80ab      	strh	r3, [r5, #4]
    50a6:	88ad      	ldrh	r5, [r5, #4]
    50a8:	006b      	lsls	r3, r5, #1
    50aa:	4d05      	ldr	r5, [pc, #20]	; (50c0 <bloomFilterAddressCheck+0x3e8>)
    50ac:	405d      	eors	r5, r3
    50ae:	464b      	mov	r3, r9
    50b0:	005b      	lsls	r3, r3, #1
    50b2:	469a      	mov	sl, r3
    50b4:	464b      	mov	r3, r9
    50b6:	b2ad      	uxth	r5, r5
    50b8:	e004      	b.n	50c4 <bloomFilterAddressCheck+0x3ec>
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	2000004b 	.word	0x2000004b
    50c0:	00001021 	.word	0x00001021
    50c4:	041b      	lsls	r3, r3, #16
    50c6:	d501      	bpl.n	50cc <bloomFilterAddressCheck+0x3f4>
    50c8:	f000 fd43 	bl	5b52 <bloomFilterAddressCheck+0xe7a>
    50cc:	4653      	mov	r3, sl
    50ce:	466d      	mov	r5, sp
    50d0:	80ab      	strh	r3, [r5, #4]
    50d2:	88ad      	ldrh	r5, [r5, #4]
    50d4:	006b      	lsls	r3, r5, #1
    50d6:	4de9      	ldr	r5, [pc, #932]	; (547c <bloomFilterAddressCheck+0x7a4>)
    50d8:	405d      	eors	r5, r3
    50da:	4653      	mov	r3, sl
    50dc:	005b      	lsls	r3, r3, #1
    50de:	4699      	mov	r9, r3
    50e0:	4653      	mov	r3, sl
    50e2:	b2ad      	uxth	r5, r5
    50e4:	041b      	lsls	r3, r3, #16
    50e6:	d501      	bpl.n	50ec <bloomFilterAddressCheck+0x414>
    50e8:	f000 fd36 	bl	5b58 <bloomFilterAddressCheck+0xe80>
    50ec:	464b      	mov	r3, r9
    50ee:	466d      	mov	r5, sp
    50f0:	80ab      	strh	r3, [r5, #4]
    50f2:	88ad      	ldrh	r5, [r5, #4]
    50f4:	006b      	lsls	r3, r5, #1
    50f6:	4de1      	ldr	r5, [pc, #900]	; (547c <bloomFilterAddressCheck+0x7a4>)
    50f8:	405d      	eors	r5, r3
    50fa:	464b      	mov	r3, r9
    50fc:	005b      	lsls	r3, r3, #1
    50fe:	469a      	mov	sl, r3
    5100:	464b      	mov	r3, r9
    5102:	b2ad      	uxth	r5, r5
    5104:	041b      	lsls	r3, r3, #16
    5106:	d501      	bpl.n	510c <bloomFilterAddressCheck+0x434>
    5108:	f000 fd29 	bl	5b5e <bloomFilterAddressCheck+0xe86>
    510c:	4653      	mov	r3, sl
    510e:	466d      	mov	r5, sp
    5110:	80ab      	strh	r3, [r5, #4]
    5112:	88ad      	ldrh	r5, [r5, #4]
    5114:	006b      	lsls	r3, r5, #1
    5116:	4dd9      	ldr	r5, [pc, #868]	; (547c <bloomFilterAddressCheck+0x7a4>)
    5118:	405d      	eors	r5, r3
    511a:	4653      	mov	r3, sl
    511c:	005b      	lsls	r3, r3, #1
    511e:	4699      	mov	r9, r3
    5120:	4653      	mov	r3, sl
    5122:	b2ad      	uxth	r5, r5
    5124:	041b      	lsls	r3, r3, #16
    5126:	d501      	bpl.n	512c <bloomFilterAddressCheck+0x454>
    5128:	f000 fd1c 	bl	5b64 <bloomFilterAddressCheck+0xe8c>
    512c:	464b      	mov	r3, r9
    512e:	466d      	mov	r5, sp
    5130:	80ab      	strh	r3, [r5, #4]
    5132:	88ad      	ldrh	r5, [r5, #4]
    5134:	006b      	lsls	r3, r5, #1
    5136:	4dd1      	ldr	r5, [pc, #836]	; (547c <bloomFilterAddressCheck+0x7a4>)
    5138:	405d      	eors	r5, r3
    513a:	464b      	mov	r3, r9
    513c:	005b      	lsls	r3, r3, #1
    513e:	469a      	mov	sl, r3
    5140:	464b      	mov	r3, r9
    5142:	b2ad      	uxth	r5, r5
    5144:	041b      	lsls	r3, r3, #16
    5146:	d501      	bpl.n	514c <bloomFilterAddressCheck+0x474>
    5148:	f000 fd0f 	bl	5b6a <bloomFilterAddressCheck+0xe92>
    514c:	4653      	mov	r3, sl
    514e:	466d      	mov	r5, sp
    5150:	80ab      	strh	r3, [r5, #4]
    5152:	88ad      	ldrh	r5, [r5, #4]
    5154:	006b      	lsls	r3, r5, #1
    5156:	4dc9      	ldr	r5, [pc, #804]	; (547c <bloomFilterAddressCheck+0x7a4>)
    5158:	405d      	eors	r5, r3
    515a:	b2ab      	uxth	r3, r5
    515c:	2505      	movs	r5, #5
    515e:	5755      	ldrsb	r5, [r2, r5]
    5160:	4699      	mov	r9, r3
    5162:	022b      	lsls	r3, r5, #8
    5164:	9301      	str	r3, [sp, #4]
    5166:	4653      	mov	r3, sl
    5168:	005d      	lsls	r5, r3, #1
    516a:	041b      	lsls	r3, r3, #16
    516c:	d501      	bpl.n	5172 <bloomFilterAddressCheck+0x49a>
    516e:	f000 fcff 	bl	5b70 <bloomFilterAddressCheck+0xe98>
    5172:	9b01      	ldr	r3, [sp, #4]
    5174:	405d      	eors	r5, r3
    5176:	b22b      	sxth	r3, r5
    5178:	466d      	mov	r5, sp
    517a:	4699      	mov	r9, r3
    517c:	812b      	strh	r3, [r5, #8]
    517e:	4bbf      	ldr	r3, [pc, #764]	; (547c <bloomFilterAddressCheck+0x7a4>)
    5180:	892d      	ldrh	r5, [r5, #8]
    5182:	001f      	movs	r7, r3
    5184:	006d      	lsls	r5, r5, #1
    5186:	406f      	eors	r7, r5
    5188:	1c3b      	adds	r3, r7, #0
    518a:	466f      	mov	r7, sp
    518c:	813b      	strh	r3, [r7, #8]
    518e:	893b      	ldrh	r3, [r7, #8]
    5190:	469a      	mov	sl, r3
    5192:	464b      	mov	r3, r9
    5194:	2b00      	cmp	r3, #0
    5196:	da01      	bge.n	519c <bloomFilterAddressCheck+0x4c4>
    5198:	f000 fced 	bl	5b76 <bloomFilterAddressCheck+0xe9e>
    519c:	b2ab      	uxth	r3, r5
    519e:	005b      	lsls	r3, r3, #1
    51a0:	469a      	mov	sl, r3
    51a2:	4657      	mov	r7, sl
    51a4:	4bb5      	ldr	r3, [pc, #724]	; (547c <bloomFilterAddressCheck+0x7a4>)
    51a6:	405f      	eors	r7, r3
    51a8:	1c3b      	adds	r3, r7, #0
    51aa:	466f      	mov	r7, sp
    51ac:	813b      	strh	r3, [r7, #8]
    51ae:	893b      	ldrh	r3, [r7, #8]
    51b0:	469a      	mov	sl, r3
    51b2:	006b      	lsls	r3, r5, #1
    51b4:	4699      	mov	r9, r3
    51b6:	042b      	lsls	r3, r5, #16
    51b8:	d501      	bpl.n	51be <bloomFilterAddressCheck+0x4e6>
    51ba:	f000 fcdf 	bl	5b7c <bloomFilterAddressCheck+0xea4>
    51be:	464b      	mov	r3, r9
    51c0:	466d      	mov	r5, sp
    51c2:	812b      	strh	r3, [r5, #8]
    51c4:	892d      	ldrh	r5, [r5, #8]
    51c6:	006b      	lsls	r3, r5, #1
    51c8:	4dac      	ldr	r5, [pc, #688]	; (547c <bloomFilterAddressCheck+0x7a4>)
    51ca:	405d      	eors	r5, r3
    51cc:	464b      	mov	r3, r9
    51ce:	005b      	lsls	r3, r3, #1
    51d0:	469a      	mov	sl, r3
    51d2:	464b      	mov	r3, r9
    51d4:	b2ad      	uxth	r5, r5
    51d6:	041b      	lsls	r3, r3, #16
    51d8:	d501      	bpl.n	51de <bloomFilterAddressCheck+0x506>
    51da:	f000 fcd2 	bl	5b82 <bloomFilterAddressCheck+0xeaa>
    51de:	4653      	mov	r3, sl
    51e0:	466d      	mov	r5, sp
    51e2:	812b      	strh	r3, [r5, #8]
    51e4:	892d      	ldrh	r5, [r5, #8]
    51e6:	006b      	lsls	r3, r5, #1
    51e8:	4da4      	ldr	r5, [pc, #656]	; (547c <bloomFilterAddressCheck+0x7a4>)
    51ea:	405d      	eors	r5, r3
    51ec:	4653      	mov	r3, sl
    51ee:	005b      	lsls	r3, r3, #1
    51f0:	4699      	mov	r9, r3
    51f2:	4653      	mov	r3, sl
    51f4:	b2ad      	uxth	r5, r5
    51f6:	041b      	lsls	r3, r3, #16
    51f8:	d501      	bpl.n	51fe <bloomFilterAddressCheck+0x526>
    51fa:	f000 fcc5 	bl	5b88 <bloomFilterAddressCheck+0xeb0>
    51fe:	464b      	mov	r3, r9
    5200:	466d      	mov	r5, sp
    5202:	812b      	strh	r3, [r5, #8]
    5204:	892d      	ldrh	r5, [r5, #8]
    5206:	006b      	lsls	r3, r5, #1
    5208:	4d9c      	ldr	r5, [pc, #624]	; (547c <bloomFilterAddressCheck+0x7a4>)
    520a:	405d      	eors	r5, r3
    520c:	464b      	mov	r3, r9
    520e:	005b      	lsls	r3, r3, #1
    5210:	469a      	mov	sl, r3
    5212:	464b      	mov	r3, r9
    5214:	b2ad      	uxth	r5, r5
    5216:	041b      	lsls	r3, r3, #16
    5218:	d501      	bpl.n	521e <bloomFilterAddressCheck+0x546>
    521a:	f000 fcb8 	bl	5b8e <bloomFilterAddressCheck+0xeb6>
    521e:	4653      	mov	r3, sl
    5220:	466d      	mov	r5, sp
    5222:	812b      	strh	r3, [r5, #8]
    5224:	892d      	ldrh	r5, [r5, #8]
    5226:	006b      	lsls	r3, r5, #1
    5228:	4d94      	ldr	r5, [pc, #592]	; (547c <bloomFilterAddressCheck+0x7a4>)
    522a:	405d      	eors	r5, r3
    522c:	4653      	mov	r3, sl
    522e:	005b      	lsls	r3, r3, #1
    5230:	4699      	mov	r9, r3
    5232:	4653      	mov	r3, sl
    5234:	b2ad      	uxth	r5, r5
    5236:	041b      	lsls	r3, r3, #16
    5238:	d501      	bpl.n	523e <bloomFilterAddressCheck+0x566>
    523a:	f000 fcab 	bl	5b94 <bloomFilterAddressCheck+0xebc>
    523e:	464b      	mov	r3, r9
    5240:	466d      	mov	r5, sp
    5242:	812b      	strh	r3, [r5, #8]
    5244:	892d      	ldrh	r5, [r5, #8]
    5246:	006b      	lsls	r3, r5, #1
    5248:	4d8c      	ldr	r5, [pc, #560]	; (547c <bloomFilterAddressCheck+0x7a4>)
    524a:	405d      	eors	r5, r3
    524c:	464b      	mov	r3, r9
    524e:	005b      	lsls	r3, r3, #1
    5250:	469a      	mov	sl, r3
    5252:	464b      	mov	r3, r9
    5254:	b2ad      	uxth	r5, r5
    5256:	041b      	lsls	r3, r3, #16
    5258:	d501      	bpl.n	525e <bloomFilterAddressCheck+0x586>
    525a:	f000 fc9e 	bl	5b9a <bloomFilterAddressCheck+0xec2>
    525e:	4653      	mov	r3, sl
    5260:	466d      	mov	r5, sp
    5262:	812b      	strh	r3, [r5, #8]
    5264:	892d      	ldrh	r5, [r5, #8]
    5266:	006b      	lsls	r3, r5, #1
    5268:	4d84      	ldr	r5, [pc, #528]	; (547c <bloomFilterAddressCheck+0x7a4>)
    526a:	405d      	eors	r5, r3
    526c:	b2ab      	uxth	r3, r5
    526e:	2506      	movs	r5, #6
    5270:	5755      	ldrsb	r5, [r2, r5]
    5272:	4699      	mov	r9, r3
    5274:	022b      	lsls	r3, r5, #8
    5276:	9302      	str	r3, [sp, #8]
    5278:	4653      	mov	r3, sl
    527a:	005d      	lsls	r5, r3, #1
    527c:	041b      	lsls	r3, r3, #16
    527e:	d501      	bpl.n	5284 <bloomFilterAddressCheck+0x5ac>
    5280:	f000 fc8e 	bl	5ba0 <bloomFilterAddressCheck+0xec8>
    5284:	9b02      	ldr	r3, [sp, #8]
    5286:	405d      	eors	r5, r3
    5288:	b22b      	sxth	r3, r5
    528a:	466d      	mov	r5, sp
    528c:	4699      	mov	r9, r3
    528e:	82ab      	strh	r3, [r5, #20]
    5290:	4b7a      	ldr	r3, [pc, #488]	; (547c <bloomFilterAddressCheck+0x7a4>)
    5292:	8aad      	ldrh	r5, [r5, #20]
    5294:	001f      	movs	r7, r3
    5296:	006d      	lsls	r5, r5, #1
    5298:	406f      	eors	r7, r5
    529a:	1c3b      	adds	r3, r7, #0
    529c:	466f      	mov	r7, sp
    529e:	82bb      	strh	r3, [r7, #20]
    52a0:	8abb      	ldrh	r3, [r7, #20]
    52a2:	469a      	mov	sl, r3
    52a4:	464b      	mov	r3, r9
    52a6:	2b00      	cmp	r3, #0
    52a8:	da01      	bge.n	52ae <bloomFilterAddressCheck+0x5d6>
    52aa:	f000 fc7c 	bl	5ba6 <bloomFilterAddressCheck+0xece>
    52ae:	b2ab      	uxth	r3, r5
    52b0:	005b      	lsls	r3, r3, #1
    52b2:	469a      	mov	sl, r3
    52b4:	4657      	mov	r7, sl
    52b6:	4b71      	ldr	r3, [pc, #452]	; (547c <bloomFilterAddressCheck+0x7a4>)
    52b8:	405f      	eors	r7, r3
    52ba:	1c3b      	adds	r3, r7, #0
    52bc:	466f      	mov	r7, sp
    52be:	82bb      	strh	r3, [r7, #20]
    52c0:	8abb      	ldrh	r3, [r7, #20]
    52c2:	4699      	mov	r9, r3
    52c4:	006b      	lsls	r3, r5, #1
    52c6:	469a      	mov	sl, r3
    52c8:	042b      	lsls	r3, r5, #16
    52ca:	d501      	bpl.n	52d0 <bloomFilterAddressCheck+0x5f8>
    52cc:	f000 fc6e 	bl	5bac <bloomFilterAddressCheck+0xed4>
    52d0:	4653      	mov	r3, sl
    52d2:	466d      	mov	r5, sp
    52d4:	82ab      	strh	r3, [r5, #20]
    52d6:	8aad      	ldrh	r5, [r5, #20]
    52d8:	006b      	lsls	r3, r5, #1
    52da:	4d68      	ldr	r5, [pc, #416]	; (547c <bloomFilterAddressCheck+0x7a4>)
    52dc:	405d      	eors	r5, r3
    52de:	4653      	mov	r3, sl
    52e0:	005b      	lsls	r3, r3, #1
    52e2:	4699      	mov	r9, r3
    52e4:	4653      	mov	r3, sl
    52e6:	b2ad      	uxth	r5, r5
    52e8:	041b      	lsls	r3, r3, #16
    52ea:	d501      	bpl.n	52f0 <bloomFilterAddressCheck+0x618>
    52ec:	f000 fc61 	bl	5bb2 <bloomFilterAddressCheck+0xeda>
    52f0:	464b      	mov	r3, r9
    52f2:	466d      	mov	r5, sp
    52f4:	82ab      	strh	r3, [r5, #20]
    52f6:	8aad      	ldrh	r5, [r5, #20]
    52f8:	006b      	lsls	r3, r5, #1
    52fa:	4d60      	ldr	r5, [pc, #384]	; (547c <bloomFilterAddressCheck+0x7a4>)
    52fc:	405d      	eors	r5, r3
    52fe:	464b      	mov	r3, r9
    5300:	005b      	lsls	r3, r3, #1
    5302:	469a      	mov	sl, r3
    5304:	464b      	mov	r3, r9
    5306:	b2ad      	uxth	r5, r5
    5308:	041b      	lsls	r3, r3, #16
    530a:	d501      	bpl.n	5310 <bloomFilterAddressCheck+0x638>
    530c:	f000 fc54 	bl	5bb8 <bloomFilterAddressCheck+0xee0>
    5310:	4653      	mov	r3, sl
    5312:	466d      	mov	r5, sp
    5314:	82ab      	strh	r3, [r5, #20]
    5316:	8aad      	ldrh	r5, [r5, #20]
    5318:	006b      	lsls	r3, r5, #1
    531a:	4d58      	ldr	r5, [pc, #352]	; (547c <bloomFilterAddressCheck+0x7a4>)
    531c:	405d      	eors	r5, r3
    531e:	4653      	mov	r3, sl
    5320:	005b      	lsls	r3, r3, #1
    5322:	4699      	mov	r9, r3
    5324:	4653      	mov	r3, sl
    5326:	b2ad      	uxth	r5, r5
    5328:	041b      	lsls	r3, r3, #16
    532a:	d501      	bpl.n	5330 <bloomFilterAddressCheck+0x658>
    532c:	f000 fc47 	bl	5bbe <bloomFilterAddressCheck+0xee6>
    5330:	464b      	mov	r3, r9
    5332:	466d      	mov	r5, sp
    5334:	82ab      	strh	r3, [r5, #20]
    5336:	8aad      	ldrh	r5, [r5, #20]
    5338:	006b      	lsls	r3, r5, #1
    533a:	4d50      	ldr	r5, [pc, #320]	; (547c <bloomFilterAddressCheck+0x7a4>)
    533c:	405d      	eors	r5, r3
    533e:	464b      	mov	r3, r9
    5340:	005b      	lsls	r3, r3, #1
    5342:	469a      	mov	sl, r3
    5344:	464b      	mov	r3, r9
    5346:	b2ad      	uxth	r5, r5
    5348:	041b      	lsls	r3, r3, #16
    534a:	d501      	bpl.n	5350 <bloomFilterAddressCheck+0x678>
    534c:	f000 fc3a 	bl	5bc4 <bloomFilterAddressCheck+0xeec>
    5350:	4653      	mov	r3, sl
    5352:	466d      	mov	r5, sp
    5354:	82ab      	strh	r3, [r5, #20]
    5356:	8aad      	ldrh	r5, [r5, #20]
    5358:	006b      	lsls	r3, r5, #1
    535a:	4d48      	ldr	r5, [pc, #288]	; (547c <bloomFilterAddressCheck+0x7a4>)
    535c:	405d      	eors	r5, r3
    535e:	4653      	mov	r3, sl
    5360:	005b      	lsls	r3, r3, #1
    5362:	4699      	mov	r9, r3
    5364:	4653      	mov	r3, sl
    5366:	b2ad      	uxth	r5, r5
    5368:	041b      	lsls	r3, r3, #16
    536a:	d501      	bpl.n	5370 <bloomFilterAddressCheck+0x698>
    536c:	f000 fc2d 	bl	5bca <bloomFilterAddressCheck+0xef2>
    5370:	464b      	mov	r3, r9
    5372:	466d      	mov	r5, sp
    5374:	82ab      	strh	r3, [r5, #20]
    5376:	8aad      	ldrh	r5, [r5, #20]
    5378:	79d2      	ldrb	r2, [r2, #7]
    537a:	006b      	lsls	r3, r5, #1
    537c:	4d3f      	ldr	r5, [pc, #252]	; (547c <bloomFilterAddressCheck+0x7a4>)
    537e:	b252      	sxtb	r2, r2
    5380:	405d      	eors	r5, r3
    5382:	0213      	lsls	r3, r2, #8
    5384:	469a      	mov	sl, r3
    5386:	464b      	mov	r3, r9
    5388:	b2ad      	uxth	r5, r5
    538a:	005a      	lsls	r2, r3, #1
    538c:	041b      	lsls	r3, r3, #16
    538e:	d501      	bpl.n	5394 <bloomFilterAddressCheck+0x6bc>
    5390:	f000 fc1e 	bl	5bd0 <bloomFilterAddressCheck+0xef8>
    5394:	4653      	mov	r3, sl
    5396:	405a      	eors	r2, r3
    5398:	4b38      	ldr	r3, [pc, #224]	; (547c <bloomFilterAddressCheck+0x7a4>)
    539a:	b212      	sxth	r2, r2
    539c:	001f      	movs	r7, r3
    539e:	b295      	uxth	r5, r2
    53a0:	006d      	lsls	r5, r5, #1
    53a2:	406f      	eors	r7, r5
    53a4:	1c3b      	adds	r3, r7, #0
    53a6:	466f      	mov	r7, sp
    53a8:	82bb      	strh	r3, [r7, #20]
    53aa:	8abb      	ldrh	r3, [r7, #20]
    53ac:	b2ad      	uxth	r5, r5
    53ae:	2a00      	cmp	r2, #0
    53b0:	da00      	bge.n	53b4 <bloomFilterAddressCheck+0x6dc>
    53b2:	e30e      	b.n	59d2 <bloomFilterAddressCheck+0xcfa>
    53b4:	1c2a      	adds	r2, r5, #0
    53b6:	466f      	mov	r7, sp
    53b8:	b295      	uxth	r5, r2
    53ba:	006b      	lsls	r3, r5, #1
    53bc:	4d2f      	ldr	r5, [pc, #188]	; (547c <bloomFilterAddressCheck+0x7a4>)
    53be:	405d      	eors	r5, r3
    53c0:	0053      	lsls	r3, r2, #1
    53c2:	82bb      	strh	r3, [r7, #20]
    53c4:	8abb      	ldrh	r3, [r7, #20]
    53c6:	b2ad      	uxth	r5, r5
    53c8:	4699      	mov	r9, r3
    53ca:	0413      	lsls	r3, r2, #16
    53cc:	d501      	bpl.n	53d2 <bloomFilterAddressCheck+0x6fa>
    53ce:	f000 fcb4 	bl	5d3a <bloomFilterAddressCheck+0x1062>
    53d2:	464a      	mov	r2, r9
    53d4:	466f      	mov	r7, sp
    53d6:	b295      	uxth	r5, r2
    53d8:	006b      	lsls	r3, r5, #1
    53da:	4d28      	ldr	r5, [pc, #160]	; (547c <bloomFilterAddressCheck+0x7a4>)
    53dc:	405d      	eors	r5, r3
    53de:	0053      	lsls	r3, r2, #1
    53e0:	82bb      	strh	r3, [r7, #20]
    53e2:	8abb      	ldrh	r3, [r7, #20]
    53e4:	b2ad      	uxth	r5, r5
    53e6:	4699      	mov	r9, r3
    53e8:	0413      	lsls	r3, r2, #16
    53ea:	d400      	bmi.n	53ee <bloomFilterAddressCheck+0x716>
    53ec:	464d      	mov	r5, r9
    53ee:	466f      	mov	r7, sp
    53f0:	b2aa      	uxth	r2, r5
    53f2:	0053      	lsls	r3, r2, #1
    53f4:	4a21      	ldr	r2, [pc, #132]	; (547c <bloomFilterAddressCheck+0x7a4>)
    53f6:	405a      	eors	r2, r3
    53f8:	006b      	lsls	r3, r5, #1
    53fa:	82bb      	strh	r3, [r7, #20]
    53fc:	8abb      	ldrh	r3, [r7, #20]
    53fe:	b292      	uxth	r2, r2
    5400:	4699      	mov	r9, r3
    5402:	042b      	lsls	r3, r5, #16
    5404:	d400      	bmi.n	5408 <bloomFilterAddressCheck+0x730>
    5406:	464a      	mov	r2, r9
    5408:	466f      	mov	r7, sp
    540a:	b295      	uxth	r5, r2
    540c:	006b      	lsls	r3, r5, #1
    540e:	4d1b      	ldr	r5, [pc, #108]	; (547c <bloomFilterAddressCheck+0x7a4>)
    5410:	405d      	eors	r5, r3
    5412:	0053      	lsls	r3, r2, #1
    5414:	82bb      	strh	r3, [r7, #20]
    5416:	8abb      	ldrh	r3, [r7, #20]
    5418:	b2ad      	uxth	r5, r5
    541a:	4699      	mov	r9, r3
    541c:	0413      	lsls	r3, r2, #16
    541e:	d400      	bmi.n	5422 <bloomFilterAddressCheck+0x74a>
    5420:	464d      	mov	r5, r9
    5422:	466f      	mov	r7, sp
    5424:	b2aa      	uxth	r2, r5
    5426:	0053      	lsls	r3, r2, #1
    5428:	4a14      	ldr	r2, [pc, #80]	; (547c <bloomFilterAddressCheck+0x7a4>)
    542a:	405a      	eors	r2, r3
    542c:	006b      	lsls	r3, r5, #1
    542e:	82bb      	strh	r3, [r7, #20]
    5430:	8abb      	ldrh	r3, [r7, #20]
    5432:	b292      	uxth	r2, r2
    5434:	4699      	mov	r9, r3
    5436:	042b      	lsls	r3, r5, #16
    5438:	d400      	bmi.n	543c <bloomFilterAddressCheck+0x764>
    543a:	464a      	mov	r2, r9
    543c:	b295      	uxth	r5, r2
    543e:	006b      	lsls	r3, r5, #1
    5440:	4d0e      	ldr	r5, [pc, #56]	; (547c <bloomFilterAddressCheck+0x7a4>)
    5442:	405d      	eors	r5, r3
    5444:	b2ab      	uxth	r3, r5
    5446:	0055      	lsls	r5, r2, #1
    5448:	4699      	mov	r9, r3
    544a:	b2ad      	uxth	r5, r5
    544c:	0413      	lsls	r3, r2, #16
    544e:	d501      	bpl.n	5454 <bloomFilterAddressCheck+0x77c>
    5450:	f000 fc70 	bl	5d34 <bloomFilterAddressCheck+0x105c>
    5454:	1c2a      	adds	r2, r5, #0
    5456:	b295      	uxth	r5, r2
    5458:	b213      	sxth	r3, r2
    545a:	001f      	movs	r7, r3
    545c:	006b      	lsls	r3, r5, #1
    545e:	4d07      	ldr	r5, [pc, #28]	; (547c <bloomFilterAddressCheck+0x7a4>)
    5460:	0052      	lsls	r2, r2, #1
    5462:	405d      	eors	r5, r3
    5464:	b2ab      	uxth	r3, r5
    5466:	9305      	str	r3, [sp, #20]
    5468:	b293      	uxth	r3, r2
    546a:	4699      	mov	r9, r3
    546c:	4663      	mov	r3, ip
    546e:	4a04      	ldr	r2, [pc, #16]	; (5480 <bloomFilterAddressCheck+0x7a8>)
    5470:	4645      	mov	r5, r8
    5472:	405a      	eors	r2, r3
    5474:	466b      	mov	r3, sp
    5476:	b292      	uxth	r2, r2
    5478:	8a1b      	ldrh	r3, [r3, #16]
    547a:	e003      	b.n	5484 <bloomFilterAddressCheck+0x7ac>
    547c:	00001021 	.word	0x00001021
    5480:	ffff8005 	.word	0xffff8005
    5484:	2d00      	cmp	r5, #0
    5486:	da01      	bge.n	548c <bloomFilterAddressCheck+0x7b4>
    5488:	f000 fc51 	bl	5d2e <bloomFilterAddressCheck+0x1056>
    548c:	b29d      	uxth	r5, r3
    548e:	4ae9      	ldr	r2, [pc, #932]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5490:	006d      	lsls	r5, r5, #1
    5492:	406a      	eors	r2, r5
    5494:	b212      	sxth	r2, r2
    5496:	b295      	uxth	r5, r2
    5498:	005a      	lsls	r2, r3, #1
    549a:	b292      	uxth	r2, r2
    549c:	041b      	lsls	r3, r3, #16
    549e:	d501      	bpl.n	54a4 <bloomFilterAddressCheck+0x7cc>
    54a0:	f000 fc42 	bl	5d28 <bloomFilterAddressCheck+0x1050>
    54a4:	4be3      	ldr	r3, [pc, #908]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    54a6:	b295      	uxth	r5, r2
    54a8:	006d      	lsls	r5, r5, #1
    54aa:	405d      	eors	r5, r3
    54ac:	0053      	lsls	r3, r2, #1
    54ae:	b2ad      	uxth	r5, r5
    54b0:	b29b      	uxth	r3, r3
    54b2:	0412      	lsls	r2, r2, #16
    54b4:	d501      	bpl.n	54ba <bloomFilterAddressCheck+0x7e2>
    54b6:	f000 fc34 	bl	5d22 <bloomFilterAddressCheck+0x104a>
    54ba:	4ade      	ldr	r2, [pc, #888]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    54bc:	b29d      	uxth	r5, r3
    54be:	006d      	lsls	r5, r5, #1
    54c0:	4055      	eors	r5, r2
    54c2:	005a      	lsls	r2, r3, #1
    54c4:	b2ad      	uxth	r5, r5
    54c6:	b292      	uxth	r2, r2
    54c8:	041b      	lsls	r3, r3, #16
    54ca:	d501      	bpl.n	54d0 <bloomFilterAddressCheck+0x7f8>
    54cc:	f000 fc26 	bl	5d1c <bloomFilterAddressCheck+0x1044>
    54d0:	4bd8      	ldr	r3, [pc, #864]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    54d2:	b295      	uxth	r5, r2
    54d4:	006d      	lsls	r5, r5, #1
    54d6:	405d      	eors	r5, r3
    54d8:	0053      	lsls	r3, r2, #1
    54da:	b2ad      	uxth	r5, r5
    54dc:	b29b      	uxth	r3, r3
    54de:	0412      	lsls	r2, r2, #16
    54e0:	d501      	bpl.n	54e6 <bloomFilterAddressCheck+0x80e>
    54e2:	f000 fc18 	bl	5d16 <bloomFilterAddressCheck+0x103e>
    54e6:	4ad3      	ldr	r2, [pc, #844]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    54e8:	b29d      	uxth	r5, r3
    54ea:	006d      	lsls	r5, r5, #1
    54ec:	4055      	eors	r5, r2
    54ee:	005a      	lsls	r2, r3, #1
    54f0:	b2ad      	uxth	r5, r5
    54f2:	b292      	uxth	r2, r2
    54f4:	041b      	lsls	r3, r3, #16
    54f6:	d501      	bpl.n	54fc <bloomFilterAddressCheck+0x824>
    54f8:	f000 fc0a 	bl	5d10 <bloomFilterAddressCheck+0x1038>
    54fc:	4bcd      	ldr	r3, [pc, #820]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    54fe:	b295      	uxth	r5, r2
    5500:	006d      	lsls	r5, r5, #1
    5502:	405d      	eors	r5, r3
    5504:	0053      	lsls	r3, r2, #1
    5506:	b2ad      	uxth	r5, r5
    5508:	b29b      	uxth	r3, r3
    550a:	0412      	lsls	r2, r2, #16
    550c:	d500      	bpl.n	5510 <bloomFilterAddressCheck+0x838>
    550e:	e3c1      	b.n	5c94 <bloomFilterAddressCheck+0xfbc>
    5510:	b29a      	uxth	r2, r3
    5512:	4dc8      	ldr	r5, [pc, #800]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5514:	0052      	lsls	r2, r2, #1
    5516:	4055      	eors	r5, r2
    5518:	005a      	lsls	r2, r3, #1
    551a:	b2ad      	uxth	r5, r5
    551c:	b292      	uxth	r2, r2
    551e:	041b      	lsls	r3, r3, #16
    5520:	d500      	bpl.n	5524 <bloomFilterAddressCheck+0x84c>
    5522:	e3b5      	b.n	5c90 <bloomFilterAddressCheck+0xfb8>
    5524:	4054      	eors	r4, r2
    5526:	b224      	sxth	r4, r4
    5528:	b2a2      	uxth	r2, r4
    552a:	4bc2      	ldr	r3, [pc, #776]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    552c:	0052      	lsls	r2, r2, #1
    552e:	4053      	eors	r3, r2
    5530:	b29d      	uxth	r5, r3
    5532:	b293      	uxth	r3, r2
    5534:	2c00      	cmp	r4, #0
    5536:	da00      	bge.n	553a <bloomFilterAddressCheck+0x862>
    5538:	e3a8      	b.n	5c8c <bloomFilterAddressCheck+0xfb4>
    553a:	4abe      	ldr	r2, [pc, #760]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    553c:	b29c      	uxth	r4, r3
    553e:	0064      	lsls	r4, r4, #1
    5540:	4054      	eors	r4, r2
    5542:	005a      	lsls	r2, r3, #1
    5544:	b2a4      	uxth	r4, r4
    5546:	b292      	uxth	r2, r2
    5548:	041b      	lsls	r3, r3, #16
    554a:	d500      	bpl.n	554e <bloomFilterAddressCheck+0x876>
    554c:	e39c      	b.n	5c88 <bloomFilterAddressCheck+0xfb0>
    554e:	4bb9      	ldr	r3, [pc, #740]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5550:	b294      	uxth	r4, r2
    5552:	0064      	lsls	r4, r4, #1
    5554:	405c      	eors	r4, r3
    5556:	0053      	lsls	r3, r2, #1
    5558:	b2a4      	uxth	r4, r4
    555a:	b29b      	uxth	r3, r3
    555c:	0412      	lsls	r2, r2, #16
    555e:	d500      	bpl.n	5562 <bloomFilterAddressCheck+0x88a>
    5560:	e390      	b.n	5c84 <bloomFilterAddressCheck+0xfac>
    5562:	4ab4      	ldr	r2, [pc, #720]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5564:	b29c      	uxth	r4, r3
    5566:	0064      	lsls	r4, r4, #1
    5568:	4054      	eors	r4, r2
    556a:	005a      	lsls	r2, r3, #1
    556c:	b2a4      	uxth	r4, r4
    556e:	b292      	uxth	r2, r2
    5570:	041b      	lsls	r3, r3, #16
    5572:	d500      	bpl.n	5576 <bloomFilterAddressCheck+0x89e>
    5574:	e384      	b.n	5c80 <bloomFilterAddressCheck+0xfa8>
    5576:	4baf      	ldr	r3, [pc, #700]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5578:	b294      	uxth	r4, r2
    557a:	0064      	lsls	r4, r4, #1
    557c:	405c      	eors	r4, r3
    557e:	0053      	lsls	r3, r2, #1
    5580:	b2a4      	uxth	r4, r4
    5582:	b29b      	uxth	r3, r3
    5584:	0412      	lsls	r2, r2, #16
    5586:	d500      	bpl.n	558a <bloomFilterAddressCheck+0x8b2>
    5588:	e378      	b.n	5c7c <bloomFilterAddressCheck+0xfa4>
    558a:	4aaa      	ldr	r2, [pc, #680]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    558c:	b29c      	uxth	r4, r3
    558e:	0064      	lsls	r4, r4, #1
    5590:	4054      	eors	r4, r2
    5592:	005a      	lsls	r2, r3, #1
    5594:	b2a4      	uxth	r4, r4
    5596:	b292      	uxth	r2, r2
    5598:	041b      	lsls	r3, r3, #16
    559a:	d500      	bpl.n	559e <bloomFilterAddressCheck+0x8c6>
    559c:	e36c      	b.n	5c78 <bloomFilterAddressCheck+0xfa0>
    559e:	4ba5      	ldr	r3, [pc, #660]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    55a0:	b294      	uxth	r4, r2
    55a2:	0064      	lsls	r4, r4, #1
    55a4:	405c      	eors	r4, r3
    55a6:	0053      	lsls	r3, r2, #1
    55a8:	b2a4      	uxth	r4, r4
    55aa:	b29b      	uxth	r3, r3
    55ac:	0412      	lsls	r2, r2, #16
    55ae:	d500      	bpl.n	55b2 <bloomFilterAddressCheck+0x8da>
    55b0:	e360      	b.n	5c74 <bloomFilterAddressCheck+0xf9c>
    55b2:	b29a      	uxth	r2, r3
    55b4:	4c9f      	ldr	r4, [pc, #636]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    55b6:	0052      	lsls	r2, r2, #1
    55b8:	4054      	eors	r4, r2
    55ba:	005a      	lsls	r2, r3, #1
    55bc:	b2a4      	uxth	r4, r4
    55be:	b292      	uxth	r2, r2
    55c0:	041b      	lsls	r3, r3, #16
    55c2:	d500      	bpl.n	55c6 <bloomFilterAddressCheck+0x8ee>
    55c4:	e354      	b.n	5c70 <bloomFilterAddressCheck+0xf98>
    55c6:	4050      	eors	r0, r2
    55c8:	b200      	sxth	r0, r0
    55ca:	b282      	uxth	r2, r0
    55cc:	4b99      	ldr	r3, [pc, #612]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    55ce:	0052      	lsls	r2, r2, #1
    55d0:	4053      	eors	r3, r2
    55d2:	b29c      	uxth	r4, r3
    55d4:	b293      	uxth	r3, r2
    55d6:	2800      	cmp	r0, #0
    55d8:	da00      	bge.n	55dc <bloomFilterAddressCheck+0x904>
    55da:	e347      	b.n	5c6c <bloomFilterAddressCheck+0xf94>
    55dc:	4a95      	ldr	r2, [pc, #596]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    55de:	b298      	uxth	r0, r3
    55e0:	0040      	lsls	r0, r0, #1
    55e2:	4050      	eors	r0, r2
    55e4:	005a      	lsls	r2, r3, #1
    55e6:	b280      	uxth	r0, r0
    55e8:	b292      	uxth	r2, r2
    55ea:	041b      	lsls	r3, r3, #16
    55ec:	d500      	bpl.n	55f0 <bloomFilterAddressCheck+0x918>
    55ee:	e33b      	b.n	5c68 <bloomFilterAddressCheck+0xf90>
    55f0:	4b90      	ldr	r3, [pc, #576]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    55f2:	b290      	uxth	r0, r2
    55f4:	0040      	lsls	r0, r0, #1
    55f6:	4058      	eors	r0, r3
    55f8:	0053      	lsls	r3, r2, #1
    55fa:	b280      	uxth	r0, r0
    55fc:	b29b      	uxth	r3, r3
    55fe:	0412      	lsls	r2, r2, #16
    5600:	d500      	bpl.n	5604 <bloomFilterAddressCheck+0x92c>
    5602:	e32f      	b.n	5c64 <bloomFilterAddressCheck+0xf8c>
    5604:	4a8b      	ldr	r2, [pc, #556]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5606:	b298      	uxth	r0, r3
    5608:	0040      	lsls	r0, r0, #1
    560a:	4050      	eors	r0, r2
    560c:	005a      	lsls	r2, r3, #1
    560e:	b280      	uxth	r0, r0
    5610:	b292      	uxth	r2, r2
    5612:	041b      	lsls	r3, r3, #16
    5614:	d500      	bpl.n	5618 <bloomFilterAddressCheck+0x940>
    5616:	e323      	b.n	5c60 <bloomFilterAddressCheck+0xf88>
    5618:	4b86      	ldr	r3, [pc, #536]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    561a:	b290      	uxth	r0, r2
    561c:	0040      	lsls	r0, r0, #1
    561e:	4058      	eors	r0, r3
    5620:	0053      	lsls	r3, r2, #1
    5622:	b280      	uxth	r0, r0
    5624:	b29b      	uxth	r3, r3
    5626:	0412      	lsls	r2, r2, #16
    5628:	d500      	bpl.n	562c <bloomFilterAddressCheck+0x954>
    562a:	e317      	b.n	5c5c <bloomFilterAddressCheck+0xf84>
    562c:	4a81      	ldr	r2, [pc, #516]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    562e:	b298      	uxth	r0, r3
    5630:	0040      	lsls	r0, r0, #1
    5632:	4050      	eors	r0, r2
    5634:	005a      	lsls	r2, r3, #1
    5636:	b280      	uxth	r0, r0
    5638:	b292      	uxth	r2, r2
    563a:	041b      	lsls	r3, r3, #16
    563c:	d500      	bpl.n	5640 <bloomFilterAddressCheck+0x968>
    563e:	e30b      	b.n	5c58 <bloomFilterAddressCheck+0xf80>
    5640:	4b7c      	ldr	r3, [pc, #496]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5642:	b290      	uxth	r0, r2
    5644:	0040      	lsls	r0, r0, #1
    5646:	4058      	eors	r0, r3
    5648:	0053      	lsls	r3, r2, #1
    564a:	b280      	uxth	r0, r0
    564c:	b29b      	uxth	r3, r3
    564e:	0412      	lsls	r2, r2, #16
    5650:	d500      	bpl.n	5654 <bloomFilterAddressCheck+0x97c>
    5652:	e2ff      	b.n	5c54 <bloomFilterAddressCheck+0xf7c>
    5654:	b29a      	uxth	r2, r3
    5656:	4877      	ldr	r0, [pc, #476]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5658:	0052      	lsls	r2, r2, #1
    565a:	4050      	eors	r0, r2
    565c:	005a      	lsls	r2, r3, #1
    565e:	b280      	uxth	r0, r0
    5660:	b292      	uxth	r2, r2
    5662:	041b      	lsls	r3, r3, #16
    5664:	d500      	bpl.n	5668 <bloomFilterAddressCheck+0x990>
    5666:	e2f3      	b.n	5c50 <bloomFilterAddressCheck+0xf78>
    5668:	4051      	eors	r1, r2
    566a:	b209      	sxth	r1, r1
    566c:	b28b      	uxth	r3, r1
    566e:	4a71      	ldr	r2, [pc, #452]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5670:	005b      	lsls	r3, r3, #1
    5672:	405a      	eors	r2, r3
    5674:	b292      	uxth	r2, r2
    5676:	2900      	cmp	r1, #0
    5678:	da00      	bge.n	567c <bloomFilterAddressCheck+0x9a4>
    567a:	e2e7      	b.n	5c4c <bloomFilterAddressCheck+0xf74>
    567c:	4a6d      	ldr	r2, [pc, #436]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    567e:	b299      	uxth	r1, r3
    5680:	0049      	lsls	r1, r1, #1
    5682:	4051      	eors	r1, r2
    5684:	b289      	uxth	r1, r1
    5686:	005a      	lsls	r2, r3, #1
    5688:	041b      	lsls	r3, r3, #16
    568a:	d500      	bpl.n	568e <bloomFilterAddressCheck+0x9b6>
    568c:	e2dc      	b.n	5c48 <bloomFilterAddressCheck+0xf70>
    568e:	b291      	uxth	r1, r2
    5690:	4b68      	ldr	r3, [pc, #416]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5692:	0049      	lsls	r1, r1, #1
    5694:	404b      	eors	r3, r1
    5696:	b29b      	uxth	r3, r3
    5698:	0051      	lsls	r1, r2, #1
    569a:	0412      	lsls	r2, r2, #16
    569c:	d500      	bpl.n	56a0 <bloomFilterAddressCheck+0x9c8>
    569e:	e2d1      	b.n	5c44 <bloomFilterAddressCheck+0xf6c>
    56a0:	b28a      	uxth	r2, r1
    56a2:	4b64      	ldr	r3, [pc, #400]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    56a4:	0052      	lsls	r2, r2, #1
    56a6:	4053      	eors	r3, r2
    56a8:	b29b      	uxth	r3, r3
    56aa:	004a      	lsls	r2, r1, #1
    56ac:	0409      	lsls	r1, r1, #16
    56ae:	d500      	bpl.n	56b2 <bloomFilterAddressCheck+0x9da>
    56b0:	e2c6      	b.n	5c40 <bloomFilterAddressCheck+0xf68>
    56b2:	b291      	uxth	r1, r2
    56b4:	4b5f      	ldr	r3, [pc, #380]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    56b6:	0049      	lsls	r1, r1, #1
    56b8:	404b      	eors	r3, r1
    56ba:	b29b      	uxth	r3, r3
    56bc:	0051      	lsls	r1, r2, #1
    56be:	0412      	lsls	r2, r2, #16
    56c0:	d500      	bpl.n	56c4 <bloomFilterAddressCheck+0x9ec>
    56c2:	e2bb      	b.n	5c3c <bloomFilterAddressCheck+0xf64>
    56c4:	b28a      	uxth	r2, r1
    56c6:	4b5b      	ldr	r3, [pc, #364]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    56c8:	0052      	lsls	r2, r2, #1
    56ca:	4053      	eors	r3, r2
    56cc:	b29b      	uxth	r3, r3
    56ce:	004a      	lsls	r2, r1, #1
    56d0:	0409      	lsls	r1, r1, #16
    56d2:	d500      	bpl.n	56d6 <bloomFilterAddressCheck+0x9fe>
    56d4:	e2b0      	b.n	5c38 <bloomFilterAddressCheck+0xf60>
    56d6:	b291      	uxth	r1, r2
    56d8:	4b56      	ldr	r3, [pc, #344]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    56da:	0049      	lsls	r1, r1, #1
    56dc:	404b      	eors	r3, r1
    56de:	b29b      	uxth	r3, r3
    56e0:	0051      	lsls	r1, r2, #1
    56e2:	0412      	lsls	r2, r2, #16
    56e4:	d500      	bpl.n	56e8 <bloomFilterAddressCheck+0xa10>
    56e6:	e2a5      	b.n	5c34 <bloomFilterAddressCheck+0xf5c>
    56e8:	b28a      	uxth	r2, r1
    56ea:	4b52      	ldr	r3, [pc, #328]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    56ec:	0052      	lsls	r2, r2, #1
    56ee:	4053      	eors	r3, r2
    56f0:	b29b      	uxth	r3, r3
    56f2:	004a      	lsls	r2, r1, #1
    56f4:	0409      	lsls	r1, r1, #16
    56f6:	d500      	bpl.n	56fa <bloomFilterAddressCheck+0xa22>
    56f8:	e29a      	b.n	5c30 <bloomFilterAddressCheck+0xf58>
    56fa:	465b      	mov	r3, fp
    56fc:	4053      	eors	r3, r2
    56fe:	b21a      	sxth	r2, r3
    5700:	b293      	uxth	r3, r2
    5702:	494c      	ldr	r1, [pc, #304]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5704:	005b      	lsls	r3, r3, #1
    5706:	4059      	eors	r1, r3
    5708:	b289      	uxth	r1, r1
    570a:	2a00      	cmp	r2, #0
    570c:	da00      	bge.n	5710 <bloomFilterAddressCheck+0xa38>
    570e:	e28d      	b.n	5c2c <bloomFilterAddressCheck+0xf54>
    5710:	b299      	uxth	r1, r3
    5712:	4a48      	ldr	r2, [pc, #288]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5714:	0049      	lsls	r1, r1, #1
    5716:	404a      	eors	r2, r1
    5718:	b292      	uxth	r2, r2
    571a:	0059      	lsls	r1, r3, #1
    571c:	041b      	lsls	r3, r3, #16
    571e:	d500      	bpl.n	5722 <bloomFilterAddressCheck+0xa4a>
    5720:	e282      	b.n	5c28 <bloomFilterAddressCheck+0xf50>
    5722:	b28a      	uxth	r2, r1
    5724:	4b43      	ldr	r3, [pc, #268]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5726:	0052      	lsls	r2, r2, #1
    5728:	4053      	eors	r3, r2
    572a:	b29b      	uxth	r3, r3
    572c:	004a      	lsls	r2, r1, #1
    572e:	0409      	lsls	r1, r1, #16
    5730:	d500      	bpl.n	5734 <bloomFilterAddressCheck+0xa5c>
    5732:	e277      	b.n	5c24 <bloomFilterAddressCheck+0xf4c>
    5734:	b291      	uxth	r1, r2
    5736:	4b3f      	ldr	r3, [pc, #252]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5738:	0049      	lsls	r1, r1, #1
    573a:	404b      	eors	r3, r1
    573c:	b29b      	uxth	r3, r3
    573e:	0051      	lsls	r1, r2, #1
    5740:	0412      	lsls	r2, r2, #16
    5742:	d500      	bpl.n	5746 <bloomFilterAddressCheck+0xa6e>
    5744:	e26c      	b.n	5c20 <bloomFilterAddressCheck+0xf48>
    5746:	b28a      	uxth	r2, r1
    5748:	4b3a      	ldr	r3, [pc, #232]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    574a:	0052      	lsls	r2, r2, #1
    574c:	4053      	eors	r3, r2
    574e:	b29b      	uxth	r3, r3
    5750:	004a      	lsls	r2, r1, #1
    5752:	0409      	lsls	r1, r1, #16
    5754:	d500      	bpl.n	5758 <bloomFilterAddressCheck+0xa80>
    5756:	e261      	b.n	5c1c <bloomFilterAddressCheck+0xf44>
    5758:	b291      	uxth	r1, r2
    575a:	4b36      	ldr	r3, [pc, #216]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    575c:	0049      	lsls	r1, r1, #1
    575e:	404b      	eors	r3, r1
    5760:	b29b      	uxth	r3, r3
    5762:	0051      	lsls	r1, r2, #1
    5764:	0412      	lsls	r2, r2, #16
    5766:	d500      	bpl.n	576a <bloomFilterAddressCheck+0xa92>
    5768:	e242      	b.n	5bf0 <bloomFilterAddressCheck+0xf18>
    576a:	b28a      	uxth	r2, r1
    576c:	4b31      	ldr	r3, [pc, #196]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    576e:	0052      	lsls	r2, r2, #1
    5770:	4053      	eors	r3, r2
    5772:	b29b      	uxth	r3, r3
    5774:	004a      	lsls	r2, r1, #1
    5776:	0409      	lsls	r1, r1, #16
    5778:	d500      	bpl.n	577c <bloomFilterAddressCheck+0xaa4>
    577a:	e243      	b.n	5c04 <bloomFilterAddressCheck+0xf2c>
    577c:	b291      	uxth	r1, r2
    577e:	4b2d      	ldr	r3, [pc, #180]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5780:	0049      	lsls	r1, r1, #1
    5782:	404b      	eors	r3, r1
    5784:	b29b      	uxth	r3, r3
    5786:	0055      	lsls	r5, r2, #1
    5788:	0412      	lsls	r2, r2, #16
    578a:	d500      	bpl.n	578e <bloomFilterAddressCheck+0xab6>
    578c:	e244      	b.n	5c18 <bloomFilterAddressCheck+0xf40>
    578e:	9b01      	ldr	r3, [sp, #4]
    5790:	4a28      	ldr	r2, [pc, #160]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5792:	406b      	eors	r3, r5
    5794:	b21d      	sxth	r5, r3
    5796:	b2ab      	uxth	r3, r5
    5798:	005b      	lsls	r3, r3, #1
    579a:	405a      	eors	r2, r3
    579c:	b292      	uxth	r2, r2
    579e:	2d00      	cmp	r5, #0
    57a0:	da00      	bge.n	57a4 <bloomFilterAddressCheck+0xacc>
    57a2:	e2a7      	b.n	5cf4 <bloomFilterAddressCheck+0x101c>
    57a4:	b299      	uxth	r1, r3
    57a6:	4a23      	ldr	r2, [pc, #140]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    57a8:	0049      	lsls	r1, r1, #1
    57aa:	404a      	eors	r2, r1
    57ac:	b292      	uxth	r2, r2
    57ae:	0059      	lsls	r1, r3, #1
    57b0:	041b      	lsls	r3, r3, #16
    57b2:	d500      	bpl.n	57b6 <bloomFilterAddressCheck+0xade>
    57b4:	e29c      	b.n	5cf0 <bloomFilterAddressCheck+0x1018>
    57b6:	b28a      	uxth	r2, r1
    57b8:	4b1e      	ldr	r3, [pc, #120]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    57ba:	0052      	lsls	r2, r2, #1
    57bc:	4053      	eors	r3, r2
    57be:	b29b      	uxth	r3, r3
    57c0:	004a      	lsls	r2, r1, #1
    57c2:	0409      	lsls	r1, r1, #16
    57c4:	d500      	bpl.n	57c8 <bloomFilterAddressCheck+0xaf0>
    57c6:	e291      	b.n	5cec <bloomFilterAddressCheck+0x1014>
    57c8:	b291      	uxth	r1, r2
    57ca:	4b1a      	ldr	r3, [pc, #104]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    57cc:	0049      	lsls	r1, r1, #1
    57ce:	404b      	eors	r3, r1
    57d0:	b29b      	uxth	r3, r3
    57d2:	0051      	lsls	r1, r2, #1
    57d4:	0412      	lsls	r2, r2, #16
    57d6:	d500      	bpl.n	57da <bloomFilterAddressCheck+0xb02>
    57d8:	e286      	b.n	5ce8 <bloomFilterAddressCheck+0x1010>
    57da:	b28a      	uxth	r2, r1
    57dc:	4b15      	ldr	r3, [pc, #84]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    57de:	0052      	lsls	r2, r2, #1
    57e0:	4053      	eors	r3, r2
    57e2:	b29b      	uxth	r3, r3
    57e4:	004a      	lsls	r2, r1, #1
    57e6:	0409      	lsls	r1, r1, #16
    57e8:	d500      	bpl.n	57ec <bloomFilterAddressCheck+0xb14>
    57ea:	e27b      	b.n	5ce4 <bloomFilterAddressCheck+0x100c>
    57ec:	b291      	uxth	r1, r2
    57ee:	4b11      	ldr	r3, [pc, #68]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    57f0:	0049      	lsls	r1, r1, #1
    57f2:	404b      	eors	r3, r1
    57f4:	b29b      	uxth	r3, r3
    57f6:	0051      	lsls	r1, r2, #1
    57f8:	0412      	lsls	r2, r2, #16
    57fa:	d500      	bpl.n	57fe <bloomFilterAddressCheck+0xb26>
    57fc:	e270      	b.n	5ce0 <bloomFilterAddressCheck+0x1008>
    57fe:	b28a      	uxth	r2, r1
    5800:	4b0c      	ldr	r3, [pc, #48]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5802:	0052      	lsls	r2, r2, #1
    5804:	4053      	eors	r3, r2
    5806:	b29b      	uxth	r3, r3
    5808:	004a      	lsls	r2, r1, #1
    580a:	0409      	lsls	r1, r1, #16
    580c:	d500      	bpl.n	5810 <bloomFilterAddressCheck+0xb38>
    580e:	e265      	b.n	5cdc <bloomFilterAddressCheck+0x1004>
    5810:	b291      	uxth	r1, r2
    5812:	4b08      	ldr	r3, [pc, #32]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5814:	0049      	lsls	r1, r1, #1
    5816:	404b      	eors	r3, r1
    5818:	b29b      	uxth	r3, r3
    581a:	0055      	lsls	r5, r2, #1
    581c:	0412      	lsls	r2, r2, #16
    581e:	d500      	bpl.n	5822 <bloomFilterAddressCheck+0xb4a>
    5820:	e25a      	b.n	5cd8 <bloomFilterAddressCheck+0x1000>
    5822:	9b02      	ldr	r3, [sp, #8]
    5824:	4a03      	ldr	r2, [pc, #12]	; (5834 <bloomFilterAddressCheck+0xb5c>)
    5826:	406b      	eors	r3, r5
    5828:	b21d      	sxth	r5, r3
    582a:	b2ab      	uxth	r3, r5
    582c:	005b      	lsls	r3, r3, #1
    582e:	405a      	eors	r2, r3
    5830:	b292      	uxth	r2, r2
    5832:	e001      	b.n	5838 <bloomFilterAddressCheck+0xb60>
    5834:	ffff8005 	.word	0xffff8005
    5838:	2d00      	cmp	r5, #0
    583a:	da00      	bge.n	583e <bloomFilterAddressCheck+0xb66>
    583c:	e24a      	b.n	5cd4 <bloomFilterAddressCheck+0xffc>
    583e:	b299      	uxth	r1, r3
    5840:	4ae8      	ldr	r2, [pc, #928]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    5842:	0049      	lsls	r1, r1, #1
    5844:	404a      	eors	r2, r1
    5846:	b292      	uxth	r2, r2
    5848:	0059      	lsls	r1, r3, #1
    584a:	041b      	lsls	r3, r3, #16
    584c:	d500      	bpl.n	5850 <bloomFilterAddressCheck+0xb78>
    584e:	e23f      	b.n	5cd0 <bloomFilterAddressCheck+0xff8>
    5850:	b28a      	uxth	r2, r1
    5852:	4be4      	ldr	r3, [pc, #912]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    5854:	0052      	lsls	r2, r2, #1
    5856:	4053      	eors	r3, r2
    5858:	b29b      	uxth	r3, r3
    585a:	004a      	lsls	r2, r1, #1
    585c:	0409      	lsls	r1, r1, #16
    585e:	d500      	bpl.n	5862 <bloomFilterAddressCheck+0xb8a>
    5860:	e234      	b.n	5ccc <bloomFilterAddressCheck+0xff4>
    5862:	b291      	uxth	r1, r2
    5864:	4bdf      	ldr	r3, [pc, #892]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    5866:	0049      	lsls	r1, r1, #1
    5868:	404b      	eors	r3, r1
    586a:	b29b      	uxth	r3, r3
    586c:	0051      	lsls	r1, r2, #1
    586e:	0412      	lsls	r2, r2, #16
    5870:	d500      	bpl.n	5874 <bloomFilterAddressCheck+0xb9c>
    5872:	e229      	b.n	5cc8 <bloomFilterAddressCheck+0xff0>
    5874:	b28a      	uxth	r2, r1
    5876:	4bdb      	ldr	r3, [pc, #876]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    5878:	0052      	lsls	r2, r2, #1
    587a:	4053      	eors	r3, r2
    587c:	b29b      	uxth	r3, r3
    587e:	004a      	lsls	r2, r1, #1
    5880:	0409      	lsls	r1, r1, #16
    5882:	d500      	bpl.n	5886 <bloomFilterAddressCheck+0xbae>
    5884:	e21e      	b.n	5cc4 <bloomFilterAddressCheck+0xfec>
    5886:	b291      	uxth	r1, r2
    5888:	4bd6      	ldr	r3, [pc, #856]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    588a:	0049      	lsls	r1, r1, #1
    588c:	404b      	eors	r3, r1
    588e:	b29b      	uxth	r3, r3
    5890:	0051      	lsls	r1, r2, #1
    5892:	0412      	lsls	r2, r2, #16
    5894:	d500      	bpl.n	5898 <bloomFilterAddressCheck+0xbc0>
    5896:	e1ff      	b.n	5c98 <bloomFilterAddressCheck+0xfc0>
    5898:	b28a      	uxth	r2, r1
    589a:	4bd2      	ldr	r3, [pc, #840]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    589c:	0052      	lsls	r2, r2, #1
    589e:	4053      	eors	r3, r2
    58a0:	b29b      	uxth	r3, r3
    58a2:	0048      	lsls	r0, r1, #1
    58a4:	040a      	lsls	r2, r1, #16
    58a6:	d500      	bpl.n	58aa <bloomFilterAddressCheck+0xbd2>
    58a8:	e200      	b.n	5cac <bloomFilterAddressCheck+0xfd4>
    58aa:	b282      	uxth	r2, r0
    58ac:	4bcd      	ldr	r3, [pc, #820]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    58ae:	0052      	lsls	r2, r2, #1
    58b0:	4053      	eors	r3, r2
    58b2:	b29b      	uxth	r3, r3
    58b4:	0042      	lsls	r2, r0, #1
    58b6:	0401      	lsls	r1, r0, #16
    58b8:	d500      	bpl.n	58bc <bloomFilterAddressCheck+0xbe4>
    58ba:	e201      	b.n	5cc0 <bloomFilterAddressCheck+0xfe8>
    58bc:	4653      	mov	r3, sl
    58be:	4053      	eors	r3, r2
    58c0:	b21a      	sxth	r2, r3
    58c2:	b291      	uxth	r1, r2
    58c4:	4bc7      	ldr	r3, [pc, #796]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    58c6:	0049      	lsls	r1, r1, #1
    58c8:	404b      	eors	r3, r1
    58ca:	b298      	uxth	r0, r3
    58cc:	b28b      	uxth	r3, r1
    58ce:	2a00      	cmp	r2, #0
    58d0:	da00      	bge.n	58d4 <bloomFilterAddressCheck+0xbfc>
    58d2:	e21b      	b.n	5d0c <bloomFilterAddressCheck+0x1034>
    58d4:	4ac3      	ldr	r2, [pc, #780]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    58d6:	b299      	uxth	r1, r3
    58d8:	0049      	lsls	r1, r1, #1
    58da:	4051      	eors	r1, r2
    58dc:	005a      	lsls	r2, r3, #1
    58de:	b289      	uxth	r1, r1
    58e0:	b292      	uxth	r2, r2
    58e2:	041b      	lsls	r3, r3, #16
    58e4:	d500      	bpl.n	58e8 <bloomFilterAddressCheck+0xc10>
    58e6:	e20f      	b.n	5d08 <bloomFilterAddressCheck+0x1030>
    58e8:	4bbe      	ldr	r3, [pc, #760]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    58ea:	b291      	uxth	r1, r2
    58ec:	0049      	lsls	r1, r1, #1
    58ee:	4059      	eors	r1, r3
    58f0:	0053      	lsls	r3, r2, #1
    58f2:	b289      	uxth	r1, r1
    58f4:	b29b      	uxth	r3, r3
    58f6:	0412      	lsls	r2, r2, #16
    58f8:	d500      	bpl.n	58fc <bloomFilterAddressCheck+0xc24>
    58fa:	e203      	b.n	5d04 <bloomFilterAddressCheck+0x102c>
    58fc:	4ab9      	ldr	r2, [pc, #740]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    58fe:	b299      	uxth	r1, r3
    5900:	0049      	lsls	r1, r1, #1
    5902:	4051      	eors	r1, r2
    5904:	005a      	lsls	r2, r3, #1
    5906:	b289      	uxth	r1, r1
    5908:	b292      	uxth	r2, r2
    590a:	041b      	lsls	r3, r3, #16
    590c:	d500      	bpl.n	5910 <bloomFilterAddressCheck+0xc38>
    590e:	e1f7      	b.n	5d00 <bloomFilterAddressCheck+0x1028>
    5910:	4bb4      	ldr	r3, [pc, #720]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    5912:	b291      	uxth	r1, r2
    5914:	0049      	lsls	r1, r1, #1
    5916:	4059      	eors	r1, r3
    5918:	0053      	lsls	r3, r2, #1
    591a:	b289      	uxth	r1, r1
    591c:	b29b      	uxth	r3, r3
    591e:	0412      	lsls	r2, r2, #16
    5920:	d500      	bpl.n	5924 <bloomFilterAddressCheck+0xc4c>
    5922:	e1eb      	b.n	5cfc <bloomFilterAddressCheck+0x1024>
    5924:	4aaf      	ldr	r2, [pc, #700]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    5926:	b299      	uxth	r1, r3
    5928:	0049      	lsls	r1, r1, #1
    592a:	4051      	eors	r1, r2
    592c:	005a      	lsls	r2, r3, #1
    592e:	b289      	uxth	r1, r1
    5930:	b292      	uxth	r2, r2
    5932:	041b      	lsls	r3, r3, #16
    5934:	d500      	bpl.n	5938 <bloomFilterAddressCheck+0xc60>
    5936:	e1df      	b.n	5cf8 <bloomFilterAddressCheck+0x1020>
    5938:	b293      	uxth	r3, r2
    593a:	4caa      	ldr	r4, [pc, #680]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    593c:	005b      	lsls	r3, r3, #1
    593e:	405c      	eors	r4, r3
    5940:	b2a1      	uxth	r1, r4
    5942:	0054      	lsls	r4, r2, #1
    5944:	b2a4      	uxth	r4, r4
    5946:	0413      	lsls	r3, r2, #16
    5948:	d500      	bpl.n	594c <bloomFilterAddressCheck+0xc74>
    594a:	e149      	b.n	5be0 <bloomFilterAddressCheck+0xf08>
    594c:	b223      	sxth	r3, r4
    594e:	b2a2      	uxth	r2, r4
    5950:	469b      	mov	fp, r3
    5952:	4ba4      	ldr	r3, [pc, #656]	; (5be4 <bloomFilterAddressCheck+0xf0c>)
    5954:	0052      	lsls	r2, r2, #1
    5956:	4053      	eors	r3, r2
    5958:	00f5      	lsls	r5, r6, #3
    595a:	b29b      	uxth	r3, r3
    595c:	0064      	lsls	r4, r4, #1
    595e:	3d01      	subs	r5, #1
    5960:	4698      	mov	r8, r3
    5962:	b2a4      	uxth	r4, r4
    5964:	b2ed      	uxtb	r5, r5
    5966:	2f00      	cmp	r7, #0
    5968:	da00      	bge.n	596c <bloomFilterAddressCheck+0xc94>
    596a:	e136      	b.n	5bda <bloomFilterAddressCheck+0xf02>
    596c:	4648      	mov	r0, r9
    596e:	4b9e      	ldr	r3, [pc, #632]	; (5be8 <bloomFilterAddressCheck+0xf10>)
    5970:	b280      	uxth	r0, r0
    5972:	0029      	movs	r1, r5
    5974:	469a      	mov	sl, r3
    5976:	4798      	blx	r3
    5978:	465b      	mov	r3, fp
    597a:	4689      	mov	r9, r1
    597c:	2b00      	cmp	r3, #0
    597e:	da00      	bge.n	5982 <bloomFilterAddressCheck+0xcaa>
    5980:	e129      	b.n	5bd6 <bloomFilterAddressCheck+0xefe>
    5982:	b2a0      	uxth	r0, r4
    5984:	0029      	movs	r1, r5
    5986:	47d0      	blx	sl
    5988:	b2cb      	uxtb	r3, r1
    598a:	08db      	lsrs	r3, r3, #3
    598c:	9f03      	ldr	r7, [sp, #12]
    598e:	3301      	adds	r3, #1
    5990:	1af3      	subs	r3, r6, r3
    5992:	466a      	mov	r2, sp
    5994:	5cf8      	ldrb	r0, [r7, r3]
    5996:	464b      	mov	r3, r9
    5998:	7113      	strb	r3, [r2, #4]
    599a:	7913      	ldrb	r3, [r2, #4]
    599c:	2201      	movs	r2, #1
    599e:	08db      	lsrs	r3, r3, #3
    59a0:	3301      	adds	r3, #1
    59a2:	1af6      	subs	r6, r6, r3
    59a4:	2407      	movs	r4, #7
    59a6:	464b      	mov	r3, r9
    59a8:	0015      	movs	r5, r2
    59aa:	4023      	ands	r3, r4
    59ac:	409d      	lsls	r5, r3
    59ae:	5dbb      	ldrb	r3, [r7, r6]
    59b0:	421d      	tst	r5, r3
    59b2:	d006      	beq.n	59c2 <bloomFilterAddressCheck+0xcea>
    59b4:	4021      	ands	r1, r4
    59b6:	408a      	lsls	r2, r1
    59b8:	4002      	ands	r2, r0
    59ba:	1e50      	subs	r0, r2, #1
    59bc:	4182      	sbcs	r2, r0
    59be:	b2d3      	uxtb	r3, r2
    59c0:	9300      	str	r3, [sp, #0]
    59c2:	9800      	ldr	r0, [sp, #0]
    59c4:	b007      	add	sp, #28
    59c6:	bc3c      	pop	{r2, r3, r4, r5}
    59c8:	4690      	mov	r8, r2
    59ca:	4699      	mov	r9, r3
    59cc:	46a2      	mov	sl, r4
    59ce:	46ab      	mov	fp, r5
    59d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59d2:	1c1a      	adds	r2, r3, #0
    59d4:	e4ef      	b.n	53b6 <bloomFilterAddressCheck+0x6de>
    59d6:	1c08      	adds	r0, r1, #0
    59d8:	f7ff f9a2 	bl	4d20 <bloomFilterAddressCheck+0x48>
    59dc:	1c0c      	adds	r4, r1, #0
    59de:	b2a0      	uxth	r0, r4
    59e0:	4982      	ldr	r1, [pc, #520]	; (5bec <bloomFilterAddressCheck+0xf14>)
    59e2:	0040      	lsls	r0, r0, #1
    59e4:	4041      	eors	r1, r0
    59e6:	b289      	uxth	r1, r1
    59e8:	0060      	lsls	r0, r4, #1
    59ea:	0423      	lsls	r3, r4, #16
    59ec:	d401      	bmi.n	59f2 <bloomFilterAddressCheck+0xd1a>
    59ee:	f7ff f9ac 	bl	4d4a <bloomFilterAddressCheck+0x72>
    59f2:	1c08      	adds	r0, r1, #0
    59f4:	b284      	uxth	r4, r0
    59f6:	497d      	ldr	r1, [pc, #500]	; (5bec <bloomFilterAddressCheck+0xf14>)
    59f8:	0064      	lsls	r4, r4, #1
    59fa:	4061      	eors	r1, r4
    59fc:	b289      	uxth	r1, r1
    59fe:	0044      	lsls	r4, r0, #1
    5a00:	0403      	lsls	r3, r0, #16
    5a02:	d401      	bmi.n	5a08 <bloomFilterAddressCheck+0xd30>
    5a04:	f7ff f9ab 	bl	4d5e <bloomFilterAddressCheck+0x86>
    5a08:	1c0c      	adds	r4, r1, #0
    5a0a:	b2a0      	uxth	r0, r4
    5a0c:	4977      	ldr	r1, [pc, #476]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5a0e:	0040      	lsls	r0, r0, #1
    5a10:	4041      	eors	r1, r0
    5a12:	b289      	uxth	r1, r1
    5a14:	0060      	lsls	r0, r4, #1
    5a16:	0423      	lsls	r3, r4, #16
    5a18:	d401      	bmi.n	5a1e <bloomFilterAddressCheck+0xd46>
    5a1a:	f7ff f9aa 	bl	4d72 <bloomFilterAddressCheck+0x9a>
    5a1e:	1c08      	adds	r0, r1, #0
    5a20:	b284      	uxth	r4, r0
    5a22:	4972      	ldr	r1, [pc, #456]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5a24:	0064      	lsls	r4, r4, #1
    5a26:	4061      	eors	r1, r4
    5a28:	b289      	uxth	r1, r1
    5a2a:	0044      	lsls	r4, r0, #1
    5a2c:	0403      	lsls	r3, r0, #16
    5a2e:	d401      	bmi.n	5a34 <bloomFilterAddressCheck+0xd5c>
    5a30:	f7ff f9a9 	bl	4d86 <bloomFilterAddressCheck+0xae>
    5a34:	1c0c      	adds	r4, r1, #0
    5a36:	b2a0      	uxth	r0, r4
    5a38:	496c      	ldr	r1, [pc, #432]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5a3a:	0040      	lsls	r0, r0, #1
    5a3c:	4041      	eors	r1, r0
    5a3e:	b289      	uxth	r1, r1
    5a40:	0060      	lsls	r0, r4, #1
    5a42:	0423      	lsls	r3, r4, #16
    5a44:	d401      	bmi.n	5a4a <bloomFilterAddressCheck+0xd72>
    5a46:	f7ff f9a8 	bl	4d9a <bloomFilterAddressCheck+0xc2>
    5a4a:	1c08      	adds	r0, r1, #0
    5a4c:	f7ff f9a5 	bl	4d9a <bloomFilterAddressCheck+0xc2>
    5a50:	1c0d      	adds	r5, r1, #0
    5a52:	f7ff f9af 	bl	4db4 <bloomFilterAddressCheck+0xdc>
    5a56:	1c01      	adds	r1, r0, #0
    5a58:	b28d      	uxth	r5, r1
    5a5a:	4864      	ldr	r0, [pc, #400]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5a5c:	006d      	lsls	r5, r5, #1
    5a5e:	4045      	eors	r5, r0
    5a60:	b2ad      	uxth	r5, r5
    5a62:	0048      	lsls	r0, r1, #1
    5a64:	040b      	lsls	r3, r1, #16
    5a66:	d401      	bmi.n	5a6c <bloomFilterAddressCheck+0xd94>
    5a68:	f7ff f9b9 	bl	4dde <bloomFilterAddressCheck+0x106>
    5a6c:	1c28      	adds	r0, r5, #0
    5a6e:	b285      	uxth	r5, r0
    5a70:	495e      	ldr	r1, [pc, #376]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5a72:	006d      	lsls	r5, r5, #1
    5a74:	4069      	eors	r1, r5
    5a76:	b289      	uxth	r1, r1
    5a78:	0045      	lsls	r5, r0, #1
    5a7a:	0403      	lsls	r3, r0, #16
    5a7c:	d401      	bmi.n	5a82 <bloomFilterAddressCheck+0xdaa>
    5a7e:	f7ff f9b8 	bl	4df2 <bloomFilterAddressCheck+0x11a>
    5a82:	1c0d      	adds	r5, r1, #0
    5a84:	b2a8      	uxth	r0, r5
    5a86:	4959      	ldr	r1, [pc, #356]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5a88:	0040      	lsls	r0, r0, #1
    5a8a:	4041      	eors	r1, r0
    5a8c:	b289      	uxth	r1, r1
    5a8e:	0068      	lsls	r0, r5, #1
    5a90:	042b      	lsls	r3, r5, #16
    5a92:	d401      	bmi.n	5a98 <bloomFilterAddressCheck+0xdc0>
    5a94:	f7ff f9b7 	bl	4e06 <bloomFilterAddressCheck+0x12e>
    5a98:	1c08      	adds	r0, r1, #0
    5a9a:	b285      	uxth	r5, r0
    5a9c:	4953      	ldr	r1, [pc, #332]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5a9e:	006d      	lsls	r5, r5, #1
    5aa0:	4069      	eors	r1, r5
    5aa2:	b289      	uxth	r1, r1
    5aa4:	0045      	lsls	r5, r0, #1
    5aa6:	0403      	lsls	r3, r0, #16
    5aa8:	d401      	bmi.n	5aae <bloomFilterAddressCheck+0xdd6>
    5aaa:	f7ff f9b6 	bl	4e1a <bloomFilterAddressCheck+0x142>
    5aae:	1c0d      	adds	r5, r1, #0
    5ab0:	b2a8      	uxth	r0, r5
    5ab2:	494e      	ldr	r1, [pc, #312]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5ab4:	0040      	lsls	r0, r0, #1
    5ab6:	4041      	eors	r1, r0
    5ab8:	b289      	uxth	r1, r1
    5aba:	0068      	lsls	r0, r5, #1
    5abc:	042b      	lsls	r3, r5, #16
    5abe:	d401      	bmi.n	5ac4 <bloomFilterAddressCheck+0xdec>
    5ac0:	f7ff f9b5 	bl	4e2e <bloomFilterAddressCheck+0x156>
    5ac4:	1c08      	adds	r0, r1, #0
    5ac6:	b285      	uxth	r5, r0
    5ac8:	4948      	ldr	r1, [pc, #288]	; (5bec <bloomFilterAddressCheck+0xf14>)
    5aca:	006d      	lsls	r5, r5, #1
    5acc:	4069      	eors	r1, r5
    5ace:	b289      	uxth	r1, r1
    5ad0:	0045      	lsls	r5, r0, #1
    5ad2:	0403      	lsls	r3, r0, #16
    5ad4:	d401      	bmi.n	5ada <bloomFilterAddressCheck+0xe02>
    5ad6:	f7ff f9b4 	bl	4e42 <bloomFilterAddressCheck+0x16a>
    5ada:	1c0d      	adds	r5, r1, #0
    5adc:	f7ff f9b1 	bl	4e42 <bloomFilterAddressCheck+0x16a>
    5ae0:	4689      	mov	r9, r1
    5ae2:	f7ff f9bc 	bl	4e5e <bloomFilterAddressCheck+0x186>
    5ae6:	4651      	mov	r1, sl
    5ae8:	f7ff f9c9 	bl	4e7e <bloomFilterAddressCheck+0x1a6>
    5aec:	464d      	mov	r5, r9
    5aee:	f7ff f9d3 	bl	4e98 <bloomFilterAddressCheck+0x1c0>
    5af2:	4689      	mov	r9, r1
    5af4:	f7ff f9dd 	bl	4eb2 <bloomFilterAddressCheck+0x1da>
    5af8:	1c0d      	adds	r5, r1, #0
    5afa:	f7ff f9e9 	bl	4ed0 <bloomFilterAddressCheck+0x1f8>
    5afe:	4689      	mov	r9, r1
    5b00:	f7ff f9f3 	bl	4eea <bloomFilterAddressCheck+0x212>
    5b04:	1c0d      	adds	r5, r1, #0
    5b06:	f7ff f9ff 	bl	4f08 <bloomFilterAddressCheck+0x230>
    5b0a:	468a      	mov	sl, r1
    5b0c:	f7ff fa09 	bl	4f22 <bloomFilterAddressCheck+0x24a>
    5b10:	464d      	mov	r5, r9
    5b12:	f7ff fa19 	bl	4f48 <bloomFilterAddressCheck+0x270>
    5b16:	4655      	mov	r5, sl
    5b18:	f7ff fa26 	bl	4f68 <bloomFilterAddressCheck+0x290>
    5b1c:	46d1      	mov	r9, sl
    5b1e:	f7ff fa36 	bl	4f8e <bloomFilterAddressCheck+0x2b6>
    5b22:	46aa      	mov	sl, r5
    5b24:	f7ff fa43 	bl	4fae <bloomFilterAddressCheck+0x2d6>
    5b28:	46a9      	mov	r9, r5
    5b2a:	f7ff fa50 	bl	4fce <bloomFilterAddressCheck+0x2f6>
    5b2e:	46aa      	mov	sl, r5
    5b30:	f7ff fa5d 	bl	4fee <bloomFilterAddressCheck+0x316>
    5b34:	46a9      	mov	r9, r5
    5b36:	f7ff fa6a 	bl	500e <bloomFilterAddressCheck+0x336>
    5b3a:	46aa      	mov	sl, r5
    5b3c:	f7ff fa77 	bl	502e <bloomFilterAddressCheck+0x356>
    5b40:	464d      	mov	r5, r9
    5b42:	f7ff fa87 	bl	5054 <bloomFilterAddressCheck+0x37c>
    5b46:	4655      	mov	r5, sl
    5b48:	f7ff fa99 	bl	507e <bloomFilterAddressCheck+0x3a6>
    5b4c:	46d1      	mov	r9, sl
    5b4e:	f7ff faa7 	bl	50a0 <bloomFilterAddressCheck+0x3c8>
    5b52:	46aa      	mov	sl, r5
    5b54:	f7ff faba 	bl	50cc <bloomFilterAddressCheck+0x3f4>
    5b58:	46a9      	mov	r9, r5
    5b5a:	f7ff fac7 	bl	50ec <bloomFilterAddressCheck+0x414>
    5b5e:	46aa      	mov	sl, r5
    5b60:	f7ff fad4 	bl	510c <bloomFilterAddressCheck+0x434>
    5b64:	46a9      	mov	r9, r5
    5b66:	f7ff fae1 	bl	512c <bloomFilterAddressCheck+0x454>
    5b6a:	46aa      	mov	sl, r5
    5b6c:	f7ff faee 	bl	514c <bloomFilterAddressCheck+0x474>
    5b70:	464d      	mov	r5, r9
    5b72:	f7ff fafe 	bl	5172 <bloomFilterAddressCheck+0x49a>
    5b76:	4655      	mov	r5, sl
    5b78:	f7ff fb10 	bl	519c <bloomFilterAddressCheck+0x4c4>
    5b7c:	46d1      	mov	r9, sl
    5b7e:	f7ff fb1e 	bl	51be <bloomFilterAddressCheck+0x4e6>
    5b82:	46aa      	mov	sl, r5
    5b84:	f7ff fb2b 	bl	51de <bloomFilterAddressCheck+0x506>
    5b88:	46a9      	mov	r9, r5
    5b8a:	f7ff fb38 	bl	51fe <bloomFilterAddressCheck+0x526>
    5b8e:	46aa      	mov	sl, r5
    5b90:	f7ff fb45 	bl	521e <bloomFilterAddressCheck+0x546>
    5b94:	46a9      	mov	r9, r5
    5b96:	f7ff fb52 	bl	523e <bloomFilterAddressCheck+0x566>
    5b9a:	46aa      	mov	sl, r5
    5b9c:	f7ff fb5f 	bl	525e <bloomFilterAddressCheck+0x586>
    5ba0:	464d      	mov	r5, r9
    5ba2:	f7ff fb6f 	bl	5284 <bloomFilterAddressCheck+0x5ac>
    5ba6:	4655      	mov	r5, sl
    5ba8:	f7ff fb81 	bl	52ae <bloomFilterAddressCheck+0x5d6>
    5bac:	46ca      	mov	sl, r9
    5bae:	f7ff fb8f 	bl	52d0 <bloomFilterAddressCheck+0x5f8>
    5bb2:	46a9      	mov	r9, r5
    5bb4:	f7ff fb9c 	bl	52f0 <bloomFilterAddressCheck+0x618>
    5bb8:	46aa      	mov	sl, r5
    5bba:	f7ff fba9 	bl	5310 <bloomFilterAddressCheck+0x638>
    5bbe:	46a9      	mov	r9, r5
    5bc0:	f7ff fbb6 	bl	5330 <bloomFilterAddressCheck+0x658>
    5bc4:	46aa      	mov	sl, r5
    5bc6:	f7ff fbc3 	bl	5350 <bloomFilterAddressCheck+0x678>
    5bca:	46a9      	mov	r9, r5
    5bcc:	f7ff fbd0 	bl	5370 <bloomFilterAddressCheck+0x698>
    5bd0:	1c2a      	adds	r2, r5, #0
    5bd2:	f7ff fbdf 	bl	5394 <bloomFilterAddressCheck+0x6bc>
    5bd6:	4644      	mov	r4, r8
    5bd8:	e6d3      	b.n	5982 <bloomFilterAddressCheck+0xcaa>
    5bda:	466b      	mov	r3, sp
    5bdc:	8a98      	ldrh	r0, [r3, #20]
    5bde:	e6c6      	b.n	596e <bloomFilterAddressCheck+0xc96>
    5be0:	1c0c      	adds	r4, r1, #0
    5be2:	e6b3      	b.n	594c <bloomFilterAddressCheck+0xc74>
    5be4:	ffff8005 	.word	0xffff8005
    5be8:	0000747d 	.word	0x0000747d
    5bec:	00001021 	.word	0x00001021
    5bf0:	1c19      	adds	r1, r3, #0
    5bf2:	b28a      	uxth	r2, r1
    5bf4:	4b52      	ldr	r3, [pc, #328]	; (5d40 <bloomFilterAddressCheck+0x1068>)
    5bf6:	0052      	lsls	r2, r2, #1
    5bf8:	4053      	eors	r3, r2
    5bfa:	b29b      	uxth	r3, r3
    5bfc:	004a      	lsls	r2, r1, #1
    5bfe:	0409      	lsls	r1, r1, #16
    5c00:	d400      	bmi.n	5c04 <bloomFilterAddressCheck+0xf2c>
    5c02:	e5bb      	b.n	577c <bloomFilterAddressCheck+0xaa4>
    5c04:	1c1a      	adds	r2, r3, #0
    5c06:	b291      	uxth	r1, r2
    5c08:	4b4d      	ldr	r3, [pc, #308]	; (5d40 <bloomFilterAddressCheck+0x1068>)
    5c0a:	0049      	lsls	r1, r1, #1
    5c0c:	404b      	eors	r3, r1
    5c0e:	b29b      	uxth	r3, r3
    5c10:	0055      	lsls	r5, r2, #1
    5c12:	0412      	lsls	r2, r2, #16
    5c14:	d400      	bmi.n	5c18 <bloomFilterAddressCheck+0xf40>
    5c16:	e5ba      	b.n	578e <bloomFilterAddressCheck+0xab6>
    5c18:	1c1d      	adds	r5, r3, #0
    5c1a:	e5b8      	b.n	578e <bloomFilterAddressCheck+0xab6>
    5c1c:	1c1a      	adds	r2, r3, #0
    5c1e:	e59b      	b.n	5758 <bloomFilterAddressCheck+0xa80>
    5c20:	1c19      	adds	r1, r3, #0
    5c22:	e590      	b.n	5746 <bloomFilterAddressCheck+0xa6e>
    5c24:	1c1a      	adds	r2, r3, #0
    5c26:	e585      	b.n	5734 <bloomFilterAddressCheck+0xa5c>
    5c28:	1c11      	adds	r1, r2, #0
    5c2a:	e57a      	b.n	5722 <bloomFilterAddressCheck+0xa4a>
    5c2c:	1c0b      	adds	r3, r1, #0
    5c2e:	e56f      	b.n	5710 <bloomFilterAddressCheck+0xa38>
    5c30:	1c1a      	adds	r2, r3, #0
    5c32:	e562      	b.n	56fa <bloomFilterAddressCheck+0xa22>
    5c34:	1c19      	adds	r1, r3, #0
    5c36:	e557      	b.n	56e8 <bloomFilterAddressCheck+0xa10>
    5c38:	1c1a      	adds	r2, r3, #0
    5c3a:	e54c      	b.n	56d6 <bloomFilterAddressCheck+0x9fe>
    5c3c:	1c19      	adds	r1, r3, #0
    5c3e:	e541      	b.n	56c4 <bloomFilterAddressCheck+0x9ec>
    5c40:	1c1a      	adds	r2, r3, #0
    5c42:	e536      	b.n	56b2 <bloomFilterAddressCheck+0x9da>
    5c44:	1c19      	adds	r1, r3, #0
    5c46:	e52b      	b.n	56a0 <bloomFilterAddressCheck+0x9c8>
    5c48:	1c0a      	adds	r2, r1, #0
    5c4a:	e520      	b.n	568e <bloomFilterAddressCheck+0x9b6>
    5c4c:	1c13      	adds	r3, r2, #0
    5c4e:	e515      	b.n	567c <bloomFilterAddressCheck+0x9a4>
    5c50:	1c02      	adds	r2, r0, #0
    5c52:	e509      	b.n	5668 <bloomFilterAddressCheck+0x990>
    5c54:	1c03      	adds	r3, r0, #0
    5c56:	e4fd      	b.n	5654 <bloomFilterAddressCheck+0x97c>
    5c58:	1c02      	adds	r2, r0, #0
    5c5a:	e4f1      	b.n	5640 <bloomFilterAddressCheck+0x968>
    5c5c:	1c03      	adds	r3, r0, #0
    5c5e:	e4e5      	b.n	562c <bloomFilterAddressCheck+0x954>
    5c60:	1c02      	adds	r2, r0, #0
    5c62:	e4d9      	b.n	5618 <bloomFilterAddressCheck+0x940>
    5c64:	1c03      	adds	r3, r0, #0
    5c66:	e4cd      	b.n	5604 <bloomFilterAddressCheck+0x92c>
    5c68:	1c02      	adds	r2, r0, #0
    5c6a:	e4c1      	b.n	55f0 <bloomFilterAddressCheck+0x918>
    5c6c:	1c23      	adds	r3, r4, #0
    5c6e:	e4b5      	b.n	55dc <bloomFilterAddressCheck+0x904>
    5c70:	1c22      	adds	r2, r4, #0
    5c72:	e4a8      	b.n	55c6 <bloomFilterAddressCheck+0x8ee>
    5c74:	1c23      	adds	r3, r4, #0
    5c76:	e49c      	b.n	55b2 <bloomFilterAddressCheck+0x8da>
    5c78:	1c22      	adds	r2, r4, #0
    5c7a:	e490      	b.n	559e <bloomFilterAddressCheck+0x8c6>
    5c7c:	1c23      	adds	r3, r4, #0
    5c7e:	e484      	b.n	558a <bloomFilterAddressCheck+0x8b2>
    5c80:	1c22      	adds	r2, r4, #0
    5c82:	e478      	b.n	5576 <bloomFilterAddressCheck+0x89e>
    5c84:	1c23      	adds	r3, r4, #0
    5c86:	e46c      	b.n	5562 <bloomFilterAddressCheck+0x88a>
    5c88:	1c22      	adds	r2, r4, #0
    5c8a:	e460      	b.n	554e <bloomFilterAddressCheck+0x876>
    5c8c:	1c2b      	adds	r3, r5, #0
    5c8e:	e454      	b.n	553a <bloomFilterAddressCheck+0x862>
    5c90:	1c2a      	adds	r2, r5, #0
    5c92:	e447      	b.n	5524 <bloomFilterAddressCheck+0x84c>
    5c94:	1c2b      	adds	r3, r5, #0
    5c96:	e43b      	b.n	5510 <bloomFilterAddressCheck+0x838>
    5c98:	1c19      	adds	r1, r3, #0
    5c9a:	b28a      	uxth	r2, r1
    5c9c:	4b28      	ldr	r3, [pc, #160]	; (5d40 <bloomFilterAddressCheck+0x1068>)
    5c9e:	0052      	lsls	r2, r2, #1
    5ca0:	4053      	eors	r3, r2
    5ca2:	b29b      	uxth	r3, r3
    5ca4:	0048      	lsls	r0, r1, #1
    5ca6:	040a      	lsls	r2, r1, #16
    5ca8:	d400      	bmi.n	5cac <bloomFilterAddressCheck+0xfd4>
    5caa:	e5fe      	b.n	58aa <bloomFilterAddressCheck+0xbd2>
    5cac:	1c18      	adds	r0, r3, #0
    5cae:	b282      	uxth	r2, r0
    5cb0:	4b23      	ldr	r3, [pc, #140]	; (5d40 <bloomFilterAddressCheck+0x1068>)
    5cb2:	0052      	lsls	r2, r2, #1
    5cb4:	4053      	eors	r3, r2
    5cb6:	b29b      	uxth	r3, r3
    5cb8:	0042      	lsls	r2, r0, #1
    5cba:	0401      	lsls	r1, r0, #16
    5cbc:	d400      	bmi.n	5cc0 <bloomFilterAddressCheck+0xfe8>
    5cbe:	e5fd      	b.n	58bc <bloomFilterAddressCheck+0xbe4>
    5cc0:	1c1a      	adds	r2, r3, #0
    5cc2:	e5fb      	b.n	58bc <bloomFilterAddressCheck+0xbe4>
    5cc4:	1c1a      	adds	r2, r3, #0
    5cc6:	e5de      	b.n	5886 <bloomFilterAddressCheck+0xbae>
    5cc8:	1c19      	adds	r1, r3, #0
    5cca:	e5d3      	b.n	5874 <bloomFilterAddressCheck+0xb9c>
    5ccc:	1c1a      	adds	r2, r3, #0
    5cce:	e5c8      	b.n	5862 <bloomFilterAddressCheck+0xb8a>
    5cd0:	1c11      	adds	r1, r2, #0
    5cd2:	e5bd      	b.n	5850 <bloomFilterAddressCheck+0xb78>
    5cd4:	1c13      	adds	r3, r2, #0
    5cd6:	e5b2      	b.n	583e <bloomFilterAddressCheck+0xb66>
    5cd8:	1c1d      	adds	r5, r3, #0
    5cda:	e5a2      	b.n	5822 <bloomFilterAddressCheck+0xb4a>
    5cdc:	1c1a      	adds	r2, r3, #0
    5cde:	e597      	b.n	5810 <bloomFilterAddressCheck+0xb38>
    5ce0:	1c19      	adds	r1, r3, #0
    5ce2:	e58c      	b.n	57fe <bloomFilterAddressCheck+0xb26>
    5ce4:	1c1a      	adds	r2, r3, #0
    5ce6:	e581      	b.n	57ec <bloomFilterAddressCheck+0xb14>
    5ce8:	1c19      	adds	r1, r3, #0
    5cea:	e576      	b.n	57da <bloomFilterAddressCheck+0xb02>
    5cec:	1c1a      	adds	r2, r3, #0
    5cee:	e56b      	b.n	57c8 <bloomFilterAddressCheck+0xaf0>
    5cf0:	1c11      	adds	r1, r2, #0
    5cf2:	e560      	b.n	57b6 <bloomFilterAddressCheck+0xade>
    5cf4:	1c13      	adds	r3, r2, #0
    5cf6:	e555      	b.n	57a4 <bloomFilterAddressCheck+0xacc>
    5cf8:	1c0a      	adds	r2, r1, #0
    5cfa:	e61d      	b.n	5938 <bloomFilterAddressCheck+0xc60>
    5cfc:	1c0b      	adds	r3, r1, #0
    5cfe:	e611      	b.n	5924 <bloomFilterAddressCheck+0xc4c>
    5d00:	1c0a      	adds	r2, r1, #0
    5d02:	e605      	b.n	5910 <bloomFilterAddressCheck+0xc38>
    5d04:	1c0b      	adds	r3, r1, #0
    5d06:	e5f9      	b.n	58fc <bloomFilterAddressCheck+0xc24>
    5d08:	1c0a      	adds	r2, r1, #0
    5d0a:	e5ed      	b.n	58e8 <bloomFilterAddressCheck+0xc10>
    5d0c:	1c03      	adds	r3, r0, #0
    5d0e:	e5e1      	b.n	58d4 <bloomFilterAddressCheck+0xbfc>
    5d10:	1c2a      	adds	r2, r5, #0
    5d12:	f7ff fbf3 	bl	54fc <bloomFilterAddressCheck+0x824>
    5d16:	1c2b      	adds	r3, r5, #0
    5d18:	f7ff fbe5 	bl	54e6 <bloomFilterAddressCheck+0x80e>
    5d1c:	1c2a      	adds	r2, r5, #0
    5d1e:	f7ff fbd7 	bl	54d0 <bloomFilterAddressCheck+0x7f8>
    5d22:	1c2b      	adds	r3, r5, #0
    5d24:	f7ff fbc9 	bl	54ba <bloomFilterAddressCheck+0x7e2>
    5d28:	1c2a      	adds	r2, r5, #0
    5d2a:	f7ff fbbb 	bl	54a4 <bloomFilterAddressCheck+0x7cc>
    5d2e:	1c13      	adds	r3, r2, #0
    5d30:	f7ff fbac 	bl	548c <bloomFilterAddressCheck+0x7b4>
    5d34:	464a      	mov	r2, r9
    5d36:	f7ff fb8e 	bl	5456 <bloomFilterAddressCheck+0x77e>
    5d3a:	1c2a      	adds	r2, r5, #0
    5d3c:	f7ff fb4a 	bl	53d4 <bloomFilterAddressCheck+0x6fc>
    5d40:	ffff8005 	.word	0xffff8005

00005d44 <MiApp_SubscribeDataIndicationCallback>:
    5d44:	2800      	cmp	r0, #0
    5d46:	d003      	beq.n	5d50 <MiApp_SubscribeDataIndicationCallback+0xc>
    5d48:	4b02      	ldr	r3, [pc, #8]	; (5d54 <MiApp_SubscribeDataIndicationCallback+0x10>)
    5d4a:	6018      	str	r0, [r3, #0]
    5d4c:	2001      	movs	r0, #1
    5d4e:	4770      	bx	lr
    5d50:	2000      	movs	r0, #0
    5d52:	e7fc      	b.n	5d4e <MiApp_SubscribeDataIndicationCallback+0xa>
    5d54:	200002b0 	.word	0x200002b0

00005d58 <prepareGenericHeader>:
    5d58:	b510      	push	{r4, lr}
    5d5a:	2403      	movs	r4, #3
    5d5c:	7018      	strb	r0, [r3, #0]
    5d5e:	7858      	ldrb	r0, [r3, #1]
    5d60:	809a      	strh	r2, [r3, #4]
    5d62:	43a0      	bics	r0, r4
    5d64:	2401      	movs	r4, #1
    5d66:	4304      	orrs	r4, r0
    5d68:	20f7      	movs	r0, #247	; 0xf7
    5d6a:	4020      	ands	r0, r4
    5d6c:	2404      	movs	r4, #4
    5d6e:	4320      	orrs	r0, r4
    5d70:	2447      	movs	r4, #71	; 0x47
    5d72:	4020      	ands	r0, r4
    5d74:	7058      	strb	r0, [r3, #1]
    5d76:	4802      	ldr	r0, [pc, #8]	; (5d80 <prepareGenericHeader+0x28>)
    5d78:	80d9      	strh	r1, [r3, #6]
    5d7a:	8800      	ldrh	r0, [r0, #0]
    5d7c:	8058      	strh	r0, [r3, #2]
    5d7e:	bd10      	pop	{r4, pc}
    5d80:	200012dc 	.word	0x200012dc

00005d84 <generalFrameConstruct>:
    5d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d86:	000c      	movs	r4, r1
    5d88:	7802      	ldrb	r2, [r0, #0]
    5d8a:	0003      	movs	r3, r0
    5d8c:	700a      	strb	r2, [r1, #0]
    5d8e:	7842      	ldrb	r2, [r0, #1]
    5d90:	704a      	strb	r2, [r1, #1]
    5d92:	491d      	ldr	r1, [pc, #116]	; (5e08 <generalFrameConstruct+0x84>)
    5d94:	780a      	ldrb	r2, [r1, #0]
    5d96:	3201      	adds	r2, #1
    5d98:	b2d2      	uxtb	r2, r2
    5d9a:	70a2      	strb	r2, [r4, #2]
    5d9c:	700a      	strb	r2, [r1, #0]
    5d9e:	7842      	ldrb	r2, [r0, #1]
    5da0:	0691      	lsls	r1, r2, #26
    5da2:	d42b      	bmi.n	5dfc <generalFrameConstruct+0x78>
    5da4:	8842      	ldrh	r2, [r0, #2]
    5da6:	2516      	movs	r5, #22
    5da8:	70e2      	strb	r2, [r4, #3]
    5daa:	8842      	ldrh	r2, [r0, #2]
    5dac:	260e      	movs	r6, #14
    5dae:	0a12      	lsrs	r2, r2, #8
    5db0:	7122      	strb	r2, [r4, #4]
    5db2:	8882      	ldrh	r2, [r0, #4]
    5db4:	210a      	movs	r1, #10
    5db6:	7162      	strb	r2, [r4, #5]
    5db8:	8882      	ldrh	r2, [r0, #4]
    5dba:	2709      	movs	r7, #9
    5dbc:	0a12      	lsrs	r2, r2, #8
    5dbe:	71a2      	strb	r2, [r4, #6]
    5dc0:	88c2      	ldrh	r2, [r0, #6]
    5dc2:	71e2      	strb	r2, [r4, #7]
    5dc4:	88c2      	ldrh	r2, [r0, #6]
    5dc6:	0a12      	lsrs	r2, r2, #8
    5dc8:	7222      	strb	r2, [r4, #8]
    5dca:	7842      	ldrb	r2, [r0, #1]
    5dcc:	2009      	movs	r0, #9
    5dce:	0752      	lsls	r2, r2, #29
    5dd0:	d513      	bpl.n	5dfa <generalFrameConstruct+0x76>
    5dd2:	4a0e      	ldr	r2, [pc, #56]	; (5e0c <generalFrameConstruct+0x88>)
    5dd4:	6810      	ldr	r0, [r2, #0]
    5dd6:	2220      	movs	r2, #32
    5dd8:	5c82      	ldrb	r2, [r0, r2]
    5dda:	480d      	ldr	r0, [pc, #52]	; (5e10 <generalFrameConstruct+0x8c>)
    5ddc:	741a      	strb	r2, [r3, #16]
    5dde:	6800      	ldr	r0, [r0, #0]
    5de0:	3314      	adds	r3, #20
    5de2:	6018      	str	r0, [r3, #0]
    5de4:	55e2      	strb	r2, [r4, r7]
    5de6:	1860      	adds	r0, r4, r1
    5de8:	2204      	movs	r2, #4
    5dea:	0019      	movs	r1, r3
    5dec:	4f09      	ldr	r7, [pc, #36]	; (5e14 <generalFrameConstruct+0x90>)
    5dee:	47b8      	blx	r7
    5df0:	19a0      	adds	r0, r4, r6
    5df2:	2208      	movs	r2, #8
    5df4:	4908      	ldr	r1, [pc, #32]	; (5e18 <generalFrameConstruct+0x94>)
    5df6:	47b8      	blx	r7
    5df8:	0028      	movs	r0, r5
    5dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dfc:	2510      	movs	r5, #16
    5dfe:	2608      	movs	r6, #8
    5e00:	2104      	movs	r1, #4
    5e02:	2703      	movs	r7, #3
    5e04:	2003      	movs	r0, #3
    5e06:	e7e2      	b.n	5dce <generalFrameConstruct+0x4a>
    5e08:	200012c4 	.word	0x200012c4
    5e0c:	200012ac 	.word	0x200012ac
    5e10:	2000132c 	.word	0x2000132c
    5e14:	000074ef 	.word	0x000074ef
    5e18:	2000004c 	.word	0x2000004c

00005e1c <frameTransmit>:
    5e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e1e:	4657      	mov	r7, sl
    5e20:	464e      	mov	r6, r9
    5e22:	46de      	mov	lr, fp
    5e24:	4645      	mov	r5, r8
    5e26:	b5e0      	push	{r5, r6, r7, lr}
    5e28:	b085      	sub	sp, #20
    5e2a:	4699      	mov	r9, r3
    5e2c:	ab0e      	add	r3, sp, #56	; 0x38
    5e2e:	781e      	ldrb	r6, [r3, #0]
    5e30:	ab10      	add	r3, sp, #64	; 0x40
    5e32:	781b      	ldrb	r3, [r3, #0]
    5e34:	0007      	movs	r7, r0
    5e36:	469a      	mov	sl, r3
    5e38:	2028      	movs	r0, #40	; 0x28
    5e3a:	4b45      	ldr	r3, [pc, #276]	; (5f50 <frameTransmit+0x134>)
    5e3c:	4688      	mov	r8, r1
    5e3e:	9203      	str	r2, [sp, #12]
    5e40:	4798      	blx	r3
    5e42:	1e04      	subs	r4, r0, #0
    5e44:	d100      	bne.n	5e48 <frameTransmit+0x2c>
    5e46:	e081      	b.n	5f4c <frameTransmit+0x130>
    5e48:	2300      	movs	r3, #0
    5e4a:	7603      	strb	r3, [r0, #24]
    5e4c:	787b      	ldrb	r3, [r7, #1]
    5e4e:	075b      	lsls	r3, r3, #29
    5e50:	d45b      	bmi.n	5f0a <frameTransmit+0xee>
    5e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5e54:	781a      	ldrb	r2, [r3, #0]
    5e56:	785b      	ldrb	r3, [r3, #1]
    5e58:	2e02      	cmp	r6, #2
    5e5a:	d06b      	beq.n	5f34 <frameTransmit+0x118>
    5e5c:	2101      	movs	r1, #1
    5e5e:	2200      	movs	r2, #0
    5e60:	2020      	movs	r0, #32
    5e62:	7e23      	ldrb	r3, [r4, #24]
    5e64:	0149      	lsls	r1, r1, #5
    5e66:	4383      	bics	r3, r0
    5e68:	430b      	orrs	r3, r1
    5e6a:	2104      	movs	r1, #4
    5e6c:	0092      	lsls	r2, r2, #2
    5e6e:	438b      	bics	r3, r1
    5e70:	4313      	orrs	r3, r2
    5e72:	2208      	movs	r2, #8
    5e74:	4393      	bics	r3, r2
    5e76:	7623      	strb	r3, [r4, #24]
    5e78:	4b36      	ldr	r3, [pc, #216]	; (5f54 <frameTransmit+0x138>)
    5e7a:	881a      	ldrh	r2, [r3, #0]
    5e7c:	4b36      	ldr	r3, [pc, #216]	; (5f58 <frameTransmit+0x13c>)
    5e7e:	429a      	cmp	r2, r3
    5e80:	d062      	beq.n	5f48 <frameTransmit+0x12c>
    5e82:	787a      	ldrb	r2, [r7, #1]
    5e84:	2301      	movs	r3, #1
    5e86:	4211      	tst	r1, r2
    5e88:	d136      	bne.n	5ef8 <frameTransmit+0xdc>
    5e8a:	2221      	movs	r2, #33	; 0x21
    5e8c:	54a3      	strb	r3, [r4, r2]
    5e8e:	1eb3      	subs	r3, r6, #2
    5e90:	425a      	negs	r2, r3
    5e92:	4153      	adcs	r3, r2
    5e94:	2220      	movs	r2, #32
    5e96:	2101      	movs	r1, #1
    5e98:	54a3      	strb	r3, [r4, r2]
    5e9a:	7e23      	ldrb	r3, [r4, #24]
    5e9c:	089a      	lsrs	r2, r3, #2
    5e9e:	4051      	eors	r1, r2
    5ea0:	2201      	movs	r2, #1
    5ea2:	400a      	ands	r2, r1
    5ea4:	2140      	movs	r1, #64	; 0x40
    5ea6:	0192      	lsls	r2, r2, #6
    5ea8:	438b      	bics	r3, r1
    5eaa:	4313      	orrs	r3, r2
    5eac:	2280      	movs	r2, #128	; 0x80
    5eae:	4252      	negs	r2, r2
    5eb0:	4313      	orrs	r3, r2
    5eb2:	7623      	strb	r3, [r4, #24]
    5eb4:	887b      	ldrh	r3, [r7, #2]
    5eb6:	0027      	movs	r7, r4
    5eb8:	8463      	strh	r3, [r4, #34]	; 0x22
    5eba:	464b      	mov	r3, r9
    5ebc:	3708      	adds	r7, #8
    5ebe:	6163      	str	r3, [r4, #20]
    5ec0:	0032      	movs	r2, r6
    5ec2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5ec4:	4b25      	ldr	r3, [pc, #148]	; (5f5c <frameTransmit+0x140>)
    5ec6:	0038      	movs	r0, r7
    5ec8:	4798      	blx	r3
    5eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5ecc:	4652      	mov	r2, sl
    5ece:	6123      	str	r3, [r4, #16]
    5ed0:	2325      	movs	r3, #37	; 0x25
    5ed2:	61e7      	str	r7, [r4, #28]
    5ed4:	54e2      	strb	r2, [r4, r3]
    5ed6:	9b03      	ldr	r3, [sp, #12]
    5ed8:	4821      	ldr	r0, [pc, #132]	; (5f60 <frameTransmit+0x144>)
    5eda:	4443      	add	r3, r8
    5edc:	001d      	movs	r5, r3
    5ede:	2324      	movs	r3, #36	; 0x24
    5ee0:	0021      	movs	r1, r4
    5ee2:	54e5      	strb	r5, [r4, r3]
    5ee4:	4b1f      	ldr	r3, [pc, #124]	; (5f64 <frameTransmit+0x148>)
    5ee6:	4798      	blx	r3
    5ee8:	2001      	movs	r0, #1
    5eea:	b005      	add	sp, #20
    5eec:	bc3c      	pop	{r2, r3, r4, r5}
    5eee:	4690      	mov	r8, r2
    5ef0:	4699      	mov	r9, r3
    5ef2:	46a2      	mov	sl, r4
    5ef4:	46ab      	mov	fp, r5
    5ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ef8:	2100      	movs	r1, #0
    5efa:	4a1b      	ldr	r2, [pc, #108]	; (5f68 <frameTransmit+0x14c>)
    5efc:	7812      	ldrb	r2, [r2, #0]
    5efe:	3a06      	subs	r2, #6
    5f00:	b2d2      	uxtb	r2, r2
    5f02:	4293      	cmp	r3, r2
    5f04:	4149      	adcs	r1, r1
    5f06:	b2cb      	uxtb	r3, r1
    5f08:	e7bf      	b.n	5e8a <frameTransmit+0x6e>
    5f0a:	4b18      	ldr	r3, [pc, #96]	; (5f6c <frameTransmit+0x150>)
    5f0c:	0030      	movs	r0, r6
    5f0e:	4798      	blx	r3
    5f10:	464b      	mov	r3, r9
    5f12:	9000      	str	r0, [sp, #0]
    5f14:	9a03      	ldr	r2, [sp, #12]
    5f16:	4641      	mov	r1, r8
    5f18:	0038      	movs	r0, r7
    5f1a:	4d15      	ldr	r5, [pc, #84]	; (5f70 <frameTransmit+0x154>)
    5f1c:	47a8      	blx	r5
    5f1e:	28ff      	cmp	r0, #255	; 0xff
    5f20:	d014      	beq.n	5f4c <frameTransmit+0x130>
    5f22:	9b03      	ldr	r3, [sp, #12]
    5f24:	181d      	adds	r5, r3, r0
    5f26:	b2eb      	uxtb	r3, r5
    5f28:	9303      	str	r3, [sp, #12]
    5f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5f2c:	781a      	ldrb	r2, [r3, #0]
    5f2e:	785b      	ldrb	r3, [r3, #1]
    5f30:	2e02      	cmp	r6, #2
    5f32:	d193      	bne.n	5e5c <frameTransmit+0x40>
    5f34:	021b      	lsls	r3, r3, #8
    5f36:	189b      	adds	r3, r3, r2
    5f38:	4a07      	ldr	r2, [pc, #28]	; (5f58 <frameTransmit+0x13c>)
    5f3a:	b29b      	uxth	r3, r3
    5f3c:	4293      	cmp	r3, r2
    5f3e:	d000      	beq.n	5f42 <frameTransmit+0x126>
    5f40:	e78c      	b.n	5e5c <frameTransmit+0x40>
    5f42:	2100      	movs	r1, #0
    5f44:	2201      	movs	r2, #1
    5f46:	e78b      	b.n	5e60 <frameTransmit+0x44>
    5f48:	2300      	movs	r3, #0
    5f4a:	e79e      	b.n	5e8a <frameTransmit+0x6e>
    5f4c:	2000      	movs	r0, #0
    5f4e:	e7cc      	b.n	5eea <frameTransmit+0xce>
    5f50:	00002c59 	.word	0x00002c59
    5f54:	200012f0 	.word	0x200012f0
    5f58:	0000ffff 	.word	0x0000ffff
    5f5c:	000074ef 	.word	0x000074ef
    5f60:	200012e4 	.word	0x200012e4
    5f64:	00002d81 	.word	0x00002d81
    5f68:	20000298 	.word	0x20000298
    5f6c:	00006fb9 	.word	0x00006fb9
    5f70:	00006fdd 	.word	0x00006fdd

00005f74 <frameParse>:
    5f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f76:	464e      	mov	r6, r9
    5f78:	4645      	mov	r5, r8
    5f7a:	46de      	mov	lr, fp
    5f7c:	4657      	mov	r7, sl
    5f7e:	b5e0      	push	{r5, r6, r7, lr}
    5f80:	6885      	ldr	r5, [r0, #8]
    5f82:	b09d      	sub	sp, #116	; 0x74
    5f84:	782b      	ldrb	r3, [r5, #0]
    5f86:	ac0c      	add	r4, sp, #48	; 0x30
    5f88:	7023      	strb	r3, [r4, #0]
    5f8a:	786b      	ldrb	r3, [r5, #1]
    5f8c:	0006      	movs	r6, r0
    5f8e:	7063      	strb	r3, [r4, #1]
    5f90:	78ab      	ldrb	r3, [r5, #2]
    5f92:	7223      	strb	r3, [r4, #8]
    5f94:	7bc3      	ldrb	r3, [r0, #15]
    5f96:	2b00      	cmp	r3, #0
    5f98:	d015      	beq.n	5fc6 <frameParse+0x52>
    5f9a:	7863      	ldrb	r3, [r4, #1]
    5f9c:	069a      	lsls	r2, r3, #26
    5f9e:	d400      	bmi.n	5fa2 <frameParse+0x2e>
    5fa0:	e0b5      	b.n	610e <frameParse+0x19a>
    5fa2:	6873      	ldr	r3, [r6, #4]
    5fa4:	4698      	mov	r8, r3
    5fa6:	8a33      	ldrh	r3, [r6, #16]
    5fa8:	8063      	strh	r3, [r4, #2]
    5faa:	4643      	mov	r3, r8
    5fac:	785a      	ldrb	r2, [r3, #1]
    5fae:	781b      	ldrb	r3, [r3, #0]
    5fb0:	0212      	lsls	r2, r2, #8
    5fb2:	4313      	orrs	r3, r2
    5fb4:	80e3      	strh	r3, [r4, #6]
    5fb6:	2302      	movs	r3, #2
    5fb8:	469a      	mov	sl, r3
    5fba:	7833      	ldrb	r3, [r6, #0]
    5fbc:	075b      	lsls	r3, r3, #29
    5fbe:	d40f      	bmi.n	5fe0 <frameParse+0x6c>
    5fc0:	4b7f      	ldr	r3, [pc, #508]	; (61c0 <frameParse+0x24c>)
    5fc2:	881b      	ldrh	r3, [r3, #0]
    5fc4:	e00e      	b.n	5fe4 <frameParse+0x70>
    5fc6:	7863      	ldrb	r3, [r4, #1]
    5fc8:	069a      	lsls	r2, r3, #26
    5fca:	d400      	bmi.n	5fce <frameParse+0x5a>
    5fcc:	e07c      	b.n	60c8 <frameParse+0x154>
    5fce:	6873      	ldr	r3, [r6, #4]
    5fd0:	4698      	mov	r8, r3
    5fd2:	8a33      	ldrh	r3, [r6, #16]
    5fd4:	8063      	strh	r3, [r4, #2]
    5fd6:	2308      	movs	r3, #8
    5fd8:	469a      	mov	sl, r3
    5fda:	7833      	ldrb	r3, [r6, #0]
    5fdc:	075b      	lsls	r3, r3, #29
    5fde:	d5ef      	bpl.n	5fc0 <frameParse+0x4c>
    5fe0:	2301      	movs	r3, #1
    5fe2:	425b      	negs	r3, r3
    5fe4:	2210      	movs	r2, #16
    5fe6:	80a3      	strh	r3, [r4, #4]
    5fe8:	7863      	ldrb	r3, [r4, #1]
    5fea:	4691      	mov	r9, r2
    5fec:	4693      	mov	fp, r2
    5fee:	2708      	movs	r7, #8
    5ff0:	2104      	movs	r1, #4
    5ff2:	3a0d      	subs	r2, #13
    5ff4:	075b      	lsls	r3, r3, #29
    5ff6:	d400      	bmi.n	5ffa <frameParse+0x86>
    5ff8:	e082      	b.n	6100 <frameParse+0x18c>
    5ffa:	5cab      	ldrb	r3, [r5, r2]
    5ffc:	1869      	adds	r1, r5, r1
    5ffe:	7423      	strb	r3, [r4, #16]
    6000:	2204      	movs	r2, #4
    6002:	4b70      	ldr	r3, [pc, #448]	; (61c4 <frameParse+0x250>)
    6004:	a811      	add	r0, sp, #68	; 0x44
    6006:	4798      	blx	r3
    6008:	19e9      	adds	r1, r5, r7
    600a:	2208      	movs	r2, #8
    600c:	4b6d      	ldr	r3, [pc, #436]	; (61c4 <frameParse+0x250>)
    600e:	a812      	add	r0, sp, #72	; 0x48
    6010:	4798      	blx	r3
    6012:	465a      	mov	r2, fp
    6014:	7b33      	ldrb	r3, [r6, #12]
    6016:	4650      	mov	r0, sl
    6018:	1a9b      	subs	r3, r3, r2
    601a:	b2db      	uxtb	r3, r3
    601c:	001f      	movs	r7, r3
    601e:	9306      	str	r3, [sp, #24]
    6020:	4b69      	ldr	r3, [pc, #420]	; (61c8 <frameParse+0x254>)
    6022:	4798      	blx	r3
    6024:	9001      	str	r0, [sp, #4]
    6026:	68b3      	ldr	r3, [r6, #8]
    6028:	465a      	mov	r2, fp
    602a:	9300      	str	r3, [sp, #0]
    602c:	a912      	add	r1, sp, #72	; 0x48
    602e:	003b      	movs	r3, r7
    6030:	0020      	movs	r0, r4
    6032:	4f66      	ldr	r7, [pc, #408]	; (61cc <frameParse+0x258>)
    6034:	47b8      	blx	r7
    6036:	9005      	str	r0, [sp, #20]
    6038:	28ff      	cmp	r0, #255	; 0xff
    603a:	d061      	beq.n	6100 <frameParse+0x18c>
    603c:	88a2      	ldrh	r2, [r4, #4]
    603e:	4b64      	ldr	r3, [pc, #400]	; (61d0 <frameParse+0x25c>)
    6040:	429a      	cmp	r2, r3
    6042:	d967      	bls.n	6114 <frameParse+0x1a0>
    6044:	2310      	movs	r3, #16
    6046:	7861      	ldrb	r1, [r4, #1]
    6048:	469b      	mov	fp, r3
    604a:	420b      	tst	r3, r1
    604c:	d004      	beq.n	6058 <frameParse+0xe4>
    604e:	4b5c      	ldr	r3, [pc, #368]	; (61c0 <frameParse+0x24c>)
    6050:	881b      	ldrh	r3, [r3, #0]
    6052:	429a      	cmp	r2, r3
    6054:	d100      	bne.n	6058 <frameParse+0xe4>
    6056:	e0cf      	b.n	61f8 <frameParse+0x284>
    6058:	2303      	movs	r3, #3
    605a:	444d      	add	r5, r9
    605c:	400b      	ands	r3, r1
    605e:	2b01      	cmp	r3, #1
    6060:	d05d      	beq.n	611e <frameParse+0x1aa>
    6062:	2b00      	cmp	r3, #0
    6064:	d14c      	bne.n	6100 <frameParse+0x18c>
    6066:	4b5b      	ldr	r3, [pc, #364]	; (61d4 <frameParse+0x260>)
    6068:	781b      	ldrb	r3, [r3, #0]
    606a:	3b06      	subs	r3, #6
    606c:	2b01      	cmp	r3, #1
    606e:	d847      	bhi.n	6100 <frameParse+0x18c>
    6070:	88a3      	ldrh	r3, [r4, #4]
    6072:	4a57      	ldr	r2, [pc, #348]	; (61d0 <frameParse+0x25c>)
    6074:	4293      	cmp	r3, r2
    6076:	d800      	bhi.n	607a <frameParse+0x106>
    6078:	e08d      	b.n	6196 <frameParse+0x222>
    607a:	20ff      	movs	r0, #255	; 0xff
    607c:	4a50      	ldr	r2, [pc, #320]	; (61c0 <frameParse+0x24c>)
    607e:	8811      	ldrh	r1, [r2, #0]
    6080:	4208      	tst	r0, r1
    6082:	d100      	bne.n	6086 <frameParse+0x112>
    6084:	e092      	b.n	61ac <frameParse+0x238>
    6086:	8811      	ldrh	r1, [r2, #0]
    6088:	0609      	lsls	r1, r1, #24
    608a:	d500      	bpl.n	608e <frameParse+0x11a>
    608c:	e08e      	b.n	61ac <frameParse+0x238>
    608e:	4952      	ldr	r1, [pc, #328]	; (61d8 <frameParse+0x264>)
    6090:	428b      	cmp	r3, r1
    6092:	d135      	bne.n	6100 <frameParse+0x18c>
    6094:	8813      	ldrh	r3, [r2, #0]
    6096:	8813      	ldrh	r3, [r2, #0]
    6098:	061b      	lsls	r3, r3, #24
    609a:	d500      	bpl.n	609e <frameParse+0x12a>
    609c:	e07b      	b.n	6196 <frameParse+0x222>
    609e:	21ff      	movs	r1, #255	; 0xff
    60a0:	8812      	ldrh	r2, [r2, #0]
    60a2:	88e3      	ldrh	r3, [r4, #6]
    60a4:	438a      	bics	r2, r1
    60a6:	429a      	cmp	r2, r3
    60a8:	d02a      	beq.n	6100 <frameParse+0x18c>
    60aa:	a814      	add	r0, sp, #80	; 0x50
    60ac:	8003      	strh	r3, [r0, #0]
    60ae:	9a05      	ldr	r2, [sp, #20]
    60b0:	9b06      	ldr	r3, [sp, #24]
    60b2:	6045      	str	r5, [r0, #4]
    60b4:	1a9f      	subs	r7, r3, r2
    60b6:	7207      	strb	r7, [r0, #8]
    60b8:	7bb3      	ldrb	r3, [r6, #14]
    60ba:	7283      	strb	r3, [r0, #10]
    60bc:	7b73      	ldrb	r3, [r6, #13]
    60be:	7243      	strb	r3, [r0, #9]
    60c0:	4b46      	ldr	r3, [pc, #280]	; (61dc <frameParse+0x268>)
    60c2:	681b      	ldr	r3, [r3, #0]
    60c4:	4798      	blx	r3
    60c6:	e01b      	b.n	6100 <frameParse+0x18c>
    60c8:	2208      	movs	r2, #8
    60ca:	4692      	mov	sl, r2
    60cc:	6872      	ldr	r2, [r6, #4]
    60ce:	7929      	ldrb	r1, [r5, #4]
    60d0:	4690      	mov	r8, r2
    60d2:	78ea      	ldrb	r2, [r5, #3]
    60d4:	0209      	lsls	r1, r1, #8
    60d6:	430a      	orrs	r2, r1
    60d8:	79a9      	ldrb	r1, [r5, #6]
    60da:	8062      	strh	r2, [r4, #2]
    60dc:	796a      	ldrb	r2, [r5, #5]
    60de:	0209      	lsls	r1, r1, #8
    60e0:	430a      	orrs	r2, r1
    60e2:	7a29      	ldrb	r1, [r5, #8]
    60e4:	80a2      	strh	r2, [r4, #4]
    60e6:	79ea      	ldrb	r2, [r5, #7]
    60e8:	0209      	lsls	r1, r1, #8
    60ea:	430a      	orrs	r2, r1
    60ec:	80e2      	strh	r2, [r4, #6]
    60ee:	2216      	movs	r2, #22
    60f0:	270e      	movs	r7, #14
    60f2:	4691      	mov	r9, r2
    60f4:	4693      	mov	fp, r2
    60f6:	210a      	movs	r1, #10
    60f8:	3a0d      	subs	r2, #13
    60fa:	075b      	lsls	r3, r3, #29
    60fc:	d500      	bpl.n	6100 <frameParse+0x18c>
    60fe:	e77c      	b.n	5ffa <frameParse+0x86>
    6100:	b01d      	add	sp, #116	; 0x74
    6102:	bc3c      	pop	{r2, r3, r4, r5}
    6104:	4690      	mov	r8, r2
    6106:	4699      	mov	r9, r3
    6108:	46a2      	mov	sl, r4
    610a:	46ab      	mov	fp, r5
    610c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    610e:	2202      	movs	r2, #2
    6110:	4692      	mov	sl, r2
    6112:	e7db      	b.n	60cc <frameParse+0x158>
    6114:	4b2a      	ldr	r3, [pc, #168]	; (61c0 <frameParse+0x24c>)
    6116:	881b      	ldrh	r3, [r3, #0]
    6118:	429a      	cmp	r2, r3
    611a:	d1f1      	bne.n	6100 <frameParse+0x18c>
    611c:	e792      	b.n	6044 <frameParse+0xd0>
    611e:	782a      	ldrb	r2, [r5, #0]
    6120:	330e      	adds	r3, #14
    6122:	0011      	movs	r1, r2
    6124:	4399      	bics	r1, r3
    6126:	d038      	beq.n	619a <frameParse+0x226>
    6128:	2930      	cmp	r1, #48	; 0x30
    612a:	d1e9      	bne.n	6100 <frameParse+0x18c>
    612c:	2a32      	cmp	r2, #50	; 0x32
    612e:	d1e7      	bne.n	6100 <frameParse+0x18c>
    6130:	4b2b      	ldr	r3, [pc, #172]	; (61e0 <frameParse+0x26c>)
    6132:	4699      	mov	r9, r3
    6134:	7a1b      	ldrb	r3, [r3, #8]
    6136:	2b00      	cmp	r3, #0
    6138:	d0e2      	beq.n	6100 <frameParse+0x18c>
    613a:	2300      	movs	r3, #0
    613c:	469b      	mov	fp, r3
    613e:	4b29      	ldr	r3, [pc, #164]	; (61e4 <frameParse+0x270>)
    6140:	46a8      	mov	r8, r5
    6142:	469a      	mov	sl, r3
    6144:	465d      	mov	r5, fp
    6146:	9f05      	ldr	r7, [sp, #20]
    6148:	46b3      	mov	fp, r6
    614a:	e00a      	b.n	6162 <frameParse+0x1ee>
    614c:	0031      	movs	r1, r6
    614e:	4648      	mov	r0, r9
    6150:	4b25      	ldr	r3, [pc, #148]	; (61e8 <frameParse+0x274>)
    6152:	4798      	blx	r3
    6154:	464b      	mov	r3, r9
    6156:	3501      	adds	r5, #1
    6158:	7a1b      	ldrb	r3, [r3, #8]
    615a:	b2ed      	uxtb	r5, r5
    615c:	42ab      	cmp	r3, r5
    615e:	d800      	bhi.n	6162 <frameParse+0x1ee>
    6160:	e0e9      	b.n	6336 <frameParse+0x3c2>
    6162:	2100      	movs	r1, #0
    6164:	4648      	mov	r0, r9
    6166:	47d0      	blx	sl
    6168:	1e06      	subs	r6, r0, #0
    616a:	d100      	bne.n	616e <frameParse+0x1fa>
    616c:	e0e3      	b.n	6336 <frameParse+0x3c2>
    616e:	2320      	movs	r3, #32
    6170:	7a22      	ldrb	r2, [r4, #8]
    6172:	5cc3      	ldrb	r3, [r0, r3]
    6174:	429a      	cmp	r2, r3
    6176:	d1e9      	bne.n	614c <frameParse+0x1d8>
    6178:	88e2      	ldrh	r2, [r4, #6]
    617a:	8b83      	ldrh	r3, [r0, #28]
    617c:	429a      	cmp	r2, r3
    617e:	d1e5      	bne.n	614c <frameParse+0x1d8>
    6180:	6883      	ldr	r3, [r0, #8]
    6182:	2b00      	cmp	r3, #0
    6184:	d003      	beq.n	618e <frameParse+0x21a>
    6186:	7c80      	ldrb	r0, [r0, #18]
    6188:	0032      	movs	r2, r6
    618a:	2100      	movs	r1, #0
    618c:	4798      	blx	r3
    618e:	0030      	movs	r0, r6
    6190:	4b16      	ldr	r3, [pc, #88]	; (61ec <frameParse+0x278>)
    6192:	4798      	blx	r3
    6194:	e7de      	b.n	6154 <frameParse+0x1e0>
    6196:	88e3      	ldrh	r3, [r4, #6]
    6198:	e787      	b.n	60aa <frameParse+0x136>
    619a:	7bb3      	ldrb	r3, [r6, #14]
    619c:	0020      	movs	r0, r4
    619e:	9300      	str	r3, [sp, #0]
    61a0:	4642      	mov	r2, r8
    61a2:	002b      	movs	r3, r5
    61a4:	4651      	mov	r1, sl
    61a6:	4c12      	ldr	r4, [pc, #72]	; (61f0 <frameParse+0x27c>)
    61a8:	47a0      	blx	r4
    61aa:	e7a9      	b.n	6100 <frameParse+0x18c>
    61ac:	8811      	ldrh	r1, [r2, #0]
    61ae:	0609      	lsls	r1, r1, #24
    61b0:	d400      	bmi.n	61b4 <frameParse+0x240>
    61b2:	e770      	b.n	6096 <frameParse+0x122>
    61b4:	490f      	ldr	r1, [pc, #60]	; (61f4 <frameParse+0x280>)
    61b6:	428b      	cmp	r3, r1
    61b8:	d000      	beq.n	61bc <frameParse+0x248>
    61ba:	e76c      	b.n	6096 <frameParse+0x122>
    61bc:	e7a0      	b.n	6100 <frameParse+0x18c>
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	200012f0 	.word	0x200012f0
    61c4:	000074ef 	.word	0x000074ef
    61c8:	00006fb9 	.word	0x00006fb9
    61cc:	000070e5 	.word	0x000070e5
    61d0:	0000fffc 	.word	0x0000fffc
    61d4:	20000298 	.word	0x20000298
    61d8:	0000ffff 	.word	0x0000ffff
    61dc:	200002b0 	.word	0x200002b0
    61e0:	200012b0 	.word	0x200012b0
    61e4:	00002db9 	.word	0x00002db9
    61e8:	00002d81 	.word	0x00002d81
    61ec:	00002ca1 	.word	0x00002ca1
    61f0:	00006cfd 	.word	0x00006cfd
    61f4:	0000fffd 	.word	0x0000fffd
    61f8:	88e3      	ldrh	r3, [r4, #6]
    61fa:	2078      	movs	r0, #120	; 0x78
    61fc:	9308      	str	r3, [sp, #32]
    61fe:	7a23      	ldrb	r3, [r4, #8]
    6200:	9309      	str	r3, [sp, #36]	; 0x24
    6202:	4b55      	ldr	r3, [pc, #340]	; (6358 <frameParse+0x3e4>)
    6204:	4798      	blx	r3
    6206:	1e07      	subs	r7, r0, #0
    6208:	9007      	str	r0, [sp, #28]
    620a:	d100      	bne.n	620e <frameParse+0x29a>
    620c:	e08c      	b.n	6328 <frameParse+0x3b4>
    620e:	2330      	movs	r3, #48	; 0x30
    6210:	a808      	add	r0, sp, #32
    6212:	18c0      	adds	r0, r0, r3
    6214:	33cf      	adds	r3, #207	; 0xcf
    6216:	7003      	strb	r3, [r0, #0]
    6218:	2331      	movs	r3, #49	; 0x31
    621a:	a808      	add	r0, sp, #32
    621c:	18c0      	adds	r0, r0, r3
    621e:	7803      	ldrb	r3, [r0, #0]
    6220:	2003      	movs	r0, #3
    6222:	4383      	bics	r3, r0
    6224:	2001      	movs	r0, #1
    6226:	4318      	orrs	r0, r3
    6228:	23f7      	movs	r3, #247	; 0xf7
    622a:	4a4c      	ldr	r2, [pc, #304]	; (635c <frameParse+0x3e8>)
    622c:	4003      	ands	r3, r0
    622e:	2004      	movs	r0, #4
    6230:	8811      	ldrh	r1, [r2, #0]
    6232:	2220      	movs	r2, #32
    6234:	4303      	orrs	r3, r0
    6236:	b2db      	uxtb	r3, r3
    6238:	4393      	bics	r3, r2
    623a:	325f      	adds	r2, #95	; 0x5f
    623c:	4013      	ands	r3, r2
    623e:	465a      	mov	r2, fp
    6240:	2031      	movs	r0, #49	; 0x31
    6242:	4393      	bics	r3, r2
    6244:	aa08      	add	r2, sp, #32
    6246:	1812      	adds	r2, r2, r0
    6248:	7013      	strb	r3, [r2, #0]
    624a:	4b45      	ldr	r3, [pc, #276]	; (6360 <frameParse+0x3ec>)
    624c:	aa08      	add	r2, sp, #32
    624e:	881b      	ldrh	r3, [r3, #0]
    6250:	86d1      	strh	r1, [r2, #54]	; 0x36
    6252:	8653      	strh	r3, [r2, #50]	; 0x32
    6254:	466b      	mov	r3, sp
    6256:	8c18      	ldrh	r0, [r3, #32]
    6258:	ab08      	add	r3, sp, #32
    625a:	8690      	strh	r0, [r2, #52]	; 0x34
    625c:	22ff      	movs	r2, #255	; 0xff
    625e:	703a      	strb	r2, [r7, #0]
    6260:	2231      	movs	r2, #49	; 0x31
    6262:	189b      	adds	r3, r3, r2
    6264:	781b      	ldrb	r3, [r3, #0]
    6266:	4a3f      	ldr	r2, [pc, #252]	; (6364 <frameParse+0x3f0>)
    6268:	707b      	strb	r3, [r7, #1]
    626a:	7813      	ldrb	r3, [r2, #0]
    626c:	3301      	adds	r3, #1
    626e:	b2db      	uxtb	r3, r3
    6270:	7013      	strb	r3, [r2, #0]
    6272:	2231      	movs	r2, #49	; 0x31
    6274:	70bb      	strb	r3, [r7, #2]
    6276:	ab08      	add	r3, sp, #32
    6278:	189b      	adds	r3, r3, r2
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	3a11      	subs	r2, #17
    627e:	421a      	tst	r2, r3
    6280:	d160      	bne.n	6344 <frameParse+0x3d0>
    6282:	aa08      	add	r2, sp, #32
    6284:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    6286:	200a      	movs	r0, #10
    6288:	70fa      	strb	r2, [r7, #3]
    628a:	aa08      	add	r2, sp, #32
    628c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    628e:	0a12      	lsrs	r2, r2, #8
    6290:	713a      	strb	r2, [r7, #4]
    6292:	aa08      	add	r2, sp, #32
    6294:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    6296:	717a      	strb	r2, [r7, #5]
    6298:	aa08      	add	r2, sp, #32
    629a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    629c:	0a12      	lsrs	r2, r2, #8
    629e:	71ba      	strb	r2, [r7, #6]
    62a0:	aa08      	add	r2, sp, #32
    62a2:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    62a4:	71fa      	strb	r2, [r7, #7]
    62a6:	aa08      	add	r2, sp, #32
    62a8:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    62aa:	0a12      	lsrs	r2, r2, #8
    62ac:	723a      	strb	r2, [r7, #8]
    62ae:	2216      	movs	r2, #22
    62b0:	2709      	movs	r7, #9
    62b2:	920a      	str	r2, [sp, #40]	; 0x28
    62b4:	9208      	str	r2, [sp, #32]
    62b6:	3a08      	subs	r2, #8
    62b8:	4693      	mov	fp, r2
    62ba:	3a05      	subs	r2, #5
    62bc:	075b      	lsls	r3, r3, #29
    62be:	d51c      	bpl.n	62fa <frameParse+0x386>
    62c0:	4b29      	ldr	r3, [pc, #164]	; (6368 <frameParse+0x3f4>)
    62c2:	2740      	movs	r7, #64	; 0x40
    62c4:	6819      	ldr	r1, [r3, #0]
    62c6:	2320      	movs	r3, #32
    62c8:	5ccb      	ldrb	r3, [r1, r3]
    62ca:	a908      	add	r1, sp, #32
    62cc:	19c9      	adds	r1, r1, r7
    62ce:	9f07      	ldr	r7, [sp, #28]
    62d0:	700b      	strb	r3, [r1, #0]
    62d2:	46bc      	mov	ip, r7
    62d4:	4925      	ldr	r1, [pc, #148]	; (636c <frameParse+0x3f8>)
    62d6:	4460      	add	r0, ip
    62d8:	6809      	ldr	r1, [r1, #0]
    62da:	9119      	str	r1, [sp, #100]	; 0x64
    62dc:	910b      	str	r1, [sp, #44]	; 0x2c
    62de:	54bb      	strb	r3, [r7, r2]
    62e0:	a919      	add	r1, sp, #100	; 0x64
    62e2:	2204      	movs	r2, #4
    62e4:	4b22      	ldr	r3, [pc, #136]	; (6370 <frameParse+0x3fc>)
    62e6:	4798      	blx	r3
    62e8:	0039      	movs	r1, r7
    62ea:	4459      	add	r1, fp
    62ec:	0008      	movs	r0, r1
    62ee:	2208      	movs	r2, #8
    62f0:	4920      	ldr	r1, [pc, #128]	; (6374 <frameParse+0x400>)
    62f2:	4b1f      	ldr	r3, [pc, #124]	; (6370 <frameParse+0x3fc>)
    62f4:	4798      	blx	r3
    62f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    62f8:	9f08      	ldr	r7, [sp, #32]
    62fa:	2324      	movs	r3, #36	; 0x24
    62fc:	4669      	mov	r1, sp
    62fe:	18c9      	adds	r1, r1, r3
    6300:	7809      	ldrb	r1, [r1, #0]
    6302:	9807      	ldr	r0, [sp, #28]
    6304:	330e      	adds	r3, #14
    6306:	7081      	strb	r1, [r0, #2]
    6308:	5483      	strb	r3, [r0, r2]
    630a:	2300      	movs	r3, #0
    630c:	9303      	str	r3, [sp, #12]
    630e:	9302      	str	r3, [sp, #8]
    6310:	4643      	mov	r3, r8
    6312:	9301      	str	r3, [sp, #4]
    6314:	4653      	mov	r3, sl
    6316:	0039      	movs	r1, r7
    6318:	9300      	str	r3, [sp, #0]
    631a:	2201      	movs	r2, #1
    631c:	0003      	movs	r3, r0
    631e:	4f16      	ldr	r7, [pc, #88]	; (6378 <frameParse+0x404>)
    6320:	a814      	add	r0, sp, #80	; 0x50
    6322:	47b8      	blx	r7
    6324:	2800      	cmp	r0, #0
    6326:	d001      	beq.n	632c <frameParse+0x3b8>
    6328:	7861      	ldrb	r1, [r4, #1]
    632a:	e695      	b.n	6058 <frameParse+0xe4>
    632c:	9807      	ldr	r0, [sp, #28]
    632e:	4b13      	ldr	r3, [pc, #76]	; (637c <frameParse+0x408>)
    6330:	4798      	blx	r3
    6332:	7861      	ldrb	r1, [r4, #1]
    6334:	e690      	b.n	6058 <frameParse+0xe4>
    6336:	2303      	movs	r3, #3
    6338:	7862      	ldrb	r2, [r4, #1]
    633a:	4645      	mov	r5, r8
    633c:	465e      	mov	r6, fp
    633e:	9705      	str	r7, [sp, #20]
    6340:	4013      	ands	r3, r2
    6342:	e68e      	b.n	6062 <frameParse+0xee>
    6344:	2210      	movs	r2, #16
    6346:	920a      	str	r2, [sp, #40]	; 0x28
    6348:	9208      	str	r2, [sp, #32]
    634a:	3a08      	subs	r2, #8
    634c:	4693      	mov	fp, r2
    634e:	2004      	movs	r0, #4
    6350:	3a05      	subs	r2, #5
    6352:	2703      	movs	r7, #3
    6354:	e7b2      	b.n	62bc <frameParse+0x348>
    6356:	46c0      	nop			; (mov r8, r8)
    6358:	00002c59 	.word	0x00002c59
    635c:	200012f0 	.word	0x200012f0
    6360:	200012dc 	.word	0x200012dc
    6364:	200012c4 	.word	0x200012c4
    6368:	200012ac 	.word	0x200012ac
    636c:	2000132c 	.word	0x2000132c
    6370:	000074ef 	.word	0x000074ef
    6374:	2000004c 	.word	0x2000004c
    6378:	00005e1d 	.word	0x00005e1d
    637c:	00002ca1 	.word	0x00002ca1

00006380 <sendDataFrame>:
    6380:	b5f0      	push	{r4, r5, r6, r7, lr}
    6382:	4657      	mov	r7, sl
    6384:	46de      	mov	lr, fp
    6386:	464e      	mov	r6, r9
    6388:	4645      	mov	r5, r8
    638a:	b5e0      	push	{r5, r6, r7, lr}
    638c:	b091      	sub	sp, #68	; 0x44
    638e:	ab04      	add	r3, sp, #16
    6390:	469c      	mov	ip, r3
    6392:	270e      	movs	r7, #14
    6394:	4b9a      	ldr	r3, [pc, #616]	; (6600 <sendDataFrame+0x280>)
    6396:	4467      	add	r7, ip
    6398:	469a      	mov	sl, r3
    639a:	881b      	ldrh	r3, [r3, #0]
    639c:	4693      	mov	fp, r2
    639e:	b28a      	uxth	r2, r1
    63a0:	0006      	movs	r6, r0
    63a2:	9703      	str	r7, [sp, #12]
    63a4:	8039      	strh	r1, [r7, #0]
    63a6:	429a      	cmp	r2, r3
    63a8:	d100      	bne.n	63ac <sendDataFrame+0x2c>
    63aa:	e0c3      	b.n	6534 <sendDataFrame+0x1b4>
    63ac:	2800      	cmp	r0, #0
    63ae:	d100      	bne.n	63b2 <sendDataFrame+0x32>
    63b0:	e0c7      	b.n	6542 <sendDataFrame+0x1c2>
    63b2:	2078      	movs	r0, #120	; 0x78
    63b4:	4b93      	ldr	r3, [pc, #588]	; (6604 <sendDataFrame+0x284>)
    63b6:	4798      	blx	r3
    63b8:	4680      	mov	r8, r0
    63ba:	2800      	cmp	r0, #0
    63bc:	d100      	bne.n	63c0 <sendDataFrame+0x40>
    63be:	e0bc      	b.n	653a <sendDataFrame+0x1ba>
    63c0:	2108      	movs	r1, #8
    63c2:	4b91      	ldr	r3, [pc, #580]	; (6608 <sendDataFrame+0x288>)
    63c4:	ac08      	add	r4, sp, #32
    63c6:	7862      	ldrb	r2, [r4, #1]
    63c8:	881b      	ldrh	r3, [r3, #0]
    63ca:	8bf5      	ldrh	r5, [r6, #30]
    63cc:	8bb7      	ldrh	r7, [r6, #28]
    63ce:	438a      	bics	r2, r1
    63d0:	8063      	strh	r3, [r4, #2]
    63d2:	2104      	movs	r1, #4
    63d4:	2303      	movs	r3, #3
    63d6:	80e5      	strh	r5, [r4, #6]
    63d8:	7e75      	ldrb	r5, [r6, #25]
    63da:	430a      	orrs	r2, r1
    63dc:	469c      	mov	ip, r3
    63de:	2120      	movs	r1, #32
    63e0:	402b      	ands	r3, r5
    63e2:	4699      	mov	r9, r3
    63e4:	237f      	movs	r3, #127	; 0x7f
    63e6:	b2d2      	uxtb	r2, r2
    63e8:	438a      	bics	r2, r1
    63ea:	4013      	ands	r3, r2
    63ec:	4662      	mov	r2, ip
    63ee:	4393      	bics	r3, r2
    63f0:	320d      	adds	r2, #13
    63f2:	402a      	ands	r2, r5
    63f4:	464d      	mov	r5, r9
    63f6:	431d      	orrs	r5, r3
    63f8:	2310      	movs	r3, #16
    63fa:	20ff      	movs	r0, #255	; 0xff
    63fc:	439d      	bics	r5, r3
    63fe:	4643      	mov	r3, r8
    6400:	4315      	orrs	r5, r2
    6402:	4642      	mov	r2, r8
    6404:	7065      	strb	r5, [r4, #1]
    6406:	80a7      	strh	r7, [r4, #4]
    6408:	7020      	strb	r0, [r4, #0]
    640a:	7018      	strb	r0, [r3, #0]
    640c:	7863      	ldrb	r3, [r4, #1]
    640e:	4d7f      	ldr	r5, [pc, #508]	; (660c <sendDataFrame+0x28c>)
    6410:	7053      	strb	r3, [r2, #1]
    6412:	782b      	ldrb	r3, [r5, #0]
    6414:	3301      	adds	r3, #1
    6416:	b2db      	uxtb	r3, r3
    6418:	7093      	strb	r3, [r2, #2]
    641a:	702b      	strb	r3, [r5, #0]
    641c:	7863      	ldrb	r3, [r4, #1]
    641e:	4219      	tst	r1, r3
    6420:	d100      	bne.n	6424 <sendDataFrame+0xa4>
    6422:	e096      	b.n	6552 <sendDataFrame+0x1d2>
    6424:	2210      	movs	r2, #16
    6426:	2103      	movs	r1, #3
    6428:	0017      	movs	r7, r2
    642a:	9204      	str	r2, [sp, #16]
    642c:	3a08      	subs	r2, #8
    642e:	9206      	str	r2, [sp, #24]
    6430:	2003      	movs	r0, #3
    6432:	3a04      	subs	r2, #4
    6434:	9105      	str	r1, [sp, #20]
    6436:	075b      	lsls	r3, r3, #29
    6438:	d500      	bpl.n	643c <sendDataFrame+0xbc>
    643a:	e0a6      	b.n	658a <sendDataFrame+0x20a>
    643c:	4b74      	ldr	r3, [pc, #464]	; (6610 <sendDataFrame+0x290>)
    643e:	4699      	mov	r9, r3
    6440:	7cf3      	ldrb	r3, [r6, #19]
    6442:	2b00      	cmp	r3, #0
    6444:	d100      	bne.n	6448 <sendDataFrame+0xc8>
    6446:	e0be      	b.n	65c6 <sendDataFrame+0x246>
    6448:	2320      	movs	r3, #32
    644a:	4642      	mov	r2, r8
    644c:	5cf3      	ldrb	r3, [r6, r3]
    644e:	7093      	strb	r3, [r2, #2]
    6450:	782b      	ldrb	r3, [r5, #0]
    6452:	3b01      	subs	r3, #1
    6454:	702b      	strb	r3, [r5, #0]
    6456:	2538      	movs	r5, #56	; 0x38
    6458:	0031      	movs	r1, r6
    645a:	5d72      	ldrb	r2, [r6, r5]
    645c:	3139      	adds	r1, #57	; 0x39
    645e:	4440      	add	r0, r8
    6460:	47c8      	blx	r9
    6462:	5d73      	ldrb	r3, [r6, r5]
    6464:	2028      	movs	r0, #40	; 0x28
    6466:	9304      	str	r3, [sp, #16]
    6468:	7cb3      	ldrb	r3, [r6, #18]
    646a:	9306      	str	r3, [sp, #24]
    646c:	4b65      	ldr	r3, [pc, #404]	; (6604 <sendDataFrame+0x284>)
    646e:	4798      	blx	r3
    6470:	1e05      	subs	r5, r0, #0
    6472:	d062      	beq.n	653a <sendDataFrame+0x1ba>
    6474:	2300      	movs	r3, #0
    6476:	7603      	strb	r3, [r0, #24]
    6478:	7863      	ldrb	r3, [r4, #1]
    647a:	075b      	lsls	r3, r3, #29
    647c:	d500      	bpl.n	6480 <sendDataFrame+0x100>
    647e:	e0a7      	b.n	65d0 <sendDataFrame+0x250>
    6480:	9b03      	ldr	r3, [sp, #12]
    6482:	785a      	ldrb	r2, [r3, #1]
    6484:	781b      	ldrb	r3, [r3, #0]
    6486:	0212      	lsls	r2, r2, #8
    6488:	189b      	adds	r3, r3, r2
    648a:	4a62      	ldr	r2, [pc, #392]	; (6614 <sendDataFrame+0x294>)
    648c:	b29b      	uxth	r3, r3
    648e:	4293      	cmp	r3, r2
    6490:	d100      	bne.n	6494 <sendDataFrame+0x114>
    6492:	e0b1      	b.n	65f8 <sendDataFrame+0x278>
    6494:	2201      	movs	r2, #1
    6496:	2100      	movs	r1, #0
    6498:	2020      	movs	r0, #32
    649a:	7e2b      	ldrb	r3, [r5, #24]
    649c:	0152      	lsls	r2, r2, #5
    649e:	4383      	bics	r3, r0
    64a0:	4313      	orrs	r3, r2
    64a2:	2204      	movs	r2, #4
    64a4:	0089      	lsls	r1, r1, #2
    64a6:	4393      	bics	r3, r2
    64a8:	430b      	orrs	r3, r1
    64aa:	2108      	movs	r1, #8
    64ac:	438b      	bics	r3, r1
    64ae:	762b      	strb	r3, [r5, #24]
    64b0:	4653      	mov	r3, sl
    64b2:	8819      	ldrh	r1, [r3, #0]
    64b4:	4b57      	ldr	r3, [pc, #348]	; (6614 <sendDataFrame+0x294>)
    64b6:	4299      	cmp	r1, r3
    64b8:	d100      	bne.n	64bc <sendDataFrame+0x13c>
    64ba:	e09b      	b.n	65f4 <sendDataFrame+0x274>
    64bc:	7861      	ldrb	r1, [r4, #1]
    64be:	2301      	movs	r3, #1
    64c0:	420a      	tst	r2, r1
    64c2:	d007      	beq.n	64d4 <sendDataFrame+0x154>
    64c4:	2100      	movs	r1, #0
    64c6:	4a54      	ldr	r2, [pc, #336]	; (6618 <sendDataFrame+0x298>)
    64c8:	7812      	ldrb	r2, [r2, #0]
    64ca:	3a06      	subs	r2, #6
    64cc:	b2d2      	uxtb	r2, r2
    64ce:	4293      	cmp	r3, r2
    64d0:	4149      	adcs	r1, r1
    64d2:	b2cb      	uxtb	r3, r1
    64d4:	2221      	movs	r2, #33	; 0x21
    64d6:	54ab      	strb	r3, [r5, r2]
    64d8:	2320      	movs	r3, #32
    64da:	2001      	movs	r0, #1
    64dc:	3a20      	subs	r2, #32
    64de:	54ea      	strb	r2, [r5, r3]
    64e0:	7e2b      	ldrb	r3, [r5, #24]
    64e2:	0899      	lsrs	r1, r3, #2
    64e4:	4041      	eors	r1, r0
    64e6:	400a      	ands	r2, r1
    64e8:	2140      	movs	r1, #64	; 0x40
    64ea:	0192      	lsls	r2, r2, #6
    64ec:	438b      	bics	r3, r1
    64ee:	4313      	orrs	r3, r2
    64f0:	2280      	movs	r2, #128	; 0x80
    64f2:	4252      	negs	r2, r2
    64f4:	4313      	orrs	r3, r2
    64f6:	762b      	strb	r3, [r5, #24]
    64f8:	8863      	ldrh	r3, [r4, #2]
    64fa:	002c      	movs	r4, r5
    64fc:	846b      	strh	r3, [r5, #34]	; 0x22
    64fe:	4643      	mov	r3, r8
    6500:	3408      	adds	r4, #8
    6502:	616b      	str	r3, [r5, #20]
    6504:	3282      	adds	r2, #130	; 0x82
    6506:	9903      	ldr	r1, [sp, #12]
    6508:	0020      	movs	r0, r4
    650a:	47c8      	blx	r9
    650c:	465b      	mov	r3, fp
    650e:	466a      	mov	r2, sp
    6510:	612b      	str	r3, [r5, #16]
    6512:	2325      	movs	r3, #37	; 0x25
    6514:	7e12      	ldrb	r2, [r2, #24]
    6516:	61ec      	str	r4, [r5, #28]
    6518:	54ea      	strb	r2, [r5, r3]
    651a:	9a04      	ldr	r2, [sp, #16]
    651c:	9b05      	ldr	r3, [sp, #20]
    651e:	4694      	mov	ip, r2
    6520:	4463      	add	r3, ip
    6522:	0018      	movs	r0, r3
    6524:	2324      	movs	r3, #36	; 0x24
    6526:	0029      	movs	r1, r5
    6528:	54e8      	strb	r0, [r5, r3]
    652a:	483c      	ldr	r0, [pc, #240]	; (661c <sendDataFrame+0x29c>)
    652c:	4b3c      	ldr	r3, [pc, #240]	; (6620 <sendDataFrame+0x2a0>)
    652e:	4798      	blx	r3
    6530:	2001      	movs	r0, #1
    6532:	e007      	b.n	6544 <sendDataFrame+0x1c4>
    6534:	465b      	mov	r3, fp
    6536:	2b00      	cmp	r3, #0
    6538:	d003      	beq.n	6542 <sendDataFrame+0x1c2>
    653a:	7cb0      	ldrb	r0, [r6, #18]
    653c:	0032      	movs	r2, r6
    653e:	2101      	movs	r1, #1
    6540:	47d8      	blx	fp
    6542:	2000      	movs	r0, #0
    6544:	b011      	add	sp, #68	; 0x44
    6546:	bc3c      	pop	{r2, r3, r4, r5}
    6548:	4690      	mov	r8, r2
    654a:	4699      	mov	r9, r3
    654c:	46a2      	mov	sl, r4
    654e:	46ab      	mov	fp, r5
    6550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6552:	4641      	mov	r1, r8
    6554:	8862      	ldrh	r2, [r4, #2]
    6556:	38f6      	subs	r0, #246	; 0xf6
    6558:	70ca      	strb	r2, [r1, #3]
    655a:	8862      	ldrh	r2, [r4, #2]
    655c:	0a12      	lsrs	r2, r2, #8
    655e:	710a      	strb	r2, [r1, #4]
    6560:	88a2      	ldrh	r2, [r4, #4]
    6562:	714a      	strb	r2, [r1, #5]
    6564:	88a2      	ldrh	r2, [r4, #4]
    6566:	0a12      	lsrs	r2, r2, #8
    6568:	718a      	strb	r2, [r1, #6]
    656a:	88e2      	ldrh	r2, [r4, #6]
    656c:	71ca      	strb	r2, [r1, #7]
    656e:	88e2      	ldrh	r2, [r4, #6]
    6570:	0a12      	lsrs	r2, r2, #8
    6572:	720a      	strb	r2, [r1, #8]
    6574:	2216      	movs	r2, #22
    6576:	2109      	movs	r1, #9
    6578:	0017      	movs	r7, r2
    657a:	9204      	str	r2, [sp, #16]
    657c:	3a08      	subs	r2, #8
    657e:	9206      	str	r2, [sp, #24]
    6580:	9105      	str	r1, [sp, #20]
    6582:	3a04      	subs	r2, #4
    6584:	075b      	lsls	r3, r3, #29
    6586:	d400      	bmi.n	658a <sendDataFrame+0x20a>
    6588:	e758      	b.n	643c <sendDataFrame+0xbc>
    658a:	4b26      	ldr	r3, [pc, #152]	; (6624 <sendDataFrame+0x2a4>)
    658c:	4442      	add	r2, r8
    658e:	6819      	ldr	r1, [r3, #0]
    6590:	2320      	movs	r3, #32
    6592:	5ccb      	ldrb	r3, [r1, r3]
    6594:	4924      	ldr	r1, [pc, #144]	; (6628 <sendDataFrame+0x2a8>)
    6596:	7423      	strb	r3, [r4, #16]
    6598:	6809      	ldr	r1, [r1, #0]
    659a:	6161      	str	r1, [r4, #20]
    659c:	4641      	mov	r1, r8
    659e:	540b      	strb	r3, [r1, r0]
    65a0:	4b1b      	ldr	r3, [pc, #108]	; (6610 <sendDataFrame+0x290>)
    65a2:	0010      	movs	r0, r2
    65a4:	a90d      	add	r1, sp, #52	; 0x34
    65a6:	2204      	movs	r2, #4
    65a8:	4699      	mov	r9, r3
    65aa:	4798      	blx	r3
    65ac:	9b06      	ldr	r3, [sp, #24]
    65ae:	2208      	movs	r2, #8
    65b0:	4443      	add	r3, r8
    65b2:	0018      	movs	r0, r3
    65b4:	491d      	ldr	r1, [pc, #116]	; (662c <sendDataFrame+0x2ac>)
    65b6:	47c8      	blx	r9
    65b8:	9b04      	ldr	r3, [sp, #16]
    65ba:	0038      	movs	r0, r7
    65bc:	9305      	str	r3, [sp, #20]
    65be:	7cf3      	ldrb	r3, [r6, #19]
    65c0:	2b00      	cmp	r3, #0
    65c2:	d000      	beq.n	65c6 <sendDataFrame+0x246>
    65c4:	e740      	b.n	6448 <sendDataFrame+0xc8>
    65c6:	4643      	mov	r3, r8
    65c8:	789a      	ldrb	r2, [r3, #2]
    65ca:	2320      	movs	r3, #32
    65cc:	54f2      	strb	r2, [r6, r3]
    65ce:	e742      	b.n	6456 <sendDataFrame+0xd6>
    65d0:	4b17      	ldr	r3, [pc, #92]	; (6630 <sendDataFrame+0x2b0>)
    65d2:	2002      	movs	r0, #2
    65d4:	4798      	blx	r3
    65d6:	4643      	mov	r3, r8
    65d8:	9000      	str	r0, [sp, #0]
    65da:	9a04      	ldr	r2, [sp, #16]
    65dc:	9905      	ldr	r1, [sp, #20]
    65de:	0020      	movs	r0, r4
    65e0:	4f14      	ldr	r7, [pc, #80]	; (6634 <sendDataFrame+0x2b4>)
    65e2:	47b8      	blx	r7
    65e4:	28ff      	cmp	r0, #255	; 0xff
    65e6:	d0a8      	beq.n	653a <sendDataFrame+0x1ba>
    65e8:	9b04      	ldr	r3, [sp, #16]
    65ea:	469c      	mov	ip, r3
    65ec:	4460      	add	r0, ip
    65ee:	b2c3      	uxtb	r3, r0
    65f0:	9304      	str	r3, [sp, #16]
    65f2:	e745      	b.n	6480 <sendDataFrame+0x100>
    65f4:	2300      	movs	r3, #0
    65f6:	e76d      	b.n	64d4 <sendDataFrame+0x154>
    65f8:	2200      	movs	r2, #0
    65fa:	2101      	movs	r1, #1
    65fc:	e74c      	b.n	6498 <sendDataFrame+0x118>
    65fe:	46c0      	nop			; (mov r8, r8)
    6600:	200012f0 	.word	0x200012f0
    6604:	00002c59 	.word	0x00002c59
    6608:	200012dc 	.word	0x200012dc
    660c:	200012c4 	.word	0x200012c4
    6610:	000074ef 	.word	0x000074ef
    6614:	0000ffff 	.word	0x0000ffff
    6618:	20000298 	.word	0x20000298
    661c:	200012e4 	.word	0x200012e4
    6620:	00002d81 	.word	0x00002d81
    6624:	200012ac 	.word	0x200012ac
    6628:	2000132c 	.word	0x2000132c
    662c:	2000004c 	.word	0x2000004c
    6630:	00006fb9 	.word	0x00006fb9
    6634:	00006fdd 	.word	0x00006fdd

00006638 <establishTimerExpired>:
    6638:	2205      	movs	r2, #5
    663a:	b510      	push	{r4, lr}
    663c:	4b04      	ldr	r3, [pc, #16]	; (6650 <establishTimerExpired+0x18>)
    663e:	4c05      	ldr	r4, [pc, #20]	; (6654 <establishTimerExpired+0x1c>)
    6640:	701a      	strb	r2, [r3, #0]
    6642:	2004      	movs	r0, #4
    6644:	6823      	ldr	r3, [r4, #0]
    6646:	4798      	blx	r3
    6648:	2300      	movs	r3, #0
    664a:	6023      	str	r3, [r4, #0]
    664c:	bd10      	pop	{r4, pc}
    664e:	46c0      	nop			; (mov r8, r8)
    6650:	20000298 	.word	0x20000298
    6654:	200002b8 	.word	0x200002b8

00006658 <sendKeepAlive>:
    6658:	b570      	push	{r4, r5, r6, lr}
    665a:	2078      	movs	r0, #120	; 0x78
    665c:	b08c      	sub	sp, #48	; 0x30
    665e:	4b15      	ldr	r3, [pc, #84]	; (66b4 <sendKeepAlive+0x5c>)
    6660:	4798      	blx	r3
    6662:	1e04      	subs	r4, r0, #0
    6664:	d023      	beq.n	66ae <sendKeepAlive+0x56>
    6666:	4b14      	ldr	r3, [pc, #80]	; (66b8 <sendKeepAlive+0x60>)
    6668:	4e14      	ldr	r6, [pc, #80]	; (66bc <sendKeepAlive+0x64>)
    666a:	8819      	ldrh	r1, [r3, #0]
    666c:	8832      	ldrh	r2, [r6, #0]
    666e:	b289      	uxth	r1, r1
    6670:	ab04      	add	r3, sp, #16
    6672:	20ff      	movs	r0, #255	; 0xff
    6674:	4d12      	ldr	r5, [pc, #72]	; (66c0 <sendKeepAlive+0x68>)
    6676:	47a8      	blx	r5
    6678:	0021      	movs	r1, r4
    667a:	4b12      	ldr	r3, [pc, #72]	; (66c4 <sendKeepAlive+0x6c>)
    667c:	a804      	add	r0, sp, #16
    667e:	4798      	blx	r3
    6680:	2307      	movs	r3, #7
    6682:	0005      	movs	r5, r0
    6684:	5423      	strb	r3, [r4, r0]
    6686:	3001      	adds	r0, #1
    6688:	b2c0      	uxtb	r0, r0
    668a:	1820      	adds	r0, r4, r0
    668c:	2208      	movs	r2, #8
    668e:	490e      	ldr	r1, [pc, #56]	; (66c8 <sendKeepAlive+0x70>)
    6690:	4b0e      	ldr	r3, [pc, #56]	; (66cc <sendKeepAlive+0x74>)
    6692:	4798      	blx	r3
    6694:	4b0e      	ldr	r3, [pc, #56]	; (66d0 <sendKeepAlive+0x78>)
    6696:	9601      	str	r6, [sp, #4]
    6698:	9303      	str	r3, [sp, #12]
    669a:	2300      	movs	r3, #0
    669c:	9302      	str	r3, [sp, #8]
    669e:	3302      	adds	r3, #2
    66a0:	9300      	str	r3, [sp, #0]
    66a2:	2209      	movs	r2, #9
    66a4:	0023      	movs	r3, r4
    66a6:	0029      	movs	r1, r5
    66a8:	a804      	add	r0, sp, #16
    66aa:	4c0a      	ldr	r4, [pc, #40]	; (66d4 <sendKeepAlive+0x7c>)
    66ac:	47a0      	blx	r4
    66ae:	b00c      	add	sp, #48	; 0x30
    66b0:	bd70      	pop	{r4, r5, r6, pc}
    66b2:	46c0      	nop			; (mov r8, r8)
    66b4:	00002c59 	.word	0x00002c59
    66b8:	200012f0 	.word	0x200012f0
    66bc:	20000054 	.word	0x20000054
    66c0:	00005d59 	.word	0x00005d59
    66c4:	00005d85 	.word	0x00005d85
    66c8:	2000004c 	.word	0x2000004c
    66cc:	000074ef 	.word	0x000074ef
    66d0:	00006b05 	.word	0x00006b05
    66d4:	00005e1d 	.word	0x00005e1d

000066d8 <ScanChannel>:
    66d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66da:	46c6      	mov	lr, r8
    66dc:	b500      	push	{lr}
    66de:	4c2d      	ldr	r4, [pc, #180]	; (6794 <ScanChannel+0xbc>)
    66e0:	b090      	sub	sp, #64	; 0x40
    66e2:	7823      	ldrb	r3, [r4, #0]
    66e4:	0005      	movs	r5, r0
    66e6:	2b1a      	cmp	r3, #26
    66e8:	d816      	bhi.n	6718 <ScanChannel+0x40>
    66ea:	2601      	movs	r6, #1
    66ec:	4f2a      	ldr	r7, [pc, #168]	; (6798 <ScanChannel+0xc0>)
    66ee:	e004      	b.n	66fa <ScanChannel+0x22>
    66f0:	3301      	adds	r3, #1
    66f2:	b2db      	uxtb	r3, r3
    66f4:	7023      	strb	r3, [r4, #0]
    66f6:	2b1a      	cmp	r3, #26
    66f8:	d80e      	bhi.n	6718 <ScanChannel+0x40>
    66fa:	686a      	ldr	r2, [r5, #4]
    66fc:	40da      	lsrs	r2, r3
    66fe:	4216      	tst	r6, r2
    6700:	d0f6      	beq.n	66f0 <ScanChannel+0x18>
    6702:	0021      	movs	r1, r4
    6704:	2000      	movs	r0, #0
    6706:	47b8      	blx	r7
    6708:	2800      	cmp	r0, #0
    670a:	d114      	bne.n	6736 <ScanChannel+0x5e>
    670c:	7823      	ldrb	r3, [r4, #0]
    670e:	3301      	adds	r3, #1
    6710:	b2db      	uxtb	r3, r3
    6712:	7023      	strb	r3, [r4, #0]
    6714:	2b1a      	cmp	r3, #26
    6716:	d9f0      	bls.n	66fa <ScanChannel+0x22>
    6718:	2205      	movs	r2, #5
    671a:	4b20      	ldr	r3, [pc, #128]	; (679c <ScanChannel+0xc4>)
    671c:	4c20      	ldr	r4, [pc, #128]	; (67a0 <ScanChannel+0xc8>)
    671e:	701a      	strb	r2, [r3, #0]
    6720:	7868      	ldrb	r0, [r5, #1]
    6722:	6823      	ldr	r3, [r4, #0]
    6724:	0029      	movs	r1, r5
    6726:	4798      	blx	r3
    6728:	2300      	movs	r3, #0
    672a:	2000      	movs	r0, #0
    672c:	6023      	str	r3, [r4, #0]
    672e:	b010      	add	sp, #64	; 0x40
    6730:	bc04      	pop	{r2}
    6732:	4690      	mov	r8, r2
    6734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6736:	ab02      	add	r3, sp, #8
    6738:	469c      	mov	ip, r3
    673a:	2516      	movs	r5, #22
    673c:	2301      	movs	r3, #1
    673e:	4465      	add	r5, ip
    6740:	425b      	negs	r3, r3
    6742:	802b      	strh	r3, [r5, #0]
    6744:	2078      	movs	r0, #120	; 0x78
    6746:	4b17      	ldr	r3, [pc, #92]	; (67a4 <ScanChannel+0xcc>)
    6748:	4798      	blx	r3
    674a:	0004      	movs	r4, r0
    674c:	200a      	movs	r0, #10
    674e:	2c00      	cmp	r4, #0
    6750:	d0ed      	beq.n	672e <ScanChannel+0x56>
    6752:	af08      	add	r7, sp, #32
    6754:	9505      	str	r5, [sp, #20]
    6756:	882a      	ldrh	r2, [r5, #0]
    6758:	003b      	movs	r3, r7
    675a:	4913      	ldr	r1, [pc, #76]	; (67a8 <ScanChannel+0xd0>)
    675c:	3809      	subs	r0, #9
    675e:	4d13      	ldr	r5, [pc, #76]	; (67ac <ScanChannel+0xd4>)
    6760:	47a8      	blx	r5
    6762:	2220      	movs	r2, #32
    6764:	787b      	ldrb	r3, [r7, #1]
    6766:	0021      	movs	r1, r4
    6768:	4313      	orrs	r3, r2
    676a:	707b      	strb	r3, [r7, #1]
    676c:	0038      	movs	r0, r7
    676e:	4b10      	ldr	r3, [pc, #64]	; (67b0 <ScanChannel+0xd8>)
    6770:	4798      	blx	r3
    6772:	4b10      	ldr	r3, [pc, #64]	; (67b4 <ScanChannel+0xdc>)
    6774:	5426      	strb	r6, [r4, r0]
    6776:	9303      	str	r3, [sp, #12]
    6778:	2300      	movs	r3, #0
    677a:	9302      	str	r3, [sp, #8]
    677c:	9b05      	ldr	r3, [sp, #20]
    677e:	0001      	movs	r1, r0
    6780:	9301      	str	r3, [sp, #4]
    6782:	2302      	movs	r3, #2
    6784:	2201      	movs	r2, #1
    6786:	9300      	str	r3, [sp, #0]
    6788:	0038      	movs	r0, r7
    678a:	0023      	movs	r3, r4
    678c:	4c0a      	ldr	r4, [pc, #40]	; (67b8 <ScanChannel+0xe0>)
    678e:	47a0      	blx	r4
    6790:	e7cd      	b.n	672e <ScanChannel+0x56>
    6792:	46c0      	nop			; (mov r8, r8)
    6794:	200012bc 	.word	0x200012bc
    6798:	00004a35 	.word	0x00004a35
    679c:	20000298 	.word	0x20000298
    67a0:	200002bc 	.word	0x200002bc
    67a4:	00002c59 	.word	0x00002c59
    67a8:	0000ffff 	.word	0x0000ffff
    67ac:	00005d59 	.word	0x00005d59
    67b0:	00005d85 	.word	0x00005d85
    67b4:	00006975 	.word	0x00006975
    67b8:	00005e1d 	.word	0x00005e1d

000067bc <scanDurationExpired>:
    67bc:	b510      	push	{r4, lr}
    67be:	4b0d      	ldr	r3, [pc, #52]	; (67f4 <scanDurationExpired+0x38>)
    67c0:	4c0d      	ldr	r4, [pc, #52]	; (67f8 <scanDurationExpired+0x3c>)
    67c2:	781a      	ldrb	r2, [r3, #0]
    67c4:	2301      	movs	r3, #1
    67c6:	4093      	lsls	r3, r2
    67c8:	6820      	ldr	r0, [r4, #0]
    67ca:	6842      	ldr	r2, [r0, #4]
    67cc:	439a      	bics	r2, r3
    67ce:	6042      	str	r2, [r0, #4]
    67d0:	4b0a      	ldr	r3, [pc, #40]	; (67fc <scanDurationExpired+0x40>)
    67d2:	4798      	blx	r3
    67d4:	2800      	cmp	r0, #0
    67d6:	d00b      	beq.n	67f0 <scanDurationExpired+0x34>
    67d8:	2205      	movs	r2, #5
    67da:	6823      	ldr	r3, [r4, #0]
    67dc:	7018      	strb	r0, [r3, #0]
    67de:	4b08      	ldr	r3, [pc, #32]	; (6800 <scanDurationExpired+0x44>)
    67e0:	6821      	ldr	r1, [r4, #0]
    67e2:	4c08      	ldr	r4, [pc, #32]	; (6804 <scanDurationExpired+0x48>)
    67e4:	701a      	strb	r2, [r3, #0]
    67e6:	7848      	ldrb	r0, [r1, #1]
    67e8:	6823      	ldr	r3, [r4, #0]
    67ea:	4798      	blx	r3
    67ec:	2300      	movs	r3, #0
    67ee:	6023      	str	r3, [r4, #0]
    67f0:	bd10      	pop	{r4, pc}
    67f2:	46c0      	nop			; (mov r8, r8)
    67f4:	200012bc 	.word	0x200012bc
    67f8:	200002c0 	.word	0x200002c0
    67fc:	000066d9 	.word	0x000066d9
    6800:	20000298 	.word	0x20000298
    6804:	200002bc 	.word	0x200002bc

00006808 <rxOffEdKeepAliveTimerHandler>:
    6808:	b5f0      	push	{r4, r5, r6, r7, lr}
    680a:	46ce      	mov	lr, r9
    680c:	4647      	mov	r7, r8
    680e:	22ff      	movs	r2, #255	; 0xff
    6810:	2516      	movs	r5, #22
    6812:	b580      	push	{r7, lr}
    6814:	4b23      	ldr	r3, [pc, #140]	; (68a4 <rxOffEdKeepAliveTimerHandler+0x9c>)
    6816:	b08f      	sub	sp, #60	; 0x3c
    6818:	4698      	mov	r8, r3
    681a:	881b      	ldrh	r3, [r3, #0]
    681c:	446d      	add	r5, sp
    681e:	4393      	bics	r3, r2
    6820:	802b      	strh	r3, [r5, #0]
    6822:	2078      	movs	r0, #120	; 0x78
    6824:	4b20      	ldr	r3, [pc, #128]	; (68a8 <rxOffEdKeepAliveTimerHandler+0xa0>)
    6826:	4798      	blx	r3
    6828:	1e06      	subs	r6, r0, #0
    682a:	d035      	beq.n	6898 <rxOffEdKeepAliveTimerHandler+0x90>
    682c:	4c1f      	ldr	r4, [pc, #124]	; (68ac <rxOffEdKeepAliveTimerHandler+0xa4>)
    682e:	4b20      	ldr	r3, [pc, #128]	; (68b0 <rxOffEdKeepAliveTimerHandler+0xa8>)
    6830:	0020      	movs	r0, r4
    6832:	4798      	blx	r3
    6834:	4b1f      	ldr	r3, [pc, #124]	; (68b4 <rxOffEdKeepAliveTimerHandler+0xac>)
    6836:	0020      	movs	r0, r4
    6838:	6123      	str	r3, [r4, #16]
    683a:	4b1f      	ldr	r3, [pc, #124]	; (68b8 <rxOffEdKeepAliveTimerHandler+0xb0>)
    683c:	681b      	ldr	r3, [r3, #0]
    683e:	7a1a      	ldrb	r2, [r3, #8]
    6840:	23fa      	movs	r3, #250	; 0xfa
    6842:	009b      	lsls	r3, r3, #2
    6844:	4353      	muls	r3, r2
    6846:	6063      	str	r3, [r4, #4]
    6848:	60a3      	str	r3, [r4, #8]
    684a:	2300      	movs	r3, #0
    684c:	7323      	strb	r3, [r4, #12]
    684e:	4699      	mov	r9, r3
    6850:	4b1a      	ldr	r3, [pc, #104]	; (68bc <rxOffEdKeepAliveTimerHandler+0xb4>)
    6852:	4798      	blx	r3
    6854:	4643      	mov	r3, r8
    6856:	8819      	ldrh	r1, [r3, #0]
    6858:	ac06      	add	r4, sp, #24
    685a:	0023      	movs	r3, r4
    685c:	b289      	uxth	r1, r1
    685e:	882a      	ldrh	r2, [r5, #0]
    6860:	2001      	movs	r0, #1
    6862:	4f17      	ldr	r7, [pc, #92]	; (68c0 <rxOffEdKeepAliveTimerHandler+0xb8>)
    6864:	47b8      	blx	r7
    6866:	2220      	movs	r2, #32
    6868:	7863      	ldrb	r3, [r4, #1]
    686a:	0031      	movs	r1, r6
    686c:	4313      	orrs	r3, r2
    686e:	22ef      	movs	r2, #239	; 0xef
    6870:	4013      	ands	r3, r2
    6872:	7063      	strb	r3, [r4, #1]
    6874:	0020      	movs	r0, r4
    6876:	4b13      	ldr	r3, [pc, #76]	; (68c4 <rxOffEdKeepAliveTimerHandler+0xbc>)
    6878:	4798      	blx	r3
    687a:	2331      	movs	r3, #49	; 0x31
    687c:	5433      	strb	r3, [r6, r0]
    687e:	4b12      	ldr	r3, [pc, #72]	; (68c8 <rxOffEdKeepAliveTimerHandler+0xc0>)
    6880:	0001      	movs	r1, r0
    6882:	9303      	str	r3, [sp, #12]
    6884:	464b      	mov	r3, r9
    6886:	9302      	str	r3, [sp, #8]
    6888:	3302      	adds	r3, #2
    688a:	9300      	str	r3, [sp, #0]
    688c:	0020      	movs	r0, r4
    688e:	9501      	str	r5, [sp, #4]
    6890:	0033      	movs	r3, r6
    6892:	2201      	movs	r2, #1
    6894:	4c0d      	ldr	r4, [pc, #52]	; (68cc <rxOffEdKeepAliveTimerHandler+0xc4>)
    6896:	47a0      	blx	r4
    6898:	b00f      	add	sp, #60	; 0x3c
    689a:	bc0c      	pop	{r2, r3}
    689c:	4690      	mov	r8, r2
    689e:	4699      	mov	r9, r3
    68a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68a2:	46c0      	nop			; (mov r8, r8)
    68a4:	200012f0 	.word	0x200012f0
    68a8:	00002c59 	.word	0x00002c59
    68ac:	200012f4 	.word	0x200012f4
    68b0:	00002e7d 	.word	0x00002e7d
    68b4:	00006809 	.word	0x00006809
    68b8:	200012a8 	.word	0x200012a8
    68bc:	00002ee9 	.word	0x00002ee9
    68c0:	00005d59 	.word	0x00005d59
    68c4:	00005d85 	.word	0x00005d85
    68c8:	00006a31 	.word	0x00006a31
    68cc:	00005e1d 	.word	0x00005e1d

000068d0 <dataWaitIntervalTimerHandler>:
    68d0:	b570      	push	{r4, r5, r6, lr}
    68d2:	2500      	movs	r5, #0
    68d4:	4c0a      	ldr	r4, [pc, #40]	; (6900 <dataWaitIntervalTimerHandler+0x30>)
    68d6:	4b0b      	ldr	r3, [pc, #44]	; (6904 <dataWaitIntervalTimerHandler+0x34>)
    68d8:	0020      	movs	r0, r4
    68da:	701d      	strb	r5, [r3, #0]
    68dc:	4b0a      	ldr	r3, [pc, #40]	; (6908 <dataWaitIntervalTimerHandler+0x38>)
    68de:	4798      	blx	r3
    68e0:	4b0a      	ldr	r3, [pc, #40]	; (690c <dataWaitIntervalTimerHandler+0x3c>)
    68e2:	0020      	movs	r0, r4
    68e4:	6123      	str	r3, [r4, #16]
    68e6:	4b0a      	ldr	r3, [pc, #40]	; (6910 <dataWaitIntervalTimerHandler+0x40>)
    68e8:	681b      	ldr	r3, [r3, #0]
    68ea:	7a1a      	ldrb	r2, [r3, #8]
    68ec:	23fa      	movs	r3, #250	; 0xfa
    68ee:	009b      	lsls	r3, r3, #2
    68f0:	4353      	muls	r3, r2
    68f2:	6063      	str	r3, [r4, #4]
    68f4:	60a3      	str	r3, [r4, #8]
    68f6:	4b07      	ldr	r3, [pc, #28]	; (6914 <dataWaitIntervalTimerHandler+0x44>)
    68f8:	7325      	strb	r5, [r4, #12]
    68fa:	4798      	blx	r3
    68fc:	bd70      	pop	{r4, r5, r6, pc}
    68fe:	46c0      	nop			; (mov r8, r8)
    6900:	200012f4 	.word	0x200012f4
    6904:	200002b4 	.word	0x200002b4
    6908:	00002e7d 	.word	0x00002e7d
    690c:	00006809 	.word	0x00006809
    6910:	200012a8 	.word	0x200012a8
    6914:	00002ee9 	.word	0x00002ee9

00006918 <EstcommandConfcb>:
    6918:	b570      	push	{r4, r5, r6, lr}
    691a:	0010      	movs	r0, r2
    691c:	4b0e      	ldr	r3, [pc, #56]	; (6958 <EstcommandConfcb+0x40>)
    691e:	000c      	movs	r4, r1
    6920:	4798      	blx	r3
    6922:	2c00      	cmp	r4, #0
    6924:	d009      	beq.n	693a <EstcommandConfcb+0x22>
    6926:	2205      	movs	r2, #5
    6928:	4b0c      	ldr	r3, [pc, #48]	; (695c <EstcommandConfcb+0x44>)
    692a:	4d0d      	ldr	r5, [pc, #52]	; (6960 <EstcommandConfcb+0x48>)
    692c:	701a      	strb	r2, [r3, #0]
    692e:	0020      	movs	r0, r4
    6930:	682b      	ldr	r3, [r5, #0]
    6932:	4798      	blx	r3
    6934:	2300      	movs	r3, #0
    6936:	602b      	str	r3, [r5, #0]
    6938:	bd70      	pop	{r4, r5, r6, pc}
    693a:	480a      	ldr	r0, [pc, #40]	; (6964 <EstcommandConfcb+0x4c>)
    693c:	4b0a      	ldr	r3, [pc, #40]	; (6968 <EstcommandConfcb+0x50>)
    693e:	6103      	str	r3, [r0, #16]
    6940:	4b0a      	ldr	r3, [pc, #40]	; (696c <EstcommandConfcb+0x54>)
    6942:	681b      	ldr	r3, [r3, #0]
    6944:	7a9a      	ldrb	r2, [r3, #10]
    6946:	23fa      	movs	r3, #250	; 0xfa
    6948:	009b      	lsls	r3, r3, #2
    694a:	4353      	muls	r3, r2
    694c:	6043      	str	r3, [r0, #4]
    694e:	6083      	str	r3, [r0, #8]
    6950:	4b07      	ldr	r3, [pc, #28]	; (6970 <EstcommandConfcb+0x58>)
    6952:	7304      	strb	r4, [r0, #12]
    6954:	4798      	blx	r3
    6956:	e7ef      	b.n	6938 <EstcommandConfcb+0x20>
    6958:	00002ca1 	.word	0x00002ca1
    695c:	20000298 	.word	0x20000298
    6960:	200002b8 	.word	0x200002b8
    6964:	2000130c 	.word	0x2000130c
    6968:	00006639 	.word	0x00006639
    696c:	200012a8 	.word	0x200012a8
    6970:	00002ee9 	.word	0x00002ee9

00006974 <beaconReqConfcb>:
    6974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6976:	46ce      	mov	lr, r9
    6978:	4647      	mov	r7, r8
    697a:	0010      	movs	r0, r2
    697c:	b580      	push	{r7, lr}
    697e:	4b21      	ldr	r3, [pc, #132]	; (6a04 <beaconReqConfcb+0x90>)
    6980:	000d      	movs	r5, r1
    6982:	4798      	blx	r3
    6984:	2d00      	cmp	r5, #0
    6986:	d016      	beq.n	69b6 <beaconReqConfcb+0x42>
    6988:	4c1f      	ldr	r4, [pc, #124]	; (6a08 <beaconReqConfcb+0x94>)
    698a:	4b20      	ldr	r3, [pc, #128]	; (6a0c <beaconReqConfcb+0x98>)
    698c:	6820      	ldr	r0, [r4, #0]
    698e:	4798      	blx	r3
    6990:	2800      	cmp	r0, #0
    6992:	d103      	bne.n	699c <beaconReqConfcb+0x28>
    6994:	bc0c      	pop	{r2, r3}
    6996:	4690      	mov	r8, r2
    6998:	4699      	mov	r9, r3
    699a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    699c:	2205      	movs	r2, #5
    699e:	6823      	ldr	r3, [r4, #0]
    69a0:	7018      	strb	r0, [r3, #0]
    69a2:	4b1b      	ldr	r3, [pc, #108]	; (6a10 <beaconReqConfcb+0x9c>)
    69a4:	6821      	ldr	r1, [r4, #0]
    69a6:	4c1b      	ldr	r4, [pc, #108]	; (6a14 <beaconReqConfcb+0xa0>)
    69a8:	701a      	strb	r2, [r3, #0]
    69aa:	7848      	ldrb	r0, [r1, #1]
    69ac:	6823      	ldr	r3, [r4, #0]
    69ae:	4798      	blx	r3
    69b0:	2300      	movs	r3, #0
    69b2:	6023      	str	r3, [r4, #0]
    69b4:	e7ee      	b.n	6994 <beaconReqConfcb+0x20>
    69b6:	2401      	movs	r4, #1
    69b8:	0022      	movs	r2, r4
    69ba:	4e17      	ldr	r6, [pc, #92]	; (6a18 <beaconReqConfcb+0xa4>)
    69bc:	4b17      	ldr	r3, [pc, #92]	; (6a1c <beaconReqConfcb+0xa8>)
    69be:	6133      	str	r3, [r6, #16]
    69c0:	4b17      	ldr	r3, [pc, #92]	; (6a20 <beaconReqConfcb+0xac>)
    69c2:	4699      	mov	r9, r3
    69c4:	781b      	ldrb	r3, [r3, #0]
    69c6:	409a      	lsls	r2, r3
    69c8:	0013      	movs	r3, r2
    69ca:	3301      	adds	r3, #1
    69cc:	0118      	lsls	r0, r3, #4
    69ce:	1ac0      	subs	r0, r0, r3
    69d0:	4b14      	ldr	r3, [pc, #80]	; (6a24 <beaconReqConfcb+0xb0>)
    69d2:	0180      	lsls	r0, r0, #6
    69d4:	4698      	mov	r8, r3
    69d6:	4798      	blx	r3
    69d8:	21fa      	movs	r1, #250	; 0xfa
    69da:	4f13      	ldr	r7, [pc, #76]	; (6a28 <beaconReqConfcb+0xb4>)
    69dc:	0089      	lsls	r1, r1, #2
    69de:	47b8      	blx	r7
    69e0:	464b      	mov	r3, r9
    69e2:	781b      	ldrb	r3, [r3, #0]
    69e4:	6070      	str	r0, [r6, #4]
    69e6:	409c      	lsls	r4, r3
    69e8:	3401      	adds	r4, #1
    69ea:	0120      	lsls	r0, r4, #4
    69ec:	1b00      	subs	r0, r0, r4
    69ee:	0180      	lsls	r0, r0, #6
    69f0:	47c0      	blx	r8
    69f2:	21fa      	movs	r1, #250	; 0xfa
    69f4:	0089      	lsls	r1, r1, #2
    69f6:	47b8      	blx	r7
    69f8:	4b0c      	ldr	r3, [pc, #48]	; (6a2c <beaconReqConfcb+0xb8>)
    69fa:	60b0      	str	r0, [r6, #8]
    69fc:	0030      	movs	r0, r6
    69fe:	7335      	strb	r5, [r6, #12]
    6a00:	4798      	blx	r3
    6a02:	e7c7      	b.n	6994 <beaconReqConfcb+0x20>
    6a04:	00002ca1 	.word	0x00002ca1
    6a08:	200002c0 	.word	0x200002c0
    6a0c:	000066d9 	.word	0x000066d9
    6a10:	20000298 	.word	0x20000298
    6a14:	200002bc 	.word	0x200002bc
    6a18:	2000130c 	.word	0x2000130c
    6a1c:	000067bd 	.word	0x000067bd
    6a20:	20001309 	.word	0x20001309
    6a24:	000024b1 	.word	0x000024b1
    6a28:	0000719d 	.word	0x0000719d
    6a2c:	00002ee9 	.word	0x00002ee9

00006a30 <dataReqConfcb>:
    6a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a32:	0010      	movs	r0, r2
    6a34:	4b26      	ldr	r3, [pc, #152]	; (6ad0 <dataReqConfcb+0xa0>)
    6a36:	000c      	movs	r4, r1
    6a38:	4798      	blx	r3
    6a3a:	2c00      	cmp	r4, #0
    6a3c:	d11b      	bne.n	6a76 <dataReqConfcb+0x46>
    6a3e:	4b25      	ldr	r3, [pc, #148]	; (6ad4 <dataReqConfcb+0xa4>)
    6a40:	2514      	movs	r5, #20
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	2b0a      	cmp	r3, #10
    6a46:	d800      	bhi.n	6a4a <dataReqConfcb+0x1a>
    6a48:	351e      	adds	r5, #30
    6a4a:	4c23      	ldr	r4, [pc, #140]	; (6ad8 <dataReqConfcb+0xa8>)
    6a4c:	4b23      	ldr	r3, [pc, #140]	; (6adc <dataReqConfcb+0xac>)
    6a4e:	0020      	movs	r0, r4
    6a50:	4798      	blx	r3
    6a52:	4b23      	ldr	r3, [pc, #140]	; (6ae0 <dataReqConfcb+0xb0>)
    6a54:	0020      	movs	r0, r4
    6a56:	6123      	str	r3, [r4, #16]
    6a58:	2300      	movs	r3, #0
    6a5a:	7323      	strb	r3, [r4, #12]
    6a5c:	4b21      	ldr	r3, [pc, #132]	; (6ae4 <dataReqConfcb+0xb4>)
    6a5e:	6065      	str	r5, [r4, #4]
    6a60:	60a5      	str	r5, [r4, #8]
    6a62:	4798      	blx	r3
    6a64:	2201      	movs	r2, #1
    6a66:	4b20      	ldr	r3, [pc, #128]	; (6ae8 <dataReqConfcb+0xb8>)
    6a68:	4e20      	ldr	r6, [pc, #128]	; (6aec <dataReqConfcb+0xbc>)
    6a6a:	701a      	strb	r2, [r3, #0]
    6a6c:	6833      	ldr	r3, [r6, #0]
    6a6e:	7a5a      	ldrb	r2, [r3, #9]
    6a70:	4b1f      	ldr	r3, [pc, #124]	; (6af0 <dataReqConfcb+0xc0>)
    6a72:	701a      	strb	r2, [r3, #0]
    6a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a76:	4d18      	ldr	r5, [pc, #96]	; (6ad8 <dataReqConfcb+0xa8>)
    6a78:	4f18      	ldr	r7, [pc, #96]	; (6adc <dataReqConfcb+0xac>)
    6a7a:	0028      	movs	r0, r5
    6a7c:	47b8      	blx	r7
    6a7e:	4b1d      	ldr	r3, [pc, #116]	; (6af4 <dataReqConfcb+0xc4>)
    6a80:	4e1a      	ldr	r6, [pc, #104]	; (6aec <dataReqConfcb+0xbc>)
    6a82:	612b      	str	r3, [r5, #16]
    6a84:	6833      	ldr	r3, [r6, #0]
    6a86:	0028      	movs	r0, r5
    6a88:	7a1a      	ldrb	r2, [r3, #8]
    6a8a:	23fa      	movs	r3, #250	; 0xfa
    6a8c:	009b      	lsls	r3, r3, #2
    6a8e:	4353      	muls	r3, r2
    6a90:	606b      	str	r3, [r5, #4]
    6a92:	60ab      	str	r3, [r5, #8]
    6a94:	2300      	movs	r3, #0
    6a96:	732b      	strb	r3, [r5, #12]
    6a98:	4b12      	ldr	r3, [pc, #72]	; (6ae4 <dataReqConfcb+0xb4>)
    6a9a:	4798      	blx	r3
    6a9c:	2c03      	cmp	r4, #3
    6a9e:	d1e5      	bne.n	6a6c <dataReqConfcb+0x3c>
    6aa0:	4a13      	ldr	r2, [pc, #76]	; (6af0 <dataReqConfcb+0xc0>)
    6aa2:	7813      	ldrb	r3, [r2, #0]
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	d0e5      	beq.n	6a74 <dataReqConfcb+0x44>
    6aa8:	3b01      	subs	r3, #1
    6aaa:	b2db      	uxtb	r3, r3
    6aac:	7013      	strb	r3, [r2, #0]
    6aae:	2b00      	cmp	r3, #0
    6ab0:	d1e0      	bne.n	6a74 <dataReqConfcb+0x44>
    6ab2:	0028      	movs	r0, r5
    6ab4:	47b8      	blx	r7
    6ab6:	2208      	movs	r2, #8
    6ab8:	4b0f      	ldr	r3, [pc, #60]	; (6af8 <dataReqConfcb+0xc8>)
    6aba:	701a      	strb	r2, [r3, #0]
    6abc:	4b0f      	ldr	r3, [pc, #60]	; (6afc <dataReqConfcb+0xcc>)
    6abe:	3a09      	subs	r2, #9
    6ac0:	801a      	strh	r2, [r3, #0]
    6ac2:	4b0f      	ldr	r3, [pc, #60]	; (6b00 <dataReqConfcb+0xd0>)
    6ac4:	681b      	ldr	r3, [r3, #0]
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d0d4      	beq.n	6a74 <dataReqConfcb+0x44>
    6aca:	4798      	blx	r3
    6acc:	e7d2      	b.n	6a74 <dataReqConfcb+0x44>
    6ace:	46c0      	nop			; (mov r8, r8)
    6ad0:	00002ca1 	.word	0x00002ca1
    6ad4:	200012bc 	.word	0x200012bc
    6ad8:	200012f4 	.word	0x200012f4
    6adc:	00002e7d 	.word	0x00002e7d
    6ae0:	000068d1 	.word	0x000068d1
    6ae4:	00002ee9 	.word	0x00002ee9
    6ae8:	200002b4 	.word	0x200002b4
    6aec:	200012a8 	.word	0x200012a8
    6af0:	20001308 	.word	0x20001308
    6af4:	00006809 	.word	0x00006809
    6af8:	20000298 	.word	0x20000298
    6afc:	200012f0 	.word	0x200012f0
    6b00:	20001328 	.word	0x20001328

00006b04 <keepAliveReqConfcb>:
    6b04:	b570      	push	{r4, r5, r6, lr}
    6b06:	0015      	movs	r5, r2
    6b08:	22ff      	movs	r2, #255	; 0xff
    6b0a:	4c14      	ldr	r4, [pc, #80]	; (6b5c <keepAliveReqConfcb+0x58>)
    6b0c:	8823      	ldrh	r3, [r4, #0]
    6b0e:	421a      	tst	r2, r3
    6b10:	d103      	bne.n	6b1a <keepAliveReqConfcb+0x16>
    6b12:	0028      	movs	r0, r5
    6b14:	4b12      	ldr	r3, [pc, #72]	; (6b60 <keepAliveReqConfcb+0x5c>)
    6b16:	4798      	blx	r3
    6b18:	bd70      	pop	{r4, r5, r6, pc}
    6b1a:	2903      	cmp	r1, #3
    6b1c:	d005      	beq.n	6b2a <keepAliveReqConfcb+0x26>
    6b1e:	4b11      	ldr	r3, [pc, #68]	; (6b64 <keepAliveReqConfcb+0x60>)
    6b20:	681b      	ldr	r3, [r3, #0]
    6b22:	7a5a      	ldrb	r2, [r3, #9]
    6b24:	4b10      	ldr	r3, [pc, #64]	; (6b68 <keepAliveReqConfcb+0x64>)
    6b26:	701a      	strb	r2, [r3, #0]
    6b28:	e7f3      	b.n	6b12 <keepAliveReqConfcb+0xe>
    6b2a:	4a0f      	ldr	r2, [pc, #60]	; (6b68 <keepAliveReqConfcb+0x64>)
    6b2c:	7813      	ldrb	r3, [r2, #0]
    6b2e:	2b00      	cmp	r3, #0
    6b30:	d0ef      	beq.n	6b12 <keepAliveReqConfcb+0xe>
    6b32:	3b01      	subs	r3, #1
    6b34:	b2db      	uxtb	r3, r3
    6b36:	7013      	strb	r3, [r2, #0]
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d1ea      	bne.n	6b12 <keepAliveReqConfcb+0xe>
    6b3c:	4b0b      	ldr	r3, [pc, #44]	; (6b6c <keepAliveReqConfcb+0x68>)
    6b3e:	480c      	ldr	r0, [pc, #48]	; (6b70 <keepAliveReqConfcb+0x6c>)
    6b40:	4798      	blx	r3
    6b42:	2208      	movs	r2, #8
    6b44:	4b0b      	ldr	r3, [pc, #44]	; (6b74 <keepAliveReqConfcb+0x70>)
    6b46:	701a      	strb	r2, [r3, #0]
    6b48:	2301      	movs	r3, #1
    6b4a:	425b      	negs	r3, r3
    6b4c:	8023      	strh	r3, [r4, #0]
    6b4e:	4b0a      	ldr	r3, [pc, #40]	; (6b78 <keepAliveReqConfcb+0x74>)
    6b50:	681b      	ldr	r3, [r3, #0]
    6b52:	2b00      	cmp	r3, #0
    6b54:	d0dd      	beq.n	6b12 <keepAliveReqConfcb+0xe>
    6b56:	4798      	blx	r3
    6b58:	e7db      	b.n	6b12 <keepAliveReqConfcb+0xe>
    6b5a:	46c0      	nop			; (mov r8, r8)
    6b5c:	200012f0 	.word	0x200012f0
    6b60:	00002ca1 	.word	0x00002ca1
    6b64:	200012a8 	.word	0x200012a8
    6b68:	20001308 	.word	0x20001308
    6b6c:	00002e7d 	.word	0x00002e7d
    6b70:	200012f4 	.word	0x200012f4
    6b74:	20000298 	.word	0x20000298
    6b78:	20001328 	.word	0x20001328

00006b7c <MiApp_EstablishConnection>:
    6b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b7e:	46ce      	mov	lr, r9
    6b80:	4647      	mov	r7, r8
    6b82:	b580      	push	{r7, lr}
    6b84:	001e      	movs	r6, r3
    6b86:	4b2e      	ldr	r3, [pc, #184]	; (6c40 <MiApp_EstablishConnection+0xc4>)
    6b88:	b08f      	sub	sp, #60	; 0x3c
    6b8a:	681b      	ldr	r3, [r3, #0]
    6b8c:	0004      	movs	r4, r0
    6b8e:	681b      	ldr	r3, [r3, #0]
    6b90:	0015      	movs	r5, r2
    6b92:	9305      	str	r3, [sp, #20]
    6b94:	4b2b      	ldr	r3, [pc, #172]	; (6c44 <MiApp_EstablishConnection+0xc8>)
    6b96:	4798      	blx	r3
    6b98:	40e0      	lsrs	r0, r4
    6b9a:	2401      	movs	r4, #1
    6b9c:	07c3      	lsls	r3, r0, #31
    6b9e:	d507      	bpl.n	6bb0 <MiApp_EstablishConnection+0x34>
    6ba0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	d004      	beq.n	6bb0 <MiApp_EstablishConnection+0x34>
    6ba6:	4f28      	ldr	r7, [pc, #160]	; (6c48 <MiApp_EstablishConnection+0xcc>)
    6ba8:	783b      	ldrb	r3, [r7, #0]
    6baa:	2b00      	cmp	r3, #0
    6bac:	d106      	bne.n	6bbc <MiApp_EstablishConnection+0x40>
    6bae:	2400      	movs	r4, #0
    6bb0:	0020      	movs	r0, r4
    6bb2:	b00f      	add	sp, #60	; 0x3c
    6bb4:	bc0c      	pop	{r2, r3}
    6bb6:	4690      	mov	r8, r2
    6bb8:	4699      	mov	r9, r3
    6bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bbc:	2078      	movs	r0, #120	; 0x78
    6bbe:	4b23      	ldr	r3, [pc, #140]	; (6c4c <MiApp_EstablishConnection+0xd0>)
    6bc0:	4798      	blx	r3
    6bc2:	4680      	mov	r8, r0
    6bc4:	2800      	cmp	r0, #0
    6bc6:	d0f2      	beq.n	6bae <MiApp_EstablishConnection+0x32>
    6bc8:	2304      	movs	r3, #4
    6bca:	703b      	strb	r3, [r7, #0]
    6bcc:	786b      	ldrb	r3, [r5, #1]
    6bce:	782a      	ldrb	r2, [r5, #0]
    6bd0:	021b      	lsls	r3, r3, #8
    6bd2:	18d2      	adds	r2, r2, r3
    6bd4:	b292      	uxth	r2, r2
    6bd6:	ab06      	add	r3, sp, #24
    6bd8:	491d      	ldr	r1, [pc, #116]	; (6c50 <MiApp_EstablishConnection+0xd4>)
    6bda:	2001      	movs	r0, #1
    6bdc:	4f1d      	ldr	r7, [pc, #116]	; (6c54 <MiApp_EstablishConnection+0xd8>)
    6bde:	47b8      	blx	r7
    6be0:	466b      	mov	r3, sp
    6be2:	2220      	movs	r2, #32
    6be4:	7e5b      	ldrb	r3, [r3, #25]
    6be6:	4641      	mov	r1, r8
    6be8:	4313      	orrs	r3, r2
    6bea:	466a      	mov	r2, sp
    6bec:	a806      	add	r0, sp, #24
    6bee:	7653      	strb	r3, [r2, #25]
    6bf0:	4b19      	ldr	r3, [pc, #100]	; (6c58 <MiApp_EstablishConnection+0xdc>)
    6bf2:	4798      	blx	r3
    6bf4:	4642      	mov	r2, r8
    6bf6:	2303      	movs	r3, #3
    6bf8:	5413      	strb	r3, [r2, r0]
    6bfa:	0003      	movs	r3, r0
    6bfc:	3301      	adds	r3, #1
    6bfe:	b2db      	uxtb	r3, r3
    6c00:	54d4      	strb	r4, [r2, r3]
    6c02:	0003      	movs	r3, r0
    6c04:	4681      	mov	r9, r0
    6c06:	3302      	adds	r3, #2
    6c08:	3003      	adds	r0, #3
    6c0a:	b2db      	uxtb	r3, r3
    6c0c:	b2c0      	uxtb	r0, r0
    6c0e:	54d6      	strb	r6, [r2, r3]
    6c10:	a905      	add	r1, sp, #20
    6c12:	2204      	movs	r2, #4
    6c14:	4b11      	ldr	r3, [pc, #68]	; (6c5c <MiApp_EstablishConnection+0xe0>)
    6c16:	4440      	add	r0, r8
    6c18:	4798      	blx	r3
    6c1a:	4b11      	ldr	r3, [pc, #68]	; (6c60 <MiApp_EstablishConnection+0xe4>)
    6c1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6c1e:	4c11      	ldr	r4, [pc, #68]	; (6c64 <MiApp_EstablishConnection+0xe8>)
    6c20:	601a      	str	r2, [r3, #0]
    6c22:	4b11      	ldr	r3, [pc, #68]	; (6c68 <MiApp_EstablishConnection+0xec>)
    6c24:	9501      	str	r5, [sp, #4]
    6c26:	9303      	str	r3, [sp, #12]
    6c28:	2300      	movs	r3, #0
    6c2a:	9302      	str	r3, [sp, #8]
    6c2c:	3302      	adds	r3, #2
    6c2e:	9300      	str	r3, [sp, #0]
    6c30:	2207      	movs	r2, #7
    6c32:	4643      	mov	r3, r8
    6c34:	4649      	mov	r1, r9
    6c36:	a806      	add	r0, sp, #24
    6c38:	47a0      	blx	r4
    6c3a:	0004      	movs	r4, r0
    6c3c:	e7b8      	b.n	6bb0 <MiApp_EstablishConnection+0x34>
    6c3e:	46c0      	nop			; (mov r8, r8)
    6c40:	200012a8 	.word	0x200012a8
    6c44:	000024b5 	.word	0x000024b5
    6c48:	20000298 	.word	0x20000298
    6c4c:	00002c59 	.word	0x00002c59
    6c50:	0000ffff 	.word	0x0000ffff
    6c54:	00005d59 	.word	0x00005d59
    6c58:	00005d85 	.word	0x00005d85
    6c5c:	000074ef 	.word	0x000074ef
    6c60:	200002b8 	.word	0x200002b8
    6c64:	00005e1d 	.word	0x00005e1d
    6c68:	00006919 	.word	0x00006919

00006c6c <MiApp_SearchConnection>:
    6c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c6e:	0003      	movs	r3, r0
    6c70:	2001      	movs	r0, #1
    6c72:	2b0e      	cmp	r3, #14
    6c74:	d80a      	bhi.n	6c8c <MiApp_SearchConnection+0x20>
    6c76:	2a00      	cmp	r2, #0
    6c78:	d008      	beq.n	6c8c <MiApp_SearchConnection+0x20>
    6c7a:	4d18      	ldr	r5, [pc, #96]	; (6cdc <MiApp_SearchConnection+0x70>)
    6c7c:	2604      	movs	r6, #4
    6c7e:	782c      	ldrb	r4, [r5, #0]
    6c80:	0027      	movs	r7, r4
    6c82:	43b7      	bics	r7, r6
    6c84:	2f01      	cmp	r7, #1
    6c86:	d002      	beq.n	6c8e <MiApp_SearchConnection+0x22>
    6c88:	2c08      	cmp	r4, #8
    6c8a:	d000      	beq.n	6c8e <MiApp_SearchConnection+0x22>
    6c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c8e:	2003      	movs	r0, #3
    6c90:	7028      	strb	r0, [r5, #0]
    6c92:	2500      	movs	r5, #0
    6c94:	4812      	ldr	r0, [pc, #72]	; (6ce0 <MiApp_SearchConnection+0x74>)
    6c96:	4c13      	ldr	r4, [pc, #76]	; (6ce4 <MiApp_SearchConnection+0x78>)
    6c98:	7003      	strb	r3, [r0, #0]
    6c9a:	4b13      	ldr	r3, [pc, #76]	; (6ce8 <MiApp_SearchConnection+0x7c>)
    6c9c:	681b      	ldr	r3, [r3, #0]
    6c9e:	691b      	ldr	r3, [r3, #16]
    6ca0:	6023      	str	r3, [r4, #0]
    6ca2:	705d      	strb	r5, [r3, #1]
    6ca4:	2308      	movs	r3, #8
    6ca6:	6820      	ldr	r0, [r4, #0]
    6ca8:	7003      	strb	r3, [r0, #0]
    6caa:	6823      	ldr	r3, [r4, #0]
    6cac:	6059      	str	r1, [r3, #4]
    6cae:	4b0f      	ldr	r3, [pc, #60]	; (6cec <MiApp_SearchConnection+0x80>)
    6cb0:	601a      	str	r2, [r3, #0]
    6cb2:	4b0f      	ldr	r3, [pc, #60]	; (6cf0 <MiApp_SearchConnection+0x84>)
    6cb4:	4798      	blx	r3
    6cb6:	4e0f      	ldr	r6, [pc, #60]	; (6cf4 <MiApp_SearchConnection+0x88>)
    6cb8:	2101      	movs	r1, #1
    6cba:	7035      	strb	r5, [r6, #0]
    6cbc:	2201      	movs	r2, #1
    6cbe:	07c3      	lsls	r3, r0, #31
    6cc0:	d501      	bpl.n	6cc6 <MiApp_SearchConnection+0x5a>
    6cc2:	e006      	b.n	6cd2 <MiApp_SearchConnection+0x66>
    6cc4:	0019      	movs	r1, r3
    6cc6:	1c4b      	adds	r3, r1, #1
    6cc8:	0052      	lsls	r2, r2, #1
    6cca:	b2db      	uxtb	r3, r3
    6ccc:	4202      	tst	r2, r0
    6cce:	d0f9      	beq.n	6cc4 <MiApp_SearchConnection+0x58>
    6cd0:	7031      	strb	r1, [r6, #0]
    6cd2:	6820      	ldr	r0, [r4, #0]
    6cd4:	4b08      	ldr	r3, [pc, #32]	; (6cf8 <MiApp_SearchConnection+0x8c>)
    6cd6:	4798      	blx	r3
    6cd8:	e7d8      	b.n	6c8c <MiApp_SearchConnection+0x20>
    6cda:	46c0      	nop			; (mov r8, r8)
    6cdc:	20000298 	.word	0x20000298
    6ce0:	20001309 	.word	0x20001309
    6ce4:	200002c0 	.word	0x200002c0
    6ce8:	200012a8 	.word	0x200012a8
    6cec:	200002bc 	.word	0x200002bc
    6cf0:	000024b5 	.word	0x000024b5
    6cf4:	200012bc 	.word	0x200012bc
    6cf8:	000066d9 	.word	0x000066d9

00006cfc <handleJoinMessage>:
    6cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cfe:	4657      	mov	r7, sl
    6d00:	464e      	mov	r6, r9
    6d02:	4645      	mov	r5, r8
    6d04:	46de      	mov	lr, fp
    6d06:	b5e0      	push	{r5, r6, r7, lr}
    6d08:	001d      	movs	r5, r3
    6d0a:	782c      	ldrb	r4, [r5, #0]
    6d0c:	ab0a      	add	r3, sp, #40	; 0x28
    6d0e:	0006      	movs	r6, r0
    6d10:	781f      	ldrb	r7, [r3, #0]
    6d12:	2c04      	cmp	r4, #4
    6d14:	d03a      	beq.n	6d8c <handleJoinMessage+0x90>
    6d16:	2c08      	cmp	r4, #8
    6d18:	d029      	beq.n	6d6e <handleJoinMessage+0x72>
    6d1a:	2c02      	cmp	r4, #2
    6d1c:	d005      	beq.n	6d2a <handleJoinMessage+0x2e>
    6d1e:	bc3c      	pop	{r2, r3, r4, r5}
    6d20:	4690      	mov	r8, r2
    6d22:	4699      	mov	r9, r3
    6d24:	46a2      	mov	sl, r4
    6d26:	46ab      	mov	fp, r5
    6d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d2a:	4c74      	ldr	r4, [pc, #464]	; (6efc <handleJoinMessage+0x200>)
    6d2c:	7823      	ldrb	r3, [r4, #0]
    6d2e:	2b03      	cmp	r3, #3
    6d30:	d1f5      	bne.n	6d1e <handleJoinMessage+0x22>
    6d32:	4b73      	ldr	r3, [pc, #460]	; (6f00 <handleJoinMessage+0x204>)
    6d34:	4698      	mov	r8, r3
    6d36:	681b      	ldr	r3, [r3, #0]
    6d38:	785a      	ldrb	r2, [r3, #1]
    6d3a:	4b72      	ldr	r3, [pc, #456]	; (6f04 <handleJoinMessage+0x208>)
    6d3c:	4699      	mov	r9, r3
    6d3e:	681b      	ldr	r3, [r3, #0]
    6d40:	7d1b      	ldrb	r3, [r3, #20]
    6d42:	429a      	cmp	r2, r3
    6d44:	d335      	bcc.n	6db2 <handleJoinMessage+0xb6>
    6d46:	429a      	cmp	r2, r3
    6d48:	d1e9      	bne.n	6d1e <handleJoinMessage+0x22>
    6d4a:	486f      	ldr	r0, [pc, #444]	; (6f08 <handleJoinMessage+0x20c>)
    6d4c:	4b6f      	ldr	r3, [pc, #444]	; (6f0c <handleJoinMessage+0x210>)
    6d4e:	4798      	blx	r3
    6d50:	4642      	mov	r2, r8
    6d52:	2309      	movs	r3, #9
    6d54:	6812      	ldr	r2, [r2, #0]
    6d56:	7013      	strb	r3, [r2, #0]
    6d58:	3b04      	subs	r3, #4
    6d5a:	7023      	strb	r3, [r4, #0]
    6d5c:	4643      	mov	r3, r8
    6d5e:	4c6c      	ldr	r4, [pc, #432]	; (6f10 <handleJoinMessage+0x214>)
    6d60:	6819      	ldr	r1, [r3, #0]
    6d62:	6823      	ldr	r3, [r4, #0]
    6d64:	7848      	ldrb	r0, [r1, #1]
    6d66:	4798      	blx	r3
    6d68:	2300      	movs	r3, #0
    6d6a:	6023      	str	r3, [r4, #0]
    6d6c:	e7d7      	b.n	6d1e <handleJoinMessage+0x22>
    6d6e:	4b67      	ldr	r3, [pc, #412]	; (6f0c <handleJoinMessage+0x210>)
    6d70:	4868      	ldr	r0, [pc, #416]	; (6f14 <handleJoinMessage+0x218>)
    6d72:	4798      	blx	r3
    6d74:	2201      	movs	r2, #1
    6d76:	4b61      	ldr	r3, [pc, #388]	; (6efc <handleJoinMessage+0x200>)
    6d78:	4252      	negs	r2, r2
    6d7a:	701c      	strb	r4, [r3, #0]
    6d7c:	4b66      	ldr	r3, [pc, #408]	; (6f18 <handleJoinMessage+0x21c>)
    6d7e:	801a      	strh	r2, [r3, #0]
    6d80:	4b66      	ldr	r3, [pc, #408]	; (6f1c <handleJoinMessage+0x220>)
    6d82:	681b      	ldr	r3, [r3, #0]
    6d84:	2b00      	cmp	r3, #0
    6d86:	d0ca      	beq.n	6d1e <handleJoinMessage+0x22>
    6d88:	4798      	blx	r3
    6d8a:	e7c8      	b.n	6d1e <handleJoinMessage+0x22>
    6d8c:	4c5b      	ldr	r4, [pc, #364]	; (6efc <handleJoinMessage+0x200>)
    6d8e:	7823      	ldrb	r3, [r4, #0]
    6d90:	2b04      	cmp	r3, #4
    6d92:	d1c4      	bne.n	6d1e <handleJoinMessage+0x22>
    6d94:	485c      	ldr	r0, [pc, #368]	; (6f08 <handleJoinMessage+0x20c>)
    6d96:	4b5d      	ldr	r3, [pc, #372]	; (6f0c <handleJoinMessage+0x210>)
    6d98:	4798      	blx	r3
    6d9a:	786f      	ldrb	r7, [r5, #1]
    6d9c:	2f00      	cmp	r7, #0
    6d9e:	d067      	beq.n	6e70 <handleJoinMessage+0x174>
    6da0:	2305      	movs	r3, #5
    6da2:	7023      	strb	r3, [r4, #0]
    6da4:	4c5e      	ldr	r4, [pc, #376]	; (6f20 <handleJoinMessage+0x224>)
    6da6:	0038      	movs	r0, r7
    6da8:	6823      	ldr	r3, [r4, #0]
    6daa:	4798      	blx	r3
    6dac:	2300      	movs	r3, #0
    6dae:	6023      	str	r3, [r4, #0]
    6db0:	e7b5      	b.n	6d1e <handleJoinMessage+0x22>
    6db2:	1deb      	adds	r3, r5, #7
    6db4:	469a      	mov	sl, r3
    6db6:	0018      	movs	r0, r3
    6db8:	4a5a      	ldr	r2, [pc, #360]	; (6f24 <handleJoinMessage+0x228>)
    6dba:	2108      	movs	r1, #8
    6dbc:	4b5a      	ldr	r3, [pc, #360]	; (6f28 <handleJoinMessage+0x22c>)
    6dbe:	4798      	blx	r3
    6dc0:	2800      	cmp	r0, #0
    6dc2:	d0ac      	beq.n	6d1e <handleJoinMessage+0x22>
    6dc4:	4642      	mov	r2, r8
    6dc6:	2300      	movs	r3, #0
    6dc8:	6812      	ldr	r2, [r2, #0]
    6dca:	7013      	strb	r3, [r2, #0]
    6dcc:	4643      	mov	r3, r8
    6dce:	681b      	ldr	r3, [r3, #0]
    6dd0:	88f0      	ldrh	r0, [r6, #6]
    6dd2:	469c      	mov	ip, r3
    6dd4:	785b      	ldrb	r3, [r3, #1]
    6dd6:	469b      	mov	fp, r3
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d017      	beq.n	6e0c <handleJoinMessage+0x110>
    6ddc:	4663      	mov	r3, ip
    6dde:	8a1b      	ldrh	r3, [r3, #16]
    6de0:	4283      	cmp	r3, r0
    6de2:	d09c      	beq.n	6d1e <handleJoinMessage+0x22>
    6de4:	465a      	mov	r2, fp
    6de6:	4663      	mov	r3, ip
    6de8:	3a01      	subs	r2, #1
    6dea:	b2d2      	uxtb	r2, r2
    6dec:	00d1      	lsls	r1, r2, #3
    6dee:	1889      	adds	r1, r1, r2
    6df0:	0049      	lsls	r1, r1, #1
    6df2:	3122      	adds	r1, #34	; 0x22
    6df4:	3322      	adds	r3, #34	; 0x22
    6df6:	4461      	add	r1, ip
    6df8:	e006      	b.n	6e08 <handleJoinMessage+0x10c>
    6dfa:	3312      	adds	r3, #18
    6dfc:	001a      	movs	r2, r3
    6dfe:	3a12      	subs	r2, #18
    6e00:	8812      	ldrh	r2, [r2, #0]
    6e02:	4282      	cmp	r2, r0
    6e04:	d100      	bne.n	6e08 <handleJoinMessage+0x10c>
    6e06:	e78a      	b.n	6d1e <handleJoinMessage+0x22>
    6e08:	4299      	cmp	r1, r3
    6e0a:	d1f6      	bne.n	6dfa <handleJoinMessage+0xfe>
    6e0c:	465b      	mov	r3, fp
    6e0e:	4a47      	ldr	r2, [pc, #284]	; (6f2c <handleJoinMessage+0x230>)
    6e10:	00db      	lsls	r3, r3, #3
    6e12:	445b      	add	r3, fp
    6e14:	7812      	ldrb	r2, [r2, #0]
    6e16:	005b      	lsls	r3, r3, #1
    6e18:	4463      	add	r3, ip
    6e1a:	8218      	strh	r0, [r3, #16]
    6e1c:	731a      	strb	r2, [r3, #12]
    6e1e:	8872      	ldrh	r2, [r6, #2]
    6e20:	1d69      	adds	r1, r5, #5
    6e22:	81da      	strh	r2, [r3, #14]
    6e24:	786a      	ldrb	r2, [r5, #1]
    6e26:	721a      	strb	r2, [r3, #8]
    6e28:	78aa      	ldrb	r2, [r5, #2]
    6e2a:	725a      	strb	r2, [r3, #9]
    6e2c:	78ea      	ldrb	r2, [r5, #3]
    6e2e:	729a      	strb	r2, [r3, #10]
    6e30:	792a      	ldrb	r2, [r5, #4]
    6e32:	4d3f      	ldr	r5, [pc, #252]	; (6f30 <handleJoinMessage+0x234>)
    6e34:	72da      	strb	r2, [r3, #11]
    6e36:	465b      	mov	r3, fp
    6e38:	3301      	adds	r3, #1
    6e3a:	00d8      	lsls	r0, r3, #3
    6e3c:	18c0      	adds	r0, r0, r3
    6e3e:	0040      	lsls	r0, r0, #1
    6e40:	4460      	add	r0, ip
    6e42:	2208      	movs	r2, #8
    6e44:	47a8      	blx	r5
    6e46:	2208      	movs	r2, #8
    6e48:	4651      	mov	r1, sl
    6e4a:	483a      	ldr	r0, [pc, #232]	; (6f34 <handleJoinMessage+0x238>)
    6e4c:	47a8      	blx	r5
    6e4e:	4643      	mov	r3, r8
    6e50:	681a      	ldr	r2, [r3, #0]
    6e52:	7851      	ldrb	r1, [r2, #1]
    6e54:	00cb      	lsls	r3, r1, #3
    6e56:	185b      	adds	r3, r3, r1
    6e58:	005b      	lsls	r3, r3, #1
    6e5a:	18d3      	adds	r3, r2, r3
    6e5c:	735f      	strb	r7, [r3, #13]
    6e5e:	4643      	mov	r3, r8
    6e60:	3101      	adds	r1, #1
    6e62:	7051      	strb	r1, [r2, #1]
    6e64:	681b      	ldr	r3, [r3, #0]
    6e66:	785a      	ldrb	r2, [r3, #1]
    6e68:	464b      	mov	r3, r9
    6e6a:	681b      	ldr	r3, [r3, #0]
    6e6c:	7d1b      	ldrb	r3, [r3, #20]
    6e6e:	e76a      	b.n	6d46 <handleJoinMessage+0x4a>
    6e70:	78ea      	ldrb	r2, [r5, #3]
    6e72:	78ab      	ldrb	r3, [r5, #2]
    6e74:	0212      	lsls	r2, r2, #8
    6e76:	4313      	orrs	r3, r2
    6e78:	4a27      	ldr	r2, [pc, #156]	; (6f18 <handleJoinMessage+0x21c>)
    6e7a:	492f      	ldr	r1, [pc, #188]	; (6f38 <handleJoinMessage+0x23c>)
    6e7c:	4690      	mov	r8, r2
    6e7e:	8013      	strh	r3, [r2, #0]
    6e80:	88f2      	ldrh	r2, [r6, #6]
    6e82:	4b2e      	ldr	r3, [pc, #184]	; (6f3c <handleJoinMessage+0x240>)
    6e84:	4640      	mov	r0, r8
    6e86:	801a      	strh	r2, [r3, #0]
    6e88:	8873      	ldrh	r3, [r6, #2]
    6e8a:	800b      	strh	r3, [r1, #0]
    6e8c:	4b2c      	ldr	r3, [pc, #176]	; (6f40 <handleJoinMessage+0x244>)
    6e8e:	4798      	blx	r3
    6e90:	4b1c      	ldr	r3, [pc, #112]	; (6f04 <handleJoinMessage+0x208>)
    6e92:	1d29      	adds	r1, r5, #4
    6e94:	681e      	ldr	r6, [r3, #0]
    6e96:	4b2b      	ldr	r3, [pc, #172]	; (6f44 <handleJoinMessage+0x248>)
    6e98:	7a72      	ldrb	r2, [r6, #9]
    6e9a:	701a      	strb	r2, [r3, #0]
    6e9c:	4b2a      	ldr	r3, [pc, #168]	; (6f48 <handleJoinMessage+0x24c>)
    6e9e:	2210      	movs	r2, #16
    6ea0:	6818      	ldr	r0, [r3, #0]
    6ea2:	4b23      	ldr	r3, [pc, #140]	; (6f30 <handleJoinMessage+0x234>)
    6ea4:	3010      	adds	r0, #16
    6ea6:	4798      	blx	r3
    6ea8:	2306      	movs	r3, #6
    6eaa:	7023      	strb	r3, [r4, #0]
    6eac:	4643      	mov	r3, r8
    6eae:	22ff      	movs	r2, #255	; 0xff
    6eb0:	881b      	ldrh	r3, [r3, #0]
    6eb2:	421a      	tst	r2, r3
    6eb4:	d012      	beq.n	6edc <handleJoinMessage+0x1e0>
    6eb6:	4643      	mov	r3, r8
    6eb8:	881b      	ldrh	r3, [r3, #0]
    6eba:	4816      	ldr	r0, [pc, #88]	; (6f14 <handleJoinMessage+0x218>)
    6ebc:	061b      	lsls	r3, r3, #24
    6ebe:	d50f      	bpl.n	6ee0 <handleJoinMessage+0x1e4>
    6ec0:	4b22      	ldr	r3, [pc, #136]	; (6f4c <handleJoinMessage+0x250>)
    6ec2:	6103      	str	r3, [r0, #16]
    6ec4:	23fa      	movs	r3, #250	; 0xfa
    6ec6:	88b2      	ldrh	r2, [r6, #4]
    6ec8:	009b      	lsls	r3, r3, #2
    6eca:	435a      	muls	r2, r3
    6ecc:	6042      	str	r2, [r0, #4]
    6ece:	88b2      	ldrh	r2, [r6, #4]
    6ed0:	4353      	muls	r3, r2
    6ed2:	6083      	str	r3, [r0, #8]
    6ed4:	2301      	movs	r3, #1
    6ed6:	7303      	strb	r3, [r0, #12]
    6ed8:	4b1d      	ldr	r3, [pc, #116]	; (6f50 <handleJoinMessage+0x254>)
    6eda:	4798      	blx	r3
    6edc:	786f      	ldrb	r7, [r5, #1]
    6ede:	e761      	b.n	6da4 <handleJoinMessage+0xa8>
    6ee0:	4b1c      	ldr	r3, [pc, #112]	; (6f54 <handleJoinMessage+0x258>)
    6ee2:	6103      	str	r3, [r0, #16]
    6ee4:	23fa      	movs	r3, #250	; 0xfa
    6ee6:	7a32      	ldrb	r2, [r6, #8]
    6ee8:	009b      	lsls	r3, r3, #2
    6eea:	4353      	muls	r3, r2
    6eec:	6043      	str	r3, [r0, #4]
    6eee:	6083      	str	r3, [r0, #8]
    6ef0:	4b17      	ldr	r3, [pc, #92]	; (6f50 <handleJoinMessage+0x254>)
    6ef2:	7307      	strb	r7, [r0, #12]
    6ef4:	4798      	blx	r3
    6ef6:	786f      	ldrb	r7, [r5, #1]
    6ef8:	e754      	b.n	6da4 <handleJoinMessage+0xa8>
    6efa:	46c0      	nop			; (mov r8, r8)
    6efc:	20000298 	.word	0x20000298
    6f00:	200002c0 	.word	0x200002c0
    6f04:	200012a8 	.word	0x200012a8
    6f08:	2000130c 	.word	0x2000130c
    6f0c:	00002e7d 	.word	0x00002e7d
    6f10:	200002bc 	.word	0x200002bc
    6f14:	200012f4 	.word	0x200012f4
    6f18:	200012f0 	.word	0x200012f0
    6f1c:	20001328 	.word	0x20001328
    6f20:	200002b8 	.word	0x200002b8
    6f24:	2000004c 	.word	0x2000004c
    6f28:	00004cd9 	.word	0x00004cd9
    6f2c:	200012bc 	.word	0x200012bc
    6f30:	000074ef 	.word	0x000074ef
    6f34:	20001320 	.word	0x20001320
    6f38:	200012dc 	.word	0x200012dc
    6f3c:	20000054 	.word	0x20000054
    6f40:	00001dc5 	.word	0x00001dc5
    6f44:	20001308 	.word	0x20001308
    6f48:	200012ac 	.word	0x200012ac
    6f4c:	00006659 	.word	0x00006659
    6f50:	00002ee9 	.word	0x00002ee9
    6f54:	00006809 	.word	0x00006809

00006f58 <checkLinkFailureAtNoAck>:
    6f58:	b510      	push	{r4, lr}
    6f5a:	2803      	cmp	r0, #3
    6f5c:	d005      	beq.n	6f6a <checkLinkFailureAtNoAck+0x12>
    6f5e:	4b0f      	ldr	r3, [pc, #60]	; (6f9c <checkLinkFailureAtNoAck+0x44>)
    6f60:	681b      	ldr	r3, [r3, #0]
    6f62:	7a5a      	ldrb	r2, [r3, #9]
    6f64:	4b0e      	ldr	r3, [pc, #56]	; (6fa0 <checkLinkFailureAtNoAck+0x48>)
    6f66:	701a      	strb	r2, [r3, #0]
    6f68:	bd10      	pop	{r4, pc}
    6f6a:	4a0d      	ldr	r2, [pc, #52]	; (6fa0 <checkLinkFailureAtNoAck+0x48>)
    6f6c:	7813      	ldrb	r3, [r2, #0]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d0fa      	beq.n	6f68 <checkLinkFailureAtNoAck+0x10>
    6f72:	3b01      	subs	r3, #1
    6f74:	b2db      	uxtb	r3, r3
    6f76:	7013      	strb	r3, [r2, #0]
    6f78:	2b00      	cmp	r3, #0
    6f7a:	d1f5      	bne.n	6f68 <checkLinkFailureAtNoAck+0x10>
    6f7c:	4b09      	ldr	r3, [pc, #36]	; (6fa4 <checkLinkFailureAtNoAck+0x4c>)
    6f7e:	480a      	ldr	r0, [pc, #40]	; (6fa8 <checkLinkFailureAtNoAck+0x50>)
    6f80:	4798      	blx	r3
    6f82:	2208      	movs	r2, #8
    6f84:	4b09      	ldr	r3, [pc, #36]	; (6fac <checkLinkFailureAtNoAck+0x54>)
    6f86:	701a      	strb	r2, [r3, #0]
    6f88:	4b09      	ldr	r3, [pc, #36]	; (6fb0 <checkLinkFailureAtNoAck+0x58>)
    6f8a:	3a09      	subs	r2, #9
    6f8c:	801a      	strh	r2, [r3, #0]
    6f8e:	4b09      	ldr	r3, [pc, #36]	; (6fb4 <checkLinkFailureAtNoAck+0x5c>)
    6f90:	681b      	ldr	r3, [r3, #0]
    6f92:	2b00      	cmp	r3, #0
    6f94:	d0e8      	beq.n	6f68 <checkLinkFailureAtNoAck+0x10>
    6f96:	4798      	blx	r3
    6f98:	e7e6      	b.n	6f68 <checkLinkFailureAtNoAck+0x10>
    6f9a:	46c0      	nop			; (mov r8, r8)
    6f9c:	200012a8 	.word	0x200012a8
    6fa0:	20001308 	.word	0x20001308
    6fa4:	00002e7d 	.word	0x00002e7d
    6fa8:	200012f4 	.word	0x200012f4
    6fac:	20000298 	.word	0x20000298
    6fb0:	200012f0 	.word	0x200012f0
    6fb4:	20001328 	.word	0x20001328

00006fb8 <keyDetermineProcedure>:
    6fb8:	4b06      	ldr	r3, [pc, #24]	; (6fd4 <keyDetermineProcedure+0x1c>)
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	3b06      	subs	r3, #6
    6fbe:	2b01      	cmp	r3, #1
    6fc0:	d902      	bls.n	6fc8 <keyDetermineProcedure+0x10>
    6fc2:	4b05      	ldr	r3, [pc, #20]	; (6fd8 <keyDetermineProcedure+0x20>)
    6fc4:	6818      	ldr	r0, [r3, #0]
    6fc6:	4770      	bx	lr
    6fc8:	2808      	cmp	r0, #8
    6fca:	d0fa      	beq.n	6fc2 <keyDetermineProcedure+0xa>
    6fcc:	4b02      	ldr	r3, [pc, #8]	; (6fd8 <keyDetermineProcedure+0x20>)
    6fce:	6818      	ldr	r0, [r3, #0]
    6fd0:	3010      	adds	r0, #16
    6fd2:	e7f8      	b.n	6fc6 <keyDetermineProcedure+0xe>
    6fd4:	20000298 	.word	0x20000298
    6fd8:	200012ac 	.word	0x200012ac

00006fdc <secureFrame>:
    6fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fde:	4657      	mov	r7, sl
    6fe0:	4645      	mov	r5, r8
    6fe2:	46de      	mov	lr, fp
    6fe4:	464e      	mov	r6, r9
    6fe6:	b5e0      	push	{r5, r6, r7, lr}
    6fe8:	0005      	movs	r5, r0
    6fea:	b0af      	sub	sp, #188	; 0xbc
    6fec:	ac06      	add	r4, sp, #24
    6fee:	000e      	movs	r6, r1
    6ff0:	4690      	mov	r8, r2
    6ff2:	469a      	mov	sl, r3
    6ff4:	2210      	movs	r2, #16
    6ff6:	2100      	movs	r1, #0
    6ff8:	0020      	movs	r0, r4
    6ffa:	4b35      	ldr	r3, [pc, #212]	; (70d0 <secureFrame+0xf4>)
    6ffc:	4798      	blx	r3
    6ffe:	7c2f      	ldrb	r7, [r5, #16]
    7000:	2f07      	cmp	r7, #7
    7002:	d80e      	bhi.n	7022 <secureFrame+0x46>
    7004:	2301      	movs	r3, #1
    7006:	2288      	movs	r2, #136	; 0x88
    7008:	40bb      	lsls	r3, r7
    700a:	421a      	tst	r2, r3
    700c:	d14e      	bne.n	70ac <secureFrame+0xd0>
    700e:	3a44      	subs	r2, #68	; 0x44
    7010:	421a      	tst	r2, r3
    7012:	d14f      	bne.n	70b4 <secureFrame+0xd8>
    7014:	3a22      	subs	r2, #34	; 0x22
    7016:	421a      	tst	r2, r3
    7018:	d003      	beq.n	7022 <secureFrame+0x46>
    701a:	2304      	movs	r3, #4
    701c:	9305      	str	r3, [sp, #20]
    701e:	469b      	mov	fp, r3
    7020:	e002      	b.n	7028 <secureFrame+0x4c>
    7022:	2300      	movs	r3, #0
    7024:	469b      	mov	fp, r3
    7026:	9305      	str	r3, [sp, #20]
    7028:	4b2a      	ldr	r3, [pc, #168]	; (70d4 <secureFrame+0xf8>)
    702a:	4d2b      	ldr	r5, [pc, #172]	; (70d8 <secureFrame+0xfc>)
    702c:	79da      	ldrb	r2, [r3, #7]
    702e:	4651      	mov	r1, sl
    7030:	7062      	strb	r2, [r4, #1]
    7032:	799a      	ldrb	r2, [r3, #6]
    7034:	7367      	strb	r7, [r4, #13]
    7036:	70a2      	strb	r2, [r4, #2]
    7038:	795a      	ldrb	r2, [r3, #5]
    703a:	a80a      	add	r0, sp, #40	; 0x28
    703c:	70e2      	strb	r2, [r4, #3]
    703e:	791a      	ldrb	r2, [r3, #4]
    7040:	44b2      	add	sl, r6
    7042:	7122      	strb	r2, [r4, #4]
    7044:	78da      	ldrb	r2, [r3, #3]
    7046:	7162      	strb	r2, [r4, #5]
    7048:	789a      	ldrb	r2, [r3, #2]
    704a:	71a2      	strb	r2, [r4, #6]
    704c:	785a      	ldrb	r2, [r3, #1]
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	71e2      	strb	r2, [r4, #7]
    7052:	7223      	strb	r3, [r4, #8]
    7054:	78eb      	ldrb	r3, [r5, #3]
    7056:	0032      	movs	r2, r6
    7058:	7263      	strb	r3, [r4, #9]
    705a:	78ab      	ldrb	r3, [r5, #2]
    705c:	72a3      	strb	r3, [r4, #10]
    705e:	786b      	ldrb	r3, [r5, #1]
    7060:	72e3      	strb	r3, [r4, #11]
    7062:	782b      	ldrb	r3, [r5, #0]
    7064:	7323      	strb	r3, [r4, #12]
    7066:	4b1d      	ldr	r3, [pc, #116]	; (70dc <secureFrame+0x100>)
    7068:	4699      	mov	r9, r3
    706a:	4798      	blx	r3
    706c:	ab0a      	add	r3, sp, #40	; 0x28
    706e:	469c      	mov	ip, r3
    7070:	44b4      	add	ip, r6
    7072:	4663      	mov	r3, ip
    7074:	4642      	mov	r2, r8
    7076:	4651      	mov	r1, sl
    7078:	4660      	mov	r0, ip
    707a:	9304      	str	r3, [sp, #16]
    707c:	47c8      	blx	r9
    707e:	2300      	movs	r3, #0
    7080:	9302      	str	r3, [sp, #8]
    7082:	4643      	mov	r3, r8
    7084:	0021      	movs	r1, r4
    7086:	9300      	str	r3, [sp, #0]
    7088:	9701      	str	r7, [sp, #4]
    708a:	0033      	movs	r3, r6
    708c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    708e:	a80a      	add	r0, sp, #40	; 0x28
    7090:	4c13      	ldr	r4, [pc, #76]	; (70e0 <secureFrame+0x104>)
    7092:	47a0      	blx	r4
    7094:	2800      	cmp	r0, #0
    7096:	d011      	beq.n	70bc <secureFrame+0xe0>
    7098:	23ff      	movs	r3, #255	; 0xff
    709a:	469b      	mov	fp, r3
    709c:	4658      	mov	r0, fp
    709e:	b02f      	add	sp, #188	; 0xbc
    70a0:	bc3c      	pop	{r2, r3, r4, r5}
    70a2:	4690      	mov	r8, r2
    70a4:	4699      	mov	r9, r3
    70a6:	46a2      	mov	sl, r4
    70a8:	46ab      	mov	fp, r5
    70aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70ac:	2310      	movs	r3, #16
    70ae:	9305      	str	r3, [sp, #20]
    70b0:	469b      	mov	fp, r3
    70b2:	e7b9      	b.n	7028 <secureFrame+0x4c>
    70b4:	2308      	movs	r3, #8
    70b6:	9305      	str	r3, [sp, #20]
    70b8:	469b      	mov	fp, r3
    70ba:	e7b5      	b.n	7028 <secureFrame+0x4c>
    70bc:	682b      	ldr	r3, [r5, #0]
    70be:	9904      	ldr	r1, [sp, #16]
    70c0:	3301      	adds	r3, #1
    70c2:	602b      	str	r3, [r5, #0]
    70c4:	9b05      	ldr	r3, [sp, #20]
    70c6:	4650      	mov	r0, sl
    70c8:	4443      	add	r3, r8
    70ca:	001a      	movs	r2, r3
    70cc:	47c8      	blx	r9
    70ce:	e7e5      	b.n	709c <secureFrame+0xc0>
    70d0:	00007501 	.word	0x00007501
    70d4:	2000004c 	.word	0x2000004c
    70d8:	2000132c 	.word	0x2000132c
    70dc:	000074ef 	.word	0x000074ef
    70e0:	00002845 	.word	0x00002845

000070e4 <unsecureFrame>:
    70e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    70e6:	46ce      	mov	lr, r9
    70e8:	4647      	mov	r7, r8
    70ea:	b580      	push	{r7, lr}
    70ec:	b089      	sub	sp, #36	; 0x24
    70ee:	0007      	movs	r7, r0
    70f0:	ac04      	add	r4, sp, #16
    70f2:	000d      	movs	r5, r1
    70f4:	4691      	mov	r9, r2
    70f6:	001e      	movs	r6, r3
    70f8:	2210      	movs	r2, #16
    70fa:	4b26      	ldr	r3, [pc, #152]	; (7194 <unsecureFrame+0xb0>)
    70fc:	2100      	movs	r1, #0
    70fe:	0020      	movs	r0, r4
    7100:	4798      	blx	r3
    7102:	2200      	movs	r2, #0
    7104:	7c3b      	ldrb	r3, [r7, #16]
    7106:	4690      	mov	r8, r2
    7108:	2b07      	cmp	r3, #7
    710a:	d806      	bhi.n	711a <unsecureFrame+0x36>
    710c:	3201      	adds	r2, #1
    710e:	2010      	movs	r0, #16
    7110:	409a      	lsls	r2, r3
    7112:	2188      	movs	r1, #136	; 0x88
    7114:	4680      	mov	r8, r0
    7116:	4211      	tst	r1, r2
    7118:	d02f      	beq.n	717a <unsecureFrame+0x96>
    711a:	79ea      	ldrb	r2, [r5, #7]
    711c:	7363      	strb	r3, [r4, #13]
    711e:	7062      	strb	r2, [r4, #1]
    7120:	79aa      	ldrb	r2, [r5, #6]
    7122:	0021      	movs	r1, r4
    7124:	70a2      	strb	r2, [r4, #2]
    7126:	796a      	ldrb	r2, [r5, #5]
    7128:	9810      	ldr	r0, [sp, #64]	; 0x40
    712a:	70e2      	strb	r2, [r4, #3]
    712c:	792a      	ldrb	r2, [r5, #4]
    712e:	7122      	strb	r2, [r4, #4]
    7130:	78ea      	ldrb	r2, [r5, #3]
    7132:	7162      	strb	r2, [r4, #5]
    7134:	78aa      	ldrb	r2, [r5, #2]
    7136:	71a2      	strb	r2, [r4, #6]
    7138:	786a      	ldrb	r2, [r5, #1]
    713a:	71e2      	strb	r2, [r4, #7]
    713c:	782a      	ldrb	r2, [r5, #0]
    713e:	7222      	strb	r2, [r4, #8]
    7140:	7dfa      	ldrb	r2, [r7, #23]
    7142:	7262      	strb	r2, [r4, #9]
    7144:	7dba      	ldrb	r2, [r7, #22]
    7146:	72a2      	strb	r2, [r4, #10]
    7148:	7d7a      	ldrb	r2, [r7, #21]
    714a:	72e2      	strb	r2, [r4, #11]
    714c:	7d3a      	ldrb	r2, [r7, #20]
    714e:	7322      	strb	r2, [r4, #12]
    7150:	9301      	str	r3, [sp, #4]
    7152:	4643      	mov	r3, r8
    7154:	2201      	movs	r2, #1
    7156:	1af6      	subs	r6, r6, r3
    7158:	b2f6      	uxtb	r6, r6
    715a:	9202      	str	r2, [sp, #8]
    715c:	9600      	str	r6, [sp, #0]
    715e:	464b      	mov	r3, r9
    7160:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7162:	4c0d      	ldr	r4, [pc, #52]	; (7198 <unsecureFrame+0xb4>)
    7164:	47a0      	blx	r4
    7166:	2800      	cmp	r0, #0
    7168:	d001      	beq.n	716e <unsecureFrame+0x8a>
    716a:	23ff      	movs	r3, #255	; 0xff
    716c:	4698      	mov	r8, r3
    716e:	4640      	mov	r0, r8
    7170:	b009      	add	sp, #36	; 0x24
    7172:	bc0c      	pop	{r2, r3}
    7174:	4690      	mov	r8, r2
    7176:	4699      	mov	r9, r3
    7178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    717a:	3808      	subs	r0, #8
    717c:	3944      	subs	r1, #68	; 0x44
    717e:	4680      	mov	r8, r0
    7180:	4211      	tst	r1, r2
    7182:	d1ca      	bne.n	711a <unsecureFrame+0x36>
    7184:	3922      	subs	r1, #34	; 0x22
    7186:	400a      	ands	r2, r1
    7188:	1e51      	subs	r1, r2, #1
    718a:	418a      	sbcs	r2, r1
    718c:	0092      	lsls	r2, r2, #2
    718e:	4690      	mov	r8, r2
    7190:	e7c3      	b.n	711a <unsecureFrame+0x36>
    7192:	46c0      	nop			; (mov r8, r8)
    7194:	00007501 	.word	0x00007501
    7198:	00002845 	.word	0x00002845

0000719c <__udivsi3>:
    719c:	2200      	movs	r2, #0
    719e:	0843      	lsrs	r3, r0, #1
    71a0:	428b      	cmp	r3, r1
    71a2:	d374      	bcc.n	728e <__udivsi3+0xf2>
    71a4:	0903      	lsrs	r3, r0, #4
    71a6:	428b      	cmp	r3, r1
    71a8:	d35f      	bcc.n	726a <__udivsi3+0xce>
    71aa:	0a03      	lsrs	r3, r0, #8
    71ac:	428b      	cmp	r3, r1
    71ae:	d344      	bcc.n	723a <__udivsi3+0x9e>
    71b0:	0b03      	lsrs	r3, r0, #12
    71b2:	428b      	cmp	r3, r1
    71b4:	d328      	bcc.n	7208 <__udivsi3+0x6c>
    71b6:	0c03      	lsrs	r3, r0, #16
    71b8:	428b      	cmp	r3, r1
    71ba:	d30d      	bcc.n	71d8 <__udivsi3+0x3c>
    71bc:	22ff      	movs	r2, #255	; 0xff
    71be:	0209      	lsls	r1, r1, #8
    71c0:	ba12      	rev	r2, r2
    71c2:	0c03      	lsrs	r3, r0, #16
    71c4:	428b      	cmp	r3, r1
    71c6:	d302      	bcc.n	71ce <__udivsi3+0x32>
    71c8:	1212      	asrs	r2, r2, #8
    71ca:	0209      	lsls	r1, r1, #8
    71cc:	d065      	beq.n	729a <__udivsi3+0xfe>
    71ce:	0b03      	lsrs	r3, r0, #12
    71d0:	428b      	cmp	r3, r1
    71d2:	d319      	bcc.n	7208 <__udivsi3+0x6c>
    71d4:	e000      	b.n	71d8 <__udivsi3+0x3c>
    71d6:	0a09      	lsrs	r1, r1, #8
    71d8:	0bc3      	lsrs	r3, r0, #15
    71da:	428b      	cmp	r3, r1
    71dc:	d301      	bcc.n	71e2 <__udivsi3+0x46>
    71de:	03cb      	lsls	r3, r1, #15
    71e0:	1ac0      	subs	r0, r0, r3
    71e2:	4152      	adcs	r2, r2
    71e4:	0b83      	lsrs	r3, r0, #14
    71e6:	428b      	cmp	r3, r1
    71e8:	d301      	bcc.n	71ee <__udivsi3+0x52>
    71ea:	038b      	lsls	r3, r1, #14
    71ec:	1ac0      	subs	r0, r0, r3
    71ee:	4152      	adcs	r2, r2
    71f0:	0b43      	lsrs	r3, r0, #13
    71f2:	428b      	cmp	r3, r1
    71f4:	d301      	bcc.n	71fa <__udivsi3+0x5e>
    71f6:	034b      	lsls	r3, r1, #13
    71f8:	1ac0      	subs	r0, r0, r3
    71fa:	4152      	adcs	r2, r2
    71fc:	0b03      	lsrs	r3, r0, #12
    71fe:	428b      	cmp	r3, r1
    7200:	d301      	bcc.n	7206 <__udivsi3+0x6a>
    7202:	030b      	lsls	r3, r1, #12
    7204:	1ac0      	subs	r0, r0, r3
    7206:	4152      	adcs	r2, r2
    7208:	0ac3      	lsrs	r3, r0, #11
    720a:	428b      	cmp	r3, r1
    720c:	d301      	bcc.n	7212 <__udivsi3+0x76>
    720e:	02cb      	lsls	r3, r1, #11
    7210:	1ac0      	subs	r0, r0, r3
    7212:	4152      	adcs	r2, r2
    7214:	0a83      	lsrs	r3, r0, #10
    7216:	428b      	cmp	r3, r1
    7218:	d301      	bcc.n	721e <__udivsi3+0x82>
    721a:	028b      	lsls	r3, r1, #10
    721c:	1ac0      	subs	r0, r0, r3
    721e:	4152      	adcs	r2, r2
    7220:	0a43      	lsrs	r3, r0, #9
    7222:	428b      	cmp	r3, r1
    7224:	d301      	bcc.n	722a <__udivsi3+0x8e>
    7226:	024b      	lsls	r3, r1, #9
    7228:	1ac0      	subs	r0, r0, r3
    722a:	4152      	adcs	r2, r2
    722c:	0a03      	lsrs	r3, r0, #8
    722e:	428b      	cmp	r3, r1
    7230:	d301      	bcc.n	7236 <__udivsi3+0x9a>
    7232:	020b      	lsls	r3, r1, #8
    7234:	1ac0      	subs	r0, r0, r3
    7236:	4152      	adcs	r2, r2
    7238:	d2cd      	bcs.n	71d6 <__udivsi3+0x3a>
    723a:	09c3      	lsrs	r3, r0, #7
    723c:	428b      	cmp	r3, r1
    723e:	d301      	bcc.n	7244 <__udivsi3+0xa8>
    7240:	01cb      	lsls	r3, r1, #7
    7242:	1ac0      	subs	r0, r0, r3
    7244:	4152      	adcs	r2, r2
    7246:	0983      	lsrs	r3, r0, #6
    7248:	428b      	cmp	r3, r1
    724a:	d301      	bcc.n	7250 <__udivsi3+0xb4>
    724c:	018b      	lsls	r3, r1, #6
    724e:	1ac0      	subs	r0, r0, r3
    7250:	4152      	adcs	r2, r2
    7252:	0943      	lsrs	r3, r0, #5
    7254:	428b      	cmp	r3, r1
    7256:	d301      	bcc.n	725c <__udivsi3+0xc0>
    7258:	014b      	lsls	r3, r1, #5
    725a:	1ac0      	subs	r0, r0, r3
    725c:	4152      	adcs	r2, r2
    725e:	0903      	lsrs	r3, r0, #4
    7260:	428b      	cmp	r3, r1
    7262:	d301      	bcc.n	7268 <__udivsi3+0xcc>
    7264:	010b      	lsls	r3, r1, #4
    7266:	1ac0      	subs	r0, r0, r3
    7268:	4152      	adcs	r2, r2
    726a:	08c3      	lsrs	r3, r0, #3
    726c:	428b      	cmp	r3, r1
    726e:	d301      	bcc.n	7274 <__udivsi3+0xd8>
    7270:	00cb      	lsls	r3, r1, #3
    7272:	1ac0      	subs	r0, r0, r3
    7274:	4152      	adcs	r2, r2
    7276:	0883      	lsrs	r3, r0, #2
    7278:	428b      	cmp	r3, r1
    727a:	d301      	bcc.n	7280 <__udivsi3+0xe4>
    727c:	008b      	lsls	r3, r1, #2
    727e:	1ac0      	subs	r0, r0, r3
    7280:	4152      	adcs	r2, r2
    7282:	0843      	lsrs	r3, r0, #1
    7284:	428b      	cmp	r3, r1
    7286:	d301      	bcc.n	728c <__udivsi3+0xf0>
    7288:	004b      	lsls	r3, r1, #1
    728a:	1ac0      	subs	r0, r0, r3
    728c:	4152      	adcs	r2, r2
    728e:	1a41      	subs	r1, r0, r1
    7290:	d200      	bcs.n	7294 <__udivsi3+0xf8>
    7292:	4601      	mov	r1, r0
    7294:	4152      	adcs	r2, r2
    7296:	4610      	mov	r0, r2
    7298:	4770      	bx	lr
    729a:	e7ff      	b.n	729c <__udivsi3+0x100>
    729c:	b501      	push	{r0, lr}
    729e:	2000      	movs	r0, #0
    72a0:	f000 f8f0 	bl	7484 <__aeabi_idiv0>
    72a4:	bd02      	pop	{r1, pc}
    72a6:	46c0      	nop			; (mov r8, r8)

000072a8 <__aeabi_uidivmod>:
    72a8:	2900      	cmp	r1, #0
    72aa:	d0f7      	beq.n	729c <__udivsi3+0x100>
    72ac:	e776      	b.n	719c <__udivsi3>
    72ae:	4770      	bx	lr

000072b0 <__divsi3>:
    72b0:	4603      	mov	r3, r0
    72b2:	430b      	orrs	r3, r1
    72b4:	d47f      	bmi.n	73b6 <__divsi3+0x106>
    72b6:	2200      	movs	r2, #0
    72b8:	0843      	lsrs	r3, r0, #1
    72ba:	428b      	cmp	r3, r1
    72bc:	d374      	bcc.n	73a8 <__divsi3+0xf8>
    72be:	0903      	lsrs	r3, r0, #4
    72c0:	428b      	cmp	r3, r1
    72c2:	d35f      	bcc.n	7384 <__divsi3+0xd4>
    72c4:	0a03      	lsrs	r3, r0, #8
    72c6:	428b      	cmp	r3, r1
    72c8:	d344      	bcc.n	7354 <__divsi3+0xa4>
    72ca:	0b03      	lsrs	r3, r0, #12
    72cc:	428b      	cmp	r3, r1
    72ce:	d328      	bcc.n	7322 <__divsi3+0x72>
    72d0:	0c03      	lsrs	r3, r0, #16
    72d2:	428b      	cmp	r3, r1
    72d4:	d30d      	bcc.n	72f2 <__divsi3+0x42>
    72d6:	22ff      	movs	r2, #255	; 0xff
    72d8:	0209      	lsls	r1, r1, #8
    72da:	ba12      	rev	r2, r2
    72dc:	0c03      	lsrs	r3, r0, #16
    72de:	428b      	cmp	r3, r1
    72e0:	d302      	bcc.n	72e8 <__divsi3+0x38>
    72e2:	1212      	asrs	r2, r2, #8
    72e4:	0209      	lsls	r1, r1, #8
    72e6:	d065      	beq.n	73b4 <__divsi3+0x104>
    72e8:	0b03      	lsrs	r3, r0, #12
    72ea:	428b      	cmp	r3, r1
    72ec:	d319      	bcc.n	7322 <__divsi3+0x72>
    72ee:	e000      	b.n	72f2 <__divsi3+0x42>
    72f0:	0a09      	lsrs	r1, r1, #8
    72f2:	0bc3      	lsrs	r3, r0, #15
    72f4:	428b      	cmp	r3, r1
    72f6:	d301      	bcc.n	72fc <__divsi3+0x4c>
    72f8:	03cb      	lsls	r3, r1, #15
    72fa:	1ac0      	subs	r0, r0, r3
    72fc:	4152      	adcs	r2, r2
    72fe:	0b83      	lsrs	r3, r0, #14
    7300:	428b      	cmp	r3, r1
    7302:	d301      	bcc.n	7308 <__divsi3+0x58>
    7304:	038b      	lsls	r3, r1, #14
    7306:	1ac0      	subs	r0, r0, r3
    7308:	4152      	adcs	r2, r2
    730a:	0b43      	lsrs	r3, r0, #13
    730c:	428b      	cmp	r3, r1
    730e:	d301      	bcc.n	7314 <__divsi3+0x64>
    7310:	034b      	lsls	r3, r1, #13
    7312:	1ac0      	subs	r0, r0, r3
    7314:	4152      	adcs	r2, r2
    7316:	0b03      	lsrs	r3, r0, #12
    7318:	428b      	cmp	r3, r1
    731a:	d301      	bcc.n	7320 <__divsi3+0x70>
    731c:	030b      	lsls	r3, r1, #12
    731e:	1ac0      	subs	r0, r0, r3
    7320:	4152      	adcs	r2, r2
    7322:	0ac3      	lsrs	r3, r0, #11
    7324:	428b      	cmp	r3, r1
    7326:	d301      	bcc.n	732c <__divsi3+0x7c>
    7328:	02cb      	lsls	r3, r1, #11
    732a:	1ac0      	subs	r0, r0, r3
    732c:	4152      	adcs	r2, r2
    732e:	0a83      	lsrs	r3, r0, #10
    7330:	428b      	cmp	r3, r1
    7332:	d301      	bcc.n	7338 <__divsi3+0x88>
    7334:	028b      	lsls	r3, r1, #10
    7336:	1ac0      	subs	r0, r0, r3
    7338:	4152      	adcs	r2, r2
    733a:	0a43      	lsrs	r3, r0, #9
    733c:	428b      	cmp	r3, r1
    733e:	d301      	bcc.n	7344 <__divsi3+0x94>
    7340:	024b      	lsls	r3, r1, #9
    7342:	1ac0      	subs	r0, r0, r3
    7344:	4152      	adcs	r2, r2
    7346:	0a03      	lsrs	r3, r0, #8
    7348:	428b      	cmp	r3, r1
    734a:	d301      	bcc.n	7350 <__divsi3+0xa0>
    734c:	020b      	lsls	r3, r1, #8
    734e:	1ac0      	subs	r0, r0, r3
    7350:	4152      	adcs	r2, r2
    7352:	d2cd      	bcs.n	72f0 <__divsi3+0x40>
    7354:	09c3      	lsrs	r3, r0, #7
    7356:	428b      	cmp	r3, r1
    7358:	d301      	bcc.n	735e <__divsi3+0xae>
    735a:	01cb      	lsls	r3, r1, #7
    735c:	1ac0      	subs	r0, r0, r3
    735e:	4152      	adcs	r2, r2
    7360:	0983      	lsrs	r3, r0, #6
    7362:	428b      	cmp	r3, r1
    7364:	d301      	bcc.n	736a <__divsi3+0xba>
    7366:	018b      	lsls	r3, r1, #6
    7368:	1ac0      	subs	r0, r0, r3
    736a:	4152      	adcs	r2, r2
    736c:	0943      	lsrs	r3, r0, #5
    736e:	428b      	cmp	r3, r1
    7370:	d301      	bcc.n	7376 <__divsi3+0xc6>
    7372:	014b      	lsls	r3, r1, #5
    7374:	1ac0      	subs	r0, r0, r3
    7376:	4152      	adcs	r2, r2
    7378:	0903      	lsrs	r3, r0, #4
    737a:	428b      	cmp	r3, r1
    737c:	d301      	bcc.n	7382 <__divsi3+0xd2>
    737e:	010b      	lsls	r3, r1, #4
    7380:	1ac0      	subs	r0, r0, r3
    7382:	4152      	adcs	r2, r2
    7384:	08c3      	lsrs	r3, r0, #3
    7386:	428b      	cmp	r3, r1
    7388:	d301      	bcc.n	738e <__divsi3+0xde>
    738a:	00cb      	lsls	r3, r1, #3
    738c:	1ac0      	subs	r0, r0, r3
    738e:	4152      	adcs	r2, r2
    7390:	0883      	lsrs	r3, r0, #2
    7392:	428b      	cmp	r3, r1
    7394:	d301      	bcc.n	739a <__divsi3+0xea>
    7396:	008b      	lsls	r3, r1, #2
    7398:	1ac0      	subs	r0, r0, r3
    739a:	4152      	adcs	r2, r2
    739c:	0843      	lsrs	r3, r0, #1
    739e:	428b      	cmp	r3, r1
    73a0:	d301      	bcc.n	73a6 <__divsi3+0xf6>
    73a2:	004b      	lsls	r3, r1, #1
    73a4:	1ac0      	subs	r0, r0, r3
    73a6:	4152      	adcs	r2, r2
    73a8:	1a41      	subs	r1, r0, r1
    73aa:	d200      	bcs.n	73ae <__divsi3+0xfe>
    73ac:	4601      	mov	r1, r0
    73ae:	4152      	adcs	r2, r2
    73b0:	4610      	mov	r0, r2
    73b2:	4770      	bx	lr
    73b4:	e05d      	b.n	7472 <__divsi3+0x1c2>
    73b6:	0fca      	lsrs	r2, r1, #31
    73b8:	d000      	beq.n	73bc <__divsi3+0x10c>
    73ba:	4249      	negs	r1, r1
    73bc:	1003      	asrs	r3, r0, #32
    73be:	d300      	bcc.n	73c2 <__divsi3+0x112>
    73c0:	4240      	negs	r0, r0
    73c2:	4053      	eors	r3, r2
    73c4:	2200      	movs	r2, #0
    73c6:	469c      	mov	ip, r3
    73c8:	0903      	lsrs	r3, r0, #4
    73ca:	428b      	cmp	r3, r1
    73cc:	d32d      	bcc.n	742a <__divsi3+0x17a>
    73ce:	0a03      	lsrs	r3, r0, #8
    73d0:	428b      	cmp	r3, r1
    73d2:	d312      	bcc.n	73fa <__divsi3+0x14a>
    73d4:	22fc      	movs	r2, #252	; 0xfc
    73d6:	0189      	lsls	r1, r1, #6
    73d8:	ba12      	rev	r2, r2
    73da:	0a03      	lsrs	r3, r0, #8
    73dc:	428b      	cmp	r3, r1
    73de:	d30c      	bcc.n	73fa <__divsi3+0x14a>
    73e0:	0189      	lsls	r1, r1, #6
    73e2:	1192      	asrs	r2, r2, #6
    73e4:	428b      	cmp	r3, r1
    73e6:	d308      	bcc.n	73fa <__divsi3+0x14a>
    73e8:	0189      	lsls	r1, r1, #6
    73ea:	1192      	asrs	r2, r2, #6
    73ec:	428b      	cmp	r3, r1
    73ee:	d304      	bcc.n	73fa <__divsi3+0x14a>
    73f0:	0189      	lsls	r1, r1, #6
    73f2:	d03a      	beq.n	746a <__divsi3+0x1ba>
    73f4:	1192      	asrs	r2, r2, #6
    73f6:	e000      	b.n	73fa <__divsi3+0x14a>
    73f8:	0989      	lsrs	r1, r1, #6
    73fa:	09c3      	lsrs	r3, r0, #7
    73fc:	428b      	cmp	r3, r1
    73fe:	d301      	bcc.n	7404 <__divsi3+0x154>
    7400:	01cb      	lsls	r3, r1, #7
    7402:	1ac0      	subs	r0, r0, r3
    7404:	4152      	adcs	r2, r2
    7406:	0983      	lsrs	r3, r0, #6
    7408:	428b      	cmp	r3, r1
    740a:	d301      	bcc.n	7410 <__divsi3+0x160>
    740c:	018b      	lsls	r3, r1, #6
    740e:	1ac0      	subs	r0, r0, r3
    7410:	4152      	adcs	r2, r2
    7412:	0943      	lsrs	r3, r0, #5
    7414:	428b      	cmp	r3, r1
    7416:	d301      	bcc.n	741c <__divsi3+0x16c>
    7418:	014b      	lsls	r3, r1, #5
    741a:	1ac0      	subs	r0, r0, r3
    741c:	4152      	adcs	r2, r2
    741e:	0903      	lsrs	r3, r0, #4
    7420:	428b      	cmp	r3, r1
    7422:	d301      	bcc.n	7428 <__divsi3+0x178>
    7424:	010b      	lsls	r3, r1, #4
    7426:	1ac0      	subs	r0, r0, r3
    7428:	4152      	adcs	r2, r2
    742a:	08c3      	lsrs	r3, r0, #3
    742c:	428b      	cmp	r3, r1
    742e:	d301      	bcc.n	7434 <__divsi3+0x184>
    7430:	00cb      	lsls	r3, r1, #3
    7432:	1ac0      	subs	r0, r0, r3
    7434:	4152      	adcs	r2, r2
    7436:	0883      	lsrs	r3, r0, #2
    7438:	428b      	cmp	r3, r1
    743a:	d301      	bcc.n	7440 <__divsi3+0x190>
    743c:	008b      	lsls	r3, r1, #2
    743e:	1ac0      	subs	r0, r0, r3
    7440:	4152      	adcs	r2, r2
    7442:	d2d9      	bcs.n	73f8 <__divsi3+0x148>
    7444:	0843      	lsrs	r3, r0, #1
    7446:	428b      	cmp	r3, r1
    7448:	d301      	bcc.n	744e <__divsi3+0x19e>
    744a:	004b      	lsls	r3, r1, #1
    744c:	1ac0      	subs	r0, r0, r3
    744e:	4152      	adcs	r2, r2
    7450:	1a41      	subs	r1, r0, r1
    7452:	d200      	bcs.n	7456 <__divsi3+0x1a6>
    7454:	4601      	mov	r1, r0
    7456:	4663      	mov	r3, ip
    7458:	4152      	adcs	r2, r2
    745a:	105b      	asrs	r3, r3, #1
    745c:	4610      	mov	r0, r2
    745e:	d301      	bcc.n	7464 <__divsi3+0x1b4>
    7460:	4240      	negs	r0, r0
    7462:	2b00      	cmp	r3, #0
    7464:	d500      	bpl.n	7468 <__divsi3+0x1b8>
    7466:	4249      	negs	r1, r1
    7468:	4770      	bx	lr
    746a:	4663      	mov	r3, ip
    746c:	105b      	asrs	r3, r3, #1
    746e:	d300      	bcc.n	7472 <__divsi3+0x1c2>
    7470:	4240      	negs	r0, r0
    7472:	b501      	push	{r0, lr}
    7474:	2000      	movs	r0, #0
    7476:	f000 f805 	bl	7484 <__aeabi_idiv0>
    747a:	bd02      	pop	{r1, pc}

0000747c <__aeabi_idivmod>:
    747c:	2900      	cmp	r1, #0
    747e:	d0f8      	beq.n	7472 <__divsi3+0x1c2>
    7480:	e716      	b.n	72b0 <__divsi3>
    7482:	4770      	bx	lr

00007484 <__aeabi_idiv0>:
    7484:	4770      	bx	lr
    7486:	46c0      	nop			; (mov r8, r8)

00007488 <__libc_init_array>:
    7488:	b570      	push	{r4, r5, r6, lr}
    748a:	2600      	movs	r6, #0
    748c:	4d0c      	ldr	r5, [pc, #48]	; (74c0 <__libc_init_array+0x38>)
    748e:	4c0d      	ldr	r4, [pc, #52]	; (74c4 <__libc_init_array+0x3c>)
    7490:	1b64      	subs	r4, r4, r5
    7492:	10a4      	asrs	r4, r4, #2
    7494:	42a6      	cmp	r6, r4
    7496:	d109      	bne.n	74ac <__libc_init_array+0x24>
    7498:	2600      	movs	r6, #0
    749a:	f000 fd7f 	bl	7f9c <_init>
    749e:	4d0a      	ldr	r5, [pc, #40]	; (74c8 <__libc_init_array+0x40>)
    74a0:	4c0a      	ldr	r4, [pc, #40]	; (74cc <__libc_init_array+0x44>)
    74a2:	1b64      	subs	r4, r4, r5
    74a4:	10a4      	asrs	r4, r4, #2
    74a6:	42a6      	cmp	r6, r4
    74a8:	d105      	bne.n	74b6 <__libc_init_array+0x2e>
    74aa:	bd70      	pop	{r4, r5, r6, pc}
    74ac:	00b3      	lsls	r3, r6, #2
    74ae:	58eb      	ldr	r3, [r5, r3]
    74b0:	4798      	blx	r3
    74b2:	3601      	adds	r6, #1
    74b4:	e7ee      	b.n	7494 <__libc_init_array+0xc>
    74b6:	00b3      	lsls	r3, r6, #2
    74b8:	58eb      	ldr	r3, [r5, r3]
    74ba:	4798      	blx	r3
    74bc:	3601      	adds	r6, #1
    74be:	e7f2      	b.n	74a6 <__libc_init_array+0x1e>
    74c0:	00007fa8 	.word	0x00007fa8
    74c4:	00007fa8 	.word	0x00007fa8
    74c8:	00007fa8 	.word	0x00007fa8
    74cc:	00007fac 	.word	0x00007fac

000074d0 <memcmp>:
    74d0:	b530      	push	{r4, r5, lr}
    74d2:	2400      	movs	r4, #0
    74d4:	42a2      	cmp	r2, r4
    74d6:	d101      	bne.n	74dc <memcmp+0xc>
    74d8:	2000      	movs	r0, #0
    74da:	e005      	b.n	74e8 <memcmp+0x18>
    74dc:	5d03      	ldrb	r3, [r0, r4]
    74de:	1c65      	adds	r5, r4, #1
    74e0:	5d0c      	ldrb	r4, [r1, r4]
    74e2:	42a3      	cmp	r3, r4
    74e4:	d001      	beq.n	74ea <memcmp+0x1a>
    74e6:	1b18      	subs	r0, r3, r4
    74e8:	bd30      	pop	{r4, r5, pc}
    74ea:	002c      	movs	r4, r5
    74ec:	e7f2      	b.n	74d4 <memcmp+0x4>

000074ee <memcpy>:
    74ee:	2300      	movs	r3, #0
    74f0:	b510      	push	{r4, lr}
    74f2:	429a      	cmp	r2, r3
    74f4:	d100      	bne.n	74f8 <memcpy+0xa>
    74f6:	bd10      	pop	{r4, pc}
    74f8:	5ccc      	ldrb	r4, [r1, r3]
    74fa:	54c4      	strb	r4, [r0, r3]
    74fc:	3301      	adds	r3, #1
    74fe:	e7f8      	b.n	74f2 <memcpy+0x4>

00007500 <memset>:
    7500:	0003      	movs	r3, r0
    7502:	1882      	adds	r2, r0, r2
    7504:	4293      	cmp	r3, r2
    7506:	d100      	bne.n	750a <memset+0xa>
    7508:	4770      	bx	lr
    750a:	7019      	strb	r1, [r3, #0]
    750c:	3301      	adds	r3, #1
    750e:	e7f9      	b.n	7504 <memset+0x4>

00007510 <siprintf>:
    7510:	b40e      	push	{r1, r2, r3}
    7512:	b510      	push	{r4, lr}
    7514:	b09d      	sub	sp, #116	; 0x74
    7516:	a902      	add	r1, sp, #8
    7518:	9002      	str	r0, [sp, #8]
    751a:	6108      	str	r0, [r1, #16]
    751c:	480b      	ldr	r0, [pc, #44]	; (754c <siprintf+0x3c>)
    751e:	2482      	movs	r4, #130	; 0x82
    7520:	6088      	str	r0, [r1, #8]
    7522:	6148      	str	r0, [r1, #20]
    7524:	2001      	movs	r0, #1
    7526:	4240      	negs	r0, r0
    7528:	ab1f      	add	r3, sp, #124	; 0x7c
    752a:	81c8      	strh	r0, [r1, #14]
    752c:	4808      	ldr	r0, [pc, #32]	; (7550 <siprintf+0x40>)
    752e:	cb04      	ldmia	r3!, {r2}
    7530:	00a4      	lsls	r4, r4, #2
    7532:	6800      	ldr	r0, [r0, #0]
    7534:	9301      	str	r3, [sp, #4]
    7536:	818c      	strh	r4, [r1, #12]
    7538:	f000 f916 	bl	7768 <_svfiprintf_r>
    753c:	2300      	movs	r3, #0
    753e:	9a02      	ldr	r2, [sp, #8]
    7540:	7013      	strb	r3, [r2, #0]
    7542:	b01d      	add	sp, #116	; 0x74
    7544:	bc10      	pop	{r4}
    7546:	bc08      	pop	{r3}
    7548:	b003      	add	sp, #12
    754a:	4718      	bx	r3
    754c:	7fffffff 	.word	0x7fffffff
    7550:	20000058 	.word	0x20000058

00007554 <_free_r>:
    7554:	b570      	push	{r4, r5, r6, lr}
    7556:	0005      	movs	r5, r0
    7558:	2900      	cmp	r1, #0
    755a:	d010      	beq.n	757e <_free_r+0x2a>
    755c:	1f0c      	subs	r4, r1, #4
    755e:	6823      	ldr	r3, [r4, #0]
    7560:	2b00      	cmp	r3, #0
    7562:	da00      	bge.n	7566 <_free_r+0x12>
    7564:	18e4      	adds	r4, r4, r3
    7566:	0028      	movs	r0, r5
    7568:	f000 fbb9 	bl	7cde <__malloc_lock>
    756c:	4a1d      	ldr	r2, [pc, #116]	; (75e4 <_free_r+0x90>)
    756e:	6813      	ldr	r3, [r2, #0]
    7570:	2b00      	cmp	r3, #0
    7572:	d105      	bne.n	7580 <_free_r+0x2c>
    7574:	6063      	str	r3, [r4, #4]
    7576:	6014      	str	r4, [r2, #0]
    7578:	0028      	movs	r0, r5
    757a:	f000 fbb1 	bl	7ce0 <__malloc_unlock>
    757e:	bd70      	pop	{r4, r5, r6, pc}
    7580:	42a3      	cmp	r3, r4
    7582:	d909      	bls.n	7598 <_free_r+0x44>
    7584:	6821      	ldr	r1, [r4, #0]
    7586:	1860      	adds	r0, r4, r1
    7588:	4283      	cmp	r3, r0
    758a:	d1f3      	bne.n	7574 <_free_r+0x20>
    758c:	6818      	ldr	r0, [r3, #0]
    758e:	685b      	ldr	r3, [r3, #4]
    7590:	1841      	adds	r1, r0, r1
    7592:	6021      	str	r1, [r4, #0]
    7594:	e7ee      	b.n	7574 <_free_r+0x20>
    7596:	0013      	movs	r3, r2
    7598:	685a      	ldr	r2, [r3, #4]
    759a:	2a00      	cmp	r2, #0
    759c:	d001      	beq.n	75a2 <_free_r+0x4e>
    759e:	42a2      	cmp	r2, r4
    75a0:	d9f9      	bls.n	7596 <_free_r+0x42>
    75a2:	6819      	ldr	r1, [r3, #0]
    75a4:	1858      	adds	r0, r3, r1
    75a6:	42a0      	cmp	r0, r4
    75a8:	d10b      	bne.n	75c2 <_free_r+0x6e>
    75aa:	6820      	ldr	r0, [r4, #0]
    75ac:	1809      	adds	r1, r1, r0
    75ae:	1858      	adds	r0, r3, r1
    75b0:	6019      	str	r1, [r3, #0]
    75b2:	4282      	cmp	r2, r0
    75b4:	d1e0      	bne.n	7578 <_free_r+0x24>
    75b6:	6810      	ldr	r0, [r2, #0]
    75b8:	6852      	ldr	r2, [r2, #4]
    75ba:	1841      	adds	r1, r0, r1
    75bc:	6019      	str	r1, [r3, #0]
    75be:	605a      	str	r2, [r3, #4]
    75c0:	e7da      	b.n	7578 <_free_r+0x24>
    75c2:	42a0      	cmp	r0, r4
    75c4:	d902      	bls.n	75cc <_free_r+0x78>
    75c6:	230c      	movs	r3, #12
    75c8:	602b      	str	r3, [r5, #0]
    75ca:	e7d5      	b.n	7578 <_free_r+0x24>
    75cc:	6821      	ldr	r1, [r4, #0]
    75ce:	1860      	adds	r0, r4, r1
    75d0:	4282      	cmp	r2, r0
    75d2:	d103      	bne.n	75dc <_free_r+0x88>
    75d4:	6810      	ldr	r0, [r2, #0]
    75d6:	6852      	ldr	r2, [r2, #4]
    75d8:	1841      	adds	r1, r0, r1
    75da:	6021      	str	r1, [r4, #0]
    75dc:	6062      	str	r2, [r4, #4]
    75de:	605c      	str	r4, [r3, #4]
    75e0:	e7ca      	b.n	7578 <_free_r+0x24>
    75e2:	46c0      	nop			; (mov r8, r8)
    75e4:	200002c4 	.word	0x200002c4

000075e8 <_malloc_r>:
    75e8:	2303      	movs	r3, #3
    75ea:	b570      	push	{r4, r5, r6, lr}
    75ec:	1ccd      	adds	r5, r1, #3
    75ee:	439d      	bics	r5, r3
    75f0:	3508      	adds	r5, #8
    75f2:	0006      	movs	r6, r0
    75f4:	2d0c      	cmp	r5, #12
    75f6:	d21e      	bcs.n	7636 <_malloc_r+0x4e>
    75f8:	250c      	movs	r5, #12
    75fa:	42a9      	cmp	r1, r5
    75fc:	d81d      	bhi.n	763a <_malloc_r+0x52>
    75fe:	0030      	movs	r0, r6
    7600:	f000 fb6d 	bl	7cde <__malloc_lock>
    7604:	4a25      	ldr	r2, [pc, #148]	; (769c <_malloc_r+0xb4>)
    7606:	6814      	ldr	r4, [r2, #0]
    7608:	0021      	movs	r1, r4
    760a:	2900      	cmp	r1, #0
    760c:	d119      	bne.n	7642 <_malloc_r+0x5a>
    760e:	4c24      	ldr	r4, [pc, #144]	; (76a0 <_malloc_r+0xb8>)
    7610:	6823      	ldr	r3, [r4, #0]
    7612:	2b00      	cmp	r3, #0
    7614:	d103      	bne.n	761e <_malloc_r+0x36>
    7616:	0030      	movs	r0, r6
    7618:	f000 fb32 	bl	7c80 <_sbrk_r>
    761c:	6020      	str	r0, [r4, #0]
    761e:	0029      	movs	r1, r5
    7620:	0030      	movs	r0, r6
    7622:	f000 fb2d 	bl	7c80 <_sbrk_r>
    7626:	1c43      	adds	r3, r0, #1
    7628:	d12c      	bne.n	7684 <_malloc_r+0x9c>
    762a:	230c      	movs	r3, #12
    762c:	0030      	movs	r0, r6
    762e:	6033      	str	r3, [r6, #0]
    7630:	f000 fb56 	bl	7ce0 <__malloc_unlock>
    7634:	e003      	b.n	763e <_malloc_r+0x56>
    7636:	2d00      	cmp	r5, #0
    7638:	dadf      	bge.n	75fa <_malloc_r+0x12>
    763a:	230c      	movs	r3, #12
    763c:	6033      	str	r3, [r6, #0]
    763e:	2000      	movs	r0, #0
    7640:	bd70      	pop	{r4, r5, r6, pc}
    7642:	680b      	ldr	r3, [r1, #0]
    7644:	1b5b      	subs	r3, r3, r5
    7646:	d41a      	bmi.n	767e <_malloc_r+0x96>
    7648:	2b0b      	cmp	r3, #11
    764a:	d903      	bls.n	7654 <_malloc_r+0x6c>
    764c:	600b      	str	r3, [r1, #0]
    764e:	18cc      	adds	r4, r1, r3
    7650:	6025      	str	r5, [r4, #0]
    7652:	e003      	b.n	765c <_malloc_r+0x74>
    7654:	428c      	cmp	r4, r1
    7656:	d10e      	bne.n	7676 <_malloc_r+0x8e>
    7658:	6863      	ldr	r3, [r4, #4]
    765a:	6013      	str	r3, [r2, #0]
    765c:	0030      	movs	r0, r6
    765e:	f000 fb3f 	bl	7ce0 <__malloc_unlock>
    7662:	0020      	movs	r0, r4
    7664:	2207      	movs	r2, #7
    7666:	300b      	adds	r0, #11
    7668:	1d23      	adds	r3, r4, #4
    766a:	4390      	bics	r0, r2
    766c:	1ac3      	subs	r3, r0, r3
    766e:	d0e7      	beq.n	7640 <_malloc_r+0x58>
    7670:	425a      	negs	r2, r3
    7672:	50e2      	str	r2, [r4, r3]
    7674:	e7e4      	b.n	7640 <_malloc_r+0x58>
    7676:	684b      	ldr	r3, [r1, #4]
    7678:	6063      	str	r3, [r4, #4]
    767a:	000c      	movs	r4, r1
    767c:	e7ee      	b.n	765c <_malloc_r+0x74>
    767e:	000c      	movs	r4, r1
    7680:	6849      	ldr	r1, [r1, #4]
    7682:	e7c2      	b.n	760a <_malloc_r+0x22>
    7684:	2303      	movs	r3, #3
    7686:	1cc4      	adds	r4, r0, #3
    7688:	439c      	bics	r4, r3
    768a:	42a0      	cmp	r0, r4
    768c:	d0e0      	beq.n	7650 <_malloc_r+0x68>
    768e:	1a21      	subs	r1, r4, r0
    7690:	0030      	movs	r0, r6
    7692:	f000 faf5 	bl	7c80 <_sbrk_r>
    7696:	1c43      	adds	r3, r0, #1
    7698:	d1da      	bne.n	7650 <_malloc_r+0x68>
    769a:	e7c6      	b.n	762a <_malloc_r+0x42>
    769c:	200002c4 	.word	0x200002c4
    76a0:	200002c8 	.word	0x200002c8

000076a4 <__ssputs_r>:
    76a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76a6:	688e      	ldr	r6, [r1, #8]
    76a8:	b085      	sub	sp, #20
    76aa:	0007      	movs	r7, r0
    76ac:	000c      	movs	r4, r1
    76ae:	9203      	str	r2, [sp, #12]
    76b0:	9301      	str	r3, [sp, #4]
    76b2:	429e      	cmp	r6, r3
    76b4:	d839      	bhi.n	772a <__ssputs_r+0x86>
    76b6:	2390      	movs	r3, #144	; 0x90
    76b8:	898a      	ldrh	r2, [r1, #12]
    76ba:	00db      	lsls	r3, r3, #3
    76bc:	421a      	tst	r2, r3
    76be:	d034      	beq.n	772a <__ssputs_r+0x86>
    76c0:	2503      	movs	r5, #3
    76c2:	6909      	ldr	r1, [r1, #16]
    76c4:	6823      	ldr	r3, [r4, #0]
    76c6:	1a5b      	subs	r3, r3, r1
    76c8:	9302      	str	r3, [sp, #8]
    76ca:	6963      	ldr	r3, [r4, #20]
    76cc:	9802      	ldr	r0, [sp, #8]
    76ce:	435d      	muls	r5, r3
    76d0:	0feb      	lsrs	r3, r5, #31
    76d2:	195d      	adds	r5, r3, r5
    76d4:	9b01      	ldr	r3, [sp, #4]
    76d6:	106d      	asrs	r5, r5, #1
    76d8:	3301      	adds	r3, #1
    76da:	181b      	adds	r3, r3, r0
    76dc:	42ab      	cmp	r3, r5
    76de:	d900      	bls.n	76e2 <__ssputs_r+0x3e>
    76e0:	001d      	movs	r5, r3
    76e2:	0553      	lsls	r3, r2, #21
    76e4:	d532      	bpl.n	774c <__ssputs_r+0xa8>
    76e6:	0029      	movs	r1, r5
    76e8:	0038      	movs	r0, r7
    76ea:	f7ff ff7d 	bl	75e8 <_malloc_r>
    76ee:	1e06      	subs	r6, r0, #0
    76f0:	d109      	bne.n	7706 <__ssputs_r+0x62>
    76f2:	230c      	movs	r3, #12
    76f4:	603b      	str	r3, [r7, #0]
    76f6:	2340      	movs	r3, #64	; 0x40
    76f8:	2001      	movs	r0, #1
    76fa:	89a2      	ldrh	r2, [r4, #12]
    76fc:	4240      	negs	r0, r0
    76fe:	4313      	orrs	r3, r2
    7700:	81a3      	strh	r3, [r4, #12]
    7702:	b005      	add	sp, #20
    7704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7706:	9a02      	ldr	r2, [sp, #8]
    7708:	6921      	ldr	r1, [r4, #16]
    770a:	f7ff fef0 	bl	74ee <memcpy>
    770e:	89a3      	ldrh	r3, [r4, #12]
    7710:	4a14      	ldr	r2, [pc, #80]	; (7764 <__ssputs_r+0xc0>)
    7712:	401a      	ands	r2, r3
    7714:	2380      	movs	r3, #128	; 0x80
    7716:	4313      	orrs	r3, r2
    7718:	81a3      	strh	r3, [r4, #12]
    771a:	9b02      	ldr	r3, [sp, #8]
    771c:	6126      	str	r6, [r4, #16]
    771e:	18f6      	adds	r6, r6, r3
    7720:	6026      	str	r6, [r4, #0]
    7722:	6165      	str	r5, [r4, #20]
    7724:	9e01      	ldr	r6, [sp, #4]
    7726:	1aed      	subs	r5, r5, r3
    7728:	60a5      	str	r5, [r4, #8]
    772a:	9b01      	ldr	r3, [sp, #4]
    772c:	42b3      	cmp	r3, r6
    772e:	d200      	bcs.n	7732 <__ssputs_r+0x8e>
    7730:	001e      	movs	r6, r3
    7732:	0032      	movs	r2, r6
    7734:	9903      	ldr	r1, [sp, #12]
    7736:	6820      	ldr	r0, [r4, #0]
    7738:	f000 fabf 	bl	7cba <memmove>
    773c:	68a3      	ldr	r3, [r4, #8]
    773e:	2000      	movs	r0, #0
    7740:	1b9b      	subs	r3, r3, r6
    7742:	60a3      	str	r3, [r4, #8]
    7744:	6823      	ldr	r3, [r4, #0]
    7746:	199e      	adds	r6, r3, r6
    7748:	6026      	str	r6, [r4, #0]
    774a:	e7da      	b.n	7702 <__ssputs_r+0x5e>
    774c:	002a      	movs	r2, r5
    774e:	0038      	movs	r0, r7
    7750:	f000 fac7 	bl	7ce2 <_realloc_r>
    7754:	1e06      	subs	r6, r0, #0
    7756:	d1e0      	bne.n	771a <__ssputs_r+0x76>
    7758:	6921      	ldr	r1, [r4, #16]
    775a:	0038      	movs	r0, r7
    775c:	f7ff fefa 	bl	7554 <_free_r>
    7760:	e7c7      	b.n	76f2 <__ssputs_r+0x4e>
    7762:	46c0      	nop			; (mov r8, r8)
    7764:	fffffb7f 	.word	0xfffffb7f

00007768 <_svfiprintf_r>:
    7768:	b5f0      	push	{r4, r5, r6, r7, lr}
    776a:	b09f      	sub	sp, #124	; 0x7c
    776c:	9002      	str	r0, [sp, #8]
    776e:	9305      	str	r3, [sp, #20]
    7770:	898b      	ldrh	r3, [r1, #12]
    7772:	000f      	movs	r7, r1
    7774:	0016      	movs	r6, r2
    7776:	061b      	lsls	r3, r3, #24
    7778:	d511      	bpl.n	779e <_svfiprintf_r+0x36>
    777a:	690b      	ldr	r3, [r1, #16]
    777c:	2b00      	cmp	r3, #0
    777e:	d10e      	bne.n	779e <_svfiprintf_r+0x36>
    7780:	2140      	movs	r1, #64	; 0x40
    7782:	f7ff ff31 	bl	75e8 <_malloc_r>
    7786:	6038      	str	r0, [r7, #0]
    7788:	6138      	str	r0, [r7, #16]
    778a:	2800      	cmp	r0, #0
    778c:	d105      	bne.n	779a <_svfiprintf_r+0x32>
    778e:	230c      	movs	r3, #12
    7790:	9a02      	ldr	r2, [sp, #8]
    7792:	3801      	subs	r0, #1
    7794:	6013      	str	r3, [r2, #0]
    7796:	b01f      	add	sp, #124	; 0x7c
    7798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    779a:	2340      	movs	r3, #64	; 0x40
    779c:	617b      	str	r3, [r7, #20]
    779e:	2300      	movs	r3, #0
    77a0:	ad06      	add	r5, sp, #24
    77a2:	616b      	str	r3, [r5, #20]
    77a4:	3320      	adds	r3, #32
    77a6:	766b      	strb	r3, [r5, #25]
    77a8:	3310      	adds	r3, #16
    77aa:	76ab      	strb	r3, [r5, #26]
    77ac:	0034      	movs	r4, r6
    77ae:	7823      	ldrb	r3, [r4, #0]
    77b0:	2b00      	cmp	r3, #0
    77b2:	d147      	bne.n	7844 <_svfiprintf_r+0xdc>
    77b4:	1ba3      	subs	r3, r4, r6
    77b6:	9304      	str	r3, [sp, #16]
    77b8:	d00d      	beq.n	77d6 <_svfiprintf_r+0x6e>
    77ba:	1ba3      	subs	r3, r4, r6
    77bc:	0032      	movs	r2, r6
    77be:	0039      	movs	r1, r7
    77c0:	9802      	ldr	r0, [sp, #8]
    77c2:	f7ff ff6f 	bl	76a4 <__ssputs_r>
    77c6:	1c43      	adds	r3, r0, #1
    77c8:	d100      	bne.n	77cc <_svfiprintf_r+0x64>
    77ca:	e0b5      	b.n	7938 <_svfiprintf_r+0x1d0>
    77cc:	696a      	ldr	r2, [r5, #20]
    77ce:	9b04      	ldr	r3, [sp, #16]
    77d0:	4694      	mov	ip, r2
    77d2:	4463      	add	r3, ip
    77d4:	616b      	str	r3, [r5, #20]
    77d6:	7823      	ldrb	r3, [r4, #0]
    77d8:	2b00      	cmp	r3, #0
    77da:	d100      	bne.n	77de <_svfiprintf_r+0x76>
    77dc:	e0ac      	b.n	7938 <_svfiprintf_r+0x1d0>
    77de:	2201      	movs	r2, #1
    77e0:	2300      	movs	r3, #0
    77e2:	4252      	negs	r2, r2
    77e4:	606a      	str	r2, [r5, #4]
    77e6:	a902      	add	r1, sp, #8
    77e8:	3254      	adds	r2, #84	; 0x54
    77ea:	1852      	adds	r2, r2, r1
    77ec:	3401      	adds	r4, #1
    77ee:	602b      	str	r3, [r5, #0]
    77f0:	60eb      	str	r3, [r5, #12]
    77f2:	60ab      	str	r3, [r5, #8]
    77f4:	7013      	strb	r3, [r2, #0]
    77f6:	65ab      	str	r3, [r5, #88]	; 0x58
    77f8:	4e58      	ldr	r6, [pc, #352]	; (795c <_svfiprintf_r+0x1f4>)
    77fa:	2205      	movs	r2, #5
    77fc:	7821      	ldrb	r1, [r4, #0]
    77fe:	0030      	movs	r0, r6
    7800:	f000 fa50 	bl	7ca4 <memchr>
    7804:	1c62      	adds	r2, r4, #1
    7806:	2800      	cmp	r0, #0
    7808:	d120      	bne.n	784c <_svfiprintf_r+0xe4>
    780a:	6829      	ldr	r1, [r5, #0]
    780c:	06cb      	lsls	r3, r1, #27
    780e:	d504      	bpl.n	781a <_svfiprintf_r+0xb2>
    7810:	2353      	movs	r3, #83	; 0x53
    7812:	ae02      	add	r6, sp, #8
    7814:	3020      	adds	r0, #32
    7816:	199b      	adds	r3, r3, r6
    7818:	7018      	strb	r0, [r3, #0]
    781a:	070b      	lsls	r3, r1, #28
    781c:	d504      	bpl.n	7828 <_svfiprintf_r+0xc0>
    781e:	2353      	movs	r3, #83	; 0x53
    7820:	202b      	movs	r0, #43	; 0x2b
    7822:	ae02      	add	r6, sp, #8
    7824:	199b      	adds	r3, r3, r6
    7826:	7018      	strb	r0, [r3, #0]
    7828:	7823      	ldrb	r3, [r4, #0]
    782a:	2b2a      	cmp	r3, #42	; 0x2a
    782c:	d016      	beq.n	785c <_svfiprintf_r+0xf4>
    782e:	2000      	movs	r0, #0
    7830:	210a      	movs	r1, #10
    7832:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7834:	7822      	ldrb	r2, [r4, #0]
    7836:	3a30      	subs	r2, #48	; 0x30
    7838:	2a09      	cmp	r2, #9
    783a:	d955      	bls.n	78e8 <_svfiprintf_r+0x180>
    783c:	2800      	cmp	r0, #0
    783e:	d015      	beq.n	786c <_svfiprintf_r+0x104>
    7840:	9309      	str	r3, [sp, #36]	; 0x24
    7842:	e013      	b.n	786c <_svfiprintf_r+0x104>
    7844:	2b25      	cmp	r3, #37	; 0x25
    7846:	d0b5      	beq.n	77b4 <_svfiprintf_r+0x4c>
    7848:	3401      	adds	r4, #1
    784a:	e7b0      	b.n	77ae <_svfiprintf_r+0x46>
    784c:	2301      	movs	r3, #1
    784e:	1b80      	subs	r0, r0, r6
    7850:	4083      	lsls	r3, r0
    7852:	6829      	ldr	r1, [r5, #0]
    7854:	0014      	movs	r4, r2
    7856:	430b      	orrs	r3, r1
    7858:	602b      	str	r3, [r5, #0]
    785a:	e7cd      	b.n	77f8 <_svfiprintf_r+0x90>
    785c:	9b05      	ldr	r3, [sp, #20]
    785e:	1d18      	adds	r0, r3, #4
    7860:	681b      	ldr	r3, [r3, #0]
    7862:	9005      	str	r0, [sp, #20]
    7864:	2b00      	cmp	r3, #0
    7866:	db39      	blt.n	78dc <_svfiprintf_r+0x174>
    7868:	9309      	str	r3, [sp, #36]	; 0x24
    786a:	0014      	movs	r4, r2
    786c:	7823      	ldrb	r3, [r4, #0]
    786e:	2b2e      	cmp	r3, #46	; 0x2e
    7870:	d10b      	bne.n	788a <_svfiprintf_r+0x122>
    7872:	7863      	ldrb	r3, [r4, #1]
    7874:	1c62      	adds	r2, r4, #1
    7876:	2b2a      	cmp	r3, #42	; 0x2a
    7878:	d13e      	bne.n	78f8 <_svfiprintf_r+0x190>
    787a:	9b05      	ldr	r3, [sp, #20]
    787c:	3402      	adds	r4, #2
    787e:	1d1a      	adds	r2, r3, #4
    7880:	681b      	ldr	r3, [r3, #0]
    7882:	9205      	str	r2, [sp, #20]
    7884:	2b00      	cmp	r3, #0
    7886:	db34      	blt.n	78f2 <_svfiprintf_r+0x18a>
    7888:	9307      	str	r3, [sp, #28]
    788a:	4e35      	ldr	r6, [pc, #212]	; (7960 <_svfiprintf_r+0x1f8>)
    788c:	7821      	ldrb	r1, [r4, #0]
    788e:	2203      	movs	r2, #3
    7890:	0030      	movs	r0, r6
    7892:	f000 fa07 	bl	7ca4 <memchr>
    7896:	2800      	cmp	r0, #0
    7898:	d006      	beq.n	78a8 <_svfiprintf_r+0x140>
    789a:	2340      	movs	r3, #64	; 0x40
    789c:	1b80      	subs	r0, r0, r6
    789e:	4083      	lsls	r3, r0
    78a0:	682a      	ldr	r2, [r5, #0]
    78a2:	3401      	adds	r4, #1
    78a4:	4313      	orrs	r3, r2
    78a6:	602b      	str	r3, [r5, #0]
    78a8:	7821      	ldrb	r1, [r4, #0]
    78aa:	2206      	movs	r2, #6
    78ac:	482d      	ldr	r0, [pc, #180]	; (7964 <_svfiprintf_r+0x1fc>)
    78ae:	1c66      	adds	r6, r4, #1
    78b0:	7629      	strb	r1, [r5, #24]
    78b2:	f000 f9f7 	bl	7ca4 <memchr>
    78b6:	2800      	cmp	r0, #0
    78b8:	d046      	beq.n	7948 <_svfiprintf_r+0x1e0>
    78ba:	4b2b      	ldr	r3, [pc, #172]	; (7968 <_svfiprintf_r+0x200>)
    78bc:	2b00      	cmp	r3, #0
    78be:	d12f      	bne.n	7920 <_svfiprintf_r+0x1b8>
    78c0:	6829      	ldr	r1, [r5, #0]
    78c2:	9b05      	ldr	r3, [sp, #20]
    78c4:	2207      	movs	r2, #7
    78c6:	05c9      	lsls	r1, r1, #23
    78c8:	d528      	bpl.n	791c <_svfiprintf_r+0x1b4>
    78ca:	189b      	adds	r3, r3, r2
    78cc:	4393      	bics	r3, r2
    78ce:	3308      	adds	r3, #8
    78d0:	9305      	str	r3, [sp, #20]
    78d2:	696b      	ldr	r3, [r5, #20]
    78d4:	9a03      	ldr	r2, [sp, #12]
    78d6:	189b      	adds	r3, r3, r2
    78d8:	616b      	str	r3, [r5, #20]
    78da:	e767      	b.n	77ac <_svfiprintf_r+0x44>
    78dc:	425b      	negs	r3, r3
    78de:	60eb      	str	r3, [r5, #12]
    78e0:	2302      	movs	r3, #2
    78e2:	430b      	orrs	r3, r1
    78e4:	602b      	str	r3, [r5, #0]
    78e6:	e7c0      	b.n	786a <_svfiprintf_r+0x102>
    78e8:	434b      	muls	r3, r1
    78ea:	3401      	adds	r4, #1
    78ec:	189b      	adds	r3, r3, r2
    78ee:	2001      	movs	r0, #1
    78f0:	e7a0      	b.n	7834 <_svfiprintf_r+0xcc>
    78f2:	2301      	movs	r3, #1
    78f4:	425b      	negs	r3, r3
    78f6:	e7c7      	b.n	7888 <_svfiprintf_r+0x120>
    78f8:	2300      	movs	r3, #0
    78fa:	0014      	movs	r4, r2
    78fc:	200a      	movs	r0, #10
    78fe:	001a      	movs	r2, r3
    7900:	606b      	str	r3, [r5, #4]
    7902:	7821      	ldrb	r1, [r4, #0]
    7904:	3930      	subs	r1, #48	; 0x30
    7906:	2909      	cmp	r1, #9
    7908:	d903      	bls.n	7912 <_svfiprintf_r+0x1aa>
    790a:	2b00      	cmp	r3, #0
    790c:	d0bd      	beq.n	788a <_svfiprintf_r+0x122>
    790e:	9207      	str	r2, [sp, #28]
    7910:	e7bb      	b.n	788a <_svfiprintf_r+0x122>
    7912:	4342      	muls	r2, r0
    7914:	3401      	adds	r4, #1
    7916:	1852      	adds	r2, r2, r1
    7918:	2301      	movs	r3, #1
    791a:	e7f2      	b.n	7902 <_svfiprintf_r+0x19a>
    791c:	3307      	adds	r3, #7
    791e:	e7d5      	b.n	78cc <_svfiprintf_r+0x164>
    7920:	ab05      	add	r3, sp, #20
    7922:	9300      	str	r3, [sp, #0]
    7924:	003a      	movs	r2, r7
    7926:	4b11      	ldr	r3, [pc, #68]	; (796c <_svfiprintf_r+0x204>)
    7928:	0029      	movs	r1, r5
    792a:	9802      	ldr	r0, [sp, #8]
    792c:	e000      	b.n	7930 <_svfiprintf_r+0x1c8>
    792e:	bf00      	nop
    7930:	9003      	str	r0, [sp, #12]
    7932:	9b03      	ldr	r3, [sp, #12]
    7934:	3301      	adds	r3, #1
    7936:	d1cc      	bne.n	78d2 <_svfiprintf_r+0x16a>
    7938:	89bb      	ldrh	r3, [r7, #12]
    793a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    793c:	065b      	lsls	r3, r3, #25
    793e:	d400      	bmi.n	7942 <_svfiprintf_r+0x1da>
    7940:	e729      	b.n	7796 <_svfiprintf_r+0x2e>
    7942:	2001      	movs	r0, #1
    7944:	4240      	negs	r0, r0
    7946:	e726      	b.n	7796 <_svfiprintf_r+0x2e>
    7948:	ab05      	add	r3, sp, #20
    794a:	9300      	str	r3, [sp, #0]
    794c:	003a      	movs	r2, r7
    794e:	4b07      	ldr	r3, [pc, #28]	; (796c <_svfiprintf_r+0x204>)
    7950:	0029      	movs	r1, r5
    7952:	9802      	ldr	r0, [sp, #8]
    7954:	f000 f87a 	bl	7a4c <_printf_i>
    7958:	e7ea      	b.n	7930 <_svfiprintf_r+0x1c8>
    795a:	46c0      	nop			; (mov r8, r8)
    795c:	00007f68 	.word	0x00007f68
    7960:	00007f6e 	.word	0x00007f6e
    7964:	00007f72 	.word	0x00007f72
    7968:	00000000 	.word	0x00000000
    796c:	000076a5 	.word	0x000076a5

00007970 <_printf_common>:
    7970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7972:	0015      	movs	r5, r2
    7974:	9301      	str	r3, [sp, #4]
    7976:	688a      	ldr	r2, [r1, #8]
    7978:	690b      	ldr	r3, [r1, #16]
    797a:	9000      	str	r0, [sp, #0]
    797c:	000c      	movs	r4, r1
    797e:	4293      	cmp	r3, r2
    7980:	da00      	bge.n	7984 <_printf_common+0x14>
    7982:	0013      	movs	r3, r2
    7984:	0022      	movs	r2, r4
    7986:	602b      	str	r3, [r5, #0]
    7988:	3243      	adds	r2, #67	; 0x43
    798a:	7812      	ldrb	r2, [r2, #0]
    798c:	2a00      	cmp	r2, #0
    798e:	d001      	beq.n	7994 <_printf_common+0x24>
    7990:	3301      	adds	r3, #1
    7992:	602b      	str	r3, [r5, #0]
    7994:	6823      	ldr	r3, [r4, #0]
    7996:	069b      	lsls	r3, r3, #26
    7998:	d502      	bpl.n	79a0 <_printf_common+0x30>
    799a:	682b      	ldr	r3, [r5, #0]
    799c:	3302      	adds	r3, #2
    799e:	602b      	str	r3, [r5, #0]
    79a0:	2706      	movs	r7, #6
    79a2:	6823      	ldr	r3, [r4, #0]
    79a4:	401f      	ands	r7, r3
    79a6:	d027      	beq.n	79f8 <_printf_common+0x88>
    79a8:	0023      	movs	r3, r4
    79aa:	3343      	adds	r3, #67	; 0x43
    79ac:	781b      	ldrb	r3, [r3, #0]
    79ae:	1e5a      	subs	r2, r3, #1
    79b0:	4193      	sbcs	r3, r2
    79b2:	6822      	ldr	r2, [r4, #0]
    79b4:	0692      	lsls	r2, r2, #26
    79b6:	d430      	bmi.n	7a1a <_printf_common+0xaa>
    79b8:	0022      	movs	r2, r4
    79ba:	9901      	ldr	r1, [sp, #4]
    79bc:	3243      	adds	r2, #67	; 0x43
    79be:	9800      	ldr	r0, [sp, #0]
    79c0:	9e08      	ldr	r6, [sp, #32]
    79c2:	47b0      	blx	r6
    79c4:	1c43      	adds	r3, r0, #1
    79c6:	d025      	beq.n	7a14 <_printf_common+0xa4>
    79c8:	2306      	movs	r3, #6
    79ca:	6820      	ldr	r0, [r4, #0]
    79cc:	682a      	ldr	r2, [r5, #0]
    79ce:	68e1      	ldr	r1, [r4, #12]
    79d0:	4003      	ands	r3, r0
    79d2:	2500      	movs	r5, #0
    79d4:	2b04      	cmp	r3, #4
    79d6:	d103      	bne.n	79e0 <_printf_common+0x70>
    79d8:	1a8d      	subs	r5, r1, r2
    79da:	43eb      	mvns	r3, r5
    79dc:	17db      	asrs	r3, r3, #31
    79de:	401d      	ands	r5, r3
    79e0:	68a3      	ldr	r3, [r4, #8]
    79e2:	6922      	ldr	r2, [r4, #16]
    79e4:	4293      	cmp	r3, r2
    79e6:	dd01      	ble.n	79ec <_printf_common+0x7c>
    79e8:	1a9b      	subs	r3, r3, r2
    79ea:	18ed      	adds	r5, r5, r3
    79ec:	2700      	movs	r7, #0
    79ee:	42bd      	cmp	r5, r7
    79f0:	d120      	bne.n	7a34 <_printf_common+0xc4>
    79f2:	2000      	movs	r0, #0
    79f4:	e010      	b.n	7a18 <_printf_common+0xa8>
    79f6:	3701      	adds	r7, #1
    79f8:	68e3      	ldr	r3, [r4, #12]
    79fa:	682a      	ldr	r2, [r5, #0]
    79fc:	1a9b      	subs	r3, r3, r2
    79fe:	429f      	cmp	r7, r3
    7a00:	dad2      	bge.n	79a8 <_printf_common+0x38>
    7a02:	0022      	movs	r2, r4
    7a04:	2301      	movs	r3, #1
    7a06:	3219      	adds	r2, #25
    7a08:	9901      	ldr	r1, [sp, #4]
    7a0a:	9800      	ldr	r0, [sp, #0]
    7a0c:	9e08      	ldr	r6, [sp, #32]
    7a0e:	47b0      	blx	r6
    7a10:	1c43      	adds	r3, r0, #1
    7a12:	d1f0      	bne.n	79f6 <_printf_common+0x86>
    7a14:	2001      	movs	r0, #1
    7a16:	4240      	negs	r0, r0
    7a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7a1a:	2030      	movs	r0, #48	; 0x30
    7a1c:	18e1      	adds	r1, r4, r3
    7a1e:	3143      	adds	r1, #67	; 0x43
    7a20:	7008      	strb	r0, [r1, #0]
    7a22:	0021      	movs	r1, r4
    7a24:	1c5a      	adds	r2, r3, #1
    7a26:	3145      	adds	r1, #69	; 0x45
    7a28:	7809      	ldrb	r1, [r1, #0]
    7a2a:	18a2      	adds	r2, r4, r2
    7a2c:	3243      	adds	r2, #67	; 0x43
    7a2e:	3302      	adds	r3, #2
    7a30:	7011      	strb	r1, [r2, #0]
    7a32:	e7c1      	b.n	79b8 <_printf_common+0x48>
    7a34:	0022      	movs	r2, r4
    7a36:	2301      	movs	r3, #1
    7a38:	321a      	adds	r2, #26
    7a3a:	9901      	ldr	r1, [sp, #4]
    7a3c:	9800      	ldr	r0, [sp, #0]
    7a3e:	9e08      	ldr	r6, [sp, #32]
    7a40:	47b0      	blx	r6
    7a42:	1c43      	adds	r3, r0, #1
    7a44:	d0e6      	beq.n	7a14 <_printf_common+0xa4>
    7a46:	3701      	adds	r7, #1
    7a48:	e7d1      	b.n	79ee <_printf_common+0x7e>
	...

00007a4c <_printf_i>:
    7a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a4e:	b08b      	sub	sp, #44	; 0x2c
    7a50:	9206      	str	r2, [sp, #24]
    7a52:	000a      	movs	r2, r1
    7a54:	3243      	adds	r2, #67	; 0x43
    7a56:	9307      	str	r3, [sp, #28]
    7a58:	9005      	str	r0, [sp, #20]
    7a5a:	9204      	str	r2, [sp, #16]
    7a5c:	7e0a      	ldrb	r2, [r1, #24]
    7a5e:	000c      	movs	r4, r1
    7a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7a62:	2a6e      	cmp	r2, #110	; 0x6e
    7a64:	d100      	bne.n	7a68 <_printf_i+0x1c>
    7a66:	e08f      	b.n	7b88 <_printf_i+0x13c>
    7a68:	d817      	bhi.n	7a9a <_printf_i+0x4e>
    7a6a:	2a63      	cmp	r2, #99	; 0x63
    7a6c:	d02c      	beq.n	7ac8 <_printf_i+0x7c>
    7a6e:	d808      	bhi.n	7a82 <_printf_i+0x36>
    7a70:	2a00      	cmp	r2, #0
    7a72:	d100      	bne.n	7a76 <_printf_i+0x2a>
    7a74:	e099      	b.n	7baa <_printf_i+0x15e>
    7a76:	2a58      	cmp	r2, #88	; 0x58
    7a78:	d054      	beq.n	7b24 <_printf_i+0xd8>
    7a7a:	0026      	movs	r6, r4
    7a7c:	3642      	adds	r6, #66	; 0x42
    7a7e:	7032      	strb	r2, [r6, #0]
    7a80:	e029      	b.n	7ad6 <_printf_i+0x8a>
    7a82:	2a64      	cmp	r2, #100	; 0x64
    7a84:	d001      	beq.n	7a8a <_printf_i+0x3e>
    7a86:	2a69      	cmp	r2, #105	; 0x69
    7a88:	d1f7      	bne.n	7a7a <_printf_i+0x2e>
    7a8a:	6821      	ldr	r1, [r4, #0]
    7a8c:	681a      	ldr	r2, [r3, #0]
    7a8e:	0608      	lsls	r0, r1, #24
    7a90:	d523      	bpl.n	7ada <_printf_i+0x8e>
    7a92:	1d11      	adds	r1, r2, #4
    7a94:	6019      	str	r1, [r3, #0]
    7a96:	6815      	ldr	r5, [r2, #0]
    7a98:	e025      	b.n	7ae6 <_printf_i+0x9a>
    7a9a:	2a73      	cmp	r2, #115	; 0x73
    7a9c:	d100      	bne.n	7aa0 <_printf_i+0x54>
    7a9e:	e088      	b.n	7bb2 <_printf_i+0x166>
    7aa0:	d808      	bhi.n	7ab4 <_printf_i+0x68>
    7aa2:	2a6f      	cmp	r2, #111	; 0x6f
    7aa4:	d029      	beq.n	7afa <_printf_i+0xae>
    7aa6:	2a70      	cmp	r2, #112	; 0x70
    7aa8:	d1e7      	bne.n	7a7a <_printf_i+0x2e>
    7aaa:	2220      	movs	r2, #32
    7aac:	6809      	ldr	r1, [r1, #0]
    7aae:	430a      	orrs	r2, r1
    7ab0:	6022      	str	r2, [r4, #0]
    7ab2:	e003      	b.n	7abc <_printf_i+0x70>
    7ab4:	2a75      	cmp	r2, #117	; 0x75
    7ab6:	d020      	beq.n	7afa <_printf_i+0xae>
    7ab8:	2a78      	cmp	r2, #120	; 0x78
    7aba:	d1de      	bne.n	7a7a <_printf_i+0x2e>
    7abc:	0022      	movs	r2, r4
    7abe:	2178      	movs	r1, #120	; 0x78
    7ac0:	3245      	adds	r2, #69	; 0x45
    7ac2:	7011      	strb	r1, [r2, #0]
    7ac4:	4a6c      	ldr	r2, [pc, #432]	; (7c78 <_printf_i+0x22c>)
    7ac6:	e030      	b.n	7b2a <_printf_i+0xde>
    7ac8:	000e      	movs	r6, r1
    7aca:	681a      	ldr	r2, [r3, #0]
    7acc:	3642      	adds	r6, #66	; 0x42
    7ace:	1d11      	adds	r1, r2, #4
    7ad0:	6019      	str	r1, [r3, #0]
    7ad2:	6813      	ldr	r3, [r2, #0]
    7ad4:	7033      	strb	r3, [r6, #0]
    7ad6:	2301      	movs	r3, #1
    7ad8:	e079      	b.n	7bce <_printf_i+0x182>
    7ada:	0649      	lsls	r1, r1, #25
    7adc:	d5d9      	bpl.n	7a92 <_printf_i+0x46>
    7ade:	1d11      	adds	r1, r2, #4
    7ae0:	6019      	str	r1, [r3, #0]
    7ae2:	2300      	movs	r3, #0
    7ae4:	5ed5      	ldrsh	r5, [r2, r3]
    7ae6:	2d00      	cmp	r5, #0
    7ae8:	da03      	bge.n	7af2 <_printf_i+0xa6>
    7aea:	232d      	movs	r3, #45	; 0x2d
    7aec:	9a04      	ldr	r2, [sp, #16]
    7aee:	426d      	negs	r5, r5
    7af0:	7013      	strb	r3, [r2, #0]
    7af2:	4b62      	ldr	r3, [pc, #392]	; (7c7c <_printf_i+0x230>)
    7af4:	270a      	movs	r7, #10
    7af6:	9303      	str	r3, [sp, #12]
    7af8:	e02f      	b.n	7b5a <_printf_i+0x10e>
    7afa:	6820      	ldr	r0, [r4, #0]
    7afc:	6819      	ldr	r1, [r3, #0]
    7afe:	0605      	lsls	r5, r0, #24
    7b00:	d503      	bpl.n	7b0a <_printf_i+0xbe>
    7b02:	1d08      	adds	r0, r1, #4
    7b04:	6018      	str	r0, [r3, #0]
    7b06:	680d      	ldr	r5, [r1, #0]
    7b08:	e005      	b.n	7b16 <_printf_i+0xca>
    7b0a:	0640      	lsls	r0, r0, #25
    7b0c:	d5f9      	bpl.n	7b02 <_printf_i+0xb6>
    7b0e:	680d      	ldr	r5, [r1, #0]
    7b10:	1d08      	adds	r0, r1, #4
    7b12:	6018      	str	r0, [r3, #0]
    7b14:	b2ad      	uxth	r5, r5
    7b16:	4b59      	ldr	r3, [pc, #356]	; (7c7c <_printf_i+0x230>)
    7b18:	2708      	movs	r7, #8
    7b1a:	9303      	str	r3, [sp, #12]
    7b1c:	2a6f      	cmp	r2, #111	; 0x6f
    7b1e:	d018      	beq.n	7b52 <_printf_i+0x106>
    7b20:	270a      	movs	r7, #10
    7b22:	e016      	b.n	7b52 <_printf_i+0x106>
    7b24:	3145      	adds	r1, #69	; 0x45
    7b26:	700a      	strb	r2, [r1, #0]
    7b28:	4a54      	ldr	r2, [pc, #336]	; (7c7c <_printf_i+0x230>)
    7b2a:	9203      	str	r2, [sp, #12]
    7b2c:	681a      	ldr	r2, [r3, #0]
    7b2e:	6821      	ldr	r1, [r4, #0]
    7b30:	1d10      	adds	r0, r2, #4
    7b32:	6018      	str	r0, [r3, #0]
    7b34:	6815      	ldr	r5, [r2, #0]
    7b36:	0608      	lsls	r0, r1, #24
    7b38:	d522      	bpl.n	7b80 <_printf_i+0x134>
    7b3a:	07cb      	lsls	r3, r1, #31
    7b3c:	d502      	bpl.n	7b44 <_printf_i+0xf8>
    7b3e:	2320      	movs	r3, #32
    7b40:	4319      	orrs	r1, r3
    7b42:	6021      	str	r1, [r4, #0]
    7b44:	2710      	movs	r7, #16
    7b46:	2d00      	cmp	r5, #0
    7b48:	d103      	bne.n	7b52 <_printf_i+0x106>
    7b4a:	2320      	movs	r3, #32
    7b4c:	6822      	ldr	r2, [r4, #0]
    7b4e:	439a      	bics	r2, r3
    7b50:	6022      	str	r2, [r4, #0]
    7b52:	0023      	movs	r3, r4
    7b54:	2200      	movs	r2, #0
    7b56:	3343      	adds	r3, #67	; 0x43
    7b58:	701a      	strb	r2, [r3, #0]
    7b5a:	6863      	ldr	r3, [r4, #4]
    7b5c:	60a3      	str	r3, [r4, #8]
    7b5e:	2b00      	cmp	r3, #0
    7b60:	db5c      	blt.n	7c1c <_printf_i+0x1d0>
    7b62:	2204      	movs	r2, #4
    7b64:	6821      	ldr	r1, [r4, #0]
    7b66:	4391      	bics	r1, r2
    7b68:	6021      	str	r1, [r4, #0]
    7b6a:	2d00      	cmp	r5, #0
    7b6c:	d158      	bne.n	7c20 <_printf_i+0x1d4>
    7b6e:	9e04      	ldr	r6, [sp, #16]
    7b70:	2b00      	cmp	r3, #0
    7b72:	d064      	beq.n	7c3e <_printf_i+0x1f2>
    7b74:	0026      	movs	r6, r4
    7b76:	9b03      	ldr	r3, [sp, #12]
    7b78:	3642      	adds	r6, #66	; 0x42
    7b7a:	781b      	ldrb	r3, [r3, #0]
    7b7c:	7033      	strb	r3, [r6, #0]
    7b7e:	e05e      	b.n	7c3e <_printf_i+0x1f2>
    7b80:	0648      	lsls	r0, r1, #25
    7b82:	d5da      	bpl.n	7b3a <_printf_i+0xee>
    7b84:	b2ad      	uxth	r5, r5
    7b86:	e7d8      	b.n	7b3a <_printf_i+0xee>
    7b88:	6809      	ldr	r1, [r1, #0]
    7b8a:	681a      	ldr	r2, [r3, #0]
    7b8c:	0608      	lsls	r0, r1, #24
    7b8e:	d505      	bpl.n	7b9c <_printf_i+0x150>
    7b90:	1d11      	adds	r1, r2, #4
    7b92:	6019      	str	r1, [r3, #0]
    7b94:	6813      	ldr	r3, [r2, #0]
    7b96:	6962      	ldr	r2, [r4, #20]
    7b98:	601a      	str	r2, [r3, #0]
    7b9a:	e006      	b.n	7baa <_printf_i+0x15e>
    7b9c:	0649      	lsls	r1, r1, #25
    7b9e:	d5f7      	bpl.n	7b90 <_printf_i+0x144>
    7ba0:	1d11      	adds	r1, r2, #4
    7ba2:	6019      	str	r1, [r3, #0]
    7ba4:	6813      	ldr	r3, [r2, #0]
    7ba6:	8aa2      	ldrh	r2, [r4, #20]
    7ba8:	801a      	strh	r2, [r3, #0]
    7baa:	2300      	movs	r3, #0
    7bac:	9e04      	ldr	r6, [sp, #16]
    7bae:	6123      	str	r3, [r4, #16]
    7bb0:	e054      	b.n	7c5c <_printf_i+0x210>
    7bb2:	681a      	ldr	r2, [r3, #0]
    7bb4:	1d11      	adds	r1, r2, #4
    7bb6:	6019      	str	r1, [r3, #0]
    7bb8:	6816      	ldr	r6, [r2, #0]
    7bba:	2100      	movs	r1, #0
    7bbc:	6862      	ldr	r2, [r4, #4]
    7bbe:	0030      	movs	r0, r6
    7bc0:	f000 f870 	bl	7ca4 <memchr>
    7bc4:	2800      	cmp	r0, #0
    7bc6:	d001      	beq.n	7bcc <_printf_i+0x180>
    7bc8:	1b80      	subs	r0, r0, r6
    7bca:	6060      	str	r0, [r4, #4]
    7bcc:	6863      	ldr	r3, [r4, #4]
    7bce:	6123      	str	r3, [r4, #16]
    7bd0:	2300      	movs	r3, #0
    7bd2:	9a04      	ldr	r2, [sp, #16]
    7bd4:	7013      	strb	r3, [r2, #0]
    7bd6:	e041      	b.n	7c5c <_printf_i+0x210>
    7bd8:	6923      	ldr	r3, [r4, #16]
    7bda:	0032      	movs	r2, r6
    7bdc:	9906      	ldr	r1, [sp, #24]
    7bde:	9805      	ldr	r0, [sp, #20]
    7be0:	9d07      	ldr	r5, [sp, #28]
    7be2:	47a8      	blx	r5
    7be4:	1c43      	adds	r3, r0, #1
    7be6:	d043      	beq.n	7c70 <_printf_i+0x224>
    7be8:	6823      	ldr	r3, [r4, #0]
    7bea:	2500      	movs	r5, #0
    7bec:	079b      	lsls	r3, r3, #30
    7bee:	d40f      	bmi.n	7c10 <_printf_i+0x1c4>
    7bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bf2:	68e0      	ldr	r0, [r4, #12]
    7bf4:	4298      	cmp	r0, r3
    7bf6:	da3d      	bge.n	7c74 <_printf_i+0x228>
    7bf8:	0018      	movs	r0, r3
    7bfa:	e03b      	b.n	7c74 <_printf_i+0x228>
    7bfc:	0022      	movs	r2, r4
    7bfe:	2301      	movs	r3, #1
    7c00:	3219      	adds	r2, #25
    7c02:	9906      	ldr	r1, [sp, #24]
    7c04:	9805      	ldr	r0, [sp, #20]
    7c06:	9e07      	ldr	r6, [sp, #28]
    7c08:	47b0      	blx	r6
    7c0a:	1c43      	adds	r3, r0, #1
    7c0c:	d030      	beq.n	7c70 <_printf_i+0x224>
    7c0e:	3501      	adds	r5, #1
    7c10:	68e3      	ldr	r3, [r4, #12]
    7c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c14:	1a9b      	subs	r3, r3, r2
    7c16:	429d      	cmp	r5, r3
    7c18:	dbf0      	blt.n	7bfc <_printf_i+0x1b0>
    7c1a:	e7e9      	b.n	7bf0 <_printf_i+0x1a4>
    7c1c:	2d00      	cmp	r5, #0
    7c1e:	d0a9      	beq.n	7b74 <_printf_i+0x128>
    7c20:	9e04      	ldr	r6, [sp, #16]
    7c22:	0028      	movs	r0, r5
    7c24:	0039      	movs	r1, r7
    7c26:	f7ff fb3f 	bl	72a8 <__aeabi_uidivmod>
    7c2a:	9b03      	ldr	r3, [sp, #12]
    7c2c:	3e01      	subs	r6, #1
    7c2e:	5c5b      	ldrb	r3, [r3, r1]
    7c30:	0028      	movs	r0, r5
    7c32:	7033      	strb	r3, [r6, #0]
    7c34:	0039      	movs	r1, r7
    7c36:	f7ff fab1 	bl	719c <__udivsi3>
    7c3a:	1e05      	subs	r5, r0, #0
    7c3c:	d1f1      	bne.n	7c22 <_printf_i+0x1d6>
    7c3e:	2f08      	cmp	r7, #8
    7c40:	d109      	bne.n	7c56 <_printf_i+0x20a>
    7c42:	6823      	ldr	r3, [r4, #0]
    7c44:	07db      	lsls	r3, r3, #31
    7c46:	d506      	bpl.n	7c56 <_printf_i+0x20a>
    7c48:	6863      	ldr	r3, [r4, #4]
    7c4a:	6922      	ldr	r2, [r4, #16]
    7c4c:	4293      	cmp	r3, r2
    7c4e:	dc02      	bgt.n	7c56 <_printf_i+0x20a>
    7c50:	2330      	movs	r3, #48	; 0x30
    7c52:	3e01      	subs	r6, #1
    7c54:	7033      	strb	r3, [r6, #0]
    7c56:	9b04      	ldr	r3, [sp, #16]
    7c58:	1b9b      	subs	r3, r3, r6
    7c5a:	6123      	str	r3, [r4, #16]
    7c5c:	9b07      	ldr	r3, [sp, #28]
    7c5e:	aa09      	add	r2, sp, #36	; 0x24
    7c60:	9300      	str	r3, [sp, #0]
    7c62:	0021      	movs	r1, r4
    7c64:	9b06      	ldr	r3, [sp, #24]
    7c66:	9805      	ldr	r0, [sp, #20]
    7c68:	f7ff fe82 	bl	7970 <_printf_common>
    7c6c:	1c43      	adds	r3, r0, #1
    7c6e:	d1b3      	bne.n	7bd8 <_printf_i+0x18c>
    7c70:	2001      	movs	r0, #1
    7c72:	4240      	negs	r0, r0
    7c74:	b00b      	add	sp, #44	; 0x2c
    7c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c78:	00007f8a 	.word	0x00007f8a
    7c7c:	00007f79 	.word	0x00007f79

00007c80 <_sbrk_r>:
    7c80:	2300      	movs	r3, #0
    7c82:	b570      	push	{r4, r5, r6, lr}
    7c84:	4c06      	ldr	r4, [pc, #24]	; (7ca0 <_sbrk_r+0x20>)
    7c86:	0005      	movs	r5, r0
    7c88:	0008      	movs	r0, r1
    7c8a:	6023      	str	r3, [r4, #0]
    7c8c:	f7fa f888 	bl	1da0 <_sbrk>
    7c90:	1c43      	adds	r3, r0, #1
    7c92:	d103      	bne.n	7c9c <_sbrk_r+0x1c>
    7c94:	6823      	ldr	r3, [r4, #0]
    7c96:	2b00      	cmp	r3, #0
    7c98:	d000      	beq.n	7c9c <_sbrk_r+0x1c>
    7c9a:	602b      	str	r3, [r5, #0]
    7c9c:	bd70      	pop	{r4, r5, r6, pc}
    7c9e:	46c0      	nop			; (mov r8, r8)
    7ca0:	20001330 	.word	0x20001330

00007ca4 <memchr>:
    7ca4:	b2c9      	uxtb	r1, r1
    7ca6:	1882      	adds	r2, r0, r2
    7ca8:	4290      	cmp	r0, r2
    7caa:	d101      	bne.n	7cb0 <memchr+0xc>
    7cac:	2000      	movs	r0, #0
    7cae:	4770      	bx	lr
    7cb0:	7803      	ldrb	r3, [r0, #0]
    7cb2:	428b      	cmp	r3, r1
    7cb4:	d0fb      	beq.n	7cae <memchr+0xa>
    7cb6:	3001      	adds	r0, #1
    7cb8:	e7f6      	b.n	7ca8 <memchr+0x4>

00007cba <memmove>:
    7cba:	b510      	push	{r4, lr}
    7cbc:	4288      	cmp	r0, r1
    7cbe:	d902      	bls.n	7cc6 <memmove+0xc>
    7cc0:	188b      	adds	r3, r1, r2
    7cc2:	4298      	cmp	r0, r3
    7cc4:	d308      	bcc.n	7cd8 <memmove+0x1e>
    7cc6:	2300      	movs	r3, #0
    7cc8:	429a      	cmp	r2, r3
    7cca:	d007      	beq.n	7cdc <memmove+0x22>
    7ccc:	5ccc      	ldrb	r4, [r1, r3]
    7cce:	54c4      	strb	r4, [r0, r3]
    7cd0:	3301      	adds	r3, #1
    7cd2:	e7f9      	b.n	7cc8 <memmove+0xe>
    7cd4:	5c8b      	ldrb	r3, [r1, r2]
    7cd6:	5483      	strb	r3, [r0, r2]
    7cd8:	3a01      	subs	r2, #1
    7cda:	d2fb      	bcs.n	7cd4 <memmove+0x1a>
    7cdc:	bd10      	pop	{r4, pc}

00007cde <__malloc_lock>:
    7cde:	4770      	bx	lr

00007ce0 <__malloc_unlock>:
    7ce0:	4770      	bx	lr

00007ce2 <_realloc_r>:
    7ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ce4:	0007      	movs	r7, r0
    7ce6:	000d      	movs	r5, r1
    7ce8:	0016      	movs	r6, r2
    7cea:	2900      	cmp	r1, #0
    7cec:	d105      	bne.n	7cfa <_realloc_r+0x18>
    7cee:	0011      	movs	r1, r2
    7cf0:	f7ff fc7a 	bl	75e8 <_malloc_r>
    7cf4:	0004      	movs	r4, r0
    7cf6:	0020      	movs	r0, r4
    7cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cfa:	2a00      	cmp	r2, #0
    7cfc:	d103      	bne.n	7d06 <_realloc_r+0x24>
    7cfe:	f7ff fc29 	bl	7554 <_free_r>
    7d02:	0034      	movs	r4, r6
    7d04:	e7f7      	b.n	7cf6 <_realloc_r+0x14>
    7d06:	f000 f812 	bl	7d2e <_malloc_usable_size_r>
    7d0a:	002c      	movs	r4, r5
    7d0c:	4286      	cmp	r6, r0
    7d0e:	d9f2      	bls.n	7cf6 <_realloc_r+0x14>
    7d10:	0031      	movs	r1, r6
    7d12:	0038      	movs	r0, r7
    7d14:	f7ff fc68 	bl	75e8 <_malloc_r>
    7d18:	1e04      	subs	r4, r0, #0
    7d1a:	d0ec      	beq.n	7cf6 <_realloc_r+0x14>
    7d1c:	0029      	movs	r1, r5
    7d1e:	0032      	movs	r2, r6
    7d20:	f7ff fbe5 	bl	74ee <memcpy>
    7d24:	0029      	movs	r1, r5
    7d26:	0038      	movs	r0, r7
    7d28:	f7ff fc14 	bl	7554 <_free_r>
    7d2c:	e7e3      	b.n	7cf6 <_realloc_r+0x14>

00007d2e <_malloc_usable_size_r>:
    7d2e:	1f0b      	subs	r3, r1, #4
    7d30:	681b      	ldr	r3, [r3, #0]
    7d32:	1f18      	subs	r0, r3, #4
    7d34:	2b00      	cmp	r3, #0
    7d36:	da01      	bge.n	7d3c <_malloc_usable_size_r+0xe>
    7d38:	580b      	ldr	r3, [r1, r0]
    7d3a:	18c0      	adds	r0, r0, r3
    7d3c:	4770      	bx	lr
    7d3e:	0000      	movs	r0, r0
    7d40:	0000044a 	.word	0x0000044a
    7d44:	00000690 	.word	0x00000690
    7d48:	00000690 	.word	0x00000690
    7d4c:	00000690 	.word	0x00000690
    7d50:	00000690 	.word	0x00000690
    7d54:	00000690 	.word	0x00000690
    7d58:	00000690 	.word	0x00000690
    7d5c:	00000690 	.word	0x00000690
    7d60:	00000690 	.word	0x00000690
    7d64:	00000690 	.word	0x00000690
    7d68:	00000690 	.word	0x00000690
    7d6c:	00000690 	.word	0x00000690
    7d70:	00000690 	.word	0x00000690
    7d74:	00000690 	.word	0x00000690
    7d78:	00000690 	.word	0x00000690
    7d7c:	00000690 	.word	0x00000690
    7d80:	00000432 	.word	0x00000432
    7d84:	00000690 	.word	0x00000690
    7d88:	00000690 	.word	0x00000690
    7d8c:	00000690 	.word	0x00000690
    7d90:	00000690 	.word	0x00000690
    7d94:	00000690 	.word	0x00000690
    7d98:	00000690 	.word	0x00000690
    7d9c:	00000690 	.word	0x00000690
    7da0:	00000690 	.word	0x00000690
    7da4:	00000690 	.word	0x00000690
    7da8:	00000690 	.word	0x00000690
    7dac:	00000690 	.word	0x00000690
    7db0:	00000690 	.word	0x00000690
    7db4:	00000690 	.word	0x00000690
    7db8:	00000690 	.word	0x00000690
    7dbc:	00000690 	.word	0x00000690
    7dc0:	00000442 	.word	0x00000442
    7dc4:	00000690 	.word	0x00000690
    7dc8:	00000690 	.word	0x00000690
    7dcc:	00000690 	.word	0x00000690
    7dd0:	00000690 	.word	0x00000690
    7dd4:	00000690 	.word	0x00000690
    7dd8:	00000690 	.word	0x00000690
    7ddc:	00000690 	.word	0x00000690
    7de0:	00000690 	.word	0x00000690
    7de4:	00000690 	.word	0x00000690
    7de8:	00000690 	.word	0x00000690
    7dec:	00000690 	.word	0x00000690
    7df0:	00000690 	.word	0x00000690
    7df4:	00000690 	.word	0x00000690
    7df8:	00000690 	.word	0x00000690
    7dfc:	00000690 	.word	0x00000690
    7e00:	0000043a 	.word	0x0000043a
    7e04:	00000452 	.word	0x00000452
    7e08:	0000041a 	.word	0x0000041a
    7e0c:	0000042a 	.word	0x0000042a
    7e10:	00000422 	.word	0x00000422
    7e14:	0000ffff 	.word	0x0000ffff
    7e18:	0000ffff 	.word	0x0000ffff
    7e1c:	0000ffff 	.word	0x0000ffff
    7e20:	0000ffff 	.word	0x0000ffff
    7e24:	0000ffff 	.word	0x0000ffff
    7e28:	0000ffff 	.word	0x0000ffff
    7e2c:	00000006 	.word	0x00000006
    7e30:	00000007 	.word	0x00000007
    7e34:	0000ffff 	.word	0x0000ffff
    7e38:	0000ffff 	.word	0x0000ffff
    7e3c:	0000ffff 	.word	0x0000ffff
    7e40:	0000ffff 	.word	0x0000ffff
    7e44:	0000ffff 	.word	0x0000ffff
    7e48:	0000ffff 	.word	0x0000ffff
    7e4c:	0000ffff 	.word	0x0000ffff
    7e50:	0000ffff 	.word	0x0000ffff
    7e54:	00000008 	.word	0x00000008
    7e58:	00000009 	.word	0x00000009
    7e5c:	0000ffff 	.word	0x0000ffff
    7e60:	0000ffff 	.word	0x0000ffff
    7e64:	42000800 	.word	0x42000800
    7e68:	42000c00 	.word	0x42000c00
    7e6c:	42001000 	.word	0x42001000
    7e70:	42001400 	.word	0x42001400
    7e74:	42001800 	.word	0x42001800
    7e78:	42001c00 	.word	0x42001c00
    7e7c:	00001186 	.word	0x00001186
    7e80:	00001182 	.word	0x00001182
    7e84:	00001182 	.word	0x00001182
    7e88:	000011e8 	.word	0x000011e8
    7e8c:	000011e8 	.word	0x000011e8
    7e90:	0000119a 	.word	0x0000119a
    7e94:	0000118c 	.word	0x0000118c
    7e98:	000011a0 	.word	0x000011a0
    7e9c:	000011d6 	.word	0x000011d6
    7ea0:	0000136c 	.word	0x0000136c
    7ea4:	0000134c 	.word	0x0000134c
    7ea8:	0000134c 	.word	0x0000134c
    7eac:	000013d8 	.word	0x000013d8
    7eb0:	0000135e 	.word	0x0000135e
    7eb4:	0000137a 	.word	0x0000137a
    7eb8:	00001350 	.word	0x00001350
    7ebc:	00001388 	.word	0x00001388
    7ec0:	000013c8 	.word	0x000013c8
    7ec4:	42002c00 	.word	0x42002c00
    7ec8:	42003000 	.word	0x42003000
    7ecc:	42003400 	.word	0x42003400
    7ed0:	000028b4 	.word	0x000028b4
    7ed4:	000029fe 	.word	0x000029fe
    7ed8:	0000288c 	.word	0x0000288c
    7edc:	00002a06 	.word	0x00002a06
    7ee0:	00002894 	.word	0x00002894
    7ee4:	0000289c 	.word	0x0000289c
    7ee8:	000028a4 	.word	0x000028a4
    7eec:	000028ac 	.word	0x000028ac

00007ef0 <tc_interrupt_vectors.11908>:
    7ef0:	00141312 004e5553 254e5553 20643330     ....SUN.SUN%03d 
    7f00:	2578302d 00783430                       -0x%04x.

00007f08 <__sf_fake_stderr>:
	...

00007f28 <__sf_fake_stdin>:
	...

00007f48 <__sf_fake_stdout>:
	...
    7f68:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7f78:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7f88:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7f98:	00006665                                ef..

00007f9c <_init>:
    7f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f9e:	46c0      	nop			; (mov r8, r8)
    7fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7fa2:	bc08      	pop	{r3}
    7fa4:	469e      	mov	lr, r3
    7fa6:	4770      	bx	lr

00007fa8 <__init_array_start>:
    7fa8:	000000dd 	.word	0x000000dd

00007fac <_fini>:
    7fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fae:	46c0      	nop			; (mov r8, r8)
    7fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7fb2:	bc08      	pop	{r3}
    7fb4:	469e      	mov	lr, r3
    7fb6:	4770      	bx	lr

00007fb8 <__fini_array_start>:
    7fb8:	000000b5 	.word	0x000000b5
