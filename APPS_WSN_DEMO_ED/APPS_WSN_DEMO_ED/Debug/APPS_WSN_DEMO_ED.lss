
APPS_WSN_DEMO_ED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000857c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  0000857c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001338  200000c0  00008640  000200c0  2**3
                  ALLOC
  3 .stack        00002000  200013f8  00009978  000200c0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      000000e5  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004a5cb  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007a90  00000000  00000000  0006a794  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e691  00000000  00000000  00072224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000af0  00000000  00000000  000808b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001208  00000000  00000000  000813a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020eff  00000000  00000000  000825ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001aa54  00000000  00000000  000a34ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088ae8  00000000  00000000  000bdf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000021c4  00000000  00000000  001469e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 33 00 20 a9 1d 00 00 a5 1d 00 00 a5 1d 00 00     .3. ............
	...
      2c:	a5 1d 00 00 00 00 00 00 00 00 00 00 a5 1d 00 00     ................
      3c:	a5 1d 00 00 a5 1d 00 00 a5 1d 00 00 a5 1d 00 00     ................
      4c:	a5 1d 00 00 cd 02 00 00 a5 1d 00 00 a5 1d 00 00     ................
      5c:	a5 1d 00 00 a5 1d 00 00 3d 08 00 00 4d 08 00 00     ........=...M...
      6c:	5d 08 00 00 6d 08 00 00 7d 08 00 00 8d 08 00 00     ]...m...}.......
      7c:	a5 1d 00 00 a5 1d 00 00 a5 1d 00 00 85 1a 00 00     ................
      8c:	95 1a 00 00 a5 1a 00 00 00 00 00 00 00 00 00 00     ................
      9c:	a5 1d 00 00 a5 1d 00 00 00 00 00 00 a5 1d 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c0 	.word	0x200000c0
      d4:	00000000 	.word	0x00000000
      d8:	0000857c 	.word	0x0000857c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c4 	.word	0x200000c4
     108:	0000857c 	.word	0x0000857c
     10c:	0000857c 	.word	0x0000857c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000177d 	.word	0x0000177d
     140:	000071e5 	.word	0x000071e5
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	200000dc 	.word	0x200000dc
     1b8:	200000e0 	.word	0x200000e0
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	200000dc 	.word	0x200000dc
     1e8:	200000e0 	.word	0x200000e0
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:




void system_board_init(void)
{
     1f0:	b570      	push	{r4, r5, r6, lr}
     1f2:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2301      	movs	r3, #1
     1f8:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     1fa:	2600      	movs	r6, #0
     1fc:	70a6      	strb	r6, [r4, #2]
#ifdef CONF_BOARD_AT86RFX	
//--------------------------------------------------------------------//
	struct port_config pin_conf;
//--------------------------------------------------------------------//
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	2052      	movs	r0, #82	; 0x52
     204:	4d12      	ldr	r5, [pc, #72]	; (250 <system_board_init+0x60>)
     206:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     208:	0021      	movs	r1, r4
     20a:	203e      	movs	r0, #62	; 0x3e
     20c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     20e:	0021      	movs	r1, r4
     210:	203f      	movs	r0, #63	; 0x3f
     212:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	202f      	movs	r0, #47	; 0x2f
     218:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     21a:	0021      	movs	r1, r4
     21c:	2014      	movs	r0, #20
     21e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     220:	2280      	movs	r2, #128	; 0x80
     222:	02d2      	lsls	r2, r2, #11
     224:	4b0b      	ldr	r3, [pc, #44]	; (254 <system_board_init+0x64>)
     226:	619a      	str	r2, [r3, #24]
     228:	4b0b      	ldr	r3, [pc, #44]	; (258 <system_board_init+0x68>)
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	05d2      	lsls	r2, r2, #23
     22e:	619a      	str	r2, [r3, #24]
     230:	2280      	movs	r2, #128	; 0x80
     232:	0612      	lsls	r2, r2, #24
     234:	619a      	str	r2, [r3, #24]
     236:	2280      	movs	r2, #128	; 0x80
     238:	0212      	lsls	r2, r2, #8
     23a:	619a      	str	r2, [r3, #24]
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	0352      	lsls	r2, r2, #13
     240:	4b06      	ldr	r3, [pc, #24]	; (25c <system_board_init+0x6c>)
     242:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     244:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     246:	0021      	movs	r1, r4
     248:	2053      	movs	r0, #83	; 0x53
     24a:	47a8      	blx	r5
//	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
//	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
//	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     24c:	b002      	add	sp, #8
     24e:	bd70      	pop	{r4, r5, r6, pc}
     250:	00000431 	.word	0x00000431
     254:	41004500 	.word	0x41004500
     258:	41004480 	.word	0x41004480
     25c:	41004400 	.word	0x41004400

00000260 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     260:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     262:	2a00      	cmp	r2, #0
     264:	d001      	beq.n	26a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     266:	0018      	movs	r0, r3
     268:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     26a:	008b      	lsls	r3, r1, #2
     26c:	4a06      	ldr	r2, [pc, #24]	; (288 <extint_register_callback+0x28>)
     26e:	589b      	ldr	r3, [r3, r2]
     270:	2b00      	cmp	r3, #0
     272:	d003      	beq.n	27c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     274:	4283      	cmp	r3, r0
     276:	d005      	beq.n	284 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     278:	231d      	movs	r3, #29
     27a:	e7f4      	b.n	266 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     27c:	0089      	lsls	r1, r1, #2
     27e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     280:	2300      	movs	r3, #0
     282:	e7f0      	b.n	266 <extint_register_callback+0x6>
		return STATUS_OK;
     284:	2300      	movs	r3, #0
     286:	e7ee      	b.n	266 <extint_register_callback+0x6>
     288:	200003a0 	.word	0x200003a0

0000028c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     28c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     28e:	2900      	cmp	r1, #0
     290:	d001      	beq.n	296 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     292:	0018      	movs	r0, r3
     294:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     296:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     298:	281f      	cmp	r0, #31
     29a:	d800      	bhi.n	29e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     29c:	4a02      	ldr	r2, [pc, #8]	; (2a8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     29e:	2301      	movs	r3, #1
     2a0:	4083      	lsls	r3, r0
     2a2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     2a4:	2300      	movs	r3, #0
     2a6:	e7f4      	b.n	292 <extint_chan_enable_callback+0x6>
     2a8:	40001800 	.word	0x40001800

000002ac <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2ac:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2ae:	2900      	cmp	r1, #0
     2b0:	d001      	beq.n	2b6 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     2b2:	0018      	movs	r0, r3
     2b4:	4770      	bx	lr
		return NULL;
     2b6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     2b8:	281f      	cmp	r0, #31
     2ba:	d800      	bhi.n	2be <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     2bc:	4a02      	ldr	r2, [pc, #8]	; (2c8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     2be:	2301      	movs	r3, #1
     2c0:	4083      	lsls	r3, r0
     2c2:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     2c4:	2300      	movs	r3, #0
     2c6:	e7f4      	b.n	2b2 <extint_chan_disable_callback+0x6>
     2c8:	40001800 	.word	0x40001800

000002cc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2cc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2ce:	2200      	movs	r2, #0
     2d0:	4b10      	ldr	r3, [pc, #64]	; (314 <EIC_Handler+0x48>)
     2d2:	701a      	strb	r2, [r3, #0]
     2d4:	2300      	movs	r3, #0
     2d6:	4910      	ldr	r1, [pc, #64]	; (318 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2d8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2da:	4e10      	ldr	r6, [pc, #64]	; (31c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2dc:	4c0d      	ldr	r4, [pc, #52]	; (314 <EIC_Handler+0x48>)
     2de:	e00a      	b.n	2f6 <EIC_Handler+0x2a>
		return eics[eic_index];
     2e0:	490d      	ldr	r1, [pc, #52]	; (318 <EIC_Handler+0x4c>)
     2e2:	e008      	b.n	2f6 <EIC_Handler+0x2a>
     2e4:	7823      	ldrb	r3, [r4, #0]
     2e6:	3301      	adds	r3, #1
     2e8:	b2db      	uxtb	r3, r3
     2ea:	7023      	strb	r3, [r4, #0]
     2ec:	2b0f      	cmp	r3, #15
     2ee:	d810      	bhi.n	312 <EIC_Handler+0x46>
		return NULL;
     2f0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     2f2:	2b1f      	cmp	r3, #31
     2f4:	d9f4      	bls.n	2e0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     2f6:	0028      	movs	r0, r5
     2f8:	4018      	ands	r0, r3
     2fa:	2201      	movs	r2, #1
     2fc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     2fe:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     300:	4210      	tst	r0, r2
     302:	d0ef      	beq.n	2e4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     304:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     306:	009b      	lsls	r3, r3, #2
     308:	599b      	ldr	r3, [r3, r6]
     30a:	2b00      	cmp	r3, #0
     30c:	d0ea      	beq.n	2e4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     30e:	4798      	blx	r3
     310:	e7e8      	b.n	2e4 <EIC_Handler+0x18>
			}
		}
	}
}
     312:	bd70      	pop	{r4, r5, r6, pc}
     314:	2000039c 	.word	0x2000039c
     318:	40001800 	.word	0x40001800
     31c:	200003a0 	.word	0x200003a0

00000320 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     320:	4a04      	ldr	r2, [pc, #16]	; (334 <_extint_enable+0x14>)
     322:	7813      	ldrb	r3, [r2, #0]
     324:	2102      	movs	r1, #2
     326:	430b      	orrs	r3, r1
     328:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     32a:	7853      	ldrb	r3, [r2, #1]
     32c:	b25b      	sxtb	r3, r3
     32e:	2b00      	cmp	r3, #0
     330:	dbfb      	blt.n	32a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     332:	4770      	bx	lr
     334:	40001800 	.word	0x40001800

00000338 <_system_extint_init>:
{
     338:	b500      	push	{lr}
     33a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     33c:	4a12      	ldr	r2, [pc, #72]	; (388 <_system_extint_init+0x50>)
     33e:	6993      	ldr	r3, [r2, #24]
     340:	2140      	movs	r1, #64	; 0x40
     342:	430b      	orrs	r3, r1
     344:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     346:	a901      	add	r1, sp, #4
     348:	2300      	movs	r3, #0
     34a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     34c:	2005      	movs	r0, #5
     34e:	4b0f      	ldr	r3, [pc, #60]	; (38c <_system_extint_init+0x54>)
     350:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     352:	2005      	movs	r0, #5
     354:	4b0e      	ldr	r3, [pc, #56]	; (390 <_system_extint_init+0x58>)
     356:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     358:	4a0e      	ldr	r2, [pc, #56]	; (394 <_system_extint_init+0x5c>)
     35a:	7813      	ldrb	r3, [r2, #0]
     35c:	2101      	movs	r1, #1
     35e:	430b      	orrs	r3, r1
     360:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     362:	7853      	ldrb	r3, [r2, #1]
     364:	b25b      	sxtb	r3, r3
     366:	2b00      	cmp	r3, #0
     368:	dbfb      	blt.n	362 <_system_extint_init+0x2a>
     36a:	4b0b      	ldr	r3, [pc, #44]	; (398 <_system_extint_init+0x60>)
     36c:	0019      	movs	r1, r3
     36e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     370:	2200      	movs	r2, #0
     372:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     374:	4299      	cmp	r1, r3
     376:	d1fc      	bne.n	372 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     378:	2210      	movs	r2, #16
     37a:	4b08      	ldr	r3, [pc, #32]	; (39c <_system_extint_init+0x64>)
     37c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     37e:	4b08      	ldr	r3, [pc, #32]	; (3a0 <_system_extint_init+0x68>)
     380:	4798      	blx	r3
}
     382:	b003      	add	sp, #12
     384:	bd00      	pop	{pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	40000400 	.word	0x40000400
     38c:	00001895 	.word	0x00001895
     390:	00001809 	.word	0x00001809
     394:	40001800 	.word	0x40001800
     398:	200003a0 	.word	0x200003a0
     39c:	e000e100 	.word	0xe000e100
     3a0:	00000321 	.word	0x00000321

000003a4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3a4:	2300      	movs	r3, #0
     3a6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     3a8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3aa:	2201      	movs	r2, #1
     3ac:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     3ae:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     3b0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3b2:	3302      	adds	r3, #2
     3b4:	72c3      	strb	r3, [r0, #11]
}
     3b6:	4770      	bx	lr

000003b8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ba:	b083      	sub	sp, #12
     3bc:	0005      	movs	r5, r0
     3be:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3c0:	a901      	add	r1, sp, #4
     3c2:	2300      	movs	r3, #0
     3c4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3c6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3c8:	7923      	ldrb	r3, [r4, #4]
     3ca:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3cc:	7a23      	ldrb	r3, [r4, #8]
     3ce:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3d0:	7820      	ldrb	r0, [r4, #0]
     3d2:	4b15      	ldr	r3, [pc, #84]	; (428 <extint_chan_set_config+0x70>)
     3d4:	4798      	blx	r3
		return NULL;
     3d6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     3d8:	2d1f      	cmp	r5, #31
     3da:	d800      	bhi.n	3de <extint_chan_set_config+0x26>
		return eics[eic_index];
     3dc:	4813      	ldr	r0, [pc, #76]	; (42c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3de:	2207      	movs	r2, #7
     3e0:	402a      	ands	r2, r5
     3e2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3e4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3e6:	7aa3      	ldrb	r3, [r4, #10]
     3e8:	2b00      	cmp	r3, #0
     3ea:	d001      	beq.n	3f0 <extint_chan_set_config+0x38>
     3ec:	2308      	movs	r3, #8
     3ee:	431f      	orrs	r7, r3
     3f0:	08eb      	lsrs	r3, r5, #3
     3f2:	009b      	lsls	r3, r3, #2
     3f4:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3f6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3f8:	260f      	movs	r6, #15
     3fa:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     3fc:	43b1      	bics	r1, r6
			(new_config << config_pos);
     3fe:	4097      	lsls	r7, r2
     400:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     402:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     404:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     406:	7a63      	ldrb	r3, [r4, #9]
     408:	2b00      	cmp	r3, #0
     40a:	d106      	bne.n	41a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     40c:	6943      	ldr	r3, [r0, #20]
     40e:	2201      	movs	r2, #1
     410:	40aa      	lsls	r2, r5
     412:	4393      	bics	r3, r2
     414:	6143      	str	r3, [r0, #20]
	}
}
     416:	b003      	add	sp, #12
     418:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     41a:	6942      	ldr	r2, [r0, #20]
     41c:	2301      	movs	r3, #1
     41e:	40ab      	lsls	r3, r5
     420:	4313      	orrs	r3, r2
     422:	6143      	str	r3, [r0, #20]
     424:	e7f7      	b.n	416 <extint_chan_set_config+0x5e>
     426:	46c0      	nop			; (mov r8, r8)
     428:	0000198d 	.word	0x0000198d
     42c:	40001800 	.word	0x40001800

00000430 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     430:	b500      	push	{lr}
     432:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     434:	ab01      	add	r3, sp, #4
     436:	2280      	movs	r2, #128	; 0x80
     438:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     43a:	780a      	ldrb	r2, [r1, #0]
     43c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     43e:	784a      	ldrb	r2, [r1, #1]
     440:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     442:	788a      	ldrb	r2, [r1, #2]
     444:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     446:	0019      	movs	r1, r3
     448:	4b01      	ldr	r3, [pc, #4]	; (450 <port_pin_set_config+0x20>)
     44a:	4798      	blx	r3
}
     44c:	b003      	add	sp, #12
     44e:	bd00      	pop	{pc}
     450:	0000198d 	.word	0x0000198d

00000454 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     454:	b5f0      	push	{r4, r5, r6, r7, lr}
     456:	46de      	mov	lr, fp
     458:	4657      	mov	r7, sl
     45a:	464e      	mov	r6, r9
     45c:	4645      	mov	r5, r8
     45e:	b5e0      	push	{r5, r6, r7, lr}
     460:	b087      	sub	sp, #28
     462:	4680      	mov	r8, r0
     464:	9104      	str	r1, [sp, #16]
     466:	0016      	movs	r6, r2
     468:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     46a:	2200      	movs	r2, #0
     46c:	2300      	movs	r3, #0
     46e:	2100      	movs	r1, #0
     470:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     472:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     474:	2001      	movs	r0, #1
     476:	0021      	movs	r1, r4
     478:	9600      	str	r6, [sp, #0]
     47a:	9701      	str	r7, [sp, #4]
     47c:	465c      	mov	r4, fp
     47e:	9403      	str	r4, [sp, #12]
     480:	4644      	mov	r4, r8
     482:	9405      	str	r4, [sp, #20]
     484:	e013      	b.n	4ae <long_division+0x5a>
     486:	2420      	movs	r4, #32
     488:	1a64      	subs	r4, r4, r1
     48a:	0005      	movs	r5, r0
     48c:	40e5      	lsrs	r5, r4
     48e:	46a8      	mov	r8, r5
     490:	e014      	b.n	4bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     492:	9c00      	ldr	r4, [sp, #0]
     494:	9d01      	ldr	r5, [sp, #4]
     496:	1b12      	subs	r2, r2, r4
     498:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     49a:	465c      	mov	r4, fp
     49c:	464d      	mov	r5, r9
     49e:	432c      	orrs	r4, r5
     4a0:	46a3      	mov	fp, r4
     4a2:	9c03      	ldr	r4, [sp, #12]
     4a4:	4645      	mov	r5, r8
     4a6:	432c      	orrs	r4, r5
     4a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     4aa:	3901      	subs	r1, #1
     4ac:	d325      	bcc.n	4fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     4ae:	2420      	movs	r4, #32
     4b0:	4264      	negs	r4, r4
     4b2:	190c      	adds	r4, r1, r4
     4b4:	d4e7      	bmi.n	486 <long_division+0x32>
     4b6:	0005      	movs	r5, r0
     4b8:	40a5      	lsls	r5, r4
     4ba:	46a8      	mov	r8, r5
     4bc:	0004      	movs	r4, r0
     4be:	408c      	lsls	r4, r1
     4c0:	46a1      	mov	r9, r4
		r = r << 1;
     4c2:	1892      	adds	r2, r2, r2
     4c4:	415b      	adcs	r3, r3
     4c6:	0014      	movs	r4, r2
     4c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
     4ca:	9e05      	ldr	r6, [sp, #20]
     4cc:	464f      	mov	r7, r9
     4ce:	403e      	ands	r6, r7
     4d0:	46b4      	mov	ip, r6
     4d2:	9e04      	ldr	r6, [sp, #16]
     4d4:	4647      	mov	r7, r8
     4d6:	403e      	ands	r6, r7
     4d8:	46b2      	mov	sl, r6
     4da:	4666      	mov	r6, ip
     4dc:	4657      	mov	r7, sl
     4de:	433e      	orrs	r6, r7
     4e0:	d003      	beq.n	4ea <long_division+0x96>
			r |= 0x01;
     4e2:	0006      	movs	r6, r0
     4e4:	4326      	orrs	r6, r4
     4e6:	0032      	movs	r2, r6
     4e8:	002b      	movs	r3, r5
		if (r >= d) {
     4ea:	9c00      	ldr	r4, [sp, #0]
     4ec:	9d01      	ldr	r5, [sp, #4]
     4ee:	429d      	cmp	r5, r3
     4f0:	d8db      	bhi.n	4aa <long_division+0x56>
     4f2:	d1ce      	bne.n	492 <long_division+0x3e>
     4f4:	4294      	cmp	r4, r2
     4f6:	d8d8      	bhi.n	4aa <long_division+0x56>
     4f8:	e7cb      	b.n	492 <long_division+0x3e>
     4fa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     4fc:	4658      	mov	r0, fp
     4fe:	0019      	movs	r1, r3
     500:	b007      	add	sp, #28
     502:	bc3c      	pop	{r2, r3, r4, r5}
     504:	4690      	mov	r8, r2
     506:	4699      	mov	r9, r3
     508:	46a2      	mov	sl, r4
     50a:	46ab      	mov	fp, r5
     50c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000050e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     50e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     510:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     512:	2340      	movs	r3, #64	; 0x40
     514:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     516:	4281      	cmp	r1, r0
     518:	d202      	bcs.n	520 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     51a:	0018      	movs	r0, r3
     51c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     51e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     520:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     522:	1c63      	adds	r3, r4, #1
     524:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     526:	4288      	cmp	r0, r1
     528:	d9f9      	bls.n	51e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     52a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     52c:	2cff      	cmp	r4, #255	; 0xff
     52e:	d8f4      	bhi.n	51a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     530:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     532:	2300      	movs	r3, #0
     534:	e7f1      	b.n	51a <_sercom_get_sync_baud_val+0xc>
	...

00000538 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     538:	b5f0      	push	{r4, r5, r6, r7, lr}
     53a:	b083      	sub	sp, #12
     53c:	000f      	movs	r7, r1
     53e:	0016      	movs	r6, r2
     540:	aa08      	add	r2, sp, #32
     542:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     544:	0004      	movs	r4, r0
     546:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     548:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     54a:	42bc      	cmp	r4, r7
     54c:	d902      	bls.n	554 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     54e:	0010      	movs	r0, r2
     550:	b003      	add	sp, #12
     552:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     554:	2b00      	cmp	r3, #0
     556:	d114      	bne.n	582 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     558:	0002      	movs	r2, r0
     55a:	0008      	movs	r0, r1
     55c:	2100      	movs	r1, #0
     55e:	4c19      	ldr	r4, [pc, #100]	; (5c4 <_sercom_get_async_baud_val+0x8c>)
     560:	47a0      	blx	r4
     562:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     564:	003a      	movs	r2, r7
     566:	2300      	movs	r3, #0
     568:	2000      	movs	r0, #0
     56a:	4c17      	ldr	r4, [pc, #92]	; (5c8 <_sercom_get_async_baud_val+0x90>)
     56c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     56e:	2200      	movs	r2, #0
     570:	2301      	movs	r3, #1
     572:	1a12      	subs	r2, r2, r0
     574:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     576:	0c12      	lsrs	r2, r2, #16
     578:	041b      	lsls	r3, r3, #16
     57a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     57c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     57e:	2200      	movs	r2, #0
     580:	e7e5      	b.n	54e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     582:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     584:	2b01      	cmp	r3, #1
     586:	d1f9      	bne.n	57c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     588:	000a      	movs	r2, r1
     58a:	2300      	movs	r3, #0
     58c:	2100      	movs	r1, #0
     58e:	4c0d      	ldr	r4, [pc, #52]	; (5c4 <_sercom_get_async_baud_val+0x8c>)
     590:	47a0      	blx	r4
     592:	0002      	movs	r2, r0
     594:	000b      	movs	r3, r1
     596:	9200      	str	r2, [sp, #0]
     598:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     59a:	0038      	movs	r0, r7
     59c:	2100      	movs	r1, #0
     59e:	4c0a      	ldr	r4, [pc, #40]	; (5c8 <_sercom_get_async_baud_val+0x90>)
     5a0:	47a0      	blx	r4
     5a2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     5a4:	2380      	movs	r3, #128	; 0x80
     5a6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5a8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     5aa:	4298      	cmp	r0, r3
     5ac:	d8cf      	bhi.n	54e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     5ae:	0f79      	lsrs	r1, r7, #29
     5b0:	00f8      	lsls	r0, r7, #3
     5b2:	9a00      	ldr	r2, [sp, #0]
     5b4:	9b01      	ldr	r3, [sp, #4]
     5b6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     5b8:	00ea      	lsls	r2, r5, #3
     5ba:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     5bc:	b2d2      	uxtb	r2, r2
     5be:	0352      	lsls	r2, r2, #13
     5c0:	432a      	orrs	r2, r5
     5c2:	e7db      	b.n	57c <_sercom_get_async_baud_val+0x44>
     5c4:	000074d1 	.word	0x000074d1
     5c8:	00000455 	.word	0x00000455

000005cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     5cc:	b510      	push	{r4, lr}
     5ce:	b082      	sub	sp, #8
     5d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     5d2:	4b0e      	ldr	r3, [pc, #56]	; (60c <sercom_set_gclk_generator+0x40>)
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	2b00      	cmp	r3, #0
     5d8:	d007      	beq.n	5ea <sercom_set_gclk_generator+0x1e>
     5da:	2900      	cmp	r1, #0
     5dc:	d105      	bne.n	5ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     5de:	4b0b      	ldr	r3, [pc, #44]	; (60c <sercom_set_gclk_generator+0x40>)
     5e0:	785b      	ldrb	r3, [r3, #1]
     5e2:	4283      	cmp	r3, r0
     5e4:	d010      	beq.n	608 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     5e6:	201d      	movs	r0, #29
     5e8:	e00c      	b.n	604 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     5ea:	a901      	add	r1, sp, #4
     5ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     5ee:	2013      	movs	r0, #19
     5f0:	4b07      	ldr	r3, [pc, #28]	; (610 <sercom_set_gclk_generator+0x44>)
     5f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     5f4:	2013      	movs	r0, #19
     5f6:	4b07      	ldr	r3, [pc, #28]	; (614 <sercom_set_gclk_generator+0x48>)
     5f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     5fa:	4b04      	ldr	r3, [pc, #16]	; (60c <sercom_set_gclk_generator+0x40>)
     5fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     5fe:	2201      	movs	r2, #1
     600:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     602:	2000      	movs	r0, #0
}
     604:	b002      	add	sp, #8
     606:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     608:	2000      	movs	r0, #0
     60a:	e7fb      	b.n	604 <sercom_set_gclk_generator+0x38>
     60c:	200000e4 	.word	0x200000e4
     610:	00001895 	.word	0x00001895
     614:	00001809 	.word	0x00001809

00000618 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     618:	4b40      	ldr	r3, [pc, #256]	; (71c <_sercom_get_default_pad+0x104>)
     61a:	4298      	cmp	r0, r3
     61c:	d031      	beq.n	682 <_sercom_get_default_pad+0x6a>
     61e:	d90a      	bls.n	636 <_sercom_get_default_pad+0x1e>
     620:	4b3f      	ldr	r3, [pc, #252]	; (720 <_sercom_get_default_pad+0x108>)
     622:	4298      	cmp	r0, r3
     624:	d04d      	beq.n	6c2 <_sercom_get_default_pad+0xaa>
     626:	4b3f      	ldr	r3, [pc, #252]	; (724 <_sercom_get_default_pad+0x10c>)
     628:	4298      	cmp	r0, r3
     62a:	d05a      	beq.n	6e2 <_sercom_get_default_pad+0xca>
     62c:	4b3e      	ldr	r3, [pc, #248]	; (728 <_sercom_get_default_pad+0x110>)
     62e:	4298      	cmp	r0, r3
     630:	d037      	beq.n	6a2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     632:	2000      	movs	r0, #0
}
     634:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     636:	4b3d      	ldr	r3, [pc, #244]	; (72c <_sercom_get_default_pad+0x114>)
     638:	4298      	cmp	r0, r3
     63a:	d00c      	beq.n	656 <_sercom_get_default_pad+0x3e>
     63c:	4b3c      	ldr	r3, [pc, #240]	; (730 <_sercom_get_default_pad+0x118>)
     63e:	4298      	cmp	r0, r3
     640:	d1f7      	bne.n	632 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     642:	2901      	cmp	r1, #1
     644:	d017      	beq.n	676 <_sercom_get_default_pad+0x5e>
     646:	2900      	cmp	r1, #0
     648:	d05d      	beq.n	706 <_sercom_get_default_pad+0xee>
     64a:	2902      	cmp	r1, #2
     64c:	d015      	beq.n	67a <_sercom_get_default_pad+0x62>
     64e:	2903      	cmp	r1, #3
     650:	d015      	beq.n	67e <_sercom_get_default_pad+0x66>
	return 0;
     652:	2000      	movs	r0, #0
     654:	e7ee      	b.n	634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     656:	2901      	cmp	r1, #1
     658:	d007      	beq.n	66a <_sercom_get_default_pad+0x52>
     65a:	2900      	cmp	r1, #0
     65c:	d051      	beq.n	702 <_sercom_get_default_pad+0xea>
     65e:	2902      	cmp	r1, #2
     660:	d005      	beq.n	66e <_sercom_get_default_pad+0x56>
     662:	2903      	cmp	r1, #3
     664:	d005      	beq.n	672 <_sercom_get_default_pad+0x5a>
	return 0;
     666:	2000      	movs	r0, #0
     668:	e7e4      	b.n	634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     66a:	4832      	ldr	r0, [pc, #200]	; (734 <_sercom_get_default_pad+0x11c>)
     66c:	e7e2      	b.n	634 <_sercom_get_default_pad+0x1c>
     66e:	4832      	ldr	r0, [pc, #200]	; (738 <_sercom_get_default_pad+0x120>)
     670:	e7e0      	b.n	634 <_sercom_get_default_pad+0x1c>
     672:	4832      	ldr	r0, [pc, #200]	; (73c <_sercom_get_default_pad+0x124>)
     674:	e7de      	b.n	634 <_sercom_get_default_pad+0x1c>
     676:	4832      	ldr	r0, [pc, #200]	; (740 <_sercom_get_default_pad+0x128>)
     678:	e7dc      	b.n	634 <_sercom_get_default_pad+0x1c>
     67a:	4832      	ldr	r0, [pc, #200]	; (744 <_sercom_get_default_pad+0x12c>)
     67c:	e7da      	b.n	634 <_sercom_get_default_pad+0x1c>
     67e:	4832      	ldr	r0, [pc, #200]	; (748 <_sercom_get_default_pad+0x130>)
     680:	e7d8      	b.n	634 <_sercom_get_default_pad+0x1c>
     682:	2901      	cmp	r1, #1
     684:	d007      	beq.n	696 <_sercom_get_default_pad+0x7e>
     686:	2900      	cmp	r1, #0
     688:	d03f      	beq.n	70a <_sercom_get_default_pad+0xf2>
     68a:	2902      	cmp	r1, #2
     68c:	d005      	beq.n	69a <_sercom_get_default_pad+0x82>
     68e:	2903      	cmp	r1, #3
     690:	d005      	beq.n	69e <_sercom_get_default_pad+0x86>
	return 0;
     692:	2000      	movs	r0, #0
     694:	e7ce      	b.n	634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     696:	482d      	ldr	r0, [pc, #180]	; (74c <_sercom_get_default_pad+0x134>)
     698:	e7cc      	b.n	634 <_sercom_get_default_pad+0x1c>
     69a:	482d      	ldr	r0, [pc, #180]	; (750 <_sercom_get_default_pad+0x138>)
     69c:	e7ca      	b.n	634 <_sercom_get_default_pad+0x1c>
     69e:	482d      	ldr	r0, [pc, #180]	; (754 <_sercom_get_default_pad+0x13c>)
     6a0:	e7c8      	b.n	634 <_sercom_get_default_pad+0x1c>
     6a2:	2901      	cmp	r1, #1
     6a4:	d007      	beq.n	6b6 <_sercom_get_default_pad+0x9e>
     6a6:	2900      	cmp	r1, #0
     6a8:	d031      	beq.n	70e <_sercom_get_default_pad+0xf6>
     6aa:	2902      	cmp	r1, #2
     6ac:	d005      	beq.n	6ba <_sercom_get_default_pad+0xa2>
     6ae:	2903      	cmp	r1, #3
     6b0:	d005      	beq.n	6be <_sercom_get_default_pad+0xa6>
	return 0;
     6b2:	2000      	movs	r0, #0
     6b4:	e7be      	b.n	634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6b6:	4828      	ldr	r0, [pc, #160]	; (758 <_sercom_get_default_pad+0x140>)
     6b8:	e7bc      	b.n	634 <_sercom_get_default_pad+0x1c>
     6ba:	4828      	ldr	r0, [pc, #160]	; (75c <_sercom_get_default_pad+0x144>)
     6bc:	e7ba      	b.n	634 <_sercom_get_default_pad+0x1c>
     6be:	4828      	ldr	r0, [pc, #160]	; (760 <_sercom_get_default_pad+0x148>)
     6c0:	e7b8      	b.n	634 <_sercom_get_default_pad+0x1c>
     6c2:	2901      	cmp	r1, #1
     6c4:	d007      	beq.n	6d6 <_sercom_get_default_pad+0xbe>
     6c6:	2900      	cmp	r1, #0
     6c8:	d023      	beq.n	712 <_sercom_get_default_pad+0xfa>
     6ca:	2902      	cmp	r1, #2
     6cc:	d005      	beq.n	6da <_sercom_get_default_pad+0xc2>
     6ce:	2903      	cmp	r1, #3
     6d0:	d005      	beq.n	6de <_sercom_get_default_pad+0xc6>
	return 0;
     6d2:	2000      	movs	r0, #0
     6d4:	e7ae      	b.n	634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d6:	4823      	ldr	r0, [pc, #140]	; (764 <_sercom_get_default_pad+0x14c>)
     6d8:	e7ac      	b.n	634 <_sercom_get_default_pad+0x1c>
     6da:	4823      	ldr	r0, [pc, #140]	; (768 <_sercom_get_default_pad+0x150>)
     6dc:	e7aa      	b.n	634 <_sercom_get_default_pad+0x1c>
     6de:	4823      	ldr	r0, [pc, #140]	; (76c <_sercom_get_default_pad+0x154>)
     6e0:	e7a8      	b.n	634 <_sercom_get_default_pad+0x1c>
     6e2:	2901      	cmp	r1, #1
     6e4:	d007      	beq.n	6f6 <_sercom_get_default_pad+0xde>
     6e6:	2900      	cmp	r1, #0
     6e8:	d015      	beq.n	716 <_sercom_get_default_pad+0xfe>
     6ea:	2902      	cmp	r1, #2
     6ec:	d005      	beq.n	6fa <_sercom_get_default_pad+0xe2>
     6ee:	2903      	cmp	r1, #3
     6f0:	d005      	beq.n	6fe <_sercom_get_default_pad+0xe6>
	return 0;
     6f2:	2000      	movs	r0, #0
     6f4:	e79e      	b.n	634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6f6:	481e      	ldr	r0, [pc, #120]	; (770 <_sercom_get_default_pad+0x158>)
     6f8:	e79c      	b.n	634 <_sercom_get_default_pad+0x1c>
     6fa:	481e      	ldr	r0, [pc, #120]	; (774 <_sercom_get_default_pad+0x15c>)
     6fc:	e79a      	b.n	634 <_sercom_get_default_pad+0x1c>
     6fe:	481e      	ldr	r0, [pc, #120]	; (778 <_sercom_get_default_pad+0x160>)
     700:	e798      	b.n	634 <_sercom_get_default_pad+0x1c>
     702:	481e      	ldr	r0, [pc, #120]	; (77c <_sercom_get_default_pad+0x164>)
     704:	e796      	b.n	634 <_sercom_get_default_pad+0x1c>
     706:	481e      	ldr	r0, [pc, #120]	; (780 <_sercom_get_default_pad+0x168>)
     708:	e794      	b.n	634 <_sercom_get_default_pad+0x1c>
     70a:	481e      	ldr	r0, [pc, #120]	; (784 <_sercom_get_default_pad+0x16c>)
     70c:	e792      	b.n	634 <_sercom_get_default_pad+0x1c>
     70e:	481e      	ldr	r0, [pc, #120]	; (788 <_sercom_get_default_pad+0x170>)
     710:	e790      	b.n	634 <_sercom_get_default_pad+0x1c>
     712:	481e      	ldr	r0, [pc, #120]	; (78c <_sercom_get_default_pad+0x174>)
     714:	e78e      	b.n	634 <_sercom_get_default_pad+0x1c>
     716:	481e      	ldr	r0, [pc, #120]	; (790 <_sercom_get_default_pad+0x178>)
     718:	e78c      	b.n	634 <_sercom_get_default_pad+0x1c>
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	42001000 	.word	0x42001000
     720:	42001800 	.word	0x42001800
     724:	42001c00 	.word	0x42001c00
     728:	42001400 	.word	0x42001400
     72c:	42000800 	.word	0x42000800
     730:	42000c00 	.word	0x42000c00
     734:	00090002 	.word	0x00090002
     738:	00060003 	.word	0x00060003
     73c:	00070003 	.word	0x00070003
     740:	00110002 	.word	0x00110002
     744:	00120002 	.word	0x00120002
     748:	00130002 	.word	0x00130002
     74c:	00090003 	.word	0x00090003
     750:	000e0002 	.word	0x000e0002
     754:	000f0002 	.word	0x000f0002
     758:	001c0005 	.word	0x001c0005
     75c:	00180002 	.word	0x00180002
     760:	00190002 	.word	0x00190002
     764:	003f0005 	.word	0x003f0005
     768:	003e0005 	.word	0x003e0005
     76c:	00520005 	.word	0x00520005
     770:	003f0003 	.word	0x003f0003
     774:	00180003 	.word	0x00180003
     778:	00190003 	.word	0x00190003
     77c:	00080002 	.word	0x00080002
     780:	00100002 	.word	0x00100002
     784:	00080003 	.word	0x00080003
     788:	001b0005 	.word	0x001b0005
     78c:	00530005 	.word	0x00530005
     790:	003e0003 	.word	0x003e0003

00000794 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     794:	b530      	push	{r4, r5, lr}
     796:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     798:	4b0b      	ldr	r3, [pc, #44]	; (7c8 <_sercom_get_sercom_inst_index+0x34>)
     79a:	466a      	mov	r2, sp
     79c:	cb32      	ldmia	r3!, {r1, r4, r5}
     79e:	c232      	stmia	r2!, {r1, r4, r5}
     7a0:	cb32      	ldmia	r3!, {r1, r4, r5}
     7a2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     7a4:	9b00      	ldr	r3, [sp, #0]
     7a6:	4283      	cmp	r3, r0
     7a8:	d00b      	beq.n	7c2 <_sercom_get_sercom_inst_index+0x2e>
     7aa:	2301      	movs	r3, #1
     7ac:	009a      	lsls	r2, r3, #2
     7ae:	4669      	mov	r1, sp
     7b0:	5852      	ldr	r2, [r2, r1]
     7b2:	4282      	cmp	r2, r0
     7b4:	d006      	beq.n	7c4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7b6:	3301      	adds	r3, #1
     7b8:	2b06      	cmp	r3, #6
     7ba:	d1f7      	bne.n	7ac <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     7bc:	2000      	movs	r0, #0
}
     7be:	b007      	add	sp, #28
     7c0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7c2:	2300      	movs	r3, #0
			return i;
     7c4:	b2d8      	uxtb	r0, r3
     7c6:	e7fa      	b.n	7be <_sercom_get_sercom_inst_index+0x2a>
     7c8:	00008420 	.word	0x00008420

000007cc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     7cc:	4770      	bx	lr
	...

000007d0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     7d2:	4b0a      	ldr	r3, [pc, #40]	; (7fc <_sercom_set_handler+0x2c>)
     7d4:	781b      	ldrb	r3, [r3, #0]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d10c      	bne.n	7f4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     7da:	4f09      	ldr	r7, [pc, #36]	; (800 <_sercom_set_handler+0x30>)
     7dc:	4e09      	ldr	r6, [pc, #36]	; (804 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     7de:	4d0a      	ldr	r5, [pc, #40]	; (808 <_sercom_set_handler+0x38>)
     7e0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     7e2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     7e4:	195a      	adds	r2, r3, r5
     7e6:	6014      	str	r4, [r2, #0]
     7e8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7ea:	2b18      	cmp	r3, #24
     7ec:	d1f9      	bne.n	7e2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     7ee:	2201      	movs	r2, #1
     7f0:	4b02      	ldr	r3, [pc, #8]	; (7fc <_sercom_set_handler+0x2c>)
     7f2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     7f4:	0080      	lsls	r0, r0, #2
     7f6:	4b02      	ldr	r3, [pc, #8]	; (800 <_sercom_set_handler+0x30>)
     7f8:	50c1      	str	r1, [r0, r3]
}
     7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7fc:	200000e6 	.word	0x200000e6
     800:	200000e8 	.word	0x200000e8
     804:	000007cd 	.word	0x000007cd
     808:	200003e0 	.word	0x200003e0

0000080c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     80c:	b500      	push	{lr}
     80e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     810:	2309      	movs	r3, #9
     812:	466a      	mov	r2, sp
     814:	7013      	strb	r3, [r2, #0]
     816:	3301      	adds	r3, #1
     818:	7053      	strb	r3, [r2, #1]
     81a:	3301      	adds	r3, #1
     81c:	7093      	strb	r3, [r2, #2]
     81e:	3301      	adds	r3, #1
     820:	70d3      	strb	r3, [r2, #3]
     822:	3301      	adds	r3, #1
     824:	7113      	strb	r3, [r2, #4]
     826:	3301      	adds	r3, #1
     828:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     82a:	4b03      	ldr	r3, [pc, #12]	; (838 <_sercom_get_interrupt_vector+0x2c>)
     82c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     82e:	466b      	mov	r3, sp
     830:	5618      	ldrsb	r0, [r3, r0]
}
     832:	b003      	add	sp, #12
     834:	bd00      	pop	{pc}
     836:	46c0      	nop			; (mov r8, r8)
     838:	00000795 	.word	0x00000795

0000083c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     83c:	b510      	push	{r4, lr}
     83e:	4b02      	ldr	r3, [pc, #8]	; (848 <SERCOM0_Handler+0xc>)
     840:	681b      	ldr	r3, [r3, #0]
     842:	2000      	movs	r0, #0
     844:	4798      	blx	r3
     846:	bd10      	pop	{r4, pc}
     848:	200000e8 	.word	0x200000e8

0000084c <SERCOM1_Handler>:
     84c:	b510      	push	{r4, lr}
     84e:	4b02      	ldr	r3, [pc, #8]	; (858 <SERCOM1_Handler+0xc>)
     850:	685b      	ldr	r3, [r3, #4]
     852:	2001      	movs	r0, #1
     854:	4798      	blx	r3
     856:	bd10      	pop	{r4, pc}
     858:	200000e8 	.word	0x200000e8

0000085c <SERCOM2_Handler>:
     85c:	b510      	push	{r4, lr}
     85e:	4b02      	ldr	r3, [pc, #8]	; (868 <SERCOM2_Handler+0xc>)
     860:	689b      	ldr	r3, [r3, #8]
     862:	2002      	movs	r0, #2
     864:	4798      	blx	r3
     866:	bd10      	pop	{r4, pc}
     868:	200000e8 	.word	0x200000e8

0000086c <SERCOM3_Handler>:
     86c:	b510      	push	{r4, lr}
     86e:	4b02      	ldr	r3, [pc, #8]	; (878 <SERCOM3_Handler+0xc>)
     870:	68db      	ldr	r3, [r3, #12]
     872:	2003      	movs	r0, #3
     874:	4798      	blx	r3
     876:	bd10      	pop	{r4, pc}
     878:	200000e8 	.word	0x200000e8

0000087c <SERCOM4_Handler>:
     87c:	b510      	push	{r4, lr}
     87e:	4b02      	ldr	r3, [pc, #8]	; (888 <SERCOM4_Handler+0xc>)
     880:	691b      	ldr	r3, [r3, #16]
     882:	2004      	movs	r0, #4
     884:	4798      	blx	r3
     886:	bd10      	pop	{r4, pc}
     888:	200000e8 	.word	0x200000e8

0000088c <SERCOM5_Handler>:
     88c:	b510      	push	{r4, lr}
     88e:	4b02      	ldr	r3, [pc, #8]	; (898 <SERCOM5_Handler+0xc>)
     890:	695b      	ldr	r3, [r3, #20]
     892:	2005      	movs	r0, #5
     894:	4798      	blx	r3
     896:	bd10      	pop	{r4, pc}
     898:	200000e8 	.word	0x200000e8

0000089c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     89c:	b5f0      	push	{r4, r5, r6, r7, lr}
     89e:	46d6      	mov	lr, sl
     8a0:	464f      	mov	r7, r9
     8a2:	b580      	push	{r7, lr}
     8a4:	b08b      	sub	sp, #44	; 0x2c
     8a6:	4681      	mov	r9, r0
     8a8:	000f      	movs	r7, r1
     8aa:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     8ac:	0003      	movs	r3, r0
     8ae:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     8b0:	680b      	ldr	r3, [r1, #0]
     8b2:	079b      	lsls	r3, r3, #30
     8b4:	d409      	bmi.n	8ca <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     8b6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     8b8:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     8ba:	07db      	lsls	r3, r3, #31
     8bc:	d400      	bmi.n	8c0 <spi_init+0x24>
     8be:	e098      	b.n	9f2 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     8c0:	b00b      	add	sp, #44	; 0x2c
     8c2:	bc0c      	pop	{r2, r3}
     8c4:	4691      	mov	r9, r2
     8c6:	469a      	mov	sl, r3
     8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     8ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
     8cc:	9305      	str	r3, [sp, #20]
     8ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     8d0:	9306      	str	r3, [sp, #24]
     8d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
     8d4:	9307      	str	r3, [sp, #28]
     8d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
     8d8:	9308      	str	r3, [sp, #32]
     8da:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8dc:	ab05      	add	r3, sp, #20
     8de:	9301      	str	r3, [sp, #4]
     8e0:	e00a      	b.n	8f8 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     8e2:	0038      	movs	r0, r7
     8e4:	4b93      	ldr	r3, [pc, #588]	; (b34 <spi_init+0x298>)
     8e6:	4798      	blx	r3
     8e8:	e00c      	b.n	904 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     8ea:	230f      	movs	r3, #15
     8ec:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     8ee:	4281      	cmp	r1, r0
     8f0:	d12d      	bne.n	94e <spi_init+0xb2>
     8f2:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     8f4:	2e04      	cmp	r6, #4
     8f6:	d02f      	beq.n	958 <spi_init+0xbc>
     8f8:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8fa:	00b3      	lsls	r3, r6, #2
     8fc:	9a01      	ldr	r2, [sp, #4]
     8fe:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     900:	2800      	cmp	r0, #0
     902:	d0ee      	beq.n	8e2 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     904:	1c43      	adds	r3, r0, #1
     906:	d0f4      	beq.n	8f2 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     908:	0401      	lsls	r1, r0, #16
     90a:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     90c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     90e:	b2c3      	uxtb	r3, r0
     910:	469c      	mov	ip, r3
		return NULL;
     912:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     914:	0602      	lsls	r2, r0, #24
     916:	d405      	bmi.n	924 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     918:	4663      	mov	r3, ip
     91a:	095b      	lsrs	r3, r3, #5
     91c:	01db      	lsls	r3, r3, #7
     91e:	4a86      	ldr	r2, [pc, #536]	; (b38 <spi_init+0x29c>)
     920:	4692      	mov	sl, r2
     922:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     924:	221f      	movs	r2, #31
     926:	4660      	mov	r0, ip
     928:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     92a:	1898      	adds	r0, r3, r2
     92c:	3040      	adds	r0, #64	; 0x40
     92e:	7800      	ldrb	r0, [r0, #0]
     930:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     932:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     934:	4655      	mov	r5, sl
     936:	07ed      	lsls	r5, r5, #31
     938:	d5d9      	bpl.n	8ee <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     93a:	0852      	lsrs	r2, r2, #1
     93c:	189b      	adds	r3, r3, r2
     93e:	3330      	adds	r3, #48	; 0x30
     940:	7818      	ldrb	r0, [r3, #0]
     942:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     944:	4663      	mov	r3, ip
     946:	07db      	lsls	r3, r3, #31
     948:	d5cf      	bpl.n	8ea <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     94a:	0900      	lsrs	r0, r0, #4
     94c:	e7cf      	b.n	8ee <spi_init+0x52>
			module->hw = NULL;
     94e:	2300      	movs	r3, #0
     950:	464a      	mov	r2, r9
     952:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     954:	201c      	movs	r0, #28
     956:	e7b3      	b.n	8c0 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     958:	2013      	movs	r0, #19
     95a:	4b78      	ldr	r3, [pc, #480]	; (b3c <spi_init+0x2a0>)
     95c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     95e:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     960:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     962:	2a01      	cmp	r2, #1
     964:	d027      	beq.n	9b6 <spi_init+0x11a>
	ctrla |= config->mux_setting;
     966:	6863      	ldr	r3, [r4, #4]
     968:	68a2      	ldr	r2, [r4, #8]
     96a:	4313      	orrs	r3, r2
     96c:	68e2      	ldr	r2, [r4, #12]
     96e:	4313      	orrs	r3, r2
     970:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     972:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
     974:	7c61      	ldrb	r1, [r4, #17]
     976:	2900      	cmp	r1, #0
     978:	d001      	beq.n	97e <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     97a:	2180      	movs	r1, #128	; 0x80
     97c:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     97e:	7ca1      	ldrb	r1, [r4, #18]
     980:	2900      	cmp	r1, #0
     982:	d002      	beq.n	98a <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     984:	2180      	movs	r1, #128	; 0x80
     986:	0289      	lsls	r1, r1, #10
     988:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     98a:	7ce1      	ldrb	r1, [r4, #19]
     98c:	2900      	cmp	r1, #0
     98e:	d002      	beq.n	996 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     990:	2180      	movs	r1, #128	; 0x80
     992:	0089      	lsls	r1, r1, #2
     994:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     996:	7d21      	ldrb	r1, [r4, #20]
     998:	2900      	cmp	r1, #0
     99a:	d002      	beq.n	9a2 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     99c:	2180      	movs	r1, #128	; 0x80
     99e:	0189      	lsls	r1, r1, #6
     9a0:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
     9a2:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     9a4:	2002      	movs	r0, #2
     9a6:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
     9a8:	428b      	cmp	r3, r1
     9aa:	d018      	beq.n	9de <spi_init+0x142>
	module->hw = NULL;
     9ac:	2300      	movs	r3, #0
     9ae:	464a      	mov	r2, r9
     9b0:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     9b2:	201c      	movs	r0, #28
     9b4:	e784      	b.n	8c0 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
     9b6:	aa04      	add	r2, sp, #16
     9b8:	0001      	movs	r1, r0
     9ba:	69a0      	ldr	r0, [r4, #24]
     9bc:	4b60      	ldr	r3, [pc, #384]	; (b40 <spi_init+0x2a4>)
     9be:	4798      	blx	r3
     9c0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     9c2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     9c4:	2b00      	cmp	r3, #0
     9c6:	d000      	beq.n	9ca <spi_init+0x12e>
     9c8:	e77a      	b.n	8c0 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     9ca:	7b3b      	ldrb	r3, [r7, #12]
     9cc:	b2db      	uxtb	r3, r3
     9ce:	aa04      	add	r2, sp, #16
     9d0:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     9d2:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     9d4:	429a      	cmp	r2, r3
     9d6:	d000      	beq.n	9da <spi_init+0x13e>
     9d8:	e772      	b.n	8c0 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     9da:	350c      	adds	r5, #12
     9dc:	e7c3      	b.n	966 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
     9de:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     9e0:	4293      	cmp	r3, r2
     9e2:	d1e3      	bne.n	9ac <spi_init+0x110>
		module->mode           = config->mode;
     9e4:	7823      	ldrb	r3, [r4, #0]
     9e6:	464a      	mov	r2, r9
     9e8:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
     9ea:	7c23      	ldrb	r3, [r4, #16]
     9ec:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     9ee:	2000      	movs	r0, #0
     9f0:	e766      	b.n	8c0 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9f2:	0008      	movs	r0, r1
     9f4:	4b53      	ldr	r3, [pc, #332]	; (b44 <spi_init+0x2a8>)
     9f6:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     9f8:	4a53      	ldr	r2, [pc, #332]	; (b48 <spi_init+0x2ac>)
     9fa:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     9fc:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     9fe:	2301      	movs	r3, #1
     a00:	40ab      	lsls	r3, r5
     a02:	430b      	orrs	r3, r1
     a04:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     a06:	a909      	add	r1, sp, #36	; 0x24
     a08:	2624      	movs	r6, #36	; 0x24
     a0a:	5da3      	ldrb	r3, [r4, r6]
     a0c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a0e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a10:	b2c5      	uxtb	r5, r0
     a12:	0028      	movs	r0, r5
     a14:	4b4d      	ldr	r3, [pc, #308]	; (b4c <spi_init+0x2b0>)
     a16:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a18:	0028      	movs	r0, r5
     a1a:	4b4d      	ldr	r3, [pc, #308]	; (b50 <spi_init+0x2b4>)
     a1c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     a1e:	5da0      	ldrb	r0, [r4, r6]
     a20:	2100      	movs	r1, #0
     a22:	4b4c      	ldr	r3, [pc, #304]	; (b54 <spi_init+0x2b8>)
     a24:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     a26:	7823      	ldrb	r3, [r4, #0]
     a28:	2b01      	cmp	r3, #1
     a2a:	d019      	beq.n	a60 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     a2c:	464b      	mov	r3, r9
     a2e:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a30:	ab04      	add	r3, sp, #16
     a32:	2280      	movs	r2, #128	; 0x80
     a34:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a36:	2200      	movs	r2, #0
     a38:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a3a:	2101      	movs	r1, #1
     a3c:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     a3e:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     a40:	7823      	ldrb	r3, [r4, #0]
     a42:	2b00      	cmp	r3, #0
     a44:	d101      	bne.n	a4a <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a46:	ab04      	add	r3, sp, #16
     a48:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a4c:	9305      	str	r3, [sp, #20]
     a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a50:	9306      	str	r3, [sp, #24]
     a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
     a54:	9307      	str	r3, [sp, #28]
     a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
     a58:	9308      	str	r3, [sp, #32]
     a5a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a5c:	ad05      	add	r5, sp, #20
     a5e:	e011      	b.n	a84 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     a60:	683b      	ldr	r3, [r7, #0]
     a62:	220c      	movs	r2, #12
     a64:	4313      	orrs	r3, r2
     a66:	603b      	str	r3, [r7, #0]
     a68:	e7e0      	b.n	a2c <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a6a:	0030      	movs	r0, r6
     a6c:	4b31      	ldr	r3, [pc, #196]	; (b34 <spi_init+0x298>)
     a6e:	4798      	blx	r3
     a70:	e00d      	b.n	a8e <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a72:	a904      	add	r1, sp, #16
     a74:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a76:	0c00      	lsrs	r0, r0, #16
     a78:	b2c0      	uxtb	r0, r0
     a7a:	4b37      	ldr	r3, [pc, #220]	; (b58 <spi_init+0x2bc>)
     a7c:	4798      	blx	r3
     a7e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     a80:	2f04      	cmp	r7, #4
     a82:	d007      	beq.n	a94 <spi_init+0x1f8>
     a84:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a86:	00bb      	lsls	r3, r7, #2
     a88:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     a8a:	2800      	cmp	r0, #0
     a8c:	d0ed      	beq.n	a6a <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
     a8e:	1c43      	adds	r3, r0, #1
     a90:	d1ef      	bne.n	a72 <spi_init+0x1d6>
     a92:	e7f4      	b.n	a7e <spi_init+0x1e2>
	module->mode             = config->mode;
     a94:	7823      	ldrb	r3, [r4, #0]
     a96:	464a      	mov	r2, r9
     a98:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     a9a:	7c23      	ldrb	r3, [r4, #16]
     a9c:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     a9e:	7ca3      	ldrb	r3, [r4, #18]
     aa0:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     aa2:	7d23      	ldrb	r3, [r4, #20]
     aa4:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     aa6:	2200      	movs	r2, #0
     aa8:	ab02      	add	r3, sp, #8
     aaa:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     aac:	7823      	ldrb	r3, [r4, #0]
     aae:	2b01      	cmp	r3, #1
     ab0:	d028      	beq.n	b04 <spi_init+0x268>
	ctrla |= config->transfer_mode;
     ab2:	6863      	ldr	r3, [r4, #4]
     ab4:	68a2      	ldr	r2, [r4, #8]
     ab6:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
     ab8:	68e2      	ldr	r2, [r4, #12]
     aba:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
     abc:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
     abe:	7c62      	ldrb	r2, [r4, #17]
     ac0:	2a00      	cmp	r2, #0
     ac2:	d103      	bne.n	acc <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ac4:	4a25      	ldr	r2, [pc, #148]	; (b5c <spi_init+0x2c0>)
     ac6:	7892      	ldrb	r2, [r2, #2]
     ac8:	0792      	lsls	r2, r2, #30
     aca:	d501      	bpl.n	ad0 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     acc:	2280      	movs	r2, #128	; 0x80
     ace:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
     ad0:	7ca2      	ldrb	r2, [r4, #18]
     ad2:	2a00      	cmp	r2, #0
     ad4:	d002      	beq.n	adc <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ad6:	2280      	movs	r2, #128	; 0x80
     ad8:	0292      	lsls	r2, r2, #10
     ada:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
     adc:	7ce2      	ldrb	r2, [r4, #19]
     ade:	2a00      	cmp	r2, #0
     ae0:	d002      	beq.n	ae8 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ae2:	2280      	movs	r2, #128	; 0x80
     ae4:	0092      	lsls	r2, r2, #2
     ae6:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
     ae8:	7d22      	ldrb	r2, [r4, #20]
     aea:	2a00      	cmp	r2, #0
     aec:	d002      	beq.n	af4 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     aee:	2280      	movs	r2, #128	; 0x80
     af0:	0192      	lsls	r2, r2, #6
     af2:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
     af4:	6832      	ldr	r2, [r6, #0]
     af6:	4313      	orrs	r3, r2
     af8:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     afa:	6873      	ldr	r3, [r6, #4]
     afc:	430b      	orrs	r3, r1
     afe:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
     b00:	2000      	movs	r0, #0
     b02:	e6dd      	b.n	8c0 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b04:	464b      	mov	r3, r9
     b06:	6818      	ldr	r0, [r3, #0]
     b08:	4b0e      	ldr	r3, [pc, #56]	; (b44 <spi_init+0x2a8>)
     b0a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b0c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b0e:	b2c0      	uxtb	r0, r0
     b10:	4b0a      	ldr	r3, [pc, #40]	; (b3c <spi_init+0x2a0>)
     b12:	4798      	blx	r3
     b14:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     b16:	ab02      	add	r3, sp, #8
     b18:	1d9a      	adds	r2, r3, #6
     b1a:	69a0      	ldr	r0, [r4, #24]
     b1c:	4b08      	ldr	r3, [pc, #32]	; (b40 <spi_init+0x2a4>)
     b1e:	4798      	blx	r3
     b20:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     b22:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     b24:	2b00      	cmp	r3, #0
     b26:	d000      	beq.n	b2a <spi_init+0x28e>
     b28:	e6ca      	b.n	8c0 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     b2a:	ab02      	add	r3, sp, #8
     b2c:	3306      	adds	r3, #6
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	7333      	strb	r3, [r6, #12]
     b32:	e7be      	b.n	ab2 <spi_init+0x216>
     b34:	00000619 	.word	0x00000619
     b38:	41004400 	.word	0x41004400
     b3c:	000018b1 	.word	0x000018b1
     b40:	0000050f 	.word	0x0000050f
     b44:	00000795 	.word	0x00000795
     b48:	40000400 	.word	0x40000400
     b4c:	00001895 	.word	0x00001895
     b50:	00001809 	.word	0x00001809
     b54:	000005cd 	.word	0x000005cd
     b58:	0000198d 	.word	0x0000198d
     b5c:	41002000 	.word	0x41002000

00000b60 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     b60:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     b62:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     b64:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     b66:	2c01      	cmp	r4, #1
     b68:	d001      	beq.n	b6e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     b6a:	0018      	movs	r0, r3
     b6c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     b6e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     b70:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     b72:	2c00      	cmp	r4, #0
     b74:	d1f9      	bne.n	b6a <spi_select_slave+0xa>
		if (select) {
     b76:	2a00      	cmp	r2, #0
     b78:	d058      	beq.n	c2c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     b7a:	784b      	ldrb	r3, [r1, #1]
     b7c:	2b00      	cmp	r3, #0
     b7e:	d044      	beq.n	c0a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     b80:	6803      	ldr	r3, [r0, #0]
     b82:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     b84:	07db      	lsls	r3, r3, #31
     b86:	d410      	bmi.n	baa <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     b88:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     b8a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b8c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b8e:	2900      	cmp	r1, #0
     b90:	d104      	bne.n	b9c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     b92:	0953      	lsrs	r3, r2, #5
     b94:	01db      	lsls	r3, r3, #7
     b96:	492e      	ldr	r1, [pc, #184]	; (c50 <spi_select_slave+0xf0>)
     b98:	468c      	mov	ip, r1
     b9a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b9c:	211f      	movs	r1, #31
     b9e:	4011      	ands	r1, r2
     ba0:	2201      	movs	r2, #1
     ba2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     ba4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     ba6:	2305      	movs	r3, #5
     ba8:	e7df      	b.n	b6a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     baa:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     bac:	09d4      	lsrs	r4, r2, #7
		return NULL;
     bae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     bb0:	2c00      	cmp	r4, #0
     bb2:	d104      	bne.n	bbe <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     bb4:	0953      	lsrs	r3, r2, #5
     bb6:	01db      	lsls	r3, r3, #7
     bb8:	4c25      	ldr	r4, [pc, #148]	; (c50 <spi_select_slave+0xf0>)
     bba:	46a4      	mov	ip, r4
     bbc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bbe:	241f      	movs	r4, #31
     bc0:	4014      	ands	r4, r2
     bc2:	2201      	movs	r2, #1
     bc4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     bc6:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bc8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     bca:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     bcc:	07d2      	lsls	r2, r2, #31
     bce:	d501      	bpl.n	bd4 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     bd0:	788a      	ldrb	r2, [r1, #2]
     bd2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     bd4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     bd6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     bd8:	2a00      	cmp	r2, #0
     bda:	d1c6      	bne.n	b6a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     bdc:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     bde:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     be0:	7e13      	ldrb	r3, [r2, #24]
     be2:	420b      	tst	r3, r1
     be4:	d0fc      	beq.n	be0 <spi_select_slave+0x80>
     be6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     be8:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     bea:	0749      	lsls	r1, r1, #29
     bec:	d5bd      	bpl.n	b6a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     bee:	8b53      	ldrh	r3, [r2, #26]
     bf0:	075b      	lsls	r3, r3, #29
     bf2:	d501      	bpl.n	bf8 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     bf4:	2304      	movs	r3, #4
     bf6:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     bf8:	7983      	ldrb	r3, [r0, #6]
     bfa:	2b01      	cmp	r3, #1
     bfc:	d002      	beq.n	c04 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     bfe:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c00:	2300      	movs	r3, #0
     c02:	e7b2      	b.n	b6a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     c04:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c06:	2300      	movs	r3, #0
     c08:	e7af      	b.n	b6a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     c0a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c0c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c10:	2900      	cmp	r1, #0
     c12:	d104      	bne.n	c1e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     c14:	0953      	lsrs	r3, r2, #5
     c16:	01db      	lsls	r3, r3, #7
     c18:	490d      	ldr	r1, [pc, #52]	; (c50 <spi_select_slave+0xf0>)
     c1a:	468c      	mov	ip, r1
     c1c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c1e:	211f      	movs	r1, #31
     c20:	4011      	ands	r1, r2
     c22:	2201      	movs	r2, #1
     c24:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     c26:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     c28:	2300      	movs	r3, #0
     c2a:	e79e      	b.n	b6a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     c2c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c2e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c30:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c32:	2900      	cmp	r1, #0
     c34:	d104      	bne.n	c40 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     c36:	0953      	lsrs	r3, r2, #5
     c38:	01db      	lsls	r3, r3, #7
     c3a:	4905      	ldr	r1, [pc, #20]	; (c50 <spi_select_slave+0xf0>)
     c3c:	468c      	mov	ip, r1
     c3e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c40:	211f      	movs	r1, #31
     c42:	4011      	ands	r1, r2
     c44:	2201      	movs	r2, #1
     c46:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     c48:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     c4a:	2300      	movs	r3, #0
     c4c:	e78d      	b.n	b6a <spi_select_slave+0xa>
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	41004400 	.word	0x41004400

00000c54 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     c54:	b5f0      	push	{r4, r5, r6, r7, lr}
     c56:	46de      	mov	lr, fp
     c58:	4657      	mov	r7, sl
     c5a:	464e      	mov	r6, r9
     c5c:	4645      	mov	r5, r8
     c5e:	b5e0      	push	{r5, r6, r7, lr}
     c60:	b091      	sub	sp, #68	; 0x44
     c62:	0005      	movs	r5, r0
     c64:	000c      	movs	r4, r1
     c66:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     c68:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c6a:	0008      	movs	r0, r1
     c6c:	4bbc      	ldr	r3, [pc, #752]	; (f60 <usart_init+0x30c>)
     c6e:	4798      	blx	r3
     c70:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     c72:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     c74:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     c76:	07db      	lsls	r3, r3, #31
     c78:	d506      	bpl.n	c88 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     c7a:	b011      	add	sp, #68	; 0x44
     c7c:	bc3c      	pop	{r2, r3, r4, r5}
     c7e:	4690      	mov	r8, r2
     c80:	4699      	mov	r9, r3
     c82:	46a2      	mov	sl, r4
     c84:	46ab      	mov	fp, r5
     c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     c88:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     c8a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     c8c:	079b      	lsls	r3, r3, #30
     c8e:	d4f4      	bmi.n	c7a <usart_init+0x26>
     c90:	49b4      	ldr	r1, [pc, #720]	; (f64 <usart_init+0x310>)
     c92:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c94:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c96:	2301      	movs	r3, #1
     c98:	40bb      	lsls	r3, r7
     c9a:	4303      	orrs	r3, r0
     c9c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     c9e:	a90f      	add	r1, sp, #60	; 0x3c
     ca0:	272d      	movs	r7, #45	; 0x2d
     ca2:	5df3      	ldrb	r3, [r6, r7]
     ca4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ca6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ca8:	b2d3      	uxtb	r3, r2
     caa:	9302      	str	r3, [sp, #8]
     cac:	0018      	movs	r0, r3
     cae:	4bae      	ldr	r3, [pc, #696]	; (f68 <usart_init+0x314>)
     cb0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     cb2:	9802      	ldr	r0, [sp, #8]
     cb4:	4bad      	ldr	r3, [pc, #692]	; (f6c <usart_init+0x318>)
     cb6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     cb8:	5df0      	ldrb	r0, [r6, r7]
     cba:	2100      	movs	r1, #0
     cbc:	4bac      	ldr	r3, [pc, #688]	; (f70 <usart_init+0x31c>)
     cbe:	4798      	blx	r3
	module->character_size = config->character_size;
     cc0:	7af3      	ldrb	r3, [r6, #11]
     cc2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     cc4:	2324      	movs	r3, #36	; 0x24
     cc6:	5cf3      	ldrb	r3, [r6, r3]
     cc8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     cca:	2325      	movs	r3, #37	; 0x25
     ccc:	5cf3      	ldrb	r3, [r6, r3]
     cce:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     cd0:	7ef3      	ldrb	r3, [r6, #27]
     cd2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     cd4:	7f33      	ldrb	r3, [r6, #28]
     cd6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     cd8:	682b      	ldr	r3, [r5, #0]
     cda:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cdc:	0018      	movs	r0, r3
     cde:	4ba0      	ldr	r3, [pc, #640]	; (f60 <usart_init+0x30c>)
     ce0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ce2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     ce4:	2200      	movs	r2, #0
     ce6:	230e      	movs	r3, #14
     ce8:	a906      	add	r1, sp, #24
     cea:	468c      	mov	ip, r1
     cec:	4463      	add	r3, ip
     cee:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     cf0:	8a32      	ldrh	r2, [r6, #16]
     cf2:	9202      	str	r2, [sp, #8]
     cf4:	2380      	movs	r3, #128	; 0x80
     cf6:	01db      	lsls	r3, r3, #7
     cf8:	429a      	cmp	r2, r3
     cfa:	d100      	bne.n	cfe <usart_init+0xaa>
     cfc:	e09e      	b.n	e3c <usart_init+0x1e8>
     cfe:	d90f      	bls.n	d20 <usart_init+0xcc>
     d00:	23c0      	movs	r3, #192	; 0xc0
     d02:	01db      	lsls	r3, r3, #7
     d04:	9a02      	ldr	r2, [sp, #8]
     d06:	429a      	cmp	r2, r3
     d08:	d100      	bne.n	d0c <usart_init+0xb8>
     d0a:	e092      	b.n	e32 <usart_init+0x1de>
     d0c:	2380      	movs	r3, #128	; 0x80
     d0e:	021b      	lsls	r3, r3, #8
     d10:	429a      	cmp	r2, r3
     d12:	d000      	beq.n	d16 <usart_init+0xc2>
     d14:	e11f      	b.n	f56 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     d16:	2303      	movs	r3, #3
     d18:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d1a:	2300      	movs	r3, #0
     d1c:	9307      	str	r3, [sp, #28]
     d1e:	e008      	b.n	d32 <usart_init+0xde>
	switch (config->sample_rate) {
     d20:	2380      	movs	r3, #128	; 0x80
     d22:	019b      	lsls	r3, r3, #6
     d24:	429a      	cmp	r2, r3
     d26:	d000      	beq.n	d2a <usart_init+0xd6>
     d28:	e115      	b.n	f56 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     d2a:	2310      	movs	r3, #16
     d2c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     d2e:	3b0f      	subs	r3, #15
     d30:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     d32:	6833      	ldr	r3, [r6, #0]
     d34:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     d36:	68f3      	ldr	r3, [r6, #12]
     d38:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     d3a:	6973      	ldr	r3, [r6, #20]
     d3c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d3e:	7e33      	ldrb	r3, [r6, #24]
     d40:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d42:	2326      	movs	r3, #38	; 0x26
     d44:	5cf3      	ldrb	r3, [r6, r3]
     d46:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     d48:	6873      	ldr	r3, [r6, #4]
     d4a:	4699      	mov	r9, r3
	switch (transfer_mode)
     d4c:	2b00      	cmp	r3, #0
     d4e:	d100      	bne.n	d52 <usart_init+0xfe>
     d50:	e0a0      	b.n	e94 <usart_init+0x240>
     d52:	2380      	movs	r3, #128	; 0x80
     d54:	055b      	lsls	r3, r3, #21
     d56:	4599      	cmp	r9, r3
     d58:	d100      	bne.n	d5c <usart_init+0x108>
     d5a:	e084      	b.n	e66 <usart_init+0x212>
	if(config->encoding_format_enable) {
     d5c:	7e73      	ldrb	r3, [r6, #25]
     d5e:	2b00      	cmp	r3, #0
     d60:	d002      	beq.n	d68 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     d62:	7eb3      	ldrb	r3, [r6, #26]
     d64:	4642      	mov	r2, r8
     d66:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d68:	682a      	ldr	r2, [r5, #0]
     d6a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d6c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d6e:	2b00      	cmp	r3, #0
     d70:	d1fc      	bne.n	d6c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     d72:	330e      	adds	r3, #14
     d74:	aa06      	add	r2, sp, #24
     d76:	4694      	mov	ip, r2
     d78:	4463      	add	r3, ip
     d7a:	881b      	ldrh	r3, [r3, #0]
     d7c:	4642      	mov	r2, r8
     d7e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     d80:	9b05      	ldr	r3, [sp, #20]
     d82:	9a03      	ldr	r2, [sp, #12]
     d84:	4313      	orrs	r3, r2
     d86:	9a04      	ldr	r2, [sp, #16]
     d88:	4313      	orrs	r3, r2
     d8a:	464a      	mov	r2, r9
     d8c:	4313      	orrs	r3, r2
     d8e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d90:	465b      	mov	r3, fp
     d92:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     d94:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d96:	4653      	mov	r3, sl
     d98:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     d9a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     d9c:	2327      	movs	r3, #39	; 0x27
     d9e:	5cf3      	ldrb	r3, [r6, r3]
     da0:	2b00      	cmp	r3, #0
     da2:	d101      	bne.n	da8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     da4:	3304      	adds	r3, #4
     da6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     da8:	7e73      	ldrb	r3, [r6, #25]
     daa:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     dac:	7f32      	ldrb	r2, [r6, #28]
     dae:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     db0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     db2:	7f72      	ldrb	r2, [r6, #29]
     db4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     db6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     db8:	2224      	movs	r2, #36	; 0x24
     dba:	5cb2      	ldrb	r2, [r6, r2]
     dbc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     dbe:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     dc0:	2225      	movs	r2, #37	; 0x25
     dc2:	5cb2      	ldrb	r2, [r6, r2]
     dc4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     dc6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     dc8:	7ab1      	ldrb	r1, [r6, #10]
     dca:	7af2      	ldrb	r2, [r6, #11]
     dcc:	4311      	orrs	r1, r2
     dce:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     dd0:	8933      	ldrh	r3, [r6, #8]
     dd2:	2bff      	cmp	r3, #255	; 0xff
     dd4:	d100      	bne.n	dd8 <usart_init+0x184>
     dd6:	e081      	b.n	edc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     dd8:	2280      	movs	r2, #128	; 0x80
     dda:	0452      	lsls	r2, r2, #17
     ddc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     dde:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     de0:	232c      	movs	r3, #44	; 0x2c
     de2:	5cf3      	ldrb	r3, [r6, r3]
     de4:	2b00      	cmp	r3, #0
     de6:	d103      	bne.n	df0 <usart_init+0x19c>
     de8:	4b62      	ldr	r3, [pc, #392]	; (f74 <usart_init+0x320>)
     dea:	789b      	ldrb	r3, [r3, #2]
     dec:	079b      	lsls	r3, r3, #30
     dee:	d501      	bpl.n	df4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     df0:	2380      	movs	r3, #128	; 0x80
     df2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     df4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     df6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     df8:	2b00      	cmp	r3, #0
     dfa:	d1fc      	bne.n	df6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     dfc:	4643      	mov	r3, r8
     dfe:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e00:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e02:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     e04:	2b00      	cmp	r3, #0
     e06:	d1fc      	bne.n	e02 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     e08:	4643      	mov	r3, r8
     e0a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e0c:	ab0e      	add	r3, sp, #56	; 0x38
     e0e:	2280      	movs	r2, #128	; 0x80
     e10:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e12:	2200      	movs	r2, #0
     e14:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     e16:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     e18:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     e1a:	6b33      	ldr	r3, [r6, #48]	; 0x30
     e1c:	930a      	str	r3, [sp, #40]	; 0x28
     e1e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     e20:	930b      	str	r3, [sp, #44]	; 0x2c
     e22:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     e24:	930c      	str	r3, [sp, #48]	; 0x30
     e26:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     e28:	9302      	str	r3, [sp, #8]
     e2a:	930d      	str	r3, [sp, #52]	; 0x34
     e2c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e2e:	ae0a      	add	r6, sp, #40	; 0x28
     e30:	e063      	b.n	efa <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e32:	2308      	movs	r3, #8
     e34:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e36:	3b07      	subs	r3, #7
     e38:	9307      	str	r3, [sp, #28]
     e3a:	e77a      	b.n	d32 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     e3c:	6833      	ldr	r3, [r6, #0]
     e3e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     e40:	68f3      	ldr	r3, [r6, #12]
     e42:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     e44:	6973      	ldr	r3, [r6, #20]
     e46:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e48:	7e33      	ldrb	r3, [r6, #24]
     e4a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e4c:	2326      	movs	r3, #38	; 0x26
     e4e:	5cf3      	ldrb	r3, [r6, r3]
     e50:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     e52:	6873      	ldr	r3, [r6, #4]
     e54:	4699      	mov	r9, r3
	switch (transfer_mode)
     e56:	2b00      	cmp	r3, #0
     e58:	d018      	beq.n	e8c <usart_init+0x238>
     e5a:	2380      	movs	r3, #128	; 0x80
     e5c:	055b      	lsls	r3, r3, #21
     e5e:	4599      	cmp	r9, r3
     e60:	d001      	beq.n	e66 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     e62:	2000      	movs	r0, #0
     e64:	e025      	b.n	eb2 <usart_init+0x25e>
			if (!config->use_external_clock) {
     e66:	2327      	movs	r3, #39	; 0x27
     e68:	5cf3      	ldrb	r3, [r6, r3]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d000      	beq.n	e70 <usart_init+0x21c>
     e6e:	e775      	b.n	d5c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e70:	6a33      	ldr	r3, [r6, #32]
     e72:	001f      	movs	r7, r3
     e74:	b2c0      	uxtb	r0, r0
     e76:	4b40      	ldr	r3, [pc, #256]	; (f78 <usart_init+0x324>)
     e78:	4798      	blx	r3
     e7a:	0001      	movs	r1, r0
     e7c:	220e      	movs	r2, #14
     e7e:	ab06      	add	r3, sp, #24
     e80:	469c      	mov	ip, r3
     e82:	4462      	add	r2, ip
     e84:	0038      	movs	r0, r7
     e86:	4b3d      	ldr	r3, [pc, #244]	; (f7c <usart_init+0x328>)
     e88:	4798      	blx	r3
     e8a:	e012      	b.n	eb2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e8c:	2308      	movs	r3, #8
     e8e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e90:	2300      	movs	r3, #0
     e92:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     e94:	2327      	movs	r3, #39	; 0x27
     e96:	5cf3      	ldrb	r3, [r6, r3]
     e98:	2b00      	cmp	r3, #0
     e9a:	d00e      	beq.n	eba <usart_init+0x266>
				status_code =
     e9c:	9b06      	ldr	r3, [sp, #24]
     e9e:	9300      	str	r3, [sp, #0]
     ea0:	9b07      	ldr	r3, [sp, #28]
     ea2:	220e      	movs	r2, #14
     ea4:	a906      	add	r1, sp, #24
     ea6:	468c      	mov	ip, r1
     ea8:	4462      	add	r2, ip
     eaa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     eac:	6a30      	ldr	r0, [r6, #32]
     eae:	4f34      	ldr	r7, [pc, #208]	; (f80 <usart_init+0x32c>)
     eb0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     eb2:	2800      	cmp	r0, #0
     eb4:	d000      	beq.n	eb8 <usart_init+0x264>
     eb6:	e6e0      	b.n	c7a <usart_init+0x26>
     eb8:	e750      	b.n	d5c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     eba:	6a33      	ldr	r3, [r6, #32]
     ebc:	001f      	movs	r7, r3
     ebe:	b2c0      	uxtb	r0, r0
     ec0:	4b2d      	ldr	r3, [pc, #180]	; (f78 <usart_init+0x324>)
     ec2:	4798      	blx	r3
     ec4:	0001      	movs	r1, r0
				status_code =
     ec6:	9b06      	ldr	r3, [sp, #24]
     ec8:	9300      	str	r3, [sp, #0]
     eca:	9b07      	ldr	r3, [sp, #28]
     ecc:	220e      	movs	r2, #14
     ece:	a806      	add	r0, sp, #24
     ed0:	4684      	mov	ip, r0
     ed2:	4462      	add	r2, ip
     ed4:	0038      	movs	r0, r7
     ed6:	4f2a      	ldr	r7, [pc, #168]	; (f80 <usart_init+0x32c>)
     ed8:	47b8      	blx	r7
     eda:	e7ea      	b.n	eb2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     edc:	7ef3      	ldrb	r3, [r6, #27]
     ede:	2b00      	cmp	r3, #0
     ee0:	d100      	bne.n	ee4 <usart_init+0x290>
     ee2:	e77d      	b.n	de0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     ee4:	2380      	movs	r3, #128	; 0x80
     ee6:	04db      	lsls	r3, r3, #19
     ee8:	431f      	orrs	r7, r3
     eea:	e779      	b.n	de0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     eec:	0020      	movs	r0, r4
     eee:	4b25      	ldr	r3, [pc, #148]	; (f84 <usart_init+0x330>)
     ef0:	4798      	blx	r3
     ef2:	e007      	b.n	f04 <usart_init+0x2b0>
     ef4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     ef6:	2f04      	cmp	r7, #4
     ef8:	d00d      	beq.n	f16 <usart_init+0x2c2>
     efa:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     efc:	00bb      	lsls	r3, r7, #2
     efe:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     f00:	2800      	cmp	r0, #0
     f02:	d0f3      	beq.n	eec <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     f04:	1c43      	adds	r3, r0, #1
     f06:	d0f5      	beq.n	ef4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f08:	a90e      	add	r1, sp, #56	; 0x38
     f0a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f0c:	0c00      	lsrs	r0, r0, #16
     f0e:	b2c0      	uxtb	r0, r0
     f10:	4b1d      	ldr	r3, [pc, #116]	; (f88 <usart_init+0x334>)
     f12:	4798      	blx	r3
     f14:	e7ee      	b.n	ef4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     f16:	2300      	movs	r3, #0
     f18:	60eb      	str	r3, [r5, #12]
     f1a:	612b      	str	r3, [r5, #16]
     f1c:	616b      	str	r3, [r5, #20]
     f1e:	61ab      	str	r3, [r5, #24]
     f20:	61eb      	str	r3, [r5, #28]
     f22:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     f24:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     f26:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     f28:	2200      	movs	r2, #0
     f2a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     f2c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     f2e:	3330      	adds	r3, #48	; 0x30
     f30:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     f32:	3301      	adds	r3, #1
     f34:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     f36:	3301      	adds	r3, #1
     f38:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     f3a:	3301      	adds	r3, #1
     f3c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     f3e:	6828      	ldr	r0, [r5, #0]
     f40:	4b07      	ldr	r3, [pc, #28]	; (f60 <usart_init+0x30c>)
     f42:	4798      	blx	r3
     f44:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     f46:	4911      	ldr	r1, [pc, #68]	; (f8c <usart_init+0x338>)
     f48:	4b11      	ldr	r3, [pc, #68]	; (f90 <usart_init+0x33c>)
     f4a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     f4c:	00a4      	lsls	r4, r4, #2
     f4e:	4b11      	ldr	r3, [pc, #68]	; (f94 <usart_init+0x340>)
     f50:	50e5      	str	r5, [r4, r3]
	return status_code;
     f52:	2000      	movs	r0, #0
     f54:	e691      	b.n	c7a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f56:	2310      	movs	r3, #16
     f58:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f5a:	2300      	movs	r3, #0
     f5c:	9307      	str	r3, [sp, #28]
     f5e:	e6e8      	b.n	d32 <usart_init+0xde>
     f60:	00000795 	.word	0x00000795
     f64:	40000400 	.word	0x40000400
     f68:	00001895 	.word	0x00001895
     f6c:	00001809 	.word	0x00001809
     f70:	000005cd 	.word	0x000005cd
     f74:	41002000 	.word	0x41002000
     f78:	000018b1 	.word	0x000018b1
     f7c:	0000050f 	.word	0x0000050f
     f80:	00000539 	.word	0x00000539
     f84:	00000619 	.word	0x00000619
     f88:	0000198d 	.word	0x0000198d
     f8c:	000010cd 	.word	0x000010cd
     f90:	000007d1 	.word	0x000007d1
     f94:	200003e0 	.word	0x200003e0

00000f98 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f98:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     f9a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     f9c:	2a00      	cmp	r2, #0
     f9e:	d101      	bne.n	fa4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     fa0:	0018      	movs	r0, r3
     fa2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     fa4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     fa6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     fa8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     faa:	2a00      	cmp	r2, #0
     fac:	d1f8      	bne.n	fa0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     fae:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     fb0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     fb2:	2a00      	cmp	r2, #0
     fb4:	d1fc      	bne.n	fb0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     fb6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     fb8:	2102      	movs	r1, #2
     fba:	7e1a      	ldrb	r2, [r3, #24]
     fbc:	420a      	tst	r2, r1
     fbe:	d0fc      	beq.n	fba <usart_write_wait+0x22>
	return STATUS_OK;
     fc0:	2300      	movs	r3, #0
     fc2:	e7ed      	b.n	fa0 <usart_write_wait+0x8>

00000fc4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     fc4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     fc6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     fc8:	2a00      	cmp	r2, #0
     fca:	d101      	bne.n	fd0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     fcc:	0018      	movs	r0, r3
     fce:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     fd0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     fd2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     fd4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     fd6:	2a00      	cmp	r2, #0
     fd8:	d1f8      	bne.n	fcc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     fda:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     fdc:	7e10      	ldrb	r0, [r2, #24]
     fde:	0740      	lsls	r0, r0, #29
     fe0:	d5f4      	bpl.n	fcc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     fe2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     fe4:	2b00      	cmp	r3, #0
     fe6:	d1fc      	bne.n	fe2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     fe8:	8b53      	ldrh	r3, [r2, #26]
     fea:	b2db      	uxtb	r3, r3
	if (error_code) {
     fec:	0698      	lsls	r0, r3, #26
     fee:	d01d      	beq.n	102c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     ff0:	0798      	lsls	r0, r3, #30
     ff2:	d503      	bpl.n	ffc <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ff4:	2302      	movs	r3, #2
     ff6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     ff8:	3318      	adds	r3, #24
     ffa:	e7e7      	b.n	fcc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ffc:	0758      	lsls	r0, r3, #29
     ffe:	d503      	bpl.n	1008 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1000:	2304      	movs	r3, #4
    1002:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1004:	331a      	adds	r3, #26
    1006:	e7e1      	b.n	fcc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1008:	07d8      	lsls	r0, r3, #31
    100a:	d503      	bpl.n	1014 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    100c:	2301      	movs	r3, #1
    100e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1010:	3312      	adds	r3, #18
    1012:	e7db      	b.n	fcc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1014:	06d8      	lsls	r0, r3, #27
    1016:	d503      	bpl.n	1020 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1018:	2310      	movs	r3, #16
    101a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    101c:	3332      	adds	r3, #50	; 0x32
    101e:	e7d5      	b.n	fcc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1020:	069b      	lsls	r3, r3, #26
    1022:	d503      	bpl.n	102c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1024:	2320      	movs	r3, #32
    1026:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1028:	3321      	adds	r3, #33	; 0x21
    102a:	e7cf      	b.n	fcc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    102c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    102e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1030:	2300      	movs	r3, #0
    1032:	e7cb      	b.n	fcc <usart_read_wait+0x8>

00001034 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1034:	b5f0      	push	{r4, r5, r6, r7, lr}
    1036:	46d6      	mov	lr, sl
    1038:	b500      	push	{lr}
    103a:	b084      	sub	sp, #16
    103c:	0004      	movs	r4, r0
    103e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1040:	2017      	movs	r0, #23
	if (length == 0) {
    1042:	2a00      	cmp	r2, #0
    1044:	d103      	bne.n	104e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1046:	b004      	add	sp, #16
    1048:	bc04      	pop	{r2}
    104a:	4692      	mov	sl, r2
    104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    104e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1050:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    1052:	2b00      	cmp	r3, #0
    1054:	d0f7      	beq.n	1046 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1056:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    1058:	3a01      	subs	r2, #1
    105a:	b293      	uxth	r3, r2
    105c:	469a      	mov	sl, r3
    105e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1060:	2704      	movs	r7, #4
    1062:	e019      	b.n	1098 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    1064:	2300      	movs	r3, #0
    1066:	aa02      	add	r2, sp, #8
    1068:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    106a:	1d91      	adds	r1, r2, #6
    106c:	0020      	movs	r0, r4
    106e:	4b15      	ldr	r3, [pc, #84]	; (10c4 <usart_read_buffer_wait+0x90>)
    1070:	4798      	blx	r3
		if (retval != STATUS_OK) {
    1072:	2800      	cmp	r0, #0
    1074:	d1e7      	bne.n	1046 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    1076:	1c69      	adds	r1, r5, #1
    1078:	b289      	uxth	r1, r1
    107a:	ab02      	add	r3, sp, #8
    107c:	88db      	ldrh	r3, [r3, #6]
    107e:	9a01      	ldr	r2, [sp, #4]
    1080:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1082:	7962      	ldrb	r2, [r4, #5]
    1084:	2a01      	cmp	r2, #1
    1086:	d014      	beq.n	10b2 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    1088:	000d      	movs	r5, r1
	while (length--) {
    108a:	4653      	mov	r3, sl
    108c:	3b01      	subs	r3, #1
    108e:	b29b      	uxth	r3, r3
    1090:	469a      	mov	sl, r3
    1092:	4b0d      	ldr	r3, [pc, #52]	; (10c8 <usart_read_buffer_wait+0x94>)
    1094:	459a      	cmp	sl, r3
    1096:	d0d6      	beq.n	1046 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1098:	7e33      	ldrb	r3, [r6, #24]
    109a:	423b      	tst	r3, r7
    109c:	d1e2      	bne.n	1064 <usart_read_buffer_wait+0x30>
    109e:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <usart_read_buffer_wait+0x94>)
    10a0:	7e32      	ldrb	r2, [r6, #24]
    10a2:	423a      	tst	r2, r7
    10a4:	d1de      	bne.n	1064 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    10a6:	2b01      	cmp	r3, #1
    10a8:	d009      	beq.n	10be <usart_read_buffer_wait+0x8a>
    10aa:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    10ac:	2b00      	cmp	r3, #0
    10ae:	d1f7      	bne.n	10a0 <usart_read_buffer_wait+0x6c>
    10b0:	e7d8      	b.n	1064 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    10b2:	3502      	adds	r5, #2
    10b4:	b2ad      	uxth	r5, r5
    10b6:	0a1b      	lsrs	r3, r3, #8
    10b8:	9a01      	ldr	r2, [sp, #4]
    10ba:	5453      	strb	r3, [r2, r1]
    10bc:	e7e5      	b.n	108a <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    10be:	2012      	movs	r0, #18
    10c0:	e7c1      	b.n	1046 <usart_read_buffer_wait+0x12>
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	00000fc5 	.word	0x00000fc5
    10c8:	0000ffff 	.word	0x0000ffff

000010cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    10cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    10ce:	0080      	lsls	r0, r0, #2
    10d0:	4b62      	ldr	r3, [pc, #392]	; (125c <_usart_interrupt_handler+0x190>)
    10d2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    10d4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    10d6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    10d8:	2b00      	cmp	r3, #0
    10da:	d1fc      	bne.n	10d6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    10dc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    10de:	7da6      	ldrb	r6, [r4, #22]
    10e0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    10e2:	2330      	movs	r3, #48	; 0x30
    10e4:	5ceb      	ldrb	r3, [r5, r3]
    10e6:	2231      	movs	r2, #49	; 0x31
    10e8:	5caf      	ldrb	r7, [r5, r2]
    10ea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    10ec:	07f3      	lsls	r3, r6, #31
    10ee:	d522      	bpl.n	1136 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    10f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    10f2:	b29b      	uxth	r3, r3
    10f4:	2b00      	cmp	r3, #0
    10f6:	d01c      	beq.n	1132 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    10fa:	7813      	ldrb	r3, [r2, #0]
    10fc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    10fe:	1c51      	adds	r1, r2, #1
    1100:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1102:	7969      	ldrb	r1, [r5, #5]
    1104:	2901      	cmp	r1, #1
    1106:	d00e      	beq.n	1126 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1108:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    110a:	05db      	lsls	r3, r3, #23
    110c:	0ddb      	lsrs	r3, r3, #23
    110e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1110:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1112:	3b01      	subs	r3, #1
    1114:	b29b      	uxth	r3, r3
    1116:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1118:	2b00      	cmp	r3, #0
    111a:	d10c      	bne.n	1136 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    111c:	3301      	adds	r3, #1
    111e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1120:	3301      	adds	r3, #1
    1122:	75a3      	strb	r3, [r4, #22]
    1124:	e007      	b.n	1136 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1126:	7851      	ldrb	r1, [r2, #1]
    1128:	0209      	lsls	r1, r1, #8
    112a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    112c:	3202      	adds	r2, #2
    112e:	62aa      	str	r2, [r5, #40]	; 0x28
    1130:	e7eb      	b.n	110a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1132:	2301      	movs	r3, #1
    1134:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1136:	07b3      	lsls	r3, r6, #30
    1138:	d506      	bpl.n	1148 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    113a:	2302      	movs	r3, #2
    113c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    113e:	2200      	movs	r2, #0
    1140:	3331      	adds	r3, #49	; 0x31
    1142:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1144:	07fb      	lsls	r3, r7, #31
    1146:	d41a      	bmi.n	117e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1148:	0773      	lsls	r3, r6, #29
    114a:	d565      	bpl.n	1218 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    114c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    114e:	b29b      	uxth	r3, r3
    1150:	2b00      	cmp	r3, #0
    1152:	d05f      	beq.n	1214 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1154:	8b63      	ldrh	r3, [r4, #26]
    1156:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1158:	071a      	lsls	r2, r3, #28
    115a:	d414      	bmi.n	1186 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    115c:	223f      	movs	r2, #63	; 0x3f
    115e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1160:	2b00      	cmp	r3, #0
    1162:	d034      	beq.n	11ce <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1164:	079a      	lsls	r2, r3, #30
    1166:	d511      	bpl.n	118c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1168:	221a      	movs	r2, #26
    116a:	2332      	movs	r3, #50	; 0x32
    116c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    116e:	3b30      	subs	r3, #48	; 0x30
    1170:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1172:	077b      	lsls	r3, r7, #29
    1174:	d550      	bpl.n	1218 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1176:	0028      	movs	r0, r5
    1178:	696b      	ldr	r3, [r5, #20]
    117a:	4798      	blx	r3
    117c:	e04c      	b.n	1218 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    117e:	0028      	movs	r0, r5
    1180:	68eb      	ldr	r3, [r5, #12]
    1182:	4798      	blx	r3
    1184:	e7e0      	b.n	1148 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1186:	2237      	movs	r2, #55	; 0x37
    1188:	4013      	ands	r3, r2
    118a:	e7e9      	b.n	1160 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    118c:	075a      	lsls	r2, r3, #29
    118e:	d505      	bpl.n	119c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1190:	221e      	movs	r2, #30
    1192:	2332      	movs	r3, #50	; 0x32
    1194:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1196:	3b2e      	subs	r3, #46	; 0x2e
    1198:	8363      	strh	r3, [r4, #26]
    119a:	e7ea      	b.n	1172 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    119c:	07da      	lsls	r2, r3, #31
    119e:	d505      	bpl.n	11ac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    11a0:	2213      	movs	r2, #19
    11a2:	2332      	movs	r3, #50	; 0x32
    11a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    11a6:	3b31      	subs	r3, #49	; 0x31
    11a8:	8363      	strh	r3, [r4, #26]
    11aa:	e7e2      	b.n	1172 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    11ac:	06da      	lsls	r2, r3, #27
    11ae:	d505      	bpl.n	11bc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    11b0:	2242      	movs	r2, #66	; 0x42
    11b2:	2332      	movs	r3, #50	; 0x32
    11b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    11b6:	3b22      	subs	r3, #34	; 0x22
    11b8:	8363      	strh	r3, [r4, #26]
    11ba:	e7da      	b.n	1172 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    11bc:	2220      	movs	r2, #32
    11be:	421a      	tst	r2, r3
    11c0:	d0d7      	beq.n	1172 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    11c2:	3221      	adds	r2, #33	; 0x21
    11c4:	2332      	movs	r3, #50	; 0x32
    11c6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    11c8:	3b12      	subs	r3, #18
    11ca:	8363      	strh	r3, [r4, #26]
    11cc:	e7d1      	b.n	1172 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    11ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    11d0:	05db      	lsls	r3, r3, #23
    11d2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    11d4:	b2da      	uxtb	r2, r3
    11d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    11d8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    11da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    11dc:	1c51      	adds	r1, r2, #1
    11de:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11e0:	7969      	ldrb	r1, [r5, #5]
    11e2:	2901      	cmp	r1, #1
    11e4:	d010      	beq.n	1208 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    11e6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    11e8:	3b01      	subs	r3, #1
    11ea:	b29b      	uxth	r3, r3
    11ec:	85ab      	strh	r3, [r5, #44]	; 0x2c
    11ee:	2b00      	cmp	r3, #0
    11f0:	d112      	bne.n	1218 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    11f2:	3304      	adds	r3, #4
    11f4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    11f6:	2200      	movs	r2, #0
    11f8:	332e      	adds	r3, #46	; 0x2e
    11fa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    11fc:	07bb      	lsls	r3, r7, #30
    11fe:	d50b      	bpl.n	1218 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1200:	0028      	movs	r0, r5
    1202:	692b      	ldr	r3, [r5, #16]
    1204:	4798      	blx	r3
    1206:	e007      	b.n	1218 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1208:	0a1b      	lsrs	r3, r3, #8
    120a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    120c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    120e:	3301      	adds	r3, #1
    1210:	626b      	str	r3, [r5, #36]	; 0x24
    1212:	e7e8      	b.n	11e6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1214:	2304      	movs	r3, #4
    1216:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1218:	06f3      	lsls	r3, r6, #27
    121a:	d504      	bpl.n	1226 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    121c:	2310      	movs	r3, #16
    121e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1220:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1222:	06fb      	lsls	r3, r7, #27
    1224:	d40e      	bmi.n	1244 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1226:	06b3      	lsls	r3, r6, #26
    1228:	d504      	bpl.n	1234 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    122a:	2320      	movs	r3, #32
    122c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    122e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1230:	073b      	lsls	r3, r7, #28
    1232:	d40b      	bmi.n	124c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1234:	0733      	lsls	r3, r6, #28
    1236:	d504      	bpl.n	1242 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1238:	2308      	movs	r3, #8
    123a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    123c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    123e:	06bb      	lsls	r3, r7, #26
    1240:	d408      	bmi.n	1254 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1244:	0028      	movs	r0, r5
    1246:	69eb      	ldr	r3, [r5, #28]
    1248:	4798      	blx	r3
    124a:	e7ec      	b.n	1226 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    124c:	0028      	movs	r0, r5
    124e:	69ab      	ldr	r3, [r5, #24]
    1250:	4798      	blx	r3
    1252:	e7ef      	b.n	1234 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1254:	6a2b      	ldr	r3, [r5, #32]
    1256:	0028      	movs	r0, r5
    1258:	4798      	blx	r3
}
    125a:	e7f2      	b.n	1242 <_usart_interrupt_handler+0x176>
    125c:	200003e0 	.word	0x200003e0

00001260 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1260:	b510      	push	{r4, lr}
	switch (clock_source) {
    1262:	2808      	cmp	r0, #8
    1264:	d803      	bhi.n	126e <system_clock_source_get_hz+0xe>
    1266:	0080      	lsls	r0, r0, #2
    1268:	4b1c      	ldr	r3, [pc, #112]	; (12dc <system_clock_source_get_hz+0x7c>)
    126a:	581b      	ldr	r3, [r3, r0]
    126c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    126e:	2000      	movs	r0, #0
    1270:	e032      	b.n	12d8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1272:	4b1b      	ldr	r3, [pc, #108]	; (12e0 <system_clock_source_get_hz+0x80>)
    1274:	6918      	ldr	r0, [r3, #16]
    1276:	e02f      	b.n	12d8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1278:	4b1a      	ldr	r3, [pc, #104]	; (12e4 <system_clock_source_get_hz+0x84>)
    127a:	6a1b      	ldr	r3, [r3, #32]
    127c:	059b      	lsls	r3, r3, #22
    127e:	0f9b      	lsrs	r3, r3, #30
    1280:	4819      	ldr	r0, [pc, #100]	; (12e8 <system_clock_source_get_hz+0x88>)
    1282:	40d8      	lsrs	r0, r3
    1284:	e028      	b.n	12d8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1286:	4b16      	ldr	r3, [pc, #88]	; (12e0 <system_clock_source_get_hz+0x80>)
    1288:	6958      	ldr	r0, [r3, #20]
    128a:	e025      	b.n	12d8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    128c:	4b14      	ldr	r3, [pc, #80]	; (12e0 <system_clock_source_get_hz+0x80>)
    128e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1290:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1292:	079b      	lsls	r3, r3, #30
    1294:	d520      	bpl.n	12d8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1296:	4913      	ldr	r1, [pc, #76]	; (12e4 <system_clock_source_get_hz+0x84>)
    1298:	2210      	movs	r2, #16
    129a:	68cb      	ldr	r3, [r1, #12]
    129c:	421a      	tst	r2, r3
    129e:	d0fc      	beq.n	129a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    12a0:	4b0f      	ldr	r3, [pc, #60]	; (12e0 <system_clock_source_get_hz+0x80>)
    12a2:	681a      	ldr	r2, [r3, #0]
    12a4:	2324      	movs	r3, #36	; 0x24
    12a6:	4013      	ands	r3, r2
    12a8:	2b04      	cmp	r3, #4
    12aa:	d001      	beq.n	12b0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    12ac:	480f      	ldr	r0, [pc, #60]	; (12ec <system_clock_source_get_hz+0x8c>)
    12ae:	e013      	b.n	12d8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12b0:	2000      	movs	r0, #0
    12b2:	4b0f      	ldr	r3, [pc, #60]	; (12f0 <system_clock_source_get_hz+0x90>)
    12b4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    12b6:	4b0a      	ldr	r3, [pc, #40]	; (12e0 <system_clock_source_get_hz+0x80>)
    12b8:	689b      	ldr	r3, [r3, #8]
    12ba:	041b      	lsls	r3, r3, #16
    12bc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12be:	4358      	muls	r0, r3
    12c0:	e00a      	b.n	12d8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12c2:	2350      	movs	r3, #80	; 0x50
    12c4:	4a07      	ldr	r2, [pc, #28]	; (12e4 <system_clock_source_get_hz+0x84>)
    12c6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    12c8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12ca:	075b      	lsls	r3, r3, #29
    12cc:	d504      	bpl.n	12d8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    12ce:	4b04      	ldr	r3, [pc, #16]	; (12e0 <system_clock_source_get_hz+0x80>)
    12d0:	68d8      	ldr	r0, [r3, #12]
    12d2:	e001      	b.n	12d8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    12d4:	2080      	movs	r0, #128	; 0x80
    12d6:	0200      	lsls	r0, r0, #8
	}
}
    12d8:	bd10      	pop	{r4, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	00008438 	.word	0x00008438
    12e0:	20000100 	.word	0x20000100
    12e4:	40000800 	.word	0x40000800
    12e8:	007a1200 	.word	0x007a1200
    12ec:	02dc6c00 	.word	0x02dc6c00
    12f0:	000018b1 	.word	0x000018b1

000012f4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    12f4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    12f6:	490c      	ldr	r1, [pc, #48]	; (1328 <system_clock_source_osc8m_set_config+0x34>)
    12f8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    12fa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    12fc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    12fe:	7840      	ldrb	r0, [r0, #1]
    1300:	2201      	movs	r2, #1
    1302:	4010      	ands	r0, r2
    1304:	0180      	lsls	r0, r0, #6
    1306:	2640      	movs	r6, #64	; 0x40
    1308:	43b3      	bics	r3, r6
    130a:	4303      	orrs	r3, r0
    130c:	402a      	ands	r2, r5
    130e:	01d2      	lsls	r2, r2, #7
    1310:	2080      	movs	r0, #128	; 0x80
    1312:	4383      	bics	r3, r0
    1314:	4313      	orrs	r3, r2
    1316:	2203      	movs	r2, #3
    1318:	4022      	ands	r2, r4
    131a:	0212      	lsls	r2, r2, #8
    131c:	4803      	ldr	r0, [pc, #12]	; (132c <system_clock_source_osc8m_set_config+0x38>)
    131e:	4003      	ands	r3, r0
    1320:	4313      	orrs	r3, r2
    1322:	620b      	str	r3, [r1, #32]
}
    1324:	bd70      	pop	{r4, r5, r6, pc}
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	40000800 	.word	0x40000800
    132c:	fffffcff 	.word	0xfffffcff

00001330 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1330:	b5f0      	push	{r4, r5, r6, r7, lr}
    1332:	46ce      	mov	lr, r9
    1334:	4647      	mov	r7, r8
    1336:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1338:	4b19      	ldr	r3, [pc, #100]	; (13a0 <system_clock_source_osc32k_set_config+0x70>)
    133a:	4699      	mov	r9, r3
    133c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    133e:	7841      	ldrb	r1, [r0, #1]
    1340:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1342:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1344:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1346:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1348:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    134a:	7880      	ldrb	r0, [r0, #2]
    134c:	2101      	movs	r1, #1
    134e:	4008      	ands	r0, r1
    1350:	0080      	lsls	r0, r0, #2
    1352:	2204      	movs	r2, #4
    1354:	4393      	bics	r3, r2
    1356:	4303      	orrs	r3, r0
    1358:	4660      	mov	r0, ip
    135a:	4008      	ands	r0, r1
    135c:	00c0      	lsls	r0, r0, #3
    135e:	3204      	adds	r2, #4
    1360:	4393      	bics	r3, r2
    1362:	4303      	orrs	r3, r0
    1364:	0038      	movs	r0, r7
    1366:	4008      	ands	r0, r1
    1368:	0180      	lsls	r0, r0, #6
    136a:	2740      	movs	r7, #64	; 0x40
    136c:	43bb      	bics	r3, r7
    136e:	4303      	orrs	r3, r0
    1370:	0030      	movs	r0, r6
    1372:	4008      	ands	r0, r1
    1374:	01c0      	lsls	r0, r0, #7
    1376:	2680      	movs	r6, #128	; 0x80
    1378:	43b3      	bics	r3, r6
    137a:	4303      	orrs	r3, r0
    137c:	2007      	movs	r0, #7
    137e:	4005      	ands	r5, r0
    1380:	022d      	lsls	r5, r5, #8
    1382:	4808      	ldr	r0, [pc, #32]	; (13a4 <system_clock_source_osc32k_set_config+0x74>)
    1384:	4003      	ands	r3, r0
    1386:	432b      	orrs	r3, r5
    1388:	4021      	ands	r1, r4
    138a:	0309      	lsls	r1, r1, #12
    138c:	4806      	ldr	r0, [pc, #24]	; (13a8 <system_clock_source_osc32k_set_config+0x78>)
    138e:	4003      	ands	r3, r0
    1390:	430b      	orrs	r3, r1
    1392:	464a      	mov	r2, r9
    1394:	6193      	str	r3, [r2, #24]
}
    1396:	bc0c      	pop	{r2, r3}
    1398:	4690      	mov	r8, r2
    139a:	4699      	mov	r9, r3
    139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    139e:	46c0      	nop			; (mov r8, r8)
    13a0:	40000800 	.word	0x40000800
    13a4:	fffff8ff 	.word	0xfffff8ff
    13a8:	ffffefff 	.word	0xffffefff

000013ac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    13ac:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    13ae:	7a03      	ldrb	r3, [r0, #8]
    13b0:	069b      	lsls	r3, r3, #26
    13b2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    13b4:	8942      	ldrh	r2, [r0, #10]
    13b6:	0592      	lsls	r2, r2, #22
    13b8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    13ba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    13bc:	4918      	ldr	r1, [pc, #96]	; (1420 <system_clock_source_dfll_set_config+0x74>)
    13be:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    13c0:	7983      	ldrb	r3, [r0, #6]
    13c2:	79c2      	ldrb	r2, [r0, #7]
    13c4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    13c6:	8842      	ldrh	r2, [r0, #2]
    13c8:	8884      	ldrh	r4, [r0, #4]
    13ca:	4322      	orrs	r2, r4
    13cc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    13ce:	7842      	ldrb	r2, [r0, #1]
    13d0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    13d2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    13d4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    13d6:	7803      	ldrb	r3, [r0, #0]
    13d8:	2b04      	cmp	r3, #4
    13da:	d011      	beq.n	1400 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    13dc:	2b20      	cmp	r3, #32
    13de:	d10e      	bne.n	13fe <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    13e0:	7b03      	ldrb	r3, [r0, #12]
    13e2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    13e4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    13e6:	4313      	orrs	r3, r2
    13e8:	89c2      	ldrh	r2, [r0, #14]
    13ea:	0412      	lsls	r2, r2, #16
    13ec:	490d      	ldr	r1, [pc, #52]	; (1424 <system_clock_source_dfll_set_config+0x78>)
    13ee:	400a      	ands	r2, r1
    13f0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    13f2:	4a0b      	ldr	r2, [pc, #44]	; (1420 <system_clock_source_dfll_set_config+0x74>)
    13f4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    13f6:	6811      	ldr	r1, [r2, #0]
    13f8:	4b0b      	ldr	r3, [pc, #44]	; (1428 <system_clock_source_dfll_set_config+0x7c>)
    13fa:	430b      	orrs	r3, r1
    13fc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    13fe:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1400:	7b03      	ldrb	r3, [r0, #12]
    1402:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1404:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1406:	4313      	orrs	r3, r2
    1408:	89c2      	ldrh	r2, [r0, #14]
    140a:	0412      	lsls	r2, r2, #16
    140c:	4905      	ldr	r1, [pc, #20]	; (1424 <system_clock_source_dfll_set_config+0x78>)
    140e:	400a      	ands	r2, r1
    1410:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1412:	4a03      	ldr	r2, [pc, #12]	; (1420 <system_clock_source_dfll_set_config+0x74>)
    1414:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1416:	6813      	ldr	r3, [r2, #0]
    1418:	2104      	movs	r1, #4
    141a:	430b      	orrs	r3, r1
    141c:	6013      	str	r3, [r2, #0]
    141e:	e7ee      	b.n	13fe <system_clock_source_dfll_set_config+0x52>
    1420:	20000100 	.word	0x20000100
    1424:	03ff0000 	.word	0x03ff0000
    1428:	00000424 	.word	0x00000424

0000142c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    142c:	2808      	cmp	r0, #8
    142e:	d803      	bhi.n	1438 <system_clock_source_enable+0xc>
    1430:	0080      	lsls	r0, r0, #2
    1432:	4b25      	ldr	r3, [pc, #148]	; (14c8 <system_clock_source_enable+0x9c>)
    1434:	581b      	ldr	r3, [r3, r0]
    1436:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1438:	2017      	movs	r0, #23
    143a:	e044      	b.n	14c6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    143c:	4a23      	ldr	r2, [pc, #140]	; (14cc <system_clock_source_enable+0xa0>)
    143e:	6a13      	ldr	r3, [r2, #32]
    1440:	2102      	movs	r1, #2
    1442:	430b      	orrs	r3, r1
    1444:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1446:	2000      	movs	r0, #0
    1448:	e03d      	b.n	14c6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    144a:	4a20      	ldr	r2, [pc, #128]	; (14cc <system_clock_source_enable+0xa0>)
    144c:	6993      	ldr	r3, [r2, #24]
    144e:	2102      	movs	r1, #2
    1450:	430b      	orrs	r3, r1
    1452:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1454:	2000      	movs	r0, #0
		break;
    1456:	e036      	b.n	14c6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1458:	4a1c      	ldr	r2, [pc, #112]	; (14cc <system_clock_source_enable+0xa0>)
    145a:	8a13      	ldrh	r3, [r2, #16]
    145c:	2102      	movs	r1, #2
    145e:	430b      	orrs	r3, r1
    1460:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1462:	2000      	movs	r0, #0
		break;
    1464:	e02f      	b.n	14c6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1466:	4a19      	ldr	r2, [pc, #100]	; (14cc <system_clock_source_enable+0xa0>)
    1468:	8a93      	ldrh	r3, [r2, #20]
    146a:	2102      	movs	r1, #2
    146c:	430b      	orrs	r3, r1
    146e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1470:	2000      	movs	r0, #0
		break;
    1472:	e028      	b.n	14c6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1474:	4916      	ldr	r1, [pc, #88]	; (14d0 <system_clock_source_enable+0xa4>)
    1476:	680b      	ldr	r3, [r1, #0]
    1478:	2202      	movs	r2, #2
    147a:	4313      	orrs	r3, r2
    147c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    147e:	4b13      	ldr	r3, [pc, #76]	; (14cc <system_clock_source_enable+0xa0>)
    1480:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1482:	0019      	movs	r1, r3
    1484:	320e      	adds	r2, #14
    1486:	68cb      	ldr	r3, [r1, #12]
    1488:	421a      	tst	r2, r3
    148a:	d0fc      	beq.n	1486 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    148c:	4a10      	ldr	r2, [pc, #64]	; (14d0 <system_clock_source_enable+0xa4>)
    148e:	6891      	ldr	r1, [r2, #8]
    1490:	4b0e      	ldr	r3, [pc, #56]	; (14cc <system_clock_source_enable+0xa0>)
    1492:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1494:	6852      	ldr	r2, [r2, #4]
    1496:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1498:	2200      	movs	r2, #0
    149a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    149c:	0019      	movs	r1, r3
    149e:	3210      	adds	r2, #16
    14a0:	68cb      	ldr	r3, [r1, #12]
    14a2:	421a      	tst	r2, r3
    14a4:	d0fc      	beq.n	14a0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    14a6:	4b0a      	ldr	r3, [pc, #40]	; (14d0 <system_clock_source_enable+0xa4>)
    14a8:	681b      	ldr	r3, [r3, #0]
    14aa:	b29b      	uxth	r3, r3
    14ac:	4a07      	ldr	r2, [pc, #28]	; (14cc <system_clock_source_enable+0xa0>)
    14ae:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    14b0:	2000      	movs	r0, #0
    14b2:	e008      	b.n	14c6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    14b4:	4905      	ldr	r1, [pc, #20]	; (14cc <system_clock_source_enable+0xa0>)
    14b6:	2244      	movs	r2, #68	; 0x44
    14b8:	5c8b      	ldrb	r3, [r1, r2]
    14ba:	2002      	movs	r0, #2
    14bc:	4303      	orrs	r3, r0
    14be:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    14c0:	2000      	movs	r0, #0
		break;
    14c2:	e000      	b.n	14c6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    14c4:	2000      	movs	r0, #0
}
    14c6:	4770      	bx	lr
    14c8:	0000845c 	.word	0x0000845c
    14cc:	40000800 	.word	0x40000800
    14d0:	20000100 	.word	0x20000100

000014d4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    14d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14d6:	46ce      	mov	lr, r9
    14d8:	4647      	mov	r7, r8
    14da:	b580      	push	{r7, lr}
    14dc:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    14de:	22c2      	movs	r2, #194	; 0xc2
    14e0:	00d2      	lsls	r2, r2, #3
    14e2:	4b50      	ldr	r3, [pc, #320]	; (1624 <system_clock_init+0x150>)
    14e4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    14e6:	4a50      	ldr	r2, [pc, #320]	; (1628 <system_clock_init+0x154>)
    14e8:	6853      	ldr	r3, [r2, #4]
    14ea:	211e      	movs	r1, #30
    14ec:	438b      	bics	r3, r1
    14ee:	391a      	subs	r1, #26
    14f0:	430b      	orrs	r3, r1
    14f2:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    14f4:	2203      	movs	r2, #3
    14f6:	ab01      	add	r3, sp, #4
    14f8:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    14fa:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    14fc:	4d4b      	ldr	r5, [pc, #300]	; (162c <system_clock_init+0x158>)
    14fe:	b2e0      	uxtb	r0, r4
    1500:	a901      	add	r1, sp, #4
    1502:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1504:	3401      	adds	r4, #1
    1506:	2c25      	cmp	r4, #37	; 0x25
    1508:	d1f9      	bne.n	14fe <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    150a:	4d49      	ldr	r5, [pc, #292]	; (1630 <system_clock_init+0x15c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    150c:	682b      	ldr	r3, [r5, #0]
    150e:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1510:	4944      	ldr	r1, [pc, #272]	; (1624 <system_clock_init+0x150>)
    1512:	698a      	ldr	r2, [r1, #24]
    1514:	0e5b      	lsrs	r3, r3, #25
    1516:	041b      	lsls	r3, r3, #16
    1518:	4846      	ldr	r0, [pc, #280]	; (1634 <system_clock_init+0x160>)
    151a:	4002      	ands	r2, r0
    151c:	4313      	orrs	r3, r2
    151e:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    1520:	a80a      	add	r0, sp, #40	; 0x28
    1522:	2301      	movs	r3, #1
    1524:	7083      	strb	r3, [r0, #2]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1526:	2207      	movs	r2, #7
    1528:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    152a:	2400      	movs	r4, #0
    152c:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    152e:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    1530:	7104      	strb	r4, [r0, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1532:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1534:	4b40      	ldr	r3, [pc, #256]	; (1638 <system_clock_init+0x164>)
    1536:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1538:	2004      	movs	r0, #4
    153a:	4b40      	ldr	r3, [pc, #256]	; (163c <system_clock_init+0x168>)
    153c:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    153e:	ab05      	add	r3, sp, #20
    1540:	2200      	movs	r2, #0
    1542:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1544:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1546:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1548:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    154a:	213f      	movs	r1, #63	; 0x3f
    154c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    154e:	393b      	subs	r1, #59	; 0x3b
    1550:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1552:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1554:	682b      	ldr	r3, [r5, #0]
    1556:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1558:	2b3f      	cmp	r3, #63	; 0x3f
    155a:	d060      	beq.n	161e <system_clock_init+0x14a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    155c:	a805      	add	r0, sp, #20
    155e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1560:	2304      	movs	r3, #4
    1562:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1564:	3303      	adds	r3, #3
    1566:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1568:	3338      	adds	r3, #56	; 0x38
    156a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    156c:	4b34      	ldr	r3, [pc, #208]	; (1640 <system_clock_init+0x16c>)
    156e:	4798      	blx	r3
	config->run_in_standby  = false;
    1570:	a804      	add	r0, sp, #16
    1572:	2500      	movs	r5, #0
    1574:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1576:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1578:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    157a:	4b32      	ldr	r3, [pc, #200]	; (1644 <system_clock_init+0x170>)
    157c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    157e:	2006      	movs	r0, #6
    1580:	4f2e      	ldr	r7, [pc, #184]	; (163c <system_clock_init+0x168>)
    1582:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1584:	4b30      	ldr	r3, [pc, #192]	; (1648 <system_clock_init+0x174>)
    1586:	4798      	blx	r3
	config->division_factor    = 1;
    1588:	ac01      	add	r4, sp, #4
    158a:	2601      	movs	r6, #1
    158c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    158e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1590:	2306      	movs	r3, #6
    1592:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1594:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1596:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1598:	0021      	movs	r1, r4
    159a:	2001      	movs	r0, #1
    159c:	4b2b      	ldr	r3, [pc, #172]	; (164c <system_clock_init+0x178>)
    159e:	4699      	mov	r9, r3
    15a0:	4798      	blx	r3
    15a2:	2001      	movs	r0, #1
    15a4:	4b2a      	ldr	r3, [pc, #168]	; (1650 <system_clock_init+0x17c>)
    15a6:	4698      	mov	r8, r3
    15a8:	4798      	blx	r3
	config->high_when_disabled = false;
    15aa:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    15ac:	7265      	strb	r5, [r4, #9]
    15ae:	2304      	movs	r3, #4
    15b0:	7023      	strb	r3, [r4, #0]
    15b2:	2320      	movs	r3, #32
    15b4:	6063      	str	r3, [r4, #4]
    15b6:	7226      	strb	r6, [r4, #8]
    15b8:	0021      	movs	r1, r4
    15ba:	2002      	movs	r0, #2
    15bc:	47c8      	blx	r9
    15be:	2002      	movs	r0, #2
    15c0:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    15c2:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    15c4:	0021      	movs	r1, r4
    15c6:	2000      	movs	r0, #0
    15c8:	4b18      	ldr	r3, [pc, #96]	; (162c <system_clock_init+0x158>)
    15ca:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    15cc:	2000      	movs	r0, #0
    15ce:	4b21      	ldr	r3, [pc, #132]	; (1654 <system_clock_init+0x180>)
    15d0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    15d2:	2007      	movs	r0, #7
    15d4:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    15d6:	4913      	ldr	r1, [pc, #76]	; (1624 <system_clock_init+0x150>)
    15d8:	22d0      	movs	r2, #208	; 0xd0
    15da:	68cb      	ldr	r3, [r1, #12]
    15dc:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    15de:	2bd0      	cmp	r3, #208	; 0xd0
    15e0:	d1fb      	bne.n	15da <system_clock_init+0x106>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    15e2:	4a10      	ldr	r2, [pc, #64]	; (1624 <system_clock_init+0x150>)
    15e4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    15e6:	2180      	movs	r1, #128	; 0x80
    15e8:	430b      	orrs	r3, r1
    15ea:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    15ec:	4a1a      	ldr	r2, [pc, #104]	; (1658 <system_clock_init+0x184>)
    15ee:	2300      	movs	r3, #0
    15f0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    15f2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    15f4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    15f6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    15f8:	a901      	add	r1, sp, #4
    15fa:	2201      	movs	r2, #1
    15fc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    15fe:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1600:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1602:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1604:	3307      	adds	r3, #7
    1606:	700b      	strb	r3, [r1, #0]
    1608:	2000      	movs	r0, #0
    160a:	4b10      	ldr	r3, [pc, #64]	; (164c <system_clock_init+0x178>)
    160c:	4798      	blx	r3
    160e:	2000      	movs	r0, #0
    1610:	4b0f      	ldr	r3, [pc, #60]	; (1650 <system_clock_init+0x17c>)
    1612:	4798      	blx	r3
#endif
}
    1614:	b00d      	add	sp, #52	; 0x34
    1616:	bc0c      	pop	{r2, r3}
    1618:	4690      	mov	r8, r2
    161a:	4699      	mov	r9, r3
    161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    161e:	3b20      	subs	r3, #32
    1620:	e79c      	b.n	155c <system_clock_init+0x88>
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	40000800 	.word	0x40000800
    1628:	41004000 	.word	0x41004000
    162c:	00001895 	.word	0x00001895
    1630:	00806024 	.word	0x00806024
    1634:	ff80ffff 	.word	0xff80ffff
    1638:	00001331 	.word	0x00001331
    163c:	0000142d 	.word	0x0000142d
    1640:	000013ad 	.word	0x000013ad
    1644:	000012f5 	.word	0x000012f5
    1648:	0000165d 	.word	0x0000165d
    164c:	00001681 	.word	0x00001681
    1650:	00001739 	.word	0x00001739
    1654:	00001809 	.word	0x00001809
    1658:	40000400 	.word	0x40000400

0000165c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    165c:	4a06      	ldr	r2, [pc, #24]	; (1678 <system_gclk_init+0x1c>)
    165e:	6993      	ldr	r3, [r2, #24]
    1660:	2108      	movs	r1, #8
    1662:	430b      	orrs	r3, r1
    1664:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1666:	2201      	movs	r2, #1
    1668:	4b04      	ldr	r3, [pc, #16]	; (167c <system_gclk_init+0x20>)
    166a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    166c:	0019      	movs	r1, r3
    166e:	780b      	ldrb	r3, [r1, #0]
    1670:	4213      	tst	r3, r2
    1672:	d1fc      	bne.n	166e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1674:	4770      	bx	lr
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	40000400 	.word	0x40000400
    167c:	40000c00 	.word	0x40000c00

00001680 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1680:	b570      	push	{r4, r5, r6, lr}
    1682:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1684:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1686:	780d      	ldrb	r5, [r1, #0]
    1688:	022d      	lsls	r5, r5, #8
    168a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    168c:	784b      	ldrb	r3, [r1, #1]
    168e:	2b00      	cmp	r3, #0
    1690:	d002      	beq.n	1698 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1692:	2380      	movs	r3, #128	; 0x80
    1694:	02db      	lsls	r3, r3, #11
    1696:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1698:	7a4b      	ldrb	r3, [r1, #9]
    169a:	2b00      	cmp	r3, #0
    169c:	d002      	beq.n	16a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    169e:	2380      	movs	r3, #128	; 0x80
    16a0:	031b      	lsls	r3, r3, #12
    16a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    16a4:	6848      	ldr	r0, [r1, #4]
    16a6:	2801      	cmp	r0, #1
    16a8:	d910      	bls.n	16cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    16aa:	1e43      	subs	r3, r0, #1
    16ac:	4218      	tst	r0, r3
    16ae:	d134      	bne.n	171a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    16b0:	2802      	cmp	r0, #2
    16b2:	d930      	bls.n	1716 <system_gclk_gen_set_config+0x96>
    16b4:	2302      	movs	r3, #2
    16b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    16b8:	3201      	adds	r2, #1
						mask <<= 1) {
    16ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    16bc:	4298      	cmp	r0, r3
    16be:	d8fb      	bhi.n	16b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    16c0:	0212      	lsls	r2, r2, #8
    16c2:	4332      	orrs	r2, r6
    16c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    16c6:	2380      	movs	r3, #128	; 0x80
    16c8:	035b      	lsls	r3, r3, #13
    16ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    16cc:	7a0b      	ldrb	r3, [r1, #8]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d002      	beq.n	16d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    16d2:	2380      	movs	r3, #128	; 0x80
    16d4:	039b      	lsls	r3, r3, #14
    16d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16d8:	4a13      	ldr	r2, [pc, #76]	; (1728 <system_gclk_gen_set_config+0xa8>)
    16da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    16dc:	b25b      	sxtb	r3, r3
    16de:	2b00      	cmp	r3, #0
    16e0:	dbfb      	blt.n	16da <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    16e2:	4b12      	ldr	r3, [pc, #72]	; (172c <system_gclk_gen_set_config+0xac>)
    16e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16e6:	4b12      	ldr	r3, [pc, #72]	; (1730 <system_gclk_gen_set_config+0xb0>)
    16e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16ea:	4a0f      	ldr	r2, [pc, #60]	; (1728 <system_gclk_gen_set_config+0xa8>)
    16ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    16ee:	b25b      	sxtb	r3, r3
    16f0:	2b00      	cmp	r3, #0
    16f2:	dbfb      	blt.n	16ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    16f4:	4b0c      	ldr	r3, [pc, #48]	; (1728 <system_gclk_gen_set_config+0xa8>)
    16f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16f8:	001a      	movs	r2, r3
    16fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    16fc:	b25b      	sxtb	r3, r3
    16fe:	2b00      	cmp	r3, #0
    1700:	dbfb      	blt.n	16fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1702:	4a09      	ldr	r2, [pc, #36]	; (1728 <system_gclk_gen_set_config+0xa8>)
    1704:	6853      	ldr	r3, [r2, #4]
    1706:	2180      	movs	r1, #128	; 0x80
    1708:	0249      	lsls	r1, r1, #9
    170a:	400b      	ands	r3, r1
    170c:	431d      	orrs	r5, r3
    170e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1710:	4b08      	ldr	r3, [pc, #32]	; (1734 <system_gclk_gen_set_config+0xb4>)
    1712:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1714:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1716:	2200      	movs	r2, #0
    1718:	e7d2      	b.n	16c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    171a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    171c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    171e:	2380      	movs	r3, #128	; 0x80
    1720:	029b      	lsls	r3, r3, #10
    1722:	431d      	orrs	r5, r3
    1724:	e7d2      	b.n	16cc <system_gclk_gen_set_config+0x4c>
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	40000c00 	.word	0x40000c00
    172c:	00000181 	.word	0x00000181
    1730:	40000c08 	.word	0x40000c08
    1734:	000001c1 	.word	0x000001c1

00001738 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1738:	b510      	push	{r4, lr}
    173a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    173c:	4a0b      	ldr	r2, [pc, #44]	; (176c <system_gclk_gen_enable+0x34>)
    173e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1740:	b25b      	sxtb	r3, r3
    1742:	2b00      	cmp	r3, #0
    1744:	dbfb      	blt.n	173e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1746:	4b0a      	ldr	r3, [pc, #40]	; (1770 <system_gclk_gen_enable+0x38>)
    1748:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    174a:	4b0a      	ldr	r3, [pc, #40]	; (1774 <system_gclk_gen_enable+0x3c>)
    174c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    174e:	4a07      	ldr	r2, [pc, #28]	; (176c <system_gclk_gen_enable+0x34>)
    1750:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1752:	b25b      	sxtb	r3, r3
    1754:	2b00      	cmp	r3, #0
    1756:	dbfb      	blt.n	1750 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1758:	4a04      	ldr	r2, [pc, #16]	; (176c <system_gclk_gen_enable+0x34>)
    175a:	6851      	ldr	r1, [r2, #4]
    175c:	2380      	movs	r3, #128	; 0x80
    175e:	025b      	lsls	r3, r3, #9
    1760:	430b      	orrs	r3, r1
    1762:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1764:	4b04      	ldr	r3, [pc, #16]	; (1778 <system_gclk_gen_enable+0x40>)
    1766:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1768:	bd10      	pop	{r4, pc}
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	40000c00 	.word	0x40000c00
    1770:	00000181 	.word	0x00000181
    1774:	40000c04 	.word	0x40000c04
    1778:	000001c1 	.word	0x000001c1

0000177c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    177c:	b570      	push	{r4, r5, r6, lr}
    177e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1780:	4a1a      	ldr	r2, [pc, #104]	; (17ec <system_gclk_gen_get_hz+0x70>)
    1782:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1784:	b25b      	sxtb	r3, r3
    1786:	2b00      	cmp	r3, #0
    1788:	dbfb      	blt.n	1782 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    178a:	4b19      	ldr	r3, [pc, #100]	; (17f0 <system_gclk_gen_get_hz+0x74>)
    178c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    178e:	4b19      	ldr	r3, [pc, #100]	; (17f4 <system_gclk_gen_get_hz+0x78>)
    1790:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1792:	4a16      	ldr	r2, [pc, #88]	; (17ec <system_gclk_gen_get_hz+0x70>)
    1794:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1796:	b25b      	sxtb	r3, r3
    1798:	2b00      	cmp	r3, #0
    179a:	dbfb      	blt.n	1794 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    179c:	4e13      	ldr	r6, [pc, #76]	; (17ec <system_gclk_gen_get_hz+0x70>)
    179e:	6870      	ldr	r0, [r6, #4]
    17a0:	04c0      	lsls	r0, r0, #19
    17a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    17a4:	4b14      	ldr	r3, [pc, #80]	; (17f8 <system_gclk_gen_get_hz+0x7c>)
    17a6:	4798      	blx	r3
    17a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    17aa:	4b12      	ldr	r3, [pc, #72]	; (17f4 <system_gclk_gen_get_hz+0x78>)
    17ac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    17ae:	6876      	ldr	r6, [r6, #4]
    17b0:	02f6      	lsls	r6, r6, #11
    17b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    17b4:	4b11      	ldr	r3, [pc, #68]	; (17fc <system_gclk_gen_get_hz+0x80>)
    17b6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17b8:	4a0c      	ldr	r2, [pc, #48]	; (17ec <system_gclk_gen_get_hz+0x70>)
    17ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    17bc:	b25b      	sxtb	r3, r3
    17be:	2b00      	cmp	r3, #0
    17c0:	dbfb      	blt.n	17ba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    17c2:	4b0a      	ldr	r3, [pc, #40]	; (17ec <system_gclk_gen_get_hz+0x70>)
    17c4:	689c      	ldr	r4, [r3, #8]
    17c6:	0224      	lsls	r4, r4, #8
    17c8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    17ca:	4b0d      	ldr	r3, [pc, #52]	; (1800 <system_gclk_gen_get_hz+0x84>)
    17cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    17ce:	2e00      	cmp	r6, #0
    17d0:	d107      	bne.n	17e2 <system_gclk_gen_get_hz+0x66>
    17d2:	2c01      	cmp	r4, #1
    17d4:	d907      	bls.n	17e6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    17d6:	0021      	movs	r1, r4
    17d8:	0028      	movs	r0, r5
    17da:	4b0a      	ldr	r3, [pc, #40]	; (1804 <system_gclk_gen_get_hz+0x88>)
    17dc:	4798      	blx	r3
    17de:	0005      	movs	r5, r0
    17e0:	e001      	b.n	17e6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    17e2:	3401      	adds	r4, #1
    17e4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    17e6:	0028      	movs	r0, r5
    17e8:	bd70      	pop	{r4, r5, r6, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	40000c00 	.word	0x40000c00
    17f0:	00000181 	.word	0x00000181
    17f4:	40000c04 	.word	0x40000c04
    17f8:	00001261 	.word	0x00001261
    17fc:	40000c08 	.word	0x40000c08
    1800:	000001c1 	.word	0x000001c1
    1804:	000071e5 	.word	0x000071e5

00001808 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1808:	b510      	push	{r4, lr}
    180a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    180c:	4b06      	ldr	r3, [pc, #24]	; (1828 <system_gclk_chan_enable+0x20>)
    180e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1810:	4b06      	ldr	r3, [pc, #24]	; (182c <system_gclk_chan_enable+0x24>)
    1812:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1814:	4a06      	ldr	r2, [pc, #24]	; (1830 <system_gclk_chan_enable+0x28>)
    1816:	8853      	ldrh	r3, [r2, #2]
    1818:	2180      	movs	r1, #128	; 0x80
    181a:	01c9      	lsls	r1, r1, #7
    181c:	430b      	orrs	r3, r1
    181e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1820:	4b04      	ldr	r3, [pc, #16]	; (1834 <system_gclk_chan_enable+0x2c>)
    1822:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1824:	bd10      	pop	{r4, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	00000181 	.word	0x00000181
    182c:	40000c02 	.word	0x40000c02
    1830:	40000c00 	.word	0x40000c00
    1834:	000001c1 	.word	0x000001c1

00001838 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1838:	b510      	push	{r4, lr}
    183a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    183c:	4b0f      	ldr	r3, [pc, #60]	; (187c <system_gclk_chan_disable+0x44>)
    183e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1840:	4b0f      	ldr	r3, [pc, #60]	; (1880 <system_gclk_chan_disable+0x48>)
    1842:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1844:	4a0f      	ldr	r2, [pc, #60]	; (1884 <system_gclk_chan_disable+0x4c>)
    1846:	8853      	ldrh	r3, [r2, #2]
    1848:	051b      	lsls	r3, r3, #20
    184a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    184c:	8853      	ldrh	r3, [r2, #2]
    184e:	490e      	ldr	r1, [pc, #56]	; (1888 <system_gclk_chan_disable+0x50>)
    1850:	400b      	ands	r3, r1
    1852:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1854:	8853      	ldrh	r3, [r2, #2]
    1856:	490d      	ldr	r1, [pc, #52]	; (188c <system_gclk_chan_disable+0x54>)
    1858:	400b      	ands	r3, r1
    185a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    185c:	0011      	movs	r1, r2
    185e:	2280      	movs	r2, #128	; 0x80
    1860:	01d2      	lsls	r2, r2, #7
    1862:	884b      	ldrh	r3, [r1, #2]
    1864:	4213      	tst	r3, r2
    1866:	d1fc      	bne.n	1862 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1868:	4906      	ldr	r1, [pc, #24]	; (1884 <system_gclk_chan_disable+0x4c>)
    186a:	884a      	ldrh	r2, [r1, #2]
    186c:	0203      	lsls	r3, r0, #8
    186e:	4806      	ldr	r0, [pc, #24]	; (1888 <system_gclk_chan_disable+0x50>)
    1870:	4002      	ands	r2, r0
    1872:	4313      	orrs	r3, r2
    1874:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1876:	4b06      	ldr	r3, [pc, #24]	; (1890 <system_gclk_chan_disable+0x58>)
    1878:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    187a:	bd10      	pop	{r4, pc}
    187c:	00000181 	.word	0x00000181
    1880:	40000c02 	.word	0x40000c02
    1884:	40000c00 	.word	0x40000c00
    1888:	fffff0ff 	.word	0xfffff0ff
    188c:	ffffbfff 	.word	0xffffbfff
    1890:	000001c1 	.word	0x000001c1

00001894 <system_gclk_chan_set_config>:
{
    1894:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1896:	780c      	ldrb	r4, [r1, #0]
    1898:	0224      	lsls	r4, r4, #8
    189a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    189c:	4b02      	ldr	r3, [pc, #8]	; (18a8 <system_gclk_chan_set_config+0x14>)
    189e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    18a0:	b2a4      	uxth	r4, r4
    18a2:	4b02      	ldr	r3, [pc, #8]	; (18ac <system_gclk_chan_set_config+0x18>)
    18a4:	805c      	strh	r4, [r3, #2]
}
    18a6:	bd10      	pop	{r4, pc}
    18a8:	00001839 	.word	0x00001839
    18ac:	40000c00 	.word	0x40000c00

000018b0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    18b0:	b510      	push	{r4, lr}
    18b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    18b4:	4b06      	ldr	r3, [pc, #24]	; (18d0 <system_gclk_chan_get_hz+0x20>)
    18b6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    18b8:	4b06      	ldr	r3, [pc, #24]	; (18d4 <system_gclk_chan_get_hz+0x24>)
    18ba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    18bc:	4b06      	ldr	r3, [pc, #24]	; (18d8 <system_gclk_chan_get_hz+0x28>)
    18be:	885c      	ldrh	r4, [r3, #2]
    18c0:	0524      	lsls	r4, r4, #20
    18c2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    18c4:	4b05      	ldr	r3, [pc, #20]	; (18dc <system_gclk_chan_get_hz+0x2c>)
    18c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    18c8:	0020      	movs	r0, r4
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <system_gclk_chan_get_hz+0x30>)
    18cc:	4798      	blx	r3
}
    18ce:	bd10      	pop	{r4, pc}
    18d0:	00000181 	.word	0x00000181
    18d4:	40000c02 	.word	0x40000c02
    18d8:	40000c00 	.word	0x40000c00
    18dc:	000001c1 	.word	0x000001c1
    18e0:	0000177d 	.word	0x0000177d

000018e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    18e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    18e6:	78d3      	ldrb	r3, [r2, #3]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d135      	bne.n	1958 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    18ec:	7813      	ldrb	r3, [r2, #0]
    18ee:	2b80      	cmp	r3, #128	; 0x80
    18f0:	d029      	beq.n	1946 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    18f2:	061b      	lsls	r3, r3, #24
    18f4:	2480      	movs	r4, #128	; 0x80
    18f6:	0264      	lsls	r4, r4, #9
    18f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    18fa:	7854      	ldrb	r4, [r2, #1]
    18fc:	2502      	movs	r5, #2
    18fe:	43ac      	bics	r4, r5
    1900:	d106      	bne.n	1910 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1902:	7894      	ldrb	r4, [r2, #2]
    1904:	2c00      	cmp	r4, #0
    1906:	d120      	bne.n	194a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1908:	2480      	movs	r4, #128	; 0x80
    190a:	02a4      	lsls	r4, r4, #10
    190c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    190e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1910:	7854      	ldrb	r4, [r2, #1]
    1912:	3c01      	subs	r4, #1
    1914:	2c01      	cmp	r4, #1
    1916:	d91c      	bls.n	1952 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1918:	040d      	lsls	r5, r1, #16
    191a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    191c:	24a0      	movs	r4, #160	; 0xa0
    191e:	05e4      	lsls	r4, r4, #23
    1920:	432c      	orrs	r4, r5
    1922:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1924:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1926:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1928:	24d0      	movs	r4, #208	; 0xd0
    192a:	0624      	lsls	r4, r4, #24
    192c:	432c      	orrs	r4, r5
    192e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1930:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1932:	78d4      	ldrb	r4, [r2, #3]
    1934:	2c00      	cmp	r4, #0
    1936:	d122      	bne.n	197e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1938:	035b      	lsls	r3, r3, #13
    193a:	d51c      	bpl.n	1976 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    193c:	7893      	ldrb	r3, [r2, #2]
    193e:	2b01      	cmp	r3, #1
    1940:	d01e      	beq.n	1980 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1942:	6141      	str	r1, [r0, #20]
    1944:	e017      	b.n	1976 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1946:	2300      	movs	r3, #0
    1948:	e7d7      	b.n	18fa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    194a:	24c0      	movs	r4, #192	; 0xc0
    194c:	02e4      	lsls	r4, r4, #11
    194e:	4323      	orrs	r3, r4
    1950:	e7dd      	b.n	190e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1952:	4c0d      	ldr	r4, [pc, #52]	; (1988 <_system_pinmux_config+0xa4>)
    1954:	4023      	ands	r3, r4
    1956:	e7df      	b.n	1918 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1958:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    195a:	040c      	lsls	r4, r1, #16
    195c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    195e:	23a0      	movs	r3, #160	; 0xa0
    1960:	05db      	lsls	r3, r3, #23
    1962:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1964:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1966:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1968:	23d0      	movs	r3, #208	; 0xd0
    196a:	061b      	lsls	r3, r3, #24
    196c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    196e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1970:	78d3      	ldrb	r3, [r2, #3]
    1972:	2b00      	cmp	r3, #0
    1974:	d103      	bne.n	197e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1976:	7853      	ldrb	r3, [r2, #1]
    1978:	3b01      	subs	r3, #1
    197a:	2b01      	cmp	r3, #1
    197c:	d902      	bls.n	1984 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    197e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1980:	6181      	str	r1, [r0, #24]
    1982:	e7f8      	b.n	1976 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1984:	6081      	str	r1, [r0, #8]
}
    1986:	e7fa      	b.n	197e <_system_pinmux_config+0x9a>
    1988:	fffbffff 	.word	0xfffbffff

0000198c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    198c:	b510      	push	{r4, lr}
    198e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1990:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1992:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1994:	2900      	cmp	r1, #0
    1996:	d104      	bne.n	19a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1998:	0943      	lsrs	r3, r0, #5
    199a:	01db      	lsls	r3, r3, #7
    199c:	4905      	ldr	r1, [pc, #20]	; (19b4 <system_pinmux_pin_set_config+0x28>)
    199e:	468c      	mov	ip, r1
    19a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    19a2:	241f      	movs	r4, #31
    19a4:	4020      	ands	r0, r4
    19a6:	2101      	movs	r1, #1
    19a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    19aa:	0018      	movs	r0, r3
    19ac:	4b02      	ldr	r3, [pc, #8]	; (19b8 <system_pinmux_pin_set_config+0x2c>)
    19ae:	4798      	blx	r3
}
    19b0:	bd10      	pop	{r4, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	41004400 	.word	0x41004400
    19b8:	000018e5 	.word	0x000018e5

000019bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    19bc:	4770      	bx	lr
	...

000019c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    19c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <system_init+0x18>)
    19c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <system_init+0x1c>)
    19c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    19ca:	4b05      	ldr	r3, [pc, #20]	; (19e0 <system_init+0x20>)
    19cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    19ce:	4b05      	ldr	r3, [pc, #20]	; (19e4 <system_init+0x24>)
    19d0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    19d2:	4b05      	ldr	r3, [pc, #20]	; (19e8 <system_init+0x28>)
    19d4:	4798      	blx	r3
}
    19d6:	bd10      	pop	{r4, pc}
    19d8:	000014d5 	.word	0x000014d5
    19dc:	000001f1 	.word	0x000001f1
    19e0:	000019bd 	.word	0x000019bd
    19e4:	00000339 	.word	0x00000339
    19e8:	000019bd 	.word	0x000019bd

000019ec <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    19ec:	1c93      	adds	r3, r2, #2
    19ee:	009b      	lsls	r3, r3, #2
    19f0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    19f2:	2a02      	cmp	r2, #2
    19f4:	d009      	beq.n	1a0a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    19f6:	2a03      	cmp	r2, #3
    19f8:	d00c      	beq.n	1a14 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    19fa:	2301      	movs	r3, #1
    19fc:	4093      	lsls	r3, r2
    19fe:	001a      	movs	r2, r3
    1a00:	7e03      	ldrb	r3, [r0, #24]
    1a02:	4313      	orrs	r3, r2
    1a04:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1a06:	2000      	movs	r0, #0
    1a08:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1a0a:	7e03      	ldrb	r3, [r0, #24]
    1a0c:	2210      	movs	r2, #16
    1a0e:	4313      	orrs	r3, r2
    1a10:	7603      	strb	r3, [r0, #24]
    1a12:	e7f8      	b.n	1a06 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1a14:	7e03      	ldrb	r3, [r0, #24]
    1a16:	2220      	movs	r2, #32
    1a18:	4313      	orrs	r3, r2
    1a1a:	7603      	strb	r3, [r0, #24]
    1a1c:	e7f3      	b.n	1a06 <tc_register_callback+0x1a>
	...

00001a20 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1a20:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1a22:	0080      	lsls	r0, r0, #2
    1a24:	4b16      	ldr	r3, [pc, #88]	; (1a80 <_tc_interrupt_handler+0x60>)
    1a26:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1a28:	6823      	ldr	r3, [r4, #0]
    1a2a:	7b9d      	ldrb	r5, [r3, #14]
    1a2c:	7e22      	ldrb	r2, [r4, #24]
    1a2e:	7e63      	ldrb	r3, [r4, #25]
    1a30:	4013      	ands	r3, r2
    1a32:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1a34:	07eb      	lsls	r3, r5, #31
    1a36:	d406      	bmi.n	1a46 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1a38:	07ab      	lsls	r3, r5, #30
    1a3a:	d40b      	bmi.n	1a54 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1a3c:	06eb      	lsls	r3, r5, #27
    1a3e:	d410      	bmi.n	1a62 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1a40:	06ab      	lsls	r3, r5, #26
    1a42:	d415      	bmi.n	1a70 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1a44:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1a46:	0020      	movs	r0, r4
    1a48:	68a3      	ldr	r3, [r4, #8]
    1a4a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1a4c:	2301      	movs	r3, #1
    1a4e:	6822      	ldr	r2, [r4, #0]
    1a50:	7393      	strb	r3, [r2, #14]
    1a52:	e7f1      	b.n	1a38 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1a54:	0020      	movs	r0, r4
    1a56:	68e3      	ldr	r3, [r4, #12]
    1a58:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1a5a:	2302      	movs	r3, #2
    1a5c:	6822      	ldr	r2, [r4, #0]
    1a5e:	7393      	strb	r3, [r2, #14]
    1a60:	e7ec      	b.n	1a3c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1a62:	0020      	movs	r0, r4
    1a64:	6923      	ldr	r3, [r4, #16]
    1a66:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1a68:	2310      	movs	r3, #16
    1a6a:	6822      	ldr	r2, [r4, #0]
    1a6c:	7393      	strb	r3, [r2, #14]
    1a6e:	e7e7      	b.n	1a40 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1a70:	0020      	movs	r0, r4
    1a72:	6963      	ldr	r3, [r4, #20]
    1a74:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1a76:	6823      	ldr	r3, [r4, #0]
    1a78:	2220      	movs	r2, #32
    1a7a:	739a      	strb	r2, [r3, #14]
}
    1a7c:	e7e2      	b.n	1a44 <_tc_interrupt_handler+0x24>
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	200003f8 	.word	0x200003f8

00001a84 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1a84:	b510      	push	{r4, lr}
    1a86:	2000      	movs	r0, #0
    1a88:	4b01      	ldr	r3, [pc, #4]	; (1a90 <TC3_Handler+0xc>)
    1a8a:	4798      	blx	r3
    1a8c:	bd10      	pop	{r4, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	00001a21 	.word	0x00001a21

00001a94 <TC4_Handler>:
    1a94:	b510      	push	{r4, lr}
    1a96:	2001      	movs	r0, #1
    1a98:	4b01      	ldr	r3, [pc, #4]	; (1aa0 <TC4_Handler+0xc>)
    1a9a:	4798      	blx	r3
    1a9c:	bd10      	pop	{r4, pc}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	00001a21 	.word	0x00001a21

00001aa4 <TC5_Handler>:
    1aa4:	b510      	push	{r4, lr}
    1aa6:	2002      	movs	r0, #2
    1aa8:	4b01      	ldr	r3, [pc, #4]	; (1ab0 <TC5_Handler+0xc>)
    1aaa:	4798      	blx	r3
    1aac:	bd10      	pop	{r4, pc}
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	00001a21 	.word	0x00001a21

00001ab4 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1ab4:	b530      	push	{r4, r5, lr}
    1ab6:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1ab8:	aa01      	add	r2, sp, #4
    1aba:	4b0b      	ldr	r3, [pc, #44]	; (1ae8 <_tc_get_inst_index+0x34>)
    1abc:	cb32      	ldmia	r3!, {r1, r4, r5}
    1abe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1ac0:	9b01      	ldr	r3, [sp, #4]
    1ac2:	4298      	cmp	r0, r3
    1ac4:	d00d      	beq.n	1ae2 <_tc_get_inst_index+0x2e>
    1ac6:	9b02      	ldr	r3, [sp, #8]
    1ac8:	4298      	cmp	r0, r3
    1aca:	d008      	beq.n	1ade <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1acc:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1ace:	9a03      	ldr	r2, [sp, #12]
    1ad0:	4282      	cmp	r2, r0
    1ad2:	d002      	beq.n	1ada <_tc_get_inst_index+0x26>
}
    1ad4:	0018      	movs	r0, r3
    1ad6:	b005      	add	sp, #20
    1ad8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1ada:	3302      	adds	r3, #2
    1adc:	e002      	b.n	1ae4 <_tc_get_inst_index+0x30>
    1ade:	2301      	movs	r3, #1
    1ae0:	e000      	b.n	1ae4 <_tc_get_inst_index+0x30>
    1ae2:	2300      	movs	r3, #0
			return i;
    1ae4:	b2db      	uxtb	r3, r3
    1ae6:	e7f5      	b.n	1ad4 <_tc_get_inst_index+0x20>
    1ae8:	00008480 	.word	0x00008480

00001aec <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aee:	b087      	sub	sp, #28
    1af0:	0004      	movs	r4, r0
    1af2:	000d      	movs	r5, r1
    1af4:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1af6:	0008      	movs	r0, r1
    1af8:	4b85      	ldr	r3, [pc, #532]	; (1d10 <tc_init+0x224>)
    1afa:	4798      	blx	r3
    1afc:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1afe:	ab05      	add	r3, sp, #20
    1b00:	221b      	movs	r2, #27
    1b02:	701a      	strb	r2, [r3, #0]
    1b04:	3201      	adds	r2, #1
    1b06:	705a      	strb	r2, [r3, #1]
    1b08:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1b0a:	ab03      	add	r3, sp, #12
    1b0c:	2280      	movs	r2, #128	; 0x80
    1b0e:	0112      	lsls	r2, r2, #4
    1b10:	801a      	strh	r2, [r3, #0]
    1b12:	2280      	movs	r2, #128	; 0x80
    1b14:	0152      	lsls	r2, r2, #5
    1b16:	805a      	strh	r2, [r3, #2]
    1b18:	2280      	movs	r2, #128	; 0x80
    1b1a:	0192      	lsls	r2, r2, #6
    1b1c:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1b1e:	2300      	movs	r3, #0
    1b20:	60a3      	str	r3, [r4, #8]
    1b22:	60e3      	str	r3, [r4, #12]
    1b24:	6123      	str	r3, [r4, #16]
    1b26:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1b28:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1b2a:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1b2c:	0082      	lsls	r2, r0, #2
    1b2e:	4b79      	ldr	r3, [pc, #484]	; (1d14 <tc_init+0x228>)
    1b30:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1b32:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1b34:	78b3      	ldrb	r3, [r6, #2]
    1b36:	2b08      	cmp	r3, #8
    1b38:	d006      	beq.n	1b48 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1b3a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1b3c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1b3e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1b40:	07db      	lsls	r3, r3, #31
    1b42:	d505      	bpl.n	1b50 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1b44:	b007      	add	sp, #28
    1b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1b48:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1b4a:	07fa      	lsls	r2, r7, #31
    1b4c:	d5fa      	bpl.n	1b44 <tc_init+0x58>
    1b4e:	e7f4      	b.n	1b3a <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1b50:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1b52:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1b54:	06db      	lsls	r3, r3, #27
    1b56:	d4f5      	bmi.n	1b44 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1b58:	882b      	ldrh	r3, [r5, #0]
    1b5a:	079b      	lsls	r3, r3, #30
    1b5c:	d4f2      	bmi.n	1b44 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1b5e:	7c33      	ldrb	r3, [r6, #16]
    1b60:	2b00      	cmp	r3, #0
    1b62:	d179      	bne.n	1c58 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    1b64:	7f33      	ldrb	r3, [r6, #28]
    1b66:	2b00      	cmp	r3, #0
    1b68:	d000      	beq.n	1b6c <tc_init+0x80>
    1b6a:	e081      	b.n	1c70 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    1b6c:	496a      	ldr	r1, [pc, #424]	; (1d18 <tc_init+0x22c>)
    1b6e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1b70:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1b72:	ab03      	add	r3, sp, #12
    1b74:	5ad3      	ldrh	r3, [r2, r3]
    1b76:	4303      	orrs	r3, r0
    1b78:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1b7a:	78b3      	ldrb	r3, [r6, #2]
    1b7c:	2b08      	cmp	r3, #8
    1b7e:	d100      	bne.n	1b82 <tc_init+0x96>
    1b80:	e086      	b.n	1c90 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    1b82:	a901      	add	r1, sp, #4
    1b84:	7833      	ldrb	r3, [r6, #0]
    1b86:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1b88:	ab05      	add	r3, sp, #20
    1b8a:	5ddf      	ldrb	r7, [r3, r7]
    1b8c:	0038      	movs	r0, r7
    1b8e:	4b63      	ldr	r3, [pc, #396]	; (1d1c <tc_init+0x230>)
    1b90:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1b92:	0038      	movs	r0, r7
    1b94:	4b62      	ldr	r3, [pc, #392]	; (1d20 <tc_init+0x234>)
    1b96:	4798      	blx	r3
	ctrla_tmp =
    1b98:	8931      	ldrh	r1, [r6, #8]
    1b9a:	88b3      	ldrh	r3, [r6, #4]
    1b9c:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1b9e:	78b1      	ldrb	r1, [r6, #2]
    1ba0:	79b2      	ldrb	r2, [r6, #6]
    1ba2:	4311      	orrs	r1, r2
	ctrla_tmp =
    1ba4:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1ba6:	7873      	ldrb	r3, [r6, #1]
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d002      	beq.n	1bb2 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1bac:	2380      	movs	r3, #128	; 0x80
    1bae:	011b      	lsls	r3, r3, #4
    1bb0:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bb2:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bb4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1bb6:	b25b      	sxtb	r3, r3
    1bb8:	2b00      	cmp	r3, #0
    1bba:	dbfb      	blt.n	1bb4 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1bbc:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1bbe:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1bc0:	1e4b      	subs	r3, r1, #1
    1bc2:	4199      	sbcs	r1, r3
    1bc4:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1bc6:	7bb3      	ldrb	r3, [r6, #14]
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d001      	beq.n	1bd0 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1bcc:	2301      	movs	r3, #1
    1bce:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bd0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bd2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1bd4:	b25b      	sxtb	r3, r3
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	dbfb      	blt.n	1bd2 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1bda:	23ff      	movs	r3, #255	; 0xff
    1bdc:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1bde:	2900      	cmp	r1, #0
    1be0:	d005      	beq.n	1bee <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1be2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1be4:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1be6:	b25b      	sxtb	r3, r3
    1be8:	2b00      	cmp	r3, #0
    1bea:	dbfb      	blt.n	1be4 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1bec:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1bee:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1bf0:	7af3      	ldrb	r3, [r6, #11]
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d001      	beq.n	1bfa <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1bf6:	2310      	movs	r3, #16
    1bf8:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1bfa:	7b33      	ldrb	r3, [r6, #12]
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d001      	beq.n	1c04 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1c00:	2320      	movs	r3, #32
    1c02:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c04:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c06:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1c08:	b25b      	sxtb	r3, r3
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	dbfb      	blt.n	1c06 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1c0e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c10:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c12:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1c14:	b25b      	sxtb	r3, r3
    1c16:	2b00      	cmp	r3, #0
    1c18:	dbfb      	blt.n	1c12 <tc_init+0x126>
	switch (module_inst->counter_size) {
    1c1a:	7923      	ldrb	r3, [r4, #4]
    1c1c:	2b04      	cmp	r3, #4
    1c1e:	d03f      	beq.n	1ca0 <tc_init+0x1b4>
    1c20:	2b08      	cmp	r3, #8
    1c22:	d05e      	beq.n	1ce2 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1c24:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1c26:	2b00      	cmp	r3, #0
    1c28:	d000      	beq.n	1c2c <tc_init+0x140>
    1c2a:	e78b      	b.n	1b44 <tc_init+0x58>
    1c2c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1c2e:	b25b      	sxtb	r3, r3
    1c30:	2b00      	cmp	r3, #0
    1c32:	dbfb      	blt.n	1c2c <tc_init+0x140>
				= config->counter_16_bit.value;
    1c34:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1c36:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c3a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1c3c:	b25b      	sxtb	r3, r3
    1c3e:	2b00      	cmp	r3, #0
    1c40:	dbfb      	blt.n	1c3a <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1c42:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1c44:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c46:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c48:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1c4a:	b25b      	sxtb	r3, r3
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	dbfb      	blt.n	1c48 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1c50:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1c52:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1c54:	2000      	movs	r0, #0
    1c56:	e775      	b.n	1b44 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1c58:	a902      	add	r1, sp, #8
    1c5a:	2301      	movs	r3, #1
    1c5c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1c5e:	2200      	movs	r2, #0
    1c60:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1c62:	7e32      	ldrb	r2, [r6, #24]
    1c64:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1c66:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1c68:	7d30      	ldrb	r0, [r6, #20]
    1c6a:	4b2e      	ldr	r3, [pc, #184]	; (1d24 <tc_init+0x238>)
    1c6c:	4798      	blx	r3
    1c6e:	e779      	b.n	1b64 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1c70:	a902      	add	r1, sp, #8
    1c72:	2301      	movs	r3, #1
    1c74:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1c76:	2200      	movs	r2, #0
    1c78:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1c7a:	3224      	adds	r2, #36	; 0x24
    1c7c:	18b2      	adds	r2, r6, r2
    1c7e:	7812      	ldrb	r2, [r2, #0]
    1c80:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1c82:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1c84:	331f      	adds	r3, #31
    1c86:	18f3      	adds	r3, r6, r3
    1c88:	7818      	ldrb	r0, [r3, #0]
    1c8a:	4b26      	ldr	r3, [pc, #152]	; (1d24 <tc_init+0x238>)
    1c8c:	4798      	blx	r3
    1c8e:	e76d      	b.n	1b6c <tc_init+0x80>
    1c90:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1c92:	1c7a      	adds	r2, r7, #1
    1c94:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1c96:	ab03      	add	r3, sp, #12
    1c98:	5ad3      	ldrh	r3, [r2, r3]
    1c9a:	4303      	orrs	r3, r0
    1c9c:	620b      	str	r3, [r1, #32]
    1c9e:	e770      	b.n	1b82 <tc_init+0x96>
    1ca0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ca2:	b25b      	sxtb	r3, r3
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	dbfb      	blt.n	1ca0 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1ca8:	2328      	movs	r3, #40	; 0x28
    1caa:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1cac:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cb0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1cb2:	b25b      	sxtb	r3, r3
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	dbfb      	blt.n	1cb0 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1cb8:	2329      	movs	r3, #41	; 0x29
    1cba:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1cbc:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cbe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cc0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1cc2:	b25b      	sxtb	r3, r3
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	dbfb      	blt.n	1cc0 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1cc8:	232a      	movs	r3, #42	; 0x2a
    1cca:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1ccc:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cce:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cd0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1cd2:	b25b      	sxtb	r3, r3
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	dbfb      	blt.n	1cd0 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1cd8:	232b      	movs	r3, #43	; 0x2b
    1cda:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1cdc:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1cde:	2000      	movs	r0, #0
    1ce0:	e730      	b.n	1b44 <tc_init+0x58>
    1ce2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ce4:	b25b      	sxtb	r3, r3
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	dbfb      	blt.n	1ce2 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1cea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1cec:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cee:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cf0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1cf2:	b25b      	sxtb	r3, r3
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	dbfb      	blt.n	1cf0 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1cf8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1cfa:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cfc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cfe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1d00:	b25b      	sxtb	r3, r3
    1d02:	2b00      	cmp	r3, #0
    1d04:	dbfb      	blt.n	1cfe <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1d06:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1d08:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1d0a:	2000      	movs	r0, #0
    1d0c:	e71a      	b.n	1b44 <tc_init+0x58>
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	00001ab5 	.word	0x00001ab5
    1d14:	200003f8 	.word	0x200003f8
    1d18:	40000400 	.word	0x40000400
    1d1c:	00001895 	.word	0x00001895
    1d20:	00001809 	.word	0x00001809
    1d24:	0000198d 	.word	0x0000198d

00001d28 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1d28:	6802      	ldr	r2, [r0, #0]
    1d2a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1d2c:	b25b      	sxtb	r3, r3
    1d2e:	2b00      	cmp	r3, #0
    1d30:	dbfb      	blt.n	1d2a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1d32:	7903      	ldrb	r3, [r0, #4]
    1d34:	2b04      	cmp	r3, #4
    1d36:	d005      	beq.n	1d44 <tc_get_count_value+0x1c>
    1d38:	2b08      	cmp	r3, #8
    1d3a:	d009      	beq.n	1d50 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1d3c:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d003      	beq.n	1d4a <tc_get_count_value+0x22>
}
    1d42:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1d44:	7c10      	ldrb	r0, [r2, #16]
    1d46:	b2c0      	uxtb	r0, r0
    1d48:	e7fb      	b.n	1d42 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1d4a:	8a10      	ldrh	r0, [r2, #16]
    1d4c:	b280      	uxth	r0, r0
    1d4e:	e7f8      	b.n	1d42 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    1d50:	6910      	ldr	r0, [r2, #16]
    1d52:	e7f6      	b.n	1d42 <tc_get_count_value+0x1a>

00001d54 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1d54:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1d56:	6804      	ldr	r4, [r0, #0]
    1d58:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1d5a:	b25b      	sxtb	r3, r3
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	dbfb      	blt.n	1d58 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1d60:	7903      	ldrb	r3, [r0, #4]
    1d62:	2b04      	cmp	r3, #4
    1d64:	d005      	beq.n	1d72 <tc_set_compare_value+0x1e>
    1d66:	2b08      	cmp	r3, #8
    1d68:	d014      	beq.n	1d94 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1d6a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d008      	beq.n	1d82 <tc_set_compare_value+0x2e>
}
    1d70:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1d72:	2017      	movs	r0, #23
			if (channel_index <
    1d74:	2901      	cmp	r1, #1
    1d76:	d8fb      	bhi.n	1d70 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    1d78:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1d7a:	1861      	adds	r1, r4, r1
    1d7c:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1d7e:	2000      	movs	r0, #0
    1d80:	e7f6      	b.n	1d70 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1d82:	2017      	movs	r0, #23
			if (channel_index <
    1d84:	2901      	cmp	r1, #1
    1d86:	d8f3      	bhi.n	1d70 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    1d88:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1d8a:	310c      	adds	r1, #12
    1d8c:	0049      	lsls	r1, r1, #1
    1d8e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    1d90:	2000      	movs	r0, #0
    1d92:	e7ed      	b.n	1d70 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1d94:	2017      	movs	r0, #23
			if (channel_index <
    1d96:	2901      	cmp	r1, #1
    1d98:	d8ea      	bhi.n	1d70 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    1d9a:	3106      	adds	r1, #6
    1d9c:	0089      	lsls	r1, r1, #2
    1d9e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    1da0:	2000      	movs	r0, #0
    1da2:	e7e5      	b.n	1d70 <tc_set_compare_value+0x1c>

00001da4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1da4:	e7fe      	b.n	1da4 <Dummy_Handler>
	...

00001da8 <Reset_Handler>:
{
    1da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1daa:	4a2a      	ldr	r2, [pc, #168]	; (1e54 <Reset_Handler+0xac>)
    1dac:	4b2a      	ldr	r3, [pc, #168]	; (1e58 <Reset_Handler+0xb0>)
    1dae:	429a      	cmp	r2, r3
    1db0:	d011      	beq.n	1dd6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1db2:	001a      	movs	r2, r3
    1db4:	4b29      	ldr	r3, [pc, #164]	; (1e5c <Reset_Handler+0xb4>)
    1db6:	429a      	cmp	r2, r3
    1db8:	d20d      	bcs.n	1dd6 <Reset_Handler+0x2e>
    1dba:	4a29      	ldr	r2, [pc, #164]	; (1e60 <Reset_Handler+0xb8>)
    1dbc:	3303      	adds	r3, #3
    1dbe:	1a9b      	subs	r3, r3, r2
    1dc0:	089b      	lsrs	r3, r3, #2
    1dc2:	3301      	adds	r3, #1
    1dc4:	009b      	lsls	r3, r3, #2
    1dc6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1dc8:	4823      	ldr	r0, [pc, #140]	; (1e58 <Reset_Handler+0xb0>)
    1dca:	4922      	ldr	r1, [pc, #136]	; (1e54 <Reset_Handler+0xac>)
    1dcc:	588c      	ldr	r4, [r1, r2]
    1dce:	5084      	str	r4, [r0, r2]
    1dd0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1dd2:	429a      	cmp	r2, r3
    1dd4:	d1fa      	bne.n	1dcc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1dd6:	4a23      	ldr	r2, [pc, #140]	; (1e64 <Reset_Handler+0xbc>)
    1dd8:	4b23      	ldr	r3, [pc, #140]	; (1e68 <Reset_Handler+0xc0>)
    1dda:	429a      	cmp	r2, r3
    1ddc:	d20a      	bcs.n	1df4 <Reset_Handler+0x4c>
    1dde:	43d3      	mvns	r3, r2
    1de0:	4921      	ldr	r1, [pc, #132]	; (1e68 <Reset_Handler+0xc0>)
    1de2:	185b      	adds	r3, r3, r1
    1de4:	2103      	movs	r1, #3
    1de6:	438b      	bics	r3, r1
    1de8:	3304      	adds	r3, #4
    1dea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1dec:	2100      	movs	r1, #0
    1dee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1df0:	4293      	cmp	r3, r2
    1df2:	d1fc      	bne.n	1dee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1df4:	4a1d      	ldr	r2, [pc, #116]	; (1e6c <Reset_Handler+0xc4>)
    1df6:	21ff      	movs	r1, #255	; 0xff
    1df8:	4b1d      	ldr	r3, [pc, #116]	; (1e70 <Reset_Handler+0xc8>)
    1dfa:	438b      	bics	r3, r1
    1dfc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1dfe:	39fd      	subs	r1, #253	; 0xfd
    1e00:	2390      	movs	r3, #144	; 0x90
    1e02:	005b      	lsls	r3, r3, #1
    1e04:	4a1b      	ldr	r2, [pc, #108]	; (1e74 <Reset_Handler+0xcc>)
    1e06:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e08:	4a1b      	ldr	r2, [pc, #108]	; (1e78 <Reset_Handler+0xd0>)
    1e0a:	78d3      	ldrb	r3, [r2, #3]
    1e0c:	2503      	movs	r5, #3
    1e0e:	43ab      	bics	r3, r5
    1e10:	2402      	movs	r4, #2
    1e12:	4323      	orrs	r3, r4
    1e14:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e16:	78d3      	ldrb	r3, [r2, #3]
    1e18:	270c      	movs	r7, #12
    1e1a:	43bb      	bics	r3, r7
    1e1c:	2608      	movs	r6, #8
    1e1e:	4333      	orrs	r3, r6
    1e20:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e22:	4b16      	ldr	r3, [pc, #88]	; (1e7c <Reset_Handler+0xd4>)
    1e24:	7b98      	ldrb	r0, [r3, #14]
    1e26:	2230      	movs	r2, #48	; 0x30
    1e28:	4390      	bics	r0, r2
    1e2a:	2220      	movs	r2, #32
    1e2c:	4310      	orrs	r0, r2
    1e2e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e30:	7b99      	ldrb	r1, [r3, #14]
    1e32:	43b9      	bics	r1, r7
    1e34:	4331      	orrs	r1, r6
    1e36:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e38:	7b9a      	ldrb	r2, [r3, #14]
    1e3a:	43aa      	bics	r2, r5
    1e3c:	4322      	orrs	r2, r4
    1e3e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e40:	4a0f      	ldr	r2, [pc, #60]	; (1e80 <Reset_Handler+0xd8>)
    1e42:	6853      	ldr	r3, [r2, #4]
    1e44:	2180      	movs	r1, #128	; 0x80
    1e46:	430b      	orrs	r3, r1
    1e48:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e4a:	4b0e      	ldr	r3, [pc, #56]	; (1e84 <Reset_Handler+0xdc>)
    1e4c:	4798      	blx	r3
        main();
    1e4e:	4b0e      	ldr	r3, [pc, #56]	; (1e88 <Reset_Handler+0xe0>)
    1e50:	4798      	blx	r3
    1e52:	e7fe      	b.n	1e52 <Reset_Handler+0xaa>
    1e54:	0000857c 	.word	0x0000857c
    1e58:	20000000 	.word	0x20000000
    1e5c:	200000bc 	.word	0x200000bc
    1e60:	20000004 	.word	0x20000004
    1e64:	200000c0 	.word	0x200000c0
    1e68:	200013f8 	.word	0x200013f8
    1e6c:	e000ed00 	.word	0xe000ed00
    1e70:	00000000 	.word	0x00000000
    1e74:	41007000 	.word	0x41007000
    1e78:	41005000 	.word	0x41005000
    1e7c:	41004800 	.word	0x41004800
    1e80:	41004000 	.word	0x41004000
    1e84:	00007525 	.word	0x00007525
    1e88:	00004245 	.word	0x00004245

00001e8c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e8e:	46c6      	mov	lr, r8
    1e90:	b500      	push	{lr}
    1e92:	000c      	movs	r4, r1
    1e94:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1e96:	2800      	cmp	r0, #0
    1e98:	d10f      	bne.n	1eba <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1e9a:	2a00      	cmp	r2, #0
    1e9c:	dd11      	ble.n	1ec2 <_read+0x36>
    1e9e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1ea0:	4e09      	ldr	r6, [pc, #36]	; (1ec8 <_read+0x3c>)
    1ea2:	4d0a      	ldr	r5, [pc, #40]	; (1ecc <_read+0x40>)
    1ea4:	6830      	ldr	r0, [r6, #0]
    1ea6:	0021      	movs	r1, r4
    1ea8:	682b      	ldr	r3, [r5, #0]
    1eaa:	4798      	blx	r3
		ptr++;
    1eac:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1eae:	42bc      	cmp	r4, r7
    1eb0:	d1f8      	bne.n	1ea4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1eb2:	4640      	mov	r0, r8
    1eb4:	bc04      	pop	{r2}
    1eb6:	4690      	mov	r8, r2
    1eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1eba:	2301      	movs	r3, #1
    1ebc:	425b      	negs	r3, r3
    1ebe:	4698      	mov	r8, r3
    1ec0:	e7f7      	b.n	1eb2 <_read+0x26>
	for (; len > 0; --len) {
    1ec2:	4680      	mov	r8, r0
    1ec4:	e7f5      	b.n	1eb2 <_read+0x26>
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	2000040c 	.word	0x2000040c
    1ecc:	20000404 	.word	0x20000404

00001ed0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ed2:	46c6      	mov	lr, r8
    1ed4:	b500      	push	{lr}
    1ed6:	000e      	movs	r6, r1
    1ed8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1eda:	3801      	subs	r0, #1
    1edc:	2802      	cmp	r0, #2
    1ede:	d810      	bhi.n	1f02 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1ee0:	2a00      	cmp	r2, #0
    1ee2:	d011      	beq.n	1f08 <_write+0x38>
    1ee4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1ee6:	4b0c      	ldr	r3, [pc, #48]	; (1f18 <_write+0x48>)
    1ee8:	4698      	mov	r8, r3
    1eea:	4f0c      	ldr	r7, [pc, #48]	; (1f1c <_write+0x4c>)
    1eec:	4643      	mov	r3, r8
    1eee:	6818      	ldr	r0, [r3, #0]
    1ef0:	5d31      	ldrb	r1, [r6, r4]
    1ef2:	683b      	ldr	r3, [r7, #0]
    1ef4:	4798      	blx	r3
    1ef6:	2800      	cmp	r0, #0
    1ef8:	db08      	blt.n	1f0c <_write+0x3c>
			return -1;
		}
		++nChars;
    1efa:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1efc:	42a5      	cmp	r5, r4
    1efe:	d1f5      	bne.n	1eec <_write+0x1c>
    1f00:	e006      	b.n	1f10 <_write+0x40>
		return -1;
    1f02:	2401      	movs	r4, #1
    1f04:	4264      	negs	r4, r4
    1f06:	e003      	b.n	1f10 <_write+0x40>
	for (; len != 0; --len) {
    1f08:	0014      	movs	r4, r2
    1f0a:	e001      	b.n	1f10 <_write+0x40>
			return -1;
    1f0c:	2401      	movs	r4, #1
    1f0e:	4264      	negs	r4, r4
	}
	return nChars;
}
    1f10:	0020      	movs	r0, r4
    1f12:	bc04      	pop	{r2}
    1f14:	4690      	mov	r8, r2
    1f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f18:	2000040c 	.word	0x2000040c
    1f1c:	20000408 	.word	0x20000408

00001f20 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1f20:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1f22:	4a06      	ldr	r2, [pc, #24]	; (1f3c <_sbrk+0x1c>)
    1f24:	6812      	ldr	r2, [r2, #0]
    1f26:	2a00      	cmp	r2, #0
    1f28:	d004      	beq.n	1f34 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1f2a:	4a04      	ldr	r2, [pc, #16]	; (1f3c <_sbrk+0x1c>)
    1f2c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1f2e:	18c3      	adds	r3, r0, r3
    1f30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1f32:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1f34:	4902      	ldr	r1, [pc, #8]	; (1f40 <_sbrk+0x20>)
    1f36:	4a01      	ldr	r2, [pc, #4]	; (1f3c <_sbrk+0x1c>)
    1f38:	6011      	str	r1, [r2, #0]
    1f3a:	e7f6      	b.n	1f2a <_sbrk+0xa>
    1f3c:	20000118 	.word	0x20000118
    1f40:	200033f8 	.word	0x200033f8

00001f44 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1f44:	2001      	movs	r0, #1
    1f46:	4240      	negs	r0, r0
    1f48:	4770      	bx	lr

00001f4a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1f4a:	2380      	movs	r3, #128	; 0x80
    1f4c:	019b      	lsls	r3, r3, #6
    1f4e:	604b      	str	r3, [r1, #4]

	return 0;
}
    1f50:	2000      	movs	r0, #0
    1f52:	4770      	bx	lr

00001f54 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1f54:	2000      	movs	r0, #0
    1f56:	4770      	bx	lr

00001f58 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1f58:	b570      	push	{r4, r5, r6, lr}
    1f5a:	b082      	sub	sp, #8
    1f5c:	0005      	movs	r5, r0
    1f5e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1f60:	2200      	movs	r2, #0
    1f62:	466b      	mov	r3, sp
    1f64:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1f66:	4c06      	ldr	r4, [pc, #24]	; (1f80 <usart_serial_getchar+0x28>)
    1f68:	466b      	mov	r3, sp
    1f6a:	1d99      	adds	r1, r3, #6
    1f6c:	0028      	movs	r0, r5
    1f6e:	47a0      	blx	r4
    1f70:	2800      	cmp	r0, #0
    1f72:	d1f9      	bne.n	1f68 <usart_serial_getchar+0x10>

	*c = temp;
    1f74:	466b      	mov	r3, sp
    1f76:	3306      	adds	r3, #6
    1f78:	881b      	ldrh	r3, [r3, #0]
    1f7a:	7033      	strb	r3, [r6, #0]
}
    1f7c:	b002      	add	sp, #8
    1f7e:	bd70      	pop	{r4, r5, r6, pc}
    1f80:	00000fc5 	.word	0x00000fc5

00001f84 <usart_serial_putchar>:
{
    1f84:	b570      	push	{r4, r5, r6, lr}
    1f86:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1f88:	b28c      	uxth	r4, r1
    1f8a:	4e03      	ldr	r6, [pc, #12]	; (1f98 <usart_serial_putchar+0x14>)
    1f8c:	0021      	movs	r1, r4
    1f8e:	0028      	movs	r0, r5
    1f90:	47b0      	blx	r6
    1f92:	2800      	cmp	r0, #0
    1f94:	d1fa      	bne.n	1f8c <usart_serial_putchar+0x8>
}
    1f96:	bd70      	pop	{r4, r5, r6, pc}
    1f98:	00000f99 	.word	0x00000f99

00001f9c <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    1f9c:	b510      	push	{r4, lr}
    1f9e:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    1fa0:	466b      	mov	r3, sp
    1fa2:	1ddc      	adds	r4, r3, #7
    1fa4:	2201      	movs	r2, #1
    1fa6:	0021      	movs	r1, r4
    1fa8:	480f      	ldr	r0, [pc, #60]	; (1fe8 <USART_HOST_ISR_VECT+0x4c>)
    1faa:	4b10      	ldr	r3, [pc, #64]	; (1fec <USART_HOST_ISR_VECT+0x50>)
    1fac:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    1fae:	b672      	cpsid	i
    1fb0:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    1fb4:	2200      	movs	r2, #0
    1fb6:	4b0e      	ldr	r3, [pc, #56]	; (1ff0 <USART_HOST_ISR_VECT+0x54>)
    1fb8:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    1fba:	4b0e      	ldr	r3, [pc, #56]	; (1ff4 <USART_HOST_ISR_VECT+0x58>)
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	7821      	ldrb	r1, [r4, #0]
    1fc0:	4a0d      	ldr	r2, [pc, #52]	; (1ff8 <USART_HOST_ISR_VECT+0x5c>)
    1fc2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    1fc4:	2b9b      	cmp	r3, #155	; 0x9b
    1fc6:	d00a      	beq.n	1fde <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    1fc8:	3301      	adds	r3, #1
    1fca:	4a0a      	ldr	r2, [pc, #40]	; (1ff4 <USART_HOST_ISR_VECT+0x58>)
    1fcc:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    1fce:	2201      	movs	r2, #1
    1fd0:	4b07      	ldr	r3, [pc, #28]	; (1ff0 <USART_HOST_ISR_VECT+0x54>)
    1fd2:	701a      	strb	r2, [r3, #0]
    1fd4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1fd8:	b662      	cpsie	i
}
    1fda:	b002      	add	sp, #8
    1fdc:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    1fde:	2200      	movs	r2, #0
    1fe0:	4b04      	ldr	r3, [pc, #16]	; (1ff4 <USART_HOST_ISR_VECT+0x58>)
    1fe2:	701a      	strb	r2, [r3, #0]
    1fe4:	e7f3      	b.n	1fce <USART_HOST_ISR_VECT+0x32>
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	2000011c 	.word	0x2000011c
    1fec:	00001035 	.word	0x00001035
    1ff0:	20000008 	.word	0x20000008
    1ff4:	200001ec 	.word	0x200001ec
    1ff8:	20000150 	.word	0x20000150

00001ffc <sio2host_init>:
{
    1ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ffe:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2000:	2380      	movs	r3, #128	; 0x80
    2002:	05db      	lsls	r3, r3, #23
    2004:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2006:	2300      	movs	r3, #0
    2008:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    200a:	22ff      	movs	r2, #255	; 0xff
    200c:	4669      	mov	r1, sp
    200e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2010:	2200      	movs	r2, #0
    2012:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2014:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2016:	2401      	movs	r4, #1
    2018:	2124      	movs	r1, #36	; 0x24
    201a:	4668      	mov	r0, sp
    201c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    201e:	3101      	adds	r1, #1
    2020:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2022:	3101      	adds	r1, #1
    2024:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2026:	3101      	adds	r1, #1
    2028:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    202a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    202c:	3105      	adds	r1, #5
    202e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2030:	3101      	adds	r1, #1
    2032:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2034:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2036:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2038:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    203a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    203c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    203e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2040:	2313      	movs	r3, #19
    2042:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2044:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    2046:	23c4      	movs	r3, #196	; 0xc4
    2048:	039b      	lsls	r3, r3, #14
    204a:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    204c:	2301      	movs	r3, #1
    204e:	425b      	negs	r3, r3
    2050:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    2052:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    2054:	4b2d      	ldr	r3, [pc, #180]	; (210c <STACK_SIZE+0x10c>)
    2056:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    2058:	4b2d      	ldr	r3, [pc, #180]	; (2110 <STACK_SIZE+0x110>)
    205a:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    205c:	2396      	movs	r3, #150	; 0x96
    205e:	021b      	lsls	r3, r3, #8
    2060:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2062:	4d2c      	ldr	r5, [pc, #176]	; (2114 <STACK_SIZE+0x114>)
    2064:	4b2c      	ldr	r3, [pc, #176]	; (2118 <STACK_SIZE+0x118>)
    2066:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2068:	4a2c      	ldr	r2, [pc, #176]	; (211c <STACK_SIZE+0x11c>)
    206a:	4b2d      	ldr	r3, [pc, #180]	; (2120 <STACK_SIZE+0x120>)
    206c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    206e:	4a2d      	ldr	r2, [pc, #180]	; (2124 <STACK_SIZE+0x124>)
    2070:	4b2d      	ldr	r3, [pc, #180]	; (2128 <STACK_SIZE+0x128>)
    2072:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2074:	466a      	mov	r2, sp
    2076:	492d      	ldr	r1, [pc, #180]	; (212c <STACK_SIZE+0x12c>)
    2078:	0028      	movs	r0, r5
    207a:	4b2d      	ldr	r3, [pc, #180]	; (2130 <STACK_SIZE+0x130>)
    207c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    207e:	4f2d      	ldr	r7, [pc, #180]	; (2134 <STACK_SIZE+0x134>)
    2080:	683b      	ldr	r3, [r7, #0]
    2082:	6898      	ldr	r0, [r3, #8]
    2084:	2100      	movs	r1, #0
    2086:	4e2c      	ldr	r6, [pc, #176]	; (2138 <STACK_SIZE+0x138>)
    2088:	47b0      	blx	r6
	setbuf(stdin, NULL);
    208a:	683b      	ldr	r3, [r7, #0]
    208c:	6858      	ldr	r0, [r3, #4]
    208e:	2100      	movs	r1, #0
    2090:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2092:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2094:	0030      	movs	r0, r6
    2096:	4b29      	ldr	r3, [pc, #164]	; (213c <STACK_SIZE+0x13c>)
    2098:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    209a:	231f      	movs	r3, #31
    209c:	4018      	ands	r0, r3
    209e:	4084      	lsls	r4, r0
    20a0:	4b27      	ldr	r3, [pc, #156]	; (2140 <STACK_SIZE+0x140>)
    20a2:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    20a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    20a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    20a8:	2b00      	cmp	r3, #0
    20aa:	d1fc      	bne.n	20a6 <STACK_SIZE+0xa6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    20ac:	6833      	ldr	r3, [r6, #0]
    20ae:	2202      	movs	r2, #2
    20b0:	4313      	orrs	r3, r2
    20b2:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    20b4:	4b17      	ldr	r3, [pc, #92]	; (2114 <STACK_SIZE+0x114>)
    20b6:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    20b8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    20ba:	2a00      	cmp	r2, #0
    20bc:	d1fc      	bne.n	20b8 <STACK_SIZE+0xb8>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    20be:	6859      	ldr	r1, [r3, #4]
    20c0:	2280      	movs	r2, #128	; 0x80
    20c2:	0252      	lsls	r2, r2, #9
    20c4:	430a      	orrs	r2, r1
    20c6:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    20c8:	2101      	movs	r1, #1
    20ca:	4a12      	ldr	r2, [pc, #72]	; (2114 <STACK_SIZE+0x114>)
    20cc:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    20ce:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    20d0:	2a00      	cmp	r2, #0
    20d2:	d1fc      	bne.n	20ce <STACK_SIZE+0xce>
	return (usart_hw->SYNCBUSY.reg);
    20d4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    20d6:	2a00      	cmp	r2, #0
    20d8:	d1fc      	bne.n	20d4 <STACK_SIZE+0xd4>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    20da:	6859      	ldr	r1, [r3, #4]
    20dc:	2280      	movs	r2, #128	; 0x80
    20de:	0292      	lsls	r2, r2, #10
    20e0:	430a      	orrs	r2, r1
    20e2:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    20e4:	2101      	movs	r1, #1
    20e6:	4a0b      	ldr	r2, [pc, #44]	; (2114 <STACK_SIZE+0x114>)
    20e8:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    20ea:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    20ec:	2a00      	cmp	r2, #0
    20ee:	d1fc      	bne.n	20ea <STACK_SIZE+0xea>
	USART_HOST_RX_ISR_ENABLE();
    20f0:	4914      	ldr	r1, [pc, #80]	; (2144 <STACK_SIZE+0x144>)
    20f2:	2002      	movs	r0, #2
    20f4:	4b14      	ldr	r3, [pc, #80]	; (2148 <STACK_SIZE+0x148>)
    20f6:	4798      	blx	r3
    20f8:	2204      	movs	r2, #4
    20fa:	4b0c      	ldr	r3, [pc, #48]	; (212c <STACK_SIZE+0x12c>)
    20fc:	759a      	strb	r2, [r3, #22]
    20fe:	2280      	movs	r2, #128	; 0x80
    2100:	0112      	lsls	r2, r2, #4
    2102:	4b0f      	ldr	r3, [pc, #60]	; (2140 <STACK_SIZE+0x140>)
    2104:	601a      	str	r2, [r3, #0]
}
    2106:	b011      	add	sp, #68	; 0x44
    2108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	000e0002 	.word	0x000e0002
    2110:	000f0002 	.word	0x000f0002
    2114:	2000011c 	.word	0x2000011c
    2118:	2000040c 	.word	0x2000040c
    211c:	00001f85 	.word	0x00001f85
    2120:	20000408 	.word	0x20000408
    2124:	00001f59 	.word	0x00001f59
    2128:	20000404 	.word	0x20000404
    212c:	42001000 	.word	0x42001000
    2130:	00000c55 	.word	0x00000c55
    2134:	20000058 	.word	0x20000058
    2138:	000075ad 	.word	0x000075ad
    213c:	0000080d 	.word	0x0000080d
    2140:	e000e100 	.word	0xe000e100
    2144:	00001f9d 	.word	0x00001f9d
    2148:	000007d1 	.word	0x000007d1

0000214c <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    214c:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    214e:	7802      	ldrb	r2, [r0, #0]
    2150:	4b08      	ldr	r3, [pc, #32]	; (2174 <MiMAC_SetAltAddress+0x28>)
    2152:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    2154:	7842      	ldrb	r2, [r0, #1]
    2156:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    2158:	780a      	ldrb	r2, [r1, #0]
    215a:	4c07      	ldr	r4, [pc, #28]	; (2178 <MiMAC_SetAltAddress+0x2c>)
    215c:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    215e:	784a      	ldrb	r2, [r1, #1]
    2160:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    2162:	8818      	ldrh	r0, [r3, #0]
    2164:	4b05      	ldr	r3, [pc, #20]	; (217c <MiMAC_SetAltAddress+0x30>)
    2166:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    2168:	8820      	ldrh	r0, [r4, #0]
    216a:	4b05      	ldr	r3, [pc, #20]	; (2180 <MiMAC_SetAltAddress+0x34>)
    216c:	4798      	blx	r3
	return true;
}
    216e:	2001      	movs	r0, #1
    2170:	bd10      	pop	{r4, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	20000414 	.word	0x20000414
    2178:	2000042c 	.word	0x2000042c
    217c:	00002a55 	.word	0x00002a55
    2180:	00002a35 	.word	0x00002a35

00002184 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    2184:	b510      	push	{r4, lr}
    switch(id)
    2186:	2800      	cmp	r0, #0
    2188:	d109      	bne.n	219e <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    218a:	780b      	ldrb	r3, [r1, #0]
    218c:	2b1a      	cmp	r3, #26
    218e:	d807      	bhi.n	21a0 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    2190:	4a04      	ldr	r2, [pc, #16]	; (21a4 <MiMAC_Set+0x20>)
    2192:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    2194:	0018      	movs	r0, r3
    2196:	4b04      	ldr	r3, [pc, #16]	; (21a8 <MiMAC_Set+0x24>)
    2198:	4798      	blx	r3
          return true;
    219a:	2001      	movs	r0, #1
    219c:	e000      	b.n	21a0 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    219e:	2000      	movs	r0, #0
}
    21a0:	bd10      	pop	{r4, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	2000042e 	.word	0x2000042e
    21a8:	00002a11 	.word	0x00002a11

000021ac <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    21ac:	b530      	push	{r4, r5, lr}
    21ae:	b083      	sub	sp, #12
    21b0:	466c      	mov	r4, sp
    21b2:	9000      	str	r0, [sp, #0]
    21b4:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    21b6:	4b10      	ldr	r3, [pc, #64]	; (21f8 <MiMAC_Init+0x4c>)
    21b8:	4798      	blx	r3
	MACInitParams = initValue;
    21ba:	4d10      	ldr	r5, [pc, #64]	; (21fc <MiMAC_Init+0x50>)
    21bc:	002b      	movs	r3, r5
    21be:	cc06      	ldmia	r4!, {r1, r2}
    21c0:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    21c2:	4b0f      	ldr	r3, [pc, #60]	; (2200 <MiMAC_Init+0x54>)
    21c4:	4798      	blx	r3
    21c6:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    21c8:	2001      	movs	r0, #1
    21ca:	4b0e      	ldr	r3, [pc, #56]	; (2204 <MiMAC_Init+0x58>)
    21cc:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    21ce:	4b0e      	ldr	r3, [pc, #56]	; (2208 <MiMAC_Init+0x5c>)
    21d0:	701c      	strb	r4, [r3, #0]

	MACCurrentChannel = 11;
    21d2:	220b      	movs	r2, #11
    21d4:	4b0d      	ldr	r3, [pc, #52]	; (220c <MiMAC_Init+0x60>)
    21d6:	701a      	strb	r2, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    21d8:	6868      	ldr	r0, [r5, #4]
    21da:	4b0d      	ldr	r3, [pc, #52]	; (2210 <MiMAC_Init+0x64>)
    21dc:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    21de:	4b0d      	ldr	r3, [pc, #52]	; (2214 <MiMAC_Init+0x68>)
    21e0:	2200      	movs	r2, #0
    21e2:	701a      	strb	r2, [r3, #0]
    21e4:	217f      	movs	r1, #127	; 0x7f
    21e6:	545a      	strb	r2, [r3, r1]
    21e8:	317f      	adds	r1, #127	; 0x7f
    21ea:	545a      	strb	r2, [r3, r1]
    21ec:	217e      	movs	r1, #126	; 0x7e
    21ee:	31ff      	adds	r1, #255	; 0xff
    21f0:	545a      	strb	r2, [r3, r1]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    21f2:	2001      	movs	r0, #1
    21f4:	b003      	add	sp, #12
    21f6:	bd30      	pop	{r4, r5, pc}
    21f8:	000029b1 	.word	0x000029b1
    21fc:	2000041c 	.word	0x2000041c
    2200:	00002961 	.word	0x00002961
    2204:	000029fd 	.word	0x000029fd
    2208:	20000410 	.word	0x20000410
    220c:	2000042e 	.word	0x2000042e
    2210:	00002aa5 	.word	0x00002aa5
    2214:	20000430 	.word	0x20000430

00002218 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    2218:	b5f0      	push	{r4, r5, r6, r7, lr}
    221a:	46de      	mov	lr, fp
    221c:	4657      	mov	r7, sl
    221e:	464e      	mov	r6, r9
    2220:	4645      	mov	r5, r8
    2222:	b5e0      	push	{r5, r6, r7, lr}
    2224:	b0a5      	sub	sp, #148	; 0x94
    2226:	9001      	str	r0, [sp, #4]
    2228:	000e      	movs	r6, r1
    222a:	9102      	str	r1, [sp, #8]
    222c:	1c11      	adds	r1, r2, #0
    222e:	0014      	movs	r4, r2
    2230:	0a24      	lsrs	r4, r4, #8
    2232:	9203      	str	r2, [sp, #12]
    2234:	9300      	str	r3, [sp, #0]
    2236:	aa2e      	add	r2, sp, #184	; 0xb8
    2238:	7815      	ldrb	r5, [r2, #0]
    223a:	aa2f      	add	r2, sp, #188	; 0xbc
    223c:	7813      	ldrb	r3, [r2, #0]
    223e:	469b      	mov	fp, r3
    2240:	b2c7      	uxtb	r7, r0
    2242:	06b8      	lsls	r0, r7, #26
    2244:	0fc3      	lsrs	r3, r0, #31
    2246:	4699      	mov	r9, r3
    2248:	b2c9      	uxtb	r1, r1
    224a:	b2e2      	uxtb	r2, r4
	uint8_t frameControl = 0;
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif

    if (transParam.flags.bits.broadcast)
    224c:	077b      	lsls	r3, r7, #29
    224e:	d500      	bpl.n	2252 <MiMAC_SendPacket+0x3a>
    {
        transParam.altDestAddr = true;
    2250:	2101      	movs	r1, #1
        transParam.altSrcAddr = false;
    }
   #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    2252:	2303      	movs	r3, #3
    2254:	403b      	ands	r3, r7
    2256:	2b01      	cmp	r3, #1
    2258:	d03b      	beq.n	22d2 <MiMAC_SendPacket+0xba>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    225a:	425c      	negs	r4, r3
    225c:	415c      	adcs	r4, r3
        frameControl = 0x03;
    225e:	b2e0      	uxtb	r0, r4
    2260:	4682      	mov	sl, r0
        frameControl = 0x01;
    }

    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    2262:	ac01      	add	r4, sp, #4
    2264:	8964      	ldrh	r4, [r4, #10]
    2266:	487b      	ldr	r0, [pc, #492]	; (2454 <MiMAC_SendPacket+0x23c>)
    2268:	8800      	ldrh	r0, [r0, #0]
    226a:	42a0      	cmp	r0, r4
    226c:	d034      	beq.n	22d8 <MiMAC_SendPacket+0xc0>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    226e:	2400      	movs	r4, #0
        headerLength = 7;
    2270:	2007      	movs	r0, #7
    2272:	4684      	mov	ip, r0
    }
#endif

    if (transParam.altDestAddr)
    2274:	4688      	mov	r8, r1
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    2276:	4661      	mov	r1, ip
    2278:	3108      	adds	r1, #8
    if (transParam.altDestAddr)
    227a:	4640      	mov	r0, r8
    227c:	2800      	cmp	r0, #0
    227e:	d000      	beq.n	2282 <MiMAC_SendPacket+0x6a>
        headerLength += 2;
    2280:	3906      	subs	r1, #6
    }

    if (transParam.altSrcAddr)
    2282:	2a00      	cmp	r2, #0
    2284:	d037      	beq.n	22f6 <MiMAC_SendPacket+0xde>
    {
        headerLength += 2;
    2286:	3102      	adds	r1, #2
    2288:	b2c9      	uxtb	r1, r1
    228a:	468c      	mov	ip, r1
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    228c:	2124      	movs	r1, #36	; 0x24
    228e:	4039      	ands	r1, r7
    2290:	2920      	cmp	r1, #32
    2292:	d034      	beq.n	22fe <MiMAC_SendPacket+0xe6>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    2294:	2b03      	cmp	r3, #3
    2296:	d036      	beq.n	2306 <MiMAC_SendPacket+0xee>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    2298:	a904      	add	r1, sp, #16
    229a:	44ac      	add	ip, r5
    229c:	4663      	mov	r3, ip
    229e:	700b      	strb	r3, [r1, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    22a0:	4653      	mov	r3, sl
    22a2:	704b      	strb	r3, [r1, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    22a4:	a901      	add	r1, sp, #4
    22a6:	464b      	mov	r3, r9
    22a8:	015b      	lsls	r3, r3, #5
    22aa:	469c      	mov	ip, r3
    22ac:	7808      	ldrb	r0, [r1, #0]
    22ae:	2320      	movs	r3, #32
    22b0:	4398      	bics	r0, r3
    22b2:	4663      	mov	r3, ip
    22b4:	4318      	orrs	r0, r3
    22b6:	7008      	strb	r0, [r1, #0]
    22b8:	4684      	mov	ip, r0
    22ba:	43c1      	mvns	r1, r0
    22bc:	078b      	lsls	r3, r1, #30
    22be:	d02a      	beq.n	2316 <MiMAC_SendPacket+0xfe>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    22c0:	4643      	mov	r3, r8
    22c2:	2b00      	cmp	r3, #0
    22c4:	d049      	beq.n	235a <MiMAC_SendPacket+0x142>
    22c6:	2a00      	cmp	r2, #0
    22c8:	d02f      	beq.n	232a <MiMAC_SendPacket+0x112>
        {
			packet[loc++] = 0x88;
    22ca:	2088      	movs	r0, #136	; 0x88
    22cc:	a904      	add	r1, sp, #16
    22ce:	7088      	strb	r0, [r1, #2]
    22d0:	e02e      	b.n	2330 <MiMAC_SendPacket+0x118>
        frameControl = 0x03;
    22d2:	2003      	movs	r0, #3
    22d4:	4682      	mov	sl, r0
    22d6:	e7c4      	b.n	2262 <MiMAC_SendPacket+0x4a>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    22d8:	485f      	ldr	r0, [pc, #380]	; (2458 <MiMAC_SendPacket+0x240>)
    22da:	4284      	cmp	r4, r0
    22dc:	d007      	beq.n	22ee <MiMAC_SendPacket+0xd6>
        frameControl |= 0x40;
    22de:	2440      	movs	r4, #64	; 0x40
    22e0:	4650      	mov	r0, sl
    22e2:	4320      	orrs	r0, r4
    22e4:	4682      	mov	sl, r0
        IntraPAN = true;
    22e6:	3c3f      	subs	r4, #63	; 0x3f
        headerLength = 5;
    22e8:	2005      	movs	r0, #5
    22ea:	4684      	mov	ip, r0
        IntraPAN = true;
    22ec:	e7c2      	b.n	2274 <MiMAC_SendPacket+0x5c>
        IntraPAN = false;
    22ee:	2400      	movs	r4, #0
        headerLength = 7;
    22f0:	2007      	movs	r0, #7
    22f2:	4684      	mov	ip, r0
    22f4:	e7be      	b.n	2274 <MiMAC_SendPacket+0x5c>
        headerLength += 8;
    22f6:	3108      	adds	r1, #8
    22f8:	b2c9      	uxtb	r1, r1
    22fa:	468c      	mov	ip, r1
    22fc:	e7c6      	b.n	228c <MiMAC_SendPacket+0x74>
        frameControl |= 0x20;
    22fe:	4650      	mov	r0, sl
    2300:	4308      	orrs	r0, r1
    2302:	4682      	mov	sl, r0
    2304:	e7c6      	b.n	2294 <MiMAC_SendPacket+0x7c>
        transParam.altSrcAddr = true;
    2306:	2201      	movs	r2, #1
        transParam.flags.bits.ackReq = false;
    2308:	2300      	movs	r3, #0
    230a:	4699      	mov	r9, r3
        IntraPAN = false;
    230c:	2400      	movs	r4, #0
        frameControl = 0x00;
    230e:	469a      	mov	sl, r3
        headerLength = 7;
    2310:	3307      	adds	r3, #7
    2312:	469c      	mov	ip, r3
    2314:	e7c0      	b.n	2298 <MiMAC_SendPacket+0x80>
		packet[loc++] = 0x80;
    2316:	a904      	add	r1, sp, #16
    2318:	2080      	movs	r0, #128	; 0x80
    231a:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    231c:	4e4f      	ldr	r6, [pc, #316]	; (245c <MiMAC_SendPacket+0x244>)
    231e:	7830      	ldrb	r0, [r6, #0]
    2320:	1c43      	adds	r3, r0, #1
    2322:	7033      	strb	r3, [r6, #0]
    2324:	70c8      	strb	r0, [r1, #3]
    2326:	2104      	movs	r1, #4
    2328:	e02e      	b.n	2388 <MiMAC_SendPacket+0x170>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    232a:	20c8      	movs	r0, #200	; 0xc8
    232c:	a904      	add	r1, sp, #16
    232e:	7088      	strb	r0, [r1, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    2330:	494a      	ldr	r1, [pc, #296]	; (245c <MiMAC_SendPacket+0x244>)
    2332:	7808      	ldrb	r0, [r1, #0]
    2334:	1c43      	adds	r3, r0, #1
    2336:	700b      	strb	r3, [r1, #0]
    2338:	a904      	add	r1, sp, #16
    233a:	70c8      	strb	r0, [r1, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    233c:	a801      	add	r0, sp, #4
    233e:	7a83      	ldrb	r3, [r0, #10]
    2340:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    2342:	7ac0      	ldrb	r0, [r0, #11]
    2344:	7148      	strb	r0, [r1, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    2346:	4663      	mov	r3, ip
    2348:	075b      	lsls	r3, r3, #29
    234a:	d418      	bmi.n	237e <MiMAC_SendPacket+0x166>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    234c:	a904      	add	r1, sp, #16
    234e:	7830      	ldrb	r0, [r6, #0]
    2350:	7188      	strb	r0, [r1, #6]
				packet[loc++] = transParam.DestAddress[1];
    2352:	7870      	ldrb	r0, [r6, #1]
    2354:	71c8      	strb	r0, [r1, #7]
    2356:	2108      	movs	r1, #8
    2358:	e016      	b.n	2388 <MiMAC_SendPacket+0x170>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    235a:	2a00      	cmp	r2, #0
    235c:	d05c      	beq.n	2418 <MiMAC_SendPacket+0x200>
			packet[loc++] = 0x8C;
    235e:	a904      	add	r1, sp, #16
    2360:	208c      	movs	r0, #140	; 0x8c
    2362:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    2364:	4b3d      	ldr	r3, [pc, #244]	; (245c <MiMAC_SendPacket+0x244>)
    2366:	7818      	ldrb	r0, [r3, #0]
    2368:	1c47      	adds	r7, r0, #1
    236a:	701f      	strb	r7, [r3, #0]
    236c:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    236e:	ab01      	add	r3, sp, #4
    2370:	7a98      	ldrb	r0, [r3, #10]
    2372:	7108      	strb	r0, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    2374:	7ad8      	ldrb	r0, [r3, #11]
    2376:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    2378:	4663      	mov	r3, ip
    237a:	075b      	lsls	r3, r3, #29
    237c:	d560      	bpl.n	2440 <MiMAC_SendPacket+0x228>
			packet[loc++] = 0xFF;
    237e:	a904      	add	r1, sp, #16
    2380:	20ff      	movs	r0, #255	; 0xff
    2382:	7188      	strb	r0, [r1, #6]
			packet[loc++] = 0xFF;
    2384:	71c8      	strb	r0, [r1, #7]
    2386:	2108      	movs	r1, #8
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    2388:	2c00      	cmp	r4, #0
    238a:	d109      	bne.n	23a0 <MiMAC_SendPacket+0x188>
    {
		packet[loc++] = MAC_PANID.v[0];
    238c:	1c48      	adds	r0, r1, #1
    238e:	b2c0      	uxtb	r0, r0
    2390:	ac04      	add	r4, sp, #16
    2392:	4e30      	ldr	r6, [pc, #192]	; (2454 <MiMAC_SendPacket+0x23c>)
    2394:	7833      	ldrb	r3, [r6, #0]
    2396:	5463      	strb	r3, [r4, r1]
		packet[loc++] = MAC_PANID.v[1];
    2398:	3102      	adds	r1, #2
    239a:	b2c9      	uxtb	r1, r1
    239c:	7876      	ldrb	r6, [r6, #1]
    239e:	5426      	strb	r6, [r4, r0]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    23a0:	2a00      	cmp	r2, #0
    23a2:	d02a      	beq.n	23fa <MiMAC_SendPacket+0x1e2>
    {
		packet[loc++] = myNetworkAddress.v[0];
    23a4:	a804      	add	r0, sp, #16
    23a6:	4c2e      	ldr	r4, [pc, #184]	; (2460 <MiMAC_SendPacket+0x248>)
    23a8:	7822      	ldrb	r2, [r4, #0]
    23aa:	5442      	strb	r2, [r0, r1]
		packet[loc++] = myNetworkAddress.v[1];
    23ac:	1c8a      	adds	r2, r1, #2
    23ae:	b2d2      	uxtb	r2, r2
		packet[loc++] = myNetworkAddress.v[0];
    23b0:	3101      	adds	r1, #1
		packet[loc++] = myNetworkAddress.v[1];
    23b2:	b2c9      	uxtb	r1, r1
    23b4:	7864      	ldrb	r4, [r4, #1]
    23b6:	5444      	strb	r4, [r0, r1]
#endif


#ifndef ENABLE_SECURITY
    // write the payload
    for (i = 0; i < MACPayloadLen; i++)
    23b8:	2d00      	cmp	r5, #0
    23ba:	d00a      	beq.n	23d2 <MiMAC_SendPacket+0x1ba>
    23bc:	9900      	ldr	r1, [sp, #0]
    23be:	1955      	adds	r5, r2, r5
    23c0:	b2ed      	uxtb	r5, r5
    {
		packet[loc++] = MACPayload[i];
    23c2:	ae04      	add	r6, sp, #16
    23c4:	1c50      	adds	r0, r2, #1
    23c6:	780c      	ldrb	r4, [r1, #0]
    23c8:	54b4      	strb	r4, [r6, r2]
    23ca:	3101      	adds	r1, #1
    23cc:	b2c2      	uxtb	r2, r0
    for (i = 0; i < MACPayloadLen; i++)
    23ce:	4295      	cmp	r5, r2
    23d0:	d1f8      	bne.n	23c4 <MiMAC_SendPacket+0x1ac>
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    23d2:	4a24      	ldr	r2, [pc, #144]	; (2464 <MiMAC_SendPacket+0x24c>)
    23d4:	9b00      	ldr	r3, [sp, #0]
    23d6:	6013      	str	r3, [r2, #0]
	dataConfCallback = ConfCallback;
    23d8:	4b23      	ldr	r3, [pc, #140]	; (2468 <MiMAC_SendPacket+0x250>)
    23da:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    23dc:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    23de:	4b23      	ldr	r3, [pc, #140]	; (246c <MiMAC_SendPacket+0x254>)
    23e0:	465a      	mov	r2, fp
    23e2:	701a      	strb	r2, [r3, #0]

    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
    23e4:	a804      	add	r0, sp, #16
    23e6:	4b22      	ldr	r3, [pc, #136]	; (2470 <MiMAC_SendPacket+0x258>)
    23e8:	4798      	blx	r3
    return true;
}
    23ea:	2001      	movs	r0, #1
    23ec:	b025      	add	sp, #148	; 0x94
    23ee:	bc3c      	pop	{r2, r3, r4, r5}
    23f0:	4690      	mov	r8, r2
    23f2:	4699      	mov	r9, r3
    23f4:	46a2      	mov	sl, r4
    23f6:	46ab      	mov	fp, r5
    23f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			packet[loc++] = MACInitParams.PAddress[i];
    23fa:	4a1e      	ldr	r2, [pc, #120]	; (2474 <MiMAC_SendPacket+0x25c>)
    23fc:	6850      	ldr	r0, [r2, #4]
    23fe:	000b      	movs	r3, r1
    2400:	3308      	adds	r3, #8
    2402:	b2db      	uxtb	r3, r3
    2404:	ae04      	add	r6, sp, #16
    2406:	1c4a      	adds	r2, r1, #1
    2408:	b2d2      	uxtb	r2, r2
    240a:	7804      	ldrb	r4, [r0, #0]
    240c:	5474      	strb	r4, [r6, r1]
    240e:	3001      	adds	r0, #1
    2410:	0011      	movs	r1, r2
        for (i = 0; i < 8; i++)
    2412:	429a      	cmp	r2, r3
    2414:	d1f7      	bne.n	2406 <MiMAC_SendPacket+0x1ee>
    2416:	e7cf      	b.n	23b8 <MiMAC_SendPacket+0x1a0>
			packet[loc++] = 0xCC;
    2418:	a904      	add	r1, sp, #16
    241a:	20cc      	movs	r0, #204	; 0xcc
    241c:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    241e:	4b0f      	ldr	r3, [pc, #60]	; (245c <MiMAC_SendPacket+0x244>)
    2420:	4698      	mov	r8, r3
    2422:	7818      	ldrb	r0, [r3, #0]
    2424:	1c43      	adds	r3, r0, #1
    2426:	4699      	mov	r9, r3
    2428:	4643      	mov	r3, r8
    242a:	464f      	mov	r7, r9
    242c:	701f      	strb	r7, [r3, #0]
    242e:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    2430:	a801      	add	r0, sp, #4
    2432:	7a83      	ldrb	r3, [r0, #10]
    2434:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    2436:	7ac0      	ldrb	r0, [r0, #11]
    2438:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    243a:	4663      	mov	r3, ip
    243c:	075b      	lsls	r3, r3, #29
    243e:	d49e      	bmi.n	237e <MiMAC_SendPacket+0x166>
        headerLength = 7;
    2440:	2000      	movs	r0, #0
					packet[loc++] = transParam.DestAddress[i];
    2442:	ab04      	add	r3, sp, #16
    2444:	1819      	adds	r1, r3, r0
    2446:	5c33      	ldrb	r3, [r6, r0]
    2448:	718b      	strb	r3, [r1, #6]
    244a:	3001      	adds	r0, #1
                for (i = 0; i < 8; i++)
    244c:	2808      	cmp	r0, #8
    244e:	d1f8      	bne.n	2442 <MiMAC_SendPacket+0x22a>
					packet[loc++] = transParam.DestAddress[i];
    2450:	210e      	movs	r1, #14
    2452:	e799      	b.n	2388 <MiMAC_SendPacket+0x170>
    2454:	2000042c 	.word	0x2000042c
    2458:	0000ffff 	.word	0x0000ffff
    245c:	20000410 	.word	0x20000410
    2460:	20000414 	.word	0x20000414
    2464:	200001f8 	.word	0x200001f8
    2468:	200001f0 	.word	0x200001f0
    246c:	200001f4 	.word	0x200001f4
    2470:	00002915 	.word	0x00002915
    2474:	2000041c 	.word	0x2000041c

00002478 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    2478:	4b04      	ldr	r3, [pc, #16]	; (248c <MiMAC_DiscardPacket+0x14>)
    247a:	781b      	ldrb	r3, [r3, #0]
    247c:	2b03      	cmp	r3, #3
    247e:	d804      	bhi.n	248a <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    2480:	01da      	lsls	r2, r3, #7
    2482:	1ad3      	subs	r3, r2, r3
    2484:	2100      	movs	r1, #0
    2486:	4a02      	ldr	r2, [pc, #8]	; (2490 <MiMAC_DiscardPacket+0x18>)
    2488:	5499      	strb	r1, [r3, r2]
	}
}
    248a:	4770      	bx	lr
    248c:	20000009 	.word	0x20000009
    2490:	20000430 	.word	0x20000430

00002494 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    2494:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	BankIndex = 0xFF;
    2496:	22ff      	movs	r2, #255	; 0xff
    2498:	4bcd      	ldr	r3, [pc, #820]	; (27d0 <MiMAC_ReceivedPacket+0x33c>)
    249a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    249c:	4bcd      	ldr	r3, [pc, #820]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    249e:	781b      	ldrb	r3, [r3, #0]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d000      	beq.n	24a6 <MiMAC_ReceivedPacket+0x12>
    24a4:	e1bd      	b.n	2822 <MiMAC_ReceivedPacket+0x38e>
    24a6:	337f      	adds	r3, #127	; 0x7f
    24a8:	4aca      	ldr	r2, [pc, #808]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    24aa:	5cd3      	ldrb	r3, [r2, r3]
    24ac:	2b00      	cmp	r3, #0
    24ae:	d10b      	bne.n	24c8 <MiMAC_ReceivedPacket+0x34>
    24b0:	33fe      	adds	r3, #254	; 0xfe
    24b2:	5cd3      	ldrb	r3, [r2, r3]
    24b4:	2b00      	cmp	r3, #0
    24b6:	d12e      	bne.n	2516 <MiMAC_ReceivedPacket+0x82>
    24b8:	237e      	movs	r3, #126	; 0x7e
    24ba:	33ff      	adds	r3, #255	; 0xff
    24bc:	5cd3      	ldrb	r3, [r2, r3]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
		#endif

		return true;
	}
	return false;
    24be:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    24c0:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    24c2:	2b00      	cmp	r3, #0
    24c4:	d101      	bne.n	24ca <MiMAC_ReceivedPacket+0x36>
}
    24c6:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < BANK_SIZE; i++)
    24c8:	2201      	movs	r2, #1
			BankIndex = i;
    24ca:	4bc1      	ldr	r3, [pc, #772]	; (27d0 <MiMAC_ReceivedPacket+0x33c>)
    24cc:	701a      	strb	r2, [r3, #0]
	return false;
    24ce:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    24d0:	2a03      	cmp	r2, #3
    24d2:	d8f8      	bhi.n	24c6 <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    24d4:	0010      	movs	r0, r2
    24d6:	01d1      	lsls	r1, r2, #7
    24d8:	1a89      	subs	r1, r1, r2
    24da:	4bbe      	ldr	r3, [pc, #760]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    24dc:	185b      	adds	r3, r3, r1
    24de:	785d      	ldrb	r5, [r3, #1]
    24e0:	2440      	movs	r4, #64	; 0x40
    24e2:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    24e4:	49bc      	ldr	r1, [pc, #752]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    24e6:	2400      	movs	r4, #0
    24e8:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    24ea:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    24ec:	789b      	ldrb	r3, [r3, #2]
    24ee:	2133      	movs	r1, #51	; 0x33
    24f0:	438b      	bics	r3, r1
		switch (addrMode)
    24f2:	b2d9      	uxtb	r1, r3
    24f4:	2988      	cmp	r1, #136	; 0x88
    24f6:	d100      	bne.n	24fa <MiMAC_ReceivedPacket+0x66>
    24f8:	e0c4      	b.n	2684 <MiMAC_ReceivedPacket+0x1f0>
    24fa:	d90e      	bls.n	251a <MiMAC_ReceivedPacket+0x86>
    24fc:	b2d9      	uxtb	r1, r3
    24fe:	29c8      	cmp	r1, #200	; 0xc8
    2500:	d046      	beq.n	2590 <MiMAC_ReceivedPacket+0xfc>
    2502:	29cc      	cmp	r1, #204	; 0xcc
    2504:	d100      	bne.n	2508 <MiMAC_ReceivedPacket+0x74>
    2506:	e08a      	b.n	261e <MiMAC_ReceivedPacket+0x18a>
    2508:	298c      	cmp	r1, #140	; 0x8c
    250a:	d100      	bne.n	250e <MiMAC_ReceivedPacket+0x7a>
    250c:	e104      	b.n	2718 <MiMAC_ReceivedPacket+0x284>
			MiMAC_DiscardPacket();
    250e:	4bb3      	ldr	r3, [pc, #716]	; (27dc <MiMAC_ReceivedPacket+0x348>)
    2510:	4798      	blx	r3
			return false;
    2512:	2000      	movs	r0, #0
    2514:	e7d7      	b.n	24c6 <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    2516:	2202      	movs	r2, #2
    2518:	e7d7      	b.n	24ca <MiMAC_ReceivedPacket+0x36>
		switch (addrMode)
    251a:	2b08      	cmp	r3, #8
    251c:	d100      	bne.n	2520 <MiMAC_ReceivedPacket+0x8c>
    251e:	e131      	b.n	2784 <MiMAC_ReceivedPacket+0x2f0>
    2520:	2980      	cmp	r1, #128	; 0x80
    2522:	d1f4      	bne.n	250e <MiMAC_ReceivedPacket+0x7a>
				MACRxPacket.flags.bits.broadcast = 1;
    2524:	4bac      	ldr	r3, [pc, #688]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    2526:	7819      	ldrb	r1, [r3, #0]
    2528:	2404      	movs	r4, #4
    252a:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    252c:	2480      	movs	r4, #128	; 0x80
    252e:	4264      	negs	r4, r4
    2530:	4321      	orrs	r1, r4
    2532:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2534:	2101      	movs	r1, #1
    2536:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2538:	4ca6      	ldr	r4, [pc, #664]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    253a:	01d1      	lsls	r1, r2, #7
    253c:	1a88      	subs	r0, r1, r2
    253e:	1821      	adds	r1, r4, r0
    2540:	790d      	ldrb	r5, [r1, #4]
    2542:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2544:	7949      	ldrb	r1, [r1, #5]
    2546:	7459      	strb	r1, [r3, #17]
    2548:	01d1      	lsls	r1, r2, #7
    254a:	1a8a      	subs	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    254c:	1d91      	adds	r1, r2, #6
    254e:	1909      	adds	r1, r1, r4
    2550:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    2552:	5d01      	ldrb	r1, [r0, r4]
    2554:	390b      	subs	r1, #11
    2556:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    2558:	3208      	adds	r2, #8
    255a:	1912      	adds	r2, r2, r4
    255c:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    255e:	4b9c      	ldr	r3, [pc, #624]	; (27d0 <MiMAC_ReceivedPacket+0x33c>)
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	01d9      	lsls	r1, r3, #7
    2564:	1ac9      	subs	r1, r1, r3
    2566:	4a9b      	ldr	r2, [pc, #620]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    2568:	1852      	adds	r2, r2, r1
    256a:	7851      	ldrb	r1, [r2, #1]
    256c:	070a      	lsls	r2, r1, #28
    256e:	d500      	bpl.n	2572 <MiMAC_ReceivedPacket+0xde>
    2570:	e129      	b.n	27c6 <MiMAC_ReceivedPacket+0x332>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    2572:	2207      	movs	r2, #7
    2574:	400a      	ands	r2, r1
    2576:	2a01      	cmp	r2, #1
    2578:	d100      	bne.n	257c <MiMAC_ReceivedPacket+0xe8>
    257a:	e131      	b.n	27e0 <MiMAC_ReceivedPacket+0x34c>
    257c:	2a00      	cmp	r2, #0
    257e:	d100      	bne.n	2582 <MiMAC_ReceivedPacket+0xee>
    2580:	e149      	b.n	2816 <MiMAC_ReceivedPacket+0x382>
    2582:	2a03      	cmp	r2, #3
    2584:	d100      	bne.n	2588 <MiMAC_ReceivedPacket+0xf4>
    2586:	e13e      	b.n	2806 <MiMAC_ReceivedPacket+0x372>
			MiMAC_DiscardPacket();
    2588:	4b94      	ldr	r3, [pc, #592]	; (27dc <MiMAC_ReceivedPacket+0x348>)
    258a:	4798      	blx	r3
			return false;
    258c:	2000      	movs	r0, #0
    258e:	e79a      	b.n	24c6 <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2590:	01d1      	lsls	r1, r2, #7
    2592:	1a89      	subs	r1, r1, r2
    2594:	4b8f      	ldr	r3, [pc, #572]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    2596:	185b      	adds	r3, r3, r1
    2598:	799b      	ldrb	r3, [r3, #6]
    259a:	2bff      	cmp	r3, #255	; 0xff
    259c:	d01c      	beq.n	25d8 <MiMAC_ReceivedPacket+0x144>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    259e:	498e      	ldr	r1, [pc, #568]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    25a0:	780c      	ldrb	r4, [r1, #0]
    25a2:	2380      	movs	r3, #128	; 0x80
    25a4:	425b      	negs	r3, r3
    25a6:	4323      	orrs	r3, r4
    25a8:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    25aa:	2d00      	cmp	r5, #0
    25ac:	d021      	beq.n	25f2 <MiMAC_ReceivedPacket+0x15e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    25ae:	4c89      	ldr	r4, [pc, #548]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    25b0:	01c3      	lsls	r3, r0, #7
    25b2:	1a18      	subs	r0, r3, r0
    25b4:	1823      	adds	r3, r4, r0
    25b6:	791d      	ldrb	r5, [r3, #4]
    25b8:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    25ba:	795b      	ldrb	r3, [r3, #5]
    25bc:	744b      	strb	r3, [r1, #17]
    25be:	01d3      	lsls	r3, r2, #7
    25c0:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    25c2:	0013      	movs	r3, r2
    25c4:	3308      	adds	r3, #8
    25c6:	191b      	adds	r3, r3, r4
    25c8:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    25ca:	5d03      	ldrb	r3, [r0, r4]
    25cc:	3b13      	subs	r3, #19
    25ce:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    25d0:	3210      	adds	r2, #16
    25d2:	1912      	adds	r2, r2, r4
    25d4:	608a      	str	r2, [r1, #8]
    25d6:	e7c2      	b.n	255e <MiMAC_ReceivedPacket+0xca>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    25d8:	01d1      	lsls	r1, r2, #7
    25da:	1a89      	subs	r1, r1, r2
    25dc:	4b7d      	ldr	r3, [pc, #500]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    25de:	185b      	adds	r3, r3, r1
    25e0:	79db      	ldrb	r3, [r3, #7]
    25e2:	2bff      	cmp	r3, #255	; 0xff
    25e4:	d1db      	bne.n	259e <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.flags.bits.broadcast = 1;
    25e6:	497c      	ldr	r1, [pc, #496]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    25e8:	780b      	ldrb	r3, [r1, #0]
    25ea:	2404      	movs	r4, #4
    25ec:	4323      	orrs	r3, r4
    25ee:	700b      	strb	r3, [r1, #0]
    25f0:	e7d5      	b.n	259e <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    25f2:	4979      	ldr	r1, [pc, #484]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    25f4:	4c77      	ldr	r4, [pc, #476]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    25f6:	01c3      	lsls	r3, r0, #7
    25f8:	1a18      	subs	r0, r3, r0
    25fa:	1823      	adds	r3, r4, r0
    25fc:	7a1d      	ldrb	r5, [r3, #8]
    25fe:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2600:	7a5b      	ldrb	r3, [r3, #9]
    2602:	744b      	strb	r3, [r1, #17]
    2604:	01d3      	lsls	r3, r2, #7
    2606:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2608:	0013      	movs	r3, r2
    260a:	330a      	adds	r3, #10
    260c:	191b      	adds	r3, r3, r4
    260e:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2610:	5d03      	ldrb	r3, [r0, r4]
    2612:	3b15      	subs	r3, #21
    2614:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2616:	3212      	adds	r2, #18
    2618:	1912      	adds	r2, r2, r4
    261a:	608a      	str	r2, [r1, #8]
    261c:	e79f      	b.n	255e <MiMAC_ReceivedPacket+0xca>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    261e:	496e      	ldr	r1, [pc, #440]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    2620:	780c      	ldrb	r4, [r1, #0]
    2622:	2380      	movs	r3, #128	; 0x80
    2624:	425b      	negs	r3, r3
    2626:	4323      	orrs	r3, r4
    2628:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    262a:	2d00      	cmp	r5, #0
    262c:	d014      	beq.n	2658 <MiMAC_ReceivedPacket+0x1c4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    262e:	4c69      	ldr	r4, [pc, #420]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    2630:	01d3      	lsls	r3, r2, #7
    2632:	1a98      	subs	r0, r3, r2
    2634:	1823      	adds	r3, r4, r0
    2636:	791d      	ldrb	r5, [r3, #4]
    2638:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    263a:	795b      	ldrb	r3, [r3, #5]
    263c:	744b      	strb	r3, [r1, #17]
    263e:	01d3      	lsls	r3, r2, #7
    2640:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    2642:	0013      	movs	r3, r2
    2644:	330e      	adds	r3, #14
    2646:	191b      	adds	r3, r3, r4
    2648:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    264a:	5d03      	ldrb	r3, [r0, r4]
    264c:	3b19      	subs	r3, #25
    264e:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    2650:	3216      	adds	r2, #22
    2652:	1912      	adds	r2, r2, r4
    2654:	608a      	str	r2, [r1, #8]
    2656:	e782      	b.n	255e <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    2658:	495f      	ldr	r1, [pc, #380]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    265a:	4c5e      	ldr	r4, [pc, #376]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    265c:	01d3      	lsls	r3, r2, #7
    265e:	1a98      	subs	r0, r3, r2
    2660:	1823      	adds	r3, r4, r0
    2662:	7b9d      	ldrb	r5, [r3, #14]
    2664:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    2666:	7bdb      	ldrb	r3, [r3, #15]
    2668:	744b      	strb	r3, [r1, #17]
    266a:	01d3      	lsls	r3, r2, #7
    266c:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    266e:	0013      	movs	r3, r2
    2670:	3310      	adds	r3, #16
    2672:	191b      	adds	r3, r3, r4
    2674:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    2676:	5d03      	ldrb	r3, [r0, r4]
    2678:	3b1b      	subs	r3, #27
    267a:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    267c:	3218      	adds	r2, #24
    267e:	1912      	adds	r2, r2, r4
    2680:	608a      	str	r2, [r1, #8]
    2682:	e76c      	b.n	255e <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2684:	01d1      	lsls	r1, r2, #7
    2686:	1a89      	subs	r1, r1, r2
    2688:	4b52      	ldr	r3, [pc, #328]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    268a:	185b      	adds	r3, r3, r1
    268c:	799b      	ldrb	r3, [r3, #6]
    268e:	2bff      	cmp	r3, #255	; 0xff
    2690:	d01f      	beq.n	26d2 <MiMAC_ReceivedPacket+0x23e>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2692:	4b51      	ldr	r3, [pc, #324]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    2694:	781c      	ldrb	r4, [r3, #0]
    2696:	2180      	movs	r1, #128	; 0x80
    2698:	4249      	negs	r1, r1
    269a:	4321      	orrs	r1, r4
    269c:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    269e:	2101      	movs	r1, #1
    26a0:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    26a2:	2d00      	cmp	r5, #0
    26a4:	d122      	bne.n	26ec <MiMAC_ReceivedPacket+0x258>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    26a6:	0019      	movs	r1, r3
    26a8:	4c4a      	ldr	r4, [pc, #296]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    26aa:	01c3      	lsls	r3, r0, #7
    26ac:	1a18      	subs	r0, r3, r0
    26ae:	1823      	adds	r3, r4, r0
    26b0:	7a1d      	ldrb	r5, [r3, #8]
    26b2:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    26b4:	7a5b      	ldrb	r3, [r3, #9]
    26b6:	744b      	strb	r3, [r1, #17]
    26b8:	01d3      	lsls	r3, r2, #7
    26ba:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    26bc:	0013      	movs	r3, r2
    26be:	330a      	adds	r3, #10
    26c0:	191b      	adds	r3, r3, r4
    26c2:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    26c4:	5d03      	ldrb	r3, [r0, r4]
    26c6:	3b0f      	subs	r3, #15
    26c8:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    26ca:	320c      	adds	r2, #12
    26cc:	1912      	adds	r2, r2, r4
    26ce:	608a      	str	r2, [r1, #8]
    26d0:	e745      	b.n	255e <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    26d2:	01d1      	lsls	r1, r2, #7
    26d4:	1a89      	subs	r1, r1, r2
    26d6:	4b3f      	ldr	r3, [pc, #252]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    26d8:	185b      	adds	r3, r3, r1
    26da:	79db      	ldrb	r3, [r3, #7]
    26dc:	2bff      	cmp	r3, #255	; 0xff
    26de:	d1d8      	bne.n	2692 <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.flags.bits.broadcast = 1;
    26e0:	493d      	ldr	r1, [pc, #244]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    26e2:	780b      	ldrb	r3, [r1, #0]
    26e4:	2404      	movs	r4, #4
    26e6:	4323      	orrs	r3, r4
    26e8:	700b      	strb	r3, [r1, #0]
    26ea:	e7d2      	b.n	2692 <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    26ec:	493a      	ldr	r1, [pc, #232]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    26ee:	4c39      	ldr	r4, [pc, #228]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    26f0:	01c3      	lsls	r3, r0, #7
    26f2:	1a18      	subs	r0, r3, r0
    26f4:	1823      	adds	r3, r4, r0
    26f6:	791d      	ldrb	r5, [r3, #4]
    26f8:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    26fa:	795b      	ldrb	r3, [r3, #5]
    26fc:	744b      	strb	r3, [r1, #17]
    26fe:	01d3      	lsls	r3, r2, #7
    2700:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    2702:	0013      	movs	r3, r2
    2704:	3308      	adds	r3, #8
    2706:	191b      	adds	r3, r3, r4
    2708:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    270a:	5d03      	ldrb	r3, [r0, r4]
    270c:	3b0d      	subs	r3, #13
    270e:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    2710:	320a      	adds	r2, #10
    2712:	1912      	adds	r2, r2, r4
    2714:	608a      	str	r2, [r1, #8]
    2716:	e722      	b.n	255e <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2718:	4b2f      	ldr	r3, [pc, #188]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    271a:	781c      	ldrb	r4, [r3, #0]
    271c:	2180      	movs	r1, #128	; 0x80
    271e:	4249      	negs	r1, r1
    2720:	4321      	orrs	r1, r4
    2722:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2724:	2101      	movs	r1, #1
    2726:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    2728:	2d00      	cmp	r5, #0
    272a:	d015      	beq.n	2758 <MiMAC_ReceivedPacket+0x2c4>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    272c:	0019      	movs	r1, r3
    272e:	4c29      	ldr	r4, [pc, #164]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    2730:	01d3      	lsls	r3, r2, #7
    2732:	1a98      	subs	r0, r3, r2
    2734:	1823      	adds	r3, r4, r0
    2736:	791d      	ldrb	r5, [r3, #4]
    2738:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    273a:	795b      	ldrb	r3, [r3, #5]
    273c:	744b      	strb	r3, [r1, #17]
    273e:	01d3      	lsls	r3, r2, #7
    2740:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    2742:	0013      	movs	r3, r2
    2744:	330e      	adds	r3, #14
    2746:	191b      	adds	r3, r3, r4
    2748:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    274a:	5d03      	ldrb	r3, [r0, r4]
    274c:	3b13      	subs	r3, #19
    274e:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2750:	3210      	adds	r2, #16
    2752:	1912      	adds	r2, r2, r4
    2754:	608a      	str	r2, [r1, #8]
    2756:	e702      	b.n	255e <MiMAC_ReceivedPacket+0xca>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    2758:	491f      	ldr	r1, [pc, #124]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    275a:	4c1e      	ldr	r4, [pc, #120]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    275c:	01d3      	lsls	r3, r2, #7
    275e:	1a98      	subs	r0, r3, r2
    2760:	1823      	adds	r3, r4, r0
    2762:	7b5d      	ldrb	r5, [r3, #13]
    2764:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    2766:	7b9b      	ldrb	r3, [r3, #14]
    2768:	744b      	strb	r3, [r1, #17]
    276a:	01d3      	lsls	r3, r2, #7
    276c:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    276e:	0013      	movs	r3, r2
    2770:	330f      	adds	r3, #15
    2772:	191b      	adds	r3, r3, r4
    2774:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2776:	5d03      	ldrb	r3, [r0, r4]
    2778:	3b15      	subs	r3, #21
    277a:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    277c:	3212      	adds	r2, #18
    277e:	1912      	adds	r2, r2, r4
    2780:	608a      	str	r2, [r1, #8]
    2782:	e6ec      	b.n	255e <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2784:	01d1      	lsls	r1, r2, #7
    2786:	1a89      	subs	r1, r1, r2
    2788:	4b12      	ldr	r3, [pc, #72]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    278a:	185b      	adds	r3, r3, r1
    278c:	799b      	ldrb	r3, [r3, #6]
    278e:	2bff      	cmp	r3, #255	; 0xff
    2790:	d00c      	beq.n	27ac <MiMAC_ReceivedPacket+0x318>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    2792:	4911      	ldr	r1, [pc, #68]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    2794:	4c0f      	ldr	r4, [pc, #60]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    2796:	01c3      	lsls	r3, r0, #7
    2798:	1a18      	subs	r0, r3, r0
    279a:	5d03      	ldrb	r3, [r0, r4]
    279c:	3b0a      	subs	r3, #10
    279e:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    27a0:	01d3      	lsls	r3, r2, #7
    27a2:	1a9a      	subs	r2, r3, r2
    27a4:	3208      	adds	r2, #8
    27a6:	1912      	adds	r2, r2, r4
    27a8:	608a      	str	r2, [r1, #8]
			break;
    27aa:	e6d8      	b.n	255e <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    27ac:	01d1      	lsls	r1, r2, #7
    27ae:	1a89      	subs	r1, r1, r2
    27b0:	4b08      	ldr	r3, [pc, #32]	; (27d4 <MiMAC_ReceivedPacket+0x340>)
    27b2:	185b      	adds	r3, r3, r1
    27b4:	79db      	ldrb	r3, [r3, #7]
    27b6:	2bff      	cmp	r3, #255	; 0xff
    27b8:	d1eb      	bne.n	2792 <MiMAC_ReceivedPacket+0x2fe>
					MACRxPacket.flags.bits.broadcast = 1;
    27ba:	4907      	ldr	r1, [pc, #28]	; (27d8 <MiMAC_ReceivedPacket+0x344>)
    27bc:	780b      	ldrb	r3, [r1, #0]
    27be:	2404      	movs	r4, #4
    27c0:	4323      	orrs	r3, r4
    27c2:	700b      	strb	r3, [r1, #0]
    27c4:	e7e5      	b.n	2792 <MiMAC_ReceivedPacket+0x2fe>
			MiMAC_DiscardPacket();
    27c6:	4b05      	ldr	r3, [pc, #20]	; (27dc <MiMAC_ReceivedPacket+0x348>)
    27c8:	4798      	blx	r3
			return false;
    27ca:	2000      	movs	r0, #0
    27cc:	e67b      	b.n	24c6 <MiMAC_ReceivedPacket+0x32>
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	20000009 	.word	0x20000009
    27d4:	20000430 	.word	0x20000430
    27d8:	2000138c 	.word	0x2000138c
    27dc:	00002479 	.word	0x00002479
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    27e0:	4912      	ldr	r1, [pc, #72]	; (282c <MiMAC_ReceivedPacket+0x398>)
    27e2:	780a      	ldrb	r2, [r1, #0]
    27e4:	2003      	movs	r0, #3
    27e6:	4382      	bics	r2, r0
    27e8:	700a      	strb	r2, [r1, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    27ea:	4a11      	ldr	r2, [pc, #68]	; (2830 <MiMAC_ReceivedPacket+0x39c>)
    27ec:	01d9      	lsls	r1, r3, #7
    27ee:	1acb      	subs	r3, r1, r3
    27f0:	5c98      	ldrb	r0, [r3, r2]
    27f2:	490e      	ldr	r1, [pc, #56]	; (282c <MiMAC_ReceivedPacket+0x398>)
    27f4:	18d3      	adds	r3, r2, r3
    27f6:	181a      	adds	r2, r3, r0
    27f8:	3a01      	subs	r2, #1
    27fa:	7812      	ldrb	r2, [r2, #0]
    27fc:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    27fe:	5c1b      	ldrb	r3, [r3, r0]
    2800:	734b      	strb	r3, [r1, #13]
		return true;
    2802:	2001      	movs	r0, #1
    2804:	e65f      	b.n	24c6 <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    2806:	4909      	ldr	r1, [pc, #36]	; (282c <MiMAC_ReceivedPacket+0x398>)
    2808:	780a      	ldrb	r2, [r1, #0]
    280a:	2003      	movs	r0, #3
    280c:	4382      	bics	r2, r0
    280e:	2001      	movs	r0, #1
    2810:	4302      	orrs	r2, r0
    2812:	700a      	strb	r2, [r1, #0]
			break;
    2814:	e7e9      	b.n	27ea <MiMAC_ReceivedPacket+0x356>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    2816:	4905      	ldr	r1, [pc, #20]	; (282c <MiMAC_ReceivedPacket+0x398>)
    2818:	780a      	ldrb	r2, [r1, #0]
    281a:	2003      	movs	r0, #3
    281c:	4302      	orrs	r2, r0
    281e:	700a      	strb	r2, [r1, #0]
			break;
    2820:	e7e3      	b.n	27ea <MiMAC_ReceivedPacket+0x356>
			BankIndex = i;
    2822:	2200      	movs	r2, #0
    2824:	4b03      	ldr	r3, [pc, #12]	; (2834 <MiMAC_ReceivedPacket+0x3a0>)
    2826:	701a      	strb	r2, [r3, #0]
    2828:	e654      	b.n	24d4 <MiMAC_ReceivedPacket+0x40>
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	2000138c 	.word	0x2000138c
    2830:	20000430 	.word	0x20000430
    2834:	20000009 	.word	0x20000009

00002838 <MiMAC_SymbolToTicks>:
* Returns:
*      converted value in uint32.
*****************************************************************************************/
uint32_t MiMAC_SymbolToTicks(uint32_t symbols)
{
	return SYMBOLS_TO_TICKS(symbols);
    2838:	0100      	lsls	r0, r0, #4
}
    283a:	4770      	bx	lr

0000283c <MiMAC_GetPHYChannelInfo>:
*****************************************************************************************/
uint32_t MiMAC_GetPHYChannelInfo(void)
{
	uint32_t channelMap = FULL_CHANNEL_MAP;
	return channelMap;
}
    283c:	4800      	ldr	r0, [pc, #0]	; (2840 <MiMAC_GetPHYChannelInfo+0x4>)
    283e:	4770      	bx	lr
    2840:	07fff800 	.word	0x07fff800

00002844 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    2844:	4b02      	ldr	r3, [pc, #8]	; (2850 <PHY_DataConf+0xc>)
    2846:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    2848:	2201      	movs	r2, #1
    284a:	4b02      	ldr	r3, [pc, #8]	; (2854 <PHY_DataConf+0x10>)
    284c:	701a      	strb	r2, [r3, #0]
}
    284e:	4770      	bx	lr
    2850:	20000424 	.word	0x20000424
    2854:	200001ed 	.word	0x200001ed

00002858 <MiMAC_Task>:

void MiMAC_Task(void)
{
    2858:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    285a:	4b0b      	ldr	r3, [pc, #44]	; (2888 <MiMAC_Task+0x30>)
    285c:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    285e:	4b0b      	ldr	r3, [pc, #44]	; (288c <MiMAC_Task+0x34>)
    2860:	681b      	ldr	r3, [r3, #0]
    2862:	2b00      	cmp	r3, #0
    2864:	d003      	beq.n	286e <MiMAC_Task+0x16>
    2866:	4a0a      	ldr	r2, [pc, #40]	; (2890 <MiMAC_Task+0x38>)
    2868:	7812      	ldrb	r2, [r2, #0]
    286a:	2a00      	cmp	r2, #0
    286c:	d100      	bne.n	2870 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    286e:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    2870:	4a08      	ldr	r2, [pc, #32]	; (2894 <MiMAC_Task+0x3c>)
    2872:	6812      	ldr	r2, [r2, #0]
    2874:	4908      	ldr	r1, [pc, #32]	; (2898 <MiMAC_Task+0x40>)
    2876:	7809      	ldrb	r1, [r1, #0]
    2878:	4808      	ldr	r0, [pc, #32]	; (289c <MiMAC_Task+0x44>)
    287a:	7800      	ldrb	r0, [r0, #0]
    287c:	4798      	blx	r3
	  dataConfAvailable = false;
    287e:	2200      	movs	r2, #0
    2880:	4b03      	ldr	r3, [pc, #12]	; (2890 <MiMAC_Task+0x38>)
    2882:	701a      	strb	r2, [r3, #0]
}
    2884:	e7f3      	b.n	286e <MiMAC_Task+0x16>
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	00002ac5 	.word	0x00002ac5
    288c:	200001f0 	.word	0x200001f0
    2890:	200001ed 	.word	0x200001ed
    2894:	200001f8 	.word	0x200001f8
    2898:	20000424 	.word	0x20000424
    289c:	200001f4 	.word	0x200001f4

000028a0 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    28a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28a2:	0004      	movs	r4, r0
	trx_reg_write(reg, value);
    28a4:	4f0b      	ldr	r7, [pc, #44]	; (28d4 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    28a6:	4e0c      	ldr	r6, [pc, #48]	; (28d8 <phyTrxSetState+0x38>)
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    28a8:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    28aa:	2103      	movs	r1, #3
    28ac:	2002      	movs	r0, #2
    28ae:	47b8      	blx	r7
	value = trx_reg_read(reg);
    28b0:	2001      	movs	r0, #1
    28b2:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    28b4:	4028      	ands	r0, r5
    28b6:	2808      	cmp	r0, #8
    28b8:	d1f7      	bne.n	28aa <phyTrxSetState+0xa>
	trx_reg_write(reg, value);
    28ba:	4f06      	ldr	r7, [pc, #24]	; (28d4 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    28bc:	4e06      	ldr	r6, [pc, #24]	; (28d8 <phyTrxSetState+0x38>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    28be:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    28c0:	0021      	movs	r1, r4
    28c2:	2002      	movs	r0, #2
    28c4:	47b8      	blx	r7
	value = trx_reg_read(reg);
    28c6:	2001      	movs	r0, #1
    28c8:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    28ca:	4028      	ands	r0, r5
    28cc:	4284      	cmp	r4, r0
    28ce:	d1f7      	bne.n	28c0 <phyTrxSetState+0x20>
}
    28d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	00003919 	.word	0x00003919
    28d8:	0000381d 	.word	0x0000381d

000028dc <phySetRxState>:
{
    28dc:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    28de:	2008      	movs	r0, #8
    28e0:	4b08      	ldr	r3, [pc, #32]	; (2904 <phySetRxState+0x28>)
    28e2:	4798      	blx	r3
	value = trx_reg_read(reg);
    28e4:	200f      	movs	r0, #15
    28e6:	4b08      	ldr	r3, [pc, #32]	; (2908 <phySetRxState+0x2c>)
    28e8:	4798      	blx	r3
	if (phyRxState) {
    28ea:	4b08      	ldr	r3, [pc, #32]	; (290c <phySetRxState+0x30>)
    28ec:	781b      	ldrb	r3, [r3, #0]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d100      	bne.n	28f4 <phySetRxState+0x18>
}
    28f2:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    28f4:	2016      	movs	r0, #22
    28f6:	4b03      	ldr	r3, [pc, #12]	; (2904 <phySetRxState+0x28>)
    28f8:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    28fa:	2201      	movs	r2, #1
    28fc:	4b04      	ldr	r3, [pc, #16]	; (2910 <phySetRxState+0x34>)
    28fe:	701a      	strb	r2, [r3, #0]
}
    2900:	e7f7      	b.n	28f2 <phySetRxState+0x16>
    2902:	46c0      	nop			; (mov r8, r8)
    2904:	000028a1 	.word	0x000028a1
    2908:	0000381d 	.word	0x0000381d
    290c:	2000027c 	.word	0x2000027c
    2910:	2000027d 	.word	0x2000027d

00002914 <PHY_DataReq>:
{
    2914:	b510      	push	{r4, lr}
    2916:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2918:	2019      	movs	r0, #25
    291a:	4b0c      	ldr	r3, [pc, #48]	; (294c <PHY_DataReq+0x38>)
    291c:	4798      	blx	r3
	value = trx_reg_read(reg);
    291e:	200f      	movs	r0, #15
    2920:	4b0b      	ldr	r3, [pc, #44]	; (2950 <PHY_DataReq+0x3c>)
    2922:	4798      	blx	r3
	data[0] += 2;// 2
    2924:	7821      	ldrb	r1, [r4, #0]
    2926:	1c8b      	adds	r3, r1, #2
    2928:	7023      	strb	r3, [r4, #0]
	trx_frame_write(&data[0], (data[0]-1 ) /* length value*/);
    292a:	3101      	adds	r1, #1
    292c:	b2c9      	uxtb	r1, r1
    292e:	0020      	movs	r0, r4
    2930:	4b08      	ldr	r3, [pc, #32]	; (2954 <PHY_DataReq+0x40>)
    2932:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
    2934:	2203      	movs	r2, #3
    2936:	4b08      	ldr	r3, [pc, #32]	; (2958 <PHY_DataReq+0x44>)
    2938:	701a      	strb	r2, [r3, #0]
    293a:	4b08      	ldr	r3, [pc, #32]	; (295c <PHY_DataReq+0x48>)
    293c:	2280      	movs	r2, #128	; 0x80
    293e:	0352      	lsls	r2, r2, #13
    2940:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    2946:	615a      	str	r2, [r3, #20]
}
    2948:	bd10      	pop	{r4, pc}
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	000028a1 	.word	0x000028a1
    2950:	0000381d 	.word	0x0000381d
    2954:	00003b49 	.word	0x00003b49
    2958:	2000027d 	.word	0x2000027d
    295c:	41004400 	.word	0x41004400

00002960 <PHY_RandomReq>:
{
    2960:	b5f0      	push	{r4, r5, r6, r7, lr}
    2962:	46c6      	mov	lr, r8
    2964:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    2966:	2006      	movs	r0, #6
    2968:	4b0d      	ldr	r3, [pc, #52]	; (29a0 <PHY_RandomReq+0x40>)
    296a:	4798      	blx	r3
    296c:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    296e:	2500      	movs	r5, #0
		delay_cycles_us(1);
    2970:	4f0c      	ldr	r7, [pc, #48]	; (29a4 <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    2972:	4e0d      	ldr	r6, [pc, #52]	; (29a8 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2974:	2303      	movs	r3, #3
    2976:	4698      	mov	r8, r3
		delay_cycles_us(1);
    2978:	2001      	movs	r0, #1
    297a:	47b8      	blx	r7
	value = trx_reg_read(reg);
    297c:	2006      	movs	r0, #6
    297e:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2980:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    2982:	4643      	mov	r3, r8
    2984:	4018      	ands	r0, r3
    2986:	40a0      	lsls	r0, r4
    2988:	4305      	orrs	r5, r0
    298a:	b2ad      	uxth	r5, r5
    298c:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    298e:	2c10      	cmp	r4, #16
    2990:	d1f2      	bne.n	2978 <PHY_RandomReq+0x18>
	phySetRxState();
    2992:	4b06      	ldr	r3, [pc, #24]	; (29ac <PHY_RandomReq+0x4c>)
    2994:	4798      	blx	r3
}
    2996:	0028      	movs	r0, r5
    2998:	bc04      	pop	{r2}
    299a:	4690      	mov	r8, r2
    299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	000028a1 	.word	0x000028a1
    29a4:	00000155 	.word	0x00000155
    29a8:	0000381d 	.word	0x0000381d
    29ac:	000028dd 	.word	0x000028dd

000029b0 <PHY_Init>:
{
    29b0:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    29b2:	4b0d      	ldr	r3, [pc, #52]	; (29e8 <PHY_Init+0x38>)
    29b4:	4798      	blx	r3
	PhyReset();
    29b6:	4b0d      	ldr	r3, [pc, #52]	; (29ec <PHY_Init+0x3c>)
    29b8:	4798      	blx	r3
	phyRxState = false;
    29ba:	2200      	movs	r2, #0
    29bc:	4b0c      	ldr	r3, [pc, #48]	; (29f0 <PHY_Init+0x40>)
    29be:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    29c0:	4e0c      	ldr	r6, [pc, #48]	; (29f4 <PHY_Init+0x44>)
	value = trx_reg_read(reg);
    29c2:	4d0d      	ldr	r5, [pc, #52]	; (29f8 <PHY_Init+0x48>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    29c4:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    29c6:	2108      	movs	r1, #8
    29c8:	2002      	movs	r0, #2
    29ca:	47b0      	blx	r6
	value = trx_reg_read(reg);
    29cc:	2001      	movs	r0, #1
    29ce:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    29d0:	4020      	ands	r0, r4
    29d2:	2808      	cmp	r0, #8
    29d4:	d1f7      	bne.n	29c6 <PHY_Init+0x16>
	trx_reg_write(reg, value);
    29d6:	212e      	movs	r1, #46	; 0x2e
    29d8:	3804      	subs	r0, #4
    29da:	4c06      	ldr	r4, [pc, #24]	; (29f4 <PHY_Init+0x44>)
    29dc:	47a0      	blx	r4
    29de:	21a0      	movs	r1, #160	; 0xa0
    29e0:	200c      	movs	r0, #12
    29e2:	47a0      	blx	r4
}
    29e4:	bd70      	pop	{r4, r5, r6, pc}
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	000036d1 	.word	0x000036d1
    29ec:	000037ed 	.word	0x000037ed
    29f0:	2000027c 	.word	0x2000027c
    29f4:	00003919 	.word	0x00003919
    29f8:	0000381d 	.word	0x0000381d

000029fc <PHY_SetRxState>:
{
    29fc:	b510      	push	{r4, lr}
	phyRxState = rx;
    29fe:	4b02      	ldr	r3, [pc, #8]	; (2a08 <PHY_SetRxState+0xc>)
    2a00:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    2a02:	4b02      	ldr	r3, [pc, #8]	; (2a0c <PHY_SetRxState+0x10>)
    2a04:	4798      	blx	r3
}
    2a06:	bd10      	pop	{r4, pc}
    2a08:	2000027c 	.word	0x2000027c
    2a0c:	000028dd 	.word	0x000028dd

00002a10 <PHY_SetChannel>:
{
    2a10:	b510      	push	{r4, lr}
    2a12:	0004      	movs	r4, r0
	value = trx_reg_read(reg);
    2a14:	2008      	movs	r0, #8
    2a16:	4b05      	ldr	r3, [pc, #20]	; (2a2c <PHY_SetChannel+0x1c>)
    2a18:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    2a1a:	231f      	movs	r3, #31
    2a1c:	0001      	movs	r1, r0
    2a1e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    2a20:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    2a22:	b2c9      	uxtb	r1, r1
    2a24:	2008      	movs	r0, #8
    2a26:	4b02      	ldr	r3, [pc, #8]	; (2a30 <PHY_SetChannel+0x20>)
    2a28:	4798      	blx	r3
}
    2a2a:	bd10      	pop	{r4, pc}
    2a2c:	0000381d 	.word	0x0000381d
    2a30:	00003919 	.word	0x00003919

00002a34 <PHY_SetPanId>:
{
    2a34:	b530      	push	{r4, r5, lr}
    2a36:	b083      	sub	sp, #12
    2a38:	466b      	mov	r3, sp
    2a3a:	1d9d      	adds	r5, r3, #6
    2a3c:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    2a3e:	b2c1      	uxtb	r1, r0
    2a40:	2022      	movs	r0, #34	; 0x22
    2a42:	4c03      	ldr	r4, [pc, #12]	; (2a50 <PHY_SetPanId+0x1c>)
    2a44:	47a0      	blx	r4
    2a46:	7869      	ldrb	r1, [r5, #1]
    2a48:	2023      	movs	r0, #35	; 0x23
    2a4a:	47a0      	blx	r4
}
    2a4c:	b003      	add	sp, #12
    2a4e:	bd30      	pop	{r4, r5, pc}
    2a50:	00003919 	.word	0x00003919

00002a54 <PHY_SetShortAddr>:
{
    2a54:	b570      	push	{r4, r5, r6, lr}
    2a56:	b082      	sub	sp, #8
    2a58:	466b      	mov	r3, sp
    2a5a:	1d9e      	adds	r6, r3, #6
    2a5c:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    2a5e:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    2a60:	0021      	movs	r1, r4
    2a62:	2020      	movs	r0, #32
    2a64:	4d05      	ldr	r5, [pc, #20]	; (2a7c <PHY_SetShortAddr+0x28>)
    2a66:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    2a68:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    2a6a:	0031      	movs	r1, r6
    2a6c:	2021      	movs	r0, #33	; 0x21
    2a6e:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    2a70:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    2a72:	b2e1      	uxtb	r1, r4
    2a74:	202d      	movs	r0, #45	; 0x2d
    2a76:	47a8      	blx	r5
}
    2a78:	b002      	add	sp, #8
    2a7a:	bd70      	pop	{r4, r5, r6, pc}
    2a7c:	00003919 	.word	0x00003919

00002a80 <PHY_Sleep>:
{
    2a80:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2a82:	2008      	movs	r0, #8
    2a84:	4b04      	ldr	r3, [pc, #16]	; (2a98 <PHY_Sleep+0x18>)
    2a86:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2a88:	2280      	movs	r2, #128	; 0x80
    2a8a:	0352      	lsls	r2, r2, #13
    2a8c:	4b03      	ldr	r3, [pc, #12]	; (2a9c <PHY_Sleep+0x1c>)
    2a8e:	619a      	str	r2, [r3, #24]
	phyState = PHY_STATE_SLEEP;
    2a90:	2202      	movs	r2, #2
    2a92:	4b03      	ldr	r3, [pc, #12]	; (2aa0 <PHY_Sleep+0x20>)
    2a94:	701a      	strb	r2, [r3, #0]
}
    2a96:	bd10      	pop	{r4, pc}
    2a98:	000028a1 	.word	0x000028a1
    2a9c:	41004400 	.word	0x41004400
    2aa0:	2000027d 	.word	0x2000027d

00002aa4 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    2aa4:	b570      	push	{r4, r5, r6, lr}
    2aa6:	0005      	movs	r5, r0
    2aa8:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    2aaa:	4e05      	ldr	r6, [pc, #20]	; (2ac0 <PHY_SetIEEEAddr+0x1c>)
    2aac:	7829      	ldrb	r1, [r5, #0]
    2aae:	0020      	movs	r0, r4
    2ab0:	47b0      	blx	r6
		ptr_to_reg++;
    2ab2:	3501      	adds	r5, #1
    2ab4:	3401      	adds	r4, #1
    2ab6:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    2ab8:	2c2c      	cmp	r4, #44	; 0x2c
    2aba:	d1f7      	bne.n	2aac <PHY_SetIEEEAddr+0x8>
	}
}
    2abc:	bd70      	pop	{r4, r5, r6, pc}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	00003919 	.word	0x00003919

00002ac4 <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
// Handle Packet Received
void PHY_TaskHandler(void)
{
    2ac4:	b570      	push	{r4, r5, r6, lr}
    2ac6:	b082      	sub	sp, #8
	if (PHY_STATE_SLEEP == phyState)
    2ac8:	4b36      	ldr	r3, [pc, #216]	; (2ba4 <PHY_TaskHandler+0xe0>)
    2aca:	781b      	ldrb	r3, [r3, #0]
    2acc:	2b02      	cmp	r3, #2
    2ace:	d00a      	beq.n	2ae6 <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    2ad0:	200f      	movs	r0, #15
    2ad2:	4b35      	ldr	r3, [pc, #212]	; (2ba8 <PHY_TaskHandler+0xe4>)
    2ad4:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    2ad6:	0703      	lsls	r3, r0, #28
    2ad8:	d505      	bpl.n	2ae6 <PHY_TaskHandler+0x22>
	{
		if (PHY_STATE_IDLE == phyState)
    2ada:	4b32      	ldr	r3, [pc, #200]	; (2ba4 <PHY_TaskHandler+0xe0>)
    2adc:	781b      	ldrb	r3, [r3, #0]
    2ade:	2b01      	cmp	r3, #1
    2ae0:	d003      	beq.n	2aea <PHY_TaskHandler+0x26>
					}
			    }
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    2ae2:	2b03      	cmp	r3, #3
    2ae4:	d045      	beq.n	2b72 <PHY_TaskHandler+0xae>
			phySetRxState();
			phyState = PHY_STATE_IDLE;
			PHY_DataConf(status);
		}
	}
}
    2ae6:	b002      	add	sp, #8
    2ae8:	bd70      	pop	{r4, r5, r6, pc}
				if (RxBuffer[i].PayloadLen == 0)
    2aea:	4b30      	ldr	r3, [pc, #192]	; (2bac <PHY_TaskHandler+0xe8>)
    2aec:	781c      	ldrb	r4, [r3, #0]
    2aee:	2c00      	cmp	r4, #0
    2af0:	d010      	beq.n	2b14 <PHY_TaskHandler+0x50>
    2af2:	237f      	movs	r3, #127	; 0x7f
    2af4:	4a2d      	ldr	r2, [pc, #180]	; (2bac <PHY_TaskHandler+0xe8>)
    2af6:	5cd3      	ldrb	r3, [r2, r3]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d00a      	beq.n	2b12 <PHY_TaskHandler+0x4e>
    2afc:	23fe      	movs	r3, #254	; 0xfe
    2afe:	5cd3      	ldrb	r3, [r2, r3]
    2b00:	2b00      	cmp	r3, #0
    2b02:	d024      	beq.n	2b4e <PHY_TaskHandler+0x8a>
    2b04:	237e      	movs	r3, #126	; 0x7e
    2b06:	33ff      	adds	r3, #255	; 0xff
    2b08:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    2b0a:	2403      	movs	r4, #3
				if (RxBuffer[i].PayloadLen == 0)
    2b0c:	2b00      	cmp	r3, #0
    2b0e:	d1ea      	bne.n	2ae6 <PHY_TaskHandler+0x22>
    2b10:	e000      	b.n	2b14 <PHY_TaskHandler+0x50>
			for (i = 0; i < BANK_SIZE; i++)
    2b12:	2401      	movs	r4, #1
				trx_frame_read(&size, 1);
    2b14:	466b      	mov	r3, sp
    2b16:	1ddd      	adds	r5, r3, #7
    2b18:	2101      	movs	r1, #1
    2b1a:	0028      	movs	r0, r5
    2b1c:	4e24      	ldr	r6, [pc, #144]	; (2bb0 <PHY_TaskHandler+0xec>)
    2b1e:	47b0      	blx	r6
			 	trx_frame_read(phyRxBuffer, size + 2);
    2b20:	7829      	ldrb	r1, [r5, #0]
    2b22:	3102      	adds	r1, #2
    2b24:	b2c9      	uxtb	r1, r1
    2b26:	4823      	ldr	r0, [pc, #140]	; (2bb4 <PHY_TaskHandler+0xf0>)
    2b28:	47b0      	blx	r6
				RxBuffer[RxBank].PayloadLen = size+2;
    2b2a:	0021      	movs	r1, r4
    2b2c:	7828      	ldrb	r0, [r5, #0]
    2b2e:	1c83      	adds	r3, r0, #2
    2b30:	b2db      	uxtb	r3, r3
    2b32:	01e2      	lsls	r2, r4, #7
    2b34:	1b14      	subs	r4, r2, r4
    2b36:	4a1d      	ldr	r2, [pc, #116]	; (2bac <PHY_TaskHandler+0xe8>)
    2b38:	54a3      	strb	r3, [r4, r2]
				if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    2b3a:	2b7d      	cmp	r3, #125	; 0x7d
    2b3c:	d909      	bls.n	2b52 <PHY_TaskHandler+0x8e>
	value = trx_reg_read(reg);
    2b3e:	4d1a      	ldr	r5, [pc, #104]	; (2ba8 <PHY_TaskHandler+0xe4>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2b40:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    2b42:	2001      	movs	r0, #1
    2b44:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2b46:	4020      	ands	r0, r4
    2b48:	2816      	cmp	r0, #22
    2b4a:	d1fa      	bne.n	2b42 <PHY_TaskHandler+0x7e>
    2b4c:	e7cb      	b.n	2ae6 <PHY_TaskHandler+0x22>
			for (i = 0; i < BANK_SIZE; i++)
    2b4e:	2402      	movs	r4, #2
    2b50:	e7e0      	b.n	2b14 <PHY_TaskHandler+0x50>
					for (i = 1; i <= size+2; i++)
    2b52:	3002      	adds	r0, #2
    2b54:	2201      	movs	r2, #1
    2b56:	2301      	movs	r3, #1
						RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    2b58:	01cc      	lsls	r4, r1, #7
    2b5a:	1a61      	subs	r1, r4, r1
    2b5c:	4c13      	ldr	r4, [pc, #76]	; (2bac <PHY_TaskHandler+0xe8>)
    2b5e:	1864      	adds	r4, r4, r1
    2b60:	4d14      	ldr	r5, [pc, #80]	; (2bb4 <PHY_TaskHandler+0xf0>)
    2b62:	5ca9      	ldrb	r1, [r5, r2]
    2b64:	54a1      	strb	r1, [r4, r2]
					for (i = 1; i <= size+2; i++)
    2b66:	3301      	adds	r3, #1
    2b68:	b2db      	uxtb	r3, r3
    2b6a:	001a      	movs	r2, r3
    2b6c:	4283      	cmp	r3, r0
    2b6e:	ddf8      	ble.n	2b62 <PHY_TaskHandler+0x9e>
    2b70:	e7e5      	b.n	2b3e <PHY_TaskHandler+0x7a>
	value = trx_reg_read(reg);
    2b72:	2002      	movs	r0, #2
    2b74:	4b0c      	ldr	r3, [pc, #48]	; (2ba8 <PHY_TaskHandler+0xe4>)
    2b76:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    2b78:	0940      	lsrs	r0, r0, #5
    2b7a:	b2c4      	uxtb	r4, r0
   			if (TRAC_STATUS_SUCCESS == status)
    2b7c:	2c00      	cmp	r4, #0
    2b7e:	d004      	beq.n	2b8a <PHY_TaskHandler+0xc6>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2b80:	2c03      	cmp	r4, #3
    2b82:	d00b      	beq.n	2b9c <PHY_TaskHandler+0xd8>
			else if (TRAC_STATUS_NO_ACK == status)
    2b84:	2c05      	cmp	r4, #5
    2b86:	d00b      	beq.n	2ba0 <PHY_TaskHandler+0xdc>
				status = PHY_STATUS_ERROR;
    2b88:	2401      	movs	r4, #1
			phySetRxState();
    2b8a:	4b0b      	ldr	r3, [pc, #44]	; (2bb8 <PHY_TaskHandler+0xf4>)
    2b8c:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    2b8e:	2201      	movs	r2, #1
    2b90:	4b04      	ldr	r3, [pc, #16]	; (2ba4 <PHY_TaskHandler+0xe0>)
    2b92:	701a      	strb	r2, [r3, #0]
			PHY_DataConf(status);
    2b94:	0020      	movs	r0, r4
    2b96:	4b09      	ldr	r3, [pc, #36]	; (2bbc <PHY_TaskHandler+0xf8>)
    2b98:	4798      	blx	r3
    2b9a:	e7a4      	b.n	2ae6 <PHY_TaskHandler+0x22>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2b9c:	2402      	movs	r4, #2
    2b9e:	e7f4      	b.n	2b8a <PHY_TaskHandler+0xc6>
				status = PHY_STATUS_NO_ACK;
    2ba0:	2403      	movs	r4, #3
    2ba2:	e7f2      	b.n	2b8a <PHY_TaskHandler+0xc6>
    2ba4:	2000027d 	.word	0x2000027d
    2ba8:	0000381d 	.word	0x0000381d
    2bac:	20000430 	.word	0x20000430
    2bb0:	00003a19 	.word	0x00003a19
    2bb4:	200001fc 	.word	0x200001fc
    2bb8:	000028dd 	.word	0x000028dd
    2bbc:	00002845 	.word	0x00002845

00002bc0 <stb_init>:
 * @brief STB Initialization
 *
 * This function initializes the STB.
 */
void stb_init(void)
{
    2bc0:	b510      	push	{r4, lr}
	sal_init();
    2bc2:	4b01      	ldr	r3, [pc, #4]	; (2bc8 <stb_init+0x8>)
    2bc4:	4798      	blx	r3
}
    2bc6:	bd10      	pop	{r4, pc}
    2bc8:	000034a5 	.word	0x000034a5

00002bcc <stb_ccm_secure>:
		uint8_t *key,
		uint8_t hdr_len,
		uint8_t pld_len,
		uint8_t sec_level,
		uint8_t aes_dir)
{
    2bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bce:	46de      	mov	lr, fp
    2bd0:	4657      	mov	r7, sl
    2bd2:	464e      	mov	r6, r9
    2bd4:	4645      	mov	r5, r8
    2bd6:	b5e0      	push	{r5, r6, r7, lr}
    2bd8:	b08b      	sub	sp, #44	; 0x2c
    2bda:	9003      	str	r0, [sp, #12]
    2bdc:	000d      	movs	r5, r1
    2bde:	0014      	movs	r4, r2
    2be0:	9304      	str	r3, [sp, #16]
    2be2:	ab14      	add	r3, sp, #80	; 0x50
    2be4:	781e      	ldrb	r6, [r3, #0]
    2be6:	ab15      	add	r3, sp, #84	; 0x54
    2be8:	781f      	ldrb	r7, [r3, #0]
    2bea:	ab16      	add	r3, sp, #88	; 0x58
    2bec:	781b      	ldrb	r3, [r3, #0]
    2bee:	469a      	mov	sl, r3
	uint8_t nonce_0; /* nonce[0] for MIC computation. */
	uint8_t mic_len = 0;
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;

	if (stb_restart_required) {
    2bf0:	4b77      	ldr	r3, [pc, #476]	; (2dd0 <stb_ccm_secure+0x204>)
    2bf2:	781b      	ldrb	r3, [r3, #0]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d007      	beq.n	2c08 <stb_ccm_secure+0x3c>
#if (SAL_TYPE != ATXMEGA_SAL)
		prev_trx_status = tal_trx_status;
    2bf8:	2202      	movs	r2, #2
    2bfa:	4b76      	ldr	r3, [pc, #472]	; (2dd4 <stb_ccm_secure+0x208>)
    2bfc:	701a      	strb	r2, [r3, #0]
		if (tal_trx_status == TRX_SLEEP) {
			PHY_Wakeup();
		}
#endif
		sal_aes_restart();
    2bfe:	4b76      	ldr	r3, [pc, #472]	; (2dd8 <stb_ccm_secure+0x20c>)
    2c00:	4798      	blx	r3
		stb_restart_required = false;
    2c02:	2200      	movs	r2, #0
    2c04:	4b72      	ldr	r3, [pc, #456]	; (2dd0 <stb_ccm_secure+0x204>)
    2c06:	701a      	strb	r2, [r3, #0]
	}

	switch (sec_level) {
    2c08:	2f07      	cmp	r7, #7
    2c0a:	d817      	bhi.n	2c3c <stb_ccm_secure+0x70>
    2c0c:	00bb      	lsls	r3, r7, #2
    2c0e:	4a73      	ldr	r2, [pc, #460]	; (2ddc <stb_ccm_secure+0x210>)
    2c10:	58d3      	ldr	r3, [r2, r3]
    2c12:	469f      	mov	pc, r3
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    2c14:	2300      	movs	r3, #0
    2c16:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
		break;

	case SECURITY_02_LEVEL:
		/* MIC-64 & No Encryption at Security Level -2 */
		mic_len = LEN_MIC_64;
    2c18:	2708      	movs	r7, #8
    2c1a:	e0bb      	b.n	2d94 <stb_ccm_secure+0x1c8>
		break;

	case SECURITY_04_LEVEL:
		/* No MIC & Encryption at Security Level -4 */
		mic_len = LEN_MIC_00;
		enc_flag = ENCRYPTION_REQD;
    2c1c:	2301      	movs	r3, #1
    2c1e:	4698      	mov	r8, r3
		mic_len = LEN_MIC_00;
    2c20:	2700      	movs	r7, #0
		break;
    2c22:	e0b7      	b.n	2d94 <stb_ccm_secure+0x1c8>

	case SECURITY_05_LEVEL:
		/* MIC-32 & Encryption at Security Level -5 */
		mic_len = LEN_MIC_32;
		enc_flag = ENCRYPTION_REQD;
    2c24:	2301      	movs	r3, #1
    2c26:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    2c28:	2704      	movs	r7, #4
		break;
    2c2a:	e0b3      	b.n	2d94 <stb_ccm_secure+0x1c8>

	case SECURITY_06_LEVEL:
		/* MIC-64 & Encryption at Security Level -6 */
		mic_len = LEN_MIC_64;
		enc_flag = ENCRYPTION_REQD;
    2c2c:	2301      	movs	r3, #1
    2c2e:	4698      	mov	r8, r3
		mic_len = LEN_MIC_64;
    2c30:	2708      	movs	r7, #8
		break;
    2c32:	e0af      	b.n	2d94 <stb_ccm_secure+0x1c8>

	case SECURITY_07_LEVEL:
		/* MIC-128 & Encryption at Security Level -7 */
		mic_len = LEN_MIC_128;
		enc_flag = ENCRYPTION_REQD;
    2c34:	2301      	movs	r3, #1
    2c36:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    2c38:	2710      	movs	r7, #16
		break;
    2c3a:	e0ab      	b.n	2d94 <stb_ccm_secure+0x1c8>
		break;
	}

	/* Test on correct parameters. */

	if ((sec_level & ~0x7) ||
    2c3c:	2307      	movs	r3, #7
    2c3e:	439f      	bics	r7, r3
    2c40:	d000      	beq.n	2c44 <stb_ccm_secure+0x78>
    2c42:	e0b5      	b.n	2db0 <stb_ccm_secure+0x1e4>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    2c44:	46b8      	mov	r8, r7
    2c46:	e0a5      	b.n	2d94 <stb_ccm_secure+0x1c8>
			(nonce == NULL) ||
			((uint16_t)pld_len + (uint16_t)hdr_len +
			(uint16_t)mic_len > 127)
			) {
#if (SAL_TYPE != ATXMEGA_SAL)
		TRX_SLEEP();
    2c48:	4b65      	ldr	r3, [pc, #404]	; (2de0 <stb_ccm_secure+0x214>)
    2c4a:	4798      	blx	r3
    2c4c:	e0b5      	b.n	2dba <stb_ccm_secure+0x1ee>
		sal_aes_clean_up();
#endif
		return (STB_CCM_ILLPARM);
	}

	if (key_change && (key == NULL)) {
    2c4e:	4b65      	ldr	r3, [pc, #404]	; (2de4 <stb_ccm_secure+0x218>)
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	2b00      	cmp	r3, #0
    2c54:	d01a      	beq.n	2c8c <stb_ccm_secure+0xc0>
    2c56:	2c00      	cmp	r4, #0
    2c58:	d00d      	beq.n	2c76 <stb_ccm_secure+0xaa>
	if (key_change) {
		/*
		 * Key must be non-NULL because of test above, and
		 * ECB encryption is always the initial encryption mode.
		 */
		sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2c5a:	2200      	movs	r2, #0
    2c5c:	2100      	movs	r1, #0
    2c5e:	0020      	movs	r0, r4
    2c60:	4b61      	ldr	r3, [pc, #388]	; (2de8 <stb_ccm_secure+0x21c>)
    2c62:	4798      	blx	r3
		memcpy(last_key, key, AES_KEYSIZE);
    2c64:	2210      	movs	r2, #16
    2c66:	0021      	movs	r1, r4
    2c68:	4860      	ldr	r0, [pc, #384]	; (2dec <stb_ccm_secure+0x220>)
    2c6a:	4b61      	ldr	r3, [pc, #388]	; (2df0 <stb_ccm_secure+0x224>)
    2c6c:	4798      	blx	r3
		key_change = false;
    2c6e:	2200      	movs	r2, #0
    2c70:	4b5c      	ldr	r3, [pc, #368]	; (2de4 <stb_ccm_secure+0x218>)
    2c72:	701a      	strb	r2, [r3, #0]
    2c74:	e01e      	b.n	2cb4 <stb_ccm_secure+0xe8>
		TRX_SLEEP();
    2c76:	4b57      	ldr	r3, [pc, #348]	; (2dd4 <stb_ccm_secure+0x208>)
    2c78:	781b      	ldrb	r3, [r3, #0]
    2c7a:	2b01      	cmp	r3, #1
    2c7c:	d003      	beq.n	2c86 <stb_ccm_secure+0xba>
		sal_aes_clean_up();
    2c7e:	4b5d      	ldr	r3, [pc, #372]	; (2df4 <stb_ccm_secure+0x228>)
    2c80:	4798      	blx	r3
		return (STB_CCM_KEYMISS);
    2c82:	2002      	movs	r0, #2
    2c84:	e09c      	b.n	2dc0 <stb_ccm_secure+0x1f4>
		TRX_SLEEP();
    2c86:	4b56      	ldr	r3, [pc, #344]	; (2de0 <stb_ccm_secure+0x214>)
    2c88:	4798      	blx	r3
    2c8a:	e7f8      	b.n	2c7e <stb_ccm_secure+0xb2>
	if (!key_change && key != NULL) { /* There was some previous key. */
    2c8c:	2c00      	cmp	r4, #0
    2c8e:	d011      	beq.n	2cb4 <stb_ccm_secure+0xe8>
    2c90:	220f      	movs	r2, #15
			key_change |= (last_key[i] ^ key[i]);
    2c92:	4956      	ldr	r1, [pc, #344]	; (2dec <stb_ccm_secure+0x220>)
    2c94:	0018      	movs	r0, r3
    2c96:	46ac      	mov	ip, r5
    2c98:	5c53      	ldrb	r3, [r2, r1]
    2c9a:	5ca5      	ldrb	r5, [r4, r2]
    2c9c:	406b      	eors	r3, r5
    2c9e:	4303      	orrs	r3, r0
    2ca0:	1e58      	subs	r0, r3, #1
    2ca2:	4183      	sbcs	r3, r0
    2ca4:	b2d8      	uxtb	r0, r3
		for (i = AES_BLOCKSIZE; i--; /* */) {
    2ca6:	3a01      	subs	r2, #1
    2ca8:	d2f6      	bcs.n	2c98 <stb_ccm_secure+0xcc>
    2caa:	4665      	mov	r5, ip
    2cac:	4a4d      	ldr	r2, [pc, #308]	; (2de4 <stb_ccm_secure+0x218>)
    2cae:	7010      	strb	r0, [r2, #0]
	if (key_change) {
    2cb0:	2800      	cmp	r0, #0
    2cb2:	d1d2      	bne.n	2c5a <stb_ccm_secure+0x8e>
	}

	/* Prepare nonce. */
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */

	if (mic_len > 0) {
    2cb4:	2f00      	cmp	r7, #0
    2cb6:	d129      	bne.n	2d0c <stb_ccm_secure+0x140>
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */
    2cb8:	2301      	movs	r3, #1
    2cba:	702b      	strb	r3, [r5, #0]
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
	}

	if (hdr_len) {
    2cbc:	9b04      	ldr	r3, [sp, #16]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d003      	beq.n	2cca <stb_ccm_secure+0xfe>
		nonce[0] |= ADATA;
    2cc2:	782b      	ldrb	r3, [r5, #0]
    2cc4:	2240      	movs	r2, #64	; 0x40
    2cc6:	4313      	orrs	r3, r2
    2cc8:	702b      	strb	r3, [r5, #0]
	}

	nonce_0 = nonce[0];
    2cca:	782b      	ldrb	r3, [r5, #0]
    2ccc:	4699      	mov	r9, r3
	nonce[AES_BLOCKSIZE - 2] = 0;
    2cce:	2300      	movs	r3, #0
    2cd0:	73ab      	strb	r3, [r5, #14]

	if (aes_dir == AES_DIR_ENCRYPT) {
    2cd2:	4653      	mov	r3, sl
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d12a      	bne.n	2d2e <stb_ccm_secure+0x162>
		/* Authenticate. */
		if (mic_len > 0) {
    2cd8:	2f00      	cmp	r7, #0
    2cda:	d003      	beq.n	2ce4 <stb_ccm_secure+0x118>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    2cdc:	73ee      	strb	r6, [r5, #15]

			if (ENCRYPTION_REQD == enc_flag) {
    2cde:	4643      	mov	r3, r8
    2ce0:	2b01      	cmp	r3, #1
    2ce2:	d01a      	beq.n	2d1a <stb_ccm_secure+0x14e>
						hdr_len,
						pld_len);
			}
		}

		nonce[0] = PLAINTEXT_FLAG;
    2ce4:	2301      	movs	r3, #1
    2ce6:	702b      	strb	r3, [r5, #0]
		encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    2ce8:	9b03      	ldr	r3, [sp, #12]
    2cea:	9a04      	ldr	r2, [sp, #16]
    2cec:	4694      	mov	ip, r2
    2cee:	4463      	add	r3, ip
    2cf0:	0018      	movs	r0, r3
    2cf2:	0033      	movs	r3, r6
    2cf4:	003a      	movs	r2, r7
    2cf6:	0029      	movs	r1, r5
    2cf8:	4c3f      	ldr	r4, [pc, #252]	; (2df8 <stb_ccm_secure+0x22c>)
    2cfa:	47a0      	blx	r4
			}
		}
	}

#if (SAL_TYPE != ATXMEGA_SAL)
	TRX_SLEEP();
    2cfc:	4b35      	ldr	r3, [pc, #212]	; (2dd4 <stb_ccm_secure+0x208>)
    2cfe:	781b      	ldrb	r3, [r3, #0]
    2d00:	2b01      	cmp	r3, #1
    2d02:	d03d      	beq.n	2d80 <stb_ccm_secure+0x1b4>
	sal_aes_clean_up();
    2d04:	4b3b      	ldr	r3, [pc, #236]	; (2df4 <stb_ccm_secure+0x228>)
    2d06:	4798      	blx	r3
#endif
	return (STB_CCM_OK);
    2d08:	2000      	movs	r0, #0
    2d0a:	e059      	b.n	2dc0 <stb_ccm_secure+0x1f4>
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
    2d0c:	9b05      	ldr	r3, [sp, #20]
    2d0e:	3b02      	subs	r3, #2
    2d10:	009b      	lsls	r3, r3, #2
    2d12:	2201      	movs	r2, #1
    2d14:	4313      	orrs	r3, r2
    2d16:	702b      	strb	r3, [r5, #0]
    2d18:	e7d0      	b.n	2cbc <stb_ccm_secure+0xf0>
						buffer + hdr_len + pld_len,
    2d1a:	9b04      	ldr	r3, [sp, #16]
    2d1c:	1999      	adds	r1, r3, r6
				compute_mic(buffer,
    2d1e:	9803      	ldr	r0, [sp, #12]
    2d20:	4684      	mov	ip, r0
    2d22:	4461      	add	r1, ip
    2d24:	9600      	str	r6, [sp, #0]
    2d26:	002a      	movs	r2, r5
    2d28:	4c34      	ldr	r4, [pc, #208]	; (2dfc <stb_ccm_secure+0x230>)
    2d2a:	47a0      	blx	r4
    2d2c:	e7da      	b.n	2ce4 <stb_ccm_secure+0x118>
		if (enc_flag == ENCRYPTION_REQD) {
    2d2e:	4643      	mov	r3, r8
    2d30:	2b01      	cmp	r3, #1
    2d32:	d00d      	beq.n	2d50 <stb_ccm_secure+0x184>
		if (mic_len > 0) {
    2d34:	2f00      	cmp	r7, #0
    2d36:	d0e1      	beq.n	2cfc <stb_ccm_secure+0x130>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    2d38:	73ee      	strb	r6, [r5, #15]
			buffer += hdr_len + pld_len;
    2d3a:	9b03      	ldr	r3, [sp, #12]
    2d3c:	445b      	add	r3, fp
    2d3e:	0018      	movs	r0, r3
			if (memcmp(buffer, rcvd_mic, mic_len)) {
    2d40:	003a      	movs	r2, r7
    2d42:	a906      	add	r1, sp, #24
    2d44:	4b2e      	ldr	r3, [pc, #184]	; (2e00 <stb_ccm_secure+0x234>)
    2d46:	4798      	blx	r3
    2d48:	2800      	cmp	r0, #0
    2d4a:	d0d7      	beq.n	2cfc <stb_ccm_secure+0x130>
				return STB_CCM_MICERR;
    2d4c:	2003      	movs	r0, #3
    2d4e:	e037      	b.n	2dc0 <stb_ccm_secure+0x1f4>
			nonce[0] = PLAINTEXT_FLAG;
    2d50:	702b      	strb	r3, [r5, #0]
			encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    2d52:	9b03      	ldr	r3, [sp, #12]
    2d54:	9a04      	ldr	r2, [sp, #16]
    2d56:	4694      	mov	ip, r2
    2d58:	4463      	add	r3, ip
    2d5a:	0018      	movs	r0, r3
    2d5c:	0033      	movs	r3, r6
    2d5e:	003a      	movs	r2, r7
    2d60:	0029      	movs	r1, r5
    2d62:	4c25      	ldr	r4, [pc, #148]	; (2df8 <stb_ccm_secure+0x22c>)
    2d64:	47a0      	blx	r4
		if (mic_len > 0) {
    2d66:	2f00      	cmp	r7, #0
    2d68:	d0c8      	beq.n	2cfc <stb_ccm_secure+0x130>
			nonce[0] = nonce_0;
    2d6a:	464b      	mov	r3, r9
    2d6c:	702b      	strb	r3, [r5, #0]
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    2d6e:	73ee      	strb	r6, [r5, #15]
				compute_mic(buffer,
    2d70:	9600      	str	r6, [sp, #0]
    2d72:	9b04      	ldr	r3, [sp, #16]
    2d74:	002a      	movs	r2, r5
    2d76:	a906      	add	r1, sp, #24
    2d78:	9803      	ldr	r0, [sp, #12]
    2d7a:	4c20      	ldr	r4, [pc, #128]	; (2dfc <stb_ccm_secure+0x230>)
    2d7c:	47a0      	blx	r4
    2d7e:	e7dc      	b.n	2d3a <stb_ccm_secure+0x16e>
	TRX_SLEEP();
    2d80:	4b17      	ldr	r3, [pc, #92]	; (2de0 <stb_ccm_secure+0x214>)
    2d82:	4798      	blx	r3
    2d84:	e7be      	b.n	2d04 <stb_ccm_secure+0x138>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    2d86:	2300      	movs	r3, #0
    2d88:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    2d8a:	2704      	movs	r7, #4
    2d8c:	e002      	b.n	2d94 <stb_ccm_secure+0x1c8>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    2d8e:	2300      	movs	r3, #0
    2d90:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    2d92:	2710      	movs	r7, #16
	if ((sec_level & ~0x7) ||
    2d94:	9b03      	ldr	r3, [sp, #12]
    2d96:	2b00      	cmp	r3, #0
    2d98:	d00a      	beq.n	2db0 <stb_ccm_secure+0x1e4>
			(buffer == NULL) ||
    2d9a:	2d00      	cmp	r5, #0
    2d9c:	d008      	beq.n	2db0 <stb_ccm_secure+0x1e4>
			((uint16_t)pld_len + (uint16_t)hdr_len +
    2d9e:	9b04      	ldr	r3, [sp, #16]
    2da0:	469b      	mov	fp, r3
    2da2:	44b3      	add	fp, r6
			(uint16_t)mic_len > 127)
    2da4:	9705      	str	r7, [sp, #20]
			((uint16_t)pld_len + (uint16_t)hdr_len +
    2da6:	465b      	mov	r3, fp
    2da8:	19db      	adds	r3, r3, r7
			(nonce == NULL) ||
    2daa:	2b7f      	cmp	r3, #127	; 0x7f
    2dac:	dc00      	bgt.n	2db0 <stb_ccm_secure+0x1e4>
    2dae:	e74e      	b.n	2c4e <stb_ccm_secure+0x82>
		TRX_SLEEP();
    2db0:	4b08      	ldr	r3, [pc, #32]	; (2dd4 <stb_ccm_secure+0x208>)
    2db2:	781b      	ldrb	r3, [r3, #0]
    2db4:	2b01      	cmp	r3, #1
    2db6:	d100      	bne.n	2dba <stb_ccm_secure+0x1ee>
    2db8:	e746      	b.n	2c48 <stb_ccm_secure+0x7c>
		sal_aes_clean_up();
    2dba:	4b0e      	ldr	r3, [pc, #56]	; (2df4 <stb_ccm_secure+0x228>)
    2dbc:	4798      	blx	r3
		return (STB_CCM_ILLPARM);
    2dbe:	2001      	movs	r0, #1
}
    2dc0:	b00b      	add	sp, #44	; 0x2c
    2dc2:	bc3c      	pop	{r2, r3, r4, r5}
    2dc4:	4690      	mov	r8, r2
    2dc6:	4699      	mov	r9, r3
    2dc8:	46a2      	mov	sl, r4
    2dca:	46ab      	mov	fp, r5
    2dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dce:	46c0      	nop			; (mov r8, r8)
    2dd0:	20000291 	.word	0x20000291
    2dd4:	20000290 	.word	0x20000290
    2dd8:	000034a9 	.word	0x000034a9
    2ddc:	0000848c 	.word	0x0000848c
    2de0:	00002a81 	.word	0x00002a81
    2de4:	20000048 	.word	0x20000048
    2de8:	00003569 	.word	0x00003569
    2dec:	20000280 	.word	0x20000280
    2df0:	0000758b 	.word	0x0000758b
    2df4:	000034f9 	.word	0x000034f9
    2df8:	00002ef5 	.word	0x00002ef5
    2dfc:	00002e69 	.word	0x00002e69
    2e00:	0000756d 	.word	0x0000756d

00002e04 <encrypt_with_padding>:
 *
 * @param start Pointer to start address
 * @param buflen Number of bytes to be encrypted; if 0, nothing happens
 */
void encrypt_with_padding(uint8_t *start, uint8_t buflen)
{
    2e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e06:	b085      	sub	sp, #20
    2e08:	0004      	movs	r4, r0
    2e0a:	000e      	movs	r6, r1
	/* Encrypt the "full blocks". */
	while (buflen >= AES_BLOCKSIZE) {
    2e0c:	290f      	cmp	r1, #15
    2e0e:	d90f      	bls.n	2e30 <encrypt_with_padding+0x2c>
    2e10:	000d      	movs	r5, r1
    2e12:	3d10      	subs	r5, #16
    2e14:	b2ed      	uxtb	r5, r5
    2e16:	092d      	lsrs	r5, r5, #4
    2e18:	3501      	adds	r5, #1
    2e1a:	012d      	lsls	r5, r5, #4
    2e1c:	1945      	adds	r5, r0, r5
#if (SAL_TYPE == AT86RF2xx)
		sal_aes_wrrd(start, NULL);
    2e1e:	4f0f      	ldr	r7, [pc, #60]	; (2e5c <encrypt_with_padding+0x58>)
    2e20:	2100      	movs	r1, #0
    2e22:	0020      	movs	r0, r4
    2e24:	47b8      	blx	r7
#else
		sal_aes_exec(start);
#endif
		start += AES_BLOCKSIZE;
    2e26:	3410      	adds	r4, #16
	while (buflen >= AES_BLOCKSIZE) {
    2e28:	42ac      	cmp	r4, r5
    2e2a:	d1f9      	bne.n	2e20 <encrypt_with_padding+0x1c>
    2e2c:	230f      	movs	r3, #15
    2e2e:	401e      	ands	r6, r3
		buflen -= AES_BLOCKSIZE;
	}

	/* Pad the possible rest and encrypt it. */
	if (buflen) {
    2e30:	2e00      	cmp	r6, #0
    2e32:	d101      	bne.n	2e38 <encrypt_with_padding+0x34>
		sal_aes_wrrd(locbuf, NULL);
#else
		sal_aes_exec(locbuf);
#endif
	}
}
    2e34:	b005      	add	sp, #20
    2e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(locbuf, start, buflen);
    2e38:	0032      	movs	r2, r6
    2e3a:	0021      	movs	r1, r4
    2e3c:	4668      	mov	r0, sp
    2e3e:	4b08      	ldr	r3, [pc, #32]	; (2e60 <encrypt_with_padding+0x5c>)
    2e40:	4798      	blx	r3
		memset(locbuf + buflen, 0, AES_BLOCKSIZE - buflen);
    2e42:	2210      	movs	r2, #16
    2e44:	1b92      	subs	r2, r2, r6
    2e46:	0030      	movs	r0, r6
    2e48:	4468      	add	r0, sp
    2e4a:	2100      	movs	r1, #0
    2e4c:	4b05      	ldr	r3, [pc, #20]	; (2e64 <encrypt_with_padding+0x60>)
    2e4e:	4798      	blx	r3
		sal_aes_wrrd(locbuf, NULL);
    2e50:	2100      	movs	r1, #0
    2e52:	4668      	mov	r0, sp
    2e54:	4b01      	ldr	r3, [pc, #4]	; (2e5c <encrypt_with_padding+0x58>)
    2e56:	4798      	blx	r3
}
    2e58:	e7ec      	b.n	2e34 <encrypt_with_padding+0x30>
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	000034fd 	.word	0x000034fd
    2e60:	0000758b 	.word	0x0000758b
    2e64:	0000759d 	.word	0x0000759d

00002e68 <compute_mic>:
void compute_mic(uint8_t *buffer,
		uint8_t *mic,
		uint8_t *nonce,
		uint8_t hdr_len,
		uint8_t pld_len)
{
    2e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6a:	b087      	sub	sp, #28
    2e6c:	0005      	movs	r5, r0
    2e6e:	9100      	str	r1, [sp, #0]
    2e70:	9201      	str	r2, [sp, #4]
    2e72:	001c      	movs	r4, r3
    2e74:	ab0c      	add	r3, sp, #48	; 0x30
    2e76:	781e      	ldrb	r6, [r3, #0]
	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2e78:	2200      	movs	r2, #0
    2e7a:	2100      	movs	r1, #0
    2e7c:	2000      	movs	r0, #0
    2e7e:	4f18      	ldr	r7, [pc, #96]	; (2ee0 <compute_mic+0x78>)
    2e80:	47b8      	blx	r7
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(nonce, NULL);
    2e82:	2100      	movs	r1, #0
    2e84:	9801      	ldr	r0, [sp, #4]
    2e86:	4b17      	ldr	r3, [pc, #92]	; (2ee4 <compute_mic+0x7c>)
    2e88:	4798      	blx	r3
#else
	sal_aes_exec(nonce);
#endif
	sal_aes_setup(NULL, AES_MODE_CBC, AES_DIR_ENCRYPT);
    2e8a:	2200      	movs	r2, #0
    2e8c:	2102      	movs	r1, #2
    2e8e:	2000      	movs	r0, #0
    2e90:	47b8      	blx	r7

	if (hdr_len) {
    2e92:	2c00      	cmp	r4, #0
    2e94:	d108      	bne.n	2ea8 <compute_mic+0x40>
			encrypt_with_padding(buffer + firstlen,
					hdr_len - firstlen);
		}
	}

	encrypt_with_padding(buffer + hdr_len, pld_len);
    2e96:	1928      	adds	r0, r5, r4
    2e98:	0031      	movs	r1, r6
    2e9a:	4b13      	ldr	r3, [pc, #76]	; (2ee8 <compute_mic+0x80>)
    2e9c:	4798      	blx	r3

	sal_aes_read(mic);
    2e9e:	9800      	ldr	r0, [sp, #0]
    2ea0:	4b12      	ldr	r3, [pc, #72]	; (2eec <compute_mic+0x84>)
    2ea2:	4798      	blx	r3
}
    2ea4:	b007      	add	sp, #28
    2ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		firstlen = MIN(AES_BLOCKSIZE - 2, hdr_len);
    2ea8:	1c27      	adds	r7, r4, #0
    2eaa:	2c0e      	cmp	r4, #14
    2eac:	d900      	bls.n	2eb0 <compute_mic+0x48>
    2eae:	270e      	movs	r7, #14
    2eb0:	b2ff      	uxtb	r7, r7
		locbuf[0] = 0;
    2eb2:	2300      	movs	r3, #0
    2eb4:	aa02      	add	r2, sp, #8
    2eb6:	7013      	strb	r3, [r2, #0]
		locbuf[1] = hdr_len;
    2eb8:	0013      	movs	r3, r2
    2eba:	7054      	strb	r4, [r2, #1]
		memcpy(locbuf + 2, buffer, firstlen);
    2ebc:	003a      	movs	r2, r7
    2ebe:	0029      	movs	r1, r5
    2ec0:	1c98      	adds	r0, r3, #2
    2ec2:	4b0b      	ldr	r3, [pc, #44]	; (2ef0 <compute_mic+0x88>)
    2ec4:	4798      	blx	r3
		encrypt_with_padding(locbuf, firstlen + 2);
    2ec6:	1cb9      	adds	r1, r7, #2
    2ec8:	b2c9      	uxtb	r1, r1
    2eca:	a802      	add	r0, sp, #8
    2ecc:	4b06      	ldr	r3, [pc, #24]	; (2ee8 <compute_mic+0x80>)
    2ece:	4798      	blx	r3
		if (firstlen < hdr_len) {
    2ed0:	42bc      	cmp	r4, r7
    2ed2:	d9e0      	bls.n	2e96 <compute_mic+0x2e>
			encrypt_with_padding(buffer + firstlen,
    2ed4:	1be1      	subs	r1, r4, r7
    2ed6:	b2c9      	uxtb	r1, r1
    2ed8:	19e8      	adds	r0, r5, r7
    2eda:	4b03      	ldr	r3, [pc, #12]	; (2ee8 <compute_mic+0x80>)
    2edc:	4798      	blx	r3
    2ede:	e7da      	b.n	2e96 <compute_mic+0x2e>
    2ee0:	00003569 	.word	0x00003569
    2ee4:	000034fd 	.word	0x000034fd
    2ee8:	00002e05 	.word	0x00002e05
    2eec:	000036a1 	.word	0x000036a1
    2ef0:	0000758b 	.word	0x0000758b

00002ef4 <encrypt_pldmic>:
 */
void encrypt_pldmic(uint8_t *buffer,
		uint8_t *nonce,
		uint8_t mic_len,
		uint8_t pld_len)
{
    2ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ef6:	46d6      	mov	lr, sl
    2ef8:	464f      	mov	r7, r9
    2efa:	4646      	mov	r6, r8
    2efc:	b5c0      	push	{r6, r7, lr}
    2efe:	b084      	sub	sp, #16
    2f00:	0004      	movs	r4, r0
    2f02:	000f      	movs	r7, r1
    2f04:	0016      	movs	r6, r2
    2f06:	001d      	movs	r5, r3
	uint8_t ctr;
	uint8_t i;
	uint8_t keystream[AES_BLOCKSIZE];
	uint8_t *keystreamptr;

	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2f08:	2200      	movs	r2, #0
    2f0a:	2100      	movs	r1, #0
    2f0c:	2000      	movs	r0, #0
    2f0e:	4b31      	ldr	r3, [pc, #196]	; (2fd4 <encrypt_pldmic+0xe0>)
    2f10:	4798      	blx	r3

	/* Init first keystream block. */
	nonce[AES_BLOCKSIZE - 1] = ctr = 1;
    2f12:	2301      	movs	r3, #1
    2f14:	73fb      	strb	r3, [r7, #15]

	if (pld_len > 0) {
    2f16:	2d00      	cmp	r5, #0
    2f18:	d106      	bne.n	2f28 <encrypt_pldmic+0x34>
{
    2f1a:	2301      	movs	r3, #1
    2f1c:	469a      	mov	sl, r3
				/* Prepare the keystream for MIC. */
				nonce[AES_BLOCKSIZE - 1] = 0;

				sal_aes_wrrd(nonce, keystream);
			} else {
				sal_aes_read(keystream);
    2f1e:	4b2e      	ldr	r3, [pc, #184]	; (2fd8 <encrypt_pldmic+0xe4>)
    2f20:	4699      	mov	r9, r3
				sal_aes_wrrd(nonce, keystream);
    2f22:	4b2e      	ldr	r3, [pc, #184]	; (2fdc <encrypt_pldmic+0xe8>)
    2f24:	4698      	mov	r8, r3
    2f26:	e02e      	b.n	2f86 <encrypt_pldmic+0x92>
		sal_aes_wrrd(nonce, NULL);
    2f28:	2100      	movs	r1, #0
    2f2a:	0038      	movs	r0, r7
    2f2c:	4b2b      	ldr	r3, [pc, #172]	; (2fdc <encrypt_pldmic+0xe8>)
    2f2e:	4798      	blx	r3
    2f30:	e7f3      	b.n	2f1a <encrypt_pldmic+0x26>
				sal_aes_read(keystream);
    2f32:	4668      	mov	r0, sp
    2f34:	47c8      	blx	r9
    2f36:	e02f      	b.n	2f98 <encrypt_pldmic+0xa4>
			}
		} else {
			/* Prepare the next keystream block. */
			nonce[AES_BLOCKSIZE - 1] = ++ctr;
    2f38:	4653      	mov	r3, sl
    2f3a:	3301      	adds	r3, #1
    2f3c:	b2db      	uxtb	r3, r3
    2f3e:	469a      	mov	sl, r3
    2f40:	73fb      	strb	r3, [r7, #15]

			sal_aes_wrrd(nonce, keystream);
    2f42:	4669      	mov	r1, sp
    2f44:	0038      	movs	r0, r7
    2f46:	4b25      	ldr	r3, [pc, #148]	; (2fdc <encrypt_pldmic+0xe8>)
    2f48:	4798      	blx	r3
		}

		/* En/decrypt payload. */

		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2f4a:	1c2b      	adds	r3, r5, #0
    2f4c:	2d10      	cmp	r5, #16
    2f4e:	d900      	bls.n	2f52 <encrypt_pldmic+0x5e>
    2f50:	2310      	movs	r3, #16
    2f52:	b2db      	uxtb	r3, r3
				i--;
    2f54:	1e58      	subs	r0, r3, #1
    2f56:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d105      	bne.n	2f68 <encrypt_pldmic+0x74>
    2f5c:	e011      	b.n	2f82 <encrypt_pldmic+0x8e>
    2f5e:	b2db      	uxtb	r3, r3
				i--;
    2f60:	1e58      	subs	r0, r3, #1
    2f62:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2f64:	2b00      	cmp	r3, #0
    2f66:	d01c      	beq.n	2fa2 <encrypt_pldmic+0xae>
    2f68:	3001      	adds	r0, #1
{
    2f6a:	2300      	movs	r3, #0
		                /* */) {
			*buffer++ ^= *keystreamptr++;
    2f6c:	466a      	mov	r2, sp
    2f6e:	5c9a      	ldrb	r2, [r3, r2]
    2f70:	5ce1      	ldrb	r1, [r4, r3]
    2f72:	404a      	eors	r2, r1
    2f74:	54e2      	strb	r2, [r4, r3]
    2f76:	3301      	adds	r3, #1
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2f78:	4298      	cmp	r0, r3
    2f7a:	d1f7      	bne.n	2f6c <encrypt_pldmic+0x78>
    2f7c:	18e4      	adds	r4, r4, r3
		}

		if (pld_len <= AES_BLOCKSIZE) {
    2f7e:	2d10      	cmp	r5, #16
    2f80:	d90f      	bls.n	2fa2 <encrypt_pldmic+0xae>
			break;
		}

		pld_len -= AES_BLOCKSIZE;
    2f82:	3d10      	subs	r5, #16
    2f84:	b2ed      	uxtb	r5, r5
		if (pld_len <= AES_BLOCKSIZE) { /* Last block */
    2f86:	2d10      	cmp	r5, #16
    2f88:	d8d6      	bhi.n	2f38 <encrypt_pldmic+0x44>
			if (mic_len) {
    2f8a:	2e00      	cmp	r6, #0
    2f8c:	d0d1      	beq.n	2f32 <encrypt_pldmic+0x3e>
				nonce[AES_BLOCKSIZE - 1] = 0;
    2f8e:	2300      	movs	r3, #0
    2f90:	73fb      	strb	r3, [r7, #15]
				sal_aes_wrrd(nonce, keystream);
    2f92:	4669      	mov	r1, sp
    2f94:	0038      	movs	r0, r7
    2f96:	47c0      	blx	r8
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    2f98:	1c2b      	adds	r3, r5, #0
    2f9a:	2d10      	cmp	r5, #16
    2f9c:	d9df      	bls.n	2f5e <encrypt_pldmic+0x6a>
    2f9e:	2310      	movs	r3, #16
    2fa0:	e7dd      	b.n	2f5e <encrypt_pldmic+0x6a>
	}

	/* En/decrypt MIC. */

	if (mic_len) {
    2fa2:	2e00      	cmp	r6, #0
    2fa4:	d105      	bne.n	2fb2 <encrypt_pldmic+0xbe>

		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
			*buffer++ ^= *keystreamptr++;
		}
	}
}
    2fa6:	b004      	add	sp, #16
    2fa8:	bc1c      	pop	{r2, r3, r4}
    2faa:	4690      	mov	r8, r2
    2fac:	4699      	mov	r9, r3
    2fae:	46a2      	mov	sl, r4
    2fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sal_aes_read(keystream);
    2fb2:	4668      	mov	r0, sp
    2fb4:	4b08      	ldr	r3, [pc, #32]	; (2fd8 <encrypt_pldmic+0xe4>)
    2fb6:	4798      	blx	r3
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    2fb8:	3e01      	subs	r6, #1
    2fba:	b2f2      	uxtb	r2, r6
    2fbc:	3201      	adds	r2, #1
    2fbe:	2300      	movs	r3, #0
			*buffer++ ^= *keystreamptr++;
    2fc0:	4669      	mov	r1, sp
    2fc2:	5c59      	ldrb	r1, [r3, r1]
    2fc4:	5ce0      	ldrb	r0, [r4, r3]
    2fc6:	4041      	eors	r1, r0
    2fc8:	54e1      	strb	r1, [r4, r3]
    2fca:	3301      	adds	r3, #1
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    2fcc:	4293      	cmp	r3, r2
    2fce:	d1f7      	bne.n	2fc0 <encrypt_pldmic+0xcc>
    2fd0:	e7e9      	b.n	2fa6 <encrypt_pldmic+0xb2>
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	00003569 	.word	0x00003569
    2fd8:	000036a1 	.word	0x000036a1
    2fdc:	000034fd 	.word	0x000034fd

00002fe0 <MiMem_Alloc>:
********************************************************************/
uint8_t* MiMem_Alloc(uint8_t size)
{
    uint8_t loopIndex = 0;

    if (size <= MIMEM_BUFFER_SIZE)
    2fe0:	28a0      	cmp	r0, #160	; 0xa0
    2fe2:	d81a      	bhi.n	301a <MiMem_Alloc+0x3a>
    {
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
        {
            if (mimemBuffers[loopIndex].bufferFlag == false)
    2fe4:	23a4      	movs	r3, #164	; 0xa4
    2fe6:	4a0e      	ldr	r2, [pc, #56]	; (3020 <MiMem_Alloc+0x40>)
    2fe8:	5cd3      	ldrb	r3, [r2, r3]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d00b      	beq.n	3006 <MiMem_Alloc+0x26>
    2fee:	4a0d      	ldr	r2, [pc, #52]	; (3024 <MiMem_Alloc+0x44>)
    2ff0:	2301      	movs	r3, #1
    2ff2:	0018      	movs	r0, r3
    2ff4:	7811      	ldrb	r1, [r2, #0]
    2ff6:	2900      	cmp	r1, #0
    2ff8:	d006      	beq.n	3008 <MiMem_Alloc+0x28>
    2ffa:	3301      	adds	r3, #1
    2ffc:	32a8      	adds	r2, #168	; 0xa8
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    2ffe:	2b0a      	cmp	r3, #10
    3000:	d1f7      	bne.n	2ff2 <MiMem_Alloc+0x12>
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
            }
        }
    }
    //printf("\r\n MiMem Buffer Full/unavailable for given size");
    return NULL;
    3002:	2000      	movs	r0, #0
}
    3004:	4770      	bx	lr
            if (mimemBuffers[loopIndex].bufferFlag == false)
    3006:	2000      	movs	r0, #0
                mimemBuffers[loopIndex].bufferFlag = true;
    3008:	23a8      	movs	r3, #168	; 0xa8
    300a:	4343      	muls	r3, r0
    300c:	4804      	ldr	r0, [pc, #16]	; (3020 <MiMem_Alloc+0x40>)
    300e:	18c0      	adds	r0, r0, r3
    3010:	0003      	movs	r3, r0
    3012:	33a4      	adds	r3, #164	; 0xa4
    3014:	2201      	movs	r2, #1
    3016:	701a      	strb	r2, [r3, #0]
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
    3018:	e7f4      	b.n	3004 <MiMem_Alloc+0x24>
    return NULL;
    301a:	2000      	movs	r0, #0
    301c:	e7f2      	b.n	3004 <MiMem_Alloc+0x24>
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	20000c14 	.word	0x20000c14
    3024:	20000d60 	.word	0x20000d60

00003028 <MiMem_Free>:
* the given memory else returns error
*
* Note:			    none
********************************************************************/
uint8_t MiMem_Free(uint8_t* buffPtr)
{
    3028:	b530      	push	{r4, r5, lr}
    302a:	4b0d      	ldr	r3, [pc, #52]	; (3060 <MiMem_Free+0x38>)
    302c:	2200      	movs	r2, #0
    302e:	e003      	b.n	3038 <MiMem_Free+0x10>
    3030:	3201      	adds	r2, #1
    3032:	33a8      	adds	r3, #168	; 0xa8
	uint8_t loopIndex = 0;
	for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    3034:	2a0a      	cmp	r2, #10
    3036:	d010      	beq.n	305a <MiMem_Free+0x32>
	{
		if ((mimemBuffers[loopIndex].bufferFlag == true) &&
    3038:	0015      	movs	r5, r2
    303a:	0019      	movs	r1, r3
    303c:	31a4      	adds	r1, #164	; 0xa4
    303e:	7809      	ldrb	r1, [r1, #0]
    3040:	2900      	cmp	r1, #0
    3042:	d0f5      	beq.n	3030 <MiMem_Free+0x8>
    3044:	4298      	cmp	r0, r3
    3046:	d1f3      	bne.n	3030 <MiMem_Free+0x8>
		   ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer == buffPtr))
		{
			//printf("\r\n MiMem Buffer Free: %d", loopIndex);
			mimemBuffers[loopIndex].bufferFlag = false;
    3048:	23a8      	movs	r3, #168	; 0xa8
    304a:	435d      	muls	r5, r3
    304c:	4b04      	ldr	r3, [pc, #16]	; (3060 <MiMem_Free+0x38>)
    304e:	195d      	adds	r5, r3, r5
    3050:	35a4      	adds	r5, #164	; 0xa4
    3052:	2200      	movs	r2, #0
    3054:	702a      	strb	r2, [r5, #0]
			return 0;
    3056:	2000      	movs	r0, #0
    3058:	e000      	b.n	305c <MiMem_Free+0x34>
		}
	}
	//printf("\r\n MiMem Buffer Already Free");
	return 0xff;
    305a:	20ff      	movs	r0, #255	; 0xff
}
    305c:	bd30      	pop	{r4, r5, pc}
    305e:	46c0      	nop			; (mov r8, r8)
    3060:	20000c14 	.word	0x20000c14

00003064 <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    3064:	b5f0      	push	{r4, r5, r6, r7, lr}
    3066:	46c6      	mov	lr, r8
    3068:	b500      	push	{lr}
    306a:	0007      	movs	r7, r0
    306c:	4688      	mov	r8, r1
    306e:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    3070:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3072:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    3076:	2200      	movs	r2, #0
    3078:	4b1f      	ldr	r3, [pc, #124]	; (30f8 <miQueueReadOrRemove+0x94>)
    307a:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    307c:	7a03      	ldrb	r3, [r0, #8]
    307e:	2b00      	cmp	r3, #0
    3080:	d037      	beq.n	30f2 <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    3082:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    3084:	2d00      	cmp	r5, #0
    3086:	d019      	beq.n	30bc <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    3088:	2c00      	cmp	r4, #0
    308a:	d00c      	beq.n	30a6 <miQueueReadOrRemove+0x42>
    308c:	0026      	movs	r6, r4
    308e:	e000      	b.n	3092 <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    3090:	001c      	movs	r4, r3
				match = search->criteria_func(
    3092:	6869      	ldr	r1, [r5, #4]
    3094:	6860      	ldr	r0, [r4, #4]
    3096:	682b      	ldr	r3, [r5, #0]
    3098:	4798      	blx	r3
				if (match) {
    309a:	2800      	cmp	r0, #0
    309c:	d10f      	bne.n	30be <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    309e:	6823      	ldr	r3, [r4, #0]
    30a0:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    30a2:	2b00      	cmp	r3, #0
    30a4:	d1f4      	bne.n	3090 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    30a6:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    30a8:	2201      	movs	r2, #1
    30aa:	4b13      	ldr	r3, [pc, #76]	; (30f8 <miQueueReadOrRemove+0x94>)
    30ac:	701a      	strb	r2, [r3, #0]
    30ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    30b2:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    30b4:	0020      	movs	r0, r4
    30b6:	bc04      	pop	{r2}
    30b8:	4690      	mov	r8, r2
    30ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    30bc:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    30be:	2c00      	cmp	r4, #0
    30c0:	d0f2      	beq.n	30a8 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    30c2:	4643      	mov	r3, r8
    30c4:	2b00      	cmp	r3, #0
    30c6:	d1ef      	bne.n	30a8 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    30c8:	683b      	ldr	r3, [r7, #0]
    30ca:	429c      	cmp	r4, r3
    30cc:	d00c      	beq.n	30e8 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    30ce:	6823      	ldr	r3, [r4, #0]
    30d0:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	429c      	cmp	r4, r3
    30d6:	d00a      	beq.n	30ee <miQueueReadOrRemove+0x8a>
				q->size--;
    30d8:	7a3b      	ldrb	r3, [r7, #8]
    30da:	3b01      	subs	r3, #1
    30dc:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    30de:	683b      	ldr	r3, [r7, #0]
    30e0:	2b00      	cmp	r3, #0
    30e2:	d1e1      	bne.n	30a8 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    30e4:	607b      	str	r3, [r7, #4]
    30e6:	e7df      	b.n	30a8 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    30e8:	6823      	ldr	r3, [r4, #0]
    30ea:	603b      	str	r3, [r7, #0]
    30ec:	e7f1      	b.n	30d2 <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    30ee:	607e      	str	r6, [r7, #4]
    30f0:	e7f2      	b.n	30d8 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    30f2:	2400      	movs	r4, #0
    30f4:	e7d8      	b.n	30a8 <miQueueReadOrRemove+0x44>
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	20000008 	.word	0x20000008

000030fc <miQueueInit>:
	q->head = NULL;
    30fc:	2300      	movs	r3, #0
    30fe:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    3100:	6043      	str	r3, [r0, #4]
	q->size = 0;
    3102:	7203      	strb	r3, [r0, #8]
}
    3104:	4770      	bx	lr
	...

00003108 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    3108:	b672      	cpsid	i
    310a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    310e:	2200      	movs	r2, #0
    3110:	4b0a      	ldr	r3, [pc, #40]	; (313c <miQueueAppend+0x34>)
    3112:	701a      	strb	r2, [r3, #0]
		if (q->size == 0) {
    3114:	7a03      	ldrb	r3, [r0, #8]
    3116:	2b00      	cmp	r3, #0
    3118:	d00e      	beq.n	3138 <miQueueAppend+0x30>
			q->tail->nextItem = buf;
    311a:	6843      	ldr	r3, [r0, #4]
    311c:	6019      	str	r1, [r3, #0]
		q->tail = buf;
    311e:	6041      	str	r1, [r0, #4]
		buf->nextItem = NULL;
    3120:	2300      	movs	r3, #0
    3122:	600b      	str	r3, [r1, #0]
		q->size++;
    3124:	7a03      	ldrb	r3, [r0, #8]
    3126:	3301      	adds	r3, #1
    3128:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    312a:	2201      	movs	r2, #1
    312c:	4b03      	ldr	r3, [pc, #12]	; (313c <miQueueAppend+0x34>)
    312e:	701a      	strb	r2, [r3, #0]
    3130:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3134:	b662      	cpsie	i
} /* miQueueAppend */
    3136:	4770      	bx	lr
			q->head = buf;
    3138:	6001      	str	r1, [r0, #0]
    313a:	e7f0      	b.n	311e <miQueueAppend+0x16>
    313c:	20000008 	.word	0x20000008

00003140 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    3140:	b510      	push	{r4, lr}
    3142:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    3144:	2100      	movs	r1, #0
    3146:	4b01      	ldr	r3, [pc, #4]	; (314c <miQueueRemove+0xc>)
    3148:	4798      	blx	r3
}
    314a:	bd10      	pop	{r4, pc}
    314c:	00003065 	.word	0x00003065

00003150 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3150:	b530      	push	{r4, r5, lr}
	if (timers) {
    3152:	4b14      	ldr	r3, [pc, #80]	; (31a4 <placeTimer+0x54>)
    3154:	681d      	ldr	r5, [r3, #0]
    3156:	2d00      	cmp	r5, #0
    3158:	d01c      	beq.n	3194 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    315a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    315c:	6869      	ldr	r1, [r5, #4]
    315e:	428a      	cmp	r2, r1
    3160:	d309      	bcc.n	3176 <placeTimer+0x26>
    3162:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    3164:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3166:	6823      	ldr	r3, [r4, #0]
    3168:	2b00      	cmp	r3, #0
    316a:	d008      	beq.n	317e <placeTimer+0x2e>
			if (timeout < t->timeout) {
    316c:	6859      	ldr	r1, [r3, #4]
    316e:	4291      	cmp	r1, r2
    3170:	d803      	bhi.n	317a <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3172:	001c      	movs	r4, r3
    3174:	e7f6      	b.n	3164 <placeTimer+0x14>
    3176:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    3178:	2400      	movs	r4, #0
				t->timeout -= timeout;
    317a:	1a89      	subs	r1, r1, r2
    317c:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    317e:	6042      	str	r2, [r0, #4]

		if (prev) {
    3180:	2c00      	cmp	r4, #0
    3182:	d003      	beq.n	318c <placeTimer+0x3c>
			timer->next = prev->next;
    3184:	6823      	ldr	r3, [r4, #0]
    3186:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3188:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    318a:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    318c:	6005      	str	r5, [r0, #0]
			timers = timer;
    318e:	4b05      	ldr	r3, [pc, #20]	; (31a4 <placeTimer+0x54>)
    3190:	6018      	str	r0, [r3, #0]
    3192:	e7fa      	b.n	318a <placeTimer+0x3a>
		timer->next = NULL;
    3194:	2300      	movs	r3, #0
    3196:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3198:	6883      	ldr	r3, [r0, #8]
    319a:	6043      	str	r3, [r0, #4]
		timers = timer;
    319c:	4b01      	ldr	r3, [pc, #4]	; (31a4 <placeTimer+0x54>)
    319e:	6018      	str	r0, [r3, #0]
}
    31a0:	e7f3      	b.n	318a <placeTimer+0x3a>
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	20000294 	.word	0x20000294

000031a8 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    31a8:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    31aa:	4a04      	ldr	r2, [pc, #16]	; (31bc <SYS_HwExpiry_Cb+0x14>)
    31ac:	7813      	ldrb	r3, [r2, #0]
    31ae:	3301      	adds	r3, #1
    31b0:	b2db      	uxtb	r3, r3
    31b2:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    31b4:	4802      	ldr	r0, [pc, #8]	; (31c0 <SYS_HwExpiry_Cb+0x18>)
    31b6:	4b03      	ldr	r3, [pc, #12]	; (31c4 <SYS_HwExpiry_Cb+0x1c>)
    31b8:	4798      	blx	r3
}
    31ba:	bd10      	pop	{r4, pc}
    31bc:	200012a4 	.word	0x200012a4
    31c0:	00002710 	.word	0x00002710
    31c4:	00004641 	.word	0x00004641

000031c8 <SYS_TimerInit>:
{
    31c8:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    31ca:	2400      	movs	r4, #0
    31cc:	4b06      	ldr	r3, [pc, #24]	; (31e8 <SYS_TimerInit+0x20>)
    31ce:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    31d0:	4806      	ldr	r0, [pc, #24]	; (31ec <SYS_TimerInit+0x24>)
    31d2:	4b07      	ldr	r3, [pc, #28]	; (31f0 <SYS_TimerInit+0x28>)
    31d4:	4798      	blx	r3
	common_tc_init();
    31d6:	4b07      	ldr	r3, [pc, #28]	; (31f4 <SYS_TimerInit+0x2c>)
    31d8:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    31da:	4807      	ldr	r0, [pc, #28]	; (31f8 <SYS_TimerInit+0x30>)
    31dc:	4b07      	ldr	r3, [pc, #28]	; (31fc <SYS_TimerInit+0x34>)
    31de:	4798      	blx	r3
	timers = NULL;
    31e0:	4b07      	ldr	r3, [pc, #28]	; (3200 <SYS_TimerInit+0x38>)
    31e2:	601c      	str	r4, [r3, #0]
}
    31e4:	bd10      	pop	{r4, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	200012a4 	.word	0x200012a4
    31ec:	000031a9 	.word	0x000031a9
    31f0:	00004731 	.word	0x00004731
    31f4:	000046ad 	.word	0x000046ad
    31f8:	00002710 	.word	0x00002710
    31fc:	00004641 	.word	0x00004641
    3200:	20000294 	.word	0x20000294

00003204 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3204:	4b0e      	ldr	r3, [pc, #56]	; (3240 <SYS_TimerStop+0x3c>)
    3206:	681a      	ldr	r2, [r3, #0]
    3208:	2a00      	cmp	r2, #0
    320a:	d014      	beq.n	3236 <SYS_TimerStop+0x32>
		if (t == timer) {
    320c:	4282      	cmp	r2, r0
    320e:	d013      	beq.n	3238 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3210:	6813      	ldr	r3, [r2, #0]
    3212:	2b00      	cmp	r3, #0
    3214:	d00f      	beq.n	3236 <SYS_TimerStop+0x32>
		if (t == timer) {
    3216:	4298      	cmp	r0, r3
    3218:	d001      	beq.n	321e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    321a:	001a      	movs	r2, r3
    321c:	e7f8      	b.n	3210 <SYS_TimerStop+0xc>
			if (prev) {
    321e:	2a00      	cmp	r2, #0
    3220:	d00a      	beq.n	3238 <SYS_TimerStop+0x34>
				prev->next = t->next;
    3222:	6803      	ldr	r3, [r0, #0]
    3224:	6013      	str	r3, [r2, #0]
			if (t->next) {
    3226:	6803      	ldr	r3, [r0, #0]
    3228:	2b00      	cmp	r3, #0
    322a:	d004      	beq.n	3236 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    322c:	6842      	ldr	r2, [r0, #4]
    322e:	6859      	ldr	r1, [r3, #4]
    3230:	468c      	mov	ip, r1
    3232:	4462      	add	r2, ip
    3234:	605a      	str	r2, [r3, #4]
}
    3236:	4770      	bx	lr
				timers = t->next;
    3238:	4b01      	ldr	r3, [pc, #4]	; (3240 <SYS_TimerStop+0x3c>)
    323a:	6802      	ldr	r2, [r0, #0]
    323c:	601a      	str	r2, [r3, #0]
    323e:	e7f2      	b.n	3226 <SYS_TimerStop+0x22>
    3240:	20000294 	.word	0x20000294

00003244 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3244:	4b09      	ldr	r3, [pc, #36]	; (326c <SYS_TimerStarted+0x28>)
    3246:	681b      	ldr	r3, [r3, #0]
    3248:	2b00      	cmp	r3, #0
    324a:	d00a      	beq.n	3262 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    324c:	4283      	cmp	r3, r0
    324e:	d00a      	beq.n	3266 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3250:	681b      	ldr	r3, [r3, #0]
    3252:	2b00      	cmp	r3, #0
    3254:	d003      	beq.n	325e <SYS_TimerStarted+0x1a>
		if (t == timer) {
    3256:	4298      	cmp	r0, r3
    3258:	d1fa      	bne.n	3250 <SYS_TimerStarted+0xc>
			return true;
    325a:	2001      	movs	r0, #1
    325c:	e000      	b.n	3260 <SYS_TimerStarted+0x1c>
	return false;
    325e:	2000      	movs	r0, #0
}
    3260:	4770      	bx	lr
	return false;
    3262:	2000      	movs	r0, #0
    3264:	e7fc      	b.n	3260 <SYS_TimerStarted+0x1c>
			return true;
    3266:	2001      	movs	r0, #1
    3268:	e7fa      	b.n	3260 <SYS_TimerStarted+0x1c>
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	20000294 	.word	0x20000294

00003270 <SYS_TimerStart>:
{
    3270:	b510      	push	{r4, lr}
    3272:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    3274:	4b04      	ldr	r3, [pc, #16]	; (3288 <SYS_TimerStart+0x18>)
    3276:	4798      	blx	r3
    3278:	2800      	cmp	r0, #0
    327a:	d000      	beq.n	327e <SYS_TimerStart+0xe>
}
    327c:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    327e:	0020      	movs	r0, r4
    3280:	4b02      	ldr	r3, [pc, #8]	; (328c <SYS_TimerStart+0x1c>)
    3282:	4798      	blx	r3
}
    3284:	e7fa      	b.n	327c <SYS_TimerStart+0xc>
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	00003245 	.word	0x00003245
    328c:	00003151 	.word	0x00003151

00003290 <SYS_TimerTaskHandler>:
{
    3290:	b5f0      	push	{r4, r5, r6, r7, lr}
    3292:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    3294:	4b1d      	ldr	r3, [pc, #116]	; (330c <SYS_TimerTaskHandler+0x7c>)
    3296:	781b      	ldrb	r3, [r3, #0]
    3298:	2b00      	cmp	r3, #0
    329a:	d035      	beq.n	3308 <SYS_TimerTaskHandler+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    329c:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    32a0:	4253      	negs	r3, r2
    32a2:	4153      	adcs	r3, r2
    32a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    32a6:	b672      	cpsid	i
    32a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    32ac:	2100      	movs	r1, #0
    32ae:	4b18      	ldr	r3, [pc, #96]	; (3310 <SYS_TimerTaskHandler+0x80>)
    32b0:	7019      	strb	r1, [r3, #0]
	return flags;
    32b2:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    32b4:	4a15      	ldr	r2, [pc, #84]	; (330c <SYS_TimerTaskHandler+0x7c>)
    32b6:	7813      	ldrb	r3, [r2, #0]
    32b8:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    32ba:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    32bc:	2800      	cmp	r0, #0
    32be:	d005      	beq.n	32cc <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    32c0:	3101      	adds	r1, #1
    32c2:	4a13      	ldr	r2, [pc, #76]	; (3310 <SYS_TimerTaskHandler+0x80>)
    32c4:	7011      	strb	r1, [r2, #0]
    32c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    32ca:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    32cc:	009d      	lsls	r5, r3, #2
    32ce:	18ed      	adds	r5, r5, r3
    32d0:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    32d2:	4e10      	ldr	r6, [pc, #64]	; (3314 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    32d4:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    32d6:	e005      	b.n	32e4 <SYS_TimerTaskHandler+0x54>
			placeTimer(timer);
    32d8:	0020      	movs	r0, r4
    32da:	4b0f      	ldr	r3, [pc, #60]	; (3318 <SYS_TimerTaskHandler+0x88>)
    32dc:	4798      	blx	r3
    32de:	e00d      	b.n	32fc <SYS_TimerTaskHandler+0x6c>
			timer->handler(timer);
    32e0:	0020      	movs	r0, r4
    32e2:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    32e4:	6834      	ldr	r4, [r6, #0]
    32e6:	2c00      	cmp	r4, #0
    32e8:	d00e      	beq.n	3308 <SYS_TimerTaskHandler+0x78>
    32ea:	6863      	ldr	r3, [r4, #4]
    32ec:	429d      	cmp	r5, r3
    32ee:	d309      	bcc.n	3304 <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    32f0:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    32f2:	6823      	ldr	r3, [r4, #0]
    32f4:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    32f6:	7b23      	ldrb	r3, [r4, #12]
    32f8:	2b01      	cmp	r3, #1
    32fa:	d0ed      	beq.n	32d8 <SYS_TimerTaskHandler+0x48>
		if (timer->handler) {
    32fc:	6923      	ldr	r3, [r4, #16]
    32fe:	2b00      	cmp	r3, #0
    3300:	d1ee      	bne.n	32e0 <SYS_TimerTaskHandler+0x50>
    3302:	e7ef      	b.n	32e4 <SYS_TimerTaskHandler+0x54>
		timers->timeout -= elapsed;
    3304:	1b5d      	subs	r5, r3, r5
    3306:	6065      	str	r5, [r4, #4]
}
    3308:	b003      	add	sp, #12
    330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    330c:	200012a4 	.word	0x200012a4
    3310:	20000008 	.word	0x20000008
    3314:	20000294 	.word	0x20000294
    3318:	00003151 	.word	0x00003151

0000331c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    331c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    331e:	4b01      	ldr	r3, [pc, #4]	; (3324 <tc_cca_callback+0x8>)
    3320:	4798      	blx	r3
}
    3322:	bd10      	pop	{r4, pc}
    3324:	00004715 	.word	0x00004715

00003328 <tc_ovf_callback>:
{
    3328:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    332a:	4b01      	ldr	r3, [pc, #4]	; (3330 <tc_ovf_callback+0x8>)
    332c:	4798      	blx	r3
}
    332e:	bd10      	pop	{r4, pc}
    3330:	000046cd 	.word	0x000046cd

00003334 <tmr_read_count>:
{
    3334:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    3336:	4802      	ldr	r0, [pc, #8]	; (3340 <tmr_read_count+0xc>)
    3338:	4b02      	ldr	r3, [pc, #8]	; (3344 <tmr_read_count+0x10>)
    333a:	4798      	blx	r3
    333c:	b280      	uxth	r0, r0
}
    333e:	bd10      	pop	{r4, pc}
    3340:	200012dc 	.word	0x200012dc
    3344:	00001d29 	.word	0x00001d29

00003348 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    3348:	4b03      	ldr	r3, [pc, #12]	; (3358 <tmr_disable_cc_interrupt+0x10>)
    334a:	2110      	movs	r1, #16
    334c:	681a      	ldr	r2, [r3, #0]
    334e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    3350:	7e5a      	ldrb	r2, [r3, #25]
    3352:	438a      	bics	r2, r1
    3354:	765a      	strb	r2, [r3, #25]
}
    3356:	4770      	bx	lr
    3358:	200012dc 	.word	0x200012dc

0000335c <tmr_enable_cc_interrupt>:
{
    335c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    335e:	4c0a      	ldr	r4, [pc, #40]	; (3388 <tmr_enable_cc_interrupt+0x2c>)
    3360:	6820      	ldr	r0, [r4, #0]
    3362:	4b0a      	ldr	r3, [pc, #40]	; (338c <tmr_enable_cc_interrupt+0x30>)
    3364:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3366:	4b0a      	ldr	r3, [pc, #40]	; (3390 <tmr_enable_cc_interrupt+0x34>)
    3368:	5c1b      	ldrb	r3, [r3, r0]
    336a:	221f      	movs	r2, #31
    336c:	401a      	ands	r2, r3
    336e:	2301      	movs	r3, #1
    3370:	4093      	lsls	r3, r2
    3372:	4a08      	ldr	r2, [pc, #32]	; (3394 <tmr_enable_cc_interrupt+0x38>)
    3374:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3376:	7e63      	ldrb	r3, [r4, #25]
    3378:	2210      	movs	r2, #16
    337a:	4313      	orrs	r3, r2
    337c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    337e:	6823      	ldr	r3, [r4, #0]
    3380:	2210      	movs	r2, #16
    3382:	735a      	strb	r2, [r3, #13]
}
    3384:	bd10      	pop	{r4, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	200012dc 	.word	0x200012dc
    338c:	00001ab5 	.word	0x00001ab5
    3390:	000084ac 	.word	0x000084ac
    3394:	e000e100 	.word	0xe000e100

00003398 <tmr_write_cmpreg>:
{
    3398:	b510      	push	{r4, lr}
    339a:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    339c:	2100      	movs	r1, #0
    339e:	4802      	ldr	r0, [pc, #8]	; (33a8 <tmr_write_cmpreg+0x10>)
    33a0:	4b02      	ldr	r3, [pc, #8]	; (33ac <tmr_write_cmpreg+0x14>)
    33a2:	4798      	blx	r3
}
    33a4:	bd10      	pop	{r4, pc}
    33a6:	46c0      	nop			; (mov r8, r8)
    33a8:	200012dc 	.word	0x200012dc
    33ac:	00001d55 	.word	0x00001d55

000033b0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    33b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33b2:	46ce      	mov	lr, r9
    33b4:	4647      	mov	r7, r8
    33b6:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    33b8:	4a2d      	ldr	r2, [pc, #180]	; (3470 <tmr_init+0xc0>)
    33ba:	2300      	movs	r3, #0
    33bc:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    33be:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    33c0:	2100      	movs	r1, #0
    33c2:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    33c4:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    33c6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    33c8:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    33ca:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    33cc:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    33ce:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    33d0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    33d2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    33d4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    33d6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    33d8:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    33da:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    33dc:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    33de:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    33e0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    33e2:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    33e4:	3b01      	subs	r3, #1
    33e6:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    33e8:	4c22      	ldr	r4, [pc, #136]	; (3474 <tmr_init+0xc4>)
    33ea:	4923      	ldr	r1, [pc, #140]	; (3478 <tmr_init+0xc8>)
    33ec:	0020      	movs	r0, r4
    33ee:	4b23      	ldr	r3, [pc, #140]	; (347c <tmr_init+0xcc>)
    33f0:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    33f2:	2200      	movs	r2, #0
    33f4:	4922      	ldr	r1, [pc, #136]	; (3480 <tmr_init+0xd0>)
    33f6:	0020      	movs	r0, r4
    33f8:	4d22      	ldr	r5, [pc, #136]	; (3484 <tmr_init+0xd4>)
    33fa:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    33fc:	2202      	movs	r2, #2
    33fe:	4922      	ldr	r1, [pc, #136]	; (3488 <tmr_init+0xd8>)
    3400:	0020      	movs	r0, r4
    3402:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3404:	6820      	ldr	r0, [r4, #0]
    3406:	4b21      	ldr	r3, [pc, #132]	; (348c <tmr_init+0xdc>)
    3408:	4699      	mov	r9, r3
    340a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    340c:	4b20      	ldr	r3, [pc, #128]	; (3490 <tmr_init+0xe0>)
    340e:	4698      	mov	r8, r3
    3410:	5c1b      	ldrb	r3, [r3, r0]
    3412:	261f      	movs	r6, #31
    3414:	4033      	ands	r3, r6
    3416:	2501      	movs	r5, #1
    3418:	002a      	movs	r2, r5
    341a:	409a      	lsls	r2, r3
    341c:	4f1d      	ldr	r7, [pc, #116]	; (3494 <tmr_init+0xe4>)
    341e:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    3420:	7e63      	ldrb	r3, [r4, #25]
    3422:	2201      	movs	r2, #1
    3424:	4313      	orrs	r3, r2
    3426:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3428:	6823      	ldr	r3, [r4, #0]
    342a:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    342c:	0018      	movs	r0, r3
    342e:	47c8      	blx	r9
    3430:	4643      	mov	r3, r8
    3432:	5c1b      	ldrb	r3, [r3, r0]
    3434:	401e      	ands	r6, r3
    3436:	40b5      	lsls	r5, r6
    3438:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    343a:	7e63      	ldrb	r3, [r4, #25]
    343c:	2210      	movs	r2, #16
    343e:	4313      	orrs	r3, r2
    3440:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3442:	6822      	ldr	r2, [r4, #0]
    3444:	2310      	movs	r3, #16
    3446:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3448:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    344a:	b25b      	sxtb	r3, r3
    344c:	2b00      	cmp	r3, #0
    344e:	dbfb      	blt.n	3448 <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3450:	8813      	ldrh	r3, [r2, #0]
    3452:	2102      	movs	r1, #2
    3454:	430b      	orrs	r3, r1
    3456:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3458:	2000      	movs	r0, #0
    345a:	4b0f      	ldr	r3, [pc, #60]	; (3498 <tmr_init+0xe8>)
    345c:	4798      	blx	r3
    345e:	490f      	ldr	r1, [pc, #60]	; (349c <tmr_init+0xec>)
    3460:	4b0f      	ldr	r3, [pc, #60]	; (34a0 <tmr_init+0xf0>)
    3462:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3464:	b2c0      	uxtb	r0, r0
}
    3466:	bc0c      	pop	{r2, r3}
    3468:	4690      	mov	r8, r2
    346a:	4699      	mov	r9, r3
    346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	200012a8 	.word	0x200012a8
    3474:	200012dc 	.word	0x200012dc
    3478:	42002c00 	.word	0x42002c00
    347c:	00001aed 	.word	0x00001aed
    3480:	00003329 	.word	0x00003329
    3484:	000019ed 	.word	0x000019ed
    3488:	0000331d 	.word	0x0000331d
    348c:	00001ab5 	.word	0x00001ab5
    3490:	000084ac 	.word	0x000084ac
    3494:	e000e100 	.word	0xe000e100
    3498:	0000177d 	.word	0x0000177d
    349c:	000f4240 	.word	0x000f4240
    34a0:	000071e5 	.word	0x000071e5

000034a4 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    34a4:	4770      	bx	lr
	...

000034a8 <sal_aes_restart>:
 * When using sal_aes_wrrd(), call sal_aes_read() to get the result
 * of the last AES operation BEFORE you put the transceiver unit to
 * sleep state!
 */
void sal_aes_restart(void)
{
    34a8:	b570      	push	{r4, r5, r6, lr}
	 * This is not required anymore for SPI transceivers beyond
	 * these two mentioned transceivers.
	 */
	uint8_t *keyp;
	uint8_t save_cmd;
	if (last_dir == AES_DIR_ENCRYPT) {
    34aa:	4b0c      	ldr	r3, [pc, #48]	; (34dc <sal_aes_restart+0x34>)
    34ac:	781b      	ldrb	r3, [r3, #0]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d012      	beq.n	34d8 <sal_aes_restart+0x30>
		keyp = enc_key;
	} else {
		keyp = dec_key;
    34b2:	490b      	ldr	r1, [pc, #44]	; (34e0 <sal_aes_restart+0x38>)
	}

	save_cmd = aes_buf[0];
    34b4:	4c0b      	ldr	r4, [pc, #44]	; (34e4 <sal_aes_restart+0x3c>)
    34b6:	7825      	ldrb	r5, [r4, #0]
	aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    34b8:	2310      	movs	r3, #16
    34ba:	7023      	strb	r3, [r4, #0]

	/* Fill in key. */
	memcpy(aes_buf + 1, keyp, AES_KEYSIZE);
    34bc:	1c60      	adds	r0, r4, #1
    34be:	2210      	movs	r2, #16
    34c0:	4b09      	ldr	r3, [pc, #36]	; (34e8 <sal_aes_restart+0x40>)
    34c2:	4798      	blx	r3

	/* Write to SRAM in one step. */
	trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    34c4:	2211      	movs	r2, #17
    34c6:	0021      	movs	r1, r4
    34c8:	2083      	movs	r0, #131	; 0x83
    34ca:	4b08      	ldr	r3, [pc, #32]	; (34ec <sal_aes_restart+0x44>)
    34cc:	4798      	blx	r3
			AES_BLOCKSIZE + 1);

	aes_buf[0] = save_cmd;
    34ce:	7025      	strb	r5, [r4, #0]
	setup_flag = true;
    34d0:	2201      	movs	r2, #1
    34d2:	4b07      	ldr	r3, [pc, #28]	; (34f0 <sal_aes_restart+0x48>)
    34d4:	701a      	strb	r2, [r3, #0]
}
    34d6:	bd70      	pop	{r4, r5, r6, pc}
		keyp = enc_key;
    34d8:	4906      	ldr	r1, [pc, #24]	; (34f4 <sal_aes_restart+0x4c>)
    34da:	e7eb      	b.n	34b4 <sal_aes_restart+0xc>
    34dc:	20000049 	.word	0x20000049
    34e0:	200002ac 	.word	0x200002ac
    34e4:	20000298 	.word	0x20000298
    34e8:	0000758b 	.word	0x0000758b
    34ec:	00003c65 	.word	0x00003c65
    34f0:	200002cc 	.word	0x200002cc
    34f4:	200002bc 	.word	0x200002bc

000034f8 <_sal_aes_clean_up>:
/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
}
    34f8:	4770      	bx	lr
	...

000034fc <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    34fc:	b570      	push	{r4, r5, r6, lr}
    34fe:	0003      	movs	r3, r0
    3500:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3502:	4c14      	ldr	r4, [pc, #80]	; (3554 <sal_aes_wrrd+0x58>)
    3504:	1c60      	adds	r0, r4, #1
    3506:	2210      	movs	r2, #16
    3508:	0019      	movs	r1, r3
    350a:	4b13      	ldr	r3, [pc, #76]	; (3558 <sal_aes_wrrd+0x5c>)
    350c:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    350e:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3510:	4b12      	ldr	r3, [pc, #72]	; (355c <sal_aes_wrrd+0x60>)
    3512:	781b      	ldrb	r3, [r3, #0]
    3514:	2b00      	cmp	r3, #0
    3516:	d015      	beq.n	3544 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3518:	2212      	movs	r2, #18
    351a:	490e      	ldr	r1, [pc, #56]	; (3554 <sal_aes_wrrd+0x58>)
    351c:	2083      	movs	r0, #131	; 0x83
    351e:	4b10      	ldr	r3, [pc, #64]	; (3560 <sal_aes_wrrd+0x64>)
    3520:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3522:	2200      	movs	r2, #0
    3524:	4b0d      	ldr	r3, [pc, #52]	; (355c <sal_aes_wrrd+0x60>)
    3526:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    3528:	2d00      	cmp	r5, #0
    352a:	d005      	beq.n	3538 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    352c:	2210      	movs	r2, #16
    352e:	4909      	ldr	r1, [pc, #36]	; (3554 <sal_aes_wrrd+0x58>)
    3530:	3101      	adds	r1, #1
    3532:	0028      	movs	r0, r5
    3534:	4b08      	ldr	r3, [pc, #32]	; (3558 <sal_aes_wrrd+0x5c>)
    3536:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    3538:	4b06      	ldr	r3, [pc, #24]	; (3554 <sal_aes_wrrd+0x58>)
    353a:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    353c:	2018      	movs	r0, #24
    353e:	4b09      	ldr	r3, [pc, #36]	; (3564 <sal_aes_wrrd+0x68>)
    3540:	4798      	blx	r3
}
    3542:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3544:	2211      	movs	r2, #17
    3546:	4903      	ldr	r1, [pc, #12]	; (3554 <sal_aes_wrrd+0x58>)
    3548:	3101      	adds	r1, #1
    354a:	2084      	movs	r0, #132	; 0x84
    354c:	4b04      	ldr	r3, [pc, #16]	; (3560 <sal_aes_wrrd+0x64>)
    354e:	4798      	blx	r3
    3550:	e7ea      	b.n	3528 <sal_aes_wrrd+0x2c>
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	20000298 	.word	0x20000298
    3558:	0000758b 	.word	0x0000758b
    355c:	200002cc 	.word	0x200002cc
    3560:	00003f59 	.word	0x00003f59
    3564:	00000155 	.word	0x00000155

00003568 <sal_aes_setup>:
{
    3568:	b5f0      	push	{r4, r5, r6, r7, lr}
    356a:	46c6      	mov	lr, r8
    356c:	b500      	push	{lr}
    356e:	b084      	sub	sp, #16
    3570:	0005      	movs	r5, r0
    3572:	000e      	movs	r6, r1
    3574:	0014      	movs	r4, r2
	if (key != NULL) {
    3576:	2800      	cmp	r0, #0
    3578:	d017      	beq.n	35aa <sal_aes_setup+0x42>
		dec_initialized = false;
    357a:	2200      	movs	r2, #0
    357c:	4b3e      	ldr	r3, [pc, #248]	; (3678 <sal_aes_setup+0x110>)
    357e:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    3580:	3202      	adds	r2, #2
    3582:	4b3e      	ldr	r3, [pc, #248]	; (367c <sal_aes_setup+0x114>)
    3584:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    3586:	320e      	adds	r2, #14
    3588:	0001      	movs	r1, r0
    358a:	483d      	ldr	r0, [pc, #244]	; (3680 <sal_aes_setup+0x118>)
    358c:	4b3d      	ldr	r3, [pc, #244]	; (3684 <sal_aes_setup+0x11c>)
    358e:	4698      	mov	r8, r3
    3590:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3592:	4f3d      	ldr	r7, [pc, #244]	; (3688 <sal_aes_setup+0x120>)
    3594:	2310      	movs	r3, #16
    3596:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3598:	1c78      	adds	r0, r7, #1
    359a:	2210      	movs	r2, #16
    359c:	0029      	movs	r1, r5
    359e:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    35a0:	2211      	movs	r2, #17
    35a2:	0039      	movs	r1, r7
    35a4:	2083      	movs	r0, #131	; 0x83
    35a6:	4b39      	ldr	r3, [pc, #228]	; (368c <sal_aes_setup+0x124>)
    35a8:	4798      	blx	r3
	switch (dir) {
    35aa:	2c00      	cmp	r4, #0
    35ac:	d003      	beq.n	35b6 <sal_aes_setup+0x4e>
    35ae:	2c01      	cmp	r4, #1
    35b0:	d02f      	beq.n	3612 <sal_aes_setup+0xaa>
		return false;
    35b2:	2000      	movs	r0, #0
    35b4:	e01b      	b.n	35ee <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    35b6:	4b31      	ldr	r3, [pc, #196]	; (367c <sal_aes_setup+0x114>)
    35b8:	781b      	ldrb	r3, [r3, #0]
    35ba:	2b01      	cmp	r3, #1
    35bc:	d01b      	beq.n	35f6 <sal_aes_setup+0x8e>
	last_dir = dir;
    35be:	4b2f      	ldr	r3, [pc, #188]	; (367c <sal_aes_setup+0x114>)
    35c0:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    35c2:	2e00      	cmp	r6, #0
    35c4:	d002      	beq.n	35cc <sal_aes_setup+0x64>
		return (false);
    35c6:	2000      	movs	r0, #0
	switch (enc_mode) {
    35c8:	2e02      	cmp	r6, #2
    35ca:	d110      	bne.n	35ee <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    35cc:	0136      	lsls	r6, r6, #4
    35ce:	2370      	movs	r3, #112	; 0x70
    35d0:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    35d2:	00e4      	lsls	r4, r4, #3
    35d4:	3b68      	subs	r3, #104	; 0x68
    35d6:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    35d8:	4334      	orrs	r4, r6
    35da:	4b2b      	ldr	r3, [pc, #172]	; (3688 <sal_aes_setup+0x120>)
    35dc:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    35de:	2680      	movs	r6, #128	; 0x80
    35e0:	4276      	negs	r6, r6
    35e2:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    35e4:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    35e6:	2201      	movs	r2, #1
    35e8:	4b29      	ldr	r3, [pc, #164]	; (3690 <sal_aes_setup+0x128>)
    35ea:	701a      	strb	r2, [r3, #0]
	return (true);
    35ec:	2001      	movs	r0, #1
}
    35ee:	b004      	add	sp, #16
    35f0:	bc04      	pop	{r2}
    35f2:	4690      	mov	r8, r2
    35f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    35f6:	4d24      	ldr	r5, [pc, #144]	; (3688 <sal_aes_setup+0x120>)
    35f8:	330f      	adds	r3, #15
    35fa:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    35fc:	1c68      	adds	r0, r5, #1
    35fe:	2210      	movs	r2, #16
    3600:	491f      	ldr	r1, [pc, #124]	; (3680 <sal_aes_setup+0x118>)
    3602:	4b20      	ldr	r3, [pc, #128]	; (3684 <sal_aes_setup+0x11c>)
    3604:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3606:	2211      	movs	r2, #17
    3608:	0029      	movs	r1, r5
    360a:	2083      	movs	r0, #131	; 0x83
    360c:	4b1f      	ldr	r3, [pc, #124]	; (368c <sal_aes_setup+0x124>)
    360e:	4798      	blx	r3
    3610:	e7d5      	b.n	35be <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    3612:	4b1a      	ldr	r3, [pc, #104]	; (367c <sal_aes_setup+0x114>)
    3614:	781b      	ldrb	r3, [r3, #0]
    3616:	2b01      	cmp	r3, #1
    3618:	d0d1      	beq.n	35be <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    361a:	2210      	movs	r2, #16
    361c:	4b1a      	ldr	r3, [pc, #104]	; (3688 <sal_aes_setup+0x120>)
    361e:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    3620:	4b15      	ldr	r3, [pc, #84]	; (3678 <sal_aes_setup+0x110>)
    3622:	781b      	ldrb	r3, [r3, #0]
    3624:	2b00      	cmp	r3, #0
    3626:	d00e      	beq.n	3646 <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3628:	4d17      	ldr	r5, [pc, #92]	; (3688 <sal_aes_setup+0x120>)
    362a:	1c68      	adds	r0, r5, #1
    362c:	2210      	movs	r2, #16
    362e:	4919      	ldr	r1, [pc, #100]	; (3694 <sal_aes_setup+0x12c>)
    3630:	4b14      	ldr	r3, [pc, #80]	; (3684 <sal_aes_setup+0x11c>)
    3632:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3634:	2211      	movs	r2, #17
    3636:	0029      	movs	r1, r5
    3638:	2083      	movs	r0, #131	; 0x83
    363a:	4b14      	ldr	r3, [pc, #80]	; (368c <sal_aes_setup+0x124>)
    363c:	4798      	blx	r3
			dec_initialized = true;
    363e:	4b0e      	ldr	r3, [pc, #56]	; (3678 <sal_aes_setup+0x110>)
    3640:	2201      	movs	r2, #1
    3642:	701a      	strb	r2, [r3, #0]
    3644:	e7bb      	b.n	35be <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3646:	4d10      	ldr	r5, [pc, #64]	; (3688 <sal_aes_setup+0x120>)
    3648:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    364a:	3380      	adds	r3, #128	; 0x80
    364c:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    364e:	3a0f      	subs	r2, #15
    3650:	4b0f      	ldr	r3, [pc, #60]	; (3690 <sal_aes_setup+0x128>)
    3652:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    3654:	2100      	movs	r1, #0
    3656:	4668      	mov	r0, sp
    3658:	4b0f      	ldr	r3, [pc, #60]	; (3698 <sal_aes_setup+0x130>)
    365a:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    365c:	2310      	movs	r3, #16
    365e:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3660:	2201      	movs	r2, #1
    3662:	0029      	movs	r1, r5
    3664:	2083      	movs	r0, #131	; 0x83
    3666:	4b09      	ldr	r3, [pc, #36]	; (368c <sal_aes_setup+0x124>)
    3668:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    366a:	2210      	movs	r2, #16
    366c:	4909      	ldr	r1, [pc, #36]	; (3694 <sal_aes_setup+0x12c>)
    366e:	2084      	movs	r0, #132	; 0x84
    3670:	4b0a      	ldr	r3, [pc, #40]	; (369c <sal_aes_setup+0x134>)
    3672:	4798      	blx	r3
    3674:	e7d8      	b.n	3628 <sal_aes_setup+0xc0>
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	200002aa 	.word	0x200002aa
    367c:	20000049 	.word	0x20000049
    3680:	200002bc 	.word	0x200002bc
    3684:	0000758b 	.word	0x0000758b
    3688:	20000298 	.word	0x20000298
    368c:	00003c65 	.word	0x00003c65
    3690:	200002cc 	.word	0x200002cc
    3694:	200002ac 	.word	0x200002ac
    3698:	000034fd 	.word	0x000034fd
    369c:	00003dd1 	.word	0x00003dd1

000036a0 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    36a0:	b510      	push	{r4, lr}
    36a2:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    36a4:	2210      	movs	r2, #16
    36a6:	2084      	movs	r0, #132	; 0x84
    36a8:	4b01      	ldr	r3, [pc, #4]	; (36b0 <sal_aes_read+0x10>)
    36aa:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    36ac:	bd10      	pop	{r4, pc}
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	00003dd1 	.word	0x00003dd1

000036b4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    36b4:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    36b6:	2201      	movs	r2, #1
    36b8:	4b03      	ldr	r3, [pc, #12]	; (36c8 <AT86RFX_ISR+0x14>)
    36ba:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    36bc:	4b03      	ldr	r3, [pc, #12]	; (36cc <AT86RFX_ISR+0x18>)
    36be:	681b      	ldr	r3, [r3, #0]
    36c0:	2b00      	cmp	r3, #0
    36c2:	d000      	beq.n	36c6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    36c4:	4798      	blx	r3
	}
}
    36c6:	bd10      	pop	{r4, pc}
    36c8:	40001800 	.word	0x40001800
    36cc:	200002d0 	.word	0x200002d0

000036d0 <trx_spi_init>:

void trx_spi_init(void)
{
    36d0:	b530      	push	{r4, r5, lr}
    36d2:	b085      	sub	sp, #20
	config->address_enabled = false;
    36d4:	4a34      	ldr	r2, [pc, #208]	; (37a8 <trx_spi_init+0xd8>)
    36d6:	2300      	movs	r3, #0
    36d8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    36da:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    36dc:	213f      	movs	r1, #63	; 0x3f
    36de:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    36e0:	4c32      	ldr	r4, [pc, #200]	; (37ac <trx_spi_init+0xdc>)
    36e2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    36e4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    36e6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    36e8:	2201      	movs	r2, #1
    36ea:	4669      	mov	r1, sp
    36ec:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    36ee:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    36f0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    36f2:	203f      	movs	r0, #63	; 0x3f
    36f4:	4b2e      	ldr	r3, [pc, #184]	; (37b0 <trx_spi_init+0xe0>)
    36f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    36f8:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    36fa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    36fc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    36fe:	2900      	cmp	r1, #0
    3700:	d104      	bne.n	370c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3702:	0953      	lsrs	r3, r2, #5
    3704:	01db      	lsls	r3, r3, #7
    3706:	492b      	ldr	r1, [pc, #172]	; (37b4 <trx_spi_init+0xe4>)
    3708:	468c      	mov	ip, r1
    370a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    370c:	211f      	movs	r1, #31
    370e:	4011      	ands	r1, r2
    3710:	2201      	movs	r2, #1
    3712:	0010      	movs	r0, r2
    3714:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3716:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3718:	4c27      	ldr	r4, [pc, #156]	; (37b8 <trx_spi_init+0xe8>)
    371a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    371c:	2300      	movs	r3, #0
    371e:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3720:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3722:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3724:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3726:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3728:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    372a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    372c:	3223      	adds	r2, #35	; 0x23
    372e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3730:	0020      	movs	r0, r4
    3732:	3018      	adds	r0, #24
    3734:	3a18      	subs	r2, #24
    3736:	2100      	movs	r1, #0
    3738:	4b20      	ldr	r3, [pc, #128]	; (37bc <trx_spi_init+0xec>)
    373a:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    373c:	2380      	movs	r3, #128	; 0x80
    373e:	025b      	lsls	r3, r3, #9
    3740:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3742:	4b1f      	ldr	r3, [pc, #124]	; (37c0 <trx_spi_init+0xf0>)
    3744:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3746:	4b1f      	ldr	r3, [pc, #124]	; (37c4 <trx_spi_init+0xf4>)
    3748:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    374a:	2301      	movs	r3, #1
    374c:	425b      	negs	r3, r3
    374e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3750:	4b1d      	ldr	r3, [pc, #116]	; (37c8 <trx_spi_init+0xf8>)
    3752:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3754:	4b1d      	ldr	r3, [pc, #116]	; (37cc <trx_spi_init+0xfc>)
    3756:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3758:	4d1d      	ldr	r5, [pc, #116]	; (37d0 <trx_spi_init+0x100>)
    375a:	0022      	movs	r2, r4
    375c:	491d      	ldr	r1, [pc, #116]	; (37d4 <trx_spi_init+0x104>)
    375e:	0028      	movs	r0, r5
    3760:	4b1d      	ldr	r3, [pc, #116]	; (37d8 <trx_spi_init+0x108>)
    3762:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3764:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3766:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3768:	2b00      	cmp	r3, #0
    376a:	d1fc      	bne.n	3766 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    376c:	6813      	ldr	r3, [r2, #0]
    376e:	2502      	movs	r5, #2
    3770:	432b      	orrs	r3, r5
    3772:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3774:	ac01      	add	r4, sp, #4
    3776:	0020      	movs	r0, r4
    3778:	4b18      	ldr	r3, [pc, #96]	; (37dc <trx_spi_init+0x10c>)
    377a:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    377c:	2320      	movs	r3, #32
    377e:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3780:	2380      	movs	r3, #128	; 0x80
    3782:	039b      	lsls	r3, r3, #14
    3784:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    3786:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3788:	2301      	movs	r3, #1
    378a:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    378c:	2200      	movs	r2, #0
    378e:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3790:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    3792:	0021      	movs	r1, r4
    3794:	2000      	movs	r0, #0
    3796:	4b12      	ldr	r3, [pc, #72]	; (37e0 <trx_spi_init+0x110>)
    3798:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    379a:	2200      	movs	r2, #0
    379c:	2100      	movs	r1, #0
    379e:	4811      	ldr	r0, [pc, #68]	; (37e4 <trx_spi_init+0x114>)
    37a0:	4b11      	ldr	r3, [pc, #68]	; (37e8 <trx_spi_init+0x118>)
    37a2:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    37a4:	b005      	add	sp, #20
    37a6:	bd30      	pop	{r4, r5, pc}
    37a8:	200012fc 	.word	0x200012fc
    37ac:	20001300 	.word	0x20001300
    37b0:	00000431 	.word	0x00000431
    37b4:	41004400 	.word	0x41004400
    37b8:	20001304 	.word	0x20001304
    37bc:	0000759d 	.word	0x0000759d
    37c0:	003d0900 	.word	0x003d0900
    37c4:	00530005 	.word	0x00530005
    37c8:	003e0005 	.word	0x003e0005
    37cc:	00520005 	.word	0x00520005
    37d0:	2000133c 	.word	0x2000133c
    37d4:	42001800 	.word	0x42001800
    37d8:	0000089d 	.word	0x0000089d
    37dc:	000003a5 	.word	0x000003a5
    37e0:	000003b9 	.word	0x000003b9
    37e4:	000036b5 	.word	0x000036b5
    37e8:	00000261 	.word	0x00000261

000037ec <PhyReset>:

void PhyReset(void)
{
    37ec:	b570      	push	{r4, r5, r6, lr}
    37ee:	4c08      	ldr	r4, [pc, #32]	; (3810 <PhyReset+0x24>)
    37f0:	2580      	movs	r5, #128	; 0x80
    37f2:	022d      	lsls	r5, r5, #8
    37f4:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    37f6:	2280      	movs	r2, #128	; 0x80
    37f8:	0352      	lsls	r2, r2, #13
    37fa:	4b06      	ldr	r3, [pc, #24]	; (3814 <PhyReset+0x28>)
    37fc:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    37fe:	20a5      	movs	r0, #165	; 0xa5
    3800:	0040      	lsls	r0, r0, #1
    3802:	4e05      	ldr	r6, [pc, #20]	; (3818 <PhyReset+0x2c>)
    3804:	47b0      	blx	r6
    3806:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3808:	200a      	movs	r0, #10
    380a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    380c:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    380e:	bd70      	pop	{r4, r5, r6, pc}
    3810:	41004480 	.word	0x41004480
    3814:	41004400 	.word	0x41004400
    3818:	00000155 	.word	0x00000155

0000381c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    381c:	b570      	push	{r4, r5, r6, lr}
    381e:	b082      	sub	sp, #8
    3820:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3822:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3826:	425a      	negs	r2, r3
    3828:	4153      	adcs	r3, r2
    382a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    382c:	b672      	cpsid	i
    382e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3832:	2200      	movs	r2, #0
    3834:	4b33      	ldr	r3, [pc, #204]	; (3904 <trx_reg_read+0xe8>)
    3836:	701a      	strb	r2, [r3, #0]
	return flags;
    3838:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    383a:	4e33      	ldr	r6, [pc, #204]	; (3908 <trx_reg_read+0xec>)
    383c:	3201      	adds	r2, #1
    383e:	4933      	ldr	r1, [pc, #204]	; (390c <trx_reg_read+0xf0>)
    3840:	0030      	movs	r0, r6
    3842:	4b33      	ldr	r3, [pc, #204]	; (3910 <trx_reg_read+0xf4>)
    3844:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3846:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3848:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    384a:	7e1a      	ldrb	r2, [r3, #24]
    384c:	420a      	tst	r2, r1
    384e:	d0fc      	beq.n	384a <trx_reg_read+0x2e>
    3850:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3852:	07d2      	lsls	r2, r2, #31
    3854:	d502      	bpl.n	385c <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3856:	2280      	movs	r2, #128	; 0x80
    3858:	4315      	orrs	r5, r2
    385a:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    385c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    385e:	7e1a      	ldrb	r2, [r3, #24]
    3860:	420a      	tst	r2, r1
    3862:	d0fc      	beq.n	385e <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3864:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3866:	7e1a      	ldrb	r2, [r3, #24]
    3868:	420a      	tst	r2, r1
    386a:	d0fc      	beq.n	3866 <trx_reg_read+0x4a>
    386c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    386e:	0752      	lsls	r2, r2, #29
    3870:	d50c      	bpl.n	388c <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3872:	8b5a      	ldrh	r2, [r3, #26]
    3874:	0752      	lsls	r2, r2, #29
    3876:	d501      	bpl.n	387c <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3878:	2204      	movs	r2, #4
    387a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    387c:	4a22      	ldr	r2, [pc, #136]	; (3908 <trx_reg_read+0xec>)
    387e:	7992      	ldrb	r2, [r2, #6]
    3880:	2a01      	cmp	r2, #1
    3882:	d034      	beq.n	38ee <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3886:	b2d2      	uxtb	r2, r2
    3888:	4922      	ldr	r1, [pc, #136]	; (3914 <trx_reg_read+0xf8>)
    388a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    388c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    388e:	7e1a      	ldrb	r2, [r3, #24]
    3890:	420a      	tst	r2, r1
    3892:	d0fc      	beq.n	388e <trx_reg_read+0x72>
    3894:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3896:	07d2      	lsls	r2, r2, #31
    3898:	d501      	bpl.n	389e <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    389a:	2200      	movs	r2, #0
    389c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    389e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    38a0:	7e1a      	ldrb	r2, [r3, #24]
    38a2:	420a      	tst	r2, r1
    38a4:	d0fc      	beq.n	38a0 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    38a6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    38a8:	7e1a      	ldrb	r2, [r3, #24]
    38aa:	420a      	tst	r2, r1
    38ac:	d0fc      	beq.n	38a8 <trx_reg_read+0x8c>
    38ae:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    38b0:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    38b2:	0752      	lsls	r2, r2, #29
    38b4:	d50a      	bpl.n	38cc <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    38b6:	8b5a      	ldrh	r2, [r3, #26]
    38b8:	0752      	lsls	r2, r2, #29
    38ba:	d501      	bpl.n	38c0 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    38bc:	2204      	movs	r2, #4
    38be:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    38c0:	4a11      	ldr	r2, [pc, #68]	; (3908 <trx_reg_read+0xec>)
    38c2:	7992      	ldrb	r2, [r2, #6]
    38c4:	2a01      	cmp	r2, #1
    38c6:	d018      	beq.n	38fa <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    38c8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    38ca:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    38cc:	2200      	movs	r2, #0
    38ce:	490f      	ldr	r1, [pc, #60]	; (390c <trx_reg_read+0xf0>)
    38d0:	480d      	ldr	r0, [pc, #52]	; (3908 <trx_reg_read+0xec>)
    38d2:	4b0f      	ldr	r3, [pc, #60]	; (3910 <trx_reg_read+0xf4>)
    38d4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    38d6:	23ff      	movs	r3, #255	; 0xff
    38d8:	4223      	tst	r3, r4
    38da:	d005      	beq.n	38e8 <trx_reg_read+0xcc>
		cpu_irq_enable();
    38dc:	2201      	movs	r2, #1
    38de:	4b09      	ldr	r3, [pc, #36]	; (3904 <trx_reg_read+0xe8>)
    38e0:	701a      	strb	r2, [r3, #0]
    38e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    38e6:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    38e8:	b2e8      	uxtb	r0, r5
}
    38ea:	b002      	add	sp, #8
    38ec:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    38ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38f0:	05d2      	lsls	r2, r2, #23
    38f2:	0dd2      	lsrs	r2, r2, #23
    38f4:	4907      	ldr	r1, [pc, #28]	; (3914 <trx_reg_read+0xf8>)
    38f6:	800a      	strh	r2, [r1, #0]
    38f8:	e7c8      	b.n	388c <trx_reg_read+0x70>
    38fa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    38fc:	05ed      	lsls	r5, r5, #23
    38fe:	0ded      	lsrs	r5, r5, #23
    3900:	e7e4      	b.n	38cc <trx_reg_read+0xb0>
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	20000008 	.word	0x20000008
    3908:	2000133c 	.word	0x2000133c
    390c:	20001300 	.word	0x20001300
    3910:	00000b61 	.word	0x00000b61
    3914:	200012f8 	.word	0x200012f8

00003918 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3918:	b5f0      	push	{r4, r5, r6, r7, lr}
    391a:	b083      	sub	sp, #12
    391c:	0006      	movs	r6, r0
    391e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3920:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3924:	425a      	negs	r2, r3
    3926:	4153      	adcs	r3, r2
    3928:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    392a:	b672      	cpsid	i
    392c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3930:	2200      	movs	r2, #0
    3932:	4b34      	ldr	r3, [pc, #208]	; (3a04 <trx_reg_write+0xec>)
    3934:	701a      	strb	r2, [r3, #0]
	return flags;
    3936:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3938:	4f33      	ldr	r7, [pc, #204]	; (3a08 <trx_reg_write+0xf0>)
    393a:	3201      	adds	r2, #1
    393c:	4933      	ldr	r1, [pc, #204]	; (3a0c <trx_reg_write+0xf4>)
    393e:	0038      	movs	r0, r7
    3940:	4b33      	ldr	r3, [pc, #204]	; (3a10 <trx_reg_write+0xf8>)
    3942:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3944:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3946:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3948:	7e1a      	ldrb	r2, [r3, #24]
    394a:	420a      	tst	r2, r1
    394c:	d0fc      	beq.n	3948 <trx_reg_write+0x30>
    394e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3950:	07d2      	lsls	r2, r2, #31
    3952:	d502      	bpl.n	395a <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3954:	22c0      	movs	r2, #192	; 0xc0
    3956:	4316      	orrs	r6, r2
    3958:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    395a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    395c:	7e1a      	ldrb	r2, [r3, #24]
    395e:	420a      	tst	r2, r1
    3960:	d0fc      	beq.n	395c <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3962:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3964:	7e1a      	ldrb	r2, [r3, #24]
    3966:	420a      	tst	r2, r1
    3968:	d0fc      	beq.n	3964 <trx_reg_write+0x4c>
    396a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    396c:	0752      	lsls	r2, r2, #29
    396e:	d50c      	bpl.n	398a <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3970:	8b5a      	ldrh	r2, [r3, #26]
    3972:	0752      	lsls	r2, r2, #29
    3974:	d501      	bpl.n	397a <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3976:	2204      	movs	r2, #4
    3978:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    397a:	4a23      	ldr	r2, [pc, #140]	; (3a08 <trx_reg_write+0xf0>)
    397c:	7992      	ldrb	r2, [r2, #6]
    397e:	2a01      	cmp	r2, #1
    3980:	d033      	beq.n	39ea <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3984:	b2d2      	uxtb	r2, r2
    3986:	4923      	ldr	r1, [pc, #140]	; (3a14 <trx_reg_write+0xfc>)
    3988:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    398a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    398c:	7e1a      	ldrb	r2, [r3, #24]
    398e:	420a      	tst	r2, r1
    3990:	d0fc      	beq.n	398c <trx_reg_write+0x74>
    3992:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3994:	07d2      	lsls	r2, r2, #31
    3996:	d500      	bpl.n	399a <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3998:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    399a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    399c:	7e1a      	ldrb	r2, [r3, #24]
    399e:	420a      	tst	r2, r1
    39a0:	d0fc      	beq.n	399c <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    39a2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    39a4:	7e1a      	ldrb	r2, [r3, #24]
    39a6:	420a      	tst	r2, r1
    39a8:	d0fc      	beq.n	39a4 <trx_reg_write+0x8c>
    39aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    39ac:	0752      	lsls	r2, r2, #29
    39ae:	d50c      	bpl.n	39ca <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    39b0:	8b5a      	ldrh	r2, [r3, #26]
    39b2:	0752      	lsls	r2, r2, #29
    39b4:	d501      	bpl.n	39ba <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    39b6:	2204      	movs	r2, #4
    39b8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    39ba:	4a13      	ldr	r2, [pc, #76]	; (3a08 <trx_reg_write+0xf0>)
    39bc:	7992      	ldrb	r2, [r2, #6]
    39be:	2a01      	cmp	r2, #1
    39c0:	d019      	beq.n	39f6 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    39c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    39c4:	b2db      	uxtb	r3, r3
    39c6:	4a13      	ldr	r2, [pc, #76]	; (3a14 <trx_reg_write+0xfc>)
    39c8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    39ca:	2200      	movs	r2, #0
    39cc:	490f      	ldr	r1, [pc, #60]	; (3a0c <trx_reg_write+0xf4>)
    39ce:	480e      	ldr	r0, [pc, #56]	; (3a08 <trx_reg_write+0xf0>)
    39d0:	4b0f      	ldr	r3, [pc, #60]	; (3a10 <trx_reg_write+0xf8>)
    39d2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    39d4:	23ff      	movs	r3, #255	; 0xff
    39d6:	422b      	tst	r3, r5
    39d8:	d005      	beq.n	39e6 <trx_reg_write+0xce>
		cpu_irq_enable();
    39da:	2201      	movs	r2, #1
    39dc:	4b09      	ldr	r3, [pc, #36]	; (3a04 <trx_reg_write+0xec>)
    39de:	701a      	strb	r2, [r3, #0]
    39e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    39e4:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    39e6:	b003      	add	sp, #12
    39e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    39ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39ec:	05d2      	lsls	r2, r2, #23
    39ee:	0dd2      	lsrs	r2, r2, #23
    39f0:	4908      	ldr	r1, [pc, #32]	; (3a14 <trx_reg_write+0xfc>)
    39f2:	800a      	strh	r2, [r1, #0]
    39f4:	e7c9      	b.n	398a <trx_reg_write+0x72>
    39f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    39f8:	05db      	lsls	r3, r3, #23
    39fa:	0ddb      	lsrs	r3, r3, #23
    39fc:	4a05      	ldr	r2, [pc, #20]	; (3a14 <trx_reg_write+0xfc>)
    39fe:	8013      	strh	r3, [r2, #0]
    3a00:	e7e3      	b.n	39ca <trx_reg_write+0xb2>
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	20000008 	.word	0x20000008
    3a08:	2000133c 	.word	0x2000133c
    3a0c:	20001300 	.word	0x20001300
    3a10:	00000b61 	.word	0x00000b61
    3a14:	200012f8 	.word	0x200012f8

00003a18 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a1a:	46d6      	mov	lr, sl
    3a1c:	464f      	mov	r7, r9
    3a1e:	4646      	mov	r6, r8
    3a20:	b5c0      	push	{r6, r7, lr}
    3a22:	b082      	sub	sp, #8
    3a24:	0005      	movs	r5, r0
    3a26:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a28:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3a2c:	425a      	negs	r2, r3
    3a2e:	4153      	adcs	r3, r2
    3a30:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3a32:	b672      	cpsid	i
    3a34:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3a38:	2200      	movs	r2, #0
    3a3a:	4b3e      	ldr	r3, [pc, #248]	; (3b34 <trx_frame_read+0x11c>)
    3a3c:	701a      	strb	r2, [r3, #0]
	return flags;
    3a3e:	9b01      	ldr	r3, [sp, #4]
    3a40:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3a42:	4f3d      	ldr	r7, [pc, #244]	; (3b38 <trx_frame_read+0x120>)
    3a44:	3201      	adds	r2, #1
    3a46:	493d      	ldr	r1, [pc, #244]	; (3b3c <trx_frame_read+0x124>)
    3a48:	0038      	movs	r0, r7
    3a4a:	4b3d      	ldr	r3, [pc, #244]	; (3b40 <trx_frame_read+0x128>)
    3a4c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a4e:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3a50:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a52:	7e1a      	ldrb	r2, [r3, #24]
    3a54:	420a      	tst	r2, r1
    3a56:	d0fc      	beq.n	3a52 <trx_frame_read+0x3a>
    3a58:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3a5a:	07d2      	lsls	r2, r2, #31
    3a5c:	d501      	bpl.n	3a62 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a5e:	2220      	movs	r2, #32
    3a60:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3a62:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a64:	7e1a      	ldrb	r2, [r3, #24]
    3a66:	420a      	tst	r2, r1
    3a68:	d0fc      	beq.n	3a64 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3a6a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a6c:	7e1a      	ldrb	r2, [r3, #24]
    3a6e:	420a      	tst	r2, r1
    3a70:	d0fc      	beq.n	3a6c <trx_frame_read+0x54>
    3a72:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3a74:	0752      	lsls	r2, r2, #29
    3a76:	d50c      	bpl.n	3a92 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a78:	8b5a      	ldrh	r2, [r3, #26]
    3a7a:	0752      	lsls	r2, r2, #29
    3a7c:	d501      	bpl.n	3a82 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3a7e:	2204      	movs	r2, #4
    3a80:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a82:	4a2d      	ldr	r2, [pc, #180]	; (3b38 <trx_frame_read+0x120>)
    3a84:	7992      	ldrb	r2, [r2, #6]
    3a86:	2a01      	cmp	r2, #1
    3a88:	d013      	beq.n	3ab2 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a8c:	b2db      	uxtb	r3, r3
    3a8e:	4a2d      	ldr	r2, [pc, #180]	; (3b44 <trx_frame_read+0x12c>)
    3a90:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3a92:	1e63      	subs	r3, r4, #1
    3a94:	b2db      	uxtb	r3, r3
    3a96:	2c00      	cmp	r4, #0
    3a98:	d036      	beq.n	3b08 <trx_frame_read+0xf0>
    3a9a:	3301      	adds	r3, #1
    3a9c:	469c      	mov	ip, r3
    3a9e:	44ac      	add	ip, r5
    3aa0:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    3aa2:	4e25      	ldr	r6, [pc, #148]	; (3b38 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    3aa4:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3aa6:	2300      	movs	r3, #0
    3aa8:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3aaa:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3aac:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3aae:	46b1      	mov	r9, r6
    3ab0:	e00f      	b.n	3ad2 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ab4:	05db      	lsls	r3, r3, #23
    3ab6:	0ddb      	lsrs	r3, r3, #23
    3ab8:	4a22      	ldr	r2, [pc, #136]	; (3b44 <trx_frame_read+0x12c>)
    3aba:	8013      	strh	r3, [r2, #0]
    3abc:	e7e9      	b.n	3a92 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3abe:	464a      	mov	r2, r9
    3ac0:	7992      	ldrb	r2, [r2, #6]
    3ac2:	2a01      	cmp	r2, #1
    3ac4:	d01c      	beq.n	3b00 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ac6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3ac8:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    3aca:	702f      	strb	r7, [r5, #0]
		data++;
    3acc:	3501      	adds	r5, #1
	while (length--) {
    3ace:	4565      	cmp	r5, ip
    3ad0:	d01a      	beq.n	3b08 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ad2:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ad4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3ad6:	4202      	tst	r2, r0
    3ad8:	d0fc      	beq.n	3ad4 <trx_frame_read+0xbc>
    3ada:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3adc:	4202      	tst	r2, r0
    3ade:	d001      	beq.n	3ae4 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ae0:	4652      	mov	r2, sl
    3ae2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ae4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3ae6:	4222      	tst	r2, r4
    3ae8:	d0fc      	beq.n	3ae4 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3aea:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3aec:	420a      	tst	r2, r1
    3aee:	d0fc      	beq.n	3aea <trx_frame_read+0xd2>
    3af0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3af2:	420a      	tst	r2, r1
    3af4:	d0e9      	beq.n	3aca <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3af6:	8b5a      	ldrh	r2, [r3, #26]
    3af8:	420a      	tst	r2, r1
    3afa:	d0e0      	beq.n	3abe <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3afc:	8359      	strh	r1, [r3, #26]
    3afe:	e7de      	b.n	3abe <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b00:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3b02:	05ff      	lsls	r7, r7, #23
    3b04:	0dff      	lsrs	r7, r7, #23
    3b06:	e7e0      	b.n	3aca <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3b08:	2200      	movs	r2, #0
    3b0a:	490c      	ldr	r1, [pc, #48]	; (3b3c <trx_frame_read+0x124>)
    3b0c:	480a      	ldr	r0, [pc, #40]	; (3b38 <trx_frame_read+0x120>)
    3b0e:	4b0c      	ldr	r3, [pc, #48]	; (3b40 <trx_frame_read+0x128>)
    3b10:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3b12:	23ff      	movs	r3, #255	; 0xff
    3b14:	4642      	mov	r2, r8
    3b16:	4213      	tst	r3, r2
    3b18:	d005      	beq.n	3b26 <trx_frame_read+0x10e>
		cpu_irq_enable();
    3b1a:	2201      	movs	r2, #1
    3b1c:	4b05      	ldr	r3, [pc, #20]	; (3b34 <trx_frame_read+0x11c>)
    3b1e:	701a      	strb	r2, [r3, #0]
    3b20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b24:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3b26:	b002      	add	sp, #8
    3b28:	bc1c      	pop	{r2, r3, r4}
    3b2a:	4690      	mov	r8, r2
    3b2c:	4699      	mov	r9, r3
    3b2e:	46a2      	mov	sl, r4
    3b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	20000008 	.word	0x20000008
    3b38:	2000133c 	.word	0x2000133c
    3b3c:	20001300 	.word	0x20001300
    3b40:	00000b61 	.word	0x00000b61
    3b44:	200012f8 	.word	0x200012f8

00003b48 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b4a:	46c6      	mov	lr, r8
    3b4c:	b500      	push	{lr}
    3b4e:	b082      	sub	sp, #8
    3b50:	0004      	movs	r4, r0
    3b52:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b54:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3b58:	425a      	negs	r2, r3
    3b5a:	4153      	adcs	r3, r2
    3b5c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3b5e:	b672      	cpsid	i
    3b60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b64:	2200      	movs	r2, #0
    3b66:	4b3a      	ldr	r3, [pc, #232]	; (3c50 <trx_frame_write+0x108>)
    3b68:	701a      	strb	r2, [r3, #0]
	return flags;
    3b6a:	9b01      	ldr	r3, [sp, #4]
    3b6c:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3b6e:	4f39      	ldr	r7, [pc, #228]	; (3c54 <trx_frame_write+0x10c>)
    3b70:	3201      	adds	r2, #1
    3b72:	4939      	ldr	r1, [pc, #228]	; (3c58 <trx_frame_write+0x110>)
    3b74:	0038      	movs	r0, r7
    3b76:	4b39      	ldr	r3, [pc, #228]	; (3c5c <trx_frame_write+0x114>)
    3b78:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b7a:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3b7c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b7e:	7e1a      	ldrb	r2, [r3, #24]
    3b80:	420a      	tst	r2, r1
    3b82:	d0fc      	beq.n	3b7e <trx_frame_write+0x36>
    3b84:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3b86:	07d2      	lsls	r2, r2, #31
    3b88:	d501      	bpl.n	3b8e <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b8a:	2260      	movs	r2, #96	; 0x60
    3b8c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3b8e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b90:	7e1a      	ldrb	r2, [r3, #24]
    3b92:	420a      	tst	r2, r1
    3b94:	d0fc      	beq.n	3b90 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3b96:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b98:	7e1a      	ldrb	r2, [r3, #24]
    3b9a:	420a      	tst	r2, r1
    3b9c:	d0fc      	beq.n	3b98 <trx_frame_write+0x50>
    3b9e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3ba0:	0752      	lsls	r2, r2, #29
    3ba2:	d50c      	bpl.n	3bbe <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ba4:	8b5a      	ldrh	r2, [r3, #26]
    3ba6:	0752      	lsls	r2, r2, #29
    3ba8:	d501      	bpl.n	3bae <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3baa:	2204      	movs	r2, #4
    3bac:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bae:	4a29      	ldr	r2, [pc, #164]	; (3c54 <trx_frame_write+0x10c>)
    3bb0:	7992      	ldrb	r2, [r2, #6]
    3bb2:	2a01      	cmp	r2, #1
    3bb4:	d00b      	beq.n	3bce <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bb8:	b2d2      	uxtb	r2, r2
    3bba:	4929      	ldr	r1, [pc, #164]	; (3c60 <trx_frame_write+0x118>)
    3bbc:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bbe:	4a25      	ldr	r2, [pc, #148]	; (3c54 <trx_frame_write+0x10c>)
    3bc0:	7992      	ldrb	r2, [r2, #6]
    3bc2:	4694      	mov	ip, r2
    3bc4:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3bc6:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    3bc8:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3bca:	2404      	movs	r4, #4
    3bcc:	e00d      	b.n	3bea <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bd0:	05d2      	lsls	r2, r2, #23
    3bd2:	0dd2      	lsrs	r2, r2, #23
    3bd4:	4922      	ldr	r1, [pc, #136]	; (3c60 <trx_frame_write+0x118>)
    3bd6:	800a      	strh	r2, [r1, #0]
    3bd8:	e7f1      	b.n	3bbe <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bda:	4662      	mov	r2, ip
    3bdc:	2a01      	cmp	r2, #1
    3bde:	d01e      	beq.n	3c1e <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3be2:	b2d2      	uxtb	r2, r2
    3be4:	4e1e      	ldr	r6, [pc, #120]	; (3c60 <trx_frame_write+0x118>)
    3be6:	8032      	strh	r2, [r6, #0]
    3be8:	3101      	adds	r1, #1
	while (length--) {
    3bea:	3d01      	subs	r5, #1
    3bec:	b2ed      	uxtb	r5, r5
    3bee:	2dff      	cmp	r5, #255	; 0xff
    3bf0:	d01b      	beq.n	3c2a <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bf2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3bf4:	423a      	tst	r2, r7
    3bf6:	d0fc      	beq.n	3bf2 <trx_frame_write+0xaa>
    3bf8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3bfa:	423a      	tst	r2, r7
    3bfc:	d001      	beq.n	3c02 <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3bfe:	780a      	ldrb	r2, [r1, #0]
    3c00:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c02:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3c04:	4202      	tst	r2, r0
    3c06:	d0fc      	beq.n	3c02 <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c08:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3c0a:	4222      	tst	r2, r4
    3c0c:	d0fc      	beq.n	3c08 <trx_frame_write+0xc0>
    3c0e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3c10:	4222      	tst	r2, r4
    3c12:	d0e9      	beq.n	3be8 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c14:	8b5a      	ldrh	r2, [r3, #26]
    3c16:	4222      	tst	r2, r4
    3c18:	d0df      	beq.n	3bda <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3c1a:	835c      	strh	r4, [r3, #26]
    3c1c:	e7dd      	b.n	3bda <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c20:	05d2      	lsls	r2, r2, #23
    3c22:	0dd2      	lsrs	r2, r2, #23
    3c24:	4e0e      	ldr	r6, [pc, #56]	; (3c60 <trx_frame_write+0x118>)
    3c26:	8032      	strh	r2, [r6, #0]
    3c28:	e7de      	b.n	3be8 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3c2a:	2200      	movs	r2, #0
    3c2c:	490a      	ldr	r1, [pc, #40]	; (3c58 <trx_frame_write+0x110>)
    3c2e:	4809      	ldr	r0, [pc, #36]	; (3c54 <trx_frame_write+0x10c>)
    3c30:	4b0a      	ldr	r3, [pc, #40]	; (3c5c <trx_frame_write+0x114>)
    3c32:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3c34:	23ff      	movs	r3, #255	; 0xff
    3c36:	4642      	mov	r2, r8
    3c38:	4213      	tst	r3, r2
    3c3a:	d005      	beq.n	3c48 <trx_frame_write+0x100>
		cpu_irq_enable();
    3c3c:	2201      	movs	r2, #1
    3c3e:	4b04      	ldr	r3, [pc, #16]	; (3c50 <trx_frame_write+0x108>)
    3c40:	701a      	strb	r2, [r3, #0]
    3c42:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3c46:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3c48:	b002      	add	sp, #8
    3c4a:	bc04      	pop	{r2}
    3c4c:	4690      	mov	r8, r2
    3c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c50:	20000008 	.word	0x20000008
    3c54:	2000133c 	.word	0x2000133c
    3c58:	20001300 	.word	0x20001300
    3c5c:	00000b61 	.word	0x00000b61
    3c60:	200012f8 	.word	0x200012f8

00003c64 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    3c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c66:	46c6      	mov	lr, r8
    3c68:	b500      	push	{lr}
    3c6a:	b082      	sub	sp, #8
    3c6c:	0006      	movs	r6, r0
    3c6e:	000d      	movs	r5, r1
    3c70:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c72:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3c76:	425a      	negs	r2, r3
    3c78:	4153      	adcs	r3, r2
    3c7a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3c7c:	b672      	cpsid	i
    3c7e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c82:	2200      	movs	r2, #0
    3c84:	4b4d      	ldr	r3, [pc, #308]	; (3dbc <trx_sram_write+0x158>)
    3c86:	701a      	strb	r2, [r3, #0]
	return flags;
    3c88:	9b01      	ldr	r3, [sp, #4]
    3c8a:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3c8c:	4f4c      	ldr	r7, [pc, #304]	; (3dc0 <trx_sram_write+0x15c>)
    3c8e:	3201      	adds	r2, #1
    3c90:	494c      	ldr	r1, [pc, #304]	; (3dc4 <trx_sram_write+0x160>)
    3c92:	0038      	movs	r0, r7
    3c94:	4b4c      	ldr	r3, [pc, #304]	; (3dc8 <trx_sram_write+0x164>)
    3c96:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c98:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3c9a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c9c:	7e1a      	ldrb	r2, [r3, #24]
    3c9e:	420a      	tst	r2, r1
    3ca0:	d0fc      	beq.n	3c9c <trx_sram_write+0x38>
    3ca2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ca4:	07d2      	lsls	r2, r2, #31
    3ca6:	d501      	bpl.n	3cac <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ca8:	2240      	movs	r2, #64	; 0x40
    3caa:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3cac:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cae:	7e1a      	ldrb	r2, [r3, #24]
    3cb0:	420a      	tst	r2, r1
    3cb2:	d0fc      	beq.n	3cae <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3cb4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cb6:	7e1a      	ldrb	r2, [r3, #24]
    3cb8:	420a      	tst	r2, r1
    3cba:	d0fc      	beq.n	3cb6 <trx_sram_write+0x52>
    3cbc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3cbe:	0752      	lsls	r2, r2, #29
    3cc0:	d50c      	bpl.n	3cdc <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cc2:	8b5a      	ldrh	r2, [r3, #26]
    3cc4:	0752      	lsls	r2, r2, #29
    3cc6:	d501      	bpl.n	3ccc <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cc8:	2204      	movs	r2, #4
    3cca:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ccc:	4a3c      	ldr	r2, [pc, #240]	; (3dc0 <trx_sram_write+0x15c>)
    3cce:	7992      	ldrb	r2, [r2, #6]
    3cd0:	2a01      	cmp	r2, #1
    3cd2:	d02b      	beq.n	3d2c <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3cd6:	b2d2      	uxtb	r2, r2
    3cd8:	493c      	ldr	r1, [pc, #240]	; (3dcc <trx_sram_write+0x168>)
    3cda:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    3cdc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3cde:	7e1a      	ldrb	r2, [r3, #24]
    3ce0:	420a      	tst	r2, r1
    3ce2:	d0fc      	beq.n	3cde <trx_sram_write+0x7a>
    3ce4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ce6:	07d2      	lsls	r2, r2, #31
    3ce8:	d500      	bpl.n	3cec <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cea:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3cec:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cee:	7e1a      	ldrb	r2, [r3, #24]
    3cf0:	420a      	tst	r2, r1
    3cf2:	d0fc      	beq.n	3cee <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3cf4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cf6:	7e1a      	ldrb	r2, [r3, #24]
    3cf8:	420a      	tst	r2, r1
    3cfa:	d0fc      	beq.n	3cf6 <trx_sram_write+0x92>
    3cfc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3cfe:	0752      	lsls	r2, r2, #29
    3d00:	d50c      	bpl.n	3d1c <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d02:	8b5a      	ldrh	r2, [r3, #26]
    3d04:	0752      	lsls	r2, r2, #29
    3d06:	d501      	bpl.n	3d0c <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d08:	2204      	movs	r2, #4
    3d0a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d0c:	4a2c      	ldr	r2, [pc, #176]	; (3dc0 <trx_sram_write+0x15c>)
    3d0e:	7992      	ldrb	r2, [r2, #6]
    3d10:	2a01      	cmp	r2, #1
    3d12:	d011      	beq.n	3d38 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d16:	b2d2      	uxtb	r2, r2
    3d18:	492c      	ldr	r1, [pc, #176]	; (3dcc <trx_sram_write+0x168>)
    3d1a:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d1c:	4a28      	ldr	r2, [pc, #160]	; (3dc0 <trx_sram_write+0x15c>)
    3d1e:	7992      	ldrb	r2, [r2, #6]
    3d20:	4694      	mov	ip, r2
    3d22:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3d24:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    3d26:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3d28:	2104      	movs	r1, #4
    3d2a:	e013      	b.n	3d54 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d2e:	05d2      	lsls	r2, r2, #23
    3d30:	0dd2      	lsrs	r2, r2, #23
    3d32:	4926      	ldr	r1, [pc, #152]	; (3dcc <trx_sram_write+0x168>)
    3d34:	800a      	strh	r2, [r1, #0]
    3d36:	e7d1      	b.n	3cdc <trx_sram_write+0x78>
    3d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d3a:	05d2      	lsls	r2, r2, #23
    3d3c:	0dd2      	lsrs	r2, r2, #23
    3d3e:	4923      	ldr	r1, [pc, #140]	; (3dcc <trx_sram_write+0x168>)
    3d40:	800a      	strh	r2, [r1, #0]
    3d42:	e7eb      	b.n	3d1c <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d44:	4662      	mov	r2, ip
    3d46:	2a01      	cmp	r2, #1
    3d48:	d01e      	beq.n	3d88 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d4c:	b2d2      	uxtb	r2, r2
    3d4e:	4f1f      	ldr	r7, [pc, #124]	; (3dcc <trx_sram_write+0x168>)
    3d50:	803a      	strh	r2, [r7, #0]
    3d52:	3001      	adds	r0, #1
	while (length--) {
    3d54:	3c01      	subs	r4, #1
    3d56:	b2e4      	uxtb	r4, r4
    3d58:	2cff      	cmp	r4, #255	; 0xff
    3d5a:	d01b      	beq.n	3d94 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d5c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3d5e:	4232      	tst	r2, r6
    3d60:	d0fc      	beq.n	3d5c <trx_sram_write+0xf8>
    3d62:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d64:	4232      	tst	r2, r6
    3d66:	d001      	beq.n	3d6c <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d68:	7802      	ldrb	r2, [r0, #0]
    3d6a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d6c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3d6e:	422a      	tst	r2, r5
    3d70:	d0fc      	beq.n	3d6c <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d72:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3d74:	420a      	tst	r2, r1
    3d76:	d0fc      	beq.n	3d72 <trx_sram_write+0x10e>
    3d78:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3d7a:	420a      	tst	r2, r1
    3d7c:	d0e9      	beq.n	3d52 <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d7e:	8b5a      	ldrh	r2, [r3, #26]
    3d80:	420a      	tst	r2, r1
    3d82:	d0df      	beq.n	3d44 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d84:	8359      	strh	r1, [r3, #26]
    3d86:	e7dd      	b.n	3d44 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d8a:	05d2      	lsls	r2, r2, #23
    3d8c:	0dd2      	lsrs	r2, r2, #23
    3d8e:	4f0f      	ldr	r7, [pc, #60]	; (3dcc <trx_sram_write+0x168>)
    3d90:	803a      	strh	r2, [r7, #0]
    3d92:	e7de      	b.n	3d52 <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3d94:	2200      	movs	r2, #0
    3d96:	490b      	ldr	r1, [pc, #44]	; (3dc4 <trx_sram_write+0x160>)
    3d98:	4809      	ldr	r0, [pc, #36]	; (3dc0 <trx_sram_write+0x15c>)
    3d9a:	4b0b      	ldr	r3, [pc, #44]	; (3dc8 <trx_sram_write+0x164>)
    3d9c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3d9e:	23ff      	movs	r3, #255	; 0xff
    3da0:	4642      	mov	r2, r8
    3da2:	4213      	tst	r3, r2
    3da4:	d005      	beq.n	3db2 <trx_sram_write+0x14e>
		cpu_irq_enable();
    3da6:	2201      	movs	r2, #1
    3da8:	4b04      	ldr	r3, [pc, #16]	; (3dbc <trx_sram_write+0x158>)
    3daa:	701a      	strb	r2, [r3, #0]
    3dac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3db0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3db2:	b002      	add	sp, #8
    3db4:	bc04      	pop	{r2}
    3db6:	4690      	mov	r8, r2
    3db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	20000008 	.word	0x20000008
    3dc0:	2000133c 	.word	0x2000133c
    3dc4:	20001300 	.word	0x20001300
    3dc8:	00000b61 	.word	0x00000b61
    3dcc:	200012f8 	.word	0x200012f8

00003dd0 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    3dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dd2:	46d6      	mov	lr, sl
    3dd4:	464f      	mov	r7, r9
    3dd6:	4646      	mov	r6, r8
    3dd8:	b5c0      	push	{r6, r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	0004      	movs	r4, r0
    3dde:	000d      	movs	r5, r1
    3de0:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    3de2:	2001      	movs	r0, #1
    3de4:	4b56      	ldr	r3, [pc, #344]	; (3f40 <trx_sram_read+0x170>)
    3de6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3de8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3dec:	425a      	negs	r2, r3
    3dee:	4153      	adcs	r3, r2
    3df0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3df2:	b672      	cpsid	i
    3df4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3df8:	2200      	movs	r2, #0
    3dfa:	4b52      	ldr	r3, [pc, #328]	; (3f44 <trx_sram_read+0x174>)
    3dfc:	701a      	strb	r2, [r3, #0]
	return flags;
    3dfe:	9b01      	ldr	r3, [sp, #4]
    3e00:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3e02:	4e51      	ldr	r6, [pc, #324]	; (3f48 <trx_sram_read+0x178>)
    3e04:	3201      	adds	r2, #1
    3e06:	4951      	ldr	r1, [pc, #324]	; (3f4c <trx_sram_read+0x17c>)
    3e08:	0030      	movs	r0, r6
    3e0a:	4b51      	ldr	r3, [pc, #324]	; (3f50 <trx_sram_read+0x180>)
    3e0c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e0e:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3e10:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e12:	7e1a      	ldrb	r2, [r3, #24]
    3e14:	420a      	tst	r2, r1
    3e16:	d0fc      	beq.n	3e12 <trx_sram_read+0x42>
    3e18:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3e1a:	07d2      	lsls	r2, r2, #31
    3e1c:	d501      	bpl.n	3e22 <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e1e:	2200      	movs	r2, #0
    3e20:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3e22:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e24:	7e1a      	ldrb	r2, [r3, #24]
    3e26:	420a      	tst	r2, r1
    3e28:	d0fc      	beq.n	3e24 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3e2a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e2c:	7e1a      	ldrb	r2, [r3, #24]
    3e2e:	420a      	tst	r2, r1
    3e30:	d0fc      	beq.n	3e2c <trx_sram_read+0x5c>
    3e32:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3e34:	0752      	lsls	r2, r2, #29
    3e36:	d50c      	bpl.n	3e52 <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e38:	8b5a      	ldrh	r2, [r3, #26]
    3e3a:	0752      	lsls	r2, r2, #29
    3e3c:	d501      	bpl.n	3e42 <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e3e:	2204      	movs	r2, #4
    3e40:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e42:	4a41      	ldr	r2, [pc, #260]	; (3f48 <trx_sram_read+0x178>)
    3e44:	7992      	ldrb	r2, [r2, #6]
    3e46:	2a01      	cmp	r2, #1
    3e48:	d033      	beq.n	3eb2 <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e4c:	b2d2      	uxtb	r2, r2
    3e4e:	4941      	ldr	r1, [pc, #260]	; (3f54 <trx_sram_read+0x184>)
    3e50:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    3e52:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e54:	7e1a      	ldrb	r2, [r3, #24]
    3e56:	420a      	tst	r2, r1
    3e58:	d0fc      	beq.n	3e54 <trx_sram_read+0x84>
    3e5a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3e5c:	07d2      	lsls	r2, r2, #31
    3e5e:	d500      	bpl.n	3e62 <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e60:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3e62:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e64:	7e1a      	ldrb	r2, [r3, #24]
    3e66:	420a      	tst	r2, r1
    3e68:	d0fc      	beq.n	3e64 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3e6a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e6c:	7e1a      	ldrb	r2, [r3, #24]
    3e6e:	420a      	tst	r2, r1
    3e70:	d0fc      	beq.n	3e6c <trx_sram_read+0x9c>
    3e72:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3e74:	0752      	lsls	r2, r2, #29
    3e76:	d50c      	bpl.n	3e92 <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e78:	8b5a      	ldrh	r2, [r3, #26]
    3e7a:	0752      	lsls	r2, r2, #29
    3e7c:	d501      	bpl.n	3e82 <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e7e:	2204      	movs	r2, #4
    3e80:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e82:	4a31      	ldr	r2, [pc, #196]	; (3f48 <trx_sram_read+0x178>)
    3e84:	7992      	ldrb	r2, [r2, #6]
    3e86:	2a01      	cmp	r2, #1
    3e88:	d019      	beq.n	3ebe <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e8c:	b2db      	uxtb	r3, r3
    3e8e:	4a31      	ldr	r2, [pc, #196]	; (3f54 <trx_sram_read+0x184>)
    3e90:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    3e92:	1e7b      	subs	r3, r7, #1
    3e94:	b2db      	uxtb	r3, r3
    3e96:	2f00      	cmp	r7, #0
    3e98:	d03c      	beq.n	3f14 <trx_sram_read+0x144>
    3e9a:	3301      	adds	r3, #1
    3e9c:	469c      	mov	ip, r3
    3e9e:	44ac      	add	ip, r5
    3ea0:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ea2:	4e29      	ldr	r6, [pc, #164]	; (3f48 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    3ea4:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ea6:	2300      	movs	r3, #0
    3ea8:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3eaa:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3eac:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3eae:	46b1      	mov	r9, r6
    3eb0:	e015      	b.n	3ede <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3eb4:	05d2      	lsls	r2, r2, #23
    3eb6:	0dd2      	lsrs	r2, r2, #23
    3eb8:	4926      	ldr	r1, [pc, #152]	; (3f54 <trx_sram_read+0x184>)
    3eba:	800a      	strh	r2, [r1, #0]
    3ebc:	e7c9      	b.n	3e52 <trx_sram_read+0x82>
    3ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ec0:	05db      	lsls	r3, r3, #23
    3ec2:	0ddb      	lsrs	r3, r3, #23
    3ec4:	4a23      	ldr	r2, [pc, #140]	; (3f54 <trx_sram_read+0x184>)
    3ec6:	8013      	strh	r3, [r2, #0]
    3ec8:	e7e3      	b.n	3e92 <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3eca:	464a      	mov	r2, r9
    3ecc:	7992      	ldrb	r2, [r2, #6]
    3ece:	2a01      	cmp	r2, #1
    3ed0:	d01c      	beq.n	3f0c <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ed2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3ed4:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    3ed6:	702f      	strb	r7, [r5, #0]
		data++;
    3ed8:	3501      	adds	r5, #1
	while (length--) {
    3eda:	4565      	cmp	r5, ip
    3edc:	d01a      	beq.n	3f14 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ede:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ee0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3ee2:	4202      	tst	r2, r0
    3ee4:	d0fc      	beq.n	3ee0 <trx_sram_read+0x110>
    3ee6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ee8:	4202      	tst	r2, r0
    3eea:	d001      	beq.n	3ef0 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3eec:	4652      	mov	r2, sl
    3eee:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ef0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3ef2:	4222      	tst	r2, r4
    3ef4:	d0fc      	beq.n	3ef0 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ef6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3ef8:	420a      	tst	r2, r1
    3efa:	d0fc      	beq.n	3ef6 <trx_sram_read+0x126>
    3efc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3efe:	420a      	tst	r2, r1
    3f00:	d0e9      	beq.n	3ed6 <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3f02:	8b5a      	ldrh	r2, [r3, #26]
    3f04:	420a      	tst	r2, r1
    3f06:	d0e0      	beq.n	3eca <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3f08:	8359      	strh	r1, [r3, #26]
    3f0a:	e7de      	b.n	3eca <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f0c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3f0e:	05ff      	lsls	r7, r7, #23
    3f10:	0dff      	lsrs	r7, r7, #23
    3f12:	e7e0      	b.n	3ed6 <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3f14:	2200      	movs	r2, #0
    3f16:	490d      	ldr	r1, [pc, #52]	; (3f4c <trx_sram_read+0x17c>)
    3f18:	480b      	ldr	r0, [pc, #44]	; (3f48 <trx_sram_read+0x178>)
    3f1a:	4b0d      	ldr	r3, [pc, #52]	; (3f50 <trx_sram_read+0x180>)
    3f1c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3f1e:	23ff      	movs	r3, #255	; 0xff
    3f20:	4642      	mov	r2, r8
    3f22:	4213      	tst	r3, r2
    3f24:	d005      	beq.n	3f32 <trx_sram_read+0x162>
		cpu_irq_enable();
    3f26:	2201      	movs	r2, #1
    3f28:	4b06      	ldr	r3, [pc, #24]	; (3f44 <trx_sram_read+0x174>)
    3f2a:	701a      	strb	r2, [r3, #0]
    3f2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3f30:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3f32:	b002      	add	sp, #8
    3f34:	bc1c      	pop	{r2, r3, r4}
    3f36:	4690      	mov	r8, r2
    3f38:	4699      	mov	r9, r3
    3f3a:	46a2      	mov	sl, r4
    3f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f3e:	46c0      	nop			; (mov r8, r8)
    3f40:	00000155 	.word	0x00000155
    3f44:	20000008 	.word	0x20000008
    3f48:	2000133c 	.word	0x2000133c
    3f4c:	20001300 	.word	0x20001300
    3f50:	00000b61 	.word	0x00000b61
    3f54:	200012f8 	.word	0x200012f8

00003f58 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    3f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5a:	46d6      	mov	lr, sl
    3f5c:	464f      	mov	r7, r9
    3f5e:	4646      	mov	r6, r8
    3f60:	b5c0      	push	{r6, r7, lr}
    3f62:	0006      	movs	r6, r0
    3f64:	468a      	mov	sl, r1
    3f66:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    3f68:	2001      	movs	r0, #1
    3f6a:	4b76      	ldr	r3, [pc, #472]	; (4144 <trx_aes_wrrd+0x1ec>)
    3f6c:	4798      	blx	r3

	ENTER_TRX_REGION();
    3f6e:	2100      	movs	r1, #0
    3f70:	2000      	movs	r0, #0
    3f72:	4b75      	ldr	r3, [pc, #468]	; (4148 <trx_aes_wrrd+0x1f0>)
    3f74:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3f76:	4f75      	ldr	r7, [pc, #468]	; (414c <trx_aes_wrrd+0x1f4>)
    3f78:	2201      	movs	r2, #1
    3f7a:	4975      	ldr	r1, [pc, #468]	; (4150 <trx_aes_wrrd+0x1f8>)
    3f7c:	0038      	movs	r0, r7
    3f7e:	4b75      	ldr	r3, [pc, #468]	; (4154 <trx_aes_wrrd+0x1fc>)
    3f80:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f82:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    3f84:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f86:	7e1a      	ldrb	r2, [r3, #24]
    3f88:	420a      	tst	r2, r1
    3f8a:	d0fc      	beq.n	3f86 <trx_aes_wrrd+0x2e>
    3f8c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3f8e:	07d2      	lsls	r2, r2, #31
    3f90:	d501      	bpl.n	3f96 <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3f92:	2240      	movs	r2, #64	; 0x40
    3f94:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3f96:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3f98:	7e1a      	ldrb	r2, [r3, #24]
    3f9a:	420a      	tst	r2, r1
    3f9c:	d0fc      	beq.n	3f98 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3f9e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3fa0:	7e1a      	ldrb	r2, [r3, #24]
    3fa2:	420a      	tst	r2, r1
    3fa4:	d0fc      	beq.n	3fa0 <trx_aes_wrrd+0x48>
    3fa6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3fa8:	0752      	lsls	r2, r2, #29
    3faa:	d50c      	bpl.n	3fc6 <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3fac:	8b5a      	ldrh	r2, [r3, #26]
    3fae:	0752      	lsls	r2, r2, #29
    3fb0:	d501      	bpl.n	3fb6 <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3fb2:	2204      	movs	r2, #4
    3fb4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fb6:	4a65      	ldr	r2, [pc, #404]	; (414c <trx_aes_wrrd+0x1f4>)
    3fb8:	7992      	ldrb	r2, [r2, #6]
    3fba:	2a01      	cmp	r2, #1
    3fbc:	d055      	beq.n	406a <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fc0:	b2d2      	uxtb	r2, r2
    3fc2:	4965      	ldr	r1, [pc, #404]	; (4158 <trx_aes_wrrd+0x200>)
    3fc4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    3fc6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3fc8:	7e1a      	ldrb	r2, [r3, #24]
    3fca:	420a      	tst	r2, r1
    3fcc:	d0fc      	beq.n	3fc8 <trx_aes_wrrd+0x70>
    3fce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3fd0:	07d2      	lsls	r2, r2, #31
    3fd2:	d500      	bpl.n	3fd6 <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3fd4:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3fd6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3fd8:	7e1a      	ldrb	r2, [r3, #24]
    3fda:	420a      	tst	r2, r1
    3fdc:	d0fc      	beq.n	3fd8 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3fde:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3fe0:	7e1a      	ldrb	r2, [r3, #24]
    3fe2:	420a      	tst	r2, r1
    3fe4:	d0fc      	beq.n	3fe0 <trx_aes_wrrd+0x88>
    3fe6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3fe8:	0752      	lsls	r2, r2, #29
    3fea:	d50c      	bpl.n	4006 <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3fec:	8b5a      	ldrh	r2, [r3, #26]
    3fee:	0752      	lsls	r2, r2, #29
    3ff0:	d501      	bpl.n	3ff6 <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3ff2:	2204      	movs	r2, #4
    3ff4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ff6:	4a55      	ldr	r2, [pc, #340]	; (414c <trx_aes_wrrd+0x1f4>)
    3ff8:	7992      	ldrb	r2, [r2, #6]
    3ffa:	2a01      	cmp	r2, #1
    3ffc:	d03b      	beq.n	4076 <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4000:	b2d2      	uxtb	r2, r2
    4002:	4955      	ldr	r1, [pc, #340]	; (4158 <trx_aes_wrrd+0x200>)
    4004:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    4006:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4008:	7e1a      	ldrb	r2, [r3, #24]
    400a:	420a      	tst	r2, r1
    400c:	d0fc      	beq.n	4008 <trx_aes_wrrd+0xb0>
    400e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4010:	07d2      	lsls	r2, r2, #31
    4012:	d502      	bpl.n	401a <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4014:	4652      	mov	r2, sl
    4016:	7812      	ldrb	r2, [r2, #0]
    4018:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    401a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    401c:	7e1a      	ldrb	r2, [r3, #24]
    401e:	420a      	tst	r2, r1
    4020:	d0fc      	beq.n	401c <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4022:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4024:	7e1a      	ldrb	r2, [r3, #24]
    4026:	420a      	tst	r2, r1
    4028:	d0fc      	beq.n	4024 <trx_aes_wrrd+0xcc>
    402a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    402c:	0752      	lsls	r2, r2, #29
    402e:	d50c      	bpl.n	404a <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4030:	8b5a      	ldrh	r2, [r3, #26]
    4032:	0752      	lsls	r2, r2, #29
    4034:	d501      	bpl.n	403a <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4036:	2204      	movs	r2, #4
    4038:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    403a:	4a44      	ldr	r2, [pc, #272]	; (414c <trx_aes_wrrd+0x1f4>)
    403c:	7992      	ldrb	r2, [r2, #6]
    403e:	2a01      	cmp	r2, #1
    4040:	d01f      	beq.n	4082 <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4044:	b2db      	uxtb	r3, r3
    4046:	4a44      	ldr	r2, [pc, #272]	; (4158 <trx_aes_wrrd+0x200>)
    4048:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    404a:	2700      	movs	r7, #0
    404c:	2c00      	cmp	r4, #0
    404e:	d043      	beq.n	40d8 <trx_aes_wrrd+0x180>
    4050:	4656      	mov	r6, sl
    4052:	3c01      	subs	r4, #1
    4054:	b2e4      	uxtb	r4, r4
    4056:	3401      	adds	r4, #1
    4058:	44a2      	add	sl, r4
    405a:	46d0      	mov	r8, sl
    405c:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    405e:	4d3b      	ldr	r5, [pc, #236]	; (414c <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    4060:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    4062:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    4064:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4066:	46a9      	mov	r9, r5
    4068:	e01b      	b.n	40a2 <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    406a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    406c:	05d2      	lsls	r2, r2, #23
    406e:	0dd2      	lsrs	r2, r2, #23
    4070:	4939      	ldr	r1, [pc, #228]	; (4158 <trx_aes_wrrd+0x200>)
    4072:	800a      	strh	r2, [r1, #0]
    4074:	e7a7      	b.n	3fc6 <trx_aes_wrrd+0x6e>
    4076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4078:	05d2      	lsls	r2, r2, #23
    407a:	0dd2      	lsrs	r2, r2, #23
    407c:	4936      	ldr	r1, [pc, #216]	; (4158 <trx_aes_wrrd+0x200>)
    407e:	800a      	strh	r2, [r1, #0]
    4080:	e7c1      	b.n	4006 <trx_aes_wrrd+0xae>
    4082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4084:	05db      	lsls	r3, r3, #23
    4086:	0ddb      	lsrs	r3, r3, #23
    4088:	4a33      	ldr	r2, [pc, #204]	; (4158 <trx_aes_wrrd+0x200>)
    408a:	8013      	strh	r3, [r2, #0]
    408c:	e7dd      	b.n	404a <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    408e:	464a      	mov	r2, r9
    4090:	7992      	ldrb	r2, [r2, #6]
    4092:	2a01      	cmp	r2, #1
    4094:	d01c      	beq.n	40d0 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4096:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4098:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    409a:	7037      	strb	r7, [r6, #0]
    409c:	3601      	adds	r6, #1
	while (length > 0) {
    409e:	45b0      	cmp	r8, r6
    40a0:	d01a      	beq.n	40d8 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    40a2:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40a4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    40a6:	4202      	tst	r2, r0
    40a8:	d0fc      	beq.n	40a4 <trx_aes_wrrd+0x14c>
    40aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    40ac:	4202      	tst	r2, r0
    40ae:	d001      	beq.n	40b4 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40b0:	7872      	ldrb	r2, [r6, #1]
    40b2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40b4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    40b6:	4222      	tst	r2, r4
    40b8:	d0fc      	beq.n	40b4 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40ba:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    40bc:	420a      	tst	r2, r1
    40be:	d0fc      	beq.n	40ba <trx_aes_wrrd+0x162>
    40c0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    40c2:	420a      	tst	r2, r1
    40c4:	d0e9      	beq.n	409a <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    40c6:	8b5a      	ldrh	r2, [r3, #26]
    40c8:	420a      	tst	r2, r1
    40ca:	d0e0      	beq.n	408e <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    40cc:	8359      	strh	r1, [r3, #26]
    40ce:	e7de      	b.n	408e <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    40d0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    40d2:	05ff      	lsls	r7, r7, #23
    40d4:	0dff      	lsrs	r7, r7, #23
    40d6:	e7e0      	b.n	409a <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    40d8:	4b1c      	ldr	r3, [pc, #112]	; (414c <trx_aes_wrrd+0x1f4>)
    40da:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    40dc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40de:	7e1a      	ldrb	r2, [r3, #24]
    40e0:	420a      	tst	r2, r1
    40e2:	d0fc      	beq.n	40de <trx_aes_wrrd+0x186>
    40e4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    40e6:	07d2      	lsls	r2, r2, #31
    40e8:	d501      	bpl.n	40ee <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40ea:	2200      	movs	r2, #0
    40ec:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    40ee:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40f0:	7e1a      	ldrb	r2, [r3, #24]
    40f2:	420a      	tst	r2, r1
    40f4:	d0fc      	beq.n	40f0 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    40f6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40f8:	7e1a      	ldrb	r2, [r3, #24]
    40fa:	420a      	tst	r2, r1
    40fc:	d0fc      	beq.n	40f8 <trx_aes_wrrd+0x1a0>
    40fe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4100:	0752      	lsls	r2, r2, #29
    4102:	d50a      	bpl.n	411a <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4104:	8b5a      	ldrh	r2, [r3, #26]
    4106:	0752      	lsls	r2, r2, #29
    4108:	d501      	bpl.n	410e <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    410a:	2204      	movs	r2, #4
    410c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    410e:	4a0f      	ldr	r2, [pc, #60]	; (414c <trx_aes_wrrd+0x1f4>)
    4110:	7992      	ldrb	r2, [r2, #6]
    4112:	2a01      	cmp	r2, #1
    4114:	d011      	beq.n	413a <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4116:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4118:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    411a:	4653      	mov	r3, sl
    411c:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    411e:	2200      	movs	r2, #0
    4120:	490b      	ldr	r1, [pc, #44]	; (4150 <trx_aes_wrrd+0x1f8>)
    4122:	480a      	ldr	r0, [pc, #40]	; (414c <trx_aes_wrrd+0x1f4>)
    4124:	4b0b      	ldr	r3, [pc, #44]	; (4154 <trx_aes_wrrd+0x1fc>)
    4126:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    4128:	2100      	movs	r1, #0
    412a:	2000      	movs	r0, #0
    412c:	4b0b      	ldr	r3, [pc, #44]	; (415c <trx_aes_wrrd+0x204>)
    412e:	4798      	blx	r3
}
    4130:	bc1c      	pop	{r2, r3, r4}
    4132:	4690      	mov	r8, r2
    4134:	4699      	mov	r9, r3
    4136:	46a2      	mov	sl, r4
    4138:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    413a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    413c:	05ff      	lsls	r7, r7, #23
    413e:	0dff      	lsrs	r7, r7, #23
    4140:	e7eb      	b.n	411a <trx_aes_wrrd+0x1c2>
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	00000155 	.word	0x00000155
    4148:	000002ad 	.word	0x000002ad
    414c:	2000133c 	.word	0x2000133c
    4150:	20001300 	.word	0x20001300
    4154:	00000b61 	.word	0x00000b61
    4158:	200012f8 	.word	0x200012f8
    415c:	0000028d 	.word	0x0000028d

00004160 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4160:	2280      	movs	r2, #128	; 0x80
    4162:	0312      	lsls	r2, r2, #12
    4164:	4b01      	ldr	r3, [pc, #4]	; (416c <appCmdIdentifyPeriodTimerHandler+0xc>)
    4166:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    4168:	4770      	bx	lr
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	41004400 	.word	0x41004400

00004170 <appCmdIdentifyDurationTimerHandler>:
{
    4170:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    4172:	2280      	movs	r2, #128	; 0x80
    4174:	0312      	lsls	r2, r2, #12
    4176:	4b03      	ldr	r3, [pc, #12]	; (4184 <appCmdIdentifyDurationTimerHandler+0x14>)
    4178:	619a      	str	r2, [r3, #24]
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    417a:	4803      	ldr	r0, [pc, #12]	; (4188 <appCmdIdentifyDurationTimerHandler+0x18>)
    417c:	4b03      	ldr	r3, [pc, #12]	; (418c <appCmdIdentifyDurationTimerHandler+0x1c>)
    417e:	4798      	blx	r3
}
    4180:	bd10      	pop	{r4, pc}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	41004400 	.word	0x41004400
    4188:	200002e8 	.word	0x200002e8
    418c:	00003205 	.word	0x00003205

00004190 <appCmdHandle>:
{
    4190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4192:	0004      	movs	r4, r0
		return false;
    4194:	2000      	movs	r0, #0
	if (size < sizeof(AppCmdHeader_t)) {
    4196:	2900      	cmp	r1, #0
    4198:	d002      	beq.n	41a0 <appCmdHandle+0x10>
	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    419a:	7823      	ldrb	r3, [r4, #0]
    419c:	2b10      	cmp	r3, #16
    419e:	d000      	beq.n	41a2 <appCmdHandle+0x12>
}
    41a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sizeof(AppCmdIdentify_t) != size) {
    41a2:	2905      	cmp	r1, #5
    41a4:	d1fc      	bne.n	41a0 <appCmdHandle+0x10>
		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    41a6:	4e12      	ldr	r6, [pc, #72]	; (41f0 <appCmdHandle+0x60>)
    41a8:	0030      	movs	r0, r6
    41aa:	4f12      	ldr	r7, [pc, #72]	; (41f4 <appCmdHandle+0x64>)
    41ac:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    41ae:	4d12      	ldr	r5, [pc, #72]	; (41f8 <appCmdHandle+0x68>)
    41b0:	0028      	movs	r0, r5
    41b2:	47b8      	blx	r7
		appCmdIdentifyDurationTimer.interval = req->duration;
    41b4:	7862      	ldrb	r2, [r4, #1]
    41b6:	78a3      	ldrb	r3, [r4, #2]
    41b8:	021b      	lsls	r3, r3, #8
    41ba:	4313      	orrs	r3, r2
    41bc:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    41be:	2300      	movs	r3, #0
    41c0:	7333      	strb	r3, [r6, #12]
			= appCmdIdentifyDurationTimerHandler;
    41c2:	4b0e      	ldr	r3, [pc, #56]	; (41fc <appCmdHandle+0x6c>)
    41c4:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    41c6:	0030      	movs	r0, r6
    41c8:	4e0d      	ldr	r6, [pc, #52]	; (4200 <appCmdHandle+0x70>)
    41ca:	47b0      	blx	r6
		appCmdIdentifyPeriodTimer.interval = req->period;
    41cc:	78e2      	ldrb	r2, [r4, #3]
    41ce:	7923      	ldrb	r3, [r4, #4]
    41d0:	021b      	lsls	r3, r3, #8
    41d2:	4313      	orrs	r3, r2
    41d4:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    41d6:	2301      	movs	r3, #1
    41d8:	732b      	strb	r3, [r5, #12]
			= appCmdIdentifyPeriodTimerHandler;
    41da:	4b0a      	ldr	r3, [pc, #40]	; (4204 <appCmdHandle+0x74>)
    41dc:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    41de:	0028      	movs	r0, r5
    41e0:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    41e2:	2280      	movs	r2, #128	; 0x80
    41e4:	0312      	lsls	r2, r2, #12
    41e6:	4b08      	ldr	r3, [pc, #32]	; (4208 <appCmdHandle+0x78>)
    41e8:	615a      	str	r2, [r3, #20]
		return true;
    41ea:	2001      	movs	r0, #1
    41ec:	e7d8      	b.n	41a0 <appCmdHandle+0x10>
    41ee:	46c0      	nop			; (mov r8, r8)
    41f0:	200002d4 	.word	0x200002d4
    41f4:	00003205 	.word	0x00003205
    41f8:	200002e8 	.word	0x200002e8
    41fc:	00004171 	.word	0x00004171
    4200:	00003271 	.word	0x00003271
    4204:	00004161 	.word	0x00004161
    4208:	41004400 	.word	0x41004400

0000420c <APP_CommandsInit>:
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    420c:	4b05      	ldr	r3, [pc, #20]	; (4224 <APP_CommandsInit+0x18>)
    420e:	2200      	movs	r2, #0
    4210:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
    4212:	4a05      	ldr	r2, [pc, #20]	; (4228 <APP_CommandsInit+0x1c>)
    4214:	611a      	str	r2, [r3, #16]
	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    4216:	4b05      	ldr	r3, [pc, #20]	; (422c <APP_CommandsInit+0x20>)
    4218:	2201      	movs	r2, #1
    421a:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    421c:	4a04      	ldr	r2, [pc, #16]	; (4230 <APP_CommandsInit+0x24>)
    421e:	611a      	str	r2, [r3, #16]
}
    4220:	4770      	bx	lr
    4222:	46c0      	nop			; (mov r8, r8)
    4224:	200002d4 	.word	0x200002d4
    4228:	00004171 	.word	0x00004171
    422c:	200002e8 	.word	0x200002e8
    4230:	00004161 	.word	0x00004161

00004234 <appCmdDataInd>:
{
    4234:	b510      	push	{r4, lr}
	appCmdHandle(ind->payload, ind->payloadSize);
    4236:	7a01      	ldrb	r1, [r0, #8]
    4238:	6840      	ldr	r0, [r0, #4]
    423a:	4b01      	ldr	r3, [pc, #4]	; (4240 <appCmdDataInd+0xc>)
    423c:	4798      	blx	r3
}
    423e:	bd10      	pop	{r4, pc}
    4240:	00004191 	.word	0x00004191

00004244 <main>:
*                   through MiApp programming interfaces.
*
* Note:			    
**********************************************************************/
int main ( void )
{
    4244:	b510      	push	{r4, lr}
	irq_initialize_vectors();

#if SAMD || SAMR21 || SAML21 || SAMR30
	system_init();
    4246:	4b08      	ldr	r3, [pc, #32]	; (4268 <main+0x24>)
    4248:	4798      	blx	r3
	delay_init();
    424a:	4b08      	ldr	r3, [pc, #32]	; (426c <main+0x28>)
    424c:	4798      	blx	r3
#else
	sysclk_init();
	board_init();
#endif

	cpu_irq_enable();	
    424e:	2201      	movs	r2, #1
    4250:	4b07      	ldr	r3, [pc, #28]	; (4270 <main+0x2c>)
    4252:	701a      	strb	r2, [r3, #0]
    4254:	f3bf 8f5f 	dmb	sy
    4258:	b662      	cpsie	i

#if defined (ENABLE_LCD)	
	LCD_Initialize();
#endif

	sio2host_init();
    425a:	4b06      	ldr	r3, [pc, #24]	; (4274 <main+0x30>)
    425c:	4798      	blx	r3
	
	/* Read the MAC address from either flash or EDBG */
//	ReadMacAddress();

    /* Initialize the demo */
	wsndemo_init();
    425e:	4b06      	ldr	r3, [pc, #24]	; (4278 <main+0x34>)
    4260:	4798      	blx	r3
	
    while(1)
    {
		wsndemo_task();
    4262:	4c06      	ldr	r4, [pc, #24]	; (427c <main+0x38>)
    4264:	47a0      	blx	r4
    4266:	e7fd      	b.n	4264 <main+0x20>
    4268:	000019c1 	.word	0x000019c1
    426c:	00000115 	.word	0x00000115
    4270:	20000008 	.word	0x20000008
    4274:	00001ffd 	.word	0x00001ffd
    4278:	000043e9 	.word	0x000043e9
    427c:	00004401 	.word	0x00004401

00004280 <appNetworkStatusTimerHandler>:
	port_base->OUTTGL.reg = pin_mask;
    4280:	2280      	movs	r2, #128	; 0x80
    4282:	0312      	lsls	r2, r2, #12
    4284:	4b01      	ldr	r3, [pc, #4]	; (428c <appNetworkStatusTimerHandler+0xc>)
    4286:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_NETWORK);
#endif
	(void)timer;
}
    4288:	4770      	bx	lr
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	41004400 	.word	0x41004400

00004290 <Connection_Confirm>:
/**
 * Connection confirmation
 */
static void Connection_Confirm(miwi_status_t status)
{
	if (SUCCESS == status)
    4290:	2800      	cmp	r0, #0
    4292:	d003      	beq.n	429c <Connection_Confirm+0xc>
	else
	{
#if defined(PAN_COORDINATOR)
		appState = APP_STATE_START_NETWORK;
#else
        appState = APP_STATE_CONNECT_NETWORK;
    4294:	2202      	movs	r2, #2
    4296:	4b03      	ldr	r3, [pc, #12]	; (42a4 <Connection_Confirm+0x14>)
    4298:	701a      	strb	r2, [r3, #0]
#endif
	}
}
    429a:	4770      	bx	lr
        appState = APP_STATE_SEND;
    429c:	2205      	movs	r2, #5
    429e:	4b01      	ldr	r3, [pc, #4]	; (42a4 <Connection_Confirm+0x14>)
    42a0:	701a      	strb	r2, [r3, #0]
    42a2:	e7fa      	b.n	429a <Connection_Confirm+0xa>
    42a4:	20000350 	.word	0x20000350

000042a8 <searchConfim>:
{
    42a8:	b530      	push	{r4, r5, lr}
    42aa:	b083      	sub	sp, #12
	if(foundScanResults)
    42ac:	2800      	cmp	r0, #0
    42ae:	d024      	beq.n	42fa <searchConfim+0x52>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    42b0:	7a4b      	ldrb	r3, [r1, #9]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d11b      	bne.n	42ee <searchConfim+0x46>
    42b6:	000a      	movs	r2, r1
    42b8:	321b      	adds	r2, #27
    42ba:	2301      	movs	r3, #1
		for(uint8_t loopindex = 0; loopindex < foundScanResults; loopindex++)
    42bc:	b2dc      	uxtb	r4, r3
    42be:	42a0      	cmp	r0, r4
    42c0:	d917      	bls.n	42f2 <searchConfim+0x4a>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    42c2:	001d      	movs	r5, r3
    42c4:	7814      	ldrb	r4, [r2, #0]
    42c6:	3301      	adds	r3, #1
    42c8:	3212      	adds	r2, #18
    42ca:	2c00      	cmp	r4, #0
    42cc:	d0f6      	beq.n	42bc <searchConfim+0x14>
				SHORT_ADDR_LEN, (uint8_t*)&searchConfRes->beaconList[loopindex].shortAddress, CAPABILITY_INFO, Connection_Confirm);
    42ce:	00eb      	lsls	r3, r5, #3
    42d0:	195a      	adds	r2, r3, r5
    42d2:	0052      	lsls	r2, r2, #1
    42d4:	3210      	adds	r2, #16
    42d6:	188a      	adds	r2, r1, r2
				MiApp_EstablishConnection(searchConfRes->beaconList[loopindex].logicalChannel,
    42d8:	195b      	adds	r3, r3, r5
    42da:	005b      	lsls	r3, r3, #1
    42dc:	18c9      	adds	r1, r1, r3
    42de:	7b08      	ldrb	r0, [r1, #12]
    42e0:	4b08      	ldr	r3, [pc, #32]	; (4304 <searchConfim+0x5c>)
    42e2:	9300      	str	r3, [sp, #0]
    42e4:	2306      	movs	r3, #6
    42e6:	2102      	movs	r1, #2
    42e8:	4c07      	ldr	r4, [pc, #28]	; (4308 <searchConfim+0x60>)
    42ea:	47a0      	blx	r4
				return;
    42ec:	e008      	b.n	4300 <searchConfim+0x58>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    42ee:	2500      	movs	r5, #0
    42f0:	e7ed      	b.n	42ce <searchConfim+0x26>
		appState = APP_STATE_CONNECT_NETWORK;
    42f2:	2202      	movs	r2, #2
    42f4:	4b05      	ldr	r3, [pc, #20]	; (430c <searchConfim+0x64>)
    42f6:	701a      	strb	r2, [r3, #0]
    42f8:	e002      	b.n	4300 <searchConfim+0x58>
		appState = APP_STATE_CONNECT_NETWORK;
    42fa:	2202      	movs	r2, #2
    42fc:	4b03      	ldr	r3, [pc, #12]	; (430c <searchConfim+0x64>)
    42fe:	701a      	strb	r2, [r3, #0]
}
    4300:	b003      	add	sp, #12
    4302:	bd30      	pop	{r4, r5, pc}
    4304:	00004291 	.word	0x00004291
    4308:	00006bb1 	.word	0x00006bb1
    430c:	20000350 	.word	0x20000350

00004310 <appDataSendingTimerHandler>:
{
    4310:	b510      	push	{r4, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    4312:	4b06      	ldr	r3, [pc, #24]	; (432c <appDataSendingTimerHandler+0x1c>)
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	2b08      	cmp	r3, #8
    4318:	d003      	beq.n	4322 <appDataSendingTimerHandler+0x12>
		SYS_TimerStart(&appDataSendingTimer);
    431a:	4805      	ldr	r0, [pc, #20]	; (4330 <appDataSendingTimerHandler+0x20>)
    431c:	4b05      	ldr	r3, [pc, #20]	; (4334 <appDataSendingTimerHandler+0x24>)
    431e:	4798      	blx	r3
}
    4320:	bd10      	pop	{r4, pc}
		appState = APP_STATE_SEND;
    4322:	2205      	movs	r2, #5
    4324:	4b01      	ldr	r3, [pc, #4]	; (432c <appDataSendingTimerHandler+0x1c>)
    4326:	701a      	strb	r2, [r3, #0]
    4328:	e7fa      	b.n	4320 <appDataSendingTimerHandler+0x10>
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	20000350 	.word	0x20000350
    4330:	20001348 	.word	0x20001348
    4334:	00003271 	.word	0x00003271

00004338 <appDataInd>:
{
    4338:	b510      	push	{r4, lr}
	AppMessage_t *msg = (AppMessage_t *)ind->payload;
    433a:	6843      	ldr	r3, [r0, #4]
    433c:	2180      	movs	r1, #128	; 0x80
    433e:	0309      	lsls	r1, r1, #12
    4340:	4a04      	ldr	r2, [pc, #16]	; (4354 <appDataInd+0x1c>)
    4342:	61d1      	str	r1, [r2, #28]
	msg->lqi = ind->packetLQI;
    4344:	7a82      	ldrb	r2, [r0, #10]
    4346:	765a      	strb	r2, [r3, #25]
	msg->rssi = ind->packetRSSI;
    4348:	7a42      	ldrb	r2, [r0, #9]
    434a:	769a      	strb	r2, [r3, #26]
    appCmdDataInd(ind);
    434c:	4b02      	ldr	r3, [pc, #8]	; (4358 <appDataInd+0x20>)
    434e:	4798      	blx	r3
}
    4350:	bd10      	pop	{r4, pc}
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	41004400 	.word	0x41004400
    4358:	00004235 	.word	0x00004235

0000435c <appDataConf>:
{
    435c:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    435e:	2280      	movs	r2, #128	; 0x80
    4360:	0312      	lsls	r2, r2, #12
    4362:	4b14      	ldr	r3, [pc, #80]	; (43b4 <appDataConf+0x58>)
    4364:	619a      	str	r2, [r3, #24]
	if (SUCCESS == status) {
    4366:	2900      	cmp	r1, #0
    4368:	d111      	bne.n	438e <appDataConf+0x32>
		if (!appNetworkStatus) {
    436a:	4b13      	ldr	r3, [pc, #76]	; (43b8 <appDataConf+0x5c>)
    436c:	781b      	ldrb	r3, [r3, #0]
    436e:	2b00      	cmp	r3, #0
    4370:	d004      	beq.n	437c <appDataConf+0x20>
	if (APP_STATE_WAIT_CONF == appState)
    4372:	4b12      	ldr	r3, [pc, #72]	; (43bc <appDataConf+0x60>)
    4374:	781b      	ldrb	r3, [r3, #0]
    4376:	2b06      	cmp	r3, #6
    4378:	d018      	beq.n	43ac <appDataConf+0x50>
}
    437a:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    437c:	4b0d      	ldr	r3, [pc, #52]	; (43b4 <appDataConf+0x58>)
    437e:	615a      	str	r2, [r3, #20]
			SYS_TimerStop(&appNetworkStatusTimer);
    4380:	480f      	ldr	r0, [pc, #60]	; (43c0 <appDataConf+0x64>)
    4382:	4b10      	ldr	r3, [pc, #64]	; (43c4 <appDataConf+0x68>)
    4384:	4798      	blx	r3
			appNetworkStatus = true;
    4386:	2201      	movs	r2, #1
    4388:	4b0b      	ldr	r3, [pc, #44]	; (43b8 <appDataConf+0x5c>)
    438a:	701a      	strb	r2, [r3, #0]
    438c:	e7f1      	b.n	4372 <appDataConf+0x16>
		if (appNetworkStatus) {
    438e:	4b0a      	ldr	r3, [pc, #40]	; (43b8 <appDataConf+0x5c>)
    4390:	781b      	ldrb	r3, [r3, #0]
    4392:	2b00      	cmp	r3, #0
    4394:	d0ed      	beq.n	4372 <appDataConf+0x16>
		port_base->OUTSET.reg = pin_mask;
    4396:	2280      	movs	r2, #128	; 0x80
    4398:	0312      	lsls	r2, r2, #12
    439a:	4b06      	ldr	r3, [pc, #24]	; (43b4 <appDataConf+0x58>)
    439c:	619a      	str	r2, [r3, #24]
			SYS_TimerStart(&appNetworkStatusTimer);
    439e:	4808      	ldr	r0, [pc, #32]	; (43c0 <appDataConf+0x64>)
    43a0:	4b09      	ldr	r3, [pc, #36]	; (43c8 <appDataConf+0x6c>)
    43a2:	4798      	blx	r3
			appNetworkStatus = false;
    43a4:	2200      	movs	r2, #0
    43a6:	4b04      	ldr	r3, [pc, #16]	; (43b8 <appDataConf+0x5c>)
    43a8:	701a      	strb	r2, [r3, #0]
    43aa:	e7e2      	b.n	4372 <appDataConf+0x16>
		appState = APP_STATE_SENDING_DONE;
    43ac:	2207      	movs	r2, #7
    43ae:	4b03      	ldr	r3, [pc, #12]	; (43bc <appDataConf+0x60>)
    43b0:	701a      	strb	r2, [r3, #0]
}
    43b2:	e7e2      	b.n	437a <appDataConf+0x1e>
    43b4:	41004400 	.word	0x41004400
    43b8:	20000338 	.word	0x20000338
    43bc:	20000350 	.word	0x20000350
    43c0:	2000033c 	.word	0x2000033c
    43c4:	00003205 	.word	0x00003205
    43c8:	00003271 	.word	0x00003271

000043cc <appLinkFailureCallback>:
	APP_TaskHandler();
}

#ifndef PAN_COORDINATOR
void appLinkFailureCallback(void)
{
    43cc:	b510      	push	{r4, lr}
	/* On link failure initiate search to establish connection */
	appState = APP_STATE_CONNECT_NETWORK;
    43ce:	2202      	movs	r2, #2
    43d0:	4b02      	ldr	r3, [pc, #8]	; (43dc <appLinkFailureCallback+0x10>)
    43d2:	701a      	strb	r2, [r3, #0]
	SYS_TimerStop(&appDataSendingTimer);
    43d4:	4802      	ldr	r0, [pc, #8]	; (43e0 <appLinkFailureCallback+0x14>)
    43d6:	4b03      	ldr	r3, [pc, #12]	; (43e4 <appLinkFailureCallback+0x18>)
    43d8:	4798      	blx	r3
}
    43da:	bd10      	pop	{r4, pc}
    43dc:	20000350 	.word	0x20000350
    43e0:	20001348 	.word	0x20001348
    43e4:	00003205 	.word	0x00003205

000043e8 <wsndemo_init>:
{
    43e8:	b510      	push	{r4, lr}
	MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly);
    43ea:	4902      	ldr	r1, [pc, #8]	; (43f4 <wsndemo_init+0xc>)
    43ec:	4802      	ldr	r0, [pc, #8]	; (43f8 <wsndemo_init+0x10>)
    43ee:	4b03      	ldr	r3, [pc, #12]	; (43fc <wsndemo_init+0x14>)
    43f0:	4798      	blx	r3
}
    43f2:	bd10      	pop	{r4, pc}
    43f4:	2000000c 	.word	0x2000000c
    43f8:	20000030 	.word	0x20000030
    43fc:	00004995 	.word	0x00004995

00004400 <wsndemo_task>:
{
    4400:	b5f0      	push	{r4, r5, r6, r7, lr}
    4402:	46c6      	mov	lr, r8
    4404:	b500      	push	{lr}
    4406:	b086      	sub	sp, #24
	MeshTasks();
    4408:	4b72      	ldr	r3, [pc, #456]	; (45d4 <wsndemo_task+0x1d4>)
    440a:	4798      	blx	r3
	switch(appState)
    440c:	4b72      	ldr	r3, [pc, #456]	; (45d8 <wsndemo_task+0x1d8>)
    440e:	781b      	ldrb	r3, [r3, #0]
    4410:	2b02      	cmp	r3, #2
    4412:	d064      	beq.n	44de <wsndemo_task+0xde>
    4414:	b2da      	uxtb	r2, r3
    4416:	2a02      	cmp	r2, #2
    4418:	d90a      	bls.n	4430 <wsndemo_task+0x30>
    441a:	2b05      	cmp	r3, #5
    441c:	d069      	beq.n	44f2 <wsndemo_task+0xf2>
    441e:	2b07      	cmp	r3, #7
    4420:	d159      	bne.n	44d6 <wsndemo_task+0xd6>
			SYS_TimerStart(&appDataSendingTimer);
    4422:	486e      	ldr	r0, [pc, #440]	; (45dc <wsndemo_task+0x1dc>)
    4424:	4b6e      	ldr	r3, [pc, #440]	; (45e0 <wsndemo_task+0x1e0>)
    4426:	4798      	blx	r3
			appState = APP_STATE_WAIT_SEND_TIMER;
    4428:	2208      	movs	r2, #8
    442a:	4b6b      	ldr	r3, [pc, #428]	; (45d8 <wsndemo_task+0x1d8>)
    442c:	701a      	strb	r2, [r3, #0]
}
    442e:	e052      	b.n	44d6 <wsndemo_task+0xd6>
	switch(appState)
    4430:	2b00      	cmp	r3, #0
    4432:	d150      	bne.n	44d6 <wsndemo_task+0xd6>
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    4434:	486b      	ldr	r0, [pc, #428]	; (45e4 <wsndemo_task+0x1e4>)
    4436:	2501      	movs	r5, #1
    4438:	7005      	strb	r5, [r0, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    443a:	2602      	movs	r6, #2
    443c:	7046      	strb	r6, [r0, #1]
	appMsg.extAddr              = 0;
    443e:	2400      	movs	r4, #0
    4440:	2200      	movs	r2, #0
    4442:	8042      	strh	r2, [r0, #2]
    4444:	8082      	strh	r2, [r0, #4]
    4446:	80c2      	strh	r2, [r0, #6]
    4448:	8102      	strh	r2, [r0, #8]
	appMsg.shortAddr            = 0;
    444a:	2300      	movs	r3, #0
    444c:	8143      	strh	r3, [r0, #10]
	appMsg.softVersion          = 0x01100000;
    444e:	2388      	movs	r3, #136	; 0x88
    4450:	045b      	lsls	r3, r3, #17
    4452:	60c3      	str	r3, [r0, #12]
	appMsg.channelMask          = CHANNEL_MAP;
    4454:	2380      	movs	r3, #128	; 0x80
    4456:	049b      	lsls	r3, r3, #18
    4458:	6103      	str	r3, [r0, #16]
	appMsg.nextHopAddr          = 0;
    445a:	75c2      	strb	r2, [r0, #23]
    445c:	7602      	strb	r2, [r0, #24]
	appMsg.lqi                  = 0;
    445e:	7644      	strb	r4, [r0, #25]
	appMsg.rssi                 = 0;
    4460:	7684      	strb	r4, [r0, #26]
	appMsg.sensors.type        = 1;
    4462:	76c5      	strb	r5, [r0, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    4464:	230c      	movs	r3, #12
    4466:	7703      	strb	r3, [r0, #28]
	appMsg.sensors.battery     = 0;
    4468:	0003      	movs	r3, r0
    446a:	7742      	strb	r2, [r0, #29]
    446c:	7782      	strb	r2, [r0, #30]
    446e:	77c2      	strb	r2, [r0, #31]
    4470:	331d      	adds	r3, #29
    4472:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 0;
    4474:	0003      	movs	r3, r0
    4476:	3321      	adds	r3, #33	; 0x21
    4478:	701a      	strb	r2, [r3, #0]
    447a:	705a      	strb	r2, [r3, #1]
    447c:	709a      	strb	r2, [r3, #2]
    447e:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.light       = 0;
    4480:	0003      	movs	r3, r0
    4482:	3325      	adds	r3, #37	; 0x25
    4484:	701a      	strb	r2, [r3, #0]
    4486:	705a      	strb	r2, [r3, #1]
    4488:	709a      	strb	r2, [r3, #2]
    448a:	70da      	strb	r2, [r3, #3]
	appMsg.caption.type         = 32;
    448c:	3220      	adds	r2, #32
    448e:	2329      	movs	r3, #41	; 0x29
    4490:	54c2      	strb	r2, [r0, r3]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    4492:	3a0f      	subs	r2, #15
    4494:	3301      	adds	r3, #1
    4496:	54c2      	strb	r2, [r0, r3]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    4498:	302b      	adds	r0, #43	; 0x2b
    449a:	4953      	ldr	r1, [pc, #332]	; (45e8 <wsndemo_task+0x1e8>)
    449c:	4b53      	ldr	r3, [pc, #332]	; (45ec <wsndemo_task+0x1ec>)
    449e:	4798      	blx	r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    44a0:	4b4e      	ldr	r3, [pc, #312]	; (45dc <wsndemo_task+0x1dc>)
    44a2:	4a53      	ldr	r2, [pc, #332]	; (45f0 <wsndemo_task+0x1f0>)
    44a4:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    44a6:	731c      	strb	r4, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    44a8:	4a52      	ldr	r2, [pc, #328]	; (45f4 <wsndemo_task+0x1f4>)
    44aa:	611a      	str	r2, [r3, #16]
	appNetworkStatus = false;
    44ac:	4b52      	ldr	r3, [pc, #328]	; (45f8 <wsndemo_task+0x1f8>)
    44ae:	701c      	strb	r4, [r3, #0]
	appNetworkStatusTimer.interval = APP_NWKSTATUS_INTERVAL;
    44b0:	4852      	ldr	r0, [pc, #328]	; (45fc <wsndemo_task+0x1fc>)
    44b2:	23fa      	movs	r3, #250	; 0xfa
    44b4:	009b      	lsls	r3, r3, #2
    44b6:	6083      	str	r3, [r0, #8]
	appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
    44b8:	7305      	strb	r5, [r0, #12]
	appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    44ba:	4b51      	ldr	r3, [pc, #324]	; (4600 <wsndemo_task+0x200>)
    44bc:	6103      	str	r3, [r0, #16]
	SYS_TimerStart(&appNetworkStatusTimer);
    44be:	4b48      	ldr	r3, [pc, #288]	; (45e0 <wsndemo_task+0x1e0>)
    44c0:	4798      	blx	r3
	APP_CommandsInit();
    44c2:	4b50      	ldr	r3, [pc, #320]	; (4604 <wsndemo_task+0x204>)
    44c4:	4798      	blx	r3
	MiApp_SubscribeDataIndicationCallback(appDataInd);
    44c6:	4850      	ldr	r0, [pc, #320]	; (4608 <wsndemo_task+0x208>)
    44c8:	4b50      	ldr	r3, [pc, #320]	; (460c <wsndemo_task+0x20c>)
    44ca:	4798      	blx	r3
	MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    44cc:	4850      	ldr	r0, [pc, #320]	; (4610 <wsndemo_task+0x210>)
    44ce:	4b51      	ldr	r3, [pc, #324]	; (4614 <wsndemo_task+0x214>)
    44d0:	4798      	blx	r3
	appState = APP_STATE_CONNECT_NETWORK;
    44d2:	4b41      	ldr	r3, [pc, #260]	; (45d8 <wsndemo_task+0x1d8>)
    44d4:	701e      	strb	r6, [r3, #0]
}
    44d6:	b006      	add	sp, #24
    44d8:	bc04      	pop	{r2}
    44da:	4690      	mov	r8, r2
    44dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			MiApp_SearchConnection(APP_SCAN_DURATION, CHANNEL_MAP, searchConfim);
    44de:	4a4e      	ldr	r2, [pc, #312]	; (4618 <wsndemo_task+0x218>)
    44e0:	2180      	movs	r1, #128	; 0x80
    44e2:	0489      	lsls	r1, r1, #18
    44e4:	200a      	movs	r0, #10
    44e6:	4b4d      	ldr	r3, [pc, #308]	; (461c <wsndemo_task+0x21c>)
    44e8:	4798      	blx	r3
			appState = APP_STATE_CONNECTING_NETWORK;
    44ea:	2203      	movs	r2, #3
    44ec:	4b3a      	ldr	r3, [pc, #232]	; (45d8 <wsndemo_task+0x1d8>)
    44ee:	701a      	strb	r2, [r3, #0]
    44f0:	e7f1      	b.n	44d6 <wsndemo_task+0xd6>
    uint16_t shortAddressLocal = 0xFFFF;
    44f2:	2512      	movs	r5, #18
    44f4:	446d      	add	r5, sp
    44f6:	2301      	movs	r3, #1
    44f8:	425b      	negs	r3, r3
    44fa:	802b      	strh	r3, [r5, #0]
    uint16_t shortAddressPanId = 0xFFFF;
    44fc:	ae05      	add	r6, sp, #20
    44fe:	8033      	strh	r3, [r6, #0]
    uint16_t dstAddr = 0; /* PAN Coordinator Address */
    4500:	3317      	adds	r3, #23
    4502:	446b      	add	r3, sp
    4504:	4698      	mov	r8, r3
    4506:	2300      	movs	r3, #0
    4508:	4642      	mov	r2, r8
    450a:	8013      	strh	r3, [r2, #0]
	appMsg.sensors.battery     = 11;
    450c:	4c35      	ldr	r4, [pc, #212]	; (45e4 <wsndemo_task+0x1e4>)
    450e:	0023      	movs	r3, r4
    4510:	220b      	movs	r2, #11
    4512:	7762      	strb	r2, [r4, #29]
    4514:	2200      	movs	r2, #0
    4516:	77a2      	strb	r2, [r4, #30]
    4518:	77e2      	strb	r2, [r4, #31]
    451a:	331d      	adds	r3, #29
    451c:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 22;
    451e:	0023      	movs	r3, r4
    4520:	3321      	adds	r3, #33	; 0x21
    4522:	3216      	adds	r2, #22
    4524:	701a      	strb	r2, [r3, #0]
    4526:	2200      	movs	r2, #0
    4528:	705a      	strb	r2, [r3, #1]
    452a:	709a      	strb	r2, [r3, #2]
    452c:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.light       = 33;
    452e:	0023      	movs	r3, r4
    4530:	3325      	adds	r3, #37	; 0x25
    4532:	3221      	adds	r2, #33	; 0x21
    4534:	701a      	strb	r2, [r3, #0]
    4536:	2200      	movs	r2, #0
    4538:	705a      	strb	r2, [r3, #1]
    453a:	709a      	strb	r2, [r3, #2]
    453c:	70da      	strb	r2, [r3, #3]
	MiApp_Get(SHORT_ADDRESS, (uint8_t *)&shortAddressLocal);
    453e:	0029      	movs	r1, r5
    4540:	2002      	movs	r0, #2
    4542:	4f37      	ldr	r7, [pc, #220]	; (4620 <wsndemo_task+0x220>)
    4544:	47b8      	blx	r7
        appMsg.shortAddr = shortAddressLocal;
    4546:	882b      	ldrh	r3, [r5, #0]
    4548:	8163      	strh	r3, [r4, #10]
	appMsg.extAddr   = appMsg.shortAddr;
    454a:	8063      	strh	r3, [r4, #2]
    454c:	0c1b      	lsrs	r3, r3, #16
    454e:	80a3      	strh	r3, [r4, #4]
    4550:	2300      	movs	r3, #0
    4552:	80e3      	strh	r3, [r4, #6]
    4554:	8123      	strh	r3, [r4, #8]
	appMsg.nextHopAddr = MiApp_MeshGetNextHopAddr(PAN_COORDINATOR_SHORT_ADDRESS);
    4556:	2000      	movs	r0, #0
    4558:	4b32      	ldr	r3, [pc, #200]	; (4624 <wsndemo_task+0x224>)
    455a:	4798      	blx	r3
    455c:	75e0      	strb	r0, [r4, #23]
    455e:	0a00      	lsrs	r0, r0, #8
    4560:	7620      	strb	r0, [r4, #24]
	MiApp_Get(CHANNEL, (uint8_t *)&appMsg.workingChannel);
    4562:	0021      	movs	r1, r4
    4564:	3116      	adds	r1, #22
    4566:	2000      	movs	r0, #0
    4568:	47b8      	blx	r7
	MiApp_Get(PANID, (uint8_t *)&shortAddressPanId);
    456a:	0031      	movs	r1, r6
    456c:	2001      	movs	r0, #1
    456e:	47b8      	blx	r7
        appMsg.panId = shortAddressPanId;
    4570:	8833      	ldrh	r3, [r6, #0]
    4572:	82a3      	strh	r3, [r4, #20]
		port_base->OUTCLR.reg = pin_mask;
    4574:	2280      	movs	r2, #128	; 0x80
    4576:	0312      	lsls	r2, r2, #12
    4578:	4b2b      	ldr	r3, [pc, #172]	; (4628 <wsndemo_task+0x228>)
    457a:	615a      	str	r2, [r3, #20]
	appMsg.caption.type         = 32;
    457c:	2220      	movs	r2, #32
    457e:	2329      	movs	r3, #41	; 0x29
    4580:	54e2      	strb	r2, [r4, r3]
	    appMsg.caption.size         = APP_CAPTION_SIZE;
    4582:	3a0f      	subs	r2, #15
    4584:	3301      	adds	r3, #1
    4586:	54e2      	strb	r2, [r4, r3]
	    memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    4588:	0020      	movs	r0, r4
    458a:	302b      	adds	r0, #43	; 0x2b
    458c:	4916      	ldr	r1, [pc, #88]	; (45e8 <wsndemo_task+0x1e8>)
    458e:	4b17      	ldr	r3, [pc, #92]	; (45ec <wsndemo_task+0x1ec>)
    4590:	4798      	blx	r3
		sprintf(&(appMsg.caption.text[APP_CAPTION_SIZE - SHORT_ADDRESS_CAPTION_SIZE]), "-0x%04X", shortAddressLocal);
    4592:	882a      	ldrh	r2, [r5, #0]
    4594:	0020      	movs	r0, r4
    4596:	3035      	adds	r0, #53	; 0x35
    4598:	4924      	ldr	r1, [pc, #144]	; (462c <wsndemo_task+0x22c>)
    459a:	4b25      	ldr	r3, [pc, #148]	; (4630 <wsndemo_task+0x230>)
    459c:	4798      	blx	r3
	if (MiApp_SendData(2, (uint8_t *)&dstAddr, sizeof(appMsg), (uint8_t *)&appMsg, wsnmsghandle, true, appDataConf))
    459e:	4b25      	ldr	r3, [pc, #148]	; (4634 <wsndemo_task+0x234>)
    45a0:	9302      	str	r3, [sp, #8]
    45a2:	2301      	movs	r3, #1
    45a4:	9301      	str	r3, [sp, #4]
    45a6:	4b24      	ldr	r3, [pc, #144]	; (4638 <wsndemo_task+0x238>)
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	9300      	str	r3, [sp, #0]
    45ac:	0023      	movs	r3, r4
    45ae:	223c      	movs	r2, #60	; 0x3c
    45b0:	4641      	mov	r1, r8
    45b2:	2002      	movs	r0, #2
    45b4:	4c21      	ldr	r4, [pc, #132]	; (463c <wsndemo_task+0x23c>)
    45b6:	47a0      	blx	r4
    45b8:	2800      	cmp	r0, #0
    45ba:	d103      	bne.n	45c4 <wsndemo_task+0x1c4>
		appState = APP_STATE_SENDING_DONE;
    45bc:	2207      	movs	r2, #7
    45be:	4b06      	ldr	r3, [pc, #24]	; (45d8 <wsndemo_task+0x1d8>)
    45c0:	701a      	strb	r2, [r3, #0]
    45c2:	e788      	b.n	44d6 <wsndemo_task+0xd6>
		++wsnmsghandle;
    45c4:	4a1c      	ldr	r2, [pc, #112]	; (4638 <wsndemo_task+0x238>)
    45c6:	7813      	ldrb	r3, [r2, #0]
    45c8:	3301      	adds	r3, #1
    45ca:	7013      	strb	r3, [r2, #0]
		appState = APP_STATE_WAIT_CONF;
    45cc:	2206      	movs	r2, #6
    45ce:	4b02      	ldr	r3, [pc, #8]	; (45d8 <wsndemo_task+0x1d8>)
    45d0:	701a      	strb	r2, [r3, #0]
    45d2:	e780      	b.n	44d6 <wsndemo_task+0xd6>
    45d4:	00004ad5 	.word	0x00004ad5
    45d8:	20000350 	.word	0x20000350
    45dc:	20001348 	.word	0x20001348
    45e0:	00003271 	.word	0x00003271
    45e4:	200002fc 	.word	0x200002fc
    45e8:	000084b0 	.word	0x000084b0
    45ec:	0000758b 	.word	0x0000758b
    45f0:	00002710 	.word	0x00002710
    45f4:	00004311 	.word	0x00004311
    45f8:	20000338 	.word	0x20000338
    45fc:	2000033c 	.word	0x2000033c
    4600:	00004281 	.word	0x00004281
    4604:	0000420d 	.word	0x0000420d
    4608:	00004339 	.word	0x00004339
    460c:	00005d79 	.word	0x00005d79
    4610:	000043cd 	.word	0x000043cd
    4614:	00006f8d 	.word	0x00006f8d
    4618:	000042a9 	.word	0x000042a9
    461c:	00006ca1 	.word	0x00006ca1
    4620:	00004cb5 	.word	0x00004cb5
    4624:	00004cfd 	.word	0x00004cfd
    4628:	41004400 	.word	0x41004400
    462c:	000084bc 	.word	0x000084bc
    4630:	00007719 	.word	0x00007719
    4634:	0000435d 	.word	0x0000435d
    4638:	20000351 	.word	0x20000351
    463c:	00004b71 	.word	0x00004b71

00004640 <common_tc_delay>:
    4640:	b510      	push	{r4, lr}
    4642:	1c04      	adds	r4, r0, #0
    4644:	4b13      	ldr	r3, [pc, #76]	; (4694 <common_tc_delay+0x54>)
    4646:	4798      	blx	r3
    4648:	4b13      	ldr	r3, [pc, #76]	; (4698 <common_tc_delay+0x58>)
    464a:	781a      	ldrb	r2, [r3, #0]
    464c:	4362      	muls	r2, r4
    464e:	1881      	adds	r1, r0, r2
    4650:	4b12      	ldr	r3, [pc, #72]	; (469c <common_tc_delay+0x5c>)
    4652:	6059      	str	r1, [r3, #4]
    4654:	6859      	ldr	r1, [r3, #4]
    4656:	0c09      	lsrs	r1, r1, #16
    4658:	6059      	str	r1, [r3, #4]
    465a:	685b      	ldr	r3, [r3, #4]
    465c:	2b00      	cmp	r3, #0
    465e:	d007      	beq.n	4670 <common_tc_delay+0x30>
    4660:	4b0e      	ldr	r3, [pc, #56]	; (469c <common_tc_delay+0x5c>)
    4662:	6859      	ldr	r1, [r3, #4]
    4664:	3201      	adds	r2, #1
    4666:	1880      	adds	r0, r0, r2
    4668:	8118      	strh	r0, [r3, #8]
    466a:	4b0d      	ldr	r3, [pc, #52]	; (46a0 <common_tc_delay+0x60>)
    466c:	4798      	blx	r3
    466e:	e004      	b.n	467a <common_tc_delay+0x3a>
    4670:	1882      	adds	r2, r0, r2
    4672:	4b0a      	ldr	r3, [pc, #40]	; (469c <common_tc_delay+0x5c>)
    4674:	811a      	strh	r2, [r3, #8]
    4676:	4b0b      	ldr	r3, [pc, #44]	; (46a4 <common_tc_delay+0x64>)
    4678:	4798      	blx	r3
    467a:	4b08      	ldr	r3, [pc, #32]	; (469c <common_tc_delay+0x5c>)
    467c:	891b      	ldrh	r3, [r3, #8]
    467e:	2b63      	cmp	r3, #99	; 0x63
    4680:	d802      	bhi.n	4688 <common_tc_delay+0x48>
    4682:	3364      	adds	r3, #100	; 0x64
    4684:	4a05      	ldr	r2, [pc, #20]	; (469c <common_tc_delay+0x5c>)
    4686:	8113      	strh	r3, [r2, #8]
    4688:	4b04      	ldr	r3, [pc, #16]	; (469c <common_tc_delay+0x5c>)
    468a:	8918      	ldrh	r0, [r3, #8]
    468c:	4b06      	ldr	r3, [pc, #24]	; (46a8 <common_tc_delay+0x68>)
    468e:	4798      	blx	r3
    4690:	bd10      	pop	{r4, pc}
    4692:	46c0      	nop			; (mov r8, r8)
    4694:	00003335 	.word	0x00003335
    4698:	2000135c 	.word	0x2000135c
    469c:	20000354 	.word	0x20000354
    46a0:	00003349 	.word	0x00003349
    46a4:	0000335d 	.word	0x0000335d
    46a8:	00003399 	.word	0x00003399

000046ac <common_tc_init>:
    46ac:	b508      	push	{r3, lr}
    46ae:	2200      	movs	r2, #0
    46b0:	4b03      	ldr	r3, [pc, #12]	; (46c0 <common_tc_init+0x14>)
    46b2:	701a      	strb	r2, [r3, #0]
    46b4:	4b03      	ldr	r3, [pc, #12]	; (46c4 <common_tc_init+0x18>)
    46b6:	4798      	blx	r3
    46b8:	4b03      	ldr	r3, [pc, #12]	; (46c8 <common_tc_init+0x1c>)
    46ba:	7018      	strb	r0, [r3, #0]
    46bc:	bd08      	pop	{r3, pc}
    46be:	46c0      	nop			; (mov r8, r8)
    46c0:	20000354 	.word	0x20000354
    46c4:	000033b1 	.word	0x000033b1
    46c8:	2000135c 	.word	0x2000135c

000046cc <tmr_ovf_callback>:
    46cc:	b508      	push	{r3, lr}
    46ce:	4b0e      	ldr	r3, [pc, #56]	; (4708 <tmr_ovf_callback+0x3c>)
    46d0:	685b      	ldr	r3, [r3, #4]
    46d2:	2b00      	cmp	r3, #0
    46d4:	d007      	beq.n	46e6 <tmr_ovf_callback+0x1a>
    46d6:	4a0c      	ldr	r2, [pc, #48]	; (4708 <tmr_ovf_callback+0x3c>)
    46d8:	6853      	ldr	r3, [r2, #4]
    46da:	3b01      	subs	r3, #1
    46dc:	6053      	str	r3, [r2, #4]
    46de:	2b00      	cmp	r3, #0
    46e0:	d101      	bne.n	46e6 <tmr_ovf_callback+0x1a>
    46e2:	4b0a      	ldr	r3, [pc, #40]	; (470c <tmr_ovf_callback+0x40>)
    46e4:	4798      	blx	r3
    46e6:	4a08      	ldr	r2, [pc, #32]	; (4708 <tmr_ovf_callback+0x3c>)
    46e8:	7813      	ldrb	r3, [r2, #0]
    46ea:	3301      	adds	r3, #1
    46ec:	b2db      	uxtb	r3, r3
    46ee:	7013      	strb	r3, [r2, #0]
    46f0:	4a07      	ldr	r2, [pc, #28]	; (4710 <tmr_ovf_callback+0x44>)
    46f2:	7812      	ldrb	r2, [r2, #0]
    46f4:	429a      	cmp	r2, r3
    46f6:	d806      	bhi.n	4706 <tmr_ovf_callback+0x3a>
    46f8:	4b03      	ldr	r3, [pc, #12]	; (4708 <tmr_ovf_callback+0x3c>)
    46fa:	2200      	movs	r2, #0
    46fc:	701a      	strb	r2, [r3, #0]
    46fe:	68db      	ldr	r3, [r3, #12]
    4700:	2b00      	cmp	r3, #0
    4702:	d000      	beq.n	4706 <tmr_ovf_callback+0x3a>
    4704:	4798      	blx	r3
    4706:	bd08      	pop	{r3, pc}
    4708:	20000354 	.word	0x20000354
    470c:	0000335d 	.word	0x0000335d
    4710:	2000135c 	.word	0x2000135c

00004714 <tmr_cca_callback>:
    4714:	b508      	push	{r3, lr}
    4716:	4b04      	ldr	r3, [pc, #16]	; (4728 <tmr_cca_callback+0x14>)
    4718:	4798      	blx	r3
    471a:	4b04      	ldr	r3, [pc, #16]	; (472c <tmr_cca_callback+0x18>)
    471c:	691b      	ldr	r3, [r3, #16]
    471e:	2b00      	cmp	r3, #0
    4720:	d000      	beq.n	4724 <tmr_cca_callback+0x10>
    4722:	4798      	blx	r3
    4724:	bd08      	pop	{r3, pc}
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	00003349 	.word	0x00003349
    472c:	20000354 	.word	0x20000354

00004730 <set_common_tc_expiry_callback>:
    4730:	4b01      	ldr	r3, [pc, #4]	; (4738 <set_common_tc_expiry_callback+0x8>)
    4732:	6118      	str	r0, [r3, #16]
    4734:	4770      	bx	lr
    4736:	46c0      	nop			; (mov r8, r8)
    4738:	20000354 	.word	0x20000354

0000473c <frameTxCallback>:
    473c:	b570      	push	{r4, r5, r6, lr}
    473e:	2401      	movs	r4, #1
    4740:	4b07      	ldr	r3, [pc, #28]	; (4760 <frameTxCallback+0x24>)
    4742:	701c      	strb	r4, [r3, #0]
    4744:	4c07      	ldr	r4, [pc, #28]	; (4764 <frameTxCallback+0x28>)
    4746:	6823      	ldr	r3, [r4, #0]
    4748:	691b      	ldr	r3, [r3, #16]
    474a:	2b00      	cmp	r3, #0
    474c:	d004      	beq.n	4758 <frameTxCallback+0x1c>
    474e:	4798      	blx	r3
    4750:	4d05      	ldr	r5, [pc, #20]	; (4768 <frameTxCallback+0x2c>)
    4752:	6820      	ldr	r0, [r4, #0]
    4754:	47a8      	blx	r5
    4756:	bd70      	pop	{r4, r5, r6, pc}
    4758:	0010      	movs	r0, r2
    475a:	4d03      	ldr	r5, [pc, #12]	; (4768 <frameTxCallback+0x2c>)
    475c:	47a8      	blx	r5
    475e:	e7f8      	b.n	4752 <frameTxCallback+0x16>
    4760:	2000004a 	.word	0x2000004a
    4764:	20001384 	.word	0x20001384
    4768:	00003029 	.word	0x00003029

0000476c <dataTimerHandler>:
    476c:	b5f0      	push	{r4, r5, r6, r7, lr}
    476e:	4646      	mov	r6, r8
    4770:	46d6      	mov	lr, sl
    4772:	464f      	mov	r7, r9
    4774:	b5c0      	push	{r6, r7, lr}
    4776:	4e23      	ldr	r6, [pc, #140]	; (4804 <dataTimerHandler+0x98>)
    4778:	7a33      	ldrb	r3, [r6, #8]
    477a:	2b00      	cmp	r3, #0
    477c:	d033      	beq.n	47e6 <dataTimerHandler+0x7a>
    477e:	4b22      	ldr	r3, [pc, #136]	; (4808 <dataTimerHandler+0x9c>)
    4780:	2500      	movs	r5, #0
    4782:	4698      	mov	r8, r3
    4784:	4b21      	ldr	r3, [pc, #132]	; (480c <dataTimerHandler+0xa0>)
    4786:	4f22      	ldr	r7, [pc, #136]	; (4810 <dataTimerHandler+0xa4>)
    4788:	469a      	mov	sl, r3
    478a:	46c1      	mov	r9, r8
    478c:	e016      	b.n	47bc <dataTimerHandler+0x50>
    478e:	7c43      	ldrb	r3, [r0, #17]
    4790:	2b00      	cmp	r3, #0
    4792:	d02d      	beq.n	47f0 <dataTimerHandler+0x84>
    4794:	3b01      	subs	r3, #1
    4796:	b2db      	uxtb	r3, r3
    4798:	7443      	strb	r3, [r0, #17]
    479a:	2b00      	cmp	r3, #0
    479c:	d128      	bne.n	47f0 <dataTimerHandler+0x84>
    479e:	6883      	ldr	r3, [r0, #8]
    47a0:	2b00      	cmp	r3, #0
    47a2:	d003      	beq.n	47ac <dataTimerHandler+0x40>
    47a4:	7c80      	ldrb	r0, [r0, #18]
    47a6:	0022      	movs	r2, r4
    47a8:	2103      	movs	r1, #3
    47aa:	4798      	blx	r3
    47ac:	0020      	movs	r0, r4
    47ae:	4b19      	ldr	r3, [pc, #100]	; (4814 <dataTimerHandler+0xa8>)
    47b0:	4798      	blx	r3
    47b2:	3501      	adds	r5, #1
    47b4:	7a33      	ldrb	r3, [r6, #8]
    47b6:	b2ed      	uxtb	r5, r5
    47b8:	42ab      	cmp	r3, r5
    47ba:	d914      	bls.n	47e6 <dataTimerHandler+0x7a>
    47bc:	2100      	movs	r1, #0
    47be:	0030      	movs	r0, r6
    47c0:	47b8      	blx	r7
    47c2:	1e04      	subs	r4, r0, #0
    47c4:	d00f      	beq.n	47e6 <dataTimerHandler+0x7a>
    47c6:	7c03      	ldrb	r3, [r0, #16]
    47c8:	2b00      	cmp	r3, #0
    47ca:	d004      	beq.n	47d6 <dataTimerHandler+0x6a>
    47cc:	3b01      	subs	r3, #1
    47ce:	b2db      	uxtb	r3, r3
    47d0:	7403      	strb	r3, [r0, #16]
    47d2:	2b00      	cmp	r3, #0
    47d4:	d0db      	beq.n	478e <dataTimerHandler+0x22>
    47d6:	0021      	movs	r1, r4
    47d8:	0030      	movs	r0, r6
    47da:	47c0      	blx	r8
    47dc:	3501      	adds	r5, #1
    47de:	7a33      	ldrb	r3, [r6, #8]
    47e0:	b2ed      	uxtb	r5, r5
    47e2:	42ab      	cmp	r3, r5
    47e4:	d8ea      	bhi.n	47bc <dataTimerHandler+0x50>
    47e6:	bc1c      	pop	{r2, r3, r4}
    47e8:	4690      	mov	r8, r2
    47ea:	4699      	mov	r9, r3
    47ec:	46a2      	mov	sl, r4
    47ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47f0:	4653      	mov	r3, sl
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	0021      	movs	r1, r4
    47f6:	7adb      	ldrb	r3, [r3, #11]
    47f8:	0030      	movs	r0, r6
    47fa:	3301      	adds	r3, #1
    47fc:	7423      	strb	r3, [r4, #16]
    47fe:	47c8      	blx	r9
    4800:	e7d7      	b.n	47b2 <dataTimerHandler+0x46>
    4802:	46c0      	nop			; (mov r8, r8)
    4804:	20001374 	.word	0x20001374
    4808:	00003109 	.word	0x00003109
    480c:	2000136c 	.word	0x2000136c
    4810:	00003141 	.word	0x00003141
    4814:	00003029 	.word	0x00003029

00004818 <ackReqDataConfcb>:
    4818:	b5f0      	push	{r4, r5, r6, r7, lr}
    481a:	46de      	mov	lr, fp
    481c:	4657      	mov	r7, sl
    481e:	4645      	mov	r5, r8
    4820:	464e      	mov	r6, r9
    4822:	b5e0      	push	{r5, r6, r7, lr}
    4824:	7893      	ldrb	r3, [r2, #2]
    4826:	b083      	sub	sp, #12
    4828:	4682      	mov	sl, r0
    482a:	4698      	mov	r8, r3
    482c:	0010      	movs	r0, r2
    482e:	4b32      	ldr	r3, [pc, #200]	; (48f8 <ackReqDataConfcb+0xe0>)
    4830:	4693      	mov	fp, r2
    4832:	9101      	str	r1, [sp, #4]
    4834:	4798      	blx	r3
    4836:	22ff      	movs	r2, #255	; 0xff
    4838:	4b30      	ldr	r3, [pc, #192]	; (48fc <ackReqDataConfcb+0xe4>)
    483a:	881b      	ldrh	r3, [r3, #0]
    483c:	421a      	tst	r2, r3
    483e:	d156      	bne.n	48ee <ackReqDataConfcb+0xd6>
    4840:	4e2f      	ldr	r6, [pc, #188]	; (4900 <ackReqDataConfcb+0xe8>)
    4842:	7a33      	ldrb	r3, [r6, #8]
    4844:	2b00      	cmp	r3, #0
    4846:	d031      	beq.n	48ac <ackReqDataConfcb+0x94>
    4848:	4b2e      	ldr	r3, [pc, #184]	; (4904 <ackReqDataConfcb+0xec>)
    484a:	2400      	movs	r4, #0
    484c:	4f2e      	ldr	r7, [pc, #184]	; (4908 <ackReqDataConfcb+0xf0>)
    484e:	4699      	mov	r9, r3
    4850:	e007      	b.n	4862 <ackReqDataConfcb+0x4a>
    4852:	0029      	movs	r1, r5
    4854:	0030      	movs	r0, r6
    4856:	47c8      	blx	r9
    4858:	3401      	adds	r4, #1
    485a:	7a33      	ldrb	r3, [r6, #8]
    485c:	b2e4      	uxtb	r4, r4
    485e:	42a3      	cmp	r3, r4
    4860:	d924      	bls.n	48ac <ackReqDataConfcb+0x94>
    4862:	2100      	movs	r1, #0
    4864:	0030      	movs	r0, r6
    4866:	47b8      	blx	r7
    4868:	1e05      	subs	r5, r0, #0
    486a:	d01f      	beq.n	48ac <ackReqDataConfcb+0x94>
    486c:	2320      	movs	r3, #32
    486e:	5cc3      	ldrb	r3, [r0, r3]
    4870:	4543      	cmp	r3, r8
    4872:	d1ee      	bne.n	4852 <ackReqDataConfcb+0x3a>
    4874:	7c80      	ldrb	r0, [r0, #18]
    4876:	4550      	cmp	r0, sl
    4878:	d1eb      	bne.n	4852 <ackReqDataConfcb+0x3a>
    487a:	9b01      	ldr	r3, [sp, #4]
    487c:	2b00      	cmp	r3, #0
    487e:	d02a      	beq.n	48d6 <ackReqDataConfcb+0xbe>
    4880:	7c6b      	ldrb	r3, [r5, #17]
    4882:	2b00      	cmp	r3, #0
    4884:	d019      	beq.n	48ba <ackReqDataConfcb+0xa2>
    4886:	3b01      	subs	r3, #1
    4888:	b2db      	uxtb	r3, r3
    488a:	746b      	strb	r3, [r5, #17]
    488c:	2b00      	cmp	r3, #0
    488e:	d114      	bne.n	48ba <ackReqDataConfcb+0xa2>
    4890:	68ab      	ldr	r3, [r5, #8]
    4892:	2b00      	cmp	r3, #0
    4894:	d002      	beq.n	489c <ackReqDataConfcb+0x84>
    4896:	465a      	mov	r2, fp
    4898:	9901      	ldr	r1, [sp, #4]
    489a:	4798      	blx	r3
    489c:	4b16      	ldr	r3, [pc, #88]	; (48f8 <ackReqDataConfcb+0xe0>)
    489e:	0028      	movs	r0, r5
    48a0:	4798      	blx	r3
    48a2:	3401      	adds	r4, #1
    48a4:	7a33      	ldrb	r3, [r6, #8]
    48a6:	b2e4      	uxtb	r4, r4
    48a8:	42a3      	cmp	r3, r4
    48aa:	d8da      	bhi.n	4862 <ackReqDataConfcb+0x4a>
    48ac:	b003      	add	sp, #12
    48ae:	bc3c      	pop	{r2, r3, r4, r5}
    48b0:	4690      	mov	r8, r2
    48b2:	4699      	mov	r9, r3
    48b4:	46a2      	mov	sl, r4
    48b6:	46ab      	mov	fp, r5
    48b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48ba:	4b14      	ldr	r3, [pc, #80]	; (490c <ackReqDataConfcb+0xf4>)
    48bc:	781b      	ldrb	r3, [r3, #0]
    48be:	2b08      	cmp	r3, #8
    48c0:	d0e6      	beq.n	4890 <ackReqDataConfcb+0x78>
    48c2:	0029      	movs	r1, r5
    48c4:	0030      	movs	r0, r6
    48c6:	4b0f      	ldr	r3, [pc, #60]	; (4904 <ackReqDataConfcb+0xec>)
    48c8:	4798      	blx	r3
    48ca:	89a9      	ldrh	r1, [r5, #12]
    48cc:	4a10      	ldr	r2, [pc, #64]	; (4910 <ackReqDataConfcb+0xf8>)
    48ce:	0028      	movs	r0, r5
    48d0:	4b10      	ldr	r3, [pc, #64]	; (4914 <ackReqDataConfcb+0xfc>)
    48d2:	4798      	blx	r3
    48d4:	e7c0      	b.n	4858 <ackReqDataConfcb+0x40>
    48d6:	4b10      	ldr	r3, [pc, #64]	; (4918 <ackReqDataConfcb+0x100>)
    48d8:	0029      	movs	r1, r5
    48da:	681a      	ldr	r2, [r3, #0]
    48dc:	0030      	movs	r0, r6
    48de:	7ad3      	ldrb	r3, [r2, #11]
    48e0:	3301      	adds	r3, #1
    48e2:	742b      	strb	r3, [r5, #16]
    48e4:	7b13      	ldrb	r3, [r2, #12]
    48e6:	746b      	strb	r3, [r5, #17]
    48e8:	4b06      	ldr	r3, [pc, #24]	; (4904 <ackReqDataConfcb+0xec>)
    48ea:	4798      	blx	r3
    48ec:	e7b4      	b.n	4858 <ackReqDataConfcb+0x40>
    48ee:	9801      	ldr	r0, [sp, #4]
    48f0:	4b0a      	ldr	r3, [pc, #40]	; (491c <ackReqDataConfcb+0x104>)
    48f2:	4798      	blx	r3
    48f4:	e7a4      	b.n	4840 <ackReqDataConfcb+0x28>
    48f6:	46c0      	nop			; (mov r8, r8)
    48f8:	00003029 	.word	0x00003029
    48fc:	200013b4 	.word	0x200013b4
    4900:	20001374 	.word	0x20001374
    4904:	00003109 	.word	0x00003109
    4908:	00003141 	.word	0x00003141
    490c:	20000368 	.word	0x20000368
    4910:	00004819 	.word	0x00004819
    4914:	000063b5 	.word	0x000063b5
    4918:	2000136c 	.word	0x2000136c
    491c:	00006fa1 	.word	0x00006fa1

00004920 <nonAckDataCallback>:
    4920:	b5f0      	push	{r4, r5, r6, r7, lr}
    4922:	46c6      	mov	lr, r8
    4924:	4e15      	ldr	r6, [pc, #84]	; (497c <nonAckDataCallback+0x5c>)
    4926:	b500      	push	{lr}
    4928:	4680      	mov	r8, r0
    492a:	0010      	movs	r0, r2
    492c:	0015      	movs	r5, r2
    492e:	000f      	movs	r7, r1
    4930:	47b0      	blx	r6
    4932:	4b13      	ldr	r3, [pc, #76]	; (4980 <nonAckDataCallback+0x60>)
    4934:	2100      	movs	r1, #0
    4936:	4813      	ldr	r0, [pc, #76]	; (4984 <nonAckDataCallback+0x64>)
    4938:	4798      	blx	r3
    493a:	22ff      	movs	r2, #255	; 0xff
    493c:	4b12      	ldr	r3, [pc, #72]	; (4988 <nonAckDataCallback+0x68>)
    493e:	0004      	movs	r4, r0
    4940:	881b      	ldrh	r3, [r3, #0]
    4942:	421a      	tst	r2, r3
    4944:	d110      	bne.n	4968 <nonAckDataCallback+0x48>
    4946:	2c00      	cmp	r4, #0
    4948:	d013      	beq.n	4972 <nonAckDataCallback+0x52>
    494a:	68a3      	ldr	r3, [r4, #8]
    494c:	2b00      	cmp	r3, #0
    494e:	d003      	beq.n	4958 <nonAckDataCallback+0x38>
    4950:	002a      	movs	r2, r5
    4952:	0039      	movs	r1, r7
    4954:	4640      	mov	r0, r8
    4956:	4798      	blx	r3
    4958:	7d23      	ldrb	r3, [r4, #20]
    495a:	2b00      	cmp	r3, #0
    495c:	d101      	bne.n	4962 <nonAckDataCallback+0x42>
    495e:	0020      	movs	r0, r4
    4960:	47b0      	blx	r6
    4962:	bc04      	pop	{r2}
    4964:	4690      	mov	r8, r2
    4966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4968:	0038      	movs	r0, r7
    496a:	4b08      	ldr	r3, [pc, #32]	; (498c <nonAckDataCallback+0x6c>)
    496c:	4798      	blx	r3
    496e:	2c00      	cmp	r4, #0
    4970:	d1eb      	bne.n	494a <nonAckDataCallback+0x2a>
    4972:	4b07      	ldr	r3, [pc, #28]	; (4990 <nonAckDataCallback+0x70>)
    4974:	781b      	ldrb	r3, [r3, #0]
    4976:	2b08      	cmp	r3, #8
    4978:	d1f3      	bne.n	4962 <nonAckDataCallback+0x42>
    497a:	e7e6      	b.n	494a <nonAckDataCallback+0x2a>
    497c:	00003029 	.word	0x00003029
    4980:	00003141 	.word	0x00003141
    4984:	20001360 	.word	0x20001360
    4988:	200013b4 	.word	0x200013b4
    498c:	00006fa1 	.word	0x00006fa1
    4990:	20000368 	.word	0x20000368

00004994 <MiApp_ProtocolInit>:
    4994:	b570      	push	{r4, r5, r6, lr}
    4996:	4b20      	ldr	r3, [pc, #128]	; (4a18 <MiApp_ProtocolInit+0x84>)
    4998:	b084      	sub	sp, #16
    499a:	6018      	str	r0, [r3, #0]
    499c:	4b1f      	ldr	r3, [pc, #124]	; (4a1c <MiApp_ProtocolInit+0x88>)
    499e:	2501      	movs	r5, #1
    49a0:	6019      	str	r1, [r3, #0]
    49a2:	4b1f      	ldr	r3, [pc, #124]	; (4a20 <MiApp_ProtocolInit+0x8c>)
    49a4:	4798      	blx	r3
    49a6:	2102      	movs	r1, #2
    49a8:	4c1e      	ldr	r4, [pc, #120]	; (4a24 <MiApp_ProtocolInit+0x90>)
    49aa:	4b1f      	ldr	r3, [pc, #124]	; (4a28 <MiApp_ProtocolInit+0x94>)
    49ac:	aa02      	add	r2, sp, #8
    49ae:	8023      	strh	r3, [r4, #0]
    49b0:	7813      	ldrb	r3, [r2, #0]
    49b2:	2601      	movs	r6, #1
    49b4:	430b      	orrs	r3, r1
    49b6:	2187      	movs	r1, #135	; 0x87
    49b8:	400b      	ands	r3, r1
    49ba:	2140      	movs	r1, #64	; 0x40
    49bc:	430b      	orrs	r3, r1
    49be:	21c3      	movs	r1, #195	; 0xc3
    49c0:	400b      	ands	r3, r1
    49c2:	43ab      	bics	r3, r5
    49c4:	7013      	strb	r3, [r2, #0]
    49c6:	4919      	ldr	r1, [pc, #100]	; (4a2c <MiApp_ProtocolInit+0x98>)
    49c8:	9802      	ldr	r0, [sp, #8]
    49ca:	4b19      	ldr	r3, [pc, #100]	; (4a30 <MiApp_ProtocolInit+0x9c>)
    49cc:	4798      	blx	r3
    49ce:	4b19      	ldr	r3, [pc, #100]	; (4a34 <MiApp_ProtocolInit+0xa0>)
    49d0:	4798      	blx	r3
    49d2:	466b      	mov	r3, sp
    49d4:	4276      	negs	r6, r6
    49d6:	1d98      	adds	r0, r3, #6
    49d8:	0021      	movs	r1, r4
    49da:	4b17      	ldr	r3, [pc, #92]	; (4a38 <MiApp_ProtocolInit+0xa4>)
    49dc:	8006      	strh	r6, [r0, #0]
    49de:	4798      	blx	r3
    49e0:	4916      	ldr	r1, [pc, #88]	; (4a3c <MiApp_ProtocolInit+0xa8>)
    49e2:	4b17      	ldr	r3, [pc, #92]	; (4a40 <MiApp_ProtocolInit+0xac>)
    49e4:	2000      	movs	r0, #0
    49e6:	4798      	blx	r3
    49e8:	4b16      	ldr	r3, [pc, #88]	; (4a44 <MiApp_ProtocolInit+0xb0>)
    49ea:	4c17      	ldr	r4, [pc, #92]	; (4a48 <MiApp_ProtocolInit+0xb4>)
    49ec:	701d      	strb	r5, [r3, #0]
    49ee:	4b17      	ldr	r3, [pc, #92]	; (4a4c <MiApp_ProtocolInit+0xb8>)
    49f0:	4817      	ldr	r0, [pc, #92]	; (4a50 <MiApp_ProtocolInit+0xbc>)
    49f2:	801e      	strh	r6, [r3, #0]
    49f4:	47a0      	blx	r4
    49f6:	4817      	ldr	r0, [pc, #92]	; (4a54 <MiApp_ProtocolInit+0xc0>)
    49f8:	47a0      	blx	r4
    49fa:	4817      	ldr	r0, [pc, #92]	; (4a58 <MiApp_ProtocolInit+0xc4>)
    49fc:	47a0      	blx	r4
    49fe:	23fa      	movs	r3, #250	; 0xfa
    4a00:	4816      	ldr	r0, [pc, #88]	; (4a5c <MiApp_ProtocolInit+0xc8>)
    4a02:	009b      	lsls	r3, r3, #2
    4a04:	6083      	str	r3, [r0, #8]
    4a06:	4b16      	ldr	r3, [pc, #88]	; (4a60 <MiApp_ProtocolInit+0xcc>)
    4a08:	7305      	strb	r5, [r0, #12]
    4a0a:	6103      	str	r3, [r0, #16]
    4a0c:	4b15      	ldr	r3, [pc, #84]	; (4a64 <MiApp_ProtocolInit+0xd0>)
    4a0e:	4798      	blx	r3
    4a10:	2001      	movs	r0, #1
    4a12:	b004      	add	sp, #16
    4a14:	bd70      	pop	{r4, r5, r6, pc}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	2000136c 	.word	0x2000136c
    4a1c:	20001370 	.word	0x20001370
    4a20:	000031c9 	.word	0x000031c9
    4a24:	200013a0 	.word	0x200013a0
    4a28:	00001234 	.word	0x00001234
    4a2c:	2000004c 	.word	0x2000004c
    4a30:	000021ad 	.word	0x000021ad
    4a34:	00002bc1 	.word	0x00002bc1
    4a38:	0000214d 	.word	0x0000214d
    4a3c:	20001380 	.word	0x20001380
    4a40:	00002185 	.word	0x00002185
    4a44:	20000368 	.word	0x20000368
    4a48:	000030fd 	.word	0x000030fd
    4a4c:	200013b4 	.word	0x200013b4
    4a50:	20001374 	.word	0x20001374
    4a54:	20001360 	.word	0x20001360
    4a58:	200013a8 	.word	0x200013a8
    4a5c:	2000036c 	.word	0x2000036c
    4a60:	0000476d 	.word	0x0000476d
    4a64:	00003271 	.word	0x00003271

00004a68 <MiApp_Set>:
    4a68:	b530      	push	{r4, r5, lr}
    4a6a:	000c      	movs	r4, r1
    4a6c:	b083      	sub	sp, #12
    4a6e:	2802      	cmp	r0, #2
    4a70:	d015      	beq.n	4a9e <MiApp_Set+0x36>
    4a72:	2880      	cmp	r0, #128	; 0x80
    4a74:	d00c      	beq.n	4a90 <MiApp_Set+0x28>
    4a76:	2800      	cmp	r0, #0
    4a78:	d002      	beq.n	4a80 <MiApp_Set+0x18>
    4a7a:	2000      	movs	r0, #0
    4a7c:	b003      	add	sp, #12
    4a7e:	bd30      	pop	{r4, r5, pc}
    4a80:	4b0e      	ldr	r3, [pc, #56]	; (4abc <MiApp_Set+0x54>)
    4a82:	4798      	blx	r3
    4a84:	2800      	cmp	r0, #0
    4a86:	d0f9      	beq.n	4a7c <MiApp_Set+0x14>
    4a88:	7822      	ldrb	r2, [r4, #0]
    4a8a:	4b0d      	ldr	r3, [pc, #52]	; (4ac0 <MiApp_Set+0x58>)
    4a8c:	701a      	strb	r2, [r3, #0]
    4a8e:	e7f5      	b.n	4a7c <MiApp_Set+0x14>
    4a90:	780b      	ldrb	r3, [r1, #0]
    4a92:	2001      	movs	r0, #1
    4a94:	1e5a      	subs	r2, r3, #1
    4a96:	4193      	sbcs	r3, r2
    4a98:	4a0a      	ldr	r2, [pc, #40]	; (4ac4 <MiApp_Set+0x5c>)
    4a9a:	7013      	strb	r3, [r2, #0]
    4a9c:	e7ee      	b.n	4a7c <MiApp_Set+0x14>
    4a9e:	780b      	ldrb	r3, [r1, #0]
    4aa0:	ad01      	add	r5, sp, #4
    4aa2:	702b      	strb	r3, [r5, #0]
    4aa4:	784b      	ldrb	r3, [r1, #1]
    4aa6:	0028      	movs	r0, r5
    4aa8:	706b      	strb	r3, [r5, #1]
    4aaa:	4907      	ldr	r1, [pc, #28]	; (4ac8 <MiApp_Set+0x60>)
    4aac:	4b07      	ldr	r3, [pc, #28]	; (4acc <MiApp_Set+0x64>)
    4aae:	4798      	blx	r3
    4ab0:	2800      	cmp	r0, #0
    4ab2:	d0e3      	beq.n	4a7c <MiApp_Set+0x14>
    4ab4:	882a      	ldrh	r2, [r5, #0]
    4ab6:	4b06      	ldr	r3, [pc, #24]	; (4ad0 <MiApp_Set+0x68>)
    4ab8:	801a      	strh	r2, [r3, #0]
    4aba:	e7df      	b.n	4a7c <MiApp_Set+0x14>
    4abc:	00002185 	.word	0x00002185
    4ac0:	20001380 	.word	0x20001380
    4ac4:	2000004b 	.word	0x2000004b
    4ac8:	200013a0 	.word	0x200013a0
    4acc:	0000214d 	.word	0x0000214d
    4ad0:	200013b4 	.word	0x200013b4

00004ad4 <MeshTasks>:
    4ad4:	b570      	push	{r4, r5, r6, lr}
    4ad6:	4b19      	ldr	r3, [pc, #100]	; (4b3c <MeshTasks+0x68>)
    4ad8:	b084      	sub	sp, #16
    4ada:	4798      	blx	r3
    4adc:	4818      	ldr	r0, [pc, #96]	; (4b40 <MeshTasks+0x6c>)
    4ade:	7a03      	ldrb	r3, [r0, #8]
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d003      	beq.n	4aec <MeshTasks+0x18>
    4ae4:	4c17      	ldr	r4, [pc, #92]	; (4b44 <MeshTasks+0x70>)
    4ae6:	7823      	ldrb	r3, [r4, #0]
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d10c      	bne.n	4b06 <MeshTasks+0x32>
    4aec:	4b16      	ldr	r3, [pc, #88]	; (4b48 <MeshTasks+0x74>)
    4aee:	4798      	blx	r3
    4af0:	2800      	cmp	r0, #0
    4af2:	d004      	beq.n	4afe <MeshTasks+0x2a>
    4af4:	4b15      	ldr	r3, [pc, #84]	; (4b4c <MeshTasks+0x78>)
    4af6:	4816      	ldr	r0, [pc, #88]	; (4b50 <MeshTasks+0x7c>)
    4af8:	4798      	blx	r3
    4afa:	4b16      	ldr	r3, [pc, #88]	; (4b54 <MeshTasks+0x80>)
    4afc:	4798      	blx	r3
    4afe:	4b16      	ldr	r3, [pc, #88]	; (4b58 <MeshTasks+0x84>)
    4b00:	4798      	blx	r3
    4b02:	b004      	add	sp, #16
    4b04:	bd70      	pop	{r4, r5, r6, pc}
    4b06:	4b15      	ldr	r3, [pc, #84]	; (4b5c <MeshTasks+0x88>)
    4b08:	781d      	ldrb	r5, [r3, #0]
    4b0a:	2d00      	cmp	r5, #0
    4b0c:	d1ee      	bne.n	4aec <MeshTasks+0x18>
    4b0e:	2100      	movs	r1, #0
    4b10:	4b13      	ldr	r3, [pc, #76]	; (4b60 <MeshTasks+0x8c>)
    4b12:	4798      	blx	r3
    4b14:	1e02      	subs	r2, r0, #0
    4b16:	d0e9      	beq.n	4aec <MeshTasks+0x18>
    4b18:	4b12      	ldr	r3, [pc, #72]	; (4b64 <MeshTasks+0x90>)
    4b1a:	4913      	ldr	r1, [pc, #76]	; (4b68 <MeshTasks+0x94>)
    4b1c:	6018      	str	r0, [r3, #0]
    4b1e:	6943      	ldr	r3, [r0, #20]
    4b20:	9102      	str	r1, [sp, #8]
    4b22:	2125      	movs	r1, #37	; 0x25
    4b24:	5c41      	ldrb	r1, [r0, r1]
    4b26:	4e11      	ldr	r6, [pc, #68]	; (4b6c <MeshTasks+0x98>)
    4b28:	9101      	str	r1, [sp, #4]
    4b2a:	2124      	movs	r1, #36	; 0x24
    4b2c:	5c41      	ldrb	r1, [r0, r1]
    4b2e:	9100      	str	r1, [sp, #0]
    4b30:	69d1      	ldr	r1, [r2, #28]
    4b32:	6980      	ldr	r0, [r0, #24]
    4b34:	6a12      	ldr	r2, [r2, #32]
    4b36:	47b0      	blx	r6
    4b38:	7025      	strb	r5, [r4, #0]
    4b3a:	e7d7      	b.n	4aec <MeshTasks+0x18>
    4b3c:	00002859 	.word	0x00002859
    4b40:	200013a8 	.word	0x200013a8
    4b44:	2000004a 	.word	0x2000004a
    4b48:	00002495 	.word	0x00002495
    4b4c:	00005fa9 	.word	0x00005fa9
    4b50:	2000138c 	.word	0x2000138c
    4b54:	00002479 	.word	0x00002479
    4b58:	00003291 	.word	0x00003291
    4b5c:	20000384 	.word	0x20000384
    4b60:	00003141 	.word	0x00003141
    4b64:	20001384 	.word	0x20001384
    4b68:	0000473d 	.word	0x0000473d
    4b6c:	00002219 	.word	0x00002219

00004b70 <MiApp_SendData>:
    4b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b72:	4657      	mov	r7, sl
    4b74:	464e      	mov	r6, r9
    4b76:	4645      	mov	r5, r8
    4b78:	46de      	mov	lr, fp
    4b7a:	b5e0      	push	{r5, r6, r7, lr}
    4b7c:	b083      	sub	sp, #12
    4b7e:	001e      	movs	r6, r3
    4b80:	ab0c      	add	r3, sp, #48	; 0x30
    4b82:	781f      	ldrb	r7, [r3, #0]
    4b84:	ab0d      	add	r3, sp, #52	; 0x34
    4b86:	781c      	ldrb	r4, [r3, #0]
    4b88:	4b3d      	ldr	r3, [pc, #244]	; (4c80 <MiApp_SendData+0x110>)
    4b8a:	0015      	movs	r5, r2
    4b8c:	781b      	ldrb	r3, [r3, #0]
    4b8e:	3b06      	subs	r3, #6
    4b90:	2b01      	cmp	r3, #1
    4b92:	d907      	bls.n	4ba4 <MiApp_SendData+0x34>
    4b94:	2000      	movs	r0, #0
    4b96:	b003      	add	sp, #12
    4b98:	bc3c      	pop	{r2, r3, r4, r5}
    4b9a:	4690      	mov	r8, r2
    4b9c:	4699      	mov	r9, r3
    4b9e:	46a2      	mov	sl, r4
    4ba0:	46ab      	mov	fp, r5
    4ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ba4:	2802      	cmp	r0, #2
    4ba6:	d1f5      	bne.n	4b94 <MiApp_SendData+0x24>
    4ba8:	784b      	ldrb	r3, [r1, #1]
    4baa:	780a      	ldrb	r2, [r1, #0]
    4bac:	021b      	lsls	r3, r3, #8
    4bae:	431a      	orrs	r2, r3
    4bb0:	308e      	adds	r0, #142	; 0x8e
    4bb2:	4b34      	ldr	r3, [pc, #208]	; (4c84 <MiApp_SendData+0x114>)
    4bb4:	4691      	mov	r9, r2
    4bb6:	4798      	blx	r3
    4bb8:	4680      	mov	r8, r0
    4bba:	2800      	cmp	r0, #0
    4bbc:	d0ea      	beq.n	4b94 <MiApp_SendData+0x24>
    4bbe:	2203      	movs	r2, #3
    4bc0:	7e43      	ldrb	r3, [r0, #25]
    4bc2:	2110      	movs	r1, #16
    4bc4:	4393      	bics	r3, r2
    4bc6:	7643      	strb	r3, [r0, #25]
    4bc8:	466a      	mov	r2, sp
    4bca:	464b      	mov	r3, r9
    4bcc:	80d3      	strh	r3, [r2, #6]
    4bce:	88d3      	ldrh	r3, [r2, #6]
    4bd0:	468b      	mov	fp, r1
    4bd2:	4699      	mov	r9, r3
    4bd4:	4b2c      	ldr	r3, [pc, #176]	; (4c88 <MiApp_SendData+0x118>)
    4bd6:	464a      	mov	r2, r9
    4bd8:	469a      	mov	sl, r3
    4bda:	881b      	ldrh	r3, [r3, #0]
    4bdc:	8382      	strh	r2, [r0, #28]
    4bde:	83c3      	strh	r3, [r0, #30]
    4be0:	2301      	movs	r3, #1
    4be2:	4023      	ands	r3, r4
    4be4:	011a      	lsls	r2, r3, #4
    4be6:	7e43      	ldrb	r3, [r0, #25]
    4be8:	438b      	bics	r3, r1
    4bea:	4313      	orrs	r3, r2
    4bec:	7643      	strb	r3, [r0, #25]
    4bee:	2338      	movs	r3, #56	; 0x38
    4bf0:	54c5      	strb	r5, [r0, r3]
    4bf2:	2300      	movs	r3, #0
    4bf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4bf6:	74c3      	strb	r3, [r0, #19]
    4bf8:	7503      	strb	r3, [r0, #20]
    4bfa:	6082      	str	r2, [r0, #8]
    4bfc:	7487      	strb	r7, [r0, #18]
    4bfe:	4b23      	ldr	r3, [pc, #140]	; (4c8c <MiApp_SendData+0x11c>)
    4c00:	002a      	movs	r2, r5
    4c02:	0031      	movs	r1, r6
    4c04:	3039      	adds	r0, #57	; 0x39
    4c06:	4798      	blx	r3
    4c08:	4b21      	ldr	r3, [pc, #132]	; (4c90 <MiApp_SendData+0x120>)
    4c0a:	4599      	cmp	r9, r3
    4c0c:	d814      	bhi.n	4c38 <MiApp_SendData+0xc8>
    4c0e:	4653      	mov	r3, sl
    4c10:	22ff      	movs	r2, #255	; 0xff
    4c12:	881b      	ldrh	r3, [r3, #0]
    4c14:	4393      	bics	r3, r2
    4c16:	4642      	mov	r2, r8
    4c18:	8193      	strh	r3, [r2, #12]
    4c1a:	2c00      	cmp	r4, #0
    4c1c:	d11d      	bne.n	4c5a <MiApp_SendData+0xea>
    4c1e:	7454      	strb	r4, [r2, #17]
    4c20:	4641      	mov	r1, r8
    4c22:	481c      	ldr	r0, [pc, #112]	; (4c94 <MiApp_SendData+0x124>)
    4c24:	4b1c      	ldr	r3, [pc, #112]	; (4c98 <MiApp_SendData+0x128>)
    4c26:	4798      	blx	r3
    4c28:	4643      	mov	r3, r8
    4c2a:	4a1c      	ldr	r2, [pc, #112]	; (4c9c <MiApp_SendData+0x12c>)
    4c2c:	8999      	ldrh	r1, [r3, #12]
    4c2e:	4640      	mov	r0, r8
    4c30:	4b1b      	ldr	r3, [pc, #108]	; (4ca0 <MiApp_SendData+0x130>)
    4c32:	4798      	blx	r3
    4c34:	2001      	movs	r0, #1
    4c36:	e7ae      	b.n	4b96 <MiApp_SendData+0x26>
    4c38:	4643      	mov	r3, r8
    4c3a:	465a      	mov	r2, fp
    4c3c:	7e5b      	ldrb	r3, [r3, #25]
    4c3e:	4641      	mov	r1, r8
    4c40:	4393      	bics	r3, r2
    4c42:	4642      	mov	r2, r8
    4c44:	4813      	ldr	r0, [pc, #76]	; (4c94 <MiApp_SendData+0x124>)
    4c46:	7653      	strb	r3, [r2, #25]
    4c48:	4b13      	ldr	r3, [pc, #76]	; (4c98 <MiApp_SendData+0x128>)
    4c4a:	4798      	blx	r3
    4c4c:	4a13      	ldr	r2, [pc, #76]	; (4c9c <MiApp_SendData+0x12c>)
    4c4e:	4915      	ldr	r1, [pc, #84]	; (4ca4 <MiApp_SendData+0x134>)
    4c50:	4640      	mov	r0, r8
    4c52:	4b13      	ldr	r3, [pc, #76]	; (4ca0 <MiApp_SendData+0x130>)
    4c54:	4798      	blx	r3
    4c56:	2001      	movs	r0, #1
    4c58:	e79d      	b.n	4b96 <MiApp_SendData+0x26>
    4c5a:	4641      	mov	r1, r8
    4c5c:	4b12      	ldr	r3, [pc, #72]	; (4ca8 <MiApp_SendData+0x138>)
    4c5e:	4813      	ldr	r0, [pc, #76]	; (4cac <MiApp_SendData+0x13c>)
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	7ad3      	ldrb	r3, [r2, #11]
    4c64:	3301      	adds	r3, #1
    4c66:	740b      	strb	r3, [r1, #16]
    4c68:	7b13      	ldrb	r3, [r2, #12]
    4c6a:	744b      	strb	r3, [r1, #17]
    4c6c:	4b0a      	ldr	r3, [pc, #40]	; (4c98 <MiApp_SendData+0x128>)
    4c6e:	4798      	blx	r3
    4c70:	4643      	mov	r3, r8
    4c72:	4a0f      	ldr	r2, [pc, #60]	; (4cb0 <MiApp_SendData+0x140>)
    4c74:	8999      	ldrh	r1, [r3, #12]
    4c76:	4640      	mov	r0, r8
    4c78:	4b09      	ldr	r3, [pc, #36]	; (4ca0 <MiApp_SendData+0x130>)
    4c7a:	4798      	blx	r3
    4c7c:	0020      	movs	r0, r4
    4c7e:	e78a      	b.n	4b96 <MiApp_SendData+0x26>
    4c80:	20000368 	.word	0x20000368
    4c84:	00002fe1 	.word	0x00002fe1
    4c88:	200013b4 	.word	0x200013b4
    4c8c:	0000758b 	.word	0x0000758b
    4c90:	0000fffc 	.word	0x0000fffc
    4c94:	20001360 	.word	0x20001360
    4c98:	00003109 	.word	0x00003109
    4c9c:	00004921 	.word	0x00004921
    4ca0:	000063b5 	.word	0x000063b5
    4ca4:	0000ffff 	.word	0x0000ffff
    4ca8:	2000136c 	.word	0x2000136c
    4cac:	20001374 	.word	0x20001374
    4cb0:	00004819 	.word	0x00004819

00004cb4 <MiApp_Get>:
    4cb4:	2801      	cmp	r0, #1
    4cb6:	d016      	beq.n	4ce6 <MiApp_Get+0x32>
    4cb8:	2800      	cmp	r0, #0
    4cba:	d00f      	beq.n	4cdc <MiApp_Get+0x28>
    4cbc:	2802      	cmp	r0, #2
    4cbe:	d009      	beq.n	4cd4 <MiApp_Get+0x20>
    4cc0:	2803      	cmp	r0, #3
    4cc2:	d109      	bne.n	4cd8 <MiApp_Get+0x24>
    4cc4:	4b09      	ldr	r3, [pc, #36]	; (4cec <MiApp_Get+0x38>)
    4cc6:	2001      	movs	r0, #1
    4cc8:	881a      	ldrh	r2, [r3, #0]
    4cca:	700a      	strb	r2, [r1, #0]
    4ccc:	881b      	ldrh	r3, [r3, #0]
    4cce:	0a1b      	lsrs	r3, r3, #8
    4cd0:	704b      	strb	r3, [r1, #1]
    4cd2:	4770      	bx	lr
    4cd4:	4b06      	ldr	r3, [pc, #24]	; (4cf0 <MiApp_Get+0x3c>)
    4cd6:	e7f6      	b.n	4cc6 <MiApp_Get+0x12>
    4cd8:	2000      	movs	r0, #0
    4cda:	e7fa      	b.n	4cd2 <MiApp_Get+0x1e>
    4cdc:	4b05      	ldr	r3, [pc, #20]	; (4cf4 <MiApp_Get+0x40>)
    4cde:	2001      	movs	r0, #1
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	700b      	strb	r3, [r1, #0]
    4ce4:	e7f5      	b.n	4cd2 <MiApp_Get+0x1e>
    4ce6:	4b04      	ldr	r3, [pc, #16]	; (4cf8 <MiApp_Get+0x44>)
    4ce8:	e7ed      	b.n	4cc6 <MiApp_Get+0x12>
    4cea:	46c0      	nop			; (mov r8, r8)
    4cec:	20000054 	.word	0x20000054
    4cf0:	200013b4 	.word	0x200013b4
    4cf4:	20001380 	.word	0x20001380
    4cf8:	200013a0 	.word	0x200013a0

00004cfc <MiApp_MeshGetNextHopAddr>:
    4cfc:	4b02      	ldr	r3, [pc, #8]	; (4d08 <MiApp_MeshGetNextHopAddr+0xc>)
    4cfe:	8818      	ldrh	r0, [r3, #0]
    4d00:	23ff      	movs	r3, #255	; 0xff
    4d02:	4398      	bics	r0, r3
    4d04:	4770      	bx	lr
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	200013b4 	.word	0x200013b4

00004d0c <bloomFilterAddressCheck>:
    4d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d0e:	464e      	mov	r6, r9
    4d10:	46de      	mov	lr, fp
    4d12:	4657      	mov	r7, sl
    4d14:	4645      	mov	r5, r8
    4d16:	b5e0      	push	{r5, r6, r7, lr}
    4d18:	4bf5      	ldr	r3, [pc, #980]	; (50f0 <bloomFilterAddressCheck+0x3e4>)
    4d1a:	b087      	sub	sp, #28
    4d1c:	781b      	ldrb	r3, [r3, #0]
    4d1e:	9003      	str	r0, [sp, #12]
    4d20:	000e      	movs	r6, r1
    4d22:	9300      	str	r3, [sp, #0]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d001      	beq.n	4d2c <bloomFilterAddressCheck+0x20>
    4d28:	f000 fe65 	bl	59f6 <bloomFilterAddressCheck+0xcea>
    4d2c:	7811      	ldrb	r1, [r2, #0]
    4d2e:	020b      	lsls	r3, r1, #8
    4d30:	0249      	lsls	r1, r1, #9
    4d32:	b209      	sxth	r1, r1
    4d34:	b218      	sxth	r0, r3
    4d36:	468c      	mov	ip, r1
    4d38:	4680      	mov	r8, r0
    4d3a:	4660      	mov	r0, ip
    4d3c:	4644      	mov	r4, r8
    4d3e:	49ed      	ldr	r1, [pc, #948]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4d40:	005b      	lsls	r3, r3, #1
    4d42:	4041      	eors	r1, r0
    4d44:	b29b      	uxth	r3, r3
    4d46:	b289      	uxth	r1, r1
    4d48:	9304      	str	r3, [sp, #16]
    4d4a:	1c18      	adds	r0, r3, #0
    4d4c:	2c00      	cmp	r4, #0
    4d4e:	da01      	bge.n	4d54 <bloomFilterAddressCheck+0x48>
    4d50:	f000 fe5b 	bl	5a0a <bloomFilterAddressCheck+0xcfe>
    4d54:	b284      	uxth	r4, r0
    4d56:	49e7      	ldr	r1, [pc, #924]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4d58:	0064      	lsls	r4, r4, #1
    4d5a:	4061      	eors	r1, r4
    4d5c:	b209      	sxth	r1, r1
    4d5e:	b289      	uxth	r1, r1
    4d60:	0044      	lsls	r4, r0, #1
    4d62:	0403      	lsls	r3, r0, #16
    4d64:	d501      	bpl.n	4d6a <bloomFilterAddressCheck+0x5e>
    4d66:	f000 fe53 	bl	5a10 <bloomFilterAddressCheck+0xd04>
    4d6a:	b2a0      	uxth	r0, r4
    4d6c:	49e1      	ldr	r1, [pc, #900]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4d6e:	0040      	lsls	r0, r0, #1
    4d70:	4041      	eors	r1, r0
    4d72:	b289      	uxth	r1, r1
    4d74:	0060      	lsls	r0, r4, #1
    4d76:	0423      	lsls	r3, r4, #16
    4d78:	d501      	bpl.n	4d7e <bloomFilterAddressCheck+0x72>
    4d7a:	f000 fe54 	bl	5a26 <bloomFilterAddressCheck+0xd1a>
    4d7e:	b284      	uxth	r4, r0
    4d80:	49dc      	ldr	r1, [pc, #880]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4d82:	0064      	lsls	r4, r4, #1
    4d84:	4061      	eors	r1, r4
    4d86:	b289      	uxth	r1, r1
    4d88:	0044      	lsls	r4, r0, #1
    4d8a:	0403      	lsls	r3, r0, #16
    4d8c:	d501      	bpl.n	4d92 <bloomFilterAddressCheck+0x86>
    4d8e:	f000 fe55 	bl	5a3c <bloomFilterAddressCheck+0xd30>
    4d92:	b2a0      	uxth	r0, r4
    4d94:	49d7      	ldr	r1, [pc, #860]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4d96:	0040      	lsls	r0, r0, #1
    4d98:	4041      	eors	r1, r0
    4d9a:	b289      	uxth	r1, r1
    4d9c:	0060      	lsls	r0, r4, #1
    4d9e:	0423      	lsls	r3, r4, #16
    4da0:	d501      	bpl.n	4da6 <bloomFilterAddressCheck+0x9a>
    4da2:	f000 fe56 	bl	5a52 <bloomFilterAddressCheck+0xd46>
    4da6:	b284      	uxth	r4, r0
    4da8:	49d2      	ldr	r1, [pc, #840]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4daa:	0064      	lsls	r4, r4, #1
    4dac:	4061      	eors	r1, r4
    4dae:	b289      	uxth	r1, r1
    4db0:	0044      	lsls	r4, r0, #1
    4db2:	0403      	lsls	r3, r0, #16
    4db4:	d501      	bpl.n	4dba <bloomFilterAddressCheck+0xae>
    4db6:	f000 fe57 	bl	5a68 <bloomFilterAddressCheck+0xd5c>
    4dba:	b2a0      	uxth	r0, r4
    4dbc:	49cd      	ldr	r1, [pc, #820]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4dbe:	0040      	lsls	r0, r0, #1
    4dc0:	4041      	eors	r1, r0
    4dc2:	b289      	uxth	r1, r1
    4dc4:	0060      	lsls	r0, r4, #1
    4dc6:	0423      	lsls	r3, r4, #16
    4dc8:	d501      	bpl.n	4dce <bloomFilterAddressCheck+0xc2>
    4dca:	f000 fe58 	bl	5a7e <bloomFilterAddressCheck+0xd72>
    4dce:	b284      	uxth	r4, r0
    4dd0:	49c8      	ldr	r1, [pc, #800]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4dd2:	0064      	lsls	r4, r4, #1
    4dd4:	4061      	eors	r1, r4
    4dd6:	2401      	movs	r4, #1
    4dd8:	5714      	ldrsb	r4, [r2, r4]
    4dda:	b289      	uxth	r1, r1
    4ddc:	0224      	lsls	r4, r4, #8
    4dde:	0045      	lsls	r5, r0, #1
    4de0:	0403      	lsls	r3, r0, #16
    4de2:	d501      	bpl.n	4de8 <bloomFilterAddressCheck+0xdc>
    4de4:	f000 fe4e 	bl	5a84 <bloomFilterAddressCheck+0xd78>
    4de8:	4065      	eors	r5, r4
    4dea:	b22d      	sxth	r5, r5
    4dec:	b2a9      	uxth	r1, r5
    4dee:	48c1      	ldr	r0, [pc, #772]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4df0:	0049      	lsls	r1, r1, #1
    4df2:	4048      	eors	r0, r1
    4df4:	b280      	uxth	r0, r0
    4df6:	2d00      	cmp	r5, #0
    4df8:	da01      	bge.n	4dfe <bloomFilterAddressCheck+0xf2>
    4dfa:	f000 fe46 	bl	5a8a <bloomFilterAddressCheck+0xd7e>
    4dfe:	48bd      	ldr	r0, [pc, #756]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4e00:	b28d      	uxth	r5, r1
    4e02:	006d      	lsls	r5, r5, #1
    4e04:	4045      	eors	r5, r0
    4e06:	b2ad      	uxth	r5, r5
    4e08:	0048      	lsls	r0, r1, #1
    4e0a:	040b      	lsls	r3, r1, #16
    4e0c:	d501      	bpl.n	4e12 <bloomFilterAddressCheck+0x106>
    4e0e:	f000 fe47 	bl	5aa0 <bloomFilterAddressCheck+0xd94>
    4e12:	b285      	uxth	r5, r0
    4e14:	49b7      	ldr	r1, [pc, #732]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4e16:	006d      	lsls	r5, r5, #1
    4e18:	4069      	eors	r1, r5
    4e1a:	b289      	uxth	r1, r1
    4e1c:	0045      	lsls	r5, r0, #1
    4e1e:	0403      	lsls	r3, r0, #16
    4e20:	d501      	bpl.n	4e26 <bloomFilterAddressCheck+0x11a>
    4e22:	f000 fe48 	bl	5ab6 <bloomFilterAddressCheck+0xdaa>
    4e26:	b2a8      	uxth	r0, r5
    4e28:	49b2      	ldr	r1, [pc, #712]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4e2a:	0040      	lsls	r0, r0, #1
    4e2c:	4041      	eors	r1, r0
    4e2e:	b289      	uxth	r1, r1
    4e30:	0068      	lsls	r0, r5, #1
    4e32:	042b      	lsls	r3, r5, #16
    4e34:	d501      	bpl.n	4e3a <bloomFilterAddressCheck+0x12e>
    4e36:	f000 fe49 	bl	5acc <bloomFilterAddressCheck+0xdc0>
    4e3a:	b285      	uxth	r5, r0
    4e3c:	49ad      	ldr	r1, [pc, #692]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4e3e:	006d      	lsls	r5, r5, #1
    4e40:	4069      	eors	r1, r5
    4e42:	b289      	uxth	r1, r1
    4e44:	0045      	lsls	r5, r0, #1
    4e46:	0403      	lsls	r3, r0, #16
    4e48:	d501      	bpl.n	4e4e <bloomFilterAddressCheck+0x142>
    4e4a:	f000 fe4a 	bl	5ae2 <bloomFilterAddressCheck+0xdd6>
    4e4e:	b2a8      	uxth	r0, r5
    4e50:	49a8      	ldr	r1, [pc, #672]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4e52:	0040      	lsls	r0, r0, #1
    4e54:	4041      	eors	r1, r0
    4e56:	b289      	uxth	r1, r1
    4e58:	0068      	lsls	r0, r5, #1
    4e5a:	042b      	lsls	r3, r5, #16
    4e5c:	d501      	bpl.n	4e62 <bloomFilterAddressCheck+0x156>
    4e5e:	f000 fe4b 	bl	5af8 <bloomFilterAddressCheck+0xdec>
    4e62:	b285      	uxth	r5, r0
    4e64:	49a3      	ldr	r1, [pc, #652]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4e66:	006d      	lsls	r5, r5, #1
    4e68:	4069      	eors	r1, r5
    4e6a:	b289      	uxth	r1, r1
    4e6c:	0045      	lsls	r5, r0, #1
    4e6e:	0403      	lsls	r3, r0, #16
    4e70:	d501      	bpl.n	4e76 <bloomFilterAddressCheck+0x16a>
    4e72:	f000 fe4c 	bl	5b0e <bloomFilterAddressCheck+0xe02>
    4e76:	b2a8      	uxth	r0, r5
    4e78:	499e      	ldr	r1, [pc, #632]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4e7a:	0040      	lsls	r0, r0, #1
    4e7c:	4041      	eors	r1, r0
    4e7e:	2002      	movs	r0, #2
    4e80:	5610      	ldrsb	r0, [r2, r0]
    4e82:	006f      	lsls	r7, r5, #1
    4e84:	b289      	uxth	r1, r1
    4e86:	0200      	lsls	r0, r0, #8
    4e88:	46b9      	mov	r9, r7
    4e8a:	042b      	lsls	r3, r5, #16
    4e8c:	d501      	bpl.n	4e92 <bloomFilterAddressCheck+0x186>
    4e8e:	f000 fe41 	bl	5b14 <bloomFilterAddressCheck+0xe08>
    4e92:	464d      	mov	r5, r9
    4e94:	4045      	eors	r5, r0
    4e96:	b22d      	sxth	r5, r5
    4e98:	b2a9      	uxth	r1, r5
    4e9a:	0049      	lsls	r1, r1, #1
    4e9c:	4689      	mov	r9, r1
    4e9e:	464f      	mov	r7, r9
    4ea0:	4994      	ldr	r1, [pc, #592]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4ea2:	4079      	eors	r1, r7
    4ea4:	b289      	uxth	r1, r1
    4ea6:	468a      	mov	sl, r1
    4ea8:	4649      	mov	r1, r9
    4eaa:	2d00      	cmp	r5, #0
    4eac:	da01      	bge.n	4eb2 <bloomFilterAddressCheck+0x1a6>
    4eae:	f000 fe34 	bl	5b1a <bloomFilterAddressCheck+0xe0e>
    4eb2:	b28d      	uxth	r5, r1
    4eb4:	006d      	lsls	r5, r5, #1
    4eb6:	46a9      	mov	r9, r5
    4eb8:	464f      	mov	r7, r9
    4eba:	4d8e      	ldr	r5, [pc, #568]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4ebc:	407d      	eors	r5, r7
    4ebe:	b2ad      	uxth	r5, r5
    4ec0:	46a9      	mov	r9, r5
    4ec2:	004d      	lsls	r5, r1, #1
    4ec4:	040b      	lsls	r3, r1, #16
    4ec6:	d501      	bpl.n	4ecc <bloomFilterAddressCheck+0x1c0>
    4ec8:	f000 fe2a 	bl	5b20 <bloomFilterAddressCheck+0xe14>
    4ecc:	b2a9      	uxth	r1, r5
    4ece:	0049      	lsls	r1, r1, #1
    4ed0:	4689      	mov	r9, r1
    4ed2:	464f      	mov	r7, r9
    4ed4:	4987      	ldr	r1, [pc, #540]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4ed6:	4079      	eors	r1, r7
    4ed8:	006f      	lsls	r7, r5, #1
    4eda:	b289      	uxth	r1, r1
    4edc:	46b9      	mov	r9, r7
    4ede:	042b      	lsls	r3, r5, #16
    4ee0:	d501      	bpl.n	4ee6 <bloomFilterAddressCheck+0x1da>
    4ee2:	f000 fe20 	bl	5b26 <bloomFilterAddressCheck+0xe1a>
    4ee6:	4649      	mov	r1, r9
    4ee8:	466b      	mov	r3, sp
    4eea:	b28d      	uxth	r5, r1
    4eec:	8099      	strh	r1, [r3, #4]
    4eee:	4981      	ldr	r1, [pc, #516]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4ef0:	006d      	lsls	r5, r5, #1
    4ef2:	4069      	eors	r1, r5
    4ef4:	464f      	mov	r7, r9
    4ef6:	464d      	mov	r5, r9
    4ef8:	b289      	uxth	r1, r1
    4efa:	006d      	lsls	r5, r5, #1
    4efc:	043b      	lsls	r3, r7, #16
    4efe:	d501      	bpl.n	4f04 <bloomFilterAddressCheck+0x1f8>
    4f00:	f000 fe14 	bl	5b2c <bloomFilterAddressCheck+0xe20>
    4f04:	b2a9      	uxth	r1, r5
    4f06:	0049      	lsls	r1, r1, #1
    4f08:	4689      	mov	r9, r1
    4f0a:	464f      	mov	r7, r9
    4f0c:	4979      	ldr	r1, [pc, #484]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4f0e:	4079      	eors	r1, r7
    4f10:	006f      	lsls	r7, r5, #1
    4f12:	b289      	uxth	r1, r1
    4f14:	46b9      	mov	r9, r7
    4f16:	042b      	lsls	r3, r5, #16
    4f18:	d501      	bpl.n	4f1e <bloomFilterAddressCheck+0x212>
    4f1a:	f000 fe0a 	bl	5b32 <bloomFilterAddressCheck+0xe26>
    4f1e:	4649      	mov	r1, r9
    4f20:	466b      	mov	r3, sp
    4f22:	b28d      	uxth	r5, r1
    4f24:	8099      	strh	r1, [r3, #4]
    4f26:	4973      	ldr	r1, [pc, #460]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4f28:	006d      	lsls	r5, r5, #1
    4f2a:	4069      	eors	r1, r5
    4f2c:	464f      	mov	r7, r9
    4f2e:	464d      	mov	r5, r9
    4f30:	b289      	uxth	r1, r1
    4f32:	006d      	lsls	r5, r5, #1
    4f34:	043b      	lsls	r3, r7, #16
    4f36:	d501      	bpl.n	4f3c <bloomFilterAddressCheck+0x230>
    4f38:	f000 fdfe 	bl	5b38 <bloomFilterAddressCheck+0xe2c>
    4f3c:	b2a9      	uxth	r1, r5
    4f3e:	0049      	lsls	r1, r1, #1
    4f40:	4689      	mov	r9, r1
    4f42:	464f      	mov	r7, r9
    4f44:	496b      	ldr	r1, [pc, #428]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4f46:	4079      	eors	r1, r7
    4f48:	006f      	lsls	r7, r5, #1
    4f4a:	b289      	uxth	r1, r1
    4f4c:	46ba      	mov	sl, r7
    4f4e:	042b      	lsls	r3, r5, #16
    4f50:	d501      	bpl.n	4f56 <bloomFilterAddressCheck+0x24a>
    4f52:	f000 fdf4 	bl	5b3e <bloomFilterAddressCheck+0xe32>
    4f56:	4651      	mov	r1, sl
    4f58:	466b      	mov	r3, sp
    4f5a:	b28d      	uxth	r5, r1
    4f5c:	8099      	strh	r1, [r3, #4]
    4f5e:	4965      	ldr	r1, [pc, #404]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4f60:	006d      	lsls	r5, r5, #1
    4f62:	4069      	eors	r1, r5
    4f64:	b289      	uxth	r1, r1
    4f66:	4689      	mov	r9, r1
    4f68:	2103      	movs	r1, #3
    4f6a:	4655      	mov	r5, sl
    4f6c:	4657      	mov	r7, sl
    4f6e:	5651      	ldrsb	r1, [r2, r1]
    4f70:	006d      	lsls	r5, r5, #1
    4f72:	0209      	lsls	r1, r1, #8
    4f74:	043b      	lsls	r3, r7, #16
    4f76:	d501      	bpl.n	4f7c <bloomFilterAddressCheck+0x270>
    4f78:	f000 fde4 	bl	5b44 <bloomFilterAddressCheck+0xe38>
    4f7c:	404d      	eors	r5, r1
    4f7e:	b22d      	sxth	r5, r5
    4f80:	466b      	mov	r3, sp
    4f82:	46a9      	mov	r9, r5
    4f84:	4f5b      	ldr	r7, [pc, #364]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4f86:	b2ad      	uxth	r5, r5
    4f88:	006d      	lsls	r5, r5, #1
    4f8a:	406f      	eors	r7, r5
    4f8c:	809f      	strh	r7, [r3, #4]
    4f8e:	b2bf      	uxth	r7, r7
    4f90:	46ba      	mov	sl, r7
    4f92:	464f      	mov	r7, r9
    4f94:	2f00      	cmp	r7, #0
    4f96:	da01      	bge.n	4f9c <bloomFilterAddressCheck+0x290>
    4f98:	f000 fdd7 	bl	5b4a <bloomFilterAddressCheck+0xe3e>
    4f9c:	b2af      	uxth	r7, r5
    4f9e:	007f      	lsls	r7, r7, #1
    4fa0:	46ba      	mov	sl, r7
    4fa2:	4f54      	ldr	r7, [pc, #336]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4fa4:	46b9      	mov	r9, r7
    4fa6:	4657      	mov	r7, sl
    4fa8:	464b      	mov	r3, r9
    4faa:	405f      	eors	r7, r3
    4fac:	1c3b      	adds	r3, r7, #0
    4fae:	466f      	mov	r7, sp
    4fb0:	80bb      	strh	r3, [r7, #4]
    4fb2:	88bb      	ldrh	r3, [r7, #4]
    4fb4:	469a      	mov	sl, r3
    4fb6:	006b      	lsls	r3, r5, #1
    4fb8:	4699      	mov	r9, r3
    4fba:	042b      	lsls	r3, r5, #16
    4fbc:	d501      	bpl.n	4fc2 <bloomFilterAddressCheck+0x2b6>
    4fbe:	f000 fdc7 	bl	5b50 <bloomFilterAddressCheck+0xe44>
    4fc2:	464b      	mov	r3, r9
    4fc4:	466d      	mov	r5, sp
    4fc6:	80ab      	strh	r3, [r5, #4]
    4fc8:	88ad      	ldrh	r5, [r5, #4]
    4fca:	006b      	lsls	r3, r5, #1
    4fcc:	4d49      	ldr	r5, [pc, #292]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4fce:	405d      	eors	r5, r3
    4fd0:	464b      	mov	r3, r9
    4fd2:	005b      	lsls	r3, r3, #1
    4fd4:	469a      	mov	sl, r3
    4fd6:	464b      	mov	r3, r9
    4fd8:	b2ad      	uxth	r5, r5
    4fda:	041b      	lsls	r3, r3, #16
    4fdc:	d501      	bpl.n	4fe2 <bloomFilterAddressCheck+0x2d6>
    4fde:	f000 fdba 	bl	5b56 <bloomFilterAddressCheck+0xe4a>
    4fe2:	4653      	mov	r3, sl
    4fe4:	466d      	mov	r5, sp
    4fe6:	80ab      	strh	r3, [r5, #4]
    4fe8:	88ad      	ldrh	r5, [r5, #4]
    4fea:	006b      	lsls	r3, r5, #1
    4fec:	4d41      	ldr	r5, [pc, #260]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    4fee:	405d      	eors	r5, r3
    4ff0:	4653      	mov	r3, sl
    4ff2:	005b      	lsls	r3, r3, #1
    4ff4:	4699      	mov	r9, r3
    4ff6:	4653      	mov	r3, sl
    4ff8:	b2ad      	uxth	r5, r5
    4ffa:	041b      	lsls	r3, r3, #16
    4ffc:	d501      	bpl.n	5002 <bloomFilterAddressCheck+0x2f6>
    4ffe:	f000 fdad 	bl	5b5c <bloomFilterAddressCheck+0xe50>
    5002:	464b      	mov	r3, r9
    5004:	466d      	mov	r5, sp
    5006:	80ab      	strh	r3, [r5, #4]
    5008:	88ad      	ldrh	r5, [r5, #4]
    500a:	006b      	lsls	r3, r5, #1
    500c:	4d39      	ldr	r5, [pc, #228]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    500e:	405d      	eors	r5, r3
    5010:	464b      	mov	r3, r9
    5012:	005b      	lsls	r3, r3, #1
    5014:	469a      	mov	sl, r3
    5016:	464b      	mov	r3, r9
    5018:	b2ad      	uxth	r5, r5
    501a:	041b      	lsls	r3, r3, #16
    501c:	d501      	bpl.n	5022 <bloomFilterAddressCheck+0x316>
    501e:	f000 fda0 	bl	5b62 <bloomFilterAddressCheck+0xe56>
    5022:	4653      	mov	r3, sl
    5024:	466d      	mov	r5, sp
    5026:	80ab      	strh	r3, [r5, #4]
    5028:	88ad      	ldrh	r5, [r5, #4]
    502a:	006b      	lsls	r3, r5, #1
    502c:	4d31      	ldr	r5, [pc, #196]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    502e:	405d      	eors	r5, r3
    5030:	4653      	mov	r3, sl
    5032:	005b      	lsls	r3, r3, #1
    5034:	4699      	mov	r9, r3
    5036:	4653      	mov	r3, sl
    5038:	b2ad      	uxth	r5, r5
    503a:	041b      	lsls	r3, r3, #16
    503c:	d501      	bpl.n	5042 <bloomFilterAddressCheck+0x336>
    503e:	f000 fd93 	bl	5b68 <bloomFilterAddressCheck+0xe5c>
    5042:	464b      	mov	r3, r9
    5044:	466d      	mov	r5, sp
    5046:	80ab      	strh	r3, [r5, #4]
    5048:	88ad      	ldrh	r5, [r5, #4]
    504a:	006b      	lsls	r3, r5, #1
    504c:	4d29      	ldr	r5, [pc, #164]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    504e:	405d      	eors	r5, r3
    5050:	464b      	mov	r3, r9
    5052:	005b      	lsls	r3, r3, #1
    5054:	469a      	mov	sl, r3
    5056:	464b      	mov	r3, r9
    5058:	b2ad      	uxth	r5, r5
    505a:	041b      	lsls	r3, r3, #16
    505c:	d501      	bpl.n	5062 <bloomFilterAddressCheck+0x356>
    505e:	f000 fd86 	bl	5b6e <bloomFilterAddressCheck+0xe62>
    5062:	4653      	mov	r3, sl
    5064:	466d      	mov	r5, sp
    5066:	80ab      	strh	r3, [r5, #4]
    5068:	88ad      	ldrh	r5, [r5, #4]
    506a:	006b      	lsls	r3, r5, #1
    506c:	4d21      	ldr	r5, [pc, #132]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    506e:	405d      	eors	r5, r3
    5070:	b2ab      	uxth	r3, r5
    5072:	2504      	movs	r5, #4
    5074:	5755      	ldrsb	r5, [r2, r5]
    5076:	4699      	mov	r9, r3
    5078:	022b      	lsls	r3, r5, #8
    507a:	469b      	mov	fp, r3
    507c:	4653      	mov	r3, sl
    507e:	005d      	lsls	r5, r3, #1
    5080:	041b      	lsls	r3, r3, #16
    5082:	d501      	bpl.n	5088 <bloomFilterAddressCheck+0x37c>
    5084:	f000 fd76 	bl	5b74 <bloomFilterAddressCheck+0xe68>
    5088:	465b      	mov	r3, fp
    508a:	405d      	eors	r5, r3
    508c:	b22b      	sxth	r3, r5
    508e:	466d      	mov	r5, sp
    5090:	4699      	mov	r9, r3
    5092:	80ab      	strh	r3, [r5, #4]
    5094:	4b17      	ldr	r3, [pc, #92]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    5096:	88ad      	ldrh	r5, [r5, #4]
    5098:	001f      	movs	r7, r3
    509a:	006d      	lsls	r5, r5, #1
    509c:	406f      	eors	r7, r5
    509e:	1c3b      	adds	r3, r7, #0
    50a0:	466f      	mov	r7, sp
    50a2:	80bb      	strh	r3, [r7, #4]
    50a4:	88bb      	ldrh	r3, [r7, #4]
    50a6:	469a      	mov	sl, r3
    50a8:	464b      	mov	r3, r9
    50aa:	2b00      	cmp	r3, #0
    50ac:	da01      	bge.n	50b2 <bloomFilterAddressCheck+0x3a6>
    50ae:	f000 fd64 	bl	5b7a <bloomFilterAddressCheck+0xe6e>
    50b2:	b2ab      	uxth	r3, r5
    50b4:	005b      	lsls	r3, r3, #1
    50b6:	469a      	mov	sl, r3
    50b8:	4657      	mov	r7, sl
    50ba:	4b0e      	ldr	r3, [pc, #56]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    50bc:	405f      	eors	r7, r3
    50be:	1c3b      	adds	r3, r7, #0
    50c0:	466f      	mov	r7, sp
    50c2:	80bb      	strh	r3, [r7, #4]
    50c4:	88bb      	ldrh	r3, [r7, #4]
    50c6:	469a      	mov	sl, r3
    50c8:	006b      	lsls	r3, r5, #1
    50ca:	4699      	mov	r9, r3
    50cc:	042b      	lsls	r3, r5, #16
    50ce:	d501      	bpl.n	50d4 <bloomFilterAddressCheck+0x3c8>
    50d0:	f000 fd56 	bl	5b80 <bloomFilterAddressCheck+0xe74>
    50d4:	464b      	mov	r3, r9
    50d6:	466d      	mov	r5, sp
    50d8:	80ab      	strh	r3, [r5, #4]
    50da:	88ad      	ldrh	r5, [r5, #4]
    50dc:	006b      	lsls	r3, r5, #1
    50de:	4d05      	ldr	r5, [pc, #20]	; (50f4 <bloomFilterAddressCheck+0x3e8>)
    50e0:	405d      	eors	r5, r3
    50e2:	464b      	mov	r3, r9
    50e4:	005b      	lsls	r3, r3, #1
    50e6:	469a      	mov	sl, r3
    50e8:	464b      	mov	r3, r9
    50ea:	b2ad      	uxth	r5, r5
    50ec:	e004      	b.n	50f8 <bloomFilterAddressCheck+0x3ec>
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	2000004b 	.word	0x2000004b
    50f4:	00001021 	.word	0x00001021
    50f8:	041b      	lsls	r3, r3, #16
    50fa:	d501      	bpl.n	5100 <bloomFilterAddressCheck+0x3f4>
    50fc:	f000 fd43 	bl	5b86 <bloomFilterAddressCheck+0xe7a>
    5100:	4653      	mov	r3, sl
    5102:	466d      	mov	r5, sp
    5104:	80ab      	strh	r3, [r5, #4]
    5106:	88ad      	ldrh	r5, [r5, #4]
    5108:	006b      	lsls	r3, r5, #1
    510a:	4de9      	ldr	r5, [pc, #932]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    510c:	405d      	eors	r5, r3
    510e:	4653      	mov	r3, sl
    5110:	005b      	lsls	r3, r3, #1
    5112:	4699      	mov	r9, r3
    5114:	4653      	mov	r3, sl
    5116:	b2ad      	uxth	r5, r5
    5118:	041b      	lsls	r3, r3, #16
    511a:	d501      	bpl.n	5120 <bloomFilterAddressCheck+0x414>
    511c:	f000 fd36 	bl	5b8c <bloomFilterAddressCheck+0xe80>
    5120:	464b      	mov	r3, r9
    5122:	466d      	mov	r5, sp
    5124:	80ab      	strh	r3, [r5, #4]
    5126:	88ad      	ldrh	r5, [r5, #4]
    5128:	006b      	lsls	r3, r5, #1
    512a:	4de1      	ldr	r5, [pc, #900]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    512c:	405d      	eors	r5, r3
    512e:	464b      	mov	r3, r9
    5130:	005b      	lsls	r3, r3, #1
    5132:	469a      	mov	sl, r3
    5134:	464b      	mov	r3, r9
    5136:	b2ad      	uxth	r5, r5
    5138:	041b      	lsls	r3, r3, #16
    513a:	d501      	bpl.n	5140 <bloomFilterAddressCheck+0x434>
    513c:	f000 fd29 	bl	5b92 <bloomFilterAddressCheck+0xe86>
    5140:	4653      	mov	r3, sl
    5142:	466d      	mov	r5, sp
    5144:	80ab      	strh	r3, [r5, #4]
    5146:	88ad      	ldrh	r5, [r5, #4]
    5148:	006b      	lsls	r3, r5, #1
    514a:	4dd9      	ldr	r5, [pc, #868]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    514c:	405d      	eors	r5, r3
    514e:	4653      	mov	r3, sl
    5150:	005b      	lsls	r3, r3, #1
    5152:	4699      	mov	r9, r3
    5154:	4653      	mov	r3, sl
    5156:	b2ad      	uxth	r5, r5
    5158:	041b      	lsls	r3, r3, #16
    515a:	d501      	bpl.n	5160 <bloomFilterAddressCheck+0x454>
    515c:	f000 fd1c 	bl	5b98 <bloomFilterAddressCheck+0xe8c>
    5160:	464b      	mov	r3, r9
    5162:	466d      	mov	r5, sp
    5164:	80ab      	strh	r3, [r5, #4]
    5166:	88ad      	ldrh	r5, [r5, #4]
    5168:	006b      	lsls	r3, r5, #1
    516a:	4dd1      	ldr	r5, [pc, #836]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    516c:	405d      	eors	r5, r3
    516e:	464b      	mov	r3, r9
    5170:	005b      	lsls	r3, r3, #1
    5172:	469a      	mov	sl, r3
    5174:	464b      	mov	r3, r9
    5176:	b2ad      	uxth	r5, r5
    5178:	041b      	lsls	r3, r3, #16
    517a:	d501      	bpl.n	5180 <bloomFilterAddressCheck+0x474>
    517c:	f000 fd0f 	bl	5b9e <bloomFilterAddressCheck+0xe92>
    5180:	4653      	mov	r3, sl
    5182:	466d      	mov	r5, sp
    5184:	80ab      	strh	r3, [r5, #4]
    5186:	88ad      	ldrh	r5, [r5, #4]
    5188:	006b      	lsls	r3, r5, #1
    518a:	4dc9      	ldr	r5, [pc, #804]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    518c:	405d      	eors	r5, r3
    518e:	b2ab      	uxth	r3, r5
    5190:	2505      	movs	r5, #5
    5192:	5755      	ldrsb	r5, [r2, r5]
    5194:	4699      	mov	r9, r3
    5196:	022b      	lsls	r3, r5, #8
    5198:	9301      	str	r3, [sp, #4]
    519a:	4653      	mov	r3, sl
    519c:	005d      	lsls	r5, r3, #1
    519e:	041b      	lsls	r3, r3, #16
    51a0:	d501      	bpl.n	51a6 <bloomFilterAddressCheck+0x49a>
    51a2:	f000 fcff 	bl	5ba4 <bloomFilterAddressCheck+0xe98>
    51a6:	9b01      	ldr	r3, [sp, #4]
    51a8:	405d      	eors	r5, r3
    51aa:	b22b      	sxth	r3, r5
    51ac:	466d      	mov	r5, sp
    51ae:	4699      	mov	r9, r3
    51b0:	812b      	strh	r3, [r5, #8]
    51b2:	4bbf      	ldr	r3, [pc, #764]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    51b4:	892d      	ldrh	r5, [r5, #8]
    51b6:	001f      	movs	r7, r3
    51b8:	006d      	lsls	r5, r5, #1
    51ba:	406f      	eors	r7, r5
    51bc:	1c3b      	adds	r3, r7, #0
    51be:	466f      	mov	r7, sp
    51c0:	813b      	strh	r3, [r7, #8]
    51c2:	893b      	ldrh	r3, [r7, #8]
    51c4:	469a      	mov	sl, r3
    51c6:	464b      	mov	r3, r9
    51c8:	2b00      	cmp	r3, #0
    51ca:	da01      	bge.n	51d0 <bloomFilterAddressCheck+0x4c4>
    51cc:	f000 fced 	bl	5baa <bloomFilterAddressCheck+0xe9e>
    51d0:	b2ab      	uxth	r3, r5
    51d2:	005b      	lsls	r3, r3, #1
    51d4:	469a      	mov	sl, r3
    51d6:	4657      	mov	r7, sl
    51d8:	4bb5      	ldr	r3, [pc, #724]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    51da:	405f      	eors	r7, r3
    51dc:	1c3b      	adds	r3, r7, #0
    51de:	466f      	mov	r7, sp
    51e0:	813b      	strh	r3, [r7, #8]
    51e2:	893b      	ldrh	r3, [r7, #8]
    51e4:	469a      	mov	sl, r3
    51e6:	006b      	lsls	r3, r5, #1
    51e8:	4699      	mov	r9, r3
    51ea:	042b      	lsls	r3, r5, #16
    51ec:	d501      	bpl.n	51f2 <bloomFilterAddressCheck+0x4e6>
    51ee:	f000 fcdf 	bl	5bb0 <bloomFilterAddressCheck+0xea4>
    51f2:	464b      	mov	r3, r9
    51f4:	466d      	mov	r5, sp
    51f6:	812b      	strh	r3, [r5, #8]
    51f8:	892d      	ldrh	r5, [r5, #8]
    51fa:	006b      	lsls	r3, r5, #1
    51fc:	4dac      	ldr	r5, [pc, #688]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    51fe:	405d      	eors	r5, r3
    5200:	464b      	mov	r3, r9
    5202:	005b      	lsls	r3, r3, #1
    5204:	469a      	mov	sl, r3
    5206:	464b      	mov	r3, r9
    5208:	b2ad      	uxth	r5, r5
    520a:	041b      	lsls	r3, r3, #16
    520c:	d501      	bpl.n	5212 <bloomFilterAddressCheck+0x506>
    520e:	f000 fcd2 	bl	5bb6 <bloomFilterAddressCheck+0xeaa>
    5212:	4653      	mov	r3, sl
    5214:	466d      	mov	r5, sp
    5216:	812b      	strh	r3, [r5, #8]
    5218:	892d      	ldrh	r5, [r5, #8]
    521a:	006b      	lsls	r3, r5, #1
    521c:	4da4      	ldr	r5, [pc, #656]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    521e:	405d      	eors	r5, r3
    5220:	4653      	mov	r3, sl
    5222:	005b      	lsls	r3, r3, #1
    5224:	4699      	mov	r9, r3
    5226:	4653      	mov	r3, sl
    5228:	b2ad      	uxth	r5, r5
    522a:	041b      	lsls	r3, r3, #16
    522c:	d501      	bpl.n	5232 <bloomFilterAddressCheck+0x526>
    522e:	f000 fcc5 	bl	5bbc <bloomFilterAddressCheck+0xeb0>
    5232:	464b      	mov	r3, r9
    5234:	466d      	mov	r5, sp
    5236:	812b      	strh	r3, [r5, #8]
    5238:	892d      	ldrh	r5, [r5, #8]
    523a:	006b      	lsls	r3, r5, #1
    523c:	4d9c      	ldr	r5, [pc, #624]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    523e:	405d      	eors	r5, r3
    5240:	464b      	mov	r3, r9
    5242:	005b      	lsls	r3, r3, #1
    5244:	469a      	mov	sl, r3
    5246:	464b      	mov	r3, r9
    5248:	b2ad      	uxth	r5, r5
    524a:	041b      	lsls	r3, r3, #16
    524c:	d501      	bpl.n	5252 <bloomFilterAddressCheck+0x546>
    524e:	f000 fcb8 	bl	5bc2 <bloomFilterAddressCheck+0xeb6>
    5252:	4653      	mov	r3, sl
    5254:	466d      	mov	r5, sp
    5256:	812b      	strh	r3, [r5, #8]
    5258:	892d      	ldrh	r5, [r5, #8]
    525a:	006b      	lsls	r3, r5, #1
    525c:	4d94      	ldr	r5, [pc, #592]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    525e:	405d      	eors	r5, r3
    5260:	4653      	mov	r3, sl
    5262:	005b      	lsls	r3, r3, #1
    5264:	4699      	mov	r9, r3
    5266:	4653      	mov	r3, sl
    5268:	b2ad      	uxth	r5, r5
    526a:	041b      	lsls	r3, r3, #16
    526c:	d501      	bpl.n	5272 <bloomFilterAddressCheck+0x566>
    526e:	f000 fcab 	bl	5bc8 <bloomFilterAddressCheck+0xebc>
    5272:	464b      	mov	r3, r9
    5274:	466d      	mov	r5, sp
    5276:	812b      	strh	r3, [r5, #8]
    5278:	892d      	ldrh	r5, [r5, #8]
    527a:	006b      	lsls	r3, r5, #1
    527c:	4d8c      	ldr	r5, [pc, #560]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    527e:	405d      	eors	r5, r3
    5280:	464b      	mov	r3, r9
    5282:	005b      	lsls	r3, r3, #1
    5284:	469a      	mov	sl, r3
    5286:	464b      	mov	r3, r9
    5288:	b2ad      	uxth	r5, r5
    528a:	041b      	lsls	r3, r3, #16
    528c:	d501      	bpl.n	5292 <bloomFilterAddressCheck+0x586>
    528e:	f000 fc9e 	bl	5bce <bloomFilterAddressCheck+0xec2>
    5292:	4653      	mov	r3, sl
    5294:	466d      	mov	r5, sp
    5296:	812b      	strh	r3, [r5, #8]
    5298:	892d      	ldrh	r5, [r5, #8]
    529a:	006b      	lsls	r3, r5, #1
    529c:	4d84      	ldr	r5, [pc, #528]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    529e:	405d      	eors	r5, r3
    52a0:	b2ab      	uxth	r3, r5
    52a2:	2506      	movs	r5, #6
    52a4:	5755      	ldrsb	r5, [r2, r5]
    52a6:	4699      	mov	r9, r3
    52a8:	022b      	lsls	r3, r5, #8
    52aa:	9302      	str	r3, [sp, #8]
    52ac:	4653      	mov	r3, sl
    52ae:	005d      	lsls	r5, r3, #1
    52b0:	041b      	lsls	r3, r3, #16
    52b2:	d501      	bpl.n	52b8 <bloomFilterAddressCheck+0x5ac>
    52b4:	f000 fc8e 	bl	5bd4 <bloomFilterAddressCheck+0xec8>
    52b8:	9b02      	ldr	r3, [sp, #8]
    52ba:	405d      	eors	r5, r3
    52bc:	b22b      	sxth	r3, r5
    52be:	466d      	mov	r5, sp
    52c0:	4699      	mov	r9, r3
    52c2:	82ab      	strh	r3, [r5, #20]
    52c4:	4b7a      	ldr	r3, [pc, #488]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    52c6:	8aad      	ldrh	r5, [r5, #20]
    52c8:	001f      	movs	r7, r3
    52ca:	006d      	lsls	r5, r5, #1
    52cc:	406f      	eors	r7, r5
    52ce:	1c3b      	adds	r3, r7, #0
    52d0:	466f      	mov	r7, sp
    52d2:	82bb      	strh	r3, [r7, #20]
    52d4:	8abb      	ldrh	r3, [r7, #20]
    52d6:	469a      	mov	sl, r3
    52d8:	464b      	mov	r3, r9
    52da:	2b00      	cmp	r3, #0
    52dc:	da01      	bge.n	52e2 <bloomFilterAddressCheck+0x5d6>
    52de:	f000 fc7c 	bl	5bda <bloomFilterAddressCheck+0xece>
    52e2:	b2ab      	uxth	r3, r5
    52e4:	005b      	lsls	r3, r3, #1
    52e6:	469a      	mov	sl, r3
    52e8:	4657      	mov	r7, sl
    52ea:	4b71      	ldr	r3, [pc, #452]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    52ec:	405f      	eors	r7, r3
    52ee:	1c3b      	adds	r3, r7, #0
    52f0:	466f      	mov	r7, sp
    52f2:	82bb      	strh	r3, [r7, #20]
    52f4:	8abb      	ldrh	r3, [r7, #20]
    52f6:	4699      	mov	r9, r3
    52f8:	006b      	lsls	r3, r5, #1
    52fa:	469a      	mov	sl, r3
    52fc:	042b      	lsls	r3, r5, #16
    52fe:	d501      	bpl.n	5304 <bloomFilterAddressCheck+0x5f8>
    5300:	f000 fc6e 	bl	5be0 <bloomFilterAddressCheck+0xed4>
    5304:	4653      	mov	r3, sl
    5306:	466d      	mov	r5, sp
    5308:	82ab      	strh	r3, [r5, #20]
    530a:	8aad      	ldrh	r5, [r5, #20]
    530c:	006b      	lsls	r3, r5, #1
    530e:	4d68      	ldr	r5, [pc, #416]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5310:	405d      	eors	r5, r3
    5312:	4653      	mov	r3, sl
    5314:	005b      	lsls	r3, r3, #1
    5316:	4699      	mov	r9, r3
    5318:	4653      	mov	r3, sl
    531a:	b2ad      	uxth	r5, r5
    531c:	041b      	lsls	r3, r3, #16
    531e:	d501      	bpl.n	5324 <bloomFilterAddressCheck+0x618>
    5320:	f000 fc61 	bl	5be6 <bloomFilterAddressCheck+0xeda>
    5324:	464b      	mov	r3, r9
    5326:	466d      	mov	r5, sp
    5328:	82ab      	strh	r3, [r5, #20]
    532a:	8aad      	ldrh	r5, [r5, #20]
    532c:	006b      	lsls	r3, r5, #1
    532e:	4d60      	ldr	r5, [pc, #384]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5330:	405d      	eors	r5, r3
    5332:	464b      	mov	r3, r9
    5334:	005b      	lsls	r3, r3, #1
    5336:	469a      	mov	sl, r3
    5338:	464b      	mov	r3, r9
    533a:	b2ad      	uxth	r5, r5
    533c:	041b      	lsls	r3, r3, #16
    533e:	d501      	bpl.n	5344 <bloomFilterAddressCheck+0x638>
    5340:	f000 fc54 	bl	5bec <bloomFilterAddressCheck+0xee0>
    5344:	4653      	mov	r3, sl
    5346:	466d      	mov	r5, sp
    5348:	82ab      	strh	r3, [r5, #20]
    534a:	8aad      	ldrh	r5, [r5, #20]
    534c:	006b      	lsls	r3, r5, #1
    534e:	4d58      	ldr	r5, [pc, #352]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5350:	405d      	eors	r5, r3
    5352:	4653      	mov	r3, sl
    5354:	005b      	lsls	r3, r3, #1
    5356:	4699      	mov	r9, r3
    5358:	4653      	mov	r3, sl
    535a:	b2ad      	uxth	r5, r5
    535c:	041b      	lsls	r3, r3, #16
    535e:	d501      	bpl.n	5364 <bloomFilterAddressCheck+0x658>
    5360:	f000 fc47 	bl	5bf2 <bloomFilterAddressCheck+0xee6>
    5364:	464b      	mov	r3, r9
    5366:	466d      	mov	r5, sp
    5368:	82ab      	strh	r3, [r5, #20]
    536a:	8aad      	ldrh	r5, [r5, #20]
    536c:	006b      	lsls	r3, r5, #1
    536e:	4d50      	ldr	r5, [pc, #320]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5370:	405d      	eors	r5, r3
    5372:	464b      	mov	r3, r9
    5374:	005b      	lsls	r3, r3, #1
    5376:	469a      	mov	sl, r3
    5378:	464b      	mov	r3, r9
    537a:	b2ad      	uxth	r5, r5
    537c:	041b      	lsls	r3, r3, #16
    537e:	d501      	bpl.n	5384 <bloomFilterAddressCheck+0x678>
    5380:	f000 fc3a 	bl	5bf8 <bloomFilterAddressCheck+0xeec>
    5384:	4653      	mov	r3, sl
    5386:	466d      	mov	r5, sp
    5388:	82ab      	strh	r3, [r5, #20]
    538a:	8aad      	ldrh	r5, [r5, #20]
    538c:	006b      	lsls	r3, r5, #1
    538e:	4d48      	ldr	r5, [pc, #288]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5390:	405d      	eors	r5, r3
    5392:	4653      	mov	r3, sl
    5394:	005b      	lsls	r3, r3, #1
    5396:	4699      	mov	r9, r3
    5398:	4653      	mov	r3, sl
    539a:	b2ad      	uxth	r5, r5
    539c:	041b      	lsls	r3, r3, #16
    539e:	d501      	bpl.n	53a4 <bloomFilterAddressCheck+0x698>
    53a0:	f000 fc2d 	bl	5bfe <bloomFilterAddressCheck+0xef2>
    53a4:	464b      	mov	r3, r9
    53a6:	466d      	mov	r5, sp
    53a8:	82ab      	strh	r3, [r5, #20]
    53aa:	8aad      	ldrh	r5, [r5, #20]
    53ac:	79d2      	ldrb	r2, [r2, #7]
    53ae:	006b      	lsls	r3, r5, #1
    53b0:	4d3f      	ldr	r5, [pc, #252]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    53b2:	b252      	sxtb	r2, r2
    53b4:	405d      	eors	r5, r3
    53b6:	0213      	lsls	r3, r2, #8
    53b8:	469a      	mov	sl, r3
    53ba:	464b      	mov	r3, r9
    53bc:	b2ad      	uxth	r5, r5
    53be:	005a      	lsls	r2, r3, #1
    53c0:	041b      	lsls	r3, r3, #16
    53c2:	d501      	bpl.n	53c8 <bloomFilterAddressCheck+0x6bc>
    53c4:	f000 fc1e 	bl	5c04 <bloomFilterAddressCheck+0xef8>
    53c8:	4653      	mov	r3, sl
    53ca:	405a      	eors	r2, r3
    53cc:	4b38      	ldr	r3, [pc, #224]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    53ce:	b212      	sxth	r2, r2
    53d0:	001f      	movs	r7, r3
    53d2:	b295      	uxth	r5, r2
    53d4:	006d      	lsls	r5, r5, #1
    53d6:	406f      	eors	r7, r5
    53d8:	1c3b      	adds	r3, r7, #0
    53da:	466f      	mov	r7, sp
    53dc:	82bb      	strh	r3, [r7, #20]
    53de:	8abb      	ldrh	r3, [r7, #20]
    53e0:	b2ad      	uxth	r5, r5
    53e2:	2a00      	cmp	r2, #0
    53e4:	da00      	bge.n	53e8 <bloomFilterAddressCheck+0x6dc>
    53e6:	e30e      	b.n	5a06 <bloomFilterAddressCheck+0xcfa>
    53e8:	1c2a      	adds	r2, r5, #0
    53ea:	466f      	mov	r7, sp
    53ec:	b295      	uxth	r5, r2
    53ee:	006b      	lsls	r3, r5, #1
    53f0:	4d2f      	ldr	r5, [pc, #188]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    53f2:	405d      	eors	r5, r3
    53f4:	0053      	lsls	r3, r2, #1
    53f6:	82bb      	strh	r3, [r7, #20]
    53f8:	8abb      	ldrh	r3, [r7, #20]
    53fa:	b2ad      	uxth	r5, r5
    53fc:	4699      	mov	r9, r3
    53fe:	0413      	lsls	r3, r2, #16
    5400:	d501      	bpl.n	5406 <bloomFilterAddressCheck+0x6fa>
    5402:	f000 fcb4 	bl	5d6e <bloomFilterAddressCheck+0x1062>
    5406:	464a      	mov	r2, r9
    5408:	466f      	mov	r7, sp
    540a:	b295      	uxth	r5, r2
    540c:	006b      	lsls	r3, r5, #1
    540e:	4d28      	ldr	r5, [pc, #160]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5410:	405d      	eors	r5, r3
    5412:	0053      	lsls	r3, r2, #1
    5414:	82bb      	strh	r3, [r7, #20]
    5416:	8abb      	ldrh	r3, [r7, #20]
    5418:	b2ad      	uxth	r5, r5
    541a:	4699      	mov	r9, r3
    541c:	0413      	lsls	r3, r2, #16
    541e:	d400      	bmi.n	5422 <bloomFilterAddressCheck+0x716>
    5420:	464d      	mov	r5, r9
    5422:	466f      	mov	r7, sp
    5424:	b2aa      	uxth	r2, r5
    5426:	0053      	lsls	r3, r2, #1
    5428:	4a21      	ldr	r2, [pc, #132]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    542a:	405a      	eors	r2, r3
    542c:	006b      	lsls	r3, r5, #1
    542e:	82bb      	strh	r3, [r7, #20]
    5430:	8abb      	ldrh	r3, [r7, #20]
    5432:	b292      	uxth	r2, r2
    5434:	4699      	mov	r9, r3
    5436:	042b      	lsls	r3, r5, #16
    5438:	d400      	bmi.n	543c <bloomFilterAddressCheck+0x730>
    543a:	464a      	mov	r2, r9
    543c:	466f      	mov	r7, sp
    543e:	b295      	uxth	r5, r2
    5440:	006b      	lsls	r3, r5, #1
    5442:	4d1b      	ldr	r5, [pc, #108]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5444:	405d      	eors	r5, r3
    5446:	0053      	lsls	r3, r2, #1
    5448:	82bb      	strh	r3, [r7, #20]
    544a:	8abb      	ldrh	r3, [r7, #20]
    544c:	b2ad      	uxth	r5, r5
    544e:	4699      	mov	r9, r3
    5450:	0413      	lsls	r3, r2, #16
    5452:	d400      	bmi.n	5456 <bloomFilterAddressCheck+0x74a>
    5454:	464d      	mov	r5, r9
    5456:	466f      	mov	r7, sp
    5458:	b2aa      	uxth	r2, r5
    545a:	0053      	lsls	r3, r2, #1
    545c:	4a14      	ldr	r2, [pc, #80]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    545e:	405a      	eors	r2, r3
    5460:	006b      	lsls	r3, r5, #1
    5462:	82bb      	strh	r3, [r7, #20]
    5464:	8abb      	ldrh	r3, [r7, #20]
    5466:	b292      	uxth	r2, r2
    5468:	4699      	mov	r9, r3
    546a:	042b      	lsls	r3, r5, #16
    546c:	d400      	bmi.n	5470 <bloomFilterAddressCheck+0x764>
    546e:	464a      	mov	r2, r9
    5470:	b295      	uxth	r5, r2
    5472:	006b      	lsls	r3, r5, #1
    5474:	4d0e      	ldr	r5, [pc, #56]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5476:	405d      	eors	r5, r3
    5478:	b2ab      	uxth	r3, r5
    547a:	0055      	lsls	r5, r2, #1
    547c:	4699      	mov	r9, r3
    547e:	b2ad      	uxth	r5, r5
    5480:	0413      	lsls	r3, r2, #16
    5482:	d501      	bpl.n	5488 <bloomFilterAddressCheck+0x77c>
    5484:	f000 fc70 	bl	5d68 <bloomFilterAddressCheck+0x105c>
    5488:	1c2a      	adds	r2, r5, #0
    548a:	b295      	uxth	r5, r2
    548c:	b213      	sxth	r3, r2
    548e:	001f      	movs	r7, r3
    5490:	006b      	lsls	r3, r5, #1
    5492:	4d07      	ldr	r5, [pc, #28]	; (54b0 <bloomFilterAddressCheck+0x7a4>)
    5494:	0052      	lsls	r2, r2, #1
    5496:	405d      	eors	r5, r3
    5498:	b2ab      	uxth	r3, r5
    549a:	9305      	str	r3, [sp, #20]
    549c:	b293      	uxth	r3, r2
    549e:	4699      	mov	r9, r3
    54a0:	4663      	mov	r3, ip
    54a2:	4a04      	ldr	r2, [pc, #16]	; (54b4 <bloomFilterAddressCheck+0x7a8>)
    54a4:	4645      	mov	r5, r8
    54a6:	405a      	eors	r2, r3
    54a8:	466b      	mov	r3, sp
    54aa:	b292      	uxth	r2, r2
    54ac:	8a1b      	ldrh	r3, [r3, #16]
    54ae:	e003      	b.n	54b8 <bloomFilterAddressCheck+0x7ac>
    54b0:	00001021 	.word	0x00001021
    54b4:	ffff8005 	.word	0xffff8005
    54b8:	2d00      	cmp	r5, #0
    54ba:	da01      	bge.n	54c0 <bloomFilterAddressCheck+0x7b4>
    54bc:	f000 fc51 	bl	5d62 <bloomFilterAddressCheck+0x1056>
    54c0:	b29d      	uxth	r5, r3
    54c2:	4ae9      	ldr	r2, [pc, #932]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    54c4:	006d      	lsls	r5, r5, #1
    54c6:	406a      	eors	r2, r5
    54c8:	b212      	sxth	r2, r2
    54ca:	b295      	uxth	r5, r2
    54cc:	005a      	lsls	r2, r3, #1
    54ce:	b292      	uxth	r2, r2
    54d0:	041b      	lsls	r3, r3, #16
    54d2:	d501      	bpl.n	54d8 <bloomFilterAddressCheck+0x7cc>
    54d4:	f000 fc42 	bl	5d5c <bloomFilterAddressCheck+0x1050>
    54d8:	4be3      	ldr	r3, [pc, #908]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    54da:	b295      	uxth	r5, r2
    54dc:	006d      	lsls	r5, r5, #1
    54de:	405d      	eors	r5, r3
    54e0:	0053      	lsls	r3, r2, #1
    54e2:	b2ad      	uxth	r5, r5
    54e4:	b29b      	uxth	r3, r3
    54e6:	0412      	lsls	r2, r2, #16
    54e8:	d501      	bpl.n	54ee <bloomFilterAddressCheck+0x7e2>
    54ea:	f000 fc34 	bl	5d56 <bloomFilterAddressCheck+0x104a>
    54ee:	4ade      	ldr	r2, [pc, #888]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    54f0:	b29d      	uxth	r5, r3
    54f2:	006d      	lsls	r5, r5, #1
    54f4:	4055      	eors	r5, r2
    54f6:	005a      	lsls	r2, r3, #1
    54f8:	b2ad      	uxth	r5, r5
    54fa:	b292      	uxth	r2, r2
    54fc:	041b      	lsls	r3, r3, #16
    54fe:	d501      	bpl.n	5504 <bloomFilterAddressCheck+0x7f8>
    5500:	f000 fc26 	bl	5d50 <bloomFilterAddressCheck+0x1044>
    5504:	4bd8      	ldr	r3, [pc, #864]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5506:	b295      	uxth	r5, r2
    5508:	006d      	lsls	r5, r5, #1
    550a:	405d      	eors	r5, r3
    550c:	0053      	lsls	r3, r2, #1
    550e:	b2ad      	uxth	r5, r5
    5510:	b29b      	uxth	r3, r3
    5512:	0412      	lsls	r2, r2, #16
    5514:	d501      	bpl.n	551a <bloomFilterAddressCheck+0x80e>
    5516:	f000 fc18 	bl	5d4a <bloomFilterAddressCheck+0x103e>
    551a:	4ad3      	ldr	r2, [pc, #844]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    551c:	b29d      	uxth	r5, r3
    551e:	006d      	lsls	r5, r5, #1
    5520:	4055      	eors	r5, r2
    5522:	005a      	lsls	r2, r3, #1
    5524:	b2ad      	uxth	r5, r5
    5526:	b292      	uxth	r2, r2
    5528:	041b      	lsls	r3, r3, #16
    552a:	d501      	bpl.n	5530 <bloomFilterAddressCheck+0x824>
    552c:	f000 fc0a 	bl	5d44 <bloomFilterAddressCheck+0x1038>
    5530:	4bcd      	ldr	r3, [pc, #820]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5532:	b295      	uxth	r5, r2
    5534:	006d      	lsls	r5, r5, #1
    5536:	405d      	eors	r5, r3
    5538:	0053      	lsls	r3, r2, #1
    553a:	b2ad      	uxth	r5, r5
    553c:	b29b      	uxth	r3, r3
    553e:	0412      	lsls	r2, r2, #16
    5540:	d500      	bpl.n	5544 <bloomFilterAddressCheck+0x838>
    5542:	e3c1      	b.n	5cc8 <bloomFilterAddressCheck+0xfbc>
    5544:	b29a      	uxth	r2, r3
    5546:	4dc8      	ldr	r5, [pc, #800]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5548:	0052      	lsls	r2, r2, #1
    554a:	4055      	eors	r5, r2
    554c:	005a      	lsls	r2, r3, #1
    554e:	b2ad      	uxth	r5, r5
    5550:	b292      	uxth	r2, r2
    5552:	041b      	lsls	r3, r3, #16
    5554:	d500      	bpl.n	5558 <bloomFilterAddressCheck+0x84c>
    5556:	e3b5      	b.n	5cc4 <bloomFilterAddressCheck+0xfb8>
    5558:	4054      	eors	r4, r2
    555a:	b224      	sxth	r4, r4
    555c:	b2a2      	uxth	r2, r4
    555e:	4bc2      	ldr	r3, [pc, #776]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5560:	0052      	lsls	r2, r2, #1
    5562:	4053      	eors	r3, r2
    5564:	b29d      	uxth	r5, r3
    5566:	b293      	uxth	r3, r2
    5568:	2c00      	cmp	r4, #0
    556a:	da00      	bge.n	556e <bloomFilterAddressCheck+0x862>
    556c:	e3a8      	b.n	5cc0 <bloomFilterAddressCheck+0xfb4>
    556e:	4abe      	ldr	r2, [pc, #760]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5570:	b29c      	uxth	r4, r3
    5572:	0064      	lsls	r4, r4, #1
    5574:	4054      	eors	r4, r2
    5576:	005a      	lsls	r2, r3, #1
    5578:	b2a4      	uxth	r4, r4
    557a:	b292      	uxth	r2, r2
    557c:	041b      	lsls	r3, r3, #16
    557e:	d500      	bpl.n	5582 <bloomFilterAddressCheck+0x876>
    5580:	e39c      	b.n	5cbc <bloomFilterAddressCheck+0xfb0>
    5582:	4bb9      	ldr	r3, [pc, #740]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5584:	b294      	uxth	r4, r2
    5586:	0064      	lsls	r4, r4, #1
    5588:	405c      	eors	r4, r3
    558a:	0053      	lsls	r3, r2, #1
    558c:	b2a4      	uxth	r4, r4
    558e:	b29b      	uxth	r3, r3
    5590:	0412      	lsls	r2, r2, #16
    5592:	d500      	bpl.n	5596 <bloomFilterAddressCheck+0x88a>
    5594:	e390      	b.n	5cb8 <bloomFilterAddressCheck+0xfac>
    5596:	4ab4      	ldr	r2, [pc, #720]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5598:	b29c      	uxth	r4, r3
    559a:	0064      	lsls	r4, r4, #1
    559c:	4054      	eors	r4, r2
    559e:	005a      	lsls	r2, r3, #1
    55a0:	b2a4      	uxth	r4, r4
    55a2:	b292      	uxth	r2, r2
    55a4:	041b      	lsls	r3, r3, #16
    55a6:	d500      	bpl.n	55aa <bloomFilterAddressCheck+0x89e>
    55a8:	e384      	b.n	5cb4 <bloomFilterAddressCheck+0xfa8>
    55aa:	4baf      	ldr	r3, [pc, #700]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    55ac:	b294      	uxth	r4, r2
    55ae:	0064      	lsls	r4, r4, #1
    55b0:	405c      	eors	r4, r3
    55b2:	0053      	lsls	r3, r2, #1
    55b4:	b2a4      	uxth	r4, r4
    55b6:	b29b      	uxth	r3, r3
    55b8:	0412      	lsls	r2, r2, #16
    55ba:	d500      	bpl.n	55be <bloomFilterAddressCheck+0x8b2>
    55bc:	e378      	b.n	5cb0 <bloomFilterAddressCheck+0xfa4>
    55be:	4aaa      	ldr	r2, [pc, #680]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    55c0:	b29c      	uxth	r4, r3
    55c2:	0064      	lsls	r4, r4, #1
    55c4:	4054      	eors	r4, r2
    55c6:	005a      	lsls	r2, r3, #1
    55c8:	b2a4      	uxth	r4, r4
    55ca:	b292      	uxth	r2, r2
    55cc:	041b      	lsls	r3, r3, #16
    55ce:	d500      	bpl.n	55d2 <bloomFilterAddressCheck+0x8c6>
    55d0:	e36c      	b.n	5cac <bloomFilterAddressCheck+0xfa0>
    55d2:	4ba5      	ldr	r3, [pc, #660]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    55d4:	b294      	uxth	r4, r2
    55d6:	0064      	lsls	r4, r4, #1
    55d8:	405c      	eors	r4, r3
    55da:	0053      	lsls	r3, r2, #1
    55dc:	b2a4      	uxth	r4, r4
    55de:	b29b      	uxth	r3, r3
    55e0:	0412      	lsls	r2, r2, #16
    55e2:	d500      	bpl.n	55e6 <bloomFilterAddressCheck+0x8da>
    55e4:	e360      	b.n	5ca8 <bloomFilterAddressCheck+0xf9c>
    55e6:	b29a      	uxth	r2, r3
    55e8:	4c9f      	ldr	r4, [pc, #636]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    55ea:	0052      	lsls	r2, r2, #1
    55ec:	4054      	eors	r4, r2
    55ee:	005a      	lsls	r2, r3, #1
    55f0:	b2a4      	uxth	r4, r4
    55f2:	b292      	uxth	r2, r2
    55f4:	041b      	lsls	r3, r3, #16
    55f6:	d500      	bpl.n	55fa <bloomFilterAddressCheck+0x8ee>
    55f8:	e354      	b.n	5ca4 <bloomFilterAddressCheck+0xf98>
    55fa:	4050      	eors	r0, r2
    55fc:	b200      	sxth	r0, r0
    55fe:	b282      	uxth	r2, r0
    5600:	4b99      	ldr	r3, [pc, #612]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5602:	0052      	lsls	r2, r2, #1
    5604:	4053      	eors	r3, r2
    5606:	b29c      	uxth	r4, r3
    5608:	b293      	uxth	r3, r2
    560a:	2800      	cmp	r0, #0
    560c:	da00      	bge.n	5610 <bloomFilterAddressCheck+0x904>
    560e:	e347      	b.n	5ca0 <bloomFilterAddressCheck+0xf94>
    5610:	4a95      	ldr	r2, [pc, #596]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5612:	b298      	uxth	r0, r3
    5614:	0040      	lsls	r0, r0, #1
    5616:	4050      	eors	r0, r2
    5618:	005a      	lsls	r2, r3, #1
    561a:	b280      	uxth	r0, r0
    561c:	b292      	uxth	r2, r2
    561e:	041b      	lsls	r3, r3, #16
    5620:	d500      	bpl.n	5624 <bloomFilterAddressCheck+0x918>
    5622:	e33b      	b.n	5c9c <bloomFilterAddressCheck+0xf90>
    5624:	4b90      	ldr	r3, [pc, #576]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5626:	b290      	uxth	r0, r2
    5628:	0040      	lsls	r0, r0, #1
    562a:	4058      	eors	r0, r3
    562c:	0053      	lsls	r3, r2, #1
    562e:	b280      	uxth	r0, r0
    5630:	b29b      	uxth	r3, r3
    5632:	0412      	lsls	r2, r2, #16
    5634:	d500      	bpl.n	5638 <bloomFilterAddressCheck+0x92c>
    5636:	e32f      	b.n	5c98 <bloomFilterAddressCheck+0xf8c>
    5638:	4a8b      	ldr	r2, [pc, #556]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    563a:	b298      	uxth	r0, r3
    563c:	0040      	lsls	r0, r0, #1
    563e:	4050      	eors	r0, r2
    5640:	005a      	lsls	r2, r3, #1
    5642:	b280      	uxth	r0, r0
    5644:	b292      	uxth	r2, r2
    5646:	041b      	lsls	r3, r3, #16
    5648:	d500      	bpl.n	564c <bloomFilterAddressCheck+0x940>
    564a:	e323      	b.n	5c94 <bloomFilterAddressCheck+0xf88>
    564c:	4b86      	ldr	r3, [pc, #536]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    564e:	b290      	uxth	r0, r2
    5650:	0040      	lsls	r0, r0, #1
    5652:	4058      	eors	r0, r3
    5654:	0053      	lsls	r3, r2, #1
    5656:	b280      	uxth	r0, r0
    5658:	b29b      	uxth	r3, r3
    565a:	0412      	lsls	r2, r2, #16
    565c:	d500      	bpl.n	5660 <bloomFilterAddressCheck+0x954>
    565e:	e317      	b.n	5c90 <bloomFilterAddressCheck+0xf84>
    5660:	4a81      	ldr	r2, [pc, #516]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5662:	b298      	uxth	r0, r3
    5664:	0040      	lsls	r0, r0, #1
    5666:	4050      	eors	r0, r2
    5668:	005a      	lsls	r2, r3, #1
    566a:	b280      	uxth	r0, r0
    566c:	b292      	uxth	r2, r2
    566e:	041b      	lsls	r3, r3, #16
    5670:	d500      	bpl.n	5674 <bloomFilterAddressCheck+0x968>
    5672:	e30b      	b.n	5c8c <bloomFilterAddressCheck+0xf80>
    5674:	4b7c      	ldr	r3, [pc, #496]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5676:	b290      	uxth	r0, r2
    5678:	0040      	lsls	r0, r0, #1
    567a:	4058      	eors	r0, r3
    567c:	0053      	lsls	r3, r2, #1
    567e:	b280      	uxth	r0, r0
    5680:	b29b      	uxth	r3, r3
    5682:	0412      	lsls	r2, r2, #16
    5684:	d500      	bpl.n	5688 <bloomFilterAddressCheck+0x97c>
    5686:	e2ff      	b.n	5c88 <bloomFilterAddressCheck+0xf7c>
    5688:	b29a      	uxth	r2, r3
    568a:	4877      	ldr	r0, [pc, #476]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    568c:	0052      	lsls	r2, r2, #1
    568e:	4050      	eors	r0, r2
    5690:	005a      	lsls	r2, r3, #1
    5692:	b280      	uxth	r0, r0
    5694:	b292      	uxth	r2, r2
    5696:	041b      	lsls	r3, r3, #16
    5698:	d500      	bpl.n	569c <bloomFilterAddressCheck+0x990>
    569a:	e2f3      	b.n	5c84 <bloomFilterAddressCheck+0xf78>
    569c:	4051      	eors	r1, r2
    569e:	b209      	sxth	r1, r1
    56a0:	b28b      	uxth	r3, r1
    56a2:	4a71      	ldr	r2, [pc, #452]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    56a4:	005b      	lsls	r3, r3, #1
    56a6:	405a      	eors	r2, r3
    56a8:	b292      	uxth	r2, r2
    56aa:	2900      	cmp	r1, #0
    56ac:	da00      	bge.n	56b0 <bloomFilterAddressCheck+0x9a4>
    56ae:	e2e7      	b.n	5c80 <bloomFilterAddressCheck+0xf74>
    56b0:	4a6d      	ldr	r2, [pc, #436]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    56b2:	b299      	uxth	r1, r3
    56b4:	0049      	lsls	r1, r1, #1
    56b6:	4051      	eors	r1, r2
    56b8:	b289      	uxth	r1, r1
    56ba:	005a      	lsls	r2, r3, #1
    56bc:	041b      	lsls	r3, r3, #16
    56be:	d500      	bpl.n	56c2 <bloomFilterAddressCheck+0x9b6>
    56c0:	e2dc      	b.n	5c7c <bloomFilterAddressCheck+0xf70>
    56c2:	b291      	uxth	r1, r2
    56c4:	4b68      	ldr	r3, [pc, #416]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    56c6:	0049      	lsls	r1, r1, #1
    56c8:	404b      	eors	r3, r1
    56ca:	b29b      	uxth	r3, r3
    56cc:	0051      	lsls	r1, r2, #1
    56ce:	0412      	lsls	r2, r2, #16
    56d0:	d500      	bpl.n	56d4 <bloomFilterAddressCheck+0x9c8>
    56d2:	e2d1      	b.n	5c78 <bloomFilterAddressCheck+0xf6c>
    56d4:	b28a      	uxth	r2, r1
    56d6:	4b64      	ldr	r3, [pc, #400]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    56d8:	0052      	lsls	r2, r2, #1
    56da:	4053      	eors	r3, r2
    56dc:	b29b      	uxth	r3, r3
    56de:	004a      	lsls	r2, r1, #1
    56e0:	0409      	lsls	r1, r1, #16
    56e2:	d500      	bpl.n	56e6 <bloomFilterAddressCheck+0x9da>
    56e4:	e2c6      	b.n	5c74 <bloomFilterAddressCheck+0xf68>
    56e6:	b291      	uxth	r1, r2
    56e8:	4b5f      	ldr	r3, [pc, #380]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    56ea:	0049      	lsls	r1, r1, #1
    56ec:	404b      	eors	r3, r1
    56ee:	b29b      	uxth	r3, r3
    56f0:	0051      	lsls	r1, r2, #1
    56f2:	0412      	lsls	r2, r2, #16
    56f4:	d500      	bpl.n	56f8 <bloomFilterAddressCheck+0x9ec>
    56f6:	e2bb      	b.n	5c70 <bloomFilterAddressCheck+0xf64>
    56f8:	b28a      	uxth	r2, r1
    56fa:	4b5b      	ldr	r3, [pc, #364]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    56fc:	0052      	lsls	r2, r2, #1
    56fe:	4053      	eors	r3, r2
    5700:	b29b      	uxth	r3, r3
    5702:	004a      	lsls	r2, r1, #1
    5704:	0409      	lsls	r1, r1, #16
    5706:	d500      	bpl.n	570a <bloomFilterAddressCheck+0x9fe>
    5708:	e2b0      	b.n	5c6c <bloomFilterAddressCheck+0xf60>
    570a:	b291      	uxth	r1, r2
    570c:	4b56      	ldr	r3, [pc, #344]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    570e:	0049      	lsls	r1, r1, #1
    5710:	404b      	eors	r3, r1
    5712:	b29b      	uxth	r3, r3
    5714:	0051      	lsls	r1, r2, #1
    5716:	0412      	lsls	r2, r2, #16
    5718:	d500      	bpl.n	571c <bloomFilterAddressCheck+0xa10>
    571a:	e2a5      	b.n	5c68 <bloomFilterAddressCheck+0xf5c>
    571c:	b28a      	uxth	r2, r1
    571e:	4b52      	ldr	r3, [pc, #328]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5720:	0052      	lsls	r2, r2, #1
    5722:	4053      	eors	r3, r2
    5724:	b29b      	uxth	r3, r3
    5726:	004a      	lsls	r2, r1, #1
    5728:	0409      	lsls	r1, r1, #16
    572a:	d500      	bpl.n	572e <bloomFilterAddressCheck+0xa22>
    572c:	e29a      	b.n	5c64 <bloomFilterAddressCheck+0xf58>
    572e:	465b      	mov	r3, fp
    5730:	4053      	eors	r3, r2
    5732:	b21a      	sxth	r2, r3
    5734:	b293      	uxth	r3, r2
    5736:	494c      	ldr	r1, [pc, #304]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5738:	005b      	lsls	r3, r3, #1
    573a:	4059      	eors	r1, r3
    573c:	b289      	uxth	r1, r1
    573e:	2a00      	cmp	r2, #0
    5740:	da00      	bge.n	5744 <bloomFilterAddressCheck+0xa38>
    5742:	e28d      	b.n	5c60 <bloomFilterAddressCheck+0xf54>
    5744:	b299      	uxth	r1, r3
    5746:	4a48      	ldr	r2, [pc, #288]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5748:	0049      	lsls	r1, r1, #1
    574a:	404a      	eors	r2, r1
    574c:	b292      	uxth	r2, r2
    574e:	0059      	lsls	r1, r3, #1
    5750:	041b      	lsls	r3, r3, #16
    5752:	d500      	bpl.n	5756 <bloomFilterAddressCheck+0xa4a>
    5754:	e282      	b.n	5c5c <bloomFilterAddressCheck+0xf50>
    5756:	b28a      	uxth	r2, r1
    5758:	4b43      	ldr	r3, [pc, #268]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    575a:	0052      	lsls	r2, r2, #1
    575c:	4053      	eors	r3, r2
    575e:	b29b      	uxth	r3, r3
    5760:	004a      	lsls	r2, r1, #1
    5762:	0409      	lsls	r1, r1, #16
    5764:	d500      	bpl.n	5768 <bloomFilterAddressCheck+0xa5c>
    5766:	e277      	b.n	5c58 <bloomFilterAddressCheck+0xf4c>
    5768:	b291      	uxth	r1, r2
    576a:	4b3f      	ldr	r3, [pc, #252]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    576c:	0049      	lsls	r1, r1, #1
    576e:	404b      	eors	r3, r1
    5770:	b29b      	uxth	r3, r3
    5772:	0051      	lsls	r1, r2, #1
    5774:	0412      	lsls	r2, r2, #16
    5776:	d500      	bpl.n	577a <bloomFilterAddressCheck+0xa6e>
    5778:	e26c      	b.n	5c54 <bloomFilterAddressCheck+0xf48>
    577a:	b28a      	uxth	r2, r1
    577c:	4b3a      	ldr	r3, [pc, #232]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    577e:	0052      	lsls	r2, r2, #1
    5780:	4053      	eors	r3, r2
    5782:	b29b      	uxth	r3, r3
    5784:	004a      	lsls	r2, r1, #1
    5786:	0409      	lsls	r1, r1, #16
    5788:	d500      	bpl.n	578c <bloomFilterAddressCheck+0xa80>
    578a:	e261      	b.n	5c50 <bloomFilterAddressCheck+0xf44>
    578c:	b291      	uxth	r1, r2
    578e:	4b36      	ldr	r3, [pc, #216]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5790:	0049      	lsls	r1, r1, #1
    5792:	404b      	eors	r3, r1
    5794:	b29b      	uxth	r3, r3
    5796:	0051      	lsls	r1, r2, #1
    5798:	0412      	lsls	r2, r2, #16
    579a:	d500      	bpl.n	579e <bloomFilterAddressCheck+0xa92>
    579c:	e242      	b.n	5c24 <bloomFilterAddressCheck+0xf18>
    579e:	b28a      	uxth	r2, r1
    57a0:	4b31      	ldr	r3, [pc, #196]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    57a2:	0052      	lsls	r2, r2, #1
    57a4:	4053      	eors	r3, r2
    57a6:	b29b      	uxth	r3, r3
    57a8:	004a      	lsls	r2, r1, #1
    57aa:	0409      	lsls	r1, r1, #16
    57ac:	d500      	bpl.n	57b0 <bloomFilterAddressCheck+0xaa4>
    57ae:	e243      	b.n	5c38 <bloomFilterAddressCheck+0xf2c>
    57b0:	b291      	uxth	r1, r2
    57b2:	4b2d      	ldr	r3, [pc, #180]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    57b4:	0049      	lsls	r1, r1, #1
    57b6:	404b      	eors	r3, r1
    57b8:	b29b      	uxth	r3, r3
    57ba:	0055      	lsls	r5, r2, #1
    57bc:	0412      	lsls	r2, r2, #16
    57be:	d500      	bpl.n	57c2 <bloomFilterAddressCheck+0xab6>
    57c0:	e244      	b.n	5c4c <bloomFilterAddressCheck+0xf40>
    57c2:	9b01      	ldr	r3, [sp, #4]
    57c4:	4a28      	ldr	r2, [pc, #160]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    57c6:	406b      	eors	r3, r5
    57c8:	b21d      	sxth	r5, r3
    57ca:	b2ab      	uxth	r3, r5
    57cc:	005b      	lsls	r3, r3, #1
    57ce:	405a      	eors	r2, r3
    57d0:	b292      	uxth	r2, r2
    57d2:	2d00      	cmp	r5, #0
    57d4:	da00      	bge.n	57d8 <bloomFilterAddressCheck+0xacc>
    57d6:	e2a7      	b.n	5d28 <bloomFilterAddressCheck+0x101c>
    57d8:	b299      	uxth	r1, r3
    57da:	4a23      	ldr	r2, [pc, #140]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    57dc:	0049      	lsls	r1, r1, #1
    57de:	404a      	eors	r2, r1
    57e0:	b292      	uxth	r2, r2
    57e2:	0059      	lsls	r1, r3, #1
    57e4:	041b      	lsls	r3, r3, #16
    57e6:	d500      	bpl.n	57ea <bloomFilterAddressCheck+0xade>
    57e8:	e29c      	b.n	5d24 <bloomFilterAddressCheck+0x1018>
    57ea:	b28a      	uxth	r2, r1
    57ec:	4b1e      	ldr	r3, [pc, #120]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    57ee:	0052      	lsls	r2, r2, #1
    57f0:	4053      	eors	r3, r2
    57f2:	b29b      	uxth	r3, r3
    57f4:	004a      	lsls	r2, r1, #1
    57f6:	0409      	lsls	r1, r1, #16
    57f8:	d500      	bpl.n	57fc <bloomFilterAddressCheck+0xaf0>
    57fa:	e291      	b.n	5d20 <bloomFilterAddressCheck+0x1014>
    57fc:	b291      	uxth	r1, r2
    57fe:	4b1a      	ldr	r3, [pc, #104]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5800:	0049      	lsls	r1, r1, #1
    5802:	404b      	eors	r3, r1
    5804:	b29b      	uxth	r3, r3
    5806:	0051      	lsls	r1, r2, #1
    5808:	0412      	lsls	r2, r2, #16
    580a:	d500      	bpl.n	580e <bloomFilterAddressCheck+0xb02>
    580c:	e286      	b.n	5d1c <bloomFilterAddressCheck+0x1010>
    580e:	b28a      	uxth	r2, r1
    5810:	4b15      	ldr	r3, [pc, #84]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5812:	0052      	lsls	r2, r2, #1
    5814:	4053      	eors	r3, r2
    5816:	b29b      	uxth	r3, r3
    5818:	004a      	lsls	r2, r1, #1
    581a:	0409      	lsls	r1, r1, #16
    581c:	d500      	bpl.n	5820 <bloomFilterAddressCheck+0xb14>
    581e:	e27b      	b.n	5d18 <bloomFilterAddressCheck+0x100c>
    5820:	b291      	uxth	r1, r2
    5822:	4b11      	ldr	r3, [pc, #68]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5824:	0049      	lsls	r1, r1, #1
    5826:	404b      	eors	r3, r1
    5828:	b29b      	uxth	r3, r3
    582a:	0051      	lsls	r1, r2, #1
    582c:	0412      	lsls	r2, r2, #16
    582e:	d500      	bpl.n	5832 <bloomFilterAddressCheck+0xb26>
    5830:	e270      	b.n	5d14 <bloomFilterAddressCheck+0x1008>
    5832:	b28a      	uxth	r2, r1
    5834:	4b0c      	ldr	r3, [pc, #48]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5836:	0052      	lsls	r2, r2, #1
    5838:	4053      	eors	r3, r2
    583a:	b29b      	uxth	r3, r3
    583c:	004a      	lsls	r2, r1, #1
    583e:	0409      	lsls	r1, r1, #16
    5840:	d500      	bpl.n	5844 <bloomFilterAddressCheck+0xb38>
    5842:	e265      	b.n	5d10 <bloomFilterAddressCheck+0x1004>
    5844:	b291      	uxth	r1, r2
    5846:	4b08      	ldr	r3, [pc, #32]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    5848:	0049      	lsls	r1, r1, #1
    584a:	404b      	eors	r3, r1
    584c:	b29b      	uxth	r3, r3
    584e:	0055      	lsls	r5, r2, #1
    5850:	0412      	lsls	r2, r2, #16
    5852:	d500      	bpl.n	5856 <bloomFilterAddressCheck+0xb4a>
    5854:	e25a      	b.n	5d0c <bloomFilterAddressCheck+0x1000>
    5856:	9b02      	ldr	r3, [sp, #8]
    5858:	4a03      	ldr	r2, [pc, #12]	; (5868 <bloomFilterAddressCheck+0xb5c>)
    585a:	406b      	eors	r3, r5
    585c:	b21d      	sxth	r5, r3
    585e:	b2ab      	uxth	r3, r5
    5860:	005b      	lsls	r3, r3, #1
    5862:	405a      	eors	r2, r3
    5864:	b292      	uxth	r2, r2
    5866:	e001      	b.n	586c <bloomFilterAddressCheck+0xb60>
    5868:	ffff8005 	.word	0xffff8005
    586c:	2d00      	cmp	r5, #0
    586e:	da00      	bge.n	5872 <bloomFilterAddressCheck+0xb66>
    5870:	e24a      	b.n	5d08 <bloomFilterAddressCheck+0xffc>
    5872:	b299      	uxth	r1, r3
    5874:	4ae8      	ldr	r2, [pc, #928]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    5876:	0049      	lsls	r1, r1, #1
    5878:	404a      	eors	r2, r1
    587a:	b292      	uxth	r2, r2
    587c:	0059      	lsls	r1, r3, #1
    587e:	041b      	lsls	r3, r3, #16
    5880:	d500      	bpl.n	5884 <bloomFilterAddressCheck+0xb78>
    5882:	e23f      	b.n	5d04 <bloomFilterAddressCheck+0xff8>
    5884:	b28a      	uxth	r2, r1
    5886:	4be4      	ldr	r3, [pc, #912]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    5888:	0052      	lsls	r2, r2, #1
    588a:	4053      	eors	r3, r2
    588c:	b29b      	uxth	r3, r3
    588e:	004a      	lsls	r2, r1, #1
    5890:	0409      	lsls	r1, r1, #16
    5892:	d500      	bpl.n	5896 <bloomFilterAddressCheck+0xb8a>
    5894:	e234      	b.n	5d00 <bloomFilterAddressCheck+0xff4>
    5896:	b291      	uxth	r1, r2
    5898:	4bdf      	ldr	r3, [pc, #892]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    589a:	0049      	lsls	r1, r1, #1
    589c:	404b      	eors	r3, r1
    589e:	b29b      	uxth	r3, r3
    58a0:	0051      	lsls	r1, r2, #1
    58a2:	0412      	lsls	r2, r2, #16
    58a4:	d500      	bpl.n	58a8 <bloomFilterAddressCheck+0xb9c>
    58a6:	e229      	b.n	5cfc <bloomFilterAddressCheck+0xff0>
    58a8:	b28a      	uxth	r2, r1
    58aa:	4bdb      	ldr	r3, [pc, #876]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    58ac:	0052      	lsls	r2, r2, #1
    58ae:	4053      	eors	r3, r2
    58b0:	b29b      	uxth	r3, r3
    58b2:	004a      	lsls	r2, r1, #1
    58b4:	0409      	lsls	r1, r1, #16
    58b6:	d500      	bpl.n	58ba <bloomFilterAddressCheck+0xbae>
    58b8:	e21e      	b.n	5cf8 <bloomFilterAddressCheck+0xfec>
    58ba:	b291      	uxth	r1, r2
    58bc:	4bd6      	ldr	r3, [pc, #856]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    58be:	0049      	lsls	r1, r1, #1
    58c0:	404b      	eors	r3, r1
    58c2:	b29b      	uxth	r3, r3
    58c4:	0051      	lsls	r1, r2, #1
    58c6:	0412      	lsls	r2, r2, #16
    58c8:	d500      	bpl.n	58cc <bloomFilterAddressCheck+0xbc0>
    58ca:	e1ff      	b.n	5ccc <bloomFilterAddressCheck+0xfc0>
    58cc:	b28a      	uxth	r2, r1
    58ce:	4bd2      	ldr	r3, [pc, #840]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    58d0:	0052      	lsls	r2, r2, #1
    58d2:	4053      	eors	r3, r2
    58d4:	b29b      	uxth	r3, r3
    58d6:	0048      	lsls	r0, r1, #1
    58d8:	040a      	lsls	r2, r1, #16
    58da:	d500      	bpl.n	58de <bloomFilterAddressCheck+0xbd2>
    58dc:	e200      	b.n	5ce0 <bloomFilterAddressCheck+0xfd4>
    58de:	b282      	uxth	r2, r0
    58e0:	4bcd      	ldr	r3, [pc, #820]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    58e2:	0052      	lsls	r2, r2, #1
    58e4:	4053      	eors	r3, r2
    58e6:	b29b      	uxth	r3, r3
    58e8:	0042      	lsls	r2, r0, #1
    58ea:	0401      	lsls	r1, r0, #16
    58ec:	d500      	bpl.n	58f0 <bloomFilterAddressCheck+0xbe4>
    58ee:	e201      	b.n	5cf4 <bloomFilterAddressCheck+0xfe8>
    58f0:	4653      	mov	r3, sl
    58f2:	4053      	eors	r3, r2
    58f4:	b21a      	sxth	r2, r3
    58f6:	b291      	uxth	r1, r2
    58f8:	4bc7      	ldr	r3, [pc, #796]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    58fa:	0049      	lsls	r1, r1, #1
    58fc:	404b      	eors	r3, r1
    58fe:	b298      	uxth	r0, r3
    5900:	b28b      	uxth	r3, r1
    5902:	2a00      	cmp	r2, #0
    5904:	da00      	bge.n	5908 <bloomFilterAddressCheck+0xbfc>
    5906:	e21b      	b.n	5d40 <bloomFilterAddressCheck+0x1034>
    5908:	4ac3      	ldr	r2, [pc, #780]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    590a:	b299      	uxth	r1, r3
    590c:	0049      	lsls	r1, r1, #1
    590e:	4051      	eors	r1, r2
    5910:	005a      	lsls	r2, r3, #1
    5912:	b289      	uxth	r1, r1
    5914:	b292      	uxth	r2, r2
    5916:	041b      	lsls	r3, r3, #16
    5918:	d500      	bpl.n	591c <bloomFilterAddressCheck+0xc10>
    591a:	e20f      	b.n	5d3c <bloomFilterAddressCheck+0x1030>
    591c:	4bbe      	ldr	r3, [pc, #760]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    591e:	b291      	uxth	r1, r2
    5920:	0049      	lsls	r1, r1, #1
    5922:	4059      	eors	r1, r3
    5924:	0053      	lsls	r3, r2, #1
    5926:	b289      	uxth	r1, r1
    5928:	b29b      	uxth	r3, r3
    592a:	0412      	lsls	r2, r2, #16
    592c:	d500      	bpl.n	5930 <bloomFilterAddressCheck+0xc24>
    592e:	e203      	b.n	5d38 <bloomFilterAddressCheck+0x102c>
    5930:	4ab9      	ldr	r2, [pc, #740]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    5932:	b299      	uxth	r1, r3
    5934:	0049      	lsls	r1, r1, #1
    5936:	4051      	eors	r1, r2
    5938:	005a      	lsls	r2, r3, #1
    593a:	b289      	uxth	r1, r1
    593c:	b292      	uxth	r2, r2
    593e:	041b      	lsls	r3, r3, #16
    5940:	d500      	bpl.n	5944 <bloomFilterAddressCheck+0xc38>
    5942:	e1f7      	b.n	5d34 <bloomFilterAddressCheck+0x1028>
    5944:	4bb4      	ldr	r3, [pc, #720]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    5946:	b291      	uxth	r1, r2
    5948:	0049      	lsls	r1, r1, #1
    594a:	4059      	eors	r1, r3
    594c:	0053      	lsls	r3, r2, #1
    594e:	b289      	uxth	r1, r1
    5950:	b29b      	uxth	r3, r3
    5952:	0412      	lsls	r2, r2, #16
    5954:	d500      	bpl.n	5958 <bloomFilterAddressCheck+0xc4c>
    5956:	e1eb      	b.n	5d30 <bloomFilterAddressCheck+0x1024>
    5958:	4aaf      	ldr	r2, [pc, #700]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    595a:	b299      	uxth	r1, r3
    595c:	0049      	lsls	r1, r1, #1
    595e:	4051      	eors	r1, r2
    5960:	005a      	lsls	r2, r3, #1
    5962:	b289      	uxth	r1, r1
    5964:	b292      	uxth	r2, r2
    5966:	041b      	lsls	r3, r3, #16
    5968:	d500      	bpl.n	596c <bloomFilterAddressCheck+0xc60>
    596a:	e1df      	b.n	5d2c <bloomFilterAddressCheck+0x1020>
    596c:	b293      	uxth	r3, r2
    596e:	4caa      	ldr	r4, [pc, #680]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    5970:	005b      	lsls	r3, r3, #1
    5972:	405c      	eors	r4, r3
    5974:	b2a1      	uxth	r1, r4
    5976:	0054      	lsls	r4, r2, #1
    5978:	b2a4      	uxth	r4, r4
    597a:	0413      	lsls	r3, r2, #16
    597c:	d500      	bpl.n	5980 <bloomFilterAddressCheck+0xc74>
    597e:	e149      	b.n	5c14 <bloomFilterAddressCheck+0xf08>
    5980:	b223      	sxth	r3, r4
    5982:	b2a2      	uxth	r2, r4
    5984:	469b      	mov	fp, r3
    5986:	4ba4      	ldr	r3, [pc, #656]	; (5c18 <bloomFilterAddressCheck+0xf0c>)
    5988:	0052      	lsls	r2, r2, #1
    598a:	4053      	eors	r3, r2
    598c:	00f5      	lsls	r5, r6, #3
    598e:	b29b      	uxth	r3, r3
    5990:	0064      	lsls	r4, r4, #1
    5992:	3d01      	subs	r5, #1
    5994:	4698      	mov	r8, r3
    5996:	b2a4      	uxth	r4, r4
    5998:	b2ed      	uxtb	r5, r5
    599a:	2f00      	cmp	r7, #0
    599c:	da00      	bge.n	59a0 <bloomFilterAddressCheck+0xc94>
    599e:	e136      	b.n	5c0e <bloomFilterAddressCheck+0xf02>
    59a0:	4648      	mov	r0, r9
    59a2:	4b9e      	ldr	r3, [pc, #632]	; (5c1c <bloomFilterAddressCheck+0xf10>)
    59a4:	b280      	uxth	r0, r0
    59a6:	0029      	movs	r1, r5
    59a8:	469a      	mov	sl, r3
    59aa:	4798      	blx	r3
    59ac:	465b      	mov	r3, fp
    59ae:	4689      	mov	r9, r1
    59b0:	2b00      	cmp	r3, #0
    59b2:	da00      	bge.n	59b6 <bloomFilterAddressCheck+0xcaa>
    59b4:	e129      	b.n	5c0a <bloomFilterAddressCheck+0xefe>
    59b6:	b2a0      	uxth	r0, r4
    59b8:	0029      	movs	r1, r5
    59ba:	47d0      	blx	sl
    59bc:	b2cb      	uxtb	r3, r1
    59be:	08db      	lsrs	r3, r3, #3
    59c0:	9f03      	ldr	r7, [sp, #12]
    59c2:	3301      	adds	r3, #1
    59c4:	1af3      	subs	r3, r6, r3
    59c6:	466a      	mov	r2, sp
    59c8:	5cf8      	ldrb	r0, [r7, r3]
    59ca:	464b      	mov	r3, r9
    59cc:	7113      	strb	r3, [r2, #4]
    59ce:	7913      	ldrb	r3, [r2, #4]
    59d0:	2201      	movs	r2, #1
    59d2:	08db      	lsrs	r3, r3, #3
    59d4:	3301      	adds	r3, #1
    59d6:	1af6      	subs	r6, r6, r3
    59d8:	2407      	movs	r4, #7
    59da:	464b      	mov	r3, r9
    59dc:	0015      	movs	r5, r2
    59de:	4023      	ands	r3, r4
    59e0:	409d      	lsls	r5, r3
    59e2:	5dbb      	ldrb	r3, [r7, r6]
    59e4:	421d      	tst	r5, r3
    59e6:	d006      	beq.n	59f6 <bloomFilterAddressCheck+0xcea>
    59e8:	4021      	ands	r1, r4
    59ea:	408a      	lsls	r2, r1
    59ec:	4002      	ands	r2, r0
    59ee:	1e50      	subs	r0, r2, #1
    59f0:	4182      	sbcs	r2, r0
    59f2:	b2d3      	uxtb	r3, r2
    59f4:	9300      	str	r3, [sp, #0]
    59f6:	9800      	ldr	r0, [sp, #0]
    59f8:	b007      	add	sp, #28
    59fa:	bc3c      	pop	{r2, r3, r4, r5}
    59fc:	4690      	mov	r8, r2
    59fe:	4699      	mov	r9, r3
    5a00:	46a2      	mov	sl, r4
    5a02:	46ab      	mov	fp, r5
    5a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a06:	1c1a      	adds	r2, r3, #0
    5a08:	e4ef      	b.n	53ea <bloomFilterAddressCheck+0x6de>
    5a0a:	1c08      	adds	r0, r1, #0
    5a0c:	f7ff f9a2 	bl	4d54 <bloomFilterAddressCheck+0x48>
    5a10:	1c0c      	adds	r4, r1, #0
    5a12:	b2a0      	uxth	r0, r4
    5a14:	4982      	ldr	r1, [pc, #520]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5a16:	0040      	lsls	r0, r0, #1
    5a18:	4041      	eors	r1, r0
    5a1a:	b289      	uxth	r1, r1
    5a1c:	0060      	lsls	r0, r4, #1
    5a1e:	0423      	lsls	r3, r4, #16
    5a20:	d401      	bmi.n	5a26 <bloomFilterAddressCheck+0xd1a>
    5a22:	f7ff f9ac 	bl	4d7e <bloomFilterAddressCheck+0x72>
    5a26:	1c08      	adds	r0, r1, #0
    5a28:	b284      	uxth	r4, r0
    5a2a:	497d      	ldr	r1, [pc, #500]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5a2c:	0064      	lsls	r4, r4, #1
    5a2e:	4061      	eors	r1, r4
    5a30:	b289      	uxth	r1, r1
    5a32:	0044      	lsls	r4, r0, #1
    5a34:	0403      	lsls	r3, r0, #16
    5a36:	d401      	bmi.n	5a3c <bloomFilterAddressCheck+0xd30>
    5a38:	f7ff f9ab 	bl	4d92 <bloomFilterAddressCheck+0x86>
    5a3c:	1c0c      	adds	r4, r1, #0
    5a3e:	b2a0      	uxth	r0, r4
    5a40:	4977      	ldr	r1, [pc, #476]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5a42:	0040      	lsls	r0, r0, #1
    5a44:	4041      	eors	r1, r0
    5a46:	b289      	uxth	r1, r1
    5a48:	0060      	lsls	r0, r4, #1
    5a4a:	0423      	lsls	r3, r4, #16
    5a4c:	d401      	bmi.n	5a52 <bloomFilterAddressCheck+0xd46>
    5a4e:	f7ff f9aa 	bl	4da6 <bloomFilterAddressCheck+0x9a>
    5a52:	1c08      	adds	r0, r1, #0
    5a54:	b284      	uxth	r4, r0
    5a56:	4972      	ldr	r1, [pc, #456]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5a58:	0064      	lsls	r4, r4, #1
    5a5a:	4061      	eors	r1, r4
    5a5c:	b289      	uxth	r1, r1
    5a5e:	0044      	lsls	r4, r0, #1
    5a60:	0403      	lsls	r3, r0, #16
    5a62:	d401      	bmi.n	5a68 <bloomFilterAddressCheck+0xd5c>
    5a64:	f7ff f9a9 	bl	4dba <bloomFilterAddressCheck+0xae>
    5a68:	1c0c      	adds	r4, r1, #0
    5a6a:	b2a0      	uxth	r0, r4
    5a6c:	496c      	ldr	r1, [pc, #432]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5a6e:	0040      	lsls	r0, r0, #1
    5a70:	4041      	eors	r1, r0
    5a72:	b289      	uxth	r1, r1
    5a74:	0060      	lsls	r0, r4, #1
    5a76:	0423      	lsls	r3, r4, #16
    5a78:	d401      	bmi.n	5a7e <bloomFilterAddressCheck+0xd72>
    5a7a:	f7ff f9a8 	bl	4dce <bloomFilterAddressCheck+0xc2>
    5a7e:	1c08      	adds	r0, r1, #0
    5a80:	f7ff f9a5 	bl	4dce <bloomFilterAddressCheck+0xc2>
    5a84:	1c0d      	adds	r5, r1, #0
    5a86:	f7ff f9af 	bl	4de8 <bloomFilterAddressCheck+0xdc>
    5a8a:	1c01      	adds	r1, r0, #0
    5a8c:	b28d      	uxth	r5, r1
    5a8e:	4864      	ldr	r0, [pc, #400]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5a90:	006d      	lsls	r5, r5, #1
    5a92:	4045      	eors	r5, r0
    5a94:	b2ad      	uxth	r5, r5
    5a96:	0048      	lsls	r0, r1, #1
    5a98:	040b      	lsls	r3, r1, #16
    5a9a:	d401      	bmi.n	5aa0 <bloomFilterAddressCheck+0xd94>
    5a9c:	f7ff f9b9 	bl	4e12 <bloomFilterAddressCheck+0x106>
    5aa0:	1c28      	adds	r0, r5, #0
    5aa2:	b285      	uxth	r5, r0
    5aa4:	495e      	ldr	r1, [pc, #376]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5aa6:	006d      	lsls	r5, r5, #1
    5aa8:	4069      	eors	r1, r5
    5aaa:	b289      	uxth	r1, r1
    5aac:	0045      	lsls	r5, r0, #1
    5aae:	0403      	lsls	r3, r0, #16
    5ab0:	d401      	bmi.n	5ab6 <bloomFilterAddressCheck+0xdaa>
    5ab2:	f7ff f9b8 	bl	4e26 <bloomFilterAddressCheck+0x11a>
    5ab6:	1c0d      	adds	r5, r1, #0
    5ab8:	b2a8      	uxth	r0, r5
    5aba:	4959      	ldr	r1, [pc, #356]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5abc:	0040      	lsls	r0, r0, #1
    5abe:	4041      	eors	r1, r0
    5ac0:	b289      	uxth	r1, r1
    5ac2:	0068      	lsls	r0, r5, #1
    5ac4:	042b      	lsls	r3, r5, #16
    5ac6:	d401      	bmi.n	5acc <bloomFilterAddressCheck+0xdc0>
    5ac8:	f7ff f9b7 	bl	4e3a <bloomFilterAddressCheck+0x12e>
    5acc:	1c08      	adds	r0, r1, #0
    5ace:	b285      	uxth	r5, r0
    5ad0:	4953      	ldr	r1, [pc, #332]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5ad2:	006d      	lsls	r5, r5, #1
    5ad4:	4069      	eors	r1, r5
    5ad6:	b289      	uxth	r1, r1
    5ad8:	0045      	lsls	r5, r0, #1
    5ada:	0403      	lsls	r3, r0, #16
    5adc:	d401      	bmi.n	5ae2 <bloomFilterAddressCheck+0xdd6>
    5ade:	f7ff f9b6 	bl	4e4e <bloomFilterAddressCheck+0x142>
    5ae2:	1c0d      	adds	r5, r1, #0
    5ae4:	b2a8      	uxth	r0, r5
    5ae6:	494e      	ldr	r1, [pc, #312]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5ae8:	0040      	lsls	r0, r0, #1
    5aea:	4041      	eors	r1, r0
    5aec:	b289      	uxth	r1, r1
    5aee:	0068      	lsls	r0, r5, #1
    5af0:	042b      	lsls	r3, r5, #16
    5af2:	d401      	bmi.n	5af8 <bloomFilterAddressCheck+0xdec>
    5af4:	f7ff f9b5 	bl	4e62 <bloomFilterAddressCheck+0x156>
    5af8:	1c08      	adds	r0, r1, #0
    5afa:	b285      	uxth	r5, r0
    5afc:	4948      	ldr	r1, [pc, #288]	; (5c20 <bloomFilterAddressCheck+0xf14>)
    5afe:	006d      	lsls	r5, r5, #1
    5b00:	4069      	eors	r1, r5
    5b02:	b289      	uxth	r1, r1
    5b04:	0045      	lsls	r5, r0, #1
    5b06:	0403      	lsls	r3, r0, #16
    5b08:	d401      	bmi.n	5b0e <bloomFilterAddressCheck+0xe02>
    5b0a:	f7ff f9b4 	bl	4e76 <bloomFilterAddressCheck+0x16a>
    5b0e:	1c0d      	adds	r5, r1, #0
    5b10:	f7ff f9b1 	bl	4e76 <bloomFilterAddressCheck+0x16a>
    5b14:	4689      	mov	r9, r1
    5b16:	f7ff f9bc 	bl	4e92 <bloomFilterAddressCheck+0x186>
    5b1a:	4651      	mov	r1, sl
    5b1c:	f7ff f9c9 	bl	4eb2 <bloomFilterAddressCheck+0x1a6>
    5b20:	464d      	mov	r5, r9
    5b22:	f7ff f9d3 	bl	4ecc <bloomFilterAddressCheck+0x1c0>
    5b26:	4689      	mov	r9, r1
    5b28:	f7ff f9dd 	bl	4ee6 <bloomFilterAddressCheck+0x1da>
    5b2c:	1c0d      	adds	r5, r1, #0
    5b2e:	f7ff f9e9 	bl	4f04 <bloomFilterAddressCheck+0x1f8>
    5b32:	4689      	mov	r9, r1
    5b34:	f7ff f9f3 	bl	4f1e <bloomFilterAddressCheck+0x212>
    5b38:	1c0d      	adds	r5, r1, #0
    5b3a:	f7ff f9ff 	bl	4f3c <bloomFilterAddressCheck+0x230>
    5b3e:	468a      	mov	sl, r1
    5b40:	f7ff fa09 	bl	4f56 <bloomFilterAddressCheck+0x24a>
    5b44:	464d      	mov	r5, r9
    5b46:	f7ff fa19 	bl	4f7c <bloomFilterAddressCheck+0x270>
    5b4a:	4655      	mov	r5, sl
    5b4c:	f7ff fa26 	bl	4f9c <bloomFilterAddressCheck+0x290>
    5b50:	46d1      	mov	r9, sl
    5b52:	f7ff fa36 	bl	4fc2 <bloomFilterAddressCheck+0x2b6>
    5b56:	46aa      	mov	sl, r5
    5b58:	f7ff fa43 	bl	4fe2 <bloomFilterAddressCheck+0x2d6>
    5b5c:	46a9      	mov	r9, r5
    5b5e:	f7ff fa50 	bl	5002 <bloomFilterAddressCheck+0x2f6>
    5b62:	46aa      	mov	sl, r5
    5b64:	f7ff fa5d 	bl	5022 <bloomFilterAddressCheck+0x316>
    5b68:	46a9      	mov	r9, r5
    5b6a:	f7ff fa6a 	bl	5042 <bloomFilterAddressCheck+0x336>
    5b6e:	46aa      	mov	sl, r5
    5b70:	f7ff fa77 	bl	5062 <bloomFilterAddressCheck+0x356>
    5b74:	464d      	mov	r5, r9
    5b76:	f7ff fa87 	bl	5088 <bloomFilterAddressCheck+0x37c>
    5b7a:	4655      	mov	r5, sl
    5b7c:	f7ff fa99 	bl	50b2 <bloomFilterAddressCheck+0x3a6>
    5b80:	46d1      	mov	r9, sl
    5b82:	f7ff faa7 	bl	50d4 <bloomFilterAddressCheck+0x3c8>
    5b86:	46aa      	mov	sl, r5
    5b88:	f7ff faba 	bl	5100 <bloomFilterAddressCheck+0x3f4>
    5b8c:	46a9      	mov	r9, r5
    5b8e:	f7ff fac7 	bl	5120 <bloomFilterAddressCheck+0x414>
    5b92:	46aa      	mov	sl, r5
    5b94:	f7ff fad4 	bl	5140 <bloomFilterAddressCheck+0x434>
    5b98:	46a9      	mov	r9, r5
    5b9a:	f7ff fae1 	bl	5160 <bloomFilterAddressCheck+0x454>
    5b9e:	46aa      	mov	sl, r5
    5ba0:	f7ff faee 	bl	5180 <bloomFilterAddressCheck+0x474>
    5ba4:	464d      	mov	r5, r9
    5ba6:	f7ff fafe 	bl	51a6 <bloomFilterAddressCheck+0x49a>
    5baa:	4655      	mov	r5, sl
    5bac:	f7ff fb10 	bl	51d0 <bloomFilterAddressCheck+0x4c4>
    5bb0:	46d1      	mov	r9, sl
    5bb2:	f7ff fb1e 	bl	51f2 <bloomFilterAddressCheck+0x4e6>
    5bb6:	46aa      	mov	sl, r5
    5bb8:	f7ff fb2b 	bl	5212 <bloomFilterAddressCheck+0x506>
    5bbc:	46a9      	mov	r9, r5
    5bbe:	f7ff fb38 	bl	5232 <bloomFilterAddressCheck+0x526>
    5bc2:	46aa      	mov	sl, r5
    5bc4:	f7ff fb45 	bl	5252 <bloomFilterAddressCheck+0x546>
    5bc8:	46a9      	mov	r9, r5
    5bca:	f7ff fb52 	bl	5272 <bloomFilterAddressCheck+0x566>
    5bce:	46aa      	mov	sl, r5
    5bd0:	f7ff fb5f 	bl	5292 <bloomFilterAddressCheck+0x586>
    5bd4:	464d      	mov	r5, r9
    5bd6:	f7ff fb6f 	bl	52b8 <bloomFilterAddressCheck+0x5ac>
    5bda:	4655      	mov	r5, sl
    5bdc:	f7ff fb81 	bl	52e2 <bloomFilterAddressCheck+0x5d6>
    5be0:	46ca      	mov	sl, r9
    5be2:	f7ff fb8f 	bl	5304 <bloomFilterAddressCheck+0x5f8>
    5be6:	46a9      	mov	r9, r5
    5be8:	f7ff fb9c 	bl	5324 <bloomFilterAddressCheck+0x618>
    5bec:	46aa      	mov	sl, r5
    5bee:	f7ff fba9 	bl	5344 <bloomFilterAddressCheck+0x638>
    5bf2:	46a9      	mov	r9, r5
    5bf4:	f7ff fbb6 	bl	5364 <bloomFilterAddressCheck+0x658>
    5bf8:	46aa      	mov	sl, r5
    5bfa:	f7ff fbc3 	bl	5384 <bloomFilterAddressCheck+0x678>
    5bfe:	46a9      	mov	r9, r5
    5c00:	f7ff fbd0 	bl	53a4 <bloomFilterAddressCheck+0x698>
    5c04:	1c2a      	adds	r2, r5, #0
    5c06:	f7ff fbdf 	bl	53c8 <bloomFilterAddressCheck+0x6bc>
    5c0a:	4644      	mov	r4, r8
    5c0c:	e6d3      	b.n	59b6 <bloomFilterAddressCheck+0xcaa>
    5c0e:	466b      	mov	r3, sp
    5c10:	8a98      	ldrh	r0, [r3, #20]
    5c12:	e6c6      	b.n	59a2 <bloomFilterAddressCheck+0xc96>
    5c14:	1c0c      	adds	r4, r1, #0
    5c16:	e6b3      	b.n	5980 <bloomFilterAddressCheck+0xc74>
    5c18:	ffff8005 	.word	0xffff8005
    5c1c:	000074c5 	.word	0x000074c5
    5c20:	00001021 	.word	0x00001021
    5c24:	1c19      	adds	r1, r3, #0
    5c26:	b28a      	uxth	r2, r1
    5c28:	4b52      	ldr	r3, [pc, #328]	; (5d74 <bloomFilterAddressCheck+0x1068>)
    5c2a:	0052      	lsls	r2, r2, #1
    5c2c:	4053      	eors	r3, r2
    5c2e:	b29b      	uxth	r3, r3
    5c30:	004a      	lsls	r2, r1, #1
    5c32:	0409      	lsls	r1, r1, #16
    5c34:	d400      	bmi.n	5c38 <bloomFilterAddressCheck+0xf2c>
    5c36:	e5bb      	b.n	57b0 <bloomFilterAddressCheck+0xaa4>
    5c38:	1c1a      	adds	r2, r3, #0
    5c3a:	b291      	uxth	r1, r2
    5c3c:	4b4d      	ldr	r3, [pc, #308]	; (5d74 <bloomFilterAddressCheck+0x1068>)
    5c3e:	0049      	lsls	r1, r1, #1
    5c40:	404b      	eors	r3, r1
    5c42:	b29b      	uxth	r3, r3
    5c44:	0055      	lsls	r5, r2, #1
    5c46:	0412      	lsls	r2, r2, #16
    5c48:	d400      	bmi.n	5c4c <bloomFilterAddressCheck+0xf40>
    5c4a:	e5ba      	b.n	57c2 <bloomFilterAddressCheck+0xab6>
    5c4c:	1c1d      	adds	r5, r3, #0
    5c4e:	e5b8      	b.n	57c2 <bloomFilterAddressCheck+0xab6>
    5c50:	1c1a      	adds	r2, r3, #0
    5c52:	e59b      	b.n	578c <bloomFilterAddressCheck+0xa80>
    5c54:	1c19      	adds	r1, r3, #0
    5c56:	e590      	b.n	577a <bloomFilterAddressCheck+0xa6e>
    5c58:	1c1a      	adds	r2, r3, #0
    5c5a:	e585      	b.n	5768 <bloomFilterAddressCheck+0xa5c>
    5c5c:	1c11      	adds	r1, r2, #0
    5c5e:	e57a      	b.n	5756 <bloomFilterAddressCheck+0xa4a>
    5c60:	1c0b      	adds	r3, r1, #0
    5c62:	e56f      	b.n	5744 <bloomFilterAddressCheck+0xa38>
    5c64:	1c1a      	adds	r2, r3, #0
    5c66:	e562      	b.n	572e <bloomFilterAddressCheck+0xa22>
    5c68:	1c19      	adds	r1, r3, #0
    5c6a:	e557      	b.n	571c <bloomFilterAddressCheck+0xa10>
    5c6c:	1c1a      	adds	r2, r3, #0
    5c6e:	e54c      	b.n	570a <bloomFilterAddressCheck+0x9fe>
    5c70:	1c19      	adds	r1, r3, #0
    5c72:	e541      	b.n	56f8 <bloomFilterAddressCheck+0x9ec>
    5c74:	1c1a      	adds	r2, r3, #0
    5c76:	e536      	b.n	56e6 <bloomFilterAddressCheck+0x9da>
    5c78:	1c19      	adds	r1, r3, #0
    5c7a:	e52b      	b.n	56d4 <bloomFilterAddressCheck+0x9c8>
    5c7c:	1c0a      	adds	r2, r1, #0
    5c7e:	e520      	b.n	56c2 <bloomFilterAddressCheck+0x9b6>
    5c80:	1c13      	adds	r3, r2, #0
    5c82:	e515      	b.n	56b0 <bloomFilterAddressCheck+0x9a4>
    5c84:	1c02      	adds	r2, r0, #0
    5c86:	e509      	b.n	569c <bloomFilterAddressCheck+0x990>
    5c88:	1c03      	adds	r3, r0, #0
    5c8a:	e4fd      	b.n	5688 <bloomFilterAddressCheck+0x97c>
    5c8c:	1c02      	adds	r2, r0, #0
    5c8e:	e4f1      	b.n	5674 <bloomFilterAddressCheck+0x968>
    5c90:	1c03      	adds	r3, r0, #0
    5c92:	e4e5      	b.n	5660 <bloomFilterAddressCheck+0x954>
    5c94:	1c02      	adds	r2, r0, #0
    5c96:	e4d9      	b.n	564c <bloomFilterAddressCheck+0x940>
    5c98:	1c03      	adds	r3, r0, #0
    5c9a:	e4cd      	b.n	5638 <bloomFilterAddressCheck+0x92c>
    5c9c:	1c02      	adds	r2, r0, #0
    5c9e:	e4c1      	b.n	5624 <bloomFilterAddressCheck+0x918>
    5ca0:	1c23      	adds	r3, r4, #0
    5ca2:	e4b5      	b.n	5610 <bloomFilterAddressCheck+0x904>
    5ca4:	1c22      	adds	r2, r4, #0
    5ca6:	e4a8      	b.n	55fa <bloomFilterAddressCheck+0x8ee>
    5ca8:	1c23      	adds	r3, r4, #0
    5caa:	e49c      	b.n	55e6 <bloomFilterAddressCheck+0x8da>
    5cac:	1c22      	adds	r2, r4, #0
    5cae:	e490      	b.n	55d2 <bloomFilterAddressCheck+0x8c6>
    5cb0:	1c23      	adds	r3, r4, #0
    5cb2:	e484      	b.n	55be <bloomFilterAddressCheck+0x8b2>
    5cb4:	1c22      	adds	r2, r4, #0
    5cb6:	e478      	b.n	55aa <bloomFilterAddressCheck+0x89e>
    5cb8:	1c23      	adds	r3, r4, #0
    5cba:	e46c      	b.n	5596 <bloomFilterAddressCheck+0x88a>
    5cbc:	1c22      	adds	r2, r4, #0
    5cbe:	e460      	b.n	5582 <bloomFilterAddressCheck+0x876>
    5cc0:	1c2b      	adds	r3, r5, #0
    5cc2:	e454      	b.n	556e <bloomFilterAddressCheck+0x862>
    5cc4:	1c2a      	adds	r2, r5, #0
    5cc6:	e447      	b.n	5558 <bloomFilterAddressCheck+0x84c>
    5cc8:	1c2b      	adds	r3, r5, #0
    5cca:	e43b      	b.n	5544 <bloomFilterAddressCheck+0x838>
    5ccc:	1c19      	adds	r1, r3, #0
    5cce:	b28a      	uxth	r2, r1
    5cd0:	4b28      	ldr	r3, [pc, #160]	; (5d74 <bloomFilterAddressCheck+0x1068>)
    5cd2:	0052      	lsls	r2, r2, #1
    5cd4:	4053      	eors	r3, r2
    5cd6:	b29b      	uxth	r3, r3
    5cd8:	0048      	lsls	r0, r1, #1
    5cda:	040a      	lsls	r2, r1, #16
    5cdc:	d400      	bmi.n	5ce0 <bloomFilterAddressCheck+0xfd4>
    5cde:	e5fe      	b.n	58de <bloomFilterAddressCheck+0xbd2>
    5ce0:	1c18      	adds	r0, r3, #0
    5ce2:	b282      	uxth	r2, r0
    5ce4:	4b23      	ldr	r3, [pc, #140]	; (5d74 <bloomFilterAddressCheck+0x1068>)
    5ce6:	0052      	lsls	r2, r2, #1
    5ce8:	4053      	eors	r3, r2
    5cea:	b29b      	uxth	r3, r3
    5cec:	0042      	lsls	r2, r0, #1
    5cee:	0401      	lsls	r1, r0, #16
    5cf0:	d400      	bmi.n	5cf4 <bloomFilterAddressCheck+0xfe8>
    5cf2:	e5fd      	b.n	58f0 <bloomFilterAddressCheck+0xbe4>
    5cf4:	1c1a      	adds	r2, r3, #0
    5cf6:	e5fb      	b.n	58f0 <bloomFilterAddressCheck+0xbe4>
    5cf8:	1c1a      	adds	r2, r3, #0
    5cfa:	e5de      	b.n	58ba <bloomFilterAddressCheck+0xbae>
    5cfc:	1c19      	adds	r1, r3, #0
    5cfe:	e5d3      	b.n	58a8 <bloomFilterAddressCheck+0xb9c>
    5d00:	1c1a      	adds	r2, r3, #0
    5d02:	e5c8      	b.n	5896 <bloomFilterAddressCheck+0xb8a>
    5d04:	1c11      	adds	r1, r2, #0
    5d06:	e5bd      	b.n	5884 <bloomFilterAddressCheck+0xb78>
    5d08:	1c13      	adds	r3, r2, #0
    5d0a:	e5b2      	b.n	5872 <bloomFilterAddressCheck+0xb66>
    5d0c:	1c1d      	adds	r5, r3, #0
    5d0e:	e5a2      	b.n	5856 <bloomFilterAddressCheck+0xb4a>
    5d10:	1c1a      	adds	r2, r3, #0
    5d12:	e597      	b.n	5844 <bloomFilterAddressCheck+0xb38>
    5d14:	1c19      	adds	r1, r3, #0
    5d16:	e58c      	b.n	5832 <bloomFilterAddressCheck+0xb26>
    5d18:	1c1a      	adds	r2, r3, #0
    5d1a:	e581      	b.n	5820 <bloomFilterAddressCheck+0xb14>
    5d1c:	1c19      	adds	r1, r3, #0
    5d1e:	e576      	b.n	580e <bloomFilterAddressCheck+0xb02>
    5d20:	1c1a      	adds	r2, r3, #0
    5d22:	e56b      	b.n	57fc <bloomFilterAddressCheck+0xaf0>
    5d24:	1c11      	adds	r1, r2, #0
    5d26:	e560      	b.n	57ea <bloomFilterAddressCheck+0xade>
    5d28:	1c13      	adds	r3, r2, #0
    5d2a:	e555      	b.n	57d8 <bloomFilterAddressCheck+0xacc>
    5d2c:	1c0a      	adds	r2, r1, #0
    5d2e:	e61d      	b.n	596c <bloomFilterAddressCheck+0xc60>
    5d30:	1c0b      	adds	r3, r1, #0
    5d32:	e611      	b.n	5958 <bloomFilterAddressCheck+0xc4c>
    5d34:	1c0a      	adds	r2, r1, #0
    5d36:	e605      	b.n	5944 <bloomFilterAddressCheck+0xc38>
    5d38:	1c0b      	adds	r3, r1, #0
    5d3a:	e5f9      	b.n	5930 <bloomFilterAddressCheck+0xc24>
    5d3c:	1c0a      	adds	r2, r1, #0
    5d3e:	e5ed      	b.n	591c <bloomFilterAddressCheck+0xc10>
    5d40:	1c03      	adds	r3, r0, #0
    5d42:	e5e1      	b.n	5908 <bloomFilterAddressCheck+0xbfc>
    5d44:	1c2a      	adds	r2, r5, #0
    5d46:	f7ff fbf3 	bl	5530 <bloomFilterAddressCheck+0x824>
    5d4a:	1c2b      	adds	r3, r5, #0
    5d4c:	f7ff fbe5 	bl	551a <bloomFilterAddressCheck+0x80e>
    5d50:	1c2a      	adds	r2, r5, #0
    5d52:	f7ff fbd7 	bl	5504 <bloomFilterAddressCheck+0x7f8>
    5d56:	1c2b      	adds	r3, r5, #0
    5d58:	f7ff fbc9 	bl	54ee <bloomFilterAddressCheck+0x7e2>
    5d5c:	1c2a      	adds	r2, r5, #0
    5d5e:	f7ff fbbb 	bl	54d8 <bloomFilterAddressCheck+0x7cc>
    5d62:	1c13      	adds	r3, r2, #0
    5d64:	f7ff fbac 	bl	54c0 <bloomFilterAddressCheck+0x7b4>
    5d68:	464a      	mov	r2, r9
    5d6a:	f7ff fb8e 	bl	548a <bloomFilterAddressCheck+0x77e>
    5d6e:	1c2a      	adds	r2, r5, #0
    5d70:	f7ff fb4a 	bl	5408 <bloomFilterAddressCheck+0x6fc>
    5d74:	ffff8005 	.word	0xffff8005

00005d78 <MiApp_SubscribeDataIndicationCallback>:
    5d78:	2800      	cmp	r0, #0
    5d7a:	d003      	beq.n	5d84 <MiApp_SubscribeDataIndicationCallback+0xc>
    5d7c:	4b02      	ldr	r3, [pc, #8]	; (5d88 <MiApp_SubscribeDataIndicationCallback+0x10>)
    5d7e:	6018      	str	r0, [r3, #0]
    5d80:	2001      	movs	r0, #1
    5d82:	4770      	bx	lr
    5d84:	2000      	movs	r0, #0
    5d86:	e7fc      	b.n	5d82 <MiApp_SubscribeDataIndicationCallback+0xa>
    5d88:	20000380 	.word	0x20000380

00005d8c <prepareGenericHeader>:
    5d8c:	b510      	push	{r4, lr}
    5d8e:	2403      	movs	r4, #3
    5d90:	7018      	strb	r0, [r3, #0]
    5d92:	7858      	ldrb	r0, [r3, #1]
    5d94:	809a      	strh	r2, [r3, #4]
    5d96:	43a0      	bics	r0, r4
    5d98:	2401      	movs	r4, #1
    5d9a:	4304      	orrs	r4, r0
    5d9c:	20f7      	movs	r0, #247	; 0xf7
    5d9e:	4020      	ands	r0, r4
    5da0:	2404      	movs	r4, #4
    5da2:	4320      	orrs	r0, r4
    5da4:	2447      	movs	r4, #71	; 0x47
    5da6:	4020      	ands	r0, r4
    5da8:	7058      	strb	r0, [r3, #1]
    5daa:	4802      	ldr	r0, [pc, #8]	; (5db4 <prepareGenericHeader+0x28>)
    5dac:	80d9      	strh	r1, [r3, #6]
    5dae:	8800      	ldrh	r0, [r0, #0]
    5db0:	8058      	strh	r0, [r3, #2]
    5db2:	bd10      	pop	{r4, pc}
    5db4:	200013a0 	.word	0x200013a0

00005db8 <generalFrameConstruct>:
    5db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dba:	000c      	movs	r4, r1
    5dbc:	7802      	ldrb	r2, [r0, #0]
    5dbe:	0003      	movs	r3, r0
    5dc0:	700a      	strb	r2, [r1, #0]
    5dc2:	7842      	ldrb	r2, [r0, #1]
    5dc4:	704a      	strb	r2, [r1, #1]
    5dc6:	491d      	ldr	r1, [pc, #116]	; (5e3c <generalFrameConstruct+0x84>)
    5dc8:	780a      	ldrb	r2, [r1, #0]
    5dca:	3201      	adds	r2, #1
    5dcc:	b2d2      	uxtb	r2, r2
    5dce:	70a2      	strb	r2, [r4, #2]
    5dd0:	700a      	strb	r2, [r1, #0]
    5dd2:	7842      	ldrb	r2, [r0, #1]
    5dd4:	0691      	lsls	r1, r2, #26
    5dd6:	d42b      	bmi.n	5e30 <generalFrameConstruct+0x78>
    5dd8:	8842      	ldrh	r2, [r0, #2]
    5dda:	2516      	movs	r5, #22
    5ddc:	70e2      	strb	r2, [r4, #3]
    5dde:	8842      	ldrh	r2, [r0, #2]
    5de0:	260e      	movs	r6, #14
    5de2:	0a12      	lsrs	r2, r2, #8
    5de4:	7122      	strb	r2, [r4, #4]
    5de6:	8882      	ldrh	r2, [r0, #4]
    5de8:	210a      	movs	r1, #10
    5dea:	7162      	strb	r2, [r4, #5]
    5dec:	8882      	ldrh	r2, [r0, #4]
    5dee:	2709      	movs	r7, #9
    5df0:	0a12      	lsrs	r2, r2, #8
    5df2:	71a2      	strb	r2, [r4, #6]
    5df4:	88c2      	ldrh	r2, [r0, #6]
    5df6:	71e2      	strb	r2, [r4, #7]
    5df8:	88c2      	ldrh	r2, [r0, #6]
    5dfa:	0a12      	lsrs	r2, r2, #8
    5dfc:	7222      	strb	r2, [r4, #8]
    5dfe:	7842      	ldrb	r2, [r0, #1]
    5e00:	2009      	movs	r0, #9
    5e02:	0752      	lsls	r2, r2, #29
    5e04:	d513      	bpl.n	5e2e <generalFrameConstruct+0x76>
    5e06:	4a0e      	ldr	r2, [pc, #56]	; (5e40 <generalFrameConstruct+0x88>)
    5e08:	6810      	ldr	r0, [r2, #0]
    5e0a:	2220      	movs	r2, #32
    5e0c:	5c82      	ldrb	r2, [r0, r2]
    5e0e:	480d      	ldr	r0, [pc, #52]	; (5e44 <generalFrameConstruct+0x8c>)
    5e10:	741a      	strb	r2, [r3, #16]
    5e12:	6800      	ldr	r0, [r0, #0]
    5e14:	3314      	adds	r3, #20
    5e16:	6018      	str	r0, [r3, #0]
    5e18:	55e2      	strb	r2, [r4, r7]
    5e1a:	1860      	adds	r0, r4, r1
    5e1c:	2204      	movs	r2, #4
    5e1e:	0019      	movs	r1, r3
    5e20:	4f09      	ldr	r7, [pc, #36]	; (5e48 <generalFrameConstruct+0x90>)
    5e22:	47b8      	blx	r7
    5e24:	19a0      	adds	r0, r4, r6
    5e26:	2208      	movs	r2, #8
    5e28:	4908      	ldr	r1, [pc, #32]	; (5e4c <generalFrameConstruct+0x94>)
    5e2a:	47b8      	blx	r7
    5e2c:	0028      	movs	r0, r5
    5e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e30:	2510      	movs	r5, #16
    5e32:	2608      	movs	r6, #8
    5e34:	2104      	movs	r1, #4
    5e36:	2703      	movs	r7, #3
    5e38:	2003      	movs	r0, #3
    5e3a:	e7e2      	b.n	5e02 <generalFrameConstruct+0x4a>
    5e3c:	20001388 	.word	0x20001388
    5e40:	20001370 	.word	0x20001370
    5e44:	200013f0 	.word	0x200013f0
    5e48:	0000758b 	.word	0x0000758b
    5e4c:	2000004c 	.word	0x2000004c

00005e50 <frameTransmit>:
    5e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e52:	4657      	mov	r7, sl
    5e54:	464e      	mov	r6, r9
    5e56:	46de      	mov	lr, fp
    5e58:	4645      	mov	r5, r8
    5e5a:	b5e0      	push	{r5, r6, r7, lr}
    5e5c:	b085      	sub	sp, #20
    5e5e:	4699      	mov	r9, r3
    5e60:	ab0e      	add	r3, sp, #56	; 0x38
    5e62:	781e      	ldrb	r6, [r3, #0]
    5e64:	ab10      	add	r3, sp, #64	; 0x40
    5e66:	781b      	ldrb	r3, [r3, #0]
    5e68:	0007      	movs	r7, r0
    5e6a:	469a      	mov	sl, r3
    5e6c:	2028      	movs	r0, #40	; 0x28
    5e6e:	4b45      	ldr	r3, [pc, #276]	; (5f84 <frameTransmit+0x134>)
    5e70:	4688      	mov	r8, r1
    5e72:	9203      	str	r2, [sp, #12]
    5e74:	4798      	blx	r3
    5e76:	1e04      	subs	r4, r0, #0
    5e78:	d100      	bne.n	5e7c <frameTransmit+0x2c>
    5e7a:	e081      	b.n	5f80 <frameTransmit+0x130>
    5e7c:	2300      	movs	r3, #0
    5e7e:	7603      	strb	r3, [r0, #24]
    5e80:	787b      	ldrb	r3, [r7, #1]
    5e82:	075b      	lsls	r3, r3, #29
    5e84:	d45b      	bmi.n	5f3e <frameTransmit+0xee>
    5e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5e88:	781a      	ldrb	r2, [r3, #0]
    5e8a:	785b      	ldrb	r3, [r3, #1]
    5e8c:	2e02      	cmp	r6, #2
    5e8e:	d06b      	beq.n	5f68 <frameTransmit+0x118>
    5e90:	2101      	movs	r1, #1
    5e92:	2200      	movs	r2, #0
    5e94:	2020      	movs	r0, #32
    5e96:	7e23      	ldrb	r3, [r4, #24]
    5e98:	0149      	lsls	r1, r1, #5
    5e9a:	4383      	bics	r3, r0
    5e9c:	430b      	orrs	r3, r1
    5e9e:	2104      	movs	r1, #4
    5ea0:	0092      	lsls	r2, r2, #2
    5ea2:	438b      	bics	r3, r1
    5ea4:	4313      	orrs	r3, r2
    5ea6:	2208      	movs	r2, #8
    5ea8:	4393      	bics	r3, r2
    5eaa:	7623      	strb	r3, [r4, #24]
    5eac:	4b36      	ldr	r3, [pc, #216]	; (5f88 <frameTransmit+0x138>)
    5eae:	881a      	ldrh	r2, [r3, #0]
    5eb0:	4b36      	ldr	r3, [pc, #216]	; (5f8c <frameTransmit+0x13c>)
    5eb2:	429a      	cmp	r2, r3
    5eb4:	d062      	beq.n	5f7c <frameTransmit+0x12c>
    5eb6:	787a      	ldrb	r2, [r7, #1]
    5eb8:	2301      	movs	r3, #1
    5eba:	4211      	tst	r1, r2
    5ebc:	d136      	bne.n	5f2c <frameTransmit+0xdc>
    5ebe:	2221      	movs	r2, #33	; 0x21
    5ec0:	54a3      	strb	r3, [r4, r2]
    5ec2:	1eb3      	subs	r3, r6, #2
    5ec4:	425a      	negs	r2, r3
    5ec6:	4153      	adcs	r3, r2
    5ec8:	2220      	movs	r2, #32
    5eca:	2101      	movs	r1, #1
    5ecc:	54a3      	strb	r3, [r4, r2]
    5ece:	7e23      	ldrb	r3, [r4, #24]
    5ed0:	089a      	lsrs	r2, r3, #2
    5ed2:	4051      	eors	r1, r2
    5ed4:	2201      	movs	r2, #1
    5ed6:	400a      	ands	r2, r1
    5ed8:	2140      	movs	r1, #64	; 0x40
    5eda:	0192      	lsls	r2, r2, #6
    5edc:	438b      	bics	r3, r1
    5ede:	4313      	orrs	r3, r2
    5ee0:	2280      	movs	r2, #128	; 0x80
    5ee2:	4252      	negs	r2, r2
    5ee4:	4313      	orrs	r3, r2
    5ee6:	7623      	strb	r3, [r4, #24]
    5ee8:	887b      	ldrh	r3, [r7, #2]
    5eea:	0027      	movs	r7, r4
    5eec:	8463      	strh	r3, [r4, #34]	; 0x22
    5eee:	464b      	mov	r3, r9
    5ef0:	3708      	adds	r7, #8
    5ef2:	6163      	str	r3, [r4, #20]
    5ef4:	0032      	movs	r2, r6
    5ef6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5ef8:	4b25      	ldr	r3, [pc, #148]	; (5f90 <frameTransmit+0x140>)
    5efa:	0038      	movs	r0, r7
    5efc:	4798      	blx	r3
    5efe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5f00:	4652      	mov	r2, sl
    5f02:	6123      	str	r3, [r4, #16]
    5f04:	2325      	movs	r3, #37	; 0x25
    5f06:	61e7      	str	r7, [r4, #28]
    5f08:	54e2      	strb	r2, [r4, r3]
    5f0a:	9b03      	ldr	r3, [sp, #12]
    5f0c:	4821      	ldr	r0, [pc, #132]	; (5f94 <frameTransmit+0x144>)
    5f0e:	4443      	add	r3, r8
    5f10:	001d      	movs	r5, r3
    5f12:	2324      	movs	r3, #36	; 0x24
    5f14:	0021      	movs	r1, r4
    5f16:	54e5      	strb	r5, [r4, r3]
    5f18:	4b1f      	ldr	r3, [pc, #124]	; (5f98 <frameTransmit+0x148>)
    5f1a:	4798      	blx	r3
    5f1c:	2001      	movs	r0, #1
    5f1e:	b005      	add	sp, #20
    5f20:	bc3c      	pop	{r2, r3, r4, r5}
    5f22:	4690      	mov	r8, r2
    5f24:	4699      	mov	r9, r3
    5f26:	46a2      	mov	sl, r4
    5f28:	46ab      	mov	fp, r5
    5f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f2c:	2100      	movs	r1, #0
    5f2e:	4a1b      	ldr	r2, [pc, #108]	; (5f9c <frameTransmit+0x14c>)
    5f30:	7812      	ldrb	r2, [r2, #0]
    5f32:	3a06      	subs	r2, #6
    5f34:	b2d2      	uxtb	r2, r2
    5f36:	4293      	cmp	r3, r2
    5f38:	4149      	adcs	r1, r1
    5f3a:	b2cb      	uxtb	r3, r1
    5f3c:	e7bf      	b.n	5ebe <frameTransmit+0x6e>
    5f3e:	4b18      	ldr	r3, [pc, #96]	; (5fa0 <frameTransmit+0x150>)
    5f40:	0030      	movs	r0, r6
    5f42:	4798      	blx	r3
    5f44:	464b      	mov	r3, r9
    5f46:	9000      	str	r0, [sp, #0]
    5f48:	9a03      	ldr	r2, [sp, #12]
    5f4a:	4641      	mov	r1, r8
    5f4c:	0038      	movs	r0, r7
    5f4e:	4d15      	ldr	r5, [pc, #84]	; (5fa4 <frameTransmit+0x154>)
    5f50:	47a8      	blx	r5
    5f52:	28ff      	cmp	r0, #255	; 0xff
    5f54:	d014      	beq.n	5f80 <frameTransmit+0x130>
    5f56:	9b03      	ldr	r3, [sp, #12]
    5f58:	181d      	adds	r5, r3, r0
    5f5a:	b2eb      	uxtb	r3, r5
    5f5c:	9303      	str	r3, [sp, #12]
    5f5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5f60:	781a      	ldrb	r2, [r3, #0]
    5f62:	785b      	ldrb	r3, [r3, #1]
    5f64:	2e02      	cmp	r6, #2
    5f66:	d193      	bne.n	5e90 <frameTransmit+0x40>
    5f68:	021b      	lsls	r3, r3, #8
    5f6a:	189b      	adds	r3, r3, r2
    5f6c:	4a07      	ldr	r2, [pc, #28]	; (5f8c <frameTransmit+0x13c>)
    5f6e:	b29b      	uxth	r3, r3
    5f70:	4293      	cmp	r3, r2
    5f72:	d000      	beq.n	5f76 <frameTransmit+0x126>
    5f74:	e78c      	b.n	5e90 <frameTransmit+0x40>
    5f76:	2100      	movs	r1, #0
    5f78:	2201      	movs	r2, #1
    5f7a:	e78b      	b.n	5e94 <frameTransmit+0x44>
    5f7c:	2300      	movs	r3, #0
    5f7e:	e79e      	b.n	5ebe <frameTransmit+0x6e>
    5f80:	2000      	movs	r0, #0
    5f82:	e7cc      	b.n	5f1e <frameTransmit+0xce>
    5f84:	00002fe1 	.word	0x00002fe1
    5f88:	200013b4 	.word	0x200013b4
    5f8c:	0000ffff 	.word	0x0000ffff
    5f90:	0000758b 	.word	0x0000758b
    5f94:	200013a8 	.word	0x200013a8
    5f98:	00003109 	.word	0x00003109
    5f9c:	20000368 	.word	0x20000368
    5fa0:	00007001 	.word	0x00007001
    5fa4:	00007025 	.word	0x00007025

00005fa8 <frameParse>:
    5fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5faa:	464e      	mov	r6, r9
    5fac:	4645      	mov	r5, r8
    5fae:	46de      	mov	lr, fp
    5fb0:	4657      	mov	r7, sl
    5fb2:	b5e0      	push	{r5, r6, r7, lr}
    5fb4:	6885      	ldr	r5, [r0, #8]
    5fb6:	b09d      	sub	sp, #116	; 0x74
    5fb8:	782b      	ldrb	r3, [r5, #0]
    5fba:	ac0c      	add	r4, sp, #48	; 0x30
    5fbc:	7023      	strb	r3, [r4, #0]
    5fbe:	786b      	ldrb	r3, [r5, #1]
    5fc0:	0006      	movs	r6, r0
    5fc2:	7063      	strb	r3, [r4, #1]
    5fc4:	78ab      	ldrb	r3, [r5, #2]
    5fc6:	7223      	strb	r3, [r4, #8]
    5fc8:	7bc3      	ldrb	r3, [r0, #15]
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d015      	beq.n	5ffa <frameParse+0x52>
    5fce:	7863      	ldrb	r3, [r4, #1]
    5fd0:	069a      	lsls	r2, r3, #26
    5fd2:	d400      	bmi.n	5fd6 <frameParse+0x2e>
    5fd4:	e0b5      	b.n	6142 <frameParse+0x19a>
    5fd6:	6873      	ldr	r3, [r6, #4]
    5fd8:	4698      	mov	r8, r3
    5fda:	8a33      	ldrh	r3, [r6, #16]
    5fdc:	8063      	strh	r3, [r4, #2]
    5fde:	4643      	mov	r3, r8
    5fe0:	785a      	ldrb	r2, [r3, #1]
    5fe2:	781b      	ldrb	r3, [r3, #0]
    5fe4:	0212      	lsls	r2, r2, #8
    5fe6:	4313      	orrs	r3, r2
    5fe8:	80e3      	strh	r3, [r4, #6]
    5fea:	2302      	movs	r3, #2
    5fec:	469a      	mov	sl, r3
    5fee:	7833      	ldrb	r3, [r6, #0]
    5ff0:	075b      	lsls	r3, r3, #29
    5ff2:	d40f      	bmi.n	6014 <frameParse+0x6c>
    5ff4:	4b7f      	ldr	r3, [pc, #508]	; (61f4 <frameParse+0x24c>)
    5ff6:	881b      	ldrh	r3, [r3, #0]
    5ff8:	e00e      	b.n	6018 <frameParse+0x70>
    5ffa:	7863      	ldrb	r3, [r4, #1]
    5ffc:	069a      	lsls	r2, r3, #26
    5ffe:	d400      	bmi.n	6002 <frameParse+0x5a>
    6000:	e07c      	b.n	60fc <frameParse+0x154>
    6002:	6873      	ldr	r3, [r6, #4]
    6004:	4698      	mov	r8, r3
    6006:	8a33      	ldrh	r3, [r6, #16]
    6008:	8063      	strh	r3, [r4, #2]
    600a:	2308      	movs	r3, #8
    600c:	469a      	mov	sl, r3
    600e:	7833      	ldrb	r3, [r6, #0]
    6010:	075b      	lsls	r3, r3, #29
    6012:	d5ef      	bpl.n	5ff4 <frameParse+0x4c>
    6014:	2301      	movs	r3, #1
    6016:	425b      	negs	r3, r3
    6018:	2210      	movs	r2, #16
    601a:	80a3      	strh	r3, [r4, #4]
    601c:	7863      	ldrb	r3, [r4, #1]
    601e:	4691      	mov	r9, r2
    6020:	4693      	mov	fp, r2
    6022:	2708      	movs	r7, #8
    6024:	2104      	movs	r1, #4
    6026:	3a0d      	subs	r2, #13
    6028:	075b      	lsls	r3, r3, #29
    602a:	d400      	bmi.n	602e <frameParse+0x86>
    602c:	e082      	b.n	6134 <frameParse+0x18c>
    602e:	5cab      	ldrb	r3, [r5, r2]
    6030:	1869      	adds	r1, r5, r1
    6032:	7423      	strb	r3, [r4, #16]
    6034:	2204      	movs	r2, #4
    6036:	4b70      	ldr	r3, [pc, #448]	; (61f8 <frameParse+0x250>)
    6038:	a811      	add	r0, sp, #68	; 0x44
    603a:	4798      	blx	r3
    603c:	19e9      	adds	r1, r5, r7
    603e:	2208      	movs	r2, #8
    6040:	4b6d      	ldr	r3, [pc, #436]	; (61f8 <frameParse+0x250>)
    6042:	a812      	add	r0, sp, #72	; 0x48
    6044:	4798      	blx	r3
    6046:	465a      	mov	r2, fp
    6048:	7b33      	ldrb	r3, [r6, #12]
    604a:	4650      	mov	r0, sl
    604c:	1a9b      	subs	r3, r3, r2
    604e:	b2db      	uxtb	r3, r3
    6050:	001f      	movs	r7, r3
    6052:	9306      	str	r3, [sp, #24]
    6054:	4b69      	ldr	r3, [pc, #420]	; (61fc <frameParse+0x254>)
    6056:	4798      	blx	r3
    6058:	9001      	str	r0, [sp, #4]
    605a:	68b3      	ldr	r3, [r6, #8]
    605c:	465a      	mov	r2, fp
    605e:	9300      	str	r3, [sp, #0]
    6060:	a912      	add	r1, sp, #72	; 0x48
    6062:	003b      	movs	r3, r7
    6064:	0020      	movs	r0, r4
    6066:	4f66      	ldr	r7, [pc, #408]	; (6200 <frameParse+0x258>)
    6068:	47b8      	blx	r7
    606a:	9005      	str	r0, [sp, #20]
    606c:	28ff      	cmp	r0, #255	; 0xff
    606e:	d061      	beq.n	6134 <frameParse+0x18c>
    6070:	88a2      	ldrh	r2, [r4, #4]
    6072:	4b64      	ldr	r3, [pc, #400]	; (6204 <frameParse+0x25c>)
    6074:	429a      	cmp	r2, r3
    6076:	d967      	bls.n	6148 <frameParse+0x1a0>
    6078:	2310      	movs	r3, #16
    607a:	7861      	ldrb	r1, [r4, #1]
    607c:	469b      	mov	fp, r3
    607e:	420b      	tst	r3, r1
    6080:	d004      	beq.n	608c <frameParse+0xe4>
    6082:	4b5c      	ldr	r3, [pc, #368]	; (61f4 <frameParse+0x24c>)
    6084:	881b      	ldrh	r3, [r3, #0]
    6086:	429a      	cmp	r2, r3
    6088:	d100      	bne.n	608c <frameParse+0xe4>
    608a:	e0cf      	b.n	622c <frameParse+0x284>
    608c:	2303      	movs	r3, #3
    608e:	444d      	add	r5, r9
    6090:	400b      	ands	r3, r1
    6092:	2b01      	cmp	r3, #1
    6094:	d05d      	beq.n	6152 <frameParse+0x1aa>
    6096:	2b00      	cmp	r3, #0
    6098:	d14c      	bne.n	6134 <frameParse+0x18c>
    609a:	4b5b      	ldr	r3, [pc, #364]	; (6208 <frameParse+0x260>)
    609c:	781b      	ldrb	r3, [r3, #0]
    609e:	3b06      	subs	r3, #6
    60a0:	2b01      	cmp	r3, #1
    60a2:	d847      	bhi.n	6134 <frameParse+0x18c>
    60a4:	88a3      	ldrh	r3, [r4, #4]
    60a6:	4a57      	ldr	r2, [pc, #348]	; (6204 <frameParse+0x25c>)
    60a8:	4293      	cmp	r3, r2
    60aa:	d800      	bhi.n	60ae <frameParse+0x106>
    60ac:	e08d      	b.n	61ca <frameParse+0x222>
    60ae:	20ff      	movs	r0, #255	; 0xff
    60b0:	4a50      	ldr	r2, [pc, #320]	; (61f4 <frameParse+0x24c>)
    60b2:	8811      	ldrh	r1, [r2, #0]
    60b4:	4208      	tst	r0, r1
    60b6:	d100      	bne.n	60ba <frameParse+0x112>
    60b8:	e092      	b.n	61e0 <frameParse+0x238>
    60ba:	8811      	ldrh	r1, [r2, #0]
    60bc:	0609      	lsls	r1, r1, #24
    60be:	d500      	bpl.n	60c2 <frameParse+0x11a>
    60c0:	e08e      	b.n	61e0 <frameParse+0x238>
    60c2:	4952      	ldr	r1, [pc, #328]	; (620c <frameParse+0x264>)
    60c4:	428b      	cmp	r3, r1
    60c6:	d135      	bne.n	6134 <frameParse+0x18c>
    60c8:	8813      	ldrh	r3, [r2, #0]
    60ca:	8813      	ldrh	r3, [r2, #0]
    60cc:	061b      	lsls	r3, r3, #24
    60ce:	d500      	bpl.n	60d2 <frameParse+0x12a>
    60d0:	e07b      	b.n	61ca <frameParse+0x222>
    60d2:	21ff      	movs	r1, #255	; 0xff
    60d4:	8812      	ldrh	r2, [r2, #0]
    60d6:	88e3      	ldrh	r3, [r4, #6]
    60d8:	438a      	bics	r2, r1
    60da:	429a      	cmp	r2, r3
    60dc:	d02a      	beq.n	6134 <frameParse+0x18c>
    60de:	a814      	add	r0, sp, #80	; 0x50
    60e0:	8003      	strh	r3, [r0, #0]
    60e2:	9a05      	ldr	r2, [sp, #20]
    60e4:	9b06      	ldr	r3, [sp, #24]
    60e6:	6045      	str	r5, [r0, #4]
    60e8:	1a9f      	subs	r7, r3, r2
    60ea:	7207      	strb	r7, [r0, #8]
    60ec:	7bb3      	ldrb	r3, [r6, #14]
    60ee:	7283      	strb	r3, [r0, #10]
    60f0:	7b73      	ldrb	r3, [r6, #13]
    60f2:	7243      	strb	r3, [r0, #9]
    60f4:	4b46      	ldr	r3, [pc, #280]	; (6210 <frameParse+0x268>)
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	4798      	blx	r3
    60fa:	e01b      	b.n	6134 <frameParse+0x18c>
    60fc:	2208      	movs	r2, #8
    60fe:	4692      	mov	sl, r2
    6100:	6872      	ldr	r2, [r6, #4]
    6102:	7929      	ldrb	r1, [r5, #4]
    6104:	4690      	mov	r8, r2
    6106:	78ea      	ldrb	r2, [r5, #3]
    6108:	0209      	lsls	r1, r1, #8
    610a:	430a      	orrs	r2, r1
    610c:	79a9      	ldrb	r1, [r5, #6]
    610e:	8062      	strh	r2, [r4, #2]
    6110:	796a      	ldrb	r2, [r5, #5]
    6112:	0209      	lsls	r1, r1, #8
    6114:	430a      	orrs	r2, r1
    6116:	7a29      	ldrb	r1, [r5, #8]
    6118:	80a2      	strh	r2, [r4, #4]
    611a:	79ea      	ldrb	r2, [r5, #7]
    611c:	0209      	lsls	r1, r1, #8
    611e:	430a      	orrs	r2, r1
    6120:	80e2      	strh	r2, [r4, #6]
    6122:	2216      	movs	r2, #22
    6124:	270e      	movs	r7, #14
    6126:	4691      	mov	r9, r2
    6128:	4693      	mov	fp, r2
    612a:	210a      	movs	r1, #10
    612c:	3a0d      	subs	r2, #13
    612e:	075b      	lsls	r3, r3, #29
    6130:	d500      	bpl.n	6134 <frameParse+0x18c>
    6132:	e77c      	b.n	602e <frameParse+0x86>
    6134:	b01d      	add	sp, #116	; 0x74
    6136:	bc3c      	pop	{r2, r3, r4, r5}
    6138:	4690      	mov	r8, r2
    613a:	4699      	mov	r9, r3
    613c:	46a2      	mov	sl, r4
    613e:	46ab      	mov	fp, r5
    6140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6142:	2202      	movs	r2, #2
    6144:	4692      	mov	sl, r2
    6146:	e7db      	b.n	6100 <frameParse+0x158>
    6148:	4b2a      	ldr	r3, [pc, #168]	; (61f4 <frameParse+0x24c>)
    614a:	881b      	ldrh	r3, [r3, #0]
    614c:	429a      	cmp	r2, r3
    614e:	d1f1      	bne.n	6134 <frameParse+0x18c>
    6150:	e792      	b.n	6078 <frameParse+0xd0>
    6152:	782a      	ldrb	r2, [r5, #0]
    6154:	330e      	adds	r3, #14
    6156:	0011      	movs	r1, r2
    6158:	4399      	bics	r1, r3
    615a:	d038      	beq.n	61ce <frameParse+0x226>
    615c:	2930      	cmp	r1, #48	; 0x30
    615e:	d1e9      	bne.n	6134 <frameParse+0x18c>
    6160:	2a32      	cmp	r2, #50	; 0x32
    6162:	d1e7      	bne.n	6134 <frameParse+0x18c>
    6164:	4b2b      	ldr	r3, [pc, #172]	; (6214 <frameParse+0x26c>)
    6166:	4699      	mov	r9, r3
    6168:	7a1b      	ldrb	r3, [r3, #8]
    616a:	2b00      	cmp	r3, #0
    616c:	d0e2      	beq.n	6134 <frameParse+0x18c>
    616e:	2300      	movs	r3, #0
    6170:	469b      	mov	fp, r3
    6172:	4b29      	ldr	r3, [pc, #164]	; (6218 <frameParse+0x270>)
    6174:	46a8      	mov	r8, r5
    6176:	469a      	mov	sl, r3
    6178:	465d      	mov	r5, fp
    617a:	9f05      	ldr	r7, [sp, #20]
    617c:	46b3      	mov	fp, r6
    617e:	e00a      	b.n	6196 <frameParse+0x1ee>
    6180:	0031      	movs	r1, r6
    6182:	4648      	mov	r0, r9
    6184:	4b25      	ldr	r3, [pc, #148]	; (621c <frameParse+0x274>)
    6186:	4798      	blx	r3
    6188:	464b      	mov	r3, r9
    618a:	3501      	adds	r5, #1
    618c:	7a1b      	ldrb	r3, [r3, #8]
    618e:	b2ed      	uxtb	r5, r5
    6190:	42ab      	cmp	r3, r5
    6192:	d800      	bhi.n	6196 <frameParse+0x1ee>
    6194:	e0e9      	b.n	636a <frameParse+0x3c2>
    6196:	2100      	movs	r1, #0
    6198:	4648      	mov	r0, r9
    619a:	47d0      	blx	sl
    619c:	1e06      	subs	r6, r0, #0
    619e:	d100      	bne.n	61a2 <frameParse+0x1fa>
    61a0:	e0e3      	b.n	636a <frameParse+0x3c2>
    61a2:	2320      	movs	r3, #32
    61a4:	7a22      	ldrb	r2, [r4, #8]
    61a6:	5cc3      	ldrb	r3, [r0, r3]
    61a8:	429a      	cmp	r2, r3
    61aa:	d1e9      	bne.n	6180 <frameParse+0x1d8>
    61ac:	88e2      	ldrh	r2, [r4, #6]
    61ae:	8b83      	ldrh	r3, [r0, #28]
    61b0:	429a      	cmp	r2, r3
    61b2:	d1e5      	bne.n	6180 <frameParse+0x1d8>
    61b4:	6883      	ldr	r3, [r0, #8]
    61b6:	2b00      	cmp	r3, #0
    61b8:	d003      	beq.n	61c2 <frameParse+0x21a>
    61ba:	7c80      	ldrb	r0, [r0, #18]
    61bc:	0032      	movs	r2, r6
    61be:	2100      	movs	r1, #0
    61c0:	4798      	blx	r3
    61c2:	0030      	movs	r0, r6
    61c4:	4b16      	ldr	r3, [pc, #88]	; (6220 <frameParse+0x278>)
    61c6:	4798      	blx	r3
    61c8:	e7de      	b.n	6188 <frameParse+0x1e0>
    61ca:	88e3      	ldrh	r3, [r4, #6]
    61cc:	e787      	b.n	60de <frameParse+0x136>
    61ce:	7bb3      	ldrb	r3, [r6, #14]
    61d0:	0020      	movs	r0, r4
    61d2:	9300      	str	r3, [sp, #0]
    61d4:	4642      	mov	r2, r8
    61d6:	002b      	movs	r3, r5
    61d8:	4651      	mov	r1, sl
    61da:	4c12      	ldr	r4, [pc, #72]	; (6224 <frameParse+0x27c>)
    61dc:	47a0      	blx	r4
    61de:	e7a9      	b.n	6134 <frameParse+0x18c>
    61e0:	8811      	ldrh	r1, [r2, #0]
    61e2:	0609      	lsls	r1, r1, #24
    61e4:	d400      	bmi.n	61e8 <frameParse+0x240>
    61e6:	e770      	b.n	60ca <frameParse+0x122>
    61e8:	490f      	ldr	r1, [pc, #60]	; (6228 <frameParse+0x280>)
    61ea:	428b      	cmp	r3, r1
    61ec:	d000      	beq.n	61f0 <frameParse+0x248>
    61ee:	e76c      	b.n	60ca <frameParse+0x122>
    61f0:	e7a0      	b.n	6134 <frameParse+0x18c>
    61f2:	46c0      	nop			; (mov r8, r8)
    61f4:	200013b4 	.word	0x200013b4
    61f8:	0000758b 	.word	0x0000758b
    61fc:	00007001 	.word	0x00007001
    6200:	0000712d 	.word	0x0000712d
    6204:	0000fffc 	.word	0x0000fffc
    6208:	20000368 	.word	0x20000368
    620c:	0000ffff 	.word	0x0000ffff
    6210:	20000380 	.word	0x20000380
    6214:	20001374 	.word	0x20001374
    6218:	00003141 	.word	0x00003141
    621c:	00003109 	.word	0x00003109
    6220:	00003029 	.word	0x00003029
    6224:	00006d31 	.word	0x00006d31
    6228:	0000fffd 	.word	0x0000fffd
    622c:	88e3      	ldrh	r3, [r4, #6]
    622e:	2078      	movs	r0, #120	; 0x78
    6230:	9308      	str	r3, [sp, #32]
    6232:	7a23      	ldrb	r3, [r4, #8]
    6234:	9309      	str	r3, [sp, #36]	; 0x24
    6236:	4b55      	ldr	r3, [pc, #340]	; (638c <frameParse+0x3e4>)
    6238:	4798      	blx	r3
    623a:	1e07      	subs	r7, r0, #0
    623c:	9007      	str	r0, [sp, #28]
    623e:	d100      	bne.n	6242 <frameParse+0x29a>
    6240:	e08c      	b.n	635c <frameParse+0x3b4>
    6242:	2330      	movs	r3, #48	; 0x30
    6244:	a808      	add	r0, sp, #32
    6246:	18c0      	adds	r0, r0, r3
    6248:	33cf      	adds	r3, #207	; 0xcf
    624a:	7003      	strb	r3, [r0, #0]
    624c:	2331      	movs	r3, #49	; 0x31
    624e:	a808      	add	r0, sp, #32
    6250:	18c0      	adds	r0, r0, r3
    6252:	7803      	ldrb	r3, [r0, #0]
    6254:	2003      	movs	r0, #3
    6256:	4383      	bics	r3, r0
    6258:	2001      	movs	r0, #1
    625a:	4318      	orrs	r0, r3
    625c:	23f7      	movs	r3, #247	; 0xf7
    625e:	4a4c      	ldr	r2, [pc, #304]	; (6390 <frameParse+0x3e8>)
    6260:	4003      	ands	r3, r0
    6262:	2004      	movs	r0, #4
    6264:	8811      	ldrh	r1, [r2, #0]
    6266:	2220      	movs	r2, #32
    6268:	4303      	orrs	r3, r0
    626a:	b2db      	uxtb	r3, r3
    626c:	4393      	bics	r3, r2
    626e:	325f      	adds	r2, #95	; 0x5f
    6270:	4013      	ands	r3, r2
    6272:	465a      	mov	r2, fp
    6274:	2031      	movs	r0, #49	; 0x31
    6276:	4393      	bics	r3, r2
    6278:	aa08      	add	r2, sp, #32
    627a:	1812      	adds	r2, r2, r0
    627c:	7013      	strb	r3, [r2, #0]
    627e:	4b45      	ldr	r3, [pc, #276]	; (6394 <frameParse+0x3ec>)
    6280:	aa08      	add	r2, sp, #32
    6282:	881b      	ldrh	r3, [r3, #0]
    6284:	86d1      	strh	r1, [r2, #54]	; 0x36
    6286:	8653      	strh	r3, [r2, #50]	; 0x32
    6288:	466b      	mov	r3, sp
    628a:	8c18      	ldrh	r0, [r3, #32]
    628c:	ab08      	add	r3, sp, #32
    628e:	8690      	strh	r0, [r2, #52]	; 0x34
    6290:	22ff      	movs	r2, #255	; 0xff
    6292:	703a      	strb	r2, [r7, #0]
    6294:	2231      	movs	r2, #49	; 0x31
    6296:	189b      	adds	r3, r3, r2
    6298:	781b      	ldrb	r3, [r3, #0]
    629a:	4a3f      	ldr	r2, [pc, #252]	; (6398 <frameParse+0x3f0>)
    629c:	707b      	strb	r3, [r7, #1]
    629e:	7813      	ldrb	r3, [r2, #0]
    62a0:	3301      	adds	r3, #1
    62a2:	b2db      	uxtb	r3, r3
    62a4:	7013      	strb	r3, [r2, #0]
    62a6:	2231      	movs	r2, #49	; 0x31
    62a8:	70bb      	strb	r3, [r7, #2]
    62aa:	ab08      	add	r3, sp, #32
    62ac:	189b      	adds	r3, r3, r2
    62ae:	781b      	ldrb	r3, [r3, #0]
    62b0:	3a11      	subs	r2, #17
    62b2:	421a      	tst	r2, r3
    62b4:	d160      	bne.n	6378 <frameParse+0x3d0>
    62b6:	aa08      	add	r2, sp, #32
    62b8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    62ba:	200a      	movs	r0, #10
    62bc:	70fa      	strb	r2, [r7, #3]
    62be:	aa08      	add	r2, sp, #32
    62c0:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    62c2:	0a12      	lsrs	r2, r2, #8
    62c4:	713a      	strb	r2, [r7, #4]
    62c6:	aa08      	add	r2, sp, #32
    62c8:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    62ca:	717a      	strb	r2, [r7, #5]
    62cc:	aa08      	add	r2, sp, #32
    62ce:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    62d0:	0a12      	lsrs	r2, r2, #8
    62d2:	71ba      	strb	r2, [r7, #6]
    62d4:	aa08      	add	r2, sp, #32
    62d6:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    62d8:	71fa      	strb	r2, [r7, #7]
    62da:	aa08      	add	r2, sp, #32
    62dc:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    62de:	0a12      	lsrs	r2, r2, #8
    62e0:	723a      	strb	r2, [r7, #8]
    62e2:	2216      	movs	r2, #22
    62e4:	2709      	movs	r7, #9
    62e6:	920a      	str	r2, [sp, #40]	; 0x28
    62e8:	9208      	str	r2, [sp, #32]
    62ea:	3a08      	subs	r2, #8
    62ec:	4693      	mov	fp, r2
    62ee:	3a05      	subs	r2, #5
    62f0:	075b      	lsls	r3, r3, #29
    62f2:	d51c      	bpl.n	632e <frameParse+0x386>
    62f4:	4b29      	ldr	r3, [pc, #164]	; (639c <frameParse+0x3f4>)
    62f6:	2740      	movs	r7, #64	; 0x40
    62f8:	6819      	ldr	r1, [r3, #0]
    62fa:	2320      	movs	r3, #32
    62fc:	5ccb      	ldrb	r3, [r1, r3]
    62fe:	a908      	add	r1, sp, #32
    6300:	19c9      	adds	r1, r1, r7
    6302:	9f07      	ldr	r7, [sp, #28]
    6304:	700b      	strb	r3, [r1, #0]
    6306:	46bc      	mov	ip, r7
    6308:	4925      	ldr	r1, [pc, #148]	; (63a0 <frameParse+0x3f8>)
    630a:	4460      	add	r0, ip
    630c:	6809      	ldr	r1, [r1, #0]
    630e:	9119      	str	r1, [sp, #100]	; 0x64
    6310:	910b      	str	r1, [sp, #44]	; 0x2c
    6312:	54bb      	strb	r3, [r7, r2]
    6314:	a919      	add	r1, sp, #100	; 0x64
    6316:	2204      	movs	r2, #4
    6318:	4b22      	ldr	r3, [pc, #136]	; (63a4 <frameParse+0x3fc>)
    631a:	4798      	blx	r3
    631c:	0039      	movs	r1, r7
    631e:	4459      	add	r1, fp
    6320:	0008      	movs	r0, r1
    6322:	2208      	movs	r2, #8
    6324:	4920      	ldr	r1, [pc, #128]	; (63a8 <frameParse+0x400>)
    6326:	4b1f      	ldr	r3, [pc, #124]	; (63a4 <frameParse+0x3fc>)
    6328:	4798      	blx	r3
    632a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    632c:	9f08      	ldr	r7, [sp, #32]
    632e:	2324      	movs	r3, #36	; 0x24
    6330:	4669      	mov	r1, sp
    6332:	18c9      	adds	r1, r1, r3
    6334:	7809      	ldrb	r1, [r1, #0]
    6336:	9807      	ldr	r0, [sp, #28]
    6338:	330e      	adds	r3, #14
    633a:	7081      	strb	r1, [r0, #2]
    633c:	5483      	strb	r3, [r0, r2]
    633e:	2300      	movs	r3, #0
    6340:	9303      	str	r3, [sp, #12]
    6342:	9302      	str	r3, [sp, #8]
    6344:	4643      	mov	r3, r8
    6346:	9301      	str	r3, [sp, #4]
    6348:	4653      	mov	r3, sl
    634a:	0039      	movs	r1, r7
    634c:	9300      	str	r3, [sp, #0]
    634e:	2201      	movs	r2, #1
    6350:	0003      	movs	r3, r0
    6352:	4f16      	ldr	r7, [pc, #88]	; (63ac <frameParse+0x404>)
    6354:	a814      	add	r0, sp, #80	; 0x50
    6356:	47b8      	blx	r7
    6358:	2800      	cmp	r0, #0
    635a:	d001      	beq.n	6360 <frameParse+0x3b8>
    635c:	7861      	ldrb	r1, [r4, #1]
    635e:	e695      	b.n	608c <frameParse+0xe4>
    6360:	9807      	ldr	r0, [sp, #28]
    6362:	4b13      	ldr	r3, [pc, #76]	; (63b0 <frameParse+0x408>)
    6364:	4798      	blx	r3
    6366:	7861      	ldrb	r1, [r4, #1]
    6368:	e690      	b.n	608c <frameParse+0xe4>
    636a:	2303      	movs	r3, #3
    636c:	7862      	ldrb	r2, [r4, #1]
    636e:	4645      	mov	r5, r8
    6370:	465e      	mov	r6, fp
    6372:	9705      	str	r7, [sp, #20]
    6374:	4013      	ands	r3, r2
    6376:	e68e      	b.n	6096 <frameParse+0xee>
    6378:	2210      	movs	r2, #16
    637a:	920a      	str	r2, [sp, #40]	; 0x28
    637c:	9208      	str	r2, [sp, #32]
    637e:	3a08      	subs	r2, #8
    6380:	4693      	mov	fp, r2
    6382:	2004      	movs	r0, #4
    6384:	3a05      	subs	r2, #5
    6386:	2703      	movs	r7, #3
    6388:	e7b2      	b.n	62f0 <frameParse+0x348>
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	00002fe1 	.word	0x00002fe1
    6390:	200013b4 	.word	0x200013b4
    6394:	200013a0 	.word	0x200013a0
    6398:	20001388 	.word	0x20001388
    639c:	20001370 	.word	0x20001370
    63a0:	200013f0 	.word	0x200013f0
    63a4:	0000758b 	.word	0x0000758b
    63a8:	2000004c 	.word	0x2000004c
    63ac:	00005e51 	.word	0x00005e51
    63b0:	00003029 	.word	0x00003029

000063b4 <sendDataFrame>:
    63b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    63b6:	4657      	mov	r7, sl
    63b8:	46de      	mov	lr, fp
    63ba:	464e      	mov	r6, r9
    63bc:	4645      	mov	r5, r8
    63be:	b5e0      	push	{r5, r6, r7, lr}
    63c0:	b091      	sub	sp, #68	; 0x44
    63c2:	ab04      	add	r3, sp, #16
    63c4:	469c      	mov	ip, r3
    63c6:	270e      	movs	r7, #14
    63c8:	4b9a      	ldr	r3, [pc, #616]	; (6634 <sendDataFrame+0x280>)
    63ca:	4467      	add	r7, ip
    63cc:	469a      	mov	sl, r3
    63ce:	881b      	ldrh	r3, [r3, #0]
    63d0:	4693      	mov	fp, r2
    63d2:	b28a      	uxth	r2, r1
    63d4:	0006      	movs	r6, r0
    63d6:	9703      	str	r7, [sp, #12]
    63d8:	8039      	strh	r1, [r7, #0]
    63da:	429a      	cmp	r2, r3
    63dc:	d100      	bne.n	63e0 <sendDataFrame+0x2c>
    63de:	e0c3      	b.n	6568 <sendDataFrame+0x1b4>
    63e0:	2800      	cmp	r0, #0
    63e2:	d100      	bne.n	63e6 <sendDataFrame+0x32>
    63e4:	e0c7      	b.n	6576 <sendDataFrame+0x1c2>
    63e6:	2078      	movs	r0, #120	; 0x78
    63e8:	4b93      	ldr	r3, [pc, #588]	; (6638 <sendDataFrame+0x284>)
    63ea:	4798      	blx	r3
    63ec:	4680      	mov	r8, r0
    63ee:	2800      	cmp	r0, #0
    63f0:	d100      	bne.n	63f4 <sendDataFrame+0x40>
    63f2:	e0bc      	b.n	656e <sendDataFrame+0x1ba>
    63f4:	2108      	movs	r1, #8
    63f6:	4b91      	ldr	r3, [pc, #580]	; (663c <sendDataFrame+0x288>)
    63f8:	ac08      	add	r4, sp, #32
    63fa:	7862      	ldrb	r2, [r4, #1]
    63fc:	881b      	ldrh	r3, [r3, #0]
    63fe:	8bf5      	ldrh	r5, [r6, #30]
    6400:	8bb7      	ldrh	r7, [r6, #28]
    6402:	438a      	bics	r2, r1
    6404:	8063      	strh	r3, [r4, #2]
    6406:	2104      	movs	r1, #4
    6408:	2303      	movs	r3, #3
    640a:	80e5      	strh	r5, [r4, #6]
    640c:	7e75      	ldrb	r5, [r6, #25]
    640e:	430a      	orrs	r2, r1
    6410:	469c      	mov	ip, r3
    6412:	2120      	movs	r1, #32
    6414:	402b      	ands	r3, r5
    6416:	4699      	mov	r9, r3
    6418:	237f      	movs	r3, #127	; 0x7f
    641a:	b2d2      	uxtb	r2, r2
    641c:	438a      	bics	r2, r1
    641e:	4013      	ands	r3, r2
    6420:	4662      	mov	r2, ip
    6422:	4393      	bics	r3, r2
    6424:	320d      	adds	r2, #13
    6426:	402a      	ands	r2, r5
    6428:	464d      	mov	r5, r9
    642a:	431d      	orrs	r5, r3
    642c:	2310      	movs	r3, #16
    642e:	20ff      	movs	r0, #255	; 0xff
    6430:	439d      	bics	r5, r3
    6432:	4643      	mov	r3, r8
    6434:	4315      	orrs	r5, r2
    6436:	4642      	mov	r2, r8
    6438:	7065      	strb	r5, [r4, #1]
    643a:	80a7      	strh	r7, [r4, #4]
    643c:	7020      	strb	r0, [r4, #0]
    643e:	7018      	strb	r0, [r3, #0]
    6440:	7863      	ldrb	r3, [r4, #1]
    6442:	4d7f      	ldr	r5, [pc, #508]	; (6640 <sendDataFrame+0x28c>)
    6444:	7053      	strb	r3, [r2, #1]
    6446:	782b      	ldrb	r3, [r5, #0]
    6448:	3301      	adds	r3, #1
    644a:	b2db      	uxtb	r3, r3
    644c:	7093      	strb	r3, [r2, #2]
    644e:	702b      	strb	r3, [r5, #0]
    6450:	7863      	ldrb	r3, [r4, #1]
    6452:	4219      	tst	r1, r3
    6454:	d100      	bne.n	6458 <sendDataFrame+0xa4>
    6456:	e096      	b.n	6586 <sendDataFrame+0x1d2>
    6458:	2210      	movs	r2, #16
    645a:	2103      	movs	r1, #3
    645c:	0017      	movs	r7, r2
    645e:	9204      	str	r2, [sp, #16]
    6460:	3a08      	subs	r2, #8
    6462:	9206      	str	r2, [sp, #24]
    6464:	2003      	movs	r0, #3
    6466:	3a04      	subs	r2, #4
    6468:	9105      	str	r1, [sp, #20]
    646a:	075b      	lsls	r3, r3, #29
    646c:	d500      	bpl.n	6470 <sendDataFrame+0xbc>
    646e:	e0a6      	b.n	65be <sendDataFrame+0x20a>
    6470:	4b74      	ldr	r3, [pc, #464]	; (6644 <sendDataFrame+0x290>)
    6472:	4699      	mov	r9, r3
    6474:	7cf3      	ldrb	r3, [r6, #19]
    6476:	2b00      	cmp	r3, #0
    6478:	d100      	bne.n	647c <sendDataFrame+0xc8>
    647a:	e0be      	b.n	65fa <sendDataFrame+0x246>
    647c:	2320      	movs	r3, #32
    647e:	4642      	mov	r2, r8
    6480:	5cf3      	ldrb	r3, [r6, r3]
    6482:	7093      	strb	r3, [r2, #2]
    6484:	782b      	ldrb	r3, [r5, #0]
    6486:	3b01      	subs	r3, #1
    6488:	702b      	strb	r3, [r5, #0]
    648a:	2538      	movs	r5, #56	; 0x38
    648c:	0031      	movs	r1, r6
    648e:	5d72      	ldrb	r2, [r6, r5]
    6490:	3139      	adds	r1, #57	; 0x39
    6492:	4440      	add	r0, r8
    6494:	47c8      	blx	r9
    6496:	5d73      	ldrb	r3, [r6, r5]
    6498:	2028      	movs	r0, #40	; 0x28
    649a:	9304      	str	r3, [sp, #16]
    649c:	7cb3      	ldrb	r3, [r6, #18]
    649e:	9306      	str	r3, [sp, #24]
    64a0:	4b65      	ldr	r3, [pc, #404]	; (6638 <sendDataFrame+0x284>)
    64a2:	4798      	blx	r3
    64a4:	1e05      	subs	r5, r0, #0
    64a6:	d062      	beq.n	656e <sendDataFrame+0x1ba>
    64a8:	2300      	movs	r3, #0
    64aa:	7603      	strb	r3, [r0, #24]
    64ac:	7863      	ldrb	r3, [r4, #1]
    64ae:	075b      	lsls	r3, r3, #29
    64b0:	d500      	bpl.n	64b4 <sendDataFrame+0x100>
    64b2:	e0a7      	b.n	6604 <sendDataFrame+0x250>
    64b4:	9b03      	ldr	r3, [sp, #12]
    64b6:	785a      	ldrb	r2, [r3, #1]
    64b8:	781b      	ldrb	r3, [r3, #0]
    64ba:	0212      	lsls	r2, r2, #8
    64bc:	189b      	adds	r3, r3, r2
    64be:	4a62      	ldr	r2, [pc, #392]	; (6648 <sendDataFrame+0x294>)
    64c0:	b29b      	uxth	r3, r3
    64c2:	4293      	cmp	r3, r2
    64c4:	d100      	bne.n	64c8 <sendDataFrame+0x114>
    64c6:	e0b1      	b.n	662c <sendDataFrame+0x278>
    64c8:	2201      	movs	r2, #1
    64ca:	2100      	movs	r1, #0
    64cc:	2020      	movs	r0, #32
    64ce:	7e2b      	ldrb	r3, [r5, #24]
    64d0:	0152      	lsls	r2, r2, #5
    64d2:	4383      	bics	r3, r0
    64d4:	4313      	orrs	r3, r2
    64d6:	2204      	movs	r2, #4
    64d8:	0089      	lsls	r1, r1, #2
    64da:	4393      	bics	r3, r2
    64dc:	430b      	orrs	r3, r1
    64de:	2108      	movs	r1, #8
    64e0:	438b      	bics	r3, r1
    64e2:	762b      	strb	r3, [r5, #24]
    64e4:	4653      	mov	r3, sl
    64e6:	8819      	ldrh	r1, [r3, #0]
    64e8:	4b57      	ldr	r3, [pc, #348]	; (6648 <sendDataFrame+0x294>)
    64ea:	4299      	cmp	r1, r3
    64ec:	d100      	bne.n	64f0 <sendDataFrame+0x13c>
    64ee:	e09b      	b.n	6628 <sendDataFrame+0x274>
    64f0:	7861      	ldrb	r1, [r4, #1]
    64f2:	2301      	movs	r3, #1
    64f4:	420a      	tst	r2, r1
    64f6:	d007      	beq.n	6508 <sendDataFrame+0x154>
    64f8:	2100      	movs	r1, #0
    64fa:	4a54      	ldr	r2, [pc, #336]	; (664c <sendDataFrame+0x298>)
    64fc:	7812      	ldrb	r2, [r2, #0]
    64fe:	3a06      	subs	r2, #6
    6500:	b2d2      	uxtb	r2, r2
    6502:	4293      	cmp	r3, r2
    6504:	4149      	adcs	r1, r1
    6506:	b2cb      	uxtb	r3, r1
    6508:	2221      	movs	r2, #33	; 0x21
    650a:	54ab      	strb	r3, [r5, r2]
    650c:	2320      	movs	r3, #32
    650e:	2001      	movs	r0, #1
    6510:	3a20      	subs	r2, #32
    6512:	54ea      	strb	r2, [r5, r3]
    6514:	7e2b      	ldrb	r3, [r5, #24]
    6516:	0899      	lsrs	r1, r3, #2
    6518:	4041      	eors	r1, r0
    651a:	400a      	ands	r2, r1
    651c:	2140      	movs	r1, #64	; 0x40
    651e:	0192      	lsls	r2, r2, #6
    6520:	438b      	bics	r3, r1
    6522:	4313      	orrs	r3, r2
    6524:	2280      	movs	r2, #128	; 0x80
    6526:	4252      	negs	r2, r2
    6528:	4313      	orrs	r3, r2
    652a:	762b      	strb	r3, [r5, #24]
    652c:	8863      	ldrh	r3, [r4, #2]
    652e:	002c      	movs	r4, r5
    6530:	846b      	strh	r3, [r5, #34]	; 0x22
    6532:	4643      	mov	r3, r8
    6534:	3408      	adds	r4, #8
    6536:	616b      	str	r3, [r5, #20]
    6538:	3282      	adds	r2, #130	; 0x82
    653a:	9903      	ldr	r1, [sp, #12]
    653c:	0020      	movs	r0, r4
    653e:	47c8      	blx	r9
    6540:	465b      	mov	r3, fp
    6542:	466a      	mov	r2, sp
    6544:	612b      	str	r3, [r5, #16]
    6546:	2325      	movs	r3, #37	; 0x25
    6548:	7e12      	ldrb	r2, [r2, #24]
    654a:	61ec      	str	r4, [r5, #28]
    654c:	54ea      	strb	r2, [r5, r3]
    654e:	9a04      	ldr	r2, [sp, #16]
    6550:	9b05      	ldr	r3, [sp, #20]
    6552:	4694      	mov	ip, r2
    6554:	4463      	add	r3, ip
    6556:	0018      	movs	r0, r3
    6558:	2324      	movs	r3, #36	; 0x24
    655a:	0029      	movs	r1, r5
    655c:	54e8      	strb	r0, [r5, r3]
    655e:	483c      	ldr	r0, [pc, #240]	; (6650 <sendDataFrame+0x29c>)
    6560:	4b3c      	ldr	r3, [pc, #240]	; (6654 <sendDataFrame+0x2a0>)
    6562:	4798      	blx	r3
    6564:	2001      	movs	r0, #1
    6566:	e007      	b.n	6578 <sendDataFrame+0x1c4>
    6568:	465b      	mov	r3, fp
    656a:	2b00      	cmp	r3, #0
    656c:	d003      	beq.n	6576 <sendDataFrame+0x1c2>
    656e:	7cb0      	ldrb	r0, [r6, #18]
    6570:	0032      	movs	r2, r6
    6572:	2101      	movs	r1, #1
    6574:	47d8      	blx	fp
    6576:	2000      	movs	r0, #0
    6578:	b011      	add	sp, #68	; 0x44
    657a:	bc3c      	pop	{r2, r3, r4, r5}
    657c:	4690      	mov	r8, r2
    657e:	4699      	mov	r9, r3
    6580:	46a2      	mov	sl, r4
    6582:	46ab      	mov	fp, r5
    6584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6586:	4641      	mov	r1, r8
    6588:	8862      	ldrh	r2, [r4, #2]
    658a:	38f6      	subs	r0, #246	; 0xf6
    658c:	70ca      	strb	r2, [r1, #3]
    658e:	8862      	ldrh	r2, [r4, #2]
    6590:	0a12      	lsrs	r2, r2, #8
    6592:	710a      	strb	r2, [r1, #4]
    6594:	88a2      	ldrh	r2, [r4, #4]
    6596:	714a      	strb	r2, [r1, #5]
    6598:	88a2      	ldrh	r2, [r4, #4]
    659a:	0a12      	lsrs	r2, r2, #8
    659c:	718a      	strb	r2, [r1, #6]
    659e:	88e2      	ldrh	r2, [r4, #6]
    65a0:	71ca      	strb	r2, [r1, #7]
    65a2:	88e2      	ldrh	r2, [r4, #6]
    65a4:	0a12      	lsrs	r2, r2, #8
    65a6:	720a      	strb	r2, [r1, #8]
    65a8:	2216      	movs	r2, #22
    65aa:	2109      	movs	r1, #9
    65ac:	0017      	movs	r7, r2
    65ae:	9204      	str	r2, [sp, #16]
    65b0:	3a08      	subs	r2, #8
    65b2:	9206      	str	r2, [sp, #24]
    65b4:	9105      	str	r1, [sp, #20]
    65b6:	3a04      	subs	r2, #4
    65b8:	075b      	lsls	r3, r3, #29
    65ba:	d400      	bmi.n	65be <sendDataFrame+0x20a>
    65bc:	e758      	b.n	6470 <sendDataFrame+0xbc>
    65be:	4b26      	ldr	r3, [pc, #152]	; (6658 <sendDataFrame+0x2a4>)
    65c0:	4442      	add	r2, r8
    65c2:	6819      	ldr	r1, [r3, #0]
    65c4:	2320      	movs	r3, #32
    65c6:	5ccb      	ldrb	r3, [r1, r3]
    65c8:	4924      	ldr	r1, [pc, #144]	; (665c <sendDataFrame+0x2a8>)
    65ca:	7423      	strb	r3, [r4, #16]
    65cc:	6809      	ldr	r1, [r1, #0]
    65ce:	6161      	str	r1, [r4, #20]
    65d0:	4641      	mov	r1, r8
    65d2:	540b      	strb	r3, [r1, r0]
    65d4:	4b1b      	ldr	r3, [pc, #108]	; (6644 <sendDataFrame+0x290>)
    65d6:	0010      	movs	r0, r2
    65d8:	a90d      	add	r1, sp, #52	; 0x34
    65da:	2204      	movs	r2, #4
    65dc:	4699      	mov	r9, r3
    65de:	4798      	blx	r3
    65e0:	9b06      	ldr	r3, [sp, #24]
    65e2:	2208      	movs	r2, #8
    65e4:	4443      	add	r3, r8
    65e6:	0018      	movs	r0, r3
    65e8:	491d      	ldr	r1, [pc, #116]	; (6660 <sendDataFrame+0x2ac>)
    65ea:	47c8      	blx	r9
    65ec:	9b04      	ldr	r3, [sp, #16]
    65ee:	0038      	movs	r0, r7
    65f0:	9305      	str	r3, [sp, #20]
    65f2:	7cf3      	ldrb	r3, [r6, #19]
    65f4:	2b00      	cmp	r3, #0
    65f6:	d000      	beq.n	65fa <sendDataFrame+0x246>
    65f8:	e740      	b.n	647c <sendDataFrame+0xc8>
    65fa:	4643      	mov	r3, r8
    65fc:	789a      	ldrb	r2, [r3, #2]
    65fe:	2320      	movs	r3, #32
    6600:	54f2      	strb	r2, [r6, r3]
    6602:	e742      	b.n	648a <sendDataFrame+0xd6>
    6604:	4b17      	ldr	r3, [pc, #92]	; (6664 <sendDataFrame+0x2b0>)
    6606:	2002      	movs	r0, #2
    6608:	4798      	blx	r3
    660a:	4643      	mov	r3, r8
    660c:	9000      	str	r0, [sp, #0]
    660e:	9a04      	ldr	r2, [sp, #16]
    6610:	9905      	ldr	r1, [sp, #20]
    6612:	0020      	movs	r0, r4
    6614:	4f14      	ldr	r7, [pc, #80]	; (6668 <sendDataFrame+0x2b4>)
    6616:	47b8      	blx	r7
    6618:	28ff      	cmp	r0, #255	; 0xff
    661a:	d0a8      	beq.n	656e <sendDataFrame+0x1ba>
    661c:	9b04      	ldr	r3, [sp, #16]
    661e:	469c      	mov	ip, r3
    6620:	4460      	add	r0, ip
    6622:	b2c3      	uxtb	r3, r0
    6624:	9304      	str	r3, [sp, #16]
    6626:	e745      	b.n	64b4 <sendDataFrame+0x100>
    6628:	2300      	movs	r3, #0
    662a:	e76d      	b.n	6508 <sendDataFrame+0x154>
    662c:	2200      	movs	r2, #0
    662e:	2101      	movs	r1, #1
    6630:	e74c      	b.n	64cc <sendDataFrame+0x118>
    6632:	46c0      	nop			; (mov r8, r8)
    6634:	200013b4 	.word	0x200013b4
    6638:	00002fe1 	.word	0x00002fe1
    663c:	200013a0 	.word	0x200013a0
    6640:	20001388 	.word	0x20001388
    6644:	0000758b 	.word	0x0000758b
    6648:	0000ffff 	.word	0x0000ffff
    664c:	20000368 	.word	0x20000368
    6650:	200013a8 	.word	0x200013a8
    6654:	00003109 	.word	0x00003109
    6658:	20001370 	.word	0x20001370
    665c:	200013f0 	.word	0x200013f0
    6660:	2000004c 	.word	0x2000004c
    6664:	00007001 	.word	0x00007001
    6668:	00007025 	.word	0x00007025

0000666c <establishTimerExpired>:
    666c:	2205      	movs	r2, #5
    666e:	b510      	push	{r4, lr}
    6670:	4b04      	ldr	r3, [pc, #16]	; (6684 <establishTimerExpired+0x18>)
    6672:	4c05      	ldr	r4, [pc, #20]	; (6688 <establishTimerExpired+0x1c>)
    6674:	701a      	strb	r2, [r3, #0]
    6676:	2004      	movs	r0, #4
    6678:	6823      	ldr	r3, [r4, #0]
    667a:	4798      	blx	r3
    667c:	2300      	movs	r3, #0
    667e:	6023      	str	r3, [r4, #0]
    6680:	bd10      	pop	{r4, pc}
    6682:	46c0      	nop			; (mov r8, r8)
    6684:	20000368 	.word	0x20000368
    6688:	20000388 	.word	0x20000388

0000668c <sendKeepAlive>:
    668c:	b570      	push	{r4, r5, r6, lr}
    668e:	2078      	movs	r0, #120	; 0x78
    6690:	b08c      	sub	sp, #48	; 0x30
    6692:	4b15      	ldr	r3, [pc, #84]	; (66e8 <sendKeepAlive+0x5c>)
    6694:	4798      	blx	r3
    6696:	1e04      	subs	r4, r0, #0
    6698:	d023      	beq.n	66e2 <sendKeepAlive+0x56>
    669a:	4b14      	ldr	r3, [pc, #80]	; (66ec <sendKeepAlive+0x60>)
    669c:	4e14      	ldr	r6, [pc, #80]	; (66f0 <sendKeepAlive+0x64>)
    669e:	8819      	ldrh	r1, [r3, #0]
    66a0:	8832      	ldrh	r2, [r6, #0]
    66a2:	b289      	uxth	r1, r1
    66a4:	ab04      	add	r3, sp, #16
    66a6:	20ff      	movs	r0, #255	; 0xff
    66a8:	4d12      	ldr	r5, [pc, #72]	; (66f4 <sendKeepAlive+0x68>)
    66aa:	47a8      	blx	r5
    66ac:	0021      	movs	r1, r4
    66ae:	4b12      	ldr	r3, [pc, #72]	; (66f8 <sendKeepAlive+0x6c>)
    66b0:	a804      	add	r0, sp, #16
    66b2:	4798      	blx	r3
    66b4:	2307      	movs	r3, #7
    66b6:	0005      	movs	r5, r0
    66b8:	5423      	strb	r3, [r4, r0]
    66ba:	3001      	adds	r0, #1
    66bc:	b2c0      	uxtb	r0, r0
    66be:	1820      	adds	r0, r4, r0
    66c0:	2208      	movs	r2, #8
    66c2:	490e      	ldr	r1, [pc, #56]	; (66fc <sendKeepAlive+0x70>)
    66c4:	4b0e      	ldr	r3, [pc, #56]	; (6700 <sendKeepAlive+0x74>)
    66c6:	4798      	blx	r3
    66c8:	4b0e      	ldr	r3, [pc, #56]	; (6704 <sendKeepAlive+0x78>)
    66ca:	9601      	str	r6, [sp, #4]
    66cc:	9303      	str	r3, [sp, #12]
    66ce:	2300      	movs	r3, #0
    66d0:	9302      	str	r3, [sp, #8]
    66d2:	3302      	adds	r3, #2
    66d4:	9300      	str	r3, [sp, #0]
    66d6:	2209      	movs	r2, #9
    66d8:	0023      	movs	r3, r4
    66da:	0029      	movs	r1, r5
    66dc:	a804      	add	r0, sp, #16
    66de:	4c0a      	ldr	r4, [pc, #40]	; (6708 <sendKeepAlive+0x7c>)
    66e0:	47a0      	blx	r4
    66e2:	b00c      	add	sp, #48	; 0x30
    66e4:	bd70      	pop	{r4, r5, r6, pc}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	00002fe1 	.word	0x00002fe1
    66ec:	200013b4 	.word	0x200013b4
    66f0:	20000054 	.word	0x20000054
    66f4:	00005d8d 	.word	0x00005d8d
    66f8:	00005db9 	.word	0x00005db9
    66fc:	2000004c 	.word	0x2000004c
    6700:	0000758b 	.word	0x0000758b
    6704:	00006b39 	.word	0x00006b39
    6708:	00005e51 	.word	0x00005e51

0000670c <ScanChannel>:
    670c:	b5f0      	push	{r4, r5, r6, r7, lr}
    670e:	46c6      	mov	lr, r8
    6710:	b500      	push	{lr}
    6712:	4c2d      	ldr	r4, [pc, #180]	; (67c8 <ScanChannel+0xbc>)
    6714:	b090      	sub	sp, #64	; 0x40
    6716:	7823      	ldrb	r3, [r4, #0]
    6718:	0005      	movs	r5, r0
    671a:	2b1a      	cmp	r3, #26
    671c:	d816      	bhi.n	674c <ScanChannel+0x40>
    671e:	2601      	movs	r6, #1
    6720:	4f2a      	ldr	r7, [pc, #168]	; (67cc <ScanChannel+0xc0>)
    6722:	e004      	b.n	672e <ScanChannel+0x22>
    6724:	3301      	adds	r3, #1
    6726:	b2db      	uxtb	r3, r3
    6728:	7023      	strb	r3, [r4, #0]
    672a:	2b1a      	cmp	r3, #26
    672c:	d80e      	bhi.n	674c <ScanChannel+0x40>
    672e:	686a      	ldr	r2, [r5, #4]
    6730:	40da      	lsrs	r2, r3
    6732:	4216      	tst	r6, r2
    6734:	d0f6      	beq.n	6724 <ScanChannel+0x18>
    6736:	0021      	movs	r1, r4
    6738:	2000      	movs	r0, #0
    673a:	47b8      	blx	r7
    673c:	2800      	cmp	r0, #0
    673e:	d114      	bne.n	676a <ScanChannel+0x5e>
    6740:	7823      	ldrb	r3, [r4, #0]
    6742:	3301      	adds	r3, #1
    6744:	b2db      	uxtb	r3, r3
    6746:	7023      	strb	r3, [r4, #0]
    6748:	2b1a      	cmp	r3, #26
    674a:	d9f0      	bls.n	672e <ScanChannel+0x22>
    674c:	2205      	movs	r2, #5
    674e:	4b20      	ldr	r3, [pc, #128]	; (67d0 <ScanChannel+0xc4>)
    6750:	4c20      	ldr	r4, [pc, #128]	; (67d4 <ScanChannel+0xc8>)
    6752:	701a      	strb	r2, [r3, #0]
    6754:	7868      	ldrb	r0, [r5, #1]
    6756:	6823      	ldr	r3, [r4, #0]
    6758:	0029      	movs	r1, r5
    675a:	4798      	blx	r3
    675c:	2300      	movs	r3, #0
    675e:	2000      	movs	r0, #0
    6760:	6023      	str	r3, [r4, #0]
    6762:	b010      	add	sp, #64	; 0x40
    6764:	bc04      	pop	{r2}
    6766:	4690      	mov	r8, r2
    6768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    676a:	ab02      	add	r3, sp, #8
    676c:	469c      	mov	ip, r3
    676e:	2516      	movs	r5, #22
    6770:	2301      	movs	r3, #1
    6772:	4465      	add	r5, ip
    6774:	425b      	negs	r3, r3
    6776:	802b      	strh	r3, [r5, #0]
    6778:	2078      	movs	r0, #120	; 0x78
    677a:	4b17      	ldr	r3, [pc, #92]	; (67d8 <ScanChannel+0xcc>)
    677c:	4798      	blx	r3
    677e:	0004      	movs	r4, r0
    6780:	200a      	movs	r0, #10
    6782:	2c00      	cmp	r4, #0
    6784:	d0ed      	beq.n	6762 <ScanChannel+0x56>
    6786:	af08      	add	r7, sp, #32
    6788:	9505      	str	r5, [sp, #20]
    678a:	882a      	ldrh	r2, [r5, #0]
    678c:	003b      	movs	r3, r7
    678e:	4913      	ldr	r1, [pc, #76]	; (67dc <ScanChannel+0xd0>)
    6790:	3809      	subs	r0, #9
    6792:	4d13      	ldr	r5, [pc, #76]	; (67e0 <ScanChannel+0xd4>)
    6794:	47a8      	blx	r5
    6796:	2220      	movs	r2, #32
    6798:	787b      	ldrb	r3, [r7, #1]
    679a:	0021      	movs	r1, r4
    679c:	4313      	orrs	r3, r2
    679e:	707b      	strb	r3, [r7, #1]
    67a0:	0038      	movs	r0, r7
    67a2:	4b10      	ldr	r3, [pc, #64]	; (67e4 <ScanChannel+0xd8>)
    67a4:	4798      	blx	r3
    67a6:	4b10      	ldr	r3, [pc, #64]	; (67e8 <ScanChannel+0xdc>)
    67a8:	5426      	strb	r6, [r4, r0]
    67aa:	9303      	str	r3, [sp, #12]
    67ac:	2300      	movs	r3, #0
    67ae:	9302      	str	r3, [sp, #8]
    67b0:	9b05      	ldr	r3, [sp, #20]
    67b2:	0001      	movs	r1, r0
    67b4:	9301      	str	r3, [sp, #4]
    67b6:	2302      	movs	r3, #2
    67b8:	2201      	movs	r2, #1
    67ba:	9300      	str	r3, [sp, #0]
    67bc:	0038      	movs	r0, r7
    67be:	0023      	movs	r3, r4
    67c0:	4c0a      	ldr	r4, [pc, #40]	; (67ec <ScanChannel+0xe0>)
    67c2:	47a0      	blx	r4
    67c4:	e7cd      	b.n	6762 <ScanChannel+0x56>
    67c6:	46c0      	nop			; (mov r8, r8)
    67c8:	20001380 	.word	0x20001380
    67cc:	00004a69 	.word	0x00004a69
    67d0:	20000368 	.word	0x20000368
    67d4:	2000038c 	.word	0x2000038c
    67d8:	00002fe1 	.word	0x00002fe1
    67dc:	0000ffff 	.word	0x0000ffff
    67e0:	00005d8d 	.word	0x00005d8d
    67e4:	00005db9 	.word	0x00005db9
    67e8:	000069a9 	.word	0x000069a9
    67ec:	00005e51 	.word	0x00005e51

000067f0 <scanDurationExpired>:
    67f0:	b510      	push	{r4, lr}
    67f2:	4b0d      	ldr	r3, [pc, #52]	; (6828 <scanDurationExpired+0x38>)
    67f4:	4c0d      	ldr	r4, [pc, #52]	; (682c <scanDurationExpired+0x3c>)
    67f6:	781a      	ldrb	r2, [r3, #0]
    67f8:	2301      	movs	r3, #1
    67fa:	4093      	lsls	r3, r2
    67fc:	6820      	ldr	r0, [r4, #0]
    67fe:	6842      	ldr	r2, [r0, #4]
    6800:	439a      	bics	r2, r3
    6802:	6042      	str	r2, [r0, #4]
    6804:	4b0a      	ldr	r3, [pc, #40]	; (6830 <scanDurationExpired+0x40>)
    6806:	4798      	blx	r3
    6808:	2800      	cmp	r0, #0
    680a:	d00b      	beq.n	6824 <scanDurationExpired+0x34>
    680c:	2205      	movs	r2, #5
    680e:	6823      	ldr	r3, [r4, #0]
    6810:	7018      	strb	r0, [r3, #0]
    6812:	4b08      	ldr	r3, [pc, #32]	; (6834 <scanDurationExpired+0x44>)
    6814:	6821      	ldr	r1, [r4, #0]
    6816:	4c08      	ldr	r4, [pc, #32]	; (6838 <scanDurationExpired+0x48>)
    6818:	701a      	strb	r2, [r3, #0]
    681a:	7848      	ldrb	r0, [r1, #1]
    681c:	6823      	ldr	r3, [r4, #0]
    681e:	4798      	blx	r3
    6820:	2300      	movs	r3, #0
    6822:	6023      	str	r3, [r4, #0]
    6824:	bd10      	pop	{r4, pc}
    6826:	46c0      	nop			; (mov r8, r8)
    6828:	20001380 	.word	0x20001380
    682c:	20000390 	.word	0x20000390
    6830:	0000670d 	.word	0x0000670d
    6834:	20000368 	.word	0x20000368
    6838:	2000038c 	.word	0x2000038c

0000683c <rxOffEdKeepAliveTimerHandler>:
    683c:	b5f0      	push	{r4, r5, r6, r7, lr}
    683e:	46ce      	mov	lr, r9
    6840:	4647      	mov	r7, r8
    6842:	22ff      	movs	r2, #255	; 0xff
    6844:	2516      	movs	r5, #22
    6846:	b580      	push	{r7, lr}
    6848:	4b23      	ldr	r3, [pc, #140]	; (68d8 <rxOffEdKeepAliveTimerHandler+0x9c>)
    684a:	b08f      	sub	sp, #60	; 0x3c
    684c:	4698      	mov	r8, r3
    684e:	881b      	ldrh	r3, [r3, #0]
    6850:	446d      	add	r5, sp
    6852:	4393      	bics	r3, r2
    6854:	802b      	strh	r3, [r5, #0]
    6856:	2078      	movs	r0, #120	; 0x78
    6858:	4b20      	ldr	r3, [pc, #128]	; (68dc <rxOffEdKeepAliveTimerHandler+0xa0>)
    685a:	4798      	blx	r3
    685c:	1e06      	subs	r6, r0, #0
    685e:	d035      	beq.n	68cc <rxOffEdKeepAliveTimerHandler+0x90>
    6860:	4c1f      	ldr	r4, [pc, #124]	; (68e0 <rxOffEdKeepAliveTimerHandler+0xa4>)
    6862:	4b20      	ldr	r3, [pc, #128]	; (68e4 <rxOffEdKeepAliveTimerHandler+0xa8>)
    6864:	0020      	movs	r0, r4
    6866:	4798      	blx	r3
    6868:	4b1f      	ldr	r3, [pc, #124]	; (68e8 <rxOffEdKeepAliveTimerHandler+0xac>)
    686a:	0020      	movs	r0, r4
    686c:	6123      	str	r3, [r4, #16]
    686e:	4b1f      	ldr	r3, [pc, #124]	; (68ec <rxOffEdKeepAliveTimerHandler+0xb0>)
    6870:	681b      	ldr	r3, [r3, #0]
    6872:	7a1a      	ldrb	r2, [r3, #8]
    6874:	23fa      	movs	r3, #250	; 0xfa
    6876:	009b      	lsls	r3, r3, #2
    6878:	4353      	muls	r3, r2
    687a:	6063      	str	r3, [r4, #4]
    687c:	60a3      	str	r3, [r4, #8]
    687e:	2300      	movs	r3, #0
    6880:	7323      	strb	r3, [r4, #12]
    6882:	4699      	mov	r9, r3
    6884:	4b1a      	ldr	r3, [pc, #104]	; (68f0 <rxOffEdKeepAliveTimerHandler+0xb4>)
    6886:	4798      	blx	r3
    6888:	4643      	mov	r3, r8
    688a:	8819      	ldrh	r1, [r3, #0]
    688c:	ac06      	add	r4, sp, #24
    688e:	0023      	movs	r3, r4
    6890:	b289      	uxth	r1, r1
    6892:	882a      	ldrh	r2, [r5, #0]
    6894:	2001      	movs	r0, #1
    6896:	4f17      	ldr	r7, [pc, #92]	; (68f4 <rxOffEdKeepAliveTimerHandler+0xb8>)
    6898:	47b8      	blx	r7
    689a:	2220      	movs	r2, #32
    689c:	7863      	ldrb	r3, [r4, #1]
    689e:	0031      	movs	r1, r6
    68a0:	4313      	orrs	r3, r2
    68a2:	22ef      	movs	r2, #239	; 0xef
    68a4:	4013      	ands	r3, r2
    68a6:	7063      	strb	r3, [r4, #1]
    68a8:	0020      	movs	r0, r4
    68aa:	4b13      	ldr	r3, [pc, #76]	; (68f8 <rxOffEdKeepAliveTimerHandler+0xbc>)
    68ac:	4798      	blx	r3
    68ae:	2331      	movs	r3, #49	; 0x31
    68b0:	5433      	strb	r3, [r6, r0]
    68b2:	4b12      	ldr	r3, [pc, #72]	; (68fc <rxOffEdKeepAliveTimerHandler+0xc0>)
    68b4:	0001      	movs	r1, r0
    68b6:	9303      	str	r3, [sp, #12]
    68b8:	464b      	mov	r3, r9
    68ba:	9302      	str	r3, [sp, #8]
    68bc:	3302      	adds	r3, #2
    68be:	9300      	str	r3, [sp, #0]
    68c0:	0020      	movs	r0, r4
    68c2:	9501      	str	r5, [sp, #4]
    68c4:	0033      	movs	r3, r6
    68c6:	2201      	movs	r2, #1
    68c8:	4c0d      	ldr	r4, [pc, #52]	; (6900 <rxOffEdKeepAliveTimerHandler+0xc4>)
    68ca:	47a0      	blx	r4
    68cc:	b00f      	add	sp, #60	; 0x3c
    68ce:	bc0c      	pop	{r2, r3}
    68d0:	4690      	mov	r8, r2
    68d2:	4699      	mov	r9, r3
    68d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68d6:	46c0      	nop			; (mov r8, r8)
    68d8:	200013b4 	.word	0x200013b4
    68dc:	00002fe1 	.word	0x00002fe1
    68e0:	200013b8 	.word	0x200013b8
    68e4:	00003205 	.word	0x00003205
    68e8:	0000683d 	.word	0x0000683d
    68ec:	2000136c 	.word	0x2000136c
    68f0:	00003271 	.word	0x00003271
    68f4:	00005d8d 	.word	0x00005d8d
    68f8:	00005db9 	.word	0x00005db9
    68fc:	00006a65 	.word	0x00006a65
    6900:	00005e51 	.word	0x00005e51

00006904 <dataWaitIntervalTimerHandler>:
    6904:	b570      	push	{r4, r5, r6, lr}
    6906:	2500      	movs	r5, #0
    6908:	4c0a      	ldr	r4, [pc, #40]	; (6934 <dataWaitIntervalTimerHandler+0x30>)
    690a:	4b0b      	ldr	r3, [pc, #44]	; (6938 <dataWaitIntervalTimerHandler+0x34>)
    690c:	0020      	movs	r0, r4
    690e:	701d      	strb	r5, [r3, #0]
    6910:	4b0a      	ldr	r3, [pc, #40]	; (693c <dataWaitIntervalTimerHandler+0x38>)
    6912:	4798      	blx	r3
    6914:	4b0a      	ldr	r3, [pc, #40]	; (6940 <dataWaitIntervalTimerHandler+0x3c>)
    6916:	0020      	movs	r0, r4
    6918:	6123      	str	r3, [r4, #16]
    691a:	4b0a      	ldr	r3, [pc, #40]	; (6944 <dataWaitIntervalTimerHandler+0x40>)
    691c:	681b      	ldr	r3, [r3, #0]
    691e:	7a1a      	ldrb	r2, [r3, #8]
    6920:	23fa      	movs	r3, #250	; 0xfa
    6922:	009b      	lsls	r3, r3, #2
    6924:	4353      	muls	r3, r2
    6926:	6063      	str	r3, [r4, #4]
    6928:	60a3      	str	r3, [r4, #8]
    692a:	4b07      	ldr	r3, [pc, #28]	; (6948 <dataWaitIntervalTimerHandler+0x44>)
    692c:	7325      	strb	r5, [r4, #12]
    692e:	4798      	blx	r3
    6930:	bd70      	pop	{r4, r5, r6, pc}
    6932:	46c0      	nop			; (mov r8, r8)
    6934:	200013b8 	.word	0x200013b8
    6938:	20000384 	.word	0x20000384
    693c:	00003205 	.word	0x00003205
    6940:	0000683d 	.word	0x0000683d
    6944:	2000136c 	.word	0x2000136c
    6948:	00003271 	.word	0x00003271

0000694c <EstcommandConfcb>:
    694c:	b570      	push	{r4, r5, r6, lr}
    694e:	0010      	movs	r0, r2
    6950:	4b0e      	ldr	r3, [pc, #56]	; (698c <EstcommandConfcb+0x40>)
    6952:	000c      	movs	r4, r1
    6954:	4798      	blx	r3
    6956:	2c00      	cmp	r4, #0
    6958:	d009      	beq.n	696e <EstcommandConfcb+0x22>
    695a:	2205      	movs	r2, #5
    695c:	4b0c      	ldr	r3, [pc, #48]	; (6990 <EstcommandConfcb+0x44>)
    695e:	4d0d      	ldr	r5, [pc, #52]	; (6994 <EstcommandConfcb+0x48>)
    6960:	701a      	strb	r2, [r3, #0]
    6962:	0020      	movs	r0, r4
    6964:	682b      	ldr	r3, [r5, #0]
    6966:	4798      	blx	r3
    6968:	2300      	movs	r3, #0
    696a:	602b      	str	r3, [r5, #0]
    696c:	bd70      	pop	{r4, r5, r6, pc}
    696e:	480a      	ldr	r0, [pc, #40]	; (6998 <EstcommandConfcb+0x4c>)
    6970:	4b0a      	ldr	r3, [pc, #40]	; (699c <EstcommandConfcb+0x50>)
    6972:	6103      	str	r3, [r0, #16]
    6974:	4b0a      	ldr	r3, [pc, #40]	; (69a0 <EstcommandConfcb+0x54>)
    6976:	681b      	ldr	r3, [r3, #0]
    6978:	7a9a      	ldrb	r2, [r3, #10]
    697a:	23fa      	movs	r3, #250	; 0xfa
    697c:	009b      	lsls	r3, r3, #2
    697e:	4353      	muls	r3, r2
    6980:	6043      	str	r3, [r0, #4]
    6982:	6083      	str	r3, [r0, #8]
    6984:	4b07      	ldr	r3, [pc, #28]	; (69a4 <EstcommandConfcb+0x58>)
    6986:	7304      	strb	r4, [r0, #12]
    6988:	4798      	blx	r3
    698a:	e7ef      	b.n	696c <EstcommandConfcb+0x20>
    698c:	00003029 	.word	0x00003029
    6990:	20000368 	.word	0x20000368
    6994:	20000388 	.word	0x20000388
    6998:	200013d0 	.word	0x200013d0
    699c:	0000666d 	.word	0x0000666d
    69a0:	2000136c 	.word	0x2000136c
    69a4:	00003271 	.word	0x00003271

000069a8 <beaconReqConfcb>:
    69a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69aa:	46ce      	mov	lr, r9
    69ac:	4647      	mov	r7, r8
    69ae:	0010      	movs	r0, r2
    69b0:	b580      	push	{r7, lr}
    69b2:	4b21      	ldr	r3, [pc, #132]	; (6a38 <beaconReqConfcb+0x90>)
    69b4:	000d      	movs	r5, r1
    69b6:	4798      	blx	r3
    69b8:	2d00      	cmp	r5, #0
    69ba:	d016      	beq.n	69ea <beaconReqConfcb+0x42>
    69bc:	4c1f      	ldr	r4, [pc, #124]	; (6a3c <beaconReqConfcb+0x94>)
    69be:	4b20      	ldr	r3, [pc, #128]	; (6a40 <beaconReqConfcb+0x98>)
    69c0:	6820      	ldr	r0, [r4, #0]
    69c2:	4798      	blx	r3
    69c4:	2800      	cmp	r0, #0
    69c6:	d103      	bne.n	69d0 <beaconReqConfcb+0x28>
    69c8:	bc0c      	pop	{r2, r3}
    69ca:	4690      	mov	r8, r2
    69cc:	4699      	mov	r9, r3
    69ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69d0:	2205      	movs	r2, #5
    69d2:	6823      	ldr	r3, [r4, #0]
    69d4:	7018      	strb	r0, [r3, #0]
    69d6:	4b1b      	ldr	r3, [pc, #108]	; (6a44 <beaconReqConfcb+0x9c>)
    69d8:	6821      	ldr	r1, [r4, #0]
    69da:	4c1b      	ldr	r4, [pc, #108]	; (6a48 <beaconReqConfcb+0xa0>)
    69dc:	701a      	strb	r2, [r3, #0]
    69de:	7848      	ldrb	r0, [r1, #1]
    69e0:	6823      	ldr	r3, [r4, #0]
    69e2:	4798      	blx	r3
    69e4:	2300      	movs	r3, #0
    69e6:	6023      	str	r3, [r4, #0]
    69e8:	e7ee      	b.n	69c8 <beaconReqConfcb+0x20>
    69ea:	2401      	movs	r4, #1
    69ec:	0022      	movs	r2, r4
    69ee:	4e17      	ldr	r6, [pc, #92]	; (6a4c <beaconReqConfcb+0xa4>)
    69f0:	4b17      	ldr	r3, [pc, #92]	; (6a50 <beaconReqConfcb+0xa8>)
    69f2:	6133      	str	r3, [r6, #16]
    69f4:	4b17      	ldr	r3, [pc, #92]	; (6a54 <beaconReqConfcb+0xac>)
    69f6:	4699      	mov	r9, r3
    69f8:	781b      	ldrb	r3, [r3, #0]
    69fa:	409a      	lsls	r2, r3
    69fc:	0013      	movs	r3, r2
    69fe:	3301      	adds	r3, #1
    6a00:	0118      	lsls	r0, r3, #4
    6a02:	1ac0      	subs	r0, r0, r3
    6a04:	4b14      	ldr	r3, [pc, #80]	; (6a58 <beaconReqConfcb+0xb0>)
    6a06:	0180      	lsls	r0, r0, #6
    6a08:	4698      	mov	r8, r3
    6a0a:	4798      	blx	r3
    6a0c:	21fa      	movs	r1, #250	; 0xfa
    6a0e:	4f13      	ldr	r7, [pc, #76]	; (6a5c <beaconReqConfcb+0xb4>)
    6a10:	0089      	lsls	r1, r1, #2
    6a12:	47b8      	blx	r7
    6a14:	464b      	mov	r3, r9
    6a16:	781b      	ldrb	r3, [r3, #0]
    6a18:	6070      	str	r0, [r6, #4]
    6a1a:	409c      	lsls	r4, r3
    6a1c:	3401      	adds	r4, #1
    6a1e:	0120      	lsls	r0, r4, #4
    6a20:	1b00      	subs	r0, r0, r4
    6a22:	0180      	lsls	r0, r0, #6
    6a24:	47c0      	blx	r8
    6a26:	21fa      	movs	r1, #250	; 0xfa
    6a28:	0089      	lsls	r1, r1, #2
    6a2a:	47b8      	blx	r7
    6a2c:	4b0c      	ldr	r3, [pc, #48]	; (6a60 <beaconReqConfcb+0xb8>)
    6a2e:	60b0      	str	r0, [r6, #8]
    6a30:	0030      	movs	r0, r6
    6a32:	7335      	strb	r5, [r6, #12]
    6a34:	4798      	blx	r3
    6a36:	e7c7      	b.n	69c8 <beaconReqConfcb+0x20>
    6a38:	00003029 	.word	0x00003029
    6a3c:	20000390 	.word	0x20000390
    6a40:	0000670d 	.word	0x0000670d
    6a44:	20000368 	.word	0x20000368
    6a48:	2000038c 	.word	0x2000038c
    6a4c:	200013d0 	.word	0x200013d0
    6a50:	000067f1 	.word	0x000067f1
    6a54:	200013cd 	.word	0x200013cd
    6a58:	00002839 	.word	0x00002839
    6a5c:	000071e5 	.word	0x000071e5
    6a60:	00003271 	.word	0x00003271

00006a64 <dataReqConfcb>:
    6a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a66:	0010      	movs	r0, r2
    6a68:	4b26      	ldr	r3, [pc, #152]	; (6b04 <dataReqConfcb+0xa0>)
    6a6a:	000c      	movs	r4, r1
    6a6c:	4798      	blx	r3
    6a6e:	2c00      	cmp	r4, #0
    6a70:	d11b      	bne.n	6aaa <dataReqConfcb+0x46>
    6a72:	4b25      	ldr	r3, [pc, #148]	; (6b08 <dataReqConfcb+0xa4>)
    6a74:	2514      	movs	r5, #20
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	2b0a      	cmp	r3, #10
    6a7a:	d800      	bhi.n	6a7e <dataReqConfcb+0x1a>
    6a7c:	351e      	adds	r5, #30
    6a7e:	4c23      	ldr	r4, [pc, #140]	; (6b0c <dataReqConfcb+0xa8>)
    6a80:	4b23      	ldr	r3, [pc, #140]	; (6b10 <dataReqConfcb+0xac>)
    6a82:	0020      	movs	r0, r4
    6a84:	4798      	blx	r3
    6a86:	4b23      	ldr	r3, [pc, #140]	; (6b14 <dataReqConfcb+0xb0>)
    6a88:	0020      	movs	r0, r4
    6a8a:	6123      	str	r3, [r4, #16]
    6a8c:	2300      	movs	r3, #0
    6a8e:	7323      	strb	r3, [r4, #12]
    6a90:	4b21      	ldr	r3, [pc, #132]	; (6b18 <dataReqConfcb+0xb4>)
    6a92:	6065      	str	r5, [r4, #4]
    6a94:	60a5      	str	r5, [r4, #8]
    6a96:	4798      	blx	r3
    6a98:	2201      	movs	r2, #1
    6a9a:	4b20      	ldr	r3, [pc, #128]	; (6b1c <dataReqConfcb+0xb8>)
    6a9c:	4e20      	ldr	r6, [pc, #128]	; (6b20 <dataReqConfcb+0xbc>)
    6a9e:	701a      	strb	r2, [r3, #0]
    6aa0:	6833      	ldr	r3, [r6, #0]
    6aa2:	7a5a      	ldrb	r2, [r3, #9]
    6aa4:	4b1f      	ldr	r3, [pc, #124]	; (6b24 <dataReqConfcb+0xc0>)
    6aa6:	701a      	strb	r2, [r3, #0]
    6aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6aaa:	4d18      	ldr	r5, [pc, #96]	; (6b0c <dataReqConfcb+0xa8>)
    6aac:	4f18      	ldr	r7, [pc, #96]	; (6b10 <dataReqConfcb+0xac>)
    6aae:	0028      	movs	r0, r5
    6ab0:	47b8      	blx	r7
    6ab2:	4b1d      	ldr	r3, [pc, #116]	; (6b28 <dataReqConfcb+0xc4>)
    6ab4:	4e1a      	ldr	r6, [pc, #104]	; (6b20 <dataReqConfcb+0xbc>)
    6ab6:	612b      	str	r3, [r5, #16]
    6ab8:	6833      	ldr	r3, [r6, #0]
    6aba:	0028      	movs	r0, r5
    6abc:	7a1a      	ldrb	r2, [r3, #8]
    6abe:	23fa      	movs	r3, #250	; 0xfa
    6ac0:	009b      	lsls	r3, r3, #2
    6ac2:	4353      	muls	r3, r2
    6ac4:	606b      	str	r3, [r5, #4]
    6ac6:	60ab      	str	r3, [r5, #8]
    6ac8:	2300      	movs	r3, #0
    6aca:	732b      	strb	r3, [r5, #12]
    6acc:	4b12      	ldr	r3, [pc, #72]	; (6b18 <dataReqConfcb+0xb4>)
    6ace:	4798      	blx	r3
    6ad0:	2c03      	cmp	r4, #3
    6ad2:	d1e5      	bne.n	6aa0 <dataReqConfcb+0x3c>
    6ad4:	4a13      	ldr	r2, [pc, #76]	; (6b24 <dataReqConfcb+0xc0>)
    6ad6:	7813      	ldrb	r3, [r2, #0]
    6ad8:	2b00      	cmp	r3, #0
    6ada:	d0e5      	beq.n	6aa8 <dataReqConfcb+0x44>
    6adc:	3b01      	subs	r3, #1
    6ade:	b2db      	uxtb	r3, r3
    6ae0:	7013      	strb	r3, [r2, #0]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d1e0      	bne.n	6aa8 <dataReqConfcb+0x44>
    6ae6:	0028      	movs	r0, r5
    6ae8:	47b8      	blx	r7
    6aea:	2208      	movs	r2, #8
    6aec:	4b0f      	ldr	r3, [pc, #60]	; (6b2c <dataReqConfcb+0xc8>)
    6aee:	701a      	strb	r2, [r3, #0]
    6af0:	4b0f      	ldr	r3, [pc, #60]	; (6b30 <dataReqConfcb+0xcc>)
    6af2:	3a09      	subs	r2, #9
    6af4:	801a      	strh	r2, [r3, #0]
    6af6:	4b0f      	ldr	r3, [pc, #60]	; (6b34 <dataReqConfcb+0xd0>)
    6af8:	681b      	ldr	r3, [r3, #0]
    6afa:	2b00      	cmp	r3, #0
    6afc:	d0d4      	beq.n	6aa8 <dataReqConfcb+0x44>
    6afe:	4798      	blx	r3
    6b00:	e7d2      	b.n	6aa8 <dataReqConfcb+0x44>
    6b02:	46c0      	nop			; (mov r8, r8)
    6b04:	00003029 	.word	0x00003029
    6b08:	20001380 	.word	0x20001380
    6b0c:	200013b8 	.word	0x200013b8
    6b10:	00003205 	.word	0x00003205
    6b14:	00006905 	.word	0x00006905
    6b18:	00003271 	.word	0x00003271
    6b1c:	20000384 	.word	0x20000384
    6b20:	2000136c 	.word	0x2000136c
    6b24:	200013cc 	.word	0x200013cc
    6b28:	0000683d 	.word	0x0000683d
    6b2c:	20000368 	.word	0x20000368
    6b30:	200013b4 	.word	0x200013b4
    6b34:	200013ec 	.word	0x200013ec

00006b38 <keepAliveReqConfcb>:
    6b38:	b570      	push	{r4, r5, r6, lr}
    6b3a:	0015      	movs	r5, r2
    6b3c:	22ff      	movs	r2, #255	; 0xff
    6b3e:	4c14      	ldr	r4, [pc, #80]	; (6b90 <keepAliveReqConfcb+0x58>)
    6b40:	8823      	ldrh	r3, [r4, #0]
    6b42:	421a      	tst	r2, r3
    6b44:	d103      	bne.n	6b4e <keepAliveReqConfcb+0x16>
    6b46:	0028      	movs	r0, r5
    6b48:	4b12      	ldr	r3, [pc, #72]	; (6b94 <keepAliveReqConfcb+0x5c>)
    6b4a:	4798      	blx	r3
    6b4c:	bd70      	pop	{r4, r5, r6, pc}
    6b4e:	2903      	cmp	r1, #3
    6b50:	d005      	beq.n	6b5e <keepAliveReqConfcb+0x26>
    6b52:	4b11      	ldr	r3, [pc, #68]	; (6b98 <keepAliveReqConfcb+0x60>)
    6b54:	681b      	ldr	r3, [r3, #0]
    6b56:	7a5a      	ldrb	r2, [r3, #9]
    6b58:	4b10      	ldr	r3, [pc, #64]	; (6b9c <keepAliveReqConfcb+0x64>)
    6b5a:	701a      	strb	r2, [r3, #0]
    6b5c:	e7f3      	b.n	6b46 <keepAliveReqConfcb+0xe>
    6b5e:	4a0f      	ldr	r2, [pc, #60]	; (6b9c <keepAliveReqConfcb+0x64>)
    6b60:	7813      	ldrb	r3, [r2, #0]
    6b62:	2b00      	cmp	r3, #0
    6b64:	d0ef      	beq.n	6b46 <keepAliveReqConfcb+0xe>
    6b66:	3b01      	subs	r3, #1
    6b68:	b2db      	uxtb	r3, r3
    6b6a:	7013      	strb	r3, [r2, #0]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d1ea      	bne.n	6b46 <keepAliveReqConfcb+0xe>
    6b70:	4b0b      	ldr	r3, [pc, #44]	; (6ba0 <keepAliveReqConfcb+0x68>)
    6b72:	480c      	ldr	r0, [pc, #48]	; (6ba4 <keepAliveReqConfcb+0x6c>)
    6b74:	4798      	blx	r3
    6b76:	2208      	movs	r2, #8
    6b78:	4b0b      	ldr	r3, [pc, #44]	; (6ba8 <keepAliveReqConfcb+0x70>)
    6b7a:	701a      	strb	r2, [r3, #0]
    6b7c:	2301      	movs	r3, #1
    6b7e:	425b      	negs	r3, r3
    6b80:	8023      	strh	r3, [r4, #0]
    6b82:	4b0a      	ldr	r3, [pc, #40]	; (6bac <keepAliveReqConfcb+0x74>)
    6b84:	681b      	ldr	r3, [r3, #0]
    6b86:	2b00      	cmp	r3, #0
    6b88:	d0dd      	beq.n	6b46 <keepAliveReqConfcb+0xe>
    6b8a:	4798      	blx	r3
    6b8c:	e7db      	b.n	6b46 <keepAliveReqConfcb+0xe>
    6b8e:	46c0      	nop			; (mov r8, r8)
    6b90:	200013b4 	.word	0x200013b4
    6b94:	00003029 	.word	0x00003029
    6b98:	2000136c 	.word	0x2000136c
    6b9c:	200013cc 	.word	0x200013cc
    6ba0:	00003205 	.word	0x00003205
    6ba4:	200013b8 	.word	0x200013b8
    6ba8:	20000368 	.word	0x20000368
    6bac:	200013ec 	.word	0x200013ec

00006bb0 <MiApp_EstablishConnection>:
    6bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bb2:	46ce      	mov	lr, r9
    6bb4:	4647      	mov	r7, r8
    6bb6:	b580      	push	{r7, lr}
    6bb8:	001e      	movs	r6, r3
    6bba:	4b2e      	ldr	r3, [pc, #184]	; (6c74 <MiApp_EstablishConnection+0xc4>)
    6bbc:	b08f      	sub	sp, #60	; 0x3c
    6bbe:	681b      	ldr	r3, [r3, #0]
    6bc0:	0004      	movs	r4, r0
    6bc2:	681b      	ldr	r3, [r3, #0]
    6bc4:	0015      	movs	r5, r2
    6bc6:	9305      	str	r3, [sp, #20]
    6bc8:	4b2b      	ldr	r3, [pc, #172]	; (6c78 <MiApp_EstablishConnection+0xc8>)
    6bca:	4798      	blx	r3
    6bcc:	40e0      	lsrs	r0, r4
    6bce:	2401      	movs	r4, #1
    6bd0:	07c3      	lsls	r3, r0, #31
    6bd2:	d507      	bpl.n	6be4 <MiApp_EstablishConnection+0x34>
    6bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d004      	beq.n	6be4 <MiApp_EstablishConnection+0x34>
    6bda:	4f28      	ldr	r7, [pc, #160]	; (6c7c <MiApp_EstablishConnection+0xcc>)
    6bdc:	783b      	ldrb	r3, [r7, #0]
    6bde:	2b00      	cmp	r3, #0
    6be0:	d106      	bne.n	6bf0 <MiApp_EstablishConnection+0x40>
    6be2:	2400      	movs	r4, #0
    6be4:	0020      	movs	r0, r4
    6be6:	b00f      	add	sp, #60	; 0x3c
    6be8:	bc0c      	pop	{r2, r3}
    6bea:	4690      	mov	r8, r2
    6bec:	4699      	mov	r9, r3
    6bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bf0:	2078      	movs	r0, #120	; 0x78
    6bf2:	4b23      	ldr	r3, [pc, #140]	; (6c80 <MiApp_EstablishConnection+0xd0>)
    6bf4:	4798      	blx	r3
    6bf6:	4680      	mov	r8, r0
    6bf8:	2800      	cmp	r0, #0
    6bfa:	d0f2      	beq.n	6be2 <MiApp_EstablishConnection+0x32>
    6bfc:	2304      	movs	r3, #4
    6bfe:	703b      	strb	r3, [r7, #0]
    6c00:	786b      	ldrb	r3, [r5, #1]
    6c02:	782a      	ldrb	r2, [r5, #0]
    6c04:	021b      	lsls	r3, r3, #8
    6c06:	18d2      	adds	r2, r2, r3
    6c08:	b292      	uxth	r2, r2
    6c0a:	ab06      	add	r3, sp, #24
    6c0c:	491d      	ldr	r1, [pc, #116]	; (6c84 <MiApp_EstablishConnection+0xd4>)
    6c0e:	2001      	movs	r0, #1
    6c10:	4f1d      	ldr	r7, [pc, #116]	; (6c88 <MiApp_EstablishConnection+0xd8>)
    6c12:	47b8      	blx	r7
    6c14:	466b      	mov	r3, sp
    6c16:	2220      	movs	r2, #32
    6c18:	7e5b      	ldrb	r3, [r3, #25]
    6c1a:	4641      	mov	r1, r8
    6c1c:	4313      	orrs	r3, r2
    6c1e:	466a      	mov	r2, sp
    6c20:	a806      	add	r0, sp, #24
    6c22:	7653      	strb	r3, [r2, #25]
    6c24:	4b19      	ldr	r3, [pc, #100]	; (6c8c <MiApp_EstablishConnection+0xdc>)
    6c26:	4798      	blx	r3
    6c28:	4642      	mov	r2, r8
    6c2a:	2303      	movs	r3, #3
    6c2c:	5413      	strb	r3, [r2, r0]
    6c2e:	0003      	movs	r3, r0
    6c30:	3301      	adds	r3, #1
    6c32:	b2db      	uxtb	r3, r3
    6c34:	54d4      	strb	r4, [r2, r3]
    6c36:	0003      	movs	r3, r0
    6c38:	4681      	mov	r9, r0
    6c3a:	3302      	adds	r3, #2
    6c3c:	3003      	adds	r0, #3
    6c3e:	b2db      	uxtb	r3, r3
    6c40:	b2c0      	uxtb	r0, r0
    6c42:	54d6      	strb	r6, [r2, r3]
    6c44:	a905      	add	r1, sp, #20
    6c46:	2204      	movs	r2, #4
    6c48:	4b11      	ldr	r3, [pc, #68]	; (6c90 <MiApp_EstablishConnection+0xe0>)
    6c4a:	4440      	add	r0, r8
    6c4c:	4798      	blx	r3
    6c4e:	4b11      	ldr	r3, [pc, #68]	; (6c94 <MiApp_EstablishConnection+0xe4>)
    6c50:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6c52:	4c11      	ldr	r4, [pc, #68]	; (6c98 <MiApp_EstablishConnection+0xe8>)
    6c54:	601a      	str	r2, [r3, #0]
    6c56:	4b11      	ldr	r3, [pc, #68]	; (6c9c <MiApp_EstablishConnection+0xec>)
    6c58:	9501      	str	r5, [sp, #4]
    6c5a:	9303      	str	r3, [sp, #12]
    6c5c:	2300      	movs	r3, #0
    6c5e:	9302      	str	r3, [sp, #8]
    6c60:	3302      	adds	r3, #2
    6c62:	9300      	str	r3, [sp, #0]
    6c64:	2207      	movs	r2, #7
    6c66:	4643      	mov	r3, r8
    6c68:	4649      	mov	r1, r9
    6c6a:	a806      	add	r0, sp, #24
    6c6c:	47a0      	blx	r4
    6c6e:	0004      	movs	r4, r0
    6c70:	e7b8      	b.n	6be4 <MiApp_EstablishConnection+0x34>
    6c72:	46c0      	nop			; (mov r8, r8)
    6c74:	2000136c 	.word	0x2000136c
    6c78:	0000283d 	.word	0x0000283d
    6c7c:	20000368 	.word	0x20000368
    6c80:	00002fe1 	.word	0x00002fe1
    6c84:	0000ffff 	.word	0x0000ffff
    6c88:	00005d8d 	.word	0x00005d8d
    6c8c:	00005db9 	.word	0x00005db9
    6c90:	0000758b 	.word	0x0000758b
    6c94:	20000388 	.word	0x20000388
    6c98:	00005e51 	.word	0x00005e51
    6c9c:	0000694d 	.word	0x0000694d

00006ca0 <MiApp_SearchConnection>:
    6ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ca2:	0003      	movs	r3, r0
    6ca4:	2001      	movs	r0, #1
    6ca6:	2b0e      	cmp	r3, #14
    6ca8:	d80a      	bhi.n	6cc0 <MiApp_SearchConnection+0x20>
    6caa:	2a00      	cmp	r2, #0
    6cac:	d008      	beq.n	6cc0 <MiApp_SearchConnection+0x20>
    6cae:	4d18      	ldr	r5, [pc, #96]	; (6d10 <MiApp_SearchConnection+0x70>)
    6cb0:	2604      	movs	r6, #4
    6cb2:	782c      	ldrb	r4, [r5, #0]
    6cb4:	0027      	movs	r7, r4
    6cb6:	43b7      	bics	r7, r6
    6cb8:	2f01      	cmp	r7, #1
    6cba:	d002      	beq.n	6cc2 <MiApp_SearchConnection+0x22>
    6cbc:	2c08      	cmp	r4, #8
    6cbe:	d000      	beq.n	6cc2 <MiApp_SearchConnection+0x22>
    6cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cc2:	2003      	movs	r0, #3
    6cc4:	7028      	strb	r0, [r5, #0]
    6cc6:	2500      	movs	r5, #0
    6cc8:	4812      	ldr	r0, [pc, #72]	; (6d14 <MiApp_SearchConnection+0x74>)
    6cca:	4c13      	ldr	r4, [pc, #76]	; (6d18 <MiApp_SearchConnection+0x78>)
    6ccc:	7003      	strb	r3, [r0, #0]
    6cce:	4b13      	ldr	r3, [pc, #76]	; (6d1c <MiApp_SearchConnection+0x7c>)
    6cd0:	681b      	ldr	r3, [r3, #0]
    6cd2:	691b      	ldr	r3, [r3, #16]
    6cd4:	6023      	str	r3, [r4, #0]
    6cd6:	705d      	strb	r5, [r3, #1]
    6cd8:	2308      	movs	r3, #8
    6cda:	6820      	ldr	r0, [r4, #0]
    6cdc:	7003      	strb	r3, [r0, #0]
    6cde:	6823      	ldr	r3, [r4, #0]
    6ce0:	6059      	str	r1, [r3, #4]
    6ce2:	4b0f      	ldr	r3, [pc, #60]	; (6d20 <MiApp_SearchConnection+0x80>)
    6ce4:	601a      	str	r2, [r3, #0]
    6ce6:	4b0f      	ldr	r3, [pc, #60]	; (6d24 <MiApp_SearchConnection+0x84>)
    6ce8:	4798      	blx	r3
    6cea:	4e0f      	ldr	r6, [pc, #60]	; (6d28 <MiApp_SearchConnection+0x88>)
    6cec:	2101      	movs	r1, #1
    6cee:	7035      	strb	r5, [r6, #0]
    6cf0:	2201      	movs	r2, #1
    6cf2:	07c3      	lsls	r3, r0, #31
    6cf4:	d501      	bpl.n	6cfa <MiApp_SearchConnection+0x5a>
    6cf6:	e006      	b.n	6d06 <MiApp_SearchConnection+0x66>
    6cf8:	0019      	movs	r1, r3
    6cfa:	1c4b      	adds	r3, r1, #1
    6cfc:	0052      	lsls	r2, r2, #1
    6cfe:	b2db      	uxtb	r3, r3
    6d00:	4202      	tst	r2, r0
    6d02:	d0f9      	beq.n	6cf8 <MiApp_SearchConnection+0x58>
    6d04:	7031      	strb	r1, [r6, #0]
    6d06:	6820      	ldr	r0, [r4, #0]
    6d08:	4b08      	ldr	r3, [pc, #32]	; (6d2c <MiApp_SearchConnection+0x8c>)
    6d0a:	4798      	blx	r3
    6d0c:	e7d8      	b.n	6cc0 <MiApp_SearchConnection+0x20>
    6d0e:	46c0      	nop			; (mov r8, r8)
    6d10:	20000368 	.word	0x20000368
    6d14:	200013cd 	.word	0x200013cd
    6d18:	20000390 	.word	0x20000390
    6d1c:	2000136c 	.word	0x2000136c
    6d20:	2000038c 	.word	0x2000038c
    6d24:	0000283d 	.word	0x0000283d
    6d28:	20001380 	.word	0x20001380
    6d2c:	0000670d 	.word	0x0000670d

00006d30 <handleJoinMessage>:
    6d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d32:	4657      	mov	r7, sl
    6d34:	464e      	mov	r6, r9
    6d36:	4645      	mov	r5, r8
    6d38:	46de      	mov	lr, fp
    6d3a:	b5e0      	push	{r5, r6, r7, lr}
    6d3c:	001d      	movs	r5, r3
    6d3e:	782c      	ldrb	r4, [r5, #0]
    6d40:	ab0a      	add	r3, sp, #40	; 0x28
    6d42:	0006      	movs	r6, r0
    6d44:	781f      	ldrb	r7, [r3, #0]
    6d46:	2c04      	cmp	r4, #4
    6d48:	d03a      	beq.n	6dc0 <handleJoinMessage+0x90>
    6d4a:	2c08      	cmp	r4, #8
    6d4c:	d029      	beq.n	6da2 <handleJoinMessage+0x72>
    6d4e:	2c02      	cmp	r4, #2
    6d50:	d005      	beq.n	6d5e <handleJoinMessage+0x2e>
    6d52:	bc3c      	pop	{r2, r3, r4, r5}
    6d54:	4690      	mov	r8, r2
    6d56:	4699      	mov	r9, r3
    6d58:	46a2      	mov	sl, r4
    6d5a:	46ab      	mov	fp, r5
    6d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d5e:	4c74      	ldr	r4, [pc, #464]	; (6f30 <handleJoinMessage+0x200>)
    6d60:	7823      	ldrb	r3, [r4, #0]
    6d62:	2b03      	cmp	r3, #3
    6d64:	d1f5      	bne.n	6d52 <handleJoinMessage+0x22>
    6d66:	4b73      	ldr	r3, [pc, #460]	; (6f34 <handleJoinMessage+0x204>)
    6d68:	4698      	mov	r8, r3
    6d6a:	681b      	ldr	r3, [r3, #0]
    6d6c:	785a      	ldrb	r2, [r3, #1]
    6d6e:	4b72      	ldr	r3, [pc, #456]	; (6f38 <handleJoinMessage+0x208>)
    6d70:	4699      	mov	r9, r3
    6d72:	681b      	ldr	r3, [r3, #0]
    6d74:	7d1b      	ldrb	r3, [r3, #20]
    6d76:	429a      	cmp	r2, r3
    6d78:	d335      	bcc.n	6de6 <handleJoinMessage+0xb6>
    6d7a:	429a      	cmp	r2, r3
    6d7c:	d1e9      	bne.n	6d52 <handleJoinMessage+0x22>
    6d7e:	486f      	ldr	r0, [pc, #444]	; (6f3c <handleJoinMessage+0x20c>)
    6d80:	4b6f      	ldr	r3, [pc, #444]	; (6f40 <handleJoinMessage+0x210>)
    6d82:	4798      	blx	r3
    6d84:	4642      	mov	r2, r8
    6d86:	2309      	movs	r3, #9
    6d88:	6812      	ldr	r2, [r2, #0]
    6d8a:	7013      	strb	r3, [r2, #0]
    6d8c:	3b04      	subs	r3, #4
    6d8e:	7023      	strb	r3, [r4, #0]
    6d90:	4643      	mov	r3, r8
    6d92:	4c6c      	ldr	r4, [pc, #432]	; (6f44 <handleJoinMessage+0x214>)
    6d94:	6819      	ldr	r1, [r3, #0]
    6d96:	6823      	ldr	r3, [r4, #0]
    6d98:	7848      	ldrb	r0, [r1, #1]
    6d9a:	4798      	blx	r3
    6d9c:	2300      	movs	r3, #0
    6d9e:	6023      	str	r3, [r4, #0]
    6da0:	e7d7      	b.n	6d52 <handleJoinMessage+0x22>
    6da2:	4b67      	ldr	r3, [pc, #412]	; (6f40 <handleJoinMessage+0x210>)
    6da4:	4868      	ldr	r0, [pc, #416]	; (6f48 <handleJoinMessage+0x218>)
    6da6:	4798      	blx	r3
    6da8:	2201      	movs	r2, #1
    6daa:	4b61      	ldr	r3, [pc, #388]	; (6f30 <handleJoinMessage+0x200>)
    6dac:	4252      	negs	r2, r2
    6dae:	701c      	strb	r4, [r3, #0]
    6db0:	4b66      	ldr	r3, [pc, #408]	; (6f4c <handleJoinMessage+0x21c>)
    6db2:	801a      	strh	r2, [r3, #0]
    6db4:	4b66      	ldr	r3, [pc, #408]	; (6f50 <handleJoinMessage+0x220>)
    6db6:	681b      	ldr	r3, [r3, #0]
    6db8:	2b00      	cmp	r3, #0
    6dba:	d0ca      	beq.n	6d52 <handleJoinMessage+0x22>
    6dbc:	4798      	blx	r3
    6dbe:	e7c8      	b.n	6d52 <handleJoinMessage+0x22>
    6dc0:	4c5b      	ldr	r4, [pc, #364]	; (6f30 <handleJoinMessage+0x200>)
    6dc2:	7823      	ldrb	r3, [r4, #0]
    6dc4:	2b04      	cmp	r3, #4
    6dc6:	d1c4      	bne.n	6d52 <handleJoinMessage+0x22>
    6dc8:	485c      	ldr	r0, [pc, #368]	; (6f3c <handleJoinMessage+0x20c>)
    6dca:	4b5d      	ldr	r3, [pc, #372]	; (6f40 <handleJoinMessage+0x210>)
    6dcc:	4798      	blx	r3
    6dce:	786f      	ldrb	r7, [r5, #1]
    6dd0:	2f00      	cmp	r7, #0
    6dd2:	d067      	beq.n	6ea4 <handleJoinMessage+0x174>
    6dd4:	2305      	movs	r3, #5
    6dd6:	7023      	strb	r3, [r4, #0]
    6dd8:	4c5e      	ldr	r4, [pc, #376]	; (6f54 <handleJoinMessage+0x224>)
    6dda:	0038      	movs	r0, r7
    6ddc:	6823      	ldr	r3, [r4, #0]
    6dde:	4798      	blx	r3
    6de0:	2300      	movs	r3, #0
    6de2:	6023      	str	r3, [r4, #0]
    6de4:	e7b5      	b.n	6d52 <handleJoinMessage+0x22>
    6de6:	1deb      	adds	r3, r5, #7
    6de8:	469a      	mov	sl, r3
    6dea:	0018      	movs	r0, r3
    6dec:	4a5a      	ldr	r2, [pc, #360]	; (6f58 <handleJoinMessage+0x228>)
    6dee:	2108      	movs	r1, #8
    6df0:	4b5a      	ldr	r3, [pc, #360]	; (6f5c <handleJoinMessage+0x22c>)
    6df2:	4798      	blx	r3
    6df4:	2800      	cmp	r0, #0
    6df6:	d0ac      	beq.n	6d52 <handleJoinMessage+0x22>
    6df8:	4642      	mov	r2, r8
    6dfa:	2300      	movs	r3, #0
    6dfc:	6812      	ldr	r2, [r2, #0]
    6dfe:	7013      	strb	r3, [r2, #0]
    6e00:	4643      	mov	r3, r8
    6e02:	681b      	ldr	r3, [r3, #0]
    6e04:	88f0      	ldrh	r0, [r6, #6]
    6e06:	469c      	mov	ip, r3
    6e08:	785b      	ldrb	r3, [r3, #1]
    6e0a:	469b      	mov	fp, r3
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d017      	beq.n	6e40 <handleJoinMessage+0x110>
    6e10:	4663      	mov	r3, ip
    6e12:	8a1b      	ldrh	r3, [r3, #16]
    6e14:	4283      	cmp	r3, r0
    6e16:	d09c      	beq.n	6d52 <handleJoinMessage+0x22>
    6e18:	465a      	mov	r2, fp
    6e1a:	4663      	mov	r3, ip
    6e1c:	3a01      	subs	r2, #1
    6e1e:	b2d2      	uxtb	r2, r2
    6e20:	00d1      	lsls	r1, r2, #3
    6e22:	1889      	adds	r1, r1, r2
    6e24:	0049      	lsls	r1, r1, #1
    6e26:	3122      	adds	r1, #34	; 0x22
    6e28:	3322      	adds	r3, #34	; 0x22
    6e2a:	4461      	add	r1, ip
    6e2c:	e006      	b.n	6e3c <handleJoinMessage+0x10c>
    6e2e:	3312      	adds	r3, #18
    6e30:	001a      	movs	r2, r3
    6e32:	3a12      	subs	r2, #18
    6e34:	8812      	ldrh	r2, [r2, #0]
    6e36:	4282      	cmp	r2, r0
    6e38:	d100      	bne.n	6e3c <handleJoinMessage+0x10c>
    6e3a:	e78a      	b.n	6d52 <handleJoinMessage+0x22>
    6e3c:	4299      	cmp	r1, r3
    6e3e:	d1f6      	bne.n	6e2e <handleJoinMessage+0xfe>
    6e40:	465b      	mov	r3, fp
    6e42:	4a47      	ldr	r2, [pc, #284]	; (6f60 <handleJoinMessage+0x230>)
    6e44:	00db      	lsls	r3, r3, #3
    6e46:	445b      	add	r3, fp
    6e48:	7812      	ldrb	r2, [r2, #0]
    6e4a:	005b      	lsls	r3, r3, #1
    6e4c:	4463      	add	r3, ip
    6e4e:	8218      	strh	r0, [r3, #16]
    6e50:	731a      	strb	r2, [r3, #12]
    6e52:	8872      	ldrh	r2, [r6, #2]
    6e54:	1d69      	adds	r1, r5, #5
    6e56:	81da      	strh	r2, [r3, #14]
    6e58:	786a      	ldrb	r2, [r5, #1]
    6e5a:	721a      	strb	r2, [r3, #8]
    6e5c:	78aa      	ldrb	r2, [r5, #2]
    6e5e:	725a      	strb	r2, [r3, #9]
    6e60:	78ea      	ldrb	r2, [r5, #3]
    6e62:	729a      	strb	r2, [r3, #10]
    6e64:	792a      	ldrb	r2, [r5, #4]
    6e66:	4d3f      	ldr	r5, [pc, #252]	; (6f64 <handleJoinMessage+0x234>)
    6e68:	72da      	strb	r2, [r3, #11]
    6e6a:	465b      	mov	r3, fp
    6e6c:	3301      	adds	r3, #1
    6e6e:	00d8      	lsls	r0, r3, #3
    6e70:	18c0      	adds	r0, r0, r3
    6e72:	0040      	lsls	r0, r0, #1
    6e74:	4460      	add	r0, ip
    6e76:	2208      	movs	r2, #8
    6e78:	47a8      	blx	r5
    6e7a:	2208      	movs	r2, #8
    6e7c:	4651      	mov	r1, sl
    6e7e:	483a      	ldr	r0, [pc, #232]	; (6f68 <handleJoinMessage+0x238>)
    6e80:	47a8      	blx	r5
    6e82:	4643      	mov	r3, r8
    6e84:	681a      	ldr	r2, [r3, #0]
    6e86:	7851      	ldrb	r1, [r2, #1]
    6e88:	00cb      	lsls	r3, r1, #3
    6e8a:	185b      	adds	r3, r3, r1
    6e8c:	005b      	lsls	r3, r3, #1
    6e8e:	18d3      	adds	r3, r2, r3
    6e90:	735f      	strb	r7, [r3, #13]
    6e92:	4643      	mov	r3, r8
    6e94:	3101      	adds	r1, #1
    6e96:	7051      	strb	r1, [r2, #1]
    6e98:	681b      	ldr	r3, [r3, #0]
    6e9a:	785a      	ldrb	r2, [r3, #1]
    6e9c:	464b      	mov	r3, r9
    6e9e:	681b      	ldr	r3, [r3, #0]
    6ea0:	7d1b      	ldrb	r3, [r3, #20]
    6ea2:	e76a      	b.n	6d7a <handleJoinMessage+0x4a>
    6ea4:	78ea      	ldrb	r2, [r5, #3]
    6ea6:	78ab      	ldrb	r3, [r5, #2]
    6ea8:	0212      	lsls	r2, r2, #8
    6eaa:	4313      	orrs	r3, r2
    6eac:	4a27      	ldr	r2, [pc, #156]	; (6f4c <handleJoinMessage+0x21c>)
    6eae:	492f      	ldr	r1, [pc, #188]	; (6f6c <handleJoinMessage+0x23c>)
    6eb0:	4690      	mov	r8, r2
    6eb2:	8013      	strh	r3, [r2, #0]
    6eb4:	88f2      	ldrh	r2, [r6, #6]
    6eb6:	4b2e      	ldr	r3, [pc, #184]	; (6f70 <handleJoinMessage+0x240>)
    6eb8:	4640      	mov	r0, r8
    6eba:	801a      	strh	r2, [r3, #0]
    6ebc:	8873      	ldrh	r3, [r6, #2]
    6ebe:	800b      	strh	r3, [r1, #0]
    6ec0:	4b2c      	ldr	r3, [pc, #176]	; (6f74 <handleJoinMessage+0x244>)
    6ec2:	4798      	blx	r3
    6ec4:	4b1c      	ldr	r3, [pc, #112]	; (6f38 <handleJoinMessage+0x208>)
    6ec6:	1d29      	adds	r1, r5, #4
    6ec8:	681e      	ldr	r6, [r3, #0]
    6eca:	4b2b      	ldr	r3, [pc, #172]	; (6f78 <handleJoinMessage+0x248>)
    6ecc:	7a72      	ldrb	r2, [r6, #9]
    6ece:	701a      	strb	r2, [r3, #0]
    6ed0:	4b2a      	ldr	r3, [pc, #168]	; (6f7c <handleJoinMessage+0x24c>)
    6ed2:	2210      	movs	r2, #16
    6ed4:	6818      	ldr	r0, [r3, #0]
    6ed6:	4b23      	ldr	r3, [pc, #140]	; (6f64 <handleJoinMessage+0x234>)
    6ed8:	3010      	adds	r0, #16
    6eda:	4798      	blx	r3
    6edc:	2306      	movs	r3, #6
    6ede:	7023      	strb	r3, [r4, #0]
    6ee0:	4643      	mov	r3, r8
    6ee2:	22ff      	movs	r2, #255	; 0xff
    6ee4:	881b      	ldrh	r3, [r3, #0]
    6ee6:	421a      	tst	r2, r3
    6ee8:	d012      	beq.n	6f10 <handleJoinMessage+0x1e0>
    6eea:	4643      	mov	r3, r8
    6eec:	881b      	ldrh	r3, [r3, #0]
    6eee:	4816      	ldr	r0, [pc, #88]	; (6f48 <handleJoinMessage+0x218>)
    6ef0:	061b      	lsls	r3, r3, #24
    6ef2:	d50f      	bpl.n	6f14 <handleJoinMessage+0x1e4>
    6ef4:	4b22      	ldr	r3, [pc, #136]	; (6f80 <handleJoinMessage+0x250>)
    6ef6:	6103      	str	r3, [r0, #16]
    6ef8:	23fa      	movs	r3, #250	; 0xfa
    6efa:	88b2      	ldrh	r2, [r6, #4]
    6efc:	009b      	lsls	r3, r3, #2
    6efe:	435a      	muls	r2, r3
    6f00:	6042      	str	r2, [r0, #4]
    6f02:	88b2      	ldrh	r2, [r6, #4]
    6f04:	4353      	muls	r3, r2
    6f06:	6083      	str	r3, [r0, #8]
    6f08:	2301      	movs	r3, #1
    6f0a:	7303      	strb	r3, [r0, #12]
    6f0c:	4b1d      	ldr	r3, [pc, #116]	; (6f84 <handleJoinMessage+0x254>)
    6f0e:	4798      	blx	r3
    6f10:	786f      	ldrb	r7, [r5, #1]
    6f12:	e761      	b.n	6dd8 <handleJoinMessage+0xa8>
    6f14:	4b1c      	ldr	r3, [pc, #112]	; (6f88 <handleJoinMessage+0x258>)
    6f16:	6103      	str	r3, [r0, #16]
    6f18:	23fa      	movs	r3, #250	; 0xfa
    6f1a:	7a32      	ldrb	r2, [r6, #8]
    6f1c:	009b      	lsls	r3, r3, #2
    6f1e:	4353      	muls	r3, r2
    6f20:	6043      	str	r3, [r0, #4]
    6f22:	6083      	str	r3, [r0, #8]
    6f24:	4b17      	ldr	r3, [pc, #92]	; (6f84 <handleJoinMessage+0x254>)
    6f26:	7307      	strb	r7, [r0, #12]
    6f28:	4798      	blx	r3
    6f2a:	786f      	ldrb	r7, [r5, #1]
    6f2c:	e754      	b.n	6dd8 <handleJoinMessage+0xa8>
    6f2e:	46c0      	nop			; (mov r8, r8)
    6f30:	20000368 	.word	0x20000368
    6f34:	20000390 	.word	0x20000390
    6f38:	2000136c 	.word	0x2000136c
    6f3c:	200013d0 	.word	0x200013d0
    6f40:	00003205 	.word	0x00003205
    6f44:	2000038c 	.word	0x2000038c
    6f48:	200013b8 	.word	0x200013b8
    6f4c:	200013b4 	.word	0x200013b4
    6f50:	200013ec 	.word	0x200013ec
    6f54:	20000388 	.word	0x20000388
    6f58:	2000004c 	.word	0x2000004c
    6f5c:	00004d0d 	.word	0x00004d0d
    6f60:	20001380 	.word	0x20001380
    6f64:	0000758b 	.word	0x0000758b
    6f68:	200013e4 	.word	0x200013e4
    6f6c:	200013a0 	.word	0x200013a0
    6f70:	20000054 	.word	0x20000054
    6f74:	0000214d 	.word	0x0000214d
    6f78:	200013cc 	.word	0x200013cc
    6f7c:	20001370 	.word	0x20001370
    6f80:	0000668d 	.word	0x0000668d
    6f84:	00003271 	.word	0x00003271
    6f88:	0000683d 	.word	0x0000683d

00006f8c <MiApp_SubscribeLinkFailureCallback>:
    6f8c:	2800      	cmp	r0, #0
    6f8e:	d003      	beq.n	6f98 <MiApp_SubscribeLinkFailureCallback+0xc>
    6f90:	4b02      	ldr	r3, [pc, #8]	; (6f9c <MiApp_SubscribeLinkFailureCallback+0x10>)
    6f92:	6018      	str	r0, [r3, #0]
    6f94:	2001      	movs	r0, #1
    6f96:	4770      	bx	lr
    6f98:	2000      	movs	r0, #0
    6f9a:	e7fc      	b.n	6f96 <MiApp_SubscribeLinkFailureCallback+0xa>
    6f9c:	200013ec 	.word	0x200013ec

00006fa0 <checkLinkFailureAtNoAck>:
    6fa0:	b510      	push	{r4, lr}
    6fa2:	2803      	cmp	r0, #3
    6fa4:	d005      	beq.n	6fb2 <checkLinkFailureAtNoAck+0x12>
    6fa6:	4b0f      	ldr	r3, [pc, #60]	; (6fe4 <checkLinkFailureAtNoAck+0x44>)
    6fa8:	681b      	ldr	r3, [r3, #0]
    6faa:	7a5a      	ldrb	r2, [r3, #9]
    6fac:	4b0e      	ldr	r3, [pc, #56]	; (6fe8 <checkLinkFailureAtNoAck+0x48>)
    6fae:	701a      	strb	r2, [r3, #0]
    6fb0:	bd10      	pop	{r4, pc}
    6fb2:	4a0d      	ldr	r2, [pc, #52]	; (6fe8 <checkLinkFailureAtNoAck+0x48>)
    6fb4:	7813      	ldrb	r3, [r2, #0]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d0fa      	beq.n	6fb0 <checkLinkFailureAtNoAck+0x10>
    6fba:	3b01      	subs	r3, #1
    6fbc:	b2db      	uxtb	r3, r3
    6fbe:	7013      	strb	r3, [r2, #0]
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d1f5      	bne.n	6fb0 <checkLinkFailureAtNoAck+0x10>
    6fc4:	4b09      	ldr	r3, [pc, #36]	; (6fec <checkLinkFailureAtNoAck+0x4c>)
    6fc6:	480a      	ldr	r0, [pc, #40]	; (6ff0 <checkLinkFailureAtNoAck+0x50>)
    6fc8:	4798      	blx	r3
    6fca:	2208      	movs	r2, #8
    6fcc:	4b09      	ldr	r3, [pc, #36]	; (6ff4 <checkLinkFailureAtNoAck+0x54>)
    6fce:	701a      	strb	r2, [r3, #0]
    6fd0:	4b09      	ldr	r3, [pc, #36]	; (6ff8 <checkLinkFailureAtNoAck+0x58>)
    6fd2:	3a09      	subs	r2, #9
    6fd4:	801a      	strh	r2, [r3, #0]
    6fd6:	4b09      	ldr	r3, [pc, #36]	; (6ffc <checkLinkFailureAtNoAck+0x5c>)
    6fd8:	681b      	ldr	r3, [r3, #0]
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d0e8      	beq.n	6fb0 <checkLinkFailureAtNoAck+0x10>
    6fde:	4798      	blx	r3
    6fe0:	e7e6      	b.n	6fb0 <checkLinkFailureAtNoAck+0x10>
    6fe2:	46c0      	nop			; (mov r8, r8)
    6fe4:	2000136c 	.word	0x2000136c
    6fe8:	200013cc 	.word	0x200013cc
    6fec:	00003205 	.word	0x00003205
    6ff0:	200013b8 	.word	0x200013b8
    6ff4:	20000368 	.word	0x20000368
    6ff8:	200013b4 	.word	0x200013b4
    6ffc:	200013ec 	.word	0x200013ec

00007000 <keyDetermineProcedure>:
    7000:	4b06      	ldr	r3, [pc, #24]	; (701c <keyDetermineProcedure+0x1c>)
    7002:	781b      	ldrb	r3, [r3, #0]
    7004:	3b06      	subs	r3, #6
    7006:	2b01      	cmp	r3, #1
    7008:	d902      	bls.n	7010 <keyDetermineProcedure+0x10>
    700a:	4b05      	ldr	r3, [pc, #20]	; (7020 <keyDetermineProcedure+0x20>)
    700c:	6818      	ldr	r0, [r3, #0]
    700e:	4770      	bx	lr
    7010:	2808      	cmp	r0, #8
    7012:	d0fa      	beq.n	700a <keyDetermineProcedure+0xa>
    7014:	4b02      	ldr	r3, [pc, #8]	; (7020 <keyDetermineProcedure+0x20>)
    7016:	6818      	ldr	r0, [r3, #0]
    7018:	3010      	adds	r0, #16
    701a:	e7f8      	b.n	700e <keyDetermineProcedure+0xe>
    701c:	20000368 	.word	0x20000368
    7020:	20001370 	.word	0x20001370

00007024 <secureFrame>:
    7024:	b5f0      	push	{r4, r5, r6, r7, lr}
    7026:	4657      	mov	r7, sl
    7028:	4645      	mov	r5, r8
    702a:	46de      	mov	lr, fp
    702c:	464e      	mov	r6, r9
    702e:	b5e0      	push	{r5, r6, r7, lr}
    7030:	0005      	movs	r5, r0
    7032:	b0af      	sub	sp, #188	; 0xbc
    7034:	ac06      	add	r4, sp, #24
    7036:	000e      	movs	r6, r1
    7038:	4690      	mov	r8, r2
    703a:	469a      	mov	sl, r3
    703c:	2210      	movs	r2, #16
    703e:	2100      	movs	r1, #0
    7040:	0020      	movs	r0, r4
    7042:	4b35      	ldr	r3, [pc, #212]	; (7118 <secureFrame+0xf4>)
    7044:	4798      	blx	r3
    7046:	7c2f      	ldrb	r7, [r5, #16]
    7048:	2f07      	cmp	r7, #7
    704a:	d80e      	bhi.n	706a <secureFrame+0x46>
    704c:	2301      	movs	r3, #1
    704e:	2288      	movs	r2, #136	; 0x88
    7050:	40bb      	lsls	r3, r7
    7052:	421a      	tst	r2, r3
    7054:	d14e      	bne.n	70f4 <secureFrame+0xd0>
    7056:	3a44      	subs	r2, #68	; 0x44
    7058:	421a      	tst	r2, r3
    705a:	d14f      	bne.n	70fc <secureFrame+0xd8>
    705c:	3a22      	subs	r2, #34	; 0x22
    705e:	421a      	tst	r2, r3
    7060:	d003      	beq.n	706a <secureFrame+0x46>
    7062:	2304      	movs	r3, #4
    7064:	9305      	str	r3, [sp, #20]
    7066:	469b      	mov	fp, r3
    7068:	e002      	b.n	7070 <secureFrame+0x4c>
    706a:	2300      	movs	r3, #0
    706c:	469b      	mov	fp, r3
    706e:	9305      	str	r3, [sp, #20]
    7070:	4b2a      	ldr	r3, [pc, #168]	; (711c <secureFrame+0xf8>)
    7072:	4d2b      	ldr	r5, [pc, #172]	; (7120 <secureFrame+0xfc>)
    7074:	79da      	ldrb	r2, [r3, #7]
    7076:	4651      	mov	r1, sl
    7078:	7062      	strb	r2, [r4, #1]
    707a:	799a      	ldrb	r2, [r3, #6]
    707c:	7367      	strb	r7, [r4, #13]
    707e:	70a2      	strb	r2, [r4, #2]
    7080:	795a      	ldrb	r2, [r3, #5]
    7082:	a80a      	add	r0, sp, #40	; 0x28
    7084:	70e2      	strb	r2, [r4, #3]
    7086:	791a      	ldrb	r2, [r3, #4]
    7088:	44b2      	add	sl, r6
    708a:	7122      	strb	r2, [r4, #4]
    708c:	78da      	ldrb	r2, [r3, #3]
    708e:	7162      	strb	r2, [r4, #5]
    7090:	789a      	ldrb	r2, [r3, #2]
    7092:	71a2      	strb	r2, [r4, #6]
    7094:	785a      	ldrb	r2, [r3, #1]
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	71e2      	strb	r2, [r4, #7]
    709a:	7223      	strb	r3, [r4, #8]
    709c:	78eb      	ldrb	r3, [r5, #3]
    709e:	0032      	movs	r2, r6
    70a0:	7263      	strb	r3, [r4, #9]
    70a2:	78ab      	ldrb	r3, [r5, #2]
    70a4:	72a3      	strb	r3, [r4, #10]
    70a6:	786b      	ldrb	r3, [r5, #1]
    70a8:	72e3      	strb	r3, [r4, #11]
    70aa:	782b      	ldrb	r3, [r5, #0]
    70ac:	7323      	strb	r3, [r4, #12]
    70ae:	4b1d      	ldr	r3, [pc, #116]	; (7124 <secureFrame+0x100>)
    70b0:	4699      	mov	r9, r3
    70b2:	4798      	blx	r3
    70b4:	ab0a      	add	r3, sp, #40	; 0x28
    70b6:	469c      	mov	ip, r3
    70b8:	44b4      	add	ip, r6
    70ba:	4663      	mov	r3, ip
    70bc:	4642      	mov	r2, r8
    70be:	4651      	mov	r1, sl
    70c0:	4660      	mov	r0, ip
    70c2:	9304      	str	r3, [sp, #16]
    70c4:	47c8      	blx	r9
    70c6:	2300      	movs	r3, #0
    70c8:	9302      	str	r3, [sp, #8]
    70ca:	4643      	mov	r3, r8
    70cc:	0021      	movs	r1, r4
    70ce:	9300      	str	r3, [sp, #0]
    70d0:	9701      	str	r7, [sp, #4]
    70d2:	0033      	movs	r3, r6
    70d4:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    70d6:	a80a      	add	r0, sp, #40	; 0x28
    70d8:	4c13      	ldr	r4, [pc, #76]	; (7128 <secureFrame+0x104>)
    70da:	47a0      	blx	r4
    70dc:	2800      	cmp	r0, #0
    70de:	d011      	beq.n	7104 <secureFrame+0xe0>
    70e0:	23ff      	movs	r3, #255	; 0xff
    70e2:	469b      	mov	fp, r3
    70e4:	4658      	mov	r0, fp
    70e6:	b02f      	add	sp, #188	; 0xbc
    70e8:	bc3c      	pop	{r2, r3, r4, r5}
    70ea:	4690      	mov	r8, r2
    70ec:	4699      	mov	r9, r3
    70ee:	46a2      	mov	sl, r4
    70f0:	46ab      	mov	fp, r5
    70f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70f4:	2310      	movs	r3, #16
    70f6:	9305      	str	r3, [sp, #20]
    70f8:	469b      	mov	fp, r3
    70fa:	e7b9      	b.n	7070 <secureFrame+0x4c>
    70fc:	2308      	movs	r3, #8
    70fe:	9305      	str	r3, [sp, #20]
    7100:	469b      	mov	fp, r3
    7102:	e7b5      	b.n	7070 <secureFrame+0x4c>
    7104:	682b      	ldr	r3, [r5, #0]
    7106:	9904      	ldr	r1, [sp, #16]
    7108:	3301      	adds	r3, #1
    710a:	602b      	str	r3, [r5, #0]
    710c:	9b05      	ldr	r3, [sp, #20]
    710e:	4650      	mov	r0, sl
    7110:	4443      	add	r3, r8
    7112:	001a      	movs	r2, r3
    7114:	47c8      	blx	r9
    7116:	e7e5      	b.n	70e4 <secureFrame+0xc0>
    7118:	0000759d 	.word	0x0000759d
    711c:	2000004c 	.word	0x2000004c
    7120:	200013f0 	.word	0x200013f0
    7124:	0000758b 	.word	0x0000758b
    7128:	00002bcd 	.word	0x00002bcd

0000712c <unsecureFrame>:
    712c:	b5f0      	push	{r4, r5, r6, r7, lr}
    712e:	46ce      	mov	lr, r9
    7130:	4647      	mov	r7, r8
    7132:	b580      	push	{r7, lr}
    7134:	b089      	sub	sp, #36	; 0x24
    7136:	0007      	movs	r7, r0
    7138:	ac04      	add	r4, sp, #16
    713a:	000d      	movs	r5, r1
    713c:	4691      	mov	r9, r2
    713e:	001e      	movs	r6, r3
    7140:	2210      	movs	r2, #16
    7142:	4b26      	ldr	r3, [pc, #152]	; (71dc <unsecureFrame+0xb0>)
    7144:	2100      	movs	r1, #0
    7146:	0020      	movs	r0, r4
    7148:	4798      	blx	r3
    714a:	2200      	movs	r2, #0
    714c:	7c3b      	ldrb	r3, [r7, #16]
    714e:	4690      	mov	r8, r2
    7150:	2b07      	cmp	r3, #7
    7152:	d806      	bhi.n	7162 <unsecureFrame+0x36>
    7154:	3201      	adds	r2, #1
    7156:	2010      	movs	r0, #16
    7158:	409a      	lsls	r2, r3
    715a:	2188      	movs	r1, #136	; 0x88
    715c:	4680      	mov	r8, r0
    715e:	4211      	tst	r1, r2
    7160:	d02f      	beq.n	71c2 <unsecureFrame+0x96>
    7162:	79ea      	ldrb	r2, [r5, #7]
    7164:	7363      	strb	r3, [r4, #13]
    7166:	7062      	strb	r2, [r4, #1]
    7168:	79aa      	ldrb	r2, [r5, #6]
    716a:	0021      	movs	r1, r4
    716c:	70a2      	strb	r2, [r4, #2]
    716e:	796a      	ldrb	r2, [r5, #5]
    7170:	9810      	ldr	r0, [sp, #64]	; 0x40
    7172:	70e2      	strb	r2, [r4, #3]
    7174:	792a      	ldrb	r2, [r5, #4]
    7176:	7122      	strb	r2, [r4, #4]
    7178:	78ea      	ldrb	r2, [r5, #3]
    717a:	7162      	strb	r2, [r4, #5]
    717c:	78aa      	ldrb	r2, [r5, #2]
    717e:	71a2      	strb	r2, [r4, #6]
    7180:	786a      	ldrb	r2, [r5, #1]
    7182:	71e2      	strb	r2, [r4, #7]
    7184:	782a      	ldrb	r2, [r5, #0]
    7186:	7222      	strb	r2, [r4, #8]
    7188:	7dfa      	ldrb	r2, [r7, #23]
    718a:	7262      	strb	r2, [r4, #9]
    718c:	7dba      	ldrb	r2, [r7, #22]
    718e:	72a2      	strb	r2, [r4, #10]
    7190:	7d7a      	ldrb	r2, [r7, #21]
    7192:	72e2      	strb	r2, [r4, #11]
    7194:	7d3a      	ldrb	r2, [r7, #20]
    7196:	7322      	strb	r2, [r4, #12]
    7198:	9301      	str	r3, [sp, #4]
    719a:	4643      	mov	r3, r8
    719c:	2201      	movs	r2, #1
    719e:	1af6      	subs	r6, r6, r3
    71a0:	b2f6      	uxtb	r6, r6
    71a2:	9202      	str	r2, [sp, #8]
    71a4:	9600      	str	r6, [sp, #0]
    71a6:	464b      	mov	r3, r9
    71a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    71aa:	4c0d      	ldr	r4, [pc, #52]	; (71e0 <unsecureFrame+0xb4>)
    71ac:	47a0      	blx	r4
    71ae:	2800      	cmp	r0, #0
    71b0:	d001      	beq.n	71b6 <unsecureFrame+0x8a>
    71b2:	23ff      	movs	r3, #255	; 0xff
    71b4:	4698      	mov	r8, r3
    71b6:	4640      	mov	r0, r8
    71b8:	b009      	add	sp, #36	; 0x24
    71ba:	bc0c      	pop	{r2, r3}
    71bc:	4690      	mov	r8, r2
    71be:	4699      	mov	r9, r3
    71c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71c2:	3808      	subs	r0, #8
    71c4:	3944      	subs	r1, #68	; 0x44
    71c6:	4680      	mov	r8, r0
    71c8:	4211      	tst	r1, r2
    71ca:	d1ca      	bne.n	7162 <unsecureFrame+0x36>
    71cc:	3922      	subs	r1, #34	; 0x22
    71ce:	400a      	ands	r2, r1
    71d0:	1e51      	subs	r1, r2, #1
    71d2:	418a      	sbcs	r2, r1
    71d4:	0092      	lsls	r2, r2, #2
    71d6:	4690      	mov	r8, r2
    71d8:	e7c3      	b.n	7162 <unsecureFrame+0x36>
    71da:	46c0      	nop			; (mov r8, r8)
    71dc:	0000759d 	.word	0x0000759d
    71e0:	00002bcd 	.word	0x00002bcd

000071e4 <__udivsi3>:
    71e4:	2200      	movs	r2, #0
    71e6:	0843      	lsrs	r3, r0, #1
    71e8:	428b      	cmp	r3, r1
    71ea:	d374      	bcc.n	72d6 <__udivsi3+0xf2>
    71ec:	0903      	lsrs	r3, r0, #4
    71ee:	428b      	cmp	r3, r1
    71f0:	d35f      	bcc.n	72b2 <__udivsi3+0xce>
    71f2:	0a03      	lsrs	r3, r0, #8
    71f4:	428b      	cmp	r3, r1
    71f6:	d344      	bcc.n	7282 <__udivsi3+0x9e>
    71f8:	0b03      	lsrs	r3, r0, #12
    71fa:	428b      	cmp	r3, r1
    71fc:	d328      	bcc.n	7250 <__udivsi3+0x6c>
    71fe:	0c03      	lsrs	r3, r0, #16
    7200:	428b      	cmp	r3, r1
    7202:	d30d      	bcc.n	7220 <__udivsi3+0x3c>
    7204:	22ff      	movs	r2, #255	; 0xff
    7206:	0209      	lsls	r1, r1, #8
    7208:	ba12      	rev	r2, r2
    720a:	0c03      	lsrs	r3, r0, #16
    720c:	428b      	cmp	r3, r1
    720e:	d302      	bcc.n	7216 <__udivsi3+0x32>
    7210:	1212      	asrs	r2, r2, #8
    7212:	0209      	lsls	r1, r1, #8
    7214:	d065      	beq.n	72e2 <__udivsi3+0xfe>
    7216:	0b03      	lsrs	r3, r0, #12
    7218:	428b      	cmp	r3, r1
    721a:	d319      	bcc.n	7250 <__udivsi3+0x6c>
    721c:	e000      	b.n	7220 <__udivsi3+0x3c>
    721e:	0a09      	lsrs	r1, r1, #8
    7220:	0bc3      	lsrs	r3, r0, #15
    7222:	428b      	cmp	r3, r1
    7224:	d301      	bcc.n	722a <__udivsi3+0x46>
    7226:	03cb      	lsls	r3, r1, #15
    7228:	1ac0      	subs	r0, r0, r3
    722a:	4152      	adcs	r2, r2
    722c:	0b83      	lsrs	r3, r0, #14
    722e:	428b      	cmp	r3, r1
    7230:	d301      	bcc.n	7236 <__udivsi3+0x52>
    7232:	038b      	lsls	r3, r1, #14
    7234:	1ac0      	subs	r0, r0, r3
    7236:	4152      	adcs	r2, r2
    7238:	0b43      	lsrs	r3, r0, #13
    723a:	428b      	cmp	r3, r1
    723c:	d301      	bcc.n	7242 <__udivsi3+0x5e>
    723e:	034b      	lsls	r3, r1, #13
    7240:	1ac0      	subs	r0, r0, r3
    7242:	4152      	adcs	r2, r2
    7244:	0b03      	lsrs	r3, r0, #12
    7246:	428b      	cmp	r3, r1
    7248:	d301      	bcc.n	724e <__udivsi3+0x6a>
    724a:	030b      	lsls	r3, r1, #12
    724c:	1ac0      	subs	r0, r0, r3
    724e:	4152      	adcs	r2, r2
    7250:	0ac3      	lsrs	r3, r0, #11
    7252:	428b      	cmp	r3, r1
    7254:	d301      	bcc.n	725a <__udivsi3+0x76>
    7256:	02cb      	lsls	r3, r1, #11
    7258:	1ac0      	subs	r0, r0, r3
    725a:	4152      	adcs	r2, r2
    725c:	0a83      	lsrs	r3, r0, #10
    725e:	428b      	cmp	r3, r1
    7260:	d301      	bcc.n	7266 <__udivsi3+0x82>
    7262:	028b      	lsls	r3, r1, #10
    7264:	1ac0      	subs	r0, r0, r3
    7266:	4152      	adcs	r2, r2
    7268:	0a43      	lsrs	r3, r0, #9
    726a:	428b      	cmp	r3, r1
    726c:	d301      	bcc.n	7272 <__udivsi3+0x8e>
    726e:	024b      	lsls	r3, r1, #9
    7270:	1ac0      	subs	r0, r0, r3
    7272:	4152      	adcs	r2, r2
    7274:	0a03      	lsrs	r3, r0, #8
    7276:	428b      	cmp	r3, r1
    7278:	d301      	bcc.n	727e <__udivsi3+0x9a>
    727a:	020b      	lsls	r3, r1, #8
    727c:	1ac0      	subs	r0, r0, r3
    727e:	4152      	adcs	r2, r2
    7280:	d2cd      	bcs.n	721e <__udivsi3+0x3a>
    7282:	09c3      	lsrs	r3, r0, #7
    7284:	428b      	cmp	r3, r1
    7286:	d301      	bcc.n	728c <__udivsi3+0xa8>
    7288:	01cb      	lsls	r3, r1, #7
    728a:	1ac0      	subs	r0, r0, r3
    728c:	4152      	adcs	r2, r2
    728e:	0983      	lsrs	r3, r0, #6
    7290:	428b      	cmp	r3, r1
    7292:	d301      	bcc.n	7298 <__udivsi3+0xb4>
    7294:	018b      	lsls	r3, r1, #6
    7296:	1ac0      	subs	r0, r0, r3
    7298:	4152      	adcs	r2, r2
    729a:	0943      	lsrs	r3, r0, #5
    729c:	428b      	cmp	r3, r1
    729e:	d301      	bcc.n	72a4 <__udivsi3+0xc0>
    72a0:	014b      	lsls	r3, r1, #5
    72a2:	1ac0      	subs	r0, r0, r3
    72a4:	4152      	adcs	r2, r2
    72a6:	0903      	lsrs	r3, r0, #4
    72a8:	428b      	cmp	r3, r1
    72aa:	d301      	bcc.n	72b0 <__udivsi3+0xcc>
    72ac:	010b      	lsls	r3, r1, #4
    72ae:	1ac0      	subs	r0, r0, r3
    72b0:	4152      	adcs	r2, r2
    72b2:	08c3      	lsrs	r3, r0, #3
    72b4:	428b      	cmp	r3, r1
    72b6:	d301      	bcc.n	72bc <__udivsi3+0xd8>
    72b8:	00cb      	lsls	r3, r1, #3
    72ba:	1ac0      	subs	r0, r0, r3
    72bc:	4152      	adcs	r2, r2
    72be:	0883      	lsrs	r3, r0, #2
    72c0:	428b      	cmp	r3, r1
    72c2:	d301      	bcc.n	72c8 <__udivsi3+0xe4>
    72c4:	008b      	lsls	r3, r1, #2
    72c6:	1ac0      	subs	r0, r0, r3
    72c8:	4152      	adcs	r2, r2
    72ca:	0843      	lsrs	r3, r0, #1
    72cc:	428b      	cmp	r3, r1
    72ce:	d301      	bcc.n	72d4 <__udivsi3+0xf0>
    72d0:	004b      	lsls	r3, r1, #1
    72d2:	1ac0      	subs	r0, r0, r3
    72d4:	4152      	adcs	r2, r2
    72d6:	1a41      	subs	r1, r0, r1
    72d8:	d200      	bcs.n	72dc <__udivsi3+0xf8>
    72da:	4601      	mov	r1, r0
    72dc:	4152      	adcs	r2, r2
    72de:	4610      	mov	r0, r2
    72e0:	4770      	bx	lr
    72e2:	e7ff      	b.n	72e4 <__udivsi3+0x100>
    72e4:	b501      	push	{r0, lr}
    72e6:	2000      	movs	r0, #0
    72e8:	f000 f8f0 	bl	74cc <__aeabi_idiv0>
    72ec:	bd02      	pop	{r1, pc}
    72ee:	46c0      	nop			; (mov r8, r8)

000072f0 <__aeabi_uidivmod>:
    72f0:	2900      	cmp	r1, #0
    72f2:	d0f7      	beq.n	72e4 <__udivsi3+0x100>
    72f4:	e776      	b.n	71e4 <__udivsi3>
    72f6:	4770      	bx	lr

000072f8 <__divsi3>:
    72f8:	4603      	mov	r3, r0
    72fa:	430b      	orrs	r3, r1
    72fc:	d47f      	bmi.n	73fe <__divsi3+0x106>
    72fe:	2200      	movs	r2, #0
    7300:	0843      	lsrs	r3, r0, #1
    7302:	428b      	cmp	r3, r1
    7304:	d374      	bcc.n	73f0 <__divsi3+0xf8>
    7306:	0903      	lsrs	r3, r0, #4
    7308:	428b      	cmp	r3, r1
    730a:	d35f      	bcc.n	73cc <__divsi3+0xd4>
    730c:	0a03      	lsrs	r3, r0, #8
    730e:	428b      	cmp	r3, r1
    7310:	d344      	bcc.n	739c <__divsi3+0xa4>
    7312:	0b03      	lsrs	r3, r0, #12
    7314:	428b      	cmp	r3, r1
    7316:	d328      	bcc.n	736a <__divsi3+0x72>
    7318:	0c03      	lsrs	r3, r0, #16
    731a:	428b      	cmp	r3, r1
    731c:	d30d      	bcc.n	733a <__divsi3+0x42>
    731e:	22ff      	movs	r2, #255	; 0xff
    7320:	0209      	lsls	r1, r1, #8
    7322:	ba12      	rev	r2, r2
    7324:	0c03      	lsrs	r3, r0, #16
    7326:	428b      	cmp	r3, r1
    7328:	d302      	bcc.n	7330 <__divsi3+0x38>
    732a:	1212      	asrs	r2, r2, #8
    732c:	0209      	lsls	r1, r1, #8
    732e:	d065      	beq.n	73fc <__divsi3+0x104>
    7330:	0b03      	lsrs	r3, r0, #12
    7332:	428b      	cmp	r3, r1
    7334:	d319      	bcc.n	736a <__divsi3+0x72>
    7336:	e000      	b.n	733a <__divsi3+0x42>
    7338:	0a09      	lsrs	r1, r1, #8
    733a:	0bc3      	lsrs	r3, r0, #15
    733c:	428b      	cmp	r3, r1
    733e:	d301      	bcc.n	7344 <__divsi3+0x4c>
    7340:	03cb      	lsls	r3, r1, #15
    7342:	1ac0      	subs	r0, r0, r3
    7344:	4152      	adcs	r2, r2
    7346:	0b83      	lsrs	r3, r0, #14
    7348:	428b      	cmp	r3, r1
    734a:	d301      	bcc.n	7350 <__divsi3+0x58>
    734c:	038b      	lsls	r3, r1, #14
    734e:	1ac0      	subs	r0, r0, r3
    7350:	4152      	adcs	r2, r2
    7352:	0b43      	lsrs	r3, r0, #13
    7354:	428b      	cmp	r3, r1
    7356:	d301      	bcc.n	735c <__divsi3+0x64>
    7358:	034b      	lsls	r3, r1, #13
    735a:	1ac0      	subs	r0, r0, r3
    735c:	4152      	adcs	r2, r2
    735e:	0b03      	lsrs	r3, r0, #12
    7360:	428b      	cmp	r3, r1
    7362:	d301      	bcc.n	7368 <__divsi3+0x70>
    7364:	030b      	lsls	r3, r1, #12
    7366:	1ac0      	subs	r0, r0, r3
    7368:	4152      	adcs	r2, r2
    736a:	0ac3      	lsrs	r3, r0, #11
    736c:	428b      	cmp	r3, r1
    736e:	d301      	bcc.n	7374 <__divsi3+0x7c>
    7370:	02cb      	lsls	r3, r1, #11
    7372:	1ac0      	subs	r0, r0, r3
    7374:	4152      	adcs	r2, r2
    7376:	0a83      	lsrs	r3, r0, #10
    7378:	428b      	cmp	r3, r1
    737a:	d301      	bcc.n	7380 <__divsi3+0x88>
    737c:	028b      	lsls	r3, r1, #10
    737e:	1ac0      	subs	r0, r0, r3
    7380:	4152      	adcs	r2, r2
    7382:	0a43      	lsrs	r3, r0, #9
    7384:	428b      	cmp	r3, r1
    7386:	d301      	bcc.n	738c <__divsi3+0x94>
    7388:	024b      	lsls	r3, r1, #9
    738a:	1ac0      	subs	r0, r0, r3
    738c:	4152      	adcs	r2, r2
    738e:	0a03      	lsrs	r3, r0, #8
    7390:	428b      	cmp	r3, r1
    7392:	d301      	bcc.n	7398 <__divsi3+0xa0>
    7394:	020b      	lsls	r3, r1, #8
    7396:	1ac0      	subs	r0, r0, r3
    7398:	4152      	adcs	r2, r2
    739a:	d2cd      	bcs.n	7338 <__divsi3+0x40>
    739c:	09c3      	lsrs	r3, r0, #7
    739e:	428b      	cmp	r3, r1
    73a0:	d301      	bcc.n	73a6 <__divsi3+0xae>
    73a2:	01cb      	lsls	r3, r1, #7
    73a4:	1ac0      	subs	r0, r0, r3
    73a6:	4152      	adcs	r2, r2
    73a8:	0983      	lsrs	r3, r0, #6
    73aa:	428b      	cmp	r3, r1
    73ac:	d301      	bcc.n	73b2 <__divsi3+0xba>
    73ae:	018b      	lsls	r3, r1, #6
    73b0:	1ac0      	subs	r0, r0, r3
    73b2:	4152      	adcs	r2, r2
    73b4:	0943      	lsrs	r3, r0, #5
    73b6:	428b      	cmp	r3, r1
    73b8:	d301      	bcc.n	73be <__divsi3+0xc6>
    73ba:	014b      	lsls	r3, r1, #5
    73bc:	1ac0      	subs	r0, r0, r3
    73be:	4152      	adcs	r2, r2
    73c0:	0903      	lsrs	r3, r0, #4
    73c2:	428b      	cmp	r3, r1
    73c4:	d301      	bcc.n	73ca <__divsi3+0xd2>
    73c6:	010b      	lsls	r3, r1, #4
    73c8:	1ac0      	subs	r0, r0, r3
    73ca:	4152      	adcs	r2, r2
    73cc:	08c3      	lsrs	r3, r0, #3
    73ce:	428b      	cmp	r3, r1
    73d0:	d301      	bcc.n	73d6 <__divsi3+0xde>
    73d2:	00cb      	lsls	r3, r1, #3
    73d4:	1ac0      	subs	r0, r0, r3
    73d6:	4152      	adcs	r2, r2
    73d8:	0883      	lsrs	r3, r0, #2
    73da:	428b      	cmp	r3, r1
    73dc:	d301      	bcc.n	73e2 <__divsi3+0xea>
    73de:	008b      	lsls	r3, r1, #2
    73e0:	1ac0      	subs	r0, r0, r3
    73e2:	4152      	adcs	r2, r2
    73e4:	0843      	lsrs	r3, r0, #1
    73e6:	428b      	cmp	r3, r1
    73e8:	d301      	bcc.n	73ee <__divsi3+0xf6>
    73ea:	004b      	lsls	r3, r1, #1
    73ec:	1ac0      	subs	r0, r0, r3
    73ee:	4152      	adcs	r2, r2
    73f0:	1a41      	subs	r1, r0, r1
    73f2:	d200      	bcs.n	73f6 <__divsi3+0xfe>
    73f4:	4601      	mov	r1, r0
    73f6:	4152      	adcs	r2, r2
    73f8:	4610      	mov	r0, r2
    73fa:	4770      	bx	lr
    73fc:	e05d      	b.n	74ba <__divsi3+0x1c2>
    73fe:	0fca      	lsrs	r2, r1, #31
    7400:	d000      	beq.n	7404 <__divsi3+0x10c>
    7402:	4249      	negs	r1, r1
    7404:	1003      	asrs	r3, r0, #32
    7406:	d300      	bcc.n	740a <__divsi3+0x112>
    7408:	4240      	negs	r0, r0
    740a:	4053      	eors	r3, r2
    740c:	2200      	movs	r2, #0
    740e:	469c      	mov	ip, r3
    7410:	0903      	lsrs	r3, r0, #4
    7412:	428b      	cmp	r3, r1
    7414:	d32d      	bcc.n	7472 <__divsi3+0x17a>
    7416:	0a03      	lsrs	r3, r0, #8
    7418:	428b      	cmp	r3, r1
    741a:	d312      	bcc.n	7442 <__divsi3+0x14a>
    741c:	22fc      	movs	r2, #252	; 0xfc
    741e:	0189      	lsls	r1, r1, #6
    7420:	ba12      	rev	r2, r2
    7422:	0a03      	lsrs	r3, r0, #8
    7424:	428b      	cmp	r3, r1
    7426:	d30c      	bcc.n	7442 <__divsi3+0x14a>
    7428:	0189      	lsls	r1, r1, #6
    742a:	1192      	asrs	r2, r2, #6
    742c:	428b      	cmp	r3, r1
    742e:	d308      	bcc.n	7442 <__divsi3+0x14a>
    7430:	0189      	lsls	r1, r1, #6
    7432:	1192      	asrs	r2, r2, #6
    7434:	428b      	cmp	r3, r1
    7436:	d304      	bcc.n	7442 <__divsi3+0x14a>
    7438:	0189      	lsls	r1, r1, #6
    743a:	d03a      	beq.n	74b2 <__divsi3+0x1ba>
    743c:	1192      	asrs	r2, r2, #6
    743e:	e000      	b.n	7442 <__divsi3+0x14a>
    7440:	0989      	lsrs	r1, r1, #6
    7442:	09c3      	lsrs	r3, r0, #7
    7444:	428b      	cmp	r3, r1
    7446:	d301      	bcc.n	744c <__divsi3+0x154>
    7448:	01cb      	lsls	r3, r1, #7
    744a:	1ac0      	subs	r0, r0, r3
    744c:	4152      	adcs	r2, r2
    744e:	0983      	lsrs	r3, r0, #6
    7450:	428b      	cmp	r3, r1
    7452:	d301      	bcc.n	7458 <__divsi3+0x160>
    7454:	018b      	lsls	r3, r1, #6
    7456:	1ac0      	subs	r0, r0, r3
    7458:	4152      	adcs	r2, r2
    745a:	0943      	lsrs	r3, r0, #5
    745c:	428b      	cmp	r3, r1
    745e:	d301      	bcc.n	7464 <__divsi3+0x16c>
    7460:	014b      	lsls	r3, r1, #5
    7462:	1ac0      	subs	r0, r0, r3
    7464:	4152      	adcs	r2, r2
    7466:	0903      	lsrs	r3, r0, #4
    7468:	428b      	cmp	r3, r1
    746a:	d301      	bcc.n	7470 <__divsi3+0x178>
    746c:	010b      	lsls	r3, r1, #4
    746e:	1ac0      	subs	r0, r0, r3
    7470:	4152      	adcs	r2, r2
    7472:	08c3      	lsrs	r3, r0, #3
    7474:	428b      	cmp	r3, r1
    7476:	d301      	bcc.n	747c <__divsi3+0x184>
    7478:	00cb      	lsls	r3, r1, #3
    747a:	1ac0      	subs	r0, r0, r3
    747c:	4152      	adcs	r2, r2
    747e:	0883      	lsrs	r3, r0, #2
    7480:	428b      	cmp	r3, r1
    7482:	d301      	bcc.n	7488 <__divsi3+0x190>
    7484:	008b      	lsls	r3, r1, #2
    7486:	1ac0      	subs	r0, r0, r3
    7488:	4152      	adcs	r2, r2
    748a:	d2d9      	bcs.n	7440 <__divsi3+0x148>
    748c:	0843      	lsrs	r3, r0, #1
    748e:	428b      	cmp	r3, r1
    7490:	d301      	bcc.n	7496 <__divsi3+0x19e>
    7492:	004b      	lsls	r3, r1, #1
    7494:	1ac0      	subs	r0, r0, r3
    7496:	4152      	adcs	r2, r2
    7498:	1a41      	subs	r1, r0, r1
    749a:	d200      	bcs.n	749e <__divsi3+0x1a6>
    749c:	4601      	mov	r1, r0
    749e:	4663      	mov	r3, ip
    74a0:	4152      	adcs	r2, r2
    74a2:	105b      	asrs	r3, r3, #1
    74a4:	4610      	mov	r0, r2
    74a6:	d301      	bcc.n	74ac <__divsi3+0x1b4>
    74a8:	4240      	negs	r0, r0
    74aa:	2b00      	cmp	r3, #0
    74ac:	d500      	bpl.n	74b0 <__divsi3+0x1b8>
    74ae:	4249      	negs	r1, r1
    74b0:	4770      	bx	lr
    74b2:	4663      	mov	r3, ip
    74b4:	105b      	asrs	r3, r3, #1
    74b6:	d300      	bcc.n	74ba <__divsi3+0x1c2>
    74b8:	4240      	negs	r0, r0
    74ba:	b501      	push	{r0, lr}
    74bc:	2000      	movs	r0, #0
    74be:	f000 f805 	bl	74cc <__aeabi_idiv0>
    74c2:	bd02      	pop	{r1, pc}

000074c4 <__aeabi_idivmod>:
    74c4:	2900      	cmp	r1, #0
    74c6:	d0f8      	beq.n	74ba <__divsi3+0x1c2>
    74c8:	e716      	b.n	72f8 <__divsi3>
    74ca:	4770      	bx	lr

000074cc <__aeabi_idiv0>:
    74cc:	4770      	bx	lr
    74ce:	46c0      	nop			; (mov r8, r8)

000074d0 <__aeabi_lmul>:
    74d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    74d2:	46ce      	mov	lr, r9
    74d4:	4647      	mov	r7, r8
    74d6:	0415      	lsls	r5, r2, #16
    74d8:	0c2d      	lsrs	r5, r5, #16
    74da:	002e      	movs	r6, r5
    74dc:	b580      	push	{r7, lr}
    74de:	0407      	lsls	r7, r0, #16
    74e0:	0c14      	lsrs	r4, r2, #16
    74e2:	0c3f      	lsrs	r7, r7, #16
    74e4:	4699      	mov	r9, r3
    74e6:	0c03      	lsrs	r3, r0, #16
    74e8:	437e      	muls	r6, r7
    74ea:	435d      	muls	r5, r3
    74ec:	4367      	muls	r7, r4
    74ee:	4363      	muls	r3, r4
    74f0:	197f      	adds	r7, r7, r5
    74f2:	0c34      	lsrs	r4, r6, #16
    74f4:	19e4      	adds	r4, r4, r7
    74f6:	469c      	mov	ip, r3
    74f8:	42a5      	cmp	r5, r4
    74fa:	d903      	bls.n	7504 <__aeabi_lmul+0x34>
    74fc:	2380      	movs	r3, #128	; 0x80
    74fe:	025b      	lsls	r3, r3, #9
    7500:	4698      	mov	r8, r3
    7502:	44c4      	add	ip, r8
    7504:	464b      	mov	r3, r9
    7506:	4351      	muls	r1, r2
    7508:	4343      	muls	r3, r0
    750a:	0436      	lsls	r6, r6, #16
    750c:	0c36      	lsrs	r6, r6, #16
    750e:	0c25      	lsrs	r5, r4, #16
    7510:	0424      	lsls	r4, r4, #16
    7512:	4465      	add	r5, ip
    7514:	19a4      	adds	r4, r4, r6
    7516:	1859      	adds	r1, r3, r1
    7518:	1949      	adds	r1, r1, r5
    751a:	0020      	movs	r0, r4
    751c:	bc0c      	pop	{r2, r3}
    751e:	4690      	mov	r8, r2
    7520:	4699      	mov	r9, r3
    7522:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007524 <__libc_init_array>:
    7524:	b570      	push	{r4, r5, r6, lr}
    7526:	2600      	movs	r6, #0
    7528:	4d0c      	ldr	r5, [pc, #48]	; (755c <__libc_init_array+0x38>)
    752a:	4c0d      	ldr	r4, [pc, #52]	; (7560 <__libc_init_array+0x3c>)
    752c:	1b64      	subs	r4, r4, r5
    752e:	10a4      	asrs	r4, r4, #2
    7530:	42a6      	cmp	r6, r4
    7532:	d109      	bne.n	7548 <__libc_init_array+0x24>
    7534:	2600      	movs	r6, #0
    7536:	f001 f811 	bl	855c <_init>
    753a:	4d0a      	ldr	r5, [pc, #40]	; (7564 <__libc_init_array+0x40>)
    753c:	4c0a      	ldr	r4, [pc, #40]	; (7568 <__libc_init_array+0x44>)
    753e:	1b64      	subs	r4, r4, r5
    7540:	10a4      	asrs	r4, r4, #2
    7542:	42a6      	cmp	r6, r4
    7544:	d105      	bne.n	7552 <__libc_init_array+0x2e>
    7546:	bd70      	pop	{r4, r5, r6, pc}
    7548:	00b3      	lsls	r3, r6, #2
    754a:	58eb      	ldr	r3, [r5, r3]
    754c:	4798      	blx	r3
    754e:	3601      	adds	r6, #1
    7550:	e7ee      	b.n	7530 <__libc_init_array+0xc>
    7552:	00b3      	lsls	r3, r6, #2
    7554:	58eb      	ldr	r3, [r5, r3]
    7556:	4798      	blx	r3
    7558:	3601      	adds	r6, #1
    755a:	e7f2      	b.n	7542 <__libc_init_array+0x1e>
    755c:	00008568 	.word	0x00008568
    7560:	00008568 	.word	0x00008568
    7564:	00008568 	.word	0x00008568
    7568:	0000856c 	.word	0x0000856c

0000756c <memcmp>:
    756c:	b530      	push	{r4, r5, lr}
    756e:	2400      	movs	r4, #0
    7570:	42a2      	cmp	r2, r4
    7572:	d101      	bne.n	7578 <memcmp+0xc>
    7574:	2000      	movs	r0, #0
    7576:	e005      	b.n	7584 <memcmp+0x18>
    7578:	5d03      	ldrb	r3, [r0, r4]
    757a:	1c65      	adds	r5, r4, #1
    757c:	5d0c      	ldrb	r4, [r1, r4]
    757e:	42a3      	cmp	r3, r4
    7580:	d001      	beq.n	7586 <memcmp+0x1a>
    7582:	1b18      	subs	r0, r3, r4
    7584:	bd30      	pop	{r4, r5, pc}
    7586:	002c      	movs	r4, r5
    7588:	e7f2      	b.n	7570 <memcmp+0x4>

0000758a <memcpy>:
    758a:	2300      	movs	r3, #0
    758c:	b510      	push	{r4, lr}
    758e:	429a      	cmp	r2, r3
    7590:	d100      	bne.n	7594 <memcpy+0xa>
    7592:	bd10      	pop	{r4, pc}
    7594:	5ccc      	ldrb	r4, [r1, r3]
    7596:	54c4      	strb	r4, [r0, r3]
    7598:	3301      	adds	r3, #1
    759a:	e7f8      	b.n	758e <memcpy+0x4>

0000759c <memset>:
    759c:	0003      	movs	r3, r0
    759e:	1882      	adds	r2, r0, r2
    75a0:	4293      	cmp	r3, r2
    75a2:	d100      	bne.n	75a6 <memset+0xa>
    75a4:	4770      	bx	lr
    75a6:	7019      	strb	r1, [r3, #0]
    75a8:	3301      	adds	r3, #1
    75aa:	e7f9      	b.n	75a0 <memset+0x4>

000075ac <setbuf>:
    75ac:	424a      	negs	r2, r1
    75ae:	414a      	adcs	r2, r1
    75b0:	2380      	movs	r3, #128	; 0x80
    75b2:	b510      	push	{r4, lr}
    75b4:	0052      	lsls	r2, r2, #1
    75b6:	00db      	lsls	r3, r3, #3
    75b8:	f000 f802 	bl	75c0 <setvbuf>
    75bc:	bd10      	pop	{r4, pc}
	...

000075c0 <setvbuf>:
    75c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    75c2:	001d      	movs	r5, r3
    75c4:	4b4f      	ldr	r3, [pc, #316]	; (7704 <setvbuf+0x144>)
    75c6:	b085      	sub	sp, #20
    75c8:	681e      	ldr	r6, [r3, #0]
    75ca:	0004      	movs	r4, r0
    75cc:	000f      	movs	r7, r1
    75ce:	9200      	str	r2, [sp, #0]
    75d0:	2e00      	cmp	r6, #0
    75d2:	d005      	beq.n	75e0 <setvbuf+0x20>
    75d4:	69b3      	ldr	r3, [r6, #24]
    75d6:	2b00      	cmp	r3, #0
    75d8:	d102      	bne.n	75e0 <setvbuf+0x20>
    75da:	0030      	movs	r0, r6
    75dc:	f000 f9b6 	bl	794c <__sinit>
    75e0:	4b49      	ldr	r3, [pc, #292]	; (7708 <setvbuf+0x148>)
    75e2:	429c      	cmp	r4, r3
    75e4:	d150      	bne.n	7688 <setvbuf+0xc8>
    75e6:	6874      	ldr	r4, [r6, #4]
    75e8:	9b00      	ldr	r3, [sp, #0]
    75ea:	2b02      	cmp	r3, #2
    75ec:	d005      	beq.n	75fa <setvbuf+0x3a>
    75ee:	2b01      	cmp	r3, #1
    75f0:	d900      	bls.n	75f4 <setvbuf+0x34>
    75f2:	e084      	b.n	76fe <setvbuf+0x13e>
    75f4:	2d00      	cmp	r5, #0
    75f6:	da00      	bge.n	75fa <setvbuf+0x3a>
    75f8:	e081      	b.n	76fe <setvbuf+0x13e>
    75fa:	0021      	movs	r1, r4
    75fc:	0030      	movs	r0, r6
    75fe:	f000 f937 	bl	7870 <_fflush_r>
    7602:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7604:	2900      	cmp	r1, #0
    7606:	d008      	beq.n	761a <setvbuf+0x5a>
    7608:	0023      	movs	r3, r4
    760a:	3344      	adds	r3, #68	; 0x44
    760c:	4299      	cmp	r1, r3
    760e:	d002      	beq.n	7616 <setvbuf+0x56>
    7610:	0030      	movs	r0, r6
    7612:	f000 fa63 	bl	7adc <_free_r>
    7616:	2300      	movs	r3, #0
    7618:	6363      	str	r3, [r4, #52]	; 0x34
    761a:	2300      	movs	r3, #0
    761c:	61a3      	str	r3, [r4, #24]
    761e:	6063      	str	r3, [r4, #4]
    7620:	89a3      	ldrh	r3, [r4, #12]
    7622:	061b      	lsls	r3, r3, #24
    7624:	d503      	bpl.n	762e <setvbuf+0x6e>
    7626:	6921      	ldr	r1, [r4, #16]
    7628:	0030      	movs	r0, r6
    762a:	f000 fa57 	bl	7adc <_free_r>
    762e:	89a3      	ldrh	r3, [r4, #12]
    7630:	4a36      	ldr	r2, [pc, #216]	; (770c <setvbuf+0x14c>)
    7632:	4013      	ands	r3, r2
    7634:	81a3      	strh	r3, [r4, #12]
    7636:	9b00      	ldr	r3, [sp, #0]
    7638:	2b02      	cmp	r3, #2
    763a:	d05a      	beq.n	76f2 <setvbuf+0x132>
    763c:	ab03      	add	r3, sp, #12
    763e:	aa02      	add	r2, sp, #8
    7640:	0021      	movs	r1, r4
    7642:	0030      	movs	r0, r6
    7644:	f000 fa18 	bl	7a78 <__swhatbuf_r>
    7648:	89a3      	ldrh	r3, [r4, #12]
    764a:	4318      	orrs	r0, r3
    764c:	81a0      	strh	r0, [r4, #12]
    764e:	2d00      	cmp	r5, #0
    7650:	d124      	bne.n	769c <setvbuf+0xdc>
    7652:	9d02      	ldr	r5, [sp, #8]
    7654:	0028      	movs	r0, r5
    7656:	f000 fa37 	bl	7ac8 <malloc>
    765a:	9501      	str	r5, [sp, #4]
    765c:	1e07      	subs	r7, r0, #0
    765e:	d142      	bne.n	76e6 <setvbuf+0x126>
    7660:	9b02      	ldr	r3, [sp, #8]
    7662:	9301      	str	r3, [sp, #4]
    7664:	42ab      	cmp	r3, r5
    7666:	d139      	bne.n	76dc <setvbuf+0x11c>
    7668:	2001      	movs	r0, #1
    766a:	4240      	negs	r0, r0
    766c:	2302      	movs	r3, #2
    766e:	89a2      	ldrh	r2, [r4, #12]
    7670:	4313      	orrs	r3, r2
    7672:	81a3      	strh	r3, [r4, #12]
    7674:	2300      	movs	r3, #0
    7676:	60a3      	str	r3, [r4, #8]
    7678:	0023      	movs	r3, r4
    767a:	3347      	adds	r3, #71	; 0x47
    767c:	6023      	str	r3, [r4, #0]
    767e:	6123      	str	r3, [r4, #16]
    7680:	2301      	movs	r3, #1
    7682:	6163      	str	r3, [r4, #20]
    7684:	b005      	add	sp, #20
    7686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7688:	4b21      	ldr	r3, [pc, #132]	; (7710 <setvbuf+0x150>)
    768a:	429c      	cmp	r4, r3
    768c:	d101      	bne.n	7692 <setvbuf+0xd2>
    768e:	68b4      	ldr	r4, [r6, #8]
    7690:	e7aa      	b.n	75e8 <setvbuf+0x28>
    7692:	4b20      	ldr	r3, [pc, #128]	; (7714 <setvbuf+0x154>)
    7694:	429c      	cmp	r4, r3
    7696:	d1a7      	bne.n	75e8 <setvbuf+0x28>
    7698:	68f4      	ldr	r4, [r6, #12]
    769a:	e7a5      	b.n	75e8 <setvbuf+0x28>
    769c:	2f00      	cmp	r7, #0
    769e:	d0d9      	beq.n	7654 <setvbuf+0x94>
    76a0:	69b3      	ldr	r3, [r6, #24]
    76a2:	2b00      	cmp	r3, #0
    76a4:	d102      	bne.n	76ac <setvbuf+0xec>
    76a6:	0030      	movs	r0, r6
    76a8:	f000 f950 	bl	794c <__sinit>
    76ac:	9b00      	ldr	r3, [sp, #0]
    76ae:	2b01      	cmp	r3, #1
    76b0:	d103      	bne.n	76ba <setvbuf+0xfa>
    76b2:	89a3      	ldrh	r3, [r4, #12]
    76b4:	9a00      	ldr	r2, [sp, #0]
    76b6:	431a      	orrs	r2, r3
    76b8:	81a2      	strh	r2, [r4, #12]
    76ba:	2008      	movs	r0, #8
    76bc:	89a3      	ldrh	r3, [r4, #12]
    76be:	6027      	str	r7, [r4, #0]
    76c0:	6127      	str	r7, [r4, #16]
    76c2:	6165      	str	r5, [r4, #20]
    76c4:	4018      	ands	r0, r3
    76c6:	d018      	beq.n	76fa <setvbuf+0x13a>
    76c8:	2001      	movs	r0, #1
    76ca:	4018      	ands	r0, r3
    76cc:	2300      	movs	r3, #0
    76ce:	4298      	cmp	r0, r3
    76d0:	d011      	beq.n	76f6 <setvbuf+0x136>
    76d2:	426d      	negs	r5, r5
    76d4:	60a3      	str	r3, [r4, #8]
    76d6:	61a5      	str	r5, [r4, #24]
    76d8:	0018      	movs	r0, r3
    76da:	e7d3      	b.n	7684 <setvbuf+0xc4>
    76dc:	9801      	ldr	r0, [sp, #4]
    76de:	f000 f9f3 	bl	7ac8 <malloc>
    76e2:	1e07      	subs	r7, r0, #0
    76e4:	d0c0      	beq.n	7668 <setvbuf+0xa8>
    76e6:	2380      	movs	r3, #128	; 0x80
    76e8:	89a2      	ldrh	r2, [r4, #12]
    76ea:	9d01      	ldr	r5, [sp, #4]
    76ec:	4313      	orrs	r3, r2
    76ee:	81a3      	strh	r3, [r4, #12]
    76f0:	e7d6      	b.n	76a0 <setvbuf+0xe0>
    76f2:	2000      	movs	r0, #0
    76f4:	e7ba      	b.n	766c <setvbuf+0xac>
    76f6:	60a5      	str	r5, [r4, #8]
    76f8:	e7c4      	b.n	7684 <setvbuf+0xc4>
    76fa:	60a0      	str	r0, [r4, #8]
    76fc:	e7c2      	b.n	7684 <setvbuf+0xc4>
    76fe:	2001      	movs	r0, #1
    7700:	4240      	negs	r0, r0
    7702:	e7bf      	b.n	7684 <setvbuf+0xc4>
    7704:	20000058 	.word	0x20000058
    7708:	000084e8 	.word	0x000084e8
    770c:	fffff35c 	.word	0xfffff35c
    7710:	00008508 	.word	0x00008508
    7714:	000084c8 	.word	0x000084c8

00007718 <siprintf>:
    7718:	b40e      	push	{r1, r2, r3}
    771a:	b510      	push	{r4, lr}
    771c:	b09d      	sub	sp, #116	; 0x74
    771e:	a902      	add	r1, sp, #8
    7720:	9002      	str	r0, [sp, #8]
    7722:	6108      	str	r0, [r1, #16]
    7724:	480b      	ldr	r0, [pc, #44]	; (7754 <siprintf+0x3c>)
    7726:	2482      	movs	r4, #130	; 0x82
    7728:	6088      	str	r0, [r1, #8]
    772a:	6148      	str	r0, [r1, #20]
    772c:	2001      	movs	r0, #1
    772e:	4240      	negs	r0, r0
    7730:	ab1f      	add	r3, sp, #124	; 0x7c
    7732:	81c8      	strh	r0, [r1, #14]
    7734:	4808      	ldr	r0, [pc, #32]	; (7758 <siprintf+0x40>)
    7736:	cb04      	ldmia	r3!, {r2}
    7738:	00a4      	lsls	r4, r4, #2
    773a:	6800      	ldr	r0, [r0, #0]
    773c:	9301      	str	r3, [sp, #4]
    773e:	818c      	strh	r4, [r1, #12]
    7740:	f000 fad6 	bl	7cf0 <_svfiprintf_r>
    7744:	2300      	movs	r3, #0
    7746:	9a02      	ldr	r2, [sp, #8]
    7748:	7013      	strb	r3, [r2, #0]
    774a:	b01d      	add	sp, #116	; 0x74
    774c:	bc10      	pop	{r4}
    774e:	bc08      	pop	{r3}
    7750:	b003      	add	sp, #12
    7752:	4718      	bx	r3
    7754:	7fffffff 	.word	0x7fffffff
    7758:	20000058 	.word	0x20000058

0000775c <__sflush_r>:
    775c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    775e:	898a      	ldrh	r2, [r1, #12]
    7760:	0005      	movs	r5, r0
    7762:	000c      	movs	r4, r1
    7764:	0713      	lsls	r3, r2, #28
    7766:	d460      	bmi.n	782a <__sflush_r+0xce>
    7768:	684b      	ldr	r3, [r1, #4]
    776a:	2b00      	cmp	r3, #0
    776c:	dc04      	bgt.n	7778 <__sflush_r+0x1c>
    776e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7770:	2b00      	cmp	r3, #0
    7772:	dc01      	bgt.n	7778 <__sflush_r+0x1c>
    7774:	2000      	movs	r0, #0
    7776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7778:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    777a:	2f00      	cmp	r7, #0
    777c:	d0fa      	beq.n	7774 <__sflush_r+0x18>
    777e:	2300      	movs	r3, #0
    7780:	682e      	ldr	r6, [r5, #0]
    7782:	602b      	str	r3, [r5, #0]
    7784:	2380      	movs	r3, #128	; 0x80
    7786:	015b      	lsls	r3, r3, #5
    7788:	401a      	ands	r2, r3
    778a:	d034      	beq.n	77f6 <__sflush_r+0x9a>
    778c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    778e:	89a3      	ldrh	r3, [r4, #12]
    7790:	075b      	lsls	r3, r3, #29
    7792:	d506      	bpl.n	77a2 <__sflush_r+0x46>
    7794:	6863      	ldr	r3, [r4, #4]
    7796:	1ac0      	subs	r0, r0, r3
    7798:	6b63      	ldr	r3, [r4, #52]	; 0x34
    779a:	2b00      	cmp	r3, #0
    779c:	d001      	beq.n	77a2 <__sflush_r+0x46>
    779e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    77a0:	1ac0      	subs	r0, r0, r3
    77a2:	0002      	movs	r2, r0
    77a4:	6a21      	ldr	r1, [r4, #32]
    77a6:	2300      	movs	r3, #0
    77a8:	0028      	movs	r0, r5
    77aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    77ac:	47b8      	blx	r7
    77ae:	89a1      	ldrh	r1, [r4, #12]
    77b0:	1c43      	adds	r3, r0, #1
    77b2:	d106      	bne.n	77c2 <__sflush_r+0x66>
    77b4:	682b      	ldr	r3, [r5, #0]
    77b6:	2b1d      	cmp	r3, #29
    77b8:	d831      	bhi.n	781e <__sflush_r+0xc2>
    77ba:	4a2c      	ldr	r2, [pc, #176]	; (786c <__sflush_r+0x110>)
    77bc:	40da      	lsrs	r2, r3
    77be:	07d3      	lsls	r3, r2, #31
    77c0:	d52d      	bpl.n	781e <__sflush_r+0xc2>
    77c2:	2300      	movs	r3, #0
    77c4:	6063      	str	r3, [r4, #4]
    77c6:	6923      	ldr	r3, [r4, #16]
    77c8:	6023      	str	r3, [r4, #0]
    77ca:	04cb      	lsls	r3, r1, #19
    77cc:	d505      	bpl.n	77da <__sflush_r+0x7e>
    77ce:	1c43      	adds	r3, r0, #1
    77d0:	d102      	bne.n	77d8 <__sflush_r+0x7c>
    77d2:	682b      	ldr	r3, [r5, #0]
    77d4:	2b00      	cmp	r3, #0
    77d6:	d100      	bne.n	77da <__sflush_r+0x7e>
    77d8:	6560      	str	r0, [r4, #84]	; 0x54
    77da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    77dc:	602e      	str	r6, [r5, #0]
    77de:	2900      	cmp	r1, #0
    77e0:	d0c8      	beq.n	7774 <__sflush_r+0x18>
    77e2:	0023      	movs	r3, r4
    77e4:	3344      	adds	r3, #68	; 0x44
    77e6:	4299      	cmp	r1, r3
    77e8:	d002      	beq.n	77f0 <__sflush_r+0x94>
    77ea:	0028      	movs	r0, r5
    77ec:	f000 f976 	bl	7adc <_free_r>
    77f0:	2000      	movs	r0, #0
    77f2:	6360      	str	r0, [r4, #52]	; 0x34
    77f4:	e7bf      	b.n	7776 <__sflush_r+0x1a>
    77f6:	2301      	movs	r3, #1
    77f8:	6a21      	ldr	r1, [r4, #32]
    77fa:	0028      	movs	r0, r5
    77fc:	47b8      	blx	r7
    77fe:	1c43      	adds	r3, r0, #1
    7800:	d1c5      	bne.n	778e <__sflush_r+0x32>
    7802:	682b      	ldr	r3, [r5, #0]
    7804:	2b00      	cmp	r3, #0
    7806:	d0c2      	beq.n	778e <__sflush_r+0x32>
    7808:	2b1d      	cmp	r3, #29
    780a:	d001      	beq.n	7810 <__sflush_r+0xb4>
    780c:	2b16      	cmp	r3, #22
    780e:	d101      	bne.n	7814 <__sflush_r+0xb8>
    7810:	602e      	str	r6, [r5, #0]
    7812:	e7af      	b.n	7774 <__sflush_r+0x18>
    7814:	2340      	movs	r3, #64	; 0x40
    7816:	89a2      	ldrh	r2, [r4, #12]
    7818:	4313      	orrs	r3, r2
    781a:	81a3      	strh	r3, [r4, #12]
    781c:	e7ab      	b.n	7776 <__sflush_r+0x1a>
    781e:	2340      	movs	r3, #64	; 0x40
    7820:	430b      	orrs	r3, r1
    7822:	2001      	movs	r0, #1
    7824:	81a3      	strh	r3, [r4, #12]
    7826:	4240      	negs	r0, r0
    7828:	e7a5      	b.n	7776 <__sflush_r+0x1a>
    782a:	690f      	ldr	r7, [r1, #16]
    782c:	2f00      	cmp	r7, #0
    782e:	d0a1      	beq.n	7774 <__sflush_r+0x18>
    7830:	680b      	ldr	r3, [r1, #0]
    7832:	600f      	str	r7, [r1, #0]
    7834:	1bdb      	subs	r3, r3, r7
    7836:	9301      	str	r3, [sp, #4]
    7838:	2300      	movs	r3, #0
    783a:	0792      	lsls	r2, r2, #30
    783c:	d100      	bne.n	7840 <__sflush_r+0xe4>
    783e:	694b      	ldr	r3, [r1, #20]
    7840:	60a3      	str	r3, [r4, #8]
    7842:	9b01      	ldr	r3, [sp, #4]
    7844:	2b00      	cmp	r3, #0
    7846:	dc00      	bgt.n	784a <__sflush_r+0xee>
    7848:	e794      	b.n	7774 <__sflush_r+0x18>
    784a:	9b01      	ldr	r3, [sp, #4]
    784c:	003a      	movs	r2, r7
    784e:	6a21      	ldr	r1, [r4, #32]
    7850:	0028      	movs	r0, r5
    7852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7854:	47b0      	blx	r6
    7856:	2800      	cmp	r0, #0
    7858:	dc03      	bgt.n	7862 <__sflush_r+0x106>
    785a:	2340      	movs	r3, #64	; 0x40
    785c:	89a2      	ldrh	r2, [r4, #12]
    785e:	4313      	orrs	r3, r2
    7860:	e7df      	b.n	7822 <__sflush_r+0xc6>
    7862:	9b01      	ldr	r3, [sp, #4]
    7864:	183f      	adds	r7, r7, r0
    7866:	1a1b      	subs	r3, r3, r0
    7868:	9301      	str	r3, [sp, #4]
    786a:	e7ea      	b.n	7842 <__sflush_r+0xe6>
    786c:	20400001 	.word	0x20400001

00007870 <_fflush_r>:
    7870:	690b      	ldr	r3, [r1, #16]
    7872:	b570      	push	{r4, r5, r6, lr}
    7874:	0005      	movs	r5, r0
    7876:	000c      	movs	r4, r1
    7878:	2b00      	cmp	r3, #0
    787a:	d101      	bne.n	7880 <_fflush_r+0x10>
    787c:	2000      	movs	r0, #0
    787e:	bd70      	pop	{r4, r5, r6, pc}
    7880:	2800      	cmp	r0, #0
    7882:	d004      	beq.n	788e <_fflush_r+0x1e>
    7884:	6983      	ldr	r3, [r0, #24]
    7886:	2b00      	cmp	r3, #0
    7888:	d101      	bne.n	788e <_fflush_r+0x1e>
    788a:	f000 f85f 	bl	794c <__sinit>
    788e:	4b0b      	ldr	r3, [pc, #44]	; (78bc <_fflush_r+0x4c>)
    7890:	429c      	cmp	r4, r3
    7892:	d109      	bne.n	78a8 <_fflush_r+0x38>
    7894:	686c      	ldr	r4, [r5, #4]
    7896:	220c      	movs	r2, #12
    7898:	5ea3      	ldrsh	r3, [r4, r2]
    789a:	2b00      	cmp	r3, #0
    789c:	d0ee      	beq.n	787c <_fflush_r+0xc>
    789e:	0021      	movs	r1, r4
    78a0:	0028      	movs	r0, r5
    78a2:	f7ff ff5b 	bl	775c <__sflush_r>
    78a6:	e7ea      	b.n	787e <_fflush_r+0xe>
    78a8:	4b05      	ldr	r3, [pc, #20]	; (78c0 <_fflush_r+0x50>)
    78aa:	429c      	cmp	r4, r3
    78ac:	d101      	bne.n	78b2 <_fflush_r+0x42>
    78ae:	68ac      	ldr	r4, [r5, #8]
    78b0:	e7f1      	b.n	7896 <_fflush_r+0x26>
    78b2:	4b04      	ldr	r3, [pc, #16]	; (78c4 <_fflush_r+0x54>)
    78b4:	429c      	cmp	r4, r3
    78b6:	d1ee      	bne.n	7896 <_fflush_r+0x26>
    78b8:	68ec      	ldr	r4, [r5, #12]
    78ba:	e7ec      	b.n	7896 <_fflush_r+0x26>
    78bc:	000084e8 	.word	0x000084e8
    78c0:	00008508 	.word	0x00008508
    78c4:	000084c8 	.word	0x000084c8

000078c8 <_cleanup_r>:
    78c8:	b510      	push	{r4, lr}
    78ca:	4902      	ldr	r1, [pc, #8]	; (78d4 <_cleanup_r+0xc>)
    78cc:	f000 f8b2 	bl	7a34 <_fwalk_reent>
    78d0:	bd10      	pop	{r4, pc}
    78d2:	46c0      	nop			; (mov r8, r8)
    78d4:	00007871 	.word	0x00007871

000078d8 <std.isra.0>:
    78d8:	2300      	movs	r3, #0
    78da:	b510      	push	{r4, lr}
    78dc:	0004      	movs	r4, r0
    78de:	6003      	str	r3, [r0, #0]
    78e0:	6043      	str	r3, [r0, #4]
    78e2:	6083      	str	r3, [r0, #8]
    78e4:	8181      	strh	r1, [r0, #12]
    78e6:	6643      	str	r3, [r0, #100]	; 0x64
    78e8:	81c2      	strh	r2, [r0, #14]
    78ea:	6103      	str	r3, [r0, #16]
    78ec:	6143      	str	r3, [r0, #20]
    78ee:	6183      	str	r3, [r0, #24]
    78f0:	0019      	movs	r1, r3
    78f2:	2208      	movs	r2, #8
    78f4:	305c      	adds	r0, #92	; 0x5c
    78f6:	f7ff fe51 	bl	759c <memset>
    78fa:	4b05      	ldr	r3, [pc, #20]	; (7910 <std.isra.0+0x38>)
    78fc:	6224      	str	r4, [r4, #32]
    78fe:	6263      	str	r3, [r4, #36]	; 0x24
    7900:	4b04      	ldr	r3, [pc, #16]	; (7914 <std.isra.0+0x3c>)
    7902:	62a3      	str	r3, [r4, #40]	; 0x28
    7904:	4b04      	ldr	r3, [pc, #16]	; (7918 <std.isra.0+0x40>)
    7906:	62e3      	str	r3, [r4, #44]	; 0x2c
    7908:	4b04      	ldr	r3, [pc, #16]	; (791c <std.isra.0+0x44>)
    790a:	6323      	str	r3, [r4, #48]	; 0x30
    790c:	bd10      	pop	{r4, pc}
    790e:	46c0      	nop			; (mov r8, r8)
    7910:	0000822d 	.word	0x0000822d
    7914:	00008255 	.word	0x00008255
    7918:	0000828d 	.word	0x0000828d
    791c:	000082b9 	.word	0x000082b9

00007920 <__sfmoreglue>:
    7920:	b570      	push	{r4, r5, r6, lr}
    7922:	2568      	movs	r5, #104	; 0x68
    7924:	1e4a      	subs	r2, r1, #1
    7926:	4355      	muls	r5, r2
    7928:	000e      	movs	r6, r1
    792a:	0029      	movs	r1, r5
    792c:	3174      	adds	r1, #116	; 0x74
    792e:	f000 f91f 	bl	7b70 <_malloc_r>
    7932:	1e04      	subs	r4, r0, #0
    7934:	d008      	beq.n	7948 <__sfmoreglue+0x28>
    7936:	2100      	movs	r1, #0
    7938:	002a      	movs	r2, r5
    793a:	6001      	str	r1, [r0, #0]
    793c:	6046      	str	r6, [r0, #4]
    793e:	300c      	adds	r0, #12
    7940:	60a0      	str	r0, [r4, #8]
    7942:	3268      	adds	r2, #104	; 0x68
    7944:	f7ff fe2a 	bl	759c <memset>
    7948:	0020      	movs	r0, r4
    794a:	bd70      	pop	{r4, r5, r6, pc}

0000794c <__sinit>:
    794c:	6983      	ldr	r3, [r0, #24]
    794e:	b513      	push	{r0, r1, r4, lr}
    7950:	0004      	movs	r4, r0
    7952:	2b00      	cmp	r3, #0
    7954:	d128      	bne.n	79a8 <__sinit+0x5c>
    7956:	6483      	str	r3, [r0, #72]	; 0x48
    7958:	64c3      	str	r3, [r0, #76]	; 0x4c
    795a:	6503      	str	r3, [r0, #80]	; 0x50
    795c:	4b13      	ldr	r3, [pc, #76]	; (79ac <__sinit+0x60>)
    795e:	4a14      	ldr	r2, [pc, #80]	; (79b0 <__sinit+0x64>)
    7960:	681b      	ldr	r3, [r3, #0]
    7962:	6282      	str	r2, [r0, #40]	; 0x28
    7964:	9301      	str	r3, [sp, #4]
    7966:	4298      	cmp	r0, r3
    7968:	d101      	bne.n	796e <__sinit+0x22>
    796a:	2301      	movs	r3, #1
    796c:	6183      	str	r3, [r0, #24]
    796e:	0020      	movs	r0, r4
    7970:	f000 f820 	bl	79b4 <__sfp>
    7974:	6060      	str	r0, [r4, #4]
    7976:	0020      	movs	r0, r4
    7978:	f000 f81c 	bl	79b4 <__sfp>
    797c:	60a0      	str	r0, [r4, #8]
    797e:	0020      	movs	r0, r4
    7980:	f000 f818 	bl	79b4 <__sfp>
    7984:	2200      	movs	r2, #0
    7986:	60e0      	str	r0, [r4, #12]
    7988:	2104      	movs	r1, #4
    798a:	6860      	ldr	r0, [r4, #4]
    798c:	f7ff ffa4 	bl	78d8 <std.isra.0>
    7990:	2201      	movs	r2, #1
    7992:	2109      	movs	r1, #9
    7994:	68a0      	ldr	r0, [r4, #8]
    7996:	f7ff ff9f 	bl	78d8 <std.isra.0>
    799a:	2202      	movs	r2, #2
    799c:	2112      	movs	r1, #18
    799e:	68e0      	ldr	r0, [r4, #12]
    79a0:	f7ff ff9a 	bl	78d8 <std.isra.0>
    79a4:	2301      	movs	r3, #1
    79a6:	61a3      	str	r3, [r4, #24]
    79a8:	bd13      	pop	{r0, r1, r4, pc}
    79aa:	46c0      	nop			; (mov r8, r8)
    79ac:	000084c4 	.word	0x000084c4
    79b0:	000078c9 	.word	0x000078c9

000079b4 <__sfp>:
    79b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79b6:	4b1e      	ldr	r3, [pc, #120]	; (7a30 <__sfp+0x7c>)
    79b8:	0007      	movs	r7, r0
    79ba:	681e      	ldr	r6, [r3, #0]
    79bc:	69b3      	ldr	r3, [r6, #24]
    79be:	2b00      	cmp	r3, #0
    79c0:	d102      	bne.n	79c8 <__sfp+0x14>
    79c2:	0030      	movs	r0, r6
    79c4:	f7ff ffc2 	bl	794c <__sinit>
    79c8:	3648      	adds	r6, #72	; 0x48
    79ca:	68b4      	ldr	r4, [r6, #8]
    79cc:	6873      	ldr	r3, [r6, #4]
    79ce:	3b01      	subs	r3, #1
    79d0:	d504      	bpl.n	79dc <__sfp+0x28>
    79d2:	6833      	ldr	r3, [r6, #0]
    79d4:	2b00      	cmp	r3, #0
    79d6:	d007      	beq.n	79e8 <__sfp+0x34>
    79d8:	6836      	ldr	r6, [r6, #0]
    79da:	e7f6      	b.n	79ca <__sfp+0x16>
    79dc:	220c      	movs	r2, #12
    79de:	5ea5      	ldrsh	r5, [r4, r2]
    79e0:	2d00      	cmp	r5, #0
    79e2:	d00d      	beq.n	7a00 <__sfp+0x4c>
    79e4:	3468      	adds	r4, #104	; 0x68
    79e6:	e7f2      	b.n	79ce <__sfp+0x1a>
    79e8:	2104      	movs	r1, #4
    79ea:	0038      	movs	r0, r7
    79ec:	f7ff ff98 	bl	7920 <__sfmoreglue>
    79f0:	6030      	str	r0, [r6, #0]
    79f2:	2800      	cmp	r0, #0
    79f4:	d1f0      	bne.n	79d8 <__sfp+0x24>
    79f6:	230c      	movs	r3, #12
    79f8:	0004      	movs	r4, r0
    79fa:	603b      	str	r3, [r7, #0]
    79fc:	0020      	movs	r0, r4
    79fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a00:	2301      	movs	r3, #1
    7a02:	0020      	movs	r0, r4
    7a04:	425b      	negs	r3, r3
    7a06:	81e3      	strh	r3, [r4, #14]
    7a08:	3302      	adds	r3, #2
    7a0a:	81a3      	strh	r3, [r4, #12]
    7a0c:	6665      	str	r5, [r4, #100]	; 0x64
    7a0e:	6025      	str	r5, [r4, #0]
    7a10:	60a5      	str	r5, [r4, #8]
    7a12:	6065      	str	r5, [r4, #4]
    7a14:	6125      	str	r5, [r4, #16]
    7a16:	6165      	str	r5, [r4, #20]
    7a18:	61a5      	str	r5, [r4, #24]
    7a1a:	2208      	movs	r2, #8
    7a1c:	0029      	movs	r1, r5
    7a1e:	305c      	adds	r0, #92	; 0x5c
    7a20:	f7ff fdbc 	bl	759c <memset>
    7a24:	6365      	str	r5, [r4, #52]	; 0x34
    7a26:	63a5      	str	r5, [r4, #56]	; 0x38
    7a28:	64a5      	str	r5, [r4, #72]	; 0x48
    7a2a:	64e5      	str	r5, [r4, #76]	; 0x4c
    7a2c:	e7e6      	b.n	79fc <__sfp+0x48>
    7a2e:	46c0      	nop			; (mov r8, r8)
    7a30:	000084c4 	.word	0x000084c4

00007a34 <_fwalk_reent>:
    7a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7a36:	0004      	movs	r4, r0
    7a38:	0007      	movs	r7, r0
    7a3a:	2600      	movs	r6, #0
    7a3c:	9101      	str	r1, [sp, #4]
    7a3e:	3448      	adds	r4, #72	; 0x48
    7a40:	2c00      	cmp	r4, #0
    7a42:	d101      	bne.n	7a48 <_fwalk_reent+0x14>
    7a44:	0030      	movs	r0, r6
    7a46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7a48:	6863      	ldr	r3, [r4, #4]
    7a4a:	68a5      	ldr	r5, [r4, #8]
    7a4c:	9300      	str	r3, [sp, #0]
    7a4e:	9b00      	ldr	r3, [sp, #0]
    7a50:	3b01      	subs	r3, #1
    7a52:	9300      	str	r3, [sp, #0]
    7a54:	d501      	bpl.n	7a5a <_fwalk_reent+0x26>
    7a56:	6824      	ldr	r4, [r4, #0]
    7a58:	e7f2      	b.n	7a40 <_fwalk_reent+0xc>
    7a5a:	89ab      	ldrh	r3, [r5, #12]
    7a5c:	2b01      	cmp	r3, #1
    7a5e:	d908      	bls.n	7a72 <_fwalk_reent+0x3e>
    7a60:	220e      	movs	r2, #14
    7a62:	5eab      	ldrsh	r3, [r5, r2]
    7a64:	3301      	adds	r3, #1
    7a66:	d004      	beq.n	7a72 <_fwalk_reent+0x3e>
    7a68:	0029      	movs	r1, r5
    7a6a:	0038      	movs	r0, r7
    7a6c:	9b01      	ldr	r3, [sp, #4]
    7a6e:	4798      	blx	r3
    7a70:	4306      	orrs	r6, r0
    7a72:	3568      	adds	r5, #104	; 0x68
    7a74:	e7eb      	b.n	7a4e <_fwalk_reent+0x1a>
	...

00007a78 <__swhatbuf_r>:
    7a78:	b570      	push	{r4, r5, r6, lr}
    7a7a:	000e      	movs	r6, r1
    7a7c:	001d      	movs	r5, r3
    7a7e:	230e      	movs	r3, #14
    7a80:	5ec9      	ldrsh	r1, [r1, r3]
    7a82:	b090      	sub	sp, #64	; 0x40
    7a84:	0014      	movs	r4, r2
    7a86:	2900      	cmp	r1, #0
    7a88:	da07      	bge.n	7a9a <__swhatbuf_r+0x22>
    7a8a:	2300      	movs	r3, #0
    7a8c:	602b      	str	r3, [r5, #0]
    7a8e:	89b3      	ldrh	r3, [r6, #12]
    7a90:	061b      	lsls	r3, r3, #24
    7a92:	d411      	bmi.n	7ab8 <__swhatbuf_r+0x40>
    7a94:	2380      	movs	r3, #128	; 0x80
    7a96:	00db      	lsls	r3, r3, #3
    7a98:	e00f      	b.n	7aba <__swhatbuf_r+0x42>
    7a9a:	aa01      	add	r2, sp, #4
    7a9c:	f000 fc38 	bl	8310 <_fstat_r>
    7aa0:	2800      	cmp	r0, #0
    7aa2:	dbf2      	blt.n	7a8a <__swhatbuf_r+0x12>
    7aa4:	22f0      	movs	r2, #240	; 0xf0
    7aa6:	9b02      	ldr	r3, [sp, #8]
    7aa8:	0212      	lsls	r2, r2, #8
    7aaa:	4013      	ands	r3, r2
    7aac:	4a05      	ldr	r2, [pc, #20]	; (7ac4 <__swhatbuf_r+0x4c>)
    7aae:	189b      	adds	r3, r3, r2
    7ab0:	425a      	negs	r2, r3
    7ab2:	4153      	adcs	r3, r2
    7ab4:	602b      	str	r3, [r5, #0]
    7ab6:	e7ed      	b.n	7a94 <__swhatbuf_r+0x1c>
    7ab8:	2340      	movs	r3, #64	; 0x40
    7aba:	2000      	movs	r0, #0
    7abc:	6023      	str	r3, [r4, #0]
    7abe:	b010      	add	sp, #64	; 0x40
    7ac0:	bd70      	pop	{r4, r5, r6, pc}
    7ac2:	46c0      	nop			; (mov r8, r8)
    7ac4:	ffffe000 	.word	0xffffe000

00007ac8 <malloc>:
    7ac8:	b510      	push	{r4, lr}
    7aca:	4b03      	ldr	r3, [pc, #12]	; (7ad8 <malloc+0x10>)
    7acc:	0001      	movs	r1, r0
    7ace:	6818      	ldr	r0, [r3, #0]
    7ad0:	f000 f84e 	bl	7b70 <_malloc_r>
    7ad4:	bd10      	pop	{r4, pc}
    7ad6:	46c0      	nop			; (mov r8, r8)
    7ad8:	20000058 	.word	0x20000058

00007adc <_free_r>:
    7adc:	b570      	push	{r4, r5, r6, lr}
    7ade:	0005      	movs	r5, r0
    7ae0:	2900      	cmp	r1, #0
    7ae2:	d010      	beq.n	7b06 <_free_r+0x2a>
    7ae4:	1f0c      	subs	r4, r1, #4
    7ae6:	6823      	ldr	r3, [r4, #0]
    7ae8:	2b00      	cmp	r3, #0
    7aea:	da00      	bge.n	7aee <_free_r+0x12>
    7aec:	18e4      	adds	r4, r4, r3
    7aee:	0028      	movs	r0, r5
    7af0:	f000 fc51 	bl	8396 <__malloc_lock>
    7af4:	4a1d      	ldr	r2, [pc, #116]	; (7b6c <_free_r+0x90>)
    7af6:	6813      	ldr	r3, [r2, #0]
    7af8:	2b00      	cmp	r3, #0
    7afa:	d105      	bne.n	7b08 <_free_r+0x2c>
    7afc:	6063      	str	r3, [r4, #4]
    7afe:	6014      	str	r4, [r2, #0]
    7b00:	0028      	movs	r0, r5
    7b02:	f000 fc49 	bl	8398 <__malloc_unlock>
    7b06:	bd70      	pop	{r4, r5, r6, pc}
    7b08:	42a3      	cmp	r3, r4
    7b0a:	d909      	bls.n	7b20 <_free_r+0x44>
    7b0c:	6821      	ldr	r1, [r4, #0]
    7b0e:	1860      	adds	r0, r4, r1
    7b10:	4283      	cmp	r3, r0
    7b12:	d1f3      	bne.n	7afc <_free_r+0x20>
    7b14:	6818      	ldr	r0, [r3, #0]
    7b16:	685b      	ldr	r3, [r3, #4]
    7b18:	1841      	adds	r1, r0, r1
    7b1a:	6021      	str	r1, [r4, #0]
    7b1c:	e7ee      	b.n	7afc <_free_r+0x20>
    7b1e:	0013      	movs	r3, r2
    7b20:	685a      	ldr	r2, [r3, #4]
    7b22:	2a00      	cmp	r2, #0
    7b24:	d001      	beq.n	7b2a <_free_r+0x4e>
    7b26:	42a2      	cmp	r2, r4
    7b28:	d9f9      	bls.n	7b1e <_free_r+0x42>
    7b2a:	6819      	ldr	r1, [r3, #0]
    7b2c:	1858      	adds	r0, r3, r1
    7b2e:	42a0      	cmp	r0, r4
    7b30:	d10b      	bne.n	7b4a <_free_r+0x6e>
    7b32:	6820      	ldr	r0, [r4, #0]
    7b34:	1809      	adds	r1, r1, r0
    7b36:	1858      	adds	r0, r3, r1
    7b38:	6019      	str	r1, [r3, #0]
    7b3a:	4282      	cmp	r2, r0
    7b3c:	d1e0      	bne.n	7b00 <_free_r+0x24>
    7b3e:	6810      	ldr	r0, [r2, #0]
    7b40:	6852      	ldr	r2, [r2, #4]
    7b42:	1841      	adds	r1, r0, r1
    7b44:	6019      	str	r1, [r3, #0]
    7b46:	605a      	str	r2, [r3, #4]
    7b48:	e7da      	b.n	7b00 <_free_r+0x24>
    7b4a:	42a0      	cmp	r0, r4
    7b4c:	d902      	bls.n	7b54 <_free_r+0x78>
    7b4e:	230c      	movs	r3, #12
    7b50:	602b      	str	r3, [r5, #0]
    7b52:	e7d5      	b.n	7b00 <_free_r+0x24>
    7b54:	6821      	ldr	r1, [r4, #0]
    7b56:	1860      	adds	r0, r4, r1
    7b58:	4282      	cmp	r2, r0
    7b5a:	d103      	bne.n	7b64 <_free_r+0x88>
    7b5c:	6810      	ldr	r0, [r2, #0]
    7b5e:	6852      	ldr	r2, [r2, #4]
    7b60:	1841      	adds	r1, r0, r1
    7b62:	6021      	str	r1, [r4, #0]
    7b64:	6062      	str	r2, [r4, #4]
    7b66:	605c      	str	r4, [r3, #4]
    7b68:	e7ca      	b.n	7b00 <_free_r+0x24>
    7b6a:	46c0      	nop			; (mov r8, r8)
    7b6c:	20000394 	.word	0x20000394

00007b70 <_malloc_r>:
    7b70:	2303      	movs	r3, #3
    7b72:	b570      	push	{r4, r5, r6, lr}
    7b74:	1ccd      	adds	r5, r1, #3
    7b76:	439d      	bics	r5, r3
    7b78:	3508      	adds	r5, #8
    7b7a:	0006      	movs	r6, r0
    7b7c:	2d0c      	cmp	r5, #12
    7b7e:	d21e      	bcs.n	7bbe <_malloc_r+0x4e>
    7b80:	250c      	movs	r5, #12
    7b82:	42a9      	cmp	r1, r5
    7b84:	d81d      	bhi.n	7bc2 <_malloc_r+0x52>
    7b86:	0030      	movs	r0, r6
    7b88:	f000 fc05 	bl	8396 <__malloc_lock>
    7b8c:	4a25      	ldr	r2, [pc, #148]	; (7c24 <_malloc_r+0xb4>)
    7b8e:	6814      	ldr	r4, [r2, #0]
    7b90:	0021      	movs	r1, r4
    7b92:	2900      	cmp	r1, #0
    7b94:	d119      	bne.n	7bca <_malloc_r+0x5a>
    7b96:	4c24      	ldr	r4, [pc, #144]	; (7c28 <_malloc_r+0xb8>)
    7b98:	6823      	ldr	r3, [r4, #0]
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d103      	bne.n	7ba6 <_malloc_r+0x36>
    7b9e:	0030      	movs	r0, r6
    7ba0:	f000 fb32 	bl	8208 <_sbrk_r>
    7ba4:	6020      	str	r0, [r4, #0]
    7ba6:	0029      	movs	r1, r5
    7ba8:	0030      	movs	r0, r6
    7baa:	f000 fb2d 	bl	8208 <_sbrk_r>
    7bae:	1c43      	adds	r3, r0, #1
    7bb0:	d12c      	bne.n	7c0c <_malloc_r+0x9c>
    7bb2:	230c      	movs	r3, #12
    7bb4:	0030      	movs	r0, r6
    7bb6:	6033      	str	r3, [r6, #0]
    7bb8:	f000 fbee 	bl	8398 <__malloc_unlock>
    7bbc:	e003      	b.n	7bc6 <_malloc_r+0x56>
    7bbe:	2d00      	cmp	r5, #0
    7bc0:	dadf      	bge.n	7b82 <_malloc_r+0x12>
    7bc2:	230c      	movs	r3, #12
    7bc4:	6033      	str	r3, [r6, #0]
    7bc6:	2000      	movs	r0, #0
    7bc8:	bd70      	pop	{r4, r5, r6, pc}
    7bca:	680b      	ldr	r3, [r1, #0]
    7bcc:	1b5b      	subs	r3, r3, r5
    7bce:	d41a      	bmi.n	7c06 <_malloc_r+0x96>
    7bd0:	2b0b      	cmp	r3, #11
    7bd2:	d903      	bls.n	7bdc <_malloc_r+0x6c>
    7bd4:	600b      	str	r3, [r1, #0]
    7bd6:	18cc      	adds	r4, r1, r3
    7bd8:	6025      	str	r5, [r4, #0]
    7bda:	e003      	b.n	7be4 <_malloc_r+0x74>
    7bdc:	428c      	cmp	r4, r1
    7bde:	d10e      	bne.n	7bfe <_malloc_r+0x8e>
    7be0:	6863      	ldr	r3, [r4, #4]
    7be2:	6013      	str	r3, [r2, #0]
    7be4:	0030      	movs	r0, r6
    7be6:	f000 fbd7 	bl	8398 <__malloc_unlock>
    7bea:	0020      	movs	r0, r4
    7bec:	2207      	movs	r2, #7
    7bee:	300b      	adds	r0, #11
    7bf0:	1d23      	adds	r3, r4, #4
    7bf2:	4390      	bics	r0, r2
    7bf4:	1ac3      	subs	r3, r0, r3
    7bf6:	d0e7      	beq.n	7bc8 <_malloc_r+0x58>
    7bf8:	425a      	negs	r2, r3
    7bfa:	50e2      	str	r2, [r4, r3]
    7bfc:	e7e4      	b.n	7bc8 <_malloc_r+0x58>
    7bfe:	684b      	ldr	r3, [r1, #4]
    7c00:	6063      	str	r3, [r4, #4]
    7c02:	000c      	movs	r4, r1
    7c04:	e7ee      	b.n	7be4 <_malloc_r+0x74>
    7c06:	000c      	movs	r4, r1
    7c08:	6849      	ldr	r1, [r1, #4]
    7c0a:	e7c2      	b.n	7b92 <_malloc_r+0x22>
    7c0c:	2303      	movs	r3, #3
    7c0e:	1cc4      	adds	r4, r0, #3
    7c10:	439c      	bics	r4, r3
    7c12:	42a0      	cmp	r0, r4
    7c14:	d0e0      	beq.n	7bd8 <_malloc_r+0x68>
    7c16:	1a21      	subs	r1, r4, r0
    7c18:	0030      	movs	r0, r6
    7c1a:	f000 faf5 	bl	8208 <_sbrk_r>
    7c1e:	1c43      	adds	r3, r0, #1
    7c20:	d1da      	bne.n	7bd8 <_malloc_r+0x68>
    7c22:	e7c6      	b.n	7bb2 <_malloc_r+0x42>
    7c24:	20000394 	.word	0x20000394
    7c28:	20000398 	.word	0x20000398

00007c2c <__ssputs_r>:
    7c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c2e:	688e      	ldr	r6, [r1, #8]
    7c30:	b085      	sub	sp, #20
    7c32:	0007      	movs	r7, r0
    7c34:	000c      	movs	r4, r1
    7c36:	9203      	str	r2, [sp, #12]
    7c38:	9301      	str	r3, [sp, #4]
    7c3a:	429e      	cmp	r6, r3
    7c3c:	d839      	bhi.n	7cb2 <__ssputs_r+0x86>
    7c3e:	2390      	movs	r3, #144	; 0x90
    7c40:	898a      	ldrh	r2, [r1, #12]
    7c42:	00db      	lsls	r3, r3, #3
    7c44:	421a      	tst	r2, r3
    7c46:	d034      	beq.n	7cb2 <__ssputs_r+0x86>
    7c48:	2503      	movs	r5, #3
    7c4a:	6909      	ldr	r1, [r1, #16]
    7c4c:	6823      	ldr	r3, [r4, #0]
    7c4e:	1a5b      	subs	r3, r3, r1
    7c50:	9302      	str	r3, [sp, #8]
    7c52:	6963      	ldr	r3, [r4, #20]
    7c54:	9802      	ldr	r0, [sp, #8]
    7c56:	435d      	muls	r5, r3
    7c58:	0feb      	lsrs	r3, r5, #31
    7c5a:	195d      	adds	r5, r3, r5
    7c5c:	9b01      	ldr	r3, [sp, #4]
    7c5e:	106d      	asrs	r5, r5, #1
    7c60:	3301      	adds	r3, #1
    7c62:	181b      	adds	r3, r3, r0
    7c64:	42ab      	cmp	r3, r5
    7c66:	d900      	bls.n	7c6a <__ssputs_r+0x3e>
    7c68:	001d      	movs	r5, r3
    7c6a:	0553      	lsls	r3, r2, #21
    7c6c:	d532      	bpl.n	7cd4 <__ssputs_r+0xa8>
    7c6e:	0029      	movs	r1, r5
    7c70:	0038      	movs	r0, r7
    7c72:	f7ff ff7d 	bl	7b70 <_malloc_r>
    7c76:	1e06      	subs	r6, r0, #0
    7c78:	d109      	bne.n	7c8e <__ssputs_r+0x62>
    7c7a:	230c      	movs	r3, #12
    7c7c:	603b      	str	r3, [r7, #0]
    7c7e:	2340      	movs	r3, #64	; 0x40
    7c80:	2001      	movs	r0, #1
    7c82:	89a2      	ldrh	r2, [r4, #12]
    7c84:	4240      	negs	r0, r0
    7c86:	4313      	orrs	r3, r2
    7c88:	81a3      	strh	r3, [r4, #12]
    7c8a:	b005      	add	sp, #20
    7c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c8e:	9a02      	ldr	r2, [sp, #8]
    7c90:	6921      	ldr	r1, [r4, #16]
    7c92:	f7ff fc7a 	bl	758a <memcpy>
    7c96:	89a3      	ldrh	r3, [r4, #12]
    7c98:	4a14      	ldr	r2, [pc, #80]	; (7cec <__ssputs_r+0xc0>)
    7c9a:	401a      	ands	r2, r3
    7c9c:	2380      	movs	r3, #128	; 0x80
    7c9e:	4313      	orrs	r3, r2
    7ca0:	81a3      	strh	r3, [r4, #12]
    7ca2:	9b02      	ldr	r3, [sp, #8]
    7ca4:	6126      	str	r6, [r4, #16]
    7ca6:	18f6      	adds	r6, r6, r3
    7ca8:	6026      	str	r6, [r4, #0]
    7caa:	6165      	str	r5, [r4, #20]
    7cac:	9e01      	ldr	r6, [sp, #4]
    7cae:	1aed      	subs	r5, r5, r3
    7cb0:	60a5      	str	r5, [r4, #8]
    7cb2:	9b01      	ldr	r3, [sp, #4]
    7cb4:	42b3      	cmp	r3, r6
    7cb6:	d200      	bcs.n	7cba <__ssputs_r+0x8e>
    7cb8:	001e      	movs	r6, r3
    7cba:	0032      	movs	r2, r6
    7cbc:	9903      	ldr	r1, [sp, #12]
    7cbe:	6820      	ldr	r0, [r4, #0]
    7cc0:	f000 fb57 	bl	8372 <memmove>
    7cc4:	68a3      	ldr	r3, [r4, #8]
    7cc6:	2000      	movs	r0, #0
    7cc8:	1b9b      	subs	r3, r3, r6
    7cca:	60a3      	str	r3, [r4, #8]
    7ccc:	6823      	ldr	r3, [r4, #0]
    7cce:	199e      	adds	r6, r3, r6
    7cd0:	6026      	str	r6, [r4, #0]
    7cd2:	e7da      	b.n	7c8a <__ssputs_r+0x5e>
    7cd4:	002a      	movs	r2, r5
    7cd6:	0038      	movs	r0, r7
    7cd8:	f000 fb5f 	bl	839a <_realloc_r>
    7cdc:	1e06      	subs	r6, r0, #0
    7cde:	d1e0      	bne.n	7ca2 <__ssputs_r+0x76>
    7ce0:	6921      	ldr	r1, [r4, #16]
    7ce2:	0038      	movs	r0, r7
    7ce4:	f7ff fefa 	bl	7adc <_free_r>
    7ce8:	e7c7      	b.n	7c7a <__ssputs_r+0x4e>
    7cea:	46c0      	nop			; (mov r8, r8)
    7cec:	fffffb7f 	.word	0xfffffb7f

00007cf0 <_svfiprintf_r>:
    7cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cf2:	b09f      	sub	sp, #124	; 0x7c
    7cf4:	9002      	str	r0, [sp, #8]
    7cf6:	9305      	str	r3, [sp, #20]
    7cf8:	898b      	ldrh	r3, [r1, #12]
    7cfa:	000f      	movs	r7, r1
    7cfc:	0016      	movs	r6, r2
    7cfe:	061b      	lsls	r3, r3, #24
    7d00:	d511      	bpl.n	7d26 <_svfiprintf_r+0x36>
    7d02:	690b      	ldr	r3, [r1, #16]
    7d04:	2b00      	cmp	r3, #0
    7d06:	d10e      	bne.n	7d26 <_svfiprintf_r+0x36>
    7d08:	2140      	movs	r1, #64	; 0x40
    7d0a:	f7ff ff31 	bl	7b70 <_malloc_r>
    7d0e:	6038      	str	r0, [r7, #0]
    7d10:	6138      	str	r0, [r7, #16]
    7d12:	2800      	cmp	r0, #0
    7d14:	d105      	bne.n	7d22 <_svfiprintf_r+0x32>
    7d16:	230c      	movs	r3, #12
    7d18:	9a02      	ldr	r2, [sp, #8]
    7d1a:	3801      	subs	r0, #1
    7d1c:	6013      	str	r3, [r2, #0]
    7d1e:	b01f      	add	sp, #124	; 0x7c
    7d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d22:	2340      	movs	r3, #64	; 0x40
    7d24:	617b      	str	r3, [r7, #20]
    7d26:	2300      	movs	r3, #0
    7d28:	ad06      	add	r5, sp, #24
    7d2a:	616b      	str	r3, [r5, #20]
    7d2c:	3320      	adds	r3, #32
    7d2e:	766b      	strb	r3, [r5, #25]
    7d30:	3310      	adds	r3, #16
    7d32:	76ab      	strb	r3, [r5, #26]
    7d34:	0034      	movs	r4, r6
    7d36:	7823      	ldrb	r3, [r4, #0]
    7d38:	2b00      	cmp	r3, #0
    7d3a:	d147      	bne.n	7dcc <_svfiprintf_r+0xdc>
    7d3c:	1ba3      	subs	r3, r4, r6
    7d3e:	9304      	str	r3, [sp, #16]
    7d40:	d00d      	beq.n	7d5e <_svfiprintf_r+0x6e>
    7d42:	1ba3      	subs	r3, r4, r6
    7d44:	0032      	movs	r2, r6
    7d46:	0039      	movs	r1, r7
    7d48:	9802      	ldr	r0, [sp, #8]
    7d4a:	f7ff ff6f 	bl	7c2c <__ssputs_r>
    7d4e:	1c43      	adds	r3, r0, #1
    7d50:	d100      	bne.n	7d54 <_svfiprintf_r+0x64>
    7d52:	e0b5      	b.n	7ec0 <_svfiprintf_r+0x1d0>
    7d54:	696a      	ldr	r2, [r5, #20]
    7d56:	9b04      	ldr	r3, [sp, #16]
    7d58:	4694      	mov	ip, r2
    7d5a:	4463      	add	r3, ip
    7d5c:	616b      	str	r3, [r5, #20]
    7d5e:	7823      	ldrb	r3, [r4, #0]
    7d60:	2b00      	cmp	r3, #0
    7d62:	d100      	bne.n	7d66 <_svfiprintf_r+0x76>
    7d64:	e0ac      	b.n	7ec0 <_svfiprintf_r+0x1d0>
    7d66:	2201      	movs	r2, #1
    7d68:	2300      	movs	r3, #0
    7d6a:	4252      	negs	r2, r2
    7d6c:	606a      	str	r2, [r5, #4]
    7d6e:	a902      	add	r1, sp, #8
    7d70:	3254      	adds	r2, #84	; 0x54
    7d72:	1852      	adds	r2, r2, r1
    7d74:	3401      	adds	r4, #1
    7d76:	602b      	str	r3, [r5, #0]
    7d78:	60eb      	str	r3, [r5, #12]
    7d7a:	60ab      	str	r3, [r5, #8]
    7d7c:	7013      	strb	r3, [r2, #0]
    7d7e:	65ab      	str	r3, [r5, #88]	; 0x58
    7d80:	4e58      	ldr	r6, [pc, #352]	; (7ee4 <_svfiprintf_r+0x1f4>)
    7d82:	2205      	movs	r2, #5
    7d84:	7821      	ldrb	r1, [r4, #0]
    7d86:	0030      	movs	r0, r6
    7d88:	f000 fae8 	bl	835c <memchr>
    7d8c:	1c62      	adds	r2, r4, #1
    7d8e:	2800      	cmp	r0, #0
    7d90:	d120      	bne.n	7dd4 <_svfiprintf_r+0xe4>
    7d92:	6829      	ldr	r1, [r5, #0]
    7d94:	06cb      	lsls	r3, r1, #27
    7d96:	d504      	bpl.n	7da2 <_svfiprintf_r+0xb2>
    7d98:	2353      	movs	r3, #83	; 0x53
    7d9a:	ae02      	add	r6, sp, #8
    7d9c:	3020      	adds	r0, #32
    7d9e:	199b      	adds	r3, r3, r6
    7da0:	7018      	strb	r0, [r3, #0]
    7da2:	070b      	lsls	r3, r1, #28
    7da4:	d504      	bpl.n	7db0 <_svfiprintf_r+0xc0>
    7da6:	2353      	movs	r3, #83	; 0x53
    7da8:	202b      	movs	r0, #43	; 0x2b
    7daa:	ae02      	add	r6, sp, #8
    7dac:	199b      	adds	r3, r3, r6
    7dae:	7018      	strb	r0, [r3, #0]
    7db0:	7823      	ldrb	r3, [r4, #0]
    7db2:	2b2a      	cmp	r3, #42	; 0x2a
    7db4:	d016      	beq.n	7de4 <_svfiprintf_r+0xf4>
    7db6:	2000      	movs	r0, #0
    7db8:	210a      	movs	r1, #10
    7dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7dbc:	7822      	ldrb	r2, [r4, #0]
    7dbe:	3a30      	subs	r2, #48	; 0x30
    7dc0:	2a09      	cmp	r2, #9
    7dc2:	d955      	bls.n	7e70 <_svfiprintf_r+0x180>
    7dc4:	2800      	cmp	r0, #0
    7dc6:	d015      	beq.n	7df4 <_svfiprintf_r+0x104>
    7dc8:	9309      	str	r3, [sp, #36]	; 0x24
    7dca:	e013      	b.n	7df4 <_svfiprintf_r+0x104>
    7dcc:	2b25      	cmp	r3, #37	; 0x25
    7dce:	d0b5      	beq.n	7d3c <_svfiprintf_r+0x4c>
    7dd0:	3401      	adds	r4, #1
    7dd2:	e7b0      	b.n	7d36 <_svfiprintf_r+0x46>
    7dd4:	2301      	movs	r3, #1
    7dd6:	1b80      	subs	r0, r0, r6
    7dd8:	4083      	lsls	r3, r0
    7dda:	6829      	ldr	r1, [r5, #0]
    7ddc:	0014      	movs	r4, r2
    7dde:	430b      	orrs	r3, r1
    7de0:	602b      	str	r3, [r5, #0]
    7de2:	e7cd      	b.n	7d80 <_svfiprintf_r+0x90>
    7de4:	9b05      	ldr	r3, [sp, #20]
    7de6:	1d18      	adds	r0, r3, #4
    7de8:	681b      	ldr	r3, [r3, #0]
    7dea:	9005      	str	r0, [sp, #20]
    7dec:	2b00      	cmp	r3, #0
    7dee:	db39      	blt.n	7e64 <_svfiprintf_r+0x174>
    7df0:	9309      	str	r3, [sp, #36]	; 0x24
    7df2:	0014      	movs	r4, r2
    7df4:	7823      	ldrb	r3, [r4, #0]
    7df6:	2b2e      	cmp	r3, #46	; 0x2e
    7df8:	d10b      	bne.n	7e12 <_svfiprintf_r+0x122>
    7dfa:	7863      	ldrb	r3, [r4, #1]
    7dfc:	1c62      	adds	r2, r4, #1
    7dfe:	2b2a      	cmp	r3, #42	; 0x2a
    7e00:	d13e      	bne.n	7e80 <_svfiprintf_r+0x190>
    7e02:	9b05      	ldr	r3, [sp, #20]
    7e04:	3402      	adds	r4, #2
    7e06:	1d1a      	adds	r2, r3, #4
    7e08:	681b      	ldr	r3, [r3, #0]
    7e0a:	9205      	str	r2, [sp, #20]
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	db34      	blt.n	7e7a <_svfiprintf_r+0x18a>
    7e10:	9307      	str	r3, [sp, #28]
    7e12:	4e35      	ldr	r6, [pc, #212]	; (7ee8 <_svfiprintf_r+0x1f8>)
    7e14:	7821      	ldrb	r1, [r4, #0]
    7e16:	2203      	movs	r2, #3
    7e18:	0030      	movs	r0, r6
    7e1a:	f000 fa9f 	bl	835c <memchr>
    7e1e:	2800      	cmp	r0, #0
    7e20:	d006      	beq.n	7e30 <_svfiprintf_r+0x140>
    7e22:	2340      	movs	r3, #64	; 0x40
    7e24:	1b80      	subs	r0, r0, r6
    7e26:	4083      	lsls	r3, r0
    7e28:	682a      	ldr	r2, [r5, #0]
    7e2a:	3401      	adds	r4, #1
    7e2c:	4313      	orrs	r3, r2
    7e2e:	602b      	str	r3, [r5, #0]
    7e30:	7821      	ldrb	r1, [r4, #0]
    7e32:	2206      	movs	r2, #6
    7e34:	482d      	ldr	r0, [pc, #180]	; (7eec <_svfiprintf_r+0x1fc>)
    7e36:	1c66      	adds	r6, r4, #1
    7e38:	7629      	strb	r1, [r5, #24]
    7e3a:	f000 fa8f 	bl	835c <memchr>
    7e3e:	2800      	cmp	r0, #0
    7e40:	d046      	beq.n	7ed0 <_svfiprintf_r+0x1e0>
    7e42:	4b2b      	ldr	r3, [pc, #172]	; (7ef0 <_svfiprintf_r+0x200>)
    7e44:	2b00      	cmp	r3, #0
    7e46:	d12f      	bne.n	7ea8 <_svfiprintf_r+0x1b8>
    7e48:	6829      	ldr	r1, [r5, #0]
    7e4a:	9b05      	ldr	r3, [sp, #20]
    7e4c:	2207      	movs	r2, #7
    7e4e:	05c9      	lsls	r1, r1, #23
    7e50:	d528      	bpl.n	7ea4 <_svfiprintf_r+0x1b4>
    7e52:	189b      	adds	r3, r3, r2
    7e54:	4393      	bics	r3, r2
    7e56:	3308      	adds	r3, #8
    7e58:	9305      	str	r3, [sp, #20]
    7e5a:	696b      	ldr	r3, [r5, #20]
    7e5c:	9a03      	ldr	r2, [sp, #12]
    7e5e:	189b      	adds	r3, r3, r2
    7e60:	616b      	str	r3, [r5, #20]
    7e62:	e767      	b.n	7d34 <_svfiprintf_r+0x44>
    7e64:	425b      	negs	r3, r3
    7e66:	60eb      	str	r3, [r5, #12]
    7e68:	2302      	movs	r3, #2
    7e6a:	430b      	orrs	r3, r1
    7e6c:	602b      	str	r3, [r5, #0]
    7e6e:	e7c0      	b.n	7df2 <_svfiprintf_r+0x102>
    7e70:	434b      	muls	r3, r1
    7e72:	3401      	adds	r4, #1
    7e74:	189b      	adds	r3, r3, r2
    7e76:	2001      	movs	r0, #1
    7e78:	e7a0      	b.n	7dbc <_svfiprintf_r+0xcc>
    7e7a:	2301      	movs	r3, #1
    7e7c:	425b      	negs	r3, r3
    7e7e:	e7c7      	b.n	7e10 <_svfiprintf_r+0x120>
    7e80:	2300      	movs	r3, #0
    7e82:	0014      	movs	r4, r2
    7e84:	200a      	movs	r0, #10
    7e86:	001a      	movs	r2, r3
    7e88:	606b      	str	r3, [r5, #4]
    7e8a:	7821      	ldrb	r1, [r4, #0]
    7e8c:	3930      	subs	r1, #48	; 0x30
    7e8e:	2909      	cmp	r1, #9
    7e90:	d903      	bls.n	7e9a <_svfiprintf_r+0x1aa>
    7e92:	2b00      	cmp	r3, #0
    7e94:	d0bd      	beq.n	7e12 <_svfiprintf_r+0x122>
    7e96:	9207      	str	r2, [sp, #28]
    7e98:	e7bb      	b.n	7e12 <_svfiprintf_r+0x122>
    7e9a:	4342      	muls	r2, r0
    7e9c:	3401      	adds	r4, #1
    7e9e:	1852      	adds	r2, r2, r1
    7ea0:	2301      	movs	r3, #1
    7ea2:	e7f2      	b.n	7e8a <_svfiprintf_r+0x19a>
    7ea4:	3307      	adds	r3, #7
    7ea6:	e7d5      	b.n	7e54 <_svfiprintf_r+0x164>
    7ea8:	ab05      	add	r3, sp, #20
    7eaa:	9300      	str	r3, [sp, #0]
    7eac:	003a      	movs	r2, r7
    7eae:	4b11      	ldr	r3, [pc, #68]	; (7ef4 <_svfiprintf_r+0x204>)
    7eb0:	0029      	movs	r1, r5
    7eb2:	9802      	ldr	r0, [sp, #8]
    7eb4:	e000      	b.n	7eb8 <_svfiprintf_r+0x1c8>
    7eb6:	bf00      	nop
    7eb8:	9003      	str	r0, [sp, #12]
    7eba:	9b03      	ldr	r3, [sp, #12]
    7ebc:	3301      	adds	r3, #1
    7ebe:	d1cc      	bne.n	7e5a <_svfiprintf_r+0x16a>
    7ec0:	89bb      	ldrh	r3, [r7, #12]
    7ec2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7ec4:	065b      	lsls	r3, r3, #25
    7ec6:	d400      	bmi.n	7eca <_svfiprintf_r+0x1da>
    7ec8:	e729      	b.n	7d1e <_svfiprintf_r+0x2e>
    7eca:	2001      	movs	r0, #1
    7ecc:	4240      	negs	r0, r0
    7ece:	e726      	b.n	7d1e <_svfiprintf_r+0x2e>
    7ed0:	ab05      	add	r3, sp, #20
    7ed2:	9300      	str	r3, [sp, #0]
    7ed4:	003a      	movs	r2, r7
    7ed6:	4b07      	ldr	r3, [pc, #28]	; (7ef4 <_svfiprintf_r+0x204>)
    7ed8:	0029      	movs	r1, r5
    7eda:	9802      	ldr	r0, [sp, #8]
    7edc:	f000 f87a 	bl	7fd4 <_printf_i>
    7ee0:	e7ea      	b.n	7eb8 <_svfiprintf_r+0x1c8>
    7ee2:	46c0      	nop			; (mov r8, r8)
    7ee4:	00008528 	.word	0x00008528
    7ee8:	0000852e 	.word	0x0000852e
    7eec:	00008532 	.word	0x00008532
    7ef0:	00000000 	.word	0x00000000
    7ef4:	00007c2d 	.word	0x00007c2d

00007ef8 <_printf_common>:
    7ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7efa:	0015      	movs	r5, r2
    7efc:	9301      	str	r3, [sp, #4]
    7efe:	688a      	ldr	r2, [r1, #8]
    7f00:	690b      	ldr	r3, [r1, #16]
    7f02:	9000      	str	r0, [sp, #0]
    7f04:	000c      	movs	r4, r1
    7f06:	4293      	cmp	r3, r2
    7f08:	da00      	bge.n	7f0c <_printf_common+0x14>
    7f0a:	0013      	movs	r3, r2
    7f0c:	0022      	movs	r2, r4
    7f0e:	602b      	str	r3, [r5, #0]
    7f10:	3243      	adds	r2, #67	; 0x43
    7f12:	7812      	ldrb	r2, [r2, #0]
    7f14:	2a00      	cmp	r2, #0
    7f16:	d001      	beq.n	7f1c <_printf_common+0x24>
    7f18:	3301      	adds	r3, #1
    7f1a:	602b      	str	r3, [r5, #0]
    7f1c:	6823      	ldr	r3, [r4, #0]
    7f1e:	069b      	lsls	r3, r3, #26
    7f20:	d502      	bpl.n	7f28 <_printf_common+0x30>
    7f22:	682b      	ldr	r3, [r5, #0]
    7f24:	3302      	adds	r3, #2
    7f26:	602b      	str	r3, [r5, #0]
    7f28:	2706      	movs	r7, #6
    7f2a:	6823      	ldr	r3, [r4, #0]
    7f2c:	401f      	ands	r7, r3
    7f2e:	d027      	beq.n	7f80 <_printf_common+0x88>
    7f30:	0023      	movs	r3, r4
    7f32:	3343      	adds	r3, #67	; 0x43
    7f34:	781b      	ldrb	r3, [r3, #0]
    7f36:	1e5a      	subs	r2, r3, #1
    7f38:	4193      	sbcs	r3, r2
    7f3a:	6822      	ldr	r2, [r4, #0]
    7f3c:	0692      	lsls	r2, r2, #26
    7f3e:	d430      	bmi.n	7fa2 <_printf_common+0xaa>
    7f40:	0022      	movs	r2, r4
    7f42:	9901      	ldr	r1, [sp, #4]
    7f44:	3243      	adds	r2, #67	; 0x43
    7f46:	9800      	ldr	r0, [sp, #0]
    7f48:	9e08      	ldr	r6, [sp, #32]
    7f4a:	47b0      	blx	r6
    7f4c:	1c43      	adds	r3, r0, #1
    7f4e:	d025      	beq.n	7f9c <_printf_common+0xa4>
    7f50:	2306      	movs	r3, #6
    7f52:	6820      	ldr	r0, [r4, #0]
    7f54:	682a      	ldr	r2, [r5, #0]
    7f56:	68e1      	ldr	r1, [r4, #12]
    7f58:	4003      	ands	r3, r0
    7f5a:	2500      	movs	r5, #0
    7f5c:	2b04      	cmp	r3, #4
    7f5e:	d103      	bne.n	7f68 <_printf_common+0x70>
    7f60:	1a8d      	subs	r5, r1, r2
    7f62:	43eb      	mvns	r3, r5
    7f64:	17db      	asrs	r3, r3, #31
    7f66:	401d      	ands	r5, r3
    7f68:	68a3      	ldr	r3, [r4, #8]
    7f6a:	6922      	ldr	r2, [r4, #16]
    7f6c:	4293      	cmp	r3, r2
    7f6e:	dd01      	ble.n	7f74 <_printf_common+0x7c>
    7f70:	1a9b      	subs	r3, r3, r2
    7f72:	18ed      	adds	r5, r5, r3
    7f74:	2700      	movs	r7, #0
    7f76:	42bd      	cmp	r5, r7
    7f78:	d120      	bne.n	7fbc <_printf_common+0xc4>
    7f7a:	2000      	movs	r0, #0
    7f7c:	e010      	b.n	7fa0 <_printf_common+0xa8>
    7f7e:	3701      	adds	r7, #1
    7f80:	68e3      	ldr	r3, [r4, #12]
    7f82:	682a      	ldr	r2, [r5, #0]
    7f84:	1a9b      	subs	r3, r3, r2
    7f86:	429f      	cmp	r7, r3
    7f88:	dad2      	bge.n	7f30 <_printf_common+0x38>
    7f8a:	0022      	movs	r2, r4
    7f8c:	2301      	movs	r3, #1
    7f8e:	3219      	adds	r2, #25
    7f90:	9901      	ldr	r1, [sp, #4]
    7f92:	9800      	ldr	r0, [sp, #0]
    7f94:	9e08      	ldr	r6, [sp, #32]
    7f96:	47b0      	blx	r6
    7f98:	1c43      	adds	r3, r0, #1
    7f9a:	d1f0      	bne.n	7f7e <_printf_common+0x86>
    7f9c:	2001      	movs	r0, #1
    7f9e:	4240      	negs	r0, r0
    7fa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7fa2:	2030      	movs	r0, #48	; 0x30
    7fa4:	18e1      	adds	r1, r4, r3
    7fa6:	3143      	adds	r1, #67	; 0x43
    7fa8:	7008      	strb	r0, [r1, #0]
    7faa:	0021      	movs	r1, r4
    7fac:	1c5a      	adds	r2, r3, #1
    7fae:	3145      	adds	r1, #69	; 0x45
    7fb0:	7809      	ldrb	r1, [r1, #0]
    7fb2:	18a2      	adds	r2, r4, r2
    7fb4:	3243      	adds	r2, #67	; 0x43
    7fb6:	3302      	adds	r3, #2
    7fb8:	7011      	strb	r1, [r2, #0]
    7fba:	e7c1      	b.n	7f40 <_printf_common+0x48>
    7fbc:	0022      	movs	r2, r4
    7fbe:	2301      	movs	r3, #1
    7fc0:	321a      	adds	r2, #26
    7fc2:	9901      	ldr	r1, [sp, #4]
    7fc4:	9800      	ldr	r0, [sp, #0]
    7fc6:	9e08      	ldr	r6, [sp, #32]
    7fc8:	47b0      	blx	r6
    7fca:	1c43      	adds	r3, r0, #1
    7fcc:	d0e6      	beq.n	7f9c <_printf_common+0xa4>
    7fce:	3701      	adds	r7, #1
    7fd0:	e7d1      	b.n	7f76 <_printf_common+0x7e>
	...

00007fd4 <_printf_i>:
    7fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fd6:	b08b      	sub	sp, #44	; 0x2c
    7fd8:	9206      	str	r2, [sp, #24]
    7fda:	000a      	movs	r2, r1
    7fdc:	3243      	adds	r2, #67	; 0x43
    7fde:	9307      	str	r3, [sp, #28]
    7fe0:	9005      	str	r0, [sp, #20]
    7fe2:	9204      	str	r2, [sp, #16]
    7fe4:	7e0a      	ldrb	r2, [r1, #24]
    7fe6:	000c      	movs	r4, r1
    7fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7fea:	2a6e      	cmp	r2, #110	; 0x6e
    7fec:	d100      	bne.n	7ff0 <_printf_i+0x1c>
    7fee:	e08f      	b.n	8110 <_printf_i+0x13c>
    7ff0:	d817      	bhi.n	8022 <_printf_i+0x4e>
    7ff2:	2a63      	cmp	r2, #99	; 0x63
    7ff4:	d02c      	beq.n	8050 <_printf_i+0x7c>
    7ff6:	d808      	bhi.n	800a <_printf_i+0x36>
    7ff8:	2a00      	cmp	r2, #0
    7ffa:	d100      	bne.n	7ffe <_printf_i+0x2a>
    7ffc:	e099      	b.n	8132 <_printf_i+0x15e>
    7ffe:	2a58      	cmp	r2, #88	; 0x58
    8000:	d054      	beq.n	80ac <_printf_i+0xd8>
    8002:	0026      	movs	r6, r4
    8004:	3642      	adds	r6, #66	; 0x42
    8006:	7032      	strb	r2, [r6, #0]
    8008:	e029      	b.n	805e <_printf_i+0x8a>
    800a:	2a64      	cmp	r2, #100	; 0x64
    800c:	d001      	beq.n	8012 <_printf_i+0x3e>
    800e:	2a69      	cmp	r2, #105	; 0x69
    8010:	d1f7      	bne.n	8002 <_printf_i+0x2e>
    8012:	6821      	ldr	r1, [r4, #0]
    8014:	681a      	ldr	r2, [r3, #0]
    8016:	0608      	lsls	r0, r1, #24
    8018:	d523      	bpl.n	8062 <_printf_i+0x8e>
    801a:	1d11      	adds	r1, r2, #4
    801c:	6019      	str	r1, [r3, #0]
    801e:	6815      	ldr	r5, [r2, #0]
    8020:	e025      	b.n	806e <_printf_i+0x9a>
    8022:	2a73      	cmp	r2, #115	; 0x73
    8024:	d100      	bne.n	8028 <_printf_i+0x54>
    8026:	e088      	b.n	813a <_printf_i+0x166>
    8028:	d808      	bhi.n	803c <_printf_i+0x68>
    802a:	2a6f      	cmp	r2, #111	; 0x6f
    802c:	d029      	beq.n	8082 <_printf_i+0xae>
    802e:	2a70      	cmp	r2, #112	; 0x70
    8030:	d1e7      	bne.n	8002 <_printf_i+0x2e>
    8032:	2220      	movs	r2, #32
    8034:	6809      	ldr	r1, [r1, #0]
    8036:	430a      	orrs	r2, r1
    8038:	6022      	str	r2, [r4, #0]
    803a:	e003      	b.n	8044 <_printf_i+0x70>
    803c:	2a75      	cmp	r2, #117	; 0x75
    803e:	d020      	beq.n	8082 <_printf_i+0xae>
    8040:	2a78      	cmp	r2, #120	; 0x78
    8042:	d1de      	bne.n	8002 <_printf_i+0x2e>
    8044:	0022      	movs	r2, r4
    8046:	2178      	movs	r1, #120	; 0x78
    8048:	3245      	adds	r2, #69	; 0x45
    804a:	7011      	strb	r1, [r2, #0]
    804c:	4a6c      	ldr	r2, [pc, #432]	; (8200 <_printf_i+0x22c>)
    804e:	e030      	b.n	80b2 <_printf_i+0xde>
    8050:	000e      	movs	r6, r1
    8052:	681a      	ldr	r2, [r3, #0]
    8054:	3642      	adds	r6, #66	; 0x42
    8056:	1d11      	adds	r1, r2, #4
    8058:	6019      	str	r1, [r3, #0]
    805a:	6813      	ldr	r3, [r2, #0]
    805c:	7033      	strb	r3, [r6, #0]
    805e:	2301      	movs	r3, #1
    8060:	e079      	b.n	8156 <_printf_i+0x182>
    8062:	0649      	lsls	r1, r1, #25
    8064:	d5d9      	bpl.n	801a <_printf_i+0x46>
    8066:	1d11      	adds	r1, r2, #4
    8068:	6019      	str	r1, [r3, #0]
    806a:	2300      	movs	r3, #0
    806c:	5ed5      	ldrsh	r5, [r2, r3]
    806e:	2d00      	cmp	r5, #0
    8070:	da03      	bge.n	807a <_printf_i+0xa6>
    8072:	232d      	movs	r3, #45	; 0x2d
    8074:	9a04      	ldr	r2, [sp, #16]
    8076:	426d      	negs	r5, r5
    8078:	7013      	strb	r3, [r2, #0]
    807a:	4b62      	ldr	r3, [pc, #392]	; (8204 <_printf_i+0x230>)
    807c:	270a      	movs	r7, #10
    807e:	9303      	str	r3, [sp, #12]
    8080:	e02f      	b.n	80e2 <_printf_i+0x10e>
    8082:	6820      	ldr	r0, [r4, #0]
    8084:	6819      	ldr	r1, [r3, #0]
    8086:	0605      	lsls	r5, r0, #24
    8088:	d503      	bpl.n	8092 <_printf_i+0xbe>
    808a:	1d08      	adds	r0, r1, #4
    808c:	6018      	str	r0, [r3, #0]
    808e:	680d      	ldr	r5, [r1, #0]
    8090:	e005      	b.n	809e <_printf_i+0xca>
    8092:	0640      	lsls	r0, r0, #25
    8094:	d5f9      	bpl.n	808a <_printf_i+0xb6>
    8096:	680d      	ldr	r5, [r1, #0]
    8098:	1d08      	adds	r0, r1, #4
    809a:	6018      	str	r0, [r3, #0]
    809c:	b2ad      	uxth	r5, r5
    809e:	4b59      	ldr	r3, [pc, #356]	; (8204 <_printf_i+0x230>)
    80a0:	2708      	movs	r7, #8
    80a2:	9303      	str	r3, [sp, #12]
    80a4:	2a6f      	cmp	r2, #111	; 0x6f
    80a6:	d018      	beq.n	80da <_printf_i+0x106>
    80a8:	270a      	movs	r7, #10
    80aa:	e016      	b.n	80da <_printf_i+0x106>
    80ac:	3145      	adds	r1, #69	; 0x45
    80ae:	700a      	strb	r2, [r1, #0]
    80b0:	4a54      	ldr	r2, [pc, #336]	; (8204 <_printf_i+0x230>)
    80b2:	9203      	str	r2, [sp, #12]
    80b4:	681a      	ldr	r2, [r3, #0]
    80b6:	6821      	ldr	r1, [r4, #0]
    80b8:	1d10      	adds	r0, r2, #4
    80ba:	6018      	str	r0, [r3, #0]
    80bc:	6815      	ldr	r5, [r2, #0]
    80be:	0608      	lsls	r0, r1, #24
    80c0:	d522      	bpl.n	8108 <_printf_i+0x134>
    80c2:	07cb      	lsls	r3, r1, #31
    80c4:	d502      	bpl.n	80cc <_printf_i+0xf8>
    80c6:	2320      	movs	r3, #32
    80c8:	4319      	orrs	r1, r3
    80ca:	6021      	str	r1, [r4, #0]
    80cc:	2710      	movs	r7, #16
    80ce:	2d00      	cmp	r5, #0
    80d0:	d103      	bne.n	80da <_printf_i+0x106>
    80d2:	2320      	movs	r3, #32
    80d4:	6822      	ldr	r2, [r4, #0]
    80d6:	439a      	bics	r2, r3
    80d8:	6022      	str	r2, [r4, #0]
    80da:	0023      	movs	r3, r4
    80dc:	2200      	movs	r2, #0
    80de:	3343      	adds	r3, #67	; 0x43
    80e0:	701a      	strb	r2, [r3, #0]
    80e2:	6863      	ldr	r3, [r4, #4]
    80e4:	60a3      	str	r3, [r4, #8]
    80e6:	2b00      	cmp	r3, #0
    80e8:	db5c      	blt.n	81a4 <_printf_i+0x1d0>
    80ea:	2204      	movs	r2, #4
    80ec:	6821      	ldr	r1, [r4, #0]
    80ee:	4391      	bics	r1, r2
    80f0:	6021      	str	r1, [r4, #0]
    80f2:	2d00      	cmp	r5, #0
    80f4:	d158      	bne.n	81a8 <_printf_i+0x1d4>
    80f6:	9e04      	ldr	r6, [sp, #16]
    80f8:	2b00      	cmp	r3, #0
    80fa:	d064      	beq.n	81c6 <_printf_i+0x1f2>
    80fc:	0026      	movs	r6, r4
    80fe:	9b03      	ldr	r3, [sp, #12]
    8100:	3642      	adds	r6, #66	; 0x42
    8102:	781b      	ldrb	r3, [r3, #0]
    8104:	7033      	strb	r3, [r6, #0]
    8106:	e05e      	b.n	81c6 <_printf_i+0x1f2>
    8108:	0648      	lsls	r0, r1, #25
    810a:	d5da      	bpl.n	80c2 <_printf_i+0xee>
    810c:	b2ad      	uxth	r5, r5
    810e:	e7d8      	b.n	80c2 <_printf_i+0xee>
    8110:	6809      	ldr	r1, [r1, #0]
    8112:	681a      	ldr	r2, [r3, #0]
    8114:	0608      	lsls	r0, r1, #24
    8116:	d505      	bpl.n	8124 <_printf_i+0x150>
    8118:	1d11      	adds	r1, r2, #4
    811a:	6019      	str	r1, [r3, #0]
    811c:	6813      	ldr	r3, [r2, #0]
    811e:	6962      	ldr	r2, [r4, #20]
    8120:	601a      	str	r2, [r3, #0]
    8122:	e006      	b.n	8132 <_printf_i+0x15e>
    8124:	0649      	lsls	r1, r1, #25
    8126:	d5f7      	bpl.n	8118 <_printf_i+0x144>
    8128:	1d11      	adds	r1, r2, #4
    812a:	6019      	str	r1, [r3, #0]
    812c:	6813      	ldr	r3, [r2, #0]
    812e:	8aa2      	ldrh	r2, [r4, #20]
    8130:	801a      	strh	r2, [r3, #0]
    8132:	2300      	movs	r3, #0
    8134:	9e04      	ldr	r6, [sp, #16]
    8136:	6123      	str	r3, [r4, #16]
    8138:	e054      	b.n	81e4 <_printf_i+0x210>
    813a:	681a      	ldr	r2, [r3, #0]
    813c:	1d11      	adds	r1, r2, #4
    813e:	6019      	str	r1, [r3, #0]
    8140:	6816      	ldr	r6, [r2, #0]
    8142:	2100      	movs	r1, #0
    8144:	6862      	ldr	r2, [r4, #4]
    8146:	0030      	movs	r0, r6
    8148:	f000 f908 	bl	835c <memchr>
    814c:	2800      	cmp	r0, #0
    814e:	d001      	beq.n	8154 <_printf_i+0x180>
    8150:	1b80      	subs	r0, r0, r6
    8152:	6060      	str	r0, [r4, #4]
    8154:	6863      	ldr	r3, [r4, #4]
    8156:	6123      	str	r3, [r4, #16]
    8158:	2300      	movs	r3, #0
    815a:	9a04      	ldr	r2, [sp, #16]
    815c:	7013      	strb	r3, [r2, #0]
    815e:	e041      	b.n	81e4 <_printf_i+0x210>
    8160:	6923      	ldr	r3, [r4, #16]
    8162:	0032      	movs	r2, r6
    8164:	9906      	ldr	r1, [sp, #24]
    8166:	9805      	ldr	r0, [sp, #20]
    8168:	9d07      	ldr	r5, [sp, #28]
    816a:	47a8      	blx	r5
    816c:	1c43      	adds	r3, r0, #1
    816e:	d043      	beq.n	81f8 <_printf_i+0x224>
    8170:	6823      	ldr	r3, [r4, #0]
    8172:	2500      	movs	r5, #0
    8174:	079b      	lsls	r3, r3, #30
    8176:	d40f      	bmi.n	8198 <_printf_i+0x1c4>
    8178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    817a:	68e0      	ldr	r0, [r4, #12]
    817c:	4298      	cmp	r0, r3
    817e:	da3d      	bge.n	81fc <_printf_i+0x228>
    8180:	0018      	movs	r0, r3
    8182:	e03b      	b.n	81fc <_printf_i+0x228>
    8184:	0022      	movs	r2, r4
    8186:	2301      	movs	r3, #1
    8188:	3219      	adds	r2, #25
    818a:	9906      	ldr	r1, [sp, #24]
    818c:	9805      	ldr	r0, [sp, #20]
    818e:	9e07      	ldr	r6, [sp, #28]
    8190:	47b0      	blx	r6
    8192:	1c43      	adds	r3, r0, #1
    8194:	d030      	beq.n	81f8 <_printf_i+0x224>
    8196:	3501      	adds	r5, #1
    8198:	68e3      	ldr	r3, [r4, #12]
    819a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    819c:	1a9b      	subs	r3, r3, r2
    819e:	429d      	cmp	r5, r3
    81a0:	dbf0      	blt.n	8184 <_printf_i+0x1b0>
    81a2:	e7e9      	b.n	8178 <_printf_i+0x1a4>
    81a4:	2d00      	cmp	r5, #0
    81a6:	d0a9      	beq.n	80fc <_printf_i+0x128>
    81a8:	9e04      	ldr	r6, [sp, #16]
    81aa:	0028      	movs	r0, r5
    81ac:	0039      	movs	r1, r7
    81ae:	f7ff f89f 	bl	72f0 <__aeabi_uidivmod>
    81b2:	9b03      	ldr	r3, [sp, #12]
    81b4:	3e01      	subs	r6, #1
    81b6:	5c5b      	ldrb	r3, [r3, r1]
    81b8:	0028      	movs	r0, r5
    81ba:	7033      	strb	r3, [r6, #0]
    81bc:	0039      	movs	r1, r7
    81be:	f7ff f811 	bl	71e4 <__udivsi3>
    81c2:	1e05      	subs	r5, r0, #0
    81c4:	d1f1      	bne.n	81aa <_printf_i+0x1d6>
    81c6:	2f08      	cmp	r7, #8
    81c8:	d109      	bne.n	81de <_printf_i+0x20a>
    81ca:	6823      	ldr	r3, [r4, #0]
    81cc:	07db      	lsls	r3, r3, #31
    81ce:	d506      	bpl.n	81de <_printf_i+0x20a>
    81d0:	6863      	ldr	r3, [r4, #4]
    81d2:	6922      	ldr	r2, [r4, #16]
    81d4:	4293      	cmp	r3, r2
    81d6:	dc02      	bgt.n	81de <_printf_i+0x20a>
    81d8:	2330      	movs	r3, #48	; 0x30
    81da:	3e01      	subs	r6, #1
    81dc:	7033      	strb	r3, [r6, #0]
    81de:	9b04      	ldr	r3, [sp, #16]
    81e0:	1b9b      	subs	r3, r3, r6
    81e2:	6123      	str	r3, [r4, #16]
    81e4:	9b07      	ldr	r3, [sp, #28]
    81e6:	aa09      	add	r2, sp, #36	; 0x24
    81e8:	9300      	str	r3, [sp, #0]
    81ea:	0021      	movs	r1, r4
    81ec:	9b06      	ldr	r3, [sp, #24]
    81ee:	9805      	ldr	r0, [sp, #20]
    81f0:	f7ff fe82 	bl	7ef8 <_printf_common>
    81f4:	1c43      	adds	r3, r0, #1
    81f6:	d1b3      	bne.n	8160 <_printf_i+0x18c>
    81f8:	2001      	movs	r0, #1
    81fa:	4240      	negs	r0, r0
    81fc:	b00b      	add	sp, #44	; 0x2c
    81fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8200:	0000854a 	.word	0x0000854a
    8204:	00008539 	.word	0x00008539

00008208 <_sbrk_r>:
    8208:	2300      	movs	r3, #0
    820a:	b570      	push	{r4, r5, r6, lr}
    820c:	4c06      	ldr	r4, [pc, #24]	; (8228 <_sbrk_r+0x20>)
    820e:	0005      	movs	r5, r0
    8210:	0008      	movs	r0, r1
    8212:	6023      	str	r3, [r4, #0]
    8214:	f7f9 fe84 	bl	1f20 <_sbrk>
    8218:	1c43      	adds	r3, r0, #1
    821a:	d103      	bne.n	8224 <_sbrk_r+0x1c>
    821c:	6823      	ldr	r3, [r4, #0]
    821e:	2b00      	cmp	r3, #0
    8220:	d000      	beq.n	8224 <_sbrk_r+0x1c>
    8222:	602b      	str	r3, [r5, #0]
    8224:	bd70      	pop	{r4, r5, r6, pc}
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	200013f4 	.word	0x200013f4

0000822c <__sread>:
    822c:	b570      	push	{r4, r5, r6, lr}
    822e:	000c      	movs	r4, r1
    8230:	250e      	movs	r5, #14
    8232:	5f49      	ldrsh	r1, [r1, r5]
    8234:	f000 f8d8 	bl	83e8 <_read_r>
    8238:	2800      	cmp	r0, #0
    823a:	db03      	blt.n	8244 <__sread+0x18>
    823c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    823e:	181b      	adds	r3, r3, r0
    8240:	6563      	str	r3, [r4, #84]	; 0x54
    8242:	bd70      	pop	{r4, r5, r6, pc}
    8244:	89a3      	ldrh	r3, [r4, #12]
    8246:	4a02      	ldr	r2, [pc, #8]	; (8250 <__sread+0x24>)
    8248:	4013      	ands	r3, r2
    824a:	81a3      	strh	r3, [r4, #12]
    824c:	e7f9      	b.n	8242 <__sread+0x16>
    824e:	46c0      	nop			; (mov r8, r8)
    8250:	ffffefff 	.word	0xffffefff

00008254 <__swrite>:
    8254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8256:	001f      	movs	r7, r3
    8258:	898b      	ldrh	r3, [r1, #12]
    825a:	0005      	movs	r5, r0
    825c:	000c      	movs	r4, r1
    825e:	0016      	movs	r6, r2
    8260:	05db      	lsls	r3, r3, #23
    8262:	d505      	bpl.n	8270 <__swrite+0x1c>
    8264:	230e      	movs	r3, #14
    8266:	5ec9      	ldrsh	r1, [r1, r3]
    8268:	2200      	movs	r2, #0
    826a:	2302      	movs	r3, #2
    826c:	f000 f862 	bl	8334 <_lseek_r>
    8270:	89a3      	ldrh	r3, [r4, #12]
    8272:	4a05      	ldr	r2, [pc, #20]	; (8288 <__swrite+0x34>)
    8274:	0028      	movs	r0, r5
    8276:	4013      	ands	r3, r2
    8278:	81a3      	strh	r3, [r4, #12]
    827a:	0032      	movs	r2, r6
    827c:	230e      	movs	r3, #14
    827e:	5ee1      	ldrsh	r1, [r4, r3]
    8280:	003b      	movs	r3, r7
    8282:	f000 f81f 	bl	82c4 <_write_r>
    8286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8288:	ffffefff 	.word	0xffffefff

0000828c <__sseek>:
    828c:	b570      	push	{r4, r5, r6, lr}
    828e:	000c      	movs	r4, r1
    8290:	250e      	movs	r5, #14
    8292:	5f49      	ldrsh	r1, [r1, r5]
    8294:	f000 f84e 	bl	8334 <_lseek_r>
    8298:	89a3      	ldrh	r3, [r4, #12]
    829a:	1c42      	adds	r2, r0, #1
    829c:	d103      	bne.n	82a6 <__sseek+0x1a>
    829e:	4a05      	ldr	r2, [pc, #20]	; (82b4 <__sseek+0x28>)
    82a0:	4013      	ands	r3, r2
    82a2:	81a3      	strh	r3, [r4, #12]
    82a4:	bd70      	pop	{r4, r5, r6, pc}
    82a6:	2280      	movs	r2, #128	; 0x80
    82a8:	0152      	lsls	r2, r2, #5
    82aa:	4313      	orrs	r3, r2
    82ac:	81a3      	strh	r3, [r4, #12]
    82ae:	6560      	str	r0, [r4, #84]	; 0x54
    82b0:	e7f8      	b.n	82a4 <__sseek+0x18>
    82b2:	46c0      	nop			; (mov r8, r8)
    82b4:	ffffefff 	.word	0xffffefff

000082b8 <__sclose>:
    82b8:	b510      	push	{r4, lr}
    82ba:	230e      	movs	r3, #14
    82bc:	5ec9      	ldrsh	r1, [r1, r3]
    82be:	f000 f815 	bl	82ec <_close_r>
    82c2:	bd10      	pop	{r4, pc}

000082c4 <_write_r>:
    82c4:	b570      	push	{r4, r5, r6, lr}
    82c6:	0005      	movs	r5, r0
    82c8:	0008      	movs	r0, r1
    82ca:	0011      	movs	r1, r2
    82cc:	2200      	movs	r2, #0
    82ce:	4c06      	ldr	r4, [pc, #24]	; (82e8 <_write_r+0x24>)
    82d0:	6022      	str	r2, [r4, #0]
    82d2:	001a      	movs	r2, r3
    82d4:	f7f9 fdfc 	bl	1ed0 <_write>
    82d8:	1c43      	adds	r3, r0, #1
    82da:	d103      	bne.n	82e4 <_write_r+0x20>
    82dc:	6823      	ldr	r3, [r4, #0]
    82de:	2b00      	cmp	r3, #0
    82e0:	d000      	beq.n	82e4 <_write_r+0x20>
    82e2:	602b      	str	r3, [r5, #0]
    82e4:	bd70      	pop	{r4, r5, r6, pc}
    82e6:	46c0      	nop			; (mov r8, r8)
    82e8:	200013f4 	.word	0x200013f4

000082ec <_close_r>:
    82ec:	2300      	movs	r3, #0
    82ee:	b570      	push	{r4, r5, r6, lr}
    82f0:	4c06      	ldr	r4, [pc, #24]	; (830c <_close_r+0x20>)
    82f2:	0005      	movs	r5, r0
    82f4:	0008      	movs	r0, r1
    82f6:	6023      	str	r3, [r4, #0]
    82f8:	f7f9 fe24 	bl	1f44 <_close>
    82fc:	1c43      	adds	r3, r0, #1
    82fe:	d103      	bne.n	8308 <_close_r+0x1c>
    8300:	6823      	ldr	r3, [r4, #0]
    8302:	2b00      	cmp	r3, #0
    8304:	d000      	beq.n	8308 <_close_r+0x1c>
    8306:	602b      	str	r3, [r5, #0]
    8308:	bd70      	pop	{r4, r5, r6, pc}
    830a:	46c0      	nop			; (mov r8, r8)
    830c:	200013f4 	.word	0x200013f4

00008310 <_fstat_r>:
    8310:	2300      	movs	r3, #0
    8312:	b570      	push	{r4, r5, r6, lr}
    8314:	4c06      	ldr	r4, [pc, #24]	; (8330 <_fstat_r+0x20>)
    8316:	0005      	movs	r5, r0
    8318:	0008      	movs	r0, r1
    831a:	0011      	movs	r1, r2
    831c:	6023      	str	r3, [r4, #0]
    831e:	f7f9 fe14 	bl	1f4a <_fstat>
    8322:	1c43      	adds	r3, r0, #1
    8324:	d103      	bne.n	832e <_fstat_r+0x1e>
    8326:	6823      	ldr	r3, [r4, #0]
    8328:	2b00      	cmp	r3, #0
    832a:	d000      	beq.n	832e <_fstat_r+0x1e>
    832c:	602b      	str	r3, [r5, #0]
    832e:	bd70      	pop	{r4, r5, r6, pc}
    8330:	200013f4 	.word	0x200013f4

00008334 <_lseek_r>:
    8334:	b570      	push	{r4, r5, r6, lr}
    8336:	0005      	movs	r5, r0
    8338:	0008      	movs	r0, r1
    833a:	0011      	movs	r1, r2
    833c:	2200      	movs	r2, #0
    833e:	4c06      	ldr	r4, [pc, #24]	; (8358 <_lseek_r+0x24>)
    8340:	6022      	str	r2, [r4, #0]
    8342:	001a      	movs	r2, r3
    8344:	f7f9 fe06 	bl	1f54 <_lseek>
    8348:	1c43      	adds	r3, r0, #1
    834a:	d103      	bne.n	8354 <_lseek_r+0x20>
    834c:	6823      	ldr	r3, [r4, #0]
    834e:	2b00      	cmp	r3, #0
    8350:	d000      	beq.n	8354 <_lseek_r+0x20>
    8352:	602b      	str	r3, [r5, #0]
    8354:	bd70      	pop	{r4, r5, r6, pc}
    8356:	46c0      	nop			; (mov r8, r8)
    8358:	200013f4 	.word	0x200013f4

0000835c <memchr>:
    835c:	b2c9      	uxtb	r1, r1
    835e:	1882      	adds	r2, r0, r2
    8360:	4290      	cmp	r0, r2
    8362:	d101      	bne.n	8368 <memchr+0xc>
    8364:	2000      	movs	r0, #0
    8366:	4770      	bx	lr
    8368:	7803      	ldrb	r3, [r0, #0]
    836a:	428b      	cmp	r3, r1
    836c:	d0fb      	beq.n	8366 <memchr+0xa>
    836e:	3001      	adds	r0, #1
    8370:	e7f6      	b.n	8360 <memchr+0x4>

00008372 <memmove>:
    8372:	b510      	push	{r4, lr}
    8374:	4288      	cmp	r0, r1
    8376:	d902      	bls.n	837e <memmove+0xc>
    8378:	188b      	adds	r3, r1, r2
    837a:	4298      	cmp	r0, r3
    837c:	d308      	bcc.n	8390 <memmove+0x1e>
    837e:	2300      	movs	r3, #0
    8380:	429a      	cmp	r2, r3
    8382:	d007      	beq.n	8394 <memmove+0x22>
    8384:	5ccc      	ldrb	r4, [r1, r3]
    8386:	54c4      	strb	r4, [r0, r3]
    8388:	3301      	adds	r3, #1
    838a:	e7f9      	b.n	8380 <memmove+0xe>
    838c:	5c8b      	ldrb	r3, [r1, r2]
    838e:	5483      	strb	r3, [r0, r2]
    8390:	3a01      	subs	r2, #1
    8392:	d2fb      	bcs.n	838c <memmove+0x1a>
    8394:	bd10      	pop	{r4, pc}

00008396 <__malloc_lock>:
    8396:	4770      	bx	lr

00008398 <__malloc_unlock>:
    8398:	4770      	bx	lr

0000839a <_realloc_r>:
    839a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    839c:	0007      	movs	r7, r0
    839e:	000d      	movs	r5, r1
    83a0:	0016      	movs	r6, r2
    83a2:	2900      	cmp	r1, #0
    83a4:	d105      	bne.n	83b2 <_realloc_r+0x18>
    83a6:	0011      	movs	r1, r2
    83a8:	f7ff fbe2 	bl	7b70 <_malloc_r>
    83ac:	0004      	movs	r4, r0
    83ae:	0020      	movs	r0, r4
    83b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83b2:	2a00      	cmp	r2, #0
    83b4:	d103      	bne.n	83be <_realloc_r+0x24>
    83b6:	f7ff fb91 	bl	7adc <_free_r>
    83ba:	0034      	movs	r4, r6
    83bc:	e7f7      	b.n	83ae <_realloc_r+0x14>
    83be:	f000 f827 	bl	8410 <_malloc_usable_size_r>
    83c2:	002c      	movs	r4, r5
    83c4:	4286      	cmp	r6, r0
    83c6:	d9f2      	bls.n	83ae <_realloc_r+0x14>
    83c8:	0031      	movs	r1, r6
    83ca:	0038      	movs	r0, r7
    83cc:	f7ff fbd0 	bl	7b70 <_malloc_r>
    83d0:	1e04      	subs	r4, r0, #0
    83d2:	d0ec      	beq.n	83ae <_realloc_r+0x14>
    83d4:	0029      	movs	r1, r5
    83d6:	0032      	movs	r2, r6
    83d8:	f7ff f8d7 	bl	758a <memcpy>
    83dc:	0029      	movs	r1, r5
    83de:	0038      	movs	r0, r7
    83e0:	f7ff fb7c 	bl	7adc <_free_r>
    83e4:	e7e3      	b.n	83ae <_realloc_r+0x14>
	...

000083e8 <_read_r>:
    83e8:	b570      	push	{r4, r5, r6, lr}
    83ea:	0005      	movs	r5, r0
    83ec:	0008      	movs	r0, r1
    83ee:	0011      	movs	r1, r2
    83f0:	2200      	movs	r2, #0
    83f2:	4c06      	ldr	r4, [pc, #24]	; (840c <_read_r+0x24>)
    83f4:	6022      	str	r2, [r4, #0]
    83f6:	001a      	movs	r2, r3
    83f8:	f7f9 fd48 	bl	1e8c <_read>
    83fc:	1c43      	adds	r3, r0, #1
    83fe:	d103      	bne.n	8408 <_read_r+0x20>
    8400:	6823      	ldr	r3, [r4, #0]
    8402:	2b00      	cmp	r3, #0
    8404:	d000      	beq.n	8408 <_read_r+0x20>
    8406:	602b      	str	r3, [r5, #0]
    8408:	bd70      	pop	{r4, r5, r6, pc}
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	200013f4 	.word	0x200013f4

00008410 <_malloc_usable_size_r>:
    8410:	1f0b      	subs	r3, r1, #4
    8412:	681b      	ldr	r3, [r3, #0]
    8414:	1f18      	subs	r0, r3, #4
    8416:	2b00      	cmp	r3, #0
    8418:	da01      	bge.n	841e <_malloc_usable_size_r+0xe>
    841a:	580b      	ldr	r3, [r1, r0]
    841c:	18c0      	adds	r0, r0, r3
    841e:	4770      	bx	lr
    8420:	42000800 	.word	0x42000800
    8424:	42000c00 	.word	0x42000c00
    8428:	42001000 	.word	0x42001000
    842c:	42001400 	.word	0x42001400
    8430:	42001800 	.word	0x42001800
    8434:	42001c00 	.word	0x42001c00
    8438:	00001272 	.word	0x00001272
    843c:	0000126e 	.word	0x0000126e
    8440:	0000126e 	.word	0x0000126e
    8444:	000012d4 	.word	0x000012d4
    8448:	000012d4 	.word	0x000012d4
    844c:	00001286 	.word	0x00001286
    8450:	00001278 	.word	0x00001278
    8454:	0000128c 	.word	0x0000128c
    8458:	000012c2 	.word	0x000012c2
    845c:	00001458 	.word	0x00001458
    8460:	00001438 	.word	0x00001438
    8464:	00001438 	.word	0x00001438
    8468:	000014c4 	.word	0x000014c4
    846c:	0000144a 	.word	0x0000144a
    8470:	00001466 	.word	0x00001466
    8474:	0000143c 	.word	0x0000143c
    8478:	00001474 	.word	0x00001474
    847c:	000014b4 	.word	0x000014b4
    8480:	42002c00 	.word	0x42002c00
    8484:	42003000 	.word	0x42003000
    8488:	42003400 	.word	0x42003400
    848c:	00002c3c 	.word	0x00002c3c
    8490:	00002d86 	.word	0x00002d86
    8494:	00002c14 	.word	0x00002c14
    8498:	00002d8e 	.word	0x00002d8e
    849c:	00002c1c 	.word	0x00002c1c
    84a0:	00002c24 	.word	0x00002c24
    84a4:	00002c2c 	.word	0x00002c2c
    84a8:	00002c34 	.word	0x00002c34

000084ac <tc_interrupt_vectors.11908>:
    84ac:	00141312 20646e45 69766544 00006563     ....End Device..
    84bc:	2578302d 00583430                       -0x%04X.

000084c4 <_global_impure_ptr>:
    84c4:	2000005c                                \.. 

000084c8 <__sf_fake_stderr>:
	...

000084e8 <__sf_fake_stdin>:
	...

00008508 <__sf_fake_stdout>:
	...
    8528:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8538:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8548:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8558:	00006665                                ef..

0000855c <_init>:
    855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    855e:	46c0      	nop			; (mov r8, r8)
    8560:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8562:	bc08      	pop	{r3}
    8564:	469e      	mov	lr, r3
    8566:	4770      	bx	lr

00008568 <__init_array_start>:
    8568:	000000dd 	.word	0x000000dd

0000856c <_fini>:
    856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    856e:	46c0      	nop			; (mov r8, r8)
    8570:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8572:	bc08      	pop	{r3}
    8574:	469e      	mov	lr, r3
    8576:	4770      	bx	lr

00008578 <__fini_array_start>:
    8578:	000000b5 	.word	0x000000b5
