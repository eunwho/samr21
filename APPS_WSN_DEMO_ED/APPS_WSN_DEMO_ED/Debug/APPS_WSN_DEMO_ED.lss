
APPS_WSN_DEMO_ED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b90  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00008b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000135c  200000c0  00008c50  000200bc  2**3
                  ALLOC
  3 .stack        00002004  2000141c  00009fac  000200bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      000000e5  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00056dcd  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000888f  00000000  00000000  00076f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000fb91  00000000  00000000  0007f825  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c08  00000000  00000000  0008f3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013c8  00000000  00000000  0008ffbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022116  00000000  00000000  00091386  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001d44f  00000000  00000000  000b349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a4fa  00000000  00000000  000d08eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002484  00000000  00000000  0015ade8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20 34 00 20 29 22 00 00 25 22 00 00 25 22 00 00      4. )"..%"..%"..
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	25 22 00 00 00 00 00 00 00 00 00 00 25 22 00 00     %"..........%"..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	25 22 00 00 25 22 00 00 25 22 00 00 25 22 00 00     %"..%"..%"..%"..
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	91 08 00 00 09 07 00 00 25 22 00 00 25 22 00 00     ........%"..%"..
			time.hour = 12;
      5c:	25 22 00 00 25 22 00 00 bd 0c 00 00 cd 0c 00 00     %"..%"..........
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	dd 0c 00 00 ed 0c 00 00 fd 0c 00 00 0d 0d 00 00     ................
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	25 22 00 00 25 22 00 00 25 22 00 00 05 1f 00 00     %"..%"..%"......

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	15 1f 00 00 25 1f 00 00 00 00 00 00 00 00 00 00     ....%...........
		if (time.pm == 1) {
      9c:	25 22 00 00 25 22 00 00 00 00 00 00 25 22 00 00     %"..%"......%"..
	...

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c0 	.word	0x200000c0
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	00008b90 	.word	0x00008b90

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c4 	.word	0x200000c4
     108:	00008b90 	.word	0x00008b90
     10c:	00008b90 	.word	0x00008b90
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001bfd 	.word	0x00001bfd
     140:	000076d9 	.word	0x000076d9
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	200000dc 	.word	0x200000dc
     1b8:	200000e0 	.word	0x200000e0
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	200000dc 	.word	0x200000dc
     1e8:	200000e0 	.word	0x200000e0
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:




void system_board_init(void)
{
     1f0:	b570      	push	{r4, r5, r6, lr}
     1f2:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2301      	movs	r3, #1
     1f8:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     1fa:	2600      	movs	r6, #0
     1fc:	70a6      	strb	r6, [r4, #2]
#ifdef CONF_BOARD_AT86RFX	
//--------------------------------------------------------------------//
	struct port_config pin_conf;
//--------------------------------------------------------------------//
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	2052      	movs	r0, #82	; 0x52
     204:	4d12      	ldr	r5, [pc, #72]	; (250 <system_board_init+0x60>)
     206:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     208:	0021      	movs	r1, r4
     20a:	203e      	movs	r0, #62	; 0x3e
     20c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     20e:	0021      	movs	r1, r4
     210:	203f      	movs	r0, #63	; 0x3f
     212:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	202f      	movs	r0, #47	; 0x2f
     218:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     21a:	0021      	movs	r1, r4
     21c:	2014      	movs	r0, #20
     21e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     220:	2280      	movs	r2, #128	; 0x80
     222:	02d2      	lsls	r2, r2, #11
     224:	4b0b      	ldr	r3, [pc, #44]	; (254 <system_board_init+0x64>)
     226:	619a      	str	r2, [r3, #24]
     228:	4b0b      	ldr	r3, [pc, #44]	; (258 <system_board_init+0x68>)
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	05d2      	lsls	r2, r2, #23
     22e:	619a      	str	r2, [r3, #24]
     230:	2280      	movs	r2, #128	; 0x80
     232:	0612      	lsls	r2, r2, #24
     234:	619a      	str	r2, [r3, #24]
     236:	2280      	movs	r2, #128	; 0x80
     238:	0212      	lsls	r2, r2, #8
     23a:	619a      	str	r2, [r3, #24]
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	0352      	lsls	r2, r2, #13
     240:	4b06      	ldr	r3, [pc, #24]	; (25c <system_board_init+0x6c>)
     242:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     244:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     246:	0021      	movs	r1, r4
     248:	2053      	movs	r0, #83	; 0x53
     24a:	47a8      	blx	r5
//	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
//	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
//	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     24c:	b002      	add	sp, #8
     24e:	bd70      	pop	{r4, r5, r6, pc}
     250:	0000086d 	.word	0x0000086d
     254:	41004500 	.word	0x41004500
     258:	41004480 	.word	0x41004480
     25c:	41004400 	.word	0x41004400

00000260 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     260:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     262:	2200      	movs	r2, #0
     264:	2300      	movs	r3, #0
     266:	7002      	strb	r2, [r0, #0]
//	config->reference                     = ADC_REFERENCE_INT1V;
	config->reference                     = ADC_REFCTRL_REFSEL_INTVCC0;	// by jsk 2019.03.11
     268:	2101      	movs	r1, #1
     26a:	7041      	strb	r1, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     26c:	2100      	movs	r1, #0
     26e:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     270:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     272:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     274:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     276:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     278:	6082      	str	r2, [r0, #8]

	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ; 
     27a:	2406      	movs	r4, #6
     27c:	7304      	strb	r4, [r0, #12]
//	config->positive_input                = ADC_POSITIVE_INPUT_PIN7 ; // by jsk 2019.03.11

	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     27e:	24c0      	movs	r4, #192	; 0xc0
     280:	0164      	lsls	r4, r4, #5
     282:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     284:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     286:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     288:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     28a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     28c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     28e:	242a      	movs	r4, #42	; 0x2a
     290:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     292:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     294:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     296:	3c06      	subs	r4, #6
     298:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     29a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     29c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     29e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     2a0:	232b      	movs	r3, #43	; 0x2b
     2a2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     2a4:	3301      	adds	r3, #1
     2a6:	54c1      	strb	r1, [r0, r3]
//	config->pin_scan.inputs_to_scan       = 2; // by jsk 2019.03.11
}
     2a8:	bd10      	pop	{r4, pc}
	...

000002ac <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ae:	46d6      	mov	lr, sl
     2b0:	464f      	mov	r7, r9
     2b2:	4646      	mov	r6, r8
     2b4:	b5c0      	push	{r6, r7, lr}
     2b6:	b096      	sub	sp, #88	; 0x58
     2b8:	0007      	movs	r7, r0
     2ba:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     2bc:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2be:	4acb      	ldr	r2, [pc, #812]	; (5ec <adc_init+0x340>)
     2c0:	6a10      	ldr	r0, [r2, #32]
     2c2:	2380      	movs	r3, #128	; 0x80
     2c4:	025b      	lsls	r3, r3, #9
     2c6:	4303      	orrs	r3, r0
     2c8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2ca:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     2cc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2ce:	07db      	lsls	r3, r3, #31
     2d0:	d505      	bpl.n	2de <adc_init+0x32>
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}
	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     2d2:	b016      	add	sp, #88	; 0x58
     2d4:	bc1c      	pop	{r2, r3, r4}
     2d6:	4690      	mov	r8, r2
     2d8:	4699      	mov	r9, r3
     2da:	46a2      	mov	sl, r4
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2de:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     2e0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2e2:	079b      	lsls	r3, r3, #30
     2e4:	d4f5      	bmi.n	2d2 <adc_init+0x26>
	module_inst->reference = config->reference;
     2e6:	7873      	ldrb	r3, [r6, #1]
     2e8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     2ea:	2b00      	cmp	r3, #0
     2ec:	d104      	bne.n	2f8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     2ee:	4ac0      	ldr	r2, [pc, #768]	; (5f0 <adc_init+0x344>)
     2f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     2f2:	2104      	movs	r1, #4
     2f4:	430b      	orrs	r3, r1
     2f6:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     2fc:	7833      	ldrb	r3, [r6, #0]
     2fe:	466a      	mov	r2, sp
     300:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     302:	4669      	mov	r1, sp
     304:	201e      	movs	r0, #30
     306:	4bbb      	ldr	r3, [pc, #748]	; (5f4 <adc_init+0x348>)
     308:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     30a:	201e      	movs	r0, #30
     30c:	4bba      	ldr	r3, [pc, #744]	; (5f8 <adc_init+0x34c>)
     30e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     310:	232c      	movs	r3, #44	; 0x2c
     312:	5cf2      	ldrb	r2, [r6, r3]
     314:	2a00      	cmp	r2, #0
     316:	d054      	beq.n	3c2 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     318:	3b01      	subs	r3, #1
     31a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     31c:	7b33      	ldrb	r3, [r6, #12]
     31e:	18eb      	adds	r3, r5, r3
     320:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     322:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     324:	b2c9      	uxtb	r1, r1
     326:	428b      	cmp	r3, r1
     328:	d221      	bcs.n	36e <adc_init+0xc2>
     32a:	1952      	adds	r2, r2, r5
     32c:	b2d3      	uxtb	r3, r2
     32e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     330:	4bb2      	ldr	r3, [pc, #712]	; (5fc <adc_init+0x350>)
     332:	469a      	mov	sl, r3
     334:	e003      	b.n	33e <adc_init+0x92>
			offset++;
     336:	3501      	adds	r5, #1
     338:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     33a:	45a9      	cmp	r9, r5
     33c:	d017      	beq.n	36e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     33e:	240f      	movs	r4, #15
     340:	402c      	ands	r4, r5
     342:	7b33      	ldrb	r3, [r6, #12]
     344:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     346:	2250      	movs	r2, #80	; 0x50
     348:	49ad      	ldr	r1, [pc, #692]	; (600 <adc_init+0x354>)
     34a:	a802      	add	r0, sp, #8
     34c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     34e:	2c13      	cmp	r4, #19
     350:	d8f1      	bhi.n	336 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     352:	00a4      	lsls	r4, r4, #2
     354:	ab02      	add	r3, sp, #8
     356:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     358:	a901      	add	r1, sp, #4
     35a:	2300      	movs	r3, #0
     35c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     35e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     360:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     362:	3301      	adds	r3, #1
     364:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     366:	b2c0      	uxtb	r0, r0
     368:	4ba6      	ldr	r3, [pc, #664]	; (604 <adc_init+0x358>)
     36a:	4798      	blx	r3
     36c:	e7e3      	b.n	336 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     36e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     370:	2250      	movs	r2, #80	; 0x50
     372:	49a3      	ldr	r1, [pc, #652]	; (600 <adc_init+0x354>)
     374:	a802      	add	r0, sp, #8
     376:	4ba1      	ldr	r3, [pc, #644]	; (5fc <adc_init+0x350>)
     378:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     37a:	2c13      	cmp	r4, #19
     37c:	d913      	bls.n	3a6 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     37e:	7d73      	ldrb	r3, [r6, #21]
     380:	009b      	lsls	r3, r3, #2
     382:	b2db      	uxtb	r3, r3
     384:	4642      	mov	r2, r8
     386:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     388:	7db3      	ldrb	r3, [r6, #22]
     38a:	01db      	lsls	r3, r3, #7
     38c:	7872      	ldrb	r2, [r6, #1]
     38e:	4313      	orrs	r3, r2
     390:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     392:	4642      	mov	r2, r8
     394:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     396:	7933      	ldrb	r3, [r6, #4]
     398:	2b34      	cmp	r3, #52	; 0x34
     39a:	d900      	bls.n	39e <adc_init+0xf2>
     39c:	e178      	b.n	690 <adc_init+0x3e4>
     39e:	009b      	lsls	r3, r3, #2
     3a0:	4a99      	ldr	r2, [pc, #612]	; (608 <adc_init+0x35c>)
     3a2:	58d3      	ldr	r3, [r2, r3]
     3a4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3a6:	00a4      	lsls	r4, r4, #2
     3a8:	ab02      	add	r3, sp, #8
     3aa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3ac:	a901      	add	r1, sp, #4
     3ae:	2300      	movs	r3, #0
     3b0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3b2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3b4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3b6:	3301      	adds	r3, #1
     3b8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3ba:	b2c0      	uxtb	r0, r0
     3bc:	4b91      	ldr	r3, [pc, #580]	; (604 <adc_init+0x358>)
     3be:	4798      	blx	r3
     3c0:	e7dd      	b.n	37e <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     3c2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     3c4:	2250      	movs	r2, #80	; 0x50
     3c6:	498e      	ldr	r1, [pc, #568]	; (600 <adc_init+0x354>)
     3c8:	a802      	add	r0, sp, #8
     3ca:	4b8c      	ldr	r3, [pc, #560]	; (5fc <adc_init+0x350>)
     3cc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3ce:	2c13      	cmp	r4, #19
     3d0:	d915      	bls.n	3fe <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     3d2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     3d4:	2250      	movs	r2, #80	; 0x50
     3d6:	498a      	ldr	r1, [pc, #552]	; (600 <adc_init+0x354>)
     3d8:	a802      	add	r0, sp, #8
     3da:	4b88      	ldr	r3, [pc, #544]	; (5fc <adc_init+0x350>)
     3dc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3de:	2c13      	cmp	r4, #19
     3e0:	d8cd      	bhi.n	37e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3e2:	00a4      	lsls	r4, r4, #2
     3e4:	ab02      	add	r3, sp, #8
     3e6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3e8:	a901      	add	r1, sp, #4
     3ea:	2300      	movs	r3, #0
     3ec:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3f2:	3301      	adds	r3, #1
     3f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3f6:	b2c0      	uxtb	r0, r0
     3f8:	4b82      	ldr	r3, [pc, #520]	; (604 <adc_init+0x358>)
     3fa:	4798      	blx	r3
     3fc:	e7bf      	b.n	37e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3fe:	00a4      	lsls	r4, r4, #2
     400:	ab02      	add	r3, sp, #8
     402:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     404:	a901      	add	r1, sp, #4
     406:	2300      	movs	r3, #0
     408:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     40a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     40c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     40e:	3301      	adds	r3, #1
     410:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     412:	b2c0      	uxtb	r0, r0
     414:	4b7b      	ldr	r3, [pc, #492]	; (604 <adc_init+0x358>)
     416:	4798      	blx	r3
     418:	e7db      	b.n	3d2 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     41a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     41c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     41e:	2102      	movs	r1, #2
     420:	e01a      	b.n	458 <adc_init+0x1ac>
		adjres = config->divide_result;
     422:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     424:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     426:	2410      	movs	r4, #16
     428:	e016      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     42a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     42c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     42e:	2101      	movs	r1, #1
     430:	e012      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     432:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     434:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     436:	2100      	movs	r1, #0
     438:	e00e      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     43a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     43c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     43e:	2100      	movs	r1, #0
     440:	e00a      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     442:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     444:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     446:	2100      	movs	r1, #0
     448:	e006      	b.n	458 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     44a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     44c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     44e:	2100      	movs	r1, #0
     450:	e002      	b.n	458 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     452:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     454:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     456:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     458:	0109      	lsls	r1, r1, #4
     45a:	2270      	movs	r2, #112	; 0x70
     45c:	400a      	ands	r2, r1
     45e:	4313      	orrs	r3, r2
     460:	4642      	mov	r2, r8
     462:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     464:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     466:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     468:	2b3f      	cmp	r3, #63	; 0x3f
     46a:	d900      	bls.n	46e <adc_init+0x1c2>
     46c:	e731      	b.n	2d2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     46e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     470:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     472:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     474:	b25b      	sxtb	r3, r3
     476:	2b00      	cmp	r3, #0
     478:	dbfb      	blt.n	472 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     47a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     47c:	8872      	ldrh	r2, [r6, #2]
     47e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     480:	2224      	movs	r2, #36	; 0x24
     482:	5cb2      	ldrb	r2, [r6, r2]
     484:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     486:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     488:	7d32      	ldrb	r2, [r6, #20]
     48a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     48c:	4313      	orrs	r3, r2
     48e:	7cb2      	ldrb	r2, [r6, #18]
     490:	0052      	lsls	r2, r2, #1
     492:	4313      	orrs	r3, r2
     494:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     496:	4642      	mov	r2, r8
     498:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     49a:	7e33      	ldrb	r3, [r6, #24]
     49c:	2b00      	cmp	r3, #0
     49e:	d020      	beq.n	4e2 <adc_init+0x236>
		switch (resolution) {
     4a0:	2c10      	cmp	r4, #16
     4a2:	d100      	bne.n	4a6 <adc_init+0x1fa>
     4a4:	e0d6      	b.n	654 <adc_init+0x3a8>
     4a6:	d800      	bhi.n	4aa <adc_init+0x1fe>
     4a8:	e080      	b.n	5ac <adc_init+0x300>
     4aa:	2c20      	cmp	r4, #32
     4ac:	d100      	bne.n	4b0 <adc_init+0x204>
     4ae:	e0b3      	b.n	618 <adc_init+0x36c>
     4b0:	2c30      	cmp	r4, #48	; 0x30
     4b2:	d116      	bne.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     4b4:	7cf2      	ldrb	r2, [r6, #19]
     4b6:	2a00      	cmp	r2, #0
     4b8:	d00a      	beq.n	4d0 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     4ba:	69f2      	ldr	r2, [r6, #28]
     4bc:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4be:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4c0:	2aff      	cmp	r2, #255	; 0xff
     4c2:	d900      	bls.n	4c6 <adc_init+0x21a>
     4c4:	e705      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     4c6:	6a32      	ldr	r2, [r6, #32]
     4c8:	3280      	adds	r2, #128	; 0x80
     4ca:	2aff      	cmp	r2, #255	; 0xff
     4cc:	d900      	bls.n	4d0 <adc_init+0x224>
     4ce:	e700      	b.n	2d2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4d2:	69f2      	ldr	r2, [r6, #28]
     4d4:	2aff      	cmp	r2, #255	; 0xff
     4d6:	dd00      	ble.n	4da <adc_init+0x22e>
     4d8:	e6fb      	b.n	2d2 <adc_init+0x26>
     4da:	6a32      	ldr	r2, [r6, #32]
     4dc:	2aff      	cmp	r2, #255	; 0xff
     4de:	dd00      	ble.n	4e2 <adc_init+0x236>
     4e0:	e6f7      	b.n	2d2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     4e2:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4e4:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     4e6:	b252      	sxtb	r2, r2
     4e8:	2a00      	cmp	r2, #0
     4ea:	dbfb      	blt.n	4e4 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     4ec:	4642      	mov	r2, r8
     4ee:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     4f0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4f2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4f4:	b25b      	sxtb	r3, r3
     4f6:	2b00      	cmp	r3, #0
     4f8:	dbfb      	blt.n	4f2 <adc_init+0x246>
	adc_module->WINLT.reg =
     4fa:	8bb3      	ldrh	r3, [r6, #28]
     4fc:	4642      	mov	r2, r8
     4fe:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     500:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     502:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     504:	b25b      	sxtb	r3, r3
     506:	2b00      	cmp	r3, #0
     508:	dbfb      	blt.n	502 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     50a:	8c33      	ldrh	r3, [r6, #32]
     50c:	4642      	mov	r2, r8
     50e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     510:	232c      	movs	r3, #44	; 0x2c
     512:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     514:	2b00      	cmp	r3, #0
     516:	d005      	beq.n	524 <adc_init+0x278>
		inputs_to_scan--;
     518:	3b01      	subs	r3, #1
     51a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     51c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     51e:	2b0f      	cmp	r3, #15
     520:	d900      	bls.n	524 <adc_init+0x278>
     522:	e6d6      	b.n	2d2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     524:	222b      	movs	r2, #43	; 0x2b
     526:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     528:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     52a:	290f      	cmp	r1, #15
     52c:	d900      	bls.n	530 <adc_init+0x284>
     52e:	e6d0      	b.n	2d2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     530:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     532:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     534:	b252      	sxtb	r2, r2
     536:	2a00      	cmp	r2, #0
     538:	dbfb      	blt.n	532 <adc_init+0x286>
			config->negative_input |
     53a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     53c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     53e:	4302      	orrs	r2, r0
     540:	68b0      	ldr	r0, [r6, #8]
     542:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     544:	0509      	lsls	r1, r1, #20
			config->negative_input |
     546:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     548:	041b      	lsls	r3, r3, #16
			config->negative_input |
     54a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     54c:	4642      	mov	r2, r8
     54e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     550:	232a      	movs	r3, #42	; 0x2a
     552:	5cf3      	ldrb	r3, [r6, r3]
     554:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     556:	230f      	movs	r3, #15
     558:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     55a:	3315      	adds	r3, #21
     55c:	5cf3      	ldrb	r3, [r6, r3]
     55e:	2b00      	cmp	r3, #0
     560:	d012      	beq.n	588 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     562:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     564:	4a29      	ldr	r2, [pc, #164]	; (60c <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     566:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     568:	4293      	cmp	r3, r2
     56a:	d900      	bls.n	56e <adc_init+0x2c2>
     56c:	e6b1      	b.n	2d2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     56e:	4642      	mov	r2, r8
     570:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     572:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     574:	2380      	movs	r3, #128	; 0x80
     576:	011b      	lsls	r3, r3, #4
     578:	18d3      	adds	r3, r2, r3
     57a:	4924      	ldr	r1, [pc, #144]	; (60c <adc_init+0x360>)
     57c:	b29b      	uxth	r3, r3
     57e:	428b      	cmp	r3, r1
     580:	d900      	bls.n	584 <adc_init+0x2d8>
     582:	e6a6      	b.n	2d2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     584:	4643      	mov	r3, r8
     586:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     588:	4b21      	ldr	r3, [pc, #132]	; (610 <adc_init+0x364>)
     58a:	681b      	ldr	r3, [r3, #0]
     58c:	015b      	lsls	r3, r3, #5
     58e:	22e0      	movs	r2, #224	; 0xe0
     590:	00d2      	lsls	r2, r2, #3
     592:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     594:	4a1f      	ldr	r2, [pc, #124]	; (614 <adc_init+0x368>)
     596:	6851      	ldr	r1, [r2, #4]
     598:	0149      	lsls	r1, r1, #5
     59a:	6812      	ldr	r2, [r2, #0]
     59c:	0ed2      	lsrs	r2, r2, #27
     59e:	430a      	orrs	r2, r1
     5a0:	b2d2      	uxtb	r2, r2
			) |
     5a2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     5a4:	4642      	mov	r2, r8
     5a6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     5a8:	2000      	movs	r0, #0
     5aa:	e692      	b.n	2d2 <adc_init+0x26>
		switch (resolution) {
     5ac:	2c00      	cmp	r4, #0
     5ae:	d198      	bne.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     5b0:	7cf2      	ldrb	r2, [r6, #19]
     5b2:	2a00      	cmp	r2, #0
     5b4:	d00f      	beq.n	5d6 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     5b6:	69f2      	ldr	r2, [r6, #28]
     5b8:	2180      	movs	r1, #128	; 0x80
     5ba:	0109      	lsls	r1, r1, #4
     5bc:	468c      	mov	ip, r1
     5be:	4462      	add	r2, ip
			if (config->differential_mode &&
     5c0:	4912      	ldr	r1, [pc, #72]	; (60c <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     5c2:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5c4:	428a      	cmp	r2, r1
     5c6:	d900      	bls.n	5ca <adc_init+0x31e>
     5c8:	e683      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     5ca:	6a32      	ldr	r2, [r6, #32]
     5cc:	4462      	add	r2, ip
     5ce:	490f      	ldr	r1, [pc, #60]	; (60c <adc_init+0x360>)
     5d0:	428a      	cmp	r2, r1
     5d2:	d900      	bls.n	5d6 <adc_init+0x32a>
     5d4:	e67d      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     5d6:	4a0d      	ldr	r2, [pc, #52]	; (60c <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     5d8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5da:	69f1      	ldr	r1, [r6, #28]
     5dc:	4291      	cmp	r1, r2
     5de:	dd00      	ble.n	5e2 <adc_init+0x336>
     5e0:	e677      	b.n	2d2 <adc_init+0x26>
     5e2:	6a31      	ldr	r1, [r6, #32]
     5e4:	4291      	cmp	r1, r2
     5e6:	dd00      	ble.n	5ea <adc_init+0x33e>
     5e8:	e673      	b.n	2d2 <adc_init+0x26>
     5ea:	e77a      	b.n	4e2 <adc_init+0x236>
     5ec:	40000400 	.word	0x40000400
     5f0:	40000800 	.word	0x40000800
     5f4:	00001d15 	.word	0x00001d15
     5f8:	00001c89 	.word	0x00001c89
     5fc:	00007a7f 	.word	0x00007a7f
     600:	000089e8 	.word	0x000089e8
     604:	00001e0d 	.word	0x00001e0d
     608:	00008914 	.word	0x00008914
     60c:	00000fff 	.word	0x00000fff
     610:	00806024 	.word	0x00806024
     614:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     618:	7cf2      	ldrb	r2, [r6, #19]
     61a:	2a00      	cmp	r2, #0
     61c:	d00f      	beq.n	63e <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     61e:	69f2      	ldr	r2, [r6, #28]
     620:	2180      	movs	r1, #128	; 0x80
     622:	0089      	lsls	r1, r1, #2
     624:	468c      	mov	ip, r1
     626:	4462      	add	r2, ip
			if (config->differential_mode &&
     628:	491a      	ldr	r1, [pc, #104]	; (694 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     62a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     62c:	428a      	cmp	r2, r1
     62e:	d900      	bls.n	632 <adc_init+0x386>
     630:	e64f      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     632:	6a32      	ldr	r2, [r6, #32]
     634:	4462      	add	r2, ip
     636:	4917      	ldr	r1, [pc, #92]	; (694 <adc_init+0x3e8>)
     638:	428a      	cmp	r2, r1
     63a:	d900      	bls.n	63e <adc_init+0x392>
     63c:	e649      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     63e:	4a15      	ldr	r2, [pc, #84]	; (694 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     640:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     642:	69f1      	ldr	r1, [r6, #28]
     644:	4291      	cmp	r1, r2
     646:	dd00      	ble.n	64a <adc_init+0x39e>
     648:	e643      	b.n	2d2 <adc_init+0x26>
     64a:	6a31      	ldr	r1, [r6, #32]
     64c:	4291      	cmp	r1, r2
     64e:	dd00      	ble.n	652 <adc_init+0x3a6>
     650:	e63f      	b.n	2d2 <adc_init+0x26>
     652:	e746      	b.n	4e2 <adc_init+0x236>
			if (config->differential_mode &&
     654:	7cf2      	ldrb	r2, [r6, #19]
     656:	2a00      	cmp	r2, #0
     658:	d00f      	beq.n	67a <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     65a:	69f2      	ldr	r2, [r6, #28]
     65c:	2180      	movs	r1, #128	; 0x80
     65e:	0209      	lsls	r1, r1, #8
     660:	468c      	mov	ip, r1
     662:	4462      	add	r2, ip
			if (config->differential_mode &&
     664:	490c      	ldr	r1, [pc, #48]	; (698 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     666:	2017      	movs	r0, #23
			if (config->differential_mode &&
     668:	428a      	cmp	r2, r1
     66a:	d900      	bls.n	66e <adc_init+0x3c2>
     66c:	e631      	b.n	2d2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     66e:	6a32      	ldr	r2, [r6, #32]
     670:	4462      	add	r2, ip
     672:	4909      	ldr	r1, [pc, #36]	; (698 <adc_init+0x3ec>)
     674:	428a      	cmp	r2, r1
     676:	d900      	bls.n	67a <adc_init+0x3ce>
     678:	e62b      	b.n	2d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     67a:	4a07      	ldr	r2, [pc, #28]	; (698 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     67e:	69f1      	ldr	r1, [r6, #28]
     680:	4291      	cmp	r1, r2
     682:	dd00      	ble.n	686 <adc_init+0x3da>
     684:	e625      	b.n	2d2 <adc_init+0x26>
     686:	6a31      	ldr	r1, [r6, #32]
     688:	4291      	cmp	r1, r2
     68a:	dd00      	ble.n	68e <adc_init+0x3e2>
     68c:	e621      	b.n	2d2 <adc_init+0x26>
     68e:	e728      	b.n	4e2 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e61e      	b.n	2d2 <adc_init+0x26>
     694:	000003ff 	.word	0x000003ff
     698:	0000ffff 	.word	0x0000ffff

0000069c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     69c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     69e:	2a00      	cmp	r2, #0
     6a0:	d001      	beq.n	6a6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6a2:	0018      	movs	r0, r3
     6a4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     6a6:	008b      	lsls	r3, r1, #2
     6a8:	4a06      	ldr	r2, [pc, #24]	; (6c4 <extint_register_callback+0x28>)
     6aa:	589b      	ldr	r3, [r3, r2]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d003      	beq.n	6b8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     6b0:	4283      	cmp	r3, r0
     6b2:	d005      	beq.n	6c0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     6b4:	231d      	movs	r3, #29
     6b6:	e7f4      	b.n	6a2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     6b8:	0089      	lsls	r1, r1, #2
     6ba:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     6bc:	2300      	movs	r3, #0
     6be:	e7f0      	b.n	6a2 <extint_register_callback+0x6>
		return STATUS_OK;
     6c0:	2300      	movs	r3, #0
     6c2:	e7ee      	b.n	6a2 <extint_register_callback+0x6>
     6c4:	20000398 	.word	0x20000398

000006c8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6c8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     6ca:	2900      	cmp	r1, #0
     6cc:	d001      	beq.n	6d2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     6ce:	0018      	movs	r0, r3
     6d0:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     6d2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     6d4:	281f      	cmp	r0, #31
     6d6:	d800      	bhi.n	6da <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     6d8:	4a02      	ldr	r2, [pc, #8]	; (6e4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     6da:	2301      	movs	r3, #1
     6dc:	4083      	lsls	r3, r0
     6de:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     6e0:	2300      	movs	r3, #0
     6e2:	e7f4      	b.n	6ce <extint_chan_enable_callback+0x6>
     6e4:	40001800 	.word	0x40001800

000006e8 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6e8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     6ea:	2900      	cmp	r1, #0
     6ec:	d001      	beq.n	6f2 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     6ee:	0018      	movs	r0, r3
     6f0:	4770      	bx	lr
		return NULL;
     6f2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     6f4:	281f      	cmp	r0, #31
     6f6:	d800      	bhi.n	6fa <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     6f8:	4a02      	ldr	r2, [pc, #8]	; (704 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     6fa:	2301      	movs	r3, #1
     6fc:	4083      	lsls	r3, r0
     6fe:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     700:	2300      	movs	r3, #0
     702:	e7f4      	b.n	6ee <extint_chan_disable_callback+0x6>
     704:	40001800 	.word	0x40001800

00000708 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     708:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     70a:	2200      	movs	r2, #0
     70c:	4b10      	ldr	r3, [pc, #64]	; (750 <EIC_Handler+0x48>)
     70e:	701a      	strb	r2, [r3, #0]
     710:	2300      	movs	r3, #0
     712:	4910      	ldr	r1, [pc, #64]	; (754 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     714:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     716:	4e10      	ldr	r6, [pc, #64]	; (758 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     718:	4c0d      	ldr	r4, [pc, #52]	; (750 <EIC_Handler+0x48>)
     71a:	e00a      	b.n	732 <EIC_Handler+0x2a>
		return eics[eic_index];
     71c:	490d      	ldr	r1, [pc, #52]	; (754 <EIC_Handler+0x4c>)
     71e:	e008      	b.n	732 <EIC_Handler+0x2a>
     720:	7823      	ldrb	r3, [r4, #0]
     722:	3301      	adds	r3, #1
     724:	b2db      	uxtb	r3, r3
     726:	7023      	strb	r3, [r4, #0]
     728:	2b0f      	cmp	r3, #15
     72a:	d810      	bhi.n	74e <EIC_Handler+0x46>
		return NULL;
     72c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     72e:	2b1f      	cmp	r3, #31
     730:	d9f4      	bls.n	71c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     732:	0028      	movs	r0, r5
     734:	4018      	ands	r0, r3
     736:	2201      	movs	r2, #1
     738:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     73a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     73c:	4210      	tst	r0, r2
     73e:	d0ef      	beq.n	720 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     740:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     742:	009b      	lsls	r3, r3, #2
     744:	599b      	ldr	r3, [r3, r6]
     746:	2b00      	cmp	r3, #0
     748:	d0ea      	beq.n	720 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     74a:	4798      	blx	r3
     74c:	e7e8      	b.n	720 <EIC_Handler+0x18>
			}
		}
	}
}
     74e:	bd70      	pop	{r4, r5, r6, pc}
     750:	20000394 	.word	0x20000394
     754:	40001800 	.word	0x40001800
     758:	20000398 	.word	0x20000398

0000075c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     75c:	4a04      	ldr	r2, [pc, #16]	; (770 <_extint_enable+0x14>)
     75e:	7813      	ldrb	r3, [r2, #0]
     760:	2102      	movs	r1, #2
     762:	430b      	orrs	r3, r1
     764:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     766:	7853      	ldrb	r3, [r2, #1]
     768:	b25b      	sxtb	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	dbfb      	blt.n	766 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     76e:	4770      	bx	lr
     770:	40001800 	.word	0x40001800

00000774 <_system_extint_init>:
{
     774:	b500      	push	{lr}
     776:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     778:	4a12      	ldr	r2, [pc, #72]	; (7c4 <_system_extint_init+0x50>)
     77a:	6993      	ldr	r3, [r2, #24]
     77c:	2140      	movs	r1, #64	; 0x40
     77e:	430b      	orrs	r3, r1
     780:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     782:	a901      	add	r1, sp, #4
     784:	2300      	movs	r3, #0
     786:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     788:	2005      	movs	r0, #5
     78a:	4b0f      	ldr	r3, [pc, #60]	; (7c8 <_system_extint_init+0x54>)
     78c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     78e:	2005      	movs	r0, #5
     790:	4b0e      	ldr	r3, [pc, #56]	; (7cc <_system_extint_init+0x58>)
     792:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     794:	4a0e      	ldr	r2, [pc, #56]	; (7d0 <_system_extint_init+0x5c>)
     796:	7813      	ldrb	r3, [r2, #0]
     798:	2101      	movs	r1, #1
     79a:	430b      	orrs	r3, r1
     79c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     79e:	7853      	ldrb	r3, [r2, #1]
     7a0:	b25b      	sxtb	r3, r3
     7a2:	2b00      	cmp	r3, #0
     7a4:	dbfb      	blt.n	79e <_system_extint_init+0x2a>
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <_system_extint_init+0x60>)
     7a8:	0019      	movs	r1, r3
     7aa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     7ac:	2200      	movs	r2, #0
     7ae:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     7b0:	4299      	cmp	r1, r3
     7b2:	d1fc      	bne.n	7ae <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7b4:	2210      	movs	r2, #16
     7b6:	4b08      	ldr	r3, [pc, #32]	; (7d8 <_system_extint_init+0x64>)
     7b8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     7ba:	4b08      	ldr	r3, [pc, #32]	; (7dc <_system_extint_init+0x68>)
     7bc:	4798      	blx	r3
}
     7be:	b003      	add	sp, #12
     7c0:	bd00      	pop	{pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	40000400 	.word	0x40000400
     7c8:	00001d15 	.word	0x00001d15
     7cc:	00001c89 	.word	0x00001c89
     7d0:	40001800 	.word	0x40001800
     7d4:	20000398 	.word	0x20000398
     7d8:	e000e100 	.word	0xe000e100
     7dc:	0000075d 	.word	0x0000075d

000007e0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     7e0:	2300      	movs	r3, #0
     7e2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     7e4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     7e6:	2201      	movs	r2, #1
     7e8:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     7ea:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     7ec:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     7ee:	3302      	adds	r3, #2
     7f0:	72c3      	strb	r3, [r0, #11]
}
     7f2:	4770      	bx	lr

000007f4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f6:	b083      	sub	sp, #12
     7f8:	0005      	movs	r5, r0
     7fa:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7fc:	a901      	add	r1, sp, #4
     7fe:	2300      	movs	r3, #0
     800:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     802:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     804:	7923      	ldrb	r3, [r4, #4]
     806:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     808:	7a23      	ldrb	r3, [r4, #8]
     80a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     80c:	7820      	ldrb	r0, [r4, #0]
     80e:	4b15      	ldr	r3, [pc, #84]	; (864 <extint_chan_set_config+0x70>)
     810:	4798      	blx	r3
		return NULL;
     812:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     814:	2d1f      	cmp	r5, #31
     816:	d800      	bhi.n	81a <extint_chan_set_config+0x26>
		return eics[eic_index];
     818:	4813      	ldr	r0, [pc, #76]	; (868 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     81a:	2207      	movs	r2, #7
     81c:	402a      	ands	r2, r5
     81e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     820:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     822:	7aa3      	ldrb	r3, [r4, #10]
     824:	2b00      	cmp	r3, #0
     826:	d001      	beq.n	82c <extint_chan_set_config+0x38>
     828:	2308      	movs	r3, #8
     82a:	431f      	orrs	r7, r3
     82c:	08eb      	lsrs	r3, r5, #3
     82e:	009b      	lsls	r3, r3, #2
     830:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     832:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     834:	260f      	movs	r6, #15
     836:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     838:	43b1      	bics	r1, r6
			(new_config << config_pos);
     83a:	4097      	lsls	r7, r2
     83c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     83e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     840:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     842:	7a63      	ldrb	r3, [r4, #9]
     844:	2b00      	cmp	r3, #0
     846:	d106      	bne.n	856 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     848:	6943      	ldr	r3, [r0, #20]
     84a:	2201      	movs	r2, #1
     84c:	40aa      	lsls	r2, r5
     84e:	4393      	bics	r3, r2
     850:	6143      	str	r3, [r0, #20]
	}
}
     852:	b003      	add	sp, #12
     854:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     856:	6942      	ldr	r2, [r0, #20]
     858:	2301      	movs	r3, #1
     85a:	40ab      	lsls	r3, r5
     85c:	4313      	orrs	r3, r2
     85e:	6143      	str	r3, [r0, #20]
     860:	e7f7      	b.n	852 <extint_chan_set_config+0x5e>
     862:	46c0      	nop			; (mov r8, r8)
     864:	00001e0d 	.word	0x00001e0d
     868:	40001800 	.word	0x40001800

0000086c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     86c:	b500      	push	{lr}
     86e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     870:	ab01      	add	r3, sp, #4
     872:	2280      	movs	r2, #128	; 0x80
     874:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     876:	780a      	ldrb	r2, [r1, #0]
     878:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     87a:	784a      	ldrb	r2, [r1, #1]
     87c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     87e:	788a      	ldrb	r2, [r1, #2]
     880:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     882:	0019      	movs	r1, r3
     884:	4b01      	ldr	r3, [pc, #4]	; (88c <port_pin_set_config+0x20>)
     886:	4798      	blx	r3
}
     888:	b003      	add	sp, #12
     88a:	bd00      	pop	{pc}
     88c:	00001e0d 	.word	0x00001e0d

00000890 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     890:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     892:	4b0f      	ldr	r3, [pc, #60]	; (8d0 <RTC_Handler+0x40>)
     894:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     896:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     898:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
     89a:	8a13      	ldrh	r3, [r2, #16]
     89c:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     89e:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     8a0:	79e3      	ldrb	r3, [r4, #7]
     8a2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     8a4:	b258      	sxtb	r0, r3
     8a6:	2800      	cmp	r0, #0
     8a8:	db06      	blt.n	8b8 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     8aa:	07db      	lsls	r3, r3, #31
     8ac:	d503      	bpl.n	8b6 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     8ae:	07cb      	lsls	r3, r1, #31
     8b0:	d40a      	bmi.n	8c8 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     8b2:	2301      	movs	r3, #1
     8b4:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     8b6:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     8b8:	078b      	lsls	r3, r1, #30
     8ba:	d402      	bmi.n	8c2 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     8bc:	2380      	movs	r3, #128	; 0x80
     8be:	7223      	strb	r3, [r4, #8]
     8c0:	e7f9      	b.n	8b6 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     8c2:	68d3      	ldr	r3, [r2, #12]
     8c4:	4798      	blx	r3
     8c6:	e7f9      	b.n	8bc <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     8c8:	6893      	ldr	r3, [r2, #8]
     8ca:	4798      	blx	r3
     8cc:	e7f1      	b.n	8b2 <RTC_Handler+0x22>
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	200003d8 	.word	0x200003d8

000008d4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d6:	46de      	mov	lr, fp
     8d8:	4657      	mov	r7, sl
     8da:	464e      	mov	r6, r9
     8dc:	4645      	mov	r5, r8
     8de:	b5e0      	push	{r5, r6, r7, lr}
     8e0:	b087      	sub	sp, #28
     8e2:	4680      	mov	r8, r0
     8e4:	9104      	str	r1, [sp, #16]
     8e6:	0016      	movs	r6, r2
     8e8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     8ea:	2200      	movs	r2, #0
     8ec:	2300      	movs	r3, #0
     8ee:	2100      	movs	r1, #0
     8f0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     8f2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     8f4:	2001      	movs	r0, #1
     8f6:	0021      	movs	r1, r4
     8f8:	9600      	str	r6, [sp, #0]
     8fa:	9701      	str	r7, [sp, #4]
     8fc:	465c      	mov	r4, fp
     8fe:	9403      	str	r4, [sp, #12]
     900:	4644      	mov	r4, r8
     902:	9405      	str	r4, [sp, #20]
     904:	e013      	b.n	92e <long_division+0x5a>
     906:	2420      	movs	r4, #32
     908:	1a64      	subs	r4, r4, r1
     90a:	0005      	movs	r5, r0
     90c:	40e5      	lsrs	r5, r4
     90e:	46a8      	mov	r8, r5
     910:	e014      	b.n	93c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     912:	9c00      	ldr	r4, [sp, #0]
     914:	9d01      	ldr	r5, [sp, #4]
     916:	1b12      	subs	r2, r2, r4
     918:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     91a:	465c      	mov	r4, fp
     91c:	464d      	mov	r5, r9
     91e:	432c      	orrs	r4, r5
     920:	46a3      	mov	fp, r4
     922:	9c03      	ldr	r4, [sp, #12]
     924:	4645      	mov	r5, r8
     926:	432c      	orrs	r4, r5
     928:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     92a:	3901      	subs	r1, #1
     92c:	d325      	bcc.n	97a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     92e:	2420      	movs	r4, #32
     930:	4264      	negs	r4, r4
     932:	190c      	adds	r4, r1, r4
     934:	d4e7      	bmi.n	906 <long_division+0x32>
     936:	0005      	movs	r5, r0
     938:	40a5      	lsls	r5, r4
     93a:	46a8      	mov	r8, r5
     93c:	0004      	movs	r4, r0
     93e:	408c      	lsls	r4, r1
     940:	46a1      	mov	r9, r4
		r = r << 1;
     942:	1892      	adds	r2, r2, r2
     944:	415b      	adcs	r3, r3
     946:	0014      	movs	r4, r2
     948:	001d      	movs	r5, r3
		if (n & bit_shift) {
     94a:	9e05      	ldr	r6, [sp, #20]
     94c:	464f      	mov	r7, r9
     94e:	403e      	ands	r6, r7
     950:	46b4      	mov	ip, r6
     952:	9e04      	ldr	r6, [sp, #16]
     954:	4647      	mov	r7, r8
     956:	403e      	ands	r6, r7
     958:	46b2      	mov	sl, r6
     95a:	4666      	mov	r6, ip
     95c:	4657      	mov	r7, sl
     95e:	433e      	orrs	r6, r7
     960:	d003      	beq.n	96a <long_division+0x96>
			r |= 0x01;
     962:	0006      	movs	r6, r0
     964:	4326      	orrs	r6, r4
     966:	0032      	movs	r2, r6
     968:	002b      	movs	r3, r5
		if (r >= d) {
     96a:	9c00      	ldr	r4, [sp, #0]
     96c:	9d01      	ldr	r5, [sp, #4]
     96e:	429d      	cmp	r5, r3
     970:	d8db      	bhi.n	92a <long_division+0x56>
     972:	d1ce      	bne.n	912 <long_division+0x3e>
     974:	4294      	cmp	r4, r2
     976:	d8d8      	bhi.n	92a <long_division+0x56>
     978:	e7cb      	b.n	912 <long_division+0x3e>
     97a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     97c:	4658      	mov	r0, fp
     97e:	0019      	movs	r1, r3
     980:	b007      	add	sp, #28
     982:	bc3c      	pop	{r2, r3, r4, r5}
     984:	4690      	mov	r8, r2
     986:	4699      	mov	r9, r3
     988:	46a2      	mov	sl, r4
     98a:	46ab      	mov	fp, r5
     98c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000098e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     98e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     990:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     992:	2340      	movs	r3, #64	; 0x40
     994:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     996:	4281      	cmp	r1, r0
     998:	d202      	bcs.n	9a0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     99a:	0018      	movs	r0, r3
     99c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     99e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     9a0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     9a2:	1c63      	adds	r3, r4, #1
     9a4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     9a6:	4288      	cmp	r0, r1
     9a8:	d9f9      	bls.n	99e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9aa:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     9ac:	2cff      	cmp	r4, #255	; 0xff
     9ae:	d8f4      	bhi.n	99a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     9b0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     9b2:	2300      	movs	r3, #0
     9b4:	e7f1      	b.n	99a <_sercom_get_sync_baud_val+0xc>
	...

000009b8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ba:	b083      	sub	sp, #12
     9bc:	000f      	movs	r7, r1
     9be:	0016      	movs	r6, r2
     9c0:	aa08      	add	r2, sp, #32
     9c2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     9c4:	0004      	movs	r4, r0
     9c6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9c8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     9ca:	42bc      	cmp	r4, r7
     9cc:	d902      	bls.n	9d4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     9ce:	0010      	movs	r0, r2
     9d0:	b003      	add	sp, #12
     9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     9d4:	2b00      	cmp	r3, #0
     9d6:	d114      	bne.n	a02 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     9d8:	0002      	movs	r2, r0
     9da:	0008      	movs	r0, r1
     9dc:	2100      	movs	r1, #0
     9de:	4c19      	ldr	r4, [pc, #100]	; (a44 <_sercom_get_async_baud_val+0x8c>)
     9e0:	47a0      	blx	r4
     9e2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     9e4:	003a      	movs	r2, r7
     9e6:	2300      	movs	r3, #0
     9e8:	2000      	movs	r0, #0
     9ea:	4c17      	ldr	r4, [pc, #92]	; (a48 <_sercom_get_async_baud_val+0x90>)
     9ec:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     9ee:	2200      	movs	r2, #0
     9f0:	2301      	movs	r3, #1
     9f2:	1a12      	subs	r2, r2, r0
     9f4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     9f6:	0c12      	lsrs	r2, r2, #16
     9f8:	041b      	lsls	r3, r3, #16
     9fa:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     9fc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     9fe:	2200      	movs	r2, #0
     a00:	e7e5      	b.n	9ce <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     a02:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     a04:	2b01      	cmp	r3, #1
     a06:	d1f9      	bne.n	9fc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     a08:	000a      	movs	r2, r1
     a0a:	2300      	movs	r3, #0
     a0c:	2100      	movs	r1, #0
     a0e:	4c0d      	ldr	r4, [pc, #52]	; (a44 <_sercom_get_async_baud_val+0x8c>)
     a10:	47a0      	blx	r4
     a12:	0002      	movs	r2, r0
     a14:	000b      	movs	r3, r1
     a16:	9200      	str	r2, [sp, #0]
     a18:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     a1a:	0038      	movs	r0, r7
     a1c:	2100      	movs	r1, #0
     a1e:	4c0a      	ldr	r4, [pc, #40]	; (a48 <_sercom_get_async_baud_val+0x90>)
     a20:	47a0      	blx	r4
     a22:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     a24:	2380      	movs	r3, #128	; 0x80
     a26:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a28:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     a2a:	4298      	cmp	r0, r3
     a2c:	d8cf      	bhi.n	9ce <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     a2e:	0f79      	lsrs	r1, r7, #29
     a30:	00f8      	lsls	r0, r7, #3
     a32:	9a00      	ldr	r2, [sp, #0]
     a34:	9b01      	ldr	r3, [sp, #4]
     a36:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     a38:	00ea      	lsls	r2, r5, #3
     a3a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     a3c:	b2d2      	uxtb	r2, r2
     a3e:	0352      	lsls	r2, r2, #13
     a40:	432a      	orrs	r2, r5
     a42:	e7db      	b.n	9fc <_sercom_get_async_baud_val+0x44>
     a44:	000079c5 	.word	0x000079c5
     a48:	000008d5 	.word	0x000008d5

00000a4c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     a4c:	b510      	push	{r4, lr}
     a4e:	b082      	sub	sp, #8
     a50:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     a52:	4b0e      	ldr	r3, [pc, #56]	; (a8c <sercom_set_gclk_generator+0x40>)
     a54:	781b      	ldrb	r3, [r3, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d007      	beq.n	a6a <sercom_set_gclk_generator+0x1e>
     a5a:	2900      	cmp	r1, #0
     a5c:	d105      	bne.n	a6a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     a5e:	4b0b      	ldr	r3, [pc, #44]	; (a8c <sercom_set_gclk_generator+0x40>)
     a60:	785b      	ldrb	r3, [r3, #1]
     a62:	4283      	cmp	r3, r0
     a64:	d010      	beq.n	a88 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     a66:	201d      	movs	r0, #29
     a68:	e00c      	b.n	a84 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     a6a:	a901      	add	r1, sp, #4
     a6c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a6e:	2013      	movs	r0, #19
     a70:	4b07      	ldr	r3, [pc, #28]	; (a90 <sercom_set_gclk_generator+0x44>)
     a72:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a74:	2013      	movs	r0, #19
     a76:	4b07      	ldr	r3, [pc, #28]	; (a94 <sercom_set_gclk_generator+0x48>)
     a78:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     a7a:	4b04      	ldr	r3, [pc, #16]	; (a8c <sercom_set_gclk_generator+0x40>)
     a7c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     a7e:	2201      	movs	r2, #1
     a80:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     a82:	2000      	movs	r0, #0
}
     a84:	b002      	add	sp, #8
     a86:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     a88:	2000      	movs	r0, #0
     a8a:	e7fb      	b.n	a84 <sercom_set_gclk_generator+0x38>
     a8c:	200000e4 	.word	0x200000e4
     a90:	00001d15 	.word	0x00001d15
     a94:	00001c89 	.word	0x00001c89

00000a98 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     a98:	4b40      	ldr	r3, [pc, #256]	; (b9c <_sercom_get_default_pad+0x104>)
     a9a:	4298      	cmp	r0, r3
     a9c:	d031      	beq.n	b02 <_sercom_get_default_pad+0x6a>
     a9e:	d90a      	bls.n	ab6 <_sercom_get_default_pad+0x1e>
     aa0:	4b3f      	ldr	r3, [pc, #252]	; (ba0 <_sercom_get_default_pad+0x108>)
     aa2:	4298      	cmp	r0, r3
     aa4:	d04d      	beq.n	b42 <_sercom_get_default_pad+0xaa>
     aa6:	4b3f      	ldr	r3, [pc, #252]	; (ba4 <_sercom_get_default_pad+0x10c>)
     aa8:	4298      	cmp	r0, r3
     aaa:	d05a      	beq.n	b62 <_sercom_get_default_pad+0xca>
     aac:	4b3e      	ldr	r3, [pc, #248]	; (ba8 <_sercom_get_default_pad+0x110>)
     aae:	4298      	cmp	r0, r3
     ab0:	d037      	beq.n	b22 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     ab2:	2000      	movs	r0, #0
}
     ab4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     ab6:	4b3d      	ldr	r3, [pc, #244]	; (bac <_sercom_get_default_pad+0x114>)
     ab8:	4298      	cmp	r0, r3
     aba:	d00c      	beq.n	ad6 <_sercom_get_default_pad+0x3e>
     abc:	4b3c      	ldr	r3, [pc, #240]	; (bb0 <_sercom_get_default_pad+0x118>)
     abe:	4298      	cmp	r0, r3
     ac0:	d1f7      	bne.n	ab2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ac2:	2901      	cmp	r1, #1
     ac4:	d017      	beq.n	af6 <_sercom_get_default_pad+0x5e>
     ac6:	2900      	cmp	r1, #0
     ac8:	d05d      	beq.n	b86 <_sercom_get_default_pad+0xee>
     aca:	2902      	cmp	r1, #2
     acc:	d015      	beq.n	afa <_sercom_get_default_pad+0x62>
     ace:	2903      	cmp	r1, #3
     ad0:	d015      	beq.n	afe <_sercom_get_default_pad+0x66>
	return 0;
     ad2:	2000      	movs	r0, #0
     ad4:	e7ee      	b.n	ab4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ad6:	2901      	cmp	r1, #1
     ad8:	d007      	beq.n	aea <_sercom_get_default_pad+0x52>
     ada:	2900      	cmp	r1, #0
     adc:	d051      	beq.n	b82 <_sercom_get_default_pad+0xea>
     ade:	2902      	cmp	r1, #2
     ae0:	d005      	beq.n	aee <_sercom_get_default_pad+0x56>
     ae2:	2903      	cmp	r1, #3
     ae4:	d005      	beq.n	af2 <_sercom_get_default_pad+0x5a>
	return 0;
     ae6:	2000      	movs	r0, #0
     ae8:	e7e4      	b.n	ab4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aea:	4832      	ldr	r0, [pc, #200]	; (bb4 <_sercom_get_default_pad+0x11c>)
     aec:	e7e2      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     aee:	4832      	ldr	r0, [pc, #200]	; (bb8 <_sercom_get_default_pad+0x120>)
     af0:	e7e0      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     af2:	4832      	ldr	r0, [pc, #200]	; (bbc <_sercom_get_default_pad+0x124>)
     af4:	e7de      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     af6:	4832      	ldr	r0, [pc, #200]	; (bc0 <_sercom_get_default_pad+0x128>)
     af8:	e7dc      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     afa:	4832      	ldr	r0, [pc, #200]	; (bc4 <_sercom_get_default_pad+0x12c>)
     afc:	e7da      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     afe:	4832      	ldr	r0, [pc, #200]	; (bc8 <_sercom_get_default_pad+0x130>)
     b00:	e7d8      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b02:	2901      	cmp	r1, #1
     b04:	d007      	beq.n	b16 <_sercom_get_default_pad+0x7e>
     b06:	2900      	cmp	r1, #0
     b08:	d03f      	beq.n	b8a <_sercom_get_default_pad+0xf2>
     b0a:	2902      	cmp	r1, #2
     b0c:	d005      	beq.n	b1a <_sercom_get_default_pad+0x82>
     b0e:	2903      	cmp	r1, #3
     b10:	d005      	beq.n	b1e <_sercom_get_default_pad+0x86>
	return 0;
     b12:	2000      	movs	r0, #0
     b14:	e7ce      	b.n	ab4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b16:	482d      	ldr	r0, [pc, #180]	; (bcc <_sercom_get_default_pad+0x134>)
     b18:	e7cc      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b1a:	482d      	ldr	r0, [pc, #180]	; (bd0 <_sercom_get_default_pad+0x138>)
     b1c:	e7ca      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b1e:	482d      	ldr	r0, [pc, #180]	; (bd4 <_sercom_get_default_pad+0x13c>)
     b20:	e7c8      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b22:	2901      	cmp	r1, #1
     b24:	d007      	beq.n	b36 <_sercom_get_default_pad+0x9e>
     b26:	2900      	cmp	r1, #0
     b28:	d031      	beq.n	b8e <_sercom_get_default_pad+0xf6>
     b2a:	2902      	cmp	r1, #2
     b2c:	d005      	beq.n	b3a <_sercom_get_default_pad+0xa2>
     b2e:	2903      	cmp	r1, #3
     b30:	d005      	beq.n	b3e <_sercom_get_default_pad+0xa6>
	return 0;
     b32:	2000      	movs	r0, #0
     b34:	e7be      	b.n	ab4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b36:	4828      	ldr	r0, [pc, #160]	; (bd8 <_sercom_get_default_pad+0x140>)
     b38:	e7bc      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b3a:	4828      	ldr	r0, [pc, #160]	; (bdc <_sercom_get_default_pad+0x144>)
     b3c:	e7ba      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b3e:	4828      	ldr	r0, [pc, #160]	; (be0 <_sercom_get_default_pad+0x148>)
     b40:	e7b8      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b42:	2901      	cmp	r1, #1
     b44:	d007      	beq.n	b56 <_sercom_get_default_pad+0xbe>
     b46:	2900      	cmp	r1, #0
     b48:	d023      	beq.n	b92 <_sercom_get_default_pad+0xfa>
     b4a:	2902      	cmp	r1, #2
     b4c:	d005      	beq.n	b5a <_sercom_get_default_pad+0xc2>
     b4e:	2903      	cmp	r1, #3
     b50:	d005      	beq.n	b5e <_sercom_get_default_pad+0xc6>
	return 0;
     b52:	2000      	movs	r0, #0
     b54:	e7ae      	b.n	ab4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b56:	4823      	ldr	r0, [pc, #140]	; (be4 <_sercom_get_default_pad+0x14c>)
     b58:	e7ac      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b5a:	4823      	ldr	r0, [pc, #140]	; (be8 <_sercom_get_default_pad+0x150>)
     b5c:	e7aa      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b5e:	4823      	ldr	r0, [pc, #140]	; (bec <_sercom_get_default_pad+0x154>)
     b60:	e7a8      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b62:	2901      	cmp	r1, #1
     b64:	d007      	beq.n	b76 <_sercom_get_default_pad+0xde>
     b66:	2900      	cmp	r1, #0
     b68:	d015      	beq.n	b96 <_sercom_get_default_pad+0xfe>
     b6a:	2902      	cmp	r1, #2
     b6c:	d005      	beq.n	b7a <_sercom_get_default_pad+0xe2>
     b6e:	2903      	cmp	r1, #3
     b70:	d005      	beq.n	b7e <_sercom_get_default_pad+0xe6>
	return 0;
     b72:	2000      	movs	r0, #0
     b74:	e79e      	b.n	ab4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b76:	481e      	ldr	r0, [pc, #120]	; (bf0 <_sercom_get_default_pad+0x158>)
     b78:	e79c      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b7a:	481e      	ldr	r0, [pc, #120]	; (bf4 <_sercom_get_default_pad+0x15c>)
     b7c:	e79a      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b7e:	481e      	ldr	r0, [pc, #120]	; (bf8 <_sercom_get_default_pad+0x160>)
     b80:	e798      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b82:	481e      	ldr	r0, [pc, #120]	; (bfc <_sercom_get_default_pad+0x164>)
     b84:	e796      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b86:	481e      	ldr	r0, [pc, #120]	; (c00 <_sercom_get_default_pad+0x168>)
     b88:	e794      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b8a:	481e      	ldr	r0, [pc, #120]	; (c04 <_sercom_get_default_pad+0x16c>)
     b8c:	e792      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b8e:	481e      	ldr	r0, [pc, #120]	; (c08 <_sercom_get_default_pad+0x170>)
     b90:	e790      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b92:	481e      	ldr	r0, [pc, #120]	; (c0c <_sercom_get_default_pad+0x174>)
     b94:	e78e      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b96:	481e      	ldr	r0, [pc, #120]	; (c10 <_sercom_get_default_pad+0x178>)
     b98:	e78c      	b.n	ab4 <_sercom_get_default_pad+0x1c>
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	42001000 	.word	0x42001000
     ba0:	42001800 	.word	0x42001800
     ba4:	42001c00 	.word	0x42001c00
     ba8:	42001400 	.word	0x42001400
     bac:	42000800 	.word	0x42000800
     bb0:	42000c00 	.word	0x42000c00
     bb4:	00090002 	.word	0x00090002
     bb8:	00060003 	.word	0x00060003
     bbc:	00070003 	.word	0x00070003
     bc0:	00110002 	.word	0x00110002
     bc4:	00120002 	.word	0x00120002
     bc8:	00130002 	.word	0x00130002
     bcc:	00090003 	.word	0x00090003
     bd0:	000e0002 	.word	0x000e0002
     bd4:	000f0002 	.word	0x000f0002
     bd8:	001c0005 	.word	0x001c0005
     bdc:	00180002 	.word	0x00180002
     be0:	00190002 	.word	0x00190002
     be4:	003f0005 	.word	0x003f0005
     be8:	003e0005 	.word	0x003e0005
     bec:	00520005 	.word	0x00520005
     bf0:	003f0003 	.word	0x003f0003
     bf4:	00180003 	.word	0x00180003
     bf8:	00190003 	.word	0x00190003
     bfc:	00080002 	.word	0x00080002
     c00:	00100002 	.word	0x00100002
     c04:	00080003 	.word	0x00080003
     c08:	001b0005 	.word	0x001b0005
     c0c:	00530005 	.word	0x00530005
     c10:	003e0003 	.word	0x003e0003

00000c14 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c14:	b530      	push	{r4, r5, lr}
     c16:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c18:	4b0b      	ldr	r3, [pc, #44]	; (c48 <_sercom_get_sercom_inst_index+0x34>)
     c1a:	466a      	mov	r2, sp
     c1c:	cb32      	ldmia	r3!, {r1, r4, r5}
     c1e:	c232      	stmia	r2!, {r1, r4, r5}
     c20:	cb32      	ldmia	r3!, {r1, r4, r5}
     c22:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c24:	9b00      	ldr	r3, [sp, #0]
     c26:	4283      	cmp	r3, r0
     c28:	d00b      	beq.n	c42 <_sercom_get_sercom_inst_index+0x2e>
     c2a:	2301      	movs	r3, #1
     c2c:	009a      	lsls	r2, r3, #2
     c2e:	4669      	mov	r1, sp
     c30:	5852      	ldr	r2, [r2, r1]
     c32:	4282      	cmp	r2, r0
     c34:	d006      	beq.n	c44 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c36:	3301      	adds	r3, #1
     c38:	2b06      	cmp	r3, #6
     c3a:	d1f7      	bne.n	c2c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     c3c:	2000      	movs	r0, #0
}
     c3e:	b007      	add	sp, #28
     c40:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c42:	2300      	movs	r3, #0
			return i;
     c44:	b2d8      	uxtb	r0, r3
     c46:	e7fa      	b.n	c3e <_sercom_get_sercom_inst_index+0x2a>
     c48:	00008a38 	.word	0x00008a38

00000c4c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c4c:	4770      	bx	lr
	...

00000c50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c50:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c52:	4b0a      	ldr	r3, [pc, #40]	; (c7c <_sercom_set_handler+0x2c>)
     c54:	781b      	ldrb	r3, [r3, #0]
     c56:	2b00      	cmp	r3, #0
     c58:	d10c      	bne.n	c74 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c5a:	4f09      	ldr	r7, [pc, #36]	; (c80 <_sercom_set_handler+0x30>)
     c5c:	4e09      	ldr	r6, [pc, #36]	; (c84 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c5e:	4d0a      	ldr	r5, [pc, #40]	; (c88 <_sercom_set_handler+0x38>)
     c60:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c62:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c64:	195a      	adds	r2, r3, r5
     c66:	6014      	str	r4, [r2, #0]
     c68:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c6a:	2b18      	cmp	r3, #24
     c6c:	d1f9      	bne.n	c62 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     c6e:	2201      	movs	r2, #1
     c70:	4b02      	ldr	r3, [pc, #8]	; (c7c <_sercom_set_handler+0x2c>)
     c72:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c74:	0080      	lsls	r0, r0, #2
     c76:	4b02      	ldr	r3, [pc, #8]	; (c80 <_sercom_set_handler+0x30>)
     c78:	50c1      	str	r1, [r0, r3]
}
     c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c7c:	200000e6 	.word	0x200000e6
     c80:	200000e8 	.word	0x200000e8
     c84:	00000c4d 	.word	0x00000c4d
     c88:	200003dc 	.word	0x200003dc

00000c8c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c8c:	b500      	push	{lr}
     c8e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c90:	2309      	movs	r3, #9
     c92:	466a      	mov	r2, sp
     c94:	7013      	strb	r3, [r2, #0]
     c96:	3301      	adds	r3, #1
     c98:	7053      	strb	r3, [r2, #1]
     c9a:	3301      	adds	r3, #1
     c9c:	7093      	strb	r3, [r2, #2]
     c9e:	3301      	adds	r3, #1
     ca0:	70d3      	strb	r3, [r2, #3]
     ca2:	3301      	adds	r3, #1
     ca4:	7113      	strb	r3, [r2, #4]
     ca6:	3301      	adds	r3, #1
     ca8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     caa:	4b03      	ldr	r3, [pc, #12]	; (cb8 <_sercom_get_interrupt_vector+0x2c>)
     cac:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     cae:	466b      	mov	r3, sp
     cb0:	5618      	ldrsb	r0, [r3, r0]
}
     cb2:	b003      	add	sp, #12
     cb4:	bd00      	pop	{pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	00000c15 	.word	0x00000c15

00000cbc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     cbc:	b510      	push	{r4, lr}
     cbe:	4b02      	ldr	r3, [pc, #8]	; (cc8 <SERCOM0_Handler+0xc>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	2000      	movs	r0, #0
     cc4:	4798      	blx	r3
     cc6:	bd10      	pop	{r4, pc}
     cc8:	200000e8 	.word	0x200000e8

00000ccc <SERCOM1_Handler>:
     ccc:	b510      	push	{r4, lr}
     cce:	4b02      	ldr	r3, [pc, #8]	; (cd8 <SERCOM1_Handler+0xc>)
     cd0:	685b      	ldr	r3, [r3, #4]
     cd2:	2001      	movs	r0, #1
     cd4:	4798      	blx	r3
     cd6:	bd10      	pop	{r4, pc}
     cd8:	200000e8 	.word	0x200000e8

00000cdc <SERCOM2_Handler>:
     cdc:	b510      	push	{r4, lr}
     cde:	4b02      	ldr	r3, [pc, #8]	; (ce8 <SERCOM2_Handler+0xc>)
     ce0:	689b      	ldr	r3, [r3, #8]
     ce2:	2002      	movs	r0, #2
     ce4:	4798      	blx	r3
     ce6:	bd10      	pop	{r4, pc}
     ce8:	200000e8 	.word	0x200000e8

00000cec <SERCOM3_Handler>:
     cec:	b510      	push	{r4, lr}
     cee:	4b02      	ldr	r3, [pc, #8]	; (cf8 <SERCOM3_Handler+0xc>)
     cf0:	68db      	ldr	r3, [r3, #12]
     cf2:	2003      	movs	r0, #3
     cf4:	4798      	blx	r3
     cf6:	bd10      	pop	{r4, pc}
     cf8:	200000e8 	.word	0x200000e8

00000cfc <SERCOM4_Handler>:
     cfc:	b510      	push	{r4, lr}
     cfe:	4b02      	ldr	r3, [pc, #8]	; (d08 <SERCOM4_Handler+0xc>)
     d00:	691b      	ldr	r3, [r3, #16]
     d02:	2004      	movs	r0, #4
     d04:	4798      	blx	r3
     d06:	bd10      	pop	{r4, pc}
     d08:	200000e8 	.word	0x200000e8

00000d0c <SERCOM5_Handler>:
     d0c:	b510      	push	{r4, lr}
     d0e:	4b02      	ldr	r3, [pc, #8]	; (d18 <SERCOM5_Handler+0xc>)
     d10:	695b      	ldr	r3, [r3, #20]
     d12:	2005      	movs	r0, #5
     d14:	4798      	blx	r3
     d16:	bd10      	pop	{r4, pc}
     d18:	200000e8 	.word	0x200000e8

00000d1c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d1e:	46d6      	mov	lr, sl
     d20:	464f      	mov	r7, r9
     d22:	b580      	push	{r7, lr}
     d24:	b08b      	sub	sp, #44	; 0x2c
     d26:	4681      	mov	r9, r0
     d28:	000f      	movs	r7, r1
     d2a:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     d2c:	0003      	movs	r3, r0
     d2e:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d30:	680b      	ldr	r3, [r1, #0]
     d32:	079b      	lsls	r3, r3, #30
     d34:	d409      	bmi.n	d4a <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d36:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     d38:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d3a:	07db      	lsls	r3, r3, #31
     d3c:	d400      	bmi.n	d40 <spi_init+0x24>
     d3e:	e098      	b.n	e72 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     d40:	b00b      	add	sp, #44	; 0x2c
     d42:	bc0c      	pop	{r2, r3}
     d44:	4691      	mov	r9, r2
     d46:	469a      	mov	sl, r3
     d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     d4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d4c:	9305      	str	r3, [sp, #20]
     d4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     d50:	9306      	str	r3, [sp, #24]
     d52:	6b13      	ldr	r3, [r2, #48]	; 0x30
     d54:	9307      	str	r3, [sp, #28]
     d56:	6b53      	ldr	r3, [r2, #52]	; 0x34
     d58:	9308      	str	r3, [sp, #32]
     d5a:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d5c:	ab05      	add	r3, sp, #20
     d5e:	9301      	str	r3, [sp, #4]
     d60:	e00a      	b.n	d78 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d62:	0038      	movs	r0, r7
     d64:	4b93      	ldr	r3, [pc, #588]	; (fb4 <spi_init+0x298>)
     d66:	4798      	blx	r3
     d68:	e00c      	b.n	d84 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     d6a:	230f      	movs	r3, #15
     d6c:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     d6e:	4281      	cmp	r1, r0
     d70:	d12d      	bne.n	dce <spi_init+0xb2>
     d72:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d74:	2e04      	cmp	r6, #4
     d76:	d02f      	beq.n	dd8 <spi_init+0xbc>
     d78:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d7a:	00b3      	lsls	r3, r6, #2
     d7c:	9a01      	ldr	r2, [sp, #4]
     d7e:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     d80:	2800      	cmp	r0, #0
     d82:	d0ee      	beq.n	d62 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     d84:	1c43      	adds	r3, r0, #1
     d86:	d0f4      	beq.n	d72 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     d88:	0401      	lsls	r1, r0, #16
     d8a:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     d8c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     d8e:	b2c3      	uxtb	r3, r0
     d90:	469c      	mov	ip, r3
		return NULL;
     d92:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     d94:	0602      	lsls	r2, r0, #24
     d96:	d405      	bmi.n	da4 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     d98:	4663      	mov	r3, ip
     d9a:	095b      	lsrs	r3, r3, #5
     d9c:	01db      	lsls	r3, r3, #7
     d9e:	4a86      	ldr	r2, [pc, #536]	; (fb8 <spi_init+0x29c>)
     da0:	4692      	mov	sl, r2
     da2:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     da4:	221f      	movs	r2, #31
     da6:	4660      	mov	r0, ip
     da8:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     daa:	1898      	adds	r0, r3, r2
     dac:	3040      	adds	r0, #64	; 0x40
     dae:	7800      	ldrb	r0, [r0, #0]
     db0:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     db2:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     db4:	4655      	mov	r5, sl
     db6:	07ed      	lsls	r5, r5, #31
     db8:	d5d9      	bpl.n	d6e <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     dba:	0852      	lsrs	r2, r2, #1
     dbc:	189b      	adds	r3, r3, r2
     dbe:	3330      	adds	r3, #48	; 0x30
     dc0:	7818      	ldrb	r0, [r3, #0]
     dc2:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     dc4:	4663      	mov	r3, ip
     dc6:	07db      	lsls	r3, r3, #31
     dc8:	d5cf      	bpl.n	d6a <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     dca:	0900      	lsrs	r0, r0, #4
     dcc:	e7cf      	b.n	d6e <spi_init+0x52>
			module->hw = NULL;
     dce:	2300      	movs	r3, #0
     dd0:	464a      	mov	r2, r9
     dd2:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     dd4:	201c      	movs	r0, #28
     dd6:	e7b3      	b.n	d40 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     dd8:	2013      	movs	r0, #19
     dda:	4b78      	ldr	r3, [pc, #480]	; (fbc <spi_init+0x2a0>)
     ddc:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     dde:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     de0:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     de2:	2a01      	cmp	r2, #1
     de4:	d027      	beq.n	e36 <spi_init+0x11a>
	ctrla |= config->mux_setting;
     de6:	6863      	ldr	r3, [r4, #4]
     de8:	68a2      	ldr	r2, [r4, #8]
     dea:	4313      	orrs	r3, r2
     dec:	68e2      	ldr	r2, [r4, #12]
     dee:	4313      	orrs	r3, r2
     df0:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     df2:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
     df4:	7c61      	ldrb	r1, [r4, #17]
     df6:	2900      	cmp	r1, #0
     df8:	d001      	beq.n	dfe <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     dfa:	2180      	movs	r1, #128	; 0x80
     dfc:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     dfe:	7ca1      	ldrb	r1, [r4, #18]
     e00:	2900      	cmp	r1, #0
     e02:	d002      	beq.n	e0a <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     e04:	2180      	movs	r1, #128	; 0x80
     e06:	0289      	lsls	r1, r1, #10
     e08:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     e0a:	7ce1      	ldrb	r1, [r4, #19]
     e0c:	2900      	cmp	r1, #0
     e0e:	d002      	beq.n	e16 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     e10:	2180      	movs	r1, #128	; 0x80
     e12:	0089      	lsls	r1, r1, #2
     e14:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     e16:	7d21      	ldrb	r1, [r4, #20]
     e18:	2900      	cmp	r1, #0
     e1a:	d002      	beq.n	e22 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     e1c:	2180      	movs	r1, #128	; 0x80
     e1e:	0189      	lsls	r1, r1, #6
     e20:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
     e22:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     e24:	2002      	movs	r0, #2
     e26:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
     e28:	428b      	cmp	r3, r1
     e2a:	d018      	beq.n	e5e <spi_init+0x142>
	module->hw = NULL;
     e2c:	2300      	movs	r3, #0
     e2e:	464a      	mov	r2, r9
     e30:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     e32:	201c      	movs	r0, #28
     e34:	e784      	b.n	d40 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
     e36:	aa04      	add	r2, sp, #16
     e38:	0001      	movs	r1, r0
     e3a:	69a0      	ldr	r0, [r4, #24]
     e3c:	4b60      	ldr	r3, [pc, #384]	; (fc0 <spi_init+0x2a4>)
     e3e:	4798      	blx	r3
     e40:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     e42:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     e44:	2b00      	cmp	r3, #0
     e46:	d000      	beq.n	e4a <spi_init+0x12e>
     e48:	e77a      	b.n	d40 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     e4a:	7b3b      	ldrb	r3, [r7, #12]
     e4c:	b2db      	uxtb	r3, r3
     e4e:	aa04      	add	r2, sp, #16
     e50:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     e52:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     e54:	429a      	cmp	r2, r3
     e56:	d000      	beq.n	e5a <spi_init+0x13e>
     e58:	e772      	b.n	d40 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     e5a:	350c      	adds	r5, #12
     e5c:	e7c3      	b.n	de6 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
     e5e:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     e60:	4293      	cmp	r3, r2
     e62:	d1e3      	bne.n	e2c <spi_init+0x110>
		module->mode           = config->mode;
     e64:	7823      	ldrb	r3, [r4, #0]
     e66:	464a      	mov	r2, r9
     e68:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
     e6a:	7c23      	ldrb	r3, [r4, #16]
     e6c:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     e6e:	2000      	movs	r0, #0
     e70:	e766      	b.n	d40 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e72:	0008      	movs	r0, r1
     e74:	4b53      	ldr	r3, [pc, #332]	; (fc4 <spi_init+0x2a8>)
     e76:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     e78:	4a53      	ldr	r2, [pc, #332]	; (fc8 <spi_init+0x2ac>)
     e7a:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e7c:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e7e:	2301      	movs	r3, #1
     e80:	40ab      	lsls	r3, r5
     e82:	430b      	orrs	r3, r1
     e84:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     e86:	a909      	add	r1, sp, #36	; 0x24
     e88:	2624      	movs	r6, #36	; 0x24
     e8a:	5da3      	ldrb	r3, [r4, r6]
     e8c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e8e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e90:	b2c5      	uxtb	r5, r0
     e92:	0028      	movs	r0, r5
     e94:	4b4d      	ldr	r3, [pc, #308]	; (fcc <spi_init+0x2b0>)
     e96:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e98:	0028      	movs	r0, r5
     e9a:	4b4d      	ldr	r3, [pc, #308]	; (fd0 <spi_init+0x2b4>)
     e9c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e9e:	5da0      	ldrb	r0, [r4, r6]
     ea0:	2100      	movs	r1, #0
     ea2:	4b4c      	ldr	r3, [pc, #304]	; (fd4 <spi_init+0x2b8>)
     ea4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     ea6:	7823      	ldrb	r3, [r4, #0]
     ea8:	2b01      	cmp	r3, #1
     eaa:	d019      	beq.n	ee0 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     eac:	464b      	mov	r3, r9
     eae:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     eb0:	ab04      	add	r3, sp, #16
     eb2:	2280      	movs	r2, #128	; 0x80
     eb4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     eb6:	2200      	movs	r2, #0
     eb8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     eba:	2101      	movs	r1, #1
     ebc:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     ebe:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     ec0:	7823      	ldrb	r3, [r4, #0]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d101      	bne.n	eca <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ec6:	ab04      	add	r3, sp, #16
     ec8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ecc:	9305      	str	r3, [sp, #20]
     ece:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ed0:	9306      	str	r3, [sp, #24]
     ed2:	6b23      	ldr	r3, [r4, #48]	; 0x30
     ed4:	9307      	str	r3, [sp, #28]
     ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ed8:	9308      	str	r3, [sp, #32]
     eda:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     edc:	ad05      	add	r5, sp, #20
     ede:	e011      	b.n	f04 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     ee0:	683b      	ldr	r3, [r7, #0]
     ee2:	220c      	movs	r2, #12
     ee4:	4313      	orrs	r3, r2
     ee6:	603b      	str	r3, [r7, #0]
     ee8:	e7e0      	b.n	eac <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     eea:	0030      	movs	r0, r6
     eec:	4b31      	ldr	r3, [pc, #196]	; (fb4 <spi_init+0x298>)
     eee:	4798      	blx	r3
     ef0:	e00d      	b.n	f0e <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ef2:	a904      	add	r1, sp, #16
     ef4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ef6:	0c00      	lsrs	r0, r0, #16
     ef8:	b2c0      	uxtb	r0, r0
     efa:	4b37      	ldr	r3, [pc, #220]	; (fd8 <spi_init+0x2bc>)
     efc:	4798      	blx	r3
     efe:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     f00:	2f04      	cmp	r7, #4
     f02:	d007      	beq.n	f14 <spi_init+0x1f8>
     f04:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f06:	00bb      	lsls	r3, r7, #2
     f08:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     f0a:	2800      	cmp	r0, #0
     f0c:	d0ed      	beq.n	eea <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
     f0e:	1c43      	adds	r3, r0, #1
     f10:	d1ef      	bne.n	ef2 <spi_init+0x1d6>
     f12:	e7f4      	b.n	efe <spi_init+0x1e2>
	module->mode             = config->mode;
     f14:	7823      	ldrb	r3, [r4, #0]
     f16:	464a      	mov	r2, r9
     f18:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     f1a:	7c23      	ldrb	r3, [r4, #16]
     f1c:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     f1e:	7ca3      	ldrb	r3, [r4, #18]
     f20:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     f22:	7d23      	ldrb	r3, [r4, #20]
     f24:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     f26:	2200      	movs	r2, #0
     f28:	ab02      	add	r3, sp, #8
     f2a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     f2c:	7823      	ldrb	r3, [r4, #0]
     f2e:	2b01      	cmp	r3, #1
     f30:	d028      	beq.n	f84 <spi_init+0x268>
	ctrla |= config->transfer_mode;
     f32:	6863      	ldr	r3, [r4, #4]
     f34:	68a2      	ldr	r2, [r4, #8]
     f36:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
     f38:	68e2      	ldr	r2, [r4, #12]
     f3a:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
     f3c:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
     f3e:	7c62      	ldrb	r2, [r4, #17]
     f40:	2a00      	cmp	r2, #0
     f42:	d103      	bne.n	f4c <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f44:	4a25      	ldr	r2, [pc, #148]	; (fdc <spi_init+0x2c0>)
     f46:	7892      	ldrb	r2, [r2, #2]
     f48:	0792      	lsls	r2, r2, #30
     f4a:	d501      	bpl.n	f50 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     f4c:	2280      	movs	r2, #128	; 0x80
     f4e:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
     f50:	7ca2      	ldrb	r2, [r4, #18]
     f52:	2a00      	cmp	r2, #0
     f54:	d002      	beq.n	f5c <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     f56:	2280      	movs	r2, #128	; 0x80
     f58:	0292      	lsls	r2, r2, #10
     f5a:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
     f5c:	7ce2      	ldrb	r2, [r4, #19]
     f5e:	2a00      	cmp	r2, #0
     f60:	d002      	beq.n	f68 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     f62:	2280      	movs	r2, #128	; 0x80
     f64:	0092      	lsls	r2, r2, #2
     f66:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
     f68:	7d22      	ldrb	r2, [r4, #20]
     f6a:	2a00      	cmp	r2, #0
     f6c:	d002      	beq.n	f74 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     f6e:	2280      	movs	r2, #128	; 0x80
     f70:	0192      	lsls	r2, r2, #6
     f72:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
     f74:	6832      	ldr	r2, [r6, #0]
     f76:	4313      	orrs	r3, r2
     f78:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     f7a:	6873      	ldr	r3, [r6, #4]
     f7c:	430b      	orrs	r3, r1
     f7e:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
     f80:	2000      	movs	r0, #0
     f82:	e6dd      	b.n	d40 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f84:	464b      	mov	r3, r9
     f86:	6818      	ldr	r0, [r3, #0]
     f88:	4b0e      	ldr	r3, [pc, #56]	; (fc4 <spi_init+0x2a8>)
     f8a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f8c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     f8e:	b2c0      	uxtb	r0, r0
     f90:	4b0a      	ldr	r3, [pc, #40]	; (fbc <spi_init+0x2a0>)
     f92:	4798      	blx	r3
     f94:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     f96:	ab02      	add	r3, sp, #8
     f98:	1d9a      	adds	r2, r3, #6
     f9a:	69a0      	ldr	r0, [r4, #24]
     f9c:	4b08      	ldr	r3, [pc, #32]	; (fc0 <spi_init+0x2a4>)
     f9e:	4798      	blx	r3
     fa0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     fa2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     fa4:	2b00      	cmp	r3, #0
     fa6:	d000      	beq.n	faa <spi_init+0x28e>
     fa8:	e6ca      	b.n	d40 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     faa:	ab02      	add	r3, sp, #8
     fac:	3306      	adds	r3, #6
     fae:	781b      	ldrb	r3, [r3, #0]
     fb0:	7333      	strb	r3, [r6, #12]
     fb2:	e7be      	b.n	f32 <spi_init+0x216>
     fb4:	00000a99 	.word	0x00000a99
     fb8:	41004400 	.word	0x41004400
     fbc:	00001d31 	.word	0x00001d31
     fc0:	0000098f 	.word	0x0000098f
     fc4:	00000c15 	.word	0x00000c15
     fc8:	40000400 	.word	0x40000400
     fcc:	00001d15 	.word	0x00001d15
     fd0:	00001c89 	.word	0x00001c89
     fd4:	00000a4d 	.word	0x00000a4d
     fd8:	00001e0d 	.word	0x00001e0d
     fdc:	41002000 	.word	0x41002000

00000fe0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     fe0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     fe2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     fe4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     fe6:	2c01      	cmp	r4, #1
     fe8:	d001      	beq.n	fee <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     fea:	0018      	movs	r0, r3
     fec:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     fee:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     ff0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     ff2:	2c00      	cmp	r4, #0
     ff4:	d1f9      	bne.n	fea <spi_select_slave+0xa>
		if (select) {
     ff6:	2a00      	cmp	r2, #0
     ff8:	d058      	beq.n	10ac <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     ffa:	784b      	ldrb	r3, [r1, #1]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d044      	beq.n	108a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1000:	6803      	ldr	r3, [r0, #0]
    1002:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1004:	07db      	lsls	r3, r3, #31
    1006:	d410      	bmi.n	102a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1008:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    100a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    100c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    100e:	2900      	cmp	r1, #0
    1010:	d104      	bne.n	101c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1012:	0953      	lsrs	r3, r2, #5
    1014:	01db      	lsls	r3, r3, #7
    1016:	492e      	ldr	r1, [pc, #184]	; (10d0 <spi_select_slave+0xf0>)
    1018:	468c      	mov	ip, r1
    101a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    101c:	211f      	movs	r1, #31
    101e:	4011      	ands	r1, r2
    1020:	2201      	movs	r2, #1
    1022:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1024:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1026:	2305      	movs	r3, #5
    1028:	e7df      	b.n	fea <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    102a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    102c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    102e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1030:	2c00      	cmp	r4, #0
    1032:	d104      	bne.n	103e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1034:	0953      	lsrs	r3, r2, #5
    1036:	01db      	lsls	r3, r3, #7
    1038:	4c25      	ldr	r4, [pc, #148]	; (10d0 <spi_select_slave+0xf0>)
    103a:	46a4      	mov	ip, r4
    103c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    103e:	241f      	movs	r4, #31
    1040:	4014      	ands	r4, r2
    1042:	2201      	movs	r2, #1
    1044:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1046:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1048:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    104a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    104c:	07d2      	lsls	r2, r2, #31
    104e:	d501      	bpl.n	1054 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1050:	788a      	ldrb	r2, [r1, #2]
    1052:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1054:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1056:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1058:	2a00      	cmp	r2, #0
    105a:	d1c6      	bne.n	fea <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    105c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    105e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1060:	7e13      	ldrb	r3, [r2, #24]
    1062:	420b      	tst	r3, r1
    1064:	d0fc      	beq.n	1060 <spi_select_slave+0x80>
    1066:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1068:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    106a:	0749      	lsls	r1, r1, #29
    106c:	d5bd      	bpl.n	fea <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    106e:	8b53      	ldrh	r3, [r2, #26]
    1070:	075b      	lsls	r3, r3, #29
    1072:	d501      	bpl.n	1078 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1074:	2304      	movs	r3, #4
    1076:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1078:	7983      	ldrb	r3, [r0, #6]
    107a:	2b01      	cmp	r3, #1
    107c:	d002      	beq.n	1084 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    107e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1080:	2300      	movs	r3, #0
    1082:	e7b2      	b.n	fea <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1084:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1086:	2300      	movs	r3, #0
    1088:	e7af      	b.n	fea <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    108a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    108c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    108e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1090:	2900      	cmp	r1, #0
    1092:	d104      	bne.n	109e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1094:	0953      	lsrs	r3, r2, #5
    1096:	01db      	lsls	r3, r3, #7
    1098:	490d      	ldr	r1, [pc, #52]	; (10d0 <spi_select_slave+0xf0>)
    109a:	468c      	mov	ip, r1
    109c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    109e:	211f      	movs	r1, #31
    10a0:	4011      	ands	r1, r2
    10a2:	2201      	movs	r2, #1
    10a4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    10a6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    10a8:	2300      	movs	r3, #0
    10aa:	e79e      	b.n	fea <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    10ac:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    10ae:	09d1      	lsrs	r1, r2, #7
		return NULL;
    10b0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10b2:	2900      	cmp	r1, #0
    10b4:	d104      	bne.n	10c0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    10b6:	0953      	lsrs	r3, r2, #5
    10b8:	01db      	lsls	r3, r3, #7
    10ba:	4905      	ldr	r1, [pc, #20]	; (10d0 <spi_select_slave+0xf0>)
    10bc:	468c      	mov	ip, r1
    10be:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    10c0:	211f      	movs	r1, #31
    10c2:	4011      	ands	r1, r2
    10c4:	2201      	movs	r2, #1
    10c6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    10c8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    10ca:	2300      	movs	r3, #0
    10cc:	e78d      	b.n	fea <spi_select_slave+0xa>
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	41004400 	.word	0x41004400

000010d4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    10d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10d6:	46de      	mov	lr, fp
    10d8:	4657      	mov	r7, sl
    10da:	464e      	mov	r6, r9
    10dc:	4645      	mov	r5, r8
    10de:	b5e0      	push	{r5, r6, r7, lr}
    10e0:	b091      	sub	sp, #68	; 0x44
    10e2:	0005      	movs	r5, r0
    10e4:	000c      	movs	r4, r1
    10e6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    10e8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10ea:	0008      	movs	r0, r1
    10ec:	4bbc      	ldr	r3, [pc, #752]	; (13e0 <usart_init+0x30c>)
    10ee:	4798      	blx	r3
    10f0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    10f2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    10f4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    10f6:	07db      	lsls	r3, r3, #31
    10f8:	d506      	bpl.n	1108 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    10fa:	b011      	add	sp, #68	; 0x44
    10fc:	bc3c      	pop	{r2, r3, r4, r5}
    10fe:	4690      	mov	r8, r2
    1100:	4699      	mov	r9, r3
    1102:	46a2      	mov	sl, r4
    1104:	46ab      	mov	fp, r5
    1106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1108:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    110a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    110c:	079b      	lsls	r3, r3, #30
    110e:	d4f4      	bmi.n	10fa <usart_init+0x26>
    1110:	49b4      	ldr	r1, [pc, #720]	; (13e4 <usart_init+0x310>)
    1112:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1114:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1116:	2301      	movs	r3, #1
    1118:	40bb      	lsls	r3, r7
    111a:	4303      	orrs	r3, r0
    111c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    111e:	a90f      	add	r1, sp, #60	; 0x3c
    1120:	272d      	movs	r7, #45	; 0x2d
    1122:	5df3      	ldrb	r3, [r6, r7]
    1124:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1126:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1128:	b2d3      	uxtb	r3, r2
    112a:	9302      	str	r3, [sp, #8]
    112c:	0018      	movs	r0, r3
    112e:	4bae      	ldr	r3, [pc, #696]	; (13e8 <usart_init+0x314>)
    1130:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1132:	9802      	ldr	r0, [sp, #8]
    1134:	4bad      	ldr	r3, [pc, #692]	; (13ec <usart_init+0x318>)
    1136:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1138:	5df0      	ldrb	r0, [r6, r7]
    113a:	2100      	movs	r1, #0
    113c:	4bac      	ldr	r3, [pc, #688]	; (13f0 <usart_init+0x31c>)
    113e:	4798      	blx	r3
	module->character_size = config->character_size;
    1140:	7af3      	ldrb	r3, [r6, #11]
    1142:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1144:	2324      	movs	r3, #36	; 0x24
    1146:	5cf3      	ldrb	r3, [r6, r3]
    1148:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    114a:	2325      	movs	r3, #37	; 0x25
    114c:	5cf3      	ldrb	r3, [r6, r3]
    114e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1150:	7ef3      	ldrb	r3, [r6, #27]
    1152:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1154:	7f33      	ldrb	r3, [r6, #28]
    1156:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1158:	682b      	ldr	r3, [r5, #0]
    115a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    115c:	0018      	movs	r0, r3
    115e:	4ba0      	ldr	r3, [pc, #640]	; (13e0 <usart_init+0x30c>)
    1160:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1162:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1164:	2200      	movs	r2, #0
    1166:	230e      	movs	r3, #14
    1168:	a906      	add	r1, sp, #24
    116a:	468c      	mov	ip, r1
    116c:	4463      	add	r3, ip
    116e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1170:	8a32      	ldrh	r2, [r6, #16]
    1172:	9202      	str	r2, [sp, #8]
    1174:	2380      	movs	r3, #128	; 0x80
    1176:	01db      	lsls	r3, r3, #7
    1178:	429a      	cmp	r2, r3
    117a:	d100      	bne.n	117e <usart_init+0xaa>
    117c:	e09e      	b.n	12bc <usart_init+0x1e8>
    117e:	d90f      	bls.n	11a0 <usart_init+0xcc>
    1180:	23c0      	movs	r3, #192	; 0xc0
    1182:	01db      	lsls	r3, r3, #7
    1184:	9a02      	ldr	r2, [sp, #8]
    1186:	429a      	cmp	r2, r3
    1188:	d100      	bne.n	118c <usart_init+0xb8>
    118a:	e092      	b.n	12b2 <usart_init+0x1de>
    118c:	2380      	movs	r3, #128	; 0x80
    118e:	021b      	lsls	r3, r3, #8
    1190:	429a      	cmp	r2, r3
    1192:	d000      	beq.n	1196 <usart_init+0xc2>
    1194:	e11f      	b.n	13d6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1196:	2303      	movs	r3, #3
    1198:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    119a:	2300      	movs	r3, #0
    119c:	9307      	str	r3, [sp, #28]
    119e:	e008      	b.n	11b2 <usart_init+0xde>
	switch (config->sample_rate) {
    11a0:	2380      	movs	r3, #128	; 0x80
    11a2:	019b      	lsls	r3, r3, #6
    11a4:	429a      	cmp	r2, r3
    11a6:	d000      	beq.n	11aa <usart_init+0xd6>
    11a8:	e115      	b.n	13d6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11aa:	2310      	movs	r3, #16
    11ac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    11ae:	3b0f      	subs	r3, #15
    11b0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    11b2:	6833      	ldr	r3, [r6, #0]
    11b4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    11b6:	68f3      	ldr	r3, [r6, #12]
    11b8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    11ba:	6973      	ldr	r3, [r6, #20]
    11bc:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11be:	7e33      	ldrb	r3, [r6, #24]
    11c0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11c2:	2326      	movs	r3, #38	; 0x26
    11c4:	5cf3      	ldrb	r3, [r6, r3]
    11c6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    11c8:	6873      	ldr	r3, [r6, #4]
    11ca:	4699      	mov	r9, r3
	switch (transfer_mode)
    11cc:	2b00      	cmp	r3, #0
    11ce:	d100      	bne.n	11d2 <usart_init+0xfe>
    11d0:	e0a0      	b.n	1314 <usart_init+0x240>
    11d2:	2380      	movs	r3, #128	; 0x80
    11d4:	055b      	lsls	r3, r3, #21
    11d6:	4599      	cmp	r9, r3
    11d8:	d100      	bne.n	11dc <usart_init+0x108>
    11da:	e084      	b.n	12e6 <usart_init+0x212>
	if(config->encoding_format_enable) {
    11dc:	7e73      	ldrb	r3, [r6, #25]
    11de:	2b00      	cmp	r3, #0
    11e0:	d002      	beq.n	11e8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    11e2:	7eb3      	ldrb	r3, [r6, #26]
    11e4:	4642      	mov	r2, r8
    11e6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    11e8:	682a      	ldr	r2, [r5, #0]
    11ea:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11ec:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    11ee:	2b00      	cmp	r3, #0
    11f0:	d1fc      	bne.n	11ec <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    11f2:	330e      	adds	r3, #14
    11f4:	aa06      	add	r2, sp, #24
    11f6:	4694      	mov	ip, r2
    11f8:	4463      	add	r3, ip
    11fa:	881b      	ldrh	r3, [r3, #0]
    11fc:	4642      	mov	r2, r8
    11fe:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1200:	9b05      	ldr	r3, [sp, #20]
    1202:	9a03      	ldr	r2, [sp, #12]
    1204:	4313      	orrs	r3, r2
    1206:	9a04      	ldr	r2, [sp, #16]
    1208:	4313      	orrs	r3, r2
    120a:	464a      	mov	r2, r9
    120c:	4313      	orrs	r3, r2
    120e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1210:	465b      	mov	r3, fp
    1212:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1214:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1216:	4653      	mov	r3, sl
    1218:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    121a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    121c:	2327      	movs	r3, #39	; 0x27
    121e:	5cf3      	ldrb	r3, [r6, r3]
    1220:	2b00      	cmp	r3, #0
    1222:	d101      	bne.n	1228 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1224:	3304      	adds	r3, #4
    1226:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1228:	7e73      	ldrb	r3, [r6, #25]
    122a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    122c:	7f32      	ldrb	r2, [r6, #28]
    122e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1230:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1232:	7f72      	ldrb	r2, [r6, #29]
    1234:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1236:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1238:	2224      	movs	r2, #36	; 0x24
    123a:	5cb2      	ldrb	r2, [r6, r2]
    123c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    123e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1240:	2225      	movs	r2, #37	; 0x25
    1242:	5cb2      	ldrb	r2, [r6, r2]
    1244:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1246:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1248:	7ab1      	ldrb	r1, [r6, #10]
    124a:	7af2      	ldrb	r2, [r6, #11]
    124c:	4311      	orrs	r1, r2
    124e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1250:	8933      	ldrh	r3, [r6, #8]
    1252:	2bff      	cmp	r3, #255	; 0xff
    1254:	d100      	bne.n	1258 <usart_init+0x184>
    1256:	e081      	b.n	135c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1258:	2280      	movs	r2, #128	; 0x80
    125a:	0452      	lsls	r2, r2, #17
    125c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    125e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1260:	232c      	movs	r3, #44	; 0x2c
    1262:	5cf3      	ldrb	r3, [r6, r3]
    1264:	2b00      	cmp	r3, #0
    1266:	d103      	bne.n	1270 <usart_init+0x19c>
    1268:	4b62      	ldr	r3, [pc, #392]	; (13f4 <usart_init+0x320>)
    126a:	789b      	ldrb	r3, [r3, #2]
    126c:	079b      	lsls	r3, r3, #30
    126e:	d501      	bpl.n	1274 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1270:	2380      	movs	r3, #128	; 0x80
    1272:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1274:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1276:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1278:	2b00      	cmp	r3, #0
    127a:	d1fc      	bne.n	1276 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    127c:	4643      	mov	r3, r8
    127e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1280:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1282:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1284:	2b00      	cmp	r3, #0
    1286:	d1fc      	bne.n	1282 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1288:	4643      	mov	r3, r8
    128a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    128c:	ab0e      	add	r3, sp, #56	; 0x38
    128e:	2280      	movs	r2, #128	; 0x80
    1290:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1292:	2200      	movs	r2, #0
    1294:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1296:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1298:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    129a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    129c:	930a      	str	r3, [sp, #40]	; 0x28
    129e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    12a0:	930b      	str	r3, [sp, #44]	; 0x2c
    12a2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    12a4:	930c      	str	r3, [sp, #48]	; 0x30
    12a6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    12a8:	9302      	str	r3, [sp, #8]
    12aa:	930d      	str	r3, [sp, #52]	; 0x34
    12ac:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12ae:	ae0a      	add	r6, sp, #40	; 0x28
    12b0:	e063      	b.n	137a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    12b2:	2308      	movs	r3, #8
    12b4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    12b6:	3b07      	subs	r3, #7
    12b8:	9307      	str	r3, [sp, #28]
    12ba:	e77a      	b.n	11b2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    12bc:	6833      	ldr	r3, [r6, #0]
    12be:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    12c0:	68f3      	ldr	r3, [r6, #12]
    12c2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    12c4:	6973      	ldr	r3, [r6, #20]
    12c6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    12c8:	7e33      	ldrb	r3, [r6, #24]
    12ca:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    12cc:	2326      	movs	r3, #38	; 0x26
    12ce:	5cf3      	ldrb	r3, [r6, r3]
    12d0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    12d2:	6873      	ldr	r3, [r6, #4]
    12d4:	4699      	mov	r9, r3
	switch (transfer_mode)
    12d6:	2b00      	cmp	r3, #0
    12d8:	d018      	beq.n	130c <usart_init+0x238>
    12da:	2380      	movs	r3, #128	; 0x80
    12dc:	055b      	lsls	r3, r3, #21
    12de:	4599      	cmp	r9, r3
    12e0:	d001      	beq.n	12e6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    12e2:	2000      	movs	r0, #0
    12e4:	e025      	b.n	1332 <usart_init+0x25e>
			if (!config->use_external_clock) {
    12e6:	2327      	movs	r3, #39	; 0x27
    12e8:	5cf3      	ldrb	r3, [r6, r3]
    12ea:	2b00      	cmp	r3, #0
    12ec:	d000      	beq.n	12f0 <usart_init+0x21c>
    12ee:	e775      	b.n	11dc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    12f0:	6a33      	ldr	r3, [r6, #32]
    12f2:	001f      	movs	r7, r3
    12f4:	b2c0      	uxtb	r0, r0
    12f6:	4b40      	ldr	r3, [pc, #256]	; (13f8 <usart_init+0x324>)
    12f8:	4798      	blx	r3
    12fa:	0001      	movs	r1, r0
    12fc:	220e      	movs	r2, #14
    12fe:	ab06      	add	r3, sp, #24
    1300:	469c      	mov	ip, r3
    1302:	4462      	add	r2, ip
    1304:	0038      	movs	r0, r7
    1306:	4b3d      	ldr	r3, [pc, #244]	; (13fc <usart_init+0x328>)
    1308:	4798      	blx	r3
    130a:	e012      	b.n	1332 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    130c:	2308      	movs	r3, #8
    130e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1310:	2300      	movs	r3, #0
    1312:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1314:	2327      	movs	r3, #39	; 0x27
    1316:	5cf3      	ldrb	r3, [r6, r3]
    1318:	2b00      	cmp	r3, #0
    131a:	d00e      	beq.n	133a <usart_init+0x266>
				status_code =
    131c:	9b06      	ldr	r3, [sp, #24]
    131e:	9300      	str	r3, [sp, #0]
    1320:	9b07      	ldr	r3, [sp, #28]
    1322:	220e      	movs	r2, #14
    1324:	a906      	add	r1, sp, #24
    1326:	468c      	mov	ip, r1
    1328:	4462      	add	r2, ip
    132a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    132c:	6a30      	ldr	r0, [r6, #32]
    132e:	4f34      	ldr	r7, [pc, #208]	; (1400 <usart_init+0x32c>)
    1330:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1332:	2800      	cmp	r0, #0
    1334:	d000      	beq.n	1338 <usart_init+0x264>
    1336:	e6e0      	b.n	10fa <usart_init+0x26>
    1338:	e750      	b.n	11dc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    133a:	6a33      	ldr	r3, [r6, #32]
    133c:	001f      	movs	r7, r3
    133e:	b2c0      	uxtb	r0, r0
    1340:	4b2d      	ldr	r3, [pc, #180]	; (13f8 <usart_init+0x324>)
    1342:	4798      	blx	r3
    1344:	0001      	movs	r1, r0
				status_code =
    1346:	9b06      	ldr	r3, [sp, #24]
    1348:	9300      	str	r3, [sp, #0]
    134a:	9b07      	ldr	r3, [sp, #28]
    134c:	220e      	movs	r2, #14
    134e:	a806      	add	r0, sp, #24
    1350:	4684      	mov	ip, r0
    1352:	4462      	add	r2, ip
    1354:	0038      	movs	r0, r7
    1356:	4f2a      	ldr	r7, [pc, #168]	; (1400 <usart_init+0x32c>)
    1358:	47b8      	blx	r7
    135a:	e7ea      	b.n	1332 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    135c:	7ef3      	ldrb	r3, [r6, #27]
    135e:	2b00      	cmp	r3, #0
    1360:	d100      	bne.n	1364 <usart_init+0x290>
    1362:	e77d      	b.n	1260 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1364:	2380      	movs	r3, #128	; 0x80
    1366:	04db      	lsls	r3, r3, #19
    1368:	431f      	orrs	r7, r3
    136a:	e779      	b.n	1260 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    136c:	0020      	movs	r0, r4
    136e:	4b25      	ldr	r3, [pc, #148]	; (1404 <usart_init+0x330>)
    1370:	4798      	blx	r3
    1372:	e007      	b.n	1384 <usart_init+0x2b0>
    1374:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1376:	2f04      	cmp	r7, #4
    1378:	d00d      	beq.n	1396 <usart_init+0x2c2>
    137a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    137c:	00bb      	lsls	r3, r7, #2
    137e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1380:	2800      	cmp	r0, #0
    1382:	d0f3      	beq.n	136c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1384:	1c43      	adds	r3, r0, #1
    1386:	d0f5      	beq.n	1374 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1388:	a90e      	add	r1, sp, #56	; 0x38
    138a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    138c:	0c00      	lsrs	r0, r0, #16
    138e:	b2c0      	uxtb	r0, r0
    1390:	4b1d      	ldr	r3, [pc, #116]	; (1408 <usart_init+0x334>)
    1392:	4798      	blx	r3
    1394:	e7ee      	b.n	1374 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1396:	2300      	movs	r3, #0
    1398:	60eb      	str	r3, [r5, #12]
    139a:	612b      	str	r3, [r5, #16]
    139c:	616b      	str	r3, [r5, #20]
    139e:	61ab      	str	r3, [r5, #24]
    13a0:	61eb      	str	r3, [r5, #28]
    13a2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    13a4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    13a6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    13a8:	2200      	movs	r2, #0
    13aa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    13ac:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    13ae:	3330      	adds	r3, #48	; 0x30
    13b0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    13b2:	3301      	adds	r3, #1
    13b4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    13b6:	3301      	adds	r3, #1
    13b8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    13ba:	3301      	adds	r3, #1
    13bc:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13be:	6828      	ldr	r0, [r5, #0]
    13c0:	4b07      	ldr	r3, [pc, #28]	; (13e0 <usart_init+0x30c>)
    13c2:	4798      	blx	r3
    13c4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    13c6:	4911      	ldr	r1, [pc, #68]	; (140c <usart_init+0x338>)
    13c8:	4b11      	ldr	r3, [pc, #68]	; (1410 <usart_init+0x33c>)
    13ca:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    13cc:	00a4      	lsls	r4, r4, #2
    13ce:	4b11      	ldr	r3, [pc, #68]	; (1414 <usart_init+0x340>)
    13d0:	50e5      	str	r5, [r4, r3]
	return status_code;
    13d2:	2000      	movs	r0, #0
    13d4:	e691      	b.n	10fa <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13d6:	2310      	movs	r3, #16
    13d8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13da:	2300      	movs	r3, #0
    13dc:	9307      	str	r3, [sp, #28]
    13de:	e6e8      	b.n	11b2 <usart_init+0xde>
    13e0:	00000c15 	.word	0x00000c15
    13e4:	40000400 	.word	0x40000400
    13e8:	00001d15 	.word	0x00001d15
    13ec:	00001c89 	.word	0x00001c89
    13f0:	00000a4d 	.word	0x00000a4d
    13f4:	41002000 	.word	0x41002000
    13f8:	00001d31 	.word	0x00001d31
    13fc:	0000098f 	.word	0x0000098f
    1400:	000009b9 	.word	0x000009b9
    1404:	00000a99 	.word	0x00000a99
    1408:	00001e0d 	.word	0x00001e0d
    140c:	0000154d 	.word	0x0000154d
    1410:	00000c51 	.word	0x00000c51
    1414:	200003dc 	.word	0x200003dc

00001418 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1418:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    141a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    141c:	2a00      	cmp	r2, #0
    141e:	d101      	bne.n	1424 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1420:	0018      	movs	r0, r3
    1422:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1424:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1426:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1428:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    142a:	2a00      	cmp	r2, #0
    142c:	d1f8      	bne.n	1420 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    142e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1430:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1432:	2a00      	cmp	r2, #0
    1434:	d1fc      	bne.n	1430 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1436:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1438:	2102      	movs	r1, #2
    143a:	7e1a      	ldrb	r2, [r3, #24]
    143c:	420a      	tst	r2, r1
    143e:	d0fc      	beq.n	143a <usart_write_wait+0x22>
	return STATUS_OK;
    1440:	2300      	movs	r3, #0
    1442:	e7ed      	b.n	1420 <usart_write_wait+0x8>

00001444 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1444:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1446:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1448:	2a00      	cmp	r2, #0
    144a:	d101      	bne.n	1450 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    144c:	0018      	movs	r0, r3
    144e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1450:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1452:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1454:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1456:	2a00      	cmp	r2, #0
    1458:	d1f8      	bne.n	144c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    145a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    145c:	7e10      	ldrb	r0, [r2, #24]
    145e:	0740      	lsls	r0, r0, #29
    1460:	d5f4      	bpl.n	144c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1462:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1464:	2b00      	cmp	r3, #0
    1466:	d1fc      	bne.n	1462 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1468:	8b53      	ldrh	r3, [r2, #26]
    146a:	b2db      	uxtb	r3, r3
	if (error_code) {
    146c:	0698      	lsls	r0, r3, #26
    146e:	d01d      	beq.n	14ac <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1470:	0798      	lsls	r0, r3, #30
    1472:	d503      	bpl.n	147c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1474:	2302      	movs	r3, #2
    1476:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1478:	3318      	adds	r3, #24
    147a:	e7e7      	b.n	144c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    147c:	0758      	lsls	r0, r3, #29
    147e:	d503      	bpl.n	1488 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1480:	2304      	movs	r3, #4
    1482:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1484:	331a      	adds	r3, #26
    1486:	e7e1      	b.n	144c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1488:	07d8      	lsls	r0, r3, #31
    148a:	d503      	bpl.n	1494 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    148c:	2301      	movs	r3, #1
    148e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1490:	3312      	adds	r3, #18
    1492:	e7db      	b.n	144c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1494:	06d8      	lsls	r0, r3, #27
    1496:	d503      	bpl.n	14a0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1498:	2310      	movs	r3, #16
    149a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    149c:	3332      	adds	r3, #50	; 0x32
    149e:	e7d5      	b.n	144c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    14a0:	069b      	lsls	r3, r3, #26
    14a2:	d503      	bpl.n	14ac <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    14a4:	2320      	movs	r3, #32
    14a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    14a8:	3321      	adds	r3, #33	; 0x21
    14aa:	e7cf      	b.n	144c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    14ac:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    14ae:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    14b0:	2300      	movs	r3, #0
    14b2:	e7cb      	b.n	144c <usart_read_wait+0x8>

000014b4 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    14b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14b6:	46d6      	mov	lr, sl
    14b8:	b500      	push	{lr}
    14ba:	b084      	sub	sp, #16
    14bc:	0004      	movs	r4, r0
    14be:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    14c0:	2017      	movs	r0, #23
	if (length == 0) {
    14c2:	2a00      	cmp	r2, #0
    14c4:	d103      	bne.n	14ce <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    14c6:	b004      	add	sp, #16
    14c8:	bc04      	pop	{r2}
    14ca:	4692      	mov	sl, r2
    14cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    14ce:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    14d0:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    14d2:	2b00      	cmp	r3, #0
    14d4:	d0f7      	beq.n	14c6 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    14d6:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    14d8:	3a01      	subs	r2, #1
    14da:	b293      	uxth	r3, r2
    14dc:	469a      	mov	sl, r3
    14de:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    14e0:	2704      	movs	r7, #4
    14e2:	e019      	b.n	1518 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    14e4:	2300      	movs	r3, #0
    14e6:	aa02      	add	r2, sp, #8
    14e8:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    14ea:	1d91      	adds	r1, r2, #6
    14ec:	0020      	movs	r0, r4
    14ee:	4b15      	ldr	r3, [pc, #84]	; (1544 <usart_read_buffer_wait+0x90>)
    14f0:	4798      	blx	r3
		if (retval != STATUS_OK) {
    14f2:	2800      	cmp	r0, #0
    14f4:	d1e7      	bne.n	14c6 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    14f6:	1c69      	adds	r1, r5, #1
    14f8:	b289      	uxth	r1, r1
    14fa:	ab02      	add	r3, sp, #8
    14fc:	88db      	ldrh	r3, [r3, #6]
    14fe:	9a01      	ldr	r2, [sp, #4]
    1500:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1502:	7962      	ldrb	r2, [r4, #5]
    1504:	2a01      	cmp	r2, #1
    1506:	d014      	beq.n	1532 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    1508:	000d      	movs	r5, r1
	while (length--) {
    150a:	4653      	mov	r3, sl
    150c:	3b01      	subs	r3, #1
    150e:	b29b      	uxth	r3, r3
    1510:	469a      	mov	sl, r3
    1512:	4b0d      	ldr	r3, [pc, #52]	; (1548 <usart_read_buffer_wait+0x94>)
    1514:	459a      	cmp	sl, r3
    1516:	d0d6      	beq.n	14c6 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1518:	7e33      	ldrb	r3, [r6, #24]
    151a:	423b      	tst	r3, r7
    151c:	d1e2      	bne.n	14e4 <usart_read_buffer_wait+0x30>
    151e:	4b0a      	ldr	r3, [pc, #40]	; (1548 <usart_read_buffer_wait+0x94>)
    1520:	7e32      	ldrb	r2, [r6, #24]
    1522:	423a      	tst	r2, r7
    1524:	d1de      	bne.n	14e4 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    1526:	2b01      	cmp	r3, #1
    1528:	d009      	beq.n	153e <usart_read_buffer_wait+0x8a>
    152a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    152c:	2b00      	cmp	r3, #0
    152e:	d1f7      	bne.n	1520 <usart_read_buffer_wait+0x6c>
    1530:	e7d8      	b.n	14e4 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    1532:	3502      	adds	r5, #2
    1534:	b2ad      	uxth	r5, r5
    1536:	0a1b      	lsrs	r3, r3, #8
    1538:	9a01      	ldr	r2, [sp, #4]
    153a:	5453      	strb	r3, [r2, r1]
    153c:	e7e5      	b.n	150a <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    153e:	2012      	movs	r0, #18
    1540:	e7c1      	b.n	14c6 <usart_read_buffer_wait+0x12>
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	00001445 	.word	0x00001445
    1548:	0000ffff 	.word	0x0000ffff

0000154c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    154e:	0080      	lsls	r0, r0, #2
    1550:	4b62      	ldr	r3, [pc, #392]	; (16dc <_usart_interrupt_handler+0x190>)
    1552:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1554:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1556:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1558:	2b00      	cmp	r3, #0
    155a:	d1fc      	bne.n	1556 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    155c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    155e:	7da6      	ldrb	r6, [r4, #22]
    1560:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1562:	2330      	movs	r3, #48	; 0x30
    1564:	5ceb      	ldrb	r3, [r5, r3]
    1566:	2231      	movs	r2, #49	; 0x31
    1568:	5caf      	ldrb	r7, [r5, r2]
    156a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    156c:	07f3      	lsls	r3, r6, #31
    156e:	d522      	bpl.n	15b6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1570:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1572:	b29b      	uxth	r3, r3
    1574:	2b00      	cmp	r3, #0
    1576:	d01c      	beq.n	15b2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1578:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    157a:	7813      	ldrb	r3, [r2, #0]
    157c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    157e:	1c51      	adds	r1, r2, #1
    1580:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1582:	7969      	ldrb	r1, [r5, #5]
    1584:	2901      	cmp	r1, #1
    1586:	d00e      	beq.n	15a6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1588:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    158a:	05db      	lsls	r3, r3, #23
    158c:	0ddb      	lsrs	r3, r3, #23
    158e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1590:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1592:	3b01      	subs	r3, #1
    1594:	b29b      	uxth	r3, r3
    1596:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1598:	2b00      	cmp	r3, #0
    159a:	d10c      	bne.n	15b6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    159c:	3301      	adds	r3, #1
    159e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    15a0:	3301      	adds	r3, #1
    15a2:	75a3      	strb	r3, [r4, #22]
    15a4:	e007      	b.n	15b6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    15a6:	7851      	ldrb	r1, [r2, #1]
    15a8:	0209      	lsls	r1, r1, #8
    15aa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    15ac:	3202      	adds	r2, #2
    15ae:	62aa      	str	r2, [r5, #40]	; 0x28
    15b0:	e7eb      	b.n	158a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    15b2:	2301      	movs	r3, #1
    15b4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    15b6:	07b3      	lsls	r3, r6, #30
    15b8:	d506      	bpl.n	15c8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    15ba:	2302      	movs	r3, #2
    15bc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    15be:	2200      	movs	r2, #0
    15c0:	3331      	adds	r3, #49	; 0x31
    15c2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    15c4:	07fb      	lsls	r3, r7, #31
    15c6:	d41a      	bmi.n	15fe <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    15c8:	0773      	lsls	r3, r6, #29
    15ca:	d565      	bpl.n	1698 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    15cc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    15ce:	b29b      	uxth	r3, r3
    15d0:	2b00      	cmp	r3, #0
    15d2:	d05f      	beq.n	1694 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15d4:	8b63      	ldrh	r3, [r4, #26]
    15d6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    15d8:	071a      	lsls	r2, r3, #28
    15da:	d414      	bmi.n	1606 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15dc:	223f      	movs	r2, #63	; 0x3f
    15de:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    15e0:	2b00      	cmp	r3, #0
    15e2:	d034      	beq.n	164e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    15e4:	079a      	lsls	r2, r3, #30
    15e6:	d511      	bpl.n	160c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    15e8:	221a      	movs	r2, #26
    15ea:	2332      	movs	r3, #50	; 0x32
    15ec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    15ee:	3b30      	subs	r3, #48	; 0x30
    15f0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    15f2:	077b      	lsls	r3, r7, #29
    15f4:	d550      	bpl.n	1698 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    15f6:	0028      	movs	r0, r5
    15f8:	696b      	ldr	r3, [r5, #20]
    15fa:	4798      	blx	r3
    15fc:	e04c      	b.n	1698 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    15fe:	0028      	movs	r0, r5
    1600:	68eb      	ldr	r3, [r5, #12]
    1602:	4798      	blx	r3
    1604:	e7e0      	b.n	15c8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1606:	2237      	movs	r2, #55	; 0x37
    1608:	4013      	ands	r3, r2
    160a:	e7e9      	b.n	15e0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    160c:	075a      	lsls	r2, r3, #29
    160e:	d505      	bpl.n	161c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1610:	221e      	movs	r2, #30
    1612:	2332      	movs	r3, #50	; 0x32
    1614:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1616:	3b2e      	subs	r3, #46	; 0x2e
    1618:	8363      	strh	r3, [r4, #26]
    161a:	e7ea      	b.n	15f2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    161c:	07da      	lsls	r2, r3, #31
    161e:	d505      	bpl.n	162c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1620:	2213      	movs	r2, #19
    1622:	2332      	movs	r3, #50	; 0x32
    1624:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1626:	3b31      	subs	r3, #49	; 0x31
    1628:	8363      	strh	r3, [r4, #26]
    162a:	e7e2      	b.n	15f2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    162c:	06da      	lsls	r2, r3, #27
    162e:	d505      	bpl.n	163c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1630:	2242      	movs	r2, #66	; 0x42
    1632:	2332      	movs	r3, #50	; 0x32
    1634:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1636:	3b22      	subs	r3, #34	; 0x22
    1638:	8363      	strh	r3, [r4, #26]
    163a:	e7da      	b.n	15f2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    163c:	2220      	movs	r2, #32
    163e:	421a      	tst	r2, r3
    1640:	d0d7      	beq.n	15f2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1642:	3221      	adds	r2, #33	; 0x21
    1644:	2332      	movs	r3, #50	; 0x32
    1646:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1648:	3b12      	subs	r3, #18
    164a:	8363      	strh	r3, [r4, #26]
    164c:	e7d1      	b.n	15f2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    164e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1650:	05db      	lsls	r3, r3, #23
    1652:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1654:	b2da      	uxtb	r2, r3
    1656:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1658:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    165a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    165c:	1c51      	adds	r1, r2, #1
    165e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1660:	7969      	ldrb	r1, [r5, #5]
    1662:	2901      	cmp	r1, #1
    1664:	d010      	beq.n	1688 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1666:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1668:	3b01      	subs	r3, #1
    166a:	b29b      	uxth	r3, r3
    166c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    166e:	2b00      	cmp	r3, #0
    1670:	d112      	bne.n	1698 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1672:	3304      	adds	r3, #4
    1674:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1676:	2200      	movs	r2, #0
    1678:	332e      	adds	r3, #46	; 0x2e
    167a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    167c:	07bb      	lsls	r3, r7, #30
    167e:	d50b      	bpl.n	1698 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1680:	0028      	movs	r0, r5
    1682:	692b      	ldr	r3, [r5, #16]
    1684:	4798      	blx	r3
    1686:	e007      	b.n	1698 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1688:	0a1b      	lsrs	r3, r3, #8
    168a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    168c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    168e:	3301      	adds	r3, #1
    1690:	626b      	str	r3, [r5, #36]	; 0x24
    1692:	e7e8      	b.n	1666 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1694:	2304      	movs	r3, #4
    1696:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1698:	06f3      	lsls	r3, r6, #27
    169a:	d504      	bpl.n	16a6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    169c:	2310      	movs	r3, #16
    169e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    16a0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    16a2:	06fb      	lsls	r3, r7, #27
    16a4:	d40e      	bmi.n	16c4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    16a6:	06b3      	lsls	r3, r6, #26
    16a8:	d504      	bpl.n	16b4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    16aa:	2320      	movs	r3, #32
    16ac:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    16ae:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    16b0:	073b      	lsls	r3, r7, #28
    16b2:	d40b      	bmi.n	16cc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    16b4:	0733      	lsls	r3, r6, #28
    16b6:	d504      	bpl.n	16c2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    16b8:	2308      	movs	r3, #8
    16ba:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    16bc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    16be:	06bb      	lsls	r3, r7, #26
    16c0:	d408      	bmi.n	16d4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    16c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    16c4:	0028      	movs	r0, r5
    16c6:	69eb      	ldr	r3, [r5, #28]
    16c8:	4798      	blx	r3
    16ca:	e7ec      	b.n	16a6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    16cc:	0028      	movs	r0, r5
    16ce:	69ab      	ldr	r3, [r5, #24]
    16d0:	4798      	blx	r3
    16d2:	e7ef      	b.n	16b4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    16d4:	6a2b      	ldr	r3, [r5, #32]
    16d6:	0028      	movs	r0, r5
    16d8:	4798      	blx	r3
}
    16da:	e7f2      	b.n	16c2 <_usart_interrupt_handler+0x176>
    16dc:	200003dc 	.word	0x200003dc

000016e0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    16e0:	b510      	push	{r4, lr}
	switch (clock_source) {
    16e2:	2808      	cmp	r0, #8
    16e4:	d803      	bhi.n	16ee <system_clock_source_get_hz+0xe>
    16e6:	0080      	lsls	r0, r0, #2
    16e8:	4b1c      	ldr	r3, [pc, #112]	; (175c <system_clock_source_get_hz+0x7c>)
    16ea:	581b      	ldr	r3, [r3, r0]
    16ec:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    16ee:	2000      	movs	r0, #0
    16f0:	e032      	b.n	1758 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    16f2:	4b1b      	ldr	r3, [pc, #108]	; (1760 <system_clock_source_get_hz+0x80>)
    16f4:	6918      	ldr	r0, [r3, #16]
    16f6:	e02f      	b.n	1758 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    16f8:	4b1a      	ldr	r3, [pc, #104]	; (1764 <system_clock_source_get_hz+0x84>)
    16fa:	6a1b      	ldr	r3, [r3, #32]
    16fc:	059b      	lsls	r3, r3, #22
    16fe:	0f9b      	lsrs	r3, r3, #30
    1700:	4819      	ldr	r0, [pc, #100]	; (1768 <system_clock_source_get_hz+0x88>)
    1702:	40d8      	lsrs	r0, r3
    1704:	e028      	b.n	1758 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1706:	4b16      	ldr	r3, [pc, #88]	; (1760 <system_clock_source_get_hz+0x80>)
    1708:	6958      	ldr	r0, [r3, #20]
    170a:	e025      	b.n	1758 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    170c:	4b14      	ldr	r3, [pc, #80]	; (1760 <system_clock_source_get_hz+0x80>)
    170e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1710:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1712:	079b      	lsls	r3, r3, #30
    1714:	d520      	bpl.n	1758 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1716:	4913      	ldr	r1, [pc, #76]	; (1764 <system_clock_source_get_hz+0x84>)
    1718:	2210      	movs	r2, #16
    171a:	68cb      	ldr	r3, [r1, #12]
    171c:	421a      	tst	r2, r3
    171e:	d0fc      	beq.n	171a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1720:	4b0f      	ldr	r3, [pc, #60]	; (1760 <system_clock_source_get_hz+0x80>)
    1722:	681a      	ldr	r2, [r3, #0]
    1724:	2324      	movs	r3, #36	; 0x24
    1726:	4013      	ands	r3, r2
    1728:	2b04      	cmp	r3, #4
    172a:	d001      	beq.n	1730 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    172c:	480f      	ldr	r0, [pc, #60]	; (176c <system_clock_source_get_hz+0x8c>)
    172e:	e013      	b.n	1758 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1730:	2000      	movs	r0, #0
    1732:	4b0f      	ldr	r3, [pc, #60]	; (1770 <system_clock_source_get_hz+0x90>)
    1734:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1736:	4b0a      	ldr	r3, [pc, #40]	; (1760 <system_clock_source_get_hz+0x80>)
    1738:	689b      	ldr	r3, [r3, #8]
    173a:	041b      	lsls	r3, r3, #16
    173c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    173e:	4358      	muls	r0, r3
    1740:	e00a      	b.n	1758 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1742:	2350      	movs	r3, #80	; 0x50
    1744:	4a07      	ldr	r2, [pc, #28]	; (1764 <system_clock_source_get_hz+0x84>)
    1746:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1748:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    174a:	075b      	lsls	r3, r3, #29
    174c:	d504      	bpl.n	1758 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    174e:	4b04      	ldr	r3, [pc, #16]	; (1760 <system_clock_source_get_hz+0x80>)
    1750:	68d8      	ldr	r0, [r3, #12]
    1752:	e001      	b.n	1758 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1754:	2080      	movs	r0, #128	; 0x80
    1756:	0200      	lsls	r0, r0, #8
	}
}
    1758:	bd10      	pop	{r4, pc}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	00008a50 	.word	0x00008a50
    1760:	20000100 	.word	0x20000100
    1764:	40000800 	.word	0x40000800
    1768:	007a1200 	.word	0x007a1200
    176c:	02dc6c00 	.word	0x02dc6c00
    1770:	00001d31 	.word	0x00001d31

00001774 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1774:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1776:	490c      	ldr	r1, [pc, #48]	; (17a8 <system_clock_source_osc8m_set_config+0x34>)
    1778:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    177a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    177c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    177e:	7840      	ldrb	r0, [r0, #1]
    1780:	2201      	movs	r2, #1
    1782:	4010      	ands	r0, r2
    1784:	0180      	lsls	r0, r0, #6
    1786:	2640      	movs	r6, #64	; 0x40
    1788:	43b3      	bics	r3, r6
    178a:	4303      	orrs	r3, r0
    178c:	402a      	ands	r2, r5
    178e:	01d2      	lsls	r2, r2, #7
    1790:	2080      	movs	r0, #128	; 0x80
    1792:	4383      	bics	r3, r0
    1794:	4313      	orrs	r3, r2
    1796:	2203      	movs	r2, #3
    1798:	4022      	ands	r2, r4
    179a:	0212      	lsls	r2, r2, #8
    179c:	4803      	ldr	r0, [pc, #12]	; (17ac <system_clock_source_osc8m_set_config+0x38>)
    179e:	4003      	ands	r3, r0
    17a0:	4313      	orrs	r3, r2
    17a2:	620b      	str	r3, [r1, #32]
}
    17a4:	bd70      	pop	{r4, r5, r6, pc}
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	40000800 	.word	0x40000800
    17ac:	fffffcff 	.word	0xfffffcff

000017b0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    17b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17b2:	46ce      	mov	lr, r9
    17b4:	4647      	mov	r7, r8
    17b6:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    17b8:	4b19      	ldr	r3, [pc, #100]	; (1820 <system_clock_source_osc32k_set_config+0x70>)
    17ba:	4699      	mov	r9, r3
    17bc:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    17be:	7841      	ldrb	r1, [r0, #1]
    17c0:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    17c2:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    17c4:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    17c6:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    17c8:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    17ca:	7880      	ldrb	r0, [r0, #2]
    17cc:	2101      	movs	r1, #1
    17ce:	4008      	ands	r0, r1
    17d0:	0080      	lsls	r0, r0, #2
    17d2:	2204      	movs	r2, #4
    17d4:	4393      	bics	r3, r2
    17d6:	4303      	orrs	r3, r0
    17d8:	4660      	mov	r0, ip
    17da:	4008      	ands	r0, r1
    17dc:	00c0      	lsls	r0, r0, #3
    17de:	3204      	adds	r2, #4
    17e0:	4393      	bics	r3, r2
    17e2:	4303      	orrs	r3, r0
    17e4:	0038      	movs	r0, r7
    17e6:	4008      	ands	r0, r1
    17e8:	0180      	lsls	r0, r0, #6
    17ea:	2740      	movs	r7, #64	; 0x40
    17ec:	43bb      	bics	r3, r7
    17ee:	4303      	orrs	r3, r0
    17f0:	0030      	movs	r0, r6
    17f2:	4008      	ands	r0, r1
    17f4:	01c0      	lsls	r0, r0, #7
    17f6:	2680      	movs	r6, #128	; 0x80
    17f8:	43b3      	bics	r3, r6
    17fa:	4303      	orrs	r3, r0
    17fc:	2007      	movs	r0, #7
    17fe:	4005      	ands	r5, r0
    1800:	022d      	lsls	r5, r5, #8
    1802:	4808      	ldr	r0, [pc, #32]	; (1824 <system_clock_source_osc32k_set_config+0x74>)
    1804:	4003      	ands	r3, r0
    1806:	432b      	orrs	r3, r5
    1808:	4021      	ands	r1, r4
    180a:	0309      	lsls	r1, r1, #12
    180c:	4806      	ldr	r0, [pc, #24]	; (1828 <system_clock_source_osc32k_set_config+0x78>)
    180e:	4003      	ands	r3, r0
    1810:	430b      	orrs	r3, r1
    1812:	464a      	mov	r2, r9
    1814:	6193      	str	r3, [r2, #24]
}
    1816:	bc0c      	pop	{r2, r3}
    1818:	4690      	mov	r8, r2
    181a:	4699      	mov	r9, r3
    181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	40000800 	.word	0x40000800
    1824:	fffff8ff 	.word	0xfffff8ff
    1828:	ffffefff 	.word	0xffffefff

0000182c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    182c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    182e:	7a03      	ldrb	r3, [r0, #8]
    1830:	069b      	lsls	r3, r3, #26
    1832:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1834:	8942      	ldrh	r2, [r0, #10]
    1836:	0592      	lsls	r2, r2, #22
    1838:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    183a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    183c:	4918      	ldr	r1, [pc, #96]	; (18a0 <system_clock_source_dfll_set_config+0x74>)
    183e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1840:	7983      	ldrb	r3, [r0, #6]
    1842:	79c2      	ldrb	r2, [r0, #7]
    1844:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1846:	8842      	ldrh	r2, [r0, #2]
    1848:	8884      	ldrh	r4, [r0, #4]
    184a:	4322      	orrs	r2, r4
    184c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    184e:	7842      	ldrb	r2, [r0, #1]
    1850:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1852:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1854:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1856:	7803      	ldrb	r3, [r0, #0]
    1858:	2b04      	cmp	r3, #4
    185a:	d011      	beq.n	1880 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    185c:	2b20      	cmp	r3, #32
    185e:	d10e      	bne.n	187e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1860:	7b03      	ldrb	r3, [r0, #12]
    1862:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1864:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1866:	4313      	orrs	r3, r2
    1868:	89c2      	ldrh	r2, [r0, #14]
    186a:	0412      	lsls	r2, r2, #16
    186c:	490d      	ldr	r1, [pc, #52]	; (18a4 <system_clock_source_dfll_set_config+0x78>)
    186e:	400a      	ands	r2, r1
    1870:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1872:	4a0b      	ldr	r2, [pc, #44]	; (18a0 <system_clock_source_dfll_set_config+0x74>)
    1874:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1876:	6811      	ldr	r1, [r2, #0]
    1878:	4b0b      	ldr	r3, [pc, #44]	; (18a8 <system_clock_source_dfll_set_config+0x7c>)
    187a:	430b      	orrs	r3, r1
    187c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    187e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1880:	7b03      	ldrb	r3, [r0, #12]
    1882:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1884:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1886:	4313      	orrs	r3, r2
    1888:	89c2      	ldrh	r2, [r0, #14]
    188a:	0412      	lsls	r2, r2, #16
    188c:	4905      	ldr	r1, [pc, #20]	; (18a4 <system_clock_source_dfll_set_config+0x78>)
    188e:	400a      	ands	r2, r1
    1890:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1892:	4a03      	ldr	r2, [pc, #12]	; (18a0 <system_clock_source_dfll_set_config+0x74>)
    1894:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1896:	6813      	ldr	r3, [r2, #0]
    1898:	2104      	movs	r1, #4
    189a:	430b      	orrs	r3, r1
    189c:	6013      	str	r3, [r2, #0]
    189e:	e7ee      	b.n	187e <system_clock_source_dfll_set_config+0x52>
    18a0:	20000100 	.word	0x20000100
    18a4:	03ff0000 	.word	0x03ff0000
    18a8:	00000424 	.word	0x00000424

000018ac <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    18ac:	2808      	cmp	r0, #8
    18ae:	d803      	bhi.n	18b8 <system_clock_source_enable+0xc>
    18b0:	0080      	lsls	r0, r0, #2
    18b2:	4b25      	ldr	r3, [pc, #148]	; (1948 <system_clock_source_enable+0x9c>)
    18b4:	581b      	ldr	r3, [r3, r0]
    18b6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    18b8:	2017      	movs	r0, #23
    18ba:	e044      	b.n	1946 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    18bc:	4a23      	ldr	r2, [pc, #140]	; (194c <system_clock_source_enable+0xa0>)
    18be:	6a13      	ldr	r3, [r2, #32]
    18c0:	2102      	movs	r1, #2
    18c2:	430b      	orrs	r3, r1
    18c4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    18c6:	2000      	movs	r0, #0
    18c8:	e03d      	b.n	1946 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18ca:	4a20      	ldr	r2, [pc, #128]	; (194c <system_clock_source_enable+0xa0>)
    18cc:	6993      	ldr	r3, [r2, #24]
    18ce:	2102      	movs	r1, #2
    18d0:	430b      	orrs	r3, r1
    18d2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    18d4:	2000      	movs	r0, #0
		break;
    18d6:	e036      	b.n	1946 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    18d8:	4a1c      	ldr	r2, [pc, #112]	; (194c <system_clock_source_enable+0xa0>)
    18da:	8a13      	ldrh	r3, [r2, #16]
    18dc:	2102      	movs	r1, #2
    18de:	430b      	orrs	r3, r1
    18e0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    18e2:	2000      	movs	r0, #0
		break;
    18e4:	e02f      	b.n	1946 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    18e6:	4a19      	ldr	r2, [pc, #100]	; (194c <system_clock_source_enable+0xa0>)
    18e8:	8a93      	ldrh	r3, [r2, #20]
    18ea:	2102      	movs	r1, #2
    18ec:	430b      	orrs	r3, r1
    18ee:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    18f0:	2000      	movs	r0, #0
		break;
    18f2:	e028      	b.n	1946 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    18f4:	4916      	ldr	r1, [pc, #88]	; (1950 <system_clock_source_enable+0xa4>)
    18f6:	680b      	ldr	r3, [r1, #0]
    18f8:	2202      	movs	r2, #2
    18fa:	4313      	orrs	r3, r2
    18fc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    18fe:	4b13      	ldr	r3, [pc, #76]	; (194c <system_clock_source_enable+0xa0>)
    1900:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1902:	0019      	movs	r1, r3
    1904:	320e      	adds	r2, #14
    1906:	68cb      	ldr	r3, [r1, #12]
    1908:	421a      	tst	r2, r3
    190a:	d0fc      	beq.n	1906 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    190c:	4a10      	ldr	r2, [pc, #64]	; (1950 <system_clock_source_enable+0xa4>)
    190e:	6891      	ldr	r1, [r2, #8]
    1910:	4b0e      	ldr	r3, [pc, #56]	; (194c <system_clock_source_enable+0xa0>)
    1912:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1914:	6852      	ldr	r2, [r2, #4]
    1916:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1918:	2200      	movs	r2, #0
    191a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    191c:	0019      	movs	r1, r3
    191e:	3210      	adds	r2, #16
    1920:	68cb      	ldr	r3, [r1, #12]
    1922:	421a      	tst	r2, r3
    1924:	d0fc      	beq.n	1920 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1926:	4b0a      	ldr	r3, [pc, #40]	; (1950 <system_clock_source_enable+0xa4>)
    1928:	681b      	ldr	r3, [r3, #0]
    192a:	b29b      	uxth	r3, r3
    192c:	4a07      	ldr	r2, [pc, #28]	; (194c <system_clock_source_enable+0xa0>)
    192e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1930:	2000      	movs	r0, #0
    1932:	e008      	b.n	1946 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1934:	4905      	ldr	r1, [pc, #20]	; (194c <system_clock_source_enable+0xa0>)
    1936:	2244      	movs	r2, #68	; 0x44
    1938:	5c8b      	ldrb	r3, [r1, r2]
    193a:	2002      	movs	r0, #2
    193c:	4303      	orrs	r3, r0
    193e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1940:	2000      	movs	r0, #0
		break;
    1942:	e000      	b.n	1946 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1944:	2000      	movs	r0, #0
}
    1946:	4770      	bx	lr
    1948:	00008a74 	.word	0x00008a74
    194c:	40000800 	.word	0x40000800
    1950:	20000100 	.word	0x20000100

00001954 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1954:	b5f0      	push	{r4, r5, r6, r7, lr}
    1956:	46ce      	mov	lr, r9
    1958:	4647      	mov	r7, r8
    195a:	b580      	push	{r7, lr}
    195c:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    195e:	22c2      	movs	r2, #194	; 0xc2
    1960:	00d2      	lsls	r2, r2, #3
    1962:	4b50      	ldr	r3, [pc, #320]	; (1aa4 <system_clock_init+0x150>)
    1964:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1966:	4a50      	ldr	r2, [pc, #320]	; (1aa8 <system_clock_init+0x154>)
    1968:	6853      	ldr	r3, [r2, #4]
    196a:	211e      	movs	r1, #30
    196c:	438b      	bics	r3, r1
    196e:	391a      	subs	r1, #26
    1970:	430b      	orrs	r3, r1
    1972:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    1974:	2203      	movs	r2, #3
    1976:	ab01      	add	r3, sp, #4
    1978:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    197a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    197c:	4d4b      	ldr	r5, [pc, #300]	; (1aac <system_clock_init+0x158>)
    197e:	b2e0      	uxtb	r0, r4
    1980:	a901      	add	r1, sp, #4
    1982:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1984:	3401      	adds	r4, #1
    1986:	2c25      	cmp	r4, #37	; 0x25
    1988:	d1f9      	bne.n	197e <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    198a:	4d49      	ldr	r5, [pc, #292]	; (1ab0 <system_clock_init+0x15c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    198c:	682b      	ldr	r3, [r5, #0]
    198e:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1990:	4944      	ldr	r1, [pc, #272]	; (1aa4 <system_clock_init+0x150>)
    1992:	698a      	ldr	r2, [r1, #24]
    1994:	0e5b      	lsrs	r3, r3, #25
    1996:	041b      	lsls	r3, r3, #16
    1998:	4846      	ldr	r0, [pc, #280]	; (1ab4 <system_clock_init+0x160>)
    199a:	4002      	ands	r2, r0
    199c:	4313      	orrs	r3, r2
    199e:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    19a0:	a80a      	add	r0, sp, #40	; 0x28
    19a2:	2301      	movs	r3, #1
    19a4:	7083      	strb	r3, [r0, #2]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    19a6:	2207      	movs	r2, #7
    19a8:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    19aa:	2400      	movs	r4, #0
    19ac:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    19ae:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    19b0:	7104      	strb	r4, [r0, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    19b2:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    19b4:	4b40      	ldr	r3, [pc, #256]	; (1ab8 <system_clock_init+0x164>)
    19b6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    19b8:	2004      	movs	r0, #4
    19ba:	4b40      	ldr	r3, [pc, #256]	; (1abc <system_clock_init+0x168>)
    19bc:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    19be:	ab05      	add	r3, sp, #20
    19c0:	2200      	movs	r2, #0
    19c2:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    19c4:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    19c6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    19c8:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    19ca:	213f      	movs	r1, #63	; 0x3f
    19cc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    19ce:	393b      	subs	r1, #59	; 0x3b
    19d0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    19d2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    19d4:	682b      	ldr	r3, [r5, #0]
    19d6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    19d8:	2b3f      	cmp	r3, #63	; 0x3f
    19da:	d060      	beq.n	1a9e <system_clock_init+0x14a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    19dc:	a805      	add	r0, sp, #20
    19de:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    19e0:	2304      	movs	r3, #4
    19e2:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    19e4:	3303      	adds	r3, #3
    19e6:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    19e8:	3338      	adds	r3, #56	; 0x38
    19ea:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    19ec:	4b34      	ldr	r3, [pc, #208]	; (1ac0 <system_clock_init+0x16c>)
    19ee:	4798      	blx	r3
	config->run_in_standby  = false;
    19f0:	a804      	add	r0, sp, #16
    19f2:	2500      	movs	r5, #0
    19f4:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    19f6:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    19f8:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    19fa:	4b32      	ldr	r3, [pc, #200]	; (1ac4 <system_clock_init+0x170>)
    19fc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19fe:	2006      	movs	r0, #6
    1a00:	4f2e      	ldr	r7, [pc, #184]	; (1abc <system_clock_init+0x168>)
    1a02:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1a04:	4b30      	ldr	r3, [pc, #192]	; (1ac8 <system_clock_init+0x174>)
    1a06:	4798      	blx	r3
	config->division_factor    = 1;
    1a08:	ac01      	add	r4, sp, #4
    1a0a:	2601      	movs	r6, #1
    1a0c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1a0e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1a10:	2306      	movs	r3, #6
    1a12:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1a14:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1a16:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1a18:	0021      	movs	r1, r4
    1a1a:	2001      	movs	r0, #1
    1a1c:	4b2b      	ldr	r3, [pc, #172]	; (1acc <system_clock_init+0x178>)
    1a1e:	4699      	mov	r9, r3
    1a20:	4798      	blx	r3
    1a22:	2001      	movs	r0, #1
    1a24:	4b2a      	ldr	r3, [pc, #168]	; (1ad0 <system_clock_init+0x17c>)
    1a26:	4698      	mov	r8, r3
    1a28:	4798      	blx	r3
	config->high_when_disabled = false;
    1a2a:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1a2c:	7265      	strb	r5, [r4, #9]
    1a2e:	2304      	movs	r3, #4
    1a30:	7023      	strb	r3, [r4, #0]
    1a32:	2320      	movs	r3, #32
    1a34:	6063      	str	r3, [r4, #4]
    1a36:	7226      	strb	r6, [r4, #8]
    1a38:	0021      	movs	r1, r4
    1a3a:	2002      	movs	r0, #2
    1a3c:	47c8      	blx	r9
    1a3e:	2002      	movs	r0, #2
    1a40:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1a42:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1a44:	0021      	movs	r1, r4
    1a46:	2000      	movs	r0, #0
    1a48:	4b18      	ldr	r3, [pc, #96]	; (1aac <system_clock_init+0x158>)
    1a4a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1a4c:	2000      	movs	r0, #0
    1a4e:	4b21      	ldr	r3, [pc, #132]	; (1ad4 <system_clock_init+0x180>)
    1a50:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1a52:	2007      	movs	r0, #7
    1a54:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1a56:	4913      	ldr	r1, [pc, #76]	; (1aa4 <system_clock_init+0x150>)
    1a58:	22d0      	movs	r2, #208	; 0xd0
    1a5a:	68cb      	ldr	r3, [r1, #12]
    1a5c:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1a5e:	2bd0      	cmp	r3, #208	; 0xd0
    1a60:	d1fb      	bne.n	1a5a <system_clock_init+0x106>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1a62:	4a10      	ldr	r2, [pc, #64]	; (1aa4 <system_clock_init+0x150>)
    1a64:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1a66:	2180      	movs	r1, #128	; 0x80
    1a68:	430b      	orrs	r3, r1
    1a6a:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    1a6c:	4a1a      	ldr	r2, [pc, #104]	; (1ad8 <system_clock_init+0x184>)
    1a6e:	2300      	movs	r3, #0
    1a70:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1a72:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1a74:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1a76:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1a78:	a901      	add	r1, sp, #4
    1a7a:	2201      	movs	r2, #1
    1a7c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1a7e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1a80:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1a82:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a84:	3307      	adds	r3, #7
    1a86:	700b      	strb	r3, [r1, #0]
    1a88:	2000      	movs	r0, #0
    1a8a:	4b10      	ldr	r3, [pc, #64]	; (1acc <system_clock_init+0x178>)
    1a8c:	4798      	blx	r3
    1a8e:	2000      	movs	r0, #0
    1a90:	4b0f      	ldr	r3, [pc, #60]	; (1ad0 <system_clock_init+0x17c>)
    1a92:	4798      	blx	r3
#endif
}
    1a94:	b00d      	add	sp, #52	; 0x34
    1a96:	bc0c      	pop	{r2, r3}
    1a98:	4690      	mov	r8, r2
    1a9a:	4699      	mov	r9, r3
    1a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1a9e:	3b20      	subs	r3, #32
    1aa0:	e79c      	b.n	19dc <system_clock_init+0x88>
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	40000800 	.word	0x40000800
    1aa8:	41004000 	.word	0x41004000
    1aac:	00001d15 	.word	0x00001d15
    1ab0:	00806024 	.word	0x00806024
    1ab4:	ff80ffff 	.word	0xff80ffff
    1ab8:	000017b1 	.word	0x000017b1
    1abc:	000018ad 	.word	0x000018ad
    1ac0:	0000182d 	.word	0x0000182d
    1ac4:	00001775 	.word	0x00001775
    1ac8:	00001add 	.word	0x00001add
    1acc:	00001b01 	.word	0x00001b01
    1ad0:	00001bb9 	.word	0x00001bb9
    1ad4:	00001c89 	.word	0x00001c89
    1ad8:	40000400 	.word	0x40000400

00001adc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1adc:	4a06      	ldr	r2, [pc, #24]	; (1af8 <system_gclk_init+0x1c>)
    1ade:	6993      	ldr	r3, [r2, #24]
    1ae0:	2108      	movs	r1, #8
    1ae2:	430b      	orrs	r3, r1
    1ae4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ae6:	2201      	movs	r2, #1
    1ae8:	4b04      	ldr	r3, [pc, #16]	; (1afc <system_gclk_init+0x20>)
    1aea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1aec:	0019      	movs	r1, r3
    1aee:	780b      	ldrb	r3, [r1, #0]
    1af0:	4213      	tst	r3, r2
    1af2:	d1fc      	bne.n	1aee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1af4:	4770      	bx	lr
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	40000400 	.word	0x40000400
    1afc:	40000c00 	.word	0x40000c00

00001b00 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1b04:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1b06:	780d      	ldrb	r5, [r1, #0]
    1b08:	022d      	lsls	r5, r5, #8
    1b0a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1b0c:	784b      	ldrb	r3, [r1, #1]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d002      	beq.n	1b18 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1b12:	2380      	movs	r3, #128	; 0x80
    1b14:	02db      	lsls	r3, r3, #11
    1b16:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1b18:	7a4b      	ldrb	r3, [r1, #9]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d002      	beq.n	1b24 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1b1e:	2380      	movs	r3, #128	; 0x80
    1b20:	031b      	lsls	r3, r3, #12
    1b22:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1b24:	6848      	ldr	r0, [r1, #4]
    1b26:	2801      	cmp	r0, #1
    1b28:	d910      	bls.n	1b4c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1b2a:	1e43      	subs	r3, r0, #1
    1b2c:	4218      	tst	r0, r3
    1b2e:	d134      	bne.n	1b9a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1b30:	2802      	cmp	r0, #2
    1b32:	d930      	bls.n	1b96 <system_gclk_gen_set_config+0x96>
    1b34:	2302      	movs	r3, #2
    1b36:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1b38:	3201      	adds	r2, #1
						mask <<= 1) {
    1b3a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1b3c:	4298      	cmp	r0, r3
    1b3e:	d8fb      	bhi.n	1b38 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1b40:	0212      	lsls	r2, r2, #8
    1b42:	4332      	orrs	r2, r6
    1b44:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1b46:	2380      	movs	r3, #128	; 0x80
    1b48:	035b      	lsls	r3, r3, #13
    1b4a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1b4c:	7a0b      	ldrb	r3, [r1, #8]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d002      	beq.n	1b58 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1b52:	2380      	movs	r3, #128	; 0x80
    1b54:	039b      	lsls	r3, r3, #14
    1b56:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b58:	4a13      	ldr	r2, [pc, #76]	; (1ba8 <system_gclk_gen_set_config+0xa8>)
    1b5a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1b5c:	b25b      	sxtb	r3, r3
    1b5e:	2b00      	cmp	r3, #0
    1b60:	dbfb      	blt.n	1b5a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1b62:	4b12      	ldr	r3, [pc, #72]	; (1bac <system_gclk_gen_set_config+0xac>)
    1b64:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b66:	4b12      	ldr	r3, [pc, #72]	; (1bb0 <system_gclk_gen_set_config+0xb0>)
    1b68:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b6a:	4a0f      	ldr	r2, [pc, #60]	; (1ba8 <system_gclk_gen_set_config+0xa8>)
    1b6c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1b6e:	b25b      	sxtb	r3, r3
    1b70:	2b00      	cmp	r3, #0
    1b72:	dbfb      	blt.n	1b6c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1b74:	4b0c      	ldr	r3, [pc, #48]	; (1ba8 <system_gclk_gen_set_config+0xa8>)
    1b76:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b78:	001a      	movs	r2, r3
    1b7a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1b7c:	b25b      	sxtb	r3, r3
    1b7e:	2b00      	cmp	r3, #0
    1b80:	dbfb      	blt.n	1b7a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1b82:	4a09      	ldr	r2, [pc, #36]	; (1ba8 <system_gclk_gen_set_config+0xa8>)
    1b84:	6853      	ldr	r3, [r2, #4]
    1b86:	2180      	movs	r1, #128	; 0x80
    1b88:	0249      	lsls	r1, r1, #9
    1b8a:	400b      	ands	r3, r1
    1b8c:	431d      	orrs	r5, r3
    1b8e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1b90:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <system_gclk_gen_set_config+0xb4>)
    1b92:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b94:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1b96:	2200      	movs	r2, #0
    1b98:	e7d2      	b.n	1b40 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1b9a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1b9c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b9e:	2380      	movs	r3, #128	; 0x80
    1ba0:	029b      	lsls	r3, r3, #10
    1ba2:	431d      	orrs	r5, r3
    1ba4:	e7d2      	b.n	1b4c <system_gclk_gen_set_config+0x4c>
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	40000c00 	.word	0x40000c00
    1bac:	00000181 	.word	0x00000181
    1bb0:	40000c08 	.word	0x40000c08
    1bb4:	000001c1 	.word	0x000001c1

00001bb8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1bb8:	b510      	push	{r4, lr}
    1bba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bbc:	4a0b      	ldr	r2, [pc, #44]	; (1bec <system_gclk_gen_enable+0x34>)
    1bbe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bc0:	b25b      	sxtb	r3, r3
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	dbfb      	blt.n	1bbe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1bc6:	4b0a      	ldr	r3, [pc, #40]	; (1bf0 <system_gclk_gen_enable+0x38>)
    1bc8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1bca:	4b0a      	ldr	r3, [pc, #40]	; (1bf4 <system_gclk_gen_enable+0x3c>)
    1bcc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bce:	4a07      	ldr	r2, [pc, #28]	; (1bec <system_gclk_gen_enable+0x34>)
    1bd0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bd2:	b25b      	sxtb	r3, r3
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	dbfb      	blt.n	1bd0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1bd8:	4a04      	ldr	r2, [pc, #16]	; (1bec <system_gclk_gen_enable+0x34>)
    1bda:	6851      	ldr	r1, [r2, #4]
    1bdc:	2380      	movs	r3, #128	; 0x80
    1bde:	025b      	lsls	r3, r3, #9
    1be0:	430b      	orrs	r3, r1
    1be2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1be4:	4b04      	ldr	r3, [pc, #16]	; (1bf8 <system_gclk_gen_enable+0x40>)
    1be6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1be8:	bd10      	pop	{r4, pc}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	40000c00 	.word	0x40000c00
    1bf0:	00000181 	.word	0x00000181
    1bf4:	40000c04 	.word	0x40000c04
    1bf8:	000001c1 	.word	0x000001c1

00001bfc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1bfc:	b570      	push	{r4, r5, r6, lr}
    1bfe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c00:	4a1a      	ldr	r2, [pc, #104]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c04:	b25b      	sxtb	r3, r3
    1c06:	2b00      	cmp	r3, #0
    1c08:	dbfb      	blt.n	1c02 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1c0a:	4b19      	ldr	r3, [pc, #100]	; (1c70 <system_gclk_gen_get_hz+0x74>)
    1c0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c0e:	4b19      	ldr	r3, [pc, #100]	; (1c74 <system_gclk_gen_get_hz+0x78>)
    1c10:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c12:	4a16      	ldr	r2, [pc, #88]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c14:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c16:	b25b      	sxtb	r3, r3
    1c18:	2b00      	cmp	r3, #0
    1c1a:	dbfb      	blt.n	1c14 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1c1c:	4e13      	ldr	r6, [pc, #76]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c1e:	6870      	ldr	r0, [r6, #4]
    1c20:	04c0      	lsls	r0, r0, #19
    1c22:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1c24:	4b14      	ldr	r3, [pc, #80]	; (1c78 <system_gclk_gen_get_hz+0x7c>)
    1c26:	4798      	blx	r3
    1c28:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c2a:	4b12      	ldr	r3, [pc, #72]	; (1c74 <system_gclk_gen_get_hz+0x78>)
    1c2c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1c2e:	6876      	ldr	r6, [r6, #4]
    1c30:	02f6      	lsls	r6, r6, #11
    1c32:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c34:	4b11      	ldr	r3, [pc, #68]	; (1c7c <system_gclk_gen_get_hz+0x80>)
    1c36:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c38:	4a0c      	ldr	r2, [pc, #48]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c3a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c3c:	b25b      	sxtb	r3, r3
    1c3e:	2b00      	cmp	r3, #0
    1c40:	dbfb      	blt.n	1c3a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1c42:	4b0a      	ldr	r3, [pc, #40]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c44:	689c      	ldr	r4, [r3, #8]
    1c46:	0224      	lsls	r4, r4, #8
    1c48:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1c4a:	4b0d      	ldr	r3, [pc, #52]	; (1c80 <system_gclk_gen_get_hz+0x84>)
    1c4c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1c4e:	2e00      	cmp	r6, #0
    1c50:	d107      	bne.n	1c62 <system_gclk_gen_get_hz+0x66>
    1c52:	2c01      	cmp	r4, #1
    1c54:	d907      	bls.n	1c66 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1c56:	0021      	movs	r1, r4
    1c58:	0028      	movs	r0, r5
    1c5a:	4b0a      	ldr	r3, [pc, #40]	; (1c84 <system_gclk_gen_get_hz+0x88>)
    1c5c:	4798      	blx	r3
    1c5e:	0005      	movs	r5, r0
    1c60:	e001      	b.n	1c66 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1c62:	3401      	adds	r4, #1
    1c64:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1c66:	0028      	movs	r0, r5
    1c68:	bd70      	pop	{r4, r5, r6, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	40000c00 	.word	0x40000c00
    1c70:	00000181 	.word	0x00000181
    1c74:	40000c04 	.word	0x40000c04
    1c78:	000016e1 	.word	0x000016e1
    1c7c:	40000c08 	.word	0x40000c08
    1c80:	000001c1 	.word	0x000001c1
    1c84:	000076d9 	.word	0x000076d9

00001c88 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c88:	b510      	push	{r4, lr}
    1c8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c8c:	4b06      	ldr	r3, [pc, #24]	; (1ca8 <system_gclk_chan_enable+0x20>)
    1c8e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c90:	4b06      	ldr	r3, [pc, #24]	; (1cac <system_gclk_chan_enable+0x24>)
    1c92:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c94:	4a06      	ldr	r2, [pc, #24]	; (1cb0 <system_gclk_chan_enable+0x28>)
    1c96:	8853      	ldrh	r3, [r2, #2]
    1c98:	2180      	movs	r1, #128	; 0x80
    1c9a:	01c9      	lsls	r1, r1, #7
    1c9c:	430b      	orrs	r3, r1
    1c9e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1ca0:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <system_gclk_chan_enable+0x2c>)
    1ca2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	00000181 	.word	0x00000181
    1cac:	40000c02 	.word	0x40000c02
    1cb0:	40000c00 	.word	0x40000c00
    1cb4:	000001c1 	.word	0x000001c1

00001cb8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1cb8:	b510      	push	{r4, lr}
    1cba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1cbc:	4b0f      	ldr	r3, [pc, #60]	; (1cfc <system_gclk_chan_disable+0x44>)
    1cbe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1cc0:	4b0f      	ldr	r3, [pc, #60]	; (1d00 <system_gclk_chan_disable+0x48>)
    1cc2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1cc4:	4a0f      	ldr	r2, [pc, #60]	; (1d04 <system_gclk_chan_disable+0x4c>)
    1cc6:	8853      	ldrh	r3, [r2, #2]
    1cc8:	051b      	lsls	r3, r3, #20
    1cca:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ccc:	8853      	ldrh	r3, [r2, #2]
    1cce:	490e      	ldr	r1, [pc, #56]	; (1d08 <system_gclk_chan_disable+0x50>)
    1cd0:	400b      	ands	r3, r1
    1cd2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1cd4:	8853      	ldrh	r3, [r2, #2]
    1cd6:	490d      	ldr	r1, [pc, #52]	; (1d0c <system_gclk_chan_disable+0x54>)
    1cd8:	400b      	ands	r3, r1
    1cda:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1cdc:	0011      	movs	r1, r2
    1cde:	2280      	movs	r2, #128	; 0x80
    1ce0:	01d2      	lsls	r2, r2, #7
    1ce2:	884b      	ldrh	r3, [r1, #2]
    1ce4:	4213      	tst	r3, r2
    1ce6:	d1fc      	bne.n	1ce2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ce8:	4906      	ldr	r1, [pc, #24]	; (1d04 <system_gclk_chan_disable+0x4c>)
    1cea:	884a      	ldrh	r2, [r1, #2]
    1cec:	0203      	lsls	r3, r0, #8
    1cee:	4806      	ldr	r0, [pc, #24]	; (1d08 <system_gclk_chan_disable+0x50>)
    1cf0:	4002      	ands	r2, r0
    1cf2:	4313      	orrs	r3, r2
    1cf4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1cf6:	4b06      	ldr	r3, [pc, #24]	; (1d10 <system_gclk_chan_disable+0x58>)
    1cf8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cfa:	bd10      	pop	{r4, pc}
    1cfc:	00000181 	.word	0x00000181
    1d00:	40000c02 	.word	0x40000c02
    1d04:	40000c00 	.word	0x40000c00
    1d08:	fffff0ff 	.word	0xfffff0ff
    1d0c:	ffffbfff 	.word	0xffffbfff
    1d10:	000001c1 	.word	0x000001c1

00001d14 <system_gclk_chan_set_config>:
{
    1d14:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1d16:	780c      	ldrb	r4, [r1, #0]
    1d18:	0224      	lsls	r4, r4, #8
    1d1a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1d1c:	4b02      	ldr	r3, [pc, #8]	; (1d28 <system_gclk_chan_set_config+0x14>)
    1d1e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1d20:	b2a4      	uxth	r4, r4
    1d22:	4b02      	ldr	r3, [pc, #8]	; (1d2c <system_gclk_chan_set_config+0x18>)
    1d24:	805c      	strh	r4, [r3, #2]
}
    1d26:	bd10      	pop	{r4, pc}
    1d28:	00001cb9 	.word	0x00001cb9
    1d2c:	40000c00 	.word	0x40000c00

00001d30 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1d30:	b510      	push	{r4, lr}
    1d32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d34:	4b06      	ldr	r3, [pc, #24]	; (1d50 <system_gclk_chan_get_hz+0x20>)
    1d36:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d38:	4b06      	ldr	r3, [pc, #24]	; (1d54 <system_gclk_chan_get_hz+0x24>)
    1d3a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1d3c:	4b06      	ldr	r3, [pc, #24]	; (1d58 <system_gclk_chan_get_hz+0x28>)
    1d3e:	885c      	ldrh	r4, [r3, #2]
    1d40:	0524      	lsls	r4, r4, #20
    1d42:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1d44:	4b05      	ldr	r3, [pc, #20]	; (1d5c <system_gclk_chan_get_hz+0x2c>)
    1d46:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d48:	0020      	movs	r0, r4
    1d4a:	4b05      	ldr	r3, [pc, #20]	; (1d60 <system_gclk_chan_get_hz+0x30>)
    1d4c:	4798      	blx	r3
}
    1d4e:	bd10      	pop	{r4, pc}
    1d50:	00000181 	.word	0x00000181
    1d54:	40000c02 	.word	0x40000c02
    1d58:	40000c00 	.word	0x40000c00
    1d5c:	000001c1 	.word	0x000001c1
    1d60:	00001bfd 	.word	0x00001bfd

00001d64 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d64:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d66:	78d3      	ldrb	r3, [r2, #3]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d135      	bne.n	1dd8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d6c:	7813      	ldrb	r3, [r2, #0]
    1d6e:	2b80      	cmp	r3, #128	; 0x80
    1d70:	d029      	beq.n	1dc6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d72:	061b      	lsls	r3, r3, #24
    1d74:	2480      	movs	r4, #128	; 0x80
    1d76:	0264      	lsls	r4, r4, #9
    1d78:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d7a:	7854      	ldrb	r4, [r2, #1]
    1d7c:	2502      	movs	r5, #2
    1d7e:	43ac      	bics	r4, r5
    1d80:	d106      	bne.n	1d90 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d82:	7894      	ldrb	r4, [r2, #2]
    1d84:	2c00      	cmp	r4, #0
    1d86:	d120      	bne.n	1dca <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d88:	2480      	movs	r4, #128	; 0x80
    1d8a:	02a4      	lsls	r4, r4, #10
    1d8c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d8e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d90:	7854      	ldrb	r4, [r2, #1]
    1d92:	3c01      	subs	r4, #1
    1d94:	2c01      	cmp	r4, #1
    1d96:	d91c      	bls.n	1dd2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d98:	040d      	lsls	r5, r1, #16
    1d9a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d9c:	24a0      	movs	r4, #160	; 0xa0
    1d9e:	05e4      	lsls	r4, r4, #23
    1da0:	432c      	orrs	r4, r5
    1da2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1da4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1da6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1da8:	24d0      	movs	r4, #208	; 0xd0
    1daa:	0624      	lsls	r4, r4, #24
    1dac:	432c      	orrs	r4, r5
    1dae:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1db0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1db2:	78d4      	ldrb	r4, [r2, #3]
    1db4:	2c00      	cmp	r4, #0
    1db6:	d122      	bne.n	1dfe <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1db8:	035b      	lsls	r3, r3, #13
    1dba:	d51c      	bpl.n	1df6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1dbc:	7893      	ldrb	r3, [r2, #2]
    1dbe:	2b01      	cmp	r3, #1
    1dc0:	d01e      	beq.n	1e00 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1dc2:	6141      	str	r1, [r0, #20]
    1dc4:	e017      	b.n	1df6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1dc6:	2300      	movs	r3, #0
    1dc8:	e7d7      	b.n	1d7a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1dca:	24c0      	movs	r4, #192	; 0xc0
    1dcc:	02e4      	lsls	r4, r4, #11
    1dce:	4323      	orrs	r3, r4
    1dd0:	e7dd      	b.n	1d8e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1dd2:	4c0d      	ldr	r4, [pc, #52]	; (1e08 <_system_pinmux_config+0xa4>)
    1dd4:	4023      	ands	r3, r4
    1dd6:	e7df      	b.n	1d98 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1dd8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1dda:	040c      	lsls	r4, r1, #16
    1ddc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1dde:	23a0      	movs	r3, #160	; 0xa0
    1de0:	05db      	lsls	r3, r3, #23
    1de2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1de4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1de6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1de8:	23d0      	movs	r3, #208	; 0xd0
    1dea:	061b      	lsls	r3, r3, #24
    1dec:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dee:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1df0:	78d3      	ldrb	r3, [r2, #3]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d103      	bne.n	1dfe <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1df6:	7853      	ldrb	r3, [r2, #1]
    1df8:	3b01      	subs	r3, #1
    1dfa:	2b01      	cmp	r3, #1
    1dfc:	d902      	bls.n	1e04 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1dfe:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1e00:	6181      	str	r1, [r0, #24]
    1e02:	e7f8      	b.n	1df6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1e04:	6081      	str	r1, [r0, #8]
}
    1e06:	e7fa      	b.n	1dfe <_system_pinmux_config+0x9a>
    1e08:	fffbffff 	.word	0xfffbffff

00001e0c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e0c:	b510      	push	{r4, lr}
    1e0e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1e10:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1e12:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1e14:	2900      	cmp	r1, #0
    1e16:	d104      	bne.n	1e22 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1e18:	0943      	lsrs	r3, r0, #5
    1e1a:	01db      	lsls	r3, r3, #7
    1e1c:	4905      	ldr	r1, [pc, #20]	; (1e34 <system_pinmux_pin_set_config+0x28>)
    1e1e:	468c      	mov	ip, r1
    1e20:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e22:	241f      	movs	r4, #31
    1e24:	4020      	ands	r0, r4
    1e26:	2101      	movs	r1, #1
    1e28:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1e2a:	0018      	movs	r0, r3
    1e2c:	4b02      	ldr	r3, [pc, #8]	; (1e38 <system_pinmux_pin_set_config+0x2c>)
    1e2e:	4798      	blx	r3
}
    1e30:	bd10      	pop	{r4, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	41004400 	.word	0x41004400
    1e38:	00001d65 	.word	0x00001d65

00001e3c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1e3c:	4770      	bx	lr
	...

00001e40 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e40:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e42:	4b05      	ldr	r3, [pc, #20]	; (1e58 <system_init+0x18>)
    1e44:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e46:	4b05      	ldr	r3, [pc, #20]	; (1e5c <system_init+0x1c>)
    1e48:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e4a:	4b05      	ldr	r3, [pc, #20]	; (1e60 <system_init+0x20>)
    1e4c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e4e:	4b05      	ldr	r3, [pc, #20]	; (1e64 <system_init+0x24>)
    1e50:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e52:	4b05      	ldr	r3, [pc, #20]	; (1e68 <system_init+0x28>)
    1e54:	4798      	blx	r3
}
    1e56:	bd10      	pop	{r4, pc}
    1e58:	00001955 	.word	0x00001955
    1e5c:	000001f1 	.word	0x000001f1
    1e60:	00001e3d 	.word	0x00001e3d
    1e64:	00000775 	.word	0x00000775
    1e68:	00001e3d 	.word	0x00001e3d

00001e6c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1e6c:	1c93      	adds	r3, r2, #2
    1e6e:	009b      	lsls	r3, r3, #2
    1e70:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1e72:	2a02      	cmp	r2, #2
    1e74:	d009      	beq.n	1e8a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1e76:	2a03      	cmp	r2, #3
    1e78:	d00c      	beq.n	1e94 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1e7a:	2301      	movs	r3, #1
    1e7c:	4093      	lsls	r3, r2
    1e7e:	001a      	movs	r2, r3
    1e80:	7e03      	ldrb	r3, [r0, #24]
    1e82:	4313      	orrs	r3, r2
    1e84:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1e86:	2000      	movs	r0, #0
    1e88:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1e8a:	7e03      	ldrb	r3, [r0, #24]
    1e8c:	2210      	movs	r2, #16
    1e8e:	4313      	orrs	r3, r2
    1e90:	7603      	strb	r3, [r0, #24]
    1e92:	e7f8      	b.n	1e86 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1e94:	7e03      	ldrb	r3, [r0, #24]
    1e96:	2220      	movs	r2, #32
    1e98:	4313      	orrs	r3, r2
    1e9a:	7603      	strb	r3, [r0, #24]
    1e9c:	e7f3      	b.n	1e86 <tc_register_callback+0x1a>
	...

00001ea0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1ea0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1ea2:	0080      	lsls	r0, r0, #2
    1ea4:	4b16      	ldr	r3, [pc, #88]	; (1f00 <_tc_interrupt_handler+0x60>)
    1ea6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ea8:	6823      	ldr	r3, [r4, #0]
    1eaa:	7b9d      	ldrb	r5, [r3, #14]
    1eac:	7e22      	ldrb	r2, [r4, #24]
    1eae:	7e63      	ldrb	r3, [r4, #25]
    1eb0:	4013      	ands	r3, r2
    1eb2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1eb4:	07eb      	lsls	r3, r5, #31
    1eb6:	d406      	bmi.n	1ec6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1eb8:	07ab      	lsls	r3, r5, #30
    1eba:	d40b      	bmi.n	1ed4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1ebc:	06eb      	lsls	r3, r5, #27
    1ebe:	d410      	bmi.n	1ee2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1ec0:	06ab      	lsls	r3, r5, #26
    1ec2:	d415      	bmi.n	1ef0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1ec4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1ec6:	0020      	movs	r0, r4
    1ec8:	68a3      	ldr	r3, [r4, #8]
    1eca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1ecc:	2301      	movs	r3, #1
    1ece:	6822      	ldr	r2, [r4, #0]
    1ed0:	7393      	strb	r3, [r2, #14]
    1ed2:	e7f1      	b.n	1eb8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1ed4:	0020      	movs	r0, r4
    1ed6:	68e3      	ldr	r3, [r4, #12]
    1ed8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1eda:	2302      	movs	r3, #2
    1edc:	6822      	ldr	r2, [r4, #0]
    1ede:	7393      	strb	r3, [r2, #14]
    1ee0:	e7ec      	b.n	1ebc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1ee2:	0020      	movs	r0, r4
    1ee4:	6923      	ldr	r3, [r4, #16]
    1ee6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1ee8:	2310      	movs	r3, #16
    1eea:	6822      	ldr	r2, [r4, #0]
    1eec:	7393      	strb	r3, [r2, #14]
    1eee:	e7e7      	b.n	1ec0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1ef0:	0020      	movs	r0, r4
    1ef2:	6963      	ldr	r3, [r4, #20]
    1ef4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1ef6:	6823      	ldr	r3, [r4, #0]
    1ef8:	2220      	movs	r2, #32
    1efa:	739a      	strb	r2, [r3, #14]
}
    1efc:	e7e2      	b.n	1ec4 <_tc_interrupt_handler+0x24>
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	200003f4 	.word	0x200003f4

00001f04 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1f04:	b510      	push	{r4, lr}
    1f06:	2000      	movs	r0, #0
    1f08:	4b01      	ldr	r3, [pc, #4]	; (1f10 <TC3_Handler+0xc>)
    1f0a:	4798      	blx	r3
    1f0c:	bd10      	pop	{r4, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	00001ea1 	.word	0x00001ea1

00001f14 <TC4_Handler>:
    1f14:	b510      	push	{r4, lr}
    1f16:	2001      	movs	r0, #1
    1f18:	4b01      	ldr	r3, [pc, #4]	; (1f20 <TC4_Handler+0xc>)
    1f1a:	4798      	blx	r3
    1f1c:	bd10      	pop	{r4, pc}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	00001ea1 	.word	0x00001ea1

00001f24 <TC5_Handler>:
    1f24:	b510      	push	{r4, lr}
    1f26:	2002      	movs	r0, #2
    1f28:	4b01      	ldr	r3, [pc, #4]	; (1f30 <TC5_Handler+0xc>)
    1f2a:	4798      	blx	r3
    1f2c:	bd10      	pop	{r4, pc}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	00001ea1 	.word	0x00001ea1

00001f34 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1f34:	b530      	push	{r4, r5, lr}
    1f36:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1f38:	aa01      	add	r2, sp, #4
    1f3a:	4b0b      	ldr	r3, [pc, #44]	; (1f68 <_tc_get_inst_index+0x34>)
    1f3c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f3e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1f40:	9b01      	ldr	r3, [sp, #4]
    1f42:	4298      	cmp	r0, r3
    1f44:	d00d      	beq.n	1f62 <_tc_get_inst_index+0x2e>
    1f46:	9b02      	ldr	r3, [sp, #8]
    1f48:	4298      	cmp	r0, r3
    1f4a:	d008      	beq.n	1f5e <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1f4c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1f4e:	9a03      	ldr	r2, [sp, #12]
    1f50:	4282      	cmp	r2, r0
    1f52:	d002      	beq.n	1f5a <_tc_get_inst_index+0x26>
}
    1f54:	0018      	movs	r0, r3
    1f56:	b005      	add	sp, #20
    1f58:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1f5a:	3302      	adds	r3, #2
    1f5c:	e002      	b.n	1f64 <_tc_get_inst_index+0x30>
    1f5e:	2301      	movs	r3, #1
    1f60:	e000      	b.n	1f64 <_tc_get_inst_index+0x30>
    1f62:	2300      	movs	r3, #0
			return i;
    1f64:	b2db      	uxtb	r3, r3
    1f66:	e7f5      	b.n	1f54 <_tc_get_inst_index+0x20>
    1f68:	00008a98 	.word	0x00008a98

00001f6c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f6e:	b087      	sub	sp, #28
    1f70:	0004      	movs	r4, r0
    1f72:	000d      	movs	r5, r1
    1f74:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1f76:	0008      	movs	r0, r1
    1f78:	4b85      	ldr	r3, [pc, #532]	; (2190 <STACK_SIZE+0x190>)
    1f7a:	4798      	blx	r3
    1f7c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1f7e:	ab05      	add	r3, sp, #20
    1f80:	221b      	movs	r2, #27
    1f82:	701a      	strb	r2, [r3, #0]
    1f84:	3201      	adds	r2, #1
    1f86:	705a      	strb	r2, [r3, #1]
    1f88:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1f8a:	ab03      	add	r3, sp, #12
    1f8c:	2280      	movs	r2, #128	; 0x80
    1f8e:	0112      	lsls	r2, r2, #4
    1f90:	801a      	strh	r2, [r3, #0]
    1f92:	2280      	movs	r2, #128	; 0x80
    1f94:	0152      	lsls	r2, r2, #5
    1f96:	805a      	strh	r2, [r3, #2]
    1f98:	2280      	movs	r2, #128	; 0x80
    1f9a:	0192      	lsls	r2, r2, #6
    1f9c:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1f9e:	2300      	movs	r3, #0
    1fa0:	60a3      	str	r3, [r4, #8]
    1fa2:	60e3      	str	r3, [r4, #12]
    1fa4:	6123      	str	r3, [r4, #16]
    1fa6:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1fa8:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1faa:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1fac:	0082      	lsls	r2, r0, #2
    1fae:	4b79      	ldr	r3, [pc, #484]	; (2194 <STACK_SIZE+0x194>)
    1fb0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1fb2:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1fb4:	78b3      	ldrb	r3, [r6, #2]
    1fb6:	2b08      	cmp	r3, #8
    1fb8:	d006      	beq.n	1fc8 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1fba:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1fbc:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1fbe:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1fc0:	07db      	lsls	r3, r3, #31
    1fc2:	d505      	bpl.n	1fd0 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1fc4:	b007      	add	sp, #28
    1fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1fc8:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1fca:	07fa      	lsls	r2, r7, #31
    1fcc:	d5fa      	bpl.n	1fc4 <tc_init+0x58>
    1fce:	e7f4      	b.n	1fba <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1fd0:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1fd2:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1fd4:	06db      	lsls	r3, r3, #27
    1fd6:	d4f5      	bmi.n	1fc4 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1fd8:	882b      	ldrh	r3, [r5, #0]
    1fda:	079b      	lsls	r3, r3, #30
    1fdc:	d4f2      	bmi.n	1fc4 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1fde:	7c33      	ldrb	r3, [r6, #16]
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d179      	bne.n	20d8 <STACK_SIZE+0xd8>
	if (config->pwm_channel[1].enabled) {
    1fe4:	7f33      	ldrb	r3, [r6, #28]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d000      	beq.n	1fec <tc_init+0x80>
    1fea:	e081      	b.n	20f0 <STACK_SIZE+0xf0>
			PM->APBCMASK.reg |= mask;
    1fec:	496a      	ldr	r1, [pc, #424]	; (2198 <STACK_SIZE+0x198>)
    1fee:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1ff0:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1ff2:	ab03      	add	r3, sp, #12
    1ff4:	5ad3      	ldrh	r3, [r2, r3]
    1ff6:	4303      	orrs	r3, r0
    1ff8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1ffa:	78b3      	ldrb	r3, [r6, #2]
    1ffc:	2b08      	cmp	r3, #8
    1ffe:	d100      	bne.n	2002 <STACK_SIZE+0x2>
    2000:	e086      	b.n	2110 <STACK_SIZE+0x110>
	gclk_chan_config.source_generator = config->clock_source;
    2002:	a901      	add	r1, sp, #4
    2004:	7833      	ldrb	r3, [r6, #0]
    2006:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2008:	ab05      	add	r3, sp, #20
    200a:	5ddf      	ldrb	r7, [r3, r7]
    200c:	0038      	movs	r0, r7
    200e:	4b63      	ldr	r3, [pc, #396]	; (219c <STACK_SIZE+0x19c>)
    2010:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2012:	0038      	movs	r0, r7
    2014:	4b62      	ldr	r3, [pc, #392]	; (21a0 <STACK_SIZE+0x1a0>)
    2016:	4798      	blx	r3
	ctrla_tmp =
    2018:	8931      	ldrh	r1, [r6, #8]
    201a:	88b3      	ldrh	r3, [r6, #4]
    201c:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    201e:	78b1      	ldrb	r1, [r6, #2]
    2020:	79b2      	ldrb	r2, [r6, #6]
    2022:	4311      	orrs	r1, r2
	ctrla_tmp =
    2024:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2026:	7873      	ldrb	r3, [r6, #1]
    2028:	2b00      	cmp	r3, #0
    202a:	d002      	beq.n	2032 <STACK_SIZE+0x32>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    202c:	2380      	movs	r3, #128	; 0x80
    202e:	011b      	lsls	r3, r3, #4
    2030:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2032:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2034:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2036:	b25b      	sxtb	r3, r3
    2038:	2b00      	cmp	r3, #0
    203a:	dbfb      	blt.n	2034 <STACK_SIZE+0x34>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    203c:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    203e:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2040:	1e4b      	subs	r3, r1, #1
    2042:	4199      	sbcs	r1, r3
    2044:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    2046:	7bb3      	ldrb	r3, [r6, #14]
    2048:	2b00      	cmp	r3, #0
    204a:	d001      	beq.n	2050 <STACK_SIZE+0x50>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    204c:	2301      	movs	r3, #1
    204e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2050:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2052:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2054:	b25b      	sxtb	r3, r3
    2056:	2b00      	cmp	r3, #0
    2058:	dbfb      	blt.n	2052 <STACK_SIZE+0x52>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    205a:	23ff      	movs	r3, #255	; 0xff
    205c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    205e:	2900      	cmp	r1, #0
    2060:	d005      	beq.n	206e <STACK_SIZE+0x6e>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2062:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2064:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    2066:	b25b      	sxtb	r3, r3
    2068:	2b00      	cmp	r3, #0
    206a:	dbfb      	blt.n	2064 <STACK_SIZE+0x64>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    206c:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    206e:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2070:	7af3      	ldrb	r3, [r6, #11]
    2072:	2b00      	cmp	r3, #0
    2074:	d001      	beq.n	207a <STACK_SIZE+0x7a>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2076:	2310      	movs	r3, #16
    2078:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    207a:	7b33      	ldrb	r3, [r6, #12]
    207c:	2b00      	cmp	r3, #0
    207e:	d001      	beq.n	2084 <STACK_SIZE+0x84>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2080:	2320      	movs	r3, #32
    2082:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2084:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2086:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2088:	b25b      	sxtb	r3, r3
    208a:	2b00      	cmp	r3, #0
    208c:	dbfb      	blt.n	2086 <STACK_SIZE+0x86>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    208e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2090:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2092:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2094:	b25b      	sxtb	r3, r3
    2096:	2b00      	cmp	r3, #0
    2098:	dbfb      	blt.n	2092 <STACK_SIZE+0x92>
	switch (module_inst->counter_size) {
    209a:	7923      	ldrb	r3, [r4, #4]
    209c:	2b04      	cmp	r3, #4
    209e:	d03f      	beq.n	2120 <STACK_SIZE+0x120>
    20a0:	2b08      	cmp	r3, #8
    20a2:	d05e      	beq.n	2162 <STACK_SIZE+0x162>
	return STATUS_ERR_INVALID_ARG;
    20a4:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    20a6:	2b00      	cmp	r3, #0
    20a8:	d000      	beq.n	20ac <STACK_SIZE+0xac>
    20aa:	e78b      	b.n	1fc4 <tc_init+0x58>
    20ac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    20ae:	b25b      	sxtb	r3, r3
    20b0:	2b00      	cmp	r3, #0
    20b2:	dbfb      	blt.n	20ac <STACK_SIZE+0xac>
				= config->counter_16_bit.value;
    20b4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    20b6:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    20b8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    20ba:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    20bc:	b25b      	sxtb	r3, r3
    20be:	2b00      	cmp	r3, #0
    20c0:	dbfb      	blt.n	20ba <STACK_SIZE+0xba>
					config->counter_16_bit.compare_capture_channel[0];
    20c2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    20c4:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    20c6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    20c8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    20ca:	b25b      	sxtb	r3, r3
    20cc:	2b00      	cmp	r3, #0
    20ce:	dbfb      	blt.n	20c8 <STACK_SIZE+0xc8>
					config->counter_16_bit.compare_capture_channel[1];
    20d0:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    20d2:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    20d4:	2000      	movs	r0, #0
    20d6:	e775      	b.n	1fc4 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    20d8:	a902      	add	r1, sp, #8
    20da:	2301      	movs	r3, #1
    20dc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    20de:	2200      	movs	r2, #0
    20e0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    20e2:	7e32      	ldrb	r2, [r6, #24]
    20e4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    20e6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    20e8:	7d30      	ldrb	r0, [r6, #20]
    20ea:	4b2e      	ldr	r3, [pc, #184]	; (21a4 <STACK_SIZE+0x1a4>)
    20ec:	4798      	blx	r3
    20ee:	e779      	b.n	1fe4 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    20f0:	a902      	add	r1, sp, #8
    20f2:	2301      	movs	r3, #1
    20f4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    20f6:	2200      	movs	r2, #0
    20f8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    20fa:	3224      	adds	r2, #36	; 0x24
    20fc:	18b2      	adds	r2, r6, r2
    20fe:	7812      	ldrb	r2, [r2, #0]
    2100:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2102:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2104:	331f      	adds	r3, #31
    2106:	18f3      	adds	r3, r6, r3
    2108:	7818      	ldrb	r0, [r3, #0]
    210a:	4b26      	ldr	r3, [pc, #152]	; (21a4 <STACK_SIZE+0x1a4>)
    210c:	4798      	blx	r3
    210e:	e76d      	b.n	1fec <tc_init+0x80>
    2110:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    2112:	1c7a      	adds	r2, r7, #1
    2114:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2116:	ab03      	add	r3, sp, #12
    2118:	5ad3      	ldrh	r3, [r2, r3]
    211a:	4303      	orrs	r3, r0
    211c:	620b      	str	r3, [r1, #32]
    211e:	e770      	b.n	2002 <STACK_SIZE+0x2>
    2120:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2122:	b25b      	sxtb	r3, r3
    2124:	2b00      	cmp	r3, #0
    2126:	dbfb      	blt.n	2120 <STACK_SIZE+0x120>
					config->counter_8_bit.value;
    2128:	2328      	movs	r3, #40	; 0x28
    212a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    212c:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    212e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2130:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2132:	b25b      	sxtb	r3, r3
    2134:	2b00      	cmp	r3, #0
    2136:	dbfb      	blt.n	2130 <STACK_SIZE+0x130>
					config->counter_8_bit.period;
    2138:	2329      	movs	r3, #41	; 0x29
    213a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    213c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    213e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2140:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2142:	b25b      	sxtb	r3, r3
    2144:	2b00      	cmp	r3, #0
    2146:	dbfb      	blt.n	2140 <STACK_SIZE+0x140>
					config->counter_8_bit.compare_capture_channel[0];
    2148:	232a      	movs	r3, #42	; 0x2a
    214a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    214c:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    214e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2150:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2152:	b25b      	sxtb	r3, r3
    2154:	2b00      	cmp	r3, #0
    2156:	dbfb      	blt.n	2150 <STACK_SIZE+0x150>
					config->counter_8_bit.compare_capture_channel[1];
    2158:	232b      	movs	r3, #43	; 0x2b
    215a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    215c:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    215e:	2000      	movs	r0, #0
    2160:	e730      	b.n	1fc4 <tc_init+0x58>
    2162:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2164:	b25b      	sxtb	r3, r3
    2166:	2b00      	cmp	r3, #0
    2168:	dbfb      	blt.n	2162 <STACK_SIZE+0x162>
				= config->counter_32_bit.value;
    216a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    216c:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    216e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2170:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2172:	b25b      	sxtb	r3, r3
    2174:	2b00      	cmp	r3, #0
    2176:	dbfb      	blt.n	2170 <STACK_SIZE+0x170>
			hw->COUNT32.CC[0].reg =
    2178:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    217a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    217c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    217e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2180:	b25b      	sxtb	r3, r3
    2182:	2b00      	cmp	r3, #0
    2184:	dbfb      	blt.n	217e <STACK_SIZE+0x17e>
					config->counter_32_bit.compare_capture_channel[1];
    2186:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2188:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    218a:	2000      	movs	r0, #0
    218c:	e71a      	b.n	1fc4 <tc_init+0x58>
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	00001f35 	.word	0x00001f35
    2194:	200003f4 	.word	0x200003f4
    2198:	40000400 	.word	0x40000400
    219c:	00001d15 	.word	0x00001d15
    21a0:	00001c89 	.word	0x00001c89
    21a4:	00001e0d 	.word	0x00001e0d

000021a8 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    21a8:	6802      	ldr	r2, [r0, #0]
    21aa:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    21ac:	b25b      	sxtb	r3, r3
    21ae:	2b00      	cmp	r3, #0
    21b0:	dbfb      	blt.n	21aa <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    21b2:	7903      	ldrb	r3, [r0, #4]
    21b4:	2b04      	cmp	r3, #4
    21b6:	d005      	beq.n	21c4 <tc_get_count_value+0x1c>
    21b8:	2b08      	cmp	r3, #8
    21ba:	d009      	beq.n	21d0 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    21bc:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    21be:	2b00      	cmp	r3, #0
    21c0:	d003      	beq.n	21ca <tc_get_count_value+0x22>
}
    21c2:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    21c4:	7c10      	ldrb	r0, [r2, #16]
    21c6:	b2c0      	uxtb	r0, r0
    21c8:	e7fb      	b.n	21c2 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    21ca:	8a10      	ldrh	r0, [r2, #16]
    21cc:	b280      	uxth	r0, r0
    21ce:	e7f8      	b.n	21c2 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    21d0:	6910      	ldr	r0, [r2, #16]
    21d2:	e7f6      	b.n	21c2 <tc_get_count_value+0x1a>

000021d4 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    21d4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    21d6:	6804      	ldr	r4, [r0, #0]
    21d8:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    21da:	b25b      	sxtb	r3, r3
    21dc:	2b00      	cmp	r3, #0
    21de:	dbfb      	blt.n	21d8 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    21e0:	7903      	ldrb	r3, [r0, #4]
    21e2:	2b04      	cmp	r3, #4
    21e4:	d005      	beq.n	21f2 <tc_set_compare_value+0x1e>
    21e6:	2b08      	cmp	r3, #8
    21e8:	d014      	beq.n	2214 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    21ea:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    21ec:	2b00      	cmp	r3, #0
    21ee:	d008      	beq.n	2202 <tc_set_compare_value+0x2e>
}
    21f0:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    21f2:	2017      	movs	r0, #23
			if (channel_index <
    21f4:	2901      	cmp	r1, #1
    21f6:	d8fb      	bhi.n	21f0 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    21f8:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    21fa:	1861      	adds	r1, r4, r1
    21fc:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    21fe:	2000      	movs	r0, #0
    2200:	e7f6      	b.n	21f0 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2202:	2017      	movs	r0, #23
			if (channel_index <
    2204:	2901      	cmp	r1, #1
    2206:	d8f3      	bhi.n	21f0 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    2208:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    220a:	310c      	adds	r1, #12
    220c:	0049      	lsls	r1, r1, #1
    220e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    2210:	2000      	movs	r0, #0
    2212:	e7ed      	b.n	21f0 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2214:	2017      	movs	r0, #23
			if (channel_index <
    2216:	2901      	cmp	r1, #1
    2218:	d8ea      	bhi.n	21f0 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    221a:	3106      	adds	r1, #6
    221c:	0089      	lsls	r1, r1, #2
    221e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    2220:	2000      	movs	r0, #0
    2222:	e7e5      	b.n	21f0 <tc_set_compare_value+0x1c>

00002224 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2224:	e7fe      	b.n	2224 <Dummy_Handler>
	...

00002228 <Reset_Handler>:
{
    2228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    222a:	4a2a      	ldr	r2, [pc, #168]	; (22d4 <Reset_Handler+0xac>)
    222c:	4b2a      	ldr	r3, [pc, #168]	; (22d8 <Reset_Handler+0xb0>)
    222e:	429a      	cmp	r2, r3
    2230:	d011      	beq.n	2256 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2232:	001a      	movs	r2, r3
    2234:	4b29      	ldr	r3, [pc, #164]	; (22dc <Reset_Handler+0xb4>)
    2236:	429a      	cmp	r2, r3
    2238:	d20d      	bcs.n	2256 <Reset_Handler+0x2e>
    223a:	4a29      	ldr	r2, [pc, #164]	; (22e0 <Reset_Handler+0xb8>)
    223c:	3303      	adds	r3, #3
    223e:	1a9b      	subs	r3, r3, r2
    2240:	089b      	lsrs	r3, r3, #2
    2242:	3301      	adds	r3, #1
    2244:	009b      	lsls	r3, r3, #2
    2246:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2248:	4823      	ldr	r0, [pc, #140]	; (22d8 <Reset_Handler+0xb0>)
    224a:	4922      	ldr	r1, [pc, #136]	; (22d4 <Reset_Handler+0xac>)
    224c:	588c      	ldr	r4, [r1, r2]
    224e:	5084      	str	r4, [r0, r2]
    2250:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2252:	429a      	cmp	r2, r3
    2254:	d1fa      	bne.n	224c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2256:	4a23      	ldr	r2, [pc, #140]	; (22e4 <Reset_Handler+0xbc>)
    2258:	4b23      	ldr	r3, [pc, #140]	; (22e8 <Reset_Handler+0xc0>)
    225a:	429a      	cmp	r2, r3
    225c:	d20a      	bcs.n	2274 <Reset_Handler+0x4c>
    225e:	43d3      	mvns	r3, r2
    2260:	4921      	ldr	r1, [pc, #132]	; (22e8 <Reset_Handler+0xc0>)
    2262:	185b      	adds	r3, r3, r1
    2264:	2103      	movs	r1, #3
    2266:	438b      	bics	r3, r1
    2268:	3304      	adds	r3, #4
    226a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    226c:	2100      	movs	r1, #0
    226e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2270:	4293      	cmp	r3, r2
    2272:	d1fc      	bne.n	226e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2274:	4a1d      	ldr	r2, [pc, #116]	; (22ec <Reset_Handler+0xc4>)
    2276:	21ff      	movs	r1, #255	; 0xff
    2278:	4b1d      	ldr	r3, [pc, #116]	; (22f0 <Reset_Handler+0xc8>)
    227a:	438b      	bics	r3, r1
    227c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    227e:	39fd      	subs	r1, #253	; 0xfd
    2280:	2390      	movs	r3, #144	; 0x90
    2282:	005b      	lsls	r3, r3, #1
    2284:	4a1b      	ldr	r2, [pc, #108]	; (22f4 <Reset_Handler+0xcc>)
    2286:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2288:	4a1b      	ldr	r2, [pc, #108]	; (22f8 <Reset_Handler+0xd0>)
    228a:	78d3      	ldrb	r3, [r2, #3]
    228c:	2503      	movs	r5, #3
    228e:	43ab      	bics	r3, r5
    2290:	2402      	movs	r4, #2
    2292:	4323      	orrs	r3, r4
    2294:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2296:	78d3      	ldrb	r3, [r2, #3]
    2298:	270c      	movs	r7, #12
    229a:	43bb      	bics	r3, r7
    229c:	2608      	movs	r6, #8
    229e:	4333      	orrs	r3, r6
    22a0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    22a2:	4b16      	ldr	r3, [pc, #88]	; (22fc <Reset_Handler+0xd4>)
    22a4:	7b98      	ldrb	r0, [r3, #14]
    22a6:	2230      	movs	r2, #48	; 0x30
    22a8:	4390      	bics	r0, r2
    22aa:	2220      	movs	r2, #32
    22ac:	4310      	orrs	r0, r2
    22ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    22b0:	7b99      	ldrb	r1, [r3, #14]
    22b2:	43b9      	bics	r1, r7
    22b4:	4331      	orrs	r1, r6
    22b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    22b8:	7b9a      	ldrb	r2, [r3, #14]
    22ba:	43aa      	bics	r2, r5
    22bc:	4322      	orrs	r2, r4
    22be:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    22c0:	4a0f      	ldr	r2, [pc, #60]	; (2300 <Reset_Handler+0xd8>)
    22c2:	6853      	ldr	r3, [r2, #4]
    22c4:	2180      	movs	r1, #128	; 0x80
    22c6:	430b      	orrs	r3, r1
    22c8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    22ca:	4b0e      	ldr	r3, [pc, #56]	; (2304 <Reset_Handler+0xdc>)
    22cc:	4798      	blx	r3
        main();
    22ce:	4b0e      	ldr	r3, [pc, #56]	; (2308 <Reset_Handler+0xe0>)
    22d0:	4798      	blx	r3
    22d2:	e7fe      	b.n	22d2 <Reset_Handler+0xaa>
    22d4:	00008b90 	.word	0x00008b90
    22d8:	20000000 	.word	0x20000000
    22dc:	200000bc 	.word	0x200000bc
    22e0:	20000004 	.word	0x20000004
    22e4:	200000c0 	.word	0x200000c0
    22e8:	2000141c 	.word	0x2000141c
    22ec:	e000ed00 	.word	0xe000ed00
    22f0:	00000000 	.word	0x00000000
    22f4:	41007000 	.word	0x41007000
    22f8:	41005000 	.word	0x41005000
    22fc:	41004800 	.word	0x41004800
    2300:	41004000 	.word	0x41004000
    2304:	00007a19 	.word	0x00007a19
    2308:	00004751 	.word	0x00004751

0000230c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
    230e:	46c6      	mov	lr, r8
    2310:	b500      	push	{lr}
    2312:	000c      	movs	r4, r1
    2314:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2316:	2800      	cmp	r0, #0
    2318:	d10f      	bne.n	233a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    231a:	2a00      	cmp	r2, #0
    231c:	dd11      	ble.n	2342 <_read+0x36>
    231e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2320:	4e09      	ldr	r6, [pc, #36]	; (2348 <_read+0x3c>)
    2322:	4d0a      	ldr	r5, [pc, #40]	; (234c <_read+0x40>)
    2324:	6830      	ldr	r0, [r6, #0]
    2326:	0021      	movs	r1, r4
    2328:	682b      	ldr	r3, [r5, #0]
    232a:	4798      	blx	r3
		ptr++;
    232c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    232e:	42bc      	cmp	r4, r7
    2330:	d1f8      	bne.n	2324 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2332:	4640      	mov	r0, r8
    2334:	bc04      	pop	{r2}
    2336:	4690      	mov	r8, r2
    2338:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    233a:	2301      	movs	r3, #1
    233c:	425b      	negs	r3, r3
    233e:	4698      	mov	r8, r3
    2340:	e7f7      	b.n	2332 <_read+0x26>
	for (; len > 0; --len) {
    2342:	4680      	mov	r8, r0
    2344:	e7f5      	b.n	2332 <_read+0x26>
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	20000408 	.word	0x20000408
    234c:	20000400 	.word	0x20000400

00002350 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2350:	b5f0      	push	{r4, r5, r6, r7, lr}
    2352:	46c6      	mov	lr, r8
    2354:	b500      	push	{lr}
    2356:	000e      	movs	r6, r1
    2358:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    235a:	3801      	subs	r0, #1
    235c:	2802      	cmp	r0, #2
    235e:	d810      	bhi.n	2382 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2360:	2a00      	cmp	r2, #0
    2362:	d011      	beq.n	2388 <_write+0x38>
    2364:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2366:	4b0c      	ldr	r3, [pc, #48]	; (2398 <_write+0x48>)
    2368:	4698      	mov	r8, r3
    236a:	4f0c      	ldr	r7, [pc, #48]	; (239c <_write+0x4c>)
    236c:	4643      	mov	r3, r8
    236e:	6818      	ldr	r0, [r3, #0]
    2370:	5d31      	ldrb	r1, [r6, r4]
    2372:	683b      	ldr	r3, [r7, #0]
    2374:	4798      	blx	r3
    2376:	2800      	cmp	r0, #0
    2378:	db08      	blt.n	238c <_write+0x3c>
			return -1;
		}
		++nChars;
    237a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    237c:	42a5      	cmp	r5, r4
    237e:	d1f5      	bne.n	236c <_write+0x1c>
    2380:	e006      	b.n	2390 <_write+0x40>
		return -1;
    2382:	2401      	movs	r4, #1
    2384:	4264      	negs	r4, r4
    2386:	e003      	b.n	2390 <_write+0x40>
	for (; len != 0; --len) {
    2388:	0014      	movs	r4, r2
    238a:	e001      	b.n	2390 <_write+0x40>
			return -1;
    238c:	2401      	movs	r4, #1
    238e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2390:	0020      	movs	r0, r4
    2392:	bc04      	pop	{r2}
    2394:	4690      	mov	r8, r2
    2396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2398:	20000408 	.word	0x20000408
    239c:	20000404 	.word	0x20000404

000023a0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    23a0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    23a2:	4a06      	ldr	r2, [pc, #24]	; (23bc <_sbrk+0x1c>)
    23a4:	6812      	ldr	r2, [r2, #0]
    23a6:	2a00      	cmp	r2, #0
    23a8:	d004      	beq.n	23b4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    23aa:	4a04      	ldr	r2, [pc, #16]	; (23bc <_sbrk+0x1c>)
    23ac:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    23ae:	18c3      	adds	r3, r0, r3
    23b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    23b2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    23b4:	4902      	ldr	r1, [pc, #8]	; (23c0 <_sbrk+0x20>)
    23b6:	4a01      	ldr	r2, [pc, #4]	; (23bc <_sbrk+0x1c>)
    23b8:	6011      	str	r1, [r2, #0]
    23ba:	e7f6      	b.n	23aa <_sbrk+0xa>
    23bc:	20000118 	.word	0x20000118
    23c0:	20003420 	.word	0x20003420

000023c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    23c4:	2001      	movs	r0, #1
    23c6:	4240      	negs	r0, r0
    23c8:	4770      	bx	lr

000023ca <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    23ca:	2380      	movs	r3, #128	; 0x80
    23cc:	019b      	lsls	r3, r3, #6
    23ce:	604b      	str	r3, [r1, #4]

	return 0;
}
    23d0:	2000      	movs	r0, #0
    23d2:	4770      	bx	lr

000023d4 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    23d4:	2000      	movs	r0, #0
    23d6:	4770      	bx	lr

000023d8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    23d8:	b570      	push	{r4, r5, r6, lr}
    23da:	b082      	sub	sp, #8
    23dc:	0005      	movs	r5, r0
    23de:	000e      	movs	r6, r1
	uint16_t temp = 0;
    23e0:	2200      	movs	r2, #0
    23e2:	466b      	mov	r3, sp
    23e4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    23e6:	4c06      	ldr	r4, [pc, #24]	; (2400 <usart_serial_getchar+0x28>)
    23e8:	466b      	mov	r3, sp
    23ea:	1d99      	adds	r1, r3, #6
    23ec:	0028      	movs	r0, r5
    23ee:	47a0      	blx	r4
    23f0:	2800      	cmp	r0, #0
    23f2:	d1f9      	bne.n	23e8 <usart_serial_getchar+0x10>

	*c = temp;
    23f4:	466b      	mov	r3, sp
    23f6:	3306      	adds	r3, #6
    23f8:	881b      	ldrh	r3, [r3, #0]
    23fa:	7033      	strb	r3, [r6, #0]
}
    23fc:	b002      	add	sp, #8
    23fe:	bd70      	pop	{r4, r5, r6, pc}
    2400:	00001445 	.word	0x00001445

00002404 <usart_serial_putchar>:
{
    2404:	b570      	push	{r4, r5, r6, lr}
    2406:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2408:	b28c      	uxth	r4, r1
    240a:	4e03      	ldr	r6, [pc, #12]	; (2418 <usart_serial_putchar+0x14>)
    240c:	0021      	movs	r1, r4
    240e:	0028      	movs	r0, r5
    2410:	47b0      	blx	r6
    2412:	2800      	cmp	r0, #0
    2414:	d1fa      	bne.n	240c <usart_serial_putchar+0x8>
}
    2416:	bd70      	pop	{r4, r5, r6, pc}
    2418:	00001419 	.word	0x00001419

0000241c <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    241c:	b510      	push	{r4, lr}
    241e:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2420:	466b      	mov	r3, sp
    2422:	1ddc      	adds	r4, r3, #7
    2424:	2201      	movs	r2, #1
    2426:	0021      	movs	r1, r4
    2428:	480f      	ldr	r0, [pc, #60]	; (2468 <USART_HOST_ISR_VECT+0x4c>)
    242a:	4b10      	ldr	r3, [pc, #64]	; (246c <USART_HOST_ISR_VECT+0x50>)
    242c:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    242e:	b672      	cpsid	i
    2430:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    2434:	2200      	movs	r2, #0
    2436:	4b0e      	ldr	r3, [pc, #56]	; (2470 <USART_HOST_ISR_VECT+0x54>)
    2438:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    243a:	4b0e      	ldr	r3, [pc, #56]	; (2474 <USART_HOST_ISR_VECT+0x58>)
    243c:	781b      	ldrb	r3, [r3, #0]
    243e:	7821      	ldrb	r1, [r4, #0]
    2440:	4a0d      	ldr	r2, [pc, #52]	; (2478 <USART_HOST_ISR_VECT+0x5c>)
    2442:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    2444:	2b9b      	cmp	r3, #155	; 0x9b
    2446:	d00a      	beq.n	245e <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    2448:	3301      	adds	r3, #1
    244a:	4a0a      	ldr	r2, [pc, #40]	; (2474 <USART_HOST_ISR_VECT+0x58>)
    244c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    244e:	2201      	movs	r2, #1
    2450:	4b07      	ldr	r3, [pc, #28]	; (2470 <USART_HOST_ISR_VECT+0x54>)
    2452:	701a      	strb	r2, [r3, #0]
    2454:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2458:	b662      	cpsie	i
}
    245a:	b002      	add	sp, #8
    245c:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    245e:	2200      	movs	r2, #0
    2460:	4b04      	ldr	r3, [pc, #16]	; (2474 <USART_HOST_ISR_VECT+0x58>)
    2462:	701a      	strb	r2, [r3, #0]
    2464:	e7f3      	b.n	244e <USART_HOST_ISR_VECT+0x32>
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	2000011c 	.word	0x2000011c
    246c:	000014b5 	.word	0x000014b5
    2470:	20000008 	.word	0x20000008
    2474:	200001ec 	.word	0x200001ec
    2478:	20000150 	.word	0x20000150

0000247c <sio2host_init>:
{
    247c:	b5f0      	push	{r4, r5, r6, r7, lr}
    247e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2480:	2380      	movs	r3, #128	; 0x80
    2482:	05db      	lsls	r3, r3, #23
    2484:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2486:	2300      	movs	r3, #0
    2488:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    248a:	22ff      	movs	r2, #255	; 0xff
    248c:	4669      	mov	r1, sp
    248e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2490:	2200      	movs	r2, #0
    2492:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2494:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2496:	2401      	movs	r4, #1
    2498:	2124      	movs	r1, #36	; 0x24
    249a:	4668      	mov	r0, sp
    249c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    249e:	3101      	adds	r1, #1
    24a0:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    24a2:	3101      	adds	r1, #1
    24a4:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    24a6:	3101      	adds	r1, #1
    24a8:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    24aa:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    24ac:	3105      	adds	r1, #5
    24ae:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    24b0:	3101      	adds	r1, #1
    24b2:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    24b4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    24b6:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    24b8:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    24ba:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    24bc:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    24be:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    24c0:	2313      	movs	r3, #19
    24c2:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    24c4:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    24c6:	23c4      	movs	r3, #196	; 0xc4
    24c8:	039b      	lsls	r3, r3, #14
    24ca:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    24cc:	2301      	movs	r3, #1
    24ce:	425b      	negs	r3, r3
    24d0:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    24d2:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    24d4:	4b2d      	ldr	r3, [pc, #180]	; (258c <sio2host_init+0x110>)
    24d6:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    24d8:	4b2d      	ldr	r3, [pc, #180]	; (2590 <sio2host_init+0x114>)
    24da:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    24dc:	2396      	movs	r3, #150	; 0x96
    24de:	021b      	lsls	r3, r3, #8
    24e0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    24e2:	4d2c      	ldr	r5, [pc, #176]	; (2594 <sio2host_init+0x118>)
    24e4:	4b2c      	ldr	r3, [pc, #176]	; (2598 <sio2host_init+0x11c>)
    24e6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    24e8:	4a2c      	ldr	r2, [pc, #176]	; (259c <sio2host_init+0x120>)
    24ea:	4b2d      	ldr	r3, [pc, #180]	; (25a0 <sio2host_init+0x124>)
    24ec:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    24ee:	4a2d      	ldr	r2, [pc, #180]	; (25a4 <sio2host_init+0x128>)
    24f0:	4b2d      	ldr	r3, [pc, #180]	; (25a8 <sio2host_init+0x12c>)
    24f2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    24f4:	466a      	mov	r2, sp
    24f6:	492d      	ldr	r1, [pc, #180]	; (25ac <sio2host_init+0x130>)
    24f8:	0028      	movs	r0, r5
    24fa:	4b2d      	ldr	r3, [pc, #180]	; (25b0 <sio2host_init+0x134>)
    24fc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    24fe:	4f2d      	ldr	r7, [pc, #180]	; (25b4 <sio2host_init+0x138>)
    2500:	683b      	ldr	r3, [r7, #0]
    2502:	6898      	ldr	r0, [r3, #8]
    2504:	2100      	movs	r1, #0
    2506:	4e2c      	ldr	r6, [pc, #176]	; (25b8 <sio2host_init+0x13c>)
    2508:	47b0      	blx	r6
	setbuf(stdin, NULL);
    250a:	683b      	ldr	r3, [r7, #0]
    250c:	6858      	ldr	r0, [r3, #4]
    250e:	2100      	movs	r1, #0
    2510:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2512:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2514:	0030      	movs	r0, r6
    2516:	4b29      	ldr	r3, [pc, #164]	; (25bc <sio2host_init+0x140>)
    2518:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    251a:	231f      	movs	r3, #31
    251c:	4018      	ands	r0, r3
    251e:	4084      	lsls	r4, r0
    2520:	4b27      	ldr	r3, [pc, #156]	; (25c0 <sio2host_init+0x144>)
    2522:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2524:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2526:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2528:	2b00      	cmp	r3, #0
    252a:	d1fc      	bne.n	2526 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    252c:	6833      	ldr	r3, [r6, #0]
    252e:	2202      	movs	r2, #2
    2530:	4313      	orrs	r3, r2
    2532:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2534:	4b17      	ldr	r3, [pc, #92]	; (2594 <sio2host_init+0x118>)
    2536:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2538:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    253a:	2a00      	cmp	r2, #0
    253c:	d1fc      	bne.n	2538 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    253e:	6859      	ldr	r1, [r3, #4]
    2540:	2280      	movs	r2, #128	; 0x80
    2542:	0252      	lsls	r2, r2, #9
    2544:	430a      	orrs	r2, r1
    2546:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2548:	2101      	movs	r1, #1
    254a:	4a12      	ldr	r2, [pc, #72]	; (2594 <sio2host_init+0x118>)
    254c:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    254e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2550:	2a00      	cmp	r2, #0
    2552:	d1fc      	bne.n	254e <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    2554:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2556:	2a00      	cmp	r2, #0
    2558:	d1fc      	bne.n	2554 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    255a:	6859      	ldr	r1, [r3, #4]
    255c:	2280      	movs	r2, #128	; 0x80
    255e:	0292      	lsls	r2, r2, #10
    2560:	430a      	orrs	r2, r1
    2562:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2564:	2101      	movs	r1, #1
    2566:	4a0b      	ldr	r2, [pc, #44]	; (2594 <sio2host_init+0x118>)
    2568:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    256a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    256c:	2a00      	cmp	r2, #0
    256e:	d1fc      	bne.n	256a <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    2570:	4914      	ldr	r1, [pc, #80]	; (25c4 <sio2host_init+0x148>)
    2572:	2002      	movs	r0, #2
    2574:	4b14      	ldr	r3, [pc, #80]	; (25c8 <sio2host_init+0x14c>)
    2576:	4798      	blx	r3
    2578:	2204      	movs	r2, #4
    257a:	4b0c      	ldr	r3, [pc, #48]	; (25ac <sio2host_init+0x130>)
    257c:	759a      	strb	r2, [r3, #22]
    257e:	2280      	movs	r2, #128	; 0x80
    2580:	0112      	lsls	r2, r2, #4
    2582:	4b0f      	ldr	r3, [pc, #60]	; (25c0 <sio2host_init+0x144>)
    2584:	601a      	str	r2, [r3, #0]
}
    2586:	b011      	add	sp, #68	; 0x44
    2588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	000e0002 	.word	0x000e0002
    2590:	000f0002 	.word	0x000f0002
    2594:	2000011c 	.word	0x2000011c
    2598:	20000408 	.word	0x20000408
    259c:	00002405 	.word	0x00002405
    25a0:	20000404 	.word	0x20000404
    25a4:	000023d9 	.word	0x000023d9
    25a8:	20000400 	.word	0x20000400
    25ac:	42001000 	.word	0x42001000
    25b0:	000010d5 	.word	0x000010d5
    25b4:	20000058 	.word	0x20000058
    25b8:	00007aa1 	.word	0x00007aa1
    25bc:	00000c8d 	.word	0x00000c8d
    25c0:	e000e100 	.word	0xe000e100
    25c4:	0000241d 	.word	0x0000241d
    25c8:	00000c51 	.word	0x00000c51

000025cc <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    25cc:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    25ce:	7802      	ldrb	r2, [r0, #0]
    25d0:	4b08      	ldr	r3, [pc, #32]	; (25f4 <MiMAC_SetAltAddress+0x28>)
    25d2:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    25d4:	7842      	ldrb	r2, [r0, #1]
    25d6:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    25d8:	780a      	ldrb	r2, [r1, #0]
    25da:	4c07      	ldr	r4, [pc, #28]	; (25f8 <MiMAC_SetAltAddress+0x2c>)
    25dc:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    25de:	784a      	ldrb	r2, [r1, #1]
    25e0:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    25e2:	8818      	ldrh	r0, [r3, #0]
    25e4:	4b05      	ldr	r3, [pc, #20]	; (25fc <MiMAC_SetAltAddress+0x30>)
    25e6:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    25e8:	8820      	ldrh	r0, [r4, #0]
    25ea:	4b05      	ldr	r3, [pc, #20]	; (2600 <MiMAC_SetAltAddress+0x34>)
    25ec:	4798      	blx	r3
	return true;
}
    25ee:	2001      	movs	r0, #1
    25f0:	bd10      	pop	{r4, pc}
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	20000410 	.word	0x20000410
    25f8:	20000428 	.word	0x20000428
    25fc:	00002ed5 	.word	0x00002ed5
    2600:	00002eb5 	.word	0x00002eb5

00002604 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    2604:	b510      	push	{r4, lr}
    switch(id)
    2606:	2800      	cmp	r0, #0
    2608:	d109      	bne.n	261e <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    260a:	780b      	ldrb	r3, [r1, #0]
    260c:	2b1a      	cmp	r3, #26
    260e:	d807      	bhi.n	2620 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    2610:	4a04      	ldr	r2, [pc, #16]	; (2624 <MiMAC_Set+0x20>)
    2612:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    2614:	0018      	movs	r0, r3
    2616:	4b04      	ldr	r3, [pc, #16]	; (2628 <MiMAC_Set+0x24>)
    2618:	4798      	blx	r3
          return true;
    261a:	2001      	movs	r0, #1
    261c:	e000      	b.n	2620 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    261e:	2000      	movs	r0, #0
}
    2620:	bd10      	pop	{r4, pc}
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	2000042a 	.word	0x2000042a
    2628:	00002e91 	.word	0x00002e91

0000262c <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    262c:	b530      	push	{r4, r5, lr}
    262e:	b083      	sub	sp, #12
    2630:	466c      	mov	r4, sp
    2632:	9000      	str	r0, [sp, #0]
    2634:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    2636:	4b10      	ldr	r3, [pc, #64]	; (2678 <MiMAC_Init+0x4c>)
    2638:	4798      	blx	r3
	MACInitParams = initValue;
    263a:	4d10      	ldr	r5, [pc, #64]	; (267c <MiMAC_Init+0x50>)
    263c:	002b      	movs	r3, r5
    263e:	cc06      	ldmia	r4!, {r1, r2}
    2640:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    2642:	4b0f      	ldr	r3, [pc, #60]	; (2680 <MiMAC_Init+0x54>)
    2644:	4798      	blx	r3
    2646:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    2648:	2001      	movs	r0, #1
    264a:	4b0e      	ldr	r3, [pc, #56]	; (2684 <MiMAC_Init+0x58>)
    264c:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    264e:	4b0e      	ldr	r3, [pc, #56]	; (2688 <MiMAC_Init+0x5c>)
    2650:	701c      	strb	r4, [r3, #0]

	MACCurrentChannel = 11;
    2652:	220b      	movs	r2, #11
    2654:	4b0d      	ldr	r3, [pc, #52]	; (268c <MiMAC_Init+0x60>)
    2656:	701a      	strb	r2, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    2658:	6868      	ldr	r0, [r5, #4]
    265a:	4b0d      	ldr	r3, [pc, #52]	; (2690 <MiMAC_Init+0x64>)
    265c:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    265e:	4b0d      	ldr	r3, [pc, #52]	; (2694 <MiMAC_Init+0x68>)
    2660:	2200      	movs	r2, #0
    2662:	701a      	strb	r2, [r3, #0]
    2664:	217f      	movs	r1, #127	; 0x7f
    2666:	545a      	strb	r2, [r3, r1]
    2668:	317f      	adds	r1, #127	; 0x7f
    266a:	545a      	strb	r2, [r3, r1]
    266c:	217e      	movs	r1, #126	; 0x7e
    266e:	31ff      	adds	r1, #255	; 0xff
    2670:	545a      	strb	r2, [r3, r1]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    2672:	2001      	movs	r0, #1
    2674:	b003      	add	sp, #12
    2676:	bd30      	pop	{r4, r5, pc}
    2678:	00002e31 	.word	0x00002e31
    267c:	20000418 	.word	0x20000418
    2680:	00002de1 	.word	0x00002de1
    2684:	00002e7d 	.word	0x00002e7d
    2688:	2000040c 	.word	0x2000040c
    268c:	2000042a 	.word	0x2000042a
    2690:	00002f25 	.word	0x00002f25
    2694:	2000042c 	.word	0x2000042c

00002698 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    2698:	b5f0      	push	{r4, r5, r6, r7, lr}
    269a:	46de      	mov	lr, fp
    269c:	4657      	mov	r7, sl
    269e:	464e      	mov	r6, r9
    26a0:	4645      	mov	r5, r8
    26a2:	b5e0      	push	{r5, r6, r7, lr}
    26a4:	b0a5      	sub	sp, #148	; 0x94
    26a6:	9001      	str	r0, [sp, #4]
    26a8:	000e      	movs	r6, r1
    26aa:	9102      	str	r1, [sp, #8]
    26ac:	1c11      	adds	r1, r2, #0
    26ae:	0014      	movs	r4, r2
    26b0:	0a24      	lsrs	r4, r4, #8
    26b2:	9203      	str	r2, [sp, #12]
    26b4:	9300      	str	r3, [sp, #0]
    26b6:	aa2e      	add	r2, sp, #184	; 0xb8
    26b8:	7815      	ldrb	r5, [r2, #0]
    26ba:	aa2f      	add	r2, sp, #188	; 0xbc
    26bc:	7813      	ldrb	r3, [r2, #0]
    26be:	469b      	mov	fp, r3
    26c0:	b2c7      	uxtb	r7, r0
    26c2:	06b8      	lsls	r0, r7, #26
    26c4:	0fc3      	lsrs	r3, r0, #31
    26c6:	4699      	mov	r9, r3
    26c8:	b2c9      	uxtb	r1, r1
    26ca:	b2e2      	uxtb	r2, r4
	uint8_t frameControl = 0;
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif

    if (transParam.flags.bits.broadcast)
    26cc:	077b      	lsls	r3, r7, #29
    26ce:	d500      	bpl.n	26d2 <MiMAC_SendPacket+0x3a>
    {
        transParam.altDestAddr = true;
    26d0:	2101      	movs	r1, #1
        transParam.altSrcAddr = false;
    }
   #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    26d2:	2303      	movs	r3, #3
    26d4:	403b      	ands	r3, r7
    26d6:	2b01      	cmp	r3, #1
    26d8:	d03b      	beq.n	2752 <MiMAC_SendPacket+0xba>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    26da:	425c      	negs	r4, r3
    26dc:	415c      	adcs	r4, r3
        frameControl = 0x03;
    26de:	b2e0      	uxtb	r0, r4
    26e0:	4682      	mov	sl, r0
        frameControl = 0x01;
    }

    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    26e2:	ac01      	add	r4, sp, #4
    26e4:	8964      	ldrh	r4, [r4, #10]
    26e6:	487b      	ldr	r0, [pc, #492]	; (28d4 <MiMAC_SendPacket+0x23c>)
    26e8:	8800      	ldrh	r0, [r0, #0]
    26ea:	42a0      	cmp	r0, r4
    26ec:	d034      	beq.n	2758 <MiMAC_SendPacket+0xc0>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    26ee:	2400      	movs	r4, #0
        headerLength = 7;
    26f0:	2007      	movs	r0, #7
    26f2:	4684      	mov	ip, r0
    }
#endif

    if (transParam.altDestAddr)
    26f4:	4688      	mov	r8, r1
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    26f6:	4661      	mov	r1, ip
    26f8:	3108      	adds	r1, #8
    if (transParam.altDestAddr)
    26fa:	4640      	mov	r0, r8
    26fc:	2800      	cmp	r0, #0
    26fe:	d000      	beq.n	2702 <MiMAC_SendPacket+0x6a>
        headerLength += 2;
    2700:	3906      	subs	r1, #6
    }

    if (transParam.altSrcAddr)
    2702:	2a00      	cmp	r2, #0
    2704:	d037      	beq.n	2776 <MiMAC_SendPacket+0xde>
    {
        headerLength += 2;
    2706:	3102      	adds	r1, #2
    2708:	b2c9      	uxtb	r1, r1
    270a:	468c      	mov	ip, r1
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    270c:	2124      	movs	r1, #36	; 0x24
    270e:	4039      	ands	r1, r7
    2710:	2920      	cmp	r1, #32
    2712:	d034      	beq.n	277e <MiMAC_SendPacket+0xe6>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    2714:	2b03      	cmp	r3, #3
    2716:	d036      	beq.n	2786 <MiMAC_SendPacket+0xee>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    2718:	a904      	add	r1, sp, #16
    271a:	44ac      	add	ip, r5
    271c:	4663      	mov	r3, ip
    271e:	700b      	strb	r3, [r1, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    2720:	4653      	mov	r3, sl
    2722:	704b      	strb	r3, [r1, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    2724:	a901      	add	r1, sp, #4
    2726:	464b      	mov	r3, r9
    2728:	015b      	lsls	r3, r3, #5
    272a:	469c      	mov	ip, r3
    272c:	7808      	ldrb	r0, [r1, #0]
    272e:	2320      	movs	r3, #32
    2730:	4398      	bics	r0, r3
    2732:	4663      	mov	r3, ip
    2734:	4318      	orrs	r0, r3
    2736:	7008      	strb	r0, [r1, #0]
    2738:	4684      	mov	ip, r0
    273a:	43c1      	mvns	r1, r0
    273c:	078b      	lsls	r3, r1, #30
    273e:	d02a      	beq.n	2796 <MiMAC_SendPacket+0xfe>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    2740:	4643      	mov	r3, r8
    2742:	2b00      	cmp	r3, #0
    2744:	d049      	beq.n	27da <MiMAC_SendPacket+0x142>
    2746:	2a00      	cmp	r2, #0
    2748:	d02f      	beq.n	27aa <MiMAC_SendPacket+0x112>
        {
			packet[loc++] = 0x88;
    274a:	2088      	movs	r0, #136	; 0x88
    274c:	a904      	add	r1, sp, #16
    274e:	7088      	strb	r0, [r1, #2]
    2750:	e02e      	b.n	27b0 <MiMAC_SendPacket+0x118>
        frameControl = 0x03;
    2752:	2003      	movs	r0, #3
    2754:	4682      	mov	sl, r0
    2756:	e7c4      	b.n	26e2 <MiMAC_SendPacket+0x4a>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    2758:	485f      	ldr	r0, [pc, #380]	; (28d8 <MiMAC_SendPacket+0x240>)
    275a:	4284      	cmp	r4, r0
    275c:	d007      	beq.n	276e <MiMAC_SendPacket+0xd6>
        frameControl |= 0x40;
    275e:	2440      	movs	r4, #64	; 0x40
    2760:	4650      	mov	r0, sl
    2762:	4320      	orrs	r0, r4
    2764:	4682      	mov	sl, r0
        IntraPAN = true;
    2766:	3c3f      	subs	r4, #63	; 0x3f
        headerLength = 5;
    2768:	2005      	movs	r0, #5
    276a:	4684      	mov	ip, r0
        IntraPAN = true;
    276c:	e7c2      	b.n	26f4 <MiMAC_SendPacket+0x5c>
        IntraPAN = false;
    276e:	2400      	movs	r4, #0
        headerLength = 7;
    2770:	2007      	movs	r0, #7
    2772:	4684      	mov	ip, r0
    2774:	e7be      	b.n	26f4 <MiMAC_SendPacket+0x5c>
        headerLength += 8;
    2776:	3108      	adds	r1, #8
    2778:	b2c9      	uxtb	r1, r1
    277a:	468c      	mov	ip, r1
    277c:	e7c6      	b.n	270c <MiMAC_SendPacket+0x74>
        frameControl |= 0x20;
    277e:	4650      	mov	r0, sl
    2780:	4308      	orrs	r0, r1
    2782:	4682      	mov	sl, r0
    2784:	e7c6      	b.n	2714 <MiMAC_SendPacket+0x7c>
        transParam.altSrcAddr = true;
    2786:	2201      	movs	r2, #1
        transParam.flags.bits.ackReq = false;
    2788:	2300      	movs	r3, #0
    278a:	4699      	mov	r9, r3
        IntraPAN = false;
    278c:	2400      	movs	r4, #0
        frameControl = 0x00;
    278e:	469a      	mov	sl, r3
        headerLength = 7;
    2790:	3307      	adds	r3, #7
    2792:	469c      	mov	ip, r3
    2794:	e7c0      	b.n	2718 <MiMAC_SendPacket+0x80>
		packet[loc++] = 0x80;
    2796:	a904      	add	r1, sp, #16
    2798:	2080      	movs	r0, #128	; 0x80
    279a:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    279c:	4e4f      	ldr	r6, [pc, #316]	; (28dc <MiMAC_SendPacket+0x244>)
    279e:	7830      	ldrb	r0, [r6, #0]
    27a0:	1c43      	adds	r3, r0, #1
    27a2:	7033      	strb	r3, [r6, #0]
    27a4:	70c8      	strb	r0, [r1, #3]
    27a6:	2104      	movs	r1, #4
    27a8:	e02e      	b.n	2808 <MiMAC_SendPacket+0x170>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    27aa:	20c8      	movs	r0, #200	; 0xc8
    27ac:	a904      	add	r1, sp, #16
    27ae:	7088      	strb	r0, [r1, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    27b0:	494a      	ldr	r1, [pc, #296]	; (28dc <MiMAC_SendPacket+0x244>)
    27b2:	7808      	ldrb	r0, [r1, #0]
    27b4:	1c43      	adds	r3, r0, #1
    27b6:	700b      	strb	r3, [r1, #0]
    27b8:	a904      	add	r1, sp, #16
    27ba:	70c8      	strb	r0, [r1, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    27bc:	a801      	add	r0, sp, #4
    27be:	7a83      	ldrb	r3, [r0, #10]
    27c0:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    27c2:	7ac0      	ldrb	r0, [r0, #11]
    27c4:	7148      	strb	r0, [r1, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    27c6:	4663      	mov	r3, ip
    27c8:	075b      	lsls	r3, r3, #29
    27ca:	d418      	bmi.n	27fe <MiMAC_SendPacket+0x166>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    27cc:	a904      	add	r1, sp, #16
    27ce:	7830      	ldrb	r0, [r6, #0]
    27d0:	7188      	strb	r0, [r1, #6]
				packet[loc++] = transParam.DestAddress[1];
    27d2:	7870      	ldrb	r0, [r6, #1]
    27d4:	71c8      	strb	r0, [r1, #7]
    27d6:	2108      	movs	r1, #8
    27d8:	e016      	b.n	2808 <MiMAC_SendPacket+0x170>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    27da:	2a00      	cmp	r2, #0
    27dc:	d05c      	beq.n	2898 <MiMAC_SendPacket+0x200>
			packet[loc++] = 0x8C;
    27de:	a904      	add	r1, sp, #16
    27e0:	208c      	movs	r0, #140	; 0x8c
    27e2:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    27e4:	4b3d      	ldr	r3, [pc, #244]	; (28dc <MiMAC_SendPacket+0x244>)
    27e6:	7818      	ldrb	r0, [r3, #0]
    27e8:	1c47      	adds	r7, r0, #1
    27ea:	701f      	strb	r7, [r3, #0]
    27ec:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    27ee:	ab01      	add	r3, sp, #4
    27f0:	7a98      	ldrb	r0, [r3, #10]
    27f2:	7108      	strb	r0, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    27f4:	7ad8      	ldrb	r0, [r3, #11]
    27f6:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    27f8:	4663      	mov	r3, ip
    27fa:	075b      	lsls	r3, r3, #29
    27fc:	d560      	bpl.n	28c0 <MiMAC_SendPacket+0x228>
			packet[loc++] = 0xFF;
    27fe:	a904      	add	r1, sp, #16
    2800:	20ff      	movs	r0, #255	; 0xff
    2802:	7188      	strb	r0, [r1, #6]
			packet[loc++] = 0xFF;
    2804:	71c8      	strb	r0, [r1, #7]
    2806:	2108      	movs	r1, #8
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    2808:	2c00      	cmp	r4, #0
    280a:	d109      	bne.n	2820 <MiMAC_SendPacket+0x188>
    {
		packet[loc++] = MAC_PANID.v[0];
    280c:	1c48      	adds	r0, r1, #1
    280e:	b2c0      	uxtb	r0, r0
    2810:	ac04      	add	r4, sp, #16
    2812:	4e30      	ldr	r6, [pc, #192]	; (28d4 <MiMAC_SendPacket+0x23c>)
    2814:	7833      	ldrb	r3, [r6, #0]
    2816:	5463      	strb	r3, [r4, r1]
		packet[loc++] = MAC_PANID.v[1];
    2818:	3102      	adds	r1, #2
    281a:	b2c9      	uxtb	r1, r1
    281c:	7876      	ldrb	r6, [r6, #1]
    281e:	5426      	strb	r6, [r4, r0]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    2820:	2a00      	cmp	r2, #0
    2822:	d02a      	beq.n	287a <MiMAC_SendPacket+0x1e2>
    {
		packet[loc++] = myNetworkAddress.v[0];
    2824:	a804      	add	r0, sp, #16
    2826:	4c2e      	ldr	r4, [pc, #184]	; (28e0 <MiMAC_SendPacket+0x248>)
    2828:	7822      	ldrb	r2, [r4, #0]
    282a:	5442      	strb	r2, [r0, r1]
		packet[loc++] = myNetworkAddress.v[1];
    282c:	1c8a      	adds	r2, r1, #2
    282e:	b2d2      	uxtb	r2, r2
		packet[loc++] = myNetworkAddress.v[0];
    2830:	3101      	adds	r1, #1
		packet[loc++] = myNetworkAddress.v[1];
    2832:	b2c9      	uxtb	r1, r1
    2834:	7864      	ldrb	r4, [r4, #1]
    2836:	5444      	strb	r4, [r0, r1]
#endif


#ifndef ENABLE_SECURITY
    // write the payload
    for (i = 0; i < MACPayloadLen; i++)
    2838:	2d00      	cmp	r5, #0
    283a:	d00a      	beq.n	2852 <MiMAC_SendPacket+0x1ba>
    283c:	9900      	ldr	r1, [sp, #0]
    283e:	1955      	adds	r5, r2, r5
    2840:	b2ed      	uxtb	r5, r5
    {
		packet[loc++] = MACPayload[i];
    2842:	ae04      	add	r6, sp, #16
    2844:	1c50      	adds	r0, r2, #1
    2846:	780c      	ldrb	r4, [r1, #0]
    2848:	54b4      	strb	r4, [r6, r2]
    284a:	3101      	adds	r1, #1
    284c:	b2c2      	uxtb	r2, r0
    for (i = 0; i < MACPayloadLen; i++)
    284e:	4295      	cmp	r5, r2
    2850:	d1f8      	bne.n	2844 <MiMAC_SendPacket+0x1ac>
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    2852:	4a24      	ldr	r2, [pc, #144]	; (28e4 <MiMAC_SendPacket+0x24c>)
    2854:	9b00      	ldr	r3, [sp, #0]
    2856:	6013      	str	r3, [r2, #0]
	dataConfCallback = ConfCallback;
    2858:	4b23      	ldr	r3, [pc, #140]	; (28e8 <MiMAC_SendPacket+0x250>)
    285a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    285c:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    285e:	4b23      	ldr	r3, [pc, #140]	; (28ec <MiMAC_SendPacket+0x254>)
    2860:	465a      	mov	r2, fp
    2862:	701a      	strb	r2, [r3, #0]

    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
    2864:	a804      	add	r0, sp, #16
    2866:	4b22      	ldr	r3, [pc, #136]	; (28f0 <MiMAC_SendPacket+0x258>)
    2868:	4798      	blx	r3
    return true;
}
    286a:	2001      	movs	r0, #1
    286c:	b025      	add	sp, #148	; 0x94
    286e:	bc3c      	pop	{r2, r3, r4, r5}
    2870:	4690      	mov	r8, r2
    2872:	4699      	mov	r9, r3
    2874:	46a2      	mov	sl, r4
    2876:	46ab      	mov	fp, r5
    2878:	bdf0      	pop	{r4, r5, r6, r7, pc}
			packet[loc++] = MACInitParams.PAddress[i];
    287a:	4a1e      	ldr	r2, [pc, #120]	; (28f4 <MiMAC_SendPacket+0x25c>)
    287c:	6850      	ldr	r0, [r2, #4]
    287e:	000b      	movs	r3, r1
    2880:	3308      	adds	r3, #8
    2882:	b2db      	uxtb	r3, r3
    2884:	ae04      	add	r6, sp, #16
    2886:	1c4a      	adds	r2, r1, #1
    2888:	b2d2      	uxtb	r2, r2
    288a:	7804      	ldrb	r4, [r0, #0]
    288c:	5474      	strb	r4, [r6, r1]
    288e:	3001      	adds	r0, #1
    2890:	0011      	movs	r1, r2
        for (i = 0; i < 8; i++)
    2892:	429a      	cmp	r2, r3
    2894:	d1f7      	bne.n	2886 <MiMAC_SendPacket+0x1ee>
    2896:	e7cf      	b.n	2838 <MiMAC_SendPacket+0x1a0>
			packet[loc++] = 0xCC;
    2898:	a904      	add	r1, sp, #16
    289a:	20cc      	movs	r0, #204	; 0xcc
    289c:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    289e:	4b0f      	ldr	r3, [pc, #60]	; (28dc <MiMAC_SendPacket+0x244>)
    28a0:	4698      	mov	r8, r3
    28a2:	7818      	ldrb	r0, [r3, #0]
    28a4:	1c43      	adds	r3, r0, #1
    28a6:	4699      	mov	r9, r3
    28a8:	4643      	mov	r3, r8
    28aa:	464f      	mov	r7, r9
    28ac:	701f      	strb	r7, [r3, #0]
    28ae:	70c8      	strb	r0, [r1, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    28b0:	a801      	add	r0, sp, #4
    28b2:	7a83      	ldrb	r3, [r0, #10]
    28b4:	710b      	strb	r3, [r1, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    28b6:	7ac0      	ldrb	r0, [r0, #11]
    28b8:	7148      	strb	r0, [r1, #5]
        if (transParam.flags.bits.broadcast)
    28ba:	4663      	mov	r3, ip
    28bc:	075b      	lsls	r3, r3, #29
    28be:	d49e      	bmi.n	27fe <MiMAC_SendPacket+0x166>
        headerLength = 7;
    28c0:	2000      	movs	r0, #0
					packet[loc++] = transParam.DestAddress[i];
    28c2:	ab04      	add	r3, sp, #16
    28c4:	1819      	adds	r1, r3, r0
    28c6:	5c33      	ldrb	r3, [r6, r0]
    28c8:	718b      	strb	r3, [r1, #6]
    28ca:	3001      	adds	r0, #1
                for (i = 0; i < 8; i++)
    28cc:	2808      	cmp	r0, #8
    28ce:	d1f8      	bne.n	28c2 <MiMAC_SendPacket+0x22a>
					packet[loc++] = transParam.DestAddress[i];
    28d0:	210e      	movs	r1, #14
    28d2:	e799      	b.n	2808 <MiMAC_SendPacket+0x170>
    28d4:	20000428 	.word	0x20000428
    28d8:	0000ffff 	.word	0x0000ffff
    28dc:	2000040c 	.word	0x2000040c
    28e0:	20000410 	.word	0x20000410
    28e4:	200001f8 	.word	0x200001f8
    28e8:	200001f0 	.word	0x200001f0
    28ec:	200001f4 	.word	0x200001f4
    28f0:	00002d95 	.word	0x00002d95
    28f4:	20000418 	.word	0x20000418

000028f8 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    28f8:	4b04      	ldr	r3, [pc, #16]	; (290c <MiMAC_DiscardPacket+0x14>)
    28fa:	781b      	ldrb	r3, [r3, #0]
    28fc:	2b03      	cmp	r3, #3
    28fe:	d804      	bhi.n	290a <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    2900:	01da      	lsls	r2, r3, #7
    2902:	1ad3      	subs	r3, r2, r3
    2904:	2100      	movs	r1, #0
    2906:	4a02      	ldr	r2, [pc, #8]	; (2910 <MiMAC_DiscardPacket+0x18>)
    2908:	5499      	strb	r1, [r3, r2]
	}
}
    290a:	4770      	bx	lr
    290c:	20000009 	.word	0x20000009
    2910:	2000042c 	.word	0x2000042c

00002914 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    2914:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	BankIndex = 0xFF;
    2916:	22ff      	movs	r2, #255	; 0xff
    2918:	4bcd      	ldr	r3, [pc, #820]	; (2c50 <MiMAC_ReceivedPacket+0x33c>)
    291a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    291c:	4bcd      	ldr	r3, [pc, #820]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    291e:	781b      	ldrb	r3, [r3, #0]
    2920:	2b00      	cmp	r3, #0
    2922:	d000      	beq.n	2926 <MiMAC_ReceivedPacket+0x12>
    2924:	e1bd      	b.n	2ca2 <MiMAC_ReceivedPacket+0x38e>
    2926:	337f      	adds	r3, #127	; 0x7f
    2928:	4aca      	ldr	r2, [pc, #808]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    292a:	5cd3      	ldrb	r3, [r2, r3]
    292c:	2b00      	cmp	r3, #0
    292e:	d10b      	bne.n	2948 <MiMAC_ReceivedPacket+0x34>
    2930:	33fe      	adds	r3, #254	; 0xfe
    2932:	5cd3      	ldrb	r3, [r2, r3]
    2934:	2b00      	cmp	r3, #0
    2936:	d12e      	bne.n	2996 <MiMAC_ReceivedPacket+0x82>
    2938:	237e      	movs	r3, #126	; 0x7e
    293a:	33ff      	adds	r3, #255	; 0xff
    293c:	5cd3      	ldrb	r3, [r2, r3]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
		#endif

		return true;
	}
	return false;
    293e:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    2940:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    2942:	2b00      	cmp	r3, #0
    2944:	d101      	bne.n	294a <MiMAC_ReceivedPacket+0x36>
}
    2946:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < BANK_SIZE; i++)
    2948:	2201      	movs	r2, #1
			BankIndex = i;
    294a:	4bc1      	ldr	r3, [pc, #772]	; (2c50 <MiMAC_ReceivedPacket+0x33c>)
    294c:	701a      	strb	r2, [r3, #0]
	return false;
    294e:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    2950:	2a03      	cmp	r2, #3
    2952:	d8f8      	bhi.n	2946 <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    2954:	0010      	movs	r0, r2
    2956:	01d1      	lsls	r1, r2, #7
    2958:	1a89      	subs	r1, r1, r2
    295a:	4bbe      	ldr	r3, [pc, #760]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    295c:	185b      	adds	r3, r3, r1
    295e:	785d      	ldrb	r5, [r3, #1]
    2960:	2440      	movs	r4, #64	; 0x40
    2962:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    2964:	49bc      	ldr	r1, [pc, #752]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2966:	2400      	movs	r4, #0
    2968:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    296a:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    296c:	789b      	ldrb	r3, [r3, #2]
    296e:	2133      	movs	r1, #51	; 0x33
    2970:	438b      	bics	r3, r1
		switch (addrMode)
    2972:	b2d9      	uxtb	r1, r3
    2974:	2988      	cmp	r1, #136	; 0x88
    2976:	d100      	bne.n	297a <MiMAC_ReceivedPacket+0x66>
    2978:	e0c4      	b.n	2b04 <MiMAC_ReceivedPacket+0x1f0>
    297a:	d90e      	bls.n	299a <MiMAC_ReceivedPacket+0x86>
    297c:	b2d9      	uxtb	r1, r3
    297e:	29c8      	cmp	r1, #200	; 0xc8
    2980:	d046      	beq.n	2a10 <MiMAC_ReceivedPacket+0xfc>
    2982:	29cc      	cmp	r1, #204	; 0xcc
    2984:	d100      	bne.n	2988 <MiMAC_ReceivedPacket+0x74>
    2986:	e08a      	b.n	2a9e <MiMAC_ReceivedPacket+0x18a>
    2988:	298c      	cmp	r1, #140	; 0x8c
    298a:	d100      	bne.n	298e <MiMAC_ReceivedPacket+0x7a>
    298c:	e104      	b.n	2b98 <MiMAC_ReceivedPacket+0x284>
			MiMAC_DiscardPacket();
    298e:	4bb3      	ldr	r3, [pc, #716]	; (2c5c <MiMAC_ReceivedPacket+0x348>)
    2990:	4798      	blx	r3
			return false;
    2992:	2000      	movs	r0, #0
    2994:	e7d7      	b.n	2946 <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    2996:	2202      	movs	r2, #2
    2998:	e7d7      	b.n	294a <MiMAC_ReceivedPacket+0x36>
		switch (addrMode)
    299a:	2b08      	cmp	r3, #8
    299c:	d100      	bne.n	29a0 <MiMAC_ReceivedPacket+0x8c>
    299e:	e131      	b.n	2c04 <MiMAC_ReceivedPacket+0x2f0>
    29a0:	2980      	cmp	r1, #128	; 0x80
    29a2:	d1f4      	bne.n	298e <MiMAC_ReceivedPacket+0x7a>
				MACRxPacket.flags.bits.broadcast = 1;
    29a4:	4bac      	ldr	r3, [pc, #688]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    29a6:	7819      	ldrb	r1, [r3, #0]
    29a8:	2404      	movs	r4, #4
    29aa:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    29ac:	2480      	movs	r4, #128	; 0x80
    29ae:	4264      	negs	r4, r4
    29b0:	4321      	orrs	r1, r4
    29b2:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    29b4:	2101      	movs	r1, #1
    29b6:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    29b8:	4ca6      	ldr	r4, [pc, #664]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    29ba:	01d1      	lsls	r1, r2, #7
    29bc:	1a88      	subs	r0, r1, r2
    29be:	1821      	adds	r1, r4, r0
    29c0:	790d      	ldrb	r5, [r1, #4]
    29c2:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    29c4:	7949      	ldrb	r1, [r1, #5]
    29c6:	7459      	strb	r1, [r3, #17]
    29c8:	01d1      	lsls	r1, r2, #7
    29ca:	1a8a      	subs	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    29cc:	1d91      	adds	r1, r2, #6
    29ce:	1909      	adds	r1, r1, r4
    29d0:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    29d2:	5d01      	ldrb	r1, [r0, r4]
    29d4:	390b      	subs	r1, #11
    29d6:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    29d8:	3208      	adds	r2, #8
    29da:	1912      	adds	r2, r2, r4
    29dc:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    29de:	4b9c      	ldr	r3, [pc, #624]	; (2c50 <MiMAC_ReceivedPacket+0x33c>)
    29e0:	781b      	ldrb	r3, [r3, #0]
    29e2:	01d9      	lsls	r1, r3, #7
    29e4:	1ac9      	subs	r1, r1, r3
    29e6:	4a9b      	ldr	r2, [pc, #620]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    29e8:	1852      	adds	r2, r2, r1
    29ea:	7851      	ldrb	r1, [r2, #1]
    29ec:	070a      	lsls	r2, r1, #28
    29ee:	d500      	bpl.n	29f2 <MiMAC_ReceivedPacket+0xde>
    29f0:	e129      	b.n	2c46 <MiMAC_ReceivedPacket+0x332>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    29f2:	2207      	movs	r2, #7
    29f4:	400a      	ands	r2, r1
    29f6:	2a01      	cmp	r2, #1
    29f8:	d100      	bne.n	29fc <MiMAC_ReceivedPacket+0xe8>
    29fa:	e131      	b.n	2c60 <MiMAC_ReceivedPacket+0x34c>
    29fc:	2a00      	cmp	r2, #0
    29fe:	d100      	bne.n	2a02 <MiMAC_ReceivedPacket+0xee>
    2a00:	e149      	b.n	2c96 <MiMAC_ReceivedPacket+0x382>
    2a02:	2a03      	cmp	r2, #3
    2a04:	d100      	bne.n	2a08 <MiMAC_ReceivedPacket+0xf4>
    2a06:	e13e      	b.n	2c86 <MiMAC_ReceivedPacket+0x372>
			MiMAC_DiscardPacket();
    2a08:	4b94      	ldr	r3, [pc, #592]	; (2c5c <MiMAC_ReceivedPacket+0x348>)
    2a0a:	4798      	blx	r3
			return false;
    2a0c:	2000      	movs	r0, #0
    2a0e:	e79a      	b.n	2946 <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2a10:	01d1      	lsls	r1, r2, #7
    2a12:	1a89      	subs	r1, r1, r2
    2a14:	4b8f      	ldr	r3, [pc, #572]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2a16:	185b      	adds	r3, r3, r1
    2a18:	799b      	ldrb	r3, [r3, #6]
    2a1a:	2bff      	cmp	r3, #255	; 0xff
    2a1c:	d01c      	beq.n	2a58 <MiMAC_ReceivedPacket+0x144>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    2a1e:	498e      	ldr	r1, [pc, #568]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2a20:	780c      	ldrb	r4, [r1, #0]
    2a22:	2380      	movs	r3, #128	; 0x80
    2a24:	425b      	negs	r3, r3
    2a26:	4323      	orrs	r3, r4
    2a28:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    2a2a:	2d00      	cmp	r5, #0
    2a2c:	d021      	beq.n	2a72 <MiMAC_ReceivedPacket+0x15e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2a2e:	4c89      	ldr	r4, [pc, #548]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2a30:	01c3      	lsls	r3, r0, #7
    2a32:	1a18      	subs	r0, r3, r0
    2a34:	1823      	adds	r3, r4, r0
    2a36:	791d      	ldrb	r5, [r3, #4]
    2a38:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2a3a:	795b      	ldrb	r3, [r3, #5]
    2a3c:	744b      	strb	r3, [r1, #17]
    2a3e:	01d3      	lsls	r3, r2, #7
    2a40:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    2a42:	0013      	movs	r3, r2
    2a44:	3308      	adds	r3, #8
    2a46:	191b      	adds	r3, r3, r4
    2a48:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    2a4a:	5d03      	ldrb	r3, [r0, r4]
    2a4c:	3b13      	subs	r3, #19
    2a4e:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2a50:	3210      	adds	r2, #16
    2a52:	1912      	adds	r2, r2, r4
    2a54:	608a      	str	r2, [r1, #8]
    2a56:	e7c2      	b.n	29de <MiMAC_ReceivedPacket+0xca>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2a58:	01d1      	lsls	r1, r2, #7
    2a5a:	1a89      	subs	r1, r1, r2
    2a5c:	4b7d      	ldr	r3, [pc, #500]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2a5e:	185b      	adds	r3, r3, r1
    2a60:	79db      	ldrb	r3, [r3, #7]
    2a62:	2bff      	cmp	r3, #255	; 0xff
    2a64:	d1db      	bne.n	2a1e <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.flags.bits.broadcast = 1;
    2a66:	497c      	ldr	r1, [pc, #496]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2a68:	780b      	ldrb	r3, [r1, #0]
    2a6a:	2404      	movs	r4, #4
    2a6c:	4323      	orrs	r3, r4
    2a6e:	700b      	strb	r3, [r1, #0]
    2a70:	e7d5      	b.n	2a1e <MiMAC_ReceivedPacket+0x10a>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    2a72:	4979      	ldr	r1, [pc, #484]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2a74:	4c77      	ldr	r4, [pc, #476]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2a76:	01c3      	lsls	r3, r0, #7
    2a78:	1a18      	subs	r0, r3, r0
    2a7a:	1823      	adds	r3, r4, r0
    2a7c:	7a1d      	ldrb	r5, [r3, #8]
    2a7e:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2a80:	7a5b      	ldrb	r3, [r3, #9]
    2a82:	744b      	strb	r3, [r1, #17]
    2a84:	01d3      	lsls	r3, r2, #7
    2a86:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2a88:	0013      	movs	r3, r2
    2a8a:	330a      	adds	r3, #10
    2a8c:	191b      	adds	r3, r3, r4
    2a8e:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2a90:	5d03      	ldrb	r3, [r0, r4]
    2a92:	3b15      	subs	r3, #21
    2a94:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2a96:	3212      	adds	r2, #18
    2a98:	1912      	adds	r2, r2, r4
    2a9a:	608a      	str	r2, [r1, #8]
    2a9c:	e79f      	b.n	29de <MiMAC_ReceivedPacket+0xca>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    2a9e:	496e      	ldr	r1, [pc, #440]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2aa0:	780c      	ldrb	r4, [r1, #0]
    2aa2:	2380      	movs	r3, #128	; 0x80
    2aa4:	425b      	negs	r3, r3
    2aa6:	4323      	orrs	r3, r4
    2aa8:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    2aaa:	2d00      	cmp	r5, #0
    2aac:	d014      	beq.n	2ad8 <MiMAC_ReceivedPacket+0x1c4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2aae:	4c69      	ldr	r4, [pc, #420]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2ab0:	01d3      	lsls	r3, r2, #7
    2ab2:	1a98      	subs	r0, r3, r2
    2ab4:	1823      	adds	r3, r4, r0
    2ab6:	791d      	ldrb	r5, [r3, #4]
    2ab8:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2aba:	795b      	ldrb	r3, [r3, #5]
    2abc:	744b      	strb	r3, [r1, #17]
    2abe:	01d3      	lsls	r3, r2, #7
    2ac0:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    2ac2:	0013      	movs	r3, r2
    2ac4:	330e      	adds	r3, #14
    2ac6:	191b      	adds	r3, r3, r4
    2ac8:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    2aca:	5d03      	ldrb	r3, [r0, r4]
    2acc:	3b19      	subs	r3, #25
    2ace:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    2ad0:	3216      	adds	r2, #22
    2ad2:	1912      	adds	r2, r2, r4
    2ad4:	608a      	str	r2, [r1, #8]
    2ad6:	e782      	b.n	29de <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    2ad8:	495f      	ldr	r1, [pc, #380]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2ada:	4c5e      	ldr	r4, [pc, #376]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2adc:	01d3      	lsls	r3, r2, #7
    2ade:	1a98      	subs	r0, r3, r2
    2ae0:	1823      	adds	r3, r4, r0
    2ae2:	7b9d      	ldrb	r5, [r3, #14]
    2ae4:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    2ae6:	7bdb      	ldrb	r3, [r3, #15]
    2ae8:	744b      	strb	r3, [r1, #17]
    2aea:	01d3      	lsls	r3, r2, #7
    2aec:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    2aee:	0013      	movs	r3, r2
    2af0:	3310      	adds	r3, #16
    2af2:	191b      	adds	r3, r3, r4
    2af4:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    2af6:	5d03      	ldrb	r3, [r0, r4]
    2af8:	3b1b      	subs	r3, #27
    2afa:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    2afc:	3218      	adds	r2, #24
    2afe:	1912      	adds	r2, r2, r4
    2b00:	608a      	str	r2, [r1, #8]
    2b02:	e76c      	b.n	29de <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2b04:	01d1      	lsls	r1, r2, #7
    2b06:	1a89      	subs	r1, r1, r2
    2b08:	4b52      	ldr	r3, [pc, #328]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2b0a:	185b      	adds	r3, r3, r1
    2b0c:	799b      	ldrb	r3, [r3, #6]
    2b0e:	2bff      	cmp	r3, #255	; 0xff
    2b10:	d01f      	beq.n	2b52 <MiMAC_ReceivedPacket+0x23e>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2b12:	4b51      	ldr	r3, [pc, #324]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2b14:	781c      	ldrb	r4, [r3, #0]
    2b16:	2180      	movs	r1, #128	; 0x80
    2b18:	4249      	negs	r1, r1
    2b1a:	4321      	orrs	r1, r4
    2b1c:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2b1e:	2101      	movs	r1, #1
    2b20:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    2b22:	2d00      	cmp	r5, #0
    2b24:	d122      	bne.n	2b6c <MiMAC_ReceivedPacket+0x258>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    2b26:	0019      	movs	r1, r3
    2b28:	4c4a      	ldr	r4, [pc, #296]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2b2a:	01c3      	lsls	r3, r0, #7
    2b2c:	1a18      	subs	r0, r3, r0
    2b2e:	1823      	adds	r3, r4, r0
    2b30:	7a1d      	ldrb	r5, [r3, #8]
    2b32:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2b34:	7a5b      	ldrb	r3, [r3, #9]
    2b36:	744b      	strb	r3, [r1, #17]
    2b38:	01d3      	lsls	r3, r2, #7
    2b3a:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2b3c:	0013      	movs	r3, r2
    2b3e:	330a      	adds	r3, #10
    2b40:	191b      	adds	r3, r3, r4
    2b42:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    2b44:	5d03      	ldrb	r3, [r0, r4]
    2b46:	3b0f      	subs	r3, #15
    2b48:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    2b4a:	320c      	adds	r2, #12
    2b4c:	1912      	adds	r2, r2, r4
    2b4e:	608a      	str	r2, [r1, #8]
    2b50:	e745      	b.n	29de <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2b52:	01d1      	lsls	r1, r2, #7
    2b54:	1a89      	subs	r1, r1, r2
    2b56:	4b3f      	ldr	r3, [pc, #252]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2b58:	185b      	adds	r3, r3, r1
    2b5a:	79db      	ldrb	r3, [r3, #7]
    2b5c:	2bff      	cmp	r3, #255	; 0xff
    2b5e:	d1d8      	bne.n	2b12 <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.flags.bits.broadcast = 1;
    2b60:	493d      	ldr	r1, [pc, #244]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2b62:	780b      	ldrb	r3, [r1, #0]
    2b64:	2404      	movs	r4, #4
    2b66:	4323      	orrs	r3, r4
    2b68:	700b      	strb	r3, [r1, #0]
    2b6a:	e7d2      	b.n	2b12 <MiMAC_ReceivedPacket+0x1fe>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2b6c:	493a      	ldr	r1, [pc, #232]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2b6e:	4c39      	ldr	r4, [pc, #228]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2b70:	01c3      	lsls	r3, r0, #7
    2b72:	1a18      	subs	r0, r3, r0
    2b74:	1823      	adds	r3, r4, r0
    2b76:	791d      	ldrb	r5, [r3, #4]
    2b78:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2b7a:	795b      	ldrb	r3, [r3, #5]
    2b7c:	744b      	strb	r3, [r1, #17]
    2b7e:	01d3      	lsls	r3, r2, #7
    2b80:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    2b82:	0013      	movs	r3, r2
    2b84:	3308      	adds	r3, #8
    2b86:	191b      	adds	r3, r3, r4
    2b88:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    2b8a:	5d03      	ldrb	r3, [r0, r4]
    2b8c:	3b0d      	subs	r3, #13
    2b8e:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    2b90:	320a      	adds	r2, #10
    2b92:	1912      	adds	r2, r2, r4
    2b94:	608a      	str	r2, [r1, #8]
    2b96:	e722      	b.n	29de <MiMAC_ReceivedPacket+0xca>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    2b98:	4b2f      	ldr	r3, [pc, #188]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2b9a:	781c      	ldrb	r4, [r3, #0]
    2b9c:	2180      	movs	r1, #128	; 0x80
    2b9e:	4249      	negs	r1, r1
    2ba0:	4321      	orrs	r1, r4
    2ba2:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    2ba4:	2101      	movs	r1, #1
    2ba6:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    2ba8:	2d00      	cmp	r5, #0
    2baa:	d015      	beq.n	2bd8 <MiMAC_ReceivedPacket+0x2c4>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2bac:	0019      	movs	r1, r3
    2bae:	4c29      	ldr	r4, [pc, #164]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2bb0:	01d3      	lsls	r3, r2, #7
    2bb2:	1a98      	subs	r0, r3, r2
    2bb4:	1823      	adds	r3, r4, r0
    2bb6:	791d      	ldrb	r5, [r3, #4]
    2bb8:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2bba:	795b      	ldrb	r3, [r3, #5]
    2bbc:	744b      	strb	r3, [r1, #17]
    2bbe:	01d3      	lsls	r3, r2, #7
    2bc0:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    2bc2:	0013      	movs	r3, r2
    2bc4:	330e      	adds	r3, #14
    2bc6:	191b      	adds	r3, r3, r4
    2bc8:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    2bca:	5d03      	ldrb	r3, [r0, r4]
    2bcc:	3b13      	subs	r3, #19
    2bce:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2bd0:	3210      	adds	r2, #16
    2bd2:	1912      	adds	r2, r2, r4
    2bd4:	608a      	str	r2, [r1, #8]
    2bd6:	e702      	b.n	29de <MiMAC_ReceivedPacket+0xca>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    2bd8:	491f      	ldr	r1, [pc, #124]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2bda:	4c1e      	ldr	r4, [pc, #120]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2bdc:	01d3      	lsls	r3, r2, #7
    2bde:	1a98      	subs	r0, r3, r2
    2be0:	1823      	adds	r3, r4, r0
    2be2:	7b5d      	ldrb	r5, [r3, #13]
    2be4:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    2be6:	7b9b      	ldrb	r3, [r3, #14]
    2be8:	744b      	strb	r3, [r1, #17]
    2bea:	01d3      	lsls	r3, r2, #7
    2bec:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    2bee:	0013      	movs	r3, r2
    2bf0:	330f      	adds	r3, #15
    2bf2:	191b      	adds	r3, r3, r4
    2bf4:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2bf6:	5d03      	ldrb	r3, [r0, r4]
    2bf8:	3b15      	subs	r3, #21
    2bfa:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2bfc:	3212      	adds	r2, #18
    2bfe:	1912      	adds	r2, r2, r4
    2c00:	608a      	str	r2, [r1, #8]
    2c02:	e6ec      	b.n	29de <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2c04:	01d1      	lsls	r1, r2, #7
    2c06:	1a89      	subs	r1, r1, r2
    2c08:	4b12      	ldr	r3, [pc, #72]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2c0a:	185b      	adds	r3, r3, r1
    2c0c:	799b      	ldrb	r3, [r3, #6]
    2c0e:	2bff      	cmp	r3, #255	; 0xff
    2c10:	d00c      	beq.n	2c2c <MiMAC_ReceivedPacket+0x318>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    2c12:	4911      	ldr	r1, [pc, #68]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2c14:	4c0f      	ldr	r4, [pc, #60]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2c16:	01c3      	lsls	r3, r0, #7
    2c18:	1a18      	subs	r0, r3, r0
    2c1a:	5d03      	ldrb	r3, [r0, r4]
    2c1c:	3b0a      	subs	r3, #10
    2c1e:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    2c20:	01d3      	lsls	r3, r2, #7
    2c22:	1a9a      	subs	r2, r3, r2
    2c24:	3208      	adds	r2, #8
    2c26:	1912      	adds	r2, r2, r4
    2c28:	608a      	str	r2, [r1, #8]
			break;
    2c2a:	e6d8      	b.n	29de <MiMAC_ReceivedPacket+0xca>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    2c2c:	01d1      	lsls	r1, r2, #7
    2c2e:	1a89      	subs	r1, r1, r2
    2c30:	4b08      	ldr	r3, [pc, #32]	; (2c54 <MiMAC_ReceivedPacket+0x340>)
    2c32:	185b      	adds	r3, r3, r1
    2c34:	79db      	ldrb	r3, [r3, #7]
    2c36:	2bff      	cmp	r3, #255	; 0xff
    2c38:	d1eb      	bne.n	2c12 <MiMAC_ReceivedPacket+0x2fe>
					MACRxPacket.flags.bits.broadcast = 1;
    2c3a:	4907      	ldr	r1, [pc, #28]	; (2c58 <MiMAC_ReceivedPacket+0x344>)
    2c3c:	780b      	ldrb	r3, [r1, #0]
    2c3e:	2404      	movs	r4, #4
    2c40:	4323      	orrs	r3, r4
    2c42:	700b      	strb	r3, [r1, #0]
    2c44:	e7e5      	b.n	2c12 <MiMAC_ReceivedPacket+0x2fe>
			MiMAC_DiscardPacket();
    2c46:	4b05      	ldr	r3, [pc, #20]	; (2c5c <MiMAC_ReceivedPacket+0x348>)
    2c48:	4798      	blx	r3
			return false;
    2c4a:	2000      	movs	r0, #0
    2c4c:	e67b      	b.n	2946 <MiMAC_ReceivedPacket+0x32>
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	20000009 	.word	0x20000009
    2c54:	2000042c 	.word	0x2000042c
    2c58:	200013b0 	.word	0x200013b0
    2c5c:	000028f9 	.word	0x000028f9
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    2c60:	4912      	ldr	r1, [pc, #72]	; (2cac <MiMAC_ReceivedPacket+0x398>)
    2c62:	780a      	ldrb	r2, [r1, #0]
    2c64:	2003      	movs	r0, #3
    2c66:	4382      	bics	r2, r0
    2c68:	700a      	strb	r2, [r1, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    2c6a:	4a11      	ldr	r2, [pc, #68]	; (2cb0 <MiMAC_ReceivedPacket+0x39c>)
    2c6c:	01d9      	lsls	r1, r3, #7
    2c6e:	1acb      	subs	r3, r1, r3
    2c70:	5c98      	ldrb	r0, [r3, r2]
    2c72:	490e      	ldr	r1, [pc, #56]	; (2cac <MiMAC_ReceivedPacket+0x398>)
    2c74:	18d3      	adds	r3, r2, r3
    2c76:	181a      	adds	r2, r3, r0
    2c78:	3a01      	subs	r2, #1
    2c7a:	7812      	ldrb	r2, [r2, #0]
    2c7c:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    2c7e:	5c1b      	ldrb	r3, [r3, r0]
    2c80:	734b      	strb	r3, [r1, #13]
		return true;
    2c82:	2001      	movs	r0, #1
    2c84:	e65f      	b.n	2946 <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    2c86:	4909      	ldr	r1, [pc, #36]	; (2cac <MiMAC_ReceivedPacket+0x398>)
    2c88:	780a      	ldrb	r2, [r1, #0]
    2c8a:	2003      	movs	r0, #3
    2c8c:	4382      	bics	r2, r0
    2c8e:	2001      	movs	r0, #1
    2c90:	4302      	orrs	r2, r0
    2c92:	700a      	strb	r2, [r1, #0]
			break;
    2c94:	e7e9      	b.n	2c6a <MiMAC_ReceivedPacket+0x356>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    2c96:	4905      	ldr	r1, [pc, #20]	; (2cac <MiMAC_ReceivedPacket+0x398>)
    2c98:	780a      	ldrb	r2, [r1, #0]
    2c9a:	2003      	movs	r0, #3
    2c9c:	4302      	orrs	r2, r0
    2c9e:	700a      	strb	r2, [r1, #0]
			break;
    2ca0:	e7e3      	b.n	2c6a <MiMAC_ReceivedPacket+0x356>
			BankIndex = i;
    2ca2:	2200      	movs	r2, #0
    2ca4:	4b03      	ldr	r3, [pc, #12]	; (2cb4 <MiMAC_ReceivedPacket+0x3a0>)
    2ca6:	701a      	strb	r2, [r3, #0]
    2ca8:	e654      	b.n	2954 <MiMAC_ReceivedPacket+0x40>
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	200013b0 	.word	0x200013b0
    2cb0:	2000042c 	.word	0x2000042c
    2cb4:	20000009 	.word	0x20000009

00002cb8 <MiMAC_SymbolToTicks>:
* Returns:
*      converted value in uint32.
*****************************************************************************************/
uint32_t MiMAC_SymbolToTicks(uint32_t symbols)
{
	return SYMBOLS_TO_TICKS(symbols);
    2cb8:	0100      	lsls	r0, r0, #4
}
    2cba:	4770      	bx	lr

00002cbc <MiMAC_GetPHYChannelInfo>:
*****************************************************************************************/
uint32_t MiMAC_GetPHYChannelInfo(void)
{
	uint32_t channelMap = FULL_CHANNEL_MAP;
	return channelMap;
}
    2cbc:	4800      	ldr	r0, [pc, #0]	; (2cc0 <MiMAC_GetPHYChannelInfo+0x4>)
    2cbe:	4770      	bx	lr
    2cc0:	07fff800 	.word	0x07fff800

00002cc4 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    2cc4:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <PHY_DataConf+0xc>)
    2cc6:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    2cc8:	2201      	movs	r2, #1
    2cca:	4b02      	ldr	r3, [pc, #8]	; (2cd4 <PHY_DataConf+0x10>)
    2ccc:	701a      	strb	r2, [r3, #0]
}
    2cce:	4770      	bx	lr
    2cd0:	20000420 	.word	0x20000420
    2cd4:	200001ed 	.word	0x200001ed

00002cd8 <MiMAC_Task>:

void MiMAC_Task(void)
{
    2cd8:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    2cda:	4b0b      	ldr	r3, [pc, #44]	; (2d08 <MiMAC_Task+0x30>)
    2cdc:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    2cde:	4b0b      	ldr	r3, [pc, #44]	; (2d0c <MiMAC_Task+0x34>)
    2ce0:	681b      	ldr	r3, [r3, #0]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d003      	beq.n	2cee <MiMAC_Task+0x16>
    2ce6:	4a0a      	ldr	r2, [pc, #40]	; (2d10 <MiMAC_Task+0x38>)
    2ce8:	7812      	ldrb	r2, [r2, #0]
    2cea:	2a00      	cmp	r2, #0
    2cec:	d100      	bne.n	2cf0 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    2cee:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    2cf0:	4a08      	ldr	r2, [pc, #32]	; (2d14 <MiMAC_Task+0x3c>)
    2cf2:	6812      	ldr	r2, [r2, #0]
    2cf4:	4908      	ldr	r1, [pc, #32]	; (2d18 <MiMAC_Task+0x40>)
    2cf6:	7809      	ldrb	r1, [r1, #0]
    2cf8:	4808      	ldr	r0, [pc, #32]	; (2d1c <MiMAC_Task+0x44>)
    2cfa:	7800      	ldrb	r0, [r0, #0]
    2cfc:	4798      	blx	r3
	  dataConfAvailable = false;
    2cfe:	2200      	movs	r2, #0
    2d00:	4b03      	ldr	r3, [pc, #12]	; (2d10 <MiMAC_Task+0x38>)
    2d02:	701a      	strb	r2, [r3, #0]
}
    2d04:	e7f3      	b.n	2cee <MiMAC_Task+0x16>
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	00002f45 	.word	0x00002f45
    2d0c:	200001f0 	.word	0x200001f0
    2d10:	200001ed 	.word	0x200001ed
    2d14:	200001f8 	.word	0x200001f8
    2d18:	20000420 	.word	0x20000420
    2d1c:	200001f4 	.word	0x200001f4

00002d20 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d22:	0004      	movs	r4, r0
	trx_reg_write(reg, value);
    2d24:	4f0b      	ldr	r7, [pc, #44]	; (2d54 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    2d26:	4e0c      	ldr	r6, [pc, #48]	; (2d58 <phyTrxSetState+0x38>)
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d28:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2d2a:	2103      	movs	r1, #3
    2d2c:	2002      	movs	r0, #2
    2d2e:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2d30:	2001      	movs	r0, #1
    2d32:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d34:	4028      	ands	r0, r5
    2d36:	2808      	cmp	r0, #8
    2d38:	d1f7      	bne.n	2d2a <phyTrxSetState+0xa>
	trx_reg_write(reg, value);
    2d3a:	4f06      	ldr	r7, [pc, #24]	; (2d54 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    2d3c:	4e06      	ldr	r6, [pc, #24]	; (2d58 <phyTrxSetState+0x38>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d3e:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    2d40:	0021      	movs	r1, r4
    2d42:	2002      	movs	r0, #2
    2d44:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2d46:	2001      	movs	r0, #1
    2d48:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d4a:	4028      	ands	r0, r5
    2d4c:	4284      	cmp	r4, r0
    2d4e:	d1f7      	bne.n	2d40 <phyTrxSetState+0x20>
}
    2d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	00003d99 	.word	0x00003d99
    2d58:	00003c9d 	.word	0x00003c9d

00002d5c <phySetRxState>:
{
    2d5c:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2d5e:	2008      	movs	r0, #8
    2d60:	4b08      	ldr	r3, [pc, #32]	; (2d84 <phySetRxState+0x28>)
    2d62:	4798      	blx	r3
	value = trx_reg_read(reg);
    2d64:	200f      	movs	r0, #15
    2d66:	4b08      	ldr	r3, [pc, #32]	; (2d88 <phySetRxState+0x2c>)
    2d68:	4798      	blx	r3
	if (phyRxState) {
    2d6a:	4b08      	ldr	r3, [pc, #32]	; (2d8c <phySetRxState+0x30>)
    2d6c:	781b      	ldrb	r3, [r3, #0]
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d100      	bne.n	2d74 <phySetRxState+0x18>
}
    2d72:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    2d74:	2016      	movs	r0, #22
    2d76:	4b03      	ldr	r3, [pc, #12]	; (2d84 <phySetRxState+0x28>)
    2d78:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    2d7a:	2201      	movs	r2, #1
    2d7c:	4b04      	ldr	r3, [pc, #16]	; (2d90 <phySetRxState+0x34>)
    2d7e:	701a      	strb	r2, [r3, #0]
}
    2d80:	e7f7      	b.n	2d72 <phySetRxState+0x16>
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	00002d21 	.word	0x00002d21
    2d88:	00003c9d 	.word	0x00003c9d
    2d8c:	2000027c 	.word	0x2000027c
    2d90:	2000027d 	.word	0x2000027d

00002d94 <PHY_DataReq>:
{
    2d94:	b510      	push	{r4, lr}
    2d96:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2d98:	2019      	movs	r0, #25
    2d9a:	4b0c      	ldr	r3, [pc, #48]	; (2dcc <PHY_DataReq+0x38>)
    2d9c:	4798      	blx	r3
	value = trx_reg_read(reg);
    2d9e:	200f      	movs	r0, #15
    2da0:	4b0b      	ldr	r3, [pc, #44]	; (2dd0 <PHY_DataReq+0x3c>)
    2da2:	4798      	blx	r3
	data[0] += 2;// 2
    2da4:	7821      	ldrb	r1, [r4, #0]
    2da6:	1c8b      	adds	r3, r1, #2
    2da8:	7023      	strb	r3, [r4, #0]
	trx_frame_write(&data[0], (data[0]-1 ) /* length value*/);
    2daa:	3101      	adds	r1, #1
    2dac:	b2c9      	uxtb	r1, r1
    2dae:	0020      	movs	r0, r4
    2db0:	4b08      	ldr	r3, [pc, #32]	; (2dd4 <PHY_DataReq+0x40>)
    2db2:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
    2db4:	2203      	movs	r2, #3
    2db6:	4b08      	ldr	r3, [pc, #32]	; (2dd8 <PHY_DataReq+0x44>)
    2db8:	701a      	strb	r2, [r3, #0]
    2dba:	4b08      	ldr	r3, [pc, #32]	; (2ddc <PHY_DataReq+0x48>)
    2dbc:	2280      	movs	r2, #128	; 0x80
    2dbe:	0352      	lsls	r2, r2, #13
    2dc0:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    2dc6:	615a      	str	r2, [r3, #20]
}
    2dc8:	bd10      	pop	{r4, pc}
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	00002d21 	.word	0x00002d21
    2dd0:	00003c9d 	.word	0x00003c9d
    2dd4:	00003fc9 	.word	0x00003fc9
    2dd8:	2000027d 	.word	0x2000027d
    2ddc:	41004400 	.word	0x41004400

00002de0 <PHY_RandomReq>:
{
    2de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2de2:	46c6      	mov	lr, r8
    2de4:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    2de6:	2006      	movs	r0, #6
    2de8:	4b0d      	ldr	r3, [pc, #52]	; (2e20 <PHY_RandomReq+0x40>)
    2dea:	4798      	blx	r3
    2dec:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    2dee:	2500      	movs	r5, #0
		delay_cycles_us(1);
    2df0:	4f0c      	ldr	r7, [pc, #48]	; (2e24 <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    2df2:	4e0d      	ldr	r6, [pc, #52]	; (2e28 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2df4:	2303      	movs	r3, #3
    2df6:	4698      	mov	r8, r3
		delay_cycles_us(1);
    2df8:	2001      	movs	r0, #1
    2dfa:	47b8      	blx	r7
	value = trx_reg_read(reg);
    2dfc:	2006      	movs	r0, #6
    2dfe:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    2e00:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    2e02:	4643      	mov	r3, r8
    2e04:	4018      	ands	r0, r3
    2e06:	40a0      	lsls	r0, r4
    2e08:	4305      	orrs	r5, r0
    2e0a:	b2ad      	uxth	r5, r5
    2e0c:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    2e0e:	2c10      	cmp	r4, #16
    2e10:	d1f2      	bne.n	2df8 <PHY_RandomReq+0x18>
	phySetRxState();
    2e12:	4b06      	ldr	r3, [pc, #24]	; (2e2c <PHY_RandomReq+0x4c>)
    2e14:	4798      	blx	r3
}
    2e16:	0028      	movs	r0, r5
    2e18:	bc04      	pop	{r2}
    2e1a:	4690      	mov	r8, r2
    2e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	00002d21 	.word	0x00002d21
    2e24:	00000155 	.word	0x00000155
    2e28:	00003c9d 	.word	0x00003c9d
    2e2c:	00002d5d 	.word	0x00002d5d

00002e30 <PHY_Init>:
{
    2e30:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2e32:	4b0d      	ldr	r3, [pc, #52]	; (2e68 <PHY_Init+0x38>)
    2e34:	4798      	blx	r3
	PhyReset();
    2e36:	4b0d      	ldr	r3, [pc, #52]	; (2e6c <PHY_Init+0x3c>)
    2e38:	4798      	blx	r3
	phyRxState = false;
    2e3a:	2200      	movs	r2, #0
    2e3c:	4b0c      	ldr	r3, [pc, #48]	; (2e70 <PHY_Init+0x40>)
    2e3e:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    2e40:	4e0c      	ldr	r6, [pc, #48]	; (2e74 <PHY_Init+0x44>)
	value = trx_reg_read(reg);
    2e42:	4d0d      	ldr	r5, [pc, #52]	; (2e78 <PHY_Init+0x48>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2e44:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2e46:	2108      	movs	r1, #8
    2e48:	2002      	movs	r0, #2
    2e4a:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2e4c:	2001      	movs	r0, #1
    2e4e:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2e50:	4020      	ands	r0, r4
    2e52:	2808      	cmp	r0, #8
    2e54:	d1f7      	bne.n	2e46 <PHY_Init+0x16>
	trx_reg_write(reg, value);
    2e56:	212e      	movs	r1, #46	; 0x2e
    2e58:	3804      	subs	r0, #4
    2e5a:	4c06      	ldr	r4, [pc, #24]	; (2e74 <PHY_Init+0x44>)
    2e5c:	47a0      	blx	r4
    2e5e:	21a0      	movs	r1, #160	; 0xa0
    2e60:	200c      	movs	r0, #12
    2e62:	47a0      	blx	r4
}
    2e64:	bd70      	pop	{r4, r5, r6, pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	00003b51 	.word	0x00003b51
    2e6c:	00003c6d 	.word	0x00003c6d
    2e70:	2000027c 	.word	0x2000027c
    2e74:	00003d99 	.word	0x00003d99
    2e78:	00003c9d 	.word	0x00003c9d

00002e7c <PHY_SetRxState>:
{
    2e7c:	b510      	push	{r4, lr}
	phyRxState = rx;
    2e7e:	4b02      	ldr	r3, [pc, #8]	; (2e88 <PHY_SetRxState+0xc>)
    2e80:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    2e82:	4b02      	ldr	r3, [pc, #8]	; (2e8c <PHY_SetRxState+0x10>)
    2e84:	4798      	blx	r3
}
    2e86:	bd10      	pop	{r4, pc}
    2e88:	2000027c 	.word	0x2000027c
    2e8c:	00002d5d 	.word	0x00002d5d

00002e90 <PHY_SetChannel>:
{
    2e90:	b510      	push	{r4, lr}
    2e92:	0004      	movs	r4, r0
	value = trx_reg_read(reg);
    2e94:	2008      	movs	r0, #8
    2e96:	4b05      	ldr	r3, [pc, #20]	; (2eac <PHY_SetChannel+0x1c>)
    2e98:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    2e9a:	231f      	movs	r3, #31
    2e9c:	0001      	movs	r1, r0
    2e9e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    2ea0:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    2ea2:	b2c9      	uxtb	r1, r1
    2ea4:	2008      	movs	r0, #8
    2ea6:	4b02      	ldr	r3, [pc, #8]	; (2eb0 <PHY_SetChannel+0x20>)
    2ea8:	4798      	blx	r3
}
    2eaa:	bd10      	pop	{r4, pc}
    2eac:	00003c9d 	.word	0x00003c9d
    2eb0:	00003d99 	.word	0x00003d99

00002eb4 <PHY_SetPanId>:
{
    2eb4:	b530      	push	{r4, r5, lr}
    2eb6:	b083      	sub	sp, #12
    2eb8:	466b      	mov	r3, sp
    2eba:	1d9d      	adds	r5, r3, #6
    2ebc:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    2ebe:	b2c1      	uxtb	r1, r0
    2ec0:	2022      	movs	r0, #34	; 0x22
    2ec2:	4c03      	ldr	r4, [pc, #12]	; (2ed0 <PHY_SetPanId+0x1c>)
    2ec4:	47a0      	blx	r4
    2ec6:	7869      	ldrb	r1, [r5, #1]
    2ec8:	2023      	movs	r0, #35	; 0x23
    2eca:	47a0      	blx	r4
}
    2ecc:	b003      	add	sp, #12
    2ece:	bd30      	pop	{r4, r5, pc}
    2ed0:	00003d99 	.word	0x00003d99

00002ed4 <PHY_SetShortAddr>:
{
    2ed4:	b570      	push	{r4, r5, r6, lr}
    2ed6:	b082      	sub	sp, #8
    2ed8:	466b      	mov	r3, sp
    2eda:	1d9e      	adds	r6, r3, #6
    2edc:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    2ede:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    2ee0:	0021      	movs	r1, r4
    2ee2:	2020      	movs	r0, #32
    2ee4:	4d05      	ldr	r5, [pc, #20]	; (2efc <PHY_SetShortAddr+0x28>)
    2ee6:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    2ee8:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    2eea:	0031      	movs	r1, r6
    2eec:	2021      	movs	r0, #33	; 0x21
    2eee:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    2ef0:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    2ef2:	b2e1      	uxtb	r1, r4
    2ef4:	202d      	movs	r0, #45	; 0x2d
    2ef6:	47a8      	blx	r5
}
    2ef8:	b002      	add	sp, #8
    2efa:	bd70      	pop	{r4, r5, r6, pc}
    2efc:	00003d99 	.word	0x00003d99

00002f00 <PHY_Sleep>:
{
    2f00:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2f02:	2008      	movs	r0, #8
    2f04:	4b04      	ldr	r3, [pc, #16]	; (2f18 <PHY_Sleep+0x18>)
    2f06:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2f08:	2280      	movs	r2, #128	; 0x80
    2f0a:	0352      	lsls	r2, r2, #13
    2f0c:	4b03      	ldr	r3, [pc, #12]	; (2f1c <PHY_Sleep+0x1c>)
    2f0e:	619a      	str	r2, [r3, #24]
	phyState = PHY_STATE_SLEEP;
    2f10:	2202      	movs	r2, #2
    2f12:	4b03      	ldr	r3, [pc, #12]	; (2f20 <PHY_Sleep+0x20>)
    2f14:	701a      	strb	r2, [r3, #0]
}
    2f16:	bd10      	pop	{r4, pc}
    2f18:	00002d21 	.word	0x00002d21
    2f1c:	41004400 	.word	0x41004400
    2f20:	2000027d 	.word	0x2000027d

00002f24 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    2f24:	b570      	push	{r4, r5, r6, lr}
    2f26:	0005      	movs	r5, r0
    2f28:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    2f2a:	4e05      	ldr	r6, [pc, #20]	; (2f40 <PHY_SetIEEEAddr+0x1c>)
    2f2c:	7829      	ldrb	r1, [r5, #0]
    2f2e:	0020      	movs	r0, r4
    2f30:	47b0      	blx	r6
		ptr_to_reg++;
    2f32:	3501      	adds	r5, #1
    2f34:	3401      	adds	r4, #1
    2f36:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    2f38:	2c2c      	cmp	r4, #44	; 0x2c
    2f3a:	d1f7      	bne.n	2f2c <PHY_SetIEEEAddr+0x8>
	}
}
    2f3c:	bd70      	pop	{r4, r5, r6, pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	00003d99 	.word	0x00003d99

00002f44 <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
// Handle Packet Received
void PHY_TaskHandler(void)
{
    2f44:	b570      	push	{r4, r5, r6, lr}
    2f46:	b082      	sub	sp, #8
	if (PHY_STATE_SLEEP == phyState)
    2f48:	4b36      	ldr	r3, [pc, #216]	; (3024 <PHY_TaskHandler+0xe0>)
    2f4a:	781b      	ldrb	r3, [r3, #0]
    2f4c:	2b02      	cmp	r3, #2
    2f4e:	d00a      	beq.n	2f66 <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    2f50:	200f      	movs	r0, #15
    2f52:	4b35      	ldr	r3, [pc, #212]	; (3028 <PHY_TaskHandler+0xe4>)
    2f54:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    2f56:	0703      	lsls	r3, r0, #28
    2f58:	d505      	bpl.n	2f66 <PHY_TaskHandler+0x22>
	{
		if (PHY_STATE_IDLE == phyState)
    2f5a:	4b32      	ldr	r3, [pc, #200]	; (3024 <PHY_TaskHandler+0xe0>)
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	2b01      	cmp	r3, #1
    2f60:	d003      	beq.n	2f6a <PHY_TaskHandler+0x26>
					}
			    }
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    2f62:	2b03      	cmp	r3, #3
    2f64:	d045      	beq.n	2ff2 <PHY_TaskHandler+0xae>
			phySetRxState();
			phyState = PHY_STATE_IDLE;
			PHY_DataConf(status);
		}
	}
}
    2f66:	b002      	add	sp, #8
    2f68:	bd70      	pop	{r4, r5, r6, pc}
				if (RxBuffer[i].PayloadLen == 0)
    2f6a:	4b30      	ldr	r3, [pc, #192]	; (302c <PHY_TaskHandler+0xe8>)
    2f6c:	781c      	ldrb	r4, [r3, #0]
    2f6e:	2c00      	cmp	r4, #0
    2f70:	d010      	beq.n	2f94 <PHY_TaskHandler+0x50>
    2f72:	237f      	movs	r3, #127	; 0x7f
    2f74:	4a2d      	ldr	r2, [pc, #180]	; (302c <PHY_TaskHandler+0xe8>)
    2f76:	5cd3      	ldrb	r3, [r2, r3]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d00a      	beq.n	2f92 <PHY_TaskHandler+0x4e>
    2f7c:	23fe      	movs	r3, #254	; 0xfe
    2f7e:	5cd3      	ldrb	r3, [r2, r3]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d024      	beq.n	2fce <PHY_TaskHandler+0x8a>
    2f84:	237e      	movs	r3, #126	; 0x7e
    2f86:	33ff      	adds	r3, #255	; 0xff
    2f88:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    2f8a:	2403      	movs	r4, #3
				if (RxBuffer[i].PayloadLen == 0)
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d1ea      	bne.n	2f66 <PHY_TaskHandler+0x22>
    2f90:	e000      	b.n	2f94 <PHY_TaskHandler+0x50>
			for (i = 0; i < BANK_SIZE; i++)
    2f92:	2401      	movs	r4, #1
				trx_frame_read(&size, 1);
    2f94:	466b      	mov	r3, sp
    2f96:	1ddd      	adds	r5, r3, #7
    2f98:	2101      	movs	r1, #1
    2f9a:	0028      	movs	r0, r5
    2f9c:	4e24      	ldr	r6, [pc, #144]	; (3030 <PHY_TaskHandler+0xec>)
    2f9e:	47b0      	blx	r6
			 	trx_frame_read(phyRxBuffer, size + 2);
    2fa0:	7829      	ldrb	r1, [r5, #0]
    2fa2:	3102      	adds	r1, #2
    2fa4:	b2c9      	uxtb	r1, r1
    2fa6:	4823      	ldr	r0, [pc, #140]	; (3034 <PHY_TaskHandler+0xf0>)
    2fa8:	47b0      	blx	r6
				RxBuffer[RxBank].PayloadLen = size+2;
    2faa:	0021      	movs	r1, r4
    2fac:	7828      	ldrb	r0, [r5, #0]
    2fae:	1c83      	adds	r3, r0, #2
    2fb0:	b2db      	uxtb	r3, r3
    2fb2:	01e2      	lsls	r2, r4, #7
    2fb4:	1b14      	subs	r4, r2, r4
    2fb6:	4a1d      	ldr	r2, [pc, #116]	; (302c <PHY_TaskHandler+0xe8>)
    2fb8:	54a3      	strb	r3, [r4, r2]
				if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    2fba:	2b7d      	cmp	r3, #125	; 0x7d
    2fbc:	d909      	bls.n	2fd2 <PHY_TaskHandler+0x8e>
	value = trx_reg_read(reg);
    2fbe:	4d1a      	ldr	r5, [pc, #104]	; (3028 <PHY_TaskHandler+0xe4>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2fc0:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    2fc2:	2001      	movs	r0, #1
    2fc4:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2fc6:	4020      	ands	r0, r4
    2fc8:	2816      	cmp	r0, #22
    2fca:	d1fa      	bne.n	2fc2 <PHY_TaskHandler+0x7e>
    2fcc:	e7cb      	b.n	2f66 <PHY_TaskHandler+0x22>
			for (i = 0; i < BANK_SIZE; i++)
    2fce:	2402      	movs	r4, #2
    2fd0:	e7e0      	b.n	2f94 <PHY_TaskHandler+0x50>
					for (i = 1; i <= size+2; i++)
    2fd2:	3002      	adds	r0, #2
    2fd4:	2201      	movs	r2, #1
    2fd6:	2301      	movs	r3, #1
						RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    2fd8:	01cc      	lsls	r4, r1, #7
    2fda:	1a61      	subs	r1, r4, r1
    2fdc:	4c13      	ldr	r4, [pc, #76]	; (302c <PHY_TaskHandler+0xe8>)
    2fde:	1864      	adds	r4, r4, r1
    2fe0:	4d14      	ldr	r5, [pc, #80]	; (3034 <PHY_TaskHandler+0xf0>)
    2fe2:	5ca9      	ldrb	r1, [r5, r2]
    2fe4:	54a1      	strb	r1, [r4, r2]
					for (i = 1; i <= size+2; i++)
    2fe6:	3301      	adds	r3, #1
    2fe8:	b2db      	uxtb	r3, r3
    2fea:	001a      	movs	r2, r3
    2fec:	4283      	cmp	r3, r0
    2fee:	ddf8      	ble.n	2fe2 <PHY_TaskHandler+0x9e>
    2ff0:	e7e5      	b.n	2fbe <PHY_TaskHandler+0x7a>
	value = trx_reg_read(reg);
    2ff2:	2002      	movs	r0, #2
    2ff4:	4b0c      	ldr	r3, [pc, #48]	; (3028 <PHY_TaskHandler+0xe4>)
    2ff6:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    2ff8:	0940      	lsrs	r0, r0, #5
    2ffa:	b2c4      	uxtb	r4, r0
   			if (TRAC_STATUS_SUCCESS == status)
    2ffc:	2c00      	cmp	r4, #0
    2ffe:	d004      	beq.n	300a <PHY_TaskHandler+0xc6>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    3000:	2c03      	cmp	r4, #3
    3002:	d00b      	beq.n	301c <PHY_TaskHandler+0xd8>
			else if (TRAC_STATUS_NO_ACK == status)
    3004:	2c05      	cmp	r4, #5
    3006:	d00b      	beq.n	3020 <PHY_TaskHandler+0xdc>
				status = PHY_STATUS_ERROR;
    3008:	2401      	movs	r4, #1
			phySetRxState();
    300a:	4b0b      	ldr	r3, [pc, #44]	; (3038 <PHY_TaskHandler+0xf4>)
    300c:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    300e:	2201      	movs	r2, #1
    3010:	4b04      	ldr	r3, [pc, #16]	; (3024 <PHY_TaskHandler+0xe0>)
    3012:	701a      	strb	r2, [r3, #0]
			PHY_DataConf(status);
    3014:	0020      	movs	r0, r4
    3016:	4b09      	ldr	r3, [pc, #36]	; (303c <PHY_TaskHandler+0xf8>)
    3018:	4798      	blx	r3
    301a:	e7a4      	b.n	2f66 <PHY_TaskHandler+0x22>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    301c:	2402      	movs	r4, #2
    301e:	e7f4      	b.n	300a <PHY_TaskHandler+0xc6>
				status = PHY_STATUS_NO_ACK;
    3020:	2403      	movs	r4, #3
    3022:	e7f2      	b.n	300a <PHY_TaskHandler+0xc6>
    3024:	2000027d 	.word	0x2000027d
    3028:	00003c9d 	.word	0x00003c9d
    302c:	2000042c 	.word	0x2000042c
    3030:	00003e99 	.word	0x00003e99
    3034:	200001fc 	.word	0x200001fc
    3038:	00002d5d 	.word	0x00002d5d
    303c:	00002cc5 	.word	0x00002cc5

00003040 <stb_init>:
 * @brief STB Initialization
 *
 * This function initializes the STB.
 */
void stb_init(void)
{
    3040:	b510      	push	{r4, lr}
	sal_init();
    3042:	4b01      	ldr	r3, [pc, #4]	; (3048 <stb_init+0x8>)
    3044:	4798      	blx	r3
}
    3046:	bd10      	pop	{r4, pc}
    3048:	00003925 	.word	0x00003925

0000304c <stb_ccm_secure>:
		uint8_t *key,
		uint8_t hdr_len,
		uint8_t pld_len,
		uint8_t sec_level,
		uint8_t aes_dir)
{
    304c:	b5f0      	push	{r4, r5, r6, r7, lr}
    304e:	46de      	mov	lr, fp
    3050:	4657      	mov	r7, sl
    3052:	464e      	mov	r6, r9
    3054:	4645      	mov	r5, r8
    3056:	b5e0      	push	{r5, r6, r7, lr}
    3058:	b08b      	sub	sp, #44	; 0x2c
    305a:	9003      	str	r0, [sp, #12]
    305c:	000d      	movs	r5, r1
    305e:	0014      	movs	r4, r2
    3060:	9304      	str	r3, [sp, #16]
    3062:	ab14      	add	r3, sp, #80	; 0x50
    3064:	781e      	ldrb	r6, [r3, #0]
    3066:	ab15      	add	r3, sp, #84	; 0x54
    3068:	781f      	ldrb	r7, [r3, #0]
    306a:	ab16      	add	r3, sp, #88	; 0x58
    306c:	781b      	ldrb	r3, [r3, #0]
    306e:	469a      	mov	sl, r3
	uint8_t nonce_0; /* nonce[0] for MIC computation. */
	uint8_t mic_len = 0;
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;

	if (stb_restart_required) {
    3070:	4b77      	ldr	r3, [pc, #476]	; (3250 <stb_ccm_secure+0x204>)
    3072:	781b      	ldrb	r3, [r3, #0]
    3074:	2b00      	cmp	r3, #0
    3076:	d007      	beq.n	3088 <stb_ccm_secure+0x3c>
#if (SAL_TYPE != ATXMEGA_SAL)
		prev_trx_status = tal_trx_status;
    3078:	2202      	movs	r2, #2
    307a:	4b76      	ldr	r3, [pc, #472]	; (3254 <stb_ccm_secure+0x208>)
    307c:	701a      	strb	r2, [r3, #0]
		if (tal_trx_status == TRX_SLEEP) {
			PHY_Wakeup();
		}
#endif
		sal_aes_restart();
    307e:	4b76      	ldr	r3, [pc, #472]	; (3258 <stb_ccm_secure+0x20c>)
    3080:	4798      	blx	r3
		stb_restart_required = false;
    3082:	2200      	movs	r2, #0
    3084:	4b72      	ldr	r3, [pc, #456]	; (3250 <stb_ccm_secure+0x204>)
    3086:	701a      	strb	r2, [r3, #0]
	}

	switch (sec_level) {
    3088:	2f07      	cmp	r7, #7
    308a:	d817      	bhi.n	30bc <stb_ccm_secure+0x70>
    308c:	00bb      	lsls	r3, r7, #2
    308e:	4a73      	ldr	r2, [pc, #460]	; (325c <stb_ccm_secure+0x210>)
    3090:	58d3      	ldr	r3, [r2, r3]
    3092:	469f      	mov	pc, r3
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    3094:	2300      	movs	r3, #0
    3096:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
		break;

	case SECURITY_02_LEVEL:
		/* MIC-64 & No Encryption at Security Level -2 */
		mic_len = LEN_MIC_64;
    3098:	2708      	movs	r7, #8
    309a:	e0bb      	b.n	3214 <stb_ccm_secure+0x1c8>
		break;

	case SECURITY_04_LEVEL:
		/* No MIC & Encryption at Security Level -4 */
		mic_len = LEN_MIC_00;
		enc_flag = ENCRYPTION_REQD;
    309c:	2301      	movs	r3, #1
    309e:	4698      	mov	r8, r3
		mic_len = LEN_MIC_00;
    30a0:	2700      	movs	r7, #0
		break;
    30a2:	e0b7      	b.n	3214 <stb_ccm_secure+0x1c8>

	case SECURITY_05_LEVEL:
		/* MIC-32 & Encryption at Security Level -5 */
		mic_len = LEN_MIC_32;
		enc_flag = ENCRYPTION_REQD;
    30a4:	2301      	movs	r3, #1
    30a6:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    30a8:	2704      	movs	r7, #4
		break;
    30aa:	e0b3      	b.n	3214 <stb_ccm_secure+0x1c8>

	case SECURITY_06_LEVEL:
		/* MIC-64 & Encryption at Security Level -6 */
		mic_len = LEN_MIC_64;
		enc_flag = ENCRYPTION_REQD;
    30ac:	2301      	movs	r3, #1
    30ae:	4698      	mov	r8, r3
		mic_len = LEN_MIC_64;
    30b0:	2708      	movs	r7, #8
		break;
    30b2:	e0af      	b.n	3214 <stb_ccm_secure+0x1c8>

	case SECURITY_07_LEVEL:
		/* MIC-128 & Encryption at Security Level -7 */
		mic_len = LEN_MIC_128;
		enc_flag = ENCRYPTION_REQD;
    30b4:	2301      	movs	r3, #1
    30b6:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    30b8:	2710      	movs	r7, #16
		break;
    30ba:	e0ab      	b.n	3214 <stb_ccm_secure+0x1c8>
		break;
	}

	/* Test on correct parameters. */

	if ((sec_level & ~0x7) ||
    30bc:	2307      	movs	r3, #7
    30be:	439f      	bics	r7, r3
    30c0:	d000      	beq.n	30c4 <stb_ccm_secure+0x78>
    30c2:	e0b5      	b.n	3230 <stb_ccm_secure+0x1e4>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    30c4:	46b8      	mov	r8, r7
    30c6:	e0a5      	b.n	3214 <stb_ccm_secure+0x1c8>
			(nonce == NULL) ||
			((uint16_t)pld_len + (uint16_t)hdr_len +
			(uint16_t)mic_len > 127)
			) {
#if (SAL_TYPE != ATXMEGA_SAL)
		TRX_SLEEP();
    30c8:	4b65      	ldr	r3, [pc, #404]	; (3260 <stb_ccm_secure+0x214>)
    30ca:	4798      	blx	r3
    30cc:	e0b5      	b.n	323a <stb_ccm_secure+0x1ee>
		sal_aes_clean_up();
#endif
		return (STB_CCM_ILLPARM);
	}

	if (key_change && (key == NULL)) {
    30ce:	4b65      	ldr	r3, [pc, #404]	; (3264 <stb_ccm_secure+0x218>)
    30d0:	781b      	ldrb	r3, [r3, #0]
    30d2:	2b00      	cmp	r3, #0
    30d4:	d01a      	beq.n	310c <stb_ccm_secure+0xc0>
    30d6:	2c00      	cmp	r4, #0
    30d8:	d00d      	beq.n	30f6 <stb_ccm_secure+0xaa>
	if (key_change) {
		/*
		 * Key must be non-NULL because of test above, and
		 * ECB encryption is always the initial encryption mode.
		 */
		sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    30da:	2200      	movs	r2, #0
    30dc:	2100      	movs	r1, #0
    30de:	0020      	movs	r0, r4
    30e0:	4b61      	ldr	r3, [pc, #388]	; (3268 <stb_ccm_secure+0x21c>)
    30e2:	4798      	blx	r3
		memcpy(last_key, key, AES_KEYSIZE);
    30e4:	2210      	movs	r2, #16
    30e6:	0021      	movs	r1, r4
    30e8:	4860      	ldr	r0, [pc, #384]	; (326c <stb_ccm_secure+0x220>)
    30ea:	4b61      	ldr	r3, [pc, #388]	; (3270 <stb_ccm_secure+0x224>)
    30ec:	4798      	blx	r3
		key_change = false;
    30ee:	2200      	movs	r2, #0
    30f0:	4b5c      	ldr	r3, [pc, #368]	; (3264 <stb_ccm_secure+0x218>)
    30f2:	701a      	strb	r2, [r3, #0]
    30f4:	e01e      	b.n	3134 <stb_ccm_secure+0xe8>
		TRX_SLEEP();
    30f6:	4b57      	ldr	r3, [pc, #348]	; (3254 <stb_ccm_secure+0x208>)
    30f8:	781b      	ldrb	r3, [r3, #0]
    30fa:	2b01      	cmp	r3, #1
    30fc:	d003      	beq.n	3106 <stb_ccm_secure+0xba>
		sal_aes_clean_up();
    30fe:	4b5d      	ldr	r3, [pc, #372]	; (3274 <stb_ccm_secure+0x228>)
    3100:	4798      	blx	r3
		return (STB_CCM_KEYMISS);
    3102:	2002      	movs	r0, #2
    3104:	e09c      	b.n	3240 <stb_ccm_secure+0x1f4>
		TRX_SLEEP();
    3106:	4b56      	ldr	r3, [pc, #344]	; (3260 <stb_ccm_secure+0x214>)
    3108:	4798      	blx	r3
    310a:	e7f8      	b.n	30fe <stb_ccm_secure+0xb2>
	if (!key_change && key != NULL) { /* There was some previous key. */
    310c:	2c00      	cmp	r4, #0
    310e:	d011      	beq.n	3134 <stb_ccm_secure+0xe8>
    3110:	220f      	movs	r2, #15
			key_change |= (last_key[i] ^ key[i]);
    3112:	4956      	ldr	r1, [pc, #344]	; (326c <stb_ccm_secure+0x220>)
    3114:	0018      	movs	r0, r3
    3116:	46ac      	mov	ip, r5
    3118:	5c53      	ldrb	r3, [r2, r1]
    311a:	5ca5      	ldrb	r5, [r4, r2]
    311c:	406b      	eors	r3, r5
    311e:	4303      	orrs	r3, r0
    3120:	1e58      	subs	r0, r3, #1
    3122:	4183      	sbcs	r3, r0
    3124:	b2d8      	uxtb	r0, r3
		for (i = AES_BLOCKSIZE; i--; /* */) {
    3126:	3a01      	subs	r2, #1
    3128:	d2f6      	bcs.n	3118 <stb_ccm_secure+0xcc>
    312a:	4665      	mov	r5, ip
    312c:	4a4d      	ldr	r2, [pc, #308]	; (3264 <stb_ccm_secure+0x218>)
    312e:	7010      	strb	r0, [r2, #0]
	if (key_change) {
    3130:	2800      	cmp	r0, #0
    3132:	d1d2      	bne.n	30da <stb_ccm_secure+0x8e>
	}

	/* Prepare nonce. */
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */

	if (mic_len > 0) {
    3134:	2f00      	cmp	r7, #0
    3136:	d129      	bne.n	318c <stb_ccm_secure+0x140>
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */
    3138:	2301      	movs	r3, #1
    313a:	702b      	strb	r3, [r5, #0]
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
	}

	if (hdr_len) {
    313c:	9b04      	ldr	r3, [sp, #16]
    313e:	2b00      	cmp	r3, #0
    3140:	d003      	beq.n	314a <stb_ccm_secure+0xfe>
		nonce[0] |= ADATA;
    3142:	782b      	ldrb	r3, [r5, #0]
    3144:	2240      	movs	r2, #64	; 0x40
    3146:	4313      	orrs	r3, r2
    3148:	702b      	strb	r3, [r5, #0]
	}

	nonce_0 = nonce[0];
    314a:	782b      	ldrb	r3, [r5, #0]
    314c:	4699      	mov	r9, r3
	nonce[AES_BLOCKSIZE - 2] = 0;
    314e:	2300      	movs	r3, #0
    3150:	73ab      	strb	r3, [r5, #14]

	if (aes_dir == AES_DIR_ENCRYPT) {
    3152:	4653      	mov	r3, sl
    3154:	2b00      	cmp	r3, #0
    3156:	d12a      	bne.n	31ae <stb_ccm_secure+0x162>
		/* Authenticate. */
		if (mic_len > 0) {
    3158:	2f00      	cmp	r7, #0
    315a:	d003      	beq.n	3164 <stb_ccm_secure+0x118>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    315c:	73ee      	strb	r6, [r5, #15]

			if (ENCRYPTION_REQD == enc_flag) {
    315e:	4643      	mov	r3, r8
    3160:	2b01      	cmp	r3, #1
    3162:	d01a      	beq.n	319a <stb_ccm_secure+0x14e>
						hdr_len,
						pld_len);
			}
		}

		nonce[0] = PLAINTEXT_FLAG;
    3164:	2301      	movs	r3, #1
    3166:	702b      	strb	r3, [r5, #0]
		encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    3168:	9b03      	ldr	r3, [sp, #12]
    316a:	9a04      	ldr	r2, [sp, #16]
    316c:	4694      	mov	ip, r2
    316e:	4463      	add	r3, ip
    3170:	0018      	movs	r0, r3
    3172:	0033      	movs	r3, r6
    3174:	003a      	movs	r2, r7
    3176:	0029      	movs	r1, r5
    3178:	4c3f      	ldr	r4, [pc, #252]	; (3278 <stb_ccm_secure+0x22c>)
    317a:	47a0      	blx	r4
			}
		}
	}

#if (SAL_TYPE != ATXMEGA_SAL)
	TRX_SLEEP();
    317c:	4b35      	ldr	r3, [pc, #212]	; (3254 <stb_ccm_secure+0x208>)
    317e:	781b      	ldrb	r3, [r3, #0]
    3180:	2b01      	cmp	r3, #1
    3182:	d03d      	beq.n	3200 <stb_ccm_secure+0x1b4>
	sal_aes_clean_up();
    3184:	4b3b      	ldr	r3, [pc, #236]	; (3274 <stb_ccm_secure+0x228>)
    3186:	4798      	blx	r3
#endif
	return (STB_CCM_OK);
    3188:	2000      	movs	r0, #0
    318a:	e059      	b.n	3240 <stb_ccm_secure+0x1f4>
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
    318c:	9b05      	ldr	r3, [sp, #20]
    318e:	3b02      	subs	r3, #2
    3190:	009b      	lsls	r3, r3, #2
    3192:	2201      	movs	r2, #1
    3194:	4313      	orrs	r3, r2
    3196:	702b      	strb	r3, [r5, #0]
    3198:	e7d0      	b.n	313c <stb_ccm_secure+0xf0>
						buffer + hdr_len + pld_len,
    319a:	9b04      	ldr	r3, [sp, #16]
    319c:	1999      	adds	r1, r3, r6
				compute_mic(buffer,
    319e:	9803      	ldr	r0, [sp, #12]
    31a0:	4684      	mov	ip, r0
    31a2:	4461      	add	r1, ip
    31a4:	9600      	str	r6, [sp, #0]
    31a6:	002a      	movs	r2, r5
    31a8:	4c34      	ldr	r4, [pc, #208]	; (327c <stb_ccm_secure+0x230>)
    31aa:	47a0      	blx	r4
    31ac:	e7da      	b.n	3164 <stb_ccm_secure+0x118>
		if (enc_flag == ENCRYPTION_REQD) {
    31ae:	4643      	mov	r3, r8
    31b0:	2b01      	cmp	r3, #1
    31b2:	d00d      	beq.n	31d0 <stb_ccm_secure+0x184>
		if (mic_len > 0) {
    31b4:	2f00      	cmp	r7, #0
    31b6:	d0e1      	beq.n	317c <stb_ccm_secure+0x130>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    31b8:	73ee      	strb	r6, [r5, #15]
			buffer += hdr_len + pld_len;
    31ba:	9b03      	ldr	r3, [sp, #12]
    31bc:	445b      	add	r3, fp
    31be:	0018      	movs	r0, r3
			if (memcmp(buffer, rcvd_mic, mic_len)) {
    31c0:	003a      	movs	r2, r7
    31c2:	a906      	add	r1, sp, #24
    31c4:	4b2e      	ldr	r3, [pc, #184]	; (3280 <stb_ccm_secure+0x234>)
    31c6:	4798      	blx	r3
    31c8:	2800      	cmp	r0, #0
    31ca:	d0d7      	beq.n	317c <stb_ccm_secure+0x130>
				return STB_CCM_MICERR;
    31cc:	2003      	movs	r0, #3
    31ce:	e037      	b.n	3240 <stb_ccm_secure+0x1f4>
			nonce[0] = PLAINTEXT_FLAG;
    31d0:	702b      	strb	r3, [r5, #0]
			encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    31d2:	9b03      	ldr	r3, [sp, #12]
    31d4:	9a04      	ldr	r2, [sp, #16]
    31d6:	4694      	mov	ip, r2
    31d8:	4463      	add	r3, ip
    31da:	0018      	movs	r0, r3
    31dc:	0033      	movs	r3, r6
    31de:	003a      	movs	r2, r7
    31e0:	0029      	movs	r1, r5
    31e2:	4c25      	ldr	r4, [pc, #148]	; (3278 <stb_ccm_secure+0x22c>)
    31e4:	47a0      	blx	r4
		if (mic_len > 0) {
    31e6:	2f00      	cmp	r7, #0
    31e8:	d0c8      	beq.n	317c <stb_ccm_secure+0x130>
			nonce[0] = nonce_0;
    31ea:	464b      	mov	r3, r9
    31ec:	702b      	strb	r3, [r5, #0]
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    31ee:	73ee      	strb	r6, [r5, #15]
				compute_mic(buffer,
    31f0:	9600      	str	r6, [sp, #0]
    31f2:	9b04      	ldr	r3, [sp, #16]
    31f4:	002a      	movs	r2, r5
    31f6:	a906      	add	r1, sp, #24
    31f8:	9803      	ldr	r0, [sp, #12]
    31fa:	4c20      	ldr	r4, [pc, #128]	; (327c <stb_ccm_secure+0x230>)
    31fc:	47a0      	blx	r4
    31fe:	e7dc      	b.n	31ba <stb_ccm_secure+0x16e>
	TRX_SLEEP();
    3200:	4b17      	ldr	r3, [pc, #92]	; (3260 <stb_ccm_secure+0x214>)
    3202:	4798      	blx	r3
    3204:	e7be      	b.n	3184 <stb_ccm_secure+0x138>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    3206:	2300      	movs	r3, #0
    3208:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    320a:	2704      	movs	r7, #4
    320c:	e002      	b.n	3214 <stb_ccm_secure+0x1c8>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    320e:	2300      	movs	r3, #0
    3210:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    3212:	2710      	movs	r7, #16
	if ((sec_level & ~0x7) ||
    3214:	9b03      	ldr	r3, [sp, #12]
    3216:	2b00      	cmp	r3, #0
    3218:	d00a      	beq.n	3230 <stb_ccm_secure+0x1e4>
			(buffer == NULL) ||
    321a:	2d00      	cmp	r5, #0
    321c:	d008      	beq.n	3230 <stb_ccm_secure+0x1e4>
			((uint16_t)pld_len + (uint16_t)hdr_len +
    321e:	9b04      	ldr	r3, [sp, #16]
    3220:	469b      	mov	fp, r3
    3222:	44b3      	add	fp, r6
			(uint16_t)mic_len > 127)
    3224:	9705      	str	r7, [sp, #20]
			((uint16_t)pld_len + (uint16_t)hdr_len +
    3226:	465b      	mov	r3, fp
    3228:	19db      	adds	r3, r3, r7
			(nonce == NULL) ||
    322a:	2b7f      	cmp	r3, #127	; 0x7f
    322c:	dc00      	bgt.n	3230 <stb_ccm_secure+0x1e4>
    322e:	e74e      	b.n	30ce <stb_ccm_secure+0x82>
		TRX_SLEEP();
    3230:	4b08      	ldr	r3, [pc, #32]	; (3254 <stb_ccm_secure+0x208>)
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	2b01      	cmp	r3, #1
    3236:	d100      	bne.n	323a <stb_ccm_secure+0x1ee>
    3238:	e746      	b.n	30c8 <stb_ccm_secure+0x7c>
		sal_aes_clean_up();
    323a:	4b0e      	ldr	r3, [pc, #56]	; (3274 <stb_ccm_secure+0x228>)
    323c:	4798      	blx	r3
		return (STB_CCM_ILLPARM);
    323e:	2001      	movs	r0, #1
}
    3240:	b00b      	add	sp, #44	; 0x2c
    3242:	bc3c      	pop	{r2, r3, r4, r5}
    3244:	4690      	mov	r8, r2
    3246:	4699      	mov	r9, r3
    3248:	46a2      	mov	sl, r4
    324a:	46ab      	mov	fp, r5
    324c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	20000291 	.word	0x20000291
    3254:	20000290 	.word	0x20000290
    3258:	00003929 	.word	0x00003929
    325c:	00008aa4 	.word	0x00008aa4
    3260:	00002f01 	.word	0x00002f01
    3264:	20000048 	.word	0x20000048
    3268:	000039e9 	.word	0x000039e9
    326c:	20000280 	.word	0x20000280
    3270:	00007a7f 	.word	0x00007a7f
    3274:	00003979 	.word	0x00003979
    3278:	00003375 	.word	0x00003375
    327c:	000032e9 	.word	0x000032e9
    3280:	00007a61 	.word	0x00007a61

00003284 <encrypt_with_padding>:
 *
 * @param start Pointer to start address
 * @param buflen Number of bytes to be encrypted; if 0, nothing happens
 */
void encrypt_with_padding(uint8_t *start, uint8_t buflen)
{
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	b085      	sub	sp, #20
    3288:	0004      	movs	r4, r0
    328a:	000e      	movs	r6, r1
	/* Encrypt the "full blocks". */
	while (buflen >= AES_BLOCKSIZE) {
    328c:	290f      	cmp	r1, #15
    328e:	d90f      	bls.n	32b0 <encrypt_with_padding+0x2c>
    3290:	000d      	movs	r5, r1
    3292:	3d10      	subs	r5, #16
    3294:	b2ed      	uxtb	r5, r5
    3296:	092d      	lsrs	r5, r5, #4
    3298:	3501      	adds	r5, #1
    329a:	012d      	lsls	r5, r5, #4
    329c:	1945      	adds	r5, r0, r5
#if (SAL_TYPE == AT86RF2xx)
		sal_aes_wrrd(start, NULL);
    329e:	4f0f      	ldr	r7, [pc, #60]	; (32dc <encrypt_with_padding+0x58>)
    32a0:	2100      	movs	r1, #0
    32a2:	0020      	movs	r0, r4
    32a4:	47b8      	blx	r7
#else
		sal_aes_exec(start);
#endif
		start += AES_BLOCKSIZE;
    32a6:	3410      	adds	r4, #16
	while (buflen >= AES_BLOCKSIZE) {
    32a8:	42ac      	cmp	r4, r5
    32aa:	d1f9      	bne.n	32a0 <encrypt_with_padding+0x1c>
    32ac:	230f      	movs	r3, #15
    32ae:	401e      	ands	r6, r3
		buflen -= AES_BLOCKSIZE;
	}

	/* Pad the possible rest and encrypt it. */
	if (buflen) {
    32b0:	2e00      	cmp	r6, #0
    32b2:	d101      	bne.n	32b8 <encrypt_with_padding+0x34>
		sal_aes_wrrd(locbuf, NULL);
#else
		sal_aes_exec(locbuf);
#endif
	}
}
    32b4:	b005      	add	sp, #20
    32b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(locbuf, start, buflen);
    32b8:	0032      	movs	r2, r6
    32ba:	0021      	movs	r1, r4
    32bc:	4668      	mov	r0, sp
    32be:	4b08      	ldr	r3, [pc, #32]	; (32e0 <encrypt_with_padding+0x5c>)
    32c0:	4798      	blx	r3
		memset(locbuf + buflen, 0, AES_BLOCKSIZE - buflen);
    32c2:	2210      	movs	r2, #16
    32c4:	1b92      	subs	r2, r2, r6
    32c6:	0030      	movs	r0, r6
    32c8:	4468      	add	r0, sp
    32ca:	2100      	movs	r1, #0
    32cc:	4b05      	ldr	r3, [pc, #20]	; (32e4 <encrypt_with_padding+0x60>)
    32ce:	4798      	blx	r3
		sal_aes_wrrd(locbuf, NULL);
    32d0:	2100      	movs	r1, #0
    32d2:	4668      	mov	r0, sp
    32d4:	4b01      	ldr	r3, [pc, #4]	; (32dc <encrypt_with_padding+0x58>)
    32d6:	4798      	blx	r3
}
    32d8:	e7ec      	b.n	32b4 <encrypt_with_padding+0x30>
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	0000397d 	.word	0x0000397d
    32e0:	00007a7f 	.word	0x00007a7f
    32e4:	00007a91 	.word	0x00007a91

000032e8 <compute_mic>:
void compute_mic(uint8_t *buffer,
		uint8_t *mic,
		uint8_t *nonce,
		uint8_t hdr_len,
		uint8_t pld_len)
{
    32e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ea:	b087      	sub	sp, #28
    32ec:	0005      	movs	r5, r0
    32ee:	9100      	str	r1, [sp, #0]
    32f0:	9201      	str	r2, [sp, #4]
    32f2:	001c      	movs	r4, r3
    32f4:	ab0c      	add	r3, sp, #48	; 0x30
    32f6:	781e      	ldrb	r6, [r3, #0]
	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    32f8:	2200      	movs	r2, #0
    32fa:	2100      	movs	r1, #0
    32fc:	2000      	movs	r0, #0
    32fe:	4f18      	ldr	r7, [pc, #96]	; (3360 <compute_mic+0x78>)
    3300:	47b8      	blx	r7
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(nonce, NULL);
    3302:	2100      	movs	r1, #0
    3304:	9801      	ldr	r0, [sp, #4]
    3306:	4b17      	ldr	r3, [pc, #92]	; (3364 <compute_mic+0x7c>)
    3308:	4798      	blx	r3
#else
	sal_aes_exec(nonce);
#endif
	sal_aes_setup(NULL, AES_MODE_CBC, AES_DIR_ENCRYPT);
    330a:	2200      	movs	r2, #0
    330c:	2102      	movs	r1, #2
    330e:	2000      	movs	r0, #0
    3310:	47b8      	blx	r7

	if (hdr_len) {
    3312:	2c00      	cmp	r4, #0
    3314:	d108      	bne.n	3328 <compute_mic+0x40>
			encrypt_with_padding(buffer + firstlen,
					hdr_len - firstlen);
		}
	}

	encrypt_with_padding(buffer + hdr_len, pld_len);
    3316:	1928      	adds	r0, r5, r4
    3318:	0031      	movs	r1, r6
    331a:	4b13      	ldr	r3, [pc, #76]	; (3368 <compute_mic+0x80>)
    331c:	4798      	blx	r3

	sal_aes_read(mic);
    331e:	9800      	ldr	r0, [sp, #0]
    3320:	4b12      	ldr	r3, [pc, #72]	; (336c <compute_mic+0x84>)
    3322:	4798      	blx	r3
}
    3324:	b007      	add	sp, #28
    3326:	bdf0      	pop	{r4, r5, r6, r7, pc}
		firstlen = MIN(AES_BLOCKSIZE - 2, hdr_len);
    3328:	1c27      	adds	r7, r4, #0
    332a:	2c0e      	cmp	r4, #14
    332c:	d900      	bls.n	3330 <compute_mic+0x48>
    332e:	270e      	movs	r7, #14
    3330:	b2ff      	uxtb	r7, r7
		locbuf[0] = 0;
    3332:	2300      	movs	r3, #0
    3334:	aa02      	add	r2, sp, #8
    3336:	7013      	strb	r3, [r2, #0]
		locbuf[1] = hdr_len;
    3338:	0013      	movs	r3, r2
    333a:	7054      	strb	r4, [r2, #1]
		memcpy(locbuf + 2, buffer, firstlen);
    333c:	003a      	movs	r2, r7
    333e:	0029      	movs	r1, r5
    3340:	1c98      	adds	r0, r3, #2
    3342:	4b0b      	ldr	r3, [pc, #44]	; (3370 <compute_mic+0x88>)
    3344:	4798      	blx	r3
		encrypt_with_padding(locbuf, firstlen + 2);
    3346:	1cb9      	adds	r1, r7, #2
    3348:	b2c9      	uxtb	r1, r1
    334a:	a802      	add	r0, sp, #8
    334c:	4b06      	ldr	r3, [pc, #24]	; (3368 <compute_mic+0x80>)
    334e:	4798      	blx	r3
		if (firstlen < hdr_len) {
    3350:	42bc      	cmp	r4, r7
    3352:	d9e0      	bls.n	3316 <compute_mic+0x2e>
			encrypt_with_padding(buffer + firstlen,
    3354:	1be1      	subs	r1, r4, r7
    3356:	b2c9      	uxtb	r1, r1
    3358:	19e8      	adds	r0, r5, r7
    335a:	4b03      	ldr	r3, [pc, #12]	; (3368 <compute_mic+0x80>)
    335c:	4798      	blx	r3
    335e:	e7da      	b.n	3316 <compute_mic+0x2e>
    3360:	000039e9 	.word	0x000039e9
    3364:	0000397d 	.word	0x0000397d
    3368:	00003285 	.word	0x00003285
    336c:	00003b21 	.word	0x00003b21
    3370:	00007a7f 	.word	0x00007a7f

00003374 <encrypt_pldmic>:
 */
void encrypt_pldmic(uint8_t *buffer,
		uint8_t *nonce,
		uint8_t mic_len,
		uint8_t pld_len)
{
    3374:	b5f0      	push	{r4, r5, r6, r7, lr}
    3376:	46d6      	mov	lr, sl
    3378:	464f      	mov	r7, r9
    337a:	4646      	mov	r6, r8
    337c:	b5c0      	push	{r6, r7, lr}
    337e:	b084      	sub	sp, #16
    3380:	0004      	movs	r4, r0
    3382:	000f      	movs	r7, r1
    3384:	0016      	movs	r6, r2
    3386:	001d      	movs	r5, r3
	uint8_t ctr;
	uint8_t i;
	uint8_t keystream[AES_BLOCKSIZE];
	uint8_t *keystreamptr;

	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    3388:	2200      	movs	r2, #0
    338a:	2100      	movs	r1, #0
    338c:	2000      	movs	r0, #0
    338e:	4b31      	ldr	r3, [pc, #196]	; (3454 <encrypt_pldmic+0xe0>)
    3390:	4798      	blx	r3

	/* Init first keystream block. */
	nonce[AES_BLOCKSIZE - 1] = ctr = 1;
    3392:	2301      	movs	r3, #1
    3394:	73fb      	strb	r3, [r7, #15]

	if (pld_len > 0) {
    3396:	2d00      	cmp	r5, #0
    3398:	d106      	bne.n	33a8 <encrypt_pldmic+0x34>
{
    339a:	2301      	movs	r3, #1
    339c:	469a      	mov	sl, r3
				/* Prepare the keystream for MIC. */
				nonce[AES_BLOCKSIZE - 1] = 0;

				sal_aes_wrrd(nonce, keystream);
			} else {
				sal_aes_read(keystream);
    339e:	4b2e      	ldr	r3, [pc, #184]	; (3458 <encrypt_pldmic+0xe4>)
    33a0:	4699      	mov	r9, r3
				sal_aes_wrrd(nonce, keystream);
    33a2:	4b2e      	ldr	r3, [pc, #184]	; (345c <encrypt_pldmic+0xe8>)
    33a4:	4698      	mov	r8, r3
    33a6:	e02e      	b.n	3406 <encrypt_pldmic+0x92>
		sal_aes_wrrd(nonce, NULL);
    33a8:	2100      	movs	r1, #0
    33aa:	0038      	movs	r0, r7
    33ac:	4b2b      	ldr	r3, [pc, #172]	; (345c <encrypt_pldmic+0xe8>)
    33ae:	4798      	blx	r3
    33b0:	e7f3      	b.n	339a <encrypt_pldmic+0x26>
				sal_aes_read(keystream);
    33b2:	4668      	mov	r0, sp
    33b4:	47c8      	blx	r9
    33b6:	e02f      	b.n	3418 <encrypt_pldmic+0xa4>
			}
		} else {
			/* Prepare the next keystream block. */
			nonce[AES_BLOCKSIZE - 1] = ++ctr;
    33b8:	4653      	mov	r3, sl
    33ba:	3301      	adds	r3, #1
    33bc:	b2db      	uxtb	r3, r3
    33be:	469a      	mov	sl, r3
    33c0:	73fb      	strb	r3, [r7, #15]

			sal_aes_wrrd(nonce, keystream);
    33c2:	4669      	mov	r1, sp
    33c4:	0038      	movs	r0, r7
    33c6:	4b25      	ldr	r3, [pc, #148]	; (345c <encrypt_pldmic+0xe8>)
    33c8:	4798      	blx	r3
		}

		/* En/decrypt payload. */

		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    33ca:	1c2b      	adds	r3, r5, #0
    33cc:	2d10      	cmp	r5, #16
    33ce:	d900      	bls.n	33d2 <encrypt_pldmic+0x5e>
    33d0:	2310      	movs	r3, #16
    33d2:	b2db      	uxtb	r3, r3
				i--;
    33d4:	1e58      	subs	r0, r3, #1
    33d6:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    33d8:	2b00      	cmp	r3, #0
    33da:	d105      	bne.n	33e8 <encrypt_pldmic+0x74>
    33dc:	e011      	b.n	3402 <encrypt_pldmic+0x8e>
    33de:	b2db      	uxtb	r3, r3
				i--;
    33e0:	1e58      	subs	r0, r3, #1
    33e2:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    33e4:	2b00      	cmp	r3, #0
    33e6:	d01c      	beq.n	3422 <encrypt_pldmic+0xae>
    33e8:	3001      	adds	r0, #1
{
    33ea:	2300      	movs	r3, #0
		                /* */) {
			*buffer++ ^= *keystreamptr++;
    33ec:	466a      	mov	r2, sp
    33ee:	5c9a      	ldrb	r2, [r3, r2]
    33f0:	5ce1      	ldrb	r1, [r4, r3]
    33f2:	404a      	eors	r2, r1
    33f4:	54e2      	strb	r2, [r4, r3]
    33f6:	3301      	adds	r3, #1
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    33f8:	4298      	cmp	r0, r3
    33fa:	d1f7      	bne.n	33ec <encrypt_pldmic+0x78>
    33fc:	18e4      	adds	r4, r4, r3
		}

		if (pld_len <= AES_BLOCKSIZE) {
    33fe:	2d10      	cmp	r5, #16
    3400:	d90f      	bls.n	3422 <encrypt_pldmic+0xae>
			break;
		}

		pld_len -= AES_BLOCKSIZE;
    3402:	3d10      	subs	r5, #16
    3404:	b2ed      	uxtb	r5, r5
		if (pld_len <= AES_BLOCKSIZE) { /* Last block */
    3406:	2d10      	cmp	r5, #16
    3408:	d8d6      	bhi.n	33b8 <encrypt_pldmic+0x44>
			if (mic_len) {
    340a:	2e00      	cmp	r6, #0
    340c:	d0d1      	beq.n	33b2 <encrypt_pldmic+0x3e>
				nonce[AES_BLOCKSIZE - 1] = 0;
    340e:	2300      	movs	r3, #0
    3410:	73fb      	strb	r3, [r7, #15]
				sal_aes_wrrd(nonce, keystream);
    3412:	4669      	mov	r1, sp
    3414:	0038      	movs	r0, r7
    3416:	47c0      	blx	r8
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    3418:	1c2b      	adds	r3, r5, #0
    341a:	2d10      	cmp	r5, #16
    341c:	d9df      	bls.n	33de <encrypt_pldmic+0x6a>
    341e:	2310      	movs	r3, #16
    3420:	e7dd      	b.n	33de <encrypt_pldmic+0x6a>
	}

	/* En/decrypt MIC. */

	if (mic_len) {
    3422:	2e00      	cmp	r6, #0
    3424:	d105      	bne.n	3432 <encrypt_pldmic+0xbe>

		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
			*buffer++ ^= *keystreamptr++;
		}
	}
}
    3426:	b004      	add	sp, #16
    3428:	bc1c      	pop	{r2, r3, r4}
    342a:	4690      	mov	r8, r2
    342c:	4699      	mov	r9, r3
    342e:	46a2      	mov	sl, r4
    3430:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sal_aes_read(keystream);
    3432:	4668      	mov	r0, sp
    3434:	4b08      	ldr	r3, [pc, #32]	; (3458 <encrypt_pldmic+0xe4>)
    3436:	4798      	blx	r3
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    3438:	3e01      	subs	r6, #1
    343a:	b2f2      	uxtb	r2, r6
    343c:	3201      	adds	r2, #1
    343e:	2300      	movs	r3, #0
			*buffer++ ^= *keystreamptr++;
    3440:	4669      	mov	r1, sp
    3442:	5c59      	ldrb	r1, [r3, r1]
    3444:	5ce0      	ldrb	r0, [r4, r3]
    3446:	4041      	eors	r1, r0
    3448:	54e1      	strb	r1, [r4, r3]
    344a:	3301      	adds	r3, #1
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    344c:	4293      	cmp	r3, r2
    344e:	d1f7      	bne.n	3440 <encrypt_pldmic+0xcc>
    3450:	e7e9      	b.n	3426 <encrypt_pldmic+0xb2>
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	000039e9 	.word	0x000039e9
    3458:	00003b21 	.word	0x00003b21
    345c:	0000397d 	.word	0x0000397d

00003460 <MiMem_Alloc>:
********************************************************************/
uint8_t* MiMem_Alloc(uint8_t size)
{
    uint8_t loopIndex = 0;

    if (size <= MIMEM_BUFFER_SIZE)
    3460:	28a0      	cmp	r0, #160	; 0xa0
    3462:	d81a      	bhi.n	349a <MiMem_Alloc+0x3a>
    {
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
        {
            if (mimemBuffers[loopIndex].bufferFlag == false)
    3464:	23a4      	movs	r3, #164	; 0xa4
    3466:	4a0e      	ldr	r2, [pc, #56]	; (34a0 <MiMem_Alloc+0x40>)
    3468:	5cd3      	ldrb	r3, [r2, r3]
    346a:	2b00      	cmp	r3, #0
    346c:	d00b      	beq.n	3486 <MiMem_Alloc+0x26>
    346e:	4a0d      	ldr	r2, [pc, #52]	; (34a4 <MiMem_Alloc+0x44>)
    3470:	2301      	movs	r3, #1
    3472:	0018      	movs	r0, r3
    3474:	7811      	ldrb	r1, [r2, #0]
    3476:	2900      	cmp	r1, #0
    3478:	d006      	beq.n	3488 <MiMem_Alloc+0x28>
    347a:	3301      	adds	r3, #1
    347c:	32a8      	adds	r2, #168	; 0xa8
        for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    347e:	2b0a      	cmp	r3, #10
    3480:	d1f7      	bne.n	3472 <MiMem_Alloc+0x12>
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
            }
        }
    }
    //printf("\r\n MiMem Buffer Full/unavailable for given size");
    return NULL;
    3482:	2000      	movs	r0, #0
}
    3484:	4770      	bx	lr
            if (mimemBuffers[loopIndex].bufferFlag == false)
    3486:	2000      	movs	r0, #0
                mimemBuffers[loopIndex].bufferFlag = true;
    3488:	23a8      	movs	r3, #168	; 0xa8
    348a:	4343      	muls	r3, r0
    348c:	4804      	ldr	r0, [pc, #16]	; (34a0 <MiMem_Alloc+0x40>)
    348e:	18c0      	adds	r0, r0, r3
    3490:	0003      	movs	r3, r0
    3492:	33a4      	adds	r3, #164	; 0xa4
    3494:	2201      	movs	r2, #1
    3496:	701a      	strb	r2, [r3, #0]
                return ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer);
    3498:	e7f4      	b.n	3484 <MiMem_Alloc+0x24>
    return NULL;
    349a:	2000      	movs	r0, #0
    349c:	e7f2      	b.n	3484 <MiMem_Alloc+0x24>
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	20000c0c 	.word	0x20000c0c
    34a4:	20000d58 	.word	0x20000d58

000034a8 <MiMem_Free>:
* the given memory else returns error
*
* Note:			    none
********************************************************************/
uint8_t MiMem_Free(uint8_t* buffPtr)
{
    34a8:	b530      	push	{r4, r5, lr}
    34aa:	4b0d      	ldr	r3, [pc, #52]	; (34e0 <MiMem_Free+0x38>)
    34ac:	2200      	movs	r2, #0
    34ae:	e003      	b.n	34b8 <MiMem_Free+0x10>
    34b0:	3201      	adds	r2, #1
    34b2:	33a8      	adds	r3, #168	; 0xa8
	uint8_t loopIndex = 0;
	for (loopIndex = 0; loopIndex < NUMBER_OF_MIMEM_BUFFERS; loopIndex++)
    34b4:	2a0a      	cmp	r2, #10
    34b6:	d010      	beq.n	34da <MiMem_Free+0x32>
	{
		if ((mimemBuffers[loopIndex].bufferFlag == true) &&
    34b8:	0015      	movs	r5, r2
    34ba:	0019      	movs	r1, r3
    34bc:	31a4      	adds	r1, #164	; 0xa4
    34be:	7809      	ldrb	r1, [r1, #0]
    34c0:	2900      	cmp	r1, #0
    34c2:	d0f5      	beq.n	34b0 <MiMem_Free+0x8>
    34c4:	4298      	cmp	r0, r3
    34c6:	d1f3      	bne.n	34b0 <MiMem_Free+0x8>
		   ((uint8_t *)mimemBuffers[loopIndex].MiMemBuffer == buffPtr))
		{
			//printf("\r\n MiMem Buffer Free: %d", loopIndex);
			mimemBuffers[loopIndex].bufferFlag = false;
    34c8:	23a8      	movs	r3, #168	; 0xa8
    34ca:	435d      	muls	r5, r3
    34cc:	4b04      	ldr	r3, [pc, #16]	; (34e0 <MiMem_Free+0x38>)
    34ce:	195d      	adds	r5, r3, r5
    34d0:	35a4      	adds	r5, #164	; 0xa4
    34d2:	2200      	movs	r2, #0
    34d4:	702a      	strb	r2, [r5, #0]
			return 0;
    34d6:	2000      	movs	r0, #0
    34d8:	e000      	b.n	34dc <MiMem_Free+0x34>
		}
	}
	//printf("\r\n MiMem Buffer Already Free");
	return 0xff;
    34da:	20ff      	movs	r0, #255	; 0xff
}
    34dc:	bd30      	pop	{r4, r5, pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	20000c0c 	.word	0x20000c0c

000034e4 <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    34e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e6:	46c6      	mov	lr, r8
    34e8:	b500      	push	{lr}
    34ea:	0007      	movs	r7, r0
    34ec:	4688      	mov	r8, r1
    34ee:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    34f0:	b672      	cpsid	i
  __ASM volatile ("dmb");
    34f2:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    34f6:	2200      	movs	r2, #0
    34f8:	4b1f      	ldr	r3, [pc, #124]	; (3578 <miQueueReadOrRemove+0x94>)
    34fa:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    34fc:	7a03      	ldrb	r3, [r0, #8]
    34fe:	2b00      	cmp	r3, #0
    3500:	d037      	beq.n	3572 <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    3502:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    3504:	2d00      	cmp	r5, #0
    3506:	d019      	beq.n	353c <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    3508:	2c00      	cmp	r4, #0
    350a:	d00c      	beq.n	3526 <miQueueReadOrRemove+0x42>
    350c:	0026      	movs	r6, r4
    350e:	e000      	b.n	3512 <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    3510:	001c      	movs	r4, r3
				match = search->criteria_func(
    3512:	6869      	ldr	r1, [r5, #4]
    3514:	6860      	ldr	r0, [r4, #4]
    3516:	682b      	ldr	r3, [r5, #0]
    3518:	4798      	blx	r3
				if (match) {
    351a:	2800      	cmp	r0, #0
    351c:	d10f      	bne.n	353e <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    351e:	6823      	ldr	r3, [r4, #0]
    3520:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    3522:	2b00      	cmp	r3, #0
    3524:	d1f4      	bne.n	3510 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    3526:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    3528:	2201      	movs	r2, #1
    352a:	4b13      	ldr	r3, [pc, #76]	; (3578 <miQueueReadOrRemove+0x94>)
    352c:	701a      	strb	r2, [r3, #0]
    352e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3532:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    3534:	0020      	movs	r0, r4
    3536:	bc04      	pop	{r2}
    3538:	4690      	mov	r8, r2
    353a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    353c:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    353e:	2c00      	cmp	r4, #0
    3540:	d0f2      	beq.n	3528 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    3542:	4643      	mov	r3, r8
    3544:	2b00      	cmp	r3, #0
    3546:	d1ef      	bne.n	3528 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    3548:	683b      	ldr	r3, [r7, #0]
    354a:	429c      	cmp	r4, r3
    354c:	d00c      	beq.n	3568 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    354e:	6823      	ldr	r3, [r4, #0]
    3550:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    3552:	687b      	ldr	r3, [r7, #4]
    3554:	429c      	cmp	r4, r3
    3556:	d00a      	beq.n	356e <miQueueReadOrRemove+0x8a>
				q->size--;
    3558:	7a3b      	ldrb	r3, [r7, #8]
    355a:	3b01      	subs	r3, #1
    355c:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    355e:	683b      	ldr	r3, [r7, #0]
    3560:	2b00      	cmp	r3, #0
    3562:	d1e1      	bne.n	3528 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    3564:	607b      	str	r3, [r7, #4]
    3566:	e7df      	b.n	3528 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    3568:	6823      	ldr	r3, [r4, #0]
    356a:	603b      	str	r3, [r7, #0]
    356c:	e7f1      	b.n	3552 <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    356e:	607e      	str	r6, [r7, #4]
    3570:	e7f2      	b.n	3558 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    3572:	2400      	movs	r4, #0
    3574:	e7d8      	b.n	3528 <miQueueReadOrRemove+0x44>
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	20000008 	.word	0x20000008

0000357c <miQueueInit>:
	q->head = NULL;
    357c:	2300      	movs	r3, #0
    357e:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    3580:	6043      	str	r3, [r0, #4]
	q->size = 0;
    3582:	7203      	strb	r3, [r0, #8]
}
    3584:	4770      	bx	lr
	...

00003588 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    3588:	b672      	cpsid	i
    358a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    358e:	2200      	movs	r2, #0
    3590:	4b0a      	ldr	r3, [pc, #40]	; (35bc <miQueueAppend+0x34>)
    3592:	701a      	strb	r2, [r3, #0]
		if (q->size == 0) {
    3594:	7a03      	ldrb	r3, [r0, #8]
    3596:	2b00      	cmp	r3, #0
    3598:	d00e      	beq.n	35b8 <miQueueAppend+0x30>
			q->tail->nextItem = buf;
    359a:	6843      	ldr	r3, [r0, #4]
    359c:	6019      	str	r1, [r3, #0]
		q->tail = buf;
    359e:	6041      	str	r1, [r0, #4]
		buf->nextItem = NULL;
    35a0:	2300      	movs	r3, #0
    35a2:	600b      	str	r3, [r1, #0]
		q->size++;
    35a4:	7a03      	ldrb	r3, [r0, #8]
    35a6:	3301      	adds	r3, #1
    35a8:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    35aa:	2201      	movs	r2, #1
    35ac:	4b03      	ldr	r3, [pc, #12]	; (35bc <miQueueAppend+0x34>)
    35ae:	701a      	strb	r2, [r3, #0]
    35b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    35b4:	b662      	cpsie	i
} /* miQueueAppend */
    35b6:	4770      	bx	lr
			q->head = buf;
    35b8:	6001      	str	r1, [r0, #0]
    35ba:	e7f0      	b.n	359e <miQueueAppend+0x16>
    35bc:	20000008 	.word	0x20000008

000035c0 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    35c0:	b510      	push	{r4, lr}
    35c2:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    35c4:	2100      	movs	r1, #0
    35c6:	4b01      	ldr	r3, [pc, #4]	; (35cc <miQueueRemove+0xc>)
    35c8:	4798      	blx	r3
}
    35ca:	bd10      	pop	{r4, pc}
    35cc:	000034e5 	.word	0x000034e5

000035d0 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    35d0:	b530      	push	{r4, r5, lr}
	if (timers) {
    35d2:	4b14      	ldr	r3, [pc, #80]	; (3624 <placeTimer+0x54>)
    35d4:	681d      	ldr	r5, [r3, #0]
    35d6:	2d00      	cmp	r5, #0
    35d8:	d01c      	beq.n	3614 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    35da:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    35dc:	6869      	ldr	r1, [r5, #4]
    35de:	428a      	cmp	r2, r1
    35e0:	d309      	bcc.n	35f6 <placeTimer+0x26>
    35e2:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    35e4:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    35e6:	6823      	ldr	r3, [r4, #0]
    35e8:	2b00      	cmp	r3, #0
    35ea:	d008      	beq.n	35fe <placeTimer+0x2e>
			if (timeout < t->timeout) {
    35ec:	6859      	ldr	r1, [r3, #4]
    35ee:	4291      	cmp	r1, r2
    35f0:	d803      	bhi.n	35fa <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    35f2:	001c      	movs	r4, r3
    35f4:	e7f6      	b.n	35e4 <placeTimer+0x14>
    35f6:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    35f8:	2400      	movs	r4, #0
				t->timeout -= timeout;
    35fa:	1a89      	subs	r1, r1, r2
    35fc:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    35fe:	6042      	str	r2, [r0, #4]

		if (prev) {
    3600:	2c00      	cmp	r4, #0
    3602:	d003      	beq.n	360c <placeTimer+0x3c>
			timer->next = prev->next;
    3604:	6823      	ldr	r3, [r4, #0]
    3606:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3608:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    360a:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    360c:	6005      	str	r5, [r0, #0]
			timers = timer;
    360e:	4b05      	ldr	r3, [pc, #20]	; (3624 <placeTimer+0x54>)
    3610:	6018      	str	r0, [r3, #0]
    3612:	e7fa      	b.n	360a <placeTimer+0x3a>
		timer->next = NULL;
    3614:	2300      	movs	r3, #0
    3616:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3618:	6883      	ldr	r3, [r0, #8]
    361a:	6043      	str	r3, [r0, #4]
		timers = timer;
    361c:	4b01      	ldr	r3, [pc, #4]	; (3624 <placeTimer+0x54>)
    361e:	6018      	str	r0, [r3, #0]
}
    3620:	e7f3      	b.n	360a <placeTimer+0x3a>
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	20000294 	.word	0x20000294

00003628 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    3628:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    362a:	4a04      	ldr	r2, [pc, #16]	; (363c <SYS_HwExpiry_Cb+0x14>)
    362c:	7813      	ldrb	r3, [r2, #0]
    362e:	3301      	adds	r3, #1
    3630:	b2db      	uxtb	r3, r3
    3632:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3634:	4802      	ldr	r0, [pc, #8]	; (3640 <SYS_HwExpiry_Cb+0x18>)
    3636:	4b03      	ldr	r3, [pc, #12]	; (3644 <SYS_HwExpiry_Cb+0x1c>)
    3638:	4798      	blx	r3
}
    363a:	bd10      	pop	{r4, pc}
    363c:	2000129c 	.word	0x2000129c
    3640:	00002710 	.word	0x00002710
    3644:	00004b35 	.word	0x00004b35

00003648 <SYS_TimerInit>:
{
    3648:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    364a:	2400      	movs	r4, #0
    364c:	4b06      	ldr	r3, [pc, #24]	; (3668 <SYS_TimerInit+0x20>)
    364e:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3650:	4806      	ldr	r0, [pc, #24]	; (366c <SYS_TimerInit+0x24>)
    3652:	4b07      	ldr	r3, [pc, #28]	; (3670 <SYS_TimerInit+0x28>)
    3654:	4798      	blx	r3
	common_tc_init();
    3656:	4b07      	ldr	r3, [pc, #28]	; (3674 <SYS_TimerInit+0x2c>)
    3658:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    365a:	4807      	ldr	r0, [pc, #28]	; (3678 <SYS_TimerInit+0x30>)
    365c:	4b07      	ldr	r3, [pc, #28]	; (367c <SYS_TimerInit+0x34>)
    365e:	4798      	blx	r3
	timers = NULL;
    3660:	4b07      	ldr	r3, [pc, #28]	; (3680 <SYS_TimerInit+0x38>)
    3662:	601c      	str	r4, [r3, #0]
}
    3664:	bd10      	pop	{r4, pc}
    3666:	46c0      	nop			; (mov r8, r8)
    3668:	2000129c 	.word	0x2000129c
    366c:	00003629 	.word	0x00003629
    3670:	00004c25 	.word	0x00004c25
    3674:	00004ba1 	.word	0x00004ba1
    3678:	00002710 	.word	0x00002710
    367c:	00004b35 	.word	0x00004b35
    3680:	20000294 	.word	0x20000294

00003684 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3684:	4b0e      	ldr	r3, [pc, #56]	; (36c0 <SYS_TimerStop+0x3c>)
    3686:	681a      	ldr	r2, [r3, #0]
    3688:	2a00      	cmp	r2, #0
    368a:	d014      	beq.n	36b6 <SYS_TimerStop+0x32>
		if (t == timer) {
    368c:	4282      	cmp	r2, r0
    368e:	d013      	beq.n	36b8 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3690:	6813      	ldr	r3, [r2, #0]
    3692:	2b00      	cmp	r3, #0
    3694:	d00f      	beq.n	36b6 <SYS_TimerStop+0x32>
		if (t == timer) {
    3696:	4298      	cmp	r0, r3
    3698:	d001      	beq.n	369e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    369a:	001a      	movs	r2, r3
    369c:	e7f8      	b.n	3690 <SYS_TimerStop+0xc>
			if (prev) {
    369e:	2a00      	cmp	r2, #0
    36a0:	d00a      	beq.n	36b8 <SYS_TimerStop+0x34>
				prev->next = t->next;
    36a2:	6803      	ldr	r3, [r0, #0]
    36a4:	6013      	str	r3, [r2, #0]
			if (t->next) {
    36a6:	6803      	ldr	r3, [r0, #0]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d004      	beq.n	36b6 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    36ac:	6842      	ldr	r2, [r0, #4]
    36ae:	6859      	ldr	r1, [r3, #4]
    36b0:	468c      	mov	ip, r1
    36b2:	4462      	add	r2, ip
    36b4:	605a      	str	r2, [r3, #4]
}
    36b6:	4770      	bx	lr
				timers = t->next;
    36b8:	4b01      	ldr	r3, [pc, #4]	; (36c0 <SYS_TimerStop+0x3c>)
    36ba:	6802      	ldr	r2, [r0, #0]
    36bc:	601a      	str	r2, [r3, #0]
    36be:	e7f2      	b.n	36a6 <SYS_TimerStop+0x22>
    36c0:	20000294 	.word	0x20000294

000036c4 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    36c4:	4b09      	ldr	r3, [pc, #36]	; (36ec <SYS_TimerStarted+0x28>)
    36c6:	681b      	ldr	r3, [r3, #0]
    36c8:	2b00      	cmp	r3, #0
    36ca:	d00a      	beq.n	36e2 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    36cc:	4283      	cmp	r3, r0
    36ce:	d00a      	beq.n	36e6 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d003      	beq.n	36de <SYS_TimerStarted+0x1a>
		if (t == timer) {
    36d6:	4298      	cmp	r0, r3
    36d8:	d1fa      	bne.n	36d0 <SYS_TimerStarted+0xc>
			return true;
    36da:	2001      	movs	r0, #1
    36dc:	e000      	b.n	36e0 <SYS_TimerStarted+0x1c>
	return false;
    36de:	2000      	movs	r0, #0
}
    36e0:	4770      	bx	lr
	return false;
    36e2:	2000      	movs	r0, #0
    36e4:	e7fc      	b.n	36e0 <SYS_TimerStarted+0x1c>
			return true;
    36e6:	2001      	movs	r0, #1
    36e8:	e7fa      	b.n	36e0 <SYS_TimerStarted+0x1c>
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	20000294 	.word	0x20000294

000036f0 <SYS_TimerStart>:
{
    36f0:	b510      	push	{r4, lr}
    36f2:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    36f4:	4b04      	ldr	r3, [pc, #16]	; (3708 <SYS_TimerStart+0x18>)
    36f6:	4798      	blx	r3
    36f8:	2800      	cmp	r0, #0
    36fa:	d000      	beq.n	36fe <SYS_TimerStart+0xe>
}
    36fc:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    36fe:	0020      	movs	r0, r4
    3700:	4b02      	ldr	r3, [pc, #8]	; (370c <SYS_TimerStart+0x1c>)
    3702:	4798      	blx	r3
}
    3704:	e7fa      	b.n	36fc <SYS_TimerStart+0xc>
    3706:	46c0      	nop			; (mov r8, r8)
    3708:	000036c5 	.word	0x000036c5
    370c:	000035d1 	.word	0x000035d1

00003710 <SYS_TimerTaskHandler>:
{
    3710:	b5f0      	push	{r4, r5, r6, r7, lr}
    3712:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    3714:	4b1d      	ldr	r3, [pc, #116]	; (378c <SYS_TimerTaskHandler+0x7c>)
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	2b00      	cmp	r3, #0
    371a:	d035      	beq.n	3788 <SYS_TimerTaskHandler+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    371c:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3720:	4253      	negs	r3, r2
    3722:	4153      	adcs	r3, r2
    3724:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3726:	b672      	cpsid	i
    3728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    372c:	2100      	movs	r1, #0
    372e:	4b18      	ldr	r3, [pc, #96]	; (3790 <SYS_TimerTaskHandler+0x80>)
    3730:	7019      	strb	r1, [r3, #0]
	return flags;
    3732:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    3734:	4a15      	ldr	r2, [pc, #84]	; (378c <SYS_TimerTaskHandler+0x7c>)
    3736:	7813      	ldrb	r3, [r2, #0]
    3738:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    373a:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    373c:	2800      	cmp	r0, #0
    373e:	d005      	beq.n	374c <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    3740:	3101      	adds	r1, #1
    3742:	4a13      	ldr	r2, [pc, #76]	; (3790 <SYS_TimerTaskHandler+0x80>)
    3744:	7011      	strb	r1, [r2, #0]
    3746:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    374a:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    374c:	009d      	lsls	r5, r3, #2
    374e:	18ed      	adds	r5, r5, r3
    3750:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    3752:	4e10      	ldr	r6, [pc, #64]	; (3794 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    3754:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    3756:	e005      	b.n	3764 <SYS_TimerTaskHandler+0x54>
			placeTimer(timer);
    3758:	0020      	movs	r0, r4
    375a:	4b0f      	ldr	r3, [pc, #60]	; (3798 <SYS_TimerTaskHandler+0x88>)
    375c:	4798      	blx	r3
    375e:	e00d      	b.n	377c <SYS_TimerTaskHandler+0x6c>
			timer->handler(timer);
    3760:	0020      	movs	r0, r4
    3762:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    3764:	6834      	ldr	r4, [r6, #0]
    3766:	2c00      	cmp	r4, #0
    3768:	d00e      	beq.n	3788 <SYS_TimerTaskHandler+0x78>
    376a:	6863      	ldr	r3, [r4, #4]
    376c:	429d      	cmp	r5, r3
    376e:	d309      	bcc.n	3784 <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    3770:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    3772:	6823      	ldr	r3, [r4, #0]
    3774:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3776:	7b23      	ldrb	r3, [r4, #12]
    3778:	2b01      	cmp	r3, #1
    377a:	d0ed      	beq.n	3758 <SYS_TimerTaskHandler+0x48>
		if (timer->handler) {
    377c:	6923      	ldr	r3, [r4, #16]
    377e:	2b00      	cmp	r3, #0
    3780:	d1ee      	bne.n	3760 <SYS_TimerTaskHandler+0x50>
    3782:	e7ef      	b.n	3764 <SYS_TimerTaskHandler+0x54>
		timers->timeout -= elapsed;
    3784:	1b5d      	subs	r5, r3, r5
    3786:	6065      	str	r5, [r4, #4]
}
    3788:	b003      	add	sp, #12
    378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    378c:	2000129c 	.word	0x2000129c
    3790:	20000008 	.word	0x20000008
    3794:	20000294 	.word	0x20000294
    3798:	000035d1 	.word	0x000035d1

0000379c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    379c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    379e:	4b01      	ldr	r3, [pc, #4]	; (37a4 <tc_cca_callback+0x8>)
    37a0:	4798      	blx	r3
}
    37a2:	bd10      	pop	{r4, pc}
    37a4:	00004c09 	.word	0x00004c09

000037a8 <tc_ovf_callback>:
{
    37a8:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    37aa:	4b01      	ldr	r3, [pc, #4]	; (37b0 <tc_ovf_callback+0x8>)
    37ac:	4798      	blx	r3
}
    37ae:	bd10      	pop	{r4, pc}
    37b0:	00004bc1 	.word	0x00004bc1

000037b4 <tmr_read_count>:
{
    37b4:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    37b6:	4802      	ldr	r0, [pc, #8]	; (37c0 <tmr_read_count+0xc>)
    37b8:	4b02      	ldr	r3, [pc, #8]	; (37c4 <tmr_read_count+0x10>)
    37ba:	4798      	blx	r3
    37bc:	b280      	uxth	r0, r0
}
    37be:	bd10      	pop	{r4, pc}
    37c0:	200012d4 	.word	0x200012d4
    37c4:	000021a9 	.word	0x000021a9

000037c8 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    37c8:	4b03      	ldr	r3, [pc, #12]	; (37d8 <tmr_disable_cc_interrupt+0x10>)
    37ca:	2110      	movs	r1, #16
    37cc:	681a      	ldr	r2, [r3, #0]
    37ce:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    37d0:	7e5a      	ldrb	r2, [r3, #25]
    37d2:	438a      	bics	r2, r1
    37d4:	765a      	strb	r2, [r3, #25]
}
    37d6:	4770      	bx	lr
    37d8:	200012d4 	.word	0x200012d4

000037dc <tmr_enable_cc_interrupt>:
{
    37dc:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    37de:	4c0a      	ldr	r4, [pc, #40]	; (3808 <tmr_enable_cc_interrupt+0x2c>)
    37e0:	6820      	ldr	r0, [r4, #0]
    37e2:	4b0a      	ldr	r3, [pc, #40]	; (380c <tmr_enable_cc_interrupt+0x30>)
    37e4:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    37e6:	4b0a      	ldr	r3, [pc, #40]	; (3810 <tmr_enable_cc_interrupt+0x34>)
    37e8:	5c1b      	ldrb	r3, [r3, r0]
    37ea:	221f      	movs	r2, #31
    37ec:	401a      	ands	r2, r3
    37ee:	2301      	movs	r3, #1
    37f0:	4093      	lsls	r3, r2
    37f2:	4a08      	ldr	r2, [pc, #32]	; (3814 <tmr_enable_cc_interrupt+0x38>)
    37f4:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    37f6:	7e63      	ldrb	r3, [r4, #25]
    37f8:	2210      	movs	r2, #16
    37fa:	4313      	orrs	r3, r2
    37fc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    37fe:	6823      	ldr	r3, [r4, #0]
    3800:	2210      	movs	r2, #16
    3802:	735a      	strb	r2, [r3, #13]
}
    3804:	bd10      	pop	{r4, pc}
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	200012d4 	.word	0x200012d4
    380c:	00001f35 	.word	0x00001f35
    3810:	00008ac4 	.word	0x00008ac4
    3814:	e000e100 	.word	0xe000e100

00003818 <tmr_write_cmpreg>:
{
    3818:	b510      	push	{r4, lr}
    381a:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    381c:	2100      	movs	r1, #0
    381e:	4802      	ldr	r0, [pc, #8]	; (3828 <tmr_write_cmpreg+0x10>)
    3820:	4b02      	ldr	r3, [pc, #8]	; (382c <tmr_write_cmpreg+0x14>)
    3822:	4798      	blx	r3
}
    3824:	bd10      	pop	{r4, pc}
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	200012d4 	.word	0x200012d4
    382c:	000021d5 	.word	0x000021d5

00003830 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    3830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3832:	46ce      	mov	lr, r9
    3834:	4647      	mov	r7, r8
    3836:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3838:	4a2d      	ldr	r2, [pc, #180]	; (38f0 <tmr_init+0xc0>)
    383a:	2300      	movs	r3, #0
    383c:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    383e:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3840:	2100      	movs	r1, #0
    3842:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3844:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3846:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3848:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    384a:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    384c:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    384e:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3850:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3852:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3854:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3856:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3858:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    385a:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    385c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    385e:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3860:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3862:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    3864:	3b01      	subs	r3, #1
    3866:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    3868:	4c22      	ldr	r4, [pc, #136]	; (38f4 <tmr_init+0xc4>)
    386a:	4923      	ldr	r1, [pc, #140]	; (38f8 <tmr_init+0xc8>)
    386c:	0020      	movs	r0, r4
    386e:	4b23      	ldr	r3, [pc, #140]	; (38fc <tmr_init+0xcc>)
    3870:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3872:	2200      	movs	r2, #0
    3874:	4922      	ldr	r1, [pc, #136]	; (3900 <tmr_init+0xd0>)
    3876:	0020      	movs	r0, r4
    3878:	4d22      	ldr	r5, [pc, #136]	; (3904 <tmr_init+0xd4>)
    387a:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    387c:	2202      	movs	r2, #2
    387e:	4922      	ldr	r1, [pc, #136]	; (3908 <tmr_init+0xd8>)
    3880:	0020      	movs	r0, r4
    3882:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3884:	6820      	ldr	r0, [r4, #0]
    3886:	4b21      	ldr	r3, [pc, #132]	; (390c <tmr_init+0xdc>)
    3888:	4699      	mov	r9, r3
    388a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    388c:	4b20      	ldr	r3, [pc, #128]	; (3910 <tmr_init+0xe0>)
    388e:	4698      	mov	r8, r3
    3890:	5c1b      	ldrb	r3, [r3, r0]
    3892:	261f      	movs	r6, #31
    3894:	4033      	ands	r3, r6
    3896:	2501      	movs	r5, #1
    3898:	002a      	movs	r2, r5
    389a:	409a      	lsls	r2, r3
    389c:	4f1d      	ldr	r7, [pc, #116]	; (3914 <tmr_init+0xe4>)
    389e:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    38a0:	7e63      	ldrb	r3, [r4, #25]
    38a2:	2201      	movs	r2, #1
    38a4:	4313      	orrs	r3, r2
    38a6:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    38a8:	6823      	ldr	r3, [r4, #0]
    38aa:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    38ac:	0018      	movs	r0, r3
    38ae:	47c8      	blx	r9
    38b0:	4643      	mov	r3, r8
    38b2:	5c1b      	ldrb	r3, [r3, r0]
    38b4:	401e      	ands	r6, r3
    38b6:	40b5      	lsls	r5, r6
    38b8:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    38ba:	7e63      	ldrb	r3, [r4, #25]
    38bc:	2210      	movs	r2, #16
    38be:	4313      	orrs	r3, r2
    38c0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    38c2:	6822      	ldr	r2, [r4, #0]
    38c4:	2310      	movs	r3, #16
    38c6:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    38c8:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    38ca:	b25b      	sxtb	r3, r3
    38cc:	2b00      	cmp	r3, #0
    38ce:	dbfb      	blt.n	38c8 <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    38d0:	8813      	ldrh	r3, [r2, #0]
    38d2:	2102      	movs	r1, #2
    38d4:	430b      	orrs	r3, r1
    38d6:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    38d8:	2000      	movs	r0, #0
    38da:	4b0f      	ldr	r3, [pc, #60]	; (3918 <tmr_init+0xe8>)
    38dc:	4798      	blx	r3
    38de:	490f      	ldr	r1, [pc, #60]	; (391c <tmr_init+0xec>)
    38e0:	4b0f      	ldr	r3, [pc, #60]	; (3920 <tmr_init+0xf0>)
    38e2:	4798      	blx	r3
	#endif
	return timer_multiplier;
    38e4:	b2c0      	uxtb	r0, r0
}
    38e6:	bc0c      	pop	{r2, r3}
    38e8:	4690      	mov	r8, r2
    38ea:	4699      	mov	r9, r3
    38ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38ee:	46c0      	nop			; (mov r8, r8)
    38f0:	200012a0 	.word	0x200012a0
    38f4:	200012d4 	.word	0x200012d4
    38f8:	42002c00 	.word	0x42002c00
    38fc:	00001f6d 	.word	0x00001f6d
    3900:	000037a9 	.word	0x000037a9
    3904:	00001e6d 	.word	0x00001e6d
    3908:	0000379d 	.word	0x0000379d
    390c:	00001f35 	.word	0x00001f35
    3910:	00008ac4 	.word	0x00008ac4
    3914:	e000e100 	.word	0xe000e100
    3918:	00001bfd 	.word	0x00001bfd
    391c:	000f4240 	.word	0x000f4240
    3920:	000076d9 	.word	0x000076d9

00003924 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    3924:	4770      	bx	lr
	...

00003928 <sal_aes_restart>:
 * When using sal_aes_wrrd(), call sal_aes_read() to get the result
 * of the last AES operation BEFORE you put the transceiver unit to
 * sleep state!
 */
void sal_aes_restart(void)
{
    3928:	b570      	push	{r4, r5, r6, lr}
	 * This is not required anymore for SPI transceivers beyond
	 * these two mentioned transceivers.
	 */
	uint8_t *keyp;
	uint8_t save_cmd;
	if (last_dir == AES_DIR_ENCRYPT) {
    392a:	4b0c      	ldr	r3, [pc, #48]	; (395c <sal_aes_restart+0x34>)
    392c:	781b      	ldrb	r3, [r3, #0]
    392e:	2b00      	cmp	r3, #0
    3930:	d012      	beq.n	3958 <sal_aes_restart+0x30>
		keyp = enc_key;
	} else {
		keyp = dec_key;
    3932:	490b      	ldr	r1, [pc, #44]	; (3960 <sal_aes_restart+0x38>)
	}

	save_cmd = aes_buf[0];
    3934:	4c0b      	ldr	r4, [pc, #44]	; (3964 <sal_aes_restart+0x3c>)
    3936:	7825      	ldrb	r5, [r4, #0]
	aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3938:	2310      	movs	r3, #16
    393a:	7023      	strb	r3, [r4, #0]

	/* Fill in key. */
	memcpy(aes_buf + 1, keyp, AES_KEYSIZE);
    393c:	1c60      	adds	r0, r4, #1
    393e:	2210      	movs	r2, #16
    3940:	4b09      	ldr	r3, [pc, #36]	; (3968 <sal_aes_restart+0x40>)
    3942:	4798      	blx	r3

	/* Write to SRAM in one step. */
	trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3944:	2211      	movs	r2, #17
    3946:	0021      	movs	r1, r4
    3948:	2083      	movs	r0, #131	; 0x83
    394a:	4b08      	ldr	r3, [pc, #32]	; (396c <sal_aes_restart+0x44>)
    394c:	4798      	blx	r3
			AES_BLOCKSIZE + 1);

	aes_buf[0] = save_cmd;
    394e:	7025      	strb	r5, [r4, #0]
	setup_flag = true;
    3950:	2201      	movs	r2, #1
    3952:	4b07      	ldr	r3, [pc, #28]	; (3970 <sal_aes_restart+0x48>)
    3954:	701a      	strb	r2, [r3, #0]
}
    3956:	bd70      	pop	{r4, r5, r6, pc}
		keyp = enc_key;
    3958:	4906      	ldr	r1, [pc, #24]	; (3974 <sal_aes_restart+0x4c>)
    395a:	e7eb      	b.n	3934 <sal_aes_restart+0xc>
    395c:	20000049 	.word	0x20000049
    3960:	200002ac 	.word	0x200002ac
    3964:	20000298 	.word	0x20000298
    3968:	00007a7f 	.word	0x00007a7f
    396c:	000040e5 	.word	0x000040e5
    3970:	200002cc 	.word	0x200002cc
    3974:	200002bc 	.word	0x200002bc

00003978 <_sal_aes_clean_up>:
/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
}
    3978:	4770      	bx	lr
	...

0000397c <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    397c:	b570      	push	{r4, r5, r6, lr}
    397e:	0003      	movs	r3, r0
    3980:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3982:	4c14      	ldr	r4, [pc, #80]	; (39d4 <sal_aes_wrrd+0x58>)
    3984:	1c60      	adds	r0, r4, #1
    3986:	2210      	movs	r2, #16
    3988:	0019      	movs	r1, r3
    398a:	4b13      	ldr	r3, [pc, #76]	; (39d8 <sal_aes_wrrd+0x5c>)
    398c:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    398e:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3990:	4b12      	ldr	r3, [pc, #72]	; (39dc <sal_aes_wrrd+0x60>)
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	2b00      	cmp	r3, #0
    3996:	d015      	beq.n	39c4 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3998:	2212      	movs	r2, #18
    399a:	490e      	ldr	r1, [pc, #56]	; (39d4 <sal_aes_wrrd+0x58>)
    399c:	2083      	movs	r0, #131	; 0x83
    399e:	4b10      	ldr	r3, [pc, #64]	; (39e0 <sal_aes_wrrd+0x64>)
    39a0:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    39a2:	2200      	movs	r2, #0
    39a4:	4b0d      	ldr	r3, [pc, #52]	; (39dc <sal_aes_wrrd+0x60>)
    39a6:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    39a8:	2d00      	cmp	r5, #0
    39aa:	d005      	beq.n	39b8 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    39ac:	2210      	movs	r2, #16
    39ae:	4909      	ldr	r1, [pc, #36]	; (39d4 <sal_aes_wrrd+0x58>)
    39b0:	3101      	adds	r1, #1
    39b2:	0028      	movs	r0, r5
    39b4:	4b08      	ldr	r3, [pc, #32]	; (39d8 <sal_aes_wrrd+0x5c>)
    39b6:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    39b8:	4b06      	ldr	r3, [pc, #24]	; (39d4 <sal_aes_wrrd+0x58>)
    39ba:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    39bc:	2018      	movs	r0, #24
    39be:	4b09      	ldr	r3, [pc, #36]	; (39e4 <sal_aes_wrrd+0x68>)
    39c0:	4798      	blx	r3
}
    39c2:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    39c4:	2211      	movs	r2, #17
    39c6:	4903      	ldr	r1, [pc, #12]	; (39d4 <sal_aes_wrrd+0x58>)
    39c8:	3101      	adds	r1, #1
    39ca:	2084      	movs	r0, #132	; 0x84
    39cc:	4b04      	ldr	r3, [pc, #16]	; (39e0 <sal_aes_wrrd+0x64>)
    39ce:	4798      	blx	r3
    39d0:	e7ea      	b.n	39a8 <sal_aes_wrrd+0x2c>
    39d2:	46c0      	nop			; (mov r8, r8)
    39d4:	20000298 	.word	0x20000298
    39d8:	00007a7f 	.word	0x00007a7f
    39dc:	200002cc 	.word	0x200002cc
    39e0:	000043d9 	.word	0x000043d9
    39e4:	00000155 	.word	0x00000155

000039e8 <sal_aes_setup>:
{
    39e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ea:	46c6      	mov	lr, r8
    39ec:	b500      	push	{lr}
    39ee:	b084      	sub	sp, #16
    39f0:	0005      	movs	r5, r0
    39f2:	000e      	movs	r6, r1
    39f4:	0014      	movs	r4, r2
	if (key != NULL) {
    39f6:	2800      	cmp	r0, #0
    39f8:	d017      	beq.n	3a2a <sal_aes_setup+0x42>
		dec_initialized = false;
    39fa:	2200      	movs	r2, #0
    39fc:	4b3e      	ldr	r3, [pc, #248]	; (3af8 <sal_aes_setup+0x110>)
    39fe:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    3a00:	3202      	adds	r2, #2
    3a02:	4b3e      	ldr	r3, [pc, #248]	; (3afc <sal_aes_setup+0x114>)
    3a04:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    3a06:	320e      	adds	r2, #14
    3a08:	0001      	movs	r1, r0
    3a0a:	483d      	ldr	r0, [pc, #244]	; (3b00 <sal_aes_setup+0x118>)
    3a0c:	4b3d      	ldr	r3, [pc, #244]	; (3b04 <sal_aes_setup+0x11c>)
    3a0e:	4698      	mov	r8, r3
    3a10:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3a12:	4f3d      	ldr	r7, [pc, #244]	; (3b08 <sal_aes_setup+0x120>)
    3a14:	2310      	movs	r3, #16
    3a16:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3a18:	1c78      	adds	r0, r7, #1
    3a1a:	2210      	movs	r2, #16
    3a1c:	0029      	movs	r1, r5
    3a1e:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3a20:	2211      	movs	r2, #17
    3a22:	0039      	movs	r1, r7
    3a24:	2083      	movs	r0, #131	; 0x83
    3a26:	4b39      	ldr	r3, [pc, #228]	; (3b0c <sal_aes_setup+0x124>)
    3a28:	4798      	blx	r3
	switch (dir) {
    3a2a:	2c00      	cmp	r4, #0
    3a2c:	d003      	beq.n	3a36 <sal_aes_setup+0x4e>
    3a2e:	2c01      	cmp	r4, #1
    3a30:	d02f      	beq.n	3a92 <sal_aes_setup+0xaa>
		return false;
    3a32:	2000      	movs	r0, #0
    3a34:	e01b      	b.n	3a6e <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    3a36:	4b31      	ldr	r3, [pc, #196]	; (3afc <sal_aes_setup+0x114>)
    3a38:	781b      	ldrb	r3, [r3, #0]
    3a3a:	2b01      	cmp	r3, #1
    3a3c:	d01b      	beq.n	3a76 <sal_aes_setup+0x8e>
	last_dir = dir;
    3a3e:	4b2f      	ldr	r3, [pc, #188]	; (3afc <sal_aes_setup+0x114>)
    3a40:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    3a42:	2e00      	cmp	r6, #0
    3a44:	d002      	beq.n	3a4c <sal_aes_setup+0x64>
		return (false);
    3a46:	2000      	movs	r0, #0
	switch (enc_mode) {
    3a48:	2e02      	cmp	r6, #2
    3a4a:	d110      	bne.n	3a6e <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3a4c:	0136      	lsls	r6, r6, #4
    3a4e:	2370      	movs	r3, #112	; 0x70
    3a50:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    3a52:	00e4      	lsls	r4, r4, #3
    3a54:	3b68      	subs	r3, #104	; 0x68
    3a56:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3a58:	4334      	orrs	r4, r6
    3a5a:	4b2b      	ldr	r3, [pc, #172]	; (3b08 <sal_aes_setup+0x120>)
    3a5c:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    3a5e:	2680      	movs	r6, #128	; 0x80
    3a60:	4276      	negs	r6, r6
    3a62:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    3a64:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    3a66:	2201      	movs	r2, #1
    3a68:	4b29      	ldr	r3, [pc, #164]	; (3b10 <sal_aes_setup+0x128>)
    3a6a:	701a      	strb	r2, [r3, #0]
	return (true);
    3a6c:	2001      	movs	r0, #1
}
    3a6e:	b004      	add	sp, #16
    3a70:	bc04      	pop	{r2}
    3a72:	4690      	mov	r8, r2
    3a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3a76:	4d24      	ldr	r5, [pc, #144]	; (3b08 <sal_aes_setup+0x120>)
    3a78:	330f      	adds	r3, #15
    3a7a:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    3a7c:	1c68      	adds	r0, r5, #1
    3a7e:	2210      	movs	r2, #16
    3a80:	491f      	ldr	r1, [pc, #124]	; (3b00 <sal_aes_setup+0x118>)
    3a82:	4b20      	ldr	r3, [pc, #128]	; (3b04 <sal_aes_setup+0x11c>)
    3a84:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3a86:	2211      	movs	r2, #17
    3a88:	0029      	movs	r1, r5
    3a8a:	2083      	movs	r0, #131	; 0x83
    3a8c:	4b1f      	ldr	r3, [pc, #124]	; (3b0c <sal_aes_setup+0x124>)
    3a8e:	4798      	blx	r3
    3a90:	e7d5      	b.n	3a3e <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    3a92:	4b1a      	ldr	r3, [pc, #104]	; (3afc <sal_aes_setup+0x114>)
    3a94:	781b      	ldrb	r3, [r3, #0]
    3a96:	2b01      	cmp	r3, #1
    3a98:	d0d1      	beq.n	3a3e <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3a9a:	2210      	movs	r2, #16
    3a9c:	4b1a      	ldr	r3, [pc, #104]	; (3b08 <sal_aes_setup+0x120>)
    3a9e:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    3aa0:	4b15      	ldr	r3, [pc, #84]	; (3af8 <sal_aes_setup+0x110>)
    3aa2:	781b      	ldrb	r3, [r3, #0]
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d00e      	beq.n	3ac6 <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3aa8:	4d17      	ldr	r5, [pc, #92]	; (3b08 <sal_aes_setup+0x120>)
    3aaa:	1c68      	adds	r0, r5, #1
    3aac:	2210      	movs	r2, #16
    3aae:	4919      	ldr	r1, [pc, #100]	; (3b14 <sal_aes_setup+0x12c>)
    3ab0:	4b14      	ldr	r3, [pc, #80]	; (3b04 <sal_aes_setup+0x11c>)
    3ab2:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3ab4:	2211      	movs	r2, #17
    3ab6:	0029      	movs	r1, r5
    3ab8:	2083      	movs	r0, #131	; 0x83
    3aba:	4b14      	ldr	r3, [pc, #80]	; (3b0c <sal_aes_setup+0x124>)
    3abc:	4798      	blx	r3
			dec_initialized = true;
    3abe:	4b0e      	ldr	r3, [pc, #56]	; (3af8 <sal_aes_setup+0x110>)
    3ac0:	2201      	movs	r2, #1
    3ac2:	701a      	strb	r2, [r3, #0]
    3ac4:	e7bb      	b.n	3a3e <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3ac6:	4d10      	ldr	r5, [pc, #64]	; (3b08 <sal_aes_setup+0x120>)
    3ac8:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    3aca:	3380      	adds	r3, #128	; 0x80
    3acc:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    3ace:	3a0f      	subs	r2, #15
    3ad0:	4b0f      	ldr	r3, [pc, #60]	; (3b10 <sal_aes_setup+0x128>)
    3ad2:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    3ad4:	2100      	movs	r1, #0
    3ad6:	4668      	mov	r0, sp
    3ad8:	4b0f      	ldr	r3, [pc, #60]	; (3b18 <sal_aes_setup+0x130>)
    3ada:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3adc:	2310      	movs	r3, #16
    3ade:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3ae0:	2201      	movs	r2, #1
    3ae2:	0029      	movs	r1, r5
    3ae4:	2083      	movs	r0, #131	; 0x83
    3ae6:	4b09      	ldr	r3, [pc, #36]	; (3b0c <sal_aes_setup+0x124>)
    3ae8:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    3aea:	2210      	movs	r2, #16
    3aec:	4909      	ldr	r1, [pc, #36]	; (3b14 <sal_aes_setup+0x12c>)
    3aee:	2084      	movs	r0, #132	; 0x84
    3af0:	4b0a      	ldr	r3, [pc, #40]	; (3b1c <sal_aes_setup+0x134>)
    3af2:	4798      	blx	r3
    3af4:	e7d8      	b.n	3aa8 <sal_aes_setup+0xc0>
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	200002aa 	.word	0x200002aa
    3afc:	20000049 	.word	0x20000049
    3b00:	200002bc 	.word	0x200002bc
    3b04:	00007a7f 	.word	0x00007a7f
    3b08:	20000298 	.word	0x20000298
    3b0c:	000040e5 	.word	0x000040e5
    3b10:	200002cc 	.word	0x200002cc
    3b14:	200002ac 	.word	0x200002ac
    3b18:	0000397d 	.word	0x0000397d
    3b1c:	00004251 	.word	0x00004251

00003b20 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3b20:	b510      	push	{r4, lr}
    3b22:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    3b24:	2210      	movs	r2, #16
    3b26:	2084      	movs	r0, #132	; 0x84
    3b28:	4b01      	ldr	r3, [pc, #4]	; (3b30 <sal_aes_read+0x10>)
    3b2a:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3b2c:	bd10      	pop	{r4, pc}
    3b2e:	46c0      	nop			; (mov r8, r8)
    3b30:	00004251 	.word	0x00004251

00003b34 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3b34:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    3b36:	2201      	movs	r2, #1
    3b38:	4b03      	ldr	r3, [pc, #12]	; (3b48 <AT86RFX_ISR+0x14>)
    3b3a:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3b3c:	4b03      	ldr	r3, [pc, #12]	; (3b4c <AT86RFX_ISR+0x18>)
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	2b00      	cmp	r3, #0
    3b42:	d000      	beq.n	3b46 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3b44:	4798      	blx	r3
	}
}
    3b46:	bd10      	pop	{r4, pc}
    3b48:	40001800 	.word	0x40001800
    3b4c:	200002d0 	.word	0x200002d0

00003b50 <trx_spi_init>:

void trx_spi_init(void)
{
    3b50:	b530      	push	{r4, r5, lr}
    3b52:	b085      	sub	sp, #20
	config->address_enabled = false;
    3b54:	4a34      	ldr	r2, [pc, #208]	; (3c28 <trx_spi_init+0xd8>)
    3b56:	2300      	movs	r3, #0
    3b58:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3b5a:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3b5c:	213f      	movs	r1, #63	; 0x3f
    3b5e:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    3b60:	4c32      	ldr	r4, [pc, #200]	; (3c2c <trx_spi_init+0xdc>)
    3b62:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3b64:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3b66:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3b68:	2201      	movs	r2, #1
    3b6a:	4669      	mov	r1, sp
    3b6c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3b6e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3b70:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3b72:	203f      	movs	r0, #63	; 0x3f
    3b74:	4b2e      	ldr	r3, [pc, #184]	; (3c30 <trx_spi_init+0xe0>)
    3b76:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3b78:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    3b7a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3b7c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3b7e:	2900      	cmp	r1, #0
    3b80:	d104      	bne.n	3b8c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3b82:	0953      	lsrs	r3, r2, #5
    3b84:	01db      	lsls	r3, r3, #7
    3b86:	492b      	ldr	r1, [pc, #172]	; (3c34 <trx_spi_init+0xe4>)
    3b88:	468c      	mov	ip, r1
    3b8a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b8c:	211f      	movs	r1, #31
    3b8e:	4011      	ands	r1, r2
    3b90:	2201      	movs	r2, #1
    3b92:	0010      	movs	r0, r2
    3b94:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3b96:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3b98:	4c27      	ldr	r4, [pc, #156]	; (3c38 <trx_spi_init+0xe8>)
    3b9a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3b9c:	2300      	movs	r3, #0
    3b9e:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3ba0:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3ba2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3ba4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3ba6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3ba8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3baa:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3bac:	3223      	adds	r2, #35	; 0x23
    3bae:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3bb0:	0020      	movs	r0, r4
    3bb2:	3018      	adds	r0, #24
    3bb4:	3a18      	subs	r2, #24
    3bb6:	2100      	movs	r1, #0
    3bb8:	4b20      	ldr	r3, [pc, #128]	; (3c3c <trx_spi_init+0xec>)
    3bba:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3bbc:	2380      	movs	r3, #128	; 0x80
    3bbe:	025b      	lsls	r3, r3, #9
    3bc0:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3bc2:	4b1f      	ldr	r3, [pc, #124]	; (3c40 <trx_spi_init+0xf0>)
    3bc4:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3bc6:	4b1f      	ldr	r3, [pc, #124]	; (3c44 <trx_spi_init+0xf4>)
    3bc8:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3bca:	2301      	movs	r3, #1
    3bcc:	425b      	negs	r3, r3
    3bce:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3bd0:	4b1d      	ldr	r3, [pc, #116]	; (3c48 <trx_spi_init+0xf8>)
    3bd2:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3bd4:	4b1d      	ldr	r3, [pc, #116]	; (3c4c <trx_spi_init+0xfc>)
    3bd6:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3bd8:	4d1d      	ldr	r5, [pc, #116]	; (3c50 <trx_spi_init+0x100>)
    3bda:	0022      	movs	r2, r4
    3bdc:	491d      	ldr	r1, [pc, #116]	; (3c54 <trx_spi_init+0x104>)
    3bde:	0028      	movs	r0, r5
    3be0:	4b1d      	ldr	r3, [pc, #116]	; (3c58 <trx_spi_init+0x108>)
    3be2:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3be4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3be6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3be8:	2b00      	cmp	r3, #0
    3bea:	d1fc      	bne.n	3be6 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3bec:	6813      	ldr	r3, [r2, #0]
    3bee:	2502      	movs	r5, #2
    3bf0:	432b      	orrs	r3, r5
    3bf2:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3bf4:	ac01      	add	r4, sp, #4
    3bf6:	0020      	movs	r0, r4
    3bf8:	4b18      	ldr	r3, [pc, #96]	; (3c5c <trx_spi_init+0x10c>)
    3bfa:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    3bfc:	2320      	movs	r3, #32
    3bfe:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3c00:	2380      	movs	r3, #128	; 0x80
    3c02:	039b      	lsls	r3, r3, #14
    3c04:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    3c06:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3c08:	2301      	movs	r3, #1
    3c0a:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3c0c:	2200      	movs	r2, #0
    3c0e:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3c10:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    3c12:	0021      	movs	r1, r4
    3c14:	2000      	movs	r0, #0
    3c16:	4b12      	ldr	r3, [pc, #72]	; (3c60 <trx_spi_init+0x110>)
    3c18:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3c1a:	2200      	movs	r2, #0
    3c1c:	2100      	movs	r1, #0
    3c1e:	4811      	ldr	r0, [pc, #68]	; (3c64 <trx_spi_init+0x114>)
    3c20:	4b11      	ldr	r3, [pc, #68]	; (3c68 <trx_spi_init+0x118>)
    3c22:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3c24:	b005      	add	sp, #20
    3c26:	bd30      	pop	{r4, r5, pc}
    3c28:	200012f4 	.word	0x200012f4
    3c2c:	200012f8 	.word	0x200012f8
    3c30:	0000086d 	.word	0x0000086d
    3c34:	41004400 	.word	0x41004400
    3c38:	200012fc 	.word	0x200012fc
    3c3c:	00007a91 	.word	0x00007a91
    3c40:	003d0900 	.word	0x003d0900
    3c44:	00530005 	.word	0x00530005
    3c48:	003e0005 	.word	0x003e0005
    3c4c:	00520005 	.word	0x00520005
    3c50:	20001334 	.word	0x20001334
    3c54:	42001800 	.word	0x42001800
    3c58:	00000d1d 	.word	0x00000d1d
    3c5c:	000007e1 	.word	0x000007e1
    3c60:	000007f5 	.word	0x000007f5
    3c64:	00003b35 	.word	0x00003b35
    3c68:	0000069d 	.word	0x0000069d

00003c6c <PhyReset>:

void PhyReset(void)
{
    3c6c:	b570      	push	{r4, r5, r6, lr}
    3c6e:	4c08      	ldr	r4, [pc, #32]	; (3c90 <PhyReset+0x24>)
    3c70:	2580      	movs	r5, #128	; 0x80
    3c72:	022d      	lsls	r5, r5, #8
    3c74:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    3c76:	2280      	movs	r2, #128	; 0x80
    3c78:	0352      	lsls	r2, r2, #13
    3c7a:	4b06      	ldr	r3, [pc, #24]	; (3c94 <PhyReset+0x28>)
    3c7c:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3c7e:	20a5      	movs	r0, #165	; 0xa5
    3c80:	0040      	lsls	r0, r0, #1
    3c82:	4e05      	ldr	r6, [pc, #20]	; (3c98 <PhyReset+0x2c>)
    3c84:	47b0      	blx	r6
    3c86:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3c88:	200a      	movs	r0, #10
    3c8a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3c8c:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3c8e:	bd70      	pop	{r4, r5, r6, pc}
    3c90:	41004480 	.word	0x41004480
    3c94:	41004400 	.word	0x41004400
    3c98:	00000155 	.word	0x00000155

00003c9c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3c9c:	b570      	push	{r4, r5, r6, lr}
    3c9e:	b082      	sub	sp, #8
    3ca0:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3ca2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3ca6:	425a      	negs	r2, r3
    3ca8:	4153      	adcs	r3, r2
    3caa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3cac:	b672      	cpsid	i
    3cae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3cb2:	2200      	movs	r2, #0
    3cb4:	4b33      	ldr	r3, [pc, #204]	; (3d84 <trx_reg_read+0xe8>)
    3cb6:	701a      	strb	r2, [r3, #0]
	return flags;
    3cb8:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3cba:	4e33      	ldr	r6, [pc, #204]	; (3d88 <trx_reg_read+0xec>)
    3cbc:	3201      	adds	r2, #1
    3cbe:	4933      	ldr	r1, [pc, #204]	; (3d8c <trx_reg_read+0xf0>)
    3cc0:	0030      	movs	r0, r6
    3cc2:	4b33      	ldr	r3, [pc, #204]	; (3d90 <trx_reg_read+0xf4>)
    3cc4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3cc6:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3cc8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3cca:	7e1a      	ldrb	r2, [r3, #24]
    3ccc:	420a      	tst	r2, r1
    3cce:	d0fc      	beq.n	3cca <trx_reg_read+0x2e>
    3cd0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3cd2:	07d2      	lsls	r2, r2, #31
    3cd4:	d502      	bpl.n	3cdc <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cd6:	2280      	movs	r2, #128	; 0x80
    3cd8:	4315      	orrs	r5, r2
    3cda:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3cdc:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cde:	7e1a      	ldrb	r2, [r3, #24]
    3ce0:	420a      	tst	r2, r1
    3ce2:	d0fc      	beq.n	3cde <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3ce4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ce6:	7e1a      	ldrb	r2, [r3, #24]
    3ce8:	420a      	tst	r2, r1
    3cea:	d0fc      	beq.n	3ce6 <trx_reg_read+0x4a>
    3cec:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3cee:	0752      	lsls	r2, r2, #29
    3cf0:	d50c      	bpl.n	3d0c <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cf2:	8b5a      	ldrh	r2, [r3, #26]
    3cf4:	0752      	lsls	r2, r2, #29
    3cf6:	d501      	bpl.n	3cfc <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cf8:	2204      	movs	r2, #4
    3cfa:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cfc:	4a22      	ldr	r2, [pc, #136]	; (3d88 <trx_reg_read+0xec>)
    3cfe:	7992      	ldrb	r2, [r2, #6]
    3d00:	2a01      	cmp	r2, #1
    3d02:	d034      	beq.n	3d6e <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d06:	b2d2      	uxtb	r2, r2
    3d08:	4922      	ldr	r1, [pc, #136]	; (3d94 <trx_reg_read+0xf8>)
    3d0a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3d0c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d0e:	7e1a      	ldrb	r2, [r3, #24]
    3d10:	420a      	tst	r2, r1
    3d12:	d0fc      	beq.n	3d0e <trx_reg_read+0x72>
    3d14:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d16:	07d2      	lsls	r2, r2, #31
    3d18:	d501      	bpl.n	3d1e <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d1a:	2200      	movs	r2, #0
    3d1c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3d1e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d20:	7e1a      	ldrb	r2, [r3, #24]
    3d22:	420a      	tst	r2, r1
    3d24:	d0fc      	beq.n	3d20 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    3d26:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d28:	7e1a      	ldrb	r2, [r3, #24]
    3d2a:	420a      	tst	r2, r1
    3d2c:	d0fc      	beq.n	3d28 <trx_reg_read+0x8c>
    3d2e:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    3d30:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    3d32:	0752      	lsls	r2, r2, #29
    3d34:	d50a      	bpl.n	3d4c <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d36:	8b5a      	ldrh	r2, [r3, #26]
    3d38:	0752      	lsls	r2, r2, #29
    3d3a:	d501      	bpl.n	3d40 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d3c:	2204      	movs	r2, #4
    3d3e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d40:	4a11      	ldr	r2, [pc, #68]	; (3d88 <trx_reg_read+0xec>)
    3d42:	7992      	ldrb	r2, [r2, #6]
    3d44:	2a01      	cmp	r2, #1
    3d46:	d018      	beq.n	3d7a <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d48:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3d4a:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3d4c:	2200      	movs	r2, #0
    3d4e:	490f      	ldr	r1, [pc, #60]	; (3d8c <trx_reg_read+0xf0>)
    3d50:	480d      	ldr	r0, [pc, #52]	; (3d88 <trx_reg_read+0xec>)
    3d52:	4b0f      	ldr	r3, [pc, #60]	; (3d90 <trx_reg_read+0xf4>)
    3d54:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3d56:	23ff      	movs	r3, #255	; 0xff
    3d58:	4223      	tst	r3, r4
    3d5a:	d005      	beq.n	3d68 <trx_reg_read+0xcc>
		cpu_irq_enable();
    3d5c:	2201      	movs	r2, #1
    3d5e:	4b09      	ldr	r3, [pc, #36]	; (3d84 <trx_reg_read+0xe8>)
    3d60:	701a      	strb	r2, [r3, #0]
    3d62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3d66:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3d68:	b2e8      	uxtb	r0, r5
}
    3d6a:	b002      	add	sp, #8
    3d6c:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d70:	05d2      	lsls	r2, r2, #23
    3d72:	0dd2      	lsrs	r2, r2, #23
    3d74:	4907      	ldr	r1, [pc, #28]	; (3d94 <trx_reg_read+0xf8>)
    3d76:	800a      	strh	r2, [r1, #0]
    3d78:	e7c8      	b.n	3d0c <trx_reg_read+0x70>
    3d7a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3d7c:	05ed      	lsls	r5, r5, #23
    3d7e:	0ded      	lsrs	r5, r5, #23
    3d80:	e7e4      	b.n	3d4c <trx_reg_read+0xb0>
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	20000008 	.word	0x20000008
    3d88:	20001334 	.word	0x20001334
    3d8c:	200012f8 	.word	0x200012f8
    3d90:	00000fe1 	.word	0x00000fe1
    3d94:	200012f0 	.word	0x200012f0

00003d98 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d9a:	b083      	sub	sp, #12
    3d9c:	0006      	movs	r6, r0
    3d9e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3da0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3da4:	425a      	negs	r2, r3
    3da6:	4153      	adcs	r3, r2
    3da8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3daa:	b672      	cpsid	i
    3dac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3db0:	2200      	movs	r2, #0
    3db2:	4b34      	ldr	r3, [pc, #208]	; (3e84 <trx_reg_write+0xec>)
    3db4:	701a      	strb	r2, [r3, #0]
	return flags;
    3db6:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3db8:	4f33      	ldr	r7, [pc, #204]	; (3e88 <trx_reg_write+0xf0>)
    3dba:	3201      	adds	r2, #1
    3dbc:	4933      	ldr	r1, [pc, #204]	; (3e8c <trx_reg_write+0xf4>)
    3dbe:	0038      	movs	r0, r7
    3dc0:	4b33      	ldr	r3, [pc, #204]	; (3e90 <trx_reg_write+0xf8>)
    3dc2:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3dc4:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3dc6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3dc8:	7e1a      	ldrb	r2, [r3, #24]
    3dca:	420a      	tst	r2, r1
    3dcc:	d0fc      	beq.n	3dc8 <trx_reg_write+0x30>
    3dce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3dd0:	07d2      	lsls	r2, r2, #31
    3dd2:	d502      	bpl.n	3dda <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3dd4:	22c0      	movs	r2, #192	; 0xc0
    3dd6:	4316      	orrs	r6, r2
    3dd8:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3dda:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ddc:	7e1a      	ldrb	r2, [r3, #24]
    3dde:	420a      	tst	r2, r1
    3de0:	d0fc      	beq.n	3ddc <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3de2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3de4:	7e1a      	ldrb	r2, [r3, #24]
    3de6:	420a      	tst	r2, r1
    3de8:	d0fc      	beq.n	3de4 <trx_reg_write+0x4c>
    3dea:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3dec:	0752      	lsls	r2, r2, #29
    3dee:	d50c      	bpl.n	3e0a <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3df0:	8b5a      	ldrh	r2, [r3, #26]
    3df2:	0752      	lsls	r2, r2, #29
    3df4:	d501      	bpl.n	3dfa <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3df6:	2204      	movs	r2, #4
    3df8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3dfa:	4a23      	ldr	r2, [pc, #140]	; (3e88 <trx_reg_write+0xf0>)
    3dfc:	7992      	ldrb	r2, [r2, #6]
    3dfe:	2a01      	cmp	r2, #1
    3e00:	d033      	beq.n	3e6a <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e04:	b2d2      	uxtb	r2, r2
    3e06:	4923      	ldr	r1, [pc, #140]	; (3e94 <trx_reg_write+0xfc>)
    3e08:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3e0a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e0c:	7e1a      	ldrb	r2, [r3, #24]
    3e0e:	420a      	tst	r2, r1
    3e10:	d0fc      	beq.n	3e0c <trx_reg_write+0x74>
    3e12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3e14:	07d2      	lsls	r2, r2, #31
    3e16:	d500      	bpl.n	3e1a <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e18:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3e1a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e1c:	7e1a      	ldrb	r2, [r3, #24]
    3e1e:	420a      	tst	r2, r1
    3e20:	d0fc      	beq.n	3e1c <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3e22:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e24:	7e1a      	ldrb	r2, [r3, #24]
    3e26:	420a      	tst	r2, r1
    3e28:	d0fc      	beq.n	3e24 <trx_reg_write+0x8c>
    3e2a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3e2c:	0752      	lsls	r2, r2, #29
    3e2e:	d50c      	bpl.n	3e4a <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e30:	8b5a      	ldrh	r2, [r3, #26]
    3e32:	0752      	lsls	r2, r2, #29
    3e34:	d501      	bpl.n	3e3a <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e36:	2204      	movs	r2, #4
    3e38:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e3a:	4a13      	ldr	r2, [pc, #76]	; (3e88 <trx_reg_write+0xf0>)
    3e3c:	7992      	ldrb	r2, [r2, #6]
    3e3e:	2a01      	cmp	r2, #1
    3e40:	d019      	beq.n	3e76 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e44:	b2db      	uxtb	r3, r3
    3e46:	4a13      	ldr	r2, [pc, #76]	; (3e94 <trx_reg_write+0xfc>)
    3e48:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3e4a:	2200      	movs	r2, #0
    3e4c:	490f      	ldr	r1, [pc, #60]	; (3e8c <trx_reg_write+0xf4>)
    3e4e:	480e      	ldr	r0, [pc, #56]	; (3e88 <trx_reg_write+0xf0>)
    3e50:	4b0f      	ldr	r3, [pc, #60]	; (3e90 <trx_reg_write+0xf8>)
    3e52:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3e54:	23ff      	movs	r3, #255	; 0xff
    3e56:	422b      	tst	r3, r5
    3e58:	d005      	beq.n	3e66 <trx_reg_write+0xce>
		cpu_irq_enable();
    3e5a:	2201      	movs	r2, #1
    3e5c:	4b09      	ldr	r3, [pc, #36]	; (3e84 <trx_reg_write+0xec>)
    3e5e:	701a      	strb	r2, [r3, #0]
    3e60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3e64:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3e66:	b003      	add	sp, #12
    3e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e6c:	05d2      	lsls	r2, r2, #23
    3e6e:	0dd2      	lsrs	r2, r2, #23
    3e70:	4908      	ldr	r1, [pc, #32]	; (3e94 <trx_reg_write+0xfc>)
    3e72:	800a      	strh	r2, [r1, #0]
    3e74:	e7c9      	b.n	3e0a <trx_reg_write+0x72>
    3e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e78:	05db      	lsls	r3, r3, #23
    3e7a:	0ddb      	lsrs	r3, r3, #23
    3e7c:	4a05      	ldr	r2, [pc, #20]	; (3e94 <trx_reg_write+0xfc>)
    3e7e:	8013      	strh	r3, [r2, #0]
    3e80:	e7e3      	b.n	3e4a <trx_reg_write+0xb2>
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	20000008 	.word	0x20000008
    3e88:	20001334 	.word	0x20001334
    3e8c:	200012f8 	.word	0x200012f8
    3e90:	00000fe1 	.word	0x00000fe1
    3e94:	200012f0 	.word	0x200012f0

00003e98 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e9a:	46d6      	mov	lr, sl
    3e9c:	464f      	mov	r7, r9
    3e9e:	4646      	mov	r6, r8
    3ea0:	b5c0      	push	{r6, r7, lr}
    3ea2:	b082      	sub	sp, #8
    3ea4:	0005      	movs	r5, r0
    3ea6:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3ea8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3eac:	425a      	negs	r2, r3
    3eae:	4153      	adcs	r3, r2
    3eb0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3eb2:	b672      	cpsid	i
    3eb4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3eb8:	2200      	movs	r2, #0
    3eba:	4b3e      	ldr	r3, [pc, #248]	; (3fb4 <trx_frame_read+0x11c>)
    3ebc:	701a      	strb	r2, [r3, #0]
	return flags;
    3ebe:	9b01      	ldr	r3, [sp, #4]
    3ec0:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3ec2:	4f3d      	ldr	r7, [pc, #244]	; (3fb8 <trx_frame_read+0x120>)
    3ec4:	3201      	adds	r2, #1
    3ec6:	493d      	ldr	r1, [pc, #244]	; (3fbc <trx_frame_read+0x124>)
    3ec8:	0038      	movs	r0, r7
    3eca:	4b3d      	ldr	r3, [pc, #244]	; (3fc0 <trx_frame_read+0x128>)
    3ecc:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ece:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3ed0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ed2:	7e1a      	ldrb	r2, [r3, #24]
    3ed4:	420a      	tst	r2, r1
    3ed6:	d0fc      	beq.n	3ed2 <trx_frame_read+0x3a>
    3ed8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3eda:	07d2      	lsls	r2, r2, #31
    3edc:	d501      	bpl.n	3ee2 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ede:	2220      	movs	r2, #32
    3ee0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3ee2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ee4:	7e1a      	ldrb	r2, [r3, #24]
    3ee6:	420a      	tst	r2, r1
    3ee8:	d0fc      	beq.n	3ee4 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3eea:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3eec:	7e1a      	ldrb	r2, [r3, #24]
    3eee:	420a      	tst	r2, r1
    3ef0:	d0fc      	beq.n	3eec <trx_frame_read+0x54>
    3ef2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3ef4:	0752      	lsls	r2, r2, #29
    3ef6:	d50c      	bpl.n	3f12 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ef8:	8b5a      	ldrh	r2, [r3, #26]
    3efa:	0752      	lsls	r2, r2, #29
    3efc:	d501      	bpl.n	3f02 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3efe:	2204      	movs	r2, #4
    3f00:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f02:	4a2d      	ldr	r2, [pc, #180]	; (3fb8 <trx_frame_read+0x120>)
    3f04:	7992      	ldrb	r2, [r2, #6]
    3f06:	2a01      	cmp	r2, #1
    3f08:	d013      	beq.n	3f32 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f0c:	b2db      	uxtb	r3, r3
    3f0e:	4a2d      	ldr	r2, [pc, #180]	; (3fc4 <trx_frame_read+0x12c>)
    3f10:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3f12:	1e63      	subs	r3, r4, #1
    3f14:	b2db      	uxtb	r3, r3
    3f16:	2c00      	cmp	r4, #0
    3f18:	d036      	beq.n	3f88 <trx_frame_read+0xf0>
    3f1a:	3301      	adds	r3, #1
    3f1c:	469c      	mov	ip, r3
    3f1e:	44ac      	add	ip, r5
    3f20:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f22:	4e25      	ldr	r6, [pc, #148]	; (3fb8 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    3f24:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3f26:	2300      	movs	r3, #0
    3f28:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3f2a:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3f2c:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f2e:	46b1      	mov	r9, r6
    3f30:	e00f      	b.n	3f52 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f34:	05db      	lsls	r3, r3, #23
    3f36:	0ddb      	lsrs	r3, r3, #23
    3f38:	4a22      	ldr	r2, [pc, #136]	; (3fc4 <trx_frame_read+0x12c>)
    3f3a:	8013      	strh	r3, [r2, #0]
    3f3c:	e7e9      	b.n	3f12 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f3e:	464a      	mov	r2, r9
    3f40:	7992      	ldrb	r2, [r2, #6]
    3f42:	2a01      	cmp	r2, #1
    3f44:	d01c      	beq.n	3f80 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3f46:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3f48:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    3f4a:	702f      	strb	r7, [r5, #0]
		data++;
    3f4c:	3501      	adds	r5, #1
	while (length--) {
    3f4e:	4565      	cmp	r5, ip
    3f50:	d01a      	beq.n	3f88 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f52:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f54:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3f56:	4202      	tst	r2, r0
    3f58:	d0fc      	beq.n	3f54 <trx_frame_read+0xbc>
    3f5a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3f5c:	4202      	tst	r2, r0
    3f5e:	d001      	beq.n	3f64 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3f60:	4652      	mov	r2, sl
    3f62:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3f64:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3f66:	4222      	tst	r2, r4
    3f68:	d0fc      	beq.n	3f64 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3f6a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    3f6c:	420a      	tst	r2, r1
    3f6e:	d0fc      	beq.n	3f6a <trx_frame_read+0xd2>
    3f70:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3f72:	420a      	tst	r2, r1
    3f74:	d0e9      	beq.n	3f4a <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3f76:	8b5a      	ldrh	r2, [r3, #26]
    3f78:	420a      	tst	r2, r1
    3f7a:	d0e0      	beq.n	3f3e <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3f7c:	8359      	strh	r1, [r3, #26]
    3f7e:	e7de      	b.n	3f3e <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f80:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    3f82:	05ff      	lsls	r7, r7, #23
    3f84:	0dff      	lsrs	r7, r7, #23
    3f86:	e7e0      	b.n	3f4a <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3f88:	2200      	movs	r2, #0
    3f8a:	490c      	ldr	r1, [pc, #48]	; (3fbc <trx_frame_read+0x124>)
    3f8c:	480a      	ldr	r0, [pc, #40]	; (3fb8 <trx_frame_read+0x120>)
    3f8e:	4b0c      	ldr	r3, [pc, #48]	; (3fc0 <trx_frame_read+0x128>)
    3f90:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3f92:	23ff      	movs	r3, #255	; 0xff
    3f94:	4642      	mov	r2, r8
    3f96:	4213      	tst	r3, r2
    3f98:	d005      	beq.n	3fa6 <trx_frame_read+0x10e>
		cpu_irq_enable();
    3f9a:	2201      	movs	r2, #1
    3f9c:	4b05      	ldr	r3, [pc, #20]	; (3fb4 <trx_frame_read+0x11c>)
    3f9e:	701a      	strb	r2, [r3, #0]
    3fa0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3fa4:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3fa6:	b002      	add	sp, #8
    3fa8:	bc1c      	pop	{r2, r3, r4}
    3faa:	4690      	mov	r8, r2
    3fac:	4699      	mov	r9, r3
    3fae:	46a2      	mov	sl, r4
    3fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	20000008 	.word	0x20000008
    3fb8:	20001334 	.word	0x20001334
    3fbc:	200012f8 	.word	0x200012f8
    3fc0:	00000fe1 	.word	0x00000fe1
    3fc4:	200012f0 	.word	0x200012f0

00003fc8 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fca:	46c6      	mov	lr, r8
    3fcc:	b500      	push	{lr}
    3fce:	b082      	sub	sp, #8
    3fd0:	0004      	movs	r4, r0
    3fd2:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3fd4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3fd8:	425a      	negs	r2, r3
    3fda:	4153      	adcs	r3, r2
    3fdc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3fde:	b672      	cpsid	i
    3fe0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3fe4:	2200      	movs	r2, #0
    3fe6:	4b3a      	ldr	r3, [pc, #232]	; (40d0 <trx_frame_write+0x108>)
    3fe8:	701a      	strb	r2, [r3, #0]
	return flags;
    3fea:	9b01      	ldr	r3, [sp, #4]
    3fec:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3fee:	4f39      	ldr	r7, [pc, #228]	; (40d4 <trx_frame_write+0x10c>)
    3ff0:	3201      	adds	r2, #1
    3ff2:	4939      	ldr	r1, [pc, #228]	; (40d8 <trx_frame_write+0x110>)
    3ff4:	0038      	movs	r0, r7
    3ff6:	4b39      	ldr	r3, [pc, #228]	; (40dc <trx_frame_write+0x114>)
    3ff8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ffa:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3ffc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ffe:	7e1a      	ldrb	r2, [r3, #24]
    4000:	420a      	tst	r2, r1
    4002:	d0fc      	beq.n	3ffe <trx_frame_write+0x36>
    4004:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4006:	07d2      	lsls	r2, r2, #31
    4008:	d501      	bpl.n	400e <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    400a:	2260      	movs	r2, #96	; 0x60
    400c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    400e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4010:	7e1a      	ldrb	r2, [r3, #24]
    4012:	420a      	tst	r2, r1
    4014:	d0fc      	beq.n	4010 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4016:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4018:	7e1a      	ldrb	r2, [r3, #24]
    401a:	420a      	tst	r2, r1
    401c:	d0fc      	beq.n	4018 <trx_frame_write+0x50>
    401e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4020:	0752      	lsls	r2, r2, #29
    4022:	d50c      	bpl.n	403e <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4024:	8b5a      	ldrh	r2, [r3, #26]
    4026:	0752      	lsls	r2, r2, #29
    4028:	d501      	bpl.n	402e <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    402a:	2204      	movs	r2, #4
    402c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    402e:	4a29      	ldr	r2, [pc, #164]	; (40d4 <trx_frame_write+0x10c>)
    4030:	7992      	ldrb	r2, [r2, #6]
    4032:	2a01      	cmp	r2, #1
    4034:	d00b      	beq.n	404e <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4038:	b2d2      	uxtb	r2, r2
    403a:	4929      	ldr	r1, [pc, #164]	; (40e0 <trx_frame_write+0x118>)
    403c:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    403e:	4a25      	ldr	r2, [pc, #148]	; (40d4 <trx_frame_write+0x10c>)
    4040:	7992      	ldrb	r2, [r2, #6]
    4042:	4694      	mov	ip, r2
    4044:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4046:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4048:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    404a:	2404      	movs	r4, #4
    404c:	e00d      	b.n	406a <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    404e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4050:	05d2      	lsls	r2, r2, #23
    4052:	0dd2      	lsrs	r2, r2, #23
    4054:	4922      	ldr	r1, [pc, #136]	; (40e0 <trx_frame_write+0x118>)
    4056:	800a      	strh	r2, [r1, #0]
    4058:	e7f1      	b.n	403e <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    405a:	4662      	mov	r2, ip
    405c:	2a01      	cmp	r2, #1
    405e:	d01e      	beq.n	409e <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4062:	b2d2      	uxtb	r2, r2
    4064:	4e1e      	ldr	r6, [pc, #120]	; (40e0 <trx_frame_write+0x118>)
    4066:	8032      	strh	r2, [r6, #0]
    4068:	3101      	adds	r1, #1
	while (length--) {
    406a:	3d01      	subs	r5, #1
    406c:	b2ed      	uxtb	r5, r5
    406e:	2dff      	cmp	r5, #255	; 0xff
    4070:	d01b      	beq.n	40aa <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4072:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4074:	423a      	tst	r2, r7
    4076:	d0fc      	beq.n	4072 <trx_frame_write+0xaa>
    4078:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    407a:	423a      	tst	r2, r7
    407c:	d001      	beq.n	4082 <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    407e:	780a      	ldrb	r2, [r1, #0]
    4080:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4082:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4084:	4202      	tst	r2, r0
    4086:	d0fc      	beq.n	4082 <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4088:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    408a:	4222      	tst	r2, r4
    408c:	d0fc      	beq.n	4088 <trx_frame_write+0xc0>
    408e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4090:	4222      	tst	r2, r4
    4092:	d0e9      	beq.n	4068 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4094:	8b5a      	ldrh	r2, [r3, #26]
    4096:	4222      	tst	r2, r4
    4098:	d0df      	beq.n	405a <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    409a:	835c      	strh	r4, [r3, #26]
    409c:	e7dd      	b.n	405a <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    409e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40a0:	05d2      	lsls	r2, r2, #23
    40a2:	0dd2      	lsrs	r2, r2, #23
    40a4:	4e0e      	ldr	r6, [pc, #56]	; (40e0 <trx_frame_write+0x118>)
    40a6:	8032      	strh	r2, [r6, #0]
    40a8:	e7de      	b.n	4068 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    40aa:	2200      	movs	r2, #0
    40ac:	490a      	ldr	r1, [pc, #40]	; (40d8 <trx_frame_write+0x110>)
    40ae:	4809      	ldr	r0, [pc, #36]	; (40d4 <trx_frame_write+0x10c>)
    40b0:	4b0a      	ldr	r3, [pc, #40]	; (40dc <trx_frame_write+0x114>)
    40b2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    40b4:	23ff      	movs	r3, #255	; 0xff
    40b6:	4642      	mov	r2, r8
    40b8:	4213      	tst	r3, r2
    40ba:	d005      	beq.n	40c8 <trx_frame_write+0x100>
		cpu_irq_enable();
    40bc:	2201      	movs	r2, #1
    40be:	4b04      	ldr	r3, [pc, #16]	; (40d0 <trx_frame_write+0x108>)
    40c0:	701a      	strb	r2, [r3, #0]
    40c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    40c6:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    40c8:	b002      	add	sp, #8
    40ca:	bc04      	pop	{r2}
    40cc:	4690      	mov	r8, r2
    40ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40d0:	20000008 	.word	0x20000008
    40d4:	20001334 	.word	0x20001334
    40d8:	200012f8 	.word	0x200012f8
    40dc:	00000fe1 	.word	0x00000fe1
    40e0:	200012f0 	.word	0x200012f0

000040e4 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    40e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    40e6:	46c6      	mov	lr, r8
    40e8:	b500      	push	{lr}
    40ea:	b082      	sub	sp, #8
    40ec:	0006      	movs	r6, r0
    40ee:	000d      	movs	r5, r1
    40f0:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40f2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    40f6:	425a      	negs	r2, r3
    40f8:	4153      	adcs	r3, r2
    40fa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    40fc:	b672      	cpsid	i
    40fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4102:	2200      	movs	r2, #0
    4104:	4b4d      	ldr	r3, [pc, #308]	; (423c <trx_sram_write+0x158>)
    4106:	701a      	strb	r2, [r3, #0]
	return flags;
    4108:	9b01      	ldr	r3, [sp, #4]
    410a:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    410c:	4f4c      	ldr	r7, [pc, #304]	; (4240 <trx_sram_write+0x15c>)
    410e:	3201      	adds	r2, #1
    4110:	494c      	ldr	r1, [pc, #304]	; (4244 <trx_sram_write+0x160>)
    4112:	0038      	movs	r0, r7
    4114:	4b4c      	ldr	r3, [pc, #304]	; (4248 <trx_sram_write+0x164>)
    4116:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4118:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    411a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    411c:	7e1a      	ldrb	r2, [r3, #24]
    411e:	420a      	tst	r2, r1
    4120:	d0fc      	beq.n	411c <trx_sram_write+0x38>
    4122:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4124:	07d2      	lsls	r2, r2, #31
    4126:	d501      	bpl.n	412c <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4128:	2240      	movs	r2, #64	; 0x40
    412a:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    412c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    412e:	7e1a      	ldrb	r2, [r3, #24]
    4130:	420a      	tst	r2, r1
    4132:	d0fc      	beq.n	412e <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4134:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4136:	7e1a      	ldrb	r2, [r3, #24]
    4138:	420a      	tst	r2, r1
    413a:	d0fc      	beq.n	4136 <trx_sram_write+0x52>
    413c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    413e:	0752      	lsls	r2, r2, #29
    4140:	d50c      	bpl.n	415c <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4142:	8b5a      	ldrh	r2, [r3, #26]
    4144:	0752      	lsls	r2, r2, #29
    4146:	d501      	bpl.n	414c <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4148:	2204      	movs	r2, #4
    414a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    414c:	4a3c      	ldr	r2, [pc, #240]	; (4240 <trx_sram_write+0x15c>)
    414e:	7992      	ldrb	r2, [r2, #6]
    4150:	2a01      	cmp	r2, #1
    4152:	d02b      	beq.n	41ac <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4156:	b2d2      	uxtb	r2, r2
    4158:	493c      	ldr	r1, [pc, #240]	; (424c <trx_sram_write+0x168>)
    415a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    415c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    415e:	7e1a      	ldrb	r2, [r3, #24]
    4160:	420a      	tst	r2, r1
    4162:	d0fc      	beq.n	415e <trx_sram_write+0x7a>
    4164:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4166:	07d2      	lsls	r2, r2, #31
    4168:	d500      	bpl.n	416c <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    416a:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    416c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    416e:	7e1a      	ldrb	r2, [r3, #24]
    4170:	420a      	tst	r2, r1
    4172:	d0fc      	beq.n	416e <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4174:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4176:	7e1a      	ldrb	r2, [r3, #24]
    4178:	420a      	tst	r2, r1
    417a:	d0fc      	beq.n	4176 <trx_sram_write+0x92>
    417c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    417e:	0752      	lsls	r2, r2, #29
    4180:	d50c      	bpl.n	419c <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4182:	8b5a      	ldrh	r2, [r3, #26]
    4184:	0752      	lsls	r2, r2, #29
    4186:	d501      	bpl.n	418c <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4188:	2204      	movs	r2, #4
    418a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    418c:	4a2c      	ldr	r2, [pc, #176]	; (4240 <trx_sram_write+0x15c>)
    418e:	7992      	ldrb	r2, [r2, #6]
    4190:	2a01      	cmp	r2, #1
    4192:	d011      	beq.n	41b8 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4196:	b2d2      	uxtb	r2, r2
    4198:	492c      	ldr	r1, [pc, #176]	; (424c <trx_sram_write+0x168>)
    419a:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    419c:	4a28      	ldr	r2, [pc, #160]	; (4240 <trx_sram_write+0x15c>)
    419e:	7992      	ldrb	r2, [r2, #6]
    41a0:	4694      	mov	ip, r2
    41a2:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    41a4:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    41a6:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    41a8:	2104      	movs	r1, #4
    41aa:	e013      	b.n	41d4 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    41ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41ae:	05d2      	lsls	r2, r2, #23
    41b0:	0dd2      	lsrs	r2, r2, #23
    41b2:	4926      	ldr	r1, [pc, #152]	; (424c <trx_sram_write+0x168>)
    41b4:	800a      	strh	r2, [r1, #0]
    41b6:	e7d1      	b.n	415c <trx_sram_write+0x78>
    41b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41ba:	05d2      	lsls	r2, r2, #23
    41bc:	0dd2      	lsrs	r2, r2, #23
    41be:	4923      	ldr	r1, [pc, #140]	; (424c <trx_sram_write+0x168>)
    41c0:	800a      	strh	r2, [r1, #0]
    41c2:	e7eb      	b.n	419c <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    41c4:	4662      	mov	r2, ip
    41c6:	2a01      	cmp	r2, #1
    41c8:	d01e      	beq.n	4208 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    41ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41cc:	b2d2      	uxtb	r2, r2
    41ce:	4f1f      	ldr	r7, [pc, #124]	; (424c <trx_sram_write+0x168>)
    41d0:	803a      	strh	r2, [r7, #0]
    41d2:	3001      	adds	r0, #1
	while (length--) {
    41d4:	3c01      	subs	r4, #1
    41d6:	b2e4      	uxtb	r4, r4
    41d8:	2cff      	cmp	r4, #255	; 0xff
    41da:	d01b      	beq.n	4214 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    41dc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    41de:	4232      	tst	r2, r6
    41e0:	d0fc      	beq.n	41dc <trx_sram_write+0xf8>
    41e2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    41e4:	4232      	tst	r2, r6
    41e6:	d001      	beq.n	41ec <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    41e8:	7802      	ldrb	r2, [r0, #0]
    41ea:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    41ec:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    41ee:	422a      	tst	r2, r5
    41f0:	d0fc      	beq.n	41ec <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41f2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    41f4:	420a      	tst	r2, r1
    41f6:	d0fc      	beq.n	41f2 <trx_sram_write+0x10e>
    41f8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    41fa:	420a      	tst	r2, r1
    41fc:	d0e9      	beq.n	41d2 <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    41fe:	8b5a      	ldrh	r2, [r3, #26]
    4200:	420a      	tst	r2, r1
    4202:	d0df      	beq.n	41c4 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4204:	8359      	strh	r1, [r3, #26]
    4206:	e7dd      	b.n	41c4 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    420a:	05d2      	lsls	r2, r2, #23
    420c:	0dd2      	lsrs	r2, r2, #23
    420e:	4f0f      	ldr	r7, [pc, #60]	; (424c <trx_sram_write+0x168>)
    4210:	803a      	strh	r2, [r7, #0]
    4212:	e7de      	b.n	41d2 <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4214:	2200      	movs	r2, #0
    4216:	490b      	ldr	r1, [pc, #44]	; (4244 <trx_sram_write+0x160>)
    4218:	4809      	ldr	r0, [pc, #36]	; (4240 <trx_sram_write+0x15c>)
    421a:	4b0b      	ldr	r3, [pc, #44]	; (4248 <trx_sram_write+0x164>)
    421c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    421e:	23ff      	movs	r3, #255	; 0xff
    4220:	4642      	mov	r2, r8
    4222:	4213      	tst	r3, r2
    4224:	d005      	beq.n	4232 <trx_sram_write+0x14e>
		cpu_irq_enable();
    4226:	2201      	movs	r2, #1
    4228:	4b04      	ldr	r3, [pc, #16]	; (423c <trx_sram_write+0x158>)
    422a:	701a      	strb	r2, [r3, #0]
    422c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4230:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4232:	b002      	add	sp, #8
    4234:	bc04      	pop	{r2}
    4236:	4690      	mov	r8, r2
    4238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	20000008 	.word	0x20000008
    4240:	20001334 	.word	0x20001334
    4244:	200012f8 	.word	0x200012f8
    4248:	00000fe1 	.word	0x00000fe1
    424c:	200012f0 	.word	0x200012f0

00004250 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    4250:	b5f0      	push	{r4, r5, r6, r7, lr}
    4252:	46d6      	mov	lr, sl
    4254:	464f      	mov	r7, r9
    4256:	4646      	mov	r6, r8
    4258:	b5c0      	push	{r6, r7, lr}
    425a:	b082      	sub	sp, #8
    425c:	0004      	movs	r4, r0
    425e:	000d      	movs	r5, r1
    4260:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    4262:	2001      	movs	r0, #1
    4264:	4b56      	ldr	r3, [pc, #344]	; (43c0 <trx_sram_read+0x170>)
    4266:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4268:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    426c:	425a      	negs	r2, r3
    426e:	4153      	adcs	r3, r2
    4270:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4272:	b672      	cpsid	i
    4274:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4278:	2200      	movs	r2, #0
    427a:	4b52      	ldr	r3, [pc, #328]	; (43c4 <trx_sram_read+0x174>)
    427c:	701a      	strb	r2, [r3, #0]
	return flags;
    427e:	9b01      	ldr	r3, [sp, #4]
    4280:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4282:	4e51      	ldr	r6, [pc, #324]	; (43c8 <trx_sram_read+0x178>)
    4284:	3201      	adds	r2, #1
    4286:	4951      	ldr	r1, [pc, #324]	; (43cc <trx_sram_read+0x17c>)
    4288:	0030      	movs	r0, r6
    428a:	4b51      	ldr	r3, [pc, #324]	; (43d0 <trx_sram_read+0x180>)
    428c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    428e:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4290:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4292:	7e1a      	ldrb	r2, [r3, #24]
    4294:	420a      	tst	r2, r1
    4296:	d0fc      	beq.n	4292 <trx_sram_read+0x42>
    4298:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    429a:	07d2      	lsls	r2, r2, #31
    429c:	d501      	bpl.n	42a2 <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    429e:	2200      	movs	r2, #0
    42a0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    42a2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42a4:	7e1a      	ldrb	r2, [r3, #24]
    42a6:	420a      	tst	r2, r1
    42a8:	d0fc      	beq.n	42a4 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    42aa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42ac:	7e1a      	ldrb	r2, [r3, #24]
    42ae:	420a      	tst	r2, r1
    42b0:	d0fc      	beq.n	42ac <trx_sram_read+0x5c>
    42b2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    42b4:	0752      	lsls	r2, r2, #29
    42b6:	d50c      	bpl.n	42d2 <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    42b8:	8b5a      	ldrh	r2, [r3, #26]
    42ba:	0752      	lsls	r2, r2, #29
    42bc:	d501      	bpl.n	42c2 <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    42be:	2204      	movs	r2, #4
    42c0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42c2:	4a41      	ldr	r2, [pc, #260]	; (43c8 <trx_sram_read+0x178>)
    42c4:	7992      	ldrb	r2, [r2, #6]
    42c6:	2a01      	cmp	r2, #1
    42c8:	d033      	beq.n	4332 <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42cc:	b2d2      	uxtb	r2, r2
    42ce:	4941      	ldr	r1, [pc, #260]	; (43d4 <trx_sram_read+0x184>)
    42d0:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    42d2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42d4:	7e1a      	ldrb	r2, [r3, #24]
    42d6:	420a      	tst	r2, r1
    42d8:	d0fc      	beq.n	42d4 <trx_sram_read+0x84>
    42da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    42dc:	07d2      	lsls	r2, r2, #31
    42de:	d500      	bpl.n	42e2 <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42e0:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    42e2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42e4:	7e1a      	ldrb	r2, [r3, #24]
    42e6:	420a      	tst	r2, r1
    42e8:	d0fc      	beq.n	42e4 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    42ea:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42ec:	7e1a      	ldrb	r2, [r3, #24]
    42ee:	420a      	tst	r2, r1
    42f0:	d0fc      	beq.n	42ec <trx_sram_read+0x9c>
    42f2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    42f4:	0752      	lsls	r2, r2, #29
    42f6:	d50c      	bpl.n	4312 <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    42f8:	8b5a      	ldrh	r2, [r3, #26]
    42fa:	0752      	lsls	r2, r2, #29
    42fc:	d501      	bpl.n	4302 <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    42fe:	2204      	movs	r2, #4
    4300:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4302:	4a31      	ldr	r2, [pc, #196]	; (43c8 <trx_sram_read+0x178>)
    4304:	7992      	ldrb	r2, [r2, #6]
    4306:	2a01      	cmp	r2, #1
    4308:	d019      	beq.n	433e <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    430c:	b2db      	uxtb	r3, r3
    430e:	4a31      	ldr	r2, [pc, #196]	; (43d4 <trx_sram_read+0x184>)
    4310:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4312:	1e7b      	subs	r3, r7, #1
    4314:	b2db      	uxtb	r3, r3
    4316:	2f00      	cmp	r7, #0
    4318:	d03c      	beq.n	4394 <trx_sram_read+0x144>
    431a:	3301      	adds	r3, #1
    431c:	469c      	mov	ip, r3
    431e:	44ac      	add	ip, r5
    4320:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    4322:	4e29      	ldr	r6, [pc, #164]	; (43c8 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    4324:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4326:	2300      	movs	r3, #0
    4328:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    432a:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    432c:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    432e:	46b1      	mov	r9, r6
    4330:	e015      	b.n	435e <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4334:	05d2      	lsls	r2, r2, #23
    4336:	0dd2      	lsrs	r2, r2, #23
    4338:	4926      	ldr	r1, [pc, #152]	; (43d4 <trx_sram_read+0x184>)
    433a:	800a      	strh	r2, [r1, #0]
    433c:	e7c9      	b.n	42d2 <trx_sram_read+0x82>
    433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4340:	05db      	lsls	r3, r3, #23
    4342:	0ddb      	lsrs	r3, r3, #23
    4344:	4a23      	ldr	r2, [pc, #140]	; (43d4 <trx_sram_read+0x184>)
    4346:	8013      	strh	r3, [r2, #0]
    4348:	e7e3      	b.n	4312 <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    434a:	464a      	mov	r2, r9
    434c:	7992      	ldrb	r2, [r2, #6]
    434e:	2a01      	cmp	r2, #1
    4350:	d01c      	beq.n	438c <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4352:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4354:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4356:	702f      	strb	r7, [r5, #0]
		data++;
    4358:	3501      	adds	r5, #1
	while (length--) {
    435a:	4565      	cmp	r5, ip
    435c:	d01a      	beq.n	4394 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    435e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4360:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4362:	4202      	tst	r2, r0
    4364:	d0fc      	beq.n	4360 <trx_sram_read+0x110>
    4366:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4368:	4202      	tst	r2, r0
    436a:	d001      	beq.n	4370 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    436c:	4652      	mov	r2, sl
    436e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4370:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4372:	4222      	tst	r2, r4
    4374:	d0fc      	beq.n	4370 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4376:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    4378:	420a      	tst	r2, r1
    437a:	d0fc      	beq.n	4376 <trx_sram_read+0x126>
    437c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    437e:	420a      	tst	r2, r1
    4380:	d0e9      	beq.n	4356 <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4382:	8b5a      	ldrh	r2, [r3, #26]
    4384:	420a      	tst	r2, r1
    4386:	d0e0      	beq.n	434a <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4388:	8359      	strh	r1, [r3, #26]
    438a:	e7de      	b.n	434a <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    438c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    438e:	05ff      	lsls	r7, r7, #23
    4390:	0dff      	lsrs	r7, r7, #23
    4392:	e7e0      	b.n	4356 <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4394:	2200      	movs	r2, #0
    4396:	490d      	ldr	r1, [pc, #52]	; (43cc <trx_sram_read+0x17c>)
    4398:	480b      	ldr	r0, [pc, #44]	; (43c8 <trx_sram_read+0x178>)
    439a:	4b0d      	ldr	r3, [pc, #52]	; (43d0 <trx_sram_read+0x180>)
    439c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    439e:	23ff      	movs	r3, #255	; 0xff
    43a0:	4642      	mov	r2, r8
    43a2:	4213      	tst	r3, r2
    43a4:	d005      	beq.n	43b2 <trx_sram_read+0x162>
		cpu_irq_enable();
    43a6:	2201      	movs	r2, #1
    43a8:	4b06      	ldr	r3, [pc, #24]	; (43c4 <trx_sram_read+0x174>)
    43aa:	701a      	strb	r2, [r3, #0]
    43ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    43b0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    43b2:	b002      	add	sp, #8
    43b4:	bc1c      	pop	{r2, r3, r4}
    43b6:	4690      	mov	r8, r2
    43b8:	4699      	mov	r9, r3
    43ba:	46a2      	mov	sl, r4
    43bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43be:	46c0      	nop			; (mov r8, r8)
    43c0:	00000155 	.word	0x00000155
    43c4:	20000008 	.word	0x20000008
    43c8:	20001334 	.word	0x20001334
    43cc:	200012f8 	.word	0x200012f8
    43d0:	00000fe1 	.word	0x00000fe1
    43d4:	200012f0 	.word	0x200012f0

000043d8 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    43d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43da:	46d6      	mov	lr, sl
    43dc:	464f      	mov	r7, r9
    43de:	4646      	mov	r6, r8
    43e0:	b5c0      	push	{r6, r7, lr}
    43e2:	0006      	movs	r6, r0
    43e4:	468a      	mov	sl, r1
    43e6:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    43e8:	2001      	movs	r0, #1
    43ea:	4b76      	ldr	r3, [pc, #472]	; (45c4 <trx_aes_wrrd+0x1ec>)
    43ec:	4798      	blx	r3

	ENTER_TRX_REGION();
    43ee:	2100      	movs	r1, #0
    43f0:	2000      	movs	r0, #0
    43f2:	4b75      	ldr	r3, [pc, #468]	; (45c8 <trx_aes_wrrd+0x1f0>)
    43f4:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    43f6:	4f75      	ldr	r7, [pc, #468]	; (45cc <trx_aes_wrrd+0x1f4>)
    43f8:	2201      	movs	r2, #1
    43fa:	4975      	ldr	r1, [pc, #468]	; (45d0 <trx_aes_wrrd+0x1f8>)
    43fc:	0038      	movs	r0, r7
    43fe:	4b75      	ldr	r3, [pc, #468]	; (45d4 <trx_aes_wrrd+0x1fc>)
    4400:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4402:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4404:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4406:	7e1a      	ldrb	r2, [r3, #24]
    4408:	420a      	tst	r2, r1
    440a:	d0fc      	beq.n	4406 <trx_aes_wrrd+0x2e>
    440c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    440e:	07d2      	lsls	r2, r2, #31
    4410:	d501      	bpl.n	4416 <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4412:	2240      	movs	r2, #64	; 0x40
    4414:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4416:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4418:	7e1a      	ldrb	r2, [r3, #24]
    441a:	420a      	tst	r2, r1
    441c:	d0fc      	beq.n	4418 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    441e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4420:	7e1a      	ldrb	r2, [r3, #24]
    4422:	420a      	tst	r2, r1
    4424:	d0fc      	beq.n	4420 <trx_aes_wrrd+0x48>
    4426:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4428:	0752      	lsls	r2, r2, #29
    442a:	d50c      	bpl.n	4446 <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    442c:	8b5a      	ldrh	r2, [r3, #26]
    442e:	0752      	lsls	r2, r2, #29
    4430:	d501      	bpl.n	4436 <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4432:	2204      	movs	r2, #4
    4434:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4436:	4a65      	ldr	r2, [pc, #404]	; (45cc <trx_aes_wrrd+0x1f4>)
    4438:	7992      	ldrb	r2, [r2, #6]
    443a:	2a01      	cmp	r2, #1
    443c:	d055      	beq.n	44ea <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    443e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4440:	b2d2      	uxtb	r2, r2
    4442:	4965      	ldr	r1, [pc, #404]	; (45d8 <trx_aes_wrrd+0x200>)
    4444:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    4446:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4448:	7e1a      	ldrb	r2, [r3, #24]
    444a:	420a      	tst	r2, r1
    444c:	d0fc      	beq.n	4448 <trx_aes_wrrd+0x70>
    444e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4450:	07d2      	lsls	r2, r2, #31
    4452:	d500      	bpl.n	4456 <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4454:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4456:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4458:	7e1a      	ldrb	r2, [r3, #24]
    445a:	420a      	tst	r2, r1
    445c:	d0fc      	beq.n	4458 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    445e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4460:	7e1a      	ldrb	r2, [r3, #24]
    4462:	420a      	tst	r2, r1
    4464:	d0fc      	beq.n	4460 <trx_aes_wrrd+0x88>
    4466:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4468:	0752      	lsls	r2, r2, #29
    446a:	d50c      	bpl.n	4486 <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    446c:	8b5a      	ldrh	r2, [r3, #26]
    446e:	0752      	lsls	r2, r2, #29
    4470:	d501      	bpl.n	4476 <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4472:	2204      	movs	r2, #4
    4474:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4476:	4a55      	ldr	r2, [pc, #340]	; (45cc <trx_aes_wrrd+0x1f4>)
    4478:	7992      	ldrb	r2, [r2, #6]
    447a:	2a01      	cmp	r2, #1
    447c:	d03b      	beq.n	44f6 <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    447e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4480:	b2d2      	uxtb	r2, r2
    4482:	4955      	ldr	r1, [pc, #340]	; (45d8 <trx_aes_wrrd+0x200>)
    4484:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    4486:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4488:	7e1a      	ldrb	r2, [r3, #24]
    448a:	420a      	tst	r2, r1
    448c:	d0fc      	beq.n	4488 <trx_aes_wrrd+0xb0>
    448e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4490:	07d2      	lsls	r2, r2, #31
    4492:	d502      	bpl.n	449a <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4494:	4652      	mov	r2, sl
    4496:	7812      	ldrb	r2, [r2, #0]
    4498:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    449a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    449c:	7e1a      	ldrb	r2, [r3, #24]
    449e:	420a      	tst	r2, r1
    44a0:	d0fc      	beq.n	449c <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    44a2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44a4:	7e1a      	ldrb	r2, [r3, #24]
    44a6:	420a      	tst	r2, r1
    44a8:	d0fc      	beq.n	44a4 <trx_aes_wrrd+0xcc>
    44aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    44ac:	0752      	lsls	r2, r2, #29
    44ae:	d50c      	bpl.n	44ca <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    44b0:	8b5a      	ldrh	r2, [r3, #26]
    44b2:	0752      	lsls	r2, r2, #29
    44b4:	d501      	bpl.n	44ba <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    44b6:	2204      	movs	r2, #4
    44b8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    44ba:	4a44      	ldr	r2, [pc, #272]	; (45cc <trx_aes_wrrd+0x1f4>)
    44bc:	7992      	ldrb	r2, [r2, #6]
    44be:	2a01      	cmp	r2, #1
    44c0:	d01f      	beq.n	4502 <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    44c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44c4:	b2db      	uxtb	r3, r3
    44c6:	4a44      	ldr	r2, [pc, #272]	; (45d8 <trx_aes_wrrd+0x200>)
    44c8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    44ca:	2700      	movs	r7, #0
    44cc:	2c00      	cmp	r4, #0
    44ce:	d043      	beq.n	4558 <trx_aes_wrrd+0x180>
    44d0:	4656      	mov	r6, sl
    44d2:	3c01      	subs	r4, #1
    44d4:	b2e4      	uxtb	r4, r4
    44d6:	3401      	adds	r4, #1
    44d8:	44a2      	add	sl, r4
    44da:	46d0      	mov	r8, sl
    44dc:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    44de:	4d3b      	ldr	r5, [pc, #236]	; (45cc <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    44e0:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    44e2:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    44e4:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    44e6:	46a9      	mov	r9, r5
    44e8:	e01b      	b.n	4522 <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    44ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    44ec:	05d2      	lsls	r2, r2, #23
    44ee:	0dd2      	lsrs	r2, r2, #23
    44f0:	4939      	ldr	r1, [pc, #228]	; (45d8 <trx_aes_wrrd+0x200>)
    44f2:	800a      	strh	r2, [r1, #0]
    44f4:	e7a7      	b.n	4446 <trx_aes_wrrd+0x6e>
    44f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    44f8:	05d2      	lsls	r2, r2, #23
    44fa:	0dd2      	lsrs	r2, r2, #23
    44fc:	4936      	ldr	r1, [pc, #216]	; (45d8 <trx_aes_wrrd+0x200>)
    44fe:	800a      	strh	r2, [r1, #0]
    4500:	e7c1      	b.n	4486 <trx_aes_wrrd+0xae>
    4502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4504:	05db      	lsls	r3, r3, #23
    4506:	0ddb      	lsrs	r3, r3, #23
    4508:	4a33      	ldr	r2, [pc, #204]	; (45d8 <trx_aes_wrrd+0x200>)
    450a:	8013      	strh	r3, [r2, #0]
    450c:	e7dd      	b.n	44ca <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    450e:	464a      	mov	r2, r9
    4510:	7992      	ldrb	r2, [r2, #6]
    4512:	2a01      	cmp	r2, #1
    4514:	d01c      	beq.n	4550 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4516:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4518:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    451a:	7037      	strb	r7, [r6, #0]
    451c:	3601      	adds	r6, #1
	while (length > 0) {
    451e:	45b0      	cmp	r8, r6
    4520:	d01a      	beq.n	4558 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4522:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4524:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4526:	4202      	tst	r2, r0
    4528:	d0fc      	beq.n	4524 <trx_aes_wrrd+0x14c>
    452a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    452c:	4202      	tst	r2, r0
    452e:	d001      	beq.n	4534 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4530:	7872      	ldrb	r2, [r6, #1]
    4532:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4534:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4536:	4222      	tst	r2, r4
    4538:	d0fc      	beq.n	4534 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    453a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    453c:	420a      	tst	r2, r1
    453e:	d0fc      	beq.n	453a <trx_aes_wrrd+0x162>
    4540:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4542:	420a      	tst	r2, r1
    4544:	d0e9      	beq.n	451a <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4546:	8b5a      	ldrh	r2, [r3, #26]
    4548:	420a      	tst	r2, r1
    454a:	d0e0      	beq.n	450e <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    454c:	8359      	strh	r1, [r3, #26]
    454e:	e7de      	b.n	450e <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4550:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4552:	05ff      	lsls	r7, r7, #23
    4554:	0dff      	lsrs	r7, r7, #23
    4556:	e7e0      	b.n	451a <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4558:	4b1c      	ldr	r3, [pc, #112]	; (45cc <trx_aes_wrrd+0x1f4>)
    455a:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    455c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    455e:	7e1a      	ldrb	r2, [r3, #24]
    4560:	420a      	tst	r2, r1
    4562:	d0fc      	beq.n	455e <trx_aes_wrrd+0x186>
    4564:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4566:	07d2      	lsls	r2, r2, #31
    4568:	d501      	bpl.n	456e <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    456a:	2200      	movs	r2, #0
    456c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    456e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4570:	7e1a      	ldrb	r2, [r3, #24]
    4572:	420a      	tst	r2, r1
    4574:	d0fc      	beq.n	4570 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    4576:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4578:	7e1a      	ldrb	r2, [r3, #24]
    457a:	420a      	tst	r2, r1
    457c:	d0fc      	beq.n	4578 <trx_aes_wrrd+0x1a0>
    457e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4580:	0752      	lsls	r2, r2, #29
    4582:	d50a      	bpl.n	459a <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4584:	8b5a      	ldrh	r2, [r3, #26]
    4586:	0752      	lsls	r2, r2, #29
    4588:	d501      	bpl.n	458e <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    458a:	2204      	movs	r2, #4
    458c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    458e:	4a0f      	ldr	r2, [pc, #60]	; (45cc <trx_aes_wrrd+0x1f4>)
    4590:	7992      	ldrb	r2, [r2, #6]
    4592:	2a01      	cmp	r2, #1
    4594:	d011      	beq.n	45ba <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4596:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4598:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    459a:	4653      	mov	r3, sl
    459c:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    459e:	2200      	movs	r2, #0
    45a0:	490b      	ldr	r1, [pc, #44]	; (45d0 <trx_aes_wrrd+0x1f8>)
    45a2:	480a      	ldr	r0, [pc, #40]	; (45cc <trx_aes_wrrd+0x1f4>)
    45a4:	4b0b      	ldr	r3, [pc, #44]	; (45d4 <trx_aes_wrrd+0x1fc>)
    45a6:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    45a8:	2100      	movs	r1, #0
    45aa:	2000      	movs	r0, #0
    45ac:	4b0b      	ldr	r3, [pc, #44]	; (45dc <trx_aes_wrrd+0x204>)
    45ae:	4798      	blx	r3
}
    45b0:	bc1c      	pop	{r2, r3, r4}
    45b2:	4690      	mov	r8, r2
    45b4:	4699      	mov	r9, r3
    45b6:	46a2      	mov	sl, r4
    45b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    45ba:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    45bc:	05ff      	lsls	r7, r7, #23
    45be:	0dff      	lsrs	r7, r7, #23
    45c0:	e7eb      	b.n	459a <trx_aes_wrrd+0x1c2>
    45c2:	46c0      	nop			; (mov r8, r8)
    45c4:	00000155 	.word	0x00000155
    45c8:	000006e9 	.word	0x000006e9
    45cc:	20001334 	.word	0x20001334
    45d0:	200012f8 	.word	0x200012f8
    45d4:	00000fe1 	.word	0x00000fe1
    45d8:	200012f0 	.word	0x200012f0
    45dc:	000006c9 	.word	0x000006c9

000045e0 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    45e0:	2280      	movs	r2, #128	; 0x80
    45e2:	0512      	lsls	r2, r2, #20
    45e4:	4b01      	ldr	r3, [pc, #4]	; (45ec <appCmdIdentifyPeriodTimerHandler+0xc>)
    45e6:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    45e8:	4770      	bx	lr
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	41004400 	.word	0x41004400

000045f0 <appCmdIdentifyDurationTimerHandler>:
{
    45f0:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    45f2:	2280      	movs	r2, #128	; 0x80
    45f4:	0512      	lsls	r2, r2, #20
    45f6:	4b03      	ldr	r3, [pc, #12]	; (4604 <appCmdIdentifyDurationTimerHandler+0x14>)
    45f8:	619a      	str	r2, [r3, #24]
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    45fa:	4803      	ldr	r0, [pc, #12]	; (4608 <appCmdIdentifyDurationTimerHandler+0x18>)
    45fc:	4b03      	ldr	r3, [pc, #12]	; (460c <appCmdIdentifyDurationTimerHandler+0x1c>)
    45fe:	4798      	blx	r3
}
    4600:	bd10      	pop	{r4, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	41004400 	.word	0x41004400
    4608:	200002e8 	.word	0x200002e8
    460c:	00003685 	.word	0x00003685

00004610 <appCmdHandle>:
{
    4610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4612:	0004      	movs	r4, r0
		return false;
    4614:	2000      	movs	r0, #0
	if (size < sizeof(AppCmdHeader_t)) {
    4616:	2900      	cmp	r1, #0
    4618:	d002      	beq.n	4620 <appCmdHandle+0x10>
	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    461a:	7823      	ldrb	r3, [r4, #0]
    461c:	2b10      	cmp	r3, #16
    461e:	d000      	beq.n	4622 <appCmdHandle+0x12>
}
    4620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sizeof(AppCmdIdentify_t) != size) {
    4622:	2905      	cmp	r1, #5
    4624:	d1fc      	bne.n	4620 <appCmdHandle+0x10>
		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    4626:	4e10      	ldr	r6, [pc, #64]	; (4668 <appCmdHandle+0x58>)
    4628:	0030      	movs	r0, r6
    462a:	4f10      	ldr	r7, [pc, #64]	; (466c <appCmdHandle+0x5c>)
    462c:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    462e:	4d10      	ldr	r5, [pc, #64]	; (4670 <appCmdHandle+0x60>)
    4630:	0028      	movs	r0, r5
    4632:	47b8      	blx	r7
		appCmdIdentifyDurationTimer.interval = req->duration;
    4634:	7862      	ldrb	r2, [r4, #1]
    4636:	78a3      	ldrb	r3, [r4, #2]
    4638:	021b      	lsls	r3, r3, #8
    463a:	4313      	orrs	r3, r2
    463c:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    463e:	2300      	movs	r3, #0
    4640:	7333      	strb	r3, [r6, #12]
			= appCmdIdentifyDurationTimerHandler;
    4642:	4b0c      	ldr	r3, [pc, #48]	; (4674 <appCmdHandle+0x64>)
    4644:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    4646:	0030      	movs	r0, r6
    4648:	4e0b      	ldr	r6, [pc, #44]	; (4678 <appCmdHandle+0x68>)
    464a:	47b0      	blx	r6
		appCmdIdentifyPeriodTimer.interval = req->period;
    464c:	78e2      	ldrb	r2, [r4, #3]
    464e:	7923      	ldrb	r3, [r4, #4]
    4650:	021b      	lsls	r3, r3, #8
    4652:	4313      	orrs	r3, r2
    4654:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    4656:	2301      	movs	r3, #1
    4658:	732b      	strb	r3, [r5, #12]
			= appCmdIdentifyPeriodTimerHandler;
    465a:	4b08      	ldr	r3, [pc, #32]	; (467c <appCmdHandle+0x6c>)
    465c:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    465e:	0028      	movs	r0, r5
    4660:	47b0      	blx	r6
*/		return true;
    4662:	2001      	movs	r0, #1
    4664:	e7dc      	b.n	4620 <appCmdHandle+0x10>
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	200002d4 	.word	0x200002d4
    466c:	00003685 	.word	0x00003685
    4670:	200002e8 	.word	0x200002e8
    4674:	000045f1 	.word	0x000045f1
    4678:	000036f1 	.word	0x000036f1
    467c:	000045e1 	.word	0x000045e1

00004680 <APP_CommandsInit>:
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4680:	4b05      	ldr	r3, [pc, #20]	; (4698 <APP_CommandsInit+0x18>)
    4682:	2200      	movs	r2, #0
    4684:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler = appCmdIdentifyDurationTimerHandler;
    4686:	4a05      	ldr	r2, [pc, #20]	; (469c <APP_CommandsInit+0x1c>)
    4688:	611a      	str	r2, [r3, #16]
	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    468a:	4b05      	ldr	r3, [pc, #20]	; (46a0 <APP_CommandsInit+0x20>)
    468c:	2201      	movs	r2, #1
    468e:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    4690:	4a04      	ldr	r2, [pc, #16]	; (46a4 <APP_CommandsInit+0x24>)
    4692:	611a      	str	r2, [r3, #16]
}
    4694:	4770      	bx	lr
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	200002d4 	.word	0x200002d4
    469c:	000045f1 	.word	0x000045f1
    46a0:	200002e8 	.word	0x200002e8
    46a4:	000045e1 	.word	0x000045e1

000046a8 <appCmdDataInd>:
{
    46a8:	b510      	push	{r4, lr}
	appCmdHandle(ind->payload, ind->payloadSize);
    46aa:	7a01      	ldrb	r1, [r0, #8]
    46ac:	6840      	ldr	r0, [r0, #4]
    46ae:	4b01      	ldr	r3, [pc, #4]	; (46b4 <appCmdDataInd+0xc>)
    46b0:	4798      	blx	r3
}
    46b2:	bd10      	pop	{r4, pc}
    46b4:	00004611 	.word	0x00004611

000046b8 <configure_adc>:
void ReadMacAddress(void);

struct adc_module adc_instance;

void configure_adc(void)
{
    46b8:	b510      	push	{r4, lr}
    46ba:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	
	adc_get_config_defaults(&config_adc);
    46bc:	4668      	mov	r0, sp
    46be:	4b15      	ldr	r3, [pc, #84]	; (4714 <configure_adc+0x5c>)
    46c0:	4798      	blx	r3
	adc_init(&adc_instance, ADC, &config_adc);
    46c2:	4c15      	ldr	r4, [pc, #84]	; (4718 <configure_adc+0x60>)
    46c4:	466a      	mov	r2, sp
    46c6:	4915      	ldr	r1, [pc, #84]	; (471c <configure_adc+0x64>)
    46c8:	0020      	movs	r0, r4
    46ca:	4b15      	ldr	r3, [pc, #84]	; (4720 <configure_adc+0x68>)
    46cc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    46ce:	6823      	ldr	r3, [r4, #0]
    46d0:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    46d2:	b252      	sxtb	r2, r2
    46d4:	2a00      	cmp	r2, #0
    46d6:	dbfb      	blt.n	46d0 <configure_adc+0x18>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    46d8:	691a      	ldr	r2, [r3, #16]
    46da:	211f      	movs	r1, #31
    46dc:	438a      	bics	r2, r1
    46de:	3918      	subs	r1, #24
    46e0:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    46e2:	611a      	str	r2, [r3, #16]
    46e4:	7e5a      	ldrb	r2, [r3, #25]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    46e6:	b252      	sxtb	r2, r2
    46e8:	2a00      	cmp	r2, #0
    46ea:	dbfb      	blt.n	46e4 <configure_adc+0x2c>
    46ec:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    46ee:	b252      	sxtb	r2, r2
    46f0:	2a00      	cmp	r2, #0
    46f2:	dbfb      	blt.n	46ec <configure_adc+0x34>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    46f4:	220f      	movs	r2, #15
    46f6:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    46f8:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    46fa:	781a      	ldrb	r2, [r3, #0]
    46fc:	2102      	movs	r1, #2
    46fe:	430a      	orrs	r2, r1
    4700:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    4702:	4b05      	ldr	r3, [pc, #20]	; (4718 <configure_adc+0x60>)
    4704:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4706:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4708:	b25b      	sxtb	r3, r3
    470a:	2b00      	cmp	r3, #0
    470c:	dbfb      	blt.n	4706 <configure_adc+0x4e>
//	adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN6);
	adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN7);
//	adc_set_pin_scan_mode (&adc_instance,ADC_POSITIVE_INPUT_PIN6,2);
	adc_enable(&adc_instance);	
}
    470e:	b00c      	add	sp, #48	; 0x30
    4710:	bd10      	pop	{r4, pc}
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	00000261 	.word	0x00000261
    4718:	20001364 	.word	0x20001364
    471c:	42004000 	.word	0x42004000
    4720:	000002ad 	.word	0x000002ad

00004724 <config_led>:

void config_led(void){
    4724:	b500      	push	{lr}
    4726:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    4728:	a901      	add	r1, sp, #4
    472a:	2301      	movs	r3, #1
    472c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    472e:	2200      	movs	r2, #0
    4730:	708a      	strb	r2, [r1, #2]
	struct port_config pin_config;
	port_get_config_defaults( &pin_config);
	pin_config.direction  = PORT_PIN_DIR_OUTPUT;
    4732:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_config);
    4734:	201b      	movs	r0, #27
    4736:	4b04      	ldr	r3, [pc, #16]	; (4748 <config_led+0x24>)
    4738:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    473a:	2280      	movs	r2, #128	; 0x80
    473c:	0512      	lsls	r2, r2, #20
    473e:	4b03      	ldr	r3, [pc, #12]	; (474c <config_led+0x28>)
    4740:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, false);
}
    4742:	b003      	add	sp, #12
    4744:	bd00      	pop	{pc}
    4746:	46c0      	nop			; (mov r8, r8)
    4748:	0000086d 	.word	0x0000086d
    474c:	41004400 	.word	0x41004400

00004750 <main>:

uint16_t adcResult;
volatile uint16_t temp[2];

int main ( void )
{
    4750:	b510      	push	{r4, lr}
	struct rtc_calendar_time rtc_time;
	
	irq_initialize_vectors();
	system_init();
    4752:	4b0a      	ldr	r3, [pc, #40]	; (477c <main+0x2c>)
    4754:	4798      	blx	r3
	delay_init();
    4756:	4b0a      	ldr	r3, [pc, #40]	; (4780 <main+0x30>)
    4758:	4798      	blx	r3
	cpu_irq_enable();
    475a:	2201      	movs	r2, #1
    475c:	4b09      	ldr	r3, [pc, #36]	; (4784 <main+0x34>)
    475e:	701a      	strb	r2, [r3, #0]
    4760:	f3bf 8f5f 	dmb	sy
    4764:	b662      	cpsie	i

	config_led();
    4766:	4b08      	ldr	r3, [pc, #32]	; (4788 <main+0x38>)
    4768:	4798      	blx	r3

	configure_rtc_calendar();
	configure_rtc_callbacks();
	rtc_calendar_set_time(&rtc_instance, &rtc_time);
*/
	sio2host_init();
    476a:	4b08      	ldr	r3, [pc, #32]	; (478c <main+0x3c>)
    476c:	4798      	blx	r3
	wsndemo_init();
    476e:	4b08      	ldr	r3, [pc, #32]	; (4790 <main+0x40>)
    4770:	4798      	blx	r3
	configure_adc();
    4772:	4b08      	ldr	r3, [pc, #32]	; (4794 <main+0x44>)
    4774:	4798      	blx	r3
*/			
//		adc_start_conversion(&adc_instance);
//		delay_us(100);
//		adc_read(&adc_instance,&adcResult);
//		temp[1] = adcResult;
		wsndemo_task();
    4776:	4c08      	ldr	r4, [pc, #32]	; (4798 <main+0x48>)
    4778:	47a0      	blx	r4
    477a:	e7fd      	b.n	4778 <main+0x28>
    477c:	00001e41 	.word	0x00001e41
    4780:	00000115 	.word	0x00000115
    4784:	20000008 	.word	0x20000008
    4788:	00004725 	.word	0x00004725
    478c:	0000247d 	.word	0x0000247d
    4790:	000048ed 	.word	0x000048ed
    4794:	000046b9 	.word	0x000046b9
    4798:	00004905 	.word	0x00004905

0000479c <appNetworkStatusTimerHandler>:
*****************************************************************************/
static void appNetworkStatusTimerHandler(SYS_Timer_t *timer)
{
//	LED_Toggle(LED_NETWORK);
	(void)timer;
}
    479c:	4770      	bx	lr
	...

000047a0 <Connection_Confirm>:
/**
 * Connection confirmation
 */
static void Connection_Confirm(miwi_status_t status)
{
	if (SUCCESS == status)
    47a0:	2800      	cmp	r0, #0
    47a2:	d003      	beq.n	47ac <Connection_Confirm+0xc>
	else
	{
#if defined(PAN_COORDINATOR)
		appState = APP_STATE_START_NETWORK;
#else
        appState = APP_STATE_CONNECT_NETWORK;
    47a4:	2202      	movs	r2, #2
    47a6:	4b03      	ldr	r3, [pc, #12]	; (47b4 <Connection_Confirm+0x14>)
    47a8:	701a      	strb	r2, [r3, #0]
#endif
	}
}
    47aa:	4770      	bx	lr
        appState = APP_STATE_SEND;
    47ac:	2205      	movs	r2, #5
    47ae:	4b01      	ldr	r3, [pc, #4]	; (47b4 <Connection_Confirm+0x14>)
    47b0:	701a      	strb	r2, [r3, #0]
    47b2:	e7fa      	b.n	47aa <Connection_Confirm+0xa>
    47b4:	20000348 	.word	0x20000348

000047b8 <searchConfim>:
{
    47b8:	b530      	push	{r4, r5, lr}
    47ba:	b083      	sub	sp, #12
	if(foundScanResults)
    47bc:	2800      	cmp	r0, #0
    47be:	d024      	beq.n	480a <searchConfim+0x52>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    47c0:	7a4b      	ldrb	r3, [r1, #9]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d11b      	bne.n	47fe <searchConfim+0x46>
    47c6:	000a      	movs	r2, r1
    47c8:	321b      	adds	r2, #27
    47ca:	2301      	movs	r3, #1
		for(uint8_t loopindex = 0; loopindex < foundScanResults; loopindex++)
    47cc:	b2dc      	uxtb	r4, r3
    47ce:	42a0      	cmp	r0, r4
    47d0:	d917      	bls.n	4802 <searchConfim+0x4a>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    47d2:	001d      	movs	r5, r3
    47d4:	7814      	ldrb	r4, [r2, #0]
    47d6:	3301      	adds	r3, #1
    47d8:	3212      	adds	r2, #18
    47da:	2c00      	cmp	r4, #0
    47dc:	d0f6      	beq.n	47cc <searchConfim+0x14>
				SHORT_ADDR_LEN, (uint8_t*)&searchConfRes->beaconList[loopindex].shortAddress, CAPABILITY_INFO, Connection_Confirm);
    47de:	00eb      	lsls	r3, r5, #3
    47e0:	195a      	adds	r2, r3, r5
    47e2:	0052      	lsls	r2, r2, #1
    47e4:	3210      	adds	r2, #16
    47e6:	188a      	adds	r2, r1, r2
				MiApp_EstablishConnection(searchConfRes->beaconList[loopindex].logicalChannel,
    47e8:	195b      	adds	r3, r3, r5
    47ea:	005b      	lsls	r3, r3, #1
    47ec:	18c9      	adds	r1, r1, r3
    47ee:	7b08      	ldrb	r0, [r1, #12]
    47f0:	4b08      	ldr	r3, [pc, #32]	; (4814 <searchConfim+0x5c>)
    47f2:	9300      	str	r3, [sp, #0]
    47f4:	2306      	movs	r3, #6
    47f6:	2102      	movs	r1, #2
    47f8:	4c07      	ldr	r4, [pc, #28]	; (4818 <searchConfim+0x60>)
    47fa:	47a0      	blx	r4
				return;
    47fc:	e008      	b.n	4810 <searchConfim+0x58>
			if(searchConfRes->beaconList[loopindex].connectionPermit)
    47fe:	2500      	movs	r5, #0
    4800:	e7ed      	b.n	47de <searchConfim+0x26>
		appState = APP_STATE_CONNECT_NETWORK;
    4802:	2202      	movs	r2, #2
    4804:	4b05      	ldr	r3, [pc, #20]	; (481c <searchConfim+0x64>)
    4806:	701a      	strb	r2, [r3, #0]
    4808:	e002      	b.n	4810 <searchConfim+0x58>
		appState = APP_STATE_CONNECT_NETWORK;
    480a:	2202      	movs	r2, #2
    480c:	4b03      	ldr	r3, [pc, #12]	; (481c <searchConfim+0x64>)
    480e:	701a      	strb	r2, [r3, #0]
}
    4810:	b003      	add	sp, #12
    4812:	bd30      	pop	{r4, r5, pc}
    4814:	000047a1 	.word	0x000047a1
    4818:	000070a5 	.word	0x000070a5
    481c:	20000348 	.word	0x20000348

00004820 <appDataSendingTimerHandler>:
{
    4820:	b510      	push	{r4, lr}
	port_base->OUTTGL.reg = pin_mask;
    4822:	2280      	movs	r2, #128	; 0x80
    4824:	0512      	lsls	r2, r2, #20
    4826:	4b07      	ldr	r3, [pc, #28]	; (4844 <appDataSendingTimerHandler+0x24>)
    4828:	61da      	str	r2, [r3, #28]
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    482a:	4b07      	ldr	r3, [pc, #28]	; (4848 <appDataSendingTimerHandler+0x28>)
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	2b08      	cmp	r3, #8
    4830:	d003      	beq.n	483a <appDataSendingTimerHandler+0x1a>
		SYS_TimerStart(&appDataSendingTimer);
    4832:	4806      	ldr	r0, [pc, #24]	; (484c <appDataSendingTimerHandler+0x2c>)
    4834:	4b06      	ldr	r3, [pc, #24]	; (4850 <appDataSendingTimerHandler+0x30>)
    4836:	4798      	blx	r3
}
    4838:	bd10      	pop	{r4, pc}
		appState = APP_STATE_SEND;
    483a:	2205      	movs	r2, #5
    483c:	4b02      	ldr	r3, [pc, #8]	; (4848 <appDataSendingTimerHandler+0x28>)
    483e:	701a      	strb	r2, [r3, #0]
    4840:	e7fa      	b.n	4838 <appDataSendingTimerHandler+0x18>
    4842:	46c0      	nop			; (mov r8, r8)
    4844:	41004400 	.word	0x41004400
    4848:	20000348 	.word	0x20000348
    484c:	2000136c 	.word	0x2000136c
    4850:	000036f1 	.word	0x000036f1

00004854 <appDataInd>:
{
    4854:	b510      	push	{r4, lr}
	AppMessage_t *msg = (AppMessage_t *)ind->payload;
    4856:	6843      	ldr	r3, [r0, #4]
    4858:	2180      	movs	r1, #128	; 0x80
    485a:	0509      	lsls	r1, r1, #20
    485c:	4a04      	ldr	r2, [pc, #16]	; (4870 <appDataInd+0x1c>)
    485e:	61d1      	str	r1, [r2, #28]
	msg->lqi = ind->packetLQI;
    4860:	7a82      	ldrb	r2, [r0, #10]
    4862:	765a      	strb	r2, [r3, #25]
	msg->rssi = ind->packetRSSI;
    4864:	7a42      	ldrb	r2, [r0, #9]
    4866:	769a      	strb	r2, [r3, #26]
    appCmdDataInd(ind);
    4868:	4b02      	ldr	r3, [pc, #8]	; (4874 <appDataInd+0x20>)
    486a:	4798      	blx	r3
}
    486c:	bd10      	pop	{r4, pc}
    486e:	46c0      	nop			; (mov r8, r8)
    4870:	41004400 	.word	0x41004400
    4874:	000046a9 	.word	0x000046a9

00004878 <appDataConf>:
{
    4878:	b510      	push	{r4, lr}
	if (SUCCESS == status) {
    487a:	2900      	cmp	r1, #0
    487c:	d10f      	bne.n	489e <appDataConf+0x26>
		if (!appNetworkStatus) {
    487e:	4b0f      	ldr	r3, [pc, #60]	; (48bc <appDataConf+0x44>)
    4880:	781b      	ldrb	r3, [r3, #0]
    4882:	2b00      	cmp	r3, #0
    4884:	d004      	beq.n	4890 <appDataConf+0x18>
	if (APP_STATE_WAIT_CONF == appState)
    4886:	4b0e      	ldr	r3, [pc, #56]	; (48c0 <appDataConf+0x48>)
    4888:	781b      	ldrb	r3, [r3, #0]
    488a:	2b06      	cmp	r3, #6
    488c:	d012      	beq.n	48b4 <appDataConf+0x3c>
}
    488e:	bd10      	pop	{r4, pc}
			SYS_TimerStop(&appNetworkStatusTimer);
    4890:	480c      	ldr	r0, [pc, #48]	; (48c4 <appDataConf+0x4c>)
    4892:	4b0d      	ldr	r3, [pc, #52]	; (48c8 <appDataConf+0x50>)
    4894:	4798      	blx	r3
			appNetworkStatus = true;
    4896:	2201      	movs	r2, #1
    4898:	4b08      	ldr	r3, [pc, #32]	; (48bc <appDataConf+0x44>)
    489a:	701a      	strb	r2, [r3, #0]
    489c:	e7f3      	b.n	4886 <appDataConf+0xe>
		if (appNetworkStatus) {
    489e:	4b07      	ldr	r3, [pc, #28]	; (48bc <appDataConf+0x44>)
    48a0:	781b      	ldrb	r3, [r3, #0]
    48a2:	2b00      	cmp	r3, #0
    48a4:	d0ef      	beq.n	4886 <appDataConf+0xe>
			SYS_TimerStart(&appNetworkStatusTimer);
    48a6:	4807      	ldr	r0, [pc, #28]	; (48c4 <appDataConf+0x4c>)
    48a8:	4b08      	ldr	r3, [pc, #32]	; (48cc <appDataConf+0x54>)
    48aa:	4798      	blx	r3
			appNetworkStatus = false;
    48ac:	2200      	movs	r2, #0
    48ae:	4b03      	ldr	r3, [pc, #12]	; (48bc <appDataConf+0x44>)
    48b0:	701a      	strb	r2, [r3, #0]
    48b2:	e7e8      	b.n	4886 <appDataConf+0xe>
		appState = APP_STATE_SENDING_DONE;
    48b4:	2207      	movs	r2, #7
    48b6:	4b02      	ldr	r3, [pc, #8]	; (48c0 <appDataConf+0x48>)
    48b8:	701a      	strb	r2, [r3, #0]
}
    48ba:	e7e8      	b.n	488e <appDataConf+0x16>
    48bc:	20000333 	.word	0x20000333
    48c0:	20000348 	.word	0x20000348
    48c4:	20000334 	.word	0x20000334
    48c8:	00003685 	.word	0x00003685
    48cc:	000036f1 	.word	0x000036f1

000048d0 <appLinkFailureCallback>:
	MeshTasks();
	APP_TaskHandler();
}

void appLinkFailureCallback(void)
{
    48d0:	b510      	push	{r4, lr}
	/* On link failure initiate search to establish connection */
	appState = APP_STATE_CONNECT_NETWORK;
    48d2:	2202      	movs	r2, #2
    48d4:	4b02      	ldr	r3, [pc, #8]	; (48e0 <appLinkFailureCallback+0x10>)
    48d6:	701a      	strb	r2, [r3, #0]
	SYS_TimerStop(&appDataSendingTimer);
    48d8:	4802      	ldr	r0, [pc, #8]	; (48e4 <appLinkFailureCallback+0x14>)
    48da:	4b03      	ldr	r3, [pc, #12]	; (48e8 <appLinkFailureCallback+0x18>)
    48dc:	4798      	blx	r3
}
    48de:	bd10      	pop	{r4, pc}
    48e0:	20000348 	.word	0x20000348
    48e4:	2000136c 	.word	0x2000136c
    48e8:	00003685 	.word	0x00003685

000048ec <wsndemo_init>:
{
    48ec:	b510      	push	{r4, lr}
	MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly);
    48ee:	4902      	ldr	r1, [pc, #8]	; (48f8 <wsndemo_init+0xc>)
    48f0:	4802      	ldr	r0, [pc, #8]	; (48fc <wsndemo_init+0x10>)
    48f2:	4b03      	ldr	r3, [pc, #12]	; (4900 <wsndemo_init+0x14>)
    48f4:	4798      	blx	r3
}
    48f6:	bd10      	pop	{r4, pc}
    48f8:	2000000c 	.word	0x2000000c
    48fc:	20000030 	.word	0x20000030
    4900:	00004e89 	.word	0x00004e89

00004904 <wsndemo_task>:
{
    4904:	b5f0      	push	{r4, r5, r6, r7, lr}
    4906:	46c6      	mov	lr, r8
    4908:	b500      	push	{lr}
    490a:	b086      	sub	sp, #24
	MeshTasks();
    490c:	4b70      	ldr	r3, [pc, #448]	; (4ad0 <wsndemo_task+0x1cc>)
    490e:	4798      	blx	r3
	switch(appState)
    4910:	4b70      	ldr	r3, [pc, #448]	; (4ad4 <wsndemo_task+0x1d0>)
    4912:	781b      	ldrb	r3, [r3, #0]
    4914:	2b02      	cmp	r3, #2
    4916:	d063      	beq.n	49e0 <wsndemo_task+0xdc>
    4918:	b2da      	uxtb	r2, r3
    491a:	2a02      	cmp	r2, #2
    491c:	d90a      	bls.n	4934 <wsndemo_task+0x30>
    491e:	2b05      	cmp	r3, #5
    4920:	d068      	beq.n	49f4 <wsndemo_task+0xf0>
    4922:	2b07      	cmp	r3, #7
    4924:	d158      	bne.n	49d8 <wsndemo_task+0xd4>
			SYS_TimerStart(&appDataSendingTimer);
    4926:	486c      	ldr	r0, [pc, #432]	; (4ad8 <wsndemo_task+0x1d4>)
    4928:	4b6c      	ldr	r3, [pc, #432]	; (4adc <wsndemo_task+0x1d8>)
    492a:	4798      	blx	r3
			appState = APP_STATE_WAIT_SEND_TIMER;
    492c:	2208      	movs	r2, #8
    492e:	4b69      	ldr	r3, [pc, #420]	; (4ad4 <wsndemo_task+0x1d0>)
    4930:	701a      	strb	r2, [r3, #0]
}
    4932:	e051      	b.n	49d8 <wsndemo_task+0xd4>
	switch(appState)
    4934:	2b00      	cmp	r3, #0
    4936:	d14f      	bne.n	49d8 <wsndemo_task+0xd4>
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    4938:	4869      	ldr	r0, [pc, #420]	; (4ae0 <wsndemo_task+0x1dc>)
    493a:	2501      	movs	r5, #1
    493c:	7005      	strb	r5, [r0, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    493e:	2602      	movs	r6, #2
    4940:	7046      	strb	r6, [r0, #1]
	appMsg.extAddr              = 0;
    4942:	2400      	movs	r4, #0
    4944:	2200      	movs	r2, #0
    4946:	8042      	strh	r2, [r0, #2]
    4948:	8082      	strh	r2, [r0, #4]
    494a:	80c2      	strh	r2, [r0, #6]
    494c:	8102      	strh	r2, [r0, #8]
	appMsg.shortAddr            = 0;
    494e:	2300      	movs	r3, #0
    4950:	8143      	strh	r3, [r0, #10]
	appMsg.softVersion          = 0x01100000;
    4952:	2388      	movs	r3, #136	; 0x88
    4954:	045b      	lsls	r3, r3, #17
    4956:	60c3      	str	r3, [r0, #12]
	appMsg.channelMask          = CHANNEL_MAP;
    4958:	2380      	movs	r3, #128	; 0x80
    495a:	049b      	lsls	r3, r3, #18
    495c:	6103      	str	r3, [r0, #16]
	appMsg.nextHopAddr          = 0;
    495e:	75c2      	strb	r2, [r0, #23]
    4960:	7602      	strb	r2, [r0, #24]
	appMsg.lqi                  = 0;
    4962:	7644      	strb	r4, [r0, #25]
	appMsg.rssi                 = 0;
    4964:	7684      	strb	r4, [r0, #26]
	appMsg.sensors.type        = 1;
    4966:	76c5      	strb	r5, [r0, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    4968:	320c      	adds	r2, #12
    496a:	7702      	strb	r2, [r0, #28]
	appMsg.sensors.battery     = 0;
    496c:	0003      	movs	r3, r0
    496e:	2100      	movs	r1, #0
    4970:	7741      	strb	r1, [r0, #29]
    4972:	7781      	strb	r1, [r0, #30]
    4974:	77c1      	strb	r1, [r0, #31]
    4976:	331d      	adds	r3, #29
    4978:	70d9      	strb	r1, [r3, #3]
	appMsg.sensors.temperature = 0;
    497a:	0003      	movs	r3, r0
    497c:	3321      	adds	r3, #33	; 0x21
    497e:	7019      	strb	r1, [r3, #0]
    4980:	7059      	strb	r1, [r3, #1]
    4982:	7099      	strb	r1, [r3, #2]
    4984:	70d9      	strb	r1, [r3, #3]
	appMsg.sensors.light       = 0;
    4986:	0003      	movs	r3, r0
    4988:	3325      	adds	r3, #37	; 0x25
    498a:	7019      	strb	r1, [r3, #0]
    498c:	7059      	strb	r1, [r3, #1]
    498e:	7099      	strb	r1, [r3, #2]
    4990:	70d9      	strb	r1, [r3, #3]
	appMsg.caption.type         = 32;
    4992:	3120      	adds	r1, #32
    4994:	2329      	movs	r3, #41	; 0x29
    4996:	54c1      	strb	r1, [r0, r3]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    4998:	3301      	adds	r3, #1
    499a:	54c2      	strb	r2, [r0, r3]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    499c:	302b      	adds	r0, #43	; 0x2b
    499e:	4951      	ldr	r1, [pc, #324]	; (4ae4 <wsndemo_task+0x1e0>)
    49a0:	4b51      	ldr	r3, [pc, #324]	; (4ae8 <wsndemo_task+0x1e4>)
    49a2:	4798      	blx	r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    49a4:	4b4c      	ldr	r3, [pc, #304]	; (4ad8 <wsndemo_task+0x1d4>)
    49a6:	22fa      	movs	r2, #250	; 0xfa
    49a8:	0092      	lsls	r2, r2, #2
    49aa:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    49ac:	731c      	strb	r4, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    49ae:	494f      	ldr	r1, [pc, #316]	; (4aec <wsndemo_task+0x1e8>)
    49b0:	6119      	str	r1, [r3, #16]
	appNetworkStatus = false;
    49b2:	4b4f      	ldr	r3, [pc, #316]	; (4af0 <wsndemo_task+0x1ec>)
    49b4:	701c      	strb	r4, [r3, #0]
	appNetworkStatusTimer.interval = APP_NWKSTATUS_INTERVAL;
    49b6:	484f      	ldr	r0, [pc, #316]	; (4af4 <wsndemo_task+0x1f0>)
    49b8:	6082      	str	r2, [r0, #8]
	appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
    49ba:	7305      	strb	r5, [r0, #12]
	appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    49bc:	4b4e      	ldr	r3, [pc, #312]	; (4af8 <wsndemo_task+0x1f4>)
    49be:	6103      	str	r3, [r0, #16]
	SYS_TimerStart(&appNetworkStatusTimer);
    49c0:	4b46      	ldr	r3, [pc, #280]	; (4adc <wsndemo_task+0x1d8>)
    49c2:	4798      	blx	r3
	APP_CommandsInit();
    49c4:	4b4d      	ldr	r3, [pc, #308]	; (4afc <wsndemo_task+0x1f8>)
    49c6:	4798      	blx	r3
	MiApp_SubscribeDataIndicationCallback(appDataInd);
    49c8:	484d      	ldr	r0, [pc, #308]	; (4b00 <wsndemo_task+0x1fc>)
    49ca:	4b4e      	ldr	r3, [pc, #312]	; (4b04 <wsndemo_task+0x200>)
    49cc:	4798      	blx	r3
	MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    49ce:	484e      	ldr	r0, [pc, #312]	; (4b08 <wsndemo_task+0x204>)
    49d0:	4b4e      	ldr	r3, [pc, #312]	; (4b0c <wsndemo_task+0x208>)
    49d2:	4798      	blx	r3
	appState = APP_STATE_CONNECT_NETWORK;
    49d4:	4b3f      	ldr	r3, [pc, #252]	; (4ad4 <wsndemo_task+0x1d0>)
    49d6:	701e      	strb	r6, [r3, #0]
}
    49d8:	b006      	add	sp, #24
    49da:	bc04      	pop	{r2}
    49dc:	4690      	mov	r8, r2
    49de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			MiApp_SearchConnection(APP_SCAN_DURATION, CHANNEL_MAP, searchConfim);
    49e0:	4a4b      	ldr	r2, [pc, #300]	; (4b10 <wsndemo_task+0x20c>)
    49e2:	2180      	movs	r1, #128	; 0x80
    49e4:	0489      	lsls	r1, r1, #18
    49e6:	200a      	movs	r0, #10
    49e8:	4b4a      	ldr	r3, [pc, #296]	; (4b14 <wsndemo_task+0x210>)
    49ea:	4798      	blx	r3
			appState = APP_STATE_CONNECTING_NETWORK;
    49ec:	2203      	movs	r2, #3
    49ee:	4b39      	ldr	r3, [pc, #228]	; (4ad4 <wsndemo_task+0x1d0>)
    49f0:	701a      	strb	r2, [r3, #0]
    49f2:	e7f1      	b.n	49d8 <wsndemo_task+0xd4>
    uint16_t shortAddressLocal = 0xFFFF;
    49f4:	2512      	movs	r5, #18
    49f6:	446d      	add	r5, sp
    49f8:	2301      	movs	r3, #1
    49fa:	425b      	negs	r3, r3
    49fc:	802b      	strh	r3, [r5, #0]
    uint16_t shortAddressPanId = 0xFFFF;
    49fe:	ae05      	add	r6, sp, #20
    4a00:	8033      	strh	r3, [r6, #0]
    uint16_t dstAddr = 0; /* PAN Coordinator Address */
    4a02:	3317      	adds	r3, #23
    4a04:	446b      	add	r3, sp
    4a06:	4698      	mov	r8, r3
    4a08:	2300      	movs	r3, #0
    4a0a:	4642      	mov	r2, r8
    4a0c:	8013      	strh	r3, [r2, #0]
	appMsg.sensors.battery     = 11;
    4a0e:	4c34      	ldr	r4, [pc, #208]	; (4ae0 <wsndemo_task+0x1dc>)
    4a10:	0023      	movs	r3, r4
    4a12:	220b      	movs	r2, #11
    4a14:	7762      	strb	r2, [r4, #29]
    4a16:	2200      	movs	r2, #0
    4a18:	77a2      	strb	r2, [r4, #30]
    4a1a:	77e2      	strb	r2, [r4, #31]
    4a1c:	331d      	adds	r3, #29
    4a1e:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 22;
    4a20:	0023      	movs	r3, r4
    4a22:	3321      	adds	r3, #33	; 0x21
    4a24:	3216      	adds	r2, #22
    4a26:	701a      	strb	r2, [r3, #0]
    4a28:	2200      	movs	r2, #0
    4a2a:	705a      	strb	r2, [r3, #1]
    4a2c:	709a      	strb	r2, [r3, #2]
    4a2e:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.light       = 33;
    4a30:	0023      	movs	r3, r4
    4a32:	3325      	adds	r3, #37	; 0x25
    4a34:	3221      	adds	r2, #33	; 0x21
    4a36:	701a      	strb	r2, [r3, #0]
    4a38:	2200      	movs	r2, #0
    4a3a:	705a      	strb	r2, [r3, #1]
    4a3c:	709a      	strb	r2, [r3, #2]
    4a3e:	70da      	strb	r2, [r3, #3]
	MiApp_Get(SHORT_ADDRESS, (uint8_t *)&shortAddressLocal);
    4a40:	0029      	movs	r1, r5
    4a42:	2002      	movs	r0, #2
    4a44:	4f34      	ldr	r7, [pc, #208]	; (4b18 <wsndemo_task+0x214>)
    4a46:	47b8      	blx	r7
        appMsg.shortAddr = shortAddressLocal;
    4a48:	882b      	ldrh	r3, [r5, #0]
    4a4a:	8163      	strh	r3, [r4, #10]
	appMsg.extAddr   = appMsg.shortAddr;
    4a4c:	8063      	strh	r3, [r4, #2]
    4a4e:	0c1b      	lsrs	r3, r3, #16
    4a50:	80a3      	strh	r3, [r4, #4]
    4a52:	2300      	movs	r3, #0
    4a54:	80e3      	strh	r3, [r4, #6]
    4a56:	8123      	strh	r3, [r4, #8]
	appMsg.nextHopAddr = MiApp_MeshGetNextHopAddr(PAN_COORDINATOR_SHORT_ADDRESS);
    4a58:	2000      	movs	r0, #0
    4a5a:	4b30      	ldr	r3, [pc, #192]	; (4b1c <wsndemo_task+0x218>)
    4a5c:	4798      	blx	r3
    4a5e:	75e0      	strb	r0, [r4, #23]
    4a60:	0a00      	lsrs	r0, r0, #8
    4a62:	7620      	strb	r0, [r4, #24]
	MiApp_Get(CHANNEL, (uint8_t *)&appMsg.workingChannel);
    4a64:	0021      	movs	r1, r4
    4a66:	3116      	adds	r1, #22
    4a68:	2000      	movs	r0, #0
    4a6a:	47b8      	blx	r7
	MiApp_Get(PANID, (uint8_t *)&shortAddressPanId);
    4a6c:	0031      	movs	r1, r6
    4a6e:	2001      	movs	r0, #1
    4a70:	47b8      	blx	r7
        appMsg.panId = shortAddressPanId;
    4a72:	8833      	ldrh	r3, [r6, #0]
    4a74:	82a3      	strh	r3, [r4, #20]
	appMsg.caption.type         = 32;
    4a76:	2220      	movs	r2, #32
    4a78:	2329      	movs	r3, #41	; 0x29
    4a7a:	54e2      	strb	r2, [r4, r3]
	    appMsg.caption.size         = APP_CAPTION_SIZE;
    4a7c:	3a14      	subs	r2, #20
    4a7e:	3301      	adds	r3, #1
    4a80:	54e2      	strb	r2, [r4, r3]
	    memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    4a82:	0020      	movs	r0, r4
    4a84:	302b      	adds	r0, #43	; 0x2b
    4a86:	4917      	ldr	r1, [pc, #92]	; (4ae4 <wsndemo_task+0x1e0>)
    4a88:	4b17      	ldr	r3, [pc, #92]	; (4ae8 <wsndemo_task+0x1e4>)
    4a8a:	4798      	blx	r3
		sprintf(&(appMsg.caption.text[APP_CAPTION_SIZE - SHORT_ADDRESS_CAPTION_SIZE]), "-0x%04X", shortAddressLocal);
    4a8c:	882a      	ldrh	r2, [r5, #0]
    4a8e:	0020      	movs	r0, r4
    4a90:	3030      	adds	r0, #48	; 0x30
    4a92:	4923      	ldr	r1, [pc, #140]	; (4b20 <wsndemo_task+0x21c>)
    4a94:	4b23      	ldr	r3, [pc, #140]	; (4b24 <wsndemo_task+0x220>)
    4a96:	4798      	blx	r3
	if (MiApp_SendData(2, (uint8_t *)&dstAddr, sizeof(appMsg), (uint8_t *)&appMsg, wsnmsghandle, true, appDataConf))
    4a98:	4b23      	ldr	r3, [pc, #140]	; (4b28 <wsndemo_task+0x224>)
    4a9a:	9302      	str	r3, [sp, #8]
    4a9c:	2301      	movs	r3, #1
    4a9e:	9301      	str	r3, [sp, #4]
    4aa0:	4b22      	ldr	r3, [pc, #136]	; (4b2c <wsndemo_task+0x228>)
    4aa2:	781b      	ldrb	r3, [r3, #0]
    4aa4:	9300      	str	r3, [sp, #0]
    4aa6:	0023      	movs	r3, r4
    4aa8:	2237      	movs	r2, #55	; 0x37
    4aaa:	4641      	mov	r1, r8
    4aac:	2002      	movs	r0, #2
    4aae:	4c20      	ldr	r4, [pc, #128]	; (4b30 <wsndemo_task+0x22c>)
    4ab0:	47a0      	blx	r4
    4ab2:	2800      	cmp	r0, #0
    4ab4:	d103      	bne.n	4abe <wsndemo_task+0x1ba>
		appState = APP_STATE_SENDING_DONE;
    4ab6:	2207      	movs	r2, #7
    4ab8:	4b06      	ldr	r3, [pc, #24]	; (4ad4 <wsndemo_task+0x1d0>)
    4aba:	701a      	strb	r2, [r3, #0]
    4abc:	e78c      	b.n	49d8 <wsndemo_task+0xd4>
		++wsnmsghandle;
    4abe:	4a1b      	ldr	r2, [pc, #108]	; (4b2c <wsndemo_task+0x228>)
    4ac0:	7813      	ldrb	r3, [r2, #0]
    4ac2:	3301      	adds	r3, #1
    4ac4:	7013      	strb	r3, [r2, #0]
		appState = APP_STATE_WAIT_CONF;
    4ac6:	2206      	movs	r2, #6
    4ac8:	4b02      	ldr	r3, [pc, #8]	; (4ad4 <wsndemo_task+0x1d0>)
    4aca:	701a      	strb	r2, [r3, #0]
    4acc:	e784      	b.n	49d8 <wsndemo_task+0xd4>
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	00004fc9 	.word	0x00004fc9
    4ad4:	20000348 	.word	0x20000348
    4ad8:	2000136c 	.word	0x2000136c
    4adc:	000036f1 	.word	0x000036f1
    4ae0:	200002fc 	.word	0x200002fc
    4ae4:	00008ac8 	.word	0x00008ac8
    4ae8:	00007a7f 	.word	0x00007a7f
    4aec:	00004821 	.word	0x00004821
    4af0:	20000333 	.word	0x20000333
    4af4:	20000334 	.word	0x20000334
    4af8:	0000479d 	.word	0x0000479d
    4afc:	00004681 	.word	0x00004681
    4b00:	00004855 	.word	0x00004855
    4b04:	0000626d 	.word	0x0000626d
    4b08:	000048d1 	.word	0x000048d1
    4b0c:	00007481 	.word	0x00007481
    4b10:	000047b9 	.word	0x000047b9
    4b14:	00007195 	.word	0x00007195
    4b18:	000051a9 	.word	0x000051a9
    4b1c:	000051f1 	.word	0x000051f1
    4b20:	00008ad0 	.word	0x00008ad0
    4b24:	00007c0d 	.word	0x00007c0d
    4b28:	00004879 	.word	0x00004879
    4b2c:	20000349 	.word	0x20000349
    4b30:	00005065 	.word	0x00005065

00004b34 <common_tc_delay>:
    4b34:	b510      	push	{r4, lr}
    4b36:	1c04      	adds	r4, r0, #0
    4b38:	4b13      	ldr	r3, [pc, #76]	; (4b88 <common_tc_delay+0x54>)
    4b3a:	4798      	blx	r3
    4b3c:	4b13      	ldr	r3, [pc, #76]	; (4b8c <common_tc_delay+0x58>)
    4b3e:	781a      	ldrb	r2, [r3, #0]
    4b40:	4362      	muls	r2, r4
    4b42:	1881      	adds	r1, r0, r2
    4b44:	4b12      	ldr	r3, [pc, #72]	; (4b90 <common_tc_delay+0x5c>)
    4b46:	6059      	str	r1, [r3, #4]
    4b48:	6859      	ldr	r1, [r3, #4]
    4b4a:	0c09      	lsrs	r1, r1, #16
    4b4c:	6059      	str	r1, [r3, #4]
    4b4e:	685b      	ldr	r3, [r3, #4]
    4b50:	2b00      	cmp	r3, #0
    4b52:	d007      	beq.n	4b64 <common_tc_delay+0x30>
    4b54:	4b0e      	ldr	r3, [pc, #56]	; (4b90 <common_tc_delay+0x5c>)
    4b56:	6859      	ldr	r1, [r3, #4]
    4b58:	3201      	adds	r2, #1
    4b5a:	1880      	adds	r0, r0, r2
    4b5c:	8118      	strh	r0, [r3, #8]
    4b5e:	4b0d      	ldr	r3, [pc, #52]	; (4b94 <common_tc_delay+0x60>)
    4b60:	4798      	blx	r3
    4b62:	e004      	b.n	4b6e <common_tc_delay+0x3a>
    4b64:	1882      	adds	r2, r0, r2
    4b66:	4b0a      	ldr	r3, [pc, #40]	; (4b90 <common_tc_delay+0x5c>)
    4b68:	811a      	strh	r2, [r3, #8]
    4b6a:	4b0b      	ldr	r3, [pc, #44]	; (4b98 <common_tc_delay+0x64>)
    4b6c:	4798      	blx	r3
    4b6e:	4b08      	ldr	r3, [pc, #32]	; (4b90 <common_tc_delay+0x5c>)
    4b70:	891b      	ldrh	r3, [r3, #8]
    4b72:	2b63      	cmp	r3, #99	; 0x63
    4b74:	d802      	bhi.n	4b7c <common_tc_delay+0x48>
    4b76:	3364      	adds	r3, #100	; 0x64
    4b78:	4a05      	ldr	r2, [pc, #20]	; (4b90 <common_tc_delay+0x5c>)
    4b7a:	8113      	strh	r3, [r2, #8]
    4b7c:	4b04      	ldr	r3, [pc, #16]	; (4b90 <common_tc_delay+0x5c>)
    4b7e:	8918      	ldrh	r0, [r3, #8]
    4b80:	4b06      	ldr	r3, [pc, #24]	; (4b9c <common_tc_delay+0x68>)
    4b82:	4798      	blx	r3
    4b84:	bd10      	pop	{r4, pc}
    4b86:	46c0      	nop			; (mov r8, r8)
    4b88:	000037b5 	.word	0x000037b5
    4b8c:	20001380 	.word	0x20001380
    4b90:	2000034c 	.word	0x2000034c
    4b94:	000037c9 	.word	0x000037c9
    4b98:	000037dd 	.word	0x000037dd
    4b9c:	00003819 	.word	0x00003819

00004ba0 <common_tc_init>:
    4ba0:	b508      	push	{r3, lr}
    4ba2:	2200      	movs	r2, #0
    4ba4:	4b03      	ldr	r3, [pc, #12]	; (4bb4 <common_tc_init+0x14>)
    4ba6:	701a      	strb	r2, [r3, #0]
    4ba8:	4b03      	ldr	r3, [pc, #12]	; (4bb8 <common_tc_init+0x18>)
    4baa:	4798      	blx	r3
    4bac:	4b03      	ldr	r3, [pc, #12]	; (4bbc <common_tc_init+0x1c>)
    4bae:	7018      	strb	r0, [r3, #0]
    4bb0:	bd08      	pop	{r3, pc}
    4bb2:	46c0      	nop			; (mov r8, r8)
    4bb4:	2000034c 	.word	0x2000034c
    4bb8:	00003831 	.word	0x00003831
    4bbc:	20001380 	.word	0x20001380

00004bc0 <tmr_ovf_callback>:
    4bc0:	b508      	push	{r3, lr}
    4bc2:	4b0e      	ldr	r3, [pc, #56]	; (4bfc <tmr_ovf_callback+0x3c>)
    4bc4:	685b      	ldr	r3, [r3, #4]
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d007      	beq.n	4bda <tmr_ovf_callback+0x1a>
    4bca:	4a0c      	ldr	r2, [pc, #48]	; (4bfc <tmr_ovf_callback+0x3c>)
    4bcc:	6853      	ldr	r3, [r2, #4]
    4bce:	3b01      	subs	r3, #1
    4bd0:	6053      	str	r3, [r2, #4]
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d101      	bne.n	4bda <tmr_ovf_callback+0x1a>
    4bd6:	4b0a      	ldr	r3, [pc, #40]	; (4c00 <tmr_ovf_callback+0x40>)
    4bd8:	4798      	blx	r3
    4bda:	4a08      	ldr	r2, [pc, #32]	; (4bfc <tmr_ovf_callback+0x3c>)
    4bdc:	7813      	ldrb	r3, [r2, #0]
    4bde:	3301      	adds	r3, #1
    4be0:	b2db      	uxtb	r3, r3
    4be2:	7013      	strb	r3, [r2, #0]
    4be4:	4a07      	ldr	r2, [pc, #28]	; (4c04 <tmr_ovf_callback+0x44>)
    4be6:	7812      	ldrb	r2, [r2, #0]
    4be8:	429a      	cmp	r2, r3
    4bea:	d806      	bhi.n	4bfa <tmr_ovf_callback+0x3a>
    4bec:	4b03      	ldr	r3, [pc, #12]	; (4bfc <tmr_ovf_callback+0x3c>)
    4bee:	2200      	movs	r2, #0
    4bf0:	701a      	strb	r2, [r3, #0]
    4bf2:	68db      	ldr	r3, [r3, #12]
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	d000      	beq.n	4bfa <tmr_ovf_callback+0x3a>
    4bf8:	4798      	blx	r3
    4bfa:	bd08      	pop	{r3, pc}
    4bfc:	2000034c 	.word	0x2000034c
    4c00:	000037dd 	.word	0x000037dd
    4c04:	20001380 	.word	0x20001380

00004c08 <tmr_cca_callback>:
    4c08:	b508      	push	{r3, lr}
    4c0a:	4b04      	ldr	r3, [pc, #16]	; (4c1c <tmr_cca_callback+0x14>)
    4c0c:	4798      	blx	r3
    4c0e:	4b04      	ldr	r3, [pc, #16]	; (4c20 <tmr_cca_callback+0x18>)
    4c10:	691b      	ldr	r3, [r3, #16]
    4c12:	2b00      	cmp	r3, #0
    4c14:	d000      	beq.n	4c18 <tmr_cca_callback+0x10>
    4c16:	4798      	blx	r3
    4c18:	bd08      	pop	{r3, pc}
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	000037c9 	.word	0x000037c9
    4c20:	2000034c 	.word	0x2000034c

00004c24 <set_common_tc_expiry_callback>:
    4c24:	4b01      	ldr	r3, [pc, #4]	; (4c2c <set_common_tc_expiry_callback+0x8>)
    4c26:	6118      	str	r0, [r3, #16]
    4c28:	4770      	bx	lr
    4c2a:	46c0      	nop			; (mov r8, r8)
    4c2c:	2000034c 	.word	0x2000034c

00004c30 <frameTxCallback>:
    4c30:	b570      	push	{r4, r5, r6, lr}
    4c32:	2401      	movs	r4, #1
    4c34:	4b07      	ldr	r3, [pc, #28]	; (4c54 <frameTxCallback+0x24>)
    4c36:	701c      	strb	r4, [r3, #0]
    4c38:	4c07      	ldr	r4, [pc, #28]	; (4c58 <frameTxCallback+0x28>)
    4c3a:	6823      	ldr	r3, [r4, #0]
    4c3c:	691b      	ldr	r3, [r3, #16]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d004      	beq.n	4c4c <frameTxCallback+0x1c>
    4c42:	4798      	blx	r3
    4c44:	4d05      	ldr	r5, [pc, #20]	; (4c5c <frameTxCallback+0x2c>)
    4c46:	6820      	ldr	r0, [r4, #0]
    4c48:	47a8      	blx	r5
    4c4a:	bd70      	pop	{r4, r5, r6, pc}
    4c4c:	0010      	movs	r0, r2
    4c4e:	4d03      	ldr	r5, [pc, #12]	; (4c5c <frameTxCallback+0x2c>)
    4c50:	47a8      	blx	r5
    4c52:	e7f8      	b.n	4c46 <frameTxCallback+0x16>
    4c54:	2000004a 	.word	0x2000004a
    4c58:	200013a8 	.word	0x200013a8
    4c5c:	000034a9 	.word	0x000034a9

00004c60 <dataTimerHandler>:
    4c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c62:	4646      	mov	r6, r8
    4c64:	46d6      	mov	lr, sl
    4c66:	464f      	mov	r7, r9
    4c68:	b5c0      	push	{r6, r7, lr}
    4c6a:	4e23      	ldr	r6, [pc, #140]	; (4cf8 <dataTimerHandler+0x98>)
    4c6c:	7a33      	ldrb	r3, [r6, #8]
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d033      	beq.n	4cda <dataTimerHandler+0x7a>
    4c72:	4b22      	ldr	r3, [pc, #136]	; (4cfc <dataTimerHandler+0x9c>)
    4c74:	2500      	movs	r5, #0
    4c76:	4698      	mov	r8, r3
    4c78:	4b21      	ldr	r3, [pc, #132]	; (4d00 <dataTimerHandler+0xa0>)
    4c7a:	4f22      	ldr	r7, [pc, #136]	; (4d04 <dataTimerHandler+0xa4>)
    4c7c:	469a      	mov	sl, r3
    4c7e:	46c1      	mov	r9, r8
    4c80:	e016      	b.n	4cb0 <dataTimerHandler+0x50>
    4c82:	7c43      	ldrb	r3, [r0, #17]
    4c84:	2b00      	cmp	r3, #0
    4c86:	d02d      	beq.n	4ce4 <dataTimerHandler+0x84>
    4c88:	3b01      	subs	r3, #1
    4c8a:	b2db      	uxtb	r3, r3
    4c8c:	7443      	strb	r3, [r0, #17]
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d128      	bne.n	4ce4 <dataTimerHandler+0x84>
    4c92:	6883      	ldr	r3, [r0, #8]
    4c94:	2b00      	cmp	r3, #0
    4c96:	d003      	beq.n	4ca0 <dataTimerHandler+0x40>
    4c98:	7c80      	ldrb	r0, [r0, #18]
    4c9a:	0022      	movs	r2, r4
    4c9c:	2103      	movs	r1, #3
    4c9e:	4798      	blx	r3
    4ca0:	0020      	movs	r0, r4
    4ca2:	4b19      	ldr	r3, [pc, #100]	; (4d08 <dataTimerHandler+0xa8>)
    4ca4:	4798      	blx	r3
    4ca6:	3501      	adds	r5, #1
    4ca8:	7a33      	ldrb	r3, [r6, #8]
    4caa:	b2ed      	uxtb	r5, r5
    4cac:	42ab      	cmp	r3, r5
    4cae:	d914      	bls.n	4cda <dataTimerHandler+0x7a>
    4cb0:	2100      	movs	r1, #0
    4cb2:	0030      	movs	r0, r6
    4cb4:	47b8      	blx	r7
    4cb6:	1e04      	subs	r4, r0, #0
    4cb8:	d00f      	beq.n	4cda <dataTimerHandler+0x7a>
    4cba:	7c03      	ldrb	r3, [r0, #16]
    4cbc:	2b00      	cmp	r3, #0
    4cbe:	d004      	beq.n	4cca <dataTimerHandler+0x6a>
    4cc0:	3b01      	subs	r3, #1
    4cc2:	b2db      	uxtb	r3, r3
    4cc4:	7403      	strb	r3, [r0, #16]
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d0db      	beq.n	4c82 <dataTimerHandler+0x22>
    4cca:	0021      	movs	r1, r4
    4ccc:	0030      	movs	r0, r6
    4cce:	47c0      	blx	r8
    4cd0:	3501      	adds	r5, #1
    4cd2:	7a33      	ldrb	r3, [r6, #8]
    4cd4:	b2ed      	uxtb	r5, r5
    4cd6:	42ab      	cmp	r3, r5
    4cd8:	d8ea      	bhi.n	4cb0 <dataTimerHandler+0x50>
    4cda:	bc1c      	pop	{r2, r3, r4}
    4cdc:	4690      	mov	r8, r2
    4cde:	4699      	mov	r9, r3
    4ce0:	46a2      	mov	sl, r4
    4ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ce4:	4653      	mov	r3, sl
    4ce6:	681b      	ldr	r3, [r3, #0]
    4ce8:	0021      	movs	r1, r4
    4cea:	7adb      	ldrb	r3, [r3, #11]
    4cec:	0030      	movs	r0, r6
    4cee:	3301      	adds	r3, #1
    4cf0:	7423      	strb	r3, [r4, #16]
    4cf2:	47c8      	blx	r9
    4cf4:	e7d7      	b.n	4ca6 <dataTimerHandler+0x46>
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	20001398 	.word	0x20001398
    4cfc:	00003589 	.word	0x00003589
    4d00:	20001390 	.word	0x20001390
    4d04:	000035c1 	.word	0x000035c1
    4d08:	000034a9 	.word	0x000034a9

00004d0c <ackReqDataConfcb>:
    4d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d0e:	46de      	mov	lr, fp
    4d10:	4657      	mov	r7, sl
    4d12:	4645      	mov	r5, r8
    4d14:	464e      	mov	r6, r9
    4d16:	b5e0      	push	{r5, r6, r7, lr}
    4d18:	7893      	ldrb	r3, [r2, #2]
    4d1a:	b083      	sub	sp, #12
    4d1c:	4682      	mov	sl, r0
    4d1e:	4698      	mov	r8, r3
    4d20:	0010      	movs	r0, r2
    4d22:	4b32      	ldr	r3, [pc, #200]	; (4dec <ackReqDataConfcb+0xe0>)
    4d24:	4693      	mov	fp, r2
    4d26:	9101      	str	r1, [sp, #4]
    4d28:	4798      	blx	r3
    4d2a:	22ff      	movs	r2, #255	; 0xff
    4d2c:	4b30      	ldr	r3, [pc, #192]	; (4df0 <ackReqDataConfcb+0xe4>)
    4d2e:	881b      	ldrh	r3, [r3, #0]
    4d30:	421a      	tst	r2, r3
    4d32:	d156      	bne.n	4de2 <ackReqDataConfcb+0xd6>
    4d34:	4e2f      	ldr	r6, [pc, #188]	; (4df4 <ackReqDataConfcb+0xe8>)
    4d36:	7a33      	ldrb	r3, [r6, #8]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d031      	beq.n	4da0 <ackReqDataConfcb+0x94>
    4d3c:	4b2e      	ldr	r3, [pc, #184]	; (4df8 <ackReqDataConfcb+0xec>)
    4d3e:	2400      	movs	r4, #0
    4d40:	4f2e      	ldr	r7, [pc, #184]	; (4dfc <ackReqDataConfcb+0xf0>)
    4d42:	4699      	mov	r9, r3
    4d44:	e007      	b.n	4d56 <ackReqDataConfcb+0x4a>
    4d46:	0029      	movs	r1, r5
    4d48:	0030      	movs	r0, r6
    4d4a:	47c8      	blx	r9
    4d4c:	3401      	adds	r4, #1
    4d4e:	7a33      	ldrb	r3, [r6, #8]
    4d50:	b2e4      	uxtb	r4, r4
    4d52:	42a3      	cmp	r3, r4
    4d54:	d924      	bls.n	4da0 <ackReqDataConfcb+0x94>
    4d56:	2100      	movs	r1, #0
    4d58:	0030      	movs	r0, r6
    4d5a:	47b8      	blx	r7
    4d5c:	1e05      	subs	r5, r0, #0
    4d5e:	d01f      	beq.n	4da0 <ackReqDataConfcb+0x94>
    4d60:	2320      	movs	r3, #32
    4d62:	5cc3      	ldrb	r3, [r0, r3]
    4d64:	4543      	cmp	r3, r8
    4d66:	d1ee      	bne.n	4d46 <ackReqDataConfcb+0x3a>
    4d68:	7c80      	ldrb	r0, [r0, #18]
    4d6a:	4550      	cmp	r0, sl
    4d6c:	d1eb      	bne.n	4d46 <ackReqDataConfcb+0x3a>
    4d6e:	9b01      	ldr	r3, [sp, #4]
    4d70:	2b00      	cmp	r3, #0
    4d72:	d02a      	beq.n	4dca <ackReqDataConfcb+0xbe>
    4d74:	7c6b      	ldrb	r3, [r5, #17]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d019      	beq.n	4dae <ackReqDataConfcb+0xa2>
    4d7a:	3b01      	subs	r3, #1
    4d7c:	b2db      	uxtb	r3, r3
    4d7e:	746b      	strb	r3, [r5, #17]
    4d80:	2b00      	cmp	r3, #0
    4d82:	d114      	bne.n	4dae <ackReqDataConfcb+0xa2>
    4d84:	68ab      	ldr	r3, [r5, #8]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d002      	beq.n	4d90 <ackReqDataConfcb+0x84>
    4d8a:	465a      	mov	r2, fp
    4d8c:	9901      	ldr	r1, [sp, #4]
    4d8e:	4798      	blx	r3
    4d90:	4b16      	ldr	r3, [pc, #88]	; (4dec <ackReqDataConfcb+0xe0>)
    4d92:	0028      	movs	r0, r5
    4d94:	4798      	blx	r3
    4d96:	3401      	adds	r4, #1
    4d98:	7a33      	ldrb	r3, [r6, #8]
    4d9a:	b2e4      	uxtb	r4, r4
    4d9c:	42a3      	cmp	r3, r4
    4d9e:	d8da      	bhi.n	4d56 <ackReqDataConfcb+0x4a>
    4da0:	b003      	add	sp, #12
    4da2:	bc3c      	pop	{r2, r3, r4, r5}
    4da4:	4690      	mov	r8, r2
    4da6:	4699      	mov	r9, r3
    4da8:	46a2      	mov	sl, r4
    4daa:	46ab      	mov	fp, r5
    4dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dae:	4b14      	ldr	r3, [pc, #80]	; (4e00 <ackReqDataConfcb+0xf4>)
    4db0:	781b      	ldrb	r3, [r3, #0]
    4db2:	2b08      	cmp	r3, #8
    4db4:	d0e6      	beq.n	4d84 <ackReqDataConfcb+0x78>
    4db6:	0029      	movs	r1, r5
    4db8:	0030      	movs	r0, r6
    4dba:	4b0f      	ldr	r3, [pc, #60]	; (4df8 <ackReqDataConfcb+0xec>)
    4dbc:	4798      	blx	r3
    4dbe:	89a9      	ldrh	r1, [r5, #12]
    4dc0:	4a10      	ldr	r2, [pc, #64]	; (4e04 <ackReqDataConfcb+0xf8>)
    4dc2:	0028      	movs	r0, r5
    4dc4:	4b10      	ldr	r3, [pc, #64]	; (4e08 <ackReqDataConfcb+0xfc>)
    4dc6:	4798      	blx	r3
    4dc8:	e7c0      	b.n	4d4c <ackReqDataConfcb+0x40>
    4dca:	4b10      	ldr	r3, [pc, #64]	; (4e0c <ackReqDataConfcb+0x100>)
    4dcc:	0029      	movs	r1, r5
    4dce:	681a      	ldr	r2, [r3, #0]
    4dd0:	0030      	movs	r0, r6
    4dd2:	7ad3      	ldrb	r3, [r2, #11]
    4dd4:	3301      	adds	r3, #1
    4dd6:	742b      	strb	r3, [r5, #16]
    4dd8:	7b13      	ldrb	r3, [r2, #12]
    4dda:	746b      	strb	r3, [r5, #17]
    4ddc:	4b06      	ldr	r3, [pc, #24]	; (4df8 <ackReqDataConfcb+0xec>)
    4dde:	4798      	blx	r3
    4de0:	e7b4      	b.n	4d4c <ackReqDataConfcb+0x40>
    4de2:	9801      	ldr	r0, [sp, #4]
    4de4:	4b0a      	ldr	r3, [pc, #40]	; (4e10 <ackReqDataConfcb+0x104>)
    4de6:	4798      	blx	r3
    4de8:	e7a4      	b.n	4d34 <ackReqDataConfcb+0x28>
    4dea:	46c0      	nop			; (mov r8, r8)
    4dec:	000034a9 	.word	0x000034a9
    4df0:	200013d8 	.word	0x200013d8
    4df4:	20001398 	.word	0x20001398
    4df8:	00003589 	.word	0x00003589
    4dfc:	000035c1 	.word	0x000035c1
    4e00:	20000360 	.word	0x20000360
    4e04:	00004d0d 	.word	0x00004d0d
    4e08:	000068a9 	.word	0x000068a9
    4e0c:	20001390 	.word	0x20001390
    4e10:	00007495 	.word	0x00007495

00004e14 <nonAckDataCallback>:
    4e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e16:	46c6      	mov	lr, r8
    4e18:	4e15      	ldr	r6, [pc, #84]	; (4e70 <nonAckDataCallback+0x5c>)
    4e1a:	b500      	push	{lr}
    4e1c:	4680      	mov	r8, r0
    4e1e:	0010      	movs	r0, r2
    4e20:	0015      	movs	r5, r2
    4e22:	000f      	movs	r7, r1
    4e24:	47b0      	blx	r6
    4e26:	4b13      	ldr	r3, [pc, #76]	; (4e74 <nonAckDataCallback+0x60>)
    4e28:	2100      	movs	r1, #0
    4e2a:	4813      	ldr	r0, [pc, #76]	; (4e78 <nonAckDataCallback+0x64>)
    4e2c:	4798      	blx	r3
    4e2e:	22ff      	movs	r2, #255	; 0xff
    4e30:	4b12      	ldr	r3, [pc, #72]	; (4e7c <nonAckDataCallback+0x68>)
    4e32:	0004      	movs	r4, r0
    4e34:	881b      	ldrh	r3, [r3, #0]
    4e36:	421a      	tst	r2, r3
    4e38:	d110      	bne.n	4e5c <nonAckDataCallback+0x48>
    4e3a:	2c00      	cmp	r4, #0
    4e3c:	d013      	beq.n	4e66 <nonAckDataCallback+0x52>
    4e3e:	68a3      	ldr	r3, [r4, #8]
    4e40:	2b00      	cmp	r3, #0
    4e42:	d003      	beq.n	4e4c <nonAckDataCallback+0x38>
    4e44:	002a      	movs	r2, r5
    4e46:	0039      	movs	r1, r7
    4e48:	4640      	mov	r0, r8
    4e4a:	4798      	blx	r3
    4e4c:	7d23      	ldrb	r3, [r4, #20]
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d101      	bne.n	4e56 <nonAckDataCallback+0x42>
    4e52:	0020      	movs	r0, r4
    4e54:	47b0      	blx	r6
    4e56:	bc04      	pop	{r2}
    4e58:	4690      	mov	r8, r2
    4e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e5c:	0038      	movs	r0, r7
    4e5e:	4b08      	ldr	r3, [pc, #32]	; (4e80 <nonAckDataCallback+0x6c>)
    4e60:	4798      	blx	r3
    4e62:	2c00      	cmp	r4, #0
    4e64:	d1eb      	bne.n	4e3e <nonAckDataCallback+0x2a>
    4e66:	4b07      	ldr	r3, [pc, #28]	; (4e84 <nonAckDataCallback+0x70>)
    4e68:	781b      	ldrb	r3, [r3, #0]
    4e6a:	2b08      	cmp	r3, #8
    4e6c:	d1f3      	bne.n	4e56 <nonAckDataCallback+0x42>
    4e6e:	e7e6      	b.n	4e3e <nonAckDataCallback+0x2a>
    4e70:	000034a9 	.word	0x000034a9
    4e74:	000035c1 	.word	0x000035c1
    4e78:	20001384 	.word	0x20001384
    4e7c:	200013d8 	.word	0x200013d8
    4e80:	00007495 	.word	0x00007495
    4e84:	20000360 	.word	0x20000360

00004e88 <MiApp_ProtocolInit>:
    4e88:	b570      	push	{r4, r5, r6, lr}
    4e8a:	4b20      	ldr	r3, [pc, #128]	; (4f0c <MiApp_ProtocolInit+0x84>)
    4e8c:	b084      	sub	sp, #16
    4e8e:	6018      	str	r0, [r3, #0]
    4e90:	4b1f      	ldr	r3, [pc, #124]	; (4f10 <MiApp_ProtocolInit+0x88>)
    4e92:	2501      	movs	r5, #1
    4e94:	6019      	str	r1, [r3, #0]
    4e96:	4b1f      	ldr	r3, [pc, #124]	; (4f14 <MiApp_ProtocolInit+0x8c>)
    4e98:	4798      	blx	r3
    4e9a:	2102      	movs	r1, #2
    4e9c:	4c1e      	ldr	r4, [pc, #120]	; (4f18 <MiApp_ProtocolInit+0x90>)
    4e9e:	4b1f      	ldr	r3, [pc, #124]	; (4f1c <MiApp_ProtocolInit+0x94>)
    4ea0:	aa02      	add	r2, sp, #8
    4ea2:	8023      	strh	r3, [r4, #0]
    4ea4:	7813      	ldrb	r3, [r2, #0]
    4ea6:	2601      	movs	r6, #1
    4ea8:	430b      	orrs	r3, r1
    4eaa:	2187      	movs	r1, #135	; 0x87
    4eac:	400b      	ands	r3, r1
    4eae:	2140      	movs	r1, #64	; 0x40
    4eb0:	430b      	orrs	r3, r1
    4eb2:	21c3      	movs	r1, #195	; 0xc3
    4eb4:	400b      	ands	r3, r1
    4eb6:	43ab      	bics	r3, r5
    4eb8:	7013      	strb	r3, [r2, #0]
    4eba:	4919      	ldr	r1, [pc, #100]	; (4f20 <MiApp_ProtocolInit+0x98>)
    4ebc:	9802      	ldr	r0, [sp, #8]
    4ebe:	4b19      	ldr	r3, [pc, #100]	; (4f24 <MiApp_ProtocolInit+0x9c>)
    4ec0:	4798      	blx	r3
    4ec2:	4b19      	ldr	r3, [pc, #100]	; (4f28 <MiApp_ProtocolInit+0xa0>)
    4ec4:	4798      	blx	r3
    4ec6:	466b      	mov	r3, sp
    4ec8:	4276      	negs	r6, r6
    4eca:	1d98      	adds	r0, r3, #6
    4ecc:	0021      	movs	r1, r4
    4ece:	4b17      	ldr	r3, [pc, #92]	; (4f2c <MiApp_ProtocolInit+0xa4>)
    4ed0:	8006      	strh	r6, [r0, #0]
    4ed2:	4798      	blx	r3
    4ed4:	4916      	ldr	r1, [pc, #88]	; (4f30 <MiApp_ProtocolInit+0xa8>)
    4ed6:	4b17      	ldr	r3, [pc, #92]	; (4f34 <MiApp_ProtocolInit+0xac>)
    4ed8:	2000      	movs	r0, #0
    4eda:	4798      	blx	r3
    4edc:	4b16      	ldr	r3, [pc, #88]	; (4f38 <MiApp_ProtocolInit+0xb0>)
    4ede:	4c17      	ldr	r4, [pc, #92]	; (4f3c <MiApp_ProtocolInit+0xb4>)
    4ee0:	701d      	strb	r5, [r3, #0]
    4ee2:	4b17      	ldr	r3, [pc, #92]	; (4f40 <MiApp_ProtocolInit+0xb8>)
    4ee4:	4817      	ldr	r0, [pc, #92]	; (4f44 <MiApp_ProtocolInit+0xbc>)
    4ee6:	801e      	strh	r6, [r3, #0]
    4ee8:	47a0      	blx	r4
    4eea:	4817      	ldr	r0, [pc, #92]	; (4f48 <MiApp_ProtocolInit+0xc0>)
    4eec:	47a0      	blx	r4
    4eee:	4817      	ldr	r0, [pc, #92]	; (4f4c <MiApp_ProtocolInit+0xc4>)
    4ef0:	47a0      	blx	r4
    4ef2:	23fa      	movs	r3, #250	; 0xfa
    4ef4:	4816      	ldr	r0, [pc, #88]	; (4f50 <MiApp_ProtocolInit+0xc8>)
    4ef6:	009b      	lsls	r3, r3, #2
    4ef8:	6083      	str	r3, [r0, #8]
    4efa:	4b16      	ldr	r3, [pc, #88]	; (4f54 <MiApp_ProtocolInit+0xcc>)
    4efc:	7305      	strb	r5, [r0, #12]
    4efe:	6103      	str	r3, [r0, #16]
    4f00:	4b15      	ldr	r3, [pc, #84]	; (4f58 <MiApp_ProtocolInit+0xd0>)
    4f02:	4798      	blx	r3
    4f04:	2001      	movs	r0, #1
    4f06:	b004      	add	sp, #16
    4f08:	bd70      	pop	{r4, r5, r6, pc}
    4f0a:	46c0      	nop			; (mov r8, r8)
    4f0c:	20001390 	.word	0x20001390
    4f10:	20001394 	.word	0x20001394
    4f14:	00003649 	.word	0x00003649
    4f18:	200013c4 	.word	0x200013c4
    4f1c:	00001234 	.word	0x00001234
    4f20:	2000004c 	.word	0x2000004c
    4f24:	0000262d 	.word	0x0000262d
    4f28:	00003041 	.word	0x00003041
    4f2c:	000025cd 	.word	0x000025cd
    4f30:	200013a4 	.word	0x200013a4
    4f34:	00002605 	.word	0x00002605
    4f38:	20000360 	.word	0x20000360
    4f3c:	0000357d 	.word	0x0000357d
    4f40:	200013d8 	.word	0x200013d8
    4f44:	20001398 	.word	0x20001398
    4f48:	20001384 	.word	0x20001384
    4f4c:	200013cc 	.word	0x200013cc
    4f50:	20000364 	.word	0x20000364
    4f54:	00004c61 	.word	0x00004c61
    4f58:	000036f1 	.word	0x000036f1

00004f5c <MiApp_Set>:
    4f5c:	b530      	push	{r4, r5, lr}
    4f5e:	000c      	movs	r4, r1
    4f60:	b083      	sub	sp, #12
    4f62:	2802      	cmp	r0, #2
    4f64:	d015      	beq.n	4f92 <MiApp_Set+0x36>
    4f66:	2880      	cmp	r0, #128	; 0x80
    4f68:	d00c      	beq.n	4f84 <MiApp_Set+0x28>
    4f6a:	2800      	cmp	r0, #0
    4f6c:	d002      	beq.n	4f74 <MiApp_Set+0x18>
    4f6e:	2000      	movs	r0, #0
    4f70:	b003      	add	sp, #12
    4f72:	bd30      	pop	{r4, r5, pc}
    4f74:	4b0e      	ldr	r3, [pc, #56]	; (4fb0 <MiApp_Set+0x54>)
    4f76:	4798      	blx	r3
    4f78:	2800      	cmp	r0, #0
    4f7a:	d0f9      	beq.n	4f70 <MiApp_Set+0x14>
    4f7c:	7822      	ldrb	r2, [r4, #0]
    4f7e:	4b0d      	ldr	r3, [pc, #52]	; (4fb4 <MiApp_Set+0x58>)
    4f80:	701a      	strb	r2, [r3, #0]
    4f82:	e7f5      	b.n	4f70 <MiApp_Set+0x14>
    4f84:	780b      	ldrb	r3, [r1, #0]
    4f86:	2001      	movs	r0, #1
    4f88:	1e5a      	subs	r2, r3, #1
    4f8a:	4193      	sbcs	r3, r2
    4f8c:	4a0a      	ldr	r2, [pc, #40]	; (4fb8 <MiApp_Set+0x5c>)
    4f8e:	7013      	strb	r3, [r2, #0]
    4f90:	e7ee      	b.n	4f70 <MiApp_Set+0x14>
    4f92:	780b      	ldrb	r3, [r1, #0]
    4f94:	ad01      	add	r5, sp, #4
    4f96:	702b      	strb	r3, [r5, #0]
    4f98:	784b      	ldrb	r3, [r1, #1]
    4f9a:	0028      	movs	r0, r5
    4f9c:	706b      	strb	r3, [r5, #1]
    4f9e:	4907      	ldr	r1, [pc, #28]	; (4fbc <MiApp_Set+0x60>)
    4fa0:	4b07      	ldr	r3, [pc, #28]	; (4fc0 <MiApp_Set+0x64>)
    4fa2:	4798      	blx	r3
    4fa4:	2800      	cmp	r0, #0
    4fa6:	d0e3      	beq.n	4f70 <MiApp_Set+0x14>
    4fa8:	882a      	ldrh	r2, [r5, #0]
    4faa:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <MiApp_Set+0x68>)
    4fac:	801a      	strh	r2, [r3, #0]
    4fae:	e7df      	b.n	4f70 <MiApp_Set+0x14>
    4fb0:	00002605 	.word	0x00002605
    4fb4:	200013a4 	.word	0x200013a4
    4fb8:	2000004b 	.word	0x2000004b
    4fbc:	200013c4 	.word	0x200013c4
    4fc0:	000025cd 	.word	0x000025cd
    4fc4:	200013d8 	.word	0x200013d8

00004fc8 <MeshTasks>:
    4fc8:	b570      	push	{r4, r5, r6, lr}
    4fca:	4b19      	ldr	r3, [pc, #100]	; (5030 <MeshTasks+0x68>)
    4fcc:	b084      	sub	sp, #16
    4fce:	4798      	blx	r3
    4fd0:	4818      	ldr	r0, [pc, #96]	; (5034 <MeshTasks+0x6c>)
    4fd2:	7a03      	ldrb	r3, [r0, #8]
    4fd4:	2b00      	cmp	r3, #0
    4fd6:	d003      	beq.n	4fe0 <MeshTasks+0x18>
    4fd8:	4c17      	ldr	r4, [pc, #92]	; (5038 <MeshTasks+0x70>)
    4fda:	7823      	ldrb	r3, [r4, #0]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d10c      	bne.n	4ffa <MeshTasks+0x32>
    4fe0:	4b16      	ldr	r3, [pc, #88]	; (503c <MeshTasks+0x74>)
    4fe2:	4798      	blx	r3
    4fe4:	2800      	cmp	r0, #0
    4fe6:	d004      	beq.n	4ff2 <MeshTasks+0x2a>
    4fe8:	4b15      	ldr	r3, [pc, #84]	; (5040 <MeshTasks+0x78>)
    4fea:	4816      	ldr	r0, [pc, #88]	; (5044 <MeshTasks+0x7c>)
    4fec:	4798      	blx	r3
    4fee:	4b16      	ldr	r3, [pc, #88]	; (5048 <MeshTasks+0x80>)
    4ff0:	4798      	blx	r3
    4ff2:	4b16      	ldr	r3, [pc, #88]	; (504c <MeshTasks+0x84>)
    4ff4:	4798      	blx	r3
    4ff6:	b004      	add	sp, #16
    4ff8:	bd70      	pop	{r4, r5, r6, pc}
    4ffa:	4b15      	ldr	r3, [pc, #84]	; (5050 <MeshTasks+0x88>)
    4ffc:	781d      	ldrb	r5, [r3, #0]
    4ffe:	2d00      	cmp	r5, #0
    5000:	d1ee      	bne.n	4fe0 <MeshTasks+0x18>
    5002:	2100      	movs	r1, #0
    5004:	4b13      	ldr	r3, [pc, #76]	; (5054 <MeshTasks+0x8c>)
    5006:	4798      	blx	r3
    5008:	1e02      	subs	r2, r0, #0
    500a:	d0e9      	beq.n	4fe0 <MeshTasks+0x18>
    500c:	4b12      	ldr	r3, [pc, #72]	; (5058 <MeshTasks+0x90>)
    500e:	4913      	ldr	r1, [pc, #76]	; (505c <MeshTasks+0x94>)
    5010:	6018      	str	r0, [r3, #0]
    5012:	6943      	ldr	r3, [r0, #20]
    5014:	9102      	str	r1, [sp, #8]
    5016:	2125      	movs	r1, #37	; 0x25
    5018:	5c41      	ldrb	r1, [r0, r1]
    501a:	4e11      	ldr	r6, [pc, #68]	; (5060 <MeshTasks+0x98>)
    501c:	9101      	str	r1, [sp, #4]
    501e:	2124      	movs	r1, #36	; 0x24
    5020:	5c41      	ldrb	r1, [r0, r1]
    5022:	9100      	str	r1, [sp, #0]
    5024:	69d1      	ldr	r1, [r2, #28]
    5026:	6980      	ldr	r0, [r0, #24]
    5028:	6a12      	ldr	r2, [r2, #32]
    502a:	47b0      	blx	r6
    502c:	7025      	strb	r5, [r4, #0]
    502e:	e7d7      	b.n	4fe0 <MeshTasks+0x18>
    5030:	00002cd9 	.word	0x00002cd9
    5034:	200013cc 	.word	0x200013cc
    5038:	2000004a 	.word	0x2000004a
    503c:	00002915 	.word	0x00002915
    5040:	0000649d 	.word	0x0000649d
    5044:	200013b0 	.word	0x200013b0
    5048:	000028f9 	.word	0x000028f9
    504c:	00003711 	.word	0x00003711
    5050:	2000037c 	.word	0x2000037c
    5054:	000035c1 	.word	0x000035c1
    5058:	200013a8 	.word	0x200013a8
    505c:	00004c31 	.word	0x00004c31
    5060:	00002699 	.word	0x00002699

00005064 <MiApp_SendData>:
    5064:	b5f0      	push	{r4, r5, r6, r7, lr}
    5066:	4657      	mov	r7, sl
    5068:	464e      	mov	r6, r9
    506a:	4645      	mov	r5, r8
    506c:	46de      	mov	lr, fp
    506e:	b5e0      	push	{r5, r6, r7, lr}
    5070:	b083      	sub	sp, #12
    5072:	001e      	movs	r6, r3
    5074:	ab0c      	add	r3, sp, #48	; 0x30
    5076:	781f      	ldrb	r7, [r3, #0]
    5078:	ab0d      	add	r3, sp, #52	; 0x34
    507a:	781c      	ldrb	r4, [r3, #0]
    507c:	4b3d      	ldr	r3, [pc, #244]	; (5174 <MiApp_SendData+0x110>)
    507e:	0015      	movs	r5, r2
    5080:	781b      	ldrb	r3, [r3, #0]
    5082:	3b06      	subs	r3, #6
    5084:	2b01      	cmp	r3, #1
    5086:	d907      	bls.n	5098 <MiApp_SendData+0x34>
    5088:	2000      	movs	r0, #0
    508a:	b003      	add	sp, #12
    508c:	bc3c      	pop	{r2, r3, r4, r5}
    508e:	4690      	mov	r8, r2
    5090:	4699      	mov	r9, r3
    5092:	46a2      	mov	sl, r4
    5094:	46ab      	mov	fp, r5
    5096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5098:	2802      	cmp	r0, #2
    509a:	d1f5      	bne.n	5088 <MiApp_SendData+0x24>
    509c:	784b      	ldrb	r3, [r1, #1]
    509e:	780a      	ldrb	r2, [r1, #0]
    50a0:	021b      	lsls	r3, r3, #8
    50a2:	431a      	orrs	r2, r3
    50a4:	308e      	adds	r0, #142	; 0x8e
    50a6:	4b34      	ldr	r3, [pc, #208]	; (5178 <MiApp_SendData+0x114>)
    50a8:	4691      	mov	r9, r2
    50aa:	4798      	blx	r3
    50ac:	4680      	mov	r8, r0
    50ae:	2800      	cmp	r0, #0
    50b0:	d0ea      	beq.n	5088 <MiApp_SendData+0x24>
    50b2:	2203      	movs	r2, #3
    50b4:	7e43      	ldrb	r3, [r0, #25]
    50b6:	2110      	movs	r1, #16
    50b8:	4393      	bics	r3, r2
    50ba:	7643      	strb	r3, [r0, #25]
    50bc:	466a      	mov	r2, sp
    50be:	464b      	mov	r3, r9
    50c0:	80d3      	strh	r3, [r2, #6]
    50c2:	88d3      	ldrh	r3, [r2, #6]
    50c4:	468b      	mov	fp, r1
    50c6:	4699      	mov	r9, r3
    50c8:	4b2c      	ldr	r3, [pc, #176]	; (517c <MiApp_SendData+0x118>)
    50ca:	464a      	mov	r2, r9
    50cc:	469a      	mov	sl, r3
    50ce:	881b      	ldrh	r3, [r3, #0]
    50d0:	8382      	strh	r2, [r0, #28]
    50d2:	83c3      	strh	r3, [r0, #30]
    50d4:	2301      	movs	r3, #1
    50d6:	4023      	ands	r3, r4
    50d8:	011a      	lsls	r2, r3, #4
    50da:	7e43      	ldrb	r3, [r0, #25]
    50dc:	438b      	bics	r3, r1
    50de:	4313      	orrs	r3, r2
    50e0:	7643      	strb	r3, [r0, #25]
    50e2:	2338      	movs	r3, #56	; 0x38
    50e4:	54c5      	strb	r5, [r0, r3]
    50e6:	2300      	movs	r3, #0
    50e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    50ea:	74c3      	strb	r3, [r0, #19]
    50ec:	7503      	strb	r3, [r0, #20]
    50ee:	6082      	str	r2, [r0, #8]
    50f0:	7487      	strb	r7, [r0, #18]
    50f2:	4b23      	ldr	r3, [pc, #140]	; (5180 <MiApp_SendData+0x11c>)
    50f4:	002a      	movs	r2, r5
    50f6:	0031      	movs	r1, r6
    50f8:	3039      	adds	r0, #57	; 0x39
    50fa:	4798      	blx	r3
    50fc:	4b21      	ldr	r3, [pc, #132]	; (5184 <MiApp_SendData+0x120>)
    50fe:	4599      	cmp	r9, r3
    5100:	d814      	bhi.n	512c <MiApp_SendData+0xc8>
    5102:	4653      	mov	r3, sl
    5104:	22ff      	movs	r2, #255	; 0xff
    5106:	881b      	ldrh	r3, [r3, #0]
    5108:	4393      	bics	r3, r2
    510a:	4642      	mov	r2, r8
    510c:	8193      	strh	r3, [r2, #12]
    510e:	2c00      	cmp	r4, #0
    5110:	d11d      	bne.n	514e <MiApp_SendData+0xea>
    5112:	7454      	strb	r4, [r2, #17]
    5114:	4641      	mov	r1, r8
    5116:	481c      	ldr	r0, [pc, #112]	; (5188 <MiApp_SendData+0x124>)
    5118:	4b1c      	ldr	r3, [pc, #112]	; (518c <MiApp_SendData+0x128>)
    511a:	4798      	blx	r3
    511c:	4643      	mov	r3, r8
    511e:	4a1c      	ldr	r2, [pc, #112]	; (5190 <MiApp_SendData+0x12c>)
    5120:	8999      	ldrh	r1, [r3, #12]
    5122:	4640      	mov	r0, r8
    5124:	4b1b      	ldr	r3, [pc, #108]	; (5194 <MiApp_SendData+0x130>)
    5126:	4798      	blx	r3
    5128:	2001      	movs	r0, #1
    512a:	e7ae      	b.n	508a <MiApp_SendData+0x26>
    512c:	4643      	mov	r3, r8
    512e:	465a      	mov	r2, fp
    5130:	7e5b      	ldrb	r3, [r3, #25]
    5132:	4641      	mov	r1, r8
    5134:	4393      	bics	r3, r2
    5136:	4642      	mov	r2, r8
    5138:	4813      	ldr	r0, [pc, #76]	; (5188 <MiApp_SendData+0x124>)
    513a:	7653      	strb	r3, [r2, #25]
    513c:	4b13      	ldr	r3, [pc, #76]	; (518c <MiApp_SendData+0x128>)
    513e:	4798      	blx	r3
    5140:	4a13      	ldr	r2, [pc, #76]	; (5190 <MiApp_SendData+0x12c>)
    5142:	4915      	ldr	r1, [pc, #84]	; (5198 <MiApp_SendData+0x134>)
    5144:	4640      	mov	r0, r8
    5146:	4b13      	ldr	r3, [pc, #76]	; (5194 <MiApp_SendData+0x130>)
    5148:	4798      	blx	r3
    514a:	2001      	movs	r0, #1
    514c:	e79d      	b.n	508a <MiApp_SendData+0x26>
    514e:	4641      	mov	r1, r8
    5150:	4b12      	ldr	r3, [pc, #72]	; (519c <MiApp_SendData+0x138>)
    5152:	4813      	ldr	r0, [pc, #76]	; (51a0 <MiApp_SendData+0x13c>)
    5154:	681a      	ldr	r2, [r3, #0]
    5156:	7ad3      	ldrb	r3, [r2, #11]
    5158:	3301      	adds	r3, #1
    515a:	740b      	strb	r3, [r1, #16]
    515c:	7b13      	ldrb	r3, [r2, #12]
    515e:	744b      	strb	r3, [r1, #17]
    5160:	4b0a      	ldr	r3, [pc, #40]	; (518c <MiApp_SendData+0x128>)
    5162:	4798      	blx	r3
    5164:	4643      	mov	r3, r8
    5166:	4a0f      	ldr	r2, [pc, #60]	; (51a4 <MiApp_SendData+0x140>)
    5168:	8999      	ldrh	r1, [r3, #12]
    516a:	4640      	mov	r0, r8
    516c:	4b09      	ldr	r3, [pc, #36]	; (5194 <MiApp_SendData+0x130>)
    516e:	4798      	blx	r3
    5170:	0020      	movs	r0, r4
    5172:	e78a      	b.n	508a <MiApp_SendData+0x26>
    5174:	20000360 	.word	0x20000360
    5178:	00003461 	.word	0x00003461
    517c:	200013d8 	.word	0x200013d8
    5180:	00007a7f 	.word	0x00007a7f
    5184:	0000fffc 	.word	0x0000fffc
    5188:	20001384 	.word	0x20001384
    518c:	00003589 	.word	0x00003589
    5190:	00004e15 	.word	0x00004e15
    5194:	000068a9 	.word	0x000068a9
    5198:	0000ffff 	.word	0x0000ffff
    519c:	20001390 	.word	0x20001390
    51a0:	20001398 	.word	0x20001398
    51a4:	00004d0d 	.word	0x00004d0d

000051a8 <MiApp_Get>:
    51a8:	2801      	cmp	r0, #1
    51aa:	d016      	beq.n	51da <MiApp_Get+0x32>
    51ac:	2800      	cmp	r0, #0
    51ae:	d00f      	beq.n	51d0 <MiApp_Get+0x28>
    51b0:	2802      	cmp	r0, #2
    51b2:	d009      	beq.n	51c8 <MiApp_Get+0x20>
    51b4:	2803      	cmp	r0, #3
    51b6:	d109      	bne.n	51cc <MiApp_Get+0x24>
    51b8:	4b09      	ldr	r3, [pc, #36]	; (51e0 <MiApp_Get+0x38>)
    51ba:	2001      	movs	r0, #1
    51bc:	881a      	ldrh	r2, [r3, #0]
    51be:	700a      	strb	r2, [r1, #0]
    51c0:	881b      	ldrh	r3, [r3, #0]
    51c2:	0a1b      	lsrs	r3, r3, #8
    51c4:	704b      	strb	r3, [r1, #1]
    51c6:	4770      	bx	lr
    51c8:	4b06      	ldr	r3, [pc, #24]	; (51e4 <MiApp_Get+0x3c>)
    51ca:	e7f6      	b.n	51ba <MiApp_Get+0x12>
    51cc:	2000      	movs	r0, #0
    51ce:	e7fa      	b.n	51c6 <MiApp_Get+0x1e>
    51d0:	4b05      	ldr	r3, [pc, #20]	; (51e8 <MiApp_Get+0x40>)
    51d2:	2001      	movs	r0, #1
    51d4:	781b      	ldrb	r3, [r3, #0]
    51d6:	700b      	strb	r3, [r1, #0]
    51d8:	e7f5      	b.n	51c6 <MiApp_Get+0x1e>
    51da:	4b04      	ldr	r3, [pc, #16]	; (51ec <MiApp_Get+0x44>)
    51dc:	e7ed      	b.n	51ba <MiApp_Get+0x12>
    51de:	46c0      	nop			; (mov r8, r8)
    51e0:	20000054 	.word	0x20000054
    51e4:	200013d8 	.word	0x200013d8
    51e8:	200013a4 	.word	0x200013a4
    51ec:	200013c4 	.word	0x200013c4

000051f0 <MiApp_MeshGetNextHopAddr>:
    51f0:	4b02      	ldr	r3, [pc, #8]	; (51fc <MiApp_MeshGetNextHopAddr+0xc>)
    51f2:	8818      	ldrh	r0, [r3, #0]
    51f4:	23ff      	movs	r3, #255	; 0xff
    51f6:	4398      	bics	r0, r3
    51f8:	4770      	bx	lr
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	200013d8 	.word	0x200013d8

00005200 <bloomFilterAddressCheck>:
    5200:	b5f0      	push	{r4, r5, r6, r7, lr}
    5202:	464e      	mov	r6, r9
    5204:	46de      	mov	lr, fp
    5206:	4657      	mov	r7, sl
    5208:	4645      	mov	r5, r8
    520a:	b5e0      	push	{r5, r6, r7, lr}
    520c:	4bf5      	ldr	r3, [pc, #980]	; (55e4 <bloomFilterAddressCheck+0x3e4>)
    520e:	b087      	sub	sp, #28
    5210:	781b      	ldrb	r3, [r3, #0]
    5212:	9003      	str	r0, [sp, #12]
    5214:	000e      	movs	r6, r1
    5216:	9300      	str	r3, [sp, #0]
    5218:	2b00      	cmp	r3, #0
    521a:	d001      	beq.n	5220 <bloomFilterAddressCheck+0x20>
    521c:	f000 fe65 	bl	5eea <bloomFilterAddressCheck+0xcea>
    5220:	7811      	ldrb	r1, [r2, #0]
    5222:	020b      	lsls	r3, r1, #8
    5224:	0249      	lsls	r1, r1, #9
    5226:	b209      	sxth	r1, r1
    5228:	b218      	sxth	r0, r3
    522a:	468c      	mov	ip, r1
    522c:	4680      	mov	r8, r0
    522e:	4660      	mov	r0, ip
    5230:	4644      	mov	r4, r8
    5232:	49ed      	ldr	r1, [pc, #948]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5234:	005b      	lsls	r3, r3, #1
    5236:	4041      	eors	r1, r0
    5238:	b29b      	uxth	r3, r3
    523a:	b289      	uxth	r1, r1
    523c:	9304      	str	r3, [sp, #16]
    523e:	1c18      	adds	r0, r3, #0
    5240:	2c00      	cmp	r4, #0
    5242:	da01      	bge.n	5248 <bloomFilterAddressCheck+0x48>
    5244:	f000 fe5b 	bl	5efe <bloomFilterAddressCheck+0xcfe>
    5248:	b284      	uxth	r4, r0
    524a:	49e7      	ldr	r1, [pc, #924]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    524c:	0064      	lsls	r4, r4, #1
    524e:	4061      	eors	r1, r4
    5250:	b209      	sxth	r1, r1
    5252:	b289      	uxth	r1, r1
    5254:	0044      	lsls	r4, r0, #1
    5256:	0403      	lsls	r3, r0, #16
    5258:	d501      	bpl.n	525e <bloomFilterAddressCheck+0x5e>
    525a:	f000 fe53 	bl	5f04 <bloomFilterAddressCheck+0xd04>
    525e:	b2a0      	uxth	r0, r4
    5260:	49e1      	ldr	r1, [pc, #900]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5262:	0040      	lsls	r0, r0, #1
    5264:	4041      	eors	r1, r0
    5266:	b289      	uxth	r1, r1
    5268:	0060      	lsls	r0, r4, #1
    526a:	0423      	lsls	r3, r4, #16
    526c:	d501      	bpl.n	5272 <bloomFilterAddressCheck+0x72>
    526e:	f000 fe54 	bl	5f1a <bloomFilterAddressCheck+0xd1a>
    5272:	b284      	uxth	r4, r0
    5274:	49dc      	ldr	r1, [pc, #880]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5276:	0064      	lsls	r4, r4, #1
    5278:	4061      	eors	r1, r4
    527a:	b289      	uxth	r1, r1
    527c:	0044      	lsls	r4, r0, #1
    527e:	0403      	lsls	r3, r0, #16
    5280:	d501      	bpl.n	5286 <bloomFilterAddressCheck+0x86>
    5282:	f000 fe55 	bl	5f30 <bloomFilterAddressCheck+0xd30>
    5286:	b2a0      	uxth	r0, r4
    5288:	49d7      	ldr	r1, [pc, #860]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    528a:	0040      	lsls	r0, r0, #1
    528c:	4041      	eors	r1, r0
    528e:	b289      	uxth	r1, r1
    5290:	0060      	lsls	r0, r4, #1
    5292:	0423      	lsls	r3, r4, #16
    5294:	d501      	bpl.n	529a <bloomFilterAddressCheck+0x9a>
    5296:	f000 fe56 	bl	5f46 <bloomFilterAddressCheck+0xd46>
    529a:	b284      	uxth	r4, r0
    529c:	49d2      	ldr	r1, [pc, #840]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    529e:	0064      	lsls	r4, r4, #1
    52a0:	4061      	eors	r1, r4
    52a2:	b289      	uxth	r1, r1
    52a4:	0044      	lsls	r4, r0, #1
    52a6:	0403      	lsls	r3, r0, #16
    52a8:	d501      	bpl.n	52ae <bloomFilterAddressCheck+0xae>
    52aa:	f000 fe57 	bl	5f5c <bloomFilterAddressCheck+0xd5c>
    52ae:	b2a0      	uxth	r0, r4
    52b0:	49cd      	ldr	r1, [pc, #820]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    52b2:	0040      	lsls	r0, r0, #1
    52b4:	4041      	eors	r1, r0
    52b6:	b289      	uxth	r1, r1
    52b8:	0060      	lsls	r0, r4, #1
    52ba:	0423      	lsls	r3, r4, #16
    52bc:	d501      	bpl.n	52c2 <bloomFilterAddressCheck+0xc2>
    52be:	f000 fe58 	bl	5f72 <bloomFilterAddressCheck+0xd72>
    52c2:	b284      	uxth	r4, r0
    52c4:	49c8      	ldr	r1, [pc, #800]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    52c6:	0064      	lsls	r4, r4, #1
    52c8:	4061      	eors	r1, r4
    52ca:	2401      	movs	r4, #1
    52cc:	5714      	ldrsb	r4, [r2, r4]
    52ce:	b289      	uxth	r1, r1
    52d0:	0224      	lsls	r4, r4, #8
    52d2:	0045      	lsls	r5, r0, #1
    52d4:	0403      	lsls	r3, r0, #16
    52d6:	d501      	bpl.n	52dc <bloomFilterAddressCheck+0xdc>
    52d8:	f000 fe4e 	bl	5f78 <bloomFilterAddressCheck+0xd78>
    52dc:	4065      	eors	r5, r4
    52de:	b22d      	sxth	r5, r5
    52e0:	b2a9      	uxth	r1, r5
    52e2:	48c1      	ldr	r0, [pc, #772]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    52e4:	0049      	lsls	r1, r1, #1
    52e6:	4048      	eors	r0, r1
    52e8:	b280      	uxth	r0, r0
    52ea:	2d00      	cmp	r5, #0
    52ec:	da01      	bge.n	52f2 <bloomFilterAddressCheck+0xf2>
    52ee:	f000 fe46 	bl	5f7e <bloomFilterAddressCheck+0xd7e>
    52f2:	48bd      	ldr	r0, [pc, #756]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    52f4:	b28d      	uxth	r5, r1
    52f6:	006d      	lsls	r5, r5, #1
    52f8:	4045      	eors	r5, r0
    52fa:	b2ad      	uxth	r5, r5
    52fc:	0048      	lsls	r0, r1, #1
    52fe:	040b      	lsls	r3, r1, #16
    5300:	d501      	bpl.n	5306 <bloomFilterAddressCheck+0x106>
    5302:	f000 fe47 	bl	5f94 <bloomFilterAddressCheck+0xd94>
    5306:	b285      	uxth	r5, r0
    5308:	49b7      	ldr	r1, [pc, #732]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    530a:	006d      	lsls	r5, r5, #1
    530c:	4069      	eors	r1, r5
    530e:	b289      	uxth	r1, r1
    5310:	0045      	lsls	r5, r0, #1
    5312:	0403      	lsls	r3, r0, #16
    5314:	d501      	bpl.n	531a <bloomFilterAddressCheck+0x11a>
    5316:	f000 fe48 	bl	5faa <bloomFilterAddressCheck+0xdaa>
    531a:	b2a8      	uxth	r0, r5
    531c:	49b2      	ldr	r1, [pc, #712]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    531e:	0040      	lsls	r0, r0, #1
    5320:	4041      	eors	r1, r0
    5322:	b289      	uxth	r1, r1
    5324:	0068      	lsls	r0, r5, #1
    5326:	042b      	lsls	r3, r5, #16
    5328:	d501      	bpl.n	532e <bloomFilterAddressCheck+0x12e>
    532a:	f000 fe49 	bl	5fc0 <bloomFilterAddressCheck+0xdc0>
    532e:	b285      	uxth	r5, r0
    5330:	49ad      	ldr	r1, [pc, #692]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5332:	006d      	lsls	r5, r5, #1
    5334:	4069      	eors	r1, r5
    5336:	b289      	uxth	r1, r1
    5338:	0045      	lsls	r5, r0, #1
    533a:	0403      	lsls	r3, r0, #16
    533c:	d501      	bpl.n	5342 <bloomFilterAddressCheck+0x142>
    533e:	f000 fe4a 	bl	5fd6 <bloomFilterAddressCheck+0xdd6>
    5342:	b2a8      	uxth	r0, r5
    5344:	49a8      	ldr	r1, [pc, #672]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5346:	0040      	lsls	r0, r0, #1
    5348:	4041      	eors	r1, r0
    534a:	b289      	uxth	r1, r1
    534c:	0068      	lsls	r0, r5, #1
    534e:	042b      	lsls	r3, r5, #16
    5350:	d501      	bpl.n	5356 <bloomFilterAddressCheck+0x156>
    5352:	f000 fe4b 	bl	5fec <bloomFilterAddressCheck+0xdec>
    5356:	b285      	uxth	r5, r0
    5358:	49a3      	ldr	r1, [pc, #652]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    535a:	006d      	lsls	r5, r5, #1
    535c:	4069      	eors	r1, r5
    535e:	b289      	uxth	r1, r1
    5360:	0045      	lsls	r5, r0, #1
    5362:	0403      	lsls	r3, r0, #16
    5364:	d501      	bpl.n	536a <bloomFilterAddressCheck+0x16a>
    5366:	f000 fe4c 	bl	6002 <bloomFilterAddressCheck+0xe02>
    536a:	b2a8      	uxth	r0, r5
    536c:	499e      	ldr	r1, [pc, #632]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    536e:	0040      	lsls	r0, r0, #1
    5370:	4041      	eors	r1, r0
    5372:	2002      	movs	r0, #2
    5374:	5610      	ldrsb	r0, [r2, r0]
    5376:	006f      	lsls	r7, r5, #1
    5378:	b289      	uxth	r1, r1
    537a:	0200      	lsls	r0, r0, #8
    537c:	46b9      	mov	r9, r7
    537e:	042b      	lsls	r3, r5, #16
    5380:	d501      	bpl.n	5386 <bloomFilterAddressCheck+0x186>
    5382:	f000 fe41 	bl	6008 <bloomFilterAddressCheck+0xe08>
    5386:	464d      	mov	r5, r9
    5388:	4045      	eors	r5, r0
    538a:	b22d      	sxth	r5, r5
    538c:	b2a9      	uxth	r1, r5
    538e:	0049      	lsls	r1, r1, #1
    5390:	4689      	mov	r9, r1
    5392:	464f      	mov	r7, r9
    5394:	4994      	ldr	r1, [pc, #592]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5396:	4079      	eors	r1, r7
    5398:	b289      	uxth	r1, r1
    539a:	468a      	mov	sl, r1
    539c:	4649      	mov	r1, r9
    539e:	2d00      	cmp	r5, #0
    53a0:	da01      	bge.n	53a6 <bloomFilterAddressCheck+0x1a6>
    53a2:	f000 fe34 	bl	600e <bloomFilterAddressCheck+0xe0e>
    53a6:	b28d      	uxth	r5, r1
    53a8:	006d      	lsls	r5, r5, #1
    53aa:	46a9      	mov	r9, r5
    53ac:	464f      	mov	r7, r9
    53ae:	4d8e      	ldr	r5, [pc, #568]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    53b0:	407d      	eors	r5, r7
    53b2:	b2ad      	uxth	r5, r5
    53b4:	46a9      	mov	r9, r5
    53b6:	004d      	lsls	r5, r1, #1
    53b8:	040b      	lsls	r3, r1, #16
    53ba:	d501      	bpl.n	53c0 <bloomFilterAddressCheck+0x1c0>
    53bc:	f000 fe2a 	bl	6014 <bloomFilterAddressCheck+0xe14>
    53c0:	b2a9      	uxth	r1, r5
    53c2:	0049      	lsls	r1, r1, #1
    53c4:	4689      	mov	r9, r1
    53c6:	464f      	mov	r7, r9
    53c8:	4987      	ldr	r1, [pc, #540]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    53ca:	4079      	eors	r1, r7
    53cc:	006f      	lsls	r7, r5, #1
    53ce:	b289      	uxth	r1, r1
    53d0:	46b9      	mov	r9, r7
    53d2:	042b      	lsls	r3, r5, #16
    53d4:	d501      	bpl.n	53da <bloomFilterAddressCheck+0x1da>
    53d6:	f000 fe20 	bl	601a <bloomFilterAddressCheck+0xe1a>
    53da:	4649      	mov	r1, r9
    53dc:	466b      	mov	r3, sp
    53de:	b28d      	uxth	r5, r1
    53e0:	8099      	strh	r1, [r3, #4]
    53e2:	4981      	ldr	r1, [pc, #516]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    53e4:	006d      	lsls	r5, r5, #1
    53e6:	4069      	eors	r1, r5
    53e8:	464f      	mov	r7, r9
    53ea:	464d      	mov	r5, r9
    53ec:	b289      	uxth	r1, r1
    53ee:	006d      	lsls	r5, r5, #1
    53f0:	043b      	lsls	r3, r7, #16
    53f2:	d501      	bpl.n	53f8 <bloomFilterAddressCheck+0x1f8>
    53f4:	f000 fe14 	bl	6020 <bloomFilterAddressCheck+0xe20>
    53f8:	b2a9      	uxth	r1, r5
    53fa:	0049      	lsls	r1, r1, #1
    53fc:	4689      	mov	r9, r1
    53fe:	464f      	mov	r7, r9
    5400:	4979      	ldr	r1, [pc, #484]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5402:	4079      	eors	r1, r7
    5404:	006f      	lsls	r7, r5, #1
    5406:	b289      	uxth	r1, r1
    5408:	46b9      	mov	r9, r7
    540a:	042b      	lsls	r3, r5, #16
    540c:	d501      	bpl.n	5412 <bloomFilterAddressCheck+0x212>
    540e:	f000 fe0a 	bl	6026 <bloomFilterAddressCheck+0xe26>
    5412:	4649      	mov	r1, r9
    5414:	466b      	mov	r3, sp
    5416:	b28d      	uxth	r5, r1
    5418:	8099      	strh	r1, [r3, #4]
    541a:	4973      	ldr	r1, [pc, #460]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    541c:	006d      	lsls	r5, r5, #1
    541e:	4069      	eors	r1, r5
    5420:	464f      	mov	r7, r9
    5422:	464d      	mov	r5, r9
    5424:	b289      	uxth	r1, r1
    5426:	006d      	lsls	r5, r5, #1
    5428:	043b      	lsls	r3, r7, #16
    542a:	d501      	bpl.n	5430 <bloomFilterAddressCheck+0x230>
    542c:	f000 fdfe 	bl	602c <bloomFilterAddressCheck+0xe2c>
    5430:	b2a9      	uxth	r1, r5
    5432:	0049      	lsls	r1, r1, #1
    5434:	4689      	mov	r9, r1
    5436:	464f      	mov	r7, r9
    5438:	496b      	ldr	r1, [pc, #428]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    543a:	4079      	eors	r1, r7
    543c:	006f      	lsls	r7, r5, #1
    543e:	b289      	uxth	r1, r1
    5440:	46ba      	mov	sl, r7
    5442:	042b      	lsls	r3, r5, #16
    5444:	d501      	bpl.n	544a <bloomFilterAddressCheck+0x24a>
    5446:	f000 fdf4 	bl	6032 <bloomFilterAddressCheck+0xe32>
    544a:	4651      	mov	r1, sl
    544c:	466b      	mov	r3, sp
    544e:	b28d      	uxth	r5, r1
    5450:	8099      	strh	r1, [r3, #4]
    5452:	4965      	ldr	r1, [pc, #404]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5454:	006d      	lsls	r5, r5, #1
    5456:	4069      	eors	r1, r5
    5458:	b289      	uxth	r1, r1
    545a:	4689      	mov	r9, r1
    545c:	2103      	movs	r1, #3
    545e:	4655      	mov	r5, sl
    5460:	4657      	mov	r7, sl
    5462:	5651      	ldrsb	r1, [r2, r1]
    5464:	006d      	lsls	r5, r5, #1
    5466:	0209      	lsls	r1, r1, #8
    5468:	043b      	lsls	r3, r7, #16
    546a:	d501      	bpl.n	5470 <bloomFilterAddressCheck+0x270>
    546c:	f000 fde4 	bl	6038 <bloomFilterAddressCheck+0xe38>
    5470:	404d      	eors	r5, r1
    5472:	b22d      	sxth	r5, r5
    5474:	466b      	mov	r3, sp
    5476:	46a9      	mov	r9, r5
    5478:	4f5b      	ldr	r7, [pc, #364]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    547a:	b2ad      	uxth	r5, r5
    547c:	006d      	lsls	r5, r5, #1
    547e:	406f      	eors	r7, r5
    5480:	809f      	strh	r7, [r3, #4]
    5482:	b2bf      	uxth	r7, r7
    5484:	46ba      	mov	sl, r7
    5486:	464f      	mov	r7, r9
    5488:	2f00      	cmp	r7, #0
    548a:	da01      	bge.n	5490 <bloomFilterAddressCheck+0x290>
    548c:	f000 fdd7 	bl	603e <bloomFilterAddressCheck+0xe3e>
    5490:	b2af      	uxth	r7, r5
    5492:	007f      	lsls	r7, r7, #1
    5494:	46ba      	mov	sl, r7
    5496:	4f54      	ldr	r7, [pc, #336]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5498:	46b9      	mov	r9, r7
    549a:	4657      	mov	r7, sl
    549c:	464b      	mov	r3, r9
    549e:	405f      	eors	r7, r3
    54a0:	1c3b      	adds	r3, r7, #0
    54a2:	466f      	mov	r7, sp
    54a4:	80bb      	strh	r3, [r7, #4]
    54a6:	88bb      	ldrh	r3, [r7, #4]
    54a8:	469a      	mov	sl, r3
    54aa:	006b      	lsls	r3, r5, #1
    54ac:	4699      	mov	r9, r3
    54ae:	042b      	lsls	r3, r5, #16
    54b0:	d501      	bpl.n	54b6 <bloomFilterAddressCheck+0x2b6>
    54b2:	f000 fdc7 	bl	6044 <bloomFilterAddressCheck+0xe44>
    54b6:	464b      	mov	r3, r9
    54b8:	466d      	mov	r5, sp
    54ba:	80ab      	strh	r3, [r5, #4]
    54bc:	88ad      	ldrh	r5, [r5, #4]
    54be:	006b      	lsls	r3, r5, #1
    54c0:	4d49      	ldr	r5, [pc, #292]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    54c2:	405d      	eors	r5, r3
    54c4:	464b      	mov	r3, r9
    54c6:	005b      	lsls	r3, r3, #1
    54c8:	469a      	mov	sl, r3
    54ca:	464b      	mov	r3, r9
    54cc:	b2ad      	uxth	r5, r5
    54ce:	041b      	lsls	r3, r3, #16
    54d0:	d501      	bpl.n	54d6 <bloomFilterAddressCheck+0x2d6>
    54d2:	f000 fdba 	bl	604a <bloomFilterAddressCheck+0xe4a>
    54d6:	4653      	mov	r3, sl
    54d8:	466d      	mov	r5, sp
    54da:	80ab      	strh	r3, [r5, #4]
    54dc:	88ad      	ldrh	r5, [r5, #4]
    54de:	006b      	lsls	r3, r5, #1
    54e0:	4d41      	ldr	r5, [pc, #260]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    54e2:	405d      	eors	r5, r3
    54e4:	4653      	mov	r3, sl
    54e6:	005b      	lsls	r3, r3, #1
    54e8:	4699      	mov	r9, r3
    54ea:	4653      	mov	r3, sl
    54ec:	b2ad      	uxth	r5, r5
    54ee:	041b      	lsls	r3, r3, #16
    54f0:	d501      	bpl.n	54f6 <bloomFilterAddressCheck+0x2f6>
    54f2:	f000 fdad 	bl	6050 <bloomFilterAddressCheck+0xe50>
    54f6:	464b      	mov	r3, r9
    54f8:	466d      	mov	r5, sp
    54fa:	80ab      	strh	r3, [r5, #4]
    54fc:	88ad      	ldrh	r5, [r5, #4]
    54fe:	006b      	lsls	r3, r5, #1
    5500:	4d39      	ldr	r5, [pc, #228]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5502:	405d      	eors	r5, r3
    5504:	464b      	mov	r3, r9
    5506:	005b      	lsls	r3, r3, #1
    5508:	469a      	mov	sl, r3
    550a:	464b      	mov	r3, r9
    550c:	b2ad      	uxth	r5, r5
    550e:	041b      	lsls	r3, r3, #16
    5510:	d501      	bpl.n	5516 <bloomFilterAddressCheck+0x316>
    5512:	f000 fda0 	bl	6056 <bloomFilterAddressCheck+0xe56>
    5516:	4653      	mov	r3, sl
    5518:	466d      	mov	r5, sp
    551a:	80ab      	strh	r3, [r5, #4]
    551c:	88ad      	ldrh	r5, [r5, #4]
    551e:	006b      	lsls	r3, r5, #1
    5520:	4d31      	ldr	r5, [pc, #196]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5522:	405d      	eors	r5, r3
    5524:	4653      	mov	r3, sl
    5526:	005b      	lsls	r3, r3, #1
    5528:	4699      	mov	r9, r3
    552a:	4653      	mov	r3, sl
    552c:	b2ad      	uxth	r5, r5
    552e:	041b      	lsls	r3, r3, #16
    5530:	d501      	bpl.n	5536 <bloomFilterAddressCheck+0x336>
    5532:	f000 fd93 	bl	605c <bloomFilterAddressCheck+0xe5c>
    5536:	464b      	mov	r3, r9
    5538:	466d      	mov	r5, sp
    553a:	80ab      	strh	r3, [r5, #4]
    553c:	88ad      	ldrh	r5, [r5, #4]
    553e:	006b      	lsls	r3, r5, #1
    5540:	4d29      	ldr	r5, [pc, #164]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5542:	405d      	eors	r5, r3
    5544:	464b      	mov	r3, r9
    5546:	005b      	lsls	r3, r3, #1
    5548:	469a      	mov	sl, r3
    554a:	464b      	mov	r3, r9
    554c:	b2ad      	uxth	r5, r5
    554e:	041b      	lsls	r3, r3, #16
    5550:	d501      	bpl.n	5556 <bloomFilterAddressCheck+0x356>
    5552:	f000 fd86 	bl	6062 <bloomFilterAddressCheck+0xe62>
    5556:	4653      	mov	r3, sl
    5558:	466d      	mov	r5, sp
    555a:	80ab      	strh	r3, [r5, #4]
    555c:	88ad      	ldrh	r5, [r5, #4]
    555e:	006b      	lsls	r3, r5, #1
    5560:	4d21      	ldr	r5, [pc, #132]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    5562:	405d      	eors	r5, r3
    5564:	b2ab      	uxth	r3, r5
    5566:	2504      	movs	r5, #4
    5568:	5755      	ldrsb	r5, [r2, r5]
    556a:	4699      	mov	r9, r3
    556c:	022b      	lsls	r3, r5, #8
    556e:	469b      	mov	fp, r3
    5570:	4653      	mov	r3, sl
    5572:	005d      	lsls	r5, r3, #1
    5574:	041b      	lsls	r3, r3, #16
    5576:	d501      	bpl.n	557c <bloomFilterAddressCheck+0x37c>
    5578:	f000 fd76 	bl	6068 <bloomFilterAddressCheck+0xe68>
    557c:	465b      	mov	r3, fp
    557e:	405d      	eors	r5, r3
    5580:	b22b      	sxth	r3, r5
    5582:	466d      	mov	r5, sp
    5584:	4699      	mov	r9, r3
    5586:	80ab      	strh	r3, [r5, #4]
    5588:	4b17      	ldr	r3, [pc, #92]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    558a:	88ad      	ldrh	r5, [r5, #4]
    558c:	001f      	movs	r7, r3
    558e:	006d      	lsls	r5, r5, #1
    5590:	406f      	eors	r7, r5
    5592:	1c3b      	adds	r3, r7, #0
    5594:	466f      	mov	r7, sp
    5596:	80bb      	strh	r3, [r7, #4]
    5598:	88bb      	ldrh	r3, [r7, #4]
    559a:	469a      	mov	sl, r3
    559c:	464b      	mov	r3, r9
    559e:	2b00      	cmp	r3, #0
    55a0:	da01      	bge.n	55a6 <bloomFilterAddressCheck+0x3a6>
    55a2:	f000 fd64 	bl	606e <bloomFilterAddressCheck+0xe6e>
    55a6:	b2ab      	uxth	r3, r5
    55a8:	005b      	lsls	r3, r3, #1
    55aa:	469a      	mov	sl, r3
    55ac:	4657      	mov	r7, sl
    55ae:	4b0e      	ldr	r3, [pc, #56]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    55b0:	405f      	eors	r7, r3
    55b2:	1c3b      	adds	r3, r7, #0
    55b4:	466f      	mov	r7, sp
    55b6:	80bb      	strh	r3, [r7, #4]
    55b8:	88bb      	ldrh	r3, [r7, #4]
    55ba:	469a      	mov	sl, r3
    55bc:	006b      	lsls	r3, r5, #1
    55be:	4699      	mov	r9, r3
    55c0:	042b      	lsls	r3, r5, #16
    55c2:	d501      	bpl.n	55c8 <bloomFilterAddressCheck+0x3c8>
    55c4:	f000 fd56 	bl	6074 <bloomFilterAddressCheck+0xe74>
    55c8:	464b      	mov	r3, r9
    55ca:	466d      	mov	r5, sp
    55cc:	80ab      	strh	r3, [r5, #4]
    55ce:	88ad      	ldrh	r5, [r5, #4]
    55d0:	006b      	lsls	r3, r5, #1
    55d2:	4d05      	ldr	r5, [pc, #20]	; (55e8 <bloomFilterAddressCheck+0x3e8>)
    55d4:	405d      	eors	r5, r3
    55d6:	464b      	mov	r3, r9
    55d8:	005b      	lsls	r3, r3, #1
    55da:	469a      	mov	sl, r3
    55dc:	464b      	mov	r3, r9
    55de:	b2ad      	uxth	r5, r5
    55e0:	e004      	b.n	55ec <bloomFilterAddressCheck+0x3ec>
    55e2:	46c0      	nop			; (mov r8, r8)
    55e4:	2000004b 	.word	0x2000004b
    55e8:	00001021 	.word	0x00001021
    55ec:	041b      	lsls	r3, r3, #16
    55ee:	d501      	bpl.n	55f4 <bloomFilterAddressCheck+0x3f4>
    55f0:	f000 fd43 	bl	607a <bloomFilterAddressCheck+0xe7a>
    55f4:	4653      	mov	r3, sl
    55f6:	466d      	mov	r5, sp
    55f8:	80ab      	strh	r3, [r5, #4]
    55fa:	88ad      	ldrh	r5, [r5, #4]
    55fc:	006b      	lsls	r3, r5, #1
    55fe:	4de9      	ldr	r5, [pc, #932]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5600:	405d      	eors	r5, r3
    5602:	4653      	mov	r3, sl
    5604:	005b      	lsls	r3, r3, #1
    5606:	4699      	mov	r9, r3
    5608:	4653      	mov	r3, sl
    560a:	b2ad      	uxth	r5, r5
    560c:	041b      	lsls	r3, r3, #16
    560e:	d501      	bpl.n	5614 <bloomFilterAddressCheck+0x414>
    5610:	f000 fd36 	bl	6080 <bloomFilterAddressCheck+0xe80>
    5614:	464b      	mov	r3, r9
    5616:	466d      	mov	r5, sp
    5618:	80ab      	strh	r3, [r5, #4]
    561a:	88ad      	ldrh	r5, [r5, #4]
    561c:	006b      	lsls	r3, r5, #1
    561e:	4de1      	ldr	r5, [pc, #900]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5620:	405d      	eors	r5, r3
    5622:	464b      	mov	r3, r9
    5624:	005b      	lsls	r3, r3, #1
    5626:	469a      	mov	sl, r3
    5628:	464b      	mov	r3, r9
    562a:	b2ad      	uxth	r5, r5
    562c:	041b      	lsls	r3, r3, #16
    562e:	d501      	bpl.n	5634 <bloomFilterAddressCheck+0x434>
    5630:	f000 fd29 	bl	6086 <bloomFilterAddressCheck+0xe86>
    5634:	4653      	mov	r3, sl
    5636:	466d      	mov	r5, sp
    5638:	80ab      	strh	r3, [r5, #4]
    563a:	88ad      	ldrh	r5, [r5, #4]
    563c:	006b      	lsls	r3, r5, #1
    563e:	4dd9      	ldr	r5, [pc, #868]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5640:	405d      	eors	r5, r3
    5642:	4653      	mov	r3, sl
    5644:	005b      	lsls	r3, r3, #1
    5646:	4699      	mov	r9, r3
    5648:	4653      	mov	r3, sl
    564a:	b2ad      	uxth	r5, r5
    564c:	041b      	lsls	r3, r3, #16
    564e:	d501      	bpl.n	5654 <bloomFilterAddressCheck+0x454>
    5650:	f000 fd1c 	bl	608c <bloomFilterAddressCheck+0xe8c>
    5654:	464b      	mov	r3, r9
    5656:	466d      	mov	r5, sp
    5658:	80ab      	strh	r3, [r5, #4]
    565a:	88ad      	ldrh	r5, [r5, #4]
    565c:	006b      	lsls	r3, r5, #1
    565e:	4dd1      	ldr	r5, [pc, #836]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5660:	405d      	eors	r5, r3
    5662:	464b      	mov	r3, r9
    5664:	005b      	lsls	r3, r3, #1
    5666:	469a      	mov	sl, r3
    5668:	464b      	mov	r3, r9
    566a:	b2ad      	uxth	r5, r5
    566c:	041b      	lsls	r3, r3, #16
    566e:	d501      	bpl.n	5674 <bloomFilterAddressCheck+0x474>
    5670:	f000 fd0f 	bl	6092 <bloomFilterAddressCheck+0xe92>
    5674:	4653      	mov	r3, sl
    5676:	466d      	mov	r5, sp
    5678:	80ab      	strh	r3, [r5, #4]
    567a:	88ad      	ldrh	r5, [r5, #4]
    567c:	006b      	lsls	r3, r5, #1
    567e:	4dc9      	ldr	r5, [pc, #804]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5680:	405d      	eors	r5, r3
    5682:	b2ab      	uxth	r3, r5
    5684:	2505      	movs	r5, #5
    5686:	5755      	ldrsb	r5, [r2, r5]
    5688:	4699      	mov	r9, r3
    568a:	022b      	lsls	r3, r5, #8
    568c:	9301      	str	r3, [sp, #4]
    568e:	4653      	mov	r3, sl
    5690:	005d      	lsls	r5, r3, #1
    5692:	041b      	lsls	r3, r3, #16
    5694:	d501      	bpl.n	569a <bloomFilterAddressCheck+0x49a>
    5696:	f000 fcff 	bl	6098 <bloomFilterAddressCheck+0xe98>
    569a:	9b01      	ldr	r3, [sp, #4]
    569c:	405d      	eors	r5, r3
    569e:	b22b      	sxth	r3, r5
    56a0:	466d      	mov	r5, sp
    56a2:	4699      	mov	r9, r3
    56a4:	812b      	strh	r3, [r5, #8]
    56a6:	4bbf      	ldr	r3, [pc, #764]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    56a8:	892d      	ldrh	r5, [r5, #8]
    56aa:	001f      	movs	r7, r3
    56ac:	006d      	lsls	r5, r5, #1
    56ae:	406f      	eors	r7, r5
    56b0:	1c3b      	adds	r3, r7, #0
    56b2:	466f      	mov	r7, sp
    56b4:	813b      	strh	r3, [r7, #8]
    56b6:	893b      	ldrh	r3, [r7, #8]
    56b8:	469a      	mov	sl, r3
    56ba:	464b      	mov	r3, r9
    56bc:	2b00      	cmp	r3, #0
    56be:	da01      	bge.n	56c4 <bloomFilterAddressCheck+0x4c4>
    56c0:	f000 fced 	bl	609e <bloomFilterAddressCheck+0xe9e>
    56c4:	b2ab      	uxth	r3, r5
    56c6:	005b      	lsls	r3, r3, #1
    56c8:	469a      	mov	sl, r3
    56ca:	4657      	mov	r7, sl
    56cc:	4bb5      	ldr	r3, [pc, #724]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    56ce:	405f      	eors	r7, r3
    56d0:	1c3b      	adds	r3, r7, #0
    56d2:	466f      	mov	r7, sp
    56d4:	813b      	strh	r3, [r7, #8]
    56d6:	893b      	ldrh	r3, [r7, #8]
    56d8:	469a      	mov	sl, r3
    56da:	006b      	lsls	r3, r5, #1
    56dc:	4699      	mov	r9, r3
    56de:	042b      	lsls	r3, r5, #16
    56e0:	d501      	bpl.n	56e6 <bloomFilterAddressCheck+0x4e6>
    56e2:	f000 fcdf 	bl	60a4 <bloomFilterAddressCheck+0xea4>
    56e6:	464b      	mov	r3, r9
    56e8:	466d      	mov	r5, sp
    56ea:	812b      	strh	r3, [r5, #8]
    56ec:	892d      	ldrh	r5, [r5, #8]
    56ee:	006b      	lsls	r3, r5, #1
    56f0:	4dac      	ldr	r5, [pc, #688]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    56f2:	405d      	eors	r5, r3
    56f4:	464b      	mov	r3, r9
    56f6:	005b      	lsls	r3, r3, #1
    56f8:	469a      	mov	sl, r3
    56fa:	464b      	mov	r3, r9
    56fc:	b2ad      	uxth	r5, r5
    56fe:	041b      	lsls	r3, r3, #16
    5700:	d501      	bpl.n	5706 <bloomFilterAddressCheck+0x506>
    5702:	f000 fcd2 	bl	60aa <bloomFilterAddressCheck+0xeaa>
    5706:	4653      	mov	r3, sl
    5708:	466d      	mov	r5, sp
    570a:	812b      	strh	r3, [r5, #8]
    570c:	892d      	ldrh	r5, [r5, #8]
    570e:	006b      	lsls	r3, r5, #1
    5710:	4da4      	ldr	r5, [pc, #656]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5712:	405d      	eors	r5, r3
    5714:	4653      	mov	r3, sl
    5716:	005b      	lsls	r3, r3, #1
    5718:	4699      	mov	r9, r3
    571a:	4653      	mov	r3, sl
    571c:	b2ad      	uxth	r5, r5
    571e:	041b      	lsls	r3, r3, #16
    5720:	d501      	bpl.n	5726 <bloomFilterAddressCheck+0x526>
    5722:	f000 fcc5 	bl	60b0 <bloomFilterAddressCheck+0xeb0>
    5726:	464b      	mov	r3, r9
    5728:	466d      	mov	r5, sp
    572a:	812b      	strh	r3, [r5, #8]
    572c:	892d      	ldrh	r5, [r5, #8]
    572e:	006b      	lsls	r3, r5, #1
    5730:	4d9c      	ldr	r5, [pc, #624]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5732:	405d      	eors	r5, r3
    5734:	464b      	mov	r3, r9
    5736:	005b      	lsls	r3, r3, #1
    5738:	469a      	mov	sl, r3
    573a:	464b      	mov	r3, r9
    573c:	b2ad      	uxth	r5, r5
    573e:	041b      	lsls	r3, r3, #16
    5740:	d501      	bpl.n	5746 <bloomFilterAddressCheck+0x546>
    5742:	f000 fcb8 	bl	60b6 <bloomFilterAddressCheck+0xeb6>
    5746:	4653      	mov	r3, sl
    5748:	466d      	mov	r5, sp
    574a:	812b      	strh	r3, [r5, #8]
    574c:	892d      	ldrh	r5, [r5, #8]
    574e:	006b      	lsls	r3, r5, #1
    5750:	4d94      	ldr	r5, [pc, #592]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5752:	405d      	eors	r5, r3
    5754:	4653      	mov	r3, sl
    5756:	005b      	lsls	r3, r3, #1
    5758:	4699      	mov	r9, r3
    575a:	4653      	mov	r3, sl
    575c:	b2ad      	uxth	r5, r5
    575e:	041b      	lsls	r3, r3, #16
    5760:	d501      	bpl.n	5766 <bloomFilterAddressCheck+0x566>
    5762:	f000 fcab 	bl	60bc <bloomFilterAddressCheck+0xebc>
    5766:	464b      	mov	r3, r9
    5768:	466d      	mov	r5, sp
    576a:	812b      	strh	r3, [r5, #8]
    576c:	892d      	ldrh	r5, [r5, #8]
    576e:	006b      	lsls	r3, r5, #1
    5770:	4d8c      	ldr	r5, [pc, #560]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5772:	405d      	eors	r5, r3
    5774:	464b      	mov	r3, r9
    5776:	005b      	lsls	r3, r3, #1
    5778:	469a      	mov	sl, r3
    577a:	464b      	mov	r3, r9
    577c:	b2ad      	uxth	r5, r5
    577e:	041b      	lsls	r3, r3, #16
    5780:	d501      	bpl.n	5786 <bloomFilterAddressCheck+0x586>
    5782:	f000 fc9e 	bl	60c2 <bloomFilterAddressCheck+0xec2>
    5786:	4653      	mov	r3, sl
    5788:	466d      	mov	r5, sp
    578a:	812b      	strh	r3, [r5, #8]
    578c:	892d      	ldrh	r5, [r5, #8]
    578e:	006b      	lsls	r3, r5, #1
    5790:	4d84      	ldr	r5, [pc, #528]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5792:	405d      	eors	r5, r3
    5794:	b2ab      	uxth	r3, r5
    5796:	2506      	movs	r5, #6
    5798:	5755      	ldrsb	r5, [r2, r5]
    579a:	4699      	mov	r9, r3
    579c:	022b      	lsls	r3, r5, #8
    579e:	9302      	str	r3, [sp, #8]
    57a0:	4653      	mov	r3, sl
    57a2:	005d      	lsls	r5, r3, #1
    57a4:	041b      	lsls	r3, r3, #16
    57a6:	d501      	bpl.n	57ac <bloomFilterAddressCheck+0x5ac>
    57a8:	f000 fc8e 	bl	60c8 <bloomFilterAddressCheck+0xec8>
    57ac:	9b02      	ldr	r3, [sp, #8]
    57ae:	405d      	eors	r5, r3
    57b0:	b22b      	sxth	r3, r5
    57b2:	466d      	mov	r5, sp
    57b4:	4699      	mov	r9, r3
    57b6:	82ab      	strh	r3, [r5, #20]
    57b8:	4b7a      	ldr	r3, [pc, #488]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    57ba:	8aad      	ldrh	r5, [r5, #20]
    57bc:	001f      	movs	r7, r3
    57be:	006d      	lsls	r5, r5, #1
    57c0:	406f      	eors	r7, r5
    57c2:	1c3b      	adds	r3, r7, #0
    57c4:	466f      	mov	r7, sp
    57c6:	82bb      	strh	r3, [r7, #20]
    57c8:	8abb      	ldrh	r3, [r7, #20]
    57ca:	469a      	mov	sl, r3
    57cc:	464b      	mov	r3, r9
    57ce:	2b00      	cmp	r3, #0
    57d0:	da01      	bge.n	57d6 <bloomFilterAddressCheck+0x5d6>
    57d2:	f000 fc7c 	bl	60ce <bloomFilterAddressCheck+0xece>
    57d6:	b2ab      	uxth	r3, r5
    57d8:	005b      	lsls	r3, r3, #1
    57da:	469a      	mov	sl, r3
    57dc:	4657      	mov	r7, sl
    57de:	4b71      	ldr	r3, [pc, #452]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    57e0:	405f      	eors	r7, r3
    57e2:	1c3b      	adds	r3, r7, #0
    57e4:	466f      	mov	r7, sp
    57e6:	82bb      	strh	r3, [r7, #20]
    57e8:	8abb      	ldrh	r3, [r7, #20]
    57ea:	4699      	mov	r9, r3
    57ec:	006b      	lsls	r3, r5, #1
    57ee:	469a      	mov	sl, r3
    57f0:	042b      	lsls	r3, r5, #16
    57f2:	d501      	bpl.n	57f8 <bloomFilterAddressCheck+0x5f8>
    57f4:	f000 fc6e 	bl	60d4 <bloomFilterAddressCheck+0xed4>
    57f8:	4653      	mov	r3, sl
    57fa:	466d      	mov	r5, sp
    57fc:	82ab      	strh	r3, [r5, #20]
    57fe:	8aad      	ldrh	r5, [r5, #20]
    5800:	006b      	lsls	r3, r5, #1
    5802:	4d68      	ldr	r5, [pc, #416]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5804:	405d      	eors	r5, r3
    5806:	4653      	mov	r3, sl
    5808:	005b      	lsls	r3, r3, #1
    580a:	4699      	mov	r9, r3
    580c:	4653      	mov	r3, sl
    580e:	b2ad      	uxth	r5, r5
    5810:	041b      	lsls	r3, r3, #16
    5812:	d501      	bpl.n	5818 <bloomFilterAddressCheck+0x618>
    5814:	f000 fc61 	bl	60da <bloomFilterAddressCheck+0xeda>
    5818:	464b      	mov	r3, r9
    581a:	466d      	mov	r5, sp
    581c:	82ab      	strh	r3, [r5, #20]
    581e:	8aad      	ldrh	r5, [r5, #20]
    5820:	006b      	lsls	r3, r5, #1
    5822:	4d60      	ldr	r5, [pc, #384]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5824:	405d      	eors	r5, r3
    5826:	464b      	mov	r3, r9
    5828:	005b      	lsls	r3, r3, #1
    582a:	469a      	mov	sl, r3
    582c:	464b      	mov	r3, r9
    582e:	b2ad      	uxth	r5, r5
    5830:	041b      	lsls	r3, r3, #16
    5832:	d501      	bpl.n	5838 <bloomFilterAddressCheck+0x638>
    5834:	f000 fc54 	bl	60e0 <bloomFilterAddressCheck+0xee0>
    5838:	4653      	mov	r3, sl
    583a:	466d      	mov	r5, sp
    583c:	82ab      	strh	r3, [r5, #20]
    583e:	8aad      	ldrh	r5, [r5, #20]
    5840:	006b      	lsls	r3, r5, #1
    5842:	4d58      	ldr	r5, [pc, #352]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5844:	405d      	eors	r5, r3
    5846:	4653      	mov	r3, sl
    5848:	005b      	lsls	r3, r3, #1
    584a:	4699      	mov	r9, r3
    584c:	4653      	mov	r3, sl
    584e:	b2ad      	uxth	r5, r5
    5850:	041b      	lsls	r3, r3, #16
    5852:	d501      	bpl.n	5858 <bloomFilterAddressCheck+0x658>
    5854:	f000 fc47 	bl	60e6 <bloomFilterAddressCheck+0xee6>
    5858:	464b      	mov	r3, r9
    585a:	466d      	mov	r5, sp
    585c:	82ab      	strh	r3, [r5, #20]
    585e:	8aad      	ldrh	r5, [r5, #20]
    5860:	006b      	lsls	r3, r5, #1
    5862:	4d50      	ldr	r5, [pc, #320]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5864:	405d      	eors	r5, r3
    5866:	464b      	mov	r3, r9
    5868:	005b      	lsls	r3, r3, #1
    586a:	469a      	mov	sl, r3
    586c:	464b      	mov	r3, r9
    586e:	b2ad      	uxth	r5, r5
    5870:	041b      	lsls	r3, r3, #16
    5872:	d501      	bpl.n	5878 <bloomFilterAddressCheck+0x678>
    5874:	f000 fc3a 	bl	60ec <bloomFilterAddressCheck+0xeec>
    5878:	4653      	mov	r3, sl
    587a:	466d      	mov	r5, sp
    587c:	82ab      	strh	r3, [r5, #20]
    587e:	8aad      	ldrh	r5, [r5, #20]
    5880:	006b      	lsls	r3, r5, #1
    5882:	4d48      	ldr	r5, [pc, #288]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5884:	405d      	eors	r5, r3
    5886:	4653      	mov	r3, sl
    5888:	005b      	lsls	r3, r3, #1
    588a:	4699      	mov	r9, r3
    588c:	4653      	mov	r3, sl
    588e:	b2ad      	uxth	r5, r5
    5890:	041b      	lsls	r3, r3, #16
    5892:	d501      	bpl.n	5898 <bloomFilterAddressCheck+0x698>
    5894:	f000 fc2d 	bl	60f2 <bloomFilterAddressCheck+0xef2>
    5898:	464b      	mov	r3, r9
    589a:	466d      	mov	r5, sp
    589c:	82ab      	strh	r3, [r5, #20]
    589e:	8aad      	ldrh	r5, [r5, #20]
    58a0:	79d2      	ldrb	r2, [r2, #7]
    58a2:	006b      	lsls	r3, r5, #1
    58a4:	4d3f      	ldr	r5, [pc, #252]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    58a6:	b252      	sxtb	r2, r2
    58a8:	405d      	eors	r5, r3
    58aa:	0213      	lsls	r3, r2, #8
    58ac:	469a      	mov	sl, r3
    58ae:	464b      	mov	r3, r9
    58b0:	b2ad      	uxth	r5, r5
    58b2:	005a      	lsls	r2, r3, #1
    58b4:	041b      	lsls	r3, r3, #16
    58b6:	d501      	bpl.n	58bc <bloomFilterAddressCheck+0x6bc>
    58b8:	f000 fc1e 	bl	60f8 <bloomFilterAddressCheck+0xef8>
    58bc:	4653      	mov	r3, sl
    58be:	405a      	eors	r2, r3
    58c0:	4b38      	ldr	r3, [pc, #224]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    58c2:	b212      	sxth	r2, r2
    58c4:	001f      	movs	r7, r3
    58c6:	b295      	uxth	r5, r2
    58c8:	006d      	lsls	r5, r5, #1
    58ca:	406f      	eors	r7, r5
    58cc:	1c3b      	adds	r3, r7, #0
    58ce:	466f      	mov	r7, sp
    58d0:	82bb      	strh	r3, [r7, #20]
    58d2:	8abb      	ldrh	r3, [r7, #20]
    58d4:	b2ad      	uxth	r5, r5
    58d6:	2a00      	cmp	r2, #0
    58d8:	da00      	bge.n	58dc <bloomFilterAddressCheck+0x6dc>
    58da:	e30e      	b.n	5efa <bloomFilterAddressCheck+0xcfa>
    58dc:	1c2a      	adds	r2, r5, #0
    58de:	466f      	mov	r7, sp
    58e0:	b295      	uxth	r5, r2
    58e2:	006b      	lsls	r3, r5, #1
    58e4:	4d2f      	ldr	r5, [pc, #188]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    58e6:	405d      	eors	r5, r3
    58e8:	0053      	lsls	r3, r2, #1
    58ea:	82bb      	strh	r3, [r7, #20]
    58ec:	8abb      	ldrh	r3, [r7, #20]
    58ee:	b2ad      	uxth	r5, r5
    58f0:	4699      	mov	r9, r3
    58f2:	0413      	lsls	r3, r2, #16
    58f4:	d501      	bpl.n	58fa <bloomFilterAddressCheck+0x6fa>
    58f6:	f000 fcb4 	bl	6262 <bloomFilterAddressCheck+0x1062>
    58fa:	464a      	mov	r2, r9
    58fc:	466f      	mov	r7, sp
    58fe:	b295      	uxth	r5, r2
    5900:	006b      	lsls	r3, r5, #1
    5902:	4d28      	ldr	r5, [pc, #160]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5904:	405d      	eors	r5, r3
    5906:	0053      	lsls	r3, r2, #1
    5908:	82bb      	strh	r3, [r7, #20]
    590a:	8abb      	ldrh	r3, [r7, #20]
    590c:	b2ad      	uxth	r5, r5
    590e:	4699      	mov	r9, r3
    5910:	0413      	lsls	r3, r2, #16
    5912:	d400      	bmi.n	5916 <bloomFilterAddressCheck+0x716>
    5914:	464d      	mov	r5, r9
    5916:	466f      	mov	r7, sp
    5918:	b2aa      	uxth	r2, r5
    591a:	0053      	lsls	r3, r2, #1
    591c:	4a21      	ldr	r2, [pc, #132]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    591e:	405a      	eors	r2, r3
    5920:	006b      	lsls	r3, r5, #1
    5922:	82bb      	strh	r3, [r7, #20]
    5924:	8abb      	ldrh	r3, [r7, #20]
    5926:	b292      	uxth	r2, r2
    5928:	4699      	mov	r9, r3
    592a:	042b      	lsls	r3, r5, #16
    592c:	d400      	bmi.n	5930 <bloomFilterAddressCheck+0x730>
    592e:	464a      	mov	r2, r9
    5930:	466f      	mov	r7, sp
    5932:	b295      	uxth	r5, r2
    5934:	006b      	lsls	r3, r5, #1
    5936:	4d1b      	ldr	r5, [pc, #108]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5938:	405d      	eors	r5, r3
    593a:	0053      	lsls	r3, r2, #1
    593c:	82bb      	strh	r3, [r7, #20]
    593e:	8abb      	ldrh	r3, [r7, #20]
    5940:	b2ad      	uxth	r5, r5
    5942:	4699      	mov	r9, r3
    5944:	0413      	lsls	r3, r2, #16
    5946:	d400      	bmi.n	594a <bloomFilterAddressCheck+0x74a>
    5948:	464d      	mov	r5, r9
    594a:	466f      	mov	r7, sp
    594c:	b2aa      	uxth	r2, r5
    594e:	0053      	lsls	r3, r2, #1
    5950:	4a14      	ldr	r2, [pc, #80]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5952:	405a      	eors	r2, r3
    5954:	006b      	lsls	r3, r5, #1
    5956:	82bb      	strh	r3, [r7, #20]
    5958:	8abb      	ldrh	r3, [r7, #20]
    595a:	b292      	uxth	r2, r2
    595c:	4699      	mov	r9, r3
    595e:	042b      	lsls	r3, r5, #16
    5960:	d400      	bmi.n	5964 <bloomFilterAddressCheck+0x764>
    5962:	464a      	mov	r2, r9
    5964:	b295      	uxth	r5, r2
    5966:	006b      	lsls	r3, r5, #1
    5968:	4d0e      	ldr	r5, [pc, #56]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    596a:	405d      	eors	r5, r3
    596c:	b2ab      	uxth	r3, r5
    596e:	0055      	lsls	r5, r2, #1
    5970:	4699      	mov	r9, r3
    5972:	b2ad      	uxth	r5, r5
    5974:	0413      	lsls	r3, r2, #16
    5976:	d501      	bpl.n	597c <bloomFilterAddressCheck+0x77c>
    5978:	f000 fc70 	bl	625c <bloomFilterAddressCheck+0x105c>
    597c:	1c2a      	adds	r2, r5, #0
    597e:	b295      	uxth	r5, r2
    5980:	b213      	sxth	r3, r2
    5982:	001f      	movs	r7, r3
    5984:	006b      	lsls	r3, r5, #1
    5986:	4d07      	ldr	r5, [pc, #28]	; (59a4 <bloomFilterAddressCheck+0x7a4>)
    5988:	0052      	lsls	r2, r2, #1
    598a:	405d      	eors	r5, r3
    598c:	b2ab      	uxth	r3, r5
    598e:	9305      	str	r3, [sp, #20]
    5990:	b293      	uxth	r3, r2
    5992:	4699      	mov	r9, r3
    5994:	4663      	mov	r3, ip
    5996:	4a04      	ldr	r2, [pc, #16]	; (59a8 <bloomFilterAddressCheck+0x7a8>)
    5998:	4645      	mov	r5, r8
    599a:	405a      	eors	r2, r3
    599c:	466b      	mov	r3, sp
    599e:	b292      	uxth	r2, r2
    59a0:	8a1b      	ldrh	r3, [r3, #16]
    59a2:	e003      	b.n	59ac <bloomFilterAddressCheck+0x7ac>
    59a4:	00001021 	.word	0x00001021
    59a8:	ffff8005 	.word	0xffff8005
    59ac:	2d00      	cmp	r5, #0
    59ae:	da01      	bge.n	59b4 <bloomFilterAddressCheck+0x7b4>
    59b0:	f000 fc51 	bl	6256 <bloomFilterAddressCheck+0x1056>
    59b4:	b29d      	uxth	r5, r3
    59b6:	4ae9      	ldr	r2, [pc, #932]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    59b8:	006d      	lsls	r5, r5, #1
    59ba:	406a      	eors	r2, r5
    59bc:	b212      	sxth	r2, r2
    59be:	b295      	uxth	r5, r2
    59c0:	005a      	lsls	r2, r3, #1
    59c2:	b292      	uxth	r2, r2
    59c4:	041b      	lsls	r3, r3, #16
    59c6:	d501      	bpl.n	59cc <bloomFilterAddressCheck+0x7cc>
    59c8:	f000 fc42 	bl	6250 <bloomFilterAddressCheck+0x1050>
    59cc:	4be3      	ldr	r3, [pc, #908]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    59ce:	b295      	uxth	r5, r2
    59d0:	006d      	lsls	r5, r5, #1
    59d2:	405d      	eors	r5, r3
    59d4:	0053      	lsls	r3, r2, #1
    59d6:	b2ad      	uxth	r5, r5
    59d8:	b29b      	uxth	r3, r3
    59da:	0412      	lsls	r2, r2, #16
    59dc:	d501      	bpl.n	59e2 <bloomFilterAddressCheck+0x7e2>
    59de:	f000 fc34 	bl	624a <bloomFilterAddressCheck+0x104a>
    59e2:	4ade      	ldr	r2, [pc, #888]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    59e4:	b29d      	uxth	r5, r3
    59e6:	006d      	lsls	r5, r5, #1
    59e8:	4055      	eors	r5, r2
    59ea:	005a      	lsls	r2, r3, #1
    59ec:	b2ad      	uxth	r5, r5
    59ee:	b292      	uxth	r2, r2
    59f0:	041b      	lsls	r3, r3, #16
    59f2:	d501      	bpl.n	59f8 <bloomFilterAddressCheck+0x7f8>
    59f4:	f000 fc26 	bl	6244 <bloomFilterAddressCheck+0x1044>
    59f8:	4bd8      	ldr	r3, [pc, #864]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    59fa:	b295      	uxth	r5, r2
    59fc:	006d      	lsls	r5, r5, #1
    59fe:	405d      	eors	r5, r3
    5a00:	0053      	lsls	r3, r2, #1
    5a02:	b2ad      	uxth	r5, r5
    5a04:	b29b      	uxth	r3, r3
    5a06:	0412      	lsls	r2, r2, #16
    5a08:	d501      	bpl.n	5a0e <bloomFilterAddressCheck+0x80e>
    5a0a:	f000 fc18 	bl	623e <bloomFilterAddressCheck+0x103e>
    5a0e:	4ad3      	ldr	r2, [pc, #844]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5a10:	b29d      	uxth	r5, r3
    5a12:	006d      	lsls	r5, r5, #1
    5a14:	4055      	eors	r5, r2
    5a16:	005a      	lsls	r2, r3, #1
    5a18:	b2ad      	uxth	r5, r5
    5a1a:	b292      	uxth	r2, r2
    5a1c:	041b      	lsls	r3, r3, #16
    5a1e:	d501      	bpl.n	5a24 <bloomFilterAddressCheck+0x824>
    5a20:	f000 fc0a 	bl	6238 <bloomFilterAddressCheck+0x1038>
    5a24:	4bcd      	ldr	r3, [pc, #820]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5a26:	b295      	uxth	r5, r2
    5a28:	006d      	lsls	r5, r5, #1
    5a2a:	405d      	eors	r5, r3
    5a2c:	0053      	lsls	r3, r2, #1
    5a2e:	b2ad      	uxth	r5, r5
    5a30:	b29b      	uxth	r3, r3
    5a32:	0412      	lsls	r2, r2, #16
    5a34:	d500      	bpl.n	5a38 <bloomFilterAddressCheck+0x838>
    5a36:	e3c1      	b.n	61bc <bloomFilterAddressCheck+0xfbc>
    5a38:	b29a      	uxth	r2, r3
    5a3a:	4dc8      	ldr	r5, [pc, #800]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5a3c:	0052      	lsls	r2, r2, #1
    5a3e:	4055      	eors	r5, r2
    5a40:	005a      	lsls	r2, r3, #1
    5a42:	b2ad      	uxth	r5, r5
    5a44:	b292      	uxth	r2, r2
    5a46:	041b      	lsls	r3, r3, #16
    5a48:	d500      	bpl.n	5a4c <bloomFilterAddressCheck+0x84c>
    5a4a:	e3b5      	b.n	61b8 <bloomFilterAddressCheck+0xfb8>
    5a4c:	4054      	eors	r4, r2
    5a4e:	b224      	sxth	r4, r4
    5a50:	b2a2      	uxth	r2, r4
    5a52:	4bc2      	ldr	r3, [pc, #776]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5a54:	0052      	lsls	r2, r2, #1
    5a56:	4053      	eors	r3, r2
    5a58:	b29d      	uxth	r5, r3
    5a5a:	b293      	uxth	r3, r2
    5a5c:	2c00      	cmp	r4, #0
    5a5e:	da00      	bge.n	5a62 <bloomFilterAddressCheck+0x862>
    5a60:	e3a8      	b.n	61b4 <bloomFilterAddressCheck+0xfb4>
    5a62:	4abe      	ldr	r2, [pc, #760]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5a64:	b29c      	uxth	r4, r3
    5a66:	0064      	lsls	r4, r4, #1
    5a68:	4054      	eors	r4, r2
    5a6a:	005a      	lsls	r2, r3, #1
    5a6c:	b2a4      	uxth	r4, r4
    5a6e:	b292      	uxth	r2, r2
    5a70:	041b      	lsls	r3, r3, #16
    5a72:	d500      	bpl.n	5a76 <bloomFilterAddressCheck+0x876>
    5a74:	e39c      	b.n	61b0 <bloomFilterAddressCheck+0xfb0>
    5a76:	4bb9      	ldr	r3, [pc, #740]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5a78:	b294      	uxth	r4, r2
    5a7a:	0064      	lsls	r4, r4, #1
    5a7c:	405c      	eors	r4, r3
    5a7e:	0053      	lsls	r3, r2, #1
    5a80:	b2a4      	uxth	r4, r4
    5a82:	b29b      	uxth	r3, r3
    5a84:	0412      	lsls	r2, r2, #16
    5a86:	d500      	bpl.n	5a8a <bloomFilterAddressCheck+0x88a>
    5a88:	e390      	b.n	61ac <bloomFilterAddressCheck+0xfac>
    5a8a:	4ab4      	ldr	r2, [pc, #720]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5a8c:	b29c      	uxth	r4, r3
    5a8e:	0064      	lsls	r4, r4, #1
    5a90:	4054      	eors	r4, r2
    5a92:	005a      	lsls	r2, r3, #1
    5a94:	b2a4      	uxth	r4, r4
    5a96:	b292      	uxth	r2, r2
    5a98:	041b      	lsls	r3, r3, #16
    5a9a:	d500      	bpl.n	5a9e <bloomFilterAddressCheck+0x89e>
    5a9c:	e384      	b.n	61a8 <bloomFilterAddressCheck+0xfa8>
    5a9e:	4baf      	ldr	r3, [pc, #700]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5aa0:	b294      	uxth	r4, r2
    5aa2:	0064      	lsls	r4, r4, #1
    5aa4:	405c      	eors	r4, r3
    5aa6:	0053      	lsls	r3, r2, #1
    5aa8:	b2a4      	uxth	r4, r4
    5aaa:	b29b      	uxth	r3, r3
    5aac:	0412      	lsls	r2, r2, #16
    5aae:	d500      	bpl.n	5ab2 <bloomFilterAddressCheck+0x8b2>
    5ab0:	e378      	b.n	61a4 <bloomFilterAddressCheck+0xfa4>
    5ab2:	4aaa      	ldr	r2, [pc, #680]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5ab4:	b29c      	uxth	r4, r3
    5ab6:	0064      	lsls	r4, r4, #1
    5ab8:	4054      	eors	r4, r2
    5aba:	005a      	lsls	r2, r3, #1
    5abc:	b2a4      	uxth	r4, r4
    5abe:	b292      	uxth	r2, r2
    5ac0:	041b      	lsls	r3, r3, #16
    5ac2:	d500      	bpl.n	5ac6 <bloomFilterAddressCheck+0x8c6>
    5ac4:	e36c      	b.n	61a0 <bloomFilterAddressCheck+0xfa0>
    5ac6:	4ba5      	ldr	r3, [pc, #660]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5ac8:	b294      	uxth	r4, r2
    5aca:	0064      	lsls	r4, r4, #1
    5acc:	405c      	eors	r4, r3
    5ace:	0053      	lsls	r3, r2, #1
    5ad0:	b2a4      	uxth	r4, r4
    5ad2:	b29b      	uxth	r3, r3
    5ad4:	0412      	lsls	r2, r2, #16
    5ad6:	d500      	bpl.n	5ada <bloomFilterAddressCheck+0x8da>
    5ad8:	e360      	b.n	619c <bloomFilterAddressCheck+0xf9c>
    5ada:	b29a      	uxth	r2, r3
    5adc:	4c9f      	ldr	r4, [pc, #636]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5ade:	0052      	lsls	r2, r2, #1
    5ae0:	4054      	eors	r4, r2
    5ae2:	005a      	lsls	r2, r3, #1
    5ae4:	b2a4      	uxth	r4, r4
    5ae6:	b292      	uxth	r2, r2
    5ae8:	041b      	lsls	r3, r3, #16
    5aea:	d500      	bpl.n	5aee <bloomFilterAddressCheck+0x8ee>
    5aec:	e354      	b.n	6198 <bloomFilterAddressCheck+0xf98>
    5aee:	4050      	eors	r0, r2
    5af0:	b200      	sxth	r0, r0
    5af2:	b282      	uxth	r2, r0
    5af4:	4b99      	ldr	r3, [pc, #612]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5af6:	0052      	lsls	r2, r2, #1
    5af8:	4053      	eors	r3, r2
    5afa:	b29c      	uxth	r4, r3
    5afc:	b293      	uxth	r3, r2
    5afe:	2800      	cmp	r0, #0
    5b00:	da00      	bge.n	5b04 <bloomFilterAddressCheck+0x904>
    5b02:	e347      	b.n	6194 <bloomFilterAddressCheck+0xf94>
    5b04:	4a95      	ldr	r2, [pc, #596]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5b06:	b298      	uxth	r0, r3
    5b08:	0040      	lsls	r0, r0, #1
    5b0a:	4050      	eors	r0, r2
    5b0c:	005a      	lsls	r2, r3, #1
    5b0e:	b280      	uxth	r0, r0
    5b10:	b292      	uxth	r2, r2
    5b12:	041b      	lsls	r3, r3, #16
    5b14:	d500      	bpl.n	5b18 <bloomFilterAddressCheck+0x918>
    5b16:	e33b      	b.n	6190 <bloomFilterAddressCheck+0xf90>
    5b18:	4b90      	ldr	r3, [pc, #576]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5b1a:	b290      	uxth	r0, r2
    5b1c:	0040      	lsls	r0, r0, #1
    5b1e:	4058      	eors	r0, r3
    5b20:	0053      	lsls	r3, r2, #1
    5b22:	b280      	uxth	r0, r0
    5b24:	b29b      	uxth	r3, r3
    5b26:	0412      	lsls	r2, r2, #16
    5b28:	d500      	bpl.n	5b2c <bloomFilterAddressCheck+0x92c>
    5b2a:	e32f      	b.n	618c <bloomFilterAddressCheck+0xf8c>
    5b2c:	4a8b      	ldr	r2, [pc, #556]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5b2e:	b298      	uxth	r0, r3
    5b30:	0040      	lsls	r0, r0, #1
    5b32:	4050      	eors	r0, r2
    5b34:	005a      	lsls	r2, r3, #1
    5b36:	b280      	uxth	r0, r0
    5b38:	b292      	uxth	r2, r2
    5b3a:	041b      	lsls	r3, r3, #16
    5b3c:	d500      	bpl.n	5b40 <bloomFilterAddressCheck+0x940>
    5b3e:	e323      	b.n	6188 <bloomFilterAddressCheck+0xf88>
    5b40:	4b86      	ldr	r3, [pc, #536]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5b42:	b290      	uxth	r0, r2
    5b44:	0040      	lsls	r0, r0, #1
    5b46:	4058      	eors	r0, r3
    5b48:	0053      	lsls	r3, r2, #1
    5b4a:	b280      	uxth	r0, r0
    5b4c:	b29b      	uxth	r3, r3
    5b4e:	0412      	lsls	r2, r2, #16
    5b50:	d500      	bpl.n	5b54 <bloomFilterAddressCheck+0x954>
    5b52:	e317      	b.n	6184 <bloomFilterAddressCheck+0xf84>
    5b54:	4a81      	ldr	r2, [pc, #516]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5b56:	b298      	uxth	r0, r3
    5b58:	0040      	lsls	r0, r0, #1
    5b5a:	4050      	eors	r0, r2
    5b5c:	005a      	lsls	r2, r3, #1
    5b5e:	b280      	uxth	r0, r0
    5b60:	b292      	uxth	r2, r2
    5b62:	041b      	lsls	r3, r3, #16
    5b64:	d500      	bpl.n	5b68 <bloomFilterAddressCheck+0x968>
    5b66:	e30b      	b.n	6180 <bloomFilterAddressCheck+0xf80>
    5b68:	4b7c      	ldr	r3, [pc, #496]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5b6a:	b290      	uxth	r0, r2
    5b6c:	0040      	lsls	r0, r0, #1
    5b6e:	4058      	eors	r0, r3
    5b70:	0053      	lsls	r3, r2, #1
    5b72:	b280      	uxth	r0, r0
    5b74:	b29b      	uxth	r3, r3
    5b76:	0412      	lsls	r2, r2, #16
    5b78:	d500      	bpl.n	5b7c <bloomFilterAddressCheck+0x97c>
    5b7a:	e2ff      	b.n	617c <bloomFilterAddressCheck+0xf7c>
    5b7c:	b29a      	uxth	r2, r3
    5b7e:	4877      	ldr	r0, [pc, #476]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5b80:	0052      	lsls	r2, r2, #1
    5b82:	4050      	eors	r0, r2
    5b84:	005a      	lsls	r2, r3, #1
    5b86:	b280      	uxth	r0, r0
    5b88:	b292      	uxth	r2, r2
    5b8a:	041b      	lsls	r3, r3, #16
    5b8c:	d500      	bpl.n	5b90 <bloomFilterAddressCheck+0x990>
    5b8e:	e2f3      	b.n	6178 <bloomFilterAddressCheck+0xf78>
    5b90:	4051      	eors	r1, r2
    5b92:	b209      	sxth	r1, r1
    5b94:	b28b      	uxth	r3, r1
    5b96:	4a71      	ldr	r2, [pc, #452]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5b98:	005b      	lsls	r3, r3, #1
    5b9a:	405a      	eors	r2, r3
    5b9c:	b292      	uxth	r2, r2
    5b9e:	2900      	cmp	r1, #0
    5ba0:	da00      	bge.n	5ba4 <bloomFilterAddressCheck+0x9a4>
    5ba2:	e2e7      	b.n	6174 <bloomFilterAddressCheck+0xf74>
    5ba4:	4a6d      	ldr	r2, [pc, #436]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5ba6:	b299      	uxth	r1, r3
    5ba8:	0049      	lsls	r1, r1, #1
    5baa:	4051      	eors	r1, r2
    5bac:	b289      	uxth	r1, r1
    5bae:	005a      	lsls	r2, r3, #1
    5bb0:	041b      	lsls	r3, r3, #16
    5bb2:	d500      	bpl.n	5bb6 <bloomFilterAddressCheck+0x9b6>
    5bb4:	e2dc      	b.n	6170 <bloomFilterAddressCheck+0xf70>
    5bb6:	b291      	uxth	r1, r2
    5bb8:	4b68      	ldr	r3, [pc, #416]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5bba:	0049      	lsls	r1, r1, #1
    5bbc:	404b      	eors	r3, r1
    5bbe:	b29b      	uxth	r3, r3
    5bc0:	0051      	lsls	r1, r2, #1
    5bc2:	0412      	lsls	r2, r2, #16
    5bc4:	d500      	bpl.n	5bc8 <bloomFilterAddressCheck+0x9c8>
    5bc6:	e2d1      	b.n	616c <bloomFilterAddressCheck+0xf6c>
    5bc8:	b28a      	uxth	r2, r1
    5bca:	4b64      	ldr	r3, [pc, #400]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5bcc:	0052      	lsls	r2, r2, #1
    5bce:	4053      	eors	r3, r2
    5bd0:	b29b      	uxth	r3, r3
    5bd2:	004a      	lsls	r2, r1, #1
    5bd4:	0409      	lsls	r1, r1, #16
    5bd6:	d500      	bpl.n	5bda <bloomFilterAddressCheck+0x9da>
    5bd8:	e2c6      	b.n	6168 <bloomFilterAddressCheck+0xf68>
    5bda:	b291      	uxth	r1, r2
    5bdc:	4b5f      	ldr	r3, [pc, #380]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5bde:	0049      	lsls	r1, r1, #1
    5be0:	404b      	eors	r3, r1
    5be2:	b29b      	uxth	r3, r3
    5be4:	0051      	lsls	r1, r2, #1
    5be6:	0412      	lsls	r2, r2, #16
    5be8:	d500      	bpl.n	5bec <bloomFilterAddressCheck+0x9ec>
    5bea:	e2bb      	b.n	6164 <bloomFilterAddressCheck+0xf64>
    5bec:	b28a      	uxth	r2, r1
    5bee:	4b5b      	ldr	r3, [pc, #364]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5bf0:	0052      	lsls	r2, r2, #1
    5bf2:	4053      	eors	r3, r2
    5bf4:	b29b      	uxth	r3, r3
    5bf6:	004a      	lsls	r2, r1, #1
    5bf8:	0409      	lsls	r1, r1, #16
    5bfa:	d500      	bpl.n	5bfe <bloomFilterAddressCheck+0x9fe>
    5bfc:	e2b0      	b.n	6160 <bloomFilterAddressCheck+0xf60>
    5bfe:	b291      	uxth	r1, r2
    5c00:	4b56      	ldr	r3, [pc, #344]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c02:	0049      	lsls	r1, r1, #1
    5c04:	404b      	eors	r3, r1
    5c06:	b29b      	uxth	r3, r3
    5c08:	0051      	lsls	r1, r2, #1
    5c0a:	0412      	lsls	r2, r2, #16
    5c0c:	d500      	bpl.n	5c10 <bloomFilterAddressCheck+0xa10>
    5c0e:	e2a5      	b.n	615c <bloomFilterAddressCheck+0xf5c>
    5c10:	b28a      	uxth	r2, r1
    5c12:	4b52      	ldr	r3, [pc, #328]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c14:	0052      	lsls	r2, r2, #1
    5c16:	4053      	eors	r3, r2
    5c18:	b29b      	uxth	r3, r3
    5c1a:	004a      	lsls	r2, r1, #1
    5c1c:	0409      	lsls	r1, r1, #16
    5c1e:	d500      	bpl.n	5c22 <bloomFilterAddressCheck+0xa22>
    5c20:	e29a      	b.n	6158 <bloomFilterAddressCheck+0xf58>
    5c22:	465b      	mov	r3, fp
    5c24:	4053      	eors	r3, r2
    5c26:	b21a      	sxth	r2, r3
    5c28:	b293      	uxth	r3, r2
    5c2a:	494c      	ldr	r1, [pc, #304]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c2c:	005b      	lsls	r3, r3, #1
    5c2e:	4059      	eors	r1, r3
    5c30:	b289      	uxth	r1, r1
    5c32:	2a00      	cmp	r2, #0
    5c34:	da00      	bge.n	5c38 <bloomFilterAddressCheck+0xa38>
    5c36:	e28d      	b.n	6154 <bloomFilterAddressCheck+0xf54>
    5c38:	b299      	uxth	r1, r3
    5c3a:	4a48      	ldr	r2, [pc, #288]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c3c:	0049      	lsls	r1, r1, #1
    5c3e:	404a      	eors	r2, r1
    5c40:	b292      	uxth	r2, r2
    5c42:	0059      	lsls	r1, r3, #1
    5c44:	041b      	lsls	r3, r3, #16
    5c46:	d500      	bpl.n	5c4a <bloomFilterAddressCheck+0xa4a>
    5c48:	e282      	b.n	6150 <bloomFilterAddressCheck+0xf50>
    5c4a:	b28a      	uxth	r2, r1
    5c4c:	4b43      	ldr	r3, [pc, #268]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c4e:	0052      	lsls	r2, r2, #1
    5c50:	4053      	eors	r3, r2
    5c52:	b29b      	uxth	r3, r3
    5c54:	004a      	lsls	r2, r1, #1
    5c56:	0409      	lsls	r1, r1, #16
    5c58:	d500      	bpl.n	5c5c <bloomFilterAddressCheck+0xa5c>
    5c5a:	e277      	b.n	614c <bloomFilterAddressCheck+0xf4c>
    5c5c:	b291      	uxth	r1, r2
    5c5e:	4b3f      	ldr	r3, [pc, #252]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c60:	0049      	lsls	r1, r1, #1
    5c62:	404b      	eors	r3, r1
    5c64:	b29b      	uxth	r3, r3
    5c66:	0051      	lsls	r1, r2, #1
    5c68:	0412      	lsls	r2, r2, #16
    5c6a:	d500      	bpl.n	5c6e <bloomFilterAddressCheck+0xa6e>
    5c6c:	e26c      	b.n	6148 <bloomFilterAddressCheck+0xf48>
    5c6e:	b28a      	uxth	r2, r1
    5c70:	4b3a      	ldr	r3, [pc, #232]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c72:	0052      	lsls	r2, r2, #1
    5c74:	4053      	eors	r3, r2
    5c76:	b29b      	uxth	r3, r3
    5c78:	004a      	lsls	r2, r1, #1
    5c7a:	0409      	lsls	r1, r1, #16
    5c7c:	d500      	bpl.n	5c80 <bloomFilterAddressCheck+0xa80>
    5c7e:	e261      	b.n	6144 <bloomFilterAddressCheck+0xf44>
    5c80:	b291      	uxth	r1, r2
    5c82:	4b36      	ldr	r3, [pc, #216]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c84:	0049      	lsls	r1, r1, #1
    5c86:	404b      	eors	r3, r1
    5c88:	b29b      	uxth	r3, r3
    5c8a:	0051      	lsls	r1, r2, #1
    5c8c:	0412      	lsls	r2, r2, #16
    5c8e:	d500      	bpl.n	5c92 <bloomFilterAddressCheck+0xa92>
    5c90:	e242      	b.n	6118 <bloomFilterAddressCheck+0xf18>
    5c92:	b28a      	uxth	r2, r1
    5c94:	4b31      	ldr	r3, [pc, #196]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5c96:	0052      	lsls	r2, r2, #1
    5c98:	4053      	eors	r3, r2
    5c9a:	b29b      	uxth	r3, r3
    5c9c:	004a      	lsls	r2, r1, #1
    5c9e:	0409      	lsls	r1, r1, #16
    5ca0:	d500      	bpl.n	5ca4 <bloomFilterAddressCheck+0xaa4>
    5ca2:	e243      	b.n	612c <bloomFilterAddressCheck+0xf2c>
    5ca4:	b291      	uxth	r1, r2
    5ca6:	4b2d      	ldr	r3, [pc, #180]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5ca8:	0049      	lsls	r1, r1, #1
    5caa:	404b      	eors	r3, r1
    5cac:	b29b      	uxth	r3, r3
    5cae:	0055      	lsls	r5, r2, #1
    5cb0:	0412      	lsls	r2, r2, #16
    5cb2:	d500      	bpl.n	5cb6 <bloomFilterAddressCheck+0xab6>
    5cb4:	e244      	b.n	6140 <bloomFilterAddressCheck+0xf40>
    5cb6:	9b01      	ldr	r3, [sp, #4]
    5cb8:	4a28      	ldr	r2, [pc, #160]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5cba:	406b      	eors	r3, r5
    5cbc:	b21d      	sxth	r5, r3
    5cbe:	b2ab      	uxth	r3, r5
    5cc0:	005b      	lsls	r3, r3, #1
    5cc2:	405a      	eors	r2, r3
    5cc4:	b292      	uxth	r2, r2
    5cc6:	2d00      	cmp	r5, #0
    5cc8:	da00      	bge.n	5ccc <bloomFilterAddressCheck+0xacc>
    5cca:	e2a7      	b.n	621c <bloomFilterAddressCheck+0x101c>
    5ccc:	b299      	uxth	r1, r3
    5cce:	4a23      	ldr	r2, [pc, #140]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5cd0:	0049      	lsls	r1, r1, #1
    5cd2:	404a      	eors	r2, r1
    5cd4:	b292      	uxth	r2, r2
    5cd6:	0059      	lsls	r1, r3, #1
    5cd8:	041b      	lsls	r3, r3, #16
    5cda:	d500      	bpl.n	5cde <bloomFilterAddressCheck+0xade>
    5cdc:	e29c      	b.n	6218 <bloomFilterAddressCheck+0x1018>
    5cde:	b28a      	uxth	r2, r1
    5ce0:	4b1e      	ldr	r3, [pc, #120]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5ce2:	0052      	lsls	r2, r2, #1
    5ce4:	4053      	eors	r3, r2
    5ce6:	b29b      	uxth	r3, r3
    5ce8:	004a      	lsls	r2, r1, #1
    5cea:	0409      	lsls	r1, r1, #16
    5cec:	d500      	bpl.n	5cf0 <bloomFilterAddressCheck+0xaf0>
    5cee:	e291      	b.n	6214 <bloomFilterAddressCheck+0x1014>
    5cf0:	b291      	uxth	r1, r2
    5cf2:	4b1a      	ldr	r3, [pc, #104]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5cf4:	0049      	lsls	r1, r1, #1
    5cf6:	404b      	eors	r3, r1
    5cf8:	b29b      	uxth	r3, r3
    5cfa:	0051      	lsls	r1, r2, #1
    5cfc:	0412      	lsls	r2, r2, #16
    5cfe:	d500      	bpl.n	5d02 <bloomFilterAddressCheck+0xb02>
    5d00:	e286      	b.n	6210 <bloomFilterAddressCheck+0x1010>
    5d02:	b28a      	uxth	r2, r1
    5d04:	4b15      	ldr	r3, [pc, #84]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5d06:	0052      	lsls	r2, r2, #1
    5d08:	4053      	eors	r3, r2
    5d0a:	b29b      	uxth	r3, r3
    5d0c:	004a      	lsls	r2, r1, #1
    5d0e:	0409      	lsls	r1, r1, #16
    5d10:	d500      	bpl.n	5d14 <bloomFilterAddressCheck+0xb14>
    5d12:	e27b      	b.n	620c <bloomFilterAddressCheck+0x100c>
    5d14:	b291      	uxth	r1, r2
    5d16:	4b11      	ldr	r3, [pc, #68]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5d18:	0049      	lsls	r1, r1, #1
    5d1a:	404b      	eors	r3, r1
    5d1c:	b29b      	uxth	r3, r3
    5d1e:	0051      	lsls	r1, r2, #1
    5d20:	0412      	lsls	r2, r2, #16
    5d22:	d500      	bpl.n	5d26 <bloomFilterAddressCheck+0xb26>
    5d24:	e270      	b.n	6208 <bloomFilterAddressCheck+0x1008>
    5d26:	b28a      	uxth	r2, r1
    5d28:	4b0c      	ldr	r3, [pc, #48]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5d2a:	0052      	lsls	r2, r2, #1
    5d2c:	4053      	eors	r3, r2
    5d2e:	b29b      	uxth	r3, r3
    5d30:	004a      	lsls	r2, r1, #1
    5d32:	0409      	lsls	r1, r1, #16
    5d34:	d500      	bpl.n	5d38 <bloomFilterAddressCheck+0xb38>
    5d36:	e265      	b.n	6204 <bloomFilterAddressCheck+0x1004>
    5d38:	b291      	uxth	r1, r2
    5d3a:	4b08      	ldr	r3, [pc, #32]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5d3c:	0049      	lsls	r1, r1, #1
    5d3e:	404b      	eors	r3, r1
    5d40:	b29b      	uxth	r3, r3
    5d42:	0055      	lsls	r5, r2, #1
    5d44:	0412      	lsls	r2, r2, #16
    5d46:	d500      	bpl.n	5d4a <bloomFilterAddressCheck+0xb4a>
    5d48:	e25a      	b.n	6200 <bloomFilterAddressCheck+0x1000>
    5d4a:	9b02      	ldr	r3, [sp, #8]
    5d4c:	4a03      	ldr	r2, [pc, #12]	; (5d5c <bloomFilterAddressCheck+0xb5c>)
    5d4e:	406b      	eors	r3, r5
    5d50:	b21d      	sxth	r5, r3
    5d52:	b2ab      	uxth	r3, r5
    5d54:	005b      	lsls	r3, r3, #1
    5d56:	405a      	eors	r2, r3
    5d58:	b292      	uxth	r2, r2
    5d5a:	e001      	b.n	5d60 <bloomFilterAddressCheck+0xb60>
    5d5c:	ffff8005 	.word	0xffff8005
    5d60:	2d00      	cmp	r5, #0
    5d62:	da00      	bge.n	5d66 <bloomFilterAddressCheck+0xb66>
    5d64:	e24a      	b.n	61fc <bloomFilterAddressCheck+0xffc>
    5d66:	b299      	uxth	r1, r3
    5d68:	4ae8      	ldr	r2, [pc, #928]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5d6a:	0049      	lsls	r1, r1, #1
    5d6c:	404a      	eors	r2, r1
    5d6e:	b292      	uxth	r2, r2
    5d70:	0059      	lsls	r1, r3, #1
    5d72:	041b      	lsls	r3, r3, #16
    5d74:	d500      	bpl.n	5d78 <bloomFilterAddressCheck+0xb78>
    5d76:	e23f      	b.n	61f8 <bloomFilterAddressCheck+0xff8>
    5d78:	b28a      	uxth	r2, r1
    5d7a:	4be4      	ldr	r3, [pc, #912]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5d7c:	0052      	lsls	r2, r2, #1
    5d7e:	4053      	eors	r3, r2
    5d80:	b29b      	uxth	r3, r3
    5d82:	004a      	lsls	r2, r1, #1
    5d84:	0409      	lsls	r1, r1, #16
    5d86:	d500      	bpl.n	5d8a <bloomFilterAddressCheck+0xb8a>
    5d88:	e234      	b.n	61f4 <bloomFilterAddressCheck+0xff4>
    5d8a:	b291      	uxth	r1, r2
    5d8c:	4bdf      	ldr	r3, [pc, #892]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5d8e:	0049      	lsls	r1, r1, #1
    5d90:	404b      	eors	r3, r1
    5d92:	b29b      	uxth	r3, r3
    5d94:	0051      	lsls	r1, r2, #1
    5d96:	0412      	lsls	r2, r2, #16
    5d98:	d500      	bpl.n	5d9c <bloomFilterAddressCheck+0xb9c>
    5d9a:	e229      	b.n	61f0 <bloomFilterAddressCheck+0xff0>
    5d9c:	b28a      	uxth	r2, r1
    5d9e:	4bdb      	ldr	r3, [pc, #876]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5da0:	0052      	lsls	r2, r2, #1
    5da2:	4053      	eors	r3, r2
    5da4:	b29b      	uxth	r3, r3
    5da6:	004a      	lsls	r2, r1, #1
    5da8:	0409      	lsls	r1, r1, #16
    5daa:	d500      	bpl.n	5dae <bloomFilterAddressCheck+0xbae>
    5dac:	e21e      	b.n	61ec <bloomFilterAddressCheck+0xfec>
    5dae:	b291      	uxth	r1, r2
    5db0:	4bd6      	ldr	r3, [pc, #856]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5db2:	0049      	lsls	r1, r1, #1
    5db4:	404b      	eors	r3, r1
    5db6:	b29b      	uxth	r3, r3
    5db8:	0051      	lsls	r1, r2, #1
    5dba:	0412      	lsls	r2, r2, #16
    5dbc:	d500      	bpl.n	5dc0 <bloomFilterAddressCheck+0xbc0>
    5dbe:	e1ff      	b.n	61c0 <bloomFilterAddressCheck+0xfc0>
    5dc0:	b28a      	uxth	r2, r1
    5dc2:	4bd2      	ldr	r3, [pc, #840]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5dc4:	0052      	lsls	r2, r2, #1
    5dc6:	4053      	eors	r3, r2
    5dc8:	b29b      	uxth	r3, r3
    5dca:	0048      	lsls	r0, r1, #1
    5dcc:	040a      	lsls	r2, r1, #16
    5dce:	d500      	bpl.n	5dd2 <bloomFilterAddressCheck+0xbd2>
    5dd0:	e200      	b.n	61d4 <bloomFilterAddressCheck+0xfd4>
    5dd2:	b282      	uxth	r2, r0
    5dd4:	4bcd      	ldr	r3, [pc, #820]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5dd6:	0052      	lsls	r2, r2, #1
    5dd8:	4053      	eors	r3, r2
    5dda:	b29b      	uxth	r3, r3
    5ddc:	0042      	lsls	r2, r0, #1
    5dde:	0401      	lsls	r1, r0, #16
    5de0:	d500      	bpl.n	5de4 <bloomFilterAddressCheck+0xbe4>
    5de2:	e201      	b.n	61e8 <bloomFilterAddressCheck+0xfe8>
    5de4:	4653      	mov	r3, sl
    5de6:	4053      	eors	r3, r2
    5de8:	b21a      	sxth	r2, r3
    5dea:	b291      	uxth	r1, r2
    5dec:	4bc7      	ldr	r3, [pc, #796]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5dee:	0049      	lsls	r1, r1, #1
    5df0:	404b      	eors	r3, r1
    5df2:	b298      	uxth	r0, r3
    5df4:	b28b      	uxth	r3, r1
    5df6:	2a00      	cmp	r2, #0
    5df8:	da00      	bge.n	5dfc <bloomFilterAddressCheck+0xbfc>
    5dfa:	e21b      	b.n	6234 <bloomFilterAddressCheck+0x1034>
    5dfc:	4ac3      	ldr	r2, [pc, #780]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5dfe:	b299      	uxth	r1, r3
    5e00:	0049      	lsls	r1, r1, #1
    5e02:	4051      	eors	r1, r2
    5e04:	005a      	lsls	r2, r3, #1
    5e06:	b289      	uxth	r1, r1
    5e08:	b292      	uxth	r2, r2
    5e0a:	041b      	lsls	r3, r3, #16
    5e0c:	d500      	bpl.n	5e10 <bloomFilterAddressCheck+0xc10>
    5e0e:	e20f      	b.n	6230 <bloomFilterAddressCheck+0x1030>
    5e10:	4bbe      	ldr	r3, [pc, #760]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5e12:	b291      	uxth	r1, r2
    5e14:	0049      	lsls	r1, r1, #1
    5e16:	4059      	eors	r1, r3
    5e18:	0053      	lsls	r3, r2, #1
    5e1a:	b289      	uxth	r1, r1
    5e1c:	b29b      	uxth	r3, r3
    5e1e:	0412      	lsls	r2, r2, #16
    5e20:	d500      	bpl.n	5e24 <bloomFilterAddressCheck+0xc24>
    5e22:	e203      	b.n	622c <bloomFilterAddressCheck+0x102c>
    5e24:	4ab9      	ldr	r2, [pc, #740]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5e26:	b299      	uxth	r1, r3
    5e28:	0049      	lsls	r1, r1, #1
    5e2a:	4051      	eors	r1, r2
    5e2c:	005a      	lsls	r2, r3, #1
    5e2e:	b289      	uxth	r1, r1
    5e30:	b292      	uxth	r2, r2
    5e32:	041b      	lsls	r3, r3, #16
    5e34:	d500      	bpl.n	5e38 <bloomFilterAddressCheck+0xc38>
    5e36:	e1f7      	b.n	6228 <bloomFilterAddressCheck+0x1028>
    5e38:	4bb4      	ldr	r3, [pc, #720]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5e3a:	b291      	uxth	r1, r2
    5e3c:	0049      	lsls	r1, r1, #1
    5e3e:	4059      	eors	r1, r3
    5e40:	0053      	lsls	r3, r2, #1
    5e42:	b289      	uxth	r1, r1
    5e44:	b29b      	uxth	r3, r3
    5e46:	0412      	lsls	r2, r2, #16
    5e48:	d500      	bpl.n	5e4c <bloomFilterAddressCheck+0xc4c>
    5e4a:	e1eb      	b.n	6224 <bloomFilterAddressCheck+0x1024>
    5e4c:	4aaf      	ldr	r2, [pc, #700]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5e4e:	b299      	uxth	r1, r3
    5e50:	0049      	lsls	r1, r1, #1
    5e52:	4051      	eors	r1, r2
    5e54:	005a      	lsls	r2, r3, #1
    5e56:	b289      	uxth	r1, r1
    5e58:	b292      	uxth	r2, r2
    5e5a:	041b      	lsls	r3, r3, #16
    5e5c:	d500      	bpl.n	5e60 <bloomFilterAddressCheck+0xc60>
    5e5e:	e1df      	b.n	6220 <bloomFilterAddressCheck+0x1020>
    5e60:	b293      	uxth	r3, r2
    5e62:	4caa      	ldr	r4, [pc, #680]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5e64:	005b      	lsls	r3, r3, #1
    5e66:	405c      	eors	r4, r3
    5e68:	b2a1      	uxth	r1, r4
    5e6a:	0054      	lsls	r4, r2, #1
    5e6c:	b2a4      	uxth	r4, r4
    5e6e:	0413      	lsls	r3, r2, #16
    5e70:	d500      	bpl.n	5e74 <bloomFilterAddressCheck+0xc74>
    5e72:	e149      	b.n	6108 <bloomFilterAddressCheck+0xf08>
    5e74:	b223      	sxth	r3, r4
    5e76:	b2a2      	uxth	r2, r4
    5e78:	469b      	mov	fp, r3
    5e7a:	4ba4      	ldr	r3, [pc, #656]	; (610c <bloomFilterAddressCheck+0xf0c>)
    5e7c:	0052      	lsls	r2, r2, #1
    5e7e:	4053      	eors	r3, r2
    5e80:	00f5      	lsls	r5, r6, #3
    5e82:	b29b      	uxth	r3, r3
    5e84:	0064      	lsls	r4, r4, #1
    5e86:	3d01      	subs	r5, #1
    5e88:	4698      	mov	r8, r3
    5e8a:	b2a4      	uxth	r4, r4
    5e8c:	b2ed      	uxtb	r5, r5
    5e8e:	2f00      	cmp	r7, #0
    5e90:	da00      	bge.n	5e94 <bloomFilterAddressCheck+0xc94>
    5e92:	e136      	b.n	6102 <bloomFilterAddressCheck+0xf02>
    5e94:	4648      	mov	r0, r9
    5e96:	4b9e      	ldr	r3, [pc, #632]	; (6110 <bloomFilterAddressCheck+0xf10>)
    5e98:	b280      	uxth	r0, r0
    5e9a:	0029      	movs	r1, r5
    5e9c:	469a      	mov	sl, r3
    5e9e:	4798      	blx	r3
    5ea0:	465b      	mov	r3, fp
    5ea2:	4689      	mov	r9, r1
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	da00      	bge.n	5eaa <bloomFilterAddressCheck+0xcaa>
    5ea8:	e129      	b.n	60fe <bloomFilterAddressCheck+0xefe>
    5eaa:	b2a0      	uxth	r0, r4
    5eac:	0029      	movs	r1, r5
    5eae:	47d0      	blx	sl
    5eb0:	b2cb      	uxtb	r3, r1
    5eb2:	08db      	lsrs	r3, r3, #3
    5eb4:	9f03      	ldr	r7, [sp, #12]
    5eb6:	3301      	adds	r3, #1
    5eb8:	1af3      	subs	r3, r6, r3
    5eba:	466a      	mov	r2, sp
    5ebc:	5cf8      	ldrb	r0, [r7, r3]
    5ebe:	464b      	mov	r3, r9
    5ec0:	7113      	strb	r3, [r2, #4]
    5ec2:	7913      	ldrb	r3, [r2, #4]
    5ec4:	2201      	movs	r2, #1
    5ec6:	08db      	lsrs	r3, r3, #3
    5ec8:	3301      	adds	r3, #1
    5eca:	1af6      	subs	r6, r6, r3
    5ecc:	2407      	movs	r4, #7
    5ece:	464b      	mov	r3, r9
    5ed0:	0015      	movs	r5, r2
    5ed2:	4023      	ands	r3, r4
    5ed4:	409d      	lsls	r5, r3
    5ed6:	5dbb      	ldrb	r3, [r7, r6]
    5ed8:	421d      	tst	r5, r3
    5eda:	d006      	beq.n	5eea <bloomFilterAddressCheck+0xcea>
    5edc:	4021      	ands	r1, r4
    5ede:	408a      	lsls	r2, r1
    5ee0:	4002      	ands	r2, r0
    5ee2:	1e50      	subs	r0, r2, #1
    5ee4:	4182      	sbcs	r2, r0
    5ee6:	b2d3      	uxtb	r3, r2
    5ee8:	9300      	str	r3, [sp, #0]
    5eea:	9800      	ldr	r0, [sp, #0]
    5eec:	b007      	add	sp, #28
    5eee:	bc3c      	pop	{r2, r3, r4, r5}
    5ef0:	4690      	mov	r8, r2
    5ef2:	4699      	mov	r9, r3
    5ef4:	46a2      	mov	sl, r4
    5ef6:	46ab      	mov	fp, r5
    5ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5efa:	1c1a      	adds	r2, r3, #0
    5efc:	e4ef      	b.n	58de <bloomFilterAddressCheck+0x6de>
    5efe:	1c08      	adds	r0, r1, #0
    5f00:	f7ff f9a2 	bl	5248 <bloomFilterAddressCheck+0x48>
    5f04:	1c0c      	adds	r4, r1, #0
    5f06:	b2a0      	uxth	r0, r4
    5f08:	4982      	ldr	r1, [pc, #520]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5f0a:	0040      	lsls	r0, r0, #1
    5f0c:	4041      	eors	r1, r0
    5f0e:	b289      	uxth	r1, r1
    5f10:	0060      	lsls	r0, r4, #1
    5f12:	0423      	lsls	r3, r4, #16
    5f14:	d401      	bmi.n	5f1a <bloomFilterAddressCheck+0xd1a>
    5f16:	f7ff f9ac 	bl	5272 <bloomFilterAddressCheck+0x72>
    5f1a:	1c08      	adds	r0, r1, #0
    5f1c:	b284      	uxth	r4, r0
    5f1e:	497d      	ldr	r1, [pc, #500]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5f20:	0064      	lsls	r4, r4, #1
    5f22:	4061      	eors	r1, r4
    5f24:	b289      	uxth	r1, r1
    5f26:	0044      	lsls	r4, r0, #1
    5f28:	0403      	lsls	r3, r0, #16
    5f2a:	d401      	bmi.n	5f30 <bloomFilterAddressCheck+0xd30>
    5f2c:	f7ff f9ab 	bl	5286 <bloomFilterAddressCheck+0x86>
    5f30:	1c0c      	adds	r4, r1, #0
    5f32:	b2a0      	uxth	r0, r4
    5f34:	4977      	ldr	r1, [pc, #476]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5f36:	0040      	lsls	r0, r0, #1
    5f38:	4041      	eors	r1, r0
    5f3a:	b289      	uxth	r1, r1
    5f3c:	0060      	lsls	r0, r4, #1
    5f3e:	0423      	lsls	r3, r4, #16
    5f40:	d401      	bmi.n	5f46 <bloomFilterAddressCheck+0xd46>
    5f42:	f7ff f9aa 	bl	529a <bloomFilterAddressCheck+0x9a>
    5f46:	1c08      	adds	r0, r1, #0
    5f48:	b284      	uxth	r4, r0
    5f4a:	4972      	ldr	r1, [pc, #456]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5f4c:	0064      	lsls	r4, r4, #1
    5f4e:	4061      	eors	r1, r4
    5f50:	b289      	uxth	r1, r1
    5f52:	0044      	lsls	r4, r0, #1
    5f54:	0403      	lsls	r3, r0, #16
    5f56:	d401      	bmi.n	5f5c <bloomFilterAddressCheck+0xd5c>
    5f58:	f7ff f9a9 	bl	52ae <bloomFilterAddressCheck+0xae>
    5f5c:	1c0c      	adds	r4, r1, #0
    5f5e:	b2a0      	uxth	r0, r4
    5f60:	496c      	ldr	r1, [pc, #432]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5f62:	0040      	lsls	r0, r0, #1
    5f64:	4041      	eors	r1, r0
    5f66:	b289      	uxth	r1, r1
    5f68:	0060      	lsls	r0, r4, #1
    5f6a:	0423      	lsls	r3, r4, #16
    5f6c:	d401      	bmi.n	5f72 <bloomFilterAddressCheck+0xd72>
    5f6e:	f7ff f9a8 	bl	52c2 <bloomFilterAddressCheck+0xc2>
    5f72:	1c08      	adds	r0, r1, #0
    5f74:	f7ff f9a5 	bl	52c2 <bloomFilterAddressCheck+0xc2>
    5f78:	1c0d      	adds	r5, r1, #0
    5f7a:	f7ff f9af 	bl	52dc <bloomFilterAddressCheck+0xdc>
    5f7e:	1c01      	adds	r1, r0, #0
    5f80:	b28d      	uxth	r5, r1
    5f82:	4864      	ldr	r0, [pc, #400]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5f84:	006d      	lsls	r5, r5, #1
    5f86:	4045      	eors	r5, r0
    5f88:	b2ad      	uxth	r5, r5
    5f8a:	0048      	lsls	r0, r1, #1
    5f8c:	040b      	lsls	r3, r1, #16
    5f8e:	d401      	bmi.n	5f94 <bloomFilterAddressCheck+0xd94>
    5f90:	f7ff f9b9 	bl	5306 <bloomFilterAddressCheck+0x106>
    5f94:	1c28      	adds	r0, r5, #0
    5f96:	b285      	uxth	r5, r0
    5f98:	495e      	ldr	r1, [pc, #376]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5f9a:	006d      	lsls	r5, r5, #1
    5f9c:	4069      	eors	r1, r5
    5f9e:	b289      	uxth	r1, r1
    5fa0:	0045      	lsls	r5, r0, #1
    5fa2:	0403      	lsls	r3, r0, #16
    5fa4:	d401      	bmi.n	5faa <bloomFilterAddressCheck+0xdaa>
    5fa6:	f7ff f9b8 	bl	531a <bloomFilterAddressCheck+0x11a>
    5faa:	1c0d      	adds	r5, r1, #0
    5fac:	b2a8      	uxth	r0, r5
    5fae:	4959      	ldr	r1, [pc, #356]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5fb0:	0040      	lsls	r0, r0, #1
    5fb2:	4041      	eors	r1, r0
    5fb4:	b289      	uxth	r1, r1
    5fb6:	0068      	lsls	r0, r5, #1
    5fb8:	042b      	lsls	r3, r5, #16
    5fba:	d401      	bmi.n	5fc0 <bloomFilterAddressCheck+0xdc0>
    5fbc:	f7ff f9b7 	bl	532e <bloomFilterAddressCheck+0x12e>
    5fc0:	1c08      	adds	r0, r1, #0
    5fc2:	b285      	uxth	r5, r0
    5fc4:	4953      	ldr	r1, [pc, #332]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5fc6:	006d      	lsls	r5, r5, #1
    5fc8:	4069      	eors	r1, r5
    5fca:	b289      	uxth	r1, r1
    5fcc:	0045      	lsls	r5, r0, #1
    5fce:	0403      	lsls	r3, r0, #16
    5fd0:	d401      	bmi.n	5fd6 <bloomFilterAddressCheck+0xdd6>
    5fd2:	f7ff f9b6 	bl	5342 <bloomFilterAddressCheck+0x142>
    5fd6:	1c0d      	adds	r5, r1, #0
    5fd8:	b2a8      	uxth	r0, r5
    5fda:	494e      	ldr	r1, [pc, #312]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5fdc:	0040      	lsls	r0, r0, #1
    5fde:	4041      	eors	r1, r0
    5fe0:	b289      	uxth	r1, r1
    5fe2:	0068      	lsls	r0, r5, #1
    5fe4:	042b      	lsls	r3, r5, #16
    5fe6:	d401      	bmi.n	5fec <bloomFilterAddressCheck+0xdec>
    5fe8:	f7ff f9b5 	bl	5356 <bloomFilterAddressCheck+0x156>
    5fec:	1c08      	adds	r0, r1, #0
    5fee:	b285      	uxth	r5, r0
    5ff0:	4948      	ldr	r1, [pc, #288]	; (6114 <bloomFilterAddressCheck+0xf14>)
    5ff2:	006d      	lsls	r5, r5, #1
    5ff4:	4069      	eors	r1, r5
    5ff6:	b289      	uxth	r1, r1
    5ff8:	0045      	lsls	r5, r0, #1
    5ffa:	0403      	lsls	r3, r0, #16
    5ffc:	d401      	bmi.n	6002 <bloomFilterAddressCheck+0xe02>
    5ffe:	f7ff f9b4 	bl	536a <bloomFilterAddressCheck+0x16a>
    6002:	1c0d      	adds	r5, r1, #0
    6004:	f7ff f9b1 	bl	536a <bloomFilterAddressCheck+0x16a>
    6008:	4689      	mov	r9, r1
    600a:	f7ff f9bc 	bl	5386 <bloomFilterAddressCheck+0x186>
    600e:	4651      	mov	r1, sl
    6010:	f7ff f9c9 	bl	53a6 <bloomFilterAddressCheck+0x1a6>
    6014:	464d      	mov	r5, r9
    6016:	f7ff f9d3 	bl	53c0 <bloomFilterAddressCheck+0x1c0>
    601a:	4689      	mov	r9, r1
    601c:	f7ff f9dd 	bl	53da <bloomFilterAddressCheck+0x1da>
    6020:	1c0d      	adds	r5, r1, #0
    6022:	f7ff f9e9 	bl	53f8 <bloomFilterAddressCheck+0x1f8>
    6026:	4689      	mov	r9, r1
    6028:	f7ff f9f3 	bl	5412 <bloomFilterAddressCheck+0x212>
    602c:	1c0d      	adds	r5, r1, #0
    602e:	f7ff f9ff 	bl	5430 <bloomFilterAddressCheck+0x230>
    6032:	468a      	mov	sl, r1
    6034:	f7ff fa09 	bl	544a <bloomFilterAddressCheck+0x24a>
    6038:	464d      	mov	r5, r9
    603a:	f7ff fa19 	bl	5470 <bloomFilterAddressCheck+0x270>
    603e:	4655      	mov	r5, sl
    6040:	f7ff fa26 	bl	5490 <bloomFilterAddressCheck+0x290>
    6044:	46d1      	mov	r9, sl
    6046:	f7ff fa36 	bl	54b6 <bloomFilterAddressCheck+0x2b6>
    604a:	46aa      	mov	sl, r5
    604c:	f7ff fa43 	bl	54d6 <bloomFilterAddressCheck+0x2d6>
    6050:	46a9      	mov	r9, r5
    6052:	f7ff fa50 	bl	54f6 <bloomFilterAddressCheck+0x2f6>
    6056:	46aa      	mov	sl, r5
    6058:	f7ff fa5d 	bl	5516 <bloomFilterAddressCheck+0x316>
    605c:	46a9      	mov	r9, r5
    605e:	f7ff fa6a 	bl	5536 <bloomFilterAddressCheck+0x336>
    6062:	46aa      	mov	sl, r5
    6064:	f7ff fa77 	bl	5556 <bloomFilterAddressCheck+0x356>
    6068:	464d      	mov	r5, r9
    606a:	f7ff fa87 	bl	557c <bloomFilterAddressCheck+0x37c>
    606e:	4655      	mov	r5, sl
    6070:	f7ff fa99 	bl	55a6 <bloomFilterAddressCheck+0x3a6>
    6074:	46d1      	mov	r9, sl
    6076:	f7ff faa7 	bl	55c8 <bloomFilterAddressCheck+0x3c8>
    607a:	46aa      	mov	sl, r5
    607c:	f7ff faba 	bl	55f4 <bloomFilterAddressCheck+0x3f4>
    6080:	46a9      	mov	r9, r5
    6082:	f7ff fac7 	bl	5614 <bloomFilterAddressCheck+0x414>
    6086:	46aa      	mov	sl, r5
    6088:	f7ff fad4 	bl	5634 <bloomFilterAddressCheck+0x434>
    608c:	46a9      	mov	r9, r5
    608e:	f7ff fae1 	bl	5654 <bloomFilterAddressCheck+0x454>
    6092:	46aa      	mov	sl, r5
    6094:	f7ff faee 	bl	5674 <bloomFilterAddressCheck+0x474>
    6098:	464d      	mov	r5, r9
    609a:	f7ff fafe 	bl	569a <bloomFilterAddressCheck+0x49a>
    609e:	4655      	mov	r5, sl
    60a0:	f7ff fb10 	bl	56c4 <bloomFilterAddressCheck+0x4c4>
    60a4:	46d1      	mov	r9, sl
    60a6:	f7ff fb1e 	bl	56e6 <bloomFilterAddressCheck+0x4e6>
    60aa:	46aa      	mov	sl, r5
    60ac:	f7ff fb2b 	bl	5706 <bloomFilterAddressCheck+0x506>
    60b0:	46a9      	mov	r9, r5
    60b2:	f7ff fb38 	bl	5726 <bloomFilterAddressCheck+0x526>
    60b6:	46aa      	mov	sl, r5
    60b8:	f7ff fb45 	bl	5746 <bloomFilterAddressCheck+0x546>
    60bc:	46a9      	mov	r9, r5
    60be:	f7ff fb52 	bl	5766 <bloomFilterAddressCheck+0x566>
    60c2:	46aa      	mov	sl, r5
    60c4:	f7ff fb5f 	bl	5786 <bloomFilterAddressCheck+0x586>
    60c8:	464d      	mov	r5, r9
    60ca:	f7ff fb6f 	bl	57ac <bloomFilterAddressCheck+0x5ac>
    60ce:	4655      	mov	r5, sl
    60d0:	f7ff fb81 	bl	57d6 <bloomFilterAddressCheck+0x5d6>
    60d4:	46ca      	mov	sl, r9
    60d6:	f7ff fb8f 	bl	57f8 <bloomFilterAddressCheck+0x5f8>
    60da:	46a9      	mov	r9, r5
    60dc:	f7ff fb9c 	bl	5818 <bloomFilterAddressCheck+0x618>
    60e0:	46aa      	mov	sl, r5
    60e2:	f7ff fba9 	bl	5838 <bloomFilterAddressCheck+0x638>
    60e6:	46a9      	mov	r9, r5
    60e8:	f7ff fbb6 	bl	5858 <bloomFilterAddressCheck+0x658>
    60ec:	46aa      	mov	sl, r5
    60ee:	f7ff fbc3 	bl	5878 <bloomFilterAddressCheck+0x678>
    60f2:	46a9      	mov	r9, r5
    60f4:	f7ff fbd0 	bl	5898 <bloomFilterAddressCheck+0x698>
    60f8:	1c2a      	adds	r2, r5, #0
    60fa:	f7ff fbdf 	bl	58bc <bloomFilterAddressCheck+0x6bc>
    60fe:	4644      	mov	r4, r8
    6100:	e6d3      	b.n	5eaa <bloomFilterAddressCheck+0xcaa>
    6102:	466b      	mov	r3, sp
    6104:	8a98      	ldrh	r0, [r3, #20]
    6106:	e6c6      	b.n	5e96 <bloomFilterAddressCheck+0xc96>
    6108:	1c0c      	adds	r4, r1, #0
    610a:	e6b3      	b.n	5e74 <bloomFilterAddressCheck+0xc74>
    610c:	ffff8005 	.word	0xffff8005
    6110:	000079b9 	.word	0x000079b9
    6114:	00001021 	.word	0x00001021
    6118:	1c19      	adds	r1, r3, #0
    611a:	b28a      	uxth	r2, r1
    611c:	4b52      	ldr	r3, [pc, #328]	; (6268 <bloomFilterAddressCheck+0x1068>)
    611e:	0052      	lsls	r2, r2, #1
    6120:	4053      	eors	r3, r2
    6122:	b29b      	uxth	r3, r3
    6124:	004a      	lsls	r2, r1, #1
    6126:	0409      	lsls	r1, r1, #16
    6128:	d400      	bmi.n	612c <bloomFilterAddressCheck+0xf2c>
    612a:	e5bb      	b.n	5ca4 <bloomFilterAddressCheck+0xaa4>
    612c:	1c1a      	adds	r2, r3, #0
    612e:	b291      	uxth	r1, r2
    6130:	4b4d      	ldr	r3, [pc, #308]	; (6268 <bloomFilterAddressCheck+0x1068>)
    6132:	0049      	lsls	r1, r1, #1
    6134:	404b      	eors	r3, r1
    6136:	b29b      	uxth	r3, r3
    6138:	0055      	lsls	r5, r2, #1
    613a:	0412      	lsls	r2, r2, #16
    613c:	d400      	bmi.n	6140 <bloomFilterAddressCheck+0xf40>
    613e:	e5ba      	b.n	5cb6 <bloomFilterAddressCheck+0xab6>
    6140:	1c1d      	adds	r5, r3, #0
    6142:	e5b8      	b.n	5cb6 <bloomFilterAddressCheck+0xab6>
    6144:	1c1a      	adds	r2, r3, #0
    6146:	e59b      	b.n	5c80 <bloomFilterAddressCheck+0xa80>
    6148:	1c19      	adds	r1, r3, #0
    614a:	e590      	b.n	5c6e <bloomFilterAddressCheck+0xa6e>
    614c:	1c1a      	adds	r2, r3, #0
    614e:	e585      	b.n	5c5c <bloomFilterAddressCheck+0xa5c>
    6150:	1c11      	adds	r1, r2, #0
    6152:	e57a      	b.n	5c4a <bloomFilterAddressCheck+0xa4a>
    6154:	1c0b      	adds	r3, r1, #0
    6156:	e56f      	b.n	5c38 <bloomFilterAddressCheck+0xa38>
    6158:	1c1a      	adds	r2, r3, #0
    615a:	e562      	b.n	5c22 <bloomFilterAddressCheck+0xa22>
    615c:	1c19      	adds	r1, r3, #0
    615e:	e557      	b.n	5c10 <bloomFilterAddressCheck+0xa10>
    6160:	1c1a      	adds	r2, r3, #0
    6162:	e54c      	b.n	5bfe <bloomFilterAddressCheck+0x9fe>
    6164:	1c19      	adds	r1, r3, #0
    6166:	e541      	b.n	5bec <bloomFilterAddressCheck+0x9ec>
    6168:	1c1a      	adds	r2, r3, #0
    616a:	e536      	b.n	5bda <bloomFilterAddressCheck+0x9da>
    616c:	1c19      	adds	r1, r3, #0
    616e:	e52b      	b.n	5bc8 <bloomFilterAddressCheck+0x9c8>
    6170:	1c0a      	adds	r2, r1, #0
    6172:	e520      	b.n	5bb6 <bloomFilterAddressCheck+0x9b6>
    6174:	1c13      	adds	r3, r2, #0
    6176:	e515      	b.n	5ba4 <bloomFilterAddressCheck+0x9a4>
    6178:	1c02      	adds	r2, r0, #0
    617a:	e509      	b.n	5b90 <bloomFilterAddressCheck+0x990>
    617c:	1c03      	adds	r3, r0, #0
    617e:	e4fd      	b.n	5b7c <bloomFilterAddressCheck+0x97c>
    6180:	1c02      	adds	r2, r0, #0
    6182:	e4f1      	b.n	5b68 <bloomFilterAddressCheck+0x968>
    6184:	1c03      	adds	r3, r0, #0
    6186:	e4e5      	b.n	5b54 <bloomFilterAddressCheck+0x954>
    6188:	1c02      	adds	r2, r0, #0
    618a:	e4d9      	b.n	5b40 <bloomFilterAddressCheck+0x940>
    618c:	1c03      	adds	r3, r0, #0
    618e:	e4cd      	b.n	5b2c <bloomFilterAddressCheck+0x92c>
    6190:	1c02      	adds	r2, r0, #0
    6192:	e4c1      	b.n	5b18 <bloomFilterAddressCheck+0x918>
    6194:	1c23      	adds	r3, r4, #0
    6196:	e4b5      	b.n	5b04 <bloomFilterAddressCheck+0x904>
    6198:	1c22      	adds	r2, r4, #0
    619a:	e4a8      	b.n	5aee <bloomFilterAddressCheck+0x8ee>
    619c:	1c23      	adds	r3, r4, #0
    619e:	e49c      	b.n	5ada <bloomFilterAddressCheck+0x8da>
    61a0:	1c22      	adds	r2, r4, #0
    61a2:	e490      	b.n	5ac6 <bloomFilterAddressCheck+0x8c6>
    61a4:	1c23      	adds	r3, r4, #0
    61a6:	e484      	b.n	5ab2 <bloomFilterAddressCheck+0x8b2>
    61a8:	1c22      	adds	r2, r4, #0
    61aa:	e478      	b.n	5a9e <bloomFilterAddressCheck+0x89e>
    61ac:	1c23      	adds	r3, r4, #0
    61ae:	e46c      	b.n	5a8a <bloomFilterAddressCheck+0x88a>
    61b0:	1c22      	adds	r2, r4, #0
    61b2:	e460      	b.n	5a76 <bloomFilterAddressCheck+0x876>
    61b4:	1c2b      	adds	r3, r5, #0
    61b6:	e454      	b.n	5a62 <bloomFilterAddressCheck+0x862>
    61b8:	1c2a      	adds	r2, r5, #0
    61ba:	e447      	b.n	5a4c <bloomFilterAddressCheck+0x84c>
    61bc:	1c2b      	adds	r3, r5, #0
    61be:	e43b      	b.n	5a38 <bloomFilterAddressCheck+0x838>
    61c0:	1c19      	adds	r1, r3, #0
    61c2:	b28a      	uxth	r2, r1
    61c4:	4b28      	ldr	r3, [pc, #160]	; (6268 <bloomFilterAddressCheck+0x1068>)
    61c6:	0052      	lsls	r2, r2, #1
    61c8:	4053      	eors	r3, r2
    61ca:	b29b      	uxth	r3, r3
    61cc:	0048      	lsls	r0, r1, #1
    61ce:	040a      	lsls	r2, r1, #16
    61d0:	d400      	bmi.n	61d4 <bloomFilterAddressCheck+0xfd4>
    61d2:	e5fe      	b.n	5dd2 <bloomFilterAddressCheck+0xbd2>
    61d4:	1c18      	adds	r0, r3, #0
    61d6:	b282      	uxth	r2, r0
    61d8:	4b23      	ldr	r3, [pc, #140]	; (6268 <bloomFilterAddressCheck+0x1068>)
    61da:	0052      	lsls	r2, r2, #1
    61dc:	4053      	eors	r3, r2
    61de:	b29b      	uxth	r3, r3
    61e0:	0042      	lsls	r2, r0, #1
    61e2:	0401      	lsls	r1, r0, #16
    61e4:	d400      	bmi.n	61e8 <bloomFilterAddressCheck+0xfe8>
    61e6:	e5fd      	b.n	5de4 <bloomFilterAddressCheck+0xbe4>
    61e8:	1c1a      	adds	r2, r3, #0
    61ea:	e5fb      	b.n	5de4 <bloomFilterAddressCheck+0xbe4>
    61ec:	1c1a      	adds	r2, r3, #0
    61ee:	e5de      	b.n	5dae <bloomFilterAddressCheck+0xbae>
    61f0:	1c19      	adds	r1, r3, #0
    61f2:	e5d3      	b.n	5d9c <bloomFilterAddressCheck+0xb9c>
    61f4:	1c1a      	adds	r2, r3, #0
    61f6:	e5c8      	b.n	5d8a <bloomFilterAddressCheck+0xb8a>
    61f8:	1c11      	adds	r1, r2, #0
    61fa:	e5bd      	b.n	5d78 <bloomFilterAddressCheck+0xb78>
    61fc:	1c13      	adds	r3, r2, #0
    61fe:	e5b2      	b.n	5d66 <bloomFilterAddressCheck+0xb66>
    6200:	1c1d      	adds	r5, r3, #0
    6202:	e5a2      	b.n	5d4a <bloomFilterAddressCheck+0xb4a>
    6204:	1c1a      	adds	r2, r3, #0
    6206:	e597      	b.n	5d38 <bloomFilterAddressCheck+0xb38>
    6208:	1c19      	adds	r1, r3, #0
    620a:	e58c      	b.n	5d26 <bloomFilterAddressCheck+0xb26>
    620c:	1c1a      	adds	r2, r3, #0
    620e:	e581      	b.n	5d14 <bloomFilterAddressCheck+0xb14>
    6210:	1c19      	adds	r1, r3, #0
    6212:	e576      	b.n	5d02 <bloomFilterAddressCheck+0xb02>
    6214:	1c1a      	adds	r2, r3, #0
    6216:	e56b      	b.n	5cf0 <bloomFilterAddressCheck+0xaf0>
    6218:	1c11      	adds	r1, r2, #0
    621a:	e560      	b.n	5cde <bloomFilterAddressCheck+0xade>
    621c:	1c13      	adds	r3, r2, #0
    621e:	e555      	b.n	5ccc <bloomFilterAddressCheck+0xacc>
    6220:	1c0a      	adds	r2, r1, #0
    6222:	e61d      	b.n	5e60 <bloomFilterAddressCheck+0xc60>
    6224:	1c0b      	adds	r3, r1, #0
    6226:	e611      	b.n	5e4c <bloomFilterAddressCheck+0xc4c>
    6228:	1c0a      	adds	r2, r1, #0
    622a:	e605      	b.n	5e38 <bloomFilterAddressCheck+0xc38>
    622c:	1c0b      	adds	r3, r1, #0
    622e:	e5f9      	b.n	5e24 <bloomFilterAddressCheck+0xc24>
    6230:	1c0a      	adds	r2, r1, #0
    6232:	e5ed      	b.n	5e10 <bloomFilterAddressCheck+0xc10>
    6234:	1c03      	adds	r3, r0, #0
    6236:	e5e1      	b.n	5dfc <bloomFilterAddressCheck+0xbfc>
    6238:	1c2a      	adds	r2, r5, #0
    623a:	f7ff fbf3 	bl	5a24 <bloomFilterAddressCheck+0x824>
    623e:	1c2b      	adds	r3, r5, #0
    6240:	f7ff fbe5 	bl	5a0e <bloomFilterAddressCheck+0x80e>
    6244:	1c2a      	adds	r2, r5, #0
    6246:	f7ff fbd7 	bl	59f8 <bloomFilterAddressCheck+0x7f8>
    624a:	1c2b      	adds	r3, r5, #0
    624c:	f7ff fbc9 	bl	59e2 <bloomFilterAddressCheck+0x7e2>
    6250:	1c2a      	adds	r2, r5, #0
    6252:	f7ff fbbb 	bl	59cc <bloomFilterAddressCheck+0x7cc>
    6256:	1c13      	adds	r3, r2, #0
    6258:	f7ff fbac 	bl	59b4 <bloomFilterAddressCheck+0x7b4>
    625c:	464a      	mov	r2, r9
    625e:	f7ff fb8e 	bl	597e <bloomFilterAddressCheck+0x77e>
    6262:	1c2a      	adds	r2, r5, #0
    6264:	f7ff fb4a 	bl	58fc <bloomFilterAddressCheck+0x6fc>
    6268:	ffff8005 	.word	0xffff8005

0000626c <MiApp_SubscribeDataIndicationCallback>:
    626c:	2800      	cmp	r0, #0
    626e:	d003      	beq.n	6278 <MiApp_SubscribeDataIndicationCallback+0xc>
    6270:	4b02      	ldr	r3, [pc, #8]	; (627c <MiApp_SubscribeDataIndicationCallback+0x10>)
    6272:	6018      	str	r0, [r3, #0]
    6274:	2001      	movs	r0, #1
    6276:	4770      	bx	lr
    6278:	2000      	movs	r0, #0
    627a:	e7fc      	b.n	6276 <MiApp_SubscribeDataIndicationCallback+0xa>
    627c:	20000378 	.word	0x20000378

00006280 <prepareGenericHeader>:
    6280:	b510      	push	{r4, lr}
    6282:	2403      	movs	r4, #3
    6284:	7018      	strb	r0, [r3, #0]
    6286:	7858      	ldrb	r0, [r3, #1]
    6288:	809a      	strh	r2, [r3, #4]
    628a:	43a0      	bics	r0, r4
    628c:	2401      	movs	r4, #1
    628e:	4304      	orrs	r4, r0
    6290:	20f7      	movs	r0, #247	; 0xf7
    6292:	4020      	ands	r0, r4
    6294:	2404      	movs	r4, #4
    6296:	4320      	orrs	r0, r4
    6298:	2447      	movs	r4, #71	; 0x47
    629a:	4020      	ands	r0, r4
    629c:	7058      	strb	r0, [r3, #1]
    629e:	4802      	ldr	r0, [pc, #8]	; (62a8 <prepareGenericHeader+0x28>)
    62a0:	80d9      	strh	r1, [r3, #6]
    62a2:	8800      	ldrh	r0, [r0, #0]
    62a4:	8058      	strh	r0, [r3, #2]
    62a6:	bd10      	pop	{r4, pc}
    62a8:	200013c4 	.word	0x200013c4

000062ac <generalFrameConstruct>:
    62ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62ae:	000c      	movs	r4, r1
    62b0:	7802      	ldrb	r2, [r0, #0]
    62b2:	0003      	movs	r3, r0
    62b4:	700a      	strb	r2, [r1, #0]
    62b6:	7842      	ldrb	r2, [r0, #1]
    62b8:	704a      	strb	r2, [r1, #1]
    62ba:	491d      	ldr	r1, [pc, #116]	; (6330 <generalFrameConstruct+0x84>)
    62bc:	780a      	ldrb	r2, [r1, #0]
    62be:	3201      	adds	r2, #1
    62c0:	b2d2      	uxtb	r2, r2
    62c2:	70a2      	strb	r2, [r4, #2]
    62c4:	700a      	strb	r2, [r1, #0]
    62c6:	7842      	ldrb	r2, [r0, #1]
    62c8:	0691      	lsls	r1, r2, #26
    62ca:	d42b      	bmi.n	6324 <generalFrameConstruct+0x78>
    62cc:	8842      	ldrh	r2, [r0, #2]
    62ce:	2516      	movs	r5, #22
    62d0:	70e2      	strb	r2, [r4, #3]
    62d2:	8842      	ldrh	r2, [r0, #2]
    62d4:	260e      	movs	r6, #14
    62d6:	0a12      	lsrs	r2, r2, #8
    62d8:	7122      	strb	r2, [r4, #4]
    62da:	8882      	ldrh	r2, [r0, #4]
    62dc:	210a      	movs	r1, #10
    62de:	7162      	strb	r2, [r4, #5]
    62e0:	8882      	ldrh	r2, [r0, #4]
    62e2:	2709      	movs	r7, #9
    62e4:	0a12      	lsrs	r2, r2, #8
    62e6:	71a2      	strb	r2, [r4, #6]
    62e8:	88c2      	ldrh	r2, [r0, #6]
    62ea:	71e2      	strb	r2, [r4, #7]
    62ec:	88c2      	ldrh	r2, [r0, #6]
    62ee:	0a12      	lsrs	r2, r2, #8
    62f0:	7222      	strb	r2, [r4, #8]
    62f2:	7842      	ldrb	r2, [r0, #1]
    62f4:	2009      	movs	r0, #9
    62f6:	0752      	lsls	r2, r2, #29
    62f8:	d513      	bpl.n	6322 <generalFrameConstruct+0x76>
    62fa:	4a0e      	ldr	r2, [pc, #56]	; (6334 <generalFrameConstruct+0x88>)
    62fc:	6810      	ldr	r0, [r2, #0]
    62fe:	2220      	movs	r2, #32
    6300:	5c82      	ldrb	r2, [r0, r2]
    6302:	480d      	ldr	r0, [pc, #52]	; (6338 <generalFrameConstruct+0x8c>)
    6304:	741a      	strb	r2, [r3, #16]
    6306:	6800      	ldr	r0, [r0, #0]
    6308:	3314      	adds	r3, #20
    630a:	6018      	str	r0, [r3, #0]
    630c:	55e2      	strb	r2, [r4, r7]
    630e:	1860      	adds	r0, r4, r1
    6310:	2204      	movs	r2, #4
    6312:	0019      	movs	r1, r3
    6314:	4f09      	ldr	r7, [pc, #36]	; (633c <generalFrameConstruct+0x90>)
    6316:	47b8      	blx	r7
    6318:	19a0      	adds	r0, r4, r6
    631a:	2208      	movs	r2, #8
    631c:	4908      	ldr	r1, [pc, #32]	; (6340 <generalFrameConstruct+0x94>)
    631e:	47b8      	blx	r7
    6320:	0028      	movs	r0, r5
    6322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6324:	2510      	movs	r5, #16
    6326:	2608      	movs	r6, #8
    6328:	2104      	movs	r1, #4
    632a:	2703      	movs	r7, #3
    632c:	2003      	movs	r0, #3
    632e:	e7e2      	b.n	62f6 <generalFrameConstruct+0x4a>
    6330:	200013ac 	.word	0x200013ac
    6334:	20001394 	.word	0x20001394
    6338:	20001414 	.word	0x20001414
    633c:	00007a7f 	.word	0x00007a7f
    6340:	2000004c 	.word	0x2000004c

00006344 <frameTransmit>:
    6344:	b5f0      	push	{r4, r5, r6, r7, lr}
    6346:	4657      	mov	r7, sl
    6348:	464e      	mov	r6, r9
    634a:	46de      	mov	lr, fp
    634c:	4645      	mov	r5, r8
    634e:	b5e0      	push	{r5, r6, r7, lr}
    6350:	b085      	sub	sp, #20
    6352:	4699      	mov	r9, r3
    6354:	ab0e      	add	r3, sp, #56	; 0x38
    6356:	781e      	ldrb	r6, [r3, #0]
    6358:	ab10      	add	r3, sp, #64	; 0x40
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	0007      	movs	r7, r0
    635e:	469a      	mov	sl, r3
    6360:	2028      	movs	r0, #40	; 0x28
    6362:	4b45      	ldr	r3, [pc, #276]	; (6478 <frameTransmit+0x134>)
    6364:	4688      	mov	r8, r1
    6366:	9203      	str	r2, [sp, #12]
    6368:	4798      	blx	r3
    636a:	1e04      	subs	r4, r0, #0
    636c:	d100      	bne.n	6370 <frameTransmit+0x2c>
    636e:	e081      	b.n	6474 <frameTransmit+0x130>
    6370:	2300      	movs	r3, #0
    6372:	7603      	strb	r3, [r0, #24]
    6374:	787b      	ldrb	r3, [r7, #1]
    6376:	075b      	lsls	r3, r3, #29
    6378:	d45b      	bmi.n	6432 <frameTransmit+0xee>
    637a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    637c:	781a      	ldrb	r2, [r3, #0]
    637e:	785b      	ldrb	r3, [r3, #1]
    6380:	2e02      	cmp	r6, #2
    6382:	d06b      	beq.n	645c <frameTransmit+0x118>
    6384:	2101      	movs	r1, #1
    6386:	2200      	movs	r2, #0
    6388:	2020      	movs	r0, #32
    638a:	7e23      	ldrb	r3, [r4, #24]
    638c:	0149      	lsls	r1, r1, #5
    638e:	4383      	bics	r3, r0
    6390:	430b      	orrs	r3, r1
    6392:	2104      	movs	r1, #4
    6394:	0092      	lsls	r2, r2, #2
    6396:	438b      	bics	r3, r1
    6398:	4313      	orrs	r3, r2
    639a:	2208      	movs	r2, #8
    639c:	4393      	bics	r3, r2
    639e:	7623      	strb	r3, [r4, #24]
    63a0:	4b36      	ldr	r3, [pc, #216]	; (647c <frameTransmit+0x138>)
    63a2:	881a      	ldrh	r2, [r3, #0]
    63a4:	4b36      	ldr	r3, [pc, #216]	; (6480 <frameTransmit+0x13c>)
    63a6:	429a      	cmp	r2, r3
    63a8:	d062      	beq.n	6470 <frameTransmit+0x12c>
    63aa:	787a      	ldrb	r2, [r7, #1]
    63ac:	2301      	movs	r3, #1
    63ae:	4211      	tst	r1, r2
    63b0:	d136      	bne.n	6420 <frameTransmit+0xdc>
    63b2:	2221      	movs	r2, #33	; 0x21
    63b4:	54a3      	strb	r3, [r4, r2]
    63b6:	1eb3      	subs	r3, r6, #2
    63b8:	425a      	negs	r2, r3
    63ba:	4153      	adcs	r3, r2
    63bc:	2220      	movs	r2, #32
    63be:	2101      	movs	r1, #1
    63c0:	54a3      	strb	r3, [r4, r2]
    63c2:	7e23      	ldrb	r3, [r4, #24]
    63c4:	089a      	lsrs	r2, r3, #2
    63c6:	4051      	eors	r1, r2
    63c8:	2201      	movs	r2, #1
    63ca:	400a      	ands	r2, r1
    63cc:	2140      	movs	r1, #64	; 0x40
    63ce:	0192      	lsls	r2, r2, #6
    63d0:	438b      	bics	r3, r1
    63d2:	4313      	orrs	r3, r2
    63d4:	2280      	movs	r2, #128	; 0x80
    63d6:	4252      	negs	r2, r2
    63d8:	4313      	orrs	r3, r2
    63da:	7623      	strb	r3, [r4, #24]
    63dc:	887b      	ldrh	r3, [r7, #2]
    63de:	0027      	movs	r7, r4
    63e0:	8463      	strh	r3, [r4, #34]	; 0x22
    63e2:	464b      	mov	r3, r9
    63e4:	3708      	adds	r7, #8
    63e6:	6163      	str	r3, [r4, #20]
    63e8:	0032      	movs	r2, r6
    63ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    63ec:	4b25      	ldr	r3, [pc, #148]	; (6484 <frameTransmit+0x140>)
    63ee:	0038      	movs	r0, r7
    63f0:	4798      	blx	r3
    63f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    63f4:	4652      	mov	r2, sl
    63f6:	6123      	str	r3, [r4, #16]
    63f8:	2325      	movs	r3, #37	; 0x25
    63fa:	61e7      	str	r7, [r4, #28]
    63fc:	54e2      	strb	r2, [r4, r3]
    63fe:	9b03      	ldr	r3, [sp, #12]
    6400:	4821      	ldr	r0, [pc, #132]	; (6488 <frameTransmit+0x144>)
    6402:	4443      	add	r3, r8
    6404:	001d      	movs	r5, r3
    6406:	2324      	movs	r3, #36	; 0x24
    6408:	0021      	movs	r1, r4
    640a:	54e5      	strb	r5, [r4, r3]
    640c:	4b1f      	ldr	r3, [pc, #124]	; (648c <frameTransmit+0x148>)
    640e:	4798      	blx	r3
    6410:	2001      	movs	r0, #1
    6412:	b005      	add	sp, #20
    6414:	bc3c      	pop	{r2, r3, r4, r5}
    6416:	4690      	mov	r8, r2
    6418:	4699      	mov	r9, r3
    641a:	46a2      	mov	sl, r4
    641c:	46ab      	mov	fp, r5
    641e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6420:	2100      	movs	r1, #0
    6422:	4a1b      	ldr	r2, [pc, #108]	; (6490 <frameTransmit+0x14c>)
    6424:	7812      	ldrb	r2, [r2, #0]
    6426:	3a06      	subs	r2, #6
    6428:	b2d2      	uxtb	r2, r2
    642a:	4293      	cmp	r3, r2
    642c:	4149      	adcs	r1, r1
    642e:	b2cb      	uxtb	r3, r1
    6430:	e7bf      	b.n	63b2 <frameTransmit+0x6e>
    6432:	4b18      	ldr	r3, [pc, #96]	; (6494 <frameTransmit+0x150>)
    6434:	0030      	movs	r0, r6
    6436:	4798      	blx	r3
    6438:	464b      	mov	r3, r9
    643a:	9000      	str	r0, [sp, #0]
    643c:	9a03      	ldr	r2, [sp, #12]
    643e:	4641      	mov	r1, r8
    6440:	0038      	movs	r0, r7
    6442:	4d15      	ldr	r5, [pc, #84]	; (6498 <frameTransmit+0x154>)
    6444:	47a8      	blx	r5
    6446:	28ff      	cmp	r0, #255	; 0xff
    6448:	d014      	beq.n	6474 <frameTransmit+0x130>
    644a:	9b03      	ldr	r3, [sp, #12]
    644c:	181d      	adds	r5, r3, r0
    644e:	b2eb      	uxtb	r3, r5
    6450:	9303      	str	r3, [sp, #12]
    6452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6454:	781a      	ldrb	r2, [r3, #0]
    6456:	785b      	ldrb	r3, [r3, #1]
    6458:	2e02      	cmp	r6, #2
    645a:	d193      	bne.n	6384 <frameTransmit+0x40>
    645c:	021b      	lsls	r3, r3, #8
    645e:	189b      	adds	r3, r3, r2
    6460:	4a07      	ldr	r2, [pc, #28]	; (6480 <frameTransmit+0x13c>)
    6462:	b29b      	uxth	r3, r3
    6464:	4293      	cmp	r3, r2
    6466:	d000      	beq.n	646a <frameTransmit+0x126>
    6468:	e78c      	b.n	6384 <frameTransmit+0x40>
    646a:	2100      	movs	r1, #0
    646c:	2201      	movs	r2, #1
    646e:	e78b      	b.n	6388 <frameTransmit+0x44>
    6470:	2300      	movs	r3, #0
    6472:	e79e      	b.n	63b2 <frameTransmit+0x6e>
    6474:	2000      	movs	r0, #0
    6476:	e7cc      	b.n	6412 <frameTransmit+0xce>
    6478:	00003461 	.word	0x00003461
    647c:	200013d8 	.word	0x200013d8
    6480:	0000ffff 	.word	0x0000ffff
    6484:	00007a7f 	.word	0x00007a7f
    6488:	200013cc 	.word	0x200013cc
    648c:	00003589 	.word	0x00003589
    6490:	20000360 	.word	0x20000360
    6494:	000074f5 	.word	0x000074f5
    6498:	00007519 	.word	0x00007519

0000649c <frameParse>:
    649c:	b5f0      	push	{r4, r5, r6, r7, lr}
    649e:	464e      	mov	r6, r9
    64a0:	4645      	mov	r5, r8
    64a2:	46de      	mov	lr, fp
    64a4:	4657      	mov	r7, sl
    64a6:	b5e0      	push	{r5, r6, r7, lr}
    64a8:	6885      	ldr	r5, [r0, #8]
    64aa:	b09d      	sub	sp, #116	; 0x74
    64ac:	782b      	ldrb	r3, [r5, #0]
    64ae:	ac0c      	add	r4, sp, #48	; 0x30
    64b0:	7023      	strb	r3, [r4, #0]
    64b2:	786b      	ldrb	r3, [r5, #1]
    64b4:	0006      	movs	r6, r0
    64b6:	7063      	strb	r3, [r4, #1]
    64b8:	78ab      	ldrb	r3, [r5, #2]
    64ba:	7223      	strb	r3, [r4, #8]
    64bc:	7bc3      	ldrb	r3, [r0, #15]
    64be:	2b00      	cmp	r3, #0
    64c0:	d015      	beq.n	64ee <frameParse+0x52>
    64c2:	7863      	ldrb	r3, [r4, #1]
    64c4:	069a      	lsls	r2, r3, #26
    64c6:	d400      	bmi.n	64ca <frameParse+0x2e>
    64c8:	e0b5      	b.n	6636 <frameParse+0x19a>
    64ca:	6873      	ldr	r3, [r6, #4]
    64cc:	4698      	mov	r8, r3
    64ce:	8a33      	ldrh	r3, [r6, #16]
    64d0:	8063      	strh	r3, [r4, #2]
    64d2:	4643      	mov	r3, r8
    64d4:	785a      	ldrb	r2, [r3, #1]
    64d6:	781b      	ldrb	r3, [r3, #0]
    64d8:	0212      	lsls	r2, r2, #8
    64da:	4313      	orrs	r3, r2
    64dc:	80e3      	strh	r3, [r4, #6]
    64de:	2302      	movs	r3, #2
    64e0:	469a      	mov	sl, r3
    64e2:	7833      	ldrb	r3, [r6, #0]
    64e4:	075b      	lsls	r3, r3, #29
    64e6:	d40f      	bmi.n	6508 <frameParse+0x6c>
    64e8:	4b7f      	ldr	r3, [pc, #508]	; (66e8 <frameParse+0x24c>)
    64ea:	881b      	ldrh	r3, [r3, #0]
    64ec:	e00e      	b.n	650c <frameParse+0x70>
    64ee:	7863      	ldrb	r3, [r4, #1]
    64f0:	069a      	lsls	r2, r3, #26
    64f2:	d400      	bmi.n	64f6 <frameParse+0x5a>
    64f4:	e07c      	b.n	65f0 <frameParse+0x154>
    64f6:	6873      	ldr	r3, [r6, #4]
    64f8:	4698      	mov	r8, r3
    64fa:	8a33      	ldrh	r3, [r6, #16]
    64fc:	8063      	strh	r3, [r4, #2]
    64fe:	2308      	movs	r3, #8
    6500:	469a      	mov	sl, r3
    6502:	7833      	ldrb	r3, [r6, #0]
    6504:	075b      	lsls	r3, r3, #29
    6506:	d5ef      	bpl.n	64e8 <frameParse+0x4c>
    6508:	2301      	movs	r3, #1
    650a:	425b      	negs	r3, r3
    650c:	2210      	movs	r2, #16
    650e:	80a3      	strh	r3, [r4, #4]
    6510:	7863      	ldrb	r3, [r4, #1]
    6512:	4691      	mov	r9, r2
    6514:	4693      	mov	fp, r2
    6516:	2708      	movs	r7, #8
    6518:	2104      	movs	r1, #4
    651a:	3a0d      	subs	r2, #13
    651c:	075b      	lsls	r3, r3, #29
    651e:	d400      	bmi.n	6522 <frameParse+0x86>
    6520:	e082      	b.n	6628 <frameParse+0x18c>
    6522:	5cab      	ldrb	r3, [r5, r2]
    6524:	1869      	adds	r1, r5, r1
    6526:	7423      	strb	r3, [r4, #16]
    6528:	2204      	movs	r2, #4
    652a:	4b70      	ldr	r3, [pc, #448]	; (66ec <frameParse+0x250>)
    652c:	a811      	add	r0, sp, #68	; 0x44
    652e:	4798      	blx	r3
    6530:	19e9      	adds	r1, r5, r7
    6532:	2208      	movs	r2, #8
    6534:	4b6d      	ldr	r3, [pc, #436]	; (66ec <frameParse+0x250>)
    6536:	a812      	add	r0, sp, #72	; 0x48
    6538:	4798      	blx	r3
    653a:	465a      	mov	r2, fp
    653c:	7b33      	ldrb	r3, [r6, #12]
    653e:	4650      	mov	r0, sl
    6540:	1a9b      	subs	r3, r3, r2
    6542:	b2db      	uxtb	r3, r3
    6544:	001f      	movs	r7, r3
    6546:	9306      	str	r3, [sp, #24]
    6548:	4b69      	ldr	r3, [pc, #420]	; (66f0 <frameParse+0x254>)
    654a:	4798      	blx	r3
    654c:	9001      	str	r0, [sp, #4]
    654e:	68b3      	ldr	r3, [r6, #8]
    6550:	465a      	mov	r2, fp
    6552:	9300      	str	r3, [sp, #0]
    6554:	a912      	add	r1, sp, #72	; 0x48
    6556:	003b      	movs	r3, r7
    6558:	0020      	movs	r0, r4
    655a:	4f66      	ldr	r7, [pc, #408]	; (66f4 <frameParse+0x258>)
    655c:	47b8      	blx	r7
    655e:	9005      	str	r0, [sp, #20]
    6560:	28ff      	cmp	r0, #255	; 0xff
    6562:	d061      	beq.n	6628 <frameParse+0x18c>
    6564:	88a2      	ldrh	r2, [r4, #4]
    6566:	4b64      	ldr	r3, [pc, #400]	; (66f8 <frameParse+0x25c>)
    6568:	429a      	cmp	r2, r3
    656a:	d967      	bls.n	663c <frameParse+0x1a0>
    656c:	2310      	movs	r3, #16
    656e:	7861      	ldrb	r1, [r4, #1]
    6570:	469b      	mov	fp, r3
    6572:	420b      	tst	r3, r1
    6574:	d004      	beq.n	6580 <frameParse+0xe4>
    6576:	4b5c      	ldr	r3, [pc, #368]	; (66e8 <frameParse+0x24c>)
    6578:	881b      	ldrh	r3, [r3, #0]
    657a:	429a      	cmp	r2, r3
    657c:	d100      	bne.n	6580 <frameParse+0xe4>
    657e:	e0cf      	b.n	6720 <frameParse+0x284>
    6580:	2303      	movs	r3, #3
    6582:	444d      	add	r5, r9
    6584:	400b      	ands	r3, r1
    6586:	2b01      	cmp	r3, #1
    6588:	d05d      	beq.n	6646 <frameParse+0x1aa>
    658a:	2b00      	cmp	r3, #0
    658c:	d14c      	bne.n	6628 <frameParse+0x18c>
    658e:	4b5b      	ldr	r3, [pc, #364]	; (66fc <frameParse+0x260>)
    6590:	781b      	ldrb	r3, [r3, #0]
    6592:	3b06      	subs	r3, #6
    6594:	2b01      	cmp	r3, #1
    6596:	d847      	bhi.n	6628 <frameParse+0x18c>
    6598:	88a3      	ldrh	r3, [r4, #4]
    659a:	4a57      	ldr	r2, [pc, #348]	; (66f8 <frameParse+0x25c>)
    659c:	4293      	cmp	r3, r2
    659e:	d800      	bhi.n	65a2 <frameParse+0x106>
    65a0:	e08d      	b.n	66be <frameParse+0x222>
    65a2:	20ff      	movs	r0, #255	; 0xff
    65a4:	4a50      	ldr	r2, [pc, #320]	; (66e8 <frameParse+0x24c>)
    65a6:	8811      	ldrh	r1, [r2, #0]
    65a8:	4208      	tst	r0, r1
    65aa:	d100      	bne.n	65ae <frameParse+0x112>
    65ac:	e092      	b.n	66d4 <frameParse+0x238>
    65ae:	8811      	ldrh	r1, [r2, #0]
    65b0:	0609      	lsls	r1, r1, #24
    65b2:	d500      	bpl.n	65b6 <frameParse+0x11a>
    65b4:	e08e      	b.n	66d4 <frameParse+0x238>
    65b6:	4952      	ldr	r1, [pc, #328]	; (6700 <frameParse+0x264>)
    65b8:	428b      	cmp	r3, r1
    65ba:	d135      	bne.n	6628 <frameParse+0x18c>
    65bc:	8813      	ldrh	r3, [r2, #0]
    65be:	8813      	ldrh	r3, [r2, #0]
    65c0:	061b      	lsls	r3, r3, #24
    65c2:	d500      	bpl.n	65c6 <frameParse+0x12a>
    65c4:	e07b      	b.n	66be <frameParse+0x222>
    65c6:	21ff      	movs	r1, #255	; 0xff
    65c8:	8812      	ldrh	r2, [r2, #0]
    65ca:	88e3      	ldrh	r3, [r4, #6]
    65cc:	438a      	bics	r2, r1
    65ce:	429a      	cmp	r2, r3
    65d0:	d02a      	beq.n	6628 <frameParse+0x18c>
    65d2:	a814      	add	r0, sp, #80	; 0x50
    65d4:	8003      	strh	r3, [r0, #0]
    65d6:	9a05      	ldr	r2, [sp, #20]
    65d8:	9b06      	ldr	r3, [sp, #24]
    65da:	6045      	str	r5, [r0, #4]
    65dc:	1a9f      	subs	r7, r3, r2
    65de:	7207      	strb	r7, [r0, #8]
    65e0:	7bb3      	ldrb	r3, [r6, #14]
    65e2:	7283      	strb	r3, [r0, #10]
    65e4:	7b73      	ldrb	r3, [r6, #13]
    65e6:	7243      	strb	r3, [r0, #9]
    65e8:	4b46      	ldr	r3, [pc, #280]	; (6704 <frameParse+0x268>)
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	4798      	blx	r3
    65ee:	e01b      	b.n	6628 <frameParse+0x18c>
    65f0:	2208      	movs	r2, #8
    65f2:	4692      	mov	sl, r2
    65f4:	6872      	ldr	r2, [r6, #4]
    65f6:	7929      	ldrb	r1, [r5, #4]
    65f8:	4690      	mov	r8, r2
    65fa:	78ea      	ldrb	r2, [r5, #3]
    65fc:	0209      	lsls	r1, r1, #8
    65fe:	430a      	orrs	r2, r1
    6600:	79a9      	ldrb	r1, [r5, #6]
    6602:	8062      	strh	r2, [r4, #2]
    6604:	796a      	ldrb	r2, [r5, #5]
    6606:	0209      	lsls	r1, r1, #8
    6608:	430a      	orrs	r2, r1
    660a:	7a29      	ldrb	r1, [r5, #8]
    660c:	80a2      	strh	r2, [r4, #4]
    660e:	79ea      	ldrb	r2, [r5, #7]
    6610:	0209      	lsls	r1, r1, #8
    6612:	430a      	orrs	r2, r1
    6614:	80e2      	strh	r2, [r4, #6]
    6616:	2216      	movs	r2, #22
    6618:	270e      	movs	r7, #14
    661a:	4691      	mov	r9, r2
    661c:	4693      	mov	fp, r2
    661e:	210a      	movs	r1, #10
    6620:	3a0d      	subs	r2, #13
    6622:	075b      	lsls	r3, r3, #29
    6624:	d500      	bpl.n	6628 <frameParse+0x18c>
    6626:	e77c      	b.n	6522 <frameParse+0x86>
    6628:	b01d      	add	sp, #116	; 0x74
    662a:	bc3c      	pop	{r2, r3, r4, r5}
    662c:	4690      	mov	r8, r2
    662e:	4699      	mov	r9, r3
    6630:	46a2      	mov	sl, r4
    6632:	46ab      	mov	fp, r5
    6634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6636:	2202      	movs	r2, #2
    6638:	4692      	mov	sl, r2
    663a:	e7db      	b.n	65f4 <frameParse+0x158>
    663c:	4b2a      	ldr	r3, [pc, #168]	; (66e8 <frameParse+0x24c>)
    663e:	881b      	ldrh	r3, [r3, #0]
    6640:	429a      	cmp	r2, r3
    6642:	d1f1      	bne.n	6628 <frameParse+0x18c>
    6644:	e792      	b.n	656c <frameParse+0xd0>
    6646:	782a      	ldrb	r2, [r5, #0]
    6648:	330e      	adds	r3, #14
    664a:	0011      	movs	r1, r2
    664c:	4399      	bics	r1, r3
    664e:	d038      	beq.n	66c2 <frameParse+0x226>
    6650:	2930      	cmp	r1, #48	; 0x30
    6652:	d1e9      	bne.n	6628 <frameParse+0x18c>
    6654:	2a32      	cmp	r2, #50	; 0x32
    6656:	d1e7      	bne.n	6628 <frameParse+0x18c>
    6658:	4b2b      	ldr	r3, [pc, #172]	; (6708 <frameParse+0x26c>)
    665a:	4699      	mov	r9, r3
    665c:	7a1b      	ldrb	r3, [r3, #8]
    665e:	2b00      	cmp	r3, #0
    6660:	d0e2      	beq.n	6628 <frameParse+0x18c>
    6662:	2300      	movs	r3, #0
    6664:	469b      	mov	fp, r3
    6666:	4b29      	ldr	r3, [pc, #164]	; (670c <frameParse+0x270>)
    6668:	46a8      	mov	r8, r5
    666a:	469a      	mov	sl, r3
    666c:	465d      	mov	r5, fp
    666e:	9f05      	ldr	r7, [sp, #20]
    6670:	46b3      	mov	fp, r6
    6672:	e00a      	b.n	668a <frameParse+0x1ee>
    6674:	0031      	movs	r1, r6
    6676:	4648      	mov	r0, r9
    6678:	4b25      	ldr	r3, [pc, #148]	; (6710 <frameParse+0x274>)
    667a:	4798      	blx	r3
    667c:	464b      	mov	r3, r9
    667e:	3501      	adds	r5, #1
    6680:	7a1b      	ldrb	r3, [r3, #8]
    6682:	b2ed      	uxtb	r5, r5
    6684:	42ab      	cmp	r3, r5
    6686:	d800      	bhi.n	668a <frameParse+0x1ee>
    6688:	e0e9      	b.n	685e <frameParse+0x3c2>
    668a:	2100      	movs	r1, #0
    668c:	4648      	mov	r0, r9
    668e:	47d0      	blx	sl
    6690:	1e06      	subs	r6, r0, #0
    6692:	d100      	bne.n	6696 <frameParse+0x1fa>
    6694:	e0e3      	b.n	685e <frameParse+0x3c2>
    6696:	2320      	movs	r3, #32
    6698:	7a22      	ldrb	r2, [r4, #8]
    669a:	5cc3      	ldrb	r3, [r0, r3]
    669c:	429a      	cmp	r2, r3
    669e:	d1e9      	bne.n	6674 <frameParse+0x1d8>
    66a0:	88e2      	ldrh	r2, [r4, #6]
    66a2:	8b83      	ldrh	r3, [r0, #28]
    66a4:	429a      	cmp	r2, r3
    66a6:	d1e5      	bne.n	6674 <frameParse+0x1d8>
    66a8:	6883      	ldr	r3, [r0, #8]
    66aa:	2b00      	cmp	r3, #0
    66ac:	d003      	beq.n	66b6 <frameParse+0x21a>
    66ae:	7c80      	ldrb	r0, [r0, #18]
    66b0:	0032      	movs	r2, r6
    66b2:	2100      	movs	r1, #0
    66b4:	4798      	blx	r3
    66b6:	0030      	movs	r0, r6
    66b8:	4b16      	ldr	r3, [pc, #88]	; (6714 <frameParse+0x278>)
    66ba:	4798      	blx	r3
    66bc:	e7de      	b.n	667c <frameParse+0x1e0>
    66be:	88e3      	ldrh	r3, [r4, #6]
    66c0:	e787      	b.n	65d2 <frameParse+0x136>
    66c2:	7bb3      	ldrb	r3, [r6, #14]
    66c4:	0020      	movs	r0, r4
    66c6:	9300      	str	r3, [sp, #0]
    66c8:	4642      	mov	r2, r8
    66ca:	002b      	movs	r3, r5
    66cc:	4651      	mov	r1, sl
    66ce:	4c12      	ldr	r4, [pc, #72]	; (6718 <frameParse+0x27c>)
    66d0:	47a0      	blx	r4
    66d2:	e7a9      	b.n	6628 <frameParse+0x18c>
    66d4:	8811      	ldrh	r1, [r2, #0]
    66d6:	0609      	lsls	r1, r1, #24
    66d8:	d400      	bmi.n	66dc <frameParse+0x240>
    66da:	e770      	b.n	65be <frameParse+0x122>
    66dc:	490f      	ldr	r1, [pc, #60]	; (671c <frameParse+0x280>)
    66de:	428b      	cmp	r3, r1
    66e0:	d000      	beq.n	66e4 <frameParse+0x248>
    66e2:	e76c      	b.n	65be <frameParse+0x122>
    66e4:	e7a0      	b.n	6628 <frameParse+0x18c>
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	200013d8 	.word	0x200013d8
    66ec:	00007a7f 	.word	0x00007a7f
    66f0:	000074f5 	.word	0x000074f5
    66f4:	00007621 	.word	0x00007621
    66f8:	0000fffc 	.word	0x0000fffc
    66fc:	20000360 	.word	0x20000360
    6700:	0000ffff 	.word	0x0000ffff
    6704:	20000378 	.word	0x20000378
    6708:	20001398 	.word	0x20001398
    670c:	000035c1 	.word	0x000035c1
    6710:	00003589 	.word	0x00003589
    6714:	000034a9 	.word	0x000034a9
    6718:	00007225 	.word	0x00007225
    671c:	0000fffd 	.word	0x0000fffd
    6720:	88e3      	ldrh	r3, [r4, #6]
    6722:	2078      	movs	r0, #120	; 0x78
    6724:	9308      	str	r3, [sp, #32]
    6726:	7a23      	ldrb	r3, [r4, #8]
    6728:	9309      	str	r3, [sp, #36]	; 0x24
    672a:	4b55      	ldr	r3, [pc, #340]	; (6880 <frameParse+0x3e4>)
    672c:	4798      	blx	r3
    672e:	1e07      	subs	r7, r0, #0
    6730:	9007      	str	r0, [sp, #28]
    6732:	d100      	bne.n	6736 <frameParse+0x29a>
    6734:	e08c      	b.n	6850 <frameParse+0x3b4>
    6736:	2330      	movs	r3, #48	; 0x30
    6738:	a808      	add	r0, sp, #32
    673a:	18c0      	adds	r0, r0, r3
    673c:	33cf      	adds	r3, #207	; 0xcf
    673e:	7003      	strb	r3, [r0, #0]
    6740:	2331      	movs	r3, #49	; 0x31
    6742:	a808      	add	r0, sp, #32
    6744:	18c0      	adds	r0, r0, r3
    6746:	7803      	ldrb	r3, [r0, #0]
    6748:	2003      	movs	r0, #3
    674a:	4383      	bics	r3, r0
    674c:	2001      	movs	r0, #1
    674e:	4318      	orrs	r0, r3
    6750:	23f7      	movs	r3, #247	; 0xf7
    6752:	4a4c      	ldr	r2, [pc, #304]	; (6884 <frameParse+0x3e8>)
    6754:	4003      	ands	r3, r0
    6756:	2004      	movs	r0, #4
    6758:	8811      	ldrh	r1, [r2, #0]
    675a:	2220      	movs	r2, #32
    675c:	4303      	orrs	r3, r0
    675e:	b2db      	uxtb	r3, r3
    6760:	4393      	bics	r3, r2
    6762:	325f      	adds	r2, #95	; 0x5f
    6764:	4013      	ands	r3, r2
    6766:	465a      	mov	r2, fp
    6768:	2031      	movs	r0, #49	; 0x31
    676a:	4393      	bics	r3, r2
    676c:	aa08      	add	r2, sp, #32
    676e:	1812      	adds	r2, r2, r0
    6770:	7013      	strb	r3, [r2, #0]
    6772:	4b45      	ldr	r3, [pc, #276]	; (6888 <frameParse+0x3ec>)
    6774:	aa08      	add	r2, sp, #32
    6776:	881b      	ldrh	r3, [r3, #0]
    6778:	86d1      	strh	r1, [r2, #54]	; 0x36
    677a:	8653      	strh	r3, [r2, #50]	; 0x32
    677c:	466b      	mov	r3, sp
    677e:	8c18      	ldrh	r0, [r3, #32]
    6780:	ab08      	add	r3, sp, #32
    6782:	8690      	strh	r0, [r2, #52]	; 0x34
    6784:	22ff      	movs	r2, #255	; 0xff
    6786:	703a      	strb	r2, [r7, #0]
    6788:	2231      	movs	r2, #49	; 0x31
    678a:	189b      	adds	r3, r3, r2
    678c:	781b      	ldrb	r3, [r3, #0]
    678e:	4a3f      	ldr	r2, [pc, #252]	; (688c <frameParse+0x3f0>)
    6790:	707b      	strb	r3, [r7, #1]
    6792:	7813      	ldrb	r3, [r2, #0]
    6794:	3301      	adds	r3, #1
    6796:	b2db      	uxtb	r3, r3
    6798:	7013      	strb	r3, [r2, #0]
    679a:	2231      	movs	r2, #49	; 0x31
    679c:	70bb      	strb	r3, [r7, #2]
    679e:	ab08      	add	r3, sp, #32
    67a0:	189b      	adds	r3, r3, r2
    67a2:	781b      	ldrb	r3, [r3, #0]
    67a4:	3a11      	subs	r2, #17
    67a6:	421a      	tst	r2, r3
    67a8:	d160      	bne.n	686c <frameParse+0x3d0>
    67aa:	aa08      	add	r2, sp, #32
    67ac:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    67ae:	200a      	movs	r0, #10
    67b0:	70fa      	strb	r2, [r7, #3]
    67b2:	aa08      	add	r2, sp, #32
    67b4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
    67b6:	0a12      	lsrs	r2, r2, #8
    67b8:	713a      	strb	r2, [r7, #4]
    67ba:	aa08      	add	r2, sp, #32
    67bc:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    67be:	717a      	strb	r2, [r7, #5]
    67c0:	aa08      	add	r2, sp, #32
    67c2:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    67c4:	0a12      	lsrs	r2, r2, #8
    67c6:	71ba      	strb	r2, [r7, #6]
    67c8:	aa08      	add	r2, sp, #32
    67ca:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    67cc:	71fa      	strb	r2, [r7, #7]
    67ce:	aa08      	add	r2, sp, #32
    67d0:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    67d2:	0a12      	lsrs	r2, r2, #8
    67d4:	723a      	strb	r2, [r7, #8]
    67d6:	2216      	movs	r2, #22
    67d8:	2709      	movs	r7, #9
    67da:	920a      	str	r2, [sp, #40]	; 0x28
    67dc:	9208      	str	r2, [sp, #32]
    67de:	3a08      	subs	r2, #8
    67e0:	4693      	mov	fp, r2
    67e2:	3a05      	subs	r2, #5
    67e4:	075b      	lsls	r3, r3, #29
    67e6:	d51c      	bpl.n	6822 <frameParse+0x386>
    67e8:	4b29      	ldr	r3, [pc, #164]	; (6890 <frameParse+0x3f4>)
    67ea:	2740      	movs	r7, #64	; 0x40
    67ec:	6819      	ldr	r1, [r3, #0]
    67ee:	2320      	movs	r3, #32
    67f0:	5ccb      	ldrb	r3, [r1, r3]
    67f2:	a908      	add	r1, sp, #32
    67f4:	19c9      	adds	r1, r1, r7
    67f6:	9f07      	ldr	r7, [sp, #28]
    67f8:	700b      	strb	r3, [r1, #0]
    67fa:	46bc      	mov	ip, r7
    67fc:	4925      	ldr	r1, [pc, #148]	; (6894 <frameParse+0x3f8>)
    67fe:	4460      	add	r0, ip
    6800:	6809      	ldr	r1, [r1, #0]
    6802:	9119      	str	r1, [sp, #100]	; 0x64
    6804:	910b      	str	r1, [sp, #44]	; 0x2c
    6806:	54bb      	strb	r3, [r7, r2]
    6808:	a919      	add	r1, sp, #100	; 0x64
    680a:	2204      	movs	r2, #4
    680c:	4b22      	ldr	r3, [pc, #136]	; (6898 <frameParse+0x3fc>)
    680e:	4798      	blx	r3
    6810:	0039      	movs	r1, r7
    6812:	4459      	add	r1, fp
    6814:	0008      	movs	r0, r1
    6816:	2208      	movs	r2, #8
    6818:	4920      	ldr	r1, [pc, #128]	; (689c <frameParse+0x400>)
    681a:	4b1f      	ldr	r3, [pc, #124]	; (6898 <frameParse+0x3fc>)
    681c:	4798      	blx	r3
    681e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6820:	9f08      	ldr	r7, [sp, #32]
    6822:	2324      	movs	r3, #36	; 0x24
    6824:	4669      	mov	r1, sp
    6826:	18c9      	adds	r1, r1, r3
    6828:	7809      	ldrb	r1, [r1, #0]
    682a:	9807      	ldr	r0, [sp, #28]
    682c:	330e      	adds	r3, #14
    682e:	7081      	strb	r1, [r0, #2]
    6830:	5483      	strb	r3, [r0, r2]
    6832:	2300      	movs	r3, #0
    6834:	9303      	str	r3, [sp, #12]
    6836:	9302      	str	r3, [sp, #8]
    6838:	4643      	mov	r3, r8
    683a:	9301      	str	r3, [sp, #4]
    683c:	4653      	mov	r3, sl
    683e:	0039      	movs	r1, r7
    6840:	9300      	str	r3, [sp, #0]
    6842:	2201      	movs	r2, #1
    6844:	0003      	movs	r3, r0
    6846:	4f16      	ldr	r7, [pc, #88]	; (68a0 <frameParse+0x404>)
    6848:	a814      	add	r0, sp, #80	; 0x50
    684a:	47b8      	blx	r7
    684c:	2800      	cmp	r0, #0
    684e:	d001      	beq.n	6854 <frameParse+0x3b8>
    6850:	7861      	ldrb	r1, [r4, #1]
    6852:	e695      	b.n	6580 <frameParse+0xe4>
    6854:	9807      	ldr	r0, [sp, #28]
    6856:	4b13      	ldr	r3, [pc, #76]	; (68a4 <frameParse+0x408>)
    6858:	4798      	blx	r3
    685a:	7861      	ldrb	r1, [r4, #1]
    685c:	e690      	b.n	6580 <frameParse+0xe4>
    685e:	2303      	movs	r3, #3
    6860:	7862      	ldrb	r2, [r4, #1]
    6862:	4645      	mov	r5, r8
    6864:	465e      	mov	r6, fp
    6866:	9705      	str	r7, [sp, #20]
    6868:	4013      	ands	r3, r2
    686a:	e68e      	b.n	658a <frameParse+0xee>
    686c:	2210      	movs	r2, #16
    686e:	920a      	str	r2, [sp, #40]	; 0x28
    6870:	9208      	str	r2, [sp, #32]
    6872:	3a08      	subs	r2, #8
    6874:	4693      	mov	fp, r2
    6876:	2004      	movs	r0, #4
    6878:	3a05      	subs	r2, #5
    687a:	2703      	movs	r7, #3
    687c:	e7b2      	b.n	67e4 <frameParse+0x348>
    687e:	46c0      	nop			; (mov r8, r8)
    6880:	00003461 	.word	0x00003461
    6884:	200013d8 	.word	0x200013d8
    6888:	200013c4 	.word	0x200013c4
    688c:	200013ac 	.word	0x200013ac
    6890:	20001394 	.word	0x20001394
    6894:	20001414 	.word	0x20001414
    6898:	00007a7f 	.word	0x00007a7f
    689c:	2000004c 	.word	0x2000004c
    68a0:	00006345 	.word	0x00006345
    68a4:	000034a9 	.word	0x000034a9

000068a8 <sendDataFrame>:
    68a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68aa:	4657      	mov	r7, sl
    68ac:	46de      	mov	lr, fp
    68ae:	464e      	mov	r6, r9
    68b0:	4645      	mov	r5, r8
    68b2:	b5e0      	push	{r5, r6, r7, lr}
    68b4:	b091      	sub	sp, #68	; 0x44
    68b6:	ab04      	add	r3, sp, #16
    68b8:	469c      	mov	ip, r3
    68ba:	270e      	movs	r7, #14
    68bc:	4b9a      	ldr	r3, [pc, #616]	; (6b28 <sendDataFrame+0x280>)
    68be:	4467      	add	r7, ip
    68c0:	469a      	mov	sl, r3
    68c2:	881b      	ldrh	r3, [r3, #0]
    68c4:	4693      	mov	fp, r2
    68c6:	b28a      	uxth	r2, r1
    68c8:	0006      	movs	r6, r0
    68ca:	9703      	str	r7, [sp, #12]
    68cc:	8039      	strh	r1, [r7, #0]
    68ce:	429a      	cmp	r2, r3
    68d0:	d100      	bne.n	68d4 <sendDataFrame+0x2c>
    68d2:	e0c3      	b.n	6a5c <sendDataFrame+0x1b4>
    68d4:	2800      	cmp	r0, #0
    68d6:	d100      	bne.n	68da <sendDataFrame+0x32>
    68d8:	e0c7      	b.n	6a6a <sendDataFrame+0x1c2>
    68da:	2078      	movs	r0, #120	; 0x78
    68dc:	4b93      	ldr	r3, [pc, #588]	; (6b2c <sendDataFrame+0x284>)
    68de:	4798      	blx	r3
    68e0:	4680      	mov	r8, r0
    68e2:	2800      	cmp	r0, #0
    68e4:	d100      	bne.n	68e8 <sendDataFrame+0x40>
    68e6:	e0bc      	b.n	6a62 <sendDataFrame+0x1ba>
    68e8:	2108      	movs	r1, #8
    68ea:	4b91      	ldr	r3, [pc, #580]	; (6b30 <sendDataFrame+0x288>)
    68ec:	ac08      	add	r4, sp, #32
    68ee:	7862      	ldrb	r2, [r4, #1]
    68f0:	881b      	ldrh	r3, [r3, #0]
    68f2:	8bf5      	ldrh	r5, [r6, #30]
    68f4:	8bb7      	ldrh	r7, [r6, #28]
    68f6:	438a      	bics	r2, r1
    68f8:	8063      	strh	r3, [r4, #2]
    68fa:	2104      	movs	r1, #4
    68fc:	2303      	movs	r3, #3
    68fe:	80e5      	strh	r5, [r4, #6]
    6900:	7e75      	ldrb	r5, [r6, #25]
    6902:	430a      	orrs	r2, r1
    6904:	469c      	mov	ip, r3
    6906:	2120      	movs	r1, #32
    6908:	402b      	ands	r3, r5
    690a:	4699      	mov	r9, r3
    690c:	237f      	movs	r3, #127	; 0x7f
    690e:	b2d2      	uxtb	r2, r2
    6910:	438a      	bics	r2, r1
    6912:	4013      	ands	r3, r2
    6914:	4662      	mov	r2, ip
    6916:	4393      	bics	r3, r2
    6918:	320d      	adds	r2, #13
    691a:	402a      	ands	r2, r5
    691c:	464d      	mov	r5, r9
    691e:	431d      	orrs	r5, r3
    6920:	2310      	movs	r3, #16
    6922:	20ff      	movs	r0, #255	; 0xff
    6924:	439d      	bics	r5, r3
    6926:	4643      	mov	r3, r8
    6928:	4315      	orrs	r5, r2
    692a:	4642      	mov	r2, r8
    692c:	7065      	strb	r5, [r4, #1]
    692e:	80a7      	strh	r7, [r4, #4]
    6930:	7020      	strb	r0, [r4, #0]
    6932:	7018      	strb	r0, [r3, #0]
    6934:	7863      	ldrb	r3, [r4, #1]
    6936:	4d7f      	ldr	r5, [pc, #508]	; (6b34 <sendDataFrame+0x28c>)
    6938:	7053      	strb	r3, [r2, #1]
    693a:	782b      	ldrb	r3, [r5, #0]
    693c:	3301      	adds	r3, #1
    693e:	b2db      	uxtb	r3, r3
    6940:	7093      	strb	r3, [r2, #2]
    6942:	702b      	strb	r3, [r5, #0]
    6944:	7863      	ldrb	r3, [r4, #1]
    6946:	4219      	tst	r1, r3
    6948:	d100      	bne.n	694c <sendDataFrame+0xa4>
    694a:	e096      	b.n	6a7a <sendDataFrame+0x1d2>
    694c:	2210      	movs	r2, #16
    694e:	2103      	movs	r1, #3
    6950:	0017      	movs	r7, r2
    6952:	9204      	str	r2, [sp, #16]
    6954:	3a08      	subs	r2, #8
    6956:	9206      	str	r2, [sp, #24]
    6958:	2003      	movs	r0, #3
    695a:	3a04      	subs	r2, #4
    695c:	9105      	str	r1, [sp, #20]
    695e:	075b      	lsls	r3, r3, #29
    6960:	d500      	bpl.n	6964 <sendDataFrame+0xbc>
    6962:	e0a6      	b.n	6ab2 <sendDataFrame+0x20a>
    6964:	4b74      	ldr	r3, [pc, #464]	; (6b38 <sendDataFrame+0x290>)
    6966:	4699      	mov	r9, r3
    6968:	7cf3      	ldrb	r3, [r6, #19]
    696a:	2b00      	cmp	r3, #0
    696c:	d100      	bne.n	6970 <sendDataFrame+0xc8>
    696e:	e0be      	b.n	6aee <sendDataFrame+0x246>
    6970:	2320      	movs	r3, #32
    6972:	4642      	mov	r2, r8
    6974:	5cf3      	ldrb	r3, [r6, r3]
    6976:	7093      	strb	r3, [r2, #2]
    6978:	782b      	ldrb	r3, [r5, #0]
    697a:	3b01      	subs	r3, #1
    697c:	702b      	strb	r3, [r5, #0]
    697e:	2538      	movs	r5, #56	; 0x38
    6980:	0031      	movs	r1, r6
    6982:	5d72      	ldrb	r2, [r6, r5]
    6984:	3139      	adds	r1, #57	; 0x39
    6986:	4440      	add	r0, r8
    6988:	47c8      	blx	r9
    698a:	5d73      	ldrb	r3, [r6, r5]
    698c:	2028      	movs	r0, #40	; 0x28
    698e:	9304      	str	r3, [sp, #16]
    6990:	7cb3      	ldrb	r3, [r6, #18]
    6992:	9306      	str	r3, [sp, #24]
    6994:	4b65      	ldr	r3, [pc, #404]	; (6b2c <sendDataFrame+0x284>)
    6996:	4798      	blx	r3
    6998:	1e05      	subs	r5, r0, #0
    699a:	d062      	beq.n	6a62 <sendDataFrame+0x1ba>
    699c:	2300      	movs	r3, #0
    699e:	7603      	strb	r3, [r0, #24]
    69a0:	7863      	ldrb	r3, [r4, #1]
    69a2:	075b      	lsls	r3, r3, #29
    69a4:	d500      	bpl.n	69a8 <sendDataFrame+0x100>
    69a6:	e0a7      	b.n	6af8 <sendDataFrame+0x250>
    69a8:	9b03      	ldr	r3, [sp, #12]
    69aa:	785a      	ldrb	r2, [r3, #1]
    69ac:	781b      	ldrb	r3, [r3, #0]
    69ae:	0212      	lsls	r2, r2, #8
    69b0:	189b      	adds	r3, r3, r2
    69b2:	4a62      	ldr	r2, [pc, #392]	; (6b3c <sendDataFrame+0x294>)
    69b4:	b29b      	uxth	r3, r3
    69b6:	4293      	cmp	r3, r2
    69b8:	d100      	bne.n	69bc <sendDataFrame+0x114>
    69ba:	e0b1      	b.n	6b20 <sendDataFrame+0x278>
    69bc:	2201      	movs	r2, #1
    69be:	2100      	movs	r1, #0
    69c0:	2020      	movs	r0, #32
    69c2:	7e2b      	ldrb	r3, [r5, #24]
    69c4:	0152      	lsls	r2, r2, #5
    69c6:	4383      	bics	r3, r0
    69c8:	4313      	orrs	r3, r2
    69ca:	2204      	movs	r2, #4
    69cc:	0089      	lsls	r1, r1, #2
    69ce:	4393      	bics	r3, r2
    69d0:	430b      	orrs	r3, r1
    69d2:	2108      	movs	r1, #8
    69d4:	438b      	bics	r3, r1
    69d6:	762b      	strb	r3, [r5, #24]
    69d8:	4653      	mov	r3, sl
    69da:	8819      	ldrh	r1, [r3, #0]
    69dc:	4b57      	ldr	r3, [pc, #348]	; (6b3c <sendDataFrame+0x294>)
    69de:	4299      	cmp	r1, r3
    69e0:	d100      	bne.n	69e4 <sendDataFrame+0x13c>
    69e2:	e09b      	b.n	6b1c <sendDataFrame+0x274>
    69e4:	7861      	ldrb	r1, [r4, #1]
    69e6:	2301      	movs	r3, #1
    69e8:	420a      	tst	r2, r1
    69ea:	d007      	beq.n	69fc <sendDataFrame+0x154>
    69ec:	2100      	movs	r1, #0
    69ee:	4a54      	ldr	r2, [pc, #336]	; (6b40 <sendDataFrame+0x298>)
    69f0:	7812      	ldrb	r2, [r2, #0]
    69f2:	3a06      	subs	r2, #6
    69f4:	b2d2      	uxtb	r2, r2
    69f6:	4293      	cmp	r3, r2
    69f8:	4149      	adcs	r1, r1
    69fa:	b2cb      	uxtb	r3, r1
    69fc:	2221      	movs	r2, #33	; 0x21
    69fe:	54ab      	strb	r3, [r5, r2]
    6a00:	2320      	movs	r3, #32
    6a02:	2001      	movs	r0, #1
    6a04:	3a20      	subs	r2, #32
    6a06:	54ea      	strb	r2, [r5, r3]
    6a08:	7e2b      	ldrb	r3, [r5, #24]
    6a0a:	0899      	lsrs	r1, r3, #2
    6a0c:	4041      	eors	r1, r0
    6a0e:	400a      	ands	r2, r1
    6a10:	2140      	movs	r1, #64	; 0x40
    6a12:	0192      	lsls	r2, r2, #6
    6a14:	438b      	bics	r3, r1
    6a16:	4313      	orrs	r3, r2
    6a18:	2280      	movs	r2, #128	; 0x80
    6a1a:	4252      	negs	r2, r2
    6a1c:	4313      	orrs	r3, r2
    6a1e:	762b      	strb	r3, [r5, #24]
    6a20:	8863      	ldrh	r3, [r4, #2]
    6a22:	002c      	movs	r4, r5
    6a24:	846b      	strh	r3, [r5, #34]	; 0x22
    6a26:	4643      	mov	r3, r8
    6a28:	3408      	adds	r4, #8
    6a2a:	616b      	str	r3, [r5, #20]
    6a2c:	3282      	adds	r2, #130	; 0x82
    6a2e:	9903      	ldr	r1, [sp, #12]
    6a30:	0020      	movs	r0, r4
    6a32:	47c8      	blx	r9
    6a34:	465b      	mov	r3, fp
    6a36:	466a      	mov	r2, sp
    6a38:	612b      	str	r3, [r5, #16]
    6a3a:	2325      	movs	r3, #37	; 0x25
    6a3c:	7e12      	ldrb	r2, [r2, #24]
    6a3e:	61ec      	str	r4, [r5, #28]
    6a40:	54ea      	strb	r2, [r5, r3]
    6a42:	9a04      	ldr	r2, [sp, #16]
    6a44:	9b05      	ldr	r3, [sp, #20]
    6a46:	4694      	mov	ip, r2
    6a48:	4463      	add	r3, ip
    6a4a:	0018      	movs	r0, r3
    6a4c:	2324      	movs	r3, #36	; 0x24
    6a4e:	0029      	movs	r1, r5
    6a50:	54e8      	strb	r0, [r5, r3]
    6a52:	483c      	ldr	r0, [pc, #240]	; (6b44 <sendDataFrame+0x29c>)
    6a54:	4b3c      	ldr	r3, [pc, #240]	; (6b48 <sendDataFrame+0x2a0>)
    6a56:	4798      	blx	r3
    6a58:	2001      	movs	r0, #1
    6a5a:	e007      	b.n	6a6c <sendDataFrame+0x1c4>
    6a5c:	465b      	mov	r3, fp
    6a5e:	2b00      	cmp	r3, #0
    6a60:	d003      	beq.n	6a6a <sendDataFrame+0x1c2>
    6a62:	7cb0      	ldrb	r0, [r6, #18]
    6a64:	0032      	movs	r2, r6
    6a66:	2101      	movs	r1, #1
    6a68:	47d8      	blx	fp
    6a6a:	2000      	movs	r0, #0
    6a6c:	b011      	add	sp, #68	; 0x44
    6a6e:	bc3c      	pop	{r2, r3, r4, r5}
    6a70:	4690      	mov	r8, r2
    6a72:	4699      	mov	r9, r3
    6a74:	46a2      	mov	sl, r4
    6a76:	46ab      	mov	fp, r5
    6a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a7a:	4641      	mov	r1, r8
    6a7c:	8862      	ldrh	r2, [r4, #2]
    6a7e:	38f6      	subs	r0, #246	; 0xf6
    6a80:	70ca      	strb	r2, [r1, #3]
    6a82:	8862      	ldrh	r2, [r4, #2]
    6a84:	0a12      	lsrs	r2, r2, #8
    6a86:	710a      	strb	r2, [r1, #4]
    6a88:	88a2      	ldrh	r2, [r4, #4]
    6a8a:	714a      	strb	r2, [r1, #5]
    6a8c:	88a2      	ldrh	r2, [r4, #4]
    6a8e:	0a12      	lsrs	r2, r2, #8
    6a90:	718a      	strb	r2, [r1, #6]
    6a92:	88e2      	ldrh	r2, [r4, #6]
    6a94:	71ca      	strb	r2, [r1, #7]
    6a96:	88e2      	ldrh	r2, [r4, #6]
    6a98:	0a12      	lsrs	r2, r2, #8
    6a9a:	720a      	strb	r2, [r1, #8]
    6a9c:	2216      	movs	r2, #22
    6a9e:	2109      	movs	r1, #9
    6aa0:	0017      	movs	r7, r2
    6aa2:	9204      	str	r2, [sp, #16]
    6aa4:	3a08      	subs	r2, #8
    6aa6:	9206      	str	r2, [sp, #24]
    6aa8:	9105      	str	r1, [sp, #20]
    6aaa:	3a04      	subs	r2, #4
    6aac:	075b      	lsls	r3, r3, #29
    6aae:	d400      	bmi.n	6ab2 <sendDataFrame+0x20a>
    6ab0:	e758      	b.n	6964 <sendDataFrame+0xbc>
    6ab2:	4b26      	ldr	r3, [pc, #152]	; (6b4c <sendDataFrame+0x2a4>)
    6ab4:	4442      	add	r2, r8
    6ab6:	6819      	ldr	r1, [r3, #0]
    6ab8:	2320      	movs	r3, #32
    6aba:	5ccb      	ldrb	r3, [r1, r3]
    6abc:	4924      	ldr	r1, [pc, #144]	; (6b50 <sendDataFrame+0x2a8>)
    6abe:	7423      	strb	r3, [r4, #16]
    6ac0:	6809      	ldr	r1, [r1, #0]
    6ac2:	6161      	str	r1, [r4, #20]
    6ac4:	4641      	mov	r1, r8
    6ac6:	540b      	strb	r3, [r1, r0]
    6ac8:	4b1b      	ldr	r3, [pc, #108]	; (6b38 <sendDataFrame+0x290>)
    6aca:	0010      	movs	r0, r2
    6acc:	a90d      	add	r1, sp, #52	; 0x34
    6ace:	2204      	movs	r2, #4
    6ad0:	4699      	mov	r9, r3
    6ad2:	4798      	blx	r3
    6ad4:	9b06      	ldr	r3, [sp, #24]
    6ad6:	2208      	movs	r2, #8
    6ad8:	4443      	add	r3, r8
    6ada:	0018      	movs	r0, r3
    6adc:	491d      	ldr	r1, [pc, #116]	; (6b54 <sendDataFrame+0x2ac>)
    6ade:	47c8      	blx	r9
    6ae0:	9b04      	ldr	r3, [sp, #16]
    6ae2:	0038      	movs	r0, r7
    6ae4:	9305      	str	r3, [sp, #20]
    6ae6:	7cf3      	ldrb	r3, [r6, #19]
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d000      	beq.n	6aee <sendDataFrame+0x246>
    6aec:	e740      	b.n	6970 <sendDataFrame+0xc8>
    6aee:	4643      	mov	r3, r8
    6af0:	789a      	ldrb	r2, [r3, #2]
    6af2:	2320      	movs	r3, #32
    6af4:	54f2      	strb	r2, [r6, r3]
    6af6:	e742      	b.n	697e <sendDataFrame+0xd6>
    6af8:	4b17      	ldr	r3, [pc, #92]	; (6b58 <sendDataFrame+0x2b0>)
    6afa:	2002      	movs	r0, #2
    6afc:	4798      	blx	r3
    6afe:	4643      	mov	r3, r8
    6b00:	9000      	str	r0, [sp, #0]
    6b02:	9a04      	ldr	r2, [sp, #16]
    6b04:	9905      	ldr	r1, [sp, #20]
    6b06:	0020      	movs	r0, r4
    6b08:	4f14      	ldr	r7, [pc, #80]	; (6b5c <sendDataFrame+0x2b4>)
    6b0a:	47b8      	blx	r7
    6b0c:	28ff      	cmp	r0, #255	; 0xff
    6b0e:	d0a8      	beq.n	6a62 <sendDataFrame+0x1ba>
    6b10:	9b04      	ldr	r3, [sp, #16]
    6b12:	469c      	mov	ip, r3
    6b14:	4460      	add	r0, ip
    6b16:	b2c3      	uxtb	r3, r0
    6b18:	9304      	str	r3, [sp, #16]
    6b1a:	e745      	b.n	69a8 <sendDataFrame+0x100>
    6b1c:	2300      	movs	r3, #0
    6b1e:	e76d      	b.n	69fc <sendDataFrame+0x154>
    6b20:	2200      	movs	r2, #0
    6b22:	2101      	movs	r1, #1
    6b24:	e74c      	b.n	69c0 <sendDataFrame+0x118>
    6b26:	46c0      	nop			; (mov r8, r8)
    6b28:	200013d8 	.word	0x200013d8
    6b2c:	00003461 	.word	0x00003461
    6b30:	200013c4 	.word	0x200013c4
    6b34:	200013ac 	.word	0x200013ac
    6b38:	00007a7f 	.word	0x00007a7f
    6b3c:	0000ffff 	.word	0x0000ffff
    6b40:	20000360 	.word	0x20000360
    6b44:	200013cc 	.word	0x200013cc
    6b48:	00003589 	.word	0x00003589
    6b4c:	20001394 	.word	0x20001394
    6b50:	20001414 	.word	0x20001414
    6b54:	2000004c 	.word	0x2000004c
    6b58:	000074f5 	.word	0x000074f5
    6b5c:	00007519 	.word	0x00007519

00006b60 <establishTimerExpired>:
    6b60:	2205      	movs	r2, #5
    6b62:	b510      	push	{r4, lr}
    6b64:	4b04      	ldr	r3, [pc, #16]	; (6b78 <establishTimerExpired+0x18>)
    6b66:	4c05      	ldr	r4, [pc, #20]	; (6b7c <establishTimerExpired+0x1c>)
    6b68:	701a      	strb	r2, [r3, #0]
    6b6a:	2004      	movs	r0, #4
    6b6c:	6823      	ldr	r3, [r4, #0]
    6b6e:	4798      	blx	r3
    6b70:	2300      	movs	r3, #0
    6b72:	6023      	str	r3, [r4, #0]
    6b74:	bd10      	pop	{r4, pc}
    6b76:	46c0      	nop			; (mov r8, r8)
    6b78:	20000360 	.word	0x20000360
    6b7c:	20000380 	.word	0x20000380

00006b80 <sendKeepAlive>:
    6b80:	b570      	push	{r4, r5, r6, lr}
    6b82:	2078      	movs	r0, #120	; 0x78
    6b84:	b08c      	sub	sp, #48	; 0x30
    6b86:	4b15      	ldr	r3, [pc, #84]	; (6bdc <sendKeepAlive+0x5c>)
    6b88:	4798      	blx	r3
    6b8a:	1e04      	subs	r4, r0, #0
    6b8c:	d023      	beq.n	6bd6 <sendKeepAlive+0x56>
    6b8e:	4b14      	ldr	r3, [pc, #80]	; (6be0 <sendKeepAlive+0x60>)
    6b90:	4e14      	ldr	r6, [pc, #80]	; (6be4 <sendKeepAlive+0x64>)
    6b92:	8819      	ldrh	r1, [r3, #0]
    6b94:	8832      	ldrh	r2, [r6, #0]
    6b96:	b289      	uxth	r1, r1
    6b98:	ab04      	add	r3, sp, #16
    6b9a:	20ff      	movs	r0, #255	; 0xff
    6b9c:	4d12      	ldr	r5, [pc, #72]	; (6be8 <sendKeepAlive+0x68>)
    6b9e:	47a8      	blx	r5
    6ba0:	0021      	movs	r1, r4
    6ba2:	4b12      	ldr	r3, [pc, #72]	; (6bec <sendKeepAlive+0x6c>)
    6ba4:	a804      	add	r0, sp, #16
    6ba6:	4798      	blx	r3
    6ba8:	2307      	movs	r3, #7
    6baa:	0005      	movs	r5, r0
    6bac:	5423      	strb	r3, [r4, r0]
    6bae:	3001      	adds	r0, #1
    6bb0:	b2c0      	uxtb	r0, r0
    6bb2:	1820      	adds	r0, r4, r0
    6bb4:	2208      	movs	r2, #8
    6bb6:	490e      	ldr	r1, [pc, #56]	; (6bf0 <sendKeepAlive+0x70>)
    6bb8:	4b0e      	ldr	r3, [pc, #56]	; (6bf4 <sendKeepAlive+0x74>)
    6bba:	4798      	blx	r3
    6bbc:	4b0e      	ldr	r3, [pc, #56]	; (6bf8 <sendKeepAlive+0x78>)
    6bbe:	9601      	str	r6, [sp, #4]
    6bc0:	9303      	str	r3, [sp, #12]
    6bc2:	2300      	movs	r3, #0
    6bc4:	9302      	str	r3, [sp, #8]
    6bc6:	3302      	adds	r3, #2
    6bc8:	9300      	str	r3, [sp, #0]
    6bca:	2209      	movs	r2, #9
    6bcc:	0023      	movs	r3, r4
    6bce:	0029      	movs	r1, r5
    6bd0:	a804      	add	r0, sp, #16
    6bd2:	4c0a      	ldr	r4, [pc, #40]	; (6bfc <sendKeepAlive+0x7c>)
    6bd4:	47a0      	blx	r4
    6bd6:	b00c      	add	sp, #48	; 0x30
    6bd8:	bd70      	pop	{r4, r5, r6, pc}
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	00003461 	.word	0x00003461
    6be0:	200013d8 	.word	0x200013d8
    6be4:	20000054 	.word	0x20000054
    6be8:	00006281 	.word	0x00006281
    6bec:	000062ad 	.word	0x000062ad
    6bf0:	2000004c 	.word	0x2000004c
    6bf4:	00007a7f 	.word	0x00007a7f
    6bf8:	0000702d 	.word	0x0000702d
    6bfc:	00006345 	.word	0x00006345

00006c00 <ScanChannel>:
    6c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c02:	46c6      	mov	lr, r8
    6c04:	b500      	push	{lr}
    6c06:	4c2d      	ldr	r4, [pc, #180]	; (6cbc <ScanChannel+0xbc>)
    6c08:	b090      	sub	sp, #64	; 0x40
    6c0a:	7823      	ldrb	r3, [r4, #0]
    6c0c:	0005      	movs	r5, r0
    6c0e:	2b1a      	cmp	r3, #26
    6c10:	d816      	bhi.n	6c40 <ScanChannel+0x40>
    6c12:	2601      	movs	r6, #1
    6c14:	4f2a      	ldr	r7, [pc, #168]	; (6cc0 <ScanChannel+0xc0>)
    6c16:	e004      	b.n	6c22 <ScanChannel+0x22>
    6c18:	3301      	adds	r3, #1
    6c1a:	b2db      	uxtb	r3, r3
    6c1c:	7023      	strb	r3, [r4, #0]
    6c1e:	2b1a      	cmp	r3, #26
    6c20:	d80e      	bhi.n	6c40 <ScanChannel+0x40>
    6c22:	686a      	ldr	r2, [r5, #4]
    6c24:	40da      	lsrs	r2, r3
    6c26:	4216      	tst	r6, r2
    6c28:	d0f6      	beq.n	6c18 <ScanChannel+0x18>
    6c2a:	0021      	movs	r1, r4
    6c2c:	2000      	movs	r0, #0
    6c2e:	47b8      	blx	r7
    6c30:	2800      	cmp	r0, #0
    6c32:	d114      	bne.n	6c5e <ScanChannel+0x5e>
    6c34:	7823      	ldrb	r3, [r4, #0]
    6c36:	3301      	adds	r3, #1
    6c38:	b2db      	uxtb	r3, r3
    6c3a:	7023      	strb	r3, [r4, #0]
    6c3c:	2b1a      	cmp	r3, #26
    6c3e:	d9f0      	bls.n	6c22 <ScanChannel+0x22>
    6c40:	2205      	movs	r2, #5
    6c42:	4b20      	ldr	r3, [pc, #128]	; (6cc4 <ScanChannel+0xc4>)
    6c44:	4c20      	ldr	r4, [pc, #128]	; (6cc8 <ScanChannel+0xc8>)
    6c46:	701a      	strb	r2, [r3, #0]
    6c48:	7868      	ldrb	r0, [r5, #1]
    6c4a:	6823      	ldr	r3, [r4, #0]
    6c4c:	0029      	movs	r1, r5
    6c4e:	4798      	blx	r3
    6c50:	2300      	movs	r3, #0
    6c52:	2000      	movs	r0, #0
    6c54:	6023      	str	r3, [r4, #0]
    6c56:	b010      	add	sp, #64	; 0x40
    6c58:	bc04      	pop	{r2}
    6c5a:	4690      	mov	r8, r2
    6c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c5e:	ab02      	add	r3, sp, #8
    6c60:	469c      	mov	ip, r3
    6c62:	2516      	movs	r5, #22
    6c64:	2301      	movs	r3, #1
    6c66:	4465      	add	r5, ip
    6c68:	425b      	negs	r3, r3
    6c6a:	802b      	strh	r3, [r5, #0]
    6c6c:	2078      	movs	r0, #120	; 0x78
    6c6e:	4b17      	ldr	r3, [pc, #92]	; (6ccc <ScanChannel+0xcc>)
    6c70:	4798      	blx	r3
    6c72:	0004      	movs	r4, r0
    6c74:	200a      	movs	r0, #10
    6c76:	2c00      	cmp	r4, #0
    6c78:	d0ed      	beq.n	6c56 <ScanChannel+0x56>
    6c7a:	af08      	add	r7, sp, #32
    6c7c:	9505      	str	r5, [sp, #20]
    6c7e:	882a      	ldrh	r2, [r5, #0]
    6c80:	003b      	movs	r3, r7
    6c82:	4913      	ldr	r1, [pc, #76]	; (6cd0 <ScanChannel+0xd0>)
    6c84:	3809      	subs	r0, #9
    6c86:	4d13      	ldr	r5, [pc, #76]	; (6cd4 <ScanChannel+0xd4>)
    6c88:	47a8      	blx	r5
    6c8a:	2220      	movs	r2, #32
    6c8c:	787b      	ldrb	r3, [r7, #1]
    6c8e:	0021      	movs	r1, r4
    6c90:	4313      	orrs	r3, r2
    6c92:	707b      	strb	r3, [r7, #1]
    6c94:	0038      	movs	r0, r7
    6c96:	4b10      	ldr	r3, [pc, #64]	; (6cd8 <ScanChannel+0xd8>)
    6c98:	4798      	blx	r3
    6c9a:	4b10      	ldr	r3, [pc, #64]	; (6cdc <ScanChannel+0xdc>)
    6c9c:	5426      	strb	r6, [r4, r0]
    6c9e:	9303      	str	r3, [sp, #12]
    6ca0:	2300      	movs	r3, #0
    6ca2:	9302      	str	r3, [sp, #8]
    6ca4:	9b05      	ldr	r3, [sp, #20]
    6ca6:	0001      	movs	r1, r0
    6ca8:	9301      	str	r3, [sp, #4]
    6caa:	2302      	movs	r3, #2
    6cac:	2201      	movs	r2, #1
    6cae:	9300      	str	r3, [sp, #0]
    6cb0:	0038      	movs	r0, r7
    6cb2:	0023      	movs	r3, r4
    6cb4:	4c0a      	ldr	r4, [pc, #40]	; (6ce0 <ScanChannel+0xe0>)
    6cb6:	47a0      	blx	r4
    6cb8:	e7cd      	b.n	6c56 <ScanChannel+0x56>
    6cba:	46c0      	nop			; (mov r8, r8)
    6cbc:	200013a4 	.word	0x200013a4
    6cc0:	00004f5d 	.word	0x00004f5d
    6cc4:	20000360 	.word	0x20000360
    6cc8:	20000384 	.word	0x20000384
    6ccc:	00003461 	.word	0x00003461
    6cd0:	0000ffff 	.word	0x0000ffff
    6cd4:	00006281 	.word	0x00006281
    6cd8:	000062ad 	.word	0x000062ad
    6cdc:	00006e9d 	.word	0x00006e9d
    6ce0:	00006345 	.word	0x00006345

00006ce4 <scanDurationExpired>:
    6ce4:	b510      	push	{r4, lr}
    6ce6:	4b0d      	ldr	r3, [pc, #52]	; (6d1c <scanDurationExpired+0x38>)
    6ce8:	4c0d      	ldr	r4, [pc, #52]	; (6d20 <scanDurationExpired+0x3c>)
    6cea:	781a      	ldrb	r2, [r3, #0]
    6cec:	2301      	movs	r3, #1
    6cee:	4093      	lsls	r3, r2
    6cf0:	6820      	ldr	r0, [r4, #0]
    6cf2:	6842      	ldr	r2, [r0, #4]
    6cf4:	439a      	bics	r2, r3
    6cf6:	6042      	str	r2, [r0, #4]
    6cf8:	4b0a      	ldr	r3, [pc, #40]	; (6d24 <scanDurationExpired+0x40>)
    6cfa:	4798      	blx	r3
    6cfc:	2800      	cmp	r0, #0
    6cfe:	d00b      	beq.n	6d18 <scanDurationExpired+0x34>
    6d00:	2205      	movs	r2, #5
    6d02:	6823      	ldr	r3, [r4, #0]
    6d04:	7018      	strb	r0, [r3, #0]
    6d06:	4b08      	ldr	r3, [pc, #32]	; (6d28 <scanDurationExpired+0x44>)
    6d08:	6821      	ldr	r1, [r4, #0]
    6d0a:	4c08      	ldr	r4, [pc, #32]	; (6d2c <scanDurationExpired+0x48>)
    6d0c:	701a      	strb	r2, [r3, #0]
    6d0e:	7848      	ldrb	r0, [r1, #1]
    6d10:	6823      	ldr	r3, [r4, #0]
    6d12:	4798      	blx	r3
    6d14:	2300      	movs	r3, #0
    6d16:	6023      	str	r3, [r4, #0]
    6d18:	bd10      	pop	{r4, pc}
    6d1a:	46c0      	nop			; (mov r8, r8)
    6d1c:	200013a4 	.word	0x200013a4
    6d20:	20000388 	.word	0x20000388
    6d24:	00006c01 	.word	0x00006c01
    6d28:	20000360 	.word	0x20000360
    6d2c:	20000384 	.word	0x20000384

00006d30 <rxOffEdKeepAliveTimerHandler>:
    6d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d32:	46ce      	mov	lr, r9
    6d34:	4647      	mov	r7, r8
    6d36:	22ff      	movs	r2, #255	; 0xff
    6d38:	2516      	movs	r5, #22
    6d3a:	b580      	push	{r7, lr}
    6d3c:	4b23      	ldr	r3, [pc, #140]	; (6dcc <rxOffEdKeepAliveTimerHandler+0x9c>)
    6d3e:	b08f      	sub	sp, #60	; 0x3c
    6d40:	4698      	mov	r8, r3
    6d42:	881b      	ldrh	r3, [r3, #0]
    6d44:	446d      	add	r5, sp
    6d46:	4393      	bics	r3, r2
    6d48:	802b      	strh	r3, [r5, #0]
    6d4a:	2078      	movs	r0, #120	; 0x78
    6d4c:	4b20      	ldr	r3, [pc, #128]	; (6dd0 <rxOffEdKeepAliveTimerHandler+0xa0>)
    6d4e:	4798      	blx	r3
    6d50:	1e06      	subs	r6, r0, #0
    6d52:	d035      	beq.n	6dc0 <rxOffEdKeepAliveTimerHandler+0x90>
    6d54:	4c1f      	ldr	r4, [pc, #124]	; (6dd4 <rxOffEdKeepAliveTimerHandler+0xa4>)
    6d56:	4b20      	ldr	r3, [pc, #128]	; (6dd8 <rxOffEdKeepAliveTimerHandler+0xa8>)
    6d58:	0020      	movs	r0, r4
    6d5a:	4798      	blx	r3
    6d5c:	4b1f      	ldr	r3, [pc, #124]	; (6ddc <rxOffEdKeepAliveTimerHandler+0xac>)
    6d5e:	0020      	movs	r0, r4
    6d60:	6123      	str	r3, [r4, #16]
    6d62:	4b1f      	ldr	r3, [pc, #124]	; (6de0 <rxOffEdKeepAliveTimerHandler+0xb0>)
    6d64:	681b      	ldr	r3, [r3, #0]
    6d66:	7a1a      	ldrb	r2, [r3, #8]
    6d68:	23fa      	movs	r3, #250	; 0xfa
    6d6a:	009b      	lsls	r3, r3, #2
    6d6c:	4353      	muls	r3, r2
    6d6e:	6063      	str	r3, [r4, #4]
    6d70:	60a3      	str	r3, [r4, #8]
    6d72:	2300      	movs	r3, #0
    6d74:	7323      	strb	r3, [r4, #12]
    6d76:	4699      	mov	r9, r3
    6d78:	4b1a      	ldr	r3, [pc, #104]	; (6de4 <rxOffEdKeepAliveTimerHandler+0xb4>)
    6d7a:	4798      	blx	r3
    6d7c:	4643      	mov	r3, r8
    6d7e:	8819      	ldrh	r1, [r3, #0]
    6d80:	ac06      	add	r4, sp, #24
    6d82:	0023      	movs	r3, r4
    6d84:	b289      	uxth	r1, r1
    6d86:	882a      	ldrh	r2, [r5, #0]
    6d88:	2001      	movs	r0, #1
    6d8a:	4f17      	ldr	r7, [pc, #92]	; (6de8 <rxOffEdKeepAliveTimerHandler+0xb8>)
    6d8c:	47b8      	blx	r7
    6d8e:	2220      	movs	r2, #32
    6d90:	7863      	ldrb	r3, [r4, #1]
    6d92:	0031      	movs	r1, r6
    6d94:	4313      	orrs	r3, r2
    6d96:	22ef      	movs	r2, #239	; 0xef
    6d98:	4013      	ands	r3, r2
    6d9a:	7063      	strb	r3, [r4, #1]
    6d9c:	0020      	movs	r0, r4
    6d9e:	4b13      	ldr	r3, [pc, #76]	; (6dec <rxOffEdKeepAliveTimerHandler+0xbc>)
    6da0:	4798      	blx	r3
    6da2:	2331      	movs	r3, #49	; 0x31
    6da4:	5433      	strb	r3, [r6, r0]
    6da6:	4b12      	ldr	r3, [pc, #72]	; (6df0 <rxOffEdKeepAliveTimerHandler+0xc0>)
    6da8:	0001      	movs	r1, r0
    6daa:	9303      	str	r3, [sp, #12]
    6dac:	464b      	mov	r3, r9
    6dae:	9302      	str	r3, [sp, #8]
    6db0:	3302      	adds	r3, #2
    6db2:	9300      	str	r3, [sp, #0]
    6db4:	0020      	movs	r0, r4
    6db6:	9501      	str	r5, [sp, #4]
    6db8:	0033      	movs	r3, r6
    6dba:	2201      	movs	r2, #1
    6dbc:	4c0d      	ldr	r4, [pc, #52]	; (6df4 <rxOffEdKeepAliveTimerHandler+0xc4>)
    6dbe:	47a0      	blx	r4
    6dc0:	b00f      	add	sp, #60	; 0x3c
    6dc2:	bc0c      	pop	{r2, r3}
    6dc4:	4690      	mov	r8, r2
    6dc6:	4699      	mov	r9, r3
    6dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6dca:	46c0      	nop			; (mov r8, r8)
    6dcc:	200013d8 	.word	0x200013d8
    6dd0:	00003461 	.word	0x00003461
    6dd4:	200013dc 	.word	0x200013dc
    6dd8:	00003685 	.word	0x00003685
    6ddc:	00006d31 	.word	0x00006d31
    6de0:	20001390 	.word	0x20001390
    6de4:	000036f1 	.word	0x000036f1
    6de8:	00006281 	.word	0x00006281
    6dec:	000062ad 	.word	0x000062ad
    6df0:	00006f59 	.word	0x00006f59
    6df4:	00006345 	.word	0x00006345

00006df8 <dataWaitIntervalTimerHandler>:
    6df8:	b570      	push	{r4, r5, r6, lr}
    6dfa:	2500      	movs	r5, #0
    6dfc:	4c0a      	ldr	r4, [pc, #40]	; (6e28 <dataWaitIntervalTimerHandler+0x30>)
    6dfe:	4b0b      	ldr	r3, [pc, #44]	; (6e2c <dataWaitIntervalTimerHandler+0x34>)
    6e00:	0020      	movs	r0, r4
    6e02:	701d      	strb	r5, [r3, #0]
    6e04:	4b0a      	ldr	r3, [pc, #40]	; (6e30 <dataWaitIntervalTimerHandler+0x38>)
    6e06:	4798      	blx	r3
    6e08:	4b0a      	ldr	r3, [pc, #40]	; (6e34 <dataWaitIntervalTimerHandler+0x3c>)
    6e0a:	0020      	movs	r0, r4
    6e0c:	6123      	str	r3, [r4, #16]
    6e0e:	4b0a      	ldr	r3, [pc, #40]	; (6e38 <dataWaitIntervalTimerHandler+0x40>)
    6e10:	681b      	ldr	r3, [r3, #0]
    6e12:	7a1a      	ldrb	r2, [r3, #8]
    6e14:	23fa      	movs	r3, #250	; 0xfa
    6e16:	009b      	lsls	r3, r3, #2
    6e18:	4353      	muls	r3, r2
    6e1a:	6063      	str	r3, [r4, #4]
    6e1c:	60a3      	str	r3, [r4, #8]
    6e1e:	4b07      	ldr	r3, [pc, #28]	; (6e3c <dataWaitIntervalTimerHandler+0x44>)
    6e20:	7325      	strb	r5, [r4, #12]
    6e22:	4798      	blx	r3
    6e24:	bd70      	pop	{r4, r5, r6, pc}
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	200013dc 	.word	0x200013dc
    6e2c:	2000037c 	.word	0x2000037c
    6e30:	00003685 	.word	0x00003685
    6e34:	00006d31 	.word	0x00006d31
    6e38:	20001390 	.word	0x20001390
    6e3c:	000036f1 	.word	0x000036f1

00006e40 <EstcommandConfcb>:
    6e40:	b570      	push	{r4, r5, r6, lr}
    6e42:	0010      	movs	r0, r2
    6e44:	4b0e      	ldr	r3, [pc, #56]	; (6e80 <EstcommandConfcb+0x40>)
    6e46:	000c      	movs	r4, r1
    6e48:	4798      	blx	r3
    6e4a:	2c00      	cmp	r4, #0
    6e4c:	d009      	beq.n	6e62 <EstcommandConfcb+0x22>
    6e4e:	2205      	movs	r2, #5
    6e50:	4b0c      	ldr	r3, [pc, #48]	; (6e84 <EstcommandConfcb+0x44>)
    6e52:	4d0d      	ldr	r5, [pc, #52]	; (6e88 <EstcommandConfcb+0x48>)
    6e54:	701a      	strb	r2, [r3, #0]
    6e56:	0020      	movs	r0, r4
    6e58:	682b      	ldr	r3, [r5, #0]
    6e5a:	4798      	blx	r3
    6e5c:	2300      	movs	r3, #0
    6e5e:	602b      	str	r3, [r5, #0]
    6e60:	bd70      	pop	{r4, r5, r6, pc}
    6e62:	480a      	ldr	r0, [pc, #40]	; (6e8c <EstcommandConfcb+0x4c>)
    6e64:	4b0a      	ldr	r3, [pc, #40]	; (6e90 <EstcommandConfcb+0x50>)
    6e66:	6103      	str	r3, [r0, #16]
    6e68:	4b0a      	ldr	r3, [pc, #40]	; (6e94 <EstcommandConfcb+0x54>)
    6e6a:	681b      	ldr	r3, [r3, #0]
    6e6c:	7a9a      	ldrb	r2, [r3, #10]
    6e6e:	23fa      	movs	r3, #250	; 0xfa
    6e70:	009b      	lsls	r3, r3, #2
    6e72:	4353      	muls	r3, r2
    6e74:	6043      	str	r3, [r0, #4]
    6e76:	6083      	str	r3, [r0, #8]
    6e78:	4b07      	ldr	r3, [pc, #28]	; (6e98 <EstcommandConfcb+0x58>)
    6e7a:	7304      	strb	r4, [r0, #12]
    6e7c:	4798      	blx	r3
    6e7e:	e7ef      	b.n	6e60 <EstcommandConfcb+0x20>
    6e80:	000034a9 	.word	0x000034a9
    6e84:	20000360 	.word	0x20000360
    6e88:	20000380 	.word	0x20000380
    6e8c:	200013f4 	.word	0x200013f4
    6e90:	00006b61 	.word	0x00006b61
    6e94:	20001390 	.word	0x20001390
    6e98:	000036f1 	.word	0x000036f1

00006e9c <beaconReqConfcb>:
    6e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e9e:	46ce      	mov	lr, r9
    6ea0:	4647      	mov	r7, r8
    6ea2:	0010      	movs	r0, r2
    6ea4:	b580      	push	{r7, lr}
    6ea6:	4b21      	ldr	r3, [pc, #132]	; (6f2c <beaconReqConfcb+0x90>)
    6ea8:	000d      	movs	r5, r1
    6eaa:	4798      	blx	r3
    6eac:	2d00      	cmp	r5, #0
    6eae:	d016      	beq.n	6ede <beaconReqConfcb+0x42>
    6eb0:	4c1f      	ldr	r4, [pc, #124]	; (6f30 <beaconReqConfcb+0x94>)
    6eb2:	4b20      	ldr	r3, [pc, #128]	; (6f34 <beaconReqConfcb+0x98>)
    6eb4:	6820      	ldr	r0, [r4, #0]
    6eb6:	4798      	blx	r3
    6eb8:	2800      	cmp	r0, #0
    6eba:	d103      	bne.n	6ec4 <beaconReqConfcb+0x28>
    6ebc:	bc0c      	pop	{r2, r3}
    6ebe:	4690      	mov	r8, r2
    6ec0:	4699      	mov	r9, r3
    6ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ec4:	2205      	movs	r2, #5
    6ec6:	6823      	ldr	r3, [r4, #0]
    6ec8:	7018      	strb	r0, [r3, #0]
    6eca:	4b1b      	ldr	r3, [pc, #108]	; (6f38 <beaconReqConfcb+0x9c>)
    6ecc:	6821      	ldr	r1, [r4, #0]
    6ece:	4c1b      	ldr	r4, [pc, #108]	; (6f3c <beaconReqConfcb+0xa0>)
    6ed0:	701a      	strb	r2, [r3, #0]
    6ed2:	7848      	ldrb	r0, [r1, #1]
    6ed4:	6823      	ldr	r3, [r4, #0]
    6ed6:	4798      	blx	r3
    6ed8:	2300      	movs	r3, #0
    6eda:	6023      	str	r3, [r4, #0]
    6edc:	e7ee      	b.n	6ebc <beaconReqConfcb+0x20>
    6ede:	2401      	movs	r4, #1
    6ee0:	0022      	movs	r2, r4
    6ee2:	4e17      	ldr	r6, [pc, #92]	; (6f40 <beaconReqConfcb+0xa4>)
    6ee4:	4b17      	ldr	r3, [pc, #92]	; (6f44 <beaconReqConfcb+0xa8>)
    6ee6:	6133      	str	r3, [r6, #16]
    6ee8:	4b17      	ldr	r3, [pc, #92]	; (6f48 <beaconReqConfcb+0xac>)
    6eea:	4699      	mov	r9, r3
    6eec:	781b      	ldrb	r3, [r3, #0]
    6eee:	409a      	lsls	r2, r3
    6ef0:	0013      	movs	r3, r2
    6ef2:	3301      	adds	r3, #1
    6ef4:	0118      	lsls	r0, r3, #4
    6ef6:	1ac0      	subs	r0, r0, r3
    6ef8:	4b14      	ldr	r3, [pc, #80]	; (6f4c <beaconReqConfcb+0xb0>)
    6efa:	0180      	lsls	r0, r0, #6
    6efc:	4698      	mov	r8, r3
    6efe:	4798      	blx	r3
    6f00:	21fa      	movs	r1, #250	; 0xfa
    6f02:	4f13      	ldr	r7, [pc, #76]	; (6f50 <beaconReqConfcb+0xb4>)
    6f04:	0089      	lsls	r1, r1, #2
    6f06:	47b8      	blx	r7
    6f08:	464b      	mov	r3, r9
    6f0a:	781b      	ldrb	r3, [r3, #0]
    6f0c:	6070      	str	r0, [r6, #4]
    6f0e:	409c      	lsls	r4, r3
    6f10:	3401      	adds	r4, #1
    6f12:	0120      	lsls	r0, r4, #4
    6f14:	1b00      	subs	r0, r0, r4
    6f16:	0180      	lsls	r0, r0, #6
    6f18:	47c0      	blx	r8
    6f1a:	21fa      	movs	r1, #250	; 0xfa
    6f1c:	0089      	lsls	r1, r1, #2
    6f1e:	47b8      	blx	r7
    6f20:	4b0c      	ldr	r3, [pc, #48]	; (6f54 <beaconReqConfcb+0xb8>)
    6f22:	60b0      	str	r0, [r6, #8]
    6f24:	0030      	movs	r0, r6
    6f26:	7335      	strb	r5, [r6, #12]
    6f28:	4798      	blx	r3
    6f2a:	e7c7      	b.n	6ebc <beaconReqConfcb+0x20>
    6f2c:	000034a9 	.word	0x000034a9
    6f30:	20000388 	.word	0x20000388
    6f34:	00006c01 	.word	0x00006c01
    6f38:	20000360 	.word	0x20000360
    6f3c:	20000384 	.word	0x20000384
    6f40:	200013f4 	.word	0x200013f4
    6f44:	00006ce5 	.word	0x00006ce5
    6f48:	200013f1 	.word	0x200013f1
    6f4c:	00002cb9 	.word	0x00002cb9
    6f50:	000076d9 	.word	0x000076d9
    6f54:	000036f1 	.word	0x000036f1

00006f58 <dataReqConfcb>:
    6f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f5a:	0010      	movs	r0, r2
    6f5c:	4b26      	ldr	r3, [pc, #152]	; (6ff8 <dataReqConfcb+0xa0>)
    6f5e:	000c      	movs	r4, r1
    6f60:	4798      	blx	r3
    6f62:	2c00      	cmp	r4, #0
    6f64:	d11b      	bne.n	6f9e <dataReqConfcb+0x46>
    6f66:	4b25      	ldr	r3, [pc, #148]	; (6ffc <dataReqConfcb+0xa4>)
    6f68:	2514      	movs	r5, #20
    6f6a:	781b      	ldrb	r3, [r3, #0]
    6f6c:	2b0a      	cmp	r3, #10
    6f6e:	d800      	bhi.n	6f72 <dataReqConfcb+0x1a>
    6f70:	351e      	adds	r5, #30
    6f72:	4c23      	ldr	r4, [pc, #140]	; (7000 <dataReqConfcb+0xa8>)
    6f74:	4b23      	ldr	r3, [pc, #140]	; (7004 <dataReqConfcb+0xac>)
    6f76:	0020      	movs	r0, r4
    6f78:	4798      	blx	r3
    6f7a:	4b23      	ldr	r3, [pc, #140]	; (7008 <dataReqConfcb+0xb0>)
    6f7c:	0020      	movs	r0, r4
    6f7e:	6123      	str	r3, [r4, #16]
    6f80:	2300      	movs	r3, #0
    6f82:	7323      	strb	r3, [r4, #12]
    6f84:	4b21      	ldr	r3, [pc, #132]	; (700c <dataReqConfcb+0xb4>)
    6f86:	6065      	str	r5, [r4, #4]
    6f88:	60a5      	str	r5, [r4, #8]
    6f8a:	4798      	blx	r3
    6f8c:	2201      	movs	r2, #1
    6f8e:	4b20      	ldr	r3, [pc, #128]	; (7010 <dataReqConfcb+0xb8>)
    6f90:	4e20      	ldr	r6, [pc, #128]	; (7014 <dataReqConfcb+0xbc>)
    6f92:	701a      	strb	r2, [r3, #0]
    6f94:	6833      	ldr	r3, [r6, #0]
    6f96:	7a5a      	ldrb	r2, [r3, #9]
    6f98:	4b1f      	ldr	r3, [pc, #124]	; (7018 <dataReqConfcb+0xc0>)
    6f9a:	701a      	strb	r2, [r3, #0]
    6f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f9e:	4d18      	ldr	r5, [pc, #96]	; (7000 <dataReqConfcb+0xa8>)
    6fa0:	4f18      	ldr	r7, [pc, #96]	; (7004 <dataReqConfcb+0xac>)
    6fa2:	0028      	movs	r0, r5
    6fa4:	47b8      	blx	r7
    6fa6:	4b1d      	ldr	r3, [pc, #116]	; (701c <dataReqConfcb+0xc4>)
    6fa8:	4e1a      	ldr	r6, [pc, #104]	; (7014 <dataReqConfcb+0xbc>)
    6faa:	612b      	str	r3, [r5, #16]
    6fac:	6833      	ldr	r3, [r6, #0]
    6fae:	0028      	movs	r0, r5
    6fb0:	7a1a      	ldrb	r2, [r3, #8]
    6fb2:	23fa      	movs	r3, #250	; 0xfa
    6fb4:	009b      	lsls	r3, r3, #2
    6fb6:	4353      	muls	r3, r2
    6fb8:	606b      	str	r3, [r5, #4]
    6fba:	60ab      	str	r3, [r5, #8]
    6fbc:	2300      	movs	r3, #0
    6fbe:	732b      	strb	r3, [r5, #12]
    6fc0:	4b12      	ldr	r3, [pc, #72]	; (700c <dataReqConfcb+0xb4>)
    6fc2:	4798      	blx	r3
    6fc4:	2c03      	cmp	r4, #3
    6fc6:	d1e5      	bne.n	6f94 <dataReqConfcb+0x3c>
    6fc8:	4a13      	ldr	r2, [pc, #76]	; (7018 <dataReqConfcb+0xc0>)
    6fca:	7813      	ldrb	r3, [r2, #0]
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d0e5      	beq.n	6f9c <dataReqConfcb+0x44>
    6fd0:	3b01      	subs	r3, #1
    6fd2:	b2db      	uxtb	r3, r3
    6fd4:	7013      	strb	r3, [r2, #0]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d1e0      	bne.n	6f9c <dataReqConfcb+0x44>
    6fda:	0028      	movs	r0, r5
    6fdc:	47b8      	blx	r7
    6fde:	2208      	movs	r2, #8
    6fe0:	4b0f      	ldr	r3, [pc, #60]	; (7020 <dataReqConfcb+0xc8>)
    6fe2:	701a      	strb	r2, [r3, #0]
    6fe4:	4b0f      	ldr	r3, [pc, #60]	; (7024 <dataReqConfcb+0xcc>)
    6fe6:	3a09      	subs	r2, #9
    6fe8:	801a      	strh	r2, [r3, #0]
    6fea:	4b0f      	ldr	r3, [pc, #60]	; (7028 <dataReqConfcb+0xd0>)
    6fec:	681b      	ldr	r3, [r3, #0]
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d0d4      	beq.n	6f9c <dataReqConfcb+0x44>
    6ff2:	4798      	blx	r3
    6ff4:	e7d2      	b.n	6f9c <dataReqConfcb+0x44>
    6ff6:	46c0      	nop			; (mov r8, r8)
    6ff8:	000034a9 	.word	0x000034a9
    6ffc:	200013a4 	.word	0x200013a4
    7000:	200013dc 	.word	0x200013dc
    7004:	00003685 	.word	0x00003685
    7008:	00006df9 	.word	0x00006df9
    700c:	000036f1 	.word	0x000036f1
    7010:	2000037c 	.word	0x2000037c
    7014:	20001390 	.word	0x20001390
    7018:	200013f0 	.word	0x200013f0
    701c:	00006d31 	.word	0x00006d31
    7020:	20000360 	.word	0x20000360
    7024:	200013d8 	.word	0x200013d8
    7028:	20001410 	.word	0x20001410

0000702c <keepAliveReqConfcb>:
    702c:	b570      	push	{r4, r5, r6, lr}
    702e:	0015      	movs	r5, r2
    7030:	22ff      	movs	r2, #255	; 0xff
    7032:	4c14      	ldr	r4, [pc, #80]	; (7084 <keepAliveReqConfcb+0x58>)
    7034:	8823      	ldrh	r3, [r4, #0]
    7036:	421a      	tst	r2, r3
    7038:	d103      	bne.n	7042 <keepAliveReqConfcb+0x16>
    703a:	0028      	movs	r0, r5
    703c:	4b12      	ldr	r3, [pc, #72]	; (7088 <keepAliveReqConfcb+0x5c>)
    703e:	4798      	blx	r3
    7040:	bd70      	pop	{r4, r5, r6, pc}
    7042:	2903      	cmp	r1, #3
    7044:	d005      	beq.n	7052 <keepAliveReqConfcb+0x26>
    7046:	4b11      	ldr	r3, [pc, #68]	; (708c <keepAliveReqConfcb+0x60>)
    7048:	681b      	ldr	r3, [r3, #0]
    704a:	7a5a      	ldrb	r2, [r3, #9]
    704c:	4b10      	ldr	r3, [pc, #64]	; (7090 <keepAliveReqConfcb+0x64>)
    704e:	701a      	strb	r2, [r3, #0]
    7050:	e7f3      	b.n	703a <keepAliveReqConfcb+0xe>
    7052:	4a0f      	ldr	r2, [pc, #60]	; (7090 <keepAliveReqConfcb+0x64>)
    7054:	7813      	ldrb	r3, [r2, #0]
    7056:	2b00      	cmp	r3, #0
    7058:	d0ef      	beq.n	703a <keepAliveReqConfcb+0xe>
    705a:	3b01      	subs	r3, #1
    705c:	b2db      	uxtb	r3, r3
    705e:	7013      	strb	r3, [r2, #0]
    7060:	2b00      	cmp	r3, #0
    7062:	d1ea      	bne.n	703a <keepAliveReqConfcb+0xe>
    7064:	4b0b      	ldr	r3, [pc, #44]	; (7094 <keepAliveReqConfcb+0x68>)
    7066:	480c      	ldr	r0, [pc, #48]	; (7098 <keepAliveReqConfcb+0x6c>)
    7068:	4798      	blx	r3
    706a:	2208      	movs	r2, #8
    706c:	4b0b      	ldr	r3, [pc, #44]	; (709c <keepAliveReqConfcb+0x70>)
    706e:	701a      	strb	r2, [r3, #0]
    7070:	2301      	movs	r3, #1
    7072:	425b      	negs	r3, r3
    7074:	8023      	strh	r3, [r4, #0]
    7076:	4b0a      	ldr	r3, [pc, #40]	; (70a0 <keepAliveReqConfcb+0x74>)
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	2b00      	cmp	r3, #0
    707c:	d0dd      	beq.n	703a <keepAliveReqConfcb+0xe>
    707e:	4798      	blx	r3
    7080:	e7db      	b.n	703a <keepAliveReqConfcb+0xe>
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	200013d8 	.word	0x200013d8
    7088:	000034a9 	.word	0x000034a9
    708c:	20001390 	.word	0x20001390
    7090:	200013f0 	.word	0x200013f0
    7094:	00003685 	.word	0x00003685
    7098:	200013dc 	.word	0x200013dc
    709c:	20000360 	.word	0x20000360
    70a0:	20001410 	.word	0x20001410

000070a4 <MiApp_EstablishConnection>:
    70a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    70a6:	46ce      	mov	lr, r9
    70a8:	4647      	mov	r7, r8
    70aa:	b580      	push	{r7, lr}
    70ac:	001e      	movs	r6, r3
    70ae:	4b2e      	ldr	r3, [pc, #184]	; (7168 <MiApp_EstablishConnection+0xc4>)
    70b0:	b08f      	sub	sp, #60	; 0x3c
    70b2:	681b      	ldr	r3, [r3, #0]
    70b4:	0004      	movs	r4, r0
    70b6:	681b      	ldr	r3, [r3, #0]
    70b8:	0015      	movs	r5, r2
    70ba:	9305      	str	r3, [sp, #20]
    70bc:	4b2b      	ldr	r3, [pc, #172]	; (716c <MiApp_EstablishConnection+0xc8>)
    70be:	4798      	blx	r3
    70c0:	40e0      	lsrs	r0, r4
    70c2:	2401      	movs	r4, #1
    70c4:	07c3      	lsls	r3, r0, #31
    70c6:	d507      	bpl.n	70d8 <MiApp_EstablishConnection+0x34>
    70c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    70ca:	2b00      	cmp	r3, #0
    70cc:	d004      	beq.n	70d8 <MiApp_EstablishConnection+0x34>
    70ce:	4f28      	ldr	r7, [pc, #160]	; (7170 <MiApp_EstablishConnection+0xcc>)
    70d0:	783b      	ldrb	r3, [r7, #0]
    70d2:	2b00      	cmp	r3, #0
    70d4:	d106      	bne.n	70e4 <MiApp_EstablishConnection+0x40>
    70d6:	2400      	movs	r4, #0
    70d8:	0020      	movs	r0, r4
    70da:	b00f      	add	sp, #60	; 0x3c
    70dc:	bc0c      	pop	{r2, r3}
    70de:	4690      	mov	r8, r2
    70e0:	4699      	mov	r9, r3
    70e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70e4:	2078      	movs	r0, #120	; 0x78
    70e6:	4b23      	ldr	r3, [pc, #140]	; (7174 <MiApp_EstablishConnection+0xd0>)
    70e8:	4798      	blx	r3
    70ea:	4680      	mov	r8, r0
    70ec:	2800      	cmp	r0, #0
    70ee:	d0f2      	beq.n	70d6 <MiApp_EstablishConnection+0x32>
    70f0:	2304      	movs	r3, #4
    70f2:	703b      	strb	r3, [r7, #0]
    70f4:	786b      	ldrb	r3, [r5, #1]
    70f6:	782a      	ldrb	r2, [r5, #0]
    70f8:	021b      	lsls	r3, r3, #8
    70fa:	18d2      	adds	r2, r2, r3
    70fc:	b292      	uxth	r2, r2
    70fe:	ab06      	add	r3, sp, #24
    7100:	491d      	ldr	r1, [pc, #116]	; (7178 <MiApp_EstablishConnection+0xd4>)
    7102:	2001      	movs	r0, #1
    7104:	4f1d      	ldr	r7, [pc, #116]	; (717c <MiApp_EstablishConnection+0xd8>)
    7106:	47b8      	blx	r7
    7108:	466b      	mov	r3, sp
    710a:	2220      	movs	r2, #32
    710c:	7e5b      	ldrb	r3, [r3, #25]
    710e:	4641      	mov	r1, r8
    7110:	4313      	orrs	r3, r2
    7112:	466a      	mov	r2, sp
    7114:	a806      	add	r0, sp, #24
    7116:	7653      	strb	r3, [r2, #25]
    7118:	4b19      	ldr	r3, [pc, #100]	; (7180 <MiApp_EstablishConnection+0xdc>)
    711a:	4798      	blx	r3
    711c:	4642      	mov	r2, r8
    711e:	2303      	movs	r3, #3
    7120:	5413      	strb	r3, [r2, r0]
    7122:	0003      	movs	r3, r0
    7124:	3301      	adds	r3, #1
    7126:	b2db      	uxtb	r3, r3
    7128:	54d4      	strb	r4, [r2, r3]
    712a:	0003      	movs	r3, r0
    712c:	4681      	mov	r9, r0
    712e:	3302      	adds	r3, #2
    7130:	3003      	adds	r0, #3
    7132:	b2db      	uxtb	r3, r3
    7134:	b2c0      	uxtb	r0, r0
    7136:	54d6      	strb	r6, [r2, r3]
    7138:	a905      	add	r1, sp, #20
    713a:	2204      	movs	r2, #4
    713c:	4b11      	ldr	r3, [pc, #68]	; (7184 <MiApp_EstablishConnection+0xe0>)
    713e:	4440      	add	r0, r8
    7140:	4798      	blx	r3
    7142:	4b11      	ldr	r3, [pc, #68]	; (7188 <MiApp_EstablishConnection+0xe4>)
    7144:	9a16      	ldr	r2, [sp, #88]	; 0x58
    7146:	4c11      	ldr	r4, [pc, #68]	; (718c <MiApp_EstablishConnection+0xe8>)
    7148:	601a      	str	r2, [r3, #0]
    714a:	4b11      	ldr	r3, [pc, #68]	; (7190 <MiApp_EstablishConnection+0xec>)
    714c:	9501      	str	r5, [sp, #4]
    714e:	9303      	str	r3, [sp, #12]
    7150:	2300      	movs	r3, #0
    7152:	9302      	str	r3, [sp, #8]
    7154:	3302      	adds	r3, #2
    7156:	9300      	str	r3, [sp, #0]
    7158:	2207      	movs	r2, #7
    715a:	4643      	mov	r3, r8
    715c:	4649      	mov	r1, r9
    715e:	a806      	add	r0, sp, #24
    7160:	47a0      	blx	r4
    7162:	0004      	movs	r4, r0
    7164:	e7b8      	b.n	70d8 <MiApp_EstablishConnection+0x34>
    7166:	46c0      	nop			; (mov r8, r8)
    7168:	20001390 	.word	0x20001390
    716c:	00002cbd 	.word	0x00002cbd
    7170:	20000360 	.word	0x20000360
    7174:	00003461 	.word	0x00003461
    7178:	0000ffff 	.word	0x0000ffff
    717c:	00006281 	.word	0x00006281
    7180:	000062ad 	.word	0x000062ad
    7184:	00007a7f 	.word	0x00007a7f
    7188:	20000380 	.word	0x20000380
    718c:	00006345 	.word	0x00006345
    7190:	00006e41 	.word	0x00006e41

00007194 <MiApp_SearchConnection>:
    7194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7196:	0003      	movs	r3, r0
    7198:	2001      	movs	r0, #1
    719a:	2b0e      	cmp	r3, #14
    719c:	d80a      	bhi.n	71b4 <MiApp_SearchConnection+0x20>
    719e:	2a00      	cmp	r2, #0
    71a0:	d008      	beq.n	71b4 <MiApp_SearchConnection+0x20>
    71a2:	4d18      	ldr	r5, [pc, #96]	; (7204 <MiApp_SearchConnection+0x70>)
    71a4:	2604      	movs	r6, #4
    71a6:	782c      	ldrb	r4, [r5, #0]
    71a8:	0027      	movs	r7, r4
    71aa:	43b7      	bics	r7, r6
    71ac:	2f01      	cmp	r7, #1
    71ae:	d002      	beq.n	71b6 <MiApp_SearchConnection+0x22>
    71b0:	2c08      	cmp	r4, #8
    71b2:	d000      	beq.n	71b6 <MiApp_SearchConnection+0x22>
    71b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71b6:	2003      	movs	r0, #3
    71b8:	7028      	strb	r0, [r5, #0]
    71ba:	2500      	movs	r5, #0
    71bc:	4812      	ldr	r0, [pc, #72]	; (7208 <MiApp_SearchConnection+0x74>)
    71be:	4c13      	ldr	r4, [pc, #76]	; (720c <MiApp_SearchConnection+0x78>)
    71c0:	7003      	strb	r3, [r0, #0]
    71c2:	4b13      	ldr	r3, [pc, #76]	; (7210 <MiApp_SearchConnection+0x7c>)
    71c4:	681b      	ldr	r3, [r3, #0]
    71c6:	691b      	ldr	r3, [r3, #16]
    71c8:	6023      	str	r3, [r4, #0]
    71ca:	705d      	strb	r5, [r3, #1]
    71cc:	2308      	movs	r3, #8
    71ce:	6820      	ldr	r0, [r4, #0]
    71d0:	7003      	strb	r3, [r0, #0]
    71d2:	6823      	ldr	r3, [r4, #0]
    71d4:	6059      	str	r1, [r3, #4]
    71d6:	4b0f      	ldr	r3, [pc, #60]	; (7214 <MiApp_SearchConnection+0x80>)
    71d8:	601a      	str	r2, [r3, #0]
    71da:	4b0f      	ldr	r3, [pc, #60]	; (7218 <MiApp_SearchConnection+0x84>)
    71dc:	4798      	blx	r3
    71de:	4e0f      	ldr	r6, [pc, #60]	; (721c <MiApp_SearchConnection+0x88>)
    71e0:	2101      	movs	r1, #1
    71e2:	7035      	strb	r5, [r6, #0]
    71e4:	2201      	movs	r2, #1
    71e6:	07c3      	lsls	r3, r0, #31
    71e8:	d501      	bpl.n	71ee <MiApp_SearchConnection+0x5a>
    71ea:	e006      	b.n	71fa <MiApp_SearchConnection+0x66>
    71ec:	0019      	movs	r1, r3
    71ee:	1c4b      	adds	r3, r1, #1
    71f0:	0052      	lsls	r2, r2, #1
    71f2:	b2db      	uxtb	r3, r3
    71f4:	4202      	tst	r2, r0
    71f6:	d0f9      	beq.n	71ec <MiApp_SearchConnection+0x58>
    71f8:	7031      	strb	r1, [r6, #0]
    71fa:	6820      	ldr	r0, [r4, #0]
    71fc:	4b08      	ldr	r3, [pc, #32]	; (7220 <MiApp_SearchConnection+0x8c>)
    71fe:	4798      	blx	r3
    7200:	e7d8      	b.n	71b4 <MiApp_SearchConnection+0x20>
    7202:	46c0      	nop			; (mov r8, r8)
    7204:	20000360 	.word	0x20000360
    7208:	200013f1 	.word	0x200013f1
    720c:	20000388 	.word	0x20000388
    7210:	20001390 	.word	0x20001390
    7214:	20000384 	.word	0x20000384
    7218:	00002cbd 	.word	0x00002cbd
    721c:	200013a4 	.word	0x200013a4
    7220:	00006c01 	.word	0x00006c01

00007224 <handleJoinMessage>:
    7224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7226:	4657      	mov	r7, sl
    7228:	464e      	mov	r6, r9
    722a:	4645      	mov	r5, r8
    722c:	46de      	mov	lr, fp
    722e:	b5e0      	push	{r5, r6, r7, lr}
    7230:	001d      	movs	r5, r3
    7232:	782c      	ldrb	r4, [r5, #0]
    7234:	ab0a      	add	r3, sp, #40	; 0x28
    7236:	0006      	movs	r6, r0
    7238:	781f      	ldrb	r7, [r3, #0]
    723a:	2c04      	cmp	r4, #4
    723c:	d03a      	beq.n	72b4 <handleJoinMessage+0x90>
    723e:	2c08      	cmp	r4, #8
    7240:	d029      	beq.n	7296 <handleJoinMessage+0x72>
    7242:	2c02      	cmp	r4, #2
    7244:	d005      	beq.n	7252 <handleJoinMessage+0x2e>
    7246:	bc3c      	pop	{r2, r3, r4, r5}
    7248:	4690      	mov	r8, r2
    724a:	4699      	mov	r9, r3
    724c:	46a2      	mov	sl, r4
    724e:	46ab      	mov	fp, r5
    7250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7252:	4c74      	ldr	r4, [pc, #464]	; (7424 <handleJoinMessage+0x200>)
    7254:	7823      	ldrb	r3, [r4, #0]
    7256:	2b03      	cmp	r3, #3
    7258:	d1f5      	bne.n	7246 <handleJoinMessage+0x22>
    725a:	4b73      	ldr	r3, [pc, #460]	; (7428 <handleJoinMessage+0x204>)
    725c:	4698      	mov	r8, r3
    725e:	681b      	ldr	r3, [r3, #0]
    7260:	785a      	ldrb	r2, [r3, #1]
    7262:	4b72      	ldr	r3, [pc, #456]	; (742c <handleJoinMessage+0x208>)
    7264:	4699      	mov	r9, r3
    7266:	681b      	ldr	r3, [r3, #0]
    7268:	7d1b      	ldrb	r3, [r3, #20]
    726a:	429a      	cmp	r2, r3
    726c:	d335      	bcc.n	72da <handleJoinMessage+0xb6>
    726e:	429a      	cmp	r2, r3
    7270:	d1e9      	bne.n	7246 <handleJoinMessage+0x22>
    7272:	486f      	ldr	r0, [pc, #444]	; (7430 <handleJoinMessage+0x20c>)
    7274:	4b6f      	ldr	r3, [pc, #444]	; (7434 <handleJoinMessage+0x210>)
    7276:	4798      	blx	r3
    7278:	4642      	mov	r2, r8
    727a:	2309      	movs	r3, #9
    727c:	6812      	ldr	r2, [r2, #0]
    727e:	7013      	strb	r3, [r2, #0]
    7280:	3b04      	subs	r3, #4
    7282:	7023      	strb	r3, [r4, #0]
    7284:	4643      	mov	r3, r8
    7286:	4c6c      	ldr	r4, [pc, #432]	; (7438 <handleJoinMessage+0x214>)
    7288:	6819      	ldr	r1, [r3, #0]
    728a:	6823      	ldr	r3, [r4, #0]
    728c:	7848      	ldrb	r0, [r1, #1]
    728e:	4798      	blx	r3
    7290:	2300      	movs	r3, #0
    7292:	6023      	str	r3, [r4, #0]
    7294:	e7d7      	b.n	7246 <handleJoinMessage+0x22>
    7296:	4b67      	ldr	r3, [pc, #412]	; (7434 <handleJoinMessage+0x210>)
    7298:	4868      	ldr	r0, [pc, #416]	; (743c <handleJoinMessage+0x218>)
    729a:	4798      	blx	r3
    729c:	2201      	movs	r2, #1
    729e:	4b61      	ldr	r3, [pc, #388]	; (7424 <handleJoinMessage+0x200>)
    72a0:	4252      	negs	r2, r2
    72a2:	701c      	strb	r4, [r3, #0]
    72a4:	4b66      	ldr	r3, [pc, #408]	; (7440 <handleJoinMessage+0x21c>)
    72a6:	801a      	strh	r2, [r3, #0]
    72a8:	4b66      	ldr	r3, [pc, #408]	; (7444 <handleJoinMessage+0x220>)
    72aa:	681b      	ldr	r3, [r3, #0]
    72ac:	2b00      	cmp	r3, #0
    72ae:	d0ca      	beq.n	7246 <handleJoinMessage+0x22>
    72b0:	4798      	blx	r3
    72b2:	e7c8      	b.n	7246 <handleJoinMessage+0x22>
    72b4:	4c5b      	ldr	r4, [pc, #364]	; (7424 <handleJoinMessage+0x200>)
    72b6:	7823      	ldrb	r3, [r4, #0]
    72b8:	2b04      	cmp	r3, #4
    72ba:	d1c4      	bne.n	7246 <handleJoinMessage+0x22>
    72bc:	485c      	ldr	r0, [pc, #368]	; (7430 <handleJoinMessage+0x20c>)
    72be:	4b5d      	ldr	r3, [pc, #372]	; (7434 <handleJoinMessage+0x210>)
    72c0:	4798      	blx	r3
    72c2:	786f      	ldrb	r7, [r5, #1]
    72c4:	2f00      	cmp	r7, #0
    72c6:	d067      	beq.n	7398 <handleJoinMessage+0x174>
    72c8:	2305      	movs	r3, #5
    72ca:	7023      	strb	r3, [r4, #0]
    72cc:	4c5e      	ldr	r4, [pc, #376]	; (7448 <handleJoinMessage+0x224>)
    72ce:	0038      	movs	r0, r7
    72d0:	6823      	ldr	r3, [r4, #0]
    72d2:	4798      	blx	r3
    72d4:	2300      	movs	r3, #0
    72d6:	6023      	str	r3, [r4, #0]
    72d8:	e7b5      	b.n	7246 <handleJoinMessage+0x22>
    72da:	1deb      	adds	r3, r5, #7
    72dc:	469a      	mov	sl, r3
    72de:	0018      	movs	r0, r3
    72e0:	4a5a      	ldr	r2, [pc, #360]	; (744c <handleJoinMessage+0x228>)
    72e2:	2108      	movs	r1, #8
    72e4:	4b5a      	ldr	r3, [pc, #360]	; (7450 <handleJoinMessage+0x22c>)
    72e6:	4798      	blx	r3
    72e8:	2800      	cmp	r0, #0
    72ea:	d0ac      	beq.n	7246 <handleJoinMessage+0x22>
    72ec:	4642      	mov	r2, r8
    72ee:	2300      	movs	r3, #0
    72f0:	6812      	ldr	r2, [r2, #0]
    72f2:	7013      	strb	r3, [r2, #0]
    72f4:	4643      	mov	r3, r8
    72f6:	681b      	ldr	r3, [r3, #0]
    72f8:	88f0      	ldrh	r0, [r6, #6]
    72fa:	469c      	mov	ip, r3
    72fc:	785b      	ldrb	r3, [r3, #1]
    72fe:	469b      	mov	fp, r3
    7300:	2b00      	cmp	r3, #0
    7302:	d017      	beq.n	7334 <handleJoinMessage+0x110>
    7304:	4663      	mov	r3, ip
    7306:	8a1b      	ldrh	r3, [r3, #16]
    7308:	4283      	cmp	r3, r0
    730a:	d09c      	beq.n	7246 <handleJoinMessage+0x22>
    730c:	465a      	mov	r2, fp
    730e:	4663      	mov	r3, ip
    7310:	3a01      	subs	r2, #1
    7312:	b2d2      	uxtb	r2, r2
    7314:	00d1      	lsls	r1, r2, #3
    7316:	1889      	adds	r1, r1, r2
    7318:	0049      	lsls	r1, r1, #1
    731a:	3122      	adds	r1, #34	; 0x22
    731c:	3322      	adds	r3, #34	; 0x22
    731e:	4461      	add	r1, ip
    7320:	e006      	b.n	7330 <handleJoinMessage+0x10c>
    7322:	3312      	adds	r3, #18
    7324:	001a      	movs	r2, r3
    7326:	3a12      	subs	r2, #18
    7328:	8812      	ldrh	r2, [r2, #0]
    732a:	4282      	cmp	r2, r0
    732c:	d100      	bne.n	7330 <handleJoinMessage+0x10c>
    732e:	e78a      	b.n	7246 <handleJoinMessage+0x22>
    7330:	4299      	cmp	r1, r3
    7332:	d1f6      	bne.n	7322 <handleJoinMessage+0xfe>
    7334:	465b      	mov	r3, fp
    7336:	4a47      	ldr	r2, [pc, #284]	; (7454 <handleJoinMessage+0x230>)
    7338:	00db      	lsls	r3, r3, #3
    733a:	445b      	add	r3, fp
    733c:	7812      	ldrb	r2, [r2, #0]
    733e:	005b      	lsls	r3, r3, #1
    7340:	4463      	add	r3, ip
    7342:	8218      	strh	r0, [r3, #16]
    7344:	731a      	strb	r2, [r3, #12]
    7346:	8872      	ldrh	r2, [r6, #2]
    7348:	1d69      	adds	r1, r5, #5
    734a:	81da      	strh	r2, [r3, #14]
    734c:	786a      	ldrb	r2, [r5, #1]
    734e:	721a      	strb	r2, [r3, #8]
    7350:	78aa      	ldrb	r2, [r5, #2]
    7352:	725a      	strb	r2, [r3, #9]
    7354:	78ea      	ldrb	r2, [r5, #3]
    7356:	729a      	strb	r2, [r3, #10]
    7358:	792a      	ldrb	r2, [r5, #4]
    735a:	4d3f      	ldr	r5, [pc, #252]	; (7458 <handleJoinMessage+0x234>)
    735c:	72da      	strb	r2, [r3, #11]
    735e:	465b      	mov	r3, fp
    7360:	3301      	adds	r3, #1
    7362:	00d8      	lsls	r0, r3, #3
    7364:	18c0      	adds	r0, r0, r3
    7366:	0040      	lsls	r0, r0, #1
    7368:	4460      	add	r0, ip
    736a:	2208      	movs	r2, #8
    736c:	47a8      	blx	r5
    736e:	2208      	movs	r2, #8
    7370:	4651      	mov	r1, sl
    7372:	483a      	ldr	r0, [pc, #232]	; (745c <handleJoinMessage+0x238>)
    7374:	47a8      	blx	r5
    7376:	4643      	mov	r3, r8
    7378:	681a      	ldr	r2, [r3, #0]
    737a:	7851      	ldrb	r1, [r2, #1]
    737c:	00cb      	lsls	r3, r1, #3
    737e:	185b      	adds	r3, r3, r1
    7380:	005b      	lsls	r3, r3, #1
    7382:	18d3      	adds	r3, r2, r3
    7384:	735f      	strb	r7, [r3, #13]
    7386:	4643      	mov	r3, r8
    7388:	3101      	adds	r1, #1
    738a:	7051      	strb	r1, [r2, #1]
    738c:	681b      	ldr	r3, [r3, #0]
    738e:	785a      	ldrb	r2, [r3, #1]
    7390:	464b      	mov	r3, r9
    7392:	681b      	ldr	r3, [r3, #0]
    7394:	7d1b      	ldrb	r3, [r3, #20]
    7396:	e76a      	b.n	726e <handleJoinMessage+0x4a>
    7398:	78ea      	ldrb	r2, [r5, #3]
    739a:	78ab      	ldrb	r3, [r5, #2]
    739c:	0212      	lsls	r2, r2, #8
    739e:	4313      	orrs	r3, r2
    73a0:	4a27      	ldr	r2, [pc, #156]	; (7440 <handleJoinMessage+0x21c>)
    73a2:	492f      	ldr	r1, [pc, #188]	; (7460 <handleJoinMessage+0x23c>)
    73a4:	4690      	mov	r8, r2
    73a6:	8013      	strh	r3, [r2, #0]
    73a8:	88f2      	ldrh	r2, [r6, #6]
    73aa:	4b2e      	ldr	r3, [pc, #184]	; (7464 <handleJoinMessage+0x240>)
    73ac:	4640      	mov	r0, r8
    73ae:	801a      	strh	r2, [r3, #0]
    73b0:	8873      	ldrh	r3, [r6, #2]
    73b2:	800b      	strh	r3, [r1, #0]
    73b4:	4b2c      	ldr	r3, [pc, #176]	; (7468 <handleJoinMessage+0x244>)
    73b6:	4798      	blx	r3
    73b8:	4b1c      	ldr	r3, [pc, #112]	; (742c <handleJoinMessage+0x208>)
    73ba:	1d29      	adds	r1, r5, #4
    73bc:	681e      	ldr	r6, [r3, #0]
    73be:	4b2b      	ldr	r3, [pc, #172]	; (746c <handleJoinMessage+0x248>)
    73c0:	7a72      	ldrb	r2, [r6, #9]
    73c2:	701a      	strb	r2, [r3, #0]
    73c4:	4b2a      	ldr	r3, [pc, #168]	; (7470 <handleJoinMessage+0x24c>)
    73c6:	2210      	movs	r2, #16
    73c8:	6818      	ldr	r0, [r3, #0]
    73ca:	4b23      	ldr	r3, [pc, #140]	; (7458 <handleJoinMessage+0x234>)
    73cc:	3010      	adds	r0, #16
    73ce:	4798      	blx	r3
    73d0:	2306      	movs	r3, #6
    73d2:	7023      	strb	r3, [r4, #0]
    73d4:	4643      	mov	r3, r8
    73d6:	22ff      	movs	r2, #255	; 0xff
    73d8:	881b      	ldrh	r3, [r3, #0]
    73da:	421a      	tst	r2, r3
    73dc:	d012      	beq.n	7404 <handleJoinMessage+0x1e0>
    73de:	4643      	mov	r3, r8
    73e0:	881b      	ldrh	r3, [r3, #0]
    73e2:	4816      	ldr	r0, [pc, #88]	; (743c <handleJoinMessage+0x218>)
    73e4:	061b      	lsls	r3, r3, #24
    73e6:	d50f      	bpl.n	7408 <handleJoinMessage+0x1e4>
    73e8:	4b22      	ldr	r3, [pc, #136]	; (7474 <handleJoinMessage+0x250>)
    73ea:	6103      	str	r3, [r0, #16]
    73ec:	23fa      	movs	r3, #250	; 0xfa
    73ee:	88b2      	ldrh	r2, [r6, #4]
    73f0:	009b      	lsls	r3, r3, #2
    73f2:	435a      	muls	r2, r3
    73f4:	6042      	str	r2, [r0, #4]
    73f6:	88b2      	ldrh	r2, [r6, #4]
    73f8:	4353      	muls	r3, r2
    73fa:	6083      	str	r3, [r0, #8]
    73fc:	2301      	movs	r3, #1
    73fe:	7303      	strb	r3, [r0, #12]
    7400:	4b1d      	ldr	r3, [pc, #116]	; (7478 <handleJoinMessage+0x254>)
    7402:	4798      	blx	r3
    7404:	786f      	ldrb	r7, [r5, #1]
    7406:	e761      	b.n	72cc <handleJoinMessage+0xa8>
    7408:	4b1c      	ldr	r3, [pc, #112]	; (747c <handleJoinMessage+0x258>)
    740a:	6103      	str	r3, [r0, #16]
    740c:	23fa      	movs	r3, #250	; 0xfa
    740e:	7a32      	ldrb	r2, [r6, #8]
    7410:	009b      	lsls	r3, r3, #2
    7412:	4353      	muls	r3, r2
    7414:	6043      	str	r3, [r0, #4]
    7416:	6083      	str	r3, [r0, #8]
    7418:	4b17      	ldr	r3, [pc, #92]	; (7478 <handleJoinMessage+0x254>)
    741a:	7307      	strb	r7, [r0, #12]
    741c:	4798      	blx	r3
    741e:	786f      	ldrb	r7, [r5, #1]
    7420:	e754      	b.n	72cc <handleJoinMessage+0xa8>
    7422:	46c0      	nop			; (mov r8, r8)
    7424:	20000360 	.word	0x20000360
    7428:	20000388 	.word	0x20000388
    742c:	20001390 	.word	0x20001390
    7430:	200013f4 	.word	0x200013f4
    7434:	00003685 	.word	0x00003685
    7438:	20000384 	.word	0x20000384
    743c:	200013dc 	.word	0x200013dc
    7440:	200013d8 	.word	0x200013d8
    7444:	20001410 	.word	0x20001410
    7448:	20000380 	.word	0x20000380
    744c:	2000004c 	.word	0x2000004c
    7450:	00005201 	.word	0x00005201
    7454:	200013a4 	.word	0x200013a4
    7458:	00007a7f 	.word	0x00007a7f
    745c:	20001408 	.word	0x20001408
    7460:	200013c4 	.word	0x200013c4
    7464:	20000054 	.word	0x20000054
    7468:	000025cd 	.word	0x000025cd
    746c:	200013f0 	.word	0x200013f0
    7470:	20001394 	.word	0x20001394
    7474:	00006b81 	.word	0x00006b81
    7478:	000036f1 	.word	0x000036f1
    747c:	00006d31 	.word	0x00006d31

00007480 <MiApp_SubscribeLinkFailureCallback>:
    7480:	2800      	cmp	r0, #0
    7482:	d003      	beq.n	748c <MiApp_SubscribeLinkFailureCallback+0xc>
    7484:	4b02      	ldr	r3, [pc, #8]	; (7490 <MiApp_SubscribeLinkFailureCallback+0x10>)
    7486:	6018      	str	r0, [r3, #0]
    7488:	2001      	movs	r0, #1
    748a:	4770      	bx	lr
    748c:	2000      	movs	r0, #0
    748e:	e7fc      	b.n	748a <MiApp_SubscribeLinkFailureCallback+0xa>
    7490:	20001410 	.word	0x20001410

00007494 <checkLinkFailureAtNoAck>:
    7494:	b510      	push	{r4, lr}
    7496:	2803      	cmp	r0, #3
    7498:	d005      	beq.n	74a6 <checkLinkFailureAtNoAck+0x12>
    749a:	4b0f      	ldr	r3, [pc, #60]	; (74d8 <checkLinkFailureAtNoAck+0x44>)
    749c:	681b      	ldr	r3, [r3, #0]
    749e:	7a5a      	ldrb	r2, [r3, #9]
    74a0:	4b0e      	ldr	r3, [pc, #56]	; (74dc <checkLinkFailureAtNoAck+0x48>)
    74a2:	701a      	strb	r2, [r3, #0]
    74a4:	bd10      	pop	{r4, pc}
    74a6:	4a0d      	ldr	r2, [pc, #52]	; (74dc <checkLinkFailureAtNoAck+0x48>)
    74a8:	7813      	ldrb	r3, [r2, #0]
    74aa:	2b00      	cmp	r3, #0
    74ac:	d0fa      	beq.n	74a4 <checkLinkFailureAtNoAck+0x10>
    74ae:	3b01      	subs	r3, #1
    74b0:	b2db      	uxtb	r3, r3
    74b2:	7013      	strb	r3, [r2, #0]
    74b4:	2b00      	cmp	r3, #0
    74b6:	d1f5      	bne.n	74a4 <checkLinkFailureAtNoAck+0x10>
    74b8:	4b09      	ldr	r3, [pc, #36]	; (74e0 <checkLinkFailureAtNoAck+0x4c>)
    74ba:	480a      	ldr	r0, [pc, #40]	; (74e4 <checkLinkFailureAtNoAck+0x50>)
    74bc:	4798      	blx	r3
    74be:	2208      	movs	r2, #8
    74c0:	4b09      	ldr	r3, [pc, #36]	; (74e8 <checkLinkFailureAtNoAck+0x54>)
    74c2:	701a      	strb	r2, [r3, #0]
    74c4:	4b09      	ldr	r3, [pc, #36]	; (74ec <checkLinkFailureAtNoAck+0x58>)
    74c6:	3a09      	subs	r2, #9
    74c8:	801a      	strh	r2, [r3, #0]
    74ca:	4b09      	ldr	r3, [pc, #36]	; (74f0 <checkLinkFailureAtNoAck+0x5c>)
    74cc:	681b      	ldr	r3, [r3, #0]
    74ce:	2b00      	cmp	r3, #0
    74d0:	d0e8      	beq.n	74a4 <checkLinkFailureAtNoAck+0x10>
    74d2:	4798      	blx	r3
    74d4:	e7e6      	b.n	74a4 <checkLinkFailureAtNoAck+0x10>
    74d6:	46c0      	nop			; (mov r8, r8)
    74d8:	20001390 	.word	0x20001390
    74dc:	200013f0 	.word	0x200013f0
    74e0:	00003685 	.word	0x00003685
    74e4:	200013dc 	.word	0x200013dc
    74e8:	20000360 	.word	0x20000360
    74ec:	200013d8 	.word	0x200013d8
    74f0:	20001410 	.word	0x20001410

000074f4 <keyDetermineProcedure>:
    74f4:	4b06      	ldr	r3, [pc, #24]	; (7510 <keyDetermineProcedure+0x1c>)
    74f6:	781b      	ldrb	r3, [r3, #0]
    74f8:	3b06      	subs	r3, #6
    74fa:	2b01      	cmp	r3, #1
    74fc:	d902      	bls.n	7504 <keyDetermineProcedure+0x10>
    74fe:	4b05      	ldr	r3, [pc, #20]	; (7514 <keyDetermineProcedure+0x20>)
    7500:	6818      	ldr	r0, [r3, #0]
    7502:	4770      	bx	lr
    7504:	2808      	cmp	r0, #8
    7506:	d0fa      	beq.n	74fe <keyDetermineProcedure+0xa>
    7508:	4b02      	ldr	r3, [pc, #8]	; (7514 <keyDetermineProcedure+0x20>)
    750a:	6818      	ldr	r0, [r3, #0]
    750c:	3010      	adds	r0, #16
    750e:	e7f8      	b.n	7502 <keyDetermineProcedure+0xe>
    7510:	20000360 	.word	0x20000360
    7514:	20001394 	.word	0x20001394

00007518 <secureFrame>:
    7518:	b5f0      	push	{r4, r5, r6, r7, lr}
    751a:	4657      	mov	r7, sl
    751c:	4645      	mov	r5, r8
    751e:	46de      	mov	lr, fp
    7520:	464e      	mov	r6, r9
    7522:	b5e0      	push	{r5, r6, r7, lr}
    7524:	0005      	movs	r5, r0
    7526:	b0af      	sub	sp, #188	; 0xbc
    7528:	ac06      	add	r4, sp, #24
    752a:	000e      	movs	r6, r1
    752c:	4690      	mov	r8, r2
    752e:	469a      	mov	sl, r3
    7530:	2210      	movs	r2, #16
    7532:	2100      	movs	r1, #0
    7534:	0020      	movs	r0, r4
    7536:	4b35      	ldr	r3, [pc, #212]	; (760c <secureFrame+0xf4>)
    7538:	4798      	blx	r3
    753a:	7c2f      	ldrb	r7, [r5, #16]
    753c:	2f07      	cmp	r7, #7
    753e:	d80e      	bhi.n	755e <secureFrame+0x46>
    7540:	2301      	movs	r3, #1
    7542:	2288      	movs	r2, #136	; 0x88
    7544:	40bb      	lsls	r3, r7
    7546:	421a      	tst	r2, r3
    7548:	d14e      	bne.n	75e8 <secureFrame+0xd0>
    754a:	3a44      	subs	r2, #68	; 0x44
    754c:	421a      	tst	r2, r3
    754e:	d14f      	bne.n	75f0 <secureFrame+0xd8>
    7550:	3a22      	subs	r2, #34	; 0x22
    7552:	421a      	tst	r2, r3
    7554:	d003      	beq.n	755e <secureFrame+0x46>
    7556:	2304      	movs	r3, #4
    7558:	9305      	str	r3, [sp, #20]
    755a:	469b      	mov	fp, r3
    755c:	e002      	b.n	7564 <secureFrame+0x4c>
    755e:	2300      	movs	r3, #0
    7560:	469b      	mov	fp, r3
    7562:	9305      	str	r3, [sp, #20]
    7564:	4b2a      	ldr	r3, [pc, #168]	; (7610 <secureFrame+0xf8>)
    7566:	4d2b      	ldr	r5, [pc, #172]	; (7614 <secureFrame+0xfc>)
    7568:	79da      	ldrb	r2, [r3, #7]
    756a:	4651      	mov	r1, sl
    756c:	7062      	strb	r2, [r4, #1]
    756e:	799a      	ldrb	r2, [r3, #6]
    7570:	7367      	strb	r7, [r4, #13]
    7572:	70a2      	strb	r2, [r4, #2]
    7574:	795a      	ldrb	r2, [r3, #5]
    7576:	a80a      	add	r0, sp, #40	; 0x28
    7578:	70e2      	strb	r2, [r4, #3]
    757a:	791a      	ldrb	r2, [r3, #4]
    757c:	44b2      	add	sl, r6
    757e:	7122      	strb	r2, [r4, #4]
    7580:	78da      	ldrb	r2, [r3, #3]
    7582:	7162      	strb	r2, [r4, #5]
    7584:	789a      	ldrb	r2, [r3, #2]
    7586:	71a2      	strb	r2, [r4, #6]
    7588:	785a      	ldrb	r2, [r3, #1]
    758a:	781b      	ldrb	r3, [r3, #0]
    758c:	71e2      	strb	r2, [r4, #7]
    758e:	7223      	strb	r3, [r4, #8]
    7590:	78eb      	ldrb	r3, [r5, #3]
    7592:	0032      	movs	r2, r6
    7594:	7263      	strb	r3, [r4, #9]
    7596:	78ab      	ldrb	r3, [r5, #2]
    7598:	72a3      	strb	r3, [r4, #10]
    759a:	786b      	ldrb	r3, [r5, #1]
    759c:	72e3      	strb	r3, [r4, #11]
    759e:	782b      	ldrb	r3, [r5, #0]
    75a0:	7323      	strb	r3, [r4, #12]
    75a2:	4b1d      	ldr	r3, [pc, #116]	; (7618 <secureFrame+0x100>)
    75a4:	4699      	mov	r9, r3
    75a6:	4798      	blx	r3
    75a8:	ab0a      	add	r3, sp, #40	; 0x28
    75aa:	469c      	mov	ip, r3
    75ac:	44b4      	add	ip, r6
    75ae:	4663      	mov	r3, ip
    75b0:	4642      	mov	r2, r8
    75b2:	4651      	mov	r1, sl
    75b4:	4660      	mov	r0, ip
    75b6:	9304      	str	r3, [sp, #16]
    75b8:	47c8      	blx	r9
    75ba:	2300      	movs	r3, #0
    75bc:	9302      	str	r3, [sp, #8]
    75be:	4643      	mov	r3, r8
    75c0:	0021      	movs	r1, r4
    75c2:	9300      	str	r3, [sp, #0]
    75c4:	9701      	str	r7, [sp, #4]
    75c6:	0033      	movs	r3, r6
    75c8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    75ca:	a80a      	add	r0, sp, #40	; 0x28
    75cc:	4c13      	ldr	r4, [pc, #76]	; (761c <secureFrame+0x104>)
    75ce:	47a0      	blx	r4
    75d0:	2800      	cmp	r0, #0
    75d2:	d011      	beq.n	75f8 <secureFrame+0xe0>
    75d4:	23ff      	movs	r3, #255	; 0xff
    75d6:	469b      	mov	fp, r3
    75d8:	4658      	mov	r0, fp
    75da:	b02f      	add	sp, #188	; 0xbc
    75dc:	bc3c      	pop	{r2, r3, r4, r5}
    75de:	4690      	mov	r8, r2
    75e0:	4699      	mov	r9, r3
    75e2:	46a2      	mov	sl, r4
    75e4:	46ab      	mov	fp, r5
    75e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75e8:	2310      	movs	r3, #16
    75ea:	9305      	str	r3, [sp, #20]
    75ec:	469b      	mov	fp, r3
    75ee:	e7b9      	b.n	7564 <secureFrame+0x4c>
    75f0:	2308      	movs	r3, #8
    75f2:	9305      	str	r3, [sp, #20]
    75f4:	469b      	mov	fp, r3
    75f6:	e7b5      	b.n	7564 <secureFrame+0x4c>
    75f8:	682b      	ldr	r3, [r5, #0]
    75fa:	9904      	ldr	r1, [sp, #16]
    75fc:	3301      	adds	r3, #1
    75fe:	602b      	str	r3, [r5, #0]
    7600:	9b05      	ldr	r3, [sp, #20]
    7602:	4650      	mov	r0, sl
    7604:	4443      	add	r3, r8
    7606:	001a      	movs	r2, r3
    7608:	47c8      	blx	r9
    760a:	e7e5      	b.n	75d8 <secureFrame+0xc0>
    760c:	00007a91 	.word	0x00007a91
    7610:	2000004c 	.word	0x2000004c
    7614:	20001414 	.word	0x20001414
    7618:	00007a7f 	.word	0x00007a7f
    761c:	0000304d 	.word	0x0000304d

00007620 <unsecureFrame>:
    7620:	b5f0      	push	{r4, r5, r6, r7, lr}
    7622:	46ce      	mov	lr, r9
    7624:	4647      	mov	r7, r8
    7626:	b580      	push	{r7, lr}
    7628:	b089      	sub	sp, #36	; 0x24
    762a:	0007      	movs	r7, r0
    762c:	ac04      	add	r4, sp, #16
    762e:	000d      	movs	r5, r1
    7630:	4691      	mov	r9, r2
    7632:	001e      	movs	r6, r3
    7634:	2210      	movs	r2, #16
    7636:	4b26      	ldr	r3, [pc, #152]	; (76d0 <unsecureFrame+0xb0>)
    7638:	2100      	movs	r1, #0
    763a:	0020      	movs	r0, r4
    763c:	4798      	blx	r3
    763e:	2200      	movs	r2, #0
    7640:	7c3b      	ldrb	r3, [r7, #16]
    7642:	4690      	mov	r8, r2
    7644:	2b07      	cmp	r3, #7
    7646:	d806      	bhi.n	7656 <unsecureFrame+0x36>
    7648:	3201      	adds	r2, #1
    764a:	2010      	movs	r0, #16
    764c:	409a      	lsls	r2, r3
    764e:	2188      	movs	r1, #136	; 0x88
    7650:	4680      	mov	r8, r0
    7652:	4211      	tst	r1, r2
    7654:	d02f      	beq.n	76b6 <unsecureFrame+0x96>
    7656:	79ea      	ldrb	r2, [r5, #7]
    7658:	7363      	strb	r3, [r4, #13]
    765a:	7062      	strb	r2, [r4, #1]
    765c:	79aa      	ldrb	r2, [r5, #6]
    765e:	0021      	movs	r1, r4
    7660:	70a2      	strb	r2, [r4, #2]
    7662:	796a      	ldrb	r2, [r5, #5]
    7664:	9810      	ldr	r0, [sp, #64]	; 0x40
    7666:	70e2      	strb	r2, [r4, #3]
    7668:	792a      	ldrb	r2, [r5, #4]
    766a:	7122      	strb	r2, [r4, #4]
    766c:	78ea      	ldrb	r2, [r5, #3]
    766e:	7162      	strb	r2, [r4, #5]
    7670:	78aa      	ldrb	r2, [r5, #2]
    7672:	71a2      	strb	r2, [r4, #6]
    7674:	786a      	ldrb	r2, [r5, #1]
    7676:	71e2      	strb	r2, [r4, #7]
    7678:	782a      	ldrb	r2, [r5, #0]
    767a:	7222      	strb	r2, [r4, #8]
    767c:	7dfa      	ldrb	r2, [r7, #23]
    767e:	7262      	strb	r2, [r4, #9]
    7680:	7dba      	ldrb	r2, [r7, #22]
    7682:	72a2      	strb	r2, [r4, #10]
    7684:	7d7a      	ldrb	r2, [r7, #21]
    7686:	72e2      	strb	r2, [r4, #11]
    7688:	7d3a      	ldrb	r2, [r7, #20]
    768a:	7322      	strb	r2, [r4, #12]
    768c:	9301      	str	r3, [sp, #4]
    768e:	4643      	mov	r3, r8
    7690:	2201      	movs	r2, #1
    7692:	1af6      	subs	r6, r6, r3
    7694:	b2f6      	uxtb	r6, r6
    7696:	9202      	str	r2, [sp, #8]
    7698:	9600      	str	r6, [sp, #0]
    769a:	464b      	mov	r3, r9
    769c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    769e:	4c0d      	ldr	r4, [pc, #52]	; (76d4 <unsecureFrame+0xb4>)
    76a0:	47a0      	blx	r4
    76a2:	2800      	cmp	r0, #0
    76a4:	d001      	beq.n	76aa <unsecureFrame+0x8a>
    76a6:	23ff      	movs	r3, #255	; 0xff
    76a8:	4698      	mov	r8, r3
    76aa:	4640      	mov	r0, r8
    76ac:	b009      	add	sp, #36	; 0x24
    76ae:	bc0c      	pop	{r2, r3}
    76b0:	4690      	mov	r8, r2
    76b2:	4699      	mov	r9, r3
    76b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76b6:	3808      	subs	r0, #8
    76b8:	3944      	subs	r1, #68	; 0x44
    76ba:	4680      	mov	r8, r0
    76bc:	4211      	tst	r1, r2
    76be:	d1ca      	bne.n	7656 <unsecureFrame+0x36>
    76c0:	3922      	subs	r1, #34	; 0x22
    76c2:	400a      	ands	r2, r1
    76c4:	1e51      	subs	r1, r2, #1
    76c6:	418a      	sbcs	r2, r1
    76c8:	0092      	lsls	r2, r2, #2
    76ca:	4690      	mov	r8, r2
    76cc:	e7c3      	b.n	7656 <unsecureFrame+0x36>
    76ce:	46c0      	nop			; (mov r8, r8)
    76d0:	00007a91 	.word	0x00007a91
    76d4:	0000304d 	.word	0x0000304d

000076d8 <__udivsi3>:
    76d8:	2200      	movs	r2, #0
    76da:	0843      	lsrs	r3, r0, #1
    76dc:	428b      	cmp	r3, r1
    76de:	d374      	bcc.n	77ca <__udivsi3+0xf2>
    76e0:	0903      	lsrs	r3, r0, #4
    76e2:	428b      	cmp	r3, r1
    76e4:	d35f      	bcc.n	77a6 <__udivsi3+0xce>
    76e6:	0a03      	lsrs	r3, r0, #8
    76e8:	428b      	cmp	r3, r1
    76ea:	d344      	bcc.n	7776 <__udivsi3+0x9e>
    76ec:	0b03      	lsrs	r3, r0, #12
    76ee:	428b      	cmp	r3, r1
    76f0:	d328      	bcc.n	7744 <__udivsi3+0x6c>
    76f2:	0c03      	lsrs	r3, r0, #16
    76f4:	428b      	cmp	r3, r1
    76f6:	d30d      	bcc.n	7714 <__udivsi3+0x3c>
    76f8:	22ff      	movs	r2, #255	; 0xff
    76fa:	0209      	lsls	r1, r1, #8
    76fc:	ba12      	rev	r2, r2
    76fe:	0c03      	lsrs	r3, r0, #16
    7700:	428b      	cmp	r3, r1
    7702:	d302      	bcc.n	770a <__udivsi3+0x32>
    7704:	1212      	asrs	r2, r2, #8
    7706:	0209      	lsls	r1, r1, #8
    7708:	d065      	beq.n	77d6 <__udivsi3+0xfe>
    770a:	0b03      	lsrs	r3, r0, #12
    770c:	428b      	cmp	r3, r1
    770e:	d319      	bcc.n	7744 <__udivsi3+0x6c>
    7710:	e000      	b.n	7714 <__udivsi3+0x3c>
    7712:	0a09      	lsrs	r1, r1, #8
    7714:	0bc3      	lsrs	r3, r0, #15
    7716:	428b      	cmp	r3, r1
    7718:	d301      	bcc.n	771e <__udivsi3+0x46>
    771a:	03cb      	lsls	r3, r1, #15
    771c:	1ac0      	subs	r0, r0, r3
    771e:	4152      	adcs	r2, r2
    7720:	0b83      	lsrs	r3, r0, #14
    7722:	428b      	cmp	r3, r1
    7724:	d301      	bcc.n	772a <__udivsi3+0x52>
    7726:	038b      	lsls	r3, r1, #14
    7728:	1ac0      	subs	r0, r0, r3
    772a:	4152      	adcs	r2, r2
    772c:	0b43      	lsrs	r3, r0, #13
    772e:	428b      	cmp	r3, r1
    7730:	d301      	bcc.n	7736 <__udivsi3+0x5e>
    7732:	034b      	lsls	r3, r1, #13
    7734:	1ac0      	subs	r0, r0, r3
    7736:	4152      	adcs	r2, r2
    7738:	0b03      	lsrs	r3, r0, #12
    773a:	428b      	cmp	r3, r1
    773c:	d301      	bcc.n	7742 <__udivsi3+0x6a>
    773e:	030b      	lsls	r3, r1, #12
    7740:	1ac0      	subs	r0, r0, r3
    7742:	4152      	adcs	r2, r2
    7744:	0ac3      	lsrs	r3, r0, #11
    7746:	428b      	cmp	r3, r1
    7748:	d301      	bcc.n	774e <__udivsi3+0x76>
    774a:	02cb      	lsls	r3, r1, #11
    774c:	1ac0      	subs	r0, r0, r3
    774e:	4152      	adcs	r2, r2
    7750:	0a83      	lsrs	r3, r0, #10
    7752:	428b      	cmp	r3, r1
    7754:	d301      	bcc.n	775a <__udivsi3+0x82>
    7756:	028b      	lsls	r3, r1, #10
    7758:	1ac0      	subs	r0, r0, r3
    775a:	4152      	adcs	r2, r2
    775c:	0a43      	lsrs	r3, r0, #9
    775e:	428b      	cmp	r3, r1
    7760:	d301      	bcc.n	7766 <__udivsi3+0x8e>
    7762:	024b      	lsls	r3, r1, #9
    7764:	1ac0      	subs	r0, r0, r3
    7766:	4152      	adcs	r2, r2
    7768:	0a03      	lsrs	r3, r0, #8
    776a:	428b      	cmp	r3, r1
    776c:	d301      	bcc.n	7772 <__udivsi3+0x9a>
    776e:	020b      	lsls	r3, r1, #8
    7770:	1ac0      	subs	r0, r0, r3
    7772:	4152      	adcs	r2, r2
    7774:	d2cd      	bcs.n	7712 <__udivsi3+0x3a>
    7776:	09c3      	lsrs	r3, r0, #7
    7778:	428b      	cmp	r3, r1
    777a:	d301      	bcc.n	7780 <__udivsi3+0xa8>
    777c:	01cb      	lsls	r3, r1, #7
    777e:	1ac0      	subs	r0, r0, r3
    7780:	4152      	adcs	r2, r2
    7782:	0983      	lsrs	r3, r0, #6
    7784:	428b      	cmp	r3, r1
    7786:	d301      	bcc.n	778c <__udivsi3+0xb4>
    7788:	018b      	lsls	r3, r1, #6
    778a:	1ac0      	subs	r0, r0, r3
    778c:	4152      	adcs	r2, r2
    778e:	0943      	lsrs	r3, r0, #5
    7790:	428b      	cmp	r3, r1
    7792:	d301      	bcc.n	7798 <__udivsi3+0xc0>
    7794:	014b      	lsls	r3, r1, #5
    7796:	1ac0      	subs	r0, r0, r3
    7798:	4152      	adcs	r2, r2
    779a:	0903      	lsrs	r3, r0, #4
    779c:	428b      	cmp	r3, r1
    779e:	d301      	bcc.n	77a4 <__udivsi3+0xcc>
    77a0:	010b      	lsls	r3, r1, #4
    77a2:	1ac0      	subs	r0, r0, r3
    77a4:	4152      	adcs	r2, r2
    77a6:	08c3      	lsrs	r3, r0, #3
    77a8:	428b      	cmp	r3, r1
    77aa:	d301      	bcc.n	77b0 <__udivsi3+0xd8>
    77ac:	00cb      	lsls	r3, r1, #3
    77ae:	1ac0      	subs	r0, r0, r3
    77b0:	4152      	adcs	r2, r2
    77b2:	0883      	lsrs	r3, r0, #2
    77b4:	428b      	cmp	r3, r1
    77b6:	d301      	bcc.n	77bc <__udivsi3+0xe4>
    77b8:	008b      	lsls	r3, r1, #2
    77ba:	1ac0      	subs	r0, r0, r3
    77bc:	4152      	adcs	r2, r2
    77be:	0843      	lsrs	r3, r0, #1
    77c0:	428b      	cmp	r3, r1
    77c2:	d301      	bcc.n	77c8 <__udivsi3+0xf0>
    77c4:	004b      	lsls	r3, r1, #1
    77c6:	1ac0      	subs	r0, r0, r3
    77c8:	4152      	adcs	r2, r2
    77ca:	1a41      	subs	r1, r0, r1
    77cc:	d200      	bcs.n	77d0 <__udivsi3+0xf8>
    77ce:	4601      	mov	r1, r0
    77d0:	4152      	adcs	r2, r2
    77d2:	4610      	mov	r0, r2
    77d4:	4770      	bx	lr
    77d6:	e7ff      	b.n	77d8 <__udivsi3+0x100>
    77d8:	b501      	push	{r0, lr}
    77da:	2000      	movs	r0, #0
    77dc:	f000 f8f0 	bl	79c0 <__aeabi_idiv0>
    77e0:	bd02      	pop	{r1, pc}
    77e2:	46c0      	nop			; (mov r8, r8)

000077e4 <__aeabi_uidivmod>:
    77e4:	2900      	cmp	r1, #0
    77e6:	d0f7      	beq.n	77d8 <__udivsi3+0x100>
    77e8:	e776      	b.n	76d8 <__udivsi3>
    77ea:	4770      	bx	lr

000077ec <__divsi3>:
    77ec:	4603      	mov	r3, r0
    77ee:	430b      	orrs	r3, r1
    77f0:	d47f      	bmi.n	78f2 <__divsi3+0x106>
    77f2:	2200      	movs	r2, #0
    77f4:	0843      	lsrs	r3, r0, #1
    77f6:	428b      	cmp	r3, r1
    77f8:	d374      	bcc.n	78e4 <__divsi3+0xf8>
    77fa:	0903      	lsrs	r3, r0, #4
    77fc:	428b      	cmp	r3, r1
    77fe:	d35f      	bcc.n	78c0 <__divsi3+0xd4>
    7800:	0a03      	lsrs	r3, r0, #8
    7802:	428b      	cmp	r3, r1
    7804:	d344      	bcc.n	7890 <__divsi3+0xa4>
    7806:	0b03      	lsrs	r3, r0, #12
    7808:	428b      	cmp	r3, r1
    780a:	d328      	bcc.n	785e <__divsi3+0x72>
    780c:	0c03      	lsrs	r3, r0, #16
    780e:	428b      	cmp	r3, r1
    7810:	d30d      	bcc.n	782e <__divsi3+0x42>
    7812:	22ff      	movs	r2, #255	; 0xff
    7814:	0209      	lsls	r1, r1, #8
    7816:	ba12      	rev	r2, r2
    7818:	0c03      	lsrs	r3, r0, #16
    781a:	428b      	cmp	r3, r1
    781c:	d302      	bcc.n	7824 <__divsi3+0x38>
    781e:	1212      	asrs	r2, r2, #8
    7820:	0209      	lsls	r1, r1, #8
    7822:	d065      	beq.n	78f0 <__divsi3+0x104>
    7824:	0b03      	lsrs	r3, r0, #12
    7826:	428b      	cmp	r3, r1
    7828:	d319      	bcc.n	785e <__divsi3+0x72>
    782a:	e000      	b.n	782e <__divsi3+0x42>
    782c:	0a09      	lsrs	r1, r1, #8
    782e:	0bc3      	lsrs	r3, r0, #15
    7830:	428b      	cmp	r3, r1
    7832:	d301      	bcc.n	7838 <__divsi3+0x4c>
    7834:	03cb      	lsls	r3, r1, #15
    7836:	1ac0      	subs	r0, r0, r3
    7838:	4152      	adcs	r2, r2
    783a:	0b83      	lsrs	r3, r0, #14
    783c:	428b      	cmp	r3, r1
    783e:	d301      	bcc.n	7844 <__divsi3+0x58>
    7840:	038b      	lsls	r3, r1, #14
    7842:	1ac0      	subs	r0, r0, r3
    7844:	4152      	adcs	r2, r2
    7846:	0b43      	lsrs	r3, r0, #13
    7848:	428b      	cmp	r3, r1
    784a:	d301      	bcc.n	7850 <__divsi3+0x64>
    784c:	034b      	lsls	r3, r1, #13
    784e:	1ac0      	subs	r0, r0, r3
    7850:	4152      	adcs	r2, r2
    7852:	0b03      	lsrs	r3, r0, #12
    7854:	428b      	cmp	r3, r1
    7856:	d301      	bcc.n	785c <__divsi3+0x70>
    7858:	030b      	lsls	r3, r1, #12
    785a:	1ac0      	subs	r0, r0, r3
    785c:	4152      	adcs	r2, r2
    785e:	0ac3      	lsrs	r3, r0, #11
    7860:	428b      	cmp	r3, r1
    7862:	d301      	bcc.n	7868 <__divsi3+0x7c>
    7864:	02cb      	lsls	r3, r1, #11
    7866:	1ac0      	subs	r0, r0, r3
    7868:	4152      	adcs	r2, r2
    786a:	0a83      	lsrs	r3, r0, #10
    786c:	428b      	cmp	r3, r1
    786e:	d301      	bcc.n	7874 <__divsi3+0x88>
    7870:	028b      	lsls	r3, r1, #10
    7872:	1ac0      	subs	r0, r0, r3
    7874:	4152      	adcs	r2, r2
    7876:	0a43      	lsrs	r3, r0, #9
    7878:	428b      	cmp	r3, r1
    787a:	d301      	bcc.n	7880 <__divsi3+0x94>
    787c:	024b      	lsls	r3, r1, #9
    787e:	1ac0      	subs	r0, r0, r3
    7880:	4152      	adcs	r2, r2
    7882:	0a03      	lsrs	r3, r0, #8
    7884:	428b      	cmp	r3, r1
    7886:	d301      	bcc.n	788c <__divsi3+0xa0>
    7888:	020b      	lsls	r3, r1, #8
    788a:	1ac0      	subs	r0, r0, r3
    788c:	4152      	adcs	r2, r2
    788e:	d2cd      	bcs.n	782c <__divsi3+0x40>
    7890:	09c3      	lsrs	r3, r0, #7
    7892:	428b      	cmp	r3, r1
    7894:	d301      	bcc.n	789a <__divsi3+0xae>
    7896:	01cb      	lsls	r3, r1, #7
    7898:	1ac0      	subs	r0, r0, r3
    789a:	4152      	adcs	r2, r2
    789c:	0983      	lsrs	r3, r0, #6
    789e:	428b      	cmp	r3, r1
    78a0:	d301      	bcc.n	78a6 <__divsi3+0xba>
    78a2:	018b      	lsls	r3, r1, #6
    78a4:	1ac0      	subs	r0, r0, r3
    78a6:	4152      	adcs	r2, r2
    78a8:	0943      	lsrs	r3, r0, #5
    78aa:	428b      	cmp	r3, r1
    78ac:	d301      	bcc.n	78b2 <__divsi3+0xc6>
    78ae:	014b      	lsls	r3, r1, #5
    78b0:	1ac0      	subs	r0, r0, r3
    78b2:	4152      	adcs	r2, r2
    78b4:	0903      	lsrs	r3, r0, #4
    78b6:	428b      	cmp	r3, r1
    78b8:	d301      	bcc.n	78be <__divsi3+0xd2>
    78ba:	010b      	lsls	r3, r1, #4
    78bc:	1ac0      	subs	r0, r0, r3
    78be:	4152      	adcs	r2, r2
    78c0:	08c3      	lsrs	r3, r0, #3
    78c2:	428b      	cmp	r3, r1
    78c4:	d301      	bcc.n	78ca <__divsi3+0xde>
    78c6:	00cb      	lsls	r3, r1, #3
    78c8:	1ac0      	subs	r0, r0, r3
    78ca:	4152      	adcs	r2, r2
    78cc:	0883      	lsrs	r3, r0, #2
    78ce:	428b      	cmp	r3, r1
    78d0:	d301      	bcc.n	78d6 <__divsi3+0xea>
    78d2:	008b      	lsls	r3, r1, #2
    78d4:	1ac0      	subs	r0, r0, r3
    78d6:	4152      	adcs	r2, r2
    78d8:	0843      	lsrs	r3, r0, #1
    78da:	428b      	cmp	r3, r1
    78dc:	d301      	bcc.n	78e2 <__divsi3+0xf6>
    78de:	004b      	lsls	r3, r1, #1
    78e0:	1ac0      	subs	r0, r0, r3
    78e2:	4152      	adcs	r2, r2
    78e4:	1a41      	subs	r1, r0, r1
    78e6:	d200      	bcs.n	78ea <__divsi3+0xfe>
    78e8:	4601      	mov	r1, r0
    78ea:	4152      	adcs	r2, r2
    78ec:	4610      	mov	r0, r2
    78ee:	4770      	bx	lr
    78f0:	e05d      	b.n	79ae <__divsi3+0x1c2>
    78f2:	0fca      	lsrs	r2, r1, #31
    78f4:	d000      	beq.n	78f8 <__divsi3+0x10c>
    78f6:	4249      	negs	r1, r1
    78f8:	1003      	asrs	r3, r0, #32
    78fa:	d300      	bcc.n	78fe <__divsi3+0x112>
    78fc:	4240      	negs	r0, r0
    78fe:	4053      	eors	r3, r2
    7900:	2200      	movs	r2, #0
    7902:	469c      	mov	ip, r3
    7904:	0903      	lsrs	r3, r0, #4
    7906:	428b      	cmp	r3, r1
    7908:	d32d      	bcc.n	7966 <__divsi3+0x17a>
    790a:	0a03      	lsrs	r3, r0, #8
    790c:	428b      	cmp	r3, r1
    790e:	d312      	bcc.n	7936 <__divsi3+0x14a>
    7910:	22fc      	movs	r2, #252	; 0xfc
    7912:	0189      	lsls	r1, r1, #6
    7914:	ba12      	rev	r2, r2
    7916:	0a03      	lsrs	r3, r0, #8
    7918:	428b      	cmp	r3, r1
    791a:	d30c      	bcc.n	7936 <__divsi3+0x14a>
    791c:	0189      	lsls	r1, r1, #6
    791e:	1192      	asrs	r2, r2, #6
    7920:	428b      	cmp	r3, r1
    7922:	d308      	bcc.n	7936 <__divsi3+0x14a>
    7924:	0189      	lsls	r1, r1, #6
    7926:	1192      	asrs	r2, r2, #6
    7928:	428b      	cmp	r3, r1
    792a:	d304      	bcc.n	7936 <__divsi3+0x14a>
    792c:	0189      	lsls	r1, r1, #6
    792e:	d03a      	beq.n	79a6 <__divsi3+0x1ba>
    7930:	1192      	asrs	r2, r2, #6
    7932:	e000      	b.n	7936 <__divsi3+0x14a>
    7934:	0989      	lsrs	r1, r1, #6
    7936:	09c3      	lsrs	r3, r0, #7
    7938:	428b      	cmp	r3, r1
    793a:	d301      	bcc.n	7940 <__divsi3+0x154>
    793c:	01cb      	lsls	r3, r1, #7
    793e:	1ac0      	subs	r0, r0, r3
    7940:	4152      	adcs	r2, r2
    7942:	0983      	lsrs	r3, r0, #6
    7944:	428b      	cmp	r3, r1
    7946:	d301      	bcc.n	794c <__divsi3+0x160>
    7948:	018b      	lsls	r3, r1, #6
    794a:	1ac0      	subs	r0, r0, r3
    794c:	4152      	adcs	r2, r2
    794e:	0943      	lsrs	r3, r0, #5
    7950:	428b      	cmp	r3, r1
    7952:	d301      	bcc.n	7958 <__divsi3+0x16c>
    7954:	014b      	lsls	r3, r1, #5
    7956:	1ac0      	subs	r0, r0, r3
    7958:	4152      	adcs	r2, r2
    795a:	0903      	lsrs	r3, r0, #4
    795c:	428b      	cmp	r3, r1
    795e:	d301      	bcc.n	7964 <__divsi3+0x178>
    7960:	010b      	lsls	r3, r1, #4
    7962:	1ac0      	subs	r0, r0, r3
    7964:	4152      	adcs	r2, r2
    7966:	08c3      	lsrs	r3, r0, #3
    7968:	428b      	cmp	r3, r1
    796a:	d301      	bcc.n	7970 <__divsi3+0x184>
    796c:	00cb      	lsls	r3, r1, #3
    796e:	1ac0      	subs	r0, r0, r3
    7970:	4152      	adcs	r2, r2
    7972:	0883      	lsrs	r3, r0, #2
    7974:	428b      	cmp	r3, r1
    7976:	d301      	bcc.n	797c <__divsi3+0x190>
    7978:	008b      	lsls	r3, r1, #2
    797a:	1ac0      	subs	r0, r0, r3
    797c:	4152      	adcs	r2, r2
    797e:	d2d9      	bcs.n	7934 <__divsi3+0x148>
    7980:	0843      	lsrs	r3, r0, #1
    7982:	428b      	cmp	r3, r1
    7984:	d301      	bcc.n	798a <__divsi3+0x19e>
    7986:	004b      	lsls	r3, r1, #1
    7988:	1ac0      	subs	r0, r0, r3
    798a:	4152      	adcs	r2, r2
    798c:	1a41      	subs	r1, r0, r1
    798e:	d200      	bcs.n	7992 <__divsi3+0x1a6>
    7990:	4601      	mov	r1, r0
    7992:	4663      	mov	r3, ip
    7994:	4152      	adcs	r2, r2
    7996:	105b      	asrs	r3, r3, #1
    7998:	4610      	mov	r0, r2
    799a:	d301      	bcc.n	79a0 <__divsi3+0x1b4>
    799c:	4240      	negs	r0, r0
    799e:	2b00      	cmp	r3, #0
    79a0:	d500      	bpl.n	79a4 <__divsi3+0x1b8>
    79a2:	4249      	negs	r1, r1
    79a4:	4770      	bx	lr
    79a6:	4663      	mov	r3, ip
    79a8:	105b      	asrs	r3, r3, #1
    79aa:	d300      	bcc.n	79ae <__divsi3+0x1c2>
    79ac:	4240      	negs	r0, r0
    79ae:	b501      	push	{r0, lr}
    79b0:	2000      	movs	r0, #0
    79b2:	f000 f805 	bl	79c0 <__aeabi_idiv0>
    79b6:	bd02      	pop	{r1, pc}

000079b8 <__aeabi_idivmod>:
    79b8:	2900      	cmp	r1, #0
    79ba:	d0f8      	beq.n	79ae <__divsi3+0x1c2>
    79bc:	e716      	b.n	77ec <__divsi3>
    79be:	4770      	bx	lr

000079c0 <__aeabi_idiv0>:
    79c0:	4770      	bx	lr
    79c2:	46c0      	nop			; (mov r8, r8)

000079c4 <__aeabi_lmul>:
    79c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    79c6:	46ce      	mov	lr, r9
    79c8:	4647      	mov	r7, r8
    79ca:	0415      	lsls	r5, r2, #16
    79cc:	0c2d      	lsrs	r5, r5, #16
    79ce:	002e      	movs	r6, r5
    79d0:	b580      	push	{r7, lr}
    79d2:	0407      	lsls	r7, r0, #16
    79d4:	0c14      	lsrs	r4, r2, #16
    79d6:	0c3f      	lsrs	r7, r7, #16
    79d8:	4699      	mov	r9, r3
    79da:	0c03      	lsrs	r3, r0, #16
    79dc:	437e      	muls	r6, r7
    79de:	435d      	muls	r5, r3
    79e0:	4367      	muls	r7, r4
    79e2:	4363      	muls	r3, r4
    79e4:	197f      	adds	r7, r7, r5
    79e6:	0c34      	lsrs	r4, r6, #16
    79e8:	19e4      	adds	r4, r4, r7
    79ea:	469c      	mov	ip, r3
    79ec:	42a5      	cmp	r5, r4
    79ee:	d903      	bls.n	79f8 <__aeabi_lmul+0x34>
    79f0:	2380      	movs	r3, #128	; 0x80
    79f2:	025b      	lsls	r3, r3, #9
    79f4:	4698      	mov	r8, r3
    79f6:	44c4      	add	ip, r8
    79f8:	464b      	mov	r3, r9
    79fa:	4351      	muls	r1, r2
    79fc:	4343      	muls	r3, r0
    79fe:	0436      	lsls	r6, r6, #16
    7a00:	0c36      	lsrs	r6, r6, #16
    7a02:	0c25      	lsrs	r5, r4, #16
    7a04:	0424      	lsls	r4, r4, #16
    7a06:	4465      	add	r5, ip
    7a08:	19a4      	adds	r4, r4, r6
    7a0a:	1859      	adds	r1, r3, r1
    7a0c:	1949      	adds	r1, r1, r5
    7a0e:	0020      	movs	r0, r4
    7a10:	bc0c      	pop	{r2, r3}
    7a12:	4690      	mov	r8, r2
    7a14:	4699      	mov	r9, r3
    7a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007a18 <__libc_init_array>:
    7a18:	b570      	push	{r4, r5, r6, lr}
    7a1a:	2600      	movs	r6, #0
    7a1c:	4d0c      	ldr	r5, [pc, #48]	; (7a50 <__libc_init_array+0x38>)
    7a1e:	4c0d      	ldr	r4, [pc, #52]	; (7a54 <__libc_init_array+0x3c>)
    7a20:	1b64      	subs	r4, r4, r5
    7a22:	10a4      	asrs	r4, r4, #2
    7a24:	42a6      	cmp	r6, r4
    7a26:	d109      	bne.n	7a3c <__libc_init_array+0x24>
    7a28:	2600      	movs	r6, #0
    7a2a:	f001 f8a1 	bl	8b70 <_init>
    7a2e:	4d0a      	ldr	r5, [pc, #40]	; (7a58 <__libc_init_array+0x40>)
    7a30:	4c0a      	ldr	r4, [pc, #40]	; (7a5c <__libc_init_array+0x44>)
    7a32:	1b64      	subs	r4, r4, r5
    7a34:	10a4      	asrs	r4, r4, #2
    7a36:	42a6      	cmp	r6, r4
    7a38:	d105      	bne.n	7a46 <__libc_init_array+0x2e>
    7a3a:	bd70      	pop	{r4, r5, r6, pc}
    7a3c:	00b3      	lsls	r3, r6, #2
    7a3e:	58eb      	ldr	r3, [r5, r3]
    7a40:	4798      	blx	r3
    7a42:	3601      	adds	r6, #1
    7a44:	e7ee      	b.n	7a24 <__libc_init_array+0xc>
    7a46:	00b3      	lsls	r3, r6, #2
    7a48:	58eb      	ldr	r3, [r5, r3]
    7a4a:	4798      	blx	r3
    7a4c:	3601      	adds	r6, #1
    7a4e:	e7f2      	b.n	7a36 <__libc_init_array+0x1e>
    7a50:	00008b7c 	.word	0x00008b7c
    7a54:	00008b7c 	.word	0x00008b7c
    7a58:	00008b7c 	.word	0x00008b7c
    7a5c:	00008b80 	.word	0x00008b80

00007a60 <memcmp>:
    7a60:	b530      	push	{r4, r5, lr}
    7a62:	2400      	movs	r4, #0
    7a64:	42a2      	cmp	r2, r4
    7a66:	d101      	bne.n	7a6c <memcmp+0xc>
    7a68:	2000      	movs	r0, #0
    7a6a:	e005      	b.n	7a78 <memcmp+0x18>
    7a6c:	5d03      	ldrb	r3, [r0, r4]
    7a6e:	1c65      	adds	r5, r4, #1
    7a70:	5d0c      	ldrb	r4, [r1, r4]
    7a72:	42a3      	cmp	r3, r4
    7a74:	d001      	beq.n	7a7a <memcmp+0x1a>
    7a76:	1b18      	subs	r0, r3, r4
    7a78:	bd30      	pop	{r4, r5, pc}
    7a7a:	002c      	movs	r4, r5
    7a7c:	e7f2      	b.n	7a64 <memcmp+0x4>

00007a7e <memcpy>:
    7a7e:	2300      	movs	r3, #0
    7a80:	b510      	push	{r4, lr}
    7a82:	429a      	cmp	r2, r3
    7a84:	d100      	bne.n	7a88 <memcpy+0xa>
    7a86:	bd10      	pop	{r4, pc}
    7a88:	5ccc      	ldrb	r4, [r1, r3]
    7a8a:	54c4      	strb	r4, [r0, r3]
    7a8c:	3301      	adds	r3, #1
    7a8e:	e7f8      	b.n	7a82 <memcpy+0x4>

00007a90 <memset>:
    7a90:	0003      	movs	r3, r0
    7a92:	1882      	adds	r2, r0, r2
    7a94:	4293      	cmp	r3, r2
    7a96:	d100      	bne.n	7a9a <memset+0xa>
    7a98:	4770      	bx	lr
    7a9a:	7019      	strb	r1, [r3, #0]
    7a9c:	3301      	adds	r3, #1
    7a9e:	e7f9      	b.n	7a94 <memset+0x4>

00007aa0 <setbuf>:
    7aa0:	424a      	negs	r2, r1
    7aa2:	414a      	adcs	r2, r1
    7aa4:	2380      	movs	r3, #128	; 0x80
    7aa6:	b510      	push	{r4, lr}
    7aa8:	0052      	lsls	r2, r2, #1
    7aaa:	00db      	lsls	r3, r3, #3
    7aac:	f000 f802 	bl	7ab4 <setvbuf>
    7ab0:	bd10      	pop	{r4, pc}
	...

00007ab4 <setvbuf>:
    7ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ab6:	001d      	movs	r5, r3
    7ab8:	4b4f      	ldr	r3, [pc, #316]	; (7bf8 <setvbuf+0x144>)
    7aba:	b085      	sub	sp, #20
    7abc:	681e      	ldr	r6, [r3, #0]
    7abe:	0004      	movs	r4, r0
    7ac0:	000f      	movs	r7, r1
    7ac2:	9200      	str	r2, [sp, #0]
    7ac4:	2e00      	cmp	r6, #0
    7ac6:	d005      	beq.n	7ad4 <setvbuf+0x20>
    7ac8:	69b3      	ldr	r3, [r6, #24]
    7aca:	2b00      	cmp	r3, #0
    7acc:	d102      	bne.n	7ad4 <setvbuf+0x20>
    7ace:	0030      	movs	r0, r6
    7ad0:	f000 f9b6 	bl	7e40 <__sinit>
    7ad4:	4b49      	ldr	r3, [pc, #292]	; (7bfc <setvbuf+0x148>)
    7ad6:	429c      	cmp	r4, r3
    7ad8:	d150      	bne.n	7b7c <setvbuf+0xc8>
    7ada:	6874      	ldr	r4, [r6, #4]
    7adc:	9b00      	ldr	r3, [sp, #0]
    7ade:	2b02      	cmp	r3, #2
    7ae0:	d005      	beq.n	7aee <setvbuf+0x3a>
    7ae2:	2b01      	cmp	r3, #1
    7ae4:	d900      	bls.n	7ae8 <setvbuf+0x34>
    7ae6:	e084      	b.n	7bf2 <setvbuf+0x13e>
    7ae8:	2d00      	cmp	r5, #0
    7aea:	da00      	bge.n	7aee <setvbuf+0x3a>
    7aec:	e081      	b.n	7bf2 <setvbuf+0x13e>
    7aee:	0021      	movs	r1, r4
    7af0:	0030      	movs	r0, r6
    7af2:	f000 f937 	bl	7d64 <_fflush_r>
    7af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7af8:	2900      	cmp	r1, #0
    7afa:	d008      	beq.n	7b0e <setvbuf+0x5a>
    7afc:	0023      	movs	r3, r4
    7afe:	3344      	adds	r3, #68	; 0x44
    7b00:	4299      	cmp	r1, r3
    7b02:	d002      	beq.n	7b0a <setvbuf+0x56>
    7b04:	0030      	movs	r0, r6
    7b06:	f000 fa63 	bl	7fd0 <_free_r>
    7b0a:	2300      	movs	r3, #0
    7b0c:	6363      	str	r3, [r4, #52]	; 0x34
    7b0e:	2300      	movs	r3, #0
    7b10:	61a3      	str	r3, [r4, #24]
    7b12:	6063      	str	r3, [r4, #4]
    7b14:	89a3      	ldrh	r3, [r4, #12]
    7b16:	061b      	lsls	r3, r3, #24
    7b18:	d503      	bpl.n	7b22 <setvbuf+0x6e>
    7b1a:	6921      	ldr	r1, [r4, #16]
    7b1c:	0030      	movs	r0, r6
    7b1e:	f000 fa57 	bl	7fd0 <_free_r>
    7b22:	89a3      	ldrh	r3, [r4, #12]
    7b24:	4a36      	ldr	r2, [pc, #216]	; (7c00 <setvbuf+0x14c>)
    7b26:	4013      	ands	r3, r2
    7b28:	81a3      	strh	r3, [r4, #12]
    7b2a:	9b00      	ldr	r3, [sp, #0]
    7b2c:	2b02      	cmp	r3, #2
    7b2e:	d05a      	beq.n	7be6 <setvbuf+0x132>
    7b30:	ab03      	add	r3, sp, #12
    7b32:	aa02      	add	r2, sp, #8
    7b34:	0021      	movs	r1, r4
    7b36:	0030      	movs	r0, r6
    7b38:	f000 fa18 	bl	7f6c <__swhatbuf_r>
    7b3c:	89a3      	ldrh	r3, [r4, #12]
    7b3e:	4318      	orrs	r0, r3
    7b40:	81a0      	strh	r0, [r4, #12]
    7b42:	2d00      	cmp	r5, #0
    7b44:	d124      	bne.n	7b90 <setvbuf+0xdc>
    7b46:	9d02      	ldr	r5, [sp, #8]
    7b48:	0028      	movs	r0, r5
    7b4a:	f000 fa37 	bl	7fbc <malloc>
    7b4e:	9501      	str	r5, [sp, #4]
    7b50:	1e07      	subs	r7, r0, #0
    7b52:	d142      	bne.n	7bda <setvbuf+0x126>
    7b54:	9b02      	ldr	r3, [sp, #8]
    7b56:	9301      	str	r3, [sp, #4]
    7b58:	42ab      	cmp	r3, r5
    7b5a:	d139      	bne.n	7bd0 <setvbuf+0x11c>
    7b5c:	2001      	movs	r0, #1
    7b5e:	4240      	negs	r0, r0
    7b60:	2302      	movs	r3, #2
    7b62:	89a2      	ldrh	r2, [r4, #12]
    7b64:	4313      	orrs	r3, r2
    7b66:	81a3      	strh	r3, [r4, #12]
    7b68:	2300      	movs	r3, #0
    7b6a:	60a3      	str	r3, [r4, #8]
    7b6c:	0023      	movs	r3, r4
    7b6e:	3347      	adds	r3, #71	; 0x47
    7b70:	6023      	str	r3, [r4, #0]
    7b72:	6123      	str	r3, [r4, #16]
    7b74:	2301      	movs	r3, #1
    7b76:	6163      	str	r3, [r4, #20]
    7b78:	b005      	add	sp, #20
    7b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b7c:	4b21      	ldr	r3, [pc, #132]	; (7c04 <setvbuf+0x150>)
    7b7e:	429c      	cmp	r4, r3
    7b80:	d101      	bne.n	7b86 <setvbuf+0xd2>
    7b82:	68b4      	ldr	r4, [r6, #8]
    7b84:	e7aa      	b.n	7adc <setvbuf+0x28>
    7b86:	4b20      	ldr	r3, [pc, #128]	; (7c08 <setvbuf+0x154>)
    7b88:	429c      	cmp	r4, r3
    7b8a:	d1a7      	bne.n	7adc <setvbuf+0x28>
    7b8c:	68f4      	ldr	r4, [r6, #12]
    7b8e:	e7a5      	b.n	7adc <setvbuf+0x28>
    7b90:	2f00      	cmp	r7, #0
    7b92:	d0d9      	beq.n	7b48 <setvbuf+0x94>
    7b94:	69b3      	ldr	r3, [r6, #24]
    7b96:	2b00      	cmp	r3, #0
    7b98:	d102      	bne.n	7ba0 <setvbuf+0xec>
    7b9a:	0030      	movs	r0, r6
    7b9c:	f000 f950 	bl	7e40 <__sinit>
    7ba0:	9b00      	ldr	r3, [sp, #0]
    7ba2:	2b01      	cmp	r3, #1
    7ba4:	d103      	bne.n	7bae <setvbuf+0xfa>
    7ba6:	89a3      	ldrh	r3, [r4, #12]
    7ba8:	9a00      	ldr	r2, [sp, #0]
    7baa:	431a      	orrs	r2, r3
    7bac:	81a2      	strh	r2, [r4, #12]
    7bae:	2008      	movs	r0, #8
    7bb0:	89a3      	ldrh	r3, [r4, #12]
    7bb2:	6027      	str	r7, [r4, #0]
    7bb4:	6127      	str	r7, [r4, #16]
    7bb6:	6165      	str	r5, [r4, #20]
    7bb8:	4018      	ands	r0, r3
    7bba:	d018      	beq.n	7bee <setvbuf+0x13a>
    7bbc:	2001      	movs	r0, #1
    7bbe:	4018      	ands	r0, r3
    7bc0:	2300      	movs	r3, #0
    7bc2:	4298      	cmp	r0, r3
    7bc4:	d011      	beq.n	7bea <setvbuf+0x136>
    7bc6:	426d      	negs	r5, r5
    7bc8:	60a3      	str	r3, [r4, #8]
    7bca:	61a5      	str	r5, [r4, #24]
    7bcc:	0018      	movs	r0, r3
    7bce:	e7d3      	b.n	7b78 <setvbuf+0xc4>
    7bd0:	9801      	ldr	r0, [sp, #4]
    7bd2:	f000 f9f3 	bl	7fbc <malloc>
    7bd6:	1e07      	subs	r7, r0, #0
    7bd8:	d0c0      	beq.n	7b5c <setvbuf+0xa8>
    7bda:	2380      	movs	r3, #128	; 0x80
    7bdc:	89a2      	ldrh	r2, [r4, #12]
    7bde:	9d01      	ldr	r5, [sp, #4]
    7be0:	4313      	orrs	r3, r2
    7be2:	81a3      	strh	r3, [r4, #12]
    7be4:	e7d6      	b.n	7b94 <setvbuf+0xe0>
    7be6:	2000      	movs	r0, #0
    7be8:	e7ba      	b.n	7b60 <setvbuf+0xac>
    7bea:	60a5      	str	r5, [r4, #8]
    7bec:	e7c4      	b.n	7b78 <setvbuf+0xc4>
    7bee:	60a0      	str	r0, [r4, #8]
    7bf0:	e7c2      	b.n	7b78 <setvbuf+0xc4>
    7bf2:	2001      	movs	r0, #1
    7bf4:	4240      	negs	r0, r0
    7bf6:	e7bf      	b.n	7b78 <setvbuf+0xc4>
    7bf8:	20000058 	.word	0x20000058
    7bfc:	00008afc 	.word	0x00008afc
    7c00:	fffff35c 	.word	0xfffff35c
    7c04:	00008b1c 	.word	0x00008b1c
    7c08:	00008adc 	.word	0x00008adc

00007c0c <siprintf>:
    7c0c:	b40e      	push	{r1, r2, r3}
    7c0e:	b510      	push	{r4, lr}
    7c10:	b09d      	sub	sp, #116	; 0x74
    7c12:	a902      	add	r1, sp, #8
    7c14:	9002      	str	r0, [sp, #8]
    7c16:	6108      	str	r0, [r1, #16]
    7c18:	480b      	ldr	r0, [pc, #44]	; (7c48 <siprintf+0x3c>)
    7c1a:	2482      	movs	r4, #130	; 0x82
    7c1c:	6088      	str	r0, [r1, #8]
    7c1e:	6148      	str	r0, [r1, #20]
    7c20:	2001      	movs	r0, #1
    7c22:	4240      	negs	r0, r0
    7c24:	ab1f      	add	r3, sp, #124	; 0x7c
    7c26:	81c8      	strh	r0, [r1, #14]
    7c28:	4808      	ldr	r0, [pc, #32]	; (7c4c <siprintf+0x40>)
    7c2a:	cb04      	ldmia	r3!, {r2}
    7c2c:	00a4      	lsls	r4, r4, #2
    7c2e:	6800      	ldr	r0, [r0, #0]
    7c30:	9301      	str	r3, [sp, #4]
    7c32:	818c      	strh	r4, [r1, #12]
    7c34:	f000 fad6 	bl	81e4 <_svfiprintf_r>
    7c38:	2300      	movs	r3, #0
    7c3a:	9a02      	ldr	r2, [sp, #8]
    7c3c:	7013      	strb	r3, [r2, #0]
    7c3e:	b01d      	add	sp, #116	; 0x74
    7c40:	bc10      	pop	{r4}
    7c42:	bc08      	pop	{r3}
    7c44:	b003      	add	sp, #12
    7c46:	4718      	bx	r3
    7c48:	7fffffff 	.word	0x7fffffff
    7c4c:	20000058 	.word	0x20000058

00007c50 <__sflush_r>:
    7c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7c52:	898a      	ldrh	r2, [r1, #12]
    7c54:	0005      	movs	r5, r0
    7c56:	000c      	movs	r4, r1
    7c58:	0713      	lsls	r3, r2, #28
    7c5a:	d460      	bmi.n	7d1e <__sflush_r+0xce>
    7c5c:	684b      	ldr	r3, [r1, #4]
    7c5e:	2b00      	cmp	r3, #0
    7c60:	dc04      	bgt.n	7c6c <__sflush_r+0x1c>
    7c62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7c64:	2b00      	cmp	r3, #0
    7c66:	dc01      	bgt.n	7c6c <__sflush_r+0x1c>
    7c68:	2000      	movs	r0, #0
    7c6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7c6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7c6e:	2f00      	cmp	r7, #0
    7c70:	d0fa      	beq.n	7c68 <__sflush_r+0x18>
    7c72:	2300      	movs	r3, #0
    7c74:	682e      	ldr	r6, [r5, #0]
    7c76:	602b      	str	r3, [r5, #0]
    7c78:	2380      	movs	r3, #128	; 0x80
    7c7a:	015b      	lsls	r3, r3, #5
    7c7c:	401a      	ands	r2, r3
    7c7e:	d034      	beq.n	7cea <__sflush_r+0x9a>
    7c80:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7c82:	89a3      	ldrh	r3, [r4, #12]
    7c84:	075b      	lsls	r3, r3, #29
    7c86:	d506      	bpl.n	7c96 <__sflush_r+0x46>
    7c88:	6863      	ldr	r3, [r4, #4]
    7c8a:	1ac0      	subs	r0, r0, r3
    7c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d001      	beq.n	7c96 <__sflush_r+0x46>
    7c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7c94:	1ac0      	subs	r0, r0, r3
    7c96:	0002      	movs	r2, r0
    7c98:	6a21      	ldr	r1, [r4, #32]
    7c9a:	2300      	movs	r3, #0
    7c9c:	0028      	movs	r0, r5
    7c9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7ca0:	47b8      	blx	r7
    7ca2:	89a1      	ldrh	r1, [r4, #12]
    7ca4:	1c43      	adds	r3, r0, #1
    7ca6:	d106      	bne.n	7cb6 <__sflush_r+0x66>
    7ca8:	682b      	ldr	r3, [r5, #0]
    7caa:	2b1d      	cmp	r3, #29
    7cac:	d831      	bhi.n	7d12 <__sflush_r+0xc2>
    7cae:	4a2c      	ldr	r2, [pc, #176]	; (7d60 <__sflush_r+0x110>)
    7cb0:	40da      	lsrs	r2, r3
    7cb2:	07d3      	lsls	r3, r2, #31
    7cb4:	d52d      	bpl.n	7d12 <__sflush_r+0xc2>
    7cb6:	2300      	movs	r3, #0
    7cb8:	6063      	str	r3, [r4, #4]
    7cba:	6923      	ldr	r3, [r4, #16]
    7cbc:	6023      	str	r3, [r4, #0]
    7cbe:	04cb      	lsls	r3, r1, #19
    7cc0:	d505      	bpl.n	7cce <__sflush_r+0x7e>
    7cc2:	1c43      	adds	r3, r0, #1
    7cc4:	d102      	bne.n	7ccc <__sflush_r+0x7c>
    7cc6:	682b      	ldr	r3, [r5, #0]
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d100      	bne.n	7cce <__sflush_r+0x7e>
    7ccc:	6560      	str	r0, [r4, #84]	; 0x54
    7cce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7cd0:	602e      	str	r6, [r5, #0]
    7cd2:	2900      	cmp	r1, #0
    7cd4:	d0c8      	beq.n	7c68 <__sflush_r+0x18>
    7cd6:	0023      	movs	r3, r4
    7cd8:	3344      	adds	r3, #68	; 0x44
    7cda:	4299      	cmp	r1, r3
    7cdc:	d002      	beq.n	7ce4 <__sflush_r+0x94>
    7cde:	0028      	movs	r0, r5
    7ce0:	f000 f976 	bl	7fd0 <_free_r>
    7ce4:	2000      	movs	r0, #0
    7ce6:	6360      	str	r0, [r4, #52]	; 0x34
    7ce8:	e7bf      	b.n	7c6a <__sflush_r+0x1a>
    7cea:	2301      	movs	r3, #1
    7cec:	6a21      	ldr	r1, [r4, #32]
    7cee:	0028      	movs	r0, r5
    7cf0:	47b8      	blx	r7
    7cf2:	1c43      	adds	r3, r0, #1
    7cf4:	d1c5      	bne.n	7c82 <__sflush_r+0x32>
    7cf6:	682b      	ldr	r3, [r5, #0]
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	d0c2      	beq.n	7c82 <__sflush_r+0x32>
    7cfc:	2b1d      	cmp	r3, #29
    7cfe:	d001      	beq.n	7d04 <__sflush_r+0xb4>
    7d00:	2b16      	cmp	r3, #22
    7d02:	d101      	bne.n	7d08 <__sflush_r+0xb8>
    7d04:	602e      	str	r6, [r5, #0]
    7d06:	e7af      	b.n	7c68 <__sflush_r+0x18>
    7d08:	2340      	movs	r3, #64	; 0x40
    7d0a:	89a2      	ldrh	r2, [r4, #12]
    7d0c:	4313      	orrs	r3, r2
    7d0e:	81a3      	strh	r3, [r4, #12]
    7d10:	e7ab      	b.n	7c6a <__sflush_r+0x1a>
    7d12:	2340      	movs	r3, #64	; 0x40
    7d14:	430b      	orrs	r3, r1
    7d16:	2001      	movs	r0, #1
    7d18:	81a3      	strh	r3, [r4, #12]
    7d1a:	4240      	negs	r0, r0
    7d1c:	e7a5      	b.n	7c6a <__sflush_r+0x1a>
    7d1e:	690f      	ldr	r7, [r1, #16]
    7d20:	2f00      	cmp	r7, #0
    7d22:	d0a1      	beq.n	7c68 <__sflush_r+0x18>
    7d24:	680b      	ldr	r3, [r1, #0]
    7d26:	600f      	str	r7, [r1, #0]
    7d28:	1bdb      	subs	r3, r3, r7
    7d2a:	9301      	str	r3, [sp, #4]
    7d2c:	2300      	movs	r3, #0
    7d2e:	0792      	lsls	r2, r2, #30
    7d30:	d100      	bne.n	7d34 <__sflush_r+0xe4>
    7d32:	694b      	ldr	r3, [r1, #20]
    7d34:	60a3      	str	r3, [r4, #8]
    7d36:	9b01      	ldr	r3, [sp, #4]
    7d38:	2b00      	cmp	r3, #0
    7d3a:	dc00      	bgt.n	7d3e <__sflush_r+0xee>
    7d3c:	e794      	b.n	7c68 <__sflush_r+0x18>
    7d3e:	9b01      	ldr	r3, [sp, #4]
    7d40:	003a      	movs	r2, r7
    7d42:	6a21      	ldr	r1, [r4, #32]
    7d44:	0028      	movs	r0, r5
    7d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7d48:	47b0      	blx	r6
    7d4a:	2800      	cmp	r0, #0
    7d4c:	dc03      	bgt.n	7d56 <__sflush_r+0x106>
    7d4e:	2340      	movs	r3, #64	; 0x40
    7d50:	89a2      	ldrh	r2, [r4, #12]
    7d52:	4313      	orrs	r3, r2
    7d54:	e7df      	b.n	7d16 <__sflush_r+0xc6>
    7d56:	9b01      	ldr	r3, [sp, #4]
    7d58:	183f      	adds	r7, r7, r0
    7d5a:	1a1b      	subs	r3, r3, r0
    7d5c:	9301      	str	r3, [sp, #4]
    7d5e:	e7ea      	b.n	7d36 <__sflush_r+0xe6>
    7d60:	20400001 	.word	0x20400001

00007d64 <_fflush_r>:
    7d64:	690b      	ldr	r3, [r1, #16]
    7d66:	b570      	push	{r4, r5, r6, lr}
    7d68:	0005      	movs	r5, r0
    7d6a:	000c      	movs	r4, r1
    7d6c:	2b00      	cmp	r3, #0
    7d6e:	d101      	bne.n	7d74 <_fflush_r+0x10>
    7d70:	2000      	movs	r0, #0
    7d72:	bd70      	pop	{r4, r5, r6, pc}
    7d74:	2800      	cmp	r0, #0
    7d76:	d004      	beq.n	7d82 <_fflush_r+0x1e>
    7d78:	6983      	ldr	r3, [r0, #24]
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	d101      	bne.n	7d82 <_fflush_r+0x1e>
    7d7e:	f000 f85f 	bl	7e40 <__sinit>
    7d82:	4b0b      	ldr	r3, [pc, #44]	; (7db0 <_fflush_r+0x4c>)
    7d84:	429c      	cmp	r4, r3
    7d86:	d109      	bne.n	7d9c <_fflush_r+0x38>
    7d88:	686c      	ldr	r4, [r5, #4]
    7d8a:	220c      	movs	r2, #12
    7d8c:	5ea3      	ldrsh	r3, [r4, r2]
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d0ee      	beq.n	7d70 <_fflush_r+0xc>
    7d92:	0021      	movs	r1, r4
    7d94:	0028      	movs	r0, r5
    7d96:	f7ff ff5b 	bl	7c50 <__sflush_r>
    7d9a:	e7ea      	b.n	7d72 <_fflush_r+0xe>
    7d9c:	4b05      	ldr	r3, [pc, #20]	; (7db4 <_fflush_r+0x50>)
    7d9e:	429c      	cmp	r4, r3
    7da0:	d101      	bne.n	7da6 <_fflush_r+0x42>
    7da2:	68ac      	ldr	r4, [r5, #8]
    7da4:	e7f1      	b.n	7d8a <_fflush_r+0x26>
    7da6:	4b04      	ldr	r3, [pc, #16]	; (7db8 <_fflush_r+0x54>)
    7da8:	429c      	cmp	r4, r3
    7daa:	d1ee      	bne.n	7d8a <_fflush_r+0x26>
    7dac:	68ec      	ldr	r4, [r5, #12]
    7dae:	e7ec      	b.n	7d8a <_fflush_r+0x26>
    7db0:	00008afc 	.word	0x00008afc
    7db4:	00008b1c 	.word	0x00008b1c
    7db8:	00008adc 	.word	0x00008adc

00007dbc <_cleanup_r>:
    7dbc:	b510      	push	{r4, lr}
    7dbe:	4902      	ldr	r1, [pc, #8]	; (7dc8 <_cleanup_r+0xc>)
    7dc0:	f000 f8b2 	bl	7f28 <_fwalk_reent>
    7dc4:	bd10      	pop	{r4, pc}
    7dc6:	46c0      	nop			; (mov r8, r8)
    7dc8:	00007d65 	.word	0x00007d65

00007dcc <std.isra.0>:
    7dcc:	2300      	movs	r3, #0
    7dce:	b510      	push	{r4, lr}
    7dd0:	0004      	movs	r4, r0
    7dd2:	6003      	str	r3, [r0, #0]
    7dd4:	6043      	str	r3, [r0, #4]
    7dd6:	6083      	str	r3, [r0, #8]
    7dd8:	8181      	strh	r1, [r0, #12]
    7dda:	6643      	str	r3, [r0, #100]	; 0x64
    7ddc:	81c2      	strh	r2, [r0, #14]
    7dde:	6103      	str	r3, [r0, #16]
    7de0:	6143      	str	r3, [r0, #20]
    7de2:	6183      	str	r3, [r0, #24]
    7de4:	0019      	movs	r1, r3
    7de6:	2208      	movs	r2, #8
    7de8:	305c      	adds	r0, #92	; 0x5c
    7dea:	f7ff fe51 	bl	7a90 <memset>
    7dee:	4b05      	ldr	r3, [pc, #20]	; (7e04 <std.isra.0+0x38>)
    7df0:	6224      	str	r4, [r4, #32]
    7df2:	6263      	str	r3, [r4, #36]	; 0x24
    7df4:	4b04      	ldr	r3, [pc, #16]	; (7e08 <std.isra.0+0x3c>)
    7df6:	62a3      	str	r3, [r4, #40]	; 0x28
    7df8:	4b04      	ldr	r3, [pc, #16]	; (7e0c <std.isra.0+0x40>)
    7dfa:	62e3      	str	r3, [r4, #44]	; 0x2c
    7dfc:	4b04      	ldr	r3, [pc, #16]	; (7e10 <std.isra.0+0x44>)
    7dfe:	6323      	str	r3, [r4, #48]	; 0x30
    7e00:	bd10      	pop	{r4, pc}
    7e02:	46c0      	nop			; (mov r8, r8)
    7e04:	00008721 	.word	0x00008721
    7e08:	00008749 	.word	0x00008749
    7e0c:	00008781 	.word	0x00008781
    7e10:	000087ad 	.word	0x000087ad

00007e14 <__sfmoreglue>:
    7e14:	b570      	push	{r4, r5, r6, lr}
    7e16:	2568      	movs	r5, #104	; 0x68
    7e18:	1e4a      	subs	r2, r1, #1
    7e1a:	4355      	muls	r5, r2
    7e1c:	000e      	movs	r6, r1
    7e1e:	0029      	movs	r1, r5
    7e20:	3174      	adds	r1, #116	; 0x74
    7e22:	f000 f91f 	bl	8064 <_malloc_r>
    7e26:	1e04      	subs	r4, r0, #0
    7e28:	d008      	beq.n	7e3c <__sfmoreglue+0x28>
    7e2a:	2100      	movs	r1, #0
    7e2c:	002a      	movs	r2, r5
    7e2e:	6001      	str	r1, [r0, #0]
    7e30:	6046      	str	r6, [r0, #4]
    7e32:	300c      	adds	r0, #12
    7e34:	60a0      	str	r0, [r4, #8]
    7e36:	3268      	adds	r2, #104	; 0x68
    7e38:	f7ff fe2a 	bl	7a90 <memset>
    7e3c:	0020      	movs	r0, r4
    7e3e:	bd70      	pop	{r4, r5, r6, pc}

00007e40 <__sinit>:
    7e40:	6983      	ldr	r3, [r0, #24]
    7e42:	b513      	push	{r0, r1, r4, lr}
    7e44:	0004      	movs	r4, r0
    7e46:	2b00      	cmp	r3, #0
    7e48:	d128      	bne.n	7e9c <__sinit+0x5c>
    7e4a:	6483      	str	r3, [r0, #72]	; 0x48
    7e4c:	64c3      	str	r3, [r0, #76]	; 0x4c
    7e4e:	6503      	str	r3, [r0, #80]	; 0x50
    7e50:	4b13      	ldr	r3, [pc, #76]	; (7ea0 <__sinit+0x60>)
    7e52:	4a14      	ldr	r2, [pc, #80]	; (7ea4 <__sinit+0x64>)
    7e54:	681b      	ldr	r3, [r3, #0]
    7e56:	6282      	str	r2, [r0, #40]	; 0x28
    7e58:	9301      	str	r3, [sp, #4]
    7e5a:	4298      	cmp	r0, r3
    7e5c:	d101      	bne.n	7e62 <__sinit+0x22>
    7e5e:	2301      	movs	r3, #1
    7e60:	6183      	str	r3, [r0, #24]
    7e62:	0020      	movs	r0, r4
    7e64:	f000 f820 	bl	7ea8 <__sfp>
    7e68:	6060      	str	r0, [r4, #4]
    7e6a:	0020      	movs	r0, r4
    7e6c:	f000 f81c 	bl	7ea8 <__sfp>
    7e70:	60a0      	str	r0, [r4, #8]
    7e72:	0020      	movs	r0, r4
    7e74:	f000 f818 	bl	7ea8 <__sfp>
    7e78:	2200      	movs	r2, #0
    7e7a:	60e0      	str	r0, [r4, #12]
    7e7c:	2104      	movs	r1, #4
    7e7e:	6860      	ldr	r0, [r4, #4]
    7e80:	f7ff ffa4 	bl	7dcc <std.isra.0>
    7e84:	2201      	movs	r2, #1
    7e86:	2109      	movs	r1, #9
    7e88:	68a0      	ldr	r0, [r4, #8]
    7e8a:	f7ff ff9f 	bl	7dcc <std.isra.0>
    7e8e:	2202      	movs	r2, #2
    7e90:	2112      	movs	r1, #18
    7e92:	68e0      	ldr	r0, [r4, #12]
    7e94:	f7ff ff9a 	bl	7dcc <std.isra.0>
    7e98:	2301      	movs	r3, #1
    7e9a:	61a3      	str	r3, [r4, #24]
    7e9c:	bd13      	pop	{r0, r1, r4, pc}
    7e9e:	46c0      	nop			; (mov r8, r8)
    7ea0:	00008ad8 	.word	0x00008ad8
    7ea4:	00007dbd 	.word	0x00007dbd

00007ea8 <__sfp>:
    7ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eaa:	4b1e      	ldr	r3, [pc, #120]	; (7f24 <__sfp+0x7c>)
    7eac:	0007      	movs	r7, r0
    7eae:	681e      	ldr	r6, [r3, #0]
    7eb0:	69b3      	ldr	r3, [r6, #24]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d102      	bne.n	7ebc <__sfp+0x14>
    7eb6:	0030      	movs	r0, r6
    7eb8:	f7ff ffc2 	bl	7e40 <__sinit>
    7ebc:	3648      	adds	r6, #72	; 0x48
    7ebe:	68b4      	ldr	r4, [r6, #8]
    7ec0:	6873      	ldr	r3, [r6, #4]
    7ec2:	3b01      	subs	r3, #1
    7ec4:	d504      	bpl.n	7ed0 <__sfp+0x28>
    7ec6:	6833      	ldr	r3, [r6, #0]
    7ec8:	2b00      	cmp	r3, #0
    7eca:	d007      	beq.n	7edc <__sfp+0x34>
    7ecc:	6836      	ldr	r6, [r6, #0]
    7ece:	e7f6      	b.n	7ebe <__sfp+0x16>
    7ed0:	220c      	movs	r2, #12
    7ed2:	5ea5      	ldrsh	r5, [r4, r2]
    7ed4:	2d00      	cmp	r5, #0
    7ed6:	d00d      	beq.n	7ef4 <__sfp+0x4c>
    7ed8:	3468      	adds	r4, #104	; 0x68
    7eda:	e7f2      	b.n	7ec2 <__sfp+0x1a>
    7edc:	2104      	movs	r1, #4
    7ede:	0038      	movs	r0, r7
    7ee0:	f7ff ff98 	bl	7e14 <__sfmoreglue>
    7ee4:	6030      	str	r0, [r6, #0]
    7ee6:	2800      	cmp	r0, #0
    7ee8:	d1f0      	bne.n	7ecc <__sfp+0x24>
    7eea:	230c      	movs	r3, #12
    7eec:	0004      	movs	r4, r0
    7eee:	603b      	str	r3, [r7, #0]
    7ef0:	0020      	movs	r0, r4
    7ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ef4:	2301      	movs	r3, #1
    7ef6:	0020      	movs	r0, r4
    7ef8:	425b      	negs	r3, r3
    7efa:	81e3      	strh	r3, [r4, #14]
    7efc:	3302      	adds	r3, #2
    7efe:	81a3      	strh	r3, [r4, #12]
    7f00:	6665      	str	r5, [r4, #100]	; 0x64
    7f02:	6025      	str	r5, [r4, #0]
    7f04:	60a5      	str	r5, [r4, #8]
    7f06:	6065      	str	r5, [r4, #4]
    7f08:	6125      	str	r5, [r4, #16]
    7f0a:	6165      	str	r5, [r4, #20]
    7f0c:	61a5      	str	r5, [r4, #24]
    7f0e:	2208      	movs	r2, #8
    7f10:	0029      	movs	r1, r5
    7f12:	305c      	adds	r0, #92	; 0x5c
    7f14:	f7ff fdbc 	bl	7a90 <memset>
    7f18:	6365      	str	r5, [r4, #52]	; 0x34
    7f1a:	63a5      	str	r5, [r4, #56]	; 0x38
    7f1c:	64a5      	str	r5, [r4, #72]	; 0x48
    7f1e:	64e5      	str	r5, [r4, #76]	; 0x4c
    7f20:	e7e6      	b.n	7ef0 <__sfp+0x48>
    7f22:	46c0      	nop			; (mov r8, r8)
    7f24:	00008ad8 	.word	0x00008ad8

00007f28 <_fwalk_reent>:
    7f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7f2a:	0004      	movs	r4, r0
    7f2c:	0007      	movs	r7, r0
    7f2e:	2600      	movs	r6, #0
    7f30:	9101      	str	r1, [sp, #4]
    7f32:	3448      	adds	r4, #72	; 0x48
    7f34:	2c00      	cmp	r4, #0
    7f36:	d101      	bne.n	7f3c <_fwalk_reent+0x14>
    7f38:	0030      	movs	r0, r6
    7f3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7f3c:	6863      	ldr	r3, [r4, #4]
    7f3e:	68a5      	ldr	r5, [r4, #8]
    7f40:	9300      	str	r3, [sp, #0]
    7f42:	9b00      	ldr	r3, [sp, #0]
    7f44:	3b01      	subs	r3, #1
    7f46:	9300      	str	r3, [sp, #0]
    7f48:	d501      	bpl.n	7f4e <_fwalk_reent+0x26>
    7f4a:	6824      	ldr	r4, [r4, #0]
    7f4c:	e7f2      	b.n	7f34 <_fwalk_reent+0xc>
    7f4e:	89ab      	ldrh	r3, [r5, #12]
    7f50:	2b01      	cmp	r3, #1
    7f52:	d908      	bls.n	7f66 <_fwalk_reent+0x3e>
    7f54:	220e      	movs	r2, #14
    7f56:	5eab      	ldrsh	r3, [r5, r2]
    7f58:	3301      	adds	r3, #1
    7f5a:	d004      	beq.n	7f66 <_fwalk_reent+0x3e>
    7f5c:	0029      	movs	r1, r5
    7f5e:	0038      	movs	r0, r7
    7f60:	9b01      	ldr	r3, [sp, #4]
    7f62:	4798      	blx	r3
    7f64:	4306      	orrs	r6, r0
    7f66:	3568      	adds	r5, #104	; 0x68
    7f68:	e7eb      	b.n	7f42 <_fwalk_reent+0x1a>
	...

00007f6c <__swhatbuf_r>:
    7f6c:	b570      	push	{r4, r5, r6, lr}
    7f6e:	000e      	movs	r6, r1
    7f70:	001d      	movs	r5, r3
    7f72:	230e      	movs	r3, #14
    7f74:	5ec9      	ldrsh	r1, [r1, r3]
    7f76:	b090      	sub	sp, #64	; 0x40
    7f78:	0014      	movs	r4, r2
    7f7a:	2900      	cmp	r1, #0
    7f7c:	da07      	bge.n	7f8e <__swhatbuf_r+0x22>
    7f7e:	2300      	movs	r3, #0
    7f80:	602b      	str	r3, [r5, #0]
    7f82:	89b3      	ldrh	r3, [r6, #12]
    7f84:	061b      	lsls	r3, r3, #24
    7f86:	d411      	bmi.n	7fac <__swhatbuf_r+0x40>
    7f88:	2380      	movs	r3, #128	; 0x80
    7f8a:	00db      	lsls	r3, r3, #3
    7f8c:	e00f      	b.n	7fae <__swhatbuf_r+0x42>
    7f8e:	aa01      	add	r2, sp, #4
    7f90:	f000 fc38 	bl	8804 <_fstat_r>
    7f94:	2800      	cmp	r0, #0
    7f96:	dbf2      	blt.n	7f7e <__swhatbuf_r+0x12>
    7f98:	22f0      	movs	r2, #240	; 0xf0
    7f9a:	9b02      	ldr	r3, [sp, #8]
    7f9c:	0212      	lsls	r2, r2, #8
    7f9e:	4013      	ands	r3, r2
    7fa0:	4a05      	ldr	r2, [pc, #20]	; (7fb8 <__swhatbuf_r+0x4c>)
    7fa2:	189b      	adds	r3, r3, r2
    7fa4:	425a      	negs	r2, r3
    7fa6:	4153      	adcs	r3, r2
    7fa8:	602b      	str	r3, [r5, #0]
    7faa:	e7ed      	b.n	7f88 <__swhatbuf_r+0x1c>
    7fac:	2340      	movs	r3, #64	; 0x40
    7fae:	2000      	movs	r0, #0
    7fb0:	6023      	str	r3, [r4, #0]
    7fb2:	b010      	add	sp, #64	; 0x40
    7fb4:	bd70      	pop	{r4, r5, r6, pc}
    7fb6:	46c0      	nop			; (mov r8, r8)
    7fb8:	ffffe000 	.word	0xffffe000

00007fbc <malloc>:
    7fbc:	b510      	push	{r4, lr}
    7fbe:	4b03      	ldr	r3, [pc, #12]	; (7fcc <malloc+0x10>)
    7fc0:	0001      	movs	r1, r0
    7fc2:	6818      	ldr	r0, [r3, #0]
    7fc4:	f000 f84e 	bl	8064 <_malloc_r>
    7fc8:	bd10      	pop	{r4, pc}
    7fca:	46c0      	nop			; (mov r8, r8)
    7fcc:	20000058 	.word	0x20000058

00007fd0 <_free_r>:
    7fd0:	b570      	push	{r4, r5, r6, lr}
    7fd2:	0005      	movs	r5, r0
    7fd4:	2900      	cmp	r1, #0
    7fd6:	d010      	beq.n	7ffa <_free_r+0x2a>
    7fd8:	1f0c      	subs	r4, r1, #4
    7fda:	6823      	ldr	r3, [r4, #0]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	da00      	bge.n	7fe2 <_free_r+0x12>
    7fe0:	18e4      	adds	r4, r4, r3
    7fe2:	0028      	movs	r0, r5
    7fe4:	f000 fc51 	bl	888a <__malloc_lock>
    7fe8:	4a1d      	ldr	r2, [pc, #116]	; (8060 <_free_r+0x90>)
    7fea:	6813      	ldr	r3, [r2, #0]
    7fec:	2b00      	cmp	r3, #0
    7fee:	d105      	bne.n	7ffc <_free_r+0x2c>
    7ff0:	6063      	str	r3, [r4, #4]
    7ff2:	6014      	str	r4, [r2, #0]
    7ff4:	0028      	movs	r0, r5
    7ff6:	f000 fc49 	bl	888c <__malloc_unlock>
    7ffa:	bd70      	pop	{r4, r5, r6, pc}
    7ffc:	42a3      	cmp	r3, r4
    7ffe:	d909      	bls.n	8014 <_free_r+0x44>
    8000:	6821      	ldr	r1, [r4, #0]
    8002:	1860      	adds	r0, r4, r1
    8004:	4283      	cmp	r3, r0
    8006:	d1f3      	bne.n	7ff0 <_free_r+0x20>
    8008:	6818      	ldr	r0, [r3, #0]
    800a:	685b      	ldr	r3, [r3, #4]
    800c:	1841      	adds	r1, r0, r1
    800e:	6021      	str	r1, [r4, #0]
    8010:	e7ee      	b.n	7ff0 <_free_r+0x20>
    8012:	0013      	movs	r3, r2
    8014:	685a      	ldr	r2, [r3, #4]
    8016:	2a00      	cmp	r2, #0
    8018:	d001      	beq.n	801e <_free_r+0x4e>
    801a:	42a2      	cmp	r2, r4
    801c:	d9f9      	bls.n	8012 <_free_r+0x42>
    801e:	6819      	ldr	r1, [r3, #0]
    8020:	1858      	adds	r0, r3, r1
    8022:	42a0      	cmp	r0, r4
    8024:	d10b      	bne.n	803e <_free_r+0x6e>
    8026:	6820      	ldr	r0, [r4, #0]
    8028:	1809      	adds	r1, r1, r0
    802a:	1858      	adds	r0, r3, r1
    802c:	6019      	str	r1, [r3, #0]
    802e:	4282      	cmp	r2, r0
    8030:	d1e0      	bne.n	7ff4 <_free_r+0x24>
    8032:	6810      	ldr	r0, [r2, #0]
    8034:	6852      	ldr	r2, [r2, #4]
    8036:	1841      	adds	r1, r0, r1
    8038:	6019      	str	r1, [r3, #0]
    803a:	605a      	str	r2, [r3, #4]
    803c:	e7da      	b.n	7ff4 <_free_r+0x24>
    803e:	42a0      	cmp	r0, r4
    8040:	d902      	bls.n	8048 <_free_r+0x78>
    8042:	230c      	movs	r3, #12
    8044:	602b      	str	r3, [r5, #0]
    8046:	e7d5      	b.n	7ff4 <_free_r+0x24>
    8048:	6821      	ldr	r1, [r4, #0]
    804a:	1860      	adds	r0, r4, r1
    804c:	4282      	cmp	r2, r0
    804e:	d103      	bne.n	8058 <_free_r+0x88>
    8050:	6810      	ldr	r0, [r2, #0]
    8052:	6852      	ldr	r2, [r2, #4]
    8054:	1841      	adds	r1, r0, r1
    8056:	6021      	str	r1, [r4, #0]
    8058:	6062      	str	r2, [r4, #4]
    805a:	605c      	str	r4, [r3, #4]
    805c:	e7ca      	b.n	7ff4 <_free_r+0x24>
    805e:	46c0      	nop			; (mov r8, r8)
    8060:	2000038c 	.word	0x2000038c

00008064 <_malloc_r>:
    8064:	2303      	movs	r3, #3
    8066:	b570      	push	{r4, r5, r6, lr}
    8068:	1ccd      	adds	r5, r1, #3
    806a:	439d      	bics	r5, r3
    806c:	3508      	adds	r5, #8
    806e:	0006      	movs	r6, r0
    8070:	2d0c      	cmp	r5, #12
    8072:	d21e      	bcs.n	80b2 <_malloc_r+0x4e>
    8074:	250c      	movs	r5, #12
    8076:	42a9      	cmp	r1, r5
    8078:	d81d      	bhi.n	80b6 <_malloc_r+0x52>
    807a:	0030      	movs	r0, r6
    807c:	f000 fc05 	bl	888a <__malloc_lock>
    8080:	4a25      	ldr	r2, [pc, #148]	; (8118 <_malloc_r+0xb4>)
    8082:	6814      	ldr	r4, [r2, #0]
    8084:	0021      	movs	r1, r4
    8086:	2900      	cmp	r1, #0
    8088:	d119      	bne.n	80be <_malloc_r+0x5a>
    808a:	4c24      	ldr	r4, [pc, #144]	; (811c <_malloc_r+0xb8>)
    808c:	6823      	ldr	r3, [r4, #0]
    808e:	2b00      	cmp	r3, #0
    8090:	d103      	bne.n	809a <_malloc_r+0x36>
    8092:	0030      	movs	r0, r6
    8094:	f000 fb32 	bl	86fc <_sbrk_r>
    8098:	6020      	str	r0, [r4, #0]
    809a:	0029      	movs	r1, r5
    809c:	0030      	movs	r0, r6
    809e:	f000 fb2d 	bl	86fc <_sbrk_r>
    80a2:	1c43      	adds	r3, r0, #1
    80a4:	d12c      	bne.n	8100 <_malloc_r+0x9c>
    80a6:	230c      	movs	r3, #12
    80a8:	0030      	movs	r0, r6
    80aa:	6033      	str	r3, [r6, #0]
    80ac:	f000 fbee 	bl	888c <__malloc_unlock>
    80b0:	e003      	b.n	80ba <_malloc_r+0x56>
    80b2:	2d00      	cmp	r5, #0
    80b4:	dadf      	bge.n	8076 <_malloc_r+0x12>
    80b6:	230c      	movs	r3, #12
    80b8:	6033      	str	r3, [r6, #0]
    80ba:	2000      	movs	r0, #0
    80bc:	bd70      	pop	{r4, r5, r6, pc}
    80be:	680b      	ldr	r3, [r1, #0]
    80c0:	1b5b      	subs	r3, r3, r5
    80c2:	d41a      	bmi.n	80fa <_malloc_r+0x96>
    80c4:	2b0b      	cmp	r3, #11
    80c6:	d903      	bls.n	80d0 <_malloc_r+0x6c>
    80c8:	600b      	str	r3, [r1, #0]
    80ca:	18cc      	adds	r4, r1, r3
    80cc:	6025      	str	r5, [r4, #0]
    80ce:	e003      	b.n	80d8 <_malloc_r+0x74>
    80d0:	428c      	cmp	r4, r1
    80d2:	d10e      	bne.n	80f2 <_malloc_r+0x8e>
    80d4:	6863      	ldr	r3, [r4, #4]
    80d6:	6013      	str	r3, [r2, #0]
    80d8:	0030      	movs	r0, r6
    80da:	f000 fbd7 	bl	888c <__malloc_unlock>
    80de:	0020      	movs	r0, r4
    80e0:	2207      	movs	r2, #7
    80e2:	300b      	adds	r0, #11
    80e4:	1d23      	adds	r3, r4, #4
    80e6:	4390      	bics	r0, r2
    80e8:	1ac3      	subs	r3, r0, r3
    80ea:	d0e7      	beq.n	80bc <_malloc_r+0x58>
    80ec:	425a      	negs	r2, r3
    80ee:	50e2      	str	r2, [r4, r3]
    80f0:	e7e4      	b.n	80bc <_malloc_r+0x58>
    80f2:	684b      	ldr	r3, [r1, #4]
    80f4:	6063      	str	r3, [r4, #4]
    80f6:	000c      	movs	r4, r1
    80f8:	e7ee      	b.n	80d8 <_malloc_r+0x74>
    80fa:	000c      	movs	r4, r1
    80fc:	6849      	ldr	r1, [r1, #4]
    80fe:	e7c2      	b.n	8086 <_malloc_r+0x22>
    8100:	2303      	movs	r3, #3
    8102:	1cc4      	adds	r4, r0, #3
    8104:	439c      	bics	r4, r3
    8106:	42a0      	cmp	r0, r4
    8108:	d0e0      	beq.n	80cc <_malloc_r+0x68>
    810a:	1a21      	subs	r1, r4, r0
    810c:	0030      	movs	r0, r6
    810e:	f000 faf5 	bl	86fc <_sbrk_r>
    8112:	1c43      	adds	r3, r0, #1
    8114:	d1da      	bne.n	80cc <_malloc_r+0x68>
    8116:	e7c6      	b.n	80a6 <_malloc_r+0x42>
    8118:	2000038c 	.word	0x2000038c
    811c:	20000390 	.word	0x20000390

00008120 <__ssputs_r>:
    8120:	b5f0      	push	{r4, r5, r6, r7, lr}
    8122:	688e      	ldr	r6, [r1, #8]
    8124:	b085      	sub	sp, #20
    8126:	0007      	movs	r7, r0
    8128:	000c      	movs	r4, r1
    812a:	9203      	str	r2, [sp, #12]
    812c:	9301      	str	r3, [sp, #4]
    812e:	429e      	cmp	r6, r3
    8130:	d839      	bhi.n	81a6 <__ssputs_r+0x86>
    8132:	2390      	movs	r3, #144	; 0x90
    8134:	898a      	ldrh	r2, [r1, #12]
    8136:	00db      	lsls	r3, r3, #3
    8138:	421a      	tst	r2, r3
    813a:	d034      	beq.n	81a6 <__ssputs_r+0x86>
    813c:	2503      	movs	r5, #3
    813e:	6909      	ldr	r1, [r1, #16]
    8140:	6823      	ldr	r3, [r4, #0]
    8142:	1a5b      	subs	r3, r3, r1
    8144:	9302      	str	r3, [sp, #8]
    8146:	6963      	ldr	r3, [r4, #20]
    8148:	9802      	ldr	r0, [sp, #8]
    814a:	435d      	muls	r5, r3
    814c:	0feb      	lsrs	r3, r5, #31
    814e:	195d      	adds	r5, r3, r5
    8150:	9b01      	ldr	r3, [sp, #4]
    8152:	106d      	asrs	r5, r5, #1
    8154:	3301      	adds	r3, #1
    8156:	181b      	adds	r3, r3, r0
    8158:	42ab      	cmp	r3, r5
    815a:	d900      	bls.n	815e <__ssputs_r+0x3e>
    815c:	001d      	movs	r5, r3
    815e:	0553      	lsls	r3, r2, #21
    8160:	d532      	bpl.n	81c8 <__ssputs_r+0xa8>
    8162:	0029      	movs	r1, r5
    8164:	0038      	movs	r0, r7
    8166:	f7ff ff7d 	bl	8064 <_malloc_r>
    816a:	1e06      	subs	r6, r0, #0
    816c:	d109      	bne.n	8182 <__ssputs_r+0x62>
    816e:	230c      	movs	r3, #12
    8170:	603b      	str	r3, [r7, #0]
    8172:	2340      	movs	r3, #64	; 0x40
    8174:	2001      	movs	r0, #1
    8176:	89a2      	ldrh	r2, [r4, #12]
    8178:	4240      	negs	r0, r0
    817a:	4313      	orrs	r3, r2
    817c:	81a3      	strh	r3, [r4, #12]
    817e:	b005      	add	sp, #20
    8180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8182:	9a02      	ldr	r2, [sp, #8]
    8184:	6921      	ldr	r1, [r4, #16]
    8186:	f7ff fc7a 	bl	7a7e <memcpy>
    818a:	89a3      	ldrh	r3, [r4, #12]
    818c:	4a14      	ldr	r2, [pc, #80]	; (81e0 <__ssputs_r+0xc0>)
    818e:	401a      	ands	r2, r3
    8190:	2380      	movs	r3, #128	; 0x80
    8192:	4313      	orrs	r3, r2
    8194:	81a3      	strh	r3, [r4, #12]
    8196:	9b02      	ldr	r3, [sp, #8]
    8198:	6126      	str	r6, [r4, #16]
    819a:	18f6      	adds	r6, r6, r3
    819c:	6026      	str	r6, [r4, #0]
    819e:	6165      	str	r5, [r4, #20]
    81a0:	9e01      	ldr	r6, [sp, #4]
    81a2:	1aed      	subs	r5, r5, r3
    81a4:	60a5      	str	r5, [r4, #8]
    81a6:	9b01      	ldr	r3, [sp, #4]
    81a8:	42b3      	cmp	r3, r6
    81aa:	d200      	bcs.n	81ae <__ssputs_r+0x8e>
    81ac:	001e      	movs	r6, r3
    81ae:	0032      	movs	r2, r6
    81b0:	9903      	ldr	r1, [sp, #12]
    81b2:	6820      	ldr	r0, [r4, #0]
    81b4:	f000 fb57 	bl	8866 <memmove>
    81b8:	68a3      	ldr	r3, [r4, #8]
    81ba:	2000      	movs	r0, #0
    81bc:	1b9b      	subs	r3, r3, r6
    81be:	60a3      	str	r3, [r4, #8]
    81c0:	6823      	ldr	r3, [r4, #0]
    81c2:	199e      	adds	r6, r3, r6
    81c4:	6026      	str	r6, [r4, #0]
    81c6:	e7da      	b.n	817e <__ssputs_r+0x5e>
    81c8:	002a      	movs	r2, r5
    81ca:	0038      	movs	r0, r7
    81cc:	f000 fb5f 	bl	888e <_realloc_r>
    81d0:	1e06      	subs	r6, r0, #0
    81d2:	d1e0      	bne.n	8196 <__ssputs_r+0x76>
    81d4:	6921      	ldr	r1, [r4, #16]
    81d6:	0038      	movs	r0, r7
    81d8:	f7ff fefa 	bl	7fd0 <_free_r>
    81dc:	e7c7      	b.n	816e <__ssputs_r+0x4e>
    81de:	46c0      	nop			; (mov r8, r8)
    81e0:	fffffb7f 	.word	0xfffffb7f

000081e4 <_svfiprintf_r>:
    81e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    81e6:	b09f      	sub	sp, #124	; 0x7c
    81e8:	9002      	str	r0, [sp, #8]
    81ea:	9305      	str	r3, [sp, #20]
    81ec:	898b      	ldrh	r3, [r1, #12]
    81ee:	000f      	movs	r7, r1
    81f0:	0016      	movs	r6, r2
    81f2:	061b      	lsls	r3, r3, #24
    81f4:	d511      	bpl.n	821a <_svfiprintf_r+0x36>
    81f6:	690b      	ldr	r3, [r1, #16]
    81f8:	2b00      	cmp	r3, #0
    81fa:	d10e      	bne.n	821a <_svfiprintf_r+0x36>
    81fc:	2140      	movs	r1, #64	; 0x40
    81fe:	f7ff ff31 	bl	8064 <_malloc_r>
    8202:	6038      	str	r0, [r7, #0]
    8204:	6138      	str	r0, [r7, #16]
    8206:	2800      	cmp	r0, #0
    8208:	d105      	bne.n	8216 <_svfiprintf_r+0x32>
    820a:	230c      	movs	r3, #12
    820c:	9a02      	ldr	r2, [sp, #8]
    820e:	3801      	subs	r0, #1
    8210:	6013      	str	r3, [r2, #0]
    8212:	b01f      	add	sp, #124	; 0x7c
    8214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8216:	2340      	movs	r3, #64	; 0x40
    8218:	617b      	str	r3, [r7, #20]
    821a:	2300      	movs	r3, #0
    821c:	ad06      	add	r5, sp, #24
    821e:	616b      	str	r3, [r5, #20]
    8220:	3320      	adds	r3, #32
    8222:	766b      	strb	r3, [r5, #25]
    8224:	3310      	adds	r3, #16
    8226:	76ab      	strb	r3, [r5, #26]
    8228:	0034      	movs	r4, r6
    822a:	7823      	ldrb	r3, [r4, #0]
    822c:	2b00      	cmp	r3, #0
    822e:	d147      	bne.n	82c0 <_svfiprintf_r+0xdc>
    8230:	1ba3      	subs	r3, r4, r6
    8232:	9304      	str	r3, [sp, #16]
    8234:	d00d      	beq.n	8252 <_svfiprintf_r+0x6e>
    8236:	1ba3      	subs	r3, r4, r6
    8238:	0032      	movs	r2, r6
    823a:	0039      	movs	r1, r7
    823c:	9802      	ldr	r0, [sp, #8]
    823e:	f7ff ff6f 	bl	8120 <__ssputs_r>
    8242:	1c43      	adds	r3, r0, #1
    8244:	d100      	bne.n	8248 <_svfiprintf_r+0x64>
    8246:	e0b5      	b.n	83b4 <_svfiprintf_r+0x1d0>
    8248:	696a      	ldr	r2, [r5, #20]
    824a:	9b04      	ldr	r3, [sp, #16]
    824c:	4694      	mov	ip, r2
    824e:	4463      	add	r3, ip
    8250:	616b      	str	r3, [r5, #20]
    8252:	7823      	ldrb	r3, [r4, #0]
    8254:	2b00      	cmp	r3, #0
    8256:	d100      	bne.n	825a <_svfiprintf_r+0x76>
    8258:	e0ac      	b.n	83b4 <_svfiprintf_r+0x1d0>
    825a:	2201      	movs	r2, #1
    825c:	2300      	movs	r3, #0
    825e:	4252      	negs	r2, r2
    8260:	606a      	str	r2, [r5, #4]
    8262:	a902      	add	r1, sp, #8
    8264:	3254      	adds	r2, #84	; 0x54
    8266:	1852      	adds	r2, r2, r1
    8268:	3401      	adds	r4, #1
    826a:	602b      	str	r3, [r5, #0]
    826c:	60eb      	str	r3, [r5, #12]
    826e:	60ab      	str	r3, [r5, #8]
    8270:	7013      	strb	r3, [r2, #0]
    8272:	65ab      	str	r3, [r5, #88]	; 0x58
    8274:	4e58      	ldr	r6, [pc, #352]	; (83d8 <_svfiprintf_r+0x1f4>)
    8276:	2205      	movs	r2, #5
    8278:	7821      	ldrb	r1, [r4, #0]
    827a:	0030      	movs	r0, r6
    827c:	f000 fae8 	bl	8850 <memchr>
    8280:	1c62      	adds	r2, r4, #1
    8282:	2800      	cmp	r0, #0
    8284:	d120      	bne.n	82c8 <_svfiprintf_r+0xe4>
    8286:	6829      	ldr	r1, [r5, #0]
    8288:	06cb      	lsls	r3, r1, #27
    828a:	d504      	bpl.n	8296 <_svfiprintf_r+0xb2>
    828c:	2353      	movs	r3, #83	; 0x53
    828e:	ae02      	add	r6, sp, #8
    8290:	3020      	adds	r0, #32
    8292:	199b      	adds	r3, r3, r6
    8294:	7018      	strb	r0, [r3, #0]
    8296:	070b      	lsls	r3, r1, #28
    8298:	d504      	bpl.n	82a4 <_svfiprintf_r+0xc0>
    829a:	2353      	movs	r3, #83	; 0x53
    829c:	202b      	movs	r0, #43	; 0x2b
    829e:	ae02      	add	r6, sp, #8
    82a0:	199b      	adds	r3, r3, r6
    82a2:	7018      	strb	r0, [r3, #0]
    82a4:	7823      	ldrb	r3, [r4, #0]
    82a6:	2b2a      	cmp	r3, #42	; 0x2a
    82a8:	d016      	beq.n	82d8 <_svfiprintf_r+0xf4>
    82aa:	2000      	movs	r0, #0
    82ac:	210a      	movs	r1, #10
    82ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    82b0:	7822      	ldrb	r2, [r4, #0]
    82b2:	3a30      	subs	r2, #48	; 0x30
    82b4:	2a09      	cmp	r2, #9
    82b6:	d955      	bls.n	8364 <_svfiprintf_r+0x180>
    82b8:	2800      	cmp	r0, #0
    82ba:	d015      	beq.n	82e8 <_svfiprintf_r+0x104>
    82bc:	9309      	str	r3, [sp, #36]	; 0x24
    82be:	e013      	b.n	82e8 <_svfiprintf_r+0x104>
    82c0:	2b25      	cmp	r3, #37	; 0x25
    82c2:	d0b5      	beq.n	8230 <_svfiprintf_r+0x4c>
    82c4:	3401      	adds	r4, #1
    82c6:	e7b0      	b.n	822a <_svfiprintf_r+0x46>
    82c8:	2301      	movs	r3, #1
    82ca:	1b80      	subs	r0, r0, r6
    82cc:	4083      	lsls	r3, r0
    82ce:	6829      	ldr	r1, [r5, #0]
    82d0:	0014      	movs	r4, r2
    82d2:	430b      	orrs	r3, r1
    82d4:	602b      	str	r3, [r5, #0]
    82d6:	e7cd      	b.n	8274 <_svfiprintf_r+0x90>
    82d8:	9b05      	ldr	r3, [sp, #20]
    82da:	1d18      	adds	r0, r3, #4
    82dc:	681b      	ldr	r3, [r3, #0]
    82de:	9005      	str	r0, [sp, #20]
    82e0:	2b00      	cmp	r3, #0
    82e2:	db39      	blt.n	8358 <_svfiprintf_r+0x174>
    82e4:	9309      	str	r3, [sp, #36]	; 0x24
    82e6:	0014      	movs	r4, r2
    82e8:	7823      	ldrb	r3, [r4, #0]
    82ea:	2b2e      	cmp	r3, #46	; 0x2e
    82ec:	d10b      	bne.n	8306 <_svfiprintf_r+0x122>
    82ee:	7863      	ldrb	r3, [r4, #1]
    82f0:	1c62      	adds	r2, r4, #1
    82f2:	2b2a      	cmp	r3, #42	; 0x2a
    82f4:	d13e      	bne.n	8374 <_svfiprintf_r+0x190>
    82f6:	9b05      	ldr	r3, [sp, #20]
    82f8:	3402      	adds	r4, #2
    82fa:	1d1a      	adds	r2, r3, #4
    82fc:	681b      	ldr	r3, [r3, #0]
    82fe:	9205      	str	r2, [sp, #20]
    8300:	2b00      	cmp	r3, #0
    8302:	db34      	blt.n	836e <_svfiprintf_r+0x18a>
    8304:	9307      	str	r3, [sp, #28]
    8306:	4e35      	ldr	r6, [pc, #212]	; (83dc <_svfiprintf_r+0x1f8>)
    8308:	7821      	ldrb	r1, [r4, #0]
    830a:	2203      	movs	r2, #3
    830c:	0030      	movs	r0, r6
    830e:	f000 fa9f 	bl	8850 <memchr>
    8312:	2800      	cmp	r0, #0
    8314:	d006      	beq.n	8324 <_svfiprintf_r+0x140>
    8316:	2340      	movs	r3, #64	; 0x40
    8318:	1b80      	subs	r0, r0, r6
    831a:	4083      	lsls	r3, r0
    831c:	682a      	ldr	r2, [r5, #0]
    831e:	3401      	adds	r4, #1
    8320:	4313      	orrs	r3, r2
    8322:	602b      	str	r3, [r5, #0]
    8324:	7821      	ldrb	r1, [r4, #0]
    8326:	2206      	movs	r2, #6
    8328:	482d      	ldr	r0, [pc, #180]	; (83e0 <_svfiprintf_r+0x1fc>)
    832a:	1c66      	adds	r6, r4, #1
    832c:	7629      	strb	r1, [r5, #24]
    832e:	f000 fa8f 	bl	8850 <memchr>
    8332:	2800      	cmp	r0, #0
    8334:	d046      	beq.n	83c4 <_svfiprintf_r+0x1e0>
    8336:	4b2b      	ldr	r3, [pc, #172]	; (83e4 <_svfiprintf_r+0x200>)
    8338:	2b00      	cmp	r3, #0
    833a:	d12f      	bne.n	839c <_svfiprintf_r+0x1b8>
    833c:	6829      	ldr	r1, [r5, #0]
    833e:	9b05      	ldr	r3, [sp, #20]
    8340:	2207      	movs	r2, #7
    8342:	05c9      	lsls	r1, r1, #23
    8344:	d528      	bpl.n	8398 <_svfiprintf_r+0x1b4>
    8346:	189b      	adds	r3, r3, r2
    8348:	4393      	bics	r3, r2
    834a:	3308      	adds	r3, #8
    834c:	9305      	str	r3, [sp, #20]
    834e:	696b      	ldr	r3, [r5, #20]
    8350:	9a03      	ldr	r2, [sp, #12]
    8352:	189b      	adds	r3, r3, r2
    8354:	616b      	str	r3, [r5, #20]
    8356:	e767      	b.n	8228 <_svfiprintf_r+0x44>
    8358:	425b      	negs	r3, r3
    835a:	60eb      	str	r3, [r5, #12]
    835c:	2302      	movs	r3, #2
    835e:	430b      	orrs	r3, r1
    8360:	602b      	str	r3, [r5, #0]
    8362:	e7c0      	b.n	82e6 <_svfiprintf_r+0x102>
    8364:	434b      	muls	r3, r1
    8366:	3401      	adds	r4, #1
    8368:	189b      	adds	r3, r3, r2
    836a:	2001      	movs	r0, #1
    836c:	e7a0      	b.n	82b0 <_svfiprintf_r+0xcc>
    836e:	2301      	movs	r3, #1
    8370:	425b      	negs	r3, r3
    8372:	e7c7      	b.n	8304 <_svfiprintf_r+0x120>
    8374:	2300      	movs	r3, #0
    8376:	0014      	movs	r4, r2
    8378:	200a      	movs	r0, #10
    837a:	001a      	movs	r2, r3
    837c:	606b      	str	r3, [r5, #4]
    837e:	7821      	ldrb	r1, [r4, #0]
    8380:	3930      	subs	r1, #48	; 0x30
    8382:	2909      	cmp	r1, #9
    8384:	d903      	bls.n	838e <_svfiprintf_r+0x1aa>
    8386:	2b00      	cmp	r3, #0
    8388:	d0bd      	beq.n	8306 <_svfiprintf_r+0x122>
    838a:	9207      	str	r2, [sp, #28]
    838c:	e7bb      	b.n	8306 <_svfiprintf_r+0x122>
    838e:	4342      	muls	r2, r0
    8390:	3401      	adds	r4, #1
    8392:	1852      	adds	r2, r2, r1
    8394:	2301      	movs	r3, #1
    8396:	e7f2      	b.n	837e <_svfiprintf_r+0x19a>
    8398:	3307      	adds	r3, #7
    839a:	e7d5      	b.n	8348 <_svfiprintf_r+0x164>
    839c:	ab05      	add	r3, sp, #20
    839e:	9300      	str	r3, [sp, #0]
    83a0:	003a      	movs	r2, r7
    83a2:	4b11      	ldr	r3, [pc, #68]	; (83e8 <_svfiprintf_r+0x204>)
    83a4:	0029      	movs	r1, r5
    83a6:	9802      	ldr	r0, [sp, #8]
    83a8:	e000      	b.n	83ac <_svfiprintf_r+0x1c8>
    83aa:	bf00      	nop
    83ac:	9003      	str	r0, [sp, #12]
    83ae:	9b03      	ldr	r3, [sp, #12]
    83b0:	3301      	adds	r3, #1
    83b2:	d1cc      	bne.n	834e <_svfiprintf_r+0x16a>
    83b4:	89bb      	ldrh	r3, [r7, #12]
    83b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    83b8:	065b      	lsls	r3, r3, #25
    83ba:	d400      	bmi.n	83be <_svfiprintf_r+0x1da>
    83bc:	e729      	b.n	8212 <_svfiprintf_r+0x2e>
    83be:	2001      	movs	r0, #1
    83c0:	4240      	negs	r0, r0
    83c2:	e726      	b.n	8212 <_svfiprintf_r+0x2e>
    83c4:	ab05      	add	r3, sp, #20
    83c6:	9300      	str	r3, [sp, #0]
    83c8:	003a      	movs	r2, r7
    83ca:	4b07      	ldr	r3, [pc, #28]	; (83e8 <_svfiprintf_r+0x204>)
    83cc:	0029      	movs	r1, r5
    83ce:	9802      	ldr	r0, [sp, #8]
    83d0:	f000 f87a 	bl	84c8 <_printf_i>
    83d4:	e7ea      	b.n	83ac <_svfiprintf_r+0x1c8>
    83d6:	46c0      	nop			; (mov r8, r8)
    83d8:	00008b3c 	.word	0x00008b3c
    83dc:	00008b42 	.word	0x00008b42
    83e0:	00008b46 	.word	0x00008b46
    83e4:	00000000 	.word	0x00000000
    83e8:	00008121 	.word	0x00008121

000083ec <_printf_common>:
    83ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    83ee:	0015      	movs	r5, r2
    83f0:	9301      	str	r3, [sp, #4]
    83f2:	688a      	ldr	r2, [r1, #8]
    83f4:	690b      	ldr	r3, [r1, #16]
    83f6:	9000      	str	r0, [sp, #0]
    83f8:	000c      	movs	r4, r1
    83fa:	4293      	cmp	r3, r2
    83fc:	da00      	bge.n	8400 <_printf_common+0x14>
    83fe:	0013      	movs	r3, r2
    8400:	0022      	movs	r2, r4
    8402:	602b      	str	r3, [r5, #0]
    8404:	3243      	adds	r2, #67	; 0x43
    8406:	7812      	ldrb	r2, [r2, #0]
    8408:	2a00      	cmp	r2, #0
    840a:	d001      	beq.n	8410 <_printf_common+0x24>
    840c:	3301      	adds	r3, #1
    840e:	602b      	str	r3, [r5, #0]
    8410:	6823      	ldr	r3, [r4, #0]
    8412:	069b      	lsls	r3, r3, #26
    8414:	d502      	bpl.n	841c <_printf_common+0x30>
    8416:	682b      	ldr	r3, [r5, #0]
    8418:	3302      	adds	r3, #2
    841a:	602b      	str	r3, [r5, #0]
    841c:	2706      	movs	r7, #6
    841e:	6823      	ldr	r3, [r4, #0]
    8420:	401f      	ands	r7, r3
    8422:	d027      	beq.n	8474 <_printf_common+0x88>
    8424:	0023      	movs	r3, r4
    8426:	3343      	adds	r3, #67	; 0x43
    8428:	781b      	ldrb	r3, [r3, #0]
    842a:	1e5a      	subs	r2, r3, #1
    842c:	4193      	sbcs	r3, r2
    842e:	6822      	ldr	r2, [r4, #0]
    8430:	0692      	lsls	r2, r2, #26
    8432:	d430      	bmi.n	8496 <_printf_common+0xaa>
    8434:	0022      	movs	r2, r4
    8436:	9901      	ldr	r1, [sp, #4]
    8438:	3243      	adds	r2, #67	; 0x43
    843a:	9800      	ldr	r0, [sp, #0]
    843c:	9e08      	ldr	r6, [sp, #32]
    843e:	47b0      	blx	r6
    8440:	1c43      	adds	r3, r0, #1
    8442:	d025      	beq.n	8490 <_printf_common+0xa4>
    8444:	2306      	movs	r3, #6
    8446:	6820      	ldr	r0, [r4, #0]
    8448:	682a      	ldr	r2, [r5, #0]
    844a:	68e1      	ldr	r1, [r4, #12]
    844c:	4003      	ands	r3, r0
    844e:	2500      	movs	r5, #0
    8450:	2b04      	cmp	r3, #4
    8452:	d103      	bne.n	845c <_printf_common+0x70>
    8454:	1a8d      	subs	r5, r1, r2
    8456:	43eb      	mvns	r3, r5
    8458:	17db      	asrs	r3, r3, #31
    845a:	401d      	ands	r5, r3
    845c:	68a3      	ldr	r3, [r4, #8]
    845e:	6922      	ldr	r2, [r4, #16]
    8460:	4293      	cmp	r3, r2
    8462:	dd01      	ble.n	8468 <_printf_common+0x7c>
    8464:	1a9b      	subs	r3, r3, r2
    8466:	18ed      	adds	r5, r5, r3
    8468:	2700      	movs	r7, #0
    846a:	42bd      	cmp	r5, r7
    846c:	d120      	bne.n	84b0 <_printf_common+0xc4>
    846e:	2000      	movs	r0, #0
    8470:	e010      	b.n	8494 <_printf_common+0xa8>
    8472:	3701      	adds	r7, #1
    8474:	68e3      	ldr	r3, [r4, #12]
    8476:	682a      	ldr	r2, [r5, #0]
    8478:	1a9b      	subs	r3, r3, r2
    847a:	429f      	cmp	r7, r3
    847c:	dad2      	bge.n	8424 <_printf_common+0x38>
    847e:	0022      	movs	r2, r4
    8480:	2301      	movs	r3, #1
    8482:	3219      	adds	r2, #25
    8484:	9901      	ldr	r1, [sp, #4]
    8486:	9800      	ldr	r0, [sp, #0]
    8488:	9e08      	ldr	r6, [sp, #32]
    848a:	47b0      	blx	r6
    848c:	1c43      	adds	r3, r0, #1
    848e:	d1f0      	bne.n	8472 <_printf_common+0x86>
    8490:	2001      	movs	r0, #1
    8492:	4240      	negs	r0, r0
    8494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8496:	2030      	movs	r0, #48	; 0x30
    8498:	18e1      	adds	r1, r4, r3
    849a:	3143      	adds	r1, #67	; 0x43
    849c:	7008      	strb	r0, [r1, #0]
    849e:	0021      	movs	r1, r4
    84a0:	1c5a      	adds	r2, r3, #1
    84a2:	3145      	adds	r1, #69	; 0x45
    84a4:	7809      	ldrb	r1, [r1, #0]
    84a6:	18a2      	adds	r2, r4, r2
    84a8:	3243      	adds	r2, #67	; 0x43
    84aa:	3302      	adds	r3, #2
    84ac:	7011      	strb	r1, [r2, #0]
    84ae:	e7c1      	b.n	8434 <_printf_common+0x48>
    84b0:	0022      	movs	r2, r4
    84b2:	2301      	movs	r3, #1
    84b4:	321a      	adds	r2, #26
    84b6:	9901      	ldr	r1, [sp, #4]
    84b8:	9800      	ldr	r0, [sp, #0]
    84ba:	9e08      	ldr	r6, [sp, #32]
    84bc:	47b0      	blx	r6
    84be:	1c43      	adds	r3, r0, #1
    84c0:	d0e6      	beq.n	8490 <_printf_common+0xa4>
    84c2:	3701      	adds	r7, #1
    84c4:	e7d1      	b.n	846a <_printf_common+0x7e>
	...

000084c8 <_printf_i>:
    84c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    84ca:	b08b      	sub	sp, #44	; 0x2c
    84cc:	9206      	str	r2, [sp, #24]
    84ce:	000a      	movs	r2, r1
    84d0:	3243      	adds	r2, #67	; 0x43
    84d2:	9307      	str	r3, [sp, #28]
    84d4:	9005      	str	r0, [sp, #20]
    84d6:	9204      	str	r2, [sp, #16]
    84d8:	7e0a      	ldrb	r2, [r1, #24]
    84da:	000c      	movs	r4, r1
    84dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    84de:	2a6e      	cmp	r2, #110	; 0x6e
    84e0:	d100      	bne.n	84e4 <_printf_i+0x1c>
    84e2:	e08f      	b.n	8604 <_printf_i+0x13c>
    84e4:	d817      	bhi.n	8516 <_printf_i+0x4e>
    84e6:	2a63      	cmp	r2, #99	; 0x63
    84e8:	d02c      	beq.n	8544 <_printf_i+0x7c>
    84ea:	d808      	bhi.n	84fe <_printf_i+0x36>
    84ec:	2a00      	cmp	r2, #0
    84ee:	d100      	bne.n	84f2 <_printf_i+0x2a>
    84f0:	e099      	b.n	8626 <_printf_i+0x15e>
    84f2:	2a58      	cmp	r2, #88	; 0x58
    84f4:	d054      	beq.n	85a0 <_printf_i+0xd8>
    84f6:	0026      	movs	r6, r4
    84f8:	3642      	adds	r6, #66	; 0x42
    84fa:	7032      	strb	r2, [r6, #0]
    84fc:	e029      	b.n	8552 <_printf_i+0x8a>
    84fe:	2a64      	cmp	r2, #100	; 0x64
    8500:	d001      	beq.n	8506 <_printf_i+0x3e>
    8502:	2a69      	cmp	r2, #105	; 0x69
    8504:	d1f7      	bne.n	84f6 <_printf_i+0x2e>
    8506:	6821      	ldr	r1, [r4, #0]
    8508:	681a      	ldr	r2, [r3, #0]
    850a:	0608      	lsls	r0, r1, #24
    850c:	d523      	bpl.n	8556 <_printf_i+0x8e>
    850e:	1d11      	adds	r1, r2, #4
    8510:	6019      	str	r1, [r3, #0]
    8512:	6815      	ldr	r5, [r2, #0]
    8514:	e025      	b.n	8562 <_printf_i+0x9a>
    8516:	2a73      	cmp	r2, #115	; 0x73
    8518:	d100      	bne.n	851c <_printf_i+0x54>
    851a:	e088      	b.n	862e <_printf_i+0x166>
    851c:	d808      	bhi.n	8530 <_printf_i+0x68>
    851e:	2a6f      	cmp	r2, #111	; 0x6f
    8520:	d029      	beq.n	8576 <_printf_i+0xae>
    8522:	2a70      	cmp	r2, #112	; 0x70
    8524:	d1e7      	bne.n	84f6 <_printf_i+0x2e>
    8526:	2220      	movs	r2, #32
    8528:	6809      	ldr	r1, [r1, #0]
    852a:	430a      	orrs	r2, r1
    852c:	6022      	str	r2, [r4, #0]
    852e:	e003      	b.n	8538 <_printf_i+0x70>
    8530:	2a75      	cmp	r2, #117	; 0x75
    8532:	d020      	beq.n	8576 <_printf_i+0xae>
    8534:	2a78      	cmp	r2, #120	; 0x78
    8536:	d1de      	bne.n	84f6 <_printf_i+0x2e>
    8538:	0022      	movs	r2, r4
    853a:	2178      	movs	r1, #120	; 0x78
    853c:	3245      	adds	r2, #69	; 0x45
    853e:	7011      	strb	r1, [r2, #0]
    8540:	4a6c      	ldr	r2, [pc, #432]	; (86f4 <_printf_i+0x22c>)
    8542:	e030      	b.n	85a6 <_printf_i+0xde>
    8544:	000e      	movs	r6, r1
    8546:	681a      	ldr	r2, [r3, #0]
    8548:	3642      	adds	r6, #66	; 0x42
    854a:	1d11      	adds	r1, r2, #4
    854c:	6019      	str	r1, [r3, #0]
    854e:	6813      	ldr	r3, [r2, #0]
    8550:	7033      	strb	r3, [r6, #0]
    8552:	2301      	movs	r3, #1
    8554:	e079      	b.n	864a <_printf_i+0x182>
    8556:	0649      	lsls	r1, r1, #25
    8558:	d5d9      	bpl.n	850e <_printf_i+0x46>
    855a:	1d11      	adds	r1, r2, #4
    855c:	6019      	str	r1, [r3, #0]
    855e:	2300      	movs	r3, #0
    8560:	5ed5      	ldrsh	r5, [r2, r3]
    8562:	2d00      	cmp	r5, #0
    8564:	da03      	bge.n	856e <_printf_i+0xa6>
    8566:	232d      	movs	r3, #45	; 0x2d
    8568:	9a04      	ldr	r2, [sp, #16]
    856a:	426d      	negs	r5, r5
    856c:	7013      	strb	r3, [r2, #0]
    856e:	4b62      	ldr	r3, [pc, #392]	; (86f8 <_printf_i+0x230>)
    8570:	270a      	movs	r7, #10
    8572:	9303      	str	r3, [sp, #12]
    8574:	e02f      	b.n	85d6 <_printf_i+0x10e>
    8576:	6820      	ldr	r0, [r4, #0]
    8578:	6819      	ldr	r1, [r3, #0]
    857a:	0605      	lsls	r5, r0, #24
    857c:	d503      	bpl.n	8586 <_printf_i+0xbe>
    857e:	1d08      	adds	r0, r1, #4
    8580:	6018      	str	r0, [r3, #0]
    8582:	680d      	ldr	r5, [r1, #0]
    8584:	e005      	b.n	8592 <_printf_i+0xca>
    8586:	0640      	lsls	r0, r0, #25
    8588:	d5f9      	bpl.n	857e <_printf_i+0xb6>
    858a:	680d      	ldr	r5, [r1, #0]
    858c:	1d08      	adds	r0, r1, #4
    858e:	6018      	str	r0, [r3, #0]
    8590:	b2ad      	uxth	r5, r5
    8592:	4b59      	ldr	r3, [pc, #356]	; (86f8 <_printf_i+0x230>)
    8594:	2708      	movs	r7, #8
    8596:	9303      	str	r3, [sp, #12]
    8598:	2a6f      	cmp	r2, #111	; 0x6f
    859a:	d018      	beq.n	85ce <_printf_i+0x106>
    859c:	270a      	movs	r7, #10
    859e:	e016      	b.n	85ce <_printf_i+0x106>
    85a0:	3145      	adds	r1, #69	; 0x45
    85a2:	700a      	strb	r2, [r1, #0]
    85a4:	4a54      	ldr	r2, [pc, #336]	; (86f8 <_printf_i+0x230>)
    85a6:	9203      	str	r2, [sp, #12]
    85a8:	681a      	ldr	r2, [r3, #0]
    85aa:	6821      	ldr	r1, [r4, #0]
    85ac:	1d10      	adds	r0, r2, #4
    85ae:	6018      	str	r0, [r3, #0]
    85b0:	6815      	ldr	r5, [r2, #0]
    85b2:	0608      	lsls	r0, r1, #24
    85b4:	d522      	bpl.n	85fc <_printf_i+0x134>
    85b6:	07cb      	lsls	r3, r1, #31
    85b8:	d502      	bpl.n	85c0 <_printf_i+0xf8>
    85ba:	2320      	movs	r3, #32
    85bc:	4319      	orrs	r1, r3
    85be:	6021      	str	r1, [r4, #0]
    85c0:	2710      	movs	r7, #16
    85c2:	2d00      	cmp	r5, #0
    85c4:	d103      	bne.n	85ce <_printf_i+0x106>
    85c6:	2320      	movs	r3, #32
    85c8:	6822      	ldr	r2, [r4, #0]
    85ca:	439a      	bics	r2, r3
    85cc:	6022      	str	r2, [r4, #0]
    85ce:	0023      	movs	r3, r4
    85d0:	2200      	movs	r2, #0
    85d2:	3343      	adds	r3, #67	; 0x43
    85d4:	701a      	strb	r2, [r3, #0]
    85d6:	6863      	ldr	r3, [r4, #4]
    85d8:	60a3      	str	r3, [r4, #8]
    85da:	2b00      	cmp	r3, #0
    85dc:	db5c      	blt.n	8698 <_printf_i+0x1d0>
    85de:	2204      	movs	r2, #4
    85e0:	6821      	ldr	r1, [r4, #0]
    85e2:	4391      	bics	r1, r2
    85e4:	6021      	str	r1, [r4, #0]
    85e6:	2d00      	cmp	r5, #0
    85e8:	d158      	bne.n	869c <_printf_i+0x1d4>
    85ea:	9e04      	ldr	r6, [sp, #16]
    85ec:	2b00      	cmp	r3, #0
    85ee:	d064      	beq.n	86ba <_printf_i+0x1f2>
    85f0:	0026      	movs	r6, r4
    85f2:	9b03      	ldr	r3, [sp, #12]
    85f4:	3642      	adds	r6, #66	; 0x42
    85f6:	781b      	ldrb	r3, [r3, #0]
    85f8:	7033      	strb	r3, [r6, #0]
    85fa:	e05e      	b.n	86ba <_printf_i+0x1f2>
    85fc:	0648      	lsls	r0, r1, #25
    85fe:	d5da      	bpl.n	85b6 <_printf_i+0xee>
    8600:	b2ad      	uxth	r5, r5
    8602:	e7d8      	b.n	85b6 <_printf_i+0xee>
    8604:	6809      	ldr	r1, [r1, #0]
    8606:	681a      	ldr	r2, [r3, #0]
    8608:	0608      	lsls	r0, r1, #24
    860a:	d505      	bpl.n	8618 <_printf_i+0x150>
    860c:	1d11      	adds	r1, r2, #4
    860e:	6019      	str	r1, [r3, #0]
    8610:	6813      	ldr	r3, [r2, #0]
    8612:	6962      	ldr	r2, [r4, #20]
    8614:	601a      	str	r2, [r3, #0]
    8616:	e006      	b.n	8626 <_printf_i+0x15e>
    8618:	0649      	lsls	r1, r1, #25
    861a:	d5f7      	bpl.n	860c <_printf_i+0x144>
    861c:	1d11      	adds	r1, r2, #4
    861e:	6019      	str	r1, [r3, #0]
    8620:	6813      	ldr	r3, [r2, #0]
    8622:	8aa2      	ldrh	r2, [r4, #20]
    8624:	801a      	strh	r2, [r3, #0]
    8626:	2300      	movs	r3, #0
    8628:	9e04      	ldr	r6, [sp, #16]
    862a:	6123      	str	r3, [r4, #16]
    862c:	e054      	b.n	86d8 <_printf_i+0x210>
    862e:	681a      	ldr	r2, [r3, #0]
    8630:	1d11      	adds	r1, r2, #4
    8632:	6019      	str	r1, [r3, #0]
    8634:	6816      	ldr	r6, [r2, #0]
    8636:	2100      	movs	r1, #0
    8638:	6862      	ldr	r2, [r4, #4]
    863a:	0030      	movs	r0, r6
    863c:	f000 f908 	bl	8850 <memchr>
    8640:	2800      	cmp	r0, #0
    8642:	d001      	beq.n	8648 <_printf_i+0x180>
    8644:	1b80      	subs	r0, r0, r6
    8646:	6060      	str	r0, [r4, #4]
    8648:	6863      	ldr	r3, [r4, #4]
    864a:	6123      	str	r3, [r4, #16]
    864c:	2300      	movs	r3, #0
    864e:	9a04      	ldr	r2, [sp, #16]
    8650:	7013      	strb	r3, [r2, #0]
    8652:	e041      	b.n	86d8 <_printf_i+0x210>
    8654:	6923      	ldr	r3, [r4, #16]
    8656:	0032      	movs	r2, r6
    8658:	9906      	ldr	r1, [sp, #24]
    865a:	9805      	ldr	r0, [sp, #20]
    865c:	9d07      	ldr	r5, [sp, #28]
    865e:	47a8      	blx	r5
    8660:	1c43      	adds	r3, r0, #1
    8662:	d043      	beq.n	86ec <_printf_i+0x224>
    8664:	6823      	ldr	r3, [r4, #0]
    8666:	2500      	movs	r5, #0
    8668:	079b      	lsls	r3, r3, #30
    866a:	d40f      	bmi.n	868c <_printf_i+0x1c4>
    866c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    866e:	68e0      	ldr	r0, [r4, #12]
    8670:	4298      	cmp	r0, r3
    8672:	da3d      	bge.n	86f0 <_printf_i+0x228>
    8674:	0018      	movs	r0, r3
    8676:	e03b      	b.n	86f0 <_printf_i+0x228>
    8678:	0022      	movs	r2, r4
    867a:	2301      	movs	r3, #1
    867c:	3219      	adds	r2, #25
    867e:	9906      	ldr	r1, [sp, #24]
    8680:	9805      	ldr	r0, [sp, #20]
    8682:	9e07      	ldr	r6, [sp, #28]
    8684:	47b0      	blx	r6
    8686:	1c43      	adds	r3, r0, #1
    8688:	d030      	beq.n	86ec <_printf_i+0x224>
    868a:	3501      	adds	r5, #1
    868c:	68e3      	ldr	r3, [r4, #12]
    868e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8690:	1a9b      	subs	r3, r3, r2
    8692:	429d      	cmp	r5, r3
    8694:	dbf0      	blt.n	8678 <_printf_i+0x1b0>
    8696:	e7e9      	b.n	866c <_printf_i+0x1a4>
    8698:	2d00      	cmp	r5, #0
    869a:	d0a9      	beq.n	85f0 <_printf_i+0x128>
    869c:	9e04      	ldr	r6, [sp, #16]
    869e:	0028      	movs	r0, r5
    86a0:	0039      	movs	r1, r7
    86a2:	f7ff f89f 	bl	77e4 <__aeabi_uidivmod>
    86a6:	9b03      	ldr	r3, [sp, #12]
    86a8:	3e01      	subs	r6, #1
    86aa:	5c5b      	ldrb	r3, [r3, r1]
    86ac:	0028      	movs	r0, r5
    86ae:	7033      	strb	r3, [r6, #0]
    86b0:	0039      	movs	r1, r7
    86b2:	f7ff f811 	bl	76d8 <__udivsi3>
    86b6:	1e05      	subs	r5, r0, #0
    86b8:	d1f1      	bne.n	869e <_printf_i+0x1d6>
    86ba:	2f08      	cmp	r7, #8
    86bc:	d109      	bne.n	86d2 <_printf_i+0x20a>
    86be:	6823      	ldr	r3, [r4, #0]
    86c0:	07db      	lsls	r3, r3, #31
    86c2:	d506      	bpl.n	86d2 <_printf_i+0x20a>
    86c4:	6863      	ldr	r3, [r4, #4]
    86c6:	6922      	ldr	r2, [r4, #16]
    86c8:	4293      	cmp	r3, r2
    86ca:	dc02      	bgt.n	86d2 <_printf_i+0x20a>
    86cc:	2330      	movs	r3, #48	; 0x30
    86ce:	3e01      	subs	r6, #1
    86d0:	7033      	strb	r3, [r6, #0]
    86d2:	9b04      	ldr	r3, [sp, #16]
    86d4:	1b9b      	subs	r3, r3, r6
    86d6:	6123      	str	r3, [r4, #16]
    86d8:	9b07      	ldr	r3, [sp, #28]
    86da:	aa09      	add	r2, sp, #36	; 0x24
    86dc:	9300      	str	r3, [sp, #0]
    86de:	0021      	movs	r1, r4
    86e0:	9b06      	ldr	r3, [sp, #24]
    86e2:	9805      	ldr	r0, [sp, #20]
    86e4:	f7ff fe82 	bl	83ec <_printf_common>
    86e8:	1c43      	adds	r3, r0, #1
    86ea:	d1b3      	bne.n	8654 <_printf_i+0x18c>
    86ec:	2001      	movs	r0, #1
    86ee:	4240      	negs	r0, r0
    86f0:	b00b      	add	sp, #44	; 0x2c
    86f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86f4:	00008b5e 	.word	0x00008b5e
    86f8:	00008b4d 	.word	0x00008b4d

000086fc <_sbrk_r>:
    86fc:	2300      	movs	r3, #0
    86fe:	b570      	push	{r4, r5, r6, lr}
    8700:	4c06      	ldr	r4, [pc, #24]	; (871c <_sbrk_r+0x20>)
    8702:	0005      	movs	r5, r0
    8704:	0008      	movs	r0, r1
    8706:	6023      	str	r3, [r4, #0]
    8708:	f7f9 fe4a 	bl	23a0 <_sbrk>
    870c:	1c43      	adds	r3, r0, #1
    870e:	d103      	bne.n	8718 <_sbrk_r+0x1c>
    8710:	6823      	ldr	r3, [r4, #0]
    8712:	2b00      	cmp	r3, #0
    8714:	d000      	beq.n	8718 <_sbrk_r+0x1c>
    8716:	602b      	str	r3, [r5, #0]
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	46c0      	nop			; (mov r8, r8)
    871c:	20001418 	.word	0x20001418

00008720 <__sread>:
    8720:	b570      	push	{r4, r5, r6, lr}
    8722:	000c      	movs	r4, r1
    8724:	250e      	movs	r5, #14
    8726:	5f49      	ldrsh	r1, [r1, r5]
    8728:	f000 f8d8 	bl	88dc <_read_r>
    872c:	2800      	cmp	r0, #0
    872e:	db03      	blt.n	8738 <__sread+0x18>
    8730:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8732:	181b      	adds	r3, r3, r0
    8734:	6563      	str	r3, [r4, #84]	; 0x54
    8736:	bd70      	pop	{r4, r5, r6, pc}
    8738:	89a3      	ldrh	r3, [r4, #12]
    873a:	4a02      	ldr	r2, [pc, #8]	; (8744 <__sread+0x24>)
    873c:	4013      	ands	r3, r2
    873e:	81a3      	strh	r3, [r4, #12]
    8740:	e7f9      	b.n	8736 <__sread+0x16>
    8742:	46c0      	nop			; (mov r8, r8)
    8744:	ffffefff 	.word	0xffffefff

00008748 <__swrite>:
    8748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    874a:	001f      	movs	r7, r3
    874c:	898b      	ldrh	r3, [r1, #12]
    874e:	0005      	movs	r5, r0
    8750:	000c      	movs	r4, r1
    8752:	0016      	movs	r6, r2
    8754:	05db      	lsls	r3, r3, #23
    8756:	d505      	bpl.n	8764 <__swrite+0x1c>
    8758:	230e      	movs	r3, #14
    875a:	5ec9      	ldrsh	r1, [r1, r3]
    875c:	2200      	movs	r2, #0
    875e:	2302      	movs	r3, #2
    8760:	f000 f862 	bl	8828 <_lseek_r>
    8764:	89a3      	ldrh	r3, [r4, #12]
    8766:	4a05      	ldr	r2, [pc, #20]	; (877c <__swrite+0x34>)
    8768:	0028      	movs	r0, r5
    876a:	4013      	ands	r3, r2
    876c:	81a3      	strh	r3, [r4, #12]
    876e:	0032      	movs	r2, r6
    8770:	230e      	movs	r3, #14
    8772:	5ee1      	ldrsh	r1, [r4, r3]
    8774:	003b      	movs	r3, r7
    8776:	f000 f81f 	bl	87b8 <_write_r>
    877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    877c:	ffffefff 	.word	0xffffefff

00008780 <__sseek>:
    8780:	b570      	push	{r4, r5, r6, lr}
    8782:	000c      	movs	r4, r1
    8784:	250e      	movs	r5, #14
    8786:	5f49      	ldrsh	r1, [r1, r5]
    8788:	f000 f84e 	bl	8828 <_lseek_r>
    878c:	89a3      	ldrh	r3, [r4, #12]
    878e:	1c42      	adds	r2, r0, #1
    8790:	d103      	bne.n	879a <__sseek+0x1a>
    8792:	4a05      	ldr	r2, [pc, #20]	; (87a8 <__sseek+0x28>)
    8794:	4013      	ands	r3, r2
    8796:	81a3      	strh	r3, [r4, #12]
    8798:	bd70      	pop	{r4, r5, r6, pc}
    879a:	2280      	movs	r2, #128	; 0x80
    879c:	0152      	lsls	r2, r2, #5
    879e:	4313      	orrs	r3, r2
    87a0:	81a3      	strh	r3, [r4, #12]
    87a2:	6560      	str	r0, [r4, #84]	; 0x54
    87a4:	e7f8      	b.n	8798 <__sseek+0x18>
    87a6:	46c0      	nop			; (mov r8, r8)
    87a8:	ffffefff 	.word	0xffffefff

000087ac <__sclose>:
    87ac:	b510      	push	{r4, lr}
    87ae:	230e      	movs	r3, #14
    87b0:	5ec9      	ldrsh	r1, [r1, r3]
    87b2:	f000 f815 	bl	87e0 <_close_r>
    87b6:	bd10      	pop	{r4, pc}

000087b8 <_write_r>:
    87b8:	b570      	push	{r4, r5, r6, lr}
    87ba:	0005      	movs	r5, r0
    87bc:	0008      	movs	r0, r1
    87be:	0011      	movs	r1, r2
    87c0:	2200      	movs	r2, #0
    87c2:	4c06      	ldr	r4, [pc, #24]	; (87dc <_write_r+0x24>)
    87c4:	6022      	str	r2, [r4, #0]
    87c6:	001a      	movs	r2, r3
    87c8:	f7f9 fdc2 	bl	2350 <_write>
    87cc:	1c43      	adds	r3, r0, #1
    87ce:	d103      	bne.n	87d8 <_write_r+0x20>
    87d0:	6823      	ldr	r3, [r4, #0]
    87d2:	2b00      	cmp	r3, #0
    87d4:	d000      	beq.n	87d8 <_write_r+0x20>
    87d6:	602b      	str	r3, [r5, #0]
    87d8:	bd70      	pop	{r4, r5, r6, pc}
    87da:	46c0      	nop			; (mov r8, r8)
    87dc:	20001418 	.word	0x20001418

000087e0 <_close_r>:
    87e0:	2300      	movs	r3, #0
    87e2:	b570      	push	{r4, r5, r6, lr}
    87e4:	4c06      	ldr	r4, [pc, #24]	; (8800 <_close_r+0x20>)
    87e6:	0005      	movs	r5, r0
    87e8:	0008      	movs	r0, r1
    87ea:	6023      	str	r3, [r4, #0]
    87ec:	f7f9 fdea 	bl	23c4 <_close>
    87f0:	1c43      	adds	r3, r0, #1
    87f2:	d103      	bne.n	87fc <_close_r+0x1c>
    87f4:	6823      	ldr	r3, [r4, #0]
    87f6:	2b00      	cmp	r3, #0
    87f8:	d000      	beq.n	87fc <_close_r+0x1c>
    87fa:	602b      	str	r3, [r5, #0]
    87fc:	bd70      	pop	{r4, r5, r6, pc}
    87fe:	46c0      	nop			; (mov r8, r8)
    8800:	20001418 	.word	0x20001418

00008804 <_fstat_r>:
    8804:	2300      	movs	r3, #0
    8806:	b570      	push	{r4, r5, r6, lr}
    8808:	4c06      	ldr	r4, [pc, #24]	; (8824 <_fstat_r+0x20>)
    880a:	0005      	movs	r5, r0
    880c:	0008      	movs	r0, r1
    880e:	0011      	movs	r1, r2
    8810:	6023      	str	r3, [r4, #0]
    8812:	f7f9 fdda 	bl	23ca <_fstat>
    8816:	1c43      	adds	r3, r0, #1
    8818:	d103      	bne.n	8822 <_fstat_r+0x1e>
    881a:	6823      	ldr	r3, [r4, #0]
    881c:	2b00      	cmp	r3, #0
    881e:	d000      	beq.n	8822 <_fstat_r+0x1e>
    8820:	602b      	str	r3, [r5, #0]
    8822:	bd70      	pop	{r4, r5, r6, pc}
    8824:	20001418 	.word	0x20001418

00008828 <_lseek_r>:
    8828:	b570      	push	{r4, r5, r6, lr}
    882a:	0005      	movs	r5, r0
    882c:	0008      	movs	r0, r1
    882e:	0011      	movs	r1, r2
    8830:	2200      	movs	r2, #0
    8832:	4c06      	ldr	r4, [pc, #24]	; (884c <_lseek_r+0x24>)
    8834:	6022      	str	r2, [r4, #0]
    8836:	001a      	movs	r2, r3
    8838:	f7f9 fdcc 	bl	23d4 <_lseek>
    883c:	1c43      	adds	r3, r0, #1
    883e:	d103      	bne.n	8848 <_lseek_r+0x20>
    8840:	6823      	ldr	r3, [r4, #0]
    8842:	2b00      	cmp	r3, #0
    8844:	d000      	beq.n	8848 <_lseek_r+0x20>
    8846:	602b      	str	r3, [r5, #0]
    8848:	bd70      	pop	{r4, r5, r6, pc}
    884a:	46c0      	nop			; (mov r8, r8)
    884c:	20001418 	.word	0x20001418

00008850 <memchr>:
    8850:	b2c9      	uxtb	r1, r1
    8852:	1882      	adds	r2, r0, r2
    8854:	4290      	cmp	r0, r2
    8856:	d101      	bne.n	885c <memchr+0xc>
    8858:	2000      	movs	r0, #0
    885a:	4770      	bx	lr
    885c:	7803      	ldrb	r3, [r0, #0]
    885e:	428b      	cmp	r3, r1
    8860:	d0fb      	beq.n	885a <memchr+0xa>
    8862:	3001      	adds	r0, #1
    8864:	e7f6      	b.n	8854 <memchr+0x4>

00008866 <memmove>:
    8866:	b510      	push	{r4, lr}
    8868:	4288      	cmp	r0, r1
    886a:	d902      	bls.n	8872 <memmove+0xc>
    886c:	188b      	adds	r3, r1, r2
    886e:	4298      	cmp	r0, r3
    8870:	d308      	bcc.n	8884 <memmove+0x1e>
    8872:	2300      	movs	r3, #0
    8874:	429a      	cmp	r2, r3
    8876:	d007      	beq.n	8888 <memmove+0x22>
    8878:	5ccc      	ldrb	r4, [r1, r3]
    887a:	54c4      	strb	r4, [r0, r3]
    887c:	3301      	adds	r3, #1
    887e:	e7f9      	b.n	8874 <memmove+0xe>
    8880:	5c8b      	ldrb	r3, [r1, r2]
    8882:	5483      	strb	r3, [r0, r2]
    8884:	3a01      	subs	r2, #1
    8886:	d2fb      	bcs.n	8880 <memmove+0x1a>
    8888:	bd10      	pop	{r4, pc}

0000888a <__malloc_lock>:
    888a:	4770      	bx	lr

0000888c <__malloc_unlock>:
    888c:	4770      	bx	lr

0000888e <_realloc_r>:
    888e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8890:	0007      	movs	r7, r0
    8892:	000d      	movs	r5, r1
    8894:	0016      	movs	r6, r2
    8896:	2900      	cmp	r1, #0
    8898:	d105      	bne.n	88a6 <_realloc_r+0x18>
    889a:	0011      	movs	r1, r2
    889c:	f7ff fbe2 	bl	8064 <_malloc_r>
    88a0:	0004      	movs	r4, r0
    88a2:	0020      	movs	r0, r4
    88a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88a6:	2a00      	cmp	r2, #0
    88a8:	d103      	bne.n	88b2 <_realloc_r+0x24>
    88aa:	f7ff fb91 	bl	7fd0 <_free_r>
    88ae:	0034      	movs	r4, r6
    88b0:	e7f7      	b.n	88a2 <_realloc_r+0x14>
    88b2:	f000 f827 	bl	8904 <_malloc_usable_size_r>
    88b6:	002c      	movs	r4, r5
    88b8:	4286      	cmp	r6, r0
    88ba:	d9f2      	bls.n	88a2 <_realloc_r+0x14>
    88bc:	0031      	movs	r1, r6
    88be:	0038      	movs	r0, r7
    88c0:	f7ff fbd0 	bl	8064 <_malloc_r>
    88c4:	1e04      	subs	r4, r0, #0
    88c6:	d0ec      	beq.n	88a2 <_realloc_r+0x14>
    88c8:	0029      	movs	r1, r5
    88ca:	0032      	movs	r2, r6
    88cc:	f7ff f8d7 	bl	7a7e <memcpy>
    88d0:	0029      	movs	r1, r5
    88d2:	0038      	movs	r0, r7
    88d4:	f7ff fb7c 	bl	7fd0 <_free_r>
    88d8:	e7e3      	b.n	88a2 <_realloc_r+0x14>
	...

000088dc <_read_r>:
    88dc:	b570      	push	{r4, r5, r6, lr}
    88de:	0005      	movs	r5, r0
    88e0:	0008      	movs	r0, r1
    88e2:	0011      	movs	r1, r2
    88e4:	2200      	movs	r2, #0
    88e6:	4c06      	ldr	r4, [pc, #24]	; (8900 <_read_r+0x24>)
    88e8:	6022      	str	r2, [r4, #0]
    88ea:	001a      	movs	r2, r3
    88ec:	f7f9 fd0e 	bl	230c <_read>
    88f0:	1c43      	adds	r3, r0, #1
    88f2:	d103      	bne.n	88fc <_read_r+0x20>
    88f4:	6823      	ldr	r3, [r4, #0]
    88f6:	2b00      	cmp	r3, #0
    88f8:	d000      	beq.n	88fc <_read_r+0x20>
    88fa:	602b      	str	r3, [r5, #0]
    88fc:	bd70      	pop	{r4, r5, r6, pc}
    88fe:	46c0      	nop			; (mov r8, r8)
    8900:	20001418 	.word	0x20001418

00008904 <_malloc_usable_size_r>:
    8904:	1f0b      	subs	r3, r1, #4
    8906:	681b      	ldr	r3, [r3, #0]
    8908:	1f18      	subs	r0, r3, #4
    890a:	2b00      	cmp	r3, #0
    890c:	da01      	bge.n	8912 <_malloc_usable_size_r+0xe>
    890e:	580b      	ldr	r3, [r1, r0]
    8910:	18c0      	adds	r0, r0, r3
    8912:	4770      	bx	lr
    8914:	0000044a 	.word	0x0000044a
    8918:	00000690 	.word	0x00000690
    891c:	00000690 	.word	0x00000690
    8920:	00000690 	.word	0x00000690
    8924:	00000690 	.word	0x00000690
    8928:	00000690 	.word	0x00000690
    892c:	00000690 	.word	0x00000690
    8930:	00000690 	.word	0x00000690
    8934:	00000690 	.word	0x00000690
    8938:	00000690 	.word	0x00000690
    893c:	00000690 	.word	0x00000690
    8940:	00000690 	.word	0x00000690
    8944:	00000690 	.word	0x00000690
    8948:	00000690 	.word	0x00000690
    894c:	00000690 	.word	0x00000690
    8950:	00000690 	.word	0x00000690
    8954:	00000432 	.word	0x00000432
    8958:	00000690 	.word	0x00000690
    895c:	00000690 	.word	0x00000690
    8960:	00000690 	.word	0x00000690
    8964:	00000690 	.word	0x00000690
    8968:	00000690 	.word	0x00000690
    896c:	00000690 	.word	0x00000690
    8970:	00000690 	.word	0x00000690
    8974:	00000690 	.word	0x00000690
    8978:	00000690 	.word	0x00000690
    897c:	00000690 	.word	0x00000690
    8980:	00000690 	.word	0x00000690
    8984:	00000690 	.word	0x00000690
    8988:	00000690 	.word	0x00000690
    898c:	00000690 	.word	0x00000690
    8990:	00000690 	.word	0x00000690
    8994:	00000442 	.word	0x00000442
    8998:	00000690 	.word	0x00000690
    899c:	00000690 	.word	0x00000690
    89a0:	00000690 	.word	0x00000690
    89a4:	00000690 	.word	0x00000690
    89a8:	00000690 	.word	0x00000690
    89ac:	00000690 	.word	0x00000690
    89b0:	00000690 	.word	0x00000690
    89b4:	00000690 	.word	0x00000690
    89b8:	00000690 	.word	0x00000690
    89bc:	00000690 	.word	0x00000690
    89c0:	00000690 	.word	0x00000690
    89c4:	00000690 	.word	0x00000690
    89c8:	00000690 	.word	0x00000690
    89cc:	00000690 	.word	0x00000690
    89d0:	00000690 	.word	0x00000690
    89d4:	0000043a 	.word	0x0000043a
    89d8:	00000452 	.word	0x00000452
    89dc:	0000041a 	.word	0x0000041a
    89e0:	0000042a 	.word	0x0000042a
    89e4:	00000422 	.word	0x00000422
    89e8:	0000ffff 	.word	0x0000ffff
    89ec:	0000ffff 	.word	0x0000ffff
    89f0:	0000ffff 	.word	0x0000ffff
    89f4:	0000ffff 	.word	0x0000ffff
    89f8:	0000ffff 	.word	0x0000ffff
    89fc:	0000ffff 	.word	0x0000ffff
    8a00:	00000006 	.word	0x00000006
    8a04:	00000007 	.word	0x00000007
    8a08:	0000ffff 	.word	0x0000ffff
    8a0c:	0000ffff 	.word	0x0000ffff
    8a10:	0000ffff 	.word	0x0000ffff
    8a14:	0000ffff 	.word	0x0000ffff
    8a18:	0000ffff 	.word	0x0000ffff
    8a1c:	0000ffff 	.word	0x0000ffff
    8a20:	0000ffff 	.word	0x0000ffff
    8a24:	0000ffff 	.word	0x0000ffff
    8a28:	00000008 	.word	0x00000008
    8a2c:	00000009 	.word	0x00000009
    8a30:	0000ffff 	.word	0x0000ffff
    8a34:	0000ffff 	.word	0x0000ffff
    8a38:	42000800 	.word	0x42000800
    8a3c:	42000c00 	.word	0x42000c00
    8a40:	42001000 	.word	0x42001000
    8a44:	42001400 	.word	0x42001400
    8a48:	42001800 	.word	0x42001800
    8a4c:	42001c00 	.word	0x42001c00
    8a50:	000016f2 	.word	0x000016f2
    8a54:	000016ee 	.word	0x000016ee
    8a58:	000016ee 	.word	0x000016ee
    8a5c:	00001754 	.word	0x00001754
    8a60:	00001754 	.word	0x00001754
    8a64:	00001706 	.word	0x00001706
    8a68:	000016f8 	.word	0x000016f8
    8a6c:	0000170c 	.word	0x0000170c
    8a70:	00001742 	.word	0x00001742
    8a74:	000018d8 	.word	0x000018d8
    8a78:	000018b8 	.word	0x000018b8
    8a7c:	000018b8 	.word	0x000018b8
    8a80:	00001944 	.word	0x00001944
    8a84:	000018ca 	.word	0x000018ca
    8a88:	000018e6 	.word	0x000018e6
    8a8c:	000018bc 	.word	0x000018bc
    8a90:	000018f4 	.word	0x000018f4
    8a94:	00001934 	.word	0x00001934
    8a98:	42002c00 	.word	0x42002c00
    8a9c:	42003000 	.word	0x42003000
    8aa0:	42003400 	.word	0x42003400
    8aa4:	000030bc 	.word	0x000030bc
    8aa8:	00003206 	.word	0x00003206
    8aac:	00003094 	.word	0x00003094
    8ab0:	0000320e 	.word	0x0000320e
    8ab4:	0000309c 	.word	0x0000309c
    8ab8:	000030a4 	.word	0x000030a4
    8abc:	000030ac 	.word	0x000030ac
    8ac0:	000030b4 	.word	0x000030b4

00008ac4 <tc_interrupt_vectors.11908>:
    8ac4:	00141312 30304445 00000031 2578302d     ....ED001...-0x%
    8ad4:	00583430                                04X.

00008ad8 <_global_impure_ptr>:
    8ad8:	2000005c                                \.. 

00008adc <__sf_fake_stderr>:
	...

00008afc <__sf_fake_stdin>:
	...

00008b1c <__sf_fake_stdout>:
	...
    8b3c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8b4c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8b5c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8b6c:	00006665                                ef..

00008b70 <_init>:
    8b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b72:	46c0      	nop			; (mov r8, r8)
    8b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8b76:	bc08      	pop	{r3}
    8b78:	469e      	mov	lr, r3
    8b7a:	4770      	bx	lr

00008b7c <__init_array_start>:
    8b7c:	000000dd 	.word	0x000000dd

00008b80 <_fini>:
    8b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b82:	46c0      	nop			; (mov r8, r8)
    8b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8b86:	bc08      	pop	{r3}
    8b88:	469e      	mov	lr, r3
    8b8a:	4770      	bx	lr

00008b8c <__fini_array_start>:
    8b8c:	000000b5 	.word	0x000000b5
