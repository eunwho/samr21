
Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a8a4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  0000a8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c60  20000074  0000a918  00020074  2**2
                  ALLOC
  3 .stack        00002004  20000cd4  0000b578  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000703ce  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000b387  00000000  00000000  000904f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00018629  00000000  00000000  0009b87d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011e0  00000000  00000000  000b3ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001bd0  00000000  00000000  000b5086  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002a3ea  00000000  00000000  000b6c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002cff0  00000000  00000000  000e1040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000946bf  00000000  00000000  0010e030  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003824  00000000  00000000  001a26f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 2c 00 20 d1 56 00 00 cd 56 00 00 cd 56 00 00     .,. .V...V...V..
	...
      2c:	cd 56 00 00 00 00 00 00 00 00 00 00 cd 56 00 00     .V...........V..
      3c:	cd 56 00 00 cd 56 00 00 cd 56 00 00 cd 56 00 00     .V...V...V...V..
      4c:	cd 56 00 00 2d 41 00 00 cd 56 00 00 cd 56 00 00     .V..-A...V...V..
      5c:	cd 56 00 00 cd 56 00 00 99 46 00 00 a9 46 00 00     .V...V...F...F..
      6c:	b9 46 00 00 c9 46 00 00 d9 46 00 00 e9 46 00 00     .F...F...F...F..
      7c:	cd 56 00 00 cd 56 00 00 cd 56 00 00 ad 53 00 00     .V...V...V...S..
      8c:	bd 53 00 00 cd 53 00 00 00 00 00 00 00 00 00 00     .S...S..........
      9c:	cd 56 00 00 cd 56 00 00 00 00 00 00 cd 56 00 00     .V...V.......V..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	0000a8a4 	.word	0x0000a8a4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	0000a8a4 	.word	0x0000a8a4
     10c:	0000a8a4 	.word	0x0000a8a4
     110:	00000000 	.word	0x00000000

00000114 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     114:	b510      	push	{r4, lr}
	if (gpfIsr) {
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <chip_isr+0x10>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d000      	beq.n	120 <chip_isr+0xc>
		gpfIsr();
     11e:	4798      	blx	r3
	}
}
     120:	bd10      	pop	{r4, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	20000090 	.word	0x20000090

00000128 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     128:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     12a:	1e44      	subs	r4, r0, #1
     12c:	2800      	cmp	r0, #0
     12e:	d004      	beq.n	13a <nm_bsp_sleep+0x12>
		delay_ms(1);
     130:	4d02      	ldr	r5, [pc, #8]	; (13c <nm_bsp_sleep+0x14>)
     132:	2001      	movs	r0, #1
     134:	47a8      	blx	r5
	while (u32TimeMsec--) {
     136:	3c01      	subs	r4, #1
     138:	d2fb      	bcs.n	132 <nm_bsp_sleep+0xa>
	}
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00004025 	.word	0x00004025

00000140 <nm_bsp_reset>:
{
     140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     142:	4c07      	ldr	r4, [pc, #28]	; (160 <nm_bsp_reset+0x20>)
     144:	2780      	movs	r7, #128	; 0x80
     146:	043f      	lsls	r7, r7, #16
     148:	6167      	str	r7, [r4, #20]
     14a:	2580      	movs	r5, #128	; 0x80
     14c:	01ad      	lsls	r5, r5, #6
     14e:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     150:	2001      	movs	r0, #1
     152:	4e04      	ldr	r6, [pc, #16]	; (164 <nm_bsp_reset+0x24>)
     154:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     156:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     158:	200a      	movs	r0, #10
     15a:	47b0      	blx	r6
     15c:	61a5      	str	r5, [r4, #24]
}
     15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     160:	41004400 	.word	0x41004400
     164:	00000129 	.word	0x00000129

00000168 <nm_bsp_init>:
{
     168:	b570      	push	{r4, r5, r6, lr}
     16a:	b082      	sub	sp, #8
	gpfIsr = NULL;
     16c:	2300      	movs	r3, #0
     16e:	4a16      	ldr	r2, [pc, #88]	; (1c8 <nm_bsp_init+0x60>)
     170:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     172:	ac01      	add	r4, sp, #4
     174:	2501      	movs	r5, #1
     176:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     178:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     17a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     17c:	0021      	movs	r1, r4
     17e:	200d      	movs	r0, #13
     180:	4e12      	ldr	r6, [pc, #72]	; (1cc <nm_bsp_init+0x64>)
     182:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     184:	0021      	movs	r1, r4
     186:	2017      	movs	r0, #23
     188:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     18a:	0021      	movs	r1, r4
     18c:	201c      	movs	r0, #28
     18e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     190:	4b0f      	ldr	r3, [pc, #60]	; (1d0 <nm_bsp_init+0x68>)
     192:	2280      	movs	r2, #128	; 0x80
     194:	0412      	lsls	r2, r2, #16
     196:	615a      	str	r2, [r3, #20]
     198:	2280      	movs	r2, #128	; 0x80
     19a:	0192      	lsls	r2, r2, #6
     19c:	615a      	str	r2, [r3, #20]
    if(!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) 
     19e:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <nm_bsp_init+0x6c>)
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	421d      	tst	r5, r3
     1a4:	d003      	beq.n	1ae <nm_bsp_init+0x46>
     1a6:	4b0b      	ldr	r3, [pc, #44]	; (1d4 <nm_bsp_init+0x6c>)
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	079b      	lsls	r3, r3, #30
     1ac:	d401      	bmi.n	1b2 <nm_bsp_init+0x4a>
	    delay_init();
     1ae:	4b0a      	ldr	r3, [pc, #40]	; (1d8 <nm_bsp_init+0x70>)
     1b0:	4798      	blx	r3
	nm_bsp_reset();
     1b2:	4b0a      	ldr	r3, [pc, #40]	; (1dc <nm_bsp_init+0x74>)
     1b4:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     1b6:	2201      	movs	r2, #1
     1b8:	4b09      	ldr	r3, [pc, #36]	; (1e0 <nm_bsp_init+0x78>)
     1ba:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1c0:	b662      	cpsie	i
}
     1c2:	2000      	movs	r0, #0
     1c4:	b002      	add	sp, #8
     1c6:	bd70      	pop	{r4, r5, r6, pc}
     1c8:	20000090 	.word	0x20000090
     1cc:	00004291 	.word	0x00004291
     1d0:	41004400 	.word	0x41004400
     1d4:	e000e010 	.word	0xe000e010
     1d8:	00003fb9 	.word	0x00003fb9
     1dc:	00000141 	.word	0x00000141
     1e0:	2000000c 	.word	0x2000000c

000001e4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     1e4:	b510      	push	{r4, lr}
     1e6:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     1e8:	4b0e      	ldr	r3, [pc, #56]	; (224 <nm_bsp_register_isr+0x40>)
     1ea:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     1ec:	ac01      	add	r4, sp, #4
     1ee:	0020      	movs	r0, r4
     1f0:	4b0d      	ldr	r3, [pc, #52]	; (228 <nm_bsp_register_isr+0x44>)
     1f2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     1f4:	2316      	movs	r3, #22
     1f6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     1f8:	23b0      	movs	r3, #176	; 0xb0
     1fa:	035b      	lsls	r3, r3, #13
     1fc:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     1fe:	2301      	movs	r3, #1
     200:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     202:	3301      	adds	r3, #1
     204:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     206:	0021      	movs	r1, r4
     208:	2006      	movs	r0, #6
     20a:	4b08      	ldr	r3, [pc, #32]	; (22c <nm_bsp_register_isr+0x48>)
     20c:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     20e:	2200      	movs	r2, #0
     210:	2106      	movs	r1, #6
     212:	4807      	ldr	r0, [pc, #28]	; (230 <nm_bsp_register_isr+0x4c>)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <nm_bsp_register_isr+0x50>)
     216:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     218:	2100      	movs	r1, #0
     21a:	2006      	movs	r0, #6
     21c:	4b06      	ldr	r3, [pc, #24]	; (238 <nm_bsp_register_isr+0x54>)
     21e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     220:	b004      	add	sp, #16
     222:	bd10      	pop	{r4, pc}
     224:	20000090 	.word	0x20000090
     228:	00004205 	.word	0x00004205
     22c:	00004219 	.word	0x00004219
     230:	00000115 	.word	0x00000115
     234:	000040c1 	.word	0x000040c1
     238:	000040ed 	.word	0x000040ed

0000023c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     23c:	b510      	push	{r4, lr}
	if (u8Enable) {
     23e:	2800      	cmp	r0, #0
     240:	d104      	bne.n	24c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     242:	2100      	movs	r1, #0
     244:	2006      	movs	r0, #6
     246:	4b04      	ldr	r3, [pc, #16]	; (258 <nm_bsp_interrupt_ctrl+0x1c>)
     248:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     24a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     24c:	2100      	movs	r1, #0
     24e:	2006      	movs	r0, #6
     250:	4b02      	ldr	r3, [pc, #8]	; (25c <nm_bsp_interrupt_ctrl+0x20>)
     252:	4798      	blx	r3
     254:	e7f9      	b.n	24a <nm_bsp_interrupt_ctrl+0xe>
     256:	46c0      	nop			; (mov r8, r8)
     258:	0000410d 	.word	0x0000410d
     25c:	000040ed 	.word	0x000040ed

00000260 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     260:	b530      	push	{r4, r5, lr}
     262:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     264:	4c30      	ldr	r4, [pc, #192]	; (328 <nm_bus_init+0xc8>)
     266:	2323      	movs	r3, #35	; 0x23
     268:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     26a:	2300      	movs	r3, #0
     26c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     26e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     270:	a901      	add	r1, sp, #4
     272:	2201      	movs	r2, #1
     274:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     276:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     278:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     27a:	2023      	movs	r0, #35	; 0x23
     27c:	4b2b      	ldr	r3, [pc, #172]	; (32c <nm_bus_init+0xcc>)
     27e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     280:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     282:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     284:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     286:	2900      	cmp	r1, #0
     288:	d104      	bne.n	294 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     28a:	0953      	lsrs	r3, r2, #5
     28c:	01db      	lsls	r3, r3, #7
     28e:	4928      	ldr	r1, [pc, #160]	; (330 <nm_bus_init+0xd0>)
     290:	468c      	mov	ip, r1
     292:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     294:	211f      	movs	r1, #31
     296:	4011      	ands	r1, r2
     298:	2201      	movs	r2, #1
     29a:	0010      	movs	r0, r2
     29c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     29e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     2a0:	ac02      	add	r4, sp, #8
     2a2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     2a4:	2300      	movs	r3, #0
     2a6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     2a8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     2aa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     2ac:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     2ae:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     2b0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     2b2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     2b4:	3223      	adds	r2, #35	; 0x23
     2b6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     2b8:	3a18      	subs	r2, #24
     2ba:	2100      	movs	r1, #0
     2bc:	a808      	add	r0, sp, #32
     2be:	4b1d      	ldr	r3, [pc, #116]	; (334 <nm_bus_init+0xd4>)
     2c0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     2c2:	2380      	movs	r3, #128	; 0x80
     2c4:	025b      	lsls	r3, r3, #9
     2c6:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     2c8:	4b1b      	ldr	r3, [pc, #108]	; (338 <nm_bus_init+0xd8>)
     2ca:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     2cc:	2301      	movs	r3, #1
     2ce:	425b      	negs	r3, r3
     2d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     2d2:	4b1a      	ldr	r3, [pc, #104]	; (33c <nm_bus_init+0xdc>)
     2d4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     2d6:	4b1a      	ldr	r3, [pc, #104]	; (340 <nm_bus_init+0xe0>)
     2d8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     2da:	4b1a      	ldr	r3, [pc, #104]	; (344 <nm_bus_init+0xe4>)
     2dc:	61a3      	str	r3, [r4, #24]
	if(spi_init(&master_wifi, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) 
     2de:	0022      	movs	r2, r4
     2e0:	4919      	ldr	r1, [pc, #100]	; (348 <nm_bus_init+0xe8>)
     2e2:	481a      	ldr	r0, [pc, #104]	; (34c <nm_bus_init+0xec>)
     2e4:	4b1a      	ldr	r3, [pc, #104]	; (350 <nm_bus_init+0xf0>)
     2e6:	4798      	blx	r3
     2e8:	2800      	cmp	r0, #0
     2ea:	d11a      	bne.n	322 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2ec:	4d17      	ldr	r5, [pc, #92]	; (34c <nm_bus_init+0xec>)
     2ee:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2f0:	0020      	movs	r0, r4
     2f2:	4b18      	ldr	r3, [pc, #96]	; (354 <nm_bus_init+0xf4>)
     2f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2f6:	231f      	movs	r3, #31
     2f8:	4018      	ands	r0, r3
     2fa:	3b1e      	subs	r3, #30
     2fc:	4083      	lsls	r3, r0
     2fe:	4a16      	ldr	r2, [pc, #88]	; (358 <nm_bus_init+0xf8>)
     300:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     302:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     304:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     306:	2b00      	cmp	r3, #0
     308:	d1fc      	bne.n	304 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     30a:	6823      	ldr	r3, [r4, #0]
     30c:	2202      	movs	r2, #2
     30e:	4313      	orrs	r3, r2
     310:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master_wifi);

	nm_bsp_reset();
     312:	4b12      	ldr	r3, [pc, #72]	; (35c <nm_bus_init+0xfc>)
     314:	4798      	blx	r3
	nm_bsp_sleep(1);
     316:	2001      	movs	r0, #1
     318:	4b11      	ldr	r3, [pc, #68]	; (360 <nm_bus_init+0x100>)
     31a:	4798      	blx	r3
	
	return result;
     31c:	2000      	movs	r0, #0
}
     31e:	b011      	add	sp, #68	; 0x44
     320:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     322:	2006      	movs	r0, #6
     324:	4240      	negs	r0, r0
     326:	e7fa      	b.n	31e <nm_bus_init+0xbe>
     328:	200009b0 	.word	0x200009b0
     32c:	00004291 	.word	0x00004291
     330:	41004400 	.word	0x41004400
     334:	0000817b 	.word	0x0000817b
     338:	00220003 	.word	0x00220003
     33c:	00360003 	.word	0x00360003
     340:	00370003 	.word	0x00370003
     344:	00b71b00 	.word	0x00b71b00
     348:	42001c00 	.word	0x42001c00
     34c:	200009b4 	.word	0x200009b4
     350:	000046f9 	.word	0x000046f9
     354:	00004669 	.word	0x00004669
     358:	e000e100 	.word	0xe000e100
     35c:	00000141 	.word	0x00000141
     360:	00000129 	.word	0x00000129

00000364 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     364:	b5f0      	push	{r4, r5, r6, r7, lr}
     366:	46de      	mov	lr, fp
     368:	4657      	mov	r7, sl
     36a:	464e      	mov	r6, r9
     36c:	4645      	mov	r5, r8
     36e:	b5e0      	push	{r5, r6, r7, lr}
     370:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     372:	2803      	cmp	r0, #3
     374:	d000      	beq.n	378 <nm_bus_ioctl+0x14>
     376:	e075      	b.n	464 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     378:	680e      	ldr	r6, [r1, #0]
     37a:	684d      	ldr	r5, [r1, #4]
     37c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     37e:	2200      	movs	r2, #0
     380:	466b      	mov	r3, sp
     382:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     384:	2d00      	cmp	r5, #0
     386:	d027      	beq.n	3d8 <nm_bus_ioctl+0x74>
     388:	2c00      	cmp	r4, #0
     38a:	d065      	beq.n	458 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     38c:	2e00      	cmp	r6, #0
     38e:	d100      	bne.n	392 <nm_bus_ioctl+0x2e>
     390:	e076      	b.n	480 <nm_bus_ioctl+0x11c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     392:	2300      	movs	r3, #0
     394:	4698      	mov	r8, r3
     396:	2300      	movs	r3, #0
     398:	469b      	mov	fp, r3
	spi_select_slave(&master_wifi, &slave_inst, true);
     39a:	2201      	movs	r2, #1
     39c:	493b      	ldr	r1, [pc, #236]	; (48c <nm_bus_ioctl+0x128>)
     39e:	483c      	ldr	r0, [pc, #240]	; (490 <nm_bus_ioctl+0x12c>)
     3a0:	4b3c      	ldr	r3, [pc, #240]	; (494 <nm_bus_ioctl+0x130>)
     3a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3a4:	4b3a      	ldr	r3, [pc, #232]	; (490 <nm_bus_ioctl+0x12c>)
     3a6:	469a      	mov	sl, r3
		while(!spi_is_ready_to_write(&master_wifi));
     3a8:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master_wifi));
     3aa:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3ac:	4699      	mov	r9, r3
			pu8Miso++;
     3ae:	4659      	mov	r1, fp
     3b0:	424b      	negs	r3, r1
     3b2:	4159      	adcs	r1, r3
     3b4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     3b6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     3b8:	4653      	mov	r3, sl
     3ba:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3bc:	7e19      	ldrb	r1, [r3, #24]
		while(!spi_is_ready_to_write(&master_wifi));
     3be:	4239      	tst	r1, r7
     3c0:	d0fc      	beq.n	3bc <nm_bus_ioctl+0x58>
     3c2:	7e19      	ldrb	r1, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
     3c4:	4239      	tst	r1, r7
     3c6:	d0fc      	beq.n	3c2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     3c8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3ca:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master_wifi));
     3cc:	4211      	tst	r1, r2
     3ce:	d0fc      	beq.n	3ca <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3d0:	4649      	mov	r1, r9
     3d2:	7989      	ldrb	r1, [r1, #6]
     3d4:	468c      	mov	ip, r1
     3d6:	e011      	b.n	3fc <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     3d8:	2e00      	cmp	r6, #0
     3da:	d03a      	beq.n	452 <nm_bus_ioctl+0xee>
     3dc:	2c00      	cmp	r4, #0
     3de:	d03e      	beq.n	45e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3e0:	2300      	movs	r3, #0
     3e2:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     3e4:	3301      	adds	r3, #1
     3e6:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     3e8:	466b      	mov	r3, sp
     3ea:	1ddd      	adds	r5, r3, #7
     3ec:	e7d5      	b.n	39a <nm_bus_ioctl+0x36>
     3ee:	4660      	mov	r0, ip
     3f0:	2801      	cmp	r0, #1
     3f2:	d00d      	beq.n	410 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     3f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
     3f6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master_wifi, &rxd_data) != STATUS_OK);
     3f8:	2900      	cmp	r1, #0
     3fa:	d00d      	beq.n	418 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3fc:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     3fe:	4211      	tst	r1, r2
     400:	d0fc      	beq.n	3fc <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     402:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     404:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     406:	4210      	tst	r0, r2
     408:	d0f1      	beq.n	3ee <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     40a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     40c:	311e      	adds	r1, #30
     40e:	e7ee      	b.n	3ee <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     410:	6a98      	ldr	r0, [r3, #40]	; 0x28
     412:	05c0      	lsls	r0, r0, #23
     414:	0dc0      	lsrs	r0, r0, #23
     416:	e7ef      	b.n	3f8 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     418:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     41a:	3c01      	subs	r4, #1
     41c:	b2a4      	uxth	r4, r4
			pu8Miso++;
     41e:	445d      	add	r5, fp
			pu8Mosi++;
     420:	4643      	mov	r3, r8
     422:	4259      	negs	r1, r3
     424:	414b      	adcs	r3, r1
     426:	18f6      	adds	r6, r6, r3
	while(u16Sz) 
     428:	2c00      	cmp	r4, #0
     42a:	d1c4      	bne.n	3b6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     42c:	4b18      	ldr	r3, [pc, #96]	; (490 <nm_bus_ioctl+0x12c>)
     42e:	6819      	ldr	r1, [r3, #0]
	while(!spi_is_write_complete(&master_wifi));
     430:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     432:	7e0b      	ldrb	r3, [r1, #24]
     434:	4213      	tst	r3, r2
     436:	d0fc      	beq.n	432 <nm_bus_ioctl+0xce>
	spi_select_slave(&master_wifi, &slave_inst, false);
     438:	2200      	movs	r2, #0
     43a:	4914      	ldr	r1, [pc, #80]	; (48c <nm_bus_ioctl+0x128>)
     43c:	4814      	ldr	r0, [pc, #80]	; (490 <nm_bus_ioctl+0x12c>)
     43e:	4b15      	ldr	r3, [pc, #84]	; (494 <nm_bus_ioctl+0x130>)
     440:	4798      	blx	r3
	return M2M_SUCCESS;
     442:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     444:	b003      	add	sp, #12
     446:	bc3c      	pop	{r2, r3, r4, r5}
     448:	4690      	mov	r8, r2
     44a:	4699      	mov	r9, r3
     44c:	46a2      	mov	sl, r4
     44e:	46ab      	mov	fp, r5
     450:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     452:	200f      	movs	r0, #15
     454:	4240      	negs	r0, r0
     456:	e7f5      	b.n	444 <nm_bus_ioctl+0xe0>
     458:	200f      	movs	r0, #15
     45a:	4240      	negs	r0, r0
     45c:	e7f2      	b.n	444 <nm_bus_ioctl+0xe0>
     45e:	200f      	movs	r0, #15
     460:	4240      	negs	r0, r0
		break;
     462:	e7ef      	b.n	444 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     464:	22fd      	movs	r2, #253	; 0xfd
     466:	490c      	ldr	r1, [pc, #48]	; (498 <nm_bus_ioctl+0x134>)
     468:	480c      	ldr	r0, [pc, #48]	; (49c <nm_bus_ioctl+0x138>)
     46a:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <nm_bus_ioctl+0x13c>)
     46c:	4798      	blx	r3
     46e:	480d      	ldr	r0, [pc, #52]	; (4a4 <nm_bus_ioctl+0x140>)
     470:	4b0d      	ldr	r3, [pc, #52]	; (4a8 <nm_bus_ioctl+0x144>)
     472:	4798      	blx	r3
     474:	200d      	movs	r0, #13
     476:	4b0d      	ldr	r3, [pc, #52]	; (4ac <nm_bus_ioctl+0x148>)
     478:	4798      	blx	r3
			s8Ret = -1;
     47a:	2001      	movs	r0, #1
     47c:	4240      	negs	r0, r0
	return s8Ret;
     47e:	e7e1      	b.n	444 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     480:	2301      	movs	r3, #1
     482:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     484:	466b      	mov	r3, sp
     486:	1dde      	adds	r6, r3, #7
     488:	e785      	b.n	396 <nm_bus_ioctl+0x32>
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	200009b0 	.word	0x200009b0
     490:	200009b4 	.word	0x200009b4
     494:	000048d1 	.word	0x000048d1
     498:	00009400 	.word	0x00009400
     49c:	00009410 	.word	0x00009410
     4a0:	0000818d 	.word	0x0000818d
     4a4:	00009424 	.word	0x00009424
     4a8:	000082a9 	.word	0x000082a9
     4ac:	000081c1 	.word	0x000081c1

000004b0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     4b0:	b530      	push	{r4, r5, lr}
     4b2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     4b4:	ab01      	add	r3, sp, #4
     4b6:	2200      	movs	r2, #0
     4b8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     4ba:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     4bc:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4be:	4d13      	ldr	r5, [pc, #76]	; (50c <nm_bus_deinit+0x5c>)
     4c0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     4c2:	0020      	movs	r0, r4
     4c4:	4b12      	ldr	r3, [pc, #72]	; (510 <nm_bus_deinit+0x60>)
     4c6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4c8:	231f      	movs	r3, #31
     4ca:	4018      	ands	r0, r3
     4cc:	3b1e      	subs	r3, #30
     4ce:	4083      	lsls	r3, r0
     4d0:	2280      	movs	r2, #128	; 0x80
     4d2:	4910      	ldr	r1, [pc, #64]	; (514 <nm_bus_deinit+0x64>)
     4d4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4d6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     4d8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     4da:	2b00      	cmp	r3, #0
     4dc:	d1fc      	bne.n	4d8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     4de:	338f      	adds	r3, #143	; 0x8f
     4e0:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     4e2:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     4e4:	6823      	ldr	r3, [r4, #0]
     4e6:	2202      	movs	r2, #2
     4e8:	4393      	bics	r3, r2
     4ea:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master_wifi);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     4ec:	a901      	add	r1, sp, #4
     4ee:	2036      	movs	r0, #54	; 0x36
     4f0:	4c09      	ldr	r4, [pc, #36]	; (518 <nm_bus_deinit+0x68>)
     4f2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     4f4:	a901      	add	r1, sp, #4
     4f6:	2022      	movs	r0, #34	; 0x22
     4f8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     4fa:	a901      	add	r1, sp, #4
     4fc:	2037      	movs	r0, #55	; 0x37
     4fe:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     500:	a901      	add	r1, sp, #4
     502:	2023      	movs	r0, #35	; 0x23
     504:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     506:	2000      	movs	r0, #0
     508:	b003      	add	sp, #12
     50a:	bd30      	pop	{r4, r5, pc}
     50c:	200009b4 	.word	0x200009b4
     510:	00004669 	.word	0x00004669
     514:	e000e100 	.word	0xe000e100
     518:	00004291 	.word	0x00004291

0000051c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     51c:	2a00      	cmp	r2, #0
     51e:	d006      	beq.n	52e <m2m_memcpy+0x12>
     520:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     522:	780b      	ldrb	r3, [r1, #0]
     524:	7003      	strb	r3, [r0, #0]
		pDst++;
     526:	3001      	adds	r0, #1
		pSrc++;
     528:	3101      	adds	r1, #1
	}while(--sz);
     52a:	4290      	cmp	r0, r2
     52c:	d1f9      	bne.n	522 <m2m_memcpy+0x6>
}
     52e:	4770      	bx	lr

00000530 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     530:	2a00      	cmp	r2, #0
     532:	d004      	beq.n	53e <m2m_memset+0xe>
     534:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     536:	7001      	strb	r1, [r0, #0]
		pBuf++;
     538:	3001      	adds	r0, #1
	}while(--sz);
     53a:	4290      	cmp	r0, r2
     53c:	d1fb      	bne.n	536 <m2m_memset+0x6>
}
     53e:	4770      	bx	lr

00000540 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     540:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     542:	7802      	ldrb	r2, [r0, #0]
     544:	2a00      	cmp	r2, #0
     546:	d007      	beq.n	558 <m2m_strlen+0x18>
     548:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     54a:	3001      	adds	r0, #1
     54c:	b280      	uxth	r0, r0
		pcStr++;
     54e:	3301      	adds	r3, #1
	while(*pcStr)
     550:	781a      	ldrb	r2, [r3, #0]
     552:	2a00      	cmp	r2, #0
     554:	d1f9      	bne.n	54a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
     556:	4770      	bx	lr
	uint16	u16StrLen = 0;
     558:	2000      	movs	r0, #0
     55a:	e7fc      	b.n	556 <m2m_strlen+0x16>

0000055c <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     55c:	4a02      	ldr	r2, [pc, #8]	; (568 <isr+0xc>)
     55e:	78d3      	ldrb	r3, [r2, #3]
     560:	3301      	adds	r3, #1
     562:	b2db      	uxtb	r3, r3
     564:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     566:	4770      	bx	lr
     568:	200009f0 	.word	0x200009f0

0000056c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     56c:	4770      	bx	lr
	...

00000570 <hif_set_rx_done>:
{
     570:	b500      	push	{lr}
     572:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     574:	2200      	movs	r2, #0
     576:	4b0a      	ldr	r3, [pc, #40]	; (5a0 <hif_set_rx_done+0x30>)
     578:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     57a:	2001      	movs	r0, #1
     57c:	4b09      	ldr	r3, [pc, #36]	; (5a4 <hif_set_rx_done+0x34>)
     57e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     580:	a901      	add	r1, sp, #4
     582:	4809      	ldr	r0, [pc, #36]	; (5a8 <hif_set_rx_done+0x38>)
     584:	4b09      	ldr	r3, [pc, #36]	; (5ac <hif_set_rx_done+0x3c>)
     586:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     588:	2800      	cmp	r0, #0
     58a:	d001      	beq.n	590 <hif_set_rx_done+0x20>
}
     58c:	b003      	add	sp, #12
     58e:	bd00      	pop	{pc}
	reg |= NBIT1;
     590:	2102      	movs	r1, #2
     592:	9b01      	ldr	r3, [sp, #4]
     594:	4319      	orrs	r1, r3
     596:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     598:	4803      	ldr	r0, [pc, #12]	; (5a8 <hif_set_rx_done+0x38>)
     59a:	4b05      	ldr	r3, [pc, #20]	; (5b0 <hif_set_rx_done+0x40>)
     59c:	4798      	blx	r3
     59e:	e7f5      	b.n	58c <hif_set_rx_done+0x1c>
     5a0:	200009f0 	.word	0x200009f0
     5a4:	0000023d 	.word	0x0000023d
     5a8:	00001070 	.word	0x00001070
     5ac:	0000197d 	.word	0x0000197d
     5b0:	00001989 	.word	0x00001989

000005b4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     5b4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	
	if(gstrHifCxt.u8HifRXDone)
     5b6:	4b0c      	ldr	r3, [pc, #48]	; (5e8 <hif_chip_wake+0x34>)
     5b8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     5ba:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
     5bc:	2b00      	cmp	r3, #0
     5be:	d10d      	bne.n	5dc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     5c0:	4b09      	ldr	r3, [pc, #36]	; (5e8 <hif_chip_wake+0x34>)
     5c2:	785b      	ldrb	r3, [r3, #1]
     5c4:	2b00      	cmp	r3, #0
     5c6:	d103      	bne.n	5d0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <hif_chip_wake+0x34>)
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d106      	bne.n	5de <hif_chip_wake+0x2a>
			if(ret != M2M_SUCCESS)goto ERR1;
		}
		else;
	}
	
	gstrHifCxt.u8ChipSleep++;
     5d0:	4a05      	ldr	r2, [pc, #20]	; (5e8 <hif_chip_wake+0x34>)
     5d2:	7853      	ldrb	r3, [r2, #1]
     5d4:	3301      	adds	r3, #1
     5d6:	b2db      	uxtb	r3, r3
     5d8:	7053      	strb	r3, [r2, #1]
     5da:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     5dc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
     5de:	4b03      	ldr	r3, [pc, #12]	; (5ec <hif_chip_wake+0x38>)
     5e0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5e2:	2800      	cmp	r0, #0
     5e4:	d0f4      	beq.n	5d0 <hif_chip_wake+0x1c>
     5e6:	e7f9      	b.n	5dc <hif_chip_wake+0x28>
     5e8:	200009f0 	.word	0x200009f0
     5ec:	00001665 	.word	0x00001665

000005f0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
     5f0:	4b05      	ldr	r3, [pc, #20]	; (608 <hif_chip_sleep_sc+0x18>)
     5f2:	785b      	ldrb	r3, [r3, #1]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d004      	beq.n	602 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
     5f8:	4a03      	ldr	r2, [pc, #12]	; (608 <hif_chip_sleep_sc+0x18>)
     5fa:	7853      	ldrb	r3, [r2, #1]
     5fc:	3b01      	subs	r3, #1
     5fe:	b2db      	uxtb	r3, r3
     600:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
     602:	2000      	movs	r0, #0
     604:	4770      	bx	lr
     606:	46c0      	nop			; (mov r8, r8)
     608:	200009f0 	.word	0x200009f0

0000060c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     60c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
     60e:	4b0b      	ldr	r3, [pc, #44]	; (63c <hif_chip_sleep+0x30>)
     610:	785b      	ldrb	r3, [r3, #1]
     612:	2b00      	cmp	r3, #0
     614:	d004      	beq.n	620 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
     616:	4a09      	ldr	r2, [pc, #36]	; (63c <hif_chip_sleep+0x30>)
     618:	7853      	ldrb	r3, [r2, #1]
     61a:	3b01      	subs	r3, #1
     61c:	b2db      	uxtb	r3, r3
     61e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     620:	4b06      	ldr	r3, [pc, #24]	; (63c <hif_chip_sleep+0x30>)
     622:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
     624:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
     626:	2b00      	cmp	r3, #0
     628:	d103      	bne.n	632 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     62a:	4b04      	ldr	r3, [pc, #16]	; (63c <hif_chip_sleep+0x30>)
     62c:	781b      	ldrb	r3, [r3, #0]
     62e:	2b00      	cmp	r3, #0
     630:	d100      	bne.n	634 <hif_chip_sleep+0x28>
		}
		else;
	}
ERR1:
	return ret;
}
     632:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
     634:	4b02      	ldr	r3, [pc, #8]	; (640 <hif_chip_sleep+0x34>)
     636:	4798      	blx	r3
     638:	e7fb      	b.n	632 <hif_chip_sleep+0x26>
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	200009f0 	.word	0x200009f0
     640:	000015fd 	.word	0x000015fd

00000644 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     644:	b5f0      	push	{r4, r5, r6, r7, lr}
     646:	46de      	mov	lr, fp
     648:	4657      	mov	r7, sl
     64a:	b580      	push	{r7, lr}
     64c:	b089      	sub	sp, #36	; 0x24
     64e:	4683      	mov	fp, r0
     650:	468a      	mov	sl, r1
     652:	9201      	str	r2, [sp, #4]
     654:	9300      	str	r3, [sp, #0]
     656:	ab10      	add	r3, sp, #64	; 0x40
     658:	cb80      	ldmia	r3!, {r7}
     65a:	881e      	ldrh	r6, [r3, #0]
     65c:	ab12      	add	r3, sp, #72	; 0x48
     65e:	881d      	ldrh	r5, [r3, #0]
	sint8 ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     660:	227f      	movs	r2, #127	; 0x7f
     662:	400a      	ands	r2, r1
     664:	ab07      	add	r3, sp, #28
     666:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     668:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     66a:	2208      	movs	r2, #8
     66c:	805a      	strh	r2, [r3, #2]
	
	if(pu8DataBuf != NULL)
     66e:	2f00      	cmp	r7, #0
     670:	d03d      	beq.n	6ee <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     672:	885a      	ldrh	r2, [r3, #2]
     674:	1992      	adds	r2, r2, r6
     676:	18aa      	adds	r2, r5, r2
     678:	b292      	uxth	r2, r2
     67a:	805a      	strh	r2, [r3, #2]
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	
	ret = hif_chip_wake();
     67c:	4b69      	ldr	r3, [pc, #420]	; (824 <hif_send+0x1e0>)
     67e:	4798      	blx	r3
     680:	1e04      	subs	r4, r0, #0
	
	if(ret == M2M_SUCCESS)
     682:	d000      	beq.n	686 <hif_send+0x42>
     684:	e0c1      	b.n	80a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
     686:	2300      	movs	r3, #0
     688:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     68a:	aa02      	add	r2, sp, #8
     68c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     68e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     690:	9b04      	ldr	r3, [sp, #16]
     692:	465a      	mov	r2, fp
     694:	431a      	orrs	r2, r3
     696:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     698:	9a04      	ldr	r2, [sp, #16]
     69a:	4653      	mov	r3, sl
     69c:	021b      	lsls	r3, r3, #8
     69e:	4313      	orrs	r3, r2
     6a0:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     6a2:	ab07      	add	r3, sp, #28
     6a4:	885b      	ldrh	r3, [r3, #2]
     6a6:	9a04      	ldr	r2, [sp, #16]
     6a8:	041b      	lsls	r3, r3, #16
     6aa:	4313      	orrs	r3, r2
     6ac:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);	//
     6ae:	9904      	ldr	r1, [sp, #16]
     6b0:	485d      	ldr	r0, [pc, #372]	; (828 <hif_send+0x1e4>)
     6b2:	4b5e      	ldr	r3, [pc, #376]	; (82c <hif_send+0x1e8>)
     6b4:	4798      	blx	r3
     6b6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     6b8:	d157      	bne.n	76a <hif_send+0x126>

		reg = 0UL;
     6ba:	2300      	movs	r3, #0
     6bc:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
     6be:	9b04      	ldr	r3, [sp, #16]
     6c0:	2202      	movs	r2, #2
     6c2:	4313      	orrs	r3, r2
     6c4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     6c6:	9904      	ldr	r1, [sp, #16]
     6c8:	4859      	ldr	r0, [pc, #356]	; (830 <hif_send+0x1ec>)
     6ca:	4b58      	ldr	r3, [pc, #352]	; (82c <hif_send+0x1e8>)
     6cc:	4798      	blx	r3
     6ce:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     6d0:	d14b      	bne.n	76a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     6d2:	2200      	movs	r2, #0
     6d4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     6d6:	ab02      	add	r3, sp, #8
     6d8:	80da      	strh	r2, [r3, #6]
     6da:	3306      	adds	r3, #6
     6dc:	881b      	ldrh	r3, [r3, #0]
     6de:	b29b      	uxth	r3, r3
     6e0:	4a54      	ldr	r2, [pc, #336]	; (834 <hif_send+0x1f0>)
     6e2:	4293      	cmp	r3, r2
     6e4:	d849      	bhi.n	77a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     6e6:	4c54      	ldr	r4, [pc, #336]	; (838 <hif_send+0x1f4>)
			{
				if(cnt < 501) 
				{
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     6e8:	4b54      	ldr	r3, [pc, #336]	; (83c <hif_send+0x1f8>)
     6ea:	469a      	mov	sl, r3
     6ec:	e017      	b.n	71e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
     6ee:	ab07      	add	r3, sp, #28
     6f0:	885a      	ldrh	r2, [r3, #2]
     6f2:	9900      	ldr	r1, [sp, #0]
     6f4:	468c      	mov	ip, r1
     6f6:	4462      	add	r2, ip
     6f8:	b292      	uxth	r2, r2
     6fa:	805a      	strh	r2, [r3, #2]
     6fc:	e7be      	b.n	67c <hif_send+0x38>
				nm_bsp_sleep(1);
     6fe:	2001      	movs	r0, #1
     700:	47d0      	blx	sl
			}
			if(!(reg & NBIT1))
     702:	9b04      	ldr	r3, [sp, #16]
     704:	079b      	lsls	r3, r3, #30
     706:	d528      	bpl.n	75a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
     708:	ab02      	add	r3, sp, #8
     70a:	88da      	ldrh	r2, [r3, #6]
     70c:	3201      	adds	r2, #1
     70e:	b292      	uxth	r2, r2
     710:	80da      	strh	r2, [r3, #6]
     712:	3306      	adds	r3, #6
     714:	881b      	ldrh	r3, [r3, #0]
     716:	b29b      	uxth	r3, r3
     718:	4a46      	ldr	r2, [pc, #280]	; (834 <hif_send+0x1f0>)
     71a:	4293      	cmp	r3, r2
     71c:	d82d      	bhi.n	77a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     71e:	a904      	add	r1, sp, #16
     720:	4843      	ldr	r0, [pc, #268]	; (830 <hif_send+0x1ec>)
     722:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     724:	2800      	cmp	r0, #0
     726:	d128      	bne.n	77a <hif_send+0x136>
			if(cnt >= 500) 
     728:	ab02      	add	r3, sp, #8
     72a:	3306      	adds	r3, #6
     72c:	881b      	ldrh	r3, [r3, #0]
     72e:	b29b      	uxth	r3, r3
     730:	22f4      	movs	r2, #244	; 0xf4
     732:	32ff      	adds	r2, #255	; 0xff
     734:	4293      	cmp	r3, r2
     736:	d9e4      	bls.n	702 <hif_send+0xbe>
				if(cnt < 501) 
     738:	ab02      	add	r3, sp, #8
     73a:	3306      	adds	r3, #6
     73c:	881b      	ldrh	r3, [r3, #0]
     73e:	b29b      	uxth	r3, r3
     740:	3201      	adds	r2, #1
     742:	4293      	cmp	r3, r2
     744:	d8db      	bhi.n	6fe <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
     746:	483e      	ldr	r0, [pc, #248]	; (840 <hif_send+0x1fc>)
     748:	4b3e      	ldr	r3, [pc, #248]	; (844 <hif_send+0x200>)
     74a:	4798      	blx	r3
     74c:	483e      	ldr	r0, [pc, #248]	; (848 <hif_send+0x204>)
     74e:	4b3f      	ldr	r3, [pc, #252]	; (84c <hif_send+0x208>)
     750:	4798      	blx	r3
     752:	200d      	movs	r0, #13
     754:	4b3e      	ldr	r3, [pc, #248]	; (850 <hif_send+0x20c>)
     756:	4798      	blx	r3
     758:	e7d1      	b.n	6fe <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     75a:	a905      	add	r1, sp, #20
     75c:	483d      	ldr	r0, [pc, #244]	; (854 <hif_send+0x210>)
     75e:	4b36      	ldr	r3, [pc, #216]	; (838 <hif_send+0x1f4>)
     760:	4798      	blx	r3
     762:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) 
     764:	d009      	beq.n	77a <hif_send+0x136>
				{
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     766:	2300      	movs	r3, #0
     768:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
     76a:	4b3b      	ldr	r3, [pc, #236]	; (858 <hif_send+0x214>)
     76c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
     76e:	0020      	movs	r0, r4
     770:	b009      	add	sp, #36	; 0x24
     772:	bc0c      	pop	{r2, r3}
     774:	4692      	mov	sl, r2
     776:	469b      	mov	fp, r3
     778:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(dma_addr != 0)
     77a:	9b05      	ldr	r3, [sp, #20]
     77c:	2b00      	cmp	r3, #0
     77e:	d03f      	beq.n	800 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
     780:	9b05      	ldr	r3, [sp, #20]
     782:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     784:	a907      	add	r1, sp, #28
     786:	884b      	ldrh	r3, [r1, #2]
     788:	b29b      	uxth	r3, r3
     78a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     78c:	9806      	ldr	r0, [sp, #24]
     78e:	2208      	movs	r2, #8
     790:	4b32      	ldr	r3, [pc, #200]	; (85c <hif_send+0x218>)
     792:	4798      	blx	r3
     794:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     796:	d1e8      	bne.n	76a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     798:	9b06      	ldr	r3, [sp, #24]
     79a:	3308      	adds	r3, #8
     79c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     79e:	9b01      	ldr	r3, [sp, #4]
     7a0:	2b00      	cmp	r3, #0
     7a2:	d00b      	beq.n	7bc <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     7a4:	9806      	ldr	r0, [sp, #24]
     7a6:	9a00      	ldr	r2, [sp, #0]
     7a8:	0019      	movs	r1, r3
     7aa:	4b2c      	ldr	r3, [pc, #176]	; (85c <hif_send+0x218>)
     7ac:	4798      	blx	r3
     7ae:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7b0:	d1db      	bne.n	76a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
     7b2:	9b06      	ldr	r3, [sp, #24]
     7b4:	9a00      	ldr	r2, [sp, #0]
     7b6:	4694      	mov	ip, r2
     7b8:	4463      	add	r3, ip
     7ba:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
     7bc:	2f00      	cmp	r7, #0
     7be:	d00e      	beq.n	7de <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     7c0:	9b06      	ldr	r3, [sp, #24]
     7c2:	9a00      	ldr	r2, [sp, #0]
     7c4:	1aad      	subs	r5, r5, r2
     7c6:	18ed      	adds	r5, r5, r3
     7c8:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     7ca:	9806      	ldr	r0, [sp, #24]
     7cc:	0032      	movs	r2, r6
     7ce:	0039      	movs	r1, r7
     7d0:	4b22      	ldr	r3, [pc, #136]	; (85c <hif_send+0x218>)
     7d2:	4798      	blx	r3
     7d4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7d6:	d1c8      	bne.n	76a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
     7d8:	9b06      	ldr	r3, [sp, #24]
     7da:	18f3      	adds	r3, r6, r3
     7dc:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
     7de:	9b05      	ldr	r3, [sp, #20]
     7e0:	009b      	lsls	r3, r3, #2
     7e2:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
     7e4:	9b04      	ldr	r3, [sp, #16]
     7e6:	2202      	movs	r2, #2
     7e8:	4313      	orrs	r3, r2
     7ea:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     7ec:	9904      	ldr	r1, [sp, #16]
     7ee:	481c      	ldr	r0, [pc, #112]	; (860 <hif_send+0x21c>)
     7f0:	4b0e      	ldr	r3, [pc, #56]	; (82c <hif_send+0x1e8>)
     7f2:	4798      	blx	r3
     7f4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     7f6:	d1b8      	bne.n	76a <hif_send+0x126>
 	ret = hif_chip_sleep();
     7f8:	4b1a      	ldr	r3, [pc, #104]	; (864 <hif_send+0x220>)
     7fa:	4798      	blx	r3
     7fc:	0004      	movs	r4, r0
	return ret;
     7fe:	e7b6      	b.n	76e <hif_send+0x12a>
			ret = hif_chip_sleep();
     800:	4b18      	ldr	r3, [pc, #96]	; (864 <hif_send+0x220>)
     802:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
     804:	2403      	movs	r4, #3
     806:	4264      	negs	r4, r4
			goto ERR2;
     808:	e7b1      	b.n	76e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     80a:	229a      	movs	r2, #154	; 0x9a
     80c:	32ff      	adds	r2, #255	; 0xff
     80e:	4916      	ldr	r1, [pc, #88]	; (868 <hif_send+0x224>)
     810:	4816      	ldr	r0, [pc, #88]	; (86c <hif_send+0x228>)
     812:	4b0c      	ldr	r3, [pc, #48]	; (844 <hif_send+0x200>)
     814:	4798      	blx	r3
     816:	4816      	ldr	r0, [pc, #88]	; (870 <hif_send+0x22c>)
     818:	4b0c      	ldr	r3, [pc, #48]	; (84c <hif_send+0x208>)
     81a:	4798      	blx	r3
     81c:	200d      	movs	r0, #13
     81e:	4b0c      	ldr	r3, [pc, #48]	; (850 <hif_send+0x20c>)
     820:	4798      	blx	r3
		goto ERR2;
     822:	e7a4      	b.n	76e <hif_send+0x12a>
     824:	000005b5 	.word	0x000005b5
     828:	0000108c 	.word	0x0000108c
     82c:	00001989 	.word	0x00001989
     830:	00001078 	.word	0x00001078
     834:	000003e7 	.word	0x000003e7
     838:	0000197d 	.word	0x0000197d
     83c:	00000129 	.word	0x00000129
     840:	00009740 	.word	0x00009740
     844:	0000818d 	.word	0x0000818d
     848:	0000974c 	.word	0x0000974c
     84c:	000082a9 	.word	0x000082a9
     850:	000081c1 	.word	0x000081c1
     854:	00150400 	.word	0x00150400
     858:	000005f1 	.word	0x000005f1
     85c:	000019fd 	.word	0x000019fd
     860:	0000106c 	.word	0x0000106c
     864:	0000060d 	.word	0x0000060d
     868:	00009458 	.word	0x00009458
     86c:	00009410 	.word	0x00009410
     870:	0000975c 	.word	0x0000975c

00000874 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     874:	b5f0      	push	{r4, r5, r6, r7, lr}
     876:	46ce      	mov	lr, r9
     878:	4647      	mov	r7, r8
     87a:	b580      	push	{r7, lr}
     87c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;
	
	while(gstrHifCxt.u8Interrupt) 
     87e:	4bcf      	ldr	r3, [pc, #828]	; (bbc <hif_handle_isr+0x348>)
     880:	4698      	mov	r8, r3
	{
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
     882:	4699      	mov	r9, r3
	while(gstrHifCxt.u8Interrupt) 
     884:	e081      	b.n	98a <hif_handle_isr+0x116>
				gstrHifCxt.u32RxAddr = address;
     886:	4bcd      	ldr	r3, [pc, #820]	; (bbc <hif_handle_isr+0x348>)
     888:	9a05      	ldr	r2, [sp, #20]
     88a:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
     88c:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     88e:	af04      	add	r7, sp, #16
     890:	2204      	movs	r2, #4
     892:	0039      	movs	r1, r7
     894:	9805      	ldr	r0, [sp, #20]
     896:	4bca      	ldr	r3, [pc, #808]	; (bc0 <hif_handle_isr+0x34c>)
     898:	4798      	blx	r3
     89a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     89c:	887b      	ldrh	r3, [r7, #2]
     89e:	b29b      	uxth	r3, r3
     8a0:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
     8a2:	2800      	cmp	r0, #0
     8a4:	d134      	bne.n	910 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
     8a6:	ab04      	add	r3, sp, #16
     8a8:	885b      	ldrh	r3, [r3, #2]
     8aa:	b29b      	uxth	r3, r3
     8ac:	429d      	cmp	r5, r3
     8ae:	d004      	beq.n	8ba <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
     8b0:	ab04      	add	r3, sp, #16
     8b2:	885b      	ldrh	r3, [r3, #2]
     8b4:	1aeb      	subs	r3, r5, r3
     8b6:	2b04      	cmp	r3, #4
     8b8:	dc3a      	bgt.n	930 <hif_handle_isr+0xbc>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     8ba:	ab04      	add	r3, sp, #16
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b01      	cmp	r3, #1
     8c0:	d04f      	beq.n	962 <hif_handle_isr+0xee>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     8c2:	ab04      	add	r3, sp, #16
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	2b02      	cmp	r3, #2
     8c8:	d079      	beq.n	9be <hif_handle_isr+0x14a>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     8ca:	ab04      	add	r3, sp, #16
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b04      	cmp	r3, #4
     8d0:	d100      	bne.n	8d4 <hif_handle_isr+0x60>
     8d2:	e091      	b.n	9f8 <hif_handle_isr+0x184>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     8d4:	ab04      	add	r3, sp, #16
     8d6:	781b      	ldrb	r3, [r3, #0]
     8d8:	2b06      	cmp	r3, #6
     8da:	d100      	bne.n	8de <hif_handle_isr+0x6a>
     8dc:	e0a9      	b.n	a32 <hif_handle_isr+0x1be>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     8de:	ab04      	add	r3, sp, #16
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b07      	cmp	r3, #7
     8e4:	d100      	bne.n	8e8 <hif_handle_isr+0x74>
     8e6:	e0c1      	b.n	a6c <hif_handle_isr+0x1f8>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
     8e8:	ab04      	add	r3, sp, #16
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	2b05      	cmp	r3, #5
     8ee:	d100      	bne.n	8f2 <hif_handle_isr+0x7e>
     8f0:	e0d8      	b.n	aa4 <hif_handle_isr+0x230>
					M2M_ERR("(hif) invalid group ID\n");
     8f2:	2285      	movs	r2, #133	; 0x85
     8f4:	0092      	lsls	r2, r2, #2
     8f6:	49b3      	ldr	r1, [pc, #716]	; (bc4 <hif_handle_isr+0x350>)
     8f8:	48b3      	ldr	r0, [pc, #716]	; (bc8 <hif_handle_isr+0x354>)
     8fa:	4bb4      	ldr	r3, [pc, #720]	; (bcc <hif_handle_isr+0x358>)
     8fc:	4798      	blx	r3
     8fe:	48b4      	ldr	r0, [pc, #720]	; (bd0 <hif_handle_isr+0x35c>)
     900:	4bb4      	ldr	r3, [pc, #720]	; (bd4 <hif_handle_isr+0x360>)
     902:	4798      	blx	r3
     904:	200d      	movs	r0, #13
     906:	4bb4      	ldr	r3, [pc, #720]	; (bd8 <hif_handle_isr+0x364>)
     908:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
     90a:	2406      	movs	r4, #6
     90c:	4264      	negs	r4, r4
     90e:	e115      	b.n	b3c <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
     910:	22eb      	movs	r2, #235	; 0xeb
     912:	0052      	lsls	r2, r2, #1
     914:	49ab      	ldr	r1, [pc, #684]	; (bc4 <hif_handle_isr+0x350>)
     916:	48ac      	ldr	r0, [pc, #688]	; (bc8 <hif_handle_isr+0x354>)
     918:	4bac      	ldr	r3, [pc, #688]	; (bcc <hif_handle_isr+0x358>)
     91a:	4798      	blx	r3
     91c:	48af      	ldr	r0, [pc, #700]	; (bdc <hif_handle_isr+0x368>)
     91e:	4bad      	ldr	r3, [pc, #692]	; (bd4 <hif_handle_isr+0x360>)
     920:	4798      	blx	r3
     922:	200d      	movs	r0, #13
     924:	4bac      	ldr	r3, [pc, #688]	; (bd8 <hif_handle_isr+0x364>)
     926:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     928:	2001      	movs	r0, #1
     92a:	4bad      	ldr	r3, [pc, #692]	; (be0 <hif_handle_isr+0x36c>)
     92c:	4798      	blx	r3
     92e:	e105      	b.n	b3c <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     930:	22e0      	movs	r2, #224	; 0xe0
     932:	32ff      	adds	r2, #255	; 0xff
     934:	49a3      	ldr	r1, [pc, #652]	; (bc4 <hif_handle_isr+0x350>)
     936:	48a4      	ldr	r0, [pc, #656]	; (bc8 <hif_handle_isr+0x354>)
     938:	4ca4      	ldr	r4, [pc, #656]	; (bcc <hif_handle_isr+0x358>)
     93a:	47a0      	blx	r4
     93c:	a904      	add	r1, sp, #16
     93e:	884a      	ldrh	r2, [r1, #2]
     940:	b292      	uxth	r2, r2
     942:	780b      	ldrb	r3, [r1, #0]
     944:	b2db      	uxtb	r3, r3
     946:	7849      	ldrb	r1, [r1, #1]
     948:	9100      	str	r1, [sp, #0]
     94a:	0029      	movs	r1, r5
     94c:	48a5      	ldr	r0, [pc, #660]	; (be4 <hif_handle_isr+0x370>)
     94e:	47a0      	blx	r4
     950:	200d      	movs	r0, #13
     952:	4ba1      	ldr	r3, [pc, #644]	; (bd8 <hif_handle_isr+0x364>)
     954:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     956:	2001      	movs	r0, #1
     958:	4ba1      	ldr	r3, [pc, #644]	; (be0 <hif_handle_isr+0x36c>)
     95a:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     95c:	2406      	movs	r4, #6
     95e:	4264      	negs	r4, r4
     960:	e0ec      	b.n	b3c <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
     962:	4b96      	ldr	r3, [pc, #600]	; (bbc <hif_handle_isr+0x348>)
     964:	68db      	ldr	r3, [r3, #12]
     966:	2b00      	cmp	r3, #0
     968:	d01c      	beq.n	9a4 <hif_handle_isr+0x130>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     96a:	4b94      	ldr	r3, [pc, #592]	; (bbc <hif_handle_isr+0x348>)
     96c:	68db      	ldr	r3, [r3, #12]
     96e:	aa04      	add	r2, sp, #16
     970:	7850      	ldrb	r0, [r2, #1]
     972:	b2c0      	uxtb	r0, r0
     974:	8851      	ldrh	r1, [r2, #2]
     976:	9a05      	ldr	r2, [sp, #20]
     978:	3208      	adds	r2, #8
     97a:	3908      	subs	r1, #8
     97c:	b289      	uxth	r1, r1
     97e:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
     980:	4b8e      	ldr	r3, [pc, #568]	; (bbc <hif_handle_isr+0x348>)
     982:	789b      	ldrb	r3, [r3, #2]
     984:	2b00      	cmp	r3, #0
     986:	d000      	beq.n	98a <hif_handle_isr+0x116>
     988:	e09d      	b.n	ac6 <hif_handle_isr+0x252>
	while(gstrHifCxt.u8Interrupt) 
     98a:	4643      	mov	r3, r8
     98c:	78db      	ldrb	r3, [r3, #3]
     98e:	2b00      	cmp	r3, #0
     990:	d100      	bne.n	994 <hif_handle_isr+0x120>
     992:	e157      	b.n	c44 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
     994:	464b      	mov	r3, r9
     996:	78db      	ldrb	r3, [r3, #3]
     998:	3b01      	subs	r3, #1
     99a:	b2db      	uxtb	r3, r3
     99c:	464a      	mov	r2, r9
     99e:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     9a0:	4e91      	ldr	r6, [pc, #580]	; (be8 <hif_handle_isr+0x374>)
     9a2:	e0d6      	b.n	b52 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
     9a4:	22ec      	movs	r2, #236	; 0xec
     9a6:	32ff      	adds	r2, #255	; 0xff
     9a8:	4986      	ldr	r1, [pc, #536]	; (bc4 <hif_handle_isr+0x350>)
     9aa:	4887      	ldr	r0, [pc, #540]	; (bc8 <hif_handle_isr+0x354>)
     9ac:	4b87      	ldr	r3, [pc, #540]	; (bcc <hif_handle_isr+0x358>)
     9ae:	4798      	blx	r3
     9b0:	488e      	ldr	r0, [pc, #568]	; (bec <hif_handle_isr+0x378>)
     9b2:	4b88      	ldr	r3, [pc, #544]	; (bd4 <hif_handle_isr+0x360>)
     9b4:	4798      	blx	r3
     9b6:	200d      	movs	r0, #13
     9b8:	4b87      	ldr	r3, [pc, #540]	; (bd8 <hif_handle_isr+0x364>)
     9ba:	4798      	blx	r3
     9bc:	e7e0      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfIpCb)
     9be:	4b7f      	ldr	r3, [pc, #508]	; (bbc <hif_handle_isr+0x348>)
     9c0:	691b      	ldr	r3, [r3, #16]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d00b      	beq.n	9de <hif_handle_isr+0x16a>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9c6:	4b7d      	ldr	r3, [pc, #500]	; (bbc <hif_handle_isr+0x348>)
     9c8:	691b      	ldr	r3, [r3, #16]
     9ca:	aa04      	add	r2, sp, #16
     9cc:	7850      	ldrb	r0, [r2, #1]
     9ce:	b2c0      	uxtb	r0, r0
     9d0:	8851      	ldrh	r1, [r2, #2]
     9d2:	9a05      	ldr	r2, [sp, #20]
     9d4:	3208      	adds	r2, #8
     9d6:	3908      	subs	r1, #8
     9d8:	b289      	uxth	r1, r1
     9da:	4798      	blx	r3
     9dc:	e7d0      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Scoket callback is not registered\n");
     9de:	22f4      	movs	r2, #244	; 0xf4
     9e0:	32ff      	adds	r2, #255	; 0xff
     9e2:	4978      	ldr	r1, [pc, #480]	; (bc4 <hif_handle_isr+0x350>)
     9e4:	4878      	ldr	r0, [pc, #480]	; (bc8 <hif_handle_isr+0x354>)
     9e6:	4b79      	ldr	r3, [pc, #484]	; (bcc <hif_handle_isr+0x358>)
     9e8:	4798      	blx	r3
     9ea:	4881      	ldr	r0, [pc, #516]	; (bf0 <hif_handle_isr+0x37c>)
     9ec:	4b79      	ldr	r3, [pc, #484]	; (bd4 <hif_handle_isr+0x360>)
     9ee:	4798      	blx	r3
     9f0:	200d      	movs	r0, #13
     9f2:	4b79      	ldr	r3, [pc, #484]	; (bd8 <hif_handle_isr+0x364>)
     9f4:	4798      	blx	r3
     9f6:	e7c3      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfOtaCb)
     9f8:	4b70      	ldr	r3, [pc, #448]	; (bbc <hif_handle_isr+0x348>)
     9fa:	695b      	ldr	r3, [r3, #20]
     9fc:	2b00      	cmp	r3, #0
     9fe:	d00b      	beq.n	a18 <hif_handle_isr+0x1a4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a00:	4b6e      	ldr	r3, [pc, #440]	; (bbc <hif_handle_isr+0x348>)
     a02:	695b      	ldr	r3, [r3, #20]
     a04:	aa04      	add	r2, sp, #16
     a06:	7850      	ldrb	r0, [r2, #1]
     a08:	b2c0      	uxtb	r0, r0
     a0a:	8851      	ldrh	r1, [r2, #2]
     a0c:	9a05      	ldr	r2, [sp, #20]
     a0e:	3208      	adds	r2, #8
     a10:	3908      	subs	r1, #8
     a12:	b289      	uxth	r1, r1
     a14:	4798      	blx	r3
     a16:	e7b3      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Ota callback is not registered\n");
     a18:	22fc      	movs	r2, #252	; 0xfc
     a1a:	32ff      	adds	r2, #255	; 0xff
     a1c:	4969      	ldr	r1, [pc, #420]	; (bc4 <hif_handle_isr+0x350>)
     a1e:	486a      	ldr	r0, [pc, #424]	; (bc8 <hif_handle_isr+0x354>)
     a20:	4b6a      	ldr	r3, [pc, #424]	; (bcc <hif_handle_isr+0x358>)
     a22:	4798      	blx	r3
     a24:	4873      	ldr	r0, [pc, #460]	; (bf4 <hif_handle_isr+0x380>)
     a26:	4b6b      	ldr	r3, [pc, #428]	; (bd4 <hif_handle_isr+0x360>)
     a28:	4798      	blx	r3
     a2a:	200d      	movs	r0, #13
     a2c:	4b6a      	ldr	r3, [pc, #424]	; (bd8 <hif_handle_isr+0x364>)
     a2e:	4798      	blx	r3
     a30:	e7a6      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfCryptoCb)
     a32:	4b62      	ldr	r3, [pc, #392]	; (bbc <hif_handle_isr+0x348>)
     a34:	6a1b      	ldr	r3, [r3, #32]
     a36:	2b00      	cmp	r3, #0
     a38:	d00b      	beq.n	a52 <hif_handle_isr+0x1de>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a3a:	4b60      	ldr	r3, [pc, #384]	; (bbc <hif_handle_isr+0x348>)
     a3c:	6a1b      	ldr	r3, [r3, #32]
     a3e:	aa04      	add	r2, sp, #16
     a40:	7850      	ldrb	r0, [r2, #1]
     a42:	b2c0      	uxtb	r0, r0
     a44:	8851      	ldrh	r1, [r2, #2]
     a46:	9a05      	ldr	r2, [sp, #20]
     a48:	3208      	adds	r2, #8
     a4a:	3908      	subs	r1, #8
     a4c:	b289      	uxth	r1, r1
     a4e:	4798      	blx	r3
     a50:	e796      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Crypto callback is not registered\n");
     a52:	2281      	movs	r2, #129	; 0x81
     a54:	0092      	lsls	r2, r2, #2
     a56:	495b      	ldr	r1, [pc, #364]	; (bc4 <hif_handle_isr+0x350>)
     a58:	485b      	ldr	r0, [pc, #364]	; (bc8 <hif_handle_isr+0x354>)
     a5a:	4b5c      	ldr	r3, [pc, #368]	; (bcc <hif_handle_isr+0x358>)
     a5c:	4798      	blx	r3
     a5e:	4866      	ldr	r0, [pc, #408]	; (bf8 <hif_handle_isr+0x384>)
     a60:	4b5c      	ldr	r3, [pc, #368]	; (bd4 <hif_handle_isr+0x360>)
     a62:	4798      	blx	r3
     a64:	200d      	movs	r0, #13
     a66:	4b5c      	ldr	r3, [pc, #368]	; (bd8 <hif_handle_isr+0x364>)
     a68:	4798      	blx	r3
     a6a:	e789      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfSigmaCb)
     a6c:	4b53      	ldr	r3, [pc, #332]	; (bbc <hif_handle_isr+0x348>)
     a6e:	699b      	ldr	r3, [r3, #24]
     a70:	2b00      	cmp	r3, #0
     a72:	d00b      	beq.n	a8c <hif_handle_isr+0x218>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a74:	4b51      	ldr	r3, [pc, #324]	; (bbc <hif_handle_isr+0x348>)
     a76:	699b      	ldr	r3, [r3, #24]
     a78:	aa04      	add	r2, sp, #16
     a7a:	7850      	ldrb	r0, [r2, #1]
     a7c:	b2c0      	uxtb	r0, r0
     a7e:	8851      	ldrh	r1, [r2, #2]
     a80:	9a05      	ldr	r2, [sp, #20]
     a82:	3208      	adds	r2, #8
     a84:	3908      	subs	r1, #8
     a86:	b289      	uxth	r1, r1
     a88:	4798      	blx	r3
     a8a:	e779      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Sigma callback is not registered\n");
     a8c:	4a5b      	ldr	r2, [pc, #364]	; (bfc <hif_handle_isr+0x388>)
     a8e:	494d      	ldr	r1, [pc, #308]	; (bc4 <hif_handle_isr+0x350>)
     a90:	484d      	ldr	r0, [pc, #308]	; (bc8 <hif_handle_isr+0x354>)
     a92:	4b4e      	ldr	r3, [pc, #312]	; (bcc <hif_handle_isr+0x358>)
     a94:	4798      	blx	r3
     a96:	485a      	ldr	r0, [pc, #360]	; (c00 <hif_handle_isr+0x38c>)
     a98:	4b4e      	ldr	r3, [pc, #312]	; (bd4 <hif_handle_isr+0x360>)
     a9a:	4798      	blx	r3
     a9c:	200d      	movs	r0, #13
     a9e:	4b4e      	ldr	r3, [pc, #312]	; (bd8 <hif_handle_isr+0x364>)
     aa0:	4798      	blx	r3
     aa2:	e76d      	b.n	980 <hif_handle_isr+0x10c>
				    if(gstrHifCxt.pfSslCb)
     aa4:	4b45      	ldr	r3, [pc, #276]	; (bbc <hif_handle_isr+0x348>)
     aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     aa8:	2b00      	cmp	r3, #0
     aaa:	d100      	bne.n	aae <hif_handle_isr+0x23a>
     aac:	e768      	b.n	980 <hif_handle_isr+0x10c>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     aae:	4b43      	ldr	r3, [pc, #268]	; (bbc <hif_handle_isr+0x348>)
     ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     ab2:	aa04      	add	r2, sp, #16
     ab4:	7850      	ldrb	r0, [r2, #1]
     ab6:	b2c0      	uxtb	r0, r0
     ab8:	8851      	ldrh	r1, [r2, #2]
     aba:	9a05      	ldr	r2, [sp, #20]
     abc:	3208      	adds	r2, #8
     abe:	3908      	subs	r1, #8
     ac0:	b289      	uxth	r1, r1
     ac2:	4798      	blx	r3
     ac4:	e75c      	b.n	980 <hif_handle_isr+0x10c>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
     ac6:	4a4f      	ldr	r2, [pc, #316]	; (c04 <hif_handle_isr+0x390>)
     ac8:	493e      	ldr	r1, [pc, #248]	; (bc4 <hif_handle_isr+0x350>)
     aca:	483f      	ldr	r0, [pc, #252]	; (bc8 <hif_handle_isr+0x354>)
     acc:	4c3f      	ldr	r4, [pc, #252]	; (bcc <hif_handle_isr+0x358>)
     ace:	47a0      	blx	r4
     ad0:	ab04      	add	r3, sp, #16
     ad2:	7819      	ldrb	r1, [r3, #0]
     ad4:	b2c9      	uxtb	r1, r1
     ad6:	785a      	ldrb	r2, [r3, #1]
     ad8:	b2d2      	uxtb	r2, r2
     ada:	484b      	ldr	r0, [pc, #300]	; (c08 <hif_handle_isr+0x394>)
     adc:	47a0      	blx	r4
     ade:	200d      	movs	r0, #13
     ae0:	4b3d      	ldr	r3, [pc, #244]	; (bd8 <hif_handle_isr+0x364>)
     ae2:	4798      	blx	r3
					ret = hif_set_rx_done();
     ae4:	4b49      	ldr	r3, [pc, #292]	; (c0c <hif_handle_isr+0x398>)
     ae6:	4798      	blx	r3
     ae8:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
     aea:	d127      	bne.n	b3c <hif_handle_isr+0x2c8>
     aec:	e74d      	b.n	98a <hif_handle_isr+0x116>
				M2M_ERR("(hif) Wrong Size\n");
     aee:	4a48      	ldr	r2, [pc, #288]	; (c10 <hif_handle_isr+0x39c>)
     af0:	4934      	ldr	r1, [pc, #208]	; (bc4 <hif_handle_isr+0x350>)
     af2:	4835      	ldr	r0, [pc, #212]	; (bc8 <hif_handle_isr+0x354>)
     af4:	4b35      	ldr	r3, [pc, #212]	; (bcc <hif_handle_isr+0x358>)
     af6:	4798      	blx	r3
     af8:	4846      	ldr	r0, [pc, #280]	; (c14 <hif_handle_isr+0x3a0>)
     afa:	4b36      	ldr	r3, [pc, #216]	; (bd4 <hif_handle_isr+0x360>)
     afc:	4798      	blx	r3
     afe:	200d      	movs	r0, #13
     b00:	4b35      	ldr	r3, [pc, #212]	; (bd8 <hif_handle_isr+0x364>)
     b02:	4798      	blx	r3
				ret = M2M_ERR_RCV;
     b04:	2402      	movs	r4, #2
     b06:	4264      	negs	r4, r4
     b08:	e018      	b.n	b3c <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
     b0a:	4a43      	ldr	r2, [pc, #268]	; (c18 <hif_handle_isr+0x3a4>)
     b0c:	492d      	ldr	r1, [pc, #180]	; (bc4 <hif_handle_isr+0x350>)
     b0e:	482e      	ldr	r0, [pc, #184]	; (bc8 <hif_handle_isr+0x354>)
     b10:	4c2e      	ldr	r4, [pc, #184]	; (bcc <hif_handle_isr+0x358>)
     b12:	47a0      	blx	r4
     b14:	9903      	ldr	r1, [sp, #12]
     b16:	4841      	ldr	r0, [pc, #260]	; (c1c <hif_handle_isr+0x3a8>)
     b18:	47a0      	blx	r4
     b1a:	200d      	movs	r0, #13
     b1c:	4b2e      	ldr	r3, [pc, #184]	; (bd8 <hif_handle_isr+0x364>)
     b1e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     b20:	240c      	movs	r4, #12
     b22:	4264      	negs	r4, r4
     b24:	e00a      	b.n	b3c <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
     b26:	4a3e      	ldr	r2, [pc, #248]	; (c20 <hif_handle_isr+0x3ac>)
     b28:	4926      	ldr	r1, [pc, #152]	; (bc4 <hif_handle_isr+0x350>)
     b2a:	4827      	ldr	r0, [pc, #156]	; (bc8 <hif_handle_isr+0x354>)
     b2c:	4b27      	ldr	r3, [pc, #156]	; (bcc <hif_handle_isr+0x358>)
     b2e:	4798      	blx	r3
     b30:	483c      	ldr	r0, [pc, #240]	; (c24 <hif_handle_isr+0x3b0>)
     b32:	4b28      	ldr	r3, [pc, #160]	; (bd4 <hif_handle_isr+0x360>)
     b34:	4798      	blx	r3
     b36:	200d      	movs	r0, #13
     b38:	4b27      	ldr	r3, [pc, #156]	; (bd8 <hif_handle_isr+0x364>)
     b3a:	4798      	blx	r3
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} 
			else 
			{
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     b3c:	4a3a      	ldr	r2, [pc, #232]	; (c28 <hif_handle_isr+0x3b4>)
     b3e:	493b      	ldr	r1, [pc, #236]	; (c2c <hif_handle_isr+0x3b8>)
     b40:	4821      	ldr	r0, [pc, #132]	; (bc8 <hif_handle_isr+0x354>)
     b42:	4f22      	ldr	r7, [pc, #136]	; (bcc <hif_handle_isr+0x358>)
     b44:	47b8      	blx	r7
     b46:	0021      	movs	r1, r4
     b48:	4839      	ldr	r0, [pc, #228]	; (c30 <hif_handle_isr+0x3bc>)
     b4a:	47b8      	blx	r7
     b4c:	200d      	movs	r0, #13
     b4e:	4b22      	ldr	r3, [pc, #136]	; (bd8 <hif_handle_isr+0x364>)
     b50:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     b52:	a903      	add	r1, sp, #12
     b54:	4837      	ldr	r0, [pc, #220]	; (c34 <hif_handle_isr+0x3c0>)
     b56:	47b0      	blx	r6
     b58:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
     b5a:	d1e4      	bne.n	b26 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
     b5c:	9b03      	ldr	r3, [sp, #12]
     b5e:	07db      	lsls	r3, r3, #31
     b60:	d5d3      	bpl.n	b0a <hif_handle_isr+0x296>
			nm_bsp_interrupt_ctrl(0);
     b62:	2000      	movs	r0, #0
     b64:	4b1e      	ldr	r3, [pc, #120]	; (be0 <hif_handle_isr+0x36c>)
     b66:	4798      	blx	r3
			reg &= ~NBIT0;
     b68:	2301      	movs	r3, #1
     b6a:	9903      	ldr	r1, [sp, #12]
     b6c:	4399      	bics	r1, r3
     b6e:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     b70:	4830      	ldr	r0, [pc, #192]	; (c34 <hif_handle_isr+0x3c0>)
     b72:	4b31      	ldr	r3, [pc, #196]	; (c38 <hif_handle_isr+0x3c4>)
     b74:	4798      	blx	r3
     b76:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
     b78:	d1e0      	bne.n	b3c <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
     b7a:	2201      	movs	r2, #1
     b7c:	4b0f      	ldr	r3, [pc, #60]	; (bbc <hif_handle_isr+0x348>)
     b7e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
     b80:	9b03      	ldr	r3, [sp, #12]
     b82:	049d      	lsls	r5, r3, #18
     b84:	0d2d      	lsrs	r5, r5, #20
			if(size > 0) 
     b86:	d0b2      	beq.n	aee <hif_handle_isr+0x27a>
				uint32 address = 0;
     b88:	2300      	movs	r3, #0
     b8a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     b8c:	a905      	add	r1, sp, #20
     b8e:	482b      	ldr	r0, [pc, #172]	; (c3c <hif_handle_isr+0x3c8>)
     b90:	4b15      	ldr	r3, [pc, #84]	; (be8 <hif_handle_isr+0x374>)
     b92:	4798      	blx	r3
     b94:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     b96:	d100      	bne.n	b9a <hif_handle_isr+0x326>
     b98:	e675      	b.n	886 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     b9a:	22e6      	movs	r2, #230	; 0xe6
     b9c:	0052      	lsls	r2, r2, #1
     b9e:	4909      	ldr	r1, [pc, #36]	; (bc4 <hif_handle_isr+0x350>)
     ba0:	4809      	ldr	r0, [pc, #36]	; (bc8 <hif_handle_isr+0x354>)
     ba2:	4b0a      	ldr	r3, [pc, #40]	; (bcc <hif_handle_isr+0x358>)
     ba4:	4798      	blx	r3
     ba6:	4826      	ldr	r0, [pc, #152]	; (c40 <hif_handle_isr+0x3cc>)
     ba8:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <hif_handle_isr+0x360>)
     baa:	4798      	blx	r3
     bac:	200d      	movs	r0, #13
     bae:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <hif_handle_isr+0x364>)
     bb0:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     bb2:	2001      	movs	r0, #1
     bb4:	4b0a      	ldr	r3, [pc, #40]	; (be0 <hif_handle_isr+0x36c>)
     bb6:	4798      	blx	r3
     bb8:	e7c0      	b.n	b3c <hif_handle_isr+0x2c8>
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	200009f0 	.word	0x200009f0
     bc0:	00001995 	.word	0x00001995
     bc4:	00009464 	.word	0x00009464
     bc8:	00009410 	.word	0x00009410
     bcc:	0000818d 	.word	0x0000818d
     bd0:	000095c0 	.word	0x000095c0
     bd4:	000082a9 	.word	0x000082a9
     bd8:	000081c1 	.word	0x000081c1
     bdc:	000094bc 	.word	0x000094bc
     be0:	0000023d 	.word	0x0000023d
     be4:	000094d4 	.word	0x000094d4
     be8:	0000197d 	.word	0x0000197d
     bec:	00009514 	.word	0x00009514
     bf0:	00009534 	.word	0x00009534
     bf4:	00009558 	.word	0x00009558
     bf8:	00009578 	.word	0x00009578
     bfc:	0000020b 	.word	0x0000020b
     c00:	0000959c 	.word	0x0000959c
     c04:	0000021a 	.word	0x0000021a
     c08:	000095d8 	.word	0x000095d8
     c0c:	00000571 	.word	0x00000571
     c10:	00000221 	.word	0x00000221
     c14:	00009604 	.word	0x00009604
     c18:	00000229 	.word	0x00000229
     c1c:	00009618 	.word	0x00009618
     c20:	00000232 	.word	0x00000232
     c24:	00009634 	.word	0x00009634
     c28:	00000256 	.word	0x00000256
     c2c:	0000946c 	.word	0x0000946c
     c30:	00009658 	.word	0x00009658
     c34:	00001070 	.word	0x00001070
     c38:	00001989 	.word	0x00001989
     c3c:	00001084 	.word	0x00001084
     c40:	00009498 	.word	0x00009498
			}
		}
	}

	return ret;
}
     c44:	2000      	movs	r0, #0
     c46:	b007      	add	sp, #28
     c48:	bc0c      	pop	{r2, r3}
     c4a:	4690      	mov	r8, r2
     c4c:	4699      	mov	r9, r3
     c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c50 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     c50:	b570      	push	{r4, r5, r6, lr}
     c52:	0014      	movs	r4, r2
     c54:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     c56:	2800      	cmp	r0, #0
     c58:	d003      	beq.n	c62 <hif_receive+0x12>
     c5a:	2900      	cmp	r1, #0
     c5c:	d001      	beq.n	c62 <hif_receive+0x12>
     c5e:	2a00      	cmp	r2, #0
     c60:	d112      	bne.n	c88 <hif_receive+0x38>
	{
		if(isDone)
     c62:	2d00      	cmp	r5, #0
     c64:	d002      	beq.n	c6c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     c66:	4b27      	ldr	r3, [pc, #156]	; (d04 <hif_receive+0xb4>)
     c68:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     c6a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     c6c:	4a26      	ldr	r2, [pc, #152]	; (d08 <hif_receive+0xb8>)
     c6e:	4927      	ldr	r1, [pc, #156]	; (d0c <hif_receive+0xbc>)
     c70:	4827      	ldr	r0, [pc, #156]	; (d10 <hif_receive+0xc0>)
     c72:	4b28      	ldr	r3, [pc, #160]	; (d14 <hif_receive+0xc4>)
     c74:	4798      	blx	r3
     c76:	4828      	ldr	r0, [pc, #160]	; (d18 <hif_receive+0xc8>)
     c78:	4b28      	ldr	r3, [pc, #160]	; (d1c <hif_receive+0xcc>)
     c7a:	4798      	blx	r3
     c7c:	200d      	movs	r0, #13
     c7e:	4b28      	ldr	r3, [pc, #160]	; (d20 <hif_receive+0xd0>)
     c80:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     c82:	200c      	movs	r0, #12
     c84:	4240      	negs	r0, r0
     c86:	e7f0      	b.n	c6a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     c88:	4b26      	ldr	r3, [pc, #152]	; (d24 <hif_receive+0xd4>)
     c8a:	689b      	ldr	r3, [r3, #8]
     c8c:	429a      	cmp	r2, r3
     c8e:	d81a      	bhi.n	cc6 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     c90:	4b24      	ldr	r3, [pc, #144]	; (d24 <hif_receive+0xd4>)
     c92:	685b      	ldr	r3, [r3, #4]
     c94:	4298      	cmp	r0, r3
     c96:	d326      	bcc.n	ce6 <hif_receive+0x96>
     c98:	1886      	adds	r6, r0, r2
     c9a:	4a22      	ldr	r2, [pc, #136]	; (d24 <hif_receive+0xd4>)
     c9c:	6853      	ldr	r3, [r2, #4]
     c9e:	6892      	ldr	r2, [r2, #8]
     ca0:	189b      	adds	r3, r3, r2
     ca2:	429e      	cmp	r6, r3
     ca4:	d81f      	bhi.n	ce6 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     ca6:	0022      	movs	r2, r4
     ca8:	4b1f      	ldr	r3, [pc, #124]	; (d28 <hif_receive+0xd8>)
     caa:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     cac:	2800      	cmp	r0, #0
     cae:	d1dc      	bne.n	c6a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     cb0:	4a1c      	ldr	r2, [pc, #112]	; (d24 <hif_receive+0xd4>)
     cb2:	6853      	ldr	r3, [r2, #4]
     cb4:	6892      	ldr	r2, [r2, #8]
     cb6:	189b      	adds	r3, r3, r2
     cb8:	429e      	cmp	r6, r3
     cba:	d001      	beq.n	cc0 <hif_receive+0x70>
     cbc:	2d00      	cmp	r5, #0
     cbe:	d0d4      	beq.n	c6a <hif_receive+0x1a>
		ret = hif_set_rx_done();
     cc0:	4b10      	ldr	r3, [pc, #64]	; (d04 <hif_receive+0xb4>)
     cc2:	4798      	blx	r3
     cc4:	e7d1      	b.n	c6a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     cc6:	4a19      	ldr	r2, [pc, #100]	; (d2c <hif_receive+0xdc>)
     cc8:	4910      	ldr	r1, [pc, #64]	; (d0c <hif_receive+0xbc>)
     cca:	4811      	ldr	r0, [pc, #68]	; (d10 <hif_receive+0xc0>)
     ccc:	4d11      	ldr	r5, [pc, #68]	; (d14 <hif_receive+0xc4>)
     cce:	47a8      	blx	r5
     cd0:	4b14      	ldr	r3, [pc, #80]	; (d24 <hif_receive+0xd4>)
     cd2:	689a      	ldr	r2, [r3, #8]
     cd4:	0021      	movs	r1, r4
     cd6:	4816      	ldr	r0, [pc, #88]	; (d30 <hif_receive+0xe0>)
     cd8:	47a8      	blx	r5
     cda:	200d      	movs	r0, #13
     cdc:	4b10      	ldr	r3, [pc, #64]	; (d20 <hif_receive+0xd0>)
     cde:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     ce0:	200c      	movs	r0, #12
     ce2:	4240      	negs	r0, r0
		goto ERR1;
     ce4:	e7c1      	b.n	c6a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     ce6:	4a13      	ldr	r2, [pc, #76]	; (d34 <hif_receive+0xe4>)
     ce8:	4908      	ldr	r1, [pc, #32]	; (d0c <hif_receive+0xbc>)
     cea:	4809      	ldr	r0, [pc, #36]	; (d10 <hif_receive+0xc0>)
     cec:	4b09      	ldr	r3, [pc, #36]	; (d14 <hif_receive+0xc4>)
     cee:	4798      	blx	r3
     cf0:	4811      	ldr	r0, [pc, #68]	; (d38 <hif_receive+0xe8>)
     cf2:	4b0a      	ldr	r3, [pc, #40]	; (d1c <hif_receive+0xcc>)
     cf4:	4798      	blx	r3
     cf6:	200d      	movs	r0, #13
     cf8:	4b09      	ldr	r3, [pc, #36]	; (d20 <hif_receive+0xd0>)
     cfa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     cfc:	200c      	movs	r0, #12
     cfe:	4240      	negs	r0, r0
		goto ERR1;
     d00:	e7b3      	b.n	c6a <hif_receive+0x1a>
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000571 	.word	0x00000571
     d08:	00000277 	.word	0x00000277
     d0c:	0000947c 	.word	0x0000947c
     d10:	00009410 	.word	0x00009410
     d14:	0000818d 	.word	0x0000818d
     d18:	00009688 	.word	0x00009688
     d1c:	000082a9 	.word	0x000082a9
     d20:	000081c1 	.word	0x000081c1
     d24:	200009f0 	.word	0x200009f0
     d28:	00001995 	.word	0x00001995
     d2c:	0000027f 	.word	0x0000027f
     d30:	000096a8 	.word	0x000096a8
     d34:	00000285 	.word	0x00000285
     d38:	000096f0 	.word	0x000096f0

00000d3c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     d3c:	b570      	push	{r4, r5, r6, lr}
     d3e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     d40:	2807      	cmp	r0, #7
     d42:	d81f      	bhi.n	d84 <hif_register_cb+0x48>
     d44:	0083      	lsls	r3, r0, #2
     d46:	4a16      	ldr	r2, [pc, #88]	; (da0 <hif_register_cb+0x64>)
     d48:	58d3      	ldr	r3, [r2, r3]
     d4a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     d4c:	4b15      	ldr	r3, [pc, #84]	; (da4 <hif_register_cb+0x68>)
     d4e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     d50:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     d52:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     d54:	4b13      	ldr	r3, [pc, #76]	; (da4 <hif_register_cb+0x68>)
     d56:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
     d58:	2000      	movs	r0, #0
			break;
     d5a:	e7fa      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     d5c:	4b11      	ldr	r3, [pc, #68]	; (da4 <hif_register_cb+0x68>)
     d5e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     d60:	2000      	movs	r0, #0
			break;
     d62:	e7f6      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     d64:	4b0f      	ldr	r3, [pc, #60]	; (da4 <hif_register_cb+0x68>)
     d66:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     d68:	2000      	movs	r0, #0
			break;
     d6a:	e7f2      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     d6c:	4b0d      	ldr	r3, [pc, #52]	; (da4 <hif_register_cb+0x68>)
     d6e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     d70:	2000      	movs	r0, #0
			break;
     d72:	e7ee      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     d74:	4b0b      	ldr	r3, [pc, #44]	; (da4 <hif_register_cb+0x68>)
     d76:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     d78:	2000      	movs	r0, #0
			break;
     d7a:	e7ea      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     d7c:	4b09      	ldr	r3, [pc, #36]	; (da4 <hif_register_cb+0x68>)
     d7e:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     d80:	2000      	movs	r0, #0
			break;
     d82:	e7e6      	b.n	d52 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     d84:	4a08      	ldr	r2, [pc, #32]	; (da8 <hif_register_cb+0x6c>)
     d86:	4909      	ldr	r1, [pc, #36]	; (dac <hif_register_cb+0x70>)
     d88:	4809      	ldr	r0, [pc, #36]	; (db0 <hif_register_cb+0x74>)
     d8a:	4d0a      	ldr	r5, [pc, #40]	; (db4 <hif_register_cb+0x78>)
     d8c:	47a8      	blx	r5
     d8e:	0021      	movs	r1, r4
     d90:	4809      	ldr	r0, [pc, #36]	; (db8 <hif_register_cb+0x7c>)
     d92:	47a8      	blx	r5
     d94:	200d      	movs	r0, #13
     d96:	4b09      	ldr	r3, [pc, #36]	; (dbc <hif_register_cb+0x80>)
     d98:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     d9a:	200c      	movs	r0, #12
     d9c:	4240      	negs	r0, r0
			break;
     d9e:	e7d8      	b.n	d52 <hif_register_cb+0x16>
     da0:	00009438 	.word	0x00009438
     da4:	200009f0 	.word	0x200009f0
     da8:	000002bd 	.word	0x000002bd
     dac:	00009488 	.word	0x00009488
     db0:	00009410 	.word	0x00009410
     db4:	0000818d 	.word	0x0000818d
     db8:	00009734 	.word	0x00009734
     dbc:	000081c1 	.word	0x000081c1

00000dc0 <hif_init>:
{
     dc0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     dc2:	2228      	movs	r2, #40	; 0x28
     dc4:	2100      	movs	r1, #0
     dc6:	4806      	ldr	r0, [pc, #24]	; (de0 <hif_init+0x20>)
     dc8:	4b06      	ldr	r3, [pc, #24]	; (de4 <hif_init+0x24>)
     dca:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     dcc:	4806      	ldr	r0, [pc, #24]	; (de8 <hif_init+0x28>)
     dce:	4b07      	ldr	r3, [pc, #28]	; (dec <hif_init+0x2c>)
     dd0:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     dd2:	4907      	ldr	r1, [pc, #28]	; (df0 <hif_init+0x30>)
     dd4:	2003      	movs	r0, #3
     dd6:	4b07      	ldr	r3, [pc, #28]	; (df4 <hif_init+0x34>)
     dd8:	4798      	blx	r3
}
     dda:	2000      	movs	r0, #0
     ddc:	bd10      	pop	{r4, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	200009f0 	.word	0x200009f0
     de4:	00000531 	.word	0x00000531
     de8:	0000055d 	.word	0x0000055d
     dec:	000001e5 	.word	0x000001e5
     df0:	0000056d 	.word	0x0000056d
     df4:	00000d3d 	.word	0x00000d3d

00000df8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     df8:	b530      	push	{r4, r5, lr}
     dfa:	b09f      	sub	sp, #124	; 0x7c
     dfc:	0004      	movs	r4, r0
     dfe:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     e00:	282c      	cmp	r0, #44	; 0x2c
     e02:	d02f      	beq.n	e64 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     e04:	281b      	cmp	r0, #27
     e06:	d03d      	beq.n	e84 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     e08:	2806      	cmp	r0, #6
     e0a:	d04b      	beq.n	ea4 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     e0c:	280e      	cmp	r0, #14
     e0e:	d027      	beq.n	e60 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e10:	2832      	cmp	r0, #50	; 0x32
     e12:	d057      	beq.n	ec4 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e14:	282f      	cmp	r0, #47	; 0x2f
     e16:	d065      	beq.n	ee4 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e18:	2834      	cmp	r0, #52	; 0x34
     e1a:	d100      	bne.n	e1e <m2m_wifi_cb+0x26>
     e1c:	e077      	b.n	f0e <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     e1e:	2811      	cmp	r0, #17
     e20:	d100      	bne.n	e24 <m2m_wifi_cb+0x2c>
     e22:	e096      	b.n	f52 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     e24:	2813      	cmp	r0, #19
     e26:	d100      	bne.n	e2a <m2m_wifi_cb+0x32>
     e28:	e0ac      	b.n	f84 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     e2a:	2804      	cmp	r0, #4
     e2c:	d100      	bne.n	e30 <m2m_wifi_cb+0x38>
     e2e:	e0bb      	b.n	fa8 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     e30:	2865      	cmp	r0, #101	; 0x65
     e32:	d100      	bne.n	e36 <m2m_wifi_cb+0x3e>
     e34:	e0ca      	b.n	fcc <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     e36:	2809      	cmp	r0, #9
     e38:	d100      	bne.n	e3c <m2m_wifi_cb+0x44>
     e3a:	e0d9      	b.n	ff0 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     e3c:	282a      	cmp	r0, #42	; 0x2a
     e3e:	d100      	bne.n	e42 <m2m_wifi_cb+0x4a>
     e40:	e0e8      	b.n	1014 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     e42:	2820      	cmp	r0, #32
     e44:	d100      	bne.n	e48 <m2m_wifi_cb+0x50>
     e46:	e0f7      	b.n	1038 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     e48:	2295      	movs	r2, #149	; 0x95
     e4a:	0052      	lsls	r2, r2, #1
     e4c:	4989      	ldr	r1, [pc, #548]	; (1074 <m2m_wifi_cb+0x27c>)
     e4e:	488a      	ldr	r0, [pc, #552]	; (1078 <m2m_wifi_cb+0x280>)
     e50:	4d8a      	ldr	r5, [pc, #552]	; (107c <m2m_wifi_cb+0x284>)
     e52:	47a8      	blx	r5
     e54:	0021      	movs	r1, r4
     e56:	488a      	ldr	r0, [pc, #552]	; (1080 <m2m_wifi_cb+0x288>)
     e58:	47a8      	blx	r5
     e5a:	200d      	movs	r0, #13
     e5c:	4b89      	ldr	r3, [pc, #548]	; (1084 <m2m_wifi_cb+0x28c>)
     e5e:	4798      	blx	r3
	}
}
     e60:	b01f      	add	sp, #124	; 0x7c
     e62:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     e64:	2300      	movs	r3, #0
     e66:	2204      	movs	r2, #4
     e68:	a903      	add	r1, sp, #12
     e6a:	0028      	movs	r0, r5
     e6c:	4c86      	ldr	r4, [pc, #536]	; (1088 <m2m_wifi_cb+0x290>)
     e6e:	47a0      	blx	r4
     e70:	2800      	cmp	r0, #0
     e72:	d1f5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     e74:	4b85      	ldr	r3, [pc, #532]	; (108c <m2m_wifi_cb+0x294>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	2b00      	cmp	r3, #0
     e7a:	d0f1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     e7c:	a903      	add	r1, sp, #12
     e7e:	302c      	adds	r0, #44	; 0x2c
     e80:	4798      	blx	r3
     e82:	e7ed      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     e84:	2300      	movs	r3, #0
     e86:	2208      	movs	r2, #8
     e88:	a903      	add	r1, sp, #12
     e8a:	0028      	movs	r0, r5
     e8c:	4c7e      	ldr	r4, [pc, #504]	; (1088 <m2m_wifi_cb+0x290>)
     e8e:	47a0      	blx	r4
     e90:	2800      	cmp	r0, #0
     e92:	d1e5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     e94:	4b7d      	ldr	r3, [pc, #500]	; (108c <m2m_wifi_cb+0x294>)
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	2b00      	cmp	r3, #0
     e9a:	d0e1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     e9c:	a903      	add	r1, sp, #12
     e9e:	301b      	adds	r0, #27
     ea0:	4798      	blx	r3
     ea2:	e7dd      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     ea4:	2301      	movs	r3, #1
     ea6:	2230      	movs	r2, #48	; 0x30
     ea8:	a903      	add	r1, sp, #12
     eaa:	0028      	movs	r0, r5
     eac:	4c76      	ldr	r4, [pc, #472]	; (1088 <m2m_wifi_cb+0x290>)
     eae:	47a0      	blx	r4
     eb0:	2800      	cmp	r0, #0
     eb2:	d1d5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     eb4:	4b75      	ldr	r3, [pc, #468]	; (108c <m2m_wifi_cb+0x294>)
     eb6:	681b      	ldr	r3, [r3, #0]
     eb8:	2b00      	cmp	r3, #0
     eba:	d0d1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     ebc:	a903      	add	r1, sp, #12
     ebe:	3006      	adds	r0, #6
     ec0:	4798      	blx	r3
     ec2:	e7cd      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     ec4:	2300      	movs	r3, #0
     ec6:	2214      	movs	r2, #20
     ec8:	a903      	add	r1, sp, #12
     eca:	0028      	movs	r0, r5
     ecc:	4c6e      	ldr	r4, [pc, #440]	; (1088 <m2m_wifi_cb+0x290>)
     ece:	47a0      	blx	r4
     ed0:	2800      	cmp	r0, #0
     ed2:	d1c5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     ed4:	4b6d      	ldr	r3, [pc, #436]	; (108c <m2m_wifi_cb+0x294>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	2b00      	cmp	r3, #0
     eda:	d0c1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     edc:	a903      	add	r1, sp, #12
     ede:	3032      	adds	r0, #50	; 0x32
     ee0:	4798      	blx	r3
     ee2:	e7bd      	b.n	e60 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     ee4:	2264      	movs	r2, #100	; 0x64
     ee6:	2100      	movs	r1, #0
     ee8:	a803      	add	r0, sp, #12
     eea:	4b69      	ldr	r3, [pc, #420]	; (1090 <m2m_wifi_cb+0x298>)
     eec:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     eee:	2300      	movs	r3, #0
     ef0:	2264      	movs	r2, #100	; 0x64
     ef2:	a903      	add	r1, sp, #12
     ef4:	0028      	movs	r0, r5
     ef6:	4c64      	ldr	r4, [pc, #400]	; (1088 <m2m_wifi_cb+0x290>)
     ef8:	47a0      	blx	r4
     efa:	2800      	cmp	r0, #0
     efc:	d1b0      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     efe:	4b63      	ldr	r3, [pc, #396]	; (108c <m2m_wifi_cb+0x294>)
     f00:	681b      	ldr	r3, [r3, #0]
     f02:	2b00      	cmp	r3, #0
     f04:	d0ac      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     f06:	a903      	add	r1, sp, #12
     f08:	302f      	adds	r0, #47	; 0x2f
     f0a:	4798      	blx	r3
     f0c:	e7a8      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     f0e:	2300      	movs	r3, #0
     f10:	2204      	movs	r2, #4
     f12:	a903      	add	r1, sp, #12
     f14:	0028      	movs	r0, r5
     f16:	4c5c      	ldr	r4, [pc, #368]	; (1088 <m2m_wifi_cb+0x290>)
     f18:	47a0      	blx	r4
     f1a:	2800      	cmp	r0, #0
     f1c:	d1a0      	bne.n	e60 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     f1e:	485d      	ldr	r0, [pc, #372]	; (1094 <m2m_wifi_cb+0x29c>)
     f20:	4d56      	ldr	r5, [pc, #344]	; (107c <m2m_wifi_cb+0x284>)
     f22:	47a8      	blx	r5
     f24:	9c03      	ldr	r4, [sp, #12]
     f26:	0a23      	lsrs	r3, r4, #8
     f28:	20ff      	movs	r0, #255	; 0xff
     f2a:	4003      	ands	r3, r0
     f2c:	0c22      	lsrs	r2, r4, #16
     f2e:	4002      	ands	r2, r0
     f30:	0e21      	lsrs	r1, r4, #24
     f32:	4020      	ands	r0, r4
     f34:	9000      	str	r0, [sp, #0]
     f36:	4858      	ldr	r0, [pc, #352]	; (1098 <m2m_wifi_cb+0x2a0>)
     f38:	47a8      	blx	r5
     f3a:	200d      	movs	r0, #13
     f3c:	4b51      	ldr	r3, [pc, #324]	; (1084 <m2m_wifi_cb+0x28c>)
     f3e:	4798      	blx	r3
			if (gpfAppWifiCb)
     f40:	4b52      	ldr	r3, [pc, #328]	; (108c <m2m_wifi_cb+0x294>)
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	2b00      	cmp	r3, #0
     f46:	d100      	bne.n	f4a <m2m_wifi_cb+0x152>
     f48:	e78a      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     f4a:	2100      	movs	r1, #0
     f4c:	2034      	movs	r0, #52	; 0x34
     f4e:	4798      	blx	r3
     f50:	e786      	b.n	e60 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
     f52:	2200      	movs	r2, #0
     f54:	4b51      	ldr	r3, [pc, #324]	; (109c <m2m_wifi_cb+0x2a4>)
     f56:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     f58:	2300      	movs	r3, #0
     f5a:	3204      	adds	r2, #4
     f5c:	a903      	add	r1, sp, #12
     f5e:	0028      	movs	r0, r5
     f60:	4c49      	ldr	r4, [pc, #292]	; (1088 <m2m_wifi_cb+0x290>)
     f62:	47a0      	blx	r4
     f64:	2800      	cmp	r0, #0
     f66:	d000      	beq.n	f6a <m2m_wifi_cb+0x172>
     f68:	e77a      	b.n	e60 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
     f6a:	ab03      	add	r3, sp, #12
     f6c:	781a      	ldrb	r2, [r3, #0]
     f6e:	4b4c      	ldr	r3, [pc, #304]	; (10a0 <m2m_wifi_cb+0x2a8>)
     f70:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     f72:	4b46      	ldr	r3, [pc, #280]	; (108c <m2m_wifi_cb+0x294>)
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	2b00      	cmp	r3, #0
     f78:	d100      	bne.n	f7c <m2m_wifi_cb+0x184>
     f7a:	e771      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     f7c:	a903      	add	r1, sp, #12
     f7e:	3011      	adds	r0, #17
     f80:	4798      	blx	r3
     f82:	e76d      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     f84:	2300      	movs	r3, #0
     f86:	222c      	movs	r2, #44	; 0x2c
     f88:	a903      	add	r1, sp, #12
     f8a:	0028      	movs	r0, r5
     f8c:	4c3e      	ldr	r4, [pc, #248]	; (1088 <m2m_wifi_cb+0x290>)
     f8e:	47a0      	blx	r4
     f90:	2800      	cmp	r0, #0
     f92:	d000      	beq.n	f96 <m2m_wifi_cb+0x19e>
     f94:	e764      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f96:	4b3d      	ldr	r3, [pc, #244]	; (108c <m2m_wifi_cb+0x294>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d100      	bne.n	fa0 <m2m_wifi_cb+0x1a8>
     f9e:	e75f      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
     fa0:	a903      	add	r1, sp, #12
     fa2:	3013      	adds	r0, #19
     fa4:	4798      	blx	r3
     fa6:	e75b      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     fa8:	2300      	movs	r3, #0
     faa:	2204      	movs	r2, #4
     fac:	a91c      	add	r1, sp, #112	; 0x70
     fae:	0028      	movs	r0, r5
     fb0:	4c35      	ldr	r4, [pc, #212]	; (1088 <m2m_wifi_cb+0x290>)
     fb2:	47a0      	blx	r4
     fb4:	2800      	cmp	r0, #0
     fb6:	d000      	beq.n	fba <m2m_wifi_cb+0x1c2>
     fb8:	e752      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     fba:	4b34      	ldr	r3, [pc, #208]	; (108c <m2m_wifi_cb+0x294>)
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d100      	bne.n	fc4 <m2m_wifi_cb+0x1cc>
     fc2:	e74d      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
     fc4:	a91c      	add	r1, sp, #112	; 0x70
     fc6:	3004      	adds	r0, #4
     fc8:	4798      	blx	r3
     fca:	e749      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     fcc:	2300      	movs	r3, #0
     fce:	2204      	movs	r2, #4
     fd0:	a91c      	add	r1, sp, #112	; 0x70
     fd2:	0028      	movs	r0, r5
     fd4:	4c2c      	ldr	r4, [pc, #176]	; (1088 <m2m_wifi_cb+0x290>)
     fd6:	47a0      	blx	r4
     fd8:	2800      	cmp	r0, #0
     fda:	d000      	beq.n	fde <m2m_wifi_cb+0x1e6>
     fdc:	e740      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     fde:	4b2b      	ldr	r3, [pc, #172]	; (108c <m2m_wifi_cb+0x294>)
     fe0:	681b      	ldr	r3, [r3, #0]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d100      	bne.n	fe8 <m2m_wifi_cb+0x1f0>
     fe6:	e73b      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
     fe8:	a91c      	add	r1, sp, #112	; 0x70
     fea:	3065      	adds	r0, #101	; 0x65
     fec:	4798      	blx	r3
     fee:	e737      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
     ff0:	2301      	movs	r3, #1
     ff2:	2264      	movs	r2, #100	; 0x64
     ff4:	a903      	add	r1, sp, #12
     ff6:	0028      	movs	r0, r5
     ff8:	4c23      	ldr	r4, [pc, #140]	; (1088 <m2m_wifi_cb+0x290>)
     ffa:	47a0      	blx	r4
     ffc:	2800      	cmp	r0, #0
     ffe:	d000      	beq.n	1002 <m2m_wifi_cb+0x20a>
    1000:	e72e      	b.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1002:	4b22      	ldr	r3, [pc, #136]	; (108c <m2m_wifi_cb+0x294>)
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	2b00      	cmp	r3, #0
    1008:	d100      	bne.n	100c <m2m_wifi_cb+0x214>
    100a:	e729      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    100c:	a903      	add	r1, sp, #12
    100e:	3009      	adds	r0, #9
    1010:	4798      	blx	r3
    1012:	e725      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1014:	2301      	movs	r3, #1
    1016:	2204      	movs	r2, #4
    1018:	a903      	add	r1, sp, #12
    101a:	0028      	movs	r0, r5
    101c:	4c1a      	ldr	r4, [pc, #104]	; (1088 <m2m_wifi_cb+0x290>)
    101e:	47a0      	blx	r4
    1020:	2800      	cmp	r0, #0
    1022:	d000      	beq.n	1026 <m2m_wifi_cb+0x22e>
    1024:	e71c      	b.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1026:	4b19      	ldr	r3, [pc, #100]	; (108c <m2m_wifi_cb+0x294>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d100      	bne.n	1030 <m2m_wifi_cb+0x238>
    102e:	e717      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1030:	a903      	add	r1, sp, #12
    1032:	302a      	adds	r0, #42	; 0x2a
    1034:	4798      	blx	r3
    1036:	e713      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1038:	2300      	movs	r3, #0
    103a:	2208      	movs	r2, #8
    103c:	a903      	add	r1, sp, #12
    103e:	0028      	movs	r0, r5
    1040:	4c11      	ldr	r4, [pc, #68]	; (1088 <m2m_wifi_cb+0x290>)
    1042:	47a0      	blx	r4
    1044:	2800      	cmp	r0, #0
    1046:	d000      	beq.n	104a <m2m_wifi_cb+0x252>
    1048:	e70a      	b.n	e60 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    104a:	ab03      	add	r3, sp, #12
    104c:	889a      	ldrh	r2, [r3, #4]
    104e:	0028      	movs	r0, r5
    1050:	3008      	adds	r0, #8
    1052:	2301      	movs	r3, #1
    1054:	9903      	ldr	r1, [sp, #12]
    1056:	4c0c      	ldr	r4, [pc, #48]	; (1088 <m2m_wifi_cb+0x290>)
    1058:	47a0      	blx	r4
    105a:	2800      	cmp	r0, #0
    105c:	d000      	beq.n	1060 <m2m_wifi_cb+0x268>
    105e:	e6ff      	b.n	e60 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    1060:	4b0a      	ldr	r3, [pc, #40]	; (108c <m2m_wifi_cb+0x294>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	2b00      	cmp	r3, #0
    1066:	d100      	bne.n	106a <m2m_wifi_cb+0x272>
    1068:	e6fa      	b.n	e60 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    106a:	a903      	add	r1, sp, #12
    106c:	3020      	adds	r0, #32
    106e:	4798      	blx	r3
    1070:	e6f6      	b.n	e60 <m2m_wifi_cb+0x68>
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00009778 	.word	0x00009778
    1078:	00009410 	.word	0x00009410
    107c:	0000818d 	.word	0x0000818d
    1080:	000097c8 	.word	0x000097c8
    1084:	000081c1 	.word	0x000081c1
    1088:	00000c51 	.word	0x00000c51
    108c:	20000094 	.word	0x20000094
    1090:	00000531 	.word	0x00000531
    1094:	00009740 	.word	0x00009740
    1098:	000097a8 	.word	0x000097a8
    109c:	20000099 	.word	0x20000099
    10a0:	20000098 	.word	0x20000098

000010a4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    10a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a6:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    10a8:	2201      	movs	r2, #1
    10aa:	230f      	movs	r3, #15
    10ac:	446b      	add	r3, sp
    10ae:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) 
    10b0:	2800      	cmp	r0, #0
    10b2:	d061      	beq.n	1178 <m2m_wifi_init+0xd4>
	{
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    10b4:	6802      	ldr	r2, [r0, #0]
    10b6:	4b32      	ldr	r3, [pc, #200]	; (1180 <m2m_wifi_init+0xdc>)
    10b8:	601a      	str	r2, [r3, #0]
#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
*/

	gu8scanInProgress = 0;
    10ba:	2200      	movs	r2, #0
    10bc:	4b31      	ldr	r3, [pc, #196]	; (1184 <m2m_wifi_init+0xe0>)
    10be:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    10c0:	200f      	movs	r0, #15
    10c2:	4468      	add	r0, sp
    10c4:	4b30      	ldr	r3, [pc, #192]	; (1188 <m2m_wifi_init+0xe4>)
    10c6:	4798      	blx	r3
    10c8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    10ca:	d002      	beq.n	10d2 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    10cc:	0020      	movs	r0, r4
    10ce:	b00f      	add	sp, #60	; 0x3c
    10d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    10d2:	2000      	movs	r0, #0
    10d4:	4b2d      	ldr	r3, [pc, #180]	; (118c <m2m_wifi_init+0xe8>)
    10d6:	4798      	blx	r3
    10d8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    10da:	d149      	bne.n	1170 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    10dc:	492c      	ldr	r1, [pc, #176]	; (1190 <m2m_wifi_init+0xec>)
    10de:	2001      	movs	r0, #1
    10e0:	4b2c      	ldr	r3, [pc, #176]	; (1194 <m2m_wifi_init+0xf0>)
    10e2:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    10e4:	ae04      	add	r6, sp, #16
    10e6:	0030      	movs	r0, r6
    10e8:	4b2b      	ldr	r3, [pc, #172]	; (1198 <m2m_wifi_init+0xf4>)
    10ea:	4798      	blx	r3
    10ec:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    10ee:	482b      	ldr	r0, [pc, #172]	; (119c <m2m_wifi_init+0xf8>)
    10f0:	4d2b      	ldr	r5, [pc, #172]	; (11a0 <m2m_wifi_init+0xfc>)
    10f2:	47a8      	blx	r5
    10f4:	79b3      	ldrb	r3, [r6, #6]
    10f6:	7972      	ldrb	r2, [r6, #5]
    10f8:	7931      	ldrb	r1, [r6, #4]
    10fa:	8c30      	ldrh	r0, [r6, #32]
    10fc:	9000      	str	r0, [sp, #0]
    10fe:	4829      	ldr	r0, [pc, #164]	; (11a4 <m2m_wifi_init+0x100>)
    1100:	47a8      	blx	r5
    1102:	200d      	movs	r0, #13
    1104:	4f28      	ldr	r7, [pc, #160]	; (11a8 <m2m_wifi_init+0x104>)
    1106:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1108:	4824      	ldr	r0, [pc, #144]	; (119c <m2m_wifi_init+0xf8>)
    110a:	47a8      	blx	r5
    110c:	2226      	movs	r2, #38	; 0x26
    110e:	446a      	add	r2, sp
    1110:	211a      	movs	r1, #26
    1112:	4469      	add	r1, sp
    1114:	4825      	ldr	r0, [pc, #148]	; (11ac <m2m_wifi_init+0x108>)
    1116:	47a8      	blx	r5
    1118:	200d      	movs	r0, #13
    111a:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    111c:	481f      	ldr	r0, [pc, #124]	; (119c <m2m_wifi_init+0xf8>)
    111e:	47a8      	blx	r5
    1120:	7a73      	ldrb	r3, [r6, #9]
    1122:	7a32      	ldrb	r2, [r6, #8]
    1124:	79f1      	ldrb	r1, [r6, #7]
    1126:	4822      	ldr	r0, [pc, #136]	; (11b0 <m2m_wifi_init+0x10c>)
    1128:	47a8      	blx	r5
    112a:	200d      	movs	r0, #13
    112c:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    112e:	481b      	ldr	r0, [pc, #108]	; (119c <m2m_wifi_init+0xf8>)
    1130:	47a8      	blx	r5
    1132:	2302      	movs	r3, #2
    1134:	2205      	movs	r2, #5
    1136:	2113      	movs	r1, #19
    1138:	481e      	ldr	r0, [pc, #120]	; (11b4 <m2m_wifi_init+0x110>)
    113a:	47a8      	blx	r5
    113c:	200d      	movs	r0, #13
    113e:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1140:	4816      	ldr	r0, [pc, #88]	; (119c <m2m_wifi_init+0xf8>)
    1142:	47a8      	blx	r5
    1144:	4a1c      	ldr	r2, [pc, #112]	; (11b8 <m2m_wifi_init+0x114>)
    1146:	491d      	ldr	r1, [pc, #116]	; (11bc <m2m_wifi_init+0x118>)
    1148:	481d      	ldr	r0, [pc, #116]	; (11c0 <m2m_wifi_init+0x11c>)
    114a:	47a8      	blx	r5
    114c:	200d      	movs	r0, #13
    114e:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1150:	0023      	movs	r3, r4
    1152:	330d      	adds	r3, #13
    1154:	d1ba      	bne.n	10cc <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    1156:	22f8      	movs	r2, #248	; 0xf8
    1158:	0052      	lsls	r2, r2, #1
    115a:	491a      	ldr	r1, [pc, #104]	; (11c4 <m2m_wifi_init+0x120>)
    115c:	481a      	ldr	r0, [pc, #104]	; (11c8 <m2m_wifi_init+0x124>)
    115e:	4b10      	ldr	r3, [pc, #64]	; (11a0 <m2m_wifi_init+0xfc>)
    1160:	4798      	blx	r3
    1162:	481a      	ldr	r0, [pc, #104]	; (11cc <m2m_wifi_init+0x128>)
    1164:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <m2m_wifi_init+0x12c>)
    1166:	4798      	blx	r3
    1168:	200d      	movs	r0, #13
    116a:	4b0f      	ldr	r3, [pc, #60]	; (11a8 <m2m_wifi_init+0x104>)
    116c:	4798      	blx	r3
    116e:	e7ad      	b.n	10cc <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    1170:	2000      	movs	r0, #0
    1172:	4b18      	ldr	r3, [pc, #96]	; (11d4 <m2m_wifi_init+0x130>)
    1174:	4798      	blx	r3
    1176:	e7a9      	b.n	10cc <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1178:	240c      	movs	r4, #12
    117a:	4264      	negs	r4, r4
    117c:	e7a6      	b.n	10cc <m2m_wifi_init+0x28>
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	20000094 	.word	0x20000094
    1184:	20000099 	.word	0x20000099
    1188:	00001b49 	.word	0x00001b49
    118c:	00000dc1 	.word	0x00000dc1
    1190:	00000df9 	.word	0x00000df9
    1194:	00000d3d 	.word	0x00000d3d
    1198:	00001a65 	.word	0x00001a65
    119c:	00009740 	.word	0x00009740
    11a0:	0000818d 	.word	0x0000818d
    11a4:	00009884 	.word	0x00009884
    11a8:	000081c1 	.word	0x000081c1
    11ac:	000098ac 	.word	0x000098ac
    11b0:	000098c8 	.word	0x000098c8
    11b4:	000098ec 	.word	0x000098ec
    11b8:	00009904 	.word	0x00009904
    11bc:	00009910 	.word	0x00009910
    11c0:	0000991c 	.word	0x0000991c
    11c4:	00009784 	.word	0x00009784
    11c8:	00009410 	.word	0x00009410
    11cc:	00009934 	.word	0x00009934
    11d0:	000082a9 	.word	0x000082a9
    11d4:	00001c1d 	.word	0x00001c1d

000011d8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    11d8:	b510      	push	{r4, lr}
	return hif_handle_isr();
    11da:	4b01      	ldr	r3, [pc, #4]	; (11e0 <m2m_wifi_handle_events+0x8>)
    11dc:	4798      	blx	r3
}
    11de:	bd10      	pop	{r4, pc}
    11e0:	00000875 	.word	0x00000875

000011e4 <m2m_wifi_connect_sc>:
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    11e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e6:	46ce      	mov	lr, r9
    11e8:	4647      	mov	r7, r8
    11ea:	b580      	push	{r7, lr}
    11ec:	b0a3      	sub	sp, #140	; 0x8c
    11ee:	9005      	str	r0, [sp, #20]
    11f0:	000c      	movs	r4, r1
    11f2:	0015      	movs	r5, r2
    11f4:	001f      	movs	r7, r3
    11f6:	ab2a      	add	r3, sp, #168	; 0xa8
    11f8:	881b      	ldrh	r3, [r3, #0]
    11fa:	4699      	mov	r9, r3
    11fc:	ab2b      	add	r3, sp, #172	; 0xac
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1202:	2a01      	cmp	r2, #1
    1204:	d003      	beq.n	120e <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    1206:	2f00      	cmp	r7, #0
    1208:	d040      	beq.n	128c <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    120a:	2a02      	cmp	r2, #2
    120c:	d04c      	beq.n	12a8 <m2m_wifi_connect_sc+0xc4>
				i++;
			}
		}
	}
	
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    120e:	1e63      	subs	r3, r4, #1
    1210:	2b1f      	cmp	r3, #31
    1212:	d900      	bls.n	1216 <m2m_wifi_connect_sc+0x32>
    1214:	e078      	b.n	1308 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1216:	464b      	mov	r3, r9
    1218:	3b01      	subs	r3, #1
    121a:	b29b      	uxth	r3, r3
    121c:	2b0d      	cmp	r3, #13
    121e:	d903      	bls.n	1228 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1220:	464b      	mov	r3, r9
    1222:	2bff      	cmp	r3, #255	; 0xff
    1224:	d000      	beq.n	1228 <m2m_wifi_connect_sc+0x44>
    1226:	e07d      	b.n	1324 <m2m_wifi_connect_sc+0x140>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
	}

	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1228:	ae07      	add	r6, sp, #28
    122a:	0022      	movs	r2, r4
    122c:	9905      	ldr	r1, [sp, #20]
    122e:	205a      	movs	r0, #90	; 0x5a
    1230:	ab02      	add	r3, sp, #8
    1232:	469c      	mov	ip, r3
    1234:	4460      	add	r0, ip
    1236:	4b78      	ldr	r3, [pc, #480]	; (1418 <m2m_wifi_connect_sc+0x234>)
    1238:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen] = 0;
    123a:	1934      	adds	r4, r6, r4
    123c:	3446      	adds	r4, #70	; 0x46
    123e:	2300      	movs	r3, #0
    1240:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch = NM_BSP_B_L_16(u16Ch);
    1242:	3344      	adds	r3, #68	; 0x44
    1244:	464a      	mov	r2, r9
    1246:	52f2      	strh	r2, [r6, r3]
	
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred = u8NoSaveCred ? 1:0;
    1248:	4643      	mov	r3, r8
    124a:	1e5a      	subs	r2, r3, #1
    124c:	4193      	sbcs	r3, r2
    124e:	2267      	movs	r2, #103	; 0x67
    1250:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType	= u8SecType;
    1252:	2341      	movs	r3, #65	; 0x41
    1254:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1256:	2d03      	cmp	r5, #3
    1258:	d100      	bne.n	125c <m2m_wifi_connect_sc+0x78>
    125a:	e071      	b.n	1340 <m2m_wifi_connect_sc+0x15c>
			goto ERR1;
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
	}
	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    125c:	2d02      	cmp	r5, #2
    125e:	d100      	bne.n	1262 <m2m_wifi_connect_sc+0x7e>
    1260:	e0aa      	b.n	13b8 <m2m_wifi_connect_sc+0x1d4>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1262:	2d04      	cmp	r5, #4
    1264:	d100      	bne.n	1268 <m2m_wifi_connect_sc+0x84>
    1266:	e0c2      	b.n	13ee <m2m_wifi_connect_sc+0x20a>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN);
    1268:	2d01      	cmp	r5, #1
    126a:	d000      	beq.n	126e <m2m_wifi_connect_sc+0x8a>
    126c:	e0c5      	b.n	13fa <m2m_wifi_connect_sc+0x216>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    126e:	2300      	movs	r3, #0
    1270:	9302      	str	r3, [sp, #8]
    1272:	9301      	str	r3, [sp, #4]
    1274:	9300      	str	r3, [sp, #0]
    1276:	336c      	adds	r3, #108	; 0x6c
    1278:	aa07      	add	r2, sp, #28
    127a:	2128      	movs	r1, #40	; 0x28
    127c:	2001      	movs	r0, #1
    127e:	4c67      	ldr	r4, [pc, #412]	; (141c <m2m_wifi_connect_sc+0x238>)
    1280:	47a0      	blx	r4

ERR1:
	return ret;
}
    1282:	b023      	add	sp, #140	; 0x8c
    1284:	bc0c      	pop	{r2, r3}
    1286:	4690      	mov	r8, r2
    1288:	4699      	mov	r9, r3
    128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    128c:	4a64      	ldr	r2, [pc, #400]	; (1420 <m2m_wifi_connect_sc+0x23c>)
    128e:	4965      	ldr	r1, [pc, #404]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1290:	4865      	ldr	r0, [pc, #404]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1292:	4b66      	ldr	r3, [pc, #408]	; (142c <m2m_wifi_connect_sc+0x248>)
    1294:	4798      	blx	r3
    1296:	4866      	ldr	r0, [pc, #408]	; (1430 <m2m_wifi_connect_sc+0x24c>)
    1298:	4b66      	ldr	r3, [pc, #408]	; (1434 <m2m_wifi_connect_sc+0x250>)
    129a:	4798      	blx	r3
    129c:	200d      	movs	r0, #13
    129e:	4b66      	ldr	r3, [pc, #408]	; (1438 <m2m_wifi_connect_sc+0x254>)
    12a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    12a2:	200c      	movs	r0, #12
    12a4:	4240      	negs	r0, r0
			goto ERR1;
    12a6:	e7ec      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    12a8:	0038      	movs	r0, r7
    12aa:	4b64      	ldr	r3, [pc, #400]	; (143c <m2m_wifi_connect_sc+0x258>)
    12ac:	4798      	blx	r3
    12ae:	2840      	cmp	r0, #64	; 0x40
    12b0:	d1ad      	bne.n	120e <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    12b2:	783b      	ldrb	r3, [r7, #0]
    12b4:	001a      	movs	r2, r3
    12b6:	3a30      	subs	r2, #48	; 0x30
    12b8:	2a36      	cmp	r2, #54	; 0x36
    12ba:	d817      	bhi.n	12ec <m2m_wifi_connect_sc+0x108>
    12bc:	3a0a      	subs	r2, #10
    12be:	2a06      	cmp	r2, #6
    12c0:	d914      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12c2:	3b47      	subs	r3, #71	; 0x47
    12c4:	2b19      	cmp	r3, #25
    12c6:	d911      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12c8:	1c7a      	adds	r2, r7, #1
    12ca:	0038      	movs	r0, r7
    12cc:	3040      	adds	r0, #64	; 0x40
    12ce:	7813      	ldrb	r3, [r2, #0]
    12d0:	0019      	movs	r1, r3
    12d2:	3930      	subs	r1, #48	; 0x30
    12d4:	2936      	cmp	r1, #54	; 0x36
    12d6:	d809      	bhi.n	12ec <m2m_wifi_connect_sc+0x108>
    12d8:	390a      	subs	r1, #10
    12da:	2906      	cmp	r1, #6
    12dc:	d906      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12de:	3b47      	subs	r3, #71	; 0x47
    12e0:	2b19      	cmp	r3, #25
    12e2:	d903      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12e4:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    12e6:	4282      	cmp	r2, r0
    12e8:	d1f1      	bne.n	12ce <m2m_wifi_connect_sc+0xea>
    12ea:	e790      	b.n	120e <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    12ec:	4a54      	ldr	r2, [pc, #336]	; (1440 <m2m_wifi_connect_sc+0x25c>)
    12ee:	494d      	ldr	r1, [pc, #308]	; (1424 <m2m_wifi_connect_sc+0x240>)
    12f0:	484d      	ldr	r0, [pc, #308]	; (1428 <m2m_wifi_connect_sc+0x244>)
    12f2:	4b4e      	ldr	r3, [pc, #312]	; (142c <m2m_wifi_connect_sc+0x248>)
    12f4:	4798      	blx	r3
    12f6:	4853      	ldr	r0, [pc, #332]	; (1444 <m2m_wifi_connect_sc+0x260>)
    12f8:	4b4e      	ldr	r3, [pc, #312]	; (1434 <m2m_wifi_connect_sc+0x250>)
    12fa:	4798      	blx	r3
    12fc:	200d      	movs	r0, #13
    12fe:	4b4e      	ldr	r3, [pc, #312]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1300:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1302:	200c      	movs	r0, #12
    1304:	4240      	negs	r0, r0
					goto ERR1;
    1306:	e7bc      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1308:	4a4f      	ldr	r2, [pc, #316]	; (1448 <m2m_wifi_connect_sc+0x264>)
    130a:	4946      	ldr	r1, [pc, #280]	; (1424 <m2m_wifi_connect_sc+0x240>)
    130c:	4846      	ldr	r0, [pc, #280]	; (1428 <m2m_wifi_connect_sc+0x244>)
    130e:	4b47      	ldr	r3, [pc, #284]	; (142c <m2m_wifi_connect_sc+0x248>)
    1310:	4798      	blx	r3
    1312:	484e      	ldr	r0, [pc, #312]	; (144c <m2m_wifi_connect_sc+0x268>)
    1314:	4b47      	ldr	r3, [pc, #284]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1316:	4798      	blx	r3
    1318:	200d      	movs	r0, #13
    131a:	4b47      	ldr	r3, [pc, #284]	; (1438 <m2m_wifi_connect_sc+0x254>)
    131c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    131e:	200c      	movs	r0, #12
    1320:	4240      	negs	r0, r0
		goto ERR1;
    1322:	e7ae      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    1324:	4a4a      	ldr	r2, [pc, #296]	; (1450 <m2m_wifi_connect_sc+0x26c>)
    1326:	493f      	ldr	r1, [pc, #252]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1328:	483f      	ldr	r0, [pc, #252]	; (1428 <m2m_wifi_connect_sc+0x244>)
    132a:	4b40      	ldr	r3, [pc, #256]	; (142c <m2m_wifi_connect_sc+0x248>)
    132c:	4798      	blx	r3
    132e:	4849      	ldr	r0, [pc, #292]	; (1454 <m2m_wifi_connect_sc+0x270>)
    1330:	4b40      	ldr	r3, [pc, #256]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1332:	4798      	blx	r3
    1334:	200d      	movs	r0, #13
    1336:	4b40      	ldr	r3, [pc, #256]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1338:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    133a:	200c      	movs	r0, #12
    133c:	4240      	negs	r0, r0
			goto ERR1;
    133e:	e7a0      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1340:	783b      	ldrb	r3, [r7, #0]
    1342:	3b01      	subs	r3, #1
    1344:	b2db      	uxtb	r3, r3
    1346:	aa07      	add	r2, sp, #28
    1348:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    134a:	2b03      	cmp	r3, #3
    134c:	d817      	bhi.n	137e <m2m_wifi_connect_sc+0x19a>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    134e:	787a      	ldrb	r2, [r7, #1]
    1350:	1e51      	subs	r1, r2, #1
    1352:	ab07      	add	r3, sp, #28
    1354:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1356:	2310      	movs	r3, #16
    1358:	0011      	movs	r1, r2
    135a:	4399      	bics	r1, r3
    135c:	290b      	cmp	r1, #11
    135e:	d01d      	beq.n	139c <m2m_wifi_connect_sc+0x1b8>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1360:	4a3d      	ldr	r2, [pc, #244]	; (1458 <m2m_wifi_connect_sc+0x274>)
    1362:	4930      	ldr	r1, [pc, #192]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1364:	4830      	ldr	r0, [pc, #192]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1366:	4c31      	ldr	r4, [pc, #196]	; (142c <m2m_wifi_connect_sc+0x248>)
    1368:	47a0      	blx	r4
    136a:	ab07      	add	r3, sp, #28
    136c:	7859      	ldrb	r1, [r3, #1]
    136e:	483b      	ldr	r0, [pc, #236]	; (145c <m2m_wifi_connect_sc+0x278>)
    1370:	47a0      	blx	r4
    1372:	200d      	movs	r0, #13
    1374:	4b30      	ldr	r3, [pc, #192]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1376:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1378:	200c      	movs	r0, #12
    137a:	4240      	negs	r0, r0
			goto ERR1;
    137c:	e781      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    137e:	4a38      	ldr	r2, [pc, #224]	; (1460 <m2m_wifi_connect_sc+0x27c>)
    1380:	4928      	ldr	r1, [pc, #160]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1382:	4829      	ldr	r0, [pc, #164]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1384:	4c29      	ldr	r4, [pc, #164]	; (142c <m2m_wifi_connect_sc+0x248>)
    1386:	47a0      	blx	r4
    1388:	ab07      	add	r3, sp, #28
    138a:	7819      	ldrb	r1, [r3, #0]
    138c:	4835      	ldr	r0, [pc, #212]	; (1464 <m2m_wifi_connect_sc+0x280>)
    138e:	47a0      	blx	r4
    1390:	200d      	movs	r0, #13
    1392:	4b29      	ldr	r3, [pc, #164]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1394:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1396:	200c      	movs	r0, #12
    1398:	4240      	negs	r0, r0
			goto ERR1;
    139a:	e772      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    139c:	1cb9      	adds	r1, r7, #2
    139e:	2016      	movs	r0, #22
    13a0:	ab02      	add	r3, sp, #8
    13a2:	469c      	mov	ip, r3
    13a4:	4460      	add	r0, ip
    13a6:	4b1c      	ldr	r3, [pc, #112]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13a8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    13aa:	787b      	ldrb	r3, [r7, #1]
    13ac:	aa07      	add	r2, sp, #28
    13ae:	4694      	mov	ip, r2
    13b0:	4463      	add	r3, ip
    13b2:	2200      	movs	r2, #0
    13b4:	709a      	strb	r2, [r3, #2]
    13b6:	e75a      	b.n	126e <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    13b8:	0038      	movs	r0, r7
    13ba:	4b20      	ldr	r3, [pc, #128]	; (143c <m2m_wifi_connect_sc+0x258>)
    13bc:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    13be:	1e43      	subs	r3, r0, #1
    13c0:	b29b      	uxth	r3, r3
    13c2:	2b3f      	cmp	r3, #63	; 0x3f
    13c4:	d805      	bhi.n	13d2 <m2m_wifi_connect_sc+0x1ee>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    13c6:	1c42      	adds	r2, r0, #1
    13c8:	0039      	movs	r1, r7
    13ca:	a807      	add	r0, sp, #28
    13cc:	4b12      	ldr	r3, [pc, #72]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13ce:	4798      	blx	r3
    13d0:	e74d      	b.n	126e <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    13d2:	4a25      	ldr	r2, [pc, #148]	; (1468 <m2m_wifi_connect_sc+0x284>)
    13d4:	4913      	ldr	r1, [pc, #76]	; (1424 <m2m_wifi_connect_sc+0x240>)
    13d6:	4814      	ldr	r0, [pc, #80]	; (1428 <m2m_wifi_connect_sc+0x244>)
    13d8:	4b14      	ldr	r3, [pc, #80]	; (142c <m2m_wifi_connect_sc+0x248>)
    13da:	4798      	blx	r3
    13dc:	4823      	ldr	r0, [pc, #140]	; (146c <m2m_wifi_connect_sc+0x288>)
    13de:	4b15      	ldr	r3, [pc, #84]	; (1434 <m2m_wifi_connect_sc+0x250>)
    13e0:	4798      	blx	r3
    13e2:	200d      	movs	r0, #13
    13e4:	4b14      	ldr	r3, [pc, #80]	; (1438 <m2m_wifi_connect_sc+0x254>)
    13e6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13e8:	200c      	movs	r0, #12
    13ea:	4240      	negs	r0, r0
			goto ERR1;
    13ec:	e749      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    13ee:	223e      	movs	r2, #62	; 0x3e
    13f0:	0039      	movs	r1, r7
    13f2:	a807      	add	r0, sp, #28
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13f6:	4798      	blx	r3
    13f8:	e739      	b.n	126e <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    13fa:	4a1d      	ldr	r2, [pc, #116]	; (1470 <m2m_wifi_connect_sc+0x28c>)
    13fc:	4909      	ldr	r1, [pc, #36]	; (1424 <m2m_wifi_connect_sc+0x240>)
    13fe:	480a      	ldr	r0, [pc, #40]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1400:	4b0a      	ldr	r3, [pc, #40]	; (142c <m2m_wifi_connect_sc+0x248>)
    1402:	4798      	blx	r3
    1404:	481b      	ldr	r0, [pc, #108]	; (1474 <m2m_wifi_connect_sc+0x290>)
    1406:	4b0b      	ldr	r3, [pc, #44]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1408:	4798      	blx	r3
    140a:	200d      	movs	r0, #13
    140c:	4b0a      	ldr	r3, [pc, #40]	; (1438 <m2m_wifi_connect_sc+0x254>)
    140e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1410:	200c      	movs	r0, #12
    1412:	4240      	negs	r0, r0
		goto ERR1;
    1414:	e735      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	0000051d 	.word	0x0000051d
    141c:	00000645 	.word	0x00000645
    1420:	0000021f 	.word	0x0000021f
    1424:	00009794 	.word	0x00009794
    1428:	00009410 	.word	0x00009410
    142c:	0000818d 	.word	0x0000818d
    1430:	000097dc 	.word	0x000097dc
    1434:	000082a9 	.word	0x000082a9
    1438:	000081c1 	.word	0x000081c1
    143c:	00000541 	.word	0x00000541
    1440:	0000022b 	.word	0x0000022b
    1444:	000097f0 	.word	0x000097f0
    1448:	00000236 	.word	0x00000236
    144c:	000097fc 	.word	0x000097fc
    1450:	0000023f 	.word	0x0000023f
    1454:	00009810 	.word	0x00009810
    1458:	0000025d 	.word	0x0000025d
    145c:	00009838 	.word	0x00009838
    1460:	00000256 	.word	0x00000256
    1464:	0000981c 	.word	0x0000981c
    1468:	00000269 	.word	0x00000269
    146c:	00009854 	.word	0x00009854
    1470:	00000276 	.word	0x00000276
    1474:	00009870 	.word	0x00009870

00001478 <m2m_wifi_connect>:
{
    1478:	b530      	push	{r4, r5, lr}
    147a:	b083      	sub	sp, #12
    147c:	ac06      	add	r4, sp, #24
    147e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1480:	2500      	movs	r5, #0
    1482:	9501      	str	r5, [sp, #4]
    1484:	9400      	str	r4, [sp, #0]
    1486:	4c02      	ldr	r4, [pc, #8]	; (1490 <m2m_wifi_connect+0x18>)
    1488:	47a0      	blx	r4
}
    148a:	b003      	add	sp, #12
    148c:	bd30      	pop	{r4, r5, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	000011e5 	.word	0x000011e5

00001494 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1494:	2000      	movs	r0, #0
    1496:	4770      	bx	lr

00001498 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    1498:	b5f0      	push	{r4, r5, r6, r7, lr}
    149a:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    149c:	2580      	movs	r5, #128	; 0x80
    149e:	006d      	lsls	r5, r5, #1
    14a0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    14a2:	24a5      	movs	r4, #165	; 0xa5
    14a4:	0164      	lsls	r4, r4, #5
    14a6:	4f08      	ldr	r7, [pc, #32]	; (14c8 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    14a8:	4e08      	ldr	r6, [pc, #32]	; (14cc <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    14aa:	0029      	movs	r1, r5
    14ac:	0020      	movs	r0, r4
    14ae:	47b8      	blx	r7
			uint32 reg = 0;
    14b0:	2300      	movs	r3, #0
    14b2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    14b4:	a901      	add	r1, sp, #4
    14b6:	0020      	movs	r0, r4
    14b8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    14ba:	2800      	cmp	r0, #0
    14bc:	d1f5      	bne.n	14aa <chip_apply_conf+0x12>
				if(reg == val32)
    14be:	9b01      	ldr	r3, [sp, #4]
    14c0:	429d      	cmp	r5, r3
    14c2:	d1f2      	bne.n	14aa <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    14c4:	b003      	add	sp, #12
    14c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c8:	00001989 	.word	0x00001989
    14cc:	0000197d 	.word	0x0000197d

000014d0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    14d0:	b500      	push	{lr}
    14d2:	b083      	sub	sp, #12
	uint32 reg = 0;
    14d4:	2300      	movs	r3, #0
    14d6:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    14d8:	a901      	add	r1, sp, #4
    14da:	4811      	ldr	r0, [pc, #68]	; (1520 <enable_interrupts+0x50>)
    14dc:	4b11      	ldr	r3, [pc, #68]	; (1524 <enable_interrupts+0x54>)
    14de:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    14e0:	2800      	cmp	r0, #0
    14e2:	d001      	beq.n	14e8 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    14e4:	b003      	add	sp, #12
    14e6:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    14e8:	2180      	movs	r1, #128	; 0x80
    14ea:	0049      	lsls	r1, r1, #1
    14ec:	9b01      	ldr	r3, [sp, #4]
    14ee:	4319      	orrs	r1, r3
    14f0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    14f2:	480b      	ldr	r0, [pc, #44]	; (1520 <enable_interrupts+0x50>)
    14f4:	4b0c      	ldr	r3, [pc, #48]	; (1528 <enable_interrupts+0x58>)
    14f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    14f8:	2800      	cmp	r0, #0
    14fa:	d1f3      	bne.n	14e4 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    14fc:	a901      	add	r1, sp, #4
    14fe:	20d0      	movs	r0, #208	; 0xd0
    1500:	0140      	lsls	r0, r0, #5
    1502:	4b08      	ldr	r3, [pc, #32]	; (1524 <enable_interrupts+0x54>)
    1504:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1506:	2800      	cmp	r0, #0
    1508:	d1ec      	bne.n	14e4 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    150a:	2180      	movs	r1, #128	; 0x80
    150c:	0249      	lsls	r1, r1, #9
    150e:	9b01      	ldr	r3, [sp, #4]
    1510:	4319      	orrs	r1, r3
    1512:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    1514:	20d0      	movs	r0, #208	; 0xd0
    1516:	0140      	lsls	r0, r0, #5
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <enable_interrupts+0x58>)
    151a:	4798      	blx	r3
    151c:	e7e2      	b.n	14e4 <enable_interrupts+0x14>
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	00001408 	.word	0x00001408
    1524:	0000197d 	.word	0x0000197d
    1528:	00001989 	.word	0x00001989

0000152c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    152c:	b510      	push	{r4, lr}
    152e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    1530:	4b28      	ldr	r3, [pc, #160]	; (15d4 <nmi_get_chipid+0xa8>)
    1532:	681c      	ldr	r4, [r3, #0]
    1534:	2c00      	cmp	r4, #0
    1536:	d004      	beq.n	1542 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    1538:	4b26      	ldr	r3, [pc, #152]	; (15d4 <nmi_get_chipid+0xa8>)
    153a:	681c      	ldr	r4, [r3, #0]
}
    153c:	0020      	movs	r0, r4
    153e:	b002      	add	sp, #8
    1540:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    1542:	0019      	movs	r1, r3
    1544:	2080      	movs	r0, #128	; 0x80
    1546:	0140      	lsls	r0, r0, #5
    1548:	4b23      	ldr	r3, [pc, #140]	; (15d8 <nmi_get_chipid+0xac>)
    154a:	4798      	blx	r3
    154c:	2800      	cmp	r0, #0
    154e:	d003      	beq.n	1558 <nmi_get_chipid+0x2c>
			chipid = 0;
    1550:	2200      	movs	r2, #0
    1552:	4b20      	ldr	r3, [pc, #128]	; (15d4 <nmi_get_chipid+0xa8>)
    1554:	601a      	str	r2, [r3, #0]
			return 0;
    1556:	e7f1      	b.n	153c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1558:	a901      	add	r1, sp, #4
    155a:	4820      	ldr	r0, [pc, #128]	; (15dc <nmi_get_chipid+0xb0>)
    155c:	4b1e      	ldr	r3, [pc, #120]	; (15d8 <nmi_get_chipid+0xac>)
    155e:	4798      	blx	r3
    1560:	2800      	cmp	r0, #0
    1562:	d003      	beq.n	156c <nmi_get_chipid+0x40>
			chipid = 0;
    1564:	2200      	movs	r2, #0
    1566:	4b1b      	ldr	r3, [pc, #108]	; (15d4 <nmi_get_chipid+0xa8>)
    1568:	601a      	str	r2, [r3, #0]
			return 0;
    156a:	e7e7      	b.n	153c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    156c:	4b19      	ldr	r3, [pc, #100]	; (15d4 <nmi_get_chipid+0xa8>)
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	4a1b      	ldr	r2, [pc, #108]	; (15e0 <nmi_get_chipid+0xb4>)
    1572:	4293      	cmp	r3, r2
    1574:	d00e      	beq.n	1594 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    1576:	4a1b      	ldr	r2, [pc, #108]	; (15e4 <nmi_get_chipid+0xb8>)
    1578:	4293      	cmp	r3, r2
    157a:	d012      	beq.n	15a2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    157c:	4a1a      	ldr	r2, [pc, #104]	; (15e8 <nmi_get_chipid+0xbc>)
    157e:	4293      	cmp	r3, r2
    1580:	d01c      	beq.n	15bc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    1582:	4914      	ldr	r1, [pc, #80]	; (15d4 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    1584:	4a19      	ldr	r2, [pc, #100]	; (15ec <nmi_get_chipid+0xc0>)
    1586:	680b      	ldr	r3, [r1, #0]
    1588:	401a      	ands	r2, r3
		chipid |= 0x050000;
    158a:	23a0      	movs	r3, #160	; 0xa0
    158c:	02db      	lsls	r3, r3, #11
    158e:	4313      	orrs	r3, r2
    1590:	600b      	str	r3, [r1, #0]
    1592:	e7d1      	b.n	1538 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    1594:	9b01      	ldr	r3, [sp, #4]
    1596:	2b01      	cmp	r3, #1
    1598:	d0f3      	beq.n	1582 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    159a:	4a15      	ldr	r2, [pc, #84]	; (15f0 <nmi_get_chipid+0xc4>)
    159c:	4b0d      	ldr	r3, [pc, #52]	; (15d4 <nmi_get_chipid+0xa8>)
    159e:	601a      	str	r2, [r3, #0]
    15a0:	e7ef      	b.n	1582 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    15a2:	9b01      	ldr	r3, [sp, #4]
    15a4:	2b03      	cmp	r3, #3
    15a6:	d0ec      	beq.n	1582 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    15a8:	2b04      	cmp	r3, #4
    15aa:	d003      	beq.n	15b4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    15ac:	4a11      	ldr	r2, [pc, #68]	; (15f4 <nmi_get_chipid+0xc8>)
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <nmi_get_chipid+0xa8>)
    15b0:	601a      	str	r2, [r3, #0]
    15b2:	e7e6      	b.n	1582 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    15b4:	4a10      	ldr	r2, [pc, #64]	; (15f8 <nmi_get_chipid+0xcc>)
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <nmi_get_chipid+0xa8>)
    15b8:	601a      	str	r2, [r3, #0]
    15ba:	e7e2      	b.n	1582 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    15bc:	4905      	ldr	r1, [pc, #20]	; (15d4 <nmi_get_chipid+0xa8>)
    15be:	20ec      	movs	r0, #236	; 0xec
    15c0:	0380      	lsls	r0, r0, #14
    15c2:	4b05      	ldr	r3, [pc, #20]	; (15d8 <nmi_get_chipid+0xac>)
    15c4:	4798      	blx	r3
    15c6:	2800      	cmp	r0, #0
    15c8:	d0db      	beq.n	1582 <nmi_get_chipid+0x56>
			chipid = 0;
    15ca:	2200      	movs	r2, #0
    15cc:	4b01      	ldr	r3, [pc, #4]	; (15d4 <nmi_get_chipid+0xa8>)
    15ce:	601a      	str	r2, [r3, #0]
			return 0;
    15d0:	e7b4      	b.n	153c <nmi_get_chipid+0x10>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	2000009c 	.word	0x2000009c
    15d8:	0000197d 	.word	0x0000197d
    15dc:	000013f4 	.word	0x000013f4
    15e0:	001002a0 	.word	0x001002a0
    15e4:	001002b0 	.word	0x001002b0
    15e8:	001000f0 	.word	0x001000f0
    15ec:	fff0ffff 	.word	0xfff0ffff
    15f0:	001002a1 	.word	0x001002a1
    15f4:	001002b2 	.word	0x001002b2
    15f8:	001002b1 	.word	0x001002b1

000015fc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    15fc:	b530      	push	{r4, r5, lr}
    15fe:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1600:	4c16      	ldr	r4, [pc, #88]	; (165c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    1602:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1604:	a901      	add	r1, sp, #4
    1606:	2010      	movs	r0, #16
    1608:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    160a:	2800      	cmp	r0, #0
    160c:	d11c      	bne.n	1648 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    160e:	9b01      	ldr	r3, [sp, #4]
    1610:	422b      	tst	r3, r5
    1612:	d1f7      	bne.n	1604 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    1614:	a901      	add	r1, sp, #4
    1616:	3001      	adds	r0, #1
    1618:	4b10      	ldr	r3, [pc, #64]	; (165c <chip_sleep+0x60>)
    161a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    161c:	2800      	cmp	r0, #0
    161e:	d113      	bne.n	1648 <chip_sleep+0x4c>
	if(reg & NBIT1)
    1620:	9901      	ldr	r1, [sp, #4]
    1622:	078b      	lsls	r3, r1, #30
    1624:	d507      	bpl.n	1636 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    1626:	2302      	movs	r3, #2
    1628:	4399      	bics	r1, r3
    162a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    162c:	3001      	adds	r0, #1
    162e:	4b0c      	ldr	r3, [pc, #48]	; (1660 <chip_sleep+0x64>)
    1630:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    1632:	2800      	cmp	r0, #0
    1634:	d108      	bne.n	1648 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    1636:	a901      	add	r1, sp, #4
    1638:	200b      	movs	r0, #11
    163a:	4b08      	ldr	r3, [pc, #32]	; (165c <chip_sleep+0x60>)
    163c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    163e:	2800      	cmp	r0, #0
    1640:	d102      	bne.n	1648 <chip_sleep+0x4c>
	if(reg & NBIT0)
    1642:	9901      	ldr	r1, [sp, #4]
    1644:	07cb      	lsls	r3, r1, #31
    1646:	d401      	bmi.n	164c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    1648:	b003      	add	sp, #12
    164a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    164c:	2301      	movs	r3, #1
    164e:	4399      	bics	r1, r3
    1650:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    1652:	300b      	adds	r0, #11
    1654:	4b02      	ldr	r3, [pc, #8]	; (1660 <chip_sleep+0x64>)
    1656:	4798      	blx	r3
    1658:	e7f6      	b.n	1648 <chip_sleep+0x4c>
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	0000197d 	.word	0x0000197d
    1660:	00001989 	.word	0x00001989

00001664 <chip_wake>:
sint8 chip_wake(void)
{
    1664:	b5f0      	push	{r4, r5, r6, r7, lr}
    1666:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    1668:	2300      	movs	r3, #0
    166a:	9301      	str	r3, [sp, #4]
    166c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    166e:	a901      	add	r1, sp, #4
    1670:	200b      	movs	r0, #11
    1672:	4b28      	ldr	r3, [pc, #160]	; (1714 <chip_wake+0xb0>)
    1674:	4798      	blx	r3
    1676:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1678:	d130      	bne.n	16dc <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    167a:	9901      	ldr	r1, [sp, #4]
    167c:	07cb      	lsls	r3, r1, #31
    167e:	d406      	bmi.n	168e <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    1680:	2301      	movs	r3, #1
    1682:	4319      	orrs	r1, r3
    1684:	200b      	movs	r0, #11
    1686:	4b24      	ldr	r3, [pc, #144]	; (1718 <chip_wake+0xb4>)
    1688:	4798      	blx	r3
    168a:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    168c:	d126      	bne.n	16dc <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    168e:	a901      	add	r1, sp, #4
    1690:	2001      	movs	r0, #1
    1692:	4b20      	ldr	r3, [pc, #128]	; (1714 <chip_wake+0xb0>)
    1694:	4798      	blx	r3
    1696:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1698:	d120      	bne.n	16dc <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    169a:	9901      	ldr	r1, [sp, #4]
    169c:	078b      	lsls	r3, r1, #30
    169e:	d520      	bpl.n	16e2 <chip_wake+0x7e>
{
    16a0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    16a2:	4f1c      	ldr	r7, [pc, #112]	; (1714 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    16a4:	4e1d      	ldr	r6, [pc, #116]	; (171c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    16a6:	4669      	mov	r1, sp
    16a8:	200f      	movs	r0, #15
    16aa:	47b8      	blx	r7
    16ac:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    16ae:	d120      	bne.n	16f2 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    16b0:	9b00      	ldr	r3, [sp, #0]
    16b2:	075b      	lsls	r3, r3, #29
    16b4:	d42b      	bmi.n	170e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    16b6:	2002      	movs	r0, #2
    16b8:	47b0      	blx	r6
    16ba:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    16bc:	2d00      	cmp	r5, #0
    16be:	d1f2      	bne.n	16a6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    16c0:	22af      	movs	r2, #175	; 0xaf
    16c2:	0052      	lsls	r2, r2, #1
    16c4:	4916      	ldr	r1, [pc, #88]	; (1720 <chip_wake+0xbc>)
    16c6:	4817      	ldr	r0, [pc, #92]	; (1724 <chip_wake+0xc0>)
    16c8:	4b17      	ldr	r3, [pc, #92]	; (1728 <chip_wake+0xc4>)
    16ca:	4798      	blx	r3
    16cc:	4817      	ldr	r0, [pc, #92]	; (172c <chip_wake+0xc8>)
    16ce:	4b18      	ldr	r3, [pc, #96]	; (1730 <chip_wake+0xcc>)
    16d0:	4798      	blx	r3
    16d2:	200d      	movs	r0, #13
    16d4:	4b17      	ldr	r3, [pc, #92]	; (1734 <chip_wake+0xd0>)
    16d6:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    16d8:	2404      	movs	r4, #4
    16da:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    16dc:	0020      	movs	r0, r4
    16de:	b003      	add	sp, #12
    16e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    16e2:	2302      	movs	r3, #2
    16e4:	4319      	orrs	r1, r3
    16e6:	2001      	movs	r0, #1
    16e8:	4b0b      	ldr	r3, [pc, #44]	; (1718 <chip_wake+0xb4>)
    16ea:	4798      	blx	r3
    16ec:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    16ee:	d0d7      	beq.n	16a0 <chip_wake+0x3c>
    16f0:	e7f4      	b.n	16dc <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    16f2:	22aa      	movs	r2, #170	; 0xaa
    16f4:	0052      	lsls	r2, r2, #1
    16f6:	490a      	ldr	r1, [pc, #40]	; (1720 <chip_wake+0xbc>)
    16f8:	480a      	ldr	r0, [pc, #40]	; (1724 <chip_wake+0xc0>)
    16fa:	4d0b      	ldr	r5, [pc, #44]	; (1728 <chip_wake+0xc4>)
    16fc:	47a8      	blx	r5
    16fe:	9a00      	ldr	r2, [sp, #0]
    1700:	0021      	movs	r1, r4
    1702:	480d      	ldr	r0, [pc, #52]	; (1738 <chip_wake+0xd4>)
    1704:	47a8      	blx	r5
    1706:	200d      	movs	r0, #13
    1708:	4b0a      	ldr	r3, [pc, #40]	; (1734 <chip_wake+0xd0>)
    170a:	4798      	blx	r3
			goto _WAKE_EXIT;
    170c:	e7e6      	b.n	16dc <chip_wake+0x78>
	nm_bus_reset();
    170e:	4b0b      	ldr	r3, [pc, #44]	; (173c <chip_wake+0xd8>)
    1710:	4798      	blx	r3
    1712:	e7e3      	b.n	16dc <chip_wake+0x78>
    1714:	0000197d 	.word	0x0000197d
    1718:	00001989 	.word	0x00001989
    171c:	00000129 	.word	0x00000129
    1720:	00009950 	.word	0x00009950
    1724:	00009410 	.word	0x00009410
    1728:	0000818d 	.word	0x0000818d
    172c:	00009998 	.word	0x00009998
    1730:	000082a9 	.word	0x000082a9
    1734:	000081c1 	.word	0x000081c1
    1738:	00009980 	.word	0x00009980
    173c:	00001965 	.word	0x00001965

00001740 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1742:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1744:	4d2d      	ldr	r5, [pc, #180]	; (17fc <wait_for_bootrom+0xbc>)
    1746:	4c2e      	ldr	r4, [pc, #184]	; (1800 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1748:	4e2e      	ldr	r6, [pc, #184]	; (1804 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    174a:	0028      	movs	r0, r5
    174c:	47a0      	blx	r4
		if (reg & 0x80000000) {
    174e:	2800      	cmp	r0, #0
    1750:	db02      	blt.n	1758 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1752:	2001      	movs	r0, #1
    1754:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1756:	e7f8      	b.n	174a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1758:	482b      	ldr	r0, [pc, #172]	; (1808 <wait_for_bootrom+0xc8>)
    175a:	4b29      	ldr	r3, [pc, #164]	; (1800 <wait_for_bootrom+0xc0>)
    175c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    175e:	07c3      	lsls	r3, r0, #31
    1760:	d409      	bmi.n	1776 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1762:	4e28      	ldr	r6, [pc, #160]	; (1804 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    1764:	4c29      	ldr	r4, [pc, #164]	; (180c <wait_for_bootrom+0xcc>)
    1766:	4d26      	ldr	r5, [pc, #152]	; (1800 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    1768:	2001      	movs	r0, #1
    176a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    176c:	0020      	movs	r0, r4
    176e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    1770:	4b27      	ldr	r3, [pc, #156]	; (1810 <wait_for_bootrom+0xd0>)
    1772:	4298      	cmp	r0, r3
    1774:	d1f8      	bne.n	1768 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    1776:	2f02      	cmp	r7, #2
    1778:	d021      	beq.n	17be <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    177a:	2f03      	cmp	r7, #3
    177c:	d029      	beq.n	17d2 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    177e:	2f04      	cmp	r7, #4
    1780:	d030      	beq.n	17e4 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    1782:	4924      	ldr	r1, [pc, #144]	; (1814 <wait_for_bootrom+0xd4>)
    1784:	4824      	ldr	r0, [pc, #144]	; (1818 <wait_for_bootrom+0xd8>)
    1786:	4b25      	ldr	r3, [pc, #148]	; (181c <wait_for_bootrom+0xdc>)
    1788:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    178a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    178c:	4b24      	ldr	r3, [pc, #144]	; (1820 <wait_for_bootrom+0xe0>)
    178e:	4798      	blx	r3
    1790:	0500      	lsls	r0, r0, #20
    1792:	0d00      	lsrs	r0, r0, #20
    1794:	4b23      	ldr	r3, [pc, #140]	; (1824 <wait_for_bootrom+0xe4>)
    1796:	4298      	cmp	r0, r3
    1798:	d82a      	bhi.n	17f0 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    179a:	0020      	movs	r0, r4
    179c:	4b22      	ldr	r3, [pc, #136]	; (1828 <wait_for_bootrom+0xe8>)
    179e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    17a0:	4822      	ldr	r0, [pc, #136]	; (182c <wait_for_bootrom+0xec>)
    17a2:	4c23      	ldr	r4, [pc, #140]	; (1830 <wait_for_bootrom+0xf0>)
    17a4:	47a0      	blx	r4
    17a6:	491b      	ldr	r1, [pc, #108]	; (1814 <wait_for_bootrom+0xd4>)
    17a8:	4822      	ldr	r0, [pc, #136]	; (1834 <wait_for_bootrom+0xf4>)
    17aa:	47a0      	blx	r4
    17ac:	200d      	movs	r0, #13
    17ae:	4b22      	ldr	r3, [pc, #136]	; (1838 <wait_for_bootrom+0xf8>)
    17b0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    17b2:	4922      	ldr	r1, [pc, #136]	; (183c <wait_for_bootrom+0xfc>)
    17b4:	4815      	ldr	r0, [pc, #84]	; (180c <wait_for_bootrom+0xcc>)
    17b6:	4b19      	ldr	r3, [pc, #100]	; (181c <wait_for_bootrom+0xdc>)
    17b8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    17ba:	2000      	movs	r0, #0
    17bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    17be:	4920      	ldr	r1, [pc, #128]	; (1840 <wait_for_bootrom+0x100>)
    17c0:	4820      	ldr	r0, [pc, #128]	; (1844 <wait_for_bootrom+0x104>)
    17c2:	4c16      	ldr	r4, [pc, #88]	; (181c <wait_for_bootrom+0xdc>)
    17c4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    17c6:	2180      	movs	r1, #128	; 0x80
    17c8:	0349      	lsls	r1, r1, #13
    17ca:	4813      	ldr	r0, [pc, #76]	; (1818 <wait_for_bootrom+0xd8>)
    17cc:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    17ce:	2400      	movs	r4, #0
    17d0:	e7dc      	b.n	178c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    17d2:	491b      	ldr	r1, [pc, #108]	; (1840 <wait_for_bootrom+0x100>)
    17d4:	481b      	ldr	r0, [pc, #108]	; (1844 <wait_for_bootrom+0x104>)
    17d6:	4c11      	ldr	r4, [pc, #68]	; (181c <wait_for_bootrom+0xdc>)
    17d8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    17da:	2100      	movs	r1, #0
    17dc:	480e      	ldr	r0, [pc, #56]	; (1818 <wait_for_bootrom+0xd8>)
    17de:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    17e0:	2400      	movs	r4, #0
    17e2:	e7d3      	b.n	178c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    17e4:	490b      	ldr	r1, [pc, #44]	; (1814 <wait_for_bootrom+0xd4>)
    17e6:	480c      	ldr	r0, [pc, #48]	; (1818 <wait_for_bootrom+0xd8>)
    17e8:	4b0c      	ldr	r3, [pc, #48]	; (181c <wait_for_bootrom+0xdc>)
    17ea:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    17ec:	2480      	movs	r4, #128	; 0x80
    17ee:	e7cd      	b.n	178c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    17f0:	2002      	movs	r0, #2
    17f2:	4320      	orrs	r0, r4
    17f4:	4b0c      	ldr	r3, [pc, #48]	; (1828 <wait_for_bootrom+0xe8>)
    17f6:	4798      	blx	r3
    17f8:	e7d2      	b.n	17a0 <wait_for_bootrom+0x60>
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	00001014 	.word	0x00001014
    1800:	00001971 	.word	0x00001971
    1804:	00000129 	.word	0x00000129
    1808:	000207bc 	.word	0x000207bc
    180c:	000c000c 	.word	0x000c000c
    1810:	10add09e 	.word	0x10add09e
    1814:	13521352 	.word	0x13521352
    1818:	0000108c 	.word	0x0000108c
    181c:	00001989 	.word	0x00001989
    1820:	0000152d 	.word	0x0000152d
    1824:	0000039f 	.word	0x0000039f
    1828:	00001499 	.word	0x00001499
    182c:	00009740 	.word	0x00009740
    1830:	0000818d 	.word	0x0000818d
    1834:	000099b4 	.word	0x000099b4
    1838:	000081c1 	.word	0x000081c1
    183c:	ef522f61 	.word	0xef522f61
    1840:	3c1cd57d 	.word	0x3c1cd57d
    1844:	000207ac 	.word	0x000207ac

00001848 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    1848:	b570      	push	{r4, r5, r6, lr}
    184a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    184c:	4b15      	ldr	r3, [pc, #84]	; (18a4 <wait_for_firmware_start+0x5c>)
    184e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    1850:	4b15      	ldr	r3, [pc, #84]	; (18a8 <wait_for_firmware_start+0x60>)
    1852:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    1854:	3802      	subs	r0, #2
    1856:	2801      	cmp	r0, #1
    1858:	d911      	bls.n	187e <wait_for_firmware_start+0x36>
{
    185a:	2401      	movs	r4, #1
    185c:	4264      	negs	r4, r4
    185e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1860:	4e12      	ldr	r6, [pc, #72]	; (18ac <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1862:	4d13      	ldr	r5, [pc, #76]	; (18b0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    1864:	9b00      	ldr	r3, [sp, #0]
    1866:	4298      	cmp	r0, r3
    1868:	d00e      	beq.n	1888 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    186a:	2002      	movs	r0, #2
    186c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    186e:	9801      	ldr	r0, [sp, #4]
    1870:	47a8      	blx	r5
    1872:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    1874:	2c00      	cmp	r4, #0
    1876:	d1f5      	bne.n	1864 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1878:	2005      	movs	r0, #5
    187a:	4240      	negs	r0, r0
    187c:	e009      	b.n	1892 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    187e:	4b0d      	ldr	r3, [pc, #52]	; (18b4 <wait_for_firmware_start+0x6c>)
    1880:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    1882:	4b0d      	ldr	r3, [pc, #52]	; (18b8 <wait_for_firmware_start+0x70>)
    1884:	9300      	str	r3, [sp, #0]
    1886:	e7e8      	b.n	185a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1888:	9a00      	ldr	r2, [sp, #0]
    188a:	4b07      	ldr	r3, [pc, #28]	; (18a8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    188c:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    188e:	429a      	cmp	r2, r3
    1890:	d001      	beq.n	1896 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    1892:	b002      	add	sp, #8
    1894:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    1896:	2100      	movs	r1, #0
    1898:	4802      	ldr	r0, [pc, #8]	; (18a4 <wait_for_firmware_start+0x5c>)
    189a:	4b08      	ldr	r3, [pc, #32]	; (18bc <wait_for_firmware_start+0x74>)
    189c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    189e:	2000      	movs	r0, #0
    18a0:	e7f7      	b.n	1892 <wait_for_firmware_start+0x4a>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	0000108c 	.word	0x0000108c
    18a8:	02532636 	.word	0x02532636
    18ac:	00000129 	.word	0x00000129
    18b0:	00001971 	.word	0x00001971
    18b4:	000207ac 	.word	0x000207ac
    18b8:	d75dc1c3 	.word	0xd75dc1c3
    18bc:	00001989 	.word	0x00001989

000018c0 <chip_deinit>:

sint8 chip_deinit(void)
{
    18c0:	b510      	push	{r4, lr}
    18c2:	b082      	sub	sp, #8
	uint32 reg = 0;
    18c4:	2300      	movs	r3, #0
    18c6:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    18c8:	a901      	add	r1, sp, #4
    18ca:	20a0      	movs	r0, #160	; 0xa0
    18cc:	0140      	lsls	r0, r0, #5
    18ce:	4b14      	ldr	r3, [pc, #80]	; (1920 <chip_deinit+0x60>)
    18d0:	4798      	blx	r3
    18d2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    18d4:	d115      	bne.n	1902 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    18d6:	4913      	ldr	r1, [pc, #76]	; (1924 <chip_deinit+0x64>)
    18d8:	9b01      	ldr	r3, [sp, #4]
    18da:	4019      	ands	r1, r3
    18dc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    18de:	20a0      	movs	r0, #160	; 0xa0
    18e0:	0140      	lsls	r0, r0, #5
    18e2:	4b11      	ldr	r3, [pc, #68]	; (1928 <chip_deinit+0x68>)
    18e4:	4798      	blx	r3
    18e6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    18e8:	d016      	beq.n	1918 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    18ea:	4a10      	ldr	r2, [pc, #64]	; (192c <chip_deinit+0x6c>)
    18ec:	4910      	ldr	r1, [pc, #64]	; (1930 <chip_deinit+0x70>)
    18ee:	4811      	ldr	r0, [pc, #68]	; (1934 <chip_deinit+0x74>)
    18f0:	4b11      	ldr	r3, [pc, #68]	; (1938 <chip_deinit+0x78>)
    18f2:	4798      	blx	r3
    18f4:	4811      	ldr	r0, [pc, #68]	; (193c <chip_deinit+0x7c>)
    18f6:	4b12      	ldr	r3, [pc, #72]	; (1940 <chip_deinit+0x80>)
    18f8:	4798      	blx	r3
    18fa:	200d      	movs	r0, #13
    18fc:	4b11      	ldr	r3, [pc, #68]	; (1944 <chip_deinit+0x84>)
    18fe:	4798      	blx	r3
		goto ERR1;
    1900:	e00a      	b.n	1918 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    1902:	4a11      	ldr	r2, [pc, #68]	; (1948 <chip_deinit+0x88>)
    1904:	490a      	ldr	r1, [pc, #40]	; (1930 <chip_deinit+0x70>)
    1906:	480b      	ldr	r0, [pc, #44]	; (1934 <chip_deinit+0x74>)
    1908:	4b0b      	ldr	r3, [pc, #44]	; (1938 <chip_deinit+0x78>)
    190a:	4798      	blx	r3
    190c:	480b      	ldr	r0, [pc, #44]	; (193c <chip_deinit+0x7c>)
    190e:	4b0c      	ldr	r3, [pc, #48]	; (1940 <chip_deinit+0x80>)
    1910:	4798      	blx	r3
    1912:	200d      	movs	r0, #13
    1914:	4b0b      	ldr	r3, [pc, #44]	; (1944 <chip_deinit+0x84>)
    1916:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    1918:	0020      	movs	r0, r4
    191a:	b002      	add	sp, #8
    191c:	bd10      	pop	{r4, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	0000197d 	.word	0x0000197d
    1924:	fffffbff 	.word	0xfffffbff
    1928:	00001989 	.word	0x00001989
    192c:	0000020b 	.word	0x0000020b
    1930:	0000995c 	.word	0x0000995c
    1934:	00009410 	.word	0x00009410
    1938:	0000818d 	.word	0x0000818d
    193c:	00009968 	.word	0x00009968
    1940:	000082a9 	.word	0x000082a9
    1944:	000081c1 	.word	0x000081c1
    1948:	00000205 	.word	0x00000205

0000194c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    194c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    194e:	4b01      	ldr	r3, [pc, #4]	; (1954 <nm_bus_iface_init+0x8>)
    1950:	4798      	blx	r3
	return ret;
}
    1952:	bd10      	pop	{r4, pc}
    1954:	00000261 	.word	0x00000261

00001958 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1958:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    195a:	4b01      	ldr	r3, [pc, #4]	; (1960 <nm_bus_iface_deinit+0x8>)
    195c:	4798      	blx	r3

	return ret;
}
    195e:	bd10      	pop	{r4, pc}
    1960:	000004b1 	.word	0x000004b1

00001964 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    1964:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    1966:	4b01      	ldr	r3, [pc, #4]	; (196c <nm_bus_reset+0x8>)
    1968:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    196a:	bd10      	pop	{r4, pc}
    196c:	00002311 	.word	0x00002311

00001970 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1970:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1972:	4b01      	ldr	r3, [pc, #4]	; (1978 <nm_read_reg+0x8>)
    1974:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1976:	bd10      	pop	{r4, pc}
    1978:	00002349 	.word	0x00002349

0000197c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    197c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    197e:	4b01      	ldr	r3, [pc, #4]	; (1984 <nm_read_reg_with_ret+0x8>)
    1980:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1982:	bd10      	pop	{r4, pc}
    1984:	0000235d 	.word	0x0000235d

00001988 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1988:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    198a:	4b01      	ldr	r3, [pc, #4]	; (1990 <nm_write_reg+0x8>)
    198c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    198e:	bd10      	pop	{r4, pc}
    1990:	00002375 	.word	0x00002375

00001994 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
    1996:	46d6      	mov	lr, sl
    1998:	464f      	mov	r7, r9
    199a:	4646      	mov	r6, r8
    199c:	b5c0      	push	{r6, r7, lr}
    199e:	b082      	sub	sp, #8
    19a0:	4680      	mov	r8, r0
    19a2:	4689      	mov	r9, r1
    19a4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    19a6:	4b13      	ldr	r3, [pc, #76]	; (19f4 <nm_read_block+0x60>)
    19a8:	881f      	ldrh	r7, [r3, #0]
    19aa:	3f08      	subs	r7, #8
    19ac:	b2bb      	uxth	r3, r7
    19ae:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    19b0:	001e      	movs	r6, r3
    19b2:	0004      	movs	r4, r0
    19b4:	429a      	cmp	r2, r3
    19b6:	d91a      	bls.n	19ee <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19b8:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <nm_read_block+0x64>)
    19ba:	469a      	mov	sl, r3
    19bc:	1a37      	subs	r7, r6, r0
    19be:	4643      	mov	r3, r8
    19c0:	1ae1      	subs	r1, r4, r3
    19c2:	4449      	add	r1, r9
    19c4:	9a01      	ldr	r2, [sp, #4]
    19c6:	0020      	movs	r0, r4
    19c8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    19ca:	2800      	cmp	r0, #0
    19cc:	d109      	bne.n	19e2 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    19ce:	1bad      	subs	r5, r5, r6
    19d0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    19d2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    19d4:	42b5      	cmp	r5, r6
    19d6:	d8f2      	bhi.n	19be <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19d8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    19da:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19dc:	0020      	movs	r0, r4
    19de:	4b06      	ldr	r3, [pc, #24]	; (19f8 <nm_read_block+0x64>)
    19e0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    19e2:	b002      	add	sp, #8
    19e4:	bc1c      	pop	{r2, r3, r4}
    19e6:	4690      	mov	r8, r2
    19e8:	4699      	mov	r9, r3
    19ea:	46a2      	mov	sl, r4
    19ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    19ee:	2100      	movs	r1, #0
    19f0:	e7f2      	b.n	19d8 <nm_read_block+0x44>
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	20000000 	.word	0x20000000
    19f8:	000024b9 	.word	0x000024b9

000019fc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    19fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fe:	46d6      	mov	lr, sl
    1a00:	464f      	mov	r7, r9
    1a02:	4646      	mov	r6, r8
    1a04:	b5c0      	push	{r6, r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	4680      	mov	r8, r0
    1a0a:	4689      	mov	r9, r1
    1a0c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a0e:	4b13      	ldr	r3, [pc, #76]	; (1a5c <nm_write_block+0x60>)
    1a10:	881f      	ldrh	r7, [r3, #0]
    1a12:	3f08      	subs	r7, #8
    1a14:	b2bb      	uxth	r3, r7
    1a16:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a18:	001e      	movs	r6, r3
    1a1a:	0004      	movs	r4, r0
    1a1c:	429a      	cmp	r2, r3
    1a1e:	d91a      	bls.n	1a56 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a20:	4b0f      	ldr	r3, [pc, #60]	; (1a60 <nm_write_block+0x64>)
    1a22:	469a      	mov	sl, r3
    1a24:	1a37      	subs	r7, r6, r0
    1a26:	4643      	mov	r3, r8
    1a28:	1ae1      	subs	r1, r4, r3
    1a2a:	4449      	add	r1, r9
    1a2c:	9a01      	ldr	r2, [sp, #4]
    1a2e:	0020      	movs	r0, r4
    1a30:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a32:	2800      	cmp	r0, #0
    1a34:	d109      	bne.n	1a4a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1a36:	1bad      	subs	r5, r5, r6
    1a38:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1a3a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1a3c:	42b5      	cmp	r5, r6
    1a3e:	d8f2      	bhi.n	1a26 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a40:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1a42:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a44:	0020      	movs	r0, r4
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <nm_write_block+0x64>)
    1a48:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1a4a:	b002      	add	sp, #8
    1a4c:	bc1c      	pop	{r2, r3, r4}
    1a4e:	4690      	mov	r8, r2
    1a50:	4699      	mov	r9, r3
    1a52:	46a2      	mov	sl, r4
    1a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1a56:	2100      	movs	r1, #0
    1a58:	e7f2      	b.n	1a40 <nm_write_block+0x44>
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	20000000 	.word	0x20000000
    1a60:	00002611 	.word	0x00002611

00001a64 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	b084      	sub	sp, #16
    1a68:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1a6a:	2300      	movs	r3, #0
    1a6c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    1a6e:	2208      	movs	r2, #8
    1a70:	2100      	movs	r1, #0
    1a72:	a801      	add	r0, sp, #4
    1a74:	4b2d      	ldr	r3, [pc, #180]	; (1b2c <nm_get_firmware_full_info+0xc8>)
    1a76:	4798      	blx	r3
	if (pstrRev != NULL)
    1a78:	2c00      	cmp	r4, #0
    1a7a:	d044      	beq.n	1b06 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    1a7c:	2228      	movs	r2, #40	; 0x28
    1a7e:	2100      	movs	r1, #0
    1a80:	0020      	movs	r0, r4
    1a82:	4b2b      	ldr	r3, [pc, #172]	; (1b30 <nm_get_firmware_full_info+0xcc>)
    1a84:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    1a86:	a903      	add	r1, sp, #12
    1a88:	482a      	ldr	r0, [pc, #168]	; (1b34 <nm_get_firmware_full_info+0xd0>)
    1a8a:	4b2b      	ldr	r3, [pc, #172]	; (1b38 <nm_get_firmware_full_info+0xd4>)
    1a8c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1a8e:	2800      	cmp	r0, #0
    1a90:	d13a      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    1a92:	9b03      	ldr	r3, [sp, #12]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d039      	beq.n	1b0c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1a98:	20c0      	movs	r0, #192	; 0xc0
    1a9a:	0280      	lsls	r0, r0, #10
    1a9c:	4318      	orrs	r0, r3
    1a9e:	2208      	movs	r2, #8
    1aa0:	a901      	add	r1, sp, #4
    1aa2:	4b26      	ldr	r3, [pc, #152]	; (1b3c <nm_get_firmware_full_info+0xd8>)
    1aa4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    1aa6:	2800      	cmp	r0, #0
    1aa8:	d12e      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    1aaa:	9b02      	ldr	r3, [sp, #8]
    1aac:	0418      	lsls	r0, r3, #16
    1aae:	0c00      	lsrs	r0, r0, #16
    1ab0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1ab2:	d02e      	beq.n	1b12 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1ab4:	23c0      	movs	r3, #192	; 0xc0
    1ab6:	029b      	lsls	r3, r3, #10
    1ab8:	4318      	orrs	r0, r3
    1aba:	2228      	movs	r2, #40	; 0x28
    1abc:	0021      	movs	r1, r4
    1abe:	4b1f      	ldr	r3, [pc, #124]	; (1b3c <nm_get_firmware_full_info+0xd8>)
    1ac0:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1ac2:	2800      	cmp	r0, #0
    1ac4:	d120      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1ac6:	7921      	ldrb	r1, [r4, #4]
    1ac8:	0209      	lsls	r1, r1, #8
    1aca:	79a2      	ldrb	r2, [r4, #6]
    1acc:	230f      	movs	r3, #15
    1ace:	401a      	ands	r2, r3
    1ad0:	430a      	orrs	r2, r1
    1ad2:	7961      	ldrb	r1, [r4, #5]
    1ad4:	0109      	lsls	r1, r1, #4
    1ad6:	25ff      	movs	r5, #255	; 0xff
    1ad8:	4029      	ands	r1, r5
    1ada:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    1adc:	79e1      	ldrb	r1, [r4, #7]
    1ade:	0209      	lsls	r1, r1, #8
    1ae0:	7a66      	ldrb	r6, [r4, #9]
    1ae2:	4033      	ands	r3, r6
    1ae4:	430b      	orrs	r3, r1
    1ae6:	7a21      	ldrb	r1, [r4, #8]
    1ae8:	0109      	lsls	r1, r1, #4
    1aea:	400d      	ands	r5, r1
    1aec:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    1aee:	2a00      	cmp	r2, #0
    1af0:	d012      	beq.n	1b18 <nm_get_firmware_full_info+0xb4>
    1af2:	2b00      	cmp	r3, #0
    1af4:	d013      	beq.n	1b1e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1af6:	4912      	ldr	r1, [pc, #72]	; (1b40 <nm_get_firmware_full_info+0xdc>)
    1af8:	428b      	cmp	r3, r1
    1afa:	d813      	bhi.n	1b24 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    1afc:	4b11      	ldr	r3, [pc, #68]	; (1b44 <nm_get_firmware_full_info+0xe0>)
    1afe:	429a      	cmp	r2, r3
    1b00:	d802      	bhi.n	1b08 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b02:	380d      	subs	r0, #13
    1b04:	e000      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    1b06:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1b08:	b004      	add	sp, #16
    1b0a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    1b0c:	200c      	movs	r0, #12
    1b0e:	4240      	negs	r0, r0
    1b10:	e7fa      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    1b12:	200c      	movs	r0, #12
    1b14:	4240      	negs	r0, r0
    1b16:	e7f7      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    1b18:	200c      	movs	r0, #12
    1b1a:	4240      	negs	r0, r0
    1b1c:	e7f4      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
    1b1e:	200c      	movs	r0, #12
    1b20:	4240      	negs	r0, r0
    1b22:	e7f1      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b24:	200d      	movs	r0, #13
    1b26:	4240      	negs	r0, r0
    1b28:	e7ee      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	0000817b 	.word	0x0000817b
    1b30:	00000531 	.word	0x00000531
    1b34:	000c0008 	.word	0x000c0008
    1b38:	0000197d 	.word	0x0000197d
    1b3c:	00001995 	.word	0x00001995
    1b40:	00001352 	.word	0x00001352
    1b44:	00001351 	.word	0x00001351

00001b48 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1b48:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) 
    1b4a:	2800      	cmp	r0, #0
    1b4c:	d037      	beq.n	1bbe <nm_drv_init+0x76>
	{
		u8Mode = *((uint8 *)arg);
    1b4e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) 
    1b50:	1e6b      	subs	r3, r5, #1
    1b52:	2b03      	cmp	r3, #3
    1b54:	d900      	bls.n	1b58 <nm_drv_init+0x10>
		{
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1b56:	2501      	movs	r5, #1
	else 
	{
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    1b58:	2000      	movs	r0, #0
    1b5a:	4b20      	ldr	r3, [pc, #128]	; (1bdc <nm_drv_init+0x94>)
    1b5c:	4798      	blx	r3
    1b5e:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b60:	d12f      	bne.n	1bc2 <nm_drv_init+0x7a>
	if(M2M_SUCCESS != ret) 
	{
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1b62:	481f      	ldr	r0, [pc, #124]	; (1be0 <nm_drv_init+0x98>)
    1b64:	4c1f      	ldr	r4, [pc, #124]	; (1be4 <nm_drv_init+0x9c>)
    1b66:	47a0      	blx	r4
    1b68:	4b1f      	ldr	r3, [pc, #124]	; (1be8 <nm_drv_init+0xa0>)
    1b6a:	4798      	blx	r3
    1b6c:	0001      	movs	r1, r0
    1b6e:	481f      	ldr	r0, [pc, #124]	; (1bec <nm_drv_init+0xa4>)
    1b70:	47a0      	blx	r4
    1b72:	200d      	movs	r0, #13
    1b74:	4b1e      	ldr	r3, [pc, #120]	; (1bf0 <nm_drv_init+0xa8>)
    1b76:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1b78:	4b1e      	ldr	r3, [pc, #120]	; (1bf4 <nm_drv_init+0xac>)
    1b7a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    1b7c:	0028      	movs	r0, r5
    1b7e:	4b1e      	ldr	r3, [pc, #120]	; (1bf8 <nm_drv_init+0xb0>)
    1b80:	4798      	blx	r3
    1b82:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b84:	d117      	bne.n	1bb6 <nm_drv_init+0x6e>
	{
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1b86:	0028      	movs	r0, r5
    1b88:	4b1c      	ldr	r3, [pc, #112]	; (1bfc <nm_drv_init+0xb4>)
    1b8a:	4798      	blx	r3
    1b8c:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b8e:	d112      	bne.n	1bb6 <nm_drv_init+0x6e>
	{
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) 
    1b90:	3d02      	subs	r5, #2
    1b92:	2d01      	cmp	r5, #1
    1b94:	d911      	bls.n	1bba <nm_drv_init+0x72>
	{
		goto ERR1;
	} 
	else;
	
	ret = enable_interrupts();
    1b96:	4b1a      	ldr	r3, [pc, #104]	; (1c00 <nm_drv_init+0xb8>)
    1b98:	4798      	blx	r3
    1b9a:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b9c:	d00d      	beq.n	1bba <nm_drv_init+0x72>
	{
		M2M_ERR("failed to enable interrupts..\n");
    1b9e:	2260      	movs	r2, #96	; 0x60
    1ba0:	32ff      	adds	r2, #255	; 0xff
    1ba2:	4918      	ldr	r1, [pc, #96]	; (1c04 <nm_drv_init+0xbc>)
    1ba4:	4818      	ldr	r0, [pc, #96]	; (1c08 <nm_drv_init+0xc0>)
    1ba6:	4b0f      	ldr	r3, [pc, #60]	; (1be4 <nm_drv_init+0x9c>)
    1ba8:	4798      	blx	r3
    1baa:	4818      	ldr	r0, [pc, #96]	; (1c0c <nm_drv_init+0xc4>)
    1bac:	4b18      	ldr	r3, [pc, #96]	; (1c10 <nm_drv_init+0xc8>)
    1bae:	4798      	blx	r3
    1bb0:	200d      	movs	r0, #13
    1bb2:	4b0f      	ldr	r3, [pc, #60]	; (1bf0 <nm_drv_init+0xa8>)
    1bb4:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1bb6:	4b17      	ldr	r3, [pc, #92]	; (1c14 <nm_drv_init+0xcc>)
    1bb8:	4798      	blx	r3
ERR1:
	return ret;
}
    1bba:	0020      	movs	r0, r4
    1bbc:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1bbe:	2501      	movs	r5, #1
    1bc0:	e7ca      	b.n	1b58 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1bc2:	2296      	movs	r2, #150	; 0x96
    1bc4:	0052      	lsls	r2, r2, #1
    1bc6:	490f      	ldr	r1, [pc, #60]	; (1c04 <nm_drv_init+0xbc>)
    1bc8:	480f      	ldr	r0, [pc, #60]	; (1c08 <nm_drv_init+0xc0>)
    1bca:	4b06      	ldr	r3, [pc, #24]	; (1be4 <nm_drv_init+0x9c>)
    1bcc:	4798      	blx	r3
    1bce:	4812      	ldr	r0, [pc, #72]	; (1c18 <nm_drv_init+0xd0>)
    1bd0:	4b0f      	ldr	r3, [pc, #60]	; (1c10 <nm_drv_init+0xc8>)
    1bd2:	4798      	blx	r3
    1bd4:	200d      	movs	r0, #13
    1bd6:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <nm_drv_init+0xa8>)
    1bd8:	4798      	blx	r3
		goto ERR1;
    1bda:	e7ee      	b.n	1bba <nm_drv_init+0x72>
    1bdc:	0000194d 	.word	0x0000194d
    1be0:	00009740 	.word	0x00009740
    1be4:	0000818d 	.word	0x0000818d
    1be8:	0000152d 	.word	0x0000152d
    1bec:	00009a84 	.word	0x00009a84
    1bf0:	000081c1 	.word	0x000081c1
    1bf4:	0000238d 	.word	0x0000238d
    1bf8:	00001741 	.word	0x00001741
    1bfc:	00001849 	.word	0x00001849
    1c00:	000014d1 	.word	0x000014d1
    1c04:	000099cc 	.word	0x000099cc
    1c08:	00009410 	.word	0x00009410
    1c0c:	00009a48 	.word	0x00009a48
    1c10:	000082a9 	.word	0x000082a9
    1c14:	00001959 	.word	0x00001959
    1c18:	00009a68 	.word	0x00009a68

00001c1c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1c1c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1c1e:	4b1c      	ldr	r3, [pc, #112]	; (1c90 <nm_drv_deinit+0x74>)
    1c20:	4798      	blx	r3
    1c22:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c24:	d10b      	bne.n	1c3e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1c26:	2000      	movs	r0, #0
    1c28:	4b1a      	ldr	r3, [pc, #104]	; (1c94 <nm_drv_deinit+0x78>)
    1c2a:	4798      	blx	r3
    1c2c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c2e:	d114      	bne.n	1c5a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1c30:	4b19      	ldr	r3, [pc, #100]	; (1c98 <nm_drv_deinit+0x7c>)
    1c32:	4798      	blx	r3
    1c34:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c36:	d11d      	bne.n	1c74 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1c38:	4b18      	ldr	r3, [pc, #96]	; (1c9c <nm_drv_deinit+0x80>)
    1c3a:	4798      	blx	r3
    1c3c:	e00b      	b.n	1c56 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1c3e:	22bb      	movs	r2, #187	; 0xbb
    1c40:	0052      	lsls	r2, r2, #1
    1c42:	4917      	ldr	r1, [pc, #92]	; (1ca0 <nm_drv_deinit+0x84>)
    1c44:	4817      	ldr	r0, [pc, #92]	; (1ca4 <nm_drv_deinit+0x88>)
    1c46:	4b18      	ldr	r3, [pc, #96]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c48:	4798      	blx	r3
    1c4a:	4818      	ldr	r0, [pc, #96]	; (1cac <nm_drv_deinit+0x90>)
    1c4c:	4b18      	ldr	r3, [pc, #96]	; (1cb0 <nm_drv_deinit+0x94>)
    1c4e:	4798      	blx	r3
    1c50:	200d      	movs	r0, #13
    1c52:	4b18      	ldr	r3, [pc, #96]	; (1cb4 <nm_drv_deinit+0x98>)
    1c54:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1c56:	0020      	movs	r0, r4
    1c58:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1c5a:	227e      	movs	r2, #126	; 0x7e
    1c5c:	32ff      	adds	r2, #255	; 0xff
    1c5e:	4910      	ldr	r1, [pc, #64]	; (1ca0 <nm_drv_deinit+0x84>)
    1c60:	4810      	ldr	r0, [pc, #64]	; (1ca4 <nm_drv_deinit+0x88>)
    1c62:	4b11      	ldr	r3, [pc, #68]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c64:	4798      	blx	r3
    1c66:	4814      	ldr	r0, [pc, #80]	; (1cb8 <nm_drv_deinit+0x9c>)
    1c68:	4b11      	ldr	r3, [pc, #68]	; (1cb0 <nm_drv_deinit+0x94>)
    1c6a:	4798      	blx	r3
    1c6c:	200d      	movs	r0, #13
    1c6e:	4b11      	ldr	r3, [pc, #68]	; (1cb4 <nm_drv_deinit+0x98>)
    1c70:	4798      	blx	r3
		goto ERR1;
    1c72:	e7f0      	b.n	1c56 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1c74:	2284      	movs	r2, #132	; 0x84
    1c76:	32ff      	adds	r2, #255	; 0xff
    1c78:	4909      	ldr	r1, [pc, #36]	; (1ca0 <nm_drv_deinit+0x84>)
    1c7a:	480a      	ldr	r0, [pc, #40]	; (1ca4 <nm_drv_deinit+0x88>)
    1c7c:	4b0a      	ldr	r3, [pc, #40]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c7e:	4798      	blx	r3
    1c80:	480e      	ldr	r0, [pc, #56]	; (1cbc <nm_drv_deinit+0xa0>)
    1c82:	4b0b      	ldr	r3, [pc, #44]	; (1cb0 <nm_drv_deinit+0x94>)
    1c84:	4798      	blx	r3
    1c86:	200d      	movs	r0, #13
    1c88:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <nm_drv_deinit+0x98>)
    1c8a:	4798      	blx	r3
		goto ERR1;
    1c8c:	e7e3      	b.n	1c56 <nm_drv_deinit+0x3a>
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	000018c1 	.word	0x000018c1
    1c94:	0000317d 	.word	0x0000317d
    1c98:	00001959 	.word	0x00001959
    1c9c:	00002339 	.word	0x00002339
    1ca0:	000099d8 	.word	0x000099d8
    1ca4:	00009410 	.word	0x00009410
    1ca8:	0000818d 	.word	0x0000818d
    1cac:	000099e8 	.word	0x000099e8
    1cb0:	000082a9 	.word	0x000082a9
    1cb4:	000081c1 	.word	0x000081c1
    1cb8:	00009a08 	.word	0x00009a08
    1cbc:	00009a2c 	.word	0x00009a2c

00001cc0 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1cc0:	b500      	push	{lr}
    1cc2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1cc4:	ab01      	add	r3, sp, #4
    1cc6:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1cc8:	2200      	movs	r2, #0
    1cca:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1ccc:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1cce:	0019      	movs	r1, r3
    1cd0:	2003      	movs	r0, #3
    1cd2:	4b02      	ldr	r3, [pc, #8]	; (1cdc <nmi_spi_write+0x1c>)
    1cd4:	4798      	blx	r3
}
    1cd6:	b005      	add	sp, #20
    1cd8:	bd00      	pop	{pc}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	00000365 	.word	0x00000365

00001ce0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1ce0:	b570      	push	{r4, r5, r6, lr}
    1ce2:	b084      	sub	sp, #16
    1ce4:	ac08      	add	r4, sp, #32
    1ce6:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1ce8:	ac01      	add	r4, sp, #4
    1cea:	7020      	strb	r0, [r4, #0]
	switch(cmd) 
    1cec:	303f      	adds	r0, #63	; 0x3f
    1cee:	b2c4      	uxtb	r4, r0
    1cf0:	2c0e      	cmp	r4, #14
    1cf2:	d900      	bls.n	1cf6 <spi_cmd+0x16>
    1cf4:	e084      	b.n	1e00 <spi_cmd+0x120>
    1cf6:	00a0      	lsls	r0, r4, #2
    1cf8:	4c4f      	ldr	r4, [pc, #316]	; (1e38 <spi_cmd+0x158>)
    1cfa:	5820      	ldr	r0, [r4, r0]
    1cfc:	4687      	mov	pc, r0
	{
		case CMD_SINGLE_READ:				/* single word (4 bytes) read */
			bc[1] = (uint8)(adr >> 16);
    1cfe:	ab01      	add	r3, sp, #4
    1d00:	0c0a      	lsrs	r2, r1, #16
    1d02:	705a      	strb	r2, [r3, #1]
			bc[2] = (uint8)(adr >> 8);
    1d04:	0a0a      	lsrs	r2, r1, #8
    1d06:	709a      	strb	r2, [r3, #2]
			bc[3] = (uint8)adr;
    1d08:	70d9      	strb	r1, [r3, #3]
			len = 5;
    1d0a:	2105      	movs	r1, #5
			break;
	}

	if(result) 
	{
		if (!gu8Crc_off)
    1d0c:	4b4b      	ldr	r3, [pc, #300]	; (1e3c <spi_cmd+0x15c>)
    1d0e:	781b      	ldrb	r3, [r3, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	d077      	beq.n	1e04 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1d14:	3901      	subs	r1, #1
    1d16:	b2c9      	uxtb	r1, r1
    1d18:	e083      	b.n	1e22 <spi_cmd+0x142>
			bc[1] = (uint8)(adr >> 8);
    1d1a:	0a0b      	lsrs	r3, r1, #8
    1d1c:	b2db      	uxtb	r3, r3
			if(clockless)  bc[1] |= (1 << 7);
    1d1e:	2d00      	cmp	r5, #0
    1d20:	d107      	bne.n	1d32 <spi_cmd+0x52>
			bc[1] = (uint8)(adr >> 8);
    1d22:	aa01      	add	r2, sp, #4
    1d24:	7053      	strb	r3, [r2, #1]
			bc[2] = (uint8)adr;
    1d26:	ab01      	add	r3, sp, #4
    1d28:	7099      	strb	r1, [r3, #2]
			bc[3] = 0x00;
    1d2a:	2200      	movs	r2, #0
    1d2c:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d2e:	2105      	movs	r1, #5
			break;
    1d30:	e7ec      	b.n	1d0c <spi_cmd+0x2c>
			if(clockless)  bc[1] |= (1 << 7);
    1d32:	2280      	movs	r2, #128	; 0x80
    1d34:	4252      	negs	r2, r2
    1d36:	4313      	orrs	r3, r2
    1d38:	aa01      	add	r2, sp, #4
    1d3a:	7053      	strb	r3, [r2, #1]
    1d3c:	e7f3      	b.n	1d26 <spi_cmd+0x46>
			bc[1] = 0x00;
    1d3e:	ab01      	add	r3, sp, #4
    1d40:	2200      	movs	r2, #0
    1d42:	705a      	strb	r2, [r3, #1]
			bc[2] = 0x00;
    1d44:	709a      	strb	r2, [r3, #2]
			bc[3] = 0x00;
    1d46:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d48:	2105      	movs	r1, #5
			break;
    1d4a:	e7df      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = 0x00;
    1d4c:	ab01      	add	r3, sp, #4
    1d4e:	2200      	movs	r2, #0
    1d50:	705a      	strb	r2, [r3, #1]
			bc[2] = 0x00;
    1d52:	709a      	strb	r2, [r3, #2]
			bc[3] = 0x00;
    1d54:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d56:	2105      	movs	r1, #5
			break;
    1d58:	e7d8      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = 0xff;
    1d5a:	ab01      	add	r3, sp, #4
    1d5c:	22ff      	movs	r2, #255	; 0xff
    1d5e:	705a      	strb	r2, [r3, #1]
			bc[2] = 0xff;
    1d60:	709a      	strb	r2, [r3, #2]
			bc[3] = 0xff;
    1d62:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d64:	2105      	movs	r1, #5
			break;
    1d66:	e7d1      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 16);
    1d68:	aa01      	add	r2, sp, #4
    1d6a:	0c08      	lsrs	r0, r1, #16
    1d6c:	7050      	strb	r0, [r2, #1]
			bc[2] = (uint8)(adr >> 8);
    1d6e:	0a08      	lsrs	r0, r1, #8
    1d70:	7090      	strb	r0, [r2, #2]
			bc[3] = (uint8)adr;
    1d72:	70d1      	strb	r1, [r2, #3]
			bc[4] = (uint8)(sz >> 8);
    1d74:	0a19      	lsrs	r1, r3, #8
    1d76:	7111      	strb	r1, [r2, #4]
			bc[5] = (uint8)(sz);
    1d78:	7153      	strb	r3, [r2, #5]
			len = 7;
    1d7a:	2107      	movs	r1, #7
			break;
    1d7c:	e7c6      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 16);
    1d7e:	aa01      	add	r2, sp, #4
    1d80:	0c08      	lsrs	r0, r1, #16
    1d82:	7050      	strb	r0, [r2, #1]
			bc[2] = (uint8)(adr >> 8);
    1d84:	0a08      	lsrs	r0, r1, #8
    1d86:	7090      	strb	r0, [r2, #2]
			bc[3] = (uint8)adr;
    1d88:	70d1      	strb	r1, [r2, #3]
			bc[4] = (uint8)(sz >> 16);
    1d8a:	0c19      	lsrs	r1, r3, #16
    1d8c:	7111      	strb	r1, [r2, #4]
			bc[5] = (uint8)(sz >> 8);
    1d8e:	0a19      	lsrs	r1, r3, #8
    1d90:	7151      	strb	r1, [r2, #5]
			bc[6] = (uint8)(sz);
    1d92:	7193      	strb	r3, [r2, #6]
			len = 8;
    1d94:	2108      	movs	r1, #8
			break;
    1d96:	e7b9      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 8);
    1d98:	0a0b      	lsrs	r3, r1, #8
    1d9a:	b2db      	uxtb	r3, r3
			if(clockless)  bc[1] |= (1 << 7);
    1d9c:	2d00      	cmp	r5, #0
    1d9e:	d10c      	bne.n	1dba <spi_cmd+0xda>
			bc[1] = (uint8)(adr >> 8);
    1da0:	a801      	add	r0, sp, #4
    1da2:	7043      	strb	r3, [r0, #1]
			bc[2] = (uint8)(adr);
    1da4:	ab01      	add	r3, sp, #4
    1da6:	7099      	strb	r1, [r3, #2]
			bc[3] = (uint8)(u32data >> 24);
    1da8:	0e11      	lsrs	r1, r2, #24
    1daa:	70d9      	strb	r1, [r3, #3]
			bc[4] = (uint8)(u32data >> 16);
    1dac:	0c11      	lsrs	r1, r2, #16
    1dae:	7119      	strb	r1, [r3, #4]
			bc[5] = (uint8)(u32data >> 8);
    1db0:	0a11      	lsrs	r1, r2, #8
    1db2:	7159      	strb	r1, [r3, #5]
			bc[6] = (uint8)(u32data);
    1db4:	719a      	strb	r2, [r3, #6]
			len = 8;
    1db6:	2108      	movs	r1, #8
			break;
    1db8:	e7a8      	b.n	1d0c <spi_cmd+0x2c>
			if(clockless)  bc[1] |= (1 << 7);
    1dba:	2080      	movs	r0, #128	; 0x80
    1dbc:	4240      	negs	r0, r0
    1dbe:	4303      	orrs	r3, r0
    1dc0:	a801      	add	r0, sp, #4
    1dc2:	7043      	strb	r3, [r0, #1]
    1dc4:	e7ee      	b.n	1da4 <spi_cmd+0xc4>
			bc[1] = (uint8)(adr >> 16);
    1dc6:	ab01      	add	r3, sp, #4
    1dc8:	0c08      	lsrs	r0, r1, #16
    1dca:	7058      	strb	r0, [r3, #1]
			bc[2] = (uint8)(adr >> 8);
    1dcc:	0a08      	lsrs	r0, r1, #8
    1dce:	7098      	strb	r0, [r3, #2]
			bc[3] = (uint8)(adr);
    1dd0:	70d9      	strb	r1, [r3, #3]
			bc[4] = (uint8)(u32data >> 24);
    1dd2:	0e11      	lsrs	r1, r2, #24
    1dd4:	7119      	strb	r1, [r3, #4]
			bc[5] = (uint8)(u32data >> 16);
    1dd6:	0c11      	lsrs	r1, r2, #16
    1dd8:	7159      	strb	r1, [r3, #5]
			bc[6] = (uint8)(u32data >> 8);
    1dda:	0a11      	lsrs	r1, r2, #8
    1ddc:	7199      	strb	r1, [r3, #6]
			bc[7] = (uint8)(u32data);
    1dde:	71da      	strb	r2, [r3, #7]
			len = 9;
    1de0:	2109      	movs	r1, #9
			break;
    1de2:	e793      	b.n	1d0c <spi_cmd+0x2c>

		if(M2M_SUCCESS != nmi_spi_write(bc, len)) 
		{
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1de4:	2234      	movs	r2, #52	; 0x34
    1de6:	32ff      	adds	r2, #255	; 0xff
    1de8:	4915      	ldr	r1, [pc, #84]	; (1e40 <spi_cmd+0x160>)
    1dea:	4816      	ldr	r0, [pc, #88]	; (1e44 <spi_cmd+0x164>)
    1dec:	4b16      	ldr	r3, [pc, #88]	; (1e48 <spi_cmd+0x168>)
    1dee:	4798      	blx	r3
    1df0:	4816      	ldr	r0, [pc, #88]	; (1e4c <spi_cmd+0x16c>)
    1df2:	4b17      	ldr	r3, [pc, #92]	; (1e50 <spi_cmd+0x170>)
    1df4:	4798      	blx	r3
    1df6:	200d      	movs	r0, #13
    1df8:	4b16      	ldr	r3, [pc, #88]	; (1e54 <spi_cmd+0x174>)
    1dfa:	4798      	blx	r3
			result = N_FAIL;
    1dfc:	2300      	movs	r3, #0
    1dfe:	e017      	b.n	1e30 <spi_cmd+0x150>
	switch(cmd) 
    1e00:	2300      	movs	r3, #0
    1e02:	e015      	b.n	1e30 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e04:	1e4e      	subs	r6, r1, #1
    1e06:	aa01      	add	r2, sp, #4
    1e08:	1995      	adds	r5, r2, r6
    1e0a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    1e0c:	4c12      	ldr	r4, [pc, #72]	; (1e58 <spi_cmd+0x178>)
    1e0e:	005b      	lsls	r3, r3, #1
    1e10:	7810      	ldrb	r0, [r2, #0]
    1e12:	4043      	eors	r3, r0
    1e14:	5ce3      	ldrb	r3, [r4, r3]
    1e16:	3201      	adds	r2, #1
	while (len--)
    1e18:	42aa      	cmp	r2, r5
    1e1a:	d1f8      	bne.n	1e0e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e1c:	005b      	lsls	r3, r3, #1
    1e1e:	aa01      	add	r2, sp, #4
    1e20:	5593      	strb	r3, [r2, r6]
		if(M2M_SUCCESS != nmi_spi_write(bc, len)) 
    1e22:	b289      	uxth	r1, r1
    1e24:	a801      	add	r0, sp, #4
    1e26:	4b0d      	ldr	r3, [pc, #52]	; (1e5c <spi_cmd+0x17c>)
    1e28:	4798      	blx	r3
    1e2a:	2301      	movs	r3, #1
    1e2c:	2800      	cmp	r0, #0
    1e2e:	d1d9      	bne.n	1de4 <spi_cmd+0x104>
		}
	}

	return result;
}
    1e30:	0018      	movs	r0, r3
    1e32:	b004      	add	sp, #16
    1e34:	bd70      	pop	{r4, r5, r6, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	00009a94 	.word	0x00009a94
    1e3c:	200000a0 	.word	0x200000a0
    1e40:	00009ad4 	.word	0x00009ad4
    1e44:	00009410 	.word	0x00009410
    1e48:	0000818d 	.word	0x0000818d
    1e4c:	00009f64 	.word	0x00009f64
    1e50:	000082a9 	.word	0x000082a9
    1e54:	000081c1 	.word	0x000081c1
    1e58:	00009b60 	.word	0x00009b60
    1e5c:	00001cc1 	.word	0x00001cc1

00001e60 <nmi_spi_read>:
{
    1e60:	b500      	push	{lr}
    1e62:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    1e64:	ab01      	add	r3, sp, #4
    1e66:	2200      	movs	r2, #0
    1e68:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1e6a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1e6c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1e6e:	0019      	movs	r1, r3
    1e70:	2003      	movs	r0, #3
    1e72:	4b02      	ldr	r3, [pc, #8]	; (1e7c <nmi_spi_read+0x1c>)
    1e74:	4798      	blx	r3
}
    1e76:	b005      	add	sp, #20
    1e78:	bd00      	pop	{pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	00000365 	.word	0x00000365

00001e80 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e82:	46c6      	mov	lr, r8
    1e84:	b500      	push	{lr}
    1e86:	b082      	sub	sp, #8
    1e88:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1e8a:	28cf      	cmp	r0, #207	; 0xcf
    1e8c:	d02b      	beq.n	1ee6 <spi_cmd_rsp+0x66>
    1e8e:	0003      	movs	r3, r0
    1e90:	333b      	adds	r3, #59	; 0x3b
    1e92:	b2db      	uxtb	r3, r3
    1e94:	2b01      	cmp	r3, #1
    1e96:	d926      	bls.n	1ee6 <spi_cmd_rsp+0x66>
{
    1e98:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1e9a:	466b      	mov	r3, sp
    1e9c:	1dde      	adds	r6, r3, #7
    1e9e:	4b26      	ldr	r3, [pc, #152]	; (1f38 <spi_cmd_rsp+0xb8>)
    1ea0:	4698      	mov	r8, r3
    1ea2:	2101      	movs	r1, #1
    1ea4:	0030      	movs	r0, r6
    1ea6:	47c0      	blx	r8
    1ea8:	1e05      	subs	r5, r0, #0
    1eaa:	d125      	bne.n	1ef8 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1eac:	7833      	ldrb	r3, [r6, #0]
    1eae:	42bb      	cmp	r3, r7
    1eb0:	d030      	beq.n	1f14 <spi_cmd_rsp+0x94>
    1eb2:	3c01      	subs	r4, #1
    1eb4:	b2e4      	uxtb	r4, r4
    1eb6:	2c00      	cmp	r4, #0
    1eb8:	d1f3      	bne.n	1ea2 <spi_cmd_rsp+0x22>
    1eba:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ebc:	466b      	mov	r3, sp
    1ebe:	1dde      	adds	r6, r3, #7
    1ec0:	4f1d      	ldr	r7, [pc, #116]	; (1f38 <spi_cmd_rsp+0xb8>)
    1ec2:	2101      	movs	r1, #1
    1ec4:	0030      	movs	r0, r6
    1ec6:	47b8      	blx	r7
    1ec8:	2800      	cmp	r0, #0
    1eca:	d125      	bne.n	1f18 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1ecc:	7833      	ldrb	r3, [r6, #0]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d02f      	beq.n	1f32 <spi_cmd_rsp+0xb2>
    1ed2:	3c01      	subs	r4, #1
    1ed4:	b2e4      	uxtb	r4, r4
    1ed6:	2c00      	cmp	r4, #0
    1ed8:	d1f3      	bne.n	1ec2 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    1eda:	2501      	movs	r5, #1

_fail_:

	return result;
}
    1edc:	0028      	movs	r0, r5
    1ede:	b002      	add	sp, #8
    1ee0:	bc04      	pop	{r2}
    1ee2:	4690      	mov	r8, r2
    1ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ee6:	2101      	movs	r1, #1
    1ee8:	466b      	mov	r3, sp
    1eea:	1dd8      	adds	r0, r3, #7
    1eec:	4b12      	ldr	r3, [pc, #72]	; (1f38 <spi_cmd_rsp+0xb8>)
    1eee:	4798      	blx	r3
			result = N_FAIL;
    1ef0:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ef2:	2800      	cmp	r0, #0
    1ef4:	d0d0      	beq.n	1e98 <spi_cmd_rsp+0x18>
    1ef6:	e7f1      	b.n	1edc <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1ef8:	22b7      	movs	r2, #183	; 0xb7
    1efa:	0052      	lsls	r2, r2, #1
    1efc:	490f      	ldr	r1, [pc, #60]	; (1f3c <spi_cmd_rsp+0xbc>)
    1efe:	4810      	ldr	r0, [pc, #64]	; (1f40 <spi_cmd_rsp+0xc0>)
    1f00:	4b10      	ldr	r3, [pc, #64]	; (1f44 <spi_cmd_rsp+0xc4>)
    1f02:	4798      	blx	r3
    1f04:	4810      	ldr	r0, [pc, #64]	; (1f48 <spi_cmd_rsp+0xc8>)
    1f06:	4b11      	ldr	r3, [pc, #68]	; (1f4c <spi_cmd_rsp+0xcc>)
    1f08:	4798      	blx	r3
    1f0a:	200d      	movs	r0, #13
    1f0c:	4b10      	ldr	r3, [pc, #64]	; (1f50 <spi_cmd_rsp+0xd0>)
    1f0e:	4798      	blx	r3
			result = N_FAIL;
    1f10:	2500      	movs	r5, #0
			goto _fail_;
    1f12:	e7e3      	b.n	1edc <spi_cmd_rsp+0x5c>
    1f14:	240b      	movs	r4, #11
    1f16:	e7d1      	b.n	1ebc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1f18:	22be      	movs	r2, #190	; 0xbe
    1f1a:	0052      	lsls	r2, r2, #1
    1f1c:	4907      	ldr	r1, [pc, #28]	; (1f3c <spi_cmd_rsp+0xbc>)
    1f1e:	4808      	ldr	r0, [pc, #32]	; (1f40 <spi_cmd_rsp+0xc0>)
    1f20:	4b08      	ldr	r3, [pc, #32]	; (1f44 <spi_cmd_rsp+0xc4>)
    1f22:	4798      	blx	r3
    1f24:	4808      	ldr	r0, [pc, #32]	; (1f48 <spi_cmd_rsp+0xc8>)
    1f26:	4b09      	ldr	r3, [pc, #36]	; (1f4c <spi_cmd_rsp+0xcc>)
    1f28:	4798      	blx	r3
    1f2a:	200d      	movs	r0, #13
    1f2c:	4b08      	ldr	r3, [pc, #32]	; (1f50 <spi_cmd_rsp+0xd0>)
    1f2e:	4798      	blx	r3
			goto _fail_;
    1f30:	e7d4      	b.n	1edc <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1f32:	2501      	movs	r5, #1
    1f34:	e7d2      	b.n	1edc <spi_cmd_rsp+0x5c>
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	00001e61 	.word	0x00001e61
    1f3c:	00009aec 	.word	0x00009aec
    1f40:	00009410 	.word	0x00009410
    1f44:	0000818d 	.word	0x0000818d
    1f48:	00009f90 	.word	0x00009f90
    1f4c:	000082a9 	.word	0x000082a9
    1f50:	000081c1 	.word	0x000081c1

00001f54 <spi_data_read>:
	return result;
}
#endif

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f56:	46de      	mov	lr, fp
    1f58:	4657      	mov	r7, sl
    1f5a:	464e      	mov	r6, r9
    1f5c:	4645      	mov	r5, r8
    1f5e:	b5e0      	push	{r5, r6, r7, lr}
    1f60:	b087      	sub	sp, #28
    1f62:	9001      	str	r0, [sp, #4]
    1f64:	4689      	mov	r9, r1
    1f66:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1f68:	2300      	movs	r3, #0
    1f6a:	469a      	mov	sl, r3
    1f6c:	2380      	movs	r3, #128	; 0x80
    1f6e:	019b      	lsls	r3, r3, #6
    1f70:	469b      	mov	fp, r3
    1f72:	466a      	mov	r2, sp
    1f74:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do{
			if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) 
    1f76:	4b3b      	ldr	r3, [pc, #236]	; (2064 <STACK_SIZE+0x64>)
    1f78:	4698      	mov	r8, r3
    1f7a:	e02f      	b.n	1fdc <spi_data_read+0x88>
			{
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1f7c:	22c3      	movs	r2, #195	; 0xc3
    1f7e:	0092      	lsls	r2, r2, #2
    1f80:	4939      	ldr	r1, [pc, #228]	; (2068 <STACK_SIZE+0x68>)
    1f82:	483a      	ldr	r0, [pc, #232]	; (206c <STACK_SIZE+0x6c>)
    1f84:	4b3a      	ldr	r3, [pc, #232]	; (2070 <STACK_SIZE+0x70>)
    1f86:	4798      	blx	r3
    1f88:	483a      	ldr	r0, [pc, #232]	; (2074 <STACK_SIZE+0x74>)
    1f8a:	4b3b      	ldr	r3, [pc, #236]	; (2078 <STACK_SIZE+0x78>)
    1f8c:	4798      	blx	r3
    1f8e:	200d      	movs	r0, #13
    1f90:	4b3a      	ldr	r3, [pc, #232]	; (207c <STACK_SIZE+0x7c>)
    1f92:	4798      	blx	r3
    1f94:	2500      	movs	r5, #0
		sz -= nbytes;

	}while(sz);

	return result;
}
    1f96:	0028      	movs	r0, r5
    1f98:	b007      	add	sp, #28
    1f9a:	bc3c      	pop	{r2, r3, r4, r5}
    1f9c:	4690      	mov	r8, r2
    1f9e:	4699      	mov	r9, r3
    1fa0:	46a2      	mov	sl, r4
    1fa2:	46ab      	mov	fp, r5
    1fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(retry <= 0) 
    1fa6:	2c00      	cmp	r4, #0
    1fa8:	dd2e      	ble.n	2008 <STACK_SIZE+0x8>
		if(M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) 
    1faa:	9b01      	ldr	r3, [sp, #4]
    1fac:	4453      	add	r3, sl
    1fae:	0018      	movs	r0, r3
    1fb0:	0039      	movs	r1, r7
    1fb2:	4b2c      	ldr	r3, [pc, #176]	; (2064 <STACK_SIZE+0x64>)
    1fb4:	4798      	blx	r3
    1fb6:	1e04      	subs	r4, r0, #0
    1fb8:	d133      	bne.n	2022 <STACK_SIZE+0x22>
		if(!clockless)
    1fba:	9b02      	ldr	r3, [sp, #8]
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d103      	bne.n	1fc8 <spi_data_read+0x74>
			if(!gu8Crc_off) 
    1fc0:	4b2f      	ldr	r3, [pc, #188]	; (2080 <STACK_SIZE+0x80>)
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d038      	beq.n	203a <STACK_SIZE+0x3a>
		ix += nbytes;
    1fc8:	4653      	mov	r3, sl
    1fca:	18fb      	adds	r3, r7, r3
    1fcc:	b21b      	sxth	r3, r3
    1fce:	469a      	mov	sl, r3
		sz -= nbytes;
    1fd0:	464b      	mov	r3, r9
    1fd2:	1bdf      	subs	r7, r3, r7
    1fd4:	b2bb      	uxth	r3, r7
    1fd6:	4699      	mov	r9, r3
	}while(sz);
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d041      	beq.n	2060 <STACK_SIZE+0x60>
    1fdc:	464f      	mov	r7, r9
    1fde:	45d9      	cmp	r9, fp
    1fe0:	d901      	bls.n	1fe6 <spi_data_read+0x92>
    1fe2:	466b      	mov	r3, sp
    1fe4:	89df      	ldrh	r7, [r3, #14]
    1fe6:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    1fe8:	240a      	movs	r4, #10
			if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) 
    1fea:	ab04      	add	r3, sp, #16
    1fec:	1cde      	adds	r6, r3, #3
    1fee:	2101      	movs	r1, #1
    1ff0:	0030      	movs	r0, r6
    1ff2:	47c0      	blx	r8
    1ff4:	1e05      	subs	r5, r0, #0
    1ff6:	d1c1      	bne.n	1f7c <spi_data_read+0x28>
			if(((rsp >> 4) & 0xf) == 0xf){break;}
    1ff8:	7833      	ldrb	r3, [r6, #0]
    1ffa:	091b      	lsrs	r3, r3, #4
    1ffc:	2b0f      	cmp	r3, #15
    1ffe:	d0d2      	beq.n	1fa6 <spi_data_read+0x52>
    2000:	3c01      	subs	r4, #1
    2002:	b224      	sxth	r4, r4
		} while (retry--);
    2004:	1c63      	adds	r3, r4, #1
    2006:	d1f2      	bne.n	1fee <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2008:	4a1e      	ldr	r2, [pc, #120]	; (2084 <STACK_SIZE+0x84>)
    200a:	4917      	ldr	r1, [pc, #92]	; (2068 <STACK_SIZE+0x68>)
    200c:	4817      	ldr	r0, [pc, #92]	; (206c <STACK_SIZE+0x6c>)
    200e:	4c18      	ldr	r4, [pc, #96]	; (2070 <STACK_SIZE+0x70>)
    2010:	47a0      	blx	r4
    2012:	ab04      	add	r3, sp, #16
    2014:	78d9      	ldrb	r1, [r3, #3]
    2016:	481c      	ldr	r0, [pc, #112]	; (2088 <STACK_SIZE+0x88>)
    2018:	47a0      	blx	r4
    201a:	200d      	movs	r0, #13
    201c:	4b17      	ldr	r3, [pc, #92]	; (207c <STACK_SIZE+0x7c>)
    201e:	4798      	blx	r3
			break;
    2020:	e7b9      	b.n	1f96 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2022:	4a1a      	ldr	r2, [pc, #104]	; (208c <STACK_SIZE+0x8c>)
    2024:	4910      	ldr	r1, [pc, #64]	; (2068 <STACK_SIZE+0x68>)
    2026:	4811      	ldr	r0, [pc, #68]	; (206c <STACK_SIZE+0x6c>)
    2028:	4b11      	ldr	r3, [pc, #68]	; (2070 <STACK_SIZE+0x70>)
    202a:	4798      	blx	r3
    202c:	4818      	ldr	r0, [pc, #96]	; (2090 <STACK_SIZE+0x90>)
    202e:	4b12      	ldr	r3, [pc, #72]	; (2078 <STACK_SIZE+0x78>)
    2030:	4798      	blx	r3
    2032:	200d      	movs	r0, #13
    2034:	4b11      	ldr	r3, [pc, #68]	; (207c <STACK_SIZE+0x7c>)
    2036:	4798      	blx	r3
			break;
    2038:	e7ad      	b.n	1f96 <spi_data_read+0x42>
				if(M2M_SUCCESS != nmi_spi_read(crc, 2)) 
    203a:	2102      	movs	r1, #2
    203c:	a805      	add	r0, sp, #20
    203e:	4b09      	ldr	r3, [pc, #36]	; (2064 <STACK_SIZE+0x64>)
    2040:	4798      	blx	r3
    2042:	2800      	cmp	r0, #0
    2044:	d0c0      	beq.n	1fc8 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2046:	4a13      	ldr	r2, [pc, #76]	; (2094 <STACK_SIZE+0x94>)
    2048:	4907      	ldr	r1, [pc, #28]	; (2068 <STACK_SIZE+0x68>)
    204a:	4808      	ldr	r0, [pc, #32]	; (206c <STACK_SIZE+0x6c>)
    204c:	4b08      	ldr	r3, [pc, #32]	; (2070 <STACK_SIZE+0x70>)
    204e:	4798      	blx	r3
    2050:	4811      	ldr	r0, [pc, #68]	; (2098 <STACK_SIZE+0x98>)
    2052:	4b09      	ldr	r3, [pc, #36]	; (2078 <STACK_SIZE+0x78>)
    2054:	4798      	blx	r3
    2056:	200d      	movs	r0, #13
    2058:	4b08      	ldr	r3, [pc, #32]	; (207c <STACK_SIZE+0x7c>)
    205a:	4798      	blx	r3
					result = N_FAIL;
    205c:	0025      	movs	r5, r4
					break;
    205e:	e79a      	b.n	1f96 <spi_data_read+0x42>
    2060:	2501      	movs	r5, #1
    2062:	e798      	b.n	1f96 <spi_data_read+0x42>
    2064:	00001e61 	.word	0x00001e61
    2068:	00009af8 	.word	0x00009af8
    206c:	00009410 	.word	0x00009410
    2070:	0000818d 	.word	0x0000818d
    2074:	00009fc4 	.word	0x00009fc4
    2078:	000082a9 	.word	0x000082a9
    207c:	000081c1 	.word	0x000081c1
    2080:	200000a0 	.word	0x200000a0
    2084:	00000317 	.word	0x00000317
    2088:	00009ff8 	.word	0x00009ff8
    208c:	00000321 	.word	0x00000321
    2090:	0000a028 	.word	0x0000a028
    2094:	0000032f 	.word	0x0000032f
    2098:	0000a058 	.word	0x0000a058

0000209c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    209c:	b5f0      	push	{r4, r5, r6, r7, lr}
    209e:	46d6      	mov	lr, sl
    20a0:	464f      	mov	r7, r9
    20a2:	4646      	mov	r6, r8
    20a4:	b5c0      	push	{r6, r7, lr}
    20a6:	b086      	sub	sp, #24
    20a8:	9003      	str	r0, [sp, #12]
    20aa:	9104      	str	r1, [sp, #16]
    20ac:	2830      	cmp	r0, #48	; 0x30
    20ae:	d80f      	bhi.n	20d0 <spi_write_reg+0x34>
    20b0:	4b30      	ldr	r3, [pc, #192]	; (2174 <spi_write_reg+0xd8>)
    20b2:	781f      	ldrb	r7, [r3, #0]
    20b4:	b2fb      	uxtb	r3, r7
    20b6:	9305      	str	r3, [sp, #20]
    20b8:	2300      	movs	r3, #0
    20ba:	2230      	movs	r2, #48	; 0x30
    20bc:	9903      	ldr	r1, [sp, #12]
    20be:	428a      	cmp	r2, r1
    20c0:	415b      	adcs	r3, r3
    20c2:	b2db      	uxtb	r3, r3
    20c4:	469a      	mov	sl, r3
    20c6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    20c8:	4b2b      	ldr	r3, [pc, #172]	; (2178 <spi_write_reg+0xdc>)
    20ca:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20cc:	46d1      	mov	r9, sl
    20ce:	e033      	b.n	2138 <spi_write_reg+0x9c>
    20d0:	4b2a      	ldr	r3, [pc, #168]	; (217c <spi_write_reg+0xe0>)
    20d2:	781f      	ldrb	r7, [r3, #0]
    20d4:	e7ee      	b.n	20b4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    20d6:	9805      	ldr	r0, [sp, #20]
    20d8:	4b29      	ldr	r3, [pc, #164]	; (2180 <spi_write_reg+0xe4>)
    20da:	4798      	blx	r3
    20dc:	0004      	movs	r4, r0
	if (result != N_OK) {
    20de:	2801      	cmp	r0, #1
    20e0:	d041      	beq.n	2166 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20e2:	4a28      	ldr	r2, [pc, #160]	; (2184 <spi_write_reg+0xe8>)
    20e4:	4928      	ldr	r1, [pc, #160]	; (2188 <spi_write_reg+0xec>)
    20e6:	4829      	ldr	r0, [pc, #164]	; (218c <spi_write_reg+0xf0>)
    20e8:	4e29      	ldr	r6, [pc, #164]	; (2190 <spi_write_reg+0xf4>)
    20ea:	47b0      	blx	r6
    20ec:	9903      	ldr	r1, [sp, #12]
    20ee:	4829      	ldr	r0, [pc, #164]	; (2194 <spi_write_reg+0xf8>)
    20f0:	47b0      	blx	r6
    20f2:	200d      	movs	r0, #13
    20f4:	4b28      	ldr	r3, [pc, #160]	; (2198 <spi_write_reg+0xfc>)
    20f6:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    20f8:	2001      	movs	r0, #1
    20fa:	4e28      	ldr	r6, [pc, #160]	; (219c <spi_write_reg+0x100>)
    20fc:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    20fe:	2300      	movs	r3, #0
    2100:	9300      	str	r3, [sp, #0]
    2102:	2200      	movs	r2, #0
    2104:	2100      	movs	r1, #0
    2106:	20cf      	movs	r0, #207	; 0xcf
    2108:	4f1b      	ldr	r7, [pc, #108]	; (2178 <spi_write_reg+0xdc>)
    210a:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    210c:	20cf      	movs	r0, #207	; 0xcf
    210e:	4b1c      	ldr	r3, [pc, #112]	; (2180 <spi_write_reg+0xe4>)
    2110:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    2112:	22f0      	movs	r2, #240	; 0xf0
    2114:	0092      	lsls	r2, r2, #2
    2116:	491c      	ldr	r1, [pc, #112]	; (2188 <spi_write_reg+0xec>)
    2118:	481c      	ldr	r0, [pc, #112]	; (218c <spi_write_reg+0xf0>)
    211a:	4f1d      	ldr	r7, [pc, #116]	; (2190 <spi_write_reg+0xf4>)
    211c:	47b8      	blx	r7
    211e:	9b04      	ldr	r3, [sp, #16]
    2120:	9a03      	ldr	r2, [sp, #12]
    2122:	0029      	movs	r1, r5
    2124:	481e      	ldr	r0, [pc, #120]	; (21a0 <spi_write_reg+0x104>)
    2126:	47b8      	blx	r7
    2128:	200d      	movs	r0, #13
    212a:	4b1b      	ldr	r3, [pc, #108]	; (2198 <spi_write_reg+0xfc>)
    212c:	4798      	blx	r3
		nm_bsp_sleep(1);
    212e:	2001      	movs	r0, #1
    2130:	47b0      	blx	r6
    2132:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2134:	2d00      	cmp	r5, #0
    2136:	d016      	beq.n	2166 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2138:	464b      	mov	r3, r9
    213a:	9300      	str	r3, [sp, #0]
    213c:	2304      	movs	r3, #4
    213e:	9a04      	ldr	r2, [sp, #16]
    2140:	9f03      	ldr	r7, [sp, #12]
    2142:	0039      	movs	r1, r7
    2144:	9805      	ldr	r0, [sp, #20]
    2146:	47c0      	blx	r8
    2148:	0004      	movs	r4, r0
	if (result != N_OK) {
    214a:	2801      	cmp	r0, #1
    214c:	d0c3      	beq.n	20d6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    214e:	4a15      	ldr	r2, [pc, #84]	; (21a4 <spi_write_reg+0x108>)
    2150:	490d      	ldr	r1, [pc, #52]	; (2188 <spi_write_reg+0xec>)
    2152:	480e      	ldr	r0, [pc, #56]	; (218c <spi_write_reg+0xf0>)
    2154:	4e0e      	ldr	r6, [pc, #56]	; (2190 <spi_write_reg+0xf4>)
    2156:	47b0      	blx	r6
    2158:	0039      	movs	r1, r7
    215a:	4813      	ldr	r0, [pc, #76]	; (21a8 <spi_write_reg+0x10c>)
    215c:	47b0      	blx	r6
    215e:	200d      	movs	r0, #13
    2160:	4b0d      	ldr	r3, [pc, #52]	; (2198 <spi_write_reg+0xfc>)
    2162:	4798      	blx	r3
		goto _FAIL_;
    2164:	e7c8      	b.n	20f8 <spi_write_reg+0x5c>
	}

	return result;
}
    2166:	0020      	movs	r0, r4
    2168:	b006      	add	sp, #24
    216a:	bc1c      	pop	{r2, r3, r4}
    216c:	4690      	mov	r8, r2
    216e:	4699      	mov	r9, r3
    2170:	46a2      	mov	sl, r4
    2172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2174:	00009ad0 	.word	0x00009ad0
    2178:	00001ce1 	.word	0x00001ce1
    217c:	00009ad1 	.word	0x00009ad1
    2180:	00001e81 	.word	0x00001e81
    2184:	000003ad 	.word	0x000003ad
    2188:	00009b18 	.word	0x00009b18
    218c:	00009410 	.word	0x00009410
    2190:	0000818d 	.word	0x0000818d
    2194:	0000a150 	.word	0x0000a150
    2198:	000081c1 	.word	0x000081c1
    219c:	00000129 	.word	0x00000129
    21a0:	0000a188 	.word	0x0000a188
    21a4:	000003a7 	.word	0x000003a7
    21a8:	0000a124 	.word	0x0000a124

000021ac <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    21ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ae:	46de      	mov	lr, fp
    21b0:	4657      	mov	r7, sl
    21b2:	464e      	mov	r6, r9
    21b4:	4645      	mov	r5, r8
    21b6:	b5e0      	push	{r5, r6, r7, lr}
    21b8:	b087      	sub	sp, #28
    21ba:	9002      	str	r0, [sp, #8]
    21bc:	468b      	mov	fp, r1
    21be:	28ff      	cmp	r0, #255	; 0xff
    21c0:	d80f      	bhi.n	21e2 <spi_read_reg+0x36>
    21c2:	4b42      	ldr	r3, [pc, #264]	; (22cc <spi_read_reg+0x120>)
    21c4:	781f      	ldrb	r7, [r3, #0]
    21c6:	b2fb      	uxtb	r3, r7
    21c8:	9303      	str	r3, [sp, #12]
    21ca:	2300      	movs	r3, #0
    21cc:	22ff      	movs	r2, #255	; 0xff
    21ce:	9902      	ldr	r1, [sp, #8]
    21d0:	428a      	cmp	r2, r1
    21d2:	415b      	adcs	r3, r3
    21d4:	b2db      	uxtb	r3, r3
    21d6:	469a      	mov	sl, r3
    21d8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    21da:	4b3d      	ldr	r3, [pc, #244]	; (22d0 <spi_read_reg+0x124>)
    21dc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    21de:	46d1      	mov	r9, sl
    21e0:	e032      	b.n	2248 <spi_read_reg+0x9c>
    21e2:	4b3c      	ldr	r3, [pc, #240]	; (22d4 <spi_read_reg+0x128>)
    21e4:	781f      	ldrb	r7, [r3, #0]
    21e6:	e7ee      	b.n	21c6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    21e8:	9803      	ldr	r0, [sp, #12]
    21ea:	4b3b      	ldr	r3, [pc, #236]	; (22d8 <spi_read_reg+0x12c>)
    21ec:	4798      	blx	r3
    21ee:	0004      	movs	r4, r0
	if(result != N_OK) 
    21f0:	2801      	cmp	r0, #1
    21f2:	d040      	beq.n	2276 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    21f4:	2286      	movs	r2, #134	; 0x86
    21f6:	00d2      	lsls	r2, r2, #3
    21f8:	4938      	ldr	r1, [pc, #224]	; (22dc <spi_read_reg+0x130>)
    21fa:	4839      	ldr	r0, [pc, #228]	; (22e0 <spi_read_reg+0x134>)
    21fc:	4e39      	ldr	r6, [pc, #228]	; (22e4 <spi_read_reg+0x138>)
    21fe:	47b0      	blx	r6
    2200:	9902      	ldr	r1, [sp, #8]
    2202:	4839      	ldr	r0, [pc, #228]	; (22e8 <spi_read_reg+0x13c>)
    2204:	47b0      	blx	r6
    2206:	200d      	movs	r0, #13
    2208:	4b38      	ldr	r3, [pc, #224]	; (22ec <spi_read_reg+0x140>)
    220a:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    220c:	2001      	movs	r0, #1
    220e:	4e38      	ldr	r6, [pc, #224]	; (22f0 <spi_read_reg+0x144>)
    2210:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2212:	2300      	movs	r3, #0
    2214:	9300      	str	r3, [sp, #0]
    2216:	2200      	movs	r2, #0
    2218:	2100      	movs	r1, #0
    221a:	20cf      	movs	r0, #207	; 0xcf
    221c:	4f2c      	ldr	r7, [pc, #176]	; (22d0 <spi_read_reg+0x124>)
    221e:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2220:	20cf      	movs	r0, #207	; 0xcf
    2222:	4b2d      	ldr	r3, [pc, #180]	; (22d8 <spi_read_reg+0x12c>)
    2224:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    2226:	4a33      	ldr	r2, [pc, #204]	; (22f4 <spi_read_reg+0x148>)
    2228:	492c      	ldr	r1, [pc, #176]	; (22dc <spi_read_reg+0x130>)
    222a:	482d      	ldr	r0, [pc, #180]	; (22e0 <spi_read_reg+0x134>)
    222c:	4f2d      	ldr	r7, [pc, #180]	; (22e4 <spi_read_reg+0x138>)
    222e:	47b8      	blx	r7
    2230:	9a02      	ldr	r2, [sp, #8]
    2232:	0029      	movs	r1, r5
    2234:	4830      	ldr	r0, [pc, #192]	; (22f8 <spi_read_reg+0x14c>)
    2236:	47b8      	blx	r7
    2238:	200d      	movs	r0, #13
    223a:	4b2c      	ldr	r3, [pc, #176]	; (22ec <spi_read_reg+0x140>)
    223c:	4798      	blx	r3
		nm_bsp_sleep(1);
    223e:	2001      	movs	r0, #1
    2240:	47b0      	blx	r6
    2242:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2244:	2d00      	cmp	r5, #0
    2246:	d038      	beq.n	22ba <spi_read_reg+0x10e>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2248:	464b      	mov	r3, r9
    224a:	9300      	str	r3, [sp, #0]
    224c:	2304      	movs	r3, #4
    224e:	2200      	movs	r2, #0
    2250:	9f02      	ldr	r7, [sp, #8]
    2252:	0039      	movs	r1, r7
    2254:	9803      	ldr	r0, [sp, #12]
    2256:	47c0      	blx	r8
    2258:	0004      	movs	r4, r0
	if(result != N_OK) 
    225a:	2801      	cmp	r0, #1
    225c:	d0c4      	beq.n	21e8 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    225e:	4a27      	ldr	r2, [pc, #156]	; (22fc <spi_read_reg+0x150>)
    2260:	491e      	ldr	r1, [pc, #120]	; (22dc <spi_read_reg+0x130>)
    2262:	481f      	ldr	r0, [pc, #124]	; (22e0 <spi_read_reg+0x134>)
    2264:	4e1f      	ldr	r6, [pc, #124]	; (22e4 <spi_read_reg+0x138>)
    2266:	47b0      	blx	r6
    2268:	0039      	movs	r1, r7
    226a:	4825      	ldr	r0, [pc, #148]	; (2300 <spi_read_reg+0x154>)
    226c:	47b0      	blx	r6
    226e:	200d      	movs	r0, #13
    2270:	4b1e      	ldr	r3, [pc, #120]	; (22ec <spi_read_reg+0x140>)
    2272:	4798      	blx	r3
		goto _FAIL_;
    2274:	e7ca      	b.n	220c <spi_read_reg+0x60>
	result = spi_data_read(&tmp[0], 4, clockless);
    2276:	464a      	mov	r2, r9
    2278:	2104      	movs	r1, #4
    227a:	a805      	add	r0, sp, #20
    227c:	4b21      	ldr	r3, [pc, #132]	; (2304 <spi_read_reg+0x158>)
    227e:	4798      	blx	r3
    2280:	0004      	movs	r4, r0
	if(result != N_OK) 
    2282:	2801      	cmp	r0, #1
    2284:	d00c      	beq.n	22a0 <spi_read_reg+0xf4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2286:	2287      	movs	r2, #135	; 0x87
    2288:	00d2      	lsls	r2, r2, #3
    228a:	4914      	ldr	r1, [pc, #80]	; (22dc <spi_read_reg+0x130>)
    228c:	4814      	ldr	r0, [pc, #80]	; (22e0 <spi_read_reg+0x134>)
    228e:	4b15      	ldr	r3, [pc, #84]	; (22e4 <spi_read_reg+0x138>)
    2290:	4798      	blx	r3
    2292:	481d      	ldr	r0, [pc, #116]	; (2308 <spi_read_reg+0x15c>)
    2294:	4b1d      	ldr	r3, [pc, #116]	; (230c <spi_read_reg+0x160>)
    2296:	4798      	blx	r3
    2298:	200d      	movs	r0, #13
    229a:	4b14      	ldr	r3, [pc, #80]	; (22ec <spi_read_reg+0x140>)
    229c:	4798      	blx	r3
		goto _FAIL_;
    229e:	e7b5      	b.n	220c <spi_read_reg+0x60>
		((uint32)tmp[1] << 8) |
    22a0:	aa05      	add	r2, sp, #20
    22a2:	7853      	ldrb	r3, [r2, #1]
    22a4:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    22a6:	7891      	ldrb	r1, [r2, #2]
    22a8:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    22aa:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    22ac:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    22ae:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    22b0:	78d2      	ldrb	r2, [r2, #3]
    22b2:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    22b4:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    22b6:	465a      	mov	r2, fp
    22b8:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    22ba:	0020      	movs	r0, r4
    22bc:	b007      	add	sp, #28
    22be:	bc3c      	pop	{r2, r3, r4, r5}
    22c0:	4690      	mov	r8, r2
    22c2:	4699      	mov	r9, r3
    22c4:	46a2      	mov	sl, r4
    22c6:	46ab      	mov	fp, r5
    22c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	00009ad2 	.word	0x00009ad2
    22d0:	00001ce1 	.word	0x00001ce1
    22d4:	00009ad3 	.word	0x00009ad3
    22d8:	00001e81 	.word	0x00001e81
    22dc:	00009b38 	.word	0x00009b38
    22e0:	00009410 	.word	0x00009410
    22e4:	0000818d 	.word	0x0000818d
    22e8:	0000a0b8 	.word	0x0000a0b8
    22ec:	000081c1 	.word	0x000081c1
    22f0:	00000129 	.word	0x00000129
    22f4:	00000451 	.word	0x00000451
    22f8:	0000a10c 	.word	0x0000a10c
    22fc:	00000429 	.word	0x00000429
    2300:	0000a08c 	.word	0x0000a08c
    2304:	00001f55 	.word	0x00001f55
    2308:	0000a0ec 	.word	0x0000a0ec
    230c:	000082a9 	.word	0x000082a9

00002310 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    2310:	b510      	push	{r4, lr}
    2312:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2314:	2300      	movs	r3, #0
    2316:	9300      	str	r3, [sp, #0]
    2318:	2200      	movs	r2, #0
    231a:	2100      	movs	r1, #0
    231c:	20cf      	movs	r0, #207	; 0xcf
    231e:	4c04      	ldr	r4, [pc, #16]	; (2330 <nm_spi_reset+0x20>)
    2320:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    2322:	20cf      	movs	r0, #207	; 0xcf
    2324:	4b03      	ldr	r3, [pc, #12]	; (2334 <nm_spi_reset+0x24>)
    2326:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2328:	2000      	movs	r0, #0
    232a:	b002      	add	sp, #8
    232c:	bd10      	pop	{r4, pc}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	00001ce1 	.word	0x00001ce1
    2334:	00001e81 	.word	0x00001e81

00002338 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2338:	2200      	movs	r2, #0
    233a:	4b02      	ldr	r3, [pc, #8]	; (2344 <nm_spi_deinit+0xc>)
    233c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    233e:	2000      	movs	r0, #0
    2340:	4770      	bx	lr
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	200000a0 	.word	0x200000a0

00002348 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2348:	b500      	push	{lr}
    234a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    234c:	a901      	add	r1, sp, #4
    234e:	4b02      	ldr	r3, [pc, #8]	; (2358 <nm_spi_read_reg+0x10>)
    2350:	4798      	blx	r3

	return u32Val;
}
    2352:	9801      	ldr	r0, [sp, #4]
    2354:	b003      	add	sp, #12
    2356:	bd00      	pop	{pc}
    2358:	000021ad 	.word	0x000021ad

0000235c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    235c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    235e:	4b04      	ldr	r3, [pc, #16]	; (2370 <nm_spi_read_reg_with_ret+0x14>)
    2360:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2362:	2300      	movs	r3, #0
    2364:	2801      	cmp	r0, #1
    2366:	d101      	bne.n	236c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2368:	0018      	movs	r0, r3
    236a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    236c:	3b06      	subs	r3, #6
    236e:	e7fb      	b.n	2368 <nm_spi_read_reg_with_ret+0xc>
    2370:	000021ad 	.word	0x000021ad

00002374 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2374:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2376:	4b04      	ldr	r3, [pc, #16]	; (2388 <nm_spi_write_reg+0x14>)
    2378:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    237a:	2300      	movs	r3, #0
    237c:	2801      	cmp	r0, #1
    237e:	d101      	bne.n	2384 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2380:	0018      	movs	r0, r3
    2382:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2384:	3b06      	subs	r3, #6
    2386:	e7fb      	b.n	2380 <nm_spi_write_reg+0xc>
    2388:	0000209d 	.word	0x0000209d

0000238c <nm_spi_init>:
{
    238c:	b510      	push	{r4, lr}
    238e:	b082      	sub	sp, #8
	uint32 reg = 0;
    2390:	2300      	movs	r3, #0
    2392:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2394:	4a35      	ldr	r2, [pc, #212]	; (246c <nm_spi_init+0xe0>)
    2396:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2398:	4669      	mov	r1, sp
    239a:	4835      	ldr	r0, [pc, #212]	; (2470 <nm_spi_init+0xe4>)
    239c:	4b35      	ldr	r3, [pc, #212]	; (2474 <nm_spi_init+0xe8>)
    239e:	4798      	blx	r3
    23a0:	2800      	cmp	r0, #0
    23a2:	d028      	beq.n	23f6 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    23a4:	4b31      	ldr	r3, [pc, #196]	; (246c <nm_spi_init+0xe0>)
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d10d      	bne.n	23c8 <nm_spi_init+0x3c>
		reg &= ~0x70;
    23ac:	337c      	adds	r3, #124	; 0x7c
    23ae:	9900      	ldr	r1, [sp, #0]
    23b0:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    23b2:	3b2c      	subs	r3, #44	; 0x2c
    23b4:	4319      	orrs	r1, r3
    23b6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    23b8:	482d      	ldr	r0, [pc, #180]	; (2470 <nm_spi_init+0xe4>)
    23ba:	4b2f      	ldr	r3, [pc, #188]	; (2478 <nm_spi_init+0xec>)
    23bc:	4798      	blx	r3
    23be:	1e04      	subs	r4, r0, #0
    23c0:	d039      	beq.n	2436 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    23c2:	2201      	movs	r2, #1
    23c4:	4b29      	ldr	r3, [pc, #164]	; (246c <nm_spi_init+0xe0>)
    23c6:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    23c8:	a901      	add	r1, sp, #4
    23ca:	2080      	movs	r0, #128	; 0x80
    23cc:	0140      	lsls	r0, r0, #5
    23ce:	4b29      	ldr	r3, [pc, #164]	; (2474 <nm_spi_init+0xe8>)
    23d0:	4798      	blx	r3
    23d2:	2800      	cmp	r0, #0
    23d4:	d03b      	beq.n	244e <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    23d6:	4c26      	ldr	r4, [pc, #152]	; (2470 <nm_spi_init+0xe4>)
    23d8:	0020      	movs	r0, r4
    23da:	4b28      	ldr	r3, [pc, #160]	; (247c <nm_spi_init+0xf0>)
    23dc:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    23de:	2370      	movs	r3, #112	; 0x70
    23e0:	0001      	movs	r1, r0
    23e2:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    23e4:	2050      	movs	r0, #80	; 0x50
    23e6:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    23e8:	0020      	movs	r0, r4
    23ea:	4b25      	ldr	r3, [pc, #148]	; (2480 <nm_spi_init+0xf4>)
    23ec:	4798      	blx	r3
	return M2M_SUCCESS;
    23ee:	2400      	movs	r4, #0
}
    23f0:	0020      	movs	r0, r4
    23f2:	b002      	add	sp, #8
    23f4:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    23f6:	2201      	movs	r2, #1
    23f8:	4b1c      	ldr	r3, [pc, #112]	; (246c <nm_spi_init+0xe0>)
    23fa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    23fc:	4a21      	ldr	r2, [pc, #132]	; (2484 <nm_spi_init+0xf8>)
    23fe:	4922      	ldr	r1, [pc, #136]	; (2488 <nm_spi_init+0xfc>)
    2400:	4822      	ldr	r0, [pc, #136]	; (248c <nm_spi_init+0x100>)
    2402:	4b23      	ldr	r3, [pc, #140]	; (2490 <nm_spi_init+0x104>)
    2404:	4798      	blx	r3
    2406:	4823      	ldr	r0, [pc, #140]	; (2494 <nm_spi_init+0x108>)
    2408:	4b23      	ldr	r3, [pc, #140]	; (2498 <nm_spi_init+0x10c>)
    240a:	4798      	blx	r3
    240c:	200d      	movs	r0, #13
    240e:	4b23      	ldr	r3, [pc, #140]	; (249c <nm_spi_init+0x110>)
    2410:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2412:	4669      	mov	r1, sp
    2414:	4816      	ldr	r0, [pc, #88]	; (2470 <nm_spi_init+0xe4>)
    2416:	4b17      	ldr	r3, [pc, #92]	; (2474 <nm_spi_init+0xe8>)
    2418:	4798      	blx	r3
    241a:	1e04      	subs	r4, r0, #0
    241c:	d1c2      	bne.n	23a4 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    241e:	4a20      	ldr	r2, [pc, #128]	; (24a0 <nm_spi_init+0x114>)
    2420:	4919      	ldr	r1, [pc, #100]	; (2488 <nm_spi_init+0xfc>)
    2422:	481a      	ldr	r0, [pc, #104]	; (248c <nm_spi_init+0x100>)
    2424:	4b1a      	ldr	r3, [pc, #104]	; (2490 <nm_spi_init+0x104>)
    2426:	4798      	blx	r3
    2428:	481e      	ldr	r0, [pc, #120]	; (24a4 <nm_spi_init+0x118>)
    242a:	4b1b      	ldr	r3, [pc, #108]	; (2498 <nm_spi_init+0x10c>)
    242c:	4798      	blx	r3
    242e:	200d      	movs	r0, #13
    2430:	4b1a      	ldr	r3, [pc, #104]	; (249c <nm_spi_init+0x110>)
    2432:	4798      	blx	r3
			return 0;
    2434:	e7dc      	b.n	23f0 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2436:	4a1c      	ldr	r2, [pc, #112]	; (24a8 <nm_spi_init+0x11c>)
    2438:	4913      	ldr	r1, [pc, #76]	; (2488 <nm_spi_init+0xfc>)
    243a:	4814      	ldr	r0, [pc, #80]	; (248c <nm_spi_init+0x100>)
    243c:	4b14      	ldr	r3, [pc, #80]	; (2490 <nm_spi_init+0x104>)
    243e:	4798      	blx	r3
    2440:	481a      	ldr	r0, [pc, #104]	; (24ac <nm_spi_init+0x120>)
    2442:	4b15      	ldr	r3, [pc, #84]	; (2498 <nm_spi_init+0x10c>)
    2444:	4798      	blx	r3
    2446:	200d      	movs	r0, #13
    2448:	4b14      	ldr	r3, [pc, #80]	; (249c <nm_spi_init+0x110>)
    244a:	4798      	blx	r3
			return 0;
    244c:	e7d0      	b.n	23f0 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    244e:	4a18      	ldr	r2, [pc, #96]	; (24b0 <nm_spi_init+0x124>)
    2450:	490d      	ldr	r1, [pc, #52]	; (2488 <nm_spi_init+0xfc>)
    2452:	480e      	ldr	r0, [pc, #56]	; (248c <nm_spi_init+0x100>)
    2454:	4b0e      	ldr	r3, [pc, #56]	; (2490 <nm_spi_init+0x104>)
    2456:	4798      	blx	r3
    2458:	4816      	ldr	r0, [pc, #88]	; (24b4 <nm_spi_init+0x128>)
    245a:	4b0f      	ldr	r3, [pc, #60]	; (2498 <nm_spi_init+0x10c>)
    245c:	4798      	blx	r3
    245e:	200d      	movs	r0, #13
    2460:	4b0e      	ldr	r3, [pc, #56]	; (249c <nm_spi_init+0x110>)
    2462:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2464:	2406      	movs	r4, #6
    2466:	4264      	negs	r4, r4
    2468:	e7c2      	b.n	23f0 <nm_spi_init+0x64>
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	200000a0 	.word	0x200000a0
    2470:	0000e824 	.word	0x0000e824
    2474:	000021ad 	.word	0x000021ad
    2478:	0000209d 	.word	0x0000209d
    247c:	00002349 	.word	0x00002349
    2480:	00002375 	.word	0x00002375
    2484:	000004dc 	.word	0x000004dc
    2488:	00009b54 	.word	0x00009b54
    248c:	00009410 	.word	0x00009410
    2490:	0000818d 	.word	0x0000818d
    2494:	00009c60 	.word	0x00009c60
    2498:	000082a9 	.word	0x000082a9
    249c:	000081c1 	.word	0x000081c1
    24a0:	000004df 	.word	0x000004df
    24a4:	00009cb0 	.word	0x00009cb0
    24a8:	000004e9 	.word	0x000004e9
    24ac:	00009cdc 	.word	0x00009cdc
    24b0:	000004f3 	.word	0x000004f3
    24b4:	00009d10 	.word	0x00009d10

000024b8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    24b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ba:	46de      	mov	lr, fp
    24bc:	4657      	mov	r7, sl
    24be:	464e      	mov	r6, r9
    24c0:	4645      	mov	r5, r8
    24c2:	b5e0      	push	{r5, r6, r7, lr}
    24c4:	b087      	sub	sp, #28
    24c6:	9002      	str	r0, [sp, #8]
    24c8:	9103      	str	r1, [sp, #12]
    24ca:	0016      	movs	r6, r2
    24cc:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    24ce:	2300      	movs	r3, #0
    24d0:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    24d2:	2400      	movs	r4, #0
    24d4:	4b3f      	ldr	r3, [pc, #252]	; (25d4 <nm_spi_read_block+0x11c>)
    24d6:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    24d8:	46a9      	mov	r9, r5
    24da:	e038      	b.n	254e <nm_spi_read_block+0x96>
		single_byte_workaround = 1;
    24dc:	2301      	movs	r3, #1
    24de:	469b      	mov	fp, r3
		size = 2;
    24e0:	3601      	adds	r6, #1
    24e2:	e036      	b.n	2552 <nm_spi_read_block+0x9a>
	result = spi_cmd_rsp(cmd);
    24e4:	20c8      	movs	r0, #200	; 0xc8
    24e6:	4b3c      	ldr	r3, [pc, #240]	; (25d8 <nm_spi_read_block+0x120>)
    24e8:	4798      	blx	r3
	if (result != N_OK) {
    24ea:	2801      	cmp	r0, #1
    24ec:	d046      	beq.n	257c <nm_spi_read_block+0xc4>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    24ee:	228f      	movs	r2, #143	; 0x8f
    24f0:	00d2      	lsls	r2, r2, #3
    24f2:	493a      	ldr	r1, [pc, #232]	; (25dc <nm_spi_read_block+0x124>)
    24f4:	483a      	ldr	r0, [pc, #232]	; (25e0 <nm_spi_read_block+0x128>)
    24f6:	4f3b      	ldr	r7, [pc, #236]	; (25e4 <nm_spi_read_block+0x12c>)
    24f8:	47b8      	blx	r7
    24fa:	9902      	ldr	r1, [sp, #8]
    24fc:	483a      	ldr	r0, [pc, #232]	; (25e8 <nm_spi_read_block+0x130>)
    24fe:	47b8      	blx	r7
    2500:	200d      	movs	r0, #13
    2502:	4b3a      	ldr	r3, [pc, #232]	; (25ec <nm_spi_read_block+0x134>)
    2504:	4798      	blx	r3
		nm_bsp_sleep(1);
    2506:	2001      	movs	r0, #1
    2508:	4f39      	ldr	r7, [pc, #228]	; (25f0 <nm_spi_read_block+0x138>)
    250a:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    250c:	9400      	str	r4, [sp, #0]
    250e:	0023      	movs	r3, r4
    2510:	0022      	movs	r2, r4
    2512:	0021      	movs	r1, r4
    2514:	20cf      	movs	r0, #207	; 0xcf
    2516:	4d2f      	ldr	r5, [pc, #188]	; (25d4 <nm_spi_read_block+0x11c>)
    2518:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    251a:	20cf      	movs	r0, #207	; 0xcf
    251c:	4b2e      	ldr	r3, [pc, #184]	; (25d8 <nm_spi_read_block+0x120>)
    251e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    2520:	4a34      	ldr	r2, [pc, #208]	; (25f4 <nm_spi_read_block+0x13c>)
    2522:	492e      	ldr	r1, [pc, #184]	; (25dc <nm_spi_read_block+0x124>)
    2524:	482e      	ldr	r0, [pc, #184]	; (25e0 <nm_spi_read_block+0x128>)
    2526:	4b2f      	ldr	r3, [pc, #188]	; (25e4 <nm_spi_read_block+0x12c>)
    2528:	469a      	mov	sl, r3
    252a:	4798      	blx	r3
    252c:	0033      	movs	r3, r6
    252e:	9a02      	ldr	r2, [sp, #8]
    2530:	4649      	mov	r1, r9
    2532:	4831      	ldr	r0, [pc, #196]	; (25f8 <nm_spi_read_block+0x140>)
    2534:	47d0      	blx	sl
    2536:	200d      	movs	r0, #13
    2538:	4b2c      	ldr	r3, [pc, #176]	; (25ec <nm_spi_read_block+0x134>)
    253a:	4798      	blx	r3
		nm_bsp_sleep(1);
    253c:	2001      	movs	r0, #1
    253e:	47b8      	blx	r7
    2540:	2301      	movs	r3, #1
    2542:	425b      	negs	r3, r3
    2544:	469c      	mov	ip, r3
    2546:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    2548:	464b      	mov	r3, r9
    254a:	2b00      	cmp	r3, #0
    254c:	d039      	beq.n	25c2 <nm_spi_read_block+0x10a>
	if (size == 1)
    254e:	2e01      	cmp	r6, #1
    2550:	d0c4      	beq.n	24dc <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    2552:	9400      	str	r4, [sp, #0]
    2554:	0033      	movs	r3, r6
    2556:	0022      	movs	r2, r4
    2558:	9d02      	ldr	r5, [sp, #8]
    255a:	0029      	movs	r1, r5
    255c:	20c8      	movs	r0, #200	; 0xc8
    255e:	47c0      	blx	r8
	if (result != N_OK) {
    2560:	2801      	cmp	r0, #1
    2562:	d0bf      	beq.n	24e4 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2564:	4a25      	ldr	r2, [pc, #148]	; (25fc <nm_spi_read_block+0x144>)
    2566:	491d      	ldr	r1, [pc, #116]	; (25dc <nm_spi_read_block+0x124>)
    2568:	481d      	ldr	r0, [pc, #116]	; (25e0 <nm_spi_read_block+0x128>)
    256a:	4f1e      	ldr	r7, [pc, #120]	; (25e4 <nm_spi_read_block+0x12c>)
    256c:	47b8      	blx	r7
    256e:	0029      	movs	r1, r5
    2570:	4823      	ldr	r0, [pc, #140]	; (2600 <nm_spi_read_block+0x148>)
    2572:	47b8      	blx	r7
    2574:	200d      	movs	r0, #13
    2576:	4b1d      	ldr	r3, [pc, #116]	; (25ec <nm_spi_read_block+0x134>)
    2578:	4798      	blx	r3
    257a:	e7c4      	b.n	2506 <nm_spi_read_block+0x4e>
	if (single_byte_workaround)
    257c:	465b      	mov	r3, fp
    257e:	2b00      	cmp	r3, #0
    2580:	d017      	beq.n	25b2 <nm_spi_read_block+0xfa>
		result = spi_data_read(tmp, size,0);
    2582:	af05      	add	r7, sp, #20
    2584:	0022      	movs	r2, r4
    2586:	0031      	movs	r1, r6
    2588:	0038      	movs	r0, r7
    258a:	4b1e      	ldr	r3, [pc, #120]	; (2604 <nm_spi_read_block+0x14c>)
    258c:	4798      	blx	r3
		buf[0] = tmp[0];
    258e:	783b      	ldrb	r3, [r7, #0]
    2590:	9a03      	ldr	r2, [sp, #12]
    2592:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    2594:	2801      	cmp	r0, #1
    2596:	d012      	beq.n	25be <nm_spi_read_block+0x106>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2598:	2291      	movs	r2, #145	; 0x91
    259a:	00d2      	lsls	r2, r2, #3
    259c:	490f      	ldr	r1, [pc, #60]	; (25dc <nm_spi_read_block+0x124>)
    259e:	4810      	ldr	r0, [pc, #64]	; (25e0 <nm_spi_read_block+0x128>)
    25a0:	4b10      	ldr	r3, [pc, #64]	; (25e4 <nm_spi_read_block+0x12c>)
    25a2:	4798      	blx	r3
    25a4:	4818      	ldr	r0, [pc, #96]	; (2608 <nm_spi_read_block+0x150>)
    25a6:	4b19      	ldr	r3, [pc, #100]	; (260c <nm_spi_read_block+0x154>)
    25a8:	4798      	blx	r3
    25aa:	200d      	movs	r0, #13
    25ac:	4b0f      	ldr	r3, [pc, #60]	; (25ec <nm_spi_read_block+0x134>)
    25ae:	4798      	blx	r3
    25b0:	e7a9      	b.n	2506 <nm_spi_read_block+0x4e>
		result = spi_data_read(buf, size,0);
    25b2:	0022      	movs	r2, r4
    25b4:	0031      	movs	r1, r6
    25b6:	9803      	ldr	r0, [sp, #12]
    25b8:	4b12      	ldr	r3, [pc, #72]	; (2604 <nm_spi_read_block+0x14c>)
    25ba:	4798      	blx	r3
    25bc:	e7ea      	b.n	2594 <nm_spi_read_block+0xdc>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    25be:	2000      	movs	r0, #0
    25c0:	e001      	b.n	25c6 <nm_spi_read_block+0x10e>
	else s8Ret = M2M_ERR_BUS_FAIL;
    25c2:	2006      	movs	r0, #6
    25c4:	4240      	negs	r0, r0

	return s8Ret;
}
    25c6:	b007      	add	sp, #28
    25c8:	bc3c      	pop	{r2, r3, r4, r5}
    25ca:	4690      	mov	r8, r2
    25cc:	4699      	mov	r9, r3
    25ce:	46a2      	mov	sl, r4
    25d0:	46ab      	mov	fp, r5
    25d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d4:	00001ce1 	.word	0x00001ce1
    25d8:	00001e81 	.word	0x00001e81
    25dc:	00009b48 	.word	0x00009b48
    25e0:	00009410 	.word	0x00009410
    25e4:	0000818d 	.word	0x0000818d
    25e8:	00009d64 	.word	0x00009d64
    25ec:	000081c1 	.word	0x000081c1
    25f0:	00000129 	.word	0x00000129
    25f4:	00000499 	.word	0x00000499
    25f8:	00009dc4 	.word	0x00009dc4
    25fc:	00000472 	.word	0x00000472
    2600:	00009d34 	.word	0x00009d34
    2604:	00001f55 	.word	0x00001f55
    2608:	00009d9c 	.word	0x00009d9c
    260c:	000082a9 	.word	0x000082a9

00002610 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2610:	b5f0      	push	{r4, r5, r6, r7, lr}
    2612:	46de      	mov	lr, fp
    2614:	4647      	mov	r7, r8
    2616:	b580      	push	{r7, lr}
    2618:	b089      	sub	sp, #36	; 0x24
    261a:	9004      	str	r0, [sp, #16]
    261c:	468b      	mov	fp, r1
    261e:	9203      	str	r2, [sp, #12]
    2620:	260a      	movs	r6, #10
    2622:	2780      	movs	r7, #128	; 0x80
    2624:	01bf      	lsls	r7, r7, #6
    2626:	466b      	mov	r3, sp
    2628:	82df      	strh	r7, [r3, #22]
    262a:	0035      	movs	r5, r6
    262c:	e02d      	b.n	268a <nm_spi_write_block+0x7a>
		size = 2;
    262e:	3301      	adds	r3, #1
    2630:	9303      	str	r3, [sp, #12]
    2632:	e02d      	b.n	2690 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    2634:	4a82      	ldr	r2, [pc, #520]	; (2840 <nm_spi_write_block+0x230>)
    2636:	4983      	ldr	r1, [pc, #524]	; (2844 <nm_spi_write_block+0x234>)
    2638:	4883      	ldr	r0, [pc, #524]	; (2848 <nm_spi_write_block+0x238>)
    263a:	4c84      	ldr	r4, [pc, #528]	; (284c <nm_spi_write_block+0x23c>)
    263c:	47a0      	blx	r4
    263e:	0031      	movs	r1, r6
    2640:	4883      	ldr	r0, [pc, #524]	; (2850 <nm_spi_write_block+0x240>)
    2642:	47a0      	blx	r4
    2644:	200d      	movs	r0, #13
    2646:	4b83      	ldr	r3, [pc, #524]	; (2854 <nm_spi_write_block+0x244>)
    2648:	4798      	blx	r3
		nm_bsp_sleep(1);
    264a:	2001      	movs	r0, #1
    264c:	4c82      	ldr	r4, [pc, #520]	; (2858 <nm_spi_write_block+0x248>)
    264e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2650:	2300      	movs	r3, #0
    2652:	9300      	str	r3, [sp, #0]
    2654:	2200      	movs	r2, #0
    2656:	2100      	movs	r1, #0
    2658:	20cf      	movs	r0, #207	; 0xcf
    265a:	4e80      	ldr	r6, [pc, #512]	; (285c <nm_spi_write_block+0x24c>)
    265c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    265e:	20cf      	movs	r0, #207	; 0xcf
    2660:	4b7f      	ldr	r3, [pc, #508]	; (2860 <nm_spi_write_block+0x250>)
    2662:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    2664:	4a7f      	ldr	r2, [pc, #508]	; (2864 <nm_spi_write_block+0x254>)
    2666:	4977      	ldr	r1, [pc, #476]	; (2844 <nm_spi_write_block+0x234>)
    2668:	4877      	ldr	r0, [pc, #476]	; (2848 <nm_spi_write_block+0x238>)
    266a:	4e78      	ldr	r6, [pc, #480]	; (284c <nm_spi_write_block+0x23c>)
    266c:	47b0      	blx	r6
    266e:	9b03      	ldr	r3, [sp, #12]
    2670:	9a04      	ldr	r2, [sp, #16]
    2672:	0029      	movs	r1, r5
    2674:	487c      	ldr	r0, [pc, #496]	; (2868 <nm_spi_write_block+0x258>)
    2676:	47b0      	blx	r6
    2678:	200d      	movs	r0, #13
    267a:	4b76      	ldr	r3, [pc, #472]	; (2854 <nm_spi_write_block+0x244>)
    267c:	4798      	blx	r3
		nm_bsp_sleep(1);
    267e:	2001      	movs	r0, #1
    2680:	47a0      	blx	r4
    2682:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    2684:	2d00      	cmp	r5, #0
    2686:	d100      	bne.n	268a <nm_spi_write_block+0x7a>
    2688:	e0d2      	b.n	2830 <nm_spi_write_block+0x220>
	if (size == 1)
    268a:	9b03      	ldr	r3, [sp, #12]
    268c:	2b01      	cmp	r3, #1
    268e:	d0ce      	beq.n	262e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    2690:	2300      	movs	r3, #0
    2692:	9300      	str	r3, [sp, #0]
    2694:	9b03      	ldr	r3, [sp, #12]
    2696:	2200      	movs	r2, #0
    2698:	9e04      	ldr	r6, [sp, #16]
    269a:	0031      	movs	r1, r6
    269c:	20c7      	movs	r0, #199	; 0xc7
    269e:	4c6f      	ldr	r4, [pc, #444]	; (285c <nm_spi_write_block+0x24c>)
    26a0:	47a0      	blx	r4
	if (result != N_OK) {
    26a2:	2801      	cmp	r0, #1
    26a4:	d1c6      	bne.n	2634 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    26a6:	20c7      	movs	r0, #199	; 0xc7
    26a8:	4b6d      	ldr	r3, [pc, #436]	; (2860 <nm_spi_write_block+0x250>)
    26aa:	4798      	blx	r3
	if (result != N_OK) {
    26ac:	2801      	cmp	r0, #1
    26ae:	d00b      	beq.n	26c8 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    26b0:	4a6e      	ldr	r2, [pc, #440]	; (286c <nm_spi_write_block+0x25c>)
    26b2:	4964      	ldr	r1, [pc, #400]	; (2844 <nm_spi_write_block+0x234>)
    26b4:	4864      	ldr	r0, [pc, #400]	; (2848 <nm_spi_write_block+0x238>)
    26b6:	4c65      	ldr	r4, [pc, #404]	; (284c <nm_spi_write_block+0x23c>)
    26b8:	47a0      	blx	r4
    26ba:	9904      	ldr	r1, [sp, #16]
    26bc:	486c      	ldr	r0, [pc, #432]	; (2870 <nm_spi_write_block+0x260>)
    26be:	47a0      	blx	r4
    26c0:	200d      	movs	r0, #13
    26c2:	4b64      	ldr	r3, [pc, #400]	; (2854 <nm_spi_write_block+0x244>)
    26c4:	4798      	blx	r3
    26c6:	e7c0      	b.n	264a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    26c8:	2200      	movs	r2, #0
    26ca:	ab07      	add	r3, sp, #28
    26cc:	801a      	strh	r2, [r3, #0]
    26ce:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    26d0:	2600      	movs	r6, #0
				order = 0x1;
    26d2:	46a8      	mov	r8, r5
    26d4:	0035      	movs	r5, r6
    26d6:	0026      	movs	r6, r4
    26d8:	e021      	b.n	271e <nm_spi_write_block+0x10e>
				order = 0x2;
    26da:	2300      	movs	r3, #0
    26dc:	42b7      	cmp	r7, r6
    26de:	415b      	adcs	r3, r3
    26e0:	3302      	adds	r3, #2
		cmd |= order;
    26e2:	200b      	movs	r0, #11
    26e4:	aa04      	add	r2, sp, #16
    26e6:	4694      	mov	ip, r2
    26e8:	4460      	add	r0, ip
    26ea:	2210      	movs	r2, #16
    26ec:	4252      	negs	r2, r2
    26ee:	4313      	orrs	r3, r2
    26f0:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    26f2:	2101      	movs	r1, #1
    26f4:	4b5f      	ldr	r3, [pc, #380]	; (2874 <nm_spi_write_block+0x264>)
    26f6:	4798      	blx	r3
    26f8:	2800      	cmp	r0, #0
    26fa:	d11d      	bne.n	2738 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    26fc:	465b      	mov	r3, fp
    26fe:	1958      	adds	r0, r3, r5
    2700:	0021      	movs	r1, r4
    2702:	4b5c      	ldr	r3, [pc, #368]	; (2874 <nm_spi_write_block+0x264>)
    2704:	4798      	blx	r3
    2706:	2800      	cmp	r0, #0
    2708:	d12e      	bne.n	2768 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    270a:	4b5b      	ldr	r3, [pc, #364]	; (2878 <nm_spi_write_block+0x268>)
    270c:	781b      	ldrb	r3, [r3, #0]
    270e:	2b00      	cmp	r3, #0
    2710:	d037      	beq.n	2782 <nm_spi_write_block+0x172>
		ix += nbytes;
    2712:	1965      	adds	r5, r4, r5
    2714:	b22d      	sxth	r5, r5
		sz -= nbytes;
    2716:	1b36      	subs	r6, r6, r4
    2718:	b2b6      	uxth	r6, r6
	} while (sz);
    271a:	2e00      	cmp	r6, #0
    271c:	d052      	beq.n	27c4 <nm_spi_write_block+0x1b4>
    271e:	1c34      	adds	r4, r6, #0
    2720:	42be      	cmp	r6, r7
    2722:	d901      	bls.n	2728 <nm_spi_write_block+0x118>
    2724:	466b      	mov	r3, sp
    2726:	8adc      	ldrh	r4, [r3, #22]
    2728:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    272a:	2d00      	cmp	r5, #0
    272c:	d1d5      	bne.n	26da <nm_spi_write_block+0xca>
				order = 0x3;
    272e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    2730:	42be      	cmp	r6, r7
    2732:	d9d6      	bls.n	26e2 <nm_spi_write_block+0xd2>
				order = 0x1;
    2734:	3b02      	subs	r3, #2
    2736:	e7d4      	b.n	26e2 <nm_spi_write_block+0xd2>
    2738:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    273a:	4a50      	ldr	r2, [pc, #320]	; (287c <nm_spi_write_block+0x26c>)
    273c:	4950      	ldr	r1, [pc, #320]	; (2880 <nm_spi_write_block+0x270>)
    273e:	4842      	ldr	r0, [pc, #264]	; (2848 <nm_spi_write_block+0x238>)
    2740:	4b42      	ldr	r3, [pc, #264]	; (284c <nm_spi_write_block+0x23c>)
    2742:	4798      	blx	r3
    2744:	484f      	ldr	r0, [pc, #316]	; (2884 <nm_spi_write_block+0x274>)
    2746:	4b50      	ldr	r3, [pc, #320]	; (2888 <nm_spi_write_block+0x278>)
    2748:	4798      	blx	r3
    274a:	200d      	movs	r0, #13
    274c:	4b41      	ldr	r3, [pc, #260]	; (2854 <nm_spi_write_block+0x244>)
    274e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2750:	4a4e      	ldr	r2, [pc, #312]	; (288c <nm_spi_write_block+0x27c>)
    2752:	493c      	ldr	r1, [pc, #240]	; (2844 <nm_spi_write_block+0x234>)
    2754:	483c      	ldr	r0, [pc, #240]	; (2848 <nm_spi_write_block+0x238>)
    2756:	4b3d      	ldr	r3, [pc, #244]	; (284c <nm_spi_write_block+0x23c>)
    2758:	4798      	blx	r3
    275a:	484d      	ldr	r0, [pc, #308]	; (2890 <nm_spi_write_block+0x280>)
    275c:	4b4a      	ldr	r3, [pc, #296]	; (2888 <nm_spi_write_block+0x278>)
    275e:	4798      	blx	r3
    2760:	200d      	movs	r0, #13
    2762:	4b3c      	ldr	r3, [pc, #240]	; (2854 <nm_spi_write_block+0x244>)
    2764:	4798      	blx	r3
    2766:	e770      	b.n	264a <nm_spi_write_block+0x3a>
    2768:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    276a:	4a4a      	ldr	r2, [pc, #296]	; (2894 <nm_spi_write_block+0x284>)
    276c:	4944      	ldr	r1, [pc, #272]	; (2880 <nm_spi_write_block+0x270>)
    276e:	4836      	ldr	r0, [pc, #216]	; (2848 <nm_spi_write_block+0x238>)
    2770:	4b36      	ldr	r3, [pc, #216]	; (284c <nm_spi_write_block+0x23c>)
    2772:	4798      	blx	r3
    2774:	4848      	ldr	r0, [pc, #288]	; (2898 <nm_spi_write_block+0x288>)
    2776:	4b44      	ldr	r3, [pc, #272]	; (2888 <nm_spi_write_block+0x278>)
    2778:	4798      	blx	r3
    277a:	200d      	movs	r0, #13
    277c:	4b35      	ldr	r3, [pc, #212]	; (2854 <nm_spi_write_block+0x244>)
    277e:	4798      	blx	r3
    2780:	e7e6      	b.n	2750 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2782:	2102      	movs	r1, #2
    2784:	a807      	add	r0, sp, #28
    2786:	4b3b      	ldr	r3, [pc, #236]	; (2874 <nm_spi_write_block+0x264>)
    2788:	4798      	blx	r3
    278a:	2800      	cmp	r0, #0
    278c:	d0c1      	beq.n	2712 <nm_spi_write_block+0x102>
    278e:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    2790:	22dd      	movs	r2, #221	; 0xdd
    2792:	0092      	lsls	r2, r2, #2
    2794:	493a      	ldr	r1, [pc, #232]	; (2880 <nm_spi_write_block+0x270>)
    2796:	482c      	ldr	r0, [pc, #176]	; (2848 <nm_spi_write_block+0x238>)
    2798:	4b2c      	ldr	r3, [pc, #176]	; (284c <nm_spi_write_block+0x23c>)
    279a:	4798      	blx	r3
    279c:	483f      	ldr	r0, [pc, #252]	; (289c <nm_spi_write_block+0x28c>)
    279e:	4b3a      	ldr	r3, [pc, #232]	; (2888 <nm_spi_write_block+0x278>)
    27a0:	4798      	blx	r3
    27a2:	200d      	movs	r0, #13
    27a4:	4b2b      	ldr	r3, [pc, #172]	; (2854 <nm_spi_write_block+0x244>)
    27a6:	4798      	blx	r3
    27a8:	e7d2      	b.n	2750 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    27aa:	2248      	movs	r2, #72	; 0x48
    27ac:	32ff      	adds	r2, #255	; 0xff
    27ae:	493c      	ldr	r1, [pc, #240]	; (28a0 <nm_spi_write_block+0x290>)
    27b0:	4825      	ldr	r0, [pc, #148]	; (2848 <nm_spi_write_block+0x238>)
    27b2:	4b26      	ldr	r3, [pc, #152]	; (284c <nm_spi_write_block+0x23c>)
    27b4:	4798      	blx	r3
    27b6:	483b      	ldr	r0, [pc, #236]	; (28a4 <nm_spi_write_block+0x294>)
    27b8:	4b33      	ldr	r3, [pc, #204]	; (2888 <nm_spi_write_block+0x278>)
    27ba:	4798      	blx	r3
    27bc:	200d      	movs	r0, #13
    27be:	4b25      	ldr	r3, [pc, #148]	; (2854 <nm_spi_write_block+0x244>)
    27c0:	4798      	blx	r3
    27c2:	e027      	b.n	2814 <nm_spi_write_block+0x204>
    27c4:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    27c6:	4b2c      	ldr	r3, [pc, #176]	; (2878 <nm_spi_write_block+0x268>)
    27c8:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    27ca:	1e63      	subs	r3, r4, #1
    27cc:	419c      	sbcs	r4, r3
    27ce:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    27d0:	b2a1      	uxth	r1, r4
    27d2:	a807      	add	r0, sp, #28
    27d4:	4b34      	ldr	r3, [pc, #208]	; (28a8 <nm_spi_write_block+0x298>)
    27d6:	4798      	blx	r3
    27d8:	2800      	cmp	r0, #0
    27da:	d1e6      	bne.n	27aa <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    27dc:	ab08      	add	r3, sp, #32
    27de:	191b      	adds	r3, r3, r4
    27e0:	3b05      	subs	r3, #5
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d106      	bne.n	27f6 <nm_spi_write_block+0x1e6>
    27e8:	ab08      	add	r3, sp, #32
    27ea:	469c      	mov	ip, r3
    27ec:	4464      	add	r4, ip
    27ee:	3c06      	subs	r4, #6
    27f0:	7823      	ldrb	r3, [r4, #0]
    27f2:	2bc3      	cmp	r3, #195	; 0xc3
    27f4:	d01a      	beq.n	282c <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    27f6:	22a7      	movs	r2, #167	; 0xa7
    27f8:	0052      	lsls	r2, r2, #1
    27fa:	4929      	ldr	r1, [pc, #164]	; (28a0 <nm_spi_write_block+0x290>)
    27fc:	4812      	ldr	r0, [pc, #72]	; (2848 <nm_spi_write_block+0x238>)
    27fe:	4c13      	ldr	r4, [pc, #76]	; (284c <nm_spi_write_block+0x23c>)
    2800:	47a0      	blx	r4
    2802:	a907      	add	r1, sp, #28
    2804:	788b      	ldrb	r3, [r1, #2]
    2806:	784a      	ldrb	r2, [r1, #1]
    2808:	7809      	ldrb	r1, [r1, #0]
    280a:	4828      	ldr	r0, [pc, #160]	; (28ac <nm_spi_write_block+0x29c>)
    280c:	47a0      	blx	r4
    280e:	200d      	movs	r0, #13
    2810:	4b10      	ldr	r3, [pc, #64]	; (2854 <nm_spi_write_block+0x244>)
    2812:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2814:	4a26      	ldr	r2, [pc, #152]	; (28b0 <nm_spi_write_block+0x2a0>)
    2816:	490b      	ldr	r1, [pc, #44]	; (2844 <nm_spi_write_block+0x234>)
    2818:	480b      	ldr	r0, [pc, #44]	; (2848 <nm_spi_write_block+0x238>)
    281a:	4b0c      	ldr	r3, [pc, #48]	; (284c <nm_spi_write_block+0x23c>)
    281c:	4798      	blx	r3
    281e:	481c      	ldr	r0, [pc, #112]	; (2890 <nm_spi_write_block+0x280>)
    2820:	4b19      	ldr	r3, [pc, #100]	; (2888 <nm_spi_write_block+0x278>)
    2822:	4798      	blx	r3
    2824:	200d      	movs	r0, #13
    2826:	4b0b      	ldr	r3, [pc, #44]	; (2854 <nm_spi_write_block+0x244>)
    2828:	4798      	blx	r3
    282a:	e70e      	b.n	264a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    282c:	2000      	movs	r0, #0
    282e:	e001      	b.n	2834 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2830:	2006      	movs	r0, #6
    2832:	4240      	negs	r0, r0

	return s8Ret;
}
    2834:	b009      	add	sp, #36	; 0x24
    2836:	bc0c      	pop	{r2, r3}
    2838:	4690      	mov	r8, r2
    283a:	469b      	mov	fp, r3
    283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	000003db 	.word	0x000003db
    2844:	00009b28 	.word	0x00009b28
    2848:	00009410 	.word	0x00009410
    284c:	0000818d 	.word	0x0000818d
    2850:	00009de0 	.word	0x00009de0
    2854:	000081c1 	.word	0x000081c1
    2858:	00000129 	.word	0x00000129
    285c:	00001ce1 	.word	0x00001ce1
    2860:	00001e81 	.word	0x00001e81
    2864:	00000403 	.word	0x00000403
    2868:	00009dc4 	.word	0x00009dc4
    286c:	000003e1 	.word	0x000003e1
    2870:	00009e10 	.word	0x00009e10
    2874:	00001cc1 	.word	0x00001cc1
    2878:	200000a0 	.word	0x200000a0
    287c:	00000361 	.word	0x00000361
    2880:	00009b08 	.word	0x00009b08
    2884:	00009e48 	.word	0x00009e48
    2888:	000082a9 	.word	0x000082a9
    288c:	000003f1 	.word	0x000003f1
    2890:	00009f3c 	.word	0x00009f3c
    2894:	0000036a 	.word	0x0000036a
    2898:	00009e80 	.word	0x00009e80
    289c:	00009eb4 	.word	0x00009eb4
    28a0:	00009adc 	.word	0x00009adc
    28a4:	00009eec 	.word	0x00009eec
    28a8:	00001e61 	.word	0x00001e61
    28ac:	00009f0c 	.word	0x00009f0c
    28b0:	000003f9 	.word	0x000003f9

000028b4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b6:	46de      	mov	lr, fp
    28b8:	4657      	mov	r7, sl
    28ba:	464e      	mov	r6, r9
    28bc:	4645      	mov	r5, r8
    28be:	b5e0      	push	{r5, r6, r7, lr}
    28c0:	b085      	sub	sp, #20
    28c2:	9001      	str	r0, [sp, #4]
    28c4:	000e      	movs	r6, r1
    28c6:	9202      	str	r2, [sp, #8]
    28c8:	001d      	movs	r5, r3
    28ca:	ab0e      	add	r3, sp, #56	; 0x38
    28cc:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    28ce:	2c00      	cmp	r4, #0
    28d0:	d064      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28d2:	0103      	lsls	r3, r0, #4
    28d4:	4935      	ldr	r1, [pc, #212]	; (29ac <Socket_ReadSocketData+0xf8>)
    28d6:	585b      	ldr	r3, [r3, r1]
    28d8:	2b00      	cmp	r3, #0
    28da:	d05f      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28dc:	0101      	lsls	r1, r0, #4
    28de:	4b33      	ldr	r3, [pc, #204]	; (29ac <Socket_ReadSocketData+0xf8>)
    28e0:	185b      	adds	r3, r3, r1
    28e2:	889b      	ldrh	r3, [r3, #4]
    28e4:	b29b      	uxth	r3, r3
    28e6:	2b00      	cmp	r3, #0
    28e8:	d058      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28ea:	4b30      	ldr	r3, [pc, #192]	; (29ac <Socket_ReadSocketData+0xf8>)
    28ec:	185b      	adds	r3, r3, r1
    28ee:	7a9b      	ldrb	r3, [r3, #10]
    28f0:	2b01      	cmp	r3, #1
    28f2:	d153      	bne.n	299c <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    28f4:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    28f6:	4b2d      	ldr	r3, [pc, #180]	; (29ac <Socket_ReadSocketData+0xf8>)
    28f8:	469b      	mov	fp, r3
    28fa:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    28fc:	465b      	mov	r3, fp
    28fe:	220a      	movs	r2, #10
    2900:	4690      	mov	r8, r2
    2902:	44d8      	add	r8, fp
    2904:	468a      	mov	sl, r1
    2906:	9500      	str	r5, [sp, #0]
    2908:	9303      	str	r3, [sp, #12]
    290a:	e015      	b.n	2938 <Socket_ReadSocketData+0x84>
    290c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    290e:	2301      	movs	r3, #1
    2910:	e01c      	b.n	294c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2912:	3301      	adds	r3, #1
    2914:	2200      	movs	r2, #0
    2916:	2100      	movs	r1, #0
    2918:	2000      	movs	r0, #0
    291a:	4c25      	ldr	r4, [pc, #148]	; (29b0 <Socket_ReadSocketData+0xfc>)
    291c:	47a0      	blx	r4
    291e:	e03d      	b.n	299c <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    2920:	4824      	ldr	r0, [pc, #144]	; (29b4 <Socket_ReadSocketData+0x100>)
    2922:	4d25      	ldr	r5, [pc, #148]	; (29b8 <Socket_ReadSocketData+0x104>)
    2924:	47a8      	blx	r5
    2926:	0021      	movs	r1, r4
    2928:	4824      	ldr	r0, [pc, #144]	; (29bc <Socket_ReadSocketData+0x108>)
    292a:	47a8      	blx	r5
    292c:	200d      	movs	r0, #13
    292e:	4b24      	ldr	r3, [pc, #144]	; (29c0 <Socket_ReadSocketData+0x10c>)
    2930:	4798      	blx	r3
				break;
    2932:	e033      	b.n	299c <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    2934:	2c00      	cmp	r4, #0
    2936:	d031      	beq.n	299c <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2938:	465b      	mov	r3, fp
    293a:	889b      	ldrh	r3, [r3, #4]
    293c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    293e:	b21b      	sxth	r3, r3
    2940:	2b00      	cmp	r3, #0
    2942:	dde3      	ble.n	290c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2944:	9b03      	ldr	r3, [sp, #12]
    2946:	889d      	ldrh	r5, [r3, #4]
    2948:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    294a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    294c:	4a17      	ldr	r2, [pc, #92]	; (29ac <Socket_ReadSocketData+0xf8>)
    294e:	4651      	mov	r1, sl
    2950:	5889      	ldr	r1, [r1, r2]
    2952:	002a      	movs	r2, r5
    2954:	9800      	ldr	r0, [sp, #0]
    2956:	4f16      	ldr	r7, [pc, #88]	; (29b0 <Socket_ReadSocketData+0xfc>)
    2958:	47b8      	blx	r7
    295a:	2800      	cmp	r0, #0
    295c:	d1e0      	bne.n	2920 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    295e:	4b13      	ldr	r3, [pc, #76]	; (29ac <Socket_ReadSocketData+0xf8>)
    2960:	4652      	mov	r2, sl
    2962:	58d3      	ldr	r3, [r2, r3]
    2964:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    2966:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    2968:	88f3      	ldrh	r3, [r6, #6]
    296a:	1b5b      	subs	r3, r3, r5
    296c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    296e:	4b15      	ldr	r3, [pc, #84]	; (29c4 <Socket_ReadSocketData+0x110>)
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	2b00      	cmp	r3, #0
    2974:	d005      	beq.n	2982 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    2976:	4b13      	ldr	r3, [pc, #76]	; (29c4 <Socket_ReadSocketData+0x110>)
    2978:	681b      	ldr	r3, [r3, #0]
    297a:	0032      	movs	r2, r6
    297c:	9902      	ldr	r1, [sp, #8]
    297e:	9801      	ldr	r0, [sp, #4]
    2980:	4798      	blx	r3
				u16ReadCount -= u16Read;
    2982:	1b64      	subs	r4, r4, r5
    2984:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    2986:	9b00      	ldr	r3, [sp, #0]
    2988:	469c      	mov	ip, r3
    298a:	44ac      	add	ip, r5
    298c:	4663      	mov	r3, ip
    298e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    2990:	4643      	mov	r3, r8
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	2b00      	cmp	r3, #0
    2996:	d1cd      	bne.n	2934 <Socket_ReadSocketData+0x80>
    2998:	2c00      	cmp	r4, #0
    299a:	d1ba      	bne.n	2912 <Socket_ReadSocketData+0x5e>
	}
}
    299c:	b005      	add	sp, #20
    299e:	bc3c      	pop	{r2, r3, r4, r5}
    29a0:	4690      	mov	r8, r2
    29a2:	4699      	mov	r9, r3
    29a4:	46a2      	mov	sl, r4
    29a6:	46ab      	mov	fp, r5
    29a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	20000a1c 	.word	0x20000a1c
    29b0:	00000c51 	.word	0x00000c51
    29b4:	00009740 	.word	0x00009740
    29b8:	0000818d 	.word	0x0000818d
    29bc:	0000a1a4 	.word	0x0000a1a4
    29c0:	000081c1 	.word	0x000081c1
    29c4:	20000acc 	.word	0x20000acc

000029c8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    29c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ca:	46d6      	mov	lr, sl
    29cc:	464f      	mov	r7, r9
    29ce:	4646      	mov	r6, r8
    29d0:	b5c0      	push	{r6, r7, lr}
    29d2:	b09a      	sub	sp, #104	; 0x68
    29d4:	000d      	movs	r5, r1
    29d6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    29d8:	2841      	cmp	r0, #65	; 0x41
    29da:	d039      	beq.n	2a50 <m2m_ip_cb+0x88>
    29dc:	2854      	cmp	r0, #84	; 0x54
    29de:	d037      	beq.n	2a50 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    29e0:	2842      	cmp	r0, #66	; 0x42
    29e2:	d053      	beq.n	2a8c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    29e4:	2843      	cmp	r0, #67	; 0x43
    29e6:	d06a      	beq.n	2abe <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    29e8:	2844      	cmp	r0, #68	; 0x44
    29ea:	d100      	bne.n	29ee <m2m_ip_cb+0x26>
    29ec:	e0af      	b.n	2b4e <m2m_ip_cb+0x186>
    29ee:	284b      	cmp	r0, #75	; 0x4b
    29f0:	d100      	bne.n	29f4 <m2m_ip_cb+0x2c>
    29f2:	e0ac      	b.n	2b4e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    29f4:	284a      	cmp	r0, #74	; 0x4a
    29f6:	d100      	bne.n	29fa <m2m_ip_cb+0x32>
    29f8:	e0cf      	b.n	2b9a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    29fa:	2846      	cmp	r0, #70	; 0x46
    29fc:	d100      	bne.n	2a00 <m2m_ip_cb+0x38>
    29fe:	e0e5      	b.n	2bcc <m2m_ip_cb+0x204>
    2a00:	2848      	cmp	r0, #72	; 0x48
    2a02:	d100      	bne.n	2a06 <m2m_ip_cb+0x3e>
    2a04:	e10e      	b.n	2c24 <m2m_ip_cb+0x25c>
    2a06:	284d      	cmp	r0, #77	; 0x4d
    2a08:	d100      	bne.n	2a0c <m2m_ip_cb+0x44>
    2a0a:	e0dc      	b.n	2bc6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a0c:	2845      	cmp	r0, #69	; 0x45
    2a0e:	d100      	bne.n	2a12 <m2m_ip_cb+0x4a>
    2a10:	e12c      	b.n	2c6c <m2m_ip_cb+0x2a4>
    2a12:	2847      	cmp	r0, #71	; 0x47
    2a14:	d100      	bne.n	2a18 <m2m_ip_cb+0x50>
    2a16:	e14d      	b.n	2cb4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2a18:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a1a:	284c      	cmp	r0, #76	; 0x4c
    2a1c:	d100      	bne.n	2a20 <m2m_ip_cb+0x58>
    2a1e:	e126      	b.n	2c6e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2a20:	2852      	cmp	r0, #82	; 0x52
    2a22:	d12d      	bne.n	2a80 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2a24:	2301      	movs	r3, #1
    2a26:	2214      	movs	r2, #20
    2a28:	a909      	add	r1, sp, #36	; 0x24
    2a2a:	0020      	movs	r0, r4
    2a2c:	4ca2      	ldr	r4, [pc, #648]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a2e:	47a0      	blx	r4
    2a30:	2800      	cmp	r0, #0
    2a32:	d125      	bne.n	2a80 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2a34:	4ba1      	ldr	r3, [pc, #644]	; (2cbc <m2m_ip_cb+0x2f4>)
    2a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2a38:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d01f      	beq.n	2a80 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2a40:	4b9e      	ldr	r3, [pc, #632]	; (2cbc <m2m_ip_cb+0x2f4>)
    2a42:	681c      	ldr	r4, [r3, #0]
    2a44:	ab09      	add	r3, sp, #36	; 0x24
    2a46:	7c1a      	ldrb	r2, [r3, #16]
    2a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a4c:	47a0      	blx	r4
			}
		}
	}
}
    2a4e:	e017      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2a50:	2300      	movs	r3, #0
    2a52:	2204      	movs	r2, #4
    2a54:	a909      	add	r1, sp, #36	; 0x24
    2a56:	0020      	movs	r0, r4
    2a58:	4c97      	ldr	r4, [pc, #604]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a5a:	47a0      	blx	r4
    2a5c:	2800      	cmp	r0, #0
    2a5e:	d10f      	bne.n	2a80 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    2a60:	ab09      	add	r3, sp, #36	; 0x24
    2a62:	785a      	ldrb	r2, [r3, #1]
    2a64:	ab05      	add	r3, sp, #20
    2a66:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2a68:	4b95      	ldr	r3, [pc, #596]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2a6a:	681b      	ldr	r3, [r3, #0]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d007      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2a70:	4b93      	ldr	r3, [pc, #588]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2a72:	681b      	ldr	r3, [r3, #0]
    2a74:	aa09      	add	r2, sp, #36	; 0x24
    2a76:	2000      	movs	r0, #0
    2a78:	5610      	ldrsb	r0, [r2, r0]
    2a7a:	aa05      	add	r2, sp, #20
    2a7c:	2101      	movs	r1, #1
    2a7e:	4798      	blx	r3
}
    2a80:	b01a      	add	sp, #104	; 0x68
    2a82:	bc1c      	pop	{r2, r3, r4}
    2a84:	4690      	mov	r8, r2
    2a86:	4699      	mov	r9, r3
    2a88:	46a2      	mov	sl, r4
    2a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2a8c:	2300      	movs	r3, #0
    2a8e:	2204      	movs	r2, #4
    2a90:	a909      	add	r1, sp, #36	; 0x24
    2a92:	0020      	movs	r0, r4
    2a94:	4c88      	ldr	r4, [pc, #544]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a96:	47a0      	blx	r4
    2a98:	2800      	cmp	r0, #0
    2a9a:	d1f1      	bne.n	2a80 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    2a9c:	ab09      	add	r3, sp, #36	; 0x24
    2a9e:	785a      	ldrb	r2, [r3, #1]
    2aa0:	ab05      	add	r3, sp, #20
    2aa2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2aa4:	4b86      	ldr	r3, [pc, #536]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d0e9      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2aac:	4b84      	ldr	r3, [pc, #528]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2aae:	681b      	ldr	r3, [r3, #0]
    2ab0:	aa09      	add	r2, sp, #36	; 0x24
    2ab2:	2000      	movs	r0, #0
    2ab4:	5610      	ldrsb	r0, [r2, r0]
    2ab6:	aa05      	add	r2, sp, #20
    2ab8:	2102      	movs	r1, #2
    2aba:	4798      	blx	r3
    2abc:	e7e0      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2abe:	2300      	movs	r3, #0
    2ac0:	220c      	movs	r2, #12
    2ac2:	a905      	add	r1, sp, #20
    2ac4:	0020      	movs	r0, r4
    2ac6:	4c7c      	ldr	r4, [pc, #496]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2ac8:	47a0      	blx	r4
    2aca:	2800      	cmp	r0, #0
    2acc:	d1d8      	bne.n	2a80 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    2ace:	ab05      	add	r3, sp, #20
    2ad0:	2209      	movs	r2, #9
    2ad2:	569a      	ldrsb	r2, [r3, r2]
    2ad4:	2a00      	cmp	r2, #0
    2ad6:	db24      	blt.n	2b22 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    2ad8:	0018      	movs	r0, r3
    2ada:	2108      	movs	r1, #8
    2adc:	5659      	ldrsb	r1, [r3, r1]
    2ade:	4b79      	ldr	r3, [pc, #484]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2ae0:	0109      	lsls	r1, r1, #4
    2ae2:	1859      	adds	r1, r3, r1
    2ae4:	7ac9      	ldrb	r1, [r1, #11]
    2ae6:	b2c9      	uxtb	r1, r1
    2ae8:	0114      	lsls	r4, r2, #4
    2aea:	191b      	adds	r3, r3, r4
    2aec:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    2aee:	2101      	movs	r1, #1
    2af0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2af2:	8941      	ldrh	r1, [r0, #10]
    2af4:	3908      	subs	r1, #8
    2af6:	b289      	uxth	r1, r1
    2af8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    2afa:	4973      	ldr	r1, [pc, #460]	; (2cc8 <m2m_ip_cb+0x300>)
    2afc:	880b      	ldrh	r3, [r1, #0]
    2afe:	3301      	adds	r3, #1
    2b00:	b29b      	uxth	r3, r3
    2b02:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    2b04:	880b      	ldrh	r3, [r1, #0]
    2b06:	b29b      	uxth	r3, r3
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d103      	bne.n	2b14 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    2b0c:	880b      	ldrh	r3, [r1, #0]
    2b0e:	3301      	adds	r3, #1
    2b10:	b29b      	uxth	r3, r3
    2b12:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2b14:	4b6c      	ldr	r3, [pc, #432]	; (2cc8 <m2m_ip_cb+0x300>)
    2b16:	8819      	ldrh	r1, [r3, #0]
    2b18:	b289      	uxth	r1, r1
    2b1a:	0110      	lsls	r0, r2, #4
    2b1c:	4b69      	ldr	r3, [pc, #420]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2b1e:	181b      	adds	r3, r3, r0
    2b20:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    2b22:	ab09      	add	r3, sp, #36	; 0x24
    2b24:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2b26:	2202      	movs	r2, #2
    2b28:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2b2a:	aa05      	add	r2, sp, #20
    2b2c:	8851      	ldrh	r1, [r2, #2]
    2b2e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2b30:	9a06      	ldr	r2, [sp, #24]
    2b32:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2b34:	4b62      	ldr	r3, [pc, #392]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b36:	681b      	ldr	r3, [r3, #0]
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d0a1      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2b3c:	4b60      	ldr	r3, [pc, #384]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	aa05      	add	r2, sp, #20
    2b42:	2008      	movs	r0, #8
    2b44:	5610      	ldrsb	r0, [r2, r0]
    2b46:	aa09      	add	r2, sp, #36	; 0x24
    2b48:	2104      	movs	r1, #4
    2b4a:	4798      	blx	r3
    2b4c:	e798      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2b4e:	2300      	movs	r3, #0
    2b50:	2204      	movs	r2, #4
    2b52:	a909      	add	r1, sp, #36	; 0x24
    2b54:	0020      	movs	r0, r4
    2b56:	4c58      	ldr	r4, [pc, #352]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2b58:	47a0      	blx	r4
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d000      	beq.n	2b60 <m2m_ip_cb+0x198>
    2b5e:	e78f      	b.n	2a80 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    2b60:	ab09      	add	r3, sp, #36	; 0x24
    2b62:	2000      	movs	r0, #0
    2b64:	5618      	ldrsb	r0, [r3, r0]
    2b66:	aa05      	add	r2, sp, #20
    2b68:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2b6a:	785b      	ldrb	r3, [r3, #1]
    2b6c:	b25b      	sxtb	r3, r3
    2b6e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2b70:	2b00      	cmp	r3, #0
    2b72:	d107      	bne.n	2b84 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2b74:	ab09      	add	r3, sp, #36	; 0x24
    2b76:	885b      	ldrh	r3, [r3, #2]
    2b78:	3b08      	subs	r3, #8
    2b7a:	b29b      	uxth	r3, r3
    2b7c:	0101      	lsls	r1, r0, #4
    2b7e:	4a51      	ldr	r2, [pc, #324]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2b80:	1852      	adds	r2, r2, r1
    2b82:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    2b84:	4b4e      	ldr	r3, [pc, #312]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d100      	bne.n	2b8e <m2m_ip_cb+0x1c6>
    2b8c:	e778      	b.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2b8e:	4b4c      	ldr	r3, [pc, #304]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b90:	681b      	ldr	r3, [r3, #0]
    2b92:	aa05      	add	r2, sp, #20
    2b94:	2105      	movs	r1, #5
    2b96:	4798      	blx	r3
	{
    2b98:	e772      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2b9a:	2300      	movs	r3, #0
    2b9c:	2244      	movs	r2, #68	; 0x44
    2b9e:	a909      	add	r1, sp, #36	; 0x24
    2ba0:	0020      	movs	r0, r4
    2ba2:	4c45      	ldr	r4, [pc, #276]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2ba4:	47a0      	blx	r4
    2ba6:	2800      	cmp	r0, #0
    2ba8:	d000      	beq.n	2bac <m2m_ip_cb+0x1e4>
    2baa:	e769      	b.n	2a80 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    2bac:	4b47      	ldr	r3, [pc, #284]	; (2ccc <m2m_ip_cb+0x304>)
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d100      	bne.n	2bb6 <m2m_ip_cb+0x1ee>
    2bb4:	e764      	b.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2bb6:	4b45      	ldr	r3, [pc, #276]	; (2ccc <m2m_ip_cb+0x304>)
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2bbc:	9203      	str	r2, [sp, #12]
    2bbe:	0011      	movs	r1, r2
    2bc0:	a809      	add	r0, sp, #36	; 0x24
    2bc2:	4798      	blx	r3
    2bc4:	e75c      	b.n	2a80 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2bc6:	2306      	movs	r3, #6
    2bc8:	469a      	mov	sl, r3
    2bca:	e001      	b.n	2bd0 <m2m_ip_cb+0x208>
    2bcc:	2306      	movs	r3, #6
    2bce:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2bd0:	2300      	movs	r3, #0
    2bd2:	2210      	movs	r2, #16
    2bd4:	a905      	add	r1, sp, #20
    2bd6:	0020      	movs	r0, r4
    2bd8:	4f37      	ldr	r7, [pc, #220]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2bda:	47b8      	blx	r7
    2bdc:	2800      	cmp	r0, #0
    2bde:	d000      	beq.n	2be2 <m2m_ip_cb+0x21a>
    2be0:	e74e      	b.n	2a80 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    2be2:	aa05      	add	r2, sp, #20
    2be4:	200c      	movs	r0, #12
    2be6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2be8:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    2bea:	0107      	lsls	r7, r0, #4
    2bec:	4935      	ldr	r1, [pc, #212]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2bee:	19c9      	adds	r1, r1, r7
    2bf0:	2700      	movs	r7, #0
    2bf2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2bf4:	2608      	movs	r6, #8
    2bf6:	5f97      	ldrsh	r7, [r2, r6]
    2bf8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2bfa:	8957      	ldrh	r7, [r2, #10]
    2bfc:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2bfe:	af09      	add	r7, sp, #36	; 0x24
    2c00:	8856      	ldrh	r6, [r2, #2]
    2c02:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2c04:	9a06      	ldr	r2, [sp, #24]
    2c06:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2c08:	88ca      	ldrh	r2, [r1, #6]
    2c0a:	b292      	uxth	r2, r2
    2c0c:	4293      	cmp	r3, r2
    2c0e:	d00c      	beq.n	2c2a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    2c10:	2d10      	cmp	r5, #16
    2c12:	d800      	bhi.n	2c16 <m2m_ip_cb+0x24e>
    2c14:	e734      	b.n	2a80 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2c16:	2301      	movs	r3, #1
    2c18:	2200      	movs	r2, #0
    2c1a:	2100      	movs	r1, #0
    2c1c:	2000      	movs	r0, #0
    2c1e:	4c26      	ldr	r4, [pc, #152]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2c20:	47a0      	blx	r4
	{
    2c22:	e72d      	b.n	2a80 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2c24:	2309      	movs	r3, #9
    2c26:	469a      	mov	sl, r3
    2c28:	e7d2      	b.n	2bd0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2c2a:	4643      	mov	r3, r8
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	dd01      	ble.n	2c34 <m2m_ip_cb+0x26c>
    2c30:	45a8      	cmp	r8, r5
    2c32:	db0f      	blt.n	2c54 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2c34:	ab09      	add	r3, sp, #36	; 0x24
    2c36:	4642      	mov	r2, r8
    2c38:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2c3a:	2300      	movs	r3, #0
    2c3c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2c3e:	4b20      	ldr	r3, [pc, #128]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d100      	bne.n	2c48 <m2m_ip_cb+0x280>
    2c46:	e71b      	b.n	2a80 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2c48:	4b1d      	ldr	r3, [pc, #116]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	aa09      	add	r2, sp, #36	; 0x24
    2c4e:	4651      	mov	r1, sl
    2c50:	4798      	blx	r3
    2c52:	e715      	b.n	2a80 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    2c54:	0023      	movs	r3, r4
    2c56:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2c58:	4642      	mov	r2, r8
    2c5a:	4669      	mov	r1, sp
    2c5c:	818a      	strh	r2, [r1, #12]
    2c5e:	898a      	ldrh	r2, [r1, #12]
    2c60:	9200      	str	r2, [sp, #0]
    2c62:	4652      	mov	r2, sl
    2c64:	0039      	movs	r1, r7
    2c66:	4c1a      	ldr	r4, [pc, #104]	; (2cd0 <m2m_ip_cb+0x308>)
    2c68:	47a0      	blx	r4
    2c6a:	e709      	b.n	2a80 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2c6c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2c6e:	2300      	movs	r3, #0
    2c70:	2208      	movs	r2, #8
    2c72:	a909      	add	r1, sp, #36	; 0x24
    2c74:	0020      	movs	r0, r4
    2c76:	4c10      	ldr	r4, [pc, #64]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2c78:	47a0      	blx	r4
    2c7a:	2800      	cmp	r0, #0
    2c7c:	d000      	beq.n	2c80 <m2m_ip_cb+0x2b8>
    2c7e:	e6ff      	b.n	2a80 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    2c80:	ab09      	add	r3, sp, #36	; 0x24
    2c82:	2000      	movs	r0, #0
    2c84:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2c86:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2c88:	8859      	ldrh	r1, [r3, #2]
    2c8a:	ab05      	add	r3, sp, #20
    2c8c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2c8e:	0101      	lsls	r1, r0, #4
    2c90:	4b0c      	ldr	r3, [pc, #48]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2c92:	185b      	adds	r3, r3, r1
    2c94:	88db      	ldrh	r3, [r3, #6]
    2c96:	b29b      	uxth	r3, r3
    2c98:	429a      	cmp	r2, r3
    2c9a:	d000      	beq.n	2c9e <m2m_ip_cb+0x2d6>
    2c9c:	e6f0      	b.n	2a80 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    2c9e:	4b08      	ldr	r3, [pc, #32]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d100      	bne.n	2ca8 <m2m_ip_cb+0x2e0>
    2ca6:	e6eb      	b.n	2a80 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2ca8:	4b05      	ldr	r3, [pc, #20]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2caa:	681b      	ldr	r3, [r3, #0]
    2cac:	aa05      	add	r2, sp, #20
    2cae:	0029      	movs	r1, r5
    2cb0:	4798      	blx	r3
	{
    2cb2:	e6e5      	b.n	2a80 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2cb4:	2508      	movs	r5, #8
    2cb6:	e7da      	b.n	2c6e <m2m_ip_cb+0x2a6>
    2cb8:	00000c51 	.word	0x00000c51
    2cbc:	20000ad0 	.word	0x20000ad0
    2cc0:	20000acc 	.word	0x20000acc
    2cc4:	20000a1c 	.word	0x20000a1c
    2cc8:	200000a2 	.word	0x200000a2
    2ccc:	20000ad4 	.word	0x20000ad4
    2cd0:	000028b5 	.word	0x000028b5

00002cd4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2cd4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    2cd6:	4b0a      	ldr	r3, [pc, #40]	; (2d00 <socketInit+0x2c>)
    2cd8:	781b      	ldrb	r3, [r3, #0]
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d000      	beq.n	2ce0 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    2cde:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2ce0:	22b0      	movs	r2, #176	; 0xb0
    2ce2:	2100      	movs	r1, #0
    2ce4:	4807      	ldr	r0, [pc, #28]	; (2d04 <socketInit+0x30>)
    2ce6:	4b08      	ldr	r3, [pc, #32]	; (2d08 <socketInit+0x34>)
    2ce8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2cea:	4908      	ldr	r1, [pc, #32]	; (2d0c <socketInit+0x38>)
    2cec:	2002      	movs	r0, #2
    2cee:	4b08      	ldr	r3, [pc, #32]	; (2d10 <socketInit+0x3c>)
    2cf0:	4798      	blx	r3
		gbSocketInit	= 1;
    2cf2:	2201      	movs	r2, #1
    2cf4:	4b02      	ldr	r3, [pc, #8]	; (2d00 <socketInit+0x2c>)
    2cf6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    2cf8:	2200      	movs	r2, #0
    2cfa:	4b06      	ldr	r3, [pc, #24]	; (2d14 <socketInit+0x40>)
    2cfc:	801a      	strh	r2, [r3, #0]
}
    2cfe:	e7ee      	b.n	2cde <socketInit+0xa>
    2d00:	200000a1 	.word	0x200000a1
    2d04:	20000a1c 	.word	0x20000a1c
    2d08:	00000531 	.word	0x00000531
    2d0c:	000029c9 	.word	0x000029c9
    2d10:	00000d3d 	.word	0x00000d3d
    2d14:	200000a2 	.word	0x200000a2

00002d18 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2d18:	4b02      	ldr	r3, [pc, #8]	; (2d24 <registerSocketCallback+0xc>)
    2d1a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2d1c:	4b02      	ldr	r3, [pc, #8]	; (2d28 <registerSocketCallback+0x10>)
    2d1e:	6019      	str	r1, [r3, #0]
}
    2d20:	4770      	bx	lr
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	20000acc 	.word	0x20000acc
    2d28:	20000ad4 	.word	0x20000ad4

00002d2c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2e:	46d6      	mov	lr, sl
    2d30:	4647      	mov	r7, r8
    2d32:	b580      	push	{r7, lr}
    2d34:	b089      	sub	sp, #36	; 0x24
    2d36:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2d38:	2802      	cmp	r0, #2
    2d3a:	d000      	beq.n	2d3e <socket+0x12>
    2d3c:	e09c      	b.n	2e78 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    2d3e:	2901      	cmp	r1, #1
    2d40:	d00a      	beq.n	2d58 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    2d42:	2902      	cmp	r1, #2
    2d44:	d100      	bne.n	2d48 <socket+0x1c>
    2d46:	e070      	b.n	2e2a <socket+0xfe>
	SOCKET					sock = -1;
    2d48:	2501      	movs	r5, #1
    2d4a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    2d4c:	0028      	movs	r0, r5
    2d4e:	b009      	add	sp, #36	; 0x24
    2d50:	bc0c      	pop	{r2, r3}
    2d52:	4690      	mov	r8, r2
    2d54:	469a      	mov	sl, r3
    2d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    2d58:	4c49      	ldr	r4, [pc, #292]	; (2e80 <socket+0x154>)
    2d5a:	7827      	ldrb	r7, [r4, #0]
    2d5c:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2d5e:	7826      	ldrb	r6, [r4, #0]
    2d60:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d62:	7820      	ldrb	r0, [r4, #0]
    2d64:	3001      	adds	r0, #1
    2d66:	3106      	adds	r1, #6
    2d68:	4b46      	ldr	r3, [pc, #280]	; (2e84 <socket+0x158>)
    2d6a:	4798      	blx	r3
    2d6c:	b2c9      	uxtb	r1, r1
    2d6e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    2d70:	0132      	lsls	r2, r6, #4
    2d72:	4b45      	ldr	r3, [pc, #276]	; (2e88 <socket+0x15c>)
    2d74:	189b      	adds	r3, r3, r2
    2d76:	7a9b      	ldrb	r3, [r3, #10]
    2d78:	2506      	movs	r5, #6
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d018      	beq.n	2db0 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    2d7e:	4e40      	ldr	r6, [pc, #256]	; (2e80 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d80:	4b40      	ldr	r3, [pc, #256]	; (2e84 <socket+0x158>)
    2d82:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    2d84:	4b40      	ldr	r3, [pc, #256]	; (2e88 <socket+0x15c>)
    2d86:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    2d88:	7837      	ldrb	r7, [r6, #0]
    2d8a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2d8c:	7834      	ldrb	r4, [r6, #0]
    2d8e:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d90:	7830      	ldrb	r0, [r6, #0]
    2d92:	3001      	adds	r0, #1
    2d94:	2107      	movs	r1, #7
    2d96:	47d0      	blx	sl
    2d98:	b2c9      	uxtb	r1, r1
    2d9a:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    2d9c:	0123      	lsls	r3, r4, #4
    2d9e:	4443      	add	r3, r8
    2da0:	7a9b      	ldrb	r3, [r3, #10]
    2da2:	2b00      	cmp	r3, #0
    2da4:	d007      	beq.n	2db6 <socket+0x8a>
    2da6:	3d01      	subs	r5, #1
    2da8:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    2daa:	2d00      	cmp	r5, #0
    2dac:	d1ec      	bne.n	2d88 <socket+0x5c>
    2dae:	e7cb      	b.n	2d48 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2db0:	4b35      	ldr	r3, [pc, #212]	; (2e88 <socket+0x15c>)
    2db2:	18d4      	adds	r4, r2, r3
    2db4:	e002      	b.n	2dbc <socket+0x90>
    2db6:	0124      	lsls	r4, r4, #4
    2db8:	4b33      	ldr	r3, [pc, #204]	; (2e88 <socket+0x15c>)
    2dba:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    2dbc:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    2dbe:	2d00      	cmp	r5, #0
    2dc0:	dbc4      	blt.n	2d4c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2dc2:	2210      	movs	r2, #16
    2dc4:	2100      	movs	r1, #0
    2dc6:	0020      	movs	r0, r4
    2dc8:	4b30      	ldr	r3, [pc, #192]	; (2e8c <socket+0x160>)
    2dca:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    2dcc:	2301      	movs	r3, #1
    2dce:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    2dd0:	4a2f      	ldr	r2, [pc, #188]	; (2e90 <socket+0x164>)
    2dd2:	8813      	ldrh	r3, [r2, #0]
    2dd4:	3301      	adds	r3, #1
    2dd6:	b29b      	uxth	r3, r3
    2dd8:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    2dda:	8813      	ldrh	r3, [r2, #0]
    2ddc:	b29b      	uxth	r3, r3
    2dde:	2b00      	cmp	r3, #0
    2de0:	d103      	bne.n	2dea <socket+0xbe>
				++gu16SessionID;
    2de2:	8813      	ldrh	r3, [r2, #0]
    2de4:	3301      	adds	r3, #1
    2de6:	b29b      	uxth	r3, r3
    2de8:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    2dea:	4e29      	ldr	r6, [pc, #164]	; (2e90 <socket+0x164>)
    2dec:	8833      	ldrh	r3, [r6, #0]
    2dee:	b29b      	uxth	r3, r3
    2df0:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    2df2:	4828      	ldr	r0, [pc, #160]	; (2e94 <socket+0x168>)
    2df4:	4f28      	ldr	r7, [pc, #160]	; (2e98 <socket+0x16c>)
    2df6:	47b8      	blx	r7
    2df8:	8832      	ldrh	r2, [r6, #0]
    2dfa:	b292      	uxth	r2, r2
    2dfc:	0029      	movs	r1, r5
    2dfe:	4827      	ldr	r0, [pc, #156]	; (2e9c <socket+0x170>)
    2e00:	47b8      	blx	r7
    2e02:	200d      	movs	r0, #13
    2e04:	4b26      	ldr	r3, [pc, #152]	; (2ea0 <socket+0x174>)
    2e06:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    2e08:	9b05      	ldr	r3, [sp, #20]
    2e0a:	07db      	lsls	r3, r3, #31
    2e0c:	d59e      	bpl.n	2d4c <socket+0x20>
				strSSLCreate.sslSock = sock;
    2e0e:	aa07      	add	r2, sp, #28
    2e10:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2e12:	2321      	movs	r3, #33	; 0x21
    2e14:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2e16:	2300      	movs	r3, #0
    2e18:	9302      	str	r3, [sp, #8]
    2e1a:	9301      	str	r3, [sp, #4]
    2e1c:	9300      	str	r3, [sp, #0]
    2e1e:	3304      	adds	r3, #4
    2e20:	2150      	movs	r1, #80	; 0x50
    2e22:	2002      	movs	r0, #2
    2e24:	4c1f      	ldr	r4, [pc, #124]	; (2ea4 <socket+0x178>)
    2e26:	47a0      	blx	r4
    2e28:	e790      	b.n	2d4c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    2e2a:	4b1f      	ldr	r3, [pc, #124]	; (2ea8 <socket+0x17c>)
    2e2c:	781d      	ldrb	r5, [r3, #0]
    2e2e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e30:	781c      	ldrb	r4, [r3, #0]
    2e32:	0124      	lsls	r4, r4, #4
    2e34:	4a1d      	ldr	r2, [pc, #116]	; (2eac <socket+0x180>)
    2e36:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e38:	7819      	ldrb	r1, [r3, #0]
    2e3a:	3101      	adds	r1, #1
    2e3c:	2203      	movs	r2, #3
    2e3e:	400a      	ands	r2, r1
    2e40:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    2e42:	7aa3      	ldrb	r3, [r4, #10]
    2e44:	2b00      	cmp	r3, #0
    2e46:	d014      	beq.n	2e72 <socket+0x146>
    2e48:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    2e4a:	4917      	ldr	r1, [pc, #92]	; (2ea8 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e4c:	4f17      	ldr	r7, [pc, #92]	; (2eac <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e4e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    2e50:	780d      	ldrb	r5, [r1, #0]
    2e52:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e54:	780c      	ldrb	r4, [r1, #0]
    2e56:	0124      	lsls	r4, r4, #4
    2e58:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e5a:	780b      	ldrb	r3, [r1, #0]
    2e5c:	3301      	adds	r3, #1
    2e5e:	4003      	ands	r3, r0
    2e60:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    2e62:	7aa3      	ldrb	r3, [r4, #10]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d004      	beq.n	2e72 <socket+0x146>
    2e68:	3a01      	subs	r2, #1
    2e6a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    2e6c:	2a00      	cmp	r2, #0
    2e6e:	d1ef      	bne.n	2e50 <socket+0x124>
    2e70:	e76a      	b.n	2d48 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    2e72:	3507      	adds	r5, #7
    2e74:	b26d      	sxtb	r5, r5
					break;
    2e76:	e7a2      	b.n	2dbe <socket+0x92>
	SOCKET					sock = -1;
    2e78:	2501      	movs	r5, #1
    2e7a:	426d      	negs	r5, r5
    2e7c:	e766      	b.n	2d4c <socket+0x20>
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	200000a4 	.word	0x200000a4
    2e84:	000080c1 	.word	0x000080c1
    2e88:	20000a1c 	.word	0x20000a1c
    2e8c:	00000531 	.word	0x00000531
    2e90:	200000a2 	.word	0x200000a2
    2e94:	00009740 	.word	0x00009740
    2e98:	0000818d 	.word	0x0000818d
    2e9c:	0000a1d0 	.word	0x0000a1d0
    2ea0:	000081c1 	.word	0x000081c1
    2ea4:	00000645 	.word	0x00000645
    2ea8:	200000a5 	.word	0x200000a5
    2eac:	20000a8c 	.word	0x20000a8c

00002eb0 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2eb0:	b570      	push	{r4, r5, r6, lr}
    2eb2:	b088      	sub	sp, #32
    2eb4:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2eb6:	2900      	cmp	r1, #0
    2eb8:	d02b      	beq.n	2f12 <bind+0x62>
    2eba:	2800      	cmp	r0, #0
    2ebc:	db2c      	blt.n	2f18 <bind+0x68>
    2ebe:	0100      	lsls	r0, r0, #4
    2ec0:	4b1a      	ldr	r3, [pc, #104]	; (2f2c <bind+0x7c>)
    2ec2:	181b      	adds	r3, r3, r0
    2ec4:	7a9b      	ldrb	r3, [r3, #10]
    2ec6:	2b01      	cmp	r3, #1
    2ec8:	d129      	bne.n	2f1e <bind+0x6e>
    2eca:	2a00      	cmp	r2, #0
    2ecc:	d02a      	beq.n	2f24 <bind+0x74>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ece:	4b17      	ldr	r3, [pc, #92]	; (2f2c <bind+0x7c>)
    2ed0:	181b      	adds	r3, r3, r0
    2ed2:	7adb      	ldrb	r3, [r3, #11]
		uint8				u8CMD = SOCKET_CMD_BIND;
    2ed4:	2641      	movs	r6, #65	; 0x41
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ed6:	07db      	lsls	r3, r3, #31
    2ed8:	d500      	bpl.n	2edc <bind+0x2c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
    2eda:	3613      	adds	r6, #19
		}

		/* Build the bind request. */
		strBind.sock = sock;
    2edc:	ad05      	add	r5, sp, #20
    2ede:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2ee0:	2208      	movs	r2, #8
    2ee2:	0028      	movs	r0, r5
    2ee4:	4b12      	ldr	r3, [pc, #72]	; (2f30 <bind+0x80>)
    2ee6:	4798      	blx	r3
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    2ee8:	0124      	lsls	r4, r4, #4
    2eea:	4b10      	ldr	r3, [pc, #64]	; (2f2c <bind+0x7c>)
    2eec:	191c      	adds	r4, r3, r4
    2eee:	88e3      	ldrh	r3, [r4, #6]
    2ef0:	816b      	strh	r3, [r5, #10]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    2ef2:	2300      	movs	r3, #0
    2ef4:	9302      	str	r3, [sp, #8]
    2ef6:	9301      	str	r3, [sp, #4]
    2ef8:	9300      	str	r3, [sp, #0]
    2efa:	330c      	adds	r3, #12
    2efc:	002a      	movs	r2, r5
    2efe:	0031      	movs	r1, r6
    2f00:	2002      	movs	r0, #2
    2f02:	4c0c      	ldr	r4, [pc, #48]	; (2f34 <bind+0x84>)
    2f04:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f06:	2800      	cmp	r0, #0
    2f08:	d001      	beq.n	2f0e <bind+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f0a:	2009      	movs	r0, #9
    2f0c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2f0e:	b008      	add	sp, #32
    2f10:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2f12:	2006      	movs	r0, #6
    2f14:	4240      	negs	r0, r0
    2f16:	e7fa      	b.n	2f0e <bind+0x5e>
    2f18:	2006      	movs	r0, #6
    2f1a:	4240      	negs	r0, r0
    2f1c:	e7f7      	b.n	2f0e <bind+0x5e>
    2f1e:	2006      	movs	r0, #6
    2f20:	4240      	negs	r0, r0
    2f22:	e7f4      	b.n	2f0e <bind+0x5e>
    2f24:	2006      	movs	r0, #6
    2f26:	4240      	negs	r0, r0
    2f28:	e7f1      	b.n	2f0e <bind+0x5e>
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	20000a1c 	.word	0x20000a1c
    2f30:	0000051d 	.word	0x0000051d
    2f34:	00000645 	.word	0x00000645

00002f38 <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
    2f38:	b510      	push	{r4, lr}
    2f3a:	b086      	sub	sp, #24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    2f3c:	2800      	cmp	r0, #0
    2f3e:	db1c      	blt.n	2f7a <listen+0x42>
    2f40:	0102      	lsls	r2, r0, #4
    2f42:	4b11      	ldr	r3, [pc, #68]	; (2f88 <listen+0x50>)
    2f44:	189b      	adds	r3, r3, r2
    2f46:	7a9b      	ldrb	r3, [r3, #10]
    2f48:	2b01      	cmp	r3, #1
    2f4a:	d119      	bne.n	2f80 <listen+0x48>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
    2f4c:	aa05      	add	r2, sp, #20
    2f4e:	7010      	strb	r0, [r2, #0]
		strListen.u8BackLog = backlog;
    2f50:	7051      	strb	r1, [r2, #1]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
    2f52:	0100      	lsls	r0, r0, #4
    2f54:	4b0c      	ldr	r3, [pc, #48]	; (2f88 <listen+0x50>)
    2f56:	1818      	adds	r0, r3, r0
    2f58:	88c3      	ldrh	r3, [r0, #6]
    2f5a:	8053      	strh	r3, [r2, #2]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
    2f5c:	2300      	movs	r3, #0
    2f5e:	9302      	str	r3, [sp, #8]
    2f60:	9301      	str	r3, [sp, #4]
    2f62:	9300      	str	r3, [sp, #0]
    2f64:	3304      	adds	r3, #4
    2f66:	2142      	movs	r1, #66	; 0x42
    2f68:	2002      	movs	r0, #2
    2f6a:	4c08      	ldr	r4, [pc, #32]	; (2f8c <listen+0x54>)
    2f6c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f6e:	2800      	cmp	r0, #0
    2f70:	d001      	beq.n	2f76 <listen+0x3e>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f72:	2009      	movs	r0, #9
    2f74:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2f76:	b006      	add	sp, #24
    2f78:	bd10      	pop	{r4, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2f7a:	2006      	movs	r0, #6
    2f7c:	4240      	negs	r0, r0
    2f7e:	e7fa      	b.n	2f76 <listen+0x3e>
    2f80:	2006      	movs	r0, #6
    2f82:	4240      	negs	r0, r0
    2f84:	e7f7      	b.n	2f76 <listen+0x3e>
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	20000a1c 	.word	0x20000a1c
    2f8c:	00000645 	.word	0x00000645

00002f90 <accept>:
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
    2f90:	2800      	cmp	r0, #0
    2f92:	db07      	blt.n	2fa4 <accept+0x14>
    2f94:	0100      	lsls	r0, r0, #4
    2f96:	4b06      	ldr	r3, [pc, #24]	; (2fb0 <accept+0x20>)
    2f98:	1818      	adds	r0, r3, r0
    2f9a:	7a83      	ldrb	r3, [r0, #10]
    2f9c:	2b01      	cmp	r3, #1
    2f9e:	d104      	bne.n	2faa <accept+0x1a>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
    2fa0:	2000      	movs	r0, #0
	}
	return s8Ret;
}
    2fa2:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2fa4:	2006      	movs	r0, #6
    2fa6:	4240      	negs	r0, r0
    2fa8:	e7fb      	b.n	2fa2 <accept+0x12>
    2faa:	2006      	movs	r0, #6
    2fac:	4240      	negs	r0, r0
    2fae:	e7f8      	b.n	2fa2 <accept+0x12>
    2fb0:	20000a1c 	.word	0x20000a1c

00002fb4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    2fb4:	b530      	push	{r4, r5, lr}
    2fb6:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    2fb8:	2800      	cmp	r0, #0
    2fba:	db36      	blt.n	302a <send+0x76>
    2fbc:	2900      	cmp	r1, #0
    2fbe:	d037      	beq.n	3030 <send+0x7c>
    2fc0:	23af      	movs	r3, #175	; 0xaf
    2fc2:	00db      	lsls	r3, r3, #3
    2fc4:	429a      	cmp	r2, r3
    2fc6:	d836      	bhi.n	3036 <send+0x82>
    2fc8:	0104      	lsls	r4, r0, #4
    2fca:	4b1e      	ldr	r3, [pc, #120]	; (3044 <send+0x90>)
    2fcc:	191b      	adds	r3, r3, r4
    2fce:	7a9b      	ldrb	r3, [r3, #10]
    2fd0:	2b01      	cmp	r3, #1
    2fd2:	d133      	bne.n	303c <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    2fd4:	ab04      	add	r3, sp, #16
    2fd6:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    2fd8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    2fda:	0025      	movs	r5, r4
    2fdc:	4c19      	ldr	r4, [pc, #100]	; (3044 <send+0x90>)
    2fde:	1964      	adds	r4, r4, r5
    2fe0:	88e4      	ldrh	r4, [r4, #6]
    2fe2:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    2fe4:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    2fe6:	2806      	cmp	r0, #6
    2fe8:	dd00      	ble.n	2fec <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    2fea:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2fec:	0104      	lsls	r4, r0, #4
    2fee:	4b15      	ldr	r3, [pc, #84]	; (3044 <send+0x90>)
    2ff0:	191b      	adds	r3, r3, r4
    2ff2:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    2ff4:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ff6:	07e4      	lsls	r4, r4, #31
    2ff8:	d505      	bpl.n	3006 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    2ffa:	0100      	lsls	r0, r0, #4
    2ffc:	4b11      	ldr	r3, [pc, #68]	; (3044 <send+0x90>)
    2ffe:	1818      	adds	r0, r3, r0
    3000:	8905      	ldrh	r5, [r0, #8]
    3002:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3004:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3006:	2080      	movs	r0, #128	; 0x80
    3008:	4318      	orrs	r0, r3
    300a:	9502      	str	r5, [sp, #8]
    300c:	9201      	str	r2, [sp, #4]
    300e:	9100      	str	r1, [sp, #0]
    3010:	2310      	movs	r3, #16
    3012:	aa04      	add	r2, sp, #16
    3014:	0001      	movs	r1, r0
    3016:	2002      	movs	r0, #2
    3018:	4c0b      	ldr	r4, [pc, #44]	; (3048 <send+0x94>)
    301a:	47a0      	blx	r4
    301c:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    301e:	2800      	cmp	r0, #0
    3020:	d000      	beq.n	3024 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3022:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3024:	0018      	movs	r0, r3
    3026:	b009      	add	sp, #36	; 0x24
    3028:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    302a:	2306      	movs	r3, #6
    302c:	425b      	negs	r3, r3
    302e:	e7f9      	b.n	3024 <send+0x70>
    3030:	2306      	movs	r3, #6
    3032:	425b      	negs	r3, r3
    3034:	e7f6      	b.n	3024 <send+0x70>
    3036:	2306      	movs	r3, #6
    3038:	425b      	negs	r3, r3
    303a:	e7f3      	b.n	3024 <send+0x70>
    303c:	2306      	movs	r3, #6
    303e:	425b      	negs	r3, r3
    3040:	e7f0      	b.n	3024 <send+0x70>
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	20000a1c 	.word	0x20000a1c
    3048:	00000645 	.word	0x00000645

0000304c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    304c:	b530      	push	{r4, r5, lr}
    304e:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3050:	2800      	cmp	r0, #0
    3052:	db34      	blt.n	30be <recv+0x72>
    3054:	2900      	cmp	r1, #0
    3056:	d035      	beq.n	30c4 <recv+0x78>
    3058:	2a00      	cmp	r2, #0
    305a:	d036      	beq.n	30ca <recv+0x7e>
    305c:	0105      	lsls	r5, r0, #4
    305e:	4c1e      	ldr	r4, [pc, #120]	; (30d8 <recv+0x8c>)
    3060:	1964      	adds	r4, r4, r5
    3062:	7aa4      	ldrb	r4, [r4, #10]
    3064:	2c01      	cmp	r4, #1
    3066:	d133      	bne.n	30d0 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3068:	4c1b      	ldr	r4, [pc, #108]	; (30d8 <recv+0x8c>)
    306a:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    306c:	1964      	adds	r4, r4, r5
    306e:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3070:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3072:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3074:	2900      	cmp	r1, #0
    3076:	d11d      	bne.n	30b4 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3078:	2101      	movs	r1, #1
    307a:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    307c:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    307e:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3080:	07d2      	lsls	r2, r2, #31
    3082:	d500      	bpl.n	3086 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3084:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3086:	2b00      	cmp	r3, #0
    3088:	d117      	bne.n	30ba <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    308a:	3b01      	subs	r3, #1
    308c:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    308e:	aa04      	add	r2, sp, #16
    3090:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3092:	0100      	lsls	r0, r0, #4
    3094:	4b10      	ldr	r3, [pc, #64]	; (30d8 <recv+0x8c>)
    3096:	1818      	adds	r0, r3, r0
    3098:	88c3      	ldrh	r3, [r0, #6]
    309a:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    309c:	2300      	movs	r3, #0
    309e:	9302      	str	r3, [sp, #8]
    30a0:	9301      	str	r3, [sp, #4]
    30a2:	9300      	str	r3, [sp, #0]
    30a4:	3308      	adds	r3, #8
    30a6:	2002      	movs	r0, #2
    30a8:	4c0c      	ldr	r4, [pc, #48]	; (30dc <recv+0x90>)
    30aa:	47a0      	blx	r4
    30ac:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    30ae:	2800      	cmp	r0, #0
    30b0:	d000      	beq.n	30b4 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    30b2:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    30b4:	0010      	movs	r0, r2
    30b6:	b007      	add	sp, #28
    30b8:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    30ba:	9304      	str	r3, [sp, #16]
    30bc:	e7e7      	b.n	308e <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    30be:	2206      	movs	r2, #6
    30c0:	4252      	negs	r2, r2
    30c2:	e7f7      	b.n	30b4 <recv+0x68>
    30c4:	2206      	movs	r2, #6
    30c6:	4252      	negs	r2, r2
    30c8:	e7f4      	b.n	30b4 <recv+0x68>
    30ca:	2206      	movs	r2, #6
    30cc:	4252      	negs	r2, r2
    30ce:	e7f1      	b.n	30b4 <recv+0x68>
    30d0:	2206      	movs	r2, #6
    30d2:	4252      	negs	r2, r2
    30d4:	e7ee      	b.n	30b4 <recv+0x68>
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	20000a1c 	.word	0x20000a1c
    30dc:	00000645 	.word	0x00000645

000030e0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    30e0:	b530      	push	{r4, r5, lr}
    30e2:	b087      	sub	sp, #28
    30e4:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    30e6:	481e      	ldr	r0, [pc, #120]	; (3160 <close+0x80>)
    30e8:	4d1e      	ldr	r5, [pc, #120]	; (3164 <close+0x84>)
    30ea:	47a8      	blx	r5
    30ec:	0021      	movs	r1, r4
    30ee:	481e      	ldr	r0, [pc, #120]	; (3168 <close+0x88>)
    30f0:	47a8      	blx	r5
    30f2:	200d      	movs	r0, #13
    30f4:	4b1d      	ldr	r3, [pc, #116]	; (316c <close+0x8c>)
    30f6:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    30f8:	2c00      	cmp	r4, #0
    30fa:	db2a      	blt.n	3152 <close+0x72>
    30fc:	0122      	lsls	r2, r4, #4
    30fe:	4b1c      	ldr	r3, [pc, #112]	; (3170 <close+0x90>)
    3100:	189b      	adds	r3, r3, r2
    3102:	7a9b      	ldrb	r3, [r3, #10]
    3104:	2b01      	cmp	r3, #1
    3106:	d127      	bne.n	3158 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3108:	a905      	add	r1, sp, #20
    310a:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    310c:	4b18      	ldr	r3, [pc, #96]	; (3170 <close+0x90>)
    310e:	189b      	adds	r3, r3, r2
    3110:	88da      	ldrh	r2, [r3, #6]
    3112:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3114:	2200      	movs	r2, #0
    3116:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3118:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    311a:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    311c:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    311e:	07db      	lsls	r3, r3, #31
    3120:	d500      	bpl.n	3124 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3122:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3124:	2300      	movs	r3, #0
    3126:	9302      	str	r3, [sp, #8]
    3128:	9301      	str	r3, [sp, #4]
    312a:	9300      	str	r3, [sp, #0]
    312c:	3304      	adds	r3, #4
    312e:	aa05      	add	r2, sp, #20
    3130:	2002      	movs	r0, #2
    3132:	4d10      	ldr	r5, [pc, #64]	; (3174 <close+0x94>)
    3134:	47a8      	blx	r5
    3136:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3138:	d001      	beq.n	313e <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    313a:	2509      	movs	r5, #9
    313c:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    313e:	0124      	lsls	r4, r4, #4
    3140:	480b      	ldr	r0, [pc, #44]	; (3170 <close+0x90>)
    3142:	1820      	adds	r0, r4, r0
    3144:	2210      	movs	r2, #16
    3146:	2100      	movs	r1, #0
    3148:	4b0b      	ldr	r3, [pc, #44]	; (3178 <close+0x98>)
    314a:	4798      	blx	r3
	}
	return s8Ret;
}
    314c:	0028      	movs	r0, r5
    314e:	b007      	add	sp, #28
    3150:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3152:	2506      	movs	r5, #6
    3154:	426d      	negs	r5, r5
    3156:	e7f9      	b.n	314c <close+0x6c>
    3158:	2506      	movs	r5, #6
    315a:	426d      	negs	r5, r5
    315c:	e7f6      	b.n	314c <close+0x6c>
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	00009740 	.word	0x00009740
    3164:	0000818d 	.word	0x0000818d
    3168:	0000a1b8 	.word	0x0000a1b8
    316c:	000081c1 	.word	0x000081c1
    3170:	20000a1c 	.word	0x20000a1c
    3174:	00000645 	.word	0x00000645
    3178:	00000531 	.word	0x00000531

0000317c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    317c:	b570      	push	{r4, r5, r6, lr}
    317e:	b082      	sub	sp, #8
    3180:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3182:	4b2a      	ldr	r3, [pc, #168]	; (322c <spi_flash_enable+0xb0>)
    3184:	4798      	blx	r3
    3186:	0500      	lsls	r0, r0, #20
    3188:	0d00      	lsrs	r0, r0, #20
    318a:	4b29      	ldr	r3, [pc, #164]	; (3230 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    318c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    318e:	4298      	cmp	r0, r3
    3190:	d802      	bhi.n	3198 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3192:	0028      	movs	r0, r5
    3194:	b002      	add	sp, #8
    3196:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3198:	a901      	add	r1, sp, #4
    319a:	4826      	ldr	r0, [pc, #152]	; (3234 <spi_flash_enable+0xb8>)
    319c:	4b26      	ldr	r3, [pc, #152]	; (3238 <spi_flash_enable+0xbc>)
    319e:	4798      	blx	r3
    31a0:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    31a2:	d1f6      	bne.n	3192 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    31a4:	4b25      	ldr	r3, [pc, #148]	; (323c <spi_flash_enable+0xc0>)
    31a6:	9a01      	ldr	r2, [sp, #4]
    31a8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    31aa:	4925      	ldr	r1, [pc, #148]	; (3240 <spi_flash_enable+0xc4>)
    31ac:	4319      	orrs	r1, r3
    31ae:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    31b0:	4820      	ldr	r0, [pc, #128]	; (3234 <spi_flash_enable+0xb8>)
    31b2:	4b24      	ldr	r3, [pc, #144]	; (3244 <spi_flash_enable+0xc8>)
    31b4:	4798      	blx	r3
		if(enable) {
    31b6:	2c00      	cmp	r4, #0
    31b8:	d020      	beq.n	31fc <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    31ba:	2100      	movs	r1, #0
    31bc:	4822      	ldr	r0, [pc, #136]	; (3248 <spi_flash_enable+0xcc>)
    31be:	4c21      	ldr	r4, [pc, #132]	; (3244 <spi_flash_enable+0xc8>)
    31c0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    31c2:	21ab      	movs	r1, #171	; 0xab
    31c4:	4821      	ldr	r0, [pc, #132]	; (324c <spi_flash_enable+0xd0>)
    31c6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    31c8:	2101      	movs	r1, #1
    31ca:	4821      	ldr	r0, [pc, #132]	; (3250 <spi_flash_enable+0xd4>)
    31cc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    31ce:	2100      	movs	r1, #0
    31d0:	4820      	ldr	r0, [pc, #128]	; (3254 <spi_flash_enable+0xd8>)
    31d2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    31d4:	2181      	movs	r1, #129	; 0x81
    31d6:	4820      	ldr	r0, [pc, #128]	; (3258 <spi_flash_enable+0xdc>)
    31d8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    31da:	4e20      	ldr	r6, [pc, #128]	; (325c <spi_flash_enable+0xe0>)
    31dc:	4c20      	ldr	r4, [pc, #128]	; (3260 <spi_flash_enable+0xe4>)
    31de:	0030      	movs	r0, r6
    31e0:	47a0      	blx	r4
    31e2:	2801      	cmp	r0, #1
    31e4:	d1fb      	bne.n	31de <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    31e6:	4b15      	ldr	r3, [pc, #84]	; (323c <spi_flash_enable+0xc0>)
    31e8:	9a01      	ldr	r2, [sp, #4]
    31ea:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    31ec:	2180      	movs	r1, #128	; 0x80
    31ee:	0249      	lsls	r1, r1, #9
    31f0:	4319      	orrs	r1, r3
    31f2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    31f4:	480f      	ldr	r0, [pc, #60]	; (3234 <spi_flash_enable+0xb8>)
    31f6:	4b13      	ldr	r3, [pc, #76]	; (3244 <spi_flash_enable+0xc8>)
    31f8:	4798      	blx	r3
    31fa:	e7ca      	b.n	3192 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    31fc:	2100      	movs	r1, #0
    31fe:	4812      	ldr	r0, [pc, #72]	; (3248 <spi_flash_enable+0xcc>)
    3200:	4c10      	ldr	r4, [pc, #64]	; (3244 <spi_flash_enable+0xc8>)
    3202:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3204:	21b9      	movs	r1, #185	; 0xb9
    3206:	4811      	ldr	r0, [pc, #68]	; (324c <spi_flash_enable+0xd0>)
    3208:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    320a:	2101      	movs	r1, #1
    320c:	4810      	ldr	r0, [pc, #64]	; (3250 <spi_flash_enable+0xd4>)
    320e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3210:	2100      	movs	r1, #0
    3212:	4810      	ldr	r0, [pc, #64]	; (3254 <spi_flash_enable+0xd8>)
    3214:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3216:	2181      	movs	r1, #129	; 0x81
    3218:	480f      	ldr	r0, [pc, #60]	; (3258 <spi_flash_enable+0xdc>)
    321a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    321c:	4e0f      	ldr	r6, [pc, #60]	; (325c <spi_flash_enable+0xe0>)
    321e:	4c10      	ldr	r4, [pc, #64]	; (3260 <spi_flash_enable+0xe4>)
    3220:	0030      	movs	r0, r6
    3222:	47a0      	blx	r4
    3224:	2801      	cmp	r0, #1
    3226:	d1fb      	bne.n	3220 <spi_flash_enable+0xa4>
    3228:	e7dd      	b.n	31e6 <spi_flash_enable+0x6a>
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	0000152d 	.word	0x0000152d
    3230:	0000039f 	.word	0x0000039f
    3234:	00001410 	.word	0x00001410
    3238:	0000197d 	.word	0x0000197d
    323c:	f8888fff 	.word	0xf8888fff
    3240:	01111000 	.word	0x01111000
    3244:	00001989 	.word	0x00001989
    3248:	00010208 	.word	0x00010208
    324c:	0001020c 	.word	0x0001020c
    3250:	00010214 	.word	0x00010214
    3254:	0001021c 	.word	0x0001021c
    3258:	00010204 	.word	0x00010204
    325c:	00010218 	.word	0x00010218
    3260:	00001971 	.word	0x00001971

00003264 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3264:	b5f0      	push	{r4, r5, r6, r7, lr}
    3266:	46de      	mov	lr, fp
    3268:	4657      	mov	r7, sl
    326a:	464e      	mov	r6, r9
    326c:	4645      	mov	r5, r8
    326e:	b5e0      	push	{r5, r6, r7, lr}
    3270:	b091      	sub	sp, #68	; 0x44
    3272:	0005      	movs	r5, r0
    3274:	000c      	movs	r4, r1
    3276:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3278:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    327a:	0008      	movs	r0, r1
    327c:	4bbc      	ldr	r3, [pc, #752]	; (3570 <usart_init+0x30c>)
    327e:	4798      	blx	r3
    3280:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3282:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3284:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3286:	07db      	lsls	r3, r3, #31
    3288:	d506      	bpl.n	3298 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    328a:	b011      	add	sp, #68	; 0x44
    328c:	bc3c      	pop	{r2, r3, r4, r5}
    328e:	4690      	mov	r8, r2
    3290:	4699      	mov	r9, r3
    3292:	46a2      	mov	sl, r4
    3294:	46ab      	mov	fp, r5
    3296:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3298:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    329a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    329c:	079b      	lsls	r3, r3, #30
    329e:	d4f4      	bmi.n	328a <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    32a0:	49b4      	ldr	r1, [pc, #720]	; (3574 <usart_init+0x310>)
    32a2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    32a4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    32a6:	2301      	movs	r3, #1
    32a8:	40bb      	lsls	r3, r7
    32aa:	4303      	orrs	r3, r0
    32ac:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    32ae:	a90f      	add	r1, sp, #60	; 0x3c
    32b0:	272d      	movs	r7, #45	; 0x2d
    32b2:	5df3      	ldrb	r3, [r6, r7]
    32b4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    32b6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    32b8:	b2d3      	uxtb	r3, r2
    32ba:	9302      	str	r3, [sp, #8]
    32bc:	0018      	movs	r0, r3
    32be:	4bae      	ldr	r3, [pc, #696]	; (3578 <usart_init+0x314>)
    32c0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    32c2:	9802      	ldr	r0, [sp, #8]
    32c4:	4bad      	ldr	r3, [pc, #692]	; (357c <usart_init+0x318>)
    32c6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    32c8:	5df0      	ldrb	r0, [r6, r7]
    32ca:	2100      	movs	r1, #0
    32cc:	4bac      	ldr	r3, [pc, #688]	; (3580 <usart_init+0x31c>)
    32ce:	4798      	blx	r3
	module->character_size = config->character_size;
    32d0:	7af3      	ldrb	r3, [r6, #11]
    32d2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    32d4:	2324      	movs	r3, #36	; 0x24
    32d6:	5cf3      	ldrb	r3, [r6, r3]
    32d8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    32da:	2325      	movs	r3, #37	; 0x25
    32dc:	5cf3      	ldrb	r3, [r6, r3]
    32de:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    32e0:	7ef3      	ldrb	r3, [r6, #27]
    32e2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    32e4:	7f33      	ldrb	r3, [r6, #28]
    32e6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    32e8:	682b      	ldr	r3, [r5, #0]
    32ea:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    32ec:	0018      	movs	r0, r3
    32ee:	4ba0      	ldr	r3, [pc, #640]	; (3570 <usart_init+0x30c>)
    32f0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    32f2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    32f4:	2200      	movs	r2, #0
    32f6:	230e      	movs	r3, #14
    32f8:	a906      	add	r1, sp, #24
    32fa:	468c      	mov	ip, r1
    32fc:	4463      	add	r3, ip
    32fe:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    3300:	8a32      	ldrh	r2, [r6, #16]
    3302:	9202      	str	r2, [sp, #8]
    3304:	2380      	movs	r3, #128	; 0x80
    3306:	01db      	lsls	r3, r3, #7
    3308:	429a      	cmp	r2, r3
    330a:	d100      	bne.n	330e <usart_init+0xaa>
    330c:	e09e      	b.n	344c <usart_init+0x1e8>
    330e:	d90f      	bls.n	3330 <usart_init+0xcc>
    3310:	23c0      	movs	r3, #192	; 0xc0
    3312:	01db      	lsls	r3, r3, #7
    3314:	9a02      	ldr	r2, [sp, #8]
    3316:	429a      	cmp	r2, r3
    3318:	d100      	bne.n	331c <usart_init+0xb8>
    331a:	e092      	b.n	3442 <usart_init+0x1de>
    331c:	2380      	movs	r3, #128	; 0x80
    331e:	021b      	lsls	r3, r3, #8
    3320:	429a      	cmp	r2, r3
    3322:	d000      	beq.n	3326 <usart_init+0xc2>
    3324:	e11f      	b.n	3566 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3326:	2303      	movs	r3, #3
    3328:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    332a:	2300      	movs	r3, #0
    332c:	9307      	str	r3, [sp, #28]
    332e:	e008      	b.n	3342 <usart_init+0xde>
	switch (config->sample_rate) {
    3330:	2380      	movs	r3, #128	; 0x80
    3332:	019b      	lsls	r3, r3, #6
    3334:	429a      	cmp	r2, r3
    3336:	d000      	beq.n	333a <usart_init+0xd6>
    3338:	e115      	b.n	3566 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    333a:	2310      	movs	r3, #16
    333c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    333e:	3b0f      	subs	r3, #15
    3340:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    3342:	6833      	ldr	r3, [r6, #0]
    3344:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3346:	68f3      	ldr	r3, [r6, #12]
    3348:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    334a:	6973      	ldr	r3, [r6, #20]
    334c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    334e:	7e33      	ldrb	r3, [r6, #24]
    3350:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3352:	2326      	movs	r3, #38	; 0x26
    3354:	5cf3      	ldrb	r3, [r6, r3]
    3356:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3358:	6873      	ldr	r3, [r6, #4]
    335a:	4699      	mov	r9, r3
	switch (transfer_mode)
    335c:	2b00      	cmp	r3, #0
    335e:	d100      	bne.n	3362 <usart_init+0xfe>
    3360:	e0a0      	b.n	34a4 <usart_init+0x240>
    3362:	2380      	movs	r3, #128	; 0x80
    3364:	055b      	lsls	r3, r3, #21
    3366:	4599      	cmp	r9, r3
    3368:	d100      	bne.n	336c <usart_init+0x108>
    336a:	e084      	b.n	3476 <usart_init+0x212>
	if(config->encoding_format_enable) {
    336c:	7e73      	ldrb	r3, [r6, #25]
    336e:	2b00      	cmp	r3, #0
    3370:	d002      	beq.n	3378 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3372:	7eb3      	ldrb	r3, [r6, #26]
    3374:	4642      	mov	r2, r8
    3376:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3378:	682a      	ldr	r2, [r5, #0]
    337a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    337c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    337e:	2b00      	cmp	r3, #0
    3380:	d1fc      	bne.n	337c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    3382:	330e      	adds	r3, #14
    3384:	aa06      	add	r2, sp, #24
    3386:	4694      	mov	ip, r2
    3388:	4463      	add	r3, ip
    338a:	881b      	ldrh	r3, [r3, #0]
    338c:	4642      	mov	r2, r8
    338e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3390:	9b05      	ldr	r3, [sp, #20]
    3392:	9a03      	ldr	r2, [sp, #12]
    3394:	4313      	orrs	r3, r2
    3396:	9a04      	ldr	r2, [sp, #16]
    3398:	4313      	orrs	r3, r2
    339a:	464a      	mov	r2, r9
    339c:	4313      	orrs	r3, r2
    339e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    33a0:	465b      	mov	r3, fp
    33a2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    33a4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    33a6:	4653      	mov	r3, sl
    33a8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    33aa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    33ac:	2327      	movs	r3, #39	; 0x27
    33ae:	5cf3      	ldrb	r3, [r6, r3]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d101      	bne.n	33b8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    33b4:	3304      	adds	r3, #4
    33b6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    33b8:	7e73      	ldrb	r3, [r6, #25]
    33ba:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    33bc:	7f32      	ldrb	r2, [r6, #28]
    33be:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    33c0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    33c2:	7f72      	ldrb	r2, [r6, #29]
    33c4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    33c6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    33c8:	2224      	movs	r2, #36	; 0x24
    33ca:	5cb2      	ldrb	r2, [r6, r2]
    33cc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    33ce:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    33d0:	2225      	movs	r2, #37	; 0x25
    33d2:	5cb2      	ldrb	r2, [r6, r2]
    33d4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    33d6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    33d8:	7ab1      	ldrb	r1, [r6, #10]
    33da:	7af2      	ldrb	r2, [r6, #11]
    33dc:	4311      	orrs	r1, r2
    33de:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    33e0:	8933      	ldrh	r3, [r6, #8]
    33e2:	2bff      	cmp	r3, #255	; 0xff
    33e4:	d100      	bne.n	33e8 <usart_init+0x184>
    33e6:	e081      	b.n	34ec <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    33e8:	2280      	movs	r2, #128	; 0x80
    33ea:	0452      	lsls	r2, r2, #17
    33ec:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    33ee:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    33f0:	232c      	movs	r3, #44	; 0x2c
    33f2:	5cf3      	ldrb	r3, [r6, r3]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d103      	bne.n	3400 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    33f8:	4b62      	ldr	r3, [pc, #392]	; (3584 <usart_init+0x320>)
    33fa:	789b      	ldrb	r3, [r3, #2]
    33fc:	079b      	lsls	r3, r3, #30
    33fe:	d501      	bpl.n	3404 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3400:	2380      	movs	r3, #128	; 0x80
    3402:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    3404:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3406:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3408:	2b00      	cmp	r3, #0
    340a:	d1fc      	bne.n	3406 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    340c:	4643      	mov	r3, r8
    340e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3410:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3412:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3414:	2b00      	cmp	r3, #0
    3416:	d1fc      	bne.n	3412 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    3418:	4643      	mov	r3, r8
    341a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    341c:	ab0e      	add	r3, sp, #56	; 0x38
    341e:	2280      	movs	r2, #128	; 0x80
    3420:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3422:	2200      	movs	r2, #0
    3424:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    3426:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3428:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    342a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    342c:	930a      	str	r3, [sp, #40]	; 0x28
    342e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3430:	930b      	str	r3, [sp, #44]	; 0x2c
    3432:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3434:	930c      	str	r3, [sp, #48]	; 0x30
    3436:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    3438:	9302      	str	r3, [sp, #8]
    343a:	930d      	str	r3, [sp, #52]	; 0x34
    343c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    343e:	ae0a      	add	r6, sp, #40	; 0x28
    3440:	e063      	b.n	350a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3442:	2308      	movs	r3, #8
    3444:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3446:	3b07      	subs	r3, #7
    3448:	9307      	str	r3, [sp, #28]
    344a:	e77a      	b.n	3342 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    344c:	6833      	ldr	r3, [r6, #0]
    344e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3450:	68f3      	ldr	r3, [r6, #12]
    3452:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    3454:	6973      	ldr	r3, [r6, #20]
    3456:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3458:	7e33      	ldrb	r3, [r6, #24]
    345a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    345c:	2326      	movs	r3, #38	; 0x26
    345e:	5cf3      	ldrb	r3, [r6, r3]
    3460:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3462:	6873      	ldr	r3, [r6, #4]
    3464:	4699      	mov	r9, r3
	switch (transfer_mode)
    3466:	2b00      	cmp	r3, #0
    3468:	d018      	beq.n	349c <usart_init+0x238>
    346a:	2380      	movs	r3, #128	; 0x80
    346c:	055b      	lsls	r3, r3, #21
    346e:	4599      	cmp	r9, r3
    3470:	d001      	beq.n	3476 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    3472:	2000      	movs	r0, #0
    3474:	e025      	b.n	34c2 <usart_init+0x25e>
			if (!config->use_external_clock) {
    3476:	2327      	movs	r3, #39	; 0x27
    3478:	5cf3      	ldrb	r3, [r6, r3]
    347a:	2b00      	cmp	r3, #0
    347c:	d000      	beq.n	3480 <usart_init+0x21c>
    347e:	e775      	b.n	336c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3480:	6a33      	ldr	r3, [r6, #32]
    3482:	001f      	movs	r7, r3
    3484:	b2c0      	uxtb	r0, r0
    3486:	4b40      	ldr	r3, [pc, #256]	; (3588 <usart_init+0x324>)
    3488:	4798      	blx	r3
    348a:	0001      	movs	r1, r0
    348c:	220e      	movs	r2, #14
    348e:	ab06      	add	r3, sp, #24
    3490:	469c      	mov	ip, r3
    3492:	4462      	add	r2, ip
    3494:	0038      	movs	r0, r7
    3496:	4b3d      	ldr	r3, [pc, #244]	; (358c <usart_init+0x328>)
    3498:	4798      	blx	r3
    349a:	e012      	b.n	34c2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    349c:	2308      	movs	r3, #8
    349e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    34a0:	2300      	movs	r3, #0
    34a2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    34a4:	2327      	movs	r3, #39	; 0x27
    34a6:	5cf3      	ldrb	r3, [r6, r3]
    34a8:	2b00      	cmp	r3, #0
    34aa:	d00e      	beq.n	34ca <usart_init+0x266>
				status_code =
    34ac:	9b06      	ldr	r3, [sp, #24]
    34ae:	9300      	str	r3, [sp, #0]
    34b0:	9b07      	ldr	r3, [sp, #28]
    34b2:	220e      	movs	r2, #14
    34b4:	a906      	add	r1, sp, #24
    34b6:	468c      	mov	ip, r1
    34b8:	4462      	add	r2, ip
    34ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    34bc:	6a30      	ldr	r0, [r6, #32]
    34be:	4f34      	ldr	r7, [pc, #208]	; (3590 <usart_init+0x32c>)
    34c0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    34c2:	2800      	cmp	r0, #0
    34c4:	d000      	beq.n	34c8 <usart_init+0x264>
    34c6:	e6e0      	b.n	328a <usart_init+0x26>
    34c8:	e750      	b.n	336c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    34ca:	6a33      	ldr	r3, [r6, #32]
    34cc:	001f      	movs	r7, r3
    34ce:	b2c0      	uxtb	r0, r0
    34d0:	4b2d      	ldr	r3, [pc, #180]	; (3588 <usart_init+0x324>)
    34d2:	4798      	blx	r3
    34d4:	0001      	movs	r1, r0
				status_code =
    34d6:	9b06      	ldr	r3, [sp, #24]
    34d8:	9300      	str	r3, [sp, #0]
    34da:	9b07      	ldr	r3, [sp, #28]
    34dc:	220e      	movs	r2, #14
    34de:	a806      	add	r0, sp, #24
    34e0:	4684      	mov	ip, r0
    34e2:	4462      	add	r2, ip
    34e4:	0038      	movs	r0, r7
    34e6:	4f2a      	ldr	r7, [pc, #168]	; (3590 <usart_init+0x32c>)
    34e8:	47b8      	blx	r7
    34ea:	e7ea      	b.n	34c2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    34ec:	7ef3      	ldrb	r3, [r6, #27]
    34ee:	2b00      	cmp	r3, #0
    34f0:	d100      	bne.n	34f4 <usart_init+0x290>
    34f2:	e77d      	b.n	33f0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    34f4:	2380      	movs	r3, #128	; 0x80
    34f6:	04db      	lsls	r3, r3, #19
    34f8:	431f      	orrs	r7, r3
    34fa:	e779      	b.n	33f0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    34fc:	0020      	movs	r0, r4
    34fe:	4b25      	ldr	r3, [pc, #148]	; (3594 <usart_init+0x330>)
    3500:	4798      	blx	r3
    3502:	e007      	b.n	3514 <usart_init+0x2b0>
    3504:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3506:	2f04      	cmp	r7, #4
    3508:	d00d      	beq.n	3526 <usart_init+0x2c2>
    350a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    350c:	00bb      	lsls	r3, r7, #2
    350e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    3510:	2800      	cmp	r0, #0
    3512:	d0f3      	beq.n	34fc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    3514:	1c43      	adds	r3, r0, #1
    3516:	d0f5      	beq.n	3504 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3518:	a90e      	add	r1, sp, #56	; 0x38
    351a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    351c:	0c00      	lsrs	r0, r0, #16
    351e:	b2c0      	uxtb	r0, r0
    3520:	4b1d      	ldr	r3, [pc, #116]	; (3598 <usart_init+0x334>)
    3522:	4798      	blx	r3
    3524:	e7ee      	b.n	3504 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    3526:	2300      	movs	r3, #0
    3528:	60eb      	str	r3, [r5, #12]
    352a:	612b      	str	r3, [r5, #16]
    352c:	616b      	str	r3, [r5, #20]
    352e:	61ab      	str	r3, [r5, #24]
    3530:	61eb      	str	r3, [r5, #28]
    3532:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    3534:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3536:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3538:	2200      	movs	r2, #0
    353a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    353c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    353e:	3330      	adds	r3, #48	; 0x30
    3540:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    3542:	3301      	adds	r3, #1
    3544:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    3546:	3301      	adds	r3, #1
    3548:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    354a:	3301      	adds	r3, #1
    354c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    354e:	6828      	ldr	r0, [r5, #0]
    3550:	4b07      	ldr	r3, [pc, #28]	; (3570 <usart_init+0x30c>)
    3552:	4798      	blx	r3
    3554:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3556:	4911      	ldr	r1, [pc, #68]	; (359c <usart_init+0x338>)
    3558:	4b11      	ldr	r3, [pc, #68]	; (35a0 <usart_init+0x33c>)
    355a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    355c:	00a4      	lsls	r4, r4, #2
    355e:	4b11      	ldr	r3, [pc, #68]	; (35a4 <usart_init+0x340>)
    3560:	50e5      	str	r5, [r4, r3]
	return status_code;
    3562:	2000      	movs	r0, #0
    3564:	e691      	b.n	328a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3566:	2310      	movs	r3, #16
    3568:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    356a:	2300      	movs	r3, #0
    356c:	9307      	str	r3, [sp, #28]
    356e:	e6e8      	b.n	3342 <usart_init+0xde>
    3570:	000045f1 	.word	0x000045f1
    3574:	40000400 	.word	0x40000400
    3578:	000051c5 	.word	0x000051c5
    357c:	00005139 	.word	0x00005139
    3580:	0000442d 	.word	0x0000442d
    3584:	41002000 	.word	0x41002000
    3588:	000051e1 	.word	0x000051e1
    358c:	0000436f 	.word	0x0000436f
    3590:	00004399 	.word	0x00004399
    3594:	00004479 	.word	0x00004479
    3598:	000052bd 	.word	0x000052bd
    359c:	0000379d 	.word	0x0000379d
    35a0:	0000462d 	.word	0x0000462d
    35a4:	20000b28 	.word	0x20000b28

000035a8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    35a8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    35aa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    35ac:	2a00      	cmp	r2, #0
    35ae:	d101      	bne.n	35b4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    35b0:	0018      	movs	r0, r3
    35b2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    35b4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    35b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    35b8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    35ba:	2a00      	cmp	r2, #0
    35bc:	d1f8      	bne.n	35b0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    35be:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    35c0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    35c2:	2a00      	cmp	r2, #0
    35c4:	d1fc      	bne.n	35c0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    35c6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    35c8:	2102      	movs	r1, #2
    35ca:	7e1a      	ldrb	r2, [r3, #24]
    35cc:	420a      	tst	r2, r1
    35ce:	d0fc      	beq.n	35ca <usart_write_wait+0x22>
	return STATUS_OK;
    35d0:	2300      	movs	r3, #0
    35d2:	e7ed      	b.n	35b0 <usart_write_wait+0x8>

000035d4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    35d4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    35d6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    35d8:	2a00      	cmp	r2, #0
    35da:	d101      	bne.n	35e0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    35dc:	0018      	movs	r0, r3
    35de:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    35e0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    35e2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    35e4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    35e6:	2a00      	cmp	r2, #0
    35e8:	d1f8      	bne.n	35dc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    35ea:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    35ec:	7e10      	ldrb	r0, [r2, #24]
    35ee:	0740      	lsls	r0, r0, #29
    35f0:	d5f4      	bpl.n	35dc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    35f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    35f4:	2b00      	cmp	r3, #0
    35f6:	d1fc      	bne.n	35f2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    35f8:	8b53      	ldrh	r3, [r2, #26]
    35fa:	b2db      	uxtb	r3, r3
	if (error_code) {
    35fc:	0698      	lsls	r0, r3, #26
    35fe:	d01d      	beq.n	363c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    3600:	0798      	lsls	r0, r3, #30
    3602:	d503      	bpl.n	360c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3604:	2302      	movs	r3, #2
    3606:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    3608:	3318      	adds	r3, #24
    360a:	e7e7      	b.n	35dc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    360c:	0758      	lsls	r0, r3, #29
    360e:	d503      	bpl.n	3618 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3610:	2304      	movs	r3, #4
    3612:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    3614:	331a      	adds	r3, #26
    3616:	e7e1      	b.n	35dc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3618:	07d8      	lsls	r0, r3, #31
    361a:	d503      	bpl.n	3624 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    361c:	2301      	movs	r3, #1
    361e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    3620:	3312      	adds	r3, #18
    3622:	e7db      	b.n	35dc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    3624:	06d8      	lsls	r0, r3, #27
    3626:	d503      	bpl.n	3630 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3628:	2310      	movs	r3, #16
    362a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    362c:	3332      	adds	r3, #50	; 0x32
    362e:	e7d5      	b.n	35dc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    3630:	069b      	lsls	r3, r3, #26
    3632:	d503      	bpl.n	363c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3634:	2320      	movs	r3, #32
    3636:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    3638:	3321      	adds	r3, #33	; 0x21
    363a:	e7cf      	b.n	35dc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    363c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    363e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    3640:	2300      	movs	r3, #0
    3642:	e7cb      	b.n	35dc <usart_read_wait+0x8>

00003644 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3644:	b5f0      	push	{r4, r5, r6, r7, lr}
    3646:	46ce      	mov	lr, r9
    3648:	4647      	mov	r7, r8
    364a:	b580      	push	{r7, lr}
    364c:	b083      	sub	sp, #12
    364e:	0005      	movs	r5, r0
    3650:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3652:	2017      	movs	r0, #23
	if (length == 0) {
    3654:	2a00      	cmp	r2, #0
    3656:	d104      	bne.n	3662 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    3658:	b003      	add	sp, #12
    365a:	bc0c      	pop	{r2, r3}
    365c:	4690      	mov	r8, r2
    365e:	4699      	mov	r9, r3
    3660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    3662:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    3664:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    3666:	2b00      	cmp	r3, #0
    3668:	d0f6      	beq.n	3658 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    366a:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    366c:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    366e:	2b00      	cmp	r3, #0
    3670:	d1fc      	bne.n	366c <usart_write_buffer_wait+0x28>
	while (length--) {
    3672:	3a01      	subs	r2, #1
    3674:	b293      	uxth	r3, r2
    3676:	4699      	mov	r9, r3
    3678:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    367a:	2701      	movs	r7, #1
	while (length--) {
    367c:	4b1f      	ldr	r3, [pc, #124]	; (36fc <usart_write_buffer_wait+0xb8>)
    367e:	4698      	mov	r8, r3
    3680:	e011      	b.n	36a6 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    3682:	1c73      	adds	r3, r6, #1
    3684:	b29b      	uxth	r3, r3
    3686:	9a01      	ldr	r2, [sp, #4]
    3688:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    368a:	796a      	ldrb	r2, [r5, #5]
    368c:	2a01      	cmp	r2, #1
    368e:	d017      	beq.n	36c0 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    3690:	b289      	uxth	r1, r1
    3692:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    3694:	0028      	movs	r0, r5
    3696:	4b1a      	ldr	r3, [pc, #104]	; (3700 <usart_write_buffer_wait+0xbc>)
    3698:	4798      	blx	r3
	while (length--) {
    369a:	464b      	mov	r3, r9
    369c:	3b01      	subs	r3, #1
    369e:	b29b      	uxth	r3, r3
    36a0:	4699      	mov	r9, r3
    36a2:	4543      	cmp	r3, r8
    36a4:	d013      	beq.n	36ce <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    36a6:	7e23      	ldrb	r3, [r4, #24]
    36a8:	423b      	tst	r3, r7
    36aa:	d1ea      	bne.n	3682 <usart_write_buffer_wait+0x3e>
    36ac:	4b13      	ldr	r3, [pc, #76]	; (36fc <usart_write_buffer_wait+0xb8>)
    36ae:	7e22      	ldrb	r2, [r4, #24]
    36b0:	423a      	tst	r2, r7
    36b2:	d1e6      	bne.n	3682 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    36b4:	2b01      	cmp	r3, #1
    36b6:	d019      	beq.n	36ec <usart_write_buffer_wait+0xa8>
    36b8:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    36ba:	2b00      	cmp	r3, #0
    36bc:	d1f7      	bne.n	36ae <usart_write_buffer_wait+0x6a>
    36be:	e7e0      	b.n	3682 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    36c0:	3602      	adds	r6, #2
    36c2:	b2b6      	uxth	r6, r6
    36c4:	9a01      	ldr	r2, [sp, #4]
    36c6:	5cd3      	ldrb	r3, [r2, r3]
    36c8:	021b      	lsls	r3, r3, #8
    36ca:	4319      	orrs	r1, r3
    36cc:	e7e2      	b.n	3694 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    36ce:	7e23      	ldrb	r3, [r4, #24]
    36d0:	079b      	lsls	r3, r3, #30
    36d2:	d40d      	bmi.n	36f0 <usart_write_buffer_wait+0xac>
    36d4:	4b09      	ldr	r3, [pc, #36]	; (36fc <usart_write_buffer_wait+0xb8>)
    36d6:	2102      	movs	r1, #2
    36d8:	7e22      	ldrb	r2, [r4, #24]
    36da:	420a      	tst	r2, r1
    36dc:	d10a      	bne.n	36f4 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    36de:	2b01      	cmp	r3, #1
    36e0:	d00a      	beq.n	36f8 <usart_write_buffer_wait+0xb4>
    36e2:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    36e4:	2b00      	cmp	r3, #0
    36e6:	d1f7      	bne.n	36d8 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    36e8:	2000      	movs	r0, #0
    36ea:	e7b5      	b.n	3658 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    36ec:	2012      	movs	r0, #18
    36ee:	e7b3      	b.n	3658 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    36f0:	2000      	movs	r0, #0
    36f2:	e7b1      	b.n	3658 <usart_write_buffer_wait+0x14>
    36f4:	2000      	movs	r0, #0
    36f6:	e7af      	b.n	3658 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    36f8:	2012      	movs	r0, #18
    36fa:	e7ad      	b.n	3658 <usart_write_buffer_wait+0x14>
    36fc:	0000ffff 	.word	0x0000ffff
    3700:	000035a9 	.word	0x000035a9

00003704 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3704:	b5f0      	push	{r4, r5, r6, r7, lr}
    3706:	46d6      	mov	lr, sl
    3708:	b500      	push	{lr}
    370a:	b084      	sub	sp, #16
    370c:	0004      	movs	r4, r0
    370e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3710:	2017      	movs	r0, #23
	if (length == 0) {
    3712:	2a00      	cmp	r2, #0
    3714:	d103      	bne.n	371e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    3716:	b004      	add	sp, #16
    3718:	bc04      	pop	{r2}
    371a:	4692      	mov	sl, r2
    371c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    371e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    3720:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    3722:	2b00      	cmp	r3, #0
    3724:	d0f7      	beq.n	3716 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3726:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    3728:	3a01      	subs	r2, #1
    372a:	b293      	uxth	r3, r2
    372c:	469a      	mov	sl, r3
    372e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    3730:	2704      	movs	r7, #4
    3732:	e019      	b.n	3768 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    3734:	2300      	movs	r3, #0
    3736:	aa02      	add	r2, sp, #8
    3738:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    373a:	1d91      	adds	r1, r2, #6
    373c:	0020      	movs	r0, r4
    373e:	4b15      	ldr	r3, [pc, #84]	; (3794 <usart_read_buffer_wait+0x90>)
    3740:	4798      	blx	r3
		if (retval != STATUS_OK) {
    3742:	2800      	cmp	r0, #0
    3744:	d1e7      	bne.n	3716 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    3746:	1c69      	adds	r1, r5, #1
    3748:	b289      	uxth	r1, r1
    374a:	ab02      	add	r3, sp, #8
    374c:	88db      	ldrh	r3, [r3, #6]
    374e:	9a01      	ldr	r2, [sp, #4]
    3750:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3752:	7962      	ldrb	r2, [r4, #5]
    3754:	2a01      	cmp	r2, #1
    3756:	d014      	beq.n	3782 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    3758:	000d      	movs	r5, r1
	while (length--) {
    375a:	4653      	mov	r3, sl
    375c:	3b01      	subs	r3, #1
    375e:	b29b      	uxth	r3, r3
    3760:	469a      	mov	sl, r3
    3762:	4b0d      	ldr	r3, [pc, #52]	; (3798 <usart_read_buffer_wait+0x94>)
    3764:	459a      	cmp	sl, r3
    3766:	d0d6      	beq.n	3716 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    3768:	7e33      	ldrb	r3, [r6, #24]
    376a:	423b      	tst	r3, r7
    376c:	d1e2      	bne.n	3734 <usart_read_buffer_wait+0x30>
    376e:	4b0a      	ldr	r3, [pc, #40]	; (3798 <usart_read_buffer_wait+0x94>)
    3770:	7e32      	ldrb	r2, [r6, #24]
    3772:	423a      	tst	r2, r7
    3774:	d1de      	bne.n	3734 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    3776:	2b01      	cmp	r3, #1
    3778:	d009      	beq.n	378e <usart_read_buffer_wait+0x8a>
    377a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    377c:	2b00      	cmp	r3, #0
    377e:	d1f7      	bne.n	3770 <usart_read_buffer_wait+0x6c>
    3780:	e7d8      	b.n	3734 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    3782:	3502      	adds	r5, #2
    3784:	b2ad      	uxth	r5, r5
    3786:	0a1b      	lsrs	r3, r3, #8
    3788:	9a01      	ldr	r2, [sp, #4]
    378a:	5453      	strb	r3, [r2, r1]
    378c:	e7e5      	b.n	375a <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    378e:	2012      	movs	r0, #18
    3790:	e7c1      	b.n	3716 <usart_read_buffer_wait+0x12>
    3792:	46c0      	nop			; (mov r8, r8)
    3794:	000035d5 	.word	0x000035d5
    3798:	0000ffff 	.word	0x0000ffff

0000379c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    379e:	0080      	lsls	r0, r0, #2
    37a0:	4b62      	ldr	r3, [pc, #392]	; (392c <_usart_interrupt_handler+0x190>)
    37a2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    37a4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    37a6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    37a8:	2b00      	cmp	r3, #0
    37aa:	d1fc      	bne.n	37a6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    37ac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    37ae:	7da6      	ldrb	r6, [r4, #22]
    37b0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    37b2:	2330      	movs	r3, #48	; 0x30
    37b4:	5ceb      	ldrb	r3, [r5, r3]
    37b6:	2231      	movs	r2, #49	; 0x31
    37b8:	5caf      	ldrb	r7, [r5, r2]
    37ba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    37bc:	07f3      	lsls	r3, r6, #31
    37be:	d522      	bpl.n	3806 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    37c0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    37c2:	b29b      	uxth	r3, r3
    37c4:	2b00      	cmp	r3, #0
    37c6:	d01c      	beq.n	3802 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    37c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    37ca:	7813      	ldrb	r3, [r2, #0]
    37cc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    37ce:	1c51      	adds	r1, r2, #1
    37d0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    37d2:	7969      	ldrb	r1, [r5, #5]
    37d4:	2901      	cmp	r1, #1
    37d6:	d00e      	beq.n	37f6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    37d8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    37da:	05db      	lsls	r3, r3, #23
    37dc:	0ddb      	lsrs	r3, r3, #23
    37de:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    37e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    37e2:	3b01      	subs	r3, #1
    37e4:	b29b      	uxth	r3, r3
    37e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    37e8:	2b00      	cmp	r3, #0
    37ea:	d10c      	bne.n	3806 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    37ec:	3301      	adds	r3, #1
    37ee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    37f0:	3301      	adds	r3, #1
    37f2:	75a3      	strb	r3, [r4, #22]
    37f4:	e007      	b.n	3806 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    37f6:	7851      	ldrb	r1, [r2, #1]
    37f8:	0209      	lsls	r1, r1, #8
    37fa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    37fc:	3202      	adds	r2, #2
    37fe:	62aa      	str	r2, [r5, #40]	; 0x28
    3800:	e7eb      	b.n	37da <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3802:	2301      	movs	r3, #1
    3804:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3806:	07b3      	lsls	r3, r6, #30
    3808:	d506      	bpl.n	3818 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    380a:	2302      	movs	r3, #2
    380c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    380e:	2200      	movs	r2, #0
    3810:	3331      	adds	r3, #49	; 0x31
    3812:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3814:	07fb      	lsls	r3, r7, #31
    3816:	d41a      	bmi.n	384e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3818:	0773      	lsls	r3, r6, #29
    381a:	d565      	bpl.n	38e8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    381c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    381e:	b29b      	uxth	r3, r3
    3820:	2b00      	cmp	r3, #0
    3822:	d05f      	beq.n	38e4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3824:	8b63      	ldrh	r3, [r4, #26]
    3826:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3828:	071a      	lsls	r2, r3, #28
    382a:	d414      	bmi.n	3856 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    382c:	223f      	movs	r2, #63	; 0x3f
    382e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3830:	2b00      	cmp	r3, #0
    3832:	d034      	beq.n	389e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3834:	079a      	lsls	r2, r3, #30
    3836:	d511      	bpl.n	385c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3838:	221a      	movs	r2, #26
    383a:	2332      	movs	r3, #50	; 0x32
    383c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    383e:	3b30      	subs	r3, #48	; 0x30
    3840:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3842:	077b      	lsls	r3, r7, #29
    3844:	d550      	bpl.n	38e8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3846:	0028      	movs	r0, r5
    3848:	696b      	ldr	r3, [r5, #20]
    384a:	4798      	blx	r3
    384c:	e04c      	b.n	38e8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    384e:	0028      	movs	r0, r5
    3850:	68eb      	ldr	r3, [r5, #12]
    3852:	4798      	blx	r3
    3854:	e7e0      	b.n	3818 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3856:	2237      	movs	r2, #55	; 0x37
    3858:	4013      	ands	r3, r2
    385a:	e7e9      	b.n	3830 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    385c:	075a      	lsls	r2, r3, #29
    385e:	d505      	bpl.n	386c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    3860:	221e      	movs	r2, #30
    3862:	2332      	movs	r3, #50	; 0x32
    3864:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3866:	3b2e      	subs	r3, #46	; 0x2e
    3868:	8363      	strh	r3, [r4, #26]
    386a:	e7ea      	b.n	3842 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    386c:	07da      	lsls	r2, r3, #31
    386e:	d505      	bpl.n	387c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    3870:	2213      	movs	r2, #19
    3872:	2332      	movs	r3, #50	; 0x32
    3874:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3876:	3b31      	subs	r3, #49	; 0x31
    3878:	8363      	strh	r3, [r4, #26]
    387a:	e7e2      	b.n	3842 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    387c:	06da      	lsls	r2, r3, #27
    387e:	d505      	bpl.n	388c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    3880:	2242      	movs	r2, #66	; 0x42
    3882:	2332      	movs	r3, #50	; 0x32
    3884:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3886:	3b22      	subs	r3, #34	; 0x22
    3888:	8363      	strh	r3, [r4, #26]
    388a:	e7da      	b.n	3842 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    388c:	2220      	movs	r2, #32
    388e:	421a      	tst	r2, r3
    3890:	d0d7      	beq.n	3842 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3892:	3221      	adds	r2, #33	; 0x21
    3894:	2332      	movs	r3, #50	; 0x32
    3896:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3898:	3b12      	subs	r3, #18
    389a:	8363      	strh	r3, [r4, #26]
    389c:	e7d1      	b.n	3842 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    389e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    38a0:	05db      	lsls	r3, r3, #23
    38a2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    38a4:	b2da      	uxtb	r2, r3
    38a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    38a8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    38aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    38ac:	1c51      	adds	r1, r2, #1
    38ae:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    38b0:	7969      	ldrb	r1, [r5, #5]
    38b2:	2901      	cmp	r1, #1
    38b4:	d010      	beq.n	38d8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    38b6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    38b8:	3b01      	subs	r3, #1
    38ba:	b29b      	uxth	r3, r3
    38bc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    38be:	2b00      	cmp	r3, #0
    38c0:	d112      	bne.n	38e8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    38c2:	3304      	adds	r3, #4
    38c4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    38c6:	2200      	movs	r2, #0
    38c8:	332e      	adds	r3, #46	; 0x2e
    38ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    38cc:	07bb      	lsls	r3, r7, #30
    38ce:	d50b      	bpl.n	38e8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    38d0:	0028      	movs	r0, r5
    38d2:	692b      	ldr	r3, [r5, #16]
    38d4:	4798      	blx	r3
    38d6:	e007      	b.n	38e8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    38d8:	0a1b      	lsrs	r3, r3, #8
    38da:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    38dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    38de:	3301      	adds	r3, #1
    38e0:	626b      	str	r3, [r5, #36]	; 0x24
    38e2:	e7e8      	b.n	38b6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    38e4:	2304      	movs	r3, #4
    38e6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    38e8:	06f3      	lsls	r3, r6, #27
    38ea:	d504      	bpl.n	38f6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    38ec:	2310      	movs	r3, #16
    38ee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    38f0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    38f2:	06fb      	lsls	r3, r7, #27
    38f4:	d40e      	bmi.n	3914 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    38f6:	06b3      	lsls	r3, r6, #26
    38f8:	d504      	bpl.n	3904 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    38fa:	2320      	movs	r3, #32
    38fc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    38fe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3900:	073b      	lsls	r3, r7, #28
    3902:	d40b      	bmi.n	391c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3904:	0733      	lsls	r3, r6, #28
    3906:	d504      	bpl.n	3912 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3908:	2308      	movs	r3, #8
    390a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    390c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    390e:	06bb      	lsls	r3, r7, #26
    3910:	d408      	bmi.n	3924 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    3912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3914:	0028      	movs	r0, r5
    3916:	69eb      	ldr	r3, [r5, #28]
    3918:	4798      	blx	r3
    391a:	e7ec      	b.n	38f6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    391c:	0028      	movs	r0, r5
    391e:	69ab      	ldr	r3, [r5, #24]
    3920:	4798      	blx	r3
    3922:	e7ef      	b.n	3904 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3924:	6a2b      	ldr	r3, [r5, #32]
    3926:	0028      	movs	r0, r5
    3928:	4798      	blx	r3
}
    392a:	e7f2      	b.n	3912 <_usart_interrupt_handler+0x176>
    392c:	20000b28 	.word	0x20000b28

00003930 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3930:	b5f0      	push	{r4, r5, r6, r7, lr}
    3932:	46c6      	mov	lr, r8
    3934:	b500      	push	{lr}
    3936:	000c      	movs	r4, r1
    3938:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    393a:	2800      	cmp	r0, #0
    393c:	d10f      	bne.n	395e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    393e:	2a00      	cmp	r2, #0
    3940:	dd11      	ble.n	3966 <_read+0x36>
    3942:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3944:	4e09      	ldr	r6, [pc, #36]	; (396c <_read+0x3c>)
    3946:	4d0a      	ldr	r5, [pc, #40]	; (3970 <_read+0x40>)
    3948:	6830      	ldr	r0, [r6, #0]
    394a:	0021      	movs	r1, r4
    394c:	682b      	ldr	r3, [r5, #0]
    394e:	4798      	blx	r3
		ptr++;
    3950:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3952:	42bc      	cmp	r4, r7
    3954:	d1f8      	bne.n	3948 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3956:	4640      	mov	r0, r8
    3958:	bc04      	pop	{r2}
    395a:	4690      	mov	r8, r2
    395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    395e:	2301      	movs	r3, #1
    3960:	425b      	negs	r3, r3
    3962:	4698      	mov	r8, r3
    3964:	e7f7      	b.n	3956 <_read+0x26>
	for (; len > 0; --len) {
    3966:	4680      	mov	r8, r0
    3968:	e7f5      	b.n	3956 <_read+0x26>
    396a:	46c0      	nop			; (mov r8, r8)
    396c:	20000ae0 	.word	0x20000ae0
    3970:	20000ad8 	.word	0x20000ad8

00003974 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3974:	b5f0      	push	{r4, r5, r6, r7, lr}
    3976:	46c6      	mov	lr, r8
    3978:	b500      	push	{lr}
    397a:	000e      	movs	r6, r1
    397c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    397e:	3801      	subs	r0, #1
    3980:	2802      	cmp	r0, #2
    3982:	d810      	bhi.n	39a6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3984:	2a00      	cmp	r2, #0
    3986:	d011      	beq.n	39ac <_write+0x38>
    3988:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    398a:	4b0c      	ldr	r3, [pc, #48]	; (39bc <_write+0x48>)
    398c:	4698      	mov	r8, r3
    398e:	4f0c      	ldr	r7, [pc, #48]	; (39c0 <_write+0x4c>)
    3990:	4643      	mov	r3, r8
    3992:	6818      	ldr	r0, [r3, #0]
    3994:	5d31      	ldrb	r1, [r6, r4]
    3996:	683b      	ldr	r3, [r7, #0]
    3998:	4798      	blx	r3
    399a:	2800      	cmp	r0, #0
    399c:	db08      	blt.n	39b0 <_write+0x3c>
			return -1;
		}
		++nChars;
    399e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    39a0:	42a5      	cmp	r5, r4
    39a2:	d1f5      	bne.n	3990 <_write+0x1c>
    39a4:	e006      	b.n	39b4 <_write+0x40>
		return -1;
    39a6:	2401      	movs	r4, #1
    39a8:	4264      	negs	r4, r4
    39aa:	e003      	b.n	39b4 <_write+0x40>
	for (; len != 0; --len) {
    39ac:	0014      	movs	r4, r2
    39ae:	e001      	b.n	39b4 <_write+0x40>
			return -1;
    39b0:	2401      	movs	r4, #1
    39b2:	4264      	negs	r4, r4
	}
	return nChars;
}
    39b4:	0020      	movs	r0, r4
    39b6:	bc04      	pop	{r2}
    39b8:	4690      	mov	r8, r2
    39ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39bc:	20000ae0 	.word	0x20000ae0
    39c0:	20000adc 	.word	0x20000adc

000039c4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    39c4:	b570      	push	{r4, r5, r6, lr}
    39c6:	b082      	sub	sp, #8
    39c8:	0005      	movs	r5, r0
    39ca:	000e      	movs	r6, r1
	uint16_t temp = 0;
    39cc:	2200      	movs	r2, #0
    39ce:	466b      	mov	r3, sp
    39d0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    39d2:	4c06      	ldr	r4, [pc, #24]	; (39ec <usart_serial_getchar+0x28>)
    39d4:	466b      	mov	r3, sp
    39d6:	1d99      	adds	r1, r3, #6
    39d8:	0028      	movs	r0, r5
    39da:	47a0      	blx	r4
    39dc:	2800      	cmp	r0, #0
    39de:	d1f9      	bne.n	39d4 <usart_serial_getchar+0x10>

	*c = temp;
    39e0:	466b      	mov	r3, sp
    39e2:	3306      	adds	r3, #6
    39e4:	881b      	ldrh	r3, [r3, #0]
    39e6:	7033      	strb	r3, [r6, #0]
}
    39e8:	b002      	add	sp, #8
    39ea:	bd70      	pop	{r4, r5, r6, pc}
    39ec:	000035d5 	.word	0x000035d5

000039f0 <usart_serial_putchar>:
{
    39f0:	b570      	push	{r4, r5, r6, lr}
    39f2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    39f4:	b28c      	uxth	r4, r1
    39f6:	4e03      	ldr	r6, [pc, #12]	; (3a04 <usart_serial_putchar+0x14>)
    39f8:	0021      	movs	r1, r4
    39fa:	0028      	movs	r0, r5
    39fc:	47b0      	blx	r6
    39fe:	2800      	cmp	r0, #0
    3a00:	d1fa      	bne.n	39f8 <usart_serial_putchar+0x8>
}
    3a02:	bd70      	pop	{r4, r5, r6, pc}
    3a04:	000035a9 	.word	0x000035a9

00003a08 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    3a08:	b510      	push	{r4, lr}
    3a0a:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    3a0c:	466b      	mov	r3, sp
    3a0e:	1ddc      	adds	r4, r3, #7
    3a10:	2201      	movs	r2, #1
    3a12:	0021      	movs	r1, r4
    3a14:	480f      	ldr	r0, [pc, #60]	; (3a54 <USART_HOST_ISR_VECT+0x4c>)
    3a16:	4b10      	ldr	r3, [pc, #64]	; (3a58 <USART_HOST_ISR_VECT+0x50>)
    3a18:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3a1a:	b672      	cpsid	i
    3a1c:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    3a20:	2200      	movs	r2, #0
    3a22:	4b0e      	ldr	r3, [pc, #56]	; (3a5c <USART_HOST_ISR_VECT+0x54>)
    3a24:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    3a26:	4b0e      	ldr	r3, [pc, #56]	; (3a60 <USART_HOST_ISR_VECT+0x58>)
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	7821      	ldrb	r1, [r4, #0]
    3a2c:	4a0d      	ldr	r2, [pc, #52]	; (3a64 <USART_HOST_ISR_VECT+0x5c>)
    3a2e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    3a30:	2b9b      	cmp	r3, #155	; 0x9b
    3a32:	d00a      	beq.n	3a4a <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    3a34:	3301      	adds	r3, #1
    3a36:	4a0a      	ldr	r2, [pc, #40]	; (3a60 <USART_HOST_ISR_VECT+0x58>)
    3a38:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    3a3a:	2201      	movs	r2, #1
    3a3c:	4b07      	ldr	r3, [pc, #28]	; (3a5c <USART_HOST_ISR_VECT+0x54>)
    3a3e:	701a      	strb	r2, [r3, #0]
    3a40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a44:	b662      	cpsie	i
}
    3a46:	b002      	add	sp, #8
    3a48:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    3a4a:	2200      	movs	r2, #0
    3a4c:	4b04      	ldr	r3, [pc, #16]	; (3a60 <USART_HOST_ISR_VECT+0x58>)
    3a4e:	701a      	strb	r2, [r3, #0]
    3a50:	e7f3      	b.n	3a3a <USART_HOST_ISR_VECT+0x32>
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	200000ac 	.word	0x200000ac
    3a58:	00003705 	.word	0x00003705
    3a5c:	2000000c 	.word	0x2000000c
    3a60:	20000180 	.word	0x20000180
    3a64:	200000e4 	.word	0x200000e4

00003a68 <sio2host_init>:
{
    3a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a6a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3a6c:	2380      	movs	r3, #128	; 0x80
    3a6e:	05db      	lsls	r3, r3, #23
    3a70:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3a72:	2300      	movs	r3, #0
    3a74:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3a76:	22ff      	movs	r2, #255	; 0xff
    3a78:	4669      	mov	r1, sp
    3a7a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3a7c:	2200      	movs	r2, #0
    3a7e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3a80:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3a82:	2401      	movs	r4, #1
    3a84:	2124      	movs	r1, #36	; 0x24
    3a86:	4668      	mov	r0, sp
    3a88:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3a8a:	3101      	adds	r1, #1
    3a8c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3a8e:	3101      	adds	r1, #1
    3a90:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3a92:	3101      	adds	r1, #1
    3a94:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3a96:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3a98:	3105      	adds	r1, #5
    3a9a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3a9c:	3101      	adds	r1, #1
    3a9e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3aa0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3aa2:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3aa4:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3aa6:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3aa8:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3aaa:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3aac:	2313      	movs	r3, #19
    3aae:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3ab0:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3ab2:	2380      	movs	r3, #128	; 0x80
    3ab4:	035b      	lsls	r3, r3, #13
    3ab6:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3ab8:	4b2f      	ldr	r3, [pc, #188]	; (3b78 <sio2host_init+0x110>)
    3aba:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3abc:	4b2f      	ldr	r3, [pc, #188]	; (3b7c <sio2host_init+0x114>)
    3abe:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3ac0:	2301      	movs	r3, #1
    3ac2:	425b      	negs	r3, r3
    3ac4:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3ac6:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    3ac8:	23e1      	movs	r3, #225	; 0xe1
    3aca:	025b      	lsls	r3, r3, #9
    3acc:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3ace:	4d2c      	ldr	r5, [pc, #176]	; (3b80 <sio2host_init+0x118>)
    3ad0:	4b2c      	ldr	r3, [pc, #176]	; (3b84 <sio2host_init+0x11c>)
    3ad2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3ad4:	4a2c      	ldr	r2, [pc, #176]	; (3b88 <sio2host_init+0x120>)
    3ad6:	4b2d      	ldr	r3, [pc, #180]	; (3b8c <sio2host_init+0x124>)
    3ad8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3ada:	4a2d      	ldr	r2, [pc, #180]	; (3b90 <sio2host_init+0x128>)
    3adc:	4b2d      	ldr	r3, [pc, #180]	; (3b94 <sio2host_init+0x12c>)
    3ade:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3ae0:	466a      	mov	r2, sp
    3ae2:	492d      	ldr	r1, [pc, #180]	; (3b98 <sio2host_init+0x130>)
    3ae4:	0028      	movs	r0, r5
    3ae6:	4b2d      	ldr	r3, [pc, #180]	; (3b9c <sio2host_init+0x134>)
    3ae8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3aea:	4f2d      	ldr	r7, [pc, #180]	; (3ba0 <sio2host_init+0x138>)
    3aec:	683b      	ldr	r3, [r7, #0]
    3aee:	6898      	ldr	r0, [r3, #8]
    3af0:	2100      	movs	r1, #0
    3af2:	4e2c      	ldr	r6, [pc, #176]	; (3ba4 <sio2host_init+0x13c>)
    3af4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3af6:	683b      	ldr	r3, [r7, #0]
    3af8:	6858      	ldr	r0, [r3, #4]
    3afa:	2100      	movs	r1, #0
    3afc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3afe:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3b00:	0030      	movs	r0, r6
    3b02:	4b29      	ldr	r3, [pc, #164]	; (3ba8 <sio2host_init+0x140>)
    3b04:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b06:	231f      	movs	r3, #31
    3b08:	4018      	ands	r0, r3
    3b0a:	4084      	lsls	r4, r0
    3b0c:	4b27      	ldr	r3, [pc, #156]	; (3bac <sio2host_init+0x144>)
    3b0e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b10:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b12:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3b14:	2b00      	cmp	r3, #0
    3b16:	d1fc      	bne.n	3b12 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3b18:	6833      	ldr	r3, [r6, #0]
    3b1a:	2202      	movs	r2, #2
    3b1c:	4313      	orrs	r3, r2
    3b1e:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b20:	4b17      	ldr	r3, [pc, #92]	; (3b80 <sio2host_init+0x118>)
    3b22:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b24:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b26:	2a00      	cmp	r2, #0
    3b28:	d1fc      	bne.n	3b24 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3b2a:	6859      	ldr	r1, [r3, #4]
    3b2c:	2280      	movs	r2, #128	; 0x80
    3b2e:	0252      	lsls	r2, r2, #9
    3b30:	430a      	orrs	r2, r1
    3b32:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3b34:	2101      	movs	r1, #1
    3b36:	4a12      	ldr	r2, [pc, #72]	; (3b80 <sio2host_init+0x118>)
    3b38:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3b3a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b3c:	2a00      	cmp	r2, #0
    3b3e:	d1fc      	bne.n	3b3a <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    3b40:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b42:	2a00      	cmp	r2, #0
    3b44:	d1fc      	bne.n	3b40 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3b46:	6859      	ldr	r1, [r3, #4]
    3b48:	2280      	movs	r2, #128	; 0x80
    3b4a:	0292      	lsls	r2, r2, #10
    3b4c:	430a      	orrs	r2, r1
    3b4e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3b50:	2101      	movs	r1, #1
    3b52:	4a0b      	ldr	r2, [pc, #44]	; (3b80 <sio2host_init+0x118>)
    3b54:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3b56:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b58:	2a00      	cmp	r2, #0
    3b5a:	d1fc      	bne.n	3b56 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    3b5c:	4914      	ldr	r1, [pc, #80]	; (3bb0 <sio2host_init+0x148>)
    3b5e:	2000      	movs	r0, #0
    3b60:	4b14      	ldr	r3, [pc, #80]	; (3bb4 <sio2host_init+0x14c>)
    3b62:	4798      	blx	r3
    3b64:	2204      	movs	r2, #4
    3b66:	4b0c      	ldr	r3, [pc, #48]	; (3b98 <sio2host_init+0x130>)
    3b68:	759a      	strb	r2, [r3, #22]
    3b6a:	32fd      	adds	r2, #253	; 0xfd
    3b6c:	32ff      	adds	r2, #255	; 0xff
    3b6e:	4b0f      	ldr	r3, [pc, #60]	; (3bac <sio2host_init+0x144>)
    3b70:	601a      	str	r2, [r3, #0]
}
    3b72:	b011      	add	sp, #68	; 0x44
    3b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b76:	46c0      	nop			; (mov r8, r8)
    3b78:	00040003 	.word	0x00040003
    3b7c:	00050003 	.word	0x00050003
    3b80:	200000ac 	.word	0x200000ac
    3b84:	20000ae0 	.word	0x20000ae0
    3b88:	000039f1 	.word	0x000039f1
    3b8c:	20000adc 	.word	0x20000adc
    3b90:	000039c5 	.word	0x000039c5
    3b94:	20000ad8 	.word	0x20000ad8
    3b98:	42000800 	.word	0x42000800
    3b9c:	00003265 	.word	0x00003265
    3ba0:	20000010 	.word	0x20000010
    3ba4:	00008391 	.word	0x00008391
    3ba8:	00004669 	.word	0x00004669
    3bac:	e000e100 	.word	0xe000e100
    3bb0:	00003a09 	.word	0x00003a09
    3bb4:	0000462d 	.word	0x0000462d

00003bb8 <sio2host_tx>:
{
    3bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bba:	0004      	movs	r4, r0
    3bbc:	000e      	movs	r6, r1
	for(count=0;count<length;count++)
    3bbe:	2200      	movs	r2, #0
    3bc0:	4b89      	ldr	r3, [pc, #548]	; (3de8 <sio2host_tx+0x230>)
    3bc2:	601a      	str	r2, [r3, #0]
    3bc4:	2900      	cmp	r1, #0
    3bc6:	dd08      	ble.n	3bda <sio2host_tx+0x22>
    3bc8:	2300      	movs	r3, #0
		pt[count]=*(data+count);
    3bca:	4888      	ldr	r0, [pc, #544]	; (3dec <sio2host_tx+0x234>)
    3bcc:	5ce2      	ldrb	r2, [r4, r3]
    3bce:	541a      	strb	r2, [r3, r0]
    3bd0:	3301      	adds	r3, #1
	for(count=0;count<length;count++)
    3bd2:	428b      	cmp	r3, r1
    3bd4:	dbfa      	blt.n	3bcc <sio2host_tx+0x14>
    3bd6:	4b84      	ldr	r3, [pc, #528]	; (3de8 <sio2host_tx+0x230>)
    3bd8:	601e      	str	r6, [r3, #0]
	if(strcmp(pt,"#1c")==0){buff[0]='#';buff[1]='1';buff[2]='c';}
    3bda:	4985      	ldr	r1, [pc, #532]	; (3df0 <sio2host_tx+0x238>)
    3bdc:	4883      	ldr	r0, [pc, #524]	; (3dec <sio2host_tx+0x234>)
    3bde:	4b85      	ldr	r3, [pc, #532]	; (3df4 <sio2host_tx+0x23c>)
    3be0:	4798      	blx	r3
    3be2:	2800      	cmp	r0, #0
    3be4:	d110      	bne.n	3c08 <sio2host_tx+0x50>
    3be6:	4b84      	ldr	r3, [pc, #528]	; (3df8 <sio2host_tx+0x240>)
    3be8:	2223      	movs	r2, #35	; 0x23
    3bea:	701a      	strb	r2, [r3, #0]
    3bec:	320e      	adds	r2, #14
    3bee:	705a      	strb	r2, [r3, #1]
    3bf0:	3232      	adds	r2, #50	; 0x32
    3bf2:	709a      	strb	r2, [r3, #2]
	return usart_write_buffer_wait(module, tx_data, length);
    3bf4:	b2b7      	uxth	r7, r6
    3bf6:	4d81      	ldr	r5, [pc, #516]	; (3dfc <sio2host_tx+0x244>)
    3bf8:	003a      	movs	r2, r7
    3bfa:	0021      	movs	r1, r4
    3bfc:	4880      	ldr	r0, [pc, #512]	; (3e00 <sio2host_tx+0x248>)
    3bfe:	47a8      	blx	r5
	}while (status != STATUS_OK);
    3c00:	2800      	cmp	r0, #0
    3c02:	d1f9      	bne.n	3bf8 <sio2host_tx+0x40>
}
    3c04:	0030      	movs	r0, r6
    3c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(strcmp(pt,"#1o")==0){buff[0]='#';buff[1]='1';buff[2]='o';}
    3c08:	497e      	ldr	r1, [pc, #504]	; (3e04 <sio2host_tx+0x24c>)
    3c0a:	4878      	ldr	r0, [pc, #480]	; (3dec <sio2host_tx+0x234>)
    3c0c:	4b79      	ldr	r3, [pc, #484]	; (3df4 <sio2host_tx+0x23c>)
    3c0e:	4798      	blx	r3
    3c10:	2800      	cmp	r0, #0
    3c12:	d107      	bne.n	3c24 <sio2host_tx+0x6c>
    3c14:	4b78      	ldr	r3, [pc, #480]	; (3df8 <sio2host_tx+0x240>)
    3c16:	2223      	movs	r2, #35	; 0x23
    3c18:	701a      	strb	r2, [r3, #0]
    3c1a:	320e      	adds	r2, #14
    3c1c:	705a      	strb	r2, [r3, #1]
    3c1e:	323e      	adds	r2, #62	; 0x3e
    3c20:	709a      	strb	r2, [r3, #2]
    3c22:	e7e7      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#1e")==0){buff[0]='#';buff[1]='1';buff[2]='e';}	
    3c24:	4978      	ldr	r1, [pc, #480]	; (3e08 <sio2host_tx+0x250>)
    3c26:	4871      	ldr	r0, [pc, #452]	; (3dec <sio2host_tx+0x234>)
    3c28:	4b72      	ldr	r3, [pc, #456]	; (3df4 <sio2host_tx+0x23c>)
    3c2a:	4798      	blx	r3
    3c2c:	2800      	cmp	r0, #0
    3c2e:	d107      	bne.n	3c40 <sio2host_tx+0x88>
    3c30:	4b71      	ldr	r3, [pc, #452]	; (3df8 <sio2host_tx+0x240>)
    3c32:	2223      	movs	r2, #35	; 0x23
    3c34:	701a      	strb	r2, [r3, #0]
    3c36:	320e      	adds	r2, #14
    3c38:	705a      	strb	r2, [r3, #1]
    3c3a:	3234      	adds	r2, #52	; 0x34
    3c3c:	709a      	strb	r2, [r3, #2]
    3c3e:	e7d9      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#2c")==0){buff[0]='#';buff[1]='2';buff[2]='c';}
    3c40:	4972      	ldr	r1, [pc, #456]	; (3e0c <sio2host_tx+0x254>)
    3c42:	486a      	ldr	r0, [pc, #424]	; (3dec <sio2host_tx+0x234>)
    3c44:	4b6b      	ldr	r3, [pc, #428]	; (3df4 <sio2host_tx+0x23c>)
    3c46:	4798      	blx	r3
    3c48:	2800      	cmp	r0, #0
    3c4a:	d107      	bne.n	3c5c <sio2host_tx+0xa4>
    3c4c:	4b6a      	ldr	r3, [pc, #424]	; (3df8 <sio2host_tx+0x240>)
    3c4e:	2223      	movs	r2, #35	; 0x23
    3c50:	701a      	strb	r2, [r3, #0]
    3c52:	320f      	adds	r2, #15
    3c54:	705a      	strb	r2, [r3, #1]
    3c56:	3231      	adds	r2, #49	; 0x31
    3c58:	709a      	strb	r2, [r3, #2]
    3c5a:	e7cb      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#2o")==0){buff[0]='#';buff[1]='2';buff[2]='o';}
    3c5c:	496c      	ldr	r1, [pc, #432]	; (3e10 <sio2host_tx+0x258>)
    3c5e:	4863      	ldr	r0, [pc, #396]	; (3dec <sio2host_tx+0x234>)
    3c60:	4b64      	ldr	r3, [pc, #400]	; (3df4 <sio2host_tx+0x23c>)
    3c62:	4798      	blx	r3
    3c64:	2800      	cmp	r0, #0
    3c66:	d107      	bne.n	3c78 <sio2host_tx+0xc0>
    3c68:	4b63      	ldr	r3, [pc, #396]	; (3df8 <sio2host_tx+0x240>)
    3c6a:	2223      	movs	r2, #35	; 0x23
    3c6c:	701a      	strb	r2, [r3, #0]
    3c6e:	320f      	adds	r2, #15
    3c70:	705a      	strb	r2, [r3, #1]
    3c72:	323d      	adds	r2, #61	; 0x3d
    3c74:	709a      	strb	r2, [r3, #2]
    3c76:	e7bd      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#2e")==0){buff[0]='#';buff[1]='2';buff[2]='e';}
    3c78:	4966      	ldr	r1, [pc, #408]	; (3e14 <sio2host_tx+0x25c>)
    3c7a:	485c      	ldr	r0, [pc, #368]	; (3dec <sio2host_tx+0x234>)
    3c7c:	4b5d      	ldr	r3, [pc, #372]	; (3df4 <sio2host_tx+0x23c>)
    3c7e:	4798      	blx	r3
    3c80:	2800      	cmp	r0, #0
    3c82:	d107      	bne.n	3c94 <sio2host_tx+0xdc>
    3c84:	4b5c      	ldr	r3, [pc, #368]	; (3df8 <sio2host_tx+0x240>)
    3c86:	2223      	movs	r2, #35	; 0x23
    3c88:	701a      	strb	r2, [r3, #0]
    3c8a:	320f      	adds	r2, #15
    3c8c:	705a      	strb	r2, [r3, #1]
    3c8e:	3233      	adds	r2, #51	; 0x33
    3c90:	709a      	strb	r2, [r3, #2]
    3c92:	e7af      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#3c")==0){buff[0]='#';buff[1]='3';buff[2]='c';}
    3c94:	4960      	ldr	r1, [pc, #384]	; (3e18 <sio2host_tx+0x260>)
    3c96:	4855      	ldr	r0, [pc, #340]	; (3dec <sio2host_tx+0x234>)
    3c98:	4b56      	ldr	r3, [pc, #344]	; (3df4 <sio2host_tx+0x23c>)
    3c9a:	4798      	blx	r3
    3c9c:	2800      	cmp	r0, #0
    3c9e:	d107      	bne.n	3cb0 <sio2host_tx+0xf8>
    3ca0:	4b55      	ldr	r3, [pc, #340]	; (3df8 <sio2host_tx+0x240>)
    3ca2:	2223      	movs	r2, #35	; 0x23
    3ca4:	701a      	strb	r2, [r3, #0]
    3ca6:	3210      	adds	r2, #16
    3ca8:	705a      	strb	r2, [r3, #1]
    3caa:	3230      	adds	r2, #48	; 0x30
    3cac:	709a      	strb	r2, [r3, #2]
    3cae:	e7a1      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#3o")==0){buff[0]='#';buff[1]='3';buff[2]='o';}
    3cb0:	495a      	ldr	r1, [pc, #360]	; (3e1c <sio2host_tx+0x264>)
    3cb2:	484e      	ldr	r0, [pc, #312]	; (3dec <sio2host_tx+0x234>)
    3cb4:	4b4f      	ldr	r3, [pc, #316]	; (3df4 <sio2host_tx+0x23c>)
    3cb6:	4798      	blx	r3
    3cb8:	2800      	cmp	r0, #0
    3cba:	d107      	bne.n	3ccc <sio2host_tx+0x114>
    3cbc:	4b4e      	ldr	r3, [pc, #312]	; (3df8 <sio2host_tx+0x240>)
    3cbe:	2223      	movs	r2, #35	; 0x23
    3cc0:	701a      	strb	r2, [r3, #0]
    3cc2:	3210      	adds	r2, #16
    3cc4:	705a      	strb	r2, [r3, #1]
    3cc6:	323c      	adds	r2, #60	; 0x3c
    3cc8:	709a      	strb	r2, [r3, #2]
    3cca:	e793      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#3e")==0){buff[0]='#';buff[1]='3';buff[2]='e';}
    3ccc:	4954      	ldr	r1, [pc, #336]	; (3e20 <sio2host_tx+0x268>)
    3cce:	4847      	ldr	r0, [pc, #284]	; (3dec <sio2host_tx+0x234>)
    3cd0:	4b48      	ldr	r3, [pc, #288]	; (3df4 <sio2host_tx+0x23c>)
    3cd2:	4798      	blx	r3
    3cd4:	2800      	cmp	r0, #0
    3cd6:	d107      	bne.n	3ce8 <sio2host_tx+0x130>
    3cd8:	4b47      	ldr	r3, [pc, #284]	; (3df8 <sio2host_tx+0x240>)
    3cda:	2223      	movs	r2, #35	; 0x23
    3cdc:	701a      	strb	r2, [r3, #0]
    3cde:	3210      	adds	r2, #16
    3ce0:	705a      	strb	r2, [r3, #1]
    3ce2:	3232      	adds	r2, #50	; 0x32
    3ce4:	709a      	strb	r2, [r3, #2]
    3ce6:	e785      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#4c")==0){buff[0]='#';buff[1]='4';buff[2]='c';}
    3ce8:	494e      	ldr	r1, [pc, #312]	; (3e24 <sio2host_tx+0x26c>)
    3cea:	4840      	ldr	r0, [pc, #256]	; (3dec <sio2host_tx+0x234>)
    3cec:	4b41      	ldr	r3, [pc, #260]	; (3df4 <sio2host_tx+0x23c>)
    3cee:	4798      	blx	r3
    3cf0:	2800      	cmp	r0, #0
    3cf2:	d107      	bne.n	3d04 <sio2host_tx+0x14c>
    3cf4:	4b40      	ldr	r3, [pc, #256]	; (3df8 <sio2host_tx+0x240>)
    3cf6:	2223      	movs	r2, #35	; 0x23
    3cf8:	701a      	strb	r2, [r3, #0]
    3cfa:	3211      	adds	r2, #17
    3cfc:	705a      	strb	r2, [r3, #1]
    3cfe:	322f      	adds	r2, #47	; 0x2f
    3d00:	709a      	strb	r2, [r3, #2]
    3d02:	e777      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#4o")==0){buff[0]='#';buff[1]='4';buff[2]='o';}
    3d04:	4948      	ldr	r1, [pc, #288]	; (3e28 <sio2host_tx+0x270>)
    3d06:	4839      	ldr	r0, [pc, #228]	; (3dec <sio2host_tx+0x234>)
    3d08:	4b3a      	ldr	r3, [pc, #232]	; (3df4 <sio2host_tx+0x23c>)
    3d0a:	4798      	blx	r3
    3d0c:	2800      	cmp	r0, #0
    3d0e:	d107      	bne.n	3d20 <sio2host_tx+0x168>
    3d10:	4b39      	ldr	r3, [pc, #228]	; (3df8 <sio2host_tx+0x240>)
    3d12:	2223      	movs	r2, #35	; 0x23
    3d14:	701a      	strb	r2, [r3, #0]
    3d16:	3211      	adds	r2, #17
    3d18:	705a      	strb	r2, [r3, #1]
    3d1a:	323b      	adds	r2, #59	; 0x3b
    3d1c:	709a      	strb	r2, [r3, #2]
    3d1e:	e769      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#4e")==0){buff[0]='#';buff[1]='4';buff[2]='e';}	
    3d20:	4942      	ldr	r1, [pc, #264]	; (3e2c <sio2host_tx+0x274>)
    3d22:	4832      	ldr	r0, [pc, #200]	; (3dec <sio2host_tx+0x234>)
    3d24:	4b33      	ldr	r3, [pc, #204]	; (3df4 <sio2host_tx+0x23c>)
    3d26:	4798      	blx	r3
    3d28:	2800      	cmp	r0, #0
    3d2a:	d107      	bne.n	3d3c <sio2host_tx+0x184>
    3d2c:	4b32      	ldr	r3, [pc, #200]	; (3df8 <sio2host_tx+0x240>)
    3d2e:	2223      	movs	r2, #35	; 0x23
    3d30:	701a      	strb	r2, [r3, #0]
    3d32:	3211      	adds	r2, #17
    3d34:	705a      	strb	r2, [r3, #1]
    3d36:	3231      	adds	r2, #49	; 0x31
    3d38:	709a      	strb	r2, [r3, #2]
    3d3a:	e75b      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#5c")==0){buff[0]='#';buff[1]='5';buff[2]='c';}
    3d3c:	493c      	ldr	r1, [pc, #240]	; (3e30 <sio2host_tx+0x278>)
    3d3e:	482b      	ldr	r0, [pc, #172]	; (3dec <sio2host_tx+0x234>)
    3d40:	4b2c      	ldr	r3, [pc, #176]	; (3df4 <sio2host_tx+0x23c>)
    3d42:	4798      	blx	r3
    3d44:	2800      	cmp	r0, #0
    3d46:	d107      	bne.n	3d58 <sio2host_tx+0x1a0>
    3d48:	4b2b      	ldr	r3, [pc, #172]	; (3df8 <sio2host_tx+0x240>)
    3d4a:	2223      	movs	r2, #35	; 0x23
    3d4c:	701a      	strb	r2, [r3, #0]
    3d4e:	3212      	adds	r2, #18
    3d50:	705a      	strb	r2, [r3, #1]
    3d52:	322e      	adds	r2, #46	; 0x2e
    3d54:	709a      	strb	r2, [r3, #2]
    3d56:	e74d      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#5o")==0){buff[0]='#';buff[1]='5';buff[2]='o';}
    3d58:	4936      	ldr	r1, [pc, #216]	; (3e34 <sio2host_tx+0x27c>)
    3d5a:	4824      	ldr	r0, [pc, #144]	; (3dec <sio2host_tx+0x234>)
    3d5c:	4b25      	ldr	r3, [pc, #148]	; (3df4 <sio2host_tx+0x23c>)
    3d5e:	4798      	blx	r3
    3d60:	2800      	cmp	r0, #0
    3d62:	d107      	bne.n	3d74 <sio2host_tx+0x1bc>
    3d64:	4b24      	ldr	r3, [pc, #144]	; (3df8 <sio2host_tx+0x240>)
    3d66:	2223      	movs	r2, #35	; 0x23
    3d68:	701a      	strb	r2, [r3, #0]
    3d6a:	3212      	adds	r2, #18
    3d6c:	705a      	strb	r2, [r3, #1]
    3d6e:	323a      	adds	r2, #58	; 0x3a
    3d70:	709a      	strb	r2, [r3, #2]
    3d72:	e73f      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#5e")==0){buff[0]='#';buff[1]='5';buff[2]='e';}	
    3d74:	4930      	ldr	r1, [pc, #192]	; (3e38 <sio2host_tx+0x280>)
    3d76:	481d      	ldr	r0, [pc, #116]	; (3dec <sio2host_tx+0x234>)
    3d78:	4b1e      	ldr	r3, [pc, #120]	; (3df4 <sio2host_tx+0x23c>)
    3d7a:	4798      	blx	r3
    3d7c:	2800      	cmp	r0, #0
    3d7e:	d107      	bne.n	3d90 <sio2host_tx+0x1d8>
    3d80:	4b1d      	ldr	r3, [pc, #116]	; (3df8 <sio2host_tx+0x240>)
    3d82:	2223      	movs	r2, #35	; 0x23
    3d84:	701a      	strb	r2, [r3, #0]
    3d86:	3212      	adds	r2, #18
    3d88:	705a      	strb	r2, [r3, #1]
    3d8a:	3230      	adds	r2, #48	; 0x30
    3d8c:	709a      	strb	r2, [r3, #2]
    3d8e:	e731      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#6c")==0){buff[0]='#';buff[1]='6';buff[2]='c';}
    3d90:	492a      	ldr	r1, [pc, #168]	; (3e3c <sio2host_tx+0x284>)
    3d92:	4816      	ldr	r0, [pc, #88]	; (3dec <sio2host_tx+0x234>)
    3d94:	4b17      	ldr	r3, [pc, #92]	; (3df4 <sio2host_tx+0x23c>)
    3d96:	4798      	blx	r3
    3d98:	2800      	cmp	r0, #0
    3d9a:	d107      	bne.n	3dac <sio2host_tx+0x1f4>
    3d9c:	4b16      	ldr	r3, [pc, #88]	; (3df8 <sio2host_tx+0x240>)
    3d9e:	2223      	movs	r2, #35	; 0x23
    3da0:	701a      	strb	r2, [r3, #0]
    3da2:	3213      	adds	r2, #19
    3da4:	705a      	strb	r2, [r3, #1]
    3da6:	322d      	adds	r2, #45	; 0x2d
    3da8:	709a      	strb	r2, [r3, #2]
    3daa:	e723      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#6o")==0){buff[0]='#';buff[1]='6';buff[2]='o';}
    3dac:	4924      	ldr	r1, [pc, #144]	; (3e40 <sio2host_tx+0x288>)
    3dae:	480f      	ldr	r0, [pc, #60]	; (3dec <sio2host_tx+0x234>)
    3db0:	4b10      	ldr	r3, [pc, #64]	; (3df4 <sio2host_tx+0x23c>)
    3db2:	4798      	blx	r3
    3db4:	2800      	cmp	r0, #0
    3db6:	d107      	bne.n	3dc8 <sio2host_tx+0x210>
    3db8:	4b0f      	ldr	r3, [pc, #60]	; (3df8 <sio2host_tx+0x240>)
    3dba:	2223      	movs	r2, #35	; 0x23
    3dbc:	701a      	strb	r2, [r3, #0]
    3dbe:	3213      	adds	r2, #19
    3dc0:	705a      	strb	r2, [r3, #1]
    3dc2:	3239      	adds	r2, #57	; 0x39
    3dc4:	709a      	strb	r2, [r3, #2]
    3dc6:	e715      	b.n	3bf4 <sio2host_tx+0x3c>
	else if(strcmp(pt,"#6e")==0){buff[0]='#';buff[1]='6';buff[2]='e';}
    3dc8:	491e      	ldr	r1, [pc, #120]	; (3e44 <sio2host_tx+0x28c>)
    3dca:	4808      	ldr	r0, [pc, #32]	; (3dec <sio2host_tx+0x234>)
    3dcc:	4b09      	ldr	r3, [pc, #36]	; (3df4 <sio2host_tx+0x23c>)
    3dce:	4798      	blx	r3
    3dd0:	2800      	cmp	r0, #0
    3dd2:	d000      	beq.n	3dd6 <sio2host_tx+0x21e>
    3dd4:	e70e      	b.n	3bf4 <sio2host_tx+0x3c>
    3dd6:	4b08      	ldr	r3, [pc, #32]	; (3df8 <sio2host_tx+0x240>)
    3dd8:	2223      	movs	r2, #35	; 0x23
    3dda:	701a      	strb	r2, [r3, #0]
    3ddc:	3213      	adds	r2, #19
    3dde:	705a      	strb	r2, [r3, #1]
    3de0:	322f      	adds	r2, #47	; 0x2f
    3de2:	709a      	strb	r2, [r3, #2]
    3de4:	e706      	b.n	3bf4 <sio2host_tx+0x3c>
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	200000a8 	.word	0x200000a8
    3dec:	200000e0 	.word	0x200000e0
    3df0:	0000a1ec 	.word	0x0000a1ec
    3df4:	000084fd 	.word	0x000084fd
    3df8:	200003c4 	.word	0x200003c4
    3dfc:	00003645 	.word	0x00003645
    3e00:	200000ac 	.word	0x200000ac
    3e04:	0000a1f0 	.word	0x0000a1f0
    3e08:	0000a1f4 	.word	0x0000a1f4
    3e0c:	0000a1f8 	.word	0x0000a1f8
    3e10:	0000a1fc 	.word	0x0000a1fc
    3e14:	0000a200 	.word	0x0000a200
    3e18:	0000a204 	.word	0x0000a204
    3e1c:	0000a208 	.word	0x0000a208
    3e20:	0000a20c 	.word	0x0000a20c
    3e24:	0000a210 	.word	0x0000a210
    3e28:	0000a214 	.word	0x0000a214
    3e2c:	0000a218 	.word	0x0000a218
    3e30:	0000a21c 	.word	0x0000a21c
    3e34:	0000a220 	.word	0x0000a220
    3e38:	0000a224 	.word	0x0000a224
    3e3c:	0000a228 	.word	0x0000a228
    3e40:	0000a22c 	.word	0x0000a22c
    3e44:	0000a230 	.word	0x0000a230

00003e48 <usr_frame_received_cb>:
/**
* \brief This function needs to be edited by the user for adding  tasks when a frame is received
* \param frame pointer to the received frame
*/
void usr_frame_received_cb(frame_info_t *frame)
{
    3e48:	b510      	push	{r4, lr}
//	printf("\n\r RX:");
	sio2host_tx(&(frame->mpdu[FRAME_OVERHEAD-FCS_LEN+1]),(frame->mpdu[0])-FRAME_OVERHEAD);
    3e4a:	7a42      	ldrb	r2, [r0, #9]
    3e4c:	7a83      	ldrb	r3, [r0, #10]
    3e4e:	021b      	lsls	r3, r3, #8
    3e50:	431a      	orrs	r2, r3
    3e52:	7ac3      	ldrb	r3, [r0, #11]
    3e54:	041b      	lsls	r3, r3, #16
    3e56:	4313      	orrs	r3, r2
    3e58:	7b00      	ldrb	r0, [r0, #12]
    3e5a:	0600      	lsls	r0, r0, #24
    3e5c:	4318      	orrs	r0, r3
    3e5e:	7801      	ldrb	r1, [r0, #0]
    3e60:	390b      	subs	r1, #11
    3e62:	b2c9      	uxtb	r1, r1
    3e64:	300a      	adds	r0, #10
    3e66:	4b01      	ldr	r3, [pc, #4]	; (3e6c <usr_frame_received_cb+0x24>)
    3e68:	4798      	blx	r3
}
    3e6a:	bd10      	pop	{r4, pc}
    3e6c:	00003bb9 	.word	0x00003bb9

00003e70 <usr_frame_transmitted_cb>:
void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
	//TODO (Project Wizard) - Add application taks when the frame is transmitted
	/* Toggle an LED in user-interface */
	/* led_toggle(); */
}
    3e70:	4770      	bx	lr
	...

00003e74 <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
    3e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e76:	b083      	sub	sp, #12
	/*Initialize IRQ*/
	irq_initialize_vectors();

//	system_init();
	system_board_init();
    3e78:	4b16      	ldr	r3, [pc, #88]	; (3ed4 <wireless_init+0x60>)
    3e7a:	4798      	blx	r3

    delay_init();
    3e7c:	4b16      	ldr	r3, [pc, #88]	; (3ed8 <wireless_init+0x64>)
    3e7e:	4798      	blx	r3


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
    3e80:	4b16      	ldr	r3, [pc, #88]	; (3edc <wireless_init+0x68>)
    3e82:	4798      	blx	r3
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
    3e84:	4b16      	ldr	r3, [pc, #88]	; (3ee0 <wireless_init+0x6c>)
    3e86:	4798      	blx	r3
    3e88:	2800      	cmp	r0, #0
    3e8a:	d122      	bne.n	3ed2 <wireless_init+0x5e>
	{
		//Error in Initializing the TAL Layer
		app_alert();	
	}
	cpu_irq_enable();
    3e8c:	2201      	movs	r2, #1
    3e8e:	4b15      	ldr	r3, [pc, #84]	; (3ee4 <wireless_init+0x70>)
    3e90:	701a      	strb	r2, [r3, #0]
    3e92:	f3bf 8f5f 	dmb	sy
    3e96:	b662      	cpsie	i
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
    3e98:	466b      	mov	r3, sp
    3e9a:	1d99      	adds	r1, r3, #6
    3e9c:	2302      	movs	r3, #2
    3e9e:	800b      	strh	r3, [r1, #0]
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
    3ea0:	af01      	add	r7, sp, #4
    3ea2:	4b11      	ldr	r3, [pc, #68]	; (3ee8 <wireless_init+0x74>)
    3ea4:	803b      	strh	r3, [r7, #0]
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
    3ea6:	466b      	mov	r3, sp
    3ea8:	1cde      	adds	r6, r3, #3
    3eaa:	230b      	movs	r3, #11
    3eac:	7033      	strb	r3, [r6, #0]
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
    3eae:	466b      	mov	r3, sp
    3eb0:	1c9d      	adds	r5, r3, #2
    3eb2:	2300      	movs	r3, #0
    3eb4:	702b      	strb	r3, [r5, #0]
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
    3eb6:	2053      	movs	r0, #83	; 0x53
    3eb8:	4c0c      	ldr	r4, [pc, #48]	; (3eec <wireless_init+0x78>)
    3eba:	47a0      	blx	r4

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
    3ebc:	0039      	movs	r1, r7
    3ebe:	2050      	movs	r0, #80	; 0x50
    3ec0:	47a0      	blx	r4

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
    3ec2:	0031      	movs	r1, r6
    3ec4:	2000      	movs	r0, #0
    3ec6:	47a0      	blx	r4
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
    3ec8:	0029      	movs	r1, r5
    3eca:	2004      	movs	r0, #4
    3ecc:	47a0      	blx	r4
    }
    #endif
*/

//	init_data_reception();
}
    3ece:	b003      	add	sp, #12
    3ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ed2:	e7fe      	b.n	3ed2 <wireless_init+0x5e>
    3ed4:	00003f01 	.word	0x00003f01
    3ed8:	00003fb9 	.word	0x00003fb9
    3edc:	000059cd 	.word	0x000059cd
    3ee0:	000063ed 	.word	0x000063ed
    3ee4:	2000000c 	.word	0x2000000c
    3ee8:	00005678 	.word	0x00005678
    3eec:	000066dd 	.word	0x000066dd

00003ef0 <init_data_reception>:
/** 
 * \brief The Receiver is switched on Using this function,
  * When PROMISCUOUS_MODE is enabled the receiver is put in RX_ON mode ,else it is switched on in RX_AACK_ON Mode
 */
void init_data_reception()
{
    3ef0:	b510      	push	{r4, lr}
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
    3ef2:	2006      	movs	r0, #6
    3ef4:	4b01      	ldr	r3, [pc, #4]	; (3efc <init_data_reception+0xc>)
    3ef6:	4798      	blx	r3
}
    3ef8:	bd10      	pop	{r4, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	00006a35 	.word	0x00006a35

00003f00 <system_board_init>:
#  pragma weak board_init=system_board_init
#endif


void system_board_init(void)
{
    3f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f02:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3f04:	ac01      	add	r4, sp, #4
    3f06:	2601      	movs	r6, #1
    3f08:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3f0a:	2700      	movs	r7, #0
    3f0c:	70a7      	strb	r7, [r4, #2]
	 * specific board configuration, found in conf_board.h.
	 */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3f0e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    3f10:	0021      	movs	r1, r4
    3f12:	2052      	movs	r0, #82	; 0x52
    3f14:	4d1e      	ldr	r5, [pc, #120]	; (3f90 <system_board_init+0x90>)
    3f16:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    3f18:	0021      	movs	r1, r4
    3f1a:	203e      	movs	r0, #62	; 0x3e
    3f1c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    3f1e:	0021      	movs	r1, r4
    3f20:	203f      	movs	r0, #63	; 0x3f
    3f22:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    3f24:	0021      	movs	r1, r4
    3f26:	202f      	movs	r0, #47	; 0x2f
    3f28:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    3f2a:	0021      	movs	r1, r4
    3f2c:	2014      	movs	r0, #20
    3f2e:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    3f30:	2280      	movs	r2, #128	; 0x80
    3f32:	02d2      	lsls	r2, r2, #11
    3f34:	4b17      	ldr	r3, [pc, #92]	; (3f94 <system_board_init+0x94>)
    3f36:	619a      	str	r2, [r3, #24]
    3f38:	4b17      	ldr	r3, [pc, #92]	; (3f98 <system_board_init+0x98>)
    3f3a:	2280      	movs	r2, #128	; 0x80
    3f3c:	05d2      	lsls	r2, r2, #23
    3f3e:	619a      	str	r2, [r3, #24]
    3f40:	2280      	movs	r2, #128	; 0x80
    3f42:	0612      	lsls	r2, r2, #24
    3f44:	619a      	str	r2, [r3, #24]
    3f46:	2280      	movs	r2, #128	; 0x80
    3f48:	0212      	lsls	r2, r2, #8
    3f4a:	619a      	str	r2, [r3, #24]
    3f4c:	2280      	movs	r2, #128	; 0x80
    3f4e:	0352      	lsls	r2, r2, #13
    3f50:	4b12      	ldr	r3, [pc, #72]	; (3f9c <system_board_init+0x9c>)
    3f52:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3f54:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    3f56:	0021      	movs	r1, r4
    3f58:	2053      	movs	r0, #83	; 0x53
    3f5a:	47a8      	blx	r5
	#define PIN_RFCTRL2				PIN_PA12

	// Value of register FECTRL based on Front-end Control signal configuration
	#define RFCTRL_CFG_ANT_DIV		4

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
    3f5c:	4a10      	ldr	r2, [pc, #64]	; (3fa0 <system_board_init+0xa0>)
    3f5e:	6a11      	ldr	r1, [r2, #32]
    3f60:	2380      	movs	r3, #128	; 0x80
    3f62:	039b      	lsls	r3, r3, #14
    3f64:	430b      	orrs	r3, r1
    3f66:	6213      	str	r3, [r2, #32]
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
    3f68:	2204      	movs	r2, #4
    3f6a:	4b0e      	ldr	r3, [pc, #56]	; (3fa4 <system_board_init+0xa4>)
    3f6c:	801a      	strh	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3f6e:	466b      	mov	r3, sp
    3f70:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    3f72:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1;
    3f74:	2305      	movs	r3, #5
    3f76:	466a      	mov	r2, sp
    3f78:	7013      	strb	r3, [r2, #0]
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3f7a:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
    3f7c:	4669      	mov	r1, sp
    3f7e:	2009      	movs	r0, #9
    3f80:	4c09      	ldr	r4, [pc, #36]	; (3fa8 <system_board_init+0xa8>)
    3f82:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
    3f84:	4669      	mov	r1, sp
    3f86:	200c      	movs	r0, #12
    3f88:	47a0      	blx	r4
}
    3f8a:	b003      	add	sp, #12
    3f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	00004291 	.word	0x00004291
    3f94:	41004500 	.word	0x41004500
    3f98:	41004480 	.word	0x41004480
    3f9c:	41004400 	.word	0x41004400
    3fa0:	40000400 	.word	0x40000400
    3fa4:	42005400 	.word	0x42005400
    3fa8:	000052bd 	.word	0x000052bd

00003fac <modules_init>:

void modules_init(void)
{
    3fac:	b510      	push	{r4, lr}
	sio2host_init();
    3fae:	4b01      	ldr	r3, [pc, #4]	; (3fb4 <modules_init+0x8>)
    3fb0:	4798      	blx	r3
}
    3fb2:	bd10      	pop	{r4, pc}
    3fb4:	00003a69 	.word	0x00003a69

00003fb8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    3fb8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    3fba:	2000      	movs	r0, #0
    3fbc:	4b08      	ldr	r3, [pc, #32]	; (3fe0 <delay_init+0x28>)
    3fbe:	4798      	blx	r3
    3fc0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    3fc2:	4c08      	ldr	r4, [pc, #32]	; (3fe4 <delay_init+0x2c>)
    3fc4:	21fa      	movs	r1, #250	; 0xfa
    3fc6:	0089      	lsls	r1, r1, #2
    3fc8:	47a0      	blx	r4
    3fca:	4b07      	ldr	r3, [pc, #28]	; (3fe8 <delay_init+0x30>)
    3fcc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    3fce:	4907      	ldr	r1, [pc, #28]	; (3fec <delay_init+0x34>)
    3fd0:	0028      	movs	r0, r5
    3fd2:	47a0      	blx	r4
    3fd4:	4b06      	ldr	r3, [pc, #24]	; (3ff0 <delay_init+0x38>)
    3fd6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3fd8:	2205      	movs	r2, #5
    3fda:	4b06      	ldr	r3, [pc, #24]	; (3ff4 <delay_init+0x3c>)
    3fdc:	601a      	str	r2, [r3, #0]
}
    3fde:	bd70      	pop	{r4, r5, r6, pc}
    3fe0:	000050ad 	.word	0x000050ad
    3fe4:	00007de1 	.word	0x00007de1
    3fe8:	20000004 	.word	0x20000004
    3fec:	000f4240 	.word	0x000f4240
    3ff0:	20000008 	.word	0x20000008
    3ff4:	e000e010 	.word	0xe000e010

00003ff8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    3ff8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    3ffa:	4b08      	ldr	r3, [pc, #32]	; (401c <delay_cycles_us+0x24>)
    3ffc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    3ffe:	4a08      	ldr	r2, [pc, #32]	; (4020 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    4000:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4002:	2180      	movs	r1, #128	; 0x80
    4004:	0249      	lsls	r1, r1, #9
	while (n--) {
    4006:	3801      	subs	r0, #1
    4008:	d307      	bcc.n	401a <delay_cycles_us+0x22>
	if (n > 0) {
    400a:	2c00      	cmp	r4, #0
    400c:	d0fb      	beq.n	4006 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    400e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4010:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4012:	6813      	ldr	r3, [r2, #0]
    4014:	420b      	tst	r3, r1
    4016:	d0fc      	beq.n	4012 <delay_cycles_us+0x1a>
    4018:	e7f5      	b.n	4006 <delay_cycles_us+0xe>
	}
}
    401a:	bd30      	pop	{r4, r5, pc}
    401c:	20000008 	.word	0x20000008
    4020:	e000e010 	.word	0xe000e010

00004024 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4024:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    4026:	4b08      	ldr	r3, [pc, #32]	; (4048 <delay_cycles_ms+0x24>)
    4028:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    402a:	4a08      	ldr	r2, [pc, #32]	; (404c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    402c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    402e:	2180      	movs	r1, #128	; 0x80
    4030:	0249      	lsls	r1, r1, #9
	while (n--) {
    4032:	3801      	subs	r0, #1
    4034:	d307      	bcc.n	4046 <delay_cycles_ms+0x22>
	if (n > 0) {
    4036:	2c00      	cmp	r4, #0
    4038:	d0fb      	beq.n	4032 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    403a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    403c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    403e:	6813      	ldr	r3, [r2, #0]
    4040:	420b      	tst	r3, r1
    4042:	d0fc      	beq.n	403e <delay_cycles_ms+0x1a>
    4044:	e7f5      	b.n	4032 <delay_cycles_ms+0xe>
	}
}
    4046:	bd30      	pop	{r4, r5, pc}
    4048:	20000004 	.word	0x20000004
    404c:	e000e010 	.word	0xe000e010

00004050 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4050:	4b0c      	ldr	r3, [pc, #48]	; (4084 <cpu_irq_enter_critical+0x34>)
    4052:	681b      	ldr	r3, [r3, #0]
    4054:	2b00      	cmp	r3, #0
    4056:	d106      	bne.n	4066 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4058:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    405c:	2b00      	cmp	r3, #0
    405e:	d007      	beq.n	4070 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4060:	2200      	movs	r2, #0
    4062:	4b09      	ldr	r3, [pc, #36]	; (4088 <cpu_irq_enter_critical+0x38>)
    4064:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4066:	4a07      	ldr	r2, [pc, #28]	; (4084 <cpu_irq_enter_critical+0x34>)
    4068:	6813      	ldr	r3, [r2, #0]
    406a:	3301      	adds	r3, #1
    406c:	6013      	str	r3, [r2, #0]
}
    406e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4070:	b672      	cpsid	i
    4072:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4076:	2200      	movs	r2, #0
    4078:	4b04      	ldr	r3, [pc, #16]	; (408c <cpu_irq_enter_critical+0x3c>)
    407a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    407c:	3201      	adds	r2, #1
    407e:	4b02      	ldr	r3, [pc, #8]	; (4088 <cpu_irq_enter_critical+0x38>)
    4080:	701a      	strb	r2, [r3, #0]
    4082:	e7f0      	b.n	4066 <cpu_irq_enter_critical+0x16>
    4084:	20000184 	.word	0x20000184
    4088:	20000188 	.word	0x20000188
    408c:	2000000c 	.word	0x2000000c

00004090 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4090:	4b08      	ldr	r3, [pc, #32]	; (40b4 <cpu_irq_leave_critical+0x24>)
    4092:	681a      	ldr	r2, [r3, #0]
    4094:	3a01      	subs	r2, #1
    4096:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	2b00      	cmp	r3, #0
    409c:	d109      	bne.n	40b2 <cpu_irq_leave_critical+0x22>
    409e:	4b06      	ldr	r3, [pc, #24]	; (40b8 <cpu_irq_leave_critical+0x28>)
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	2b00      	cmp	r3, #0
    40a4:	d005      	beq.n	40b2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    40a6:	2201      	movs	r2, #1
    40a8:	4b04      	ldr	r3, [pc, #16]	; (40bc <cpu_irq_leave_critical+0x2c>)
    40aa:	701a      	strb	r2, [r3, #0]
    40ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    40b0:	b662      	cpsie	i
	}
}
    40b2:	4770      	bx	lr
    40b4:	20000184 	.word	0x20000184
    40b8:	20000188 	.word	0x20000188
    40bc:	2000000c 	.word	0x2000000c

000040c0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    40c0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    40c2:	2a00      	cmp	r2, #0
    40c4:	d001      	beq.n	40ca <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    40c6:	0018      	movs	r0, r3
    40c8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    40ca:	008b      	lsls	r3, r1, #2
    40cc:	4a06      	ldr	r2, [pc, #24]	; (40e8 <extint_register_callback+0x28>)
    40ce:	589b      	ldr	r3, [r3, r2]
    40d0:	2b00      	cmp	r3, #0
    40d2:	d003      	beq.n	40dc <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    40d4:	4283      	cmp	r3, r0
    40d6:	d005      	beq.n	40e4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    40d8:	231d      	movs	r3, #29
    40da:	e7f4      	b.n	40c6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    40dc:	0089      	lsls	r1, r1, #2
    40de:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    40e0:	2300      	movs	r3, #0
    40e2:	e7f0      	b.n	40c6 <extint_register_callback+0x6>
		return STATUS_OK;
    40e4:	2300      	movs	r3, #0
    40e6:	e7ee      	b.n	40c6 <extint_register_callback+0x6>
    40e8:	20000ae8 	.word	0x20000ae8

000040ec <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    40ec:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    40ee:	2900      	cmp	r1, #0
    40f0:	d001      	beq.n	40f6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    40f2:	0018      	movs	r0, r3
    40f4:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    40f6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    40f8:	281f      	cmp	r0, #31
    40fa:	d800      	bhi.n	40fe <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    40fc:	4a02      	ldr	r2, [pc, #8]	; (4108 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    40fe:	2301      	movs	r3, #1
    4100:	4083      	lsls	r3, r0
    4102:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4104:	2300      	movs	r3, #0
    4106:	e7f4      	b.n	40f2 <extint_chan_enable_callback+0x6>
    4108:	40001800 	.word	0x40001800

0000410c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    410c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    410e:	2900      	cmp	r1, #0
    4110:	d001      	beq.n	4116 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    4112:	0018      	movs	r0, r3
    4114:	4770      	bx	lr
		return NULL;
    4116:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4118:	281f      	cmp	r0, #31
    411a:	d800      	bhi.n	411e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    411c:	4a02      	ldr	r2, [pc, #8]	; (4128 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    411e:	2301      	movs	r3, #1
    4120:	4083      	lsls	r3, r0
    4122:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4124:	2300      	movs	r3, #0
    4126:	e7f4      	b.n	4112 <extint_chan_disable_callback+0x6>
    4128:	40001800 	.word	0x40001800

0000412c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    412c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    412e:	2200      	movs	r2, #0
    4130:	4b10      	ldr	r3, [pc, #64]	; (4174 <EIC_Handler+0x48>)
    4132:	701a      	strb	r2, [r3, #0]
    4134:	2300      	movs	r3, #0
    4136:	4910      	ldr	r1, [pc, #64]	; (4178 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4138:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    413a:	4e10      	ldr	r6, [pc, #64]	; (417c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    413c:	4c0d      	ldr	r4, [pc, #52]	; (4174 <EIC_Handler+0x48>)
    413e:	e00a      	b.n	4156 <EIC_Handler+0x2a>
		return eics[eic_index];
    4140:	490d      	ldr	r1, [pc, #52]	; (4178 <EIC_Handler+0x4c>)
    4142:	e008      	b.n	4156 <EIC_Handler+0x2a>
    4144:	7823      	ldrb	r3, [r4, #0]
    4146:	3301      	adds	r3, #1
    4148:	b2db      	uxtb	r3, r3
    414a:	7023      	strb	r3, [r4, #0]
    414c:	2b0f      	cmp	r3, #15
    414e:	d810      	bhi.n	4172 <EIC_Handler+0x46>
		return NULL;
    4150:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4152:	2b1f      	cmp	r3, #31
    4154:	d9f4      	bls.n	4140 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4156:	0028      	movs	r0, r5
    4158:	4018      	ands	r0, r3
    415a:	2201      	movs	r2, #1
    415c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    415e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4160:	4210      	tst	r0, r2
    4162:	d0ef      	beq.n	4144 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4164:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4166:	009b      	lsls	r3, r3, #2
    4168:	599b      	ldr	r3, [r3, r6]
    416a:	2b00      	cmp	r3, #0
    416c:	d0ea      	beq.n	4144 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    416e:	4798      	blx	r3
    4170:	e7e8      	b.n	4144 <EIC_Handler+0x18>
			}
		}
	}
}
    4172:	bd70      	pop	{r4, r5, r6, pc}
    4174:	20000ae4 	.word	0x20000ae4
    4178:	40001800 	.word	0x40001800
    417c:	20000ae8 	.word	0x20000ae8

00004180 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4180:	4a04      	ldr	r2, [pc, #16]	; (4194 <_extint_enable+0x14>)
    4182:	7813      	ldrb	r3, [r2, #0]
    4184:	2102      	movs	r1, #2
    4186:	430b      	orrs	r3, r1
    4188:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    418a:	7853      	ldrb	r3, [r2, #1]
    418c:	b25b      	sxtb	r3, r3
    418e:	2b00      	cmp	r3, #0
    4190:	dbfb      	blt.n	418a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4192:	4770      	bx	lr
    4194:	40001800 	.word	0x40001800

00004198 <_system_extint_init>:
{
    4198:	b500      	push	{lr}
    419a:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    419c:	4a12      	ldr	r2, [pc, #72]	; (41e8 <_system_extint_init+0x50>)
    419e:	6993      	ldr	r3, [r2, #24]
    41a0:	2140      	movs	r1, #64	; 0x40
    41a2:	430b      	orrs	r3, r1
    41a4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    41a6:	a901      	add	r1, sp, #4
    41a8:	2300      	movs	r3, #0
    41aa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    41ac:	2005      	movs	r0, #5
    41ae:	4b0f      	ldr	r3, [pc, #60]	; (41ec <_system_extint_init+0x54>)
    41b0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    41b2:	2005      	movs	r0, #5
    41b4:	4b0e      	ldr	r3, [pc, #56]	; (41f0 <_system_extint_init+0x58>)
    41b6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    41b8:	4a0e      	ldr	r2, [pc, #56]	; (41f4 <_system_extint_init+0x5c>)
    41ba:	7813      	ldrb	r3, [r2, #0]
    41bc:	2101      	movs	r1, #1
    41be:	430b      	orrs	r3, r1
    41c0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    41c2:	7853      	ldrb	r3, [r2, #1]
    41c4:	b25b      	sxtb	r3, r3
    41c6:	2b00      	cmp	r3, #0
    41c8:	dbfb      	blt.n	41c2 <_system_extint_init+0x2a>
    41ca:	4b0b      	ldr	r3, [pc, #44]	; (41f8 <_system_extint_init+0x60>)
    41cc:	0019      	movs	r1, r3
    41ce:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    41d0:	2200      	movs	r2, #0
    41d2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    41d4:	4299      	cmp	r1, r3
    41d6:	d1fc      	bne.n	41d2 <_system_extint_init+0x3a>
    41d8:	2210      	movs	r2, #16
    41da:	4b08      	ldr	r3, [pc, #32]	; (41fc <_system_extint_init+0x64>)
    41dc:	601a      	str	r2, [r3, #0]
	_extint_enable();
    41de:	4b08      	ldr	r3, [pc, #32]	; (4200 <_system_extint_init+0x68>)
    41e0:	4798      	blx	r3
}
    41e2:	b003      	add	sp, #12
    41e4:	bd00      	pop	{pc}
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	40000400 	.word	0x40000400
    41ec:	000051c5 	.word	0x000051c5
    41f0:	00005139 	.word	0x00005139
    41f4:	40001800 	.word	0x40001800
    41f8:	20000ae8 	.word	0x20000ae8
    41fc:	e000e100 	.word	0xe000e100
    4200:	00004181 	.word	0x00004181

00004204 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4204:	2300      	movs	r3, #0
    4206:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4208:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    420a:	2201      	movs	r2, #1
    420c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    420e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    4210:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4212:	3302      	adds	r3, #2
    4214:	72c3      	strb	r3, [r0, #11]
}
    4216:	4770      	bx	lr

00004218 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4218:	b5f0      	push	{r4, r5, r6, r7, lr}
    421a:	b083      	sub	sp, #12
    421c:	0005      	movs	r5, r0
    421e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4220:	a901      	add	r1, sp, #4
    4222:	2300      	movs	r3, #0
    4224:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4226:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4228:	7923      	ldrb	r3, [r4, #4]
    422a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    422c:	7a23      	ldrb	r3, [r4, #8]
    422e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4230:	7820      	ldrb	r0, [r4, #0]
    4232:	4b15      	ldr	r3, [pc, #84]	; (4288 <extint_chan_set_config+0x70>)
    4234:	4798      	blx	r3
		return NULL;
    4236:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    4238:	2d1f      	cmp	r5, #31
    423a:	d800      	bhi.n	423e <extint_chan_set_config+0x26>
		return eics[eic_index];
    423c:	4813      	ldr	r0, [pc, #76]	; (428c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    423e:	2207      	movs	r2, #7
    4240:	402a      	ands	r2, r5
    4242:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4244:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4246:	7aa3      	ldrb	r3, [r4, #10]
    4248:	2b00      	cmp	r3, #0
    424a:	d001      	beq.n	4250 <extint_chan_set_config+0x38>
    424c:	2308      	movs	r3, #8
    424e:	431f      	orrs	r7, r3
    4250:	08eb      	lsrs	r3, r5, #3
    4252:	009b      	lsls	r3, r3, #2
    4254:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4256:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4258:	260f      	movs	r6, #15
    425a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    425c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    425e:	4097      	lsls	r7, r2
    4260:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4262:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    4264:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4266:	7a63      	ldrb	r3, [r4, #9]
    4268:	2b00      	cmp	r3, #0
    426a:	d106      	bne.n	427a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    426c:	6943      	ldr	r3, [r0, #20]
    426e:	2201      	movs	r2, #1
    4270:	40aa      	lsls	r2, r5
    4272:	4393      	bics	r3, r2
    4274:	6143      	str	r3, [r0, #20]
	}
}
    4276:	b003      	add	sp, #12
    4278:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    427a:	6942      	ldr	r2, [r0, #20]
    427c:	2301      	movs	r3, #1
    427e:	40ab      	lsls	r3, r5
    4280:	4313      	orrs	r3, r2
    4282:	6143      	str	r3, [r0, #20]
    4284:	e7f7      	b.n	4276 <extint_chan_set_config+0x5e>
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	000052bd 	.word	0x000052bd
    428c:	40001800 	.word	0x40001800

00004290 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4290:	b500      	push	{lr}
    4292:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4294:	ab01      	add	r3, sp, #4
    4296:	2280      	movs	r2, #128	; 0x80
    4298:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    429a:	780a      	ldrb	r2, [r1, #0]
    429c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    429e:	784a      	ldrb	r2, [r1, #1]
    42a0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    42a2:	788a      	ldrb	r2, [r1, #2]
    42a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    42a6:	0019      	movs	r1, r3
    42a8:	4b01      	ldr	r3, [pc, #4]	; (42b0 <port_pin_set_config+0x20>)
    42aa:	4798      	blx	r3
}
    42ac:	b003      	add	sp, #12
    42ae:	bd00      	pop	{pc}
    42b0:	000052bd 	.word	0x000052bd

000042b4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    42b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42b6:	46de      	mov	lr, fp
    42b8:	4657      	mov	r7, sl
    42ba:	464e      	mov	r6, r9
    42bc:	4645      	mov	r5, r8
    42be:	b5e0      	push	{r5, r6, r7, lr}
    42c0:	b087      	sub	sp, #28
    42c2:	4680      	mov	r8, r0
    42c4:	9104      	str	r1, [sp, #16]
    42c6:	0016      	movs	r6, r2
    42c8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    42ca:	2200      	movs	r2, #0
    42cc:	2300      	movs	r3, #0
    42ce:	2100      	movs	r1, #0
    42d0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    42d2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    42d4:	2001      	movs	r0, #1
    42d6:	0021      	movs	r1, r4
    42d8:	9600      	str	r6, [sp, #0]
    42da:	9701      	str	r7, [sp, #4]
    42dc:	465c      	mov	r4, fp
    42de:	9403      	str	r4, [sp, #12]
    42e0:	4644      	mov	r4, r8
    42e2:	9405      	str	r4, [sp, #20]
    42e4:	e013      	b.n	430e <long_division+0x5a>
    42e6:	2420      	movs	r4, #32
    42e8:	1a64      	subs	r4, r4, r1
    42ea:	0005      	movs	r5, r0
    42ec:	40e5      	lsrs	r5, r4
    42ee:	46a8      	mov	r8, r5
    42f0:	e014      	b.n	431c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    42f2:	9c00      	ldr	r4, [sp, #0]
    42f4:	9d01      	ldr	r5, [sp, #4]
    42f6:	1b12      	subs	r2, r2, r4
    42f8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    42fa:	465c      	mov	r4, fp
    42fc:	464d      	mov	r5, r9
    42fe:	432c      	orrs	r4, r5
    4300:	46a3      	mov	fp, r4
    4302:	9c03      	ldr	r4, [sp, #12]
    4304:	4645      	mov	r5, r8
    4306:	432c      	orrs	r4, r5
    4308:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    430a:	3901      	subs	r1, #1
    430c:	d325      	bcc.n	435a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    430e:	2420      	movs	r4, #32
    4310:	4264      	negs	r4, r4
    4312:	190c      	adds	r4, r1, r4
    4314:	d4e7      	bmi.n	42e6 <long_division+0x32>
    4316:	0005      	movs	r5, r0
    4318:	40a5      	lsls	r5, r4
    431a:	46a8      	mov	r8, r5
    431c:	0004      	movs	r4, r0
    431e:	408c      	lsls	r4, r1
    4320:	46a1      	mov	r9, r4
		r = r << 1;
    4322:	1892      	adds	r2, r2, r2
    4324:	415b      	adcs	r3, r3
    4326:	0014      	movs	r4, r2
    4328:	001d      	movs	r5, r3
		if (n & bit_shift) {
    432a:	9e05      	ldr	r6, [sp, #20]
    432c:	464f      	mov	r7, r9
    432e:	403e      	ands	r6, r7
    4330:	46b4      	mov	ip, r6
    4332:	9e04      	ldr	r6, [sp, #16]
    4334:	4647      	mov	r7, r8
    4336:	403e      	ands	r6, r7
    4338:	46b2      	mov	sl, r6
    433a:	4666      	mov	r6, ip
    433c:	4657      	mov	r7, sl
    433e:	433e      	orrs	r6, r7
    4340:	d003      	beq.n	434a <long_division+0x96>
			r |= 0x01;
    4342:	0006      	movs	r6, r0
    4344:	4326      	orrs	r6, r4
    4346:	0032      	movs	r2, r6
    4348:	002b      	movs	r3, r5
		if (r >= d) {
    434a:	9c00      	ldr	r4, [sp, #0]
    434c:	9d01      	ldr	r5, [sp, #4]
    434e:	429d      	cmp	r5, r3
    4350:	d8db      	bhi.n	430a <long_division+0x56>
    4352:	d1ce      	bne.n	42f2 <long_division+0x3e>
    4354:	4294      	cmp	r4, r2
    4356:	d8d8      	bhi.n	430a <long_division+0x56>
    4358:	e7cb      	b.n	42f2 <long_division+0x3e>
    435a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    435c:	4658      	mov	r0, fp
    435e:	0019      	movs	r1, r3
    4360:	b007      	add	sp, #28
    4362:	bc3c      	pop	{r2, r3, r4, r5}
    4364:	4690      	mov	r8, r2
    4366:	4699      	mov	r9, r3
    4368:	46a2      	mov	sl, r4
    436a:	46ab      	mov	fp, r5
    436c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000436e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    436e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4370:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4372:	2340      	movs	r3, #64	; 0x40
    4374:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4376:	4281      	cmp	r1, r0
    4378:	d202      	bcs.n	4380 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    437a:	0018      	movs	r0, r3
    437c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    437e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4380:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4382:	1c63      	adds	r3, r4, #1
    4384:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4386:	4288      	cmp	r0, r1
    4388:	d9f9      	bls.n	437e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    438a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    438c:	2cff      	cmp	r4, #255	; 0xff
    438e:	d8f4      	bhi.n	437a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4390:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4392:	2300      	movs	r3, #0
    4394:	e7f1      	b.n	437a <_sercom_get_sync_baud_val+0xc>
	...

00004398 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4398:	b5f0      	push	{r4, r5, r6, r7, lr}
    439a:	b083      	sub	sp, #12
    439c:	000f      	movs	r7, r1
    439e:	0016      	movs	r6, r2
    43a0:	aa08      	add	r2, sp, #32
    43a2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    43a4:	0004      	movs	r4, r0
    43a6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    43a8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    43aa:	42bc      	cmp	r4, r7
    43ac:	d902      	bls.n	43b4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    43ae:	0010      	movs	r0, r2
    43b0:	b003      	add	sp, #12
    43b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    43b4:	2b00      	cmp	r3, #0
    43b6:	d114      	bne.n	43e2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    43b8:	0002      	movs	r2, r0
    43ba:	0008      	movs	r0, r1
    43bc:	2100      	movs	r1, #0
    43be:	4c19      	ldr	r4, [pc, #100]	; (4424 <_sercom_get_async_baud_val+0x8c>)
    43c0:	47a0      	blx	r4
    43c2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    43c4:	003a      	movs	r2, r7
    43c6:	2300      	movs	r3, #0
    43c8:	2000      	movs	r0, #0
    43ca:	4c17      	ldr	r4, [pc, #92]	; (4428 <_sercom_get_async_baud_val+0x90>)
    43cc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    43ce:	2200      	movs	r2, #0
    43d0:	2301      	movs	r3, #1
    43d2:	1a12      	subs	r2, r2, r0
    43d4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    43d6:	0c12      	lsrs	r2, r2, #16
    43d8:	041b      	lsls	r3, r3, #16
    43da:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    43dc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    43de:	2200      	movs	r2, #0
    43e0:	e7e5      	b.n	43ae <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    43e2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    43e4:	2b01      	cmp	r3, #1
    43e6:	d1f9      	bne.n	43dc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    43e8:	000a      	movs	r2, r1
    43ea:	2300      	movs	r3, #0
    43ec:	2100      	movs	r1, #0
    43ee:	4c0d      	ldr	r4, [pc, #52]	; (4424 <_sercom_get_async_baud_val+0x8c>)
    43f0:	47a0      	blx	r4
    43f2:	0002      	movs	r2, r0
    43f4:	000b      	movs	r3, r1
    43f6:	9200      	str	r2, [sp, #0]
    43f8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    43fa:	0038      	movs	r0, r7
    43fc:	2100      	movs	r1, #0
    43fe:	4c0a      	ldr	r4, [pc, #40]	; (4428 <_sercom_get_async_baud_val+0x90>)
    4400:	47a0      	blx	r4
    4402:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4404:	2380      	movs	r3, #128	; 0x80
    4406:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4408:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    440a:	4298      	cmp	r0, r3
    440c:	d8cf      	bhi.n	43ae <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    440e:	0f79      	lsrs	r1, r7, #29
    4410:	00f8      	lsls	r0, r7, #3
    4412:	9a00      	ldr	r2, [sp, #0]
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4418:	00ea      	lsls	r2, r5, #3
    441a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    441c:	b2d2      	uxtb	r2, r2
    441e:	0352      	lsls	r2, r2, #13
    4420:	432a      	orrs	r2, r5
    4422:	e7db      	b.n	43dc <_sercom_get_async_baud_val+0x44>
    4424:	000080cd 	.word	0x000080cd
    4428:	000042b5 	.word	0x000042b5

0000442c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    442c:	b510      	push	{r4, lr}
    442e:	b082      	sub	sp, #8
    4430:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4432:	4b0e      	ldr	r3, [pc, #56]	; (446c <sercom_set_gclk_generator+0x40>)
    4434:	781b      	ldrb	r3, [r3, #0]
    4436:	2b00      	cmp	r3, #0
    4438:	d007      	beq.n	444a <sercom_set_gclk_generator+0x1e>
    443a:	2900      	cmp	r1, #0
    443c:	d105      	bne.n	444a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    443e:	4b0b      	ldr	r3, [pc, #44]	; (446c <sercom_set_gclk_generator+0x40>)
    4440:	785b      	ldrb	r3, [r3, #1]
    4442:	4283      	cmp	r3, r0
    4444:	d010      	beq.n	4468 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4446:	201d      	movs	r0, #29
    4448:	e00c      	b.n	4464 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    444a:	a901      	add	r1, sp, #4
    444c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    444e:	2013      	movs	r0, #19
    4450:	4b07      	ldr	r3, [pc, #28]	; (4470 <sercom_set_gclk_generator+0x44>)
    4452:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4454:	2013      	movs	r0, #19
    4456:	4b07      	ldr	r3, [pc, #28]	; (4474 <sercom_set_gclk_generator+0x48>)
    4458:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    445a:	4b04      	ldr	r3, [pc, #16]	; (446c <sercom_set_gclk_generator+0x40>)
    445c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    445e:	2201      	movs	r2, #1
    4460:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4462:	2000      	movs	r0, #0
}
    4464:	b002      	add	sp, #8
    4466:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4468:	2000      	movs	r0, #0
    446a:	e7fb      	b.n	4464 <sercom_set_gclk_generator+0x38>
    446c:	2000018c 	.word	0x2000018c
    4470:	000051c5 	.word	0x000051c5
    4474:	00005139 	.word	0x00005139

00004478 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4478:	4b40      	ldr	r3, [pc, #256]	; (457c <_sercom_get_default_pad+0x104>)
    447a:	4298      	cmp	r0, r3
    447c:	d031      	beq.n	44e2 <_sercom_get_default_pad+0x6a>
    447e:	d90a      	bls.n	4496 <_sercom_get_default_pad+0x1e>
    4480:	4b3f      	ldr	r3, [pc, #252]	; (4580 <_sercom_get_default_pad+0x108>)
    4482:	4298      	cmp	r0, r3
    4484:	d04d      	beq.n	4522 <_sercom_get_default_pad+0xaa>
    4486:	4b3f      	ldr	r3, [pc, #252]	; (4584 <_sercom_get_default_pad+0x10c>)
    4488:	4298      	cmp	r0, r3
    448a:	d05a      	beq.n	4542 <_sercom_get_default_pad+0xca>
    448c:	4b3e      	ldr	r3, [pc, #248]	; (4588 <_sercom_get_default_pad+0x110>)
    448e:	4298      	cmp	r0, r3
    4490:	d037      	beq.n	4502 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4492:	2000      	movs	r0, #0
}
    4494:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4496:	4b3d      	ldr	r3, [pc, #244]	; (458c <_sercom_get_default_pad+0x114>)
    4498:	4298      	cmp	r0, r3
    449a:	d00c      	beq.n	44b6 <_sercom_get_default_pad+0x3e>
    449c:	4b3c      	ldr	r3, [pc, #240]	; (4590 <_sercom_get_default_pad+0x118>)
    449e:	4298      	cmp	r0, r3
    44a0:	d1f7      	bne.n	4492 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44a2:	2901      	cmp	r1, #1
    44a4:	d017      	beq.n	44d6 <_sercom_get_default_pad+0x5e>
    44a6:	2900      	cmp	r1, #0
    44a8:	d05d      	beq.n	4566 <_sercom_get_default_pad+0xee>
    44aa:	2902      	cmp	r1, #2
    44ac:	d015      	beq.n	44da <_sercom_get_default_pad+0x62>
    44ae:	2903      	cmp	r1, #3
    44b0:	d015      	beq.n	44de <_sercom_get_default_pad+0x66>
	return 0;
    44b2:	2000      	movs	r0, #0
    44b4:	e7ee      	b.n	4494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44b6:	2901      	cmp	r1, #1
    44b8:	d007      	beq.n	44ca <_sercom_get_default_pad+0x52>
    44ba:	2900      	cmp	r1, #0
    44bc:	d051      	beq.n	4562 <_sercom_get_default_pad+0xea>
    44be:	2902      	cmp	r1, #2
    44c0:	d005      	beq.n	44ce <_sercom_get_default_pad+0x56>
    44c2:	2903      	cmp	r1, #3
    44c4:	d005      	beq.n	44d2 <_sercom_get_default_pad+0x5a>
	return 0;
    44c6:	2000      	movs	r0, #0
    44c8:	e7e4      	b.n	4494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44ca:	4832      	ldr	r0, [pc, #200]	; (4594 <_sercom_get_default_pad+0x11c>)
    44cc:	e7e2      	b.n	4494 <_sercom_get_default_pad+0x1c>
    44ce:	4832      	ldr	r0, [pc, #200]	; (4598 <_sercom_get_default_pad+0x120>)
    44d0:	e7e0      	b.n	4494 <_sercom_get_default_pad+0x1c>
    44d2:	4832      	ldr	r0, [pc, #200]	; (459c <_sercom_get_default_pad+0x124>)
    44d4:	e7de      	b.n	4494 <_sercom_get_default_pad+0x1c>
    44d6:	4832      	ldr	r0, [pc, #200]	; (45a0 <_sercom_get_default_pad+0x128>)
    44d8:	e7dc      	b.n	4494 <_sercom_get_default_pad+0x1c>
    44da:	4832      	ldr	r0, [pc, #200]	; (45a4 <_sercom_get_default_pad+0x12c>)
    44dc:	e7da      	b.n	4494 <_sercom_get_default_pad+0x1c>
    44de:	4832      	ldr	r0, [pc, #200]	; (45a8 <_sercom_get_default_pad+0x130>)
    44e0:	e7d8      	b.n	4494 <_sercom_get_default_pad+0x1c>
    44e2:	2901      	cmp	r1, #1
    44e4:	d007      	beq.n	44f6 <_sercom_get_default_pad+0x7e>
    44e6:	2900      	cmp	r1, #0
    44e8:	d03f      	beq.n	456a <_sercom_get_default_pad+0xf2>
    44ea:	2902      	cmp	r1, #2
    44ec:	d005      	beq.n	44fa <_sercom_get_default_pad+0x82>
    44ee:	2903      	cmp	r1, #3
    44f0:	d005      	beq.n	44fe <_sercom_get_default_pad+0x86>
	return 0;
    44f2:	2000      	movs	r0, #0
    44f4:	e7ce      	b.n	4494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44f6:	482d      	ldr	r0, [pc, #180]	; (45ac <_sercom_get_default_pad+0x134>)
    44f8:	e7cc      	b.n	4494 <_sercom_get_default_pad+0x1c>
    44fa:	482d      	ldr	r0, [pc, #180]	; (45b0 <_sercom_get_default_pad+0x138>)
    44fc:	e7ca      	b.n	4494 <_sercom_get_default_pad+0x1c>
    44fe:	482d      	ldr	r0, [pc, #180]	; (45b4 <_sercom_get_default_pad+0x13c>)
    4500:	e7c8      	b.n	4494 <_sercom_get_default_pad+0x1c>
    4502:	2901      	cmp	r1, #1
    4504:	d007      	beq.n	4516 <_sercom_get_default_pad+0x9e>
    4506:	2900      	cmp	r1, #0
    4508:	d031      	beq.n	456e <_sercom_get_default_pad+0xf6>
    450a:	2902      	cmp	r1, #2
    450c:	d005      	beq.n	451a <_sercom_get_default_pad+0xa2>
    450e:	2903      	cmp	r1, #3
    4510:	d005      	beq.n	451e <_sercom_get_default_pad+0xa6>
	return 0;
    4512:	2000      	movs	r0, #0
    4514:	e7be      	b.n	4494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4516:	4828      	ldr	r0, [pc, #160]	; (45b8 <_sercom_get_default_pad+0x140>)
    4518:	e7bc      	b.n	4494 <_sercom_get_default_pad+0x1c>
    451a:	4828      	ldr	r0, [pc, #160]	; (45bc <_sercom_get_default_pad+0x144>)
    451c:	e7ba      	b.n	4494 <_sercom_get_default_pad+0x1c>
    451e:	4828      	ldr	r0, [pc, #160]	; (45c0 <_sercom_get_default_pad+0x148>)
    4520:	e7b8      	b.n	4494 <_sercom_get_default_pad+0x1c>
    4522:	2901      	cmp	r1, #1
    4524:	d007      	beq.n	4536 <_sercom_get_default_pad+0xbe>
    4526:	2900      	cmp	r1, #0
    4528:	d023      	beq.n	4572 <_sercom_get_default_pad+0xfa>
    452a:	2902      	cmp	r1, #2
    452c:	d005      	beq.n	453a <_sercom_get_default_pad+0xc2>
    452e:	2903      	cmp	r1, #3
    4530:	d005      	beq.n	453e <_sercom_get_default_pad+0xc6>
	return 0;
    4532:	2000      	movs	r0, #0
    4534:	e7ae      	b.n	4494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4536:	4823      	ldr	r0, [pc, #140]	; (45c4 <_sercom_get_default_pad+0x14c>)
    4538:	e7ac      	b.n	4494 <_sercom_get_default_pad+0x1c>
    453a:	4823      	ldr	r0, [pc, #140]	; (45c8 <_sercom_get_default_pad+0x150>)
    453c:	e7aa      	b.n	4494 <_sercom_get_default_pad+0x1c>
    453e:	4823      	ldr	r0, [pc, #140]	; (45cc <_sercom_get_default_pad+0x154>)
    4540:	e7a8      	b.n	4494 <_sercom_get_default_pad+0x1c>
    4542:	2901      	cmp	r1, #1
    4544:	d007      	beq.n	4556 <_sercom_get_default_pad+0xde>
    4546:	2900      	cmp	r1, #0
    4548:	d015      	beq.n	4576 <_sercom_get_default_pad+0xfe>
    454a:	2902      	cmp	r1, #2
    454c:	d005      	beq.n	455a <_sercom_get_default_pad+0xe2>
    454e:	2903      	cmp	r1, #3
    4550:	d005      	beq.n	455e <_sercom_get_default_pad+0xe6>
	return 0;
    4552:	2000      	movs	r0, #0
    4554:	e79e      	b.n	4494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4556:	481e      	ldr	r0, [pc, #120]	; (45d0 <_sercom_get_default_pad+0x158>)
    4558:	e79c      	b.n	4494 <_sercom_get_default_pad+0x1c>
    455a:	481e      	ldr	r0, [pc, #120]	; (45d4 <_sercom_get_default_pad+0x15c>)
    455c:	e79a      	b.n	4494 <_sercom_get_default_pad+0x1c>
    455e:	481e      	ldr	r0, [pc, #120]	; (45d8 <_sercom_get_default_pad+0x160>)
    4560:	e798      	b.n	4494 <_sercom_get_default_pad+0x1c>
    4562:	481e      	ldr	r0, [pc, #120]	; (45dc <_sercom_get_default_pad+0x164>)
    4564:	e796      	b.n	4494 <_sercom_get_default_pad+0x1c>
    4566:	2003      	movs	r0, #3
    4568:	e794      	b.n	4494 <_sercom_get_default_pad+0x1c>
    456a:	481d      	ldr	r0, [pc, #116]	; (45e0 <_sercom_get_default_pad+0x168>)
    456c:	e792      	b.n	4494 <_sercom_get_default_pad+0x1c>
    456e:	481d      	ldr	r0, [pc, #116]	; (45e4 <_sercom_get_default_pad+0x16c>)
    4570:	e790      	b.n	4494 <_sercom_get_default_pad+0x1c>
    4572:	481d      	ldr	r0, [pc, #116]	; (45e8 <_sercom_get_default_pad+0x170>)
    4574:	e78e      	b.n	4494 <_sercom_get_default_pad+0x1c>
    4576:	481d      	ldr	r0, [pc, #116]	; (45ec <_sercom_get_default_pad+0x174>)
    4578:	e78c      	b.n	4494 <_sercom_get_default_pad+0x1c>
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	42001000 	.word	0x42001000
    4580:	42001800 	.word	0x42001800
    4584:	42001c00 	.word	0x42001c00
    4588:	42001400 	.word	0x42001400
    458c:	42000800 	.word	0x42000800
    4590:	42000c00 	.word	0x42000c00
    4594:	00050003 	.word	0x00050003
    4598:	00060003 	.word	0x00060003
    459c:	00070003 	.word	0x00070003
    45a0:	00010003 	.word	0x00010003
    45a4:	001e0003 	.word	0x001e0003
    45a8:	001f0003 	.word	0x001f0003
    45ac:	000d0002 	.word	0x000d0002
    45b0:	000e0002 	.word	0x000e0002
    45b4:	000f0002 	.word	0x000f0002
    45b8:	00110003 	.word	0x00110003
    45bc:	00120003 	.word	0x00120003
    45c0:	00130003 	.word	0x00130003
    45c4:	003f0005 	.word	0x003f0005
    45c8:	003e0005 	.word	0x003e0005
    45cc:	00520005 	.word	0x00520005
    45d0:	00170003 	.word	0x00170003
    45d4:	00180003 	.word	0x00180003
    45d8:	00190003 	.word	0x00190003
    45dc:	00040003 	.word	0x00040003
    45e0:	000c0002 	.word	0x000c0002
    45e4:	00100003 	.word	0x00100003
    45e8:	00530005 	.word	0x00530005
    45ec:	00160003 	.word	0x00160003

000045f0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    45f0:	b530      	push	{r4, r5, lr}
    45f2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    45f4:	4b0b      	ldr	r3, [pc, #44]	; (4624 <_sercom_get_sercom_inst_index+0x34>)
    45f6:	466a      	mov	r2, sp
    45f8:	cb32      	ldmia	r3!, {r1, r4, r5}
    45fa:	c232      	stmia	r2!, {r1, r4, r5}
    45fc:	cb32      	ldmia	r3!, {r1, r4, r5}
    45fe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4600:	9b00      	ldr	r3, [sp, #0]
    4602:	4283      	cmp	r3, r0
    4604:	d00b      	beq.n	461e <_sercom_get_sercom_inst_index+0x2e>
    4606:	2301      	movs	r3, #1
    4608:	009a      	lsls	r2, r3, #2
    460a:	4669      	mov	r1, sp
    460c:	5852      	ldr	r2, [r2, r1]
    460e:	4282      	cmp	r2, r0
    4610:	d006      	beq.n	4620 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4612:	3301      	adds	r3, #1
    4614:	2b06      	cmp	r3, #6
    4616:	d1f7      	bne.n	4608 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4618:	2000      	movs	r0, #0
}
    461a:	b007      	add	sp, #28
    461c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    461e:	2300      	movs	r3, #0
			return i;
    4620:	b2d8      	uxtb	r0, r3
    4622:	e7fa      	b.n	461a <_sercom_get_sercom_inst_index+0x2a>
    4624:	0000a234 	.word	0x0000a234

00004628 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4628:	4770      	bx	lr
	...

0000462c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    462c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    462e:	4b0a      	ldr	r3, [pc, #40]	; (4658 <_sercom_set_handler+0x2c>)
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	2b00      	cmp	r3, #0
    4634:	d10c      	bne.n	4650 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4636:	4f09      	ldr	r7, [pc, #36]	; (465c <_sercom_set_handler+0x30>)
    4638:	4e09      	ldr	r6, [pc, #36]	; (4660 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    463a:	4d0a      	ldr	r5, [pc, #40]	; (4664 <_sercom_set_handler+0x38>)
    463c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    463e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4640:	195a      	adds	r2, r3, r5
    4642:	6014      	str	r4, [r2, #0]
    4644:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4646:	2b18      	cmp	r3, #24
    4648:	d1f9      	bne.n	463e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    464a:	2201      	movs	r2, #1
    464c:	4b02      	ldr	r3, [pc, #8]	; (4658 <_sercom_set_handler+0x2c>)
    464e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4650:	0080      	lsls	r0, r0, #2
    4652:	4b02      	ldr	r3, [pc, #8]	; (465c <_sercom_set_handler+0x30>)
    4654:	50c1      	str	r1, [r0, r3]
}
    4656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4658:	2000018e 	.word	0x2000018e
    465c:	20000190 	.word	0x20000190
    4660:	00004629 	.word	0x00004629
    4664:	20000b28 	.word	0x20000b28

00004668 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4668:	b500      	push	{lr}
    466a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    466c:	2309      	movs	r3, #9
    466e:	466a      	mov	r2, sp
    4670:	7013      	strb	r3, [r2, #0]
    4672:	3301      	adds	r3, #1
    4674:	7053      	strb	r3, [r2, #1]
    4676:	3301      	adds	r3, #1
    4678:	7093      	strb	r3, [r2, #2]
    467a:	3301      	adds	r3, #1
    467c:	70d3      	strb	r3, [r2, #3]
    467e:	3301      	adds	r3, #1
    4680:	7113      	strb	r3, [r2, #4]
    4682:	3301      	adds	r3, #1
    4684:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4686:	4b03      	ldr	r3, [pc, #12]	; (4694 <_sercom_get_interrupt_vector+0x2c>)
    4688:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    468a:	466b      	mov	r3, sp
    468c:	5618      	ldrsb	r0, [r3, r0]
}
    468e:	b003      	add	sp, #12
    4690:	bd00      	pop	{pc}
    4692:	46c0      	nop			; (mov r8, r8)
    4694:	000045f1 	.word	0x000045f1

00004698 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4698:	b510      	push	{r4, lr}
    469a:	4b02      	ldr	r3, [pc, #8]	; (46a4 <SERCOM0_Handler+0xc>)
    469c:	681b      	ldr	r3, [r3, #0]
    469e:	2000      	movs	r0, #0
    46a0:	4798      	blx	r3
    46a2:	bd10      	pop	{r4, pc}
    46a4:	20000190 	.word	0x20000190

000046a8 <SERCOM1_Handler>:
    46a8:	b510      	push	{r4, lr}
    46aa:	4b02      	ldr	r3, [pc, #8]	; (46b4 <SERCOM1_Handler+0xc>)
    46ac:	685b      	ldr	r3, [r3, #4]
    46ae:	2001      	movs	r0, #1
    46b0:	4798      	blx	r3
    46b2:	bd10      	pop	{r4, pc}
    46b4:	20000190 	.word	0x20000190

000046b8 <SERCOM2_Handler>:
    46b8:	b510      	push	{r4, lr}
    46ba:	4b02      	ldr	r3, [pc, #8]	; (46c4 <SERCOM2_Handler+0xc>)
    46bc:	689b      	ldr	r3, [r3, #8]
    46be:	2002      	movs	r0, #2
    46c0:	4798      	blx	r3
    46c2:	bd10      	pop	{r4, pc}
    46c4:	20000190 	.word	0x20000190

000046c8 <SERCOM3_Handler>:
    46c8:	b510      	push	{r4, lr}
    46ca:	4b02      	ldr	r3, [pc, #8]	; (46d4 <SERCOM3_Handler+0xc>)
    46cc:	68db      	ldr	r3, [r3, #12]
    46ce:	2003      	movs	r0, #3
    46d0:	4798      	blx	r3
    46d2:	bd10      	pop	{r4, pc}
    46d4:	20000190 	.word	0x20000190

000046d8 <SERCOM4_Handler>:
    46d8:	b510      	push	{r4, lr}
    46da:	4b02      	ldr	r3, [pc, #8]	; (46e4 <SERCOM4_Handler+0xc>)
    46dc:	691b      	ldr	r3, [r3, #16]
    46de:	2004      	movs	r0, #4
    46e0:	4798      	blx	r3
    46e2:	bd10      	pop	{r4, pc}
    46e4:	20000190 	.word	0x20000190

000046e8 <SERCOM5_Handler>:
    46e8:	b510      	push	{r4, lr}
    46ea:	4b02      	ldr	r3, [pc, #8]	; (46f4 <SERCOM5_Handler+0xc>)
    46ec:	695b      	ldr	r3, [r3, #20]
    46ee:	2005      	movs	r0, #5
    46f0:	4798      	blx	r3
    46f2:	bd10      	pop	{r4, pc}
    46f4:	20000190 	.word	0x20000190

000046f8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    46f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46fa:	b08b      	sub	sp, #44	; 0x2c
    46fc:	0005      	movs	r5, r0
    46fe:	000c      	movs	r4, r1
    4700:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4702:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if(spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) 
    4704:	680b      	ldr	r3, [r1, #0]
	{
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4706:	201c      	movs	r0, #28
	if(spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) 
    4708:	079b      	lsls	r3, r3, #30
    470a:	d501      	bpl.n	4710 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    470c:	b00b      	add	sp, #44	; 0x2c
    470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST)
    4710:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4712:	3817      	subs	r0, #23
	if(spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST)
    4714:	07db      	lsls	r3, r3, #31
    4716:	d4f9      	bmi.n	470c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4718:	0008      	movs	r0, r1
    471a:	4b60      	ldr	r3, [pc, #384]	; (489c <spi_init+0x1a4>)
    471c:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    471e:	4a60      	ldr	r2, [pc, #384]	; (48a0 <spi_init+0x1a8>)
    4720:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4722:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4724:	2301      	movs	r3, #1
    4726:	40bb      	lsls	r3, r7
    4728:	430b      	orrs	r3, r1
    472a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    472c:	a909      	add	r1, sp, #36	; 0x24
    472e:	2724      	movs	r7, #36	; 0x24
    4730:	5df3      	ldrb	r3, [r6, r7]
    4732:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4734:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4736:	b2c3      	uxtb	r3, r0
    4738:	9301      	str	r3, [sp, #4]
    473a:	0018      	movs	r0, r3
    473c:	4b59      	ldr	r3, [pc, #356]	; (48a4 <spi_init+0x1ac>)
    473e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4740:	9801      	ldr	r0, [sp, #4]
    4742:	4b59      	ldr	r3, [pc, #356]	; (48a8 <spi_init+0x1b0>)
    4744:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4746:	5df0      	ldrb	r0, [r6, r7]
    4748:	2100      	movs	r1, #0
    474a:	4b58      	ldr	r3, [pc, #352]	; (48ac <spi_init+0x1b4>)
    474c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    474e:	7833      	ldrb	r3, [r6, #0]
    4750:	2b01      	cmp	r3, #1
    4752:	d038      	beq.n	47c6 <spi_init+0xce>
    4754:	002b      	movs	r3, r5
    4756:	330c      	adds	r3, #12
    4758:	0029      	movs	r1, r5
    475a:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    475c:	2200      	movs	r2, #0
    475e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4760:	428b      	cmp	r3, r1
    4762:	d1fc      	bne.n	475e <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4764:	2300      	movs	r3, #0
    4766:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4768:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    476a:	2400      	movs	r4, #0
    476c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    476e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4770:	3336      	adds	r3, #54	; 0x36
    4772:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4774:	3301      	adds	r3, #1
    4776:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4778:	3301      	adds	r3, #1
    477a:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    477c:	3b35      	subs	r3, #53	; 0x35
    477e:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4780:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4782:	6828      	ldr	r0, [r5, #0]
    4784:	4b45      	ldr	r3, [pc, #276]	; (489c <spi_init+0x1a4>)
    4786:	4798      	blx	r3
    4788:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    478a:	4949      	ldr	r1, [pc, #292]	; (48b0 <spi_init+0x1b8>)
    478c:	4b49      	ldr	r3, [pc, #292]	; (48b4 <spi_init+0x1bc>)
    478e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4790:	00bf      	lsls	r7, r7, #2
    4792:	4b49      	ldr	r3, [pc, #292]	; (48b8 <spi_init+0x1c0>)
    4794:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4796:	682f      	ldr	r7, [r5, #0]
    4798:	ab04      	add	r3, sp, #16
    479a:	2280      	movs	r2, #128	; 0x80
    479c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    479e:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    47a0:	3a7f      	subs	r2, #127	; 0x7f
    47a2:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    47a4:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    47a6:	7833      	ldrb	r3, [r6, #0]
    47a8:	2b00      	cmp	r3, #0
    47aa:	d102      	bne.n	47b2 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    47ac:	2200      	movs	r2, #0
    47ae:	ab04      	add	r3, sp, #16
    47b0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    47b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    47b4:	9305      	str	r3, [sp, #20]
    47b6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    47b8:	9306      	str	r3, [sp, #24]
    47ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
    47bc:	9307      	str	r3, [sp, #28]
    47be:	6b73      	ldr	r3, [r6, #52]	; 0x34
    47c0:	9308      	str	r3, [sp, #32]
    47c2:	2400      	movs	r4, #0
    47c4:	e00b      	b.n	47de <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    47c6:	6823      	ldr	r3, [r4, #0]
    47c8:	220c      	movs	r2, #12
    47ca:	4313      	orrs	r3, r2
    47cc:	6023      	str	r3, [r4, #0]
    47ce:	e7c1      	b.n	4754 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    47d0:	0038      	movs	r0, r7
    47d2:	4b3a      	ldr	r3, [pc, #232]	; (48bc <spi_init+0x1c4>)
    47d4:	4798      	blx	r3
    47d6:	e00a      	b.n	47ee <spi_init+0xf6>
    47d8:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    47da:	2c04      	cmp	r4, #4
    47dc:	d010      	beq.n	4800 <spi_init+0x108>
    47de:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    47e0:	00a3      	lsls	r3, r4, #2
    47e2:	aa02      	add	r2, sp, #8
    47e4:	200c      	movs	r0, #12
    47e6:	1812      	adds	r2, r2, r0
    47e8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    47ea:	2800      	cmp	r0, #0
    47ec:	d0f0      	beq.n	47d0 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    47ee:	1c43      	adds	r3, r0, #1
    47f0:	d0f2      	beq.n	47d8 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    47f2:	a904      	add	r1, sp, #16
    47f4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    47f6:	0c00      	lsrs	r0, r0, #16
    47f8:	b2c0      	uxtb	r0, r0
    47fa:	4b31      	ldr	r3, [pc, #196]	; (48c0 <spi_init+0x1c8>)
    47fc:	4798      	blx	r3
    47fe:	e7eb      	b.n	47d8 <spi_init+0xe0>
	module->mode             = config->mode;
    4800:	7833      	ldrb	r3, [r6, #0]
    4802:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4804:	7c33      	ldrb	r3, [r6, #16]
    4806:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4808:	7cb3      	ldrb	r3, [r6, #18]
    480a:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    480c:	7d33      	ldrb	r3, [r6, #20]
    480e:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4810:	2200      	movs	r2, #0
    4812:	ab02      	add	r3, sp, #8
    4814:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4816:	7833      	ldrb	r3, [r6, #0]
    4818:	2b01      	cmp	r3, #1
    481a:	d028      	beq.n	486e <spi_init+0x176>
	ctrla |= config->transfer_mode;
    481c:	6873      	ldr	r3, [r6, #4]
    481e:	68b2      	ldr	r2, [r6, #8]
    4820:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4822:	68f2      	ldr	r2, [r6, #12]
    4824:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4826:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4828:	7c72      	ldrb	r2, [r6, #17]
    482a:	2a00      	cmp	r2, #0
    482c:	d103      	bne.n	4836 <spi_init+0x13e>
    482e:	4a25      	ldr	r2, [pc, #148]	; (48c4 <spi_init+0x1cc>)
    4830:	7892      	ldrb	r2, [r2, #2]
    4832:	0792      	lsls	r2, r2, #30
    4834:	d501      	bpl.n	483a <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4836:	2280      	movs	r2, #128	; 0x80
    4838:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    483a:	7cb2      	ldrb	r2, [r6, #18]
    483c:	2a00      	cmp	r2, #0
    483e:	d002      	beq.n	4846 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4840:	2280      	movs	r2, #128	; 0x80
    4842:	0292      	lsls	r2, r2, #10
    4844:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4846:	7cf2      	ldrb	r2, [r6, #19]
    4848:	2a00      	cmp	r2, #0
    484a:	d002      	beq.n	4852 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    484c:	2280      	movs	r2, #128	; 0x80
    484e:	0092      	lsls	r2, r2, #2
    4850:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4852:	7d32      	ldrb	r2, [r6, #20]
    4854:	2a00      	cmp	r2, #0
    4856:	d002      	beq.n	485e <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4858:	2280      	movs	r2, #128	; 0x80
    485a:	0192      	lsls	r2, r2, #6
    485c:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    485e:	683a      	ldr	r2, [r7, #0]
    4860:	4313      	orrs	r3, r2
    4862:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	430b      	orrs	r3, r1
    4868:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    486a:	2000      	movs	r0, #0
    486c:	e74e      	b.n	470c <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    486e:	6828      	ldr	r0, [r5, #0]
    4870:	4b0a      	ldr	r3, [pc, #40]	; (489c <spi_init+0x1a4>)
    4872:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4874:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4876:	b2c0      	uxtb	r0, r0
    4878:	4b13      	ldr	r3, [pc, #76]	; (48c8 <spi_init+0x1d0>)
    487a:	4798      	blx	r3
    487c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    487e:	ab02      	add	r3, sp, #8
    4880:	1d9a      	adds	r2, r3, #6
    4882:	69b0      	ldr	r0, [r6, #24]
    4884:	4b11      	ldr	r3, [pc, #68]	; (48cc <spi_init+0x1d4>)
    4886:	4798      	blx	r3
    4888:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    488a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    488c:	2b00      	cmp	r3, #0
    488e:	d000      	beq.n	4892 <spi_init+0x19a>
    4890:	e73c      	b.n	470c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4892:	ab02      	add	r3, sp, #8
    4894:	3306      	adds	r3, #6
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	733b      	strb	r3, [r7, #12]
    489a:	e7bf      	b.n	481c <spi_init+0x124>
    489c:	000045f1 	.word	0x000045f1
    48a0:	40000400 	.word	0x40000400
    48a4:	000051c5 	.word	0x000051c5
    48a8:	00005139 	.word	0x00005139
    48ac:	0000442d 	.word	0x0000442d
    48b0:	000049c5 	.word	0x000049c5
    48b4:	0000462d 	.word	0x0000462d
    48b8:	20000b28 	.word	0x20000b28
    48bc:	00004479 	.word	0x00004479
    48c0:	000052bd 	.word	0x000052bd
    48c4:	41002000 	.word	0x41002000
    48c8:	000051e1 	.word	0x000051e1
    48cc:	0000436f 	.word	0x0000436f

000048d0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    48d0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    48d2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    48d4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    48d6:	2c01      	cmp	r4, #1
    48d8:	d001      	beq.n	48de <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    48da:	0018      	movs	r0, r3
    48dc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    48de:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    48e0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    48e2:	2c00      	cmp	r4, #0
    48e4:	d1f9      	bne.n	48da <spi_select_slave+0xa>
		if (select) {
    48e6:	2a00      	cmp	r2, #0
    48e8:	d058      	beq.n	499c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    48ea:	784b      	ldrb	r3, [r1, #1]
    48ec:	2b00      	cmp	r3, #0
    48ee:	d044      	beq.n	497a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48f0:	6803      	ldr	r3, [r0, #0]
    48f2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    48f4:	07db      	lsls	r3, r3, #31
    48f6:	d410      	bmi.n	491a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    48f8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    48fa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    48fc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    48fe:	2900      	cmp	r1, #0
    4900:	d104      	bne.n	490c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4902:	0953      	lsrs	r3, r2, #5
    4904:	01db      	lsls	r3, r3, #7
    4906:	492e      	ldr	r1, [pc, #184]	; (49c0 <spi_select_slave+0xf0>)
    4908:	468c      	mov	ip, r1
    490a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    490c:	211f      	movs	r1, #31
    490e:	4011      	ands	r1, r2
    4910:	2201      	movs	r2, #1
    4912:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4914:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4916:	2305      	movs	r3, #5
    4918:	e7df      	b.n	48da <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    491a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    491c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    491e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4920:	2c00      	cmp	r4, #0
    4922:	d104      	bne.n	492e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4924:	0953      	lsrs	r3, r2, #5
    4926:	01db      	lsls	r3, r3, #7
    4928:	4c25      	ldr	r4, [pc, #148]	; (49c0 <spi_select_slave+0xf0>)
    492a:	46a4      	mov	ip, r4
    492c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    492e:	241f      	movs	r4, #31
    4930:	4014      	ands	r4, r2
    4932:	2201      	movs	r2, #1
    4934:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4936:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4938:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    493a:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    493c:	07d2      	lsls	r2, r2, #31
    493e:	d501      	bpl.n	4944 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4940:	788a      	ldrb	r2, [r1, #2]
    4942:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4944:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4946:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4948:	2a00      	cmp	r2, #0
    494a:	d1c6      	bne.n	48da <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    494c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    494e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4950:	7e13      	ldrb	r3, [r2, #24]
    4952:	420b      	tst	r3, r1
    4954:	d0fc      	beq.n	4950 <spi_select_slave+0x80>
    4956:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4958:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    495a:	0749      	lsls	r1, r1, #29
    495c:	d5bd      	bpl.n	48da <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    495e:	8b53      	ldrh	r3, [r2, #26]
    4960:	075b      	lsls	r3, r3, #29
    4962:	d501      	bpl.n	4968 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4964:	2304      	movs	r3, #4
    4966:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4968:	7983      	ldrb	r3, [r0, #6]
    496a:	2b01      	cmp	r3, #1
    496c:	d002      	beq.n	4974 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    496e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4970:	2300      	movs	r3, #0
    4972:	e7b2      	b.n	48da <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4974:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4976:	2300      	movs	r3, #0
    4978:	e7af      	b.n	48da <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    497a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    497c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    497e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4980:	2900      	cmp	r1, #0
    4982:	d104      	bne.n	498e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    4984:	0953      	lsrs	r3, r2, #5
    4986:	01db      	lsls	r3, r3, #7
    4988:	490d      	ldr	r1, [pc, #52]	; (49c0 <spi_select_slave+0xf0>)
    498a:	468c      	mov	ip, r1
    498c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    498e:	211f      	movs	r1, #31
    4990:	4011      	ands	r1, r2
    4992:	2201      	movs	r2, #1
    4994:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    4996:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    4998:	2300      	movs	r3, #0
    499a:	e79e      	b.n	48da <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    499c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    499e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    49a0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    49a2:	2900      	cmp	r1, #0
    49a4:	d104      	bne.n	49b0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    49a6:	0953      	lsrs	r3, r2, #5
    49a8:	01db      	lsls	r3, r3, #7
    49aa:	4905      	ldr	r1, [pc, #20]	; (49c0 <spi_select_slave+0xf0>)
    49ac:	468c      	mov	ip, r1
    49ae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    49b0:	211f      	movs	r1, #31
    49b2:	4011      	ands	r1, r2
    49b4:	2201      	movs	r2, #1
    49b6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    49b8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    49ba:	2300      	movs	r3, #0
    49bc:	e78d      	b.n	48da <spi_select_slave+0xa>
    49be:	46c0      	nop			; (mov r8, r8)
    49c0:	41004400 	.word	0x41004400

000049c4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    49c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    49c6:	0080      	lsls	r0, r0, #2
    49c8:	4b70      	ldr	r3, [pc, #448]	; (4b8c <_spi_interrupt_handler+0x1c8>)
    49ca:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    49cc:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    49ce:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    49d0:	5ce7      	ldrb	r7, [r4, r3]
    49d2:	2236      	movs	r2, #54	; 0x36
    49d4:	5ca2      	ldrb	r2, [r4, r2]
    49d6:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    49d8:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    49da:	7db5      	ldrb	r5, [r6, #22]
    49dc:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    49de:	07eb      	lsls	r3, r5, #31
    49e0:	d502      	bpl.n	49e8 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    49e2:	7963      	ldrb	r3, [r4, #5]
    49e4:	2b01      	cmp	r3, #1
    49e6:	d01e      	beq.n	4a26 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    49e8:	076b      	lsls	r3, r5, #29
    49ea:	d511      	bpl.n	4a10 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    49ec:	8b73      	ldrh	r3, [r6, #26]
    49ee:	075b      	lsls	r3, r3, #29
    49f0:	d55a      	bpl.n	4aa8 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    49f2:	7a63      	ldrb	r3, [r4, #9]
    49f4:	2b01      	cmp	r3, #1
    49f6:	d008      	beq.n	4a0a <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    49f8:	221e      	movs	r2, #30
    49fa:	2338      	movs	r3, #56	; 0x38
    49fc:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    49fe:	3b35      	subs	r3, #53	; 0x35
    4a00:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4a02:	3302      	adds	r3, #2
    4a04:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4a06:	073b      	lsls	r3, r7, #28
    4a08:	d44a      	bmi.n	4aa0 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4a0a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a0c:	2304      	movs	r3, #4
    4a0e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4a10:	07ab      	lsls	r3, r5, #30
    4a12:	d503      	bpl.n	4a1c <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4a14:	7963      	ldrb	r3, [r4, #5]
    4a16:	2b01      	cmp	r3, #1
    4a18:	d100      	bne.n	4a1c <_spi_interrupt_handler+0x58>
    4a1a:	e097      	b.n	4b4c <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4a1c:	b26d      	sxtb	r5, r5
    4a1e:	2d00      	cmp	r5, #0
    4a20:	da00      	bge.n	4a24 <_spi_interrupt_handler+0x60>
    4a22:	e0a9      	b.n	4b78 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    4a26:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4a28:	2b00      	cmp	r3, #0
    4a2a:	d022      	beq.n	4a72 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    4a2c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d0da      	beq.n	49e8 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4a32:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4a34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a36:	7813      	ldrb	r3, [r2, #0]
    4a38:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4a3a:	1c50      	adds	r0, r2, #1
    4a3c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a3e:	79a0      	ldrb	r0, [r4, #6]
    4a40:	2801      	cmp	r0, #1
    4a42:	d027      	beq.n	4a94 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4a44:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4a46:	05db      	lsls	r3, r3, #23
    4a48:	0ddb      	lsrs	r3, r3, #23
    4a4a:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4a4c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4a4e:	3b01      	subs	r3, #1
    4a50:	b29b      	uxth	r3, r3
    4a52:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    4a54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4a56:	b29b      	uxth	r3, r3
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d1c5      	bne.n	49e8 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4a5c:	3301      	adds	r3, #1
    4a5e:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    4a60:	7a63      	ldrb	r3, [r4, #9]
    4a62:	2b01      	cmp	r3, #1
    4a64:	d1c0      	bne.n	49e8 <_spi_interrupt_handler+0x24>
    4a66:	79e3      	ldrb	r3, [r4, #7]
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d1bd      	bne.n	49e8 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4a6c:	3302      	adds	r3, #2
    4a6e:	75b3      	strb	r3, [r6, #22]
    4a70:	e7ba      	b.n	49e8 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    4a72:	4b47      	ldr	r3, [pc, #284]	; (4b90 <_spi_interrupt_handler+0x1cc>)
    4a74:	881b      	ldrh	r3, [r3, #0]
    4a76:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4a78:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4a7a:	3b01      	subs	r3, #1
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    4a80:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4a82:	b29b      	uxth	r3, r3
    4a84:	2b00      	cmp	r3, #0
    4a86:	d101      	bne.n	4a8c <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4a88:	3301      	adds	r3, #1
    4a8a:	7533      	strb	r3, [r6, #20]
		if (0
    4a8c:	7963      	ldrb	r3, [r4, #5]
    4a8e:	2b01      	cmp	r3, #1
    4a90:	d0cc      	beq.n	4a2c <_spi_interrupt_handler+0x68>
    4a92:	e7a9      	b.n	49e8 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4a94:	7850      	ldrb	r0, [r2, #1]
    4a96:	0200      	lsls	r0, r0, #8
    4a98:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    4a9a:	3202      	adds	r2, #2
    4a9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    4a9e:	e7d2      	b.n	4a46 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4aa0:	0020      	movs	r0, r4
    4aa2:	69a3      	ldr	r3, [r4, #24]
    4aa4:	4798      	blx	r3
    4aa6:	e7b0      	b.n	4a0a <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    4aa8:	7a63      	ldrb	r3, [r4, #9]
    4aaa:	2b01      	cmp	r3, #1
    4aac:	d028      	beq.n	4b00 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4aae:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ab2:	05db      	lsls	r3, r3, #23
    4ab4:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    4ab6:	b2da      	uxtb	r2, r3
    4ab8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4aba:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4abc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4abe:	1c51      	adds	r1, r2, #1
    4ac0:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ac2:	79a1      	ldrb	r1, [r4, #6]
    4ac4:	2901      	cmp	r1, #1
    4ac6:	d034      	beq.n	4b32 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    4ac8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4aca:	3b01      	subs	r3, #1
    4acc:	b29b      	uxth	r3, r3
    4ace:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4ad0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4ad2:	b29b      	uxth	r3, r3
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	d000      	beq.n	4ada <_spi_interrupt_handler+0x116>
    4ad8:	e79a      	b.n	4a10 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    4ada:	2200      	movs	r2, #0
    4adc:	3338      	adds	r3, #56	; 0x38
    4ade:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4ae0:	3b34      	subs	r3, #52	; 0x34
    4ae2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4ae4:	7a63      	ldrb	r3, [r4, #9]
    4ae6:	2b02      	cmp	r3, #2
    4ae8:	d029      	beq.n	4b3e <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    4aea:	7a63      	ldrb	r3, [r4, #9]
    4aec:	2b00      	cmp	r3, #0
    4aee:	d000      	beq.n	4af2 <_spi_interrupt_handler+0x12e>
    4af0:	e78e      	b.n	4a10 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4af2:	07bb      	lsls	r3, r7, #30
    4af4:	d400      	bmi.n	4af8 <_spi_interrupt_handler+0x134>
    4af6:	e78b      	b.n	4a10 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4af8:	0020      	movs	r0, r4
    4afa:	6923      	ldr	r3, [r4, #16]
    4afc:	4798      	blx	r3
    4afe:	e787      	b.n	4a10 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4b00:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4b04:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4b06:	3b01      	subs	r3, #1
    4b08:	b29b      	uxth	r3, r3
    4b0a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4b0c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4b0e:	b29b      	uxth	r3, r3
    4b10:	2b00      	cmp	r3, #0
    4b12:	d000      	beq.n	4b16 <_spi_interrupt_handler+0x152>
    4b14:	e77c      	b.n	4a10 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4b16:	3304      	adds	r3, #4
    4b18:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4b1a:	2200      	movs	r2, #0
    4b1c:	3334      	adds	r3, #52	; 0x34
    4b1e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4b20:	3b35      	subs	r3, #53	; 0x35
    4b22:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4b24:	07fb      	lsls	r3, r7, #31
    4b26:	d400      	bmi.n	4b2a <_spi_interrupt_handler+0x166>
    4b28:	e772      	b.n	4a10 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4b2a:	0020      	movs	r0, r4
    4b2c:	68e3      	ldr	r3, [r4, #12]
    4b2e:	4798      	blx	r3
    4b30:	e76e      	b.n	4a10 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4b32:	0a1b      	lsrs	r3, r3, #8
    4b34:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b38:	3301      	adds	r3, #1
    4b3a:	62a3      	str	r3, [r4, #40]	; 0x28
    4b3c:	e7c4      	b.n	4ac8 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4b3e:	077b      	lsls	r3, r7, #29
    4b40:	d400      	bmi.n	4b44 <_spi_interrupt_handler+0x180>
    4b42:	e765      	b.n	4a10 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4b44:	0020      	movs	r0, r4
    4b46:	6963      	ldr	r3, [r4, #20]
    4b48:	4798      	blx	r3
    4b4a:	e761      	b.n	4a10 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4b4c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4b4e:	2b01      	cmp	r3, #1
    4b50:	d000      	beq.n	4b54 <_spi_interrupt_handler+0x190>
    4b52:	e763      	b.n	4a1c <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4b54:	79e3      	ldrb	r3, [r4, #7]
    4b56:	2b00      	cmp	r3, #0
    4b58:	d000      	beq.n	4b5c <_spi_interrupt_handler+0x198>
    4b5a:	e75f      	b.n	4a1c <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4b5c:	3302      	adds	r3, #2
    4b5e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4b60:	3301      	adds	r3, #1
    4b62:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4b64:	2200      	movs	r2, #0
    4b66:	3335      	adds	r3, #53	; 0x35
    4b68:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4b6a:	07fb      	lsls	r3, r7, #31
    4b6c:	d400      	bmi.n	4b70 <_spi_interrupt_handler+0x1ac>
    4b6e:	e755      	b.n	4a1c <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4b70:	0020      	movs	r0, r4
    4b72:	68e3      	ldr	r3, [r4, #12]
    4b74:	4798      	blx	r3
    4b76:	e751      	b.n	4a1c <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4b78:	2380      	movs	r3, #128	; 0x80
    4b7a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4b7c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4b7e:	067b      	lsls	r3, r7, #25
    4b80:	d400      	bmi.n	4b84 <_spi_interrupt_handler+0x1c0>
    4b82:	e74f      	b.n	4a24 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b86:	0020      	movs	r0, r4
    4b88:	4798      	blx	r3
}
    4b8a:	e74b      	b.n	4a24 <_spi_interrupt_handler+0x60>
    4b8c:	20000b28 	.word	0x20000b28
    4b90:	20000b40 	.word	0x20000b40

00004b94 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4b94:	b510      	push	{r4, lr}
	switch (clock_source) {
    4b96:	2808      	cmp	r0, #8
    4b98:	d803      	bhi.n	4ba2 <system_clock_source_get_hz+0xe>
    4b9a:	0080      	lsls	r0, r0, #2
    4b9c:	4b1b      	ldr	r3, [pc, #108]	; (4c0c <system_clock_source_get_hz+0x78>)
    4b9e:	581b      	ldr	r3, [r3, r0]
    4ba0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4ba2:	2000      	movs	r0, #0
    4ba4:	e030      	b.n	4c08 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    4ba6:	4b1a      	ldr	r3, [pc, #104]	; (4c10 <system_clock_source_get_hz+0x7c>)
    4ba8:	6918      	ldr	r0, [r3, #16]
    4baa:	e02d      	b.n	4c08 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4bac:	4b19      	ldr	r3, [pc, #100]	; (4c14 <system_clock_source_get_hz+0x80>)
    4bae:	6a1b      	ldr	r3, [r3, #32]
    4bb0:	059b      	lsls	r3, r3, #22
    4bb2:	0f9b      	lsrs	r3, r3, #30
    4bb4:	4818      	ldr	r0, [pc, #96]	; (4c18 <system_clock_source_get_hz+0x84>)
    4bb6:	40d8      	lsrs	r0, r3
    4bb8:	e026      	b.n	4c08 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    4bba:	4b15      	ldr	r3, [pc, #84]	; (4c10 <system_clock_source_get_hz+0x7c>)
    4bbc:	6958      	ldr	r0, [r3, #20]
    4bbe:	e023      	b.n	4c08 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4bc0:	4b13      	ldr	r3, [pc, #76]	; (4c10 <system_clock_source_get_hz+0x7c>)
    4bc2:	681b      	ldr	r3, [r3, #0]
			return 0;
    4bc4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4bc6:	079b      	lsls	r3, r3, #30
    4bc8:	d51e      	bpl.n	4c08 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4bca:	4912      	ldr	r1, [pc, #72]	; (4c14 <system_clock_source_get_hz+0x80>)
    4bcc:	2210      	movs	r2, #16
    4bce:	68cb      	ldr	r3, [r1, #12]
    4bd0:	421a      	tst	r2, r3
    4bd2:	d0fc      	beq.n	4bce <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4bd4:	4b0e      	ldr	r3, [pc, #56]	; (4c10 <system_clock_source_get_hz+0x7c>)
    4bd6:	681b      	ldr	r3, [r3, #0]
    4bd8:	075b      	lsls	r3, r3, #29
    4bda:	d401      	bmi.n	4be0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4bdc:	480f      	ldr	r0, [pc, #60]	; (4c1c <system_clock_source_get_hz+0x88>)
    4bde:	e013      	b.n	4c08 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4be0:	2000      	movs	r0, #0
    4be2:	4b0f      	ldr	r3, [pc, #60]	; (4c20 <system_clock_source_get_hz+0x8c>)
    4be4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4be6:	4b0a      	ldr	r3, [pc, #40]	; (4c10 <system_clock_source_get_hz+0x7c>)
    4be8:	689b      	ldr	r3, [r3, #8]
    4bea:	041b      	lsls	r3, r3, #16
    4bec:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4bee:	4358      	muls	r0, r3
    4bf0:	e00a      	b.n	4c08 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4bf2:	2350      	movs	r3, #80	; 0x50
    4bf4:	4a07      	ldr	r2, [pc, #28]	; (4c14 <system_clock_source_get_hz+0x80>)
    4bf6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4bf8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4bfa:	075b      	lsls	r3, r3, #29
    4bfc:	d504      	bpl.n	4c08 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    4bfe:	4b04      	ldr	r3, [pc, #16]	; (4c10 <system_clock_source_get_hz+0x7c>)
    4c00:	68d8      	ldr	r0, [r3, #12]
    4c02:	e001      	b.n	4c08 <system_clock_source_get_hz+0x74>
		return 32768UL;
    4c04:	2080      	movs	r0, #128	; 0x80
    4c06:	0200      	lsls	r0, r0, #8
	}
}
    4c08:	bd10      	pop	{r4, pc}
    4c0a:	46c0      	nop			; (mov r8, r8)
    4c0c:	0000a24c 	.word	0x0000a24c
    4c10:	200001a8 	.word	0x200001a8
    4c14:	40000800 	.word	0x40000800
    4c18:	007a1200 	.word	0x007a1200
    4c1c:	02dc6c00 	.word	0x02dc6c00
    4c20:	000051e1 	.word	0x000051e1

00004c24 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4c24:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4c26:	490c      	ldr	r1, [pc, #48]	; (4c58 <system_clock_source_osc8m_set_config+0x34>)
    4c28:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4c2a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4c2c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4c2e:	7840      	ldrb	r0, [r0, #1]
    4c30:	2201      	movs	r2, #1
    4c32:	4010      	ands	r0, r2
    4c34:	0180      	lsls	r0, r0, #6
    4c36:	2640      	movs	r6, #64	; 0x40
    4c38:	43b3      	bics	r3, r6
    4c3a:	4303      	orrs	r3, r0
    4c3c:	402a      	ands	r2, r5
    4c3e:	01d2      	lsls	r2, r2, #7
    4c40:	2080      	movs	r0, #128	; 0x80
    4c42:	4383      	bics	r3, r0
    4c44:	4313      	orrs	r3, r2
    4c46:	2203      	movs	r2, #3
    4c48:	4022      	ands	r2, r4
    4c4a:	0212      	lsls	r2, r2, #8
    4c4c:	4803      	ldr	r0, [pc, #12]	; (4c5c <system_clock_source_osc8m_set_config+0x38>)
    4c4e:	4003      	ands	r3, r0
    4c50:	4313      	orrs	r3, r2
    4c52:	620b      	str	r3, [r1, #32]
}
    4c54:	bd70      	pop	{r4, r5, r6, pc}
    4c56:	46c0      	nop			; (mov r8, r8)
    4c58:	40000800 	.word	0x40000800
    4c5c:	fffffcff 	.word	0xfffffcff

00004c60 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    4c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c62:	46ce      	mov	lr, r9
    4c64:	4647      	mov	r7, r8
    4c66:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    4c68:	4b19      	ldr	r3, [pc, #100]	; (4cd0 <system_clock_source_osc32k_set_config+0x70>)
    4c6a:	4699      	mov	r9, r3
    4c6c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    4c6e:	7841      	ldrb	r1, [r0, #1]
    4c70:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    4c72:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4c74:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4c76:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    4c78:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    4c7a:	7880      	ldrb	r0, [r0, #2]
    4c7c:	2101      	movs	r1, #1
    4c7e:	4008      	ands	r0, r1
    4c80:	0080      	lsls	r0, r0, #2
    4c82:	2204      	movs	r2, #4
    4c84:	4393      	bics	r3, r2
    4c86:	4303      	orrs	r3, r0
    4c88:	4660      	mov	r0, ip
    4c8a:	4008      	ands	r0, r1
    4c8c:	00c0      	lsls	r0, r0, #3
    4c8e:	3204      	adds	r2, #4
    4c90:	4393      	bics	r3, r2
    4c92:	4303      	orrs	r3, r0
    4c94:	0038      	movs	r0, r7
    4c96:	4008      	ands	r0, r1
    4c98:	0180      	lsls	r0, r0, #6
    4c9a:	2740      	movs	r7, #64	; 0x40
    4c9c:	43bb      	bics	r3, r7
    4c9e:	4303      	orrs	r3, r0
    4ca0:	0030      	movs	r0, r6
    4ca2:	4008      	ands	r0, r1
    4ca4:	01c0      	lsls	r0, r0, #7
    4ca6:	2680      	movs	r6, #128	; 0x80
    4ca8:	43b3      	bics	r3, r6
    4caa:	4303      	orrs	r3, r0
    4cac:	2007      	movs	r0, #7
    4cae:	4005      	ands	r5, r0
    4cb0:	022d      	lsls	r5, r5, #8
    4cb2:	4808      	ldr	r0, [pc, #32]	; (4cd4 <system_clock_source_osc32k_set_config+0x74>)
    4cb4:	4003      	ands	r3, r0
    4cb6:	432b      	orrs	r3, r5
    4cb8:	4021      	ands	r1, r4
    4cba:	0309      	lsls	r1, r1, #12
    4cbc:	4806      	ldr	r0, [pc, #24]	; (4cd8 <system_clock_source_osc32k_set_config+0x78>)
    4cbe:	4003      	ands	r3, r0
    4cc0:	430b      	orrs	r3, r1
    4cc2:	464a      	mov	r2, r9
    4cc4:	6193      	str	r3, [r2, #24]
}
    4cc6:	bc0c      	pop	{r2, r3}
    4cc8:	4690      	mov	r8, r2
    4cca:	4699      	mov	r9, r3
    4ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	40000800 	.word	0x40000800
    4cd4:	fffff8ff 	.word	0xfffff8ff
    4cd8:	ffffefff 	.word	0xffffefff

00004cdc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4cdc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4cde:	7a03      	ldrb	r3, [r0, #8]
    4ce0:	069b      	lsls	r3, r3, #26
    4ce2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4ce4:	8942      	ldrh	r2, [r0, #10]
    4ce6:	0592      	lsls	r2, r2, #22
    4ce8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4cea:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    4cec:	4918      	ldr	r1, [pc, #96]	; (4d50 <system_clock_source_dfll_set_config+0x74>)
    4cee:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4cf0:	7983      	ldrb	r3, [r0, #6]
    4cf2:	79c2      	ldrb	r2, [r0, #7]
    4cf4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4cf6:	8842      	ldrh	r2, [r0, #2]
    4cf8:	8884      	ldrh	r4, [r0, #4]
    4cfa:	4322      	orrs	r2, r4
    4cfc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4cfe:	7842      	ldrb	r2, [r0, #1]
    4d00:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    4d02:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    4d04:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4d06:	7803      	ldrb	r3, [r0, #0]
    4d08:	2b04      	cmp	r3, #4
    4d0a:	d011      	beq.n	4d30 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4d0c:	2b20      	cmp	r3, #32
    4d0e:	d10e      	bne.n	4d2e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4d10:	7b03      	ldrb	r3, [r0, #12]
    4d12:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4d14:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4d16:	4313      	orrs	r3, r2
    4d18:	89c2      	ldrh	r2, [r0, #14]
    4d1a:	0412      	lsls	r2, r2, #16
    4d1c:	490d      	ldr	r1, [pc, #52]	; (4d54 <system_clock_source_dfll_set_config+0x78>)
    4d1e:	400a      	ands	r2, r1
    4d20:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4d22:	4a0b      	ldr	r2, [pc, #44]	; (4d50 <system_clock_source_dfll_set_config+0x74>)
    4d24:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4d26:	6811      	ldr	r1, [r2, #0]
    4d28:	4b0b      	ldr	r3, [pc, #44]	; (4d58 <system_clock_source_dfll_set_config+0x7c>)
    4d2a:	430b      	orrs	r3, r1
    4d2c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4d2e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4d30:	7b03      	ldrb	r3, [r0, #12]
    4d32:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4d34:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4d36:	4313      	orrs	r3, r2
    4d38:	89c2      	ldrh	r2, [r0, #14]
    4d3a:	0412      	lsls	r2, r2, #16
    4d3c:	4905      	ldr	r1, [pc, #20]	; (4d54 <system_clock_source_dfll_set_config+0x78>)
    4d3e:	400a      	ands	r2, r1
    4d40:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4d42:	4a03      	ldr	r2, [pc, #12]	; (4d50 <system_clock_source_dfll_set_config+0x74>)
    4d44:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    4d46:	6813      	ldr	r3, [r2, #0]
    4d48:	2104      	movs	r1, #4
    4d4a:	430b      	orrs	r3, r1
    4d4c:	6013      	str	r3, [r2, #0]
    4d4e:	e7ee      	b.n	4d2e <system_clock_source_dfll_set_config+0x52>
    4d50:	200001a8 	.word	0x200001a8
    4d54:	03ff0000 	.word	0x03ff0000
    4d58:	00000424 	.word	0x00000424

00004d5c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4d5c:	2808      	cmp	r0, #8
    4d5e:	d803      	bhi.n	4d68 <system_clock_source_enable+0xc>
    4d60:	0080      	lsls	r0, r0, #2
    4d62:	4b25      	ldr	r3, [pc, #148]	; (4df8 <system_clock_source_enable+0x9c>)
    4d64:	581b      	ldr	r3, [r3, r0]
    4d66:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d68:	2017      	movs	r0, #23
    4d6a:	e044      	b.n	4df6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4d6c:	4a23      	ldr	r2, [pc, #140]	; (4dfc <system_clock_source_enable+0xa0>)
    4d6e:	6a13      	ldr	r3, [r2, #32]
    4d70:	2102      	movs	r1, #2
    4d72:	430b      	orrs	r3, r1
    4d74:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4d76:	2000      	movs	r0, #0
    4d78:	e03d      	b.n	4df6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4d7a:	4a20      	ldr	r2, [pc, #128]	; (4dfc <system_clock_source_enable+0xa0>)
    4d7c:	6993      	ldr	r3, [r2, #24]
    4d7e:	2102      	movs	r1, #2
    4d80:	430b      	orrs	r3, r1
    4d82:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    4d84:	2000      	movs	r0, #0
		break;
    4d86:	e036      	b.n	4df6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4d88:	4a1c      	ldr	r2, [pc, #112]	; (4dfc <system_clock_source_enable+0xa0>)
    4d8a:	8a13      	ldrh	r3, [r2, #16]
    4d8c:	2102      	movs	r1, #2
    4d8e:	430b      	orrs	r3, r1
    4d90:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    4d92:	2000      	movs	r0, #0
		break;
    4d94:	e02f      	b.n	4df6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4d96:	4a19      	ldr	r2, [pc, #100]	; (4dfc <system_clock_source_enable+0xa0>)
    4d98:	8a93      	ldrh	r3, [r2, #20]
    4d9a:	2102      	movs	r1, #2
    4d9c:	430b      	orrs	r3, r1
    4d9e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4da0:	2000      	movs	r0, #0
		break;
    4da2:	e028      	b.n	4df6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4da4:	4916      	ldr	r1, [pc, #88]	; (4e00 <system_clock_source_enable+0xa4>)
    4da6:	680b      	ldr	r3, [r1, #0]
    4da8:	2202      	movs	r2, #2
    4daa:	4313      	orrs	r3, r2
    4dac:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4dae:	4b13      	ldr	r3, [pc, #76]	; (4dfc <system_clock_source_enable+0xa0>)
    4db0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4db2:	0019      	movs	r1, r3
    4db4:	320e      	adds	r2, #14
    4db6:	68cb      	ldr	r3, [r1, #12]
    4db8:	421a      	tst	r2, r3
    4dba:	d0fc      	beq.n	4db6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4dbc:	4a10      	ldr	r2, [pc, #64]	; (4e00 <system_clock_source_enable+0xa4>)
    4dbe:	6891      	ldr	r1, [r2, #8]
    4dc0:	4b0e      	ldr	r3, [pc, #56]	; (4dfc <system_clock_source_enable+0xa0>)
    4dc2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4dc4:	6852      	ldr	r2, [r2, #4]
    4dc6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    4dc8:	2200      	movs	r2, #0
    4dca:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4dcc:	0019      	movs	r1, r3
    4dce:	3210      	adds	r2, #16
    4dd0:	68cb      	ldr	r3, [r1, #12]
    4dd2:	421a      	tst	r2, r3
    4dd4:	d0fc      	beq.n	4dd0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4dd6:	4b0a      	ldr	r3, [pc, #40]	; (4e00 <system_clock_source_enable+0xa4>)
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	b29b      	uxth	r3, r3
    4ddc:	4a07      	ldr	r2, [pc, #28]	; (4dfc <system_clock_source_enable+0xa0>)
    4dde:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4de0:	2000      	movs	r0, #0
    4de2:	e008      	b.n	4df6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4de4:	4905      	ldr	r1, [pc, #20]	; (4dfc <system_clock_source_enable+0xa0>)
    4de6:	2244      	movs	r2, #68	; 0x44
    4de8:	5c8b      	ldrb	r3, [r1, r2]
    4dea:	2002      	movs	r0, #2
    4dec:	4303      	orrs	r3, r0
    4dee:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4df0:	2000      	movs	r0, #0
		break;
    4df2:	e000      	b.n	4df6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    4df4:	2000      	movs	r0, #0
}
    4df6:	4770      	bx	lr
    4df8:	0000a270 	.word	0x0000a270
    4dfc:	40000800 	.word	0x40000800
    4e00:	200001a8 	.word	0x200001a8

00004e04 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e06:	46ce      	mov	lr, r9
    4e08:	4647      	mov	r7, r8
    4e0a:	b580      	push	{r7, lr}
    4e0c:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4e0e:	22c2      	movs	r2, #194	; 0xc2
    4e10:	00d2      	lsls	r2, r2, #3
    4e12:	4b50      	ldr	r3, [pc, #320]	; (4f54 <system_clock_init+0x150>)
    4e14:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4e16:	4a50      	ldr	r2, [pc, #320]	; (4f58 <system_clock_init+0x154>)
    4e18:	6853      	ldr	r3, [r2, #4]
    4e1a:	211e      	movs	r1, #30
    4e1c:	438b      	bics	r3, r1
    4e1e:	391a      	subs	r1, #26
    4e20:	430b      	orrs	r3, r1
    4e22:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    4e24:	2203      	movs	r2, #3
    4e26:	ab01      	add	r3, sp, #4
    4e28:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4e2a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4e2c:	4d4b      	ldr	r5, [pc, #300]	; (4f5c <system_clock_init+0x158>)
    4e2e:	b2e0      	uxtb	r0, r4
    4e30:	a901      	add	r1, sp, #4
    4e32:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4e34:	3401      	adds	r4, #1
    4e36:	2c25      	cmp	r4, #37	; 0x25
    4e38:	d1f9      	bne.n	4e2e <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    4e3a:	4d49      	ldr	r5, [pc, #292]	; (4f60 <system_clock_init+0x15c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    4e3c:	682b      	ldr	r3, [r5, #0]
    4e3e:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    4e40:	4944      	ldr	r1, [pc, #272]	; (4f54 <system_clock_init+0x150>)
    4e42:	698a      	ldr	r2, [r1, #24]
    4e44:	0e5b      	lsrs	r3, r3, #25
    4e46:	041b      	lsls	r3, r3, #16
    4e48:	4846      	ldr	r0, [pc, #280]	; (4f64 <system_clock_init+0x160>)
    4e4a:	4002      	ands	r2, r0
    4e4c:	4313      	orrs	r3, r2
    4e4e:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    4e50:	a80a      	add	r0, sp, #40	; 0x28
    4e52:	2301      	movs	r3, #1
    4e54:	7083      	strb	r3, [r0, #2]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    4e56:	2207      	movs	r2, #7
    4e58:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    4e5a:	2400      	movs	r4, #0
    4e5c:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    4e5e:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    4e60:	7104      	strb	r4, [r0, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    4e62:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    4e64:	4b40      	ldr	r3, [pc, #256]	; (4f68 <system_clock_init+0x164>)
    4e66:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    4e68:	2004      	movs	r0, #4
    4e6a:	4b40      	ldr	r3, [pc, #256]	; (4f6c <system_clock_init+0x168>)
    4e6c:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4e6e:	ab05      	add	r3, sp, #20
    4e70:	2200      	movs	r2, #0
    4e72:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4e74:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4e76:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4e78:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4e7a:	213f      	movs	r1, #63	; 0x3f
    4e7c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4e7e:	393b      	subs	r1, #59	; 0x3b
    4e80:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    4e82:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4e84:	682b      	ldr	r3, [r5, #0]
    4e86:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4e88:	2b3f      	cmp	r3, #63	; 0x3f
    4e8a:	d060      	beq.n	4f4e <system_clock_init+0x14a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    4e8c:	a805      	add	r0, sp, #20
    4e8e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    4e90:	2304      	movs	r3, #4
    4e92:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4e94:	3303      	adds	r3, #3
    4e96:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4e98:	3338      	adds	r3, #56	; 0x38
    4e9a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4e9c:	4b34      	ldr	r3, [pc, #208]	; (4f70 <system_clock_init+0x16c>)
    4e9e:	4798      	blx	r3
	config->run_in_standby  = false;
    4ea0:	a804      	add	r0, sp, #16
    4ea2:	2500      	movs	r5, #0
    4ea4:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4ea6:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4ea8:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4eaa:	4b32      	ldr	r3, [pc, #200]	; (4f74 <system_clock_init+0x170>)
    4eac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4eae:	2006      	movs	r0, #6
    4eb0:	4f2e      	ldr	r7, [pc, #184]	; (4f6c <system_clock_init+0x168>)
    4eb2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4eb4:	4b30      	ldr	r3, [pc, #192]	; (4f78 <system_clock_init+0x174>)
    4eb6:	4798      	blx	r3
	config->division_factor    = 1;
    4eb8:	ac01      	add	r4, sp, #4
    4eba:	2601      	movs	r6, #1
    4ebc:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    4ebe:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4ec0:	2306      	movs	r3, #6
    4ec2:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    4ec4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4ec6:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4ec8:	0021      	movs	r1, r4
    4eca:	2001      	movs	r0, #1
    4ecc:	4b2b      	ldr	r3, [pc, #172]	; (4f7c <system_clock_init+0x178>)
    4ece:	4699      	mov	r9, r3
    4ed0:	4798      	blx	r3
    4ed2:	2001      	movs	r0, #1
    4ed4:	4b2a      	ldr	r3, [pc, #168]	; (4f80 <system_clock_init+0x17c>)
    4ed6:	4698      	mov	r8, r3
    4ed8:	4798      	blx	r3
	config->high_when_disabled = false;
    4eda:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    4edc:	7265      	strb	r5, [r4, #9]
    4ede:	2304      	movs	r3, #4
    4ee0:	7023      	strb	r3, [r4, #0]
    4ee2:	2320      	movs	r3, #32
    4ee4:	6063      	str	r3, [r4, #4]
    4ee6:	7226      	strb	r6, [r4, #8]
    4ee8:	0021      	movs	r1, r4
    4eea:	2002      	movs	r0, #2
    4eec:	47c8      	blx	r9
    4eee:	2002      	movs	r0, #2
    4ef0:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    4ef2:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    4ef4:	0021      	movs	r1, r4
    4ef6:	2000      	movs	r0, #0
    4ef8:	4b18      	ldr	r3, [pc, #96]	; (4f5c <system_clock_init+0x158>)
    4efa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    4efc:	2000      	movs	r0, #0
    4efe:	4b21      	ldr	r3, [pc, #132]	; (4f84 <system_clock_init+0x180>)
    4f00:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4f02:	2007      	movs	r0, #7
    4f04:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4f06:	4913      	ldr	r1, [pc, #76]	; (4f54 <system_clock_init+0x150>)
    4f08:	22d0      	movs	r2, #208	; 0xd0
    4f0a:	68cb      	ldr	r3, [r1, #12]
    4f0c:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4f0e:	2bd0      	cmp	r3, #208	; 0xd0
    4f10:	d1fb      	bne.n	4f0a <system_clock_init+0x106>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    4f12:	4a10      	ldr	r2, [pc, #64]	; (4f54 <system_clock_init+0x150>)
    4f14:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    4f16:	2180      	movs	r1, #128	; 0x80
    4f18:	430b      	orrs	r3, r1
    4f1a:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    4f1c:	4a1a      	ldr	r2, [pc, #104]	; (4f88 <system_clock_init+0x184>)
    4f1e:	2300      	movs	r3, #0
    4f20:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4f22:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4f24:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4f26:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    4f28:	a901      	add	r1, sp, #4
    4f2a:	2201      	movs	r2, #1
    4f2c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4f2e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    4f30:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4f32:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4f34:	3307      	adds	r3, #7
    4f36:	700b      	strb	r3, [r1, #0]
    4f38:	2000      	movs	r0, #0
    4f3a:	4b10      	ldr	r3, [pc, #64]	; (4f7c <system_clock_init+0x178>)
    4f3c:	4798      	blx	r3
    4f3e:	2000      	movs	r0, #0
    4f40:	4b0f      	ldr	r3, [pc, #60]	; (4f80 <system_clock_init+0x17c>)
    4f42:	4798      	blx	r3
#endif
}
    4f44:	b00d      	add	sp, #52	; 0x34
    4f46:	bc0c      	pop	{r2, r3}
    4f48:	4690      	mov	r8, r2
    4f4a:	4699      	mov	r9, r3
    4f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4f4e:	3b20      	subs	r3, #32
    4f50:	e79c      	b.n	4e8c <system_clock_init+0x88>
    4f52:	46c0      	nop			; (mov r8, r8)
    4f54:	40000800 	.word	0x40000800
    4f58:	41004000 	.word	0x41004000
    4f5c:	000051c5 	.word	0x000051c5
    4f60:	00806024 	.word	0x00806024
    4f64:	ff80ffff 	.word	0xff80ffff
    4f68:	00004c61 	.word	0x00004c61
    4f6c:	00004d5d 	.word	0x00004d5d
    4f70:	00004cdd 	.word	0x00004cdd
    4f74:	00004c25 	.word	0x00004c25
    4f78:	00004f8d 	.word	0x00004f8d
    4f7c:	00004fb1 	.word	0x00004fb1
    4f80:	00005069 	.word	0x00005069
    4f84:	00005139 	.word	0x00005139
    4f88:	40000400 	.word	0x40000400

00004f8c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4f8c:	4a06      	ldr	r2, [pc, #24]	; (4fa8 <system_gclk_init+0x1c>)
    4f8e:	6993      	ldr	r3, [r2, #24]
    4f90:	2108      	movs	r1, #8
    4f92:	430b      	orrs	r3, r1
    4f94:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4f96:	2201      	movs	r2, #1
    4f98:	4b04      	ldr	r3, [pc, #16]	; (4fac <system_gclk_init+0x20>)
    4f9a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4f9c:	0019      	movs	r1, r3
    4f9e:	780b      	ldrb	r3, [r1, #0]
    4fa0:	4213      	tst	r3, r2
    4fa2:	d1fc      	bne.n	4f9e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4fa4:	4770      	bx	lr
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	40000400 	.word	0x40000400
    4fac:	40000c00 	.word	0x40000c00

00004fb0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4fb0:	b570      	push	{r4, r5, r6, lr}
    4fb2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4fb4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4fb6:	780d      	ldrb	r5, [r1, #0]
    4fb8:	022d      	lsls	r5, r5, #8
    4fba:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4fbc:	784b      	ldrb	r3, [r1, #1]
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d002      	beq.n	4fc8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4fc2:	2380      	movs	r3, #128	; 0x80
    4fc4:	02db      	lsls	r3, r3, #11
    4fc6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4fc8:	7a4b      	ldrb	r3, [r1, #9]
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d002      	beq.n	4fd4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4fce:	2380      	movs	r3, #128	; 0x80
    4fd0:	031b      	lsls	r3, r3, #12
    4fd2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4fd4:	6848      	ldr	r0, [r1, #4]
    4fd6:	2801      	cmp	r0, #1
    4fd8:	d910      	bls.n	4ffc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4fda:	1e43      	subs	r3, r0, #1
    4fdc:	4218      	tst	r0, r3
    4fde:	d134      	bne.n	504a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4fe0:	2802      	cmp	r0, #2
    4fe2:	d930      	bls.n	5046 <system_gclk_gen_set_config+0x96>
    4fe4:	2302      	movs	r3, #2
    4fe6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4fe8:	3201      	adds	r2, #1
						mask <<= 1) {
    4fea:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4fec:	4298      	cmp	r0, r3
    4fee:	d8fb      	bhi.n	4fe8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4ff0:	0212      	lsls	r2, r2, #8
    4ff2:	4332      	orrs	r2, r6
    4ff4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4ff6:	2380      	movs	r3, #128	; 0x80
    4ff8:	035b      	lsls	r3, r3, #13
    4ffa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4ffc:	7a0b      	ldrb	r3, [r1, #8]
    4ffe:	2b00      	cmp	r3, #0
    5000:	d002      	beq.n	5008 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5002:	2380      	movs	r3, #128	; 0x80
    5004:	039b      	lsls	r3, r3, #14
    5006:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5008:	4a13      	ldr	r2, [pc, #76]	; (5058 <system_gclk_gen_set_config+0xa8>)
    500a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    500c:	b25b      	sxtb	r3, r3
    500e:	2b00      	cmp	r3, #0
    5010:	dbfb      	blt.n	500a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    5012:	4b12      	ldr	r3, [pc, #72]	; (505c <system_gclk_gen_set_config+0xac>)
    5014:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5016:	4b12      	ldr	r3, [pc, #72]	; (5060 <system_gclk_gen_set_config+0xb0>)
    5018:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    501a:	4a0f      	ldr	r2, [pc, #60]	; (5058 <system_gclk_gen_set_config+0xa8>)
    501c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    501e:	b25b      	sxtb	r3, r3
    5020:	2b00      	cmp	r3, #0
    5022:	dbfb      	blt.n	501c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5024:	4b0c      	ldr	r3, [pc, #48]	; (5058 <system_gclk_gen_set_config+0xa8>)
    5026:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5028:	001a      	movs	r2, r3
    502a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    502c:	b25b      	sxtb	r3, r3
    502e:	2b00      	cmp	r3, #0
    5030:	dbfb      	blt.n	502a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5032:	4a09      	ldr	r2, [pc, #36]	; (5058 <system_gclk_gen_set_config+0xa8>)
    5034:	6853      	ldr	r3, [r2, #4]
    5036:	2180      	movs	r1, #128	; 0x80
    5038:	0249      	lsls	r1, r1, #9
    503a:	400b      	ands	r3, r1
    503c:	431d      	orrs	r5, r3
    503e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5040:	4b08      	ldr	r3, [pc, #32]	; (5064 <system_gclk_gen_set_config+0xb4>)
    5042:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5044:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5046:	2200      	movs	r2, #0
    5048:	e7d2      	b.n	4ff0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    504a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    504c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    504e:	2380      	movs	r3, #128	; 0x80
    5050:	029b      	lsls	r3, r3, #10
    5052:	431d      	orrs	r5, r3
    5054:	e7d2      	b.n	4ffc <system_gclk_gen_set_config+0x4c>
    5056:	46c0      	nop			; (mov r8, r8)
    5058:	40000c00 	.word	0x40000c00
    505c:	00004051 	.word	0x00004051
    5060:	40000c08 	.word	0x40000c08
    5064:	00004091 	.word	0x00004091

00005068 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5068:	b510      	push	{r4, lr}
    506a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    506c:	4a0b      	ldr	r2, [pc, #44]	; (509c <system_gclk_gen_enable+0x34>)
    506e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5070:	b25b      	sxtb	r3, r3
    5072:	2b00      	cmp	r3, #0
    5074:	dbfb      	blt.n	506e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5076:	4b0a      	ldr	r3, [pc, #40]	; (50a0 <system_gclk_gen_enable+0x38>)
    5078:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    507a:	4b0a      	ldr	r3, [pc, #40]	; (50a4 <system_gclk_gen_enable+0x3c>)
    507c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    507e:	4a07      	ldr	r2, [pc, #28]	; (509c <system_gclk_gen_enable+0x34>)
    5080:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5082:	b25b      	sxtb	r3, r3
    5084:	2b00      	cmp	r3, #0
    5086:	dbfb      	blt.n	5080 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5088:	4a04      	ldr	r2, [pc, #16]	; (509c <system_gclk_gen_enable+0x34>)
    508a:	6851      	ldr	r1, [r2, #4]
    508c:	2380      	movs	r3, #128	; 0x80
    508e:	025b      	lsls	r3, r3, #9
    5090:	430b      	orrs	r3, r1
    5092:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5094:	4b04      	ldr	r3, [pc, #16]	; (50a8 <system_gclk_gen_enable+0x40>)
    5096:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5098:	bd10      	pop	{r4, pc}
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	40000c00 	.word	0x40000c00
    50a0:	00004051 	.word	0x00004051
    50a4:	40000c04 	.word	0x40000c04
    50a8:	00004091 	.word	0x00004091

000050ac <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    50ac:	b570      	push	{r4, r5, r6, lr}
    50ae:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    50b0:	4a1a      	ldr	r2, [pc, #104]	; (511c <system_gclk_gen_get_hz+0x70>)
    50b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    50b4:	b25b      	sxtb	r3, r3
    50b6:	2b00      	cmp	r3, #0
    50b8:	dbfb      	blt.n	50b2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    50ba:	4b19      	ldr	r3, [pc, #100]	; (5120 <system_gclk_gen_get_hz+0x74>)
    50bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    50be:	4b19      	ldr	r3, [pc, #100]	; (5124 <system_gclk_gen_get_hz+0x78>)
    50c0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    50c2:	4a16      	ldr	r2, [pc, #88]	; (511c <system_gclk_gen_get_hz+0x70>)
    50c4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    50c6:	b25b      	sxtb	r3, r3
    50c8:	2b00      	cmp	r3, #0
    50ca:	dbfb      	blt.n	50c4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    50cc:	4e13      	ldr	r6, [pc, #76]	; (511c <system_gclk_gen_get_hz+0x70>)
    50ce:	6870      	ldr	r0, [r6, #4]
    50d0:	04c0      	lsls	r0, r0, #19
    50d2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    50d4:	4b14      	ldr	r3, [pc, #80]	; (5128 <system_gclk_gen_get_hz+0x7c>)
    50d6:	4798      	blx	r3
    50d8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    50da:	4b12      	ldr	r3, [pc, #72]	; (5124 <system_gclk_gen_get_hz+0x78>)
    50dc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    50de:	6876      	ldr	r6, [r6, #4]
    50e0:	02f6      	lsls	r6, r6, #11
    50e2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    50e4:	4b11      	ldr	r3, [pc, #68]	; (512c <system_gclk_gen_get_hz+0x80>)
    50e6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    50e8:	4a0c      	ldr	r2, [pc, #48]	; (511c <system_gclk_gen_get_hz+0x70>)
    50ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    50ec:	b25b      	sxtb	r3, r3
    50ee:	2b00      	cmp	r3, #0
    50f0:	dbfb      	blt.n	50ea <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    50f2:	4b0a      	ldr	r3, [pc, #40]	; (511c <system_gclk_gen_get_hz+0x70>)
    50f4:	689c      	ldr	r4, [r3, #8]
    50f6:	0224      	lsls	r4, r4, #8
    50f8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    50fa:	4b0d      	ldr	r3, [pc, #52]	; (5130 <system_gclk_gen_get_hz+0x84>)
    50fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    50fe:	2e00      	cmp	r6, #0
    5100:	d107      	bne.n	5112 <system_gclk_gen_get_hz+0x66>
    5102:	2c01      	cmp	r4, #1
    5104:	d907      	bls.n	5116 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5106:	0021      	movs	r1, r4
    5108:	0028      	movs	r0, r5
    510a:	4b0a      	ldr	r3, [pc, #40]	; (5134 <system_gclk_gen_get_hz+0x88>)
    510c:	4798      	blx	r3
    510e:	0005      	movs	r5, r0
    5110:	e001      	b.n	5116 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5112:	3401      	adds	r4, #1
    5114:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5116:	0028      	movs	r0, r5
    5118:	bd70      	pop	{r4, r5, r6, pc}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	40000c00 	.word	0x40000c00
    5120:	00004051 	.word	0x00004051
    5124:	40000c04 	.word	0x40000c04
    5128:	00004b95 	.word	0x00004b95
    512c:	40000c08 	.word	0x40000c08
    5130:	00004091 	.word	0x00004091
    5134:	00007de1 	.word	0x00007de1

00005138 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5138:	b510      	push	{r4, lr}
    513a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    513c:	4b06      	ldr	r3, [pc, #24]	; (5158 <system_gclk_chan_enable+0x20>)
    513e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5140:	4b06      	ldr	r3, [pc, #24]	; (515c <system_gclk_chan_enable+0x24>)
    5142:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5144:	4a06      	ldr	r2, [pc, #24]	; (5160 <system_gclk_chan_enable+0x28>)
    5146:	8853      	ldrh	r3, [r2, #2]
    5148:	2180      	movs	r1, #128	; 0x80
    514a:	01c9      	lsls	r1, r1, #7
    514c:	430b      	orrs	r3, r1
    514e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    5150:	4b04      	ldr	r3, [pc, #16]	; (5164 <system_gclk_chan_enable+0x2c>)
    5152:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5154:	bd10      	pop	{r4, pc}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	00004051 	.word	0x00004051
    515c:	40000c02 	.word	0x40000c02
    5160:	40000c00 	.word	0x40000c00
    5164:	00004091 	.word	0x00004091

00005168 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5168:	b510      	push	{r4, lr}
    516a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    516c:	4b0f      	ldr	r3, [pc, #60]	; (51ac <system_gclk_chan_disable+0x44>)
    516e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5170:	4b0f      	ldr	r3, [pc, #60]	; (51b0 <system_gclk_chan_disable+0x48>)
    5172:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5174:	4a0f      	ldr	r2, [pc, #60]	; (51b4 <system_gclk_chan_disable+0x4c>)
    5176:	8853      	ldrh	r3, [r2, #2]
    5178:	051b      	lsls	r3, r3, #20
    517a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    517c:	8853      	ldrh	r3, [r2, #2]
    517e:	490e      	ldr	r1, [pc, #56]	; (51b8 <system_gclk_chan_disable+0x50>)
    5180:	400b      	ands	r3, r1
    5182:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5184:	8853      	ldrh	r3, [r2, #2]
    5186:	490d      	ldr	r1, [pc, #52]	; (51bc <system_gclk_chan_disable+0x54>)
    5188:	400b      	ands	r3, r1
    518a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    518c:	0011      	movs	r1, r2
    518e:	2280      	movs	r2, #128	; 0x80
    5190:	01d2      	lsls	r2, r2, #7
    5192:	884b      	ldrh	r3, [r1, #2]
    5194:	4213      	tst	r3, r2
    5196:	d1fc      	bne.n	5192 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5198:	4906      	ldr	r1, [pc, #24]	; (51b4 <system_gclk_chan_disable+0x4c>)
    519a:	884a      	ldrh	r2, [r1, #2]
    519c:	0203      	lsls	r3, r0, #8
    519e:	4806      	ldr	r0, [pc, #24]	; (51b8 <system_gclk_chan_disable+0x50>)
    51a0:	4002      	ands	r2, r0
    51a2:	4313      	orrs	r3, r2
    51a4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    51a6:	4b06      	ldr	r3, [pc, #24]	; (51c0 <system_gclk_chan_disable+0x58>)
    51a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    51aa:	bd10      	pop	{r4, pc}
    51ac:	00004051 	.word	0x00004051
    51b0:	40000c02 	.word	0x40000c02
    51b4:	40000c00 	.word	0x40000c00
    51b8:	fffff0ff 	.word	0xfffff0ff
    51bc:	ffffbfff 	.word	0xffffbfff
    51c0:	00004091 	.word	0x00004091

000051c4 <system_gclk_chan_set_config>:
{
    51c4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    51c6:	780c      	ldrb	r4, [r1, #0]
    51c8:	0224      	lsls	r4, r4, #8
    51ca:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    51cc:	4b02      	ldr	r3, [pc, #8]	; (51d8 <system_gclk_chan_set_config+0x14>)
    51ce:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    51d0:	b2a4      	uxth	r4, r4
    51d2:	4b02      	ldr	r3, [pc, #8]	; (51dc <system_gclk_chan_set_config+0x18>)
    51d4:	805c      	strh	r4, [r3, #2]
}
    51d6:	bd10      	pop	{r4, pc}
    51d8:	00005169 	.word	0x00005169
    51dc:	40000c00 	.word	0x40000c00

000051e0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    51e0:	b510      	push	{r4, lr}
    51e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    51e4:	4b06      	ldr	r3, [pc, #24]	; (5200 <system_gclk_chan_get_hz+0x20>)
    51e6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    51e8:	4b06      	ldr	r3, [pc, #24]	; (5204 <system_gclk_chan_get_hz+0x24>)
    51ea:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    51ec:	4b06      	ldr	r3, [pc, #24]	; (5208 <system_gclk_chan_get_hz+0x28>)
    51ee:	885c      	ldrh	r4, [r3, #2]
    51f0:	0524      	lsls	r4, r4, #20
    51f2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    51f4:	4b05      	ldr	r3, [pc, #20]	; (520c <system_gclk_chan_get_hz+0x2c>)
    51f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    51f8:	0020      	movs	r0, r4
    51fa:	4b05      	ldr	r3, [pc, #20]	; (5210 <system_gclk_chan_get_hz+0x30>)
    51fc:	4798      	blx	r3
}
    51fe:	bd10      	pop	{r4, pc}
    5200:	00004051 	.word	0x00004051
    5204:	40000c02 	.word	0x40000c02
    5208:	40000c00 	.word	0x40000c00
    520c:	00004091 	.word	0x00004091
    5210:	000050ad 	.word	0x000050ad

00005214 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5214:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5216:	78d3      	ldrb	r3, [r2, #3]
    5218:	2b00      	cmp	r3, #0
    521a:	d135      	bne.n	5288 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    521c:	7813      	ldrb	r3, [r2, #0]
    521e:	2b80      	cmp	r3, #128	; 0x80
    5220:	d029      	beq.n	5276 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5222:	061b      	lsls	r3, r3, #24
    5224:	2480      	movs	r4, #128	; 0x80
    5226:	0264      	lsls	r4, r4, #9
    5228:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    522a:	7854      	ldrb	r4, [r2, #1]
    522c:	2502      	movs	r5, #2
    522e:	43ac      	bics	r4, r5
    5230:	d106      	bne.n	5240 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5232:	7894      	ldrb	r4, [r2, #2]
    5234:	2c00      	cmp	r4, #0
    5236:	d120      	bne.n	527a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5238:	2480      	movs	r4, #128	; 0x80
    523a:	02a4      	lsls	r4, r4, #10
    523c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    523e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5240:	7854      	ldrb	r4, [r2, #1]
    5242:	3c01      	subs	r4, #1
    5244:	2c01      	cmp	r4, #1
    5246:	d91c      	bls.n	5282 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5248:	040d      	lsls	r5, r1, #16
    524a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    524c:	24a0      	movs	r4, #160	; 0xa0
    524e:	05e4      	lsls	r4, r4, #23
    5250:	432c      	orrs	r4, r5
    5252:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5254:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5256:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5258:	24d0      	movs	r4, #208	; 0xd0
    525a:	0624      	lsls	r4, r4, #24
    525c:	432c      	orrs	r4, r5
    525e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5260:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5262:	78d4      	ldrb	r4, [r2, #3]
    5264:	2c00      	cmp	r4, #0
    5266:	d122      	bne.n	52ae <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5268:	035b      	lsls	r3, r3, #13
    526a:	d51c      	bpl.n	52a6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    526c:	7893      	ldrb	r3, [r2, #2]
    526e:	2b01      	cmp	r3, #1
    5270:	d01e      	beq.n	52b0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5272:	6141      	str	r1, [r0, #20]
    5274:	e017      	b.n	52a6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    5276:	2300      	movs	r3, #0
    5278:	e7d7      	b.n	522a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    527a:	24c0      	movs	r4, #192	; 0xc0
    527c:	02e4      	lsls	r4, r4, #11
    527e:	4323      	orrs	r3, r4
    5280:	e7dd      	b.n	523e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5282:	4c0d      	ldr	r4, [pc, #52]	; (52b8 <_system_pinmux_config+0xa4>)
    5284:	4023      	ands	r3, r4
    5286:	e7df      	b.n	5248 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5288:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    528a:	040c      	lsls	r4, r1, #16
    528c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    528e:	23a0      	movs	r3, #160	; 0xa0
    5290:	05db      	lsls	r3, r3, #23
    5292:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5294:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5296:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5298:	23d0      	movs	r3, #208	; 0xd0
    529a:	061b      	lsls	r3, r3, #24
    529c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    529e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    52a0:	78d3      	ldrb	r3, [r2, #3]
    52a2:	2b00      	cmp	r3, #0
    52a4:	d103      	bne.n	52ae <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    52a6:	7853      	ldrb	r3, [r2, #1]
    52a8:	3b01      	subs	r3, #1
    52aa:	2b01      	cmp	r3, #1
    52ac:	d902      	bls.n	52b4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    52ae:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    52b0:	6181      	str	r1, [r0, #24]
    52b2:	e7f8      	b.n	52a6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    52b4:	6081      	str	r1, [r0, #8]
}
    52b6:	e7fa      	b.n	52ae <_system_pinmux_config+0x9a>
    52b8:	fffbffff 	.word	0xfffbffff

000052bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    52bc:	b510      	push	{r4, lr}
    52be:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    52c0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    52c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    52c4:	2900      	cmp	r1, #0
    52c6:	d104      	bne.n	52d2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    52c8:	0943      	lsrs	r3, r0, #5
    52ca:	01db      	lsls	r3, r3, #7
    52cc:	4905      	ldr	r1, [pc, #20]	; (52e4 <system_pinmux_pin_set_config+0x28>)
    52ce:	468c      	mov	ip, r1
    52d0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    52d2:	241f      	movs	r4, #31
    52d4:	4020      	ands	r0, r4
    52d6:	2101      	movs	r1, #1
    52d8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    52da:	0018      	movs	r0, r3
    52dc:	4b02      	ldr	r3, [pc, #8]	; (52e8 <system_pinmux_pin_set_config+0x2c>)
    52de:	4798      	blx	r3
}
    52e0:	bd10      	pop	{r4, pc}
    52e2:	46c0      	nop			; (mov r8, r8)
    52e4:	41004400 	.word	0x41004400
    52e8:	00005215 	.word	0x00005215

000052ec <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    52ec:	4770      	bx	lr
	...

000052f0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    52f0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    52f2:	4b04      	ldr	r3, [pc, #16]	; (5304 <system_init+0x14>)
    52f4:	4798      	blx	r3

	/* Initialize board hardware */
//	system_board_init();

	/* Initialize EVSYS hardware */
	_system_events_init();
    52f6:	4b04      	ldr	r3, [pc, #16]	; (5308 <system_init+0x18>)
    52f8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    52fa:	4b04      	ldr	r3, [pc, #16]	; (530c <system_init+0x1c>)
    52fc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    52fe:	4b04      	ldr	r3, [pc, #16]	; (5310 <system_init+0x20>)
    5300:	4798      	blx	r3
}
    5302:	bd10      	pop	{r4, pc}
    5304:	00004e05 	.word	0x00004e05
    5308:	000052ed 	.word	0x000052ed
    530c:	00004199 	.word	0x00004199
    5310:	000052ed 	.word	0x000052ed

00005314 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5314:	1c93      	adds	r3, r2, #2
    5316:	009b      	lsls	r3, r3, #2
    5318:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    531a:	2a02      	cmp	r2, #2
    531c:	d009      	beq.n	5332 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    531e:	2a03      	cmp	r2, #3
    5320:	d00c      	beq.n	533c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    5322:	2301      	movs	r3, #1
    5324:	4093      	lsls	r3, r2
    5326:	001a      	movs	r2, r3
    5328:	7e03      	ldrb	r3, [r0, #24]
    532a:	4313      	orrs	r3, r2
    532c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    532e:	2000      	movs	r0, #0
    5330:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    5332:	7e03      	ldrb	r3, [r0, #24]
    5334:	2210      	movs	r2, #16
    5336:	4313      	orrs	r3, r2
    5338:	7603      	strb	r3, [r0, #24]
    533a:	e7f8      	b.n	532e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    533c:	7e03      	ldrb	r3, [r0, #24]
    533e:	2220      	movs	r2, #32
    5340:	4313      	orrs	r3, r2
    5342:	7603      	strb	r3, [r0, #24]
    5344:	e7f3      	b.n	532e <tc_register_callback+0x1a>
	...

00005348 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    5348:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    534a:	0080      	lsls	r0, r0, #2
    534c:	4b16      	ldr	r3, [pc, #88]	; (53a8 <_tc_interrupt_handler+0x60>)
    534e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5350:	6823      	ldr	r3, [r4, #0]
    5352:	7b9d      	ldrb	r5, [r3, #14]
    5354:	7e22      	ldrb	r2, [r4, #24]
    5356:	7e63      	ldrb	r3, [r4, #25]
    5358:	4013      	ands	r3, r2
    535a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    535c:	07eb      	lsls	r3, r5, #31
    535e:	d406      	bmi.n	536e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    5360:	07ab      	lsls	r3, r5, #30
    5362:	d40b      	bmi.n	537c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    5364:	06eb      	lsls	r3, r5, #27
    5366:	d410      	bmi.n	538a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    5368:	06ab      	lsls	r3, r5, #26
    536a:	d415      	bmi.n	5398 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    536c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    536e:	0020      	movs	r0, r4
    5370:	68a3      	ldr	r3, [r4, #8]
    5372:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    5374:	2301      	movs	r3, #1
    5376:	6822      	ldr	r2, [r4, #0]
    5378:	7393      	strb	r3, [r2, #14]
    537a:	e7f1      	b.n	5360 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    537c:	0020      	movs	r0, r4
    537e:	68e3      	ldr	r3, [r4, #12]
    5380:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    5382:	2302      	movs	r3, #2
    5384:	6822      	ldr	r2, [r4, #0]
    5386:	7393      	strb	r3, [r2, #14]
    5388:	e7ec      	b.n	5364 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    538a:	0020      	movs	r0, r4
    538c:	6923      	ldr	r3, [r4, #16]
    538e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    5390:	2310      	movs	r3, #16
    5392:	6822      	ldr	r2, [r4, #0]
    5394:	7393      	strb	r3, [r2, #14]
    5396:	e7e7      	b.n	5368 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    5398:	0020      	movs	r0, r4
    539a:	6963      	ldr	r3, [r4, #20]
    539c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    539e:	6823      	ldr	r3, [r4, #0]
    53a0:	2220      	movs	r2, #32
    53a2:	739a      	strb	r2, [r3, #14]
}
    53a4:	e7e2      	b.n	536c <_tc_interrupt_handler+0x24>
    53a6:	46c0      	nop			; (mov r8, r8)
    53a8:	20000b44 	.word	0x20000b44

000053ac <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    53ac:	b510      	push	{r4, lr}
    53ae:	2000      	movs	r0, #0
    53b0:	4b01      	ldr	r3, [pc, #4]	; (53b8 <TC3_Handler+0xc>)
    53b2:	4798      	blx	r3
    53b4:	bd10      	pop	{r4, pc}
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	00005349 	.word	0x00005349

000053bc <TC4_Handler>:
    53bc:	b510      	push	{r4, lr}
    53be:	2001      	movs	r0, #1
    53c0:	4b01      	ldr	r3, [pc, #4]	; (53c8 <TC4_Handler+0xc>)
    53c2:	4798      	blx	r3
    53c4:	bd10      	pop	{r4, pc}
    53c6:	46c0      	nop			; (mov r8, r8)
    53c8:	00005349 	.word	0x00005349

000053cc <TC5_Handler>:
    53cc:	b510      	push	{r4, lr}
    53ce:	2002      	movs	r0, #2
    53d0:	4b01      	ldr	r3, [pc, #4]	; (53d8 <TC5_Handler+0xc>)
    53d2:	4798      	blx	r3
    53d4:	bd10      	pop	{r4, pc}
    53d6:	46c0      	nop			; (mov r8, r8)
    53d8:	00005349 	.word	0x00005349

000053dc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    53dc:	b530      	push	{r4, r5, lr}
    53de:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    53e0:	aa01      	add	r2, sp, #4
    53e2:	4b0b      	ldr	r3, [pc, #44]	; (5410 <_tc_get_inst_index+0x34>)
    53e4:	cb32      	ldmia	r3!, {r1, r4, r5}
    53e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    53e8:	9b01      	ldr	r3, [sp, #4]
    53ea:	4298      	cmp	r0, r3
    53ec:	d00d      	beq.n	540a <_tc_get_inst_index+0x2e>
    53ee:	9b02      	ldr	r3, [sp, #8]
    53f0:	4298      	cmp	r0, r3
    53f2:	d008      	beq.n	5406 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    53f4:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    53f6:	9a03      	ldr	r2, [sp, #12]
    53f8:	4282      	cmp	r2, r0
    53fa:	d002      	beq.n	5402 <_tc_get_inst_index+0x26>
}
    53fc:	0018      	movs	r0, r3
    53fe:	b005      	add	sp, #20
    5400:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5402:	3302      	adds	r3, #2
    5404:	e002      	b.n	540c <_tc_get_inst_index+0x30>
    5406:	2301      	movs	r3, #1
    5408:	e000      	b.n	540c <_tc_get_inst_index+0x30>
    540a:	2300      	movs	r3, #0
			return i;
    540c:	b2db      	uxtb	r3, r3
    540e:	e7f5      	b.n	53fc <_tc_get_inst_index+0x20>
    5410:	0000a294 	.word	0x0000a294

00005414 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5414:	b5f0      	push	{r4, r5, r6, r7, lr}
    5416:	b087      	sub	sp, #28
    5418:	0004      	movs	r4, r0
    541a:	000d      	movs	r5, r1
    541c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    541e:	0008      	movs	r0, r1
    5420:	4b85      	ldr	r3, [pc, #532]	; (5638 <tc_init+0x224>)
    5422:	4798      	blx	r3
    5424:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    5426:	ab05      	add	r3, sp, #20
    5428:	221b      	movs	r2, #27
    542a:	701a      	strb	r2, [r3, #0]
    542c:	3201      	adds	r2, #1
    542e:	705a      	strb	r2, [r3, #1]
    5430:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    5432:	ab03      	add	r3, sp, #12
    5434:	2280      	movs	r2, #128	; 0x80
    5436:	0112      	lsls	r2, r2, #4
    5438:	801a      	strh	r2, [r3, #0]
    543a:	2280      	movs	r2, #128	; 0x80
    543c:	0152      	lsls	r2, r2, #5
    543e:	805a      	strh	r2, [r3, #2]
    5440:	2280      	movs	r2, #128	; 0x80
    5442:	0192      	lsls	r2, r2, #6
    5444:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    5446:	2300      	movs	r3, #0
    5448:	60a3      	str	r3, [r4, #8]
    544a:	60e3      	str	r3, [r4, #12]
    544c:	6123      	str	r3, [r4, #16]
    544e:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    5450:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    5452:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    5454:	0082      	lsls	r2, r0, #2
    5456:	4b79      	ldr	r3, [pc, #484]	; (563c <tc_init+0x228>)
    5458:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    545a:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    545c:	78b3      	ldrb	r3, [r6, #2]
    545e:	2b08      	cmp	r3, #8
    5460:	d006      	beq.n	5470 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    5462:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5464:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5466:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5468:	07db      	lsls	r3, r3, #31
    546a:	d505      	bpl.n	5478 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    546c:	b007      	add	sp, #28
    546e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    5470:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5472:	07fa      	lsls	r2, r7, #31
    5474:	d5fa      	bpl.n	546c <tc_init+0x58>
    5476:	e7f4      	b.n	5462 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5478:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    547a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    547c:	06db      	lsls	r3, r3, #27
    547e:	d4f5      	bmi.n	546c <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5480:	882b      	ldrh	r3, [r5, #0]
    5482:	079b      	lsls	r3, r3, #30
    5484:	d4f2      	bmi.n	546c <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    5486:	7c33      	ldrb	r3, [r6, #16]
    5488:	2b00      	cmp	r3, #0
    548a:	d179      	bne.n	5580 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    548c:	7f33      	ldrb	r3, [r6, #28]
    548e:	2b00      	cmp	r3, #0
    5490:	d000      	beq.n	5494 <tc_init+0x80>
    5492:	e081      	b.n	5598 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    5494:	496a      	ldr	r1, [pc, #424]	; (5640 <tc_init+0x22c>)
    5496:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    5498:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    549a:	ab03      	add	r3, sp, #12
    549c:	5ad3      	ldrh	r3, [r2, r3]
    549e:	4303      	orrs	r3, r0
    54a0:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    54a2:	78b3      	ldrb	r3, [r6, #2]
    54a4:	2b08      	cmp	r3, #8
    54a6:	d100      	bne.n	54aa <tc_init+0x96>
    54a8:	e086      	b.n	55b8 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    54aa:	a901      	add	r1, sp, #4
    54ac:	7833      	ldrb	r3, [r6, #0]
    54ae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    54b0:	ab05      	add	r3, sp, #20
    54b2:	5ddf      	ldrb	r7, [r3, r7]
    54b4:	0038      	movs	r0, r7
    54b6:	4b63      	ldr	r3, [pc, #396]	; (5644 <tc_init+0x230>)
    54b8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    54ba:	0038      	movs	r0, r7
    54bc:	4b62      	ldr	r3, [pc, #392]	; (5648 <tc_init+0x234>)
    54be:	4798      	blx	r3
	ctrla_tmp =
    54c0:	8931      	ldrh	r1, [r6, #8]
    54c2:	88b3      	ldrh	r3, [r6, #4]
    54c4:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    54c6:	78b1      	ldrb	r1, [r6, #2]
    54c8:	79b2      	ldrb	r2, [r6, #6]
    54ca:	4311      	orrs	r1, r2
	ctrla_tmp =
    54cc:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    54ce:	7873      	ldrb	r3, [r6, #1]
    54d0:	2b00      	cmp	r3, #0
    54d2:	d002      	beq.n	54da <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    54d4:	2380      	movs	r3, #128	; 0x80
    54d6:	011b      	lsls	r3, r3, #4
    54d8:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    54da:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    54dc:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    54de:	b25b      	sxtb	r3, r3
    54e0:	2b00      	cmp	r3, #0
    54e2:	dbfb      	blt.n	54dc <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    54e4:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    54e6:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    54e8:	1e4b      	subs	r3, r1, #1
    54ea:	4199      	sbcs	r1, r3
    54ec:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    54ee:	7bb3      	ldrb	r3, [r6, #14]
    54f0:	2b00      	cmp	r3, #0
    54f2:	d001      	beq.n	54f8 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    54f4:	2301      	movs	r3, #1
    54f6:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    54f8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    54fa:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    54fc:	b25b      	sxtb	r3, r3
    54fe:	2b00      	cmp	r3, #0
    5500:	dbfb      	blt.n	54fa <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5502:	23ff      	movs	r3, #255	; 0xff
    5504:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    5506:	2900      	cmp	r1, #0
    5508:	d005      	beq.n	5516 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    550a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    550c:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    550e:	b25b      	sxtb	r3, r3
    5510:	2b00      	cmp	r3, #0
    5512:	dbfb      	blt.n	550c <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5514:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    5516:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    5518:	7af3      	ldrb	r3, [r6, #11]
    551a:	2b00      	cmp	r3, #0
    551c:	d001      	beq.n	5522 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    551e:	2310      	movs	r3, #16
    5520:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    5522:	7b33      	ldrb	r3, [r6, #12]
    5524:	2b00      	cmp	r3, #0
    5526:	d001      	beq.n	552c <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    5528:	2320      	movs	r3, #32
    552a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    552c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    552e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    5530:	b25b      	sxtb	r3, r3
    5532:	2b00      	cmp	r3, #0
    5534:	dbfb      	blt.n	552e <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    5536:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5538:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    553a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    553c:	b25b      	sxtb	r3, r3
    553e:	2b00      	cmp	r3, #0
    5540:	dbfb      	blt.n	553a <tc_init+0x126>
	switch (module_inst->counter_size) {
    5542:	7923      	ldrb	r3, [r4, #4]
    5544:	2b04      	cmp	r3, #4
    5546:	d03f      	beq.n	55c8 <tc_init+0x1b4>
    5548:	2b08      	cmp	r3, #8
    554a:	d05e      	beq.n	560a <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    554c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    554e:	2b00      	cmp	r3, #0
    5550:	d000      	beq.n	5554 <tc_init+0x140>
    5552:	e78b      	b.n	546c <tc_init+0x58>
    5554:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5556:	b25b      	sxtb	r3, r3
    5558:	2b00      	cmp	r3, #0
    555a:	dbfb      	blt.n	5554 <tc_init+0x140>
				= config->counter_16_bit.value;
    555c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    555e:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5560:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5562:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5564:	b25b      	sxtb	r3, r3
    5566:	2b00      	cmp	r3, #0
    5568:	dbfb      	blt.n	5562 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    556a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    556c:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    556e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5570:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5572:	b25b      	sxtb	r3, r3
    5574:	2b00      	cmp	r3, #0
    5576:	dbfb      	blt.n	5570 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    5578:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    557a:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    557c:	2000      	movs	r0, #0
    557e:	e775      	b.n	546c <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5580:	a902      	add	r1, sp, #8
    5582:	2301      	movs	r3, #1
    5584:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    5586:	2200      	movs	r2, #0
    5588:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    558a:	7e32      	ldrb	r2, [r6, #24]
    558c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    558e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    5590:	7d30      	ldrb	r0, [r6, #20]
    5592:	4b2e      	ldr	r3, [pc, #184]	; (564c <tc_init+0x238>)
    5594:	4798      	blx	r3
    5596:	e779      	b.n	548c <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5598:	a902      	add	r1, sp, #8
    559a:	2301      	movs	r3, #1
    559c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    559e:	2200      	movs	r2, #0
    55a0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    55a2:	3224      	adds	r2, #36	; 0x24
    55a4:	18b2      	adds	r2, r6, r2
    55a6:	7812      	ldrb	r2, [r2, #0]
    55a8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    55aa:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    55ac:	331f      	adds	r3, #31
    55ae:	18f3      	adds	r3, r6, r3
    55b0:	7818      	ldrb	r0, [r3, #0]
    55b2:	4b26      	ldr	r3, [pc, #152]	; (564c <tc_init+0x238>)
    55b4:	4798      	blx	r3
    55b6:	e76d      	b.n	5494 <tc_init+0x80>
    55b8:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    55ba:	1c7a      	adds	r2, r7, #1
    55bc:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    55be:	ab03      	add	r3, sp, #12
    55c0:	5ad3      	ldrh	r3, [r2, r3]
    55c2:	4303      	orrs	r3, r0
    55c4:	620b      	str	r3, [r1, #32]
    55c6:	e770      	b.n	54aa <tc_init+0x96>
    55c8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    55ca:	b25b      	sxtb	r3, r3
    55cc:	2b00      	cmp	r3, #0
    55ce:	dbfb      	blt.n	55c8 <tc_init+0x1b4>
					config->counter_8_bit.value;
    55d0:	2328      	movs	r3, #40	; 0x28
    55d2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    55d4:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    55d6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    55d8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    55da:	b25b      	sxtb	r3, r3
    55dc:	2b00      	cmp	r3, #0
    55de:	dbfb      	blt.n	55d8 <tc_init+0x1c4>
					config->counter_8_bit.period;
    55e0:	2329      	movs	r3, #41	; 0x29
    55e2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    55e4:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    55e6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    55e8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    55ea:	b25b      	sxtb	r3, r3
    55ec:	2b00      	cmp	r3, #0
    55ee:	dbfb      	blt.n	55e8 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    55f0:	232a      	movs	r3, #42	; 0x2a
    55f2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    55f4:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    55f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    55f8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    55fa:	b25b      	sxtb	r3, r3
    55fc:	2b00      	cmp	r3, #0
    55fe:	dbfb      	blt.n	55f8 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    5600:	232b      	movs	r3, #43	; 0x2b
    5602:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    5604:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    5606:	2000      	movs	r0, #0
    5608:	e730      	b.n	546c <tc_init+0x58>
    560a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    560c:	b25b      	sxtb	r3, r3
    560e:	2b00      	cmp	r3, #0
    5610:	dbfb      	blt.n	560a <tc_init+0x1f6>
				= config->counter_32_bit.value;
    5612:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5614:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5616:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5618:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    561a:	b25b      	sxtb	r3, r3
    561c:	2b00      	cmp	r3, #0
    561e:	dbfb      	blt.n	5618 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    5620:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    5622:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5624:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5626:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5628:	b25b      	sxtb	r3, r3
    562a:	2b00      	cmp	r3, #0
    562c:	dbfb      	blt.n	5626 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    562e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5630:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    5632:	2000      	movs	r0, #0
    5634:	e71a      	b.n	546c <tc_init+0x58>
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	000053dd 	.word	0x000053dd
    563c:	20000b44 	.word	0x20000b44
    5640:	40000400 	.word	0x40000400
    5644:	000051c5 	.word	0x000051c5
    5648:	00005139 	.word	0x00005139
    564c:	000052bd 	.word	0x000052bd

00005650 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5650:	6802      	ldr	r2, [r0, #0]
    5652:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    5654:	b25b      	sxtb	r3, r3
    5656:	2b00      	cmp	r3, #0
    5658:	dbfb      	blt.n	5652 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    565a:	7903      	ldrb	r3, [r0, #4]
    565c:	2b04      	cmp	r3, #4
    565e:	d005      	beq.n	566c <tc_get_count_value+0x1c>
    5660:	2b08      	cmp	r3, #8
    5662:	d009      	beq.n	5678 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    5664:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    5666:	2b00      	cmp	r3, #0
    5668:	d003      	beq.n	5672 <tc_get_count_value+0x22>
}
    566a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    566c:	7c10      	ldrb	r0, [r2, #16]
    566e:	b2c0      	uxtb	r0, r0
    5670:	e7fb      	b.n	566a <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5672:	8a10      	ldrh	r0, [r2, #16]
    5674:	b280      	uxth	r0, r0
    5676:	e7f8      	b.n	566a <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    5678:	6910      	ldr	r0, [r2, #16]
    567a:	e7f6      	b.n	566a <tc_get_count_value+0x1a>

0000567c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    567c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    567e:	6804      	ldr	r4, [r0, #0]
    5680:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    5682:	b25b      	sxtb	r3, r3
    5684:	2b00      	cmp	r3, #0
    5686:	dbfb      	blt.n	5680 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    5688:	7903      	ldrb	r3, [r0, #4]
    568a:	2b04      	cmp	r3, #4
    568c:	d005      	beq.n	569a <tc_set_compare_value+0x1e>
    568e:	2b08      	cmp	r3, #8
    5690:	d014      	beq.n	56bc <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    5692:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    5694:	2b00      	cmp	r3, #0
    5696:	d008      	beq.n	56aa <tc_set_compare_value+0x2e>
}
    5698:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    569a:	2017      	movs	r0, #23
			if (channel_index <
    569c:	2901      	cmp	r1, #1
    569e:	d8fb      	bhi.n	5698 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    56a0:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    56a2:	1861      	adds	r1, r4, r1
    56a4:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    56a6:	2000      	movs	r0, #0
    56a8:	e7f6      	b.n	5698 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    56aa:	2017      	movs	r0, #23
			if (channel_index <
    56ac:	2901      	cmp	r1, #1
    56ae:	d8f3      	bhi.n	5698 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    56b0:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    56b2:	310c      	adds	r1, #12
    56b4:	0049      	lsls	r1, r1, #1
    56b6:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    56b8:	2000      	movs	r0, #0
    56ba:	e7ed      	b.n	5698 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    56bc:	2017      	movs	r0, #23
			if (channel_index <
    56be:	2901      	cmp	r1, #1
    56c0:	d8ea      	bhi.n	5698 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    56c2:	3106      	adds	r1, #6
    56c4:	0089      	lsls	r1, r1, #2
    56c6:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    56c8:	2000      	movs	r0, #0
    56ca:	e7e5      	b.n	5698 <tc_set_compare_value+0x1c>

000056cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    56cc:	e7fe      	b.n	56cc <Dummy_Handler>
	...

000056d0 <Reset_Handler>:
{
    56d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    56d2:	4a2a      	ldr	r2, [pc, #168]	; (577c <Reset_Handler+0xac>)
    56d4:	4b2a      	ldr	r3, [pc, #168]	; (5780 <Reset_Handler+0xb0>)
    56d6:	429a      	cmp	r2, r3
    56d8:	d011      	beq.n	56fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    56da:	001a      	movs	r2, r3
    56dc:	4b29      	ldr	r3, [pc, #164]	; (5784 <Reset_Handler+0xb4>)
    56de:	429a      	cmp	r2, r3
    56e0:	d20d      	bcs.n	56fe <Reset_Handler+0x2e>
    56e2:	4a29      	ldr	r2, [pc, #164]	; (5788 <Reset_Handler+0xb8>)
    56e4:	3303      	adds	r3, #3
    56e6:	1a9b      	subs	r3, r3, r2
    56e8:	089b      	lsrs	r3, r3, #2
    56ea:	3301      	adds	r3, #1
    56ec:	009b      	lsls	r3, r3, #2
    56ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    56f0:	4823      	ldr	r0, [pc, #140]	; (5780 <Reset_Handler+0xb0>)
    56f2:	4922      	ldr	r1, [pc, #136]	; (577c <Reset_Handler+0xac>)
    56f4:	588c      	ldr	r4, [r1, r2]
    56f6:	5084      	str	r4, [r0, r2]
    56f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    56fa:	429a      	cmp	r2, r3
    56fc:	d1fa      	bne.n	56f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    56fe:	4a23      	ldr	r2, [pc, #140]	; (578c <Reset_Handler+0xbc>)
    5700:	4b23      	ldr	r3, [pc, #140]	; (5790 <Reset_Handler+0xc0>)
    5702:	429a      	cmp	r2, r3
    5704:	d20a      	bcs.n	571c <Reset_Handler+0x4c>
    5706:	43d3      	mvns	r3, r2
    5708:	4921      	ldr	r1, [pc, #132]	; (5790 <Reset_Handler+0xc0>)
    570a:	185b      	adds	r3, r3, r1
    570c:	2103      	movs	r1, #3
    570e:	438b      	bics	r3, r1
    5710:	3304      	adds	r3, #4
    5712:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5714:	2100      	movs	r1, #0
    5716:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5718:	4293      	cmp	r3, r2
    571a:	d1fc      	bne.n	5716 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    571c:	4a1d      	ldr	r2, [pc, #116]	; (5794 <Reset_Handler+0xc4>)
    571e:	21ff      	movs	r1, #255	; 0xff
    5720:	4b1d      	ldr	r3, [pc, #116]	; (5798 <Reset_Handler+0xc8>)
    5722:	438b      	bics	r3, r1
    5724:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5726:	39fd      	subs	r1, #253	; 0xfd
    5728:	2390      	movs	r3, #144	; 0x90
    572a:	005b      	lsls	r3, r3, #1
    572c:	4a1b      	ldr	r2, [pc, #108]	; (579c <Reset_Handler+0xcc>)
    572e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5730:	4a1b      	ldr	r2, [pc, #108]	; (57a0 <Reset_Handler+0xd0>)
    5732:	78d3      	ldrb	r3, [r2, #3]
    5734:	2503      	movs	r5, #3
    5736:	43ab      	bics	r3, r5
    5738:	2402      	movs	r4, #2
    573a:	4323      	orrs	r3, r4
    573c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    573e:	78d3      	ldrb	r3, [r2, #3]
    5740:	270c      	movs	r7, #12
    5742:	43bb      	bics	r3, r7
    5744:	2608      	movs	r6, #8
    5746:	4333      	orrs	r3, r6
    5748:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    574a:	4b16      	ldr	r3, [pc, #88]	; (57a4 <Reset_Handler+0xd4>)
    574c:	7b98      	ldrb	r0, [r3, #14]
    574e:	2230      	movs	r2, #48	; 0x30
    5750:	4390      	bics	r0, r2
    5752:	2220      	movs	r2, #32
    5754:	4310      	orrs	r0, r2
    5756:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5758:	7b99      	ldrb	r1, [r3, #14]
    575a:	43b9      	bics	r1, r7
    575c:	4331      	orrs	r1, r6
    575e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5760:	7b9a      	ldrb	r2, [r3, #14]
    5762:	43aa      	bics	r2, r5
    5764:	4322      	orrs	r2, r4
    5766:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    5768:	4a0f      	ldr	r2, [pc, #60]	; (57a8 <Reset_Handler+0xd8>)
    576a:	6853      	ldr	r3, [r2, #4]
    576c:	2180      	movs	r1, #128	; 0x80
    576e:	430b      	orrs	r3, r1
    5770:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    5772:	4b0e      	ldr	r3, [pc, #56]	; (57ac <Reset_Handler+0xdc>)
    5774:	4798      	blx	r3
        main();
    5776:	4b0e      	ldr	r3, [pc, #56]	; (57b0 <Reset_Handler+0xe0>)
    5778:	4798      	blx	r3
    577a:	e7fe      	b.n	577a <Reset_Handler+0xaa>
    577c:	0000a8a4 	.word	0x0000a8a4
    5780:	20000000 	.word	0x20000000
    5784:	20000074 	.word	0x20000074
    5788:	20000004 	.word	0x20000004
    578c:	20000074 	.word	0x20000074
    5790:	20000cd4 	.word	0x20000cd4
    5794:	e000ed00 	.word	0xe000ed00
    5798:	00000000 	.word	0x00000000
    579c:	41007000 	.word	0x41007000
    57a0:	41005000 	.word	0x41005000
    57a4:	41004800 	.word	0x41004800
    57a8:	41004000 	.word	0x41004000
    57ac:	00008121 	.word	0x00008121
    57b0:	00007921 	.word	0x00007921

000057b4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    57b4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    57b6:	4a06      	ldr	r2, [pc, #24]	; (57d0 <_sbrk+0x1c>)
    57b8:	6812      	ldr	r2, [r2, #0]
    57ba:	2a00      	cmp	r2, #0
    57bc:	d004      	beq.n	57c8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    57be:	4a04      	ldr	r2, [pc, #16]	; (57d0 <_sbrk+0x1c>)
    57c0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    57c2:	18c3      	adds	r3, r0, r3
    57c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    57c6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    57c8:	4902      	ldr	r1, [pc, #8]	; (57d4 <_sbrk+0x20>)
    57ca:	4a01      	ldr	r2, [pc, #4]	; (57d0 <_sbrk+0x1c>)
    57cc:	6011      	str	r1, [r2, #0]
    57ce:	e7f6      	b.n	57be <_sbrk+0xa>
    57d0:	200001c0 	.word	0x200001c0
    57d4:	20002cd8 	.word	0x20002cd8

000057d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    57d8:	2001      	movs	r0, #1
    57da:	4240      	negs	r0, r0
    57dc:	4770      	bx	lr

000057de <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    57de:	2380      	movs	r3, #128	; 0x80
    57e0:	019b      	lsls	r3, r3, #6
    57e2:	604b      	str	r3, [r1, #4]

	return 0;
}
    57e4:	2000      	movs	r0, #0
    57e6:	4770      	bx	lr

000057e8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    57e8:	2001      	movs	r0, #1
    57ea:	4770      	bx	lr

000057ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    57ec:	2000      	movs	r0, #0
    57ee:	4770      	bx	lr

000057f0 <hw_expiry_cb>:
	#endif
}

void hw_expiry_cb(void)
{
	if (running_timers > 0) {
    57f0:	4b03      	ldr	r3, [pc, #12]	; (5800 <hw_expiry_cb+0x10>)
    57f2:	781b      	ldrb	r3, [r3, #0]
    57f4:	2b00      	cmp	r3, #0
    57f6:	d002      	beq.n	57fe <hw_expiry_cb+0xe>
		timer_trigger = true;
    57f8:	2201      	movs	r2, #1
    57fa:	4b02      	ldr	r3, [pc, #8]	; (5804 <hw_expiry_cb+0x14>)
    57fc:	701a      	strb	r2, [r3, #0]
			sw_timer_service();
		}

	#endif
	}
}
    57fe:	4770      	bx	lr
    5800:	200001d4 	.word	0x200001d4
    5804:	20000ba4 	.word	0x20000ba4

00005808 <hw_overflow_cb>:
{
    5808:	b510      	push	{r4, lr}
    580a:	b082      	sub	sp, #8
	sys_time++;
    580c:	4a1c      	ldr	r2, [pc, #112]	; (5880 <hw_overflow_cb+0x78>)
    580e:	8813      	ldrh	r3, [r2, #0]
    5810:	3301      	adds	r3, #1
    5812:	b29b      	uxth	r3, r3
    5814:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5816:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    581a:	425a      	negs	r2, r3
    581c:	4153      	adcs	r3, r2
    581e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5820:	b672      	cpsid	i
    5822:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5826:	2200      	movs	r2, #0
    5828:	4b16      	ldr	r3, [pc, #88]	; (5884 <hw_overflow_cb+0x7c>)
    582a:	701a      	strb	r2, [r3, #0]
	return flags;
    582c:	9c01      	ldr	r4, [sp, #4]
	if (NO_TIMER != running_timer_queue_head &&
    582e:	4b16      	ldr	r3, [pc, #88]	; (5888 <hw_overflow_cb+0x80>)
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	2bff      	cmp	r3, #255	; 0xff
    5834:	d00d      	beq.n	5852 <hw_overflow_cb+0x4a>
			!timer_array[running_timer_queue_head].loaded) {
    5836:	0119      	lsls	r1, r3, #4
    5838:	4a14      	ldr	r2, [pc, #80]	; (588c <hw_overflow_cb+0x84>)
    583a:	1852      	adds	r2, r2, r1
	if (NO_TIMER != running_timer_queue_head &&
    583c:	7b52      	ldrb	r2, [r2, #13]
    583e:	2a00      	cmp	r2, #0
    5840:	d107      	bne.n	5852 <hw_overflow_cb+0x4a>
		timeout = timer_array[running_timer_queue_head].abs_exp_timer;
    5842:	4a12      	ldr	r2, [pc, #72]	; (588c <hw_overflow_cb+0x84>)
    5844:	5888      	ldr	r0, [r1, r2]
		if (timeout_high == sys_time) {
    5846:	4b0e      	ldr	r3, [pc, #56]	; (5880 <hw_overflow_cb+0x78>)
    5848:	881b      	ldrh	r3, [r3, #0]
    584a:	b29b      	uxth	r3, r3
    584c:	0c02      	lsrs	r2, r0, #16
    584e:	429a      	cmp	r2, r3
    5850:	d00a      	beq.n	5868 <hw_overflow_cb+0x60>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    5852:	23ff      	movs	r3, #255	; 0xff
    5854:	4223      	tst	r3, r4
    5856:	d005      	beq.n	5864 <hw_overflow_cb+0x5c>
		cpu_irq_enable();
    5858:	2201      	movs	r2, #1
    585a:	4b0a      	ldr	r3, [pc, #40]	; (5884 <hw_overflow_cb+0x7c>)
    585c:	701a      	strb	r2, [r3, #0]
    585e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5862:	b662      	cpsie	i
}
    5864:	b002      	add	sp, #8
    5866:	bd10      	pop	{r4, pc}
			common_tc_delay((uint16_t)timeout_low);
    5868:	b280      	uxth	r0, r0
    586a:	4b09      	ldr	r3, [pc, #36]	; (5890 <hw_overflow_cb+0x88>)
    586c:	4798      	blx	r3
			timer_array[running_timer_queue_head].loaded = true;
    586e:	4b06      	ldr	r3, [pc, #24]	; (5888 <hw_overflow_cb+0x80>)
    5870:	681a      	ldr	r2, [r3, #0]
    5872:	0112      	lsls	r2, r2, #4
    5874:	4b05      	ldr	r3, [pc, #20]	; (588c <hw_overflow_cb+0x84>)
    5876:	189b      	adds	r3, r3, r2
    5878:	2201      	movs	r2, #1
    587a:	735a      	strb	r2, [r3, #13]
    587c:	e7e9      	b.n	5852 <hw_overflow_cb+0x4a>
    587e:	46c0      	nop			; (mov r8, r8)
    5880:	20000b50 	.word	0x20000b50
    5884:	2000000c 	.word	0x2000000c
    5888:	200001d0 	.word	0x200001d0
    588c:	20000b54 	.word	0x20000b54
    5890:	00007cd9 	.word	0x00007cd9

00005894 <load_hw_timer>:
{
    5894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5896:	0006      	movs	r6, r0
	if (NO_TIMER != timer_id) {
    5898:	28ff      	cmp	r0, #255	; 0xff
    589a:	d027      	beq.n	58ec <load_hw_timer+0x58>
		current_sys_time = sys_time;
    589c:	4d15      	ldr	r5, [pc, #84]	; (58f4 <load_hw_timer+0x60>)
		current_time = current_time | common_tc_read_count();
    589e:	4f16      	ldr	r7, [pc, #88]	; (58f8 <load_hw_timer+0x64>)
		current_sys_time = sys_time;
    58a0:	882c      	ldrh	r4, [r5, #0]
    58a2:	b2a4      	uxth	r4, r4
		current_time = current_time | common_tc_read_count();
    58a4:	47b8      	blx	r7
	} while (current_sys_time != sys_time);
    58a6:	882b      	ldrh	r3, [r5, #0]
    58a8:	b29b      	uxth	r3, r3
    58aa:	429c      	cmp	r4, r3
    58ac:	d1f8      	bne.n	58a0 <load_hw_timer+0xc>
		current_time = current_time << 16;
    58ae:	0424      	lsls	r4, r4, #16
		uint32_t point_in_time = timer_array[timer_id].abs_exp_timer;
    58b0:	0133      	lsls	r3, r6, #4
		current_time = current_time | common_tc_read_count();
    58b2:	4320      	orrs	r0, r4
	return ((t2 - t1) < INT32_MAX);
    58b4:	4a11      	ldr	r2, [pc, #68]	; (58fc <load_hw_timer+0x68>)
    58b6:	589c      	ldr	r4, [r3, r2]
    58b8:	1a20      	subs	r0, r4, r0
		if (compare_time(now, point_in_time)) {
    58ba:	4b11      	ldr	r3, [pc, #68]	; (5900 <load_hw_timer+0x6c>)
    58bc:	4298      	cmp	r0, r3
    58be:	d811      	bhi.n	58e4 <load_hw_timer+0x50>
			if (!timer_array[timer_id].loaded) {
    58c0:	0132      	lsls	r2, r6, #4
    58c2:	4b0e      	ldr	r3, [pc, #56]	; (58fc <load_hw_timer+0x68>)
    58c4:	189b      	adds	r3, r3, r2
    58c6:	7b5b      	ldrb	r3, [r3, #13]
    58c8:	2b00      	cmp	r3, #0
    58ca:	d10e      	bne.n	58ea <load_hw_timer+0x56>
				if (timediff <= UINT16_MAX) {
    58cc:	4b0d      	ldr	r3, [pc, #52]	; (5904 <load_hw_timer+0x70>)
    58ce:	4298      	cmp	r0, r3
    58d0:	d80b      	bhi.n	58ea <load_hw_timer+0x56>
					common_tc_delay(timediff);
    58d2:	b280      	uxth	r0, r0
    58d4:	4b0c      	ldr	r3, [pc, #48]	; (5908 <load_hw_timer+0x74>)
    58d6:	4798      	blx	r3
					timer_array[timer_id].loaded = true;
    58d8:	0136      	lsls	r6, r6, #4
    58da:	4b08      	ldr	r3, [pc, #32]	; (58fc <load_hw_timer+0x68>)
    58dc:	199e      	adds	r6, r3, r6
    58de:	2301      	movs	r3, #1
    58e0:	7373      	strb	r3, [r6, #13]
    58e2:	e002      	b.n	58ea <load_hw_timer+0x56>
			timer_trigger = true;
    58e4:	2201      	movs	r2, #1
    58e6:	4b09      	ldr	r3, [pc, #36]	; (590c <load_hw_timer+0x78>)
    58e8:	701a      	strb	r2, [r3, #0]
}
    58ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		common_tc_compare_stop();
    58ec:	4b08      	ldr	r3, [pc, #32]	; (5910 <load_hw_timer+0x7c>)
    58ee:	4798      	blx	r3
}
    58f0:	e7fb      	b.n	58ea <load_hw_timer+0x56>
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	20000b50 	.word	0x20000b50
    58f8:	00007c65 	.word	0x00007c65
    58fc:	20000b54 	.word	0x20000b54
    5900:	7ffffffe 	.word	0x7ffffffe
    5904:	0000ffff 	.word	0x0000ffff
    5908:	00007cd9 	.word	0x00007cd9
    590c:	20000ba4 	.word	0x20000ba4
    5910:	00007cb1 	.word	0x00007cb1

00005914 <internal_timer_handler>:
{
    5914:	b510      	push	{r4, lr}
	if (timer_trigger) {
    5916:	4b1d      	ldr	r3, [pc, #116]	; (598c <internal_timer_handler+0x78>)
    5918:	781b      	ldrb	r3, [r3, #0]
    591a:	2b00      	cmp	r3, #0
    591c:	d027      	beq.n	596e <internal_timer_handler+0x5a>
		timer_trigger = false;
    591e:	2200      	movs	r2, #0
    5920:	4b1a      	ldr	r3, [pc, #104]	; (598c <internal_timer_handler+0x78>)
    5922:	701a      	strb	r2, [r3, #0]
		if (running_timers > 0) { /* Holds the number of running timers
    5924:	4b1a      	ldr	r3, [pc, #104]	; (5990 <internal_timer_handler+0x7c>)
    5926:	781b      	ldrb	r3, [r3, #0]
    5928:	2b00      	cmp	r3, #0
    592a:	d020      	beq.n	596e <internal_timer_handler+0x5a>
			if ((expired_timer_queue_head == NO_TIMER) &&
    592c:	4b19      	ldr	r3, [pc, #100]	; (5994 <internal_timer_handler+0x80>)
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	2bff      	cmp	r3, #255	; 0xff
    5932:	d01d      	beq.n	5970 <internal_timer_handler+0x5c>
					= running_timer_queue_head;
    5934:	4b18      	ldr	r3, [pc, #96]	; (5998 <internal_timer_handler+0x84>)
    5936:	6818      	ldr	r0, [r3, #0]
				timer_array[expired_timer_queue_tail].
    5938:	4918      	ldr	r1, [pc, #96]	; (599c <internal_timer_handler+0x88>)
					= running_timer_queue_head;
    593a:	680b      	ldr	r3, [r1, #0]
    593c:	011a      	lsls	r2, r3, #4
    593e:	4b18      	ldr	r3, [pc, #96]	; (59a0 <internal_timer_handler+0x8c>)
    5940:	189b      	adds	r3, r3, r2
    5942:	7318      	strb	r0, [r3, #12]
					= running_timer_queue_head;
    5944:	6008      	str	r0, [r1, #0]
				= timer_array[running_timer_queue_head].
    5946:	4a16      	ldr	r2, [pc, #88]	; (59a0 <internal_timer_handler+0x8c>)
    5948:	4913      	ldr	r1, [pc, #76]	; (5998 <internal_timer_handler+0x84>)
    594a:	680b      	ldr	r3, [r1, #0]
    594c:	011b      	lsls	r3, r3, #4
    594e:	18d3      	adds	r3, r2, r3
    5950:	7b18      	ldrb	r0, [r3, #12]
    5952:	6008      	str	r0, [r1, #0]
			timer_array[expired_timer_queue_tail].
    5954:	4b11      	ldr	r3, [pc, #68]	; (599c <internal_timer_handler+0x88>)
				= NO_TIMER;
    5956:	681b      	ldr	r3, [r3, #0]
    5958:	011b      	lsls	r3, r3, #4
    595a:	18d2      	adds	r2, r2, r3
    595c:	23ff      	movs	r3, #255	; 0xff
    595e:	7313      	strb	r3, [r2, #12]
			if ((--running_timers) > 0) {
    5960:	4a0b      	ldr	r2, [pc, #44]	; (5990 <internal_timer_handler+0x7c>)
    5962:	7813      	ldrb	r3, [r2, #0]
    5964:	3b01      	subs	r3, #1
    5966:	b2db      	uxtb	r3, r3
    5968:	7013      	strb	r3, [r2, #0]
    596a:	2b00      	cmp	r3, #0
    596c:	d10b      	bne.n	5986 <internal_timer_handler+0x72>
}
    596e:	bd10      	pop	{r4, pc}
					(expired_timer_queue_tail ==
    5970:	4b0a      	ldr	r3, [pc, #40]	; (599c <internal_timer_handler+0x88>)
			if ((expired_timer_queue_head == NO_TIMER) &&
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	2bff      	cmp	r3, #255	; 0xff
    5976:	d1dd      	bne.n	5934 <internal_timer_handler+0x20>
							=
    5978:	4b07      	ldr	r3, [pc, #28]	; (5998 <internal_timer_handler+0x84>)
    597a:	681b      	ldr	r3, [r3, #0]
    597c:	4a07      	ldr	r2, [pc, #28]	; (599c <internal_timer_handler+0x88>)
    597e:	6013      	str	r3, [r2, #0]
					= expired_timer_queue_tail
    5980:	4a04      	ldr	r2, [pc, #16]	; (5994 <internal_timer_handler+0x80>)
    5982:	6013      	str	r3, [r2, #0]
    5984:	e7df      	b.n	5946 <internal_timer_handler+0x32>
				load_hw_timer(running_timer_queue_head);
    5986:	4b07      	ldr	r3, [pc, #28]	; (59a4 <internal_timer_handler+0x90>)
    5988:	4798      	blx	r3
}
    598a:	e7f0      	b.n	596e <internal_timer_handler+0x5a>
    598c:	20000ba4 	.word	0x20000ba4
    5990:	200001d4 	.word	0x200001d4
    5994:	200001c8 	.word	0x200001c8
    5998:	200001d0 	.word	0x200001d0
    599c:	200001cc 	.word	0x200001cc
    59a0:	20000b54 	.word	0x20000b54
    59a4:	00005895 	.word	0x00005895

000059a8 <sw_timer_get_time>:
{
    59a8:	b570      	push	{r4, r5, r6, lr}
		current_sys_time = sys_time;
    59aa:	4d06      	ldr	r5, [pc, #24]	; (59c4 <sw_timer_get_time+0x1c>)
		current_time = current_time | common_tc_read_count();
    59ac:	4e06      	ldr	r6, [pc, #24]	; (59c8 <sw_timer_get_time+0x20>)
		current_sys_time = sys_time;
    59ae:	882c      	ldrh	r4, [r5, #0]
    59b0:	b2a4      	uxth	r4, r4
		current_time = current_time | common_tc_read_count();
    59b2:	47b0      	blx	r6
	} while (current_sys_time != sys_time);
    59b4:	882b      	ldrh	r3, [r5, #0]
    59b6:	b29b      	uxth	r3, r3
    59b8:	429c      	cmp	r4, r3
    59ba:	d1f8      	bne.n	59ae <sw_timer_get_time+0x6>
		current_time = current_time << 16;
    59bc:	0424      	lsls	r4, r4, #16
		current_time = current_time | common_tc_read_count();
    59be:	4320      	orrs	r0, r4
}
    59c0:	bd70      	pop	{r4, r5, r6, pc}
    59c2:	46c0      	nop			; (mov r8, r8)
    59c4:	20000b50 	.word	0x20000b50
    59c8:	00007c65 	.word	0x00007c65

000059cc <sw_timer_init>:

#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */

void sw_timer_init(void)
{
    59cc:	b510      	push	{r4, lr}
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
    59ce:	2300      	movs	r3, #0
    59d0:	4a11      	ldr	r2, [pc, #68]	; (5a18 <sw_timer_init+0x4c>)
    59d2:	7013      	strb	r3, [r2, #0]
	timer_trigger = false;
    59d4:	4a11      	ldr	r2, [pc, #68]	; (5a1c <sw_timer_init+0x50>)
    59d6:	7013      	strb	r3, [r2, #0]
	sys_time = 0;
    59d8:	4a11      	ldr	r2, [pc, #68]	; (5a20 <sw_timer_init+0x54>)
    59da:	8013      	strh	r3, [r2, #0]

	running_timer_queue_head = NO_TIMER;
    59dc:	33ff      	adds	r3, #255	; 0xff
    59de:	4a11      	ldr	r2, [pc, #68]	; (5a24 <sw_timer_init+0x58>)
    59e0:	6013      	str	r3, [r2, #0]
	expired_timer_queue_head = NO_TIMER;
    59e2:	4a11      	ldr	r2, [pc, #68]	; (5a28 <sw_timer_init+0x5c>)
    59e4:	6013      	str	r3, [r2, #0]
	expired_timer_queue_tail = NO_TIMER;
    59e6:	4a11      	ldr	r2, [pc, #68]	; (5a2c <sw_timer_init+0x60>)
    59e8:	6013      	str	r3, [r2, #0]
    59ea:	4b11      	ldr	r3, [pc, #68]	; (5a30 <sw_timer_init+0x64>)
    59ec:	0018      	movs	r0, r3
    59ee:	3050      	adds	r0, #80	; 0x50

	for(index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) 
	{
		timer_array[index].next_timer_in_queue = NO_TIMER;
    59f0:	21ff      	movs	r1, #255	; 0xff
		timer_array[index].timer_cb = NULL;
    59f2:	2200      	movs	r2, #0
		timer_array[index].next_timer_in_queue = NO_TIMER;
    59f4:	7319      	strb	r1, [r3, #12]
		timer_array[index].timer_cb = NULL;
    59f6:	605a      	str	r2, [r3, #4]
    59f8:	3310      	adds	r3, #16
	for(index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) 
    59fa:	4283      	cmp	r3, r0
    59fc:	d1fa      	bne.n	59f4 <sw_timer_init+0x28>
	}

	alloc_timer_id = 0;
    59fe:	2200      	movs	r2, #0
    5a00:	4b0c      	ldr	r3, [pc, #48]	; (5a34 <sw_timer_init+0x68>)
    5a02:	701a      	strb	r2, [r3, #0]
	set_common_tc_overflow_callback(hw_overflow_cb);
    5a04:	480c      	ldr	r0, [pc, #48]	; (5a38 <sw_timer_init+0x6c>)
    5a06:	4b0d      	ldr	r3, [pc, #52]	; (5a3c <sw_timer_init+0x70>)
    5a08:	4798      	blx	r3
	set_common_tc_expiry_callback(hw_expiry_cb);
    5a0a:	480d      	ldr	r0, [pc, #52]	; (5a40 <sw_timer_init+0x74>)
    5a0c:	4b0d      	ldr	r3, [pc, #52]	; (5a44 <sw_timer_init+0x78>)
    5a0e:	4798      	blx	r3
	common_tc_init();
    5a10:	4b0d      	ldr	r3, [pc, #52]	; (5a48 <sw_timer_init+0x7c>)
    5a12:	4798      	blx	r3
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
    5a14:	bd10      	pop	{r4, pc}
    5a16:	46c0      	nop			; (mov r8, r8)
    5a18:	200001d4 	.word	0x200001d4
    5a1c:	20000ba4 	.word	0x20000ba4
    5a20:	20000b50 	.word	0x20000b50
    5a24:	200001d0 	.word	0x200001d0
    5a28:	200001c8 	.word	0x200001c8
    5a2c:	200001cc 	.word	0x200001cc
    5a30:	20000b54 	.word	0x20000b54
    5a34:	200001c4 	.word	0x200001c4
    5a38:	00005809 	.word	0x00005809
    5a3c:	00007dc9 	.word	0x00007dc9
    5a40:	000057f1 	.word	0x000057f1
    5a44:	00007dd5 	.word	0x00007dd5
    5a48:	00007d45 	.word	0x00007d45

00005a4c <sw_timer_service>:

void sw_timer_service(void)
{
    5a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a4e:	46de      	mov	lr, fp
    5a50:	4657      	mov	r7, sl
    5a52:	464e      	mov	r6, r9
    5a54:	4645      	mov	r5, r8
    5a56:	b5e0      	push	{r5, r6, r7, lr}
    5a58:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5a5a:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5a5e:	4253      	negs	r3, r2
    5a60:	4153      	adcs	r3, r2
    5a62:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5a64:	b672      	cpsid	i
    5a66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5a6a:	2200      	movs	r2, #0
    5a6c:	4b27      	ldr	r3, [pc, #156]	; (5b0c <sw_timer_service+0xc0>)
    5a6e:	701a      	strb	r2, [r3, #0]
	return flags;
    5a70:	9c00      	ldr	r4, [sp, #0]
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
    5a72:	4b27      	ldr	r3, [pc, #156]	; (5b10 <sw_timer_service+0xc4>)
    5a74:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    5a76:	23ff      	movs	r3, #255	; 0xff
    5a78:	4223      	tst	r3, r4
    5a7a:	d005      	beq.n	5a88 <sw_timer_service+0x3c>
		cpu_irq_enable();
    5a7c:	2201      	movs	r2, #1
    5a7e:	4b23      	ldr	r3, [pc, #140]	; (5b0c <sw_timer_service+0xc0>)
    5a80:	701a      	strb	r2, [r3, #0]
    5a82:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5a86:	b662      	cpsie	i
	cpu_irq_disable();
    5a88:	4b20      	ldr	r3, [pc, #128]	; (5b0c <sw_timer_service+0xc0>)
    5a8a:	469a      	mov	sl, r3
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
    5a8c:	4c21      	ldr	r4, [pc, #132]	; (5b14 <sw_timer_service+0xc8>)
    5a8e:	4b22      	ldr	r3, [pc, #136]	; (5b18 <sw_timer_service+0xcc>)
    5a90:	4699      	mov	r9, r3
    5a92:	2200      	movs	r2, #0
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    5a94:	20ff      	movs	r0, #255	; 0xff
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;

			if (NO_TIMER == expired_timer_queue_head) {
				expired_timer_queue_tail = NO_TIMER;
    5a96:	4b21      	ldr	r3, [pc, #132]	; (5b1c <sw_timer_service+0xd0>)
    5a98:	4698      	mov	r8, r3
		cpu_irq_enable();
    5a9a:	4b1c      	ldr	r3, [pc, #112]	; (5b0c <sw_timer_service+0xc0>)
    5a9c:	469c      	mov	ip, r3
    5a9e:	e004      	b.n	5aaa <sw_timer_service+0x5e>
    5aa0:	4643      	mov	r3, r8
    5aa2:	6018      	str	r0, [r3, #0]
    5aa4:	e01e      	b.n	5ae4 <sw_timer_service+0x98>
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
    5aa6:	2e00      	cmp	r6, #0
    5aa8:	d125      	bne.n	5af6 <sw_timer_service+0xaa>
		while (NO_TIMER != expired_timer_queue_head) {
    5aaa:	4b1a      	ldr	r3, [pc, #104]	; (5b14 <sw_timer_service+0xc8>)
    5aac:	681b      	ldr	r3, [r3, #0]
    5aae:	2bff      	cmp	r3, #255	; 0xff
    5ab0:	d024      	beq.n	5afc <sw_timer_service+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5ab2:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5ab6:	424b      	negs	r3, r1
    5ab8:	414b      	adcs	r3, r1
    5aba:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5abc:	b672      	cpsid	i
    5abe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5ac2:	4653      	mov	r3, sl
    5ac4:	701a      	strb	r2, [r3, #0]
	return flags;
    5ac6:	9f01      	ldr	r7, [sp, #4]
				= timer_array[expired_timer_queue_head].
    5ac8:	6823      	ldr	r3, [r4, #0]
    5aca:	011b      	lsls	r3, r3, #4
    5acc:	444b      	add	r3, r9
    5ace:	7b19      	ldrb	r1, [r3, #12]
				= (timer_expiry_cb_t)timer_array[
    5ad0:	685e      	ldr	r6, [r3, #4]
				= timer_array[expired_timer_queue_head].param_cb;
    5ad2:	689d      	ldr	r5, [r3, #8]
    5ad4:	46ab      	mov	fp, r5
			next_timer_in_queue = NO_TIMER;
    5ad6:	7318      	strb	r0, [r3, #12]
			timer_array[expired_timer_queue_head].timer_cb = NULL;
    5ad8:	605a      	str	r2, [r3, #4]
			timer_array[expired_timer_queue_head].param_cb = NULL;
    5ada:	609a      	str	r2, [r3, #8]
			timer_array[expired_timer_queue_head].loaded = false;
    5adc:	735a      	strb	r2, [r3, #13]
			expired_timer_queue_head = next_expired_timer;
    5ade:	6021      	str	r1, [r4, #0]
			if (NO_TIMER == expired_timer_queue_head) {
    5ae0:	29ff      	cmp	r1, #255	; 0xff
    5ae2:	d0dd      	beq.n	5aa0 <sw_timer_service+0x54>
	if (cpu_irq_is_enabled_flags(flags))
    5ae4:	4238      	tst	r0, r7
    5ae6:	d0de      	beq.n	5aa6 <sw_timer_service+0x5a>
		cpu_irq_enable();
    5ae8:	2301      	movs	r3, #1
    5aea:	4661      	mov	r1, ip
    5aec:	700b      	strb	r3, [r1, #0]
    5aee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5af2:	b662      	cpsie	i
    5af4:	e7d7      	b.n	5aa6 <sw_timer_service+0x5a>
				/* Callback function is called */
				callback(callback_param);
    5af6:	4658      	mov	r0, fp
    5af8:	47b0      	blx	r6
    5afa:	e7ca      	b.n	5a92 <sw_timer_service+0x46>
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
    5afc:	b003      	add	sp, #12
    5afe:	bc3c      	pop	{r2, r3, r4, r5}
    5b00:	4690      	mov	r8, r2
    5b02:	4699      	mov	r9, r3
    5b04:	46a2      	mov	sl, r4
    5b06:	46ab      	mov	fp, r5
    5b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b0a:	46c0      	nop			; (mov r8, r8)
    5b0c:	2000000c 	.word	0x2000000c
    5b10:	00005915 	.word	0x00005915
    5b14:	200001c8 	.word	0x200001c8
    5b18:	20000b54 	.word	0x20000b54
    5b1c:	200001cc 	.word	0x200001cc

00005b20 <pal_init>:
{
	return (true);
}

retval_t pal_init(void)
{
    5b20:	b510      	push	{r4, lr}
#if (PAL_USE_SPI_TRX == 1)
	trx_spi_init();
    5b22:	4b02      	ldr	r3, [pc, #8]	; (5b2c <pal_init+0xc>)
    5b24:	4798      	blx	r3
#if (SAMD20) || (SAMD21) || (SAMR21)
	nvm_init(INT_FLASH);
#endif
#endif
	return MAC_SUCCESS;
}
    5b26:	2000      	movs	r0, #0
    5b28:	bd10      	pop	{r4, pc}
    5b2a:	46c0      	nop			; (mov r8, r8)
    5b2c:	00006dd1 	.word	0x00006dd1

00005b30 <pal_task>:
 * @brief Services timer and sio handler
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
    5b30:	b510      	push	{r4, lr}
	sw_timer_service();
    5b32:	4b01      	ldr	r3, [pc, #4]	; (5b38 <pal_task+0x8>)
    5b34:	4798      	blx	r3
}
    5b36:	bd10      	pop	{r4, pc}
    5b38:	00005a4d 	.word	0x00005a4d

00005b3c <pal_get_current_time>:
{
	*timestamp  = sw_timer_get_time();
}

void pal_get_current_time(uint32_t *timer_count)
{
    5b3c:	b510      	push	{r4, lr}
    5b3e:	b082      	sub	sp, #8
    5b40:	0004      	movs	r4, r0
	uint32_t time_val;
	/* This will avoid the hard faults, due to aligned nature of access */
	time_val = sw_timer_get_time();
    5b42:	4b05      	ldr	r3, [pc, #20]	; (5b58 <pal_get_current_time+0x1c>)
    5b44:	4798      	blx	r3
    5b46:	9001      	str	r0, [sp, #4]
	MEMCPY_ENDIAN((uint8_t *)timer_count, (uint8_t *)&time_val,
    5b48:	2204      	movs	r2, #4
    5b4a:	a901      	add	r1, sp, #4
    5b4c:	0020      	movs	r0, r4
    5b4e:	4b03      	ldr	r3, [pc, #12]	; (5b5c <pal_get_current_time+0x20>)
    5b50:	4798      	blx	r3
			sizeof(time_val));
}
    5b52:	b002      	add	sp, #8
    5b54:	bd10      	pop	{r4, pc}
    5b56:	46c0      	nop			; (mov r8, r8)
    5b58:	000059a9 	.word	0x000059a9
    5b5c:	00008169 	.word	0x00008169

00005b60 <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
    5b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
    5b62:	4e0d      	ldr	r6, [pc, #52]	; (5b98 <bmm_buffer_init+0x38>)
    5b64:	0030      	movs	r0, r6
    5b66:	4b0d      	ldr	r3, [pc, #52]	; (5b9c <bmm_buffer_init+0x3c>)
    5b68:	4798      	blx	r3
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    5b6a:	4c0d      	ldr	r4, [pc, #52]	; (5ba0 <bmm_buffer_init+0x40>)
    5b6c:	4d0d      	ldr	r5, [pc, #52]	; (5ba4 <bmm_buffer_init+0x44>)
    5b6e:	6025      	str	r5, [r4, #0]

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    5b70:	0021      	movs	r1, r4
    5b72:	0030      	movs	r0, r6
    5b74:	4f0c      	ldr	r7, [pc, #48]	; (5ba8 <bmm_buffer_init+0x48>)
    5b76:	47b8      	blx	r7
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    5b78:	002b      	movs	r3, r5
    5b7a:	3390      	adds	r3, #144	; 0x90
    5b7c:	60a3      	str	r3, [r4, #8]
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    5b7e:	0021      	movs	r1, r4
    5b80:	3108      	adds	r1, #8
    5b82:	0030      	movs	r0, r6
    5b84:	47b8      	blx	r7
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    5b86:	3521      	adds	r5, #33	; 0x21
    5b88:	35ff      	adds	r5, #255	; 0xff
    5b8a:	6125      	str	r5, [r4, #16]
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    5b8c:	0021      	movs	r1, r4
    5b8e:	3110      	adds	r1, #16
    5b90:	0030      	movs	r0, r6
    5b92:	47b8      	blx	r7
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
    5b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b96:	46c0      	nop			; (mov r8, r8)
    5b98:	200003a0 	.word	0x200003a0
    5b9c:	00005d6d 	.word	0x00005d6d
    5ba0:	200001d8 	.word	0x200001d8
    5ba4:	200001f0 	.word	0x200001f0
    5ba8:	00005d85 	.word	0x00005d85

00005bac <bmm_buffer_alloc>:
#if defined(ENABLE_LARGE_BUFFER)
buffer_t *bmm_buffer_alloc(uint16_t size)
#else
buffer_t * bmm_buffer_alloc(uint8_t size)
#endif
{
    5bac:	b510      	push	{r4, lr}
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
    5bae:	2100      	movs	r1, #0
    5bb0:	4801      	ldr	r0, [pc, #4]	; (5bb8 <bmm_buffer_alloc+0xc>)
    5bb2:	4b02      	ldr	r3, [pc, #8]	; (5bbc <bmm_buffer_alloc+0x10>)
    5bb4:	4798      	blx	r3

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
    5bb6:	bd10      	pop	{r4, pc}
    5bb8:	200003a0 	.word	0x200003a0
    5bbc:	00005e11 	.word	0x00005e11

00005bc0 <bmm_buffer_free>:
	 * unpredictable if an incorrect pointer is passed.
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
    5bc0:	b510      	push	{r4, lr}
		if (NULL == pbuffer) {
    5bc2:	2800      	cmp	r0, #0
    5bc4:	d003      	beq.n	5bce <bmm_buffer_free+0xe>
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
    5bc6:	0001      	movs	r1, r0
    5bc8:	4801      	ldr	r0, [pc, #4]	; (5bd0 <bmm_buffer_free+0x10>)
    5bca:	4b02      	ldr	r3, [pc, #8]	; (5bd4 <bmm_buffer_free+0x14>)
    5bcc:	4798      	blx	r3
#endif
	}
    5bce:	bd10      	pop	{r4, pc}
    5bd0:	200003a0 	.word	0x200003a0
    5bd4:	00005d85 	.word	0x00005d85

00005bd8 <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
    5bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bda:	46ce      	mov	lr, r9
    5bdc:	4647      	mov	r7, r8
    5bde:	b580      	push	{r7, lr}
    5be0:	b083      	sub	sp, #12
    5be2:	0007      	movs	r7, r0
    5be4:	4689      	mov	r9, r1
    5be6:	0015      	movs	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5be8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5bec:	425a      	negs	r2, r3
    5bee:	4153      	adcs	r3, r2
    5bf0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5bf2:	b672      	cpsid	i
    5bf4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5bf8:	2200      	movs	r2, #0
    5bfa:	4b5b      	ldr	r3, [pc, #364]	; (5d68 <queue_read_or_remove+0x190>)
    5bfc:	701a      	strb	r2, [r3, #0]
	return flags;
    5bfe:	9b01      	ldr	r3, [sp, #4]
    5c00:	4698      	mov	r8, r3
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
    5c02:	7a03      	ldrb	r3, [r0, #8]
    5c04:	2b00      	cmp	r3, #0
    5c06:	d100      	bne.n	5c0a <queue_read_or_remove+0x32>
    5c08:	e0ab      	b.n	5d62 <queue_read_or_remove+0x18a>
		buffer_current = q->head;
    5c0a:	7804      	ldrb	r4, [r0, #0]
    5c0c:	7843      	ldrb	r3, [r0, #1]
    5c0e:	021b      	lsls	r3, r3, #8
    5c10:	4323      	orrs	r3, r4
    5c12:	7884      	ldrb	r4, [r0, #2]
    5c14:	0424      	lsls	r4, r4, #16
    5c16:	4323      	orrs	r3, r4
    5c18:	78c4      	ldrb	r4, [r0, #3]
    5c1a:	0624      	lsls	r4, r4, #24
    5c1c:	431c      	orrs	r4, r3
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    5c1e:	2d00      	cmp	r5, #0
    5c20:	d043      	beq.n	5caa <queue_read_or_remove+0xd2>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    5c22:	2c00      	cmp	r4, #0
    5c24:	d030      	beq.n	5c88 <queue_read_or_remove+0xb0>
    5c26:	0026      	movs	r6, r4
    5c28:	e000      	b.n	5c2c <queue_read_or_remove+0x54>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    5c2a:	001c      	movs	r4, r3
				match = search->criteria_func(
    5c2c:	7929      	ldrb	r1, [r5, #4]
    5c2e:	796b      	ldrb	r3, [r5, #5]
    5c30:	021b      	lsls	r3, r3, #8
    5c32:	430b      	orrs	r3, r1
    5c34:	79a9      	ldrb	r1, [r5, #6]
    5c36:	0409      	lsls	r1, r1, #16
    5c38:	430b      	orrs	r3, r1
    5c3a:	79e9      	ldrb	r1, [r5, #7]
    5c3c:	0609      	lsls	r1, r1, #24
    5c3e:	4319      	orrs	r1, r3
						(void *)buffer_current->body,
    5c40:	7820      	ldrb	r0, [r4, #0]
    5c42:	7863      	ldrb	r3, [r4, #1]
    5c44:	021b      	lsls	r3, r3, #8
    5c46:	4303      	orrs	r3, r0
    5c48:	78a0      	ldrb	r0, [r4, #2]
    5c4a:	0400      	lsls	r0, r0, #16
    5c4c:	4303      	orrs	r3, r0
    5c4e:	78e0      	ldrb	r0, [r4, #3]
    5c50:	0600      	lsls	r0, r0, #24
    5c52:	4318      	orrs	r0, r3
				match = search->criteria_func(
    5c54:	782b      	ldrb	r3, [r5, #0]
    5c56:	786a      	ldrb	r2, [r5, #1]
    5c58:	0212      	lsls	r2, r2, #8
    5c5a:	431a      	orrs	r2, r3
    5c5c:	78ab      	ldrb	r3, [r5, #2]
    5c5e:	041b      	lsls	r3, r3, #16
    5c60:	431a      	orrs	r2, r3
    5c62:	78eb      	ldrb	r3, [r5, #3]
    5c64:	061b      	lsls	r3, r3, #24
    5c66:	4313      	orrs	r3, r2
    5c68:	4798      	blx	r3
				if (match) {
    5c6a:	2800      	cmp	r0, #0
    5c6c:	d11e      	bne.n	5cac <queue_read_or_remove+0xd4>
				buffer_current = buffer_current->next;
    5c6e:	7923      	ldrb	r3, [r4, #4]
    5c70:	7962      	ldrb	r2, [r4, #5]
    5c72:	0212      	lsls	r2, r2, #8
    5c74:	431a      	orrs	r2, r3
    5c76:	79a3      	ldrb	r3, [r4, #6]
    5c78:	041b      	lsls	r3, r3, #16
    5c7a:	431a      	orrs	r2, r3
    5c7c:	79e3      	ldrb	r3, [r4, #7]
    5c7e:	061b      	lsls	r3, r3, #24
    5c80:	4313      	orrs	r3, r2
    5c82:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    5c84:	2b00      	cmp	r3, #0
    5c86:	d1d0      	bne.n	5c2a <queue_read_or_remove+0x52>
	buffer_t *buffer_current = NULL;
    5c88:	2400      	movs	r4, #0
	if (cpu_irq_is_enabled_flags(flags))
    5c8a:	23ff      	movs	r3, #255	; 0xff
    5c8c:	4642      	mov	r2, r8
    5c8e:	4213      	tst	r3, r2
    5c90:	d005      	beq.n	5c9e <queue_read_or_remove+0xc6>
		cpu_irq_enable();
    5c92:	2201      	movs	r2, #1
    5c94:	4b34      	ldr	r3, [pc, #208]	; (5d68 <queue_read_or_remove+0x190>)
    5c96:	701a      	strb	r2, [r3, #0]
    5c98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5c9c:	b662      	cpsie	i
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    5c9e:	0020      	movs	r0, r4
    5ca0:	b003      	add	sp, #12
    5ca2:	bc0c      	pop	{r2, r3}
    5ca4:	4690      	mov	r8, r2
    5ca6:	4699      	mov	r9, r3
    5ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    5caa:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    5cac:	2c00      	cmp	r4, #0
    5cae:	d0ec      	beq.n	5c8a <queue_read_or_remove+0xb2>
			if (REMOVE_MODE == mode) {
    5cb0:	464b      	mov	r3, r9
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d1e9      	bne.n	5c8a <queue_read_or_remove+0xb2>
				if (buffer_current == q->head) {
    5cb6:	783b      	ldrb	r3, [r7, #0]
    5cb8:	787a      	ldrb	r2, [r7, #1]
    5cba:	0212      	lsls	r2, r2, #8
    5cbc:	431a      	orrs	r2, r3
    5cbe:	78bb      	ldrb	r3, [r7, #2]
    5cc0:	041b      	lsls	r3, r3, #16
    5cc2:	431a      	orrs	r2, r3
    5cc4:	78fb      	ldrb	r3, [r7, #3]
    5cc6:	061b      	lsls	r3, r3, #24
    5cc8:	4313      	orrs	r3, r2
    5cca:	429c      	cmp	r4, r3
    5ccc:	d02f      	beq.n	5d2e <queue_read_or_remove+0x156>
						= buffer_current->next;
    5cce:	7923      	ldrb	r3, [r4, #4]
    5cd0:	7962      	ldrb	r2, [r4, #5]
    5cd2:	0212      	lsls	r2, r2, #8
    5cd4:	431a      	orrs	r2, r3
    5cd6:	79a3      	ldrb	r3, [r4, #6]
    5cd8:	041b      	lsls	r3, r3, #16
    5cda:	431a      	orrs	r2, r3
    5cdc:	79e3      	ldrb	r3, [r4, #7]
    5cde:	061b      	lsls	r3, r3, #24
    5ce0:	4313      	orrs	r3, r2
    5ce2:	7133      	strb	r3, [r6, #4]
    5ce4:	0a1a      	lsrs	r2, r3, #8
    5ce6:	7172      	strb	r2, [r6, #5]
    5ce8:	0c1a      	lsrs	r2, r3, #16
    5cea:	71b2      	strb	r2, [r6, #6]
    5cec:	0e1b      	lsrs	r3, r3, #24
    5cee:	71f3      	strb	r3, [r6, #7]
				if (buffer_current == q->tail) {
    5cf0:	793b      	ldrb	r3, [r7, #4]
    5cf2:	797a      	ldrb	r2, [r7, #5]
    5cf4:	0212      	lsls	r2, r2, #8
    5cf6:	431a      	orrs	r2, r3
    5cf8:	79bb      	ldrb	r3, [r7, #6]
    5cfa:	041b      	lsls	r3, r3, #16
    5cfc:	431a      	orrs	r2, r3
    5cfe:	79fb      	ldrb	r3, [r7, #7]
    5d00:	061b      	lsls	r3, r3, #24
    5d02:	4313      	orrs	r3, r2
    5d04:	429c      	cmp	r4, r3
    5d06:	d024      	beq.n	5d52 <queue_read_or_remove+0x17a>
				q->size--;
    5d08:	7a3b      	ldrb	r3, [r7, #8]
    5d0a:	3b01      	subs	r3, #1
    5d0c:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    5d0e:	783b      	ldrb	r3, [r7, #0]
    5d10:	787a      	ldrb	r2, [r7, #1]
    5d12:	0212      	lsls	r2, r2, #8
    5d14:	431a      	orrs	r2, r3
    5d16:	78bb      	ldrb	r3, [r7, #2]
    5d18:	041b      	lsls	r3, r3, #16
    5d1a:	431a      	orrs	r2, r3
    5d1c:	78fb      	ldrb	r3, [r7, #3]
    5d1e:	061b      	lsls	r3, r3, #24
    5d20:	4313      	orrs	r3, r2
    5d22:	d1b2      	bne.n	5c8a <queue_read_or_remove+0xb2>
					q->tail = NULL;
    5d24:	713b      	strb	r3, [r7, #4]
    5d26:	717b      	strb	r3, [r7, #5]
    5d28:	71bb      	strb	r3, [r7, #6]
    5d2a:	71fb      	strb	r3, [r7, #7]
    5d2c:	e7ad      	b.n	5c8a <queue_read_or_remove+0xb2>
					q->head = buffer_current->next;
    5d2e:	7923      	ldrb	r3, [r4, #4]
    5d30:	7962      	ldrb	r2, [r4, #5]
    5d32:	0212      	lsls	r2, r2, #8
    5d34:	431a      	orrs	r2, r3
    5d36:	79a3      	ldrb	r3, [r4, #6]
    5d38:	041b      	lsls	r3, r3, #16
    5d3a:	431a      	orrs	r2, r3
    5d3c:	79e3      	ldrb	r3, [r4, #7]
    5d3e:	061b      	lsls	r3, r3, #24
    5d40:	4313      	orrs	r3, r2
    5d42:	703b      	strb	r3, [r7, #0]
    5d44:	0a1a      	lsrs	r2, r3, #8
    5d46:	707a      	strb	r2, [r7, #1]
    5d48:	0c1a      	lsrs	r2, r3, #16
    5d4a:	70ba      	strb	r2, [r7, #2]
    5d4c:	0e1b      	lsrs	r3, r3, #24
    5d4e:	70fb      	strb	r3, [r7, #3]
    5d50:	e7ce      	b.n	5cf0 <queue_read_or_remove+0x118>
					q->tail = buffer_previous;
    5d52:	713e      	strb	r6, [r7, #4]
    5d54:	0a33      	lsrs	r3, r6, #8
    5d56:	717b      	strb	r3, [r7, #5]
    5d58:	0c33      	lsrs	r3, r6, #16
    5d5a:	71bb      	strb	r3, [r7, #6]
    5d5c:	0e36      	lsrs	r6, r6, #24
    5d5e:	71fe      	strb	r6, [r7, #7]
    5d60:	e7d2      	b.n	5d08 <queue_read_or_remove+0x130>
	buffer_t *buffer_current = NULL;
    5d62:	2400      	movs	r4, #0
    5d64:	e791      	b.n	5c8a <queue_read_or_remove+0xb2>
    5d66:	46c0      	nop			; (mov r8, r8)
    5d68:	2000000c 	.word	0x2000000c

00005d6c <qmm_queue_init>:
	q->head = NULL;
    5d6c:	2300      	movs	r3, #0
    5d6e:	7003      	strb	r3, [r0, #0]
    5d70:	7043      	strb	r3, [r0, #1]
    5d72:	7083      	strb	r3, [r0, #2]
    5d74:	70c3      	strb	r3, [r0, #3]
	q->tail = NULL;
    5d76:	7103      	strb	r3, [r0, #4]
    5d78:	7143      	strb	r3, [r0, #5]
    5d7a:	7183      	strb	r3, [r0, #6]
    5d7c:	71c3      	strb	r3, [r0, #7]
	q->size = 0;
    5d7e:	7203      	strb	r3, [r0, #8]
}
    5d80:	4770      	bx	lr
	...

00005d84 <qmm_queue_append>:
{
    5d84:	b510      	push	{r4, lr}
    5d86:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5d88:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5d8c:	425a      	negs	r2, r3
    5d8e:	4153      	adcs	r3, r2
    5d90:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5d92:	b672      	cpsid	i
    5d94:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5d98:	2200      	movs	r2, #0
    5d9a:	4b1c      	ldr	r3, [pc, #112]	; (5e0c <qmm_queue_append+0x88>)
    5d9c:	701a      	strb	r2, [r3, #0]
	return flags;
    5d9e:	9c01      	ldr	r4, [sp, #4]
		if (q->size == 0) {
    5da0:	7a03      	ldrb	r3, [r0, #8]
    5da2:	2b00      	cmp	r3, #0
    5da4:	d120      	bne.n	5de8 <qmm_queue_append+0x64>
			q->head = buf;
    5da6:	7001      	strb	r1, [r0, #0]
    5da8:	0a0b      	lsrs	r3, r1, #8
    5daa:	7043      	strb	r3, [r0, #1]
    5dac:	0c0b      	lsrs	r3, r1, #16
    5dae:	7083      	strb	r3, [r0, #2]
    5db0:	0e0b      	lsrs	r3, r1, #24
    5db2:	70c3      	strb	r3, [r0, #3]
		q->tail = buf;
    5db4:	7101      	strb	r1, [r0, #4]
    5db6:	0a0b      	lsrs	r3, r1, #8
    5db8:	7143      	strb	r3, [r0, #5]
    5dba:	0c0b      	lsrs	r3, r1, #16
    5dbc:	22ff      	movs	r2, #255	; 0xff
    5dbe:	7183      	strb	r3, [r0, #6]
    5dc0:	0e0b      	lsrs	r3, r1, #24
    5dc2:	71c3      	strb	r3, [r0, #7]
		buf->next = NULL;
    5dc4:	2300      	movs	r3, #0
    5dc6:	710b      	strb	r3, [r1, #4]
    5dc8:	714b      	strb	r3, [r1, #5]
    5dca:	718b      	strb	r3, [r1, #6]
    5dcc:	71cb      	strb	r3, [r1, #7]
		q->size++;
    5dce:	7a03      	ldrb	r3, [r0, #8]
    5dd0:	3301      	adds	r3, #1
    5dd2:	7203      	strb	r3, [r0, #8]
	if (cpu_irq_is_enabled_flags(flags))
    5dd4:	4222      	tst	r2, r4
    5dd6:	d005      	beq.n	5de4 <qmm_queue_append+0x60>
		cpu_irq_enable();
    5dd8:	3afe      	subs	r2, #254	; 0xfe
    5dda:	4b0c      	ldr	r3, [pc, #48]	; (5e0c <qmm_queue_append+0x88>)
    5ddc:	701a      	strb	r2, [r3, #0]
    5dde:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5de2:	b662      	cpsie	i
} /* qmm_queue_append */
    5de4:	b002      	add	sp, #8
    5de6:	bd10      	pop	{r4, pc}
			q->tail->next = buf;
    5de8:	7903      	ldrb	r3, [r0, #4]
    5dea:	7942      	ldrb	r2, [r0, #5]
    5dec:	0212      	lsls	r2, r2, #8
    5dee:	431a      	orrs	r2, r3
    5df0:	7983      	ldrb	r3, [r0, #6]
    5df2:	041b      	lsls	r3, r3, #16
    5df4:	431a      	orrs	r2, r3
    5df6:	79c3      	ldrb	r3, [r0, #7]
    5df8:	061b      	lsls	r3, r3, #24
    5dfa:	4313      	orrs	r3, r2
    5dfc:	7119      	strb	r1, [r3, #4]
    5dfe:	0a0a      	lsrs	r2, r1, #8
    5e00:	715a      	strb	r2, [r3, #5]
    5e02:	0c0a      	lsrs	r2, r1, #16
    5e04:	719a      	strb	r2, [r3, #6]
    5e06:	0e0a      	lsrs	r2, r1, #24
    5e08:	71da      	strb	r2, [r3, #7]
    5e0a:	e7d3      	b.n	5db4 <qmm_queue_append+0x30>
    5e0c:	2000000c 	.word	0x2000000c

00005e10 <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
    5e10:	b510      	push	{r4, lr}
    5e12:	000a      	movs	r2, r1
	return (queue_read_or_remove(q, REMOVE_MODE, search));
    5e14:	2100      	movs	r1, #0
    5e16:	4b01      	ldr	r3, [pc, #4]	; (5e1c <qmm_queue_remove+0xc>)
    5e18:	4798      	blx	r3
}
    5e1a:	bd10      	pop	{r4, pc}
    5e1c:	00005bd9 	.word	0x00005bd9

00005e20 <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine
 */
static void switch_pll_on(void)
{
    5e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e22:	b083      	sub	sp, #12
	uint32_t start_time;
	uint32_t current_time;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
    5e24:	2200      	movs	r2, #0
    5e26:	211f      	movs	r1, #31
    5e28:	2001      	movs	r0, #1
    5e2a:	4b24      	ldr	r3, [pc, #144]	; (5ebc <switch_pll_on+0x9c>)
    5e2c:	4798      	blx	r3
    5e2e:	2808      	cmp	r0, #8
    5e30:	d001      	beq.n	5e36 <switch_pll_on+0x16>
	/* Clear MCU's interrupt flag */
	pal_trx_irq_flag_clr();
	LEAVE_TRX_REGION(); /* Enable trx interrupt handling again */
	/* Restore transceiver's interrupt mask. */
	trx_reg_write(RG_IRQ_MASK, trx_irq_mask);
}
    5e32:	b003      	add	sp, #12
    5e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	trx_reg_read(RG_IRQ_STATUS);
    5e36:	3007      	adds	r0, #7
    5e38:	4c21      	ldr	r4, [pc, #132]	; (5ec0 <switch_pll_on+0xa0>)
    5e3a:	47a0      	blx	r4
	uint8_t trx_irq_mask = trx_reg_read(RG_IRQ_MASK);
    5e3c:	200e      	movs	r0, #14
    5e3e:	47a0      	blx	r4
    5e40:	0005      	movs	r5, r0
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_0_PLL_LOCK);
    5e42:	2101      	movs	r1, #1
    5e44:	200e      	movs	r0, #14
    5e46:	4c1f      	ldr	r4, [pc, #124]	; (5ec4 <switch_pll_on+0xa4>)
    5e48:	47a0      	blx	r4
	ENTER_TRX_REGION(); /* Disable trx interrupt handling */
    5e4a:	2100      	movs	r1, #0
    5e4c:	2000      	movs	r0, #0
    5e4e:	4b1e      	ldr	r3, [pc, #120]	; (5ec8 <switch_pll_on+0xa8>)
    5e50:	4798      	blx	r3
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    5e52:	2109      	movs	r1, #9
    5e54:	2002      	movs	r0, #2
    5e56:	47a0      	blx	r4
	pal_get_current_time(&start_time);
    5e58:	a801      	add	r0, sp, #4
    5e5a:	4b1c      	ldr	r3, [pc, #112]	; (5ecc <switch_pll_on+0xac>)
    5e5c:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    5e5e:	4e1c      	ldr	r6, [pc, #112]	; (5ed0 <switch_pll_on+0xb0>)
		pal_get_current_time(&current_time);
    5e60:	4f1a      	ldr	r7, [pc, #104]	; (5ecc <switch_pll_on+0xac>)
    5e62:	2401      	movs	r4, #1
    5e64:	6a33      	ldr	r3, [r6, #32]
	while (TRX_IRQ_HIGH() == false) {
    5e66:	421c      	tst	r4, r3
    5e68:	d118      	bne.n	5e9c <switch_pll_on+0x7c>
		pal_get_current_time(&current_time);
    5e6a:	4668      	mov	r0, sp
    5e6c:	47b8      	blx	r7
 *
 * @return Difference between a and b
 */
static inline uint32_t pal_sub_time_us(uint32_t a, uint32_t b)
{
	return (SUB_TIME(a, b));
    5e6e:	9b00      	ldr	r3, [sp, #0]
    5e70:	9a01      	ldr	r2, [sp, #4]
    5e72:	1a9b      	subs	r3, r3, r2
		if (pal_sub_time_us(current_time,
    5e74:	2bfa      	cmp	r3, #250	; 0xfa
    5e76:	d9f5      	bls.n	5e64 <switch_pll_on+0x44>
			reg_value = trx_reg_read(RG_PLL_CF);
    5e78:	201a      	movs	r0, #26
    5e7a:	4b11      	ldr	r3, [pc, #68]	; (5ec0 <switch_pll_on+0xa0>)
    5e7c:	4798      	blx	r3
			if (reg_value & 0x01) {
    5e7e:	07c3      	lsls	r3, r0, #31
    5e80:	d508      	bpl.n	5e94 <switch_pll_on+0x74>
				reg_value &= 0xFE;
    5e82:	21fe      	movs	r1, #254	; 0xfe
    5e84:	4001      	ands	r1, r0
			trx_reg_write(RG_PLL_CF, reg_value);
    5e86:	201a      	movs	r0, #26
    5e88:	4b0e      	ldr	r3, [pc, #56]	; (5ec4 <switch_pll_on+0xa4>)
    5e8a:	4798      	blx	r3
			pal_get_current_time(&start_time);
    5e8c:	a801      	add	r0, sp, #4
    5e8e:	4b0f      	ldr	r3, [pc, #60]	; (5ecc <switch_pll_on+0xac>)
    5e90:	4798      	blx	r3
    5e92:	e7e6      	b.n	5e62 <switch_pll_on+0x42>
				reg_value |= 0x01;
    5e94:	2101      	movs	r1, #1
    5e96:	4301      	orrs	r1, r0
    5e98:	b2c9      	uxtb	r1, r1
    5e9a:	e7f4      	b.n	5e86 <switch_pll_on+0x66>
	trx_reg_read(RG_IRQ_STATUS);
    5e9c:	200f      	movs	r0, #15
    5e9e:	4b08      	ldr	r3, [pc, #32]	; (5ec0 <switch_pll_on+0xa0>)
    5ea0:	4798      	blx	r3
	eic_module->INTFLAG.reg = eic_mask;
    5ea2:	2201      	movs	r2, #1
    5ea4:	4b0b      	ldr	r3, [pc, #44]	; (5ed4 <switch_pll_on+0xb4>)
    5ea6:	611a      	str	r2, [r3, #16]
	LEAVE_TRX_REGION(); /* Enable trx interrupt handling again */
    5ea8:	2100      	movs	r1, #0
    5eaa:	2000      	movs	r0, #0
    5eac:	4b0a      	ldr	r3, [pc, #40]	; (5ed8 <switch_pll_on+0xb8>)
    5eae:	4798      	blx	r3
	trx_reg_write(RG_IRQ_MASK, trx_irq_mask);
    5eb0:	0029      	movs	r1, r5
    5eb2:	200e      	movs	r0, #14
    5eb4:	4b03      	ldr	r3, [pc, #12]	; (5ec4 <switch_pll_on+0xa4>)
    5eb6:	4798      	blx	r3
    5eb8:	e7bb      	b.n	5e32 <switch_pll_on+0x12>
    5eba:	46c0      	nop			; (mov r8, r8)
    5ebc:	0000710d 	.word	0x0000710d
    5ec0:	00006f05 	.word	0x00006f05
    5ec4:	00007001 	.word	0x00007001
    5ec8:	0000410d 	.word	0x0000410d
    5ecc:	00005b3d 	.word	0x00005b3d
    5ed0:	41004480 	.word	0x41004480
    5ed4:	40001800 	.word	0x40001800
    5ed8:	000040ed 	.word	0x000040ed

00005edc <set_trx_state>:
{
    5edc:	b570      	push	{r4, r5, r6, lr}
    5ede:	b082      	sub	sp, #8
    5ee0:	0004      	movs	r4, r0
	if (tal_trx_status == TRX_SLEEP) {
    5ee2:	4b96      	ldr	r3, [pc, #600]	; (613c <set_trx_state+0x260>)
    5ee4:	7818      	ldrb	r0, [r3, #0]
    5ee6:	280f      	cmp	r0, #15
    5ee8:	d007      	beq.n	5efa <set_trx_state+0x1e>
	switch (trx_cmd) { /* requested state */
    5eea:	3c03      	subs	r4, #3
    5eec:	b2e3      	uxtb	r3, r4
    5eee:	2b16      	cmp	r3, #22
    5ef0:	d87c      	bhi.n	5fec <set_trx_state+0x110>
    5ef2:	009c      	lsls	r4, r3, #2
    5ef4:	4b92      	ldr	r3, [pc, #584]	; (6140 <set_trx_state+0x264>)
    5ef6:	591b      	ldr	r3, [r3, r4]
    5ef8:	469f      	mov	pc, r3
		if (CMD_SLEEP == trx_cmd) {
    5efa:	2c0f      	cmp	r4, #15
    5efc:	d100      	bne.n	5f00 <set_trx_state+0x24>
    5efe:	e07e      	b.n	5ffe <set_trx_state+0x122>
		tal_awake_end_flag = false;
    5f00:	2600      	movs	r6, #0
    5f02:	4b90      	ldr	r3, [pc, #576]	; (6144 <set_trx_state+0x268>)
    5f04:	701e      	strb	r6, [r3, #0]
		trx_irq_init((FUNC_PTR)trx_irq_awake_handler_cb);
    5f06:	4890      	ldr	r0, [pc, #576]	; (6148 <set_trx_state+0x26c>)
    5f08:	4b90      	ldr	r3, [pc, #576]	; (614c <set_trx_state+0x270>)
    5f0a:	4798      	blx	r3
    5f0c:	2501      	movs	r5, #1
    5f0e:	4b90      	ldr	r3, [pc, #576]	; (6150 <set_trx_state+0x274>)
    5f10:	611d      	str	r5, [r3, #16]
		pal_trx_irq_en(); /* Enable transceiver main interrupt. */
    5f12:	2100      	movs	r1, #0
    5f14:	2000      	movs	r0, #0
    5f16:	4b8f      	ldr	r3, [pc, #572]	; (6154 <set_trx_state+0x278>)
    5f18:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5f1a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5f1e:	425a      	negs	r2, r3
    5f20:	4153      	adcs	r3, r2
    5f22:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5f24:	b672      	cpsid	i
    5f26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5f2a:	4b8b      	ldr	r3, [pc, #556]	; (6158 <set_trx_state+0x27c>)
    5f2c:	701e      	strb	r6, [r3, #0]
	return flags;
    5f2e:	9901      	ldr	r1, [sp, #4]
		ENABLE_GLOBAL_IRQ();
    5f30:	701d      	strb	r5, [r3, #0]
    5f32:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5f36:	b662      	cpsie	i
		port_base->OUTCLR.reg = pin_mask;
    5f38:	2280      	movs	r2, #128	; 0x80
    5f3a:	0352      	lsls	r2, r2, #13
    5f3c:	4b87      	ldr	r3, [pc, #540]	; (615c <set_trx_state+0x280>)
    5f3e:	615a      	str	r2, [r3, #20]
		while (!tal_awake_end_flag) {
    5f40:	4a80      	ldr	r2, [pc, #512]	; (6144 <set_trx_state+0x268>)
    5f42:	7813      	ldrb	r3, [r2, #0]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d0fc      	beq.n	5f42 <set_trx_state+0x66>
	if (cpu_irq_is_enabled_flags(flags))
    5f48:	23ff      	movs	r3, #255	; 0xff
    5f4a:	420b      	tst	r3, r1
    5f4c:	d005      	beq.n	5f5a <set_trx_state+0x7e>
		cpu_irq_enable();
    5f4e:	2201      	movs	r2, #1
    5f50:	4b81      	ldr	r3, [pc, #516]	; (6158 <set_trx_state+0x27c>)
    5f52:	701a      	strb	r2, [r3, #0]
    5f54:	f3bf 8f5f 	dmb	sy
    5f58:	b662      	cpsie	i
		trx_reg_read(RG_IRQ_STATUS);
    5f5a:	200f      	movs	r0, #15
    5f5c:	4b80      	ldr	r3, [pc, #512]	; (6160 <set_trx_state+0x284>)
    5f5e:	4798      	blx	r3
		trx_irq_init((FUNC_PTR)trx_irq_handler_cb);
    5f60:	4880      	ldr	r0, [pc, #512]	; (6164 <set_trx_state+0x288>)
    5f62:	4b7a      	ldr	r3, [pc, #488]	; (614c <set_trx_state+0x270>)
    5f64:	4798      	blx	r3
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    5f66:	2108      	movs	r1, #8
    5f68:	200e      	movs	r0, #14
    5f6a:	4b7f      	ldr	r3, [pc, #508]	; (6168 <set_trx_state+0x28c>)
    5f6c:	4798      	blx	r3
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    5f6e:	2301      	movs	r3, #1
    5f70:	2202      	movs	r2, #2
    5f72:	2104      	movs	r1, #4
    5f74:	200d      	movs	r0, #13
    5f76:	4d7d      	ldr	r5, [pc, #500]	; (616c <set_trx_state+0x290>)
    5f78:	47a8      	blx	r5
		tal_trx_status = TRX_OFF;
    5f7a:	2208      	movs	r2, #8
    5f7c:	4b6f      	ldr	r3, [pc, #444]	; (613c <set_trx_state+0x260>)
    5f7e:	701a      	strb	r2, [r3, #0]
			return TRX_OFF;
    5f80:	2008      	movs	r0, #8
		if ((trx_cmd == CMD_TRX_OFF) ||
    5f82:	2c08      	cmp	r4, #8
    5f84:	d03b      	beq.n	5ffe <set_trx_state+0x122>
    5f86:	2c03      	cmp	r4, #3
    5f88:	d039      	beq.n	5ffe <set_trx_state+0x122>
	switch (trx_cmd) { /* requested state */
    5f8a:	3c04      	subs	r4, #4
    5f8c:	b2e3      	uxtb	r3, r4
    5f8e:	2b15      	cmp	r3, #21
    5f90:	d82c      	bhi.n	5fec <set_trx_state+0x110>
    5f92:	009c      	lsls	r4, r3, #2
    5f94:	4b76      	ldr	r3, [pc, #472]	; (6170 <set_trx_state+0x294>)
    5f96:	591b      	ldr	r3, [r3, r4]
    5f98:	469f      	mov	pc, r3
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    5f9a:	2103      	movs	r1, #3
    5f9c:	2002      	movs	r0, #2
    5f9e:	4b72      	ldr	r3, [pc, #456]	; (6168 <set_trx_state+0x28c>)
    5fa0:	4798      	blx	r3
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
    5fa2:	2300      	movs	r3, #0
    5fa4:	2202      	movs	r2, #2
    5fa6:	2104      	movs	r1, #4
    5fa8:	200d      	movs	r0, #13
    5faa:	4c70      	ldr	r4, [pc, #448]	; (616c <set_trx_state+0x290>)
    5fac:	47a0      	blx	r4
		trx_reg_read(RG_IRQ_STATUS);
    5fae:	200f      	movs	r0, #15
    5fb0:	4b6b      	ldr	r3, [pc, #428]	; (6160 <set_trx_state+0x284>)
    5fb2:	4798      	blx	r3
		trx_bit_write(SR_IRQ_MASK, TRX_IRQ_4_CCA_ED_DONE);
    5fb4:	2310      	movs	r3, #16
    5fb6:	2200      	movs	r2, #0
    5fb8:	21ff      	movs	r1, #255	; 0xff
    5fba:	200e      	movs	r0, #14
    5fbc:	47a0      	blx	r4
		trx_bit_write(SR_IRQ_MASK, TRX_IRQ_4_CCA_ED_DONE);
    5fbe:	2310      	movs	r3, #16
    5fc0:	2200      	movs	r2, #0
    5fc2:	21ff      	movs	r1, #255	; 0xff
    5fc4:	200e      	movs	r0, #14
    5fc6:	47a0      	blx	r4
		tal_trx_status = TRX_SLEEP;
    5fc8:	4c5c      	ldr	r4, [pc, #368]	; (613c <set_trx_state+0x260>)
    5fca:	230f      	movs	r3, #15
    5fcc:	7023      	strb	r3, [r4, #0]
		PAL_WAIT_1_US();
    5fce:	2001      	movs	r0, #1
    5fd0:	4d68      	ldr	r5, [pc, #416]	; (6174 <set_trx_state+0x298>)
    5fd2:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    5fd4:	2280      	movs	r2, #128	; 0x80
    5fd6:	0352      	lsls	r2, r2, #13
    5fd8:	4b60      	ldr	r3, [pc, #384]	; (615c <set_trx_state+0x280>)
    5fda:	619a      	str	r2, [r3, #24]
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
    5fdc:	2023      	movs	r0, #35	; 0x23
    5fde:	47a8      	blx	r5
		return tal_trx_status;
    5fe0:	7820      	ldrb	r0, [r4, #0]
    5fe2:	e00c      	b.n	5ffe <set_trx_state+0x122>
		switch (tal_trx_status) {
    5fe4:	4b55      	ldr	r3, [pc, #340]	; (613c <set_trx_state+0x260>)
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	2b08      	cmp	r3, #8
    5fea:	d10a      	bne.n	6002 <set_trx_state+0x126>
		tal_trx_status = /* (tal_trx_status_t) */ trx_bit_read(
    5fec:	4d62      	ldr	r5, [pc, #392]	; (6178 <set_trx_state+0x29c>)
    5fee:	4c53      	ldr	r4, [pc, #332]	; (613c <set_trx_state+0x260>)
    5ff0:	2200      	movs	r2, #0
    5ff2:	211f      	movs	r1, #31
    5ff4:	2001      	movs	r0, #1
    5ff6:	47a8      	blx	r5
    5ff8:	7020      	strb	r0, [r4, #0]
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
    5ffa:	281f      	cmp	r0, #31
    5ffc:	d0f8      	beq.n	5ff0 <set_trx_state+0x114>
} /* set_trx_state() */
    5ffe:	b002      	add	sp, #8
    6000:	bd70      	pop	{r4, r5, r6, pc}
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    6002:	2108      	movs	r1, #8
    6004:	2002      	movs	r0, #2
    6006:	4b58      	ldr	r3, [pc, #352]	; (6168 <set_trx_state+0x28c>)
    6008:	4798      	blx	r3
			PAL_WAIT_1_US();
    600a:	2001      	movs	r0, #1
    600c:	4b59      	ldr	r3, [pc, #356]	; (6174 <set_trx_state+0x298>)
    600e:	4798      	blx	r3
			break;
    6010:	e7ec      	b.n	5fec <set_trx_state+0x110>
		switch (tal_trx_status) {
    6012:	2808      	cmp	r0, #8
    6014:	d0ea      	beq.n	5fec <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    6016:	2103      	movs	r1, #3
    6018:	2002      	movs	r0, #2
    601a:	4b53      	ldr	r3, [pc, #332]	; (6168 <set_trx_state+0x28c>)
    601c:	4798      	blx	r3
			PAL_WAIT_1_US();
    601e:	2001      	movs	r0, #1
    6020:	4b54      	ldr	r3, [pc, #336]	; (6174 <set_trx_state+0x298>)
    6022:	4798      	blx	r3
			break;
    6024:	e7e2      	b.n	5fec <set_trx_state+0x110>
		switch (tal_trx_status) {
    6026:	4b45      	ldr	r3, [pc, #276]	; (613c <set_trx_state+0x260>)
    6028:	781b      	ldrb	r3, [r3, #0]
    602a:	2b08      	cmp	r3, #8
    602c:	d011      	beq.n	6052 <set_trx_state+0x176>
    602e:	b2da      	uxtb	r2, r3
    6030:	2a08      	cmp	r2, #8
    6032:	d904      	bls.n	603e <set_trx_state+0x162>
    6034:	2b16      	cmp	r3, #22
    6036:	d004      	beq.n	6042 <set_trx_state+0x166>
    6038:	2b19      	cmp	r3, #25
    603a:	d1d7      	bne.n	5fec <set_trx_state+0x110>
    603c:	e001      	b.n	6042 <set_trx_state+0x166>
    603e:	2b06      	cmp	r3, #6
    6040:	d1d4      	bne.n	5fec <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    6042:	2109      	movs	r1, #9
    6044:	2002      	movs	r0, #2
    6046:	4b48      	ldr	r3, [pc, #288]	; (6168 <set_trx_state+0x28c>)
    6048:	4798      	blx	r3
			PAL_WAIT_1_US();
    604a:	2001      	movs	r0, #1
    604c:	4b49      	ldr	r3, [pc, #292]	; (6174 <set_trx_state+0x298>)
    604e:	4798      	blx	r3
			break;
    6050:	e7cc      	b.n	5fec <set_trx_state+0x110>
			switch_pll_on();
    6052:	4b4a      	ldr	r3, [pc, #296]	; (617c <set_trx_state+0x2a0>)
    6054:	4798      	blx	r3
			break;
    6056:	e7c9      	b.n	5fec <set_trx_state+0x110>
		switch (tal_trx_status) {
    6058:	4b38      	ldr	r3, [pc, #224]	; (613c <set_trx_state+0x260>)
    605a:	781b      	ldrb	r3, [r3, #0]
    605c:	2b08      	cmp	r3, #8
    605e:	d006      	beq.n	606e <set_trx_state+0x192>
    6060:	2b09      	cmp	r3, #9
    6062:	d0c3      	beq.n	5fec <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
    6064:	2104      	movs	r1, #4
    6066:	2002      	movs	r0, #2
    6068:	4b3f      	ldr	r3, [pc, #252]	; (6168 <set_trx_state+0x28c>)
    606a:	4798      	blx	r3
			break;
    606c:	e7be      	b.n	5fec <set_trx_state+0x110>
			switch_pll_on();
    606e:	4b43      	ldr	r3, [pc, #268]	; (617c <set_trx_state+0x2a0>)
    6070:	4798      	blx	r3
			break;
    6072:	e7bb      	b.n	5fec <set_trx_state+0x110>
		switch (tal_trx_status) {
    6074:	4b31      	ldr	r3, [pc, #196]	; (613c <set_trx_state+0x260>)
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	2b09      	cmp	r3, #9
    607a:	d012      	beq.n	60a2 <set_trx_state+0x1c6>
    607c:	b2da      	uxtb	r2, r3
    607e:	2a09      	cmp	r2, #9
    6080:	d80b      	bhi.n	609a <set_trx_state+0x1be>
    6082:	2b08      	cmp	r3, #8
    6084:	d1b2      	bne.n	5fec <set_trx_state+0x110>
			switch_pll_on();
    6086:	4b3d      	ldr	r3, [pc, #244]	; (617c <set_trx_state+0x2a0>)
    6088:	4798      	blx	r3
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    608a:	2106      	movs	r1, #6
    608c:	2002      	movs	r0, #2
    608e:	4b36      	ldr	r3, [pc, #216]	; (6168 <set_trx_state+0x28c>)
    6090:	4798      	blx	r3
			PAL_WAIT_1_US();
    6092:	2001      	movs	r0, #1
    6094:	4b37      	ldr	r3, [pc, #220]	; (6174 <set_trx_state+0x298>)
    6096:	4798      	blx	r3
			break;
    6098:	e7a8      	b.n	5fec <set_trx_state+0x110>
		switch (tal_trx_status) {
    609a:	2b16      	cmp	r3, #22
    609c:	d001      	beq.n	60a2 <set_trx_state+0x1c6>
    609e:	2b19      	cmp	r3, #25
    60a0:	d1a4      	bne.n	5fec <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    60a2:	2106      	movs	r1, #6
    60a4:	2002      	movs	r0, #2
    60a6:	4b30      	ldr	r3, [pc, #192]	; (6168 <set_trx_state+0x28c>)
    60a8:	4798      	blx	r3
			PAL_WAIT_1_US();
    60aa:	2001      	movs	r0, #1
    60ac:	4b31      	ldr	r3, [pc, #196]	; (6174 <set_trx_state+0x298>)
    60ae:	4798      	blx	r3
			break;
    60b0:	e79c      	b.n	5fec <set_trx_state+0x110>
		switch (tal_trx_status) {
    60b2:	4b22      	ldr	r3, [pc, #136]	; (613c <set_trx_state+0x260>)
    60b4:	781b      	ldrb	r3, [r3, #0]
    60b6:	2b08      	cmp	r3, #8
    60b8:	d013      	beq.n	60e2 <set_trx_state+0x206>
    60ba:	b2da      	uxtb	r2, r3
    60bc:	2a08      	cmp	r2, #8
    60be:	d905      	bls.n	60cc <set_trx_state+0x1f0>
    60c0:	2b09      	cmp	r3, #9
    60c2:	d006      	beq.n	60d2 <set_trx_state+0x1f6>
    60c4:	2b19      	cmp	r3, #25
    60c6:	d000      	beq.n	60ca <set_trx_state+0x1ee>
    60c8:	e790      	b.n	5fec <set_trx_state+0x110>
    60ca:	e002      	b.n	60d2 <set_trx_state+0x1f6>
    60cc:	2b06      	cmp	r3, #6
    60ce:	d000      	beq.n	60d2 <set_trx_state+0x1f6>
    60d0:	e78c      	b.n	5fec <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    60d2:	2116      	movs	r1, #22
    60d4:	2002      	movs	r0, #2
    60d6:	4b24      	ldr	r3, [pc, #144]	; (6168 <set_trx_state+0x28c>)
    60d8:	4798      	blx	r3
			PAL_WAIT_1_US();
    60da:	2001      	movs	r0, #1
    60dc:	4b25      	ldr	r3, [pc, #148]	; (6174 <set_trx_state+0x298>)
    60de:	4798      	blx	r3
			break;
    60e0:	e784      	b.n	5fec <set_trx_state+0x110>
			switch_pll_on(); /* state change from TRX_OFF to
    60e2:	4b26      	ldr	r3, [pc, #152]	; (617c <set_trx_state+0x2a0>)
    60e4:	4798      	blx	r3
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    60e6:	2116      	movs	r1, #22
    60e8:	2002      	movs	r0, #2
    60ea:	4b1f      	ldr	r3, [pc, #124]	; (6168 <set_trx_state+0x28c>)
    60ec:	4798      	blx	r3
			PAL_WAIT_1_US();
    60ee:	2001      	movs	r0, #1
    60f0:	4b20      	ldr	r3, [pc, #128]	; (6174 <set_trx_state+0x298>)
    60f2:	4798      	blx	r3
			break;
    60f4:	e77a      	b.n	5fec <set_trx_state+0x110>
		switch (tal_trx_status) {
    60f6:	4b11      	ldr	r3, [pc, #68]	; (613c <set_trx_state+0x260>)
    60f8:	781b      	ldrb	r3, [r3, #0]
    60fa:	2b08      	cmp	r3, #8
    60fc:	d013      	beq.n	6126 <set_trx_state+0x24a>
    60fe:	b2da      	uxtb	r2, r3
    6100:	2a08      	cmp	r2, #8
    6102:	d905      	bls.n	6110 <set_trx_state+0x234>
    6104:	2b09      	cmp	r3, #9
    6106:	d006      	beq.n	6116 <set_trx_state+0x23a>
    6108:	2b16      	cmp	r3, #22
    610a:	d000      	beq.n	610e <set_trx_state+0x232>
    610c:	e76e      	b.n	5fec <set_trx_state+0x110>
    610e:	e002      	b.n	6116 <set_trx_state+0x23a>
    6110:	2b06      	cmp	r3, #6
    6112:	d000      	beq.n	6116 <set_trx_state+0x23a>
    6114:	e76a      	b.n	5fec <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    6116:	2119      	movs	r1, #25
    6118:	2002      	movs	r0, #2
    611a:	4b13      	ldr	r3, [pc, #76]	; (6168 <set_trx_state+0x28c>)
    611c:	4798      	blx	r3
			PAL_WAIT_1_US();
    611e:	2001      	movs	r0, #1
    6120:	4b14      	ldr	r3, [pc, #80]	; (6174 <set_trx_state+0x298>)
    6122:	4798      	blx	r3
			break;
    6124:	e762      	b.n	5fec <set_trx_state+0x110>
			switch_pll_on(); /* state change from TRX_OFF to
    6126:	4b15      	ldr	r3, [pc, #84]	; (617c <set_trx_state+0x2a0>)
    6128:	4798      	blx	r3
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    612a:	2119      	movs	r1, #25
    612c:	2002      	movs	r0, #2
    612e:	4b0e      	ldr	r3, [pc, #56]	; (6168 <set_trx_state+0x28c>)
    6130:	4798      	blx	r3
			PAL_WAIT_1_US();
    6132:	2001      	movs	r0, #1
    6134:	4b0f      	ldr	r3, [pc, #60]	; (6174 <set_trx_state+0x298>)
    6136:	4798      	blx	r3
			break;
    6138:	e758      	b.n	5fec <set_trx_state+0x110>
    613a:	46c0      	nop			; (mov r8, r8)
    613c:	20000bdb 	.word	0x20000bdb
    6140:	0000a2a0 	.word	0x0000a2a0
    6144:	20000be4 	.word	0x20000be4
    6148:	0000659d 	.word	0x0000659d
    614c:	00007101 	.word	0x00007101
    6150:	40001800 	.word	0x40001800
    6154:	000040ed 	.word	0x000040ed
    6158:	2000000c 	.word	0x2000000c
    615c:	41004400 	.word	0x41004400
    6160:	00006f05 	.word	0x00006f05
    6164:	0000655d 	.word	0x0000655d
    6168:	00007001 	.word	0x00007001
    616c:	00007125 	.word	0x00007125
    6170:	0000a2fc 	.word	0x0000a2fc
    6174:	00003ff9 	.word	0x00003ff9
    6178:	0000710d 	.word	0x0000710d
    617c:	00005e21 	.word	0x00005e21

00006180 <tal_task>:
{
    6180:	b510      	push	{r4, lr}
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
    6182:	4b17      	ldr	r3, [pc, #92]	; (61e0 <tal_task+0x60>)
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	2b00      	cmp	r3, #0
    6188:	d00d      	beq.n	61a6 <tal_task+0x26>
    618a:	4b16      	ldr	r3, [pc, #88]	; (61e4 <tal_task+0x64>)
    618c:	781b      	ldrb	r3, [r3, #0]
    618e:	2b00      	cmp	r3, #0
    6190:	d109      	bne.n	61a6 <tal_task+0x26>
		if (tal_rx_buffer == NULL) {
    6192:	4b15      	ldr	r3, [pc, #84]	; (61e8 <tal_task+0x68>)
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	2b00      	cmp	r3, #0
    6198:	d010      	beq.n	61bc <tal_task+0x3c>
			tal_rx_on_required = false;
    619a:	2200      	movs	r2, #0
    619c:	4b10      	ldr	r3, [pc, #64]	; (61e0 <tal_task+0x60>)
    619e:	701a      	strb	r2, [r3, #0]
			set_trx_state(CMD_RX_AACK_ON);
    61a0:	2016      	movs	r0, #22
    61a2:	4b12      	ldr	r3, [pc, #72]	; (61ec <tal_task+0x6c>)
    61a4:	4798      	blx	r3
	if (tal_incoming_frame_queue.size > 0) {
    61a6:	4b12      	ldr	r3, [pc, #72]	; (61f0 <tal_task+0x70>)
    61a8:	7a1b      	ldrb	r3, [r3, #8]
    61aa:	2b00      	cmp	r3, #0
    61ac:	d10e      	bne.n	61cc <tal_task+0x4c>
	switch (tal_state) {
    61ae:	4b0d      	ldr	r3, [pc, #52]	; (61e4 <tal_task+0x64>)
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	2b02      	cmp	r3, #2
    61b4:	d101      	bne.n	61ba <tal_task+0x3a>
		tx_done_handling(); /* see tal_tx.c */
    61b6:	4b0f      	ldr	r3, [pc, #60]	; (61f4 <tal_task+0x74>)
    61b8:	4798      	blx	r3
} /* tal_task() */
    61ba:	bd10      	pop	{r4, pc}
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    61bc:	2090      	movs	r0, #144	; 0x90
    61be:	4b0e      	ldr	r3, [pc, #56]	; (61f8 <tal_task+0x78>)
    61c0:	4798      	blx	r3
    61c2:	4b09      	ldr	r3, [pc, #36]	; (61e8 <tal_task+0x68>)
    61c4:	6018      	str	r0, [r3, #0]
		if (NULL != tal_rx_buffer) {
    61c6:	2800      	cmp	r0, #0
    61c8:	d0ed      	beq.n	61a6 <tal_task+0x26>
    61ca:	e7e6      	b.n	619a <tal_task+0x1a>
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
    61cc:	2100      	movs	r1, #0
    61ce:	4808      	ldr	r0, [pc, #32]	; (61f0 <tal_task+0x70>)
    61d0:	4b0a      	ldr	r3, [pc, #40]	; (61fc <tal_task+0x7c>)
    61d2:	4798      	blx	r3
		if (NULL != rx_frame) {
    61d4:	2800      	cmp	r0, #0
    61d6:	d0ea      	beq.n	61ae <tal_task+0x2e>
			process_incoming_frame(rx_frame);
    61d8:	4b09      	ldr	r3, [pc, #36]	; (6200 <tal_task+0x80>)
    61da:	4798      	blx	r3
    61dc:	e7e7      	b.n	61ae <tal_task+0x2e>
    61de:	46c0      	nop			; (mov r8, r8)
    61e0:	20000ba8 	.word	0x20000ba8
    61e4:	20000be5 	.word	0x20000be5
    61e8:	200003ac 	.word	0x200003ac
    61ec:	00005edd 	.word	0x00005edd
    61f0:	20000bac 	.word	0x20000bac
    61f4:	00006a85 	.word	0x00006a85
    61f8:	00005bad 	.word	0x00005bad
    61fc:	00005e11 	.word	0x00005e11
    6200:	000069b1 	.word	0x000069b1

00006204 <trx_config>:
 * \brief Configures the transceiver
 *
 * This function is called to configure the transceiver after reset.
 */
void trx_config(void)
{
    6204:	b570      	push	{r4, r5, r6, lr}
	/* Set pin driver strength */
	trx_bit_write(SR_CLKM_SHA_SEL, CLKM_SHA_DISABLE);
    6206:	2300      	movs	r3, #0
    6208:	2203      	movs	r2, #3
    620a:	2108      	movs	r1, #8
    620c:	2003      	movs	r0, #3
    620e:	4c1f      	ldr	r4, [pc, #124]	; (628c <trx_config+0x88>)
    6210:	47a0      	blx	r4
	trx_bit_write(SR_CLKM_CTRL, CLKM_1MHZ);
    6212:	2301      	movs	r3, #1
    6214:	2200      	movs	r2, #0
    6216:	2107      	movs	r1, #7
    6218:	2003      	movs	r0, #3
    621a:	47a0      	blx	r4
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    621c:	4b1c      	ldr	r3, [pc, #112]	; (6290 <trx_config+0x8c>)
    621e:	4798      	blx	r3
    6220:	0005      	movs	r5, r0
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    6222:	b2c1      	uxtb	r1, r0
    6224:	202d      	movs	r0, #45	; 0x2d
    6226:	4e1b      	ldr	r6, [pc, #108]	; (6294 <trx_config+0x90>)
    6228:	47b0      	blx	r6
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    622a:	b2ab      	uxth	r3, r5
    622c:	0a1b      	lsrs	r3, r3, #8
    622e:	2200      	movs	r2, #0
    6230:	2107      	movs	r1, #7
    6232:	202e      	movs	r0, #46	; 0x2e
    6234:	47a0      	blx	r4
	/*
	 * Since the TAL is supporting 802.15.4-2006,
	 * frames with version number 0 (compatible to 802.15.4-2003) and
	 * with version number 1 (compatible to 802.15.4-2006) are acknowledged.
	 */
	trx_bit_write(SR_AACK_FVN_MODE, FRAME_VERSION_01);
    6236:	2301      	movs	r3, #1
    6238:	2206      	movs	r2, #6
    623a:	21c0      	movs	r1, #192	; 0xc0
    623c:	202e      	movs	r0, #46	; 0x2e
    623e:	47a0      	blx	r4
	trx_bit_write(SR_AACK_SET_PD, SET_PD); /* ACKs for data requests,
    6240:	2301      	movs	r3, #1
    6242:	2205      	movs	r2, #5
    6244:	2120      	movs	r1, #32
    6246:	202e      	movs	r0, #46	; 0x2e
    6248:	47a0      	blx	r4
	                                       * indicate pending data */
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    624a:	2301      	movs	r3, #1
    624c:	2207      	movs	r2, #7
    624e:	2180      	movs	r1, #128	; 0x80
    6250:	200c      	movs	r0, #12
    6252:	47a0      	blx	r4
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT); /* The TRX_END
    6254:	2108      	movs	r1, #8
    6256:	200e      	movs	r0, #14
    6258:	47b0      	blx	r6
	                                              * interrupt of the
	                                              * transceiver is
	                                              * enabled. */
	trx_reg_write(RG_TRX_RPC, 0xFF); /* RPC feature configuration. */
    625a:	21ff      	movs	r1, #255	; 0xff
    625c:	2016      	movs	r0, #22
    625e:	47b0      	blx	r6

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
    6260:	2301      	movs	r3, #1
    6262:	2200      	movs	r2, #0
    6264:	2103      	movs	r1, #3
    6266:	200d      	movs	r0, #13
    6268:	47a0      	blx	r4
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    626a:	2303      	movs	r3, #3
    626c:	2200      	movs	r2, #0
    626e:	210f      	movs	r1, #15
    6270:	200a      	movs	r0, #10
    6272:	47a0      	blx	r4
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    6274:	2301      	movs	r3, #1
    6276:	2203      	movs	r2, #3
    6278:	2108      	movs	r1, #8
    627a:	200d      	movs	r0, #13
    627c:	47a0      	blx	r4
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    627e:	2301      	movs	r3, #1
    6280:	2202      	movs	r2, #2
    6282:	2104      	movs	r1, #4
    6284:	200d      	movs	r0, #13
    6286:	47a0      	blx	r4

#ifdef EXT_RF_FRONT_END_CTRL
	/* Enable RF front end control */
	trx_bit_write(SR_PA_EXT_EN, 1);
#endif
}
    6288:	bd70      	pop	{r4, r5, r6, pc}
    628a:	46c0      	nop			; (mov r8, r8)
    628c:	00007125 	.word	0x00007125
    6290:	00008319 	.word	0x00008319
    6294:	00007001 	.word	0x00007001

00006298 <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
    6298:	b5f0      	push	{r4, r5, r6, r7, lr}
    629a:	b083      	sub	sp, #12
	uint16_t seed = 0;
	uint8_t cur_random_val = 0;

	/* RPC could influence the randomness; therefore disable it here. */
	uint8_t previous_RPC_value = trx_reg_read(RG_TRX_RPC);
    629c:	2016      	movs	r0, #22
    629e:	4b1f      	ldr	r3, [pc, #124]	; (631c <tal_generate_rand_seed+0x84>)
    62a0:	4798      	blx	r3
    62a2:	9001      	str	r0, [sp, #4]
	trx_reg_write(RG_TRX_RPC, 0xC1);
    62a4:	21c1      	movs	r1, #193	; 0xc1
    62a6:	2016      	movs	r0, #22
    62a8:	4b1d      	ldr	r3, [pc, #116]	; (6320 <tal_generate_rand_seed+0x88>)
    62aa:	4798      	blx	r3

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	ENTER_TRX_REGION();
    62ac:	2100      	movs	r1, #0
    62ae:	2000      	movs	r0, #0
    62b0:	4b1c      	ldr	r3, [pc, #112]	; (6324 <tal_generate_rand_seed+0x8c>)
    62b2:	4798      	blx	r3

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    62b4:	4c1c      	ldr	r4, [pc, #112]	; (6328 <tal_generate_rand_seed+0x90>)
    62b6:	2006      	movs	r0, #6
    62b8:	47a0      	blx	r4
	} while (trx_state != RX_ON);
    62ba:	2806      	cmp	r0, #6
    62bc:	d1fb      	bne.n	62b6 <tal_generate_rand_seed+0x1e>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    62be:	2300      	movs	r3, #0
    62c0:	2207      	movs	r2, #7
    62c2:	2180      	movs	r1, #128	; 0x80
    62c4:	300f      	adds	r0, #15
    62c6:	4c19      	ldr	r4, [pc, #100]	; (632c <tal_generate_rand_seed+0x94>)
    62c8:	47a0      	blx	r4
    62ca:	2608      	movs	r6, #8
	uint16_t seed = 0;
    62cc:	2400      	movs	r4, #0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    62ce:	4d18      	ldr	r5, [pc, #96]	; (6330 <tal_generate_rand_seed+0x98>)
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    62d0:	4f18      	ldr	r7, [pc, #96]	; (6334 <tal_generate_rand_seed+0x9c>)
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    62d2:	2205      	movs	r2, #5
    62d4:	2160      	movs	r1, #96	; 0x60
    62d6:	2006      	movs	r0, #6
    62d8:	47a8      	blx	r5
		seed = seed << 2;
    62da:	00a4      	lsls	r4, r4, #2
    62dc:	b2a4      	uxth	r4, r4
		seed |= cur_random_val;
    62de:	4304      	orrs	r4, r0
    62e0:	b2a4      	uxth	r4, r4
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    62e2:	2001      	movs	r0, #1
    62e4:	47b8      	blx	r7
    62e6:	3e01      	subs	r6, #1
    62e8:	b2f6      	uxtb	r6, r6
	for (uint8_t i = 0; i < 8; i++) {
    62ea:	2e00      	cmp	r6, #0
    62ec:	d1f1      	bne.n	62d2 <tal_generate_rand_seed+0x3a>
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    62ee:	2003      	movs	r0, #3
    62f0:	4b0d      	ldr	r3, [pc, #52]	; (6328 <tal_generate_rand_seed+0x90>)
    62f2:	4798      	blx	r3

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_read(RG_IRQ_STATUS);
    62f4:	200f      	movs	r0, #15
    62f6:	4b09      	ldr	r3, [pc, #36]	; (631c <tal_generate_rand_seed+0x84>)
    62f8:	4798      	blx	r3
    62fa:	2201      	movs	r2, #1
    62fc:	4b0e      	ldr	r3, [pc, #56]	; (6338 <tal_generate_rand_seed+0xa0>)
    62fe:	611a      	str	r2, [r3, #16]
	pal_trx_irq_flag_clr();
	LEAVE_TRX_REGION();
    6300:	2100      	movs	r1, #0
    6302:	2000      	movs	r0, #0
    6304:	4b0d      	ldr	r3, [pc, #52]	; (633c <tal_generate_rand_seed+0xa4>)
    6306:	4798      	blx	r3

	/* Set the seed for the random number generator. */
	srand(seed);
    6308:	0020      	movs	r0, r4
    630a:	4b0d      	ldr	r3, [pc, #52]	; (6340 <tal_generate_rand_seed+0xa8>)
    630c:	4798      	blx	r3

	/* Restore RPC settings. */
	trx_reg_write(RG_TRX_RPC, previous_RPC_value);
    630e:	9901      	ldr	r1, [sp, #4]
    6310:	2016      	movs	r0, #22
    6312:	4b03      	ldr	r3, [pc, #12]	; (6320 <tal_generate_rand_seed+0x88>)
    6314:	4798      	blx	r3
}
    6316:	b003      	add	sp, #12
    6318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    631a:	46c0      	nop			; (mov r8, r8)
    631c:	00006f05 	.word	0x00006f05
    6320:	00007001 	.word	0x00007001
    6324:	0000410d 	.word	0x0000410d
    6328:	00005edd 	.word	0x00005edd
    632c:	00007125 	.word	0x00007125
    6330:	0000710d 	.word	0x0000710d
    6334:	00003ff9 	.word	0x00003ff9
    6338:	40001800 	.word	0x40001800
    633c:	000040ed 	.word	0x000040ed
    6340:	000082bd 	.word	0x000082bd

00006344 <internal_tal_reset>:
{
    6344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6346:	0005      	movs	r5, r0
		port_base->OUTCLR.reg = pin_mask;
    6348:	2280      	movs	r2, #128	; 0x80
    634a:	0352      	lsls	r2, r2, #13
    634c:	4b1c      	ldr	r3, [pc, #112]	; (63c0 <internal_tal_reset+0x7c>)
    634e:	615a      	str	r2, [r3, #20]
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    6350:	20d2      	movs	r0, #210	; 0xd2
    6352:	4c1c      	ldr	r4, [pc, #112]	; (63c4 <internal_tal_reset+0x80>)
    6354:	47a0      	blx	r4
    6356:	4e1c      	ldr	r6, [pc, #112]	; (63c8 <internal_tal_reset+0x84>)
    6358:	2780      	movs	r7, #128	; 0x80
    635a:	023f      	lsls	r7, r7, #8
    635c:	6177      	str	r7, [r6, #20]
	pal_timer_delay(RST_PULSE_WIDTH_US);
    635e:	200a      	movs	r0, #10
    6360:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    6362:	61b7      	str	r7, [r6, #24]
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    6364:	2064      	movs	r0, #100	; 0x64
    6366:	47a0      	blx	r4
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6368:	2200      	movs	r2, #0
    636a:	211f      	movs	r1, #31
    636c:	2001      	movs	r0, #1
    636e:	4b17      	ldr	r3, [pc, #92]	; (63cc <internal_tal_reset+0x88>)
    6370:	4798      	blx	r3
    6372:	240a      	movs	r4, #10
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    6374:	4f13      	ldr	r7, [pc, #76]	; (63c4 <internal_tal_reset+0x80>)
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6376:	4e15      	ldr	r6, [pc, #84]	; (63cc <internal_tal_reset+0x88>)
	} while (trx_status != TRX_OFF);
    6378:	2808      	cmp	r0, #8
    637a:	d00b      	beq.n	6394 <internal_tal_reset+0x50>
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    637c:	2064      	movs	r0, #100	; 0x64
    637e:	47b8      	blx	r7
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6380:	2200      	movs	r2, #0
    6382:	211f      	movs	r1, #31
    6384:	2001      	movs	r0, #1
    6386:	47b0      	blx	r6
    6388:	3c01      	subs	r4, #1
    638a:	b2e4      	uxtb	r4, r4
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    638c:	2c00      	cmp	r4, #0
    638e:	d1f3      	bne.n	6378 <internal_tal_reset+0x34>
		return FAILURE;
    6390:	2085      	movs	r0, #133	; 0x85
}
    6392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	tal_trx_status = TRX_OFF;
    6394:	2208      	movs	r2, #8
    6396:	4b0e      	ldr	r3, [pc, #56]	; (63d0 <internal_tal_reset+0x8c>)
    6398:	701a      	strb	r2, [r3, #0]
	tal_generate_rand_seed();
    639a:	4b0e      	ldr	r3, [pc, #56]	; (63d4 <internal_tal_reset+0x90>)
    639c:	4798      	blx	r3
	trx_config();
    639e:	4b0e      	ldr	r3, [pc, #56]	; (63d8 <internal_tal_reset+0x94>)
    63a0:	4798      	blx	r3
	if (set_default_pib) {
    63a2:	2d00      	cmp	r5, #0
    63a4:	d108      	bne.n	63b8 <internal_tal_reset+0x74>
	write_all_tal_pib_to_trx(); /* implementation can be found in
    63a6:	4b0d      	ldr	r3, [pc, #52]	; (63dc <internal_tal_reset+0x98>)
    63a8:	4798      	blx	r3
	tal_state = TAL_IDLE;
    63aa:	2300      	movs	r3, #0
    63ac:	4a0c      	ldr	r2, [pc, #48]	; (63e0 <internal_tal_reset+0x9c>)
    63ae:	7013      	strb	r3, [r2, #0]
	tal_rx_on_required = false;
    63b0:	4a0c      	ldr	r2, [pc, #48]	; (63e4 <internal_tal_reset+0xa0>)
    63b2:	7013      	strb	r3, [r2, #0]
	return MAC_SUCCESS;
    63b4:	2000      	movs	r0, #0
    63b6:	e7ec      	b.n	6392 <internal_tal_reset+0x4e>
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    63b8:	4b0b      	ldr	r3, [pc, #44]	; (63e8 <internal_tal_reset+0xa4>)
    63ba:	4798      	blx	r3
    63bc:	e7f3      	b.n	63a6 <internal_tal_reset+0x62>
    63be:	46c0      	nop			; (mov r8, r8)
    63c0:	41004400 	.word	0x41004400
    63c4:	00003ff9 	.word	0x00003ff9
    63c8:	41004480 	.word	0x41004480
    63cc:	0000710d 	.word	0x0000710d
    63d0:	20000bdb 	.word	0x20000bdb
    63d4:	00006299 	.word	0x00006299
    63d8:	00006205 	.word	0x00006205
    63dc:	00006651 	.word	0x00006651
    63e0:	20000be5 	.word	0x20000be5
    63e4:	20000ba8 	.word	0x20000ba8
    63e8:	000065b9 	.word	0x000065b9

000063ec <tal_init>:
{
    63ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ee:	46c6      	mov	lr, r8
    63f0:	b500      	push	{lr}
	if(pal_init() != MAC_SUCCESS) 
    63f2:	4b46      	ldr	r3, [pc, #280]	; (650c <tal_init+0x120>)
    63f4:	4798      	blx	r3
		return FAILURE;
    63f6:	2485      	movs	r4, #133	; 0x85
	if(pal_init() != MAC_SUCCESS) 
    63f8:	2800      	cmp	r0, #0
    63fa:	d003      	beq.n	6404 <tal_init+0x18>
} /* tal_init() */
    63fc:	0020      	movs	r0, r4
    63fe:	bc04      	pop	{r2}
    6400:	4690      	mov	r8, r2
    6402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6404:	4c42      	ldr	r4, [pc, #264]	; (6510 <tal_init+0x124>)
    6406:	2580      	movs	r5, #128	; 0x80
    6408:	022d      	lsls	r5, r5, #8
    640a:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    640c:	2280      	movs	r2, #128	; 0x80
    640e:	0352      	lsls	r2, r2, #13
    6410:	4b40      	ldr	r3, [pc, #256]	; (6514 <tal_init+0x128>)
    6412:	615a      	str	r2, [r3, #20]
	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    6414:	304b      	adds	r0, #75	; 0x4b
    6416:	30ff      	adds	r0, #255	; 0xff
    6418:	4e3f      	ldr	r6, [pc, #252]	; (6518 <tal_init+0x12c>)
    641a:	47b0      	blx	r6
    641c:	6165      	str	r5, [r4, #20]
	pal_timer_delay(RST_PULSE_WIDTH_US);
    641e:	200a      	movs	r0, #10
    6420:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    6422:	61a5      	str	r5, [r4, #24]
    6424:	240a      	movs	r4, #10
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    6426:	4e3c      	ldr	r6, [pc, #240]	; (6518 <tal_init+0x12c>)
	}while (trx_reg_read(RG_PART_NUM) != PART_NUM_AT86RF233);
    6428:	4d3c      	ldr	r5, [pc, #240]	; (651c <tal_init+0x130>)
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    642a:	2064      	movs	r0, #100	; 0x64
    642c:	47b0      	blx	r6
	}while (trx_reg_read(RG_PART_NUM) != PART_NUM_AT86RF233);
    642e:	201c      	movs	r0, #28
    6430:	47a8      	blx	r5
    6432:	280b      	cmp	r0, #11
    6434:	d005      	beq.n	6442 <tal_init+0x56>
    6436:	3c01      	subs	r4, #1
    6438:	b2e4      	uxtb	r4, r4
		if(poll_counter == P_ON_TO_CLKM_ATTEMPTS) 
    643a:	2c00      	cmp	r4, #0
    643c:	d1f5      	bne.n	642a <tal_init+0x3e>
		return FAILURE;
    643e:	2485      	movs	r4, #133	; 0x85
    6440:	e7dc      	b.n	63fc <tal_init+0x10>
	trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    6442:	2108      	movs	r1, #8
    6444:	3809      	subs	r0, #9
    6446:	4b36      	ldr	r3, [pc, #216]	; (6520 <tal_init+0x134>)
    6448:	4798      	blx	r3
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    644a:	2064      	movs	r0, #100	; 0x64
    644c:	4b32      	ldr	r3, [pc, #200]	; (6518 <tal_init+0x12c>)
    644e:	4798      	blx	r3
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6450:	2200      	movs	r2, #0
    6452:	211f      	movs	r1, #31
    6454:	2001      	movs	r0, #1
    6456:	4b33      	ldr	r3, [pc, #204]	; (6524 <tal_init+0x138>)
    6458:	4798      	blx	r3
    645a:	240a      	movs	r4, #10
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    645c:	4e2e      	ldr	r6, [pc, #184]	; (6518 <tal_init+0x12c>)
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    645e:	4d31      	ldr	r5, [pc, #196]	; (6524 <tal_init+0x138>)
	}while(trx_status != TRX_OFF);
    6460:	2808      	cmp	r0, #8
    6462:	d00a      	beq.n	647a <tal_init+0x8e>
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    6464:	2064      	movs	r0, #100	; 0x64
    6466:	47b0      	blx	r6
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6468:	2200      	movs	r2, #0
    646a:	211f      	movs	r1, #31
    646c:	2001      	movs	r0, #1
    646e:	47a8      	blx	r5
    6470:	3c01      	subs	r4, #1
    6472:	b2e4      	uxtb	r4, r4
		if(poll_counter == P_ON_TO_TRX_OFF_ATTEMPTS) 
    6474:	2c00      	cmp	r4, #0
    6476:	d1f3      	bne.n	6460 <tal_init+0x74>
    6478:	e7e1      	b.n	643e <tal_init+0x52>
	tal_trx_status = TRX_OFF;
    647a:	2208      	movs	r2, #8
    647c:	4b2a      	ldr	r3, [pc, #168]	; (6528 <tal_init+0x13c>)
    647e:	701a      	strb	r2, [r3, #0]
	if(internal_tal_reset(true) != MAC_SUCCESS) 
    6480:	3807      	subs	r0, #7
    6482:	4b2a      	ldr	r3, [pc, #168]	; (652c <tal_init+0x140>)
    6484:	4798      	blx	r3
    6486:	1e04      	subs	r4, r0, #0
    6488:	d001      	beq.n	648e <tal_init+0xa2>
		return FAILURE;
    648a:	2485      	movs	r4, #133	; 0x85
    648c:	e7b6      	b.n	63fc <tal_init+0x10>
	while((tal_pib.IeeeAddress == 0x0000000000000000) ||
    648e:	4f28      	ldr	r7, [pc, #160]	; (6530 <tal_init+0x144>)
			*ptr_pib++ = rand();
    6490:	4e28      	ldr	r6, [pc, #160]	; (6534 <tal_init+0x148>)
    6492:	e008      	b.n	64a6 <tal_init+0xba>
    6494:	4d26      	ldr	r5, [pc, #152]	; (6530 <tal_init+0x144>)
    6496:	2308      	movs	r3, #8
    6498:	4698      	mov	r8, r3
    649a:	44a8      	add	r8, r5
    649c:	47b0      	blx	r6
    649e:	7028      	strb	r0, [r5, #0]
    64a0:	3501      	adds	r5, #1
		for(uint8_t i = 0; i < 8; i++) 
    64a2:	4545      	cmp	r5, r8
    64a4:	d1fa      	bne.n	649c <tal_init+0xb0>
	while((tal_pib.IeeeAddress == 0x0000000000000000) ||
    64a6:	7838      	ldrb	r0, [r7, #0]
    64a8:	7879      	ldrb	r1, [r7, #1]
    64aa:	0209      	lsls	r1, r1, #8
    64ac:	4308      	orrs	r0, r1
    64ae:	78b9      	ldrb	r1, [r7, #2]
    64b0:	0409      	lsls	r1, r1, #16
    64b2:	4301      	orrs	r1, r0
    64b4:	78f8      	ldrb	r0, [r7, #3]
    64b6:	0600      	lsls	r0, r0, #24
    64b8:	4308      	orrs	r0, r1
    64ba:	0002      	movs	r2, r0
    64bc:	7938      	ldrb	r0, [r7, #4]
    64be:	7979      	ldrb	r1, [r7, #5]
    64c0:	0209      	lsls	r1, r1, #8
    64c2:	4308      	orrs	r0, r1
    64c4:	79b9      	ldrb	r1, [r7, #6]
    64c6:	0409      	lsls	r1, r1, #16
    64c8:	4301      	orrs	r1, r0
    64ca:	79f8      	ldrb	r0, [r7, #7]
    64cc:	0600      	lsls	r0, r0, #24
    64ce:	4308      	orrs	r0, r1
    64d0:	0003      	movs	r3, r0
    64d2:	2001      	movs	r0, #1
    64d4:	4240      	negs	r0, r0
    64d6:	17c1      	asrs	r1, r0, #31
    64d8:	1812      	adds	r2, r2, r0
    64da:	414b      	adcs	r3, r1
    64dc:	1c59      	adds	r1, r3, #1
    64de:	d101      	bne.n	64e4 <tal_init+0xf8>
    64e0:	1cd3      	adds	r3, r2, #3
    64e2:	d8d7      	bhi.n	6494 <tal_init+0xa8>
	trx_irq_init((FUNC_PTR)trx_irq_handler_cb);
    64e4:	4814      	ldr	r0, [pc, #80]	; (6538 <tal_init+0x14c>)
    64e6:	4b15      	ldr	r3, [pc, #84]	; (653c <tal_init+0x150>)
    64e8:	4798      	blx	r3
	pal_trx_irq_en(); /* Enable transceiver main interrupt. */
    64ea:	2100      	movs	r1, #0
    64ec:	2000      	movs	r0, #0
    64ee:	4b14      	ldr	r3, [pc, #80]	; (6540 <tal_init+0x154>)
    64f0:	4798      	blx	r3
	bmm_buffer_init();
    64f2:	4b14      	ldr	r3, [pc, #80]	; (6544 <tal_init+0x158>)
    64f4:	4798      	blx	r3
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    64f6:	2090      	movs	r0, #144	; 0x90
    64f8:	4b13      	ldr	r3, [pc, #76]	; (6548 <tal_init+0x15c>)
    64fa:	4798      	blx	r3
    64fc:	4b13      	ldr	r3, [pc, #76]	; (654c <tal_init+0x160>)
    64fe:	6018      	str	r0, [r3, #0]
	qmm_queue_init(&tal_incoming_frame_queue);
    6500:	4813      	ldr	r0, [pc, #76]	; (6550 <tal_init+0x164>)
    6502:	4b14      	ldr	r3, [pc, #80]	; (6554 <tal_init+0x168>)
    6504:	4798      	blx	r3
	tfa_init();
    6506:	4b14      	ldr	r3, [pc, #80]	; (6558 <tal_init+0x16c>)
    6508:	4798      	blx	r3
	return MAC_SUCCESS;
    650a:	e777      	b.n	63fc <tal_init+0x10>
    650c:	00005b21 	.word	0x00005b21
    6510:	41004480 	.word	0x41004480
    6514:	41004400 	.word	0x41004400
    6518:	00003ff9 	.word	0x00003ff9
    651c:	00006f05 	.word	0x00006f05
    6520:	00007001 	.word	0x00007001
    6524:	0000710d 	.word	0x0000710d
    6528:	20000bdb 	.word	0x20000bdb
    652c:	00006345 	.word	0x00006345
    6530:	20000bbc 	.word	0x20000bbc
    6534:	00008319 	.word	0x00008319
    6538:	0000655d 	.word	0x0000655d
    653c:	00007101 	.word	0x00007101
    6540:	000040ed 	.word	0x000040ed
    6544:	00005b61 	.word	0x00005b61
    6548:	00005bad 	.word	0x00005bad
    654c:	200003ac 	.word	0x200003ac
    6550:	20000bac 	.word	0x20000bac
    6554:	00005d6d 	.word	0x00005d6d
    6558:	00006bd5 	.word	0x00006bd5

0000655c <trx_irq_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts.
 */
void trx_irq_handler_cb(void)
{
    655c:	b510      	push	{r4, lr}
	trx_irq_reason_t trx_irq_cause;

	trx_irq_cause = /* (trx_irq_reason_t)*/ trx_reg_read(RG_IRQ_STATUS);
    655e:	200f      	movs	r0, #15
    6560:	4b0a      	ldr	r3, [pc, #40]	; (658c <trx_irq_handler_cb+0x30>)
    6562:	4798      	blx	r3
		pal_trx_read_timestamp(&tal_timestamp);
	}
#endif  /* #if (DISABLE_TSTAMP_IRQ == 1) */
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	if (trx_irq_cause & TRX_IRQ_3_TRX_END) {
    6564:	0703      	lsls	r3, r0, #28
    6566:	d505      	bpl.n	6574 <trx_irq_handler_cb+0x18>
		 * transmission or reception.
		 */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
		if ((tal_state == TAL_TX_AUTO) || tal_beacon_transmission)
#else
		if (tal_state == TAL_TX_AUTO)
    6568:	4b09      	ldr	r3, [pc, #36]	; (6590 <trx_irq_handler_cb+0x34>)
    656a:	781b      	ldrb	r3, [r3, #0]
    656c:	2b01      	cmp	r3, #1
    656e:	d002      	beq.n	6576 <trx_irq_handler_cb+0x1a>
			} else {
				handle_tx_end_irq(false); /* see tal_tx.c */
			}
		} else { /* Other tal_state than TAL_TX_... */
			 /* Handle rx interrupt. */
			handle_received_frame_irq(); /* see tal_rx.c */
    6570:	4b08      	ldr	r3, [pc, #32]	; (6594 <trx_irq_handler_cb+0x38>)
    6572:	4798      	blx	r3
#if (RTB_TYPE == RTB_PMU_233R)
		rtb_update_fec();
#endif  /* (RTB_TYPE == RTB_PMU_233R) */
#endif
	}
} /* trx_irq_handler_cb() */
    6574:	bd10      	pop	{r4, pc}
			if (trx_irq_cause & TRX_IRQ_6_TRX_UR) {
    6576:	0643      	lsls	r3, r0, #25
    6578:	d503      	bpl.n	6582 <trx_irq_handler_cb+0x26>
				handle_tx_end_irq(true); /* see tal_tx.c */
    657a:	2001      	movs	r0, #1
    657c:	4b06      	ldr	r3, [pc, #24]	; (6598 <trx_irq_handler_cb+0x3c>)
    657e:	4798      	blx	r3
    6580:	e7f8      	b.n	6574 <trx_irq_handler_cb+0x18>
				handle_tx_end_irq(false); /* see tal_tx.c */
    6582:	2000      	movs	r0, #0
    6584:	4b04      	ldr	r3, [pc, #16]	; (6598 <trx_irq_handler_cb+0x3c>)
    6586:	4798      	blx	r3
    6588:	e7f4      	b.n	6574 <trx_irq_handler_cb+0x18>
    658a:	46c0      	nop			; (mov r8, r8)
    658c:	00006f05 	.word	0x00006f05
    6590:	20000be5 	.word	0x20000be5
    6594:	00006911 	.word	0x00006911
    6598:	00006ad1 	.word	0x00006ad1

0000659c <trx_irq_awake_handler_cb>:
 * \brief Transceiver interrupt handler for awake end IRQ
 *
 * This function handles the transceiver awake end interrupt.
 */
void trx_irq_awake_handler_cb(void)
{
    659c:	b510      	push	{r4, lr}
	trx_irq_reason_t trx_irq_cause = /*(trx_irq_reason_t)*/ trx_reg_read(
    659e:	200f      	movs	r0, #15
    65a0:	4b03      	ldr	r3, [pc, #12]	; (65b0 <trx_irq_awake_handler_cb+0x14>)
    65a2:	4798      	blx	r3
			RG_IRQ_STATUS);

	if (trx_irq_cause & TRX_IRQ_4_CCA_ED_DONE) {
    65a4:	06c3      	lsls	r3, r0, #27
    65a6:	d502      	bpl.n	65ae <trx_irq_awake_handler_cb+0x12>
		/* Set the wake-up flag. */
		tal_awake_end_flag = true;
    65a8:	2201      	movs	r2, #1
    65aa:	4b02      	ldr	r3, [pc, #8]	; (65b4 <trx_irq_awake_handler_cb+0x18>)
    65ac:	701a      	strb	r2, [r3, #0]
#if (_DEBUG_ > 0)
	if (trx_irq_cause & (~(TRX_IRQ_0_PLL_LOCK | TRX_IRQ_4_CCA_ED_DONE))) {
		Assert("Unexpected interrupt" == 0);
	}
#endif
}
    65ae:	bd10      	pop	{r4, pc}
    65b0:	00006f05 	.word	0x00006f05
    65b4:	20000be4 	.word	0x20000be4

000065b8 <init_tal_pib>:
 *
 * This function initializes the TAL information base attributes
 * to their default values.
 */
void init_tal_pib(void)
{
    65b8:	b510      	push	{r4, lr}
	tal_pib.MaxCSMABackoffs = TAL_MAX_CSMA_BACKOFFS_DEFAULT;
    65ba:	4b13      	ldr	r3, [pc, #76]	; (6608 <init_tal_pib+0x50>)
    65bc:	2204      	movs	r2, #4
    65be:	751a      	strb	r2, [r3, #20]
	tal_pib.MinBE = TAL_MINBE_DEFAULT;
    65c0:	2003      	movs	r0, #3
    65c2:	7558      	strb	r0, [r3, #21]
	tal_pib.PANId = TAL_PANID_BC_DEFAULT;
    65c4:	3a05      	subs	r2, #5
    65c6:	739a      	strb	r2, [r3, #14]
    65c8:	73da      	strb	r2, [r3, #15]
	tal_pib.ShortAddress = TAL_SHORT_ADDRESS_DEFAULT;
    65ca:	731a      	strb	r2, [r3, #12]
    65cc:	735a      	strb	r2, [r3, #13]
	tal_pib.CurrentChannel = TAL_CURRENT_CHANNEL_DEFAULT;
    65ce:	210b      	movs	r1, #11
    65d0:	74d9      	strb	r1, [r3, #19]
	tal_pib.SupportedChannels = TRX_SUPPORTED_CHANNELS;
    65d2:	2100      	movs	r1, #0
    65d4:	2400      	movs	r4, #0
    65d6:	721c      	strb	r4, [r3, #8]
    65d8:	3c08      	subs	r4, #8
    65da:	725c      	strb	r4, [r3, #9]
    65dc:	729a      	strb	r2, [r3, #10]
    65de:	3208      	adds	r2, #8
    65e0:	72da      	strb	r2, [r3, #11]
	tal_pib.CurrentPage = TAL_CURRENT_PAGE_DEFAULT;
    65e2:	7619      	strb	r1, [r3, #24]
	tal_pib.MaxFrameDuration = TAL_MAX_FRAME_DURATION_DEFAULT;
    65e4:	3203      	adds	r2, #3
    65e6:	741a      	strb	r2, [r3, #16]
    65e8:	3a09      	subs	r2, #9
    65ea:	745a      	strb	r2, [r3, #17]
	tal_pib.SHRDuration = TAL_SHR_DURATION_DEFAULT;
    65ec:	3209      	adds	r2, #9
    65ee:	765a      	strb	r2, [r3, #25]
	tal_pib.SymbolsPerOctet = TAL_SYMBOLS_PER_OCTET_DEFAULT;
    65f0:	3a08      	subs	r2, #8
    65f2:	769a      	strb	r2, [r3, #26]
	tal_pib.MaxBE = TAL_MAXBE_DEFAULT;
    65f4:	3203      	adds	r2, #3
    65f6:	76da      	strb	r2, [r3, #27]
	tal_pib.MaxFrameRetries = TAL_MAXFRAMERETRIES_DEFAULT;
    65f8:	7718      	strb	r0, [r3, #28]
	tal_pib.TransmitPower = limit_tx_pwr(TAL_TRANSMIT_POWER_DEFAULT);
    65fa:	327f      	adds	r2, #127	; 0x7f
    65fc:	75da      	strb	r2, [r3, #23]
	tal_pib.CCAMode = TAL_CCA_MODE_DEFAULT;
    65fe:	3a83      	subs	r2, #131	; 0x83
    6600:	749a      	strb	r2, [r3, #18]
	tal_pib.PrivatePanCoordinator = TAL_PAN_COORDINATOR_DEFAULT;
    6602:	7599      	strb	r1, [r3, #22]
#endif  /* BEACON_SUPPORT */

#ifdef PROMISCUOUS_MODE
	tal_pib.PromiscuousMode = TAL_PIB_PROMISCUOUS_MODE_DEFAULT;
#endif
}
    6604:	bd10      	pop	{r4, pc}
    6606:	46c0      	nop			; (mov r8, r8)
    6608:	20000bbc 	.word	0x20000bbc

0000660c <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    660c:	0683      	lsls	r3, r0, #26
    660e:	d410      	bmi.n	6632 <convert_phyTransmitPower_to_reg_value+0x26>
    6610:	213f      	movs	r1, #63	; 0x3f
    6612:	4001      	ands	r1, r0

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
    6614:	2903      	cmp	r1, #3
    6616:	dc12      	bgt.n	663e <convert_phyTransmitPower_to_reg_value+0x32>
    6618:	4b0c      	ldr	r3, [pc, #48]	; (664c <convert_phyTransmitPower_to_reg_value+0x40>)
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    661a:	2001      	movs	r0, #1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    661c:	2201      	movs	r2, #1
    661e:	569a      	ldrsb	r2, [r3, r2]
		if (trx_tx_level <= dbm_value) {
    6620:	4291      	cmp	r1, r2
    6622:	da0e      	bge.n	6642 <convert_phyTransmitPower_to_reg_value+0x36>
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    6624:	3001      	adds	r0, #1
    6626:	b2c0      	uxtb	r0, r0
    6628:	3301      	adds	r3, #1
    662a:	2810      	cmp	r0, #16
    662c:	d1f6      	bne.n	661c <convert_phyTransmitPower_to_reg_value+0x10>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    662e:	2000      	movs	r0, #0
}
    6630:	4770      	bx	lr
	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    6632:	4240      	negs	r0, r0
    6634:	211f      	movs	r1, #31
    6636:	4001      	ands	r1, r0
    6638:	4249      	negs	r1, r1
    663a:	b249      	sxtb	r1, r1
    663c:	e7ea      	b.n	6614 <convert_phyTransmitPower_to_reg_value+0x8>
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    663e:	2204      	movs	r2, #4
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    6640:	2000      	movs	r0, #0
			if (trx_tx_level < dbm_value) {
    6642:	4291      	cmp	r1, r2
    6644:	ddf4      	ble.n	6630 <convert_phyTransmitPower_to_reg_value+0x24>
				return (i - 1);
    6646:	3801      	subs	r0, #1
    6648:	b2c0      	uxtb	r0, r0
    664a:	e7f1      	b.n	6630 <convert_phyTransmitPower_to_reg_value+0x24>
    664c:	0000a354 	.word	0x0000a354

00006650 <write_all_tal_pib_to_trx>:
{
    6650:	b570      	push	{r4, r5, r6, lr}
		trx_reg_write((RG_PAN_ID_0 + i), *ptr_to_reg);
    6652:	4d1e      	ldr	r5, [pc, #120]	; (66cc <write_all_tal_pib_to_trx+0x7c>)
    6654:	7ba9      	ldrb	r1, [r5, #14]
    6656:	2022      	movs	r0, #34	; 0x22
    6658:	4c1d      	ldr	r4, [pc, #116]	; (66d0 <write_all_tal_pib_to_trx+0x80>)
    665a:	47a0      	blx	r4
    665c:	7be9      	ldrb	r1, [r5, #15]
    665e:	2023      	movs	r0, #35	; 0x23
    6660:	47a0      	blx	r4
    6662:	2424      	movs	r4, #36	; 0x24
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    6664:	4e1a      	ldr	r6, [pc, #104]	; (66d0 <write_all_tal_pib_to_trx+0x80>)
    6666:	7829      	ldrb	r1, [r5, #0]
    6668:	0020      	movs	r0, r4
    666a:	47b0      	blx	r6
		ptr_to_reg++;
    666c:	3501      	adds	r5, #1
    666e:	3401      	adds	r4, #1
    6670:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    6672:	2c2c      	cmp	r4, #44	; 0x2c
    6674:	d1f7      	bne.n	6666 <write_all_tal_pib_to_trx+0x16>
		trx_reg_write((RG_SHORT_ADDR_0 + i), *ptr_to_reg);
    6676:	4c15      	ldr	r4, [pc, #84]	; (66cc <write_all_tal_pib_to_trx+0x7c>)
    6678:	7b21      	ldrb	r1, [r4, #12]
    667a:	2020      	movs	r0, #32
    667c:	4d14      	ldr	r5, [pc, #80]	; (66d0 <write_all_tal_pib_to_trx+0x80>)
    667e:	47a8      	blx	r5
    6680:	7b61      	ldrb	r1, [r4, #13]
    6682:	2021      	movs	r0, #33	; 0x21
    6684:	47a8      	blx	r5
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    6686:	7ca3      	ldrb	r3, [r4, #18]
    6688:	2205      	movs	r2, #5
    668a:	2160      	movs	r1, #96	; 0x60
    668c:	2008      	movs	r0, #8
    668e:	4d11      	ldr	r5, [pc, #68]	; (66d4 <write_all_tal_pib_to_trx+0x84>)
    6690:	47a8      	blx	r5
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    6692:	7d63      	ldrb	r3, [r4, #21]
    6694:	2200      	movs	r2, #0
    6696:	210f      	movs	r1, #15
    6698:	202f      	movs	r0, #47	; 0x2f
    669a:	47a8      	blx	r5
	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    669c:	7da3      	ldrb	r3, [r4, #22]
    669e:	2203      	movs	r2, #3
    66a0:	2108      	movs	r1, #8
    66a2:	202e      	movs	r0, #46	; 0x2e
    66a4:	47a8      	blx	r5
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    66a6:	7ee3      	ldrb	r3, [r4, #27]
    66a8:	2204      	movs	r2, #4
    66aa:	21f0      	movs	r1, #240	; 0xf0
    66ac:	202f      	movs	r0, #47	; 0x2f
    66ae:	47a8      	blx	r5
	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    66b0:	7ce3      	ldrb	r3, [r4, #19]
    66b2:	2200      	movs	r2, #0
    66b4:	211f      	movs	r1, #31
    66b6:	2008      	movs	r0, #8
    66b8:	47a8      	blx	r5
		reg_value = convert_phyTransmitPower_to_reg_value(
    66ba:	7de0      	ldrb	r0, [r4, #23]
    66bc:	4b06      	ldr	r3, [pc, #24]	; (66d8 <write_all_tal_pib_to_trx+0x88>)
    66be:	4798      	blx	r3
    66c0:	0003      	movs	r3, r0
		trx_bit_write(SR_TX_PWR, reg_value);
    66c2:	2200      	movs	r2, #0
    66c4:	210f      	movs	r1, #15
    66c6:	2005      	movs	r0, #5
    66c8:	47a8      	blx	r5
}
    66ca:	bd70      	pop	{r4, r5, r6, pc}
    66cc:	20000bbc 	.word	0x20000bbc
    66d0:	00007001 	.word	0x00007001
    66d4:	00007125 	.word	0x00007125
    66d8:	0000660d 	.word	0x0000660d

000066dc <tal_pib_set>:
{
    66dc:	b570      	push	{r4, r5, r6, lr}
    66de:	000c      	movs	r4, r1
	switch(attribute) 
    66e0:	284e      	cmp	r0, #78	; 0x4e
    66e2:	d007      	beq.n	66f4 <tal_pib_set+0x18>
    66e4:	2859      	cmp	r0, #89	; 0x59
    66e6:	d10a      	bne.n	66fe <tal_pib_set+0x22>
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    66e8:	780a      	ldrb	r2, [r1, #0]
    66ea:	4b81      	ldr	r3, [pc, #516]	; (68f0 <tal_pib_set+0x214>)
    66ec:	771a      	strb	r2, [r3, #28]
	return MAC_SUCCESS;
    66ee:	2200      	movs	r2, #0
} /* tal_pib_set() */
    66f0:	0010      	movs	r0, r2
    66f2:	bd70      	pop	{r4, r5, r6, pc}
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    66f4:	780a      	ldrb	r2, [r1, #0]
    66f6:	4b7e      	ldr	r3, [pc, #504]	; (68f0 <tal_pib_set+0x214>)
    66f8:	751a      	strb	r2, [r3, #20]
	return MAC_SUCCESS;
    66fa:	2200      	movs	r2, #0
		break;
    66fc:	e7f8      	b.n	66f0 <tal_pib_set+0x14>
		if(tal_trx_status == TRX_SLEEP) 
    66fe:	4b7d      	ldr	r3, [pc, #500]	; (68f4 <tal_pib_set+0x218>)
    6700:	7819      	ldrb	r1, [r3, #0]
			return TAL_TRX_ASLEEP;
    6702:	2281      	movs	r2, #129	; 0x81
		if(tal_trx_status == TRX_SLEEP) 
    6704:	290f      	cmp	r1, #15
    6706:	d0f3      	beq.n	66f0 <tal_pib_set+0x14>
		switch(attribute) 
    6708:	280b      	cmp	r0, #11
    670a:	d100      	bne.n	670e <tal_pib_set+0x32>
    670c:	e0da      	b.n	68c4 <tal_pib_set+0x1e8>
    670e:	d915      	bls.n	673c <tal_pib_set+0x60>
    6710:	2853      	cmp	r0, #83	; 0x53
    6712:	d100      	bne.n	6716 <tal_pib_set+0x3a>
    6714:	e090      	b.n	6838 <tal_pib_set+0x15c>
    6716:	d84a      	bhi.n	67ae <tal_pib_set+0xd2>
    6718:	284f      	cmp	r0, #79	; 0x4f
    671a:	d07c      	beq.n	6816 <tal_pib_set+0x13a>
    671c:	2850      	cmp	r0, #80	; 0x50
    671e:	d000      	beq.n	6722 <tal_pib_set+0x46>
    6720:	e0da      	b.n	68d8 <tal_pib_set+0x1fc>
			tal_pib.PANId = value->pib_value_16bit;
    6722:	7821      	ldrb	r1, [r4, #0]
    6724:	7863      	ldrb	r3, [r4, #1]
    6726:	4c72      	ldr	r4, [pc, #456]	; (68f0 <tal_pib_set+0x214>)
    6728:	73a1      	strb	r1, [r4, #14]
    672a:	73e3      	strb	r3, [r4, #15]
					trx_reg_write((RG_PAN_ID_0 + i),*ptr_pan);
    672c:	2022      	movs	r0, #34	; 0x22
    672e:	4d72      	ldr	r5, [pc, #456]	; (68f8 <tal_pib_set+0x21c>)
    6730:	47a8      	blx	r5
    6732:	7be1      	ldrb	r1, [r4, #15]
    6734:	2023      	movs	r0, #35	; 0x23
    6736:	47a8      	blx	r5
	return MAC_SUCCESS;
    6738:	2200      	movs	r2, #0
    673a:	e7d9      	b.n	66f0 <tal_pib_set+0x14>
		switch(attribute) 
    673c:	2802      	cmp	r0, #2
    673e:	d100      	bne.n	6742 <tal_pib_set+0x66>
    6740:	e096      	b.n	6870 <tal_pib_set+0x194>
    6742:	d911      	bls.n	6768 <tal_pib_set+0x8c>
    6744:	2803      	cmp	r0, #3
    6746:	d100      	bne.n	674a <tal_pib_set+0x6e>
    6748:	e0b2      	b.n	68b0 <tal_pib_set+0x1d4>
    674a:	2804      	cmp	r0, #4
    674c:	d000      	beq.n	6750 <tal_pib_set+0x74>
    674e:	e0c3      	b.n	68d8 <tal_pib_set+0x1fc>
			if(tal_state != TAL_IDLE) 
    6750:	4b6a      	ldr	r3, [pc, #424]	; (68fc <tal_pib_set+0x220>)
    6752:	781b      	ldrb	r3, [r3, #0]
				return TAL_BUSY;
    6754:	2286      	movs	r2, #134	; 0x86
			if(tal_state != TAL_IDLE) 
    6756:	2b00      	cmp	r3, #0
    6758:	d1ca      	bne.n	66f0 <tal_pib_set+0x14>
				if(page != 0) 
    675a:	7823      	ldrb	r3, [r4, #0]
					return MAC_INVALID_PARAMETER;
    675c:	3262      	adds	r2, #98	; 0x62
	return MAC_SUCCESS;
    675e:	1e59      	subs	r1, r3, #1
    6760:	418b      	sbcs	r3, r1
    6762:	425b      	negs	r3, r3
    6764:	401a      	ands	r2, r3
    6766:	e7c3      	b.n	66f0 <tal_pib_set+0x14>
		switch(attribute) 
    6768:	2800      	cmp	r0, #0
    676a:	d000      	beq.n	676e <tal_pib_set+0x92>
    676c:	e0b4      	b.n	68d8 <tal_pib_set+0x1fc>
			if(tal_state != TAL_IDLE)
    676e:	4b63      	ldr	r3, [pc, #396]	; (68fc <tal_pib_set+0x220>)
    6770:	781b      	ldrb	r3, [r3, #0]
				return TAL_BUSY;
    6772:	2286      	movs	r2, #134	; 0x86
			if(tal_state != TAL_IDLE)
    6774:	2b00      	cmp	r3, #0
    6776:	d1bb      	bne.n	66f0 <tal_pib_set+0x14>
			if((uint32_t)TRX_SUPPORTED_CHANNELS & ((uint32_t)0x01 << value->pib_value_8bit)) 
    6778:	7823      	ldrb	r3, [r4, #0]
    677a:	4861      	ldr	r0, [pc, #388]	; (6900 <tal_pib_set+0x224>)
    677c:	40d8      	lsrs	r0, r3
				return MAC_INVALID_PARAMETER;
    677e:	3262      	adds	r2, #98	; 0x62
			if((uint32_t)TRX_SUPPORTED_CHANNELS & ((uint32_t)0x01 << value->pib_value_8bit)) 
    6780:	07c0      	lsls	r0, r0, #31
    6782:	d5b5      	bpl.n	66f0 <tal_pib_set+0x14>
				if(tal_trx_status != TRX_OFF) 
    6784:	2908      	cmp	r1, #8
    6786:	d100      	bne.n	678a <tal_pib_set+0xae>
    6788:	e0a8      	b.n	68dc <tal_pib_set+0x200>
					}while (set_trx_state(CMD_TRX_OFF)!=TRX_OFF);
    678a:	4d5e      	ldr	r5, [pc, #376]	; (6904 <tal_pib_set+0x228>)
    678c:	2008      	movs	r0, #8
    678e:	47a8      	blx	r5
    6790:	2808      	cmp	r0, #8
    6792:	d1fb      	bne.n	678c <tal_pib_set+0xb0>
				tal_pib.CurrentChannel = value->pib_value_8bit;
    6794:	7823      	ldrb	r3, [r4, #0]
    6796:	4a56      	ldr	r2, [pc, #344]	; (68f0 <tal_pib_set+0x214>)
    6798:	74d3      	strb	r3, [r2, #19]
				trx_bit_write(SR_CHANNEL,tal_pib.CurrentChannel);
    679a:	2200      	movs	r2, #0
    679c:	211f      	movs	r1, #31
    679e:	2008      	movs	r0, #8
    67a0:	4c59      	ldr	r4, [pc, #356]	; (6908 <tal_pib_set+0x22c>)
    67a2:	47a0      	blx	r4
					set_trx_state(CMD_RX_AACK_ON);
    67a4:	2016      	movs	r0, #22
    67a6:	4b57      	ldr	r3, [pc, #348]	; (6904 <tal_pib_set+0x228>)
    67a8:	4798      	blx	r3
	return MAC_SUCCESS;
    67aa:	2200      	movs	r2, #0
    67ac:	e7a0      	b.n	66f0 <tal_pib_set+0x14>
		switch(attribute) 
    67ae:	2857      	cmp	r0, #87	; 0x57
    67b0:	d04f      	beq.n	6852 <tal_pib_set+0x176>
    67b2:	28f0      	cmp	r0, #240	; 0xf0
    67b4:	d000      	beq.n	67b8 <tal_pib_set+0xdc>
    67b6:	e08f      	b.n	68d8 <tal_pib_set+0x1fc>
			tal_pib.IeeeAddress = value->pib_value_64bit;
    67b8:	7822      	ldrb	r2, [r4, #0]
    67ba:	7863      	ldrb	r3, [r4, #1]
    67bc:	021b      	lsls	r3, r3, #8
    67be:	4313      	orrs	r3, r2
    67c0:	78a2      	ldrb	r2, [r4, #2]
    67c2:	0412      	lsls	r2, r2, #16
    67c4:	4313      	orrs	r3, r2
    67c6:	78e2      	ldrb	r2, [r4, #3]
    67c8:	0612      	lsls	r2, r2, #24
    67ca:	431a      	orrs	r2, r3
    67cc:	7923      	ldrb	r3, [r4, #4]
    67ce:	7961      	ldrb	r1, [r4, #5]
    67d0:	0209      	lsls	r1, r1, #8
    67d2:	4319      	orrs	r1, r3
    67d4:	79a3      	ldrb	r3, [r4, #6]
    67d6:	041b      	lsls	r3, r3, #16
    67d8:	4319      	orrs	r1, r3
    67da:	79e3      	ldrb	r3, [r4, #7]
    67dc:	061b      	lsls	r3, r3, #24
    67de:	430b      	orrs	r3, r1
    67e0:	4d43      	ldr	r5, [pc, #268]	; (68f0 <tal_pib_set+0x214>)
    67e2:	702a      	strb	r2, [r5, #0]
    67e4:	0a11      	lsrs	r1, r2, #8
    67e6:	7069      	strb	r1, [r5, #1]
    67e8:	0c11      	lsrs	r1, r2, #16
    67ea:	70a9      	strb	r1, [r5, #2]
    67ec:	0e12      	lsrs	r2, r2, #24
    67ee:	70ea      	strb	r2, [r5, #3]
    67f0:	712b      	strb	r3, [r5, #4]
    67f2:	0a1a      	lsrs	r2, r3, #8
    67f4:	716a      	strb	r2, [r5, #5]
    67f6:	0c1a      	lsrs	r2, r3, #16
    67f8:	71aa      	strb	r2, [r5, #6]
    67fa:	0e1b      	lsrs	r3, r3, #24
    67fc:	71eb      	strb	r3, [r5, #7]
    67fe:	2424      	movs	r4, #36	; 0x24
					trx_reg_write((RG_IEEE_ADDR_0 + i),*ptr);
    6800:	4e3d      	ldr	r6, [pc, #244]	; (68f8 <tal_pib_set+0x21c>)
    6802:	7829      	ldrb	r1, [r5, #0]
    6804:	0020      	movs	r0, r4
    6806:	47b0      	blx	r6
					ptr++;
    6808:	3501      	adds	r5, #1
    680a:	3401      	adds	r4, #1
    680c:	b2e4      	uxtb	r4, r4
				for(uint8_t i = 0; i < 8; i++) 
    680e:	2c2c      	cmp	r4, #44	; 0x2c
    6810:	d1f7      	bne.n	6802 <tal_pib_set+0x126>
	return MAC_SUCCESS;
    6812:	2200      	movs	r2, #0
    6814:	e76c      	b.n	66f0 <tal_pib_set+0x14>
			tal_pib.MinBE = value->pib_value_8bit;
    6816:	7823      	ldrb	r3, [r4, #0]
    6818:	4a35      	ldr	r2, [pc, #212]	; (68f0 <tal_pib_set+0x214>)
    681a:	7553      	strb	r3, [r2, #21]
			if(tal_pib.MinBE > tal_pib.MaxBE) 
    681c:	7ed2      	ldrb	r2, [r2, #27]
    681e:	4293      	cmp	r3, r2
    6820:	d901      	bls.n	6826 <tal_pib_set+0x14a>
				tal_pib.MinBE = tal_pib.MaxBE;
    6822:	4b33      	ldr	r3, [pc, #204]	; (68f0 <tal_pib_set+0x214>)
    6824:	755a      	strb	r2, [r3, #21]
			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    6826:	4b32      	ldr	r3, [pc, #200]	; (68f0 <tal_pib_set+0x214>)
    6828:	7d5b      	ldrb	r3, [r3, #21]
    682a:	2200      	movs	r2, #0
    682c:	210f      	movs	r1, #15
    682e:	202f      	movs	r0, #47	; 0x2f
    6830:	4c35      	ldr	r4, [pc, #212]	; (6908 <tal_pib_set+0x22c>)
    6832:	47a0      	blx	r4
	return MAC_SUCCESS;
    6834:	2200      	movs	r2, #0
			break;
    6836:	e75b      	b.n	66f0 <tal_pib_set+0x14>
			tal_pib.ShortAddress = value->pib_value_16bit;
    6838:	7821      	ldrb	r1, [r4, #0]
    683a:	7863      	ldrb	r3, [r4, #1]
    683c:	4c2c      	ldr	r4, [pc, #176]	; (68f0 <tal_pib_set+0x214>)
    683e:	7321      	strb	r1, [r4, #12]
    6840:	7363      	strb	r3, [r4, #13]
					trx_reg_write((RG_SHORT_ADDR_0 + i),*ptr_shrt);
    6842:	2020      	movs	r0, #32
    6844:	4d2c      	ldr	r5, [pc, #176]	; (68f8 <tal_pib_set+0x21c>)
    6846:	47a8      	blx	r5
    6848:	7b61      	ldrb	r1, [r4, #13]
    684a:	2021      	movs	r0, #33	; 0x21
    684c:	47a8      	blx	r5
	return MAC_SUCCESS;
    684e:	2200      	movs	r2, #0
    6850:	e74e      	b.n	66f0 <tal_pib_set+0x14>
			tal_pib.MaxBE = value->pib_value_8bit;
    6852:	7823      	ldrb	r3, [r4, #0]
    6854:	4a26      	ldr	r2, [pc, #152]	; (68f0 <tal_pib_set+0x214>)
    6856:	76d3      	strb	r3, [r2, #27]
			if(tal_pib.MaxBE < tal_pib.MinBE) 
    6858:	7d52      	ldrb	r2, [r2, #21]
    685a:	429a      	cmp	r2, r3
    685c:	d901      	bls.n	6862 <tal_pib_set+0x186>
				tal_pib.MinBE = tal_pib.MaxBE;
    685e:	4a24      	ldr	r2, [pc, #144]	; (68f0 <tal_pib_set+0x214>)
    6860:	7553      	strb	r3, [r2, #21]
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    6862:	2204      	movs	r2, #4
    6864:	21f0      	movs	r1, #240	; 0xf0
    6866:	202f      	movs	r0, #47	; 0x2f
    6868:	4c27      	ldr	r4, [pc, #156]	; (6908 <tal_pib_set+0x22c>)
    686a:	47a0      	blx	r4
	return MAC_SUCCESS;
    686c:	2200      	movs	r2, #0
			break;
    686e:	e73f      	b.n	66f0 <tal_pib_set+0x14>
			tal_pib.TransmitPower = value->pib_value_8bit;
    6870:	7820      	ldrb	r0, [r4, #0]
	dbm_value = CONV_phyTransmitPower_TO_DBM(curr_transmit_power);
    6872:	0683      	lsls	r3, r0, #26
    6874:	d407      	bmi.n	6886 <tal_pib_set+0x1aa>
    6876:	233f      	movs	r3, #63	; 0x3f
    6878:	4003      	ands	r3, r0
	if (dbm_value > (int8_t)PGM_READ_BYTE(&tx_pwr_table[0])) {
    687a:	2b04      	cmp	r3, #4
    687c:	dc09      	bgt.n	6892 <tal_pib_set+0x1b6>
	} else if (dbm_value <
    687e:	3311      	adds	r3, #17
    6880:	da08      	bge.n	6894 <tal_pib_set+0x1b8>
		ret_val = CONV_DBM_TO_phyTransmitPower(dbm_value);
    6882:	202f      	movs	r0, #47	; 0x2f
    6884:	e006      	b.n	6894 <tal_pib_set+0x1b8>
	dbm_value = CONV_phyTransmitPower_TO_DBM(curr_transmit_power);
    6886:	4242      	negs	r2, r0
    6888:	231f      	movs	r3, #31
    688a:	4013      	ands	r3, r2
    688c:	425b      	negs	r3, r3
    688e:	b25b      	sxtb	r3, r3
    6890:	e7f3      	b.n	687a <tal_pib_set+0x19e>
		ret_val = CONV_DBM_TO_phyTransmitPower(dbm_value);
    6892:	2004      	movs	r0, #4
	return (ret_val | TX_PWR_TOLERANCE);
    6894:	2380      	movs	r3, #128	; 0x80
    6896:	4318      	orrs	r0, r3
				tal_pib.TransmitPower = limit_tx_pwr(tal_pib.TransmitPower);
    6898:	4b15      	ldr	r3, [pc, #84]	; (68f0 <tal_pib_set+0x214>)
    689a:	75d8      	strb	r0, [r3, #23]
				uint8_t reg_value = convert_phyTransmitPower_to_reg_value(tal_pib.TransmitPower);
    689c:	4b1b      	ldr	r3, [pc, #108]	; (690c <tal_pib_set+0x230>)
    689e:	4798      	blx	r3
    68a0:	0003      	movs	r3, r0
				trx_bit_write(SR_TX_PWR, reg_value);
    68a2:	2200      	movs	r2, #0
    68a4:	210f      	movs	r1, #15
    68a6:	2005      	movs	r0, #5
    68a8:	4c17      	ldr	r4, [pc, #92]	; (6908 <tal_pib_set+0x22c>)
    68aa:	47a0      	blx	r4
	return MAC_SUCCESS;
    68ac:	2200      	movs	r2, #0
			break;
    68ae:	e71f      	b.n	66f0 <tal_pib_set+0x14>
			tal_pib.CCAMode = value->pib_value_8bit;
    68b0:	7823      	ldrb	r3, [r4, #0]
    68b2:	4a0f      	ldr	r2, [pc, #60]	; (68f0 <tal_pib_set+0x214>)
    68b4:	7493      	strb	r3, [r2, #18]
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    68b6:	2205      	movs	r2, #5
    68b8:	2160      	movs	r1, #96	; 0x60
    68ba:	2008      	movs	r0, #8
    68bc:	4c12      	ldr	r4, [pc, #72]	; (6908 <tal_pib_set+0x22c>)
    68be:	47a0      	blx	r4
	return MAC_SUCCESS;
    68c0:	2200      	movs	r2, #0
			break;
    68c2:	e715      	b.n	66f0 <tal_pib_set+0x14>
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    68c4:	7823      	ldrb	r3, [r4, #0]
    68c6:	4a0a      	ldr	r2, [pc, #40]	; (68f0 <tal_pib_set+0x214>)
    68c8:	7593      	strb	r3, [r2, #22]
			trx_bit_write(SR_AACK_I_AM_COORD,tal_pib.PrivatePanCoordinator);
    68ca:	2203      	movs	r2, #3
    68cc:	2108      	movs	r1, #8
    68ce:	202e      	movs	r0, #46	; 0x2e
    68d0:	4c0d      	ldr	r4, [pc, #52]	; (6908 <tal_pib_set+0x22c>)
    68d2:	47a0      	blx	r4
	return MAC_SUCCESS;
    68d4:	2200      	movs	r2, #0
			break;
    68d6:	e70b      	b.n	66f0 <tal_pib_set+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
    68d8:	22f4      	movs	r2, #244	; 0xf4
    68da:	e709      	b.n	66f0 <tal_pib_set+0x14>
				tal_pib.CurrentChannel = value->pib_value_8bit;
    68dc:	4a04      	ldr	r2, [pc, #16]	; (68f0 <tal_pib_set+0x214>)
    68de:	74d3      	strb	r3, [r2, #19]
				trx_bit_write(SR_CHANNEL,tal_pib.CurrentChannel);
    68e0:	2200      	movs	r2, #0
    68e2:	211f      	movs	r1, #31
    68e4:	2008      	movs	r0, #8
    68e6:	4c08      	ldr	r4, [pc, #32]	; (6908 <tal_pib_set+0x22c>)
    68e8:	47a0      	blx	r4
	return MAC_SUCCESS;
    68ea:	2200      	movs	r2, #0
    68ec:	e700      	b.n	66f0 <tal_pib_set+0x14>
    68ee:	46c0      	nop			; (mov r8, r8)
    68f0:	20000bbc 	.word	0x20000bbc
    68f4:	20000bdb 	.word	0x20000bdb
    68f8:	00007001 	.word	0x00007001
    68fc:	20000be5 	.word	0x20000be5
    6900:	07fff800 	.word	0x07fff800
    6904:	00005edd 	.word	0x00005edd
    6908:	00007125 	.word	0x00007125
    690c:	0000660d 	.word	0x0000660d

00006910 <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    6910:	b530      	push	{r4, r5, lr}
    6912:	b083      	sub	sp, #12
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    6914:	4b1f      	ldr	r3, [pc, #124]	; (6994 <handle_received_frame_irq+0x84>)
    6916:	681b      	ldr	r3, [r3, #0]
    6918:	2b00      	cmp	r3, #0
    691a:	d02e      	beq.n	697a <handle_received_frame_irq+0x6a>
		uint8_t dummy;
		trx_frame_read(&dummy, 1);
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    691c:	781c      	ldrb	r4, [r3, #0]
    691e:	785a      	ldrb	r2, [r3, #1]
    6920:	0212      	lsls	r2, r2, #8
    6922:	4322      	orrs	r2, r4
    6924:	789c      	ldrb	r4, [r3, #2]
    6926:	0424      	lsls	r4, r4, #16
    6928:	4322      	orrs	r2, r4
    692a:	78dc      	ldrb	r4, [r3, #3]
    692c:	0624      	lsls	r4, r4, #24
    692e:	4314      	orrs	r4, r2
	trx_sram_read(0x00, &phy_frame_len, LENGTH_FIELD_LEN); /* 0x00: SRAM
	                                                        * offset
	                                                        * address */
#else
	/* Get frame length from transceiver. */
	trx_frame_read(&phy_frame_len, LENGTH_FIELD_LEN);
    6930:	466b      	mov	r3, sp
    6932:	1ddd      	adds	r5, r3, #7
    6934:	2101      	movs	r1, #1
    6936:	0028      	movs	r0, r5
    6938:	4b17      	ldr	r3, [pc, #92]	; (6998 <handle_received_frame_irq+0x88>)
    693a:	4798      	blx	r3
#endif

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    693c:	7829      	ldrb	r1, [r5, #0]
    693e:	b24b      	sxtb	r3, r1
    6940:	2b00      	cmp	r3, #0
    6942:	db18      	blt.n	6976 <handle_received_frame_irq+0x66>
	 * The PHY header is also included in the frame (length field), hence
	 * the frame length
	 * is incremented.
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length = phy_frame_len + LENGTH_FIELD_LEN + LQI_LEN +
    6944:	3103      	adds	r1, #3
    6946:	b2c9      	uxtb	r1, r1
			ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    6948:	1a65      	subs	r5, r4, r1
    694a:	3590      	adds	r5, #144	; 0x90
	 * Note: The following code is different from single chip
	 * transceivers, since reading the frame via SPI contains the length
	 * field
	 * in the first octet. RF233's frame buffer includes ED value too.
	 */
	trx_frame_read(frame_ptr,
    694c:	0028      	movs	r0, r5
    694e:	4b12      	ldr	r3, [pc, #72]	; (6998 <handle_received_frame_irq+0x88>)
    6950:	4798      	blx	r3
			LENGTH_FIELD_LEN + phy_frame_len + LQI_LEN +
			ED_VAL_LEN);
	receive_frame->mpdu = frame_ptr;
    6952:	7265      	strb	r5, [r4, #9]
    6954:	0a2a      	lsrs	r2, r5, #8
    6956:	72a2      	strb	r2, [r4, #10]
    6958:	0c2a      	lsrs	r2, r5, #16
    695a:	72e2      	strb	r2, [r4, #11]
    695c:	0e2d      	lsrs	r5, r5, #24
    695e:	7325      	strb	r5, [r4, #12]
	receive_frame->time_stamp = tal_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    6960:	4c0c      	ldr	r4, [pc, #48]	; (6994 <handle_received_frame_irq+0x84>)
    6962:	6821      	ldr	r1, [r4, #0]
    6964:	480d      	ldr	r0, [pc, #52]	; (699c <handle_received_frame_irq+0x8c>)
    6966:	4b0e      	ldr	r3, [pc, #56]	; (69a0 <handle_received_frame_irq+0x90>)
    6968:	4798      	blx	r3

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    696a:	2090      	movs	r0, #144	; 0x90
    696c:	4b0d      	ldr	r3, [pc, #52]	; (69a4 <handle_received_frame_irq+0x94>)
    696e:	4798      	blx	r3
    6970:	6020      	str	r0, [r4, #0]

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    6972:	2800      	cmp	r0, #0
    6974:	d007      	beq.n	6986 <handle_received_frame_irq+0x76>
		 * Keep the following as a reminder, if receiver is used with
		 * RX_ON instead.
		 */
		/* trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON); */
	}
}
    6976:	b003      	add	sp, #12
    6978:	bd30      	pop	{r4, r5, pc}
		trx_frame_read(&dummy, 1);
    697a:	2101      	movs	r1, #1
    697c:	466b      	mov	r3, sp
    697e:	1d98      	adds	r0, r3, #6
    6980:	4b05      	ldr	r3, [pc, #20]	; (6998 <handle_received_frame_irq+0x88>)
    6982:	4798      	blx	r3
    6984:	e7f7      	b.n	6976 <handle_received_frame_irq+0x66>
		set_trx_state(CMD_PLL_ON);
    6986:	3009      	adds	r0, #9
    6988:	4b07      	ldr	r3, [pc, #28]	; (69a8 <handle_received_frame_irq+0x98>)
    698a:	4798      	blx	r3
		tal_rx_on_required = true;
    698c:	2201      	movs	r2, #1
    698e:	4b07      	ldr	r3, [pc, #28]	; (69ac <handle_received_frame_irq+0x9c>)
    6990:	701a      	strb	r2, [r3, #0]
    6992:	e7f0      	b.n	6976 <handle_received_frame_irq+0x66>
    6994:	200003ac 	.word	0x200003ac
    6998:	0000714d 	.word	0x0000714d
    699c:	20000bac 	.word	0x20000bac
    69a0:	00005d85 	.word	0x00005d85
    69a4:	00005bad 	.word	0x00005bad
    69a8:	00005edd 	.word	0x00005edd
    69ac:	20000ba8 	.word	0x20000ba8

000069b0 <process_incoming_frame>:
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    69b0:	b570      	push	{r4, r5, r6, lr}
    69b2:	0005      	movs	r5, r0
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    69b4:	7804      	ldrb	r4, [r0, #0]
    69b6:	7843      	ldrb	r3, [r0, #1]
    69b8:	021b      	lsls	r3, r3, #8
    69ba:	4323      	orrs	r3, r4
    69bc:	7884      	ldrb	r4, [r0, #2]
    69be:	0424      	lsls	r4, r4, #16
    69c0:	4323      	orrs	r3, r4
    69c2:	78c4      	ldrb	r4, [r0, #3]
    69c4:	0624      	lsls	r4, r4, #24
    69c6:	431c      	orrs	r4, r3

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    69c8:	7a66      	ldrb	r6, [r4, #9]
    69ca:	7aa3      	ldrb	r3, [r4, #10]
    69cc:	021b      	lsls	r3, r3, #8
    69ce:	4333      	orrs	r3, r6
    69d0:	7ae6      	ldrb	r6, [r4, #11]
    69d2:	0436      	lsls	r6, r6, #16
    69d4:	4333      	orrs	r3, r6
    69d6:	7b26      	ldrb	r6, [r4, #12]
    69d8:	0636      	lsls	r6, r6, #24
    69da:	431e      	orrs	r6, r3
    69dc:	7833      	ldrb	r3, [r6, #0]
    69de:	4a12      	ldr	r2, [pc, #72]	; (6a28 <process_incoming_frame+0x78>)
    69e0:	7013      	strb	r3, [r2, #0]

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    69e2:	3301      	adds	r3, #1
    69e4:	18f6      	adds	r6, r6, r3
	lqi = *frame_ptr++;
    69e6:	7833      	ldrb	r3, [r6, #0]
	ed_level = *frame_ptr;
    69e8:	7870      	ldrb	r0, [r6, #1]
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX) {
    69ea:	281f      	cmp	r0, #31
    69ec:	d803      	bhi.n	69f6 <process_incoming_frame+0x46>
		ed_value = ED_MAX;
	} else if (ed_value == 0) {
    69ee:	2800      	cmp	r0, #0
    69f0:	d102      	bne.n	69f8 <process_incoming_frame+0x48>
		ed_value = 1;
    69f2:	3001      	adds	r0, #1
    69f4:	e000      	b.n	69f8 <process_incoming_frame+0x48>
		ed_value = ED_MAX;
    69f6:	201f      	movs	r0, #31
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    69f8:	099b      	lsrs	r3, r3, #6
    69fa:	4358      	muls	r0, r3
    69fc:	0203      	lsls	r3, r0, #8
    69fe:	1a18      	subs	r0, r3, r0
    6a00:	215d      	movs	r1, #93	; 0x5d
    6a02:	4b0a      	ldr	r3, [pc, #40]	; (6a2c <process_incoming_frame+0x7c>)
    6a04:	4798      	blx	r3
			(ED_MAX * LQI_MAX);

	if (link_quality > 255) {
    6a06:	b283      	uxth	r3, r0
    6a08:	2bff      	cmp	r3, #255	; 0xff
    6a0a:	d80b      	bhi.n	6a24 <process_incoming_frame+0x74>
	*frame_ptr = lqi;
    6a0c:	7030      	strb	r0, [r6, #0]
	receive_frame->buffer_header = buf_ptr;
    6a0e:	7065      	strb	r5, [r4, #1]
    6a10:	0a2a      	lsrs	r2, r5, #8
    6a12:	70a2      	strb	r2, [r4, #2]
    6a14:	0c2a      	lsrs	r2, r5, #16
    6a16:	70e2      	strb	r2, [r4, #3]
    6a18:	0e2d      	lsrs	r5, r5, #24
    6a1a:	7125      	strb	r5, [r4, #4]
	tal_rx_frame_cb(receive_frame);
    6a1c:	0020      	movs	r0, r4
    6a1e:	4b04      	ldr	r3, [pc, #16]	; (6a30 <process_incoming_frame+0x80>)
    6a20:	4798      	blx	r3
} /* process_incoming_frame() */
    6a22:	bd70      	pop	{r4, r5, r6, pc}
	if (link_quality > 255) {
    6a24:	20ff      	movs	r0, #255	; 0xff
    6a26:	e7f1      	b.n	6a0c <process_incoming_frame+0x5c>
    6a28:	20000bdc 	.word	0x20000bdc
    6a2c:	00007ef5 	.word	0x00007ef5
    6a30:	00007c39 	.word	0x00007c39

00006a34 <tal_rx_enable>:
 *         TRX_OFF if receiver has been switched off, or
 *         RX_ON otherwise.
 *
 */
uint8_t tal_rx_enable(uint8_t state)
{
    6a34:	b510      	push	{r4, lr}
    6a36:	0004      	movs	r4, r0
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    6a38:	4b0e      	ldr	r3, [pc, #56]	; (6a74 <tal_rx_enable+0x40>)
    6a3a:	781b      	ldrb	r3, [r3, #0]
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    6a3c:	2086      	movs	r0, #134	; 0x86
	if (TAL_IDLE != tal_state) {
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d109      	bne.n	6a56 <tal_rx_enable+0x22>
#endif
	}

	if (state == PHY_TRX_OFF) {
    6a42:	2c08      	cmp	r4, #8
    6a44:	d008      	beq.n	6a58 <tal_rx_enable+0x24>
		return TRX_OFF;
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    6a46:	4b0c      	ldr	r3, [pc, #48]	; (6a78 <tal_rx_enable+0x44>)
    6a48:	681b      	ldr	r3, [r3, #0]
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d00c      	beq.n	6a68 <tal_rx_enable+0x34>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    6a4e:	2016      	movs	r0, #22
    6a50:	4b0a      	ldr	r3, [pc, #40]	; (6a7c <tal_rx_enable+0x48>)
    6a52:	4798      	blx	r3
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    6a54:	2006      	movs	r0, #6
	}
}
    6a56:	bd10      	pop	{r4, pc}
		set_trx_state(CMD_TRX_OFF);
    6a58:	387e      	subs	r0, #126	; 0x7e
    6a5a:	4b08      	ldr	r3, [pc, #32]	; (6a7c <tal_rx_enable+0x48>)
    6a5c:	4798      	blx	r3
		tal_rx_on_required = false;
    6a5e:	2200      	movs	r2, #0
    6a60:	4b07      	ldr	r3, [pc, #28]	; (6a80 <tal_rx_enable+0x4c>)
    6a62:	701a      	strb	r2, [r3, #0]
		return TRX_OFF;
    6a64:	0020      	movs	r0, r4
    6a66:	e7f6      	b.n	6a56 <tal_rx_enable+0x22>
			tal_rx_on_required = true;
    6a68:	2201      	movs	r2, #1
    6a6a:	4b05      	ldr	r3, [pc, #20]	; (6a80 <tal_rx_enable+0x4c>)
    6a6c:	701a      	strb	r2, [r3, #0]
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    6a6e:	2006      	movs	r0, #6
    6a70:	e7f1      	b.n	6a56 <tal_rx_enable+0x22>
    6a72:	46c0      	nop			; (mov r8, r8)
    6a74:	20000be5 	.word	0x20000be5
    6a78:	200003ac 	.word	0x200003ac
    6a7c:	00005edd 	.word	0x00005edd
    6a80:	20000ba8 	.word	0x20000ba8

00006a84 <tx_done_handling>:
 * \brief Implements the handling of the transmission end.
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
    6a84:	b510      	push	{r4, lr}
	tal_state = TAL_IDLE;
    6a86:	2200      	movs	r2, #0
    6a88:	4b0c      	ldr	r3, [pc, #48]	; (6abc <tx_done_handling+0x38>)
    6a8a:	701a      	strb	r2, [r3, #0]
#endif  /* #if (DISABLE_TSTAMP_IRQ == 0) */
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    6a8c:	4b0c      	ldr	r3, [pc, #48]	; (6ac0 <tx_done_handling+0x3c>)
    6a8e:	781a      	ldrb	r2, [r3, #0]
    6a90:	2a07      	cmp	r2, #7
    6a92:	d80b      	bhi.n	6aac <tx_done_handling+0x28>
    6a94:	0093      	lsls	r3, r2, #2
    6a96:	4a0b      	ldr	r2, [pc, #44]	; (6ac4 <tx_done_handling+0x40>)
    6a98:	58d3      	ldr	r3, [r2, r3]
    6a9a:	469f      	mov	pc, r3
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    6a9c:	2087      	movs	r0, #135	; 0x87
    6a9e:	e008      	b.n	6ab2 <tx_done_handling+0x2e>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    6aa0:	20e1      	movs	r0, #225	; 0xe1
		break;
    6aa2:	e006      	b.n	6ab2 <tx_done_handling+0x2e>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    6aa4:	20e9      	movs	r0, #233	; 0xe9
		break;
    6aa6:	e004      	b.n	6ab2 <tx_done_handling+0x2e>

	case TRAC_INVALID:
		status = FAILURE;
    6aa8:	2085      	movs	r0, #133	; 0x85
		break;
    6aaa:	e002      	b.n	6ab2 <tx_done_handling+0x2e>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    6aac:	2085      	movs	r0, #133	; 0x85
		break;
    6aae:	e000      	b.n	6ab2 <tx_done_handling+0x2e>
		status = MAC_SUCCESS;
    6ab0:	2000      	movs	r0, #0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    6ab2:	4b05      	ldr	r3, [pc, #20]	; (6ac8 <tx_done_handling+0x44>)
    6ab4:	6819      	ldr	r1, [r3, #0]
    6ab6:	4b05      	ldr	r3, [pc, #20]	; (6acc <tx_done_handling+0x48>)
    6ab8:	4798      	blx	r3
#endif
} /* tx_done_handling() */
    6aba:	bd10      	pop	{r4, pc}
    6abc:	20000be5 	.word	0x20000be5
    6ac0:	200003b2 	.word	0x200003b2
    6ac4:	0000a364 	.word	0x0000a364
    6ac8:	20000bb8 	.word	0x20000bb8
    6acc:	00007c2d 	.word	0x00007c2d

00006ad0 <handle_tx_end_irq>:
 * \brief Handles interrupts issued due to end of transmission
 *
 * \param underrun_occured  true if under-run has occurred
 */
void handle_tx_end_irq(bool underrun_occured)
{
    6ad0:	b510      	push	{r4, lr}
		}
#endif
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

		/* Read trac status before enabling RX_AACK_ON. */
		if (underrun_occured) {
    6ad2:	2800      	cmp	r0, #0
    6ad4:	d019      	beq.n	6b0a <handle_tx_end_irq+0x3a>
			trx_trac_status = TRAC_INVALID;
    6ad6:	2207      	movs	r2, #7
    6ad8:	4b1f      	ldr	r3, [pc, #124]	; (6b58 <handle_tx_end_irq+0x88>)
    6ada:	701a      	strb	r2, [r3, #0]
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			if (tal_sw_retry_no_csma_ca && tal_sw_retry_count &&
    6adc:	4b1f      	ldr	r3, [pc, #124]	; (6b5c <handle_tx_end_irq+0x8c>)
    6ade:	781b      	ldrb	r3, [r3, #0]
    6ae0:	2b00      	cmp	r3, #0
    6ae2:	d007      	beq.n	6af4 <handle_tx_end_irq+0x24>
    6ae4:	4b1e      	ldr	r3, [pc, #120]	; (6b60 <handle_tx_end_irq+0x90>)
    6ae6:	781b      	ldrb	r3, [r3, #0]
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d003      	beq.n	6af4 <handle_tx_end_irq+0x24>
					TRAC_NO_ACK == trx_trac_status) {
    6aec:	4b1a      	ldr	r3, [pc, #104]	; (6b58 <handle_tx_end_irq+0x88>)
			if (tal_sw_retry_no_csma_ca && tal_sw_retry_count &&
    6aee:	781b      	ldrb	r3, [r3, #0]
    6af0:	2b05      	cmp	r3, #5
    6af2:	d012      	beq.n	6b1a <handle_tx_end_irq+0x4a>
				TRX_SLP_TR_LOW();
				if (--tal_sw_retry_count == 0) {
					tal_sw_retry_no_csma_ca = false;
				}
			} else {
				tal_state = TAL_TX_DONE; /* Further handling is
    6af4:	2202      	movs	r2, #2
    6af6:	4b1b      	ldr	r3, [pc, #108]	; (6b64 <handle_tx_end_irq+0x94>)
    6af8:	701a      	strb	r2, [r3, #0]

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    6afa:	4b1b      	ldr	r3, [pc, #108]	; (6b68 <handle_tx_end_irq+0x98>)
    6afc:	681b      	ldr	r3, [r3, #0]
    6afe:	2b00      	cmp	r3, #0
    6b00:	d022      	beq.n	6b48 <handle_tx_end_irq+0x78>
		set_trx_state(CMD_PLL_ON);
		tal_rx_on_required = true;
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    6b02:	2016      	movs	r0, #22
    6b04:	4b19      	ldr	r3, [pc, #100]	; (6b6c <handle_tx_end_irq+0x9c>)
    6b06:	4798      	blx	r3
	}
}
    6b08:	bd10      	pop	{r4, pc}
			trx_trac_status = /*(trx_trac_status_t)*/ trx_bit_read(
    6b0a:	2205      	movs	r2, #5
    6b0c:	21e0      	movs	r1, #224	; 0xe0
    6b0e:	2002      	movs	r0, #2
    6b10:	4b17      	ldr	r3, [pc, #92]	; (6b70 <handle_tx_end_irq+0xa0>)
    6b12:	4798      	blx	r3
    6b14:	4b10      	ldr	r3, [pc, #64]	; (6b58 <handle_tx_end_irq+0x88>)
    6b16:	7018      	strb	r0, [r3, #0]
    6b18:	e7e0      	b.n	6adc <handle_tx_end_irq+0xc>
					trx_status = set_trx_state(
    6b1a:	4c14      	ldr	r4, [pc, #80]	; (6b6c <handle_tx_end_irq+0x9c>)
    6b1c:	2019      	movs	r0, #25
    6b1e:	47a0      	blx	r4
				} while (trx_status != TX_ARET_ON);
    6b20:	2819      	cmp	r0, #25
    6b22:	d1fb      	bne.n	6b1c <handle_tx_end_irq+0x4c>
    6b24:	4b13      	ldr	r3, [pc, #76]	; (6b74 <handle_tx_end_irq+0xa4>)
    6b26:	2280      	movs	r2, #128	; 0x80
    6b28:	0352      	lsls	r2, r2, #13
    6b2a:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    6b2c:	46c0      	nop			; (mov r8, r8)
    6b2e:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    6b30:	615a      	str	r2, [r3, #20]
				if (--tal_sw_retry_count == 0) {
    6b32:	4a0b      	ldr	r2, [pc, #44]	; (6b60 <handle_tx_end_irq+0x90>)
    6b34:	7813      	ldrb	r3, [r2, #0]
    6b36:	3b01      	subs	r3, #1
    6b38:	b2db      	uxtb	r3, r3
    6b3a:	7013      	strb	r3, [r2, #0]
    6b3c:	2b00      	cmp	r3, #0
    6b3e:	d1dc      	bne.n	6afa <handle_tx_end_irq+0x2a>
					tal_sw_retry_no_csma_ca = false;
    6b40:	2200      	movs	r2, #0
    6b42:	4b06      	ldr	r3, [pc, #24]	; (6b5c <handle_tx_end_irq+0x8c>)
    6b44:	701a      	strb	r2, [r3, #0]
    6b46:	e7d8      	b.n	6afa <handle_tx_end_irq+0x2a>
		set_trx_state(CMD_PLL_ON);
    6b48:	2009      	movs	r0, #9
    6b4a:	4b08      	ldr	r3, [pc, #32]	; (6b6c <handle_tx_end_irq+0x9c>)
    6b4c:	4798      	blx	r3
		tal_rx_on_required = true;
    6b4e:	2201      	movs	r2, #1
    6b50:	4b09      	ldr	r3, [pc, #36]	; (6b78 <handle_tx_end_irq+0xa8>)
    6b52:	701a      	strb	r2, [r3, #0]
    6b54:	e7d8      	b.n	6b08 <handle_tx_end_irq+0x38>
    6b56:	46c0      	nop			; (mov r8, r8)
    6b58:	200003b2 	.word	0x200003b2
    6b5c:	200003b1 	.word	0x200003b1
    6b60:	200003b0 	.word	0x200003b0
    6b64:	20000be5 	.word	0x20000be5
    6b68:	200003ac 	.word	0x200003ac
    6b6c:	00005edd 	.word	0x00005edd
    6b70:	0000710d 	.word	0x0000710d
    6b74:	41004400 	.word	0x41004400
    6b78:	20000ba8 	.word	0x20000ba8

00006b7c <tfa_pib_set>:
 * \return MAC_UNSUPPORTED_ATTRIBUTE if the TFA info base attribute is not found
 *         TAL_BUSY if the TAL is not in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 */
retval_t tfa_pib_set(tfa_pib_t tfa_pib_attribute, void *value)
{
    6b7c:	b510      	push	{r4, lr}
	switch (tfa_pib_attribute) {
    6b7e:	2800      	cmp	r0, #0
    6b80:	d001      	beq.n	6b86 <tfa_pib_set+0xa>
	}
	break;

	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
    6b82:	20f4      	movs	r0, #244	; 0xf4
	}

	return MAC_SUCCESS;
}
    6b84:	bd10      	pop	{r4, pc}
		tfa_pib_rx_sens = *((int8_t *)value);
    6b86:	2000      	movs	r0, #0
    6b88:	5608      	ldrsb	r0, [r1, r0]
		if (tfa_pib_rx_sens > -49) {
    6b8a:	0003      	movs	r3, r0
    6b8c:	3330      	adds	r3, #48	; 0x30
    6b8e:	db0a      	blt.n	6ba6 <tfa_pib_set+0x2a>
			tfa_pib_rx_sens = -49;
    6b90:	22cf      	movs	r2, #207	; 0xcf
    6b92:	4b0d      	ldr	r3, [pc, #52]	; (6bc8 <tfa_pib_set+0x4c>)
    6b94:	701a      	strb	r2, [r3, #0]
			reg_val = 0xF;
    6b96:	230f      	movs	r3, #15
		trx_bit_write(SR_RX_PDT_LEVEL, reg_val);
    6b98:	2200      	movs	r2, #0
    6b9a:	210f      	movs	r1, #15
    6b9c:	2015      	movs	r0, #21
    6b9e:	4c0b      	ldr	r4, [pc, #44]	; (6bcc <tfa_pib_set+0x50>)
    6ba0:	47a0      	blx	r4
	return MAC_SUCCESS;
    6ba2:	2000      	movs	r0, #0
    6ba4:	e7ee      	b.n	6b84 <tfa_pib_set+0x8>
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
    6ba6:	0003      	movs	r3, r0
    6ba8:	335a      	adds	r3, #90	; 0x5a
    6baa:	da04      	bge.n	6bb6 <tfa_pib_set+0x3a>
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
    6bac:	22a5      	movs	r2, #165	; 0xa5
    6bae:	4b06      	ldr	r3, [pc, #24]	; (6bc8 <tfa_pib_set+0x4c>)
    6bb0:	701a      	strb	r2, [r3, #0]
			reg_val = 0x0;
    6bb2:	2300      	movs	r3, #0
    6bb4:	e7f0      	b.n	6b98 <tfa_pib_set+0x1c>
		tfa_pib_rx_sens = *((int8_t *)value);
    6bb6:	4b04      	ldr	r3, [pc, #16]	; (6bc8 <tfa_pib_set+0x4c>)
    6bb8:	7018      	strb	r0, [r3, #0]
				= ((tfa_pib_rx_sens -
    6bba:	305b      	adds	r0, #91	; 0x5b
					(RSSI_BASE_VAL_DBM)) / 3) + 1;
    6bbc:	2103      	movs	r1, #3
    6bbe:	4b04      	ldr	r3, [pc, #16]	; (6bd0 <tfa_pib_set+0x54>)
    6bc0:	4798      	blx	r3
				= ((tfa_pib_rx_sens -
    6bc2:	3001      	adds	r0, #1
    6bc4:	b2c3      	uxtb	r3, r0
    6bc6:	e7e7      	b.n	6b98 <tfa_pib_set+0x1c>
    6bc8:	200003b3 	.word	0x200003b3
    6bcc:	00007125 	.word	0x00007125
    6bd0:	00007ef5 	.word	0x00007ef5

00006bd4 <tfa_init>:
 *
 * \return MAC_SUCCESS if everything went correct;
 *         FAILURE otherwise
 */
retval_t tfa_init(void)
{
    6bd4:	b510      	push	{r4, lr}
 * to their default values.
 * \ingroup group_tfa
 */
static void init_tfa_pib(void)
{
	tfa_pib_rx_sens = TFA_PIB_RX_SENS_DEF;
    6bd6:	4904      	ldr	r1, [pc, #16]	; (6be8 <tfa_init+0x14>)
    6bd8:	23a5      	movs	r3, #165	; 0xa5
    6bda:	700b      	strb	r3, [r1, #0]
 * It is assumed that the radio does not sleep.
 * \ingroup group_tfa
 */
static void write_all_tfa_pibs_to_trx(void)
{
	tfa_pib_set(TFA_PIB_RX_SENS, (void *)&tfa_pib_rx_sens);
    6bdc:	2000      	movs	r0, #0
    6bde:	4b03      	ldr	r3, [pc, #12]	; (6bec <tfa_init+0x18>)
    6be0:	4798      	blx	r3
}
    6be2:	2000      	movs	r0, #0
    6be4:	bd10      	pop	{r4, pc}
    6be6:	46c0      	nop			; (mov r8, r8)
    6be8:	200003b3 	.word	0x200003b3
    6bec:	00006b7d 	.word	0x00006b7d

00006bf0 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    6bf0:	b510      	push	{r4, lr}
	tmr_cca_callback();
    6bf2:	4b01      	ldr	r3, [pc, #4]	; (6bf8 <tc_cca_callback+0x8>)
    6bf4:	4798      	blx	r3
}
    6bf6:	bd10      	pop	{r4, pc}
    6bf8:	00007dad 	.word	0x00007dad

00006bfc <tc_ovf_callback>:
{
    6bfc:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    6bfe:	4b01      	ldr	r3, [pc, #4]	; (6c04 <tc_ovf_callback+0x8>)
    6c00:	4798      	blx	r3
}
    6c02:	bd10      	pop	{r4, pc}
    6c04:	00007d65 	.word	0x00007d65

00006c08 <tmr_read_count>:
{
    6c08:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    6c0a:	4802      	ldr	r0, [pc, #8]	; (6c14 <tmr_read_count+0xc>)
    6c0c:	4b02      	ldr	r3, [pc, #8]	; (6c18 <tmr_read_count+0x10>)
    6c0e:	4798      	blx	r3
    6c10:	b280      	uxth	r0, r0
}
    6c12:	bd10      	pop	{r4, pc}
    6c14:	20000c1c 	.word	0x20000c1c
    6c18:	00005651 	.word	0x00005651

00006c1c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    6c1c:	4b03      	ldr	r3, [pc, #12]	; (6c2c <tmr_disable_cc_interrupt+0x10>)
    6c1e:	2110      	movs	r1, #16
    6c20:	681a      	ldr	r2, [r3, #0]
    6c22:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    6c24:	7e5a      	ldrb	r2, [r3, #25]
    6c26:	438a      	bics	r2, r1
    6c28:	765a      	strb	r2, [r3, #25]
}
    6c2a:	4770      	bx	lr
    6c2c:	20000c1c 	.word	0x20000c1c

00006c30 <tmr_enable_cc_interrupt>:
{
    6c30:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    6c32:	4c0a      	ldr	r4, [pc, #40]	; (6c5c <tmr_enable_cc_interrupt+0x2c>)
    6c34:	6820      	ldr	r0, [r4, #0]
    6c36:	4b0a      	ldr	r3, [pc, #40]	; (6c60 <tmr_enable_cc_interrupt+0x30>)
    6c38:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    6c3a:	4b0a      	ldr	r3, [pc, #40]	; (6c64 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6c3c:	5c1b      	ldrb	r3, [r3, r0]
    6c3e:	221f      	movs	r2, #31
    6c40:	401a      	ands	r2, r3
    6c42:	2301      	movs	r3, #1
    6c44:	4093      	lsls	r3, r2
    6c46:	4a08      	ldr	r2, [pc, #32]	; (6c68 <tmr_enable_cc_interrupt+0x38>)
    6c48:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    6c4a:	7e63      	ldrb	r3, [r4, #25]
    6c4c:	2210      	movs	r2, #16
    6c4e:	4313      	orrs	r3, r2
    6c50:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    6c52:	6823      	ldr	r3, [r4, #0]
    6c54:	2210      	movs	r2, #16
    6c56:	735a      	strb	r2, [r3, #13]
}
    6c58:	bd10      	pop	{r4, pc}
    6c5a:	46c0      	nop			; (mov r8, r8)
    6c5c:	20000c1c 	.word	0x20000c1c
    6c60:	000053dd 	.word	0x000053dd
    6c64:	0000a384 	.word	0x0000a384
    6c68:	e000e100 	.word	0xe000e100

00006c6c <tmr_write_cmpreg>:
{
    6c6c:	b510      	push	{r4, lr}
    6c6e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    6c70:	2100      	movs	r1, #0
    6c72:	4802      	ldr	r0, [pc, #8]	; (6c7c <tmr_write_cmpreg+0x10>)
    6c74:	4b02      	ldr	r3, [pc, #8]	; (6c80 <tmr_write_cmpreg+0x14>)
    6c76:	4798      	blx	r3
}
    6c78:	bd10      	pop	{r4, pc}
    6c7a:	46c0      	nop			; (mov r8, r8)
    6c7c:	20000c1c 	.word	0x20000c1c
    6c80:	0000567d 	.word	0x0000567d

00006c84 <save_cpu_interrupt>:
{
    6c84:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6c86:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    6c8a:	425a      	negs	r2, r3
    6c8c:	4153      	adcs	r3, r2
    6c8e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    6c90:	b672      	cpsid	i
  __ASM volatile ("dmb");
    6c92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6c96:	2200      	movs	r2, #0
    6c98:	4b02      	ldr	r3, [pc, #8]	; (6ca4 <save_cpu_interrupt+0x20>)
    6c9a:	701a      	strb	r2, [r3, #0]
	return flags;
    6c9c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    6c9e:	b2c0      	uxtb	r0, r0
}
    6ca0:	b002      	add	sp, #8
    6ca2:	4770      	bx	lr
    6ca4:	2000000c 	.word	0x2000000c

00006ca8 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    6ca8:	2800      	cmp	r0, #0
    6caa:	d005      	beq.n	6cb8 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    6cac:	2201      	movs	r2, #1
    6cae:	4b03      	ldr	r3, [pc, #12]	; (6cbc <restore_cpu_interrupt+0x14>)
    6cb0:	701a      	strb	r2, [r3, #0]
    6cb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6cb6:	b662      	cpsie	i
}
    6cb8:	4770      	bx	lr
    6cba:	46c0      	nop			; (mov r8, r8)
    6cbc:	2000000c 	.word	0x2000000c

00006cc0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    6cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cc2:	46ce      	mov	lr, r9
    6cc4:	4647      	mov	r7, r8
    6cc6:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    6cc8:	4a2d      	ldr	r2, [pc, #180]	; (6d80 <tmr_init+0xc0>)
    6cca:	2300      	movs	r3, #0
    6ccc:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    6cce:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    6cd0:	2100      	movs	r1, #0
    6cd2:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    6cd4:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    6cd6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    6cd8:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    6cda:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    6cdc:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    6cde:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    6ce0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    6ce2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    6ce4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    6ce6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    6ce8:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    6cea:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    6cec:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    6cee:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    6cf0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    6cf2:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    6cf4:	3b01      	subs	r3, #1
    6cf6:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    6cf8:	4c22      	ldr	r4, [pc, #136]	; (6d84 <tmr_init+0xc4>)
    6cfa:	4923      	ldr	r1, [pc, #140]	; (6d88 <tmr_init+0xc8>)
    6cfc:	0020      	movs	r0, r4
    6cfe:	4b23      	ldr	r3, [pc, #140]	; (6d8c <tmr_init+0xcc>)
    6d00:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    6d02:	2200      	movs	r2, #0
    6d04:	4922      	ldr	r1, [pc, #136]	; (6d90 <tmr_init+0xd0>)
    6d06:	0020      	movs	r0, r4
    6d08:	4d22      	ldr	r5, [pc, #136]	; (6d94 <tmr_init+0xd4>)
    6d0a:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    6d0c:	2202      	movs	r2, #2
    6d0e:	4922      	ldr	r1, [pc, #136]	; (6d98 <tmr_init+0xd8>)
    6d10:	0020      	movs	r0, r4
    6d12:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    6d14:	6820      	ldr	r0, [r4, #0]
    6d16:	4b21      	ldr	r3, [pc, #132]	; (6d9c <tmr_init+0xdc>)
    6d18:	4699      	mov	r9, r3
    6d1a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    6d1c:	4b20      	ldr	r3, [pc, #128]	; (6da0 <tmr_init+0xe0>)
    6d1e:	4698      	mov	r8, r3
    6d20:	5c1b      	ldrb	r3, [r3, r0]
    6d22:	261f      	movs	r6, #31
    6d24:	4033      	ands	r3, r6
    6d26:	2501      	movs	r5, #1
    6d28:	002a      	movs	r2, r5
    6d2a:	409a      	lsls	r2, r3
    6d2c:	4f1d      	ldr	r7, [pc, #116]	; (6da4 <tmr_init+0xe4>)
    6d2e:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    6d30:	7e63      	ldrb	r3, [r4, #25]
    6d32:	2201      	movs	r2, #1
    6d34:	4313      	orrs	r3, r2
    6d36:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    6d38:	6823      	ldr	r3, [r4, #0]
    6d3a:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    6d3c:	0018      	movs	r0, r3
    6d3e:	47c8      	blx	r9
    6d40:	4643      	mov	r3, r8
    6d42:	5c1b      	ldrb	r3, [r3, r0]
    6d44:	401e      	ands	r6, r3
    6d46:	40b5      	lsls	r5, r6
    6d48:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    6d4a:	7e63      	ldrb	r3, [r4, #25]
    6d4c:	2210      	movs	r2, #16
    6d4e:	4313      	orrs	r3, r2
    6d50:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    6d52:	6822      	ldr	r2, [r4, #0]
    6d54:	2310      	movs	r3, #16
    6d56:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    6d58:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    6d5a:	b25b      	sxtb	r3, r3
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	dbfb      	blt.n	6d58 <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    6d60:	8813      	ldrh	r3, [r2, #0]
    6d62:	2102      	movs	r1, #2
    6d64:	430b      	orrs	r3, r1
    6d66:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    6d68:	2000      	movs	r0, #0
    6d6a:	4b0f      	ldr	r3, [pc, #60]	; (6da8 <tmr_init+0xe8>)
    6d6c:	4798      	blx	r3
    6d6e:	490f      	ldr	r1, [pc, #60]	; (6dac <tmr_init+0xec>)
    6d70:	4b0f      	ldr	r3, [pc, #60]	; (6db0 <tmr_init+0xf0>)
    6d72:	4798      	blx	r3
	#endif
	return timer_multiplier;
    6d74:	b2c0      	uxtb	r0, r0
}
    6d76:	bc0c      	pop	{r2, r3}
    6d78:	4690      	mov	r8, r2
    6d7a:	4699      	mov	r9, r3
    6d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d7e:	46c0      	nop			; (mov r8, r8)
    6d80:	20000be8 	.word	0x20000be8
    6d84:	20000c1c 	.word	0x20000c1c
    6d88:	42002c00 	.word	0x42002c00
    6d8c:	00005415 	.word	0x00005415
    6d90:	00006bfd 	.word	0x00006bfd
    6d94:	00005315 	.word	0x00005315
    6d98:	00006bf1 	.word	0x00006bf1
    6d9c:	000053dd 	.word	0x000053dd
    6da0:	0000a384 	.word	0x0000a384
    6da4:	e000e100 	.word	0xe000e100
    6da8:	000050ad 	.word	0x000050ad
    6dac:	000f4240 	.word	0x000f4240
    6db0:	00007de1 	.word	0x00007de1

00006db4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    6db4:	b510      	push	{r4, lr}
    6db6:	2201      	movs	r2, #1
    6db8:	4b03      	ldr	r3, [pc, #12]	; (6dc8 <AT86RFX_ISR+0x14>)
    6dba:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    6dbc:	4b03      	ldr	r3, [pc, #12]	; (6dcc <AT86RFX_ISR+0x18>)
    6dbe:	681b      	ldr	r3, [r3, #0]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d000      	beq.n	6dc6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    6dc4:	4798      	blx	r3
	}
}
    6dc6:	bd10      	pop	{r4, pc}
    6dc8:	40001800 	.word	0x40001800
    6dcc:	200003b4 	.word	0x200003b4

00006dd0 <trx_spi_init>:

void trx_spi_init(void)
{
    6dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dd2:	b085      	sub	sp, #20
	config->address_enabled = false;
    6dd4:	4a38      	ldr	r2, [pc, #224]	; (6eb8 <trx_spi_init+0xe8>)
    6dd6:	2300      	movs	r3, #0
    6dd8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    6dda:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
//#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    6ddc:	213f      	movs	r1, #63	; 0x3f
    6dde:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    6de0:	4c36      	ldr	r4, [pc, #216]	; (6ebc <trx_spi_init+0xec>)
    6de2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    6de4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    6de6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    6de8:	2201      	movs	r2, #1
    6dea:	4669      	mov	r1, sp
    6dec:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    6dee:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    6df0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    6df2:	203f      	movs	r0, #63	; 0x3f
    6df4:	4b32      	ldr	r3, [pc, #200]	; (6ec0 <trx_spi_init+0xf0>)
    6df6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    6df8:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    6dfa:	09d9      	lsrs	r1, r3, #7
		return NULL;
    6dfc:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    6dfe:	2900      	cmp	r1, #0
    6e00:	d104      	bne.n	6e0c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    6e02:	095a      	lsrs	r2, r3, #5
    6e04:	01d2      	lsls	r2, r2, #7
    6e06:	492f      	ldr	r1, [pc, #188]	; (6ec4 <trx_spi_init+0xf4>)
    6e08:	468c      	mov	ip, r1
    6e0a:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6e0c:	261f      	movs	r6, #31
    6e0e:	4033      	ands	r3, r6
    6e10:	2501      	movs	r5, #1
    6e12:	0029      	movs	r1, r5
    6e14:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    6e16:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    6e18:	4c2b      	ldr	r4, [pc, #172]	; (6ec8 <trx_spi_init+0xf8>)
    6e1a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6e1c:	2300      	movs	r3, #0
    6e1e:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6e20:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6e22:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    6e24:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    6e26:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6e28:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    6e2a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6e2c:	2224      	movs	r2, #36	; 0x24
    6e2e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6e30:	0020      	movs	r0, r4
    6e32:	3018      	adds	r0, #24
    6e34:	3a18      	subs	r2, #24
    6e36:	2100      	movs	r1, #0
    6e38:	4b24      	ldr	r3, [pc, #144]	; (6ecc <trx_spi_init+0xfc>)
    6e3a:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    6e3c:	2380      	movs	r3, #128	; 0x80
    6e3e:	025b      	lsls	r3, r3, #9
    6e40:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    6e42:	4b23      	ldr	r3, [pc, #140]	; (6ed0 <trx_spi_init+0x100>)
    6e44:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    6e46:	4b23      	ldr	r3, [pc, #140]	; (6ed4 <trx_spi_init+0x104>)
    6e48:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    6e4a:	2301      	movs	r3, #1
    6e4c:	425b      	negs	r3, r3
    6e4e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    6e50:	4b21      	ldr	r3, [pc, #132]	; (6ed8 <trx_spi_init+0x108>)
    6e52:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    6e54:	4b21      	ldr	r3, [pc, #132]	; (6edc <trx_spi_init+0x10c>)
    6e56:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    6e58:	4f21      	ldr	r7, [pc, #132]	; (6ee0 <trx_spi_init+0x110>)
    6e5a:	0022      	movs	r2, r4
    6e5c:	4921      	ldr	r1, [pc, #132]	; (6ee4 <trx_spi_init+0x114>)
    6e5e:	0038      	movs	r0, r7
    6e60:	4b21      	ldr	r3, [pc, #132]	; (6ee8 <trx_spi_init+0x118>)
    6e62:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6e64:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6e66:	0020      	movs	r0, r4
    6e68:	4b20      	ldr	r3, [pc, #128]	; (6eec <trx_spi_init+0x11c>)
    6e6a:	4798      	blx	r3
    6e6c:	4006      	ands	r6, r0
    6e6e:	40b5      	lsls	r5, r6
    6e70:	4b1f      	ldr	r3, [pc, #124]	; (6ef0 <trx_spi_init+0x120>)
    6e72:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6e74:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    6e76:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d1fc      	bne.n	6e76 <trx_spi_init+0xa6>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6e7c:	6823      	ldr	r3, [r4, #0]
    6e7e:	2502      	movs	r5, #2
    6e80:	432b      	orrs	r3, r5
    6e82:	6023      	str	r3, [r4, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    6e84:	ac01      	add	r4, sp, #4
    6e86:	0020      	movs	r0, r4
    6e88:	4b1a      	ldr	r3, [pc, #104]	; (6ef4 <trx_spi_init+0x124>)
    6e8a:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    6e8c:	2320      	movs	r3, #32
    6e8e:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    6e90:	2380      	movs	r3, #128	; 0x80
    6e92:	039b      	lsls	r3, r3, #14
    6e94:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull = EXTINT_PULL_DOWN;
    6e96:	7225      	strb	r5, [r4, #8]
//	#if (SAML21 || SAMR30)
//	eint_chan_conf.enable_async_edge_detection = false;
//	#else
	eint_chan_conf.wake_if_sleeping    = true;
    6e98:	2301      	movs	r3, #1
    6e9a:	7263      	strb	r3, [r4, #9]
//	#endif
	eint_chan_conf.filter_input_signal = false;
    6e9c:	2200      	movs	r2, #0
    6e9e:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    6ea0:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    6ea2:	0021      	movs	r1, r4
    6ea4:	2000      	movs	r0, #0
    6ea6:	4b14      	ldr	r3, [pc, #80]	; (6ef8 <trx_spi_init+0x128>)
    6ea8:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    6eaa:	2200      	movs	r2, #0
    6eac:	2100      	movs	r1, #0
    6eae:	4813      	ldr	r0, [pc, #76]	; (6efc <trx_spi_init+0x12c>)
    6eb0:	4b13      	ldr	r3, [pc, #76]	; (6f00 <trx_spi_init+0x130>)
    6eb2:	4798      	blx	r3
//	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
//			AT86RFX_SPI_BAUDRATE, 0);
//	spi_enable(AT86RFX_SPI);
//	AT86RFX_INTC_INIT();
//#endif
}
    6eb4:	b005      	add	sp, #20
    6eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6eb8:	20000c3c 	.word	0x20000c3c
    6ebc:	20000c40 	.word	0x20000c40
    6ec0:	00004291 	.word	0x00004291
    6ec4:	41004400 	.word	0x41004400
    6ec8:	20000c44 	.word	0x20000c44
    6ecc:	0000817b 	.word	0x0000817b
    6ed0:	004c4b40 	.word	0x004c4b40
    6ed4:	00530005 	.word	0x00530005
    6ed8:	003e0005 	.word	0x003e0005
    6edc:	00520005 	.word	0x00520005
    6ee0:	20000c7c 	.word	0x20000c7c
    6ee4:	42001800 	.word	0x42001800
    6ee8:	000046f9 	.word	0x000046f9
    6eec:	00004669 	.word	0x00004669
    6ef0:	e000e100 	.word	0xe000e100
    6ef4:	00004205 	.word	0x00004205
    6ef8:	00004219 	.word	0x00004219
    6efc:	00006db5 	.word	0x00006db5
    6f00:	000040c1 	.word	0x000040c1

00006f04 <trx_reg_read>:
	delay_us(10);
	RST_HIGH();
}

uint8_t trx_reg_read(uint8_t addr)
{
    6f04:	b570      	push	{r4, r5, r6, lr}
    6f06:	b082      	sub	sp, #8
    6f08:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6f0a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    6f0e:	425a      	negs	r2, r3
    6f10:	4153      	adcs	r3, r2
    6f12:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    6f14:	b672      	cpsid	i
    6f16:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6f1a:	2200      	movs	r2, #0
    6f1c:	4b33      	ldr	r3, [pc, #204]	; (6fec <trx_reg_read+0xe8>)
    6f1e:	701a      	strb	r2, [r3, #0]
	return flags;
    6f20:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    6f22:	4e33      	ldr	r6, [pc, #204]	; (6ff0 <trx_reg_read+0xec>)
    6f24:	3201      	adds	r2, #1
    6f26:	4933      	ldr	r1, [pc, #204]	; (6ff4 <trx_reg_read+0xf0>)
    6f28:	0030      	movs	r0, r6
    6f2a:	4b33      	ldr	r3, [pc, #204]	; (6ff8 <trx_reg_read+0xf4>)
    6f2c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6f2e:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    6f30:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6f32:	7e1a      	ldrb	r2, [r3, #24]
    6f34:	420a      	tst	r2, r1
    6f36:	d0fc      	beq.n	6f32 <trx_reg_read+0x2e>
    6f38:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    6f3a:	07d2      	lsls	r2, r2, #31
    6f3c:	d502      	bpl.n	6f44 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6f3e:	2280      	movs	r2, #128	; 0x80
    6f40:	4315      	orrs	r5, r2
    6f42:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    6f44:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6f46:	7e1a      	ldrb	r2, [r3, #24]
    6f48:	420a      	tst	r2, r1
    6f4a:	d0fc      	beq.n	6f46 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    6f4c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6f4e:	7e1a      	ldrb	r2, [r3, #24]
    6f50:	420a      	tst	r2, r1
    6f52:	d0fc      	beq.n	6f4e <trx_reg_read+0x4a>
    6f54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    6f56:	0752      	lsls	r2, r2, #29
    6f58:	d50c      	bpl.n	6f74 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6f5a:	8b5a      	ldrh	r2, [r3, #26]
    6f5c:	0752      	lsls	r2, r2, #29
    6f5e:	d501      	bpl.n	6f64 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6f60:	2204      	movs	r2, #4
    6f62:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6f64:	4a22      	ldr	r2, [pc, #136]	; (6ff0 <trx_reg_read+0xec>)
    6f66:	7992      	ldrb	r2, [r2, #6]
    6f68:	2a01      	cmp	r2, #1
    6f6a:	d034      	beq.n	6fd6 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6f6e:	b2d2      	uxtb	r2, r2
    6f70:	4922      	ldr	r1, [pc, #136]	; (6ffc <trx_reg_read+0xf8>)
    6f72:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    6f74:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6f76:	7e1a      	ldrb	r2, [r3, #24]
    6f78:	420a      	tst	r2, r1
    6f7a:	d0fc      	beq.n	6f76 <trx_reg_read+0x72>
    6f7c:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    6f7e:	07d2      	lsls	r2, r2, #31
    6f80:	d501      	bpl.n	6f86 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6f82:	2200      	movs	r2, #0
    6f84:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    6f86:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6f88:	7e1a      	ldrb	r2, [r3, #24]
    6f8a:	420a      	tst	r2, r1
    6f8c:	d0fc      	beq.n	6f88 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    6f8e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6f90:	7e1a      	ldrb	r2, [r3, #24]
    6f92:	420a      	tst	r2, r1
    6f94:	d0fc      	beq.n	6f90 <trx_reg_read+0x8c>
    6f96:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    6f98:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    6f9a:	0752      	lsls	r2, r2, #29
    6f9c:	d50a      	bpl.n	6fb4 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6f9e:	8b5a      	ldrh	r2, [r3, #26]
    6fa0:	0752      	lsls	r2, r2, #29
    6fa2:	d501      	bpl.n	6fa8 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6fa4:	2204      	movs	r2, #4
    6fa6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6fa8:	4a11      	ldr	r2, [pc, #68]	; (6ff0 <trx_reg_read+0xec>)
    6faa:	7992      	ldrb	r2, [r2, #6]
    6fac:	2a01      	cmp	r2, #1
    6fae:	d018      	beq.n	6fe2 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6fb0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    6fb2:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    6fb4:	2200      	movs	r2, #0
    6fb6:	490f      	ldr	r1, [pc, #60]	; (6ff4 <trx_reg_read+0xf0>)
    6fb8:	480d      	ldr	r0, [pc, #52]	; (6ff0 <trx_reg_read+0xec>)
    6fba:	4b0f      	ldr	r3, [pc, #60]	; (6ff8 <trx_reg_read+0xf4>)
    6fbc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    6fbe:	23ff      	movs	r3, #255	; 0xff
    6fc0:	4223      	tst	r3, r4
    6fc2:	d005      	beq.n	6fd0 <trx_reg_read+0xcc>
		cpu_irq_enable();
    6fc4:	2201      	movs	r2, #1
    6fc6:	4b09      	ldr	r3, [pc, #36]	; (6fec <trx_reg_read+0xe8>)
    6fc8:	701a      	strb	r2, [r3, #0]
    6fca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6fce:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    6fd0:	b2e8      	uxtb	r0, r5
}
    6fd2:	b002      	add	sp, #8
    6fd4:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6fd8:	05d2      	lsls	r2, r2, #23
    6fda:	0dd2      	lsrs	r2, r2, #23
    6fdc:	4907      	ldr	r1, [pc, #28]	; (6ffc <trx_reg_read+0xf8>)
    6fde:	800a      	strh	r2, [r1, #0]
    6fe0:	e7c8      	b.n	6f74 <trx_reg_read+0x70>
    6fe2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    6fe4:	05ed      	lsls	r5, r5, #23
    6fe6:	0ded      	lsrs	r5, r5, #23
    6fe8:	e7e4      	b.n	6fb4 <trx_reg_read+0xb0>
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	2000000c 	.word	0x2000000c
    6ff0:	20000c7c 	.word	0x20000c7c
    6ff4:	20000c40 	.word	0x20000c40
    6ff8:	000048d1 	.word	0x000048d1
    6ffc:	20000c38 	.word	0x20000c38

00007000 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    7000:	b5f0      	push	{r4, r5, r6, r7, lr}
    7002:	b083      	sub	sp, #12
    7004:	0006      	movs	r6, r0
    7006:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7008:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    700c:	425a      	negs	r2, r3
    700e:	4153      	adcs	r3, r2
    7010:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    7012:	b672      	cpsid	i
    7014:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7018:	2200      	movs	r2, #0
    701a:	4b34      	ldr	r3, [pc, #208]	; (70ec <trx_reg_write+0xec>)
    701c:	701a      	strb	r2, [r3, #0]
	return flags;
    701e:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    7020:	4f33      	ldr	r7, [pc, #204]	; (70f0 <trx_reg_write+0xf0>)
    7022:	3201      	adds	r2, #1
    7024:	4933      	ldr	r1, [pc, #204]	; (70f4 <trx_reg_write+0xf4>)
    7026:	0038      	movs	r0, r7
    7028:	4b33      	ldr	r3, [pc, #204]	; (70f8 <trx_reg_write+0xf8>)
    702a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    702c:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    702e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7030:	7e1a      	ldrb	r2, [r3, #24]
    7032:	420a      	tst	r2, r1
    7034:	d0fc      	beq.n	7030 <trx_reg_write+0x30>
    7036:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    7038:	07d2      	lsls	r2, r2, #31
    703a:	d502      	bpl.n	7042 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    703c:	22c0      	movs	r2, #192	; 0xc0
    703e:	4316      	orrs	r6, r2
    7040:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    7042:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7044:	7e1a      	ldrb	r2, [r3, #24]
    7046:	420a      	tst	r2, r1
    7048:	d0fc      	beq.n	7044 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    704a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    704c:	7e1a      	ldrb	r2, [r3, #24]
    704e:	420a      	tst	r2, r1
    7050:	d0fc      	beq.n	704c <trx_reg_write+0x4c>
    7052:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    7054:	0752      	lsls	r2, r2, #29
    7056:	d50c      	bpl.n	7072 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7058:	8b5a      	ldrh	r2, [r3, #26]
    705a:	0752      	lsls	r2, r2, #29
    705c:	d501      	bpl.n	7062 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    705e:	2204      	movs	r2, #4
    7060:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7062:	4a23      	ldr	r2, [pc, #140]	; (70f0 <trx_reg_write+0xf0>)
    7064:	7992      	ldrb	r2, [r2, #6]
    7066:	2a01      	cmp	r2, #1
    7068:	d033      	beq.n	70d2 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    706a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    706c:	b2d2      	uxtb	r2, r2
    706e:	4923      	ldr	r1, [pc, #140]	; (70fc <trx_reg_write+0xfc>)
    7070:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    7072:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7074:	7e1a      	ldrb	r2, [r3, #24]
    7076:	420a      	tst	r2, r1
    7078:	d0fc      	beq.n	7074 <trx_reg_write+0x74>
    707a:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    707c:	07d2      	lsls	r2, r2, #31
    707e:	d500      	bpl.n	7082 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7080:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    7082:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7084:	7e1a      	ldrb	r2, [r3, #24]
    7086:	420a      	tst	r2, r1
    7088:	d0fc      	beq.n	7084 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    708a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    708c:	7e1a      	ldrb	r2, [r3, #24]
    708e:	420a      	tst	r2, r1
    7090:	d0fc      	beq.n	708c <trx_reg_write+0x8c>
    7092:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    7094:	0752      	lsls	r2, r2, #29
    7096:	d50c      	bpl.n	70b2 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7098:	8b5a      	ldrh	r2, [r3, #26]
    709a:	0752      	lsls	r2, r2, #29
    709c:	d501      	bpl.n	70a2 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    709e:	2204      	movs	r2, #4
    70a0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    70a2:	4a13      	ldr	r2, [pc, #76]	; (70f0 <trx_reg_write+0xf0>)
    70a4:	7992      	ldrb	r2, [r2, #6]
    70a6:	2a01      	cmp	r2, #1
    70a8:	d019      	beq.n	70de <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    70aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ac:	b2db      	uxtb	r3, r3
    70ae:	4a13      	ldr	r2, [pc, #76]	; (70fc <trx_reg_write+0xfc>)
    70b0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    70b2:	2200      	movs	r2, #0
    70b4:	490f      	ldr	r1, [pc, #60]	; (70f4 <trx_reg_write+0xf4>)
    70b6:	480e      	ldr	r0, [pc, #56]	; (70f0 <trx_reg_write+0xf0>)
    70b8:	4b0f      	ldr	r3, [pc, #60]	; (70f8 <trx_reg_write+0xf8>)
    70ba:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    70bc:	23ff      	movs	r3, #255	; 0xff
    70be:	422b      	tst	r3, r5
    70c0:	d005      	beq.n	70ce <trx_reg_write+0xce>
		cpu_irq_enable();
    70c2:	2201      	movs	r2, #1
    70c4:	4b09      	ldr	r3, [pc, #36]	; (70ec <trx_reg_write+0xec>)
    70c6:	701a      	strb	r2, [r3, #0]
    70c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    70cc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    70ce:	b003      	add	sp, #12
    70d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    70d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    70d4:	05d2      	lsls	r2, r2, #23
    70d6:	0dd2      	lsrs	r2, r2, #23
    70d8:	4908      	ldr	r1, [pc, #32]	; (70fc <trx_reg_write+0xfc>)
    70da:	800a      	strh	r2, [r1, #0]
    70dc:	e7c9      	b.n	7072 <trx_reg_write+0x72>
    70de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70e0:	05db      	lsls	r3, r3, #23
    70e2:	0ddb      	lsrs	r3, r3, #23
    70e4:	4a05      	ldr	r2, [pc, #20]	; (70fc <trx_reg_write+0xfc>)
    70e6:	8013      	strh	r3, [r2, #0]
    70e8:	e7e3      	b.n	70b2 <trx_reg_write+0xb2>
    70ea:	46c0      	nop			; (mov r8, r8)
    70ec:	2000000c 	.word	0x2000000c
    70f0:	20000c7c 	.word	0x20000c7c
    70f4:	20000c40 	.word	0x20000c40
    70f8:	000048d1 	.word	0x000048d1
    70fc:	20000c38 	.word	0x20000c38

00007100 <trx_irq_init>:
	 * Set the handler function.
	 * The handler is set before enabling the interrupt to prepare for
	 * spurious
	 * interrupts, that can pop up the moment they are enabled
	 */
	irq_hdl_trx = (irq_handler_t)trx_irq_cb;
    7100:	4b01      	ldr	r3, [pc, #4]	; (7108 <trx_irq_init+0x8>)
    7102:	6018      	str	r0, [r3, #0]
}
    7104:	4770      	bx	lr
    7106:	46c0      	nop			; (mov r8, r8)
    7108:	200003b4 	.word	0x200003b4

0000710c <trx_bit_read>:

uint8_t trx_bit_read(uint8_t addr, uint8_t mask, uint8_t pos)
{
    710c:	b570      	push	{r4, r5, r6, lr}
    710e:	000c      	movs	r4, r1
    7110:	0015      	movs	r5, r2
	uint8_t ret;
	ret = trx_reg_read(addr);
    7112:	4b03      	ldr	r3, [pc, #12]	; (7120 <trx_bit_read+0x14>)
    7114:	4798      	blx	r3
	ret &= mask;
	ret >>= pos;
    7116:	4004      	ands	r4, r0
    7118:	412c      	asrs	r4, r5
	return ret;
    711a:	b2e0      	uxtb	r0, r4
}
    711c:	bd70      	pop	{r4, r5, r6, pc}
    711e:	46c0      	nop			; (mov r8, r8)
    7120:	00006f05 	.word	0x00006f05

00007124 <trx_bit_write>:

void trx_bit_write(uint8_t reg_addr, uint8_t mask, uint8_t pos,
		uint8_t new_value)
{
    7124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7126:	0004      	movs	r4, r0
    7128:	000e      	movs	r6, r1
    712a:	0017      	movs	r7, r2
    712c:	001d      	movs	r5, r3
	uint8_t current_reg_value;
	current_reg_value = trx_reg_read(reg_addr);
    712e:	4b05      	ldr	r3, [pc, #20]	; (7144 <trx_bit_write+0x20>)
    7130:	4798      	blx	r3
	current_reg_value &= ~mask;
    7132:	43b0      	bics	r0, r6
	new_value <<= pos;
    7134:	40bd      	lsls	r5, r7
	new_value &= mask;
    7136:	4035      	ands	r5, r6
	new_value |= current_reg_value;
    7138:	b2c1      	uxtb	r1, r0
	trx_reg_write(reg_addr, new_value);
    713a:	4329      	orrs	r1, r5
    713c:	0020      	movs	r0, r4
    713e:	4b02      	ldr	r3, [pc, #8]	; (7148 <trx_bit_write+0x24>)
    7140:	4798      	blx	r3
}
    7142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7144:	00006f05 	.word	0x00006f05
    7148:	00007001 	.word	0x00007001

0000714c <trx_frame_read>:

void trx_frame_read(uint8_t *data, uint8_t length)
{
    714c:	b5f0      	push	{r4, r5, r6, r7, lr}
    714e:	46d6      	mov	lr, sl
    7150:	464f      	mov	r7, r9
    7152:	4646      	mov	r6, r8
    7154:	b5c0      	push	{r6, r7, lr}
    7156:	b082      	sub	sp, #8
    7158:	0005      	movs	r5, r0
    715a:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    715c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7160:	425a      	negs	r2, r3
    7162:	4153      	adcs	r3, r2
    7164:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    7166:	b672      	cpsid	i
    7168:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    716c:	2200      	movs	r2, #0
    716e:	4b3e      	ldr	r3, [pc, #248]	; (7268 <trx_frame_read+0x11c>)
    7170:	701a      	strb	r2, [r3, #0]
	return flags;
    7172:	9b01      	ldr	r3, [sp, #4]
    7174:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    7176:	4f3d      	ldr	r7, [pc, #244]	; (726c <trx_frame_read+0x120>)
    7178:	3201      	adds	r2, #1
    717a:	493d      	ldr	r1, [pc, #244]	; (7270 <trx_frame_read+0x124>)
    717c:	0038      	movs	r0, r7
    717e:	4b3d      	ldr	r3, [pc, #244]	; (7274 <trx_frame_read+0x128>)
    7180:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    7182:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    7184:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7186:	7e1a      	ldrb	r2, [r3, #24]
    7188:	420a      	tst	r2, r1
    718a:	d0fc      	beq.n	7186 <trx_frame_read+0x3a>
    718c:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    718e:	07d2      	lsls	r2, r2, #31
    7190:	d501      	bpl.n	7196 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7192:	2220      	movs	r2, #32
    7194:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    7196:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7198:	7e1a      	ldrb	r2, [r3, #24]
    719a:	420a      	tst	r2, r1
    719c:	d0fc      	beq.n	7198 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    719e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    71a0:	7e1a      	ldrb	r2, [r3, #24]
    71a2:	420a      	tst	r2, r1
    71a4:	d0fc      	beq.n	71a0 <trx_frame_read+0x54>
    71a6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    71a8:	0752      	lsls	r2, r2, #29
    71aa:	d50c      	bpl.n	71c6 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    71ac:	8b5a      	ldrh	r2, [r3, #26]
    71ae:	0752      	lsls	r2, r2, #29
    71b0:	d501      	bpl.n	71b6 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    71b2:	2204      	movs	r2, #4
    71b4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    71b6:	4a2d      	ldr	r2, [pc, #180]	; (726c <trx_frame_read+0x120>)
    71b8:	7992      	ldrb	r2, [r2, #6]
    71ba:	2a01      	cmp	r2, #1
    71bc:	d013      	beq.n	71e6 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    71be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71c0:	b2db      	uxtb	r3, r3
    71c2:	4a2d      	ldr	r2, [pc, #180]	; (7278 <trx_frame_read+0x12c>)
    71c4:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    71c6:	1e63      	subs	r3, r4, #1
    71c8:	b2db      	uxtb	r3, r3
    71ca:	2c00      	cmp	r4, #0
    71cc:	d036      	beq.n	723c <trx_frame_read+0xf0>
    71ce:	3301      	adds	r3, #1
    71d0:	469c      	mov	ip, r3
    71d2:	44ac      	add	ip, r5
    71d4:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    71d6:	4e25      	ldr	r6, [pc, #148]	; (726c <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    71d8:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    71da:	2300      	movs	r3, #0
    71dc:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    71de:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    71e0:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    71e2:	46b1      	mov	r9, r6
    71e4:	e00f      	b.n	7206 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    71e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71e8:	05db      	lsls	r3, r3, #23
    71ea:	0ddb      	lsrs	r3, r3, #23
    71ec:	4a22      	ldr	r2, [pc, #136]	; (7278 <trx_frame_read+0x12c>)
    71ee:	8013      	strh	r3, [r2, #0]
    71f0:	e7e9      	b.n	71c6 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    71f2:	464a      	mov	r2, r9
    71f4:	7992      	ldrb	r2, [r2, #6]
    71f6:	2a01      	cmp	r2, #1
    71f8:	d01c      	beq.n	7234 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    71fa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    71fc:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    71fe:	702f      	strb	r7, [r5, #0]
		data++;
    7200:	3501      	adds	r5, #1
	while (length--) {
    7202:	4565      	cmp	r5, ip
    7204:	d01a      	beq.n	723c <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7206:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7208:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    720a:	4202      	tst	r2, r0
    720c:	d0fc      	beq.n	7208 <trx_frame_read+0xbc>
    720e:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    7210:	4202      	tst	r2, r0
    7212:	d001      	beq.n	7218 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7214:	4652      	mov	r2, sl
    7216:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7218:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    721a:	4222      	tst	r2, r4
    721c:	d0fc      	beq.n	7218 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    721e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    7220:	420a      	tst	r2, r1
    7222:	d0fc      	beq.n	721e <trx_frame_read+0xd2>
    7224:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    7226:	420a      	tst	r2, r1
    7228:	d0e9      	beq.n	71fe <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    722a:	8b5a      	ldrh	r2, [r3, #26]
    722c:	420a      	tst	r2, r1
    722e:	d0e0      	beq.n	71f2 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7230:	8359      	strh	r1, [r3, #26]
    7232:	e7de      	b.n	71f2 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7234:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    7236:	05ff      	lsls	r7, r7, #23
    7238:	0dff      	lsrs	r7, r7, #23
    723a:	e7e0      	b.n	71fe <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    723c:	2200      	movs	r2, #0
    723e:	490c      	ldr	r1, [pc, #48]	; (7270 <trx_frame_read+0x124>)
    7240:	480a      	ldr	r0, [pc, #40]	; (726c <trx_frame_read+0x120>)
    7242:	4b0c      	ldr	r3, [pc, #48]	; (7274 <trx_frame_read+0x128>)
    7244:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    7246:	23ff      	movs	r3, #255	; 0xff
    7248:	4642      	mov	r2, r8
    724a:	4213      	tst	r3, r2
    724c:	d005      	beq.n	725a <trx_frame_read+0x10e>
		cpu_irq_enable();
    724e:	2201      	movs	r2, #1
    7250:	4b05      	ldr	r3, [pc, #20]	; (7268 <trx_frame_read+0x11c>)
    7252:	701a      	strb	r2, [r3, #0]
    7254:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7258:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    725a:	b002      	add	sp, #8
    725c:	bc1c      	pop	{r2, r3, r4}
    725e:	4690      	mov	r8, r2
    7260:	4699      	mov	r9, r3
    7262:	46a2      	mov	sl, r4
    7264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7266:	46c0      	nop			; (mov r8, r8)
    7268:	2000000c 	.word	0x2000000c
    726c:	20000c7c 	.word	0x20000c7c
    7270:	20000c40 	.word	0x20000c40
    7274:	000048d1 	.word	0x000048d1
    7278:	20000c38 	.word	0x20000c38

0000727c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    727c:	b510      	push	{r4, lr}
    727e:	b082      	sub	sp, #8
	switch(u8MsgType) 
    7280:	282c      	cmp	r0, #44	; 0x2c
    7282:	d003      	beq.n	728c <wifi_cb+0x10>
    7284:	2832      	cmp	r0, #50	; 0x32
    7286:	d01b      	beq.n	72c0 <wifi_cb+0x44>
			break;
		}

		default:break;
	}
}
    7288:	b002      	add	sp, #8
    728a:	bd10      	pop	{r4, pc}
			if(pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) 
    728c:	780b      	ldrb	r3, [r1, #0]
    728e:	2b01      	cmp	r3, #1
    7290:	d010      	beq.n	72b4 <wifi_cb+0x38>
			else if(pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) 
    7292:	2b00      	cmp	r3, #0
    7294:	d1f8      	bne.n	7288 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    7296:	4811      	ldr	r0, [pc, #68]	; (72dc <wifi_cb+0x60>)
    7298:	4b11      	ldr	r3, [pc, #68]	; (72e0 <wifi_cb+0x64>)
    729a:	4798      	blx	r3
				wifi_connected = 0;
    729c:	2200      	movs	r2, #0
    729e:	4b11      	ldr	r3, [pc, #68]	; (72e4 <wifi_cb+0x68>)
    72a0:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), 
    72a2:	23ff      	movs	r3, #255	; 0xff
    72a4:	9300      	str	r3, [sp, #0]
    72a6:	4b10      	ldr	r3, [pc, #64]	; (72e8 <wifi_cb+0x6c>)
    72a8:	3202      	adds	r2, #2
    72aa:	210e      	movs	r1, #14
    72ac:	480f      	ldr	r0, [pc, #60]	; (72ec <wifi_cb+0x70>)
    72ae:	4c10      	ldr	r4, [pc, #64]	; (72f0 <wifi_cb+0x74>)
    72b0:	47a0      	blx	r4
    72b2:	e7e9      	b.n	7288 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    72b4:	480f      	ldr	r0, [pc, #60]	; (72f4 <wifi_cb+0x78>)
    72b6:	4b0a      	ldr	r3, [pc, #40]	; (72e0 <wifi_cb+0x64>)
    72b8:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    72ba:	4b0f      	ldr	r3, [pc, #60]	; (72f8 <wifi_cb+0x7c>)
    72bc:	4798      	blx	r3
    72be:	e7e3      	b.n	7288 <wifi_cb+0xc>
			wifi_connected = 1;
    72c0:	2201      	movs	r2, #1
    72c2:	4b08      	ldr	r3, [pc, #32]	; (72e4 <wifi_cb+0x68>)
    72c4:	701a      	strb	r2, [r3, #0]
			printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    72c6:	788b      	ldrb	r3, [r1, #2]
    72c8:	784a      	ldrb	r2, [r1, #1]
    72ca:	7808      	ldrb	r0, [r1, #0]
    72cc:	78c9      	ldrb	r1, [r1, #3]
    72ce:	9100      	str	r1, [sp, #0]
    72d0:	0001      	movs	r1, r0
    72d2:	480a      	ldr	r0, [pc, #40]	; (72fc <wifi_cb+0x80>)
    72d4:	4c0a      	ldr	r4, [pc, #40]	; (7300 <wifi_cb+0x84>)
    72d6:	47a0      	blx	r4
}
    72d8:	e7d6      	b.n	7288 <wifi_cb+0xc>
    72da:	46c0      	nop			; (mov r8, r8)
    72dc:	0000a760 	.word	0x0000a760
    72e0:	000082a9 	.word	0x000082a9
    72e4:	20000990 	.word	0x20000990
    72e8:	0000a798 	.word	0x0000a798
    72ec:	0000a7a4 	.word	0x0000a7a4
    72f0:	00001479 	.word	0x00001479
    72f4:	0000a728 	.word	0x0000a728
    72f8:	00001495 	.word	0x00001495
    72fc:	0000a7b4 	.word	0x0000a7b4
    7300:	0000818d 	.word	0x0000818d

00007304 <ser_data_out>:
{
    7304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7306:	0005      	movs	r5, r0
	for(clk_count_num=0;clk_count_num<8;clk_count_num++)
    7308:	2200      	movs	r2, #0
    730a:	4b13      	ldr	r3, [pc, #76]	; (7358 <ser_data_out+0x54>)
    730c:	701a      	strb	r2, [r3, #0]
		else{SER_HIGH;delay_ms(1);}
    730e:	4e13      	ldr	r6, [pc, #76]	; (735c <ser_data_out+0x58>)
		if((out_data&0x80)==0){SER_LOW;delay_ms(1);}
    7310:	4f13      	ldr	r7, [pc, #76]	; (7360 <ser_data_out+0x5c>)
    7312:	e014      	b.n	733e <ser_data_out+0x3a>
		else{SER_HIGH;delay_ms(1);}
    7314:	2340      	movs	r3, #64	; 0x40
    7316:	61b3      	str	r3, [r6, #24]
    7318:	2001      	movs	r0, #1
    731a:	4b11      	ldr	r3, [pc, #68]	; (7360 <ser_data_out+0x5c>)
    731c:	4798      	blx	r3
		out_data<<=1;
    731e:	006d      	lsls	r5, r5, #1
    7320:	b2ed      	uxtb	r5, r5
		SCK_HIGH;
    7322:	2480      	movs	r4, #128	; 0x80
    7324:	02e4      	lsls	r4, r4, #11
    7326:	61b4      	str	r4, [r6, #24]
		delay_ms(1);
    7328:	2001      	movs	r0, #1
    732a:	4b0d      	ldr	r3, [pc, #52]	; (7360 <ser_data_out+0x5c>)
    732c:	4798      	blx	r3
		SCK_LOW;
    732e:	6174      	str	r4, [r6, #20]
	for(clk_count_num=0;clk_count_num<8;clk_count_num++)
    7330:	4a09      	ldr	r2, [pc, #36]	; (7358 <ser_data_out+0x54>)
    7332:	7813      	ldrb	r3, [r2, #0]
    7334:	3301      	adds	r3, #1
    7336:	b2db      	uxtb	r3, r3
    7338:	7013      	strb	r3, [r2, #0]
    733a:	2b07      	cmp	r3, #7
    733c:	d807      	bhi.n	734e <ser_data_out+0x4a>
		if((out_data&0x80)==0){SER_LOW;delay_ms(1);}
    733e:	b26b      	sxtb	r3, r5
    7340:	2b00      	cmp	r3, #0
    7342:	dbe7      	blt.n	7314 <ser_data_out+0x10>
    7344:	2340      	movs	r3, #64	; 0x40
    7346:	6173      	str	r3, [r6, #20]
    7348:	2001      	movs	r0, #1
    734a:	47b8      	blx	r7
    734c:	e7e7      	b.n	731e <ser_data_out+0x1a>
	RCK_HIGH;
    734e:	4b03      	ldr	r3, [pc, #12]	; (735c <ser_data_out+0x58>)
    7350:	2280      	movs	r2, #128	; 0x80
    7352:	619a      	str	r2, [r3, #24]
	RCK_LOW;
    7354:	615a      	str	r2, [r3, #20]
}
    7356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7358:	200003c8 	.word	0x200003c8
    735c:	41004400 	.word	0x41004400
    7360:	00004025 	.word	0x00004025

00007364 <socket_cb>:
{
    7364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7366:	0014      	movs	r4, r2
	switch(u8Msg) 
    7368:	2907      	cmp	r1, #7
    736a:	d900      	bls.n	736e <socket_cb+0xa>
    736c:	e07a      	b.n	7464 <socket_cb+0x100>
    736e:	0089      	lsls	r1, r1, #2
    7370:	4bcb      	ldr	r3, [pc, #812]	; (76a0 <socket_cb+0x33c>)
    7372:	585b      	ldr	r3, [r3, r1]
    7374:	469f      	mov	pc, r3
			if(pstrBind && pstrBind->status == 0) 
    7376:	2a00      	cmp	r2, #0
    7378:	d003      	beq.n	7382 <socket_cb+0x1e>
    737a:	2300      	movs	r3, #0
    737c:	56d3      	ldrsb	r3, [r2, r3]
    737e:	2b00      	cmp	r3, #0
    7380:	d00a      	beq.n	7398 <socket_cb+0x34>
				printf("socket_cb: bind error!\r\n");
    7382:	48c8      	ldr	r0, [pc, #800]	; (76a4 <socket_cb+0x340>)
    7384:	4bc8      	ldr	r3, [pc, #800]	; (76a8 <socket_cb+0x344>)
    7386:	4798      	blx	r3
				close(tcp_server_socket);
    7388:	4cc8      	ldr	r4, [pc, #800]	; (76ac <socket_cb+0x348>)
    738a:	2000      	movs	r0, #0
    738c:	5620      	ldrsb	r0, [r4, r0]
    738e:	4bc8      	ldr	r3, [pc, #800]	; (76b0 <socket_cb+0x34c>)
    7390:	4798      	blx	r3
				tcp_server_socket = -1;
    7392:	23ff      	movs	r3, #255	; 0xff
    7394:	7023      	strb	r3, [r4, #0]
    7396:	e065      	b.n	7464 <socket_cb+0x100>
				printf("socket_cb: bind success!\r\n");
    7398:	48c6      	ldr	r0, [pc, #792]	; (76b4 <socket_cb+0x350>)
    739a:	4bc3      	ldr	r3, [pc, #780]	; (76a8 <socket_cb+0x344>)
    739c:	4798      	blx	r3
				listen(tcp_server_socket, 0);
    739e:	4bc3      	ldr	r3, [pc, #780]	; (76ac <socket_cb+0x348>)
    73a0:	2000      	movs	r0, #0
    73a2:	5618      	ldrsb	r0, [r3, r0]
    73a4:	2100      	movs	r1, #0
    73a6:	4bc4      	ldr	r3, [pc, #784]	; (76b8 <socket_cb+0x354>)
    73a8:	4798      	blx	r3
    73aa:	e05b      	b.n	7464 <socket_cb+0x100>
			if(pstrListen && pstrListen->status == 0) 
    73ac:	2a00      	cmp	r2, #0
    73ae:	d003      	beq.n	73b8 <socket_cb+0x54>
    73b0:	2300      	movs	r3, #0
    73b2:	56d3      	ldrsb	r3, [r2, r3]
    73b4:	2b00      	cmp	r3, #0
    73b6:	d00f      	beq.n	73d8 <socket_cb+0x74>
				printf("socket_cb: listen error!\r\n");
    73b8:	48c0      	ldr	r0, [pc, #768]	; (76bc <socket_cb+0x358>)
    73ba:	4bbb      	ldr	r3, [pc, #748]	; (76a8 <socket_cb+0x344>)
    73bc:	4798      	blx	r3
				close(tcp_client_socket);
    73be:	4cc0      	ldr	r4, [pc, #768]	; (76c0 <socket_cb+0x35c>)
    73c0:	2000      	movs	r0, #0
    73c2:	5620      	ldrsb	r0, [r4, r0]
    73c4:	4eba      	ldr	r6, [pc, #744]	; (76b0 <socket_cb+0x34c>)
    73c6:	47b0      	blx	r6
				tcp_client_socket = -1;
    73c8:	25ff      	movs	r5, #255	; 0xff
    73ca:	7025      	strb	r5, [r4, #0]
				close(tcp_server_socket);
    73cc:	4cb7      	ldr	r4, [pc, #732]	; (76ac <socket_cb+0x348>)
    73ce:	2000      	movs	r0, #0
    73d0:	5620      	ldrsb	r0, [r4, r0]
    73d2:	47b0      	blx	r6
				tcp_server_socket = -1;
    73d4:	7025      	strb	r5, [r4, #0]
    73d6:	e045      	b.n	7464 <socket_cb+0x100>
				printf("socket_cb: listen success!\r\n");
    73d8:	48ba      	ldr	r0, [pc, #744]	; (76c4 <socket_cb+0x360>)
    73da:	4bb3      	ldr	r3, [pc, #716]	; (76a8 <socket_cb+0x344>)
    73dc:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    73de:	4bb3      	ldr	r3, [pc, #716]	; (76ac <socket_cb+0x348>)
    73e0:	2000      	movs	r0, #0
    73e2:	5618      	ldrsb	r0, [r3, r0]
    73e4:	2200      	movs	r2, #0
    73e6:	2100      	movs	r1, #0
    73e8:	4bb7      	ldr	r3, [pc, #732]	; (76c8 <socket_cb+0x364>)
    73ea:	4798      	blx	r3
    73ec:	e03a      	b.n	7464 <socket_cb+0x100>
			if(pstrAccept) 
    73ee:	2a00      	cmp	r2, #0
    73f0:	d018      	beq.n	7424 <socket_cb+0xc0>
				printf("socket_cb: accept success!\r\n");
    73f2:	48b6      	ldr	r0, [pc, #728]	; (76cc <socket_cb+0x368>)
    73f4:	4bac      	ldr	r3, [pc, #688]	; (76a8 <socket_cb+0x344>)
    73f6:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    73f8:	4bac      	ldr	r3, [pc, #688]	; (76ac <socket_cb+0x348>)
    73fa:	2000      	movs	r0, #0
    73fc:	5618      	ldrsb	r0, [r3, r0]
    73fe:	2200      	movs	r2, #0
    7400:	2100      	movs	r1, #0
    7402:	4bb1      	ldr	r3, [pc, #708]	; (76c8 <socket_cb+0x364>)
    7404:	4798      	blx	r3
				tcp_client_socket = pstrAccept->sock;							
    7406:	4dae      	ldr	r5, [pc, #696]	; (76c0 <socket_cb+0x35c>)
    7408:	7823      	ldrb	r3, [r4, #0]
    740a:	702b      	strb	r3, [r5, #0]
				printf("%X \r\n", pstrAccept->strAddr.sin_addr.s_addr);				
    740c:	68a1      	ldr	r1, [r4, #8]
    740e:	48b0      	ldr	r0, [pc, #704]	; (76d0 <socket_cb+0x36c>)
    7410:	4bb0      	ldr	r3, [pc, #704]	; (76d4 <socket_cb+0x370>)
    7412:	4798      	blx	r3
				recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
    7414:	2000      	movs	r0, #0
    7416:	5628      	ldrsb	r0, [r5, r0]
    7418:	2300      	movs	r3, #0
    741a:	4aaf      	ldr	r2, [pc, #700]	; (76d8 <socket_cb+0x374>)
    741c:	49af      	ldr	r1, [pc, #700]	; (76dc <socket_cb+0x378>)
    741e:	4db0      	ldr	r5, [pc, #704]	; (76e0 <socket_cb+0x37c>)
    7420:	47a8      	blx	r5
    7422:	e019      	b.n	7458 <socket_cb+0xf4>
				printf("socket_cb: accept error!\r\n");				
    7424:	48af      	ldr	r0, [pc, #700]	; (76e4 <socket_cb+0x380>)
    7426:	4ba0      	ldr	r3, [pc, #640]	; (76a8 <socket_cb+0x344>)
    7428:	4798      	blx	r3
				close(tcp_server_socket);
    742a:	4ca0      	ldr	r4, [pc, #640]	; (76ac <socket_cb+0x348>)
    742c:	2000      	movs	r0, #0
    742e:	5620      	ldrsb	r0, [r4, r0]
    7430:	4b9f      	ldr	r3, [pc, #636]	; (76b0 <socket_cb+0x34c>)
    7432:	4798      	blx	r3
				tcp_server_socket = -1;
    7434:	23ff      	movs	r3, #255	; 0xff
    7436:	7023      	strb	r3, [r4, #0]
				printf("socket_cb: connect error!\r\n");
    7438:	48ab      	ldr	r0, [pc, #684]	; (76e8 <socket_cb+0x384>)
    743a:	4b9b      	ldr	r3, [pc, #620]	; (76a8 <socket_cb+0x344>)
    743c:	4798      	blx	r3
				close(tcp_client_socket);
    743e:	4ca0      	ldr	r4, [pc, #640]	; (76c0 <socket_cb+0x35c>)
    7440:	2000      	movs	r0, #0
    7442:	5620      	ldrsb	r0, [r4, r0]
    7444:	4b9a      	ldr	r3, [pc, #616]	; (76b0 <socket_cb+0x34c>)
    7446:	4798      	blx	r3
				tcp_client_socket = -1;			
    7448:	23ff      	movs	r3, #255	; 0xff
    744a:	7023      	strb	r3, [r4, #0]
				delay_ms(3000);
    744c:	48a7      	ldr	r0, [pc, #668]	; (76ec <socket_cb+0x388>)
    744e:	4ba8      	ldr	r3, [pc, #672]	; (76f0 <socket_cb+0x38c>)
    7450:	4798      	blx	r3
    7452:	e007      	b.n	7464 <socket_cb+0x100>
			if(pstrConnect && pstrConnect->s8Error >= 0) 
    7454:	2a00      	cmp	r2, #0
    7456:	d0ef      	beq.n	7438 <socket_cb+0xd4>
    7458:	7863      	ldrb	r3, [r4, #1]
    745a:	2b7f      	cmp	r3, #127	; 0x7f
    745c:	d8ec      	bhi.n	7438 <socket_cb+0xd4>
				printf("socket_cb: connect success!\r\n");
    745e:	48a5      	ldr	r0, [pc, #660]	; (76f4 <socket_cb+0x390>)
    7460:	4b91      	ldr	r3, [pc, #580]	; (76a8 <socket_cb+0x344>)
    7462:	4798      	blx	r3
}
    7464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			printf("socket_cb: send success!\r\n");
    7466:	48a4      	ldr	r0, [pc, #656]	; (76f8 <socket_cb+0x394>)
    7468:	4b8f      	ldr	r3, [pc, #572]	; (76a8 <socket_cb+0x344>)
    746a:	4798      	blx	r3
			close(tcp_client_socket);
    746c:	4c94      	ldr	r4, [pc, #592]	; (76c0 <socket_cb+0x35c>)
    746e:	2000      	movs	r0, #0
    7470:	5620      	ldrsb	r0, [r4, r0]
    7472:	4b8f      	ldr	r3, [pc, #572]	; (76b0 <socket_cb+0x34c>)
    7474:	4798      	blx	r3
			tcp_client_socket = -1;
    7476:	23ff      	movs	r3, #255	; 0xff
    7478:	7023      	strb	r3, [r4, #0]
		break;
    747a:	e7f3      	b.n	7464 <socket_cb+0x100>
				if(pstrRecv && pstrRecv->s16BufferSize > 0) 
    747c:	2a00      	cmp	r2, #0
    747e:	d100      	bne.n	7482 <socket_cb+0x11e>
    7480:	e203      	b.n	788a <socket_cb+0x526>
    7482:	2204      	movs	r2, #4
    7484:	5ea3      	ldrsh	r3, [r4, r2]
    7486:	2b00      	cmp	r3, #0
    7488:	dc00      	bgt.n	748c <socket_cb+0x128>
    748a:	e1fe      	b.n	788a <socket_cb+0x526>
					printf("socket_cb: recv success!\r\n");				
    748c:	489b      	ldr	r0, [pc, #620]	; (76fc <socket_cb+0x398>)
    748e:	4b86      	ldr	r3, [pc, #536]	; (76a8 <socket_cb+0x344>)
    7490:	4798      	blx	r3
					for(int i=0; i<12; i++)
    7492:	2300      	movs	r3, #0
							light[i-3] = pstrRecv->pu8Buffer[i];
    7494:	4e9a      	ldr	r6, [pc, #616]	; (7700 <socket_cb+0x39c>)
							arr[i] = pstrRecv->pu8Buffer[i];
    7496:	4f9b      	ldr	r7, [pc, #620]	; (7704 <socket_cb+0x3a0>)
						pstrRecv->pu8Buffer[i] = 32;
    7498:	2520      	movs	r5, #32
    749a:	e005      	b.n	74a8 <socket_cb+0x144>
							arr[i] = pstrRecv->pu8Buffer[i];
    749c:	54f9      	strb	r1, [r7, r3]
						pstrRecv->pu8Buffer[i] = 32;
    749e:	6821      	ldr	r1, [r4, #0]
    74a0:	548d      	strb	r5, [r1, r2]
					for(int i=0; i<12; i++)
    74a2:	3301      	adds	r3, #1
    74a4:	2b0c      	cmp	r3, #12
    74a6:	d007      	beq.n	74b8 <socket_cb+0x154>
						if((pstrRecv->pu8Buffer[i] != NULL || pstrRecv->pu8Buffer[i] != "" ) && i<3)
    74a8:	001a      	movs	r2, r3
    74aa:	6821      	ldr	r1, [r4, #0]
    74ac:	5cc9      	ldrb	r1, [r1, r3]
    74ae:	2b02      	cmp	r3, #2
    74b0:	ddf4      	ble.n	749c <socket_cb+0x138>
							light[i-3] = pstrRecv->pu8Buffer[i];
    74b2:	1ed8      	subs	r0, r3, #3
    74b4:	5431      	strb	r1, [r6, r0]
    74b6:	e7f2      	b.n	749e <socket_cb+0x13a>
					if(strcmp(arr,arr2)==0)
    74b8:	4993      	ldr	r1, [pc, #588]	; (7708 <socket_cb+0x3a4>)
    74ba:	4892      	ldr	r0, [pc, #584]	; (7704 <socket_cb+0x3a0>)
    74bc:	4b93      	ldr	r3, [pc, #588]	; (770c <socket_cb+0x3a8>)
    74be:	4798      	blx	r3
    74c0:	2800      	cmp	r0, #0
    74c2:	d167      	bne.n	7594 <socket_cb+0x230>
						arr[0]="S";
    74c4:	4b8f      	ldr	r3, [pc, #572]	; (7704 <socket_cb+0x3a0>)
    74c6:	4a92      	ldr	r2, [pc, #584]	; (7710 <socket_cb+0x3ac>)
    74c8:	701a      	strb	r2, [r3, #0]
						arr[1]="A";
    74ca:	4a92      	ldr	r2, [pc, #584]	; (7714 <socket_cb+0x3b0>)
    74cc:	705a      	strb	r2, [r3, #1]
						arr[2]="M";	
    74ce:	4a92      	ldr	r2, [pc, #584]	; (7718 <socket_cb+0x3b4>)
    74d0:	709a      	strb	r2, [r3, #2]
						printf("----------------SAME------------ \r\n");
    74d2:	4892      	ldr	r0, [pc, #584]	; (771c <socket_cb+0x3b8>)
    74d4:	4b74      	ldr	r3, [pc, #464]	; (76a8 <socket_cb+0x344>)
    74d6:	4798      	blx	r3
					if(strcmp(arr,"@1c")==0)
    74d8:	4991      	ldr	r1, [pc, #580]	; (7720 <socket_cb+0x3bc>)
    74da:	488a      	ldr	r0, [pc, #552]	; (7704 <socket_cb+0x3a0>)
    74dc:	4b8b      	ldr	r3, [pc, #556]	; (770c <socket_cb+0x3a8>)
    74de:	4798      	blx	r3
    74e0:	2800      	cmp	r0, #0
    74e2:	d061      	beq.n	75a8 <socket_cb+0x244>
					else if(strcmp(arr,"@1o")==0)
    74e4:	498f      	ldr	r1, [pc, #572]	; (7724 <socket_cb+0x3c0>)
    74e6:	4887      	ldr	r0, [pc, #540]	; (7704 <socket_cb+0x3a0>)
    74e8:	4b88      	ldr	r3, [pc, #544]	; (770c <socket_cb+0x3a8>)
    74ea:	4798      	blx	r3
    74ec:	2800      	cmp	r0, #0
    74ee:	d100      	bne.n	74f2 <socket_cb+0x18e>
    74f0:	e09e      	b.n	7630 <socket_cb+0x2cc>
					else if(strcmp(arr,"@2c")==0)
    74f2:	498d      	ldr	r1, [pc, #564]	; (7728 <socket_cb+0x3c4>)
    74f4:	4883      	ldr	r0, [pc, #524]	; (7704 <socket_cb+0x3a0>)
    74f6:	4b85      	ldr	r3, [pc, #532]	; (770c <socket_cb+0x3a8>)
    74f8:	4798      	blx	r3
    74fa:	2800      	cmp	r0, #0
    74fc:	d100      	bne.n	7500 <socket_cb+0x19c>
    74fe:	e0a2      	b.n	7646 <socket_cb+0x2e2>
					else if(strcmp(arr,"@2o")==0)
    7500:	498a      	ldr	r1, [pc, #552]	; (772c <socket_cb+0x3c8>)
    7502:	4880      	ldr	r0, [pc, #512]	; (7704 <socket_cb+0x3a0>)
    7504:	4b81      	ldr	r3, [pc, #516]	; (770c <socket_cb+0x3a8>)
    7506:	4798      	blx	r3
    7508:	2800      	cmp	r0, #0
    750a:	d100      	bne.n	750e <socket_cb+0x1aa>
    750c:	e0a6      	b.n	765c <socket_cb+0x2f8>
					else if(strcmp(arr,"@3c")==0)
    750e:	4988      	ldr	r1, [pc, #544]	; (7730 <socket_cb+0x3cc>)
    7510:	487c      	ldr	r0, [pc, #496]	; (7704 <socket_cb+0x3a0>)
    7512:	4b7e      	ldr	r3, [pc, #504]	; (770c <socket_cb+0x3a8>)
    7514:	4798      	blx	r3
    7516:	2800      	cmp	r0, #0
    7518:	d100      	bne.n	751c <socket_cb+0x1b8>
    751a:	e0aa      	b.n	7672 <socket_cb+0x30e>
					else if(strcmp(arr,"@3o")==0)
    751c:	4985      	ldr	r1, [pc, #532]	; (7734 <socket_cb+0x3d0>)
    751e:	4879      	ldr	r0, [pc, #484]	; (7704 <socket_cb+0x3a0>)
    7520:	4b7a      	ldr	r3, [pc, #488]	; (770c <socket_cb+0x3a8>)
    7522:	4798      	blx	r3
    7524:	2800      	cmp	r0, #0
    7526:	d100      	bne.n	752a <socket_cb+0x1c6>
    7528:	e0ae      	b.n	7688 <socket_cb+0x324>
					else if(strcmp(arr,"@4c")==0)
    752a:	4983      	ldr	r1, [pc, #524]	; (7738 <socket_cb+0x3d4>)
    752c:	4875      	ldr	r0, [pc, #468]	; (7704 <socket_cb+0x3a0>)
    752e:	4b77      	ldr	r3, [pc, #476]	; (770c <socket_cb+0x3a8>)
    7530:	4798      	blx	r3
    7532:	2800      	cmp	r0, #0
    7534:	d100      	bne.n	7538 <socket_cb+0x1d4>
    7536:	e121      	b.n	777c <socket_cb+0x418>
					else if(strcmp(arr,"@4o")==0)
    7538:	4980      	ldr	r1, [pc, #512]	; (773c <socket_cb+0x3d8>)
    753a:	4872      	ldr	r0, [pc, #456]	; (7704 <socket_cb+0x3a0>)
    753c:	4b73      	ldr	r3, [pc, #460]	; (770c <socket_cb+0x3a8>)
    753e:	4798      	blx	r3
    7540:	2800      	cmp	r0, #0
    7542:	d100      	bne.n	7546 <socket_cb+0x1e2>
    7544:	e125      	b.n	7792 <socket_cb+0x42e>
					else if(strcmp(arr,"@5c")==0)
    7546:	497e      	ldr	r1, [pc, #504]	; (7740 <socket_cb+0x3dc>)
    7548:	486e      	ldr	r0, [pc, #440]	; (7704 <socket_cb+0x3a0>)
    754a:	4b70      	ldr	r3, [pc, #448]	; (770c <socket_cb+0x3a8>)
    754c:	4798      	blx	r3
    754e:	2800      	cmp	r0, #0
    7550:	d100      	bne.n	7554 <socket_cb+0x1f0>
    7552:	e129      	b.n	77a8 <socket_cb+0x444>
					else if(strcmp(arr,"@5o")==0)
    7554:	497b      	ldr	r1, [pc, #492]	; (7744 <socket_cb+0x3e0>)
    7556:	486b      	ldr	r0, [pc, #428]	; (7704 <socket_cb+0x3a0>)
    7558:	4b6c      	ldr	r3, [pc, #432]	; (770c <socket_cb+0x3a8>)
    755a:	4798      	blx	r3
    755c:	2800      	cmp	r0, #0
    755e:	d100      	bne.n	7562 <socket_cb+0x1fe>
    7560:	e12d      	b.n	77be <socket_cb+0x45a>
					else if(strcmp(arr,"@6c")==0)
    7562:	4979      	ldr	r1, [pc, #484]	; (7748 <socket_cb+0x3e4>)
    7564:	4867      	ldr	r0, [pc, #412]	; (7704 <socket_cb+0x3a0>)
    7566:	4b69      	ldr	r3, [pc, #420]	; (770c <socket_cb+0x3a8>)
    7568:	4798      	blx	r3
    756a:	2800      	cmp	r0, #0
    756c:	d100      	bne.n	7570 <socket_cb+0x20c>
    756e:	e131      	b.n	77d4 <socket_cb+0x470>
					else if(strcmp(arr,"@6o")==0)
    7570:	4976      	ldr	r1, [pc, #472]	; (774c <socket_cb+0x3e8>)
    7572:	4864      	ldr	r0, [pc, #400]	; (7704 <socket_cb+0x3a0>)
    7574:	4b65      	ldr	r3, [pc, #404]	; (770c <socket_cb+0x3a8>)
    7576:	4798      	blx	r3
    7578:	2800      	cmp	r0, #0
    757a:	d000      	beq.n	757e <socket_cb+0x21a>
    757c:	e135      	b.n	77ea <socket_cb+0x486>
						ser_data_out(0x80);
    757e:	3080      	adds	r0, #128	; 0x80
    7580:	4b73      	ldr	r3, [pc, #460]	; (7750 <socket_cb+0x3ec>)
    7582:	4798      	blx	r3
						delay_ms(1);
    7584:	2001      	movs	r0, #1
    7586:	4b5a      	ldr	r3, [pc, #360]	; (76f0 <socket_cb+0x38c>)
    7588:	4798      	blx	r3
						PORT->Group[1].OUTSET.bit.OUTSET=PORT_PB02;
    758a:	2104      	movs	r1, #4
    758c:	2398      	movs	r3, #152	; 0x98
    758e:	4a71      	ldr	r2, [pc, #452]	; (7754 <socket_cb+0x3f0>)
    7590:	50d1      	str	r1, [r2, r3]
    7592:	e013      	b.n	75bc <socket_cb+0x258>
						strcpy(arr2,arr);
    7594:	4c5c      	ldr	r4, [pc, #368]	; (7708 <socket_cb+0x3a4>)
    7596:	495b      	ldr	r1, [pc, #364]	; (7704 <socket_cb+0x3a0>)
    7598:	0020      	movs	r0, r4
    759a:	4b6f      	ldr	r3, [pc, #444]	; (7758 <socket_cb+0x3f4>)
    759c:	4798      	blx	r3
						printf("copy: %s \r\n", arr2);
    759e:	0021      	movs	r1, r4
    75a0:	486e      	ldr	r0, [pc, #440]	; (775c <socket_cb+0x3f8>)
    75a2:	4b4c      	ldr	r3, [pc, #304]	; (76d4 <socket_cb+0x370>)
    75a4:	4798      	blx	r3
    75a6:	e797      	b.n	74d8 <socket_cb+0x174>
						ser_data_out(0x10);
    75a8:	3010      	adds	r0, #16
    75aa:	4b69      	ldr	r3, [pc, #420]	; (7750 <socket_cb+0x3ec>)
    75ac:	4798      	blx	r3
						delay_ms(1);		
    75ae:	2001      	movs	r0, #1
    75b0:	4b4f      	ldr	r3, [pc, #316]	; (76f0 <socket_cb+0x38c>)
    75b2:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    75b4:	2280      	movs	r2, #128	; 0x80
    75b6:	0552      	lsls	r2, r2, #21
    75b8:	4b66      	ldr	r3, [pc, #408]	; (7754 <socket_cb+0x3f0>)
    75ba:	619a      	str	r2, [r3, #24]
					delay_ms(1);
    75bc:	2001      	movs	r0, #1
    75be:	4c4c      	ldr	r4, [pc, #304]	; (76f0 <socket_cb+0x38c>)
    75c0:	47a0      	blx	r4
					ser_data_out(0x00);
    75c2:	2000      	movs	r0, #0
    75c4:	4b62      	ldr	r3, [pc, #392]	; (7750 <socket_cb+0x3ec>)
    75c6:	4798      	blx	r3
					delay_ms(1);
    75c8:	2001      	movs	r0, #1
    75ca:	47a0      	blx	r4
					PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA28;
    75cc:	4b61      	ldr	r3, [pc, #388]	; (7754 <socket_cb+0x3f0>)
    75ce:	2280      	movs	r2, #128	; 0x80
    75d0:	0552      	lsls	r2, r2, #21
    75d2:	615a      	str	r2, [r3, #20]
					PORT->Group[1].OUTCLR.bit.OUTCLR=PORT_PB02;
    75d4:	2104      	movs	r1, #4
    75d6:	2294      	movs	r2, #148	; 0x94
    75d8:	5099      	str	r1, [r3, r2]
					if(strstr(light,"@GN") != NULL)
    75da:	4961      	ldr	r1, [pc, #388]	; (7760 <socket_cb+0x3fc>)
    75dc:	4848      	ldr	r0, [pc, #288]	; (7700 <socket_cb+0x39c>)
    75de:	4b61      	ldr	r3, [pc, #388]	; (7764 <socket_cb+0x400>)
    75e0:	4798      	blx	r3
    75e2:	2800      	cmp	r0, #0
    75e4:	d003      	beq.n	75ee <socket_cb+0x28a>
						signOnLight+=8;
    75e6:	4a60      	ldr	r2, [pc, #384]	; (7768 <socket_cb+0x404>)
    75e8:	6813      	ldr	r3, [r2, #0]
    75ea:	3308      	adds	r3, #8
    75ec:	6013      	str	r3, [r2, #0]
					if(strstr(light,"@RN") != NULL)
    75ee:	495f      	ldr	r1, [pc, #380]	; (776c <socket_cb+0x408>)
    75f0:	4843      	ldr	r0, [pc, #268]	; (7700 <socket_cb+0x39c>)
    75f2:	4b5c      	ldr	r3, [pc, #368]	; (7764 <socket_cb+0x400>)
    75f4:	4798      	blx	r3
    75f6:	2800      	cmp	r0, #0
    75f8:	d003      	beq.n	7602 <socket_cb+0x29e>
						signOnLight+=2;	
    75fa:	4a5b      	ldr	r2, [pc, #364]	; (7768 <socket_cb+0x404>)
    75fc:	6813      	ldr	r3, [r2, #0]
    75fe:	3302      	adds	r3, #2
    7600:	6013      	str	r3, [r2, #0]
					if(strstr(light,"@ON") != NULL)
    7602:	495b      	ldr	r1, [pc, #364]	; (7770 <socket_cb+0x40c>)
    7604:	483e      	ldr	r0, [pc, #248]	; (7700 <socket_cb+0x39c>)
    7606:	4b57      	ldr	r3, [pc, #348]	; (7764 <socket_cb+0x400>)
    7608:	4798      	blx	r3
    760a:	2800      	cmp	r0, #0
    760c:	d003      	beq.n	7616 <socket_cb+0x2b2>
						signOnLight+=4;	
    760e:	4a56      	ldr	r2, [pc, #344]	; (7768 <socket_cb+0x404>)
    7610:	6813      	ldr	r3, [r2, #0]
    7612:	3304      	adds	r3, #4
    7614:	6013      	str	r3, [r2, #0]
					printf("signOnLight : %d \r\n",signOnLight);
    7616:	4c54      	ldr	r4, [pc, #336]	; (7768 <socket_cb+0x404>)
    7618:	6821      	ldr	r1, [r4, #0]
    761a:	4856      	ldr	r0, [pc, #344]	; (7774 <socket_cb+0x410>)
    761c:	4b2d      	ldr	r3, [pc, #180]	; (76d4 <socket_cb+0x370>)
    761e:	4798      	blx	r3
					switch(signOnLight)
    7620:	6823      	ldr	r3, [r4, #0]
    7622:	2b0e      	cmp	r3, #14
    7624:	d900      	bls.n	7628 <socket_cb+0x2c4>
    7626:	e12c      	b.n	7882 <socket_cb+0x51e>
    7628:	009b      	lsls	r3, r3, #2
    762a:	4a53      	ldr	r2, [pc, #332]	; (7778 <socket_cb+0x414>)
    762c:	58d3      	ldr	r3, [r2, r3]
    762e:	469f      	mov	pc, r3
						ser_data_out(0x20);
    7630:	3020      	adds	r0, #32
    7632:	4b47      	ldr	r3, [pc, #284]	; (7750 <socket_cb+0x3ec>)
    7634:	4798      	blx	r3
						delay_ms(1);
    7636:	2001      	movs	r0, #1
    7638:	4b2d      	ldr	r3, [pc, #180]	; (76f0 <socket_cb+0x38c>)
    763a:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    763c:	2280      	movs	r2, #128	; 0x80
    763e:	0552      	lsls	r2, r2, #21
    7640:	4b44      	ldr	r3, [pc, #272]	; (7754 <socket_cb+0x3f0>)
    7642:	619a      	str	r2, [r3, #24]
    7644:	e7ba      	b.n	75bc <socket_cb+0x258>
						ser_data_out(0x40);
    7646:	3040      	adds	r0, #64	; 0x40
    7648:	4b41      	ldr	r3, [pc, #260]	; (7750 <socket_cb+0x3ec>)
    764a:	4798      	blx	r3
						delay_ms(1);
    764c:	2001      	movs	r0, #1
    764e:	4b28      	ldr	r3, [pc, #160]	; (76f0 <socket_cb+0x38c>)
    7650:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    7652:	2280      	movs	r2, #128	; 0x80
    7654:	0552      	lsls	r2, r2, #21
    7656:	4b3f      	ldr	r3, [pc, #252]	; (7754 <socket_cb+0x3f0>)
    7658:	619a      	str	r2, [r3, #24]
    765a:	e7af      	b.n	75bc <socket_cb+0x258>
						ser_data_out(0x80);
    765c:	3080      	adds	r0, #128	; 0x80
    765e:	4b3c      	ldr	r3, [pc, #240]	; (7750 <socket_cb+0x3ec>)
    7660:	4798      	blx	r3
						delay_ms(1);
    7662:	2001      	movs	r0, #1
    7664:	4b22      	ldr	r3, [pc, #136]	; (76f0 <socket_cb+0x38c>)
    7666:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    7668:	2280      	movs	r2, #128	; 0x80
    766a:	0552      	lsls	r2, r2, #21
    766c:	4b39      	ldr	r3, [pc, #228]	; (7754 <socket_cb+0x3f0>)
    766e:	619a      	str	r2, [r3, #24]
    7670:	e7a4      	b.n	75bc <socket_cb+0x258>
						ser_data_out(0x01);
    7672:	3001      	adds	r0, #1
    7674:	4b36      	ldr	r3, [pc, #216]	; (7750 <socket_cb+0x3ec>)
    7676:	4798      	blx	r3
						delay_ms(1);
    7678:	2001      	movs	r0, #1
    767a:	4b1d      	ldr	r3, [pc, #116]	; (76f0 <socket_cb+0x38c>)
    767c:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    767e:	2280      	movs	r2, #128	; 0x80
    7680:	0552      	lsls	r2, r2, #21
    7682:	4b34      	ldr	r3, [pc, #208]	; (7754 <socket_cb+0x3f0>)
    7684:	619a      	str	r2, [r3, #24]
    7686:	e799      	b.n	75bc <socket_cb+0x258>
						ser_data_out(0x02);
    7688:	3002      	adds	r0, #2
    768a:	4b31      	ldr	r3, [pc, #196]	; (7750 <socket_cb+0x3ec>)
    768c:	4798      	blx	r3
						delay_ms(1);
    768e:	2001      	movs	r0, #1
    7690:	4b17      	ldr	r3, [pc, #92]	; (76f0 <socket_cb+0x38c>)
    7692:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    7694:	2280      	movs	r2, #128	; 0x80
    7696:	0552      	lsls	r2, r2, #21
    7698:	4b2e      	ldr	r3, [pc, #184]	; (7754 <socket_cb+0x3f0>)
    769a:	619a      	str	r2, [r3, #24]
    769c:	e78e      	b.n	75bc <socket_cb+0x258>
    769e:	46c0      	nop			; (mov r8, r8)
    76a0:	0000a388 	.word	0x0000a388
    76a4:	0000a548 	.word	0x0000a548
    76a8:	000082a9 	.word	0x000082a9
    76ac:	2000000e 	.word	0x2000000e
    76b0:	000030e1 	.word	0x000030e1
    76b4:	0000a52c 	.word	0x0000a52c
    76b8:	00002f39 	.word	0x00002f39
    76bc:	0000a57c 	.word	0x0000a57c
    76c0:	2000000d 	.word	0x2000000d
    76c4:	0000a560 	.word	0x0000a560
    76c8:	00002f91 	.word	0x00002f91
    76cc:	0000a598 	.word	0x0000a598
    76d0:	0000a5b4 	.word	0x0000a5b4
    76d4:	0000818d 	.word	0x0000818d
    76d8:	000005b4 	.word	0x000005b4
    76dc:	200003cc 	.word	0x200003cc
    76e0:	0000304d 	.word	0x0000304d
    76e4:	0000a5bc 	.word	0x0000a5bc
    76e8:	0000a5f8 	.word	0x0000a5f8
    76ec:	00000bb8 	.word	0x00000bb8
    76f0:	00004025 	.word	0x00004025
    76f4:	0000a5d8 	.word	0x0000a5d8
    76f8:	0000a614 	.word	0x0000a614
    76fc:	0000a630 	.word	0x0000a630
    7700:	20000980 	.word	0x20000980
    7704:	200003b8 	.word	0x200003b8
    7708:	200003bc 	.word	0x200003bc
    770c:	000084fd 	.word	0x000084fd
    7710:	0000a64c 	.word	0x0000a64c
    7714:	0000a650 	.word	0x0000a650
    7718:	0000a654 	.word	0x0000a654
    771c:	0000a658 	.word	0x0000a658
    7720:	0000a688 	.word	0x0000a688
    7724:	0000a68c 	.word	0x0000a68c
    7728:	0000a690 	.word	0x0000a690
    772c:	0000a694 	.word	0x0000a694
    7730:	0000a698 	.word	0x0000a698
    7734:	0000a69c 	.word	0x0000a69c
    7738:	0000a6a0 	.word	0x0000a6a0
    773c:	0000a6a4 	.word	0x0000a6a4
    7740:	0000a6a8 	.word	0x0000a6a8
    7744:	0000a6ac 	.word	0x0000a6ac
    7748:	0000a6b0 	.word	0x0000a6b0
    774c:	0000a6b4 	.word	0x0000a6b4
    7750:	00007305 	.word	0x00007305
    7754:	41004400 	.word	0x41004400
    7758:	00008511 	.word	0x00008511
    775c:	0000a67c 	.word	0x0000a67c
    7760:	0000a6e0 	.word	0x0000a6e0
    7764:	00008521 	.word	0x00008521
    7768:	2000098c 	.word	0x2000098c
    776c:	0000a6e4 	.word	0x0000a6e4
    7770:	0000a6e8 	.word	0x0000a6e8
    7774:	0000a6ec 	.word	0x0000a6ec
    7778:	0000a3a8 	.word	0x0000a3a8
						ser_data_out(0x04);
    777c:	3004      	adds	r0, #4
    777e:	4b48      	ldr	r3, [pc, #288]	; (78a0 <socket_cb+0x53c>)
    7780:	4798      	blx	r3
						delay_ms(1);
    7782:	2001      	movs	r0, #1
    7784:	4b47      	ldr	r3, [pc, #284]	; (78a4 <socket_cb+0x540>)
    7786:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    7788:	2280      	movs	r2, #128	; 0x80
    778a:	0552      	lsls	r2, r2, #21
    778c:	4b46      	ldr	r3, [pc, #280]	; (78a8 <socket_cb+0x544>)
    778e:	619a      	str	r2, [r3, #24]
    7790:	e714      	b.n	75bc <socket_cb+0x258>
						ser_data_out(0x08);
    7792:	3008      	adds	r0, #8
    7794:	4b42      	ldr	r3, [pc, #264]	; (78a0 <socket_cb+0x53c>)
    7796:	4798      	blx	r3
						delay_ms(1);
    7798:	2001      	movs	r0, #1
    779a:	4b42      	ldr	r3, [pc, #264]	; (78a4 <socket_cb+0x540>)
    779c:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    779e:	2280      	movs	r2, #128	; 0x80
    77a0:	0552      	lsls	r2, r2, #21
    77a2:	4b41      	ldr	r3, [pc, #260]	; (78a8 <socket_cb+0x544>)
    77a4:	619a      	str	r2, [r3, #24]
    77a6:	e709      	b.n	75bc <socket_cb+0x258>
						ser_data_out(0x10);
    77a8:	3010      	adds	r0, #16
    77aa:	4b3d      	ldr	r3, [pc, #244]	; (78a0 <socket_cb+0x53c>)
    77ac:	4798      	blx	r3
						delay_ms(1);
    77ae:	2001      	movs	r0, #1
    77b0:	4b3c      	ldr	r3, [pc, #240]	; (78a4 <socket_cb+0x540>)
    77b2:	4798      	blx	r3
						PORT->Group[1].OUTSET.bit.OUTSET=PORT_PB02;
    77b4:	2104      	movs	r1, #4
    77b6:	2398      	movs	r3, #152	; 0x98
    77b8:	4a3b      	ldr	r2, [pc, #236]	; (78a8 <socket_cb+0x544>)
    77ba:	50d1      	str	r1, [r2, r3]
    77bc:	e6fe      	b.n	75bc <socket_cb+0x258>
						ser_data_out(0x20);
    77be:	3020      	adds	r0, #32
    77c0:	4b37      	ldr	r3, [pc, #220]	; (78a0 <socket_cb+0x53c>)
    77c2:	4798      	blx	r3
						delay_ms(1);
    77c4:	2001      	movs	r0, #1
    77c6:	4b37      	ldr	r3, [pc, #220]	; (78a4 <socket_cb+0x540>)
    77c8:	4798      	blx	r3
						PORT->Group[1].OUTSET.bit.OUTSET=PORT_PB02;
    77ca:	2104      	movs	r1, #4
    77cc:	2398      	movs	r3, #152	; 0x98
    77ce:	4a36      	ldr	r2, [pc, #216]	; (78a8 <socket_cb+0x544>)
    77d0:	50d1      	str	r1, [r2, r3]
    77d2:	e6f3      	b.n	75bc <socket_cb+0x258>
						ser_data_out(0x40);
    77d4:	3040      	adds	r0, #64	; 0x40
    77d6:	4b32      	ldr	r3, [pc, #200]	; (78a0 <socket_cb+0x53c>)
    77d8:	4798      	blx	r3
						delay_ms(1);
    77da:	2001      	movs	r0, #1
    77dc:	4b31      	ldr	r3, [pc, #196]	; (78a4 <socket_cb+0x540>)
    77de:	4798      	blx	r3
						PORT->Group[1].OUTSET.bit.OUTSET=PORT_PB02;
    77e0:	2104      	movs	r1, #4
    77e2:	2398      	movs	r3, #152	; 0x98
    77e4:	4a30      	ldr	r2, [pc, #192]	; (78a8 <socket_cb+0x544>)
    77e6:	50d1      	str	r1, [r2, r3]
    77e8:	e6e8      	b.n	75bc <socket_cb+0x258>
						printf("before SolValve Control Commend : %s\r\n", arr2);
    77ea:	4930      	ldr	r1, [pc, #192]	; (78ac <socket_cb+0x548>)
    77ec:	4830      	ldr	r0, [pc, #192]	; (78b0 <socket_cb+0x54c>)
    77ee:	4b31      	ldr	r3, [pc, #196]	; (78b4 <socket_cb+0x550>)
    77f0:	4798      	blx	r3
    77f2:	e6e3      	b.n	75bc <socket_cb+0x258>
						case 2:ser_data_out(0x02);
    77f4:	2002      	movs	r0, #2
    77f6:	4b2a      	ldr	r3, [pc, #168]	; (78a0 <socket_cb+0x53c>)
    77f8:	4798      	blx	r3
					signOnLight = 0;
    77fa:	2200      	movs	r2, #0
    77fc:	4b2e      	ldr	r3, [pc, #184]	; (78b8 <socket_cb+0x554>)
    77fe:	601a      	str	r2, [r3, #0]
					delay_ms(1);
    7800:	2001      	movs	r0, #1
    7802:	4e28      	ldr	r6, [pc, #160]	; (78a4 <socket_cb+0x540>)
    7804:	47b0      	blx	r6
					PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA19;
    7806:	4c28      	ldr	r4, [pc, #160]	; (78a8 <socket_cb+0x544>)
    7808:	2580      	movs	r5, #128	; 0x80
    780a:	032d      	lsls	r5, r5, #12
    780c:	61a5      	str	r5, [r4, #24]
					delay_ms(1);
    780e:	2001      	movs	r0, #1
    7810:	47b0      	blx	r6
					PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA19;
    7812:	6165      	str	r5, [r4, #20]
					printf("RECV CALLED \r\n");
    7814:	4829      	ldr	r0, [pc, #164]	; (78bc <socket_cb+0x558>)
    7816:	4b2a      	ldr	r3, [pc, #168]	; (78c0 <socket_cb+0x55c>)
    7818:	4798      	blx	r3
					sol_valve[4] = 50;
    781a:	492a      	ldr	r1, [pc, #168]	; (78c4 <socket_cb+0x560>)
    781c:	2332      	movs	r3, #50	; 0x32
    781e:	710b      	strb	r3, [r1, #4]
					sol_valve[5] = 50;				
    7820:	714b      	strb	r3, [r1, #5]
					send(tcp_client_socket, &sol_valve, sizeof(sol_valve), 0);				
    7822:	4c29      	ldr	r4, [pc, #164]	; (78c8 <socket_cb+0x564>)
    7824:	2000      	movs	r0, #0
    7826:	5620      	ldrsb	r0, [r4, r0]
    7828:	2300      	movs	r3, #0
    782a:	2206      	movs	r2, #6
    782c:	4d27      	ldr	r5, [pc, #156]	; (78cc <socket_cb+0x568>)
    782e:	47a8      	blx	r5
					close(tcp_client_socket);
    7830:	2000      	movs	r0, #0
    7832:	5620      	ldrsb	r0, [r4, r0]
    7834:	4b26      	ldr	r3, [pc, #152]	; (78d0 <socket_cb+0x56c>)
    7836:	4798      	blx	r3
					tcp_client_socket = -1;				
    7838:	23ff      	movs	r3, #255	; 0xff
    783a:	7023      	strb	r3, [r4, #0]
					memset(arr,"",sizeof(arr));
    783c:	4d25      	ldr	r5, [pc, #148]	; (78d4 <socket_cb+0x570>)
    783e:	2203      	movs	r2, #3
    7840:	0029      	movs	r1, r5
    7842:	4825      	ldr	r0, [pc, #148]	; (78d8 <socket_cb+0x574>)
    7844:	4c25      	ldr	r4, [pc, #148]	; (78dc <socket_cb+0x578>)
    7846:	47a0      	blx	r4
					memset(light,"",sizeof(light));
    7848:	2209      	movs	r2, #9
    784a:	0029      	movs	r1, r5
    784c:	4824      	ldr	r0, [pc, #144]	; (78e0 <socket_cb+0x57c>)
    784e:	47a0      	blx	r4
				{
    7850:	e608      	b.n	7464 <socket_cb+0x100>
						case 4:ser_data_out(0x04);
    7852:	2004      	movs	r0, #4
    7854:	4b12      	ldr	r3, [pc, #72]	; (78a0 <socket_cb+0x53c>)
    7856:	4798      	blx	r3
							   break;
    7858:	e7cf      	b.n	77fa <socket_cb+0x496>
						case 6:ser_data_out(0x06);
    785a:	2006      	movs	r0, #6
    785c:	4b10      	ldr	r3, [pc, #64]	; (78a0 <socket_cb+0x53c>)
    785e:	4798      	blx	r3
							   break;
    7860:	e7cb      	b.n	77fa <socket_cb+0x496>
						case 8:ser_data_out(0x08);
    7862:	2008      	movs	r0, #8
    7864:	4b0e      	ldr	r3, [pc, #56]	; (78a0 <socket_cb+0x53c>)
    7866:	4798      	blx	r3
							   break;
    7868:	e7c7      	b.n	77fa <socket_cb+0x496>
						case 10:ser_data_out(0x0A);
    786a:	200a      	movs	r0, #10
    786c:	4b0c      	ldr	r3, [pc, #48]	; (78a0 <socket_cb+0x53c>)
    786e:	4798      	blx	r3
								break;
    7870:	e7c3      	b.n	77fa <socket_cb+0x496>
						case 12:ser_data_out(0x0C);
    7872:	200c      	movs	r0, #12
    7874:	4b0a      	ldr	r3, [pc, #40]	; (78a0 <socket_cb+0x53c>)
    7876:	4798      	blx	r3
								break;
    7878:	e7bf      	b.n	77fa <socket_cb+0x496>
						case 14:ser_data_out(0x0E);	
    787a:	200e      	movs	r0, #14
    787c:	4b08      	ldr	r3, [pc, #32]	; (78a0 <socket_cb+0x53c>)
    787e:	4798      	blx	r3
								break;
    7880:	e7bb      	b.n	77fa <socket_cb+0x496>
						default:ser_data_out(0x00);
    7882:	2000      	movs	r0, #0
    7884:	4b06      	ldr	r3, [pc, #24]	; (78a0 <socket_cb+0x53c>)
    7886:	4798      	blx	r3
								break;
    7888:	e7b7      	b.n	77fa <socket_cb+0x496>
					printf("socket_cb: recv error!\r\n");
    788a:	4816      	ldr	r0, [pc, #88]	; (78e4 <socket_cb+0x580>)
    788c:	4b0c      	ldr	r3, [pc, #48]	; (78c0 <socket_cb+0x55c>)
    788e:	4798      	blx	r3
					close(tcp_client_socket);
    7890:	4c0d      	ldr	r4, [pc, #52]	; (78c8 <socket_cb+0x564>)
    7892:	2000      	movs	r0, #0
    7894:	5620      	ldrsb	r0, [r4, r0]
    7896:	4b0e      	ldr	r3, [pc, #56]	; (78d0 <socket_cb+0x56c>)
    7898:	4798      	blx	r3
					tcp_client_socket = -1;
    789a:	23ff      	movs	r3, #255	; 0xff
    789c:	7023      	strb	r3, [r4, #0]
}
    789e:	e5e1      	b.n	7464 <socket_cb+0x100>
    78a0:	00007305 	.word	0x00007305
    78a4:	00004025 	.word	0x00004025
    78a8:	41004400 	.word	0x41004400
    78ac:	200003bc 	.word	0x200003bc
    78b0:	0000a6b8 	.word	0x0000a6b8
    78b4:	0000818d 	.word	0x0000818d
    78b8:	2000098c 	.word	0x2000098c
    78bc:	0000a700 	.word	0x0000a700
    78c0:	000082a9 	.word	0x000082a9
    78c4:	20000cb8 	.word	0x20000cb8
    78c8:	2000000d 	.word	0x2000000d
    78cc:	00002fb5 	.word	0x00002fb5
    78d0:	000030e1 	.word	0x000030e1
    78d4:	0000a7e8 	.word	0x0000a7e8
    78d8:	200003b8 	.word	0x200003b8
    78dc:	0000817b 	.word	0x0000817b
    78e0:	20000980 	.word	0x20000980
    78e4:	0000a710 	.word	0x0000a710

000078e8 <init_port>:

void init_port(void)
{
    78e8:	b570      	push	{r4, r5, r6, lr}
//	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA27;	// RS3485 ENABLE PIN CONTROL PORT
	
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA28;	// 74HC238D A0 PIN CONTROL PORT
    78ea:	4b0c      	ldr	r3, [pc, #48]	; (791c <init_port+0x34>)
    78ec:	2680      	movs	r6, #128	; 0x80
    78ee:	0576      	lsls	r6, r6, #21
    78f0:	609e      	str	r6, [r3, #8]
	PORT->Group[1].DIRSET.bit.DIRSET=PORT_PB02; // 74HC238D A1 PIN CONTROL PORT
    78f2:	2504      	movs	r5, #4
    78f4:	2288      	movs	r2, #136	; 0x88
    78f6:	509d      	str	r5, [r3, r2]
//	PORT->Group[1].DIRSET.bit.DIRSET=PORT_PB03; // 74HC238D A2 PIN CONTROL PORT
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA19; // 74HC238D A2 PIN CONTROL PORT
    78f8:	2480      	movs	r4, #128	; 0x80
    78fa:	0324      	lsls	r4, r4, #12
    78fc:	609c      	str	r4, [r3, #8]
	
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA06; // 74HC573PW DS PIN CONTROL PORT
    78fe:	2040      	movs	r0, #64	; 0x40
    7900:	6098      	str	r0, [r3, #8]
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA07; // 74HC573PW STCP PIN CONTROL PORT
    7902:	2180      	movs	r1, #128	; 0x80
    7904:	6099      	str	r1, [r3, #8]
//	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA08; // 74HC573PW SHCP PIN CONTROL PORT
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA18; // 74HC573PW SHCP PIN CONTROL PORT
    7906:	2280      	movs	r2, #128	; 0x80
    7908:	02d2      	lsls	r2, r2, #11
    790a:	609a      	str	r2, [r3, #8]
	
//	PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA27;
	
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA28;
    790c:	615e      	str	r6, [r3, #20]
	PORT->Group[1].OUTCLR.bit.OUTCLR=PORT_PB02;
    790e:	2694      	movs	r6, #148	; 0x94
    7910:	519d      	str	r5, [r3, r6]
//	PORT->Group[1].OUTCLR.bit.OUTCLR=PORT_PB03;
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA19;
    7912:	615c      	str	r4, [r3, #20]
	
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA06;
    7914:	6158      	str	r0, [r3, #20]
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA07;
    7916:	6159      	str	r1, [r3, #20]
//	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA08;
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA18;
    7918:	615a      	str	r2, [r3, #20]
}
    791a:	bd70      	pop	{r4, r5, r6, pc}
    791c:	41004400 	.word	0x41004400

00007920 <main>:

/*
 * \brief Main function of the application
 */
int main(void)
{	
    7920:	b5f0      	push	{r4, r5, r6, r7, lr}
    7922:	b08d      	sub	sp, #52	; 0x34
	tstrWifiInitParam param;
	int8_t ret;
	struct sockaddr_in addr;
	
	/* Initialize the board. */
	system_init();	// MCU 설정및 초기화 부분	
    7924:	4b90      	ldr	r3, [pc, #576]	; (7b68 <main+0x248>)
    7926:	4798      	blx	r3
	
	init_port();
    7928:	4b90      	ldr	r3, [pc, #576]	; (7b6c <main+0x24c>)
    792a:	4798      	blx	r3
	/* Initialize the UART console. */
	modules_init();		// UART 설정및 초기화
    792c:	4b90      	ldr	r3, [pc, #576]	; (7b70 <main+0x250>)
    792e:	4798      	blx	r3
	
	/* Zigbee Initialize */
	wireless_init();
    7930:	4b90      	ldr	r3, [pc, #576]	; (7b74 <main+0x254>)
    7932:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();		// WINC1500 핀 설정 및 초기화
    7934:	4b90      	ldr	r3, [pc, #576]	; (7b78 <main+0x258>)
    7936:	4798      	blx	r3

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
    7938:	ab02      	add	r3, sp, #8
    793a:	2202      	movs	r2, #2
    793c:	801a      	strh	r2, [r3, #0]
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
    793e:	4a8f      	ldr	r2, [pc, #572]	; (7b7c <main+0x25c>)
    7940:	805a      	strh	r2, [r3, #2]

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));	// param 초기화
    7942:	2218      	movs	r2, #24
    7944:	2100      	movs	r1, #0
    7946:	a806      	add	r0, sp, #24
    7948:	4b8d      	ldr	r3, [pc, #564]	; (7b80 <main+0x260>)
    794a:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    794c:	4b8d      	ldr	r3, [pc, #564]	; (7b84 <main+0x264>)
    794e:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
    7950:	a806      	add	r0, sp, #24
    7952:	4b8d      	ldr	r3, [pc, #564]	; (7b88 <main+0x268>)
    7954:	4798      	blx	r3
    7956:	1e01      	subs	r1, r0, #0
	
	if(M2M_SUCCESS != ret)
    7958:	d003      	beq.n	7962 <main+0x42>
	{
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    795a:	488c      	ldr	r0, [pc, #560]	; (7b8c <main+0x26c>)
    795c:	4b8c      	ldr	r3, [pc, #560]	; (7b90 <main+0x270>)
    795e:	4798      	blx	r3
    7960:	e7fe      	b.n	7960 <main+0x40>
		while(1);
	}

	/* Initialize socket module */
	socketInit();
    7962:	4b8c      	ldr	r3, [pc, #560]	; (7b94 <main+0x274>)
    7964:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
    7966:	2100      	movs	r1, #0
    7968:	488b      	ldr	r0, [pc, #556]	; (7b98 <main+0x278>)
    796a:	4b8c      	ldr	r3, [pc, #560]	; (7b9c <main+0x27c>)
    796c:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID,sizeof(MAIN_WLAN_SSID),MAIN_WLAN_AUTH,(char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    796e:	23ff      	movs	r3, #255	; 0xff
    7970:	9300      	str	r3, [sp, #0]
    7972:	4b8b      	ldr	r3, [pc, #556]	; (7ba0 <main+0x280>)
    7974:	2202      	movs	r2, #2
    7976:	210e      	movs	r1, #14
    7978:	488a      	ldr	r0, [pc, #552]	; (7ba4 <main+0x284>)
    797a:	4c8b      	ldr	r4, [pc, #556]	; (7ba8 <main+0x288>)
    797c:	47a0      	blx	r4

	sol_valve[0]=50;
    797e:	4b8b      	ldr	r3, [pc, #556]	; (7bac <main+0x28c>)
    7980:	2232      	movs	r2, #50	; 0x32
    7982:	701a      	strb	r2, [r3, #0]
	sol_valve[1]=50;
    7984:	705a      	strb	r2, [r3, #1]
	sol_valve[2]=50;
    7986:	709a      	strb	r2, [r3, #2]
	sol_valve[3]=50;
    7988:	70da      	strb	r2, [r3, #3]
	sol_valve[4]=50;
    798a:	711a      	strb	r2, [r3, #4]
	sol_valve[5]=50;
    798c:	715a      	strb	r2, [r3, #5]

	
	while(1)
	{	
		// Handle pending events from network controller. //
		m2m_wifi_handle_events(NULL);
    798e:	4d88      	ldr	r5, [pc, #544]	; (7bb0 <main+0x290>)

		if(wifi_connected == M2M_WIFI_CONNECTED) 
    7990:	4c88      	ldr	r4, [pc, #544]	; (7bb4 <main+0x294>)
				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
			}		
		}
		
		if(buff[0] == 35)
    7992:	4e89      	ldr	r6, [pc, #548]	; (7bb8 <main+0x298>)
    7994:	e00c      	b.n	79b0 <main+0x90>
					printf("main: failed to create TCP server socket error!\r\n");
    7996:	4889      	ldr	r0, [pc, #548]	; (7bbc <main+0x29c>)
    7998:	4b89      	ldr	r3, [pc, #548]	; (7bc0 <main+0x2a0>)
    799a:	4798      	blx	r3
					continue;
    799c:	e008      	b.n	79b0 <main+0x90>
		if(buff[0] == 35)
    799e:	7833      	ldrb	r3, [r6, #0]
    79a0:	2b23      	cmp	r3, #35	; 0x23
    79a2:	d01c      	beq.n	79de <main+0xbe>
 *  this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    79a4:	4b87      	ldr	r3, [pc, #540]	; (7bc4 <main+0x2a4>)
    79a6:	4798      	blx	r3
	tal_task();
    79a8:	4b87      	ldr	r3, [pc, #540]	; (7bc8 <main+0x2a8>)
    79aa:	4798      	blx	r3
 * \brief Application task
 */
 void app_task(void)
{
//	usr_wireless_app_task();
	init_data_reception();
    79ac:	4b87      	ldr	r3, [pc, #540]	; (7bcc <main+0x2ac>)
    79ae:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
    79b0:	2000      	movs	r0, #0
    79b2:	47a8      	blx	r5
		if(wifi_connected == M2M_WIFI_CONNECTED) 
    79b4:	7823      	ldrb	r3, [r4, #0]
    79b6:	2b01      	cmp	r3, #1
    79b8:	d1f1      	bne.n	799e <main+0x7e>
			if(tcp_server_socket < 0) 
    79ba:	4b85      	ldr	r3, [pc, #532]	; (7bd0 <main+0x2b0>)
    79bc:	781b      	ldrb	r3, [r3, #0]
    79be:	2b7f      	cmp	r3, #127	; 0x7f
    79c0:	d9ed      	bls.n	799e <main+0x7e>
				if((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
    79c2:	2200      	movs	r2, #0
    79c4:	2101      	movs	r1, #1
    79c6:	2002      	movs	r0, #2
    79c8:	4b82      	ldr	r3, [pc, #520]	; (7bd4 <main+0x2b4>)
    79ca:	4798      	blx	r3
    79cc:	4b80      	ldr	r3, [pc, #512]	; (7bd0 <main+0x2b0>)
    79ce:	7018      	strb	r0, [r3, #0]
    79d0:	2800      	cmp	r0, #0
    79d2:	dbe0      	blt.n	7996 <main+0x76>
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
    79d4:	2210      	movs	r2, #16
    79d6:	a902      	add	r1, sp, #8
    79d8:	4b7f      	ldr	r3, [pc, #508]	; (7bd8 <main+0x2b8>)
    79da:	4798      	blx	r3
    79dc:	e7df      	b.n	799e <main+0x7e>
			printf("buff[1]:%d \r\n",buff[1]);
    79de:	4f76      	ldr	r7, [pc, #472]	; (7bb8 <main+0x298>)
    79e0:	7879      	ldrb	r1, [r7, #1]
    79e2:	487e      	ldr	r0, [pc, #504]	; (7bdc <main+0x2bc>)
    79e4:	4b6a      	ldr	r3, [pc, #424]	; (7b90 <main+0x270>)
    79e6:	4798      	blx	r3
			buff[1] = buff[1]-48;
    79e8:	787b      	ldrb	r3, [r7, #1]
    79ea:	3b30      	subs	r3, #48	; 0x30
    79ec:	b2db      	uxtb	r3, r3
    79ee:	707b      	strb	r3, [r7, #1]
			switch(buff[1])
    79f0:	2b06      	cmp	r3, #6
    79f2:	d80b      	bhi.n	7a0c <main+0xec>
    79f4:	009b      	lsls	r3, r3, #2
    79f6:	4a7a      	ldr	r2, [pc, #488]	; (7be0 <main+0x2c0>)
    79f8:	58d3      	ldr	r3, [r2, r3]
    79fa:	469f      	mov	pc, r3
					if(buff[2]=='o')
    79fc:	4b6e      	ldr	r3, [pc, #440]	; (7bb8 <main+0x298>)
    79fe:	789b      	ldrb	r3, [r3, #2]
    7a00:	2b6f      	cmp	r3, #111	; 0x6f
    7a02:	d00a      	beq.n	7a1a <main+0xfa>
					else if(buff[2] =='c')
    7a04:	2b63      	cmp	r3, #99	; 0x63
    7a06:	d00f      	beq.n	7a28 <main+0x108>
					else if(buff[2] == 'e')
    7a08:	2b65      	cmp	r3, #101	; 0x65
    7a0a:	d014      	beq.n	7a36 <main+0x116>
			buff[0] =50;
    7a0c:	4b6a      	ldr	r3, [pc, #424]	; (7bb8 <main+0x298>)
    7a0e:	2232      	movs	r2, #50	; 0x32
    7a10:	701a      	strb	r2, [r3, #0]
			buff[1] =50;
    7a12:	705a      	strb	r2, [r3, #1]
			buff[2] =50;
    7a14:	709a      	strb	r2, [r3, #2]
			buff[3] =50;	
    7a16:	70da      	strb	r2, [r3, #3]
    7a18:	e7c4      	b.n	79a4 <main+0x84>
						printf("1 open\n");
    7a1a:	4872      	ldr	r0, [pc, #456]	; (7be4 <main+0x2c4>)
    7a1c:	4b68      	ldr	r3, [pc, #416]	; (7bc0 <main+0x2a0>)
    7a1e:	4798      	blx	r3
						sol_valve[0] = 48;
    7a20:	2230      	movs	r2, #48	; 0x30
    7a22:	4b62      	ldr	r3, [pc, #392]	; (7bac <main+0x28c>)
    7a24:	701a      	strb	r2, [r3, #0]
    7a26:	e7f1      	b.n	7a0c <main+0xec>
						printf("1 close\n");
    7a28:	486f      	ldr	r0, [pc, #444]	; (7be8 <main+0x2c8>)
    7a2a:	4b65      	ldr	r3, [pc, #404]	; (7bc0 <main+0x2a0>)
    7a2c:	4798      	blx	r3
						sol_valve[0] = 49;
    7a2e:	2231      	movs	r2, #49	; 0x31
    7a30:	4b5e      	ldr	r3, [pc, #376]	; (7bac <main+0x28c>)
    7a32:	701a      	strb	r2, [r3, #0]
    7a34:	e7ea      	b.n	7a0c <main+0xec>
						printf("1 No Signal \r\n");
    7a36:	486d      	ldr	r0, [pc, #436]	; (7bec <main+0x2cc>)
    7a38:	4b61      	ldr	r3, [pc, #388]	; (7bc0 <main+0x2a0>)
    7a3a:	4798      	blx	r3
						sol_valve[0] = 50;
    7a3c:	2232      	movs	r2, #50	; 0x32
    7a3e:	4b5b      	ldr	r3, [pc, #364]	; (7bac <main+0x28c>)
    7a40:	701a      	strb	r2, [r3, #0]
    7a42:	e7e3      	b.n	7a0c <main+0xec>
					if(buff[2]=='o')
    7a44:	4b5c      	ldr	r3, [pc, #368]	; (7bb8 <main+0x298>)
    7a46:	789b      	ldrb	r3, [r3, #2]
    7a48:	2b6f      	cmp	r3, #111	; 0x6f
    7a4a:	d00a      	beq.n	7a62 <main+0x142>
					else if(buff[2] =='c')
    7a4c:	2b63      	cmp	r3, #99	; 0x63
    7a4e:	d00f      	beq.n	7a70 <main+0x150>
					else if(buff[2] == 'e')
    7a50:	2b65      	cmp	r3, #101	; 0x65
    7a52:	d1db      	bne.n	7a0c <main+0xec>
						printf("2 No Signal \r\n");
    7a54:	4866      	ldr	r0, [pc, #408]	; (7bf0 <main+0x2d0>)
    7a56:	4b5a      	ldr	r3, [pc, #360]	; (7bc0 <main+0x2a0>)
    7a58:	4798      	blx	r3
						sol_valve[1] = 50;
    7a5a:	2232      	movs	r2, #50	; 0x32
    7a5c:	4b53      	ldr	r3, [pc, #332]	; (7bac <main+0x28c>)
    7a5e:	705a      	strb	r2, [r3, #1]
    7a60:	e7d4      	b.n	7a0c <main+0xec>
						printf("2 open\n");
    7a62:	4864      	ldr	r0, [pc, #400]	; (7bf4 <main+0x2d4>)
    7a64:	4b56      	ldr	r3, [pc, #344]	; (7bc0 <main+0x2a0>)
    7a66:	4798      	blx	r3
						sol_valve[1] = 48;
    7a68:	2230      	movs	r2, #48	; 0x30
    7a6a:	4b50      	ldr	r3, [pc, #320]	; (7bac <main+0x28c>)
    7a6c:	705a      	strb	r2, [r3, #1]
    7a6e:	e7cd      	b.n	7a0c <main+0xec>
						printf("2 close\n");
    7a70:	4861      	ldr	r0, [pc, #388]	; (7bf8 <main+0x2d8>)
    7a72:	4b53      	ldr	r3, [pc, #332]	; (7bc0 <main+0x2a0>)
    7a74:	4798      	blx	r3
						sol_valve[1] = 49;
    7a76:	2231      	movs	r2, #49	; 0x31
    7a78:	4b4c      	ldr	r3, [pc, #304]	; (7bac <main+0x28c>)
    7a7a:	705a      	strb	r2, [r3, #1]
    7a7c:	e7c6      	b.n	7a0c <main+0xec>
					if(buff[2]=='o')
    7a7e:	4b4e      	ldr	r3, [pc, #312]	; (7bb8 <main+0x298>)
    7a80:	789b      	ldrb	r3, [r3, #2]
    7a82:	2b6f      	cmp	r3, #111	; 0x6f
    7a84:	d00a      	beq.n	7a9c <main+0x17c>
					else if(buff[2] =='c')
    7a86:	2b63      	cmp	r3, #99	; 0x63
    7a88:	d00f      	beq.n	7aaa <main+0x18a>
					else if(buff[2] == 'e')
    7a8a:	2b65      	cmp	r3, #101	; 0x65
    7a8c:	d1be      	bne.n	7a0c <main+0xec>
						printf("3 No Signal \r\n");
    7a8e:	485b      	ldr	r0, [pc, #364]	; (7bfc <main+0x2dc>)
    7a90:	4b4b      	ldr	r3, [pc, #300]	; (7bc0 <main+0x2a0>)
    7a92:	4798      	blx	r3
						sol_valve[2] = 50;
    7a94:	2232      	movs	r2, #50	; 0x32
    7a96:	4b45      	ldr	r3, [pc, #276]	; (7bac <main+0x28c>)
    7a98:	709a      	strb	r2, [r3, #2]
    7a9a:	e7b7      	b.n	7a0c <main+0xec>
						printf("3 open\n");
    7a9c:	4858      	ldr	r0, [pc, #352]	; (7c00 <main+0x2e0>)
    7a9e:	4b48      	ldr	r3, [pc, #288]	; (7bc0 <main+0x2a0>)
    7aa0:	4798      	blx	r3
						sol_valve[2] = 48;
    7aa2:	2230      	movs	r2, #48	; 0x30
    7aa4:	4b41      	ldr	r3, [pc, #260]	; (7bac <main+0x28c>)
    7aa6:	709a      	strb	r2, [r3, #2]
    7aa8:	e7b0      	b.n	7a0c <main+0xec>
						printf("3 close\n");
    7aaa:	4856      	ldr	r0, [pc, #344]	; (7c04 <main+0x2e4>)
    7aac:	4b44      	ldr	r3, [pc, #272]	; (7bc0 <main+0x2a0>)
    7aae:	4798      	blx	r3
						sol_valve[2] = 49;
    7ab0:	2231      	movs	r2, #49	; 0x31
    7ab2:	4b3e      	ldr	r3, [pc, #248]	; (7bac <main+0x28c>)
    7ab4:	709a      	strb	r2, [r3, #2]
    7ab6:	e7a9      	b.n	7a0c <main+0xec>
					if(buff[2]=='o')
    7ab8:	4b3f      	ldr	r3, [pc, #252]	; (7bb8 <main+0x298>)
    7aba:	789b      	ldrb	r3, [r3, #2]
    7abc:	2b6f      	cmp	r3, #111	; 0x6f
    7abe:	d00a      	beq.n	7ad6 <main+0x1b6>
					else if(buff[2] =='c')
    7ac0:	2b63      	cmp	r3, #99	; 0x63
    7ac2:	d00f      	beq.n	7ae4 <main+0x1c4>
					else if(buff[2] == 'e')
    7ac4:	2b65      	cmp	r3, #101	; 0x65
    7ac6:	d1a1      	bne.n	7a0c <main+0xec>
						printf("4 No Signal \r\n");
    7ac8:	484f      	ldr	r0, [pc, #316]	; (7c08 <main+0x2e8>)
    7aca:	4b3d      	ldr	r3, [pc, #244]	; (7bc0 <main+0x2a0>)
    7acc:	4798      	blx	r3
						sol_valve[3] = 50;
    7ace:	2232      	movs	r2, #50	; 0x32
    7ad0:	4b36      	ldr	r3, [pc, #216]	; (7bac <main+0x28c>)
    7ad2:	70da      	strb	r2, [r3, #3]
    7ad4:	e79a      	b.n	7a0c <main+0xec>
						printf("4 open\n");
    7ad6:	484d      	ldr	r0, [pc, #308]	; (7c0c <main+0x2ec>)
    7ad8:	4b39      	ldr	r3, [pc, #228]	; (7bc0 <main+0x2a0>)
    7ada:	4798      	blx	r3
						sol_valve[3] = 48;						
    7adc:	2230      	movs	r2, #48	; 0x30
    7ade:	4b33      	ldr	r3, [pc, #204]	; (7bac <main+0x28c>)
    7ae0:	70da      	strb	r2, [r3, #3]
    7ae2:	e793      	b.n	7a0c <main+0xec>
						printf("4 close\n");
    7ae4:	484a      	ldr	r0, [pc, #296]	; (7c10 <main+0x2f0>)
    7ae6:	4b36      	ldr	r3, [pc, #216]	; (7bc0 <main+0x2a0>)
    7ae8:	4798      	blx	r3
						sol_valve[3] = 49;
    7aea:	2231      	movs	r2, #49	; 0x31
    7aec:	4b2f      	ldr	r3, [pc, #188]	; (7bac <main+0x28c>)
    7aee:	70da      	strb	r2, [r3, #3]
    7af0:	e78c      	b.n	7a0c <main+0xec>
					if(buff[2]=='o')
    7af2:	4b31      	ldr	r3, [pc, #196]	; (7bb8 <main+0x298>)
    7af4:	789b      	ldrb	r3, [r3, #2]
    7af6:	2b6f      	cmp	r3, #111	; 0x6f
    7af8:	d00a      	beq.n	7b10 <main+0x1f0>
					else if(buff[2] =='c')
    7afa:	2b63      	cmp	r3, #99	; 0x63
    7afc:	d00f      	beq.n	7b1e <main+0x1fe>
					else if(buff[2] == 'e')
    7afe:	2b65      	cmp	r3, #101	; 0x65
    7b00:	d184      	bne.n	7a0c <main+0xec>
						printf("5 No Signal \r\n");
    7b02:	4844      	ldr	r0, [pc, #272]	; (7c14 <main+0x2f4>)
    7b04:	4b2e      	ldr	r3, [pc, #184]	; (7bc0 <main+0x2a0>)
    7b06:	4798      	blx	r3
						sol_valve[4] = 50;
    7b08:	2232      	movs	r2, #50	; 0x32
    7b0a:	4b28      	ldr	r3, [pc, #160]	; (7bac <main+0x28c>)
    7b0c:	711a      	strb	r2, [r3, #4]
    7b0e:	e77d      	b.n	7a0c <main+0xec>
						printf("5 open\n");
    7b10:	4841      	ldr	r0, [pc, #260]	; (7c18 <main+0x2f8>)
    7b12:	4b2b      	ldr	r3, [pc, #172]	; (7bc0 <main+0x2a0>)
    7b14:	4798      	blx	r3
						sol_valve[4] = 48;
    7b16:	2230      	movs	r2, #48	; 0x30
    7b18:	4b24      	ldr	r3, [pc, #144]	; (7bac <main+0x28c>)
    7b1a:	711a      	strb	r2, [r3, #4]
    7b1c:	e776      	b.n	7a0c <main+0xec>
						printf("5 close\n");
    7b1e:	483f      	ldr	r0, [pc, #252]	; (7c1c <main+0x2fc>)
    7b20:	4b27      	ldr	r3, [pc, #156]	; (7bc0 <main+0x2a0>)
    7b22:	4798      	blx	r3
						sol_valve[4] = 49;
    7b24:	2231      	movs	r2, #49	; 0x31
    7b26:	4b21      	ldr	r3, [pc, #132]	; (7bac <main+0x28c>)
    7b28:	711a      	strb	r2, [r3, #4]
    7b2a:	e76f      	b.n	7a0c <main+0xec>
					if(buff[2]=='o')
    7b2c:	4b22      	ldr	r3, [pc, #136]	; (7bb8 <main+0x298>)
    7b2e:	789b      	ldrb	r3, [r3, #2]
    7b30:	2b6f      	cmp	r3, #111	; 0x6f
    7b32:	d00b      	beq.n	7b4c <main+0x22c>
					else if(buff[2] =='c')
    7b34:	2b63      	cmp	r3, #99	; 0x63
    7b36:	d010      	beq.n	7b5a <main+0x23a>
					else if(buff[2] == 'e')
    7b38:	2b65      	cmp	r3, #101	; 0x65
    7b3a:	d000      	beq.n	7b3e <main+0x21e>
    7b3c:	e766      	b.n	7a0c <main+0xec>
						printf("6 No Signal \r\n");
    7b3e:	4838      	ldr	r0, [pc, #224]	; (7c20 <main+0x300>)
    7b40:	4b1f      	ldr	r3, [pc, #124]	; (7bc0 <main+0x2a0>)
    7b42:	4798      	blx	r3
						sol_valve[5] = 50;
    7b44:	2232      	movs	r2, #50	; 0x32
    7b46:	4b19      	ldr	r3, [pc, #100]	; (7bac <main+0x28c>)
    7b48:	715a      	strb	r2, [r3, #5]
    7b4a:	e75f      	b.n	7a0c <main+0xec>
						printf("6 open\n");
    7b4c:	4835      	ldr	r0, [pc, #212]	; (7c24 <main+0x304>)
    7b4e:	4b1c      	ldr	r3, [pc, #112]	; (7bc0 <main+0x2a0>)
    7b50:	4798      	blx	r3
						sol_valve[5] = 48;
    7b52:	2230      	movs	r2, #48	; 0x30
    7b54:	4b15      	ldr	r3, [pc, #84]	; (7bac <main+0x28c>)
    7b56:	715a      	strb	r2, [r3, #5]
    7b58:	e758      	b.n	7a0c <main+0xec>
						printf("6 close\n");
    7b5a:	4833      	ldr	r0, [pc, #204]	; (7c28 <main+0x308>)
    7b5c:	4b18      	ldr	r3, [pc, #96]	; (7bc0 <main+0x2a0>)
    7b5e:	4798      	blx	r3
						sol_valve[5] = 49;
    7b60:	2231      	movs	r2, #49	; 0x31
    7b62:	4b12      	ldr	r3, [pc, #72]	; (7bac <main+0x28c>)
    7b64:	715a      	strb	r2, [r3, #5]
    7b66:	e751      	b.n	7a0c <main+0xec>
    7b68:	000052f1 	.word	0x000052f1
    7b6c:	000078e9 	.word	0x000078e9
    7b70:	00003fad 	.word	0x00003fad
    7b74:	00003e75 	.word	0x00003e75
    7b78:	00000169 	.word	0x00000169
    7b7c:	ffffb80b 	.word	0xffffb80b
    7b80:	0000817b 	.word	0x0000817b
    7b84:	0000727d 	.word	0x0000727d
    7b88:	000010a5 	.word	0x000010a5
    7b8c:	0000a400 	.word	0x0000a400
    7b90:	0000818d 	.word	0x0000818d
    7b94:	00002cd5 	.word	0x00002cd5
    7b98:	00007365 	.word	0x00007365
    7b9c:	00002d19 	.word	0x00002d19
    7ba0:	0000a798 	.word	0x0000a798
    7ba4:	0000a7a4 	.word	0x0000a7a4
    7ba8:	00001479 	.word	0x00001479
    7bac:	20000cb8 	.word	0x20000cb8
    7bb0:	000011d9 	.word	0x000011d9
    7bb4:	20000990 	.word	0x20000990
    7bb8:	200003c4 	.word	0x200003c4
    7bbc:	0000a428 	.word	0x0000a428
    7bc0:	000082a9 	.word	0x000082a9
    7bc4:	00005b31 	.word	0x00005b31
    7bc8:	00006181 	.word	0x00006181
    7bcc:	00003ef1 	.word	0x00003ef1
    7bd0:	2000000e 	.word	0x2000000e
    7bd4:	00002d2d 	.word	0x00002d2d
    7bd8:	00002eb1 	.word	0x00002eb1
    7bdc:	0000a45c 	.word	0x0000a45c
    7be0:	0000a3e4 	.word	0x0000a3e4
    7be4:	0000a46c 	.word	0x0000a46c
    7be8:	0000a474 	.word	0x0000a474
    7bec:	0000a47c 	.word	0x0000a47c
    7bf0:	0000a49c 	.word	0x0000a49c
    7bf4:	0000a48c 	.word	0x0000a48c
    7bf8:	0000a494 	.word	0x0000a494
    7bfc:	0000a4bc 	.word	0x0000a4bc
    7c00:	0000a4ac 	.word	0x0000a4ac
    7c04:	0000a4b4 	.word	0x0000a4b4
    7c08:	0000a4dc 	.word	0x0000a4dc
    7c0c:	0000a4cc 	.word	0x0000a4cc
    7c10:	0000a4d4 	.word	0x0000a4d4
    7c14:	0000a4fc 	.word	0x0000a4fc
    7c18:	0000a4ec 	.word	0x0000a4ec
    7c1c:	0000a4f4 	.word	0x0000a4f4
    7c20:	0000a51c 	.word	0x0000a51c
    7c24:	0000a50c 	.word	0x0000a50c
    7c28:	0000a514 	.word	0x0000a514

00007c2c <tal_tx_frame_done_cb>:
 * \brief This method (callback) is called when a frame has been transmitted by the transceiver
 * \param status  Status of frame transmission i.e MAC_SUCCESS,MAC_NO_ACK,CHANNEL_ACCESS_FAILURE etc
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
    7c2c:	b510      	push	{r4, lr}
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    7c2e:	4b01      	ldr	r3, [pc, #4]	; (7c34 <tal_tx_frame_done_cb+0x8>)
    7c30:	4798      	blx	r3
}
    7c32:	bd10      	pop	{r4, pc}
    7c34:	00003e71 	.word	0x00003e71

00007c38 <tal_rx_frame_cb>:
/*
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    7c38:	b510      	push	{r4, lr}
    7c3a:	0004      	movs	r4, r0
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    7c3c:	4b07      	ldr	r3, [pc, #28]	; (7c5c <tal_rx_frame_cb+0x24>)
    7c3e:	4798      	blx	r3
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    7c40:	7860      	ldrb	r0, [r4, #1]
    7c42:	78a3      	ldrb	r3, [r4, #2]
    7c44:	021b      	lsls	r3, r3, #8
    7c46:	4303      	orrs	r3, r0
    7c48:	78e0      	ldrb	r0, [r4, #3]
    7c4a:	0400      	lsls	r0, r0, #16
    7c4c:	4303      	orrs	r3, r0
    7c4e:	7920      	ldrb	r0, [r4, #4]
    7c50:	0600      	lsls	r0, r0, #24
    7c52:	4318      	orrs	r0, r3
    7c54:	4b02      	ldr	r3, [pc, #8]	; (7c60 <tal_rx_frame_cb+0x28>)
    7c56:	4798      	blx	r3
    7c58:	bd10      	pop	{r4, pc}
    7c5a:	46c0      	nop			; (mov r8, r8)
    7c5c:	00003e49 	.word	0x00003e49
    7c60:	00005bc1 	.word	0x00005bc1

00007c64 <common_tc_read_count>:
    7c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c66:	4b0d      	ldr	r3, [pc, #52]	; (7c9c <common_tc_read_count+0x38>)
    7c68:	4798      	blx	r3
    7c6a:	4b0d      	ldr	r3, [pc, #52]	; (7ca0 <common_tc_read_count+0x3c>)
    7c6c:	781b      	ldrb	r3, [r3, #0]
    7c6e:	2b00      	cmp	r3, #0
    7c70:	d00e      	beq.n	7c90 <common_tc_read_count+0x2c>
    7c72:	4b0c      	ldr	r3, [pc, #48]	; (7ca4 <common_tc_read_count+0x40>)
    7c74:	781d      	ldrb	r5, [r3, #0]
    7c76:	4b0a      	ldr	r3, [pc, #40]	; (7ca0 <common_tc_read_count+0x3c>)
    7c78:	781f      	ldrb	r7, [r3, #0]
    7c7a:	4c0b      	ldr	r4, [pc, #44]	; (7ca8 <common_tc_read_count+0x44>)
    7c7c:	1c29      	adds	r1, r5, #0
    7c7e:	47a0      	blx	r4
    7c80:	1c06      	adds	r6, r0, #0
    7c82:	480a      	ldr	r0, [pc, #40]	; (7cac <common_tc_read_count+0x48>)
    7c84:	1c29      	adds	r1, r5, #0
    7c86:	47a0      	blx	r4
    7c88:	4378      	muls	r0, r7
    7c8a:	1830      	adds	r0, r6, r0
    7c8c:	b280      	uxth	r0, r0
    7c8e:	e004      	b.n	7c9a <common_tc_read_count+0x36>
    7c90:	4b04      	ldr	r3, [pc, #16]	; (7ca4 <common_tc_read_count+0x40>)
    7c92:	7819      	ldrb	r1, [r3, #0]
    7c94:	4b04      	ldr	r3, [pc, #16]	; (7ca8 <common_tc_read_count+0x44>)
    7c96:	4798      	blx	r3
    7c98:	b280      	uxth	r0, r0
    7c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c9c:	00006c09 	.word	0x00006c09
    7ca0:	20000994 	.word	0x20000994
    7ca4:	20000cce 	.word	0x20000cce
    7ca8:	00007ef5 	.word	0x00007ef5
    7cac:	0000ffff 	.word	0x0000ffff

00007cb0 <common_tc_compare_stop>:
    7cb0:	b508      	push	{r3, lr}
    7cb2:	4b05      	ldr	r3, [pc, #20]	; (7cc8 <common_tc_compare_stop+0x18>)
    7cb4:	4798      	blx	r3
    7cb6:	4b05      	ldr	r3, [pc, #20]	; (7ccc <common_tc_compare_stop+0x1c>)
    7cb8:	4798      	blx	r3
    7cba:	4b05      	ldr	r3, [pc, #20]	; (7cd0 <common_tc_compare_stop+0x20>)
    7cbc:	2200      	movs	r2, #0
    7cbe:	605a      	str	r2, [r3, #4]
    7cc0:	811a      	strh	r2, [r3, #8]
    7cc2:	4b04      	ldr	r3, [pc, #16]	; (7cd4 <common_tc_compare_stop+0x24>)
    7cc4:	4798      	blx	r3
    7cc6:	bd08      	pop	{r3, pc}
    7cc8:	00006c1d 	.word	0x00006c1d
    7ccc:	00006c85 	.word	0x00006c85
    7cd0:	20000994 	.word	0x20000994
    7cd4:	00006ca9 	.word	0x00006ca9

00007cd8 <common_tc_delay>:
    7cd8:	b510      	push	{r4, lr}
    7cda:	1c04      	adds	r4, r0, #0
    7cdc:	4b13      	ldr	r3, [pc, #76]	; (7d2c <common_tc_delay+0x54>)
    7cde:	4798      	blx	r3
    7ce0:	4b13      	ldr	r3, [pc, #76]	; (7d30 <common_tc_delay+0x58>)
    7ce2:	781a      	ldrb	r2, [r3, #0]
    7ce4:	4362      	muls	r2, r4
    7ce6:	1881      	adds	r1, r0, r2
    7ce8:	4b12      	ldr	r3, [pc, #72]	; (7d34 <common_tc_delay+0x5c>)
    7cea:	6059      	str	r1, [r3, #4]
    7cec:	6859      	ldr	r1, [r3, #4]
    7cee:	0c09      	lsrs	r1, r1, #16
    7cf0:	6059      	str	r1, [r3, #4]
    7cf2:	685b      	ldr	r3, [r3, #4]
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	d007      	beq.n	7d08 <common_tc_delay+0x30>
    7cf8:	4b0e      	ldr	r3, [pc, #56]	; (7d34 <common_tc_delay+0x5c>)
    7cfa:	6859      	ldr	r1, [r3, #4]
    7cfc:	3201      	adds	r2, #1
    7cfe:	1880      	adds	r0, r0, r2
    7d00:	8118      	strh	r0, [r3, #8]
    7d02:	4b0d      	ldr	r3, [pc, #52]	; (7d38 <common_tc_delay+0x60>)
    7d04:	4798      	blx	r3
    7d06:	e004      	b.n	7d12 <common_tc_delay+0x3a>
    7d08:	1882      	adds	r2, r0, r2
    7d0a:	4b0a      	ldr	r3, [pc, #40]	; (7d34 <common_tc_delay+0x5c>)
    7d0c:	811a      	strh	r2, [r3, #8]
    7d0e:	4b0b      	ldr	r3, [pc, #44]	; (7d3c <common_tc_delay+0x64>)
    7d10:	4798      	blx	r3
    7d12:	4b08      	ldr	r3, [pc, #32]	; (7d34 <common_tc_delay+0x5c>)
    7d14:	891b      	ldrh	r3, [r3, #8]
    7d16:	2b63      	cmp	r3, #99	; 0x63
    7d18:	d802      	bhi.n	7d20 <common_tc_delay+0x48>
    7d1a:	3364      	adds	r3, #100	; 0x64
    7d1c:	4a05      	ldr	r2, [pc, #20]	; (7d34 <common_tc_delay+0x5c>)
    7d1e:	8113      	strh	r3, [r2, #8]
    7d20:	4b04      	ldr	r3, [pc, #16]	; (7d34 <common_tc_delay+0x5c>)
    7d22:	8918      	ldrh	r0, [r3, #8]
    7d24:	4b06      	ldr	r3, [pc, #24]	; (7d40 <common_tc_delay+0x68>)
    7d26:	4798      	blx	r3
    7d28:	bd10      	pop	{r4, pc}
    7d2a:	46c0      	nop			; (mov r8, r8)
    7d2c:	00006c09 	.word	0x00006c09
    7d30:	20000cce 	.word	0x20000cce
    7d34:	20000994 	.word	0x20000994
    7d38:	00006c1d 	.word	0x00006c1d
    7d3c:	00006c31 	.word	0x00006c31
    7d40:	00006c6d 	.word	0x00006c6d

00007d44 <common_tc_init>:
    7d44:	b508      	push	{r3, lr}
    7d46:	2200      	movs	r2, #0
    7d48:	4b03      	ldr	r3, [pc, #12]	; (7d58 <common_tc_init+0x14>)
    7d4a:	701a      	strb	r2, [r3, #0]
    7d4c:	4b03      	ldr	r3, [pc, #12]	; (7d5c <common_tc_init+0x18>)
    7d4e:	4798      	blx	r3
    7d50:	4b03      	ldr	r3, [pc, #12]	; (7d60 <common_tc_init+0x1c>)
    7d52:	7018      	strb	r0, [r3, #0]
    7d54:	bd08      	pop	{r3, pc}
    7d56:	46c0      	nop			; (mov r8, r8)
    7d58:	20000994 	.word	0x20000994
    7d5c:	00006cc1 	.word	0x00006cc1
    7d60:	20000cce 	.word	0x20000cce

00007d64 <tmr_ovf_callback>:
    7d64:	b508      	push	{r3, lr}
    7d66:	4b0e      	ldr	r3, [pc, #56]	; (7da0 <tmr_ovf_callback+0x3c>)
    7d68:	685b      	ldr	r3, [r3, #4]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	d007      	beq.n	7d7e <tmr_ovf_callback+0x1a>
    7d6e:	4a0c      	ldr	r2, [pc, #48]	; (7da0 <tmr_ovf_callback+0x3c>)
    7d70:	6853      	ldr	r3, [r2, #4]
    7d72:	3b01      	subs	r3, #1
    7d74:	6053      	str	r3, [r2, #4]
    7d76:	2b00      	cmp	r3, #0
    7d78:	d101      	bne.n	7d7e <tmr_ovf_callback+0x1a>
    7d7a:	4b0a      	ldr	r3, [pc, #40]	; (7da4 <tmr_ovf_callback+0x40>)
    7d7c:	4798      	blx	r3
    7d7e:	4a08      	ldr	r2, [pc, #32]	; (7da0 <tmr_ovf_callback+0x3c>)
    7d80:	7813      	ldrb	r3, [r2, #0]
    7d82:	3301      	adds	r3, #1
    7d84:	b2db      	uxtb	r3, r3
    7d86:	7013      	strb	r3, [r2, #0]
    7d88:	4a07      	ldr	r2, [pc, #28]	; (7da8 <tmr_ovf_callback+0x44>)
    7d8a:	7812      	ldrb	r2, [r2, #0]
    7d8c:	429a      	cmp	r2, r3
    7d8e:	d806      	bhi.n	7d9e <tmr_ovf_callback+0x3a>
    7d90:	4b03      	ldr	r3, [pc, #12]	; (7da0 <tmr_ovf_callback+0x3c>)
    7d92:	2200      	movs	r2, #0
    7d94:	701a      	strb	r2, [r3, #0]
    7d96:	68db      	ldr	r3, [r3, #12]
    7d98:	2b00      	cmp	r3, #0
    7d9a:	d000      	beq.n	7d9e <tmr_ovf_callback+0x3a>
    7d9c:	4798      	blx	r3
    7d9e:	bd08      	pop	{r3, pc}
    7da0:	20000994 	.word	0x20000994
    7da4:	00006c31 	.word	0x00006c31
    7da8:	20000cce 	.word	0x20000cce

00007dac <tmr_cca_callback>:
    7dac:	b508      	push	{r3, lr}
    7dae:	4b04      	ldr	r3, [pc, #16]	; (7dc0 <tmr_cca_callback+0x14>)
    7db0:	4798      	blx	r3
    7db2:	4b04      	ldr	r3, [pc, #16]	; (7dc4 <tmr_cca_callback+0x18>)
    7db4:	691b      	ldr	r3, [r3, #16]
    7db6:	2b00      	cmp	r3, #0
    7db8:	d000      	beq.n	7dbc <tmr_cca_callback+0x10>
    7dba:	4798      	blx	r3
    7dbc:	bd08      	pop	{r3, pc}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	00006c1d 	.word	0x00006c1d
    7dc4:	20000994 	.word	0x20000994

00007dc8 <set_common_tc_overflow_callback>:
    7dc8:	4b01      	ldr	r3, [pc, #4]	; (7dd0 <set_common_tc_overflow_callback+0x8>)
    7dca:	60d8      	str	r0, [r3, #12]
    7dcc:	4770      	bx	lr
    7dce:	46c0      	nop			; (mov r8, r8)
    7dd0:	20000994 	.word	0x20000994

00007dd4 <set_common_tc_expiry_callback>:
    7dd4:	4b01      	ldr	r3, [pc, #4]	; (7ddc <set_common_tc_expiry_callback+0x8>)
    7dd6:	6118      	str	r0, [r3, #16]
    7dd8:	4770      	bx	lr
    7dda:	46c0      	nop			; (mov r8, r8)
    7ddc:	20000994 	.word	0x20000994

00007de0 <__udivsi3>:
    7de0:	2200      	movs	r2, #0
    7de2:	0843      	lsrs	r3, r0, #1
    7de4:	428b      	cmp	r3, r1
    7de6:	d374      	bcc.n	7ed2 <__udivsi3+0xf2>
    7de8:	0903      	lsrs	r3, r0, #4
    7dea:	428b      	cmp	r3, r1
    7dec:	d35f      	bcc.n	7eae <__udivsi3+0xce>
    7dee:	0a03      	lsrs	r3, r0, #8
    7df0:	428b      	cmp	r3, r1
    7df2:	d344      	bcc.n	7e7e <__udivsi3+0x9e>
    7df4:	0b03      	lsrs	r3, r0, #12
    7df6:	428b      	cmp	r3, r1
    7df8:	d328      	bcc.n	7e4c <__udivsi3+0x6c>
    7dfa:	0c03      	lsrs	r3, r0, #16
    7dfc:	428b      	cmp	r3, r1
    7dfe:	d30d      	bcc.n	7e1c <__udivsi3+0x3c>
    7e00:	22ff      	movs	r2, #255	; 0xff
    7e02:	0209      	lsls	r1, r1, #8
    7e04:	ba12      	rev	r2, r2
    7e06:	0c03      	lsrs	r3, r0, #16
    7e08:	428b      	cmp	r3, r1
    7e0a:	d302      	bcc.n	7e12 <__udivsi3+0x32>
    7e0c:	1212      	asrs	r2, r2, #8
    7e0e:	0209      	lsls	r1, r1, #8
    7e10:	d065      	beq.n	7ede <__udivsi3+0xfe>
    7e12:	0b03      	lsrs	r3, r0, #12
    7e14:	428b      	cmp	r3, r1
    7e16:	d319      	bcc.n	7e4c <__udivsi3+0x6c>
    7e18:	e000      	b.n	7e1c <__udivsi3+0x3c>
    7e1a:	0a09      	lsrs	r1, r1, #8
    7e1c:	0bc3      	lsrs	r3, r0, #15
    7e1e:	428b      	cmp	r3, r1
    7e20:	d301      	bcc.n	7e26 <__udivsi3+0x46>
    7e22:	03cb      	lsls	r3, r1, #15
    7e24:	1ac0      	subs	r0, r0, r3
    7e26:	4152      	adcs	r2, r2
    7e28:	0b83      	lsrs	r3, r0, #14
    7e2a:	428b      	cmp	r3, r1
    7e2c:	d301      	bcc.n	7e32 <__udivsi3+0x52>
    7e2e:	038b      	lsls	r3, r1, #14
    7e30:	1ac0      	subs	r0, r0, r3
    7e32:	4152      	adcs	r2, r2
    7e34:	0b43      	lsrs	r3, r0, #13
    7e36:	428b      	cmp	r3, r1
    7e38:	d301      	bcc.n	7e3e <__udivsi3+0x5e>
    7e3a:	034b      	lsls	r3, r1, #13
    7e3c:	1ac0      	subs	r0, r0, r3
    7e3e:	4152      	adcs	r2, r2
    7e40:	0b03      	lsrs	r3, r0, #12
    7e42:	428b      	cmp	r3, r1
    7e44:	d301      	bcc.n	7e4a <__udivsi3+0x6a>
    7e46:	030b      	lsls	r3, r1, #12
    7e48:	1ac0      	subs	r0, r0, r3
    7e4a:	4152      	adcs	r2, r2
    7e4c:	0ac3      	lsrs	r3, r0, #11
    7e4e:	428b      	cmp	r3, r1
    7e50:	d301      	bcc.n	7e56 <__udivsi3+0x76>
    7e52:	02cb      	lsls	r3, r1, #11
    7e54:	1ac0      	subs	r0, r0, r3
    7e56:	4152      	adcs	r2, r2
    7e58:	0a83      	lsrs	r3, r0, #10
    7e5a:	428b      	cmp	r3, r1
    7e5c:	d301      	bcc.n	7e62 <__udivsi3+0x82>
    7e5e:	028b      	lsls	r3, r1, #10
    7e60:	1ac0      	subs	r0, r0, r3
    7e62:	4152      	adcs	r2, r2
    7e64:	0a43      	lsrs	r3, r0, #9
    7e66:	428b      	cmp	r3, r1
    7e68:	d301      	bcc.n	7e6e <__udivsi3+0x8e>
    7e6a:	024b      	lsls	r3, r1, #9
    7e6c:	1ac0      	subs	r0, r0, r3
    7e6e:	4152      	adcs	r2, r2
    7e70:	0a03      	lsrs	r3, r0, #8
    7e72:	428b      	cmp	r3, r1
    7e74:	d301      	bcc.n	7e7a <__udivsi3+0x9a>
    7e76:	020b      	lsls	r3, r1, #8
    7e78:	1ac0      	subs	r0, r0, r3
    7e7a:	4152      	adcs	r2, r2
    7e7c:	d2cd      	bcs.n	7e1a <__udivsi3+0x3a>
    7e7e:	09c3      	lsrs	r3, r0, #7
    7e80:	428b      	cmp	r3, r1
    7e82:	d301      	bcc.n	7e88 <__udivsi3+0xa8>
    7e84:	01cb      	lsls	r3, r1, #7
    7e86:	1ac0      	subs	r0, r0, r3
    7e88:	4152      	adcs	r2, r2
    7e8a:	0983      	lsrs	r3, r0, #6
    7e8c:	428b      	cmp	r3, r1
    7e8e:	d301      	bcc.n	7e94 <__udivsi3+0xb4>
    7e90:	018b      	lsls	r3, r1, #6
    7e92:	1ac0      	subs	r0, r0, r3
    7e94:	4152      	adcs	r2, r2
    7e96:	0943      	lsrs	r3, r0, #5
    7e98:	428b      	cmp	r3, r1
    7e9a:	d301      	bcc.n	7ea0 <__udivsi3+0xc0>
    7e9c:	014b      	lsls	r3, r1, #5
    7e9e:	1ac0      	subs	r0, r0, r3
    7ea0:	4152      	adcs	r2, r2
    7ea2:	0903      	lsrs	r3, r0, #4
    7ea4:	428b      	cmp	r3, r1
    7ea6:	d301      	bcc.n	7eac <__udivsi3+0xcc>
    7ea8:	010b      	lsls	r3, r1, #4
    7eaa:	1ac0      	subs	r0, r0, r3
    7eac:	4152      	adcs	r2, r2
    7eae:	08c3      	lsrs	r3, r0, #3
    7eb0:	428b      	cmp	r3, r1
    7eb2:	d301      	bcc.n	7eb8 <__udivsi3+0xd8>
    7eb4:	00cb      	lsls	r3, r1, #3
    7eb6:	1ac0      	subs	r0, r0, r3
    7eb8:	4152      	adcs	r2, r2
    7eba:	0883      	lsrs	r3, r0, #2
    7ebc:	428b      	cmp	r3, r1
    7ebe:	d301      	bcc.n	7ec4 <__udivsi3+0xe4>
    7ec0:	008b      	lsls	r3, r1, #2
    7ec2:	1ac0      	subs	r0, r0, r3
    7ec4:	4152      	adcs	r2, r2
    7ec6:	0843      	lsrs	r3, r0, #1
    7ec8:	428b      	cmp	r3, r1
    7eca:	d301      	bcc.n	7ed0 <__udivsi3+0xf0>
    7ecc:	004b      	lsls	r3, r1, #1
    7ece:	1ac0      	subs	r0, r0, r3
    7ed0:	4152      	adcs	r2, r2
    7ed2:	1a41      	subs	r1, r0, r1
    7ed4:	d200      	bcs.n	7ed8 <__udivsi3+0xf8>
    7ed6:	4601      	mov	r1, r0
    7ed8:	4152      	adcs	r2, r2
    7eda:	4610      	mov	r0, r2
    7edc:	4770      	bx	lr
    7ede:	e7ff      	b.n	7ee0 <__udivsi3+0x100>
    7ee0:	b501      	push	{r0, lr}
    7ee2:	2000      	movs	r0, #0
    7ee4:	f000 f8f0 	bl	80c8 <__aeabi_idiv0>
    7ee8:	bd02      	pop	{r1, pc}
    7eea:	46c0      	nop			; (mov r8, r8)

00007eec <__aeabi_uidivmod>:
    7eec:	2900      	cmp	r1, #0
    7eee:	d0f7      	beq.n	7ee0 <__udivsi3+0x100>
    7ef0:	e776      	b.n	7de0 <__udivsi3>
    7ef2:	4770      	bx	lr

00007ef4 <__divsi3>:
    7ef4:	4603      	mov	r3, r0
    7ef6:	430b      	orrs	r3, r1
    7ef8:	d47f      	bmi.n	7ffa <__divsi3+0x106>
    7efa:	2200      	movs	r2, #0
    7efc:	0843      	lsrs	r3, r0, #1
    7efe:	428b      	cmp	r3, r1
    7f00:	d374      	bcc.n	7fec <__divsi3+0xf8>
    7f02:	0903      	lsrs	r3, r0, #4
    7f04:	428b      	cmp	r3, r1
    7f06:	d35f      	bcc.n	7fc8 <__divsi3+0xd4>
    7f08:	0a03      	lsrs	r3, r0, #8
    7f0a:	428b      	cmp	r3, r1
    7f0c:	d344      	bcc.n	7f98 <__divsi3+0xa4>
    7f0e:	0b03      	lsrs	r3, r0, #12
    7f10:	428b      	cmp	r3, r1
    7f12:	d328      	bcc.n	7f66 <__divsi3+0x72>
    7f14:	0c03      	lsrs	r3, r0, #16
    7f16:	428b      	cmp	r3, r1
    7f18:	d30d      	bcc.n	7f36 <__divsi3+0x42>
    7f1a:	22ff      	movs	r2, #255	; 0xff
    7f1c:	0209      	lsls	r1, r1, #8
    7f1e:	ba12      	rev	r2, r2
    7f20:	0c03      	lsrs	r3, r0, #16
    7f22:	428b      	cmp	r3, r1
    7f24:	d302      	bcc.n	7f2c <__divsi3+0x38>
    7f26:	1212      	asrs	r2, r2, #8
    7f28:	0209      	lsls	r1, r1, #8
    7f2a:	d065      	beq.n	7ff8 <__divsi3+0x104>
    7f2c:	0b03      	lsrs	r3, r0, #12
    7f2e:	428b      	cmp	r3, r1
    7f30:	d319      	bcc.n	7f66 <__divsi3+0x72>
    7f32:	e000      	b.n	7f36 <__divsi3+0x42>
    7f34:	0a09      	lsrs	r1, r1, #8
    7f36:	0bc3      	lsrs	r3, r0, #15
    7f38:	428b      	cmp	r3, r1
    7f3a:	d301      	bcc.n	7f40 <__divsi3+0x4c>
    7f3c:	03cb      	lsls	r3, r1, #15
    7f3e:	1ac0      	subs	r0, r0, r3
    7f40:	4152      	adcs	r2, r2
    7f42:	0b83      	lsrs	r3, r0, #14
    7f44:	428b      	cmp	r3, r1
    7f46:	d301      	bcc.n	7f4c <__divsi3+0x58>
    7f48:	038b      	lsls	r3, r1, #14
    7f4a:	1ac0      	subs	r0, r0, r3
    7f4c:	4152      	adcs	r2, r2
    7f4e:	0b43      	lsrs	r3, r0, #13
    7f50:	428b      	cmp	r3, r1
    7f52:	d301      	bcc.n	7f58 <__divsi3+0x64>
    7f54:	034b      	lsls	r3, r1, #13
    7f56:	1ac0      	subs	r0, r0, r3
    7f58:	4152      	adcs	r2, r2
    7f5a:	0b03      	lsrs	r3, r0, #12
    7f5c:	428b      	cmp	r3, r1
    7f5e:	d301      	bcc.n	7f64 <__divsi3+0x70>
    7f60:	030b      	lsls	r3, r1, #12
    7f62:	1ac0      	subs	r0, r0, r3
    7f64:	4152      	adcs	r2, r2
    7f66:	0ac3      	lsrs	r3, r0, #11
    7f68:	428b      	cmp	r3, r1
    7f6a:	d301      	bcc.n	7f70 <__divsi3+0x7c>
    7f6c:	02cb      	lsls	r3, r1, #11
    7f6e:	1ac0      	subs	r0, r0, r3
    7f70:	4152      	adcs	r2, r2
    7f72:	0a83      	lsrs	r3, r0, #10
    7f74:	428b      	cmp	r3, r1
    7f76:	d301      	bcc.n	7f7c <__divsi3+0x88>
    7f78:	028b      	lsls	r3, r1, #10
    7f7a:	1ac0      	subs	r0, r0, r3
    7f7c:	4152      	adcs	r2, r2
    7f7e:	0a43      	lsrs	r3, r0, #9
    7f80:	428b      	cmp	r3, r1
    7f82:	d301      	bcc.n	7f88 <__divsi3+0x94>
    7f84:	024b      	lsls	r3, r1, #9
    7f86:	1ac0      	subs	r0, r0, r3
    7f88:	4152      	adcs	r2, r2
    7f8a:	0a03      	lsrs	r3, r0, #8
    7f8c:	428b      	cmp	r3, r1
    7f8e:	d301      	bcc.n	7f94 <__divsi3+0xa0>
    7f90:	020b      	lsls	r3, r1, #8
    7f92:	1ac0      	subs	r0, r0, r3
    7f94:	4152      	adcs	r2, r2
    7f96:	d2cd      	bcs.n	7f34 <__divsi3+0x40>
    7f98:	09c3      	lsrs	r3, r0, #7
    7f9a:	428b      	cmp	r3, r1
    7f9c:	d301      	bcc.n	7fa2 <__divsi3+0xae>
    7f9e:	01cb      	lsls	r3, r1, #7
    7fa0:	1ac0      	subs	r0, r0, r3
    7fa2:	4152      	adcs	r2, r2
    7fa4:	0983      	lsrs	r3, r0, #6
    7fa6:	428b      	cmp	r3, r1
    7fa8:	d301      	bcc.n	7fae <__divsi3+0xba>
    7faa:	018b      	lsls	r3, r1, #6
    7fac:	1ac0      	subs	r0, r0, r3
    7fae:	4152      	adcs	r2, r2
    7fb0:	0943      	lsrs	r3, r0, #5
    7fb2:	428b      	cmp	r3, r1
    7fb4:	d301      	bcc.n	7fba <__divsi3+0xc6>
    7fb6:	014b      	lsls	r3, r1, #5
    7fb8:	1ac0      	subs	r0, r0, r3
    7fba:	4152      	adcs	r2, r2
    7fbc:	0903      	lsrs	r3, r0, #4
    7fbe:	428b      	cmp	r3, r1
    7fc0:	d301      	bcc.n	7fc6 <__divsi3+0xd2>
    7fc2:	010b      	lsls	r3, r1, #4
    7fc4:	1ac0      	subs	r0, r0, r3
    7fc6:	4152      	adcs	r2, r2
    7fc8:	08c3      	lsrs	r3, r0, #3
    7fca:	428b      	cmp	r3, r1
    7fcc:	d301      	bcc.n	7fd2 <__divsi3+0xde>
    7fce:	00cb      	lsls	r3, r1, #3
    7fd0:	1ac0      	subs	r0, r0, r3
    7fd2:	4152      	adcs	r2, r2
    7fd4:	0883      	lsrs	r3, r0, #2
    7fd6:	428b      	cmp	r3, r1
    7fd8:	d301      	bcc.n	7fde <__divsi3+0xea>
    7fda:	008b      	lsls	r3, r1, #2
    7fdc:	1ac0      	subs	r0, r0, r3
    7fde:	4152      	adcs	r2, r2
    7fe0:	0843      	lsrs	r3, r0, #1
    7fe2:	428b      	cmp	r3, r1
    7fe4:	d301      	bcc.n	7fea <__divsi3+0xf6>
    7fe6:	004b      	lsls	r3, r1, #1
    7fe8:	1ac0      	subs	r0, r0, r3
    7fea:	4152      	adcs	r2, r2
    7fec:	1a41      	subs	r1, r0, r1
    7fee:	d200      	bcs.n	7ff2 <__divsi3+0xfe>
    7ff0:	4601      	mov	r1, r0
    7ff2:	4152      	adcs	r2, r2
    7ff4:	4610      	mov	r0, r2
    7ff6:	4770      	bx	lr
    7ff8:	e05d      	b.n	80b6 <__divsi3+0x1c2>
    7ffa:	0fca      	lsrs	r2, r1, #31
    7ffc:	d000      	beq.n	8000 <__divsi3+0x10c>
    7ffe:	4249      	negs	r1, r1
    8000:	1003      	asrs	r3, r0, #32
    8002:	d300      	bcc.n	8006 <__divsi3+0x112>
    8004:	4240      	negs	r0, r0
    8006:	4053      	eors	r3, r2
    8008:	2200      	movs	r2, #0
    800a:	469c      	mov	ip, r3
    800c:	0903      	lsrs	r3, r0, #4
    800e:	428b      	cmp	r3, r1
    8010:	d32d      	bcc.n	806e <__divsi3+0x17a>
    8012:	0a03      	lsrs	r3, r0, #8
    8014:	428b      	cmp	r3, r1
    8016:	d312      	bcc.n	803e <__divsi3+0x14a>
    8018:	22fc      	movs	r2, #252	; 0xfc
    801a:	0189      	lsls	r1, r1, #6
    801c:	ba12      	rev	r2, r2
    801e:	0a03      	lsrs	r3, r0, #8
    8020:	428b      	cmp	r3, r1
    8022:	d30c      	bcc.n	803e <__divsi3+0x14a>
    8024:	0189      	lsls	r1, r1, #6
    8026:	1192      	asrs	r2, r2, #6
    8028:	428b      	cmp	r3, r1
    802a:	d308      	bcc.n	803e <__divsi3+0x14a>
    802c:	0189      	lsls	r1, r1, #6
    802e:	1192      	asrs	r2, r2, #6
    8030:	428b      	cmp	r3, r1
    8032:	d304      	bcc.n	803e <__divsi3+0x14a>
    8034:	0189      	lsls	r1, r1, #6
    8036:	d03a      	beq.n	80ae <__divsi3+0x1ba>
    8038:	1192      	asrs	r2, r2, #6
    803a:	e000      	b.n	803e <__divsi3+0x14a>
    803c:	0989      	lsrs	r1, r1, #6
    803e:	09c3      	lsrs	r3, r0, #7
    8040:	428b      	cmp	r3, r1
    8042:	d301      	bcc.n	8048 <__divsi3+0x154>
    8044:	01cb      	lsls	r3, r1, #7
    8046:	1ac0      	subs	r0, r0, r3
    8048:	4152      	adcs	r2, r2
    804a:	0983      	lsrs	r3, r0, #6
    804c:	428b      	cmp	r3, r1
    804e:	d301      	bcc.n	8054 <__divsi3+0x160>
    8050:	018b      	lsls	r3, r1, #6
    8052:	1ac0      	subs	r0, r0, r3
    8054:	4152      	adcs	r2, r2
    8056:	0943      	lsrs	r3, r0, #5
    8058:	428b      	cmp	r3, r1
    805a:	d301      	bcc.n	8060 <__divsi3+0x16c>
    805c:	014b      	lsls	r3, r1, #5
    805e:	1ac0      	subs	r0, r0, r3
    8060:	4152      	adcs	r2, r2
    8062:	0903      	lsrs	r3, r0, #4
    8064:	428b      	cmp	r3, r1
    8066:	d301      	bcc.n	806c <__divsi3+0x178>
    8068:	010b      	lsls	r3, r1, #4
    806a:	1ac0      	subs	r0, r0, r3
    806c:	4152      	adcs	r2, r2
    806e:	08c3      	lsrs	r3, r0, #3
    8070:	428b      	cmp	r3, r1
    8072:	d301      	bcc.n	8078 <__divsi3+0x184>
    8074:	00cb      	lsls	r3, r1, #3
    8076:	1ac0      	subs	r0, r0, r3
    8078:	4152      	adcs	r2, r2
    807a:	0883      	lsrs	r3, r0, #2
    807c:	428b      	cmp	r3, r1
    807e:	d301      	bcc.n	8084 <__divsi3+0x190>
    8080:	008b      	lsls	r3, r1, #2
    8082:	1ac0      	subs	r0, r0, r3
    8084:	4152      	adcs	r2, r2
    8086:	d2d9      	bcs.n	803c <__divsi3+0x148>
    8088:	0843      	lsrs	r3, r0, #1
    808a:	428b      	cmp	r3, r1
    808c:	d301      	bcc.n	8092 <__divsi3+0x19e>
    808e:	004b      	lsls	r3, r1, #1
    8090:	1ac0      	subs	r0, r0, r3
    8092:	4152      	adcs	r2, r2
    8094:	1a41      	subs	r1, r0, r1
    8096:	d200      	bcs.n	809a <__divsi3+0x1a6>
    8098:	4601      	mov	r1, r0
    809a:	4663      	mov	r3, ip
    809c:	4152      	adcs	r2, r2
    809e:	105b      	asrs	r3, r3, #1
    80a0:	4610      	mov	r0, r2
    80a2:	d301      	bcc.n	80a8 <__divsi3+0x1b4>
    80a4:	4240      	negs	r0, r0
    80a6:	2b00      	cmp	r3, #0
    80a8:	d500      	bpl.n	80ac <__divsi3+0x1b8>
    80aa:	4249      	negs	r1, r1
    80ac:	4770      	bx	lr
    80ae:	4663      	mov	r3, ip
    80b0:	105b      	asrs	r3, r3, #1
    80b2:	d300      	bcc.n	80b6 <__divsi3+0x1c2>
    80b4:	4240      	negs	r0, r0
    80b6:	b501      	push	{r0, lr}
    80b8:	2000      	movs	r0, #0
    80ba:	f000 f805 	bl	80c8 <__aeabi_idiv0>
    80be:	bd02      	pop	{r1, pc}

000080c0 <__aeabi_idivmod>:
    80c0:	2900      	cmp	r1, #0
    80c2:	d0f8      	beq.n	80b6 <__divsi3+0x1c2>
    80c4:	e716      	b.n	7ef4 <__divsi3>
    80c6:	4770      	bx	lr

000080c8 <__aeabi_idiv0>:
    80c8:	4770      	bx	lr
    80ca:	46c0      	nop			; (mov r8, r8)

000080cc <__aeabi_lmul>:
    80cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    80ce:	46ce      	mov	lr, r9
    80d0:	4647      	mov	r7, r8
    80d2:	0415      	lsls	r5, r2, #16
    80d4:	0c2d      	lsrs	r5, r5, #16
    80d6:	002e      	movs	r6, r5
    80d8:	b580      	push	{r7, lr}
    80da:	0407      	lsls	r7, r0, #16
    80dc:	0c14      	lsrs	r4, r2, #16
    80de:	0c3f      	lsrs	r7, r7, #16
    80e0:	4699      	mov	r9, r3
    80e2:	0c03      	lsrs	r3, r0, #16
    80e4:	437e      	muls	r6, r7
    80e6:	435d      	muls	r5, r3
    80e8:	4367      	muls	r7, r4
    80ea:	4363      	muls	r3, r4
    80ec:	197f      	adds	r7, r7, r5
    80ee:	0c34      	lsrs	r4, r6, #16
    80f0:	19e4      	adds	r4, r4, r7
    80f2:	469c      	mov	ip, r3
    80f4:	42a5      	cmp	r5, r4
    80f6:	d903      	bls.n	8100 <__aeabi_lmul+0x34>
    80f8:	2380      	movs	r3, #128	; 0x80
    80fa:	025b      	lsls	r3, r3, #9
    80fc:	4698      	mov	r8, r3
    80fe:	44c4      	add	ip, r8
    8100:	464b      	mov	r3, r9
    8102:	4351      	muls	r1, r2
    8104:	4343      	muls	r3, r0
    8106:	0436      	lsls	r6, r6, #16
    8108:	0c36      	lsrs	r6, r6, #16
    810a:	0c25      	lsrs	r5, r4, #16
    810c:	0424      	lsls	r4, r4, #16
    810e:	4465      	add	r5, ip
    8110:	19a4      	adds	r4, r4, r6
    8112:	1859      	adds	r1, r3, r1
    8114:	1949      	adds	r1, r1, r5
    8116:	0020      	movs	r0, r4
    8118:	bc0c      	pop	{r2, r3}
    811a:	4690      	mov	r8, r2
    811c:	4699      	mov	r9, r3
    811e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008120 <__libc_init_array>:
    8120:	b570      	push	{r4, r5, r6, lr}
    8122:	2600      	movs	r6, #0
    8124:	4d0c      	ldr	r5, [pc, #48]	; (8158 <__libc_init_array+0x38>)
    8126:	4c0d      	ldr	r4, [pc, #52]	; (815c <__libc_init_array+0x3c>)
    8128:	1b64      	subs	r4, r4, r5
    812a:	10a4      	asrs	r4, r4, #2
    812c:	42a6      	cmp	r6, r4
    812e:	d109      	bne.n	8144 <__libc_init_array+0x24>
    8130:	2600      	movs	r6, #0
    8132:	f002 fba7 	bl	a884 <_init>
    8136:	4d0a      	ldr	r5, [pc, #40]	; (8160 <__libc_init_array+0x40>)
    8138:	4c0a      	ldr	r4, [pc, #40]	; (8164 <__libc_init_array+0x44>)
    813a:	1b64      	subs	r4, r4, r5
    813c:	10a4      	asrs	r4, r4, #2
    813e:	42a6      	cmp	r6, r4
    8140:	d105      	bne.n	814e <__libc_init_array+0x2e>
    8142:	bd70      	pop	{r4, r5, r6, pc}
    8144:	00b3      	lsls	r3, r6, #2
    8146:	58eb      	ldr	r3, [r5, r3]
    8148:	4798      	blx	r3
    814a:	3601      	adds	r6, #1
    814c:	e7ee      	b.n	812c <__libc_init_array+0xc>
    814e:	00b3      	lsls	r3, r6, #2
    8150:	58eb      	ldr	r3, [r5, r3]
    8152:	4798      	blx	r3
    8154:	3601      	adds	r6, #1
    8156:	e7f2      	b.n	813e <__libc_init_array+0x1e>
    8158:	0000a890 	.word	0x0000a890
    815c:	0000a890 	.word	0x0000a890
    8160:	0000a890 	.word	0x0000a890
    8164:	0000a894 	.word	0x0000a894

00008168 <memcpy>:
    8168:	2300      	movs	r3, #0
    816a:	b510      	push	{r4, lr}
    816c:	429a      	cmp	r2, r3
    816e:	d100      	bne.n	8172 <memcpy+0xa>
    8170:	bd10      	pop	{r4, pc}
    8172:	5ccc      	ldrb	r4, [r1, r3]
    8174:	54c4      	strb	r4, [r0, r3]
    8176:	3301      	adds	r3, #1
    8178:	e7f8      	b.n	816c <memcpy+0x4>

0000817a <memset>:
    817a:	0003      	movs	r3, r0
    817c:	1882      	adds	r2, r0, r2
    817e:	4293      	cmp	r3, r2
    8180:	d100      	bne.n	8184 <memset+0xa>
    8182:	4770      	bx	lr
    8184:	7019      	strb	r1, [r3, #0]
    8186:	3301      	adds	r3, #1
    8188:	e7f9      	b.n	817e <memset+0x4>
	...

0000818c <iprintf>:
    818c:	b40f      	push	{r0, r1, r2, r3}
    818e:	4b0b      	ldr	r3, [pc, #44]	; (81bc <iprintf+0x30>)
    8190:	b513      	push	{r0, r1, r4, lr}
    8192:	681c      	ldr	r4, [r3, #0]
    8194:	2c00      	cmp	r4, #0
    8196:	d005      	beq.n	81a4 <iprintf+0x18>
    8198:	69a3      	ldr	r3, [r4, #24]
    819a:	2b00      	cmp	r3, #0
    819c:	d102      	bne.n	81a4 <iprintf+0x18>
    819e:	0020      	movs	r0, r4
    81a0:	f000 fb9a 	bl	88d8 <__sinit>
    81a4:	ab05      	add	r3, sp, #20
    81a6:	9a04      	ldr	r2, [sp, #16]
    81a8:	68a1      	ldr	r1, [r4, #8]
    81aa:	0020      	movs	r0, r4
    81ac:	9301      	str	r3, [sp, #4]
    81ae:	f000 fd6f 	bl	8c90 <_vfiprintf_r>
    81b2:	bc16      	pop	{r1, r2, r4}
    81b4:	bc08      	pop	{r3}
    81b6:	b004      	add	sp, #16
    81b8:	4718      	bx	r3
    81ba:	46c0      	nop			; (mov r8, r8)
    81bc:	20000010 	.word	0x20000010

000081c0 <putchar>:
    81c0:	4b08      	ldr	r3, [pc, #32]	; (81e4 <putchar+0x24>)
    81c2:	b570      	push	{r4, r5, r6, lr}
    81c4:	681c      	ldr	r4, [r3, #0]
    81c6:	0005      	movs	r5, r0
    81c8:	2c00      	cmp	r4, #0
    81ca:	d005      	beq.n	81d8 <putchar+0x18>
    81cc:	69a3      	ldr	r3, [r4, #24]
    81ce:	2b00      	cmp	r3, #0
    81d0:	d102      	bne.n	81d8 <putchar+0x18>
    81d2:	0020      	movs	r0, r4
    81d4:	f000 fb80 	bl	88d8 <__sinit>
    81d8:	0029      	movs	r1, r5
    81da:	68a2      	ldr	r2, [r4, #8]
    81dc:	0020      	movs	r0, r4
    81de:	f000 fffb 	bl	91d8 <_putc_r>
    81e2:	bd70      	pop	{r4, r5, r6, pc}
    81e4:	20000010 	.word	0x20000010

000081e8 <_puts_r>:
    81e8:	b570      	push	{r4, r5, r6, lr}
    81ea:	0005      	movs	r5, r0
    81ec:	000e      	movs	r6, r1
    81ee:	2800      	cmp	r0, #0
    81f0:	d004      	beq.n	81fc <_puts_r+0x14>
    81f2:	6983      	ldr	r3, [r0, #24]
    81f4:	2b00      	cmp	r3, #0
    81f6:	d101      	bne.n	81fc <_puts_r+0x14>
    81f8:	f000 fb6e 	bl	88d8 <__sinit>
    81fc:	69ab      	ldr	r3, [r5, #24]
    81fe:	68ac      	ldr	r4, [r5, #8]
    8200:	2b00      	cmp	r3, #0
    8202:	d102      	bne.n	820a <_puts_r+0x22>
    8204:	0028      	movs	r0, r5
    8206:	f000 fb67 	bl	88d8 <__sinit>
    820a:	4b24      	ldr	r3, [pc, #144]	; (829c <_puts_r+0xb4>)
    820c:	429c      	cmp	r4, r3
    820e:	d10f      	bne.n	8230 <_puts_r+0x48>
    8210:	686c      	ldr	r4, [r5, #4]
    8212:	89a3      	ldrh	r3, [r4, #12]
    8214:	071b      	lsls	r3, r3, #28
    8216:	d502      	bpl.n	821e <_puts_r+0x36>
    8218:	6923      	ldr	r3, [r4, #16]
    821a:	2b00      	cmp	r3, #0
    821c:	d120      	bne.n	8260 <_puts_r+0x78>
    821e:	0021      	movs	r1, r4
    8220:	0028      	movs	r0, r5
    8222:	f000 f9eb 	bl	85fc <__swsetup_r>
    8226:	2800      	cmp	r0, #0
    8228:	d01a      	beq.n	8260 <_puts_r+0x78>
    822a:	2001      	movs	r0, #1
    822c:	4240      	negs	r0, r0
    822e:	bd70      	pop	{r4, r5, r6, pc}
    8230:	4b1b      	ldr	r3, [pc, #108]	; (82a0 <_puts_r+0xb8>)
    8232:	429c      	cmp	r4, r3
    8234:	d101      	bne.n	823a <_puts_r+0x52>
    8236:	68ac      	ldr	r4, [r5, #8]
    8238:	e7eb      	b.n	8212 <_puts_r+0x2a>
    823a:	4b1a      	ldr	r3, [pc, #104]	; (82a4 <_puts_r+0xbc>)
    823c:	429c      	cmp	r4, r3
    823e:	d1e8      	bne.n	8212 <_puts_r+0x2a>
    8240:	68ec      	ldr	r4, [r5, #12]
    8242:	e7e6      	b.n	8212 <_puts_r+0x2a>
    8244:	3b01      	subs	r3, #1
    8246:	3601      	adds	r6, #1
    8248:	60a3      	str	r3, [r4, #8]
    824a:	2b00      	cmp	r3, #0
    824c:	da04      	bge.n	8258 <_puts_r+0x70>
    824e:	69a2      	ldr	r2, [r4, #24]
    8250:	4293      	cmp	r3, r2
    8252:	db16      	blt.n	8282 <_puts_r+0x9a>
    8254:	290a      	cmp	r1, #10
    8256:	d014      	beq.n	8282 <_puts_r+0x9a>
    8258:	6823      	ldr	r3, [r4, #0]
    825a:	1c5a      	adds	r2, r3, #1
    825c:	6022      	str	r2, [r4, #0]
    825e:	7019      	strb	r1, [r3, #0]
    8260:	7831      	ldrb	r1, [r6, #0]
    8262:	68a3      	ldr	r3, [r4, #8]
    8264:	2900      	cmp	r1, #0
    8266:	d1ed      	bne.n	8244 <_puts_r+0x5c>
    8268:	3b01      	subs	r3, #1
    826a:	60a3      	str	r3, [r4, #8]
    826c:	2b00      	cmp	r3, #0
    826e:	da0f      	bge.n	8290 <_puts_r+0xa8>
    8270:	0022      	movs	r2, r4
    8272:	310a      	adds	r1, #10
    8274:	0028      	movs	r0, r5
    8276:	f000 f96b 	bl	8550 <__swbuf_r>
    827a:	1c43      	adds	r3, r0, #1
    827c:	d0d5      	beq.n	822a <_puts_r+0x42>
    827e:	200a      	movs	r0, #10
    8280:	e7d5      	b.n	822e <_puts_r+0x46>
    8282:	0022      	movs	r2, r4
    8284:	0028      	movs	r0, r5
    8286:	f000 f963 	bl	8550 <__swbuf_r>
    828a:	1c43      	adds	r3, r0, #1
    828c:	d1e8      	bne.n	8260 <_puts_r+0x78>
    828e:	e7cc      	b.n	822a <_puts_r+0x42>
    8290:	200a      	movs	r0, #10
    8292:	6823      	ldr	r3, [r4, #0]
    8294:	1c5a      	adds	r2, r3, #1
    8296:	6022      	str	r2, [r4, #0]
    8298:	7018      	strb	r0, [r3, #0]
    829a:	e7c8      	b.n	822e <_puts_r+0x46>
    829c:	0000a810 	.word	0x0000a810
    82a0:	0000a830 	.word	0x0000a830
    82a4:	0000a7f0 	.word	0x0000a7f0

000082a8 <puts>:
    82a8:	b510      	push	{r4, lr}
    82aa:	4b03      	ldr	r3, [pc, #12]	; (82b8 <puts+0x10>)
    82ac:	0001      	movs	r1, r0
    82ae:	6818      	ldr	r0, [r3, #0]
    82b0:	f7ff ff9a 	bl	81e8 <_puts_r>
    82b4:	bd10      	pop	{r4, pc}
    82b6:	46c0      	nop			; (mov r8, r8)
    82b8:	20000010 	.word	0x20000010

000082bc <srand>:
    82bc:	4b10      	ldr	r3, [pc, #64]	; (8300 <srand+0x44>)
    82be:	b570      	push	{r4, r5, r6, lr}
    82c0:	681c      	ldr	r4, [r3, #0]
    82c2:	0005      	movs	r5, r0
    82c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    82c6:	2b00      	cmp	r3, #0
    82c8:	d115      	bne.n	82f6 <srand+0x3a>
    82ca:	2018      	movs	r0, #24
    82cc:	f000 fc06 	bl	8adc <malloc>
    82d0:	4b0c      	ldr	r3, [pc, #48]	; (8304 <srand+0x48>)
    82d2:	63a0      	str	r0, [r4, #56]	; 0x38
    82d4:	8003      	strh	r3, [r0, #0]
    82d6:	4b0c      	ldr	r3, [pc, #48]	; (8308 <srand+0x4c>)
    82d8:	2201      	movs	r2, #1
    82da:	8043      	strh	r3, [r0, #2]
    82dc:	4b0b      	ldr	r3, [pc, #44]	; (830c <srand+0x50>)
    82de:	8083      	strh	r3, [r0, #4]
    82e0:	4b0b      	ldr	r3, [pc, #44]	; (8310 <srand+0x54>)
    82e2:	80c3      	strh	r3, [r0, #6]
    82e4:	4b0b      	ldr	r3, [pc, #44]	; (8314 <srand+0x58>)
    82e6:	8103      	strh	r3, [r0, #8]
    82e8:	2305      	movs	r3, #5
    82ea:	8143      	strh	r3, [r0, #10]
    82ec:	3306      	adds	r3, #6
    82ee:	8183      	strh	r3, [r0, #12]
    82f0:	2300      	movs	r3, #0
    82f2:	6102      	str	r2, [r0, #16]
    82f4:	6143      	str	r3, [r0, #20]
    82f6:	2200      	movs	r2, #0
    82f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    82fa:	611d      	str	r5, [r3, #16]
    82fc:	615a      	str	r2, [r3, #20]
    82fe:	bd70      	pop	{r4, r5, r6, pc}
    8300:	20000010 	.word	0x20000010
    8304:	0000330e 	.word	0x0000330e
    8308:	ffffabcd 	.word	0xffffabcd
    830c:	00001234 	.word	0x00001234
    8310:	ffffe66d 	.word	0xffffe66d
    8314:	ffffdeec 	.word	0xffffdeec

00008318 <rand>:
    8318:	4b15      	ldr	r3, [pc, #84]	; (8370 <rand+0x58>)
    831a:	b510      	push	{r4, lr}
    831c:	681c      	ldr	r4, [r3, #0]
    831e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8320:	2b00      	cmp	r3, #0
    8322:	d115      	bne.n	8350 <rand+0x38>
    8324:	2018      	movs	r0, #24
    8326:	f000 fbd9 	bl	8adc <malloc>
    832a:	4b12      	ldr	r3, [pc, #72]	; (8374 <rand+0x5c>)
    832c:	63a0      	str	r0, [r4, #56]	; 0x38
    832e:	8003      	strh	r3, [r0, #0]
    8330:	4b11      	ldr	r3, [pc, #68]	; (8378 <rand+0x60>)
    8332:	2201      	movs	r2, #1
    8334:	8043      	strh	r3, [r0, #2]
    8336:	4b11      	ldr	r3, [pc, #68]	; (837c <rand+0x64>)
    8338:	8083      	strh	r3, [r0, #4]
    833a:	4b11      	ldr	r3, [pc, #68]	; (8380 <rand+0x68>)
    833c:	80c3      	strh	r3, [r0, #6]
    833e:	4b11      	ldr	r3, [pc, #68]	; (8384 <rand+0x6c>)
    8340:	8103      	strh	r3, [r0, #8]
    8342:	2305      	movs	r3, #5
    8344:	8143      	strh	r3, [r0, #10]
    8346:	3306      	adds	r3, #6
    8348:	8183      	strh	r3, [r0, #12]
    834a:	2300      	movs	r3, #0
    834c:	6102      	str	r2, [r0, #16]
    834e:	6143      	str	r3, [r0, #20]
    8350:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    8352:	4a0d      	ldr	r2, [pc, #52]	; (8388 <rand+0x70>)
    8354:	6920      	ldr	r0, [r4, #16]
    8356:	6961      	ldr	r1, [r4, #20]
    8358:	4b0c      	ldr	r3, [pc, #48]	; (838c <rand+0x74>)
    835a:	f7ff feb7 	bl	80cc <__aeabi_lmul>
    835e:	2201      	movs	r2, #1
    8360:	2300      	movs	r3, #0
    8362:	1880      	adds	r0, r0, r2
    8364:	4159      	adcs	r1, r3
    8366:	6120      	str	r0, [r4, #16]
    8368:	6161      	str	r1, [r4, #20]
    836a:	0048      	lsls	r0, r1, #1
    836c:	0840      	lsrs	r0, r0, #1
    836e:	bd10      	pop	{r4, pc}
    8370:	20000010 	.word	0x20000010
    8374:	0000330e 	.word	0x0000330e
    8378:	ffffabcd 	.word	0xffffabcd
    837c:	00001234 	.word	0x00001234
    8380:	ffffe66d 	.word	0xffffe66d
    8384:	ffffdeec 	.word	0xffffdeec
    8388:	4c957f2d 	.word	0x4c957f2d
    838c:	5851f42d 	.word	0x5851f42d

00008390 <setbuf>:
    8390:	424a      	negs	r2, r1
    8392:	414a      	adcs	r2, r1
    8394:	2380      	movs	r3, #128	; 0x80
    8396:	b510      	push	{r4, lr}
    8398:	0052      	lsls	r2, r2, #1
    839a:	00db      	lsls	r3, r3, #3
    839c:	f000 f802 	bl	83a4 <setvbuf>
    83a0:	bd10      	pop	{r4, pc}
	...

000083a4 <setvbuf>:
    83a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    83a6:	001d      	movs	r5, r3
    83a8:	4b4f      	ldr	r3, [pc, #316]	; (84e8 <setvbuf+0x144>)
    83aa:	b085      	sub	sp, #20
    83ac:	681e      	ldr	r6, [r3, #0]
    83ae:	0004      	movs	r4, r0
    83b0:	000f      	movs	r7, r1
    83b2:	9200      	str	r2, [sp, #0]
    83b4:	2e00      	cmp	r6, #0
    83b6:	d005      	beq.n	83c4 <setvbuf+0x20>
    83b8:	69b3      	ldr	r3, [r6, #24]
    83ba:	2b00      	cmp	r3, #0
    83bc:	d102      	bne.n	83c4 <setvbuf+0x20>
    83be:	0030      	movs	r0, r6
    83c0:	f000 fa8a 	bl	88d8 <__sinit>
    83c4:	4b49      	ldr	r3, [pc, #292]	; (84ec <setvbuf+0x148>)
    83c6:	429c      	cmp	r4, r3
    83c8:	d150      	bne.n	846c <setvbuf+0xc8>
    83ca:	6874      	ldr	r4, [r6, #4]
    83cc:	9b00      	ldr	r3, [sp, #0]
    83ce:	2b02      	cmp	r3, #2
    83d0:	d005      	beq.n	83de <setvbuf+0x3a>
    83d2:	2b01      	cmp	r3, #1
    83d4:	d900      	bls.n	83d8 <setvbuf+0x34>
    83d6:	e084      	b.n	84e2 <setvbuf+0x13e>
    83d8:	2d00      	cmp	r5, #0
    83da:	da00      	bge.n	83de <setvbuf+0x3a>
    83dc:	e081      	b.n	84e2 <setvbuf+0x13e>
    83de:	0021      	movs	r1, r4
    83e0:	0030      	movs	r0, r6
    83e2:	f000 fa0b 	bl	87fc <_fflush_r>
    83e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    83e8:	2900      	cmp	r1, #0
    83ea:	d008      	beq.n	83fe <setvbuf+0x5a>
    83ec:	0023      	movs	r3, r4
    83ee:	3344      	adds	r3, #68	; 0x44
    83f0:	4299      	cmp	r1, r3
    83f2:	d002      	beq.n	83fa <setvbuf+0x56>
    83f4:	0030      	movs	r0, r6
    83f6:	f000 fb7b 	bl	8af0 <_free_r>
    83fa:	2300      	movs	r3, #0
    83fc:	6363      	str	r3, [r4, #52]	; 0x34
    83fe:	2300      	movs	r3, #0
    8400:	61a3      	str	r3, [r4, #24]
    8402:	6063      	str	r3, [r4, #4]
    8404:	89a3      	ldrh	r3, [r4, #12]
    8406:	061b      	lsls	r3, r3, #24
    8408:	d503      	bpl.n	8412 <setvbuf+0x6e>
    840a:	6921      	ldr	r1, [r4, #16]
    840c:	0030      	movs	r0, r6
    840e:	f000 fb6f 	bl	8af0 <_free_r>
    8412:	89a3      	ldrh	r3, [r4, #12]
    8414:	4a36      	ldr	r2, [pc, #216]	; (84f0 <setvbuf+0x14c>)
    8416:	4013      	ands	r3, r2
    8418:	81a3      	strh	r3, [r4, #12]
    841a:	9b00      	ldr	r3, [sp, #0]
    841c:	2b02      	cmp	r3, #2
    841e:	d05a      	beq.n	84d6 <setvbuf+0x132>
    8420:	ab03      	add	r3, sp, #12
    8422:	aa02      	add	r2, sp, #8
    8424:	0021      	movs	r1, r4
    8426:	0030      	movs	r0, r6
    8428:	f000 faec 	bl	8a04 <__swhatbuf_r>
    842c:	89a3      	ldrh	r3, [r4, #12]
    842e:	4318      	orrs	r0, r3
    8430:	81a0      	strh	r0, [r4, #12]
    8432:	2d00      	cmp	r5, #0
    8434:	d124      	bne.n	8480 <setvbuf+0xdc>
    8436:	9d02      	ldr	r5, [sp, #8]
    8438:	0028      	movs	r0, r5
    843a:	f000 fb4f 	bl	8adc <malloc>
    843e:	9501      	str	r5, [sp, #4]
    8440:	1e07      	subs	r7, r0, #0
    8442:	d142      	bne.n	84ca <setvbuf+0x126>
    8444:	9b02      	ldr	r3, [sp, #8]
    8446:	9301      	str	r3, [sp, #4]
    8448:	42ab      	cmp	r3, r5
    844a:	d139      	bne.n	84c0 <setvbuf+0x11c>
    844c:	2001      	movs	r0, #1
    844e:	4240      	negs	r0, r0
    8450:	2302      	movs	r3, #2
    8452:	89a2      	ldrh	r2, [r4, #12]
    8454:	4313      	orrs	r3, r2
    8456:	81a3      	strh	r3, [r4, #12]
    8458:	2300      	movs	r3, #0
    845a:	60a3      	str	r3, [r4, #8]
    845c:	0023      	movs	r3, r4
    845e:	3347      	adds	r3, #71	; 0x47
    8460:	6023      	str	r3, [r4, #0]
    8462:	6123      	str	r3, [r4, #16]
    8464:	2301      	movs	r3, #1
    8466:	6163      	str	r3, [r4, #20]
    8468:	b005      	add	sp, #20
    846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    846c:	4b21      	ldr	r3, [pc, #132]	; (84f4 <setvbuf+0x150>)
    846e:	429c      	cmp	r4, r3
    8470:	d101      	bne.n	8476 <setvbuf+0xd2>
    8472:	68b4      	ldr	r4, [r6, #8]
    8474:	e7aa      	b.n	83cc <setvbuf+0x28>
    8476:	4b20      	ldr	r3, [pc, #128]	; (84f8 <setvbuf+0x154>)
    8478:	429c      	cmp	r4, r3
    847a:	d1a7      	bne.n	83cc <setvbuf+0x28>
    847c:	68f4      	ldr	r4, [r6, #12]
    847e:	e7a5      	b.n	83cc <setvbuf+0x28>
    8480:	2f00      	cmp	r7, #0
    8482:	d0d9      	beq.n	8438 <setvbuf+0x94>
    8484:	69b3      	ldr	r3, [r6, #24]
    8486:	2b00      	cmp	r3, #0
    8488:	d102      	bne.n	8490 <setvbuf+0xec>
    848a:	0030      	movs	r0, r6
    848c:	f000 fa24 	bl	88d8 <__sinit>
    8490:	9b00      	ldr	r3, [sp, #0]
    8492:	2b01      	cmp	r3, #1
    8494:	d103      	bne.n	849e <setvbuf+0xfa>
    8496:	89a3      	ldrh	r3, [r4, #12]
    8498:	9a00      	ldr	r2, [sp, #0]
    849a:	431a      	orrs	r2, r3
    849c:	81a2      	strh	r2, [r4, #12]
    849e:	2008      	movs	r0, #8
    84a0:	89a3      	ldrh	r3, [r4, #12]
    84a2:	6027      	str	r7, [r4, #0]
    84a4:	6127      	str	r7, [r4, #16]
    84a6:	6165      	str	r5, [r4, #20]
    84a8:	4018      	ands	r0, r3
    84aa:	d018      	beq.n	84de <setvbuf+0x13a>
    84ac:	2001      	movs	r0, #1
    84ae:	4018      	ands	r0, r3
    84b0:	2300      	movs	r3, #0
    84b2:	4298      	cmp	r0, r3
    84b4:	d011      	beq.n	84da <setvbuf+0x136>
    84b6:	426d      	negs	r5, r5
    84b8:	60a3      	str	r3, [r4, #8]
    84ba:	61a5      	str	r5, [r4, #24]
    84bc:	0018      	movs	r0, r3
    84be:	e7d3      	b.n	8468 <setvbuf+0xc4>
    84c0:	9801      	ldr	r0, [sp, #4]
    84c2:	f000 fb0b 	bl	8adc <malloc>
    84c6:	1e07      	subs	r7, r0, #0
    84c8:	d0c0      	beq.n	844c <setvbuf+0xa8>
    84ca:	2380      	movs	r3, #128	; 0x80
    84cc:	89a2      	ldrh	r2, [r4, #12]
    84ce:	9d01      	ldr	r5, [sp, #4]
    84d0:	4313      	orrs	r3, r2
    84d2:	81a3      	strh	r3, [r4, #12]
    84d4:	e7d6      	b.n	8484 <setvbuf+0xe0>
    84d6:	2000      	movs	r0, #0
    84d8:	e7ba      	b.n	8450 <setvbuf+0xac>
    84da:	60a5      	str	r5, [r4, #8]
    84dc:	e7c4      	b.n	8468 <setvbuf+0xc4>
    84de:	60a0      	str	r0, [r4, #8]
    84e0:	e7c2      	b.n	8468 <setvbuf+0xc4>
    84e2:	2001      	movs	r0, #1
    84e4:	4240      	negs	r0, r0
    84e6:	e7bf      	b.n	8468 <setvbuf+0xc4>
    84e8:	20000010 	.word	0x20000010
    84ec:	0000a810 	.word	0x0000a810
    84f0:	fffff35c 	.word	0xfffff35c
    84f4:	0000a830 	.word	0x0000a830
    84f8:	0000a7f0 	.word	0x0000a7f0

000084fc <strcmp>:
    84fc:	7802      	ldrb	r2, [r0, #0]
    84fe:	780b      	ldrb	r3, [r1, #0]
    8500:	2a00      	cmp	r2, #0
    8502:	d003      	beq.n	850c <strcmp+0x10>
    8504:	3001      	adds	r0, #1
    8506:	3101      	adds	r1, #1
    8508:	429a      	cmp	r2, r3
    850a:	d0f7      	beq.n	84fc <strcmp>
    850c:	1ad0      	subs	r0, r2, r3
    850e:	4770      	bx	lr

00008510 <strcpy>:
    8510:	1c03      	adds	r3, r0, #0
    8512:	780a      	ldrb	r2, [r1, #0]
    8514:	3101      	adds	r1, #1
    8516:	701a      	strb	r2, [r3, #0]
    8518:	3301      	adds	r3, #1
    851a:	2a00      	cmp	r2, #0
    851c:	d1f9      	bne.n	8512 <strcpy+0x2>
    851e:	4770      	bx	lr

00008520 <strstr>:
    8520:	b510      	push	{r4, lr}
    8522:	0002      	movs	r2, r0
    8524:	7800      	ldrb	r0, [r0, #0]
    8526:	2800      	cmp	r0, #0
    8528:	d104      	bne.n	8534 <strstr+0x14>
    852a:	7809      	ldrb	r1, [r1, #0]
    852c:	2900      	cmp	r1, #0
    852e:	d00d      	beq.n	854c <strstr+0x2c>
    8530:	bd10      	pop	{r4, pc}
    8532:	3201      	adds	r2, #1
    8534:	7810      	ldrb	r0, [r2, #0]
    8536:	2800      	cmp	r0, #0
    8538:	d0fa      	beq.n	8530 <strstr+0x10>
    853a:	2300      	movs	r3, #0
    853c:	5cc8      	ldrb	r0, [r1, r3]
    853e:	2800      	cmp	r0, #0
    8540:	d004      	beq.n	854c <strstr+0x2c>
    8542:	5cd4      	ldrb	r4, [r2, r3]
    8544:	4284      	cmp	r4, r0
    8546:	d1f4      	bne.n	8532 <strstr+0x12>
    8548:	3301      	adds	r3, #1
    854a:	e7f7      	b.n	853c <strstr+0x1c>
    854c:	0010      	movs	r0, r2
    854e:	e7ef      	b.n	8530 <strstr+0x10>

00008550 <__swbuf_r>:
    8550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8552:	0005      	movs	r5, r0
    8554:	000e      	movs	r6, r1
    8556:	0014      	movs	r4, r2
    8558:	2800      	cmp	r0, #0
    855a:	d004      	beq.n	8566 <__swbuf_r+0x16>
    855c:	6983      	ldr	r3, [r0, #24]
    855e:	2b00      	cmp	r3, #0
    8560:	d101      	bne.n	8566 <__swbuf_r+0x16>
    8562:	f000 f9b9 	bl	88d8 <__sinit>
    8566:	4b22      	ldr	r3, [pc, #136]	; (85f0 <__swbuf_r+0xa0>)
    8568:	429c      	cmp	r4, r3
    856a:	d12d      	bne.n	85c8 <__swbuf_r+0x78>
    856c:	686c      	ldr	r4, [r5, #4]
    856e:	69a3      	ldr	r3, [r4, #24]
    8570:	60a3      	str	r3, [r4, #8]
    8572:	89a3      	ldrh	r3, [r4, #12]
    8574:	071b      	lsls	r3, r3, #28
    8576:	d531      	bpl.n	85dc <__swbuf_r+0x8c>
    8578:	6923      	ldr	r3, [r4, #16]
    857a:	2b00      	cmp	r3, #0
    857c:	d02e      	beq.n	85dc <__swbuf_r+0x8c>
    857e:	6823      	ldr	r3, [r4, #0]
    8580:	6922      	ldr	r2, [r4, #16]
    8582:	b2f7      	uxtb	r7, r6
    8584:	1a98      	subs	r0, r3, r2
    8586:	6963      	ldr	r3, [r4, #20]
    8588:	b2f6      	uxtb	r6, r6
    858a:	4298      	cmp	r0, r3
    858c:	db05      	blt.n	859a <__swbuf_r+0x4a>
    858e:	0021      	movs	r1, r4
    8590:	0028      	movs	r0, r5
    8592:	f000 f933 	bl	87fc <_fflush_r>
    8596:	2800      	cmp	r0, #0
    8598:	d126      	bne.n	85e8 <__swbuf_r+0x98>
    859a:	68a3      	ldr	r3, [r4, #8]
    859c:	3001      	adds	r0, #1
    859e:	3b01      	subs	r3, #1
    85a0:	60a3      	str	r3, [r4, #8]
    85a2:	6823      	ldr	r3, [r4, #0]
    85a4:	1c5a      	adds	r2, r3, #1
    85a6:	6022      	str	r2, [r4, #0]
    85a8:	701f      	strb	r7, [r3, #0]
    85aa:	6963      	ldr	r3, [r4, #20]
    85ac:	4298      	cmp	r0, r3
    85ae:	d004      	beq.n	85ba <__swbuf_r+0x6a>
    85b0:	89a3      	ldrh	r3, [r4, #12]
    85b2:	07db      	lsls	r3, r3, #31
    85b4:	d51a      	bpl.n	85ec <__swbuf_r+0x9c>
    85b6:	2e0a      	cmp	r6, #10
    85b8:	d118      	bne.n	85ec <__swbuf_r+0x9c>
    85ba:	0021      	movs	r1, r4
    85bc:	0028      	movs	r0, r5
    85be:	f000 f91d 	bl	87fc <_fflush_r>
    85c2:	2800      	cmp	r0, #0
    85c4:	d012      	beq.n	85ec <__swbuf_r+0x9c>
    85c6:	e00f      	b.n	85e8 <__swbuf_r+0x98>
    85c8:	4b0a      	ldr	r3, [pc, #40]	; (85f4 <__swbuf_r+0xa4>)
    85ca:	429c      	cmp	r4, r3
    85cc:	d101      	bne.n	85d2 <__swbuf_r+0x82>
    85ce:	68ac      	ldr	r4, [r5, #8]
    85d0:	e7cd      	b.n	856e <__swbuf_r+0x1e>
    85d2:	4b09      	ldr	r3, [pc, #36]	; (85f8 <__swbuf_r+0xa8>)
    85d4:	429c      	cmp	r4, r3
    85d6:	d1ca      	bne.n	856e <__swbuf_r+0x1e>
    85d8:	68ec      	ldr	r4, [r5, #12]
    85da:	e7c8      	b.n	856e <__swbuf_r+0x1e>
    85dc:	0021      	movs	r1, r4
    85de:	0028      	movs	r0, r5
    85e0:	f000 f80c 	bl	85fc <__swsetup_r>
    85e4:	2800      	cmp	r0, #0
    85e6:	d0ca      	beq.n	857e <__swbuf_r+0x2e>
    85e8:	2601      	movs	r6, #1
    85ea:	4276      	negs	r6, r6
    85ec:	0030      	movs	r0, r6
    85ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85f0:	0000a810 	.word	0x0000a810
    85f4:	0000a830 	.word	0x0000a830
    85f8:	0000a7f0 	.word	0x0000a7f0

000085fc <__swsetup_r>:
    85fc:	4b36      	ldr	r3, [pc, #216]	; (86d8 <__swsetup_r+0xdc>)
    85fe:	b570      	push	{r4, r5, r6, lr}
    8600:	681d      	ldr	r5, [r3, #0]
    8602:	0006      	movs	r6, r0
    8604:	000c      	movs	r4, r1
    8606:	2d00      	cmp	r5, #0
    8608:	d005      	beq.n	8616 <__swsetup_r+0x1a>
    860a:	69ab      	ldr	r3, [r5, #24]
    860c:	2b00      	cmp	r3, #0
    860e:	d102      	bne.n	8616 <__swsetup_r+0x1a>
    8610:	0028      	movs	r0, r5
    8612:	f000 f961 	bl	88d8 <__sinit>
    8616:	4b31      	ldr	r3, [pc, #196]	; (86dc <__swsetup_r+0xe0>)
    8618:	429c      	cmp	r4, r3
    861a:	d10f      	bne.n	863c <__swsetup_r+0x40>
    861c:	686c      	ldr	r4, [r5, #4]
    861e:	230c      	movs	r3, #12
    8620:	5ee2      	ldrsh	r2, [r4, r3]
    8622:	b293      	uxth	r3, r2
    8624:	0719      	lsls	r1, r3, #28
    8626:	d42d      	bmi.n	8684 <__swsetup_r+0x88>
    8628:	06d9      	lsls	r1, r3, #27
    862a:	d411      	bmi.n	8650 <__swsetup_r+0x54>
    862c:	2309      	movs	r3, #9
    862e:	2001      	movs	r0, #1
    8630:	6033      	str	r3, [r6, #0]
    8632:	3337      	adds	r3, #55	; 0x37
    8634:	4313      	orrs	r3, r2
    8636:	81a3      	strh	r3, [r4, #12]
    8638:	4240      	negs	r0, r0
    863a:	bd70      	pop	{r4, r5, r6, pc}
    863c:	4b28      	ldr	r3, [pc, #160]	; (86e0 <__swsetup_r+0xe4>)
    863e:	429c      	cmp	r4, r3
    8640:	d101      	bne.n	8646 <__swsetup_r+0x4a>
    8642:	68ac      	ldr	r4, [r5, #8]
    8644:	e7eb      	b.n	861e <__swsetup_r+0x22>
    8646:	4b27      	ldr	r3, [pc, #156]	; (86e4 <__swsetup_r+0xe8>)
    8648:	429c      	cmp	r4, r3
    864a:	d1e8      	bne.n	861e <__swsetup_r+0x22>
    864c:	68ec      	ldr	r4, [r5, #12]
    864e:	e7e6      	b.n	861e <__swsetup_r+0x22>
    8650:	075b      	lsls	r3, r3, #29
    8652:	d513      	bpl.n	867c <__swsetup_r+0x80>
    8654:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8656:	2900      	cmp	r1, #0
    8658:	d008      	beq.n	866c <__swsetup_r+0x70>
    865a:	0023      	movs	r3, r4
    865c:	3344      	adds	r3, #68	; 0x44
    865e:	4299      	cmp	r1, r3
    8660:	d002      	beq.n	8668 <__swsetup_r+0x6c>
    8662:	0030      	movs	r0, r6
    8664:	f000 fa44 	bl	8af0 <_free_r>
    8668:	2300      	movs	r3, #0
    866a:	6363      	str	r3, [r4, #52]	; 0x34
    866c:	2224      	movs	r2, #36	; 0x24
    866e:	89a3      	ldrh	r3, [r4, #12]
    8670:	4393      	bics	r3, r2
    8672:	81a3      	strh	r3, [r4, #12]
    8674:	2300      	movs	r3, #0
    8676:	6063      	str	r3, [r4, #4]
    8678:	6923      	ldr	r3, [r4, #16]
    867a:	6023      	str	r3, [r4, #0]
    867c:	2308      	movs	r3, #8
    867e:	89a2      	ldrh	r2, [r4, #12]
    8680:	4313      	orrs	r3, r2
    8682:	81a3      	strh	r3, [r4, #12]
    8684:	6923      	ldr	r3, [r4, #16]
    8686:	2b00      	cmp	r3, #0
    8688:	d10b      	bne.n	86a2 <__swsetup_r+0xa6>
    868a:	21a0      	movs	r1, #160	; 0xa0
    868c:	2280      	movs	r2, #128	; 0x80
    868e:	89a3      	ldrh	r3, [r4, #12]
    8690:	0089      	lsls	r1, r1, #2
    8692:	0092      	lsls	r2, r2, #2
    8694:	400b      	ands	r3, r1
    8696:	4293      	cmp	r3, r2
    8698:	d003      	beq.n	86a2 <__swsetup_r+0xa6>
    869a:	0021      	movs	r1, r4
    869c:	0030      	movs	r0, r6
    869e:	f000 f9d9 	bl	8a54 <__smakebuf_r>
    86a2:	2301      	movs	r3, #1
    86a4:	89a2      	ldrh	r2, [r4, #12]
    86a6:	4013      	ands	r3, r2
    86a8:	d011      	beq.n	86ce <__swsetup_r+0xd2>
    86aa:	2300      	movs	r3, #0
    86ac:	60a3      	str	r3, [r4, #8]
    86ae:	6963      	ldr	r3, [r4, #20]
    86b0:	425b      	negs	r3, r3
    86b2:	61a3      	str	r3, [r4, #24]
    86b4:	2000      	movs	r0, #0
    86b6:	6923      	ldr	r3, [r4, #16]
    86b8:	4283      	cmp	r3, r0
    86ba:	d1be      	bne.n	863a <__swsetup_r+0x3e>
    86bc:	230c      	movs	r3, #12
    86be:	5ee2      	ldrsh	r2, [r4, r3]
    86c0:	0613      	lsls	r3, r2, #24
    86c2:	d5ba      	bpl.n	863a <__swsetup_r+0x3e>
    86c4:	2340      	movs	r3, #64	; 0x40
    86c6:	4313      	orrs	r3, r2
    86c8:	81a3      	strh	r3, [r4, #12]
    86ca:	3801      	subs	r0, #1
    86cc:	e7b5      	b.n	863a <__swsetup_r+0x3e>
    86ce:	0792      	lsls	r2, r2, #30
    86d0:	d400      	bmi.n	86d4 <__swsetup_r+0xd8>
    86d2:	6963      	ldr	r3, [r4, #20]
    86d4:	60a3      	str	r3, [r4, #8]
    86d6:	e7ed      	b.n	86b4 <__swsetup_r+0xb8>
    86d8:	20000010 	.word	0x20000010
    86dc:	0000a810 	.word	0x0000a810
    86e0:	0000a830 	.word	0x0000a830
    86e4:	0000a7f0 	.word	0x0000a7f0

000086e8 <__sflush_r>:
    86e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    86ea:	898a      	ldrh	r2, [r1, #12]
    86ec:	0005      	movs	r5, r0
    86ee:	000c      	movs	r4, r1
    86f0:	0713      	lsls	r3, r2, #28
    86f2:	d460      	bmi.n	87b6 <__sflush_r+0xce>
    86f4:	684b      	ldr	r3, [r1, #4]
    86f6:	2b00      	cmp	r3, #0
    86f8:	dc04      	bgt.n	8704 <__sflush_r+0x1c>
    86fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    86fc:	2b00      	cmp	r3, #0
    86fe:	dc01      	bgt.n	8704 <__sflush_r+0x1c>
    8700:	2000      	movs	r0, #0
    8702:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8704:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8706:	2f00      	cmp	r7, #0
    8708:	d0fa      	beq.n	8700 <__sflush_r+0x18>
    870a:	2300      	movs	r3, #0
    870c:	682e      	ldr	r6, [r5, #0]
    870e:	602b      	str	r3, [r5, #0]
    8710:	2380      	movs	r3, #128	; 0x80
    8712:	015b      	lsls	r3, r3, #5
    8714:	401a      	ands	r2, r3
    8716:	d034      	beq.n	8782 <__sflush_r+0x9a>
    8718:	6d60      	ldr	r0, [r4, #84]	; 0x54
    871a:	89a3      	ldrh	r3, [r4, #12]
    871c:	075b      	lsls	r3, r3, #29
    871e:	d506      	bpl.n	872e <__sflush_r+0x46>
    8720:	6863      	ldr	r3, [r4, #4]
    8722:	1ac0      	subs	r0, r0, r3
    8724:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8726:	2b00      	cmp	r3, #0
    8728:	d001      	beq.n	872e <__sflush_r+0x46>
    872a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    872c:	1ac0      	subs	r0, r0, r3
    872e:	0002      	movs	r2, r0
    8730:	6a21      	ldr	r1, [r4, #32]
    8732:	2300      	movs	r3, #0
    8734:	0028      	movs	r0, r5
    8736:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8738:	47b8      	blx	r7
    873a:	89a1      	ldrh	r1, [r4, #12]
    873c:	1c43      	adds	r3, r0, #1
    873e:	d106      	bne.n	874e <__sflush_r+0x66>
    8740:	682b      	ldr	r3, [r5, #0]
    8742:	2b1d      	cmp	r3, #29
    8744:	d831      	bhi.n	87aa <__sflush_r+0xc2>
    8746:	4a2c      	ldr	r2, [pc, #176]	; (87f8 <__sflush_r+0x110>)
    8748:	40da      	lsrs	r2, r3
    874a:	07d3      	lsls	r3, r2, #31
    874c:	d52d      	bpl.n	87aa <__sflush_r+0xc2>
    874e:	2300      	movs	r3, #0
    8750:	6063      	str	r3, [r4, #4]
    8752:	6923      	ldr	r3, [r4, #16]
    8754:	6023      	str	r3, [r4, #0]
    8756:	04cb      	lsls	r3, r1, #19
    8758:	d505      	bpl.n	8766 <__sflush_r+0x7e>
    875a:	1c43      	adds	r3, r0, #1
    875c:	d102      	bne.n	8764 <__sflush_r+0x7c>
    875e:	682b      	ldr	r3, [r5, #0]
    8760:	2b00      	cmp	r3, #0
    8762:	d100      	bne.n	8766 <__sflush_r+0x7e>
    8764:	6560      	str	r0, [r4, #84]	; 0x54
    8766:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8768:	602e      	str	r6, [r5, #0]
    876a:	2900      	cmp	r1, #0
    876c:	d0c8      	beq.n	8700 <__sflush_r+0x18>
    876e:	0023      	movs	r3, r4
    8770:	3344      	adds	r3, #68	; 0x44
    8772:	4299      	cmp	r1, r3
    8774:	d002      	beq.n	877c <__sflush_r+0x94>
    8776:	0028      	movs	r0, r5
    8778:	f000 f9ba 	bl	8af0 <_free_r>
    877c:	2000      	movs	r0, #0
    877e:	6360      	str	r0, [r4, #52]	; 0x34
    8780:	e7bf      	b.n	8702 <__sflush_r+0x1a>
    8782:	2301      	movs	r3, #1
    8784:	6a21      	ldr	r1, [r4, #32]
    8786:	0028      	movs	r0, r5
    8788:	47b8      	blx	r7
    878a:	1c43      	adds	r3, r0, #1
    878c:	d1c5      	bne.n	871a <__sflush_r+0x32>
    878e:	682b      	ldr	r3, [r5, #0]
    8790:	2b00      	cmp	r3, #0
    8792:	d0c2      	beq.n	871a <__sflush_r+0x32>
    8794:	2b1d      	cmp	r3, #29
    8796:	d001      	beq.n	879c <__sflush_r+0xb4>
    8798:	2b16      	cmp	r3, #22
    879a:	d101      	bne.n	87a0 <__sflush_r+0xb8>
    879c:	602e      	str	r6, [r5, #0]
    879e:	e7af      	b.n	8700 <__sflush_r+0x18>
    87a0:	2340      	movs	r3, #64	; 0x40
    87a2:	89a2      	ldrh	r2, [r4, #12]
    87a4:	4313      	orrs	r3, r2
    87a6:	81a3      	strh	r3, [r4, #12]
    87a8:	e7ab      	b.n	8702 <__sflush_r+0x1a>
    87aa:	2340      	movs	r3, #64	; 0x40
    87ac:	430b      	orrs	r3, r1
    87ae:	2001      	movs	r0, #1
    87b0:	81a3      	strh	r3, [r4, #12]
    87b2:	4240      	negs	r0, r0
    87b4:	e7a5      	b.n	8702 <__sflush_r+0x1a>
    87b6:	690f      	ldr	r7, [r1, #16]
    87b8:	2f00      	cmp	r7, #0
    87ba:	d0a1      	beq.n	8700 <__sflush_r+0x18>
    87bc:	680b      	ldr	r3, [r1, #0]
    87be:	600f      	str	r7, [r1, #0]
    87c0:	1bdb      	subs	r3, r3, r7
    87c2:	9301      	str	r3, [sp, #4]
    87c4:	2300      	movs	r3, #0
    87c6:	0792      	lsls	r2, r2, #30
    87c8:	d100      	bne.n	87cc <__sflush_r+0xe4>
    87ca:	694b      	ldr	r3, [r1, #20]
    87cc:	60a3      	str	r3, [r4, #8]
    87ce:	9b01      	ldr	r3, [sp, #4]
    87d0:	2b00      	cmp	r3, #0
    87d2:	dc00      	bgt.n	87d6 <__sflush_r+0xee>
    87d4:	e794      	b.n	8700 <__sflush_r+0x18>
    87d6:	9b01      	ldr	r3, [sp, #4]
    87d8:	003a      	movs	r2, r7
    87da:	6a21      	ldr	r1, [r4, #32]
    87dc:	0028      	movs	r0, r5
    87de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    87e0:	47b0      	blx	r6
    87e2:	2800      	cmp	r0, #0
    87e4:	dc03      	bgt.n	87ee <__sflush_r+0x106>
    87e6:	2340      	movs	r3, #64	; 0x40
    87e8:	89a2      	ldrh	r2, [r4, #12]
    87ea:	4313      	orrs	r3, r2
    87ec:	e7df      	b.n	87ae <__sflush_r+0xc6>
    87ee:	9b01      	ldr	r3, [sp, #4]
    87f0:	183f      	adds	r7, r7, r0
    87f2:	1a1b      	subs	r3, r3, r0
    87f4:	9301      	str	r3, [sp, #4]
    87f6:	e7ea      	b.n	87ce <__sflush_r+0xe6>
    87f8:	20400001 	.word	0x20400001

000087fc <_fflush_r>:
    87fc:	690b      	ldr	r3, [r1, #16]
    87fe:	b570      	push	{r4, r5, r6, lr}
    8800:	0005      	movs	r5, r0
    8802:	000c      	movs	r4, r1
    8804:	2b00      	cmp	r3, #0
    8806:	d101      	bne.n	880c <_fflush_r+0x10>
    8808:	2000      	movs	r0, #0
    880a:	bd70      	pop	{r4, r5, r6, pc}
    880c:	2800      	cmp	r0, #0
    880e:	d004      	beq.n	881a <_fflush_r+0x1e>
    8810:	6983      	ldr	r3, [r0, #24]
    8812:	2b00      	cmp	r3, #0
    8814:	d101      	bne.n	881a <_fflush_r+0x1e>
    8816:	f000 f85f 	bl	88d8 <__sinit>
    881a:	4b0b      	ldr	r3, [pc, #44]	; (8848 <_fflush_r+0x4c>)
    881c:	429c      	cmp	r4, r3
    881e:	d109      	bne.n	8834 <_fflush_r+0x38>
    8820:	686c      	ldr	r4, [r5, #4]
    8822:	220c      	movs	r2, #12
    8824:	5ea3      	ldrsh	r3, [r4, r2]
    8826:	2b00      	cmp	r3, #0
    8828:	d0ee      	beq.n	8808 <_fflush_r+0xc>
    882a:	0021      	movs	r1, r4
    882c:	0028      	movs	r0, r5
    882e:	f7ff ff5b 	bl	86e8 <__sflush_r>
    8832:	e7ea      	b.n	880a <_fflush_r+0xe>
    8834:	4b05      	ldr	r3, [pc, #20]	; (884c <_fflush_r+0x50>)
    8836:	429c      	cmp	r4, r3
    8838:	d101      	bne.n	883e <_fflush_r+0x42>
    883a:	68ac      	ldr	r4, [r5, #8]
    883c:	e7f1      	b.n	8822 <_fflush_r+0x26>
    883e:	4b04      	ldr	r3, [pc, #16]	; (8850 <_fflush_r+0x54>)
    8840:	429c      	cmp	r4, r3
    8842:	d1ee      	bne.n	8822 <_fflush_r+0x26>
    8844:	68ec      	ldr	r4, [r5, #12]
    8846:	e7ec      	b.n	8822 <_fflush_r+0x26>
    8848:	0000a810 	.word	0x0000a810
    884c:	0000a830 	.word	0x0000a830
    8850:	0000a7f0 	.word	0x0000a7f0

00008854 <_cleanup_r>:
    8854:	b510      	push	{r4, lr}
    8856:	4902      	ldr	r1, [pc, #8]	; (8860 <_cleanup_r+0xc>)
    8858:	f000 f8b2 	bl	89c0 <_fwalk_reent>
    885c:	bd10      	pop	{r4, pc}
    885e:	46c0      	nop			; (mov r8, r8)
    8860:	000087fd 	.word	0x000087fd

00008864 <std.isra.0>:
    8864:	2300      	movs	r3, #0
    8866:	b510      	push	{r4, lr}
    8868:	0004      	movs	r4, r0
    886a:	6003      	str	r3, [r0, #0]
    886c:	6043      	str	r3, [r0, #4]
    886e:	6083      	str	r3, [r0, #8]
    8870:	8181      	strh	r1, [r0, #12]
    8872:	6643      	str	r3, [r0, #100]	; 0x64
    8874:	81c2      	strh	r2, [r0, #14]
    8876:	6103      	str	r3, [r0, #16]
    8878:	6143      	str	r3, [r0, #20]
    887a:	6183      	str	r3, [r0, #24]
    887c:	0019      	movs	r1, r3
    887e:	2208      	movs	r2, #8
    8880:	305c      	adds	r0, #92	; 0x5c
    8882:	f7ff fc7a 	bl	817a <memset>
    8886:	4b05      	ldr	r3, [pc, #20]	; (889c <std.isra.0+0x38>)
    8888:	6224      	str	r4, [r4, #32]
    888a:	6263      	str	r3, [r4, #36]	; 0x24
    888c:	4b04      	ldr	r3, [pc, #16]	; (88a0 <std.isra.0+0x3c>)
    888e:	62a3      	str	r3, [r4, #40]	; 0x28
    8890:	4b04      	ldr	r3, [pc, #16]	; (88a4 <std.isra.0+0x40>)
    8892:	62e3      	str	r3, [r4, #44]	; 0x2c
    8894:	4b04      	ldr	r3, [pc, #16]	; (88a8 <std.isra.0+0x44>)
    8896:	6323      	str	r3, [r4, #48]	; 0x30
    8898:	bd10      	pop	{r4, pc}
    889a:	46c0      	nop			; (mov r8, r8)
    889c:	00009269 	.word	0x00009269
    88a0:	00009291 	.word	0x00009291
    88a4:	000092c9 	.word	0x000092c9
    88a8:	000092f5 	.word	0x000092f5

000088ac <__sfmoreglue>:
    88ac:	b570      	push	{r4, r5, r6, lr}
    88ae:	2568      	movs	r5, #104	; 0x68
    88b0:	1e4a      	subs	r2, r1, #1
    88b2:	4355      	muls	r5, r2
    88b4:	000e      	movs	r6, r1
    88b6:	0029      	movs	r1, r5
    88b8:	3174      	adds	r1, #116	; 0x74
    88ba:	f000 f963 	bl	8b84 <_malloc_r>
    88be:	1e04      	subs	r4, r0, #0
    88c0:	d008      	beq.n	88d4 <__sfmoreglue+0x28>
    88c2:	2100      	movs	r1, #0
    88c4:	002a      	movs	r2, r5
    88c6:	6001      	str	r1, [r0, #0]
    88c8:	6046      	str	r6, [r0, #4]
    88ca:	300c      	adds	r0, #12
    88cc:	60a0      	str	r0, [r4, #8]
    88ce:	3268      	adds	r2, #104	; 0x68
    88d0:	f7ff fc53 	bl	817a <memset>
    88d4:	0020      	movs	r0, r4
    88d6:	bd70      	pop	{r4, r5, r6, pc}

000088d8 <__sinit>:
    88d8:	6983      	ldr	r3, [r0, #24]
    88da:	b513      	push	{r0, r1, r4, lr}
    88dc:	0004      	movs	r4, r0
    88de:	2b00      	cmp	r3, #0
    88e0:	d128      	bne.n	8934 <__sinit+0x5c>
    88e2:	6483      	str	r3, [r0, #72]	; 0x48
    88e4:	64c3      	str	r3, [r0, #76]	; 0x4c
    88e6:	6503      	str	r3, [r0, #80]	; 0x50
    88e8:	4b13      	ldr	r3, [pc, #76]	; (8938 <__sinit+0x60>)
    88ea:	4a14      	ldr	r2, [pc, #80]	; (893c <__sinit+0x64>)
    88ec:	681b      	ldr	r3, [r3, #0]
    88ee:	6282      	str	r2, [r0, #40]	; 0x28
    88f0:	9301      	str	r3, [sp, #4]
    88f2:	4298      	cmp	r0, r3
    88f4:	d101      	bne.n	88fa <__sinit+0x22>
    88f6:	2301      	movs	r3, #1
    88f8:	6183      	str	r3, [r0, #24]
    88fa:	0020      	movs	r0, r4
    88fc:	f000 f820 	bl	8940 <__sfp>
    8900:	6060      	str	r0, [r4, #4]
    8902:	0020      	movs	r0, r4
    8904:	f000 f81c 	bl	8940 <__sfp>
    8908:	60a0      	str	r0, [r4, #8]
    890a:	0020      	movs	r0, r4
    890c:	f000 f818 	bl	8940 <__sfp>
    8910:	2200      	movs	r2, #0
    8912:	60e0      	str	r0, [r4, #12]
    8914:	2104      	movs	r1, #4
    8916:	6860      	ldr	r0, [r4, #4]
    8918:	f7ff ffa4 	bl	8864 <std.isra.0>
    891c:	2201      	movs	r2, #1
    891e:	2109      	movs	r1, #9
    8920:	68a0      	ldr	r0, [r4, #8]
    8922:	f7ff ff9f 	bl	8864 <std.isra.0>
    8926:	2202      	movs	r2, #2
    8928:	2112      	movs	r1, #18
    892a:	68e0      	ldr	r0, [r4, #12]
    892c:	f7ff ff9a 	bl	8864 <std.isra.0>
    8930:	2301      	movs	r3, #1
    8932:	61a3      	str	r3, [r4, #24]
    8934:	bd13      	pop	{r0, r1, r4, pc}
    8936:	46c0      	nop			; (mov r8, r8)
    8938:	0000a7ec 	.word	0x0000a7ec
    893c:	00008855 	.word	0x00008855

00008940 <__sfp>:
    8940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8942:	4b1e      	ldr	r3, [pc, #120]	; (89bc <__sfp+0x7c>)
    8944:	0007      	movs	r7, r0
    8946:	681e      	ldr	r6, [r3, #0]
    8948:	69b3      	ldr	r3, [r6, #24]
    894a:	2b00      	cmp	r3, #0
    894c:	d102      	bne.n	8954 <__sfp+0x14>
    894e:	0030      	movs	r0, r6
    8950:	f7ff ffc2 	bl	88d8 <__sinit>
    8954:	3648      	adds	r6, #72	; 0x48
    8956:	68b4      	ldr	r4, [r6, #8]
    8958:	6873      	ldr	r3, [r6, #4]
    895a:	3b01      	subs	r3, #1
    895c:	d504      	bpl.n	8968 <__sfp+0x28>
    895e:	6833      	ldr	r3, [r6, #0]
    8960:	2b00      	cmp	r3, #0
    8962:	d007      	beq.n	8974 <__sfp+0x34>
    8964:	6836      	ldr	r6, [r6, #0]
    8966:	e7f6      	b.n	8956 <__sfp+0x16>
    8968:	220c      	movs	r2, #12
    896a:	5ea5      	ldrsh	r5, [r4, r2]
    896c:	2d00      	cmp	r5, #0
    896e:	d00d      	beq.n	898c <__sfp+0x4c>
    8970:	3468      	adds	r4, #104	; 0x68
    8972:	e7f2      	b.n	895a <__sfp+0x1a>
    8974:	2104      	movs	r1, #4
    8976:	0038      	movs	r0, r7
    8978:	f7ff ff98 	bl	88ac <__sfmoreglue>
    897c:	6030      	str	r0, [r6, #0]
    897e:	2800      	cmp	r0, #0
    8980:	d1f0      	bne.n	8964 <__sfp+0x24>
    8982:	230c      	movs	r3, #12
    8984:	0004      	movs	r4, r0
    8986:	603b      	str	r3, [r7, #0]
    8988:	0020      	movs	r0, r4
    898a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    898c:	2301      	movs	r3, #1
    898e:	0020      	movs	r0, r4
    8990:	425b      	negs	r3, r3
    8992:	81e3      	strh	r3, [r4, #14]
    8994:	3302      	adds	r3, #2
    8996:	81a3      	strh	r3, [r4, #12]
    8998:	6665      	str	r5, [r4, #100]	; 0x64
    899a:	6025      	str	r5, [r4, #0]
    899c:	60a5      	str	r5, [r4, #8]
    899e:	6065      	str	r5, [r4, #4]
    89a0:	6125      	str	r5, [r4, #16]
    89a2:	6165      	str	r5, [r4, #20]
    89a4:	61a5      	str	r5, [r4, #24]
    89a6:	2208      	movs	r2, #8
    89a8:	0029      	movs	r1, r5
    89aa:	305c      	adds	r0, #92	; 0x5c
    89ac:	f7ff fbe5 	bl	817a <memset>
    89b0:	6365      	str	r5, [r4, #52]	; 0x34
    89b2:	63a5      	str	r5, [r4, #56]	; 0x38
    89b4:	64a5      	str	r5, [r4, #72]	; 0x48
    89b6:	64e5      	str	r5, [r4, #76]	; 0x4c
    89b8:	e7e6      	b.n	8988 <__sfp+0x48>
    89ba:	46c0      	nop			; (mov r8, r8)
    89bc:	0000a7ec 	.word	0x0000a7ec

000089c0 <_fwalk_reent>:
    89c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    89c2:	0004      	movs	r4, r0
    89c4:	0007      	movs	r7, r0
    89c6:	2600      	movs	r6, #0
    89c8:	9101      	str	r1, [sp, #4]
    89ca:	3448      	adds	r4, #72	; 0x48
    89cc:	2c00      	cmp	r4, #0
    89ce:	d101      	bne.n	89d4 <_fwalk_reent+0x14>
    89d0:	0030      	movs	r0, r6
    89d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    89d4:	6863      	ldr	r3, [r4, #4]
    89d6:	68a5      	ldr	r5, [r4, #8]
    89d8:	9300      	str	r3, [sp, #0]
    89da:	9b00      	ldr	r3, [sp, #0]
    89dc:	3b01      	subs	r3, #1
    89de:	9300      	str	r3, [sp, #0]
    89e0:	d501      	bpl.n	89e6 <_fwalk_reent+0x26>
    89e2:	6824      	ldr	r4, [r4, #0]
    89e4:	e7f2      	b.n	89cc <_fwalk_reent+0xc>
    89e6:	89ab      	ldrh	r3, [r5, #12]
    89e8:	2b01      	cmp	r3, #1
    89ea:	d908      	bls.n	89fe <_fwalk_reent+0x3e>
    89ec:	220e      	movs	r2, #14
    89ee:	5eab      	ldrsh	r3, [r5, r2]
    89f0:	3301      	adds	r3, #1
    89f2:	d004      	beq.n	89fe <_fwalk_reent+0x3e>
    89f4:	0029      	movs	r1, r5
    89f6:	0038      	movs	r0, r7
    89f8:	9b01      	ldr	r3, [sp, #4]
    89fa:	4798      	blx	r3
    89fc:	4306      	orrs	r6, r0
    89fe:	3568      	adds	r5, #104	; 0x68
    8a00:	e7eb      	b.n	89da <_fwalk_reent+0x1a>
	...

00008a04 <__swhatbuf_r>:
    8a04:	b570      	push	{r4, r5, r6, lr}
    8a06:	000e      	movs	r6, r1
    8a08:	001d      	movs	r5, r3
    8a0a:	230e      	movs	r3, #14
    8a0c:	5ec9      	ldrsh	r1, [r1, r3]
    8a0e:	b090      	sub	sp, #64	; 0x40
    8a10:	0014      	movs	r4, r2
    8a12:	2900      	cmp	r1, #0
    8a14:	da07      	bge.n	8a26 <__swhatbuf_r+0x22>
    8a16:	2300      	movs	r3, #0
    8a18:	602b      	str	r3, [r5, #0]
    8a1a:	89b3      	ldrh	r3, [r6, #12]
    8a1c:	061b      	lsls	r3, r3, #24
    8a1e:	d411      	bmi.n	8a44 <__swhatbuf_r+0x40>
    8a20:	2380      	movs	r3, #128	; 0x80
    8a22:	00db      	lsls	r3, r3, #3
    8a24:	e00f      	b.n	8a46 <__swhatbuf_r+0x42>
    8a26:	aa01      	add	r2, sp, #4
    8a28:	f000 fc90 	bl	934c <_fstat_r>
    8a2c:	2800      	cmp	r0, #0
    8a2e:	dbf2      	blt.n	8a16 <__swhatbuf_r+0x12>
    8a30:	22f0      	movs	r2, #240	; 0xf0
    8a32:	9b02      	ldr	r3, [sp, #8]
    8a34:	0212      	lsls	r2, r2, #8
    8a36:	4013      	ands	r3, r2
    8a38:	4a05      	ldr	r2, [pc, #20]	; (8a50 <__swhatbuf_r+0x4c>)
    8a3a:	189b      	adds	r3, r3, r2
    8a3c:	425a      	negs	r2, r3
    8a3e:	4153      	adcs	r3, r2
    8a40:	602b      	str	r3, [r5, #0]
    8a42:	e7ed      	b.n	8a20 <__swhatbuf_r+0x1c>
    8a44:	2340      	movs	r3, #64	; 0x40
    8a46:	2000      	movs	r0, #0
    8a48:	6023      	str	r3, [r4, #0]
    8a4a:	b010      	add	sp, #64	; 0x40
    8a4c:	bd70      	pop	{r4, r5, r6, pc}
    8a4e:	46c0      	nop			; (mov r8, r8)
    8a50:	ffffe000 	.word	0xffffe000

00008a54 <__smakebuf_r>:
    8a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8a56:	2602      	movs	r6, #2
    8a58:	898b      	ldrh	r3, [r1, #12]
    8a5a:	0005      	movs	r5, r0
    8a5c:	000c      	movs	r4, r1
    8a5e:	4233      	tst	r3, r6
    8a60:	d006      	beq.n	8a70 <__smakebuf_r+0x1c>
    8a62:	0023      	movs	r3, r4
    8a64:	3347      	adds	r3, #71	; 0x47
    8a66:	6023      	str	r3, [r4, #0]
    8a68:	6123      	str	r3, [r4, #16]
    8a6a:	2301      	movs	r3, #1
    8a6c:	6163      	str	r3, [r4, #20]
    8a6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    8a70:	ab01      	add	r3, sp, #4
    8a72:	466a      	mov	r2, sp
    8a74:	f7ff ffc6 	bl	8a04 <__swhatbuf_r>
    8a78:	9900      	ldr	r1, [sp, #0]
    8a7a:	0007      	movs	r7, r0
    8a7c:	0028      	movs	r0, r5
    8a7e:	f000 f881 	bl	8b84 <_malloc_r>
    8a82:	2800      	cmp	r0, #0
    8a84:	d108      	bne.n	8a98 <__smakebuf_r+0x44>
    8a86:	220c      	movs	r2, #12
    8a88:	5ea3      	ldrsh	r3, [r4, r2]
    8a8a:	059a      	lsls	r2, r3, #22
    8a8c:	d4ef      	bmi.n	8a6e <__smakebuf_r+0x1a>
    8a8e:	2203      	movs	r2, #3
    8a90:	4393      	bics	r3, r2
    8a92:	431e      	orrs	r6, r3
    8a94:	81a6      	strh	r6, [r4, #12]
    8a96:	e7e4      	b.n	8a62 <__smakebuf_r+0xe>
    8a98:	4b0f      	ldr	r3, [pc, #60]	; (8ad8 <__smakebuf_r+0x84>)
    8a9a:	62ab      	str	r3, [r5, #40]	; 0x28
    8a9c:	2380      	movs	r3, #128	; 0x80
    8a9e:	89a2      	ldrh	r2, [r4, #12]
    8aa0:	6020      	str	r0, [r4, #0]
    8aa2:	4313      	orrs	r3, r2
    8aa4:	81a3      	strh	r3, [r4, #12]
    8aa6:	9b00      	ldr	r3, [sp, #0]
    8aa8:	6120      	str	r0, [r4, #16]
    8aaa:	6163      	str	r3, [r4, #20]
    8aac:	9b01      	ldr	r3, [sp, #4]
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d00d      	beq.n	8ace <__smakebuf_r+0x7a>
    8ab2:	230e      	movs	r3, #14
    8ab4:	5ee1      	ldrsh	r1, [r4, r3]
    8ab6:	0028      	movs	r0, r5
    8ab8:	f000 fc5a 	bl	9370 <_isatty_r>
    8abc:	2800      	cmp	r0, #0
    8abe:	d006      	beq.n	8ace <__smakebuf_r+0x7a>
    8ac0:	2203      	movs	r2, #3
    8ac2:	89a3      	ldrh	r3, [r4, #12]
    8ac4:	4393      	bics	r3, r2
    8ac6:	001a      	movs	r2, r3
    8ac8:	2301      	movs	r3, #1
    8aca:	4313      	orrs	r3, r2
    8acc:	81a3      	strh	r3, [r4, #12]
    8ace:	89a0      	ldrh	r0, [r4, #12]
    8ad0:	4338      	orrs	r0, r7
    8ad2:	81a0      	strh	r0, [r4, #12]
    8ad4:	e7cb      	b.n	8a6e <__smakebuf_r+0x1a>
    8ad6:	46c0      	nop			; (mov r8, r8)
    8ad8:	00008855 	.word	0x00008855

00008adc <malloc>:
    8adc:	b510      	push	{r4, lr}
    8ade:	4b03      	ldr	r3, [pc, #12]	; (8aec <malloc+0x10>)
    8ae0:	0001      	movs	r1, r0
    8ae2:	6818      	ldr	r0, [r3, #0]
    8ae4:	f000 f84e 	bl	8b84 <_malloc_r>
    8ae8:	bd10      	pop	{r4, pc}
    8aea:	46c0      	nop			; (mov r8, r8)
    8aec:	20000010 	.word	0x20000010

00008af0 <_free_r>:
    8af0:	b570      	push	{r4, r5, r6, lr}
    8af2:	0005      	movs	r5, r0
    8af4:	2900      	cmp	r1, #0
    8af6:	d010      	beq.n	8b1a <_free_r+0x2a>
    8af8:	1f0c      	subs	r4, r1, #4
    8afa:	6823      	ldr	r3, [r4, #0]
    8afc:	2b00      	cmp	r3, #0
    8afe:	da00      	bge.n	8b02 <_free_r+0x12>
    8b00:	18e4      	adds	r4, r4, r3
    8b02:	0028      	movs	r0, r5
    8b04:	f000 fc65 	bl	93d2 <__malloc_lock>
    8b08:	4a1d      	ldr	r2, [pc, #116]	; (8b80 <_free_r+0x90>)
    8b0a:	6813      	ldr	r3, [r2, #0]
    8b0c:	2b00      	cmp	r3, #0
    8b0e:	d105      	bne.n	8b1c <_free_r+0x2c>
    8b10:	6063      	str	r3, [r4, #4]
    8b12:	6014      	str	r4, [r2, #0]
    8b14:	0028      	movs	r0, r5
    8b16:	f000 fc5d 	bl	93d4 <__malloc_unlock>
    8b1a:	bd70      	pop	{r4, r5, r6, pc}
    8b1c:	42a3      	cmp	r3, r4
    8b1e:	d909      	bls.n	8b34 <_free_r+0x44>
    8b20:	6821      	ldr	r1, [r4, #0]
    8b22:	1860      	adds	r0, r4, r1
    8b24:	4283      	cmp	r3, r0
    8b26:	d1f3      	bne.n	8b10 <_free_r+0x20>
    8b28:	6818      	ldr	r0, [r3, #0]
    8b2a:	685b      	ldr	r3, [r3, #4]
    8b2c:	1841      	adds	r1, r0, r1
    8b2e:	6021      	str	r1, [r4, #0]
    8b30:	e7ee      	b.n	8b10 <_free_r+0x20>
    8b32:	0013      	movs	r3, r2
    8b34:	685a      	ldr	r2, [r3, #4]
    8b36:	2a00      	cmp	r2, #0
    8b38:	d001      	beq.n	8b3e <_free_r+0x4e>
    8b3a:	42a2      	cmp	r2, r4
    8b3c:	d9f9      	bls.n	8b32 <_free_r+0x42>
    8b3e:	6819      	ldr	r1, [r3, #0]
    8b40:	1858      	adds	r0, r3, r1
    8b42:	42a0      	cmp	r0, r4
    8b44:	d10b      	bne.n	8b5e <_free_r+0x6e>
    8b46:	6820      	ldr	r0, [r4, #0]
    8b48:	1809      	adds	r1, r1, r0
    8b4a:	1858      	adds	r0, r3, r1
    8b4c:	6019      	str	r1, [r3, #0]
    8b4e:	4282      	cmp	r2, r0
    8b50:	d1e0      	bne.n	8b14 <_free_r+0x24>
    8b52:	6810      	ldr	r0, [r2, #0]
    8b54:	6852      	ldr	r2, [r2, #4]
    8b56:	1841      	adds	r1, r0, r1
    8b58:	6019      	str	r1, [r3, #0]
    8b5a:	605a      	str	r2, [r3, #4]
    8b5c:	e7da      	b.n	8b14 <_free_r+0x24>
    8b5e:	42a0      	cmp	r0, r4
    8b60:	d902      	bls.n	8b68 <_free_r+0x78>
    8b62:	230c      	movs	r3, #12
    8b64:	602b      	str	r3, [r5, #0]
    8b66:	e7d5      	b.n	8b14 <_free_r+0x24>
    8b68:	6821      	ldr	r1, [r4, #0]
    8b6a:	1860      	adds	r0, r4, r1
    8b6c:	4282      	cmp	r2, r0
    8b6e:	d103      	bne.n	8b78 <_free_r+0x88>
    8b70:	6810      	ldr	r0, [r2, #0]
    8b72:	6852      	ldr	r2, [r2, #4]
    8b74:	1841      	adds	r1, r0, r1
    8b76:	6021      	str	r1, [r4, #0]
    8b78:	6062      	str	r2, [r4, #4]
    8b7a:	605c      	str	r4, [r3, #4]
    8b7c:	e7ca      	b.n	8b14 <_free_r+0x24>
    8b7e:	46c0      	nop			; (mov r8, r8)
    8b80:	200009a8 	.word	0x200009a8

00008b84 <_malloc_r>:
    8b84:	2303      	movs	r3, #3
    8b86:	b570      	push	{r4, r5, r6, lr}
    8b88:	1ccd      	adds	r5, r1, #3
    8b8a:	439d      	bics	r5, r3
    8b8c:	3508      	adds	r5, #8
    8b8e:	0006      	movs	r6, r0
    8b90:	2d0c      	cmp	r5, #12
    8b92:	d21e      	bcs.n	8bd2 <_malloc_r+0x4e>
    8b94:	250c      	movs	r5, #12
    8b96:	42a9      	cmp	r1, r5
    8b98:	d81d      	bhi.n	8bd6 <_malloc_r+0x52>
    8b9a:	0030      	movs	r0, r6
    8b9c:	f000 fc19 	bl	93d2 <__malloc_lock>
    8ba0:	4a25      	ldr	r2, [pc, #148]	; (8c38 <_malloc_r+0xb4>)
    8ba2:	6814      	ldr	r4, [r2, #0]
    8ba4:	0021      	movs	r1, r4
    8ba6:	2900      	cmp	r1, #0
    8ba8:	d119      	bne.n	8bde <_malloc_r+0x5a>
    8baa:	4c24      	ldr	r4, [pc, #144]	; (8c3c <_malloc_r+0xb8>)
    8bac:	6823      	ldr	r3, [r4, #0]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d103      	bne.n	8bba <_malloc_r+0x36>
    8bb2:	0030      	movs	r0, r6
    8bb4:	f000 fb46 	bl	9244 <_sbrk_r>
    8bb8:	6020      	str	r0, [r4, #0]
    8bba:	0029      	movs	r1, r5
    8bbc:	0030      	movs	r0, r6
    8bbe:	f000 fb41 	bl	9244 <_sbrk_r>
    8bc2:	1c43      	adds	r3, r0, #1
    8bc4:	d12c      	bne.n	8c20 <_malloc_r+0x9c>
    8bc6:	230c      	movs	r3, #12
    8bc8:	0030      	movs	r0, r6
    8bca:	6033      	str	r3, [r6, #0]
    8bcc:	f000 fc02 	bl	93d4 <__malloc_unlock>
    8bd0:	e003      	b.n	8bda <_malloc_r+0x56>
    8bd2:	2d00      	cmp	r5, #0
    8bd4:	dadf      	bge.n	8b96 <_malloc_r+0x12>
    8bd6:	230c      	movs	r3, #12
    8bd8:	6033      	str	r3, [r6, #0]
    8bda:	2000      	movs	r0, #0
    8bdc:	bd70      	pop	{r4, r5, r6, pc}
    8bde:	680b      	ldr	r3, [r1, #0]
    8be0:	1b5b      	subs	r3, r3, r5
    8be2:	d41a      	bmi.n	8c1a <_malloc_r+0x96>
    8be4:	2b0b      	cmp	r3, #11
    8be6:	d903      	bls.n	8bf0 <_malloc_r+0x6c>
    8be8:	600b      	str	r3, [r1, #0]
    8bea:	18cc      	adds	r4, r1, r3
    8bec:	6025      	str	r5, [r4, #0]
    8bee:	e003      	b.n	8bf8 <_malloc_r+0x74>
    8bf0:	428c      	cmp	r4, r1
    8bf2:	d10e      	bne.n	8c12 <_malloc_r+0x8e>
    8bf4:	6863      	ldr	r3, [r4, #4]
    8bf6:	6013      	str	r3, [r2, #0]
    8bf8:	0030      	movs	r0, r6
    8bfa:	f000 fbeb 	bl	93d4 <__malloc_unlock>
    8bfe:	0020      	movs	r0, r4
    8c00:	2207      	movs	r2, #7
    8c02:	300b      	adds	r0, #11
    8c04:	1d23      	adds	r3, r4, #4
    8c06:	4390      	bics	r0, r2
    8c08:	1ac3      	subs	r3, r0, r3
    8c0a:	d0e7      	beq.n	8bdc <_malloc_r+0x58>
    8c0c:	425a      	negs	r2, r3
    8c0e:	50e2      	str	r2, [r4, r3]
    8c10:	e7e4      	b.n	8bdc <_malloc_r+0x58>
    8c12:	684b      	ldr	r3, [r1, #4]
    8c14:	6063      	str	r3, [r4, #4]
    8c16:	000c      	movs	r4, r1
    8c18:	e7ee      	b.n	8bf8 <_malloc_r+0x74>
    8c1a:	000c      	movs	r4, r1
    8c1c:	6849      	ldr	r1, [r1, #4]
    8c1e:	e7c2      	b.n	8ba6 <_malloc_r+0x22>
    8c20:	2303      	movs	r3, #3
    8c22:	1cc4      	adds	r4, r0, #3
    8c24:	439c      	bics	r4, r3
    8c26:	42a0      	cmp	r0, r4
    8c28:	d0e0      	beq.n	8bec <_malloc_r+0x68>
    8c2a:	1a21      	subs	r1, r4, r0
    8c2c:	0030      	movs	r0, r6
    8c2e:	f000 fb09 	bl	9244 <_sbrk_r>
    8c32:	1c43      	adds	r3, r0, #1
    8c34:	d1da      	bne.n	8bec <_malloc_r+0x68>
    8c36:	e7c6      	b.n	8bc6 <_malloc_r+0x42>
    8c38:	200009a8 	.word	0x200009a8
    8c3c:	200009ac 	.word	0x200009ac

00008c40 <__sfputc_r>:
    8c40:	6893      	ldr	r3, [r2, #8]
    8c42:	b510      	push	{r4, lr}
    8c44:	3b01      	subs	r3, #1
    8c46:	6093      	str	r3, [r2, #8]
    8c48:	2b00      	cmp	r3, #0
    8c4a:	da05      	bge.n	8c58 <__sfputc_r+0x18>
    8c4c:	6994      	ldr	r4, [r2, #24]
    8c4e:	42a3      	cmp	r3, r4
    8c50:	db08      	blt.n	8c64 <__sfputc_r+0x24>
    8c52:	b2cb      	uxtb	r3, r1
    8c54:	2b0a      	cmp	r3, #10
    8c56:	d005      	beq.n	8c64 <__sfputc_r+0x24>
    8c58:	6813      	ldr	r3, [r2, #0]
    8c5a:	1c58      	adds	r0, r3, #1
    8c5c:	6010      	str	r0, [r2, #0]
    8c5e:	7019      	strb	r1, [r3, #0]
    8c60:	b2c8      	uxtb	r0, r1
    8c62:	bd10      	pop	{r4, pc}
    8c64:	f7ff fc74 	bl	8550 <__swbuf_r>
    8c68:	e7fb      	b.n	8c62 <__sfputc_r+0x22>

00008c6a <__sfputs_r>:
    8c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c6c:	0006      	movs	r6, r0
    8c6e:	000f      	movs	r7, r1
    8c70:	0014      	movs	r4, r2
    8c72:	18d5      	adds	r5, r2, r3
    8c74:	42ac      	cmp	r4, r5
    8c76:	d101      	bne.n	8c7c <__sfputs_r+0x12>
    8c78:	2000      	movs	r0, #0
    8c7a:	e007      	b.n	8c8c <__sfputs_r+0x22>
    8c7c:	7821      	ldrb	r1, [r4, #0]
    8c7e:	003a      	movs	r2, r7
    8c80:	0030      	movs	r0, r6
    8c82:	f7ff ffdd 	bl	8c40 <__sfputc_r>
    8c86:	3401      	adds	r4, #1
    8c88:	1c43      	adds	r3, r0, #1
    8c8a:	d1f3      	bne.n	8c74 <__sfputs_r+0xa>
    8c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008c90 <_vfiprintf_r>:
    8c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c92:	b09f      	sub	sp, #124	; 0x7c
    8c94:	0006      	movs	r6, r0
    8c96:	000f      	movs	r7, r1
    8c98:	0014      	movs	r4, r2
    8c9a:	9305      	str	r3, [sp, #20]
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d004      	beq.n	8caa <_vfiprintf_r+0x1a>
    8ca0:	6983      	ldr	r3, [r0, #24]
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	d101      	bne.n	8caa <_vfiprintf_r+0x1a>
    8ca6:	f7ff fe17 	bl	88d8 <__sinit>
    8caa:	4b7f      	ldr	r3, [pc, #508]	; (8ea8 <_vfiprintf_r+0x218>)
    8cac:	429f      	cmp	r7, r3
    8cae:	d15c      	bne.n	8d6a <_vfiprintf_r+0xda>
    8cb0:	6877      	ldr	r7, [r6, #4]
    8cb2:	89bb      	ldrh	r3, [r7, #12]
    8cb4:	071b      	lsls	r3, r3, #28
    8cb6:	d562      	bpl.n	8d7e <_vfiprintf_r+0xee>
    8cb8:	693b      	ldr	r3, [r7, #16]
    8cba:	2b00      	cmp	r3, #0
    8cbc:	d05f      	beq.n	8d7e <_vfiprintf_r+0xee>
    8cbe:	2300      	movs	r3, #0
    8cc0:	ad06      	add	r5, sp, #24
    8cc2:	616b      	str	r3, [r5, #20]
    8cc4:	3320      	adds	r3, #32
    8cc6:	766b      	strb	r3, [r5, #25]
    8cc8:	3310      	adds	r3, #16
    8cca:	76ab      	strb	r3, [r5, #26]
    8ccc:	9402      	str	r4, [sp, #8]
    8cce:	9c02      	ldr	r4, [sp, #8]
    8cd0:	7823      	ldrb	r3, [r4, #0]
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	d15d      	bne.n	8d92 <_vfiprintf_r+0x102>
    8cd6:	9b02      	ldr	r3, [sp, #8]
    8cd8:	1ae3      	subs	r3, r4, r3
    8cda:	9304      	str	r3, [sp, #16]
    8cdc:	d00d      	beq.n	8cfa <_vfiprintf_r+0x6a>
    8cde:	9b04      	ldr	r3, [sp, #16]
    8ce0:	9a02      	ldr	r2, [sp, #8]
    8ce2:	0039      	movs	r1, r7
    8ce4:	0030      	movs	r0, r6
    8ce6:	f7ff ffc0 	bl	8c6a <__sfputs_r>
    8cea:	1c43      	adds	r3, r0, #1
    8cec:	d100      	bne.n	8cf0 <_vfiprintf_r+0x60>
    8cee:	e0cc      	b.n	8e8a <_vfiprintf_r+0x1fa>
    8cf0:	696a      	ldr	r2, [r5, #20]
    8cf2:	9b04      	ldr	r3, [sp, #16]
    8cf4:	4694      	mov	ip, r2
    8cf6:	4463      	add	r3, ip
    8cf8:	616b      	str	r3, [r5, #20]
    8cfa:	7823      	ldrb	r3, [r4, #0]
    8cfc:	2b00      	cmp	r3, #0
    8cfe:	d100      	bne.n	8d02 <_vfiprintf_r+0x72>
    8d00:	e0c3      	b.n	8e8a <_vfiprintf_r+0x1fa>
    8d02:	2201      	movs	r2, #1
    8d04:	2300      	movs	r3, #0
    8d06:	4252      	negs	r2, r2
    8d08:	606a      	str	r2, [r5, #4]
    8d0a:	a902      	add	r1, sp, #8
    8d0c:	3254      	adds	r2, #84	; 0x54
    8d0e:	1852      	adds	r2, r2, r1
    8d10:	3401      	adds	r4, #1
    8d12:	602b      	str	r3, [r5, #0]
    8d14:	60eb      	str	r3, [r5, #12]
    8d16:	60ab      	str	r3, [r5, #8]
    8d18:	7013      	strb	r3, [r2, #0]
    8d1a:	65ab      	str	r3, [r5, #88]	; 0x58
    8d1c:	7821      	ldrb	r1, [r4, #0]
    8d1e:	2205      	movs	r2, #5
    8d20:	4862      	ldr	r0, [pc, #392]	; (8eac <_vfiprintf_r+0x21c>)
    8d22:	f000 fb4b 	bl	93bc <memchr>
    8d26:	1c63      	adds	r3, r4, #1
    8d28:	469c      	mov	ip, r3
    8d2a:	2800      	cmp	r0, #0
    8d2c:	d135      	bne.n	8d9a <_vfiprintf_r+0x10a>
    8d2e:	6829      	ldr	r1, [r5, #0]
    8d30:	06cb      	lsls	r3, r1, #27
    8d32:	d504      	bpl.n	8d3e <_vfiprintf_r+0xae>
    8d34:	2353      	movs	r3, #83	; 0x53
    8d36:	aa02      	add	r2, sp, #8
    8d38:	3020      	adds	r0, #32
    8d3a:	189b      	adds	r3, r3, r2
    8d3c:	7018      	strb	r0, [r3, #0]
    8d3e:	070b      	lsls	r3, r1, #28
    8d40:	d504      	bpl.n	8d4c <_vfiprintf_r+0xbc>
    8d42:	2353      	movs	r3, #83	; 0x53
    8d44:	202b      	movs	r0, #43	; 0x2b
    8d46:	aa02      	add	r2, sp, #8
    8d48:	189b      	adds	r3, r3, r2
    8d4a:	7018      	strb	r0, [r3, #0]
    8d4c:	7823      	ldrb	r3, [r4, #0]
    8d4e:	2b2a      	cmp	r3, #42	; 0x2a
    8d50:	d02c      	beq.n	8dac <_vfiprintf_r+0x11c>
    8d52:	2000      	movs	r0, #0
    8d54:	210a      	movs	r1, #10
    8d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d58:	7822      	ldrb	r2, [r4, #0]
    8d5a:	3a30      	subs	r2, #48	; 0x30
    8d5c:	2a09      	cmp	r2, #9
    8d5e:	d800      	bhi.n	8d62 <_vfiprintf_r+0xd2>
    8d60:	e06b      	b.n	8e3a <_vfiprintf_r+0x1aa>
    8d62:	2800      	cmp	r0, #0
    8d64:	d02a      	beq.n	8dbc <_vfiprintf_r+0x12c>
    8d66:	9309      	str	r3, [sp, #36]	; 0x24
    8d68:	e028      	b.n	8dbc <_vfiprintf_r+0x12c>
    8d6a:	4b51      	ldr	r3, [pc, #324]	; (8eb0 <_vfiprintf_r+0x220>)
    8d6c:	429f      	cmp	r7, r3
    8d6e:	d101      	bne.n	8d74 <_vfiprintf_r+0xe4>
    8d70:	68b7      	ldr	r7, [r6, #8]
    8d72:	e79e      	b.n	8cb2 <_vfiprintf_r+0x22>
    8d74:	4b4f      	ldr	r3, [pc, #316]	; (8eb4 <_vfiprintf_r+0x224>)
    8d76:	429f      	cmp	r7, r3
    8d78:	d19b      	bne.n	8cb2 <_vfiprintf_r+0x22>
    8d7a:	68f7      	ldr	r7, [r6, #12]
    8d7c:	e799      	b.n	8cb2 <_vfiprintf_r+0x22>
    8d7e:	0039      	movs	r1, r7
    8d80:	0030      	movs	r0, r6
    8d82:	f7ff fc3b 	bl	85fc <__swsetup_r>
    8d86:	2800      	cmp	r0, #0
    8d88:	d099      	beq.n	8cbe <_vfiprintf_r+0x2e>
    8d8a:	2001      	movs	r0, #1
    8d8c:	4240      	negs	r0, r0
    8d8e:	b01f      	add	sp, #124	; 0x7c
    8d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d92:	2b25      	cmp	r3, #37	; 0x25
    8d94:	d09f      	beq.n	8cd6 <_vfiprintf_r+0x46>
    8d96:	3401      	adds	r4, #1
    8d98:	e79a      	b.n	8cd0 <_vfiprintf_r+0x40>
    8d9a:	4b44      	ldr	r3, [pc, #272]	; (8eac <_vfiprintf_r+0x21c>)
    8d9c:	6829      	ldr	r1, [r5, #0]
    8d9e:	1ac0      	subs	r0, r0, r3
    8da0:	2301      	movs	r3, #1
    8da2:	4083      	lsls	r3, r0
    8da4:	430b      	orrs	r3, r1
    8da6:	602b      	str	r3, [r5, #0]
    8da8:	4664      	mov	r4, ip
    8daa:	e7b7      	b.n	8d1c <_vfiprintf_r+0x8c>
    8dac:	9b05      	ldr	r3, [sp, #20]
    8dae:	1d18      	adds	r0, r3, #4
    8db0:	681b      	ldr	r3, [r3, #0]
    8db2:	9005      	str	r0, [sp, #20]
    8db4:	2b00      	cmp	r3, #0
    8db6:	db3a      	blt.n	8e2e <_vfiprintf_r+0x19e>
    8db8:	9309      	str	r3, [sp, #36]	; 0x24
    8dba:	4664      	mov	r4, ip
    8dbc:	7823      	ldrb	r3, [r4, #0]
    8dbe:	2b2e      	cmp	r3, #46	; 0x2e
    8dc0:	d10b      	bne.n	8dda <_vfiprintf_r+0x14a>
    8dc2:	7863      	ldrb	r3, [r4, #1]
    8dc4:	1c62      	adds	r2, r4, #1
    8dc6:	2b2a      	cmp	r3, #42	; 0x2a
    8dc8:	d13f      	bne.n	8e4a <_vfiprintf_r+0x1ba>
    8dca:	9b05      	ldr	r3, [sp, #20]
    8dcc:	3402      	adds	r4, #2
    8dce:	1d1a      	adds	r2, r3, #4
    8dd0:	681b      	ldr	r3, [r3, #0]
    8dd2:	9205      	str	r2, [sp, #20]
    8dd4:	2b00      	cmp	r3, #0
    8dd6:	db35      	blt.n	8e44 <_vfiprintf_r+0x1b4>
    8dd8:	9307      	str	r3, [sp, #28]
    8dda:	7821      	ldrb	r1, [r4, #0]
    8ddc:	2203      	movs	r2, #3
    8dde:	4836      	ldr	r0, [pc, #216]	; (8eb8 <_vfiprintf_r+0x228>)
    8de0:	f000 faec 	bl	93bc <memchr>
    8de4:	2800      	cmp	r0, #0
    8de6:	d007      	beq.n	8df8 <_vfiprintf_r+0x168>
    8de8:	4b33      	ldr	r3, [pc, #204]	; (8eb8 <_vfiprintf_r+0x228>)
    8dea:	682a      	ldr	r2, [r5, #0]
    8dec:	1ac0      	subs	r0, r0, r3
    8dee:	2340      	movs	r3, #64	; 0x40
    8df0:	4083      	lsls	r3, r0
    8df2:	4313      	orrs	r3, r2
    8df4:	602b      	str	r3, [r5, #0]
    8df6:	3401      	adds	r4, #1
    8df8:	7821      	ldrb	r1, [r4, #0]
    8dfa:	1c63      	adds	r3, r4, #1
    8dfc:	2206      	movs	r2, #6
    8dfe:	482f      	ldr	r0, [pc, #188]	; (8ebc <_vfiprintf_r+0x22c>)
    8e00:	9302      	str	r3, [sp, #8]
    8e02:	7629      	strb	r1, [r5, #24]
    8e04:	f000 fada 	bl	93bc <memchr>
    8e08:	2800      	cmp	r0, #0
    8e0a:	d044      	beq.n	8e96 <_vfiprintf_r+0x206>
    8e0c:	4b2c      	ldr	r3, [pc, #176]	; (8ec0 <_vfiprintf_r+0x230>)
    8e0e:	2b00      	cmp	r3, #0
    8e10:	d12f      	bne.n	8e72 <_vfiprintf_r+0x1e2>
    8e12:	6829      	ldr	r1, [r5, #0]
    8e14:	9b05      	ldr	r3, [sp, #20]
    8e16:	2207      	movs	r2, #7
    8e18:	05c9      	lsls	r1, r1, #23
    8e1a:	d528      	bpl.n	8e6e <_vfiprintf_r+0x1de>
    8e1c:	189b      	adds	r3, r3, r2
    8e1e:	4393      	bics	r3, r2
    8e20:	3308      	adds	r3, #8
    8e22:	9305      	str	r3, [sp, #20]
    8e24:	696b      	ldr	r3, [r5, #20]
    8e26:	9a03      	ldr	r2, [sp, #12]
    8e28:	189b      	adds	r3, r3, r2
    8e2a:	616b      	str	r3, [r5, #20]
    8e2c:	e74f      	b.n	8cce <_vfiprintf_r+0x3e>
    8e2e:	425b      	negs	r3, r3
    8e30:	60eb      	str	r3, [r5, #12]
    8e32:	2302      	movs	r3, #2
    8e34:	430b      	orrs	r3, r1
    8e36:	602b      	str	r3, [r5, #0]
    8e38:	e7bf      	b.n	8dba <_vfiprintf_r+0x12a>
    8e3a:	434b      	muls	r3, r1
    8e3c:	3401      	adds	r4, #1
    8e3e:	189b      	adds	r3, r3, r2
    8e40:	2001      	movs	r0, #1
    8e42:	e789      	b.n	8d58 <_vfiprintf_r+0xc8>
    8e44:	2301      	movs	r3, #1
    8e46:	425b      	negs	r3, r3
    8e48:	e7c6      	b.n	8dd8 <_vfiprintf_r+0x148>
    8e4a:	2300      	movs	r3, #0
    8e4c:	0014      	movs	r4, r2
    8e4e:	200a      	movs	r0, #10
    8e50:	001a      	movs	r2, r3
    8e52:	606b      	str	r3, [r5, #4]
    8e54:	7821      	ldrb	r1, [r4, #0]
    8e56:	3930      	subs	r1, #48	; 0x30
    8e58:	2909      	cmp	r1, #9
    8e5a:	d903      	bls.n	8e64 <_vfiprintf_r+0x1d4>
    8e5c:	2b00      	cmp	r3, #0
    8e5e:	d0bc      	beq.n	8dda <_vfiprintf_r+0x14a>
    8e60:	9207      	str	r2, [sp, #28]
    8e62:	e7ba      	b.n	8dda <_vfiprintf_r+0x14a>
    8e64:	4342      	muls	r2, r0
    8e66:	3401      	adds	r4, #1
    8e68:	1852      	adds	r2, r2, r1
    8e6a:	2301      	movs	r3, #1
    8e6c:	e7f2      	b.n	8e54 <_vfiprintf_r+0x1c4>
    8e6e:	3307      	adds	r3, #7
    8e70:	e7d5      	b.n	8e1e <_vfiprintf_r+0x18e>
    8e72:	ab05      	add	r3, sp, #20
    8e74:	9300      	str	r3, [sp, #0]
    8e76:	003a      	movs	r2, r7
    8e78:	4b12      	ldr	r3, [pc, #72]	; (8ec4 <_vfiprintf_r+0x234>)
    8e7a:	0029      	movs	r1, r5
    8e7c:	0030      	movs	r0, r6
    8e7e:	e000      	b.n	8e82 <_vfiprintf_r+0x1f2>
    8e80:	bf00      	nop
    8e82:	9003      	str	r0, [sp, #12]
    8e84:	9b03      	ldr	r3, [sp, #12]
    8e86:	3301      	adds	r3, #1
    8e88:	d1cc      	bne.n	8e24 <_vfiprintf_r+0x194>
    8e8a:	89bb      	ldrh	r3, [r7, #12]
    8e8c:	065b      	lsls	r3, r3, #25
    8e8e:	d500      	bpl.n	8e92 <_vfiprintf_r+0x202>
    8e90:	e77b      	b.n	8d8a <_vfiprintf_r+0xfa>
    8e92:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e94:	e77b      	b.n	8d8e <_vfiprintf_r+0xfe>
    8e96:	ab05      	add	r3, sp, #20
    8e98:	9300      	str	r3, [sp, #0]
    8e9a:	003a      	movs	r2, r7
    8e9c:	4b09      	ldr	r3, [pc, #36]	; (8ec4 <_vfiprintf_r+0x234>)
    8e9e:	0029      	movs	r1, r5
    8ea0:	0030      	movs	r0, r6
    8ea2:	f000 f87f 	bl	8fa4 <_printf_i>
    8ea6:	e7ec      	b.n	8e82 <_vfiprintf_r+0x1f2>
    8ea8:	0000a810 	.word	0x0000a810
    8eac:	0000a850 	.word	0x0000a850
    8eb0:	0000a830 	.word	0x0000a830
    8eb4:	0000a7f0 	.word	0x0000a7f0
    8eb8:	0000a856 	.word	0x0000a856
    8ebc:	0000a85a 	.word	0x0000a85a
    8ec0:	00000000 	.word	0x00000000
    8ec4:	00008c6b 	.word	0x00008c6b

00008ec8 <_printf_common>:
    8ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8eca:	0015      	movs	r5, r2
    8ecc:	9301      	str	r3, [sp, #4]
    8ece:	688a      	ldr	r2, [r1, #8]
    8ed0:	690b      	ldr	r3, [r1, #16]
    8ed2:	9000      	str	r0, [sp, #0]
    8ed4:	000c      	movs	r4, r1
    8ed6:	4293      	cmp	r3, r2
    8ed8:	da00      	bge.n	8edc <_printf_common+0x14>
    8eda:	0013      	movs	r3, r2
    8edc:	0022      	movs	r2, r4
    8ede:	602b      	str	r3, [r5, #0]
    8ee0:	3243      	adds	r2, #67	; 0x43
    8ee2:	7812      	ldrb	r2, [r2, #0]
    8ee4:	2a00      	cmp	r2, #0
    8ee6:	d001      	beq.n	8eec <_printf_common+0x24>
    8ee8:	3301      	adds	r3, #1
    8eea:	602b      	str	r3, [r5, #0]
    8eec:	6823      	ldr	r3, [r4, #0]
    8eee:	069b      	lsls	r3, r3, #26
    8ef0:	d502      	bpl.n	8ef8 <_printf_common+0x30>
    8ef2:	682b      	ldr	r3, [r5, #0]
    8ef4:	3302      	adds	r3, #2
    8ef6:	602b      	str	r3, [r5, #0]
    8ef8:	2706      	movs	r7, #6
    8efa:	6823      	ldr	r3, [r4, #0]
    8efc:	401f      	ands	r7, r3
    8efe:	d027      	beq.n	8f50 <_printf_common+0x88>
    8f00:	0023      	movs	r3, r4
    8f02:	3343      	adds	r3, #67	; 0x43
    8f04:	781b      	ldrb	r3, [r3, #0]
    8f06:	1e5a      	subs	r2, r3, #1
    8f08:	4193      	sbcs	r3, r2
    8f0a:	6822      	ldr	r2, [r4, #0]
    8f0c:	0692      	lsls	r2, r2, #26
    8f0e:	d430      	bmi.n	8f72 <_printf_common+0xaa>
    8f10:	0022      	movs	r2, r4
    8f12:	9901      	ldr	r1, [sp, #4]
    8f14:	3243      	adds	r2, #67	; 0x43
    8f16:	9800      	ldr	r0, [sp, #0]
    8f18:	9e08      	ldr	r6, [sp, #32]
    8f1a:	47b0      	blx	r6
    8f1c:	1c43      	adds	r3, r0, #1
    8f1e:	d025      	beq.n	8f6c <_printf_common+0xa4>
    8f20:	2306      	movs	r3, #6
    8f22:	6820      	ldr	r0, [r4, #0]
    8f24:	682a      	ldr	r2, [r5, #0]
    8f26:	68e1      	ldr	r1, [r4, #12]
    8f28:	4003      	ands	r3, r0
    8f2a:	2500      	movs	r5, #0
    8f2c:	2b04      	cmp	r3, #4
    8f2e:	d103      	bne.n	8f38 <_printf_common+0x70>
    8f30:	1a8d      	subs	r5, r1, r2
    8f32:	43eb      	mvns	r3, r5
    8f34:	17db      	asrs	r3, r3, #31
    8f36:	401d      	ands	r5, r3
    8f38:	68a3      	ldr	r3, [r4, #8]
    8f3a:	6922      	ldr	r2, [r4, #16]
    8f3c:	4293      	cmp	r3, r2
    8f3e:	dd01      	ble.n	8f44 <_printf_common+0x7c>
    8f40:	1a9b      	subs	r3, r3, r2
    8f42:	18ed      	adds	r5, r5, r3
    8f44:	2700      	movs	r7, #0
    8f46:	42bd      	cmp	r5, r7
    8f48:	d120      	bne.n	8f8c <_printf_common+0xc4>
    8f4a:	2000      	movs	r0, #0
    8f4c:	e010      	b.n	8f70 <_printf_common+0xa8>
    8f4e:	3701      	adds	r7, #1
    8f50:	68e3      	ldr	r3, [r4, #12]
    8f52:	682a      	ldr	r2, [r5, #0]
    8f54:	1a9b      	subs	r3, r3, r2
    8f56:	429f      	cmp	r7, r3
    8f58:	dad2      	bge.n	8f00 <_printf_common+0x38>
    8f5a:	0022      	movs	r2, r4
    8f5c:	2301      	movs	r3, #1
    8f5e:	3219      	adds	r2, #25
    8f60:	9901      	ldr	r1, [sp, #4]
    8f62:	9800      	ldr	r0, [sp, #0]
    8f64:	9e08      	ldr	r6, [sp, #32]
    8f66:	47b0      	blx	r6
    8f68:	1c43      	adds	r3, r0, #1
    8f6a:	d1f0      	bne.n	8f4e <_printf_common+0x86>
    8f6c:	2001      	movs	r0, #1
    8f6e:	4240      	negs	r0, r0
    8f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8f72:	2030      	movs	r0, #48	; 0x30
    8f74:	18e1      	adds	r1, r4, r3
    8f76:	3143      	adds	r1, #67	; 0x43
    8f78:	7008      	strb	r0, [r1, #0]
    8f7a:	0021      	movs	r1, r4
    8f7c:	1c5a      	adds	r2, r3, #1
    8f7e:	3145      	adds	r1, #69	; 0x45
    8f80:	7809      	ldrb	r1, [r1, #0]
    8f82:	18a2      	adds	r2, r4, r2
    8f84:	3243      	adds	r2, #67	; 0x43
    8f86:	3302      	adds	r3, #2
    8f88:	7011      	strb	r1, [r2, #0]
    8f8a:	e7c1      	b.n	8f10 <_printf_common+0x48>
    8f8c:	0022      	movs	r2, r4
    8f8e:	2301      	movs	r3, #1
    8f90:	321a      	adds	r2, #26
    8f92:	9901      	ldr	r1, [sp, #4]
    8f94:	9800      	ldr	r0, [sp, #0]
    8f96:	9e08      	ldr	r6, [sp, #32]
    8f98:	47b0      	blx	r6
    8f9a:	1c43      	adds	r3, r0, #1
    8f9c:	d0e6      	beq.n	8f6c <_printf_common+0xa4>
    8f9e:	3701      	adds	r7, #1
    8fa0:	e7d1      	b.n	8f46 <_printf_common+0x7e>
	...

00008fa4 <_printf_i>:
    8fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fa6:	b08b      	sub	sp, #44	; 0x2c
    8fa8:	9206      	str	r2, [sp, #24]
    8faa:	000a      	movs	r2, r1
    8fac:	3243      	adds	r2, #67	; 0x43
    8fae:	9307      	str	r3, [sp, #28]
    8fb0:	9005      	str	r0, [sp, #20]
    8fb2:	9204      	str	r2, [sp, #16]
    8fb4:	7e0a      	ldrb	r2, [r1, #24]
    8fb6:	000c      	movs	r4, r1
    8fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8fba:	2a6e      	cmp	r2, #110	; 0x6e
    8fbc:	d100      	bne.n	8fc0 <_printf_i+0x1c>
    8fbe:	e08f      	b.n	90e0 <_printf_i+0x13c>
    8fc0:	d817      	bhi.n	8ff2 <_printf_i+0x4e>
    8fc2:	2a63      	cmp	r2, #99	; 0x63
    8fc4:	d02c      	beq.n	9020 <_printf_i+0x7c>
    8fc6:	d808      	bhi.n	8fda <_printf_i+0x36>
    8fc8:	2a00      	cmp	r2, #0
    8fca:	d100      	bne.n	8fce <_printf_i+0x2a>
    8fcc:	e099      	b.n	9102 <_printf_i+0x15e>
    8fce:	2a58      	cmp	r2, #88	; 0x58
    8fd0:	d054      	beq.n	907c <_printf_i+0xd8>
    8fd2:	0026      	movs	r6, r4
    8fd4:	3642      	adds	r6, #66	; 0x42
    8fd6:	7032      	strb	r2, [r6, #0]
    8fd8:	e029      	b.n	902e <_printf_i+0x8a>
    8fda:	2a64      	cmp	r2, #100	; 0x64
    8fdc:	d001      	beq.n	8fe2 <_printf_i+0x3e>
    8fde:	2a69      	cmp	r2, #105	; 0x69
    8fe0:	d1f7      	bne.n	8fd2 <_printf_i+0x2e>
    8fe2:	6821      	ldr	r1, [r4, #0]
    8fe4:	681a      	ldr	r2, [r3, #0]
    8fe6:	0608      	lsls	r0, r1, #24
    8fe8:	d523      	bpl.n	9032 <_printf_i+0x8e>
    8fea:	1d11      	adds	r1, r2, #4
    8fec:	6019      	str	r1, [r3, #0]
    8fee:	6815      	ldr	r5, [r2, #0]
    8ff0:	e025      	b.n	903e <_printf_i+0x9a>
    8ff2:	2a73      	cmp	r2, #115	; 0x73
    8ff4:	d100      	bne.n	8ff8 <_printf_i+0x54>
    8ff6:	e088      	b.n	910a <_printf_i+0x166>
    8ff8:	d808      	bhi.n	900c <_printf_i+0x68>
    8ffa:	2a6f      	cmp	r2, #111	; 0x6f
    8ffc:	d029      	beq.n	9052 <_printf_i+0xae>
    8ffe:	2a70      	cmp	r2, #112	; 0x70
    9000:	d1e7      	bne.n	8fd2 <_printf_i+0x2e>
    9002:	2220      	movs	r2, #32
    9004:	6809      	ldr	r1, [r1, #0]
    9006:	430a      	orrs	r2, r1
    9008:	6022      	str	r2, [r4, #0]
    900a:	e003      	b.n	9014 <_printf_i+0x70>
    900c:	2a75      	cmp	r2, #117	; 0x75
    900e:	d020      	beq.n	9052 <_printf_i+0xae>
    9010:	2a78      	cmp	r2, #120	; 0x78
    9012:	d1de      	bne.n	8fd2 <_printf_i+0x2e>
    9014:	0022      	movs	r2, r4
    9016:	2178      	movs	r1, #120	; 0x78
    9018:	3245      	adds	r2, #69	; 0x45
    901a:	7011      	strb	r1, [r2, #0]
    901c:	4a6c      	ldr	r2, [pc, #432]	; (91d0 <_printf_i+0x22c>)
    901e:	e030      	b.n	9082 <_printf_i+0xde>
    9020:	000e      	movs	r6, r1
    9022:	681a      	ldr	r2, [r3, #0]
    9024:	3642      	adds	r6, #66	; 0x42
    9026:	1d11      	adds	r1, r2, #4
    9028:	6019      	str	r1, [r3, #0]
    902a:	6813      	ldr	r3, [r2, #0]
    902c:	7033      	strb	r3, [r6, #0]
    902e:	2301      	movs	r3, #1
    9030:	e079      	b.n	9126 <_printf_i+0x182>
    9032:	0649      	lsls	r1, r1, #25
    9034:	d5d9      	bpl.n	8fea <_printf_i+0x46>
    9036:	1d11      	adds	r1, r2, #4
    9038:	6019      	str	r1, [r3, #0]
    903a:	2300      	movs	r3, #0
    903c:	5ed5      	ldrsh	r5, [r2, r3]
    903e:	2d00      	cmp	r5, #0
    9040:	da03      	bge.n	904a <_printf_i+0xa6>
    9042:	232d      	movs	r3, #45	; 0x2d
    9044:	9a04      	ldr	r2, [sp, #16]
    9046:	426d      	negs	r5, r5
    9048:	7013      	strb	r3, [r2, #0]
    904a:	4b62      	ldr	r3, [pc, #392]	; (91d4 <_printf_i+0x230>)
    904c:	270a      	movs	r7, #10
    904e:	9303      	str	r3, [sp, #12]
    9050:	e02f      	b.n	90b2 <_printf_i+0x10e>
    9052:	6820      	ldr	r0, [r4, #0]
    9054:	6819      	ldr	r1, [r3, #0]
    9056:	0605      	lsls	r5, r0, #24
    9058:	d503      	bpl.n	9062 <_printf_i+0xbe>
    905a:	1d08      	adds	r0, r1, #4
    905c:	6018      	str	r0, [r3, #0]
    905e:	680d      	ldr	r5, [r1, #0]
    9060:	e005      	b.n	906e <_printf_i+0xca>
    9062:	0640      	lsls	r0, r0, #25
    9064:	d5f9      	bpl.n	905a <_printf_i+0xb6>
    9066:	680d      	ldr	r5, [r1, #0]
    9068:	1d08      	adds	r0, r1, #4
    906a:	6018      	str	r0, [r3, #0]
    906c:	b2ad      	uxth	r5, r5
    906e:	4b59      	ldr	r3, [pc, #356]	; (91d4 <_printf_i+0x230>)
    9070:	2708      	movs	r7, #8
    9072:	9303      	str	r3, [sp, #12]
    9074:	2a6f      	cmp	r2, #111	; 0x6f
    9076:	d018      	beq.n	90aa <_printf_i+0x106>
    9078:	270a      	movs	r7, #10
    907a:	e016      	b.n	90aa <_printf_i+0x106>
    907c:	3145      	adds	r1, #69	; 0x45
    907e:	700a      	strb	r2, [r1, #0]
    9080:	4a54      	ldr	r2, [pc, #336]	; (91d4 <_printf_i+0x230>)
    9082:	9203      	str	r2, [sp, #12]
    9084:	681a      	ldr	r2, [r3, #0]
    9086:	6821      	ldr	r1, [r4, #0]
    9088:	1d10      	adds	r0, r2, #4
    908a:	6018      	str	r0, [r3, #0]
    908c:	6815      	ldr	r5, [r2, #0]
    908e:	0608      	lsls	r0, r1, #24
    9090:	d522      	bpl.n	90d8 <_printf_i+0x134>
    9092:	07cb      	lsls	r3, r1, #31
    9094:	d502      	bpl.n	909c <_printf_i+0xf8>
    9096:	2320      	movs	r3, #32
    9098:	4319      	orrs	r1, r3
    909a:	6021      	str	r1, [r4, #0]
    909c:	2710      	movs	r7, #16
    909e:	2d00      	cmp	r5, #0
    90a0:	d103      	bne.n	90aa <_printf_i+0x106>
    90a2:	2320      	movs	r3, #32
    90a4:	6822      	ldr	r2, [r4, #0]
    90a6:	439a      	bics	r2, r3
    90a8:	6022      	str	r2, [r4, #0]
    90aa:	0023      	movs	r3, r4
    90ac:	2200      	movs	r2, #0
    90ae:	3343      	adds	r3, #67	; 0x43
    90b0:	701a      	strb	r2, [r3, #0]
    90b2:	6863      	ldr	r3, [r4, #4]
    90b4:	60a3      	str	r3, [r4, #8]
    90b6:	2b00      	cmp	r3, #0
    90b8:	db5c      	blt.n	9174 <_printf_i+0x1d0>
    90ba:	2204      	movs	r2, #4
    90bc:	6821      	ldr	r1, [r4, #0]
    90be:	4391      	bics	r1, r2
    90c0:	6021      	str	r1, [r4, #0]
    90c2:	2d00      	cmp	r5, #0
    90c4:	d158      	bne.n	9178 <_printf_i+0x1d4>
    90c6:	9e04      	ldr	r6, [sp, #16]
    90c8:	2b00      	cmp	r3, #0
    90ca:	d064      	beq.n	9196 <_printf_i+0x1f2>
    90cc:	0026      	movs	r6, r4
    90ce:	9b03      	ldr	r3, [sp, #12]
    90d0:	3642      	adds	r6, #66	; 0x42
    90d2:	781b      	ldrb	r3, [r3, #0]
    90d4:	7033      	strb	r3, [r6, #0]
    90d6:	e05e      	b.n	9196 <_printf_i+0x1f2>
    90d8:	0648      	lsls	r0, r1, #25
    90da:	d5da      	bpl.n	9092 <_printf_i+0xee>
    90dc:	b2ad      	uxth	r5, r5
    90de:	e7d8      	b.n	9092 <_printf_i+0xee>
    90e0:	6809      	ldr	r1, [r1, #0]
    90e2:	681a      	ldr	r2, [r3, #0]
    90e4:	0608      	lsls	r0, r1, #24
    90e6:	d505      	bpl.n	90f4 <_printf_i+0x150>
    90e8:	1d11      	adds	r1, r2, #4
    90ea:	6019      	str	r1, [r3, #0]
    90ec:	6813      	ldr	r3, [r2, #0]
    90ee:	6962      	ldr	r2, [r4, #20]
    90f0:	601a      	str	r2, [r3, #0]
    90f2:	e006      	b.n	9102 <_printf_i+0x15e>
    90f4:	0649      	lsls	r1, r1, #25
    90f6:	d5f7      	bpl.n	90e8 <_printf_i+0x144>
    90f8:	1d11      	adds	r1, r2, #4
    90fa:	6019      	str	r1, [r3, #0]
    90fc:	6813      	ldr	r3, [r2, #0]
    90fe:	8aa2      	ldrh	r2, [r4, #20]
    9100:	801a      	strh	r2, [r3, #0]
    9102:	2300      	movs	r3, #0
    9104:	9e04      	ldr	r6, [sp, #16]
    9106:	6123      	str	r3, [r4, #16]
    9108:	e054      	b.n	91b4 <_printf_i+0x210>
    910a:	681a      	ldr	r2, [r3, #0]
    910c:	1d11      	adds	r1, r2, #4
    910e:	6019      	str	r1, [r3, #0]
    9110:	6816      	ldr	r6, [r2, #0]
    9112:	2100      	movs	r1, #0
    9114:	6862      	ldr	r2, [r4, #4]
    9116:	0030      	movs	r0, r6
    9118:	f000 f950 	bl	93bc <memchr>
    911c:	2800      	cmp	r0, #0
    911e:	d001      	beq.n	9124 <_printf_i+0x180>
    9120:	1b80      	subs	r0, r0, r6
    9122:	6060      	str	r0, [r4, #4]
    9124:	6863      	ldr	r3, [r4, #4]
    9126:	6123      	str	r3, [r4, #16]
    9128:	2300      	movs	r3, #0
    912a:	9a04      	ldr	r2, [sp, #16]
    912c:	7013      	strb	r3, [r2, #0]
    912e:	e041      	b.n	91b4 <_printf_i+0x210>
    9130:	6923      	ldr	r3, [r4, #16]
    9132:	0032      	movs	r2, r6
    9134:	9906      	ldr	r1, [sp, #24]
    9136:	9805      	ldr	r0, [sp, #20]
    9138:	9d07      	ldr	r5, [sp, #28]
    913a:	47a8      	blx	r5
    913c:	1c43      	adds	r3, r0, #1
    913e:	d043      	beq.n	91c8 <_printf_i+0x224>
    9140:	6823      	ldr	r3, [r4, #0]
    9142:	2500      	movs	r5, #0
    9144:	079b      	lsls	r3, r3, #30
    9146:	d40f      	bmi.n	9168 <_printf_i+0x1c4>
    9148:	9b09      	ldr	r3, [sp, #36]	; 0x24
    914a:	68e0      	ldr	r0, [r4, #12]
    914c:	4298      	cmp	r0, r3
    914e:	da3d      	bge.n	91cc <_printf_i+0x228>
    9150:	0018      	movs	r0, r3
    9152:	e03b      	b.n	91cc <_printf_i+0x228>
    9154:	0022      	movs	r2, r4
    9156:	2301      	movs	r3, #1
    9158:	3219      	adds	r2, #25
    915a:	9906      	ldr	r1, [sp, #24]
    915c:	9805      	ldr	r0, [sp, #20]
    915e:	9e07      	ldr	r6, [sp, #28]
    9160:	47b0      	blx	r6
    9162:	1c43      	adds	r3, r0, #1
    9164:	d030      	beq.n	91c8 <_printf_i+0x224>
    9166:	3501      	adds	r5, #1
    9168:	68e3      	ldr	r3, [r4, #12]
    916a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    916c:	1a9b      	subs	r3, r3, r2
    916e:	429d      	cmp	r5, r3
    9170:	dbf0      	blt.n	9154 <_printf_i+0x1b0>
    9172:	e7e9      	b.n	9148 <_printf_i+0x1a4>
    9174:	2d00      	cmp	r5, #0
    9176:	d0a9      	beq.n	90cc <_printf_i+0x128>
    9178:	9e04      	ldr	r6, [sp, #16]
    917a:	0028      	movs	r0, r5
    917c:	0039      	movs	r1, r7
    917e:	f7fe feb5 	bl	7eec <__aeabi_uidivmod>
    9182:	9b03      	ldr	r3, [sp, #12]
    9184:	3e01      	subs	r6, #1
    9186:	5c5b      	ldrb	r3, [r3, r1]
    9188:	0028      	movs	r0, r5
    918a:	7033      	strb	r3, [r6, #0]
    918c:	0039      	movs	r1, r7
    918e:	f7fe fe27 	bl	7de0 <__udivsi3>
    9192:	1e05      	subs	r5, r0, #0
    9194:	d1f1      	bne.n	917a <_printf_i+0x1d6>
    9196:	2f08      	cmp	r7, #8
    9198:	d109      	bne.n	91ae <_printf_i+0x20a>
    919a:	6823      	ldr	r3, [r4, #0]
    919c:	07db      	lsls	r3, r3, #31
    919e:	d506      	bpl.n	91ae <_printf_i+0x20a>
    91a0:	6863      	ldr	r3, [r4, #4]
    91a2:	6922      	ldr	r2, [r4, #16]
    91a4:	4293      	cmp	r3, r2
    91a6:	dc02      	bgt.n	91ae <_printf_i+0x20a>
    91a8:	2330      	movs	r3, #48	; 0x30
    91aa:	3e01      	subs	r6, #1
    91ac:	7033      	strb	r3, [r6, #0]
    91ae:	9b04      	ldr	r3, [sp, #16]
    91b0:	1b9b      	subs	r3, r3, r6
    91b2:	6123      	str	r3, [r4, #16]
    91b4:	9b07      	ldr	r3, [sp, #28]
    91b6:	aa09      	add	r2, sp, #36	; 0x24
    91b8:	9300      	str	r3, [sp, #0]
    91ba:	0021      	movs	r1, r4
    91bc:	9b06      	ldr	r3, [sp, #24]
    91be:	9805      	ldr	r0, [sp, #20]
    91c0:	f7ff fe82 	bl	8ec8 <_printf_common>
    91c4:	1c43      	adds	r3, r0, #1
    91c6:	d1b3      	bne.n	9130 <_printf_i+0x18c>
    91c8:	2001      	movs	r0, #1
    91ca:	4240      	negs	r0, r0
    91cc:	b00b      	add	sp, #44	; 0x2c
    91ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91d0:	0000a872 	.word	0x0000a872
    91d4:	0000a861 	.word	0x0000a861

000091d8 <_putc_r>:
    91d8:	b570      	push	{r4, r5, r6, lr}
    91da:	0006      	movs	r6, r0
    91dc:	000d      	movs	r5, r1
    91de:	0014      	movs	r4, r2
    91e0:	2800      	cmp	r0, #0
    91e2:	d004      	beq.n	91ee <_putc_r+0x16>
    91e4:	6983      	ldr	r3, [r0, #24]
    91e6:	2b00      	cmp	r3, #0
    91e8:	d101      	bne.n	91ee <_putc_r+0x16>
    91ea:	f7ff fb75 	bl	88d8 <__sinit>
    91ee:	4b12      	ldr	r3, [pc, #72]	; (9238 <_putc_r+0x60>)
    91f0:	429c      	cmp	r4, r3
    91f2:	d111      	bne.n	9218 <_putc_r+0x40>
    91f4:	6874      	ldr	r4, [r6, #4]
    91f6:	68a3      	ldr	r3, [r4, #8]
    91f8:	3b01      	subs	r3, #1
    91fa:	60a3      	str	r3, [r4, #8]
    91fc:	2b00      	cmp	r3, #0
    91fe:	da05      	bge.n	920c <_putc_r+0x34>
    9200:	69a2      	ldr	r2, [r4, #24]
    9202:	4293      	cmp	r3, r2
    9204:	db12      	blt.n	922c <_putc_r+0x54>
    9206:	b2eb      	uxtb	r3, r5
    9208:	2b0a      	cmp	r3, #10
    920a:	d00f      	beq.n	922c <_putc_r+0x54>
    920c:	6823      	ldr	r3, [r4, #0]
    920e:	b2e8      	uxtb	r0, r5
    9210:	1c5a      	adds	r2, r3, #1
    9212:	6022      	str	r2, [r4, #0]
    9214:	701d      	strb	r5, [r3, #0]
    9216:	bd70      	pop	{r4, r5, r6, pc}
    9218:	4b08      	ldr	r3, [pc, #32]	; (923c <_putc_r+0x64>)
    921a:	429c      	cmp	r4, r3
    921c:	d101      	bne.n	9222 <_putc_r+0x4a>
    921e:	68b4      	ldr	r4, [r6, #8]
    9220:	e7e9      	b.n	91f6 <_putc_r+0x1e>
    9222:	4b07      	ldr	r3, [pc, #28]	; (9240 <_putc_r+0x68>)
    9224:	429c      	cmp	r4, r3
    9226:	d1e6      	bne.n	91f6 <_putc_r+0x1e>
    9228:	68f4      	ldr	r4, [r6, #12]
    922a:	e7e4      	b.n	91f6 <_putc_r+0x1e>
    922c:	0022      	movs	r2, r4
    922e:	0029      	movs	r1, r5
    9230:	0030      	movs	r0, r6
    9232:	f7ff f98d 	bl	8550 <__swbuf_r>
    9236:	e7ee      	b.n	9216 <_putc_r+0x3e>
    9238:	0000a810 	.word	0x0000a810
    923c:	0000a830 	.word	0x0000a830
    9240:	0000a7f0 	.word	0x0000a7f0

00009244 <_sbrk_r>:
    9244:	2300      	movs	r3, #0
    9246:	b570      	push	{r4, r5, r6, lr}
    9248:	4c06      	ldr	r4, [pc, #24]	; (9264 <_sbrk_r+0x20>)
    924a:	0005      	movs	r5, r0
    924c:	0008      	movs	r0, r1
    924e:	6023      	str	r3, [r4, #0]
    9250:	f7fc fab0 	bl	57b4 <_sbrk>
    9254:	1c43      	adds	r3, r0, #1
    9256:	d103      	bne.n	9260 <_sbrk_r+0x1c>
    9258:	6823      	ldr	r3, [r4, #0]
    925a:	2b00      	cmp	r3, #0
    925c:	d000      	beq.n	9260 <_sbrk_r+0x1c>
    925e:	602b      	str	r3, [r5, #0]
    9260:	bd70      	pop	{r4, r5, r6, pc}
    9262:	46c0      	nop			; (mov r8, r8)
    9264:	20000cd0 	.word	0x20000cd0

00009268 <__sread>:
    9268:	b570      	push	{r4, r5, r6, lr}
    926a:	000c      	movs	r4, r1
    926c:	250e      	movs	r5, #14
    926e:	5f49      	ldrsh	r1, [r1, r5]
    9270:	f000 f8b2 	bl	93d8 <_read_r>
    9274:	2800      	cmp	r0, #0
    9276:	db03      	blt.n	9280 <__sread+0x18>
    9278:	6d63      	ldr	r3, [r4, #84]	; 0x54
    927a:	181b      	adds	r3, r3, r0
    927c:	6563      	str	r3, [r4, #84]	; 0x54
    927e:	bd70      	pop	{r4, r5, r6, pc}
    9280:	89a3      	ldrh	r3, [r4, #12]
    9282:	4a02      	ldr	r2, [pc, #8]	; (928c <__sread+0x24>)
    9284:	4013      	ands	r3, r2
    9286:	81a3      	strh	r3, [r4, #12]
    9288:	e7f9      	b.n	927e <__sread+0x16>
    928a:	46c0      	nop			; (mov r8, r8)
    928c:	ffffefff 	.word	0xffffefff

00009290 <__swrite>:
    9290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9292:	001f      	movs	r7, r3
    9294:	898b      	ldrh	r3, [r1, #12]
    9296:	0005      	movs	r5, r0
    9298:	000c      	movs	r4, r1
    929a:	0016      	movs	r6, r2
    929c:	05db      	lsls	r3, r3, #23
    929e:	d505      	bpl.n	92ac <__swrite+0x1c>
    92a0:	230e      	movs	r3, #14
    92a2:	5ec9      	ldrsh	r1, [r1, r3]
    92a4:	2200      	movs	r2, #0
    92a6:	2302      	movs	r3, #2
    92a8:	f000 f874 	bl	9394 <_lseek_r>
    92ac:	89a3      	ldrh	r3, [r4, #12]
    92ae:	4a05      	ldr	r2, [pc, #20]	; (92c4 <__swrite+0x34>)
    92b0:	0028      	movs	r0, r5
    92b2:	4013      	ands	r3, r2
    92b4:	81a3      	strh	r3, [r4, #12]
    92b6:	0032      	movs	r2, r6
    92b8:	230e      	movs	r3, #14
    92ba:	5ee1      	ldrsh	r1, [r4, r3]
    92bc:	003b      	movs	r3, r7
    92be:	f000 f81f 	bl	9300 <_write_r>
    92c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92c4:	ffffefff 	.word	0xffffefff

000092c8 <__sseek>:
    92c8:	b570      	push	{r4, r5, r6, lr}
    92ca:	000c      	movs	r4, r1
    92cc:	250e      	movs	r5, #14
    92ce:	5f49      	ldrsh	r1, [r1, r5]
    92d0:	f000 f860 	bl	9394 <_lseek_r>
    92d4:	89a3      	ldrh	r3, [r4, #12]
    92d6:	1c42      	adds	r2, r0, #1
    92d8:	d103      	bne.n	92e2 <__sseek+0x1a>
    92da:	4a05      	ldr	r2, [pc, #20]	; (92f0 <__sseek+0x28>)
    92dc:	4013      	ands	r3, r2
    92de:	81a3      	strh	r3, [r4, #12]
    92e0:	bd70      	pop	{r4, r5, r6, pc}
    92e2:	2280      	movs	r2, #128	; 0x80
    92e4:	0152      	lsls	r2, r2, #5
    92e6:	4313      	orrs	r3, r2
    92e8:	81a3      	strh	r3, [r4, #12]
    92ea:	6560      	str	r0, [r4, #84]	; 0x54
    92ec:	e7f8      	b.n	92e0 <__sseek+0x18>
    92ee:	46c0      	nop			; (mov r8, r8)
    92f0:	ffffefff 	.word	0xffffefff

000092f4 <__sclose>:
    92f4:	b510      	push	{r4, lr}
    92f6:	230e      	movs	r3, #14
    92f8:	5ec9      	ldrsh	r1, [r1, r3]
    92fa:	f000 f815 	bl	9328 <_close_r>
    92fe:	bd10      	pop	{r4, pc}

00009300 <_write_r>:
    9300:	b570      	push	{r4, r5, r6, lr}
    9302:	0005      	movs	r5, r0
    9304:	0008      	movs	r0, r1
    9306:	0011      	movs	r1, r2
    9308:	2200      	movs	r2, #0
    930a:	4c06      	ldr	r4, [pc, #24]	; (9324 <_write_r+0x24>)
    930c:	6022      	str	r2, [r4, #0]
    930e:	001a      	movs	r2, r3
    9310:	f7fa fb30 	bl	3974 <_write>
    9314:	1c43      	adds	r3, r0, #1
    9316:	d103      	bne.n	9320 <_write_r+0x20>
    9318:	6823      	ldr	r3, [r4, #0]
    931a:	2b00      	cmp	r3, #0
    931c:	d000      	beq.n	9320 <_write_r+0x20>
    931e:	602b      	str	r3, [r5, #0]
    9320:	bd70      	pop	{r4, r5, r6, pc}
    9322:	46c0      	nop			; (mov r8, r8)
    9324:	20000cd0 	.word	0x20000cd0

00009328 <_close_r>:
    9328:	2300      	movs	r3, #0
    932a:	b570      	push	{r4, r5, r6, lr}
    932c:	4c06      	ldr	r4, [pc, #24]	; (9348 <_close_r+0x20>)
    932e:	0005      	movs	r5, r0
    9330:	0008      	movs	r0, r1
    9332:	6023      	str	r3, [r4, #0]
    9334:	f7fc fa50 	bl	57d8 <_close>
    9338:	1c43      	adds	r3, r0, #1
    933a:	d103      	bne.n	9344 <_close_r+0x1c>
    933c:	6823      	ldr	r3, [r4, #0]
    933e:	2b00      	cmp	r3, #0
    9340:	d000      	beq.n	9344 <_close_r+0x1c>
    9342:	602b      	str	r3, [r5, #0]
    9344:	bd70      	pop	{r4, r5, r6, pc}
    9346:	46c0      	nop			; (mov r8, r8)
    9348:	20000cd0 	.word	0x20000cd0

0000934c <_fstat_r>:
    934c:	2300      	movs	r3, #0
    934e:	b570      	push	{r4, r5, r6, lr}
    9350:	4c06      	ldr	r4, [pc, #24]	; (936c <_fstat_r+0x20>)
    9352:	0005      	movs	r5, r0
    9354:	0008      	movs	r0, r1
    9356:	0011      	movs	r1, r2
    9358:	6023      	str	r3, [r4, #0]
    935a:	f7fc fa40 	bl	57de <_fstat>
    935e:	1c43      	adds	r3, r0, #1
    9360:	d103      	bne.n	936a <_fstat_r+0x1e>
    9362:	6823      	ldr	r3, [r4, #0]
    9364:	2b00      	cmp	r3, #0
    9366:	d000      	beq.n	936a <_fstat_r+0x1e>
    9368:	602b      	str	r3, [r5, #0]
    936a:	bd70      	pop	{r4, r5, r6, pc}
    936c:	20000cd0 	.word	0x20000cd0

00009370 <_isatty_r>:
    9370:	2300      	movs	r3, #0
    9372:	b570      	push	{r4, r5, r6, lr}
    9374:	4c06      	ldr	r4, [pc, #24]	; (9390 <_isatty_r+0x20>)
    9376:	0005      	movs	r5, r0
    9378:	0008      	movs	r0, r1
    937a:	6023      	str	r3, [r4, #0]
    937c:	f7fc fa34 	bl	57e8 <_isatty>
    9380:	1c43      	adds	r3, r0, #1
    9382:	d103      	bne.n	938c <_isatty_r+0x1c>
    9384:	6823      	ldr	r3, [r4, #0]
    9386:	2b00      	cmp	r3, #0
    9388:	d000      	beq.n	938c <_isatty_r+0x1c>
    938a:	602b      	str	r3, [r5, #0]
    938c:	bd70      	pop	{r4, r5, r6, pc}
    938e:	46c0      	nop			; (mov r8, r8)
    9390:	20000cd0 	.word	0x20000cd0

00009394 <_lseek_r>:
    9394:	b570      	push	{r4, r5, r6, lr}
    9396:	0005      	movs	r5, r0
    9398:	0008      	movs	r0, r1
    939a:	0011      	movs	r1, r2
    939c:	2200      	movs	r2, #0
    939e:	4c06      	ldr	r4, [pc, #24]	; (93b8 <_lseek_r+0x24>)
    93a0:	6022      	str	r2, [r4, #0]
    93a2:	001a      	movs	r2, r3
    93a4:	f7fc fa22 	bl	57ec <_lseek>
    93a8:	1c43      	adds	r3, r0, #1
    93aa:	d103      	bne.n	93b4 <_lseek_r+0x20>
    93ac:	6823      	ldr	r3, [r4, #0]
    93ae:	2b00      	cmp	r3, #0
    93b0:	d000      	beq.n	93b4 <_lseek_r+0x20>
    93b2:	602b      	str	r3, [r5, #0]
    93b4:	bd70      	pop	{r4, r5, r6, pc}
    93b6:	46c0      	nop			; (mov r8, r8)
    93b8:	20000cd0 	.word	0x20000cd0

000093bc <memchr>:
    93bc:	b2c9      	uxtb	r1, r1
    93be:	1882      	adds	r2, r0, r2
    93c0:	4290      	cmp	r0, r2
    93c2:	d101      	bne.n	93c8 <memchr+0xc>
    93c4:	2000      	movs	r0, #0
    93c6:	4770      	bx	lr
    93c8:	7803      	ldrb	r3, [r0, #0]
    93ca:	428b      	cmp	r3, r1
    93cc:	d0fb      	beq.n	93c6 <memchr+0xa>
    93ce:	3001      	adds	r0, #1
    93d0:	e7f6      	b.n	93c0 <memchr+0x4>

000093d2 <__malloc_lock>:
    93d2:	4770      	bx	lr

000093d4 <__malloc_unlock>:
    93d4:	4770      	bx	lr
	...

000093d8 <_read_r>:
    93d8:	b570      	push	{r4, r5, r6, lr}
    93da:	0005      	movs	r5, r0
    93dc:	0008      	movs	r0, r1
    93de:	0011      	movs	r1, r2
    93e0:	2200      	movs	r2, #0
    93e2:	4c06      	ldr	r4, [pc, #24]	; (93fc <_read_r+0x24>)
    93e4:	6022      	str	r2, [r4, #0]
    93e6:	001a      	movs	r2, r3
    93e8:	f7fa faa2 	bl	3930 <_read>
    93ec:	1c43      	adds	r3, r0, #1
    93ee:	d103      	bne.n	93f8 <_read_r+0x20>
    93f0:	6823      	ldr	r3, [r4, #0]
    93f2:	2b00      	cmp	r3, #0
    93f4:	d000      	beq.n	93f8 <_read_r+0x20>
    93f6:	602b      	str	r3, [r5, #0]
    93f8:	bd70      	pop	{r4, r5, r6, pc}
    93fa:	46c0      	nop			; (mov r8, r8)
    93fc:	20000cd0 	.word	0x20000cd0

00009400 <__FUNCTION__.13186>:
    9400:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    9410:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    9420:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    9430:	6320746c 0000646d 00000d84 00000d54     lt cmd......T...
    9440:	00000d4c 00000d64 00000d5c 00000d7c     L...d...\...|...
    9450:	00000d6c 00000d74                       l...t...

00009458 <__FUNCTION__.12256>:
    9458:	5f666968 646e6573 00000000              hif_send....

00009464 <__FUNCTION__.12266>:
    9464:	5f666968 00727369                       hif_isr.

0000946c <__FUNCTION__.12272>:
    946c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000947c <__FUNCTION__.12284>:
    947c:	5f666968 65636572 00657669              hif_receive.

00009488 <__FUNCTION__.12300>:
    9488:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    9498:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    94a8:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    94b8:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    94c8:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    94d8:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    94e8:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    94f8:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    9508:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    9518:	6c616320 6361626c 7369206b 746f6e20      callback is not
    9528:	67657220 65747369 00646572 6b6f6353      registered.Scok
    9538:	63207465 626c6c61 206b6361 6e207369     et callback is n
    9548:	7220746f 73696765 65726574 00000064     ot registered...
    9558:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    9568:	20746f6e 69676572 72657473 00006465     not registered..
    9578:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    9588:	6e207369 7220746f 73696765 65726574     is not registere
    9598:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    95a8:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    95b8:	64657265 00000000 66696828 6e692029     ered....(hif) in
    95c8:	696c6176 72672064 2070756f 00004449     valid group ID..
    95d8:	66696828 6f682029 61207473 64207070     (hif) host app d
    95e8:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    95f8:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    9608:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    9618:	66696828 61462029 2065736c 65746e69     (hif) False inte
    9628:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    9638:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    9648:	7265746e 74707572 67657220 00000000     nterrupt reg....
    9658:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    9668:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    9678:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    9688:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    9698:	696c6176 72612064 656d7567 0000746e     valid argument..
    96a8:	20505041 75716552 65747365 69532064     APP Requested Si
    96b8:	6920657a 616c2073 72656772 61687420     ze is larger tha
    96c8:	6874206e 65722065 65766963 75622064     n the recived bu
    96d8:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    96e8:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    96f8:	65747365 64412064 73657264 65622073     ested Address be
    9708:	646e6f79 65687420 63657220 64657669     yond the recived
    9718:	66756220 20726566 72646461 20737365      buffer address 
    9728:	20646e61 676e656c 00006874 20705247     and length..GRp 
    9738:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    9748:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    9758:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    9768:	6b617720 74207075 63206568 00706968      wakup the chip.

00009778 <__FUNCTION__.12235>:
    9778:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00009784 <__FUNCTION__.12264>:
    9784:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00009794 <__FUNCTION__.12292>:
    9794:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    97a4:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    97b4:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    97c4:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    97d4:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    97e4:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    97f4:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    9804:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    9814:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    9824:	20706557 2079656b 65646e69 64252078     Wep key index %d
    9834:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    9844:	2079656b 676e656c 25206874 00000a64     key length %d...
    9854:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    9864:	656c2079 6874676e 00000000 65646e75     y length....unde
    9874:	656e6966 65732064 79742063 00006570     fined sec type..
    9884:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    9894:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    98a4:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    98b4:	69754220 2520646c 69542073 2520656d      Build %s Time %
    98c4:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    98d4:	69726420 20726576 20726576 7525203a      driver ver : %u
    98e4:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    98f4:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    9904:	313a3930 30343a37 00000000 206e754a     09:17:40....Jun 
    9914:	32203531 00383130 76697244 62207265     15 2018.Driver b
    9924:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    9934:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    9944:	65562065 6f697372 0000006e              e Version...

00009950 <__FUNCTION__.12098>:
    9950:	70696863 6b61775f 00000065              chip_wake...

0000995c <__FUNCTION__.12147>:
    995c:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    996c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    997c:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    998c:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    999c:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    99ac:	70696863 00000000 76697244 65567265     chip....DriverVe
    99bc:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

000099cc <__FUNCTION__.12145>:
    99cc:	645f6d6e 695f7672 0074696e              nm_drv_init.

000099d8 <__FUNCTION__.12152>:
    99d8:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    99e8:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    99f8:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    9a08:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    9a18:	73616c66 69642068 6c626173 61662065     flash disable fa
    9a28:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    9a38:	6c696166 696e6920 75622074 00000073     fail init bus...
    9a48:	6c696166 74206465 6e65206f 656c6261     failed to enable
    9a58:	746e6920 75727265 2e737470 0000002e      interrupts.....
    9a68:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    9a78:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    9a88:	20444920 0a786c25 00000000 00001d68      ID %lx.....h...
    9a98:	00001d68 00001d98 00001d1a 00001d3e     h...........>...
    9aa8:	00001d4c 00001d7e 00001d7e 00001dc6     L...~...~.......
    9ab8:	00001cfe 00001e00 00001e00 00001e00     ................
    9ac8:	00001e00 00001d5a cac4c9c3              ....Z.......

00009ad4 <__FUNCTION__.11451>:
    9ad4:	5f697073 00646d63                       spi_cmd.

00009adc <__FUNCTION__.11458>:
    9adc:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00009aec <__FUNCTION__.11467>:
    9aec:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00009af8 <__FUNCTION__.11483>:
    9af8:	5f697073 61746164 6165725f 00000064     spi_data_read...

00009b08 <__FUNCTION__.11498>:
    9b08:	5f697073 61746164 6972775f 00006574     spi_data_write..

00009b18 <__FUNCTION__.11510>:
    9b18:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00009b28 <__FUNCTION__.11521>:
    9b28:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00009b38 <__FUNCTION__.11533>:
    9b38:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00009b48 <__FUNCTION__.11546>:
    9b48:	735f6d6e 725f6970 00646165              nm_spi_read.

00009b54 <__FUNCTION__.11567>:
    9b54:	735f6d6e 695f6970 0074696e              nm_spi_init.

00009b60 <crc7_syndrome_table>:
    9b60:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    9b70:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    9b80:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    9b90:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    9ba0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    9bb0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    9bc0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    9bd0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    9be0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    9bf0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    9c00:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    9c10:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    9c20:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    9c30:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    9c40:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    9c50:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    9c60:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9c70:	6e692064 6e726574 72206c61 20646165     d internal read 
    9c80:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    9c90:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    9ca0:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    9cb0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9cc0:	6e692064 6e726574 72206c61 20646165     d internal read 
    9cd0:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    9ce0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    9cf0:	6e726574 77206c61 65746972 6f727020     ternal write pro
    9d00:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    9d10:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    9d20:	20646d63 64616572 69686320 64692070     cmd read chip id
    9d30:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9d40:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    9d50:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    9d60:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9d70:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    9d80:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    9d90:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    9da0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    9db0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    9dc0:	00000000 65736552 6e612074 65722064     ....Reset and re
    9dd0:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    9de0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9df0:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    9e00:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    9e10:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    9e20:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    9e30:	69727720 62206574 6b636f6c 30252820      write block (%0
    9e40:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    9e50:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    9e60:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    9e70:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    9e80:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9e90:	61642064 62206174 6b636f6c 69727720     d data block wri
    9ea0:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    9eb0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9ec0:	656c6961 61642064 62206174 6b636f6c     ailed data block
    9ed0:	63726320 69727720 202c6574 20737562      crc write, bus 
    9ee0:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    9ef0:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    9f00:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    9f10:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    9f20:	72206174 6f707365 2065736e 64616572     ta response read
    9f30:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    9f40:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    9f50:	206b636f 61746164 69727720 2e2e6574     ock data write..
    9f60:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9f70:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    9f80:	73756220 72726520 2e2e726f 0000002e      bus error......
    9f90:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9fa0:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    9fb0:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    9fc0:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9fd0:	656c6961 61642064 72206174 6f707365     ailed data respo
    9fe0:	2065736e 64616572 7562202c 72652073     nse read, bus er
    9ff0:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    a000:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    a010:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    a020:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    a030:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    a040:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    a050:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    a060:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    a070:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    a080:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    a090:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    a0a0:	72202c64 20646165 20676572 38302528     d, read reg (%08
    a0b0:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    a0c0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    a0d0:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    a0e0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    a0f0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    a100:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    a110:	6e612074 65722064 20797274 25206425     t and retry %d %
    a120:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    a130:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    a140:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    a150:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    a160:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    a170:	74697277 65722065 25282067 29783830     write reg (%08x)
    a180:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    a190:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    a1a0:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    a1b0:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    a1c0:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    a1d0:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    a1e0:	4449206e 25203d20 000a0d64 00633123     n ID = %d...#1c.
    a1f0:	006f3123 00653123 00633223 006f3223     #1o.#1e.#2c.#2o.
    a200:	00653223 00633323 006f3323 00653323     #2e.#3c.#3o.#3e.
    a210:	00633423 006f3423 00653423 00633523     #4c.#4o.#4e.#5c.
    a220:	006f3523 00653523 00633623 006f3623     #5o.#5e.#6c.#6o.
    a230:	00653623 42000800 42000c00 42001000     #6e....B...B...B
    a240:	42001400 42001800 42001c00 00004ba6     ...B...B...B.K..
    a250:	00004ba2 00004ba2 00004c04 00004c04     .K...K...L...L..
    a260:	00004bba 00004bac 00004bc0 00004bf2     .K...K...K...K..
    a270:	00004d88 00004d68 00004d68 00004df4     .M..hM..hM...M..
    a280:	00004d7a 00004d96 00004d6c 00004da4     zM...M..lM...M..
    a290:	00004de4 42002c00 42003000 42003400     .M...,.B.0.B.4.B
    a2a0:	00006012 00006058 00005fec 00006074     .`..X`..._..t`..
    a2b0:	00005fec 00005fe4 00006026 00005fec     ._..._..&`..._..
    a2c0:	00005fec 00005fec 00005fec 00005fec     ._..._..._..._..
    a2d0:	00005f9a 00005fec 00005fec 00005fec     ._..._..._..._..
    a2e0:	00005fec 00005fec 00005fec 000060b2     ._..._..._...`..
    a2f0:	00005fec 00005fec 000060f6 00006058     ._..._...`..X`..
    a300:	00005fec 00006074 00005fec 00005fe4     ._..t`..._..._..
    a310:	00006026 00005fec 00005fec 00005fec     &`..._..._..._..
    a320:	00005fec 00005fec 00005f9a 00005fec     ._..._..._..._..
    a330:	00005fec 00005fec 00005fec 00005fec     ._..._..._..._..
    a340:	00005fec 000060b2 00005fec 00005fec     ._...`..._..._..
    a350:	000060f6                                .`..

0000a354 <tx_pwr_table>:
    a354:	03030304 00010203 fcfdfeff eff4f8fa     ................
    a364:	00006ab0 00006a9c 00006aac 00006aa0     .j...j...j...j..
    a374:	00006aac 00006aa4 00006aac 00006aa8     .j...j...j...j..

0000a384 <tc_interrupt_vectors.11908>:
    a384:	00141312 00007464 00007376 000073ac     ....dt..vs...s..
    a394:	00007464 000073ee 00007454 0000747c     dt...s..Tt..|t..
    a3a4:	00007466 00007882 00007882 000077f4     ft...x...x...w..
    a3b4:	00007882 00007852 00007882 0000785a     .x..Rx...x..Zx..
    a3c4:	00007882 00007862 00007882 0000786a     .x..bx...x..jx..
    a3d4:	00007882 00007872 00007882 0000787a     .x..rx...x..zx..
    a3e4:	00007a0c 000079fc 00007a44 00007a7e     .z...y..Dz..~z..
    a3f4:	00007ab8 00007af2 00007b2c 6e69616d     .z...z..,{..main
    a404:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    a414:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    a424:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
    a434:	206f7420 61657263 54206574 73205043      to create TCP s
    a444:	65767265 6f732072 74656b63 72726520     erver socket err
    a454:	0d21726f 00000000 66667562 3a5d315b     or!.....buff[1]:
    a464:	0d206425 0000000a 706f2031 00006e65     %d .....1 open..
    a474:	6c632031 0065736f 6f4e2031 67695320     1 close.1 No Sig
    a484:	206c616e 0000000d 706f2032 00006e65     nal ....2 open..
    a494:	6c632032 0065736f 6f4e2032 67695320     2 close.2 No Sig
    a4a4:	206c616e 0000000d 706f2033 00006e65     nal ....3 open..
    a4b4:	6c632033 0065736f 6f4e2033 67695320     3 close.3 No Sig
    a4c4:	206c616e 0000000d 706f2034 00006e65     nal ....4 open..
    a4d4:	6c632034 0065736f 6f4e2034 67695320     4 close.4 No Sig
    a4e4:	206c616e 0000000d 706f2035 00006e65     nal ....5 open..
    a4f4:	6c632035 0065736f 6f4e2035 67695320     5 close.5 No Sig
    a504:	206c616e 0000000d 706f2036 00006e65     nal ....6 open..
    a514:	6c632036 0065736f 6f4e2036 67695320     6 close.6 No Sig
    a524:	206c616e 0000000d 6b636f73 635f7465     nal ....socket_c
    a534:	62203a62 20646e69 63637573 21737365     b: bind success!
    a544:	0000000d 6b636f73 635f7465 62203a62     ....socket_cb: b
    a554:	20646e69 6f727265 000d2172 6b636f73     ind error!..sock
    a564:	635f7465 6c203a62 65747369 7573206e     et_cb: listen su
    a574:	73656363 000d2173 6b636f73 635f7465     ccess!..socket_c
    a584:	6c203a62 65747369 7265206e 21726f72     b: listen error!
    a594:	0000000d 6b636f73 635f7465 61203a62     ....socket_cb: a
    a5a4:	70656363 75732074 73656363 000d2173     ccept success!..
    a5b4:	0d205825 0000000a 6b636f73 635f7465     %X .....socket_c
    a5c4:	61203a62 70656363 72652074 21726f72     b: accept error!
    a5d4:	0000000d 6b636f73 635f7465 63203a62     ....socket_cb: c
    a5e4:	656e6e6f 73207463 65636375 0d217373     onnect success!.
    a5f4:	00000000 6b636f73 635f7465 63203a62     ....socket_cb: c
    a604:	656e6e6f 65207463 726f7272 00000d21     onnect error!...
    a614:	6b636f73 635f7465 73203a62 20646e65     socket_cb: send 
    a624:	63637573 21737365 0000000d 6b636f73     success!....sock
    a634:	635f7465 72203a62 20766365 63637573     et_cb: recv succ
    a644:	21737365 0000000d 00000053 00000041     ess!....S...A...
    a654:	0000004d 2d2d2d2d 2d2d2d2d 2d2d2d2d     M...------------
    a664:	2d2d2d2d 454d4153 2d2d2d2d 2d2d2d2d     ----SAME--------
    a674:	2d2d2d2d 00000d20 79706f63 7325203a     ---- ...copy: %s
    a684:	000a0d20 00633140 006f3140 00633240      ...@1c.@1o.@2c.
    a694:	006f3240 00633340 006f3340 00633440     @2o.@3c.@3o.@4c.
    a6a4:	006f3440 00633540 006f3540 00633640     @4o.@5c.@5o.@6c.
    a6b4:	006f3640 6f666562 53206572 61566c6f     @6o.before SolVa
    a6c4:	2065766c 746e6f43 206c6f72 6d6d6f43     lve Control Comm
    a6d4:	20646e65 7325203a 00000a0d 004e4740     end : %s....@GN.
    a6e4:	004e5240 004e4f40 6e676973 694c6e4f     @RN.@ON.signOnLi
    a6f4:	20746867 6425203a 000a0d20 56434552     ght : %d ...RECV
    a704:	4c414320 2044454c 0000000d 6b636f73      CALLED ....sock
    a714:	635f7465 72203a62 20766365 6f727265     et_cb: recv erro
    a724:	000d2172 69666977 3a62635f 4d324d20     r!..wifi_cb: M2M
    a734:	4649575f 45525f49 435f5053 535f4e4f     _WIFI_RESP_CON_S
    a744:	45544154 4148435f 4445474e 4f43203a     TATE_CHANGED: CO
    a754:	43454e4e 0d444554 00000000 69666977     NNECTED.....wifi
    a764:	3a62635f 4d324d20 4649575f 45525f49     _cb: M2M_WIFI_RE
    a774:	435f5053 535f4e4f 45544154 4148435f     SP_CON_STATE_CHA
    a784:	4445474e 4944203a 4e4f4353 5443454e     NGED: DISCONNECT
    a794:	000d4445 34333231 38373635 00000000     ED..12345678....
    a7a4:	686e7573 325f7473 4847342e 0000007a     sunhst_2.4GHz...
    a7b4:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
    a7c4:	45525f49 48445f51 435f5043 3a464e4f     I_REQ_DHCP_CONF:
    a7d4:	20504920 25207369 75252e75 2e75252e      IP is %u.%u.%u.
    a7e4:	0a0d7525 00000000                       %u......

0000a7ec <_global_impure_ptr>:
    a7ec:	20000014                                ... 

0000a7f0 <__sf_fake_stderr>:
	...

0000a810 <__sf_fake_stdin>:
	...

0000a830 <__sf_fake_stdout>:
	...
    a850:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    a860:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    a870:	31300046 35343332 39383736 64636261     F.0123456789abcd
    a880:	00006665                                ef..

0000a884 <_init>:
    a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a886:	46c0      	nop			; (mov r8, r8)
    a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a88a:	bc08      	pop	{r3}
    a88c:	469e      	mov	lr, r3
    a88e:	4770      	bx	lr

0000a890 <__init_array_start>:
    a890:	000000dd 	.word	0x000000dd

0000a894 <_fini>:
    a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a896:	46c0      	nop			; (mov r8, r8)
    a898:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a89a:	bc08      	pop	{r3}
    a89c:	469e      	mov	lr, r3
    a89e:	4770      	bx	lr

0000a8a0 <__fini_array_start>:
    a8a0:	000000b5 	.word	0x000000b5
