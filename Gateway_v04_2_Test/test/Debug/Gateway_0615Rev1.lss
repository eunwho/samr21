
Gateway_0615Rev1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a4e8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  0000a4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c84  20000074  0000a55c  00020074  2**2
                  ALLOC
  3 .stack        00002000  20000cf8  0000b1e0  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000746a5  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000b7d5  00000000  00000000  000947cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001891a  00000000  00000000  0009ffa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001250  00000000  00000000  000b88bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c30  00000000  00000000  000b9b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002abe1  00000000  00000000  000bb73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002df05  00000000  00000000  000e631d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000954f4  00000000  00000000  00114222  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003940  00000000  00000000  001a9718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 2c 00 20 1d 56 00 00 19 56 00 00 19 56 00 00     .,. .V...V...V..
	...
      2c:	19 56 00 00 00 00 00 00 00 00 00 00 19 56 00 00     .V...........V..
      3c:	19 56 00 00 19 56 00 00 19 56 00 00 19 56 00 00     .V...V...V...V..
      4c:	19 56 00 00 79 40 00 00 19 56 00 00 19 56 00 00     .V..y@...V...V..
      5c:	19 56 00 00 19 56 00 00 e5 45 00 00 f5 45 00 00     .V...V...E...E..
      6c:	05 46 00 00 15 46 00 00 25 46 00 00 35 46 00 00     .F...F..%F..5F..
      7c:	bd 38 00 00 cd 38 00 00 dd 38 00 00 f9 52 00 00     .8...8...8...R..
      8c:	09 53 00 00 19 53 00 00 00 00 00 00 00 00 00 00     .S...S..........
      9c:	19 56 00 00 19 56 00 00 00 00 00 00 19 56 00 00     .V...V.......V..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	0000a4e8 	.word	0x0000a4e8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	0000a4e8 	.word	0x0000a4e8
     10c:	0000a4e8 	.word	0x0000a4e8
     110:	00000000 	.word	0x00000000

00000114 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     114:	b510      	push	{r4, lr}
	if (gpfIsr) {
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <chip_isr+0x10>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d000      	beq.n	120 <chip_isr+0xc>
		gpfIsr();
     11e:	4798      	blx	r3
	}
}
     120:	bd10      	pop	{r4, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	20000090 	.word	0x20000090

00000128 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     128:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     12a:	1e44      	subs	r4, r0, #1
     12c:	2800      	cmp	r0, #0
     12e:	d004      	beq.n	13a <nm_bsp_sleep+0x12>
		delay_ms(1);
     130:	4d02      	ldr	r5, [pc, #8]	; (13c <nm_bsp_sleep+0x14>)
     132:	2001      	movs	r0, #1
     134:	47a8      	blx	r5
	while (u32TimeMsec--) {
     136:	3c01      	subs	r4, #1
     138:	d2fb      	bcs.n	132 <nm_bsp_sleep+0xa>
	}
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003f71 	.word	0x00003f71

00000140 <nm_bsp_reset>:
{
     140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     142:	4c07      	ldr	r4, [pc, #28]	; (160 <nm_bsp_reset+0x20>)
     144:	2780      	movs	r7, #128	; 0x80
     146:	043f      	lsls	r7, r7, #16
     148:	6167      	str	r7, [r4, #20]
     14a:	2580      	movs	r5, #128	; 0x80
     14c:	01ad      	lsls	r5, r5, #6
     14e:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     150:	2001      	movs	r0, #1
     152:	4e04      	ldr	r6, [pc, #16]	; (164 <nm_bsp_reset+0x24>)
     154:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     156:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     158:	200a      	movs	r0, #10
     15a:	47b0      	blx	r6
     15c:	61a5      	str	r5, [r4, #24]
}
     15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     160:	41004400 	.word	0x41004400
     164:	00000129 	.word	0x00000129

00000168 <nm_bsp_init>:
{
     168:	b570      	push	{r4, r5, r6, lr}
     16a:	b082      	sub	sp, #8
	gpfIsr = NULL;
     16c:	2300      	movs	r3, #0
     16e:	4a16      	ldr	r2, [pc, #88]	; (1c8 <nm_bsp_init+0x60>)
     170:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     172:	ac01      	add	r4, sp, #4
     174:	2501      	movs	r5, #1
     176:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     178:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     17a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     17c:	0021      	movs	r1, r4
     17e:	200d      	movs	r0, #13
     180:	4e12      	ldr	r6, [pc, #72]	; (1cc <nm_bsp_init+0x64>)
     182:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     184:	0021      	movs	r1, r4
     186:	2017      	movs	r0, #23
     188:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     18a:	0021      	movs	r1, r4
     18c:	201c      	movs	r0, #28
     18e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     190:	4b0f      	ldr	r3, [pc, #60]	; (1d0 <nm_bsp_init+0x68>)
     192:	2280      	movs	r2, #128	; 0x80
     194:	0412      	lsls	r2, r2, #16
     196:	615a      	str	r2, [r3, #20]
     198:	2280      	movs	r2, #128	; 0x80
     19a:	0192      	lsls	r2, r2, #6
     19c:	615a      	str	r2, [r3, #20]
    if(!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) 
     19e:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <nm_bsp_init+0x6c>)
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	421d      	tst	r5, r3
     1a4:	d003      	beq.n	1ae <nm_bsp_init+0x46>
     1a6:	4b0b      	ldr	r3, [pc, #44]	; (1d4 <nm_bsp_init+0x6c>)
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	079b      	lsls	r3, r3, #30
     1ac:	d401      	bmi.n	1b2 <nm_bsp_init+0x4a>
	    delay_init();
     1ae:	4b0a      	ldr	r3, [pc, #40]	; (1d8 <nm_bsp_init+0x70>)
     1b0:	4798      	blx	r3
	nm_bsp_reset();
     1b2:	4b0a      	ldr	r3, [pc, #40]	; (1dc <nm_bsp_init+0x74>)
     1b4:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     1b6:	2201      	movs	r2, #1
     1b8:	4b09      	ldr	r3, [pc, #36]	; (1e0 <nm_bsp_init+0x78>)
     1ba:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1c0:	b662      	cpsie	i
}
     1c2:	2000      	movs	r0, #0
     1c4:	b002      	add	sp, #8
     1c6:	bd70      	pop	{r4, r5, r6, pc}
     1c8:	20000090 	.word	0x20000090
     1cc:	000041dd 	.word	0x000041dd
     1d0:	41004400 	.word	0x41004400
     1d4:	e000e010 	.word	0xe000e010
     1d8:	00003f05 	.word	0x00003f05
     1dc:	00000141 	.word	0x00000141
     1e0:	2000000c 	.word	0x2000000c

000001e4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     1e4:	b510      	push	{r4, lr}
     1e6:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     1e8:	4b0e      	ldr	r3, [pc, #56]	; (224 <nm_bsp_register_isr+0x40>)
     1ea:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     1ec:	ac01      	add	r4, sp, #4
     1ee:	0020      	movs	r0, r4
     1f0:	4b0d      	ldr	r3, [pc, #52]	; (228 <nm_bsp_register_isr+0x44>)
     1f2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     1f4:	2316      	movs	r3, #22
     1f6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     1f8:	23b0      	movs	r3, #176	; 0xb0
     1fa:	035b      	lsls	r3, r3, #13
     1fc:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     1fe:	2301      	movs	r3, #1
     200:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     202:	3301      	adds	r3, #1
     204:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     206:	0021      	movs	r1, r4
     208:	2006      	movs	r0, #6
     20a:	4b08      	ldr	r3, [pc, #32]	; (22c <nm_bsp_register_isr+0x48>)
     20c:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     20e:	2200      	movs	r2, #0
     210:	2106      	movs	r1, #6
     212:	4807      	ldr	r0, [pc, #28]	; (230 <nm_bsp_register_isr+0x4c>)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <nm_bsp_register_isr+0x50>)
     216:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     218:	2100      	movs	r1, #0
     21a:	2006      	movs	r0, #6
     21c:	4b06      	ldr	r3, [pc, #24]	; (238 <nm_bsp_register_isr+0x54>)
     21e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     220:	b004      	add	sp, #16
     222:	bd10      	pop	{r4, pc}
     224:	20000090 	.word	0x20000090
     228:	00004151 	.word	0x00004151
     22c:	00004165 	.word	0x00004165
     230:	00000115 	.word	0x00000115
     234:	0000400d 	.word	0x0000400d
     238:	00004039 	.word	0x00004039

0000023c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     23c:	b510      	push	{r4, lr}
	if (u8Enable) {
     23e:	2800      	cmp	r0, #0
     240:	d104      	bne.n	24c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     242:	2100      	movs	r1, #0
     244:	2006      	movs	r0, #6
     246:	4b04      	ldr	r3, [pc, #16]	; (258 <nm_bsp_interrupt_ctrl+0x1c>)
     248:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     24a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     24c:	2100      	movs	r1, #0
     24e:	2006      	movs	r0, #6
     250:	4b02      	ldr	r3, [pc, #8]	; (25c <nm_bsp_interrupt_ctrl+0x20>)
     252:	4798      	blx	r3
     254:	e7f9      	b.n	24a <nm_bsp_interrupt_ctrl+0xe>
     256:	46c0      	nop			; (mov r8, r8)
     258:	00004059 	.word	0x00004059
     25c:	00004039 	.word	0x00004039

00000260 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     260:	b530      	push	{r4, r5, lr}
     262:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     264:	4c30      	ldr	r4, [pc, #192]	; (328 <nm_bus_init+0xc8>)
     266:	2323      	movs	r3, #35	; 0x23
     268:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     26a:	2300      	movs	r3, #0
     26c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     26e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     270:	a901      	add	r1, sp, #4
     272:	2201      	movs	r2, #1
     274:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     276:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     278:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     27a:	2023      	movs	r0, #35	; 0x23
     27c:	4b2b      	ldr	r3, [pc, #172]	; (32c <nm_bus_init+0xcc>)
     27e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     280:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     282:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     284:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     286:	2900      	cmp	r1, #0
     288:	d104      	bne.n	294 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     28a:	0953      	lsrs	r3, r2, #5
     28c:	01db      	lsls	r3, r3, #7
     28e:	4928      	ldr	r1, [pc, #160]	; (330 <nm_bus_init+0xd0>)
     290:	468c      	mov	ip, r1
     292:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     294:	211f      	movs	r1, #31
     296:	4011      	ands	r1, r2
     298:	2201      	movs	r2, #1
     29a:	0010      	movs	r0, r2
     29c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     29e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     2a0:	ac02      	add	r4, sp, #8
     2a2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     2a4:	2300      	movs	r3, #0
     2a6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     2a8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     2aa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     2ac:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     2ae:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     2b0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     2b2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     2b4:	3223      	adds	r2, #35	; 0x23
     2b6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     2b8:	3a18      	subs	r2, #24
     2ba:	2100      	movs	r1, #0
     2bc:	a808      	add	r0, sp, #32
     2be:	4b1d      	ldr	r3, [pc, #116]	; (334 <nm_bus_init+0xd4>)
     2c0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     2c2:	2380      	movs	r3, #128	; 0x80
     2c4:	025b      	lsls	r3, r3, #9
     2c6:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     2c8:	4b1b      	ldr	r3, [pc, #108]	; (338 <nm_bus_init+0xd8>)
     2ca:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     2cc:	2301      	movs	r3, #1
     2ce:	425b      	negs	r3, r3
     2d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     2d2:	4b1a      	ldr	r3, [pc, #104]	; (33c <nm_bus_init+0xdc>)
     2d4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     2d6:	4b1a      	ldr	r3, [pc, #104]	; (340 <nm_bus_init+0xe0>)
     2d8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     2da:	4b1a      	ldr	r3, [pc, #104]	; (344 <nm_bus_init+0xe4>)
     2dc:	61a3      	str	r3, [r4, #24]
	if(spi_init(&master_wifi, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) 
     2de:	0022      	movs	r2, r4
     2e0:	4919      	ldr	r1, [pc, #100]	; (348 <nm_bus_init+0xe8>)
     2e2:	481a      	ldr	r0, [pc, #104]	; (34c <nm_bus_init+0xec>)
     2e4:	4b1a      	ldr	r3, [pc, #104]	; (350 <nm_bus_init+0xf0>)
     2e6:	4798      	blx	r3
     2e8:	2800      	cmp	r0, #0
     2ea:	d11a      	bne.n	322 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2ec:	4d17      	ldr	r5, [pc, #92]	; (34c <nm_bus_init+0xec>)
     2ee:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2f0:	0020      	movs	r0, r4
     2f2:	4b18      	ldr	r3, [pc, #96]	; (354 <nm_bus_init+0xf4>)
     2f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2f6:	231f      	movs	r3, #31
     2f8:	4018      	ands	r0, r3
     2fa:	3b1e      	subs	r3, #30
     2fc:	4083      	lsls	r3, r0
     2fe:	4a16      	ldr	r2, [pc, #88]	; (358 <nm_bus_init+0xf8>)
     300:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     302:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     304:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     306:	2b00      	cmp	r3, #0
     308:	d1fc      	bne.n	304 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     30a:	6823      	ldr	r3, [r4, #0]
     30c:	2202      	movs	r2, #2
     30e:	4313      	orrs	r3, r2
     310:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master_wifi);

	nm_bsp_reset();
     312:	4b12      	ldr	r3, [pc, #72]	; (35c <nm_bus_init+0xfc>)
     314:	4798      	blx	r3
	nm_bsp_sleep(1);
     316:	2001      	movs	r0, #1
     318:	4b11      	ldr	r3, [pc, #68]	; (360 <nm_bus_init+0x100>)
     31a:	4798      	blx	r3
	
	return result;
     31c:	2000      	movs	r0, #0
}
     31e:	b011      	add	sp, #68	; 0x44
     320:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     322:	2006      	movs	r0, #6
     324:	4240      	negs	r0, r0
     326:	e7fa      	b.n	31e <nm_bus_init+0xbe>
     328:	200009ac 	.word	0x200009ac
     32c:	000041dd 	.word	0x000041dd
     330:	41004400 	.word	0x41004400
     334:	00007e33 	.word	0x00007e33
     338:	00220003 	.word	0x00220003
     33c:	00360003 	.word	0x00360003
     340:	00370003 	.word	0x00370003
     344:	00b71b00 	.word	0x00b71b00
     348:	42001c00 	.word	0x42001c00
     34c:	200009b0 	.word	0x200009b0
     350:	00004645 	.word	0x00004645
     354:	000045b5 	.word	0x000045b5
     358:	e000e100 	.word	0xe000e100
     35c:	00000141 	.word	0x00000141
     360:	00000129 	.word	0x00000129

00000364 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     364:	b5f0      	push	{r4, r5, r6, r7, lr}
     366:	46de      	mov	lr, fp
     368:	4657      	mov	r7, sl
     36a:	464e      	mov	r6, r9
     36c:	4645      	mov	r5, r8
     36e:	b5e0      	push	{r5, r6, r7, lr}
     370:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     372:	2803      	cmp	r0, #3
     374:	d000      	beq.n	378 <nm_bus_ioctl+0x14>
     376:	e075      	b.n	464 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     378:	680e      	ldr	r6, [r1, #0]
     37a:	684d      	ldr	r5, [r1, #4]
     37c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     37e:	2200      	movs	r2, #0
     380:	466b      	mov	r3, sp
     382:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     384:	2d00      	cmp	r5, #0
     386:	d027      	beq.n	3d8 <nm_bus_ioctl+0x74>
     388:	2c00      	cmp	r4, #0
     38a:	d065      	beq.n	458 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     38c:	2e00      	cmp	r6, #0
     38e:	d100      	bne.n	392 <nm_bus_ioctl+0x2e>
     390:	e076      	b.n	480 <nm_bus_ioctl+0x11c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     392:	2300      	movs	r3, #0
     394:	4698      	mov	r8, r3
     396:	2300      	movs	r3, #0
     398:	469b      	mov	fp, r3
	spi_select_slave(&master_wifi, &slave_inst, true);
     39a:	2201      	movs	r2, #1
     39c:	493b      	ldr	r1, [pc, #236]	; (48c <nm_bus_ioctl+0x128>)
     39e:	483c      	ldr	r0, [pc, #240]	; (490 <nm_bus_ioctl+0x12c>)
     3a0:	4b3c      	ldr	r3, [pc, #240]	; (494 <nm_bus_ioctl+0x130>)
     3a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3a4:	4b3a      	ldr	r3, [pc, #232]	; (490 <nm_bus_ioctl+0x12c>)
     3a6:	469a      	mov	sl, r3
		while(!spi_is_ready_to_write(&master_wifi));
     3a8:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master_wifi));
     3aa:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3ac:	4699      	mov	r9, r3
			pu8Miso++;
     3ae:	4659      	mov	r1, fp
     3b0:	424b      	negs	r3, r1
     3b2:	4159      	adcs	r1, r3
     3b4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     3b6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     3b8:	4653      	mov	r3, sl
     3ba:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3bc:	7e19      	ldrb	r1, [r3, #24]
		while(!spi_is_ready_to_write(&master_wifi));
     3be:	4239      	tst	r1, r7
     3c0:	d0fc      	beq.n	3bc <nm_bus_ioctl+0x58>
     3c2:	7e19      	ldrb	r1, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
     3c4:	4239      	tst	r1, r7
     3c6:	d0fc      	beq.n	3c2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     3c8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3ca:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master_wifi));
     3cc:	4211      	tst	r1, r2
     3ce:	d0fc      	beq.n	3ca <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3d0:	4649      	mov	r1, r9
     3d2:	7989      	ldrb	r1, [r1, #6]
     3d4:	468c      	mov	ip, r1
     3d6:	e011      	b.n	3fc <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     3d8:	2e00      	cmp	r6, #0
     3da:	d03a      	beq.n	452 <nm_bus_ioctl+0xee>
     3dc:	2c00      	cmp	r4, #0
     3de:	d03e      	beq.n	45e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3e0:	2300      	movs	r3, #0
     3e2:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     3e4:	3301      	adds	r3, #1
     3e6:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     3e8:	466b      	mov	r3, sp
     3ea:	1ddd      	adds	r5, r3, #7
     3ec:	e7d5      	b.n	39a <nm_bus_ioctl+0x36>
     3ee:	4660      	mov	r0, ip
     3f0:	2801      	cmp	r0, #1
     3f2:	d00d      	beq.n	410 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     3f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
     3f6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master_wifi, &rxd_data) != STATUS_OK);
     3f8:	2900      	cmp	r1, #0
     3fa:	d00d      	beq.n	418 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3fc:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     3fe:	4211      	tst	r1, r2
     400:	d0fc      	beq.n	3fc <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     402:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     404:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     406:	4210      	tst	r0, r2
     408:	d0f1      	beq.n	3ee <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     40a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     40c:	311e      	adds	r1, #30
     40e:	e7ee      	b.n	3ee <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     410:	6a98      	ldr	r0, [r3, #40]	; 0x28
     412:	05c0      	lsls	r0, r0, #23
     414:	0dc0      	lsrs	r0, r0, #23
     416:	e7ef      	b.n	3f8 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     418:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     41a:	3c01      	subs	r4, #1
     41c:	b2a4      	uxth	r4, r4
			pu8Miso++;
     41e:	445d      	add	r5, fp
			pu8Mosi++;
     420:	4643      	mov	r3, r8
     422:	4259      	negs	r1, r3
     424:	414b      	adcs	r3, r1
     426:	18f6      	adds	r6, r6, r3
	while(u16Sz) 
     428:	2c00      	cmp	r4, #0
     42a:	d1c4      	bne.n	3b6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     42c:	4b18      	ldr	r3, [pc, #96]	; (490 <nm_bus_ioctl+0x12c>)
     42e:	6819      	ldr	r1, [r3, #0]
	while(!spi_is_write_complete(&master_wifi));
     430:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     432:	7e0b      	ldrb	r3, [r1, #24]
     434:	4213      	tst	r3, r2
     436:	d0fc      	beq.n	432 <nm_bus_ioctl+0xce>
	spi_select_slave(&master_wifi, &slave_inst, false);
     438:	2200      	movs	r2, #0
     43a:	4914      	ldr	r1, [pc, #80]	; (48c <nm_bus_ioctl+0x128>)
     43c:	4814      	ldr	r0, [pc, #80]	; (490 <nm_bus_ioctl+0x12c>)
     43e:	4b15      	ldr	r3, [pc, #84]	; (494 <nm_bus_ioctl+0x130>)
     440:	4798      	blx	r3
	return M2M_SUCCESS;
     442:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     444:	b003      	add	sp, #12
     446:	bc3c      	pop	{r2, r3, r4, r5}
     448:	4690      	mov	r8, r2
     44a:	4699      	mov	r9, r3
     44c:	46a2      	mov	sl, r4
     44e:	46ab      	mov	fp, r5
     450:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     452:	200f      	movs	r0, #15
     454:	4240      	negs	r0, r0
     456:	e7f5      	b.n	444 <nm_bus_ioctl+0xe0>
     458:	200f      	movs	r0, #15
     45a:	4240      	negs	r0, r0
     45c:	e7f2      	b.n	444 <nm_bus_ioctl+0xe0>
     45e:	200f      	movs	r0, #15
     460:	4240      	negs	r0, r0
		break;
     462:	e7ef      	b.n	444 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     464:	22fd      	movs	r2, #253	; 0xfd
     466:	490c      	ldr	r1, [pc, #48]	; (498 <nm_bus_ioctl+0x134>)
     468:	480c      	ldr	r0, [pc, #48]	; (49c <nm_bus_ioctl+0x138>)
     46a:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <nm_bus_ioctl+0x13c>)
     46c:	4798      	blx	r3
     46e:	480d      	ldr	r0, [pc, #52]	; (4a4 <nm_bus_ioctl+0x140>)
     470:	4b0d      	ldr	r3, [pc, #52]	; (4a8 <nm_bus_ioctl+0x144>)
     472:	4798      	blx	r3
     474:	200d      	movs	r0, #13
     476:	4b0d      	ldr	r3, [pc, #52]	; (4ac <nm_bus_ioctl+0x148>)
     478:	4798      	blx	r3
			s8Ret = -1;
     47a:	2001      	movs	r0, #1
     47c:	4240      	negs	r0, r0
	return s8Ret;
     47e:	e7e1      	b.n	444 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     480:	2301      	movs	r3, #1
     482:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     484:	466b      	mov	r3, sp
     486:	1dde      	adds	r6, r3, #7
     488:	e785      	b.n	396 <nm_bus_ioctl+0x32>
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	200009ac 	.word	0x200009ac
     490:	200009b0 	.word	0x200009b0
     494:	0000481d 	.word	0x0000481d
     498:	000090b8 	.word	0x000090b8
     49c:	000090c8 	.word	0x000090c8
     4a0:	00007e45 	.word	0x00007e45
     4a4:	000090dc 	.word	0x000090dc
     4a8:	00007f61 	.word	0x00007f61
     4ac:	00007e79 	.word	0x00007e79

000004b0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     4b0:	b530      	push	{r4, r5, lr}
     4b2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     4b4:	ab01      	add	r3, sp, #4
     4b6:	2200      	movs	r2, #0
     4b8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     4ba:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     4bc:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4be:	4d13      	ldr	r5, [pc, #76]	; (50c <nm_bus_deinit+0x5c>)
     4c0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     4c2:	0020      	movs	r0, r4
     4c4:	4b12      	ldr	r3, [pc, #72]	; (510 <nm_bus_deinit+0x60>)
     4c6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4c8:	231f      	movs	r3, #31
     4ca:	4018      	ands	r0, r3
     4cc:	3b1e      	subs	r3, #30
     4ce:	4083      	lsls	r3, r0
     4d0:	2280      	movs	r2, #128	; 0x80
     4d2:	4910      	ldr	r1, [pc, #64]	; (514 <nm_bus_deinit+0x64>)
     4d4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4d6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     4d8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     4da:	2b00      	cmp	r3, #0
     4dc:	d1fc      	bne.n	4d8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     4de:	338f      	adds	r3, #143	; 0x8f
     4e0:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     4e2:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     4e4:	6823      	ldr	r3, [r4, #0]
     4e6:	2202      	movs	r2, #2
     4e8:	4393      	bics	r3, r2
     4ea:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master_wifi);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     4ec:	a901      	add	r1, sp, #4
     4ee:	2036      	movs	r0, #54	; 0x36
     4f0:	4c09      	ldr	r4, [pc, #36]	; (518 <nm_bus_deinit+0x68>)
     4f2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     4f4:	a901      	add	r1, sp, #4
     4f6:	2022      	movs	r0, #34	; 0x22
     4f8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     4fa:	a901      	add	r1, sp, #4
     4fc:	2037      	movs	r0, #55	; 0x37
     4fe:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     500:	a901      	add	r1, sp, #4
     502:	2023      	movs	r0, #35	; 0x23
     504:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     506:	2000      	movs	r0, #0
     508:	b003      	add	sp, #12
     50a:	bd30      	pop	{r4, r5, pc}
     50c:	200009b0 	.word	0x200009b0
     510:	000045b5 	.word	0x000045b5
     514:	e000e100 	.word	0xe000e100
     518:	000041dd 	.word	0x000041dd

0000051c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     51c:	2a00      	cmp	r2, #0
     51e:	d006      	beq.n	52e <m2m_memcpy+0x12>
     520:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     522:	780b      	ldrb	r3, [r1, #0]
     524:	7003      	strb	r3, [r0, #0]
		pDst++;
     526:	3001      	adds	r0, #1
		pSrc++;
     528:	3101      	adds	r1, #1
	}while(--sz);
     52a:	4290      	cmp	r0, r2
     52c:	d1f9      	bne.n	522 <m2m_memcpy+0x6>
}
     52e:	4770      	bx	lr

00000530 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     530:	2a00      	cmp	r2, #0
     532:	d004      	beq.n	53e <m2m_memset+0xe>
     534:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     536:	7001      	strb	r1, [r0, #0]
		pBuf++;
     538:	3001      	adds	r0, #1
	}while(--sz);
     53a:	4290      	cmp	r0, r2
     53c:	d1fb      	bne.n	536 <m2m_memset+0x6>
}
     53e:	4770      	bx	lr

00000540 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     540:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     542:	7802      	ldrb	r2, [r0, #0]
     544:	2a00      	cmp	r2, #0
     546:	d007      	beq.n	558 <m2m_strlen+0x18>
     548:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     54a:	3001      	adds	r0, #1
     54c:	b280      	uxth	r0, r0
		pcStr++;
     54e:	3301      	adds	r3, #1
	while(*pcStr)
     550:	781a      	ldrb	r2, [r3, #0]
     552:	2a00      	cmp	r2, #0
     554:	d1f9      	bne.n	54a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
     556:	4770      	bx	lr
	uint16	u16StrLen = 0;
     558:	2000      	movs	r0, #0
     55a:	e7fc      	b.n	556 <m2m_strlen+0x16>

0000055c <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     55c:	4a02      	ldr	r2, [pc, #8]	; (568 <isr+0xc>)
     55e:	78d3      	ldrb	r3, [r2, #3]
     560:	3301      	adds	r3, #1
     562:	b2db      	uxtb	r3, r3
     564:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     566:	4770      	bx	lr
     568:	200009ec 	.word	0x200009ec

0000056c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     56c:	4770      	bx	lr
	...

00000570 <hif_set_rx_done>:
{
     570:	b500      	push	{lr}
     572:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     574:	2200      	movs	r2, #0
     576:	4b0a      	ldr	r3, [pc, #40]	; (5a0 <hif_set_rx_done+0x30>)
     578:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     57a:	2001      	movs	r0, #1
     57c:	4b09      	ldr	r3, [pc, #36]	; (5a4 <hif_set_rx_done+0x34>)
     57e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     580:	a901      	add	r1, sp, #4
     582:	4809      	ldr	r0, [pc, #36]	; (5a8 <hif_set_rx_done+0x38>)
     584:	4b09      	ldr	r3, [pc, #36]	; (5ac <hif_set_rx_done+0x3c>)
     586:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     588:	2800      	cmp	r0, #0
     58a:	d001      	beq.n	590 <hif_set_rx_done+0x20>
}
     58c:	b003      	add	sp, #12
     58e:	bd00      	pop	{pc}
	reg |= NBIT1;
     590:	2102      	movs	r1, #2
     592:	9b01      	ldr	r3, [sp, #4]
     594:	4319      	orrs	r1, r3
     596:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     598:	4803      	ldr	r0, [pc, #12]	; (5a8 <hif_set_rx_done+0x38>)
     59a:	4b05      	ldr	r3, [pc, #20]	; (5b0 <hif_set_rx_done+0x40>)
     59c:	4798      	blx	r3
     59e:	e7f5      	b.n	58c <hif_set_rx_done+0x1c>
     5a0:	200009ec 	.word	0x200009ec
     5a4:	0000023d 	.word	0x0000023d
     5a8:	00001070 	.word	0x00001070
     5ac:	0000197d 	.word	0x0000197d
     5b0:	00001989 	.word	0x00001989

000005b4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     5b4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	
	if(gstrHifCxt.u8HifRXDone)
     5b6:	4b0c      	ldr	r3, [pc, #48]	; (5e8 <hif_chip_wake+0x34>)
     5b8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     5ba:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
     5bc:	2b00      	cmp	r3, #0
     5be:	d10d      	bne.n	5dc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     5c0:	4b09      	ldr	r3, [pc, #36]	; (5e8 <hif_chip_wake+0x34>)
     5c2:	785b      	ldrb	r3, [r3, #1]
     5c4:	2b00      	cmp	r3, #0
     5c6:	d103      	bne.n	5d0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <hif_chip_wake+0x34>)
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d106      	bne.n	5de <hif_chip_wake+0x2a>
			if(ret != M2M_SUCCESS)goto ERR1;
		}
		else;
	}
	
	gstrHifCxt.u8ChipSleep++;
     5d0:	4a05      	ldr	r2, [pc, #20]	; (5e8 <hif_chip_wake+0x34>)
     5d2:	7853      	ldrb	r3, [r2, #1]
     5d4:	3301      	adds	r3, #1
     5d6:	b2db      	uxtb	r3, r3
     5d8:	7053      	strb	r3, [r2, #1]
     5da:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     5dc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
     5de:	4b03      	ldr	r3, [pc, #12]	; (5ec <hif_chip_wake+0x38>)
     5e0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5e2:	2800      	cmp	r0, #0
     5e4:	d0f4      	beq.n	5d0 <hif_chip_wake+0x1c>
     5e6:	e7f9      	b.n	5dc <hif_chip_wake+0x28>
     5e8:	200009ec 	.word	0x200009ec
     5ec:	00001665 	.word	0x00001665

000005f0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
     5f0:	4b05      	ldr	r3, [pc, #20]	; (608 <hif_chip_sleep_sc+0x18>)
     5f2:	785b      	ldrb	r3, [r3, #1]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d004      	beq.n	602 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
     5f8:	4a03      	ldr	r2, [pc, #12]	; (608 <hif_chip_sleep_sc+0x18>)
     5fa:	7853      	ldrb	r3, [r2, #1]
     5fc:	3b01      	subs	r3, #1
     5fe:	b2db      	uxtb	r3, r3
     600:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
     602:	2000      	movs	r0, #0
     604:	4770      	bx	lr
     606:	46c0      	nop			; (mov r8, r8)
     608:	200009ec 	.word	0x200009ec

0000060c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     60c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
     60e:	4b0b      	ldr	r3, [pc, #44]	; (63c <hif_chip_sleep+0x30>)
     610:	785b      	ldrb	r3, [r3, #1]
     612:	2b00      	cmp	r3, #0
     614:	d004      	beq.n	620 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
     616:	4a09      	ldr	r2, [pc, #36]	; (63c <hif_chip_sleep+0x30>)
     618:	7853      	ldrb	r3, [r2, #1]
     61a:	3b01      	subs	r3, #1
     61c:	b2db      	uxtb	r3, r3
     61e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     620:	4b06      	ldr	r3, [pc, #24]	; (63c <hif_chip_sleep+0x30>)
     622:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
     624:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
     626:	2b00      	cmp	r3, #0
     628:	d103      	bne.n	632 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     62a:	4b04      	ldr	r3, [pc, #16]	; (63c <hif_chip_sleep+0x30>)
     62c:	781b      	ldrb	r3, [r3, #0]
     62e:	2b00      	cmp	r3, #0
     630:	d100      	bne.n	634 <hif_chip_sleep+0x28>
		}
		else;
	}
ERR1:
	return ret;
}
     632:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
     634:	4b02      	ldr	r3, [pc, #8]	; (640 <hif_chip_sleep+0x34>)
     636:	4798      	blx	r3
     638:	e7fb      	b.n	632 <hif_chip_sleep+0x26>
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	200009ec 	.word	0x200009ec
     640:	000015fd 	.word	0x000015fd

00000644 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     644:	b5f0      	push	{r4, r5, r6, r7, lr}
     646:	46de      	mov	lr, fp
     648:	4657      	mov	r7, sl
     64a:	b580      	push	{r7, lr}
     64c:	b089      	sub	sp, #36	; 0x24
     64e:	4683      	mov	fp, r0
     650:	468a      	mov	sl, r1
     652:	9201      	str	r2, [sp, #4]
     654:	9300      	str	r3, [sp, #0]
     656:	ab10      	add	r3, sp, #64	; 0x40
     658:	cb80      	ldmia	r3!, {r7}
     65a:	881e      	ldrh	r6, [r3, #0]
     65c:	ab12      	add	r3, sp, #72	; 0x48
     65e:	881d      	ldrh	r5, [r3, #0]
	sint8 ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     660:	227f      	movs	r2, #127	; 0x7f
     662:	400a      	ands	r2, r1
     664:	ab07      	add	r3, sp, #28
     666:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     668:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     66a:	2208      	movs	r2, #8
     66c:	805a      	strh	r2, [r3, #2]
	
	if(pu8DataBuf != NULL)
     66e:	2f00      	cmp	r7, #0
     670:	d03d      	beq.n	6ee <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     672:	885a      	ldrh	r2, [r3, #2]
     674:	1992      	adds	r2, r2, r6
     676:	18aa      	adds	r2, r5, r2
     678:	b292      	uxth	r2, r2
     67a:	805a      	strh	r2, [r3, #2]
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	
	ret = hif_chip_wake();
     67c:	4b69      	ldr	r3, [pc, #420]	; (824 <hif_send+0x1e0>)
     67e:	4798      	blx	r3
     680:	1e04      	subs	r4, r0, #0
	
	if(ret == M2M_SUCCESS)
     682:	d000      	beq.n	686 <hif_send+0x42>
     684:	e0c1      	b.n	80a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
     686:	2300      	movs	r3, #0
     688:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     68a:	aa02      	add	r2, sp, #8
     68c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     68e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     690:	9b04      	ldr	r3, [sp, #16]
     692:	465a      	mov	r2, fp
     694:	431a      	orrs	r2, r3
     696:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     698:	9a04      	ldr	r2, [sp, #16]
     69a:	4653      	mov	r3, sl
     69c:	021b      	lsls	r3, r3, #8
     69e:	4313      	orrs	r3, r2
     6a0:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     6a2:	ab07      	add	r3, sp, #28
     6a4:	885b      	ldrh	r3, [r3, #2]
     6a6:	9a04      	ldr	r2, [sp, #16]
     6a8:	041b      	lsls	r3, r3, #16
     6aa:	4313      	orrs	r3, r2
     6ac:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);	//
     6ae:	9904      	ldr	r1, [sp, #16]
     6b0:	485d      	ldr	r0, [pc, #372]	; (828 <hif_send+0x1e4>)
     6b2:	4b5e      	ldr	r3, [pc, #376]	; (82c <hif_send+0x1e8>)
     6b4:	4798      	blx	r3
     6b6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     6b8:	d157      	bne.n	76a <hif_send+0x126>

		reg = 0UL;
     6ba:	2300      	movs	r3, #0
     6bc:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
     6be:	9b04      	ldr	r3, [sp, #16]
     6c0:	2202      	movs	r2, #2
     6c2:	4313      	orrs	r3, r2
     6c4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     6c6:	9904      	ldr	r1, [sp, #16]
     6c8:	4859      	ldr	r0, [pc, #356]	; (830 <hif_send+0x1ec>)
     6ca:	4b58      	ldr	r3, [pc, #352]	; (82c <hif_send+0x1e8>)
     6cc:	4798      	blx	r3
     6ce:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     6d0:	d14b      	bne.n	76a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     6d2:	2200      	movs	r2, #0
     6d4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     6d6:	ab02      	add	r3, sp, #8
     6d8:	80da      	strh	r2, [r3, #6]
     6da:	3306      	adds	r3, #6
     6dc:	881b      	ldrh	r3, [r3, #0]
     6de:	b29b      	uxth	r3, r3
     6e0:	4a54      	ldr	r2, [pc, #336]	; (834 <hif_send+0x1f0>)
     6e2:	4293      	cmp	r3, r2
     6e4:	d849      	bhi.n	77a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     6e6:	4c54      	ldr	r4, [pc, #336]	; (838 <hif_send+0x1f4>)
			{
				if(cnt < 501) 
				{
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     6e8:	4b54      	ldr	r3, [pc, #336]	; (83c <hif_send+0x1f8>)
     6ea:	469a      	mov	sl, r3
     6ec:	e017      	b.n	71e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
     6ee:	ab07      	add	r3, sp, #28
     6f0:	885a      	ldrh	r2, [r3, #2]
     6f2:	9900      	ldr	r1, [sp, #0]
     6f4:	468c      	mov	ip, r1
     6f6:	4462      	add	r2, ip
     6f8:	b292      	uxth	r2, r2
     6fa:	805a      	strh	r2, [r3, #2]
     6fc:	e7be      	b.n	67c <hif_send+0x38>
				nm_bsp_sleep(1);
     6fe:	2001      	movs	r0, #1
     700:	47d0      	blx	sl
			}
			if(!(reg & NBIT1))
     702:	9b04      	ldr	r3, [sp, #16]
     704:	079b      	lsls	r3, r3, #30
     706:	d528      	bpl.n	75a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
     708:	ab02      	add	r3, sp, #8
     70a:	88da      	ldrh	r2, [r3, #6]
     70c:	3201      	adds	r2, #1
     70e:	b292      	uxth	r2, r2
     710:	80da      	strh	r2, [r3, #6]
     712:	3306      	adds	r3, #6
     714:	881b      	ldrh	r3, [r3, #0]
     716:	b29b      	uxth	r3, r3
     718:	4a46      	ldr	r2, [pc, #280]	; (834 <hif_send+0x1f0>)
     71a:	4293      	cmp	r3, r2
     71c:	d82d      	bhi.n	77a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     71e:	a904      	add	r1, sp, #16
     720:	4843      	ldr	r0, [pc, #268]	; (830 <hif_send+0x1ec>)
     722:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     724:	2800      	cmp	r0, #0
     726:	d128      	bne.n	77a <hif_send+0x136>
			if(cnt >= 500) 
     728:	ab02      	add	r3, sp, #8
     72a:	3306      	adds	r3, #6
     72c:	881b      	ldrh	r3, [r3, #0]
     72e:	b29b      	uxth	r3, r3
     730:	22f4      	movs	r2, #244	; 0xf4
     732:	32ff      	adds	r2, #255	; 0xff
     734:	4293      	cmp	r3, r2
     736:	d9e4      	bls.n	702 <hif_send+0xbe>
				if(cnt < 501) 
     738:	ab02      	add	r3, sp, #8
     73a:	3306      	adds	r3, #6
     73c:	881b      	ldrh	r3, [r3, #0]
     73e:	b29b      	uxth	r3, r3
     740:	3201      	adds	r2, #1
     742:	4293      	cmp	r3, r2
     744:	d8db      	bhi.n	6fe <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
     746:	483e      	ldr	r0, [pc, #248]	; (840 <hif_send+0x1fc>)
     748:	4b3e      	ldr	r3, [pc, #248]	; (844 <hif_send+0x200>)
     74a:	4798      	blx	r3
     74c:	483e      	ldr	r0, [pc, #248]	; (848 <hif_send+0x204>)
     74e:	4b3f      	ldr	r3, [pc, #252]	; (84c <hif_send+0x208>)
     750:	4798      	blx	r3
     752:	200d      	movs	r0, #13
     754:	4b3e      	ldr	r3, [pc, #248]	; (850 <hif_send+0x20c>)
     756:	4798      	blx	r3
     758:	e7d1      	b.n	6fe <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     75a:	a905      	add	r1, sp, #20
     75c:	483d      	ldr	r0, [pc, #244]	; (854 <hif_send+0x210>)
     75e:	4b36      	ldr	r3, [pc, #216]	; (838 <hif_send+0x1f4>)
     760:	4798      	blx	r3
     762:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) 
     764:	d009      	beq.n	77a <hif_send+0x136>
				{
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     766:	2300      	movs	r3, #0
     768:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
     76a:	4b3b      	ldr	r3, [pc, #236]	; (858 <hif_send+0x214>)
     76c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
     76e:	0020      	movs	r0, r4
     770:	b009      	add	sp, #36	; 0x24
     772:	bc0c      	pop	{r2, r3}
     774:	4692      	mov	sl, r2
     776:	469b      	mov	fp, r3
     778:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(dma_addr != 0)
     77a:	9b05      	ldr	r3, [sp, #20]
     77c:	2b00      	cmp	r3, #0
     77e:	d03f      	beq.n	800 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
     780:	9b05      	ldr	r3, [sp, #20]
     782:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     784:	a907      	add	r1, sp, #28
     786:	884b      	ldrh	r3, [r1, #2]
     788:	b29b      	uxth	r3, r3
     78a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     78c:	9806      	ldr	r0, [sp, #24]
     78e:	2208      	movs	r2, #8
     790:	4b32      	ldr	r3, [pc, #200]	; (85c <hif_send+0x218>)
     792:	4798      	blx	r3
     794:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     796:	d1e8      	bne.n	76a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     798:	9b06      	ldr	r3, [sp, #24]
     79a:	3308      	adds	r3, #8
     79c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     79e:	9b01      	ldr	r3, [sp, #4]
     7a0:	2b00      	cmp	r3, #0
     7a2:	d00b      	beq.n	7bc <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     7a4:	9806      	ldr	r0, [sp, #24]
     7a6:	9a00      	ldr	r2, [sp, #0]
     7a8:	0019      	movs	r1, r3
     7aa:	4b2c      	ldr	r3, [pc, #176]	; (85c <hif_send+0x218>)
     7ac:	4798      	blx	r3
     7ae:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7b0:	d1db      	bne.n	76a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
     7b2:	9b06      	ldr	r3, [sp, #24]
     7b4:	9a00      	ldr	r2, [sp, #0]
     7b6:	4694      	mov	ip, r2
     7b8:	4463      	add	r3, ip
     7ba:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
     7bc:	2f00      	cmp	r7, #0
     7be:	d00e      	beq.n	7de <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     7c0:	9b06      	ldr	r3, [sp, #24]
     7c2:	9a00      	ldr	r2, [sp, #0]
     7c4:	1aad      	subs	r5, r5, r2
     7c6:	18ed      	adds	r5, r5, r3
     7c8:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     7ca:	9806      	ldr	r0, [sp, #24]
     7cc:	0032      	movs	r2, r6
     7ce:	0039      	movs	r1, r7
     7d0:	4b22      	ldr	r3, [pc, #136]	; (85c <hif_send+0x218>)
     7d2:	4798      	blx	r3
     7d4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7d6:	d1c8      	bne.n	76a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
     7d8:	9b06      	ldr	r3, [sp, #24]
     7da:	18f3      	adds	r3, r6, r3
     7dc:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
     7de:	9b05      	ldr	r3, [sp, #20]
     7e0:	009b      	lsls	r3, r3, #2
     7e2:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
     7e4:	9b04      	ldr	r3, [sp, #16]
     7e6:	2202      	movs	r2, #2
     7e8:	4313      	orrs	r3, r2
     7ea:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     7ec:	9904      	ldr	r1, [sp, #16]
     7ee:	481c      	ldr	r0, [pc, #112]	; (860 <hif_send+0x21c>)
     7f0:	4b0e      	ldr	r3, [pc, #56]	; (82c <hif_send+0x1e8>)
     7f2:	4798      	blx	r3
     7f4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     7f6:	d1b8      	bne.n	76a <hif_send+0x126>
 	ret = hif_chip_sleep();
     7f8:	4b1a      	ldr	r3, [pc, #104]	; (864 <hif_send+0x220>)
     7fa:	4798      	blx	r3
     7fc:	0004      	movs	r4, r0
	return ret;
     7fe:	e7b6      	b.n	76e <hif_send+0x12a>
			ret = hif_chip_sleep();
     800:	4b18      	ldr	r3, [pc, #96]	; (864 <hif_send+0x220>)
     802:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
     804:	2403      	movs	r4, #3
     806:	4264      	negs	r4, r4
			goto ERR2;
     808:	e7b1      	b.n	76e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     80a:	229a      	movs	r2, #154	; 0x9a
     80c:	32ff      	adds	r2, #255	; 0xff
     80e:	4916      	ldr	r1, [pc, #88]	; (868 <hif_send+0x224>)
     810:	4816      	ldr	r0, [pc, #88]	; (86c <hif_send+0x228>)
     812:	4b0c      	ldr	r3, [pc, #48]	; (844 <hif_send+0x200>)
     814:	4798      	blx	r3
     816:	4816      	ldr	r0, [pc, #88]	; (870 <hif_send+0x22c>)
     818:	4b0c      	ldr	r3, [pc, #48]	; (84c <hif_send+0x208>)
     81a:	4798      	blx	r3
     81c:	200d      	movs	r0, #13
     81e:	4b0c      	ldr	r3, [pc, #48]	; (850 <hif_send+0x20c>)
     820:	4798      	blx	r3
		goto ERR2;
     822:	e7a4      	b.n	76e <hif_send+0x12a>
     824:	000005b5 	.word	0x000005b5
     828:	0000108c 	.word	0x0000108c
     82c:	00001989 	.word	0x00001989
     830:	00001078 	.word	0x00001078
     834:	000003e7 	.word	0x000003e7
     838:	0000197d 	.word	0x0000197d
     83c:	00000129 	.word	0x00000129
     840:	000093f8 	.word	0x000093f8
     844:	00007e45 	.word	0x00007e45
     848:	00009404 	.word	0x00009404
     84c:	00007f61 	.word	0x00007f61
     850:	00007e79 	.word	0x00007e79
     854:	00150400 	.word	0x00150400
     858:	000005f1 	.word	0x000005f1
     85c:	000019fd 	.word	0x000019fd
     860:	0000106c 	.word	0x0000106c
     864:	0000060d 	.word	0x0000060d
     868:	00009110 	.word	0x00009110
     86c:	000090c8 	.word	0x000090c8
     870:	00009414 	.word	0x00009414

00000874 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     874:	b5f0      	push	{r4, r5, r6, r7, lr}
     876:	46ce      	mov	lr, r9
     878:	4647      	mov	r7, r8
     87a:	b580      	push	{r7, lr}
     87c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;
	
	while(gstrHifCxt.u8Interrupt) 
     87e:	4bcf      	ldr	r3, [pc, #828]	; (bbc <hif_handle_isr+0x348>)
     880:	4698      	mov	r8, r3
	{
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
     882:	4699      	mov	r9, r3
	while(gstrHifCxt.u8Interrupt) 
     884:	e081      	b.n	98a <hif_handle_isr+0x116>
				gstrHifCxt.u32RxAddr = address;
     886:	4bcd      	ldr	r3, [pc, #820]	; (bbc <hif_handle_isr+0x348>)
     888:	9a05      	ldr	r2, [sp, #20]
     88a:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
     88c:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     88e:	af04      	add	r7, sp, #16
     890:	2204      	movs	r2, #4
     892:	0039      	movs	r1, r7
     894:	9805      	ldr	r0, [sp, #20]
     896:	4bca      	ldr	r3, [pc, #808]	; (bc0 <hif_handle_isr+0x34c>)
     898:	4798      	blx	r3
     89a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     89c:	887b      	ldrh	r3, [r7, #2]
     89e:	b29b      	uxth	r3, r3
     8a0:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
     8a2:	2800      	cmp	r0, #0
     8a4:	d134      	bne.n	910 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
     8a6:	ab04      	add	r3, sp, #16
     8a8:	885b      	ldrh	r3, [r3, #2]
     8aa:	b29b      	uxth	r3, r3
     8ac:	429d      	cmp	r5, r3
     8ae:	d004      	beq.n	8ba <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
     8b0:	ab04      	add	r3, sp, #16
     8b2:	885b      	ldrh	r3, [r3, #2]
     8b4:	1aeb      	subs	r3, r5, r3
     8b6:	2b04      	cmp	r3, #4
     8b8:	dc3a      	bgt.n	930 <hif_handle_isr+0xbc>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     8ba:	ab04      	add	r3, sp, #16
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b01      	cmp	r3, #1
     8c0:	d04f      	beq.n	962 <hif_handle_isr+0xee>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     8c2:	ab04      	add	r3, sp, #16
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	2b02      	cmp	r3, #2
     8c8:	d079      	beq.n	9be <hif_handle_isr+0x14a>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     8ca:	ab04      	add	r3, sp, #16
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b04      	cmp	r3, #4
     8d0:	d100      	bne.n	8d4 <hif_handle_isr+0x60>
     8d2:	e091      	b.n	9f8 <hif_handle_isr+0x184>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     8d4:	ab04      	add	r3, sp, #16
     8d6:	781b      	ldrb	r3, [r3, #0]
     8d8:	2b06      	cmp	r3, #6
     8da:	d100      	bne.n	8de <hif_handle_isr+0x6a>
     8dc:	e0a9      	b.n	a32 <hif_handle_isr+0x1be>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     8de:	ab04      	add	r3, sp, #16
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b07      	cmp	r3, #7
     8e4:	d100      	bne.n	8e8 <hif_handle_isr+0x74>
     8e6:	e0c1      	b.n	a6c <hif_handle_isr+0x1f8>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
     8e8:	ab04      	add	r3, sp, #16
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	2b05      	cmp	r3, #5
     8ee:	d100      	bne.n	8f2 <hif_handle_isr+0x7e>
     8f0:	e0d8      	b.n	aa4 <hif_handle_isr+0x230>
					M2M_ERR("(hif) invalid group ID\n");
     8f2:	2285      	movs	r2, #133	; 0x85
     8f4:	0092      	lsls	r2, r2, #2
     8f6:	49b3      	ldr	r1, [pc, #716]	; (bc4 <hif_handle_isr+0x350>)
     8f8:	48b3      	ldr	r0, [pc, #716]	; (bc8 <hif_handle_isr+0x354>)
     8fa:	4bb4      	ldr	r3, [pc, #720]	; (bcc <hif_handle_isr+0x358>)
     8fc:	4798      	blx	r3
     8fe:	48b4      	ldr	r0, [pc, #720]	; (bd0 <hif_handle_isr+0x35c>)
     900:	4bb4      	ldr	r3, [pc, #720]	; (bd4 <hif_handle_isr+0x360>)
     902:	4798      	blx	r3
     904:	200d      	movs	r0, #13
     906:	4bb4      	ldr	r3, [pc, #720]	; (bd8 <hif_handle_isr+0x364>)
     908:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
     90a:	2406      	movs	r4, #6
     90c:	4264      	negs	r4, r4
     90e:	e115      	b.n	b3c <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
     910:	22eb      	movs	r2, #235	; 0xeb
     912:	0052      	lsls	r2, r2, #1
     914:	49ab      	ldr	r1, [pc, #684]	; (bc4 <hif_handle_isr+0x350>)
     916:	48ac      	ldr	r0, [pc, #688]	; (bc8 <hif_handle_isr+0x354>)
     918:	4bac      	ldr	r3, [pc, #688]	; (bcc <hif_handle_isr+0x358>)
     91a:	4798      	blx	r3
     91c:	48af      	ldr	r0, [pc, #700]	; (bdc <hif_handle_isr+0x368>)
     91e:	4bad      	ldr	r3, [pc, #692]	; (bd4 <hif_handle_isr+0x360>)
     920:	4798      	blx	r3
     922:	200d      	movs	r0, #13
     924:	4bac      	ldr	r3, [pc, #688]	; (bd8 <hif_handle_isr+0x364>)
     926:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     928:	2001      	movs	r0, #1
     92a:	4bad      	ldr	r3, [pc, #692]	; (be0 <hif_handle_isr+0x36c>)
     92c:	4798      	blx	r3
     92e:	e105      	b.n	b3c <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     930:	22e0      	movs	r2, #224	; 0xe0
     932:	32ff      	adds	r2, #255	; 0xff
     934:	49a3      	ldr	r1, [pc, #652]	; (bc4 <hif_handle_isr+0x350>)
     936:	48a4      	ldr	r0, [pc, #656]	; (bc8 <hif_handle_isr+0x354>)
     938:	4ca4      	ldr	r4, [pc, #656]	; (bcc <hif_handle_isr+0x358>)
     93a:	47a0      	blx	r4
     93c:	a904      	add	r1, sp, #16
     93e:	884a      	ldrh	r2, [r1, #2]
     940:	b292      	uxth	r2, r2
     942:	780b      	ldrb	r3, [r1, #0]
     944:	b2db      	uxtb	r3, r3
     946:	7849      	ldrb	r1, [r1, #1]
     948:	9100      	str	r1, [sp, #0]
     94a:	0029      	movs	r1, r5
     94c:	48a5      	ldr	r0, [pc, #660]	; (be4 <hif_handle_isr+0x370>)
     94e:	47a0      	blx	r4
     950:	200d      	movs	r0, #13
     952:	4ba1      	ldr	r3, [pc, #644]	; (bd8 <hif_handle_isr+0x364>)
     954:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     956:	2001      	movs	r0, #1
     958:	4ba1      	ldr	r3, [pc, #644]	; (be0 <hif_handle_isr+0x36c>)
     95a:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     95c:	2406      	movs	r4, #6
     95e:	4264      	negs	r4, r4
     960:	e0ec      	b.n	b3c <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
     962:	4b96      	ldr	r3, [pc, #600]	; (bbc <hif_handle_isr+0x348>)
     964:	68db      	ldr	r3, [r3, #12]
     966:	2b00      	cmp	r3, #0
     968:	d01c      	beq.n	9a4 <hif_handle_isr+0x130>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     96a:	4b94      	ldr	r3, [pc, #592]	; (bbc <hif_handle_isr+0x348>)
     96c:	68db      	ldr	r3, [r3, #12]
     96e:	aa04      	add	r2, sp, #16
     970:	7850      	ldrb	r0, [r2, #1]
     972:	b2c0      	uxtb	r0, r0
     974:	8851      	ldrh	r1, [r2, #2]
     976:	9a05      	ldr	r2, [sp, #20]
     978:	3208      	adds	r2, #8
     97a:	3908      	subs	r1, #8
     97c:	b289      	uxth	r1, r1
     97e:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
     980:	4b8e      	ldr	r3, [pc, #568]	; (bbc <hif_handle_isr+0x348>)
     982:	789b      	ldrb	r3, [r3, #2]
     984:	2b00      	cmp	r3, #0
     986:	d000      	beq.n	98a <hif_handle_isr+0x116>
     988:	e09d      	b.n	ac6 <hif_handle_isr+0x252>
	while(gstrHifCxt.u8Interrupt) 
     98a:	4643      	mov	r3, r8
     98c:	78db      	ldrb	r3, [r3, #3]
     98e:	2b00      	cmp	r3, #0
     990:	d100      	bne.n	994 <hif_handle_isr+0x120>
     992:	e157      	b.n	c44 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
     994:	464b      	mov	r3, r9
     996:	78db      	ldrb	r3, [r3, #3]
     998:	3b01      	subs	r3, #1
     99a:	b2db      	uxtb	r3, r3
     99c:	464a      	mov	r2, r9
     99e:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     9a0:	4e91      	ldr	r6, [pc, #580]	; (be8 <hif_handle_isr+0x374>)
     9a2:	e0d6      	b.n	b52 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
     9a4:	22ec      	movs	r2, #236	; 0xec
     9a6:	32ff      	adds	r2, #255	; 0xff
     9a8:	4986      	ldr	r1, [pc, #536]	; (bc4 <hif_handle_isr+0x350>)
     9aa:	4887      	ldr	r0, [pc, #540]	; (bc8 <hif_handle_isr+0x354>)
     9ac:	4b87      	ldr	r3, [pc, #540]	; (bcc <hif_handle_isr+0x358>)
     9ae:	4798      	blx	r3
     9b0:	488e      	ldr	r0, [pc, #568]	; (bec <hif_handle_isr+0x378>)
     9b2:	4b88      	ldr	r3, [pc, #544]	; (bd4 <hif_handle_isr+0x360>)
     9b4:	4798      	blx	r3
     9b6:	200d      	movs	r0, #13
     9b8:	4b87      	ldr	r3, [pc, #540]	; (bd8 <hif_handle_isr+0x364>)
     9ba:	4798      	blx	r3
     9bc:	e7e0      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfIpCb)
     9be:	4b7f      	ldr	r3, [pc, #508]	; (bbc <hif_handle_isr+0x348>)
     9c0:	691b      	ldr	r3, [r3, #16]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d00b      	beq.n	9de <hif_handle_isr+0x16a>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9c6:	4b7d      	ldr	r3, [pc, #500]	; (bbc <hif_handle_isr+0x348>)
     9c8:	691b      	ldr	r3, [r3, #16]
     9ca:	aa04      	add	r2, sp, #16
     9cc:	7850      	ldrb	r0, [r2, #1]
     9ce:	b2c0      	uxtb	r0, r0
     9d0:	8851      	ldrh	r1, [r2, #2]
     9d2:	9a05      	ldr	r2, [sp, #20]
     9d4:	3208      	adds	r2, #8
     9d6:	3908      	subs	r1, #8
     9d8:	b289      	uxth	r1, r1
     9da:	4798      	blx	r3
     9dc:	e7d0      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Scoket callback is not registered\n");
     9de:	22f4      	movs	r2, #244	; 0xf4
     9e0:	32ff      	adds	r2, #255	; 0xff
     9e2:	4978      	ldr	r1, [pc, #480]	; (bc4 <hif_handle_isr+0x350>)
     9e4:	4878      	ldr	r0, [pc, #480]	; (bc8 <hif_handle_isr+0x354>)
     9e6:	4b79      	ldr	r3, [pc, #484]	; (bcc <hif_handle_isr+0x358>)
     9e8:	4798      	blx	r3
     9ea:	4881      	ldr	r0, [pc, #516]	; (bf0 <hif_handle_isr+0x37c>)
     9ec:	4b79      	ldr	r3, [pc, #484]	; (bd4 <hif_handle_isr+0x360>)
     9ee:	4798      	blx	r3
     9f0:	200d      	movs	r0, #13
     9f2:	4b79      	ldr	r3, [pc, #484]	; (bd8 <hif_handle_isr+0x364>)
     9f4:	4798      	blx	r3
     9f6:	e7c3      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfOtaCb)
     9f8:	4b70      	ldr	r3, [pc, #448]	; (bbc <hif_handle_isr+0x348>)
     9fa:	695b      	ldr	r3, [r3, #20]
     9fc:	2b00      	cmp	r3, #0
     9fe:	d00b      	beq.n	a18 <hif_handle_isr+0x1a4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a00:	4b6e      	ldr	r3, [pc, #440]	; (bbc <hif_handle_isr+0x348>)
     a02:	695b      	ldr	r3, [r3, #20]
     a04:	aa04      	add	r2, sp, #16
     a06:	7850      	ldrb	r0, [r2, #1]
     a08:	b2c0      	uxtb	r0, r0
     a0a:	8851      	ldrh	r1, [r2, #2]
     a0c:	9a05      	ldr	r2, [sp, #20]
     a0e:	3208      	adds	r2, #8
     a10:	3908      	subs	r1, #8
     a12:	b289      	uxth	r1, r1
     a14:	4798      	blx	r3
     a16:	e7b3      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Ota callback is not registered\n");
     a18:	22fc      	movs	r2, #252	; 0xfc
     a1a:	32ff      	adds	r2, #255	; 0xff
     a1c:	4969      	ldr	r1, [pc, #420]	; (bc4 <hif_handle_isr+0x350>)
     a1e:	486a      	ldr	r0, [pc, #424]	; (bc8 <hif_handle_isr+0x354>)
     a20:	4b6a      	ldr	r3, [pc, #424]	; (bcc <hif_handle_isr+0x358>)
     a22:	4798      	blx	r3
     a24:	4873      	ldr	r0, [pc, #460]	; (bf4 <hif_handle_isr+0x380>)
     a26:	4b6b      	ldr	r3, [pc, #428]	; (bd4 <hif_handle_isr+0x360>)
     a28:	4798      	blx	r3
     a2a:	200d      	movs	r0, #13
     a2c:	4b6a      	ldr	r3, [pc, #424]	; (bd8 <hif_handle_isr+0x364>)
     a2e:	4798      	blx	r3
     a30:	e7a6      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfCryptoCb)
     a32:	4b62      	ldr	r3, [pc, #392]	; (bbc <hif_handle_isr+0x348>)
     a34:	6a1b      	ldr	r3, [r3, #32]
     a36:	2b00      	cmp	r3, #0
     a38:	d00b      	beq.n	a52 <hif_handle_isr+0x1de>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a3a:	4b60      	ldr	r3, [pc, #384]	; (bbc <hif_handle_isr+0x348>)
     a3c:	6a1b      	ldr	r3, [r3, #32]
     a3e:	aa04      	add	r2, sp, #16
     a40:	7850      	ldrb	r0, [r2, #1]
     a42:	b2c0      	uxtb	r0, r0
     a44:	8851      	ldrh	r1, [r2, #2]
     a46:	9a05      	ldr	r2, [sp, #20]
     a48:	3208      	adds	r2, #8
     a4a:	3908      	subs	r1, #8
     a4c:	b289      	uxth	r1, r1
     a4e:	4798      	blx	r3
     a50:	e796      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Crypto callback is not registered\n");
     a52:	2281      	movs	r2, #129	; 0x81
     a54:	0092      	lsls	r2, r2, #2
     a56:	495b      	ldr	r1, [pc, #364]	; (bc4 <hif_handle_isr+0x350>)
     a58:	485b      	ldr	r0, [pc, #364]	; (bc8 <hif_handle_isr+0x354>)
     a5a:	4b5c      	ldr	r3, [pc, #368]	; (bcc <hif_handle_isr+0x358>)
     a5c:	4798      	blx	r3
     a5e:	4866      	ldr	r0, [pc, #408]	; (bf8 <hif_handle_isr+0x384>)
     a60:	4b5c      	ldr	r3, [pc, #368]	; (bd4 <hif_handle_isr+0x360>)
     a62:	4798      	blx	r3
     a64:	200d      	movs	r0, #13
     a66:	4b5c      	ldr	r3, [pc, #368]	; (bd8 <hif_handle_isr+0x364>)
     a68:	4798      	blx	r3
     a6a:	e789      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfSigmaCb)
     a6c:	4b53      	ldr	r3, [pc, #332]	; (bbc <hif_handle_isr+0x348>)
     a6e:	699b      	ldr	r3, [r3, #24]
     a70:	2b00      	cmp	r3, #0
     a72:	d00b      	beq.n	a8c <hif_handle_isr+0x218>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a74:	4b51      	ldr	r3, [pc, #324]	; (bbc <hif_handle_isr+0x348>)
     a76:	699b      	ldr	r3, [r3, #24]
     a78:	aa04      	add	r2, sp, #16
     a7a:	7850      	ldrb	r0, [r2, #1]
     a7c:	b2c0      	uxtb	r0, r0
     a7e:	8851      	ldrh	r1, [r2, #2]
     a80:	9a05      	ldr	r2, [sp, #20]
     a82:	3208      	adds	r2, #8
     a84:	3908      	subs	r1, #8
     a86:	b289      	uxth	r1, r1
     a88:	4798      	blx	r3
     a8a:	e779      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Sigma callback is not registered\n");
     a8c:	4a5b      	ldr	r2, [pc, #364]	; (bfc <hif_handle_isr+0x388>)
     a8e:	494d      	ldr	r1, [pc, #308]	; (bc4 <hif_handle_isr+0x350>)
     a90:	484d      	ldr	r0, [pc, #308]	; (bc8 <hif_handle_isr+0x354>)
     a92:	4b4e      	ldr	r3, [pc, #312]	; (bcc <hif_handle_isr+0x358>)
     a94:	4798      	blx	r3
     a96:	485a      	ldr	r0, [pc, #360]	; (c00 <hif_handle_isr+0x38c>)
     a98:	4b4e      	ldr	r3, [pc, #312]	; (bd4 <hif_handle_isr+0x360>)
     a9a:	4798      	blx	r3
     a9c:	200d      	movs	r0, #13
     a9e:	4b4e      	ldr	r3, [pc, #312]	; (bd8 <hif_handle_isr+0x364>)
     aa0:	4798      	blx	r3
     aa2:	e76d      	b.n	980 <hif_handle_isr+0x10c>
				    if(gstrHifCxt.pfSslCb)
     aa4:	4b45      	ldr	r3, [pc, #276]	; (bbc <hif_handle_isr+0x348>)
     aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     aa8:	2b00      	cmp	r3, #0
     aaa:	d100      	bne.n	aae <hif_handle_isr+0x23a>
     aac:	e768      	b.n	980 <hif_handle_isr+0x10c>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     aae:	4b43      	ldr	r3, [pc, #268]	; (bbc <hif_handle_isr+0x348>)
     ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     ab2:	aa04      	add	r2, sp, #16
     ab4:	7850      	ldrb	r0, [r2, #1]
     ab6:	b2c0      	uxtb	r0, r0
     ab8:	8851      	ldrh	r1, [r2, #2]
     aba:	9a05      	ldr	r2, [sp, #20]
     abc:	3208      	adds	r2, #8
     abe:	3908      	subs	r1, #8
     ac0:	b289      	uxth	r1, r1
     ac2:	4798      	blx	r3
     ac4:	e75c      	b.n	980 <hif_handle_isr+0x10c>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
     ac6:	4a4f      	ldr	r2, [pc, #316]	; (c04 <hif_handle_isr+0x390>)
     ac8:	493e      	ldr	r1, [pc, #248]	; (bc4 <hif_handle_isr+0x350>)
     aca:	483f      	ldr	r0, [pc, #252]	; (bc8 <hif_handle_isr+0x354>)
     acc:	4c3f      	ldr	r4, [pc, #252]	; (bcc <hif_handle_isr+0x358>)
     ace:	47a0      	blx	r4
     ad0:	ab04      	add	r3, sp, #16
     ad2:	7819      	ldrb	r1, [r3, #0]
     ad4:	b2c9      	uxtb	r1, r1
     ad6:	785a      	ldrb	r2, [r3, #1]
     ad8:	b2d2      	uxtb	r2, r2
     ada:	484b      	ldr	r0, [pc, #300]	; (c08 <hif_handle_isr+0x394>)
     adc:	47a0      	blx	r4
     ade:	200d      	movs	r0, #13
     ae0:	4b3d      	ldr	r3, [pc, #244]	; (bd8 <hif_handle_isr+0x364>)
     ae2:	4798      	blx	r3
					ret = hif_set_rx_done();
     ae4:	4b49      	ldr	r3, [pc, #292]	; (c0c <hif_handle_isr+0x398>)
     ae6:	4798      	blx	r3
     ae8:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
     aea:	d127      	bne.n	b3c <hif_handle_isr+0x2c8>
     aec:	e74d      	b.n	98a <hif_handle_isr+0x116>
				M2M_ERR("(hif) Wrong Size\n");
     aee:	4a48      	ldr	r2, [pc, #288]	; (c10 <hif_handle_isr+0x39c>)
     af0:	4934      	ldr	r1, [pc, #208]	; (bc4 <hif_handle_isr+0x350>)
     af2:	4835      	ldr	r0, [pc, #212]	; (bc8 <hif_handle_isr+0x354>)
     af4:	4b35      	ldr	r3, [pc, #212]	; (bcc <hif_handle_isr+0x358>)
     af6:	4798      	blx	r3
     af8:	4846      	ldr	r0, [pc, #280]	; (c14 <hif_handle_isr+0x3a0>)
     afa:	4b36      	ldr	r3, [pc, #216]	; (bd4 <hif_handle_isr+0x360>)
     afc:	4798      	blx	r3
     afe:	200d      	movs	r0, #13
     b00:	4b35      	ldr	r3, [pc, #212]	; (bd8 <hif_handle_isr+0x364>)
     b02:	4798      	blx	r3
				ret = M2M_ERR_RCV;
     b04:	2402      	movs	r4, #2
     b06:	4264      	negs	r4, r4
     b08:	e018      	b.n	b3c <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
     b0a:	4a43      	ldr	r2, [pc, #268]	; (c18 <hif_handle_isr+0x3a4>)
     b0c:	492d      	ldr	r1, [pc, #180]	; (bc4 <hif_handle_isr+0x350>)
     b0e:	482e      	ldr	r0, [pc, #184]	; (bc8 <hif_handle_isr+0x354>)
     b10:	4c2e      	ldr	r4, [pc, #184]	; (bcc <hif_handle_isr+0x358>)
     b12:	47a0      	blx	r4
     b14:	9903      	ldr	r1, [sp, #12]
     b16:	4841      	ldr	r0, [pc, #260]	; (c1c <hif_handle_isr+0x3a8>)
     b18:	47a0      	blx	r4
     b1a:	200d      	movs	r0, #13
     b1c:	4b2e      	ldr	r3, [pc, #184]	; (bd8 <hif_handle_isr+0x364>)
     b1e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     b20:	240c      	movs	r4, #12
     b22:	4264      	negs	r4, r4
     b24:	e00a      	b.n	b3c <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
     b26:	4a3e      	ldr	r2, [pc, #248]	; (c20 <hif_handle_isr+0x3ac>)
     b28:	4926      	ldr	r1, [pc, #152]	; (bc4 <hif_handle_isr+0x350>)
     b2a:	4827      	ldr	r0, [pc, #156]	; (bc8 <hif_handle_isr+0x354>)
     b2c:	4b27      	ldr	r3, [pc, #156]	; (bcc <hif_handle_isr+0x358>)
     b2e:	4798      	blx	r3
     b30:	483c      	ldr	r0, [pc, #240]	; (c24 <hif_handle_isr+0x3b0>)
     b32:	4b28      	ldr	r3, [pc, #160]	; (bd4 <hif_handle_isr+0x360>)
     b34:	4798      	blx	r3
     b36:	200d      	movs	r0, #13
     b38:	4b27      	ldr	r3, [pc, #156]	; (bd8 <hif_handle_isr+0x364>)
     b3a:	4798      	blx	r3
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} 
			else 
			{
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     b3c:	4a3a      	ldr	r2, [pc, #232]	; (c28 <hif_handle_isr+0x3b4>)
     b3e:	493b      	ldr	r1, [pc, #236]	; (c2c <hif_handle_isr+0x3b8>)
     b40:	4821      	ldr	r0, [pc, #132]	; (bc8 <hif_handle_isr+0x354>)
     b42:	4f22      	ldr	r7, [pc, #136]	; (bcc <hif_handle_isr+0x358>)
     b44:	47b8      	blx	r7
     b46:	0021      	movs	r1, r4
     b48:	4839      	ldr	r0, [pc, #228]	; (c30 <hif_handle_isr+0x3bc>)
     b4a:	47b8      	blx	r7
     b4c:	200d      	movs	r0, #13
     b4e:	4b22      	ldr	r3, [pc, #136]	; (bd8 <hif_handle_isr+0x364>)
     b50:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     b52:	a903      	add	r1, sp, #12
     b54:	4837      	ldr	r0, [pc, #220]	; (c34 <hif_handle_isr+0x3c0>)
     b56:	47b0      	blx	r6
     b58:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
     b5a:	d1e4      	bne.n	b26 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
     b5c:	9b03      	ldr	r3, [sp, #12]
     b5e:	07db      	lsls	r3, r3, #31
     b60:	d5d3      	bpl.n	b0a <hif_handle_isr+0x296>
			nm_bsp_interrupt_ctrl(0);
     b62:	2000      	movs	r0, #0
     b64:	4b1e      	ldr	r3, [pc, #120]	; (be0 <hif_handle_isr+0x36c>)
     b66:	4798      	blx	r3
			reg &= ~NBIT0;
     b68:	2301      	movs	r3, #1
     b6a:	9903      	ldr	r1, [sp, #12]
     b6c:	4399      	bics	r1, r3
     b6e:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     b70:	4830      	ldr	r0, [pc, #192]	; (c34 <hif_handle_isr+0x3c0>)
     b72:	4b31      	ldr	r3, [pc, #196]	; (c38 <hif_handle_isr+0x3c4>)
     b74:	4798      	blx	r3
     b76:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
     b78:	d1e0      	bne.n	b3c <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
     b7a:	2201      	movs	r2, #1
     b7c:	4b0f      	ldr	r3, [pc, #60]	; (bbc <hif_handle_isr+0x348>)
     b7e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
     b80:	9b03      	ldr	r3, [sp, #12]
     b82:	049d      	lsls	r5, r3, #18
     b84:	0d2d      	lsrs	r5, r5, #20
			if(size > 0) 
     b86:	d0b2      	beq.n	aee <hif_handle_isr+0x27a>
				uint32 address = 0;
     b88:	2300      	movs	r3, #0
     b8a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     b8c:	a905      	add	r1, sp, #20
     b8e:	482b      	ldr	r0, [pc, #172]	; (c3c <hif_handle_isr+0x3c8>)
     b90:	4b15      	ldr	r3, [pc, #84]	; (be8 <hif_handle_isr+0x374>)
     b92:	4798      	blx	r3
     b94:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     b96:	d100      	bne.n	b9a <hif_handle_isr+0x326>
     b98:	e675      	b.n	886 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     b9a:	22e6      	movs	r2, #230	; 0xe6
     b9c:	0052      	lsls	r2, r2, #1
     b9e:	4909      	ldr	r1, [pc, #36]	; (bc4 <hif_handle_isr+0x350>)
     ba0:	4809      	ldr	r0, [pc, #36]	; (bc8 <hif_handle_isr+0x354>)
     ba2:	4b0a      	ldr	r3, [pc, #40]	; (bcc <hif_handle_isr+0x358>)
     ba4:	4798      	blx	r3
     ba6:	4826      	ldr	r0, [pc, #152]	; (c40 <hif_handle_isr+0x3cc>)
     ba8:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <hif_handle_isr+0x360>)
     baa:	4798      	blx	r3
     bac:	200d      	movs	r0, #13
     bae:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <hif_handle_isr+0x364>)
     bb0:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     bb2:	2001      	movs	r0, #1
     bb4:	4b0a      	ldr	r3, [pc, #40]	; (be0 <hif_handle_isr+0x36c>)
     bb6:	4798      	blx	r3
     bb8:	e7c0      	b.n	b3c <hif_handle_isr+0x2c8>
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	200009ec 	.word	0x200009ec
     bc0:	00001995 	.word	0x00001995
     bc4:	0000911c 	.word	0x0000911c
     bc8:	000090c8 	.word	0x000090c8
     bcc:	00007e45 	.word	0x00007e45
     bd0:	00009278 	.word	0x00009278
     bd4:	00007f61 	.word	0x00007f61
     bd8:	00007e79 	.word	0x00007e79
     bdc:	00009174 	.word	0x00009174
     be0:	0000023d 	.word	0x0000023d
     be4:	0000918c 	.word	0x0000918c
     be8:	0000197d 	.word	0x0000197d
     bec:	000091cc 	.word	0x000091cc
     bf0:	000091ec 	.word	0x000091ec
     bf4:	00009210 	.word	0x00009210
     bf8:	00009230 	.word	0x00009230
     bfc:	0000020b 	.word	0x0000020b
     c00:	00009254 	.word	0x00009254
     c04:	0000021a 	.word	0x0000021a
     c08:	00009290 	.word	0x00009290
     c0c:	00000571 	.word	0x00000571
     c10:	00000221 	.word	0x00000221
     c14:	000092bc 	.word	0x000092bc
     c18:	00000229 	.word	0x00000229
     c1c:	000092d0 	.word	0x000092d0
     c20:	00000232 	.word	0x00000232
     c24:	000092ec 	.word	0x000092ec
     c28:	00000256 	.word	0x00000256
     c2c:	00009124 	.word	0x00009124
     c30:	00009310 	.word	0x00009310
     c34:	00001070 	.word	0x00001070
     c38:	00001989 	.word	0x00001989
     c3c:	00001084 	.word	0x00001084
     c40:	00009150 	.word	0x00009150
			}
		}
	}

	return ret;
}
     c44:	2000      	movs	r0, #0
     c46:	b007      	add	sp, #28
     c48:	bc0c      	pop	{r2, r3}
     c4a:	4690      	mov	r8, r2
     c4c:	4699      	mov	r9, r3
     c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c50 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     c50:	b570      	push	{r4, r5, r6, lr}
     c52:	0014      	movs	r4, r2
     c54:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     c56:	2800      	cmp	r0, #0
     c58:	d003      	beq.n	c62 <hif_receive+0x12>
     c5a:	2900      	cmp	r1, #0
     c5c:	d001      	beq.n	c62 <hif_receive+0x12>
     c5e:	2a00      	cmp	r2, #0
     c60:	d112      	bne.n	c88 <hif_receive+0x38>
	{
		if(isDone)
     c62:	2d00      	cmp	r5, #0
     c64:	d002      	beq.n	c6c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     c66:	4b27      	ldr	r3, [pc, #156]	; (d04 <hif_receive+0xb4>)
     c68:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     c6a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     c6c:	4a26      	ldr	r2, [pc, #152]	; (d08 <hif_receive+0xb8>)
     c6e:	4927      	ldr	r1, [pc, #156]	; (d0c <hif_receive+0xbc>)
     c70:	4827      	ldr	r0, [pc, #156]	; (d10 <hif_receive+0xc0>)
     c72:	4b28      	ldr	r3, [pc, #160]	; (d14 <hif_receive+0xc4>)
     c74:	4798      	blx	r3
     c76:	4828      	ldr	r0, [pc, #160]	; (d18 <hif_receive+0xc8>)
     c78:	4b28      	ldr	r3, [pc, #160]	; (d1c <hif_receive+0xcc>)
     c7a:	4798      	blx	r3
     c7c:	200d      	movs	r0, #13
     c7e:	4b28      	ldr	r3, [pc, #160]	; (d20 <hif_receive+0xd0>)
     c80:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     c82:	200c      	movs	r0, #12
     c84:	4240      	negs	r0, r0
     c86:	e7f0      	b.n	c6a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     c88:	4b26      	ldr	r3, [pc, #152]	; (d24 <hif_receive+0xd4>)
     c8a:	689b      	ldr	r3, [r3, #8]
     c8c:	429a      	cmp	r2, r3
     c8e:	d81a      	bhi.n	cc6 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     c90:	4b24      	ldr	r3, [pc, #144]	; (d24 <hif_receive+0xd4>)
     c92:	685b      	ldr	r3, [r3, #4]
     c94:	4298      	cmp	r0, r3
     c96:	d326      	bcc.n	ce6 <hif_receive+0x96>
     c98:	1886      	adds	r6, r0, r2
     c9a:	4a22      	ldr	r2, [pc, #136]	; (d24 <hif_receive+0xd4>)
     c9c:	6853      	ldr	r3, [r2, #4]
     c9e:	6892      	ldr	r2, [r2, #8]
     ca0:	189b      	adds	r3, r3, r2
     ca2:	429e      	cmp	r6, r3
     ca4:	d81f      	bhi.n	ce6 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     ca6:	0022      	movs	r2, r4
     ca8:	4b1f      	ldr	r3, [pc, #124]	; (d28 <hif_receive+0xd8>)
     caa:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     cac:	2800      	cmp	r0, #0
     cae:	d1dc      	bne.n	c6a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     cb0:	4a1c      	ldr	r2, [pc, #112]	; (d24 <hif_receive+0xd4>)
     cb2:	6853      	ldr	r3, [r2, #4]
     cb4:	6892      	ldr	r2, [r2, #8]
     cb6:	189b      	adds	r3, r3, r2
     cb8:	429e      	cmp	r6, r3
     cba:	d001      	beq.n	cc0 <hif_receive+0x70>
     cbc:	2d00      	cmp	r5, #0
     cbe:	d0d4      	beq.n	c6a <hif_receive+0x1a>
		ret = hif_set_rx_done();
     cc0:	4b10      	ldr	r3, [pc, #64]	; (d04 <hif_receive+0xb4>)
     cc2:	4798      	blx	r3
     cc4:	e7d1      	b.n	c6a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     cc6:	4a19      	ldr	r2, [pc, #100]	; (d2c <hif_receive+0xdc>)
     cc8:	4910      	ldr	r1, [pc, #64]	; (d0c <hif_receive+0xbc>)
     cca:	4811      	ldr	r0, [pc, #68]	; (d10 <hif_receive+0xc0>)
     ccc:	4d11      	ldr	r5, [pc, #68]	; (d14 <hif_receive+0xc4>)
     cce:	47a8      	blx	r5
     cd0:	4b14      	ldr	r3, [pc, #80]	; (d24 <hif_receive+0xd4>)
     cd2:	689a      	ldr	r2, [r3, #8]
     cd4:	0021      	movs	r1, r4
     cd6:	4816      	ldr	r0, [pc, #88]	; (d30 <hif_receive+0xe0>)
     cd8:	47a8      	blx	r5
     cda:	200d      	movs	r0, #13
     cdc:	4b10      	ldr	r3, [pc, #64]	; (d20 <hif_receive+0xd0>)
     cde:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     ce0:	200c      	movs	r0, #12
     ce2:	4240      	negs	r0, r0
		goto ERR1;
     ce4:	e7c1      	b.n	c6a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     ce6:	4a13      	ldr	r2, [pc, #76]	; (d34 <hif_receive+0xe4>)
     ce8:	4908      	ldr	r1, [pc, #32]	; (d0c <hif_receive+0xbc>)
     cea:	4809      	ldr	r0, [pc, #36]	; (d10 <hif_receive+0xc0>)
     cec:	4b09      	ldr	r3, [pc, #36]	; (d14 <hif_receive+0xc4>)
     cee:	4798      	blx	r3
     cf0:	4811      	ldr	r0, [pc, #68]	; (d38 <hif_receive+0xe8>)
     cf2:	4b0a      	ldr	r3, [pc, #40]	; (d1c <hif_receive+0xcc>)
     cf4:	4798      	blx	r3
     cf6:	200d      	movs	r0, #13
     cf8:	4b09      	ldr	r3, [pc, #36]	; (d20 <hif_receive+0xd0>)
     cfa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     cfc:	200c      	movs	r0, #12
     cfe:	4240      	negs	r0, r0
		goto ERR1;
     d00:	e7b3      	b.n	c6a <hif_receive+0x1a>
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000571 	.word	0x00000571
     d08:	00000277 	.word	0x00000277
     d0c:	00009134 	.word	0x00009134
     d10:	000090c8 	.word	0x000090c8
     d14:	00007e45 	.word	0x00007e45
     d18:	00009340 	.word	0x00009340
     d1c:	00007f61 	.word	0x00007f61
     d20:	00007e79 	.word	0x00007e79
     d24:	200009ec 	.word	0x200009ec
     d28:	00001995 	.word	0x00001995
     d2c:	0000027f 	.word	0x0000027f
     d30:	00009360 	.word	0x00009360
     d34:	00000285 	.word	0x00000285
     d38:	000093a8 	.word	0x000093a8

00000d3c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     d3c:	b570      	push	{r4, r5, r6, lr}
     d3e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     d40:	2807      	cmp	r0, #7
     d42:	d81f      	bhi.n	d84 <hif_register_cb+0x48>
     d44:	0083      	lsls	r3, r0, #2
     d46:	4a16      	ldr	r2, [pc, #88]	; (da0 <hif_register_cb+0x64>)
     d48:	58d3      	ldr	r3, [r2, r3]
     d4a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     d4c:	4b15      	ldr	r3, [pc, #84]	; (da4 <hif_register_cb+0x68>)
     d4e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     d50:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     d52:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     d54:	4b13      	ldr	r3, [pc, #76]	; (da4 <hif_register_cb+0x68>)
     d56:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
     d58:	2000      	movs	r0, #0
			break;
     d5a:	e7fa      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     d5c:	4b11      	ldr	r3, [pc, #68]	; (da4 <hif_register_cb+0x68>)
     d5e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     d60:	2000      	movs	r0, #0
			break;
     d62:	e7f6      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     d64:	4b0f      	ldr	r3, [pc, #60]	; (da4 <hif_register_cb+0x68>)
     d66:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     d68:	2000      	movs	r0, #0
			break;
     d6a:	e7f2      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     d6c:	4b0d      	ldr	r3, [pc, #52]	; (da4 <hif_register_cb+0x68>)
     d6e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     d70:	2000      	movs	r0, #0
			break;
     d72:	e7ee      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     d74:	4b0b      	ldr	r3, [pc, #44]	; (da4 <hif_register_cb+0x68>)
     d76:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     d78:	2000      	movs	r0, #0
			break;
     d7a:	e7ea      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     d7c:	4b09      	ldr	r3, [pc, #36]	; (da4 <hif_register_cb+0x68>)
     d7e:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     d80:	2000      	movs	r0, #0
			break;
     d82:	e7e6      	b.n	d52 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     d84:	4a08      	ldr	r2, [pc, #32]	; (da8 <hif_register_cb+0x6c>)
     d86:	4909      	ldr	r1, [pc, #36]	; (dac <hif_register_cb+0x70>)
     d88:	4809      	ldr	r0, [pc, #36]	; (db0 <hif_register_cb+0x74>)
     d8a:	4d0a      	ldr	r5, [pc, #40]	; (db4 <hif_register_cb+0x78>)
     d8c:	47a8      	blx	r5
     d8e:	0021      	movs	r1, r4
     d90:	4809      	ldr	r0, [pc, #36]	; (db8 <hif_register_cb+0x7c>)
     d92:	47a8      	blx	r5
     d94:	200d      	movs	r0, #13
     d96:	4b09      	ldr	r3, [pc, #36]	; (dbc <hif_register_cb+0x80>)
     d98:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     d9a:	200c      	movs	r0, #12
     d9c:	4240      	negs	r0, r0
			break;
     d9e:	e7d8      	b.n	d52 <hif_register_cb+0x16>
     da0:	000090f0 	.word	0x000090f0
     da4:	200009ec 	.word	0x200009ec
     da8:	000002bd 	.word	0x000002bd
     dac:	00009140 	.word	0x00009140
     db0:	000090c8 	.word	0x000090c8
     db4:	00007e45 	.word	0x00007e45
     db8:	000093ec 	.word	0x000093ec
     dbc:	00007e79 	.word	0x00007e79

00000dc0 <hif_init>:
{
     dc0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     dc2:	2228      	movs	r2, #40	; 0x28
     dc4:	2100      	movs	r1, #0
     dc6:	4806      	ldr	r0, [pc, #24]	; (de0 <hif_init+0x20>)
     dc8:	4b06      	ldr	r3, [pc, #24]	; (de4 <hif_init+0x24>)
     dca:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     dcc:	4806      	ldr	r0, [pc, #24]	; (de8 <hif_init+0x28>)
     dce:	4b07      	ldr	r3, [pc, #28]	; (dec <hif_init+0x2c>)
     dd0:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     dd2:	4907      	ldr	r1, [pc, #28]	; (df0 <hif_init+0x30>)
     dd4:	2003      	movs	r0, #3
     dd6:	4b07      	ldr	r3, [pc, #28]	; (df4 <hif_init+0x34>)
     dd8:	4798      	blx	r3
}
     dda:	2000      	movs	r0, #0
     ddc:	bd10      	pop	{r4, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	200009ec 	.word	0x200009ec
     de4:	00000531 	.word	0x00000531
     de8:	0000055d 	.word	0x0000055d
     dec:	000001e5 	.word	0x000001e5
     df0:	0000056d 	.word	0x0000056d
     df4:	00000d3d 	.word	0x00000d3d

00000df8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     df8:	b530      	push	{r4, r5, lr}
     dfa:	b09f      	sub	sp, #124	; 0x7c
     dfc:	0004      	movs	r4, r0
     dfe:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     e00:	282c      	cmp	r0, #44	; 0x2c
     e02:	d02f      	beq.n	e64 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     e04:	281b      	cmp	r0, #27
     e06:	d03d      	beq.n	e84 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     e08:	2806      	cmp	r0, #6
     e0a:	d04b      	beq.n	ea4 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     e0c:	280e      	cmp	r0, #14
     e0e:	d027      	beq.n	e60 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e10:	2832      	cmp	r0, #50	; 0x32
     e12:	d057      	beq.n	ec4 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e14:	282f      	cmp	r0, #47	; 0x2f
     e16:	d065      	beq.n	ee4 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e18:	2834      	cmp	r0, #52	; 0x34
     e1a:	d100      	bne.n	e1e <m2m_wifi_cb+0x26>
     e1c:	e077      	b.n	f0e <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     e1e:	2811      	cmp	r0, #17
     e20:	d100      	bne.n	e24 <m2m_wifi_cb+0x2c>
     e22:	e096      	b.n	f52 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     e24:	2813      	cmp	r0, #19
     e26:	d100      	bne.n	e2a <m2m_wifi_cb+0x32>
     e28:	e0ac      	b.n	f84 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     e2a:	2804      	cmp	r0, #4
     e2c:	d100      	bne.n	e30 <m2m_wifi_cb+0x38>
     e2e:	e0bb      	b.n	fa8 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     e30:	2865      	cmp	r0, #101	; 0x65
     e32:	d100      	bne.n	e36 <m2m_wifi_cb+0x3e>
     e34:	e0ca      	b.n	fcc <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     e36:	2809      	cmp	r0, #9
     e38:	d100      	bne.n	e3c <m2m_wifi_cb+0x44>
     e3a:	e0d9      	b.n	ff0 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     e3c:	282a      	cmp	r0, #42	; 0x2a
     e3e:	d100      	bne.n	e42 <m2m_wifi_cb+0x4a>
     e40:	e0e8      	b.n	1014 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     e42:	2820      	cmp	r0, #32
     e44:	d100      	bne.n	e48 <m2m_wifi_cb+0x50>
     e46:	e0f7      	b.n	1038 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     e48:	2295      	movs	r2, #149	; 0x95
     e4a:	0052      	lsls	r2, r2, #1
     e4c:	4989      	ldr	r1, [pc, #548]	; (1074 <m2m_wifi_cb+0x27c>)
     e4e:	488a      	ldr	r0, [pc, #552]	; (1078 <m2m_wifi_cb+0x280>)
     e50:	4d8a      	ldr	r5, [pc, #552]	; (107c <m2m_wifi_cb+0x284>)
     e52:	47a8      	blx	r5
     e54:	0021      	movs	r1, r4
     e56:	488a      	ldr	r0, [pc, #552]	; (1080 <m2m_wifi_cb+0x288>)
     e58:	47a8      	blx	r5
     e5a:	200d      	movs	r0, #13
     e5c:	4b89      	ldr	r3, [pc, #548]	; (1084 <m2m_wifi_cb+0x28c>)
     e5e:	4798      	blx	r3
	}
}
     e60:	b01f      	add	sp, #124	; 0x7c
     e62:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     e64:	2300      	movs	r3, #0
     e66:	2204      	movs	r2, #4
     e68:	a903      	add	r1, sp, #12
     e6a:	0028      	movs	r0, r5
     e6c:	4c86      	ldr	r4, [pc, #536]	; (1088 <m2m_wifi_cb+0x290>)
     e6e:	47a0      	blx	r4
     e70:	2800      	cmp	r0, #0
     e72:	d1f5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     e74:	4b85      	ldr	r3, [pc, #532]	; (108c <m2m_wifi_cb+0x294>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	2b00      	cmp	r3, #0
     e7a:	d0f1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     e7c:	a903      	add	r1, sp, #12
     e7e:	302c      	adds	r0, #44	; 0x2c
     e80:	4798      	blx	r3
     e82:	e7ed      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     e84:	2300      	movs	r3, #0
     e86:	2208      	movs	r2, #8
     e88:	a903      	add	r1, sp, #12
     e8a:	0028      	movs	r0, r5
     e8c:	4c7e      	ldr	r4, [pc, #504]	; (1088 <m2m_wifi_cb+0x290>)
     e8e:	47a0      	blx	r4
     e90:	2800      	cmp	r0, #0
     e92:	d1e5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     e94:	4b7d      	ldr	r3, [pc, #500]	; (108c <m2m_wifi_cb+0x294>)
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	2b00      	cmp	r3, #0
     e9a:	d0e1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     e9c:	a903      	add	r1, sp, #12
     e9e:	301b      	adds	r0, #27
     ea0:	4798      	blx	r3
     ea2:	e7dd      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     ea4:	2301      	movs	r3, #1
     ea6:	2230      	movs	r2, #48	; 0x30
     ea8:	a903      	add	r1, sp, #12
     eaa:	0028      	movs	r0, r5
     eac:	4c76      	ldr	r4, [pc, #472]	; (1088 <m2m_wifi_cb+0x290>)
     eae:	47a0      	blx	r4
     eb0:	2800      	cmp	r0, #0
     eb2:	d1d5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     eb4:	4b75      	ldr	r3, [pc, #468]	; (108c <m2m_wifi_cb+0x294>)
     eb6:	681b      	ldr	r3, [r3, #0]
     eb8:	2b00      	cmp	r3, #0
     eba:	d0d1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     ebc:	a903      	add	r1, sp, #12
     ebe:	3006      	adds	r0, #6
     ec0:	4798      	blx	r3
     ec2:	e7cd      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     ec4:	2300      	movs	r3, #0
     ec6:	2214      	movs	r2, #20
     ec8:	a903      	add	r1, sp, #12
     eca:	0028      	movs	r0, r5
     ecc:	4c6e      	ldr	r4, [pc, #440]	; (1088 <m2m_wifi_cb+0x290>)
     ece:	47a0      	blx	r4
     ed0:	2800      	cmp	r0, #0
     ed2:	d1c5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     ed4:	4b6d      	ldr	r3, [pc, #436]	; (108c <m2m_wifi_cb+0x294>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	2b00      	cmp	r3, #0
     eda:	d0c1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     edc:	a903      	add	r1, sp, #12
     ede:	3032      	adds	r0, #50	; 0x32
     ee0:	4798      	blx	r3
     ee2:	e7bd      	b.n	e60 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     ee4:	2264      	movs	r2, #100	; 0x64
     ee6:	2100      	movs	r1, #0
     ee8:	a803      	add	r0, sp, #12
     eea:	4b69      	ldr	r3, [pc, #420]	; (1090 <m2m_wifi_cb+0x298>)
     eec:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     eee:	2300      	movs	r3, #0
     ef0:	2264      	movs	r2, #100	; 0x64
     ef2:	a903      	add	r1, sp, #12
     ef4:	0028      	movs	r0, r5
     ef6:	4c64      	ldr	r4, [pc, #400]	; (1088 <m2m_wifi_cb+0x290>)
     ef8:	47a0      	blx	r4
     efa:	2800      	cmp	r0, #0
     efc:	d1b0      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     efe:	4b63      	ldr	r3, [pc, #396]	; (108c <m2m_wifi_cb+0x294>)
     f00:	681b      	ldr	r3, [r3, #0]
     f02:	2b00      	cmp	r3, #0
     f04:	d0ac      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     f06:	a903      	add	r1, sp, #12
     f08:	302f      	adds	r0, #47	; 0x2f
     f0a:	4798      	blx	r3
     f0c:	e7a8      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     f0e:	2300      	movs	r3, #0
     f10:	2204      	movs	r2, #4
     f12:	a903      	add	r1, sp, #12
     f14:	0028      	movs	r0, r5
     f16:	4c5c      	ldr	r4, [pc, #368]	; (1088 <m2m_wifi_cb+0x290>)
     f18:	47a0      	blx	r4
     f1a:	2800      	cmp	r0, #0
     f1c:	d1a0      	bne.n	e60 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     f1e:	485d      	ldr	r0, [pc, #372]	; (1094 <m2m_wifi_cb+0x29c>)
     f20:	4d56      	ldr	r5, [pc, #344]	; (107c <m2m_wifi_cb+0x284>)
     f22:	47a8      	blx	r5
     f24:	9c03      	ldr	r4, [sp, #12]
     f26:	0a23      	lsrs	r3, r4, #8
     f28:	20ff      	movs	r0, #255	; 0xff
     f2a:	4003      	ands	r3, r0
     f2c:	0c22      	lsrs	r2, r4, #16
     f2e:	4002      	ands	r2, r0
     f30:	0e21      	lsrs	r1, r4, #24
     f32:	4020      	ands	r0, r4
     f34:	9000      	str	r0, [sp, #0]
     f36:	4858      	ldr	r0, [pc, #352]	; (1098 <m2m_wifi_cb+0x2a0>)
     f38:	47a8      	blx	r5
     f3a:	200d      	movs	r0, #13
     f3c:	4b51      	ldr	r3, [pc, #324]	; (1084 <m2m_wifi_cb+0x28c>)
     f3e:	4798      	blx	r3
			if (gpfAppWifiCb)
     f40:	4b52      	ldr	r3, [pc, #328]	; (108c <m2m_wifi_cb+0x294>)
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	2b00      	cmp	r3, #0
     f46:	d100      	bne.n	f4a <m2m_wifi_cb+0x152>
     f48:	e78a      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     f4a:	2100      	movs	r1, #0
     f4c:	2034      	movs	r0, #52	; 0x34
     f4e:	4798      	blx	r3
     f50:	e786      	b.n	e60 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
     f52:	2200      	movs	r2, #0
     f54:	4b51      	ldr	r3, [pc, #324]	; (109c <m2m_wifi_cb+0x2a4>)
     f56:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     f58:	2300      	movs	r3, #0
     f5a:	3204      	adds	r2, #4
     f5c:	a903      	add	r1, sp, #12
     f5e:	0028      	movs	r0, r5
     f60:	4c49      	ldr	r4, [pc, #292]	; (1088 <m2m_wifi_cb+0x290>)
     f62:	47a0      	blx	r4
     f64:	2800      	cmp	r0, #0
     f66:	d000      	beq.n	f6a <m2m_wifi_cb+0x172>
     f68:	e77a      	b.n	e60 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
     f6a:	ab03      	add	r3, sp, #12
     f6c:	781a      	ldrb	r2, [r3, #0]
     f6e:	4b4c      	ldr	r3, [pc, #304]	; (10a0 <m2m_wifi_cb+0x2a8>)
     f70:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     f72:	4b46      	ldr	r3, [pc, #280]	; (108c <m2m_wifi_cb+0x294>)
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	2b00      	cmp	r3, #0
     f78:	d100      	bne.n	f7c <m2m_wifi_cb+0x184>
     f7a:	e771      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     f7c:	a903      	add	r1, sp, #12
     f7e:	3011      	adds	r0, #17
     f80:	4798      	blx	r3
     f82:	e76d      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     f84:	2300      	movs	r3, #0
     f86:	222c      	movs	r2, #44	; 0x2c
     f88:	a903      	add	r1, sp, #12
     f8a:	0028      	movs	r0, r5
     f8c:	4c3e      	ldr	r4, [pc, #248]	; (1088 <m2m_wifi_cb+0x290>)
     f8e:	47a0      	blx	r4
     f90:	2800      	cmp	r0, #0
     f92:	d000      	beq.n	f96 <m2m_wifi_cb+0x19e>
     f94:	e764      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f96:	4b3d      	ldr	r3, [pc, #244]	; (108c <m2m_wifi_cb+0x294>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d100      	bne.n	fa0 <m2m_wifi_cb+0x1a8>
     f9e:	e75f      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
     fa0:	a903      	add	r1, sp, #12
     fa2:	3013      	adds	r0, #19
     fa4:	4798      	blx	r3
     fa6:	e75b      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     fa8:	2300      	movs	r3, #0
     faa:	2204      	movs	r2, #4
     fac:	a91c      	add	r1, sp, #112	; 0x70
     fae:	0028      	movs	r0, r5
     fb0:	4c35      	ldr	r4, [pc, #212]	; (1088 <m2m_wifi_cb+0x290>)
     fb2:	47a0      	blx	r4
     fb4:	2800      	cmp	r0, #0
     fb6:	d000      	beq.n	fba <m2m_wifi_cb+0x1c2>
     fb8:	e752      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     fba:	4b34      	ldr	r3, [pc, #208]	; (108c <m2m_wifi_cb+0x294>)
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d100      	bne.n	fc4 <m2m_wifi_cb+0x1cc>
     fc2:	e74d      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
     fc4:	a91c      	add	r1, sp, #112	; 0x70
     fc6:	3004      	adds	r0, #4
     fc8:	4798      	blx	r3
     fca:	e749      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     fcc:	2300      	movs	r3, #0
     fce:	2204      	movs	r2, #4
     fd0:	a91c      	add	r1, sp, #112	; 0x70
     fd2:	0028      	movs	r0, r5
     fd4:	4c2c      	ldr	r4, [pc, #176]	; (1088 <m2m_wifi_cb+0x290>)
     fd6:	47a0      	blx	r4
     fd8:	2800      	cmp	r0, #0
     fda:	d000      	beq.n	fde <m2m_wifi_cb+0x1e6>
     fdc:	e740      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     fde:	4b2b      	ldr	r3, [pc, #172]	; (108c <m2m_wifi_cb+0x294>)
     fe0:	681b      	ldr	r3, [r3, #0]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d100      	bne.n	fe8 <m2m_wifi_cb+0x1f0>
     fe6:	e73b      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
     fe8:	a91c      	add	r1, sp, #112	; 0x70
     fea:	3065      	adds	r0, #101	; 0x65
     fec:	4798      	blx	r3
     fee:	e737      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
     ff0:	2301      	movs	r3, #1
     ff2:	2264      	movs	r2, #100	; 0x64
     ff4:	a903      	add	r1, sp, #12
     ff6:	0028      	movs	r0, r5
     ff8:	4c23      	ldr	r4, [pc, #140]	; (1088 <m2m_wifi_cb+0x290>)
     ffa:	47a0      	blx	r4
     ffc:	2800      	cmp	r0, #0
     ffe:	d000      	beq.n	1002 <m2m_wifi_cb+0x20a>
    1000:	e72e      	b.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1002:	4b22      	ldr	r3, [pc, #136]	; (108c <m2m_wifi_cb+0x294>)
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	2b00      	cmp	r3, #0
    1008:	d100      	bne.n	100c <m2m_wifi_cb+0x214>
    100a:	e729      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    100c:	a903      	add	r1, sp, #12
    100e:	3009      	adds	r0, #9
    1010:	4798      	blx	r3
    1012:	e725      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1014:	2301      	movs	r3, #1
    1016:	2204      	movs	r2, #4
    1018:	a903      	add	r1, sp, #12
    101a:	0028      	movs	r0, r5
    101c:	4c1a      	ldr	r4, [pc, #104]	; (1088 <m2m_wifi_cb+0x290>)
    101e:	47a0      	blx	r4
    1020:	2800      	cmp	r0, #0
    1022:	d000      	beq.n	1026 <m2m_wifi_cb+0x22e>
    1024:	e71c      	b.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1026:	4b19      	ldr	r3, [pc, #100]	; (108c <m2m_wifi_cb+0x294>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d100      	bne.n	1030 <m2m_wifi_cb+0x238>
    102e:	e717      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1030:	a903      	add	r1, sp, #12
    1032:	302a      	adds	r0, #42	; 0x2a
    1034:	4798      	blx	r3
    1036:	e713      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1038:	2300      	movs	r3, #0
    103a:	2208      	movs	r2, #8
    103c:	a903      	add	r1, sp, #12
    103e:	0028      	movs	r0, r5
    1040:	4c11      	ldr	r4, [pc, #68]	; (1088 <m2m_wifi_cb+0x290>)
    1042:	47a0      	blx	r4
    1044:	2800      	cmp	r0, #0
    1046:	d000      	beq.n	104a <m2m_wifi_cb+0x252>
    1048:	e70a      	b.n	e60 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    104a:	ab03      	add	r3, sp, #12
    104c:	889a      	ldrh	r2, [r3, #4]
    104e:	0028      	movs	r0, r5
    1050:	3008      	adds	r0, #8
    1052:	2301      	movs	r3, #1
    1054:	9903      	ldr	r1, [sp, #12]
    1056:	4c0c      	ldr	r4, [pc, #48]	; (1088 <m2m_wifi_cb+0x290>)
    1058:	47a0      	blx	r4
    105a:	2800      	cmp	r0, #0
    105c:	d000      	beq.n	1060 <m2m_wifi_cb+0x268>
    105e:	e6ff      	b.n	e60 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    1060:	4b0a      	ldr	r3, [pc, #40]	; (108c <m2m_wifi_cb+0x294>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	2b00      	cmp	r3, #0
    1066:	d100      	bne.n	106a <m2m_wifi_cb+0x272>
    1068:	e6fa      	b.n	e60 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    106a:	a903      	add	r1, sp, #12
    106c:	3020      	adds	r0, #32
    106e:	4798      	blx	r3
    1070:	e6f6      	b.n	e60 <m2m_wifi_cb+0x68>
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00009430 	.word	0x00009430
    1078:	000090c8 	.word	0x000090c8
    107c:	00007e45 	.word	0x00007e45
    1080:	00009480 	.word	0x00009480
    1084:	00007e79 	.word	0x00007e79
    1088:	00000c51 	.word	0x00000c51
    108c:	20000094 	.word	0x20000094
    1090:	00000531 	.word	0x00000531
    1094:	000093f8 	.word	0x000093f8
    1098:	00009460 	.word	0x00009460
    109c:	20000099 	.word	0x20000099
    10a0:	20000098 	.word	0x20000098

000010a4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    10a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a6:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    10a8:	2201      	movs	r2, #1
    10aa:	230f      	movs	r3, #15
    10ac:	446b      	add	r3, sp
    10ae:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) 
    10b0:	2800      	cmp	r0, #0
    10b2:	d061      	beq.n	1178 <m2m_wifi_init+0xd4>
	{
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    10b4:	6802      	ldr	r2, [r0, #0]
    10b6:	4b32      	ldr	r3, [pc, #200]	; (1180 <m2m_wifi_init+0xdc>)
    10b8:	601a      	str	r2, [r3, #0]
#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
*/

	gu8scanInProgress = 0;
    10ba:	2200      	movs	r2, #0
    10bc:	4b31      	ldr	r3, [pc, #196]	; (1184 <m2m_wifi_init+0xe0>)
    10be:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    10c0:	200f      	movs	r0, #15
    10c2:	4468      	add	r0, sp
    10c4:	4b30      	ldr	r3, [pc, #192]	; (1188 <m2m_wifi_init+0xe4>)
    10c6:	4798      	blx	r3
    10c8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    10ca:	d002      	beq.n	10d2 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    10cc:	0020      	movs	r0, r4
    10ce:	b00f      	add	sp, #60	; 0x3c
    10d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    10d2:	2000      	movs	r0, #0
    10d4:	4b2d      	ldr	r3, [pc, #180]	; (118c <m2m_wifi_init+0xe8>)
    10d6:	4798      	blx	r3
    10d8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    10da:	d149      	bne.n	1170 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    10dc:	492c      	ldr	r1, [pc, #176]	; (1190 <m2m_wifi_init+0xec>)
    10de:	2001      	movs	r0, #1
    10e0:	4b2c      	ldr	r3, [pc, #176]	; (1194 <m2m_wifi_init+0xf0>)
    10e2:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    10e4:	ae04      	add	r6, sp, #16
    10e6:	0030      	movs	r0, r6
    10e8:	4b2b      	ldr	r3, [pc, #172]	; (1198 <m2m_wifi_init+0xf4>)
    10ea:	4798      	blx	r3
    10ec:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    10ee:	482b      	ldr	r0, [pc, #172]	; (119c <m2m_wifi_init+0xf8>)
    10f0:	4d2b      	ldr	r5, [pc, #172]	; (11a0 <m2m_wifi_init+0xfc>)
    10f2:	47a8      	blx	r5
    10f4:	79b3      	ldrb	r3, [r6, #6]
    10f6:	7972      	ldrb	r2, [r6, #5]
    10f8:	7931      	ldrb	r1, [r6, #4]
    10fa:	8c30      	ldrh	r0, [r6, #32]
    10fc:	9000      	str	r0, [sp, #0]
    10fe:	4829      	ldr	r0, [pc, #164]	; (11a4 <m2m_wifi_init+0x100>)
    1100:	47a8      	blx	r5
    1102:	200d      	movs	r0, #13
    1104:	4f28      	ldr	r7, [pc, #160]	; (11a8 <m2m_wifi_init+0x104>)
    1106:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1108:	4824      	ldr	r0, [pc, #144]	; (119c <m2m_wifi_init+0xf8>)
    110a:	47a8      	blx	r5
    110c:	2226      	movs	r2, #38	; 0x26
    110e:	446a      	add	r2, sp
    1110:	211a      	movs	r1, #26
    1112:	4469      	add	r1, sp
    1114:	4825      	ldr	r0, [pc, #148]	; (11ac <m2m_wifi_init+0x108>)
    1116:	47a8      	blx	r5
    1118:	200d      	movs	r0, #13
    111a:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    111c:	481f      	ldr	r0, [pc, #124]	; (119c <m2m_wifi_init+0xf8>)
    111e:	47a8      	blx	r5
    1120:	7a73      	ldrb	r3, [r6, #9]
    1122:	7a32      	ldrb	r2, [r6, #8]
    1124:	79f1      	ldrb	r1, [r6, #7]
    1126:	4822      	ldr	r0, [pc, #136]	; (11b0 <m2m_wifi_init+0x10c>)
    1128:	47a8      	blx	r5
    112a:	200d      	movs	r0, #13
    112c:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    112e:	481b      	ldr	r0, [pc, #108]	; (119c <m2m_wifi_init+0xf8>)
    1130:	47a8      	blx	r5
    1132:	2302      	movs	r3, #2
    1134:	2205      	movs	r2, #5
    1136:	2113      	movs	r1, #19
    1138:	481e      	ldr	r0, [pc, #120]	; (11b4 <m2m_wifi_init+0x110>)
    113a:	47a8      	blx	r5
    113c:	200d      	movs	r0, #13
    113e:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1140:	4816      	ldr	r0, [pc, #88]	; (119c <m2m_wifi_init+0xf8>)
    1142:	47a8      	blx	r5
    1144:	4a1c      	ldr	r2, [pc, #112]	; (11b8 <m2m_wifi_init+0x114>)
    1146:	491d      	ldr	r1, [pc, #116]	; (11bc <m2m_wifi_init+0x118>)
    1148:	481d      	ldr	r0, [pc, #116]	; (11c0 <m2m_wifi_init+0x11c>)
    114a:	47a8      	blx	r5
    114c:	200d      	movs	r0, #13
    114e:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1150:	0023      	movs	r3, r4
    1152:	330d      	adds	r3, #13
    1154:	d1ba      	bne.n	10cc <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    1156:	22f8      	movs	r2, #248	; 0xf8
    1158:	0052      	lsls	r2, r2, #1
    115a:	491a      	ldr	r1, [pc, #104]	; (11c4 <m2m_wifi_init+0x120>)
    115c:	481a      	ldr	r0, [pc, #104]	; (11c8 <m2m_wifi_init+0x124>)
    115e:	4b10      	ldr	r3, [pc, #64]	; (11a0 <m2m_wifi_init+0xfc>)
    1160:	4798      	blx	r3
    1162:	481a      	ldr	r0, [pc, #104]	; (11cc <m2m_wifi_init+0x128>)
    1164:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <m2m_wifi_init+0x12c>)
    1166:	4798      	blx	r3
    1168:	200d      	movs	r0, #13
    116a:	4b0f      	ldr	r3, [pc, #60]	; (11a8 <m2m_wifi_init+0x104>)
    116c:	4798      	blx	r3
    116e:	e7ad      	b.n	10cc <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    1170:	2000      	movs	r0, #0
    1172:	4b18      	ldr	r3, [pc, #96]	; (11d4 <m2m_wifi_init+0x130>)
    1174:	4798      	blx	r3
    1176:	e7a9      	b.n	10cc <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1178:	240c      	movs	r4, #12
    117a:	4264      	negs	r4, r4
    117c:	e7a6      	b.n	10cc <m2m_wifi_init+0x28>
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	20000094 	.word	0x20000094
    1184:	20000099 	.word	0x20000099
    1188:	00001b49 	.word	0x00001b49
    118c:	00000dc1 	.word	0x00000dc1
    1190:	00000df9 	.word	0x00000df9
    1194:	00000d3d 	.word	0x00000d3d
    1198:	00001a65 	.word	0x00001a65
    119c:	000093f8 	.word	0x000093f8
    11a0:	00007e45 	.word	0x00007e45
    11a4:	0000953c 	.word	0x0000953c
    11a8:	00007e79 	.word	0x00007e79
    11ac:	00009564 	.word	0x00009564
    11b0:	00009580 	.word	0x00009580
    11b4:	000095a4 	.word	0x000095a4
    11b8:	000095bc 	.word	0x000095bc
    11bc:	000095c8 	.word	0x000095c8
    11c0:	000095d4 	.word	0x000095d4
    11c4:	0000943c 	.word	0x0000943c
    11c8:	000090c8 	.word	0x000090c8
    11cc:	000095ec 	.word	0x000095ec
    11d0:	00007f61 	.word	0x00007f61
    11d4:	00001c1d 	.word	0x00001c1d

000011d8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    11d8:	b510      	push	{r4, lr}
	return hif_handle_isr();
    11da:	4b01      	ldr	r3, [pc, #4]	; (11e0 <m2m_wifi_handle_events+0x8>)
    11dc:	4798      	blx	r3
}
    11de:	bd10      	pop	{r4, pc}
    11e0:	00000875 	.word	0x00000875

000011e4 <m2m_wifi_connect_sc>:
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    11e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e6:	46ce      	mov	lr, r9
    11e8:	4647      	mov	r7, r8
    11ea:	b580      	push	{r7, lr}
    11ec:	b0a3      	sub	sp, #140	; 0x8c
    11ee:	9005      	str	r0, [sp, #20]
    11f0:	000c      	movs	r4, r1
    11f2:	0015      	movs	r5, r2
    11f4:	001f      	movs	r7, r3
    11f6:	ab2a      	add	r3, sp, #168	; 0xa8
    11f8:	881b      	ldrh	r3, [r3, #0]
    11fa:	4699      	mov	r9, r3
    11fc:	ab2b      	add	r3, sp, #172	; 0xac
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1202:	2a01      	cmp	r2, #1
    1204:	d003      	beq.n	120e <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    1206:	2f00      	cmp	r7, #0
    1208:	d040      	beq.n	128c <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    120a:	2a02      	cmp	r2, #2
    120c:	d04c      	beq.n	12a8 <m2m_wifi_connect_sc+0xc4>
				i++;
			}
		}
	}
	
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    120e:	1e63      	subs	r3, r4, #1
    1210:	2b1f      	cmp	r3, #31
    1212:	d900      	bls.n	1216 <m2m_wifi_connect_sc+0x32>
    1214:	e078      	b.n	1308 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1216:	464b      	mov	r3, r9
    1218:	3b01      	subs	r3, #1
    121a:	b29b      	uxth	r3, r3
    121c:	2b0d      	cmp	r3, #13
    121e:	d903      	bls.n	1228 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1220:	464b      	mov	r3, r9
    1222:	2bff      	cmp	r3, #255	; 0xff
    1224:	d000      	beq.n	1228 <m2m_wifi_connect_sc+0x44>
    1226:	e07d      	b.n	1324 <m2m_wifi_connect_sc+0x140>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
	}

	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1228:	ae07      	add	r6, sp, #28
    122a:	0022      	movs	r2, r4
    122c:	9905      	ldr	r1, [sp, #20]
    122e:	205a      	movs	r0, #90	; 0x5a
    1230:	ab02      	add	r3, sp, #8
    1232:	469c      	mov	ip, r3
    1234:	4460      	add	r0, ip
    1236:	4b78      	ldr	r3, [pc, #480]	; (1418 <m2m_wifi_connect_sc+0x234>)
    1238:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen] = 0;
    123a:	1934      	adds	r4, r6, r4
    123c:	3446      	adds	r4, #70	; 0x46
    123e:	2300      	movs	r3, #0
    1240:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch = NM_BSP_B_L_16(u16Ch);
    1242:	3344      	adds	r3, #68	; 0x44
    1244:	464a      	mov	r2, r9
    1246:	52f2      	strh	r2, [r6, r3]
	
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred = u8NoSaveCred ? 1:0;
    1248:	4643      	mov	r3, r8
    124a:	1e5a      	subs	r2, r3, #1
    124c:	4193      	sbcs	r3, r2
    124e:	2267      	movs	r2, #103	; 0x67
    1250:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType	= u8SecType;
    1252:	2341      	movs	r3, #65	; 0x41
    1254:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1256:	2d03      	cmp	r5, #3
    1258:	d100      	bne.n	125c <m2m_wifi_connect_sc+0x78>
    125a:	e071      	b.n	1340 <m2m_wifi_connect_sc+0x15c>
			goto ERR1;
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
	}
	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    125c:	2d02      	cmp	r5, #2
    125e:	d100      	bne.n	1262 <m2m_wifi_connect_sc+0x7e>
    1260:	e0aa      	b.n	13b8 <m2m_wifi_connect_sc+0x1d4>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1262:	2d04      	cmp	r5, #4
    1264:	d100      	bne.n	1268 <m2m_wifi_connect_sc+0x84>
    1266:	e0c2      	b.n	13ee <m2m_wifi_connect_sc+0x20a>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN);
    1268:	2d01      	cmp	r5, #1
    126a:	d000      	beq.n	126e <m2m_wifi_connect_sc+0x8a>
    126c:	e0c5      	b.n	13fa <m2m_wifi_connect_sc+0x216>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    126e:	2300      	movs	r3, #0
    1270:	9302      	str	r3, [sp, #8]
    1272:	9301      	str	r3, [sp, #4]
    1274:	9300      	str	r3, [sp, #0]
    1276:	336c      	adds	r3, #108	; 0x6c
    1278:	aa07      	add	r2, sp, #28
    127a:	2128      	movs	r1, #40	; 0x28
    127c:	2001      	movs	r0, #1
    127e:	4c67      	ldr	r4, [pc, #412]	; (141c <m2m_wifi_connect_sc+0x238>)
    1280:	47a0      	blx	r4

ERR1:
	return ret;
}
    1282:	b023      	add	sp, #140	; 0x8c
    1284:	bc0c      	pop	{r2, r3}
    1286:	4690      	mov	r8, r2
    1288:	4699      	mov	r9, r3
    128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    128c:	4a64      	ldr	r2, [pc, #400]	; (1420 <m2m_wifi_connect_sc+0x23c>)
    128e:	4965      	ldr	r1, [pc, #404]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1290:	4865      	ldr	r0, [pc, #404]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1292:	4b66      	ldr	r3, [pc, #408]	; (142c <m2m_wifi_connect_sc+0x248>)
    1294:	4798      	blx	r3
    1296:	4866      	ldr	r0, [pc, #408]	; (1430 <m2m_wifi_connect_sc+0x24c>)
    1298:	4b66      	ldr	r3, [pc, #408]	; (1434 <m2m_wifi_connect_sc+0x250>)
    129a:	4798      	blx	r3
    129c:	200d      	movs	r0, #13
    129e:	4b66      	ldr	r3, [pc, #408]	; (1438 <m2m_wifi_connect_sc+0x254>)
    12a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    12a2:	200c      	movs	r0, #12
    12a4:	4240      	negs	r0, r0
			goto ERR1;
    12a6:	e7ec      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    12a8:	0038      	movs	r0, r7
    12aa:	4b64      	ldr	r3, [pc, #400]	; (143c <m2m_wifi_connect_sc+0x258>)
    12ac:	4798      	blx	r3
    12ae:	2840      	cmp	r0, #64	; 0x40
    12b0:	d1ad      	bne.n	120e <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    12b2:	783b      	ldrb	r3, [r7, #0]
    12b4:	001a      	movs	r2, r3
    12b6:	3a30      	subs	r2, #48	; 0x30
    12b8:	2a36      	cmp	r2, #54	; 0x36
    12ba:	d817      	bhi.n	12ec <m2m_wifi_connect_sc+0x108>
    12bc:	3a0a      	subs	r2, #10
    12be:	2a06      	cmp	r2, #6
    12c0:	d914      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12c2:	3b47      	subs	r3, #71	; 0x47
    12c4:	2b19      	cmp	r3, #25
    12c6:	d911      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12c8:	1c7a      	adds	r2, r7, #1
    12ca:	0038      	movs	r0, r7
    12cc:	3040      	adds	r0, #64	; 0x40
    12ce:	7813      	ldrb	r3, [r2, #0]
    12d0:	0019      	movs	r1, r3
    12d2:	3930      	subs	r1, #48	; 0x30
    12d4:	2936      	cmp	r1, #54	; 0x36
    12d6:	d809      	bhi.n	12ec <m2m_wifi_connect_sc+0x108>
    12d8:	390a      	subs	r1, #10
    12da:	2906      	cmp	r1, #6
    12dc:	d906      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12de:	3b47      	subs	r3, #71	; 0x47
    12e0:	2b19      	cmp	r3, #25
    12e2:	d903      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12e4:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    12e6:	4282      	cmp	r2, r0
    12e8:	d1f1      	bne.n	12ce <m2m_wifi_connect_sc+0xea>
    12ea:	e790      	b.n	120e <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    12ec:	4a54      	ldr	r2, [pc, #336]	; (1440 <m2m_wifi_connect_sc+0x25c>)
    12ee:	494d      	ldr	r1, [pc, #308]	; (1424 <m2m_wifi_connect_sc+0x240>)
    12f0:	484d      	ldr	r0, [pc, #308]	; (1428 <m2m_wifi_connect_sc+0x244>)
    12f2:	4b4e      	ldr	r3, [pc, #312]	; (142c <m2m_wifi_connect_sc+0x248>)
    12f4:	4798      	blx	r3
    12f6:	4853      	ldr	r0, [pc, #332]	; (1444 <m2m_wifi_connect_sc+0x260>)
    12f8:	4b4e      	ldr	r3, [pc, #312]	; (1434 <m2m_wifi_connect_sc+0x250>)
    12fa:	4798      	blx	r3
    12fc:	200d      	movs	r0, #13
    12fe:	4b4e      	ldr	r3, [pc, #312]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1300:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1302:	200c      	movs	r0, #12
    1304:	4240      	negs	r0, r0
					goto ERR1;
    1306:	e7bc      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1308:	4a4f      	ldr	r2, [pc, #316]	; (1448 <m2m_wifi_connect_sc+0x264>)
    130a:	4946      	ldr	r1, [pc, #280]	; (1424 <m2m_wifi_connect_sc+0x240>)
    130c:	4846      	ldr	r0, [pc, #280]	; (1428 <m2m_wifi_connect_sc+0x244>)
    130e:	4b47      	ldr	r3, [pc, #284]	; (142c <m2m_wifi_connect_sc+0x248>)
    1310:	4798      	blx	r3
    1312:	484e      	ldr	r0, [pc, #312]	; (144c <m2m_wifi_connect_sc+0x268>)
    1314:	4b47      	ldr	r3, [pc, #284]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1316:	4798      	blx	r3
    1318:	200d      	movs	r0, #13
    131a:	4b47      	ldr	r3, [pc, #284]	; (1438 <m2m_wifi_connect_sc+0x254>)
    131c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    131e:	200c      	movs	r0, #12
    1320:	4240      	negs	r0, r0
		goto ERR1;
    1322:	e7ae      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    1324:	4a4a      	ldr	r2, [pc, #296]	; (1450 <m2m_wifi_connect_sc+0x26c>)
    1326:	493f      	ldr	r1, [pc, #252]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1328:	483f      	ldr	r0, [pc, #252]	; (1428 <m2m_wifi_connect_sc+0x244>)
    132a:	4b40      	ldr	r3, [pc, #256]	; (142c <m2m_wifi_connect_sc+0x248>)
    132c:	4798      	blx	r3
    132e:	4849      	ldr	r0, [pc, #292]	; (1454 <m2m_wifi_connect_sc+0x270>)
    1330:	4b40      	ldr	r3, [pc, #256]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1332:	4798      	blx	r3
    1334:	200d      	movs	r0, #13
    1336:	4b40      	ldr	r3, [pc, #256]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1338:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    133a:	200c      	movs	r0, #12
    133c:	4240      	negs	r0, r0
			goto ERR1;
    133e:	e7a0      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1340:	783b      	ldrb	r3, [r7, #0]
    1342:	3b01      	subs	r3, #1
    1344:	b2db      	uxtb	r3, r3
    1346:	aa07      	add	r2, sp, #28
    1348:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    134a:	2b03      	cmp	r3, #3
    134c:	d817      	bhi.n	137e <m2m_wifi_connect_sc+0x19a>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    134e:	787a      	ldrb	r2, [r7, #1]
    1350:	1e51      	subs	r1, r2, #1
    1352:	ab07      	add	r3, sp, #28
    1354:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1356:	2310      	movs	r3, #16
    1358:	0011      	movs	r1, r2
    135a:	4399      	bics	r1, r3
    135c:	290b      	cmp	r1, #11
    135e:	d01d      	beq.n	139c <m2m_wifi_connect_sc+0x1b8>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1360:	4a3d      	ldr	r2, [pc, #244]	; (1458 <m2m_wifi_connect_sc+0x274>)
    1362:	4930      	ldr	r1, [pc, #192]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1364:	4830      	ldr	r0, [pc, #192]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1366:	4c31      	ldr	r4, [pc, #196]	; (142c <m2m_wifi_connect_sc+0x248>)
    1368:	47a0      	blx	r4
    136a:	ab07      	add	r3, sp, #28
    136c:	7859      	ldrb	r1, [r3, #1]
    136e:	483b      	ldr	r0, [pc, #236]	; (145c <m2m_wifi_connect_sc+0x278>)
    1370:	47a0      	blx	r4
    1372:	200d      	movs	r0, #13
    1374:	4b30      	ldr	r3, [pc, #192]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1376:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1378:	200c      	movs	r0, #12
    137a:	4240      	negs	r0, r0
			goto ERR1;
    137c:	e781      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    137e:	4a38      	ldr	r2, [pc, #224]	; (1460 <m2m_wifi_connect_sc+0x27c>)
    1380:	4928      	ldr	r1, [pc, #160]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1382:	4829      	ldr	r0, [pc, #164]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1384:	4c29      	ldr	r4, [pc, #164]	; (142c <m2m_wifi_connect_sc+0x248>)
    1386:	47a0      	blx	r4
    1388:	ab07      	add	r3, sp, #28
    138a:	7819      	ldrb	r1, [r3, #0]
    138c:	4835      	ldr	r0, [pc, #212]	; (1464 <m2m_wifi_connect_sc+0x280>)
    138e:	47a0      	blx	r4
    1390:	200d      	movs	r0, #13
    1392:	4b29      	ldr	r3, [pc, #164]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1394:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1396:	200c      	movs	r0, #12
    1398:	4240      	negs	r0, r0
			goto ERR1;
    139a:	e772      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    139c:	1cb9      	adds	r1, r7, #2
    139e:	2016      	movs	r0, #22
    13a0:	ab02      	add	r3, sp, #8
    13a2:	469c      	mov	ip, r3
    13a4:	4460      	add	r0, ip
    13a6:	4b1c      	ldr	r3, [pc, #112]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13a8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    13aa:	787b      	ldrb	r3, [r7, #1]
    13ac:	aa07      	add	r2, sp, #28
    13ae:	4694      	mov	ip, r2
    13b0:	4463      	add	r3, ip
    13b2:	2200      	movs	r2, #0
    13b4:	709a      	strb	r2, [r3, #2]
    13b6:	e75a      	b.n	126e <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    13b8:	0038      	movs	r0, r7
    13ba:	4b20      	ldr	r3, [pc, #128]	; (143c <m2m_wifi_connect_sc+0x258>)
    13bc:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    13be:	1e43      	subs	r3, r0, #1
    13c0:	b29b      	uxth	r3, r3
    13c2:	2b3f      	cmp	r3, #63	; 0x3f
    13c4:	d805      	bhi.n	13d2 <m2m_wifi_connect_sc+0x1ee>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    13c6:	1c42      	adds	r2, r0, #1
    13c8:	0039      	movs	r1, r7
    13ca:	a807      	add	r0, sp, #28
    13cc:	4b12      	ldr	r3, [pc, #72]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13ce:	4798      	blx	r3
    13d0:	e74d      	b.n	126e <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    13d2:	4a25      	ldr	r2, [pc, #148]	; (1468 <m2m_wifi_connect_sc+0x284>)
    13d4:	4913      	ldr	r1, [pc, #76]	; (1424 <m2m_wifi_connect_sc+0x240>)
    13d6:	4814      	ldr	r0, [pc, #80]	; (1428 <m2m_wifi_connect_sc+0x244>)
    13d8:	4b14      	ldr	r3, [pc, #80]	; (142c <m2m_wifi_connect_sc+0x248>)
    13da:	4798      	blx	r3
    13dc:	4823      	ldr	r0, [pc, #140]	; (146c <m2m_wifi_connect_sc+0x288>)
    13de:	4b15      	ldr	r3, [pc, #84]	; (1434 <m2m_wifi_connect_sc+0x250>)
    13e0:	4798      	blx	r3
    13e2:	200d      	movs	r0, #13
    13e4:	4b14      	ldr	r3, [pc, #80]	; (1438 <m2m_wifi_connect_sc+0x254>)
    13e6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13e8:	200c      	movs	r0, #12
    13ea:	4240      	negs	r0, r0
			goto ERR1;
    13ec:	e749      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    13ee:	223e      	movs	r2, #62	; 0x3e
    13f0:	0039      	movs	r1, r7
    13f2:	a807      	add	r0, sp, #28
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13f6:	4798      	blx	r3
    13f8:	e739      	b.n	126e <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    13fa:	4a1d      	ldr	r2, [pc, #116]	; (1470 <m2m_wifi_connect_sc+0x28c>)
    13fc:	4909      	ldr	r1, [pc, #36]	; (1424 <m2m_wifi_connect_sc+0x240>)
    13fe:	480a      	ldr	r0, [pc, #40]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1400:	4b0a      	ldr	r3, [pc, #40]	; (142c <m2m_wifi_connect_sc+0x248>)
    1402:	4798      	blx	r3
    1404:	481b      	ldr	r0, [pc, #108]	; (1474 <m2m_wifi_connect_sc+0x290>)
    1406:	4b0b      	ldr	r3, [pc, #44]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1408:	4798      	blx	r3
    140a:	200d      	movs	r0, #13
    140c:	4b0a      	ldr	r3, [pc, #40]	; (1438 <m2m_wifi_connect_sc+0x254>)
    140e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1410:	200c      	movs	r0, #12
    1412:	4240      	negs	r0, r0
		goto ERR1;
    1414:	e735      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	0000051d 	.word	0x0000051d
    141c:	00000645 	.word	0x00000645
    1420:	0000021f 	.word	0x0000021f
    1424:	0000944c 	.word	0x0000944c
    1428:	000090c8 	.word	0x000090c8
    142c:	00007e45 	.word	0x00007e45
    1430:	00009494 	.word	0x00009494
    1434:	00007f61 	.word	0x00007f61
    1438:	00007e79 	.word	0x00007e79
    143c:	00000541 	.word	0x00000541
    1440:	0000022b 	.word	0x0000022b
    1444:	000094a8 	.word	0x000094a8
    1448:	00000236 	.word	0x00000236
    144c:	000094b4 	.word	0x000094b4
    1450:	0000023f 	.word	0x0000023f
    1454:	000094c8 	.word	0x000094c8
    1458:	0000025d 	.word	0x0000025d
    145c:	000094f0 	.word	0x000094f0
    1460:	00000256 	.word	0x00000256
    1464:	000094d4 	.word	0x000094d4
    1468:	00000269 	.word	0x00000269
    146c:	0000950c 	.word	0x0000950c
    1470:	00000276 	.word	0x00000276
    1474:	00009528 	.word	0x00009528

00001478 <m2m_wifi_connect>:
{
    1478:	b530      	push	{r4, r5, lr}
    147a:	b083      	sub	sp, #12
    147c:	ac06      	add	r4, sp, #24
    147e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1480:	2500      	movs	r5, #0
    1482:	9501      	str	r5, [sp, #4]
    1484:	9400      	str	r4, [sp, #0]
    1486:	4c02      	ldr	r4, [pc, #8]	; (1490 <m2m_wifi_connect+0x18>)
    1488:	47a0      	blx	r4
}
    148a:	b003      	add	sp, #12
    148c:	bd30      	pop	{r4, r5, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	000011e5 	.word	0x000011e5

00001494 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1494:	2000      	movs	r0, #0
    1496:	4770      	bx	lr

00001498 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    1498:	b5f0      	push	{r4, r5, r6, r7, lr}
    149a:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    149c:	2580      	movs	r5, #128	; 0x80
    149e:	006d      	lsls	r5, r5, #1
    14a0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    14a2:	24a5      	movs	r4, #165	; 0xa5
    14a4:	0164      	lsls	r4, r4, #5
    14a6:	4f08      	ldr	r7, [pc, #32]	; (14c8 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    14a8:	4e08      	ldr	r6, [pc, #32]	; (14cc <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    14aa:	0029      	movs	r1, r5
    14ac:	0020      	movs	r0, r4
    14ae:	47b8      	blx	r7
			uint32 reg = 0;
    14b0:	2300      	movs	r3, #0
    14b2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    14b4:	a901      	add	r1, sp, #4
    14b6:	0020      	movs	r0, r4
    14b8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    14ba:	2800      	cmp	r0, #0
    14bc:	d1f5      	bne.n	14aa <chip_apply_conf+0x12>
				if(reg == val32)
    14be:	9b01      	ldr	r3, [sp, #4]
    14c0:	429d      	cmp	r5, r3
    14c2:	d1f2      	bne.n	14aa <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    14c4:	b003      	add	sp, #12
    14c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c8:	00001989 	.word	0x00001989
    14cc:	0000197d 	.word	0x0000197d

000014d0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    14d0:	b500      	push	{lr}
    14d2:	b083      	sub	sp, #12
	uint32 reg = 0;
    14d4:	2300      	movs	r3, #0
    14d6:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    14d8:	a901      	add	r1, sp, #4
    14da:	4811      	ldr	r0, [pc, #68]	; (1520 <enable_interrupts+0x50>)
    14dc:	4b11      	ldr	r3, [pc, #68]	; (1524 <enable_interrupts+0x54>)
    14de:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    14e0:	2800      	cmp	r0, #0
    14e2:	d001      	beq.n	14e8 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    14e4:	b003      	add	sp, #12
    14e6:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    14e8:	2180      	movs	r1, #128	; 0x80
    14ea:	0049      	lsls	r1, r1, #1
    14ec:	9b01      	ldr	r3, [sp, #4]
    14ee:	4319      	orrs	r1, r3
    14f0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    14f2:	480b      	ldr	r0, [pc, #44]	; (1520 <enable_interrupts+0x50>)
    14f4:	4b0c      	ldr	r3, [pc, #48]	; (1528 <enable_interrupts+0x58>)
    14f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    14f8:	2800      	cmp	r0, #0
    14fa:	d1f3      	bne.n	14e4 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    14fc:	a901      	add	r1, sp, #4
    14fe:	20d0      	movs	r0, #208	; 0xd0
    1500:	0140      	lsls	r0, r0, #5
    1502:	4b08      	ldr	r3, [pc, #32]	; (1524 <enable_interrupts+0x54>)
    1504:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1506:	2800      	cmp	r0, #0
    1508:	d1ec      	bne.n	14e4 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    150a:	2180      	movs	r1, #128	; 0x80
    150c:	0249      	lsls	r1, r1, #9
    150e:	9b01      	ldr	r3, [sp, #4]
    1510:	4319      	orrs	r1, r3
    1512:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    1514:	20d0      	movs	r0, #208	; 0xd0
    1516:	0140      	lsls	r0, r0, #5
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <enable_interrupts+0x58>)
    151a:	4798      	blx	r3
    151c:	e7e2      	b.n	14e4 <enable_interrupts+0x14>
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	00001408 	.word	0x00001408
    1524:	0000197d 	.word	0x0000197d
    1528:	00001989 	.word	0x00001989

0000152c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    152c:	b510      	push	{r4, lr}
    152e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    1530:	4b28      	ldr	r3, [pc, #160]	; (15d4 <nmi_get_chipid+0xa8>)
    1532:	681c      	ldr	r4, [r3, #0]
    1534:	2c00      	cmp	r4, #0
    1536:	d004      	beq.n	1542 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    1538:	4b26      	ldr	r3, [pc, #152]	; (15d4 <nmi_get_chipid+0xa8>)
    153a:	681c      	ldr	r4, [r3, #0]
}
    153c:	0020      	movs	r0, r4
    153e:	b002      	add	sp, #8
    1540:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    1542:	0019      	movs	r1, r3
    1544:	2080      	movs	r0, #128	; 0x80
    1546:	0140      	lsls	r0, r0, #5
    1548:	4b23      	ldr	r3, [pc, #140]	; (15d8 <nmi_get_chipid+0xac>)
    154a:	4798      	blx	r3
    154c:	2800      	cmp	r0, #0
    154e:	d003      	beq.n	1558 <nmi_get_chipid+0x2c>
			chipid = 0;
    1550:	2200      	movs	r2, #0
    1552:	4b20      	ldr	r3, [pc, #128]	; (15d4 <nmi_get_chipid+0xa8>)
    1554:	601a      	str	r2, [r3, #0]
			return 0;
    1556:	e7f1      	b.n	153c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1558:	a901      	add	r1, sp, #4
    155a:	4820      	ldr	r0, [pc, #128]	; (15dc <nmi_get_chipid+0xb0>)
    155c:	4b1e      	ldr	r3, [pc, #120]	; (15d8 <nmi_get_chipid+0xac>)
    155e:	4798      	blx	r3
    1560:	2800      	cmp	r0, #0
    1562:	d003      	beq.n	156c <nmi_get_chipid+0x40>
			chipid = 0;
    1564:	2200      	movs	r2, #0
    1566:	4b1b      	ldr	r3, [pc, #108]	; (15d4 <nmi_get_chipid+0xa8>)
    1568:	601a      	str	r2, [r3, #0]
			return 0;
    156a:	e7e7      	b.n	153c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    156c:	4b19      	ldr	r3, [pc, #100]	; (15d4 <nmi_get_chipid+0xa8>)
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	4a1b      	ldr	r2, [pc, #108]	; (15e0 <nmi_get_chipid+0xb4>)
    1572:	4293      	cmp	r3, r2
    1574:	d00e      	beq.n	1594 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    1576:	4a1b      	ldr	r2, [pc, #108]	; (15e4 <nmi_get_chipid+0xb8>)
    1578:	4293      	cmp	r3, r2
    157a:	d012      	beq.n	15a2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    157c:	4a1a      	ldr	r2, [pc, #104]	; (15e8 <nmi_get_chipid+0xbc>)
    157e:	4293      	cmp	r3, r2
    1580:	d01c      	beq.n	15bc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    1582:	4914      	ldr	r1, [pc, #80]	; (15d4 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    1584:	4a19      	ldr	r2, [pc, #100]	; (15ec <nmi_get_chipid+0xc0>)
    1586:	680b      	ldr	r3, [r1, #0]
    1588:	401a      	ands	r2, r3
		chipid |= 0x050000;
    158a:	23a0      	movs	r3, #160	; 0xa0
    158c:	02db      	lsls	r3, r3, #11
    158e:	4313      	orrs	r3, r2
    1590:	600b      	str	r3, [r1, #0]
    1592:	e7d1      	b.n	1538 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    1594:	9b01      	ldr	r3, [sp, #4]
    1596:	2b01      	cmp	r3, #1
    1598:	d0f3      	beq.n	1582 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    159a:	4a15      	ldr	r2, [pc, #84]	; (15f0 <nmi_get_chipid+0xc4>)
    159c:	4b0d      	ldr	r3, [pc, #52]	; (15d4 <nmi_get_chipid+0xa8>)
    159e:	601a      	str	r2, [r3, #0]
    15a0:	e7ef      	b.n	1582 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    15a2:	9b01      	ldr	r3, [sp, #4]
    15a4:	2b03      	cmp	r3, #3
    15a6:	d0ec      	beq.n	1582 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    15a8:	2b04      	cmp	r3, #4
    15aa:	d003      	beq.n	15b4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    15ac:	4a11      	ldr	r2, [pc, #68]	; (15f4 <nmi_get_chipid+0xc8>)
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <nmi_get_chipid+0xa8>)
    15b0:	601a      	str	r2, [r3, #0]
    15b2:	e7e6      	b.n	1582 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    15b4:	4a10      	ldr	r2, [pc, #64]	; (15f8 <nmi_get_chipid+0xcc>)
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <nmi_get_chipid+0xa8>)
    15b8:	601a      	str	r2, [r3, #0]
    15ba:	e7e2      	b.n	1582 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    15bc:	4905      	ldr	r1, [pc, #20]	; (15d4 <nmi_get_chipid+0xa8>)
    15be:	20ec      	movs	r0, #236	; 0xec
    15c0:	0380      	lsls	r0, r0, #14
    15c2:	4b05      	ldr	r3, [pc, #20]	; (15d8 <nmi_get_chipid+0xac>)
    15c4:	4798      	blx	r3
    15c6:	2800      	cmp	r0, #0
    15c8:	d0db      	beq.n	1582 <nmi_get_chipid+0x56>
			chipid = 0;
    15ca:	2200      	movs	r2, #0
    15cc:	4b01      	ldr	r3, [pc, #4]	; (15d4 <nmi_get_chipid+0xa8>)
    15ce:	601a      	str	r2, [r3, #0]
			return 0;
    15d0:	e7b4      	b.n	153c <nmi_get_chipid+0x10>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	2000009c 	.word	0x2000009c
    15d8:	0000197d 	.word	0x0000197d
    15dc:	000013f4 	.word	0x000013f4
    15e0:	001002a0 	.word	0x001002a0
    15e4:	001002b0 	.word	0x001002b0
    15e8:	001000f0 	.word	0x001000f0
    15ec:	fff0ffff 	.word	0xfff0ffff
    15f0:	001002a1 	.word	0x001002a1
    15f4:	001002b2 	.word	0x001002b2
    15f8:	001002b1 	.word	0x001002b1

000015fc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    15fc:	b530      	push	{r4, r5, lr}
    15fe:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1600:	4c16      	ldr	r4, [pc, #88]	; (165c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    1602:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1604:	a901      	add	r1, sp, #4
    1606:	2010      	movs	r0, #16
    1608:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    160a:	2800      	cmp	r0, #0
    160c:	d11c      	bne.n	1648 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    160e:	9b01      	ldr	r3, [sp, #4]
    1610:	422b      	tst	r3, r5
    1612:	d1f7      	bne.n	1604 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    1614:	a901      	add	r1, sp, #4
    1616:	3001      	adds	r0, #1
    1618:	4b10      	ldr	r3, [pc, #64]	; (165c <chip_sleep+0x60>)
    161a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    161c:	2800      	cmp	r0, #0
    161e:	d113      	bne.n	1648 <chip_sleep+0x4c>
	if(reg & NBIT1)
    1620:	9901      	ldr	r1, [sp, #4]
    1622:	078b      	lsls	r3, r1, #30
    1624:	d507      	bpl.n	1636 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    1626:	2302      	movs	r3, #2
    1628:	4399      	bics	r1, r3
    162a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    162c:	3001      	adds	r0, #1
    162e:	4b0c      	ldr	r3, [pc, #48]	; (1660 <chip_sleep+0x64>)
    1630:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    1632:	2800      	cmp	r0, #0
    1634:	d108      	bne.n	1648 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    1636:	a901      	add	r1, sp, #4
    1638:	200b      	movs	r0, #11
    163a:	4b08      	ldr	r3, [pc, #32]	; (165c <chip_sleep+0x60>)
    163c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    163e:	2800      	cmp	r0, #0
    1640:	d102      	bne.n	1648 <chip_sleep+0x4c>
	if(reg & NBIT0)
    1642:	9901      	ldr	r1, [sp, #4]
    1644:	07cb      	lsls	r3, r1, #31
    1646:	d401      	bmi.n	164c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    1648:	b003      	add	sp, #12
    164a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    164c:	2301      	movs	r3, #1
    164e:	4399      	bics	r1, r3
    1650:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    1652:	300b      	adds	r0, #11
    1654:	4b02      	ldr	r3, [pc, #8]	; (1660 <chip_sleep+0x64>)
    1656:	4798      	blx	r3
    1658:	e7f6      	b.n	1648 <chip_sleep+0x4c>
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	0000197d 	.word	0x0000197d
    1660:	00001989 	.word	0x00001989

00001664 <chip_wake>:
sint8 chip_wake(void)
{
    1664:	b5f0      	push	{r4, r5, r6, r7, lr}
    1666:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    1668:	2300      	movs	r3, #0
    166a:	9301      	str	r3, [sp, #4]
    166c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    166e:	a901      	add	r1, sp, #4
    1670:	200b      	movs	r0, #11
    1672:	4b28      	ldr	r3, [pc, #160]	; (1714 <chip_wake+0xb0>)
    1674:	4798      	blx	r3
    1676:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1678:	d130      	bne.n	16dc <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    167a:	9901      	ldr	r1, [sp, #4]
    167c:	07cb      	lsls	r3, r1, #31
    167e:	d406      	bmi.n	168e <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    1680:	2301      	movs	r3, #1
    1682:	4319      	orrs	r1, r3
    1684:	200b      	movs	r0, #11
    1686:	4b24      	ldr	r3, [pc, #144]	; (1718 <chip_wake+0xb4>)
    1688:	4798      	blx	r3
    168a:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    168c:	d126      	bne.n	16dc <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    168e:	a901      	add	r1, sp, #4
    1690:	2001      	movs	r0, #1
    1692:	4b20      	ldr	r3, [pc, #128]	; (1714 <chip_wake+0xb0>)
    1694:	4798      	blx	r3
    1696:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1698:	d120      	bne.n	16dc <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    169a:	9901      	ldr	r1, [sp, #4]
    169c:	078b      	lsls	r3, r1, #30
    169e:	d520      	bpl.n	16e2 <chip_wake+0x7e>
{
    16a0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    16a2:	4f1c      	ldr	r7, [pc, #112]	; (1714 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    16a4:	4e1d      	ldr	r6, [pc, #116]	; (171c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    16a6:	4669      	mov	r1, sp
    16a8:	200f      	movs	r0, #15
    16aa:	47b8      	blx	r7
    16ac:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    16ae:	d120      	bne.n	16f2 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    16b0:	9b00      	ldr	r3, [sp, #0]
    16b2:	075b      	lsls	r3, r3, #29
    16b4:	d42b      	bmi.n	170e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    16b6:	2002      	movs	r0, #2
    16b8:	47b0      	blx	r6
    16ba:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    16bc:	2d00      	cmp	r5, #0
    16be:	d1f2      	bne.n	16a6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    16c0:	22af      	movs	r2, #175	; 0xaf
    16c2:	0052      	lsls	r2, r2, #1
    16c4:	4916      	ldr	r1, [pc, #88]	; (1720 <chip_wake+0xbc>)
    16c6:	4817      	ldr	r0, [pc, #92]	; (1724 <chip_wake+0xc0>)
    16c8:	4b17      	ldr	r3, [pc, #92]	; (1728 <chip_wake+0xc4>)
    16ca:	4798      	blx	r3
    16cc:	4817      	ldr	r0, [pc, #92]	; (172c <chip_wake+0xc8>)
    16ce:	4b18      	ldr	r3, [pc, #96]	; (1730 <chip_wake+0xcc>)
    16d0:	4798      	blx	r3
    16d2:	200d      	movs	r0, #13
    16d4:	4b17      	ldr	r3, [pc, #92]	; (1734 <chip_wake+0xd0>)
    16d6:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    16d8:	2404      	movs	r4, #4
    16da:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    16dc:	0020      	movs	r0, r4
    16de:	b003      	add	sp, #12
    16e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    16e2:	2302      	movs	r3, #2
    16e4:	4319      	orrs	r1, r3
    16e6:	2001      	movs	r0, #1
    16e8:	4b0b      	ldr	r3, [pc, #44]	; (1718 <chip_wake+0xb4>)
    16ea:	4798      	blx	r3
    16ec:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    16ee:	d0d7      	beq.n	16a0 <chip_wake+0x3c>
    16f0:	e7f4      	b.n	16dc <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    16f2:	22aa      	movs	r2, #170	; 0xaa
    16f4:	0052      	lsls	r2, r2, #1
    16f6:	490a      	ldr	r1, [pc, #40]	; (1720 <chip_wake+0xbc>)
    16f8:	480a      	ldr	r0, [pc, #40]	; (1724 <chip_wake+0xc0>)
    16fa:	4d0b      	ldr	r5, [pc, #44]	; (1728 <chip_wake+0xc4>)
    16fc:	47a8      	blx	r5
    16fe:	9a00      	ldr	r2, [sp, #0]
    1700:	0021      	movs	r1, r4
    1702:	480d      	ldr	r0, [pc, #52]	; (1738 <chip_wake+0xd4>)
    1704:	47a8      	blx	r5
    1706:	200d      	movs	r0, #13
    1708:	4b0a      	ldr	r3, [pc, #40]	; (1734 <chip_wake+0xd0>)
    170a:	4798      	blx	r3
			goto _WAKE_EXIT;
    170c:	e7e6      	b.n	16dc <chip_wake+0x78>
	nm_bus_reset();
    170e:	4b0b      	ldr	r3, [pc, #44]	; (173c <chip_wake+0xd8>)
    1710:	4798      	blx	r3
    1712:	e7e3      	b.n	16dc <chip_wake+0x78>
    1714:	0000197d 	.word	0x0000197d
    1718:	00001989 	.word	0x00001989
    171c:	00000129 	.word	0x00000129
    1720:	00009608 	.word	0x00009608
    1724:	000090c8 	.word	0x000090c8
    1728:	00007e45 	.word	0x00007e45
    172c:	00009650 	.word	0x00009650
    1730:	00007f61 	.word	0x00007f61
    1734:	00007e79 	.word	0x00007e79
    1738:	00009638 	.word	0x00009638
    173c:	00001965 	.word	0x00001965

00001740 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1742:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1744:	4d2d      	ldr	r5, [pc, #180]	; (17fc <wait_for_bootrom+0xbc>)
    1746:	4c2e      	ldr	r4, [pc, #184]	; (1800 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1748:	4e2e      	ldr	r6, [pc, #184]	; (1804 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    174a:	0028      	movs	r0, r5
    174c:	47a0      	blx	r4
		if (reg & 0x80000000) {
    174e:	2800      	cmp	r0, #0
    1750:	db02      	blt.n	1758 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1752:	2001      	movs	r0, #1
    1754:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1756:	e7f8      	b.n	174a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1758:	482b      	ldr	r0, [pc, #172]	; (1808 <wait_for_bootrom+0xc8>)
    175a:	4b29      	ldr	r3, [pc, #164]	; (1800 <wait_for_bootrom+0xc0>)
    175c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    175e:	07c3      	lsls	r3, r0, #31
    1760:	d409      	bmi.n	1776 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1762:	4e28      	ldr	r6, [pc, #160]	; (1804 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    1764:	4c29      	ldr	r4, [pc, #164]	; (180c <wait_for_bootrom+0xcc>)
    1766:	4d26      	ldr	r5, [pc, #152]	; (1800 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    1768:	2001      	movs	r0, #1
    176a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    176c:	0020      	movs	r0, r4
    176e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    1770:	4b27      	ldr	r3, [pc, #156]	; (1810 <wait_for_bootrom+0xd0>)
    1772:	4298      	cmp	r0, r3
    1774:	d1f8      	bne.n	1768 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    1776:	2f02      	cmp	r7, #2
    1778:	d021      	beq.n	17be <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    177a:	2f03      	cmp	r7, #3
    177c:	d029      	beq.n	17d2 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    177e:	2f04      	cmp	r7, #4
    1780:	d030      	beq.n	17e4 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    1782:	4924      	ldr	r1, [pc, #144]	; (1814 <wait_for_bootrom+0xd4>)
    1784:	4824      	ldr	r0, [pc, #144]	; (1818 <wait_for_bootrom+0xd8>)
    1786:	4b25      	ldr	r3, [pc, #148]	; (181c <wait_for_bootrom+0xdc>)
    1788:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    178a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    178c:	4b24      	ldr	r3, [pc, #144]	; (1820 <wait_for_bootrom+0xe0>)
    178e:	4798      	blx	r3
    1790:	0500      	lsls	r0, r0, #20
    1792:	0d00      	lsrs	r0, r0, #20
    1794:	4b23      	ldr	r3, [pc, #140]	; (1824 <wait_for_bootrom+0xe4>)
    1796:	4298      	cmp	r0, r3
    1798:	d82a      	bhi.n	17f0 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    179a:	0020      	movs	r0, r4
    179c:	4b22      	ldr	r3, [pc, #136]	; (1828 <wait_for_bootrom+0xe8>)
    179e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    17a0:	4822      	ldr	r0, [pc, #136]	; (182c <wait_for_bootrom+0xec>)
    17a2:	4c23      	ldr	r4, [pc, #140]	; (1830 <wait_for_bootrom+0xf0>)
    17a4:	47a0      	blx	r4
    17a6:	491b      	ldr	r1, [pc, #108]	; (1814 <wait_for_bootrom+0xd4>)
    17a8:	4822      	ldr	r0, [pc, #136]	; (1834 <wait_for_bootrom+0xf4>)
    17aa:	47a0      	blx	r4
    17ac:	200d      	movs	r0, #13
    17ae:	4b22      	ldr	r3, [pc, #136]	; (1838 <wait_for_bootrom+0xf8>)
    17b0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    17b2:	4922      	ldr	r1, [pc, #136]	; (183c <wait_for_bootrom+0xfc>)
    17b4:	4815      	ldr	r0, [pc, #84]	; (180c <wait_for_bootrom+0xcc>)
    17b6:	4b19      	ldr	r3, [pc, #100]	; (181c <wait_for_bootrom+0xdc>)
    17b8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    17ba:	2000      	movs	r0, #0
    17bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    17be:	4920      	ldr	r1, [pc, #128]	; (1840 <wait_for_bootrom+0x100>)
    17c0:	4820      	ldr	r0, [pc, #128]	; (1844 <wait_for_bootrom+0x104>)
    17c2:	4c16      	ldr	r4, [pc, #88]	; (181c <wait_for_bootrom+0xdc>)
    17c4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    17c6:	2180      	movs	r1, #128	; 0x80
    17c8:	0349      	lsls	r1, r1, #13
    17ca:	4813      	ldr	r0, [pc, #76]	; (1818 <wait_for_bootrom+0xd8>)
    17cc:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    17ce:	2400      	movs	r4, #0
    17d0:	e7dc      	b.n	178c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    17d2:	491b      	ldr	r1, [pc, #108]	; (1840 <wait_for_bootrom+0x100>)
    17d4:	481b      	ldr	r0, [pc, #108]	; (1844 <wait_for_bootrom+0x104>)
    17d6:	4c11      	ldr	r4, [pc, #68]	; (181c <wait_for_bootrom+0xdc>)
    17d8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    17da:	2100      	movs	r1, #0
    17dc:	480e      	ldr	r0, [pc, #56]	; (1818 <wait_for_bootrom+0xd8>)
    17de:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    17e0:	2400      	movs	r4, #0
    17e2:	e7d3      	b.n	178c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    17e4:	490b      	ldr	r1, [pc, #44]	; (1814 <wait_for_bootrom+0xd4>)
    17e6:	480c      	ldr	r0, [pc, #48]	; (1818 <wait_for_bootrom+0xd8>)
    17e8:	4b0c      	ldr	r3, [pc, #48]	; (181c <wait_for_bootrom+0xdc>)
    17ea:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    17ec:	2480      	movs	r4, #128	; 0x80
    17ee:	e7cd      	b.n	178c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    17f0:	2002      	movs	r0, #2
    17f2:	4320      	orrs	r0, r4
    17f4:	4b0c      	ldr	r3, [pc, #48]	; (1828 <wait_for_bootrom+0xe8>)
    17f6:	4798      	blx	r3
    17f8:	e7d2      	b.n	17a0 <wait_for_bootrom+0x60>
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	00001014 	.word	0x00001014
    1800:	00001971 	.word	0x00001971
    1804:	00000129 	.word	0x00000129
    1808:	000207bc 	.word	0x000207bc
    180c:	000c000c 	.word	0x000c000c
    1810:	10add09e 	.word	0x10add09e
    1814:	13521352 	.word	0x13521352
    1818:	0000108c 	.word	0x0000108c
    181c:	00001989 	.word	0x00001989
    1820:	0000152d 	.word	0x0000152d
    1824:	0000039f 	.word	0x0000039f
    1828:	00001499 	.word	0x00001499
    182c:	000093f8 	.word	0x000093f8
    1830:	00007e45 	.word	0x00007e45
    1834:	0000966c 	.word	0x0000966c
    1838:	00007e79 	.word	0x00007e79
    183c:	ef522f61 	.word	0xef522f61
    1840:	3c1cd57d 	.word	0x3c1cd57d
    1844:	000207ac 	.word	0x000207ac

00001848 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    1848:	b570      	push	{r4, r5, r6, lr}
    184a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    184c:	4b15      	ldr	r3, [pc, #84]	; (18a4 <wait_for_firmware_start+0x5c>)
    184e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    1850:	4b15      	ldr	r3, [pc, #84]	; (18a8 <wait_for_firmware_start+0x60>)
    1852:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    1854:	3802      	subs	r0, #2
    1856:	2801      	cmp	r0, #1
    1858:	d911      	bls.n	187e <wait_for_firmware_start+0x36>
{
    185a:	2401      	movs	r4, #1
    185c:	4264      	negs	r4, r4
    185e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1860:	4e12      	ldr	r6, [pc, #72]	; (18ac <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1862:	4d13      	ldr	r5, [pc, #76]	; (18b0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    1864:	9b00      	ldr	r3, [sp, #0]
    1866:	4298      	cmp	r0, r3
    1868:	d00e      	beq.n	1888 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    186a:	2002      	movs	r0, #2
    186c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    186e:	9801      	ldr	r0, [sp, #4]
    1870:	47a8      	blx	r5
    1872:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    1874:	2c00      	cmp	r4, #0
    1876:	d1f5      	bne.n	1864 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1878:	2005      	movs	r0, #5
    187a:	4240      	negs	r0, r0
    187c:	e009      	b.n	1892 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    187e:	4b0d      	ldr	r3, [pc, #52]	; (18b4 <wait_for_firmware_start+0x6c>)
    1880:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    1882:	4b0d      	ldr	r3, [pc, #52]	; (18b8 <wait_for_firmware_start+0x70>)
    1884:	9300      	str	r3, [sp, #0]
    1886:	e7e8      	b.n	185a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1888:	9a00      	ldr	r2, [sp, #0]
    188a:	4b07      	ldr	r3, [pc, #28]	; (18a8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    188c:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    188e:	429a      	cmp	r2, r3
    1890:	d001      	beq.n	1896 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    1892:	b002      	add	sp, #8
    1894:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    1896:	2100      	movs	r1, #0
    1898:	4802      	ldr	r0, [pc, #8]	; (18a4 <wait_for_firmware_start+0x5c>)
    189a:	4b08      	ldr	r3, [pc, #32]	; (18bc <wait_for_firmware_start+0x74>)
    189c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    189e:	2000      	movs	r0, #0
    18a0:	e7f7      	b.n	1892 <wait_for_firmware_start+0x4a>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	0000108c 	.word	0x0000108c
    18a8:	02532636 	.word	0x02532636
    18ac:	00000129 	.word	0x00000129
    18b0:	00001971 	.word	0x00001971
    18b4:	000207ac 	.word	0x000207ac
    18b8:	d75dc1c3 	.word	0xd75dc1c3
    18bc:	00001989 	.word	0x00001989

000018c0 <chip_deinit>:

sint8 chip_deinit(void)
{
    18c0:	b510      	push	{r4, lr}
    18c2:	b082      	sub	sp, #8
	uint32 reg = 0;
    18c4:	2300      	movs	r3, #0
    18c6:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    18c8:	a901      	add	r1, sp, #4
    18ca:	20a0      	movs	r0, #160	; 0xa0
    18cc:	0140      	lsls	r0, r0, #5
    18ce:	4b14      	ldr	r3, [pc, #80]	; (1920 <chip_deinit+0x60>)
    18d0:	4798      	blx	r3
    18d2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    18d4:	d115      	bne.n	1902 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    18d6:	4913      	ldr	r1, [pc, #76]	; (1924 <chip_deinit+0x64>)
    18d8:	9b01      	ldr	r3, [sp, #4]
    18da:	4019      	ands	r1, r3
    18dc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    18de:	20a0      	movs	r0, #160	; 0xa0
    18e0:	0140      	lsls	r0, r0, #5
    18e2:	4b11      	ldr	r3, [pc, #68]	; (1928 <chip_deinit+0x68>)
    18e4:	4798      	blx	r3
    18e6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    18e8:	d016      	beq.n	1918 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    18ea:	4a10      	ldr	r2, [pc, #64]	; (192c <chip_deinit+0x6c>)
    18ec:	4910      	ldr	r1, [pc, #64]	; (1930 <chip_deinit+0x70>)
    18ee:	4811      	ldr	r0, [pc, #68]	; (1934 <chip_deinit+0x74>)
    18f0:	4b11      	ldr	r3, [pc, #68]	; (1938 <chip_deinit+0x78>)
    18f2:	4798      	blx	r3
    18f4:	4811      	ldr	r0, [pc, #68]	; (193c <chip_deinit+0x7c>)
    18f6:	4b12      	ldr	r3, [pc, #72]	; (1940 <chip_deinit+0x80>)
    18f8:	4798      	blx	r3
    18fa:	200d      	movs	r0, #13
    18fc:	4b11      	ldr	r3, [pc, #68]	; (1944 <chip_deinit+0x84>)
    18fe:	4798      	blx	r3
		goto ERR1;
    1900:	e00a      	b.n	1918 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    1902:	4a11      	ldr	r2, [pc, #68]	; (1948 <chip_deinit+0x88>)
    1904:	490a      	ldr	r1, [pc, #40]	; (1930 <chip_deinit+0x70>)
    1906:	480b      	ldr	r0, [pc, #44]	; (1934 <chip_deinit+0x74>)
    1908:	4b0b      	ldr	r3, [pc, #44]	; (1938 <chip_deinit+0x78>)
    190a:	4798      	blx	r3
    190c:	480b      	ldr	r0, [pc, #44]	; (193c <chip_deinit+0x7c>)
    190e:	4b0c      	ldr	r3, [pc, #48]	; (1940 <chip_deinit+0x80>)
    1910:	4798      	blx	r3
    1912:	200d      	movs	r0, #13
    1914:	4b0b      	ldr	r3, [pc, #44]	; (1944 <chip_deinit+0x84>)
    1916:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    1918:	0020      	movs	r0, r4
    191a:	b002      	add	sp, #8
    191c:	bd10      	pop	{r4, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	0000197d 	.word	0x0000197d
    1924:	fffffbff 	.word	0xfffffbff
    1928:	00001989 	.word	0x00001989
    192c:	0000020b 	.word	0x0000020b
    1930:	00009614 	.word	0x00009614
    1934:	000090c8 	.word	0x000090c8
    1938:	00007e45 	.word	0x00007e45
    193c:	00009620 	.word	0x00009620
    1940:	00007f61 	.word	0x00007f61
    1944:	00007e79 	.word	0x00007e79
    1948:	00000205 	.word	0x00000205

0000194c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    194c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    194e:	4b01      	ldr	r3, [pc, #4]	; (1954 <nm_bus_iface_init+0x8>)
    1950:	4798      	blx	r3
	return ret;
}
    1952:	bd10      	pop	{r4, pc}
    1954:	00000261 	.word	0x00000261

00001958 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1958:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    195a:	4b01      	ldr	r3, [pc, #4]	; (1960 <nm_bus_iface_deinit+0x8>)
    195c:	4798      	blx	r3

	return ret;
}
    195e:	bd10      	pop	{r4, pc}
    1960:	000004b1 	.word	0x000004b1

00001964 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    1964:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    1966:	4b01      	ldr	r3, [pc, #4]	; (196c <nm_bus_reset+0x8>)
    1968:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    196a:	bd10      	pop	{r4, pc}
    196c:	00002311 	.word	0x00002311

00001970 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1970:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1972:	4b01      	ldr	r3, [pc, #4]	; (1978 <nm_read_reg+0x8>)
    1974:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1976:	bd10      	pop	{r4, pc}
    1978:	00002349 	.word	0x00002349

0000197c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    197c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    197e:	4b01      	ldr	r3, [pc, #4]	; (1984 <nm_read_reg_with_ret+0x8>)
    1980:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1982:	bd10      	pop	{r4, pc}
    1984:	0000235d 	.word	0x0000235d

00001988 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1988:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    198a:	4b01      	ldr	r3, [pc, #4]	; (1990 <nm_write_reg+0x8>)
    198c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    198e:	bd10      	pop	{r4, pc}
    1990:	00002375 	.word	0x00002375

00001994 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
    1996:	46d6      	mov	lr, sl
    1998:	464f      	mov	r7, r9
    199a:	4646      	mov	r6, r8
    199c:	b5c0      	push	{r6, r7, lr}
    199e:	b082      	sub	sp, #8
    19a0:	4680      	mov	r8, r0
    19a2:	4689      	mov	r9, r1
    19a4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    19a6:	4b13      	ldr	r3, [pc, #76]	; (19f4 <nm_read_block+0x60>)
    19a8:	881f      	ldrh	r7, [r3, #0]
    19aa:	3f08      	subs	r7, #8
    19ac:	b2bb      	uxth	r3, r7
    19ae:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    19b0:	001e      	movs	r6, r3
    19b2:	0004      	movs	r4, r0
    19b4:	429a      	cmp	r2, r3
    19b6:	d91a      	bls.n	19ee <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19b8:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <nm_read_block+0x64>)
    19ba:	469a      	mov	sl, r3
    19bc:	1a37      	subs	r7, r6, r0
    19be:	4643      	mov	r3, r8
    19c0:	1ae1      	subs	r1, r4, r3
    19c2:	4449      	add	r1, r9
    19c4:	9a01      	ldr	r2, [sp, #4]
    19c6:	0020      	movs	r0, r4
    19c8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    19ca:	2800      	cmp	r0, #0
    19cc:	d109      	bne.n	19e2 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    19ce:	1bad      	subs	r5, r5, r6
    19d0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    19d2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    19d4:	42b5      	cmp	r5, r6
    19d6:	d8f2      	bhi.n	19be <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19d8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    19da:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19dc:	0020      	movs	r0, r4
    19de:	4b06      	ldr	r3, [pc, #24]	; (19f8 <nm_read_block+0x64>)
    19e0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    19e2:	b002      	add	sp, #8
    19e4:	bc1c      	pop	{r2, r3, r4}
    19e6:	4690      	mov	r8, r2
    19e8:	4699      	mov	r9, r3
    19ea:	46a2      	mov	sl, r4
    19ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    19ee:	2100      	movs	r1, #0
    19f0:	e7f2      	b.n	19d8 <nm_read_block+0x44>
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	20000000 	.word	0x20000000
    19f8:	000024b9 	.word	0x000024b9

000019fc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    19fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fe:	46d6      	mov	lr, sl
    1a00:	464f      	mov	r7, r9
    1a02:	4646      	mov	r6, r8
    1a04:	b5c0      	push	{r6, r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	4680      	mov	r8, r0
    1a0a:	4689      	mov	r9, r1
    1a0c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a0e:	4b13      	ldr	r3, [pc, #76]	; (1a5c <nm_write_block+0x60>)
    1a10:	881f      	ldrh	r7, [r3, #0]
    1a12:	3f08      	subs	r7, #8
    1a14:	b2bb      	uxth	r3, r7
    1a16:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a18:	001e      	movs	r6, r3
    1a1a:	0004      	movs	r4, r0
    1a1c:	429a      	cmp	r2, r3
    1a1e:	d91a      	bls.n	1a56 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a20:	4b0f      	ldr	r3, [pc, #60]	; (1a60 <nm_write_block+0x64>)
    1a22:	469a      	mov	sl, r3
    1a24:	1a37      	subs	r7, r6, r0
    1a26:	4643      	mov	r3, r8
    1a28:	1ae1      	subs	r1, r4, r3
    1a2a:	4449      	add	r1, r9
    1a2c:	9a01      	ldr	r2, [sp, #4]
    1a2e:	0020      	movs	r0, r4
    1a30:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a32:	2800      	cmp	r0, #0
    1a34:	d109      	bne.n	1a4a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1a36:	1bad      	subs	r5, r5, r6
    1a38:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1a3a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1a3c:	42b5      	cmp	r5, r6
    1a3e:	d8f2      	bhi.n	1a26 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a40:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1a42:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a44:	0020      	movs	r0, r4
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <nm_write_block+0x64>)
    1a48:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1a4a:	b002      	add	sp, #8
    1a4c:	bc1c      	pop	{r2, r3, r4}
    1a4e:	4690      	mov	r8, r2
    1a50:	4699      	mov	r9, r3
    1a52:	46a2      	mov	sl, r4
    1a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1a56:	2100      	movs	r1, #0
    1a58:	e7f2      	b.n	1a40 <nm_write_block+0x44>
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	20000000 	.word	0x20000000
    1a60:	00002611 	.word	0x00002611

00001a64 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	b084      	sub	sp, #16
    1a68:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1a6a:	2300      	movs	r3, #0
    1a6c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    1a6e:	2208      	movs	r2, #8
    1a70:	2100      	movs	r1, #0
    1a72:	a801      	add	r0, sp, #4
    1a74:	4b2d      	ldr	r3, [pc, #180]	; (1b2c <nm_get_firmware_full_info+0xc8>)
    1a76:	4798      	blx	r3
	if (pstrRev != NULL)
    1a78:	2c00      	cmp	r4, #0
    1a7a:	d044      	beq.n	1b06 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    1a7c:	2228      	movs	r2, #40	; 0x28
    1a7e:	2100      	movs	r1, #0
    1a80:	0020      	movs	r0, r4
    1a82:	4b2b      	ldr	r3, [pc, #172]	; (1b30 <nm_get_firmware_full_info+0xcc>)
    1a84:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    1a86:	a903      	add	r1, sp, #12
    1a88:	482a      	ldr	r0, [pc, #168]	; (1b34 <nm_get_firmware_full_info+0xd0>)
    1a8a:	4b2b      	ldr	r3, [pc, #172]	; (1b38 <nm_get_firmware_full_info+0xd4>)
    1a8c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1a8e:	2800      	cmp	r0, #0
    1a90:	d13a      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    1a92:	9b03      	ldr	r3, [sp, #12]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d039      	beq.n	1b0c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1a98:	20c0      	movs	r0, #192	; 0xc0
    1a9a:	0280      	lsls	r0, r0, #10
    1a9c:	4318      	orrs	r0, r3
    1a9e:	2208      	movs	r2, #8
    1aa0:	a901      	add	r1, sp, #4
    1aa2:	4b26      	ldr	r3, [pc, #152]	; (1b3c <nm_get_firmware_full_info+0xd8>)
    1aa4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    1aa6:	2800      	cmp	r0, #0
    1aa8:	d12e      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    1aaa:	9b02      	ldr	r3, [sp, #8]
    1aac:	0418      	lsls	r0, r3, #16
    1aae:	0c00      	lsrs	r0, r0, #16
    1ab0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1ab2:	d02e      	beq.n	1b12 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1ab4:	23c0      	movs	r3, #192	; 0xc0
    1ab6:	029b      	lsls	r3, r3, #10
    1ab8:	4318      	orrs	r0, r3
    1aba:	2228      	movs	r2, #40	; 0x28
    1abc:	0021      	movs	r1, r4
    1abe:	4b1f      	ldr	r3, [pc, #124]	; (1b3c <nm_get_firmware_full_info+0xd8>)
    1ac0:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1ac2:	2800      	cmp	r0, #0
    1ac4:	d120      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1ac6:	7921      	ldrb	r1, [r4, #4]
    1ac8:	0209      	lsls	r1, r1, #8
    1aca:	79a2      	ldrb	r2, [r4, #6]
    1acc:	230f      	movs	r3, #15
    1ace:	401a      	ands	r2, r3
    1ad0:	430a      	orrs	r2, r1
    1ad2:	7961      	ldrb	r1, [r4, #5]
    1ad4:	0109      	lsls	r1, r1, #4
    1ad6:	25ff      	movs	r5, #255	; 0xff
    1ad8:	4029      	ands	r1, r5
    1ada:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    1adc:	79e1      	ldrb	r1, [r4, #7]
    1ade:	0209      	lsls	r1, r1, #8
    1ae0:	7a66      	ldrb	r6, [r4, #9]
    1ae2:	4033      	ands	r3, r6
    1ae4:	430b      	orrs	r3, r1
    1ae6:	7a21      	ldrb	r1, [r4, #8]
    1ae8:	0109      	lsls	r1, r1, #4
    1aea:	400d      	ands	r5, r1
    1aec:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    1aee:	2a00      	cmp	r2, #0
    1af0:	d012      	beq.n	1b18 <nm_get_firmware_full_info+0xb4>
    1af2:	2b00      	cmp	r3, #0
    1af4:	d013      	beq.n	1b1e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1af6:	4912      	ldr	r1, [pc, #72]	; (1b40 <nm_get_firmware_full_info+0xdc>)
    1af8:	428b      	cmp	r3, r1
    1afa:	d813      	bhi.n	1b24 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    1afc:	4b11      	ldr	r3, [pc, #68]	; (1b44 <nm_get_firmware_full_info+0xe0>)
    1afe:	429a      	cmp	r2, r3
    1b00:	d802      	bhi.n	1b08 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b02:	380d      	subs	r0, #13
    1b04:	e000      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    1b06:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1b08:	b004      	add	sp, #16
    1b0a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    1b0c:	200c      	movs	r0, #12
    1b0e:	4240      	negs	r0, r0
    1b10:	e7fa      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    1b12:	200c      	movs	r0, #12
    1b14:	4240      	negs	r0, r0
    1b16:	e7f7      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    1b18:	200c      	movs	r0, #12
    1b1a:	4240      	negs	r0, r0
    1b1c:	e7f4      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
    1b1e:	200c      	movs	r0, #12
    1b20:	4240      	negs	r0, r0
    1b22:	e7f1      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b24:	200d      	movs	r0, #13
    1b26:	4240      	negs	r0, r0
    1b28:	e7ee      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	00007e33 	.word	0x00007e33
    1b30:	00000531 	.word	0x00000531
    1b34:	000c0008 	.word	0x000c0008
    1b38:	0000197d 	.word	0x0000197d
    1b3c:	00001995 	.word	0x00001995
    1b40:	00001352 	.word	0x00001352
    1b44:	00001351 	.word	0x00001351

00001b48 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1b48:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) 
    1b4a:	2800      	cmp	r0, #0
    1b4c:	d037      	beq.n	1bbe <nm_drv_init+0x76>
	{
		u8Mode = *((uint8 *)arg);
    1b4e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) 
    1b50:	1e6b      	subs	r3, r5, #1
    1b52:	2b03      	cmp	r3, #3
    1b54:	d900      	bls.n	1b58 <nm_drv_init+0x10>
		{
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1b56:	2501      	movs	r5, #1
	else 
	{
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    1b58:	2000      	movs	r0, #0
    1b5a:	4b20      	ldr	r3, [pc, #128]	; (1bdc <nm_drv_init+0x94>)
    1b5c:	4798      	blx	r3
    1b5e:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b60:	d12f      	bne.n	1bc2 <nm_drv_init+0x7a>
	if(M2M_SUCCESS != ret) 
	{
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1b62:	481f      	ldr	r0, [pc, #124]	; (1be0 <nm_drv_init+0x98>)
    1b64:	4c1f      	ldr	r4, [pc, #124]	; (1be4 <nm_drv_init+0x9c>)
    1b66:	47a0      	blx	r4
    1b68:	4b1f      	ldr	r3, [pc, #124]	; (1be8 <nm_drv_init+0xa0>)
    1b6a:	4798      	blx	r3
    1b6c:	0001      	movs	r1, r0
    1b6e:	481f      	ldr	r0, [pc, #124]	; (1bec <nm_drv_init+0xa4>)
    1b70:	47a0      	blx	r4
    1b72:	200d      	movs	r0, #13
    1b74:	4b1e      	ldr	r3, [pc, #120]	; (1bf0 <nm_drv_init+0xa8>)
    1b76:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1b78:	4b1e      	ldr	r3, [pc, #120]	; (1bf4 <nm_drv_init+0xac>)
    1b7a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    1b7c:	0028      	movs	r0, r5
    1b7e:	4b1e      	ldr	r3, [pc, #120]	; (1bf8 <nm_drv_init+0xb0>)
    1b80:	4798      	blx	r3
    1b82:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b84:	d117      	bne.n	1bb6 <nm_drv_init+0x6e>
	{
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1b86:	0028      	movs	r0, r5
    1b88:	4b1c      	ldr	r3, [pc, #112]	; (1bfc <nm_drv_init+0xb4>)
    1b8a:	4798      	blx	r3
    1b8c:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b8e:	d112      	bne.n	1bb6 <nm_drv_init+0x6e>
	{
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) 
    1b90:	3d02      	subs	r5, #2
    1b92:	2d01      	cmp	r5, #1
    1b94:	d911      	bls.n	1bba <nm_drv_init+0x72>
	{
		goto ERR1;
	} 
	else;
	
	ret = enable_interrupts();
    1b96:	4b1a      	ldr	r3, [pc, #104]	; (1c00 <nm_drv_init+0xb8>)
    1b98:	4798      	blx	r3
    1b9a:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b9c:	d00d      	beq.n	1bba <nm_drv_init+0x72>
	{
		M2M_ERR("failed to enable interrupts..\n");
    1b9e:	2260      	movs	r2, #96	; 0x60
    1ba0:	32ff      	adds	r2, #255	; 0xff
    1ba2:	4918      	ldr	r1, [pc, #96]	; (1c04 <nm_drv_init+0xbc>)
    1ba4:	4818      	ldr	r0, [pc, #96]	; (1c08 <nm_drv_init+0xc0>)
    1ba6:	4b0f      	ldr	r3, [pc, #60]	; (1be4 <nm_drv_init+0x9c>)
    1ba8:	4798      	blx	r3
    1baa:	4818      	ldr	r0, [pc, #96]	; (1c0c <nm_drv_init+0xc4>)
    1bac:	4b18      	ldr	r3, [pc, #96]	; (1c10 <nm_drv_init+0xc8>)
    1bae:	4798      	blx	r3
    1bb0:	200d      	movs	r0, #13
    1bb2:	4b0f      	ldr	r3, [pc, #60]	; (1bf0 <nm_drv_init+0xa8>)
    1bb4:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1bb6:	4b17      	ldr	r3, [pc, #92]	; (1c14 <nm_drv_init+0xcc>)
    1bb8:	4798      	blx	r3
ERR1:
	return ret;
}
    1bba:	0020      	movs	r0, r4
    1bbc:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1bbe:	2501      	movs	r5, #1
    1bc0:	e7ca      	b.n	1b58 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1bc2:	2296      	movs	r2, #150	; 0x96
    1bc4:	0052      	lsls	r2, r2, #1
    1bc6:	490f      	ldr	r1, [pc, #60]	; (1c04 <nm_drv_init+0xbc>)
    1bc8:	480f      	ldr	r0, [pc, #60]	; (1c08 <nm_drv_init+0xc0>)
    1bca:	4b06      	ldr	r3, [pc, #24]	; (1be4 <nm_drv_init+0x9c>)
    1bcc:	4798      	blx	r3
    1bce:	4812      	ldr	r0, [pc, #72]	; (1c18 <nm_drv_init+0xd0>)
    1bd0:	4b0f      	ldr	r3, [pc, #60]	; (1c10 <nm_drv_init+0xc8>)
    1bd2:	4798      	blx	r3
    1bd4:	200d      	movs	r0, #13
    1bd6:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <nm_drv_init+0xa8>)
    1bd8:	4798      	blx	r3
		goto ERR1;
    1bda:	e7ee      	b.n	1bba <nm_drv_init+0x72>
    1bdc:	0000194d 	.word	0x0000194d
    1be0:	000093f8 	.word	0x000093f8
    1be4:	00007e45 	.word	0x00007e45
    1be8:	0000152d 	.word	0x0000152d
    1bec:	0000973c 	.word	0x0000973c
    1bf0:	00007e79 	.word	0x00007e79
    1bf4:	0000238d 	.word	0x0000238d
    1bf8:	00001741 	.word	0x00001741
    1bfc:	00001849 	.word	0x00001849
    1c00:	000014d1 	.word	0x000014d1
    1c04:	00009684 	.word	0x00009684
    1c08:	000090c8 	.word	0x000090c8
    1c0c:	00009700 	.word	0x00009700
    1c10:	00007f61 	.word	0x00007f61
    1c14:	00001959 	.word	0x00001959
    1c18:	00009720 	.word	0x00009720

00001c1c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1c1c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1c1e:	4b1c      	ldr	r3, [pc, #112]	; (1c90 <nm_drv_deinit+0x74>)
    1c20:	4798      	blx	r3
    1c22:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c24:	d10b      	bne.n	1c3e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1c26:	2000      	movs	r0, #0
    1c28:	4b1a      	ldr	r3, [pc, #104]	; (1c94 <nm_drv_deinit+0x78>)
    1c2a:	4798      	blx	r3
    1c2c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c2e:	d114      	bne.n	1c5a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1c30:	4b19      	ldr	r3, [pc, #100]	; (1c98 <nm_drv_deinit+0x7c>)
    1c32:	4798      	blx	r3
    1c34:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c36:	d11d      	bne.n	1c74 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1c38:	4b18      	ldr	r3, [pc, #96]	; (1c9c <nm_drv_deinit+0x80>)
    1c3a:	4798      	blx	r3
    1c3c:	e00b      	b.n	1c56 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1c3e:	22bb      	movs	r2, #187	; 0xbb
    1c40:	0052      	lsls	r2, r2, #1
    1c42:	4917      	ldr	r1, [pc, #92]	; (1ca0 <nm_drv_deinit+0x84>)
    1c44:	4817      	ldr	r0, [pc, #92]	; (1ca4 <nm_drv_deinit+0x88>)
    1c46:	4b18      	ldr	r3, [pc, #96]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c48:	4798      	blx	r3
    1c4a:	4818      	ldr	r0, [pc, #96]	; (1cac <nm_drv_deinit+0x90>)
    1c4c:	4b18      	ldr	r3, [pc, #96]	; (1cb0 <nm_drv_deinit+0x94>)
    1c4e:	4798      	blx	r3
    1c50:	200d      	movs	r0, #13
    1c52:	4b18      	ldr	r3, [pc, #96]	; (1cb4 <nm_drv_deinit+0x98>)
    1c54:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1c56:	0020      	movs	r0, r4
    1c58:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1c5a:	227e      	movs	r2, #126	; 0x7e
    1c5c:	32ff      	adds	r2, #255	; 0xff
    1c5e:	4910      	ldr	r1, [pc, #64]	; (1ca0 <nm_drv_deinit+0x84>)
    1c60:	4810      	ldr	r0, [pc, #64]	; (1ca4 <nm_drv_deinit+0x88>)
    1c62:	4b11      	ldr	r3, [pc, #68]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c64:	4798      	blx	r3
    1c66:	4814      	ldr	r0, [pc, #80]	; (1cb8 <nm_drv_deinit+0x9c>)
    1c68:	4b11      	ldr	r3, [pc, #68]	; (1cb0 <nm_drv_deinit+0x94>)
    1c6a:	4798      	blx	r3
    1c6c:	200d      	movs	r0, #13
    1c6e:	4b11      	ldr	r3, [pc, #68]	; (1cb4 <nm_drv_deinit+0x98>)
    1c70:	4798      	blx	r3
		goto ERR1;
    1c72:	e7f0      	b.n	1c56 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1c74:	2284      	movs	r2, #132	; 0x84
    1c76:	32ff      	adds	r2, #255	; 0xff
    1c78:	4909      	ldr	r1, [pc, #36]	; (1ca0 <nm_drv_deinit+0x84>)
    1c7a:	480a      	ldr	r0, [pc, #40]	; (1ca4 <nm_drv_deinit+0x88>)
    1c7c:	4b0a      	ldr	r3, [pc, #40]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c7e:	4798      	blx	r3
    1c80:	480e      	ldr	r0, [pc, #56]	; (1cbc <nm_drv_deinit+0xa0>)
    1c82:	4b0b      	ldr	r3, [pc, #44]	; (1cb0 <nm_drv_deinit+0x94>)
    1c84:	4798      	blx	r3
    1c86:	200d      	movs	r0, #13
    1c88:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <nm_drv_deinit+0x98>)
    1c8a:	4798      	blx	r3
		goto ERR1;
    1c8c:	e7e3      	b.n	1c56 <nm_drv_deinit+0x3a>
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	000018c1 	.word	0x000018c1
    1c94:	0000317d 	.word	0x0000317d
    1c98:	00001959 	.word	0x00001959
    1c9c:	00002339 	.word	0x00002339
    1ca0:	00009690 	.word	0x00009690
    1ca4:	000090c8 	.word	0x000090c8
    1ca8:	00007e45 	.word	0x00007e45
    1cac:	000096a0 	.word	0x000096a0
    1cb0:	00007f61 	.word	0x00007f61
    1cb4:	00007e79 	.word	0x00007e79
    1cb8:	000096c0 	.word	0x000096c0
    1cbc:	000096e4 	.word	0x000096e4

00001cc0 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1cc0:	b500      	push	{lr}
    1cc2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1cc4:	ab01      	add	r3, sp, #4
    1cc6:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1cc8:	2200      	movs	r2, #0
    1cca:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1ccc:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1cce:	0019      	movs	r1, r3
    1cd0:	2003      	movs	r0, #3
    1cd2:	4b02      	ldr	r3, [pc, #8]	; (1cdc <nmi_spi_write+0x1c>)
    1cd4:	4798      	blx	r3
}
    1cd6:	b005      	add	sp, #20
    1cd8:	bd00      	pop	{pc}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	00000365 	.word	0x00000365

00001ce0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1ce0:	b570      	push	{r4, r5, r6, lr}
    1ce2:	b084      	sub	sp, #16
    1ce4:	ac08      	add	r4, sp, #32
    1ce6:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1ce8:	ac01      	add	r4, sp, #4
    1cea:	7020      	strb	r0, [r4, #0]
	switch(cmd) 
    1cec:	303f      	adds	r0, #63	; 0x3f
    1cee:	b2c4      	uxtb	r4, r0
    1cf0:	2c0e      	cmp	r4, #14
    1cf2:	d900      	bls.n	1cf6 <spi_cmd+0x16>
    1cf4:	e084      	b.n	1e00 <spi_cmd+0x120>
    1cf6:	00a0      	lsls	r0, r4, #2
    1cf8:	4c4f      	ldr	r4, [pc, #316]	; (1e38 <spi_cmd+0x158>)
    1cfa:	5820      	ldr	r0, [r4, r0]
    1cfc:	4687      	mov	pc, r0
	{
		case CMD_SINGLE_READ:				/* single word (4 bytes) read */
			bc[1] = (uint8)(adr >> 16);
    1cfe:	ab01      	add	r3, sp, #4
    1d00:	0c0a      	lsrs	r2, r1, #16
    1d02:	705a      	strb	r2, [r3, #1]
			bc[2] = (uint8)(adr >> 8);
    1d04:	0a0a      	lsrs	r2, r1, #8
    1d06:	709a      	strb	r2, [r3, #2]
			bc[3] = (uint8)adr;
    1d08:	70d9      	strb	r1, [r3, #3]
			len = 5;
    1d0a:	2105      	movs	r1, #5
			break;
	}

	if(result) 
	{
		if (!gu8Crc_off)
    1d0c:	4b4b      	ldr	r3, [pc, #300]	; (1e3c <spi_cmd+0x15c>)
    1d0e:	781b      	ldrb	r3, [r3, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	d077      	beq.n	1e04 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1d14:	3901      	subs	r1, #1
    1d16:	b2c9      	uxtb	r1, r1
    1d18:	e083      	b.n	1e22 <spi_cmd+0x142>
			bc[1] = (uint8)(adr >> 8);
    1d1a:	0a0b      	lsrs	r3, r1, #8
    1d1c:	b2db      	uxtb	r3, r3
			if(clockless)  bc[1] |= (1 << 7);
    1d1e:	2d00      	cmp	r5, #0
    1d20:	d107      	bne.n	1d32 <spi_cmd+0x52>
			bc[1] = (uint8)(adr >> 8);
    1d22:	aa01      	add	r2, sp, #4
    1d24:	7053      	strb	r3, [r2, #1]
			bc[2] = (uint8)adr;
    1d26:	ab01      	add	r3, sp, #4
    1d28:	7099      	strb	r1, [r3, #2]
			bc[3] = 0x00;
    1d2a:	2200      	movs	r2, #0
    1d2c:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d2e:	2105      	movs	r1, #5
			break;
    1d30:	e7ec      	b.n	1d0c <spi_cmd+0x2c>
			if(clockless)  bc[1] |= (1 << 7);
    1d32:	2280      	movs	r2, #128	; 0x80
    1d34:	4252      	negs	r2, r2
    1d36:	4313      	orrs	r3, r2
    1d38:	aa01      	add	r2, sp, #4
    1d3a:	7053      	strb	r3, [r2, #1]
    1d3c:	e7f3      	b.n	1d26 <spi_cmd+0x46>
			bc[1] = 0x00;
    1d3e:	ab01      	add	r3, sp, #4
    1d40:	2200      	movs	r2, #0
    1d42:	705a      	strb	r2, [r3, #1]
			bc[2] = 0x00;
    1d44:	709a      	strb	r2, [r3, #2]
			bc[3] = 0x00;
    1d46:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d48:	2105      	movs	r1, #5
			break;
    1d4a:	e7df      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = 0x00;
    1d4c:	ab01      	add	r3, sp, #4
    1d4e:	2200      	movs	r2, #0
    1d50:	705a      	strb	r2, [r3, #1]
			bc[2] = 0x00;
    1d52:	709a      	strb	r2, [r3, #2]
			bc[3] = 0x00;
    1d54:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d56:	2105      	movs	r1, #5
			break;
    1d58:	e7d8      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = 0xff;
    1d5a:	ab01      	add	r3, sp, #4
    1d5c:	22ff      	movs	r2, #255	; 0xff
    1d5e:	705a      	strb	r2, [r3, #1]
			bc[2] = 0xff;
    1d60:	709a      	strb	r2, [r3, #2]
			bc[3] = 0xff;
    1d62:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d64:	2105      	movs	r1, #5
			break;
    1d66:	e7d1      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 16);
    1d68:	aa01      	add	r2, sp, #4
    1d6a:	0c08      	lsrs	r0, r1, #16
    1d6c:	7050      	strb	r0, [r2, #1]
			bc[2] = (uint8)(adr >> 8);
    1d6e:	0a08      	lsrs	r0, r1, #8
    1d70:	7090      	strb	r0, [r2, #2]
			bc[3] = (uint8)adr;
    1d72:	70d1      	strb	r1, [r2, #3]
			bc[4] = (uint8)(sz >> 8);
    1d74:	0a19      	lsrs	r1, r3, #8
    1d76:	7111      	strb	r1, [r2, #4]
			bc[5] = (uint8)(sz);
    1d78:	7153      	strb	r3, [r2, #5]
			len = 7;
    1d7a:	2107      	movs	r1, #7
			break;
    1d7c:	e7c6      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 16);
    1d7e:	aa01      	add	r2, sp, #4
    1d80:	0c08      	lsrs	r0, r1, #16
    1d82:	7050      	strb	r0, [r2, #1]
			bc[2] = (uint8)(adr >> 8);
    1d84:	0a08      	lsrs	r0, r1, #8
    1d86:	7090      	strb	r0, [r2, #2]
			bc[3] = (uint8)adr;
    1d88:	70d1      	strb	r1, [r2, #3]
			bc[4] = (uint8)(sz >> 16);
    1d8a:	0c19      	lsrs	r1, r3, #16
    1d8c:	7111      	strb	r1, [r2, #4]
			bc[5] = (uint8)(sz >> 8);
    1d8e:	0a19      	lsrs	r1, r3, #8
    1d90:	7151      	strb	r1, [r2, #5]
			bc[6] = (uint8)(sz);
    1d92:	7193      	strb	r3, [r2, #6]
			len = 8;
    1d94:	2108      	movs	r1, #8
			break;
    1d96:	e7b9      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 8);
    1d98:	0a0b      	lsrs	r3, r1, #8
    1d9a:	b2db      	uxtb	r3, r3
			if(clockless)  bc[1] |= (1 << 7);
    1d9c:	2d00      	cmp	r5, #0
    1d9e:	d10c      	bne.n	1dba <spi_cmd+0xda>
			bc[1] = (uint8)(adr >> 8);
    1da0:	a801      	add	r0, sp, #4
    1da2:	7043      	strb	r3, [r0, #1]
			bc[2] = (uint8)(adr);
    1da4:	ab01      	add	r3, sp, #4
    1da6:	7099      	strb	r1, [r3, #2]
			bc[3] = (uint8)(u32data >> 24);
    1da8:	0e11      	lsrs	r1, r2, #24
    1daa:	70d9      	strb	r1, [r3, #3]
			bc[4] = (uint8)(u32data >> 16);
    1dac:	0c11      	lsrs	r1, r2, #16
    1dae:	7119      	strb	r1, [r3, #4]
			bc[5] = (uint8)(u32data >> 8);
    1db0:	0a11      	lsrs	r1, r2, #8
    1db2:	7159      	strb	r1, [r3, #5]
			bc[6] = (uint8)(u32data);
    1db4:	719a      	strb	r2, [r3, #6]
			len = 8;
    1db6:	2108      	movs	r1, #8
			break;
    1db8:	e7a8      	b.n	1d0c <spi_cmd+0x2c>
			if(clockless)  bc[1] |= (1 << 7);
    1dba:	2080      	movs	r0, #128	; 0x80
    1dbc:	4240      	negs	r0, r0
    1dbe:	4303      	orrs	r3, r0
    1dc0:	a801      	add	r0, sp, #4
    1dc2:	7043      	strb	r3, [r0, #1]
    1dc4:	e7ee      	b.n	1da4 <spi_cmd+0xc4>
			bc[1] = (uint8)(adr >> 16);
    1dc6:	ab01      	add	r3, sp, #4
    1dc8:	0c08      	lsrs	r0, r1, #16
    1dca:	7058      	strb	r0, [r3, #1]
			bc[2] = (uint8)(adr >> 8);
    1dcc:	0a08      	lsrs	r0, r1, #8
    1dce:	7098      	strb	r0, [r3, #2]
			bc[3] = (uint8)(adr);
    1dd0:	70d9      	strb	r1, [r3, #3]
			bc[4] = (uint8)(u32data >> 24);
    1dd2:	0e11      	lsrs	r1, r2, #24
    1dd4:	7119      	strb	r1, [r3, #4]
			bc[5] = (uint8)(u32data >> 16);
    1dd6:	0c11      	lsrs	r1, r2, #16
    1dd8:	7159      	strb	r1, [r3, #5]
			bc[6] = (uint8)(u32data >> 8);
    1dda:	0a11      	lsrs	r1, r2, #8
    1ddc:	7199      	strb	r1, [r3, #6]
			bc[7] = (uint8)(u32data);
    1dde:	71da      	strb	r2, [r3, #7]
			len = 9;
    1de0:	2109      	movs	r1, #9
			break;
    1de2:	e793      	b.n	1d0c <spi_cmd+0x2c>

		if(M2M_SUCCESS != nmi_spi_write(bc, len)) 
		{
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1de4:	2234      	movs	r2, #52	; 0x34
    1de6:	32ff      	adds	r2, #255	; 0xff
    1de8:	4915      	ldr	r1, [pc, #84]	; (1e40 <spi_cmd+0x160>)
    1dea:	4816      	ldr	r0, [pc, #88]	; (1e44 <spi_cmd+0x164>)
    1dec:	4b16      	ldr	r3, [pc, #88]	; (1e48 <spi_cmd+0x168>)
    1dee:	4798      	blx	r3
    1df0:	4816      	ldr	r0, [pc, #88]	; (1e4c <spi_cmd+0x16c>)
    1df2:	4b17      	ldr	r3, [pc, #92]	; (1e50 <spi_cmd+0x170>)
    1df4:	4798      	blx	r3
    1df6:	200d      	movs	r0, #13
    1df8:	4b16      	ldr	r3, [pc, #88]	; (1e54 <spi_cmd+0x174>)
    1dfa:	4798      	blx	r3
			result = N_FAIL;
    1dfc:	2300      	movs	r3, #0
    1dfe:	e017      	b.n	1e30 <spi_cmd+0x150>
	switch(cmd) 
    1e00:	2300      	movs	r3, #0
    1e02:	e015      	b.n	1e30 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e04:	1e4e      	subs	r6, r1, #1
    1e06:	aa01      	add	r2, sp, #4
    1e08:	1995      	adds	r5, r2, r6
    1e0a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    1e0c:	4c12      	ldr	r4, [pc, #72]	; (1e58 <spi_cmd+0x178>)
    1e0e:	005b      	lsls	r3, r3, #1
    1e10:	7810      	ldrb	r0, [r2, #0]
    1e12:	4043      	eors	r3, r0
    1e14:	5ce3      	ldrb	r3, [r4, r3]
    1e16:	3201      	adds	r2, #1
	while (len--)
    1e18:	42aa      	cmp	r2, r5
    1e1a:	d1f8      	bne.n	1e0e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e1c:	005b      	lsls	r3, r3, #1
    1e1e:	aa01      	add	r2, sp, #4
    1e20:	5593      	strb	r3, [r2, r6]
		if(M2M_SUCCESS != nmi_spi_write(bc, len)) 
    1e22:	b289      	uxth	r1, r1
    1e24:	a801      	add	r0, sp, #4
    1e26:	4b0d      	ldr	r3, [pc, #52]	; (1e5c <spi_cmd+0x17c>)
    1e28:	4798      	blx	r3
    1e2a:	2301      	movs	r3, #1
    1e2c:	2800      	cmp	r0, #0
    1e2e:	d1d9      	bne.n	1de4 <spi_cmd+0x104>
		}
	}

	return result;
}
    1e30:	0018      	movs	r0, r3
    1e32:	b004      	add	sp, #16
    1e34:	bd70      	pop	{r4, r5, r6, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	0000974c 	.word	0x0000974c
    1e3c:	200000a0 	.word	0x200000a0
    1e40:	0000978c 	.word	0x0000978c
    1e44:	000090c8 	.word	0x000090c8
    1e48:	00007e45 	.word	0x00007e45
    1e4c:	00009c1c 	.word	0x00009c1c
    1e50:	00007f61 	.word	0x00007f61
    1e54:	00007e79 	.word	0x00007e79
    1e58:	00009818 	.word	0x00009818
    1e5c:	00001cc1 	.word	0x00001cc1

00001e60 <nmi_spi_read>:
{
    1e60:	b500      	push	{lr}
    1e62:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    1e64:	ab01      	add	r3, sp, #4
    1e66:	2200      	movs	r2, #0
    1e68:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1e6a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1e6c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1e6e:	0019      	movs	r1, r3
    1e70:	2003      	movs	r0, #3
    1e72:	4b02      	ldr	r3, [pc, #8]	; (1e7c <nmi_spi_read+0x1c>)
    1e74:	4798      	blx	r3
}
    1e76:	b005      	add	sp, #20
    1e78:	bd00      	pop	{pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	00000365 	.word	0x00000365

00001e80 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e82:	46c6      	mov	lr, r8
    1e84:	b500      	push	{lr}
    1e86:	b082      	sub	sp, #8
    1e88:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1e8a:	28cf      	cmp	r0, #207	; 0xcf
    1e8c:	d02b      	beq.n	1ee6 <spi_cmd_rsp+0x66>
    1e8e:	0003      	movs	r3, r0
    1e90:	333b      	adds	r3, #59	; 0x3b
    1e92:	b2db      	uxtb	r3, r3
    1e94:	2b01      	cmp	r3, #1
    1e96:	d926      	bls.n	1ee6 <spi_cmd_rsp+0x66>
{
    1e98:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1e9a:	466b      	mov	r3, sp
    1e9c:	1dde      	adds	r6, r3, #7
    1e9e:	4b26      	ldr	r3, [pc, #152]	; (1f38 <spi_cmd_rsp+0xb8>)
    1ea0:	4698      	mov	r8, r3
    1ea2:	2101      	movs	r1, #1
    1ea4:	0030      	movs	r0, r6
    1ea6:	47c0      	blx	r8
    1ea8:	1e05      	subs	r5, r0, #0
    1eaa:	d125      	bne.n	1ef8 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1eac:	7833      	ldrb	r3, [r6, #0]
    1eae:	42bb      	cmp	r3, r7
    1eb0:	d030      	beq.n	1f14 <spi_cmd_rsp+0x94>
    1eb2:	3c01      	subs	r4, #1
    1eb4:	b2e4      	uxtb	r4, r4
    1eb6:	2c00      	cmp	r4, #0
    1eb8:	d1f3      	bne.n	1ea2 <spi_cmd_rsp+0x22>
    1eba:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ebc:	466b      	mov	r3, sp
    1ebe:	1dde      	adds	r6, r3, #7
    1ec0:	4f1d      	ldr	r7, [pc, #116]	; (1f38 <spi_cmd_rsp+0xb8>)
    1ec2:	2101      	movs	r1, #1
    1ec4:	0030      	movs	r0, r6
    1ec6:	47b8      	blx	r7
    1ec8:	2800      	cmp	r0, #0
    1eca:	d125      	bne.n	1f18 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1ecc:	7833      	ldrb	r3, [r6, #0]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d02f      	beq.n	1f32 <spi_cmd_rsp+0xb2>
    1ed2:	3c01      	subs	r4, #1
    1ed4:	b2e4      	uxtb	r4, r4
    1ed6:	2c00      	cmp	r4, #0
    1ed8:	d1f3      	bne.n	1ec2 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    1eda:	2501      	movs	r5, #1

_fail_:

	return result;
}
    1edc:	0028      	movs	r0, r5
    1ede:	b002      	add	sp, #8
    1ee0:	bc04      	pop	{r2}
    1ee2:	4690      	mov	r8, r2
    1ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ee6:	2101      	movs	r1, #1
    1ee8:	466b      	mov	r3, sp
    1eea:	1dd8      	adds	r0, r3, #7
    1eec:	4b12      	ldr	r3, [pc, #72]	; (1f38 <spi_cmd_rsp+0xb8>)
    1eee:	4798      	blx	r3
			result = N_FAIL;
    1ef0:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ef2:	2800      	cmp	r0, #0
    1ef4:	d0d0      	beq.n	1e98 <spi_cmd_rsp+0x18>
    1ef6:	e7f1      	b.n	1edc <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1ef8:	22b7      	movs	r2, #183	; 0xb7
    1efa:	0052      	lsls	r2, r2, #1
    1efc:	490f      	ldr	r1, [pc, #60]	; (1f3c <spi_cmd_rsp+0xbc>)
    1efe:	4810      	ldr	r0, [pc, #64]	; (1f40 <spi_cmd_rsp+0xc0>)
    1f00:	4b10      	ldr	r3, [pc, #64]	; (1f44 <spi_cmd_rsp+0xc4>)
    1f02:	4798      	blx	r3
    1f04:	4810      	ldr	r0, [pc, #64]	; (1f48 <spi_cmd_rsp+0xc8>)
    1f06:	4b11      	ldr	r3, [pc, #68]	; (1f4c <spi_cmd_rsp+0xcc>)
    1f08:	4798      	blx	r3
    1f0a:	200d      	movs	r0, #13
    1f0c:	4b10      	ldr	r3, [pc, #64]	; (1f50 <spi_cmd_rsp+0xd0>)
    1f0e:	4798      	blx	r3
			result = N_FAIL;
    1f10:	2500      	movs	r5, #0
			goto _fail_;
    1f12:	e7e3      	b.n	1edc <spi_cmd_rsp+0x5c>
    1f14:	240b      	movs	r4, #11
    1f16:	e7d1      	b.n	1ebc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1f18:	22be      	movs	r2, #190	; 0xbe
    1f1a:	0052      	lsls	r2, r2, #1
    1f1c:	4907      	ldr	r1, [pc, #28]	; (1f3c <spi_cmd_rsp+0xbc>)
    1f1e:	4808      	ldr	r0, [pc, #32]	; (1f40 <spi_cmd_rsp+0xc0>)
    1f20:	4b08      	ldr	r3, [pc, #32]	; (1f44 <spi_cmd_rsp+0xc4>)
    1f22:	4798      	blx	r3
    1f24:	4808      	ldr	r0, [pc, #32]	; (1f48 <spi_cmd_rsp+0xc8>)
    1f26:	4b09      	ldr	r3, [pc, #36]	; (1f4c <spi_cmd_rsp+0xcc>)
    1f28:	4798      	blx	r3
    1f2a:	200d      	movs	r0, #13
    1f2c:	4b08      	ldr	r3, [pc, #32]	; (1f50 <spi_cmd_rsp+0xd0>)
    1f2e:	4798      	blx	r3
			goto _fail_;
    1f30:	e7d4      	b.n	1edc <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1f32:	2501      	movs	r5, #1
    1f34:	e7d2      	b.n	1edc <spi_cmd_rsp+0x5c>
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	00001e61 	.word	0x00001e61
    1f3c:	000097a4 	.word	0x000097a4
    1f40:	000090c8 	.word	0x000090c8
    1f44:	00007e45 	.word	0x00007e45
    1f48:	00009c48 	.word	0x00009c48
    1f4c:	00007f61 	.word	0x00007f61
    1f50:	00007e79 	.word	0x00007e79

00001f54 <spi_data_read>:
	return result;
}
#endif

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f56:	46de      	mov	lr, fp
    1f58:	4657      	mov	r7, sl
    1f5a:	464e      	mov	r6, r9
    1f5c:	4645      	mov	r5, r8
    1f5e:	b5e0      	push	{r5, r6, r7, lr}
    1f60:	b087      	sub	sp, #28
    1f62:	9001      	str	r0, [sp, #4]
    1f64:	4689      	mov	r9, r1
    1f66:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1f68:	2300      	movs	r3, #0
    1f6a:	469a      	mov	sl, r3
    1f6c:	2380      	movs	r3, #128	; 0x80
    1f6e:	019b      	lsls	r3, r3, #6
    1f70:	469b      	mov	fp, r3
    1f72:	466a      	mov	r2, sp
    1f74:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do{
			if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) 
    1f76:	4b3b      	ldr	r3, [pc, #236]	; (2064 <STACK_SIZE+0x64>)
    1f78:	4698      	mov	r8, r3
    1f7a:	e02f      	b.n	1fdc <spi_data_read+0x88>
			{
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1f7c:	22c3      	movs	r2, #195	; 0xc3
    1f7e:	0092      	lsls	r2, r2, #2
    1f80:	4939      	ldr	r1, [pc, #228]	; (2068 <STACK_SIZE+0x68>)
    1f82:	483a      	ldr	r0, [pc, #232]	; (206c <STACK_SIZE+0x6c>)
    1f84:	4b3a      	ldr	r3, [pc, #232]	; (2070 <STACK_SIZE+0x70>)
    1f86:	4798      	blx	r3
    1f88:	483a      	ldr	r0, [pc, #232]	; (2074 <STACK_SIZE+0x74>)
    1f8a:	4b3b      	ldr	r3, [pc, #236]	; (2078 <STACK_SIZE+0x78>)
    1f8c:	4798      	blx	r3
    1f8e:	200d      	movs	r0, #13
    1f90:	4b3a      	ldr	r3, [pc, #232]	; (207c <STACK_SIZE+0x7c>)
    1f92:	4798      	blx	r3
    1f94:	2500      	movs	r5, #0
		sz -= nbytes;

	}while(sz);

	return result;
}
    1f96:	0028      	movs	r0, r5
    1f98:	b007      	add	sp, #28
    1f9a:	bc3c      	pop	{r2, r3, r4, r5}
    1f9c:	4690      	mov	r8, r2
    1f9e:	4699      	mov	r9, r3
    1fa0:	46a2      	mov	sl, r4
    1fa2:	46ab      	mov	fp, r5
    1fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(retry <= 0) 
    1fa6:	2c00      	cmp	r4, #0
    1fa8:	dd2e      	ble.n	2008 <STACK_SIZE+0x8>
		if(M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) 
    1faa:	9b01      	ldr	r3, [sp, #4]
    1fac:	4453      	add	r3, sl
    1fae:	0018      	movs	r0, r3
    1fb0:	0039      	movs	r1, r7
    1fb2:	4b2c      	ldr	r3, [pc, #176]	; (2064 <STACK_SIZE+0x64>)
    1fb4:	4798      	blx	r3
    1fb6:	1e04      	subs	r4, r0, #0
    1fb8:	d133      	bne.n	2022 <STACK_SIZE+0x22>
		if(!clockless)
    1fba:	9b02      	ldr	r3, [sp, #8]
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d103      	bne.n	1fc8 <spi_data_read+0x74>
			if(!gu8Crc_off) 
    1fc0:	4b2f      	ldr	r3, [pc, #188]	; (2080 <STACK_SIZE+0x80>)
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d038      	beq.n	203a <STACK_SIZE+0x3a>
		ix += nbytes;
    1fc8:	4653      	mov	r3, sl
    1fca:	18fb      	adds	r3, r7, r3
    1fcc:	b21b      	sxth	r3, r3
    1fce:	469a      	mov	sl, r3
		sz -= nbytes;
    1fd0:	464b      	mov	r3, r9
    1fd2:	1bdf      	subs	r7, r3, r7
    1fd4:	b2bb      	uxth	r3, r7
    1fd6:	4699      	mov	r9, r3
	}while(sz);
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d041      	beq.n	2060 <STACK_SIZE+0x60>
    1fdc:	464f      	mov	r7, r9
    1fde:	45d9      	cmp	r9, fp
    1fe0:	d901      	bls.n	1fe6 <spi_data_read+0x92>
    1fe2:	466b      	mov	r3, sp
    1fe4:	89df      	ldrh	r7, [r3, #14]
    1fe6:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    1fe8:	240a      	movs	r4, #10
			if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) 
    1fea:	ab04      	add	r3, sp, #16
    1fec:	1cde      	adds	r6, r3, #3
    1fee:	2101      	movs	r1, #1
    1ff0:	0030      	movs	r0, r6
    1ff2:	47c0      	blx	r8
    1ff4:	1e05      	subs	r5, r0, #0
    1ff6:	d1c1      	bne.n	1f7c <spi_data_read+0x28>
			if(((rsp >> 4) & 0xf) == 0xf){break;}
    1ff8:	7833      	ldrb	r3, [r6, #0]
    1ffa:	091b      	lsrs	r3, r3, #4
    1ffc:	2b0f      	cmp	r3, #15
    1ffe:	d0d2      	beq.n	1fa6 <spi_data_read+0x52>
    2000:	3c01      	subs	r4, #1
    2002:	b224      	sxth	r4, r4
		} while (retry--);
    2004:	1c63      	adds	r3, r4, #1
    2006:	d1f2      	bne.n	1fee <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2008:	4a1e      	ldr	r2, [pc, #120]	; (2084 <STACK_SIZE+0x84>)
    200a:	4917      	ldr	r1, [pc, #92]	; (2068 <STACK_SIZE+0x68>)
    200c:	4817      	ldr	r0, [pc, #92]	; (206c <STACK_SIZE+0x6c>)
    200e:	4c18      	ldr	r4, [pc, #96]	; (2070 <STACK_SIZE+0x70>)
    2010:	47a0      	blx	r4
    2012:	ab04      	add	r3, sp, #16
    2014:	78d9      	ldrb	r1, [r3, #3]
    2016:	481c      	ldr	r0, [pc, #112]	; (2088 <STACK_SIZE+0x88>)
    2018:	47a0      	blx	r4
    201a:	200d      	movs	r0, #13
    201c:	4b17      	ldr	r3, [pc, #92]	; (207c <STACK_SIZE+0x7c>)
    201e:	4798      	blx	r3
			break;
    2020:	e7b9      	b.n	1f96 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2022:	4a1a      	ldr	r2, [pc, #104]	; (208c <STACK_SIZE+0x8c>)
    2024:	4910      	ldr	r1, [pc, #64]	; (2068 <STACK_SIZE+0x68>)
    2026:	4811      	ldr	r0, [pc, #68]	; (206c <STACK_SIZE+0x6c>)
    2028:	4b11      	ldr	r3, [pc, #68]	; (2070 <STACK_SIZE+0x70>)
    202a:	4798      	blx	r3
    202c:	4818      	ldr	r0, [pc, #96]	; (2090 <STACK_SIZE+0x90>)
    202e:	4b12      	ldr	r3, [pc, #72]	; (2078 <STACK_SIZE+0x78>)
    2030:	4798      	blx	r3
    2032:	200d      	movs	r0, #13
    2034:	4b11      	ldr	r3, [pc, #68]	; (207c <STACK_SIZE+0x7c>)
    2036:	4798      	blx	r3
			break;
    2038:	e7ad      	b.n	1f96 <spi_data_read+0x42>
				if(M2M_SUCCESS != nmi_spi_read(crc, 2)) 
    203a:	2102      	movs	r1, #2
    203c:	a805      	add	r0, sp, #20
    203e:	4b09      	ldr	r3, [pc, #36]	; (2064 <STACK_SIZE+0x64>)
    2040:	4798      	blx	r3
    2042:	2800      	cmp	r0, #0
    2044:	d0c0      	beq.n	1fc8 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2046:	4a13      	ldr	r2, [pc, #76]	; (2094 <STACK_SIZE+0x94>)
    2048:	4907      	ldr	r1, [pc, #28]	; (2068 <STACK_SIZE+0x68>)
    204a:	4808      	ldr	r0, [pc, #32]	; (206c <STACK_SIZE+0x6c>)
    204c:	4b08      	ldr	r3, [pc, #32]	; (2070 <STACK_SIZE+0x70>)
    204e:	4798      	blx	r3
    2050:	4811      	ldr	r0, [pc, #68]	; (2098 <STACK_SIZE+0x98>)
    2052:	4b09      	ldr	r3, [pc, #36]	; (2078 <STACK_SIZE+0x78>)
    2054:	4798      	blx	r3
    2056:	200d      	movs	r0, #13
    2058:	4b08      	ldr	r3, [pc, #32]	; (207c <STACK_SIZE+0x7c>)
    205a:	4798      	blx	r3
					result = N_FAIL;
    205c:	0025      	movs	r5, r4
					break;
    205e:	e79a      	b.n	1f96 <spi_data_read+0x42>
    2060:	2501      	movs	r5, #1
    2062:	e798      	b.n	1f96 <spi_data_read+0x42>
    2064:	00001e61 	.word	0x00001e61
    2068:	000097b0 	.word	0x000097b0
    206c:	000090c8 	.word	0x000090c8
    2070:	00007e45 	.word	0x00007e45
    2074:	00009c7c 	.word	0x00009c7c
    2078:	00007f61 	.word	0x00007f61
    207c:	00007e79 	.word	0x00007e79
    2080:	200000a0 	.word	0x200000a0
    2084:	00000317 	.word	0x00000317
    2088:	00009cb0 	.word	0x00009cb0
    208c:	00000321 	.word	0x00000321
    2090:	00009ce0 	.word	0x00009ce0
    2094:	0000032f 	.word	0x0000032f
    2098:	00009d10 	.word	0x00009d10

0000209c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    209c:	b5f0      	push	{r4, r5, r6, r7, lr}
    209e:	46d6      	mov	lr, sl
    20a0:	464f      	mov	r7, r9
    20a2:	4646      	mov	r6, r8
    20a4:	b5c0      	push	{r6, r7, lr}
    20a6:	b086      	sub	sp, #24
    20a8:	9003      	str	r0, [sp, #12]
    20aa:	9104      	str	r1, [sp, #16]
    20ac:	2830      	cmp	r0, #48	; 0x30
    20ae:	d80f      	bhi.n	20d0 <spi_write_reg+0x34>
    20b0:	4b30      	ldr	r3, [pc, #192]	; (2174 <spi_write_reg+0xd8>)
    20b2:	781f      	ldrb	r7, [r3, #0]
    20b4:	b2fb      	uxtb	r3, r7
    20b6:	9305      	str	r3, [sp, #20]
    20b8:	2300      	movs	r3, #0
    20ba:	2230      	movs	r2, #48	; 0x30
    20bc:	9903      	ldr	r1, [sp, #12]
    20be:	428a      	cmp	r2, r1
    20c0:	415b      	adcs	r3, r3
    20c2:	b2db      	uxtb	r3, r3
    20c4:	469a      	mov	sl, r3
    20c6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    20c8:	4b2b      	ldr	r3, [pc, #172]	; (2178 <spi_write_reg+0xdc>)
    20ca:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20cc:	46d1      	mov	r9, sl
    20ce:	e033      	b.n	2138 <spi_write_reg+0x9c>
    20d0:	4b2a      	ldr	r3, [pc, #168]	; (217c <spi_write_reg+0xe0>)
    20d2:	781f      	ldrb	r7, [r3, #0]
    20d4:	e7ee      	b.n	20b4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    20d6:	9805      	ldr	r0, [sp, #20]
    20d8:	4b29      	ldr	r3, [pc, #164]	; (2180 <spi_write_reg+0xe4>)
    20da:	4798      	blx	r3
    20dc:	0004      	movs	r4, r0
	if (result != N_OK) {
    20de:	2801      	cmp	r0, #1
    20e0:	d041      	beq.n	2166 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20e2:	4a28      	ldr	r2, [pc, #160]	; (2184 <spi_write_reg+0xe8>)
    20e4:	4928      	ldr	r1, [pc, #160]	; (2188 <spi_write_reg+0xec>)
    20e6:	4829      	ldr	r0, [pc, #164]	; (218c <spi_write_reg+0xf0>)
    20e8:	4e29      	ldr	r6, [pc, #164]	; (2190 <spi_write_reg+0xf4>)
    20ea:	47b0      	blx	r6
    20ec:	9903      	ldr	r1, [sp, #12]
    20ee:	4829      	ldr	r0, [pc, #164]	; (2194 <spi_write_reg+0xf8>)
    20f0:	47b0      	blx	r6
    20f2:	200d      	movs	r0, #13
    20f4:	4b28      	ldr	r3, [pc, #160]	; (2198 <spi_write_reg+0xfc>)
    20f6:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    20f8:	2001      	movs	r0, #1
    20fa:	4e28      	ldr	r6, [pc, #160]	; (219c <spi_write_reg+0x100>)
    20fc:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    20fe:	2300      	movs	r3, #0
    2100:	9300      	str	r3, [sp, #0]
    2102:	2200      	movs	r2, #0
    2104:	2100      	movs	r1, #0
    2106:	20cf      	movs	r0, #207	; 0xcf
    2108:	4f1b      	ldr	r7, [pc, #108]	; (2178 <spi_write_reg+0xdc>)
    210a:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    210c:	20cf      	movs	r0, #207	; 0xcf
    210e:	4b1c      	ldr	r3, [pc, #112]	; (2180 <spi_write_reg+0xe4>)
    2110:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    2112:	22f0      	movs	r2, #240	; 0xf0
    2114:	0092      	lsls	r2, r2, #2
    2116:	491c      	ldr	r1, [pc, #112]	; (2188 <spi_write_reg+0xec>)
    2118:	481c      	ldr	r0, [pc, #112]	; (218c <spi_write_reg+0xf0>)
    211a:	4f1d      	ldr	r7, [pc, #116]	; (2190 <spi_write_reg+0xf4>)
    211c:	47b8      	blx	r7
    211e:	9b04      	ldr	r3, [sp, #16]
    2120:	9a03      	ldr	r2, [sp, #12]
    2122:	0029      	movs	r1, r5
    2124:	481e      	ldr	r0, [pc, #120]	; (21a0 <spi_write_reg+0x104>)
    2126:	47b8      	blx	r7
    2128:	200d      	movs	r0, #13
    212a:	4b1b      	ldr	r3, [pc, #108]	; (2198 <spi_write_reg+0xfc>)
    212c:	4798      	blx	r3
		nm_bsp_sleep(1);
    212e:	2001      	movs	r0, #1
    2130:	47b0      	blx	r6
    2132:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2134:	2d00      	cmp	r5, #0
    2136:	d016      	beq.n	2166 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2138:	464b      	mov	r3, r9
    213a:	9300      	str	r3, [sp, #0]
    213c:	2304      	movs	r3, #4
    213e:	9a04      	ldr	r2, [sp, #16]
    2140:	9f03      	ldr	r7, [sp, #12]
    2142:	0039      	movs	r1, r7
    2144:	9805      	ldr	r0, [sp, #20]
    2146:	47c0      	blx	r8
    2148:	0004      	movs	r4, r0
	if (result != N_OK) {
    214a:	2801      	cmp	r0, #1
    214c:	d0c3      	beq.n	20d6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    214e:	4a15      	ldr	r2, [pc, #84]	; (21a4 <spi_write_reg+0x108>)
    2150:	490d      	ldr	r1, [pc, #52]	; (2188 <spi_write_reg+0xec>)
    2152:	480e      	ldr	r0, [pc, #56]	; (218c <spi_write_reg+0xf0>)
    2154:	4e0e      	ldr	r6, [pc, #56]	; (2190 <spi_write_reg+0xf4>)
    2156:	47b0      	blx	r6
    2158:	0039      	movs	r1, r7
    215a:	4813      	ldr	r0, [pc, #76]	; (21a8 <spi_write_reg+0x10c>)
    215c:	47b0      	blx	r6
    215e:	200d      	movs	r0, #13
    2160:	4b0d      	ldr	r3, [pc, #52]	; (2198 <spi_write_reg+0xfc>)
    2162:	4798      	blx	r3
		goto _FAIL_;
    2164:	e7c8      	b.n	20f8 <spi_write_reg+0x5c>
	}

	return result;
}
    2166:	0020      	movs	r0, r4
    2168:	b006      	add	sp, #24
    216a:	bc1c      	pop	{r2, r3, r4}
    216c:	4690      	mov	r8, r2
    216e:	4699      	mov	r9, r3
    2170:	46a2      	mov	sl, r4
    2172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2174:	00009788 	.word	0x00009788
    2178:	00001ce1 	.word	0x00001ce1
    217c:	00009789 	.word	0x00009789
    2180:	00001e81 	.word	0x00001e81
    2184:	000003ad 	.word	0x000003ad
    2188:	000097d0 	.word	0x000097d0
    218c:	000090c8 	.word	0x000090c8
    2190:	00007e45 	.word	0x00007e45
    2194:	00009e08 	.word	0x00009e08
    2198:	00007e79 	.word	0x00007e79
    219c:	00000129 	.word	0x00000129
    21a0:	00009e40 	.word	0x00009e40
    21a4:	000003a7 	.word	0x000003a7
    21a8:	00009ddc 	.word	0x00009ddc

000021ac <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    21ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ae:	46de      	mov	lr, fp
    21b0:	4657      	mov	r7, sl
    21b2:	464e      	mov	r6, r9
    21b4:	4645      	mov	r5, r8
    21b6:	b5e0      	push	{r5, r6, r7, lr}
    21b8:	b087      	sub	sp, #28
    21ba:	9002      	str	r0, [sp, #8]
    21bc:	468b      	mov	fp, r1
    21be:	28ff      	cmp	r0, #255	; 0xff
    21c0:	d80f      	bhi.n	21e2 <spi_read_reg+0x36>
    21c2:	4b42      	ldr	r3, [pc, #264]	; (22cc <spi_read_reg+0x120>)
    21c4:	781f      	ldrb	r7, [r3, #0]
    21c6:	b2fb      	uxtb	r3, r7
    21c8:	9303      	str	r3, [sp, #12]
    21ca:	2300      	movs	r3, #0
    21cc:	22ff      	movs	r2, #255	; 0xff
    21ce:	9902      	ldr	r1, [sp, #8]
    21d0:	428a      	cmp	r2, r1
    21d2:	415b      	adcs	r3, r3
    21d4:	b2db      	uxtb	r3, r3
    21d6:	469a      	mov	sl, r3
    21d8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    21da:	4b3d      	ldr	r3, [pc, #244]	; (22d0 <spi_read_reg+0x124>)
    21dc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    21de:	46d1      	mov	r9, sl
    21e0:	e032      	b.n	2248 <spi_read_reg+0x9c>
    21e2:	4b3c      	ldr	r3, [pc, #240]	; (22d4 <spi_read_reg+0x128>)
    21e4:	781f      	ldrb	r7, [r3, #0]
    21e6:	e7ee      	b.n	21c6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    21e8:	9803      	ldr	r0, [sp, #12]
    21ea:	4b3b      	ldr	r3, [pc, #236]	; (22d8 <spi_read_reg+0x12c>)
    21ec:	4798      	blx	r3
    21ee:	0004      	movs	r4, r0
	if(result != N_OK) 
    21f0:	2801      	cmp	r0, #1
    21f2:	d040      	beq.n	2276 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    21f4:	2286      	movs	r2, #134	; 0x86
    21f6:	00d2      	lsls	r2, r2, #3
    21f8:	4938      	ldr	r1, [pc, #224]	; (22dc <spi_read_reg+0x130>)
    21fa:	4839      	ldr	r0, [pc, #228]	; (22e0 <spi_read_reg+0x134>)
    21fc:	4e39      	ldr	r6, [pc, #228]	; (22e4 <spi_read_reg+0x138>)
    21fe:	47b0      	blx	r6
    2200:	9902      	ldr	r1, [sp, #8]
    2202:	4839      	ldr	r0, [pc, #228]	; (22e8 <spi_read_reg+0x13c>)
    2204:	47b0      	blx	r6
    2206:	200d      	movs	r0, #13
    2208:	4b38      	ldr	r3, [pc, #224]	; (22ec <spi_read_reg+0x140>)
    220a:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    220c:	2001      	movs	r0, #1
    220e:	4e38      	ldr	r6, [pc, #224]	; (22f0 <spi_read_reg+0x144>)
    2210:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2212:	2300      	movs	r3, #0
    2214:	9300      	str	r3, [sp, #0]
    2216:	2200      	movs	r2, #0
    2218:	2100      	movs	r1, #0
    221a:	20cf      	movs	r0, #207	; 0xcf
    221c:	4f2c      	ldr	r7, [pc, #176]	; (22d0 <spi_read_reg+0x124>)
    221e:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2220:	20cf      	movs	r0, #207	; 0xcf
    2222:	4b2d      	ldr	r3, [pc, #180]	; (22d8 <spi_read_reg+0x12c>)
    2224:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    2226:	4a33      	ldr	r2, [pc, #204]	; (22f4 <spi_read_reg+0x148>)
    2228:	492c      	ldr	r1, [pc, #176]	; (22dc <spi_read_reg+0x130>)
    222a:	482d      	ldr	r0, [pc, #180]	; (22e0 <spi_read_reg+0x134>)
    222c:	4f2d      	ldr	r7, [pc, #180]	; (22e4 <spi_read_reg+0x138>)
    222e:	47b8      	blx	r7
    2230:	9a02      	ldr	r2, [sp, #8]
    2232:	0029      	movs	r1, r5
    2234:	4830      	ldr	r0, [pc, #192]	; (22f8 <spi_read_reg+0x14c>)
    2236:	47b8      	blx	r7
    2238:	200d      	movs	r0, #13
    223a:	4b2c      	ldr	r3, [pc, #176]	; (22ec <spi_read_reg+0x140>)
    223c:	4798      	blx	r3
		nm_bsp_sleep(1);
    223e:	2001      	movs	r0, #1
    2240:	47b0      	blx	r6
    2242:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2244:	2d00      	cmp	r5, #0
    2246:	d038      	beq.n	22ba <spi_read_reg+0x10e>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2248:	464b      	mov	r3, r9
    224a:	9300      	str	r3, [sp, #0]
    224c:	2304      	movs	r3, #4
    224e:	2200      	movs	r2, #0
    2250:	9f02      	ldr	r7, [sp, #8]
    2252:	0039      	movs	r1, r7
    2254:	9803      	ldr	r0, [sp, #12]
    2256:	47c0      	blx	r8
    2258:	0004      	movs	r4, r0
	if(result != N_OK) 
    225a:	2801      	cmp	r0, #1
    225c:	d0c4      	beq.n	21e8 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    225e:	4a27      	ldr	r2, [pc, #156]	; (22fc <spi_read_reg+0x150>)
    2260:	491e      	ldr	r1, [pc, #120]	; (22dc <spi_read_reg+0x130>)
    2262:	481f      	ldr	r0, [pc, #124]	; (22e0 <spi_read_reg+0x134>)
    2264:	4e1f      	ldr	r6, [pc, #124]	; (22e4 <spi_read_reg+0x138>)
    2266:	47b0      	blx	r6
    2268:	0039      	movs	r1, r7
    226a:	4825      	ldr	r0, [pc, #148]	; (2300 <spi_read_reg+0x154>)
    226c:	47b0      	blx	r6
    226e:	200d      	movs	r0, #13
    2270:	4b1e      	ldr	r3, [pc, #120]	; (22ec <spi_read_reg+0x140>)
    2272:	4798      	blx	r3
		goto _FAIL_;
    2274:	e7ca      	b.n	220c <spi_read_reg+0x60>
	result = spi_data_read(&tmp[0], 4, clockless);
    2276:	464a      	mov	r2, r9
    2278:	2104      	movs	r1, #4
    227a:	a805      	add	r0, sp, #20
    227c:	4b21      	ldr	r3, [pc, #132]	; (2304 <spi_read_reg+0x158>)
    227e:	4798      	blx	r3
    2280:	0004      	movs	r4, r0
	if(result != N_OK) 
    2282:	2801      	cmp	r0, #1
    2284:	d00c      	beq.n	22a0 <spi_read_reg+0xf4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2286:	2287      	movs	r2, #135	; 0x87
    2288:	00d2      	lsls	r2, r2, #3
    228a:	4914      	ldr	r1, [pc, #80]	; (22dc <spi_read_reg+0x130>)
    228c:	4814      	ldr	r0, [pc, #80]	; (22e0 <spi_read_reg+0x134>)
    228e:	4b15      	ldr	r3, [pc, #84]	; (22e4 <spi_read_reg+0x138>)
    2290:	4798      	blx	r3
    2292:	481d      	ldr	r0, [pc, #116]	; (2308 <spi_read_reg+0x15c>)
    2294:	4b1d      	ldr	r3, [pc, #116]	; (230c <spi_read_reg+0x160>)
    2296:	4798      	blx	r3
    2298:	200d      	movs	r0, #13
    229a:	4b14      	ldr	r3, [pc, #80]	; (22ec <spi_read_reg+0x140>)
    229c:	4798      	blx	r3
		goto _FAIL_;
    229e:	e7b5      	b.n	220c <spi_read_reg+0x60>
		((uint32)tmp[1] << 8) |
    22a0:	aa05      	add	r2, sp, #20
    22a2:	7853      	ldrb	r3, [r2, #1]
    22a4:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    22a6:	7891      	ldrb	r1, [r2, #2]
    22a8:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    22aa:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    22ac:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    22ae:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    22b0:	78d2      	ldrb	r2, [r2, #3]
    22b2:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    22b4:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    22b6:	465a      	mov	r2, fp
    22b8:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    22ba:	0020      	movs	r0, r4
    22bc:	b007      	add	sp, #28
    22be:	bc3c      	pop	{r2, r3, r4, r5}
    22c0:	4690      	mov	r8, r2
    22c2:	4699      	mov	r9, r3
    22c4:	46a2      	mov	sl, r4
    22c6:	46ab      	mov	fp, r5
    22c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	0000978a 	.word	0x0000978a
    22d0:	00001ce1 	.word	0x00001ce1
    22d4:	0000978b 	.word	0x0000978b
    22d8:	00001e81 	.word	0x00001e81
    22dc:	000097f0 	.word	0x000097f0
    22e0:	000090c8 	.word	0x000090c8
    22e4:	00007e45 	.word	0x00007e45
    22e8:	00009d70 	.word	0x00009d70
    22ec:	00007e79 	.word	0x00007e79
    22f0:	00000129 	.word	0x00000129
    22f4:	00000451 	.word	0x00000451
    22f8:	00009dc4 	.word	0x00009dc4
    22fc:	00000429 	.word	0x00000429
    2300:	00009d44 	.word	0x00009d44
    2304:	00001f55 	.word	0x00001f55
    2308:	00009da4 	.word	0x00009da4
    230c:	00007f61 	.word	0x00007f61

00002310 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    2310:	b510      	push	{r4, lr}
    2312:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2314:	2300      	movs	r3, #0
    2316:	9300      	str	r3, [sp, #0]
    2318:	2200      	movs	r2, #0
    231a:	2100      	movs	r1, #0
    231c:	20cf      	movs	r0, #207	; 0xcf
    231e:	4c04      	ldr	r4, [pc, #16]	; (2330 <nm_spi_reset+0x20>)
    2320:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    2322:	20cf      	movs	r0, #207	; 0xcf
    2324:	4b03      	ldr	r3, [pc, #12]	; (2334 <nm_spi_reset+0x24>)
    2326:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2328:	2000      	movs	r0, #0
    232a:	b002      	add	sp, #8
    232c:	bd10      	pop	{r4, pc}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	00001ce1 	.word	0x00001ce1
    2334:	00001e81 	.word	0x00001e81

00002338 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2338:	2200      	movs	r2, #0
    233a:	4b02      	ldr	r3, [pc, #8]	; (2344 <nm_spi_deinit+0xc>)
    233c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    233e:	2000      	movs	r0, #0
    2340:	4770      	bx	lr
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	200000a0 	.word	0x200000a0

00002348 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2348:	b500      	push	{lr}
    234a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    234c:	a901      	add	r1, sp, #4
    234e:	4b02      	ldr	r3, [pc, #8]	; (2358 <nm_spi_read_reg+0x10>)
    2350:	4798      	blx	r3

	return u32Val;
}
    2352:	9801      	ldr	r0, [sp, #4]
    2354:	b003      	add	sp, #12
    2356:	bd00      	pop	{pc}
    2358:	000021ad 	.word	0x000021ad

0000235c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    235c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    235e:	4b04      	ldr	r3, [pc, #16]	; (2370 <nm_spi_read_reg_with_ret+0x14>)
    2360:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2362:	2300      	movs	r3, #0
    2364:	2801      	cmp	r0, #1
    2366:	d101      	bne.n	236c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2368:	0018      	movs	r0, r3
    236a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    236c:	3b06      	subs	r3, #6
    236e:	e7fb      	b.n	2368 <nm_spi_read_reg_with_ret+0xc>
    2370:	000021ad 	.word	0x000021ad

00002374 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2374:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2376:	4b04      	ldr	r3, [pc, #16]	; (2388 <nm_spi_write_reg+0x14>)
    2378:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    237a:	2300      	movs	r3, #0
    237c:	2801      	cmp	r0, #1
    237e:	d101      	bne.n	2384 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2380:	0018      	movs	r0, r3
    2382:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2384:	3b06      	subs	r3, #6
    2386:	e7fb      	b.n	2380 <nm_spi_write_reg+0xc>
    2388:	0000209d 	.word	0x0000209d

0000238c <nm_spi_init>:
{
    238c:	b510      	push	{r4, lr}
    238e:	b082      	sub	sp, #8
	uint32 reg = 0;
    2390:	2300      	movs	r3, #0
    2392:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2394:	4a35      	ldr	r2, [pc, #212]	; (246c <nm_spi_init+0xe0>)
    2396:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2398:	4669      	mov	r1, sp
    239a:	4835      	ldr	r0, [pc, #212]	; (2470 <nm_spi_init+0xe4>)
    239c:	4b35      	ldr	r3, [pc, #212]	; (2474 <nm_spi_init+0xe8>)
    239e:	4798      	blx	r3
    23a0:	2800      	cmp	r0, #0
    23a2:	d028      	beq.n	23f6 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    23a4:	4b31      	ldr	r3, [pc, #196]	; (246c <nm_spi_init+0xe0>)
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d10d      	bne.n	23c8 <nm_spi_init+0x3c>
		reg &= ~0x70;
    23ac:	337c      	adds	r3, #124	; 0x7c
    23ae:	9900      	ldr	r1, [sp, #0]
    23b0:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    23b2:	3b2c      	subs	r3, #44	; 0x2c
    23b4:	4319      	orrs	r1, r3
    23b6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    23b8:	482d      	ldr	r0, [pc, #180]	; (2470 <nm_spi_init+0xe4>)
    23ba:	4b2f      	ldr	r3, [pc, #188]	; (2478 <nm_spi_init+0xec>)
    23bc:	4798      	blx	r3
    23be:	1e04      	subs	r4, r0, #0
    23c0:	d039      	beq.n	2436 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    23c2:	2201      	movs	r2, #1
    23c4:	4b29      	ldr	r3, [pc, #164]	; (246c <nm_spi_init+0xe0>)
    23c6:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    23c8:	a901      	add	r1, sp, #4
    23ca:	2080      	movs	r0, #128	; 0x80
    23cc:	0140      	lsls	r0, r0, #5
    23ce:	4b29      	ldr	r3, [pc, #164]	; (2474 <nm_spi_init+0xe8>)
    23d0:	4798      	blx	r3
    23d2:	2800      	cmp	r0, #0
    23d4:	d03b      	beq.n	244e <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    23d6:	4c26      	ldr	r4, [pc, #152]	; (2470 <nm_spi_init+0xe4>)
    23d8:	0020      	movs	r0, r4
    23da:	4b28      	ldr	r3, [pc, #160]	; (247c <nm_spi_init+0xf0>)
    23dc:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    23de:	2370      	movs	r3, #112	; 0x70
    23e0:	0001      	movs	r1, r0
    23e2:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    23e4:	2050      	movs	r0, #80	; 0x50
    23e6:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    23e8:	0020      	movs	r0, r4
    23ea:	4b25      	ldr	r3, [pc, #148]	; (2480 <nm_spi_init+0xf4>)
    23ec:	4798      	blx	r3
	return M2M_SUCCESS;
    23ee:	2400      	movs	r4, #0
}
    23f0:	0020      	movs	r0, r4
    23f2:	b002      	add	sp, #8
    23f4:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    23f6:	2201      	movs	r2, #1
    23f8:	4b1c      	ldr	r3, [pc, #112]	; (246c <nm_spi_init+0xe0>)
    23fa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    23fc:	4a21      	ldr	r2, [pc, #132]	; (2484 <nm_spi_init+0xf8>)
    23fe:	4922      	ldr	r1, [pc, #136]	; (2488 <nm_spi_init+0xfc>)
    2400:	4822      	ldr	r0, [pc, #136]	; (248c <nm_spi_init+0x100>)
    2402:	4b23      	ldr	r3, [pc, #140]	; (2490 <nm_spi_init+0x104>)
    2404:	4798      	blx	r3
    2406:	4823      	ldr	r0, [pc, #140]	; (2494 <nm_spi_init+0x108>)
    2408:	4b23      	ldr	r3, [pc, #140]	; (2498 <nm_spi_init+0x10c>)
    240a:	4798      	blx	r3
    240c:	200d      	movs	r0, #13
    240e:	4b23      	ldr	r3, [pc, #140]	; (249c <nm_spi_init+0x110>)
    2410:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2412:	4669      	mov	r1, sp
    2414:	4816      	ldr	r0, [pc, #88]	; (2470 <nm_spi_init+0xe4>)
    2416:	4b17      	ldr	r3, [pc, #92]	; (2474 <nm_spi_init+0xe8>)
    2418:	4798      	blx	r3
    241a:	1e04      	subs	r4, r0, #0
    241c:	d1c2      	bne.n	23a4 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    241e:	4a20      	ldr	r2, [pc, #128]	; (24a0 <nm_spi_init+0x114>)
    2420:	4919      	ldr	r1, [pc, #100]	; (2488 <nm_spi_init+0xfc>)
    2422:	481a      	ldr	r0, [pc, #104]	; (248c <nm_spi_init+0x100>)
    2424:	4b1a      	ldr	r3, [pc, #104]	; (2490 <nm_spi_init+0x104>)
    2426:	4798      	blx	r3
    2428:	481e      	ldr	r0, [pc, #120]	; (24a4 <nm_spi_init+0x118>)
    242a:	4b1b      	ldr	r3, [pc, #108]	; (2498 <nm_spi_init+0x10c>)
    242c:	4798      	blx	r3
    242e:	200d      	movs	r0, #13
    2430:	4b1a      	ldr	r3, [pc, #104]	; (249c <nm_spi_init+0x110>)
    2432:	4798      	blx	r3
			return 0;
    2434:	e7dc      	b.n	23f0 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2436:	4a1c      	ldr	r2, [pc, #112]	; (24a8 <nm_spi_init+0x11c>)
    2438:	4913      	ldr	r1, [pc, #76]	; (2488 <nm_spi_init+0xfc>)
    243a:	4814      	ldr	r0, [pc, #80]	; (248c <nm_spi_init+0x100>)
    243c:	4b14      	ldr	r3, [pc, #80]	; (2490 <nm_spi_init+0x104>)
    243e:	4798      	blx	r3
    2440:	481a      	ldr	r0, [pc, #104]	; (24ac <nm_spi_init+0x120>)
    2442:	4b15      	ldr	r3, [pc, #84]	; (2498 <nm_spi_init+0x10c>)
    2444:	4798      	blx	r3
    2446:	200d      	movs	r0, #13
    2448:	4b14      	ldr	r3, [pc, #80]	; (249c <nm_spi_init+0x110>)
    244a:	4798      	blx	r3
			return 0;
    244c:	e7d0      	b.n	23f0 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    244e:	4a18      	ldr	r2, [pc, #96]	; (24b0 <nm_spi_init+0x124>)
    2450:	490d      	ldr	r1, [pc, #52]	; (2488 <nm_spi_init+0xfc>)
    2452:	480e      	ldr	r0, [pc, #56]	; (248c <nm_spi_init+0x100>)
    2454:	4b0e      	ldr	r3, [pc, #56]	; (2490 <nm_spi_init+0x104>)
    2456:	4798      	blx	r3
    2458:	4816      	ldr	r0, [pc, #88]	; (24b4 <nm_spi_init+0x128>)
    245a:	4b0f      	ldr	r3, [pc, #60]	; (2498 <nm_spi_init+0x10c>)
    245c:	4798      	blx	r3
    245e:	200d      	movs	r0, #13
    2460:	4b0e      	ldr	r3, [pc, #56]	; (249c <nm_spi_init+0x110>)
    2462:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2464:	2406      	movs	r4, #6
    2466:	4264      	negs	r4, r4
    2468:	e7c2      	b.n	23f0 <nm_spi_init+0x64>
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	200000a0 	.word	0x200000a0
    2470:	0000e824 	.word	0x0000e824
    2474:	000021ad 	.word	0x000021ad
    2478:	0000209d 	.word	0x0000209d
    247c:	00002349 	.word	0x00002349
    2480:	00002375 	.word	0x00002375
    2484:	000004dc 	.word	0x000004dc
    2488:	0000980c 	.word	0x0000980c
    248c:	000090c8 	.word	0x000090c8
    2490:	00007e45 	.word	0x00007e45
    2494:	00009918 	.word	0x00009918
    2498:	00007f61 	.word	0x00007f61
    249c:	00007e79 	.word	0x00007e79
    24a0:	000004df 	.word	0x000004df
    24a4:	00009968 	.word	0x00009968
    24a8:	000004e9 	.word	0x000004e9
    24ac:	00009994 	.word	0x00009994
    24b0:	000004f3 	.word	0x000004f3
    24b4:	000099c8 	.word	0x000099c8

000024b8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    24b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ba:	46de      	mov	lr, fp
    24bc:	4657      	mov	r7, sl
    24be:	464e      	mov	r6, r9
    24c0:	4645      	mov	r5, r8
    24c2:	b5e0      	push	{r5, r6, r7, lr}
    24c4:	b087      	sub	sp, #28
    24c6:	9002      	str	r0, [sp, #8]
    24c8:	9103      	str	r1, [sp, #12]
    24ca:	0016      	movs	r6, r2
    24cc:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    24ce:	2300      	movs	r3, #0
    24d0:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    24d2:	2400      	movs	r4, #0
    24d4:	4b3f      	ldr	r3, [pc, #252]	; (25d4 <nm_spi_read_block+0x11c>)
    24d6:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    24d8:	46a9      	mov	r9, r5
    24da:	e038      	b.n	254e <nm_spi_read_block+0x96>
		single_byte_workaround = 1;
    24dc:	2301      	movs	r3, #1
    24de:	469b      	mov	fp, r3
		size = 2;
    24e0:	3601      	adds	r6, #1
    24e2:	e036      	b.n	2552 <nm_spi_read_block+0x9a>
	result = spi_cmd_rsp(cmd);
    24e4:	20c8      	movs	r0, #200	; 0xc8
    24e6:	4b3c      	ldr	r3, [pc, #240]	; (25d8 <nm_spi_read_block+0x120>)
    24e8:	4798      	blx	r3
	if (result != N_OK) {
    24ea:	2801      	cmp	r0, #1
    24ec:	d046      	beq.n	257c <nm_spi_read_block+0xc4>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    24ee:	228f      	movs	r2, #143	; 0x8f
    24f0:	00d2      	lsls	r2, r2, #3
    24f2:	493a      	ldr	r1, [pc, #232]	; (25dc <nm_spi_read_block+0x124>)
    24f4:	483a      	ldr	r0, [pc, #232]	; (25e0 <nm_spi_read_block+0x128>)
    24f6:	4f3b      	ldr	r7, [pc, #236]	; (25e4 <nm_spi_read_block+0x12c>)
    24f8:	47b8      	blx	r7
    24fa:	9902      	ldr	r1, [sp, #8]
    24fc:	483a      	ldr	r0, [pc, #232]	; (25e8 <nm_spi_read_block+0x130>)
    24fe:	47b8      	blx	r7
    2500:	200d      	movs	r0, #13
    2502:	4b3a      	ldr	r3, [pc, #232]	; (25ec <nm_spi_read_block+0x134>)
    2504:	4798      	blx	r3
		nm_bsp_sleep(1);
    2506:	2001      	movs	r0, #1
    2508:	4f39      	ldr	r7, [pc, #228]	; (25f0 <nm_spi_read_block+0x138>)
    250a:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    250c:	9400      	str	r4, [sp, #0]
    250e:	0023      	movs	r3, r4
    2510:	0022      	movs	r2, r4
    2512:	0021      	movs	r1, r4
    2514:	20cf      	movs	r0, #207	; 0xcf
    2516:	4d2f      	ldr	r5, [pc, #188]	; (25d4 <nm_spi_read_block+0x11c>)
    2518:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    251a:	20cf      	movs	r0, #207	; 0xcf
    251c:	4b2e      	ldr	r3, [pc, #184]	; (25d8 <nm_spi_read_block+0x120>)
    251e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    2520:	4a34      	ldr	r2, [pc, #208]	; (25f4 <nm_spi_read_block+0x13c>)
    2522:	492e      	ldr	r1, [pc, #184]	; (25dc <nm_spi_read_block+0x124>)
    2524:	482e      	ldr	r0, [pc, #184]	; (25e0 <nm_spi_read_block+0x128>)
    2526:	4b2f      	ldr	r3, [pc, #188]	; (25e4 <nm_spi_read_block+0x12c>)
    2528:	469a      	mov	sl, r3
    252a:	4798      	blx	r3
    252c:	0033      	movs	r3, r6
    252e:	9a02      	ldr	r2, [sp, #8]
    2530:	4649      	mov	r1, r9
    2532:	4831      	ldr	r0, [pc, #196]	; (25f8 <nm_spi_read_block+0x140>)
    2534:	47d0      	blx	sl
    2536:	200d      	movs	r0, #13
    2538:	4b2c      	ldr	r3, [pc, #176]	; (25ec <nm_spi_read_block+0x134>)
    253a:	4798      	blx	r3
		nm_bsp_sleep(1);
    253c:	2001      	movs	r0, #1
    253e:	47b8      	blx	r7
    2540:	2301      	movs	r3, #1
    2542:	425b      	negs	r3, r3
    2544:	469c      	mov	ip, r3
    2546:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    2548:	464b      	mov	r3, r9
    254a:	2b00      	cmp	r3, #0
    254c:	d039      	beq.n	25c2 <nm_spi_read_block+0x10a>
	if (size == 1)
    254e:	2e01      	cmp	r6, #1
    2550:	d0c4      	beq.n	24dc <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    2552:	9400      	str	r4, [sp, #0]
    2554:	0033      	movs	r3, r6
    2556:	0022      	movs	r2, r4
    2558:	9d02      	ldr	r5, [sp, #8]
    255a:	0029      	movs	r1, r5
    255c:	20c8      	movs	r0, #200	; 0xc8
    255e:	47c0      	blx	r8
	if (result != N_OK) {
    2560:	2801      	cmp	r0, #1
    2562:	d0bf      	beq.n	24e4 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2564:	4a25      	ldr	r2, [pc, #148]	; (25fc <nm_spi_read_block+0x144>)
    2566:	491d      	ldr	r1, [pc, #116]	; (25dc <nm_spi_read_block+0x124>)
    2568:	481d      	ldr	r0, [pc, #116]	; (25e0 <nm_spi_read_block+0x128>)
    256a:	4f1e      	ldr	r7, [pc, #120]	; (25e4 <nm_spi_read_block+0x12c>)
    256c:	47b8      	blx	r7
    256e:	0029      	movs	r1, r5
    2570:	4823      	ldr	r0, [pc, #140]	; (2600 <nm_spi_read_block+0x148>)
    2572:	47b8      	blx	r7
    2574:	200d      	movs	r0, #13
    2576:	4b1d      	ldr	r3, [pc, #116]	; (25ec <nm_spi_read_block+0x134>)
    2578:	4798      	blx	r3
    257a:	e7c4      	b.n	2506 <nm_spi_read_block+0x4e>
	if (single_byte_workaround)
    257c:	465b      	mov	r3, fp
    257e:	2b00      	cmp	r3, #0
    2580:	d017      	beq.n	25b2 <nm_spi_read_block+0xfa>
		result = spi_data_read(tmp, size,0);
    2582:	af05      	add	r7, sp, #20
    2584:	0022      	movs	r2, r4
    2586:	0031      	movs	r1, r6
    2588:	0038      	movs	r0, r7
    258a:	4b1e      	ldr	r3, [pc, #120]	; (2604 <nm_spi_read_block+0x14c>)
    258c:	4798      	blx	r3
		buf[0] = tmp[0];
    258e:	783b      	ldrb	r3, [r7, #0]
    2590:	9a03      	ldr	r2, [sp, #12]
    2592:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    2594:	2801      	cmp	r0, #1
    2596:	d012      	beq.n	25be <nm_spi_read_block+0x106>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2598:	2291      	movs	r2, #145	; 0x91
    259a:	00d2      	lsls	r2, r2, #3
    259c:	490f      	ldr	r1, [pc, #60]	; (25dc <nm_spi_read_block+0x124>)
    259e:	4810      	ldr	r0, [pc, #64]	; (25e0 <nm_spi_read_block+0x128>)
    25a0:	4b10      	ldr	r3, [pc, #64]	; (25e4 <nm_spi_read_block+0x12c>)
    25a2:	4798      	blx	r3
    25a4:	4818      	ldr	r0, [pc, #96]	; (2608 <nm_spi_read_block+0x150>)
    25a6:	4b19      	ldr	r3, [pc, #100]	; (260c <nm_spi_read_block+0x154>)
    25a8:	4798      	blx	r3
    25aa:	200d      	movs	r0, #13
    25ac:	4b0f      	ldr	r3, [pc, #60]	; (25ec <nm_spi_read_block+0x134>)
    25ae:	4798      	blx	r3
    25b0:	e7a9      	b.n	2506 <nm_spi_read_block+0x4e>
		result = spi_data_read(buf, size,0);
    25b2:	0022      	movs	r2, r4
    25b4:	0031      	movs	r1, r6
    25b6:	9803      	ldr	r0, [sp, #12]
    25b8:	4b12      	ldr	r3, [pc, #72]	; (2604 <nm_spi_read_block+0x14c>)
    25ba:	4798      	blx	r3
    25bc:	e7ea      	b.n	2594 <nm_spi_read_block+0xdc>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    25be:	2000      	movs	r0, #0
    25c0:	e001      	b.n	25c6 <nm_spi_read_block+0x10e>
	else s8Ret = M2M_ERR_BUS_FAIL;
    25c2:	2006      	movs	r0, #6
    25c4:	4240      	negs	r0, r0

	return s8Ret;
}
    25c6:	b007      	add	sp, #28
    25c8:	bc3c      	pop	{r2, r3, r4, r5}
    25ca:	4690      	mov	r8, r2
    25cc:	4699      	mov	r9, r3
    25ce:	46a2      	mov	sl, r4
    25d0:	46ab      	mov	fp, r5
    25d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d4:	00001ce1 	.word	0x00001ce1
    25d8:	00001e81 	.word	0x00001e81
    25dc:	00009800 	.word	0x00009800
    25e0:	000090c8 	.word	0x000090c8
    25e4:	00007e45 	.word	0x00007e45
    25e8:	00009a1c 	.word	0x00009a1c
    25ec:	00007e79 	.word	0x00007e79
    25f0:	00000129 	.word	0x00000129
    25f4:	00000499 	.word	0x00000499
    25f8:	00009a7c 	.word	0x00009a7c
    25fc:	00000472 	.word	0x00000472
    2600:	000099ec 	.word	0x000099ec
    2604:	00001f55 	.word	0x00001f55
    2608:	00009a54 	.word	0x00009a54
    260c:	00007f61 	.word	0x00007f61

00002610 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2610:	b5f0      	push	{r4, r5, r6, r7, lr}
    2612:	46de      	mov	lr, fp
    2614:	4647      	mov	r7, r8
    2616:	b580      	push	{r7, lr}
    2618:	b089      	sub	sp, #36	; 0x24
    261a:	9004      	str	r0, [sp, #16]
    261c:	468b      	mov	fp, r1
    261e:	9203      	str	r2, [sp, #12]
    2620:	260a      	movs	r6, #10
    2622:	2780      	movs	r7, #128	; 0x80
    2624:	01bf      	lsls	r7, r7, #6
    2626:	466b      	mov	r3, sp
    2628:	82df      	strh	r7, [r3, #22]
    262a:	0035      	movs	r5, r6
    262c:	e02d      	b.n	268a <nm_spi_write_block+0x7a>
		size = 2;
    262e:	3301      	adds	r3, #1
    2630:	9303      	str	r3, [sp, #12]
    2632:	e02d      	b.n	2690 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    2634:	4a82      	ldr	r2, [pc, #520]	; (2840 <nm_spi_write_block+0x230>)
    2636:	4983      	ldr	r1, [pc, #524]	; (2844 <nm_spi_write_block+0x234>)
    2638:	4883      	ldr	r0, [pc, #524]	; (2848 <nm_spi_write_block+0x238>)
    263a:	4c84      	ldr	r4, [pc, #528]	; (284c <nm_spi_write_block+0x23c>)
    263c:	47a0      	blx	r4
    263e:	0031      	movs	r1, r6
    2640:	4883      	ldr	r0, [pc, #524]	; (2850 <nm_spi_write_block+0x240>)
    2642:	47a0      	blx	r4
    2644:	200d      	movs	r0, #13
    2646:	4b83      	ldr	r3, [pc, #524]	; (2854 <nm_spi_write_block+0x244>)
    2648:	4798      	blx	r3
		nm_bsp_sleep(1);
    264a:	2001      	movs	r0, #1
    264c:	4c82      	ldr	r4, [pc, #520]	; (2858 <nm_spi_write_block+0x248>)
    264e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2650:	2300      	movs	r3, #0
    2652:	9300      	str	r3, [sp, #0]
    2654:	2200      	movs	r2, #0
    2656:	2100      	movs	r1, #0
    2658:	20cf      	movs	r0, #207	; 0xcf
    265a:	4e80      	ldr	r6, [pc, #512]	; (285c <nm_spi_write_block+0x24c>)
    265c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    265e:	20cf      	movs	r0, #207	; 0xcf
    2660:	4b7f      	ldr	r3, [pc, #508]	; (2860 <nm_spi_write_block+0x250>)
    2662:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    2664:	4a7f      	ldr	r2, [pc, #508]	; (2864 <nm_spi_write_block+0x254>)
    2666:	4977      	ldr	r1, [pc, #476]	; (2844 <nm_spi_write_block+0x234>)
    2668:	4877      	ldr	r0, [pc, #476]	; (2848 <nm_spi_write_block+0x238>)
    266a:	4e78      	ldr	r6, [pc, #480]	; (284c <nm_spi_write_block+0x23c>)
    266c:	47b0      	blx	r6
    266e:	9b03      	ldr	r3, [sp, #12]
    2670:	9a04      	ldr	r2, [sp, #16]
    2672:	0029      	movs	r1, r5
    2674:	487c      	ldr	r0, [pc, #496]	; (2868 <nm_spi_write_block+0x258>)
    2676:	47b0      	blx	r6
    2678:	200d      	movs	r0, #13
    267a:	4b76      	ldr	r3, [pc, #472]	; (2854 <nm_spi_write_block+0x244>)
    267c:	4798      	blx	r3
		nm_bsp_sleep(1);
    267e:	2001      	movs	r0, #1
    2680:	47a0      	blx	r4
    2682:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    2684:	2d00      	cmp	r5, #0
    2686:	d100      	bne.n	268a <nm_spi_write_block+0x7a>
    2688:	e0d2      	b.n	2830 <nm_spi_write_block+0x220>
	if (size == 1)
    268a:	9b03      	ldr	r3, [sp, #12]
    268c:	2b01      	cmp	r3, #1
    268e:	d0ce      	beq.n	262e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    2690:	2300      	movs	r3, #0
    2692:	9300      	str	r3, [sp, #0]
    2694:	9b03      	ldr	r3, [sp, #12]
    2696:	2200      	movs	r2, #0
    2698:	9e04      	ldr	r6, [sp, #16]
    269a:	0031      	movs	r1, r6
    269c:	20c7      	movs	r0, #199	; 0xc7
    269e:	4c6f      	ldr	r4, [pc, #444]	; (285c <nm_spi_write_block+0x24c>)
    26a0:	47a0      	blx	r4
	if (result != N_OK) {
    26a2:	2801      	cmp	r0, #1
    26a4:	d1c6      	bne.n	2634 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    26a6:	20c7      	movs	r0, #199	; 0xc7
    26a8:	4b6d      	ldr	r3, [pc, #436]	; (2860 <nm_spi_write_block+0x250>)
    26aa:	4798      	blx	r3
	if (result != N_OK) {
    26ac:	2801      	cmp	r0, #1
    26ae:	d00b      	beq.n	26c8 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    26b0:	4a6e      	ldr	r2, [pc, #440]	; (286c <nm_spi_write_block+0x25c>)
    26b2:	4964      	ldr	r1, [pc, #400]	; (2844 <nm_spi_write_block+0x234>)
    26b4:	4864      	ldr	r0, [pc, #400]	; (2848 <nm_spi_write_block+0x238>)
    26b6:	4c65      	ldr	r4, [pc, #404]	; (284c <nm_spi_write_block+0x23c>)
    26b8:	47a0      	blx	r4
    26ba:	9904      	ldr	r1, [sp, #16]
    26bc:	486c      	ldr	r0, [pc, #432]	; (2870 <nm_spi_write_block+0x260>)
    26be:	47a0      	blx	r4
    26c0:	200d      	movs	r0, #13
    26c2:	4b64      	ldr	r3, [pc, #400]	; (2854 <nm_spi_write_block+0x244>)
    26c4:	4798      	blx	r3
    26c6:	e7c0      	b.n	264a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    26c8:	2200      	movs	r2, #0
    26ca:	ab07      	add	r3, sp, #28
    26cc:	801a      	strh	r2, [r3, #0]
    26ce:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    26d0:	2600      	movs	r6, #0
				order = 0x1;
    26d2:	46a8      	mov	r8, r5
    26d4:	0035      	movs	r5, r6
    26d6:	0026      	movs	r6, r4
    26d8:	e021      	b.n	271e <nm_spi_write_block+0x10e>
				order = 0x2;
    26da:	2300      	movs	r3, #0
    26dc:	42b7      	cmp	r7, r6
    26de:	415b      	adcs	r3, r3
    26e0:	3302      	adds	r3, #2
		cmd |= order;
    26e2:	200b      	movs	r0, #11
    26e4:	aa04      	add	r2, sp, #16
    26e6:	4694      	mov	ip, r2
    26e8:	4460      	add	r0, ip
    26ea:	2210      	movs	r2, #16
    26ec:	4252      	negs	r2, r2
    26ee:	4313      	orrs	r3, r2
    26f0:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    26f2:	2101      	movs	r1, #1
    26f4:	4b5f      	ldr	r3, [pc, #380]	; (2874 <nm_spi_write_block+0x264>)
    26f6:	4798      	blx	r3
    26f8:	2800      	cmp	r0, #0
    26fa:	d11d      	bne.n	2738 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    26fc:	465b      	mov	r3, fp
    26fe:	1958      	adds	r0, r3, r5
    2700:	0021      	movs	r1, r4
    2702:	4b5c      	ldr	r3, [pc, #368]	; (2874 <nm_spi_write_block+0x264>)
    2704:	4798      	blx	r3
    2706:	2800      	cmp	r0, #0
    2708:	d12e      	bne.n	2768 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    270a:	4b5b      	ldr	r3, [pc, #364]	; (2878 <nm_spi_write_block+0x268>)
    270c:	781b      	ldrb	r3, [r3, #0]
    270e:	2b00      	cmp	r3, #0
    2710:	d037      	beq.n	2782 <nm_spi_write_block+0x172>
		ix += nbytes;
    2712:	1965      	adds	r5, r4, r5
    2714:	b22d      	sxth	r5, r5
		sz -= nbytes;
    2716:	1b36      	subs	r6, r6, r4
    2718:	b2b6      	uxth	r6, r6
	} while (sz);
    271a:	2e00      	cmp	r6, #0
    271c:	d052      	beq.n	27c4 <nm_spi_write_block+0x1b4>
    271e:	1c34      	adds	r4, r6, #0
    2720:	42be      	cmp	r6, r7
    2722:	d901      	bls.n	2728 <nm_spi_write_block+0x118>
    2724:	466b      	mov	r3, sp
    2726:	8adc      	ldrh	r4, [r3, #22]
    2728:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    272a:	2d00      	cmp	r5, #0
    272c:	d1d5      	bne.n	26da <nm_spi_write_block+0xca>
				order = 0x3;
    272e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    2730:	42be      	cmp	r6, r7
    2732:	d9d6      	bls.n	26e2 <nm_spi_write_block+0xd2>
				order = 0x1;
    2734:	3b02      	subs	r3, #2
    2736:	e7d4      	b.n	26e2 <nm_spi_write_block+0xd2>
    2738:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    273a:	4a50      	ldr	r2, [pc, #320]	; (287c <nm_spi_write_block+0x26c>)
    273c:	4950      	ldr	r1, [pc, #320]	; (2880 <nm_spi_write_block+0x270>)
    273e:	4842      	ldr	r0, [pc, #264]	; (2848 <nm_spi_write_block+0x238>)
    2740:	4b42      	ldr	r3, [pc, #264]	; (284c <nm_spi_write_block+0x23c>)
    2742:	4798      	blx	r3
    2744:	484f      	ldr	r0, [pc, #316]	; (2884 <nm_spi_write_block+0x274>)
    2746:	4b50      	ldr	r3, [pc, #320]	; (2888 <nm_spi_write_block+0x278>)
    2748:	4798      	blx	r3
    274a:	200d      	movs	r0, #13
    274c:	4b41      	ldr	r3, [pc, #260]	; (2854 <nm_spi_write_block+0x244>)
    274e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2750:	4a4e      	ldr	r2, [pc, #312]	; (288c <nm_spi_write_block+0x27c>)
    2752:	493c      	ldr	r1, [pc, #240]	; (2844 <nm_spi_write_block+0x234>)
    2754:	483c      	ldr	r0, [pc, #240]	; (2848 <nm_spi_write_block+0x238>)
    2756:	4b3d      	ldr	r3, [pc, #244]	; (284c <nm_spi_write_block+0x23c>)
    2758:	4798      	blx	r3
    275a:	484d      	ldr	r0, [pc, #308]	; (2890 <nm_spi_write_block+0x280>)
    275c:	4b4a      	ldr	r3, [pc, #296]	; (2888 <nm_spi_write_block+0x278>)
    275e:	4798      	blx	r3
    2760:	200d      	movs	r0, #13
    2762:	4b3c      	ldr	r3, [pc, #240]	; (2854 <nm_spi_write_block+0x244>)
    2764:	4798      	blx	r3
    2766:	e770      	b.n	264a <nm_spi_write_block+0x3a>
    2768:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    276a:	4a4a      	ldr	r2, [pc, #296]	; (2894 <nm_spi_write_block+0x284>)
    276c:	4944      	ldr	r1, [pc, #272]	; (2880 <nm_spi_write_block+0x270>)
    276e:	4836      	ldr	r0, [pc, #216]	; (2848 <nm_spi_write_block+0x238>)
    2770:	4b36      	ldr	r3, [pc, #216]	; (284c <nm_spi_write_block+0x23c>)
    2772:	4798      	blx	r3
    2774:	4848      	ldr	r0, [pc, #288]	; (2898 <nm_spi_write_block+0x288>)
    2776:	4b44      	ldr	r3, [pc, #272]	; (2888 <nm_spi_write_block+0x278>)
    2778:	4798      	blx	r3
    277a:	200d      	movs	r0, #13
    277c:	4b35      	ldr	r3, [pc, #212]	; (2854 <nm_spi_write_block+0x244>)
    277e:	4798      	blx	r3
    2780:	e7e6      	b.n	2750 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2782:	2102      	movs	r1, #2
    2784:	a807      	add	r0, sp, #28
    2786:	4b3b      	ldr	r3, [pc, #236]	; (2874 <nm_spi_write_block+0x264>)
    2788:	4798      	blx	r3
    278a:	2800      	cmp	r0, #0
    278c:	d0c1      	beq.n	2712 <nm_spi_write_block+0x102>
    278e:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    2790:	22dd      	movs	r2, #221	; 0xdd
    2792:	0092      	lsls	r2, r2, #2
    2794:	493a      	ldr	r1, [pc, #232]	; (2880 <nm_spi_write_block+0x270>)
    2796:	482c      	ldr	r0, [pc, #176]	; (2848 <nm_spi_write_block+0x238>)
    2798:	4b2c      	ldr	r3, [pc, #176]	; (284c <nm_spi_write_block+0x23c>)
    279a:	4798      	blx	r3
    279c:	483f      	ldr	r0, [pc, #252]	; (289c <nm_spi_write_block+0x28c>)
    279e:	4b3a      	ldr	r3, [pc, #232]	; (2888 <nm_spi_write_block+0x278>)
    27a0:	4798      	blx	r3
    27a2:	200d      	movs	r0, #13
    27a4:	4b2b      	ldr	r3, [pc, #172]	; (2854 <nm_spi_write_block+0x244>)
    27a6:	4798      	blx	r3
    27a8:	e7d2      	b.n	2750 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    27aa:	2248      	movs	r2, #72	; 0x48
    27ac:	32ff      	adds	r2, #255	; 0xff
    27ae:	493c      	ldr	r1, [pc, #240]	; (28a0 <nm_spi_write_block+0x290>)
    27b0:	4825      	ldr	r0, [pc, #148]	; (2848 <nm_spi_write_block+0x238>)
    27b2:	4b26      	ldr	r3, [pc, #152]	; (284c <nm_spi_write_block+0x23c>)
    27b4:	4798      	blx	r3
    27b6:	483b      	ldr	r0, [pc, #236]	; (28a4 <nm_spi_write_block+0x294>)
    27b8:	4b33      	ldr	r3, [pc, #204]	; (2888 <nm_spi_write_block+0x278>)
    27ba:	4798      	blx	r3
    27bc:	200d      	movs	r0, #13
    27be:	4b25      	ldr	r3, [pc, #148]	; (2854 <nm_spi_write_block+0x244>)
    27c0:	4798      	blx	r3
    27c2:	e027      	b.n	2814 <nm_spi_write_block+0x204>
    27c4:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    27c6:	4b2c      	ldr	r3, [pc, #176]	; (2878 <nm_spi_write_block+0x268>)
    27c8:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    27ca:	1e63      	subs	r3, r4, #1
    27cc:	419c      	sbcs	r4, r3
    27ce:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    27d0:	b2a1      	uxth	r1, r4
    27d2:	a807      	add	r0, sp, #28
    27d4:	4b34      	ldr	r3, [pc, #208]	; (28a8 <nm_spi_write_block+0x298>)
    27d6:	4798      	blx	r3
    27d8:	2800      	cmp	r0, #0
    27da:	d1e6      	bne.n	27aa <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    27dc:	ab08      	add	r3, sp, #32
    27de:	191b      	adds	r3, r3, r4
    27e0:	3b05      	subs	r3, #5
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d106      	bne.n	27f6 <nm_spi_write_block+0x1e6>
    27e8:	ab08      	add	r3, sp, #32
    27ea:	469c      	mov	ip, r3
    27ec:	4464      	add	r4, ip
    27ee:	3c06      	subs	r4, #6
    27f0:	7823      	ldrb	r3, [r4, #0]
    27f2:	2bc3      	cmp	r3, #195	; 0xc3
    27f4:	d01a      	beq.n	282c <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    27f6:	22a7      	movs	r2, #167	; 0xa7
    27f8:	0052      	lsls	r2, r2, #1
    27fa:	4929      	ldr	r1, [pc, #164]	; (28a0 <nm_spi_write_block+0x290>)
    27fc:	4812      	ldr	r0, [pc, #72]	; (2848 <nm_spi_write_block+0x238>)
    27fe:	4c13      	ldr	r4, [pc, #76]	; (284c <nm_spi_write_block+0x23c>)
    2800:	47a0      	blx	r4
    2802:	a907      	add	r1, sp, #28
    2804:	788b      	ldrb	r3, [r1, #2]
    2806:	784a      	ldrb	r2, [r1, #1]
    2808:	7809      	ldrb	r1, [r1, #0]
    280a:	4828      	ldr	r0, [pc, #160]	; (28ac <nm_spi_write_block+0x29c>)
    280c:	47a0      	blx	r4
    280e:	200d      	movs	r0, #13
    2810:	4b10      	ldr	r3, [pc, #64]	; (2854 <nm_spi_write_block+0x244>)
    2812:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2814:	4a26      	ldr	r2, [pc, #152]	; (28b0 <nm_spi_write_block+0x2a0>)
    2816:	490b      	ldr	r1, [pc, #44]	; (2844 <nm_spi_write_block+0x234>)
    2818:	480b      	ldr	r0, [pc, #44]	; (2848 <nm_spi_write_block+0x238>)
    281a:	4b0c      	ldr	r3, [pc, #48]	; (284c <nm_spi_write_block+0x23c>)
    281c:	4798      	blx	r3
    281e:	481c      	ldr	r0, [pc, #112]	; (2890 <nm_spi_write_block+0x280>)
    2820:	4b19      	ldr	r3, [pc, #100]	; (2888 <nm_spi_write_block+0x278>)
    2822:	4798      	blx	r3
    2824:	200d      	movs	r0, #13
    2826:	4b0b      	ldr	r3, [pc, #44]	; (2854 <nm_spi_write_block+0x244>)
    2828:	4798      	blx	r3
    282a:	e70e      	b.n	264a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    282c:	2000      	movs	r0, #0
    282e:	e001      	b.n	2834 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2830:	2006      	movs	r0, #6
    2832:	4240      	negs	r0, r0

	return s8Ret;
}
    2834:	b009      	add	sp, #36	; 0x24
    2836:	bc0c      	pop	{r2, r3}
    2838:	4690      	mov	r8, r2
    283a:	469b      	mov	fp, r3
    283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	000003db 	.word	0x000003db
    2844:	000097e0 	.word	0x000097e0
    2848:	000090c8 	.word	0x000090c8
    284c:	00007e45 	.word	0x00007e45
    2850:	00009a98 	.word	0x00009a98
    2854:	00007e79 	.word	0x00007e79
    2858:	00000129 	.word	0x00000129
    285c:	00001ce1 	.word	0x00001ce1
    2860:	00001e81 	.word	0x00001e81
    2864:	00000403 	.word	0x00000403
    2868:	00009a7c 	.word	0x00009a7c
    286c:	000003e1 	.word	0x000003e1
    2870:	00009ac8 	.word	0x00009ac8
    2874:	00001cc1 	.word	0x00001cc1
    2878:	200000a0 	.word	0x200000a0
    287c:	00000361 	.word	0x00000361
    2880:	000097c0 	.word	0x000097c0
    2884:	00009b00 	.word	0x00009b00
    2888:	00007f61 	.word	0x00007f61
    288c:	000003f1 	.word	0x000003f1
    2890:	00009bf4 	.word	0x00009bf4
    2894:	0000036a 	.word	0x0000036a
    2898:	00009b38 	.word	0x00009b38
    289c:	00009b6c 	.word	0x00009b6c
    28a0:	00009794 	.word	0x00009794
    28a4:	00009ba4 	.word	0x00009ba4
    28a8:	00001e61 	.word	0x00001e61
    28ac:	00009bc4 	.word	0x00009bc4
    28b0:	000003f9 	.word	0x000003f9

000028b4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b6:	46de      	mov	lr, fp
    28b8:	4657      	mov	r7, sl
    28ba:	464e      	mov	r6, r9
    28bc:	4645      	mov	r5, r8
    28be:	b5e0      	push	{r5, r6, r7, lr}
    28c0:	b085      	sub	sp, #20
    28c2:	9001      	str	r0, [sp, #4]
    28c4:	000e      	movs	r6, r1
    28c6:	9202      	str	r2, [sp, #8]
    28c8:	001d      	movs	r5, r3
    28ca:	ab0e      	add	r3, sp, #56	; 0x38
    28cc:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    28ce:	2c00      	cmp	r4, #0
    28d0:	d064      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28d2:	0103      	lsls	r3, r0, #4
    28d4:	4935      	ldr	r1, [pc, #212]	; (29ac <Socket_ReadSocketData+0xf8>)
    28d6:	585b      	ldr	r3, [r3, r1]
    28d8:	2b00      	cmp	r3, #0
    28da:	d05f      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28dc:	0101      	lsls	r1, r0, #4
    28de:	4b33      	ldr	r3, [pc, #204]	; (29ac <Socket_ReadSocketData+0xf8>)
    28e0:	185b      	adds	r3, r3, r1
    28e2:	889b      	ldrh	r3, [r3, #4]
    28e4:	b29b      	uxth	r3, r3
    28e6:	2b00      	cmp	r3, #0
    28e8:	d058      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28ea:	4b30      	ldr	r3, [pc, #192]	; (29ac <Socket_ReadSocketData+0xf8>)
    28ec:	185b      	adds	r3, r3, r1
    28ee:	7a9b      	ldrb	r3, [r3, #10]
    28f0:	2b01      	cmp	r3, #1
    28f2:	d153      	bne.n	299c <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    28f4:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    28f6:	4b2d      	ldr	r3, [pc, #180]	; (29ac <Socket_ReadSocketData+0xf8>)
    28f8:	469b      	mov	fp, r3
    28fa:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    28fc:	465b      	mov	r3, fp
    28fe:	220a      	movs	r2, #10
    2900:	4690      	mov	r8, r2
    2902:	44d8      	add	r8, fp
    2904:	468a      	mov	sl, r1
    2906:	9500      	str	r5, [sp, #0]
    2908:	9303      	str	r3, [sp, #12]
    290a:	e015      	b.n	2938 <Socket_ReadSocketData+0x84>
    290c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    290e:	2301      	movs	r3, #1
    2910:	e01c      	b.n	294c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2912:	3301      	adds	r3, #1
    2914:	2200      	movs	r2, #0
    2916:	2100      	movs	r1, #0
    2918:	2000      	movs	r0, #0
    291a:	4c25      	ldr	r4, [pc, #148]	; (29b0 <Socket_ReadSocketData+0xfc>)
    291c:	47a0      	blx	r4
    291e:	e03d      	b.n	299c <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    2920:	4824      	ldr	r0, [pc, #144]	; (29b4 <Socket_ReadSocketData+0x100>)
    2922:	4d25      	ldr	r5, [pc, #148]	; (29b8 <Socket_ReadSocketData+0x104>)
    2924:	47a8      	blx	r5
    2926:	0021      	movs	r1, r4
    2928:	4824      	ldr	r0, [pc, #144]	; (29bc <Socket_ReadSocketData+0x108>)
    292a:	47a8      	blx	r5
    292c:	200d      	movs	r0, #13
    292e:	4b24      	ldr	r3, [pc, #144]	; (29c0 <Socket_ReadSocketData+0x10c>)
    2930:	4798      	blx	r3
				break;
    2932:	e033      	b.n	299c <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    2934:	2c00      	cmp	r4, #0
    2936:	d031      	beq.n	299c <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2938:	465b      	mov	r3, fp
    293a:	889b      	ldrh	r3, [r3, #4]
    293c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    293e:	b21b      	sxth	r3, r3
    2940:	2b00      	cmp	r3, #0
    2942:	dde3      	ble.n	290c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2944:	9b03      	ldr	r3, [sp, #12]
    2946:	889d      	ldrh	r5, [r3, #4]
    2948:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    294a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    294c:	4a17      	ldr	r2, [pc, #92]	; (29ac <Socket_ReadSocketData+0xf8>)
    294e:	4651      	mov	r1, sl
    2950:	5889      	ldr	r1, [r1, r2]
    2952:	002a      	movs	r2, r5
    2954:	9800      	ldr	r0, [sp, #0]
    2956:	4f16      	ldr	r7, [pc, #88]	; (29b0 <Socket_ReadSocketData+0xfc>)
    2958:	47b8      	blx	r7
    295a:	2800      	cmp	r0, #0
    295c:	d1e0      	bne.n	2920 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    295e:	4b13      	ldr	r3, [pc, #76]	; (29ac <Socket_ReadSocketData+0xf8>)
    2960:	4652      	mov	r2, sl
    2962:	58d3      	ldr	r3, [r2, r3]
    2964:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    2966:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    2968:	88f3      	ldrh	r3, [r6, #6]
    296a:	1b5b      	subs	r3, r3, r5
    296c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    296e:	4b15      	ldr	r3, [pc, #84]	; (29c4 <Socket_ReadSocketData+0x110>)
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	2b00      	cmp	r3, #0
    2974:	d005      	beq.n	2982 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    2976:	4b13      	ldr	r3, [pc, #76]	; (29c4 <Socket_ReadSocketData+0x110>)
    2978:	681b      	ldr	r3, [r3, #0]
    297a:	0032      	movs	r2, r6
    297c:	9902      	ldr	r1, [sp, #8]
    297e:	9801      	ldr	r0, [sp, #4]
    2980:	4798      	blx	r3
				u16ReadCount -= u16Read;
    2982:	1b64      	subs	r4, r4, r5
    2984:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    2986:	9b00      	ldr	r3, [sp, #0]
    2988:	469c      	mov	ip, r3
    298a:	44ac      	add	ip, r5
    298c:	4663      	mov	r3, ip
    298e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    2990:	4643      	mov	r3, r8
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	2b00      	cmp	r3, #0
    2996:	d1cd      	bne.n	2934 <Socket_ReadSocketData+0x80>
    2998:	2c00      	cmp	r4, #0
    299a:	d1ba      	bne.n	2912 <Socket_ReadSocketData+0x5e>
	}
}
    299c:	b005      	add	sp, #20
    299e:	bc3c      	pop	{r2, r3, r4, r5}
    29a0:	4690      	mov	r8, r2
    29a2:	4699      	mov	r9, r3
    29a4:	46a2      	mov	sl, r4
    29a6:	46ab      	mov	fp, r5
    29a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	20000a18 	.word	0x20000a18
    29b0:	00000c51 	.word	0x00000c51
    29b4:	000093f8 	.word	0x000093f8
    29b8:	00007e45 	.word	0x00007e45
    29bc:	00009e5c 	.word	0x00009e5c
    29c0:	00007e79 	.word	0x00007e79
    29c4:	20000ac8 	.word	0x20000ac8

000029c8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    29c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ca:	46d6      	mov	lr, sl
    29cc:	464f      	mov	r7, r9
    29ce:	4646      	mov	r6, r8
    29d0:	b5c0      	push	{r6, r7, lr}
    29d2:	b09a      	sub	sp, #104	; 0x68
    29d4:	000d      	movs	r5, r1
    29d6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    29d8:	2841      	cmp	r0, #65	; 0x41
    29da:	d039      	beq.n	2a50 <m2m_ip_cb+0x88>
    29dc:	2854      	cmp	r0, #84	; 0x54
    29de:	d037      	beq.n	2a50 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    29e0:	2842      	cmp	r0, #66	; 0x42
    29e2:	d053      	beq.n	2a8c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    29e4:	2843      	cmp	r0, #67	; 0x43
    29e6:	d06a      	beq.n	2abe <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    29e8:	2844      	cmp	r0, #68	; 0x44
    29ea:	d100      	bne.n	29ee <m2m_ip_cb+0x26>
    29ec:	e0af      	b.n	2b4e <m2m_ip_cb+0x186>
    29ee:	284b      	cmp	r0, #75	; 0x4b
    29f0:	d100      	bne.n	29f4 <m2m_ip_cb+0x2c>
    29f2:	e0ac      	b.n	2b4e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    29f4:	284a      	cmp	r0, #74	; 0x4a
    29f6:	d100      	bne.n	29fa <m2m_ip_cb+0x32>
    29f8:	e0cf      	b.n	2b9a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    29fa:	2846      	cmp	r0, #70	; 0x46
    29fc:	d100      	bne.n	2a00 <m2m_ip_cb+0x38>
    29fe:	e0e5      	b.n	2bcc <m2m_ip_cb+0x204>
    2a00:	2848      	cmp	r0, #72	; 0x48
    2a02:	d100      	bne.n	2a06 <m2m_ip_cb+0x3e>
    2a04:	e10e      	b.n	2c24 <m2m_ip_cb+0x25c>
    2a06:	284d      	cmp	r0, #77	; 0x4d
    2a08:	d100      	bne.n	2a0c <m2m_ip_cb+0x44>
    2a0a:	e0dc      	b.n	2bc6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a0c:	2845      	cmp	r0, #69	; 0x45
    2a0e:	d100      	bne.n	2a12 <m2m_ip_cb+0x4a>
    2a10:	e12c      	b.n	2c6c <m2m_ip_cb+0x2a4>
    2a12:	2847      	cmp	r0, #71	; 0x47
    2a14:	d100      	bne.n	2a18 <m2m_ip_cb+0x50>
    2a16:	e14d      	b.n	2cb4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2a18:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a1a:	284c      	cmp	r0, #76	; 0x4c
    2a1c:	d100      	bne.n	2a20 <m2m_ip_cb+0x58>
    2a1e:	e126      	b.n	2c6e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2a20:	2852      	cmp	r0, #82	; 0x52
    2a22:	d12d      	bne.n	2a80 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2a24:	2301      	movs	r3, #1
    2a26:	2214      	movs	r2, #20
    2a28:	a909      	add	r1, sp, #36	; 0x24
    2a2a:	0020      	movs	r0, r4
    2a2c:	4ca2      	ldr	r4, [pc, #648]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a2e:	47a0      	blx	r4
    2a30:	2800      	cmp	r0, #0
    2a32:	d125      	bne.n	2a80 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2a34:	4ba1      	ldr	r3, [pc, #644]	; (2cbc <m2m_ip_cb+0x2f4>)
    2a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2a38:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d01f      	beq.n	2a80 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2a40:	4b9e      	ldr	r3, [pc, #632]	; (2cbc <m2m_ip_cb+0x2f4>)
    2a42:	681c      	ldr	r4, [r3, #0]
    2a44:	ab09      	add	r3, sp, #36	; 0x24
    2a46:	7c1a      	ldrb	r2, [r3, #16]
    2a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a4c:	47a0      	blx	r4
			}
		}
	}
}
    2a4e:	e017      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2a50:	2300      	movs	r3, #0
    2a52:	2204      	movs	r2, #4
    2a54:	a909      	add	r1, sp, #36	; 0x24
    2a56:	0020      	movs	r0, r4
    2a58:	4c97      	ldr	r4, [pc, #604]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a5a:	47a0      	blx	r4
    2a5c:	2800      	cmp	r0, #0
    2a5e:	d10f      	bne.n	2a80 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    2a60:	ab09      	add	r3, sp, #36	; 0x24
    2a62:	785a      	ldrb	r2, [r3, #1]
    2a64:	ab05      	add	r3, sp, #20
    2a66:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2a68:	4b95      	ldr	r3, [pc, #596]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2a6a:	681b      	ldr	r3, [r3, #0]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d007      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2a70:	4b93      	ldr	r3, [pc, #588]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2a72:	681b      	ldr	r3, [r3, #0]
    2a74:	aa09      	add	r2, sp, #36	; 0x24
    2a76:	2000      	movs	r0, #0
    2a78:	5610      	ldrsb	r0, [r2, r0]
    2a7a:	aa05      	add	r2, sp, #20
    2a7c:	2101      	movs	r1, #1
    2a7e:	4798      	blx	r3
}
    2a80:	b01a      	add	sp, #104	; 0x68
    2a82:	bc1c      	pop	{r2, r3, r4}
    2a84:	4690      	mov	r8, r2
    2a86:	4699      	mov	r9, r3
    2a88:	46a2      	mov	sl, r4
    2a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2a8c:	2300      	movs	r3, #0
    2a8e:	2204      	movs	r2, #4
    2a90:	a909      	add	r1, sp, #36	; 0x24
    2a92:	0020      	movs	r0, r4
    2a94:	4c88      	ldr	r4, [pc, #544]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a96:	47a0      	blx	r4
    2a98:	2800      	cmp	r0, #0
    2a9a:	d1f1      	bne.n	2a80 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    2a9c:	ab09      	add	r3, sp, #36	; 0x24
    2a9e:	785a      	ldrb	r2, [r3, #1]
    2aa0:	ab05      	add	r3, sp, #20
    2aa2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2aa4:	4b86      	ldr	r3, [pc, #536]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d0e9      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2aac:	4b84      	ldr	r3, [pc, #528]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2aae:	681b      	ldr	r3, [r3, #0]
    2ab0:	aa09      	add	r2, sp, #36	; 0x24
    2ab2:	2000      	movs	r0, #0
    2ab4:	5610      	ldrsb	r0, [r2, r0]
    2ab6:	aa05      	add	r2, sp, #20
    2ab8:	2102      	movs	r1, #2
    2aba:	4798      	blx	r3
    2abc:	e7e0      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2abe:	2300      	movs	r3, #0
    2ac0:	220c      	movs	r2, #12
    2ac2:	a905      	add	r1, sp, #20
    2ac4:	0020      	movs	r0, r4
    2ac6:	4c7c      	ldr	r4, [pc, #496]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2ac8:	47a0      	blx	r4
    2aca:	2800      	cmp	r0, #0
    2acc:	d1d8      	bne.n	2a80 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    2ace:	ab05      	add	r3, sp, #20
    2ad0:	2209      	movs	r2, #9
    2ad2:	569a      	ldrsb	r2, [r3, r2]
    2ad4:	2a00      	cmp	r2, #0
    2ad6:	db24      	blt.n	2b22 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    2ad8:	0018      	movs	r0, r3
    2ada:	2108      	movs	r1, #8
    2adc:	5659      	ldrsb	r1, [r3, r1]
    2ade:	4b79      	ldr	r3, [pc, #484]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2ae0:	0109      	lsls	r1, r1, #4
    2ae2:	1859      	adds	r1, r3, r1
    2ae4:	7ac9      	ldrb	r1, [r1, #11]
    2ae6:	b2c9      	uxtb	r1, r1
    2ae8:	0114      	lsls	r4, r2, #4
    2aea:	191b      	adds	r3, r3, r4
    2aec:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    2aee:	2101      	movs	r1, #1
    2af0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2af2:	8941      	ldrh	r1, [r0, #10]
    2af4:	3908      	subs	r1, #8
    2af6:	b289      	uxth	r1, r1
    2af8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    2afa:	4973      	ldr	r1, [pc, #460]	; (2cc8 <m2m_ip_cb+0x300>)
    2afc:	880b      	ldrh	r3, [r1, #0]
    2afe:	3301      	adds	r3, #1
    2b00:	b29b      	uxth	r3, r3
    2b02:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    2b04:	880b      	ldrh	r3, [r1, #0]
    2b06:	b29b      	uxth	r3, r3
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d103      	bne.n	2b14 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    2b0c:	880b      	ldrh	r3, [r1, #0]
    2b0e:	3301      	adds	r3, #1
    2b10:	b29b      	uxth	r3, r3
    2b12:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2b14:	4b6c      	ldr	r3, [pc, #432]	; (2cc8 <m2m_ip_cb+0x300>)
    2b16:	8819      	ldrh	r1, [r3, #0]
    2b18:	b289      	uxth	r1, r1
    2b1a:	0110      	lsls	r0, r2, #4
    2b1c:	4b69      	ldr	r3, [pc, #420]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2b1e:	181b      	adds	r3, r3, r0
    2b20:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    2b22:	ab09      	add	r3, sp, #36	; 0x24
    2b24:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2b26:	2202      	movs	r2, #2
    2b28:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2b2a:	aa05      	add	r2, sp, #20
    2b2c:	8851      	ldrh	r1, [r2, #2]
    2b2e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2b30:	9a06      	ldr	r2, [sp, #24]
    2b32:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2b34:	4b62      	ldr	r3, [pc, #392]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b36:	681b      	ldr	r3, [r3, #0]
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d0a1      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2b3c:	4b60      	ldr	r3, [pc, #384]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	aa05      	add	r2, sp, #20
    2b42:	2008      	movs	r0, #8
    2b44:	5610      	ldrsb	r0, [r2, r0]
    2b46:	aa09      	add	r2, sp, #36	; 0x24
    2b48:	2104      	movs	r1, #4
    2b4a:	4798      	blx	r3
    2b4c:	e798      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2b4e:	2300      	movs	r3, #0
    2b50:	2204      	movs	r2, #4
    2b52:	a909      	add	r1, sp, #36	; 0x24
    2b54:	0020      	movs	r0, r4
    2b56:	4c58      	ldr	r4, [pc, #352]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2b58:	47a0      	blx	r4
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d000      	beq.n	2b60 <m2m_ip_cb+0x198>
    2b5e:	e78f      	b.n	2a80 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    2b60:	ab09      	add	r3, sp, #36	; 0x24
    2b62:	2000      	movs	r0, #0
    2b64:	5618      	ldrsb	r0, [r3, r0]
    2b66:	aa05      	add	r2, sp, #20
    2b68:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2b6a:	785b      	ldrb	r3, [r3, #1]
    2b6c:	b25b      	sxtb	r3, r3
    2b6e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2b70:	2b00      	cmp	r3, #0
    2b72:	d107      	bne.n	2b84 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2b74:	ab09      	add	r3, sp, #36	; 0x24
    2b76:	885b      	ldrh	r3, [r3, #2]
    2b78:	3b08      	subs	r3, #8
    2b7a:	b29b      	uxth	r3, r3
    2b7c:	0101      	lsls	r1, r0, #4
    2b7e:	4a51      	ldr	r2, [pc, #324]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2b80:	1852      	adds	r2, r2, r1
    2b82:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    2b84:	4b4e      	ldr	r3, [pc, #312]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d100      	bne.n	2b8e <m2m_ip_cb+0x1c6>
    2b8c:	e778      	b.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2b8e:	4b4c      	ldr	r3, [pc, #304]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b90:	681b      	ldr	r3, [r3, #0]
    2b92:	aa05      	add	r2, sp, #20
    2b94:	2105      	movs	r1, #5
    2b96:	4798      	blx	r3
	{
    2b98:	e772      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2b9a:	2300      	movs	r3, #0
    2b9c:	2244      	movs	r2, #68	; 0x44
    2b9e:	a909      	add	r1, sp, #36	; 0x24
    2ba0:	0020      	movs	r0, r4
    2ba2:	4c45      	ldr	r4, [pc, #276]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2ba4:	47a0      	blx	r4
    2ba6:	2800      	cmp	r0, #0
    2ba8:	d000      	beq.n	2bac <m2m_ip_cb+0x1e4>
    2baa:	e769      	b.n	2a80 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    2bac:	4b47      	ldr	r3, [pc, #284]	; (2ccc <m2m_ip_cb+0x304>)
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d100      	bne.n	2bb6 <m2m_ip_cb+0x1ee>
    2bb4:	e764      	b.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2bb6:	4b45      	ldr	r3, [pc, #276]	; (2ccc <m2m_ip_cb+0x304>)
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2bbc:	9203      	str	r2, [sp, #12]
    2bbe:	0011      	movs	r1, r2
    2bc0:	a809      	add	r0, sp, #36	; 0x24
    2bc2:	4798      	blx	r3
    2bc4:	e75c      	b.n	2a80 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2bc6:	2306      	movs	r3, #6
    2bc8:	469a      	mov	sl, r3
    2bca:	e001      	b.n	2bd0 <m2m_ip_cb+0x208>
    2bcc:	2306      	movs	r3, #6
    2bce:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2bd0:	2300      	movs	r3, #0
    2bd2:	2210      	movs	r2, #16
    2bd4:	a905      	add	r1, sp, #20
    2bd6:	0020      	movs	r0, r4
    2bd8:	4f37      	ldr	r7, [pc, #220]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2bda:	47b8      	blx	r7
    2bdc:	2800      	cmp	r0, #0
    2bde:	d000      	beq.n	2be2 <m2m_ip_cb+0x21a>
    2be0:	e74e      	b.n	2a80 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    2be2:	aa05      	add	r2, sp, #20
    2be4:	200c      	movs	r0, #12
    2be6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2be8:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    2bea:	0107      	lsls	r7, r0, #4
    2bec:	4935      	ldr	r1, [pc, #212]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2bee:	19c9      	adds	r1, r1, r7
    2bf0:	2700      	movs	r7, #0
    2bf2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2bf4:	2608      	movs	r6, #8
    2bf6:	5f97      	ldrsh	r7, [r2, r6]
    2bf8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2bfa:	8957      	ldrh	r7, [r2, #10]
    2bfc:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2bfe:	af09      	add	r7, sp, #36	; 0x24
    2c00:	8856      	ldrh	r6, [r2, #2]
    2c02:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2c04:	9a06      	ldr	r2, [sp, #24]
    2c06:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2c08:	88ca      	ldrh	r2, [r1, #6]
    2c0a:	b292      	uxth	r2, r2
    2c0c:	4293      	cmp	r3, r2
    2c0e:	d00c      	beq.n	2c2a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    2c10:	2d10      	cmp	r5, #16
    2c12:	d800      	bhi.n	2c16 <m2m_ip_cb+0x24e>
    2c14:	e734      	b.n	2a80 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2c16:	2301      	movs	r3, #1
    2c18:	2200      	movs	r2, #0
    2c1a:	2100      	movs	r1, #0
    2c1c:	2000      	movs	r0, #0
    2c1e:	4c26      	ldr	r4, [pc, #152]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2c20:	47a0      	blx	r4
	{
    2c22:	e72d      	b.n	2a80 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2c24:	2309      	movs	r3, #9
    2c26:	469a      	mov	sl, r3
    2c28:	e7d2      	b.n	2bd0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2c2a:	4643      	mov	r3, r8
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	dd01      	ble.n	2c34 <m2m_ip_cb+0x26c>
    2c30:	45a8      	cmp	r8, r5
    2c32:	db0f      	blt.n	2c54 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2c34:	ab09      	add	r3, sp, #36	; 0x24
    2c36:	4642      	mov	r2, r8
    2c38:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2c3a:	2300      	movs	r3, #0
    2c3c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2c3e:	4b20      	ldr	r3, [pc, #128]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d100      	bne.n	2c48 <m2m_ip_cb+0x280>
    2c46:	e71b      	b.n	2a80 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2c48:	4b1d      	ldr	r3, [pc, #116]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	aa09      	add	r2, sp, #36	; 0x24
    2c4e:	4651      	mov	r1, sl
    2c50:	4798      	blx	r3
    2c52:	e715      	b.n	2a80 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    2c54:	0023      	movs	r3, r4
    2c56:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2c58:	4642      	mov	r2, r8
    2c5a:	4669      	mov	r1, sp
    2c5c:	818a      	strh	r2, [r1, #12]
    2c5e:	898a      	ldrh	r2, [r1, #12]
    2c60:	9200      	str	r2, [sp, #0]
    2c62:	4652      	mov	r2, sl
    2c64:	0039      	movs	r1, r7
    2c66:	4c1a      	ldr	r4, [pc, #104]	; (2cd0 <m2m_ip_cb+0x308>)
    2c68:	47a0      	blx	r4
    2c6a:	e709      	b.n	2a80 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2c6c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2c6e:	2300      	movs	r3, #0
    2c70:	2208      	movs	r2, #8
    2c72:	a909      	add	r1, sp, #36	; 0x24
    2c74:	0020      	movs	r0, r4
    2c76:	4c10      	ldr	r4, [pc, #64]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2c78:	47a0      	blx	r4
    2c7a:	2800      	cmp	r0, #0
    2c7c:	d000      	beq.n	2c80 <m2m_ip_cb+0x2b8>
    2c7e:	e6ff      	b.n	2a80 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    2c80:	ab09      	add	r3, sp, #36	; 0x24
    2c82:	2000      	movs	r0, #0
    2c84:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2c86:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2c88:	8859      	ldrh	r1, [r3, #2]
    2c8a:	ab05      	add	r3, sp, #20
    2c8c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2c8e:	0101      	lsls	r1, r0, #4
    2c90:	4b0c      	ldr	r3, [pc, #48]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2c92:	185b      	adds	r3, r3, r1
    2c94:	88db      	ldrh	r3, [r3, #6]
    2c96:	b29b      	uxth	r3, r3
    2c98:	429a      	cmp	r2, r3
    2c9a:	d000      	beq.n	2c9e <m2m_ip_cb+0x2d6>
    2c9c:	e6f0      	b.n	2a80 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    2c9e:	4b08      	ldr	r3, [pc, #32]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d100      	bne.n	2ca8 <m2m_ip_cb+0x2e0>
    2ca6:	e6eb      	b.n	2a80 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2ca8:	4b05      	ldr	r3, [pc, #20]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2caa:	681b      	ldr	r3, [r3, #0]
    2cac:	aa05      	add	r2, sp, #20
    2cae:	0029      	movs	r1, r5
    2cb0:	4798      	blx	r3
	{
    2cb2:	e6e5      	b.n	2a80 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2cb4:	2508      	movs	r5, #8
    2cb6:	e7da      	b.n	2c6e <m2m_ip_cb+0x2a6>
    2cb8:	00000c51 	.word	0x00000c51
    2cbc:	20000acc 	.word	0x20000acc
    2cc0:	20000ac8 	.word	0x20000ac8
    2cc4:	20000a18 	.word	0x20000a18
    2cc8:	200000a2 	.word	0x200000a2
    2ccc:	20000ad0 	.word	0x20000ad0
    2cd0:	000028b5 	.word	0x000028b5

00002cd4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2cd4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    2cd6:	4b0a      	ldr	r3, [pc, #40]	; (2d00 <socketInit+0x2c>)
    2cd8:	781b      	ldrb	r3, [r3, #0]
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d000      	beq.n	2ce0 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    2cde:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2ce0:	22b0      	movs	r2, #176	; 0xb0
    2ce2:	2100      	movs	r1, #0
    2ce4:	4807      	ldr	r0, [pc, #28]	; (2d04 <socketInit+0x30>)
    2ce6:	4b08      	ldr	r3, [pc, #32]	; (2d08 <socketInit+0x34>)
    2ce8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2cea:	4908      	ldr	r1, [pc, #32]	; (2d0c <socketInit+0x38>)
    2cec:	2002      	movs	r0, #2
    2cee:	4b08      	ldr	r3, [pc, #32]	; (2d10 <socketInit+0x3c>)
    2cf0:	4798      	blx	r3
		gbSocketInit	= 1;
    2cf2:	2201      	movs	r2, #1
    2cf4:	4b02      	ldr	r3, [pc, #8]	; (2d00 <socketInit+0x2c>)
    2cf6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    2cf8:	2200      	movs	r2, #0
    2cfa:	4b06      	ldr	r3, [pc, #24]	; (2d14 <socketInit+0x40>)
    2cfc:	801a      	strh	r2, [r3, #0]
}
    2cfe:	e7ee      	b.n	2cde <socketInit+0xa>
    2d00:	200000a1 	.word	0x200000a1
    2d04:	20000a18 	.word	0x20000a18
    2d08:	00000531 	.word	0x00000531
    2d0c:	000029c9 	.word	0x000029c9
    2d10:	00000d3d 	.word	0x00000d3d
    2d14:	200000a2 	.word	0x200000a2

00002d18 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2d18:	4b02      	ldr	r3, [pc, #8]	; (2d24 <registerSocketCallback+0xc>)
    2d1a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2d1c:	4b02      	ldr	r3, [pc, #8]	; (2d28 <registerSocketCallback+0x10>)
    2d1e:	6019      	str	r1, [r3, #0]
}
    2d20:	4770      	bx	lr
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	20000ac8 	.word	0x20000ac8
    2d28:	20000ad0 	.word	0x20000ad0

00002d2c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2e:	46d6      	mov	lr, sl
    2d30:	4647      	mov	r7, r8
    2d32:	b580      	push	{r7, lr}
    2d34:	b089      	sub	sp, #36	; 0x24
    2d36:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2d38:	2802      	cmp	r0, #2
    2d3a:	d000      	beq.n	2d3e <socket+0x12>
    2d3c:	e09c      	b.n	2e78 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    2d3e:	2901      	cmp	r1, #1
    2d40:	d00a      	beq.n	2d58 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    2d42:	2902      	cmp	r1, #2
    2d44:	d100      	bne.n	2d48 <socket+0x1c>
    2d46:	e070      	b.n	2e2a <socket+0xfe>
	SOCKET					sock = -1;
    2d48:	2501      	movs	r5, #1
    2d4a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    2d4c:	0028      	movs	r0, r5
    2d4e:	b009      	add	sp, #36	; 0x24
    2d50:	bc0c      	pop	{r2, r3}
    2d52:	4690      	mov	r8, r2
    2d54:	469a      	mov	sl, r3
    2d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    2d58:	4c49      	ldr	r4, [pc, #292]	; (2e80 <socket+0x154>)
    2d5a:	7827      	ldrb	r7, [r4, #0]
    2d5c:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2d5e:	7826      	ldrb	r6, [r4, #0]
    2d60:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d62:	7820      	ldrb	r0, [r4, #0]
    2d64:	3001      	adds	r0, #1
    2d66:	3106      	adds	r1, #6
    2d68:	4b46      	ldr	r3, [pc, #280]	; (2e84 <socket+0x158>)
    2d6a:	4798      	blx	r3
    2d6c:	b2c9      	uxtb	r1, r1
    2d6e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    2d70:	0132      	lsls	r2, r6, #4
    2d72:	4b45      	ldr	r3, [pc, #276]	; (2e88 <socket+0x15c>)
    2d74:	189b      	adds	r3, r3, r2
    2d76:	7a9b      	ldrb	r3, [r3, #10]
    2d78:	2506      	movs	r5, #6
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d018      	beq.n	2db0 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    2d7e:	4e40      	ldr	r6, [pc, #256]	; (2e80 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d80:	4b40      	ldr	r3, [pc, #256]	; (2e84 <socket+0x158>)
    2d82:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    2d84:	4b40      	ldr	r3, [pc, #256]	; (2e88 <socket+0x15c>)
    2d86:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    2d88:	7837      	ldrb	r7, [r6, #0]
    2d8a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2d8c:	7834      	ldrb	r4, [r6, #0]
    2d8e:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d90:	7830      	ldrb	r0, [r6, #0]
    2d92:	3001      	adds	r0, #1
    2d94:	2107      	movs	r1, #7
    2d96:	47d0      	blx	sl
    2d98:	b2c9      	uxtb	r1, r1
    2d9a:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    2d9c:	0123      	lsls	r3, r4, #4
    2d9e:	4443      	add	r3, r8
    2da0:	7a9b      	ldrb	r3, [r3, #10]
    2da2:	2b00      	cmp	r3, #0
    2da4:	d007      	beq.n	2db6 <socket+0x8a>
    2da6:	3d01      	subs	r5, #1
    2da8:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    2daa:	2d00      	cmp	r5, #0
    2dac:	d1ec      	bne.n	2d88 <socket+0x5c>
    2dae:	e7cb      	b.n	2d48 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2db0:	4b35      	ldr	r3, [pc, #212]	; (2e88 <socket+0x15c>)
    2db2:	18d4      	adds	r4, r2, r3
    2db4:	e002      	b.n	2dbc <socket+0x90>
    2db6:	0124      	lsls	r4, r4, #4
    2db8:	4b33      	ldr	r3, [pc, #204]	; (2e88 <socket+0x15c>)
    2dba:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    2dbc:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    2dbe:	2d00      	cmp	r5, #0
    2dc0:	dbc4      	blt.n	2d4c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2dc2:	2210      	movs	r2, #16
    2dc4:	2100      	movs	r1, #0
    2dc6:	0020      	movs	r0, r4
    2dc8:	4b30      	ldr	r3, [pc, #192]	; (2e8c <socket+0x160>)
    2dca:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    2dcc:	2301      	movs	r3, #1
    2dce:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    2dd0:	4a2f      	ldr	r2, [pc, #188]	; (2e90 <socket+0x164>)
    2dd2:	8813      	ldrh	r3, [r2, #0]
    2dd4:	3301      	adds	r3, #1
    2dd6:	b29b      	uxth	r3, r3
    2dd8:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    2dda:	8813      	ldrh	r3, [r2, #0]
    2ddc:	b29b      	uxth	r3, r3
    2dde:	2b00      	cmp	r3, #0
    2de0:	d103      	bne.n	2dea <socket+0xbe>
				++gu16SessionID;
    2de2:	8813      	ldrh	r3, [r2, #0]
    2de4:	3301      	adds	r3, #1
    2de6:	b29b      	uxth	r3, r3
    2de8:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    2dea:	4e29      	ldr	r6, [pc, #164]	; (2e90 <socket+0x164>)
    2dec:	8833      	ldrh	r3, [r6, #0]
    2dee:	b29b      	uxth	r3, r3
    2df0:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    2df2:	4828      	ldr	r0, [pc, #160]	; (2e94 <socket+0x168>)
    2df4:	4f28      	ldr	r7, [pc, #160]	; (2e98 <socket+0x16c>)
    2df6:	47b8      	blx	r7
    2df8:	8832      	ldrh	r2, [r6, #0]
    2dfa:	b292      	uxth	r2, r2
    2dfc:	0029      	movs	r1, r5
    2dfe:	4827      	ldr	r0, [pc, #156]	; (2e9c <socket+0x170>)
    2e00:	47b8      	blx	r7
    2e02:	200d      	movs	r0, #13
    2e04:	4b26      	ldr	r3, [pc, #152]	; (2ea0 <socket+0x174>)
    2e06:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    2e08:	9b05      	ldr	r3, [sp, #20]
    2e0a:	07db      	lsls	r3, r3, #31
    2e0c:	d59e      	bpl.n	2d4c <socket+0x20>
				strSSLCreate.sslSock = sock;
    2e0e:	aa07      	add	r2, sp, #28
    2e10:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2e12:	2321      	movs	r3, #33	; 0x21
    2e14:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2e16:	2300      	movs	r3, #0
    2e18:	9302      	str	r3, [sp, #8]
    2e1a:	9301      	str	r3, [sp, #4]
    2e1c:	9300      	str	r3, [sp, #0]
    2e1e:	3304      	adds	r3, #4
    2e20:	2150      	movs	r1, #80	; 0x50
    2e22:	2002      	movs	r0, #2
    2e24:	4c1f      	ldr	r4, [pc, #124]	; (2ea4 <socket+0x178>)
    2e26:	47a0      	blx	r4
    2e28:	e790      	b.n	2d4c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    2e2a:	4b1f      	ldr	r3, [pc, #124]	; (2ea8 <socket+0x17c>)
    2e2c:	781d      	ldrb	r5, [r3, #0]
    2e2e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e30:	781c      	ldrb	r4, [r3, #0]
    2e32:	0124      	lsls	r4, r4, #4
    2e34:	4a1d      	ldr	r2, [pc, #116]	; (2eac <socket+0x180>)
    2e36:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e38:	7819      	ldrb	r1, [r3, #0]
    2e3a:	3101      	adds	r1, #1
    2e3c:	2203      	movs	r2, #3
    2e3e:	400a      	ands	r2, r1
    2e40:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    2e42:	7aa3      	ldrb	r3, [r4, #10]
    2e44:	2b00      	cmp	r3, #0
    2e46:	d014      	beq.n	2e72 <socket+0x146>
    2e48:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    2e4a:	4917      	ldr	r1, [pc, #92]	; (2ea8 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e4c:	4f17      	ldr	r7, [pc, #92]	; (2eac <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e4e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    2e50:	780d      	ldrb	r5, [r1, #0]
    2e52:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e54:	780c      	ldrb	r4, [r1, #0]
    2e56:	0124      	lsls	r4, r4, #4
    2e58:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e5a:	780b      	ldrb	r3, [r1, #0]
    2e5c:	3301      	adds	r3, #1
    2e5e:	4003      	ands	r3, r0
    2e60:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    2e62:	7aa3      	ldrb	r3, [r4, #10]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d004      	beq.n	2e72 <socket+0x146>
    2e68:	3a01      	subs	r2, #1
    2e6a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    2e6c:	2a00      	cmp	r2, #0
    2e6e:	d1ef      	bne.n	2e50 <socket+0x124>
    2e70:	e76a      	b.n	2d48 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    2e72:	3507      	adds	r5, #7
    2e74:	b26d      	sxtb	r5, r5
					break;
    2e76:	e7a2      	b.n	2dbe <socket+0x92>
	SOCKET					sock = -1;
    2e78:	2501      	movs	r5, #1
    2e7a:	426d      	negs	r5, r5
    2e7c:	e766      	b.n	2d4c <socket+0x20>
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	200000a4 	.word	0x200000a4
    2e84:	00007d79 	.word	0x00007d79
    2e88:	20000a18 	.word	0x20000a18
    2e8c:	00000531 	.word	0x00000531
    2e90:	200000a2 	.word	0x200000a2
    2e94:	000093f8 	.word	0x000093f8
    2e98:	00007e45 	.word	0x00007e45
    2e9c:	00009e88 	.word	0x00009e88
    2ea0:	00007e79 	.word	0x00007e79
    2ea4:	00000645 	.word	0x00000645
    2ea8:	200000a5 	.word	0x200000a5
    2eac:	20000a88 	.word	0x20000a88

00002eb0 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2eb0:	b570      	push	{r4, r5, r6, lr}
    2eb2:	b088      	sub	sp, #32
    2eb4:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2eb6:	2900      	cmp	r1, #0
    2eb8:	d02b      	beq.n	2f12 <bind+0x62>
    2eba:	2800      	cmp	r0, #0
    2ebc:	db2c      	blt.n	2f18 <bind+0x68>
    2ebe:	0100      	lsls	r0, r0, #4
    2ec0:	4b1a      	ldr	r3, [pc, #104]	; (2f2c <bind+0x7c>)
    2ec2:	181b      	adds	r3, r3, r0
    2ec4:	7a9b      	ldrb	r3, [r3, #10]
    2ec6:	2b01      	cmp	r3, #1
    2ec8:	d129      	bne.n	2f1e <bind+0x6e>
    2eca:	2a00      	cmp	r2, #0
    2ecc:	d02a      	beq.n	2f24 <bind+0x74>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ece:	4b17      	ldr	r3, [pc, #92]	; (2f2c <bind+0x7c>)
    2ed0:	181b      	adds	r3, r3, r0
    2ed2:	7adb      	ldrb	r3, [r3, #11]
		uint8				u8CMD = SOCKET_CMD_BIND;
    2ed4:	2641      	movs	r6, #65	; 0x41
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ed6:	07db      	lsls	r3, r3, #31
    2ed8:	d500      	bpl.n	2edc <bind+0x2c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
    2eda:	3613      	adds	r6, #19
		}

		/* Build the bind request. */
		strBind.sock = sock;
    2edc:	ad05      	add	r5, sp, #20
    2ede:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2ee0:	2208      	movs	r2, #8
    2ee2:	0028      	movs	r0, r5
    2ee4:	4b12      	ldr	r3, [pc, #72]	; (2f30 <bind+0x80>)
    2ee6:	4798      	blx	r3
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    2ee8:	0124      	lsls	r4, r4, #4
    2eea:	4b10      	ldr	r3, [pc, #64]	; (2f2c <bind+0x7c>)
    2eec:	191c      	adds	r4, r3, r4
    2eee:	88e3      	ldrh	r3, [r4, #6]
    2ef0:	816b      	strh	r3, [r5, #10]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    2ef2:	2300      	movs	r3, #0
    2ef4:	9302      	str	r3, [sp, #8]
    2ef6:	9301      	str	r3, [sp, #4]
    2ef8:	9300      	str	r3, [sp, #0]
    2efa:	330c      	adds	r3, #12
    2efc:	002a      	movs	r2, r5
    2efe:	0031      	movs	r1, r6
    2f00:	2002      	movs	r0, #2
    2f02:	4c0c      	ldr	r4, [pc, #48]	; (2f34 <bind+0x84>)
    2f04:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f06:	2800      	cmp	r0, #0
    2f08:	d001      	beq.n	2f0e <bind+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f0a:	2009      	movs	r0, #9
    2f0c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2f0e:	b008      	add	sp, #32
    2f10:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2f12:	2006      	movs	r0, #6
    2f14:	4240      	negs	r0, r0
    2f16:	e7fa      	b.n	2f0e <bind+0x5e>
    2f18:	2006      	movs	r0, #6
    2f1a:	4240      	negs	r0, r0
    2f1c:	e7f7      	b.n	2f0e <bind+0x5e>
    2f1e:	2006      	movs	r0, #6
    2f20:	4240      	negs	r0, r0
    2f22:	e7f4      	b.n	2f0e <bind+0x5e>
    2f24:	2006      	movs	r0, #6
    2f26:	4240      	negs	r0, r0
    2f28:	e7f1      	b.n	2f0e <bind+0x5e>
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	20000a18 	.word	0x20000a18
    2f30:	0000051d 	.word	0x0000051d
    2f34:	00000645 	.word	0x00000645

00002f38 <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
    2f38:	b510      	push	{r4, lr}
    2f3a:	b086      	sub	sp, #24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    2f3c:	2800      	cmp	r0, #0
    2f3e:	db1c      	blt.n	2f7a <listen+0x42>
    2f40:	0102      	lsls	r2, r0, #4
    2f42:	4b11      	ldr	r3, [pc, #68]	; (2f88 <listen+0x50>)
    2f44:	189b      	adds	r3, r3, r2
    2f46:	7a9b      	ldrb	r3, [r3, #10]
    2f48:	2b01      	cmp	r3, #1
    2f4a:	d119      	bne.n	2f80 <listen+0x48>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
    2f4c:	aa05      	add	r2, sp, #20
    2f4e:	7010      	strb	r0, [r2, #0]
		strListen.u8BackLog = backlog;
    2f50:	7051      	strb	r1, [r2, #1]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
    2f52:	0100      	lsls	r0, r0, #4
    2f54:	4b0c      	ldr	r3, [pc, #48]	; (2f88 <listen+0x50>)
    2f56:	1818      	adds	r0, r3, r0
    2f58:	88c3      	ldrh	r3, [r0, #6]
    2f5a:	8053      	strh	r3, [r2, #2]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
    2f5c:	2300      	movs	r3, #0
    2f5e:	9302      	str	r3, [sp, #8]
    2f60:	9301      	str	r3, [sp, #4]
    2f62:	9300      	str	r3, [sp, #0]
    2f64:	3304      	adds	r3, #4
    2f66:	2142      	movs	r1, #66	; 0x42
    2f68:	2002      	movs	r0, #2
    2f6a:	4c08      	ldr	r4, [pc, #32]	; (2f8c <listen+0x54>)
    2f6c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f6e:	2800      	cmp	r0, #0
    2f70:	d001      	beq.n	2f76 <listen+0x3e>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f72:	2009      	movs	r0, #9
    2f74:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2f76:	b006      	add	sp, #24
    2f78:	bd10      	pop	{r4, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2f7a:	2006      	movs	r0, #6
    2f7c:	4240      	negs	r0, r0
    2f7e:	e7fa      	b.n	2f76 <listen+0x3e>
    2f80:	2006      	movs	r0, #6
    2f82:	4240      	negs	r0, r0
    2f84:	e7f7      	b.n	2f76 <listen+0x3e>
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	20000a18 	.word	0x20000a18
    2f8c:	00000645 	.word	0x00000645

00002f90 <accept>:
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
    2f90:	2800      	cmp	r0, #0
    2f92:	db07      	blt.n	2fa4 <accept+0x14>
    2f94:	0100      	lsls	r0, r0, #4
    2f96:	4b06      	ldr	r3, [pc, #24]	; (2fb0 <accept+0x20>)
    2f98:	1818      	adds	r0, r3, r0
    2f9a:	7a83      	ldrb	r3, [r0, #10]
    2f9c:	2b01      	cmp	r3, #1
    2f9e:	d104      	bne.n	2faa <accept+0x1a>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
    2fa0:	2000      	movs	r0, #0
	}
	return s8Ret;
}
    2fa2:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2fa4:	2006      	movs	r0, #6
    2fa6:	4240      	negs	r0, r0
    2fa8:	e7fb      	b.n	2fa2 <accept+0x12>
    2faa:	2006      	movs	r0, #6
    2fac:	4240      	negs	r0, r0
    2fae:	e7f8      	b.n	2fa2 <accept+0x12>
    2fb0:	20000a18 	.word	0x20000a18

00002fb4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    2fb4:	b530      	push	{r4, r5, lr}
    2fb6:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    2fb8:	2800      	cmp	r0, #0
    2fba:	db36      	blt.n	302a <send+0x76>
    2fbc:	2900      	cmp	r1, #0
    2fbe:	d037      	beq.n	3030 <send+0x7c>
    2fc0:	23af      	movs	r3, #175	; 0xaf
    2fc2:	00db      	lsls	r3, r3, #3
    2fc4:	429a      	cmp	r2, r3
    2fc6:	d836      	bhi.n	3036 <send+0x82>
    2fc8:	0104      	lsls	r4, r0, #4
    2fca:	4b1e      	ldr	r3, [pc, #120]	; (3044 <send+0x90>)
    2fcc:	191b      	adds	r3, r3, r4
    2fce:	7a9b      	ldrb	r3, [r3, #10]
    2fd0:	2b01      	cmp	r3, #1
    2fd2:	d133      	bne.n	303c <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    2fd4:	ab04      	add	r3, sp, #16
    2fd6:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    2fd8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    2fda:	0025      	movs	r5, r4
    2fdc:	4c19      	ldr	r4, [pc, #100]	; (3044 <send+0x90>)
    2fde:	1964      	adds	r4, r4, r5
    2fe0:	88e4      	ldrh	r4, [r4, #6]
    2fe2:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    2fe4:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    2fe6:	2806      	cmp	r0, #6
    2fe8:	dd00      	ble.n	2fec <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    2fea:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2fec:	0104      	lsls	r4, r0, #4
    2fee:	4b15      	ldr	r3, [pc, #84]	; (3044 <send+0x90>)
    2ff0:	191b      	adds	r3, r3, r4
    2ff2:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    2ff4:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ff6:	07e4      	lsls	r4, r4, #31
    2ff8:	d505      	bpl.n	3006 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    2ffa:	0100      	lsls	r0, r0, #4
    2ffc:	4b11      	ldr	r3, [pc, #68]	; (3044 <send+0x90>)
    2ffe:	1818      	adds	r0, r3, r0
    3000:	8905      	ldrh	r5, [r0, #8]
    3002:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3004:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3006:	2080      	movs	r0, #128	; 0x80
    3008:	4318      	orrs	r0, r3
    300a:	9502      	str	r5, [sp, #8]
    300c:	9201      	str	r2, [sp, #4]
    300e:	9100      	str	r1, [sp, #0]
    3010:	2310      	movs	r3, #16
    3012:	aa04      	add	r2, sp, #16
    3014:	0001      	movs	r1, r0
    3016:	2002      	movs	r0, #2
    3018:	4c0b      	ldr	r4, [pc, #44]	; (3048 <send+0x94>)
    301a:	47a0      	blx	r4
    301c:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    301e:	2800      	cmp	r0, #0
    3020:	d000      	beq.n	3024 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3022:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3024:	0018      	movs	r0, r3
    3026:	b009      	add	sp, #36	; 0x24
    3028:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    302a:	2306      	movs	r3, #6
    302c:	425b      	negs	r3, r3
    302e:	e7f9      	b.n	3024 <send+0x70>
    3030:	2306      	movs	r3, #6
    3032:	425b      	negs	r3, r3
    3034:	e7f6      	b.n	3024 <send+0x70>
    3036:	2306      	movs	r3, #6
    3038:	425b      	negs	r3, r3
    303a:	e7f3      	b.n	3024 <send+0x70>
    303c:	2306      	movs	r3, #6
    303e:	425b      	negs	r3, r3
    3040:	e7f0      	b.n	3024 <send+0x70>
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	20000a18 	.word	0x20000a18
    3048:	00000645 	.word	0x00000645

0000304c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    304c:	b530      	push	{r4, r5, lr}
    304e:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3050:	2800      	cmp	r0, #0
    3052:	db34      	blt.n	30be <recv+0x72>
    3054:	2900      	cmp	r1, #0
    3056:	d035      	beq.n	30c4 <recv+0x78>
    3058:	2a00      	cmp	r2, #0
    305a:	d036      	beq.n	30ca <recv+0x7e>
    305c:	0105      	lsls	r5, r0, #4
    305e:	4c1e      	ldr	r4, [pc, #120]	; (30d8 <recv+0x8c>)
    3060:	1964      	adds	r4, r4, r5
    3062:	7aa4      	ldrb	r4, [r4, #10]
    3064:	2c01      	cmp	r4, #1
    3066:	d133      	bne.n	30d0 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3068:	4c1b      	ldr	r4, [pc, #108]	; (30d8 <recv+0x8c>)
    306a:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    306c:	1964      	adds	r4, r4, r5
    306e:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3070:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3072:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3074:	2900      	cmp	r1, #0
    3076:	d11d      	bne.n	30b4 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3078:	2101      	movs	r1, #1
    307a:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    307c:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    307e:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3080:	07d2      	lsls	r2, r2, #31
    3082:	d500      	bpl.n	3086 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3084:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3086:	2b00      	cmp	r3, #0
    3088:	d117      	bne.n	30ba <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    308a:	3b01      	subs	r3, #1
    308c:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    308e:	aa04      	add	r2, sp, #16
    3090:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3092:	0100      	lsls	r0, r0, #4
    3094:	4b10      	ldr	r3, [pc, #64]	; (30d8 <recv+0x8c>)
    3096:	1818      	adds	r0, r3, r0
    3098:	88c3      	ldrh	r3, [r0, #6]
    309a:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    309c:	2300      	movs	r3, #0
    309e:	9302      	str	r3, [sp, #8]
    30a0:	9301      	str	r3, [sp, #4]
    30a2:	9300      	str	r3, [sp, #0]
    30a4:	3308      	adds	r3, #8
    30a6:	2002      	movs	r0, #2
    30a8:	4c0c      	ldr	r4, [pc, #48]	; (30dc <recv+0x90>)
    30aa:	47a0      	blx	r4
    30ac:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    30ae:	2800      	cmp	r0, #0
    30b0:	d000      	beq.n	30b4 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    30b2:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    30b4:	0010      	movs	r0, r2
    30b6:	b007      	add	sp, #28
    30b8:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    30ba:	9304      	str	r3, [sp, #16]
    30bc:	e7e7      	b.n	308e <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    30be:	2206      	movs	r2, #6
    30c0:	4252      	negs	r2, r2
    30c2:	e7f7      	b.n	30b4 <recv+0x68>
    30c4:	2206      	movs	r2, #6
    30c6:	4252      	negs	r2, r2
    30c8:	e7f4      	b.n	30b4 <recv+0x68>
    30ca:	2206      	movs	r2, #6
    30cc:	4252      	negs	r2, r2
    30ce:	e7f1      	b.n	30b4 <recv+0x68>
    30d0:	2206      	movs	r2, #6
    30d2:	4252      	negs	r2, r2
    30d4:	e7ee      	b.n	30b4 <recv+0x68>
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	20000a18 	.word	0x20000a18
    30dc:	00000645 	.word	0x00000645

000030e0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    30e0:	b530      	push	{r4, r5, lr}
    30e2:	b087      	sub	sp, #28
    30e4:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    30e6:	481e      	ldr	r0, [pc, #120]	; (3160 <close+0x80>)
    30e8:	4d1e      	ldr	r5, [pc, #120]	; (3164 <close+0x84>)
    30ea:	47a8      	blx	r5
    30ec:	0021      	movs	r1, r4
    30ee:	481e      	ldr	r0, [pc, #120]	; (3168 <close+0x88>)
    30f0:	47a8      	blx	r5
    30f2:	200d      	movs	r0, #13
    30f4:	4b1d      	ldr	r3, [pc, #116]	; (316c <close+0x8c>)
    30f6:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    30f8:	2c00      	cmp	r4, #0
    30fa:	db2a      	blt.n	3152 <close+0x72>
    30fc:	0122      	lsls	r2, r4, #4
    30fe:	4b1c      	ldr	r3, [pc, #112]	; (3170 <close+0x90>)
    3100:	189b      	adds	r3, r3, r2
    3102:	7a9b      	ldrb	r3, [r3, #10]
    3104:	2b01      	cmp	r3, #1
    3106:	d127      	bne.n	3158 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3108:	a905      	add	r1, sp, #20
    310a:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    310c:	4b18      	ldr	r3, [pc, #96]	; (3170 <close+0x90>)
    310e:	189b      	adds	r3, r3, r2
    3110:	88da      	ldrh	r2, [r3, #6]
    3112:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3114:	2200      	movs	r2, #0
    3116:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3118:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    311a:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    311c:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    311e:	07db      	lsls	r3, r3, #31
    3120:	d500      	bpl.n	3124 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3122:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3124:	2300      	movs	r3, #0
    3126:	9302      	str	r3, [sp, #8]
    3128:	9301      	str	r3, [sp, #4]
    312a:	9300      	str	r3, [sp, #0]
    312c:	3304      	adds	r3, #4
    312e:	aa05      	add	r2, sp, #20
    3130:	2002      	movs	r0, #2
    3132:	4d10      	ldr	r5, [pc, #64]	; (3174 <close+0x94>)
    3134:	47a8      	blx	r5
    3136:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3138:	d001      	beq.n	313e <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    313a:	2509      	movs	r5, #9
    313c:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    313e:	0124      	lsls	r4, r4, #4
    3140:	480b      	ldr	r0, [pc, #44]	; (3170 <close+0x90>)
    3142:	1820      	adds	r0, r4, r0
    3144:	2210      	movs	r2, #16
    3146:	2100      	movs	r1, #0
    3148:	4b0b      	ldr	r3, [pc, #44]	; (3178 <close+0x98>)
    314a:	4798      	blx	r3
	}
	return s8Ret;
}
    314c:	0028      	movs	r0, r5
    314e:	b007      	add	sp, #28
    3150:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3152:	2506      	movs	r5, #6
    3154:	426d      	negs	r5, r5
    3156:	e7f9      	b.n	314c <close+0x6c>
    3158:	2506      	movs	r5, #6
    315a:	426d      	negs	r5, r5
    315c:	e7f6      	b.n	314c <close+0x6c>
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	000093f8 	.word	0x000093f8
    3164:	00007e45 	.word	0x00007e45
    3168:	00009e70 	.word	0x00009e70
    316c:	00007e79 	.word	0x00007e79
    3170:	20000a18 	.word	0x20000a18
    3174:	00000645 	.word	0x00000645
    3178:	00000531 	.word	0x00000531

0000317c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    317c:	b570      	push	{r4, r5, r6, lr}
    317e:	b082      	sub	sp, #8
    3180:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3182:	4b2a      	ldr	r3, [pc, #168]	; (322c <spi_flash_enable+0xb0>)
    3184:	4798      	blx	r3
    3186:	0500      	lsls	r0, r0, #20
    3188:	0d00      	lsrs	r0, r0, #20
    318a:	4b29      	ldr	r3, [pc, #164]	; (3230 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    318c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    318e:	4298      	cmp	r0, r3
    3190:	d802      	bhi.n	3198 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3192:	0028      	movs	r0, r5
    3194:	b002      	add	sp, #8
    3196:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3198:	a901      	add	r1, sp, #4
    319a:	4826      	ldr	r0, [pc, #152]	; (3234 <spi_flash_enable+0xb8>)
    319c:	4b26      	ldr	r3, [pc, #152]	; (3238 <spi_flash_enable+0xbc>)
    319e:	4798      	blx	r3
    31a0:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    31a2:	d1f6      	bne.n	3192 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    31a4:	4b25      	ldr	r3, [pc, #148]	; (323c <spi_flash_enable+0xc0>)
    31a6:	9a01      	ldr	r2, [sp, #4]
    31a8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    31aa:	4925      	ldr	r1, [pc, #148]	; (3240 <spi_flash_enable+0xc4>)
    31ac:	4319      	orrs	r1, r3
    31ae:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    31b0:	4820      	ldr	r0, [pc, #128]	; (3234 <spi_flash_enable+0xb8>)
    31b2:	4b24      	ldr	r3, [pc, #144]	; (3244 <spi_flash_enable+0xc8>)
    31b4:	4798      	blx	r3
		if(enable) {
    31b6:	2c00      	cmp	r4, #0
    31b8:	d020      	beq.n	31fc <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    31ba:	2100      	movs	r1, #0
    31bc:	4822      	ldr	r0, [pc, #136]	; (3248 <spi_flash_enable+0xcc>)
    31be:	4c21      	ldr	r4, [pc, #132]	; (3244 <spi_flash_enable+0xc8>)
    31c0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    31c2:	21ab      	movs	r1, #171	; 0xab
    31c4:	4821      	ldr	r0, [pc, #132]	; (324c <spi_flash_enable+0xd0>)
    31c6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    31c8:	2101      	movs	r1, #1
    31ca:	4821      	ldr	r0, [pc, #132]	; (3250 <spi_flash_enable+0xd4>)
    31cc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    31ce:	2100      	movs	r1, #0
    31d0:	4820      	ldr	r0, [pc, #128]	; (3254 <spi_flash_enable+0xd8>)
    31d2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    31d4:	2181      	movs	r1, #129	; 0x81
    31d6:	4820      	ldr	r0, [pc, #128]	; (3258 <spi_flash_enable+0xdc>)
    31d8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    31da:	4e20      	ldr	r6, [pc, #128]	; (325c <spi_flash_enable+0xe0>)
    31dc:	4c20      	ldr	r4, [pc, #128]	; (3260 <spi_flash_enable+0xe4>)
    31de:	0030      	movs	r0, r6
    31e0:	47a0      	blx	r4
    31e2:	2801      	cmp	r0, #1
    31e4:	d1fb      	bne.n	31de <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    31e6:	4b15      	ldr	r3, [pc, #84]	; (323c <spi_flash_enable+0xc0>)
    31e8:	9a01      	ldr	r2, [sp, #4]
    31ea:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    31ec:	2180      	movs	r1, #128	; 0x80
    31ee:	0249      	lsls	r1, r1, #9
    31f0:	4319      	orrs	r1, r3
    31f2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    31f4:	480f      	ldr	r0, [pc, #60]	; (3234 <spi_flash_enable+0xb8>)
    31f6:	4b13      	ldr	r3, [pc, #76]	; (3244 <spi_flash_enable+0xc8>)
    31f8:	4798      	blx	r3
    31fa:	e7ca      	b.n	3192 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    31fc:	2100      	movs	r1, #0
    31fe:	4812      	ldr	r0, [pc, #72]	; (3248 <spi_flash_enable+0xcc>)
    3200:	4c10      	ldr	r4, [pc, #64]	; (3244 <spi_flash_enable+0xc8>)
    3202:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3204:	21b9      	movs	r1, #185	; 0xb9
    3206:	4811      	ldr	r0, [pc, #68]	; (324c <spi_flash_enable+0xd0>)
    3208:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    320a:	2101      	movs	r1, #1
    320c:	4810      	ldr	r0, [pc, #64]	; (3250 <spi_flash_enable+0xd4>)
    320e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3210:	2100      	movs	r1, #0
    3212:	4810      	ldr	r0, [pc, #64]	; (3254 <spi_flash_enable+0xd8>)
    3214:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3216:	2181      	movs	r1, #129	; 0x81
    3218:	480f      	ldr	r0, [pc, #60]	; (3258 <spi_flash_enable+0xdc>)
    321a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    321c:	4e0f      	ldr	r6, [pc, #60]	; (325c <spi_flash_enable+0xe0>)
    321e:	4c10      	ldr	r4, [pc, #64]	; (3260 <spi_flash_enable+0xe4>)
    3220:	0030      	movs	r0, r6
    3222:	47a0      	blx	r4
    3224:	2801      	cmp	r0, #1
    3226:	d1fb      	bne.n	3220 <spi_flash_enable+0xa4>
    3228:	e7dd      	b.n	31e6 <spi_flash_enable+0x6a>
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	0000152d 	.word	0x0000152d
    3230:	0000039f 	.word	0x0000039f
    3234:	00001410 	.word	0x00001410
    3238:	0000197d 	.word	0x0000197d
    323c:	f8888fff 	.word	0xf8888fff
    3240:	01111000 	.word	0x01111000
    3244:	00001989 	.word	0x00001989
    3248:	00010208 	.word	0x00010208
    324c:	0001020c 	.word	0x0001020c
    3250:	00010214 	.word	0x00010214
    3254:	0001021c 	.word	0x0001021c
    3258:	00010204 	.word	0x00010204
    325c:	00010218 	.word	0x00010218
    3260:	00001971 	.word	0x00001971

00003264 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3264:	b5f0      	push	{r4, r5, r6, r7, lr}
    3266:	46de      	mov	lr, fp
    3268:	4657      	mov	r7, sl
    326a:	464e      	mov	r6, r9
    326c:	4645      	mov	r5, r8
    326e:	b5e0      	push	{r5, r6, r7, lr}
    3270:	b091      	sub	sp, #68	; 0x44
    3272:	0005      	movs	r5, r0
    3274:	000c      	movs	r4, r1
    3276:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3278:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    327a:	0008      	movs	r0, r1
    327c:	4bbc      	ldr	r3, [pc, #752]	; (3570 <usart_init+0x30c>)
    327e:	4798      	blx	r3
    3280:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3282:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3284:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3286:	07db      	lsls	r3, r3, #31
    3288:	d506      	bpl.n	3298 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    328a:	b011      	add	sp, #68	; 0x44
    328c:	bc3c      	pop	{r2, r3, r4, r5}
    328e:	4690      	mov	r8, r2
    3290:	4699      	mov	r9, r3
    3292:	46a2      	mov	sl, r4
    3294:	46ab      	mov	fp, r5
    3296:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3298:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    329a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    329c:	079b      	lsls	r3, r3, #30
    329e:	d4f4      	bmi.n	328a <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    32a0:	49b4      	ldr	r1, [pc, #720]	; (3574 <usart_init+0x310>)
    32a2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    32a4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    32a6:	2301      	movs	r3, #1
    32a8:	40bb      	lsls	r3, r7
    32aa:	4303      	orrs	r3, r0
    32ac:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    32ae:	a90f      	add	r1, sp, #60	; 0x3c
    32b0:	272d      	movs	r7, #45	; 0x2d
    32b2:	5df3      	ldrb	r3, [r6, r7]
    32b4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    32b6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    32b8:	b2d3      	uxtb	r3, r2
    32ba:	9302      	str	r3, [sp, #8]
    32bc:	0018      	movs	r0, r3
    32be:	4bae      	ldr	r3, [pc, #696]	; (3578 <usart_init+0x314>)
    32c0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    32c2:	9802      	ldr	r0, [sp, #8]
    32c4:	4bad      	ldr	r3, [pc, #692]	; (357c <usart_init+0x318>)
    32c6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    32c8:	5df0      	ldrb	r0, [r6, r7]
    32ca:	2100      	movs	r1, #0
    32cc:	4bac      	ldr	r3, [pc, #688]	; (3580 <usart_init+0x31c>)
    32ce:	4798      	blx	r3
	module->character_size = config->character_size;
    32d0:	7af3      	ldrb	r3, [r6, #11]
    32d2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    32d4:	2324      	movs	r3, #36	; 0x24
    32d6:	5cf3      	ldrb	r3, [r6, r3]
    32d8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    32da:	2325      	movs	r3, #37	; 0x25
    32dc:	5cf3      	ldrb	r3, [r6, r3]
    32de:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    32e0:	7ef3      	ldrb	r3, [r6, #27]
    32e2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    32e4:	7f33      	ldrb	r3, [r6, #28]
    32e6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    32e8:	682b      	ldr	r3, [r5, #0]
    32ea:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    32ec:	0018      	movs	r0, r3
    32ee:	4ba0      	ldr	r3, [pc, #640]	; (3570 <usart_init+0x30c>)
    32f0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    32f2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    32f4:	2200      	movs	r2, #0
    32f6:	230e      	movs	r3, #14
    32f8:	a906      	add	r1, sp, #24
    32fa:	468c      	mov	ip, r1
    32fc:	4463      	add	r3, ip
    32fe:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    3300:	8a32      	ldrh	r2, [r6, #16]
    3302:	9202      	str	r2, [sp, #8]
    3304:	2380      	movs	r3, #128	; 0x80
    3306:	01db      	lsls	r3, r3, #7
    3308:	429a      	cmp	r2, r3
    330a:	d100      	bne.n	330e <usart_init+0xaa>
    330c:	e09e      	b.n	344c <usart_init+0x1e8>
    330e:	d90f      	bls.n	3330 <usart_init+0xcc>
    3310:	23c0      	movs	r3, #192	; 0xc0
    3312:	01db      	lsls	r3, r3, #7
    3314:	9a02      	ldr	r2, [sp, #8]
    3316:	429a      	cmp	r2, r3
    3318:	d100      	bne.n	331c <usart_init+0xb8>
    331a:	e092      	b.n	3442 <usart_init+0x1de>
    331c:	2380      	movs	r3, #128	; 0x80
    331e:	021b      	lsls	r3, r3, #8
    3320:	429a      	cmp	r2, r3
    3322:	d000      	beq.n	3326 <usart_init+0xc2>
    3324:	e11f      	b.n	3566 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3326:	2303      	movs	r3, #3
    3328:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    332a:	2300      	movs	r3, #0
    332c:	9307      	str	r3, [sp, #28]
    332e:	e008      	b.n	3342 <usart_init+0xde>
	switch (config->sample_rate) {
    3330:	2380      	movs	r3, #128	; 0x80
    3332:	019b      	lsls	r3, r3, #6
    3334:	429a      	cmp	r2, r3
    3336:	d000      	beq.n	333a <usart_init+0xd6>
    3338:	e115      	b.n	3566 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    333a:	2310      	movs	r3, #16
    333c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    333e:	3b0f      	subs	r3, #15
    3340:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    3342:	6833      	ldr	r3, [r6, #0]
    3344:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3346:	68f3      	ldr	r3, [r6, #12]
    3348:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    334a:	6973      	ldr	r3, [r6, #20]
    334c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    334e:	7e33      	ldrb	r3, [r6, #24]
    3350:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3352:	2326      	movs	r3, #38	; 0x26
    3354:	5cf3      	ldrb	r3, [r6, r3]
    3356:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3358:	6873      	ldr	r3, [r6, #4]
    335a:	4699      	mov	r9, r3
	switch (transfer_mode)
    335c:	2b00      	cmp	r3, #0
    335e:	d100      	bne.n	3362 <usart_init+0xfe>
    3360:	e0a0      	b.n	34a4 <usart_init+0x240>
    3362:	2380      	movs	r3, #128	; 0x80
    3364:	055b      	lsls	r3, r3, #21
    3366:	4599      	cmp	r9, r3
    3368:	d100      	bne.n	336c <usart_init+0x108>
    336a:	e084      	b.n	3476 <usart_init+0x212>
	if(config->encoding_format_enable) {
    336c:	7e73      	ldrb	r3, [r6, #25]
    336e:	2b00      	cmp	r3, #0
    3370:	d002      	beq.n	3378 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3372:	7eb3      	ldrb	r3, [r6, #26]
    3374:	4642      	mov	r2, r8
    3376:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3378:	682a      	ldr	r2, [r5, #0]
    337a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    337c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    337e:	2b00      	cmp	r3, #0
    3380:	d1fc      	bne.n	337c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    3382:	330e      	adds	r3, #14
    3384:	aa06      	add	r2, sp, #24
    3386:	4694      	mov	ip, r2
    3388:	4463      	add	r3, ip
    338a:	881b      	ldrh	r3, [r3, #0]
    338c:	4642      	mov	r2, r8
    338e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3390:	9b05      	ldr	r3, [sp, #20]
    3392:	9a03      	ldr	r2, [sp, #12]
    3394:	4313      	orrs	r3, r2
    3396:	9a04      	ldr	r2, [sp, #16]
    3398:	4313      	orrs	r3, r2
    339a:	464a      	mov	r2, r9
    339c:	4313      	orrs	r3, r2
    339e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    33a0:	465b      	mov	r3, fp
    33a2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    33a4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    33a6:	4653      	mov	r3, sl
    33a8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    33aa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    33ac:	2327      	movs	r3, #39	; 0x27
    33ae:	5cf3      	ldrb	r3, [r6, r3]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d101      	bne.n	33b8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    33b4:	3304      	adds	r3, #4
    33b6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    33b8:	7e73      	ldrb	r3, [r6, #25]
    33ba:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    33bc:	7f32      	ldrb	r2, [r6, #28]
    33be:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    33c0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    33c2:	7f72      	ldrb	r2, [r6, #29]
    33c4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    33c6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    33c8:	2224      	movs	r2, #36	; 0x24
    33ca:	5cb2      	ldrb	r2, [r6, r2]
    33cc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    33ce:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    33d0:	2225      	movs	r2, #37	; 0x25
    33d2:	5cb2      	ldrb	r2, [r6, r2]
    33d4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    33d6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    33d8:	7ab1      	ldrb	r1, [r6, #10]
    33da:	7af2      	ldrb	r2, [r6, #11]
    33dc:	4311      	orrs	r1, r2
    33de:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    33e0:	8933      	ldrh	r3, [r6, #8]
    33e2:	2bff      	cmp	r3, #255	; 0xff
    33e4:	d100      	bne.n	33e8 <usart_init+0x184>
    33e6:	e081      	b.n	34ec <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    33e8:	2280      	movs	r2, #128	; 0x80
    33ea:	0452      	lsls	r2, r2, #17
    33ec:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    33ee:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    33f0:	232c      	movs	r3, #44	; 0x2c
    33f2:	5cf3      	ldrb	r3, [r6, r3]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d103      	bne.n	3400 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    33f8:	4b62      	ldr	r3, [pc, #392]	; (3584 <usart_init+0x320>)
    33fa:	789b      	ldrb	r3, [r3, #2]
    33fc:	079b      	lsls	r3, r3, #30
    33fe:	d501      	bpl.n	3404 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3400:	2380      	movs	r3, #128	; 0x80
    3402:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    3404:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3406:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3408:	2b00      	cmp	r3, #0
    340a:	d1fc      	bne.n	3406 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    340c:	4643      	mov	r3, r8
    340e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3410:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3412:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3414:	2b00      	cmp	r3, #0
    3416:	d1fc      	bne.n	3412 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    3418:	4643      	mov	r3, r8
    341a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    341c:	ab0e      	add	r3, sp, #56	; 0x38
    341e:	2280      	movs	r2, #128	; 0x80
    3420:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3422:	2200      	movs	r2, #0
    3424:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    3426:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3428:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    342a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    342c:	930a      	str	r3, [sp, #40]	; 0x28
    342e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3430:	930b      	str	r3, [sp, #44]	; 0x2c
    3432:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3434:	930c      	str	r3, [sp, #48]	; 0x30
    3436:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    3438:	9302      	str	r3, [sp, #8]
    343a:	930d      	str	r3, [sp, #52]	; 0x34
    343c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    343e:	ae0a      	add	r6, sp, #40	; 0x28
    3440:	e063      	b.n	350a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3442:	2308      	movs	r3, #8
    3444:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3446:	3b07      	subs	r3, #7
    3448:	9307      	str	r3, [sp, #28]
    344a:	e77a      	b.n	3342 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    344c:	6833      	ldr	r3, [r6, #0]
    344e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3450:	68f3      	ldr	r3, [r6, #12]
    3452:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    3454:	6973      	ldr	r3, [r6, #20]
    3456:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3458:	7e33      	ldrb	r3, [r6, #24]
    345a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    345c:	2326      	movs	r3, #38	; 0x26
    345e:	5cf3      	ldrb	r3, [r6, r3]
    3460:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3462:	6873      	ldr	r3, [r6, #4]
    3464:	4699      	mov	r9, r3
	switch (transfer_mode)
    3466:	2b00      	cmp	r3, #0
    3468:	d018      	beq.n	349c <usart_init+0x238>
    346a:	2380      	movs	r3, #128	; 0x80
    346c:	055b      	lsls	r3, r3, #21
    346e:	4599      	cmp	r9, r3
    3470:	d001      	beq.n	3476 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    3472:	2000      	movs	r0, #0
    3474:	e025      	b.n	34c2 <usart_init+0x25e>
			if (!config->use_external_clock) {
    3476:	2327      	movs	r3, #39	; 0x27
    3478:	5cf3      	ldrb	r3, [r6, r3]
    347a:	2b00      	cmp	r3, #0
    347c:	d000      	beq.n	3480 <usart_init+0x21c>
    347e:	e775      	b.n	336c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3480:	6a33      	ldr	r3, [r6, #32]
    3482:	001f      	movs	r7, r3
    3484:	b2c0      	uxtb	r0, r0
    3486:	4b40      	ldr	r3, [pc, #256]	; (3588 <usart_init+0x324>)
    3488:	4798      	blx	r3
    348a:	0001      	movs	r1, r0
    348c:	220e      	movs	r2, #14
    348e:	ab06      	add	r3, sp, #24
    3490:	469c      	mov	ip, r3
    3492:	4462      	add	r2, ip
    3494:	0038      	movs	r0, r7
    3496:	4b3d      	ldr	r3, [pc, #244]	; (358c <usart_init+0x328>)
    3498:	4798      	blx	r3
    349a:	e012      	b.n	34c2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    349c:	2308      	movs	r3, #8
    349e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    34a0:	2300      	movs	r3, #0
    34a2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    34a4:	2327      	movs	r3, #39	; 0x27
    34a6:	5cf3      	ldrb	r3, [r6, r3]
    34a8:	2b00      	cmp	r3, #0
    34aa:	d00e      	beq.n	34ca <usart_init+0x266>
				status_code =
    34ac:	9b06      	ldr	r3, [sp, #24]
    34ae:	9300      	str	r3, [sp, #0]
    34b0:	9b07      	ldr	r3, [sp, #28]
    34b2:	220e      	movs	r2, #14
    34b4:	a906      	add	r1, sp, #24
    34b6:	468c      	mov	ip, r1
    34b8:	4462      	add	r2, ip
    34ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    34bc:	6a30      	ldr	r0, [r6, #32]
    34be:	4f34      	ldr	r7, [pc, #208]	; (3590 <usart_init+0x32c>)
    34c0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    34c2:	2800      	cmp	r0, #0
    34c4:	d000      	beq.n	34c8 <usart_init+0x264>
    34c6:	e6e0      	b.n	328a <usart_init+0x26>
    34c8:	e750      	b.n	336c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    34ca:	6a33      	ldr	r3, [r6, #32]
    34cc:	001f      	movs	r7, r3
    34ce:	b2c0      	uxtb	r0, r0
    34d0:	4b2d      	ldr	r3, [pc, #180]	; (3588 <usart_init+0x324>)
    34d2:	4798      	blx	r3
    34d4:	0001      	movs	r1, r0
				status_code =
    34d6:	9b06      	ldr	r3, [sp, #24]
    34d8:	9300      	str	r3, [sp, #0]
    34da:	9b07      	ldr	r3, [sp, #28]
    34dc:	220e      	movs	r2, #14
    34de:	a806      	add	r0, sp, #24
    34e0:	4684      	mov	ip, r0
    34e2:	4462      	add	r2, ip
    34e4:	0038      	movs	r0, r7
    34e6:	4f2a      	ldr	r7, [pc, #168]	; (3590 <usart_init+0x32c>)
    34e8:	47b8      	blx	r7
    34ea:	e7ea      	b.n	34c2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    34ec:	7ef3      	ldrb	r3, [r6, #27]
    34ee:	2b00      	cmp	r3, #0
    34f0:	d100      	bne.n	34f4 <usart_init+0x290>
    34f2:	e77d      	b.n	33f0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    34f4:	2380      	movs	r3, #128	; 0x80
    34f6:	04db      	lsls	r3, r3, #19
    34f8:	431f      	orrs	r7, r3
    34fa:	e779      	b.n	33f0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    34fc:	0020      	movs	r0, r4
    34fe:	4b25      	ldr	r3, [pc, #148]	; (3594 <usart_init+0x330>)
    3500:	4798      	blx	r3
    3502:	e007      	b.n	3514 <usart_init+0x2b0>
    3504:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3506:	2f04      	cmp	r7, #4
    3508:	d00d      	beq.n	3526 <usart_init+0x2c2>
    350a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    350c:	00bb      	lsls	r3, r7, #2
    350e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    3510:	2800      	cmp	r0, #0
    3512:	d0f3      	beq.n	34fc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    3514:	1c43      	adds	r3, r0, #1
    3516:	d0f5      	beq.n	3504 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3518:	a90e      	add	r1, sp, #56	; 0x38
    351a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    351c:	0c00      	lsrs	r0, r0, #16
    351e:	b2c0      	uxtb	r0, r0
    3520:	4b1d      	ldr	r3, [pc, #116]	; (3598 <usart_init+0x334>)
    3522:	4798      	blx	r3
    3524:	e7ee      	b.n	3504 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    3526:	2300      	movs	r3, #0
    3528:	60eb      	str	r3, [r5, #12]
    352a:	612b      	str	r3, [r5, #16]
    352c:	616b      	str	r3, [r5, #20]
    352e:	61ab      	str	r3, [r5, #24]
    3530:	61eb      	str	r3, [r5, #28]
    3532:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    3534:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3536:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3538:	2200      	movs	r2, #0
    353a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    353c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    353e:	3330      	adds	r3, #48	; 0x30
    3540:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    3542:	3301      	adds	r3, #1
    3544:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    3546:	3301      	adds	r3, #1
    3548:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    354a:	3301      	adds	r3, #1
    354c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    354e:	6828      	ldr	r0, [r5, #0]
    3550:	4b07      	ldr	r3, [pc, #28]	; (3570 <usart_init+0x30c>)
    3552:	4798      	blx	r3
    3554:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3556:	4911      	ldr	r1, [pc, #68]	; (359c <usart_init+0x338>)
    3558:	4b11      	ldr	r3, [pc, #68]	; (35a0 <usart_init+0x33c>)
    355a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    355c:	00a4      	lsls	r4, r4, #2
    355e:	4b11      	ldr	r3, [pc, #68]	; (35a4 <usart_init+0x340>)
    3560:	50e5      	str	r5, [r4, r3]
	return status_code;
    3562:	2000      	movs	r0, #0
    3564:	e691      	b.n	328a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3566:	2310      	movs	r3, #16
    3568:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    356a:	2300      	movs	r3, #0
    356c:	9307      	str	r3, [sp, #28]
    356e:	e6e8      	b.n	3342 <usart_init+0xde>
    3570:	0000453d 	.word	0x0000453d
    3574:	40000400 	.word	0x40000400
    3578:	00005111 	.word	0x00005111
    357c:	00005085 	.word	0x00005085
    3580:	00004379 	.word	0x00004379
    3584:	41002000 	.word	0x41002000
    3588:	0000512d 	.word	0x0000512d
    358c:	000042bb 	.word	0x000042bb
    3590:	000042e5 	.word	0x000042e5
    3594:	000043c5 	.word	0x000043c5
    3598:	00005209 	.word	0x00005209
    359c:	000036dd 	.word	0x000036dd
    35a0:	00004579 	.word	0x00004579
    35a4:	20000b30 	.word	0x20000b30

000035a8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    35a8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    35aa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    35ac:	2a00      	cmp	r2, #0
    35ae:	d101      	bne.n	35b4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    35b0:	0018      	movs	r0, r3
    35b2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    35b4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    35b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    35b8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    35ba:	2a00      	cmp	r2, #0
    35bc:	d1f8      	bne.n	35b0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    35be:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    35c0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    35c2:	2a00      	cmp	r2, #0
    35c4:	d1fc      	bne.n	35c0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    35c6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    35c8:	2102      	movs	r1, #2
    35ca:	7e1a      	ldrb	r2, [r3, #24]
    35cc:	420a      	tst	r2, r1
    35ce:	d0fc      	beq.n	35ca <usart_write_wait+0x22>
	return STATUS_OK;
    35d0:	2300      	movs	r3, #0
    35d2:	e7ed      	b.n	35b0 <usart_write_wait+0x8>

000035d4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    35d4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    35d6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    35d8:	2a00      	cmp	r2, #0
    35da:	d101      	bne.n	35e0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    35dc:	0018      	movs	r0, r3
    35de:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    35e0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    35e2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    35e4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    35e6:	2a00      	cmp	r2, #0
    35e8:	d1f8      	bne.n	35dc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    35ea:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    35ec:	7e10      	ldrb	r0, [r2, #24]
    35ee:	0740      	lsls	r0, r0, #29
    35f0:	d5f4      	bpl.n	35dc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    35f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    35f4:	2b00      	cmp	r3, #0
    35f6:	d1fc      	bne.n	35f2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    35f8:	8b53      	ldrh	r3, [r2, #26]
    35fa:	b2db      	uxtb	r3, r3
	if (error_code) {
    35fc:	0698      	lsls	r0, r3, #26
    35fe:	d01d      	beq.n	363c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    3600:	0798      	lsls	r0, r3, #30
    3602:	d503      	bpl.n	360c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3604:	2302      	movs	r3, #2
    3606:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    3608:	3318      	adds	r3, #24
    360a:	e7e7      	b.n	35dc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    360c:	0758      	lsls	r0, r3, #29
    360e:	d503      	bpl.n	3618 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3610:	2304      	movs	r3, #4
    3612:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    3614:	331a      	adds	r3, #26
    3616:	e7e1      	b.n	35dc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3618:	07d8      	lsls	r0, r3, #31
    361a:	d503      	bpl.n	3624 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    361c:	2301      	movs	r3, #1
    361e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    3620:	3312      	adds	r3, #18
    3622:	e7db      	b.n	35dc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    3624:	06d8      	lsls	r0, r3, #27
    3626:	d503      	bpl.n	3630 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3628:	2310      	movs	r3, #16
    362a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    362c:	3332      	adds	r3, #50	; 0x32
    362e:	e7d5      	b.n	35dc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    3630:	069b      	lsls	r3, r3, #26
    3632:	d503      	bpl.n	363c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3634:	2320      	movs	r3, #32
    3636:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    3638:	3321      	adds	r3, #33	; 0x21
    363a:	e7cf      	b.n	35dc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    363c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    363e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    3640:	2300      	movs	r3, #0
    3642:	e7cb      	b.n	35dc <usart_read_wait+0x8>

00003644 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3644:	b5f0      	push	{r4, r5, r6, r7, lr}
    3646:	46d6      	mov	lr, sl
    3648:	b500      	push	{lr}
    364a:	b084      	sub	sp, #16
    364c:	0004      	movs	r4, r0
    364e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3650:	2017      	movs	r0, #23
	if (length == 0) {
    3652:	2a00      	cmp	r2, #0
    3654:	d103      	bne.n	365e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    3656:	b004      	add	sp, #16
    3658:	bc04      	pop	{r2}
    365a:	4692      	mov	sl, r2
    365c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    365e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    3660:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    3662:	2b00      	cmp	r3, #0
    3664:	d0f7      	beq.n	3656 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3666:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    3668:	3a01      	subs	r2, #1
    366a:	b293      	uxth	r3, r2
    366c:	469a      	mov	sl, r3
    366e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    3670:	2704      	movs	r7, #4
    3672:	e019      	b.n	36a8 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    3674:	2300      	movs	r3, #0
    3676:	aa02      	add	r2, sp, #8
    3678:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    367a:	1d91      	adds	r1, r2, #6
    367c:	0020      	movs	r0, r4
    367e:	4b15      	ldr	r3, [pc, #84]	; (36d4 <usart_read_buffer_wait+0x90>)
    3680:	4798      	blx	r3
		if (retval != STATUS_OK) {
    3682:	2800      	cmp	r0, #0
    3684:	d1e7      	bne.n	3656 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    3686:	1c69      	adds	r1, r5, #1
    3688:	b289      	uxth	r1, r1
    368a:	ab02      	add	r3, sp, #8
    368c:	88db      	ldrh	r3, [r3, #6]
    368e:	9a01      	ldr	r2, [sp, #4]
    3690:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3692:	7962      	ldrb	r2, [r4, #5]
    3694:	2a01      	cmp	r2, #1
    3696:	d014      	beq.n	36c2 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    3698:	000d      	movs	r5, r1
	while (length--) {
    369a:	4653      	mov	r3, sl
    369c:	3b01      	subs	r3, #1
    369e:	b29b      	uxth	r3, r3
    36a0:	469a      	mov	sl, r3
    36a2:	4b0d      	ldr	r3, [pc, #52]	; (36d8 <usart_read_buffer_wait+0x94>)
    36a4:	459a      	cmp	sl, r3
    36a6:	d0d6      	beq.n	3656 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    36a8:	7e33      	ldrb	r3, [r6, #24]
    36aa:	423b      	tst	r3, r7
    36ac:	d1e2      	bne.n	3674 <usart_read_buffer_wait+0x30>
    36ae:	4b0a      	ldr	r3, [pc, #40]	; (36d8 <usart_read_buffer_wait+0x94>)
    36b0:	7e32      	ldrb	r2, [r6, #24]
    36b2:	423a      	tst	r2, r7
    36b4:	d1de      	bne.n	3674 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    36b6:	2b01      	cmp	r3, #1
    36b8:	d009      	beq.n	36ce <usart_read_buffer_wait+0x8a>
    36ba:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    36bc:	2b00      	cmp	r3, #0
    36be:	d1f7      	bne.n	36b0 <usart_read_buffer_wait+0x6c>
    36c0:	e7d8      	b.n	3674 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    36c2:	3502      	adds	r5, #2
    36c4:	b2ad      	uxth	r5, r5
    36c6:	0a1b      	lsrs	r3, r3, #8
    36c8:	9a01      	ldr	r2, [sp, #4]
    36ca:	5453      	strb	r3, [r2, r1]
    36cc:	e7e5      	b.n	369a <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    36ce:	2012      	movs	r0, #18
    36d0:	e7c1      	b.n	3656 <usart_read_buffer_wait+0x12>
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	000035d5 	.word	0x000035d5
    36d8:	0000ffff 	.word	0x0000ffff

000036dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    36dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    36de:	0080      	lsls	r0, r0, #2
    36e0:	4b62      	ldr	r3, [pc, #392]	; (386c <_usart_interrupt_handler+0x190>)
    36e2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    36e4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    36e6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    36e8:	2b00      	cmp	r3, #0
    36ea:	d1fc      	bne.n	36e6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    36ec:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    36ee:	7da6      	ldrb	r6, [r4, #22]
    36f0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    36f2:	2330      	movs	r3, #48	; 0x30
    36f4:	5ceb      	ldrb	r3, [r5, r3]
    36f6:	2231      	movs	r2, #49	; 0x31
    36f8:	5caf      	ldrb	r7, [r5, r2]
    36fa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    36fc:	07f3      	lsls	r3, r6, #31
    36fe:	d522      	bpl.n	3746 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    3700:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3702:	b29b      	uxth	r3, r3
    3704:	2b00      	cmp	r3, #0
    3706:	d01c      	beq.n	3742 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3708:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    370a:	7813      	ldrb	r3, [r2, #0]
    370c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    370e:	1c51      	adds	r1, r2, #1
    3710:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3712:	7969      	ldrb	r1, [r5, #5]
    3714:	2901      	cmp	r1, #1
    3716:	d00e      	beq.n	3736 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3718:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    371a:	05db      	lsls	r3, r3, #23
    371c:	0ddb      	lsrs	r3, r3, #23
    371e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3720:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3722:	3b01      	subs	r3, #1
    3724:	b29b      	uxth	r3, r3
    3726:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3728:	2b00      	cmp	r3, #0
    372a:	d10c      	bne.n	3746 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    372c:	3301      	adds	r3, #1
    372e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3730:	3301      	adds	r3, #1
    3732:	75a3      	strb	r3, [r4, #22]
    3734:	e007      	b.n	3746 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3736:	7851      	ldrb	r1, [r2, #1]
    3738:	0209      	lsls	r1, r1, #8
    373a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    373c:	3202      	adds	r2, #2
    373e:	62aa      	str	r2, [r5, #40]	; 0x28
    3740:	e7eb      	b.n	371a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3742:	2301      	movs	r3, #1
    3744:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3746:	07b3      	lsls	r3, r6, #30
    3748:	d506      	bpl.n	3758 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    374a:	2302      	movs	r3, #2
    374c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    374e:	2200      	movs	r2, #0
    3750:	3331      	adds	r3, #49	; 0x31
    3752:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3754:	07fb      	lsls	r3, r7, #31
    3756:	d41a      	bmi.n	378e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3758:	0773      	lsls	r3, r6, #29
    375a:	d565      	bpl.n	3828 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    375c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    375e:	b29b      	uxth	r3, r3
    3760:	2b00      	cmp	r3, #0
    3762:	d05f      	beq.n	3824 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3764:	8b63      	ldrh	r3, [r4, #26]
    3766:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3768:	071a      	lsls	r2, r3, #28
    376a:	d414      	bmi.n	3796 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    376c:	223f      	movs	r2, #63	; 0x3f
    376e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3770:	2b00      	cmp	r3, #0
    3772:	d034      	beq.n	37de <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3774:	079a      	lsls	r2, r3, #30
    3776:	d511      	bpl.n	379c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3778:	221a      	movs	r2, #26
    377a:	2332      	movs	r3, #50	; 0x32
    377c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    377e:	3b30      	subs	r3, #48	; 0x30
    3780:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3782:	077b      	lsls	r3, r7, #29
    3784:	d550      	bpl.n	3828 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3786:	0028      	movs	r0, r5
    3788:	696b      	ldr	r3, [r5, #20]
    378a:	4798      	blx	r3
    378c:	e04c      	b.n	3828 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    378e:	0028      	movs	r0, r5
    3790:	68eb      	ldr	r3, [r5, #12]
    3792:	4798      	blx	r3
    3794:	e7e0      	b.n	3758 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3796:	2237      	movs	r2, #55	; 0x37
    3798:	4013      	ands	r3, r2
    379a:	e7e9      	b.n	3770 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    379c:	075a      	lsls	r2, r3, #29
    379e:	d505      	bpl.n	37ac <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    37a0:	221e      	movs	r2, #30
    37a2:	2332      	movs	r3, #50	; 0x32
    37a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    37a6:	3b2e      	subs	r3, #46	; 0x2e
    37a8:	8363      	strh	r3, [r4, #26]
    37aa:	e7ea      	b.n	3782 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    37ac:	07da      	lsls	r2, r3, #31
    37ae:	d505      	bpl.n	37bc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    37b0:	2213      	movs	r2, #19
    37b2:	2332      	movs	r3, #50	; 0x32
    37b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    37b6:	3b31      	subs	r3, #49	; 0x31
    37b8:	8363      	strh	r3, [r4, #26]
    37ba:	e7e2      	b.n	3782 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    37bc:	06da      	lsls	r2, r3, #27
    37be:	d505      	bpl.n	37cc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    37c0:	2242      	movs	r2, #66	; 0x42
    37c2:	2332      	movs	r3, #50	; 0x32
    37c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    37c6:	3b22      	subs	r3, #34	; 0x22
    37c8:	8363      	strh	r3, [r4, #26]
    37ca:	e7da      	b.n	3782 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    37cc:	2220      	movs	r2, #32
    37ce:	421a      	tst	r2, r3
    37d0:	d0d7      	beq.n	3782 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    37d2:	3221      	adds	r2, #33	; 0x21
    37d4:	2332      	movs	r3, #50	; 0x32
    37d6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    37d8:	3b12      	subs	r3, #18
    37da:	8363      	strh	r3, [r4, #26]
    37dc:	e7d1      	b.n	3782 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    37de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    37e0:	05db      	lsls	r3, r3, #23
    37e2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    37e4:	b2da      	uxtb	r2, r3
    37e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    37e8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    37ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    37ec:	1c51      	adds	r1, r2, #1
    37ee:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    37f0:	7969      	ldrb	r1, [r5, #5]
    37f2:	2901      	cmp	r1, #1
    37f4:	d010      	beq.n	3818 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    37f6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    37f8:	3b01      	subs	r3, #1
    37fa:	b29b      	uxth	r3, r3
    37fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    37fe:	2b00      	cmp	r3, #0
    3800:	d112      	bne.n	3828 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3802:	3304      	adds	r3, #4
    3804:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    3806:	2200      	movs	r2, #0
    3808:	332e      	adds	r3, #46	; 0x2e
    380a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    380c:	07bb      	lsls	r3, r7, #30
    380e:	d50b      	bpl.n	3828 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3810:	0028      	movs	r0, r5
    3812:	692b      	ldr	r3, [r5, #16]
    3814:	4798      	blx	r3
    3816:	e007      	b.n	3828 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3818:	0a1b      	lsrs	r3, r3, #8
    381a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    381c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    381e:	3301      	adds	r3, #1
    3820:	626b      	str	r3, [r5, #36]	; 0x24
    3822:	e7e8      	b.n	37f6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3824:	2304      	movs	r3, #4
    3826:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3828:	06f3      	lsls	r3, r6, #27
    382a:	d504      	bpl.n	3836 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    382c:	2310      	movs	r3, #16
    382e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3830:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3832:	06fb      	lsls	r3, r7, #27
    3834:	d40e      	bmi.n	3854 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3836:	06b3      	lsls	r3, r6, #26
    3838:	d504      	bpl.n	3844 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    383a:	2320      	movs	r3, #32
    383c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    383e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3840:	073b      	lsls	r3, r7, #28
    3842:	d40b      	bmi.n	385c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3844:	0733      	lsls	r3, r6, #28
    3846:	d504      	bpl.n	3852 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3848:	2308      	movs	r3, #8
    384a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    384c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    384e:	06bb      	lsls	r3, r7, #26
    3850:	d408      	bmi.n	3864 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    3852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3854:	0028      	movs	r0, r5
    3856:	69eb      	ldr	r3, [r5, #28]
    3858:	4798      	blx	r3
    385a:	e7ec      	b.n	3836 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    385c:	0028      	movs	r0, r5
    385e:	69ab      	ldr	r3, [r5, #24]
    3860:	4798      	blx	r3
    3862:	e7ef      	b.n	3844 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3864:	6a2b      	ldr	r3, [r5, #32]
    3866:	0028      	movs	r0, r5
    3868:	4798      	blx	r3
}
    386a:	e7f2      	b.n	3852 <_usart_interrupt_handler+0x176>
    386c:	20000b30 	.word	0x20000b30

00003870 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3870:	b5f0      	push	{r4, r5, r6, r7, lr}
    3872:	46c6      	mov	lr, r8
    3874:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    3876:	0080      	lsls	r0, r0, #2
    3878:	4b0e      	ldr	r3, [pc, #56]	; (38b4 <_tcc_interrupt_handler+0x44>)
    387a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    387c:	683b      	ldr	r3, [r7, #0]
    387e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    3880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3884:	4013      	ands	r3, r2
    3886:	401e      	ands	r6, r3
    3888:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    388a:	4b0b      	ldr	r3, [pc, #44]	; (38b8 <_tcc_interrupt_handler+0x48>)
    388c:	4698      	mov	r8, r3
    388e:	e002      	b.n	3896 <_tcc_interrupt_handler+0x26>
    3890:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    3892:	2c30      	cmp	r4, #48	; 0x30
    3894:	d00a      	beq.n	38ac <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    3896:	4643      	mov	r3, r8
    3898:	58e5      	ldr	r5, [r4, r3]
    389a:	4235      	tst	r5, r6
    389c:	d0f8      	beq.n	3890 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    389e:	193b      	adds	r3, r7, r4
    38a0:	685b      	ldr	r3, [r3, #4]
    38a2:	0038      	movs	r0, r7
    38a4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    38a6:	683b      	ldr	r3, [r7, #0]
    38a8:	62dd      	str	r5, [r3, #44]	; 0x2c
    38aa:	e7f1      	b.n	3890 <_tcc_interrupt_handler+0x20>
		}
	}
}
    38ac:	bc04      	pop	{r2}
    38ae:	4690      	mov	r8, r2
    38b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	20000ad4 	.word	0x20000ad4
    38b8:	00009ea4 	.word	0x00009ea4

000038bc <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    38bc:	b510      	push	{r4, lr}
    38be:	2000      	movs	r0, #0
    38c0:	4b01      	ldr	r3, [pc, #4]	; (38c8 <TCC0_Handler+0xc>)
    38c2:	4798      	blx	r3
    38c4:	bd10      	pop	{r4, pc}
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	00003871 	.word	0x00003871

000038cc <TCC1_Handler>:
    38cc:	b510      	push	{r4, lr}
    38ce:	2001      	movs	r0, #1
    38d0:	4b01      	ldr	r3, [pc, #4]	; (38d8 <TCC1_Handler+0xc>)
    38d2:	4798      	blx	r3
    38d4:	bd10      	pop	{r4, pc}
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	00003871 	.word	0x00003871

000038dc <TCC2_Handler>:
    38dc:	b510      	push	{r4, lr}
    38de:	2002      	movs	r0, #2
    38e0:	4b01      	ldr	r3, [pc, #4]	; (38e8 <TCC2_Handler+0xc>)
    38e2:	4798      	blx	r3
    38e4:	bd10      	pop	{r4, pc}
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	00003871 	.word	0x00003871

000038ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    38ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ee:	46c6      	mov	lr, r8
    38f0:	b500      	push	{lr}
    38f2:	000c      	movs	r4, r1
    38f4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    38f6:	2800      	cmp	r0, #0
    38f8:	d10f      	bne.n	391a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    38fa:	2a00      	cmp	r2, #0
    38fc:	dd11      	ble.n	3922 <_read+0x36>
    38fe:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3900:	4e09      	ldr	r6, [pc, #36]	; (3928 <_read+0x3c>)
    3902:	4d0a      	ldr	r5, [pc, #40]	; (392c <_read+0x40>)
    3904:	6830      	ldr	r0, [r6, #0]
    3906:	0021      	movs	r1, r4
    3908:	682b      	ldr	r3, [r5, #0]
    390a:	4798      	blx	r3
		ptr++;
    390c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    390e:	42bc      	cmp	r4, r7
    3910:	d1f8      	bne.n	3904 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3912:	4640      	mov	r0, r8
    3914:	bc04      	pop	{r2}
    3916:	4690      	mov	r8, r2
    3918:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    391a:	2301      	movs	r3, #1
    391c:	425b      	negs	r3, r3
    391e:	4698      	mov	r8, r3
    3920:	e7f7      	b.n	3912 <_read+0x26>
	for (; len > 0; --len) {
    3922:	4680      	mov	r8, r0
    3924:	e7f5      	b.n	3912 <_read+0x26>
    3926:	46c0      	nop			; (mov r8, r8)
    3928:	20000ae8 	.word	0x20000ae8
    392c:	20000ae0 	.word	0x20000ae0

00003930 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3930:	b5f0      	push	{r4, r5, r6, r7, lr}
    3932:	46c6      	mov	lr, r8
    3934:	b500      	push	{lr}
    3936:	000e      	movs	r6, r1
    3938:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    393a:	3801      	subs	r0, #1
    393c:	2802      	cmp	r0, #2
    393e:	d810      	bhi.n	3962 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3940:	2a00      	cmp	r2, #0
    3942:	d011      	beq.n	3968 <_write+0x38>
    3944:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3946:	4b0c      	ldr	r3, [pc, #48]	; (3978 <_write+0x48>)
    3948:	4698      	mov	r8, r3
    394a:	4f0c      	ldr	r7, [pc, #48]	; (397c <_write+0x4c>)
    394c:	4643      	mov	r3, r8
    394e:	6818      	ldr	r0, [r3, #0]
    3950:	5d31      	ldrb	r1, [r6, r4]
    3952:	683b      	ldr	r3, [r7, #0]
    3954:	4798      	blx	r3
    3956:	2800      	cmp	r0, #0
    3958:	db08      	blt.n	396c <_write+0x3c>
			return -1;
		}
		++nChars;
    395a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    395c:	42a5      	cmp	r5, r4
    395e:	d1f5      	bne.n	394c <_write+0x1c>
    3960:	e006      	b.n	3970 <_write+0x40>
		return -1;
    3962:	2401      	movs	r4, #1
    3964:	4264      	negs	r4, r4
    3966:	e003      	b.n	3970 <_write+0x40>
	for (; len != 0; --len) {
    3968:	0014      	movs	r4, r2
    396a:	e001      	b.n	3970 <_write+0x40>
			return -1;
    396c:	2401      	movs	r4, #1
    396e:	4264      	negs	r4, r4
	}
	return nChars;
}
    3970:	0020      	movs	r0, r4
    3972:	bc04      	pop	{r2}
    3974:	4690      	mov	r8, r2
    3976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3978:	20000ae8 	.word	0x20000ae8
    397c:	20000ae4 	.word	0x20000ae4

00003980 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3980:	b570      	push	{r4, r5, r6, lr}
    3982:	b082      	sub	sp, #8
    3984:	0005      	movs	r5, r0
    3986:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3988:	2200      	movs	r2, #0
    398a:	466b      	mov	r3, sp
    398c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    398e:	4c06      	ldr	r4, [pc, #24]	; (39a8 <usart_serial_getchar+0x28>)
    3990:	466b      	mov	r3, sp
    3992:	1d99      	adds	r1, r3, #6
    3994:	0028      	movs	r0, r5
    3996:	47a0      	blx	r4
    3998:	2800      	cmp	r0, #0
    399a:	d1f9      	bne.n	3990 <usart_serial_getchar+0x10>

	*c = temp;
    399c:	466b      	mov	r3, sp
    399e:	3306      	adds	r3, #6
    39a0:	881b      	ldrh	r3, [r3, #0]
    39a2:	7033      	strb	r3, [r6, #0]
}
    39a4:	b002      	add	sp, #8
    39a6:	bd70      	pop	{r4, r5, r6, pc}
    39a8:	000035d5 	.word	0x000035d5

000039ac <usart_serial_putchar>:
{
    39ac:	b570      	push	{r4, r5, r6, lr}
    39ae:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    39b0:	b28c      	uxth	r4, r1
    39b2:	4e03      	ldr	r6, [pc, #12]	; (39c0 <usart_serial_putchar+0x14>)
    39b4:	0021      	movs	r1, r4
    39b6:	0028      	movs	r0, r5
    39b8:	47b0      	blx	r6
    39ba:	2800      	cmp	r0, #0
    39bc:	d1fa      	bne.n	39b4 <usart_serial_putchar+0x8>
}
    39be:	bd70      	pop	{r4, r5, r6, pc}
    39c0:	000035a9 	.word	0x000035a9

000039c4 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    39c4:	b510      	push	{r4, lr}
    39c6:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    39c8:	466b      	mov	r3, sp
    39ca:	1ddc      	adds	r4, r3, #7
    39cc:	2201      	movs	r2, #1
    39ce:	0021      	movs	r1, r4
    39d0:	480f      	ldr	r0, [pc, #60]	; (3a10 <USART_HOST_ISR_VECT+0x4c>)
    39d2:	4b10      	ldr	r3, [pc, #64]	; (3a14 <USART_HOST_ISR_VECT+0x50>)
    39d4:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    39d6:	b672      	cpsid	i
    39d8:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    39dc:	2200      	movs	r2, #0
    39de:	4b0e      	ldr	r3, [pc, #56]	; (3a18 <USART_HOST_ISR_VECT+0x54>)
    39e0:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    39e2:	4b0e      	ldr	r3, [pc, #56]	; (3a1c <USART_HOST_ISR_VECT+0x58>)
    39e4:	781b      	ldrb	r3, [r3, #0]
    39e6:	7821      	ldrb	r1, [r4, #0]
    39e8:	4a0d      	ldr	r2, [pc, #52]	; (3a20 <USART_HOST_ISR_VECT+0x5c>)
    39ea:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    39ec:	2b9b      	cmp	r3, #155	; 0x9b
    39ee:	d00a      	beq.n	3a06 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    39f0:	3301      	adds	r3, #1
    39f2:	4a0a      	ldr	r2, [pc, #40]	; (3a1c <USART_HOST_ISR_VECT+0x58>)
    39f4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    39f6:	2201      	movs	r2, #1
    39f8:	4b07      	ldr	r3, [pc, #28]	; (3a18 <USART_HOST_ISR_VECT+0x54>)
    39fa:	701a      	strb	r2, [r3, #0]
    39fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a00:	b662      	cpsie	i
}
    3a02:	b002      	add	sp, #8
    3a04:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    3a06:	2200      	movs	r2, #0
    3a08:	4b04      	ldr	r3, [pc, #16]	; (3a1c <USART_HOST_ISR_VECT+0x58>)
    3a0a:	701a      	strb	r2, [r3, #0]
    3a0c:	e7f3      	b.n	39f6 <USART_HOST_ISR_VECT+0x32>
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	200000ac 	.word	0x200000ac
    3a14:	00003645 	.word	0x00003645
    3a18:	2000000c 	.word	0x2000000c
    3a1c:	20000180 	.word	0x20000180
    3a20:	200000e4 	.word	0x200000e4

00003a24 <sio2host_init>:
{
    3a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a26:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3a28:	2380      	movs	r3, #128	; 0x80
    3a2a:	05db      	lsls	r3, r3, #23
    3a2c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3a2e:	2300      	movs	r3, #0
    3a30:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3a32:	22ff      	movs	r2, #255	; 0xff
    3a34:	4669      	mov	r1, sp
    3a36:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3a38:	2200      	movs	r2, #0
    3a3a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3a3c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3a3e:	2401      	movs	r4, #1
    3a40:	2124      	movs	r1, #36	; 0x24
    3a42:	4668      	mov	r0, sp
    3a44:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3a46:	3101      	adds	r1, #1
    3a48:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3a4a:	3101      	adds	r1, #1
    3a4c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3a4e:	3101      	adds	r1, #1
    3a50:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3a52:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3a54:	3105      	adds	r1, #5
    3a56:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3a58:	3101      	adds	r1, #1
    3a5a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3a5c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3a5e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3a60:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3a62:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3a64:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3a66:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3a68:	2313      	movs	r3, #19
    3a6a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3a6c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3a6e:	2380      	movs	r3, #128	; 0x80
    3a70:	035b      	lsls	r3, r3, #13
    3a72:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3a74:	4b2f      	ldr	r3, [pc, #188]	; (3b34 <sio2host_init+0x110>)
    3a76:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3a78:	4b2f      	ldr	r3, [pc, #188]	; (3b38 <sio2host_init+0x114>)
    3a7a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3a7c:	2301      	movs	r3, #1
    3a7e:	425b      	negs	r3, r3
    3a80:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3a82:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    3a84:	23e1      	movs	r3, #225	; 0xe1
    3a86:	025b      	lsls	r3, r3, #9
    3a88:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3a8a:	4d2c      	ldr	r5, [pc, #176]	; (3b3c <sio2host_init+0x118>)
    3a8c:	4b2c      	ldr	r3, [pc, #176]	; (3b40 <sio2host_init+0x11c>)
    3a8e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3a90:	4a2c      	ldr	r2, [pc, #176]	; (3b44 <sio2host_init+0x120>)
    3a92:	4b2d      	ldr	r3, [pc, #180]	; (3b48 <sio2host_init+0x124>)
    3a94:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3a96:	4a2d      	ldr	r2, [pc, #180]	; (3b4c <sio2host_init+0x128>)
    3a98:	4b2d      	ldr	r3, [pc, #180]	; (3b50 <sio2host_init+0x12c>)
    3a9a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3a9c:	466a      	mov	r2, sp
    3a9e:	492d      	ldr	r1, [pc, #180]	; (3b54 <sio2host_init+0x130>)
    3aa0:	0028      	movs	r0, r5
    3aa2:	4b2d      	ldr	r3, [pc, #180]	; (3b58 <sio2host_init+0x134>)
    3aa4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3aa6:	4f2d      	ldr	r7, [pc, #180]	; (3b5c <sio2host_init+0x138>)
    3aa8:	683b      	ldr	r3, [r7, #0]
    3aaa:	6898      	ldr	r0, [r3, #8]
    3aac:	2100      	movs	r1, #0
    3aae:	4e2c      	ldr	r6, [pc, #176]	; (3b60 <sio2host_init+0x13c>)
    3ab0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3ab2:	683b      	ldr	r3, [r7, #0]
    3ab4:	6858      	ldr	r0, [r3, #4]
    3ab6:	2100      	movs	r1, #0
    3ab8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3aba:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3abc:	0030      	movs	r0, r6
    3abe:	4b29      	ldr	r3, [pc, #164]	; (3b64 <sio2host_init+0x140>)
    3ac0:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3ac2:	231f      	movs	r3, #31
    3ac4:	4018      	ands	r0, r3
    3ac6:	4084      	lsls	r4, r0
    3ac8:	4b27      	ldr	r3, [pc, #156]	; (3b68 <sio2host_init+0x144>)
    3aca:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3acc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3ace:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d1fc      	bne.n	3ace <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3ad4:	6833      	ldr	r3, [r6, #0]
    3ad6:	2202      	movs	r2, #2
    3ad8:	4313      	orrs	r3, r2
    3ada:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3adc:	4b17      	ldr	r3, [pc, #92]	; (3b3c <sio2host_init+0x118>)
    3ade:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3ae0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3ae2:	2a00      	cmp	r2, #0
    3ae4:	d1fc      	bne.n	3ae0 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3ae6:	6859      	ldr	r1, [r3, #4]
    3ae8:	2280      	movs	r2, #128	; 0x80
    3aea:	0252      	lsls	r2, r2, #9
    3aec:	430a      	orrs	r2, r1
    3aee:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3af0:	2101      	movs	r1, #1
    3af2:	4a12      	ldr	r2, [pc, #72]	; (3b3c <sio2host_init+0x118>)
    3af4:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3af6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3af8:	2a00      	cmp	r2, #0
    3afa:	d1fc      	bne.n	3af6 <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    3afc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3afe:	2a00      	cmp	r2, #0
    3b00:	d1fc      	bne.n	3afc <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3b02:	6859      	ldr	r1, [r3, #4]
    3b04:	2280      	movs	r2, #128	; 0x80
    3b06:	0292      	lsls	r2, r2, #10
    3b08:	430a      	orrs	r2, r1
    3b0a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3b0c:	2101      	movs	r1, #1
    3b0e:	4a0b      	ldr	r2, [pc, #44]	; (3b3c <sio2host_init+0x118>)
    3b10:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3b12:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b14:	2a00      	cmp	r2, #0
    3b16:	d1fc      	bne.n	3b12 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    3b18:	4914      	ldr	r1, [pc, #80]	; (3b6c <sio2host_init+0x148>)
    3b1a:	2000      	movs	r0, #0
    3b1c:	4b14      	ldr	r3, [pc, #80]	; (3b70 <sio2host_init+0x14c>)
    3b1e:	4798      	blx	r3
    3b20:	2204      	movs	r2, #4
    3b22:	4b0c      	ldr	r3, [pc, #48]	; (3b54 <sio2host_init+0x130>)
    3b24:	759a      	strb	r2, [r3, #22]
    3b26:	32fd      	adds	r2, #253	; 0xfd
    3b28:	32ff      	adds	r2, #255	; 0xff
    3b2a:	4b0f      	ldr	r3, [pc, #60]	; (3b68 <sio2host_init+0x144>)
    3b2c:	601a      	str	r2, [r3, #0]
}
    3b2e:	b011      	add	sp, #68	; 0x44
    3b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	00040003 	.word	0x00040003
    3b38:	00050003 	.word	0x00050003
    3b3c:	200000ac 	.word	0x200000ac
    3b40:	20000ae8 	.word	0x20000ae8
    3b44:	000039ad 	.word	0x000039ad
    3b48:	20000ae4 	.word	0x20000ae4
    3b4c:	00003981 	.word	0x00003981
    3b50:	20000ae0 	.word	0x20000ae0
    3b54:	42000800 	.word	0x42000800
    3b58:	00003265 	.word	0x00003265
    3b5c:	20000010 	.word	0x20000010
    3b60:	00008049 	.word	0x00008049
    3b64:	000045b5 	.word	0x000045b5
    3b68:	e000e100 	.word	0xe000e100
    3b6c:	000039c5 	.word	0x000039c5
    3b70:	00004579 	.word	0x00004579

00003b74 <sio2host_tx>:
{
    3b74:	b570      	push	{r4, r5, r6, lr}
    3b76:	000c      	movs	r4, r1
	for(count=0;count<length;count++)
    3b78:	2200      	movs	r2, #0
    3b7a:	4b85      	ldr	r3, [pc, #532]	; (3d90 <sio2host_tx+0x21c>)
    3b7c:	601a      	str	r2, [r3, #0]
    3b7e:	2900      	cmp	r1, #0
    3b80:	dd08      	ble.n	3b94 <sio2host_tx+0x20>
    3b82:	2300      	movs	r3, #0
		pt[count]=*(data+count);
    3b84:	4d83      	ldr	r5, [pc, #524]	; (3d94 <sio2host_tx+0x220>)
    3b86:	5cc2      	ldrb	r2, [r0, r3]
    3b88:	555a      	strb	r2, [r3, r5]
    3b8a:	3301      	adds	r3, #1
	for(count=0;count<length;count++)
    3b8c:	428b      	cmp	r3, r1
    3b8e:	dbfa      	blt.n	3b86 <sio2host_tx+0x12>
    3b90:	4b7f      	ldr	r3, [pc, #508]	; (3d90 <sio2host_tx+0x21c>)
    3b92:	601c      	str	r4, [r3, #0]
	if(strcmp(pt,"#1c")==0){buff[0]='#';buff[1]='1';buff[2]='c';}
    3b94:	4980      	ldr	r1, [pc, #512]	; (3d98 <sio2host_tx+0x224>)
    3b96:	487f      	ldr	r0, [pc, #508]	; (3d94 <sio2host_tx+0x220>)
    3b98:	4b80      	ldr	r3, [pc, #512]	; (3d9c <sio2host_tx+0x228>)
    3b9a:	4798      	blx	r3
    3b9c:	2800      	cmp	r0, #0
    3b9e:	d049      	beq.n	3c34 <sio2host_tx+0xc0>
	else if(strcmp(pt,"#1o")==0){buff[0]='#';buff[1]='1';buff[2]='o';}
    3ba0:	497f      	ldr	r1, [pc, #508]	; (3da0 <sio2host_tx+0x22c>)
    3ba2:	487c      	ldr	r0, [pc, #496]	; (3d94 <sio2host_tx+0x220>)
    3ba4:	4b7d      	ldr	r3, [pc, #500]	; (3d9c <sio2host_tx+0x228>)
    3ba6:	4798      	blx	r3
    3ba8:	2800      	cmp	r0, #0
    3baa:	d04c      	beq.n	3c46 <sio2host_tx+0xd2>
	else if(strcmp(pt,"#1e")==0){buff[0]='#';buff[1]='1';buff[2]='e';}	
    3bac:	497d      	ldr	r1, [pc, #500]	; (3da4 <sio2host_tx+0x230>)
    3bae:	4879      	ldr	r0, [pc, #484]	; (3d94 <sio2host_tx+0x220>)
    3bb0:	4b7a      	ldr	r3, [pc, #488]	; (3d9c <sio2host_tx+0x228>)
    3bb2:	4798      	blx	r3
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d04e      	beq.n	3c56 <sio2host_tx+0xe2>
	else if(strcmp(pt,"#2c")==0){buff[0]='#';buff[1]='2';buff[2]='c';}
    3bb8:	497b      	ldr	r1, [pc, #492]	; (3da8 <sio2host_tx+0x234>)
    3bba:	4876      	ldr	r0, [pc, #472]	; (3d94 <sio2host_tx+0x220>)
    3bbc:	4b77      	ldr	r3, [pc, #476]	; (3d9c <sio2host_tx+0x228>)
    3bbe:	4798      	blx	r3
    3bc0:	2800      	cmp	r0, #0
    3bc2:	d050      	beq.n	3c66 <sio2host_tx+0xf2>
	else if(strcmp(pt,"#2o")==0){buff[0]='#';buff[1]='2';buff[2]='o';}
    3bc4:	4979      	ldr	r1, [pc, #484]	; (3dac <sio2host_tx+0x238>)
    3bc6:	4873      	ldr	r0, [pc, #460]	; (3d94 <sio2host_tx+0x220>)
    3bc8:	4b74      	ldr	r3, [pc, #464]	; (3d9c <sio2host_tx+0x228>)
    3bca:	4798      	blx	r3
    3bcc:	2800      	cmp	r0, #0
    3bce:	d052      	beq.n	3c76 <sio2host_tx+0x102>
	else if(strcmp(pt,"#2e")==0){buff[0]='#';buff[1]='2';buff[2]='e';}
    3bd0:	4977      	ldr	r1, [pc, #476]	; (3db0 <sio2host_tx+0x23c>)
    3bd2:	4870      	ldr	r0, [pc, #448]	; (3d94 <sio2host_tx+0x220>)
    3bd4:	4b71      	ldr	r3, [pc, #452]	; (3d9c <sio2host_tx+0x228>)
    3bd6:	4798      	blx	r3
    3bd8:	2800      	cmp	r0, #0
    3bda:	d054      	beq.n	3c86 <sio2host_tx+0x112>
	else if(strcmp(pt,"#3c")==0){buff[0]='#';buff[1]='3';buff[2]='c';}
    3bdc:	4975      	ldr	r1, [pc, #468]	; (3db4 <sio2host_tx+0x240>)
    3bde:	486d      	ldr	r0, [pc, #436]	; (3d94 <sio2host_tx+0x220>)
    3be0:	4b6e      	ldr	r3, [pc, #440]	; (3d9c <sio2host_tx+0x228>)
    3be2:	4798      	blx	r3
    3be4:	2800      	cmp	r0, #0
    3be6:	d056      	beq.n	3c96 <sio2host_tx+0x122>
	else if(strcmp(pt,"#3o")==0){buff[0]='#';buff[1]='3';buff[2]='o';}
    3be8:	4973      	ldr	r1, [pc, #460]	; (3db8 <sio2host_tx+0x244>)
    3bea:	486a      	ldr	r0, [pc, #424]	; (3d94 <sio2host_tx+0x220>)
    3bec:	4b6b      	ldr	r3, [pc, #428]	; (3d9c <sio2host_tx+0x228>)
    3bee:	4798      	blx	r3
    3bf0:	2800      	cmp	r0, #0
    3bf2:	d058      	beq.n	3ca6 <sio2host_tx+0x132>
	else if(strcmp(pt,"#3e")==0){buff[0]='#';buff[1]='3';buff[2]='e';}
    3bf4:	4971      	ldr	r1, [pc, #452]	; (3dbc <sio2host_tx+0x248>)
    3bf6:	4867      	ldr	r0, [pc, #412]	; (3d94 <sio2host_tx+0x220>)
    3bf8:	4b68      	ldr	r3, [pc, #416]	; (3d9c <sio2host_tx+0x228>)
    3bfa:	4798      	blx	r3
    3bfc:	2800      	cmp	r0, #0
    3bfe:	d05a      	beq.n	3cb6 <sio2host_tx+0x142>
	else if(strcmp(pt,"#4c")==0){buff[0]='#';buff[1]='4';buff[2]='c';}
    3c00:	496f      	ldr	r1, [pc, #444]	; (3dc0 <sio2host_tx+0x24c>)
    3c02:	4864      	ldr	r0, [pc, #400]	; (3d94 <sio2host_tx+0x220>)
    3c04:	4b65      	ldr	r3, [pc, #404]	; (3d9c <sio2host_tx+0x228>)
    3c06:	4798      	blx	r3
    3c08:	2800      	cmp	r0, #0
    3c0a:	d05c      	beq.n	3cc6 <sio2host_tx+0x152>
	else if(strcmp(pt,"#4o")==0){buff[0]='#';buff[1]='4';buff[2]='o';}
    3c0c:	496d      	ldr	r1, [pc, #436]	; (3dc4 <sio2host_tx+0x250>)
    3c0e:	4861      	ldr	r0, [pc, #388]	; (3d94 <sio2host_tx+0x220>)
    3c10:	4b62      	ldr	r3, [pc, #392]	; (3d9c <sio2host_tx+0x228>)
    3c12:	4798      	blx	r3
    3c14:	2800      	cmp	r0, #0
    3c16:	d05e      	beq.n	3cd6 <sio2host_tx+0x162>
	else if(strcmp(pt,"#4e")==0){buff[0]='#';buff[1]='4';buff[2]='e';}	
    3c18:	496b      	ldr	r1, [pc, #428]	; (3dc8 <sio2host_tx+0x254>)
    3c1a:	485e      	ldr	r0, [pc, #376]	; (3d94 <sio2host_tx+0x220>)
    3c1c:	4b5f      	ldr	r3, [pc, #380]	; (3d9c <sio2host_tx+0x228>)
    3c1e:	4798      	blx	r3
    3c20:	2800      	cmp	r0, #0
    3c22:	d160      	bne.n	3ce6 <sio2host_tx+0x172>
    3c24:	4b69      	ldr	r3, [pc, #420]	; (3dcc <sio2host_tx+0x258>)
    3c26:	2223      	movs	r2, #35	; 0x23
    3c28:	701a      	strb	r2, [r3, #0]
    3c2a:	3211      	adds	r2, #17
    3c2c:	705a      	strb	r2, [r3, #1]
    3c2e:	3231      	adds	r2, #49	; 0x31
    3c30:	709a      	strb	r2, [r3, #2]
    3c32:	e006      	b.n	3c42 <sio2host_tx+0xce>
	if(strcmp(pt,"#1c")==0){buff[0]='#';buff[1]='1';buff[2]='c';}
    3c34:	4b65      	ldr	r3, [pc, #404]	; (3dcc <sio2host_tx+0x258>)
    3c36:	2223      	movs	r2, #35	; 0x23
    3c38:	701a      	strb	r2, [r3, #0]
    3c3a:	320e      	adds	r2, #14
    3c3c:	705a      	strb	r2, [r3, #1]
    3c3e:	3232      	adds	r2, #50	; 0x32
    3c40:	709a      	strb	r2, [r3, #2]
}
    3c42:	0020      	movs	r0, r4
    3c44:	bd70      	pop	{r4, r5, r6, pc}
	else if(strcmp(pt,"#1o")==0){buff[0]='#';buff[1]='1';buff[2]='o';}
    3c46:	4b61      	ldr	r3, [pc, #388]	; (3dcc <sio2host_tx+0x258>)
    3c48:	2223      	movs	r2, #35	; 0x23
    3c4a:	701a      	strb	r2, [r3, #0]
    3c4c:	320e      	adds	r2, #14
    3c4e:	705a      	strb	r2, [r3, #1]
    3c50:	323e      	adds	r2, #62	; 0x3e
    3c52:	709a      	strb	r2, [r3, #2]
    3c54:	e7f5      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#1e")==0){buff[0]='#';buff[1]='1';buff[2]='e';}	
    3c56:	4b5d      	ldr	r3, [pc, #372]	; (3dcc <sio2host_tx+0x258>)
    3c58:	2223      	movs	r2, #35	; 0x23
    3c5a:	701a      	strb	r2, [r3, #0]
    3c5c:	320e      	adds	r2, #14
    3c5e:	705a      	strb	r2, [r3, #1]
    3c60:	3234      	adds	r2, #52	; 0x34
    3c62:	709a      	strb	r2, [r3, #2]
    3c64:	e7ed      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#2c")==0){buff[0]='#';buff[1]='2';buff[2]='c';}
    3c66:	4b59      	ldr	r3, [pc, #356]	; (3dcc <sio2host_tx+0x258>)
    3c68:	2223      	movs	r2, #35	; 0x23
    3c6a:	701a      	strb	r2, [r3, #0]
    3c6c:	320f      	adds	r2, #15
    3c6e:	705a      	strb	r2, [r3, #1]
    3c70:	3231      	adds	r2, #49	; 0x31
    3c72:	709a      	strb	r2, [r3, #2]
    3c74:	e7e5      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#2o")==0){buff[0]='#';buff[1]='2';buff[2]='o';}
    3c76:	4b55      	ldr	r3, [pc, #340]	; (3dcc <sio2host_tx+0x258>)
    3c78:	2223      	movs	r2, #35	; 0x23
    3c7a:	701a      	strb	r2, [r3, #0]
    3c7c:	320f      	adds	r2, #15
    3c7e:	705a      	strb	r2, [r3, #1]
    3c80:	323d      	adds	r2, #61	; 0x3d
    3c82:	709a      	strb	r2, [r3, #2]
    3c84:	e7dd      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#2e")==0){buff[0]='#';buff[1]='2';buff[2]='e';}
    3c86:	4b51      	ldr	r3, [pc, #324]	; (3dcc <sio2host_tx+0x258>)
    3c88:	2223      	movs	r2, #35	; 0x23
    3c8a:	701a      	strb	r2, [r3, #0]
    3c8c:	320f      	adds	r2, #15
    3c8e:	705a      	strb	r2, [r3, #1]
    3c90:	3233      	adds	r2, #51	; 0x33
    3c92:	709a      	strb	r2, [r3, #2]
    3c94:	e7d5      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#3c")==0){buff[0]='#';buff[1]='3';buff[2]='c';}
    3c96:	4b4d      	ldr	r3, [pc, #308]	; (3dcc <sio2host_tx+0x258>)
    3c98:	2223      	movs	r2, #35	; 0x23
    3c9a:	701a      	strb	r2, [r3, #0]
    3c9c:	3210      	adds	r2, #16
    3c9e:	705a      	strb	r2, [r3, #1]
    3ca0:	3230      	adds	r2, #48	; 0x30
    3ca2:	709a      	strb	r2, [r3, #2]
    3ca4:	e7cd      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#3o")==0){buff[0]='#';buff[1]='3';buff[2]='o';}
    3ca6:	4b49      	ldr	r3, [pc, #292]	; (3dcc <sio2host_tx+0x258>)
    3ca8:	2223      	movs	r2, #35	; 0x23
    3caa:	701a      	strb	r2, [r3, #0]
    3cac:	3210      	adds	r2, #16
    3cae:	705a      	strb	r2, [r3, #1]
    3cb0:	323c      	adds	r2, #60	; 0x3c
    3cb2:	709a      	strb	r2, [r3, #2]
    3cb4:	e7c5      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#3e")==0){buff[0]='#';buff[1]='3';buff[2]='e';}
    3cb6:	4b45      	ldr	r3, [pc, #276]	; (3dcc <sio2host_tx+0x258>)
    3cb8:	2223      	movs	r2, #35	; 0x23
    3cba:	701a      	strb	r2, [r3, #0]
    3cbc:	3210      	adds	r2, #16
    3cbe:	705a      	strb	r2, [r3, #1]
    3cc0:	3232      	adds	r2, #50	; 0x32
    3cc2:	709a      	strb	r2, [r3, #2]
    3cc4:	e7bd      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#4c")==0){buff[0]='#';buff[1]='4';buff[2]='c';}
    3cc6:	4b41      	ldr	r3, [pc, #260]	; (3dcc <sio2host_tx+0x258>)
    3cc8:	2223      	movs	r2, #35	; 0x23
    3cca:	701a      	strb	r2, [r3, #0]
    3ccc:	3211      	adds	r2, #17
    3cce:	705a      	strb	r2, [r3, #1]
    3cd0:	322f      	adds	r2, #47	; 0x2f
    3cd2:	709a      	strb	r2, [r3, #2]
    3cd4:	e7b5      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#4o")==0){buff[0]='#';buff[1]='4';buff[2]='o';}
    3cd6:	4b3d      	ldr	r3, [pc, #244]	; (3dcc <sio2host_tx+0x258>)
    3cd8:	2223      	movs	r2, #35	; 0x23
    3cda:	701a      	strb	r2, [r3, #0]
    3cdc:	3211      	adds	r2, #17
    3cde:	705a      	strb	r2, [r3, #1]
    3ce0:	323b      	adds	r2, #59	; 0x3b
    3ce2:	709a      	strb	r2, [r3, #2]
    3ce4:	e7ad      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#5c")==0){buff[0]='#';buff[1]='5';buff[2]='c';}
    3ce6:	493a      	ldr	r1, [pc, #232]	; (3dd0 <sio2host_tx+0x25c>)
    3ce8:	482a      	ldr	r0, [pc, #168]	; (3d94 <sio2host_tx+0x220>)
    3cea:	4b2c      	ldr	r3, [pc, #176]	; (3d9c <sio2host_tx+0x228>)
    3cec:	4798      	blx	r3
    3cee:	2800      	cmp	r0, #0
    3cf0:	d107      	bne.n	3d02 <sio2host_tx+0x18e>
    3cf2:	4b36      	ldr	r3, [pc, #216]	; (3dcc <sio2host_tx+0x258>)
    3cf4:	2223      	movs	r2, #35	; 0x23
    3cf6:	701a      	strb	r2, [r3, #0]
    3cf8:	3212      	adds	r2, #18
    3cfa:	705a      	strb	r2, [r3, #1]
    3cfc:	322e      	adds	r2, #46	; 0x2e
    3cfe:	709a      	strb	r2, [r3, #2]
    3d00:	e79f      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#5o")==0){buff[0]='#';buff[1]='5';buff[2]='o';}
    3d02:	4934      	ldr	r1, [pc, #208]	; (3dd4 <sio2host_tx+0x260>)
    3d04:	4823      	ldr	r0, [pc, #140]	; (3d94 <sio2host_tx+0x220>)
    3d06:	4b25      	ldr	r3, [pc, #148]	; (3d9c <sio2host_tx+0x228>)
    3d08:	4798      	blx	r3
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d019      	beq.n	3d42 <sio2host_tx+0x1ce>
	else if(strcmp(pt,"#5e")==0){buff[0]='#';buff[1]='5';buff[2]='e';}	
    3d0e:	4932      	ldr	r1, [pc, #200]	; (3dd8 <sio2host_tx+0x264>)
    3d10:	4820      	ldr	r0, [pc, #128]	; (3d94 <sio2host_tx+0x220>)
    3d12:	4b22      	ldr	r3, [pc, #136]	; (3d9c <sio2host_tx+0x228>)
    3d14:	4798      	blx	r3
    3d16:	2800      	cmp	r0, #0
    3d18:	d01b      	beq.n	3d52 <sio2host_tx+0x1de>
	else if(strcmp(pt,"#6c")==0){buff[0]='#';buff[1]='6';buff[2]='c';}
    3d1a:	4930      	ldr	r1, [pc, #192]	; (3ddc <sio2host_tx+0x268>)
    3d1c:	481d      	ldr	r0, [pc, #116]	; (3d94 <sio2host_tx+0x220>)
    3d1e:	4b1f      	ldr	r3, [pc, #124]	; (3d9c <sio2host_tx+0x228>)
    3d20:	4798      	blx	r3
    3d22:	2800      	cmp	r0, #0
    3d24:	d01d      	beq.n	3d62 <sio2host_tx+0x1ee>
	else if(strcmp(pt,"#6o")==0){buff[0]='#';buff[1]='6';buff[2]='o';}
    3d26:	492e      	ldr	r1, [pc, #184]	; (3de0 <sio2host_tx+0x26c>)
    3d28:	481a      	ldr	r0, [pc, #104]	; (3d94 <sio2host_tx+0x220>)
    3d2a:	4b1c      	ldr	r3, [pc, #112]	; (3d9c <sio2host_tx+0x228>)
    3d2c:	4798      	blx	r3
    3d2e:	2800      	cmp	r0, #0
    3d30:	d11f      	bne.n	3d72 <sio2host_tx+0x1fe>
    3d32:	4b26      	ldr	r3, [pc, #152]	; (3dcc <sio2host_tx+0x258>)
    3d34:	2223      	movs	r2, #35	; 0x23
    3d36:	701a      	strb	r2, [r3, #0]
    3d38:	3213      	adds	r2, #19
    3d3a:	705a      	strb	r2, [r3, #1]
    3d3c:	3239      	adds	r2, #57	; 0x39
    3d3e:	709a      	strb	r2, [r3, #2]
    3d40:	e77f      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#5o")==0){buff[0]='#';buff[1]='5';buff[2]='o';}
    3d42:	4b22      	ldr	r3, [pc, #136]	; (3dcc <sio2host_tx+0x258>)
    3d44:	2223      	movs	r2, #35	; 0x23
    3d46:	701a      	strb	r2, [r3, #0]
    3d48:	3212      	adds	r2, #18
    3d4a:	705a      	strb	r2, [r3, #1]
    3d4c:	323a      	adds	r2, #58	; 0x3a
    3d4e:	709a      	strb	r2, [r3, #2]
    3d50:	e777      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#5e")==0){buff[0]='#';buff[1]='5';buff[2]='e';}	
    3d52:	4b1e      	ldr	r3, [pc, #120]	; (3dcc <sio2host_tx+0x258>)
    3d54:	2223      	movs	r2, #35	; 0x23
    3d56:	701a      	strb	r2, [r3, #0]
    3d58:	3212      	adds	r2, #18
    3d5a:	705a      	strb	r2, [r3, #1]
    3d5c:	3230      	adds	r2, #48	; 0x30
    3d5e:	709a      	strb	r2, [r3, #2]
    3d60:	e76f      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#6c")==0){buff[0]='#';buff[1]='6';buff[2]='c';}
    3d62:	4b1a      	ldr	r3, [pc, #104]	; (3dcc <sio2host_tx+0x258>)
    3d64:	2223      	movs	r2, #35	; 0x23
    3d66:	701a      	strb	r2, [r3, #0]
    3d68:	3213      	adds	r2, #19
    3d6a:	705a      	strb	r2, [r3, #1]
    3d6c:	322d      	adds	r2, #45	; 0x2d
    3d6e:	709a      	strb	r2, [r3, #2]
    3d70:	e767      	b.n	3c42 <sio2host_tx+0xce>
	else if(strcmp(pt,"#6e")==0){buff[0]='#';buff[1]='6';buff[2]='e';}
    3d72:	491c      	ldr	r1, [pc, #112]	; (3de4 <sio2host_tx+0x270>)
    3d74:	4807      	ldr	r0, [pc, #28]	; (3d94 <sio2host_tx+0x220>)
    3d76:	4b09      	ldr	r3, [pc, #36]	; (3d9c <sio2host_tx+0x228>)
    3d78:	4798      	blx	r3
    3d7a:	2800      	cmp	r0, #0
    3d7c:	d000      	beq.n	3d80 <sio2host_tx+0x20c>
    3d7e:	e760      	b.n	3c42 <sio2host_tx+0xce>
    3d80:	4b12      	ldr	r3, [pc, #72]	; (3dcc <sio2host_tx+0x258>)
    3d82:	2223      	movs	r2, #35	; 0x23
    3d84:	701a      	strb	r2, [r3, #0]
    3d86:	3213      	adds	r2, #19
    3d88:	705a      	strb	r2, [r3, #1]
    3d8a:	322f      	adds	r2, #47	; 0x2f
    3d8c:	709a      	strb	r2, [r3, #2]
    3d8e:	e758      	b.n	3c42 <sio2host_tx+0xce>
    3d90:	200000a8 	.word	0x200000a8
    3d94:	200000e0 	.word	0x200000e0
    3d98:	00009ed4 	.word	0x00009ed4
    3d9c:	000081b5 	.word	0x000081b5
    3da0:	00009ed8 	.word	0x00009ed8
    3da4:	00009edc 	.word	0x00009edc
    3da8:	00009ee0 	.word	0x00009ee0
    3dac:	00009ee4 	.word	0x00009ee4
    3db0:	00009ee8 	.word	0x00009ee8
    3db4:	00009eec 	.word	0x00009eec
    3db8:	00009ef0 	.word	0x00009ef0
    3dbc:	00009ef4 	.word	0x00009ef4
    3dc0:	00009ef8 	.word	0x00009ef8
    3dc4:	00009efc 	.word	0x00009efc
    3dc8:	00009f00 	.word	0x00009f00
    3dcc:	200003c0 	.word	0x200003c0
    3dd0:	00009f04 	.word	0x00009f04
    3dd4:	00009f08 	.word	0x00009f08
    3dd8:	00009f0c 	.word	0x00009f0c
    3ddc:	00009f10 	.word	0x00009f10
    3de0:	00009f14 	.word	0x00009f14
    3de4:	00009f18 	.word	0x00009f18

00003de8 <usr_frame_received_cb>:
/**
* \brief This function needs to be edited by the user for adding  tasks when a frame is received
* \param frame pointer to the received frame
*/
void usr_frame_received_cb(frame_info_t *frame)
{
    3de8:	b510      	push	{r4, lr}
//	printf("\n\r RX:");
	sio2host_tx(&(frame->mpdu[FRAME_OVERHEAD-FCS_LEN+1]),(frame->mpdu[0])-FRAME_OVERHEAD);
    3dea:	7a42      	ldrb	r2, [r0, #9]
    3dec:	7a83      	ldrb	r3, [r0, #10]
    3dee:	021b      	lsls	r3, r3, #8
    3df0:	431a      	orrs	r2, r3
    3df2:	7ac3      	ldrb	r3, [r0, #11]
    3df4:	041b      	lsls	r3, r3, #16
    3df6:	4313      	orrs	r3, r2
    3df8:	7b00      	ldrb	r0, [r0, #12]
    3dfa:	0600      	lsls	r0, r0, #24
    3dfc:	4318      	orrs	r0, r3
    3dfe:	7801      	ldrb	r1, [r0, #0]
    3e00:	390b      	subs	r1, #11
    3e02:	b2c9      	uxtb	r1, r1
    3e04:	300a      	adds	r0, #10
    3e06:	4b01      	ldr	r3, [pc, #4]	; (3e0c <usr_frame_received_cb+0x24>)
    3e08:	4798      	blx	r3
}
    3e0a:	bd10      	pop	{r4, pc}
    3e0c:	00003b75 	.word	0x00003b75

00003e10 <usr_frame_transmitted_cb>:
void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
	//TODO (Project Wizard) - Add application taks when the frame is transmitted
	/* Toggle an LED in user-interface */
	/* led_toggle(); */
}
    3e10:	4770      	bx	lr
	...

00003e14 <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
    3e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e16:	b083      	sub	sp, #12
	/*Initialize IRQ*/
	irq_initialize_vectors();

//	system_init();
	system_board_init();
    3e18:	4b12      	ldr	r3, [pc, #72]	; (3e64 <wireless_init+0x50>)
    3e1a:	4798      	blx	r3

    delay_init();
    3e1c:	4b12      	ldr	r3, [pc, #72]	; (3e68 <wireless_init+0x54>)
    3e1e:	4798      	blx	r3

	/*Initialize the Stack SW Timer*/
	//sw_timer_init();
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
    3e20:	4b12      	ldr	r3, [pc, #72]	; (3e6c <wireless_init+0x58>)
    3e22:	4798      	blx	r3
    3e24:	2800      	cmp	r0, #0
    3e26:	d11c      	bne.n	3e62 <wireless_init+0x4e>
		//Error in Initializing the TAL Layer
		app_alert();	
	}
//	cpu_irq_enable();
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
    3e28:	466b      	mov	r3, sp
    3e2a:	1d99      	adds	r1, r3, #6
    3e2c:	2302      	movs	r3, #2
    3e2e:	800b      	strh	r3, [r1, #0]
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
    3e30:	af01      	add	r7, sp, #4
    3e32:	4b0f      	ldr	r3, [pc, #60]	; (3e70 <wireless_init+0x5c>)
    3e34:	803b      	strh	r3, [r7, #0]
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
    3e36:	466b      	mov	r3, sp
    3e38:	1cde      	adds	r6, r3, #3
    3e3a:	230b      	movs	r3, #11
    3e3c:	7033      	strb	r3, [r6, #0]
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
    3e3e:	466b      	mov	r3, sp
    3e40:	1c9d      	adds	r5, r3, #2
    3e42:	2300      	movs	r3, #0
    3e44:	702b      	strb	r3, [r5, #0]
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
    3e46:	2053      	movs	r0, #83	; 0x53
    3e48:	4c0a      	ldr	r4, [pc, #40]	; (3e74 <wireless_init+0x60>)
    3e4a:	47a0      	blx	r4

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
    3e4c:	0039      	movs	r1, r7
    3e4e:	2050      	movs	r0, #80	; 0x50
    3e50:	47a0      	blx	r4

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
    3e52:	0031      	movs	r1, r6
    3e54:	2000      	movs	r0, #0
    3e56:	47a0      	blx	r4
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
    3e58:	0029      	movs	r1, r5
    3e5a:	2004      	movs	r0, #4
    3e5c:	47a0      	blx	r4
    }
    #endif
*/

//	init_data_reception();
}
    3e5e:	b003      	add	sp, #12
    3e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e62:	e7fe      	b.n	3e62 <wireless_init+0x4e>
    3e64:	00003e89 	.word	0x00003e89
    3e68:	00003f05 	.word	0x00003f05
    3e6c:	00006215 	.word	0x00006215
    3e70:	00005678 	.word	0x00005678
    3e74:	00006505 	.word	0x00006505

00003e78 <init_data_reception>:
/** 
 * \brief The Receiver is switched on Using this function,
  * When PROMISCUOUS_MODE is enabled the receiver is put in RX_ON mode ,else it is switched on in RX_AACK_ON Mode
 */
void init_data_reception()
{
    3e78:	b510      	push	{r4, lr}
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
    3e7a:	2006      	movs	r0, #6
    3e7c:	4b01      	ldr	r3, [pc, #4]	; (3e84 <init_data_reception+0xc>)
    3e7e:	4798      	blx	r3
}
    3e80:	bd10      	pop	{r4, pc}
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	0000685d 	.word	0x0000685d

00003e88 <system_board_init>:
#  pragma weak board_init=system_board_init
#endif


void system_board_init(void)
{
    3e88:	b570      	push	{r4, r5, r6, lr}
    3e8a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    3e8c:	ac01      	add	r4, sp, #4
    3e8e:	2301      	movs	r3, #1
    3e90:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    3e92:	2600      	movs	r6, #0
    3e94:	70a6      	strb	r6, [r4, #2]
	 * specific board configuration, found in conf_board.h.
	 */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3e96:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    3e98:	0021      	movs	r1, r4
    3e9a:	2052      	movs	r0, #82	; 0x52
    3e9c:	4d12      	ldr	r5, [pc, #72]	; (3ee8 <system_board_init+0x60>)
    3e9e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    3ea0:	0021      	movs	r1, r4
    3ea2:	203e      	movs	r0, #62	; 0x3e
    3ea4:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    3ea6:	0021      	movs	r1, r4
    3ea8:	203f      	movs	r0, #63	; 0x3f
    3eaa:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    3eac:	0021      	movs	r1, r4
    3eae:	202f      	movs	r0, #47	; 0x2f
    3eb0:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    3eb2:	0021      	movs	r1, r4
    3eb4:	2014      	movs	r0, #20
    3eb6:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    3eb8:	2280      	movs	r2, #128	; 0x80
    3eba:	02d2      	lsls	r2, r2, #11
    3ebc:	4b0b      	ldr	r3, [pc, #44]	; (3eec <system_board_init+0x64>)
    3ebe:	619a      	str	r2, [r3, #24]
    3ec0:	4b0b      	ldr	r3, [pc, #44]	; (3ef0 <system_board_init+0x68>)
    3ec2:	2280      	movs	r2, #128	; 0x80
    3ec4:	05d2      	lsls	r2, r2, #23
    3ec6:	619a      	str	r2, [r3, #24]
    3ec8:	2280      	movs	r2, #128	; 0x80
    3eca:	0612      	lsls	r2, r2, #24
    3ecc:	619a      	str	r2, [r3, #24]
    3ece:	2280      	movs	r2, #128	; 0x80
    3ed0:	0212      	lsls	r2, r2, #8
    3ed2:	619a      	str	r2, [r3, #24]
    3ed4:	2280      	movs	r2, #128	; 0x80
    3ed6:	0352      	lsls	r2, r2, #13
    3ed8:	4b06      	ldr	r3, [pc, #24]	; (3ef4 <system_board_init+0x6c>)
    3eda:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3edc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    3ede:	0021      	movs	r1, r4
    3ee0:	2053      	movs	r0, #83	; 0x53
    3ee2:	47a8      	blx	r5
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
*/
}
    3ee4:	b002      	add	sp, #8
    3ee6:	bd70      	pop	{r4, r5, r6, pc}
    3ee8:	000041dd 	.word	0x000041dd
    3eec:	41004500 	.word	0x41004500
    3ef0:	41004480 	.word	0x41004480
    3ef4:	41004400 	.word	0x41004400

00003ef8 <modules_init>:

void modules_init(void)
{
    3ef8:	b510      	push	{r4, lr}
	sio2host_init();
    3efa:	4b01      	ldr	r3, [pc, #4]	; (3f00 <modules_init+0x8>)
    3efc:	4798      	blx	r3
}
    3efe:	bd10      	pop	{r4, pc}
    3f00:	00003a25 	.word	0x00003a25

00003f04 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    3f04:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    3f06:	2000      	movs	r0, #0
    3f08:	4b08      	ldr	r3, [pc, #32]	; (3f2c <delay_init+0x28>)
    3f0a:	4798      	blx	r3
    3f0c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    3f0e:	4c08      	ldr	r4, [pc, #32]	; (3f30 <delay_init+0x2c>)
    3f10:	21fa      	movs	r1, #250	; 0xfa
    3f12:	0089      	lsls	r1, r1, #2
    3f14:	47a0      	blx	r4
    3f16:	4b07      	ldr	r3, [pc, #28]	; (3f34 <delay_init+0x30>)
    3f18:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    3f1a:	4907      	ldr	r1, [pc, #28]	; (3f38 <delay_init+0x34>)
    3f1c:	0028      	movs	r0, r5
    3f1e:	47a0      	blx	r4
    3f20:	4b06      	ldr	r3, [pc, #24]	; (3f3c <delay_init+0x38>)
    3f22:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3f24:	2205      	movs	r2, #5
    3f26:	4b06      	ldr	r3, [pc, #24]	; (3f40 <delay_init+0x3c>)
    3f28:	601a      	str	r2, [r3, #0]
}
    3f2a:	bd70      	pop	{r4, r5, r6, pc}
    3f2c:	00004ff9 	.word	0x00004ff9
    3f30:	00007a99 	.word	0x00007a99
    3f34:	20000004 	.word	0x20000004
    3f38:	000f4240 	.word	0x000f4240
    3f3c:	20000008 	.word	0x20000008
    3f40:	e000e010 	.word	0xe000e010

00003f44 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    3f44:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    3f46:	4b08      	ldr	r3, [pc, #32]	; (3f68 <delay_cycles_us+0x24>)
    3f48:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    3f4a:	4a08      	ldr	r2, [pc, #32]	; (3f6c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    3f4c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3f4e:	2180      	movs	r1, #128	; 0x80
    3f50:	0249      	lsls	r1, r1, #9
	while (n--) {
    3f52:	3801      	subs	r0, #1
    3f54:	d307      	bcc.n	3f66 <delay_cycles_us+0x22>
	if (n > 0) {
    3f56:	2c00      	cmp	r4, #0
    3f58:	d0fb      	beq.n	3f52 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    3f5a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    3f5c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3f5e:	6813      	ldr	r3, [r2, #0]
    3f60:	420b      	tst	r3, r1
    3f62:	d0fc      	beq.n	3f5e <delay_cycles_us+0x1a>
    3f64:	e7f5      	b.n	3f52 <delay_cycles_us+0xe>
	}
}
    3f66:	bd30      	pop	{r4, r5, pc}
    3f68:	20000008 	.word	0x20000008
    3f6c:	e000e010 	.word	0xe000e010

00003f70 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    3f70:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    3f72:	4b08      	ldr	r3, [pc, #32]	; (3f94 <delay_cycles_ms+0x24>)
    3f74:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    3f76:	4a08      	ldr	r2, [pc, #32]	; (3f98 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    3f78:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3f7a:	2180      	movs	r1, #128	; 0x80
    3f7c:	0249      	lsls	r1, r1, #9
	while (n--) {
    3f7e:	3801      	subs	r0, #1
    3f80:	d307      	bcc.n	3f92 <delay_cycles_ms+0x22>
	if (n > 0) {
    3f82:	2c00      	cmp	r4, #0
    3f84:	d0fb      	beq.n	3f7e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    3f86:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    3f88:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3f8a:	6813      	ldr	r3, [r2, #0]
    3f8c:	420b      	tst	r3, r1
    3f8e:	d0fc      	beq.n	3f8a <delay_cycles_ms+0x1a>
    3f90:	e7f5      	b.n	3f7e <delay_cycles_ms+0xe>
	}
}
    3f92:	bd30      	pop	{r4, r5, pc}
    3f94:	20000004 	.word	0x20000004
    3f98:	e000e010 	.word	0xe000e010

00003f9c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3f9c:	4b0c      	ldr	r3, [pc, #48]	; (3fd0 <cpu_irq_enter_critical+0x34>)
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d106      	bne.n	3fb2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3fa4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d007      	beq.n	3fbc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3fac:	2200      	movs	r2, #0
    3fae:	4b09      	ldr	r3, [pc, #36]	; (3fd4 <cpu_irq_enter_critical+0x38>)
    3fb0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3fb2:	4a07      	ldr	r2, [pc, #28]	; (3fd0 <cpu_irq_enter_critical+0x34>)
    3fb4:	6813      	ldr	r3, [r2, #0]
    3fb6:	3301      	adds	r3, #1
    3fb8:	6013      	str	r3, [r2, #0]
}
    3fba:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3fbc:	b672      	cpsid	i
    3fbe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3fc2:	2200      	movs	r2, #0
    3fc4:	4b04      	ldr	r3, [pc, #16]	; (3fd8 <cpu_irq_enter_critical+0x3c>)
    3fc6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3fc8:	3201      	adds	r2, #1
    3fca:	4b02      	ldr	r3, [pc, #8]	; (3fd4 <cpu_irq_enter_critical+0x38>)
    3fcc:	701a      	strb	r2, [r3, #0]
    3fce:	e7f0      	b.n	3fb2 <cpu_irq_enter_critical+0x16>
    3fd0:	20000184 	.word	0x20000184
    3fd4:	20000188 	.word	0x20000188
    3fd8:	2000000c 	.word	0x2000000c

00003fdc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3fdc:	4b08      	ldr	r3, [pc, #32]	; (4000 <cpu_irq_leave_critical+0x24>)
    3fde:	681a      	ldr	r2, [r3, #0]
    3fe0:	3a01      	subs	r2, #1
    3fe2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3fe4:	681b      	ldr	r3, [r3, #0]
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d109      	bne.n	3ffe <cpu_irq_leave_critical+0x22>
    3fea:	4b06      	ldr	r3, [pc, #24]	; (4004 <cpu_irq_leave_critical+0x28>)
    3fec:	781b      	ldrb	r3, [r3, #0]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d005      	beq.n	3ffe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3ff2:	2201      	movs	r2, #1
    3ff4:	4b04      	ldr	r3, [pc, #16]	; (4008 <cpu_irq_leave_critical+0x2c>)
    3ff6:	701a      	strb	r2, [r3, #0]
    3ff8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ffc:	b662      	cpsie	i
	}
}
    3ffe:	4770      	bx	lr
    4000:	20000184 	.word	0x20000184
    4004:	20000188 	.word	0x20000188
    4008:	2000000c 	.word	0x2000000c

0000400c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    400c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    400e:	2a00      	cmp	r2, #0
    4010:	d001      	beq.n	4016 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4012:	0018      	movs	r0, r3
    4014:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4016:	008b      	lsls	r3, r1, #2
    4018:	4a06      	ldr	r2, [pc, #24]	; (4034 <extint_register_callback+0x28>)
    401a:	589b      	ldr	r3, [r3, r2]
    401c:	2b00      	cmp	r3, #0
    401e:	d003      	beq.n	4028 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4020:	4283      	cmp	r3, r0
    4022:	d005      	beq.n	4030 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4024:	231d      	movs	r3, #29
    4026:	e7f4      	b.n	4012 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4028:	0089      	lsls	r1, r1, #2
    402a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    402c:	2300      	movs	r3, #0
    402e:	e7f0      	b.n	4012 <extint_register_callback+0x6>
		return STATUS_OK;
    4030:	2300      	movs	r3, #0
    4032:	e7ee      	b.n	4012 <extint_register_callback+0x6>
    4034:	20000af0 	.word	0x20000af0

00004038 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4038:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    403a:	2900      	cmp	r1, #0
    403c:	d001      	beq.n	4042 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    403e:	0018      	movs	r0, r3
    4040:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4042:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4044:	281f      	cmp	r0, #31
    4046:	d800      	bhi.n	404a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4048:	4a02      	ldr	r2, [pc, #8]	; (4054 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    404a:	2301      	movs	r3, #1
    404c:	4083      	lsls	r3, r0
    404e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4050:	2300      	movs	r3, #0
    4052:	e7f4      	b.n	403e <extint_chan_enable_callback+0x6>
    4054:	40001800 	.word	0x40001800

00004058 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4058:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    405a:	2900      	cmp	r1, #0
    405c:	d001      	beq.n	4062 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    405e:	0018      	movs	r0, r3
    4060:	4770      	bx	lr
		return NULL;
    4062:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4064:	281f      	cmp	r0, #31
    4066:	d800      	bhi.n	406a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4068:	4a02      	ldr	r2, [pc, #8]	; (4074 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    406a:	2301      	movs	r3, #1
    406c:	4083      	lsls	r3, r0
    406e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4070:	2300      	movs	r3, #0
    4072:	e7f4      	b.n	405e <extint_chan_disable_callback+0x6>
    4074:	40001800 	.word	0x40001800

00004078 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4078:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    407a:	2200      	movs	r2, #0
    407c:	4b10      	ldr	r3, [pc, #64]	; (40c0 <EIC_Handler+0x48>)
    407e:	701a      	strb	r2, [r3, #0]
    4080:	2300      	movs	r3, #0
    4082:	4910      	ldr	r1, [pc, #64]	; (40c4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4084:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4086:	4e10      	ldr	r6, [pc, #64]	; (40c8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4088:	4c0d      	ldr	r4, [pc, #52]	; (40c0 <EIC_Handler+0x48>)
    408a:	e00a      	b.n	40a2 <EIC_Handler+0x2a>
		return eics[eic_index];
    408c:	490d      	ldr	r1, [pc, #52]	; (40c4 <EIC_Handler+0x4c>)
    408e:	e008      	b.n	40a2 <EIC_Handler+0x2a>
    4090:	7823      	ldrb	r3, [r4, #0]
    4092:	3301      	adds	r3, #1
    4094:	b2db      	uxtb	r3, r3
    4096:	7023      	strb	r3, [r4, #0]
    4098:	2b0f      	cmp	r3, #15
    409a:	d810      	bhi.n	40be <EIC_Handler+0x46>
		return NULL;
    409c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    409e:	2b1f      	cmp	r3, #31
    40a0:	d9f4      	bls.n	408c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    40a2:	0028      	movs	r0, r5
    40a4:	4018      	ands	r0, r3
    40a6:	2201      	movs	r2, #1
    40a8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    40aa:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    40ac:	4210      	tst	r0, r2
    40ae:	d0ef      	beq.n	4090 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    40b0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    40b2:	009b      	lsls	r3, r3, #2
    40b4:	599b      	ldr	r3, [r3, r6]
    40b6:	2b00      	cmp	r3, #0
    40b8:	d0ea      	beq.n	4090 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    40ba:	4798      	blx	r3
    40bc:	e7e8      	b.n	4090 <EIC_Handler+0x18>
			}
		}
	}
}
    40be:	bd70      	pop	{r4, r5, r6, pc}
    40c0:	20000aec 	.word	0x20000aec
    40c4:	40001800 	.word	0x40001800
    40c8:	20000af0 	.word	0x20000af0

000040cc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    40cc:	4a04      	ldr	r2, [pc, #16]	; (40e0 <_extint_enable+0x14>)
    40ce:	7813      	ldrb	r3, [r2, #0]
    40d0:	2102      	movs	r1, #2
    40d2:	430b      	orrs	r3, r1
    40d4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    40d6:	7853      	ldrb	r3, [r2, #1]
    40d8:	b25b      	sxtb	r3, r3
    40da:	2b00      	cmp	r3, #0
    40dc:	dbfb      	blt.n	40d6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    40de:	4770      	bx	lr
    40e0:	40001800 	.word	0x40001800

000040e4 <_system_extint_init>:
{
    40e4:	b500      	push	{lr}
    40e6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    40e8:	4a12      	ldr	r2, [pc, #72]	; (4134 <_system_extint_init+0x50>)
    40ea:	6993      	ldr	r3, [r2, #24]
    40ec:	2140      	movs	r1, #64	; 0x40
    40ee:	430b      	orrs	r3, r1
    40f0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    40f2:	a901      	add	r1, sp, #4
    40f4:	2300      	movs	r3, #0
    40f6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    40f8:	2005      	movs	r0, #5
    40fa:	4b0f      	ldr	r3, [pc, #60]	; (4138 <_system_extint_init+0x54>)
    40fc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    40fe:	2005      	movs	r0, #5
    4100:	4b0e      	ldr	r3, [pc, #56]	; (413c <_system_extint_init+0x58>)
    4102:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4104:	4a0e      	ldr	r2, [pc, #56]	; (4140 <_system_extint_init+0x5c>)
    4106:	7813      	ldrb	r3, [r2, #0]
    4108:	2101      	movs	r1, #1
    410a:	430b      	orrs	r3, r1
    410c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    410e:	7853      	ldrb	r3, [r2, #1]
    4110:	b25b      	sxtb	r3, r3
    4112:	2b00      	cmp	r3, #0
    4114:	dbfb      	blt.n	410e <_system_extint_init+0x2a>
    4116:	4b0b      	ldr	r3, [pc, #44]	; (4144 <_system_extint_init+0x60>)
    4118:	0019      	movs	r1, r3
    411a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    411c:	2200      	movs	r2, #0
    411e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4120:	4299      	cmp	r1, r3
    4122:	d1fc      	bne.n	411e <_system_extint_init+0x3a>
    4124:	2210      	movs	r2, #16
    4126:	4b08      	ldr	r3, [pc, #32]	; (4148 <_system_extint_init+0x64>)
    4128:	601a      	str	r2, [r3, #0]
	_extint_enable();
    412a:	4b08      	ldr	r3, [pc, #32]	; (414c <_system_extint_init+0x68>)
    412c:	4798      	blx	r3
}
    412e:	b003      	add	sp, #12
    4130:	bd00      	pop	{pc}
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	40000400 	.word	0x40000400
    4138:	00005111 	.word	0x00005111
    413c:	00005085 	.word	0x00005085
    4140:	40001800 	.word	0x40001800
    4144:	20000af0 	.word	0x20000af0
    4148:	e000e100 	.word	0xe000e100
    414c:	000040cd 	.word	0x000040cd

00004150 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4150:	2300      	movs	r3, #0
    4152:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4154:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4156:	2201      	movs	r2, #1
    4158:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    415a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    415c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    415e:	3302      	adds	r3, #2
    4160:	72c3      	strb	r3, [r0, #11]
}
    4162:	4770      	bx	lr

00004164 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4164:	b5f0      	push	{r4, r5, r6, r7, lr}
    4166:	b083      	sub	sp, #12
    4168:	0005      	movs	r5, r0
    416a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    416c:	a901      	add	r1, sp, #4
    416e:	2300      	movs	r3, #0
    4170:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4172:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4174:	7923      	ldrb	r3, [r4, #4]
    4176:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4178:	7a23      	ldrb	r3, [r4, #8]
    417a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    417c:	7820      	ldrb	r0, [r4, #0]
    417e:	4b15      	ldr	r3, [pc, #84]	; (41d4 <extint_chan_set_config+0x70>)
    4180:	4798      	blx	r3
		return NULL;
    4182:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    4184:	2d1f      	cmp	r5, #31
    4186:	d800      	bhi.n	418a <extint_chan_set_config+0x26>
		return eics[eic_index];
    4188:	4813      	ldr	r0, [pc, #76]	; (41d8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    418a:	2207      	movs	r2, #7
    418c:	402a      	ands	r2, r5
    418e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4190:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4192:	7aa3      	ldrb	r3, [r4, #10]
    4194:	2b00      	cmp	r3, #0
    4196:	d001      	beq.n	419c <extint_chan_set_config+0x38>
    4198:	2308      	movs	r3, #8
    419a:	431f      	orrs	r7, r3
    419c:	08eb      	lsrs	r3, r5, #3
    419e:	009b      	lsls	r3, r3, #2
    41a0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    41a2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    41a4:	260f      	movs	r6, #15
    41a6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    41a8:	43b1      	bics	r1, r6
			(new_config << config_pos);
    41aa:	4097      	lsls	r7, r2
    41ac:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    41ae:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    41b0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    41b2:	7a63      	ldrb	r3, [r4, #9]
    41b4:	2b00      	cmp	r3, #0
    41b6:	d106      	bne.n	41c6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    41b8:	6943      	ldr	r3, [r0, #20]
    41ba:	2201      	movs	r2, #1
    41bc:	40aa      	lsls	r2, r5
    41be:	4393      	bics	r3, r2
    41c0:	6143      	str	r3, [r0, #20]
	}
}
    41c2:	b003      	add	sp, #12
    41c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    41c6:	6942      	ldr	r2, [r0, #20]
    41c8:	2301      	movs	r3, #1
    41ca:	40ab      	lsls	r3, r5
    41cc:	4313      	orrs	r3, r2
    41ce:	6143      	str	r3, [r0, #20]
    41d0:	e7f7      	b.n	41c2 <extint_chan_set_config+0x5e>
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	00005209 	.word	0x00005209
    41d8:	40001800 	.word	0x40001800

000041dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    41dc:	b500      	push	{lr}
    41de:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    41e0:	ab01      	add	r3, sp, #4
    41e2:	2280      	movs	r2, #128	; 0x80
    41e4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    41e6:	780a      	ldrb	r2, [r1, #0]
    41e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    41ea:	784a      	ldrb	r2, [r1, #1]
    41ec:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    41ee:	788a      	ldrb	r2, [r1, #2]
    41f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    41f2:	0019      	movs	r1, r3
    41f4:	4b01      	ldr	r3, [pc, #4]	; (41fc <port_pin_set_config+0x20>)
    41f6:	4798      	blx	r3
}
    41f8:	b003      	add	sp, #12
    41fa:	bd00      	pop	{pc}
    41fc:	00005209 	.word	0x00005209

00004200 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4200:	b5f0      	push	{r4, r5, r6, r7, lr}
    4202:	46de      	mov	lr, fp
    4204:	4657      	mov	r7, sl
    4206:	464e      	mov	r6, r9
    4208:	4645      	mov	r5, r8
    420a:	b5e0      	push	{r5, r6, r7, lr}
    420c:	b087      	sub	sp, #28
    420e:	4680      	mov	r8, r0
    4210:	9104      	str	r1, [sp, #16]
    4212:	0016      	movs	r6, r2
    4214:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4216:	2200      	movs	r2, #0
    4218:	2300      	movs	r3, #0
    421a:	2100      	movs	r1, #0
    421c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    421e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4220:	2001      	movs	r0, #1
    4222:	0021      	movs	r1, r4
    4224:	9600      	str	r6, [sp, #0]
    4226:	9701      	str	r7, [sp, #4]
    4228:	465c      	mov	r4, fp
    422a:	9403      	str	r4, [sp, #12]
    422c:	4644      	mov	r4, r8
    422e:	9405      	str	r4, [sp, #20]
    4230:	e013      	b.n	425a <long_division+0x5a>
    4232:	2420      	movs	r4, #32
    4234:	1a64      	subs	r4, r4, r1
    4236:	0005      	movs	r5, r0
    4238:	40e5      	lsrs	r5, r4
    423a:	46a8      	mov	r8, r5
    423c:	e014      	b.n	4268 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    423e:	9c00      	ldr	r4, [sp, #0]
    4240:	9d01      	ldr	r5, [sp, #4]
    4242:	1b12      	subs	r2, r2, r4
    4244:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4246:	465c      	mov	r4, fp
    4248:	464d      	mov	r5, r9
    424a:	432c      	orrs	r4, r5
    424c:	46a3      	mov	fp, r4
    424e:	9c03      	ldr	r4, [sp, #12]
    4250:	4645      	mov	r5, r8
    4252:	432c      	orrs	r4, r5
    4254:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4256:	3901      	subs	r1, #1
    4258:	d325      	bcc.n	42a6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    425a:	2420      	movs	r4, #32
    425c:	4264      	negs	r4, r4
    425e:	190c      	adds	r4, r1, r4
    4260:	d4e7      	bmi.n	4232 <long_division+0x32>
    4262:	0005      	movs	r5, r0
    4264:	40a5      	lsls	r5, r4
    4266:	46a8      	mov	r8, r5
    4268:	0004      	movs	r4, r0
    426a:	408c      	lsls	r4, r1
    426c:	46a1      	mov	r9, r4
		r = r << 1;
    426e:	1892      	adds	r2, r2, r2
    4270:	415b      	adcs	r3, r3
    4272:	0014      	movs	r4, r2
    4274:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4276:	9e05      	ldr	r6, [sp, #20]
    4278:	464f      	mov	r7, r9
    427a:	403e      	ands	r6, r7
    427c:	46b4      	mov	ip, r6
    427e:	9e04      	ldr	r6, [sp, #16]
    4280:	4647      	mov	r7, r8
    4282:	403e      	ands	r6, r7
    4284:	46b2      	mov	sl, r6
    4286:	4666      	mov	r6, ip
    4288:	4657      	mov	r7, sl
    428a:	433e      	orrs	r6, r7
    428c:	d003      	beq.n	4296 <long_division+0x96>
			r |= 0x01;
    428e:	0006      	movs	r6, r0
    4290:	4326      	orrs	r6, r4
    4292:	0032      	movs	r2, r6
    4294:	002b      	movs	r3, r5
		if (r >= d) {
    4296:	9c00      	ldr	r4, [sp, #0]
    4298:	9d01      	ldr	r5, [sp, #4]
    429a:	429d      	cmp	r5, r3
    429c:	d8db      	bhi.n	4256 <long_division+0x56>
    429e:	d1ce      	bne.n	423e <long_division+0x3e>
    42a0:	4294      	cmp	r4, r2
    42a2:	d8d8      	bhi.n	4256 <long_division+0x56>
    42a4:	e7cb      	b.n	423e <long_division+0x3e>
    42a6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    42a8:	4658      	mov	r0, fp
    42aa:	0019      	movs	r1, r3
    42ac:	b007      	add	sp, #28
    42ae:	bc3c      	pop	{r2, r3, r4, r5}
    42b0:	4690      	mov	r8, r2
    42b2:	4699      	mov	r9, r3
    42b4:	46a2      	mov	sl, r4
    42b6:	46ab      	mov	fp, r5
    42b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000042ba <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    42ba:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    42bc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    42be:	2340      	movs	r3, #64	; 0x40
    42c0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    42c2:	4281      	cmp	r1, r0
    42c4:	d202      	bcs.n	42cc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    42c6:	0018      	movs	r0, r3
    42c8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    42ca:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    42cc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    42ce:	1c63      	adds	r3, r4, #1
    42d0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    42d2:	4288      	cmp	r0, r1
    42d4:	d9f9      	bls.n	42ca <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    42d6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    42d8:	2cff      	cmp	r4, #255	; 0xff
    42da:	d8f4      	bhi.n	42c6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    42dc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    42de:	2300      	movs	r3, #0
    42e0:	e7f1      	b.n	42c6 <_sercom_get_sync_baud_val+0xc>
	...

000042e4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    42e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42e6:	b083      	sub	sp, #12
    42e8:	000f      	movs	r7, r1
    42ea:	0016      	movs	r6, r2
    42ec:	aa08      	add	r2, sp, #32
    42ee:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    42f0:	0004      	movs	r4, r0
    42f2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    42f4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    42f6:	42bc      	cmp	r4, r7
    42f8:	d902      	bls.n	4300 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    42fa:	0010      	movs	r0, r2
    42fc:	b003      	add	sp, #12
    42fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4300:	2b00      	cmp	r3, #0
    4302:	d114      	bne.n	432e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4304:	0002      	movs	r2, r0
    4306:	0008      	movs	r0, r1
    4308:	2100      	movs	r1, #0
    430a:	4c19      	ldr	r4, [pc, #100]	; (4370 <_sercom_get_async_baud_val+0x8c>)
    430c:	47a0      	blx	r4
    430e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4310:	003a      	movs	r2, r7
    4312:	2300      	movs	r3, #0
    4314:	2000      	movs	r0, #0
    4316:	4c17      	ldr	r4, [pc, #92]	; (4374 <_sercom_get_async_baud_val+0x90>)
    4318:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    431a:	2200      	movs	r2, #0
    431c:	2301      	movs	r3, #1
    431e:	1a12      	subs	r2, r2, r0
    4320:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4322:	0c12      	lsrs	r2, r2, #16
    4324:	041b      	lsls	r3, r3, #16
    4326:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4328:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    432a:	2200      	movs	r2, #0
    432c:	e7e5      	b.n	42fa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    432e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4330:	2b01      	cmp	r3, #1
    4332:	d1f9      	bne.n	4328 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4334:	000a      	movs	r2, r1
    4336:	2300      	movs	r3, #0
    4338:	2100      	movs	r1, #0
    433a:	4c0d      	ldr	r4, [pc, #52]	; (4370 <_sercom_get_async_baud_val+0x8c>)
    433c:	47a0      	blx	r4
    433e:	0002      	movs	r2, r0
    4340:	000b      	movs	r3, r1
    4342:	9200      	str	r2, [sp, #0]
    4344:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4346:	0038      	movs	r0, r7
    4348:	2100      	movs	r1, #0
    434a:	4c0a      	ldr	r4, [pc, #40]	; (4374 <_sercom_get_async_baud_val+0x90>)
    434c:	47a0      	blx	r4
    434e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4350:	2380      	movs	r3, #128	; 0x80
    4352:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4354:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4356:	4298      	cmp	r0, r3
    4358:	d8cf      	bhi.n	42fa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    435a:	0f79      	lsrs	r1, r7, #29
    435c:	00f8      	lsls	r0, r7, #3
    435e:	9a00      	ldr	r2, [sp, #0]
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4364:	00ea      	lsls	r2, r5, #3
    4366:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4368:	b2d2      	uxtb	r2, r2
    436a:	0352      	lsls	r2, r2, #13
    436c:	432a      	orrs	r2, r5
    436e:	e7db      	b.n	4328 <_sercom_get_async_baud_val+0x44>
    4370:	00007d85 	.word	0x00007d85
    4374:	00004201 	.word	0x00004201

00004378 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4378:	b510      	push	{r4, lr}
    437a:	b082      	sub	sp, #8
    437c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    437e:	4b0e      	ldr	r3, [pc, #56]	; (43b8 <sercom_set_gclk_generator+0x40>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	2b00      	cmp	r3, #0
    4384:	d007      	beq.n	4396 <sercom_set_gclk_generator+0x1e>
    4386:	2900      	cmp	r1, #0
    4388:	d105      	bne.n	4396 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    438a:	4b0b      	ldr	r3, [pc, #44]	; (43b8 <sercom_set_gclk_generator+0x40>)
    438c:	785b      	ldrb	r3, [r3, #1]
    438e:	4283      	cmp	r3, r0
    4390:	d010      	beq.n	43b4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4392:	201d      	movs	r0, #29
    4394:	e00c      	b.n	43b0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4396:	a901      	add	r1, sp, #4
    4398:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    439a:	2013      	movs	r0, #19
    439c:	4b07      	ldr	r3, [pc, #28]	; (43bc <sercom_set_gclk_generator+0x44>)
    439e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    43a0:	2013      	movs	r0, #19
    43a2:	4b07      	ldr	r3, [pc, #28]	; (43c0 <sercom_set_gclk_generator+0x48>)
    43a4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    43a6:	4b04      	ldr	r3, [pc, #16]	; (43b8 <sercom_set_gclk_generator+0x40>)
    43a8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    43aa:	2201      	movs	r2, #1
    43ac:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    43ae:	2000      	movs	r0, #0
}
    43b0:	b002      	add	sp, #8
    43b2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    43b4:	2000      	movs	r0, #0
    43b6:	e7fb      	b.n	43b0 <sercom_set_gclk_generator+0x38>
    43b8:	2000018c 	.word	0x2000018c
    43bc:	00005111 	.word	0x00005111
    43c0:	00005085 	.word	0x00005085

000043c4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    43c4:	4b40      	ldr	r3, [pc, #256]	; (44c8 <_sercom_get_default_pad+0x104>)
    43c6:	4298      	cmp	r0, r3
    43c8:	d031      	beq.n	442e <_sercom_get_default_pad+0x6a>
    43ca:	d90a      	bls.n	43e2 <_sercom_get_default_pad+0x1e>
    43cc:	4b3f      	ldr	r3, [pc, #252]	; (44cc <_sercom_get_default_pad+0x108>)
    43ce:	4298      	cmp	r0, r3
    43d0:	d04d      	beq.n	446e <_sercom_get_default_pad+0xaa>
    43d2:	4b3f      	ldr	r3, [pc, #252]	; (44d0 <_sercom_get_default_pad+0x10c>)
    43d4:	4298      	cmp	r0, r3
    43d6:	d05a      	beq.n	448e <_sercom_get_default_pad+0xca>
    43d8:	4b3e      	ldr	r3, [pc, #248]	; (44d4 <_sercom_get_default_pad+0x110>)
    43da:	4298      	cmp	r0, r3
    43dc:	d037      	beq.n	444e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    43de:	2000      	movs	r0, #0
}
    43e0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    43e2:	4b3d      	ldr	r3, [pc, #244]	; (44d8 <_sercom_get_default_pad+0x114>)
    43e4:	4298      	cmp	r0, r3
    43e6:	d00c      	beq.n	4402 <_sercom_get_default_pad+0x3e>
    43e8:	4b3c      	ldr	r3, [pc, #240]	; (44dc <_sercom_get_default_pad+0x118>)
    43ea:	4298      	cmp	r0, r3
    43ec:	d1f7      	bne.n	43de <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43ee:	2901      	cmp	r1, #1
    43f0:	d017      	beq.n	4422 <_sercom_get_default_pad+0x5e>
    43f2:	2900      	cmp	r1, #0
    43f4:	d05d      	beq.n	44b2 <_sercom_get_default_pad+0xee>
    43f6:	2902      	cmp	r1, #2
    43f8:	d015      	beq.n	4426 <_sercom_get_default_pad+0x62>
    43fa:	2903      	cmp	r1, #3
    43fc:	d015      	beq.n	442a <_sercom_get_default_pad+0x66>
	return 0;
    43fe:	2000      	movs	r0, #0
    4400:	e7ee      	b.n	43e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4402:	2901      	cmp	r1, #1
    4404:	d007      	beq.n	4416 <_sercom_get_default_pad+0x52>
    4406:	2900      	cmp	r1, #0
    4408:	d051      	beq.n	44ae <_sercom_get_default_pad+0xea>
    440a:	2902      	cmp	r1, #2
    440c:	d005      	beq.n	441a <_sercom_get_default_pad+0x56>
    440e:	2903      	cmp	r1, #3
    4410:	d005      	beq.n	441e <_sercom_get_default_pad+0x5a>
	return 0;
    4412:	2000      	movs	r0, #0
    4414:	e7e4      	b.n	43e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4416:	4832      	ldr	r0, [pc, #200]	; (44e0 <_sercom_get_default_pad+0x11c>)
    4418:	e7e2      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    441a:	4832      	ldr	r0, [pc, #200]	; (44e4 <_sercom_get_default_pad+0x120>)
    441c:	e7e0      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    441e:	4832      	ldr	r0, [pc, #200]	; (44e8 <_sercom_get_default_pad+0x124>)
    4420:	e7de      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    4422:	4832      	ldr	r0, [pc, #200]	; (44ec <_sercom_get_default_pad+0x128>)
    4424:	e7dc      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    4426:	4832      	ldr	r0, [pc, #200]	; (44f0 <_sercom_get_default_pad+0x12c>)
    4428:	e7da      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    442a:	4832      	ldr	r0, [pc, #200]	; (44f4 <_sercom_get_default_pad+0x130>)
    442c:	e7d8      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    442e:	2901      	cmp	r1, #1
    4430:	d007      	beq.n	4442 <_sercom_get_default_pad+0x7e>
    4432:	2900      	cmp	r1, #0
    4434:	d03f      	beq.n	44b6 <_sercom_get_default_pad+0xf2>
    4436:	2902      	cmp	r1, #2
    4438:	d005      	beq.n	4446 <_sercom_get_default_pad+0x82>
    443a:	2903      	cmp	r1, #3
    443c:	d005      	beq.n	444a <_sercom_get_default_pad+0x86>
	return 0;
    443e:	2000      	movs	r0, #0
    4440:	e7ce      	b.n	43e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4442:	482d      	ldr	r0, [pc, #180]	; (44f8 <_sercom_get_default_pad+0x134>)
    4444:	e7cc      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    4446:	482d      	ldr	r0, [pc, #180]	; (44fc <_sercom_get_default_pad+0x138>)
    4448:	e7ca      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    444a:	482d      	ldr	r0, [pc, #180]	; (4500 <_sercom_get_default_pad+0x13c>)
    444c:	e7c8      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    444e:	2901      	cmp	r1, #1
    4450:	d007      	beq.n	4462 <_sercom_get_default_pad+0x9e>
    4452:	2900      	cmp	r1, #0
    4454:	d031      	beq.n	44ba <_sercom_get_default_pad+0xf6>
    4456:	2902      	cmp	r1, #2
    4458:	d005      	beq.n	4466 <_sercom_get_default_pad+0xa2>
    445a:	2903      	cmp	r1, #3
    445c:	d005      	beq.n	446a <_sercom_get_default_pad+0xa6>
	return 0;
    445e:	2000      	movs	r0, #0
    4460:	e7be      	b.n	43e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4462:	4828      	ldr	r0, [pc, #160]	; (4504 <_sercom_get_default_pad+0x140>)
    4464:	e7bc      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    4466:	4828      	ldr	r0, [pc, #160]	; (4508 <_sercom_get_default_pad+0x144>)
    4468:	e7ba      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    446a:	4828      	ldr	r0, [pc, #160]	; (450c <_sercom_get_default_pad+0x148>)
    446c:	e7b8      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    446e:	2901      	cmp	r1, #1
    4470:	d007      	beq.n	4482 <_sercom_get_default_pad+0xbe>
    4472:	2900      	cmp	r1, #0
    4474:	d023      	beq.n	44be <_sercom_get_default_pad+0xfa>
    4476:	2902      	cmp	r1, #2
    4478:	d005      	beq.n	4486 <_sercom_get_default_pad+0xc2>
    447a:	2903      	cmp	r1, #3
    447c:	d005      	beq.n	448a <_sercom_get_default_pad+0xc6>
	return 0;
    447e:	2000      	movs	r0, #0
    4480:	e7ae      	b.n	43e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4482:	4823      	ldr	r0, [pc, #140]	; (4510 <_sercom_get_default_pad+0x14c>)
    4484:	e7ac      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    4486:	4823      	ldr	r0, [pc, #140]	; (4514 <_sercom_get_default_pad+0x150>)
    4488:	e7aa      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    448a:	4823      	ldr	r0, [pc, #140]	; (4518 <_sercom_get_default_pad+0x154>)
    448c:	e7a8      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    448e:	2901      	cmp	r1, #1
    4490:	d007      	beq.n	44a2 <_sercom_get_default_pad+0xde>
    4492:	2900      	cmp	r1, #0
    4494:	d015      	beq.n	44c2 <_sercom_get_default_pad+0xfe>
    4496:	2902      	cmp	r1, #2
    4498:	d005      	beq.n	44a6 <_sercom_get_default_pad+0xe2>
    449a:	2903      	cmp	r1, #3
    449c:	d005      	beq.n	44aa <_sercom_get_default_pad+0xe6>
	return 0;
    449e:	2000      	movs	r0, #0
    44a0:	e79e      	b.n	43e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44a2:	481e      	ldr	r0, [pc, #120]	; (451c <_sercom_get_default_pad+0x158>)
    44a4:	e79c      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44a6:	481e      	ldr	r0, [pc, #120]	; (4520 <_sercom_get_default_pad+0x15c>)
    44a8:	e79a      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44aa:	481e      	ldr	r0, [pc, #120]	; (4524 <_sercom_get_default_pad+0x160>)
    44ac:	e798      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44ae:	481e      	ldr	r0, [pc, #120]	; (4528 <_sercom_get_default_pad+0x164>)
    44b0:	e796      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44b2:	2003      	movs	r0, #3
    44b4:	e794      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44b6:	481d      	ldr	r0, [pc, #116]	; (452c <_sercom_get_default_pad+0x168>)
    44b8:	e792      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44ba:	481d      	ldr	r0, [pc, #116]	; (4530 <_sercom_get_default_pad+0x16c>)
    44bc:	e790      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44be:	481d      	ldr	r0, [pc, #116]	; (4534 <_sercom_get_default_pad+0x170>)
    44c0:	e78e      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44c2:	481d      	ldr	r0, [pc, #116]	; (4538 <_sercom_get_default_pad+0x174>)
    44c4:	e78c      	b.n	43e0 <_sercom_get_default_pad+0x1c>
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	42001000 	.word	0x42001000
    44cc:	42001800 	.word	0x42001800
    44d0:	42001c00 	.word	0x42001c00
    44d4:	42001400 	.word	0x42001400
    44d8:	42000800 	.word	0x42000800
    44dc:	42000c00 	.word	0x42000c00
    44e0:	00050003 	.word	0x00050003
    44e4:	00060003 	.word	0x00060003
    44e8:	00070003 	.word	0x00070003
    44ec:	00010003 	.word	0x00010003
    44f0:	001e0003 	.word	0x001e0003
    44f4:	001f0003 	.word	0x001f0003
    44f8:	000d0002 	.word	0x000d0002
    44fc:	000e0002 	.word	0x000e0002
    4500:	000f0002 	.word	0x000f0002
    4504:	00110003 	.word	0x00110003
    4508:	00120003 	.word	0x00120003
    450c:	00130003 	.word	0x00130003
    4510:	003f0005 	.word	0x003f0005
    4514:	003e0005 	.word	0x003e0005
    4518:	00520005 	.word	0x00520005
    451c:	00170003 	.word	0x00170003
    4520:	00180003 	.word	0x00180003
    4524:	00190003 	.word	0x00190003
    4528:	00040003 	.word	0x00040003
    452c:	000c0002 	.word	0x000c0002
    4530:	00100003 	.word	0x00100003
    4534:	00530005 	.word	0x00530005
    4538:	00160003 	.word	0x00160003

0000453c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    453c:	b530      	push	{r4, r5, lr}
    453e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4540:	4b0b      	ldr	r3, [pc, #44]	; (4570 <_sercom_get_sercom_inst_index+0x34>)
    4542:	466a      	mov	r2, sp
    4544:	cb32      	ldmia	r3!, {r1, r4, r5}
    4546:	c232      	stmia	r2!, {r1, r4, r5}
    4548:	cb32      	ldmia	r3!, {r1, r4, r5}
    454a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    454c:	9b00      	ldr	r3, [sp, #0]
    454e:	4283      	cmp	r3, r0
    4550:	d00b      	beq.n	456a <_sercom_get_sercom_inst_index+0x2e>
    4552:	2301      	movs	r3, #1
    4554:	009a      	lsls	r2, r3, #2
    4556:	4669      	mov	r1, sp
    4558:	5852      	ldr	r2, [r2, r1]
    455a:	4282      	cmp	r2, r0
    455c:	d006      	beq.n	456c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    455e:	3301      	adds	r3, #1
    4560:	2b06      	cmp	r3, #6
    4562:	d1f7      	bne.n	4554 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4564:	2000      	movs	r0, #0
}
    4566:	b007      	add	sp, #28
    4568:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    456a:	2300      	movs	r3, #0
			return i;
    456c:	b2d8      	uxtb	r0, r3
    456e:	e7fa      	b.n	4566 <_sercom_get_sercom_inst_index+0x2a>
    4570:	00009f1c 	.word	0x00009f1c

00004574 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4574:	4770      	bx	lr
	...

00004578 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4578:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    457a:	4b0a      	ldr	r3, [pc, #40]	; (45a4 <_sercom_set_handler+0x2c>)
    457c:	781b      	ldrb	r3, [r3, #0]
    457e:	2b00      	cmp	r3, #0
    4580:	d10c      	bne.n	459c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4582:	4f09      	ldr	r7, [pc, #36]	; (45a8 <_sercom_set_handler+0x30>)
    4584:	4e09      	ldr	r6, [pc, #36]	; (45ac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4586:	4d0a      	ldr	r5, [pc, #40]	; (45b0 <_sercom_set_handler+0x38>)
    4588:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    458a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    458c:	195a      	adds	r2, r3, r5
    458e:	6014      	str	r4, [r2, #0]
    4590:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4592:	2b18      	cmp	r3, #24
    4594:	d1f9      	bne.n	458a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4596:	2201      	movs	r2, #1
    4598:	4b02      	ldr	r3, [pc, #8]	; (45a4 <_sercom_set_handler+0x2c>)
    459a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    459c:	0080      	lsls	r0, r0, #2
    459e:	4b02      	ldr	r3, [pc, #8]	; (45a8 <_sercom_set_handler+0x30>)
    45a0:	50c1      	str	r1, [r0, r3]
}
    45a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45a4:	2000018e 	.word	0x2000018e
    45a8:	20000190 	.word	0x20000190
    45ac:	00004575 	.word	0x00004575
    45b0:	20000b30 	.word	0x20000b30

000045b4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    45b4:	b500      	push	{lr}
    45b6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    45b8:	2309      	movs	r3, #9
    45ba:	466a      	mov	r2, sp
    45bc:	7013      	strb	r3, [r2, #0]
    45be:	3301      	adds	r3, #1
    45c0:	7053      	strb	r3, [r2, #1]
    45c2:	3301      	adds	r3, #1
    45c4:	7093      	strb	r3, [r2, #2]
    45c6:	3301      	adds	r3, #1
    45c8:	70d3      	strb	r3, [r2, #3]
    45ca:	3301      	adds	r3, #1
    45cc:	7113      	strb	r3, [r2, #4]
    45ce:	3301      	adds	r3, #1
    45d0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    45d2:	4b03      	ldr	r3, [pc, #12]	; (45e0 <_sercom_get_interrupt_vector+0x2c>)
    45d4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    45d6:	466b      	mov	r3, sp
    45d8:	5618      	ldrsb	r0, [r3, r0]
}
    45da:	b003      	add	sp, #12
    45dc:	bd00      	pop	{pc}
    45de:	46c0      	nop			; (mov r8, r8)
    45e0:	0000453d 	.word	0x0000453d

000045e4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    45e4:	b510      	push	{r4, lr}
    45e6:	4b02      	ldr	r3, [pc, #8]	; (45f0 <SERCOM0_Handler+0xc>)
    45e8:	681b      	ldr	r3, [r3, #0]
    45ea:	2000      	movs	r0, #0
    45ec:	4798      	blx	r3
    45ee:	bd10      	pop	{r4, pc}
    45f0:	20000190 	.word	0x20000190

000045f4 <SERCOM1_Handler>:
    45f4:	b510      	push	{r4, lr}
    45f6:	4b02      	ldr	r3, [pc, #8]	; (4600 <SERCOM1_Handler+0xc>)
    45f8:	685b      	ldr	r3, [r3, #4]
    45fa:	2001      	movs	r0, #1
    45fc:	4798      	blx	r3
    45fe:	bd10      	pop	{r4, pc}
    4600:	20000190 	.word	0x20000190

00004604 <SERCOM2_Handler>:
    4604:	b510      	push	{r4, lr}
    4606:	4b02      	ldr	r3, [pc, #8]	; (4610 <SERCOM2_Handler+0xc>)
    4608:	689b      	ldr	r3, [r3, #8]
    460a:	2002      	movs	r0, #2
    460c:	4798      	blx	r3
    460e:	bd10      	pop	{r4, pc}
    4610:	20000190 	.word	0x20000190

00004614 <SERCOM3_Handler>:
    4614:	b510      	push	{r4, lr}
    4616:	4b02      	ldr	r3, [pc, #8]	; (4620 <SERCOM3_Handler+0xc>)
    4618:	68db      	ldr	r3, [r3, #12]
    461a:	2003      	movs	r0, #3
    461c:	4798      	blx	r3
    461e:	bd10      	pop	{r4, pc}
    4620:	20000190 	.word	0x20000190

00004624 <SERCOM4_Handler>:
    4624:	b510      	push	{r4, lr}
    4626:	4b02      	ldr	r3, [pc, #8]	; (4630 <SERCOM4_Handler+0xc>)
    4628:	691b      	ldr	r3, [r3, #16]
    462a:	2004      	movs	r0, #4
    462c:	4798      	blx	r3
    462e:	bd10      	pop	{r4, pc}
    4630:	20000190 	.word	0x20000190

00004634 <SERCOM5_Handler>:
    4634:	b510      	push	{r4, lr}
    4636:	4b02      	ldr	r3, [pc, #8]	; (4640 <SERCOM5_Handler+0xc>)
    4638:	695b      	ldr	r3, [r3, #20]
    463a:	2005      	movs	r0, #5
    463c:	4798      	blx	r3
    463e:	bd10      	pop	{r4, pc}
    4640:	20000190 	.word	0x20000190

00004644 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4644:	b5f0      	push	{r4, r5, r6, r7, lr}
    4646:	b08b      	sub	sp, #44	; 0x2c
    4648:	0005      	movs	r5, r0
    464a:	000c      	movs	r4, r1
    464c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    464e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if(spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) 
    4650:	680b      	ldr	r3, [r1, #0]
	{
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4652:	201c      	movs	r0, #28
	if(spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) 
    4654:	079b      	lsls	r3, r3, #30
    4656:	d501      	bpl.n	465c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4658:	b00b      	add	sp, #44	; 0x2c
    465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST)
    465c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    465e:	3817      	subs	r0, #23
	if(spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST)
    4660:	07db      	lsls	r3, r3, #31
    4662:	d4f9      	bmi.n	4658 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4664:	0008      	movs	r0, r1
    4666:	4b60      	ldr	r3, [pc, #384]	; (47e8 <spi_init+0x1a4>)
    4668:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    466a:	4a60      	ldr	r2, [pc, #384]	; (47ec <spi_init+0x1a8>)
    466c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    466e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4670:	2301      	movs	r3, #1
    4672:	40bb      	lsls	r3, r7
    4674:	430b      	orrs	r3, r1
    4676:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4678:	a909      	add	r1, sp, #36	; 0x24
    467a:	2724      	movs	r7, #36	; 0x24
    467c:	5df3      	ldrb	r3, [r6, r7]
    467e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4680:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4682:	b2c3      	uxtb	r3, r0
    4684:	9301      	str	r3, [sp, #4]
    4686:	0018      	movs	r0, r3
    4688:	4b59      	ldr	r3, [pc, #356]	; (47f0 <spi_init+0x1ac>)
    468a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    468c:	9801      	ldr	r0, [sp, #4]
    468e:	4b59      	ldr	r3, [pc, #356]	; (47f4 <spi_init+0x1b0>)
    4690:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4692:	5df0      	ldrb	r0, [r6, r7]
    4694:	2100      	movs	r1, #0
    4696:	4b58      	ldr	r3, [pc, #352]	; (47f8 <spi_init+0x1b4>)
    4698:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    469a:	7833      	ldrb	r3, [r6, #0]
    469c:	2b01      	cmp	r3, #1
    469e:	d038      	beq.n	4712 <spi_init+0xce>
    46a0:	002b      	movs	r3, r5
    46a2:	330c      	adds	r3, #12
    46a4:	0029      	movs	r1, r5
    46a6:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    46a8:	2200      	movs	r2, #0
    46aa:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    46ac:	428b      	cmp	r3, r1
    46ae:	d1fc      	bne.n	46aa <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    46b0:	2300      	movs	r3, #0
    46b2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    46b4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    46b6:	2400      	movs	r4, #0
    46b8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    46ba:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    46bc:	3336      	adds	r3, #54	; 0x36
    46be:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    46c0:	3301      	adds	r3, #1
    46c2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    46c4:	3301      	adds	r3, #1
    46c6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    46c8:	3b35      	subs	r3, #53	; 0x35
    46ca:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    46cc:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    46ce:	6828      	ldr	r0, [r5, #0]
    46d0:	4b45      	ldr	r3, [pc, #276]	; (47e8 <spi_init+0x1a4>)
    46d2:	4798      	blx	r3
    46d4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    46d6:	4949      	ldr	r1, [pc, #292]	; (47fc <spi_init+0x1b8>)
    46d8:	4b49      	ldr	r3, [pc, #292]	; (4800 <spi_init+0x1bc>)
    46da:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    46dc:	00bf      	lsls	r7, r7, #2
    46de:	4b49      	ldr	r3, [pc, #292]	; (4804 <spi_init+0x1c0>)
    46e0:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    46e2:	682f      	ldr	r7, [r5, #0]
    46e4:	ab04      	add	r3, sp, #16
    46e6:	2280      	movs	r2, #128	; 0x80
    46e8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    46ea:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    46ec:	3a7f      	subs	r2, #127	; 0x7f
    46ee:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    46f0:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    46f2:	7833      	ldrb	r3, [r6, #0]
    46f4:	2b00      	cmp	r3, #0
    46f6:	d102      	bne.n	46fe <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    46f8:	2200      	movs	r2, #0
    46fa:	ab04      	add	r3, sp, #16
    46fc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    46fe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4700:	9305      	str	r3, [sp, #20]
    4702:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4704:	9306      	str	r3, [sp, #24]
    4706:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4708:	9307      	str	r3, [sp, #28]
    470a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    470c:	9308      	str	r3, [sp, #32]
    470e:	2400      	movs	r4, #0
    4710:	e00b      	b.n	472a <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4712:	6823      	ldr	r3, [r4, #0]
    4714:	220c      	movs	r2, #12
    4716:	4313      	orrs	r3, r2
    4718:	6023      	str	r3, [r4, #0]
    471a:	e7c1      	b.n	46a0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    471c:	0038      	movs	r0, r7
    471e:	4b3a      	ldr	r3, [pc, #232]	; (4808 <spi_init+0x1c4>)
    4720:	4798      	blx	r3
    4722:	e00a      	b.n	473a <spi_init+0xf6>
    4724:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4726:	2c04      	cmp	r4, #4
    4728:	d010      	beq.n	474c <spi_init+0x108>
    472a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    472c:	00a3      	lsls	r3, r4, #2
    472e:	aa02      	add	r2, sp, #8
    4730:	200c      	movs	r0, #12
    4732:	1812      	adds	r2, r2, r0
    4734:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4736:	2800      	cmp	r0, #0
    4738:	d0f0      	beq.n	471c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    473a:	1c43      	adds	r3, r0, #1
    473c:	d0f2      	beq.n	4724 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    473e:	a904      	add	r1, sp, #16
    4740:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4742:	0c00      	lsrs	r0, r0, #16
    4744:	b2c0      	uxtb	r0, r0
    4746:	4b31      	ldr	r3, [pc, #196]	; (480c <spi_init+0x1c8>)
    4748:	4798      	blx	r3
    474a:	e7eb      	b.n	4724 <spi_init+0xe0>
	module->mode             = config->mode;
    474c:	7833      	ldrb	r3, [r6, #0]
    474e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4750:	7c33      	ldrb	r3, [r6, #16]
    4752:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4754:	7cb3      	ldrb	r3, [r6, #18]
    4756:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4758:	7d33      	ldrb	r3, [r6, #20]
    475a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    475c:	2200      	movs	r2, #0
    475e:	ab02      	add	r3, sp, #8
    4760:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4762:	7833      	ldrb	r3, [r6, #0]
    4764:	2b01      	cmp	r3, #1
    4766:	d028      	beq.n	47ba <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4768:	6873      	ldr	r3, [r6, #4]
    476a:	68b2      	ldr	r2, [r6, #8]
    476c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    476e:	68f2      	ldr	r2, [r6, #12]
    4770:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4772:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4774:	7c72      	ldrb	r2, [r6, #17]
    4776:	2a00      	cmp	r2, #0
    4778:	d103      	bne.n	4782 <spi_init+0x13e>
    477a:	4a25      	ldr	r2, [pc, #148]	; (4810 <spi_init+0x1cc>)
    477c:	7892      	ldrb	r2, [r2, #2]
    477e:	0792      	lsls	r2, r2, #30
    4780:	d501      	bpl.n	4786 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4782:	2280      	movs	r2, #128	; 0x80
    4784:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4786:	7cb2      	ldrb	r2, [r6, #18]
    4788:	2a00      	cmp	r2, #0
    478a:	d002      	beq.n	4792 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    478c:	2280      	movs	r2, #128	; 0x80
    478e:	0292      	lsls	r2, r2, #10
    4790:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4792:	7cf2      	ldrb	r2, [r6, #19]
    4794:	2a00      	cmp	r2, #0
    4796:	d002      	beq.n	479e <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4798:	2280      	movs	r2, #128	; 0x80
    479a:	0092      	lsls	r2, r2, #2
    479c:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    479e:	7d32      	ldrb	r2, [r6, #20]
    47a0:	2a00      	cmp	r2, #0
    47a2:	d002      	beq.n	47aa <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    47a4:	2280      	movs	r2, #128	; 0x80
    47a6:	0192      	lsls	r2, r2, #6
    47a8:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    47aa:	683a      	ldr	r2, [r7, #0]
    47ac:	4313      	orrs	r3, r2
    47ae:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	430b      	orrs	r3, r1
    47b4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    47b6:	2000      	movs	r0, #0
    47b8:	e74e      	b.n	4658 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    47ba:	6828      	ldr	r0, [r5, #0]
    47bc:	4b0a      	ldr	r3, [pc, #40]	; (47e8 <spi_init+0x1a4>)
    47be:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    47c0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    47c2:	b2c0      	uxtb	r0, r0
    47c4:	4b13      	ldr	r3, [pc, #76]	; (4814 <spi_init+0x1d0>)
    47c6:	4798      	blx	r3
    47c8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    47ca:	ab02      	add	r3, sp, #8
    47cc:	1d9a      	adds	r2, r3, #6
    47ce:	69b0      	ldr	r0, [r6, #24]
    47d0:	4b11      	ldr	r3, [pc, #68]	; (4818 <spi_init+0x1d4>)
    47d2:	4798      	blx	r3
    47d4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    47d6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    47d8:	2b00      	cmp	r3, #0
    47da:	d000      	beq.n	47de <spi_init+0x19a>
    47dc:	e73c      	b.n	4658 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    47de:	ab02      	add	r3, sp, #8
    47e0:	3306      	adds	r3, #6
    47e2:	781b      	ldrb	r3, [r3, #0]
    47e4:	733b      	strb	r3, [r7, #12]
    47e6:	e7bf      	b.n	4768 <spi_init+0x124>
    47e8:	0000453d 	.word	0x0000453d
    47ec:	40000400 	.word	0x40000400
    47f0:	00005111 	.word	0x00005111
    47f4:	00005085 	.word	0x00005085
    47f8:	00004379 	.word	0x00004379
    47fc:	00004911 	.word	0x00004911
    4800:	00004579 	.word	0x00004579
    4804:	20000b30 	.word	0x20000b30
    4808:	000043c5 	.word	0x000043c5
    480c:	00005209 	.word	0x00005209
    4810:	41002000 	.word	0x41002000
    4814:	0000512d 	.word	0x0000512d
    4818:	000042bb 	.word	0x000042bb

0000481c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    481c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    481e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4820:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4822:	2c01      	cmp	r4, #1
    4824:	d001      	beq.n	482a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4826:	0018      	movs	r0, r3
    4828:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    482a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    482c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    482e:	2c00      	cmp	r4, #0
    4830:	d1f9      	bne.n	4826 <spi_select_slave+0xa>
		if (select) {
    4832:	2a00      	cmp	r2, #0
    4834:	d058      	beq.n	48e8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4836:	784b      	ldrb	r3, [r1, #1]
    4838:	2b00      	cmp	r3, #0
    483a:	d044      	beq.n	48c6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    483c:	6803      	ldr	r3, [r0, #0]
    483e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4840:	07db      	lsls	r3, r3, #31
    4842:	d410      	bmi.n	4866 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4844:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4846:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4848:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    484a:	2900      	cmp	r1, #0
    484c:	d104      	bne.n	4858 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    484e:	0953      	lsrs	r3, r2, #5
    4850:	01db      	lsls	r3, r3, #7
    4852:	492e      	ldr	r1, [pc, #184]	; (490c <spi_select_slave+0xf0>)
    4854:	468c      	mov	ip, r1
    4856:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4858:	211f      	movs	r1, #31
    485a:	4011      	ands	r1, r2
    485c:	2201      	movs	r2, #1
    485e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4860:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4862:	2305      	movs	r3, #5
    4864:	e7df      	b.n	4826 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4866:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4868:	09d4      	lsrs	r4, r2, #7
		return NULL;
    486a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    486c:	2c00      	cmp	r4, #0
    486e:	d104      	bne.n	487a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4870:	0953      	lsrs	r3, r2, #5
    4872:	01db      	lsls	r3, r3, #7
    4874:	4c25      	ldr	r4, [pc, #148]	; (490c <spi_select_slave+0xf0>)
    4876:	46a4      	mov	ip, r4
    4878:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    487a:	241f      	movs	r4, #31
    487c:	4014      	ands	r4, r2
    487e:	2201      	movs	r2, #1
    4880:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4882:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4884:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4886:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    4888:	07d2      	lsls	r2, r2, #31
    488a:	d501      	bpl.n	4890 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    488c:	788a      	ldrb	r2, [r1, #2]
    488e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4890:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4892:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4894:	2a00      	cmp	r2, #0
    4896:	d1c6      	bne.n	4826 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4898:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    489a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    489c:	7e13      	ldrb	r3, [r2, #24]
    489e:	420b      	tst	r3, r1
    48a0:	d0fc      	beq.n	489c <spi_select_slave+0x80>
    48a2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    48a4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    48a6:	0749      	lsls	r1, r1, #29
    48a8:	d5bd      	bpl.n	4826 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    48aa:	8b53      	ldrh	r3, [r2, #26]
    48ac:	075b      	lsls	r3, r3, #29
    48ae:	d501      	bpl.n	48b4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    48b0:	2304      	movs	r3, #4
    48b2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48b4:	7983      	ldrb	r3, [r0, #6]
    48b6:	2b01      	cmp	r3, #1
    48b8:	d002      	beq.n	48c0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    48ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    48bc:	2300      	movs	r3, #0
    48be:	e7b2      	b.n	4826 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    48c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    48c2:	2300      	movs	r3, #0
    48c4:	e7af      	b.n	4826 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    48c6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    48c8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    48ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    48cc:	2900      	cmp	r1, #0
    48ce:	d104      	bne.n	48da <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    48d0:	0953      	lsrs	r3, r2, #5
    48d2:	01db      	lsls	r3, r3, #7
    48d4:	490d      	ldr	r1, [pc, #52]	; (490c <spi_select_slave+0xf0>)
    48d6:	468c      	mov	ip, r1
    48d8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    48da:	211f      	movs	r1, #31
    48dc:	4011      	ands	r1, r2
    48de:	2201      	movs	r2, #1
    48e0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    48e2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    48e4:	2300      	movs	r3, #0
    48e6:	e79e      	b.n	4826 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    48e8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    48ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    48ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    48ee:	2900      	cmp	r1, #0
    48f0:	d104      	bne.n	48fc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    48f2:	0953      	lsrs	r3, r2, #5
    48f4:	01db      	lsls	r3, r3, #7
    48f6:	4905      	ldr	r1, [pc, #20]	; (490c <spi_select_slave+0xf0>)
    48f8:	468c      	mov	ip, r1
    48fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    48fc:	211f      	movs	r1, #31
    48fe:	4011      	ands	r1, r2
    4900:	2201      	movs	r2, #1
    4902:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4904:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    4906:	2300      	movs	r3, #0
    4908:	e78d      	b.n	4826 <spi_select_slave+0xa>
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	41004400 	.word	0x41004400

00004910 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    4912:	0080      	lsls	r0, r0, #2
    4914:	4b70      	ldr	r3, [pc, #448]	; (4ad8 <_spi_interrupt_handler+0x1c8>)
    4916:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4918:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    491a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    491c:	5ce7      	ldrb	r7, [r4, r3]
    491e:	2236      	movs	r2, #54	; 0x36
    4920:	5ca2      	ldrb	r2, [r4, r2]
    4922:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4924:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    4926:	7db5      	ldrb	r5, [r6, #22]
    4928:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    492a:	07eb      	lsls	r3, r5, #31
    492c:	d502      	bpl.n	4934 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    492e:	7963      	ldrb	r3, [r4, #5]
    4930:	2b01      	cmp	r3, #1
    4932:	d01e      	beq.n	4972 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4934:	076b      	lsls	r3, r5, #29
    4936:	d511      	bpl.n	495c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4938:	8b73      	ldrh	r3, [r6, #26]
    493a:	075b      	lsls	r3, r3, #29
    493c:	d55a      	bpl.n	49f4 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    493e:	7a63      	ldrb	r3, [r4, #9]
    4940:	2b01      	cmp	r3, #1
    4942:	d008      	beq.n	4956 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4944:	221e      	movs	r2, #30
    4946:	2338      	movs	r3, #56	; 0x38
    4948:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    494a:	3b35      	subs	r3, #53	; 0x35
    494c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    494e:	3302      	adds	r3, #2
    4950:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4952:	073b      	lsls	r3, r7, #28
    4954:	d44a      	bmi.n	49ec <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4956:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4958:	2304      	movs	r3, #4
    495a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    495c:	07ab      	lsls	r3, r5, #30
    495e:	d503      	bpl.n	4968 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4960:	7963      	ldrb	r3, [r4, #5]
    4962:	2b01      	cmp	r3, #1
    4964:	d100      	bne.n	4968 <_spi_interrupt_handler+0x58>
    4966:	e097      	b.n	4a98 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4968:	b26d      	sxtb	r5, r5
    496a:	2d00      	cmp	r5, #0
    496c:	da00      	bge.n	4970 <_spi_interrupt_handler+0x60>
    496e:	e0a9      	b.n	4ac4 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    4972:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4974:	2b00      	cmp	r3, #0
    4976:	d022      	beq.n	49be <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    4978:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    497a:	2b00      	cmp	r3, #0
    497c:	d0da      	beq.n	4934 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    497e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4980:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4982:	7813      	ldrb	r3, [r2, #0]
    4984:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4986:	1c50      	adds	r0, r2, #1
    4988:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    498a:	79a0      	ldrb	r0, [r4, #6]
    498c:	2801      	cmp	r0, #1
    498e:	d027      	beq.n	49e0 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4990:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4992:	05db      	lsls	r3, r3, #23
    4994:	0ddb      	lsrs	r3, r3, #23
    4996:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4998:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    499a:	3b01      	subs	r3, #1
    499c:	b29b      	uxth	r3, r3
    499e:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    49a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    49a2:	b29b      	uxth	r3, r3
    49a4:	2b00      	cmp	r3, #0
    49a6:	d1c5      	bne.n	4934 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    49a8:	3301      	adds	r3, #1
    49aa:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    49ac:	7a63      	ldrb	r3, [r4, #9]
    49ae:	2b01      	cmp	r3, #1
    49b0:	d1c0      	bne.n	4934 <_spi_interrupt_handler+0x24>
    49b2:	79e3      	ldrb	r3, [r4, #7]
    49b4:	2b00      	cmp	r3, #0
    49b6:	d1bd      	bne.n	4934 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    49b8:	3302      	adds	r3, #2
    49ba:	75b3      	strb	r3, [r6, #22]
    49bc:	e7ba      	b.n	4934 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    49be:	4b47      	ldr	r3, [pc, #284]	; (4adc <_spi_interrupt_handler+0x1cc>)
    49c0:	881b      	ldrh	r3, [r3, #0]
    49c2:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    49c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    49c6:	3b01      	subs	r3, #1
    49c8:	b29b      	uxth	r3, r3
    49ca:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    49cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    49ce:	b29b      	uxth	r3, r3
    49d0:	2b00      	cmp	r3, #0
    49d2:	d101      	bne.n	49d8 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    49d4:	3301      	adds	r3, #1
    49d6:	7533      	strb	r3, [r6, #20]
		if (0
    49d8:	7963      	ldrb	r3, [r4, #5]
    49da:	2b01      	cmp	r3, #1
    49dc:	d0cc      	beq.n	4978 <_spi_interrupt_handler+0x68>
    49de:	e7a9      	b.n	4934 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    49e0:	7850      	ldrb	r0, [r2, #1]
    49e2:	0200      	lsls	r0, r0, #8
    49e4:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    49e6:	3202      	adds	r2, #2
    49e8:	62e2      	str	r2, [r4, #44]	; 0x2c
    49ea:	e7d2      	b.n	4992 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    49ec:	0020      	movs	r0, r4
    49ee:	69a3      	ldr	r3, [r4, #24]
    49f0:	4798      	blx	r3
    49f2:	e7b0      	b.n	4956 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    49f4:	7a63      	ldrb	r3, [r4, #9]
    49f6:	2b01      	cmp	r3, #1
    49f8:	d028      	beq.n	4a4c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    49fa:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    49fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49fe:	05db      	lsls	r3, r3, #23
    4a00:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    4a02:	b2da      	uxtb	r2, r3
    4a04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4a06:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4a08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4a0a:	1c51      	adds	r1, r2, #1
    4a0c:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a0e:	79a1      	ldrb	r1, [r4, #6]
    4a10:	2901      	cmp	r1, #1
    4a12:	d034      	beq.n	4a7e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    4a14:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4a16:	3b01      	subs	r3, #1
    4a18:	b29b      	uxth	r3, r3
    4a1a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4a1c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4a1e:	b29b      	uxth	r3, r3
    4a20:	2b00      	cmp	r3, #0
    4a22:	d000      	beq.n	4a26 <_spi_interrupt_handler+0x116>
    4a24:	e79a      	b.n	495c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    4a26:	2200      	movs	r2, #0
    4a28:	3338      	adds	r3, #56	; 0x38
    4a2a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4a2c:	3b34      	subs	r3, #52	; 0x34
    4a2e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4a30:	7a63      	ldrb	r3, [r4, #9]
    4a32:	2b02      	cmp	r3, #2
    4a34:	d029      	beq.n	4a8a <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    4a36:	7a63      	ldrb	r3, [r4, #9]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d000      	beq.n	4a3e <_spi_interrupt_handler+0x12e>
    4a3c:	e78e      	b.n	495c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4a3e:	07bb      	lsls	r3, r7, #30
    4a40:	d400      	bmi.n	4a44 <_spi_interrupt_handler+0x134>
    4a42:	e78b      	b.n	495c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4a44:	0020      	movs	r0, r4
    4a46:	6923      	ldr	r3, [r4, #16]
    4a48:	4798      	blx	r3
    4a4a:	e787      	b.n	495c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4a4c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4a50:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4a52:	3b01      	subs	r3, #1
    4a54:	b29b      	uxth	r3, r3
    4a56:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4a58:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4a5a:	b29b      	uxth	r3, r3
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	d000      	beq.n	4a62 <_spi_interrupt_handler+0x152>
    4a60:	e77c      	b.n	495c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4a62:	3304      	adds	r3, #4
    4a64:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4a66:	2200      	movs	r2, #0
    4a68:	3334      	adds	r3, #52	; 0x34
    4a6a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4a6c:	3b35      	subs	r3, #53	; 0x35
    4a6e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4a70:	07fb      	lsls	r3, r7, #31
    4a72:	d400      	bmi.n	4a76 <_spi_interrupt_handler+0x166>
    4a74:	e772      	b.n	495c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4a76:	0020      	movs	r0, r4
    4a78:	68e3      	ldr	r3, [r4, #12]
    4a7a:	4798      	blx	r3
    4a7c:	e76e      	b.n	495c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4a7e:	0a1b      	lsrs	r3, r3, #8
    4a80:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4a82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4a84:	3301      	adds	r3, #1
    4a86:	62a3      	str	r3, [r4, #40]	; 0x28
    4a88:	e7c4      	b.n	4a14 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4a8a:	077b      	lsls	r3, r7, #29
    4a8c:	d400      	bmi.n	4a90 <_spi_interrupt_handler+0x180>
    4a8e:	e765      	b.n	495c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4a90:	0020      	movs	r0, r4
    4a92:	6963      	ldr	r3, [r4, #20]
    4a94:	4798      	blx	r3
    4a96:	e761      	b.n	495c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4a98:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4a9a:	2b01      	cmp	r3, #1
    4a9c:	d000      	beq.n	4aa0 <_spi_interrupt_handler+0x190>
    4a9e:	e763      	b.n	4968 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4aa0:	79e3      	ldrb	r3, [r4, #7]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d000      	beq.n	4aa8 <_spi_interrupt_handler+0x198>
    4aa6:	e75f      	b.n	4968 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4aa8:	3302      	adds	r3, #2
    4aaa:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4aac:	3301      	adds	r3, #1
    4aae:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4ab0:	2200      	movs	r2, #0
    4ab2:	3335      	adds	r3, #53	; 0x35
    4ab4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4ab6:	07fb      	lsls	r3, r7, #31
    4ab8:	d400      	bmi.n	4abc <_spi_interrupt_handler+0x1ac>
    4aba:	e755      	b.n	4968 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4abc:	0020      	movs	r0, r4
    4abe:	68e3      	ldr	r3, [r4, #12]
    4ac0:	4798      	blx	r3
    4ac2:	e751      	b.n	4968 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4ac4:	2380      	movs	r3, #128	; 0x80
    4ac6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4ac8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4aca:	067b      	lsls	r3, r7, #25
    4acc:	d400      	bmi.n	4ad0 <_spi_interrupt_handler+0x1c0>
    4ace:	e74f      	b.n	4970 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4ad2:	0020      	movs	r0, r4
    4ad4:	4798      	blx	r3
}
    4ad6:	e74b      	b.n	4970 <_spi_interrupt_handler+0x60>
    4ad8:	20000b30 	.word	0x20000b30
    4adc:	20000b48 	.word	0x20000b48

00004ae0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4ae0:	b510      	push	{r4, lr}
	switch (clock_source) {
    4ae2:	2808      	cmp	r0, #8
    4ae4:	d803      	bhi.n	4aee <system_clock_source_get_hz+0xe>
    4ae6:	0080      	lsls	r0, r0, #2
    4ae8:	4b1b      	ldr	r3, [pc, #108]	; (4b58 <system_clock_source_get_hz+0x78>)
    4aea:	581b      	ldr	r3, [r3, r0]
    4aec:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4aee:	2000      	movs	r0, #0
    4af0:	e030      	b.n	4b54 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    4af2:	4b1a      	ldr	r3, [pc, #104]	; (4b5c <system_clock_source_get_hz+0x7c>)
    4af4:	6918      	ldr	r0, [r3, #16]
    4af6:	e02d      	b.n	4b54 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4af8:	4b19      	ldr	r3, [pc, #100]	; (4b60 <system_clock_source_get_hz+0x80>)
    4afa:	6a1b      	ldr	r3, [r3, #32]
    4afc:	059b      	lsls	r3, r3, #22
    4afe:	0f9b      	lsrs	r3, r3, #30
    4b00:	4818      	ldr	r0, [pc, #96]	; (4b64 <system_clock_source_get_hz+0x84>)
    4b02:	40d8      	lsrs	r0, r3
    4b04:	e026      	b.n	4b54 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    4b06:	4b15      	ldr	r3, [pc, #84]	; (4b5c <system_clock_source_get_hz+0x7c>)
    4b08:	6958      	ldr	r0, [r3, #20]
    4b0a:	e023      	b.n	4b54 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4b0c:	4b13      	ldr	r3, [pc, #76]	; (4b5c <system_clock_source_get_hz+0x7c>)
    4b0e:	681b      	ldr	r3, [r3, #0]
			return 0;
    4b10:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4b12:	079b      	lsls	r3, r3, #30
    4b14:	d51e      	bpl.n	4b54 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4b16:	4912      	ldr	r1, [pc, #72]	; (4b60 <system_clock_source_get_hz+0x80>)
    4b18:	2210      	movs	r2, #16
    4b1a:	68cb      	ldr	r3, [r1, #12]
    4b1c:	421a      	tst	r2, r3
    4b1e:	d0fc      	beq.n	4b1a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4b20:	4b0e      	ldr	r3, [pc, #56]	; (4b5c <system_clock_source_get_hz+0x7c>)
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	075b      	lsls	r3, r3, #29
    4b26:	d401      	bmi.n	4b2c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4b28:	480f      	ldr	r0, [pc, #60]	; (4b68 <system_clock_source_get_hz+0x88>)
    4b2a:	e013      	b.n	4b54 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4b2c:	2000      	movs	r0, #0
    4b2e:	4b0f      	ldr	r3, [pc, #60]	; (4b6c <system_clock_source_get_hz+0x8c>)
    4b30:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4b32:	4b0a      	ldr	r3, [pc, #40]	; (4b5c <system_clock_source_get_hz+0x7c>)
    4b34:	689b      	ldr	r3, [r3, #8]
    4b36:	041b      	lsls	r3, r3, #16
    4b38:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4b3a:	4358      	muls	r0, r3
    4b3c:	e00a      	b.n	4b54 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4b3e:	2350      	movs	r3, #80	; 0x50
    4b40:	4a07      	ldr	r2, [pc, #28]	; (4b60 <system_clock_source_get_hz+0x80>)
    4b42:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4b44:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4b46:	075b      	lsls	r3, r3, #29
    4b48:	d504      	bpl.n	4b54 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    4b4a:	4b04      	ldr	r3, [pc, #16]	; (4b5c <system_clock_source_get_hz+0x7c>)
    4b4c:	68d8      	ldr	r0, [r3, #12]
    4b4e:	e001      	b.n	4b54 <system_clock_source_get_hz+0x74>
		return 32768UL;
    4b50:	2080      	movs	r0, #128	; 0x80
    4b52:	0200      	lsls	r0, r0, #8
	}
}
    4b54:	bd10      	pop	{r4, pc}
    4b56:	46c0      	nop			; (mov r8, r8)
    4b58:	00009f34 	.word	0x00009f34
    4b5c:	200001a8 	.word	0x200001a8
    4b60:	40000800 	.word	0x40000800
    4b64:	007a1200 	.word	0x007a1200
    4b68:	02dc6c00 	.word	0x02dc6c00
    4b6c:	0000512d 	.word	0x0000512d

00004b70 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4b70:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4b72:	490c      	ldr	r1, [pc, #48]	; (4ba4 <system_clock_source_osc8m_set_config+0x34>)
    4b74:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4b76:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4b78:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4b7a:	7840      	ldrb	r0, [r0, #1]
    4b7c:	2201      	movs	r2, #1
    4b7e:	4010      	ands	r0, r2
    4b80:	0180      	lsls	r0, r0, #6
    4b82:	2640      	movs	r6, #64	; 0x40
    4b84:	43b3      	bics	r3, r6
    4b86:	4303      	orrs	r3, r0
    4b88:	402a      	ands	r2, r5
    4b8a:	01d2      	lsls	r2, r2, #7
    4b8c:	2080      	movs	r0, #128	; 0x80
    4b8e:	4383      	bics	r3, r0
    4b90:	4313      	orrs	r3, r2
    4b92:	2203      	movs	r2, #3
    4b94:	4022      	ands	r2, r4
    4b96:	0212      	lsls	r2, r2, #8
    4b98:	4803      	ldr	r0, [pc, #12]	; (4ba8 <system_clock_source_osc8m_set_config+0x38>)
    4b9a:	4003      	ands	r3, r0
    4b9c:	4313      	orrs	r3, r2
    4b9e:	620b      	str	r3, [r1, #32]
}
    4ba0:	bd70      	pop	{r4, r5, r6, pc}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	40000800 	.word	0x40000800
    4ba8:	fffffcff 	.word	0xfffffcff

00004bac <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    4bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bae:	46ce      	mov	lr, r9
    4bb0:	4647      	mov	r7, r8
    4bb2:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    4bb4:	4b19      	ldr	r3, [pc, #100]	; (4c1c <system_clock_source_osc32k_set_config+0x70>)
    4bb6:	4699      	mov	r9, r3
    4bb8:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    4bba:	7841      	ldrb	r1, [r0, #1]
    4bbc:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    4bbe:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4bc0:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4bc2:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    4bc4:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    4bc6:	7880      	ldrb	r0, [r0, #2]
    4bc8:	2101      	movs	r1, #1
    4bca:	4008      	ands	r0, r1
    4bcc:	0080      	lsls	r0, r0, #2
    4bce:	2204      	movs	r2, #4
    4bd0:	4393      	bics	r3, r2
    4bd2:	4303      	orrs	r3, r0
    4bd4:	4660      	mov	r0, ip
    4bd6:	4008      	ands	r0, r1
    4bd8:	00c0      	lsls	r0, r0, #3
    4bda:	3204      	adds	r2, #4
    4bdc:	4393      	bics	r3, r2
    4bde:	4303      	orrs	r3, r0
    4be0:	0038      	movs	r0, r7
    4be2:	4008      	ands	r0, r1
    4be4:	0180      	lsls	r0, r0, #6
    4be6:	2740      	movs	r7, #64	; 0x40
    4be8:	43bb      	bics	r3, r7
    4bea:	4303      	orrs	r3, r0
    4bec:	0030      	movs	r0, r6
    4bee:	4008      	ands	r0, r1
    4bf0:	01c0      	lsls	r0, r0, #7
    4bf2:	2680      	movs	r6, #128	; 0x80
    4bf4:	43b3      	bics	r3, r6
    4bf6:	4303      	orrs	r3, r0
    4bf8:	2007      	movs	r0, #7
    4bfa:	4005      	ands	r5, r0
    4bfc:	022d      	lsls	r5, r5, #8
    4bfe:	4808      	ldr	r0, [pc, #32]	; (4c20 <system_clock_source_osc32k_set_config+0x74>)
    4c00:	4003      	ands	r3, r0
    4c02:	432b      	orrs	r3, r5
    4c04:	4021      	ands	r1, r4
    4c06:	0309      	lsls	r1, r1, #12
    4c08:	4806      	ldr	r0, [pc, #24]	; (4c24 <system_clock_source_osc32k_set_config+0x78>)
    4c0a:	4003      	ands	r3, r0
    4c0c:	430b      	orrs	r3, r1
    4c0e:	464a      	mov	r2, r9
    4c10:	6193      	str	r3, [r2, #24]
}
    4c12:	bc0c      	pop	{r2, r3}
    4c14:	4690      	mov	r8, r2
    4c16:	4699      	mov	r9, r3
    4c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	40000800 	.word	0x40000800
    4c20:	fffff8ff 	.word	0xfffff8ff
    4c24:	ffffefff 	.word	0xffffefff

00004c28 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4c28:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4c2a:	7a03      	ldrb	r3, [r0, #8]
    4c2c:	069b      	lsls	r3, r3, #26
    4c2e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4c30:	8942      	ldrh	r2, [r0, #10]
    4c32:	0592      	lsls	r2, r2, #22
    4c34:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4c36:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    4c38:	4918      	ldr	r1, [pc, #96]	; (4c9c <system_clock_source_dfll_set_config+0x74>)
    4c3a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4c3c:	7983      	ldrb	r3, [r0, #6]
    4c3e:	79c2      	ldrb	r2, [r0, #7]
    4c40:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4c42:	8842      	ldrh	r2, [r0, #2]
    4c44:	8884      	ldrh	r4, [r0, #4]
    4c46:	4322      	orrs	r2, r4
    4c48:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4c4a:	7842      	ldrb	r2, [r0, #1]
    4c4c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    4c4e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    4c50:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4c52:	7803      	ldrb	r3, [r0, #0]
    4c54:	2b04      	cmp	r3, #4
    4c56:	d011      	beq.n	4c7c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4c58:	2b20      	cmp	r3, #32
    4c5a:	d10e      	bne.n	4c7a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4c5c:	7b03      	ldrb	r3, [r0, #12]
    4c5e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4c60:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4c62:	4313      	orrs	r3, r2
    4c64:	89c2      	ldrh	r2, [r0, #14]
    4c66:	0412      	lsls	r2, r2, #16
    4c68:	490d      	ldr	r1, [pc, #52]	; (4ca0 <system_clock_source_dfll_set_config+0x78>)
    4c6a:	400a      	ands	r2, r1
    4c6c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4c6e:	4a0b      	ldr	r2, [pc, #44]	; (4c9c <system_clock_source_dfll_set_config+0x74>)
    4c70:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4c72:	6811      	ldr	r1, [r2, #0]
    4c74:	4b0b      	ldr	r3, [pc, #44]	; (4ca4 <system_clock_source_dfll_set_config+0x7c>)
    4c76:	430b      	orrs	r3, r1
    4c78:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4c7a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4c7c:	7b03      	ldrb	r3, [r0, #12]
    4c7e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4c80:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4c82:	4313      	orrs	r3, r2
    4c84:	89c2      	ldrh	r2, [r0, #14]
    4c86:	0412      	lsls	r2, r2, #16
    4c88:	4905      	ldr	r1, [pc, #20]	; (4ca0 <system_clock_source_dfll_set_config+0x78>)
    4c8a:	400a      	ands	r2, r1
    4c8c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4c8e:	4a03      	ldr	r2, [pc, #12]	; (4c9c <system_clock_source_dfll_set_config+0x74>)
    4c90:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    4c92:	6813      	ldr	r3, [r2, #0]
    4c94:	2104      	movs	r1, #4
    4c96:	430b      	orrs	r3, r1
    4c98:	6013      	str	r3, [r2, #0]
    4c9a:	e7ee      	b.n	4c7a <system_clock_source_dfll_set_config+0x52>
    4c9c:	200001a8 	.word	0x200001a8
    4ca0:	03ff0000 	.word	0x03ff0000
    4ca4:	00000424 	.word	0x00000424

00004ca8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4ca8:	2808      	cmp	r0, #8
    4caa:	d803      	bhi.n	4cb4 <system_clock_source_enable+0xc>
    4cac:	0080      	lsls	r0, r0, #2
    4cae:	4b25      	ldr	r3, [pc, #148]	; (4d44 <system_clock_source_enable+0x9c>)
    4cb0:	581b      	ldr	r3, [r3, r0]
    4cb2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4cb4:	2017      	movs	r0, #23
    4cb6:	e044      	b.n	4d42 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4cb8:	4a23      	ldr	r2, [pc, #140]	; (4d48 <system_clock_source_enable+0xa0>)
    4cba:	6a13      	ldr	r3, [r2, #32]
    4cbc:	2102      	movs	r1, #2
    4cbe:	430b      	orrs	r3, r1
    4cc0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4cc2:	2000      	movs	r0, #0
    4cc4:	e03d      	b.n	4d42 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4cc6:	4a20      	ldr	r2, [pc, #128]	; (4d48 <system_clock_source_enable+0xa0>)
    4cc8:	6993      	ldr	r3, [r2, #24]
    4cca:	2102      	movs	r1, #2
    4ccc:	430b      	orrs	r3, r1
    4cce:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    4cd0:	2000      	movs	r0, #0
		break;
    4cd2:	e036      	b.n	4d42 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4cd4:	4a1c      	ldr	r2, [pc, #112]	; (4d48 <system_clock_source_enable+0xa0>)
    4cd6:	8a13      	ldrh	r3, [r2, #16]
    4cd8:	2102      	movs	r1, #2
    4cda:	430b      	orrs	r3, r1
    4cdc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    4cde:	2000      	movs	r0, #0
		break;
    4ce0:	e02f      	b.n	4d42 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4ce2:	4a19      	ldr	r2, [pc, #100]	; (4d48 <system_clock_source_enable+0xa0>)
    4ce4:	8a93      	ldrh	r3, [r2, #20]
    4ce6:	2102      	movs	r1, #2
    4ce8:	430b      	orrs	r3, r1
    4cea:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4cec:	2000      	movs	r0, #0
		break;
    4cee:	e028      	b.n	4d42 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4cf0:	4916      	ldr	r1, [pc, #88]	; (4d4c <system_clock_source_enable+0xa4>)
    4cf2:	680b      	ldr	r3, [r1, #0]
    4cf4:	2202      	movs	r2, #2
    4cf6:	4313      	orrs	r3, r2
    4cf8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4cfa:	4b13      	ldr	r3, [pc, #76]	; (4d48 <system_clock_source_enable+0xa0>)
    4cfc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4cfe:	0019      	movs	r1, r3
    4d00:	320e      	adds	r2, #14
    4d02:	68cb      	ldr	r3, [r1, #12]
    4d04:	421a      	tst	r2, r3
    4d06:	d0fc      	beq.n	4d02 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4d08:	4a10      	ldr	r2, [pc, #64]	; (4d4c <system_clock_source_enable+0xa4>)
    4d0a:	6891      	ldr	r1, [r2, #8]
    4d0c:	4b0e      	ldr	r3, [pc, #56]	; (4d48 <system_clock_source_enable+0xa0>)
    4d0e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4d10:	6852      	ldr	r2, [r2, #4]
    4d12:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    4d14:	2200      	movs	r2, #0
    4d16:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4d18:	0019      	movs	r1, r3
    4d1a:	3210      	adds	r2, #16
    4d1c:	68cb      	ldr	r3, [r1, #12]
    4d1e:	421a      	tst	r2, r3
    4d20:	d0fc      	beq.n	4d1c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4d22:	4b0a      	ldr	r3, [pc, #40]	; (4d4c <system_clock_source_enable+0xa4>)
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	b29b      	uxth	r3, r3
    4d28:	4a07      	ldr	r2, [pc, #28]	; (4d48 <system_clock_source_enable+0xa0>)
    4d2a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4d2c:	2000      	movs	r0, #0
    4d2e:	e008      	b.n	4d42 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4d30:	4905      	ldr	r1, [pc, #20]	; (4d48 <system_clock_source_enable+0xa0>)
    4d32:	2244      	movs	r2, #68	; 0x44
    4d34:	5c8b      	ldrb	r3, [r1, r2]
    4d36:	2002      	movs	r0, #2
    4d38:	4303      	orrs	r3, r0
    4d3a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4d3c:	2000      	movs	r0, #0
		break;
    4d3e:	e000      	b.n	4d42 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    4d40:	2000      	movs	r0, #0
}
    4d42:	4770      	bx	lr
    4d44:	00009f58 	.word	0x00009f58
    4d48:	40000800 	.word	0x40000800
    4d4c:	200001a8 	.word	0x200001a8

00004d50 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d52:	46ce      	mov	lr, r9
    4d54:	4647      	mov	r7, r8
    4d56:	b580      	push	{r7, lr}
    4d58:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4d5a:	22c2      	movs	r2, #194	; 0xc2
    4d5c:	00d2      	lsls	r2, r2, #3
    4d5e:	4b50      	ldr	r3, [pc, #320]	; (4ea0 <system_clock_init+0x150>)
    4d60:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4d62:	4a50      	ldr	r2, [pc, #320]	; (4ea4 <system_clock_init+0x154>)
    4d64:	6853      	ldr	r3, [r2, #4]
    4d66:	211e      	movs	r1, #30
    4d68:	438b      	bics	r3, r1
    4d6a:	391a      	subs	r1, #26
    4d6c:	430b      	orrs	r3, r1
    4d6e:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    4d70:	2203      	movs	r2, #3
    4d72:	ab01      	add	r3, sp, #4
    4d74:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4d76:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4d78:	4d4b      	ldr	r5, [pc, #300]	; (4ea8 <system_clock_init+0x158>)
    4d7a:	b2e0      	uxtb	r0, r4
    4d7c:	a901      	add	r1, sp, #4
    4d7e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4d80:	3401      	adds	r4, #1
    4d82:	2c25      	cmp	r4, #37	; 0x25
    4d84:	d1f9      	bne.n	4d7a <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    4d86:	4d49      	ldr	r5, [pc, #292]	; (4eac <system_clock_init+0x15c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    4d88:	682b      	ldr	r3, [r5, #0]
    4d8a:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    4d8c:	4944      	ldr	r1, [pc, #272]	; (4ea0 <system_clock_init+0x150>)
    4d8e:	698a      	ldr	r2, [r1, #24]
    4d90:	0e5b      	lsrs	r3, r3, #25
    4d92:	041b      	lsls	r3, r3, #16
    4d94:	4846      	ldr	r0, [pc, #280]	; (4eb0 <system_clock_init+0x160>)
    4d96:	4002      	ands	r2, r0
    4d98:	4313      	orrs	r3, r2
    4d9a:	618b      	str	r3, [r1, #24]
	config->enable_32khz_output = true;
    4d9c:	a80a      	add	r0, sp, #40	; 0x28
    4d9e:	2301      	movs	r3, #1
    4da0:	7083      	strb	r3, [r0, #2]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    4da2:	2207      	movs	r2, #7
    4da4:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    4da6:	2400      	movs	r4, #0
    4da8:	7144      	strb	r4, [r0, #5]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    4daa:	7044      	strb	r4, [r0, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    4dac:	7104      	strb	r4, [r0, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    4dae:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    4db0:	4b40      	ldr	r3, [pc, #256]	; (4eb4 <system_clock_init+0x164>)
    4db2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    4db4:	2004      	movs	r0, #4
    4db6:	4b40      	ldr	r3, [pc, #256]	; (4eb8 <system_clock_init+0x168>)
    4db8:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4dba:	ab05      	add	r3, sp, #20
    4dbc:	2200      	movs	r2, #0
    4dbe:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4dc0:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4dc2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4dc4:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4dc6:	213f      	movs	r1, #63	; 0x3f
    4dc8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4dca:	393b      	subs	r1, #59	; 0x3b
    4dcc:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    4dce:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4dd0:	682b      	ldr	r3, [r5, #0]
    4dd2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4dd4:	2b3f      	cmp	r3, #63	; 0x3f
    4dd6:	d060      	beq.n	4e9a <system_clock_init+0x14a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    4dd8:	a805      	add	r0, sp, #20
    4dda:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    4ddc:	2304      	movs	r3, #4
    4dde:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4de0:	3303      	adds	r3, #3
    4de2:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4de4:	3338      	adds	r3, #56	; 0x38
    4de6:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4de8:	4b34      	ldr	r3, [pc, #208]	; (4ebc <system_clock_init+0x16c>)
    4dea:	4798      	blx	r3
	config->run_in_standby  = false;
    4dec:	a804      	add	r0, sp, #16
    4dee:	2500      	movs	r5, #0
    4df0:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4df2:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4df4:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4df6:	4b32      	ldr	r3, [pc, #200]	; (4ec0 <system_clock_init+0x170>)
    4df8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4dfa:	2006      	movs	r0, #6
    4dfc:	4f2e      	ldr	r7, [pc, #184]	; (4eb8 <system_clock_init+0x168>)
    4dfe:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4e00:	4b30      	ldr	r3, [pc, #192]	; (4ec4 <system_clock_init+0x174>)
    4e02:	4798      	blx	r3
	config->division_factor    = 1;
    4e04:	ac01      	add	r4, sp, #4
    4e06:	2601      	movs	r6, #1
    4e08:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    4e0a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4e0c:	2306      	movs	r3, #6
    4e0e:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    4e10:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4e12:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4e14:	0021      	movs	r1, r4
    4e16:	2001      	movs	r0, #1
    4e18:	4b2b      	ldr	r3, [pc, #172]	; (4ec8 <system_clock_init+0x178>)
    4e1a:	4699      	mov	r9, r3
    4e1c:	4798      	blx	r3
    4e1e:	2001      	movs	r0, #1
    4e20:	4b2a      	ldr	r3, [pc, #168]	; (4ecc <system_clock_init+0x17c>)
    4e22:	4698      	mov	r8, r3
    4e24:	4798      	blx	r3
	config->high_when_disabled = false;
    4e26:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    4e28:	7265      	strb	r5, [r4, #9]
    4e2a:	2304      	movs	r3, #4
    4e2c:	7023      	strb	r3, [r4, #0]
    4e2e:	2320      	movs	r3, #32
    4e30:	6063      	str	r3, [r4, #4]
    4e32:	7226      	strb	r6, [r4, #8]
    4e34:	0021      	movs	r1, r4
    4e36:	2002      	movs	r0, #2
    4e38:	47c8      	blx	r9
    4e3a:	2002      	movs	r0, #2
    4e3c:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    4e3e:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    4e40:	0021      	movs	r1, r4
    4e42:	2000      	movs	r0, #0
    4e44:	4b18      	ldr	r3, [pc, #96]	; (4ea8 <system_clock_init+0x158>)
    4e46:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    4e48:	2000      	movs	r0, #0
    4e4a:	4b21      	ldr	r3, [pc, #132]	; (4ed0 <system_clock_init+0x180>)
    4e4c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4e4e:	2007      	movs	r0, #7
    4e50:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4e52:	4913      	ldr	r1, [pc, #76]	; (4ea0 <system_clock_init+0x150>)
    4e54:	22d0      	movs	r2, #208	; 0xd0
    4e56:	68cb      	ldr	r3, [r1, #12]
    4e58:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4e5a:	2bd0      	cmp	r3, #208	; 0xd0
    4e5c:	d1fb      	bne.n	4e56 <system_clock_init+0x106>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    4e5e:	4a10      	ldr	r2, [pc, #64]	; (4ea0 <system_clock_init+0x150>)
    4e60:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    4e62:	2180      	movs	r1, #128	; 0x80
    4e64:	430b      	orrs	r3, r1
    4e66:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    4e68:	4a1a      	ldr	r2, [pc, #104]	; (4ed4 <system_clock_init+0x184>)
    4e6a:	2300      	movs	r3, #0
    4e6c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4e6e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4e70:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4e72:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    4e74:	a901      	add	r1, sp, #4
    4e76:	2201      	movs	r2, #1
    4e78:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4e7a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    4e7c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4e7e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4e80:	3307      	adds	r3, #7
    4e82:	700b      	strb	r3, [r1, #0]
    4e84:	2000      	movs	r0, #0
    4e86:	4b10      	ldr	r3, [pc, #64]	; (4ec8 <system_clock_init+0x178>)
    4e88:	4798      	blx	r3
    4e8a:	2000      	movs	r0, #0
    4e8c:	4b0f      	ldr	r3, [pc, #60]	; (4ecc <system_clock_init+0x17c>)
    4e8e:	4798      	blx	r3
#endif
}
    4e90:	b00d      	add	sp, #52	; 0x34
    4e92:	bc0c      	pop	{r2, r3}
    4e94:	4690      	mov	r8, r2
    4e96:	4699      	mov	r9, r3
    4e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4e9a:	3b20      	subs	r3, #32
    4e9c:	e79c      	b.n	4dd8 <system_clock_init+0x88>
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	40000800 	.word	0x40000800
    4ea4:	41004000 	.word	0x41004000
    4ea8:	00005111 	.word	0x00005111
    4eac:	00806024 	.word	0x00806024
    4eb0:	ff80ffff 	.word	0xff80ffff
    4eb4:	00004bad 	.word	0x00004bad
    4eb8:	00004ca9 	.word	0x00004ca9
    4ebc:	00004c29 	.word	0x00004c29
    4ec0:	00004b71 	.word	0x00004b71
    4ec4:	00004ed9 	.word	0x00004ed9
    4ec8:	00004efd 	.word	0x00004efd
    4ecc:	00004fb5 	.word	0x00004fb5
    4ed0:	00005085 	.word	0x00005085
    4ed4:	40000400 	.word	0x40000400

00004ed8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4ed8:	4a06      	ldr	r2, [pc, #24]	; (4ef4 <system_gclk_init+0x1c>)
    4eda:	6993      	ldr	r3, [r2, #24]
    4edc:	2108      	movs	r1, #8
    4ede:	430b      	orrs	r3, r1
    4ee0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4ee2:	2201      	movs	r2, #1
    4ee4:	4b04      	ldr	r3, [pc, #16]	; (4ef8 <system_gclk_init+0x20>)
    4ee6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4ee8:	0019      	movs	r1, r3
    4eea:	780b      	ldrb	r3, [r1, #0]
    4eec:	4213      	tst	r3, r2
    4eee:	d1fc      	bne.n	4eea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4ef0:	4770      	bx	lr
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	40000400 	.word	0x40000400
    4ef8:	40000c00 	.word	0x40000c00

00004efc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4efc:	b570      	push	{r4, r5, r6, lr}
    4efe:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4f00:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4f02:	780d      	ldrb	r5, [r1, #0]
    4f04:	022d      	lsls	r5, r5, #8
    4f06:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4f08:	784b      	ldrb	r3, [r1, #1]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d002      	beq.n	4f14 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4f0e:	2380      	movs	r3, #128	; 0x80
    4f10:	02db      	lsls	r3, r3, #11
    4f12:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4f14:	7a4b      	ldrb	r3, [r1, #9]
    4f16:	2b00      	cmp	r3, #0
    4f18:	d002      	beq.n	4f20 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4f1a:	2380      	movs	r3, #128	; 0x80
    4f1c:	031b      	lsls	r3, r3, #12
    4f1e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4f20:	6848      	ldr	r0, [r1, #4]
    4f22:	2801      	cmp	r0, #1
    4f24:	d910      	bls.n	4f48 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4f26:	1e43      	subs	r3, r0, #1
    4f28:	4218      	tst	r0, r3
    4f2a:	d134      	bne.n	4f96 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4f2c:	2802      	cmp	r0, #2
    4f2e:	d930      	bls.n	4f92 <system_gclk_gen_set_config+0x96>
    4f30:	2302      	movs	r3, #2
    4f32:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4f34:	3201      	adds	r2, #1
						mask <<= 1) {
    4f36:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4f38:	4298      	cmp	r0, r3
    4f3a:	d8fb      	bhi.n	4f34 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4f3c:	0212      	lsls	r2, r2, #8
    4f3e:	4332      	orrs	r2, r6
    4f40:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4f42:	2380      	movs	r3, #128	; 0x80
    4f44:	035b      	lsls	r3, r3, #13
    4f46:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4f48:	7a0b      	ldrb	r3, [r1, #8]
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d002      	beq.n	4f54 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4f4e:	2380      	movs	r3, #128	; 0x80
    4f50:	039b      	lsls	r3, r3, #14
    4f52:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f54:	4a13      	ldr	r2, [pc, #76]	; (4fa4 <system_gclk_gen_set_config+0xa8>)
    4f56:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4f58:	b25b      	sxtb	r3, r3
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	dbfb      	blt.n	4f56 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    4f5e:	4b12      	ldr	r3, [pc, #72]	; (4fa8 <system_gclk_gen_set_config+0xac>)
    4f60:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4f62:	4b12      	ldr	r3, [pc, #72]	; (4fac <system_gclk_gen_set_config+0xb0>)
    4f64:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f66:	4a0f      	ldr	r2, [pc, #60]	; (4fa4 <system_gclk_gen_set_config+0xa8>)
    4f68:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4f6a:	b25b      	sxtb	r3, r3
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	dbfb      	blt.n	4f68 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4f70:	4b0c      	ldr	r3, [pc, #48]	; (4fa4 <system_gclk_gen_set_config+0xa8>)
    4f72:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f74:	001a      	movs	r2, r3
    4f76:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4f78:	b25b      	sxtb	r3, r3
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	dbfb      	blt.n	4f76 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4f7e:	4a09      	ldr	r2, [pc, #36]	; (4fa4 <system_gclk_gen_set_config+0xa8>)
    4f80:	6853      	ldr	r3, [r2, #4]
    4f82:	2180      	movs	r1, #128	; 0x80
    4f84:	0249      	lsls	r1, r1, #9
    4f86:	400b      	ands	r3, r1
    4f88:	431d      	orrs	r5, r3
    4f8a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4f8c:	4b08      	ldr	r3, [pc, #32]	; (4fb0 <system_gclk_gen_set_config+0xb4>)
    4f8e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f90:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    4f92:	2200      	movs	r2, #0
    4f94:	e7d2      	b.n	4f3c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4f96:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    4f98:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4f9a:	2380      	movs	r3, #128	; 0x80
    4f9c:	029b      	lsls	r3, r3, #10
    4f9e:	431d      	orrs	r5, r3
    4fa0:	e7d2      	b.n	4f48 <system_gclk_gen_set_config+0x4c>
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	40000c00 	.word	0x40000c00
    4fa8:	00003f9d 	.word	0x00003f9d
    4fac:	40000c08 	.word	0x40000c08
    4fb0:	00003fdd 	.word	0x00003fdd

00004fb4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4fb4:	b510      	push	{r4, lr}
    4fb6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fb8:	4a0b      	ldr	r2, [pc, #44]	; (4fe8 <system_gclk_gen_enable+0x34>)
    4fba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4fbc:	b25b      	sxtb	r3, r3
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	dbfb      	blt.n	4fba <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    4fc2:	4b0a      	ldr	r3, [pc, #40]	; (4fec <system_gclk_gen_enable+0x38>)
    4fc4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4fc6:	4b0a      	ldr	r3, [pc, #40]	; (4ff0 <system_gclk_gen_enable+0x3c>)
    4fc8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fca:	4a07      	ldr	r2, [pc, #28]	; (4fe8 <system_gclk_gen_enable+0x34>)
    4fcc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4fce:	b25b      	sxtb	r3, r3
    4fd0:	2b00      	cmp	r3, #0
    4fd2:	dbfb      	blt.n	4fcc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4fd4:	4a04      	ldr	r2, [pc, #16]	; (4fe8 <system_gclk_gen_enable+0x34>)
    4fd6:	6851      	ldr	r1, [r2, #4]
    4fd8:	2380      	movs	r3, #128	; 0x80
    4fda:	025b      	lsls	r3, r3, #9
    4fdc:	430b      	orrs	r3, r1
    4fde:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    4fe0:	4b04      	ldr	r3, [pc, #16]	; (4ff4 <system_gclk_gen_enable+0x40>)
    4fe2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4fe4:	bd10      	pop	{r4, pc}
    4fe6:	46c0      	nop			; (mov r8, r8)
    4fe8:	40000c00 	.word	0x40000c00
    4fec:	00003f9d 	.word	0x00003f9d
    4ff0:	40000c04 	.word	0x40000c04
    4ff4:	00003fdd 	.word	0x00003fdd

00004ff8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4ff8:	b570      	push	{r4, r5, r6, lr}
    4ffa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4ffc:	4a1a      	ldr	r2, [pc, #104]	; (5068 <system_gclk_gen_get_hz+0x70>)
    4ffe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5000:	b25b      	sxtb	r3, r3
    5002:	2b00      	cmp	r3, #0
    5004:	dbfb      	blt.n	4ffe <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5006:	4b19      	ldr	r3, [pc, #100]	; (506c <system_gclk_gen_get_hz+0x74>)
    5008:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    500a:	4b19      	ldr	r3, [pc, #100]	; (5070 <system_gclk_gen_get_hz+0x78>)
    500c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    500e:	4a16      	ldr	r2, [pc, #88]	; (5068 <system_gclk_gen_get_hz+0x70>)
    5010:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5012:	b25b      	sxtb	r3, r3
    5014:	2b00      	cmp	r3, #0
    5016:	dbfb      	blt.n	5010 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5018:	4e13      	ldr	r6, [pc, #76]	; (5068 <system_gclk_gen_get_hz+0x70>)
    501a:	6870      	ldr	r0, [r6, #4]
    501c:	04c0      	lsls	r0, r0, #19
    501e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5020:	4b14      	ldr	r3, [pc, #80]	; (5074 <system_gclk_gen_get_hz+0x7c>)
    5022:	4798      	blx	r3
    5024:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5026:	4b12      	ldr	r3, [pc, #72]	; (5070 <system_gclk_gen_get_hz+0x78>)
    5028:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    502a:	6876      	ldr	r6, [r6, #4]
    502c:	02f6      	lsls	r6, r6, #11
    502e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5030:	4b11      	ldr	r3, [pc, #68]	; (5078 <system_gclk_gen_get_hz+0x80>)
    5032:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5034:	4a0c      	ldr	r2, [pc, #48]	; (5068 <system_gclk_gen_get_hz+0x70>)
    5036:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5038:	b25b      	sxtb	r3, r3
    503a:	2b00      	cmp	r3, #0
    503c:	dbfb      	blt.n	5036 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    503e:	4b0a      	ldr	r3, [pc, #40]	; (5068 <system_gclk_gen_get_hz+0x70>)
    5040:	689c      	ldr	r4, [r3, #8]
    5042:	0224      	lsls	r4, r4, #8
    5044:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5046:	4b0d      	ldr	r3, [pc, #52]	; (507c <system_gclk_gen_get_hz+0x84>)
    5048:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    504a:	2e00      	cmp	r6, #0
    504c:	d107      	bne.n	505e <system_gclk_gen_get_hz+0x66>
    504e:	2c01      	cmp	r4, #1
    5050:	d907      	bls.n	5062 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5052:	0021      	movs	r1, r4
    5054:	0028      	movs	r0, r5
    5056:	4b0a      	ldr	r3, [pc, #40]	; (5080 <system_gclk_gen_get_hz+0x88>)
    5058:	4798      	blx	r3
    505a:	0005      	movs	r5, r0
    505c:	e001      	b.n	5062 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    505e:	3401      	adds	r4, #1
    5060:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5062:	0028      	movs	r0, r5
    5064:	bd70      	pop	{r4, r5, r6, pc}
    5066:	46c0      	nop			; (mov r8, r8)
    5068:	40000c00 	.word	0x40000c00
    506c:	00003f9d 	.word	0x00003f9d
    5070:	40000c04 	.word	0x40000c04
    5074:	00004ae1 	.word	0x00004ae1
    5078:	40000c08 	.word	0x40000c08
    507c:	00003fdd 	.word	0x00003fdd
    5080:	00007a99 	.word	0x00007a99

00005084 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5084:	b510      	push	{r4, lr}
    5086:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5088:	4b06      	ldr	r3, [pc, #24]	; (50a4 <system_gclk_chan_enable+0x20>)
    508a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    508c:	4b06      	ldr	r3, [pc, #24]	; (50a8 <system_gclk_chan_enable+0x24>)
    508e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5090:	4a06      	ldr	r2, [pc, #24]	; (50ac <system_gclk_chan_enable+0x28>)
    5092:	8853      	ldrh	r3, [r2, #2]
    5094:	2180      	movs	r1, #128	; 0x80
    5096:	01c9      	lsls	r1, r1, #7
    5098:	430b      	orrs	r3, r1
    509a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    509c:	4b04      	ldr	r3, [pc, #16]	; (50b0 <system_gclk_chan_enable+0x2c>)
    509e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    50a0:	bd10      	pop	{r4, pc}
    50a2:	46c0      	nop			; (mov r8, r8)
    50a4:	00003f9d 	.word	0x00003f9d
    50a8:	40000c02 	.word	0x40000c02
    50ac:	40000c00 	.word	0x40000c00
    50b0:	00003fdd 	.word	0x00003fdd

000050b4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    50b4:	b510      	push	{r4, lr}
    50b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    50b8:	4b0f      	ldr	r3, [pc, #60]	; (50f8 <system_gclk_chan_disable+0x44>)
    50ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    50bc:	4b0f      	ldr	r3, [pc, #60]	; (50fc <system_gclk_chan_disable+0x48>)
    50be:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    50c0:	4a0f      	ldr	r2, [pc, #60]	; (5100 <system_gclk_chan_disable+0x4c>)
    50c2:	8853      	ldrh	r3, [r2, #2]
    50c4:	051b      	lsls	r3, r3, #20
    50c6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    50c8:	8853      	ldrh	r3, [r2, #2]
    50ca:	490e      	ldr	r1, [pc, #56]	; (5104 <system_gclk_chan_disable+0x50>)
    50cc:	400b      	ands	r3, r1
    50ce:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    50d0:	8853      	ldrh	r3, [r2, #2]
    50d2:	490d      	ldr	r1, [pc, #52]	; (5108 <system_gclk_chan_disable+0x54>)
    50d4:	400b      	ands	r3, r1
    50d6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    50d8:	0011      	movs	r1, r2
    50da:	2280      	movs	r2, #128	; 0x80
    50dc:	01d2      	lsls	r2, r2, #7
    50de:	884b      	ldrh	r3, [r1, #2]
    50e0:	4213      	tst	r3, r2
    50e2:	d1fc      	bne.n	50de <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    50e4:	4906      	ldr	r1, [pc, #24]	; (5100 <system_gclk_chan_disable+0x4c>)
    50e6:	884a      	ldrh	r2, [r1, #2]
    50e8:	0203      	lsls	r3, r0, #8
    50ea:	4806      	ldr	r0, [pc, #24]	; (5104 <system_gclk_chan_disable+0x50>)
    50ec:	4002      	ands	r2, r0
    50ee:	4313      	orrs	r3, r2
    50f0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    50f2:	4b06      	ldr	r3, [pc, #24]	; (510c <system_gclk_chan_disable+0x58>)
    50f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    50f6:	bd10      	pop	{r4, pc}
    50f8:	00003f9d 	.word	0x00003f9d
    50fc:	40000c02 	.word	0x40000c02
    5100:	40000c00 	.word	0x40000c00
    5104:	fffff0ff 	.word	0xfffff0ff
    5108:	ffffbfff 	.word	0xffffbfff
    510c:	00003fdd 	.word	0x00003fdd

00005110 <system_gclk_chan_set_config>:
{
    5110:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5112:	780c      	ldrb	r4, [r1, #0]
    5114:	0224      	lsls	r4, r4, #8
    5116:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5118:	4b02      	ldr	r3, [pc, #8]	; (5124 <system_gclk_chan_set_config+0x14>)
    511a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    511c:	b2a4      	uxth	r4, r4
    511e:	4b02      	ldr	r3, [pc, #8]	; (5128 <system_gclk_chan_set_config+0x18>)
    5120:	805c      	strh	r4, [r3, #2]
}
    5122:	bd10      	pop	{r4, pc}
    5124:	000050b5 	.word	0x000050b5
    5128:	40000c00 	.word	0x40000c00

0000512c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    512c:	b510      	push	{r4, lr}
    512e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5130:	4b06      	ldr	r3, [pc, #24]	; (514c <system_gclk_chan_get_hz+0x20>)
    5132:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5134:	4b06      	ldr	r3, [pc, #24]	; (5150 <system_gclk_chan_get_hz+0x24>)
    5136:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5138:	4b06      	ldr	r3, [pc, #24]	; (5154 <system_gclk_chan_get_hz+0x28>)
    513a:	885c      	ldrh	r4, [r3, #2]
    513c:	0524      	lsls	r4, r4, #20
    513e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5140:	4b05      	ldr	r3, [pc, #20]	; (5158 <system_gclk_chan_get_hz+0x2c>)
    5142:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5144:	0020      	movs	r0, r4
    5146:	4b05      	ldr	r3, [pc, #20]	; (515c <system_gclk_chan_get_hz+0x30>)
    5148:	4798      	blx	r3
}
    514a:	bd10      	pop	{r4, pc}
    514c:	00003f9d 	.word	0x00003f9d
    5150:	40000c02 	.word	0x40000c02
    5154:	40000c00 	.word	0x40000c00
    5158:	00003fdd 	.word	0x00003fdd
    515c:	00004ff9 	.word	0x00004ff9

00005160 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5160:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5162:	78d3      	ldrb	r3, [r2, #3]
    5164:	2b00      	cmp	r3, #0
    5166:	d135      	bne.n	51d4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5168:	7813      	ldrb	r3, [r2, #0]
    516a:	2b80      	cmp	r3, #128	; 0x80
    516c:	d029      	beq.n	51c2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    516e:	061b      	lsls	r3, r3, #24
    5170:	2480      	movs	r4, #128	; 0x80
    5172:	0264      	lsls	r4, r4, #9
    5174:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5176:	7854      	ldrb	r4, [r2, #1]
    5178:	2502      	movs	r5, #2
    517a:	43ac      	bics	r4, r5
    517c:	d106      	bne.n	518c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    517e:	7894      	ldrb	r4, [r2, #2]
    5180:	2c00      	cmp	r4, #0
    5182:	d120      	bne.n	51c6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5184:	2480      	movs	r4, #128	; 0x80
    5186:	02a4      	lsls	r4, r4, #10
    5188:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    518a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    518c:	7854      	ldrb	r4, [r2, #1]
    518e:	3c01      	subs	r4, #1
    5190:	2c01      	cmp	r4, #1
    5192:	d91c      	bls.n	51ce <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5194:	040d      	lsls	r5, r1, #16
    5196:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5198:	24a0      	movs	r4, #160	; 0xa0
    519a:	05e4      	lsls	r4, r4, #23
    519c:	432c      	orrs	r4, r5
    519e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    51a0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    51a2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    51a4:	24d0      	movs	r4, #208	; 0xd0
    51a6:	0624      	lsls	r4, r4, #24
    51a8:	432c      	orrs	r4, r5
    51aa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    51ac:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    51ae:	78d4      	ldrb	r4, [r2, #3]
    51b0:	2c00      	cmp	r4, #0
    51b2:	d122      	bne.n	51fa <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    51b4:	035b      	lsls	r3, r3, #13
    51b6:	d51c      	bpl.n	51f2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    51b8:	7893      	ldrb	r3, [r2, #2]
    51ba:	2b01      	cmp	r3, #1
    51bc:	d01e      	beq.n	51fc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    51be:	6141      	str	r1, [r0, #20]
    51c0:	e017      	b.n	51f2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    51c2:	2300      	movs	r3, #0
    51c4:	e7d7      	b.n	5176 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    51c6:	24c0      	movs	r4, #192	; 0xc0
    51c8:	02e4      	lsls	r4, r4, #11
    51ca:	4323      	orrs	r3, r4
    51cc:	e7dd      	b.n	518a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    51ce:	4c0d      	ldr	r4, [pc, #52]	; (5204 <_system_pinmux_config+0xa4>)
    51d0:	4023      	ands	r3, r4
    51d2:	e7df      	b.n	5194 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    51d4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    51d6:	040c      	lsls	r4, r1, #16
    51d8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    51da:	23a0      	movs	r3, #160	; 0xa0
    51dc:	05db      	lsls	r3, r3, #23
    51de:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    51e0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    51e2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    51e4:	23d0      	movs	r3, #208	; 0xd0
    51e6:	061b      	lsls	r3, r3, #24
    51e8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    51ea:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    51ec:	78d3      	ldrb	r3, [r2, #3]
    51ee:	2b00      	cmp	r3, #0
    51f0:	d103      	bne.n	51fa <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    51f2:	7853      	ldrb	r3, [r2, #1]
    51f4:	3b01      	subs	r3, #1
    51f6:	2b01      	cmp	r3, #1
    51f8:	d902      	bls.n	5200 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    51fa:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    51fc:	6181      	str	r1, [r0, #24]
    51fe:	e7f8      	b.n	51f2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5200:	6081      	str	r1, [r0, #8]
}
    5202:	e7fa      	b.n	51fa <_system_pinmux_config+0x9a>
    5204:	fffbffff 	.word	0xfffbffff

00005208 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5208:	b510      	push	{r4, lr}
    520a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    520c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    520e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5210:	2900      	cmp	r1, #0
    5212:	d104      	bne.n	521e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5214:	0943      	lsrs	r3, r0, #5
    5216:	01db      	lsls	r3, r3, #7
    5218:	4905      	ldr	r1, [pc, #20]	; (5230 <system_pinmux_pin_set_config+0x28>)
    521a:	468c      	mov	ip, r1
    521c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    521e:	241f      	movs	r4, #31
    5220:	4020      	ands	r0, r4
    5222:	2101      	movs	r1, #1
    5224:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5226:	0018      	movs	r0, r3
    5228:	4b02      	ldr	r3, [pc, #8]	; (5234 <system_pinmux_pin_set_config+0x2c>)
    522a:	4798      	blx	r3
}
    522c:	bd10      	pop	{r4, pc}
    522e:	46c0      	nop			; (mov r8, r8)
    5230:	41004400 	.word	0x41004400
    5234:	00005161 	.word	0x00005161

00005238 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5238:	4770      	bx	lr
	...

0000523c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    523c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    523e:	4b04      	ldr	r3, [pc, #16]	; (5250 <system_init+0x14>)
    5240:	4798      	blx	r3

	/* Initialize board hardware */
//	system_board_init();

	/* Initialize EVSYS hardware */
	_system_events_init();
    5242:	4b04      	ldr	r3, [pc, #16]	; (5254 <system_init+0x18>)
    5244:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5246:	4b04      	ldr	r3, [pc, #16]	; (5258 <system_init+0x1c>)
    5248:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    524a:	4b04      	ldr	r3, [pc, #16]	; (525c <system_init+0x20>)
    524c:	4798      	blx	r3
}
    524e:	bd10      	pop	{r4, pc}
    5250:	00004d51 	.word	0x00004d51
    5254:	00005239 	.word	0x00005239
    5258:	000040e5 	.word	0x000040e5
    525c:	00005239 	.word	0x00005239

00005260 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5260:	1c93      	adds	r3, r2, #2
    5262:	009b      	lsls	r3, r3, #2
    5264:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    5266:	2a02      	cmp	r2, #2
    5268:	d009      	beq.n	527e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    526a:	2a03      	cmp	r2, #3
    526c:	d00c      	beq.n	5288 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    526e:	2301      	movs	r3, #1
    5270:	4093      	lsls	r3, r2
    5272:	001a      	movs	r2, r3
    5274:	7e03      	ldrb	r3, [r0, #24]
    5276:	4313      	orrs	r3, r2
    5278:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    527a:	2000      	movs	r0, #0
    527c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    527e:	7e03      	ldrb	r3, [r0, #24]
    5280:	2210      	movs	r2, #16
    5282:	4313      	orrs	r3, r2
    5284:	7603      	strb	r3, [r0, #24]
    5286:	e7f8      	b.n	527a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    5288:	7e03      	ldrb	r3, [r0, #24]
    528a:	2220      	movs	r2, #32
    528c:	4313      	orrs	r3, r2
    528e:	7603      	strb	r3, [r0, #24]
    5290:	e7f3      	b.n	527a <tc_register_callback+0x1a>
	...

00005294 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    5294:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    5296:	0080      	lsls	r0, r0, #2
    5298:	4b16      	ldr	r3, [pc, #88]	; (52f4 <_tc_interrupt_handler+0x60>)
    529a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    529c:	6823      	ldr	r3, [r4, #0]
    529e:	7b9d      	ldrb	r5, [r3, #14]
    52a0:	7e22      	ldrb	r2, [r4, #24]
    52a2:	7e63      	ldrb	r3, [r4, #25]
    52a4:	4013      	ands	r3, r2
    52a6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    52a8:	07eb      	lsls	r3, r5, #31
    52aa:	d406      	bmi.n	52ba <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    52ac:	07ab      	lsls	r3, r5, #30
    52ae:	d40b      	bmi.n	52c8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    52b0:	06eb      	lsls	r3, r5, #27
    52b2:	d410      	bmi.n	52d6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    52b4:	06ab      	lsls	r3, r5, #26
    52b6:	d415      	bmi.n	52e4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    52b8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    52ba:	0020      	movs	r0, r4
    52bc:	68a3      	ldr	r3, [r4, #8]
    52be:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    52c0:	2301      	movs	r3, #1
    52c2:	6822      	ldr	r2, [r4, #0]
    52c4:	7393      	strb	r3, [r2, #14]
    52c6:	e7f1      	b.n	52ac <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    52c8:	0020      	movs	r0, r4
    52ca:	68e3      	ldr	r3, [r4, #12]
    52cc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    52ce:	2302      	movs	r3, #2
    52d0:	6822      	ldr	r2, [r4, #0]
    52d2:	7393      	strb	r3, [r2, #14]
    52d4:	e7ec      	b.n	52b0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    52d6:	0020      	movs	r0, r4
    52d8:	6923      	ldr	r3, [r4, #16]
    52da:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    52dc:	2310      	movs	r3, #16
    52de:	6822      	ldr	r2, [r4, #0]
    52e0:	7393      	strb	r3, [r2, #14]
    52e2:	e7e7      	b.n	52b4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    52e4:	0020      	movs	r0, r4
    52e6:	6963      	ldr	r3, [r4, #20]
    52e8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    52ea:	6823      	ldr	r3, [r4, #0]
    52ec:	2220      	movs	r2, #32
    52ee:	739a      	strb	r2, [r3, #14]
}
    52f0:	e7e2      	b.n	52b8 <_tc_interrupt_handler+0x24>
    52f2:	46c0      	nop			; (mov r8, r8)
    52f4:	20000b4c 	.word	0x20000b4c

000052f8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    52f8:	b510      	push	{r4, lr}
    52fa:	2000      	movs	r0, #0
    52fc:	4b01      	ldr	r3, [pc, #4]	; (5304 <TC3_Handler+0xc>)
    52fe:	4798      	blx	r3
    5300:	bd10      	pop	{r4, pc}
    5302:	46c0      	nop			; (mov r8, r8)
    5304:	00005295 	.word	0x00005295

00005308 <TC4_Handler>:
    5308:	b510      	push	{r4, lr}
    530a:	2001      	movs	r0, #1
    530c:	4b01      	ldr	r3, [pc, #4]	; (5314 <TC4_Handler+0xc>)
    530e:	4798      	blx	r3
    5310:	bd10      	pop	{r4, pc}
    5312:	46c0      	nop			; (mov r8, r8)
    5314:	00005295 	.word	0x00005295

00005318 <TC5_Handler>:
    5318:	b510      	push	{r4, lr}
    531a:	2002      	movs	r0, #2
    531c:	4b01      	ldr	r3, [pc, #4]	; (5324 <TC5_Handler+0xc>)
    531e:	4798      	blx	r3
    5320:	bd10      	pop	{r4, pc}
    5322:	46c0      	nop			; (mov r8, r8)
    5324:	00005295 	.word	0x00005295

00005328 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5328:	b530      	push	{r4, r5, lr}
    532a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    532c:	aa01      	add	r2, sp, #4
    532e:	4b0b      	ldr	r3, [pc, #44]	; (535c <_tc_get_inst_index+0x34>)
    5330:	cb32      	ldmia	r3!, {r1, r4, r5}
    5332:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    5334:	9b01      	ldr	r3, [sp, #4]
    5336:	4298      	cmp	r0, r3
    5338:	d00d      	beq.n	5356 <_tc_get_inst_index+0x2e>
    533a:	9b02      	ldr	r3, [sp, #8]
    533c:	4298      	cmp	r0, r3
    533e:	d008      	beq.n	5352 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5340:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    5342:	9a03      	ldr	r2, [sp, #12]
    5344:	4282      	cmp	r2, r0
    5346:	d002      	beq.n	534e <_tc_get_inst_index+0x26>
}
    5348:	0018      	movs	r0, r3
    534a:	b005      	add	sp, #20
    534c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    534e:	3302      	adds	r3, #2
    5350:	e002      	b.n	5358 <_tc_get_inst_index+0x30>
    5352:	2301      	movs	r3, #1
    5354:	e000      	b.n	5358 <_tc_get_inst_index+0x30>
    5356:	2300      	movs	r3, #0
			return i;
    5358:	b2db      	uxtb	r3, r3
    535a:	e7f5      	b.n	5348 <_tc_get_inst_index+0x20>
    535c:	00009f7c 	.word	0x00009f7c

00005360 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5360:	b5f0      	push	{r4, r5, r6, r7, lr}
    5362:	b087      	sub	sp, #28
    5364:	0004      	movs	r4, r0
    5366:	000d      	movs	r5, r1
    5368:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    536a:	0008      	movs	r0, r1
    536c:	4b85      	ldr	r3, [pc, #532]	; (5584 <tc_init+0x224>)
    536e:	4798      	blx	r3
    5370:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    5372:	ab05      	add	r3, sp, #20
    5374:	221b      	movs	r2, #27
    5376:	701a      	strb	r2, [r3, #0]
    5378:	3201      	adds	r2, #1
    537a:	705a      	strb	r2, [r3, #1]
    537c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    537e:	ab03      	add	r3, sp, #12
    5380:	2280      	movs	r2, #128	; 0x80
    5382:	0112      	lsls	r2, r2, #4
    5384:	801a      	strh	r2, [r3, #0]
    5386:	2280      	movs	r2, #128	; 0x80
    5388:	0152      	lsls	r2, r2, #5
    538a:	805a      	strh	r2, [r3, #2]
    538c:	2280      	movs	r2, #128	; 0x80
    538e:	0192      	lsls	r2, r2, #6
    5390:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    5392:	2300      	movs	r3, #0
    5394:	60a3      	str	r3, [r4, #8]
    5396:	60e3      	str	r3, [r4, #12]
    5398:	6123      	str	r3, [r4, #16]
    539a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    539c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    539e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    53a0:	0082      	lsls	r2, r0, #2
    53a2:	4b79      	ldr	r3, [pc, #484]	; (5588 <tc_init+0x228>)
    53a4:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    53a6:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    53a8:	78b3      	ldrb	r3, [r6, #2]
    53aa:	2b08      	cmp	r3, #8
    53ac:	d006      	beq.n	53bc <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    53ae:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    53b0:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    53b2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    53b4:	07db      	lsls	r3, r3, #31
    53b6:	d505      	bpl.n	53c4 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    53b8:	b007      	add	sp, #28
    53ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    53bc:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    53be:	07fa      	lsls	r2, r7, #31
    53c0:	d5fa      	bpl.n	53b8 <tc_init+0x58>
    53c2:	e7f4      	b.n	53ae <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    53c4:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    53c6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    53c8:	06db      	lsls	r3, r3, #27
    53ca:	d4f5      	bmi.n	53b8 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    53cc:	882b      	ldrh	r3, [r5, #0]
    53ce:	079b      	lsls	r3, r3, #30
    53d0:	d4f2      	bmi.n	53b8 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    53d2:	7c33      	ldrb	r3, [r6, #16]
    53d4:	2b00      	cmp	r3, #0
    53d6:	d179      	bne.n	54cc <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    53d8:	7f33      	ldrb	r3, [r6, #28]
    53da:	2b00      	cmp	r3, #0
    53dc:	d000      	beq.n	53e0 <tc_init+0x80>
    53de:	e081      	b.n	54e4 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    53e0:	496a      	ldr	r1, [pc, #424]	; (558c <tc_init+0x22c>)
    53e2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    53e4:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    53e6:	ab03      	add	r3, sp, #12
    53e8:	5ad3      	ldrh	r3, [r2, r3]
    53ea:	4303      	orrs	r3, r0
    53ec:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    53ee:	78b3      	ldrb	r3, [r6, #2]
    53f0:	2b08      	cmp	r3, #8
    53f2:	d100      	bne.n	53f6 <tc_init+0x96>
    53f4:	e086      	b.n	5504 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    53f6:	a901      	add	r1, sp, #4
    53f8:	7833      	ldrb	r3, [r6, #0]
    53fa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    53fc:	ab05      	add	r3, sp, #20
    53fe:	5ddf      	ldrb	r7, [r3, r7]
    5400:	0038      	movs	r0, r7
    5402:	4b63      	ldr	r3, [pc, #396]	; (5590 <tc_init+0x230>)
    5404:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5406:	0038      	movs	r0, r7
    5408:	4b62      	ldr	r3, [pc, #392]	; (5594 <tc_init+0x234>)
    540a:	4798      	blx	r3
	ctrla_tmp =
    540c:	8931      	ldrh	r1, [r6, #8]
    540e:	88b3      	ldrh	r3, [r6, #4]
    5410:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    5412:	78b1      	ldrb	r1, [r6, #2]
    5414:	79b2      	ldrb	r2, [r6, #6]
    5416:	4311      	orrs	r1, r2
	ctrla_tmp =
    5418:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    541a:	7873      	ldrb	r3, [r6, #1]
    541c:	2b00      	cmp	r3, #0
    541e:	d002      	beq.n	5426 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    5420:	2380      	movs	r3, #128	; 0x80
    5422:	011b      	lsls	r3, r3, #4
    5424:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5426:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5428:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    542a:	b25b      	sxtb	r3, r3
    542c:	2b00      	cmp	r3, #0
    542e:	dbfb      	blt.n	5428 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5430:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    5432:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5434:	1e4b      	subs	r3, r1, #1
    5436:	4199      	sbcs	r1, r3
    5438:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    543a:	7bb3      	ldrb	r3, [r6, #14]
    543c:	2b00      	cmp	r3, #0
    543e:	d001      	beq.n	5444 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5440:	2301      	movs	r3, #1
    5442:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5444:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5446:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    5448:	b25b      	sxtb	r3, r3
    544a:	2b00      	cmp	r3, #0
    544c:	dbfb      	blt.n	5446 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    544e:	23ff      	movs	r3, #255	; 0xff
    5450:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    5452:	2900      	cmp	r1, #0
    5454:	d005      	beq.n	5462 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5456:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5458:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    545a:	b25b      	sxtb	r3, r3
    545c:	2b00      	cmp	r3, #0
    545e:	dbfb      	blt.n	5458 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5460:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    5462:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    5464:	7af3      	ldrb	r3, [r6, #11]
    5466:	2b00      	cmp	r3, #0
    5468:	d001      	beq.n	546e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    546a:	2310      	movs	r3, #16
    546c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    546e:	7b33      	ldrb	r3, [r6, #12]
    5470:	2b00      	cmp	r3, #0
    5472:	d001      	beq.n	5478 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    5474:	2320      	movs	r3, #32
    5476:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5478:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    547a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    547c:	b25b      	sxtb	r3, r3
    547e:	2b00      	cmp	r3, #0
    5480:	dbfb      	blt.n	547a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    5482:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5484:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5486:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    5488:	b25b      	sxtb	r3, r3
    548a:	2b00      	cmp	r3, #0
    548c:	dbfb      	blt.n	5486 <tc_init+0x126>
	switch (module_inst->counter_size) {
    548e:	7923      	ldrb	r3, [r4, #4]
    5490:	2b04      	cmp	r3, #4
    5492:	d03f      	beq.n	5514 <tc_init+0x1b4>
    5494:	2b08      	cmp	r3, #8
    5496:	d05e      	beq.n	5556 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    5498:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    549a:	2b00      	cmp	r3, #0
    549c:	d000      	beq.n	54a0 <tc_init+0x140>
    549e:	e78b      	b.n	53b8 <tc_init+0x58>
    54a0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    54a2:	b25b      	sxtb	r3, r3
    54a4:	2b00      	cmp	r3, #0
    54a6:	dbfb      	blt.n	54a0 <tc_init+0x140>
				= config->counter_16_bit.value;
    54a8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    54aa:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    54ac:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    54ae:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    54b0:	b25b      	sxtb	r3, r3
    54b2:	2b00      	cmp	r3, #0
    54b4:	dbfb      	blt.n	54ae <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    54b6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    54b8:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    54ba:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    54bc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    54be:	b25b      	sxtb	r3, r3
    54c0:	2b00      	cmp	r3, #0
    54c2:	dbfb      	blt.n	54bc <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    54c4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    54c6:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    54c8:	2000      	movs	r0, #0
    54ca:	e775      	b.n	53b8 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    54cc:	a902      	add	r1, sp, #8
    54ce:	2301      	movs	r3, #1
    54d0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    54d2:	2200      	movs	r2, #0
    54d4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    54d6:	7e32      	ldrb	r2, [r6, #24]
    54d8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    54da:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    54dc:	7d30      	ldrb	r0, [r6, #20]
    54de:	4b2e      	ldr	r3, [pc, #184]	; (5598 <tc_init+0x238>)
    54e0:	4798      	blx	r3
    54e2:	e779      	b.n	53d8 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    54e4:	a902      	add	r1, sp, #8
    54e6:	2301      	movs	r3, #1
    54e8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    54ea:	2200      	movs	r2, #0
    54ec:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    54ee:	3224      	adds	r2, #36	; 0x24
    54f0:	18b2      	adds	r2, r6, r2
    54f2:	7812      	ldrb	r2, [r2, #0]
    54f4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    54f6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    54f8:	331f      	adds	r3, #31
    54fa:	18f3      	adds	r3, r6, r3
    54fc:	7818      	ldrb	r0, [r3, #0]
    54fe:	4b26      	ldr	r3, [pc, #152]	; (5598 <tc_init+0x238>)
    5500:	4798      	blx	r3
    5502:	e76d      	b.n	53e0 <tc_init+0x80>
    5504:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    5506:	1c7a      	adds	r2, r7, #1
    5508:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    550a:	ab03      	add	r3, sp, #12
    550c:	5ad3      	ldrh	r3, [r2, r3]
    550e:	4303      	orrs	r3, r0
    5510:	620b      	str	r3, [r1, #32]
    5512:	e770      	b.n	53f6 <tc_init+0x96>
    5514:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5516:	b25b      	sxtb	r3, r3
    5518:	2b00      	cmp	r3, #0
    551a:	dbfb      	blt.n	5514 <tc_init+0x1b4>
					config->counter_8_bit.value;
    551c:	2328      	movs	r3, #40	; 0x28
    551e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    5520:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5522:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5524:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5526:	b25b      	sxtb	r3, r3
    5528:	2b00      	cmp	r3, #0
    552a:	dbfb      	blt.n	5524 <tc_init+0x1c4>
					config->counter_8_bit.period;
    552c:	2329      	movs	r3, #41	; 0x29
    552e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    5530:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5532:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5534:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5536:	b25b      	sxtb	r3, r3
    5538:	2b00      	cmp	r3, #0
    553a:	dbfb      	blt.n	5534 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    553c:	232a      	movs	r3, #42	; 0x2a
    553e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    5540:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5542:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5544:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5546:	b25b      	sxtb	r3, r3
    5548:	2b00      	cmp	r3, #0
    554a:	dbfb      	blt.n	5544 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    554c:	232b      	movs	r3, #43	; 0x2b
    554e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    5550:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    5552:	2000      	movs	r0, #0
    5554:	e730      	b.n	53b8 <tc_init+0x58>
    5556:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5558:	b25b      	sxtb	r3, r3
    555a:	2b00      	cmp	r3, #0
    555c:	dbfb      	blt.n	5556 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    555e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5560:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5562:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5564:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5566:	b25b      	sxtb	r3, r3
    5568:	2b00      	cmp	r3, #0
    556a:	dbfb      	blt.n	5564 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    556c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    556e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5570:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5572:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5574:	b25b      	sxtb	r3, r3
    5576:	2b00      	cmp	r3, #0
    5578:	dbfb      	blt.n	5572 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    557a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    557c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    557e:	2000      	movs	r0, #0
    5580:	e71a      	b.n	53b8 <tc_init+0x58>
    5582:	46c0      	nop			; (mov r8, r8)
    5584:	00005329 	.word	0x00005329
    5588:	20000b4c 	.word	0x20000b4c
    558c:	40000400 	.word	0x40000400
    5590:	00005111 	.word	0x00005111
    5594:	00005085 	.word	0x00005085
    5598:	00005209 	.word	0x00005209

0000559c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    559c:	6802      	ldr	r2, [r0, #0]
    559e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    55a0:	b25b      	sxtb	r3, r3
    55a2:	2b00      	cmp	r3, #0
    55a4:	dbfb      	blt.n	559e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    55a6:	7903      	ldrb	r3, [r0, #4]
    55a8:	2b04      	cmp	r3, #4
    55aa:	d005      	beq.n	55b8 <tc_get_count_value+0x1c>
    55ac:	2b08      	cmp	r3, #8
    55ae:	d009      	beq.n	55c4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    55b0:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    55b2:	2b00      	cmp	r3, #0
    55b4:	d003      	beq.n	55be <tc_get_count_value+0x22>
}
    55b6:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    55b8:	7c10      	ldrb	r0, [r2, #16]
    55ba:	b2c0      	uxtb	r0, r0
    55bc:	e7fb      	b.n	55b6 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    55be:	8a10      	ldrh	r0, [r2, #16]
    55c0:	b280      	uxth	r0, r0
    55c2:	e7f8      	b.n	55b6 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    55c4:	6910      	ldr	r0, [r2, #16]
    55c6:	e7f6      	b.n	55b6 <tc_get_count_value+0x1a>

000055c8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    55c8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    55ca:	6804      	ldr	r4, [r0, #0]
    55cc:	7be3      	ldrb	r3, [r4, #15]

	while(tc_is_syncing(module_inst)){/* Wait for sync */}
    55ce:	b25b      	sxtb	r3, r3
    55d0:	2b00      	cmp	r3, #0
    55d2:	dbfb      	blt.n	55cc <tc_set_compare_value+0x4>

	/* Read out based on the TC counter size */
	switch(module_inst->counter_size) 
    55d4:	7903      	ldrb	r3, [r0, #4]
    55d6:	2b04      	cmp	r3, #4
    55d8:	d005      	beq.n	55e6 <tc_set_compare_value+0x1e>
    55da:	2b08      	cmp	r3, #8
    55dc:	d014      	beq.n	5608 <tc_set_compare_value+0x40>
				tc_module->COUNT32.CC[channel_index].reg = (uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    55de:	2017      	movs	r0, #23
	switch(module_inst->counter_size) 
    55e0:	2b00      	cmp	r3, #0
    55e2:	d008      	beq.n	55f6 <tc_set_compare_value+0x2e>
}
    55e4:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    55e6:	2017      	movs	r0, #23
			if(channel_index < NUMBER_OF_COMPARE_CAPTURE_CHANNELS) 
    55e8:	2901      	cmp	r1, #1
    55ea:	d8fb      	bhi.n	55e4 <tc_set_compare_value+0x1c>
				tc_module->COUNT8.CC[channel_index].reg = (uint8_t)compare;
    55ec:	b2d2      	uxtb	r2, r2
    55ee:	1861      	adds	r1, r4, r1
    55f0:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    55f2:	2000      	movs	r0, #0
    55f4:	e7f6      	b.n	55e4 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    55f6:	2017      	movs	r0, #23
			if(channel_index < NUMBER_OF_COMPARE_CAPTURE_CHANNELS) 
    55f8:	2901      	cmp	r1, #1
    55fa:	d8f3      	bhi.n	55e4 <tc_set_compare_value+0x1c>
				tc_module->COUNT16.CC[channel_index].reg = (uint16_t)compare;
    55fc:	b292      	uxth	r2, r2
    55fe:	310c      	adds	r1, #12
    5600:	0049      	lsls	r1, r1, #1
    5602:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    5604:	2000      	movs	r0, #0
    5606:	e7ed      	b.n	55e4 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    5608:	2017      	movs	r0, #23
			if(channel_index < NUMBER_OF_COMPARE_CAPTURE_CHANNELS) 
    560a:	2901      	cmp	r1, #1
    560c:	d8ea      	bhi.n	55e4 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg = (uint32_t)compare;
    560e:	3106      	adds	r1, #6
    5610:	0089      	lsls	r1, r1, #2
    5612:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    5614:	2000      	movs	r0, #0
    5616:	e7e5      	b.n	55e4 <tc_set_compare_value+0x1c>

00005618 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5618:	e7fe      	b.n	5618 <Dummy_Handler>
	...

0000561c <Reset_Handler>:
{
    561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    561e:	4a2a      	ldr	r2, [pc, #168]	; (56c8 <Reset_Handler+0xac>)
    5620:	4b2a      	ldr	r3, [pc, #168]	; (56cc <Reset_Handler+0xb0>)
    5622:	429a      	cmp	r2, r3
    5624:	d011      	beq.n	564a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5626:	001a      	movs	r2, r3
    5628:	4b29      	ldr	r3, [pc, #164]	; (56d0 <Reset_Handler+0xb4>)
    562a:	429a      	cmp	r2, r3
    562c:	d20d      	bcs.n	564a <Reset_Handler+0x2e>
    562e:	4a29      	ldr	r2, [pc, #164]	; (56d4 <Reset_Handler+0xb8>)
    5630:	3303      	adds	r3, #3
    5632:	1a9b      	subs	r3, r3, r2
    5634:	089b      	lsrs	r3, r3, #2
    5636:	3301      	adds	r3, #1
    5638:	009b      	lsls	r3, r3, #2
    563a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    563c:	4823      	ldr	r0, [pc, #140]	; (56cc <Reset_Handler+0xb0>)
    563e:	4922      	ldr	r1, [pc, #136]	; (56c8 <Reset_Handler+0xac>)
    5640:	588c      	ldr	r4, [r1, r2]
    5642:	5084      	str	r4, [r0, r2]
    5644:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5646:	429a      	cmp	r2, r3
    5648:	d1fa      	bne.n	5640 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    564a:	4a23      	ldr	r2, [pc, #140]	; (56d8 <Reset_Handler+0xbc>)
    564c:	4b23      	ldr	r3, [pc, #140]	; (56dc <Reset_Handler+0xc0>)
    564e:	429a      	cmp	r2, r3
    5650:	d20a      	bcs.n	5668 <Reset_Handler+0x4c>
    5652:	43d3      	mvns	r3, r2
    5654:	4921      	ldr	r1, [pc, #132]	; (56dc <Reset_Handler+0xc0>)
    5656:	185b      	adds	r3, r3, r1
    5658:	2103      	movs	r1, #3
    565a:	438b      	bics	r3, r1
    565c:	3304      	adds	r3, #4
    565e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5660:	2100      	movs	r1, #0
    5662:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5664:	4293      	cmp	r3, r2
    5666:	d1fc      	bne.n	5662 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5668:	4a1d      	ldr	r2, [pc, #116]	; (56e0 <Reset_Handler+0xc4>)
    566a:	21ff      	movs	r1, #255	; 0xff
    566c:	4b1d      	ldr	r3, [pc, #116]	; (56e4 <Reset_Handler+0xc8>)
    566e:	438b      	bics	r3, r1
    5670:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5672:	39fd      	subs	r1, #253	; 0xfd
    5674:	2390      	movs	r3, #144	; 0x90
    5676:	005b      	lsls	r3, r3, #1
    5678:	4a1b      	ldr	r2, [pc, #108]	; (56e8 <Reset_Handler+0xcc>)
    567a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    567c:	4a1b      	ldr	r2, [pc, #108]	; (56ec <Reset_Handler+0xd0>)
    567e:	78d3      	ldrb	r3, [r2, #3]
    5680:	2503      	movs	r5, #3
    5682:	43ab      	bics	r3, r5
    5684:	2402      	movs	r4, #2
    5686:	4323      	orrs	r3, r4
    5688:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    568a:	78d3      	ldrb	r3, [r2, #3]
    568c:	270c      	movs	r7, #12
    568e:	43bb      	bics	r3, r7
    5690:	2608      	movs	r6, #8
    5692:	4333      	orrs	r3, r6
    5694:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    5696:	4b16      	ldr	r3, [pc, #88]	; (56f0 <Reset_Handler+0xd4>)
    5698:	7b98      	ldrb	r0, [r3, #14]
    569a:	2230      	movs	r2, #48	; 0x30
    569c:	4390      	bics	r0, r2
    569e:	2220      	movs	r2, #32
    56a0:	4310      	orrs	r0, r2
    56a2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    56a4:	7b99      	ldrb	r1, [r3, #14]
    56a6:	43b9      	bics	r1, r7
    56a8:	4331      	orrs	r1, r6
    56aa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    56ac:	7b9a      	ldrb	r2, [r3, #14]
    56ae:	43aa      	bics	r2, r5
    56b0:	4322      	orrs	r2, r4
    56b2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    56b4:	4a0f      	ldr	r2, [pc, #60]	; (56f4 <Reset_Handler+0xd8>)
    56b6:	6853      	ldr	r3, [r2, #4]
    56b8:	2180      	movs	r1, #128	; 0x80
    56ba:	430b      	orrs	r3, r1
    56bc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    56be:	4b0e      	ldr	r3, [pc, #56]	; (56f8 <Reset_Handler+0xdc>)
    56c0:	4798      	blx	r3
        main();
    56c2:	4b0e      	ldr	r3, [pc, #56]	; (56fc <Reset_Handler+0xe0>)
    56c4:	4798      	blx	r3
    56c6:	e7fe      	b.n	56c6 <Reset_Handler+0xaa>
    56c8:	0000a4e8 	.word	0x0000a4e8
    56cc:	20000000 	.word	0x20000000
    56d0:	20000074 	.word	0x20000074
    56d4:	20000004 	.word	0x20000004
    56d8:	20000074 	.word	0x20000074
    56dc:	20000cf8 	.word	0x20000cf8
    56e0:	e000ed00 	.word	0xe000ed00
    56e4:	00000000 	.word	0x00000000
    56e8:	41007000 	.word	0x41007000
    56ec:	41005000 	.word	0x41005000
    56f0:	41004800 	.word	0x41004800
    56f4:	41004000 	.word	0x41004000
    56f8:	00007dd9 	.word	0x00007dd9
    56fc:	00007719 	.word	0x00007719

00005700 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5700:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5702:	4a06      	ldr	r2, [pc, #24]	; (571c <_sbrk+0x1c>)
    5704:	6812      	ldr	r2, [r2, #0]
    5706:	2a00      	cmp	r2, #0
    5708:	d004      	beq.n	5714 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    570a:	4a04      	ldr	r2, [pc, #16]	; (571c <_sbrk+0x1c>)
    570c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    570e:	18c3      	adds	r3, r0, r3
    5710:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    5712:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5714:	4902      	ldr	r1, [pc, #8]	; (5720 <_sbrk+0x20>)
    5716:	4a01      	ldr	r2, [pc, #4]	; (571c <_sbrk+0x1c>)
    5718:	6011      	str	r1, [r2, #0]
    571a:	e7f6      	b.n	570a <_sbrk+0xa>
    571c:	200001c0 	.word	0x200001c0
    5720:	20002cf8 	.word	0x20002cf8

00005724 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    5724:	2001      	movs	r0, #1
    5726:	4240      	negs	r0, r0
    5728:	4770      	bx	lr

0000572a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    572a:	2380      	movs	r3, #128	; 0x80
    572c:	019b      	lsls	r3, r3, #6
    572e:	604b      	str	r3, [r1, #4]

	return 0;
}
    5730:	2000      	movs	r0, #0
    5732:	4770      	bx	lr

00005734 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5734:	2001      	movs	r0, #1
    5736:	4770      	bx	lr

00005738 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5738:	2000      	movs	r0, #0
    573a:	4770      	bx	lr

0000573c <load_hw_timer>:

	cpu_irq_restore(flags);
}

static void load_hw_timer(uint8_t timer_id)
{
    573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    573e:	0006      	movs	r6, r0
	if (NO_TIMER != timer_id) {
    5740:	28ff      	cmp	r0, #255	; 0xff
    5742:	d027      	beq.n	5794 <load_hw_timer+0x58>
{
	uint16_t current_sys_time;
	uint32_t current_time;

	do {
		current_sys_time = sys_time;
    5744:	4d15      	ldr	r5, [pc, #84]	; (579c <load_hw_timer+0x60>)
		current_time = current_sys_time;
		current_time = current_time << 16;
		current_time = current_time | common_tc_read_count();
    5746:	4f16      	ldr	r7, [pc, #88]	; (57a0 <load_hw_timer+0x64>)
		current_sys_time = sys_time;
    5748:	882c      	ldrh	r4, [r5, #0]
    574a:	b2a4      	uxth	r4, r4
		current_time = current_time | common_tc_read_count();
    574c:	47b8      	blx	r7
		 * This calculation is valid only if the timer has not rolled
		 * over.
		 * The sys_time variable may have changed in the timer overflow
		 * ISR.
		 */
	} while (current_sys_time != sys_time);
    574e:	882b      	ldrh	r3, [r5, #0]
    5750:	b29b      	uxth	r3, r3
    5752:	429c      	cmp	r4, r3
    5754:	d1f8      	bne.n	5748 <load_hw_timer+0xc>
		current_time = current_time << 16;
    5756:	0424      	lsls	r4, r4, #16
		uint32_t point_in_time = timer_array[timer_id].abs_exp_timer;
    5758:	0133      	lsls	r3, r6, #4
		current_time = current_time | common_tc_read_count();
    575a:	4320      	orrs	r0, r4
	return ((t2 - t1) < INT32_MAX);
    575c:	4a11      	ldr	r2, [pc, #68]	; (57a4 <load_hw_timer+0x68>)
    575e:	589c      	ldr	r4, [r3, r2]
    5760:	1a20      	subs	r0, r4, r0
		if (compare_time(now, point_in_time)) {
    5762:	4b11      	ldr	r3, [pc, #68]	; (57a8 <load_hw_timer+0x6c>)
    5764:	4298      	cmp	r0, r3
    5766:	d811      	bhi.n	578c <load_hw_timer+0x50>
			if (!timer_array[timer_id].loaded) {
    5768:	0132      	lsls	r2, r6, #4
    576a:	4b0e      	ldr	r3, [pc, #56]	; (57a4 <load_hw_timer+0x68>)
    576c:	189b      	adds	r3, r3, r2
    576e:	7b5b      	ldrb	r3, [r3, #13]
    5770:	2b00      	cmp	r3, #0
    5772:	d10e      	bne.n	5792 <load_hw_timer+0x56>
				if (timediff <= UINT16_MAX) {
    5774:	4b0d      	ldr	r3, [pc, #52]	; (57ac <load_hw_timer+0x70>)
    5776:	4298      	cmp	r0, r3
    5778:	d80b      	bhi.n	5792 <load_hw_timer+0x56>
					common_tc_delay(timediff);
    577a:	b280      	uxth	r0, r0
    577c:	4b0c      	ldr	r3, [pc, #48]	; (57b0 <load_hw_timer+0x74>)
    577e:	4798      	blx	r3
					timer_array[timer_id].loaded = true;
    5780:	0136      	lsls	r6, r6, #4
    5782:	4b08      	ldr	r3, [pc, #32]	; (57a4 <load_hw_timer+0x68>)
    5784:	199e      	adds	r6, r3, r6
    5786:	2301      	movs	r3, #1
    5788:	7373      	strb	r3, [r6, #13]
    578a:	e002      	b.n	5792 <load_hw_timer+0x56>
			timer_trigger = true;
    578c:	2201      	movs	r2, #1
    578e:	4b09      	ldr	r3, [pc, #36]	; (57b4 <load_hw_timer+0x78>)
    5790:	701a      	strb	r2, [r3, #0]
}
    5792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		common_tc_compare_stop();
    5794:	4b08      	ldr	r3, [pc, #32]	; (57b8 <load_hw_timer+0x7c>)
    5796:	4798      	blx	r3
}
    5798:	e7fb      	b.n	5792 <load_hw_timer+0x56>
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	20000b58 	.word	0x20000b58
    57a0:	000079b9 	.word	0x000079b9
    57a4:	20000b5c 	.word	0x20000b5c
    57a8:	7ffffffe 	.word	0x7ffffffe
    57ac:	0000ffff 	.word	0x0000ffff
    57b0:	00007a2d 	.word	0x00007a2d
    57b4:	20000bac 	.word	0x20000bac
    57b8:	00007a05 	.word	0x00007a05

000057bc <internal_timer_handler>:

	cpu_irq_restore(flags);
}

static void internal_timer_handler(void)
{
    57bc:	b510      	push	{r4, lr}
	/*
	 * Flag was set once a timer has expired by the timer ISR or
	 * by function prog_rc().
	 */
	if (timer_trigger) {
    57be:	4b1d      	ldr	r3, [pc, #116]	; (5834 <internal_timer_handler+0x78>)
    57c0:	781b      	ldrb	r3, [r3, #0]
    57c2:	2b00      	cmp	r3, #0
    57c4:	d027      	beq.n	5816 <internal_timer_handler+0x5a>
		timer_trigger = false;
    57c6:	2200      	movs	r2, #0
    57c8:	4b1a      	ldr	r3, [pc, #104]	; (5834 <internal_timer_handler+0x78>)
    57ca:	701a      	strb	r2, [r3, #0]

		if (running_timers > 0) { /* Holds the number of running timers
    57cc:	4b1a      	ldr	r3, [pc, #104]	; (5838 <internal_timer_handler+0x7c>)
    57ce:	781b      	ldrb	r3, [r3, #0]
    57d0:	2b00      	cmp	r3, #0
    57d2:	d020      	beq.n	5816 <internal_timer_handler+0x5a>
			                  **/
			if ((expired_timer_queue_head == NO_TIMER) &&
    57d4:	4b19      	ldr	r3, [pc, #100]	; (583c <internal_timer_handler+0x80>)
    57d6:	681b      	ldr	r3, [r3, #0]
    57d8:	2bff      	cmp	r3, #255	; 0xff
    57da:	d01d      	beq.n	5818 <internal_timer_handler+0x5c>
							=
								running_timer_queue_head;
			} else {
				timer_array[expired_timer_queue_tail].
				next_timer_in_queue
					= running_timer_queue_head;
    57dc:	4b18      	ldr	r3, [pc, #96]	; (5840 <internal_timer_handler+0x84>)
    57de:	6818      	ldr	r0, [r3, #0]
				timer_array[expired_timer_queue_tail].
    57e0:	4918      	ldr	r1, [pc, #96]	; (5844 <internal_timer_handler+0x88>)
					= running_timer_queue_head;
    57e2:	680b      	ldr	r3, [r1, #0]
    57e4:	011a      	lsls	r2, r3, #4
    57e6:	4b18      	ldr	r3, [pc, #96]	; (5848 <internal_timer_handler+0x8c>)
    57e8:	189b      	adds	r3, r3, r2
    57ea:	7318      	strb	r0, [r3, #12]

				expired_timer_queue_tail
					= running_timer_queue_head;
    57ec:	6008      	str	r0, [r1, #0]
			}

			running_timer_queue_head
				= timer_array[running_timer_queue_head].
    57ee:	4a16      	ldr	r2, [pc, #88]	; (5848 <internal_timer_handler+0x8c>)
    57f0:	4913      	ldr	r1, [pc, #76]	; (5840 <internal_timer_handler+0x84>)
    57f2:	680b      	ldr	r3, [r1, #0]
    57f4:	011b      	lsls	r3, r3, #4
    57f6:	18d3      	adds	r3, r2, r3
    57f8:	7b18      	ldrb	r0, [r3, #12]
    57fa:	6008      	str	r0, [r1, #0]
					next_timer_in_queue;

			timer_array[expired_timer_queue_tail].
    57fc:	4b11      	ldr	r3, [pc, #68]	; (5844 <internal_timer_handler+0x88>)
			next_timer_in_queue
				= NO_TIMER;
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	011b      	lsls	r3, r3, #4
    5802:	18d2      	adds	r2, r2, r3
    5804:	23ff      	movs	r3, #255	; 0xff
    5806:	7313      	strb	r3, [r2, #12]

			if ((--running_timers) > 0) {
    5808:	4a0b      	ldr	r2, [pc, #44]	; (5838 <internal_timer_handler+0x7c>)
    580a:	7813      	ldrb	r3, [r2, #0]
    580c:	3b01      	subs	r3, #1
    580e:	b2db      	uxtb	r3, r3
    5810:	7013      	strb	r3, [r2, #0]
    5812:	2b00      	cmp	r3, #0
    5814:	d10b      	bne.n	582e <internal_timer_handler+0x72>
				load_hw_timer(running_timer_queue_head);
			}
		}
	}
}
    5816:	bd10      	pop	{r4, pc}
					(expired_timer_queue_tail ==
    5818:	4b0a      	ldr	r3, [pc, #40]	; (5844 <internal_timer_handler+0x88>)
			if ((expired_timer_queue_head == NO_TIMER) &&
    581a:	681b      	ldr	r3, [r3, #0]
    581c:	2bff      	cmp	r3, #255	; 0xff
    581e:	d1dd      	bne.n	57dc <internal_timer_handler+0x20>
							=
    5820:	4b07      	ldr	r3, [pc, #28]	; (5840 <internal_timer_handler+0x84>)
    5822:	681b      	ldr	r3, [r3, #0]
    5824:	4a07      	ldr	r2, [pc, #28]	; (5844 <internal_timer_handler+0x88>)
    5826:	6013      	str	r3, [r2, #0]
					= expired_timer_queue_tail
    5828:	4a04      	ldr	r2, [pc, #16]	; (583c <internal_timer_handler+0x80>)
    582a:	6013      	str	r3, [r2, #0]
    582c:	e7df      	b.n	57ee <internal_timer_handler+0x32>
				load_hw_timer(running_timer_queue_head);
    582e:	4b07      	ldr	r3, [pc, #28]	; (584c <internal_timer_handler+0x90>)
    5830:	4798      	blx	r3
}
    5832:	e7f0      	b.n	5816 <internal_timer_handler+0x5a>
    5834:	20000bac 	.word	0x20000bac
    5838:	200001d0 	.word	0x200001d0
    583c:	200001c4 	.word	0x200001c4
    5840:	200001cc 	.word	0x200001cc
    5844:	200001c8 	.word	0x200001c8
    5848:	20000b5c 	.word	0x20000b5c
    584c:	0000573d 	.word	0x0000573d

00005850 <sw_timer_get_time>:
{
    5850:	b570      	push	{r4, r5, r6, lr}
		current_sys_time = sys_time;
    5852:	4d06      	ldr	r5, [pc, #24]	; (586c <sw_timer_get_time+0x1c>)
		current_time = current_time | common_tc_read_count();
    5854:	4e06      	ldr	r6, [pc, #24]	; (5870 <sw_timer_get_time+0x20>)
		current_sys_time = sys_time;
    5856:	882c      	ldrh	r4, [r5, #0]
    5858:	b2a4      	uxth	r4, r4
		current_time = current_time | common_tc_read_count();
    585a:	47b0      	blx	r6
	} while (current_sys_time != sys_time);
    585c:	882b      	ldrh	r3, [r5, #0]
    585e:	b29b      	uxth	r3, r3
    5860:	429c      	cmp	r4, r3
    5862:	d1f8      	bne.n	5856 <sw_timer_get_time+0x6>
		current_time = current_time << 16;
    5864:	0424      	lsls	r4, r4, #16
		current_time = current_time | common_tc_read_count();
    5866:	4320      	orrs	r0, r4
}
    5868:	bd70      	pop	{r4, r5, r6, pc}
    586a:	46c0      	nop			; (mov r8, r8)
    586c:	20000b58 	.word	0x20000b58
    5870:	000079b9 	.word	0x000079b9

00005874 <sw_timer_service>:
	common_tc_init();
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
    5874:	b5f0      	push	{r4, r5, r6, r7, lr}
    5876:	46de      	mov	lr, fp
    5878:	4657      	mov	r7, sl
    587a:	464e      	mov	r6, r9
    587c:	4645      	mov	r5, r8
    587e:	b5e0      	push	{r5, r6, r7, lr}
    5880:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5882:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5886:	4253      	negs	r3, r2
    5888:	4153      	adcs	r3, r2
    588a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    588c:	b672      	cpsid	i
    588e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5892:	2200      	movs	r2, #0
    5894:	4b27      	ldr	r3, [pc, #156]	; (5934 <sw_timer_service+0xc0>)
    5896:	701a      	strb	r2, [r3, #0]
	return flags;
    5898:	9c00      	ldr	r4, [sp, #0]
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
    589a:	4b27      	ldr	r3, [pc, #156]	; (5938 <sw_timer_service+0xc4>)
    589c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    589e:	23ff      	movs	r3, #255	; 0xff
    58a0:	4223      	tst	r3, r4
    58a2:	d005      	beq.n	58b0 <sw_timer_service+0x3c>
		cpu_irq_enable();
    58a4:	2201      	movs	r2, #1
    58a6:	4b23      	ldr	r3, [pc, #140]	; (5934 <sw_timer_service+0xc0>)
    58a8:	701a      	strb	r2, [r3, #0]
    58aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    58ae:	b662      	cpsie	i
	cpu_irq_disable();
    58b0:	4b20      	ldr	r3, [pc, #128]	; (5934 <sw_timer_service+0xc0>)
    58b2:	469a      	mov	sl, r3
		while(NO_TIMER != expired_timer_queue_head) 
		{
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
    58b4:	4c21      	ldr	r4, [pc, #132]	; (593c <sw_timer_service+0xc8>)
    58b6:	4b22      	ldr	r3, [pc, #136]	; (5940 <sw_timer_service+0xcc>)
    58b8:	4699      	mov	r9, r3
    58ba:	2200      	movs	r2, #0
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    58bc:	20ff      	movs	r0, #255	; 0xff
			 */
			expired_timer_queue_head = next_expired_timer;

			if(NO_TIMER == expired_timer_queue_head) 
			{
				expired_timer_queue_tail = NO_TIMER;
    58be:	4b21      	ldr	r3, [pc, #132]	; (5944 <sw_timer_service+0xd0>)
    58c0:	4698      	mov	r8, r3
		cpu_irq_enable();
    58c2:	4b1c      	ldr	r3, [pc, #112]	; (5934 <sw_timer_service+0xc0>)
    58c4:	469c      	mov	ip, r3
    58c6:	e004      	b.n	58d2 <sw_timer_service+0x5e>
    58c8:	4643      	mov	r3, r8
    58ca:	6018      	str	r0, [r3, #0]
    58cc:	e01e      	b.n	590c <sw_timer_service+0x98>
			}

			cpu_irq_restore(flags);

			if(NULL != callback) 
    58ce:	2e00      	cmp	r6, #0
    58d0:	d125      	bne.n	591e <sw_timer_service+0xaa>
		while(NO_TIMER != expired_timer_queue_head) 
    58d2:	4b1a      	ldr	r3, [pc, #104]	; (593c <sw_timer_service+0xc8>)
    58d4:	681b      	ldr	r3, [r3, #0]
    58d6:	2bff      	cmp	r3, #255	; 0xff
    58d8:	d024      	beq.n	5924 <sw_timer_service+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    58da:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    58de:	424b      	negs	r3, r1
    58e0:	414b      	adcs	r3, r1
    58e2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    58e4:	b672      	cpsid	i
    58e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    58ea:	4653      	mov	r3, sl
    58ec:	701a      	strb	r2, [r3, #0]
	return flags;
    58ee:	9f01      	ldr	r7, [sp, #4]
				= timer_array[expired_timer_queue_head].
    58f0:	6823      	ldr	r3, [r4, #0]
    58f2:	011b      	lsls	r3, r3, #4
    58f4:	444b      	add	r3, r9
    58f6:	7b19      	ldrb	r1, [r3, #12]
				= (timer_expiry_cb_t)timer_array[
    58f8:	685e      	ldr	r6, [r3, #4]
				= timer_array[expired_timer_queue_head].param_cb;
    58fa:	689d      	ldr	r5, [r3, #8]
    58fc:	46ab      	mov	fp, r5
			next_timer_in_queue = NO_TIMER;
    58fe:	7318      	strb	r0, [r3, #12]
			timer_array[expired_timer_queue_head].timer_cb = NULL;
    5900:	605a      	str	r2, [r3, #4]
			timer_array[expired_timer_queue_head].param_cb = NULL;
    5902:	609a      	str	r2, [r3, #8]
			timer_array[expired_timer_queue_head].loaded = false;
    5904:	735a      	strb	r2, [r3, #13]
			expired_timer_queue_head = next_expired_timer;
    5906:	6021      	str	r1, [r4, #0]
			if(NO_TIMER == expired_timer_queue_head) 
    5908:	29ff      	cmp	r1, #255	; 0xff
    590a:	d0dd      	beq.n	58c8 <sw_timer_service+0x54>
	if (cpu_irq_is_enabled_flags(flags))
    590c:	4238      	tst	r0, r7
    590e:	d0de      	beq.n	58ce <sw_timer_service+0x5a>
		cpu_irq_enable();
    5910:	2301      	movs	r3, #1
    5912:	4661      	mov	r1, ip
    5914:	700b      	strb	r3, [r1, #0]
    5916:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    591a:	b662      	cpsie	i
    591c:	e7d7      	b.n	58ce <sw_timer_service+0x5a>
			{
				/* Callback function is called */
				callback(callback_param);
    591e:	4658      	mov	r0, fp
    5920:	47b0      	blx	r6
    5922:	e7ca      	b.n	58ba <sw_timer_service+0x46>
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
    5924:	b003      	add	sp, #12
    5926:	bc3c      	pop	{r2, r3, r4, r5}
    5928:	4690      	mov	r8, r2
    592a:	4699      	mov	r9, r3
    592c:	46a2      	mov	sl, r4
    592e:	46ab      	mov	fp, r5
    5930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5932:	46c0      	nop			; (mov r8, r8)
    5934:	2000000c 	.word	0x2000000c
    5938:	000057bd 	.word	0x000057bd
    593c:	200001c4 	.word	0x200001c4
    5940:	20000b5c 	.word	0x20000b5c
    5944:	200001c8 	.word	0x200001c8

00005948 <pal_init>:
{
	return (true);
}

retval_t pal_init(void)
{
    5948:	b510      	push	{r4, lr}
#if (PAL_USE_SPI_TRX == 1)
	trx_spi_init();
    594a:	4b02      	ldr	r3, [pc, #8]	; (5954 <pal_init+0xc>)
    594c:	4798      	blx	r3
#if (SAMD20) || (SAMD21) || (SAMR21)
	nvm_init(INT_FLASH);
#endif
#endif
	return MAC_SUCCESS;
}
    594e:	2000      	movs	r0, #0
    5950:	bd10      	pop	{r4, pc}
    5952:	46c0      	nop			; (mov r8, r8)
    5954:	00006aed 	.word	0x00006aed

00005958 <pal_task>:
 * @brief Services timer and sio handler
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
    5958:	b510      	push	{r4, lr}
	sw_timer_service();
    595a:	4b01      	ldr	r3, [pc, #4]	; (5960 <pal_task+0x8>)
    595c:	4798      	blx	r3
}
    595e:	bd10      	pop	{r4, pc}
    5960:	00005875 	.word	0x00005875

00005964 <pal_get_current_time>:
{
	*timestamp  = sw_timer_get_time();
}

void pal_get_current_time(uint32_t *timer_count)
{
    5964:	b510      	push	{r4, lr}
    5966:	b082      	sub	sp, #8
    5968:	0004      	movs	r4, r0
	uint32_t time_val;
	/* This will avoid the hard faults, due to aligned nature of access */
	time_val = sw_timer_get_time();
    596a:	4b05      	ldr	r3, [pc, #20]	; (5980 <pal_get_current_time+0x1c>)
    596c:	4798      	blx	r3
    596e:	9001      	str	r0, [sp, #4]
	MEMCPY_ENDIAN((uint8_t *)timer_count, (uint8_t *)&time_val,
    5970:	2204      	movs	r2, #4
    5972:	a901      	add	r1, sp, #4
    5974:	0020      	movs	r0, r4
    5976:	4b03      	ldr	r3, [pc, #12]	; (5984 <pal_get_current_time+0x20>)
    5978:	4798      	blx	r3
			sizeof(time_val));
}
    597a:	b002      	add	sp, #8
    597c:	bd10      	pop	{r4, pc}
    597e:	46c0      	nop			; (mov r8, r8)
    5980:	00005851 	.word	0x00005851
    5984:	00007e21 	.word	0x00007e21

00005988 <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
    5988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
    598a:	4e0d      	ldr	r6, [pc, #52]	; (59c0 <bmm_buffer_init+0x38>)
    598c:	0030      	movs	r0, r6
    598e:	4b0d      	ldr	r3, [pc, #52]	; (59c4 <bmm_buffer_init+0x3c>)
    5990:	4798      	blx	r3
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    5992:	4c0d      	ldr	r4, [pc, #52]	; (59c8 <bmm_buffer_init+0x40>)
    5994:	4d0d      	ldr	r5, [pc, #52]	; (59cc <bmm_buffer_init+0x44>)
    5996:	6025      	str	r5, [r4, #0]

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    5998:	0021      	movs	r1, r4
    599a:	0030      	movs	r0, r6
    599c:	4f0c      	ldr	r7, [pc, #48]	; (59d0 <bmm_buffer_init+0x48>)
    599e:	47b8      	blx	r7
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    59a0:	002b      	movs	r3, r5
    59a2:	3390      	adds	r3, #144	; 0x90
    59a4:	60a3      	str	r3, [r4, #8]
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    59a6:	0021      	movs	r1, r4
    59a8:	3108      	adds	r1, #8
    59aa:	0030      	movs	r0, r6
    59ac:	47b8      	blx	r7
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    59ae:	3521      	adds	r5, #33	; 0x21
    59b0:	35ff      	adds	r5, #255	; 0xff
    59b2:	6125      	str	r5, [r4, #16]
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    59b4:	0021      	movs	r1, r4
    59b6:	3110      	adds	r1, #16
    59b8:	0030      	movs	r0, r6
    59ba:	47b8      	blx	r7
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
    59bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	2000039c 	.word	0x2000039c
    59c4:	00005b95 	.word	0x00005b95
    59c8:	200001d4 	.word	0x200001d4
    59cc:	200001ec 	.word	0x200001ec
    59d0:	00005bad 	.word	0x00005bad

000059d4 <bmm_buffer_alloc>:
#if defined(ENABLE_LARGE_BUFFER)
buffer_t *bmm_buffer_alloc(uint16_t size)
#else
buffer_t * bmm_buffer_alloc(uint8_t size)
#endif
{
    59d4:	b510      	push	{r4, lr}
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
    59d6:	2100      	movs	r1, #0
    59d8:	4801      	ldr	r0, [pc, #4]	; (59e0 <bmm_buffer_alloc+0xc>)
    59da:	4b02      	ldr	r3, [pc, #8]	; (59e4 <bmm_buffer_alloc+0x10>)
    59dc:	4798      	blx	r3

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
    59de:	bd10      	pop	{r4, pc}
    59e0:	2000039c 	.word	0x2000039c
    59e4:	00005c39 	.word	0x00005c39

000059e8 <bmm_buffer_free>:
	 * unpredictable if an incorrect pointer is passed.
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
    59e8:	b510      	push	{r4, lr}
		if (NULL == pbuffer) {
    59ea:	2800      	cmp	r0, #0
    59ec:	d003      	beq.n	59f6 <bmm_buffer_free+0xe>
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
    59ee:	0001      	movs	r1, r0
    59f0:	4801      	ldr	r0, [pc, #4]	; (59f8 <bmm_buffer_free+0x10>)
    59f2:	4b02      	ldr	r3, [pc, #8]	; (59fc <bmm_buffer_free+0x14>)
    59f4:	4798      	blx	r3
#endif
	}
    59f6:	bd10      	pop	{r4, pc}
    59f8:	2000039c 	.word	0x2000039c
    59fc:	00005bad 	.word	0x00005bad

00005a00 <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
    5a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a02:	46ce      	mov	lr, r9
    5a04:	4647      	mov	r7, r8
    5a06:	b580      	push	{r7, lr}
    5a08:	b083      	sub	sp, #12
    5a0a:	0007      	movs	r7, r0
    5a0c:	4689      	mov	r9, r1
    5a0e:	0015      	movs	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5a10:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5a14:	425a      	negs	r2, r3
    5a16:	4153      	adcs	r3, r2
    5a18:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5a1a:	b672      	cpsid	i
    5a1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5a20:	2200      	movs	r2, #0
    5a22:	4b5b      	ldr	r3, [pc, #364]	; (5b90 <queue_read_or_remove+0x190>)
    5a24:	701a      	strb	r2, [r3, #0]
	return flags;
    5a26:	9b01      	ldr	r3, [sp, #4]
    5a28:	4698      	mov	r8, r3
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
    5a2a:	7a03      	ldrb	r3, [r0, #8]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d100      	bne.n	5a32 <queue_read_or_remove+0x32>
    5a30:	e0ab      	b.n	5b8a <queue_read_or_remove+0x18a>
		buffer_current = q->head;
    5a32:	7804      	ldrb	r4, [r0, #0]
    5a34:	7843      	ldrb	r3, [r0, #1]
    5a36:	021b      	lsls	r3, r3, #8
    5a38:	4323      	orrs	r3, r4
    5a3a:	7884      	ldrb	r4, [r0, #2]
    5a3c:	0424      	lsls	r4, r4, #16
    5a3e:	4323      	orrs	r3, r4
    5a40:	78c4      	ldrb	r4, [r0, #3]
    5a42:	0624      	lsls	r4, r4, #24
    5a44:	431c      	orrs	r4, r3
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    5a46:	2d00      	cmp	r5, #0
    5a48:	d043      	beq.n	5ad2 <queue_read_or_remove+0xd2>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    5a4a:	2c00      	cmp	r4, #0
    5a4c:	d030      	beq.n	5ab0 <queue_read_or_remove+0xb0>
    5a4e:	0026      	movs	r6, r4
    5a50:	e000      	b.n	5a54 <queue_read_or_remove+0x54>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    5a52:	001c      	movs	r4, r3
				match = search->criteria_func(
    5a54:	7929      	ldrb	r1, [r5, #4]
    5a56:	796b      	ldrb	r3, [r5, #5]
    5a58:	021b      	lsls	r3, r3, #8
    5a5a:	430b      	orrs	r3, r1
    5a5c:	79a9      	ldrb	r1, [r5, #6]
    5a5e:	0409      	lsls	r1, r1, #16
    5a60:	430b      	orrs	r3, r1
    5a62:	79e9      	ldrb	r1, [r5, #7]
    5a64:	0609      	lsls	r1, r1, #24
    5a66:	4319      	orrs	r1, r3
						(void *)buffer_current->body,
    5a68:	7820      	ldrb	r0, [r4, #0]
    5a6a:	7863      	ldrb	r3, [r4, #1]
    5a6c:	021b      	lsls	r3, r3, #8
    5a6e:	4303      	orrs	r3, r0
    5a70:	78a0      	ldrb	r0, [r4, #2]
    5a72:	0400      	lsls	r0, r0, #16
    5a74:	4303      	orrs	r3, r0
    5a76:	78e0      	ldrb	r0, [r4, #3]
    5a78:	0600      	lsls	r0, r0, #24
    5a7a:	4318      	orrs	r0, r3
				match = search->criteria_func(
    5a7c:	782b      	ldrb	r3, [r5, #0]
    5a7e:	786a      	ldrb	r2, [r5, #1]
    5a80:	0212      	lsls	r2, r2, #8
    5a82:	431a      	orrs	r2, r3
    5a84:	78ab      	ldrb	r3, [r5, #2]
    5a86:	041b      	lsls	r3, r3, #16
    5a88:	431a      	orrs	r2, r3
    5a8a:	78eb      	ldrb	r3, [r5, #3]
    5a8c:	061b      	lsls	r3, r3, #24
    5a8e:	4313      	orrs	r3, r2
    5a90:	4798      	blx	r3
				if (match) {
    5a92:	2800      	cmp	r0, #0
    5a94:	d11e      	bne.n	5ad4 <queue_read_or_remove+0xd4>
				buffer_current = buffer_current->next;
    5a96:	7923      	ldrb	r3, [r4, #4]
    5a98:	7962      	ldrb	r2, [r4, #5]
    5a9a:	0212      	lsls	r2, r2, #8
    5a9c:	431a      	orrs	r2, r3
    5a9e:	79a3      	ldrb	r3, [r4, #6]
    5aa0:	041b      	lsls	r3, r3, #16
    5aa2:	431a      	orrs	r2, r3
    5aa4:	79e3      	ldrb	r3, [r4, #7]
    5aa6:	061b      	lsls	r3, r3, #24
    5aa8:	4313      	orrs	r3, r2
    5aaa:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    5aac:	2b00      	cmp	r3, #0
    5aae:	d1d0      	bne.n	5a52 <queue_read_or_remove+0x52>
	buffer_t *buffer_current = NULL;
    5ab0:	2400      	movs	r4, #0
	if (cpu_irq_is_enabled_flags(flags))
    5ab2:	23ff      	movs	r3, #255	; 0xff
    5ab4:	4642      	mov	r2, r8
    5ab6:	4213      	tst	r3, r2
    5ab8:	d005      	beq.n	5ac6 <queue_read_or_remove+0xc6>
		cpu_irq_enable();
    5aba:	2201      	movs	r2, #1
    5abc:	4b34      	ldr	r3, [pc, #208]	; (5b90 <queue_read_or_remove+0x190>)
    5abe:	701a      	strb	r2, [r3, #0]
    5ac0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5ac4:	b662      	cpsie	i
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    5ac6:	0020      	movs	r0, r4
    5ac8:	b003      	add	sp, #12
    5aca:	bc0c      	pop	{r2, r3}
    5acc:	4690      	mov	r8, r2
    5ace:	4699      	mov	r9, r3
    5ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    5ad2:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    5ad4:	2c00      	cmp	r4, #0
    5ad6:	d0ec      	beq.n	5ab2 <queue_read_or_remove+0xb2>
			if (REMOVE_MODE == mode) {
    5ad8:	464b      	mov	r3, r9
    5ada:	2b00      	cmp	r3, #0
    5adc:	d1e9      	bne.n	5ab2 <queue_read_or_remove+0xb2>
				if (buffer_current == q->head) {
    5ade:	783b      	ldrb	r3, [r7, #0]
    5ae0:	787a      	ldrb	r2, [r7, #1]
    5ae2:	0212      	lsls	r2, r2, #8
    5ae4:	431a      	orrs	r2, r3
    5ae6:	78bb      	ldrb	r3, [r7, #2]
    5ae8:	041b      	lsls	r3, r3, #16
    5aea:	431a      	orrs	r2, r3
    5aec:	78fb      	ldrb	r3, [r7, #3]
    5aee:	061b      	lsls	r3, r3, #24
    5af0:	4313      	orrs	r3, r2
    5af2:	429c      	cmp	r4, r3
    5af4:	d02f      	beq.n	5b56 <queue_read_or_remove+0x156>
						= buffer_current->next;
    5af6:	7923      	ldrb	r3, [r4, #4]
    5af8:	7962      	ldrb	r2, [r4, #5]
    5afa:	0212      	lsls	r2, r2, #8
    5afc:	431a      	orrs	r2, r3
    5afe:	79a3      	ldrb	r3, [r4, #6]
    5b00:	041b      	lsls	r3, r3, #16
    5b02:	431a      	orrs	r2, r3
    5b04:	79e3      	ldrb	r3, [r4, #7]
    5b06:	061b      	lsls	r3, r3, #24
    5b08:	4313      	orrs	r3, r2
    5b0a:	7133      	strb	r3, [r6, #4]
    5b0c:	0a1a      	lsrs	r2, r3, #8
    5b0e:	7172      	strb	r2, [r6, #5]
    5b10:	0c1a      	lsrs	r2, r3, #16
    5b12:	71b2      	strb	r2, [r6, #6]
    5b14:	0e1b      	lsrs	r3, r3, #24
    5b16:	71f3      	strb	r3, [r6, #7]
				if (buffer_current == q->tail) {
    5b18:	793b      	ldrb	r3, [r7, #4]
    5b1a:	797a      	ldrb	r2, [r7, #5]
    5b1c:	0212      	lsls	r2, r2, #8
    5b1e:	431a      	orrs	r2, r3
    5b20:	79bb      	ldrb	r3, [r7, #6]
    5b22:	041b      	lsls	r3, r3, #16
    5b24:	431a      	orrs	r2, r3
    5b26:	79fb      	ldrb	r3, [r7, #7]
    5b28:	061b      	lsls	r3, r3, #24
    5b2a:	4313      	orrs	r3, r2
    5b2c:	429c      	cmp	r4, r3
    5b2e:	d024      	beq.n	5b7a <queue_read_or_remove+0x17a>
				q->size--;
    5b30:	7a3b      	ldrb	r3, [r7, #8]
    5b32:	3b01      	subs	r3, #1
    5b34:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    5b36:	783b      	ldrb	r3, [r7, #0]
    5b38:	787a      	ldrb	r2, [r7, #1]
    5b3a:	0212      	lsls	r2, r2, #8
    5b3c:	431a      	orrs	r2, r3
    5b3e:	78bb      	ldrb	r3, [r7, #2]
    5b40:	041b      	lsls	r3, r3, #16
    5b42:	431a      	orrs	r2, r3
    5b44:	78fb      	ldrb	r3, [r7, #3]
    5b46:	061b      	lsls	r3, r3, #24
    5b48:	4313      	orrs	r3, r2
    5b4a:	d1b2      	bne.n	5ab2 <queue_read_or_remove+0xb2>
					q->tail = NULL;
    5b4c:	713b      	strb	r3, [r7, #4]
    5b4e:	717b      	strb	r3, [r7, #5]
    5b50:	71bb      	strb	r3, [r7, #6]
    5b52:	71fb      	strb	r3, [r7, #7]
    5b54:	e7ad      	b.n	5ab2 <queue_read_or_remove+0xb2>
					q->head = buffer_current->next;
    5b56:	7923      	ldrb	r3, [r4, #4]
    5b58:	7962      	ldrb	r2, [r4, #5]
    5b5a:	0212      	lsls	r2, r2, #8
    5b5c:	431a      	orrs	r2, r3
    5b5e:	79a3      	ldrb	r3, [r4, #6]
    5b60:	041b      	lsls	r3, r3, #16
    5b62:	431a      	orrs	r2, r3
    5b64:	79e3      	ldrb	r3, [r4, #7]
    5b66:	061b      	lsls	r3, r3, #24
    5b68:	4313      	orrs	r3, r2
    5b6a:	703b      	strb	r3, [r7, #0]
    5b6c:	0a1a      	lsrs	r2, r3, #8
    5b6e:	707a      	strb	r2, [r7, #1]
    5b70:	0c1a      	lsrs	r2, r3, #16
    5b72:	70ba      	strb	r2, [r7, #2]
    5b74:	0e1b      	lsrs	r3, r3, #24
    5b76:	70fb      	strb	r3, [r7, #3]
    5b78:	e7ce      	b.n	5b18 <queue_read_or_remove+0x118>
					q->tail = buffer_previous;
    5b7a:	713e      	strb	r6, [r7, #4]
    5b7c:	0a33      	lsrs	r3, r6, #8
    5b7e:	717b      	strb	r3, [r7, #5]
    5b80:	0c33      	lsrs	r3, r6, #16
    5b82:	71bb      	strb	r3, [r7, #6]
    5b84:	0e36      	lsrs	r6, r6, #24
    5b86:	71fe      	strb	r6, [r7, #7]
    5b88:	e7d2      	b.n	5b30 <queue_read_or_remove+0x130>
	buffer_t *buffer_current = NULL;
    5b8a:	2400      	movs	r4, #0
    5b8c:	e791      	b.n	5ab2 <queue_read_or_remove+0xb2>
    5b8e:	46c0      	nop			; (mov r8, r8)
    5b90:	2000000c 	.word	0x2000000c

00005b94 <qmm_queue_init>:
	q->head = NULL;
    5b94:	2300      	movs	r3, #0
    5b96:	7003      	strb	r3, [r0, #0]
    5b98:	7043      	strb	r3, [r0, #1]
    5b9a:	7083      	strb	r3, [r0, #2]
    5b9c:	70c3      	strb	r3, [r0, #3]
	q->tail = NULL;
    5b9e:	7103      	strb	r3, [r0, #4]
    5ba0:	7143      	strb	r3, [r0, #5]
    5ba2:	7183      	strb	r3, [r0, #6]
    5ba4:	71c3      	strb	r3, [r0, #7]
	q->size = 0;
    5ba6:	7203      	strb	r3, [r0, #8]
}
    5ba8:	4770      	bx	lr
	...

00005bac <qmm_queue_append>:
{
    5bac:	b510      	push	{r4, lr}
    5bae:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5bb0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5bb4:	425a      	negs	r2, r3
    5bb6:	4153      	adcs	r3, r2
    5bb8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5bba:	b672      	cpsid	i
    5bbc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5bc0:	2200      	movs	r2, #0
    5bc2:	4b1c      	ldr	r3, [pc, #112]	; (5c34 <qmm_queue_append+0x88>)
    5bc4:	701a      	strb	r2, [r3, #0]
	return flags;
    5bc6:	9c01      	ldr	r4, [sp, #4]
		if (q->size == 0) {
    5bc8:	7a03      	ldrb	r3, [r0, #8]
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d120      	bne.n	5c10 <qmm_queue_append+0x64>
			q->head = buf;
    5bce:	7001      	strb	r1, [r0, #0]
    5bd0:	0a0b      	lsrs	r3, r1, #8
    5bd2:	7043      	strb	r3, [r0, #1]
    5bd4:	0c0b      	lsrs	r3, r1, #16
    5bd6:	7083      	strb	r3, [r0, #2]
    5bd8:	0e0b      	lsrs	r3, r1, #24
    5bda:	70c3      	strb	r3, [r0, #3]
		q->tail = buf;
    5bdc:	7101      	strb	r1, [r0, #4]
    5bde:	0a0b      	lsrs	r3, r1, #8
    5be0:	7143      	strb	r3, [r0, #5]
    5be2:	0c0b      	lsrs	r3, r1, #16
    5be4:	22ff      	movs	r2, #255	; 0xff
    5be6:	7183      	strb	r3, [r0, #6]
    5be8:	0e0b      	lsrs	r3, r1, #24
    5bea:	71c3      	strb	r3, [r0, #7]
		buf->next = NULL;
    5bec:	2300      	movs	r3, #0
    5bee:	710b      	strb	r3, [r1, #4]
    5bf0:	714b      	strb	r3, [r1, #5]
    5bf2:	718b      	strb	r3, [r1, #6]
    5bf4:	71cb      	strb	r3, [r1, #7]
		q->size++;
    5bf6:	7a03      	ldrb	r3, [r0, #8]
    5bf8:	3301      	adds	r3, #1
    5bfa:	7203      	strb	r3, [r0, #8]
	if (cpu_irq_is_enabled_flags(flags))
    5bfc:	4222      	tst	r2, r4
    5bfe:	d005      	beq.n	5c0c <qmm_queue_append+0x60>
		cpu_irq_enable();
    5c00:	3afe      	subs	r2, #254	; 0xfe
    5c02:	4b0c      	ldr	r3, [pc, #48]	; (5c34 <qmm_queue_append+0x88>)
    5c04:	701a      	strb	r2, [r3, #0]
    5c06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5c0a:	b662      	cpsie	i
} /* qmm_queue_append */
    5c0c:	b002      	add	sp, #8
    5c0e:	bd10      	pop	{r4, pc}
			q->tail->next = buf;
    5c10:	7903      	ldrb	r3, [r0, #4]
    5c12:	7942      	ldrb	r2, [r0, #5]
    5c14:	0212      	lsls	r2, r2, #8
    5c16:	431a      	orrs	r2, r3
    5c18:	7983      	ldrb	r3, [r0, #6]
    5c1a:	041b      	lsls	r3, r3, #16
    5c1c:	431a      	orrs	r2, r3
    5c1e:	79c3      	ldrb	r3, [r0, #7]
    5c20:	061b      	lsls	r3, r3, #24
    5c22:	4313      	orrs	r3, r2
    5c24:	7119      	strb	r1, [r3, #4]
    5c26:	0a0a      	lsrs	r2, r1, #8
    5c28:	715a      	strb	r2, [r3, #5]
    5c2a:	0c0a      	lsrs	r2, r1, #16
    5c2c:	719a      	strb	r2, [r3, #6]
    5c2e:	0e0a      	lsrs	r2, r1, #24
    5c30:	71da      	strb	r2, [r3, #7]
    5c32:	e7d3      	b.n	5bdc <qmm_queue_append+0x30>
    5c34:	2000000c 	.word	0x2000000c

00005c38 <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
    5c38:	b510      	push	{r4, lr}
    5c3a:	000a      	movs	r2, r1
	return (queue_read_or_remove(q, REMOVE_MODE, search));
    5c3c:	2100      	movs	r1, #0
    5c3e:	4b01      	ldr	r3, [pc, #4]	; (5c44 <qmm_queue_remove+0xc>)
    5c40:	4798      	blx	r3
}
    5c42:	bd10      	pop	{r4, pc}
    5c44:	00005a01 	.word	0x00005a01

00005c48 <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine
 */
static void switch_pll_on(void)
{
    5c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c4a:	b083      	sub	sp, #12
	uint32_t start_time;
	uint32_t current_time;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
    5c4c:	2200      	movs	r2, #0
    5c4e:	211f      	movs	r1, #31
    5c50:	2001      	movs	r0, #1
    5c52:	4b24      	ldr	r3, [pc, #144]	; (5ce4 <switch_pll_on+0x9c>)
    5c54:	4798      	blx	r3
    5c56:	2808      	cmp	r0, #8
    5c58:	d001      	beq.n	5c5e <switch_pll_on+0x16>
	/* Clear MCU's interrupt flag */
	pal_trx_irq_flag_clr();
	LEAVE_TRX_REGION(); /* Enable trx interrupt handling again */
	/* Restore transceiver's interrupt mask. */
	trx_reg_write(RG_IRQ_MASK, trx_irq_mask);
}
    5c5a:	b003      	add	sp, #12
    5c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	trx_reg_read(RG_IRQ_STATUS);
    5c5e:	3007      	adds	r0, #7
    5c60:	4c21      	ldr	r4, [pc, #132]	; (5ce8 <switch_pll_on+0xa0>)
    5c62:	47a0      	blx	r4
	uint8_t trx_irq_mask = trx_reg_read(RG_IRQ_MASK);
    5c64:	200e      	movs	r0, #14
    5c66:	47a0      	blx	r4
    5c68:	0005      	movs	r5, r0
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_0_PLL_LOCK);
    5c6a:	2101      	movs	r1, #1
    5c6c:	200e      	movs	r0, #14
    5c6e:	4c1f      	ldr	r4, [pc, #124]	; (5cec <switch_pll_on+0xa4>)
    5c70:	47a0      	blx	r4
	ENTER_TRX_REGION(); /* Disable trx interrupt handling */
    5c72:	2100      	movs	r1, #0
    5c74:	2000      	movs	r0, #0
    5c76:	4b1e      	ldr	r3, [pc, #120]	; (5cf0 <switch_pll_on+0xa8>)
    5c78:	4798      	blx	r3
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    5c7a:	2109      	movs	r1, #9
    5c7c:	2002      	movs	r0, #2
    5c7e:	47a0      	blx	r4
	pal_get_current_time(&start_time);
    5c80:	a801      	add	r0, sp, #4
    5c82:	4b1c      	ldr	r3, [pc, #112]	; (5cf4 <switch_pll_on+0xac>)
    5c84:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    5c86:	4e1c      	ldr	r6, [pc, #112]	; (5cf8 <switch_pll_on+0xb0>)
		pal_get_current_time(&current_time);
    5c88:	4f1a      	ldr	r7, [pc, #104]	; (5cf4 <switch_pll_on+0xac>)
    5c8a:	2401      	movs	r4, #1
    5c8c:	6a33      	ldr	r3, [r6, #32]
	while (TRX_IRQ_HIGH() == false) {
    5c8e:	421c      	tst	r4, r3
    5c90:	d118      	bne.n	5cc4 <switch_pll_on+0x7c>
		pal_get_current_time(&current_time);
    5c92:	4668      	mov	r0, sp
    5c94:	47b8      	blx	r7
 *
 * @return Difference between a and b
 */
static inline uint32_t pal_sub_time_us(uint32_t a, uint32_t b)
{
	return (SUB_TIME(a, b));
    5c96:	9b00      	ldr	r3, [sp, #0]
    5c98:	9a01      	ldr	r2, [sp, #4]
    5c9a:	1a9b      	subs	r3, r3, r2
		if (pal_sub_time_us(current_time,
    5c9c:	2bfa      	cmp	r3, #250	; 0xfa
    5c9e:	d9f5      	bls.n	5c8c <switch_pll_on+0x44>
			reg_value = trx_reg_read(RG_PLL_CF);
    5ca0:	201a      	movs	r0, #26
    5ca2:	4b11      	ldr	r3, [pc, #68]	; (5ce8 <switch_pll_on+0xa0>)
    5ca4:	4798      	blx	r3
			if (reg_value & 0x01) {
    5ca6:	07c3      	lsls	r3, r0, #31
    5ca8:	d508      	bpl.n	5cbc <switch_pll_on+0x74>
				reg_value &= 0xFE;
    5caa:	21fe      	movs	r1, #254	; 0xfe
    5cac:	4001      	ands	r1, r0
			trx_reg_write(RG_PLL_CF, reg_value);
    5cae:	201a      	movs	r0, #26
    5cb0:	4b0e      	ldr	r3, [pc, #56]	; (5cec <switch_pll_on+0xa4>)
    5cb2:	4798      	blx	r3
			pal_get_current_time(&start_time);
    5cb4:	a801      	add	r0, sp, #4
    5cb6:	4b0f      	ldr	r3, [pc, #60]	; (5cf4 <switch_pll_on+0xac>)
    5cb8:	4798      	blx	r3
    5cba:	e7e6      	b.n	5c8a <switch_pll_on+0x42>
				reg_value |= 0x01;
    5cbc:	2101      	movs	r1, #1
    5cbe:	4301      	orrs	r1, r0
    5cc0:	b2c9      	uxtb	r1, r1
    5cc2:	e7f4      	b.n	5cae <switch_pll_on+0x66>
	trx_reg_read(RG_IRQ_STATUS);
    5cc4:	200f      	movs	r0, #15
    5cc6:	4b08      	ldr	r3, [pc, #32]	; (5ce8 <switch_pll_on+0xa0>)
    5cc8:	4798      	blx	r3
	eic_module->INTFLAG.reg = eic_mask;
    5cca:	2201      	movs	r2, #1
    5ccc:	4b0b      	ldr	r3, [pc, #44]	; (5cfc <switch_pll_on+0xb4>)
    5cce:	611a      	str	r2, [r3, #16]
	LEAVE_TRX_REGION(); /* Enable trx interrupt handling again */
    5cd0:	2100      	movs	r1, #0
    5cd2:	2000      	movs	r0, #0
    5cd4:	4b0a      	ldr	r3, [pc, #40]	; (5d00 <switch_pll_on+0xb8>)
    5cd6:	4798      	blx	r3
	trx_reg_write(RG_IRQ_MASK, trx_irq_mask);
    5cd8:	0029      	movs	r1, r5
    5cda:	200e      	movs	r0, #14
    5cdc:	4b03      	ldr	r3, [pc, #12]	; (5cec <switch_pll_on+0xa4>)
    5cde:	4798      	blx	r3
    5ce0:	e7bb      	b.n	5c5a <switch_pll_on+0x12>
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	00006e29 	.word	0x00006e29
    5ce8:	00006c21 	.word	0x00006c21
    5cec:	00006d1d 	.word	0x00006d1d
    5cf0:	00004059 	.word	0x00004059
    5cf4:	00005965 	.word	0x00005965
    5cf8:	41004480 	.word	0x41004480
    5cfc:	40001800 	.word	0x40001800
    5d00:	00004039 	.word	0x00004039

00005d04 <set_trx_state>:
{
    5d04:	b570      	push	{r4, r5, r6, lr}
    5d06:	b082      	sub	sp, #8
    5d08:	0004      	movs	r4, r0
	if (tal_trx_status == TRX_SLEEP) {
    5d0a:	4b96      	ldr	r3, [pc, #600]	; (5f64 <set_trx_state+0x260>)
    5d0c:	7818      	ldrb	r0, [r3, #0]
    5d0e:	280f      	cmp	r0, #15
    5d10:	d007      	beq.n	5d22 <set_trx_state+0x1e>
	switch (trx_cmd) { /* requested state */
    5d12:	3c03      	subs	r4, #3
    5d14:	b2e3      	uxtb	r3, r4
    5d16:	2b16      	cmp	r3, #22
    5d18:	d87c      	bhi.n	5e14 <set_trx_state+0x110>
    5d1a:	009c      	lsls	r4, r3, #2
    5d1c:	4b92      	ldr	r3, [pc, #584]	; (5f68 <set_trx_state+0x264>)
    5d1e:	591b      	ldr	r3, [r3, r4]
    5d20:	469f      	mov	pc, r3
		if (CMD_SLEEP == trx_cmd) {
    5d22:	2c0f      	cmp	r4, #15
    5d24:	d100      	bne.n	5d28 <set_trx_state+0x24>
    5d26:	e07e      	b.n	5e26 <set_trx_state+0x122>
		tal_awake_end_flag = false;
    5d28:	2600      	movs	r6, #0
    5d2a:	4b90      	ldr	r3, [pc, #576]	; (5f6c <set_trx_state+0x268>)
    5d2c:	701e      	strb	r6, [r3, #0]
		trx_irq_init((FUNC_PTR)trx_irq_awake_handler_cb);
    5d2e:	4890      	ldr	r0, [pc, #576]	; (5f70 <set_trx_state+0x26c>)
    5d30:	4b90      	ldr	r3, [pc, #576]	; (5f74 <set_trx_state+0x270>)
    5d32:	4798      	blx	r3
    5d34:	2501      	movs	r5, #1
    5d36:	4b90      	ldr	r3, [pc, #576]	; (5f78 <set_trx_state+0x274>)
    5d38:	611d      	str	r5, [r3, #16]
		pal_trx_irq_en(); /* Enable transceiver main interrupt. */
    5d3a:	2100      	movs	r1, #0
    5d3c:	2000      	movs	r0, #0
    5d3e:	4b8f      	ldr	r3, [pc, #572]	; (5f7c <set_trx_state+0x278>)
    5d40:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5d42:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5d46:	425a      	negs	r2, r3
    5d48:	4153      	adcs	r3, r2
    5d4a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5d4c:	b672      	cpsid	i
    5d4e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5d52:	4b8b      	ldr	r3, [pc, #556]	; (5f80 <set_trx_state+0x27c>)
    5d54:	701e      	strb	r6, [r3, #0]
	return flags;
    5d56:	9901      	ldr	r1, [sp, #4]
		ENABLE_GLOBAL_IRQ();
    5d58:	701d      	strb	r5, [r3, #0]
    5d5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5d5e:	b662      	cpsie	i
		port_base->OUTCLR.reg = pin_mask;
    5d60:	2280      	movs	r2, #128	; 0x80
    5d62:	0352      	lsls	r2, r2, #13
    5d64:	4b87      	ldr	r3, [pc, #540]	; (5f84 <set_trx_state+0x280>)
    5d66:	615a      	str	r2, [r3, #20]
		while (!tal_awake_end_flag) {
    5d68:	4a80      	ldr	r2, [pc, #512]	; (5f6c <set_trx_state+0x268>)
    5d6a:	7813      	ldrb	r3, [r2, #0]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d0fc      	beq.n	5d6a <set_trx_state+0x66>
	if (cpu_irq_is_enabled_flags(flags))
    5d70:	23ff      	movs	r3, #255	; 0xff
    5d72:	420b      	tst	r3, r1
    5d74:	d005      	beq.n	5d82 <set_trx_state+0x7e>
		cpu_irq_enable();
    5d76:	2201      	movs	r2, #1
    5d78:	4b81      	ldr	r3, [pc, #516]	; (5f80 <set_trx_state+0x27c>)
    5d7a:	701a      	strb	r2, [r3, #0]
    5d7c:	f3bf 8f5f 	dmb	sy
    5d80:	b662      	cpsie	i
		trx_reg_read(RG_IRQ_STATUS);
    5d82:	200f      	movs	r0, #15
    5d84:	4b80      	ldr	r3, [pc, #512]	; (5f88 <set_trx_state+0x284>)
    5d86:	4798      	blx	r3
		trx_irq_init((FUNC_PTR)trx_irq_handler_cb);
    5d88:	4880      	ldr	r0, [pc, #512]	; (5f8c <set_trx_state+0x288>)
    5d8a:	4b7a      	ldr	r3, [pc, #488]	; (5f74 <set_trx_state+0x270>)
    5d8c:	4798      	blx	r3
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    5d8e:	2108      	movs	r1, #8
    5d90:	200e      	movs	r0, #14
    5d92:	4b7f      	ldr	r3, [pc, #508]	; (5f90 <set_trx_state+0x28c>)
    5d94:	4798      	blx	r3
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    5d96:	2301      	movs	r3, #1
    5d98:	2202      	movs	r2, #2
    5d9a:	2104      	movs	r1, #4
    5d9c:	200d      	movs	r0, #13
    5d9e:	4d7d      	ldr	r5, [pc, #500]	; (5f94 <set_trx_state+0x290>)
    5da0:	47a8      	blx	r5
		tal_trx_status = TRX_OFF;
    5da2:	2208      	movs	r2, #8
    5da4:	4b6f      	ldr	r3, [pc, #444]	; (5f64 <set_trx_state+0x260>)
    5da6:	701a      	strb	r2, [r3, #0]
			return TRX_OFF;
    5da8:	2008      	movs	r0, #8
		if ((trx_cmd == CMD_TRX_OFF) ||
    5daa:	2c08      	cmp	r4, #8
    5dac:	d03b      	beq.n	5e26 <set_trx_state+0x122>
    5dae:	2c03      	cmp	r4, #3
    5db0:	d039      	beq.n	5e26 <set_trx_state+0x122>
	switch (trx_cmd) { /* requested state */
    5db2:	3c04      	subs	r4, #4
    5db4:	b2e3      	uxtb	r3, r4
    5db6:	2b15      	cmp	r3, #21
    5db8:	d82c      	bhi.n	5e14 <set_trx_state+0x110>
    5dba:	009c      	lsls	r4, r3, #2
    5dbc:	4b76      	ldr	r3, [pc, #472]	; (5f98 <set_trx_state+0x294>)
    5dbe:	591b      	ldr	r3, [r3, r4]
    5dc0:	469f      	mov	pc, r3
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    5dc2:	2103      	movs	r1, #3
    5dc4:	2002      	movs	r0, #2
    5dc6:	4b72      	ldr	r3, [pc, #456]	; (5f90 <set_trx_state+0x28c>)
    5dc8:	4798      	blx	r3
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
    5dca:	2300      	movs	r3, #0
    5dcc:	2202      	movs	r2, #2
    5dce:	2104      	movs	r1, #4
    5dd0:	200d      	movs	r0, #13
    5dd2:	4c70      	ldr	r4, [pc, #448]	; (5f94 <set_trx_state+0x290>)
    5dd4:	47a0      	blx	r4
		trx_reg_read(RG_IRQ_STATUS);
    5dd6:	200f      	movs	r0, #15
    5dd8:	4b6b      	ldr	r3, [pc, #428]	; (5f88 <set_trx_state+0x284>)
    5dda:	4798      	blx	r3
		trx_bit_write(SR_IRQ_MASK, TRX_IRQ_4_CCA_ED_DONE);
    5ddc:	2310      	movs	r3, #16
    5dde:	2200      	movs	r2, #0
    5de0:	21ff      	movs	r1, #255	; 0xff
    5de2:	200e      	movs	r0, #14
    5de4:	47a0      	blx	r4
		trx_bit_write(SR_IRQ_MASK, TRX_IRQ_4_CCA_ED_DONE);
    5de6:	2310      	movs	r3, #16
    5de8:	2200      	movs	r2, #0
    5dea:	21ff      	movs	r1, #255	; 0xff
    5dec:	200e      	movs	r0, #14
    5dee:	47a0      	blx	r4
		tal_trx_status = TRX_SLEEP;
    5df0:	4c5c      	ldr	r4, [pc, #368]	; (5f64 <set_trx_state+0x260>)
    5df2:	230f      	movs	r3, #15
    5df4:	7023      	strb	r3, [r4, #0]
		PAL_WAIT_1_US();
    5df6:	2001      	movs	r0, #1
    5df8:	4d68      	ldr	r5, [pc, #416]	; (5f9c <set_trx_state+0x298>)
    5dfa:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    5dfc:	2280      	movs	r2, #128	; 0x80
    5dfe:	0352      	lsls	r2, r2, #13
    5e00:	4b60      	ldr	r3, [pc, #384]	; (5f84 <set_trx_state+0x280>)
    5e02:	619a      	str	r2, [r3, #24]
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
    5e04:	2023      	movs	r0, #35	; 0x23
    5e06:	47a8      	blx	r5
		return tal_trx_status;
    5e08:	7820      	ldrb	r0, [r4, #0]
    5e0a:	e00c      	b.n	5e26 <set_trx_state+0x122>
		switch (tal_trx_status) {
    5e0c:	4b55      	ldr	r3, [pc, #340]	; (5f64 <set_trx_state+0x260>)
    5e0e:	781b      	ldrb	r3, [r3, #0]
    5e10:	2b08      	cmp	r3, #8
    5e12:	d10a      	bne.n	5e2a <set_trx_state+0x126>
		tal_trx_status = /* (tal_trx_status_t) */ trx_bit_read(
    5e14:	4d62      	ldr	r5, [pc, #392]	; (5fa0 <set_trx_state+0x29c>)
    5e16:	4c53      	ldr	r4, [pc, #332]	; (5f64 <set_trx_state+0x260>)
    5e18:	2200      	movs	r2, #0
    5e1a:	211f      	movs	r1, #31
    5e1c:	2001      	movs	r0, #1
    5e1e:	47a8      	blx	r5
    5e20:	7020      	strb	r0, [r4, #0]
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
    5e22:	281f      	cmp	r0, #31
    5e24:	d0f8      	beq.n	5e18 <set_trx_state+0x114>
} /* set_trx_state() */
    5e26:	b002      	add	sp, #8
    5e28:	bd70      	pop	{r4, r5, r6, pc}
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    5e2a:	2108      	movs	r1, #8
    5e2c:	2002      	movs	r0, #2
    5e2e:	4b58      	ldr	r3, [pc, #352]	; (5f90 <set_trx_state+0x28c>)
    5e30:	4798      	blx	r3
			PAL_WAIT_1_US();
    5e32:	2001      	movs	r0, #1
    5e34:	4b59      	ldr	r3, [pc, #356]	; (5f9c <set_trx_state+0x298>)
    5e36:	4798      	blx	r3
			break;
    5e38:	e7ec      	b.n	5e14 <set_trx_state+0x110>
		switch (tal_trx_status) {
    5e3a:	2808      	cmp	r0, #8
    5e3c:	d0ea      	beq.n	5e14 <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    5e3e:	2103      	movs	r1, #3
    5e40:	2002      	movs	r0, #2
    5e42:	4b53      	ldr	r3, [pc, #332]	; (5f90 <set_trx_state+0x28c>)
    5e44:	4798      	blx	r3
			PAL_WAIT_1_US();
    5e46:	2001      	movs	r0, #1
    5e48:	4b54      	ldr	r3, [pc, #336]	; (5f9c <set_trx_state+0x298>)
    5e4a:	4798      	blx	r3
			break;
    5e4c:	e7e2      	b.n	5e14 <set_trx_state+0x110>
		switch (tal_trx_status) {
    5e4e:	4b45      	ldr	r3, [pc, #276]	; (5f64 <set_trx_state+0x260>)
    5e50:	781b      	ldrb	r3, [r3, #0]
    5e52:	2b08      	cmp	r3, #8
    5e54:	d011      	beq.n	5e7a <set_trx_state+0x176>
    5e56:	b2da      	uxtb	r2, r3
    5e58:	2a08      	cmp	r2, #8
    5e5a:	d904      	bls.n	5e66 <set_trx_state+0x162>
    5e5c:	2b16      	cmp	r3, #22
    5e5e:	d004      	beq.n	5e6a <set_trx_state+0x166>
    5e60:	2b19      	cmp	r3, #25
    5e62:	d1d7      	bne.n	5e14 <set_trx_state+0x110>
    5e64:	e001      	b.n	5e6a <set_trx_state+0x166>
    5e66:	2b06      	cmp	r3, #6
    5e68:	d1d4      	bne.n	5e14 <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    5e6a:	2109      	movs	r1, #9
    5e6c:	2002      	movs	r0, #2
    5e6e:	4b48      	ldr	r3, [pc, #288]	; (5f90 <set_trx_state+0x28c>)
    5e70:	4798      	blx	r3
			PAL_WAIT_1_US();
    5e72:	2001      	movs	r0, #1
    5e74:	4b49      	ldr	r3, [pc, #292]	; (5f9c <set_trx_state+0x298>)
    5e76:	4798      	blx	r3
			break;
    5e78:	e7cc      	b.n	5e14 <set_trx_state+0x110>
			switch_pll_on();
    5e7a:	4b4a      	ldr	r3, [pc, #296]	; (5fa4 <set_trx_state+0x2a0>)
    5e7c:	4798      	blx	r3
			break;
    5e7e:	e7c9      	b.n	5e14 <set_trx_state+0x110>
		switch (tal_trx_status) {
    5e80:	4b38      	ldr	r3, [pc, #224]	; (5f64 <set_trx_state+0x260>)
    5e82:	781b      	ldrb	r3, [r3, #0]
    5e84:	2b08      	cmp	r3, #8
    5e86:	d006      	beq.n	5e96 <set_trx_state+0x192>
    5e88:	2b09      	cmp	r3, #9
    5e8a:	d0c3      	beq.n	5e14 <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
    5e8c:	2104      	movs	r1, #4
    5e8e:	2002      	movs	r0, #2
    5e90:	4b3f      	ldr	r3, [pc, #252]	; (5f90 <set_trx_state+0x28c>)
    5e92:	4798      	blx	r3
			break;
    5e94:	e7be      	b.n	5e14 <set_trx_state+0x110>
			switch_pll_on();
    5e96:	4b43      	ldr	r3, [pc, #268]	; (5fa4 <set_trx_state+0x2a0>)
    5e98:	4798      	blx	r3
			break;
    5e9a:	e7bb      	b.n	5e14 <set_trx_state+0x110>
		switch (tal_trx_status) {
    5e9c:	4b31      	ldr	r3, [pc, #196]	; (5f64 <set_trx_state+0x260>)
    5e9e:	781b      	ldrb	r3, [r3, #0]
    5ea0:	2b09      	cmp	r3, #9
    5ea2:	d012      	beq.n	5eca <set_trx_state+0x1c6>
    5ea4:	b2da      	uxtb	r2, r3
    5ea6:	2a09      	cmp	r2, #9
    5ea8:	d80b      	bhi.n	5ec2 <set_trx_state+0x1be>
    5eaa:	2b08      	cmp	r3, #8
    5eac:	d1b2      	bne.n	5e14 <set_trx_state+0x110>
			switch_pll_on();
    5eae:	4b3d      	ldr	r3, [pc, #244]	; (5fa4 <set_trx_state+0x2a0>)
    5eb0:	4798      	blx	r3
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    5eb2:	2106      	movs	r1, #6
    5eb4:	2002      	movs	r0, #2
    5eb6:	4b36      	ldr	r3, [pc, #216]	; (5f90 <set_trx_state+0x28c>)
    5eb8:	4798      	blx	r3
			PAL_WAIT_1_US();
    5eba:	2001      	movs	r0, #1
    5ebc:	4b37      	ldr	r3, [pc, #220]	; (5f9c <set_trx_state+0x298>)
    5ebe:	4798      	blx	r3
			break;
    5ec0:	e7a8      	b.n	5e14 <set_trx_state+0x110>
		switch (tal_trx_status) {
    5ec2:	2b16      	cmp	r3, #22
    5ec4:	d001      	beq.n	5eca <set_trx_state+0x1c6>
    5ec6:	2b19      	cmp	r3, #25
    5ec8:	d1a4      	bne.n	5e14 <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    5eca:	2106      	movs	r1, #6
    5ecc:	2002      	movs	r0, #2
    5ece:	4b30      	ldr	r3, [pc, #192]	; (5f90 <set_trx_state+0x28c>)
    5ed0:	4798      	blx	r3
			PAL_WAIT_1_US();
    5ed2:	2001      	movs	r0, #1
    5ed4:	4b31      	ldr	r3, [pc, #196]	; (5f9c <set_trx_state+0x298>)
    5ed6:	4798      	blx	r3
			break;
    5ed8:	e79c      	b.n	5e14 <set_trx_state+0x110>
		switch (tal_trx_status) {
    5eda:	4b22      	ldr	r3, [pc, #136]	; (5f64 <set_trx_state+0x260>)
    5edc:	781b      	ldrb	r3, [r3, #0]
    5ede:	2b08      	cmp	r3, #8
    5ee0:	d013      	beq.n	5f0a <set_trx_state+0x206>
    5ee2:	b2da      	uxtb	r2, r3
    5ee4:	2a08      	cmp	r2, #8
    5ee6:	d905      	bls.n	5ef4 <set_trx_state+0x1f0>
    5ee8:	2b09      	cmp	r3, #9
    5eea:	d006      	beq.n	5efa <set_trx_state+0x1f6>
    5eec:	2b19      	cmp	r3, #25
    5eee:	d000      	beq.n	5ef2 <set_trx_state+0x1ee>
    5ef0:	e790      	b.n	5e14 <set_trx_state+0x110>
    5ef2:	e002      	b.n	5efa <set_trx_state+0x1f6>
    5ef4:	2b06      	cmp	r3, #6
    5ef6:	d000      	beq.n	5efa <set_trx_state+0x1f6>
    5ef8:	e78c      	b.n	5e14 <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    5efa:	2116      	movs	r1, #22
    5efc:	2002      	movs	r0, #2
    5efe:	4b24      	ldr	r3, [pc, #144]	; (5f90 <set_trx_state+0x28c>)
    5f00:	4798      	blx	r3
			PAL_WAIT_1_US();
    5f02:	2001      	movs	r0, #1
    5f04:	4b25      	ldr	r3, [pc, #148]	; (5f9c <set_trx_state+0x298>)
    5f06:	4798      	blx	r3
			break;
    5f08:	e784      	b.n	5e14 <set_trx_state+0x110>
			switch_pll_on(); /* state change from TRX_OFF to
    5f0a:	4b26      	ldr	r3, [pc, #152]	; (5fa4 <set_trx_state+0x2a0>)
    5f0c:	4798      	blx	r3
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    5f0e:	2116      	movs	r1, #22
    5f10:	2002      	movs	r0, #2
    5f12:	4b1f      	ldr	r3, [pc, #124]	; (5f90 <set_trx_state+0x28c>)
    5f14:	4798      	blx	r3
			PAL_WAIT_1_US();
    5f16:	2001      	movs	r0, #1
    5f18:	4b20      	ldr	r3, [pc, #128]	; (5f9c <set_trx_state+0x298>)
    5f1a:	4798      	blx	r3
			break;
    5f1c:	e77a      	b.n	5e14 <set_trx_state+0x110>
		switch (tal_trx_status) {
    5f1e:	4b11      	ldr	r3, [pc, #68]	; (5f64 <set_trx_state+0x260>)
    5f20:	781b      	ldrb	r3, [r3, #0]
    5f22:	2b08      	cmp	r3, #8
    5f24:	d013      	beq.n	5f4e <set_trx_state+0x24a>
    5f26:	b2da      	uxtb	r2, r3
    5f28:	2a08      	cmp	r2, #8
    5f2a:	d905      	bls.n	5f38 <set_trx_state+0x234>
    5f2c:	2b09      	cmp	r3, #9
    5f2e:	d006      	beq.n	5f3e <set_trx_state+0x23a>
    5f30:	2b16      	cmp	r3, #22
    5f32:	d000      	beq.n	5f36 <set_trx_state+0x232>
    5f34:	e76e      	b.n	5e14 <set_trx_state+0x110>
    5f36:	e002      	b.n	5f3e <set_trx_state+0x23a>
    5f38:	2b06      	cmp	r3, #6
    5f3a:	d000      	beq.n	5f3e <set_trx_state+0x23a>
    5f3c:	e76a      	b.n	5e14 <set_trx_state+0x110>
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    5f3e:	2119      	movs	r1, #25
    5f40:	2002      	movs	r0, #2
    5f42:	4b13      	ldr	r3, [pc, #76]	; (5f90 <set_trx_state+0x28c>)
    5f44:	4798      	blx	r3
			PAL_WAIT_1_US();
    5f46:	2001      	movs	r0, #1
    5f48:	4b14      	ldr	r3, [pc, #80]	; (5f9c <set_trx_state+0x298>)
    5f4a:	4798      	blx	r3
			break;
    5f4c:	e762      	b.n	5e14 <set_trx_state+0x110>
			switch_pll_on(); /* state change from TRX_OFF to
    5f4e:	4b15      	ldr	r3, [pc, #84]	; (5fa4 <set_trx_state+0x2a0>)
    5f50:	4798      	blx	r3
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    5f52:	2119      	movs	r1, #25
    5f54:	2002      	movs	r0, #2
    5f56:	4b0e      	ldr	r3, [pc, #56]	; (5f90 <set_trx_state+0x28c>)
    5f58:	4798      	blx	r3
			PAL_WAIT_1_US();
    5f5a:	2001      	movs	r0, #1
    5f5c:	4b0f      	ldr	r3, [pc, #60]	; (5f9c <set_trx_state+0x298>)
    5f5e:	4798      	blx	r3
			break;
    5f60:	e758      	b.n	5e14 <set_trx_state+0x110>
    5f62:	46c0      	nop			; (mov r8, r8)
    5f64:	20000be3 	.word	0x20000be3
    5f68:	00009f88 	.word	0x00009f88
    5f6c:	20000bec 	.word	0x20000bec
    5f70:	000063c5 	.word	0x000063c5
    5f74:	00006e1d 	.word	0x00006e1d
    5f78:	40001800 	.word	0x40001800
    5f7c:	00004039 	.word	0x00004039
    5f80:	2000000c 	.word	0x2000000c
    5f84:	41004400 	.word	0x41004400
    5f88:	00006c21 	.word	0x00006c21
    5f8c:	00006385 	.word	0x00006385
    5f90:	00006d1d 	.word	0x00006d1d
    5f94:	00006e41 	.word	0x00006e41
    5f98:	00009fe4 	.word	0x00009fe4
    5f9c:	00003f45 	.word	0x00003f45
    5fa0:	00006e29 	.word	0x00006e29
    5fa4:	00005c49 	.word	0x00005c49

00005fa8 <tal_task>:
{
    5fa8:	b510      	push	{r4, lr}
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
    5faa:	4b17      	ldr	r3, [pc, #92]	; (6008 <tal_task+0x60>)
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d00d      	beq.n	5fce <tal_task+0x26>
    5fb2:	4b16      	ldr	r3, [pc, #88]	; (600c <tal_task+0x64>)
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d109      	bne.n	5fce <tal_task+0x26>
		if (tal_rx_buffer == NULL) {
    5fba:	4b15      	ldr	r3, [pc, #84]	; (6010 <tal_task+0x68>)
    5fbc:	681b      	ldr	r3, [r3, #0]
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d010      	beq.n	5fe4 <tal_task+0x3c>
			tal_rx_on_required = false;
    5fc2:	2200      	movs	r2, #0
    5fc4:	4b10      	ldr	r3, [pc, #64]	; (6008 <tal_task+0x60>)
    5fc6:	701a      	strb	r2, [r3, #0]
			set_trx_state(CMD_RX_AACK_ON);
    5fc8:	2016      	movs	r0, #22
    5fca:	4b12      	ldr	r3, [pc, #72]	; (6014 <tal_task+0x6c>)
    5fcc:	4798      	blx	r3
	if (tal_incoming_frame_queue.size > 0) {
    5fce:	4b12      	ldr	r3, [pc, #72]	; (6018 <tal_task+0x70>)
    5fd0:	7a1b      	ldrb	r3, [r3, #8]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d10e      	bne.n	5ff4 <tal_task+0x4c>
	switch (tal_state) {
    5fd6:	4b0d      	ldr	r3, [pc, #52]	; (600c <tal_task+0x64>)
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	2b02      	cmp	r3, #2
    5fdc:	d101      	bne.n	5fe2 <tal_task+0x3a>
		tx_done_handling(); /* see tal_tx.c */
    5fde:	4b0f      	ldr	r3, [pc, #60]	; (601c <tal_task+0x74>)
    5fe0:	4798      	blx	r3
} /* tal_task() */
    5fe2:	bd10      	pop	{r4, pc}
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    5fe4:	2090      	movs	r0, #144	; 0x90
    5fe6:	4b0e      	ldr	r3, [pc, #56]	; (6020 <tal_task+0x78>)
    5fe8:	4798      	blx	r3
    5fea:	4b09      	ldr	r3, [pc, #36]	; (6010 <tal_task+0x68>)
    5fec:	6018      	str	r0, [r3, #0]
		if (NULL != tal_rx_buffer) {
    5fee:	2800      	cmp	r0, #0
    5ff0:	d0ed      	beq.n	5fce <tal_task+0x26>
    5ff2:	e7e6      	b.n	5fc2 <tal_task+0x1a>
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
    5ff4:	2100      	movs	r1, #0
    5ff6:	4808      	ldr	r0, [pc, #32]	; (6018 <tal_task+0x70>)
    5ff8:	4b0a      	ldr	r3, [pc, #40]	; (6024 <tal_task+0x7c>)
    5ffa:	4798      	blx	r3
		if (NULL != rx_frame) {
    5ffc:	2800      	cmp	r0, #0
    5ffe:	d0ea      	beq.n	5fd6 <tal_task+0x2e>
			process_incoming_frame(rx_frame);
    6000:	4b09      	ldr	r3, [pc, #36]	; (6028 <tal_task+0x80>)
    6002:	4798      	blx	r3
    6004:	e7e7      	b.n	5fd6 <tal_task+0x2e>
    6006:	46c0      	nop			; (mov r8, r8)
    6008:	20000bb0 	.word	0x20000bb0
    600c:	20000bed 	.word	0x20000bed
    6010:	200003a8 	.word	0x200003a8
    6014:	00005d05 	.word	0x00005d05
    6018:	20000bb4 	.word	0x20000bb4
    601c:	000068ad 	.word	0x000068ad
    6020:	000059d5 	.word	0x000059d5
    6024:	00005c39 	.word	0x00005c39
    6028:	000067d9 	.word	0x000067d9

0000602c <trx_config>:
 * \brief Configures the transceiver
 *
 * This function is called to configure the transceiver after reset.
 */
void trx_config(void)
{
    602c:	b570      	push	{r4, r5, r6, lr}
	/* Set pin driver strength */
	trx_bit_write(SR_CLKM_SHA_SEL, CLKM_SHA_DISABLE);
    602e:	2300      	movs	r3, #0
    6030:	2203      	movs	r2, #3
    6032:	2108      	movs	r1, #8
    6034:	2003      	movs	r0, #3
    6036:	4c1f      	ldr	r4, [pc, #124]	; (60b4 <trx_config+0x88>)
    6038:	47a0      	blx	r4
	trx_bit_write(SR_CLKM_CTRL, CLKM_1MHZ);
    603a:	2301      	movs	r3, #1
    603c:	2200      	movs	r2, #0
    603e:	2107      	movs	r1, #7
    6040:	2003      	movs	r0, #3
    6042:	47a0      	blx	r4
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    6044:	4b1c      	ldr	r3, [pc, #112]	; (60b8 <trx_config+0x8c>)
    6046:	4798      	blx	r3
    6048:	0005      	movs	r5, r0
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    604a:	b2c1      	uxtb	r1, r0
    604c:	202d      	movs	r0, #45	; 0x2d
    604e:	4e1b      	ldr	r6, [pc, #108]	; (60bc <trx_config+0x90>)
    6050:	47b0      	blx	r6
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    6052:	b2ab      	uxth	r3, r5
    6054:	0a1b      	lsrs	r3, r3, #8
    6056:	2200      	movs	r2, #0
    6058:	2107      	movs	r1, #7
    605a:	202e      	movs	r0, #46	; 0x2e
    605c:	47a0      	blx	r4
	/*
	 * Since the TAL is supporting 802.15.4-2006,
	 * frames with version number 0 (compatible to 802.15.4-2003) and
	 * with version number 1 (compatible to 802.15.4-2006) are acknowledged.
	 */
	trx_bit_write(SR_AACK_FVN_MODE, FRAME_VERSION_01);
    605e:	2301      	movs	r3, #1
    6060:	2206      	movs	r2, #6
    6062:	21c0      	movs	r1, #192	; 0xc0
    6064:	202e      	movs	r0, #46	; 0x2e
    6066:	47a0      	blx	r4
	trx_bit_write(SR_AACK_SET_PD, SET_PD); /* ACKs for data requests,
    6068:	2301      	movs	r3, #1
    606a:	2205      	movs	r2, #5
    606c:	2120      	movs	r1, #32
    606e:	202e      	movs	r0, #46	; 0x2e
    6070:	47a0      	blx	r4
	                                       * indicate pending data */
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    6072:	2301      	movs	r3, #1
    6074:	2207      	movs	r2, #7
    6076:	2180      	movs	r1, #128	; 0x80
    6078:	200c      	movs	r0, #12
    607a:	47a0      	blx	r4
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT); /* The TRX_END
    607c:	2108      	movs	r1, #8
    607e:	200e      	movs	r0, #14
    6080:	47b0      	blx	r6
	                                              * interrupt of the
	                                              * transceiver is
	                                              * enabled. */
	trx_reg_write(RG_TRX_RPC, 0xFF); /* RPC feature configuration. */
    6082:	21ff      	movs	r1, #255	; 0xff
    6084:	2016      	movs	r0, #22
    6086:	47b0      	blx	r6

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
    6088:	2301      	movs	r3, #1
    608a:	2200      	movs	r2, #0
    608c:	2103      	movs	r1, #3
    608e:	200d      	movs	r0, #13
    6090:	47a0      	blx	r4
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    6092:	2303      	movs	r3, #3
    6094:	2200      	movs	r2, #0
    6096:	210f      	movs	r1, #15
    6098:	200a      	movs	r0, #10
    609a:	47a0      	blx	r4
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    609c:	2301      	movs	r3, #1
    609e:	2203      	movs	r2, #3
    60a0:	2108      	movs	r1, #8
    60a2:	200d      	movs	r0, #13
    60a4:	47a0      	blx	r4
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    60a6:	2301      	movs	r3, #1
    60a8:	2202      	movs	r2, #2
    60aa:	2104      	movs	r1, #4
    60ac:	200d      	movs	r0, #13
    60ae:	47a0      	blx	r4

#ifdef EXT_RF_FRONT_END_CTRL
	/* Enable RF front end control */
	trx_bit_write(SR_PA_EXT_EN, 1);
#endif
}
    60b0:	bd70      	pop	{r4, r5, r6, pc}
    60b2:	46c0      	nop			; (mov r8, r8)
    60b4:	00006e41 	.word	0x00006e41
    60b8:	00007fd1 	.word	0x00007fd1
    60bc:	00006d1d 	.word	0x00006d1d

000060c0 <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
    60c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60c2:	b083      	sub	sp, #12
	uint16_t seed = 0;
	uint8_t cur_random_val = 0;

	/* RPC could influence the randomness; therefore disable it here. */
	uint8_t previous_RPC_value = trx_reg_read(RG_TRX_RPC);
    60c4:	2016      	movs	r0, #22
    60c6:	4b1f      	ldr	r3, [pc, #124]	; (6144 <tal_generate_rand_seed+0x84>)
    60c8:	4798      	blx	r3
    60ca:	9001      	str	r0, [sp, #4]
	trx_reg_write(RG_TRX_RPC, 0xC1);
    60cc:	21c1      	movs	r1, #193	; 0xc1
    60ce:	2016      	movs	r0, #22
    60d0:	4b1d      	ldr	r3, [pc, #116]	; (6148 <tal_generate_rand_seed+0x88>)
    60d2:	4798      	blx	r3

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	ENTER_TRX_REGION();
    60d4:	2100      	movs	r1, #0
    60d6:	2000      	movs	r0, #0
    60d8:	4b1c      	ldr	r3, [pc, #112]	; (614c <tal_generate_rand_seed+0x8c>)
    60da:	4798      	blx	r3

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    60dc:	4c1c      	ldr	r4, [pc, #112]	; (6150 <tal_generate_rand_seed+0x90>)
    60de:	2006      	movs	r0, #6
    60e0:	47a0      	blx	r4
	} while (trx_state != RX_ON);
    60e2:	2806      	cmp	r0, #6
    60e4:	d1fb      	bne.n	60de <tal_generate_rand_seed+0x1e>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    60e6:	2300      	movs	r3, #0
    60e8:	2207      	movs	r2, #7
    60ea:	2180      	movs	r1, #128	; 0x80
    60ec:	300f      	adds	r0, #15
    60ee:	4c19      	ldr	r4, [pc, #100]	; (6154 <tal_generate_rand_seed+0x94>)
    60f0:	47a0      	blx	r4
    60f2:	2608      	movs	r6, #8
	uint16_t seed = 0;
    60f4:	2400      	movs	r4, #0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    60f6:	4d18      	ldr	r5, [pc, #96]	; (6158 <tal_generate_rand_seed+0x98>)
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    60f8:	4f18      	ldr	r7, [pc, #96]	; (615c <tal_generate_rand_seed+0x9c>)
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    60fa:	2205      	movs	r2, #5
    60fc:	2160      	movs	r1, #96	; 0x60
    60fe:	2006      	movs	r0, #6
    6100:	47a8      	blx	r5
		seed = seed << 2;
    6102:	00a4      	lsls	r4, r4, #2
    6104:	b2a4      	uxth	r4, r4
		seed |= cur_random_val;
    6106:	4304      	orrs	r4, r0
    6108:	b2a4      	uxth	r4, r4
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    610a:	2001      	movs	r0, #1
    610c:	47b8      	blx	r7
    610e:	3e01      	subs	r6, #1
    6110:	b2f6      	uxtb	r6, r6
	for (uint8_t i = 0; i < 8; i++) {
    6112:	2e00      	cmp	r6, #0
    6114:	d1f1      	bne.n	60fa <tal_generate_rand_seed+0x3a>
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    6116:	2003      	movs	r0, #3
    6118:	4b0d      	ldr	r3, [pc, #52]	; (6150 <tal_generate_rand_seed+0x90>)
    611a:	4798      	blx	r3

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_read(RG_IRQ_STATUS);
    611c:	200f      	movs	r0, #15
    611e:	4b09      	ldr	r3, [pc, #36]	; (6144 <tal_generate_rand_seed+0x84>)
    6120:	4798      	blx	r3
    6122:	2201      	movs	r2, #1
    6124:	4b0e      	ldr	r3, [pc, #56]	; (6160 <tal_generate_rand_seed+0xa0>)
    6126:	611a      	str	r2, [r3, #16]
	pal_trx_irq_flag_clr();
	LEAVE_TRX_REGION();
    6128:	2100      	movs	r1, #0
    612a:	2000      	movs	r0, #0
    612c:	4b0d      	ldr	r3, [pc, #52]	; (6164 <tal_generate_rand_seed+0xa4>)
    612e:	4798      	blx	r3

	/* Set the seed for the random number generator. */
	srand(seed);
    6130:	0020      	movs	r0, r4
    6132:	4b0d      	ldr	r3, [pc, #52]	; (6168 <tal_generate_rand_seed+0xa8>)
    6134:	4798      	blx	r3

	/* Restore RPC settings. */
	trx_reg_write(RG_TRX_RPC, previous_RPC_value);
    6136:	9901      	ldr	r1, [sp, #4]
    6138:	2016      	movs	r0, #22
    613a:	4b03      	ldr	r3, [pc, #12]	; (6148 <tal_generate_rand_seed+0x88>)
    613c:	4798      	blx	r3
}
    613e:	b003      	add	sp, #12
    6140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6142:	46c0      	nop			; (mov r8, r8)
    6144:	00006c21 	.word	0x00006c21
    6148:	00006d1d 	.word	0x00006d1d
    614c:	00004059 	.word	0x00004059
    6150:	00005d05 	.word	0x00005d05
    6154:	00006e41 	.word	0x00006e41
    6158:	00006e29 	.word	0x00006e29
    615c:	00003f45 	.word	0x00003f45
    6160:	40001800 	.word	0x40001800
    6164:	00004039 	.word	0x00004039
    6168:	00007f75 	.word	0x00007f75

0000616c <internal_tal_reset>:
{
    616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    616e:	0005      	movs	r5, r0
		port_base->OUTCLR.reg = pin_mask;
    6170:	2280      	movs	r2, #128	; 0x80
    6172:	0352      	lsls	r2, r2, #13
    6174:	4b1c      	ldr	r3, [pc, #112]	; (61e8 <internal_tal_reset+0x7c>)
    6176:	615a      	str	r2, [r3, #20]
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    6178:	20d2      	movs	r0, #210	; 0xd2
    617a:	4c1c      	ldr	r4, [pc, #112]	; (61ec <internal_tal_reset+0x80>)
    617c:	47a0      	blx	r4
    617e:	4e1c      	ldr	r6, [pc, #112]	; (61f0 <internal_tal_reset+0x84>)
    6180:	2780      	movs	r7, #128	; 0x80
    6182:	023f      	lsls	r7, r7, #8
    6184:	6177      	str	r7, [r6, #20]
	pal_timer_delay(RST_PULSE_WIDTH_US);
    6186:	200a      	movs	r0, #10
    6188:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    618a:	61b7      	str	r7, [r6, #24]
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    618c:	2064      	movs	r0, #100	; 0x64
    618e:	47a0      	blx	r4
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6190:	2200      	movs	r2, #0
    6192:	211f      	movs	r1, #31
    6194:	2001      	movs	r0, #1
    6196:	4b17      	ldr	r3, [pc, #92]	; (61f4 <internal_tal_reset+0x88>)
    6198:	4798      	blx	r3
    619a:	240a      	movs	r4, #10
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    619c:	4f13      	ldr	r7, [pc, #76]	; (61ec <internal_tal_reset+0x80>)
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    619e:	4e15      	ldr	r6, [pc, #84]	; (61f4 <internal_tal_reset+0x88>)
	} while (trx_status != TRX_OFF);
    61a0:	2808      	cmp	r0, #8
    61a2:	d00b      	beq.n	61bc <internal_tal_reset+0x50>
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    61a4:	2064      	movs	r0, #100	; 0x64
    61a6:	47b8      	blx	r7
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    61a8:	2200      	movs	r2, #0
    61aa:	211f      	movs	r1, #31
    61ac:	2001      	movs	r0, #1
    61ae:	47b0      	blx	r6
    61b0:	3c01      	subs	r4, #1
    61b2:	b2e4      	uxtb	r4, r4
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    61b4:	2c00      	cmp	r4, #0
    61b6:	d1f3      	bne.n	61a0 <internal_tal_reset+0x34>
		return FAILURE;
    61b8:	2085      	movs	r0, #133	; 0x85
}
    61ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	tal_trx_status = TRX_OFF;
    61bc:	2208      	movs	r2, #8
    61be:	4b0e      	ldr	r3, [pc, #56]	; (61f8 <internal_tal_reset+0x8c>)
    61c0:	701a      	strb	r2, [r3, #0]
	tal_generate_rand_seed();
    61c2:	4b0e      	ldr	r3, [pc, #56]	; (61fc <internal_tal_reset+0x90>)
    61c4:	4798      	blx	r3
	trx_config();
    61c6:	4b0e      	ldr	r3, [pc, #56]	; (6200 <internal_tal_reset+0x94>)
    61c8:	4798      	blx	r3
	if (set_default_pib) {
    61ca:	2d00      	cmp	r5, #0
    61cc:	d108      	bne.n	61e0 <internal_tal_reset+0x74>
	write_all_tal_pib_to_trx(); /* implementation can be found in
    61ce:	4b0d      	ldr	r3, [pc, #52]	; (6204 <internal_tal_reset+0x98>)
    61d0:	4798      	blx	r3
	tal_state = TAL_IDLE;
    61d2:	2300      	movs	r3, #0
    61d4:	4a0c      	ldr	r2, [pc, #48]	; (6208 <internal_tal_reset+0x9c>)
    61d6:	7013      	strb	r3, [r2, #0]
	tal_rx_on_required = false;
    61d8:	4a0c      	ldr	r2, [pc, #48]	; (620c <internal_tal_reset+0xa0>)
    61da:	7013      	strb	r3, [r2, #0]
	return MAC_SUCCESS;
    61dc:	2000      	movs	r0, #0
    61de:	e7ec      	b.n	61ba <internal_tal_reset+0x4e>
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    61e0:	4b0b      	ldr	r3, [pc, #44]	; (6210 <internal_tal_reset+0xa4>)
    61e2:	4798      	blx	r3
    61e4:	e7f3      	b.n	61ce <internal_tal_reset+0x62>
    61e6:	46c0      	nop			; (mov r8, r8)
    61e8:	41004400 	.word	0x41004400
    61ec:	00003f45 	.word	0x00003f45
    61f0:	41004480 	.word	0x41004480
    61f4:	00006e29 	.word	0x00006e29
    61f8:	20000be3 	.word	0x20000be3
    61fc:	000060c1 	.word	0x000060c1
    6200:	0000602d 	.word	0x0000602d
    6204:	00006479 	.word	0x00006479
    6208:	20000bed 	.word	0x20000bed
    620c:	20000bb0 	.word	0x20000bb0
    6210:	000063e1 	.word	0x000063e1

00006214 <tal_init>:
{
    6214:	b5f0      	push	{r4, r5, r6, r7, lr}
    6216:	46c6      	mov	lr, r8
    6218:	b500      	push	{lr}
	if(pal_init() != MAC_SUCCESS) 
    621a:	4b46      	ldr	r3, [pc, #280]	; (6334 <tal_init+0x120>)
    621c:	4798      	blx	r3
		return FAILURE;
    621e:	2485      	movs	r4, #133	; 0x85
	if(pal_init() != MAC_SUCCESS) 
    6220:	2800      	cmp	r0, #0
    6222:	d003      	beq.n	622c <tal_init+0x18>
} /* tal_init() */
    6224:	0020      	movs	r0, r4
    6226:	bc04      	pop	{r2}
    6228:	4690      	mov	r8, r2
    622a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    622c:	4c42      	ldr	r4, [pc, #264]	; (6338 <tal_init+0x124>)
    622e:	2580      	movs	r5, #128	; 0x80
    6230:	022d      	lsls	r5, r5, #8
    6232:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    6234:	2280      	movs	r2, #128	; 0x80
    6236:	0352      	lsls	r2, r2, #13
    6238:	4b40      	ldr	r3, [pc, #256]	; (633c <tal_init+0x128>)
    623a:	615a      	str	r2, [r3, #20]
	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    623c:	304b      	adds	r0, #75	; 0x4b
    623e:	30ff      	adds	r0, #255	; 0xff
    6240:	4e3f      	ldr	r6, [pc, #252]	; (6340 <tal_init+0x12c>)
    6242:	47b0      	blx	r6
    6244:	6165      	str	r5, [r4, #20]
	pal_timer_delay(RST_PULSE_WIDTH_US);
    6246:	200a      	movs	r0, #10
    6248:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    624a:	61a5      	str	r5, [r4, #24]
    624c:	240a      	movs	r4, #10
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    624e:	4e3c      	ldr	r6, [pc, #240]	; (6340 <tal_init+0x12c>)
	}while (trx_reg_read(RG_PART_NUM) != PART_NUM_AT86RF233);
    6250:	4d3c      	ldr	r5, [pc, #240]	; (6344 <tal_init+0x130>)
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    6252:	2064      	movs	r0, #100	; 0x64
    6254:	47b0      	blx	r6
	}while (trx_reg_read(RG_PART_NUM) != PART_NUM_AT86RF233);
    6256:	201c      	movs	r0, #28
    6258:	47a8      	blx	r5
    625a:	280b      	cmp	r0, #11
    625c:	d005      	beq.n	626a <tal_init+0x56>
    625e:	3c01      	subs	r4, #1
    6260:	b2e4      	uxtb	r4, r4
		if(poll_counter == P_ON_TO_CLKM_ATTEMPTS) 
    6262:	2c00      	cmp	r4, #0
    6264:	d1f5      	bne.n	6252 <tal_init+0x3e>
		return FAILURE;
    6266:	2485      	movs	r4, #133	; 0x85
    6268:	e7dc      	b.n	6224 <tal_init+0x10>
	trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    626a:	2108      	movs	r1, #8
    626c:	3809      	subs	r0, #9
    626e:	4b36      	ldr	r3, [pc, #216]	; (6348 <tal_init+0x134>)
    6270:	4798      	blx	r3
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    6272:	2064      	movs	r0, #100	; 0x64
    6274:	4b32      	ldr	r3, [pc, #200]	; (6340 <tal_init+0x12c>)
    6276:	4798      	blx	r3
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6278:	2200      	movs	r2, #0
    627a:	211f      	movs	r1, #31
    627c:	2001      	movs	r0, #1
    627e:	4b33      	ldr	r3, [pc, #204]	; (634c <tal_init+0x138>)
    6280:	4798      	blx	r3
    6282:	240a      	movs	r4, #10
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    6284:	4e2e      	ldr	r6, [pc, #184]	; (6340 <tal_init+0x12c>)
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6286:	4d31      	ldr	r5, [pc, #196]	; (634c <tal_init+0x138>)
	}while(trx_status != TRX_OFF);
    6288:	2808      	cmp	r0, #8
    628a:	d00a      	beq.n	62a2 <tal_init+0x8e>
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    628c:	2064      	movs	r0, #100	; 0x64
    628e:	47b0      	blx	r6
		trx_status = /*(tal_trx_status_t)*/ trx_bit_read(SR_TRX_STATUS);
    6290:	2200      	movs	r2, #0
    6292:	211f      	movs	r1, #31
    6294:	2001      	movs	r0, #1
    6296:	47a8      	blx	r5
    6298:	3c01      	subs	r4, #1
    629a:	b2e4      	uxtb	r4, r4
		if(poll_counter == P_ON_TO_TRX_OFF_ATTEMPTS) 
    629c:	2c00      	cmp	r4, #0
    629e:	d1f3      	bne.n	6288 <tal_init+0x74>
    62a0:	e7e1      	b.n	6266 <tal_init+0x52>
	tal_trx_status = TRX_OFF;
    62a2:	2208      	movs	r2, #8
    62a4:	4b2a      	ldr	r3, [pc, #168]	; (6350 <tal_init+0x13c>)
    62a6:	701a      	strb	r2, [r3, #0]
	if(internal_tal_reset(true) != MAC_SUCCESS) 
    62a8:	3807      	subs	r0, #7
    62aa:	4b2a      	ldr	r3, [pc, #168]	; (6354 <tal_init+0x140>)
    62ac:	4798      	blx	r3
    62ae:	1e04      	subs	r4, r0, #0
    62b0:	d001      	beq.n	62b6 <tal_init+0xa2>
		return FAILURE;
    62b2:	2485      	movs	r4, #133	; 0x85
    62b4:	e7b6      	b.n	6224 <tal_init+0x10>
	while((tal_pib.IeeeAddress == 0x0000000000000000) ||
    62b6:	4f28      	ldr	r7, [pc, #160]	; (6358 <tal_init+0x144>)
			*ptr_pib++ = rand();
    62b8:	4e28      	ldr	r6, [pc, #160]	; (635c <tal_init+0x148>)
    62ba:	e008      	b.n	62ce <tal_init+0xba>
    62bc:	4d26      	ldr	r5, [pc, #152]	; (6358 <tal_init+0x144>)
    62be:	2308      	movs	r3, #8
    62c0:	4698      	mov	r8, r3
    62c2:	44a8      	add	r8, r5
    62c4:	47b0      	blx	r6
    62c6:	7028      	strb	r0, [r5, #0]
    62c8:	3501      	adds	r5, #1
		for(uint8_t i = 0; i < 8; i++) 
    62ca:	4545      	cmp	r5, r8
    62cc:	d1fa      	bne.n	62c4 <tal_init+0xb0>
	while((tal_pib.IeeeAddress == 0x0000000000000000) ||
    62ce:	7838      	ldrb	r0, [r7, #0]
    62d0:	7879      	ldrb	r1, [r7, #1]
    62d2:	0209      	lsls	r1, r1, #8
    62d4:	4308      	orrs	r0, r1
    62d6:	78b9      	ldrb	r1, [r7, #2]
    62d8:	0409      	lsls	r1, r1, #16
    62da:	4301      	orrs	r1, r0
    62dc:	78f8      	ldrb	r0, [r7, #3]
    62de:	0600      	lsls	r0, r0, #24
    62e0:	4308      	orrs	r0, r1
    62e2:	0002      	movs	r2, r0
    62e4:	7938      	ldrb	r0, [r7, #4]
    62e6:	7979      	ldrb	r1, [r7, #5]
    62e8:	0209      	lsls	r1, r1, #8
    62ea:	4308      	orrs	r0, r1
    62ec:	79b9      	ldrb	r1, [r7, #6]
    62ee:	0409      	lsls	r1, r1, #16
    62f0:	4301      	orrs	r1, r0
    62f2:	79f8      	ldrb	r0, [r7, #7]
    62f4:	0600      	lsls	r0, r0, #24
    62f6:	4308      	orrs	r0, r1
    62f8:	0003      	movs	r3, r0
    62fa:	2001      	movs	r0, #1
    62fc:	4240      	negs	r0, r0
    62fe:	17c1      	asrs	r1, r0, #31
    6300:	1812      	adds	r2, r2, r0
    6302:	414b      	adcs	r3, r1
    6304:	1c59      	adds	r1, r3, #1
    6306:	d101      	bne.n	630c <tal_init+0xf8>
    6308:	1cd3      	adds	r3, r2, #3
    630a:	d8d7      	bhi.n	62bc <tal_init+0xa8>
	trx_irq_init((FUNC_PTR)trx_irq_handler_cb);
    630c:	4814      	ldr	r0, [pc, #80]	; (6360 <tal_init+0x14c>)
    630e:	4b15      	ldr	r3, [pc, #84]	; (6364 <tal_init+0x150>)
    6310:	4798      	blx	r3
	pal_trx_irq_en(); /* Enable transceiver main interrupt. */
    6312:	2100      	movs	r1, #0
    6314:	2000      	movs	r0, #0
    6316:	4b14      	ldr	r3, [pc, #80]	; (6368 <tal_init+0x154>)
    6318:	4798      	blx	r3
	bmm_buffer_init();
    631a:	4b14      	ldr	r3, [pc, #80]	; (636c <tal_init+0x158>)
    631c:	4798      	blx	r3
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    631e:	2090      	movs	r0, #144	; 0x90
    6320:	4b13      	ldr	r3, [pc, #76]	; (6370 <tal_init+0x15c>)
    6322:	4798      	blx	r3
    6324:	4b13      	ldr	r3, [pc, #76]	; (6374 <tal_init+0x160>)
    6326:	6018      	str	r0, [r3, #0]
	qmm_queue_init(&tal_incoming_frame_queue);
    6328:	4813      	ldr	r0, [pc, #76]	; (6378 <tal_init+0x164>)
    632a:	4b14      	ldr	r3, [pc, #80]	; (637c <tal_init+0x168>)
    632c:	4798      	blx	r3
	tfa_init();
    632e:	4b14      	ldr	r3, [pc, #80]	; (6380 <tal_init+0x16c>)
    6330:	4798      	blx	r3
	return MAC_SUCCESS;
    6332:	e777      	b.n	6224 <tal_init+0x10>
    6334:	00005949 	.word	0x00005949
    6338:	41004480 	.word	0x41004480
    633c:	41004400 	.word	0x41004400
    6340:	00003f45 	.word	0x00003f45
    6344:	00006c21 	.word	0x00006c21
    6348:	00006d1d 	.word	0x00006d1d
    634c:	00006e29 	.word	0x00006e29
    6350:	20000be3 	.word	0x20000be3
    6354:	0000616d 	.word	0x0000616d
    6358:	20000bc4 	.word	0x20000bc4
    635c:	00007fd1 	.word	0x00007fd1
    6360:	00006385 	.word	0x00006385
    6364:	00006e1d 	.word	0x00006e1d
    6368:	00004039 	.word	0x00004039
    636c:	00005989 	.word	0x00005989
    6370:	000059d5 	.word	0x000059d5
    6374:	200003a8 	.word	0x200003a8
    6378:	20000bb4 	.word	0x20000bb4
    637c:	00005b95 	.word	0x00005b95
    6380:	000069fd 	.word	0x000069fd

00006384 <trx_irq_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts.
 */
void trx_irq_handler_cb(void)
{
    6384:	b510      	push	{r4, lr}
	trx_irq_reason_t trx_irq_cause;

	trx_irq_cause = /* (trx_irq_reason_t)*/ trx_reg_read(RG_IRQ_STATUS);
    6386:	200f      	movs	r0, #15
    6388:	4b0a      	ldr	r3, [pc, #40]	; (63b4 <trx_irq_handler_cb+0x30>)
    638a:	4798      	blx	r3
		pal_trx_read_timestamp(&tal_timestamp);
	}
#endif  /* #if (DISABLE_TSTAMP_IRQ == 1) */
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	if (trx_irq_cause & TRX_IRQ_3_TRX_END) {
    638c:	0703      	lsls	r3, r0, #28
    638e:	d505      	bpl.n	639c <trx_irq_handler_cb+0x18>
		 * transmission or reception.
		 */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
		if ((tal_state == TAL_TX_AUTO) || tal_beacon_transmission)
#else
		if (tal_state == TAL_TX_AUTO)
    6390:	4b09      	ldr	r3, [pc, #36]	; (63b8 <trx_irq_handler_cb+0x34>)
    6392:	781b      	ldrb	r3, [r3, #0]
    6394:	2b01      	cmp	r3, #1
    6396:	d002      	beq.n	639e <trx_irq_handler_cb+0x1a>
			} else {
				handle_tx_end_irq(false); /* see tal_tx.c */
			}
		} else { /* Other tal_state than TAL_TX_... */
			 /* Handle rx interrupt. */
			handle_received_frame_irq(); /* see tal_rx.c */
    6398:	4b08      	ldr	r3, [pc, #32]	; (63bc <trx_irq_handler_cb+0x38>)
    639a:	4798      	blx	r3
#if (RTB_TYPE == RTB_PMU_233R)
		rtb_update_fec();
#endif  /* (RTB_TYPE == RTB_PMU_233R) */
#endif
	}
} /* trx_irq_handler_cb() */
    639c:	bd10      	pop	{r4, pc}
			if (trx_irq_cause & TRX_IRQ_6_TRX_UR) {
    639e:	0643      	lsls	r3, r0, #25
    63a0:	d503      	bpl.n	63aa <trx_irq_handler_cb+0x26>
				handle_tx_end_irq(true); /* see tal_tx.c */
    63a2:	2001      	movs	r0, #1
    63a4:	4b06      	ldr	r3, [pc, #24]	; (63c0 <trx_irq_handler_cb+0x3c>)
    63a6:	4798      	blx	r3
    63a8:	e7f8      	b.n	639c <trx_irq_handler_cb+0x18>
				handle_tx_end_irq(false); /* see tal_tx.c */
    63aa:	2000      	movs	r0, #0
    63ac:	4b04      	ldr	r3, [pc, #16]	; (63c0 <trx_irq_handler_cb+0x3c>)
    63ae:	4798      	blx	r3
    63b0:	e7f4      	b.n	639c <trx_irq_handler_cb+0x18>
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	00006c21 	.word	0x00006c21
    63b8:	20000bed 	.word	0x20000bed
    63bc:	00006739 	.word	0x00006739
    63c0:	000068f9 	.word	0x000068f9

000063c4 <trx_irq_awake_handler_cb>:
 * \brief Transceiver interrupt handler for awake end IRQ
 *
 * This function handles the transceiver awake end interrupt.
 */
void trx_irq_awake_handler_cb(void)
{
    63c4:	b510      	push	{r4, lr}
	trx_irq_reason_t trx_irq_cause = /*(trx_irq_reason_t)*/ trx_reg_read(
    63c6:	200f      	movs	r0, #15
    63c8:	4b03      	ldr	r3, [pc, #12]	; (63d8 <trx_irq_awake_handler_cb+0x14>)
    63ca:	4798      	blx	r3
			RG_IRQ_STATUS);

	if (trx_irq_cause & TRX_IRQ_4_CCA_ED_DONE) {
    63cc:	06c3      	lsls	r3, r0, #27
    63ce:	d502      	bpl.n	63d6 <trx_irq_awake_handler_cb+0x12>
		/* Set the wake-up flag. */
		tal_awake_end_flag = true;
    63d0:	2201      	movs	r2, #1
    63d2:	4b02      	ldr	r3, [pc, #8]	; (63dc <trx_irq_awake_handler_cb+0x18>)
    63d4:	701a      	strb	r2, [r3, #0]
#if (_DEBUG_ > 0)
	if (trx_irq_cause & (~(TRX_IRQ_0_PLL_LOCK | TRX_IRQ_4_CCA_ED_DONE))) {
		Assert("Unexpected interrupt" == 0);
	}
#endif
}
    63d6:	bd10      	pop	{r4, pc}
    63d8:	00006c21 	.word	0x00006c21
    63dc:	20000bec 	.word	0x20000bec

000063e0 <init_tal_pib>:
 *
 * This function initializes the TAL information base attributes
 * to their default values.
 */
void init_tal_pib(void)
{
    63e0:	b510      	push	{r4, lr}
	tal_pib.MaxCSMABackoffs = TAL_MAX_CSMA_BACKOFFS_DEFAULT;
    63e2:	4b13      	ldr	r3, [pc, #76]	; (6430 <init_tal_pib+0x50>)
    63e4:	2204      	movs	r2, #4
    63e6:	751a      	strb	r2, [r3, #20]
	tal_pib.MinBE = TAL_MINBE_DEFAULT;
    63e8:	2003      	movs	r0, #3
    63ea:	7558      	strb	r0, [r3, #21]
	tal_pib.PANId = TAL_PANID_BC_DEFAULT;
    63ec:	3a05      	subs	r2, #5
    63ee:	739a      	strb	r2, [r3, #14]
    63f0:	73da      	strb	r2, [r3, #15]
	tal_pib.ShortAddress = TAL_SHORT_ADDRESS_DEFAULT;
    63f2:	731a      	strb	r2, [r3, #12]
    63f4:	735a      	strb	r2, [r3, #13]
	tal_pib.CurrentChannel = TAL_CURRENT_CHANNEL_DEFAULT;
    63f6:	210b      	movs	r1, #11
    63f8:	74d9      	strb	r1, [r3, #19]
	tal_pib.SupportedChannels = TRX_SUPPORTED_CHANNELS;
    63fa:	2100      	movs	r1, #0
    63fc:	2400      	movs	r4, #0
    63fe:	721c      	strb	r4, [r3, #8]
    6400:	3c08      	subs	r4, #8
    6402:	725c      	strb	r4, [r3, #9]
    6404:	729a      	strb	r2, [r3, #10]
    6406:	3208      	adds	r2, #8
    6408:	72da      	strb	r2, [r3, #11]
	tal_pib.CurrentPage = TAL_CURRENT_PAGE_DEFAULT;
    640a:	7619      	strb	r1, [r3, #24]
	tal_pib.MaxFrameDuration = TAL_MAX_FRAME_DURATION_DEFAULT;
    640c:	3203      	adds	r2, #3
    640e:	741a      	strb	r2, [r3, #16]
    6410:	3a09      	subs	r2, #9
    6412:	745a      	strb	r2, [r3, #17]
	tal_pib.SHRDuration = TAL_SHR_DURATION_DEFAULT;
    6414:	3209      	adds	r2, #9
    6416:	765a      	strb	r2, [r3, #25]
	tal_pib.SymbolsPerOctet = TAL_SYMBOLS_PER_OCTET_DEFAULT;
    6418:	3a08      	subs	r2, #8
    641a:	769a      	strb	r2, [r3, #26]
	tal_pib.MaxBE = TAL_MAXBE_DEFAULT;
    641c:	3203      	adds	r2, #3
    641e:	76da      	strb	r2, [r3, #27]
	tal_pib.MaxFrameRetries = TAL_MAXFRAMERETRIES_DEFAULT;
    6420:	7718      	strb	r0, [r3, #28]
	tal_pib.TransmitPower = limit_tx_pwr(TAL_TRANSMIT_POWER_DEFAULT);
    6422:	327f      	adds	r2, #127	; 0x7f
    6424:	75da      	strb	r2, [r3, #23]
	tal_pib.CCAMode = TAL_CCA_MODE_DEFAULT;
    6426:	3a83      	subs	r2, #131	; 0x83
    6428:	749a      	strb	r2, [r3, #18]
	tal_pib.PrivatePanCoordinator = TAL_PAN_COORDINATOR_DEFAULT;
    642a:	7599      	strb	r1, [r3, #22]
#endif  /* BEACON_SUPPORT */

#ifdef PROMISCUOUS_MODE
	tal_pib.PromiscuousMode = TAL_PIB_PROMISCUOUS_MODE_DEFAULT;
#endif
}
    642c:	bd10      	pop	{r4, pc}
    642e:	46c0      	nop			; (mov r8, r8)
    6430:	20000bc4 	.word	0x20000bc4

00006434 <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    6434:	0683      	lsls	r3, r0, #26
    6436:	d410      	bmi.n	645a <convert_phyTransmitPower_to_reg_value+0x26>
    6438:	213f      	movs	r1, #63	; 0x3f
    643a:	4001      	ands	r1, r0

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
    643c:	2903      	cmp	r1, #3
    643e:	dc12      	bgt.n	6466 <convert_phyTransmitPower_to_reg_value+0x32>
    6440:	4b0c      	ldr	r3, [pc, #48]	; (6474 <convert_phyTransmitPower_to_reg_value+0x40>)
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    6442:	2001      	movs	r0, #1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    6444:	2201      	movs	r2, #1
    6446:	569a      	ldrsb	r2, [r3, r2]
		if (trx_tx_level <= dbm_value) {
    6448:	4291      	cmp	r1, r2
    644a:	da0e      	bge.n	646a <convert_phyTransmitPower_to_reg_value+0x36>
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    644c:	3001      	adds	r0, #1
    644e:	b2c0      	uxtb	r0, r0
    6450:	3301      	adds	r3, #1
    6452:	2810      	cmp	r0, #16
    6454:	d1f6      	bne.n	6444 <convert_phyTransmitPower_to_reg_value+0x10>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    6456:	2000      	movs	r0, #0
}
    6458:	4770      	bx	lr
	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    645a:	4240      	negs	r0, r0
    645c:	211f      	movs	r1, #31
    645e:	4001      	ands	r1, r0
    6460:	4249      	negs	r1, r1
    6462:	b249      	sxtb	r1, r1
    6464:	e7ea      	b.n	643c <convert_phyTransmitPower_to_reg_value+0x8>
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    6466:	2204      	movs	r2, #4
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    6468:	2000      	movs	r0, #0
			if (trx_tx_level < dbm_value) {
    646a:	4291      	cmp	r1, r2
    646c:	ddf4      	ble.n	6458 <convert_phyTransmitPower_to_reg_value+0x24>
				return (i - 1);
    646e:	3801      	subs	r0, #1
    6470:	b2c0      	uxtb	r0, r0
    6472:	e7f1      	b.n	6458 <convert_phyTransmitPower_to_reg_value+0x24>
    6474:	0000a03c 	.word	0x0000a03c

00006478 <write_all_tal_pib_to_trx>:
{
    6478:	b570      	push	{r4, r5, r6, lr}
		trx_reg_write((RG_PAN_ID_0 + i), *ptr_to_reg);
    647a:	4d1e      	ldr	r5, [pc, #120]	; (64f4 <write_all_tal_pib_to_trx+0x7c>)
    647c:	7ba9      	ldrb	r1, [r5, #14]
    647e:	2022      	movs	r0, #34	; 0x22
    6480:	4c1d      	ldr	r4, [pc, #116]	; (64f8 <write_all_tal_pib_to_trx+0x80>)
    6482:	47a0      	blx	r4
    6484:	7be9      	ldrb	r1, [r5, #15]
    6486:	2023      	movs	r0, #35	; 0x23
    6488:	47a0      	blx	r4
    648a:	2424      	movs	r4, #36	; 0x24
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    648c:	4e1a      	ldr	r6, [pc, #104]	; (64f8 <write_all_tal_pib_to_trx+0x80>)
    648e:	7829      	ldrb	r1, [r5, #0]
    6490:	0020      	movs	r0, r4
    6492:	47b0      	blx	r6
		ptr_to_reg++;
    6494:	3501      	adds	r5, #1
    6496:	3401      	adds	r4, #1
    6498:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    649a:	2c2c      	cmp	r4, #44	; 0x2c
    649c:	d1f7      	bne.n	648e <write_all_tal_pib_to_trx+0x16>
		trx_reg_write((RG_SHORT_ADDR_0 + i), *ptr_to_reg);
    649e:	4c15      	ldr	r4, [pc, #84]	; (64f4 <write_all_tal_pib_to_trx+0x7c>)
    64a0:	7b21      	ldrb	r1, [r4, #12]
    64a2:	2020      	movs	r0, #32
    64a4:	4d14      	ldr	r5, [pc, #80]	; (64f8 <write_all_tal_pib_to_trx+0x80>)
    64a6:	47a8      	blx	r5
    64a8:	7b61      	ldrb	r1, [r4, #13]
    64aa:	2021      	movs	r0, #33	; 0x21
    64ac:	47a8      	blx	r5
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    64ae:	7ca3      	ldrb	r3, [r4, #18]
    64b0:	2205      	movs	r2, #5
    64b2:	2160      	movs	r1, #96	; 0x60
    64b4:	2008      	movs	r0, #8
    64b6:	4d11      	ldr	r5, [pc, #68]	; (64fc <write_all_tal_pib_to_trx+0x84>)
    64b8:	47a8      	blx	r5
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    64ba:	7d63      	ldrb	r3, [r4, #21]
    64bc:	2200      	movs	r2, #0
    64be:	210f      	movs	r1, #15
    64c0:	202f      	movs	r0, #47	; 0x2f
    64c2:	47a8      	blx	r5
	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    64c4:	7da3      	ldrb	r3, [r4, #22]
    64c6:	2203      	movs	r2, #3
    64c8:	2108      	movs	r1, #8
    64ca:	202e      	movs	r0, #46	; 0x2e
    64cc:	47a8      	blx	r5
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    64ce:	7ee3      	ldrb	r3, [r4, #27]
    64d0:	2204      	movs	r2, #4
    64d2:	21f0      	movs	r1, #240	; 0xf0
    64d4:	202f      	movs	r0, #47	; 0x2f
    64d6:	47a8      	blx	r5
	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    64d8:	7ce3      	ldrb	r3, [r4, #19]
    64da:	2200      	movs	r2, #0
    64dc:	211f      	movs	r1, #31
    64de:	2008      	movs	r0, #8
    64e0:	47a8      	blx	r5
		reg_value = convert_phyTransmitPower_to_reg_value(
    64e2:	7de0      	ldrb	r0, [r4, #23]
    64e4:	4b06      	ldr	r3, [pc, #24]	; (6500 <write_all_tal_pib_to_trx+0x88>)
    64e6:	4798      	blx	r3
    64e8:	0003      	movs	r3, r0
		trx_bit_write(SR_TX_PWR, reg_value);
    64ea:	2200      	movs	r2, #0
    64ec:	210f      	movs	r1, #15
    64ee:	2005      	movs	r0, #5
    64f0:	47a8      	blx	r5
}
    64f2:	bd70      	pop	{r4, r5, r6, pc}
    64f4:	20000bc4 	.word	0x20000bc4
    64f8:	00006d1d 	.word	0x00006d1d
    64fc:	00006e41 	.word	0x00006e41
    6500:	00006435 	.word	0x00006435

00006504 <tal_pib_set>:
{
    6504:	b570      	push	{r4, r5, r6, lr}
    6506:	000c      	movs	r4, r1
	switch(attribute) 
    6508:	284e      	cmp	r0, #78	; 0x4e
    650a:	d007      	beq.n	651c <tal_pib_set+0x18>
    650c:	2859      	cmp	r0, #89	; 0x59
    650e:	d10a      	bne.n	6526 <tal_pib_set+0x22>
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    6510:	780a      	ldrb	r2, [r1, #0]
    6512:	4b81      	ldr	r3, [pc, #516]	; (6718 <tal_pib_set+0x214>)
    6514:	771a      	strb	r2, [r3, #28]
	return MAC_SUCCESS;
    6516:	2200      	movs	r2, #0
} /* tal_pib_set() */
    6518:	0010      	movs	r0, r2
    651a:	bd70      	pop	{r4, r5, r6, pc}
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    651c:	780a      	ldrb	r2, [r1, #0]
    651e:	4b7e      	ldr	r3, [pc, #504]	; (6718 <tal_pib_set+0x214>)
    6520:	751a      	strb	r2, [r3, #20]
	return MAC_SUCCESS;
    6522:	2200      	movs	r2, #0
		break;
    6524:	e7f8      	b.n	6518 <tal_pib_set+0x14>
		if(tal_trx_status == TRX_SLEEP) 
    6526:	4b7d      	ldr	r3, [pc, #500]	; (671c <tal_pib_set+0x218>)
    6528:	7819      	ldrb	r1, [r3, #0]
			return TAL_TRX_ASLEEP;
    652a:	2281      	movs	r2, #129	; 0x81
		if(tal_trx_status == TRX_SLEEP) 
    652c:	290f      	cmp	r1, #15
    652e:	d0f3      	beq.n	6518 <tal_pib_set+0x14>
		switch(attribute) 
    6530:	280b      	cmp	r0, #11
    6532:	d100      	bne.n	6536 <tal_pib_set+0x32>
    6534:	e0da      	b.n	66ec <tal_pib_set+0x1e8>
    6536:	d915      	bls.n	6564 <tal_pib_set+0x60>
    6538:	2853      	cmp	r0, #83	; 0x53
    653a:	d100      	bne.n	653e <tal_pib_set+0x3a>
    653c:	e090      	b.n	6660 <tal_pib_set+0x15c>
    653e:	d84a      	bhi.n	65d6 <tal_pib_set+0xd2>
    6540:	284f      	cmp	r0, #79	; 0x4f
    6542:	d07c      	beq.n	663e <tal_pib_set+0x13a>
    6544:	2850      	cmp	r0, #80	; 0x50
    6546:	d000      	beq.n	654a <tal_pib_set+0x46>
    6548:	e0da      	b.n	6700 <tal_pib_set+0x1fc>
			tal_pib.PANId = value->pib_value_16bit;
    654a:	7821      	ldrb	r1, [r4, #0]
    654c:	7863      	ldrb	r3, [r4, #1]
    654e:	4c72      	ldr	r4, [pc, #456]	; (6718 <tal_pib_set+0x214>)
    6550:	73a1      	strb	r1, [r4, #14]
    6552:	73e3      	strb	r3, [r4, #15]
					trx_reg_write((RG_PAN_ID_0 + i),*ptr_pan);
    6554:	2022      	movs	r0, #34	; 0x22
    6556:	4d72      	ldr	r5, [pc, #456]	; (6720 <tal_pib_set+0x21c>)
    6558:	47a8      	blx	r5
    655a:	7be1      	ldrb	r1, [r4, #15]
    655c:	2023      	movs	r0, #35	; 0x23
    655e:	47a8      	blx	r5
	return MAC_SUCCESS;
    6560:	2200      	movs	r2, #0
    6562:	e7d9      	b.n	6518 <tal_pib_set+0x14>
		switch(attribute) 
    6564:	2802      	cmp	r0, #2
    6566:	d100      	bne.n	656a <tal_pib_set+0x66>
    6568:	e096      	b.n	6698 <tal_pib_set+0x194>
    656a:	d911      	bls.n	6590 <tal_pib_set+0x8c>
    656c:	2803      	cmp	r0, #3
    656e:	d100      	bne.n	6572 <tal_pib_set+0x6e>
    6570:	e0b2      	b.n	66d8 <tal_pib_set+0x1d4>
    6572:	2804      	cmp	r0, #4
    6574:	d000      	beq.n	6578 <tal_pib_set+0x74>
    6576:	e0c3      	b.n	6700 <tal_pib_set+0x1fc>
			if(tal_state != TAL_IDLE) 
    6578:	4b6a      	ldr	r3, [pc, #424]	; (6724 <tal_pib_set+0x220>)
    657a:	781b      	ldrb	r3, [r3, #0]
				return TAL_BUSY;
    657c:	2286      	movs	r2, #134	; 0x86
			if(tal_state != TAL_IDLE) 
    657e:	2b00      	cmp	r3, #0
    6580:	d1ca      	bne.n	6518 <tal_pib_set+0x14>
				if(page != 0) 
    6582:	7823      	ldrb	r3, [r4, #0]
					return MAC_INVALID_PARAMETER;
    6584:	3262      	adds	r2, #98	; 0x62
	return MAC_SUCCESS;
    6586:	1e59      	subs	r1, r3, #1
    6588:	418b      	sbcs	r3, r1
    658a:	425b      	negs	r3, r3
    658c:	401a      	ands	r2, r3
    658e:	e7c3      	b.n	6518 <tal_pib_set+0x14>
		switch(attribute) 
    6590:	2800      	cmp	r0, #0
    6592:	d000      	beq.n	6596 <tal_pib_set+0x92>
    6594:	e0b4      	b.n	6700 <tal_pib_set+0x1fc>
			if(tal_state != TAL_IDLE)
    6596:	4b63      	ldr	r3, [pc, #396]	; (6724 <tal_pib_set+0x220>)
    6598:	781b      	ldrb	r3, [r3, #0]
				return TAL_BUSY;
    659a:	2286      	movs	r2, #134	; 0x86
			if(tal_state != TAL_IDLE)
    659c:	2b00      	cmp	r3, #0
    659e:	d1bb      	bne.n	6518 <tal_pib_set+0x14>
			if((uint32_t)TRX_SUPPORTED_CHANNELS & ((uint32_t)0x01 << value->pib_value_8bit)) 
    65a0:	7823      	ldrb	r3, [r4, #0]
    65a2:	4861      	ldr	r0, [pc, #388]	; (6728 <tal_pib_set+0x224>)
    65a4:	40d8      	lsrs	r0, r3
				return MAC_INVALID_PARAMETER;
    65a6:	3262      	adds	r2, #98	; 0x62
			if((uint32_t)TRX_SUPPORTED_CHANNELS & ((uint32_t)0x01 << value->pib_value_8bit)) 
    65a8:	07c0      	lsls	r0, r0, #31
    65aa:	d5b5      	bpl.n	6518 <tal_pib_set+0x14>
				if(tal_trx_status != TRX_OFF) 
    65ac:	2908      	cmp	r1, #8
    65ae:	d100      	bne.n	65b2 <tal_pib_set+0xae>
    65b0:	e0a8      	b.n	6704 <tal_pib_set+0x200>
					}while (set_trx_state(CMD_TRX_OFF)!=TRX_OFF);
    65b2:	4d5e      	ldr	r5, [pc, #376]	; (672c <tal_pib_set+0x228>)
    65b4:	2008      	movs	r0, #8
    65b6:	47a8      	blx	r5
    65b8:	2808      	cmp	r0, #8
    65ba:	d1fb      	bne.n	65b4 <tal_pib_set+0xb0>
				tal_pib.CurrentChannel = value->pib_value_8bit;
    65bc:	7823      	ldrb	r3, [r4, #0]
    65be:	4a56      	ldr	r2, [pc, #344]	; (6718 <tal_pib_set+0x214>)
    65c0:	74d3      	strb	r3, [r2, #19]
				trx_bit_write(SR_CHANNEL,tal_pib.CurrentChannel);
    65c2:	2200      	movs	r2, #0
    65c4:	211f      	movs	r1, #31
    65c6:	2008      	movs	r0, #8
    65c8:	4c59      	ldr	r4, [pc, #356]	; (6730 <tal_pib_set+0x22c>)
    65ca:	47a0      	blx	r4
					set_trx_state(CMD_RX_AACK_ON);
    65cc:	2016      	movs	r0, #22
    65ce:	4b57      	ldr	r3, [pc, #348]	; (672c <tal_pib_set+0x228>)
    65d0:	4798      	blx	r3
	return MAC_SUCCESS;
    65d2:	2200      	movs	r2, #0
    65d4:	e7a0      	b.n	6518 <tal_pib_set+0x14>
		switch(attribute) 
    65d6:	2857      	cmp	r0, #87	; 0x57
    65d8:	d04f      	beq.n	667a <tal_pib_set+0x176>
    65da:	28f0      	cmp	r0, #240	; 0xf0
    65dc:	d000      	beq.n	65e0 <tal_pib_set+0xdc>
    65de:	e08f      	b.n	6700 <tal_pib_set+0x1fc>
			tal_pib.IeeeAddress = value->pib_value_64bit;
    65e0:	7822      	ldrb	r2, [r4, #0]
    65e2:	7863      	ldrb	r3, [r4, #1]
    65e4:	021b      	lsls	r3, r3, #8
    65e6:	4313      	orrs	r3, r2
    65e8:	78a2      	ldrb	r2, [r4, #2]
    65ea:	0412      	lsls	r2, r2, #16
    65ec:	4313      	orrs	r3, r2
    65ee:	78e2      	ldrb	r2, [r4, #3]
    65f0:	0612      	lsls	r2, r2, #24
    65f2:	431a      	orrs	r2, r3
    65f4:	7923      	ldrb	r3, [r4, #4]
    65f6:	7961      	ldrb	r1, [r4, #5]
    65f8:	0209      	lsls	r1, r1, #8
    65fa:	4319      	orrs	r1, r3
    65fc:	79a3      	ldrb	r3, [r4, #6]
    65fe:	041b      	lsls	r3, r3, #16
    6600:	4319      	orrs	r1, r3
    6602:	79e3      	ldrb	r3, [r4, #7]
    6604:	061b      	lsls	r3, r3, #24
    6606:	430b      	orrs	r3, r1
    6608:	4d43      	ldr	r5, [pc, #268]	; (6718 <tal_pib_set+0x214>)
    660a:	702a      	strb	r2, [r5, #0]
    660c:	0a11      	lsrs	r1, r2, #8
    660e:	7069      	strb	r1, [r5, #1]
    6610:	0c11      	lsrs	r1, r2, #16
    6612:	70a9      	strb	r1, [r5, #2]
    6614:	0e12      	lsrs	r2, r2, #24
    6616:	70ea      	strb	r2, [r5, #3]
    6618:	712b      	strb	r3, [r5, #4]
    661a:	0a1a      	lsrs	r2, r3, #8
    661c:	716a      	strb	r2, [r5, #5]
    661e:	0c1a      	lsrs	r2, r3, #16
    6620:	71aa      	strb	r2, [r5, #6]
    6622:	0e1b      	lsrs	r3, r3, #24
    6624:	71eb      	strb	r3, [r5, #7]
    6626:	2424      	movs	r4, #36	; 0x24
					trx_reg_write((RG_IEEE_ADDR_0 + i),*ptr);
    6628:	4e3d      	ldr	r6, [pc, #244]	; (6720 <tal_pib_set+0x21c>)
    662a:	7829      	ldrb	r1, [r5, #0]
    662c:	0020      	movs	r0, r4
    662e:	47b0      	blx	r6
					ptr++;
    6630:	3501      	adds	r5, #1
    6632:	3401      	adds	r4, #1
    6634:	b2e4      	uxtb	r4, r4
				for(uint8_t i = 0; i < 8; i++) 
    6636:	2c2c      	cmp	r4, #44	; 0x2c
    6638:	d1f7      	bne.n	662a <tal_pib_set+0x126>
	return MAC_SUCCESS;
    663a:	2200      	movs	r2, #0
    663c:	e76c      	b.n	6518 <tal_pib_set+0x14>
			tal_pib.MinBE = value->pib_value_8bit;
    663e:	7823      	ldrb	r3, [r4, #0]
    6640:	4a35      	ldr	r2, [pc, #212]	; (6718 <tal_pib_set+0x214>)
    6642:	7553      	strb	r3, [r2, #21]
			if(tal_pib.MinBE > tal_pib.MaxBE) 
    6644:	7ed2      	ldrb	r2, [r2, #27]
    6646:	4293      	cmp	r3, r2
    6648:	d901      	bls.n	664e <tal_pib_set+0x14a>
				tal_pib.MinBE = tal_pib.MaxBE;
    664a:	4b33      	ldr	r3, [pc, #204]	; (6718 <tal_pib_set+0x214>)
    664c:	755a      	strb	r2, [r3, #21]
			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    664e:	4b32      	ldr	r3, [pc, #200]	; (6718 <tal_pib_set+0x214>)
    6650:	7d5b      	ldrb	r3, [r3, #21]
    6652:	2200      	movs	r2, #0
    6654:	210f      	movs	r1, #15
    6656:	202f      	movs	r0, #47	; 0x2f
    6658:	4c35      	ldr	r4, [pc, #212]	; (6730 <tal_pib_set+0x22c>)
    665a:	47a0      	blx	r4
	return MAC_SUCCESS;
    665c:	2200      	movs	r2, #0
			break;
    665e:	e75b      	b.n	6518 <tal_pib_set+0x14>
			tal_pib.ShortAddress = value->pib_value_16bit;
    6660:	7821      	ldrb	r1, [r4, #0]
    6662:	7863      	ldrb	r3, [r4, #1]
    6664:	4c2c      	ldr	r4, [pc, #176]	; (6718 <tal_pib_set+0x214>)
    6666:	7321      	strb	r1, [r4, #12]
    6668:	7363      	strb	r3, [r4, #13]
					trx_reg_write((RG_SHORT_ADDR_0 + i),*ptr_shrt);
    666a:	2020      	movs	r0, #32
    666c:	4d2c      	ldr	r5, [pc, #176]	; (6720 <tal_pib_set+0x21c>)
    666e:	47a8      	blx	r5
    6670:	7b61      	ldrb	r1, [r4, #13]
    6672:	2021      	movs	r0, #33	; 0x21
    6674:	47a8      	blx	r5
	return MAC_SUCCESS;
    6676:	2200      	movs	r2, #0
    6678:	e74e      	b.n	6518 <tal_pib_set+0x14>
			tal_pib.MaxBE = value->pib_value_8bit;
    667a:	7823      	ldrb	r3, [r4, #0]
    667c:	4a26      	ldr	r2, [pc, #152]	; (6718 <tal_pib_set+0x214>)
    667e:	76d3      	strb	r3, [r2, #27]
			if(tal_pib.MaxBE < tal_pib.MinBE) 
    6680:	7d52      	ldrb	r2, [r2, #21]
    6682:	429a      	cmp	r2, r3
    6684:	d901      	bls.n	668a <tal_pib_set+0x186>
				tal_pib.MinBE = tal_pib.MaxBE;
    6686:	4a24      	ldr	r2, [pc, #144]	; (6718 <tal_pib_set+0x214>)
    6688:	7553      	strb	r3, [r2, #21]
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    668a:	2204      	movs	r2, #4
    668c:	21f0      	movs	r1, #240	; 0xf0
    668e:	202f      	movs	r0, #47	; 0x2f
    6690:	4c27      	ldr	r4, [pc, #156]	; (6730 <tal_pib_set+0x22c>)
    6692:	47a0      	blx	r4
	return MAC_SUCCESS;
    6694:	2200      	movs	r2, #0
			break;
    6696:	e73f      	b.n	6518 <tal_pib_set+0x14>
			tal_pib.TransmitPower = value->pib_value_8bit;
    6698:	7820      	ldrb	r0, [r4, #0]
	dbm_value = CONV_phyTransmitPower_TO_DBM(curr_transmit_power);
    669a:	0683      	lsls	r3, r0, #26
    669c:	d407      	bmi.n	66ae <tal_pib_set+0x1aa>
    669e:	233f      	movs	r3, #63	; 0x3f
    66a0:	4003      	ands	r3, r0
	if (dbm_value > (int8_t)PGM_READ_BYTE(&tx_pwr_table[0])) {
    66a2:	2b04      	cmp	r3, #4
    66a4:	dc09      	bgt.n	66ba <tal_pib_set+0x1b6>
	} else if (dbm_value <
    66a6:	3311      	adds	r3, #17
    66a8:	da08      	bge.n	66bc <tal_pib_set+0x1b8>
		ret_val = CONV_DBM_TO_phyTransmitPower(dbm_value);
    66aa:	202f      	movs	r0, #47	; 0x2f
    66ac:	e006      	b.n	66bc <tal_pib_set+0x1b8>
	dbm_value = CONV_phyTransmitPower_TO_DBM(curr_transmit_power);
    66ae:	4242      	negs	r2, r0
    66b0:	231f      	movs	r3, #31
    66b2:	4013      	ands	r3, r2
    66b4:	425b      	negs	r3, r3
    66b6:	b25b      	sxtb	r3, r3
    66b8:	e7f3      	b.n	66a2 <tal_pib_set+0x19e>
		ret_val = CONV_DBM_TO_phyTransmitPower(dbm_value);
    66ba:	2004      	movs	r0, #4
	return (ret_val | TX_PWR_TOLERANCE);
    66bc:	2380      	movs	r3, #128	; 0x80
    66be:	4318      	orrs	r0, r3
				tal_pib.TransmitPower = limit_tx_pwr(tal_pib.TransmitPower);
    66c0:	4b15      	ldr	r3, [pc, #84]	; (6718 <tal_pib_set+0x214>)
    66c2:	75d8      	strb	r0, [r3, #23]
				uint8_t reg_value = convert_phyTransmitPower_to_reg_value(tal_pib.TransmitPower);
    66c4:	4b1b      	ldr	r3, [pc, #108]	; (6734 <tal_pib_set+0x230>)
    66c6:	4798      	blx	r3
    66c8:	0003      	movs	r3, r0
				trx_bit_write(SR_TX_PWR, reg_value);
    66ca:	2200      	movs	r2, #0
    66cc:	210f      	movs	r1, #15
    66ce:	2005      	movs	r0, #5
    66d0:	4c17      	ldr	r4, [pc, #92]	; (6730 <tal_pib_set+0x22c>)
    66d2:	47a0      	blx	r4
	return MAC_SUCCESS;
    66d4:	2200      	movs	r2, #0
			break;
    66d6:	e71f      	b.n	6518 <tal_pib_set+0x14>
			tal_pib.CCAMode = value->pib_value_8bit;
    66d8:	7823      	ldrb	r3, [r4, #0]
    66da:	4a0f      	ldr	r2, [pc, #60]	; (6718 <tal_pib_set+0x214>)
    66dc:	7493      	strb	r3, [r2, #18]
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    66de:	2205      	movs	r2, #5
    66e0:	2160      	movs	r1, #96	; 0x60
    66e2:	2008      	movs	r0, #8
    66e4:	4c12      	ldr	r4, [pc, #72]	; (6730 <tal_pib_set+0x22c>)
    66e6:	47a0      	blx	r4
	return MAC_SUCCESS;
    66e8:	2200      	movs	r2, #0
			break;
    66ea:	e715      	b.n	6518 <tal_pib_set+0x14>
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    66ec:	7823      	ldrb	r3, [r4, #0]
    66ee:	4a0a      	ldr	r2, [pc, #40]	; (6718 <tal_pib_set+0x214>)
    66f0:	7593      	strb	r3, [r2, #22]
			trx_bit_write(SR_AACK_I_AM_COORD,tal_pib.PrivatePanCoordinator);
    66f2:	2203      	movs	r2, #3
    66f4:	2108      	movs	r1, #8
    66f6:	202e      	movs	r0, #46	; 0x2e
    66f8:	4c0d      	ldr	r4, [pc, #52]	; (6730 <tal_pib_set+0x22c>)
    66fa:	47a0      	blx	r4
	return MAC_SUCCESS;
    66fc:	2200      	movs	r2, #0
			break;
    66fe:	e70b      	b.n	6518 <tal_pib_set+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
    6700:	22f4      	movs	r2, #244	; 0xf4
    6702:	e709      	b.n	6518 <tal_pib_set+0x14>
				tal_pib.CurrentChannel = value->pib_value_8bit;
    6704:	4a04      	ldr	r2, [pc, #16]	; (6718 <tal_pib_set+0x214>)
    6706:	74d3      	strb	r3, [r2, #19]
				trx_bit_write(SR_CHANNEL,tal_pib.CurrentChannel);
    6708:	2200      	movs	r2, #0
    670a:	211f      	movs	r1, #31
    670c:	2008      	movs	r0, #8
    670e:	4c08      	ldr	r4, [pc, #32]	; (6730 <tal_pib_set+0x22c>)
    6710:	47a0      	blx	r4
	return MAC_SUCCESS;
    6712:	2200      	movs	r2, #0
    6714:	e700      	b.n	6518 <tal_pib_set+0x14>
    6716:	46c0      	nop			; (mov r8, r8)
    6718:	20000bc4 	.word	0x20000bc4
    671c:	20000be3 	.word	0x20000be3
    6720:	00006d1d 	.word	0x00006d1d
    6724:	20000bed 	.word	0x20000bed
    6728:	07fff800 	.word	0x07fff800
    672c:	00005d05 	.word	0x00005d05
    6730:	00006e41 	.word	0x00006e41
    6734:	00006435 	.word	0x00006435

00006738 <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    6738:	b530      	push	{r4, r5, lr}
    673a:	b083      	sub	sp, #12
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    673c:	4b1f      	ldr	r3, [pc, #124]	; (67bc <handle_received_frame_irq+0x84>)
    673e:	681b      	ldr	r3, [r3, #0]
    6740:	2b00      	cmp	r3, #0
    6742:	d02e      	beq.n	67a2 <handle_received_frame_irq+0x6a>
		uint8_t dummy;
		trx_frame_read(&dummy, 1);
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    6744:	781c      	ldrb	r4, [r3, #0]
    6746:	785a      	ldrb	r2, [r3, #1]
    6748:	0212      	lsls	r2, r2, #8
    674a:	4322      	orrs	r2, r4
    674c:	789c      	ldrb	r4, [r3, #2]
    674e:	0424      	lsls	r4, r4, #16
    6750:	4322      	orrs	r2, r4
    6752:	78dc      	ldrb	r4, [r3, #3]
    6754:	0624      	lsls	r4, r4, #24
    6756:	4314      	orrs	r4, r2
	trx_sram_read(0x00, &phy_frame_len, LENGTH_FIELD_LEN); /* 0x00: SRAM
	                                                        * offset
	                                                        * address */
#else
	/* Get frame length from transceiver. */
	trx_frame_read(&phy_frame_len, LENGTH_FIELD_LEN);
    6758:	466b      	mov	r3, sp
    675a:	1ddd      	adds	r5, r3, #7
    675c:	2101      	movs	r1, #1
    675e:	0028      	movs	r0, r5
    6760:	4b17      	ldr	r3, [pc, #92]	; (67c0 <handle_received_frame_irq+0x88>)
    6762:	4798      	blx	r3
#endif

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    6764:	7829      	ldrb	r1, [r5, #0]
    6766:	b24b      	sxtb	r3, r1
    6768:	2b00      	cmp	r3, #0
    676a:	db18      	blt.n	679e <handle_received_frame_irq+0x66>
	 * The PHY header is also included in the frame (length field), hence
	 * the frame length
	 * is incremented.
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length = phy_frame_len + LENGTH_FIELD_LEN + LQI_LEN +
    676c:	3103      	adds	r1, #3
    676e:	b2c9      	uxtb	r1, r1
			ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    6770:	1a65      	subs	r5, r4, r1
    6772:	3590      	adds	r5, #144	; 0x90
	 * Note: The following code is different from single chip
	 * transceivers, since reading the frame via SPI contains the length
	 * field
	 * in the first octet. RF233's frame buffer includes ED value too.
	 */
	trx_frame_read(frame_ptr,
    6774:	0028      	movs	r0, r5
    6776:	4b12      	ldr	r3, [pc, #72]	; (67c0 <handle_received_frame_irq+0x88>)
    6778:	4798      	blx	r3
			LENGTH_FIELD_LEN + phy_frame_len + LQI_LEN +
			ED_VAL_LEN);
	receive_frame->mpdu = frame_ptr;
    677a:	7265      	strb	r5, [r4, #9]
    677c:	0a2a      	lsrs	r2, r5, #8
    677e:	72a2      	strb	r2, [r4, #10]
    6780:	0c2a      	lsrs	r2, r5, #16
    6782:	72e2      	strb	r2, [r4, #11]
    6784:	0e2d      	lsrs	r5, r5, #24
    6786:	7325      	strb	r5, [r4, #12]
	receive_frame->time_stamp = tal_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    6788:	4c0c      	ldr	r4, [pc, #48]	; (67bc <handle_received_frame_irq+0x84>)
    678a:	6821      	ldr	r1, [r4, #0]
    678c:	480d      	ldr	r0, [pc, #52]	; (67c4 <handle_received_frame_irq+0x8c>)
    678e:	4b0e      	ldr	r3, [pc, #56]	; (67c8 <handle_received_frame_irq+0x90>)
    6790:	4798      	blx	r3

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    6792:	2090      	movs	r0, #144	; 0x90
    6794:	4b0d      	ldr	r3, [pc, #52]	; (67cc <handle_received_frame_irq+0x94>)
    6796:	4798      	blx	r3
    6798:	6020      	str	r0, [r4, #0]

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    679a:	2800      	cmp	r0, #0
    679c:	d007      	beq.n	67ae <handle_received_frame_irq+0x76>
		 * Keep the following as a reminder, if receiver is used with
		 * RX_ON instead.
		 */
		/* trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON); */
	}
}
    679e:	b003      	add	sp, #12
    67a0:	bd30      	pop	{r4, r5, pc}
		trx_frame_read(&dummy, 1);
    67a2:	2101      	movs	r1, #1
    67a4:	466b      	mov	r3, sp
    67a6:	1d98      	adds	r0, r3, #6
    67a8:	4b05      	ldr	r3, [pc, #20]	; (67c0 <handle_received_frame_irq+0x88>)
    67aa:	4798      	blx	r3
    67ac:	e7f7      	b.n	679e <handle_received_frame_irq+0x66>
		set_trx_state(CMD_PLL_ON);
    67ae:	3009      	adds	r0, #9
    67b0:	4b07      	ldr	r3, [pc, #28]	; (67d0 <handle_received_frame_irq+0x98>)
    67b2:	4798      	blx	r3
		tal_rx_on_required = true;
    67b4:	2201      	movs	r2, #1
    67b6:	4b07      	ldr	r3, [pc, #28]	; (67d4 <handle_received_frame_irq+0x9c>)
    67b8:	701a      	strb	r2, [r3, #0]
    67ba:	e7f0      	b.n	679e <handle_received_frame_irq+0x66>
    67bc:	200003a8 	.word	0x200003a8
    67c0:	00006e69 	.word	0x00006e69
    67c4:	20000bb4 	.word	0x20000bb4
    67c8:	00005bad 	.word	0x00005bad
    67cc:	000059d5 	.word	0x000059d5
    67d0:	00005d05 	.word	0x00005d05
    67d4:	20000bb0 	.word	0x20000bb0

000067d8 <process_incoming_frame>:
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    67d8:	b570      	push	{r4, r5, r6, lr}
    67da:	0005      	movs	r5, r0
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    67dc:	7804      	ldrb	r4, [r0, #0]
    67de:	7843      	ldrb	r3, [r0, #1]
    67e0:	021b      	lsls	r3, r3, #8
    67e2:	4323      	orrs	r3, r4
    67e4:	7884      	ldrb	r4, [r0, #2]
    67e6:	0424      	lsls	r4, r4, #16
    67e8:	4323      	orrs	r3, r4
    67ea:	78c4      	ldrb	r4, [r0, #3]
    67ec:	0624      	lsls	r4, r4, #24
    67ee:	431c      	orrs	r4, r3

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    67f0:	7a66      	ldrb	r6, [r4, #9]
    67f2:	7aa3      	ldrb	r3, [r4, #10]
    67f4:	021b      	lsls	r3, r3, #8
    67f6:	4333      	orrs	r3, r6
    67f8:	7ae6      	ldrb	r6, [r4, #11]
    67fa:	0436      	lsls	r6, r6, #16
    67fc:	4333      	orrs	r3, r6
    67fe:	7b26      	ldrb	r6, [r4, #12]
    6800:	0636      	lsls	r6, r6, #24
    6802:	431e      	orrs	r6, r3
    6804:	7833      	ldrb	r3, [r6, #0]
    6806:	4a12      	ldr	r2, [pc, #72]	; (6850 <process_incoming_frame+0x78>)
    6808:	7013      	strb	r3, [r2, #0]

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    680a:	3301      	adds	r3, #1
    680c:	18f6      	adds	r6, r6, r3
	lqi = *frame_ptr++;
    680e:	7833      	ldrb	r3, [r6, #0]
	ed_level = *frame_ptr;
    6810:	7870      	ldrb	r0, [r6, #1]
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX) {
    6812:	281f      	cmp	r0, #31
    6814:	d803      	bhi.n	681e <process_incoming_frame+0x46>
		ed_value = ED_MAX;
	} else if (ed_value == 0) {
    6816:	2800      	cmp	r0, #0
    6818:	d102      	bne.n	6820 <process_incoming_frame+0x48>
		ed_value = 1;
    681a:	3001      	adds	r0, #1
    681c:	e000      	b.n	6820 <process_incoming_frame+0x48>
		ed_value = ED_MAX;
    681e:	201f      	movs	r0, #31
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    6820:	099b      	lsrs	r3, r3, #6
    6822:	4358      	muls	r0, r3
    6824:	0203      	lsls	r3, r0, #8
    6826:	1a18      	subs	r0, r3, r0
    6828:	215d      	movs	r1, #93	; 0x5d
    682a:	4b0a      	ldr	r3, [pc, #40]	; (6854 <process_incoming_frame+0x7c>)
    682c:	4798      	blx	r3
			(ED_MAX * LQI_MAX);

	if (link_quality > 255) {
    682e:	b283      	uxth	r3, r0
    6830:	2bff      	cmp	r3, #255	; 0xff
    6832:	d80b      	bhi.n	684c <process_incoming_frame+0x74>
	*frame_ptr = lqi;
    6834:	7030      	strb	r0, [r6, #0]
	receive_frame->buffer_header = buf_ptr;
    6836:	7065      	strb	r5, [r4, #1]
    6838:	0a2a      	lsrs	r2, r5, #8
    683a:	70a2      	strb	r2, [r4, #2]
    683c:	0c2a      	lsrs	r2, r5, #16
    683e:	70e2      	strb	r2, [r4, #3]
    6840:	0e2d      	lsrs	r5, r5, #24
    6842:	7125      	strb	r5, [r4, #4]
	tal_rx_frame_cb(receive_frame);
    6844:	0020      	movs	r0, r4
    6846:	4b04      	ldr	r3, [pc, #16]	; (6858 <process_incoming_frame+0x80>)
    6848:	4798      	blx	r3
} /* process_incoming_frame() */
    684a:	bd70      	pop	{r4, r5, r6, pc}
	if (link_quality > 255) {
    684c:	20ff      	movs	r0, #255	; 0xff
    684e:	e7f1      	b.n	6834 <process_incoming_frame+0x5c>
    6850:	20000be4 	.word	0x20000be4
    6854:	00007bad 	.word	0x00007bad
    6858:	0000798d 	.word	0x0000798d

0000685c <tal_rx_enable>:
 *         TRX_OFF if receiver has been switched off, or
 *         RX_ON otherwise.
 *
 */
uint8_t tal_rx_enable(uint8_t state)
{
    685c:	b510      	push	{r4, lr}
    685e:	0004      	movs	r4, r0
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    6860:	4b0e      	ldr	r3, [pc, #56]	; (689c <tal_rx_enable+0x40>)
    6862:	781b      	ldrb	r3, [r3, #0]
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    6864:	2086      	movs	r0, #134	; 0x86
	if (TAL_IDLE != tal_state) {
    6866:	2b00      	cmp	r3, #0
    6868:	d109      	bne.n	687e <tal_rx_enable+0x22>
#endif
	}

	if (state == PHY_TRX_OFF) {
    686a:	2c08      	cmp	r4, #8
    686c:	d008      	beq.n	6880 <tal_rx_enable+0x24>
		return TRX_OFF;
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    686e:	4b0c      	ldr	r3, [pc, #48]	; (68a0 <tal_rx_enable+0x44>)
    6870:	681b      	ldr	r3, [r3, #0]
    6872:	2b00      	cmp	r3, #0
    6874:	d00c      	beq.n	6890 <tal_rx_enable+0x34>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    6876:	2016      	movs	r0, #22
    6878:	4b0a      	ldr	r3, [pc, #40]	; (68a4 <tal_rx_enable+0x48>)
    687a:	4798      	blx	r3
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    687c:	2006      	movs	r0, #6
	}
}
    687e:	bd10      	pop	{r4, pc}
		set_trx_state(CMD_TRX_OFF);
    6880:	387e      	subs	r0, #126	; 0x7e
    6882:	4b08      	ldr	r3, [pc, #32]	; (68a4 <tal_rx_enable+0x48>)
    6884:	4798      	blx	r3
		tal_rx_on_required = false;
    6886:	2200      	movs	r2, #0
    6888:	4b07      	ldr	r3, [pc, #28]	; (68a8 <tal_rx_enable+0x4c>)
    688a:	701a      	strb	r2, [r3, #0]
		return TRX_OFF;
    688c:	0020      	movs	r0, r4
    688e:	e7f6      	b.n	687e <tal_rx_enable+0x22>
			tal_rx_on_required = true;
    6890:	2201      	movs	r2, #1
    6892:	4b05      	ldr	r3, [pc, #20]	; (68a8 <tal_rx_enable+0x4c>)
    6894:	701a      	strb	r2, [r3, #0]
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    6896:	2006      	movs	r0, #6
    6898:	e7f1      	b.n	687e <tal_rx_enable+0x22>
    689a:	46c0      	nop			; (mov r8, r8)
    689c:	20000bed 	.word	0x20000bed
    68a0:	200003a8 	.word	0x200003a8
    68a4:	00005d05 	.word	0x00005d05
    68a8:	20000bb0 	.word	0x20000bb0

000068ac <tx_done_handling>:
 * \brief Implements the handling of the transmission end.
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
    68ac:	b510      	push	{r4, lr}
	tal_state = TAL_IDLE;
    68ae:	2200      	movs	r2, #0
    68b0:	4b0c      	ldr	r3, [pc, #48]	; (68e4 <tx_done_handling+0x38>)
    68b2:	701a      	strb	r2, [r3, #0]
#endif  /* #if (DISABLE_TSTAMP_IRQ == 0) */
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    68b4:	4b0c      	ldr	r3, [pc, #48]	; (68e8 <tx_done_handling+0x3c>)
    68b6:	781a      	ldrb	r2, [r3, #0]
    68b8:	2a07      	cmp	r2, #7
    68ba:	d80b      	bhi.n	68d4 <tx_done_handling+0x28>
    68bc:	0093      	lsls	r3, r2, #2
    68be:	4a0b      	ldr	r2, [pc, #44]	; (68ec <tx_done_handling+0x40>)
    68c0:	58d3      	ldr	r3, [r2, r3]
    68c2:	469f      	mov	pc, r3
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    68c4:	2087      	movs	r0, #135	; 0x87
    68c6:	e008      	b.n	68da <tx_done_handling+0x2e>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    68c8:	20e1      	movs	r0, #225	; 0xe1
		break;
    68ca:	e006      	b.n	68da <tx_done_handling+0x2e>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    68cc:	20e9      	movs	r0, #233	; 0xe9
		break;
    68ce:	e004      	b.n	68da <tx_done_handling+0x2e>

	case TRAC_INVALID:
		status = FAILURE;
    68d0:	2085      	movs	r0, #133	; 0x85
		break;
    68d2:	e002      	b.n	68da <tx_done_handling+0x2e>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    68d4:	2085      	movs	r0, #133	; 0x85
		break;
    68d6:	e000      	b.n	68da <tx_done_handling+0x2e>
		status = MAC_SUCCESS;
    68d8:	2000      	movs	r0, #0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    68da:	4b05      	ldr	r3, [pc, #20]	; (68f0 <tx_done_handling+0x44>)
    68dc:	6819      	ldr	r1, [r3, #0]
    68de:	4b05      	ldr	r3, [pc, #20]	; (68f4 <tx_done_handling+0x48>)
    68e0:	4798      	blx	r3
#endif
} /* tx_done_handling() */
    68e2:	bd10      	pop	{r4, pc}
    68e4:	20000bed 	.word	0x20000bed
    68e8:	200003ae 	.word	0x200003ae
    68ec:	0000a04c 	.word	0x0000a04c
    68f0:	20000bc0 	.word	0x20000bc0
    68f4:	00007981 	.word	0x00007981

000068f8 <handle_tx_end_irq>:
 * \brief Handles interrupts issued due to end of transmission
 *
 * \param underrun_occured  true if under-run has occurred
 */
void handle_tx_end_irq(bool underrun_occured)
{
    68f8:	b510      	push	{r4, lr}
		}
#endif
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

		/* Read trac status before enabling RX_AACK_ON. */
		if (underrun_occured) {
    68fa:	2800      	cmp	r0, #0
    68fc:	d019      	beq.n	6932 <handle_tx_end_irq+0x3a>
			trx_trac_status = TRAC_INVALID;
    68fe:	2207      	movs	r2, #7
    6900:	4b1f      	ldr	r3, [pc, #124]	; (6980 <handle_tx_end_irq+0x88>)
    6902:	701a      	strb	r2, [r3, #0]
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			if (tal_sw_retry_no_csma_ca && tal_sw_retry_count &&
    6904:	4b1f      	ldr	r3, [pc, #124]	; (6984 <handle_tx_end_irq+0x8c>)
    6906:	781b      	ldrb	r3, [r3, #0]
    6908:	2b00      	cmp	r3, #0
    690a:	d007      	beq.n	691c <handle_tx_end_irq+0x24>
    690c:	4b1e      	ldr	r3, [pc, #120]	; (6988 <handle_tx_end_irq+0x90>)
    690e:	781b      	ldrb	r3, [r3, #0]
    6910:	2b00      	cmp	r3, #0
    6912:	d003      	beq.n	691c <handle_tx_end_irq+0x24>
					TRAC_NO_ACK == trx_trac_status) {
    6914:	4b1a      	ldr	r3, [pc, #104]	; (6980 <handle_tx_end_irq+0x88>)
			if (tal_sw_retry_no_csma_ca && tal_sw_retry_count &&
    6916:	781b      	ldrb	r3, [r3, #0]
    6918:	2b05      	cmp	r3, #5
    691a:	d012      	beq.n	6942 <handle_tx_end_irq+0x4a>
				TRX_SLP_TR_LOW();
				if (--tal_sw_retry_count == 0) {
					tal_sw_retry_no_csma_ca = false;
				}
			} else {
				tal_state = TAL_TX_DONE; /* Further handling is
    691c:	2202      	movs	r2, #2
    691e:	4b1b      	ldr	r3, [pc, #108]	; (698c <handle_tx_end_irq+0x94>)
    6920:	701a      	strb	r2, [r3, #0]

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    6922:	4b1b      	ldr	r3, [pc, #108]	; (6990 <handle_tx_end_irq+0x98>)
    6924:	681b      	ldr	r3, [r3, #0]
    6926:	2b00      	cmp	r3, #0
    6928:	d022      	beq.n	6970 <handle_tx_end_irq+0x78>
		set_trx_state(CMD_PLL_ON);
		tal_rx_on_required = true;
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    692a:	2016      	movs	r0, #22
    692c:	4b19      	ldr	r3, [pc, #100]	; (6994 <handle_tx_end_irq+0x9c>)
    692e:	4798      	blx	r3
	}
}
    6930:	bd10      	pop	{r4, pc}
			trx_trac_status = /*(trx_trac_status_t)*/ trx_bit_read(
    6932:	2205      	movs	r2, #5
    6934:	21e0      	movs	r1, #224	; 0xe0
    6936:	2002      	movs	r0, #2
    6938:	4b17      	ldr	r3, [pc, #92]	; (6998 <handle_tx_end_irq+0xa0>)
    693a:	4798      	blx	r3
    693c:	4b10      	ldr	r3, [pc, #64]	; (6980 <handle_tx_end_irq+0x88>)
    693e:	7018      	strb	r0, [r3, #0]
    6940:	e7e0      	b.n	6904 <handle_tx_end_irq+0xc>
					trx_status = set_trx_state(
    6942:	4c14      	ldr	r4, [pc, #80]	; (6994 <handle_tx_end_irq+0x9c>)
    6944:	2019      	movs	r0, #25
    6946:	47a0      	blx	r4
				} while (trx_status != TX_ARET_ON);
    6948:	2819      	cmp	r0, #25
    694a:	d1fb      	bne.n	6944 <handle_tx_end_irq+0x4c>
    694c:	4b13      	ldr	r3, [pc, #76]	; (699c <handle_tx_end_irq+0xa4>)
    694e:	2280      	movs	r2, #128	; 0x80
    6950:	0352      	lsls	r2, r2, #13
    6952:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    6954:	46c0      	nop			; (mov r8, r8)
    6956:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    6958:	615a      	str	r2, [r3, #20]
				if (--tal_sw_retry_count == 0) {
    695a:	4a0b      	ldr	r2, [pc, #44]	; (6988 <handle_tx_end_irq+0x90>)
    695c:	7813      	ldrb	r3, [r2, #0]
    695e:	3b01      	subs	r3, #1
    6960:	b2db      	uxtb	r3, r3
    6962:	7013      	strb	r3, [r2, #0]
    6964:	2b00      	cmp	r3, #0
    6966:	d1dc      	bne.n	6922 <handle_tx_end_irq+0x2a>
					tal_sw_retry_no_csma_ca = false;
    6968:	2200      	movs	r2, #0
    696a:	4b06      	ldr	r3, [pc, #24]	; (6984 <handle_tx_end_irq+0x8c>)
    696c:	701a      	strb	r2, [r3, #0]
    696e:	e7d8      	b.n	6922 <handle_tx_end_irq+0x2a>
		set_trx_state(CMD_PLL_ON);
    6970:	2009      	movs	r0, #9
    6972:	4b08      	ldr	r3, [pc, #32]	; (6994 <handle_tx_end_irq+0x9c>)
    6974:	4798      	blx	r3
		tal_rx_on_required = true;
    6976:	2201      	movs	r2, #1
    6978:	4b09      	ldr	r3, [pc, #36]	; (69a0 <handle_tx_end_irq+0xa8>)
    697a:	701a      	strb	r2, [r3, #0]
    697c:	e7d8      	b.n	6930 <handle_tx_end_irq+0x38>
    697e:	46c0      	nop			; (mov r8, r8)
    6980:	200003ae 	.word	0x200003ae
    6984:	200003ad 	.word	0x200003ad
    6988:	200003ac 	.word	0x200003ac
    698c:	20000bed 	.word	0x20000bed
    6990:	200003a8 	.word	0x200003a8
    6994:	00005d05 	.word	0x00005d05
    6998:	00006e29 	.word	0x00006e29
    699c:	41004400 	.word	0x41004400
    69a0:	20000bb0 	.word	0x20000bb0

000069a4 <tfa_pib_set>:
 * \return MAC_UNSUPPORTED_ATTRIBUTE if the TFA info base attribute is not found
 *         TAL_BUSY if the TAL is not in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 */
retval_t tfa_pib_set(tfa_pib_t tfa_pib_attribute, void *value)
{
    69a4:	b510      	push	{r4, lr}
	switch (tfa_pib_attribute) {
    69a6:	2800      	cmp	r0, #0
    69a8:	d001      	beq.n	69ae <tfa_pib_set+0xa>
	}
	break;

	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
    69aa:	20f4      	movs	r0, #244	; 0xf4
	}

	return MAC_SUCCESS;
}
    69ac:	bd10      	pop	{r4, pc}
		tfa_pib_rx_sens = *((int8_t *)value);
    69ae:	2000      	movs	r0, #0
    69b0:	5608      	ldrsb	r0, [r1, r0]
		if (tfa_pib_rx_sens > -49) {
    69b2:	0003      	movs	r3, r0
    69b4:	3330      	adds	r3, #48	; 0x30
    69b6:	db0a      	blt.n	69ce <tfa_pib_set+0x2a>
			tfa_pib_rx_sens = -49;
    69b8:	22cf      	movs	r2, #207	; 0xcf
    69ba:	4b0d      	ldr	r3, [pc, #52]	; (69f0 <tfa_pib_set+0x4c>)
    69bc:	701a      	strb	r2, [r3, #0]
			reg_val = 0xF;
    69be:	230f      	movs	r3, #15
		trx_bit_write(SR_RX_PDT_LEVEL, reg_val);
    69c0:	2200      	movs	r2, #0
    69c2:	210f      	movs	r1, #15
    69c4:	2015      	movs	r0, #21
    69c6:	4c0b      	ldr	r4, [pc, #44]	; (69f4 <tfa_pib_set+0x50>)
    69c8:	47a0      	blx	r4
	return MAC_SUCCESS;
    69ca:	2000      	movs	r0, #0
    69cc:	e7ee      	b.n	69ac <tfa_pib_set+0x8>
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
    69ce:	0003      	movs	r3, r0
    69d0:	335a      	adds	r3, #90	; 0x5a
    69d2:	da04      	bge.n	69de <tfa_pib_set+0x3a>
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
    69d4:	22a5      	movs	r2, #165	; 0xa5
    69d6:	4b06      	ldr	r3, [pc, #24]	; (69f0 <tfa_pib_set+0x4c>)
    69d8:	701a      	strb	r2, [r3, #0]
			reg_val = 0x0;
    69da:	2300      	movs	r3, #0
    69dc:	e7f0      	b.n	69c0 <tfa_pib_set+0x1c>
		tfa_pib_rx_sens = *((int8_t *)value);
    69de:	4b04      	ldr	r3, [pc, #16]	; (69f0 <tfa_pib_set+0x4c>)
    69e0:	7018      	strb	r0, [r3, #0]
				= ((tfa_pib_rx_sens -
    69e2:	305b      	adds	r0, #91	; 0x5b
					(RSSI_BASE_VAL_DBM)) / 3) + 1;
    69e4:	2103      	movs	r1, #3
    69e6:	4b04      	ldr	r3, [pc, #16]	; (69f8 <tfa_pib_set+0x54>)
    69e8:	4798      	blx	r3
				= ((tfa_pib_rx_sens -
    69ea:	3001      	adds	r0, #1
    69ec:	b2c3      	uxtb	r3, r0
    69ee:	e7e7      	b.n	69c0 <tfa_pib_set+0x1c>
    69f0:	200003af 	.word	0x200003af
    69f4:	00006e41 	.word	0x00006e41
    69f8:	00007bad 	.word	0x00007bad

000069fc <tfa_init>:
 *
 * \return MAC_SUCCESS if everything went correct;
 *         FAILURE otherwise
 */
retval_t tfa_init(void)
{
    69fc:	b510      	push	{r4, lr}
 * to their default values.
 * \ingroup group_tfa
 */
static void init_tfa_pib(void)
{
	tfa_pib_rx_sens = TFA_PIB_RX_SENS_DEF;
    69fe:	4904      	ldr	r1, [pc, #16]	; (6a10 <tfa_init+0x14>)
    6a00:	23a5      	movs	r3, #165	; 0xa5
    6a02:	700b      	strb	r3, [r1, #0]
 * It is assumed that the radio does not sleep.
 * \ingroup group_tfa
 */
static void write_all_tfa_pibs_to_trx(void)
{
	tfa_pib_set(TFA_PIB_RX_SENS, (void *)&tfa_pib_rx_sens);
    6a04:	2000      	movs	r0, #0
    6a06:	4b03      	ldr	r3, [pc, #12]	; (6a14 <tfa_init+0x18>)
    6a08:	4798      	blx	r3
}
    6a0a:	2000      	movs	r0, #0
    6a0c:	bd10      	pop	{r4, pc}
    6a0e:	46c0      	nop			; (mov r8, r8)
    6a10:	200003af 	.word	0x200003af
    6a14:	000069a5 	.word	0x000069a5

00006a18 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    6a18:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    6a1a:	4802      	ldr	r0, [pc, #8]	; (6a24 <tmr_read_count+0xc>)
    6a1c:	4b02      	ldr	r3, [pc, #8]	; (6a28 <tmr_read_count+0x10>)
    6a1e:	4798      	blx	r3
    6a20:	b280      	uxth	r0, r0
}
    6a22:	bd10      	pop	{r4, pc}
    6a24:	20000c24 	.word	0x20000c24
    6a28:	0000559d 	.word	0x0000559d

00006a2c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    6a2c:	4b03      	ldr	r3, [pc, #12]	; (6a3c <tmr_disable_cc_interrupt+0x10>)
    6a2e:	2110      	movs	r1, #16
    6a30:	681a      	ldr	r2, [r3, #0]
    6a32:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    6a34:	7e5a      	ldrb	r2, [r3, #25]
    6a36:	438a      	bics	r2, r1
    6a38:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    6a3a:	4770      	bx	lr
    6a3c:	20000c24 	.word	0x20000c24

00006a40 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    6a40:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    6a42:	4c0a      	ldr	r4, [pc, #40]	; (6a6c <tmr_enable_cc_interrupt+0x2c>)
    6a44:	6820      	ldr	r0, [r4, #0]
    6a46:	4b0a      	ldr	r3, [pc, #40]	; (6a70 <tmr_enable_cc_interrupt+0x30>)
    6a48:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    6a4a:	4b0a      	ldr	r3, [pc, #40]	; (6a74 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6a4c:	5c1b      	ldrb	r3, [r3, r0]
    6a4e:	221f      	movs	r2, #31
    6a50:	401a      	ands	r2, r3
    6a52:	2301      	movs	r3, #1
    6a54:	4093      	lsls	r3, r2
    6a56:	4a08      	ldr	r2, [pc, #32]	; (6a78 <tmr_enable_cc_interrupt+0x38>)
    6a58:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    6a5a:	7e63      	ldrb	r3, [r4, #25]
    6a5c:	2210      	movs	r2, #16
    6a5e:	4313      	orrs	r3, r2
    6a60:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    6a62:	6823      	ldr	r3, [r4, #0]
    6a64:	2210      	movs	r2, #16
    6a66:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    6a68:	bd10      	pop	{r4, pc}
    6a6a:	46c0      	nop			; (mov r8, r8)
    6a6c:	20000c24 	.word	0x20000c24
    6a70:	00005329 	.word	0x00005329
    6a74:	0000a06c 	.word	0x0000a06c
    6a78:	e000e100 	.word	0xe000e100

00006a7c <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    6a7c:	b510      	push	{r4, lr}
    6a7e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    6a80:	2100      	movs	r1, #0
    6a82:	4802      	ldr	r0, [pc, #8]	; (6a8c <tmr_write_cmpreg+0x10>)
    6a84:	4b02      	ldr	r3, [pc, #8]	; (6a90 <tmr_write_cmpreg+0x14>)
    6a86:	4798      	blx	r3
			(uint32_t)compare_value);
}
    6a88:	bd10      	pop	{r4, pc}
    6a8a:	46c0      	nop			; (mov r8, r8)
    6a8c:	20000c24 	.word	0x20000c24
    6a90:	000055c9 	.word	0x000055c9

00006a94 <save_cpu_interrupt>:

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    6a94:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6a96:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    6a9a:	425a      	negs	r2, r3
    6a9c:	4153      	adcs	r3, r2
    6a9e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    6aa0:	b672      	cpsid	i
  __ASM volatile ("dmb");
    6aa2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6aa6:	2200      	movs	r2, #0
    6aa8:	4b02      	ldr	r3, [pc, #8]	; (6ab4 <save_cpu_interrupt+0x20>)
    6aaa:	701a      	strb	r2, [r3, #0]
	return flags;
    6aac:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    6aae:	b2c0      	uxtb	r0, r0
}
    6ab0:	b002      	add	sp, #8
    6ab2:	4770      	bx	lr
    6ab4:	2000000c 	.word	0x2000000c

00006ab8 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    6ab8:	2800      	cmp	r0, #0
    6aba:	d005      	beq.n	6ac8 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    6abc:	2201      	movs	r2, #1
    6abe:	4b03      	ldr	r3, [pc, #12]	; (6acc <restore_cpu_interrupt+0x14>)
    6ac0:	701a      	strb	r2, [r3, #0]
    6ac2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6ac6:	b662      	cpsie	i
 *  \param  saved interrupt status
 */
void restore_cpu_interrupt(uint8_t flags)
{
	cpu_irq_restore((uint32_t)flags);
}
    6ac8:	4770      	bx	lr
    6aca:	46c0      	nop			; (mov r8, r8)
    6acc:	2000000c 	.word	0x2000000c

00006ad0 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    6ad0:	b510      	push	{r4, lr}
    6ad2:	2201      	movs	r2, #1
    6ad4:	4b03      	ldr	r3, [pc, #12]	; (6ae4 <AT86RFX_ISR+0x14>)
    6ad6:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    6ad8:	4b03      	ldr	r3, [pc, #12]	; (6ae8 <AT86RFX_ISR+0x18>)
    6ada:	681b      	ldr	r3, [r3, #0]
    6adc:	2b00      	cmp	r3, #0
    6ade:	d000      	beq.n	6ae2 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    6ae0:	4798      	blx	r3
	}
}
    6ae2:	bd10      	pop	{r4, pc}
    6ae4:	40001800 	.word	0x40001800
    6ae8:	200003b0 	.word	0x200003b0

00006aec <trx_spi_init>:

void trx_spi_init(void)
{
    6aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aee:	b085      	sub	sp, #20
	config->address_enabled = false;
    6af0:	4a38      	ldr	r2, [pc, #224]	; (6bd4 <trx_spi_init+0xe8>)
    6af2:	2300      	movs	r3, #0
    6af4:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    6af6:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
//#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    6af8:	213f      	movs	r1, #63	; 0x3f
    6afa:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    6afc:	4c36      	ldr	r4, [pc, #216]	; (6bd8 <trx_spi_init+0xec>)
    6afe:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    6b00:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    6b02:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    6b04:	2201      	movs	r2, #1
    6b06:	4669      	mov	r1, sp
    6b08:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    6b0a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    6b0c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    6b0e:	203f      	movs	r0, #63	; 0x3f
    6b10:	4b32      	ldr	r3, [pc, #200]	; (6bdc <trx_spi_init+0xf0>)
    6b12:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    6b14:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    6b16:	09d9      	lsrs	r1, r3, #7
		return NULL;
    6b18:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    6b1a:	2900      	cmp	r1, #0
    6b1c:	d104      	bne.n	6b28 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    6b1e:	095a      	lsrs	r2, r3, #5
    6b20:	01d2      	lsls	r2, r2, #7
    6b22:	492f      	ldr	r1, [pc, #188]	; (6be0 <trx_spi_init+0xf4>)
    6b24:	468c      	mov	ip, r1
    6b26:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6b28:	261f      	movs	r6, #31
    6b2a:	4033      	ands	r3, r6
    6b2c:	2501      	movs	r5, #1
    6b2e:	0029      	movs	r1, r5
    6b30:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    6b32:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    6b34:	4c2b      	ldr	r4, [pc, #172]	; (6be4 <trx_spi_init+0xf8>)
    6b36:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6b38:	2300      	movs	r3, #0
    6b3a:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6b3c:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6b3e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    6b40:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    6b42:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6b44:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    6b46:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6b48:	2224      	movs	r2, #36	; 0x24
    6b4a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6b4c:	0020      	movs	r0, r4
    6b4e:	3018      	adds	r0, #24
    6b50:	3a18      	subs	r2, #24
    6b52:	2100      	movs	r1, #0
    6b54:	4b24      	ldr	r3, [pc, #144]	; (6be8 <trx_spi_init+0xfc>)
    6b56:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    6b58:	2380      	movs	r3, #128	; 0x80
    6b5a:	025b      	lsls	r3, r3, #9
    6b5c:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    6b5e:	4b23      	ldr	r3, [pc, #140]	; (6bec <trx_spi_init+0x100>)
    6b60:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    6b62:	4b23      	ldr	r3, [pc, #140]	; (6bf0 <trx_spi_init+0x104>)
    6b64:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    6b66:	2301      	movs	r3, #1
    6b68:	425b      	negs	r3, r3
    6b6a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    6b6c:	4b21      	ldr	r3, [pc, #132]	; (6bf4 <trx_spi_init+0x108>)
    6b6e:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    6b70:	4b21      	ldr	r3, [pc, #132]	; (6bf8 <trx_spi_init+0x10c>)
    6b72:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    6b74:	4f21      	ldr	r7, [pc, #132]	; (6bfc <trx_spi_init+0x110>)
    6b76:	0022      	movs	r2, r4
    6b78:	4921      	ldr	r1, [pc, #132]	; (6c00 <trx_spi_init+0x114>)
    6b7a:	0038      	movs	r0, r7
    6b7c:	4b21      	ldr	r3, [pc, #132]	; (6c04 <trx_spi_init+0x118>)
    6b7e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6b80:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6b82:	0020      	movs	r0, r4
    6b84:	4b20      	ldr	r3, [pc, #128]	; (6c08 <trx_spi_init+0x11c>)
    6b86:	4798      	blx	r3
    6b88:	4006      	ands	r6, r0
    6b8a:	40b5      	lsls	r5, r6
    6b8c:	4b1f      	ldr	r3, [pc, #124]	; (6c0c <trx_spi_init+0x120>)
    6b8e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6b90:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    6b92:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    6b94:	2b00      	cmp	r3, #0
    6b96:	d1fc      	bne.n	6b92 <trx_spi_init+0xa6>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6b98:	6823      	ldr	r3, [r4, #0]
    6b9a:	2502      	movs	r5, #2
    6b9c:	432b      	orrs	r3, r5
    6b9e:	6023      	str	r3, [r4, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    6ba0:	ac01      	add	r4, sp, #4
    6ba2:	0020      	movs	r0, r4
    6ba4:	4b1a      	ldr	r3, [pc, #104]	; (6c10 <trx_spi_init+0x124>)
    6ba6:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    6ba8:	2320      	movs	r3, #32
    6baa:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    6bac:	2380      	movs	r3, #128	; 0x80
    6bae:	039b      	lsls	r3, r3, #14
    6bb0:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull = EXTINT_PULL_DOWN;
    6bb2:	7225      	strb	r5, [r4, #8]
//	#if (SAML21 || SAMR30)
//	eint_chan_conf.enable_async_edge_detection = false;
//	#else
	eint_chan_conf.wake_if_sleeping    = true;
    6bb4:	2301      	movs	r3, #1
    6bb6:	7263      	strb	r3, [r4, #9]
//	#endif
	eint_chan_conf.filter_input_signal = false;
    6bb8:	2200      	movs	r2, #0
    6bba:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    6bbc:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    6bbe:	0021      	movs	r1, r4
    6bc0:	2000      	movs	r0, #0
    6bc2:	4b14      	ldr	r3, [pc, #80]	; (6c14 <trx_spi_init+0x128>)
    6bc4:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    6bc6:	2200      	movs	r2, #0
    6bc8:	2100      	movs	r1, #0
    6bca:	4813      	ldr	r0, [pc, #76]	; (6c18 <trx_spi_init+0x12c>)
    6bcc:	4b13      	ldr	r3, [pc, #76]	; (6c1c <trx_spi_init+0x130>)
    6bce:	4798      	blx	r3
//	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
//			AT86RFX_SPI_BAUDRATE, 0);
//	spi_enable(AT86RFX_SPI);
//	AT86RFX_INTC_INIT();
//#endif
}
    6bd0:	b005      	add	sp, #20
    6bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bd4:	20000c44 	.word	0x20000c44
    6bd8:	20000c48 	.word	0x20000c48
    6bdc:	000041dd 	.word	0x000041dd
    6be0:	41004400 	.word	0x41004400
    6be4:	20000c4c 	.word	0x20000c4c
    6be8:	00007e33 	.word	0x00007e33
    6bec:	004c4b40 	.word	0x004c4b40
    6bf0:	00530005 	.word	0x00530005
    6bf4:	003e0005 	.word	0x003e0005
    6bf8:	00520005 	.word	0x00520005
    6bfc:	20000c84 	.word	0x20000c84
    6c00:	42001800 	.word	0x42001800
    6c04:	00004645 	.word	0x00004645
    6c08:	000045b5 	.word	0x000045b5
    6c0c:	e000e100 	.word	0xe000e100
    6c10:	00004151 	.word	0x00004151
    6c14:	00004165 	.word	0x00004165
    6c18:	00006ad1 	.word	0x00006ad1
    6c1c:	0000400d 	.word	0x0000400d

00006c20 <trx_reg_read>:
	delay_us(10);
	RST_HIGH();
}

uint8_t trx_reg_read(uint8_t addr)
{
    6c20:	b570      	push	{r4, r5, r6, lr}
    6c22:	b082      	sub	sp, #8
    6c24:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6c26:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    6c2a:	425a      	negs	r2, r3
    6c2c:	4153      	adcs	r3, r2
    6c2e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    6c30:	b672      	cpsid	i
    6c32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6c36:	2200      	movs	r2, #0
    6c38:	4b33      	ldr	r3, [pc, #204]	; (6d08 <trx_reg_read+0xe8>)
    6c3a:	701a      	strb	r2, [r3, #0]
	return flags;
    6c3c:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    6c3e:	4e33      	ldr	r6, [pc, #204]	; (6d0c <trx_reg_read+0xec>)
    6c40:	3201      	adds	r2, #1
    6c42:	4933      	ldr	r1, [pc, #204]	; (6d10 <trx_reg_read+0xf0>)
    6c44:	0030      	movs	r0, r6
    6c46:	4b33      	ldr	r3, [pc, #204]	; (6d14 <trx_reg_read+0xf4>)
    6c48:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c4a:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    6c4c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6c4e:	7e1a      	ldrb	r2, [r3, #24]
    6c50:	420a      	tst	r2, r1
    6c52:	d0fc      	beq.n	6c4e <trx_reg_read+0x2e>
    6c54:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    6c56:	07d2      	lsls	r2, r2, #31
    6c58:	d502      	bpl.n	6c60 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6c5a:	2280      	movs	r2, #128	; 0x80
    6c5c:	4315      	orrs	r5, r2
    6c5e:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    6c60:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6c62:	7e1a      	ldrb	r2, [r3, #24]
    6c64:	420a      	tst	r2, r1
    6c66:	d0fc      	beq.n	6c62 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    6c68:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6c6a:	7e1a      	ldrb	r2, [r3, #24]
    6c6c:	420a      	tst	r2, r1
    6c6e:	d0fc      	beq.n	6c6a <trx_reg_read+0x4a>
    6c70:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    6c72:	0752      	lsls	r2, r2, #29
    6c74:	d50c      	bpl.n	6c90 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6c76:	8b5a      	ldrh	r2, [r3, #26]
    6c78:	0752      	lsls	r2, r2, #29
    6c7a:	d501      	bpl.n	6c80 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6c7c:	2204      	movs	r2, #4
    6c7e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6c80:	4a22      	ldr	r2, [pc, #136]	; (6d0c <trx_reg_read+0xec>)
    6c82:	7992      	ldrb	r2, [r2, #6]
    6c84:	2a01      	cmp	r2, #1
    6c86:	d034      	beq.n	6cf2 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6c8a:	b2d2      	uxtb	r2, r2
    6c8c:	4922      	ldr	r1, [pc, #136]	; (6d18 <trx_reg_read+0xf8>)
    6c8e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    6c90:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6c92:	7e1a      	ldrb	r2, [r3, #24]
    6c94:	420a      	tst	r2, r1
    6c96:	d0fc      	beq.n	6c92 <trx_reg_read+0x72>
    6c98:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    6c9a:	07d2      	lsls	r2, r2, #31
    6c9c:	d501      	bpl.n	6ca2 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6c9e:	2200      	movs	r2, #0
    6ca0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    6ca2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6ca4:	7e1a      	ldrb	r2, [r3, #24]
    6ca6:	420a      	tst	r2, r1
    6ca8:	d0fc      	beq.n	6ca4 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    6caa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6cac:	7e1a      	ldrb	r2, [r3, #24]
    6cae:	420a      	tst	r2, r1
    6cb0:	d0fc      	beq.n	6cac <trx_reg_read+0x8c>
    6cb2:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    6cb4:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    6cb6:	0752      	lsls	r2, r2, #29
    6cb8:	d50a      	bpl.n	6cd0 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6cba:	8b5a      	ldrh	r2, [r3, #26]
    6cbc:	0752      	lsls	r2, r2, #29
    6cbe:	d501      	bpl.n	6cc4 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6cc0:	2204      	movs	r2, #4
    6cc2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6cc4:	4a11      	ldr	r2, [pc, #68]	; (6d0c <trx_reg_read+0xec>)
    6cc6:	7992      	ldrb	r2, [r2, #6]
    6cc8:	2a01      	cmp	r2, #1
    6cca:	d018      	beq.n	6cfe <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6ccc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    6cce:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    6cd0:	2200      	movs	r2, #0
    6cd2:	490f      	ldr	r1, [pc, #60]	; (6d10 <trx_reg_read+0xf0>)
    6cd4:	480d      	ldr	r0, [pc, #52]	; (6d0c <trx_reg_read+0xec>)
    6cd6:	4b0f      	ldr	r3, [pc, #60]	; (6d14 <trx_reg_read+0xf4>)
    6cd8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    6cda:	23ff      	movs	r3, #255	; 0xff
    6cdc:	4223      	tst	r3, r4
    6cde:	d005      	beq.n	6cec <trx_reg_read+0xcc>
		cpu_irq_enable();
    6ce0:	2201      	movs	r2, #1
    6ce2:	4b09      	ldr	r3, [pc, #36]	; (6d08 <trx_reg_read+0xe8>)
    6ce4:	701a      	strb	r2, [r3, #0]
    6ce6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6cea:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    6cec:	b2e8      	uxtb	r0, r5
}
    6cee:	b002      	add	sp, #8
    6cf0:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6cf4:	05d2      	lsls	r2, r2, #23
    6cf6:	0dd2      	lsrs	r2, r2, #23
    6cf8:	4907      	ldr	r1, [pc, #28]	; (6d18 <trx_reg_read+0xf8>)
    6cfa:	800a      	strh	r2, [r1, #0]
    6cfc:	e7c8      	b.n	6c90 <trx_reg_read+0x70>
    6cfe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    6d00:	05ed      	lsls	r5, r5, #23
    6d02:	0ded      	lsrs	r5, r5, #23
    6d04:	e7e4      	b.n	6cd0 <trx_reg_read+0xb0>
    6d06:	46c0      	nop			; (mov r8, r8)
    6d08:	2000000c 	.word	0x2000000c
    6d0c:	20000c84 	.word	0x20000c84
    6d10:	20000c48 	.word	0x20000c48
    6d14:	0000481d 	.word	0x0000481d
    6d18:	20000c40 	.word	0x20000c40

00006d1c <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d1e:	b083      	sub	sp, #12
    6d20:	0006      	movs	r6, r0
    6d22:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6d24:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    6d28:	425a      	negs	r2, r3
    6d2a:	4153      	adcs	r3, r2
    6d2c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    6d2e:	b672      	cpsid	i
    6d30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6d34:	2200      	movs	r2, #0
    6d36:	4b34      	ldr	r3, [pc, #208]	; (6e08 <trx_reg_write+0xec>)
    6d38:	701a      	strb	r2, [r3, #0]
	return flags;
    6d3a:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    6d3c:	4f33      	ldr	r7, [pc, #204]	; (6e0c <trx_reg_write+0xf0>)
    6d3e:	3201      	adds	r2, #1
    6d40:	4933      	ldr	r1, [pc, #204]	; (6e10 <trx_reg_write+0xf4>)
    6d42:	0038      	movs	r0, r7
    6d44:	4b33      	ldr	r3, [pc, #204]	; (6e14 <trx_reg_write+0xf8>)
    6d46:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6d48:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    6d4a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6d4c:	7e1a      	ldrb	r2, [r3, #24]
    6d4e:	420a      	tst	r2, r1
    6d50:	d0fc      	beq.n	6d4c <trx_reg_write+0x30>
    6d52:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    6d54:	07d2      	lsls	r2, r2, #31
    6d56:	d502      	bpl.n	6d5e <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6d58:	22c0      	movs	r2, #192	; 0xc0
    6d5a:	4316      	orrs	r6, r2
    6d5c:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    6d5e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6d60:	7e1a      	ldrb	r2, [r3, #24]
    6d62:	420a      	tst	r2, r1
    6d64:	d0fc      	beq.n	6d60 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    6d66:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6d68:	7e1a      	ldrb	r2, [r3, #24]
    6d6a:	420a      	tst	r2, r1
    6d6c:	d0fc      	beq.n	6d68 <trx_reg_write+0x4c>
    6d6e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    6d70:	0752      	lsls	r2, r2, #29
    6d72:	d50c      	bpl.n	6d8e <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6d74:	8b5a      	ldrh	r2, [r3, #26]
    6d76:	0752      	lsls	r2, r2, #29
    6d78:	d501      	bpl.n	6d7e <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6d7a:	2204      	movs	r2, #4
    6d7c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6d7e:	4a23      	ldr	r2, [pc, #140]	; (6e0c <trx_reg_write+0xf0>)
    6d80:	7992      	ldrb	r2, [r2, #6]
    6d82:	2a01      	cmp	r2, #1
    6d84:	d033      	beq.n	6dee <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6d88:	b2d2      	uxtb	r2, r2
    6d8a:	4923      	ldr	r1, [pc, #140]	; (6e18 <trx_reg_write+0xfc>)
    6d8c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    6d8e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6d90:	7e1a      	ldrb	r2, [r3, #24]
    6d92:	420a      	tst	r2, r1
    6d94:	d0fc      	beq.n	6d90 <trx_reg_write+0x74>
    6d96:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    6d98:	07d2      	lsls	r2, r2, #31
    6d9a:	d500      	bpl.n	6d9e <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6d9c:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    6d9e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6da0:	7e1a      	ldrb	r2, [r3, #24]
    6da2:	420a      	tst	r2, r1
    6da4:	d0fc      	beq.n	6da0 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    6da6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6da8:	7e1a      	ldrb	r2, [r3, #24]
    6daa:	420a      	tst	r2, r1
    6dac:	d0fc      	beq.n	6da8 <trx_reg_write+0x8c>
    6dae:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    6db0:	0752      	lsls	r2, r2, #29
    6db2:	d50c      	bpl.n	6dce <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6db4:	8b5a      	ldrh	r2, [r3, #26]
    6db6:	0752      	lsls	r2, r2, #29
    6db8:	d501      	bpl.n	6dbe <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6dba:	2204      	movs	r2, #4
    6dbc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6dbe:	4a13      	ldr	r2, [pc, #76]	; (6e0c <trx_reg_write+0xf0>)
    6dc0:	7992      	ldrb	r2, [r2, #6]
    6dc2:	2a01      	cmp	r2, #1
    6dc4:	d019      	beq.n	6dfa <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dc8:	b2db      	uxtb	r3, r3
    6dca:	4a13      	ldr	r2, [pc, #76]	; (6e18 <trx_reg_write+0xfc>)
    6dcc:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    6dce:	2200      	movs	r2, #0
    6dd0:	490f      	ldr	r1, [pc, #60]	; (6e10 <trx_reg_write+0xf4>)
    6dd2:	480e      	ldr	r0, [pc, #56]	; (6e0c <trx_reg_write+0xf0>)
    6dd4:	4b0f      	ldr	r3, [pc, #60]	; (6e14 <trx_reg_write+0xf8>)
    6dd6:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    6dd8:	23ff      	movs	r3, #255	; 0xff
    6dda:	422b      	tst	r3, r5
    6ddc:	d005      	beq.n	6dea <trx_reg_write+0xce>
		cpu_irq_enable();
    6dde:	2201      	movs	r2, #1
    6de0:	4b09      	ldr	r3, [pc, #36]	; (6e08 <trx_reg_write+0xec>)
    6de2:	701a      	strb	r2, [r3, #0]
    6de4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6de8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    6dea:	b003      	add	sp, #12
    6dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6df0:	05d2      	lsls	r2, r2, #23
    6df2:	0dd2      	lsrs	r2, r2, #23
    6df4:	4908      	ldr	r1, [pc, #32]	; (6e18 <trx_reg_write+0xfc>)
    6df6:	800a      	strh	r2, [r1, #0]
    6df8:	e7c9      	b.n	6d8e <trx_reg_write+0x72>
    6dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dfc:	05db      	lsls	r3, r3, #23
    6dfe:	0ddb      	lsrs	r3, r3, #23
    6e00:	4a05      	ldr	r2, [pc, #20]	; (6e18 <trx_reg_write+0xfc>)
    6e02:	8013      	strh	r3, [r2, #0]
    6e04:	e7e3      	b.n	6dce <trx_reg_write+0xb2>
    6e06:	46c0      	nop			; (mov r8, r8)
    6e08:	2000000c 	.word	0x2000000c
    6e0c:	20000c84 	.word	0x20000c84
    6e10:	20000c48 	.word	0x20000c48
    6e14:	0000481d 	.word	0x0000481d
    6e18:	20000c40 	.word	0x20000c40

00006e1c <trx_irq_init>:
	 * Set the handler function.
	 * The handler is set before enabling the interrupt to prepare for
	 * spurious
	 * interrupts, that can pop up the moment they are enabled
	 */
	irq_hdl_trx = (irq_handler_t)trx_irq_cb;
    6e1c:	4b01      	ldr	r3, [pc, #4]	; (6e24 <trx_irq_init+0x8>)
    6e1e:	6018      	str	r0, [r3, #0]
}
    6e20:	4770      	bx	lr
    6e22:	46c0      	nop			; (mov r8, r8)
    6e24:	200003b0 	.word	0x200003b0

00006e28 <trx_bit_read>:

uint8_t trx_bit_read(uint8_t addr, uint8_t mask, uint8_t pos)
{
    6e28:	b570      	push	{r4, r5, r6, lr}
    6e2a:	000c      	movs	r4, r1
    6e2c:	0015      	movs	r5, r2
	uint8_t ret;
	ret = trx_reg_read(addr);
    6e2e:	4b03      	ldr	r3, [pc, #12]	; (6e3c <trx_bit_read+0x14>)
    6e30:	4798      	blx	r3
	ret &= mask;
	ret >>= pos;
    6e32:	4004      	ands	r4, r0
    6e34:	412c      	asrs	r4, r5
	return ret;
    6e36:	b2e0      	uxtb	r0, r4
}
    6e38:	bd70      	pop	{r4, r5, r6, pc}
    6e3a:	46c0      	nop			; (mov r8, r8)
    6e3c:	00006c21 	.word	0x00006c21

00006e40 <trx_bit_write>:

void trx_bit_write(uint8_t reg_addr, uint8_t mask, uint8_t pos,
		uint8_t new_value)
{
    6e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e42:	0004      	movs	r4, r0
    6e44:	000e      	movs	r6, r1
    6e46:	0017      	movs	r7, r2
    6e48:	001d      	movs	r5, r3
	uint8_t current_reg_value;
	current_reg_value = trx_reg_read(reg_addr);
    6e4a:	4b05      	ldr	r3, [pc, #20]	; (6e60 <trx_bit_write+0x20>)
    6e4c:	4798      	blx	r3
	current_reg_value &= ~mask;
    6e4e:	43b0      	bics	r0, r6
	new_value <<= pos;
    6e50:	40bd      	lsls	r5, r7
	new_value &= mask;
    6e52:	4035      	ands	r5, r6
	new_value |= current_reg_value;
    6e54:	b2c1      	uxtb	r1, r0
	trx_reg_write(reg_addr, new_value);
    6e56:	4329      	orrs	r1, r5
    6e58:	0020      	movs	r0, r4
    6e5a:	4b02      	ldr	r3, [pc, #8]	; (6e64 <trx_bit_write+0x24>)
    6e5c:	4798      	blx	r3
}
    6e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e60:	00006c21 	.word	0x00006c21
    6e64:	00006d1d 	.word	0x00006d1d

00006e68 <trx_frame_read>:

void trx_frame_read(uint8_t *data, uint8_t length)
{
    6e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e6a:	46d6      	mov	lr, sl
    6e6c:	464f      	mov	r7, r9
    6e6e:	4646      	mov	r6, r8
    6e70:	b5c0      	push	{r6, r7, lr}
    6e72:	b082      	sub	sp, #8
    6e74:	0005      	movs	r5, r0
    6e76:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6e78:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    6e7c:	425a      	negs	r2, r3
    6e7e:	4153      	adcs	r3, r2
    6e80:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    6e82:	b672      	cpsid	i
    6e84:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6e88:	2200      	movs	r2, #0
    6e8a:	4b3e      	ldr	r3, [pc, #248]	; (6f84 <trx_frame_read+0x11c>)
    6e8c:	701a      	strb	r2, [r3, #0]
	return flags;
    6e8e:	9b01      	ldr	r3, [sp, #4]
    6e90:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    6e92:	4f3d      	ldr	r7, [pc, #244]	; (6f88 <trx_frame_read+0x120>)
    6e94:	3201      	adds	r2, #1
    6e96:	493d      	ldr	r1, [pc, #244]	; (6f8c <trx_frame_read+0x124>)
    6e98:	0038      	movs	r0, r7
    6e9a:	4b3d      	ldr	r3, [pc, #244]	; (6f90 <trx_frame_read+0x128>)
    6e9c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6e9e:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    6ea0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6ea2:	7e1a      	ldrb	r2, [r3, #24]
    6ea4:	420a      	tst	r2, r1
    6ea6:	d0fc      	beq.n	6ea2 <trx_frame_read+0x3a>
    6ea8:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    6eaa:	07d2      	lsls	r2, r2, #31
    6eac:	d501      	bpl.n	6eb2 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6eae:	2220      	movs	r2, #32
    6eb0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    6eb2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6eb4:	7e1a      	ldrb	r2, [r3, #24]
    6eb6:	420a      	tst	r2, r1
    6eb8:	d0fc      	beq.n	6eb4 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    6eba:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6ebc:	7e1a      	ldrb	r2, [r3, #24]
    6ebe:	420a      	tst	r2, r1
    6ec0:	d0fc      	beq.n	6ebc <trx_frame_read+0x54>
    6ec2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    6ec4:	0752      	lsls	r2, r2, #29
    6ec6:	d50c      	bpl.n	6ee2 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6ec8:	8b5a      	ldrh	r2, [r3, #26]
    6eca:	0752      	lsls	r2, r2, #29
    6ecc:	d501      	bpl.n	6ed2 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6ece:	2204      	movs	r2, #4
    6ed0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6ed2:	4a2d      	ldr	r2, [pc, #180]	; (6f88 <trx_frame_read+0x120>)
    6ed4:	7992      	ldrb	r2, [r2, #6]
    6ed6:	2a01      	cmp	r2, #1
    6ed8:	d013      	beq.n	6f02 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6edc:	b2db      	uxtb	r3, r3
    6ede:	4a2d      	ldr	r2, [pc, #180]	; (6f94 <trx_frame_read+0x12c>)
    6ee0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    6ee2:	1e63      	subs	r3, r4, #1
    6ee4:	b2db      	uxtb	r3, r3
    6ee6:	2c00      	cmp	r4, #0
    6ee8:	d036      	beq.n	6f58 <trx_frame_read+0xf0>
    6eea:	3301      	adds	r3, #1
    6eec:	469c      	mov	ip, r3
    6eee:	44ac      	add	ip, r5
    6ef0:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    6ef2:	4e25      	ldr	r6, [pc, #148]	; (6f88 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    6ef4:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6ef6:	2300      	movs	r3, #0
    6ef8:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    6efa:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    6efc:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6efe:	46b1      	mov	r9, r6
    6f00:	e00f      	b.n	6f22 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f04:	05db      	lsls	r3, r3, #23
    6f06:	0ddb      	lsrs	r3, r3, #23
    6f08:	4a22      	ldr	r2, [pc, #136]	; (6f94 <trx_frame_read+0x12c>)
    6f0a:	8013      	strh	r3, [r2, #0]
    6f0c:	e7e9      	b.n	6ee2 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6f0e:	464a      	mov	r2, r9
    6f10:	7992      	ldrb	r2, [r2, #6]
    6f12:	2a01      	cmp	r2, #1
    6f14:	d01c      	beq.n	6f50 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6f16:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    6f18:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    6f1a:	702f      	strb	r7, [r5, #0]
		data++;
    6f1c:	3501      	adds	r5, #1
	while (length--) {
    6f1e:	4565      	cmp	r5, ip
    6f20:	d01a      	beq.n	6f58 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6f22:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6f24:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    6f26:	4202      	tst	r2, r0
    6f28:	d0fc      	beq.n	6f24 <trx_frame_read+0xbc>
    6f2a:	7e1a      	ldrb	r2, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
    6f2c:	4202      	tst	r2, r0
    6f2e:	d001      	beq.n	6f34 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6f30:	4652      	mov	r2, sl
    6f32:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6f34:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    6f36:	4222      	tst	r2, r4
    6f38:	d0fc      	beq.n	6f34 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6f3a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    6f3c:	420a      	tst	r2, r1
    6f3e:	d0fc      	beq.n	6f3a <trx_frame_read+0xd2>
    6f40:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    6f42:	420a      	tst	r2, r1
    6f44:	d0e9      	beq.n	6f1a <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6f46:	8b5a      	ldrh	r2, [r3, #26]
    6f48:	420a      	tst	r2, r1
    6f4a:	d0e0      	beq.n	6f0e <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6f4c:	8359      	strh	r1, [r3, #26]
    6f4e:	e7de      	b.n	6f0e <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6f50:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    6f52:	05ff      	lsls	r7, r7, #23
    6f54:	0dff      	lsrs	r7, r7, #23
    6f56:	e7e0      	b.n	6f1a <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    6f58:	2200      	movs	r2, #0
    6f5a:	490c      	ldr	r1, [pc, #48]	; (6f8c <trx_frame_read+0x124>)
    6f5c:	480a      	ldr	r0, [pc, #40]	; (6f88 <trx_frame_read+0x120>)
    6f5e:	4b0c      	ldr	r3, [pc, #48]	; (6f90 <trx_frame_read+0x128>)
    6f60:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    6f62:	23ff      	movs	r3, #255	; 0xff
    6f64:	4642      	mov	r2, r8
    6f66:	4213      	tst	r3, r2
    6f68:	d005      	beq.n	6f76 <trx_frame_read+0x10e>
		cpu_irq_enable();
    6f6a:	2201      	movs	r2, #1
    6f6c:	4b05      	ldr	r3, [pc, #20]	; (6f84 <trx_frame_read+0x11c>)
    6f6e:	701a      	strb	r2, [r3, #0]
    6f70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6f74:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    6f76:	b002      	add	sp, #8
    6f78:	bc1c      	pop	{r2, r3, r4}
    6f7a:	4690      	mov	r8, r2
    6f7c:	4699      	mov	r9, r3
    6f7e:	46a2      	mov	sl, r4
    6f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f82:	46c0      	nop			; (mov r8, r8)
    6f84:	2000000c 	.word	0x2000000c
    6f88:	20000c84 	.word	0x20000c84
    6f8c:	20000c48 	.word	0x20000c48
    6f90:	0000481d 	.word	0x0000481d
    6f94:	20000c40 	.word	0x20000c40

00006f98 <tc_isr>:
struct tc_module tc_instance;
//! [module_inst]

//! [callback_funcs]
void tc_isr(struct tc_module *const module_inst)
{
    6f98:	b510      	push	{r4, lr}
	static uint16_t clock_count_timer = 0;
	
	clock_count_timer++;
    6f9a:	4a0a      	ldr	r2, [pc, #40]	; (6fc4 <tc_isr+0x2c>)
    6f9c:	8813      	ldrh	r3, [r2, #0]
    6f9e:	3301      	adds	r3, #1
    6fa0:	b29b      	uxth	r3, r3
    6fa2:	8013      	strh	r3, [r2, #0]
	
	if(clock_count_timer>=500)
    6fa4:	22f4      	movs	r2, #244	; 0xf4
    6fa6:	32ff      	adds	r2, #255	; 0xff
    6fa8:	4293      	cmp	r3, r2
    6faa:	d800      	bhi.n	6fae <tc_isr+0x16>
		// write code here
	}

//	i += 128;
//	tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, i + 1);
}
    6fac:	bd10      	pop	{r4, pc}
		PORT->Group[0].OUTTGL.bit.OUTTGL=PORT_PA19;
    6fae:	2280      	movs	r2, #128	; 0x80
    6fb0:	0312      	lsls	r2, r2, #12
    6fb2:	4b05      	ldr	r3, [pc, #20]	; (6fc8 <tc_isr+0x30>)
    6fb4:	61da      	str	r2, [r3, #28]
		clock_count_timer=0;
    6fb6:	2200      	movs	r2, #0
    6fb8:	4b02      	ldr	r3, [pc, #8]	; (6fc4 <tc_isr+0x2c>)
    6fba:	801a      	strh	r2, [r3, #0]
		printf("AAA");
    6fbc:	4803      	ldr	r0, [pc, #12]	; (6fcc <tc_isr+0x34>)
    6fbe:	4b04      	ldr	r3, [pc, #16]	; (6fd0 <tc_isr+0x38>)
    6fc0:	4798      	blx	r3
}
    6fc2:	e7f3      	b.n	6fac <tc_isr+0x14>
    6fc4:	200003c6 	.word	0x200003c6
    6fc8:	41004400 	.word	0x41004400
    6fcc:	0000a368 	.word	0x0000a368
    6fd0:	00007e45 	.word	0x00007e45

00006fd4 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    6fd4:	b510      	push	{r4, lr}
    6fd6:	b082      	sub	sp, #8
	switch(u8MsgType) 
    6fd8:	282c      	cmp	r0, #44	; 0x2c
    6fda:	d003      	beq.n	6fe4 <wifi_cb+0x10>
    6fdc:	2832      	cmp	r0, #50	; 0x32
    6fde:	d01b      	beq.n	7018 <wifi_cb+0x44>
			break;
		}

		default:break;
	}
}
    6fe0:	b002      	add	sp, #8
    6fe2:	bd10      	pop	{r4, pc}
			if(pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) 
    6fe4:	780b      	ldrb	r3, [r1, #0]
    6fe6:	2b01      	cmp	r3, #1
    6fe8:	d010      	beq.n	700c <wifi_cb+0x38>
			else if(pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) 
    6fea:	2b00      	cmp	r3, #0
    6fec:	d1f8      	bne.n	6fe0 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    6fee:	4811      	ldr	r0, [pc, #68]	; (7034 <wifi_cb+0x60>)
    6ff0:	4b11      	ldr	r3, [pc, #68]	; (7038 <wifi_cb+0x64>)
    6ff2:	4798      	blx	r3
				wifi_connected = 0;
    6ff4:	2200      	movs	r2, #0
    6ff6:	4b11      	ldr	r3, [pc, #68]	; (703c <wifi_cb+0x68>)
    6ff8:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), 
    6ffa:	23ff      	movs	r3, #255	; 0xff
    6ffc:	9300      	str	r3, [sp, #0]
    6ffe:	4b10      	ldr	r3, [pc, #64]	; (7040 <wifi_cb+0x6c>)
    7000:	3202      	adds	r2, #2
    7002:	210e      	movs	r1, #14
    7004:	480f      	ldr	r0, [pc, #60]	; (7044 <wifi_cb+0x70>)
    7006:	4c10      	ldr	r4, [pc, #64]	; (7048 <wifi_cb+0x74>)
    7008:	47a0      	blx	r4
    700a:	e7e9      	b.n	6fe0 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    700c:	480f      	ldr	r0, [pc, #60]	; (704c <wifi_cb+0x78>)
    700e:	4b0a      	ldr	r3, [pc, #40]	; (7038 <wifi_cb+0x64>)
    7010:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    7012:	4b0f      	ldr	r3, [pc, #60]	; (7050 <wifi_cb+0x7c>)
    7014:	4798      	blx	r3
    7016:	e7e3      	b.n	6fe0 <wifi_cb+0xc>
			wifi_connected = 1;
    7018:	2201      	movs	r2, #1
    701a:	4b08      	ldr	r3, [pc, #32]	; (703c <wifi_cb+0x68>)
    701c:	701a      	strb	r2, [r3, #0]
			printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    701e:	788b      	ldrb	r3, [r1, #2]
    7020:	784a      	ldrb	r2, [r1, #1]
    7022:	7808      	ldrb	r0, [r1, #0]
    7024:	78c9      	ldrb	r1, [r1, #3]
    7026:	9100      	str	r1, [sp, #0]
    7028:	0001      	movs	r1, r0
    702a:	480a      	ldr	r0, [pc, #40]	; (7054 <wifi_cb+0x80>)
    702c:	4c0a      	ldr	r4, [pc, #40]	; (7058 <wifi_cb+0x84>)
    702e:	47a0      	blx	r4
}
    7030:	e7d6      	b.n	6fe0 <wifi_cb+0xc>
    7032:	46c0      	nop			; (mov r8, r8)
    7034:	0000a3a4 	.word	0x0000a3a4
    7038:	00007f61 	.word	0x00007f61
    703c:	2000098c 	.word	0x2000098c
    7040:	0000a3dc 	.word	0x0000a3dc
    7044:	0000a3e8 	.word	0x0000a3e8
    7048:	00001479 	.word	0x00001479
    704c:	0000a36c 	.word	0x0000a36c
    7050:	00001495 	.word	0x00001495
    7054:	0000a3f8 	.word	0x0000a3f8
    7058:	00007e45 	.word	0x00007e45

0000705c <configure_tc>:
{
    705c:	b510      	push	{r4, lr}
    705e:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    7060:	aa01      	add	r2, sp, #4
    7062:	2300      	movs	r3, #0
    7064:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    7066:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    7068:	2100      	movs	r1, #0
    706a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    706c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    706e:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    7070:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    7072:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    7074:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    7076:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    7078:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    707a:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    707c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    707e:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    7080:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    7082:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    7084:	3340      	adds	r3, #64	; 0x40
    7086:	7193      	strb	r3, [r2, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 0xFFFF;
    7088:	3b41      	subs	r3, #65	; 0x41
    708a:	8553      	strh	r3, [r2, #42]	; 0x2a
	config_tc.pwm_channel[0].enabled = true;
    708c:	3302      	adds	r3, #2
    708e:	7413      	strb	r3, [r2, #16]
	config_tc.pwm_channel[0].pin_out = PWM_OUT_PIN;
    7090:	3311      	adds	r3, #17
    7092:	6153      	str	r3, [r2, #20]
	config_tc.pwm_channel[0].pin_mux = PWM_OUT_MUX;
    7094:	3b0e      	subs	r3, #14
    7096:	6193      	str	r3, [r2, #24]
	tc_init(&tc_instance, PWM_MODULE, &config_tc);
    7098:	4c07      	ldr	r4, [pc, #28]	; (70b8 <configure_tc+0x5c>)
    709a:	4908      	ldr	r1, [pc, #32]	; (70bc <configure_tc+0x60>)
    709c:	0020      	movs	r0, r4
    709e:	4b08      	ldr	r3, [pc, #32]	; (70c0 <configure_tc+0x64>)
    70a0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    70a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    70a4:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    70a6:	b25b      	sxtb	r3, r3
    70a8:	2b00      	cmp	r3, #0
    70aa:	dbfb      	blt.n	70a4 <configure_tc+0x48>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    70ac:	8813      	ldrh	r3, [r2, #0]
    70ae:	2102      	movs	r1, #2
    70b0:	430b      	orrs	r3, r1
    70b2:	8013      	strh	r3, [r2, #0]
}
    70b4:	b00e      	add	sp, #56	; 0x38
    70b6:	bd10      	pop	{r4, pc}
    70b8:	20000cd4 	.word	0x20000cd4
    70bc:	42002c00 	.word	0x42002c00
    70c0:	00005361 	.word	0x00005361

000070c4 <configure_tc_callbacks>:
{
    70c4:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance,tc_isr,TC_CALLBACK_CC_CHANNEL0);
    70c6:	4c0c      	ldr	r4, [pc, #48]	; (70f8 <configure_tc_callbacks+0x34>)
    70c8:	2202      	movs	r2, #2
    70ca:	490c      	ldr	r1, [pc, #48]	; (70fc <configure_tc_callbacks+0x38>)
    70cc:	0020      	movs	r0, r4
    70ce:	4b0c      	ldr	r3, [pc, #48]	; (7100 <configure_tc_callbacks+0x3c>)
    70d0:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    70d2:	6820      	ldr	r0, [r4, #0]
    70d4:	4b0b      	ldr	r3, [pc, #44]	; (7104 <configure_tc_callbacks+0x40>)
    70d6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    70d8:	4b0b      	ldr	r3, [pc, #44]	; (7108 <configure_tc_callbacks+0x44>)
    70da:	5c1b      	ldrb	r3, [r3, r0]
    70dc:	221f      	movs	r2, #31
    70de:	401a      	ands	r2, r3
    70e0:	2301      	movs	r3, #1
    70e2:	4093      	lsls	r3, r2
    70e4:	4a09      	ldr	r2, [pc, #36]	; (710c <configure_tc_callbacks+0x48>)
    70e6:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    70e8:	7e63      	ldrb	r3, [r4, #25]
    70ea:	2210      	movs	r2, #16
    70ec:	4313      	orrs	r3, r2
    70ee:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    70f0:	6823      	ldr	r3, [r4, #0]
    70f2:	2210      	movs	r2, #16
    70f4:	735a      	strb	r2, [r3, #13]
}
    70f6:	bd10      	pop	{r4, pc}
    70f8:	20000cd4 	.word	0x20000cd4
    70fc:	00006f99 	.word	0x00006f99
    7100:	00005261 	.word	0x00005261
    7104:	00005329 	.word	0x00005329
    7108:	0000a364 	.word	0x0000a364
    710c:	e000e100 	.word	0xe000e100

00007110 <ser_data_out>:
{
    7110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7112:	0005      	movs	r5, r0
	for(clk_count_num=0;clk_count_num<8;clk_count_num++)
    7114:	2200      	movs	r2, #0
    7116:	4b13      	ldr	r3, [pc, #76]	; (7164 <ser_data_out+0x54>)
    7118:	701a      	strb	r2, [r3, #0]
		else{SER_HIGH;delay_ms(1);}
    711a:	4e13      	ldr	r6, [pc, #76]	; (7168 <ser_data_out+0x58>)
		if((out_data&0x80)==0){SER_LOW;delay_ms(1);}
    711c:	4f13      	ldr	r7, [pc, #76]	; (716c <ser_data_out+0x5c>)
    711e:	e014      	b.n	714a <ser_data_out+0x3a>
		else{SER_HIGH;delay_ms(1);}
    7120:	2340      	movs	r3, #64	; 0x40
    7122:	61b3      	str	r3, [r6, #24]
    7124:	2001      	movs	r0, #1
    7126:	4b11      	ldr	r3, [pc, #68]	; (716c <ser_data_out+0x5c>)
    7128:	4798      	blx	r3
		out_data<<=1;
    712a:	006d      	lsls	r5, r5, #1
    712c:	b2ed      	uxtb	r5, r5
		SCK_HIGH;
    712e:	2480      	movs	r4, #128	; 0x80
    7130:	02e4      	lsls	r4, r4, #11
    7132:	61b4      	str	r4, [r6, #24]
		delay_ms(1);
    7134:	2001      	movs	r0, #1
    7136:	4b0d      	ldr	r3, [pc, #52]	; (716c <ser_data_out+0x5c>)
    7138:	4798      	blx	r3
		SCK_LOW;
    713a:	6174      	str	r4, [r6, #20]
	for(clk_count_num=0;clk_count_num<8;clk_count_num++)
    713c:	4a09      	ldr	r2, [pc, #36]	; (7164 <ser_data_out+0x54>)
    713e:	7813      	ldrb	r3, [r2, #0]
    7140:	3301      	adds	r3, #1
    7142:	b2db      	uxtb	r3, r3
    7144:	7013      	strb	r3, [r2, #0]
    7146:	2b07      	cmp	r3, #7
    7148:	d807      	bhi.n	715a <ser_data_out+0x4a>
		if((out_data&0x80)==0){SER_LOW;delay_ms(1);}
    714a:	b26b      	sxtb	r3, r5
    714c:	2b00      	cmp	r3, #0
    714e:	dbe7      	blt.n	7120 <ser_data_out+0x10>
    7150:	2340      	movs	r3, #64	; 0x40
    7152:	6173      	str	r3, [r6, #20]
    7154:	2001      	movs	r0, #1
    7156:	47b8      	blx	r7
    7158:	e7e7      	b.n	712a <ser_data_out+0x1a>
	RCK_HIGH;
    715a:	4b03      	ldr	r3, [pc, #12]	; (7168 <ser_data_out+0x58>)
    715c:	2280      	movs	r2, #128	; 0x80
    715e:	619a      	str	r2, [r3, #24]
	RCK_LOW;
    7160:	615a      	str	r2, [r3, #20]
}
    7162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7164:	200003c4 	.word	0x200003c4
    7168:	41004400 	.word	0x41004400
    716c:	00003f71 	.word	0x00003f71

00007170 <socket_cb>:
{
    7170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7172:	0014      	movs	r4, r2
	switch(u8Msg) 
    7174:	2907      	cmp	r1, #7
    7176:	d870      	bhi.n	725a <socket_cb+0xea>
    7178:	0089      	lsls	r1, r1, #2
    717a:	4bce      	ldr	r3, [pc, #824]	; (74b4 <socket_cb+0x344>)
    717c:	585b      	ldr	r3, [r3, r1]
    717e:	469f      	mov	pc, r3
			if(pstrBind && pstrBind->status == 0) 
    7180:	2a00      	cmp	r2, #0
    7182:	d003      	beq.n	718c <socket_cb+0x1c>
    7184:	2300      	movs	r3, #0
    7186:	56d3      	ldrsb	r3, [r2, r3]
    7188:	2b00      	cmp	r3, #0
    718a:	d00a      	beq.n	71a2 <socket_cb+0x32>
				printf("socket_cb: bind error!\r\n");
    718c:	48ca      	ldr	r0, [pc, #808]	; (74b8 <socket_cb+0x348>)
    718e:	4bcb      	ldr	r3, [pc, #812]	; (74bc <socket_cb+0x34c>)
    7190:	4798      	blx	r3
				close(tcp_server_socket);
    7192:	4ccb      	ldr	r4, [pc, #812]	; (74c0 <socket_cb+0x350>)
    7194:	2000      	movs	r0, #0
    7196:	5620      	ldrsb	r0, [r4, r0]
    7198:	4bca      	ldr	r3, [pc, #808]	; (74c4 <socket_cb+0x354>)
    719a:	4798      	blx	r3
				tcp_server_socket = -1;
    719c:	23ff      	movs	r3, #255	; 0xff
    719e:	7023      	strb	r3, [r4, #0]
    71a0:	e05b      	b.n	725a <socket_cb+0xea>
				printf("socket_cb: bind success!\r\n");
    71a2:	48c9      	ldr	r0, [pc, #804]	; (74c8 <socket_cb+0x358>)
    71a4:	4bc5      	ldr	r3, [pc, #788]	; (74bc <socket_cb+0x34c>)
    71a6:	4798      	blx	r3
				listen(tcp_server_socket, 0);
    71a8:	4bc5      	ldr	r3, [pc, #788]	; (74c0 <socket_cb+0x350>)
    71aa:	2000      	movs	r0, #0
    71ac:	5618      	ldrsb	r0, [r3, r0]
    71ae:	2100      	movs	r1, #0
    71b0:	4bc6      	ldr	r3, [pc, #792]	; (74cc <socket_cb+0x35c>)
    71b2:	4798      	blx	r3
    71b4:	e051      	b.n	725a <socket_cb+0xea>
			if(pstrListen && pstrListen->status == 0) 
    71b6:	2a00      	cmp	r2, #0
    71b8:	d003      	beq.n	71c2 <socket_cb+0x52>
    71ba:	2300      	movs	r3, #0
    71bc:	56d3      	ldrsb	r3, [r2, r3]
    71be:	2b00      	cmp	r3, #0
    71c0:	d00a      	beq.n	71d8 <socket_cb+0x68>
				printf("socket_cb: listen error!\r\n");
    71c2:	48c3      	ldr	r0, [pc, #780]	; (74d0 <socket_cb+0x360>)
    71c4:	4bbd      	ldr	r3, [pc, #756]	; (74bc <socket_cb+0x34c>)
    71c6:	4798      	blx	r3
				close(tcp_server_socket);
    71c8:	4cbd      	ldr	r4, [pc, #756]	; (74c0 <socket_cb+0x350>)
    71ca:	2000      	movs	r0, #0
    71cc:	5620      	ldrsb	r0, [r4, r0]
    71ce:	4bbd      	ldr	r3, [pc, #756]	; (74c4 <socket_cb+0x354>)
    71d0:	4798      	blx	r3
				tcp_server_socket = -1;
    71d2:	23ff      	movs	r3, #255	; 0xff
    71d4:	7023      	strb	r3, [r4, #0]
    71d6:	e040      	b.n	725a <socket_cb+0xea>
				printf("socket_cb: listen success!\r\n");
    71d8:	48be      	ldr	r0, [pc, #760]	; (74d4 <socket_cb+0x364>)
    71da:	4bb8      	ldr	r3, [pc, #736]	; (74bc <socket_cb+0x34c>)
    71dc:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    71de:	4bb8      	ldr	r3, [pc, #736]	; (74c0 <socket_cb+0x350>)
    71e0:	2000      	movs	r0, #0
    71e2:	5618      	ldrsb	r0, [r3, r0]
    71e4:	2200      	movs	r2, #0
    71e6:	2100      	movs	r1, #0
    71e8:	4bbb      	ldr	r3, [pc, #748]	; (74d8 <socket_cb+0x368>)
    71ea:	4798      	blx	r3
    71ec:	e035      	b.n	725a <socket_cb+0xea>
			if(pstrAccept) 
    71ee:	2a00      	cmp	r2, #0
    71f0:	d013      	beq.n	721a <socket_cb+0xaa>
				printf("socket_cb: accept success!\r\n");
    71f2:	48ba      	ldr	r0, [pc, #744]	; (74dc <socket_cb+0x36c>)
    71f4:	4bb1      	ldr	r3, [pc, #708]	; (74bc <socket_cb+0x34c>)
    71f6:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    71f8:	4bb1      	ldr	r3, [pc, #708]	; (74c0 <socket_cb+0x350>)
    71fa:	2000      	movs	r0, #0
    71fc:	5618      	ldrsb	r0, [r3, r0]
    71fe:	2200      	movs	r2, #0
    7200:	2100      	movs	r1, #0
    7202:	4bb5      	ldr	r3, [pc, #724]	; (74d8 <socket_cb+0x368>)
    7204:	4798      	blx	r3
				tcp_client_socket = pstrAccept->sock;
    7206:	2000      	movs	r0, #0
    7208:	5620      	ldrsb	r0, [r4, r0]
    720a:	4bb5      	ldr	r3, [pc, #724]	; (74e0 <socket_cb+0x370>)
    720c:	7018      	strb	r0, [r3, #0]
				recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);			
    720e:	2300      	movs	r3, #0
    7210:	4ab4      	ldr	r2, [pc, #720]	; (74e4 <socket_cb+0x374>)
    7212:	49b5      	ldr	r1, [pc, #724]	; (74e8 <socket_cb+0x378>)
    7214:	4db5      	ldr	r5, [pc, #724]	; (74ec <socket_cb+0x37c>)
    7216:	47a8      	blx	r5
    7218:	e019      	b.n	724e <socket_cb+0xde>
				printf("socket_cb: accept error!\r\n");				
    721a:	48b5      	ldr	r0, [pc, #724]	; (74f0 <socket_cb+0x380>)
    721c:	4ba7      	ldr	r3, [pc, #668]	; (74bc <socket_cb+0x34c>)
    721e:	4798      	blx	r3
				close(tcp_server_socket);
    7220:	4ca7      	ldr	r4, [pc, #668]	; (74c0 <socket_cb+0x350>)
    7222:	2000      	movs	r0, #0
    7224:	5620      	ldrsb	r0, [r4, r0]
    7226:	4ba7      	ldr	r3, [pc, #668]	; (74c4 <socket_cb+0x354>)
    7228:	4798      	blx	r3
				tcp_server_socket = -1;
    722a:	23ff      	movs	r3, #255	; 0xff
    722c:	7023      	strb	r3, [r4, #0]
				printf("socket_cb: connect error!\r\n");
    722e:	48b1      	ldr	r0, [pc, #708]	; (74f4 <socket_cb+0x384>)
    7230:	4ba2      	ldr	r3, [pc, #648]	; (74bc <socket_cb+0x34c>)
    7232:	4798      	blx	r3
				close(tcp_client_socket);
    7234:	4caa      	ldr	r4, [pc, #680]	; (74e0 <socket_cb+0x370>)
    7236:	2000      	movs	r0, #0
    7238:	5620      	ldrsb	r0, [r4, r0]
    723a:	4ba2      	ldr	r3, [pc, #648]	; (74c4 <socket_cb+0x354>)
    723c:	4798      	blx	r3
				tcp_client_socket = -1;			
    723e:	23ff      	movs	r3, #255	; 0xff
    7240:	7023      	strb	r3, [r4, #0]
				delay_ms(3000);
    7242:	48ad      	ldr	r0, [pc, #692]	; (74f8 <socket_cb+0x388>)
    7244:	4bad      	ldr	r3, [pc, #692]	; (74fc <socket_cb+0x38c>)
    7246:	4798      	blx	r3
    7248:	e007      	b.n	725a <socket_cb+0xea>
			if(pstrConnect && pstrConnect->s8Error >= 0) 
    724a:	2a00      	cmp	r2, #0
    724c:	d0ef      	beq.n	722e <socket_cb+0xbe>
    724e:	7863      	ldrb	r3, [r4, #1]
    7250:	2b7f      	cmp	r3, #127	; 0x7f
    7252:	d8ec      	bhi.n	722e <socket_cb+0xbe>
				printf("socket_cb: connect success!\r\n");
    7254:	48aa      	ldr	r0, [pc, #680]	; (7500 <socket_cb+0x390>)
    7256:	4b99      	ldr	r3, [pc, #612]	; (74bc <socket_cb+0x34c>)
    7258:	4798      	blx	r3
}
    725a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			printf("socket_cb: send success!\r\n");
    725c:	48a9      	ldr	r0, [pc, #676]	; (7504 <socket_cb+0x394>)
    725e:	4c97      	ldr	r4, [pc, #604]	; (74bc <socket_cb+0x34c>)
    7260:	47a0      	blx	r4
			printf("TCP Server Test Complete!\r\n");
    7262:	48a9      	ldr	r0, [pc, #676]	; (7508 <socket_cb+0x398>)
    7264:	47a0      	blx	r4
			printf("close socket\n");
    7266:	48a9      	ldr	r0, [pc, #676]	; (750c <socket_cb+0x39c>)
    7268:	47a0      	blx	r4
			close(tcp_client_socket); tcp_client_socket =-1;
    726a:	4c9d      	ldr	r4, [pc, #628]	; (74e0 <socket_cb+0x370>)
    726c:	2000      	movs	r0, #0
    726e:	5620      	ldrsb	r0, [r4, r0]
    7270:	4b94      	ldr	r3, [pc, #592]	; (74c4 <socket_cb+0x354>)
    7272:	4798      	blx	r3
    7274:	23ff      	movs	r3, #255	; 0xff
    7276:	7023      	strb	r3, [r4, #0]
		break;
    7278:	e7ef      	b.n	725a <socket_cb+0xea>
				if(pstrRecv && pstrRecv->s16BufferSize > 0) 
    727a:	2a00      	cmp	r2, #0
    727c:	d100      	bne.n	7280 <socket_cb+0x110>
    727e:	e1ff      	b.n	7680 <socket_cb+0x510>
    7280:	2204      	movs	r2, #4
    7282:	5ea3      	ldrsh	r3, [r4, r2]
    7284:	2b00      	cmp	r3, #0
    7286:	dc00      	bgt.n	728a <socket_cb+0x11a>
    7288:	e1fa      	b.n	7680 <socket_cb+0x510>
					printf("socket_cb: recv success!\r\n");				
    728a:	48a1      	ldr	r0, [pc, #644]	; (7510 <socket_cb+0x3a0>)
    728c:	4b8b      	ldr	r3, [pc, #556]	; (74bc <socket_cb+0x34c>)
    728e:	4798      	blx	r3
					for(int i=0; i<12; i++)
    7290:	2300      	movs	r3, #0
							light[i-3] = pstrRecv->pu8Buffer[i];
    7292:	4ea0      	ldr	r6, [pc, #640]	; (7514 <socket_cb+0x3a4>)
							arr[i] = pstrRecv->pu8Buffer[i];
    7294:	4fa0      	ldr	r7, [pc, #640]	; (7518 <socket_cb+0x3a8>)
						pstrRecv->pu8Buffer[i] = 32;
    7296:	2520      	movs	r5, #32
    7298:	e005      	b.n	72a6 <socket_cb+0x136>
							arr[i] = pstrRecv->pu8Buffer[i];
    729a:	54f9      	strb	r1, [r7, r3]
						pstrRecv->pu8Buffer[i] = 32;
    729c:	6821      	ldr	r1, [r4, #0]
    729e:	548d      	strb	r5, [r1, r2]
					for(int i=0; i<12; i++)
    72a0:	3301      	adds	r3, #1
    72a2:	2b0c      	cmp	r3, #12
    72a4:	d007      	beq.n	72b6 <socket_cb+0x146>
						if((pstrRecv->pu8Buffer[i] != NULL || pstrRecv->pu8Buffer[i] != "" ) && i<3)
    72a6:	001a      	movs	r2, r3
    72a8:	6821      	ldr	r1, [r4, #0]
    72aa:	5cc9      	ldrb	r1, [r1, r3]
    72ac:	2b02      	cmp	r3, #2
    72ae:	ddf4      	ble.n	729a <socket_cb+0x12a>
							light[i-3] = pstrRecv->pu8Buffer[i];
    72b0:	1ed8      	subs	r0, r3, #3
    72b2:	5431      	strb	r1, [r6, r0]
    72b4:	e7f2      	b.n	729c <socket_cb+0x12c>
					if(strcmp(arr,arr2)==0)
    72b6:	4999      	ldr	r1, [pc, #612]	; (751c <socket_cb+0x3ac>)
    72b8:	4897      	ldr	r0, [pc, #604]	; (7518 <socket_cb+0x3a8>)
    72ba:	4b99      	ldr	r3, [pc, #612]	; (7520 <socket_cb+0x3b0>)
    72bc:	4798      	blx	r3
    72be:	2800      	cmp	r0, #0
    72c0:	d167      	bne.n	7392 <socket_cb+0x222>
						arr[0]="S";
    72c2:	4b95      	ldr	r3, [pc, #596]	; (7518 <socket_cb+0x3a8>)
    72c4:	4a97      	ldr	r2, [pc, #604]	; (7524 <socket_cb+0x3b4>)
    72c6:	701a      	strb	r2, [r3, #0]
						arr[1]="A";
    72c8:	4a97      	ldr	r2, [pc, #604]	; (7528 <socket_cb+0x3b8>)
    72ca:	705a      	strb	r2, [r3, #1]
						arr[2]="M";	
    72cc:	4a97      	ldr	r2, [pc, #604]	; (752c <socket_cb+0x3bc>)
    72ce:	709a      	strb	r2, [r3, #2]
						printf("----------------SAME------------ \r\n");
    72d0:	4897      	ldr	r0, [pc, #604]	; (7530 <socket_cb+0x3c0>)
    72d2:	4b7a      	ldr	r3, [pc, #488]	; (74bc <socket_cb+0x34c>)
    72d4:	4798      	blx	r3
					if(strcmp(arr,"@1c")==0)
    72d6:	4997      	ldr	r1, [pc, #604]	; (7534 <socket_cb+0x3c4>)
    72d8:	488f      	ldr	r0, [pc, #572]	; (7518 <socket_cb+0x3a8>)
    72da:	4b91      	ldr	r3, [pc, #580]	; (7520 <socket_cb+0x3b0>)
    72dc:	4798      	blx	r3
    72de:	2800      	cmp	r0, #0
    72e0:	d061      	beq.n	73a6 <socket_cb+0x236>
					else if(strcmp(arr,"@1o")==0)
    72e2:	4995      	ldr	r1, [pc, #596]	; (7538 <socket_cb+0x3c8>)
    72e4:	488c      	ldr	r0, [pc, #560]	; (7518 <socket_cb+0x3a8>)
    72e6:	4b8e      	ldr	r3, [pc, #568]	; (7520 <socket_cb+0x3b0>)
    72e8:	4798      	blx	r3
    72ea:	2800      	cmp	r0, #0
    72ec:	d100      	bne.n	72f0 <socket_cb+0x180>
    72ee:	e09e      	b.n	742e <socket_cb+0x2be>
					else if(strcmp(arr,"@2c")==0)
    72f0:	4992      	ldr	r1, [pc, #584]	; (753c <socket_cb+0x3cc>)
    72f2:	4889      	ldr	r0, [pc, #548]	; (7518 <socket_cb+0x3a8>)
    72f4:	4b8a      	ldr	r3, [pc, #552]	; (7520 <socket_cb+0x3b0>)
    72f6:	4798      	blx	r3
    72f8:	2800      	cmp	r0, #0
    72fa:	d100      	bne.n	72fe <socket_cb+0x18e>
    72fc:	e0a2      	b.n	7444 <socket_cb+0x2d4>
					else if(strcmp(arr,"@2o")==0)
    72fe:	4990      	ldr	r1, [pc, #576]	; (7540 <socket_cb+0x3d0>)
    7300:	4885      	ldr	r0, [pc, #532]	; (7518 <socket_cb+0x3a8>)
    7302:	4b87      	ldr	r3, [pc, #540]	; (7520 <socket_cb+0x3b0>)
    7304:	4798      	blx	r3
    7306:	2800      	cmp	r0, #0
    7308:	d100      	bne.n	730c <socket_cb+0x19c>
    730a:	e0a6      	b.n	745a <socket_cb+0x2ea>
					else if(strcmp(arr,"@3c")==0)
    730c:	498d      	ldr	r1, [pc, #564]	; (7544 <socket_cb+0x3d4>)
    730e:	4882      	ldr	r0, [pc, #520]	; (7518 <socket_cb+0x3a8>)
    7310:	4b83      	ldr	r3, [pc, #524]	; (7520 <socket_cb+0x3b0>)
    7312:	4798      	blx	r3
    7314:	2800      	cmp	r0, #0
    7316:	d100      	bne.n	731a <socket_cb+0x1aa>
    7318:	e0aa      	b.n	7470 <socket_cb+0x300>
					else if(strcmp(arr,"@3o")==0)
    731a:	498b      	ldr	r1, [pc, #556]	; (7548 <socket_cb+0x3d8>)
    731c:	487e      	ldr	r0, [pc, #504]	; (7518 <socket_cb+0x3a8>)
    731e:	4b80      	ldr	r3, [pc, #512]	; (7520 <socket_cb+0x3b0>)
    7320:	4798      	blx	r3
    7322:	2800      	cmp	r0, #0
    7324:	d100      	bne.n	7328 <socket_cb+0x1b8>
    7326:	e0ae      	b.n	7486 <socket_cb+0x316>
					else if(strcmp(arr,"@4c")==0)
    7328:	4988      	ldr	r1, [pc, #544]	; (754c <socket_cb+0x3dc>)
    732a:	487b      	ldr	r0, [pc, #492]	; (7518 <socket_cb+0x3a8>)
    732c:	4b7c      	ldr	r3, [pc, #496]	; (7520 <socket_cb+0x3b0>)
    732e:	4798      	blx	r3
    7330:	2800      	cmp	r0, #0
    7332:	d100      	bne.n	7336 <socket_cb+0x1c6>
    7334:	e0b2      	b.n	749c <socket_cb+0x32c>
					else if(strcmp(arr,"@4o")==0)
    7336:	4986      	ldr	r1, [pc, #536]	; (7550 <socket_cb+0x3e0>)
    7338:	4877      	ldr	r0, [pc, #476]	; (7518 <socket_cb+0x3a8>)
    733a:	4b79      	ldr	r3, [pc, #484]	; (7520 <socket_cb+0x3b0>)
    733c:	4798      	blx	r3
    733e:	2800      	cmp	r0, #0
    7340:	d100      	bne.n	7344 <socket_cb+0x1d4>
    7342:	e127      	b.n	7594 <socket_cb+0x424>
					else if(strcmp(arr,"@5c")==0)
    7344:	4983      	ldr	r1, [pc, #524]	; (7554 <socket_cb+0x3e4>)
    7346:	4874      	ldr	r0, [pc, #464]	; (7518 <socket_cb+0x3a8>)
    7348:	4b75      	ldr	r3, [pc, #468]	; (7520 <socket_cb+0x3b0>)
    734a:	4798      	blx	r3
    734c:	2800      	cmp	r0, #0
    734e:	d100      	bne.n	7352 <socket_cb+0x1e2>
    7350:	e12b      	b.n	75aa <socket_cb+0x43a>
					else if(strcmp(arr,"@5o")==0)
    7352:	4981      	ldr	r1, [pc, #516]	; (7558 <socket_cb+0x3e8>)
    7354:	4870      	ldr	r0, [pc, #448]	; (7518 <socket_cb+0x3a8>)
    7356:	4b72      	ldr	r3, [pc, #456]	; (7520 <socket_cb+0x3b0>)
    7358:	4798      	blx	r3
    735a:	2800      	cmp	r0, #0
    735c:	d100      	bne.n	7360 <socket_cb+0x1f0>
    735e:	e12f      	b.n	75c0 <socket_cb+0x450>
					else if(strcmp(arr,"@6c")==0)
    7360:	497e      	ldr	r1, [pc, #504]	; (755c <socket_cb+0x3ec>)
    7362:	486d      	ldr	r0, [pc, #436]	; (7518 <socket_cb+0x3a8>)
    7364:	4b6e      	ldr	r3, [pc, #440]	; (7520 <socket_cb+0x3b0>)
    7366:	4798      	blx	r3
    7368:	2800      	cmp	r0, #0
    736a:	d100      	bne.n	736e <socket_cb+0x1fe>
    736c:	e133      	b.n	75d6 <socket_cb+0x466>
					else if(strcmp(arr,"@6o")==0)
    736e:	497c      	ldr	r1, [pc, #496]	; (7560 <socket_cb+0x3f0>)
    7370:	4869      	ldr	r0, [pc, #420]	; (7518 <socket_cb+0x3a8>)
    7372:	4b6b      	ldr	r3, [pc, #428]	; (7520 <socket_cb+0x3b0>)
    7374:	4798      	blx	r3
    7376:	2800      	cmp	r0, #0
    7378:	d000      	beq.n	737c <socket_cb+0x20c>
    737a:	e137      	b.n	75ec <socket_cb+0x47c>
						ser_data_out(0x80);
    737c:	3080      	adds	r0, #128	; 0x80
    737e:	4b79      	ldr	r3, [pc, #484]	; (7564 <socket_cb+0x3f4>)
    7380:	4798      	blx	r3
						delay_ms(1);
    7382:	2001      	movs	r0, #1
    7384:	4b5d      	ldr	r3, [pc, #372]	; (74fc <socket_cb+0x38c>)
    7386:	4798      	blx	r3
						PORT->Group[1].OUTSET.bit.OUTSET=PORT_PB02;
    7388:	2104      	movs	r1, #4
    738a:	2398      	movs	r3, #152	; 0x98
    738c:	4a76      	ldr	r2, [pc, #472]	; (7568 <socket_cb+0x3f8>)
    738e:	50d1      	str	r1, [r2, r3]
    7390:	e013      	b.n	73ba <socket_cb+0x24a>
						strcpy(arr2,arr);
    7392:	4c62      	ldr	r4, [pc, #392]	; (751c <socket_cb+0x3ac>)
    7394:	4960      	ldr	r1, [pc, #384]	; (7518 <socket_cb+0x3a8>)
    7396:	0020      	movs	r0, r4
    7398:	4b74      	ldr	r3, [pc, #464]	; (756c <socket_cb+0x3fc>)
    739a:	4798      	blx	r3
						printf("copy: %s \r\n", arr2);
    739c:	0021      	movs	r1, r4
    739e:	4874      	ldr	r0, [pc, #464]	; (7570 <socket_cb+0x400>)
    73a0:	4b74      	ldr	r3, [pc, #464]	; (7574 <socket_cb+0x404>)
    73a2:	4798      	blx	r3
    73a4:	e797      	b.n	72d6 <socket_cb+0x166>
						ser_data_out(0x10);
    73a6:	3010      	adds	r0, #16
    73a8:	4b6e      	ldr	r3, [pc, #440]	; (7564 <socket_cb+0x3f4>)
    73aa:	4798      	blx	r3
						delay_ms(1);		
    73ac:	2001      	movs	r0, #1
    73ae:	4b53      	ldr	r3, [pc, #332]	; (74fc <socket_cb+0x38c>)
    73b0:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    73b2:	2280      	movs	r2, #128	; 0x80
    73b4:	0552      	lsls	r2, r2, #21
    73b6:	4b6c      	ldr	r3, [pc, #432]	; (7568 <socket_cb+0x3f8>)
    73b8:	619a      	str	r2, [r3, #24]
					delay_ms(1);
    73ba:	2001      	movs	r0, #1
    73bc:	4c4f      	ldr	r4, [pc, #316]	; (74fc <socket_cb+0x38c>)
    73be:	47a0      	blx	r4
					ser_data_out(0x00);
    73c0:	2000      	movs	r0, #0
    73c2:	4b68      	ldr	r3, [pc, #416]	; (7564 <socket_cb+0x3f4>)
    73c4:	4798      	blx	r3
					delay_ms(1);
    73c6:	2001      	movs	r0, #1
    73c8:	47a0      	blx	r4
					PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA28;
    73ca:	4b67      	ldr	r3, [pc, #412]	; (7568 <socket_cb+0x3f8>)
    73cc:	2280      	movs	r2, #128	; 0x80
    73ce:	0552      	lsls	r2, r2, #21
    73d0:	615a      	str	r2, [r3, #20]
					PORT->Group[1].OUTCLR.bit.OUTCLR=PORT_PB02;
    73d2:	2104      	movs	r1, #4
    73d4:	2294      	movs	r2, #148	; 0x94
    73d6:	5099      	str	r1, [r3, r2]
					if(strstr(light,"@GN") != NULL)
    73d8:	4967      	ldr	r1, [pc, #412]	; (7578 <socket_cb+0x408>)
    73da:	484e      	ldr	r0, [pc, #312]	; (7514 <socket_cb+0x3a4>)
    73dc:	4b67      	ldr	r3, [pc, #412]	; (757c <socket_cb+0x40c>)
    73de:	4798      	blx	r3
    73e0:	2800      	cmp	r0, #0
    73e2:	d003      	beq.n	73ec <socket_cb+0x27c>
						signOnLight+=8;
    73e4:	4a66      	ldr	r2, [pc, #408]	; (7580 <socket_cb+0x410>)
    73e6:	6813      	ldr	r3, [r2, #0]
    73e8:	3308      	adds	r3, #8
    73ea:	6013      	str	r3, [r2, #0]
					if(strstr(light,"@RN") != NULL)
    73ec:	4965      	ldr	r1, [pc, #404]	; (7584 <socket_cb+0x414>)
    73ee:	4849      	ldr	r0, [pc, #292]	; (7514 <socket_cb+0x3a4>)
    73f0:	4b62      	ldr	r3, [pc, #392]	; (757c <socket_cb+0x40c>)
    73f2:	4798      	blx	r3
    73f4:	2800      	cmp	r0, #0
    73f6:	d003      	beq.n	7400 <socket_cb+0x290>
						signOnLight+=2;	
    73f8:	4a61      	ldr	r2, [pc, #388]	; (7580 <socket_cb+0x410>)
    73fa:	6813      	ldr	r3, [r2, #0]
    73fc:	3302      	adds	r3, #2
    73fe:	6013      	str	r3, [r2, #0]
					if(strstr(light,"@ON") != NULL)
    7400:	4961      	ldr	r1, [pc, #388]	; (7588 <socket_cb+0x418>)
    7402:	4844      	ldr	r0, [pc, #272]	; (7514 <socket_cb+0x3a4>)
    7404:	4b5d      	ldr	r3, [pc, #372]	; (757c <socket_cb+0x40c>)
    7406:	4798      	blx	r3
    7408:	2800      	cmp	r0, #0
    740a:	d003      	beq.n	7414 <socket_cb+0x2a4>
						signOnLight+=4;	
    740c:	4a5c      	ldr	r2, [pc, #368]	; (7580 <socket_cb+0x410>)
    740e:	6813      	ldr	r3, [r2, #0]
    7410:	3304      	adds	r3, #4
    7412:	6013      	str	r3, [r2, #0]
					printf("signOnLight : %d \r\n",signOnLight);
    7414:	4c5a      	ldr	r4, [pc, #360]	; (7580 <socket_cb+0x410>)
    7416:	6821      	ldr	r1, [r4, #0]
    7418:	485c      	ldr	r0, [pc, #368]	; (758c <socket_cb+0x41c>)
    741a:	4b56      	ldr	r3, [pc, #344]	; (7574 <socket_cb+0x404>)
    741c:	4798      	blx	r3
					switch(signOnLight)
    741e:	6823      	ldr	r3, [r4, #0]
    7420:	2b0e      	cmp	r3, #14
    7422:	d900      	bls.n	7426 <socket_cb+0x2b6>
    7424:	e128      	b.n	7678 <socket_cb+0x508>
    7426:	009b      	lsls	r3, r3, #2
    7428:	4a59      	ldr	r2, [pc, #356]	; (7590 <socket_cb+0x420>)
    742a:	58d3      	ldr	r3, [r2, r3]
    742c:	469f      	mov	pc, r3
						ser_data_out(0x20);
    742e:	3020      	adds	r0, #32
    7430:	4b4c      	ldr	r3, [pc, #304]	; (7564 <socket_cb+0x3f4>)
    7432:	4798      	blx	r3
						delay_ms(1);
    7434:	2001      	movs	r0, #1
    7436:	4b31      	ldr	r3, [pc, #196]	; (74fc <socket_cb+0x38c>)
    7438:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    743a:	2280      	movs	r2, #128	; 0x80
    743c:	0552      	lsls	r2, r2, #21
    743e:	4b4a      	ldr	r3, [pc, #296]	; (7568 <socket_cb+0x3f8>)
    7440:	619a      	str	r2, [r3, #24]
    7442:	e7ba      	b.n	73ba <socket_cb+0x24a>
						ser_data_out(0x40);
    7444:	3040      	adds	r0, #64	; 0x40
    7446:	4b47      	ldr	r3, [pc, #284]	; (7564 <socket_cb+0x3f4>)
    7448:	4798      	blx	r3
						delay_ms(1);
    744a:	2001      	movs	r0, #1
    744c:	4b2b      	ldr	r3, [pc, #172]	; (74fc <socket_cb+0x38c>)
    744e:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    7450:	2280      	movs	r2, #128	; 0x80
    7452:	0552      	lsls	r2, r2, #21
    7454:	4b44      	ldr	r3, [pc, #272]	; (7568 <socket_cb+0x3f8>)
    7456:	619a      	str	r2, [r3, #24]
    7458:	e7af      	b.n	73ba <socket_cb+0x24a>
						ser_data_out(0x80);
    745a:	3080      	adds	r0, #128	; 0x80
    745c:	4b41      	ldr	r3, [pc, #260]	; (7564 <socket_cb+0x3f4>)
    745e:	4798      	blx	r3
						delay_ms(1);
    7460:	2001      	movs	r0, #1
    7462:	4b26      	ldr	r3, [pc, #152]	; (74fc <socket_cb+0x38c>)
    7464:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    7466:	2280      	movs	r2, #128	; 0x80
    7468:	0552      	lsls	r2, r2, #21
    746a:	4b3f      	ldr	r3, [pc, #252]	; (7568 <socket_cb+0x3f8>)
    746c:	619a      	str	r2, [r3, #24]
    746e:	e7a4      	b.n	73ba <socket_cb+0x24a>
						ser_data_out(0x01);
    7470:	3001      	adds	r0, #1
    7472:	4b3c      	ldr	r3, [pc, #240]	; (7564 <socket_cb+0x3f4>)
    7474:	4798      	blx	r3
						delay_ms(1);
    7476:	2001      	movs	r0, #1
    7478:	4b20      	ldr	r3, [pc, #128]	; (74fc <socket_cb+0x38c>)
    747a:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    747c:	2280      	movs	r2, #128	; 0x80
    747e:	0552      	lsls	r2, r2, #21
    7480:	4b39      	ldr	r3, [pc, #228]	; (7568 <socket_cb+0x3f8>)
    7482:	619a      	str	r2, [r3, #24]
    7484:	e799      	b.n	73ba <socket_cb+0x24a>
						ser_data_out(0x02);
    7486:	3002      	adds	r0, #2
    7488:	4b36      	ldr	r3, [pc, #216]	; (7564 <socket_cb+0x3f4>)
    748a:	4798      	blx	r3
						delay_ms(1);
    748c:	2001      	movs	r0, #1
    748e:	4b1b      	ldr	r3, [pc, #108]	; (74fc <socket_cb+0x38c>)
    7490:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    7492:	2280      	movs	r2, #128	; 0x80
    7494:	0552      	lsls	r2, r2, #21
    7496:	4b34      	ldr	r3, [pc, #208]	; (7568 <socket_cb+0x3f8>)
    7498:	619a      	str	r2, [r3, #24]
    749a:	e78e      	b.n	73ba <socket_cb+0x24a>
						ser_data_out(0x04);
    749c:	3004      	adds	r0, #4
    749e:	4b31      	ldr	r3, [pc, #196]	; (7564 <socket_cb+0x3f4>)
    74a0:	4798      	blx	r3
						delay_ms(1);
    74a2:	2001      	movs	r0, #1
    74a4:	4b15      	ldr	r3, [pc, #84]	; (74fc <socket_cb+0x38c>)
    74a6:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    74a8:	2280      	movs	r2, #128	; 0x80
    74aa:	0552      	lsls	r2, r2, #21
    74ac:	4b2e      	ldr	r3, [pc, #184]	; (7568 <socket_cb+0x3f8>)
    74ae:	619a      	str	r2, [r3, #24]
    74b0:	e783      	b.n	73ba <socket_cb+0x24a>
    74b2:	46c0      	nop			; (mov r8, r8)
    74b4:	0000a070 	.word	0x0000a070
    74b8:	0000a160 	.word	0x0000a160
    74bc:	00007f61 	.word	0x00007f61
    74c0:	2000000e 	.word	0x2000000e
    74c4:	000030e1 	.word	0x000030e1
    74c8:	0000a144 	.word	0x0000a144
    74cc:	00002f39 	.word	0x00002f39
    74d0:	0000a194 	.word	0x0000a194
    74d4:	0000a178 	.word	0x0000a178
    74d8:	00002f91 	.word	0x00002f91
    74dc:	0000a1b0 	.word	0x0000a1b0
    74e0:	2000000d 	.word	0x2000000d
    74e4:	000005b4 	.word	0x000005b4
    74e8:	200003c8 	.word	0x200003c8
    74ec:	0000304d 	.word	0x0000304d
    74f0:	0000a1cc 	.word	0x0000a1cc
    74f4:	0000a208 	.word	0x0000a208
    74f8:	00000bb8 	.word	0x00000bb8
    74fc:	00003f71 	.word	0x00003f71
    7500:	0000a1e8 	.word	0x0000a1e8
    7504:	0000a224 	.word	0x0000a224
    7508:	0000a240 	.word	0x0000a240
    750c:	0000a25c 	.word	0x0000a25c
    7510:	0000a26c 	.word	0x0000a26c
    7514:	2000097c 	.word	0x2000097c
    7518:	200003b4 	.word	0x200003b4
    751c:	200003b8 	.word	0x200003b8
    7520:	000081b5 	.word	0x000081b5
    7524:	0000a288 	.word	0x0000a288
    7528:	0000a28c 	.word	0x0000a28c
    752c:	0000a290 	.word	0x0000a290
    7530:	0000a294 	.word	0x0000a294
    7534:	0000a2c4 	.word	0x0000a2c4
    7538:	0000a2c8 	.word	0x0000a2c8
    753c:	0000a2cc 	.word	0x0000a2cc
    7540:	0000a2d0 	.word	0x0000a2d0
    7544:	0000a2d4 	.word	0x0000a2d4
    7548:	0000a2d8 	.word	0x0000a2d8
    754c:	0000a2dc 	.word	0x0000a2dc
    7550:	0000a2e0 	.word	0x0000a2e0
    7554:	0000a2e4 	.word	0x0000a2e4
    7558:	0000a2e8 	.word	0x0000a2e8
    755c:	0000a2ec 	.word	0x0000a2ec
    7560:	0000a2f0 	.word	0x0000a2f0
    7564:	00007111 	.word	0x00007111
    7568:	41004400 	.word	0x41004400
    756c:	000081c9 	.word	0x000081c9
    7570:	0000a2b8 	.word	0x0000a2b8
    7574:	00007e45 	.word	0x00007e45
    7578:	0000a31c 	.word	0x0000a31c
    757c:	000081d9 	.word	0x000081d9
    7580:	20000988 	.word	0x20000988
    7584:	0000a320 	.word	0x0000a320
    7588:	0000a324 	.word	0x0000a324
    758c:	0000a328 	.word	0x0000a328
    7590:	0000a090 	.word	0x0000a090
						ser_data_out(0x08);
    7594:	3008      	adds	r0, #8
    7596:	4b40      	ldr	r3, [pc, #256]	; (7698 <socket_cb+0x528>)
    7598:	4798      	blx	r3
						delay_ms(1);
    759a:	2001      	movs	r0, #1
    759c:	4b3f      	ldr	r3, [pc, #252]	; (769c <socket_cb+0x52c>)
    759e:	4798      	blx	r3
						PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA28;
    75a0:	2280      	movs	r2, #128	; 0x80
    75a2:	0552      	lsls	r2, r2, #21
    75a4:	4b3e      	ldr	r3, [pc, #248]	; (76a0 <socket_cb+0x530>)
    75a6:	619a      	str	r2, [r3, #24]
    75a8:	e707      	b.n	73ba <socket_cb+0x24a>
						ser_data_out(0x10);
    75aa:	3010      	adds	r0, #16
    75ac:	4b3a      	ldr	r3, [pc, #232]	; (7698 <socket_cb+0x528>)
    75ae:	4798      	blx	r3
						delay_ms(1);
    75b0:	2001      	movs	r0, #1
    75b2:	4b3a      	ldr	r3, [pc, #232]	; (769c <socket_cb+0x52c>)
    75b4:	4798      	blx	r3
						PORT->Group[1].OUTSET.bit.OUTSET=PORT_PB02;
    75b6:	2104      	movs	r1, #4
    75b8:	2398      	movs	r3, #152	; 0x98
    75ba:	4a39      	ldr	r2, [pc, #228]	; (76a0 <socket_cb+0x530>)
    75bc:	50d1      	str	r1, [r2, r3]
    75be:	e6fc      	b.n	73ba <socket_cb+0x24a>
						ser_data_out(0x20);
    75c0:	3020      	adds	r0, #32
    75c2:	4b35      	ldr	r3, [pc, #212]	; (7698 <socket_cb+0x528>)
    75c4:	4798      	blx	r3
						delay_ms(1);
    75c6:	2001      	movs	r0, #1
    75c8:	4b34      	ldr	r3, [pc, #208]	; (769c <socket_cb+0x52c>)
    75ca:	4798      	blx	r3
						PORT->Group[1].OUTSET.bit.OUTSET=PORT_PB02;
    75cc:	2104      	movs	r1, #4
    75ce:	2398      	movs	r3, #152	; 0x98
    75d0:	4a33      	ldr	r2, [pc, #204]	; (76a0 <socket_cb+0x530>)
    75d2:	50d1      	str	r1, [r2, r3]
    75d4:	e6f1      	b.n	73ba <socket_cb+0x24a>
						ser_data_out(0x40);
    75d6:	3040      	adds	r0, #64	; 0x40
    75d8:	4b2f      	ldr	r3, [pc, #188]	; (7698 <socket_cb+0x528>)
    75da:	4798      	blx	r3
						delay_ms(1);
    75dc:	2001      	movs	r0, #1
    75de:	4b2f      	ldr	r3, [pc, #188]	; (769c <socket_cb+0x52c>)
    75e0:	4798      	blx	r3
						PORT->Group[1].OUTSET.bit.OUTSET=PORT_PB02;
    75e2:	2104      	movs	r1, #4
    75e4:	2398      	movs	r3, #152	; 0x98
    75e6:	4a2e      	ldr	r2, [pc, #184]	; (76a0 <socket_cb+0x530>)
    75e8:	50d1      	str	r1, [r2, r3]
    75ea:	e6e6      	b.n	73ba <socket_cb+0x24a>
						printf("before SolValve Control Commend : %s\r\n", arr2);
    75ec:	492d      	ldr	r1, [pc, #180]	; (76a4 <socket_cb+0x534>)
    75ee:	482e      	ldr	r0, [pc, #184]	; (76a8 <socket_cb+0x538>)
    75f0:	4b2e      	ldr	r3, [pc, #184]	; (76ac <socket_cb+0x53c>)
    75f2:	4798      	blx	r3
    75f4:	e6e1      	b.n	73ba <socket_cb+0x24a>
						case 2:ser_data_out(0x02);
    75f6:	2002      	movs	r0, #2
    75f8:	4b27      	ldr	r3, [pc, #156]	; (7698 <socket_cb+0x528>)
    75fa:	4798      	blx	r3
					signOnLight = 0;
    75fc:	2200      	movs	r2, #0
    75fe:	4b2c      	ldr	r3, [pc, #176]	; (76b0 <socket_cb+0x540>)
    7600:	601a      	str	r2, [r3, #0]
					delay_ms(1);
    7602:	2001      	movs	r0, #1
    7604:	4e25      	ldr	r6, [pc, #148]	; (769c <socket_cb+0x52c>)
    7606:	47b0      	blx	r6
					PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA19;
    7608:	4c25      	ldr	r4, [pc, #148]	; (76a0 <socket_cb+0x530>)
    760a:	2580      	movs	r5, #128	; 0x80
    760c:	032d      	lsls	r5, r5, #12
    760e:	61a5      	str	r5, [r4, #24]
					delay_ms(1);
    7610:	2001      	movs	r0, #1
    7612:	47b0      	blx	r6
					PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA19;
    7614:	6165      	str	r5, [r4, #20]
					printf("RECV CALLED \r\n");
    7616:	4827      	ldr	r0, [pc, #156]	; (76b4 <socket_cb+0x544>)
    7618:	4b27      	ldr	r3, [pc, #156]	; (76b8 <socket_cb+0x548>)
    761a:	4798      	blx	r3
					sol_valve[4] = 50;
    761c:	4927      	ldr	r1, [pc, #156]	; (76bc <socket_cb+0x54c>)
    761e:	2332      	movs	r3, #50	; 0x32
    7620:	710b      	strb	r3, [r1, #4]
					sol_valve[5] = 50;				
    7622:	714b      	strb	r3, [r1, #5]
					send(tcp_client_socket, &sol_valve, sizeof(sol_valve), 0);				
    7624:	4b26      	ldr	r3, [pc, #152]	; (76c0 <socket_cb+0x550>)
    7626:	2000      	movs	r0, #0
    7628:	5618      	ldrsb	r0, [r3, r0]
    762a:	2300      	movs	r3, #0
    762c:	2206      	movs	r2, #6
    762e:	4c25      	ldr	r4, [pc, #148]	; (76c4 <socket_cb+0x554>)
    7630:	47a0      	blx	r4
					memset(arr,"",sizeof(arr));
    7632:	4d25      	ldr	r5, [pc, #148]	; (76c8 <socket_cb+0x558>)
    7634:	2203      	movs	r2, #3
    7636:	0029      	movs	r1, r5
    7638:	4824      	ldr	r0, [pc, #144]	; (76cc <socket_cb+0x55c>)
    763a:	4c25      	ldr	r4, [pc, #148]	; (76d0 <socket_cb+0x560>)
    763c:	47a0      	blx	r4
					memset(light,"",sizeof(light));
    763e:	2209      	movs	r2, #9
    7640:	0029      	movs	r1, r5
    7642:	4824      	ldr	r0, [pc, #144]	; (76d4 <socket_cb+0x564>)
    7644:	47a0      	blx	r4
				{
    7646:	e608      	b.n	725a <socket_cb+0xea>
						case 4:ser_data_out(0x04);
    7648:	2004      	movs	r0, #4
    764a:	4b13      	ldr	r3, [pc, #76]	; (7698 <socket_cb+0x528>)
    764c:	4798      	blx	r3
							   break;
    764e:	e7d5      	b.n	75fc <socket_cb+0x48c>
						case 6:ser_data_out(0x06);
    7650:	2006      	movs	r0, #6
    7652:	4b11      	ldr	r3, [pc, #68]	; (7698 <socket_cb+0x528>)
    7654:	4798      	blx	r3
							   break;
    7656:	e7d1      	b.n	75fc <socket_cb+0x48c>
						case 8:ser_data_out(0x08);
    7658:	2008      	movs	r0, #8
    765a:	4b0f      	ldr	r3, [pc, #60]	; (7698 <socket_cb+0x528>)
    765c:	4798      	blx	r3
							   break;
    765e:	e7cd      	b.n	75fc <socket_cb+0x48c>
						case 10:ser_data_out(0x0A);
    7660:	200a      	movs	r0, #10
    7662:	4b0d      	ldr	r3, [pc, #52]	; (7698 <socket_cb+0x528>)
    7664:	4798      	blx	r3
								break;
    7666:	e7c9      	b.n	75fc <socket_cb+0x48c>
						case 12:ser_data_out(0x0C);
    7668:	200c      	movs	r0, #12
    766a:	4b0b      	ldr	r3, [pc, #44]	; (7698 <socket_cb+0x528>)
    766c:	4798      	blx	r3
								break;
    766e:	e7c5      	b.n	75fc <socket_cb+0x48c>
						case 14:ser_data_out(0x0E);	
    7670:	200e      	movs	r0, #14
    7672:	4b09      	ldr	r3, [pc, #36]	; (7698 <socket_cb+0x528>)
    7674:	4798      	blx	r3
								break;
    7676:	e7c1      	b.n	75fc <socket_cb+0x48c>
						default:ser_data_out(0x00);
    7678:	2000      	movs	r0, #0
    767a:	4b07      	ldr	r3, [pc, #28]	; (7698 <socket_cb+0x528>)
    767c:	4798      	blx	r3
								break;
    767e:	e7bd      	b.n	75fc <socket_cb+0x48c>
					printf("socket_cb: recv error!\r\n");
    7680:	4815      	ldr	r0, [pc, #84]	; (76d8 <socket_cb+0x568>)
    7682:	4b0d      	ldr	r3, [pc, #52]	; (76b8 <socket_cb+0x548>)
    7684:	4798      	blx	r3
					close(tcp_client_socket);
    7686:	4c0e      	ldr	r4, [pc, #56]	; (76c0 <socket_cb+0x550>)
    7688:	2000      	movs	r0, #0
    768a:	5620      	ldrsb	r0, [r4, r0]
    768c:	4b13      	ldr	r3, [pc, #76]	; (76dc <socket_cb+0x56c>)
    768e:	4798      	blx	r3
					tcp_client_socket = -1;
    7690:	23ff      	movs	r3, #255	; 0xff
    7692:	7023      	strb	r3, [r4, #0]
}
    7694:	e5e1      	b.n	725a <socket_cb+0xea>
    7696:	46c0      	nop			; (mov r8, r8)
    7698:	00007111 	.word	0x00007111
    769c:	00003f71 	.word	0x00003f71
    76a0:	41004400 	.word	0x41004400
    76a4:	200003b8 	.word	0x200003b8
    76a8:	0000a2f4 	.word	0x0000a2f4
    76ac:	00007e45 	.word	0x00007e45
    76b0:	20000988 	.word	0x20000988
    76b4:	0000a33c 	.word	0x0000a33c
    76b8:	00007f61 	.word	0x00007f61
    76bc:	20000cc0 	.word	0x20000cc0
    76c0:	2000000d 	.word	0x2000000d
    76c4:	00002fb5 	.word	0x00002fb5
    76c8:	0000a42c 	.word	0x0000a42c
    76cc:	200003b4 	.word	0x200003b4
    76d0:	00007e33 	.word	0x00007e33
    76d4:	2000097c 	.word	0x2000097c
    76d8:	0000a34c 	.word	0x0000a34c
    76dc:	000030e1 	.word	0x000030e1

000076e0 <init_port>:

void init_port(void)
{
    76e0:	b570      	push	{r4, r5, r6, lr}
//	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA27;	// RS3485 ENABLE PIN CONTROL PORT
	
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA28;	// 74HC238D A0 PIN CONTROL PORT
    76e2:	4b0c      	ldr	r3, [pc, #48]	; (7714 <init_port+0x34>)
    76e4:	2680      	movs	r6, #128	; 0x80
    76e6:	0576      	lsls	r6, r6, #21
    76e8:	609e      	str	r6, [r3, #8]
	PORT->Group[1].DIRSET.bit.DIRSET=PORT_PB02; // 74HC238D A1 PIN CONTROL PORT
    76ea:	2504      	movs	r5, #4
    76ec:	2288      	movs	r2, #136	; 0x88
    76ee:	509d      	str	r5, [r3, r2]
//	PORT->Group[1].DIRSET.bit.DIRSET=PORT_PB03; // 74HC238D A2 PIN CONTROL PORT
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA19; // 74HC238D A2 PIN CONTROL PORT
    76f0:	2480      	movs	r4, #128	; 0x80
    76f2:	0324      	lsls	r4, r4, #12
    76f4:	609c      	str	r4, [r3, #8]
	
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA06; // 74HC573PW DS PIN CONTROL PORT
    76f6:	2040      	movs	r0, #64	; 0x40
    76f8:	6098      	str	r0, [r3, #8]
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA07; // 74HC573PW STCP PIN CONTROL PORT
    76fa:	2180      	movs	r1, #128	; 0x80
    76fc:	6099      	str	r1, [r3, #8]
//	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA08; // 74HC573PW SHCP PIN CONTROL PORT
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA18; // 74HC573PW SHCP PIN CONTROL PORT
    76fe:	2280      	movs	r2, #128	; 0x80
    7700:	02d2      	lsls	r2, r2, #11
    7702:	609a      	str	r2, [r3, #8]
	
//	PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA27;
	
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA28;
    7704:	615e      	str	r6, [r3, #20]
	PORT->Group[1].OUTCLR.bit.OUTCLR=PORT_PB02;
    7706:	2694      	movs	r6, #148	; 0x94
    7708:	519d      	str	r5, [r3, r6]
//	PORT->Group[1].OUTCLR.bit.OUTCLR=PORT_PB03;
//	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA19;
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA19;
    770a:	615c      	str	r4, [r3, #20]
	
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA06;
    770c:	6158      	str	r0, [r3, #20]
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA07;
    770e:	6159      	str	r1, [r3, #20]
//	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA08;
	PORT->Group[0].OUTCLR.bit.OUTCLR=PORT_PA18;
    7710:	615a      	str	r2, [r3, #20]
}
    7712:	bd70      	pop	{r4, r5, r6, pc}
    7714:	41004400 	.word	0x41004400

00007718 <main>:

/*
 * \brief Main function of the application
 */
int main(void)
{	
    7718:	b570      	push	{r4, r5, r6, lr}
    771a:	b08c      	sub	sp, #48	; 0x30
	tstrWifiInitParam param;
	int8_t ret;
	struct sockaddr_in addr;
	
	/* Initialize the board. */
	system_init();	// MCU 설정및 초기화 부분	
    771c:	4b77      	ldr	r3, [pc, #476]	; (78fc <main+0x1e4>)
    771e:	4798      	blx	r3
	
	/* Initialize GPIO. */
	init_port();
    7720:	4b77      	ldr	r3, [pc, #476]	; (7900 <main+0x1e8>)
    7722:	4798      	blx	r3
	
	/* Initialize the UART console. */
	modules_init();		// UART 설정및 초기화
    7724:	4b77      	ldr	r3, [pc, #476]	; (7904 <main+0x1ec>)
    7726:	4798      	blx	r3
	
	//! [TC_setup_init]
	configure_tc();
    7728:	4b77      	ldr	r3, [pc, #476]	; (7908 <main+0x1f0>)
    772a:	4798      	blx	r3
	configure_tc_callbacks();
    772c:	4b77      	ldr	r3, [pc, #476]	; (790c <main+0x1f4>)
    772e:	4798      	blx	r3
	//! [TC_setup_init]
		
	/* Zigbee Initialize */
	wireless_init();
    7730:	4b77      	ldr	r3, [pc, #476]	; (7910 <main+0x1f8>)
    7732:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();		// WINC1500 핀 설정 및 초기화
    7734:	4b77      	ldr	r3, [pc, #476]	; (7914 <main+0x1fc>)
    7736:	4798      	blx	r3

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
    7738:	ab02      	add	r3, sp, #8
    773a:	2202      	movs	r2, #2
    773c:	801a      	strh	r2, [r3, #0]
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
    773e:	4a76      	ldr	r2, [pc, #472]	; (7918 <main+0x200>)
    7740:	805a      	strh	r2, [r3, #2]

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));	// param 초기화
    7742:	2218      	movs	r2, #24
    7744:	2100      	movs	r1, #0
    7746:	a806      	add	r0, sp, #24
    7748:	4b74      	ldr	r3, [pc, #464]	; (791c <main+0x204>)
    774a:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    774c:	4b74      	ldr	r3, [pc, #464]	; (7920 <main+0x208>)
    774e:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
    7750:	a806      	add	r0, sp, #24
    7752:	4b74      	ldr	r3, [pc, #464]	; (7924 <main+0x20c>)
    7754:	4798      	blx	r3
    7756:	1e01      	subs	r1, r0, #0
	
	if(M2M_SUCCESS != ret)
    7758:	d003      	beq.n	7762 <main+0x4a>
	{
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    775a:	4873      	ldr	r0, [pc, #460]	; (7928 <main+0x210>)
    775c:	4b73      	ldr	r3, [pc, #460]	; (792c <main+0x214>)
    775e:	4798      	blx	r3
    7760:	e7fe      	b.n	7760 <main+0x48>
		while(1);
	}

	/* Initialize socket module */
	socketInit();
    7762:	4b73      	ldr	r3, [pc, #460]	; (7930 <main+0x218>)
    7764:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
    7766:	2100      	movs	r1, #0
    7768:	4872      	ldr	r0, [pc, #456]	; (7934 <main+0x21c>)
    776a:	4b73      	ldr	r3, [pc, #460]	; (7938 <main+0x220>)
    776c:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID,sizeof(MAIN_WLAN_SSID),MAIN_WLAN_AUTH,(char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    776e:	23ff      	movs	r3, #255	; 0xff
    7770:	9300      	str	r3, [sp, #0]
    7772:	4b72      	ldr	r3, [pc, #456]	; (793c <main+0x224>)
    7774:	2202      	movs	r2, #2
    7776:	210e      	movs	r1, #14
    7778:	4871      	ldr	r0, [pc, #452]	; (7940 <main+0x228>)
    777a:	4c72      	ldr	r4, [pc, #456]	; (7944 <main+0x22c>)
    777c:	47a0      	blx	r4

	sol_valve[0]=50;
    777e:	4b72      	ldr	r3, [pc, #456]	; (7948 <main+0x230>)
    7780:	2232      	movs	r2, #50	; 0x32
    7782:	701a      	strb	r2, [r3, #0]
	sol_valve[1]=50;
    7784:	705a      	strb	r2, [r3, #1]
	sol_valve[2]=50;
    7786:	709a      	strb	r2, [r3, #2]
	sol_valve[3]=50;
    7788:	70da      	strb	r2, [r3, #3]
	sol_valve[4]=50;
    778a:	711a      	strb	r2, [r3, #4]
	sol_valve[5]=50;
    778c:	715a      	strb	r2, [r3, #5]
	cpu_irq_enable();
    778e:	3a31      	subs	r2, #49	; 0x31
    7790:	4b6e      	ldr	r3, [pc, #440]	; (794c <main+0x234>)
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f3bf 8f5f 	dmb	sy
    7798:	b662      	cpsie	i
	//! [enable_global_interrupts]
	
	while(1)
	{	
		// Handle pending events from network controller. //
		m2m_wifi_handle_events(NULL);
    779a:	4d6d      	ldr	r5, [pc, #436]	; (7950 <main+0x238>)

		if(wifi_connected == M2M_WIFI_CONNECTED) 
    779c:	4c6d      	ldr	r4, [pc, #436]	; (7954 <main+0x23c>)
				// Bind service //
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
			}		
		}
		
		if(buff[0] == 35)
    779e:	4e6e      	ldr	r6, [pc, #440]	; (7958 <main+0x240>)
    77a0:	e029      	b.n	77f6 <main+0xde>
			if(tcp_server_socket < 0) 
    77a2:	4b6e      	ldr	r3, [pc, #440]	; (795c <main+0x244>)
    77a4:	781b      	ldrb	r3, [r3, #0]
    77a6:	2b7f      	cmp	r3, #127	; 0x7f
    77a8:	d92a      	bls.n	7800 <main+0xe8>
				if((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
    77aa:	2200      	movs	r2, #0
    77ac:	2101      	movs	r1, #1
    77ae:	2002      	movs	r0, #2
    77b0:	4b6b      	ldr	r3, [pc, #428]	; (7960 <main+0x248>)
    77b2:	4798      	blx	r3
    77b4:	4b69      	ldr	r3, [pc, #420]	; (795c <main+0x244>)
    77b6:	7018      	strb	r0, [r3, #0]
    77b8:	2800      	cmp	r0, #0
    77ba:	db04      	blt.n	77c6 <main+0xae>
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
    77bc:	2210      	movs	r2, #16
    77be:	a902      	add	r1, sp, #8
    77c0:	4b68      	ldr	r3, [pc, #416]	; (7964 <main+0x24c>)
    77c2:	4798      	blx	r3
    77c4:	e01c      	b.n	7800 <main+0xe8>
					printf("main: failed to create TCP server socket error!\r\n");
    77c6:	4868      	ldr	r0, [pc, #416]	; (7968 <main+0x250>)
    77c8:	4b68      	ldr	r3, [pc, #416]	; (796c <main+0x254>)
    77ca:	4798      	blx	r3
					continue;
    77cc:	e013      	b.n	77f6 <main+0xde>
			switch(buff[1])
			{
				//printf("buff[2]:%d \r\n",buff[2]);
				
				case 1:
					if(buff[2]=='o')
    77ce:	4b62      	ldr	r3, [pc, #392]	; (7958 <main+0x240>)
    77d0:	789b      	ldrb	r3, [r3, #2]
    77d2:	2b6f      	cmp	r3, #111	; 0x6f
    77d4:	d021      	beq.n	781a <main+0x102>
					{
						//printf("1 open\n");
						sol_valve[0] = 48;
					}
					else if(buff[2] =='c')
    77d6:	2b63      	cmp	r3, #99	; 0x63
    77d8:	d023      	beq.n	7822 <main+0x10a>
					{
						//printf("1 close\n");
						sol_valve[0] = 49;
					}
					else if(buff[2] == 'e')
    77da:	2b65      	cmp	r3, #101	; 0x65
    77dc:	d025      	beq.n	782a <main+0x112>
						sol_valve[5] = 50;
					}
					break;
			}
			
			buff[0] =50;
    77de:	4b5e      	ldr	r3, [pc, #376]	; (7958 <main+0x240>)
    77e0:	2232      	movs	r2, #50	; 0x32
    77e2:	701a      	strb	r2, [r3, #0]
			buff[1] =50;
    77e4:	705a      	strb	r2, [r3, #1]
			buff[2] =50;
    77e6:	709a      	strb	r2, [r3, #2]
			buff[3] =50;	
    77e8:	70da      	strb	r2, [r3, #3]
 *  this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    77ea:	4b61      	ldr	r3, [pc, #388]	; (7970 <main+0x258>)
    77ec:	4798      	blx	r3
	tal_task();
    77ee:	4b61      	ldr	r3, [pc, #388]	; (7974 <main+0x25c>)
    77f0:	4798      	blx	r3
 * \brief Application task
 */
 void app_task(void)
{
//	usr_wireless_app_task();
	init_data_reception();
    77f2:	4b61      	ldr	r3, [pc, #388]	; (7978 <main+0x260>)
    77f4:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
    77f6:	2000      	movs	r0, #0
    77f8:	47a8      	blx	r5
		if(wifi_connected == M2M_WIFI_CONNECTED) 
    77fa:	7823      	ldrb	r3, [r4, #0]
    77fc:	2b01      	cmp	r3, #1
    77fe:	d0d0      	beq.n	77a2 <main+0x8a>
		if(buff[0] == 35)
    7800:	7833      	ldrb	r3, [r6, #0]
    7802:	2b23      	cmp	r3, #35	; 0x23
    7804:	d1f1      	bne.n	77ea <main+0xd2>
			buff[1] = buff[1]-48;
    7806:	4b54      	ldr	r3, [pc, #336]	; (7958 <main+0x240>)
    7808:	785b      	ldrb	r3, [r3, #1]
    780a:	3b30      	subs	r3, #48	; 0x30
    780c:	b2db      	uxtb	r3, r3
			switch(buff[1])
    780e:	2b06      	cmp	r3, #6
    7810:	d8e5      	bhi.n	77de <main+0xc6>
    7812:	009b      	lsls	r3, r3, #2
    7814:	4a59      	ldr	r2, [pc, #356]	; (797c <main+0x264>)
    7816:	58d3      	ldr	r3, [r2, r3]
    7818:	469f      	mov	pc, r3
						sol_valve[0] = 48;
    781a:	2230      	movs	r2, #48	; 0x30
    781c:	4b4a      	ldr	r3, [pc, #296]	; (7948 <main+0x230>)
    781e:	701a      	strb	r2, [r3, #0]
    7820:	e7dd      	b.n	77de <main+0xc6>
						sol_valve[0] = 49;
    7822:	2231      	movs	r2, #49	; 0x31
    7824:	4b48      	ldr	r3, [pc, #288]	; (7948 <main+0x230>)
    7826:	701a      	strb	r2, [r3, #0]
    7828:	e7d9      	b.n	77de <main+0xc6>
						sol_valve[0] = 50;
    782a:	2232      	movs	r2, #50	; 0x32
    782c:	4b46      	ldr	r3, [pc, #280]	; (7948 <main+0x230>)
    782e:	701a      	strb	r2, [r3, #0]
    7830:	e7d5      	b.n	77de <main+0xc6>
					if(buff[2]=='o')
    7832:	4b49      	ldr	r3, [pc, #292]	; (7958 <main+0x240>)
    7834:	789b      	ldrb	r3, [r3, #2]
    7836:	2b6f      	cmp	r3, #111	; 0x6f
    7838:	d007      	beq.n	784a <main+0x132>
					else if(buff[2] =='c')
    783a:	2b63      	cmp	r3, #99	; 0x63
    783c:	d009      	beq.n	7852 <main+0x13a>
					else if(buff[2] == 'e')
    783e:	2b65      	cmp	r3, #101	; 0x65
    7840:	d1cd      	bne.n	77de <main+0xc6>
						sol_valve[1] = 50;
    7842:	2232      	movs	r2, #50	; 0x32
    7844:	4b40      	ldr	r3, [pc, #256]	; (7948 <main+0x230>)
    7846:	705a      	strb	r2, [r3, #1]
    7848:	e7c9      	b.n	77de <main+0xc6>
						sol_valve[1] = 48;
    784a:	2230      	movs	r2, #48	; 0x30
    784c:	4b3e      	ldr	r3, [pc, #248]	; (7948 <main+0x230>)
    784e:	705a      	strb	r2, [r3, #1]
    7850:	e7c5      	b.n	77de <main+0xc6>
						sol_valve[1] = 49;
    7852:	2231      	movs	r2, #49	; 0x31
    7854:	4b3c      	ldr	r3, [pc, #240]	; (7948 <main+0x230>)
    7856:	705a      	strb	r2, [r3, #1]
    7858:	e7c1      	b.n	77de <main+0xc6>
					if(buff[2]=='o')
    785a:	4b3f      	ldr	r3, [pc, #252]	; (7958 <main+0x240>)
    785c:	789b      	ldrb	r3, [r3, #2]
    785e:	2b6f      	cmp	r3, #111	; 0x6f
    7860:	d007      	beq.n	7872 <main+0x15a>
					else if(buff[2] =='c')
    7862:	2b63      	cmp	r3, #99	; 0x63
    7864:	d009      	beq.n	787a <main+0x162>
					else if(buff[2] == 'e')
    7866:	2b65      	cmp	r3, #101	; 0x65
    7868:	d1b9      	bne.n	77de <main+0xc6>
						sol_valve[2] = 50;
    786a:	2232      	movs	r2, #50	; 0x32
    786c:	4b36      	ldr	r3, [pc, #216]	; (7948 <main+0x230>)
    786e:	709a      	strb	r2, [r3, #2]
    7870:	e7b5      	b.n	77de <main+0xc6>
						sol_valve[2] = 48;
    7872:	2230      	movs	r2, #48	; 0x30
    7874:	4b34      	ldr	r3, [pc, #208]	; (7948 <main+0x230>)
    7876:	709a      	strb	r2, [r3, #2]
    7878:	e7b1      	b.n	77de <main+0xc6>
						sol_valve[2] = 49;
    787a:	2231      	movs	r2, #49	; 0x31
    787c:	4b32      	ldr	r3, [pc, #200]	; (7948 <main+0x230>)
    787e:	709a      	strb	r2, [r3, #2]
    7880:	e7ad      	b.n	77de <main+0xc6>
					if(buff[2]=='o')
    7882:	4b35      	ldr	r3, [pc, #212]	; (7958 <main+0x240>)
    7884:	789b      	ldrb	r3, [r3, #2]
    7886:	2b6f      	cmp	r3, #111	; 0x6f
    7888:	d007      	beq.n	789a <main+0x182>
					else if(buff[2] =='c')
    788a:	2b63      	cmp	r3, #99	; 0x63
    788c:	d009      	beq.n	78a2 <main+0x18a>
					else if(buff[2] == 'e')
    788e:	2b65      	cmp	r3, #101	; 0x65
    7890:	d1a5      	bne.n	77de <main+0xc6>
						sol_valve[3] = 50;
    7892:	2232      	movs	r2, #50	; 0x32
    7894:	4b2c      	ldr	r3, [pc, #176]	; (7948 <main+0x230>)
    7896:	70da      	strb	r2, [r3, #3]
    7898:	e7a1      	b.n	77de <main+0xc6>
						sol_valve[3] = 48;						
    789a:	2230      	movs	r2, #48	; 0x30
    789c:	4b2a      	ldr	r3, [pc, #168]	; (7948 <main+0x230>)
    789e:	70da      	strb	r2, [r3, #3]
    78a0:	e79d      	b.n	77de <main+0xc6>
						sol_valve[3] = 49;
    78a2:	2231      	movs	r2, #49	; 0x31
    78a4:	4b28      	ldr	r3, [pc, #160]	; (7948 <main+0x230>)
    78a6:	70da      	strb	r2, [r3, #3]
    78a8:	e799      	b.n	77de <main+0xc6>
					if(buff[2]=='o')
    78aa:	4b2b      	ldr	r3, [pc, #172]	; (7958 <main+0x240>)
    78ac:	789b      	ldrb	r3, [r3, #2]
    78ae:	2b6f      	cmp	r3, #111	; 0x6f
    78b0:	d007      	beq.n	78c2 <main+0x1aa>
					else if(buff[2] =='c')
    78b2:	2b63      	cmp	r3, #99	; 0x63
    78b4:	d009      	beq.n	78ca <main+0x1b2>
					else if(buff[2] == 'e')
    78b6:	2b65      	cmp	r3, #101	; 0x65
    78b8:	d191      	bne.n	77de <main+0xc6>
						sol_valve[4] = 50;
    78ba:	2232      	movs	r2, #50	; 0x32
    78bc:	4b22      	ldr	r3, [pc, #136]	; (7948 <main+0x230>)
    78be:	711a      	strb	r2, [r3, #4]
    78c0:	e78d      	b.n	77de <main+0xc6>
						sol_valve[4] = 48;
    78c2:	2230      	movs	r2, #48	; 0x30
    78c4:	4b20      	ldr	r3, [pc, #128]	; (7948 <main+0x230>)
    78c6:	711a      	strb	r2, [r3, #4]
    78c8:	e789      	b.n	77de <main+0xc6>
						sol_valve[4] = 49;
    78ca:	2231      	movs	r2, #49	; 0x31
    78cc:	4b1e      	ldr	r3, [pc, #120]	; (7948 <main+0x230>)
    78ce:	711a      	strb	r2, [r3, #4]
    78d0:	e785      	b.n	77de <main+0xc6>
					if(buff[2]=='o')
    78d2:	4b21      	ldr	r3, [pc, #132]	; (7958 <main+0x240>)
    78d4:	789b      	ldrb	r3, [r3, #2]
    78d6:	2b6f      	cmp	r3, #111	; 0x6f
    78d8:	d008      	beq.n	78ec <main+0x1d4>
					else if(buff[2] =='c')
    78da:	2b63      	cmp	r3, #99	; 0x63
    78dc:	d00a      	beq.n	78f4 <main+0x1dc>
					else if(buff[2] == 'e')
    78de:	2b65      	cmp	r3, #101	; 0x65
    78e0:	d000      	beq.n	78e4 <main+0x1cc>
    78e2:	e77c      	b.n	77de <main+0xc6>
						sol_valve[5] = 50;
    78e4:	2232      	movs	r2, #50	; 0x32
    78e6:	4b18      	ldr	r3, [pc, #96]	; (7948 <main+0x230>)
    78e8:	715a      	strb	r2, [r3, #5]
    78ea:	e778      	b.n	77de <main+0xc6>
						sol_valve[5] = 48;
    78ec:	2230      	movs	r2, #48	; 0x30
    78ee:	4b16      	ldr	r3, [pc, #88]	; (7948 <main+0x230>)
    78f0:	715a      	strb	r2, [r3, #5]
    78f2:	e774      	b.n	77de <main+0xc6>
						sol_valve[5] = 49;
    78f4:	2231      	movs	r2, #49	; 0x31
    78f6:	4b14      	ldr	r3, [pc, #80]	; (7948 <main+0x230>)
    78f8:	715a      	strb	r2, [r3, #5]
    78fa:	e770      	b.n	77de <main+0xc6>
    78fc:	0000523d 	.word	0x0000523d
    7900:	000076e1 	.word	0x000076e1
    7904:	00003ef9 	.word	0x00003ef9
    7908:	0000705d 	.word	0x0000705d
    790c:	000070c5 	.word	0x000070c5
    7910:	00003e15 	.word	0x00003e15
    7914:	00000169 	.word	0x00000169
    7918:	ffffb80b 	.word	0xffffb80b
    791c:	00007e33 	.word	0x00007e33
    7920:	00006fd5 	.word	0x00006fd5
    7924:	000010a5 	.word	0x000010a5
    7928:	0000a0e8 	.word	0x0000a0e8
    792c:	00007e45 	.word	0x00007e45
    7930:	00002cd5 	.word	0x00002cd5
    7934:	00007171 	.word	0x00007171
    7938:	00002d19 	.word	0x00002d19
    793c:	0000a3dc 	.word	0x0000a3dc
    7940:	0000a3e8 	.word	0x0000a3e8
    7944:	00001479 	.word	0x00001479
    7948:	20000cc0 	.word	0x20000cc0
    794c:	2000000c 	.word	0x2000000c
    7950:	000011d9 	.word	0x000011d9
    7954:	2000098c 	.word	0x2000098c
    7958:	200003c0 	.word	0x200003c0
    795c:	2000000e 	.word	0x2000000e
    7960:	00002d2d 	.word	0x00002d2d
    7964:	00002eb1 	.word	0x00002eb1
    7968:	0000a110 	.word	0x0000a110
    796c:	00007f61 	.word	0x00007f61
    7970:	00005959 	.word	0x00005959
    7974:	00005fa9 	.word	0x00005fa9
    7978:	00003e79 	.word	0x00003e79
    797c:	0000a0cc 	.word	0x0000a0cc

00007980 <tal_tx_frame_done_cb>:
 * \brief This method (callback) is called when a frame has been transmitted by the transceiver
 * \param status  Status of frame transmission i.e MAC_SUCCESS,MAC_NO_ACK,CHANNEL_ACCESS_FAILURE etc
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
    7980:	b510      	push	{r4, lr}
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    7982:	4b01      	ldr	r3, [pc, #4]	; (7988 <tal_tx_frame_done_cb+0x8>)
    7984:	4798      	blx	r3
}
    7986:	bd10      	pop	{r4, pc}
    7988:	00003e11 	.word	0x00003e11

0000798c <tal_rx_frame_cb>:
/*
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    798c:	b510      	push	{r4, lr}
    798e:	0004      	movs	r4, r0
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    7990:	4b07      	ldr	r3, [pc, #28]	; (79b0 <tal_rx_frame_cb+0x24>)
    7992:	4798      	blx	r3
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    7994:	7860      	ldrb	r0, [r4, #1]
    7996:	78a3      	ldrb	r3, [r4, #2]
    7998:	021b      	lsls	r3, r3, #8
    799a:	4303      	orrs	r3, r0
    799c:	78e0      	ldrb	r0, [r4, #3]
    799e:	0400      	lsls	r0, r0, #16
    79a0:	4303      	orrs	r3, r0
    79a2:	7920      	ldrb	r0, [r4, #4]
    79a4:	0600      	lsls	r0, r0, #24
    79a6:	4318      	orrs	r0, r3
    79a8:	4b02      	ldr	r3, [pc, #8]	; (79b4 <tal_rx_frame_cb+0x28>)
    79aa:	4798      	blx	r3
    79ac:	bd10      	pop	{r4, pc}
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	00003de9 	.word	0x00003de9
    79b4:	000059e9 	.word	0x000059e9

000079b8 <common_tc_read_count>:
    79b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79ba:	4b0d      	ldr	r3, [pc, #52]	; (79f0 <common_tc_read_count+0x38>)
    79bc:	4798      	blx	r3
    79be:	4b0d      	ldr	r3, [pc, #52]	; (79f4 <common_tc_read_count+0x3c>)
    79c0:	781b      	ldrb	r3, [r3, #0]
    79c2:	2b00      	cmp	r3, #0
    79c4:	d00e      	beq.n	79e4 <common_tc_read_count+0x2c>
    79c6:	4b0c      	ldr	r3, [pc, #48]	; (79f8 <common_tc_read_count+0x40>)
    79c8:	781d      	ldrb	r5, [r3, #0]
    79ca:	4b0a      	ldr	r3, [pc, #40]	; (79f4 <common_tc_read_count+0x3c>)
    79cc:	781f      	ldrb	r7, [r3, #0]
    79ce:	4c0b      	ldr	r4, [pc, #44]	; (79fc <common_tc_read_count+0x44>)
    79d0:	1c29      	adds	r1, r5, #0
    79d2:	47a0      	blx	r4
    79d4:	1c06      	adds	r6, r0, #0
    79d6:	480a      	ldr	r0, [pc, #40]	; (7a00 <common_tc_read_count+0x48>)
    79d8:	1c29      	adds	r1, r5, #0
    79da:	47a0      	blx	r4
    79dc:	4378      	muls	r0, r7
    79de:	1830      	adds	r0, r6, r0
    79e0:	b280      	uxth	r0, r0
    79e2:	e004      	b.n	79ee <common_tc_read_count+0x36>
    79e4:	4b04      	ldr	r3, [pc, #16]	; (79f8 <common_tc_read_count+0x40>)
    79e6:	7819      	ldrb	r1, [r3, #0]
    79e8:	4b04      	ldr	r3, [pc, #16]	; (79fc <common_tc_read_count+0x44>)
    79ea:	4798      	blx	r3
    79ec:	b280      	uxth	r0, r0
    79ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79f0:	00006a19 	.word	0x00006a19
    79f4:	20000990 	.word	0x20000990
    79f8:	20000cf0 	.word	0x20000cf0
    79fc:	00007bad 	.word	0x00007bad
    7a00:	0000ffff 	.word	0x0000ffff

00007a04 <common_tc_compare_stop>:
    7a04:	b508      	push	{r3, lr}
    7a06:	4b05      	ldr	r3, [pc, #20]	; (7a1c <common_tc_compare_stop+0x18>)
    7a08:	4798      	blx	r3
    7a0a:	4b05      	ldr	r3, [pc, #20]	; (7a20 <common_tc_compare_stop+0x1c>)
    7a0c:	4798      	blx	r3
    7a0e:	4b05      	ldr	r3, [pc, #20]	; (7a24 <common_tc_compare_stop+0x20>)
    7a10:	2200      	movs	r2, #0
    7a12:	605a      	str	r2, [r3, #4]
    7a14:	811a      	strh	r2, [r3, #8]
    7a16:	4b04      	ldr	r3, [pc, #16]	; (7a28 <common_tc_compare_stop+0x24>)
    7a18:	4798      	blx	r3
    7a1a:	bd08      	pop	{r3, pc}
    7a1c:	00006a2d 	.word	0x00006a2d
    7a20:	00006a95 	.word	0x00006a95
    7a24:	20000990 	.word	0x20000990
    7a28:	00006ab9 	.word	0x00006ab9

00007a2c <common_tc_delay>:
    7a2c:	b510      	push	{r4, lr}
    7a2e:	1c04      	adds	r4, r0, #0
    7a30:	4b13      	ldr	r3, [pc, #76]	; (7a80 <common_tc_delay+0x54>)
    7a32:	4798      	blx	r3
    7a34:	4b13      	ldr	r3, [pc, #76]	; (7a84 <common_tc_delay+0x58>)
    7a36:	781a      	ldrb	r2, [r3, #0]
    7a38:	4362      	muls	r2, r4
    7a3a:	1881      	adds	r1, r0, r2
    7a3c:	4b12      	ldr	r3, [pc, #72]	; (7a88 <common_tc_delay+0x5c>)
    7a3e:	6059      	str	r1, [r3, #4]
    7a40:	6859      	ldr	r1, [r3, #4]
    7a42:	0c09      	lsrs	r1, r1, #16
    7a44:	6059      	str	r1, [r3, #4]
    7a46:	685b      	ldr	r3, [r3, #4]
    7a48:	2b00      	cmp	r3, #0
    7a4a:	d007      	beq.n	7a5c <common_tc_delay+0x30>
    7a4c:	4b0e      	ldr	r3, [pc, #56]	; (7a88 <common_tc_delay+0x5c>)
    7a4e:	6859      	ldr	r1, [r3, #4]
    7a50:	3201      	adds	r2, #1
    7a52:	1880      	adds	r0, r0, r2
    7a54:	8118      	strh	r0, [r3, #8]
    7a56:	4b0d      	ldr	r3, [pc, #52]	; (7a8c <common_tc_delay+0x60>)
    7a58:	4798      	blx	r3
    7a5a:	e004      	b.n	7a66 <common_tc_delay+0x3a>
    7a5c:	1882      	adds	r2, r0, r2
    7a5e:	4b0a      	ldr	r3, [pc, #40]	; (7a88 <common_tc_delay+0x5c>)
    7a60:	811a      	strh	r2, [r3, #8]
    7a62:	4b0b      	ldr	r3, [pc, #44]	; (7a90 <common_tc_delay+0x64>)
    7a64:	4798      	blx	r3
    7a66:	4b08      	ldr	r3, [pc, #32]	; (7a88 <common_tc_delay+0x5c>)
    7a68:	891b      	ldrh	r3, [r3, #8]
    7a6a:	2b63      	cmp	r3, #99	; 0x63
    7a6c:	d802      	bhi.n	7a74 <common_tc_delay+0x48>
    7a6e:	3364      	adds	r3, #100	; 0x64
    7a70:	4a05      	ldr	r2, [pc, #20]	; (7a88 <common_tc_delay+0x5c>)
    7a72:	8113      	strh	r3, [r2, #8]
    7a74:	4b04      	ldr	r3, [pc, #16]	; (7a88 <common_tc_delay+0x5c>)
    7a76:	8918      	ldrh	r0, [r3, #8]
    7a78:	4b06      	ldr	r3, [pc, #24]	; (7a94 <common_tc_delay+0x68>)
    7a7a:	4798      	blx	r3
    7a7c:	bd10      	pop	{r4, pc}
    7a7e:	46c0      	nop			; (mov r8, r8)
    7a80:	00006a19 	.word	0x00006a19
    7a84:	20000cf0 	.word	0x20000cf0
    7a88:	20000990 	.word	0x20000990
    7a8c:	00006a2d 	.word	0x00006a2d
    7a90:	00006a41 	.word	0x00006a41
    7a94:	00006a7d 	.word	0x00006a7d

00007a98 <__udivsi3>:
    7a98:	2200      	movs	r2, #0
    7a9a:	0843      	lsrs	r3, r0, #1
    7a9c:	428b      	cmp	r3, r1
    7a9e:	d374      	bcc.n	7b8a <__udivsi3+0xf2>
    7aa0:	0903      	lsrs	r3, r0, #4
    7aa2:	428b      	cmp	r3, r1
    7aa4:	d35f      	bcc.n	7b66 <__udivsi3+0xce>
    7aa6:	0a03      	lsrs	r3, r0, #8
    7aa8:	428b      	cmp	r3, r1
    7aaa:	d344      	bcc.n	7b36 <__udivsi3+0x9e>
    7aac:	0b03      	lsrs	r3, r0, #12
    7aae:	428b      	cmp	r3, r1
    7ab0:	d328      	bcc.n	7b04 <__udivsi3+0x6c>
    7ab2:	0c03      	lsrs	r3, r0, #16
    7ab4:	428b      	cmp	r3, r1
    7ab6:	d30d      	bcc.n	7ad4 <__udivsi3+0x3c>
    7ab8:	22ff      	movs	r2, #255	; 0xff
    7aba:	0209      	lsls	r1, r1, #8
    7abc:	ba12      	rev	r2, r2
    7abe:	0c03      	lsrs	r3, r0, #16
    7ac0:	428b      	cmp	r3, r1
    7ac2:	d302      	bcc.n	7aca <__udivsi3+0x32>
    7ac4:	1212      	asrs	r2, r2, #8
    7ac6:	0209      	lsls	r1, r1, #8
    7ac8:	d065      	beq.n	7b96 <__udivsi3+0xfe>
    7aca:	0b03      	lsrs	r3, r0, #12
    7acc:	428b      	cmp	r3, r1
    7ace:	d319      	bcc.n	7b04 <__udivsi3+0x6c>
    7ad0:	e000      	b.n	7ad4 <__udivsi3+0x3c>
    7ad2:	0a09      	lsrs	r1, r1, #8
    7ad4:	0bc3      	lsrs	r3, r0, #15
    7ad6:	428b      	cmp	r3, r1
    7ad8:	d301      	bcc.n	7ade <__udivsi3+0x46>
    7ada:	03cb      	lsls	r3, r1, #15
    7adc:	1ac0      	subs	r0, r0, r3
    7ade:	4152      	adcs	r2, r2
    7ae0:	0b83      	lsrs	r3, r0, #14
    7ae2:	428b      	cmp	r3, r1
    7ae4:	d301      	bcc.n	7aea <__udivsi3+0x52>
    7ae6:	038b      	lsls	r3, r1, #14
    7ae8:	1ac0      	subs	r0, r0, r3
    7aea:	4152      	adcs	r2, r2
    7aec:	0b43      	lsrs	r3, r0, #13
    7aee:	428b      	cmp	r3, r1
    7af0:	d301      	bcc.n	7af6 <__udivsi3+0x5e>
    7af2:	034b      	lsls	r3, r1, #13
    7af4:	1ac0      	subs	r0, r0, r3
    7af6:	4152      	adcs	r2, r2
    7af8:	0b03      	lsrs	r3, r0, #12
    7afa:	428b      	cmp	r3, r1
    7afc:	d301      	bcc.n	7b02 <__udivsi3+0x6a>
    7afe:	030b      	lsls	r3, r1, #12
    7b00:	1ac0      	subs	r0, r0, r3
    7b02:	4152      	adcs	r2, r2
    7b04:	0ac3      	lsrs	r3, r0, #11
    7b06:	428b      	cmp	r3, r1
    7b08:	d301      	bcc.n	7b0e <__udivsi3+0x76>
    7b0a:	02cb      	lsls	r3, r1, #11
    7b0c:	1ac0      	subs	r0, r0, r3
    7b0e:	4152      	adcs	r2, r2
    7b10:	0a83      	lsrs	r3, r0, #10
    7b12:	428b      	cmp	r3, r1
    7b14:	d301      	bcc.n	7b1a <__udivsi3+0x82>
    7b16:	028b      	lsls	r3, r1, #10
    7b18:	1ac0      	subs	r0, r0, r3
    7b1a:	4152      	adcs	r2, r2
    7b1c:	0a43      	lsrs	r3, r0, #9
    7b1e:	428b      	cmp	r3, r1
    7b20:	d301      	bcc.n	7b26 <__udivsi3+0x8e>
    7b22:	024b      	lsls	r3, r1, #9
    7b24:	1ac0      	subs	r0, r0, r3
    7b26:	4152      	adcs	r2, r2
    7b28:	0a03      	lsrs	r3, r0, #8
    7b2a:	428b      	cmp	r3, r1
    7b2c:	d301      	bcc.n	7b32 <__udivsi3+0x9a>
    7b2e:	020b      	lsls	r3, r1, #8
    7b30:	1ac0      	subs	r0, r0, r3
    7b32:	4152      	adcs	r2, r2
    7b34:	d2cd      	bcs.n	7ad2 <__udivsi3+0x3a>
    7b36:	09c3      	lsrs	r3, r0, #7
    7b38:	428b      	cmp	r3, r1
    7b3a:	d301      	bcc.n	7b40 <__udivsi3+0xa8>
    7b3c:	01cb      	lsls	r3, r1, #7
    7b3e:	1ac0      	subs	r0, r0, r3
    7b40:	4152      	adcs	r2, r2
    7b42:	0983      	lsrs	r3, r0, #6
    7b44:	428b      	cmp	r3, r1
    7b46:	d301      	bcc.n	7b4c <__udivsi3+0xb4>
    7b48:	018b      	lsls	r3, r1, #6
    7b4a:	1ac0      	subs	r0, r0, r3
    7b4c:	4152      	adcs	r2, r2
    7b4e:	0943      	lsrs	r3, r0, #5
    7b50:	428b      	cmp	r3, r1
    7b52:	d301      	bcc.n	7b58 <__udivsi3+0xc0>
    7b54:	014b      	lsls	r3, r1, #5
    7b56:	1ac0      	subs	r0, r0, r3
    7b58:	4152      	adcs	r2, r2
    7b5a:	0903      	lsrs	r3, r0, #4
    7b5c:	428b      	cmp	r3, r1
    7b5e:	d301      	bcc.n	7b64 <__udivsi3+0xcc>
    7b60:	010b      	lsls	r3, r1, #4
    7b62:	1ac0      	subs	r0, r0, r3
    7b64:	4152      	adcs	r2, r2
    7b66:	08c3      	lsrs	r3, r0, #3
    7b68:	428b      	cmp	r3, r1
    7b6a:	d301      	bcc.n	7b70 <__udivsi3+0xd8>
    7b6c:	00cb      	lsls	r3, r1, #3
    7b6e:	1ac0      	subs	r0, r0, r3
    7b70:	4152      	adcs	r2, r2
    7b72:	0883      	lsrs	r3, r0, #2
    7b74:	428b      	cmp	r3, r1
    7b76:	d301      	bcc.n	7b7c <__udivsi3+0xe4>
    7b78:	008b      	lsls	r3, r1, #2
    7b7a:	1ac0      	subs	r0, r0, r3
    7b7c:	4152      	adcs	r2, r2
    7b7e:	0843      	lsrs	r3, r0, #1
    7b80:	428b      	cmp	r3, r1
    7b82:	d301      	bcc.n	7b88 <__udivsi3+0xf0>
    7b84:	004b      	lsls	r3, r1, #1
    7b86:	1ac0      	subs	r0, r0, r3
    7b88:	4152      	adcs	r2, r2
    7b8a:	1a41      	subs	r1, r0, r1
    7b8c:	d200      	bcs.n	7b90 <__udivsi3+0xf8>
    7b8e:	4601      	mov	r1, r0
    7b90:	4152      	adcs	r2, r2
    7b92:	4610      	mov	r0, r2
    7b94:	4770      	bx	lr
    7b96:	e7ff      	b.n	7b98 <__udivsi3+0x100>
    7b98:	b501      	push	{r0, lr}
    7b9a:	2000      	movs	r0, #0
    7b9c:	f000 f8f0 	bl	7d80 <__aeabi_idiv0>
    7ba0:	bd02      	pop	{r1, pc}
    7ba2:	46c0      	nop			; (mov r8, r8)

00007ba4 <__aeabi_uidivmod>:
    7ba4:	2900      	cmp	r1, #0
    7ba6:	d0f7      	beq.n	7b98 <__udivsi3+0x100>
    7ba8:	e776      	b.n	7a98 <__udivsi3>
    7baa:	4770      	bx	lr

00007bac <__divsi3>:
    7bac:	4603      	mov	r3, r0
    7bae:	430b      	orrs	r3, r1
    7bb0:	d47f      	bmi.n	7cb2 <__divsi3+0x106>
    7bb2:	2200      	movs	r2, #0
    7bb4:	0843      	lsrs	r3, r0, #1
    7bb6:	428b      	cmp	r3, r1
    7bb8:	d374      	bcc.n	7ca4 <__divsi3+0xf8>
    7bba:	0903      	lsrs	r3, r0, #4
    7bbc:	428b      	cmp	r3, r1
    7bbe:	d35f      	bcc.n	7c80 <__divsi3+0xd4>
    7bc0:	0a03      	lsrs	r3, r0, #8
    7bc2:	428b      	cmp	r3, r1
    7bc4:	d344      	bcc.n	7c50 <__divsi3+0xa4>
    7bc6:	0b03      	lsrs	r3, r0, #12
    7bc8:	428b      	cmp	r3, r1
    7bca:	d328      	bcc.n	7c1e <__divsi3+0x72>
    7bcc:	0c03      	lsrs	r3, r0, #16
    7bce:	428b      	cmp	r3, r1
    7bd0:	d30d      	bcc.n	7bee <__divsi3+0x42>
    7bd2:	22ff      	movs	r2, #255	; 0xff
    7bd4:	0209      	lsls	r1, r1, #8
    7bd6:	ba12      	rev	r2, r2
    7bd8:	0c03      	lsrs	r3, r0, #16
    7bda:	428b      	cmp	r3, r1
    7bdc:	d302      	bcc.n	7be4 <__divsi3+0x38>
    7bde:	1212      	asrs	r2, r2, #8
    7be0:	0209      	lsls	r1, r1, #8
    7be2:	d065      	beq.n	7cb0 <__divsi3+0x104>
    7be4:	0b03      	lsrs	r3, r0, #12
    7be6:	428b      	cmp	r3, r1
    7be8:	d319      	bcc.n	7c1e <__divsi3+0x72>
    7bea:	e000      	b.n	7bee <__divsi3+0x42>
    7bec:	0a09      	lsrs	r1, r1, #8
    7bee:	0bc3      	lsrs	r3, r0, #15
    7bf0:	428b      	cmp	r3, r1
    7bf2:	d301      	bcc.n	7bf8 <__divsi3+0x4c>
    7bf4:	03cb      	lsls	r3, r1, #15
    7bf6:	1ac0      	subs	r0, r0, r3
    7bf8:	4152      	adcs	r2, r2
    7bfa:	0b83      	lsrs	r3, r0, #14
    7bfc:	428b      	cmp	r3, r1
    7bfe:	d301      	bcc.n	7c04 <__divsi3+0x58>
    7c00:	038b      	lsls	r3, r1, #14
    7c02:	1ac0      	subs	r0, r0, r3
    7c04:	4152      	adcs	r2, r2
    7c06:	0b43      	lsrs	r3, r0, #13
    7c08:	428b      	cmp	r3, r1
    7c0a:	d301      	bcc.n	7c10 <__divsi3+0x64>
    7c0c:	034b      	lsls	r3, r1, #13
    7c0e:	1ac0      	subs	r0, r0, r3
    7c10:	4152      	adcs	r2, r2
    7c12:	0b03      	lsrs	r3, r0, #12
    7c14:	428b      	cmp	r3, r1
    7c16:	d301      	bcc.n	7c1c <__divsi3+0x70>
    7c18:	030b      	lsls	r3, r1, #12
    7c1a:	1ac0      	subs	r0, r0, r3
    7c1c:	4152      	adcs	r2, r2
    7c1e:	0ac3      	lsrs	r3, r0, #11
    7c20:	428b      	cmp	r3, r1
    7c22:	d301      	bcc.n	7c28 <__divsi3+0x7c>
    7c24:	02cb      	lsls	r3, r1, #11
    7c26:	1ac0      	subs	r0, r0, r3
    7c28:	4152      	adcs	r2, r2
    7c2a:	0a83      	lsrs	r3, r0, #10
    7c2c:	428b      	cmp	r3, r1
    7c2e:	d301      	bcc.n	7c34 <__divsi3+0x88>
    7c30:	028b      	lsls	r3, r1, #10
    7c32:	1ac0      	subs	r0, r0, r3
    7c34:	4152      	adcs	r2, r2
    7c36:	0a43      	lsrs	r3, r0, #9
    7c38:	428b      	cmp	r3, r1
    7c3a:	d301      	bcc.n	7c40 <__divsi3+0x94>
    7c3c:	024b      	lsls	r3, r1, #9
    7c3e:	1ac0      	subs	r0, r0, r3
    7c40:	4152      	adcs	r2, r2
    7c42:	0a03      	lsrs	r3, r0, #8
    7c44:	428b      	cmp	r3, r1
    7c46:	d301      	bcc.n	7c4c <__divsi3+0xa0>
    7c48:	020b      	lsls	r3, r1, #8
    7c4a:	1ac0      	subs	r0, r0, r3
    7c4c:	4152      	adcs	r2, r2
    7c4e:	d2cd      	bcs.n	7bec <__divsi3+0x40>
    7c50:	09c3      	lsrs	r3, r0, #7
    7c52:	428b      	cmp	r3, r1
    7c54:	d301      	bcc.n	7c5a <__divsi3+0xae>
    7c56:	01cb      	lsls	r3, r1, #7
    7c58:	1ac0      	subs	r0, r0, r3
    7c5a:	4152      	adcs	r2, r2
    7c5c:	0983      	lsrs	r3, r0, #6
    7c5e:	428b      	cmp	r3, r1
    7c60:	d301      	bcc.n	7c66 <__divsi3+0xba>
    7c62:	018b      	lsls	r3, r1, #6
    7c64:	1ac0      	subs	r0, r0, r3
    7c66:	4152      	adcs	r2, r2
    7c68:	0943      	lsrs	r3, r0, #5
    7c6a:	428b      	cmp	r3, r1
    7c6c:	d301      	bcc.n	7c72 <__divsi3+0xc6>
    7c6e:	014b      	lsls	r3, r1, #5
    7c70:	1ac0      	subs	r0, r0, r3
    7c72:	4152      	adcs	r2, r2
    7c74:	0903      	lsrs	r3, r0, #4
    7c76:	428b      	cmp	r3, r1
    7c78:	d301      	bcc.n	7c7e <__divsi3+0xd2>
    7c7a:	010b      	lsls	r3, r1, #4
    7c7c:	1ac0      	subs	r0, r0, r3
    7c7e:	4152      	adcs	r2, r2
    7c80:	08c3      	lsrs	r3, r0, #3
    7c82:	428b      	cmp	r3, r1
    7c84:	d301      	bcc.n	7c8a <__divsi3+0xde>
    7c86:	00cb      	lsls	r3, r1, #3
    7c88:	1ac0      	subs	r0, r0, r3
    7c8a:	4152      	adcs	r2, r2
    7c8c:	0883      	lsrs	r3, r0, #2
    7c8e:	428b      	cmp	r3, r1
    7c90:	d301      	bcc.n	7c96 <__divsi3+0xea>
    7c92:	008b      	lsls	r3, r1, #2
    7c94:	1ac0      	subs	r0, r0, r3
    7c96:	4152      	adcs	r2, r2
    7c98:	0843      	lsrs	r3, r0, #1
    7c9a:	428b      	cmp	r3, r1
    7c9c:	d301      	bcc.n	7ca2 <__divsi3+0xf6>
    7c9e:	004b      	lsls	r3, r1, #1
    7ca0:	1ac0      	subs	r0, r0, r3
    7ca2:	4152      	adcs	r2, r2
    7ca4:	1a41      	subs	r1, r0, r1
    7ca6:	d200      	bcs.n	7caa <__divsi3+0xfe>
    7ca8:	4601      	mov	r1, r0
    7caa:	4152      	adcs	r2, r2
    7cac:	4610      	mov	r0, r2
    7cae:	4770      	bx	lr
    7cb0:	e05d      	b.n	7d6e <__divsi3+0x1c2>
    7cb2:	0fca      	lsrs	r2, r1, #31
    7cb4:	d000      	beq.n	7cb8 <__divsi3+0x10c>
    7cb6:	4249      	negs	r1, r1
    7cb8:	1003      	asrs	r3, r0, #32
    7cba:	d300      	bcc.n	7cbe <__divsi3+0x112>
    7cbc:	4240      	negs	r0, r0
    7cbe:	4053      	eors	r3, r2
    7cc0:	2200      	movs	r2, #0
    7cc2:	469c      	mov	ip, r3
    7cc4:	0903      	lsrs	r3, r0, #4
    7cc6:	428b      	cmp	r3, r1
    7cc8:	d32d      	bcc.n	7d26 <__divsi3+0x17a>
    7cca:	0a03      	lsrs	r3, r0, #8
    7ccc:	428b      	cmp	r3, r1
    7cce:	d312      	bcc.n	7cf6 <__divsi3+0x14a>
    7cd0:	22fc      	movs	r2, #252	; 0xfc
    7cd2:	0189      	lsls	r1, r1, #6
    7cd4:	ba12      	rev	r2, r2
    7cd6:	0a03      	lsrs	r3, r0, #8
    7cd8:	428b      	cmp	r3, r1
    7cda:	d30c      	bcc.n	7cf6 <__divsi3+0x14a>
    7cdc:	0189      	lsls	r1, r1, #6
    7cde:	1192      	asrs	r2, r2, #6
    7ce0:	428b      	cmp	r3, r1
    7ce2:	d308      	bcc.n	7cf6 <__divsi3+0x14a>
    7ce4:	0189      	lsls	r1, r1, #6
    7ce6:	1192      	asrs	r2, r2, #6
    7ce8:	428b      	cmp	r3, r1
    7cea:	d304      	bcc.n	7cf6 <__divsi3+0x14a>
    7cec:	0189      	lsls	r1, r1, #6
    7cee:	d03a      	beq.n	7d66 <__divsi3+0x1ba>
    7cf0:	1192      	asrs	r2, r2, #6
    7cf2:	e000      	b.n	7cf6 <__divsi3+0x14a>
    7cf4:	0989      	lsrs	r1, r1, #6
    7cf6:	09c3      	lsrs	r3, r0, #7
    7cf8:	428b      	cmp	r3, r1
    7cfa:	d301      	bcc.n	7d00 <__divsi3+0x154>
    7cfc:	01cb      	lsls	r3, r1, #7
    7cfe:	1ac0      	subs	r0, r0, r3
    7d00:	4152      	adcs	r2, r2
    7d02:	0983      	lsrs	r3, r0, #6
    7d04:	428b      	cmp	r3, r1
    7d06:	d301      	bcc.n	7d0c <__divsi3+0x160>
    7d08:	018b      	lsls	r3, r1, #6
    7d0a:	1ac0      	subs	r0, r0, r3
    7d0c:	4152      	adcs	r2, r2
    7d0e:	0943      	lsrs	r3, r0, #5
    7d10:	428b      	cmp	r3, r1
    7d12:	d301      	bcc.n	7d18 <__divsi3+0x16c>
    7d14:	014b      	lsls	r3, r1, #5
    7d16:	1ac0      	subs	r0, r0, r3
    7d18:	4152      	adcs	r2, r2
    7d1a:	0903      	lsrs	r3, r0, #4
    7d1c:	428b      	cmp	r3, r1
    7d1e:	d301      	bcc.n	7d24 <__divsi3+0x178>
    7d20:	010b      	lsls	r3, r1, #4
    7d22:	1ac0      	subs	r0, r0, r3
    7d24:	4152      	adcs	r2, r2
    7d26:	08c3      	lsrs	r3, r0, #3
    7d28:	428b      	cmp	r3, r1
    7d2a:	d301      	bcc.n	7d30 <__divsi3+0x184>
    7d2c:	00cb      	lsls	r3, r1, #3
    7d2e:	1ac0      	subs	r0, r0, r3
    7d30:	4152      	adcs	r2, r2
    7d32:	0883      	lsrs	r3, r0, #2
    7d34:	428b      	cmp	r3, r1
    7d36:	d301      	bcc.n	7d3c <__divsi3+0x190>
    7d38:	008b      	lsls	r3, r1, #2
    7d3a:	1ac0      	subs	r0, r0, r3
    7d3c:	4152      	adcs	r2, r2
    7d3e:	d2d9      	bcs.n	7cf4 <__divsi3+0x148>
    7d40:	0843      	lsrs	r3, r0, #1
    7d42:	428b      	cmp	r3, r1
    7d44:	d301      	bcc.n	7d4a <__divsi3+0x19e>
    7d46:	004b      	lsls	r3, r1, #1
    7d48:	1ac0      	subs	r0, r0, r3
    7d4a:	4152      	adcs	r2, r2
    7d4c:	1a41      	subs	r1, r0, r1
    7d4e:	d200      	bcs.n	7d52 <__divsi3+0x1a6>
    7d50:	4601      	mov	r1, r0
    7d52:	4663      	mov	r3, ip
    7d54:	4152      	adcs	r2, r2
    7d56:	105b      	asrs	r3, r3, #1
    7d58:	4610      	mov	r0, r2
    7d5a:	d301      	bcc.n	7d60 <__divsi3+0x1b4>
    7d5c:	4240      	negs	r0, r0
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d500      	bpl.n	7d64 <__divsi3+0x1b8>
    7d62:	4249      	negs	r1, r1
    7d64:	4770      	bx	lr
    7d66:	4663      	mov	r3, ip
    7d68:	105b      	asrs	r3, r3, #1
    7d6a:	d300      	bcc.n	7d6e <__divsi3+0x1c2>
    7d6c:	4240      	negs	r0, r0
    7d6e:	b501      	push	{r0, lr}
    7d70:	2000      	movs	r0, #0
    7d72:	f000 f805 	bl	7d80 <__aeabi_idiv0>
    7d76:	bd02      	pop	{r1, pc}

00007d78 <__aeabi_idivmod>:
    7d78:	2900      	cmp	r1, #0
    7d7a:	d0f8      	beq.n	7d6e <__divsi3+0x1c2>
    7d7c:	e716      	b.n	7bac <__divsi3>
    7d7e:	4770      	bx	lr

00007d80 <__aeabi_idiv0>:
    7d80:	4770      	bx	lr
    7d82:	46c0      	nop			; (mov r8, r8)

00007d84 <__aeabi_lmul>:
    7d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d86:	46ce      	mov	lr, r9
    7d88:	4647      	mov	r7, r8
    7d8a:	0415      	lsls	r5, r2, #16
    7d8c:	0c2d      	lsrs	r5, r5, #16
    7d8e:	002e      	movs	r6, r5
    7d90:	b580      	push	{r7, lr}
    7d92:	0407      	lsls	r7, r0, #16
    7d94:	0c14      	lsrs	r4, r2, #16
    7d96:	0c3f      	lsrs	r7, r7, #16
    7d98:	4699      	mov	r9, r3
    7d9a:	0c03      	lsrs	r3, r0, #16
    7d9c:	437e      	muls	r6, r7
    7d9e:	435d      	muls	r5, r3
    7da0:	4367      	muls	r7, r4
    7da2:	4363      	muls	r3, r4
    7da4:	197f      	adds	r7, r7, r5
    7da6:	0c34      	lsrs	r4, r6, #16
    7da8:	19e4      	adds	r4, r4, r7
    7daa:	469c      	mov	ip, r3
    7dac:	42a5      	cmp	r5, r4
    7dae:	d903      	bls.n	7db8 <__aeabi_lmul+0x34>
    7db0:	2380      	movs	r3, #128	; 0x80
    7db2:	025b      	lsls	r3, r3, #9
    7db4:	4698      	mov	r8, r3
    7db6:	44c4      	add	ip, r8
    7db8:	464b      	mov	r3, r9
    7dba:	4351      	muls	r1, r2
    7dbc:	4343      	muls	r3, r0
    7dbe:	0436      	lsls	r6, r6, #16
    7dc0:	0c36      	lsrs	r6, r6, #16
    7dc2:	0c25      	lsrs	r5, r4, #16
    7dc4:	0424      	lsls	r4, r4, #16
    7dc6:	4465      	add	r5, ip
    7dc8:	19a4      	adds	r4, r4, r6
    7dca:	1859      	adds	r1, r3, r1
    7dcc:	1949      	adds	r1, r1, r5
    7dce:	0020      	movs	r0, r4
    7dd0:	bc0c      	pop	{r2, r3}
    7dd2:	4690      	mov	r8, r2
    7dd4:	4699      	mov	r9, r3
    7dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007dd8 <__libc_init_array>:
    7dd8:	b570      	push	{r4, r5, r6, lr}
    7dda:	2600      	movs	r6, #0
    7ddc:	4d0c      	ldr	r5, [pc, #48]	; (7e10 <__libc_init_array+0x38>)
    7dde:	4c0d      	ldr	r4, [pc, #52]	; (7e14 <__libc_init_array+0x3c>)
    7de0:	1b64      	subs	r4, r4, r5
    7de2:	10a4      	asrs	r4, r4, #2
    7de4:	42a6      	cmp	r6, r4
    7de6:	d109      	bne.n	7dfc <__libc_init_array+0x24>
    7de8:	2600      	movs	r6, #0
    7dea:	f002 fb6d 	bl	a4c8 <_init>
    7dee:	4d0a      	ldr	r5, [pc, #40]	; (7e18 <__libc_init_array+0x40>)
    7df0:	4c0a      	ldr	r4, [pc, #40]	; (7e1c <__libc_init_array+0x44>)
    7df2:	1b64      	subs	r4, r4, r5
    7df4:	10a4      	asrs	r4, r4, #2
    7df6:	42a6      	cmp	r6, r4
    7df8:	d105      	bne.n	7e06 <__libc_init_array+0x2e>
    7dfa:	bd70      	pop	{r4, r5, r6, pc}
    7dfc:	00b3      	lsls	r3, r6, #2
    7dfe:	58eb      	ldr	r3, [r5, r3]
    7e00:	4798      	blx	r3
    7e02:	3601      	adds	r6, #1
    7e04:	e7ee      	b.n	7de4 <__libc_init_array+0xc>
    7e06:	00b3      	lsls	r3, r6, #2
    7e08:	58eb      	ldr	r3, [r5, r3]
    7e0a:	4798      	blx	r3
    7e0c:	3601      	adds	r6, #1
    7e0e:	e7f2      	b.n	7df6 <__libc_init_array+0x1e>
    7e10:	0000a4d4 	.word	0x0000a4d4
    7e14:	0000a4d4 	.word	0x0000a4d4
    7e18:	0000a4d4 	.word	0x0000a4d4
    7e1c:	0000a4d8 	.word	0x0000a4d8

00007e20 <memcpy>:
    7e20:	2300      	movs	r3, #0
    7e22:	b510      	push	{r4, lr}
    7e24:	429a      	cmp	r2, r3
    7e26:	d100      	bne.n	7e2a <memcpy+0xa>
    7e28:	bd10      	pop	{r4, pc}
    7e2a:	5ccc      	ldrb	r4, [r1, r3]
    7e2c:	54c4      	strb	r4, [r0, r3]
    7e2e:	3301      	adds	r3, #1
    7e30:	e7f8      	b.n	7e24 <memcpy+0x4>

00007e32 <memset>:
    7e32:	0003      	movs	r3, r0
    7e34:	1882      	adds	r2, r0, r2
    7e36:	4293      	cmp	r3, r2
    7e38:	d100      	bne.n	7e3c <memset+0xa>
    7e3a:	4770      	bx	lr
    7e3c:	7019      	strb	r1, [r3, #0]
    7e3e:	3301      	adds	r3, #1
    7e40:	e7f9      	b.n	7e36 <memset+0x4>
	...

00007e44 <iprintf>:
    7e44:	b40f      	push	{r0, r1, r2, r3}
    7e46:	4b0b      	ldr	r3, [pc, #44]	; (7e74 <iprintf+0x30>)
    7e48:	b513      	push	{r0, r1, r4, lr}
    7e4a:	681c      	ldr	r4, [r3, #0]
    7e4c:	2c00      	cmp	r4, #0
    7e4e:	d005      	beq.n	7e5c <iprintf+0x18>
    7e50:	69a3      	ldr	r3, [r4, #24]
    7e52:	2b00      	cmp	r3, #0
    7e54:	d102      	bne.n	7e5c <iprintf+0x18>
    7e56:	0020      	movs	r0, r4
    7e58:	f000 fb9a 	bl	8590 <__sinit>
    7e5c:	ab05      	add	r3, sp, #20
    7e5e:	9a04      	ldr	r2, [sp, #16]
    7e60:	68a1      	ldr	r1, [r4, #8]
    7e62:	0020      	movs	r0, r4
    7e64:	9301      	str	r3, [sp, #4]
    7e66:	f000 fd6f 	bl	8948 <_vfiprintf_r>
    7e6a:	bc16      	pop	{r1, r2, r4}
    7e6c:	bc08      	pop	{r3}
    7e6e:	b004      	add	sp, #16
    7e70:	4718      	bx	r3
    7e72:	46c0      	nop			; (mov r8, r8)
    7e74:	20000010 	.word	0x20000010

00007e78 <putchar>:
    7e78:	4b08      	ldr	r3, [pc, #32]	; (7e9c <putchar+0x24>)
    7e7a:	b570      	push	{r4, r5, r6, lr}
    7e7c:	681c      	ldr	r4, [r3, #0]
    7e7e:	0005      	movs	r5, r0
    7e80:	2c00      	cmp	r4, #0
    7e82:	d005      	beq.n	7e90 <putchar+0x18>
    7e84:	69a3      	ldr	r3, [r4, #24]
    7e86:	2b00      	cmp	r3, #0
    7e88:	d102      	bne.n	7e90 <putchar+0x18>
    7e8a:	0020      	movs	r0, r4
    7e8c:	f000 fb80 	bl	8590 <__sinit>
    7e90:	0029      	movs	r1, r5
    7e92:	68a2      	ldr	r2, [r4, #8]
    7e94:	0020      	movs	r0, r4
    7e96:	f000 fffb 	bl	8e90 <_putc_r>
    7e9a:	bd70      	pop	{r4, r5, r6, pc}
    7e9c:	20000010 	.word	0x20000010

00007ea0 <_puts_r>:
    7ea0:	b570      	push	{r4, r5, r6, lr}
    7ea2:	0005      	movs	r5, r0
    7ea4:	000e      	movs	r6, r1
    7ea6:	2800      	cmp	r0, #0
    7ea8:	d004      	beq.n	7eb4 <_puts_r+0x14>
    7eaa:	6983      	ldr	r3, [r0, #24]
    7eac:	2b00      	cmp	r3, #0
    7eae:	d101      	bne.n	7eb4 <_puts_r+0x14>
    7eb0:	f000 fb6e 	bl	8590 <__sinit>
    7eb4:	69ab      	ldr	r3, [r5, #24]
    7eb6:	68ac      	ldr	r4, [r5, #8]
    7eb8:	2b00      	cmp	r3, #0
    7eba:	d102      	bne.n	7ec2 <_puts_r+0x22>
    7ebc:	0028      	movs	r0, r5
    7ebe:	f000 fb67 	bl	8590 <__sinit>
    7ec2:	4b24      	ldr	r3, [pc, #144]	; (7f54 <_puts_r+0xb4>)
    7ec4:	429c      	cmp	r4, r3
    7ec6:	d10f      	bne.n	7ee8 <_puts_r+0x48>
    7ec8:	686c      	ldr	r4, [r5, #4]
    7eca:	89a3      	ldrh	r3, [r4, #12]
    7ecc:	071b      	lsls	r3, r3, #28
    7ece:	d502      	bpl.n	7ed6 <_puts_r+0x36>
    7ed0:	6923      	ldr	r3, [r4, #16]
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d120      	bne.n	7f18 <_puts_r+0x78>
    7ed6:	0021      	movs	r1, r4
    7ed8:	0028      	movs	r0, r5
    7eda:	f000 f9eb 	bl	82b4 <__swsetup_r>
    7ede:	2800      	cmp	r0, #0
    7ee0:	d01a      	beq.n	7f18 <_puts_r+0x78>
    7ee2:	2001      	movs	r0, #1
    7ee4:	4240      	negs	r0, r0
    7ee6:	bd70      	pop	{r4, r5, r6, pc}
    7ee8:	4b1b      	ldr	r3, [pc, #108]	; (7f58 <_puts_r+0xb8>)
    7eea:	429c      	cmp	r4, r3
    7eec:	d101      	bne.n	7ef2 <_puts_r+0x52>
    7eee:	68ac      	ldr	r4, [r5, #8]
    7ef0:	e7eb      	b.n	7eca <_puts_r+0x2a>
    7ef2:	4b1a      	ldr	r3, [pc, #104]	; (7f5c <_puts_r+0xbc>)
    7ef4:	429c      	cmp	r4, r3
    7ef6:	d1e8      	bne.n	7eca <_puts_r+0x2a>
    7ef8:	68ec      	ldr	r4, [r5, #12]
    7efa:	e7e6      	b.n	7eca <_puts_r+0x2a>
    7efc:	3b01      	subs	r3, #1
    7efe:	3601      	adds	r6, #1
    7f00:	60a3      	str	r3, [r4, #8]
    7f02:	2b00      	cmp	r3, #0
    7f04:	da04      	bge.n	7f10 <_puts_r+0x70>
    7f06:	69a2      	ldr	r2, [r4, #24]
    7f08:	4293      	cmp	r3, r2
    7f0a:	db16      	blt.n	7f3a <_puts_r+0x9a>
    7f0c:	290a      	cmp	r1, #10
    7f0e:	d014      	beq.n	7f3a <_puts_r+0x9a>
    7f10:	6823      	ldr	r3, [r4, #0]
    7f12:	1c5a      	adds	r2, r3, #1
    7f14:	6022      	str	r2, [r4, #0]
    7f16:	7019      	strb	r1, [r3, #0]
    7f18:	7831      	ldrb	r1, [r6, #0]
    7f1a:	68a3      	ldr	r3, [r4, #8]
    7f1c:	2900      	cmp	r1, #0
    7f1e:	d1ed      	bne.n	7efc <_puts_r+0x5c>
    7f20:	3b01      	subs	r3, #1
    7f22:	60a3      	str	r3, [r4, #8]
    7f24:	2b00      	cmp	r3, #0
    7f26:	da0f      	bge.n	7f48 <_puts_r+0xa8>
    7f28:	0022      	movs	r2, r4
    7f2a:	310a      	adds	r1, #10
    7f2c:	0028      	movs	r0, r5
    7f2e:	f000 f96b 	bl	8208 <__swbuf_r>
    7f32:	1c43      	adds	r3, r0, #1
    7f34:	d0d5      	beq.n	7ee2 <_puts_r+0x42>
    7f36:	200a      	movs	r0, #10
    7f38:	e7d5      	b.n	7ee6 <_puts_r+0x46>
    7f3a:	0022      	movs	r2, r4
    7f3c:	0028      	movs	r0, r5
    7f3e:	f000 f963 	bl	8208 <__swbuf_r>
    7f42:	1c43      	adds	r3, r0, #1
    7f44:	d1e8      	bne.n	7f18 <_puts_r+0x78>
    7f46:	e7cc      	b.n	7ee2 <_puts_r+0x42>
    7f48:	200a      	movs	r0, #10
    7f4a:	6823      	ldr	r3, [r4, #0]
    7f4c:	1c5a      	adds	r2, r3, #1
    7f4e:	6022      	str	r2, [r4, #0]
    7f50:	7018      	strb	r0, [r3, #0]
    7f52:	e7c8      	b.n	7ee6 <_puts_r+0x46>
    7f54:	0000a454 	.word	0x0000a454
    7f58:	0000a474 	.word	0x0000a474
    7f5c:	0000a434 	.word	0x0000a434

00007f60 <puts>:
    7f60:	b510      	push	{r4, lr}
    7f62:	4b03      	ldr	r3, [pc, #12]	; (7f70 <puts+0x10>)
    7f64:	0001      	movs	r1, r0
    7f66:	6818      	ldr	r0, [r3, #0]
    7f68:	f7ff ff9a 	bl	7ea0 <_puts_r>
    7f6c:	bd10      	pop	{r4, pc}
    7f6e:	46c0      	nop			; (mov r8, r8)
    7f70:	20000010 	.word	0x20000010

00007f74 <srand>:
    7f74:	4b10      	ldr	r3, [pc, #64]	; (7fb8 <srand+0x44>)
    7f76:	b570      	push	{r4, r5, r6, lr}
    7f78:	681c      	ldr	r4, [r3, #0]
    7f7a:	0005      	movs	r5, r0
    7f7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7f7e:	2b00      	cmp	r3, #0
    7f80:	d115      	bne.n	7fae <srand+0x3a>
    7f82:	2018      	movs	r0, #24
    7f84:	f000 fc06 	bl	8794 <malloc>
    7f88:	4b0c      	ldr	r3, [pc, #48]	; (7fbc <srand+0x48>)
    7f8a:	63a0      	str	r0, [r4, #56]	; 0x38
    7f8c:	8003      	strh	r3, [r0, #0]
    7f8e:	4b0c      	ldr	r3, [pc, #48]	; (7fc0 <srand+0x4c>)
    7f90:	2201      	movs	r2, #1
    7f92:	8043      	strh	r3, [r0, #2]
    7f94:	4b0b      	ldr	r3, [pc, #44]	; (7fc4 <srand+0x50>)
    7f96:	8083      	strh	r3, [r0, #4]
    7f98:	4b0b      	ldr	r3, [pc, #44]	; (7fc8 <srand+0x54>)
    7f9a:	80c3      	strh	r3, [r0, #6]
    7f9c:	4b0b      	ldr	r3, [pc, #44]	; (7fcc <srand+0x58>)
    7f9e:	8103      	strh	r3, [r0, #8]
    7fa0:	2305      	movs	r3, #5
    7fa2:	8143      	strh	r3, [r0, #10]
    7fa4:	3306      	adds	r3, #6
    7fa6:	8183      	strh	r3, [r0, #12]
    7fa8:	2300      	movs	r3, #0
    7faa:	6102      	str	r2, [r0, #16]
    7fac:	6143      	str	r3, [r0, #20]
    7fae:	2200      	movs	r2, #0
    7fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7fb2:	611d      	str	r5, [r3, #16]
    7fb4:	615a      	str	r2, [r3, #20]
    7fb6:	bd70      	pop	{r4, r5, r6, pc}
    7fb8:	20000010 	.word	0x20000010
    7fbc:	0000330e 	.word	0x0000330e
    7fc0:	ffffabcd 	.word	0xffffabcd
    7fc4:	00001234 	.word	0x00001234
    7fc8:	ffffe66d 	.word	0xffffe66d
    7fcc:	ffffdeec 	.word	0xffffdeec

00007fd0 <rand>:
    7fd0:	4b15      	ldr	r3, [pc, #84]	; (8028 <rand+0x58>)
    7fd2:	b510      	push	{r4, lr}
    7fd4:	681c      	ldr	r4, [r3, #0]
    7fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7fd8:	2b00      	cmp	r3, #0
    7fda:	d115      	bne.n	8008 <rand+0x38>
    7fdc:	2018      	movs	r0, #24
    7fde:	f000 fbd9 	bl	8794 <malloc>
    7fe2:	4b12      	ldr	r3, [pc, #72]	; (802c <rand+0x5c>)
    7fe4:	63a0      	str	r0, [r4, #56]	; 0x38
    7fe6:	8003      	strh	r3, [r0, #0]
    7fe8:	4b11      	ldr	r3, [pc, #68]	; (8030 <rand+0x60>)
    7fea:	2201      	movs	r2, #1
    7fec:	8043      	strh	r3, [r0, #2]
    7fee:	4b11      	ldr	r3, [pc, #68]	; (8034 <rand+0x64>)
    7ff0:	8083      	strh	r3, [r0, #4]
    7ff2:	4b11      	ldr	r3, [pc, #68]	; (8038 <rand+0x68>)
    7ff4:	80c3      	strh	r3, [r0, #6]
    7ff6:	4b11      	ldr	r3, [pc, #68]	; (803c <rand+0x6c>)
    7ff8:	8103      	strh	r3, [r0, #8]
    7ffa:	2305      	movs	r3, #5
    7ffc:	8143      	strh	r3, [r0, #10]
    7ffe:	3306      	adds	r3, #6
    8000:	8183      	strh	r3, [r0, #12]
    8002:	2300      	movs	r3, #0
    8004:	6102      	str	r2, [r0, #16]
    8006:	6143      	str	r3, [r0, #20]
    8008:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    800a:	4a0d      	ldr	r2, [pc, #52]	; (8040 <rand+0x70>)
    800c:	6920      	ldr	r0, [r4, #16]
    800e:	6961      	ldr	r1, [r4, #20]
    8010:	4b0c      	ldr	r3, [pc, #48]	; (8044 <rand+0x74>)
    8012:	f7ff feb7 	bl	7d84 <__aeabi_lmul>
    8016:	2201      	movs	r2, #1
    8018:	2300      	movs	r3, #0
    801a:	1880      	adds	r0, r0, r2
    801c:	4159      	adcs	r1, r3
    801e:	6120      	str	r0, [r4, #16]
    8020:	6161      	str	r1, [r4, #20]
    8022:	0048      	lsls	r0, r1, #1
    8024:	0840      	lsrs	r0, r0, #1
    8026:	bd10      	pop	{r4, pc}
    8028:	20000010 	.word	0x20000010
    802c:	0000330e 	.word	0x0000330e
    8030:	ffffabcd 	.word	0xffffabcd
    8034:	00001234 	.word	0x00001234
    8038:	ffffe66d 	.word	0xffffe66d
    803c:	ffffdeec 	.word	0xffffdeec
    8040:	4c957f2d 	.word	0x4c957f2d
    8044:	5851f42d 	.word	0x5851f42d

00008048 <setbuf>:
    8048:	424a      	negs	r2, r1
    804a:	414a      	adcs	r2, r1
    804c:	2380      	movs	r3, #128	; 0x80
    804e:	b510      	push	{r4, lr}
    8050:	0052      	lsls	r2, r2, #1
    8052:	00db      	lsls	r3, r3, #3
    8054:	f000 f802 	bl	805c <setvbuf>
    8058:	bd10      	pop	{r4, pc}
	...

0000805c <setvbuf>:
    805c:	b5f0      	push	{r4, r5, r6, r7, lr}
    805e:	001d      	movs	r5, r3
    8060:	4b4f      	ldr	r3, [pc, #316]	; (81a0 <setvbuf+0x144>)
    8062:	b085      	sub	sp, #20
    8064:	681e      	ldr	r6, [r3, #0]
    8066:	0004      	movs	r4, r0
    8068:	000f      	movs	r7, r1
    806a:	9200      	str	r2, [sp, #0]
    806c:	2e00      	cmp	r6, #0
    806e:	d005      	beq.n	807c <setvbuf+0x20>
    8070:	69b3      	ldr	r3, [r6, #24]
    8072:	2b00      	cmp	r3, #0
    8074:	d102      	bne.n	807c <setvbuf+0x20>
    8076:	0030      	movs	r0, r6
    8078:	f000 fa8a 	bl	8590 <__sinit>
    807c:	4b49      	ldr	r3, [pc, #292]	; (81a4 <setvbuf+0x148>)
    807e:	429c      	cmp	r4, r3
    8080:	d150      	bne.n	8124 <setvbuf+0xc8>
    8082:	6874      	ldr	r4, [r6, #4]
    8084:	9b00      	ldr	r3, [sp, #0]
    8086:	2b02      	cmp	r3, #2
    8088:	d005      	beq.n	8096 <setvbuf+0x3a>
    808a:	2b01      	cmp	r3, #1
    808c:	d900      	bls.n	8090 <setvbuf+0x34>
    808e:	e084      	b.n	819a <setvbuf+0x13e>
    8090:	2d00      	cmp	r5, #0
    8092:	da00      	bge.n	8096 <setvbuf+0x3a>
    8094:	e081      	b.n	819a <setvbuf+0x13e>
    8096:	0021      	movs	r1, r4
    8098:	0030      	movs	r0, r6
    809a:	f000 fa0b 	bl	84b4 <_fflush_r>
    809e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    80a0:	2900      	cmp	r1, #0
    80a2:	d008      	beq.n	80b6 <setvbuf+0x5a>
    80a4:	0023      	movs	r3, r4
    80a6:	3344      	adds	r3, #68	; 0x44
    80a8:	4299      	cmp	r1, r3
    80aa:	d002      	beq.n	80b2 <setvbuf+0x56>
    80ac:	0030      	movs	r0, r6
    80ae:	f000 fb7b 	bl	87a8 <_free_r>
    80b2:	2300      	movs	r3, #0
    80b4:	6363      	str	r3, [r4, #52]	; 0x34
    80b6:	2300      	movs	r3, #0
    80b8:	61a3      	str	r3, [r4, #24]
    80ba:	6063      	str	r3, [r4, #4]
    80bc:	89a3      	ldrh	r3, [r4, #12]
    80be:	061b      	lsls	r3, r3, #24
    80c0:	d503      	bpl.n	80ca <setvbuf+0x6e>
    80c2:	6921      	ldr	r1, [r4, #16]
    80c4:	0030      	movs	r0, r6
    80c6:	f000 fb6f 	bl	87a8 <_free_r>
    80ca:	89a3      	ldrh	r3, [r4, #12]
    80cc:	4a36      	ldr	r2, [pc, #216]	; (81a8 <setvbuf+0x14c>)
    80ce:	4013      	ands	r3, r2
    80d0:	81a3      	strh	r3, [r4, #12]
    80d2:	9b00      	ldr	r3, [sp, #0]
    80d4:	2b02      	cmp	r3, #2
    80d6:	d05a      	beq.n	818e <setvbuf+0x132>
    80d8:	ab03      	add	r3, sp, #12
    80da:	aa02      	add	r2, sp, #8
    80dc:	0021      	movs	r1, r4
    80de:	0030      	movs	r0, r6
    80e0:	f000 faec 	bl	86bc <__swhatbuf_r>
    80e4:	89a3      	ldrh	r3, [r4, #12]
    80e6:	4318      	orrs	r0, r3
    80e8:	81a0      	strh	r0, [r4, #12]
    80ea:	2d00      	cmp	r5, #0
    80ec:	d124      	bne.n	8138 <setvbuf+0xdc>
    80ee:	9d02      	ldr	r5, [sp, #8]
    80f0:	0028      	movs	r0, r5
    80f2:	f000 fb4f 	bl	8794 <malloc>
    80f6:	9501      	str	r5, [sp, #4]
    80f8:	1e07      	subs	r7, r0, #0
    80fa:	d142      	bne.n	8182 <setvbuf+0x126>
    80fc:	9b02      	ldr	r3, [sp, #8]
    80fe:	9301      	str	r3, [sp, #4]
    8100:	42ab      	cmp	r3, r5
    8102:	d139      	bne.n	8178 <setvbuf+0x11c>
    8104:	2001      	movs	r0, #1
    8106:	4240      	negs	r0, r0
    8108:	2302      	movs	r3, #2
    810a:	89a2      	ldrh	r2, [r4, #12]
    810c:	4313      	orrs	r3, r2
    810e:	81a3      	strh	r3, [r4, #12]
    8110:	2300      	movs	r3, #0
    8112:	60a3      	str	r3, [r4, #8]
    8114:	0023      	movs	r3, r4
    8116:	3347      	adds	r3, #71	; 0x47
    8118:	6023      	str	r3, [r4, #0]
    811a:	6123      	str	r3, [r4, #16]
    811c:	2301      	movs	r3, #1
    811e:	6163      	str	r3, [r4, #20]
    8120:	b005      	add	sp, #20
    8122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8124:	4b21      	ldr	r3, [pc, #132]	; (81ac <setvbuf+0x150>)
    8126:	429c      	cmp	r4, r3
    8128:	d101      	bne.n	812e <setvbuf+0xd2>
    812a:	68b4      	ldr	r4, [r6, #8]
    812c:	e7aa      	b.n	8084 <setvbuf+0x28>
    812e:	4b20      	ldr	r3, [pc, #128]	; (81b0 <setvbuf+0x154>)
    8130:	429c      	cmp	r4, r3
    8132:	d1a7      	bne.n	8084 <setvbuf+0x28>
    8134:	68f4      	ldr	r4, [r6, #12]
    8136:	e7a5      	b.n	8084 <setvbuf+0x28>
    8138:	2f00      	cmp	r7, #0
    813a:	d0d9      	beq.n	80f0 <setvbuf+0x94>
    813c:	69b3      	ldr	r3, [r6, #24]
    813e:	2b00      	cmp	r3, #0
    8140:	d102      	bne.n	8148 <setvbuf+0xec>
    8142:	0030      	movs	r0, r6
    8144:	f000 fa24 	bl	8590 <__sinit>
    8148:	9b00      	ldr	r3, [sp, #0]
    814a:	2b01      	cmp	r3, #1
    814c:	d103      	bne.n	8156 <setvbuf+0xfa>
    814e:	89a3      	ldrh	r3, [r4, #12]
    8150:	9a00      	ldr	r2, [sp, #0]
    8152:	431a      	orrs	r2, r3
    8154:	81a2      	strh	r2, [r4, #12]
    8156:	2008      	movs	r0, #8
    8158:	89a3      	ldrh	r3, [r4, #12]
    815a:	6027      	str	r7, [r4, #0]
    815c:	6127      	str	r7, [r4, #16]
    815e:	6165      	str	r5, [r4, #20]
    8160:	4018      	ands	r0, r3
    8162:	d018      	beq.n	8196 <setvbuf+0x13a>
    8164:	2001      	movs	r0, #1
    8166:	4018      	ands	r0, r3
    8168:	2300      	movs	r3, #0
    816a:	4298      	cmp	r0, r3
    816c:	d011      	beq.n	8192 <setvbuf+0x136>
    816e:	426d      	negs	r5, r5
    8170:	60a3      	str	r3, [r4, #8]
    8172:	61a5      	str	r5, [r4, #24]
    8174:	0018      	movs	r0, r3
    8176:	e7d3      	b.n	8120 <setvbuf+0xc4>
    8178:	9801      	ldr	r0, [sp, #4]
    817a:	f000 fb0b 	bl	8794 <malloc>
    817e:	1e07      	subs	r7, r0, #0
    8180:	d0c0      	beq.n	8104 <setvbuf+0xa8>
    8182:	2380      	movs	r3, #128	; 0x80
    8184:	89a2      	ldrh	r2, [r4, #12]
    8186:	9d01      	ldr	r5, [sp, #4]
    8188:	4313      	orrs	r3, r2
    818a:	81a3      	strh	r3, [r4, #12]
    818c:	e7d6      	b.n	813c <setvbuf+0xe0>
    818e:	2000      	movs	r0, #0
    8190:	e7ba      	b.n	8108 <setvbuf+0xac>
    8192:	60a5      	str	r5, [r4, #8]
    8194:	e7c4      	b.n	8120 <setvbuf+0xc4>
    8196:	60a0      	str	r0, [r4, #8]
    8198:	e7c2      	b.n	8120 <setvbuf+0xc4>
    819a:	2001      	movs	r0, #1
    819c:	4240      	negs	r0, r0
    819e:	e7bf      	b.n	8120 <setvbuf+0xc4>
    81a0:	20000010 	.word	0x20000010
    81a4:	0000a454 	.word	0x0000a454
    81a8:	fffff35c 	.word	0xfffff35c
    81ac:	0000a474 	.word	0x0000a474
    81b0:	0000a434 	.word	0x0000a434

000081b4 <strcmp>:
    81b4:	7802      	ldrb	r2, [r0, #0]
    81b6:	780b      	ldrb	r3, [r1, #0]
    81b8:	2a00      	cmp	r2, #0
    81ba:	d003      	beq.n	81c4 <strcmp+0x10>
    81bc:	3001      	adds	r0, #1
    81be:	3101      	adds	r1, #1
    81c0:	429a      	cmp	r2, r3
    81c2:	d0f7      	beq.n	81b4 <strcmp>
    81c4:	1ad0      	subs	r0, r2, r3
    81c6:	4770      	bx	lr

000081c8 <strcpy>:
    81c8:	1c03      	adds	r3, r0, #0
    81ca:	780a      	ldrb	r2, [r1, #0]
    81cc:	3101      	adds	r1, #1
    81ce:	701a      	strb	r2, [r3, #0]
    81d0:	3301      	adds	r3, #1
    81d2:	2a00      	cmp	r2, #0
    81d4:	d1f9      	bne.n	81ca <strcpy+0x2>
    81d6:	4770      	bx	lr

000081d8 <strstr>:
    81d8:	b510      	push	{r4, lr}
    81da:	0002      	movs	r2, r0
    81dc:	7800      	ldrb	r0, [r0, #0]
    81de:	2800      	cmp	r0, #0
    81e0:	d104      	bne.n	81ec <strstr+0x14>
    81e2:	7809      	ldrb	r1, [r1, #0]
    81e4:	2900      	cmp	r1, #0
    81e6:	d00d      	beq.n	8204 <strstr+0x2c>
    81e8:	bd10      	pop	{r4, pc}
    81ea:	3201      	adds	r2, #1
    81ec:	7810      	ldrb	r0, [r2, #0]
    81ee:	2800      	cmp	r0, #0
    81f0:	d0fa      	beq.n	81e8 <strstr+0x10>
    81f2:	2300      	movs	r3, #0
    81f4:	5cc8      	ldrb	r0, [r1, r3]
    81f6:	2800      	cmp	r0, #0
    81f8:	d004      	beq.n	8204 <strstr+0x2c>
    81fa:	5cd4      	ldrb	r4, [r2, r3]
    81fc:	4284      	cmp	r4, r0
    81fe:	d1f4      	bne.n	81ea <strstr+0x12>
    8200:	3301      	adds	r3, #1
    8202:	e7f7      	b.n	81f4 <strstr+0x1c>
    8204:	0010      	movs	r0, r2
    8206:	e7ef      	b.n	81e8 <strstr+0x10>

00008208 <__swbuf_r>:
    8208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    820a:	0005      	movs	r5, r0
    820c:	000e      	movs	r6, r1
    820e:	0014      	movs	r4, r2
    8210:	2800      	cmp	r0, #0
    8212:	d004      	beq.n	821e <__swbuf_r+0x16>
    8214:	6983      	ldr	r3, [r0, #24]
    8216:	2b00      	cmp	r3, #0
    8218:	d101      	bne.n	821e <__swbuf_r+0x16>
    821a:	f000 f9b9 	bl	8590 <__sinit>
    821e:	4b22      	ldr	r3, [pc, #136]	; (82a8 <__swbuf_r+0xa0>)
    8220:	429c      	cmp	r4, r3
    8222:	d12d      	bne.n	8280 <__swbuf_r+0x78>
    8224:	686c      	ldr	r4, [r5, #4]
    8226:	69a3      	ldr	r3, [r4, #24]
    8228:	60a3      	str	r3, [r4, #8]
    822a:	89a3      	ldrh	r3, [r4, #12]
    822c:	071b      	lsls	r3, r3, #28
    822e:	d531      	bpl.n	8294 <__swbuf_r+0x8c>
    8230:	6923      	ldr	r3, [r4, #16]
    8232:	2b00      	cmp	r3, #0
    8234:	d02e      	beq.n	8294 <__swbuf_r+0x8c>
    8236:	6823      	ldr	r3, [r4, #0]
    8238:	6922      	ldr	r2, [r4, #16]
    823a:	b2f7      	uxtb	r7, r6
    823c:	1a98      	subs	r0, r3, r2
    823e:	6963      	ldr	r3, [r4, #20]
    8240:	b2f6      	uxtb	r6, r6
    8242:	4298      	cmp	r0, r3
    8244:	db05      	blt.n	8252 <__swbuf_r+0x4a>
    8246:	0021      	movs	r1, r4
    8248:	0028      	movs	r0, r5
    824a:	f000 f933 	bl	84b4 <_fflush_r>
    824e:	2800      	cmp	r0, #0
    8250:	d126      	bne.n	82a0 <__swbuf_r+0x98>
    8252:	68a3      	ldr	r3, [r4, #8]
    8254:	3001      	adds	r0, #1
    8256:	3b01      	subs	r3, #1
    8258:	60a3      	str	r3, [r4, #8]
    825a:	6823      	ldr	r3, [r4, #0]
    825c:	1c5a      	adds	r2, r3, #1
    825e:	6022      	str	r2, [r4, #0]
    8260:	701f      	strb	r7, [r3, #0]
    8262:	6963      	ldr	r3, [r4, #20]
    8264:	4298      	cmp	r0, r3
    8266:	d004      	beq.n	8272 <__swbuf_r+0x6a>
    8268:	89a3      	ldrh	r3, [r4, #12]
    826a:	07db      	lsls	r3, r3, #31
    826c:	d51a      	bpl.n	82a4 <__swbuf_r+0x9c>
    826e:	2e0a      	cmp	r6, #10
    8270:	d118      	bne.n	82a4 <__swbuf_r+0x9c>
    8272:	0021      	movs	r1, r4
    8274:	0028      	movs	r0, r5
    8276:	f000 f91d 	bl	84b4 <_fflush_r>
    827a:	2800      	cmp	r0, #0
    827c:	d012      	beq.n	82a4 <__swbuf_r+0x9c>
    827e:	e00f      	b.n	82a0 <__swbuf_r+0x98>
    8280:	4b0a      	ldr	r3, [pc, #40]	; (82ac <__swbuf_r+0xa4>)
    8282:	429c      	cmp	r4, r3
    8284:	d101      	bne.n	828a <__swbuf_r+0x82>
    8286:	68ac      	ldr	r4, [r5, #8]
    8288:	e7cd      	b.n	8226 <__swbuf_r+0x1e>
    828a:	4b09      	ldr	r3, [pc, #36]	; (82b0 <__swbuf_r+0xa8>)
    828c:	429c      	cmp	r4, r3
    828e:	d1ca      	bne.n	8226 <__swbuf_r+0x1e>
    8290:	68ec      	ldr	r4, [r5, #12]
    8292:	e7c8      	b.n	8226 <__swbuf_r+0x1e>
    8294:	0021      	movs	r1, r4
    8296:	0028      	movs	r0, r5
    8298:	f000 f80c 	bl	82b4 <__swsetup_r>
    829c:	2800      	cmp	r0, #0
    829e:	d0ca      	beq.n	8236 <__swbuf_r+0x2e>
    82a0:	2601      	movs	r6, #1
    82a2:	4276      	negs	r6, r6
    82a4:	0030      	movs	r0, r6
    82a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82a8:	0000a454 	.word	0x0000a454
    82ac:	0000a474 	.word	0x0000a474
    82b0:	0000a434 	.word	0x0000a434

000082b4 <__swsetup_r>:
    82b4:	4b36      	ldr	r3, [pc, #216]	; (8390 <__swsetup_r+0xdc>)
    82b6:	b570      	push	{r4, r5, r6, lr}
    82b8:	681d      	ldr	r5, [r3, #0]
    82ba:	0006      	movs	r6, r0
    82bc:	000c      	movs	r4, r1
    82be:	2d00      	cmp	r5, #0
    82c0:	d005      	beq.n	82ce <__swsetup_r+0x1a>
    82c2:	69ab      	ldr	r3, [r5, #24]
    82c4:	2b00      	cmp	r3, #0
    82c6:	d102      	bne.n	82ce <__swsetup_r+0x1a>
    82c8:	0028      	movs	r0, r5
    82ca:	f000 f961 	bl	8590 <__sinit>
    82ce:	4b31      	ldr	r3, [pc, #196]	; (8394 <__swsetup_r+0xe0>)
    82d0:	429c      	cmp	r4, r3
    82d2:	d10f      	bne.n	82f4 <__swsetup_r+0x40>
    82d4:	686c      	ldr	r4, [r5, #4]
    82d6:	230c      	movs	r3, #12
    82d8:	5ee2      	ldrsh	r2, [r4, r3]
    82da:	b293      	uxth	r3, r2
    82dc:	0719      	lsls	r1, r3, #28
    82de:	d42d      	bmi.n	833c <__swsetup_r+0x88>
    82e0:	06d9      	lsls	r1, r3, #27
    82e2:	d411      	bmi.n	8308 <__swsetup_r+0x54>
    82e4:	2309      	movs	r3, #9
    82e6:	2001      	movs	r0, #1
    82e8:	6033      	str	r3, [r6, #0]
    82ea:	3337      	adds	r3, #55	; 0x37
    82ec:	4313      	orrs	r3, r2
    82ee:	81a3      	strh	r3, [r4, #12]
    82f0:	4240      	negs	r0, r0
    82f2:	bd70      	pop	{r4, r5, r6, pc}
    82f4:	4b28      	ldr	r3, [pc, #160]	; (8398 <__swsetup_r+0xe4>)
    82f6:	429c      	cmp	r4, r3
    82f8:	d101      	bne.n	82fe <__swsetup_r+0x4a>
    82fa:	68ac      	ldr	r4, [r5, #8]
    82fc:	e7eb      	b.n	82d6 <__swsetup_r+0x22>
    82fe:	4b27      	ldr	r3, [pc, #156]	; (839c <__swsetup_r+0xe8>)
    8300:	429c      	cmp	r4, r3
    8302:	d1e8      	bne.n	82d6 <__swsetup_r+0x22>
    8304:	68ec      	ldr	r4, [r5, #12]
    8306:	e7e6      	b.n	82d6 <__swsetup_r+0x22>
    8308:	075b      	lsls	r3, r3, #29
    830a:	d513      	bpl.n	8334 <__swsetup_r+0x80>
    830c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    830e:	2900      	cmp	r1, #0
    8310:	d008      	beq.n	8324 <__swsetup_r+0x70>
    8312:	0023      	movs	r3, r4
    8314:	3344      	adds	r3, #68	; 0x44
    8316:	4299      	cmp	r1, r3
    8318:	d002      	beq.n	8320 <__swsetup_r+0x6c>
    831a:	0030      	movs	r0, r6
    831c:	f000 fa44 	bl	87a8 <_free_r>
    8320:	2300      	movs	r3, #0
    8322:	6363      	str	r3, [r4, #52]	; 0x34
    8324:	2224      	movs	r2, #36	; 0x24
    8326:	89a3      	ldrh	r3, [r4, #12]
    8328:	4393      	bics	r3, r2
    832a:	81a3      	strh	r3, [r4, #12]
    832c:	2300      	movs	r3, #0
    832e:	6063      	str	r3, [r4, #4]
    8330:	6923      	ldr	r3, [r4, #16]
    8332:	6023      	str	r3, [r4, #0]
    8334:	2308      	movs	r3, #8
    8336:	89a2      	ldrh	r2, [r4, #12]
    8338:	4313      	orrs	r3, r2
    833a:	81a3      	strh	r3, [r4, #12]
    833c:	6923      	ldr	r3, [r4, #16]
    833e:	2b00      	cmp	r3, #0
    8340:	d10b      	bne.n	835a <__swsetup_r+0xa6>
    8342:	21a0      	movs	r1, #160	; 0xa0
    8344:	2280      	movs	r2, #128	; 0x80
    8346:	89a3      	ldrh	r3, [r4, #12]
    8348:	0089      	lsls	r1, r1, #2
    834a:	0092      	lsls	r2, r2, #2
    834c:	400b      	ands	r3, r1
    834e:	4293      	cmp	r3, r2
    8350:	d003      	beq.n	835a <__swsetup_r+0xa6>
    8352:	0021      	movs	r1, r4
    8354:	0030      	movs	r0, r6
    8356:	f000 f9d9 	bl	870c <__smakebuf_r>
    835a:	2301      	movs	r3, #1
    835c:	89a2      	ldrh	r2, [r4, #12]
    835e:	4013      	ands	r3, r2
    8360:	d011      	beq.n	8386 <__swsetup_r+0xd2>
    8362:	2300      	movs	r3, #0
    8364:	60a3      	str	r3, [r4, #8]
    8366:	6963      	ldr	r3, [r4, #20]
    8368:	425b      	negs	r3, r3
    836a:	61a3      	str	r3, [r4, #24]
    836c:	2000      	movs	r0, #0
    836e:	6923      	ldr	r3, [r4, #16]
    8370:	4283      	cmp	r3, r0
    8372:	d1be      	bne.n	82f2 <__swsetup_r+0x3e>
    8374:	230c      	movs	r3, #12
    8376:	5ee2      	ldrsh	r2, [r4, r3]
    8378:	0613      	lsls	r3, r2, #24
    837a:	d5ba      	bpl.n	82f2 <__swsetup_r+0x3e>
    837c:	2340      	movs	r3, #64	; 0x40
    837e:	4313      	orrs	r3, r2
    8380:	81a3      	strh	r3, [r4, #12]
    8382:	3801      	subs	r0, #1
    8384:	e7b5      	b.n	82f2 <__swsetup_r+0x3e>
    8386:	0792      	lsls	r2, r2, #30
    8388:	d400      	bmi.n	838c <__swsetup_r+0xd8>
    838a:	6963      	ldr	r3, [r4, #20]
    838c:	60a3      	str	r3, [r4, #8]
    838e:	e7ed      	b.n	836c <__swsetup_r+0xb8>
    8390:	20000010 	.word	0x20000010
    8394:	0000a454 	.word	0x0000a454
    8398:	0000a474 	.word	0x0000a474
    839c:	0000a434 	.word	0x0000a434

000083a0 <__sflush_r>:
    83a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    83a2:	898a      	ldrh	r2, [r1, #12]
    83a4:	0005      	movs	r5, r0
    83a6:	000c      	movs	r4, r1
    83a8:	0713      	lsls	r3, r2, #28
    83aa:	d460      	bmi.n	846e <__sflush_r+0xce>
    83ac:	684b      	ldr	r3, [r1, #4]
    83ae:	2b00      	cmp	r3, #0
    83b0:	dc04      	bgt.n	83bc <__sflush_r+0x1c>
    83b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    83b4:	2b00      	cmp	r3, #0
    83b6:	dc01      	bgt.n	83bc <__sflush_r+0x1c>
    83b8:	2000      	movs	r0, #0
    83ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    83bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    83be:	2f00      	cmp	r7, #0
    83c0:	d0fa      	beq.n	83b8 <__sflush_r+0x18>
    83c2:	2300      	movs	r3, #0
    83c4:	682e      	ldr	r6, [r5, #0]
    83c6:	602b      	str	r3, [r5, #0]
    83c8:	2380      	movs	r3, #128	; 0x80
    83ca:	015b      	lsls	r3, r3, #5
    83cc:	401a      	ands	r2, r3
    83ce:	d034      	beq.n	843a <__sflush_r+0x9a>
    83d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    83d2:	89a3      	ldrh	r3, [r4, #12]
    83d4:	075b      	lsls	r3, r3, #29
    83d6:	d506      	bpl.n	83e6 <__sflush_r+0x46>
    83d8:	6863      	ldr	r3, [r4, #4]
    83da:	1ac0      	subs	r0, r0, r3
    83dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    83de:	2b00      	cmp	r3, #0
    83e0:	d001      	beq.n	83e6 <__sflush_r+0x46>
    83e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    83e4:	1ac0      	subs	r0, r0, r3
    83e6:	0002      	movs	r2, r0
    83e8:	6a21      	ldr	r1, [r4, #32]
    83ea:	2300      	movs	r3, #0
    83ec:	0028      	movs	r0, r5
    83ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    83f0:	47b8      	blx	r7
    83f2:	89a1      	ldrh	r1, [r4, #12]
    83f4:	1c43      	adds	r3, r0, #1
    83f6:	d106      	bne.n	8406 <__sflush_r+0x66>
    83f8:	682b      	ldr	r3, [r5, #0]
    83fa:	2b1d      	cmp	r3, #29
    83fc:	d831      	bhi.n	8462 <__sflush_r+0xc2>
    83fe:	4a2c      	ldr	r2, [pc, #176]	; (84b0 <__sflush_r+0x110>)
    8400:	40da      	lsrs	r2, r3
    8402:	07d3      	lsls	r3, r2, #31
    8404:	d52d      	bpl.n	8462 <__sflush_r+0xc2>
    8406:	2300      	movs	r3, #0
    8408:	6063      	str	r3, [r4, #4]
    840a:	6923      	ldr	r3, [r4, #16]
    840c:	6023      	str	r3, [r4, #0]
    840e:	04cb      	lsls	r3, r1, #19
    8410:	d505      	bpl.n	841e <__sflush_r+0x7e>
    8412:	1c43      	adds	r3, r0, #1
    8414:	d102      	bne.n	841c <__sflush_r+0x7c>
    8416:	682b      	ldr	r3, [r5, #0]
    8418:	2b00      	cmp	r3, #0
    841a:	d100      	bne.n	841e <__sflush_r+0x7e>
    841c:	6560      	str	r0, [r4, #84]	; 0x54
    841e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8420:	602e      	str	r6, [r5, #0]
    8422:	2900      	cmp	r1, #0
    8424:	d0c8      	beq.n	83b8 <__sflush_r+0x18>
    8426:	0023      	movs	r3, r4
    8428:	3344      	adds	r3, #68	; 0x44
    842a:	4299      	cmp	r1, r3
    842c:	d002      	beq.n	8434 <__sflush_r+0x94>
    842e:	0028      	movs	r0, r5
    8430:	f000 f9ba 	bl	87a8 <_free_r>
    8434:	2000      	movs	r0, #0
    8436:	6360      	str	r0, [r4, #52]	; 0x34
    8438:	e7bf      	b.n	83ba <__sflush_r+0x1a>
    843a:	2301      	movs	r3, #1
    843c:	6a21      	ldr	r1, [r4, #32]
    843e:	0028      	movs	r0, r5
    8440:	47b8      	blx	r7
    8442:	1c43      	adds	r3, r0, #1
    8444:	d1c5      	bne.n	83d2 <__sflush_r+0x32>
    8446:	682b      	ldr	r3, [r5, #0]
    8448:	2b00      	cmp	r3, #0
    844a:	d0c2      	beq.n	83d2 <__sflush_r+0x32>
    844c:	2b1d      	cmp	r3, #29
    844e:	d001      	beq.n	8454 <__sflush_r+0xb4>
    8450:	2b16      	cmp	r3, #22
    8452:	d101      	bne.n	8458 <__sflush_r+0xb8>
    8454:	602e      	str	r6, [r5, #0]
    8456:	e7af      	b.n	83b8 <__sflush_r+0x18>
    8458:	2340      	movs	r3, #64	; 0x40
    845a:	89a2      	ldrh	r2, [r4, #12]
    845c:	4313      	orrs	r3, r2
    845e:	81a3      	strh	r3, [r4, #12]
    8460:	e7ab      	b.n	83ba <__sflush_r+0x1a>
    8462:	2340      	movs	r3, #64	; 0x40
    8464:	430b      	orrs	r3, r1
    8466:	2001      	movs	r0, #1
    8468:	81a3      	strh	r3, [r4, #12]
    846a:	4240      	negs	r0, r0
    846c:	e7a5      	b.n	83ba <__sflush_r+0x1a>
    846e:	690f      	ldr	r7, [r1, #16]
    8470:	2f00      	cmp	r7, #0
    8472:	d0a1      	beq.n	83b8 <__sflush_r+0x18>
    8474:	680b      	ldr	r3, [r1, #0]
    8476:	600f      	str	r7, [r1, #0]
    8478:	1bdb      	subs	r3, r3, r7
    847a:	9301      	str	r3, [sp, #4]
    847c:	2300      	movs	r3, #0
    847e:	0792      	lsls	r2, r2, #30
    8480:	d100      	bne.n	8484 <__sflush_r+0xe4>
    8482:	694b      	ldr	r3, [r1, #20]
    8484:	60a3      	str	r3, [r4, #8]
    8486:	9b01      	ldr	r3, [sp, #4]
    8488:	2b00      	cmp	r3, #0
    848a:	dc00      	bgt.n	848e <__sflush_r+0xee>
    848c:	e794      	b.n	83b8 <__sflush_r+0x18>
    848e:	9b01      	ldr	r3, [sp, #4]
    8490:	003a      	movs	r2, r7
    8492:	6a21      	ldr	r1, [r4, #32]
    8494:	0028      	movs	r0, r5
    8496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    8498:	47b0      	blx	r6
    849a:	2800      	cmp	r0, #0
    849c:	dc03      	bgt.n	84a6 <__sflush_r+0x106>
    849e:	2340      	movs	r3, #64	; 0x40
    84a0:	89a2      	ldrh	r2, [r4, #12]
    84a2:	4313      	orrs	r3, r2
    84a4:	e7df      	b.n	8466 <__sflush_r+0xc6>
    84a6:	9b01      	ldr	r3, [sp, #4]
    84a8:	183f      	adds	r7, r7, r0
    84aa:	1a1b      	subs	r3, r3, r0
    84ac:	9301      	str	r3, [sp, #4]
    84ae:	e7ea      	b.n	8486 <__sflush_r+0xe6>
    84b0:	20400001 	.word	0x20400001

000084b4 <_fflush_r>:
    84b4:	690b      	ldr	r3, [r1, #16]
    84b6:	b570      	push	{r4, r5, r6, lr}
    84b8:	0005      	movs	r5, r0
    84ba:	000c      	movs	r4, r1
    84bc:	2b00      	cmp	r3, #0
    84be:	d101      	bne.n	84c4 <_fflush_r+0x10>
    84c0:	2000      	movs	r0, #0
    84c2:	bd70      	pop	{r4, r5, r6, pc}
    84c4:	2800      	cmp	r0, #0
    84c6:	d004      	beq.n	84d2 <_fflush_r+0x1e>
    84c8:	6983      	ldr	r3, [r0, #24]
    84ca:	2b00      	cmp	r3, #0
    84cc:	d101      	bne.n	84d2 <_fflush_r+0x1e>
    84ce:	f000 f85f 	bl	8590 <__sinit>
    84d2:	4b0b      	ldr	r3, [pc, #44]	; (8500 <_fflush_r+0x4c>)
    84d4:	429c      	cmp	r4, r3
    84d6:	d109      	bne.n	84ec <_fflush_r+0x38>
    84d8:	686c      	ldr	r4, [r5, #4]
    84da:	220c      	movs	r2, #12
    84dc:	5ea3      	ldrsh	r3, [r4, r2]
    84de:	2b00      	cmp	r3, #0
    84e0:	d0ee      	beq.n	84c0 <_fflush_r+0xc>
    84e2:	0021      	movs	r1, r4
    84e4:	0028      	movs	r0, r5
    84e6:	f7ff ff5b 	bl	83a0 <__sflush_r>
    84ea:	e7ea      	b.n	84c2 <_fflush_r+0xe>
    84ec:	4b05      	ldr	r3, [pc, #20]	; (8504 <_fflush_r+0x50>)
    84ee:	429c      	cmp	r4, r3
    84f0:	d101      	bne.n	84f6 <_fflush_r+0x42>
    84f2:	68ac      	ldr	r4, [r5, #8]
    84f4:	e7f1      	b.n	84da <_fflush_r+0x26>
    84f6:	4b04      	ldr	r3, [pc, #16]	; (8508 <_fflush_r+0x54>)
    84f8:	429c      	cmp	r4, r3
    84fa:	d1ee      	bne.n	84da <_fflush_r+0x26>
    84fc:	68ec      	ldr	r4, [r5, #12]
    84fe:	e7ec      	b.n	84da <_fflush_r+0x26>
    8500:	0000a454 	.word	0x0000a454
    8504:	0000a474 	.word	0x0000a474
    8508:	0000a434 	.word	0x0000a434

0000850c <_cleanup_r>:
    850c:	b510      	push	{r4, lr}
    850e:	4902      	ldr	r1, [pc, #8]	; (8518 <_cleanup_r+0xc>)
    8510:	f000 f8b2 	bl	8678 <_fwalk_reent>
    8514:	bd10      	pop	{r4, pc}
    8516:	46c0      	nop			; (mov r8, r8)
    8518:	000084b5 	.word	0x000084b5

0000851c <std.isra.0>:
    851c:	2300      	movs	r3, #0
    851e:	b510      	push	{r4, lr}
    8520:	0004      	movs	r4, r0
    8522:	6003      	str	r3, [r0, #0]
    8524:	6043      	str	r3, [r0, #4]
    8526:	6083      	str	r3, [r0, #8]
    8528:	8181      	strh	r1, [r0, #12]
    852a:	6643      	str	r3, [r0, #100]	; 0x64
    852c:	81c2      	strh	r2, [r0, #14]
    852e:	6103      	str	r3, [r0, #16]
    8530:	6143      	str	r3, [r0, #20]
    8532:	6183      	str	r3, [r0, #24]
    8534:	0019      	movs	r1, r3
    8536:	2208      	movs	r2, #8
    8538:	305c      	adds	r0, #92	; 0x5c
    853a:	f7ff fc7a 	bl	7e32 <memset>
    853e:	4b05      	ldr	r3, [pc, #20]	; (8554 <std.isra.0+0x38>)
    8540:	6224      	str	r4, [r4, #32]
    8542:	6263      	str	r3, [r4, #36]	; 0x24
    8544:	4b04      	ldr	r3, [pc, #16]	; (8558 <std.isra.0+0x3c>)
    8546:	62a3      	str	r3, [r4, #40]	; 0x28
    8548:	4b04      	ldr	r3, [pc, #16]	; (855c <std.isra.0+0x40>)
    854a:	62e3      	str	r3, [r4, #44]	; 0x2c
    854c:	4b04      	ldr	r3, [pc, #16]	; (8560 <std.isra.0+0x44>)
    854e:	6323      	str	r3, [r4, #48]	; 0x30
    8550:	bd10      	pop	{r4, pc}
    8552:	46c0      	nop			; (mov r8, r8)
    8554:	00008f21 	.word	0x00008f21
    8558:	00008f49 	.word	0x00008f49
    855c:	00008f81 	.word	0x00008f81
    8560:	00008fad 	.word	0x00008fad

00008564 <__sfmoreglue>:
    8564:	b570      	push	{r4, r5, r6, lr}
    8566:	2568      	movs	r5, #104	; 0x68
    8568:	1e4a      	subs	r2, r1, #1
    856a:	4355      	muls	r5, r2
    856c:	000e      	movs	r6, r1
    856e:	0029      	movs	r1, r5
    8570:	3174      	adds	r1, #116	; 0x74
    8572:	f000 f963 	bl	883c <_malloc_r>
    8576:	1e04      	subs	r4, r0, #0
    8578:	d008      	beq.n	858c <__sfmoreglue+0x28>
    857a:	2100      	movs	r1, #0
    857c:	002a      	movs	r2, r5
    857e:	6001      	str	r1, [r0, #0]
    8580:	6046      	str	r6, [r0, #4]
    8582:	300c      	adds	r0, #12
    8584:	60a0      	str	r0, [r4, #8]
    8586:	3268      	adds	r2, #104	; 0x68
    8588:	f7ff fc53 	bl	7e32 <memset>
    858c:	0020      	movs	r0, r4
    858e:	bd70      	pop	{r4, r5, r6, pc}

00008590 <__sinit>:
    8590:	6983      	ldr	r3, [r0, #24]
    8592:	b513      	push	{r0, r1, r4, lr}
    8594:	0004      	movs	r4, r0
    8596:	2b00      	cmp	r3, #0
    8598:	d128      	bne.n	85ec <__sinit+0x5c>
    859a:	6483      	str	r3, [r0, #72]	; 0x48
    859c:	64c3      	str	r3, [r0, #76]	; 0x4c
    859e:	6503      	str	r3, [r0, #80]	; 0x50
    85a0:	4b13      	ldr	r3, [pc, #76]	; (85f0 <__sinit+0x60>)
    85a2:	4a14      	ldr	r2, [pc, #80]	; (85f4 <__sinit+0x64>)
    85a4:	681b      	ldr	r3, [r3, #0]
    85a6:	6282      	str	r2, [r0, #40]	; 0x28
    85a8:	9301      	str	r3, [sp, #4]
    85aa:	4298      	cmp	r0, r3
    85ac:	d101      	bne.n	85b2 <__sinit+0x22>
    85ae:	2301      	movs	r3, #1
    85b0:	6183      	str	r3, [r0, #24]
    85b2:	0020      	movs	r0, r4
    85b4:	f000 f820 	bl	85f8 <__sfp>
    85b8:	6060      	str	r0, [r4, #4]
    85ba:	0020      	movs	r0, r4
    85bc:	f000 f81c 	bl	85f8 <__sfp>
    85c0:	60a0      	str	r0, [r4, #8]
    85c2:	0020      	movs	r0, r4
    85c4:	f000 f818 	bl	85f8 <__sfp>
    85c8:	2200      	movs	r2, #0
    85ca:	60e0      	str	r0, [r4, #12]
    85cc:	2104      	movs	r1, #4
    85ce:	6860      	ldr	r0, [r4, #4]
    85d0:	f7ff ffa4 	bl	851c <std.isra.0>
    85d4:	2201      	movs	r2, #1
    85d6:	2109      	movs	r1, #9
    85d8:	68a0      	ldr	r0, [r4, #8]
    85da:	f7ff ff9f 	bl	851c <std.isra.0>
    85de:	2202      	movs	r2, #2
    85e0:	2112      	movs	r1, #18
    85e2:	68e0      	ldr	r0, [r4, #12]
    85e4:	f7ff ff9a 	bl	851c <std.isra.0>
    85e8:	2301      	movs	r3, #1
    85ea:	61a3      	str	r3, [r4, #24]
    85ec:	bd13      	pop	{r0, r1, r4, pc}
    85ee:	46c0      	nop			; (mov r8, r8)
    85f0:	0000a430 	.word	0x0000a430
    85f4:	0000850d 	.word	0x0000850d

000085f8 <__sfp>:
    85f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85fa:	4b1e      	ldr	r3, [pc, #120]	; (8674 <__sfp+0x7c>)
    85fc:	0007      	movs	r7, r0
    85fe:	681e      	ldr	r6, [r3, #0]
    8600:	69b3      	ldr	r3, [r6, #24]
    8602:	2b00      	cmp	r3, #0
    8604:	d102      	bne.n	860c <__sfp+0x14>
    8606:	0030      	movs	r0, r6
    8608:	f7ff ffc2 	bl	8590 <__sinit>
    860c:	3648      	adds	r6, #72	; 0x48
    860e:	68b4      	ldr	r4, [r6, #8]
    8610:	6873      	ldr	r3, [r6, #4]
    8612:	3b01      	subs	r3, #1
    8614:	d504      	bpl.n	8620 <__sfp+0x28>
    8616:	6833      	ldr	r3, [r6, #0]
    8618:	2b00      	cmp	r3, #0
    861a:	d007      	beq.n	862c <__sfp+0x34>
    861c:	6836      	ldr	r6, [r6, #0]
    861e:	e7f6      	b.n	860e <__sfp+0x16>
    8620:	220c      	movs	r2, #12
    8622:	5ea5      	ldrsh	r5, [r4, r2]
    8624:	2d00      	cmp	r5, #0
    8626:	d00d      	beq.n	8644 <__sfp+0x4c>
    8628:	3468      	adds	r4, #104	; 0x68
    862a:	e7f2      	b.n	8612 <__sfp+0x1a>
    862c:	2104      	movs	r1, #4
    862e:	0038      	movs	r0, r7
    8630:	f7ff ff98 	bl	8564 <__sfmoreglue>
    8634:	6030      	str	r0, [r6, #0]
    8636:	2800      	cmp	r0, #0
    8638:	d1f0      	bne.n	861c <__sfp+0x24>
    863a:	230c      	movs	r3, #12
    863c:	0004      	movs	r4, r0
    863e:	603b      	str	r3, [r7, #0]
    8640:	0020      	movs	r0, r4
    8642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8644:	2301      	movs	r3, #1
    8646:	0020      	movs	r0, r4
    8648:	425b      	negs	r3, r3
    864a:	81e3      	strh	r3, [r4, #14]
    864c:	3302      	adds	r3, #2
    864e:	81a3      	strh	r3, [r4, #12]
    8650:	6665      	str	r5, [r4, #100]	; 0x64
    8652:	6025      	str	r5, [r4, #0]
    8654:	60a5      	str	r5, [r4, #8]
    8656:	6065      	str	r5, [r4, #4]
    8658:	6125      	str	r5, [r4, #16]
    865a:	6165      	str	r5, [r4, #20]
    865c:	61a5      	str	r5, [r4, #24]
    865e:	2208      	movs	r2, #8
    8660:	0029      	movs	r1, r5
    8662:	305c      	adds	r0, #92	; 0x5c
    8664:	f7ff fbe5 	bl	7e32 <memset>
    8668:	6365      	str	r5, [r4, #52]	; 0x34
    866a:	63a5      	str	r5, [r4, #56]	; 0x38
    866c:	64a5      	str	r5, [r4, #72]	; 0x48
    866e:	64e5      	str	r5, [r4, #76]	; 0x4c
    8670:	e7e6      	b.n	8640 <__sfp+0x48>
    8672:	46c0      	nop			; (mov r8, r8)
    8674:	0000a430 	.word	0x0000a430

00008678 <_fwalk_reent>:
    8678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    867a:	0004      	movs	r4, r0
    867c:	0007      	movs	r7, r0
    867e:	2600      	movs	r6, #0
    8680:	9101      	str	r1, [sp, #4]
    8682:	3448      	adds	r4, #72	; 0x48
    8684:	2c00      	cmp	r4, #0
    8686:	d101      	bne.n	868c <_fwalk_reent+0x14>
    8688:	0030      	movs	r0, r6
    868a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    868c:	6863      	ldr	r3, [r4, #4]
    868e:	68a5      	ldr	r5, [r4, #8]
    8690:	9300      	str	r3, [sp, #0]
    8692:	9b00      	ldr	r3, [sp, #0]
    8694:	3b01      	subs	r3, #1
    8696:	9300      	str	r3, [sp, #0]
    8698:	d501      	bpl.n	869e <_fwalk_reent+0x26>
    869a:	6824      	ldr	r4, [r4, #0]
    869c:	e7f2      	b.n	8684 <_fwalk_reent+0xc>
    869e:	89ab      	ldrh	r3, [r5, #12]
    86a0:	2b01      	cmp	r3, #1
    86a2:	d908      	bls.n	86b6 <_fwalk_reent+0x3e>
    86a4:	220e      	movs	r2, #14
    86a6:	5eab      	ldrsh	r3, [r5, r2]
    86a8:	3301      	adds	r3, #1
    86aa:	d004      	beq.n	86b6 <_fwalk_reent+0x3e>
    86ac:	0029      	movs	r1, r5
    86ae:	0038      	movs	r0, r7
    86b0:	9b01      	ldr	r3, [sp, #4]
    86b2:	4798      	blx	r3
    86b4:	4306      	orrs	r6, r0
    86b6:	3568      	adds	r5, #104	; 0x68
    86b8:	e7eb      	b.n	8692 <_fwalk_reent+0x1a>
	...

000086bc <__swhatbuf_r>:
    86bc:	b570      	push	{r4, r5, r6, lr}
    86be:	000e      	movs	r6, r1
    86c0:	001d      	movs	r5, r3
    86c2:	230e      	movs	r3, #14
    86c4:	5ec9      	ldrsh	r1, [r1, r3]
    86c6:	b090      	sub	sp, #64	; 0x40
    86c8:	0014      	movs	r4, r2
    86ca:	2900      	cmp	r1, #0
    86cc:	da07      	bge.n	86de <__swhatbuf_r+0x22>
    86ce:	2300      	movs	r3, #0
    86d0:	602b      	str	r3, [r5, #0]
    86d2:	89b3      	ldrh	r3, [r6, #12]
    86d4:	061b      	lsls	r3, r3, #24
    86d6:	d411      	bmi.n	86fc <__swhatbuf_r+0x40>
    86d8:	2380      	movs	r3, #128	; 0x80
    86da:	00db      	lsls	r3, r3, #3
    86dc:	e00f      	b.n	86fe <__swhatbuf_r+0x42>
    86de:	aa01      	add	r2, sp, #4
    86e0:	f000 fc90 	bl	9004 <_fstat_r>
    86e4:	2800      	cmp	r0, #0
    86e6:	dbf2      	blt.n	86ce <__swhatbuf_r+0x12>
    86e8:	22f0      	movs	r2, #240	; 0xf0
    86ea:	9b02      	ldr	r3, [sp, #8]
    86ec:	0212      	lsls	r2, r2, #8
    86ee:	4013      	ands	r3, r2
    86f0:	4a05      	ldr	r2, [pc, #20]	; (8708 <__swhatbuf_r+0x4c>)
    86f2:	189b      	adds	r3, r3, r2
    86f4:	425a      	negs	r2, r3
    86f6:	4153      	adcs	r3, r2
    86f8:	602b      	str	r3, [r5, #0]
    86fa:	e7ed      	b.n	86d8 <__swhatbuf_r+0x1c>
    86fc:	2340      	movs	r3, #64	; 0x40
    86fe:	2000      	movs	r0, #0
    8700:	6023      	str	r3, [r4, #0]
    8702:	b010      	add	sp, #64	; 0x40
    8704:	bd70      	pop	{r4, r5, r6, pc}
    8706:	46c0      	nop			; (mov r8, r8)
    8708:	ffffe000 	.word	0xffffe000

0000870c <__smakebuf_r>:
    870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    870e:	2602      	movs	r6, #2
    8710:	898b      	ldrh	r3, [r1, #12]
    8712:	0005      	movs	r5, r0
    8714:	000c      	movs	r4, r1
    8716:	4233      	tst	r3, r6
    8718:	d006      	beq.n	8728 <__smakebuf_r+0x1c>
    871a:	0023      	movs	r3, r4
    871c:	3347      	adds	r3, #71	; 0x47
    871e:	6023      	str	r3, [r4, #0]
    8720:	6123      	str	r3, [r4, #16]
    8722:	2301      	movs	r3, #1
    8724:	6163      	str	r3, [r4, #20]
    8726:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    8728:	ab01      	add	r3, sp, #4
    872a:	466a      	mov	r2, sp
    872c:	f7ff ffc6 	bl	86bc <__swhatbuf_r>
    8730:	9900      	ldr	r1, [sp, #0]
    8732:	0007      	movs	r7, r0
    8734:	0028      	movs	r0, r5
    8736:	f000 f881 	bl	883c <_malloc_r>
    873a:	2800      	cmp	r0, #0
    873c:	d108      	bne.n	8750 <__smakebuf_r+0x44>
    873e:	220c      	movs	r2, #12
    8740:	5ea3      	ldrsh	r3, [r4, r2]
    8742:	059a      	lsls	r2, r3, #22
    8744:	d4ef      	bmi.n	8726 <__smakebuf_r+0x1a>
    8746:	2203      	movs	r2, #3
    8748:	4393      	bics	r3, r2
    874a:	431e      	orrs	r6, r3
    874c:	81a6      	strh	r6, [r4, #12]
    874e:	e7e4      	b.n	871a <__smakebuf_r+0xe>
    8750:	4b0f      	ldr	r3, [pc, #60]	; (8790 <__smakebuf_r+0x84>)
    8752:	62ab      	str	r3, [r5, #40]	; 0x28
    8754:	2380      	movs	r3, #128	; 0x80
    8756:	89a2      	ldrh	r2, [r4, #12]
    8758:	6020      	str	r0, [r4, #0]
    875a:	4313      	orrs	r3, r2
    875c:	81a3      	strh	r3, [r4, #12]
    875e:	9b00      	ldr	r3, [sp, #0]
    8760:	6120      	str	r0, [r4, #16]
    8762:	6163      	str	r3, [r4, #20]
    8764:	9b01      	ldr	r3, [sp, #4]
    8766:	2b00      	cmp	r3, #0
    8768:	d00d      	beq.n	8786 <__smakebuf_r+0x7a>
    876a:	230e      	movs	r3, #14
    876c:	5ee1      	ldrsh	r1, [r4, r3]
    876e:	0028      	movs	r0, r5
    8770:	f000 fc5a 	bl	9028 <_isatty_r>
    8774:	2800      	cmp	r0, #0
    8776:	d006      	beq.n	8786 <__smakebuf_r+0x7a>
    8778:	2203      	movs	r2, #3
    877a:	89a3      	ldrh	r3, [r4, #12]
    877c:	4393      	bics	r3, r2
    877e:	001a      	movs	r2, r3
    8780:	2301      	movs	r3, #1
    8782:	4313      	orrs	r3, r2
    8784:	81a3      	strh	r3, [r4, #12]
    8786:	89a0      	ldrh	r0, [r4, #12]
    8788:	4338      	orrs	r0, r7
    878a:	81a0      	strh	r0, [r4, #12]
    878c:	e7cb      	b.n	8726 <__smakebuf_r+0x1a>
    878e:	46c0      	nop			; (mov r8, r8)
    8790:	0000850d 	.word	0x0000850d

00008794 <malloc>:
    8794:	b510      	push	{r4, lr}
    8796:	4b03      	ldr	r3, [pc, #12]	; (87a4 <malloc+0x10>)
    8798:	0001      	movs	r1, r0
    879a:	6818      	ldr	r0, [r3, #0]
    879c:	f000 f84e 	bl	883c <_malloc_r>
    87a0:	bd10      	pop	{r4, pc}
    87a2:	46c0      	nop			; (mov r8, r8)
    87a4:	20000010 	.word	0x20000010

000087a8 <_free_r>:
    87a8:	b570      	push	{r4, r5, r6, lr}
    87aa:	0005      	movs	r5, r0
    87ac:	2900      	cmp	r1, #0
    87ae:	d010      	beq.n	87d2 <_free_r+0x2a>
    87b0:	1f0c      	subs	r4, r1, #4
    87b2:	6823      	ldr	r3, [r4, #0]
    87b4:	2b00      	cmp	r3, #0
    87b6:	da00      	bge.n	87ba <_free_r+0x12>
    87b8:	18e4      	adds	r4, r4, r3
    87ba:	0028      	movs	r0, r5
    87bc:	f000 fc65 	bl	908a <__malloc_lock>
    87c0:	4a1d      	ldr	r2, [pc, #116]	; (8838 <_free_r+0x90>)
    87c2:	6813      	ldr	r3, [r2, #0]
    87c4:	2b00      	cmp	r3, #0
    87c6:	d105      	bne.n	87d4 <_free_r+0x2c>
    87c8:	6063      	str	r3, [r4, #4]
    87ca:	6014      	str	r4, [r2, #0]
    87cc:	0028      	movs	r0, r5
    87ce:	f000 fc5d 	bl	908c <__malloc_unlock>
    87d2:	bd70      	pop	{r4, r5, r6, pc}
    87d4:	42a3      	cmp	r3, r4
    87d6:	d909      	bls.n	87ec <_free_r+0x44>
    87d8:	6821      	ldr	r1, [r4, #0]
    87da:	1860      	adds	r0, r4, r1
    87dc:	4283      	cmp	r3, r0
    87de:	d1f3      	bne.n	87c8 <_free_r+0x20>
    87e0:	6818      	ldr	r0, [r3, #0]
    87e2:	685b      	ldr	r3, [r3, #4]
    87e4:	1841      	adds	r1, r0, r1
    87e6:	6021      	str	r1, [r4, #0]
    87e8:	e7ee      	b.n	87c8 <_free_r+0x20>
    87ea:	0013      	movs	r3, r2
    87ec:	685a      	ldr	r2, [r3, #4]
    87ee:	2a00      	cmp	r2, #0
    87f0:	d001      	beq.n	87f6 <_free_r+0x4e>
    87f2:	42a2      	cmp	r2, r4
    87f4:	d9f9      	bls.n	87ea <_free_r+0x42>
    87f6:	6819      	ldr	r1, [r3, #0]
    87f8:	1858      	adds	r0, r3, r1
    87fa:	42a0      	cmp	r0, r4
    87fc:	d10b      	bne.n	8816 <_free_r+0x6e>
    87fe:	6820      	ldr	r0, [r4, #0]
    8800:	1809      	adds	r1, r1, r0
    8802:	1858      	adds	r0, r3, r1
    8804:	6019      	str	r1, [r3, #0]
    8806:	4282      	cmp	r2, r0
    8808:	d1e0      	bne.n	87cc <_free_r+0x24>
    880a:	6810      	ldr	r0, [r2, #0]
    880c:	6852      	ldr	r2, [r2, #4]
    880e:	1841      	adds	r1, r0, r1
    8810:	6019      	str	r1, [r3, #0]
    8812:	605a      	str	r2, [r3, #4]
    8814:	e7da      	b.n	87cc <_free_r+0x24>
    8816:	42a0      	cmp	r0, r4
    8818:	d902      	bls.n	8820 <_free_r+0x78>
    881a:	230c      	movs	r3, #12
    881c:	602b      	str	r3, [r5, #0]
    881e:	e7d5      	b.n	87cc <_free_r+0x24>
    8820:	6821      	ldr	r1, [r4, #0]
    8822:	1860      	adds	r0, r4, r1
    8824:	4282      	cmp	r2, r0
    8826:	d103      	bne.n	8830 <_free_r+0x88>
    8828:	6810      	ldr	r0, [r2, #0]
    882a:	6852      	ldr	r2, [r2, #4]
    882c:	1841      	adds	r1, r0, r1
    882e:	6021      	str	r1, [r4, #0]
    8830:	6062      	str	r2, [r4, #4]
    8832:	605c      	str	r4, [r3, #4]
    8834:	e7ca      	b.n	87cc <_free_r+0x24>
    8836:	46c0      	nop			; (mov r8, r8)
    8838:	200009a4 	.word	0x200009a4

0000883c <_malloc_r>:
    883c:	2303      	movs	r3, #3
    883e:	b570      	push	{r4, r5, r6, lr}
    8840:	1ccd      	adds	r5, r1, #3
    8842:	439d      	bics	r5, r3
    8844:	3508      	adds	r5, #8
    8846:	0006      	movs	r6, r0
    8848:	2d0c      	cmp	r5, #12
    884a:	d21e      	bcs.n	888a <_malloc_r+0x4e>
    884c:	250c      	movs	r5, #12
    884e:	42a9      	cmp	r1, r5
    8850:	d81d      	bhi.n	888e <_malloc_r+0x52>
    8852:	0030      	movs	r0, r6
    8854:	f000 fc19 	bl	908a <__malloc_lock>
    8858:	4a25      	ldr	r2, [pc, #148]	; (88f0 <_malloc_r+0xb4>)
    885a:	6814      	ldr	r4, [r2, #0]
    885c:	0021      	movs	r1, r4
    885e:	2900      	cmp	r1, #0
    8860:	d119      	bne.n	8896 <_malloc_r+0x5a>
    8862:	4c24      	ldr	r4, [pc, #144]	; (88f4 <_malloc_r+0xb8>)
    8864:	6823      	ldr	r3, [r4, #0]
    8866:	2b00      	cmp	r3, #0
    8868:	d103      	bne.n	8872 <_malloc_r+0x36>
    886a:	0030      	movs	r0, r6
    886c:	f000 fb46 	bl	8efc <_sbrk_r>
    8870:	6020      	str	r0, [r4, #0]
    8872:	0029      	movs	r1, r5
    8874:	0030      	movs	r0, r6
    8876:	f000 fb41 	bl	8efc <_sbrk_r>
    887a:	1c43      	adds	r3, r0, #1
    887c:	d12c      	bne.n	88d8 <_malloc_r+0x9c>
    887e:	230c      	movs	r3, #12
    8880:	0030      	movs	r0, r6
    8882:	6033      	str	r3, [r6, #0]
    8884:	f000 fc02 	bl	908c <__malloc_unlock>
    8888:	e003      	b.n	8892 <_malloc_r+0x56>
    888a:	2d00      	cmp	r5, #0
    888c:	dadf      	bge.n	884e <_malloc_r+0x12>
    888e:	230c      	movs	r3, #12
    8890:	6033      	str	r3, [r6, #0]
    8892:	2000      	movs	r0, #0
    8894:	bd70      	pop	{r4, r5, r6, pc}
    8896:	680b      	ldr	r3, [r1, #0]
    8898:	1b5b      	subs	r3, r3, r5
    889a:	d41a      	bmi.n	88d2 <_malloc_r+0x96>
    889c:	2b0b      	cmp	r3, #11
    889e:	d903      	bls.n	88a8 <_malloc_r+0x6c>
    88a0:	600b      	str	r3, [r1, #0]
    88a2:	18cc      	adds	r4, r1, r3
    88a4:	6025      	str	r5, [r4, #0]
    88a6:	e003      	b.n	88b0 <_malloc_r+0x74>
    88a8:	428c      	cmp	r4, r1
    88aa:	d10e      	bne.n	88ca <_malloc_r+0x8e>
    88ac:	6863      	ldr	r3, [r4, #4]
    88ae:	6013      	str	r3, [r2, #0]
    88b0:	0030      	movs	r0, r6
    88b2:	f000 fbeb 	bl	908c <__malloc_unlock>
    88b6:	0020      	movs	r0, r4
    88b8:	2207      	movs	r2, #7
    88ba:	300b      	adds	r0, #11
    88bc:	1d23      	adds	r3, r4, #4
    88be:	4390      	bics	r0, r2
    88c0:	1ac3      	subs	r3, r0, r3
    88c2:	d0e7      	beq.n	8894 <_malloc_r+0x58>
    88c4:	425a      	negs	r2, r3
    88c6:	50e2      	str	r2, [r4, r3]
    88c8:	e7e4      	b.n	8894 <_malloc_r+0x58>
    88ca:	684b      	ldr	r3, [r1, #4]
    88cc:	6063      	str	r3, [r4, #4]
    88ce:	000c      	movs	r4, r1
    88d0:	e7ee      	b.n	88b0 <_malloc_r+0x74>
    88d2:	000c      	movs	r4, r1
    88d4:	6849      	ldr	r1, [r1, #4]
    88d6:	e7c2      	b.n	885e <_malloc_r+0x22>
    88d8:	2303      	movs	r3, #3
    88da:	1cc4      	adds	r4, r0, #3
    88dc:	439c      	bics	r4, r3
    88de:	42a0      	cmp	r0, r4
    88e0:	d0e0      	beq.n	88a4 <_malloc_r+0x68>
    88e2:	1a21      	subs	r1, r4, r0
    88e4:	0030      	movs	r0, r6
    88e6:	f000 fb09 	bl	8efc <_sbrk_r>
    88ea:	1c43      	adds	r3, r0, #1
    88ec:	d1da      	bne.n	88a4 <_malloc_r+0x68>
    88ee:	e7c6      	b.n	887e <_malloc_r+0x42>
    88f0:	200009a4 	.word	0x200009a4
    88f4:	200009a8 	.word	0x200009a8

000088f8 <__sfputc_r>:
    88f8:	6893      	ldr	r3, [r2, #8]
    88fa:	b510      	push	{r4, lr}
    88fc:	3b01      	subs	r3, #1
    88fe:	6093      	str	r3, [r2, #8]
    8900:	2b00      	cmp	r3, #0
    8902:	da05      	bge.n	8910 <__sfputc_r+0x18>
    8904:	6994      	ldr	r4, [r2, #24]
    8906:	42a3      	cmp	r3, r4
    8908:	db08      	blt.n	891c <__sfputc_r+0x24>
    890a:	b2cb      	uxtb	r3, r1
    890c:	2b0a      	cmp	r3, #10
    890e:	d005      	beq.n	891c <__sfputc_r+0x24>
    8910:	6813      	ldr	r3, [r2, #0]
    8912:	1c58      	adds	r0, r3, #1
    8914:	6010      	str	r0, [r2, #0]
    8916:	7019      	strb	r1, [r3, #0]
    8918:	b2c8      	uxtb	r0, r1
    891a:	bd10      	pop	{r4, pc}
    891c:	f7ff fc74 	bl	8208 <__swbuf_r>
    8920:	e7fb      	b.n	891a <__sfputc_r+0x22>

00008922 <__sfputs_r>:
    8922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8924:	0006      	movs	r6, r0
    8926:	000f      	movs	r7, r1
    8928:	0014      	movs	r4, r2
    892a:	18d5      	adds	r5, r2, r3
    892c:	42ac      	cmp	r4, r5
    892e:	d101      	bne.n	8934 <__sfputs_r+0x12>
    8930:	2000      	movs	r0, #0
    8932:	e007      	b.n	8944 <__sfputs_r+0x22>
    8934:	7821      	ldrb	r1, [r4, #0]
    8936:	003a      	movs	r2, r7
    8938:	0030      	movs	r0, r6
    893a:	f7ff ffdd 	bl	88f8 <__sfputc_r>
    893e:	3401      	adds	r4, #1
    8940:	1c43      	adds	r3, r0, #1
    8942:	d1f3      	bne.n	892c <__sfputs_r+0xa>
    8944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008948 <_vfiprintf_r>:
    8948:	b5f0      	push	{r4, r5, r6, r7, lr}
    894a:	b09f      	sub	sp, #124	; 0x7c
    894c:	0006      	movs	r6, r0
    894e:	000f      	movs	r7, r1
    8950:	0014      	movs	r4, r2
    8952:	9305      	str	r3, [sp, #20]
    8954:	2800      	cmp	r0, #0
    8956:	d004      	beq.n	8962 <_vfiprintf_r+0x1a>
    8958:	6983      	ldr	r3, [r0, #24]
    895a:	2b00      	cmp	r3, #0
    895c:	d101      	bne.n	8962 <_vfiprintf_r+0x1a>
    895e:	f7ff fe17 	bl	8590 <__sinit>
    8962:	4b7f      	ldr	r3, [pc, #508]	; (8b60 <_vfiprintf_r+0x218>)
    8964:	429f      	cmp	r7, r3
    8966:	d15c      	bne.n	8a22 <_vfiprintf_r+0xda>
    8968:	6877      	ldr	r7, [r6, #4]
    896a:	89bb      	ldrh	r3, [r7, #12]
    896c:	071b      	lsls	r3, r3, #28
    896e:	d562      	bpl.n	8a36 <_vfiprintf_r+0xee>
    8970:	693b      	ldr	r3, [r7, #16]
    8972:	2b00      	cmp	r3, #0
    8974:	d05f      	beq.n	8a36 <_vfiprintf_r+0xee>
    8976:	2300      	movs	r3, #0
    8978:	ad06      	add	r5, sp, #24
    897a:	616b      	str	r3, [r5, #20]
    897c:	3320      	adds	r3, #32
    897e:	766b      	strb	r3, [r5, #25]
    8980:	3310      	adds	r3, #16
    8982:	76ab      	strb	r3, [r5, #26]
    8984:	9402      	str	r4, [sp, #8]
    8986:	9c02      	ldr	r4, [sp, #8]
    8988:	7823      	ldrb	r3, [r4, #0]
    898a:	2b00      	cmp	r3, #0
    898c:	d15d      	bne.n	8a4a <_vfiprintf_r+0x102>
    898e:	9b02      	ldr	r3, [sp, #8]
    8990:	1ae3      	subs	r3, r4, r3
    8992:	9304      	str	r3, [sp, #16]
    8994:	d00d      	beq.n	89b2 <_vfiprintf_r+0x6a>
    8996:	9b04      	ldr	r3, [sp, #16]
    8998:	9a02      	ldr	r2, [sp, #8]
    899a:	0039      	movs	r1, r7
    899c:	0030      	movs	r0, r6
    899e:	f7ff ffc0 	bl	8922 <__sfputs_r>
    89a2:	1c43      	adds	r3, r0, #1
    89a4:	d100      	bne.n	89a8 <_vfiprintf_r+0x60>
    89a6:	e0cc      	b.n	8b42 <_vfiprintf_r+0x1fa>
    89a8:	696a      	ldr	r2, [r5, #20]
    89aa:	9b04      	ldr	r3, [sp, #16]
    89ac:	4694      	mov	ip, r2
    89ae:	4463      	add	r3, ip
    89b0:	616b      	str	r3, [r5, #20]
    89b2:	7823      	ldrb	r3, [r4, #0]
    89b4:	2b00      	cmp	r3, #0
    89b6:	d100      	bne.n	89ba <_vfiprintf_r+0x72>
    89b8:	e0c3      	b.n	8b42 <_vfiprintf_r+0x1fa>
    89ba:	2201      	movs	r2, #1
    89bc:	2300      	movs	r3, #0
    89be:	4252      	negs	r2, r2
    89c0:	606a      	str	r2, [r5, #4]
    89c2:	a902      	add	r1, sp, #8
    89c4:	3254      	adds	r2, #84	; 0x54
    89c6:	1852      	adds	r2, r2, r1
    89c8:	3401      	adds	r4, #1
    89ca:	602b      	str	r3, [r5, #0]
    89cc:	60eb      	str	r3, [r5, #12]
    89ce:	60ab      	str	r3, [r5, #8]
    89d0:	7013      	strb	r3, [r2, #0]
    89d2:	65ab      	str	r3, [r5, #88]	; 0x58
    89d4:	7821      	ldrb	r1, [r4, #0]
    89d6:	2205      	movs	r2, #5
    89d8:	4862      	ldr	r0, [pc, #392]	; (8b64 <_vfiprintf_r+0x21c>)
    89da:	f000 fb4b 	bl	9074 <memchr>
    89de:	1c63      	adds	r3, r4, #1
    89e0:	469c      	mov	ip, r3
    89e2:	2800      	cmp	r0, #0
    89e4:	d135      	bne.n	8a52 <_vfiprintf_r+0x10a>
    89e6:	6829      	ldr	r1, [r5, #0]
    89e8:	06cb      	lsls	r3, r1, #27
    89ea:	d504      	bpl.n	89f6 <_vfiprintf_r+0xae>
    89ec:	2353      	movs	r3, #83	; 0x53
    89ee:	aa02      	add	r2, sp, #8
    89f0:	3020      	adds	r0, #32
    89f2:	189b      	adds	r3, r3, r2
    89f4:	7018      	strb	r0, [r3, #0]
    89f6:	070b      	lsls	r3, r1, #28
    89f8:	d504      	bpl.n	8a04 <_vfiprintf_r+0xbc>
    89fa:	2353      	movs	r3, #83	; 0x53
    89fc:	202b      	movs	r0, #43	; 0x2b
    89fe:	aa02      	add	r2, sp, #8
    8a00:	189b      	adds	r3, r3, r2
    8a02:	7018      	strb	r0, [r3, #0]
    8a04:	7823      	ldrb	r3, [r4, #0]
    8a06:	2b2a      	cmp	r3, #42	; 0x2a
    8a08:	d02c      	beq.n	8a64 <_vfiprintf_r+0x11c>
    8a0a:	2000      	movs	r0, #0
    8a0c:	210a      	movs	r1, #10
    8a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a10:	7822      	ldrb	r2, [r4, #0]
    8a12:	3a30      	subs	r2, #48	; 0x30
    8a14:	2a09      	cmp	r2, #9
    8a16:	d800      	bhi.n	8a1a <_vfiprintf_r+0xd2>
    8a18:	e06b      	b.n	8af2 <_vfiprintf_r+0x1aa>
    8a1a:	2800      	cmp	r0, #0
    8a1c:	d02a      	beq.n	8a74 <_vfiprintf_r+0x12c>
    8a1e:	9309      	str	r3, [sp, #36]	; 0x24
    8a20:	e028      	b.n	8a74 <_vfiprintf_r+0x12c>
    8a22:	4b51      	ldr	r3, [pc, #324]	; (8b68 <_vfiprintf_r+0x220>)
    8a24:	429f      	cmp	r7, r3
    8a26:	d101      	bne.n	8a2c <_vfiprintf_r+0xe4>
    8a28:	68b7      	ldr	r7, [r6, #8]
    8a2a:	e79e      	b.n	896a <_vfiprintf_r+0x22>
    8a2c:	4b4f      	ldr	r3, [pc, #316]	; (8b6c <_vfiprintf_r+0x224>)
    8a2e:	429f      	cmp	r7, r3
    8a30:	d19b      	bne.n	896a <_vfiprintf_r+0x22>
    8a32:	68f7      	ldr	r7, [r6, #12]
    8a34:	e799      	b.n	896a <_vfiprintf_r+0x22>
    8a36:	0039      	movs	r1, r7
    8a38:	0030      	movs	r0, r6
    8a3a:	f7ff fc3b 	bl	82b4 <__swsetup_r>
    8a3e:	2800      	cmp	r0, #0
    8a40:	d099      	beq.n	8976 <_vfiprintf_r+0x2e>
    8a42:	2001      	movs	r0, #1
    8a44:	4240      	negs	r0, r0
    8a46:	b01f      	add	sp, #124	; 0x7c
    8a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a4a:	2b25      	cmp	r3, #37	; 0x25
    8a4c:	d09f      	beq.n	898e <_vfiprintf_r+0x46>
    8a4e:	3401      	adds	r4, #1
    8a50:	e79a      	b.n	8988 <_vfiprintf_r+0x40>
    8a52:	4b44      	ldr	r3, [pc, #272]	; (8b64 <_vfiprintf_r+0x21c>)
    8a54:	6829      	ldr	r1, [r5, #0]
    8a56:	1ac0      	subs	r0, r0, r3
    8a58:	2301      	movs	r3, #1
    8a5a:	4083      	lsls	r3, r0
    8a5c:	430b      	orrs	r3, r1
    8a5e:	602b      	str	r3, [r5, #0]
    8a60:	4664      	mov	r4, ip
    8a62:	e7b7      	b.n	89d4 <_vfiprintf_r+0x8c>
    8a64:	9b05      	ldr	r3, [sp, #20]
    8a66:	1d18      	adds	r0, r3, #4
    8a68:	681b      	ldr	r3, [r3, #0]
    8a6a:	9005      	str	r0, [sp, #20]
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	db3a      	blt.n	8ae6 <_vfiprintf_r+0x19e>
    8a70:	9309      	str	r3, [sp, #36]	; 0x24
    8a72:	4664      	mov	r4, ip
    8a74:	7823      	ldrb	r3, [r4, #0]
    8a76:	2b2e      	cmp	r3, #46	; 0x2e
    8a78:	d10b      	bne.n	8a92 <_vfiprintf_r+0x14a>
    8a7a:	7863      	ldrb	r3, [r4, #1]
    8a7c:	1c62      	adds	r2, r4, #1
    8a7e:	2b2a      	cmp	r3, #42	; 0x2a
    8a80:	d13f      	bne.n	8b02 <_vfiprintf_r+0x1ba>
    8a82:	9b05      	ldr	r3, [sp, #20]
    8a84:	3402      	adds	r4, #2
    8a86:	1d1a      	adds	r2, r3, #4
    8a88:	681b      	ldr	r3, [r3, #0]
    8a8a:	9205      	str	r2, [sp, #20]
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	db35      	blt.n	8afc <_vfiprintf_r+0x1b4>
    8a90:	9307      	str	r3, [sp, #28]
    8a92:	7821      	ldrb	r1, [r4, #0]
    8a94:	2203      	movs	r2, #3
    8a96:	4836      	ldr	r0, [pc, #216]	; (8b70 <_vfiprintf_r+0x228>)
    8a98:	f000 faec 	bl	9074 <memchr>
    8a9c:	2800      	cmp	r0, #0
    8a9e:	d007      	beq.n	8ab0 <_vfiprintf_r+0x168>
    8aa0:	4b33      	ldr	r3, [pc, #204]	; (8b70 <_vfiprintf_r+0x228>)
    8aa2:	682a      	ldr	r2, [r5, #0]
    8aa4:	1ac0      	subs	r0, r0, r3
    8aa6:	2340      	movs	r3, #64	; 0x40
    8aa8:	4083      	lsls	r3, r0
    8aaa:	4313      	orrs	r3, r2
    8aac:	602b      	str	r3, [r5, #0]
    8aae:	3401      	adds	r4, #1
    8ab0:	7821      	ldrb	r1, [r4, #0]
    8ab2:	1c63      	adds	r3, r4, #1
    8ab4:	2206      	movs	r2, #6
    8ab6:	482f      	ldr	r0, [pc, #188]	; (8b74 <_vfiprintf_r+0x22c>)
    8ab8:	9302      	str	r3, [sp, #8]
    8aba:	7629      	strb	r1, [r5, #24]
    8abc:	f000 fada 	bl	9074 <memchr>
    8ac0:	2800      	cmp	r0, #0
    8ac2:	d044      	beq.n	8b4e <_vfiprintf_r+0x206>
    8ac4:	4b2c      	ldr	r3, [pc, #176]	; (8b78 <_vfiprintf_r+0x230>)
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d12f      	bne.n	8b2a <_vfiprintf_r+0x1e2>
    8aca:	6829      	ldr	r1, [r5, #0]
    8acc:	9b05      	ldr	r3, [sp, #20]
    8ace:	2207      	movs	r2, #7
    8ad0:	05c9      	lsls	r1, r1, #23
    8ad2:	d528      	bpl.n	8b26 <_vfiprintf_r+0x1de>
    8ad4:	189b      	adds	r3, r3, r2
    8ad6:	4393      	bics	r3, r2
    8ad8:	3308      	adds	r3, #8
    8ada:	9305      	str	r3, [sp, #20]
    8adc:	696b      	ldr	r3, [r5, #20]
    8ade:	9a03      	ldr	r2, [sp, #12]
    8ae0:	189b      	adds	r3, r3, r2
    8ae2:	616b      	str	r3, [r5, #20]
    8ae4:	e74f      	b.n	8986 <_vfiprintf_r+0x3e>
    8ae6:	425b      	negs	r3, r3
    8ae8:	60eb      	str	r3, [r5, #12]
    8aea:	2302      	movs	r3, #2
    8aec:	430b      	orrs	r3, r1
    8aee:	602b      	str	r3, [r5, #0]
    8af0:	e7bf      	b.n	8a72 <_vfiprintf_r+0x12a>
    8af2:	434b      	muls	r3, r1
    8af4:	3401      	adds	r4, #1
    8af6:	189b      	adds	r3, r3, r2
    8af8:	2001      	movs	r0, #1
    8afa:	e789      	b.n	8a10 <_vfiprintf_r+0xc8>
    8afc:	2301      	movs	r3, #1
    8afe:	425b      	negs	r3, r3
    8b00:	e7c6      	b.n	8a90 <_vfiprintf_r+0x148>
    8b02:	2300      	movs	r3, #0
    8b04:	0014      	movs	r4, r2
    8b06:	200a      	movs	r0, #10
    8b08:	001a      	movs	r2, r3
    8b0a:	606b      	str	r3, [r5, #4]
    8b0c:	7821      	ldrb	r1, [r4, #0]
    8b0e:	3930      	subs	r1, #48	; 0x30
    8b10:	2909      	cmp	r1, #9
    8b12:	d903      	bls.n	8b1c <_vfiprintf_r+0x1d4>
    8b14:	2b00      	cmp	r3, #0
    8b16:	d0bc      	beq.n	8a92 <_vfiprintf_r+0x14a>
    8b18:	9207      	str	r2, [sp, #28]
    8b1a:	e7ba      	b.n	8a92 <_vfiprintf_r+0x14a>
    8b1c:	4342      	muls	r2, r0
    8b1e:	3401      	adds	r4, #1
    8b20:	1852      	adds	r2, r2, r1
    8b22:	2301      	movs	r3, #1
    8b24:	e7f2      	b.n	8b0c <_vfiprintf_r+0x1c4>
    8b26:	3307      	adds	r3, #7
    8b28:	e7d5      	b.n	8ad6 <_vfiprintf_r+0x18e>
    8b2a:	ab05      	add	r3, sp, #20
    8b2c:	9300      	str	r3, [sp, #0]
    8b2e:	003a      	movs	r2, r7
    8b30:	4b12      	ldr	r3, [pc, #72]	; (8b7c <_vfiprintf_r+0x234>)
    8b32:	0029      	movs	r1, r5
    8b34:	0030      	movs	r0, r6
    8b36:	e000      	b.n	8b3a <_vfiprintf_r+0x1f2>
    8b38:	bf00      	nop
    8b3a:	9003      	str	r0, [sp, #12]
    8b3c:	9b03      	ldr	r3, [sp, #12]
    8b3e:	3301      	adds	r3, #1
    8b40:	d1cc      	bne.n	8adc <_vfiprintf_r+0x194>
    8b42:	89bb      	ldrh	r3, [r7, #12]
    8b44:	065b      	lsls	r3, r3, #25
    8b46:	d500      	bpl.n	8b4a <_vfiprintf_r+0x202>
    8b48:	e77b      	b.n	8a42 <_vfiprintf_r+0xfa>
    8b4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8b4c:	e77b      	b.n	8a46 <_vfiprintf_r+0xfe>
    8b4e:	ab05      	add	r3, sp, #20
    8b50:	9300      	str	r3, [sp, #0]
    8b52:	003a      	movs	r2, r7
    8b54:	4b09      	ldr	r3, [pc, #36]	; (8b7c <_vfiprintf_r+0x234>)
    8b56:	0029      	movs	r1, r5
    8b58:	0030      	movs	r0, r6
    8b5a:	f000 f87f 	bl	8c5c <_printf_i>
    8b5e:	e7ec      	b.n	8b3a <_vfiprintf_r+0x1f2>
    8b60:	0000a454 	.word	0x0000a454
    8b64:	0000a494 	.word	0x0000a494
    8b68:	0000a474 	.word	0x0000a474
    8b6c:	0000a434 	.word	0x0000a434
    8b70:	0000a49a 	.word	0x0000a49a
    8b74:	0000a49e 	.word	0x0000a49e
    8b78:	00000000 	.word	0x00000000
    8b7c:	00008923 	.word	0x00008923

00008b80 <_printf_common>:
    8b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8b82:	0015      	movs	r5, r2
    8b84:	9301      	str	r3, [sp, #4]
    8b86:	688a      	ldr	r2, [r1, #8]
    8b88:	690b      	ldr	r3, [r1, #16]
    8b8a:	9000      	str	r0, [sp, #0]
    8b8c:	000c      	movs	r4, r1
    8b8e:	4293      	cmp	r3, r2
    8b90:	da00      	bge.n	8b94 <_printf_common+0x14>
    8b92:	0013      	movs	r3, r2
    8b94:	0022      	movs	r2, r4
    8b96:	602b      	str	r3, [r5, #0]
    8b98:	3243      	adds	r2, #67	; 0x43
    8b9a:	7812      	ldrb	r2, [r2, #0]
    8b9c:	2a00      	cmp	r2, #0
    8b9e:	d001      	beq.n	8ba4 <_printf_common+0x24>
    8ba0:	3301      	adds	r3, #1
    8ba2:	602b      	str	r3, [r5, #0]
    8ba4:	6823      	ldr	r3, [r4, #0]
    8ba6:	069b      	lsls	r3, r3, #26
    8ba8:	d502      	bpl.n	8bb0 <_printf_common+0x30>
    8baa:	682b      	ldr	r3, [r5, #0]
    8bac:	3302      	adds	r3, #2
    8bae:	602b      	str	r3, [r5, #0]
    8bb0:	2706      	movs	r7, #6
    8bb2:	6823      	ldr	r3, [r4, #0]
    8bb4:	401f      	ands	r7, r3
    8bb6:	d027      	beq.n	8c08 <_printf_common+0x88>
    8bb8:	0023      	movs	r3, r4
    8bba:	3343      	adds	r3, #67	; 0x43
    8bbc:	781b      	ldrb	r3, [r3, #0]
    8bbe:	1e5a      	subs	r2, r3, #1
    8bc0:	4193      	sbcs	r3, r2
    8bc2:	6822      	ldr	r2, [r4, #0]
    8bc4:	0692      	lsls	r2, r2, #26
    8bc6:	d430      	bmi.n	8c2a <_printf_common+0xaa>
    8bc8:	0022      	movs	r2, r4
    8bca:	9901      	ldr	r1, [sp, #4]
    8bcc:	3243      	adds	r2, #67	; 0x43
    8bce:	9800      	ldr	r0, [sp, #0]
    8bd0:	9e08      	ldr	r6, [sp, #32]
    8bd2:	47b0      	blx	r6
    8bd4:	1c43      	adds	r3, r0, #1
    8bd6:	d025      	beq.n	8c24 <_printf_common+0xa4>
    8bd8:	2306      	movs	r3, #6
    8bda:	6820      	ldr	r0, [r4, #0]
    8bdc:	682a      	ldr	r2, [r5, #0]
    8bde:	68e1      	ldr	r1, [r4, #12]
    8be0:	4003      	ands	r3, r0
    8be2:	2500      	movs	r5, #0
    8be4:	2b04      	cmp	r3, #4
    8be6:	d103      	bne.n	8bf0 <_printf_common+0x70>
    8be8:	1a8d      	subs	r5, r1, r2
    8bea:	43eb      	mvns	r3, r5
    8bec:	17db      	asrs	r3, r3, #31
    8bee:	401d      	ands	r5, r3
    8bf0:	68a3      	ldr	r3, [r4, #8]
    8bf2:	6922      	ldr	r2, [r4, #16]
    8bf4:	4293      	cmp	r3, r2
    8bf6:	dd01      	ble.n	8bfc <_printf_common+0x7c>
    8bf8:	1a9b      	subs	r3, r3, r2
    8bfa:	18ed      	adds	r5, r5, r3
    8bfc:	2700      	movs	r7, #0
    8bfe:	42bd      	cmp	r5, r7
    8c00:	d120      	bne.n	8c44 <_printf_common+0xc4>
    8c02:	2000      	movs	r0, #0
    8c04:	e010      	b.n	8c28 <_printf_common+0xa8>
    8c06:	3701      	adds	r7, #1
    8c08:	68e3      	ldr	r3, [r4, #12]
    8c0a:	682a      	ldr	r2, [r5, #0]
    8c0c:	1a9b      	subs	r3, r3, r2
    8c0e:	429f      	cmp	r7, r3
    8c10:	dad2      	bge.n	8bb8 <_printf_common+0x38>
    8c12:	0022      	movs	r2, r4
    8c14:	2301      	movs	r3, #1
    8c16:	3219      	adds	r2, #25
    8c18:	9901      	ldr	r1, [sp, #4]
    8c1a:	9800      	ldr	r0, [sp, #0]
    8c1c:	9e08      	ldr	r6, [sp, #32]
    8c1e:	47b0      	blx	r6
    8c20:	1c43      	adds	r3, r0, #1
    8c22:	d1f0      	bne.n	8c06 <_printf_common+0x86>
    8c24:	2001      	movs	r0, #1
    8c26:	4240      	negs	r0, r0
    8c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8c2a:	2030      	movs	r0, #48	; 0x30
    8c2c:	18e1      	adds	r1, r4, r3
    8c2e:	3143      	adds	r1, #67	; 0x43
    8c30:	7008      	strb	r0, [r1, #0]
    8c32:	0021      	movs	r1, r4
    8c34:	1c5a      	adds	r2, r3, #1
    8c36:	3145      	adds	r1, #69	; 0x45
    8c38:	7809      	ldrb	r1, [r1, #0]
    8c3a:	18a2      	adds	r2, r4, r2
    8c3c:	3243      	adds	r2, #67	; 0x43
    8c3e:	3302      	adds	r3, #2
    8c40:	7011      	strb	r1, [r2, #0]
    8c42:	e7c1      	b.n	8bc8 <_printf_common+0x48>
    8c44:	0022      	movs	r2, r4
    8c46:	2301      	movs	r3, #1
    8c48:	321a      	adds	r2, #26
    8c4a:	9901      	ldr	r1, [sp, #4]
    8c4c:	9800      	ldr	r0, [sp, #0]
    8c4e:	9e08      	ldr	r6, [sp, #32]
    8c50:	47b0      	blx	r6
    8c52:	1c43      	adds	r3, r0, #1
    8c54:	d0e6      	beq.n	8c24 <_printf_common+0xa4>
    8c56:	3701      	adds	r7, #1
    8c58:	e7d1      	b.n	8bfe <_printf_common+0x7e>
	...

00008c5c <_printf_i>:
    8c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c5e:	b08b      	sub	sp, #44	; 0x2c
    8c60:	9206      	str	r2, [sp, #24]
    8c62:	000a      	movs	r2, r1
    8c64:	3243      	adds	r2, #67	; 0x43
    8c66:	9307      	str	r3, [sp, #28]
    8c68:	9005      	str	r0, [sp, #20]
    8c6a:	9204      	str	r2, [sp, #16]
    8c6c:	7e0a      	ldrb	r2, [r1, #24]
    8c6e:	000c      	movs	r4, r1
    8c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c72:	2a6e      	cmp	r2, #110	; 0x6e
    8c74:	d100      	bne.n	8c78 <_printf_i+0x1c>
    8c76:	e08f      	b.n	8d98 <_printf_i+0x13c>
    8c78:	d817      	bhi.n	8caa <_printf_i+0x4e>
    8c7a:	2a63      	cmp	r2, #99	; 0x63
    8c7c:	d02c      	beq.n	8cd8 <_printf_i+0x7c>
    8c7e:	d808      	bhi.n	8c92 <_printf_i+0x36>
    8c80:	2a00      	cmp	r2, #0
    8c82:	d100      	bne.n	8c86 <_printf_i+0x2a>
    8c84:	e099      	b.n	8dba <_printf_i+0x15e>
    8c86:	2a58      	cmp	r2, #88	; 0x58
    8c88:	d054      	beq.n	8d34 <_printf_i+0xd8>
    8c8a:	0026      	movs	r6, r4
    8c8c:	3642      	adds	r6, #66	; 0x42
    8c8e:	7032      	strb	r2, [r6, #0]
    8c90:	e029      	b.n	8ce6 <_printf_i+0x8a>
    8c92:	2a64      	cmp	r2, #100	; 0x64
    8c94:	d001      	beq.n	8c9a <_printf_i+0x3e>
    8c96:	2a69      	cmp	r2, #105	; 0x69
    8c98:	d1f7      	bne.n	8c8a <_printf_i+0x2e>
    8c9a:	6821      	ldr	r1, [r4, #0]
    8c9c:	681a      	ldr	r2, [r3, #0]
    8c9e:	0608      	lsls	r0, r1, #24
    8ca0:	d523      	bpl.n	8cea <_printf_i+0x8e>
    8ca2:	1d11      	adds	r1, r2, #4
    8ca4:	6019      	str	r1, [r3, #0]
    8ca6:	6815      	ldr	r5, [r2, #0]
    8ca8:	e025      	b.n	8cf6 <_printf_i+0x9a>
    8caa:	2a73      	cmp	r2, #115	; 0x73
    8cac:	d100      	bne.n	8cb0 <_printf_i+0x54>
    8cae:	e088      	b.n	8dc2 <_printf_i+0x166>
    8cb0:	d808      	bhi.n	8cc4 <_printf_i+0x68>
    8cb2:	2a6f      	cmp	r2, #111	; 0x6f
    8cb4:	d029      	beq.n	8d0a <_printf_i+0xae>
    8cb6:	2a70      	cmp	r2, #112	; 0x70
    8cb8:	d1e7      	bne.n	8c8a <_printf_i+0x2e>
    8cba:	2220      	movs	r2, #32
    8cbc:	6809      	ldr	r1, [r1, #0]
    8cbe:	430a      	orrs	r2, r1
    8cc0:	6022      	str	r2, [r4, #0]
    8cc2:	e003      	b.n	8ccc <_printf_i+0x70>
    8cc4:	2a75      	cmp	r2, #117	; 0x75
    8cc6:	d020      	beq.n	8d0a <_printf_i+0xae>
    8cc8:	2a78      	cmp	r2, #120	; 0x78
    8cca:	d1de      	bne.n	8c8a <_printf_i+0x2e>
    8ccc:	0022      	movs	r2, r4
    8cce:	2178      	movs	r1, #120	; 0x78
    8cd0:	3245      	adds	r2, #69	; 0x45
    8cd2:	7011      	strb	r1, [r2, #0]
    8cd4:	4a6c      	ldr	r2, [pc, #432]	; (8e88 <_printf_i+0x22c>)
    8cd6:	e030      	b.n	8d3a <_printf_i+0xde>
    8cd8:	000e      	movs	r6, r1
    8cda:	681a      	ldr	r2, [r3, #0]
    8cdc:	3642      	adds	r6, #66	; 0x42
    8cde:	1d11      	adds	r1, r2, #4
    8ce0:	6019      	str	r1, [r3, #0]
    8ce2:	6813      	ldr	r3, [r2, #0]
    8ce4:	7033      	strb	r3, [r6, #0]
    8ce6:	2301      	movs	r3, #1
    8ce8:	e079      	b.n	8dde <_printf_i+0x182>
    8cea:	0649      	lsls	r1, r1, #25
    8cec:	d5d9      	bpl.n	8ca2 <_printf_i+0x46>
    8cee:	1d11      	adds	r1, r2, #4
    8cf0:	6019      	str	r1, [r3, #0]
    8cf2:	2300      	movs	r3, #0
    8cf4:	5ed5      	ldrsh	r5, [r2, r3]
    8cf6:	2d00      	cmp	r5, #0
    8cf8:	da03      	bge.n	8d02 <_printf_i+0xa6>
    8cfa:	232d      	movs	r3, #45	; 0x2d
    8cfc:	9a04      	ldr	r2, [sp, #16]
    8cfe:	426d      	negs	r5, r5
    8d00:	7013      	strb	r3, [r2, #0]
    8d02:	4b62      	ldr	r3, [pc, #392]	; (8e8c <_printf_i+0x230>)
    8d04:	270a      	movs	r7, #10
    8d06:	9303      	str	r3, [sp, #12]
    8d08:	e02f      	b.n	8d6a <_printf_i+0x10e>
    8d0a:	6820      	ldr	r0, [r4, #0]
    8d0c:	6819      	ldr	r1, [r3, #0]
    8d0e:	0605      	lsls	r5, r0, #24
    8d10:	d503      	bpl.n	8d1a <_printf_i+0xbe>
    8d12:	1d08      	adds	r0, r1, #4
    8d14:	6018      	str	r0, [r3, #0]
    8d16:	680d      	ldr	r5, [r1, #0]
    8d18:	e005      	b.n	8d26 <_printf_i+0xca>
    8d1a:	0640      	lsls	r0, r0, #25
    8d1c:	d5f9      	bpl.n	8d12 <_printf_i+0xb6>
    8d1e:	680d      	ldr	r5, [r1, #0]
    8d20:	1d08      	adds	r0, r1, #4
    8d22:	6018      	str	r0, [r3, #0]
    8d24:	b2ad      	uxth	r5, r5
    8d26:	4b59      	ldr	r3, [pc, #356]	; (8e8c <_printf_i+0x230>)
    8d28:	2708      	movs	r7, #8
    8d2a:	9303      	str	r3, [sp, #12]
    8d2c:	2a6f      	cmp	r2, #111	; 0x6f
    8d2e:	d018      	beq.n	8d62 <_printf_i+0x106>
    8d30:	270a      	movs	r7, #10
    8d32:	e016      	b.n	8d62 <_printf_i+0x106>
    8d34:	3145      	adds	r1, #69	; 0x45
    8d36:	700a      	strb	r2, [r1, #0]
    8d38:	4a54      	ldr	r2, [pc, #336]	; (8e8c <_printf_i+0x230>)
    8d3a:	9203      	str	r2, [sp, #12]
    8d3c:	681a      	ldr	r2, [r3, #0]
    8d3e:	6821      	ldr	r1, [r4, #0]
    8d40:	1d10      	adds	r0, r2, #4
    8d42:	6018      	str	r0, [r3, #0]
    8d44:	6815      	ldr	r5, [r2, #0]
    8d46:	0608      	lsls	r0, r1, #24
    8d48:	d522      	bpl.n	8d90 <_printf_i+0x134>
    8d4a:	07cb      	lsls	r3, r1, #31
    8d4c:	d502      	bpl.n	8d54 <_printf_i+0xf8>
    8d4e:	2320      	movs	r3, #32
    8d50:	4319      	orrs	r1, r3
    8d52:	6021      	str	r1, [r4, #0]
    8d54:	2710      	movs	r7, #16
    8d56:	2d00      	cmp	r5, #0
    8d58:	d103      	bne.n	8d62 <_printf_i+0x106>
    8d5a:	2320      	movs	r3, #32
    8d5c:	6822      	ldr	r2, [r4, #0]
    8d5e:	439a      	bics	r2, r3
    8d60:	6022      	str	r2, [r4, #0]
    8d62:	0023      	movs	r3, r4
    8d64:	2200      	movs	r2, #0
    8d66:	3343      	adds	r3, #67	; 0x43
    8d68:	701a      	strb	r2, [r3, #0]
    8d6a:	6863      	ldr	r3, [r4, #4]
    8d6c:	60a3      	str	r3, [r4, #8]
    8d6e:	2b00      	cmp	r3, #0
    8d70:	db5c      	blt.n	8e2c <_printf_i+0x1d0>
    8d72:	2204      	movs	r2, #4
    8d74:	6821      	ldr	r1, [r4, #0]
    8d76:	4391      	bics	r1, r2
    8d78:	6021      	str	r1, [r4, #0]
    8d7a:	2d00      	cmp	r5, #0
    8d7c:	d158      	bne.n	8e30 <_printf_i+0x1d4>
    8d7e:	9e04      	ldr	r6, [sp, #16]
    8d80:	2b00      	cmp	r3, #0
    8d82:	d064      	beq.n	8e4e <_printf_i+0x1f2>
    8d84:	0026      	movs	r6, r4
    8d86:	9b03      	ldr	r3, [sp, #12]
    8d88:	3642      	adds	r6, #66	; 0x42
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	7033      	strb	r3, [r6, #0]
    8d8e:	e05e      	b.n	8e4e <_printf_i+0x1f2>
    8d90:	0648      	lsls	r0, r1, #25
    8d92:	d5da      	bpl.n	8d4a <_printf_i+0xee>
    8d94:	b2ad      	uxth	r5, r5
    8d96:	e7d8      	b.n	8d4a <_printf_i+0xee>
    8d98:	6809      	ldr	r1, [r1, #0]
    8d9a:	681a      	ldr	r2, [r3, #0]
    8d9c:	0608      	lsls	r0, r1, #24
    8d9e:	d505      	bpl.n	8dac <_printf_i+0x150>
    8da0:	1d11      	adds	r1, r2, #4
    8da2:	6019      	str	r1, [r3, #0]
    8da4:	6813      	ldr	r3, [r2, #0]
    8da6:	6962      	ldr	r2, [r4, #20]
    8da8:	601a      	str	r2, [r3, #0]
    8daa:	e006      	b.n	8dba <_printf_i+0x15e>
    8dac:	0649      	lsls	r1, r1, #25
    8dae:	d5f7      	bpl.n	8da0 <_printf_i+0x144>
    8db0:	1d11      	adds	r1, r2, #4
    8db2:	6019      	str	r1, [r3, #0]
    8db4:	6813      	ldr	r3, [r2, #0]
    8db6:	8aa2      	ldrh	r2, [r4, #20]
    8db8:	801a      	strh	r2, [r3, #0]
    8dba:	2300      	movs	r3, #0
    8dbc:	9e04      	ldr	r6, [sp, #16]
    8dbe:	6123      	str	r3, [r4, #16]
    8dc0:	e054      	b.n	8e6c <_printf_i+0x210>
    8dc2:	681a      	ldr	r2, [r3, #0]
    8dc4:	1d11      	adds	r1, r2, #4
    8dc6:	6019      	str	r1, [r3, #0]
    8dc8:	6816      	ldr	r6, [r2, #0]
    8dca:	2100      	movs	r1, #0
    8dcc:	6862      	ldr	r2, [r4, #4]
    8dce:	0030      	movs	r0, r6
    8dd0:	f000 f950 	bl	9074 <memchr>
    8dd4:	2800      	cmp	r0, #0
    8dd6:	d001      	beq.n	8ddc <_printf_i+0x180>
    8dd8:	1b80      	subs	r0, r0, r6
    8dda:	6060      	str	r0, [r4, #4]
    8ddc:	6863      	ldr	r3, [r4, #4]
    8dde:	6123      	str	r3, [r4, #16]
    8de0:	2300      	movs	r3, #0
    8de2:	9a04      	ldr	r2, [sp, #16]
    8de4:	7013      	strb	r3, [r2, #0]
    8de6:	e041      	b.n	8e6c <_printf_i+0x210>
    8de8:	6923      	ldr	r3, [r4, #16]
    8dea:	0032      	movs	r2, r6
    8dec:	9906      	ldr	r1, [sp, #24]
    8dee:	9805      	ldr	r0, [sp, #20]
    8df0:	9d07      	ldr	r5, [sp, #28]
    8df2:	47a8      	blx	r5
    8df4:	1c43      	adds	r3, r0, #1
    8df6:	d043      	beq.n	8e80 <_printf_i+0x224>
    8df8:	6823      	ldr	r3, [r4, #0]
    8dfa:	2500      	movs	r5, #0
    8dfc:	079b      	lsls	r3, r3, #30
    8dfe:	d40f      	bmi.n	8e20 <_printf_i+0x1c4>
    8e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e02:	68e0      	ldr	r0, [r4, #12]
    8e04:	4298      	cmp	r0, r3
    8e06:	da3d      	bge.n	8e84 <_printf_i+0x228>
    8e08:	0018      	movs	r0, r3
    8e0a:	e03b      	b.n	8e84 <_printf_i+0x228>
    8e0c:	0022      	movs	r2, r4
    8e0e:	2301      	movs	r3, #1
    8e10:	3219      	adds	r2, #25
    8e12:	9906      	ldr	r1, [sp, #24]
    8e14:	9805      	ldr	r0, [sp, #20]
    8e16:	9e07      	ldr	r6, [sp, #28]
    8e18:	47b0      	blx	r6
    8e1a:	1c43      	adds	r3, r0, #1
    8e1c:	d030      	beq.n	8e80 <_printf_i+0x224>
    8e1e:	3501      	adds	r5, #1
    8e20:	68e3      	ldr	r3, [r4, #12]
    8e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e24:	1a9b      	subs	r3, r3, r2
    8e26:	429d      	cmp	r5, r3
    8e28:	dbf0      	blt.n	8e0c <_printf_i+0x1b0>
    8e2a:	e7e9      	b.n	8e00 <_printf_i+0x1a4>
    8e2c:	2d00      	cmp	r5, #0
    8e2e:	d0a9      	beq.n	8d84 <_printf_i+0x128>
    8e30:	9e04      	ldr	r6, [sp, #16]
    8e32:	0028      	movs	r0, r5
    8e34:	0039      	movs	r1, r7
    8e36:	f7fe feb5 	bl	7ba4 <__aeabi_uidivmod>
    8e3a:	9b03      	ldr	r3, [sp, #12]
    8e3c:	3e01      	subs	r6, #1
    8e3e:	5c5b      	ldrb	r3, [r3, r1]
    8e40:	0028      	movs	r0, r5
    8e42:	7033      	strb	r3, [r6, #0]
    8e44:	0039      	movs	r1, r7
    8e46:	f7fe fe27 	bl	7a98 <__udivsi3>
    8e4a:	1e05      	subs	r5, r0, #0
    8e4c:	d1f1      	bne.n	8e32 <_printf_i+0x1d6>
    8e4e:	2f08      	cmp	r7, #8
    8e50:	d109      	bne.n	8e66 <_printf_i+0x20a>
    8e52:	6823      	ldr	r3, [r4, #0]
    8e54:	07db      	lsls	r3, r3, #31
    8e56:	d506      	bpl.n	8e66 <_printf_i+0x20a>
    8e58:	6863      	ldr	r3, [r4, #4]
    8e5a:	6922      	ldr	r2, [r4, #16]
    8e5c:	4293      	cmp	r3, r2
    8e5e:	dc02      	bgt.n	8e66 <_printf_i+0x20a>
    8e60:	2330      	movs	r3, #48	; 0x30
    8e62:	3e01      	subs	r6, #1
    8e64:	7033      	strb	r3, [r6, #0]
    8e66:	9b04      	ldr	r3, [sp, #16]
    8e68:	1b9b      	subs	r3, r3, r6
    8e6a:	6123      	str	r3, [r4, #16]
    8e6c:	9b07      	ldr	r3, [sp, #28]
    8e6e:	aa09      	add	r2, sp, #36	; 0x24
    8e70:	9300      	str	r3, [sp, #0]
    8e72:	0021      	movs	r1, r4
    8e74:	9b06      	ldr	r3, [sp, #24]
    8e76:	9805      	ldr	r0, [sp, #20]
    8e78:	f7ff fe82 	bl	8b80 <_printf_common>
    8e7c:	1c43      	adds	r3, r0, #1
    8e7e:	d1b3      	bne.n	8de8 <_printf_i+0x18c>
    8e80:	2001      	movs	r0, #1
    8e82:	4240      	negs	r0, r0
    8e84:	b00b      	add	sp, #44	; 0x2c
    8e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e88:	0000a4b6 	.word	0x0000a4b6
    8e8c:	0000a4a5 	.word	0x0000a4a5

00008e90 <_putc_r>:
    8e90:	b570      	push	{r4, r5, r6, lr}
    8e92:	0006      	movs	r6, r0
    8e94:	000d      	movs	r5, r1
    8e96:	0014      	movs	r4, r2
    8e98:	2800      	cmp	r0, #0
    8e9a:	d004      	beq.n	8ea6 <_putc_r+0x16>
    8e9c:	6983      	ldr	r3, [r0, #24]
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d101      	bne.n	8ea6 <_putc_r+0x16>
    8ea2:	f7ff fb75 	bl	8590 <__sinit>
    8ea6:	4b12      	ldr	r3, [pc, #72]	; (8ef0 <_putc_r+0x60>)
    8ea8:	429c      	cmp	r4, r3
    8eaa:	d111      	bne.n	8ed0 <_putc_r+0x40>
    8eac:	6874      	ldr	r4, [r6, #4]
    8eae:	68a3      	ldr	r3, [r4, #8]
    8eb0:	3b01      	subs	r3, #1
    8eb2:	60a3      	str	r3, [r4, #8]
    8eb4:	2b00      	cmp	r3, #0
    8eb6:	da05      	bge.n	8ec4 <_putc_r+0x34>
    8eb8:	69a2      	ldr	r2, [r4, #24]
    8eba:	4293      	cmp	r3, r2
    8ebc:	db12      	blt.n	8ee4 <_putc_r+0x54>
    8ebe:	b2eb      	uxtb	r3, r5
    8ec0:	2b0a      	cmp	r3, #10
    8ec2:	d00f      	beq.n	8ee4 <_putc_r+0x54>
    8ec4:	6823      	ldr	r3, [r4, #0]
    8ec6:	b2e8      	uxtb	r0, r5
    8ec8:	1c5a      	adds	r2, r3, #1
    8eca:	6022      	str	r2, [r4, #0]
    8ecc:	701d      	strb	r5, [r3, #0]
    8ece:	bd70      	pop	{r4, r5, r6, pc}
    8ed0:	4b08      	ldr	r3, [pc, #32]	; (8ef4 <_putc_r+0x64>)
    8ed2:	429c      	cmp	r4, r3
    8ed4:	d101      	bne.n	8eda <_putc_r+0x4a>
    8ed6:	68b4      	ldr	r4, [r6, #8]
    8ed8:	e7e9      	b.n	8eae <_putc_r+0x1e>
    8eda:	4b07      	ldr	r3, [pc, #28]	; (8ef8 <_putc_r+0x68>)
    8edc:	429c      	cmp	r4, r3
    8ede:	d1e6      	bne.n	8eae <_putc_r+0x1e>
    8ee0:	68f4      	ldr	r4, [r6, #12]
    8ee2:	e7e4      	b.n	8eae <_putc_r+0x1e>
    8ee4:	0022      	movs	r2, r4
    8ee6:	0029      	movs	r1, r5
    8ee8:	0030      	movs	r0, r6
    8eea:	f7ff f98d 	bl	8208 <__swbuf_r>
    8eee:	e7ee      	b.n	8ece <_putc_r+0x3e>
    8ef0:	0000a454 	.word	0x0000a454
    8ef4:	0000a474 	.word	0x0000a474
    8ef8:	0000a434 	.word	0x0000a434

00008efc <_sbrk_r>:
    8efc:	2300      	movs	r3, #0
    8efe:	b570      	push	{r4, r5, r6, lr}
    8f00:	4c06      	ldr	r4, [pc, #24]	; (8f1c <_sbrk_r+0x20>)
    8f02:	0005      	movs	r5, r0
    8f04:	0008      	movs	r0, r1
    8f06:	6023      	str	r3, [r4, #0]
    8f08:	f7fc fbfa 	bl	5700 <_sbrk>
    8f0c:	1c43      	adds	r3, r0, #1
    8f0e:	d103      	bne.n	8f18 <_sbrk_r+0x1c>
    8f10:	6823      	ldr	r3, [r4, #0]
    8f12:	2b00      	cmp	r3, #0
    8f14:	d000      	beq.n	8f18 <_sbrk_r+0x1c>
    8f16:	602b      	str	r3, [r5, #0]
    8f18:	bd70      	pop	{r4, r5, r6, pc}
    8f1a:	46c0      	nop			; (mov r8, r8)
    8f1c:	20000cf4 	.word	0x20000cf4

00008f20 <__sread>:
    8f20:	b570      	push	{r4, r5, r6, lr}
    8f22:	000c      	movs	r4, r1
    8f24:	250e      	movs	r5, #14
    8f26:	5f49      	ldrsh	r1, [r1, r5]
    8f28:	f000 f8b2 	bl	9090 <_read_r>
    8f2c:	2800      	cmp	r0, #0
    8f2e:	db03      	blt.n	8f38 <__sread+0x18>
    8f30:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8f32:	181b      	adds	r3, r3, r0
    8f34:	6563      	str	r3, [r4, #84]	; 0x54
    8f36:	bd70      	pop	{r4, r5, r6, pc}
    8f38:	89a3      	ldrh	r3, [r4, #12]
    8f3a:	4a02      	ldr	r2, [pc, #8]	; (8f44 <__sread+0x24>)
    8f3c:	4013      	ands	r3, r2
    8f3e:	81a3      	strh	r3, [r4, #12]
    8f40:	e7f9      	b.n	8f36 <__sread+0x16>
    8f42:	46c0      	nop			; (mov r8, r8)
    8f44:	ffffefff 	.word	0xffffefff

00008f48 <__swrite>:
    8f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f4a:	001f      	movs	r7, r3
    8f4c:	898b      	ldrh	r3, [r1, #12]
    8f4e:	0005      	movs	r5, r0
    8f50:	000c      	movs	r4, r1
    8f52:	0016      	movs	r6, r2
    8f54:	05db      	lsls	r3, r3, #23
    8f56:	d505      	bpl.n	8f64 <__swrite+0x1c>
    8f58:	230e      	movs	r3, #14
    8f5a:	5ec9      	ldrsh	r1, [r1, r3]
    8f5c:	2200      	movs	r2, #0
    8f5e:	2302      	movs	r3, #2
    8f60:	f000 f874 	bl	904c <_lseek_r>
    8f64:	89a3      	ldrh	r3, [r4, #12]
    8f66:	4a05      	ldr	r2, [pc, #20]	; (8f7c <__swrite+0x34>)
    8f68:	0028      	movs	r0, r5
    8f6a:	4013      	ands	r3, r2
    8f6c:	81a3      	strh	r3, [r4, #12]
    8f6e:	0032      	movs	r2, r6
    8f70:	230e      	movs	r3, #14
    8f72:	5ee1      	ldrsh	r1, [r4, r3]
    8f74:	003b      	movs	r3, r7
    8f76:	f000 f81f 	bl	8fb8 <_write_r>
    8f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f7c:	ffffefff 	.word	0xffffefff

00008f80 <__sseek>:
    8f80:	b570      	push	{r4, r5, r6, lr}
    8f82:	000c      	movs	r4, r1
    8f84:	250e      	movs	r5, #14
    8f86:	5f49      	ldrsh	r1, [r1, r5]
    8f88:	f000 f860 	bl	904c <_lseek_r>
    8f8c:	89a3      	ldrh	r3, [r4, #12]
    8f8e:	1c42      	adds	r2, r0, #1
    8f90:	d103      	bne.n	8f9a <__sseek+0x1a>
    8f92:	4a05      	ldr	r2, [pc, #20]	; (8fa8 <__sseek+0x28>)
    8f94:	4013      	ands	r3, r2
    8f96:	81a3      	strh	r3, [r4, #12]
    8f98:	bd70      	pop	{r4, r5, r6, pc}
    8f9a:	2280      	movs	r2, #128	; 0x80
    8f9c:	0152      	lsls	r2, r2, #5
    8f9e:	4313      	orrs	r3, r2
    8fa0:	81a3      	strh	r3, [r4, #12]
    8fa2:	6560      	str	r0, [r4, #84]	; 0x54
    8fa4:	e7f8      	b.n	8f98 <__sseek+0x18>
    8fa6:	46c0      	nop			; (mov r8, r8)
    8fa8:	ffffefff 	.word	0xffffefff

00008fac <__sclose>:
    8fac:	b510      	push	{r4, lr}
    8fae:	230e      	movs	r3, #14
    8fb0:	5ec9      	ldrsh	r1, [r1, r3]
    8fb2:	f000 f815 	bl	8fe0 <_close_r>
    8fb6:	bd10      	pop	{r4, pc}

00008fb8 <_write_r>:
    8fb8:	b570      	push	{r4, r5, r6, lr}
    8fba:	0005      	movs	r5, r0
    8fbc:	0008      	movs	r0, r1
    8fbe:	0011      	movs	r1, r2
    8fc0:	2200      	movs	r2, #0
    8fc2:	4c06      	ldr	r4, [pc, #24]	; (8fdc <_write_r+0x24>)
    8fc4:	6022      	str	r2, [r4, #0]
    8fc6:	001a      	movs	r2, r3
    8fc8:	f7fa fcb2 	bl	3930 <_write>
    8fcc:	1c43      	adds	r3, r0, #1
    8fce:	d103      	bne.n	8fd8 <_write_r+0x20>
    8fd0:	6823      	ldr	r3, [r4, #0]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d000      	beq.n	8fd8 <_write_r+0x20>
    8fd6:	602b      	str	r3, [r5, #0]
    8fd8:	bd70      	pop	{r4, r5, r6, pc}
    8fda:	46c0      	nop			; (mov r8, r8)
    8fdc:	20000cf4 	.word	0x20000cf4

00008fe0 <_close_r>:
    8fe0:	2300      	movs	r3, #0
    8fe2:	b570      	push	{r4, r5, r6, lr}
    8fe4:	4c06      	ldr	r4, [pc, #24]	; (9000 <_close_r+0x20>)
    8fe6:	0005      	movs	r5, r0
    8fe8:	0008      	movs	r0, r1
    8fea:	6023      	str	r3, [r4, #0]
    8fec:	f7fc fb9a 	bl	5724 <_close>
    8ff0:	1c43      	adds	r3, r0, #1
    8ff2:	d103      	bne.n	8ffc <_close_r+0x1c>
    8ff4:	6823      	ldr	r3, [r4, #0]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d000      	beq.n	8ffc <_close_r+0x1c>
    8ffa:	602b      	str	r3, [r5, #0]
    8ffc:	bd70      	pop	{r4, r5, r6, pc}
    8ffe:	46c0      	nop			; (mov r8, r8)
    9000:	20000cf4 	.word	0x20000cf4

00009004 <_fstat_r>:
    9004:	2300      	movs	r3, #0
    9006:	b570      	push	{r4, r5, r6, lr}
    9008:	4c06      	ldr	r4, [pc, #24]	; (9024 <_fstat_r+0x20>)
    900a:	0005      	movs	r5, r0
    900c:	0008      	movs	r0, r1
    900e:	0011      	movs	r1, r2
    9010:	6023      	str	r3, [r4, #0]
    9012:	f7fc fb8a 	bl	572a <_fstat>
    9016:	1c43      	adds	r3, r0, #1
    9018:	d103      	bne.n	9022 <_fstat_r+0x1e>
    901a:	6823      	ldr	r3, [r4, #0]
    901c:	2b00      	cmp	r3, #0
    901e:	d000      	beq.n	9022 <_fstat_r+0x1e>
    9020:	602b      	str	r3, [r5, #0]
    9022:	bd70      	pop	{r4, r5, r6, pc}
    9024:	20000cf4 	.word	0x20000cf4

00009028 <_isatty_r>:
    9028:	2300      	movs	r3, #0
    902a:	b570      	push	{r4, r5, r6, lr}
    902c:	4c06      	ldr	r4, [pc, #24]	; (9048 <_isatty_r+0x20>)
    902e:	0005      	movs	r5, r0
    9030:	0008      	movs	r0, r1
    9032:	6023      	str	r3, [r4, #0]
    9034:	f7fc fb7e 	bl	5734 <_isatty>
    9038:	1c43      	adds	r3, r0, #1
    903a:	d103      	bne.n	9044 <_isatty_r+0x1c>
    903c:	6823      	ldr	r3, [r4, #0]
    903e:	2b00      	cmp	r3, #0
    9040:	d000      	beq.n	9044 <_isatty_r+0x1c>
    9042:	602b      	str	r3, [r5, #0]
    9044:	bd70      	pop	{r4, r5, r6, pc}
    9046:	46c0      	nop			; (mov r8, r8)
    9048:	20000cf4 	.word	0x20000cf4

0000904c <_lseek_r>:
    904c:	b570      	push	{r4, r5, r6, lr}
    904e:	0005      	movs	r5, r0
    9050:	0008      	movs	r0, r1
    9052:	0011      	movs	r1, r2
    9054:	2200      	movs	r2, #0
    9056:	4c06      	ldr	r4, [pc, #24]	; (9070 <_lseek_r+0x24>)
    9058:	6022      	str	r2, [r4, #0]
    905a:	001a      	movs	r2, r3
    905c:	f7fc fb6c 	bl	5738 <_lseek>
    9060:	1c43      	adds	r3, r0, #1
    9062:	d103      	bne.n	906c <_lseek_r+0x20>
    9064:	6823      	ldr	r3, [r4, #0]
    9066:	2b00      	cmp	r3, #0
    9068:	d000      	beq.n	906c <_lseek_r+0x20>
    906a:	602b      	str	r3, [r5, #0]
    906c:	bd70      	pop	{r4, r5, r6, pc}
    906e:	46c0      	nop			; (mov r8, r8)
    9070:	20000cf4 	.word	0x20000cf4

00009074 <memchr>:
    9074:	b2c9      	uxtb	r1, r1
    9076:	1882      	adds	r2, r0, r2
    9078:	4290      	cmp	r0, r2
    907a:	d101      	bne.n	9080 <memchr+0xc>
    907c:	2000      	movs	r0, #0
    907e:	4770      	bx	lr
    9080:	7803      	ldrb	r3, [r0, #0]
    9082:	428b      	cmp	r3, r1
    9084:	d0fb      	beq.n	907e <memchr+0xa>
    9086:	3001      	adds	r0, #1
    9088:	e7f6      	b.n	9078 <memchr+0x4>

0000908a <__malloc_lock>:
    908a:	4770      	bx	lr

0000908c <__malloc_unlock>:
    908c:	4770      	bx	lr
	...

00009090 <_read_r>:
    9090:	b570      	push	{r4, r5, r6, lr}
    9092:	0005      	movs	r5, r0
    9094:	0008      	movs	r0, r1
    9096:	0011      	movs	r1, r2
    9098:	2200      	movs	r2, #0
    909a:	4c06      	ldr	r4, [pc, #24]	; (90b4 <_read_r+0x24>)
    909c:	6022      	str	r2, [r4, #0]
    909e:	001a      	movs	r2, r3
    90a0:	f7fa fc24 	bl	38ec <_read>
    90a4:	1c43      	adds	r3, r0, #1
    90a6:	d103      	bne.n	90b0 <_read_r+0x20>
    90a8:	6823      	ldr	r3, [r4, #0]
    90aa:	2b00      	cmp	r3, #0
    90ac:	d000      	beq.n	90b0 <_read_r+0x20>
    90ae:	602b      	str	r3, [r5, #0]
    90b0:	bd70      	pop	{r4, r5, r6, pc}
    90b2:	46c0      	nop			; (mov r8, r8)
    90b4:	20000cf4 	.word	0x20000cf4

000090b8 <__FUNCTION__.13587>:
    90b8:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    90c8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    90d8:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    90e8:	6320746c 0000646d 00000d84 00000d54     lt cmd......T...
    90f8:	00000d4c 00000d64 00000d5c 00000d7c     L...d...\...|...
    9108:	00000d6c 00000d74                       l...t...

00009110 <__FUNCTION__.12256>:
    9110:	5f666968 646e6573 00000000              hif_send....

0000911c <__FUNCTION__.12266>:
    911c:	5f666968 00727369                       hif_isr.

00009124 <__FUNCTION__.12272>:
    9124:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00009134 <__FUNCTION__.12284>:
    9134:	5f666968 65636572 00657669              hif_receive.

00009140 <__FUNCTION__.12300>:
    9140:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    9150:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    9160:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    9170:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    9180:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    9190:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    91a0:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    91b0:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    91c0:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    91d0:	6c616320 6361626c 7369206b 746f6e20      callback is not
    91e0:	67657220 65747369 00646572 6b6f6353      registered.Scok
    91f0:	63207465 626c6c61 206b6361 6e207369     et callback is n
    9200:	7220746f 73696765 65726574 00000064     ot registered...
    9210:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    9220:	20746f6e 69676572 72657473 00006465     not registered..
    9230:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    9240:	6e207369 7220746f 73696765 65726574     is not registere
    9250:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    9260:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    9270:	64657265 00000000 66696828 6e692029     ered....(hif) in
    9280:	696c6176 72672064 2070756f 00004449     valid group ID..
    9290:	66696828 6f682029 61207473 64207070     (hif) host app d
    92a0:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    92b0:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    92c0:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    92d0:	66696828 61462029 2065736c 65746e69     (hif) False inte
    92e0:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    92f0:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    9300:	7265746e 74707572 67657220 00000000     nterrupt reg....
    9310:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    9320:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    9330:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    9340:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    9350:	696c6176 72612064 656d7567 0000746e     valid argument..
    9360:	20505041 75716552 65747365 69532064     APP Requested Si
    9370:	6920657a 616c2073 72656772 61687420     ze is larger tha
    9380:	6874206e 65722065 65766963 75622064     n the recived bu
    9390:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    93a0:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    93b0:	65747365 64412064 73657264 65622073     ested Address be
    93c0:	646e6f79 65687420 63657220 64657669     yond the recived
    93d0:	66756220 20726566 72646461 20737365      buffer address 
    93e0:	20646e61 676e656c 00006874 20705247     and length..GRp 
    93f0:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    9400:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    9410:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    9420:	6b617720 74207075 63206568 00706968      wakup the chip.

00009430 <__FUNCTION__.12235>:
    9430:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000943c <__FUNCTION__.12264>:
    943c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000944c <__FUNCTION__.12292>:
    944c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    945c:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    946c:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    947c:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    948c:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    949c:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    94ac:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    94bc:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    94cc:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    94dc:	20706557 2079656b 65646e69 64252078     Wep key index %d
    94ec:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    94fc:	2079656b 676e656c 25206874 00000a64     key length %d...
    950c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    951c:	656c2079 6874676e 00000000 65646e75     y length....unde
    952c:	656e6966 65732064 79742063 00006570     fined sec type..
    953c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    954c:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    955c:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    956c:	69754220 2520646c 69542073 2520656d      Build %s Time %
    957c:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    958c:	69726420 20726576 20726576 7525203a      driver ver : %u
    959c:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    95ac:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    95bc:	313a3731 34333a38 00000000 206e754a     17:18:34....Jun 
    95cc:	32203531 00383130 76697244 62207265     15 2018.Driver b
    95dc:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    95ec:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    95fc:	65562065 6f697372 0000006e              e Version...

00009608 <__FUNCTION__.12098>:
    9608:	70696863 6b61775f 00000065              chip_wake...

00009614 <__FUNCTION__.12147>:
    9614:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    9624:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    9634:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    9644:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    9654:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    9664:	70696863 00000000 76697244 65567265     chip....DriverVe
    9674:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00009684 <__FUNCTION__.12145>:
    9684:	645f6d6e 695f7672 0074696e              nm_drv_init.

00009690 <__FUNCTION__.12152>:
    9690:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    96a0:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    96b0:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    96c0:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    96d0:	73616c66 69642068 6c626173 61662065     flash disable fa
    96e0:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    96f0:	6c696166 696e6920 75622074 00000073     fail init bus...
    9700:	6c696166 74206465 6e65206f 656c6261     failed to enable
    9710:	746e6920 75727265 2e737470 0000002e      interrupts.....
    9720:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    9730:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    9740:	20444920 0a786c25 00000000 00001d68      ID %lx.....h...
    9750:	00001d68 00001d98 00001d1a 00001d3e     h...........>...
    9760:	00001d4c 00001d7e 00001d7e 00001dc6     L...~...~.......
    9770:	00001cfe 00001e00 00001e00 00001e00     ................
    9780:	00001e00 00001d5a cac4c9c3              ....Z.......

0000978c <__FUNCTION__.11451>:
    978c:	5f697073 00646d63                       spi_cmd.

00009794 <__FUNCTION__.11458>:
    9794:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000097a4 <__FUNCTION__.11467>:
    97a4:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000097b0 <__FUNCTION__.11483>:
    97b0:	5f697073 61746164 6165725f 00000064     spi_data_read...

000097c0 <__FUNCTION__.11498>:
    97c0:	5f697073 61746164 6972775f 00006574     spi_data_write..

000097d0 <__FUNCTION__.11510>:
    97d0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000097e0 <__FUNCTION__.11521>:
    97e0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000097f0 <__FUNCTION__.11533>:
    97f0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00009800 <__FUNCTION__.11546>:
    9800:	735f6d6e 725f6970 00646165              nm_spi_read.

0000980c <__FUNCTION__.11567>:
    980c:	735f6d6e 695f6970 0074696e              nm_spi_init.

00009818 <crc7_syndrome_table>:
    9818:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    9828:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    9838:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    9848:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    9858:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    9868:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    9878:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    9888:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    9898:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    98a8:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    98b8:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    98c8:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    98d8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    98e8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    98f8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    9908:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    9918:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9928:	6e692064 6e726574 72206c61 20646165     d internal read 
    9938:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    9948:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    9958:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    9968:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9978:	6e692064 6e726574 72206c61 20646165     d internal read 
    9988:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    9998:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    99a8:	6e726574 77206c61 65746972 6f727020     ternal write pro
    99b8:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    99c8:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    99d8:	20646d63 64616572 69686320 64692070     cmd read chip id
    99e8:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    99f8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    9a08:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    9a18:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9a28:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    9a38:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    9a48:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    9a58:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    9a68:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    9a78:	00000000 65736552 6e612074 65722064     ....Reset and re
    9a88:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    9a98:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9aa8:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    9ab8:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    9ac8:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    9ad8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    9ae8:	69727720 62206574 6b636f6c 30252820      write block (%0
    9af8:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    9b08:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    9b18:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    9b28:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    9b38:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9b48:	61642064 62206174 6b636f6c 69727720     d data block wri
    9b58:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    9b68:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9b78:	656c6961 61642064 62206174 6b636f6c     ailed data block
    9b88:	63726320 69727720 202c6574 20737562      crc write, bus 
    9b98:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    9ba8:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    9bb8:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    9bc8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    9bd8:	72206174 6f707365 2065736e 64616572     ta response read
    9be8:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    9bf8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    9c08:	206b636f 61746164 69727720 2e2e6574     ock data write..
    9c18:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9c28:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    9c38:	73756220 72726520 2e2e726f 0000002e      bus error......
    9c48:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9c58:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    9c68:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    9c78:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9c88:	656c6961 61642064 72206174 6f707365     ailed data respo
    9c98:	2065736e 64616572 7562202c 72652073     nse read, bus er
    9ca8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    9cb8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    9cc8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    9cd8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    9ce8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    9cf8:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    9d08:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    9d18:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    9d28:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    9d38:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    9d48:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    9d58:	72202c64 20646165 20676572 38302528     d, read reg (%08
    9d68:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    9d78:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    9d88:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    9d98:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    9da8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    9db8:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    9dc8:	6e612074 65722064 20797274 25206425     t and retry %d %
    9dd8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    9de8:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    9df8:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    9e08:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9e18:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    9e28:	74697277 65722065 25282067 29783830     write reg (%08x)
    9e38:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    9e48:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    9e58:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    9e68:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    9e78:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    9e88:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    9e98:	4449206e 25203d20 000a0d64              n ID = %d...

00009ea4 <_tcc_intflag>:
    9ea4:	00000001 00000002 00000004 00000008     ................
    9eb4:	00001000 00002000 00004000 00008000     ..... ...@......
    9ec4:	00010000 00020000 00040000 00080000     ................
    9ed4:	00633123 006f3123 00653123 00633223     #1c.#1o.#1e.#2c.
    9ee4:	006f3223 00653223 00633323 006f3323     #2o.#2e.#3c.#3o.
    9ef4:	00653323 00633423 006f3423 00653423     #3e.#4c.#4o.#4e.
    9f04:	00633523 006f3523 00653523 00633623     #5c.#5o.#5e.#6c.
    9f14:	006f3623 00653623 42000800 42000c00     #6o.#6e....B...B
    9f24:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    9f34:	00004af2 00004aee 00004aee 00004b50     .J...J...J..PK..
    9f44:	00004b50 00004b06 00004af8 00004b0c     PK...K...J...K..
    9f54:	00004b3e 00004cd4 00004cb4 00004cb4     >K...L...L...L..
    9f64:	00004d40 00004cc6 00004ce2 00004cb8     @M...L...L...L..
    9f74:	00004cf0 00004d30 42002c00 42003000     .L..0M...,.B.0.B
    9f84:	42003400 00005e3a 00005e80 00005e14     .4.B:^...^...^..
    9f94:	00005e9c 00005e14 00005e0c 00005e4e     .^...^...^..N^..
    9fa4:	00005e14 00005e14 00005e14 00005e14     .^...^...^...^..
    9fb4:	00005e14 00005dc2 00005e14 00005e14     .^...]...^...^..
    9fc4:	00005e14 00005e14 00005e14 00005e14     .^...^...^...^..
    9fd4:	00005eda 00005e14 00005e14 00005f1e     .^...^...^..._..
    9fe4:	00005e80 00005e14 00005e9c 00005e14     .^...^...^...^..
    9ff4:	00005e0c 00005e4e 00005e14 00005e14     .^..N^...^...^..
    a004:	00005e14 00005e14 00005e14 00005dc2     .^...^...^...]..
    a014:	00005e14 00005e14 00005e14 00005e14     .^...^...^...^..
    a024:	00005e14 00005e14 00005eda 00005e14     .^...^...^...^..
    a034:	00005e14 00005f1e                       .^..._..

0000a03c <tx_pwr_table>:
    a03c:	03030304 00010203 fcfdfeff eff4f8fa     ................
    a04c:	000068d8 000068c4 000068d4 000068c8     .h...h...h...h..
    a05c:	000068d4 000068cc 000068d4 000068d0     .h...h...h...h..

0000a06c <tc_interrupt_vectors.11908>:
    a06c:	00141312 0000725a 00007180 000071b6     ....Zr...q...q..
    a07c:	0000725a 000071ee 0000724a 0000727a     Zr...q..Jr..zr..
    a08c:	0000725c 00007678 00007678 000075f6     \r..xv..xv...u..
    a09c:	00007678 00007648 00007678 00007650     xv..Hv..xv..Pv..
    a0ac:	00007678 00007658 00007678 00007660     xv..Xv..xv..`v..
    a0bc:	00007678 00007668 00007678 00007670     xv..hv..xv..pv..
    a0cc:	000077de 000077ce 00007832 0000785a     .w...w..2x..Zx..
    a0dc:	00007882 000078aa 000078d2 6e69616d     .x...x...x..main
    a0ec:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    a0fc:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    a10c:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
    a11c:	206f7420 61657263 54206574 73205043      to create TCP s
    a12c:	65767265 6f732072 74656b63 72726520     erver socket err
    a13c:	0d21726f 00000000 6b636f73 635f7465     or!.....socket_c
    a14c:	62203a62 20646e69 63637573 21737365     b: bind success!
    a15c:	0000000d 6b636f73 635f7465 62203a62     ....socket_cb: b
    a16c:	20646e69 6f727265 000d2172 6b636f73     ind error!..sock
    a17c:	635f7465 6c203a62 65747369 7573206e     et_cb: listen su
    a18c:	73656363 000d2173 6b636f73 635f7465     ccess!..socket_c
    a19c:	6c203a62 65747369 7265206e 21726f72     b: listen error!
    a1ac:	0000000d 6b636f73 635f7465 61203a62     ....socket_cb: a
    a1bc:	70656363 75732074 73656363 000d2173     ccept success!..
    a1cc:	6b636f73 635f7465 61203a62 70656363     socket_cb: accep
    a1dc:	72652074 21726f72 0000000d 6b636f73     t error!....sock
    a1ec:	635f7465 63203a62 656e6e6f 73207463     et_cb: connect s
    a1fc:	65636375 0d217373 00000000 6b636f73     uccess!.....sock
    a20c:	635f7465 63203a62 656e6e6f 65207463     et_cb: connect e
    a21c:	726f7272 00000d21 6b636f73 635f7465     rror!...socket_c
    a22c:	73203a62 20646e65 63637573 21737365     b: send success!
    a23c:	0000000d 20504354 76726553 54207265     ....TCP Server T
    a24c:	20747365 706d6f43 6574656c 00000d21     est Complete!...
    a25c:	736f6c63 6f732065 74656b63 00000000     close socket....
    a26c:	6b636f73 635f7465 72203a62 20766365     socket_cb: recv 
    a27c:	63637573 21737365 0000000d 00000053     success!....S...
    a28c:	00000041 0000004d 2d2d2d2d 2d2d2d2d     A...M...--------
    a29c:	2d2d2d2d 2d2d2d2d 454d4153 2d2d2d2d     --------SAME----
    a2ac:	2d2d2d2d 2d2d2d2d 00000d20 79706f63     -------- ...copy
    a2bc:	7325203a 000a0d20 00633140 006f3140     : %s ...@1c.@1o.
    a2cc:	00633240 006f3240 00633340 006f3340     @2c.@2o.@3c.@3o.
    a2dc:	00633440 006f3440 00633540 006f3540     @4c.@4o.@5c.@5o.
    a2ec:	00633640 006f3640 6f666562 53206572     @6c.@6o.before S
    a2fc:	61566c6f 2065766c 746e6f43 206c6f72     olValve Control 
    a30c:	6d6d6f43 20646e65 7325203a 00000a0d     Commend : %s....
    a31c:	004e4740 004e5240 004e4f40 6e676973     @GN.@RN.@ON.sign
    a32c:	694c6e4f 20746867 6425203a 000a0d20     OnLight : %d ...
    a33c:	56434552 4c414320 2044454c 0000000d     RECV CALLED ....
    a34c:	6b636f73 635f7465 72203a62 20766365     socket_cb: recv 
    a35c:	6f727265 000d2172                       error!..

0000a364 <tc_interrupt_vectors.13045>:
    a364:	00141312 00414141 69666977 3a62635f     ....AAA.wifi_cb:
    a374:	4d324d20 4649575f 45525f49 435f5053      M2M_WIFI_RESP_C
    a384:	535f4e4f 45544154 4148435f 4445474e     ON_STATE_CHANGED
    a394:	4f43203a 43454e4e 0d444554 00000000     : CONNECTED.....
    a3a4:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
    a3b4:	45525f49 435f5053 535f4e4f 45544154     I_RESP_CON_STATE
    a3c4:	4148435f 4445474e 4944203a 4e4f4353     _CHANGED: DISCON
    a3d4:	5443454e 000d4445 34333231 38373635     NECTED..12345678
    a3e4:	00000000 686e7573 325f7473 4847342e     ....sunhst_2.4GH
    a3f4:	0000007a 69666977 3a62635f 4d324d20     z...wifi_cb: M2M
    a404:	4649575f 45525f49 48445f51 435f5043     _WIFI_REQ_DHCP_C
    a414:	3a464e4f 20504920 25207369 75252e75     ONF: IP is %u.%u
    a424:	2e75252e 0a0d7525 00000000              .%u.%u......

0000a430 <_global_impure_ptr>:
    a430:	20000014                                ... 

0000a434 <__sf_fake_stderr>:
	...

0000a454 <__sf_fake_stdin>:
	...

0000a474 <__sf_fake_stdout>:
	...
    a494:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    a4a4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    a4b4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    a4c4:	00006665                                ef..

0000a4c8 <_init>:
    a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4ca:	46c0      	nop			; (mov r8, r8)
    a4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a4ce:	bc08      	pop	{r3}
    a4d0:	469e      	mov	lr, r3
    a4d2:	4770      	bx	lr

0000a4d4 <__init_array_start>:
    a4d4:	000000dd 	.word	0x000000dd

0000a4d8 <_fini>:
    a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4da:	46c0      	nop			; (mov r8, r8)
    a4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a4de:	bc08      	pop	{r3}
    a4e0:	469e      	mov	lr, r3
    a4e2:	4770      	bx	lr

0000a4e4 <__fini_array_start>:
    a4e4:	000000b5 	.word	0x000000b5
