
Gateway_v01_without_PLC_Origin3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009a7c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00009a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c8c  20000074  00009af0  00020074  2**2
                  ALLOC
  3 .stack        00002000  20000d00  0000a77c  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00071e71  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000b73b  00000000  00000000  00091f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000187cd  00000000  00000000  0009d6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001230  00000000  00000000  000b5ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c28  00000000  00000000  000b70d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002abaa  00000000  00000000  000b8cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002dd42  00000000  00000000  000e38a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000953df  00000000  00000000  001115e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003880  00000000  00000000  001a69c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 2d 00 20 29 54 00 00 25 54 00 00 25 54 00 00     .-. )T..%T..%T..
	...
      2c:	25 54 00 00 00 00 00 00 00 00 00 00 25 54 00 00     %T..........%T..
      3c:	25 54 00 00 25 54 00 00 25 54 00 00 25 54 00 00     %T..%T..%T..%T..
      4c:	25 54 00 00 85 3e 00 00 25 54 00 00 25 54 00 00     %T...>..%T..%T..
      5c:	25 54 00 00 25 54 00 00 f1 43 00 00 01 44 00 00     %T..%T...C...D..
      6c:	11 44 00 00 21 44 00 00 31 44 00 00 41 44 00 00     .D..!D..1D..AD..
      7c:	c1 38 00 00 d1 38 00 00 e1 38 00 00 05 51 00 00     .8...8...8...Q..
      8c:	15 51 00 00 25 51 00 00 00 00 00 00 00 00 00 00     .Q..%Q..........
      9c:	25 54 00 00 25 54 00 00 00 00 00 00 25 54 00 00     %T..%T......%T..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00009a7c 	.word	0x00009a7c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00009a7c 	.word	0x00009a7c
     10c:	00009a7c 	.word	0x00009a7c
     110:	00000000 	.word	0x00000000

00000114 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     114:	b510      	push	{r4, lr}
	if (gpfIsr) {
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <chip_isr+0x10>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d000      	beq.n	120 <chip_isr+0xc>
		gpfIsr();
     11e:	4798      	blx	r3
	}
}
     120:	bd10      	pop	{r4, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	20000090 	.word	0x20000090

00000128 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     128:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     12a:	1e44      	subs	r4, r0, #1
     12c:	2800      	cmp	r0, #0
     12e:	d004      	beq.n	13a <nm_bsp_sleep+0x12>
		delay_ms(1);
     130:	4d02      	ldr	r5, [pc, #8]	; (13c <nm_bsp_sleep+0x14>)
     132:	2001      	movs	r0, #1
     134:	47a8      	blx	r5
	while (u32TimeMsec--) {
     136:	3c01      	subs	r4, #1
     138:	d2fb      	bcs.n	132 <nm_bsp_sleep+0xa>
	}
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003d7d 	.word	0x00003d7d

00000140 <nm_bsp_reset>:
{
     140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     142:	4c07      	ldr	r4, [pc, #28]	; (160 <nm_bsp_reset+0x20>)
     144:	2780      	movs	r7, #128	; 0x80
     146:	023f      	lsls	r7, r7, #8
     148:	6167      	str	r7, [r4, #20]
     14a:	2580      	movs	r5, #128	; 0x80
     14c:	01ed      	lsls	r5, r5, #7
     14e:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     150:	2001      	movs	r0, #1
     152:	4e04      	ldr	r6, [pc, #16]	; (164 <nm_bsp_reset+0x24>)
     154:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     156:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     158:	200a      	movs	r0, #10
     15a:	47b0      	blx	r6
     15c:	61a5      	str	r5, [r4, #24]
}
     15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     160:	41004400 	.word	0x41004400
     164:	00000129 	.word	0x00000129

00000168 <nm_bsp_init>:
{
     168:	b570      	push	{r4, r5, r6, lr}
     16a:	b082      	sub	sp, #8
	gpfIsr = NULL;
     16c:	2300      	movs	r3, #0
     16e:	4a16      	ldr	r2, [pc, #88]	; (1c8 <nm_bsp_init+0x60>)
     170:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     172:	ac01      	add	r4, sp, #4
     174:	2501      	movs	r5, #1
     176:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     178:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     17a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     17c:	0021      	movs	r1, r4
     17e:	200e      	movs	r0, #14
     180:	4e12      	ldr	r6, [pc, #72]	; (1cc <nm_bsp_init+0x64>)
     182:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     184:	0021      	movs	r1, r4
     186:	200f      	movs	r0, #15
     188:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     18a:	0021      	movs	r1, r4
     18c:	2018      	movs	r0, #24
     18e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     190:	4b0f      	ldr	r3, [pc, #60]	; (1d0 <nm_bsp_init+0x68>)
     192:	2280      	movs	r2, #128	; 0x80
     194:	0212      	lsls	r2, r2, #8
     196:	615a      	str	r2, [r3, #20]
     198:	2280      	movs	r2, #128	; 0x80
     19a:	01d2      	lsls	r2, r2, #7
     19c:	615a      	str	r2, [r3, #20]
    if(!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) 
     19e:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <nm_bsp_init+0x6c>)
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	421d      	tst	r5, r3
     1a4:	d003      	beq.n	1ae <nm_bsp_init+0x46>
     1a6:	4b0b      	ldr	r3, [pc, #44]	; (1d4 <nm_bsp_init+0x6c>)
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	079b      	lsls	r3, r3, #30
     1ac:	d401      	bmi.n	1b2 <nm_bsp_init+0x4a>
	    delay_init();
     1ae:	4b0a      	ldr	r3, [pc, #40]	; (1d8 <nm_bsp_init+0x70>)
     1b0:	4798      	blx	r3
	nm_bsp_reset();
     1b2:	4b0a      	ldr	r3, [pc, #40]	; (1dc <nm_bsp_init+0x74>)
     1b4:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     1b6:	2201      	movs	r2, #1
     1b8:	4b09      	ldr	r3, [pc, #36]	; (1e0 <nm_bsp_init+0x78>)
     1ba:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1c0:	b662      	cpsie	i
}
     1c2:	2000      	movs	r0, #0
     1c4:	b002      	add	sp, #8
     1c6:	bd70      	pop	{r4, r5, r6, pc}
     1c8:	20000090 	.word	0x20000090
     1cc:	00003fe9 	.word	0x00003fe9
     1d0:	41004400 	.word	0x41004400
     1d4:	e000e010 	.word	0xe000e010
     1d8:	00003d11 	.word	0x00003d11
     1dc:	00000141 	.word	0x00000141
     1e0:	2000000c 	.word	0x2000000c

000001e4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     1e4:	b510      	push	{r4, lr}
     1e6:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     1e8:	4b0e      	ldr	r3, [pc, #56]	; (224 <nm_bsp_register_isr+0x40>)
     1ea:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     1ec:	ac01      	add	r4, sp, #4
     1ee:	0020      	movs	r0, r4
     1f0:	4b0d      	ldr	r3, [pc, #52]	; (228 <nm_bsp_register_isr+0x44>)
     1f2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     1f4:	2317      	movs	r3, #23
     1f6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     1f8:	2300      	movs	r3, #0
     1fa:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     1fc:	3301      	adds	r3, #1
     1fe:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     200:	3301      	adds	r3, #1
     202:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     204:	0021      	movs	r1, r4
     206:	2007      	movs	r0, #7
     208:	4b08      	ldr	r3, [pc, #32]	; (22c <nm_bsp_register_isr+0x48>)
     20a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     20c:	2200      	movs	r2, #0
     20e:	2107      	movs	r1, #7
     210:	4807      	ldr	r0, [pc, #28]	; (230 <nm_bsp_register_isr+0x4c>)
     212:	4b08      	ldr	r3, [pc, #32]	; (234 <nm_bsp_register_isr+0x50>)
     214:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     216:	2100      	movs	r1, #0
     218:	2007      	movs	r0, #7
     21a:	4b07      	ldr	r3, [pc, #28]	; (238 <nm_bsp_register_isr+0x54>)
     21c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     21e:	b004      	add	sp, #16
     220:	bd10      	pop	{r4, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	20000090 	.word	0x20000090
     228:	00003f5d 	.word	0x00003f5d
     22c:	00003f71 	.word	0x00003f71
     230:	00000115 	.word	0x00000115
     234:	00003e19 	.word	0x00003e19
     238:	00003e45 	.word	0x00003e45

0000023c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     23c:	b510      	push	{r4, lr}
	if (u8Enable) {
     23e:	2800      	cmp	r0, #0
     240:	d104      	bne.n	24c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     242:	2100      	movs	r1, #0
     244:	2007      	movs	r0, #7
     246:	4b04      	ldr	r3, [pc, #16]	; (258 <nm_bsp_interrupt_ctrl+0x1c>)
     248:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     24a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     24c:	2100      	movs	r1, #0
     24e:	2007      	movs	r0, #7
     250:	4b02      	ldr	r3, [pc, #8]	; (25c <nm_bsp_interrupt_ctrl+0x20>)
     252:	4798      	blx	r3
     254:	e7f9      	b.n	24a <nm_bsp_interrupt_ctrl+0xe>
     256:	46c0      	nop			; (mov r8, r8)
     258:	00003e65 	.word	0x00003e65
     25c:	00003e45 	.word	0x00003e45

00000260 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     260:	b530      	push	{r4, r5, lr}
     262:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     264:	4c30      	ldr	r4, [pc, #192]	; (328 <nm_bus_init+0xc8>)
     266:	2311      	movs	r3, #17
     268:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     26a:	2300      	movs	r3, #0
     26c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     26e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     270:	a901      	add	r1, sp, #4
     272:	2201      	movs	r2, #1
     274:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     276:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     278:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     27a:	2011      	movs	r0, #17
     27c:	4b2b      	ldr	r3, [pc, #172]	; (32c <nm_bus_init+0xcc>)
     27e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     280:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     282:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     284:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     286:	2900      	cmp	r1, #0
     288:	d104      	bne.n	294 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     28a:	0953      	lsrs	r3, r2, #5
     28c:	01db      	lsls	r3, r3, #7
     28e:	4928      	ldr	r1, [pc, #160]	; (330 <nm_bus_init+0xd0>)
     290:	468c      	mov	ip, r1
     292:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     294:	211f      	movs	r1, #31
     296:	4011      	ands	r1, r2
     298:	2201      	movs	r2, #1
     29a:	0010      	movs	r0, r2
     29c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     29e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     2a0:	ac02      	add	r4, sp, #8
     2a2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     2a4:	2300      	movs	r3, #0
     2a6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     2a8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     2aa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     2ac:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     2ae:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     2b0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     2b2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     2b4:	3223      	adds	r2, #35	; 0x23
     2b6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     2b8:	3a18      	subs	r2, #24
     2ba:	2100      	movs	r1, #0
     2bc:	a808      	add	r0, sp, #32
     2be:	4b1d      	ldr	r3, [pc, #116]	; (334 <nm_bus_init+0xd4>)
     2c0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     2c2:	2380      	movs	r3, #128	; 0x80
     2c4:	025b      	lsls	r3, r3, #9
     2c6:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     2c8:	4b1b      	ldr	r3, [pc, #108]	; (338 <nm_bus_init+0xd8>)
     2ca:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     2cc:	2301      	movs	r3, #1
     2ce:	425b      	negs	r3, r3
     2d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     2d2:	4b1a      	ldr	r3, [pc, #104]	; (33c <nm_bus_init+0xdc>)
     2d4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     2d6:	4b1a      	ldr	r3, [pc, #104]	; (340 <nm_bus_init+0xe0>)
     2d8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     2da:	4b1a      	ldr	r3, [pc, #104]	; (344 <nm_bus_init+0xe4>)
     2dc:	61a3      	str	r3, [r4, #24]
	if(spi_init(&master_wifi, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) 
     2de:	0022      	movs	r2, r4
     2e0:	4919      	ldr	r1, [pc, #100]	; (348 <nm_bus_init+0xe8>)
     2e2:	481a      	ldr	r0, [pc, #104]	; (34c <nm_bus_init+0xec>)
     2e4:	4b1a      	ldr	r3, [pc, #104]	; (350 <nm_bus_init+0xf0>)
     2e6:	4798      	blx	r3
     2e8:	2800      	cmp	r0, #0
     2ea:	d11a      	bne.n	322 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2ec:	4d17      	ldr	r5, [pc, #92]	; (34c <nm_bus_init+0xec>)
     2ee:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2f0:	0020      	movs	r0, r4
     2f2:	4b18      	ldr	r3, [pc, #96]	; (354 <nm_bus_init+0xf4>)
     2f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2f6:	231f      	movs	r3, #31
     2f8:	4018      	ands	r0, r3
     2fa:	3b1e      	subs	r3, #30
     2fc:	4083      	lsls	r3, r0
     2fe:	4a16      	ldr	r2, [pc, #88]	; (358 <nm_bus_init+0xf8>)
     300:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     302:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     304:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     306:	2b00      	cmp	r3, #0
     308:	d1fc      	bne.n	304 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     30a:	6823      	ldr	r3, [r4, #0]
     30c:	2202      	movs	r2, #2
     30e:	4313      	orrs	r3, r2
     310:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master_wifi);

	nm_bsp_reset();
     312:	4b12      	ldr	r3, [pc, #72]	; (35c <nm_bus_init+0xfc>)
     314:	4798      	blx	r3
	nm_bsp_sleep(1);
     316:	2001      	movs	r0, #1
     318:	4b11      	ldr	r3, [pc, #68]	; (360 <nm_bus_init+0x100>)
     31a:	4798      	blx	r3
	
	return result;
     31c:	2000      	movs	r0, #0
}
     31e:	b011      	add	sp, #68	; 0x44
     320:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     322:	2006      	movs	r0, #6
     324:	4240      	negs	r0, r0
     326:	e7fa      	b.n	31e <nm_bus_init+0xbe>
     328:	20000988 	.word	0x20000988
     32c:	00003fe9 	.word	0x00003fe9
     330:	41004400 	.word	0x41004400
     334:	0000761b 	.word	0x0000761b
     338:	00100003 	.word	0x00100003
     33c:	00120003 	.word	0x00120003
     340:	00130003 	.word	0x00130003
     344:	00b71b00 	.word	0x00b71b00
     348:	42001400 	.word	0x42001400
     34c:	2000098c 	.word	0x2000098c
     350:	00004451 	.word	0x00004451
     354:	000043c1 	.word	0x000043c1
     358:	e000e100 	.word	0xe000e100
     35c:	00000141 	.word	0x00000141
     360:	00000129 	.word	0x00000129

00000364 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     364:	b5f0      	push	{r4, r5, r6, r7, lr}
     366:	46de      	mov	lr, fp
     368:	4657      	mov	r7, sl
     36a:	464e      	mov	r6, r9
     36c:	4645      	mov	r5, r8
     36e:	b5e0      	push	{r5, r6, r7, lr}
     370:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     372:	2803      	cmp	r0, #3
     374:	d000      	beq.n	378 <nm_bus_ioctl+0x14>
     376:	e075      	b.n	464 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     378:	680e      	ldr	r6, [r1, #0]
     37a:	684d      	ldr	r5, [r1, #4]
     37c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     37e:	2200      	movs	r2, #0
     380:	466b      	mov	r3, sp
     382:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     384:	2d00      	cmp	r5, #0
     386:	d027      	beq.n	3d8 <nm_bus_ioctl+0x74>
     388:	2c00      	cmp	r4, #0
     38a:	d065      	beq.n	458 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     38c:	2e00      	cmp	r6, #0
     38e:	d100      	bne.n	392 <nm_bus_ioctl+0x2e>
     390:	e076      	b.n	480 <nm_bus_ioctl+0x11c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     392:	2300      	movs	r3, #0
     394:	4698      	mov	r8, r3
     396:	2300      	movs	r3, #0
     398:	469b      	mov	fp, r3
	spi_select_slave(&master_wifi, &slave_inst, true);
     39a:	2201      	movs	r2, #1
     39c:	493b      	ldr	r1, [pc, #236]	; (48c <nm_bus_ioctl+0x128>)
     39e:	483c      	ldr	r0, [pc, #240]	; (490 <nm_bus_ioctl+0x12c>)
     3a0:	4b3c      	ldr	r3, [pc, #240]	; (494 <nm_bus_ioctl+0x130>)
     3a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3a4:	4b3a      	ldr	r3, [pc, #232]	; (490 <nm_bus_ioctl+0x12c>)
     3a6:	469a      	mov	sl, r3
		while(!spi_is_ready_to_write(&master_wifi));
     3a8:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master_wifi));
     3aa:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3ac:	4699      	mov	r9, r3
			pu8Miso++;
     3ae:	4659      	mov	r1, fp
     3b0:	424b      	negs	r3, r1
     3b2:	4159      	adcs	r1, r3
     3b4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     3b6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     3b8:	4653      	mov	r3, sl
     3ba:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3bc:	7e19      	ldrb	r1, [r3, #24]
		while(!spi_is_ready_to_write(&master_wifi));
     3be:	4239      	tst	r1, r7
     3c0:	d0fc      	beq.n	3bc <nm_bus_ioctl+0x58>
     3c2:	7e19      	ldrb	r1, [r3, #24]
	if(!spi_is_ready_to_write(module)) 
     3c4:	4239      	tst	r1, r7
     3c6:	d0fc      	beq.n	3c2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     3c8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3ca:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master_wifi));
     3cc:	4211      	tst	r1, r2
     3ce:	d0fc      	beq.n	3ca <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3d0:	4649      	mov	r1, r9
     3d2:	7989      	ldrb	r1, [r1, #6]
     3d4:	468c      	mov	ip, r1
     3d6:	e011      	b.n	3fc <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     3d8:	2e00      	cmp	r6, #0
     3da:	d03a      	beq.n	452 <nm_bus_ioctl+0xee>
     3dc:	2c00      	cmp	r4, #0
     3de:	d03e      	beq.n	45e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3e0:	2300      	movs	r3, #0
     3e2:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     3e4:	3301      	adds	r3, #1
     3e6:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     3e8:	466b      	mov	r3, sp
     3ea:	1ddd      	adds	r5, r3, #7
     3ec:	e7d5      	b.n	39a <nm_bus_ioctl+0x36>
     3ee:	4660      	mov	r0, ip
     3f0:	2801      	cmp	r0, #1
     3f2:	d00d      	beq.n	410 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     3f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
     3f6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master_wifi, &rxd_data) != STATUS_OK);
     3f8:	2900      	cmp	r1, #0
     3fa:	d00d      	beq.n	418 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3fc:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     3fe:	4211      	tst	r1, r2
     400:	d0fc      	beq.n	3fc <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     402:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     404:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     406:	4210      	tst	r0, r2
     408:	d0f1      	beq.n	3ee <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     40a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     40c:	311e      	adds	r1, #30
     40e:	e7ee      	b.n	3ee <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     410:	6a98      	ldr	r0, [r3, #40]	; 0x28
     412:	05c0      	lsls	r0, r0, #23
     414:	0dc0      	lsrs	r0, r0, #23
     416:	e7ef      	b.n	3f8 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     418:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     41a:	3c01      	subs	r4, #1
     41c:	b2a4      	uxth	r4, r4
			pu8Miso++;
     41e:	445d      	add	r5, fp
			pu8Mosi++;
     420:	4643      	mov	r3, r8
     422:	4259      	negs	r1, r3
     424:	414b      	adcs	r3, r1
     426:	18f6      	adds	r6, r6, r3
	while(u16Sz) 
     428:	2c00      	cmp	r4, #0
     42a:	d1c4      	bne.n	3b6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     42c:	4b18      	ldr	r3, [pc, #96]	; (490 <nm_bus_ioctl+0x12c>)
     42e:	6819      	ldr	r1, [r3, #0]
	while(!spi_is_write_complete(&master_wifi));
     430:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     432:	7e0b      	ldrb	r3, [r1, #24]
     434:	4213      	tst	r3, r2
     436:	d0fc      	beq.n	432 <nm_bus_ioctl+0xce>
	spi_select_slave(&master_wifi, &slave_inst, false);
     438:	2200      	movs	r2, #0
     43a:	4914      	ldr	r1, [pc, #80]	; (48c <nm_bus_ioctl+0x128>)
     43c:	4814      	ldr	r0, [pc, #80]	; (490 <nm_bus_ioctl+0x12c>)
     43e:	4b15      	ldr	r3, [pc, #84]	; (494 <nm_bus_ioctl+0x130>)
     440:	4798      	blx	r3
	return M2M_SUCCESS;
     442:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     444:	b003      	add	sp, #12
     446:	bc3c      	pop	{r2, r3, r4, r5}
     448:	4690      	mov	r8, r2
     44a:	4699      	mov	r9, r3
     44c:	46a2      	mov	sl, r4
     44e:	46ab      	mov	fp, r5
     450:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     452:	200f      	movs	r0, #15
     454:	4240      	negs	r0, r0
     456:	e7f5      	b.n	444 <nm_bus_ioctl+0xe0>
     458:	200f      	movs	r0, #15
     45a:	4240      	negs	r0, r0
     45c:	e7f2      	b.n	444 <nm_bus_ioctl+0xe0>
     45e:	200f      	movs	r0, #15
     460:	4240      	negs	r0, r0
		break;
     462:	e7ef      	b.n	444 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     464:	22fd      	movs	r2, #253	; 0xfd
     466:	490c      	ldr	r1, [pc, #48]	; (498 <nm_bus_ioctl+0x134>)
     468:	480c      	ldr	r0, [pc, #48]	; (49c <nm_bus_ioctl+0x138>)
     46a:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <nm_bus_ioctl+0x13c>)
     46c:	4798      	blx	r3
     46e:	480d      	ldr	r0, [pc, #52]	; (4a4 <nm_bus_ioctl+0x140>)
     470:	4b0d      	ldr	r3, [pc, #52]	; (4a8 <nm_bus_ioctl+0x144>)
     472:	4798      	blx	r3
     474:	200d      	movs	r0, #13
     476:	4b0d      	ldr	r3, [pc, #52]	; (4ac <nm_bus_ioctl+0x148>)
     478:	4798      	blx	r3
			s8Ret = -1;
     47a:	2001      	movs	r0, #1
     47c:	4240      	negs	r0, r0
	return s8Ret;
     47e:	e7e1      	b.n	444 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     480:	2301      	movs	r3, #1
     482:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     484:	466b      	mov	r3, sp
     486:	1dde      	adds	r6, r3, #7
     488:	e785      	b.n	396 <nm_bus_ioctl+0x32>
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	20000988 	.word	0x20000988
     490:	2000098c 	.word	0x2000098c
     494:	00004629 	.word	0x00004629
     498:	00008860 	.word	0x00008860
     49c:	00008870 	.word	0x00008870
     4a0:	0000762d 	.word	0x0000762d
     4a4:	00008884 	.word	0x00008884
     4a8:	00007749 	.word	0x00007749
     4ac:	00007661 	.word	0x00007661

000004b0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     4b0:	b530      	push	{r4, r5, lr}
     4b2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     4b4:	ab01      	add	r3, sp, #4
     4b6:	2200      	movs	r2, #0
     4b8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     4ba:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     4bc:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4be:	4d13      	ldr	r5, [pc, #76]	; (50c <nm_bus_deinit+0x5c>)
     4c0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     4c2:	0020      	movs	r0, r4
     4c4:	4b12      	ldr	r3, [pc, #72]	; (510 <nm_bus_deinit+0x60>)
     4c6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4c8:	231f      	movs	r3, #31
     4ca:	4018      	ands	r0, r3
     4cc:	3b1e      	subs	r3, #30
     4ce:	4083      	lsls	r3, r0
     4d0:	2280      	movs	r2, #128	; 0x80
     4d2:	4910      	ldr	r1, [pc, #64]	; (514 <nm_bus_deinit+0x64>)
     4d4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4d6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     4d8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     4da:	2b00      	cmp	r3, #0
     4dc:	d1fc      	bne.n	4d8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     4de:	338f      	adds	r3, #143	; 0x8f
     4e0:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     4e2:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     4e4:	6823      	ldr	r3, [r4, #0]
     4e6:	2202      	movs	r2, #2
     4e8:	4393      	bics	r3, r2
     4ea:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master_wifi);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     4ec:	a901      	add	r1, sp, #4
     4ee:	2012      	movs	r0, #18
     4f0:	4c09      	ldr	r4, [pc, #36]	; (518 <nm_bus_deinit+0x68>)
     4f2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     4f4:	a901      	add	r1, sp, #4
     4f6:	2010      	movs	r0, #16
     4f8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     4fa:	a901      	add	r1, sp, #4
     4fc:	2013      	movs	r0, #19
     4fe:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     500:	a901      	add	r1, sp, #4
     502:	2011      	movs	r0, #17
     504:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     506:	2000      	movs	r0, #0
     508:	b003      	add	sp, #12
     50a:	bd30      	pop	{r4, r5, pc}
     50c:	2000098c 	.word	0x2000098c
     510:	000043c1 	.word	0x000043c1
     514:	e000e100 	.word	0xe000e100
     518:	00003fe9 	.word	0x00003fe9

0000051c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     51c:	2a00      	cmp	r2, #0
     51e:	d006      	beq.n	52e <m2m_memcpy+0x12>
     520:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     522:	780b      	ldrb	r3, [r1, #0]
     524:	7003      	strb	r3, [r0, #0]
		pDst++;
     526:	3001      	adds	r0, #1
		pSrc++;
     528:	3101      	adds	r1, #1
	}while(--sz);
     52a:	4290      	cmp	r0, r2
     52c:	d1f9      	bne.n	522 <m2m_memcpy+0x6>
}
     52e:	4770      	bx	lr

00000530 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     530:	2a00      	cmp	r2, #0
     532:	d004      	beq.n	53e <m2m_memset+0xe>
     534:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     536:	7001      	strb	r1, [r0, #0]
		pBuf++;
     538:	3001      	adds	r0, #1
	}while(--sz);
     53a:	4290      	cmp	r0, r2
     53c:	d1fb      	bne.n	536 <m2m_memset+0x6>
}
     53e:	4770      	bx	lr

00000540 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     540:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     542:	7802      	ldrb	r2, [r0, #0]
     544:	2a00      	cmp	r2, #0
     546:	d007      	beq.n	558 <m2m_strlen+0x18>
     548:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     54a:	3001      	adds	r0, #1
     54c:	b280      	uxth	r0, r0
		pcStr++;
     54e:	3301      	adds	r3, #1
	while(*pcStr)
     550:	781a      	ldrb	r2, [r3, #0]
     552:	2a00      	cmp	r2, #0
     554:	d1f9      	bne.n	54a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
     556:	4770      	bx	lr
	uint16	u16StrLen = 0;
     558:	2000      	movs	r0, #0
     55a:	e7fc      	b.n	556 <m2m_strlen+0x16>

0000055c <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     55c:	4a02      	ldr	r2, [pc, #8]	; (568 <isr+0xc>)
     55e:	78d3      	ldrb	r3, [r2, #3]
     560:	3301      	adds	r3, #1
     562:	b2db      	uxtb	r3, r3
     564:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     566:	4770      	bx	lr
     568:	200009c8 	.word	0x200009c8

0000056c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     56c:	4770      	bx	lr
	...

00000570 <hif_set_rx_done>:
{
     570:	b500      	push	{lr}
     572:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     574:	2200      	movs	r2, #0
     576:	4b0a      	ldr	r3, [pc, #40]	; (5a0 <hif_set_rx_done+0x30>)
     578:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     57a:	2001      	movs	r0, #1
     57c:	4b09      	ldr	r3, [pc, #36]	; (5a4 <hif_set_rx_done+0x34>)
     57e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     580:	a901      	add	r1, sp, #4
     582:	4809      	ldr	r0, [pc, #36]	; (5a8 <hif_set_rx_done+0x38>)
     584:	4b09      	ldr	r3, [pc, #36]	; (5ac <hif_set_rx_done+0x3c>)
     586:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     588:	2800      	cmp	r0, #0
     58a:	d001      	beq.n	590 <hif_set_rx_done+0x20>
}
     58c:	b003      	add	sp, #12
     58e:	bd00      	pop	{pc}
	reg |= NBIT1;
     590:	2102      	movs	r1, #2
     592:	9b01      	ldr	r3, [sp, #4]
     594:	4319      	orrs	r1, r3
     596:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     598:	4803      	ldr	r0, [pc, #12]	; (5a8 <hif_set_rx_done+0x38>)
     59a:	4b05      	ldr	r3, [pc, #20]	; (5b0 <hif_set_rx_done+0x40>)
     59c:	4798      	blx	r3
     59e:	e7f5      	b.n	58c <hif_set_rx_done+0x1c>
     5a0:	200009c8 	.word	0x200009c8
     5a4:	0000023d 	.word	0x0000023d
     5a8:	00001070 	.word	0x00001070
     5ac:	0000197d 	.word	0x0000197d
     5b0:	00001989 	.word	0x00001989

000005b4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     5b4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	
	if(gstrHifCxt.u8HifRXDone)
     5b6:	4b0c      	ldr	r3, [pc, #48]	; (5e8 <hif_chip_wake+0x34>)
     5b8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     5ba:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
     5bc:	2b00      	cmp	r3, #0
     5be:	d10d      	bne.n	5dc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     5c0:	4b09      	ldr	r3, [pc, #36]	; (5e8 <hif_chip_wake+0x34>)
     5c2:	785b      	ldrb	r3, [r3, #1]
     5c4:	2b00      	cmp	r3, #0
     5c6:	d103      	bne.n	5d0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <hif_chip_wake+0x34>)
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d106      	bne.n	5de <hif_chip_wake+0x2a>
			if(ret != M2M_SUCCESS)goto ERR1;
		}
		else;
	}
	
	gstrHifCxt.u8ChipSleep++;
     5d0:	4a05      	ldr	r2, [pc, #20]	; (5e8 <hif_chip_wake+0x34>)
     5d2:	7853      	ldrb	r3, [r2, #1]
     5d4:	3301      	adds	r3, #1
     5d6:	b2db      	uxtb	r3, r3
     5d8:	7053      	strb	r3, [r2, #1]
     5da:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     5dc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
     5de:	4b03      	ldr	r3, [pc, #12]	; (5ec <hif_chip_wake+0x38>)
     5e0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5e2:	2800      	cmp	r0, #0
     5e4:	d0f4      	beq.n	5d0 <hif_chip_wake+0x1c>
     5e6:	e7f9      	b.n	5dc <hif_chip_wake+0x28>
     5e8:	200009c8 	.word	0x200009c8
     5ec:	00001665 	.word	0x00001665

000005f0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
     5f0:	4b05      	ldr	r3, [pc, #20]	; (608 <hif_chip_sleep_sc+0x18>)
     5f2:	785b      	ldrb	r3, [r3, #1]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d004      	beq.n	602 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
     5f8:	4a03      	ldr	r2, [pc, #12]	; (608 <hif_chip_sleep_sc+0x18>)
     5fa:	7853      	ldrb	r3, [r2, #1]
     5fc:	3b01      	subs	r3, #1
     5fe:	b2db      	uxtb	r3, r3
     600:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
     602:	2000      	movs	r0, #0
     604:	4770      	bx	lr
     606:	46c0      	nop			; (mov r8, r8)
     608:	200009c8 	.word	0x200009c8

0000060c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     60c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
     60e:	4b0b      	ldr	r3, [pc, #44]	; (63c <hif_chip_sleep+0x30>)
     610:	785b      	ldrb	r3, [r3, #1]
     612:	2b00      	cmp	r3, #0
     614:	d004      	beq.n	620 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
     616:	4a09      	ldr	r2, [pc, #36]	; (63c <hif_chip_sleep+0x30>)
     618:	7853      	ldrb	r3, [r2, #1]
     61a:	3b01      	subs	r3, #1
     61c:	b2db      	uxtb	r3, r3
     61e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     620:	4b06      	ldr	r3, [pc, #24]	; (63c <hif_chip_sleep+0x30>)
     622:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
     624:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
     626:	2b00      	cmp	r3, #0
     628:	d103      	bne.n	632 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     62a:	4b04      	ldr	r3, [pc, #16]	; (63c <hif_chip_sleep+0x30>)
     62c:	781b      	ldrb	r3, [r3, #0]
     62e:	2b00      	cmp	r3, #0
     630:	d100      	bne.n	634 <hif_chip_sleep+0x28>
		}
		else;
	}
ERR1:
	return ret;
}
     632:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
     634:	4b02      	ldr	r3, [pc, #8]	; (640 <hif_chip_sleep+0x34>)
     636:	4798      	blx	r3
     638:	e7fb      	b.n	632 <hif_chip_sleep+0x26>
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	200009c8 	.word	0x200009c8
     640:	000015fd 	.word	0x000015fd

00000644 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     644:	b5f0      	push	{r4, r5, r6, r7, lr}
     646:	46de      	mov	lr, fp
     648:	4657      	mov	r7, sl
     64a:	b580      	push	{r7, lr}
     64c:	b089      	sub	sp, #36	; 0x24
     64e:	4683      	mov	fp, r0
     650:	468a      	mov	sl, r1
     652:	9201      	str	r2, [sp, #4]
     654:	9300      	str	r3, [sp, #0]
     656:	ab10      	add	r3, sp, #64	; 0x40
     658:	cb80      	ldmia	r3!, {r7}
     65a:	881e      	ldrh	r6, [r3, #0]
     65c:	ab12      	add	r3, sp, #72	; 0x48
     65e:	881d      	ldrh	r5, [r3, #0]
	sint8 ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     660:	227f      	movs	r2, #127	; 0x7f
     662:	400a      	ands	r2, r1
     664:	ab07      	add	r3, sp, #28
     666:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     668:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     66a:	2208      	movs	r2, #8
     66c:	805a      	strh	r2, [r3, #2]
	
	if(pu8DataBuf != NULL)
     66e:	2f00      	cmp	r7, #0
     670:	d03d      	beq.n	6ee <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     672:	885a      	ldrh	r2, [r3, #2]
     674:	1992      	adds	r2, r2, r6
     676:	18aa      	adds	r2, r5, r2
     678:	b292      	uxth	r2, r2
     67a:	805a      	strh	r2, [r3, #2]
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	
	ret = hif_chip_wake();
     67c:	4b69      	ldr	r3, [pc, #420]	; (824 <hif_send+0x1e0>)
     67e:	4798      	blx	r3
     680:	1e04      	subs	r4, r0, #0
	
	if(ret == M2M_SUCCESS)
     682:	d000      	beq.n	686 <hif_send+0x42>
     684:	e0c1      	b.n	80a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
     686:	2300      	movs	r3, #0
     688:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     68a:	aa02      	add	r2, sp, #8
     68c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     68e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     690:	9b04      	ldr	r3, [sp, #16]
     692:	465a      	mov	r2, fp
     694:	431a      	orrs	r2, r3
     696:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     698:	9a04      	ldr	r2, [sp, #16]
     69a:	4653      	mov	r3, sl
     69c:	021b      	lsls	r3, r3, #8
     69e:	4313      	orrs	r3, r2
     6a0:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     6a2:	ab07      	add	r3, sp, #28
     6a4:	885b      	ldrh	r3, [r3, #2]
     6a6:	9a04      	ldr	r2, [sp, #16]
     6a8:	041b      	lsls	r3, r3, #16
     6aa:	4313      	orrs	r3, r2
     6ac:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);	//
     6ae:	9904      	ldr	r1, [sp, #16]
     6b0:	485d      	ldr	r0, [pc, #372]	; (828 <hif_send+0x1e4>)
     6b2:	4b5e      	ldr	r3, [pc, #376]	; (82c <hif_send+0x1e8>)
     6b4:	4798      	blx	r3
     6b6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     6b8:	d157      	bne.n	76a <hif_send+0x126>

		reg = 0UL;
     6ba:	2300      	movs	r3, #0
     6bc:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
     6be:	9b04      	ldr	r3, [sp, #16]
     6c0:	2202      	movs	r2, #2
     6c2:	4313      	orrs	r3, r2
     6c4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     6c6:	9904      	ldr	r1, [sp, #16]
     6c8:	4859      	ldr	r0, [pc, #356]	; (830 <hif_send+0x1ec>)
     6ca:	4b58      	ldr	r3, [pc, #352]	; (82c <hif_send+0x1e8>)
     6cc:	4798      	blx	r3
     6ce:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     6d0:	d14b      	bne.n	76a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     6d2:	2200      	movs	r2, #0
     6d4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     6d6:	ab02      	add	r3, sp, #8
     6d8:	80da      	strh	r2, [r3, #6]
     6da:	3306      	adds	r3, #6
     6dc:	881b      	ldrh	r3, [r3, #0]
     6de:	b29b      	uxth	r3, r3
     6e0:	4a54      	ldr	r2, [pc, #336]	; (834 <hif_send+0x1f0>)
     6e2:	4293      	cmp	r3, r2
     6e4:	d849      	bhi.n	77a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     6e6:	4c54      	ldr	r4, [pc, #336]	; (838 <hif_send+0x1f4>)
			{
				if(cnt < 501) 
				{
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     6e8:	4b54      	ldr	r3, [pc, #336]	; (83c <hif_send+0x1f8>)
     6ea:	469a      	mov	sl, r3
     6ec:	e017      	b.n	71e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
     6ee:	ab07      	add	r3, sp, #28
     6f0:	885a      	ldrh	r2, [r3, #2]
     6f2:	9900      	ldr	r1, [sp, #0]
     6f4:	468c      	mov	ip, r1
     6f6:	4462      	add	r2, ip
     6f8:	b292      	uxth	r2, r2
     6fa:	805a      	strh	r2, [r3, #2]
     6fc:	e7be      	b.n	67c <hif_send+0x38>
				nm_bsp_sleep(1);
     6fe:	2001      	movs	r0, #1
     700:	47d0      	blx	sl
			}
			if(!(reg & NBIT1))
     702:	9b04      	ldr	r3, [sp, #16]
     704:	079b      	lsls	r3, r3, #30
     706:	d528      	bpl.n	75a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
     708:	ab02      	add	r3, sp, #8
     70a:	88da      	ldrh	r2, [r3, #6]
     70c:	3201      	adds	r2, #1
     70e:	b292      	uxth	r2, r2
     710:	80da      	strh	r2, [r3, #6]
     712:	3306      	adds	r3, #6
     714:	881b      	ldrh	r3, [r3, #0]
     716:	b29b      	uxth	r3, r3
     718:	4a46      	ldr	r2, [pc, #280]	; (834 <hif_send+0x1f0>)
     71a:	4293      	cmp	r3, r2
     71c:	d82d      	bhi.n	77a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     71e:	a904      	add	r1, sp, #16
     720:	4843      	ldr	r0, [pc, #268]	; (830 <hif_send+0x1ec>)
     722:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     724:	2800      	cmp	r0, #0
     726:	d128      	bne.n	77a <hif_send+0x136>
			if(cnt >= 500) 
     728:	ab02      	add	r3, sp, #8
     72a:	3306      	adds	r3, #6
     72c:	881b      	ldrh	r3, [r3, #0]
     72e:	b29b      	uxth	r3, r3
     730:	22f4      	movs	r2, #244	; 0xf4
     732:	32ff      	adds	r2, #255	; 0xff
     734:	4293      	cmp	r3, r2
     736:	d9e4      	bls.n	702 <hif_send+0xbe>
				if(cnt < 501) 
     738:	ab02      	add	r3, sp, #8
     73a:	3306      	adds	r3, #6
     73c:	881b      	ldrh	r3, [r3, #0]
     73e:	b29b      	uxth	r3, r3
     740:	3201      	adds	r2, #1
     742:	4293      	cmp	r3, r2
     744:	d8db      	bhi.n	6fe <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
     746:	483e      	ldr	r0, [pc, #248]	; (840 <hif_send+0x1fc>)
     748:	4b3e      	ldr	r3, [pc, #248]	; (844 <hif_send+0x200>)
     74a:	4798      	blx	r3
     74c:	483e      	ldr	r0, [pc, #248]	; (848 <hif_send+0x204>)
     74e:	4b3f      	ldr	r3, [pc, #252]	; (84c <hif_send+0x208>)
     750:	4798      	blx	r3
     752:	200d      	movs	r0, #13
     754:	4b3e      	ldr	r3, [pc, #248]	; (850 <hif_send+0x20c>)
     756:	4798      	blx	r3
     758:	e7d1      	b.n	6fe <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     75a:	a905      	add	r1, sp, #20
     75c:	483d      	ldr	r0, [pc, #244]	; (854 <hif_send+0x210>)
     75e:	4b36      	ldr	r3, [pc, #216]	; (838 <hif_send+0x1f4>)
     760:	4798      	blx	r3
     762:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) 
     764:	d009      	beq.n	77a <hif_send+0x136>
				{
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     766:	2300      	movs	r3, #0
     768:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
     76a:	4b3b      	ldr	r3, [pc, #236]	; (858 <hif_send+0x214>)
     76c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
     76e:	0020      	movs	r0, r4
     770:	b009      	add	sp, #36	; 0x24
     772:	bc0c      	pop	{r2, r3}
     774:	4692      	mov	sl, r2
     776:	469b      	mov	fp, r3
     778:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(dma_addr != 0)
     77a:	9b05      	ldr	r3, [sp, #20]
     77c:	2b00      	cmp	r3, #0
     77e:	d03f      	beq.n	800 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
     780:	9b05      	ldr	r3, [sp, #20]
     782:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     784:	a907      	add	r1, sp, #28
     786:	884b      	ldrh	r3, [r1, #2]
     788:	b29b      	uxth	r3, r3
     78a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     78c:	9806      	ldr	r0, [sp, #24]
     78e:	2208      	movs	r2, #8
     790:	4b32      	ldr	r3, [pc, #200]	; (85c <hif_send+0x218>)
     792:	4798      	blx	r3
     794:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     796:	d1e8      	bne.n	76a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     798:	9b06      	ldr	r3, [sp, #24]
     79a:	3308      	adds	r3, #8
     79c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     79e:	9b01      	ldr	r3, [sp, #4]
     7a0:	2b00      	cmp	r3, #0
     7a2:	d00b      	beq.n	7bc <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     7a4:	9806      	ldr	r0, [sp, #24]
     7a6:	9a00      	ldr	r2, [sp, #0]
     7a8:	0019      	movs	r1, r3
     7aa:	4b2c      	ldr	r3, [pc, #176]	; (85c <hif_send+0x218>)
     7ac:	4798      	blx	r3
     7ae:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7b0:	d1db      	bne.n	76a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
     7b2:	9b06      	ldr	r3, [sp, #24]
     7b4:	9a00      	ldr	r2, [sp, #0]
     7b6:	4694      	mov	ip, r2
     7b8:	4463      	add	r3, ip
     7ba:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
     7bc:	2f00      	cmp	r7, #0
     7be:	d00e      	beq.n	7de <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     7c0:	9b06      	ldr	r3, [sp, #24]
     7c2:	9a00      	ldr	r2, [sp, #0]
     7c4:	1aad      	subs	r5, r5, r2
     7c6:	18ed      	adds	r5, r5, r3
     7c8:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     7ca:	9806      	ldr	r0, [sp, #24]
     7cc:	0032      	movs	r2, r6
     7ce:	0039      	movs	r1, r7
     7d0:	4b22      	ldr	r3, [pc, #136]	; (85c <hif_send+0x218>)
     7d2:	4798      	blx	r3
     7d4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7d6:	d1c8      	bne.n	76a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
     7d8:	9b06      	ldr	r3, [sp, #24]
     7da:	18f3      	adds	r3, r6, r3
     7dc:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
     7de:	9b05      	ldr	r3, [sp, #20]
     7e0:	009b      	lsls	r3, r3, #2
     7e2:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
     7e4:	9b04      	ldr	r3, [sp, #16]
     7e6:	2202      	movs	r2, #2
     7e8:	4313      	orrs	r3, r2
     7ea:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     7ec:	9904      	ldr	r1, [sp, #16]
     7ee:	481c      	ldr	r0, [pc, #112]	; (860 <hif_send+0x21c>)
     7f0:	4b0e      	ldr	r3, [pc, #56]	; (82c <hif_send+0x1e8>)
     7f2:	4798      	blx	r3
     7f4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     7f6:	d1b8      	bne.n	76a <hif_send+0x126>
 	ret = hif_chip_sleep();
     7f8:	4b1a      	ldr	r3, [pc, #104]	; (864 <hif_send+0x220>)
     7fa:	4798      	blx	r3
     7fc:	0004      	movs	r4, r0
	return ret;
     7fe:	e7b6      	b.n	76e <hif_send+0x12a>
			ret = hif_chip_sleep();
     800:	4b18      	ldr	r3, [pc, #96]	; (864 <hif_send+0x220>)
     802:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
     804:	2403      	movs	r4, #3
     806:	4264      	negs	r4, r4
			goto ERR2;
     808:	e7b1      	b.n	76e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     80a:	229a      	movs	r2, #154	; 0x9a
     80c:	32ff      	adds	r2, #255	; 0xff
     80e:	4916      	ldr	r1, [pc, #88]	; (868 <hif_send+0x224>)
     810:	4816      	ldr	r0, [pc, #88]	; (86c <hif_send+0x228>)
     812:	4b0c      	ldr	r3, [pc, #48]	; (844 <hif_send+0x200>)
     814:	4798      	blx	r3
     816:	4816      	ldr	r0, [pc, #88]	; (870 <hif_send+0x22c>)
     818:	4b0c      	ldr	r3, [pc, #48]	; (84c <hif_send+0x208>)
     81a:	4798      	blx	r3
     81c:	200d      	movs	r0, #13
     81e:	4b0c      	ldr	r3, [pc, #48]	; (850 <hif_send+0x20c>)
     820:	4798      	blx	r3
		goto ERR2;
     822:	e7a4      	b.n	76e <hif_send+0x12a>
     824:	000005b5 	.word	0x000005b5
     828:	0000108c 	.word	0x0000108c
     82c:	00001989 	.word	0x00001989
     830:	00001078 	.word	0x00001078
     834:	000003e7 	.word	0x000003e7
     838:	0000197d 	.word	0x0000197d
     83c:	00000129 	.word	0x00000129
     840:	00008ba0 	.word	0x00008ba0
     844:	0000762d 	.word	0x0000762d
     848:	00008bac 	.word	0x00008bac
     84c:	00007749 	.word	0x00007749
     850:	00007661 	.word	0x00007661
     854:	00150400 	.word	0x00150400
     858:	000005f1 	.word	0x000005f1
     85c:	000019fd 	.word	0x000019fd
     860:	0000106c 	.word	0x0000106c
     864:	0000060d 	.word	0x0000060d
     868:	000088b8 	.word	0x000088b8
     86c:	00008870 	.word	0x00008870
     870:	00008bbc 	.word	0x00008bbc

00000874 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     874:	b5f0      	push	{r4, r5, r6, r7, lr}
     876:	46ce      	mov	lr, r9
     878:	4647      	mov	r7, r8
     87a:	b580      	push	{r7, lr}
     87c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;
	
	while(gstrHifCxt.u8Interrupt) 
     87e:	4bcf      	ldr	r3, [pc, #828]	; (bbc <hif_handle_isr+0x348>)
     880:	4698      	mov	r8, r3
	{
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
     882:	4699      	mov	r9, r3
	while(gstrHifCxt.u8Interrupt) 
     884:	e081      	b.n	98a <hif_handle_isr+0x116>
				gstrHifCxt.u32RxAddr = address;
     886:	4bcd      	ldr	r3, [pc, #820]	; (bbc <hif_handle_isr+0x348>)
     888:	9a05      	ldr	r2, [sp, #20]
     88a:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
     88c:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     88e:	af04      	add	r7, sp, #16
     890:	2204      	movs	r2, #4
     892:	0039      	movs	r1, r7
     894:	9805      	ldr	r0, [sp, #20]
     896:	4bca      	ldr	r3, [pc, #808]	; (bc0 <hif_handle_isr+0x34c>)
     898:	4798      	blx	r3
     89a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     89c:	887b      	ldrh	r3, [r7, #2]
     89e:	b29b      	uxth	r3, r3
     8a0:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
     8a2:	2800      	cmp	r0, #0
     8a4:	d134      	bne.n	910 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
     8a6:	ab04      	add	r3, sp, #16
     8a8:	885b      	ldrh	r3, [r3, #2]
     8aa:	b29b      	uxth	r3, r3
     8ac:	429d      	cmp	r5, r3
     8ae:	d004      	beq.n	8ba <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
     8b0:	ab04      	add	r3, sp, #16
     8b2:	885b      	ldrh	r3, [r3, #2]
     8b4:	1aeb      	subs	r3, r5, r3
     8b6:	2b04      	cmp	r3, #4
     8b8:	dc3a      	bgt.n	930 <hif_handle_isr+0xbc>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     8ba:	ab04      	add	r3, sp, #16
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b01      	cmp	r3, #1
     8c0:	d04f      	beq.n	962 <hif_handle_isr+0xee>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     8c2:	ab04      	add	r3, sp, #16
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	2b02      	cmp	r3, #2
     8c8:	d079      	beq.n	9be <hif_handle_isr+0x14a>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     8ca:	ab04      	add	r3, sp, #16
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b04      	cmp	r3, #4
     8d0:	d100      	bne.n	8d4 <hif_handle_isr+0x60>
     8d2:	e091      	b.n	9f8 <hif_handle_isr+0x184>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     8d4:	ab04      	add	r3, sp, #16
     8d6:	781b      	ldrb	r3, [r3, #0]
     8d8:	2b06      	cmp	r3, #6
     8da:	d100      	bne.n	8de <hif_handle_isr+0x6a>
     8dc:	e0a9      	b.n	a32 <hif_handle_isr+0x1be>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     8de:	ab04      	add	r3, sp, #16
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b07      	cmp	r3, #7
     8e4:	d100      	bne.n	8e8 <hif_handle_isr+0x74>
     8e6:	e0c1      	b.n	a6c <hif_handle_isr+0x1f8>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
     8e8:	ab04      	add	r3, sp, #16
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	2b05      	cmp	r3, #5
     8ee:	d100      	bne.n	8f2 <hif_handle_isr+0x7e>
     8f0:	e0d8      	b.n	aa4 <hif_handle_isr+0x230>
					M2M_ERR("(hif) invalid group ID\n");
     8f2:	2285      	movs	r2, #133	; 0x85
     8f4:	0092      	lsls	r2, r2, #2
     8f6:	49b3      	ldr	r1, [pc, #716]	; (bc4 <hif_handle_isr+0x350>)
     8f8:	48b3      	ldr	r0, [pc, #716]	; (bc8 <hif_handle_isr+0x354>)
     8fa:	4bb4      	ldr	r3, [pc, #720]	; (bcc <hif_handle_isr+0x358>)
     8fc:	4798      	blx	r3
     8fe:	48b4      	ldr	r0, [pc, #720]	; (bd0 <hif_handle_isr+0x35c>)
     900:	4bb4      	ldr	r3, [pc, #720]	; (bd4 <hif_handle_isr+0x360>)
     902:	4798      	blx	r3
     904:	200d      	movs	r0, #13
     906:	4bb4      	ldr	r3, [pc, #720]	; (bd8 <hif_handle_isr+0x364>)
     908:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
     90a:	2406      	movs	r4, #6
     90c:	4264      	negs	r4, r4
     90e:	e115      	b.n	b3c <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
     910:	22eb      	movs	r2, #235	; 0xeb
     912:	0052      	lsls	r2, r2, #1
     914:	49ab      	ldr	r1, [pc, #684]	; (bc4 <hif_handle_isr+0x350>)
     916:	48ac      	ldr	r0, [pc, #688]	; (bc8 <hif_handle_isr+0x354>)
     918:	4bac      	ldr	r3, [pc, #688]	; (bcc <hif_handle_isr+0x358>)
     91a:	4798      	blx	r3
     91c:	48af      	ldr	r0, [pc, #700]	; (bdc <hif_handle_isr+0x368>)
     91e:	4bad      	ldr	r3, [pc, #692]	; (bd4 <hif_handle_isr+0x360>)
     920:	4798      	blx	r3
     922:	200d      	movs	r0, #13
     924:	4bac      	ldr	r3, [pc, #688]	; (bd8 <hif_handle_isr+0x364>)
     926:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     928:	2001      	movs	r0, #1
     92a:	4bad      	ldr	r3, [pc, #692]	; (be0 <hif_handle_isr+0x36c>)
     92c:	4798      	blx	r3
     92e:	e105      	b.n	b3c <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     930:	22e0      	movs	r2, #224	; 0xe0
     932:	32ff      	adds	r2, #255	; 0xff
     934:	49a3      	ldr	r1, [pc, #652]	; (bc4 <hif_handle_isr+0x350>)
     936:	48a4      	ldr	r0, [pc, #656]	; (bc8 <hif_handle_isr+0x354>)
     938:	4ca4      	ldr	r4, [pc, #656]	; (bcc <hif_handle_isr+0x358>)
     93a:	47a0      	blx	r4
     93c:	a904      	add	r1, sp, #16
     93e:	884a      	ldrh	r2, [r1, #2]
     940:	b292      	uxth	r2, r2
     942:	780b      	ldrb	r3, [r1, #0]
     944:	b2db      	uxtb	r3, r3
     946:	7849      	ldrb	r1, [r1, #1]
     948:	9100      	str	r1, [sp, #0]
     94a:	0029      	movs	r1, r5
     94c:	48a5      	ldr	r0, [pc, #660]	; (be4 <hif_handle_isr+0x370>)
     94e:	47a0      	blx	r4
     950:	200d      	movs	r0, #13
     952:	4ba1      	ldr	r3, [pc, #644]	; (bd8 <hif_handle_isr+0x364>)
     954:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     956:	2001      	movs	r0, #1
     958:	4ba1      	ldr	r3, [pc, #644]	; (be0 <hif_handle_isr+0x36c>)
     95a:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     95c:	2406      	movs	r4, #6
     95e:	4264      	negs	r4, r4
     960:	e0ec      	b.n	b3c <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
     962:	4b96      	ldr	r3, [pc, #600]	; (bbc <hif_handle_isr+0x348>)
     964:	68db      	ldr	r3, [r3, #12]
     966:	2b00      	cmp	r3, #0
     968:	d01c      	beq.n	9a4 <hif_handle_isr+0x130>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     96a:	4b94      	ldr	r3, [pc, #592]	; (bbc <hif_handle_isr+0x348>)
     96c:	68db      	ldr	r3, [r3, #12]
     96e:	aa04      	add	r2, sp, #16
     970:	7850      	ldrb	r0, [r2, #1]
     972:	b2c0      	uxtb	r0, r0
     974:	8851      	ldrh	r1, [r2, #2]
     976:	9a05      	ldr	r2, [sp, #20]
     978:	3208      	adds	r2, #8
     97a:	3908      	subs	r1, #8
     97c:	b289      	uxth	r1, r1
     97e:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
     980:	4b8e      	ldr	r3, [pc, #568]	; (bbc <hif_handle_isr+0x348>)
     982:	789b      	ldrb	r3, [r3, #2]
     984:	2b00      	cmp	r3, #0
     986:	d000      	beq.n	98a <hif_handle_isr+0x116>
     988:	e09d      	b.n	ac6 <hif_handle_isr+0x252>
	while(gstrHifCxt.u8Interrupt) 
     98a:	4643      	mov	r3, r8
     98c:	78db      	ldrb	r3, [r3, #3]
     98e:	2b00      	cmp	r3, #0
     990:	d100      	bne.n	994 <hif_handle_isr+0x120>
     992:	e157      	b.n	c44 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
     994:	464b      	mov	r3, r9
     996:	78db      	ldrb	r3, [r3, #3]
     998:	3b01      	subs	r3, #1
     99a:	b2db      	uxtb	r3, r3
     99c:	464a      	mov	r2, r9
     99e:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     9a0:	4e91      	ldr	r6, [pc, #580]	; (be8 <hif_handle_isr+0x374>)
     9a2:	e0d6      	b.n	b52 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
     9a4:	22ec      	movs	r2, #236	; 0xec
     9a6:	32ff      	adds	r2, #255	; 0xff
     9a8:	4986      	ldr	r1, [pc, #536]	; (bc4 <hif_handle_isr+0x350>)
     9aa:	4887      	ldr	r0, [pc, #540]	; (bc8 <hif_handle_isr+0x354>)
     9ac:	4b87      	ldr	r3, [pc, #540]	; (bcc <hif_handle_isr+0x358>)
     9ae:	4798      	blx	r3
     9b0:	488e      	ldr	r0, [pc, #568]	; (bec <hif_handle_isr+0x378>)
     9b2:	4b88      	ldr	r3, [pc, #544]	; (bd4 <hif_handle_isr+0x360>)
     9b4:	4798      	blx	r3
     9b6:	200d      	movs	r0, #13
     9b8:	4b87      	ldr	r3, [pc, #540]	; (bd8 <hif_handle_isr+0x364>)
     9ba:	4798      	blx	r3
     9bc:	e7e0      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfIpCb)
     9be:	4b7f      	ldr	r3, [pc, #508]	; (bbc <hif_handle_isr+0x348>)
     9c0:	691b      	ldr	r3, [r3, #16]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d00b      	beq.n	9de <hif_handle_isr+0x16a>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9c6:	4b7d      	ldr	r3, [pc, #500]	; (bbc <hif_handle_isr+0x348>)
     9c8:	691b      	ldr	r3, [r3, #16]
     9ca:	aa04      	add	r2, sp, #16
     9cc:	7850      	ldrb	r0, [r2, #1]
     9ce:	b2c0      	uxtb	r0, r0
     9d0:	8851      	ldrh	r1, [r2, #2]
     9d2:	9a05      	ldr	r2, [sp, #20]
     9d4:	3208      	adds	r2, #8
     9d6:	3908      	subs	r1, #8
     9d8:	b289      	uxth	r1, r1
     9da:	4798      	blx	r3
     9dc:	e7d0      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Scoket callback is not registered\n");
     9de:	22f4      	movs	r2, #244	; 0xf4
     9e0:	32ff      	adds	r2, #255	; 0xff
     9e2:	4978      	ldr	r1, [pc, #480]	; (bc4 <hif_handle_isr+0x350>)
     9e4:	4878      	ldr	r0, [pc, #480]	; (bc8 <hif_handle_isr+0x354>)
     9e6:	4b79      	ldr	r3, [pc, #484]	; (bcc <hif_handle_isr+0x358>)
     9e8:	4798      	blx	r3
     9ea:	4881      	ldr	r0, [pc, #516]	; (bf0 <hif_handle_isr+0x37c>)
     9ec:	4b79      	ldr	r3, [pc, #484]	; (bd4 <hif_handle_isr+0x360>)
     9ee:	4798      	blx	r3
     9f0:	200d      	movs	r0, #13
     9f2:	4b79      	ldr	r3, [pc, #484]	; (bd8 <hif_handle_isr+0x364>)
     9f4:	4798      	blx	r3
     9f6:	e7c3      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfOtaCb)
     9f8:	4b70      	ldr	r3, [pc, #448]	; (bbc <hif_handle_isr+0x348>)
     9fa:	695b      	ldr	r3, [r3, #20]
     9fc:	2b00      	cmp	r3, #0
     9fe:	d00b      	beq.n	a18 <hif_handle_isr+0x1a4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a00:	4b6e      	ldr	r3, [pc, #440]	; (bbc <hif_handle_isr+0x348>)
     a02:	695b      	ldr	r3, [r3, #20]
     a04:	aa04      	add	r2, sp, #16
     a06:	7850      	ldrb	r0, [r2, #1]
     a08:	b2c0      	uxtb	r0, r0
     a0a:	8851      	ldrh	r1, [r2, #2]
     a0c:	9a05      	ldr	r2, [sp, #20]
     a0e:	3208      	adds	r2, #8
     a10:	3908      	subs	r1, #8
     a12:	b289      	uxth	r1, r1
     a14:	4798      	blx	r3
     a16:	e7b3      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Ota callback is not registered\n");
     a18:	22fc      	movs	r2, #252	; 0xfc
     a1a:	32ff      	adds	r2, #255	; 0xff
     a1c:	4969      	ldr	r1, [pc, #420]	; (bc4 <hif_handle_isr+0x350>)
     a1e:	486a      	ldr	r0, [pc, #424]	; (bc8 <hif_handle_isr+0x354>)
     a20:	4b6a      	ldr	r3, [pc, #424]	; (bcc <hif_handle_isr+0x358>)
     a22:	4798      	blx	r3
     a24:	4873      	ldr	r0, [pc, #460]	; (bf4 <hif_handle_isr+0x380>)
     a26:	4b6b      	ldr	r3, [pc, #428]	; (bd4 <hif_handle_isr+0x360>)
     a28:	4798      	blx	r3
     a2a:	200d      	movs	r0, #13
     a2c:	4b6a      	ldr	r3, [pc, #424]	; (bd8 <hif_handle_isr+0x364>)
     a2e:	4798      	blx	r3
     a30:	e7a6      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfCryptoCb)
     a32:	4b62      	ldr	r3, [pc, #392]	; (bbc <hif_handle_isr+0x348>)
     a34:	6a1b      	ldr	r3, [r3, #32]
     a36:	2b00      	cmp	r3, #0
     a38:	d00b      	beq.n	a52 <hif_handle_isr+0x1de>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a3a:	4b60      	ldr	r3, [pc, #384]	; (bbc <hif_handle_isr+0x348>)
     a3c:	6a1b      	ldr	r3, [r3, #32]
     a3e:	aa04      	add	r2, sp, #16
     a40:	7850      	ldrb	r0, [r2, #1]
     a42:	b2c0      	uxtb	r0, r0
     a44:	8851      	ldrh	r1, [r2, #2]
     a46:	9a05      	ldr	r2, [sp, #20]
     a48:	3208      	adds	r2, #8
     a4a:	3908      	subs	r1, #8
     a4c:	b289      	uxth	r1, r1
     a4e:	4798      	blx	r3
     a50:	e796      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Crypto callback is not registered\n");
     a52:	2281      	movs	r2, #129	; 0x81
     a54:	0092      	lsls	r2, r2, #2
     a56:	495b      	ldr	r1, [pc, #364]	; (bc4 <hif_handle_isr+0x350>)
     a58:	485b      	ldr	r0, [pc, #364]	; (bc8 <hif_handle_isr+0x354>)
     a5a:	4b5c      	ldr	r3, [pc, #368]	; (bcc <hif_handle_isr+0x358>)
     a5c:	4798      	blx	r3
     a5e:	4866      	ldr	r0, [pc, #408]	; (bf8 <hif_handle_isr+0x384>)
     a60:	4b5c      	ldr	r3, [pc, #368]	; (bd4 <hif_handle_isr+0x360>)
     a62:	4798      	blx	r3
     a64:	200d      	movs	r0, #13
     a66:	4b5c      	ldr	r3, [pc, #368]	; (bd8 <hif_handle_isr+0x364>)
     a68:	4798      	blx	r3
     a6a:	e789      	b.n	980 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfSigmaCb)
     a6c:	4b53      	ldr	r3, [pc, #332]	; (bbc <hif_handle_isr+0x348>)
     a6e:	699b      	ldr	r3, [r3, #24]
     a70:	2b00      	cmp	r3, #0
     a72:	d00b      	beq.n	a8c <hif_handle_isr+0x218>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a74:	4b51      	ldr	r3, [pc, #324]	; (bbc <hif_handle_isr+0x348>)
     a76:	699b      	ldr	r3, [r3, #24]
     a78:	aa04      	add	r2, sp, #16
     a7a:	7850      	ldrb	r0, [r2, #1]
     a7c:	b2c0      	uxtb	r0, r0
     a7e:	8851      	ldrh	r1, [r2, #2]
     a80:	9a05      	ldr	r2, [sp, #20]
     a82:	3208      	adds	r2, #8
     a84:	3908      	subs	r1, #8
     a86:	b289      	uxth	r1, r1
     a88:	4798      	blx	r3
     a8a:	e779      	b.n	980 <hif_handle_isr+0x10c>
						M2M_ERR("Sigma callback is not registered\n");
     a8c:	4a5b      	ldr	r2, [pc, #364]	; (bfc <hif_handle_isr+0x388>)
     a8e:	494d      	ldr	r1, [pc, #308]	; (bc4 <hif_handle_isr+0x350>)
     a90:	484d      	ldr	r0, [pc, #308]	; (bc8 <hif_handle_isr+0x354>)
     a92:	4b4e      	ldr	r3, [pc, #312]	; (bcc <hif_handle_isr+0x358>)
     a94:	4798      	blx	r3
     a96:	485a      	ldr	r0, [pc, #360]	; (c00 <hif_handle_isr+0x38c>)
     a98:	4b4e      	ldr	r3, [pc, #312]	; (bd4 <hif_handle_isr+0x360>)
     a9a:	4798      	blx	r3
     a9c:	200d      	movs	r0, #13
     a9e:	4b4e      	ldr	r3, [pc, #312]	; (bd8 <hif_handle_isr+0x364>)
     aa0:	4798      	blx	r3
     aa2:	e76d      	b.n	980 <hif_handle_isr+0x10c>
				    if(gstrHifCxt.pfSslCb)
     aa4:	4b45      	ldr	r3, [pc, #276]	; (bbc <hif_handle_isr+0x348>)
     aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     aa8:	2b00      	cmp	r3, #0
     aaa:	d100      	bne.n	aae <hif_handle_isr+0x23a>
     aac:	e768      	b.n	980 <hif_handle_isr+0x10c>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     aae:	4b43      	ldr	r3, [pc, #268]	; (bbc <hif_handle_isr+0x348>)
     ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     ab2:	aa04      	add	r2, sp, #16
     ab4:	7850      	ldrb	r0, [r2, #1]
     ab6:	b2c0      	uxtb	r0, r0
     ab8:	8851      	ldrh	r1, [r2, #2]
     aba:	9a05      	ldr	r2, [sp, #20]
     abc:	3208      	adds	r2, #8
     abe:	3908      	subs	r1, #8
     ac0:	b289      	uxth	r1, r1
     ac2:	4798      	blx	r3
     ac4:	e75c      	b.n	980 <hif_handle_isr+0x10c>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
     ac6:	4a4f      	ldr	r2, [pc, #316]	; (c04 <hif_handle_isr+0x390>)
     ac8:	493e      	ldr	r1, [pc, #248]	; (bc4 <hif_handle_isr+0x350>)
     aca:	483f      	ldr	r0, [pc, #252]	; (bc8 <hif_handle_isr+0x354>)
     acc:	4c3f      	ldr	r4, [pc, #252]	; (bcc <hif_handle_isr+0x358>)
     ace:	47a0      	blx	r4
     ad0:	ab04      	add	r3, sp, #16
     ad2:	7819      	ldrb	r1, [r3, #0]
     ad4:	b2c9      	uxtb	r1, r1
     ad6:	785a      	ldrb	r2, [r3, #1]
     ad8:	b2d2      	uxtb	r2, r2
     ada:	484b      	ldr	r0, [pc, #300]	; (c08 <hif_handle_isr+0x394>)
     adc:	47a0      	blx	r4
     ade:	200d      	movs	r0, #13
     ae0:	4b3d      	ldr	r3, [pc, #244]	; (bd8 <hif_handle_isr+0x364>)
     ae2:	4798      	blx	r3
					ret = hif_set_rx_done();
     ae4:	4b49      	ldr	r3, [pc, #292]	; (c0c <hif_handle_isr+0x398>)
     ae6:	4798      	blx	r3
     ae8:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
     aea:	d127      	bne.n	b3c <hif_handle_isr+0x2c8>
     aec:	e74d      	b.n	98a <hif_handle_isr+0x116>
				M2M_ERR("(hif) Wrong Size\n");
     aee:	4a48      	ldr	r2, [pc, #288]	; (c10 <hif_handle_isr+0x39c>)
     af0:	4934      	ldr	r1, [pc, #208]	; (bc4 <hif_handle_isr+0x350>)
     af2:	4835      	ldr	r0, [pc, #212]	; (bc8 <hif_handle_isr+0x354>)
     af4:	4b35      	ldr	r3, [pc, #212]	; (bcc <hif_handle_isr+0x358>)
     af6:	4798      	blx	r3
     af8:	4846      	ldr	r0, [pc, #280]	; (c14 <hif_handle_isr+0x3a0>)
     afa:	4b36      	ldr	r3, [pc, #216]	; (bd4 <hif_handle_isr+0x360>)
     afc:	4798      	blx	r3
     afe:	200d      	movs	r0, #13
     b00:	4b35      	ldr	r3, [pc, #212]	; (bd8 <hif_handle_isr+0x364>)
     b02:	4798      	blx	r3
				ret = M2M_ERR_RCV;
     b04:	2402      	movs	r4, #2
     b06:	4264      	negs	r4, r4
     b08:	e018      	b.n	b3c <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
     b0a:	4a43      	ldr	r2, [pc, #268]	; (c18 <hif_handle_isr+0x3a4>)
     b0c:	492d      	ldr	r1, [pc, #180]	; (bc4 <hif_handle_isr+0x350>)
     b0e:	482e      	ldr	r0, [pc, #184]	; (bc8 <hif_handle_isr+0x354>)
     b10:	4c2e      	ldr	r4, [pc, #184]	; (bcc <hif_handle_isr+0x358>)
     b12:	47a0      	blx	r4
     b14:	9903      	ldr	r1, [sp, #12]
     b16:	4841      	ldr	r0, [pc, #260]	; (c1c <hif_handle_isr+0x3a8>)
     b18:	47a0      	blx	r4
     b1a:	200d      	movs	r0, #13
     b1c:	4b2e      	ldr	r3, [pc, #184]	; (bd8 <hif_handle_isr+0x364>)
     b1e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     b20:	240c      	movs	r4, #12
     b22:	4264      	negs	r4, r4
     b24:	e00a      	b.n	b3c <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
     b26:	4a3e      	ldr	r2, [pc, #248]	; (c20 <hif_handle_isr+0x3ac>)
     b28:	4926      	ldr	r1, [pc, #152]	; (bc4 <hif_handle_isr+0x350>)
     b2a:	4827      	ldr	r0, [pc, #156]	; (bc8 <hif_handle_isr+0x354>)
     b2c:	4b27      	ldr	r3, [pc, #156]	; (bcc <hif_handle_isr+0x358>)
     b2e:	4798      	blx	r3
     b30:	483c      	ldr	r0, [pc, #240]	; (c24 <hif_handle_isr+0x3b0>)
     b32:	4b28      	ldr	r3, [pc, #160]	; (bd4 <hif_handle_isr+0x360>)
     b34:	4798      	blx	r3
     b36:	200d      	movs	r0, #13
     b38:	4b27      	ldr	r3, [pc, #156]	; (bd8 <hif_handle_isr+0x364>)
     b3a:	4798      	blx	r3
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} 
			else 
			{
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     b3c:	4a3a      	ldr	r2, [pc, #232]	; (c28 <hif_handle_isr+0x3b4>)
     b3e:	493b      	ldr	r1, [pc, #236]	; (c2c <hif_handle_isr+0x3b8>)
     b40:	4821      	ldr	r0, [pc, #132]	; (bc8 <hif_handle_isr+0x354>)
     b42:	4f22      	ldr	r7, [pc, #136]	; (bcc <hif_handle_isr+0x358>)
     b44:	47b8      	blx	r7
     b46:	0021      	movs	r1, r4
     b48:	4839      	ldr	r0, [pc, #228]	; (c30 <hif_handle_isr+0x3bc>)
     b4a:	47b8      	blx	r7
     b4c:	200d      	movs	r0, #13
     b4e:	4b22      	ldr	r3, [pc, #136]	; (bd8 <hif_handle_isr+0x364>)
     b50:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     b52:	a903      	add	r1, sp, #12
     b54:	4837      	ldr	r0, [pc, #220]	; (c34 <hif_handle_isr+0x3c0>)
     b56:	47b0      	blx	r6
     b58:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
     b5a:	d1e4      	bne.n	b26 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
     b5c:	9b03      	ldr	r3, [sp, #12]
     b5e:	07db      	lsls	r3, r3, #31
     b60:	d5d3      	bpl.n	b0a <hif_handle_isr+0x296>
			nm_bsp_interrupt_ctrl(0);
     b62:	2000      	movs	r0, #0
     b64:	4b1e      	ldr	r3, [pc, #120]	; (be0 <hif_handle_isr+0x36c>)
     b66:	4798      	blx	r3
			reg &= ~NBIT0;
     b68:	2301      	movs	r3, #1
     b6a:	9903      	ldr	r1, [sp, #12]
     b6c:	4399      	bics	r1, r3
     b6e:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     b70:	4830      	ldr	r0, [pc, #192]	; (c34 <hif_handle_isr+0x3c0>)
     b72:	4b31      	ldr	r3, [pc, #196]	; (c38 <hif_handle_isr+0x3c4>)
     b74:	4798      	blx	r3
     b76:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
     b78:	d1e0      	bne.n	b3c <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
     b7a:	2201      	movs	r2, #1
     b7c:	4b0f      	ldr	r3, [pc, #60]	; (bbc <hif_handle_isr+0x348>)
     b7e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
     b80:	9b03      	ldr	r3, [sp, #12]
     b82:	049d      	lsls	r5, r3, #18
     b84:	0d2d      	lsrs	r5, r5, #20
			if(size > 0) 
     b86:	d0b2      	beq.n	aee <hif_handle_isr+0x27a>
				uint32 address = 0;
     b88:	2300      	movs	r3, #0
     b8a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     b8c:	a905      	add	r1, sp, #20
     b8e:	482b      	ldr	r0, [pc, #172]	; (c3c <hif_handle_isr+0x3c8>)
     b90:	4b15      	ldr	r3, [pc, #84]	; (be8 <hif_handle_isr+0x374>)
     b92:	4798      	blx	r3
     b94:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     b96:	d100      	bne.n	b9a <hif_handle_isr+0x326>
     b98:	e675      	b.n	886 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     b9a:	22e6      	movs	r2, #230	; 0xe6
     b9c:	0052      	lsls	r2, r2, #1
     b9e:	4909      	ldr	r1, [pc, #36]	; (bc4 <hif_handle_isr+0x350>)
     ba0:	4809      	ldr	r0, [pc, #36]	; (bc8 <hif_handle_isr+0x354>)
     ba2:	4b0a      	ldr	r3, [pc, #40]	; (bcc <hif_handle_isr+0x358>)
     ba4:	4798      	blx	r3
     ba6:	4826      	ldr	r0, [pc, #152]	; (c40 <hif_handle_isr+0x3cc>)
     ba8:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <hif_handle_isr+0x360>)
     baa:	4798      	blx	r3
     bac:	200d      	movs	r0, #13
     bae:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <hif_handle_isr+0x364>)
     bb0:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     bb2:	2001      	movs	r0, #1
     bb4:	4b0a      	ldr	r3, [pc, #40]	; (be0 <hif_handle_isr+0x36c>)
     bb6:	4798      	blx	r3
     bb8:	e7c0      	b.n	b3c <hif_handle_isr+0x2c8>
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	200009c8 	.word	0x200009c8
     bc0:	00001995 	.word	0x00001995
     bc4:	000088c4 	.word	0x000088c4
     bc8:	00008870 	.word	0x00008870
     bcc:	0000762d 	.word	0x0000762d
     bd0:	00008a20 	.word	0x00008a20
     bd4:	00007749 	.word	0x00007749
     bd8:	00007661 	.word	0x00007661
     bdc:	0000891c 	.word	0x0000891c
     be0:	0000023d 	.word	0x0000023d
     be4:	00008934 	.word	0x00008934
     be8:	0000197d 	.word	0x0000197d
     bec:	00008974 	.word	0x00008974
     bf0:	00008994 	.word	0x00008994
     bf4:	000089b8 	.word	0x000089b8
     bf8:	000089d8 	.word	0x000089d8
     bfc:	0000020b 	.word	0x0000020b
     c00:	000089fc 	.word	0x000089fc
     c04:	0000021a 	.word	0x0000021a
     c08:	00008a38 	.word	0x00008a38
     c0c:	00000571 	.word	0x00000571
     c10:	00000221 	.word	0x00000221
     c14:	00008a64 	.word	0x00008a64
     c18:	00000229 	.word	0x00000229
     c1c:	00008a78 	.word	0x00008a78
     c20:	00000232 	.word	0x00000232
     c24:	00008a94 	.word	0x00008a94
     c28:	00000256 	.word	0x00000256
     c2c:	000088cc 	.word	0x000088cc
     c30:	00008ab8 	.word	0x00008ab8
     c34:	00001070 	.word	0x00001070
     c38:	00001989 	.word	0x00001989
     c3c:	00001084 	.word	0x00001084
     c40:	000088f8 	.word	0x000088f8
			}
		}
	}

	return ret;
}
     c44:	2000      	movs	r0, #0
     c46:	b007      	add	sp, #28
     c48:	bc0c      	pop	{r2, r3}
     c4a:	4690      	mov	r8, r2
     c4c:	4699      	mov	r9, r3
     c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c50 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     c50:	b570      	push	{r4, r5, r6, lr}
     c52:	0014      	movs	r4, r2
     c54:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     c56:	2800      	cmp	r0, #0
     c58:	d003      	beq.n	c62 <hif_receive+0x12>
     c5a:	2900      	cmp	r1, #0
     c5c:	d001      	beq.n	c62 <hif_receive+0x12>
     c5e:	2a00      	cmp	r2, #0
     c60:	d112      	bne.n	c88 <hif_receive+0x38>
	{
		if(isDone)
     c62:	2d00      	cmp	r5, #0
     c64:	d002      	beq.n	c6c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     c66:	4b27      	ldr	r3, [pc, #156]	; (d04 <hif_receive+0xb4>)
     c68:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     c6a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     c6c:	4a26      	ldr	r2, [pc, #152]	; (d08 <hif_receive+0xb8>)
     c6e:	4927      	ldr	r1, [pc, #156]	; (d0c <hif_receive+0xbc>)
     c70:	4827      	ldr	r0, [pc, #156]	; (d10 <hif_receive+0xc0>)
     c72:	4b28      	ldr	r3, [pc, #160]	; (d14 <hif_receive+0xc4>)
     c74:	4798      	blx	r3
     c76:	4828      	ldr	r0, [pc, #160]	; (d18 <hif_receive+0xc8>)
     c78:	4b28      	ldr	r3, [pc, #160]	; (d1c <hif_receive+0xcc>)
     c7a:	4798      	blx	r3
     c7c:	200d      	movs	r0, #13
     c7e:	4b28      	ldr	r3, [pc, #160]	; (d20 <hif_receive+0xd0>)
     c80:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     c82:	200c      	movs	r0, #12
     c84:	4240      	negs	r0, r0
     c86:	e7f0      	b.n	c6a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     c88:	4b26      	ldr	r3, [pc, #152]	; (d24 <hif_receive+0xd4>)
     c8a:	689b      	ldr	r3, [r3, #8]
     c8c:	429a      	cmp	r2, r3
     c8e:	d81a      	bhi.n	cc6 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     c90:	4b24      	ldr	r3, [pc, #144]	; (d24 <hif_receive+0xd4>)
     c92:	685b      	ldr	r3, [r3, #4]
     c94:	4298      	cmp	r0, r3
     c96:	d326      	bcc.n	ce6 <hif_receive+0x96>
     c98:	1886      	adds	r6, r0, r2
     c9a:	4a22      	ldr	r2, [pc, #136]	; (d24 <hif_receive+0xd4>)
     c9c:	6853      	ldr	r3, [r2, #4]
     c9e:	6892      	ldr	r2, [r2, #8]
     ca0:	189b      	adds	r3, r3, r2
     ca2:	429e      	cmp	r6, r3
     ca4:	d81f      	bhi.n	ce6 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     ca6:	0022      	movs	r2, r4
     ca8:	4b1f      	ldr	r3, [pc, #124]	; (d28 <hif_receive+0xd8>)
     caa:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     cac:	2800      	cmp	r0, #0
     cae:	d1dc      	bne.n	c6a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     cb0:	4a1c      	ldr	r2, [pc, #112]	; (d24 <hif_receive+0xd4>)
     cb2:	6853      	ldr	r3, [r2, #4]
     cb4:	6892      	ldr	r2, [r2, #8]
     cb6:	189b      	adds	r3, r3, r2
     cb8:	429e      	cmp	r6, r3
     cba:	d001      	beq.n	cc0 <hif_receive+0x70>
     cbc:	2d00      	cmp	r5, #0
     cbe:	d0d4      	beq.n	c6a <hif_receive+0x1a>
		ret = hif_set_rx_done();
     cc0:	4b10      	ldr	r3, [pc, #64]	; (d04 <hif_receive+0xb4>)
     cc2:	4798      	blx	r3
     cc4:	e7d1      	b.n	c6a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     cc6:	4a19      	ldr	r2, [pc, #100]	; (d2c <hif_receive+0xdc>)
     cc8:	4910      	ldr	r1, [pc, #64]	; (d0c <hif_receive+0xbc>)
     cca:	4811      	ldr	r0, [pc, #68]	; (d10 <hif_receive+0xc0>)
     ccc:	4d11      	ldr	r5, [pc, #68]	; (d14 <hif_receive+0xc4>)
     cce:	47a8      	blx	r5
     cd0:	4b14      	ldr	r3, [pc, #80]	; (d24 <hif_receive+0xd4>)
     cd2:	689a      	ldr	r2, [r3, #8]
     cd4:	0021      	movs	r1, r4
     cd6:	4816      	ldr	r0, [pc, #88]	; (d30 <hif_receive+0xe0>)
     cd8:	47a8      	blx	r5
     cda:	200d      	movs	r0, #13
     cdc:	4b10      	ldr	r3, [pc, #64]	; (d20 <hif_receive+0xd0>)
     cde:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     ce0:	200c      	movs	r0, #12
     ce2:	4240      	negs	r0, r0
		goto ERR1;
     ce4:	e7c1      	b.n	c6a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     ce6:	4a13      	ldr	r2, [pc, #76]	; (d34 <hif_receive+0xe4>)
     ce8:	4908      	ldr	r1, [pc, #32]	; (d0c <hif_receive+0xbc>)
     cea:	4809      	ldr	r0, [pc, #36]	; (d10 <hif_receive+0xc0>)
     cec:	4b09      	ldr	r3, [pc, #36]	; (d14 <hif_receive+0xc4>)
     cee:	4798      	blx	r3
     cf0:	4811      	ldr	r0, [pc, #68]	; (d38 <hif_receive+0xe8>)
     cf2:	4b0a      	ldr	r3, [pc, #40]	; (d1c <hif_receive+0xcc>)
     cf4:	4798      	blx	r3
     cf6:	200d      	movs	r0, #13
     cf8:	4b09      	ldr	r3, [pc, #36]	; (d20 <hif_receive+0xd0>)
     cfa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     cfc:	200c      	movs	r0, #12
     cfe:	4240      	negs	r0, r0
		goto ERR1;
     d00:	e7b3      	b.n	c6a <hif_receive+0x1a>
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000571 	.word	0x00000571
     d08:	00000277 	.word	0x00000277
     d0c:	000088dc 	.word	0x000088dc
     d10:	00008870 	.word	0x00008870
     d14:	0000762d 	.word	0x0000762d
     d18:	00008ae8 	.word	0x00008ae8
     d1c:	00007749 	.word	0x00007749
     d20:	00007661 	.word	0x00007661
     d24:	200009c8 	.word	0x200009c8
     d28:	00001995 	.word	0x00001995
     d2c:	0000027f 	.word	0x0000027f
     d30:	00008b08 	.word	0x00008b08
     d34:	00000285 	.word	0x00000285
     d38:	00008b50 	.word	0x00008b50

00000d3c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     d3c:	b570      	push	{r4, r5, r6, lr}
     d3e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     d40:	2807      	cmp	r0, #7
     d42:	d81f      	bhi.n	d84 <hif_register_cb+0x48>
     d44:	0083      	lsls	r3, r0, #2
     d46:	4a16      	ldr	r2, [pc, #88]	; (da0 <hif_register_cb+0x64>)
     d48:	58d3      	ldr	r3, [r2, r3]
     d4a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     d4c:	4b15      	ldr	r3, [pc, #84]	; (da4 <hif_register_cb+0x68>)
     d4e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     d50:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     d52:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     d54:	4b13      	ldr	r3, [pc, #76]	; (da4 <hif_register_cb+0x68>)
     d56:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
     d58:	2000      	movs	r0, #0
			break;
     d5a:	e7fa      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     d5c:	4b11      	ldr	r3, [pc, #68]	; (da4 <hif_register_cb+0x68>)
     d5e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     d60:	2000      	movs	r0, #0
			break;
     d62:	e7f6      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     d64:	4b0f      	ldr	r3, [pc, #60]	; (da4 <hif_register_cb+0x68>)
     d66:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     d68:	2000      	movs	r0, #0
			break;
     d6a:	e7f2      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     d6c:	4b0d      	ldr	r3, [pc, #52]	; (da4 <hif_register_cb+0x68>)
     d6e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     d70:	2000      	movs	r0, #0
			break;
     d72:	e7ee      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     d74:	4b0b      	ldr	r3, [pc, #44]	; (da4 <hif_register_cb+0x68>)
     d76:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     d78:	2000      	movs	r0, #0
			break;
     d7a:	e7ea      	b.n	d52 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     d7c:	4b09      	ldr	r3, [pc, #36]	; (da4 <hif_register_cb+0x68>)
     d7e:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     d80:	2000      	movs	r0, #0
			break;
     d82:	e7e6      	b.n	d52 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     d84:	4a08      	ldr	r2, [pc, #32]	; (da8 <hif_register_cb+0x6c>)
     d86:	4909      	ldr	r1, [pc, #36]	; (dac <hif_register_cb+0x70>)
     d88:	4809      	ldr	r0, [pc, #36]	; (db0 <hif_register_cb+0x74>)
     d8a:	4d0a      	ldr	r5, [pc, #40]	; (db4 <hif_register_cb+0x78>)
     d8c:	47a8      	blx	r5
     d8e:	0021      	movs	r1, r4
     d90:	4809      	ldr	r0, [pc, #36]	; (db8 <hif_register_cb+0x7c>)
     d92:	47a8      	blx	r5
     d94:	200d      	movs	r0, #13
     d96:	4b09      	ldr	r3, [pc, #36]	; (dbc <hif_register_cb+0x80>)
     d98:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     d9a:	200c      	movs	r0, #12
     d9c:	4240      	negs	r0, r0
			break;
     d9e:	e7d8      	b.n	d52 <hif_register_cb+0x16>
     da0:	00008898 	.word	0x00008898
     da4:	200009c8 	.word	0x200009c8
     da8:	000002bd 	.word	0x000002bd
     dac:	000088e8 	.word	0x000088e8
     db0:	00008870 	.word	0x00008870
     db4:	0000762d 	.word	0x0000762d
     db8:	00008b94 	.word	0x00008b94
     dbc:	00007661 	.word	0x00007661

00000dc0 <hif_init>:
{
     dc0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     dc2:	2228      	movs	r2, #40	; 0x28
     dc4:	2100      	movs	r1, #0
     dc6:	4806      	ldr	r0, [pc, #24]	; (de0 <hif_init+0x20>)
     dc8:	4b06      	ldr	r3, [pc, #24]	; (de4 <hif_init+0x24>)
     dca:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     dcc:	4806      	ldr	r0, [pc, #24]	; (de8 <hif_init+0x28>)
     dce:	4b07      	ldr	r3, [pc, #28]	; (dec <hif_init+0x2c>)
     dd0:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     dd2:	4907      	ldr	r1, [pc, #28]	; (df0 <hif_init+0x30>)
     dd4:	2003      	movs	r0, #3
     dd6:	4b07      	ldr	r3, [pc, #28]	; (df4 <hif_init+0x34>)
     dd8:	4798      	blx	r3
}
     dda:	2000      	movs	r0, #0
     ddc:	bd10      	pop	{r4, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	200009c8 	.word	0x200009c8
     de4:	00000531 	.word	0x00000531
     de8:	0000055d 	.word	0x0000055d
     dec:	000001e5 	.word	0x000001e5
     df0:	0000056d 	.word	0x0000056d
     df4:	00000d3d 	.word	0x00000d3d

00000df8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     df8:	b530      	push	{r4, r5, lr}
     dfa:	b09f      	sub	sp, #124	; 0x7c
     dfc:	0004      	movs	r4, r0
     dfe:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     e00:	282c      	cmp	r0, #44	; 0x2c
     e02:	d02f      	beq.n	e64 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     e04:	281b      	cmp	r0, #27
     e06:	d03d      	beq.n	e84 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     e08:	2806      	cmp	r0, #6
     e0a:	d04b      	beq.n	ea4 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     e0c:	280e      	cmp	r0, #14
     e0e:	d027      	beq.n	e60 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e10:	2832      	cmp	r0, #50	; 0x32
     e12:	d057      	beq.n	ec4 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e14:	282f      	cmp	r0, #47	; 0x2f
     e16:	d065      	beq.n	ee4 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e18:	2834      	cmp	r0, #52	; 0x34
     e1a:	d100      	bne.n	e1e <m2m_wifi_cb+0x26>
     e1c:	e077      	b.n	f0e <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     e1e:	2811      	cmp	r0, #17
     e20:	d100      	bne.n	e24 <m2m_wifi_cb+0x2c>
     e22:	e096      	b.n	f52 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     e24:	2813      	cmp	r0, #19
     e26:	d100      	bne.n	e2a <m2m_wifi_cb+0x32>
     e28:	e0ac      	b.n	f84 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     e2a:	2804      	cmp	r0, #4
     e2c:	d100      	bne.n	e30 <m2m_wifi_cb+0x38>
     e2e:	e0bb      	b.n	fa8 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     e30:	2865      	cmp	r0, #101	; 0x65
     e32:	d100      	bne.n	e36 <m2m_wifi_cb+0x3e>
     e34:	e0ca      	b.n	fcc <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     e36:	2809      	cmp	r0, #9
     e38:	d100      	bne.n	e3c <m2m_wifi_cb+0x44>
     e3a:	e0d9      	b.n	ff0 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     e3c:	282a      	cmp	r0, #42	; 0x2a
     e3e:	d100      	bne.n	e42 <m2m_wifi_cb+0x4a>
     e40:	e0e8      	b.n	1014 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     e42:	2820      	cmp	r0, #32
     e44:	d100      	bne.n	e48 <m2m_wifi_cb+0x50>
     e46:	e0f7      	b.n	1038 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     e48:	2295      	movs	r2, #149	; 0x95
     e4a:	0052      	lsls	r2, r2, #1
     e4c:	4989      	ldr	r1, [pc, #548]	; (1074 <m2m_wifi_cb+0x27c>)
     e4e:	488a      	ldr	r0, [pc, #552]	; (1078 <m2m_wifi_cb+0x280>)
     e50:	4d8a      	ldr	r5, [pc, #552]	; (107c <m2m_wifi_cb+0x284>)
     e52:	47a8      	blx	r5
     e54:	0021      	movs	r1, r4
     e56:	488a      	ldr	r0, [pc, #552]	; (1080 <m2m_wifi_cb+0x288>)
     e58:	47a8      	blx	r5
     e5a:	200d      	movs	r0, #13
     e5c:	4b89      	ldr	r3, [pc, #548]	; (1084 <m2m_wifi_cb+0x28c>)
     e5e:	4798      	blx	r3
	}
}
     e60:	b01f      	add	sp, #124	; 0x7c
     e62:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     e64:	2300      	movs	r3, #0
     e66:	2204      	movs	r2, #4
     e68:	a903      	add	r1, sp, #12
     e6a:	0028      	movs	r0, r5
     e6c:	4c86      	ldr	r4, [pc, #536]	; (1088 <m2m_wifi_cb+0x290>)
     e6e:	47a0      	blx	r4
     e70:	2800      	cmp	r0, #0
     e72:	d1f5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     e74:	4b85      	ldr	r3, [pc, #532]	; (108c <m2m_wifi_cb+0x294>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	2b00      	cmp	r3, #0
     e7a:	d0f1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     e7c:	a903      	add	r1, sp, #12
     e7e:	302c      	adds	r0, #44	; 0x2c
     e80:	4798      	blx	r3
     e82:	e7ed      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     e84:	2300      	movs	r3, #0
     e86:	2208      	movs	r2, #8
     e88:	a903      	add	r1, sp, #12
     e8a:	0028      	movs	r0, r5
     e8c:	4c7e      	ldr	r4, [pc, #504]	; (1088 <m2m_wifi_cb+0x290>)
     e8e:	47a0      	blx	r4
     e90:	2800      	cmp	r0, #0
     e92:	d1e5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     e94:	4b7d      	ldr	r3, [pc, #500]	; (108c <m2m_wifi_cb+0x294>)
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	2b00      	cmp	r3, #0
     e9a:	d0e1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     e9c:	a903      	add	r1, sp, #12
     e9e:	301b      	adds	r0, #27
     ea0:	4798      	blx	r3
     ea2:	e7dd      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     ea4:	2301      	movs	r3, #1
     ea6:	2230      	movs	r2, #48	; 0x30
     ea8:	a903      	add	r1, sp, #12
     eaa:	0028      	movs	r0, r5
     eac:	4c76      	ldr	r4, [pc, #472]	; (1088 <m2m_wifi_cb+0x290>)
     eae:	47a0      	blx	r4
     eb0:	2800      	cmp	r0, #0
     eb2:	d1d5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     eb4:	4b75      	ldr	r3, [pc, #468]	; (108c <m2m_wifi_cb+0x294>)
     eb6:	681b      	ldr	r3, [r3, #0]
     eb8:	2b00      	cmp	r3, #0
     eba:	d0d1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     ebc:	a903      	add	r1, sp, #12
     ebe:	3006      	adds	r0, #6
     ec0:	4798      	blx	r3
     ec2:	e7cd      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     ec4:	2300      	movs	r3, #0
     ec6:	2214      	movs	r2, #20
     ec8:	a903      	add	r1, sp, #12
     eca:	0028      	movs	r0, r5
     ecc:	4c6e      	ldr	r4, [pc, #440]	; (1088 <m2m_wifi_cb+0x290>)
     ece:	47a0      	blx	r4
     ed0:	2800      	cmp	r0, #0
     ed2:	d1c5      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     ed4:	4b6d      	ldr	r3, [pc, #436]	; (108c <m2m_wifi_cb+0x294>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	2b00      	cmp	r3, #0
     eda:	d0c1      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     edc:	a903      	add	r1, sp, #12
     ede:	3032      	adds	r0, #50	; 0x32
     ee0:	4798      	blx	r3
     ee2:	e7bd      	b.n	e60 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     ee4:	2264      	movs	r2, #100	; 0x64
     ee6:	2100      	movs	r1, #0
     ee8:	a803      	add	r0, sp, #12
     eea:	4b69      	ldr	r3, [pc, #420]	; (1090 <m2m_wifi_cb+0x298>)
     eec:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     eee:	2300      	movs	r3, #0
     ef0:	2264      	movs	r2, #100	; 0x64
     ef2:	a903      	add	r1, sp, #12
     ef4:	0028      	movs	r0, r5
     ef6:	4c64      	ldr	r4, [pc, #400]	; (1088 <m2m_wifi_cb+0x290>)
     ef8:	47a0      	blx	r4
     efa:	2800      	cmp	r0, #0
     efc:	d1b0      	bne.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     efe:	4b63      	ldr	r3, [pc, #396]	; (108c <m2m_wifi_cb+0x294>)
     f00:	681b      	ldr	r3, [r3, #0]
     f02:	2b00      	cmp	r3, #0
     f04:	d0ac      	beq.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     f06:	a903      	add	r1, sp, #12
     f08:	302f      	adds	r0, #47	; 0x2f
     f0a:	4798      	blx	r3
     f0c:	e7a8      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     f0e:	2300      	movs	r3, #0
     f10:	2204      	movs	r2, #4
     f12:	a903      	add	r1, sp, #12
     f14:	0028      	movs	r0, r5
     f16:	4c5c      	ldr	r4, [pc, #368]	; (1088 <m2m_wifi_cb+0x290>)
     f18:	47a0      	blx	r4
     f1a:	2800      	cmp	r0, #0
     f1c:	d1a0      	bne.n	e60 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     f1e:	485d      	ldr	r0, [pc, #372]	; (1094 <m2m_wifi_cb+0x29c>)
     f20:	4d56      	ldr	r5, [pc, #344]	; (107c <m2m_wifi_cb+0x284>)
     f22:	47a8      	blx	r5
     f24:	9c03      	ldr	r4, [sp, #12]
     f26:	0a23      	lsrs	r3, r4, #8
     f28:	20ff      	movs	r0, #255	; 0xff
     f2a:	4003      	ands	r3, r0
     f2c:	0c22      	lsrs	r2, r4, #16
     f2e:	4002      	ands	r2, r0
     f30:	0e21      	lsrs	r1, r4, #24
     f32:	4020      	ands	r0, r4
     f34:	9000      	str	r0, [sp, #0]
     f36:	4858      	ldr	r0, [pc, #352]	; (1098 <m2m_wifi_cb+0x2a0>)
     f38:	47a8      	blx	r5
     f3a:	200d      	movs	r0, #13
     f3c:	4b51      	ldr	r3, [pc, #324]	; (1084 <m2m_wifi_cb+0x28c>)
     f3e:	4798      	blx	r3
			if (gpfAppWifiCb)
     f40:	4b52      	ldr	r3, [pc, #328]	; (108c <m2m_wifi_cb+0x294>)
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	2b00      	cmp	r3, #0
     f46:	d100      	bne.n	f4a <m2m_wifi_cb+0x152>
     f48:	e78a      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     f4a:	2100      	movs	r1, #0
     f4c:	2034      	movs	r0, #52	; 0x34
     f4e:	4798      	blx	r3
     f50:	e786      	b.n	e60 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
     f52:	2200      	movs	r2, #0
     f54:	4b51      	ldr	r3, [pc, #324]	; (109c <m2m_wifi_cb+0x2a4>)
     f56:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     f58:	2300      	movs	r3, #0
     f5a:	3204      	adds	r2, #4
     f5c:	a903      	add	r1, sp, #12
     f5e:	0028      	movs	r0, r5
     f60:	4c49      	ldr	r4, [pc, #292]	; (1088 <m2m_wifi_cb+0x290>)
     f62:	47a0      	blx	r4
     f64:	2800      	cmp	r0, #0
     f66:	d000      	beq.n	f6a <m2m_wifi_cb+0x172>
     f68:	e77a      	b.n	e60 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
     f6a:	ab03      	add	r3, sp, #12
     f6c:	781a      	ldrb	r2, [r3, #0]
     f6e:	4b4c      	ldr	r3, [pc, #304]	; (10a0 <m2m_wifi_cb+0x2a8>)
     f70:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     f72:	4b46      	ldr	r3, [pc, #280]	; (108c <m2m_wifi_cb+0x294>)
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	2b00      	cmp	r3, #0
     f78:	d100      	bne.n	f7c <m2m_wifi_cb+0x184>
     f7a:	e771      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     f7c:	a903      	add	r1, sp, #12
     f7e:	3011      	adds	r0, #17
     f80:	4798      	blx	r3
     f82:	e76d      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     f84:	2300      	movs	r3, #0
     f86:	222c      	movs	r2, #44	; 0x2c
     f88:	a903      	add	r1, sp, #12
     f8a:	0028      	movs	r0, r5
     f8c:	4c3e      	ldr	r4, [pc, #248]	; (1088 <m2m_wifi_cb+0x290>)
     f8e:	47a0      	blx	r4
     f90:	2800      	cmp	r0, #0
     f92:	d000      	beq.n	f96 <m2m_wifi_cb+0x19e>
     f94:	e764      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f96:	4b3d      	ldr	r3, [pc, #244]	; (108c <m2m_wifi_cb+0x294>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d100      	bne.n	fa0 <m2m_wifi_cb+0x1a8>
     f9e:	e75f      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
     fa0:	a903      	add	r1, sp, #12
     fa2:	3013      	adds	r0, #19
     fa4:	4798      	blx	r3
     fa6:	e75b      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     fa8:	2300      	movs	r3, #0
     faa:	2204      	movs	r2, #4
     fac:	a91c      	add	r1, sp, #112	; 0x70
     fae:	0028      	movs	r0, r5
     fb0:	4c35      	ldr	r4, [pc, #212]	; (1088 <m2m_wifi_cb+0x290>)
     fb2:	47a0      	blx	r4
     fb4:	2800      	cmp	r0, #0
     fb6:	d000      	beq.n	fba <m2m_wifi_cb+0x1c2>
     fb8:	e752      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     fba:	4b34      	ldr	r3, [pc, #208]	; (108c <m2m_wifi_cb+0x294>)
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d100      	bne.n	fc4 <m2m_wifi_cb+0x1cc>
     fc2:	e74d      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
     fc4:	a91c      	add	r1, sp, #112	; 0x70
     fc6:	3004      	adds	r0, #4
     fc8:	4798      	blx	r3
     fca:	e749      	b.n	e60 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     fcc:	2300      	movs	r3, #0
     fce:	2204      	movs	r2, #4
     fd0:	a91c      	add	r1, sp, #112	; 0x70
     fd2:	0028      	movs	r0, r5
     fd4:	4c2c      	ldr	r4, [pc, #176]	; (1088 <m2m_wifi_cb+0x290>)
     fd6:	47a0      	blx	r4
     fd8:	2800      	cmp	r0, #0
     fda:	d000      	beq.n	fde <m2m_wifi_cb+0x1e6>
     fdc:	e740      	b.n	e60 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     fde:	4b2b      	ldr	r3, [pc, #172]	; (108c <m2m_wifi_cb+0x294>)
     fe0:	681b      	ldr	r3, [r3, #0]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d100      	bne.n	fe8 <m2m_wifi_cb+0x1f0>
     fe6:	e73b      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
     fe8:	a91c      	add	r1, sp, #112	; 0x70
     fea:	3065      	adds	r0, #101	; 0x65
     fec:	4798      	blx	r3
     fee:	e737      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
     ff0:	2301      	movs	r3, #1
     ff2:	2264      	movs	r2, #100	; 0x64
     ff4:	a903      	add	r1, sp, #12
     ff6:	0028      	movs	r0, r5
     ff8:	4c23      	ldr	r4, [pc, #140]	; (1088 <m2m_wifi_cb+0x290>)
     ffa:	47a0      	blx	r4
     ffc:	2800      	cmp	r0, #0
     ffe:	d000      	beq.n	1002 <m2m_wifi_cb+0x20a>
    1000:	e72e      	b.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1002:	4b22      	ldr	r3, [pc, #136]	; (108c <m2m_wifi_cb+0x294>)
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	2b00      	cmp	r3, #0
    1008:	d100      	bne.n	100c <m2m_wifi_cb+0x214>
    100a:	e729      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    100c:	a903      	add	r1, sp, #12
    100e:	3009      	adds	r0, #9
    1010:	4798      	blx	r3
    1012:	e725      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1014:	2301      	movs	r3, #1
    1016:	2204      	movs	r2, #4
    1018:	a903      	add	r1, sp, #12
    101a:	0028      	movs	r0, r5
    101c:	4c1a      	ldr	r4, [pc, #104]	; (1088 <m2m_wifi_cb+0x290>)
    101e:	47a0      	blx	r4
    1020:	2800      	cmp	r0, #0
    1022:	d000      	beq.n	1026 <m2m_wifi_cb+0x22e>
    1024:	e71c      	b.n	e60 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1026:	4b19      	ldr	r3, [pc, #100]	; (108c <m2m_wifi_cb+0x294>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d100      	bne.n	1030 <m2m_wifi_cb+0x238>
    102e:	e717      	b.n	e60 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1030:	a903      	add	r1, sp, #12
    1032:	302a      	adds	r0, #42	; 0x2a
    1034:	4798      	blx	r3
    1036:	e713      	b.n	e60 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1038:	2300      	movs	r3, #0
    103a:	2208      	movs	r2, #8
    103c:	a903      	add	r1, sp, #12
    103e:	0028      	movs	r0, r5
    1040:	4c11      	ldr	r4, [pc, #68]	; (1088 <m2m_wifi_cb+0x290>)
    1042:	47a0      	blx	r4
    1044:	2800      	cmp	r0, #0
    1046:	d000      	beq.n	104a <m2m_wifi_cb+0x252>
    1048:	e70a      	b.n	e60 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    104a:	ab03      	add	r3, sp, #12
    104c:	889a      	ldrh	r2, [r3, #4]
    104e:	0028      	movs	r0, r5
    1050:	3008      	adds	r0, #8
    1052:	2301      	movs	r3, #1
    1054:	9903      	ldr	r1, [sp, #12]
    1056:	4c0c      	ldr	r4, [pc, #48]	; (1088 <m2m_wifi_cb+0x290>)
    1058:	47a0      	blx	r4
    105a:	2800      	cmp	r0, #0
    105c:	d000      	beq.n	1060 <m2m_wifi_cb+0x268>
    105e:	e6ff      	b.n	e60 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    1060:	4b0a      	ldr	r3, [pc, #40]	; (108c <m2m_wifi_cb+0x294>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	2b00      	cmp	r3, #0
    1066:	d100      	bne.n	106a <m2m_wifi_cb+0x272>
    1068:	e6fa      	b.n	e60 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    106a:	a903      	add	r1, sp, #12
    106c:	3020      	adds	r0, #32
    106e:	4798      	blx	r3
    1070:	e6f6      	b.n	e60 <m2m_wifi_cb+0x68>
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00008bd8 	.word	0x00008bd8
    1078:	00008870 	.word	0x00008870
    107c:	0000762d 	.word	0x0000762d
    1080:	00008c28 	.word	0x00008c28
    1084:	00007661 	.word	0x00007661
    1088:	00000c51 	.word	0x00000c51
    108c:	20000094 	.word	0x20000094
    1090:	00000531 	.word	0x00000531
    1094:	00008ba0 	.word	0x00008ba0
    1098:	00008c08 	.word	0x00008c08
    109c:	20000099 	.word	0x20000099
    10a0:	20000098 	.word	0x20000098

000010a4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    10a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a6:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    10a8:	2201      	movs	r2, #1
    10aa:	230f      	movs	r3, #15
    10ac:	446b      	add	r3, sp
    10ae:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) 
    10b0:	2800      	cmp	r0, #0
    10b2:	d061      	beq.n	1178 <m2m_wifi_init+0xd4>
	{
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    10b4:	6802      	ldr	r2, [r0, #0]
    10b6:	4b32      	ldr	r3, [pc, #200]	; (1180 <m2m_wifi_init+0xdc>)
    10b8:	601a      	str	r2, [r3, #0]
#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
*/

	gu8scanInProgress = 0;
    10ba:	2200      	movs	r2, #0
    10bc:	4b31      	ldr	r3, [pc, #196]	; (1184 <m2m_wifi_init+0xe0>)
    10be:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    10c0:	200f      	movs	r0, #15
    10c2:	4468      	add	r0, sp
    10c4:	4b30      	ldr	r3, [pc, #192]	; (1188 <m2m_wifi_init+0xe4>)
    10c6:	4798      	blx	r3
    10c8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    10ca:	d002      	beq.n	10d2 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    10cc:	0020      	movs	r0, r4
    10ce:	b00f      	add	sp, #60	; 0x3c
    10d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    10d2:	2000      	movs	r0, #0
    10d4:	4b2d      	ldr	r3, [pc, #180]	; (118c <m2m_wifi_init+0xe8>)
    10d6:	4798      	blx	r3
    10d8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    10da:	d149      	bne.n	1170 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    10dc:	492c      	ldr	r1, [pc, #176]	; (1190 <m2m_wifi_init+0xec>)
    10de:	2001      	movs	r0, #1
    10e0:	4b2c      	ldr	r3, [pc, #176]	; (1194 <m2m_wifi_init+0xf0>)
    10e2:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    10e4:	ae04      	add	r6, sp, #16
    10e6:	0030      	movs	r0, r6
    10e8:	4b2b      	ldr	r3, [pc, #172]	; (1198 <m2m_wifi_init+0xf4>)
    10ea:	4798      	blx	r3
    10ec:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    10ee:	482b      	ldr	r0, [pc, #172]	; (119c <m2m_wifi_init+0xf8>)
    10f0:	4d2b      	ldr	r5, [pc, #172]	; (11a0 <m2m_wifi_init+0xfc>)
    10f2:	47a8      	blx	r5
    10f4:	79b3      	ldrb	r3, [r6, #6]
    10f6:	7972      	ldrb	r2, [r6, #5]
    10f8:	7931      	ldrb	r1, [r6, #4]
    10fa:	8c30      	ldrh	r0, [r6, #32]
    10fc:	9000      	str	r0, [sp, #0]
    10fe:	4829      	ldr	r0, [pc, #164]	; (11a4 <m2m_wifi_init+0x100>)
    1100:	47a8      	blx	r5
    1102:	200d      	movs	r0, #13
    1104:	4f28      	ldr	r7, [pc, #160]	; (11a8 <m2m_wifi_init+0x104>)
    1106:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1108:	4824      	ldr	r0, [pc, #144]	; (119c <m2m_wifi_init+0xf8>)
    110a:	47a8      	blx	r5
    110c:	2226      	movs	r2, #38	; 0x26
    110e:	446a      	add	r2, sp
    1110:	211a      	movs	r1, #26
    1112:	4469      	add	r1, sp
    1114:	4825      	ldr	r0, [pc, #148]	; (11ac <m2m_wifi_init+0x108>)
    1116:	47a8      	blx	r5
    1118:	200d      	movs	r0, #13
    111a:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    111c:	481f      	ldr	r0, [pc, #124]	; (119c <m2m_wifi_init+0xf8>)
    111e:	47a8      	blx	r5
    1120:	7a73      	ldrb	r3, [r6, #9]
    1122:	7a32      	ldrb	r2, [r6, #8]
    1124:	79f1      	ldrb	r1, [r6, #7]
    1126:	4822      	ldr	r0, [pc, #136]	; (11b0 <m2m_wifi_init+0x10c>)
    1128:	47a8      	blx	r5
    112a:	200d      	movs	r0, #13
    112c:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    112e:	481b      	ldr	r0, [pc, #108]	; (119c <m2m_wifi_init+0xf8>)
    1130:	47a8      	blx	r5
    1132:	2302      	movs	r3, #2
    1134:	2205      	movs	r2, #5
    1136:	2113      	movs	r1, #19
    1138:	481e      	ldr	r0, [pc, #120]	; (11b4 <m2m_wifi_init+0x110>)
    113a:	47a8      	blx	r5
    113c:	200d      	movs	r0, #13
    113e:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1140:	4816      	ldr	r0, [pc, #88]	; (119c <m2m_wifi_init+0xf8>)
    1142:	47a8      	blx	r5
    1144:	4a1c      	ldr	r2, [pc, #112]	; (11b8 <m2m_wifi_init+0x114>)
    1146:	491d      	ldr	r1, [pc, #116]	; (11bc <m2m_wifi_init+0x118>)
    1148:	481d      	ldr	r0, [pc, #116]	; (11c0 <m2m_wifi_init+0x11c>)
    114a:	47a8      	blx	r5
    114c:	200d      	movs	r0, #13
    114e:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1150:	0023      	movs	r3, r4
    1152:	330d      	adds	r3, #13
    1154:	d1ba      	bne.n	10cc <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    1156:	22f8      	movs	r2, #248	; 0xf8
    1158:	0052      	lsls	r2, r2, #1
    115a:	491a      	ldr	r1, [pc, #104]	; (11c4 <m2m_wifi_init+0x120>)
    115c:	481a      	ldr	r0, [pc, #104]	; (11c8 <m2m_wifi_init+0x124>)
    115e:	4b10      	ldr	r3, [pc, #64]	; (11a0 <m2m_wifi_init+0xfc>)
    1160:	4798      	blx	r3
    1162:	481a      	ldr	r0, [pc, #104]	; (11cc <m2m_wifi_init+0x128>)
    1164:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <m2m_wifi_init+0x12c>)
    1166:	4798      	blx	r3
    1168:	200d      	movs	r0, #13
    116a:	4b0f      	ldr	r3, [pc, #60]	; (11a8 <m2m_wifi_init+0x104>)
    116c:	4798      	blx	r3
    116e:	e7ad      	b.n	10cc <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    1170:	2000      	movs	r0, #0
    1172:	4b18      	ldr	r3, [pc, #96]	; (11d4 <m2m_wifi_init+0x130>)
    1174:	4798      	blx	r3
    1176:	e7a9      	b.n	10cc <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1178:	240c      	movs	r4, #12
    117a:	4264      	negs	r4, r4
    117c:	e7a6      	b.n	10cc <m2m_wifi_init+0x28>
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	20000094 	.word	0x20000094
    1184:	20000099 	.word	0x20000099
    1188:	00001b49 	.word	0x00001b49
    118c:	00000dc1 	.word	0x00000dc1
    1190:	00000df9 	.word	0x00000df9
    1194:	00000d3d 	.word	0x00000d3d
    1198:	00001a65 	.word	0x00001a65
    119c:	00008ba0 	.word	0x00008ba0
    11a0:	0000762d 	.word	0x0000762d
    11a4:	00008ce4 	.word	0x00008ce4
    11a8:	00007661 	.word	0x00007661
    11ac:	00008d0c 	.word	0x00008d0c
    11b0:	00008d28 	.word	0x00008d28
    11b4:	00008d4c 	.word	0x00008d4c
    11b8:	00008d64 	.word	0x00008d64
    11bc:	00008d70 	.word	0x00008d70
    11c0:	00008d7c 	.word	0x00008d7c
    11c4:	00008be4 	.word	0x00008be4
    11c8:	00008870 	.word	0x00008870
    11cc:	00008d94 	.word	0x00008d94
    11d0:	00007749 	.word	0x00007749
    11d4:	00001c1d 	.word	0x00001c1d

000011d8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    11d8:	b510      	push	{r4, lr}
	return hif_handle_isr();
    11da:	4b01      	ldr	r3, [pc, #4]	; (11e0 <m2m_wifi_handle_events+0x8>)
    11dc:	4798      	blx	r3
}
    11de:	bd10      	pop	{r4, pc}
    11e0:	00000875 	.word	0x00000875

000011e4 <m2m_wifi_connect_sc>:
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    11e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e6:	46ce      	mov	lr, r9
    11e8:	4647      	mov	r7, r8
    11ea:	b580      	push	{r7, lr}
    11ec:	b0a3      	sub	sp, #140	; 0x8c
    11ee:	9005      	str	r0, [sp, #20]
    11f0:	000c      	movs	r4, r1
    11f2:	0015      	movs	r5, r2
    11f4:	001f      	movs	r7, r3
    11f6:	ab2a      	add	r3, sp, #168	; 0xa8
    11f8:	881b      	ldrh	r3, [r3, #0]
    11fa:	4699      	mov	r9, r3
    11fc:	ab2b      	add	r3, sp, #172	; 0xac
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1202:	2a01      	cmp	r2, #1
    1204:	d003      	beq.n	120e <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    1206:	2f00      	cmp	r7, #0
    1208:	d040      	beq.n	128c <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    120a:	2a02      	cmp	r2, #2
    120c:	d04c      	beq.n	12a8 <m2m_wifi_connect_sc+0xc4>
				i++;
			}
		}
	}
	
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    120e:	1e63      	subs	r3, r4, #1
    1210:	2b1f      	cmp	r3, #31
    1212:	d900      	bls.n	1216 <m2m_wifi_connect_sc+0x32>
    1214:	e078      	b.n	1308 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1216:	464b      	mov	r3, r9
    1218:	3b01      	subs	r3, #1
    121a:	b29b      	uxth	r3, r3
    121c:	2b0d      	cmp	r3, #13
    121e:	d903      	bls.n	1228 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1220:	464b      	mov	r3, r9
    1222:	2bff      	cmp	r3, #255	; 0xff
    1224:	d000      	beq.n	1228 <m2m_wifi_connect_sc+0x44>
    1226:	e07d      	b.n	1324 <m2m_wifi_connect_sc+0x140>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
	}

	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1228:	ae07      	add	r6, sp, #28
    122a:	0022      	movs	r2, r4
    122c:	9905      	ldr	r1, [sp, #20]
    122e:	205a      	movs	r0, #90	; 0x5a
    1230:	ab02      	add	r3, sp, #8
    1232:	469c      	mov	ip, r3
    1234:	4460      	add	r0, ip
    1236:	4b78      	ldr	r3, [pc, #480]	; (1418 <m2m_wifi_connect_sc+0x234>)
    1238:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen] = 0;
    123a:	1934      	adds	r4, r6, r4
    123c:	3446      	adds	r4, #70	; 0x46
    123e:	2300      	movs	r3, #0
    1240:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch = NM_BSP_B_L_16(u16Ch);
    1242:	3344      	adds	r3, #68	; 0x44
    1244:	464a      	mov	r2, r9
    1246:	52f2      	strh	r2, [r6, r3]
	
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred = u8NoSaveCred ? 1:0;
    1248:	4643      	mov	r3, r8
    124a:	1e5a      	subs	r2, r3, #1
    124c:	4193      	sbcs	r3, r2
    124e:	2267      	movs	r2, #103	; 0x67
    1250:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType	= u8SecType;
    1252:	2341      	movs	r3, #65	; 0x41
    1254:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1256:	2d03      	cmp	r5, #3
    1258:	d100      	bne.n	125c <m2m_wifi_connect_sc+0x78>
    125a:	e071      	b.n	1340 <m2m_wifi_connect_sc+0x15c>
			goto ERR1;
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
	}
	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    125c:	2d02      	cmp	r5, #2
    125e:	d100      	bne.n	1262 <m2m_wifi_connect_sc+0x7e>
    1260:	e0aa      	b.n	13b8 <m2m_wifi_connect_sc+0x1d4>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1262:	2d04      	cmp	r5, #4
    1264:	d100      	bne.n	1268 <m2m_wifi_connect_sc+0x84>
    1266:	e0c2      	b.n	13ee <m2m_wifi_connect_sc+0x20a>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN);
    1268:	2d01      	cmp	r5, #1
    126a:	d000      	beq.n	126e <m2m_wifi_connect_sc+0x8a>
    126c:	e0c5      	b.n	13fa <m2m_wifi_connect_sc+0x216>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    126e:	2300      	movs	r3, #0
    1270:	9302      	str	r3, [sp, #8]
    1272:	9301      	str	r3, [sp, #4]
    1274:	9300      	str	r3, [sp, #0]
    1276:	336c      	adds	r3, #108	; 0x6c
    1278:	aa07      	add	r2, sp, #28
    127a:	2128      	movs	r1, #40	; 0x28
    127c:	2001      	movs	r0, #1
    127e:	4c67      	ldr	r4, [pc, #412]	; (141c <m2m_wifi_connect_sc+0x238>)
    1280:	47a0      	blx	r4

ERR1:
	return ret;
}
    1282:	b023      	add	sp, #140	; 0x8c
    1284:	bc0c      	pop	{r2, r3}
    1286:	4690      	mov	r8, r2
    1288:	4699      	mov	r9, r3
    128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    128c:	4a64      	ldr	r2, [pc, #400]	; (1420 <m2m_wifi_connect_sc+0x23c>)
    128e:	4965      	ldr	r1, [pc, #404]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1290:	4865      	ldr	r0, [pc, #404]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1292:	4b66      	ldr	r3, [pc, #408]	; (142c <m2m_wifi_connect_sc+0x248>)
    1294:	4798      	blx	r3
    1296:	4866      	ldr	r0, [pc, #408]	; (1430 <m2m_wifi_connect_sc+0x24c>)
    1298:	4b66      	ldr	r3, [pc, #408]	; (1434 <m2m_wifi_connect_sc+0x250>)
    129a:	4798      	blx	r3
    129c:	200d      	movs	r0, #13
    129e:	4b66      	ldr	r3, [pc, #408]	; (1438 <m2m_wifi_connect_sc+0x254>)
    12a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    12a2:	200c      	movs	r0, #12
    12a4:	4240      	negs	r0, r0
			goto ERR1;
    12a6:	e7ec      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    12a8:	0038      	movs	r0, r7
    12aa:	4b64      	ldr	r3, [pc, #400]	; (143c <m2m_wifi_connect_sc+0x258>)
    12ac:	4798      	blx	r3
    12ae:	2840      	cmp	r0, #64	; 0x40
    12b0:	d1ad      	bne.n	120e <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    12b2:	783b      	ldrb	r3, [r7, #0]
    12b4:	001a      	movs	r2, r3
    12b6:	3a30      	subs	r2, #48	; 0x30
    12b8:	2a36      	cmp	r2, #54	; 0x36
    12ba:	d817      	bhi.n	12ec <m2m_wifi_connect_sc+0x108>
    12bc:	3a0a      	subs	r2, #10
    12be:	2a06      	cmp	r2, #6
    12c0:	d914      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12c2:	3b47      	subs	r3, #71	; 0x47
    12c4:	2b19      	cmp	r3, #25
    12c6:	d911      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12c8:	1c7a      	adds	r2, r7, #1
    12ca:	0038      	movs	r0, r7
    12cc:	3040      	adds	r0, #64	; 0x40
    12ce:	7813      	ldrb	r3, [r2, #0]
    12d0:	0019      	movs	r1, r3
    12d2:	3930      	subs	r1, #48	; 0x30
    12d4:	2936      	cmp	r1, #54	; 0x36
    12d6:	d809      	bhi.n	12ec <m2m_wifi_connect_sc+0x108>
    12d8:	390a      	subs	r1, #10
    12da:	2906      	cmp	r1, #6
    12dc:	d906      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12de:	3b47      	subs	r3, #71	; 0x47
    12e0:	2b19      	cmp	r3, #25
    12e2:	d903      	bls.n	12ec <m2m_wifi_connect_sc+0x108>
    12e4:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    12e6:	4282      	cmp	r2, r0
    12e8:	d1f1      	bne.n	12ce <m2m_wifi_connect_sc+0xea>
    12ea:	e790      	b.n	120e <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    12ec:	4a54      	ldr	r2, [pc, #336]	; (1440 <m2m_wifi_connect_sc+0x25c>)
    12ee:	494d      	ldr	r1, [pc, #308]	; (1424 <m2m_wifi_connect_sc+0x240>)
    12f0:	484d      	ldr	r0, [pc, #308]	; (1428 <m2m_wifi_connect_sc+0x244>)
    12f2:	4b4e      	ldr	r3, [pc, #312]	; (142c <m2m_wifi_connect_sc+0x248>)
    12f4:	4798      	blx	r3
    12f6:	4853      	ldr	r0, [pc, #332]	; (1444 <m2m_wifi_connect_sc+0x260>)
    12f8:	4b4e      	ldr	r3, [pc, #312]	; (1434 <m2m_wifi_connect_sc+0x250>)
    12fa:	4798      	blx	r3
    12fc:	200d      	movs	r0, #13
    12fe:	4b4e      	ldr	r3, [pc, #312]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1300:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1302:	200c      	movs	r0, #12
    1304:	4240      	negs	r0, r0
					goto ERR1;
    1306:	e7bc      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1308:	4a4f      	ldr	r2, [pc, #316]	; (1448 <m2m_wifi_connect_sc+0x264>)
    130a:	4946      	ldr	r1, [pc, #280]	; (1424 <m2m_wifi_connect_sc+0x240>)
    130c:	4846      	ldr	r0, [pc, #280]	; (1428 <m2m_wifi_connect_sc+0x244>)
    130e:	4b47      	ldr	r3, [pc, #284]	; (142c <m2m_wifi_connect_sc+0x248>)
    1310:	4798      	blx	r3
    1312:	484e      	ldr	r0, [pc, #312]	; (144c <m2m_wifi_connect_sc+0x268>)
    1314:	4b47      	ldr	r3, [pc, #284]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1316:	4798      	blx	r3
    1318:	200d      	movs	r0, #13
    131a:	4b47      	ldr	r3, [pc, #284]	; (1438 <m2m_wifi_connect_sc+0x254>)
    131c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    131e:	200c      	movs	r0, #12
    1320:	4240      	negs	r0, r0
		goto ERR1;
    1322:	e7ae      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    1324:	4a4a      	ldr	r2, [pc, #296]	; (1450 <m2m_wifi_connect_sc+0x26c>)
    1326:	493f      	ldr	r1, [pc, #252]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1328:	483f      	ldr	r0, [pc, #252]	; (1428 <m2m_wifi_connect_sc+0x244>)
    132a:	4b40      	ldr	r3, [pc, #256]	; (142c <m2m_wifi_connect_sc+0x248>)
    132c:	4798      	blx	r3
    132e:	4849      	ldr	r0, [pc, #292]	; (1454 <m2m_wifi_connect_sc+0x270>)
    1330:	4b40      	ldr	r3, [pc, #256]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1332:	4798      	blx	r3
    1334:	200d      	movs	r0, #13
    1336:	4b40      	ldr	r3, [pc, #256]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1338:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    133a:	200c      	movs	r0, #12
    133c:	4240      	negs	r0, r0
			goto ERR1;
    133e:	e7a0      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1340:	783b      	ldrb	r3, [r7, #0]
    1342:	3b01      	subs	r3, #1
    1344:	b2db      	uxtb	r3, r3
    1346:	aa07      	add	r2, sp, #28
    1348:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    134a:	2b03      	cmp	r3, #3
    134c:	d817      	bhi.n	137e <m2m_wifi_connect_sc+0x19a>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    134e:	787a      	ldrb	r2, [r7, #1]
    1350:	1e51      	subs	r1, r2, #1
    1352:	ab07      	add	r3, sp, #28
    1354:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1356:	2310      	movs	r3, #16
    1358:	0011      	movs	r1, r2
    135a:	4399      	bics	r1, r3
    135c:	290b      	cmp	r1, #11
    135e:	d01d      	beq.n	139c <m2m_wifi_connect_sc+0x1b8>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1360:	4a3d      	ldr	r2, [pc, #244]	; (1458 <m2m_wifi_connect_sc+0x274>)
    1362:	4930      	ldr	r1, [pc, #192]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1364:	4830      	ldr	r0, [pc, #192]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1366:	4c31      	ldr	r4, [pc, #196]	; (142c <m2m_wifi_connect_sc+0x248>)
    1368:	47a0      	blx	r4
    136a:	ab07      	add	r3, sp, #28
    136c:	7859      	ldrb	r1, [r3, #1]
    136e:	483b      	ldr	r0, [pc, #236]	; (145c <m2m_wifi_connect_sc+0x278>)
    1370:	47a0      	blx	r4
    1372:	200d      	movs	r0, #13
    1374:	4b30      	ldr	r3, [pc, #192]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1376:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1378:	200c      	movs	r0, #12
    137a:	4240      	negs	r0, r0
			goto ERR1;
    137c:	e781      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    137e:	4a38      	ldr	r2, [pc, #224]	; (1460 <m2m_wifi_connect_sc+0x27c>)
    1380:	4928      	ldr	r1, [pc, #160]	; (1424 <m2m_wifi_connect_sc+0x240>)
    1382:	4829      	ldr	r0, [pc, #164]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1384:	4c29      	ldr	r4, [pc, #164]	; (142c <m2m_wifi_connect_sc+0x248>)
    1386:	47a0      	blx	r4
    1388:	ab07      	add	r3, sp, #28
    138a:	7819      	ldrb	r1, [r3, #0]
    138c:	4835      	ldr	r0, [pc, #212]	; (1464 <m2m_wifi_connect_sc+0x280>)
    138e:	47a0      	blx	r4
    1390:	200d      	movs	r0, #13
    1392:	4b29      	ldr	r3, [pc, #164]	; (1438 <m2m_wifi_connect_sc+0x254>)
    1394:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1396:	200c      	movs	r0, #12
    1398:	4240      	negs	r0, r0
			goto ERR1;
    139a:	e772      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    139c:	1cb9      	adds	r1, r7, #2
    139e:	2016      	movs	r0, #22
    13a0:	ab02      	add	r3, sp, #8
    13a2:	469c      	mov	ip, r3
    13a4:	4460      	add	r0, ip
    13a6:	4b1c      	ldr	r3, [pc, #112]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13a8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    13aa:	787b      	ldrb	r3, [r7, #1]
    13ac:	aa07      	add	r2, sp, #28
    13ae:	4694      	mov	ip, r2
    13b0:	4463      	add	r3, ip
    13b2:	2200      	movs	r2, #0
    13b4:	709a      	strb	r2, [r3, #2]
    13b6:	e75a      	b.n	126e <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    13b8:	0038      	movs	r0, r7
    13ba:	4b20      	ldr	r3, [pc, #128]	; (143c <m2m_wifi_connect_sc+0x258>)
    13bc:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    13be:	1e43      	subs	r3, r0, #1
    13c0:	b29b      	uxth	r3, r3
    13c2:	2b3f      	cmp	r3, #63	; 0x3f
    13c4:	d805      	bhi.n	13d2 <m2m_wifi_connect_sc+0x1ee>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    13c6:	1c42      	adds	r2, r0, #1
    13c8:	0039      	movs	r1, r7
    13ca:	a807      	add	r0, sp, #28
    13cc:	4b12      	ldr	r3, [pc, #72]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13ce:	4798      	blx	r3
    13d0:	e74d      	b.n	126e <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    13d2:	4a25      	ldr	r2, [pc, #148]	; (1468 <m2m_wifi_connect_sc+0x284>)
    13d4:	4913      	ldr	r1, [pc, #76]	; (1424 <m2m_wifi_connect_sc+0x240>)
    13d6:	4814      	ldr	r0, [pc, #80]	; (1428 <m2m_wifi_connect_sc+0x244>)
    13d8:	4b14      	ldr	r3, [pc, #80]	; (142c <m2m_wifi_connect_sc+0x248>)
    13da:	4798      	blx	r3
    13dc:	4823      	ldr	r0, [pc, #140]	; (146c <m2m_wifi_connect_sc+0x288>)
    13de:	4b15      	ldr	r3, [pc, #84]	; (1434 <m2m_wifi_connect_sc+0x250>)
    13e0:	4798      	blx	r3
    13e2:	200d      	movs	r0, #13
    13e4:	4b14      	ldr	r3, [pc, #80]	; (1438 <m2m_wifi_connect_sc+0x254>)
    13e6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13e8:	200c      	movs	r0, #12
    13ea:	4240      	negs	r0, r0
			goto ERR1;
    13ec:	e749      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    13ee:	223e      	movs	r2, #62	; 0x3e
    13f0:	0039      	movs	r1, r7
    13f2:	a807      	add	r0, sp, #28
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <m2m_wifi_connect_sc+0x234>)
    13f6:	4798      	blx	r3
    13f8:	e739      	b.n	126e <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    13fa:	4a1d      	ldr	r2, [pc, #116]	; (1470 <m2m_wifi_connect_sc+0x28c>)
    13fc:	4909      	ldr	r1, [pc, #36]	; (1424 <m2m_wifi_connect_sc+0x240>)
    13fe:	480a      	ldr	r0, [pc, #40]	; (1428 <m2m_wifi_connect_sc+0x244>)
    1400:	4b0a      	ldr	r3, [pc, #40]	; (142c <m2m_wifi_connect_sc+0x248>)
    1402:	4798      	blx	r3
    1404:	481b      	ldr	r0, [pc, #108]	; (1474 <m2m_wifi_connect_sc+0x290>)
    1406:	4b0b      	ldr	r3, [pc, #44]	; (1434 <m2m_wifi_connect_sc+0x250>)
    1408:	4798      	blx	r3
    140a:	200d      	movs	r0, #13
    140c:	4b0a      	ldr	r3, [pc, #40]	; (1438 <m2m_wifi_connect_sc+0x254>)
    140e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1410:	200c      	movs	r0, #12
    1412:	4240      	negs	r0, r0
		goto ERR1;
    1414:	e735      	b.n	1282 <m2m_wifi_connect_sc+0x9e>
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	0000051d 	.word	0x0000051d
    141c:	00000645 	.word	0x00000645
    1420:	0000021f 	.word	0x0000021f
    1424:	00008bf4 	.word	0x00008bf4
    1428:	00008870 	.word	0x00008870
    142c:	0000762d 	.word	0x0000762d
    1430:	00008c3c 	.word	0x00008c3c
    1434:	00007749 	.word	0x00007749
    1438:	00007661 	.word	0x00007661
    143c:	00000541 	.word	0x00000541
    1440:	0000022b 	.word	0x0000022b
    1444:	00008c50 	.word	0x00008c50
    1448:	00000236 	.word	0x00000236
    144c:	00008c5c 	.word	0x00008c5c
    1450:	0000023f 	.word	0x0000023f
    1454:	00008c70 	.word	0x00008c70
    1458:	0000025d 	.word	0x0000025d
    145c:	00008c98 	.word	0x00008c98
    1460:	00000256 	.word	0x00000256
    1464:	00008c7c 	.word	0x00008c7c
    1468:	00000269 	.word	0x00000269
    146c:	00008cb4 	.word	0x00008cb4
    1470:	00000276 	.word	0x00000276
    1474:	00008cd0 	.word	0x00008cd0

00001478 <m2m_wifi_connect>:
{
    1478:	b530      	push	{r4, r5, lr}
    147a:	b083      	sub	sp, #12
    147c:	ac06      	add	r4, sp, #24
    147e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1480:	2500      	movs	r5, #0
    1482:	9501      	str	r5, [sp, #4]
    1484:	9400      	str	r4, [sp, #0]
    1486:	4c02      	ldr	r4, [pc, #8]	; (1490 <m2m_wifi_connect+0x18>)
    1488:	47a0      	blx	r4
}
    148a:	b003      	add	sp, #12
    148c:	bd30      	pop	{r4, r5, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	000011e5 	.word	0x000011e5

00001494 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1494:	2000      	movs	r0, #0
    1496:	4770      	bx	lr

00001498 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    1498:	b5f0      	push	{r4, r5, r6, r7, lr}
    149a:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    149c:	2580      	movs	r5, #128	; 0x80
    149e:	006d      	lsls	r5, r5, #1
    14a0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    14a2:	24a5      	movs	r4, #165	; 0xa5
    14a4:	0164      	lsls	r4, r4, #5
    14a6:	4f08      	ldr	r7, [pc, #32]	; (14c8 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    14a8:	4e08      	ldr	r6, [pc, #32]	; (14cc <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    14aa:	0029      	movs	r1, r5
    14ac:	0020      	movs	r0, r4
    14ae:	47b8      	blx	r7
			uint32 reg = 0;
    14b0:	2300      	movs	r3, #0
    14b2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    14b4:	a901      	add	r1, sp, #4
    14b6:	0020      	movs	r0, r4
    14b8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    14ba:	2800      	cmp	r0, #0
    14bc:	d1f5      	bne.n	14aa <chip_apply_conf+0x12>
				if(reg == val32)
    14be:	9b01      	ldr	r3, [sp, #4]
    14c0:	429d      	cmp	r5, r3
    14c2:	d1f2      	bne.n	14aa <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    14c4:	b003      	add	sp, #12
    14c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c8:	00001989 	.word	0x00001989
    14cc:	0000197d 	.word	0x0000197d

000014d0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    14d0:	b500      	push	{lr}
    14d2:	b083      	sub	sp, #12
	uint32 reg = 0;
    14d4:	2300      	movs	r3, #0
    14d6:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    14d8:	a901      	add	r1, sp, #4
    14da:	4811      	ldr	r0, [pc, #68]	; (1520 <enable_interrupts+0x50>)
    14dc:	4b11      	ldr	r3, [pc, #68]	; (1524 <enable_interrupts+0x54>)
    14de:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    14e0:	2800      	cmp	r0, #0
    14e2:	d001      	beq.n	14e8 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    14e4:	b003      	add	sp, #12
    14e6:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    14e8:	2180      	movs	r1, #128	; 0x80
    14ea:	0049      	lsls	r1, r1, #1
    14ec:	9b01      	ldr	r3, [sp, #4]
    14ee:	4319      	orrs	r1, r3
    14f0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    14f2:	480b      	ldr	r0, [pc, #44]	; (1520 <enable_interrupts+0x50>)
    14f4:	4b0c      	ldr	r3, [pc, #48]	; (1528 <enable_interrupts+0x58>)
    14f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    14f8:	2800      	cmp	r0, #0
    14fa:	d1f3      	bne.n	14e4 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    14fc:	a901      	add	r1, sp, #4
    14fe:	20d0      	movs	r0, #208	; 0xd0
    1500:	0140      	lsls	r0, r0, #5
    1502:	4b08      	ldr	r3, [pc, #32]	; (1524 <enable_interrupts+0x54>)
    1504:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1506:	2800      	cmp	r0, #0
    1508:	d1ec      	bne.n	14e4 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    150a:	2180      	movs	r1, #128	; 0x80
    150c:	0249      	lsls	r1, r1, #9
    150e:	9b01      	ldr	r3, [sp, #4]
    1510:	4319      	orrs	r1, r3
    1512:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    1514:	20d0      	movs	r0, #208	; 0xd0
    1516:	0140      	lsls	r0, r0, #5
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <enable_interrupts+0x58>)
    151a:	4798      	blx	r3
    151c:	e7e2      	b.n	14e4 <enable_interrupts+0x14>
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	00001408 	.word	0x00001408
    1524:	0000197d 	.word	0x0000197d
    1528:	00001989 	.word	0x00001989

0000152c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    152c:	b510      	push	{r4, lr}
    152e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    1530:	4b28      	ldr	r3, [pc, #160]	; (15d4 <nmi_get_chipid+0xa8>)
    1532:	681c      	ldr	r4, [r3, #0]
    1534:	2c00      	cmp	r4, #0
    1536:	d004      	beq.n	1542 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    1538:	4b26      	ldr	r3, [pc, #152]	; (15d4 <nmi_get_chipid+0xa8>)
    153a:	681c      	ldr	r4, [r3, #0]
}
    153c:	0020      	movs	r0, r4
    153e:	b002      	add	sp, #8
    1540:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    1542:	0019      	movs	r1, r3
    1544:	2080      	movs	r0, #128	; 0x80
    1546:	0140      	lsls	r0, r0, #5
    1548:	4b23      	ldr	r3, [pc, #140]	; (15d8 <nmi_get_chipid+0xac>)
    154a:	4798      	blx	r3
    154c:	2800      	cmp	r0, #0
    154e:	d003      	beq.n	1558 <nmi_get_chipid+0x2c>
			chipid = 0;
    1550:	2200      	movs	r2, #0
    1552:	4b20      	ldr	r3, [pc, #128]	; (15d4 <nmi_get_chipid+0xa8>)
    1554:	601a      	str	r2, [r3, #0]
			return 0;
    1556:	e7f1      	b.n	153c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1558:	a901      	add	r1, sp, #4
    155a:	4820      	ldr	r0, [pc, #128]	; (15dc <nmi_get_chipid+0xb0>)
    155c:	4b1e      	ldr	r3, [pc, #120]	; (15d8 <nmi_get_chipid+0xac>)
    155e:	4798      	blx	r3
    1560:	2800      	cmp	r0, #0
    1562:	d003      	beq.n	156c <nmi_get_chipid+0x40>
			chipid = 0;
    1564:	2200      	movs	r2, #0
    1566:	4b1b      	ldr	r3, [pc, #108]	; (15d4 <nmi_get_chipid+0xa8>)
    1568:	601a      	str	r2, [r3, #0]
			return 0;
    156a:	e7e7      	b.n	153c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    156c:	4b19      	ldr	r3, [pc, #100]	; (15d4 <nmi_get_chipid+0xa8>)
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	4a1b      	ldr	r2, [pc, #108]	; (15e0 <nmi_get_chipid+0xb4>)
    1572:	4293      	cmp	r3, r2
    1574:	d00e      	beq.n	1594 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    1576:	4a1b      	ldr	r2, [pc, #108]	; (15e4 <nmi_get_chipid+0xb8>)
    1578:	4293      	cmp	r3, r2
    157a:	d012      	beq.n	15a2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    157c:	4a1a      	ldr	r2, [pc, #104]	; (15e8 <nmi_get_chipid+0xbc>)
    157e:	4293      	cmp	r3, r2
    1580:	d01c      	beq.n	15bc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    1582:	4914      	ldr	r1, [pc, #80]	; (15d4 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    1584:	4a19      	ldr	r2, [pc, #100]	; (15ec <nmi_get_chipid+0xc0>)
    1586:	680b      	ldr	r3, [r1, #0]
    1588:	401a      	ands	r2, r3
		chipid |= 0x050000;
    158a:	23a0      	movs	r3, #160	; 0xa0
    158c:	02db      	lsls	r3, r3, #11
    158e:	4313      	orrs	r3, r2
    1590:	600b      	str	r3, [r1, #0]
    1592:	e7d1      	b.n	1538 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    1594:	9b01      	ldr	r3, [sp, #4]
    1596:	2b01      	cmp	r3, #1
    1598:	d0f3      	beq.n	1582 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    159a:	4a15      	ldr	r2, [pc, #84]	; (15f0 <nmi_get_chipid+0xc4>)
    159c:	4b0d      	ldr	r3, [pc, #52]	; (15d4 <nmi_get_chipid+0xa8>)
    159e:	601a      	str	r2, [r3, #0]
    15a0:	e7ef      	b.n	1582 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    15a2:	9b01      	ldr	r3, [sp, #4]
    15a4:	2b03      	cmp	r3, #3
    15a6:	d0ec      	beq.n	1582 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    15a8:	2b04      	cmp	r3, #4
    15aa:	d003      	beq.n	15b4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    15ac:	4a11      	ldr	r2, [pc, #68]	; (15f4 <nmi_get_chipid+0xc8>)
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <nmi_get_chipid+0xa8>)
    15b0:	601a      	str	r2, [r3, #0]
    15b2:	e7e6      	b.n	1582 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    15b4:	4a10      	ldr	r2, [pc, #64]	; (15f8 <nmi_get_chipid+0xcc>)
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <nmi_get_chipid+0xa8>)
    15b8:	601a      	str	r2, [r3, #0]
    15ba:	e7e2      	b.n	1582 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    15bc:	4905      	ldr	r1, [pc, #20]	; (15d4 <nmi_get_chipid+0xa8>)
    15be:	20ec      	movs	r0, #236	; 0xec
    15c0:	0380      	lsls	r0, r0, #14
    15c2:	4b05      	ldr	r3, [pc, #20]	; (15d8 <nmi_get_chipid+0xac>)
    15c4:	4798      	blx	r3
    15c6:	2800      	cmp	r0, #0
    15c8:	d0db      	beq.n	1582 <nmi_get_chipid+0x56>
			chipid = 0;
    15ca:	2200      	movs	r2, #0
    15cc:	4b01      	ldr	r3, [pc, #4]	; (15d4 <nmi_get_chipid+0xa8>)
    15ce:	601a      	str	r2, [r3, #0]
			return 0;
    15d0:	e7b4      	b.n	153c <nmi_get_chipid+0x10>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	2000009c 	.word	0x2000009c
    15d8:	0000197d 	.word	0x0000197d
    15dc:	000013f4 	.word	0x000013f4
    15e0:	001002a0 	.word	0x001002a0
    15e4:	001002b0 	.word	0x001002b0
    15e8:	001000f0 	.word	0x001000f0
    15ec:	fff0ffff 	.word	0xfff0ffff
    15f0:	001002a1 	.word	0x001002a1
    15f4:	001002b2 	.word	0x001002b2
    15f8:	001002b1 	.word	0x001002b1

000015fc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    15fc:	b530      	push	{r4, r5, lr}
    15fe:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1600:	4c16      	ldr	r4, [pc, #88]	; (165c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    1602:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1604:	a901      	add	r1, sp, #4
    1606:	2010      	movs	r0, #16
    1608:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    160a:	2800      	cmp	r0, #0
    160c:	d11c      	bne.n	1648 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    160e:	9b01      	ldr	r3, [sp, #4]
    1610:	422b      	tst	r3, r5
    1612:	d1f7      	bne.n	1604 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    1614:	a901      	add	r1, sp, #4
    1616:	3001      	adds	r0, #1
    1618:	4b10      	ldr	r3, [pc, #64]	; (165c <chip_sleep+0x60>)
    161a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    161c:	2800      	cmp	r0, #0
    161e:	d113      	bne.n	1648 <chip_sleep+0x4c>
	if(reg & NBIT1)
    1620:	9901      	ldr	r1, [sp, #4]
    1622:	078b      	lsls	r3, r1, #30
    1624:	d507      	bpl.n	1636 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    1626:	2302      	movs	r3, #2
    1628:	4399      	bics	r1, r3
    162a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    162c:	3001      	adds	r0, #1
    162e:	4b0c      	ldr	r3, [pc, #48]	; (1660 <chip_sleep+0x64>)
    1630:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    1632:	2800      	cmp	r0, #0
    1634:	d108      	bne.n	1648 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    1636:	a901      	add	r1, sp, #4
    1638:	200b      	movs	r0, #11
    163a:	4b08      	ldr	r3, [pc, #32]	; (165c <chip_sleep+0x60>)
    163c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    163e:	2800      	cmp	r0, #0
    1640:	d102      	bne.n	1648 <chip_sleep+0x4c>
	if(reg & NBIT0)
    1642:	9901      	ldr	r1, [sp, #4]
    1644:	07cb      	lsls	r3, r1, #31
    1646:	d401      	bmi.n	164c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    1648:	b003      	add	sp, #12
    164a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    164c:	2301      	movs	r3, #1
    164e:	4399      	bics	r1, r3
    1650:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    1652:	300b      	adds	r0, #11
    1654:	4b02      	ldr	r3, [pc, #8]	; (1660 <chip_sleep+0x64>)
    1656:	4798      	blx	r3
    1658:	e7f6      	b.n	1648 <chip_sleep+0x4c>
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	0000197d 	.word	0x0000197d
    1660:	00001989 	.word	0x00001989

00001664 <chip_wake>:
sint8 chip_wake(void)
{
    1664:	b5f0      	push	{r4, r5, r6, r7, lr}
    1666:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    1668:	2300      	movs	r3, #0
    166a:	9301      	str	r3, [sp, #4]
    166c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    166e:	a901      	add	r1, sp, #4
    1670:	200b      	movs	r0, #11
    1672:	4b28      	ldr	r3, [pc, #160]	; (1714 <chip_wake+0xb0>)
    1674:	4798      	blx	r3
    1676:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1678:	d130      	bne.n	16dc <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    167a:	9901      	ldr	r1, [sp, #4]
    167c:	07cb      	lsls	r3, r1, #31
    167e:	d406      	bmi.n	168e <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    1680:	2301      	movs	r3, #1
    1682:	4319      	orrs	r1, r3
    1684:	200b      	movs	r0, #11
    1686:	4b24      	ldr	r3, [pc, #144]	; (1718 <chip_wake+0xb4>)
    1688:	4798      	blx	r3
    168a:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    168c:	d126      	bne.n	16dc <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    168e:	a901      	add	r1, sp, #4
    1690:	2001      	movs	r0, #1
    1692:	4b20      	ldr	r3, [pc, #128]	; (1714 <chip_wake+0xb0>)
    1694:	4798      	blx	r3
    1696:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1698:	d120      	bne.n	16dc <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    169a:	9901      	ldr	r1, [sp, #4]
    169c:	078b      	lsls	r3, r1, #30
    169e:	d520      	bpl.n	16e2 <chip_wake+0x7e>
{
    16a0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    16a2:	4f1c      	ldr	r7, [pc, #112]	; (1714 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    16a4:	4e1d      	ldr	r6, [pc, #116]	; (171c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    16a6:	4669      	mov	r1, sp
    16a8:	200f      	movs	r0, #15
    16aa:	47b8      	blx	r7
    16ac:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    16ae:	d120      	bne.n	16f2 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    16b0:	9b00      	ldr	r3, [sp, #0]
    16b2:	075b      	lsls	r3, r3, #29
    16b4:	d42b      	bmi.n	170e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    16b6:	2002      	movs	r0, #2
    16b8:	47b0      	blx	r6
    16ba:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    16bc:	2d00      	cmp	r5, #0
    16be:	d1f2      	bne.n	16a6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    16c0:	22af      	movs	r2, #175	; 0xaf
    16c2:	0052      	lsls	r2, r2, #1
    16c4:	4916      	ldr	r1, [pc, #88]	; (1720 <chip_wake+0xbc>)
    16c6:	4817      	ldr	r0, [pc, #92]	; (1724 <chip_wake+0xc0>)
    16c8:	4b17      	ldr	r3, [pc, #92]	; (1728 <chip_wake+0xc4>)
    16ca:	4798      	blx	r3
    16cc:	4817      	ldr	r0, [pc, #92]	; (172c <chip_wake+0xc8>)
    16ce:	4b18      	ldr	r3, [pc, #96]	; (1730 <chip_wake+0xcc>)
    16d0:	4798      	blx	r3
    16d2:	200d      	movs	r0, #13
    16d4:	4b17      	ldr	r3, [pc, #92]	; (1734 <chip_wake+0xd0>)
    16d6:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    16d8:	2404      	movs	r4, #4
    16da:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    16dc:	0020      	movs	r0, r4
    16de:	b003      	add	sp, #12
    16e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    16e2:	2302      	movs	r3, #2
    16e4:	4319      	orrs	r1, r3
    16e6:	2001      	movs	r0, #1
    16e8:	4b0b      	ldr	r3, [pc, #44]	; (1718 <chip_wake+0xb4>)
    16ea:	4798      	blx	r3
    16ec:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    16ee:	d0d7      	beq.n	16a0 <chip_wake+0x3c>
    16f0:	e7f4      	b.n	16dc <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    16f2:	22aa      	movs	r2, #170	; 0xaa
    16f4:	0052      	lsls	r2, r2, #1
    16f6:	490a      	ldr	r1, [pc, #40]	; (1720 <chip_wake+0xbc>)
    16f8:	480a      	ldr	r0, [pc, #40]	; (1724 <chip_wake+0xc0>)
    16fa:	4d0b      	ldr	r5, [pc, #44]	; (1728 <chip_wake+0xc4>)
    16fc:	47a8      	blx	r5
    16fe:	9a00      	ldr	r2, [sp, #0]
    1700:	0021      	movs	r1, r4
    1702:	480d      	ldr	r0, [pc, #52]	; (1738 <chip_wake+0xd4>)
    1704:	47a8      	blx	r5
    1706:	200d      	movs	r0, #13
    1708:	4b0a      	ldr	r3, [pc, #40]	; (1734 <chip_wake+0xd0>)
    170a:	4798      	blx	r3
			goto _WAKE_EXIT;
    170c:	e7e6      	b.n	16dc <chip_wake+0x78>
	nm_bus_reset();
    170e:	4b0b      	ldr	r3, [pc, #44]	; (173c <chip_wake+0xd8>)
    1710:	4798      	blx	r3
    1712:	e7e3      	b.n	16dc <chip_wake+0x78>
    1714:	0000197d 	.word	0x0000197d
    1718:	00001989 	.word	0x00001989
    171c:	00000129 	.word	0x00000129
    1720:	00008db0 	.word	0x00008db0
    1724:	00008870 	.word	0x00008870
    1728:	0000762d 	.word	0x0000762d
    172c:	00008df8 	.word	0x00008df8
    1730:	00007749 	.word	0x00007749
    1734:	00007661 	.word	0x00007661
    1738:	00008de0 	.word	0x00008de0
    173c:	00001965 	.word	0x00001965

00001740 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1742:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1744:	4d2d      	ldr	r5, [pc, #180]	; (17fc <wait_for_bootrom+0xbc>)
    1746:	4c2e      	ldr	r4, [pc, #184]	; (1800 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1748:	4e2e      	ldr	r6, [pc, #184]	; (1804 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    174a:	0028      	movs	r0, r5
    174c:	47a0      	blx	r4
		if (reg & 0x80000000) {
    174e:	2800      	cmp	r0, #0
    1750:	db02      	blt.n	1758 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1752:	2001      	movs	r0, #1
    1754:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1756:	e7f8      	b.n	174a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1758:	482b      	ldr	r0, [pc, #172]	; (1808 <wait_for_bootrom+0xc8>)
    175a:	4b29      	ldr	r3, [pc, #164]	; (1800 <wait_for_bootrom+0xc0>)
    175c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    175e:	07c3      	lsls	r3, r0, #31
    1760:	d409      	bmi.n	1776 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1762:	4e28      	ldr	r6, [pc, #160]	; (1804 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    1764:	4c29      	ldr	r4, [pc, #164]	; (180c <wait_for_bootrom+0xcc>)
    1766:	4d26      	ldr	r5, [pc, #152]	; (1800 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    1768:	2001      	movs	r0, #1
    176a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    176c:	0020      	movs	r0, r4
    176e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    1770:	4b27      	ldr	r3, [pc, #156]	; (1810 <wait_for_bootrom+0xd0>)
    1772:	4298      	cmp	r0, r3
    1774:	d1f8      	bne.n	1768 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    1776:	2f02      	cmp	r7, #2
    1778:	d021      	beq.n	17be <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    177a:	2f03      	cmp	r7, #3
    177c:	d029      	beq.n	17d2 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    177e:	2f04      	cmp	r7, #4
    1780:	d030      	beq.n	17e4 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    1782:	4924      	ldr	r1, [pc, #144]	; (1814 <wait_for_bootrom+0xd4>)
    1784:	4824      	ldr	r0, [pc, #144]	; (1818 <wait_for_bootrom+0xd8>)
    1786:	4b25      	ldr	r3, [pc, #148]	; (181c <wait_for_bootrom+0xdc>)
    1788:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    178a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    178c:	4b24      	ldr	r3, [pc, #144]	; (1820 <wait_for_bootrom+0xe0>)
    178e:	4798      	blx	r3
    1790:	0500      	lsls	r0, r0, #20
    1792:	0d00      	lsrs	r0, r0, #20
    1794:	4b23      	ldr	r3, [pc, #140]	; (1824 <wait_for_bootrom+0xe4>)
    1796:	4298      	cmp	r0, r3
    1798:	d82a      	bhi.n	17f0 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    179a:	0020      	movs	r0, r4
    179c:	4b22      	ldr	r3, [pc, #136]	; (1828 <wait_for_bootrom+0xe8>)
    179e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    17a0:	4822      	ldr	r0, [pc, #136]	; (182c <wait_for_bootrom+0xec>)
    17a2:	4c23      	ldr	r4, [pc, #140]	; (1830 <wait_for_bootrom+0xf0>)
    17a4:	47a0      	blx	r4
    17a6:	491b      	ldr	r1, [pc, #108]	; (1814 <wait_for_bootrom+0xd4>)
    17a8:	4822      	ldr	r0, [pc, #136]	; (1834 <wait_for_bootrom+0xf4>)
    17aa:	47a0      	blx	r4
    17ac:	200d      	movs	r0, #13
    17ae:	4b22      	ldr	r3, [pc, #136]	; (1838 <wait_for_bootrom+0xf8>)
    17b0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    17b2:	4922      	ldr	r1, [pc, #136]	; (183c <wait_for_bootrom+0xfc>)
    17b4:	4815      	ldr	r0, [pc, #84]	; (180c <wait_for_bootrom+0xcc>)
    17b6:	4b19      	ldr	r3, [pc, #100]	; (181c <wait_for_bootrom+0xdc>)
    17b8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    17ba:	2000      	movs	r0, #0
    17bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    17be:	4920      	ldr	r1, [pc, #128]	; (1840 <wait_for_bootrom+0x100>)
    17c0:	4820      	ldr	r0, [pc, #128]	; (1844 <wait_for_bootrom+0x104>)
    17c2:	4c16      	ldr	r4, [pc, #88]	; (181c <wait_for_bootrom+0xdc>)
    17c4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    17c6:	2180      	movs	r1, #128	; 0x80
    17c8:	0349      	lsls	r1, r1, #13
    17ca:	4813      	ldr	r0, [pc, #76]	; (1818 <wait_for_bootrom+0xd8>)
    17cc:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    17ce:	2400      	movs	r4, #0
    17d0:	e7dc      	b.n	178c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    17d2:	491b      	ldr	r1, [pc, #108]	; (1840 <wait_for_bootrom+0x100>)
    17d4:	481b      	ldr	r0, [pc, #108]	; (1844 <wait_for_bootrom+0x104>)
    17d6:	4c11      	ldr	r4, [pc, #68]	; (181c <wait_for_bootrom+0xdc>)
    17d8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    17da:	2100      	movs	r1, #0
    17dc:	480e      	ldr	r0, [pc, #56]	; (1818 <wait_for_bootrom+0xd8>)
    17de:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    17e0:	2400      	movs	r4, #0
    17e2:	e7d3      	b.n	178c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    17e4:	490b      	ldr	r1, [pc, #44]	; (1814 <wait_for_bootrom+0xd4>)
    17e6:	480c      	ldr	r0, [pc, #48]	; (1818 <wait_for_bootrom+0xd8>)
    17e8:	4b0c      	ldr	r3, [pc, #48]	; (181c <wait_for_bootrom+0xdc>)
    17ea:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    17ec:	2480      	movs	r4, #128	; 0x80
    17ee:	e7cd      	b.n	178c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    17f0:	2002      	movs	r0, #2
    17f2:	4320      	orrs	r0, r4
    17f4:	4b0c      	ldr	r3, [pc, #48]	; (1828 <wait_for_bootrom+0xe8>)
    17f6:	4798      	blx	r3
    17f8:	e7d2      	b.n	17a0 <wait_for_bootrom+0x60>
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	00001014 	.word	0x00001014
    1800:	00001971 	.word	0x00001971
    1804:	00000129 	.word	0x00000129
    1808:	000207bc 	.word	0x000207bc
    180c:	000c000c 	.word	0x000c000c
    1810:	10add09e 	.word	0x10add09e
    1814:	13521352 	.word	0x13521352
    1818:	0000108c 	.word	0x0000108c
    181c:	00001989 	.word	0x00001989
    1820:	0000152d 	.word	0x0000152d
    1824:	0000039f 	.word	0x0000039f
    1828:	00001499 	.word	0x00001499
    182c:	00008ba0 	.word	0x00008ba0
    1830:	0000762d 	.word	0x0000762d
    1834:	00008e14 	.word	0x00008e14
    1838:	00007661 	.word	0x00007661
    183c:	ef522f61 	.word	0xef522f61
    1840:	3c1cd57d 	.word	0x3c1cd57d
    1844:	000207ac 	.word	0x000207ac

00001848 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    1848:	b570      	push	{r4, r5, r6, lr}
    184a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    184c:	4b15      	ldr	r3, [pc, #84]	; (18a4 <wait_for_firmware_start+0x5c>)
    184e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    1850:	4b15      	ldr	r3, [pc, #84]	; (18a8 <wait_for_firmware_start+0x60>)
    1852:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    1854:	3802      	subs	r0, #2
    1856:	2801      	cmp	r0, #1
    1858:	d911      	bls.n	187e <wait_for_firmware_start+0x36>
{
    185a:	2401      	movs	r4, #1
    185c:	4264      	negs	r4, r4
    185e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1860:	4e12      	ldr	r6, [pc, #72]	; (18ac <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1862:	4d13      	ldr	r5, [pc, #76]	; (18b0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    1864:	9b00      	ldr	r3, [sp, #0]
    1866:	4298      	cmp	r0, r3
    1868:	d00e      	beq.n	1888 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    186a:	2002      	movs	r0, #2
    186c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    186e:	9801      	ldr	r0, [sp, #4]
    1870:	47a8      	blx	r5
    1872:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    1874:	2c00      	cmp	r4, #0
    1876:	d1f5      	bne.n	1864 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1878:	2005      	movs	r0, #5
    187a:	4240      	negs	r0, r0
    187c:	e009      	b.n	1892 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    187e:	4b0d      	ldr	r3, [pc, #52]	; (18b4 <wait_for_firmware_start+0x6c>)
    1880:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    1882:	4b0d      	ldr	r3, [pc, #52]	; (18b8 <wait_for_firmware_start+0x70>)
    1884:	9300      	str	r3, [sp, #0]
    1886:	e7e8      	b.n	185a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1888:	9a00      	ldr	r2, [sp, #0]
    188a:	4b07      	ldr	r3, [pc, #28]	; (18a8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    188c:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    188e:	429a      	cmp	r2, r3
    1890:	d001      	beq.n	1896 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    1892:	b002      	add	sp, #8
    1894:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    1896:	2100      	movs	r1, #0
    1898:	4802      	ldr	r0, [pc, #8]	; (18a4 <wait_for_firmware_start+0x5c>)
    189a:	4b08      	ldr	r3, [pc, #32]	; (18bc <wait_for_firmware_start+0x74>)
    189c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    189e:	2000      	movs	r0, #0
    18a0:	e7f7      	b.n	1892 <wait_for_firmware_start+0x4a>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	0000108c 	.word	0x0000108c
    18a8:	02532636 	.word	0x02532636
    18ac:	00000129 	.word	0x00000129
    18b0:	00001971 	.word	0x00001971
    18b4:	000207ac 	.word	0x000207ac
    18b8:	d75dc1c3 	.word	0xd75dc1c3
    18bc:	00001989 	.word	0x00001989

000018c0 <chip_deinit>:

sint8 chip_deinit(void)
{
    18c0:	b510      	push	{r4, lr}
    18c2:	b082      	sub	sp, #8
	uint32 reg = 0;
    18c4:	2300      	movs	r3, #0
    18c6:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    18c8:	a901      	add	r1, sp, #4
    18ca:	20a0      	movs	r0, #160	; 0xa0
    18cc:	0140      	lsls	r0, r0, #5
    18ce:	4b14      	ldr	r3, [pc, #80]	; (1920 <chip_deinit+0x60>)
    18d0:	4798      	blx	r3
    18d2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    18d4:	d115      	bne.n	1902 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    18d6:	4913      	ldr	r1, [pc, #76]	; (1924 <chip_deinit+0x64>)
    18d8:	9b01      	ldr	r3, [sp, #4]
    18da:	4019      	ands	r1, r3
    18dc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    18de:	20a0      	movs	r0, #160	; 0xa0
    18e0:	0140      	lsls	r0, r0, #5
    18e2:	4b11      	ldr	r3, [pc, #68]	; (1928 <chip_deinit+0x68>)
    18e4:	4798      	blx	r3
    18e6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    18e8:	d016      	beq.n	1918 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    18ea:	4a10      	ldr	r2, [pc, #64]	; (192c <chip_deinit+0x6c>)
    18ec:	4910      	ldr	r1, [pc, #64]	; (1930 <chip_deinit+0x70>)
    18ee:	4811      	ldr	r0, [pc, #68]	; (1934 <chip_deinit+0x74>)
    18f0:	4b11      	ldr	r3, [pc, #68]	; (1938 <chip_deinit+0x78>)
    18f2:	4798      	blx	r3
    18f4:	4811      	ldr	r0, [pc, #68]	; (193c <chip_deinit+0x7c>)
    18f6:	4b12      	ldr	r3, [pc, #72]	; (1940 <chip_deinit+0x80>)
    18f8:	4798      	blx	r3
    18fa:	200d      	movs	r0, #13
    18fc:	4b11      	ldr	r3, [pc, #68]	; (1944 <chip_deinit+0x84>)
    18fe:	4798      	blx	r3
		goto ERR1;
    1900:	e00a      	b.n	1918 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    1902:	4a11      	ldr	r2, [pc, #68]	; (1948 <chip_deinit+0x88>)
    1904:	490a      	ldr	r1, [pc, #40]	; (1930 <chip_deinit+0x70>)
    1906:	480b      	ldr	r0, [pc, #44]	; (1934 <chip_deinit+0x74>)
    1908:	4b0b      	ldr	r3, [pc, #44]	; (1938 <chip_deinit+0x78>)
    190a:	4798      	blx	r3
    190c:	480b      	ldr	r0, [pc, #44]	; (193c <chip_deinit+0x7c>)
    190e:	4b0c      	ldr	r3, [pc, #48]	; (1940 <chip_deinit+0x80>)
    1910:	4798      	blx	r3
    1912:	200d      	movs	r0, #13
    1914:	4b0b      	ldr	r3, [pc, #44]	; (1944 <chip_deinit+0x84>)
    1916:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    1918:	0020      	movs	r0, r4
    191a:	b002      	add	sp, #8
    191c:	bd10      	pop	{r4, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	0000197d 	.word	0x0000197d
    1924:	fffffbff 	.word	0xfffffbff
    1928:	00001989 	.word	0x00001989
    192c:	0000020b 	.word	0x0000020b
    1930:	00008dbc 	.word	0x00008dbc
    1934:	00008870 	.word	0x00008870
    1938:	0000762d 	.word	0x0000762d
    193c:	00008dc8 	.word	0x00008dc8
    1940:	00007749 	.word	0x00007749
    1944:	00007661 	.word	0x00007661
    1948:	00000205 	.word	0x00000205

0000194c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    194c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    194e:	4b01      	ldr	r3, [pc, #4]	; (1954 <nm_bus_iface_init+0x8>)
    1950:	4798      	blx	r3
	return ret;
}
    1952:	bd10      	pop	{r4, pc}
    1954:	00000261 	.word	0x00000261

00001958 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1958:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    195a:	4b01      	ldr	r3, [pc, #4]	; (1960 <nm_bus_iface_deinit+0x8>)
    195c:	4798      	blx	r3

	return ret;
}
    195e:	bd10      	pop	{r4, pc}
    1960:	000004b1 	.word	0x000004b1

00001964 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    1964:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    1966:	4b01      	ldr	r3, [pc, #4]	; (196c <nm_bus_reset+0x8>)
    1968:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    196a:	bd10      	pop	{r4, pc}
    196c:	00002311 	.word	0x00002311

00001970 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1970:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1972:	4b01      	ldr	r3, [pc, #4]	; (1978 <nm_read_reg+0x8>)
    1974:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1976:	bd10      	pop	{r4, pc}
    1978:	00002349 	.word	0x00002349

0000197c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    197c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    197e:	4b01      	ldr	r3, [pc, #4]	; (1984 <nm_read_reg_with_ret+0x8>)
    1980:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1982:	bd10      	pop	{r4, pc}
    1984:	0000235d 	.word	0x0000235d

00001988 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1988:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    198a:	4b01      	ldr	r3, [pc, #4]	; (1990 <nm_write_reg+0x8>)
    198c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    198e:	bd10      	pop	{r4, pc}
    1990:	00002375 	.word	0x00002375

00001994 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
    1996:	46d6      	mov	lr, sl
    1998:	464f      	mov	r7, r9
    199a:	4646      	mov	r6, r8
    199c:	b5c0      	push	{r6, r7, lr}
    199e:	b082      	sub	sp, #8
    19a0:	4680      	mov	r8, r0
    19a2:	4689      	mov	r9, r1
    19a4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    19a6:	4b13      	ldr	r3, [pc, #76]	; (19f4 <nm_read_block+0x60>)
    19a8:	881f      	ldrh	r7, [r3, #0]
    19aa:	3f08      	subs	r7, #8
    19ac:	b2bb      	uxth	r3, r7
    19ae:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    19b0:	001e      	movs	r6, r3
    19b2:	0004      	movs	r4, r0
    19b4:	429a      	cmp	r2, r3
    19b6:	d91a      	bls.n	19ee <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19b8:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <nm_read_block+0x64>)
    19ba:	469a      	mov	sl, r3
    19bc:	1a37      	subs	r7, r6, r0
    19be:	4643      	mov	r3, r8
    19c0:	1ae1      	subs	r1, r4, r3
    19c2:	4449      	add	r1, r9
    19c4:	9a01      	ldr	r2, [sp, #4]
    19c6:	0020      	movs	r0, r4
    19c8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    19ca:	2800      	cmp	r0, #0
    19cc:	d109      	bne.n	19e2 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    19ce:	1bad      	subs	r5, r5, r6
    19d0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    19d2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    19d4:	42b5      	cmp	r5, r6
    19d6:	d8f2      	bhi.n	19be <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19d8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    19da:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    19dc:	0020      	movs	r0, r4
    19de:	4b06      	ldr	r3, [pc, #24]	; (19f8 <nm_read_block+0x64>)
    19e0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    19e2:	b002      	add	sp, #8
    19e4:	bc1c      	pop	{r2, r3, r4}
    19e6:	4690      	mov	r8, r2
    19e8:	4699      	mov	r9, r3
    19ea:	46a2      	mov	sl, r4
    19ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    19ee:	2100      	movs	r1, #0
    19f0:	e7f2      	b.n	19d8 <nm_read_block+0x44>
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	20000000 	.word	0x20000000
    19f8:	000024b9 	.word	0x000024b9

000019fc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    19fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fe:	46d6      	mov	lr, sl
    1a00:	464f      	mov	r7, r9
    1a02:	4646      	mov	r6, r8
    1a04:	b5c0      	push	{r6, r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	4680      	mov	r8, r0
    1a0a:	4689      	mov	r9, r1
    1a0c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a0e:	4b13      	ldr	r3, [pc, #76]	; (1a5c <nm_write_block+0x60>)
    1a10:	881f      	ldrh	r7, [r3, #0]
    1a12:	3f08      	subs	r7, #8
    1a14:	b2bb      	uxth	r3, r7
    1a16:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a18:	001e      	movs	r6, r3
    1a1a:	0004      	movs	r4, r0
    1a1c:	429a      	cmp	r2, r3
    1a1e:	d91a      	bls.n	1a56 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a20:	4b0f      	ldr	r3, [pc, #60]	; (1a60 <nm_write_block+0x64>)
    1a22:	469a      	mov	sl, r3
    1a24:	1a37      	subs	r7, r6, r0
    1a26:	4643      	mov	r3, r8
    1a28:	1ae1      	subs	r1, r4, r3
    1a2a:	4449      	add	r1, r9
    1a2c:	9a01      	ldr	r2, [sp, #4]
    1a2e:	0020      	movs	r0, r4
    1a30:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a32:	2800      	cmp	r0, #0
    1a34:	d109      	bne.n	1a4a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1a36:	1bad      	subs	r5, r5, r6
    1a38:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1a3a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1a3c:	42b5      	cmp	r5, r6
    1a3e:	d8f2      	bhi.n	1a26 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a40:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1a42:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a44:	0020      	movs	r0, r4
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <nm_write_block+0x64>)
    1a48:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1a4a:	b002      	add	sp, #8
    1a4c:	bc1c      	pop	{r2, r3, r4}
    1a4e:	4690      	mov	r8, r2
    1a50:	4699      	mov	r9, r3
    1a52:	46a2      	mov	sl, r4
    1a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1a56:	2100      	movs	r1, #0
    1a58:	e7f2      	b.n	1a40 <nm_write_block+0x44>
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	20000000 	.word	0x20000000
    1a60:	00002611 	.word	0x00002611

00001a64 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	b084      	sub	sp, #16
    1a68:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1a6a:	2300      	movs	r3, #0
    1a6c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    1a6e:	2208      	movs	r2, #8
    1a70:	2100      	movs	r1, #0
    1a72:	a801      	add	r0, sp, #4
    1a74:	4b2d      	ldr	r3, [pc, #180]	; (1b2c <nm_get_firmware_full_info+0xc8>)
    1a76:	4798      	blx	r3
	if (pstrRev != NULL)
    1a78:	2c00      	cmp	r4, #0
    1a7a:	d044      	beq.n	1b06 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    1a7c:	2228      	movs	r2, #40	; 0x28
    1a7e:	2100      	movs	r1, #0
    1a80:	0020      	movs	r0, r4
    1a82:	4b2b      	ldr	r3, [pc, #172]	; (1b30 <nm_get_firmware_full_info+0xcc>)
    1a84:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    1a86:	a903      	add	r1, sp, #12
    1a88:	482a      	ldr	r0, [pc, #168]	; (1b34 <nm_get_firmware_full_info+0xd0>)
    1a8a:	4b2b      	ldr	r3, [pc, #172]	; (1b38 <nm_get_firmware_full_info+0xd4>)
    1a8c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1a8e:	2800      	cmp	r0, #0
    1a90:	d13a      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    1a92:	9b03      	ldr	r3, [sp, #12]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d039      	beq.n	1b0c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1a98:	20c0      	movs	r0, #192	; 0xc0
    1a9a:	0280      	lsls	r0, r0, #10
    1a9c:	4318      	orrs	r0, r3
    1a9e:	2208      	movs	r2, #8
    1aa0:	a901      	add	r1, sp, #4
    1aa2:	4b26      	ldr	r3, [pc, #152]	; (1b3c <nm_get_firmware_full_info+0xd8>)
    1aa4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    1aa6:	2800      	cmp	r0, #0
    1aa8:	d12e      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    1aaa:	9b02      	ldr	r3, [sp, #8]
    1aac:	0418      	lsls	r0, r3, #16
    1aae:	0c00      	lsrs	r0, r0, #16
    1ab0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1ab2:	d02e      	beq.n	1b12 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1ab4:	23c0      	movs	r3, #192	; 0xc0
    1ab6:	029b      	lsls	r3, r3, #10
    1ab8:	4318      	orrs	r0, r3
    1aba:	2228      	movs	r2, #40	; 0x28
    1abc:	0021      	movs	r1, r4
    1abe:	4b1f      	ldr	r3, [pc, #124]	; (1b3c <nm_get_firmware_full_info+0xd8>)
    1ac0:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1ac2:	2800      	cmp	r0, #0
    1ac4:	d120      	bne.n	1b08 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1ac6:	7921      	ldrb	r1, [r4, #4]
    1ac8:	0209      	lsls	r1, r1, #8
    1aca:	79a2      	ldrb	r2, [r4, #6]
    1acc:	230f      	movs	r3, #15
    1ace:	401a      	ands	r2, r3
    1ad0:	430a      	orrs	r2, r1
    1ad2:	7961      	ldrb	r1, [r4, #5]
    1ad4:	0109      	lsls	r1, r1, #4
    1ad6:	25ff      	movs	r5, #255	; 0xff
    1ad8:	4029      	ands	r1, r5
    1ada:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    1adc:	79e1      	ldrb	r1, [r4, #7]
    1ade:	0209      	lsls	r1, r1, #8
    1ae0:	7a66      	ldrb	r6, [r4, #9]
    1ae2:	4033      	ands	r3, r6
    1ae4:	430b      	orrs	r3, r1
    1ae6:	7a21      	ldrb	r1, [r4, #8]
    1ae8:	0109      	lsls	r1, r1, #4
    1aea:	400d      	ands	r5, r1
    1aec:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    1aee:	2a00      	cmp	r2, #0
    1af0:	d012      	beq.n	1b18 <nm_get_firmware_full_info+0xb4>
    1af2:	2b00      	cmp	r3, #0
    1af4:	d013      	beq.n	1b1e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1af6:	4912      	ldr	r1, [pc, #72]	; (1b40 <nm_get_firmware_full_info+0xdc>)
    1af8:	428b      	cmp	r3, r1
    1afa:	d813      	bhi.n	1b24 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    1afc:	4b11      	ldr	r3, [pc, #68]	; (1b44 <nm_get_firmware_full_info+0xe0>)
    1afe:	429a      	cmp	r2, r3
    1b00:	d802      	bhi.n	1b08 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b02:	380d      	subs	r0, #13
    1b04:	e000      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    1b06:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1b08:	b004      	add	sp, #16
    1b0a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    1b0c:	200c      	movs	r0, #12
    1b0e:	4240      	negs	r0, r0
    1b10:	e7fa      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    1b12:	200c      	movs	r0, #12
    1b14:	4240      	negs	r0, r0
    1b16:	e7f7      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    1b18:	200c      	movs	r0, #12
    1b1a:	4240      	negs	r0, r0
    1b1c:	e7f4      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
    1b1e:	200c      	movs	r0, #12
    1b20:	4240      	negs	r0, r0
    1b22:	e7f1      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b24:	200d      	movs	r0, #13
    1b26:	4240      	negs	r0, r0
    1b28:	e7ee      	b.n	1b08 <nm_get_firmware_full_info+0xa4>
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	0000761b 	.word	0x0000761b
    1b30:	00000531 	.word	0x00000531
    1b34:	000c0008 	.word	0x000c0008
    1b38:	0000197d 	.word	0x0000197d
    1b3c:	00001995 	.word	0x00001995
    1b40:	00001352 	.word	0x00001352
    1b44:	00001351 	.word	0x00001351

00001b48 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1b48:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) 
    1b4a:	2800      	cmp	r0, #0
    1b4c:	d037      	beq.n	1bbe <nm_drv_init+0x76>
	{
		u8Mode = *((uint8 *)arg);
    1b4e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) 
    1b50:	1e6b      	subs	r3, r5, #1
    1b52:	2b03      	cmp	r3, #3
    1b54:	d900      	bls.n	1b58 <nm_drv_init+0x10>
		{
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1b56:	2501      	movs	r5, #1
	else 
	{
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    1b58:	2000      	movs	r0, #0
    1b5a:	4b20      	ldr	r3, [pc, #128]	; (1bdc <nm_drv_init+0x94>)
    1b5c:	4798      	blx	r3
    1b5e:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b60:	d12f      	bne.n	1bc2 <nm_drv_init+0x7a>
	if(M2M_SUCCESS != ret) 
	{
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1b62:	481f      	ldr	r0, [pc, #124]	; (1be0 <nm_drv_init+0x98>)
    1b64:	4c1f      	ldr	r4, [pc, #124]	; (1be4 <nm_drv_init+0x9c>)
    1b66:	47a0      	blx	r4
    1b68:	4b1f      	ldr	r3, [pc, #124]	; (1be8 <nm_drv_init+0xa0>)
    1b6a:	4798      	blx	r3
    1b6c:	0001      	movs	r1, r0
    1b6e:	481f      	ldr	r0, [pc, #124]	; (1bec <nm_drv_init+0xa4>)
    1b70:	47a0      	blx	r4
    1b72:	200d      	movs	r0, #13
    1b74:	4b1e      	ldr	r3, [pc, #120]	; (1bf0 <nm_drv_init+0xa8>)
    1b76:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1b78:	4b1e      	ldr	r3, [pc, #120]	; (1bf4 <nm_drv_init+0xac>)
    1b7a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    1b7c:	0028      	movs	r0, r5
    1b7e:	4b1e      	ldr	r3, [pc, #120]	; (1bf8 <nm_drv_init+0xb0>)
    1b80:	4798      	blx	r3
    1b82:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b84:	d117      	bne.n	1bb6 <nm_drv_init+0x6e>
	{
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1b86:	0028      	movs	r0, r5
    1b88:	4b1c      	ldr	r3, [pc, #112]	; (1bfc <nm_drv_init+0xb4>)
    1b8a:	4798      	blx	r3
    1b8c:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b8e:	d112      	bne.n	1bb6 <nm_drv_init+0x6e>
	{
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) 
    1b90:	3d02      	subs	r5, #2
    1b92:	2d01      	cmp	r5, #1
    1b94:	d911      	bls.n	1bba <nm_drv_init+0x72>
	{
		goto ERR1;
	} 
	else;
	
	ret = enable_interrupts();
    1b96:	4b1a      	ldr	r3, [pc, #104]	; (1c00 <nm_drv_init+0xb8>)
    1b98:	4798      	blx	r3
    1b9a:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS != ret) 
    1b9c:	d00d      	beq.n	1bba <nm_drv_init+0x72>
	{
		M2M_ERR("failed to enable interrupts..\n");
    1b9e:	2260      	movs	r2, #96	; 0x60
    1ba0:	32ff      	adds	r2, #255	; 0xff
    1ba2:	4918      	ldr	r1, [pc, #96]	; (1c04 <nm_drv_init+0xbc>)
    1ba4:	4818      	ldr	r0, [pc, #96]	; (1c08 <nm_drv_init+0xc0>)
    1ba6:	4b0f      	ldr	r3, [pc, #60]	; (1be4 <nm_drv_init+0x9c>)
    1ba8:	4798      	blx	r3
    1baa:	4818      	ldr	r0, [pc, #96]	; (1c0c <nm_drv_init+0xc4>)
    1bac:	4b18      	ldr	r3, [pc, #96]	; (1c10 <nm_drv_init+0xc8>)
    1bae:	4798      	blx	r3
    1bb0:	200d      	movs	r0, #13
    1bb2:	4b0f      	ldr	r3, [pc, #60]	; (1bf0 <nm_drv_init+0xa8>)
    1bb4:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1bb6:	4b17      	ldr	r3, [pc, #92]	; (1c14 <nm_drv_init+0xcc>)
    1bb8:	4798      	blx	r3
ERR1:
	return ret;
}
    1bba:	0020      	movs	r0, r4
    1bbc:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1bbe:	2501      	movs	r5, #1
    1bc0:	e7ca      	b.n	1b58 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1bc2:	2296      	movs	r2, #150	; 0x96
    1bc4:	0052      	lsls	r2, r2, #1
    1bc6:	490f      	ldr	r1, [pc, #60]	; (1c04 <nm_drv_init+0xbc>)
    1bc8:	480f      	ldr	r0, [pc, #60]	; (1c08 <nm_drv_init+0xc0>)
    1bca:	4b06      	ldr	r3, [pc, #24]	; (1be4 <nm_drv_init+0x9c>)
    1bcc:	4798      	blx	r3
    1bce:	4812      	ldr	r0, [pc, #72]	; (1c18 <nm_drv_init+0xd0>)
    1bd0:	4b0f      	ldr	r3, [pc, #60]	; (1c10 <nm_drv_init+0xc8>)
    1bd2:	4798      	blx	r3
    1bd4:	200d      	movs	r0, #13
    1bd6:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <nm_drv_init+0xa8>)
    1bd8:	4798      	blx	r3
		goto ERR1;
    1bda:	e7ee      	b.n	1bba <nm_drv_init+0x72>
    1bdc:	0000194d 	.word	0x0000194d
    1be0:	00008ba0 	.word	0x00008ba0
    1be4:	0000762d 	.word	0x0000762d
    1be8:	0000152d 	.word	0x0000152d
    1bec:	00008ee4 	.word	0x00008ee4
    1bf0:	00007661 	.word	0x00007661
    1bf4:	0000238d 	.word	0x0000238d
    1bf8:	00001741 	.word	0x00001741
    1bfc:	00001849 	.word	0x00001849
    1c00:	000014d1 	.word	0x000014d1
    1c04:	00008e2c 	.word	0x00008e2c
    1c08:	00008870 	.word	0x00008870
    1c0c:	00008ea8 	.word	0x00008ea8
    1c10:	00007749 	.word	0x00007749
    1c14:	00001959 	.word	0x00001959
    1c18:	00008ec8 	.word	0x00008ec8

00001c1c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1c1c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1c1e:	4b1c      	ldr	r3, [pc, #112]	; (1c90 <nm_drv_deinit+0x74>)
    1c20:	4798      	blx	r3
    1c22:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c24:	d10b      	bne.n	1c3e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1c26:	2000      	movs	r0, #0
    1c28:	4b1a      	ldr	r3, [pc, #104]	; (1c94 <nm_drv_deinit+0x78>)
    1c2a:	4798      	blx	r3
    1c2c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c2e:	d114      	bne.n	1c5a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1c30:	4b19      	ldr	r3, [pc, #100]	; (1c98 <nm_drv_deinit+0x7c>)
    1c32:	4798      	blx	r3
    1c34:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c36:	d11d      	bne.n	1c74 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1c38:	4b18      	ldr	r3, [pc, #96]	; (1c9c <nm_drv_deinit+0x80>)
    1c3a:	4798      	blx	r3
    1c3c:	e00b      	b.n	1c56 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1c3e:	22bb      	movs	r2, #187	; 0xbb
    1c40:	0052      	lsls	r2, r2, #1
    1c42:	4917      	ldr	r1, [pc, #92]	; (1ca0 <nm_drv_deinit+0x84>)
    1c44:	4817      	ldr	r0, [pc, #92]	; (1ca4 <nm_drv_deinit+0x88>)
    1c46:	4b18      	ldr	r3, [pc, #96]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c48:	4798      	blx	r3
    1c4a:	4818      	ldr	r0, [pc, #96]	; (1cac <nm_drv_deinit+0x90>)
    1c4c:	4b18      	ldr	r3, [pc, #96]	; (1cb0 <nm_drv_deinit+0x94>)
    1c4e:	4798      	blx	r3
    1c50:	200d      	movs	r0, #13
    1c52:	4b18      	ldr	r3, [pc, #96]	; (1cb4 <nm_drv_deinit+0x98>)
    1c54:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1c56:	0020      	movs	r0, r4
    1c58:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1c5a:	227e      	movs	r2, #126	; 0x7e
    1c5c:	32ff      	adds	r2, #255	; 0xff
    1c5e:	4910      	ldr	r1, [pc, #64]	; (1ca0 <nm_drv_deinit+0x84>)
    1c60:	4810      	ldr	r0, [pc, #64]	; (1ca4 <nm_drv_deinit+0x88>)
    1c62:	4b11      	ldr	r3, [pc, #68]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c64:	4798      	blx	r3
    1c66:	4814      	ldr	r0, [pc, #80]	; (1cb8 <nm_drv_deinit+0x9c>)
    1c68:	4b11      	ldr	r3, [pc, #68]	; (1cb0 <nm_drv_deinit+0x94>)
    1c6a:	4798      	blx	r3
    1c6c:	200d      	movs	r0, #13
    1c6e:	4b11      	ldr	r3, [pc, #68]	; (1cb4 <nm_drv_deinit+0x98>)
    1c70:	4798      	blx	r3
		goto ERR1;
    1c72:	e7f0      	b.n	1c56 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1c74:	2284      	movs	r2, #132	; 0x84
    1c76:	32ff      	adds	r2, #255	; 0xff
    1c78:	4909      	ldr	r1, [pc, #36]	; (1ca0 <nm_drv_deinit+0x84>)
    1c7a:	480a      	ldr	r0, [pc, #40]	; (1ca4 <nm_drv_deinit+0x88>)
    1c7c:	4b0a      	ldr	r3, [pc, #40]	; (1ca8 <nm_drv_deinit+0x8c>)
    1c7e:	4798      	blx	r3
    1c80:	480e      	ldr	r0, [pc, #56]	; (1cbc <nm_drv_deinit+0xa0>)
    1c82:	4b0b      	ldr	r3, [pc, #44]	; (1cb0 <nm_drv_deinit+0x94>)
    1c84:	4798      	blx	r3
    1c86:	200d      	movs	r0, #13
    1c88:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <nm_drv_deinit+0x98>)
    1c8a:	4798      	blx	r3
		goto ERR1;
    1c8c:	e7e3      	b.n	1c56 <nm_drv_deinit+0x3a>
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	000018c1 	.word	0x000018c1
    1c94:	000030c1 	.word	0x000030c1
    1c98:	00001959 	.word	0x00001959
    1c9c:	00002339 	.word	0x00002339
    1ca0:	00008e38 	.word	0x00008e38
    1ca4:	00008870 	.word	0x00008870
    1ca8:	0000762d 	.word	0x0000762d
    1cac:	00008e48 	.word	0x00008e48
    1cb0:	00007749 	.word	0x00007749
    1cb4:	00007661 	.word	0x00007661
    1cb8:	00008e68 	.word	0x00008e68
    1cbc:	00008e8c 	.word	0x00008e8c

00001cc0 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1cc0:	b500      	push	{lr}
    1cc2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1cc4:	ab01      	add	r3, sp, #4
    1cc6:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1cc8:	2200      	movs	r2, #0
    1cca:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1ccc:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1cce:	0019      	movs	r1, r3
    1cd0:	2003      	movs	r0, #3
    1cd2:	4b02      	ldr	r3, [pc, #8]	; (1cdc <nmi_spi_write+0x1c>)
    1cd4:	4798      	blx	r3
}
    1cd6:	b005      	add	sp, #20
    1cd8:	bd00      	pop	{pc}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	00000365 	.word	0x00000365

00001ce0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1ce0:	b570      	push	{r4, r5, r6, lr}
    1ce2:	b084      	sub	sp, #16
    1ce4:	ac08      	add	r4, sp, #32
    1ce6:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1ce8:	ac01      	add	r4, sp, #4
    1cea:	7020      	strb	r0, [r4, #0]
	switch(cmd) 
    1cec:	303f      	adds	r0, #63	; 0x3f
    1cee:	b2c4      	uxtb	r4, r0
    1cf0:	2c0e      	cmp	r4, #14
    1cf2:	d900      	bls.n	1cf6 <spi_cmd+0x16>
    1cf4:	e084      	b.n	1e00 <spi_cmd+0x120>
    1cf6:	00a0      	lsls	r0, r4, #2
    1cf8:	4c4f      	ldr	r4, [pc, #316]	; (1e38 <spi_cmd+0x158>)
    1cfa:	5820      	ldr	r0, [r4, r0]
    1cfc:	4687      	mov	pc, r0
	{
		case CMD_SINGLE_READ:				/* single word (4 bytes) read */
			bc[1] = (uint8)(adr >> 16);
    1cfe:	ab01      	add	r3, sp, #4
    1d00:	0c0a      	lsrs	r2, r1, #16
    1d02:	705a      	strb	r2, [r3, #1]
			bc[2] = (uint8)(adr >> 8);
    1d04:	0a0a      	lsrs	r2, r1, #8
    1d06:	709a      	strb	r2, [r3, #2]
			bc[3] = (uint8)adr;
    1d08:	70d9      	strb	r1, [r3, #3]
			len = 5;
    1d0a:	2105      	movs	r1, #5
			break;
	}

	if(result) 
	{
		if (!gu8Crc_off)
    1d0c:	4b4b      	ldr	r3, [pc, #300]	; (1e3c <spi_cmd+0x15c>)
    1d0e:	781b      	ldrb	r3, [r3, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	d077      	beq.n	1e04 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1d14:	3901      	subs	r1, #1
    1d16:	b2c9      	uxtb	r1, r1
    1d18:	e083      	b.n	1e22 <spi_cmd+0x142>
			bc[1] = (uint8)(adr >> 8);
    1d1a:	0a0b      	lsrs	r3, r1, #8
    1d1c:	b2db      	uxtb	r3, r3
			if(clockless)  bc[1] |= (1 << 7);
    1d1e:	2d00      	cmp	r5, #0
    1d20:	d107      	bne.n	1d32 <spi_cmd+0x52>
			bc[1] = (uint8)(adr >> 8);
    1d22:	aa01      	add	r2, sp, #4
    1d24:	7053      	strb	r3, [r2, #1]
			bc[2] = (uint8)adr;
    1d26:	ab01      	add	r3, sp, #4
    1d28:	7099      	strb	r1, [r3, #2]
			bc[3] = 0x00;
    1d2a:	2200      	movs	r2, #0
    1d2c:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d2e:	2105      	movs	r1, #5
			break;
    1d30:	e7ec      	b.n	1d0c <spi_cmd+0x2c>
			if(clockless)  bc[1] |= (1 << 7);
    1d32:	2280      	movs	r2, #128	; 0x80
    1d34:	4252      	negs	r2, r2
    1d36:	4313      	orrs	r3, r2
    1d38:	aa01      	add	r2, sp, #4
    1d3a:	7053      	strb	r3, [r2, #1]
    1d3c:	e7f3      	b.n	1d26 <spi_cmd+0x46>
			bc[1] = 0x00;
    1d3e:	ab01      	add	r3, sp, #4
    1d40:	2200      	movs	r2, #0
    1d42:	705a      	strb	r2, [r3, #1]
			bc[2] = 0x00;
    1d44:	709a      	strb	r2, [r3, #2]
			bc[3] = 0x00;
    1d46:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d48:	2105      	movs	r1, #5
			break;
    1d4a:	e7df      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = 0x00;
    1d4c:	ab01      	add	r3, sp, #4
    1d4e:	2200      	movs	r2, #0
    1d50:	705a      	strb	r2, [r3, #1]
			bc[2] = 0x00;
    1d52:	709a      	strb	r2, [r3, #2]
			bc[3] = 0x00;
    1d54:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d56:	2105      	movs	r1, #5
			break;
    1d58:	e7d8      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = 0xff;
    1d5a:	ab01      	add	r3, sp, #4
    1d5c:	22ff      	movs	r2, #255	; 0xff
    1d5e:	705a      	strb	r2, [r3, #1]
			bc[2] = 0xff;
    1d60:	709a      	strb	r2, [r3, #2]
			bc[3] = 0xff;
    1d62:	70da      	strb	r2, [r3, #3]
			len = 5;
    1d64:	2105      	movs	r1, #5
			break;
    1d66:	e7d1      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 16);
    1d68:	aa01      	add	r2, sp, #4
    1d6a:	0c08      	lsrs	r0, r1, #16
    1d6c:	7050      	strb	r0, [r2, #1]
			bc[2] = (uint8)(adr >> 8);
    1d6e:	0a08      	lsrs	r0, r1, #8
    1d70:	7090      	strb	r0, [r2, #2]
			bc[3] = (uint8)adr;
    1d72:	70d1      	strb	r1, [r2, #3]
			bc[4] = (uint8)(sz >> 8);
    1d74:	0a19      	lsrs	r1, r3, #8
    1d76:	7111      	strb	r1, [r2, #4]
			bc[5] = (uint8)(sz);
    1d78:	7153      	strb	r3, [r2, #5]
			len = 7;
    1d7a:	2107      	movs	r1, #7
			break;
    1d7c:	e7c6      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 16);
    1d7e:	aa01      	add	r2, sp, #4
    1d80:	0c08      	lsrs	r0, r1, #16
    1d82:	7050      	strb	r0, [r2, #1]
			bc[2] = (uint8)(adr >> 8);
    1d84:	0a08      	lsrs	r0, r1, #8
    1d86:	7090      	strb	r0, [r2, #2]
			bc[3] = (uint8)adr;
    1d88:	70d1      	strb	r1, [r2, #3]
			bc[4] = (uint8)(sz >> 16);
    1d8a:	0c19      	lsrs	r1, r3, #16
    1d8c:	7111      	strb	r1, [r2, #4]
			bc[5] = (uint8)(sz >> 8);
    1d8e:	0a19      	lsrs	r1, r3, #8
    1d90:	7151      	strb	r1, [r2, #5]
			bc[6] = (uint8)(sz);
    1d92:	7193      	strb	r3, [r2, #6]
			len = 8;
    1d94:	2108      	movs	r1, #8
			break;
    1d96:	e7b9      	b.n	1d0c <spi_cmd+0x2c>
			bc[1] = (uint8)(adr >> 8);
    1d98:	0a0b      	lsrs	r3, r1, #8
    1d9a:	b2db      	uxtb	r3, r3
			if(clockless)  bc[1] |= (1 << 7);
    1d9c:	2d00      	cmp	r5, #0
    1d9e:	d10c      	bne.n	1dba <spi_cmd+0xda>
			bc[1] = (uint8)(adr >> 8);
    1da0:	a801      	add	r0, sp, #4
    1da2:	7043      	strb	r3, [r0, #1]
			bc[2] = (uint8)(adr);
    1da4:	ab01      	add	r3, sp, #4
    1da6:	7099      	strb	r1, [r3, #2]
			bc[3] = (uint8)(u32data >> 24);
    1da8:	0e11      	lsrs	r1, r2, #24
    1daa:	70d9      	strb	r1, [r3, #3]
			bc[4] = (uint8)(u32data >> 16);
    1dac:	0c11      	lsrs	r1, r2, #16
    1dae:	7119      	strb	r1, [r3, #4]
			bc[5] = (uint8)(u32data >> 8);
    1db0:	0a11      	lsrs	r1, r2, #8
    1db2:	7159      	strb	r1, [r3, #5]
			bc[6] = (uint8)(u32data);
    1db4:	719a      	strb	r2, [r3, #6]
			len = 8;
    1db6:	2108      	movs	r1, #8
			break;
    1db8:	e7a8      	b.n	1d0c <spi_cmd+0x2c>
			if(clockless)  bc[1] |= (1 << 7);
    1dba:	2080      	movs	r0, #128	; 0x80
    1dbc:	4240      	negs	r0, r0
    1dbe:	4303      	orrs	r3, r0
    1dc0:	a801      	add	r0, sp, #4
    1dc2:	7043      	strb	r3, [r0, #1]
    1dc4:	e7ee      	b.n	1da4 <spi_cmd+0xc4>
			bc[1] = (uint8)(adr >> 16);
    1dc6:	ab01      	add	r3, sp, #4
    1dc8:	0c08      	lsrs	r0, r1, #16
    1dca:	7058      	strb	r0, [r3, #1]
			bc[2] = (uint8)(adr >> 8);
    1dcc:	0a08      	lsrs	r0, r1, #8
    1dce:	7098      	strb	r0, [r3, #2]
			bc[3] = (uint8)(adr);
    1dd0:	70d9      	strb	r1, [r3, #3]
			bc[4] = (uint8)(u32data >> 24);
    1dd2:	0e11      	lsrs	r1, r2, #24
    1dd4:	7119      	strb	r1, [r3, #4]
			bc[5] = (uint8)(u32data >> 16);
    1dd6:	0c11      	lsrs	r1, r2, #16
    1dd8:	7159      	strb	r1, [r3, #5]
			bc[6] = (uint8)(u32data >> 8);
    1dda:	0a11      	lsrs	r1, r2, #8
    1ddc:	7199      	strb	r1, [r3, #6]
			bc[7] = (uint8)(u32data);
    1dde:	71da      	strb	r2, [r3, #7]
			len = 9;
    1de0:	2109      	movs	r1, #9
			break;
    1de2:	e793      	b.n	1d0c <spi_cmd+0x2c>

		if(M2M_SUCCESS != nmi_spi_write(bc, len)) 
		{
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1de4:	2234      	movs	r2, #52	; 0x34
    1de6:	32ff      	adds	r2, #255	; 0xff
    1de8:	4915      	ldr	r1, [pc, #84]	; (1e40 <spi_cmd+0x160>)
    1dea:	4816      	ldr	r0, [pc, #88]	; (1e44 <spi_cmd+0x164>)
    1dec:	4b16      	ldr	r3, [pc, #88]	; (1e48 <spi_cmd+0x168>)
    1dee:	4798      	blx	r3
    1df0:	4816      	ldr	r0, [pc, #88]	; (1e4c <spi_cmd+0x16c>)
    1df2:	4b17      	ldr	r3, [pc, #92]	; (1e50 <spi_cmd+0x170>)
    1df4:	4798      	blx	r3
    1df6:	200d      	movs	r0, #13
    1df8:	4b16      	ldr	r3, [pc, #88]	; (1e54 <spi_cmd+0x174>)
    1dfa:	4798      	blx	r3
			result = N_FAIL;
    1dfc:	2300      	movs	r3, #0
    1dfe:	e017      	b.n	1e30 <spi_cmd+0x150>
	switch(cmd) 
    1e00:	2300      	movs	r3, #0
    1e02:	e015      	b.n	1e30 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e04:	1e4e      	subs	r6, r1, #1
    1e06:	aa01      	add	r2, sp, #4
    1e08:	1995      	adds	r5, r2, r6
    1e0a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    1e0c:	4c12      	ldr	r4, [pc, #72]	; (1e58 <spi_cmd+0x178>)
    1e0e:	005b      	lsls	r3, r3, #1
    1e10:	7810      	ldrb	r0, [r2, #0]
    1e12:	4043      	eors	r3, r0
    1e14:	5ce3      	ldrb	r3, [r4, r3]
    1e16:	3201      	adds	r2, #1
	while (len--)
    1e18:	42aa      	cmp	r2, r5
    1e1a:	d1f8      	bne.n	1e0e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e1c:	005b      	lsls	r3, r3, #1
    1e1e:	aa01      	add	r2, sp, #4
    1e20:	5593      	strb	r3, [r2, r6]
		if(M2M_SUCCESS != nmi_spi_write(bc, len)) 
    1e22:	b289      	uxth	r1, r1
    1e24:	a801      	add	r0, sp, #4
    1e26:	4b0d      	ldr	r3, [pc, #52]	; (1e5c <spi_cmd+0x17c>)
    1e28:	4798      	blx	r3
    1e2a:	2301      	movs	r3, #1
    1e2c:	2800      	cmp	r0, #0
    1e2e:	d1d9      	bne.n	1de4 <spi_cmd+0x104>
		}
	}

	return result;
}
    1e30:	0018      	movs	r0, r3
    1e32:	b004      	add	sp, #16
    1e34:	bd70      	pop	{r4, r5, r6, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	00008ef4 	.word	0x00008ef4
    1e3c:	200000a0 	.word	0x200000a0
    1e40:	00008f34 	.word	0x00008f34
    1e44:	00008870 	.word	0x00008870
    1e48:	0000762d 	.word	0x0000762d
    1e4c:	000093c4 	.word	0x000093c4
    1e50:	00007749 	.word	0x00007749
    1e54:	00007661 	.word	0x00007661
    1e58:	00008fc0 	.word	0x00008fc0
    1e5c:	00001cc1 	.word	0x00001cc1

00001e60 <nmi_spi_read>:
{
    1e60:	b500      	push	{lr}
    1e62:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    1e64:	ab01      	add	r3, sp, #4
    1e66:	2200      	movs	r2, #0
    1e68:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1e6a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1e6c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1e6e:	0019      	movs	r1, r3
    1e70:	2003      	movs	r0, #3
    1e72:	4b02      	ldr	r3, [pc, #8]	; (1e7c <nmi_spi_read+0x1c>)
    1e74:	4798      	blx	r3
}
    1e76:	b005      	add	sp, #20
    1e78:	bd00      	pop	{pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	00000365 	.word	0x00000365

00001e80 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e82:	46c6      	mov	lr, r8
    1e84:	b500      	push	{lr}
    1e86:	b082      	sub	sp, #8
    1e88:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1e8a:	28cf      	cmp	r0, #207	; 0xcf
    1e8c:	d02b      	beq.n	1ee6 <spi_cmd_rsp+0x66>
    1e8e:	0003      	movs	r3, r0
    1e90:	333b      	adds	r3, #59	; 0x3b
    1e92:	b2db      	uxtb	r3, r3
    1e94:	2b01      	cmp	r3, #1
    1e96:	d926      	bls.n	1ee6 <spi_cmd_rsp+0x66>
{
    1e98:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1e9a:	466b      	mov	r3, sp
    1e9c:	1dde      	adds	r6, r3, #7
    1e9e:	4b26      	ldr	r3, [pc, #152]	; (1f38 <spi_cmd_rsp+0xb8>)
    1ea0:	4698      	mov	r8, r3
    1ea2:	2101      	movs	r1, #1
    1ea4:	0030      	movs	r0, r6
    1ea6:	47c0      	blx	r8
    1ea8:	1e05      	subs	r5, r0, #0
    1eaa:	d125      	bne.n	1ef8 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1eac:	7833      	ldrb	r3, [r6, #0]
    1eae:	42bb      	cmp	r3, r7
    1eb0:	d030      	beq.n	1f14 <spi_cmd_rsp+0x94>
    1eb2:	3c01      	subs	r4, #1
    1eb4:	b2e4      	uxtb	r4, r4
    1eb6:	2c00      	cmp	r4, #0
    1eb8:	d1f3      	bne.n	1ea2 <spi_cmd_rsp+0x22>
    1eba:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ebc:	466b      	mov	r3, sp
    1ebe:	1dde      	adds	r6, r3, #7
    1ec0:	4f1d      	ldr	r7, [pc, #116]	; (1f38 <spi_cmd_rsp+0xb8>)
    1ec2:	2101      	movs	r1, #1
    1ec4:	0030      	movs	r0, r6
    1ec6:	47b8      	blx	r7
    1ec8:	2800      	cmp	r0, #0
    1eca:	d125      	bne.n	1f18 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1ecc:	7833      	ldrb	r3, [r6, #0]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d02f      	beq.n	1f32 <spi_cmd_rsp+0xb2>
    1ed2:	3c01      	subs	r4, #1
    1ed4:	b2e4      	uxtb	r4, r4
    1ed6:	2c00      	cmp	r4, #0
    1ed8:	d1f3      	bne.n	1ec2 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    1eda:	2501      	movs	r5, #1

_fail_:

	return result;
}
    1edc:	0028      	movs	r0, r5
    1ede:	b002      	add	sp, #8
    1ee0:	bc04      	pop	{r2}
    1ee2:	4690      	mov	r8, r2
    1ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ee6:	2101      	movs	r1, #1
    1ee8:	466b      	mov	r3, sp
    1eea:	1dd8      	adds	r0, r3, #7
    1eec:	4b12      	ldr	r3, [pc, #72]	; (1f38 <spi_cmd_rsp+0xb8>)
    1eee:	4798      	blx	r3
			result = N_FAIL;
    1ef0:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ef2:	2800      	cmp	r0, #0
    1ef4:	d0d0      	beq.n	1e98 <spi_cmd_rsp+0x18>
    1ef6:	e7f1      	b.n	1edc <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1ef8:	22b7      	movs	r2, #183	; 0xb7
    1efa:	0052      	lsls	r2, r2, #1
    1efc:	490f      	ldr	r1, [pc, #60]	; (1f3c <spi_cmd_rsp+0xbc>)
    1efe:	4810      	ldr	r0, [pc, #64]	; (1f40 <spi_cmd_rsp+0xc0>)
    1f00:	4b10      	ldr	r3, [pc, #64]	; (1f44 <spi_cmd_rsp+0xc4>)
    1f02:	4798      	blx	r3
    1f04:	4810      	ldr	r0, [pc, #64]	; (1f48 <spi_cmd_rsp+0xc8>)
    1f06:	4b11      	ldr	r3, [pc, #68]	; (1f4c <spi_cmd_rsp+0xcc>)
    1f08:	4798      	blx	r3
    1f0a:	200d      	movs	r0, #13
    1f0c:	4b10      	ldr	r3, [pc, #64]	; (1f50 <spi_cmd_rsp+0xd0>)
    1f0e:	4798      	blx	r3
			result = N_FAIL;
    1f10:	2500      	movs	r5, #0
			goto _fail_;
    1f12:	e7e3      	b.n	1edc <spi_cmd_rsp+0x5c>
    1f14:	240b      	movs	r4, #11
    1f16:	e7d1      	b.n	1ebc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1f18:	22be      	movs	r2, #190	; 0xbe
    1f1a:	0052      	lsls	r2, r2, #1
    1f1c:	4907      	ldr	r1, [pc, #28]	; (1f3c <spi_cmd_rsp+0xbc>)
    1f1e:	4808      	ldr	r0, [pc, #32]	; (1f40 <spi_cmd_rsp+0xc0>)
    1f20:	4b08      	ldr	r3, [pc, #32]	; (1f44 <spi_cmd_rsp+0xc4>)
    1f22:	4798      	blx	r3
    1f24:	4808      	ldr	r0, [pc, #32]	; (1f48 <spi_cmd_rsp+0xc8>)
    1f26:	4b09      	ldr	r3, [pc, #36]	; (1f4c <spi_cmd_rsp+0xcc>)
    1f28:	4798      	blx	r3
    1f2a:	200d      	movs	r0, #13
    1f2c:	4b08      	ldr	r3, [pc, #32]	; (1f50 <spi_cmd_rsp+0xd0>)
    1f2e:	4798      	blx	r3
			goto _fail_;
    1f30:	e7d4      	b.n	1edc <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1f32:	2501      	movs	r5, #1
    1f34:	e7d2      	b.n	1edc <spi_cmd_rsp+0x5c>
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	00001e61 	.word	0x00001e61
    1f3c:	00008f4c 	.word	0x00008f4c
    1f40:	00008870 	.word	0x00008870
    1f44:	0000762d 	.word	0x0000762d
    1f48:	000093f0 	.word	0x000093f0
    1f4c:	00007749 	.word	0x00007749
    1f50:	00007661 	.word	0x00007661

00001f54 <spi_data_read>:
	return result;
}
#endif

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f56:	46de      	mov	lr, fp
    1f58:	4657      	mov	r7, sl
    1f5a:	464e      	mov	r6, r9
    1f5c:	4645      	mov	r5, r8
    1f5e:	b5e0      	push	{r5, r6, r7, lr}
    1f60:	b087      	sub	sp, #28
    1f62:	9001      	str	r0, [sp, #4]
    1f64:	4689      	mov	r9, r1
    1f66:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1f68:	2300      	movs	r3, #0
    1f6a:	469a      	mov	sl, r3
    1f6c:	2380      	movs	r3, #128	; 0x80
    1f6e:	019b      	lsls	r3, r3, #6
    1f70:	469b      	mov	fp, r3
    1f72:	466a      	mov	r2, sp
    1f74:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do{
			if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) 
    1f76:	4b3b      	ldr	r3, [pc, #236]	; (2064 <STACK_SIZE+0x64>)
    1f78:	4698      	mov	r8, r3
    1f7a:	e02f      	b.n	1fdc <spi_data_read+0x88>
			{
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1f7c:	22c3      	movs	r2, #195	; 0xc3
    1f7e:	0092      	lsls	r2, r2, #2
    1f80:	4939      	ldr	r1, [pc, #228]	; (2068 <STACK_SIZE+0x68>)
    1f82:	483a      	ldr	r0, [pc, #232]	; (206c <STACK_SIZE+0x6c>)
    1f84:	4b3a      	ldr	r3, [pc, #232]	; (2070 <STACK_SIZE+0x70>)
    1f86:	4798      	blx	r3
    1f88:	483a      	ldr	r0, [pc, #232]	; (2074 <STACK_SIZE+0x74>)
    1f8a:	4b3b      	ldr	r3, [pc, #236]	; (2078 <STACK_SIZE+0x78>)
    1f8c:	4798      	blx	r3
    1f8e:	200d      	movs	r0, #13
    1f90:	4b3a      	ldr	r3, [pc, #232]	; (207c <STACK_SIZE+0x7c>)
    1f92:	4798      	blx	r3
    1f94:	2500      	movs	r5, #0
		sz -= nbytes;

	}while(sz);

	return result;
}
    1f96:	0028      	movs	r0, r5
    1f98:	b007      	add	sp, #28
    1f9a:	bc3c      	pop	{r2, r3, r4, r5}
    1f9c:	4690      	mov	r8, r2
    1f9e:	4699      	mov	r9, r3
    1fa0:	46a2      	mov	sl, r4
    1fa2:	46ab      	mov	fp, r5
    1fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(retry <= 0) 
    1fa6:	2c00      	cmp	r4, #0
    1fa8:	dd2e      	ble.n	2008 <STACK_SIZE+0x8>
		if(M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) 
    1faa:	9b01      	ldr	r3, [sp, #4]
    1fac:	4453      	add	r3, sl
    1fae:	0018      	movs	r0, r3
    1fb0:	0039      	movs	r1, r7
    1fb2:	4b2c      	ldr	r3, [pc, #176]	; (2064 <STACK_SIZE+0x64>)
    1fb4:	4798      	blx	r3
    1fb6:	1e04      	subs	r4, r0, #0
    1fb8:	d133      	bne.n	2022 <STACK_SIZE+0x22>
		if(!clockless)
    1fba:	9b02      	ldr	r3, [sp, #8]
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d103      	bne.n	1fc8 <spi_data_read+0x74>
			if(!gu8Crc_off) 
    1fc0:	4b2f      	ldr	r3, [pc, #188]	; (2080 <STACK_SIZE+0x80>)
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d038      	beq.n	203a <STACK_SIZE+0x3a>
		ix += nbytes;
    1fc8:	4653      	mov	r3, sl
    1fca:	18fb      	adds	r3, r7, r3
    1fcc:	b21b      	sxth	r3, r3
    1fce:	469a      	mov	sl, r3
		sz -= nbytes;
    1fd0:	464b      	mov	r3, r9
    1fd2:	1bdf      	subs	r7, r3, r7
    1fd4:	b2bb      	uxth	r3, r7
    1fd6:	4699      	mov	r9, r3
	}while(sz);
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d041      	beq.n	2060 <STACK_SIZE+0x60>
    1fdc:	464f      	mov	r7, r9
    1fde:	45d9      	cmp	r9, fp
    1fe0:	d901      	bls.n	1fe6 <spi_data_read+0x92>
    1fe2:	466b      	mov	r3, sp
    1fe4:	89df      	ldrh	r7, [r3, #14]
    1fe6:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    1fe8:	240a      	movs	r4, #10
			if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) 
    1fea:	ab04      	add	r3, sp, #16
    1fec:	1cde      	adds	r6, r3, #3
    1fee:	2101      	movs	r1, #1
    1ff0:	0030      	movs	r0, r6
    1ff2:	47c0      	blx	r8
    1ff4:	1e05      	subs	r5, r0, #0
    1ff6:	d1c1      	bne.n	1f7c <spi_data_read+0x28>
			if(((rsp >> 4) & 0xf) == 0xf){break;}
    1ff8:	7833      	ldrb	r3, [r6, #0]
    1ffa:	091b      	lsrs	r3, r3, #4
    1ffc:	2b0f      	cmp	r3, #15
    1ffe:	d0d2      	beq.n	1fa6 <spi_data_read+0x52>
    2000:	3c01      	subs	r4, #1
    2002:	b224      	sxth	r4, r4
		} while (retry--);
    2004:	1c63      	adds	r3, r4, #1
    2006:	d1f2      	bne.n	1fee <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2008:	4a1e      	ldr	r2, [pc, #120]	; (2084 <STACK_SIZE+0x84>)
    200a:	4917      	ldr	r1, [pc, #92]	; (2068 <STACK_SIZE+0x68>)
    200c:	4817      	ldr	r0, [pc, #92]	; (206c <STACK_SIZE+0x6c>)
    200e:	4c18      	ldr	r4, [pc, #96]	; (2070 <STACK_SIZE+0x70>)
    2010:	47a0      	blx	r4
    2012:	ab04      	add	r3, sp, #16
    2014:	78d9      	ldrb	r1, [r3, #3]
    2016:	481c      	ldr	r0, [pc, #112]	; (2088 <STACK_SIZE+0x88>)
    2018:	47a0      	blx	r4
    201a:	200d      	movs	r0, #13
    201c:	4b17      	ldr	r3, [pc, #92]	; (207c <STACK_SIZE+0x7c>)
    201e:	4798      	blx	r3
			break;
    2020:	e7b9      	b.n	1f96 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2022:	4a1a      	ldr	r2, [pc, #104]	; (208c <STACK_SIZE+0x8c>)
    2024:	4910      	ldr	r1, [pc, #64]	; (2068 <STACK_SIZE+0x68>)
    2026:	4811      	ldr	r0, [pc, #68]	; (206c <STACK_SIZE+0x6c>)
    2028:	4b11      	ldr	r3, [pc, #68]	; (2070 <STACK_SIZE+0x70>)
    202a:	4798      	blx	r3
    202c:	4818      	ldr	r0, [pc, #96]	; (2090 <STACK_SIZE+0x90>)
    202e:	4b12      	ldr	r3, [pc, #72]	; (2078 <STACK_SIZE+0x78>)
    2030:	4798      	blx	r3
    2032:	200d      	movs	r0, #13
    2034:	4b11      	ldr	r3, [pc, #68]	; (207c <STACK_SIZE+0x7c>)
    2036:	4798      	blx	r3
			break;
    2038:	e7ad      	b.n	1f96 <spi_data_read+0x42>
				if(M2M_SUCCESS != nmi_spi_read(crc, 2)) 
    203a:	2102      	movs	r1, #2
    203c:	a805      	add	r0, sp, #20
    203e:	4b09      	ldr	r3, [pc, #36]	; (2064 <STACK_SIZE+0x64>)
    2040:	4798      	blx	r3
    2042:	2800      	cmp	r0, #0
    2044:	d0c0      	beq.n	1fc8 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2046:	4a13      	ldr	r2, [pc, #76]	; (2094 <STACK_SIZE+0x94>)
    2048:	4907      	ldr	r1, [pc, #28]	; (2068 <STACK_SIZE+0x68>)
    204a:	4808      	ldr	r0, [pc, #32]	; (206c <STACK_SIZE+0x6c>)
    204c:	4b08      	ldr	r3, [pc, #32]	; (2070 <STACK_SIZE+0x70>)
    204e:	4798      	blx	r3
    2050:	4811      	ldr	r0, [pc, #68]	; (2098 <STACK_SIZE+0x98>)
    2052:	4b09      	ldr	r3, [pc, #36]	; (2078 <STACK_SIZE+0x78>)
    2054:	4798      	blx	r3
    2056:	200d      	movs	r0, #13
    2058:	4b08      	ldr	r3, [pc, #32]	; (207c <STACK_SIZE+0x7c>)
    205a:	4798      	blx	r3
					result = N_FAIL;
    205c:	0025      	movs	r5, r4
					break;
    205e:	e79a      	b.n	1f96 <spi_data_read+0x42>
    2060:	2501      	movs	r5, #1
    2062:	e798      	b.n	1f96 <spi_data_read+0x42>
    2064:	00001e61 	.word	0x00001e61
    2068:	00008f58 	.word	0x00008f58
    206c:	00008870 	.word	0x00008870
    2070:	0000762d 	.word	0x0000762d
    2074:	00009424 	.word	0x00009424
    2078:	00007749 	.word	0x00007749
    207c:	00007661 	.word	0x00007661
    2080:	200000a0 	.word	0x200000a0
    2084:	00000317 	.word	0x00000317
    2088:	00009458 	.word	0x00009458
    208c:	00000321 	.word	0x00000321
    2090:	00009488 	.word	0x00009488
    2094:	0000032f 	.word	0x0000032f
    2098:	000094b8 	.word	0x000094b8

0000209c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    209c:	b5f0      	push	{r4, r5, r6, r7, lr}
    209e:	46d6      	mov	lr, sl
    20a0:	464f      	mov	r7, r9
    20a2:	4646      	mov	r6, r8
    20a4:	b5c0      	push	{r6, r7, lr}
    20a6:	b086      	sub	sp, #24
    20a8:	9003      	str	r0, [sp, #12]
    20aa:	9104      	str	r1, [sp, #16]
    20ac:	2830      	cmp	r0, #48	; 0x30
    20ae:	d80f      	bhi.n	20d0 <spi_write_reg+0x34>
    20b0:	4b30      	ldr	r3, [pc, #192]	; (2174 <spi_write_reg+0xd8>)
    20b2:	781f      	ldrb	r7, [r3, #0]
    20b4:	b2fb      	uxtb	r3, r7
    20b6:	9305      	str	r3, [sp, #20]
    20b8:	2300      	movs	r3, #0
    20ba:	2230      	movs	r2, #48	; 0x30
    20bc:	9903      	ldr	r1, [sp, #12]
    20be:	428a      	cmp	r2, r1
    20c0:	415b      	adcs	r3, r3
    20c2:	b2db      	uxtb	r3, r3
    20c4:	469a      	mov	sl, r3
    20c6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    20c8:	4b2b      	ldr	r3, [pc, #172]	; (2178 <spi_write_reg+0xdc>)
    20ca:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20cc:	46d1      	mov	r9, sl
    20ce:	e033      	b.n	2138 <spi_write_reg+0x9c>
    20d0:	4b2a      	ldr	r3, [pc, #168]	; (217c <spi_write_reg+0xe0>)
    20d2:	781f      	ldrb	r7, [r3, #0]
    20d4:	e7ee      	b.n	20b4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    20d6:	9805      	ldr	r0, [sp, #20]
    20d8:	4b29      	ldr	r3, [pc, #164]	; (2180 <spi_write_reg+0xe4>)
    20da:	4798      	blx	r3
    20dc:	0004      	movs	r4, r0
	if (result != N_OK) {
    20de:	2801      	cmp	r0, #1
    20e0:	d041      	beq.n	2166 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20e2:	4a28      	ldr	r2, [pc, #160]	; (2184 <spi_write_reg+0xe8>)
    20e4:	4928      	ldr	r1, [pc, #160]	; (2188 <spi_write_reg+0xec>)
    20e6:	4829      	ldr	r0, [pc, #164]	; (218c <spi_write_reg+0xf0>)
    20e8:	4e29      	ldr	r6, [pc, #164]	; (2190 <spi_write_reg+0xf4>)
    20ea:	47b0      	blx	r6
    20ec:	9903      	ldr	r1, [sp, #12]
    20ee:	4829      	ldr	r0, [pc, #164]	; (2194 <spi_write_reg+0xf8>)
    20f0:	47b0      	blx	r6
    20f2:	200d      	movs	r0, #13
    20f4:	4b28      	ldr	r3, [pc, #160]	; (2198 <spi_write_reg+0xfc>)
    20f6:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    20f8:	2001      	movs	r0, #1
    20fa:	4e28      	ldr	r6, [pc, #160]	; (219c <spi_write_reg+0x100>)
    20fc:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    20fe:	2300      	movs	r3, #0
    2100:	9300      	str	r3, [sp, #0]
    2102:	2200      	movs	r2, #0
    2104:	2100      	movs	r1, #0
    2106:	20cf      	movs	r0, #207	; 0xcf
    2108:	4f1b      	ldr	r7, [pc, #108]	; (2178 <spi_write_reg+0xdc>)
    210a:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    210c:	20cf      	movs	r0, #207	; 0xcf
    210e:	4b1c      	ldr	r3, [pc, #112]	; (2180 <spi_write_reg+0xe4>)
    2110:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    2112:	22f0      	movs	r2, #240	; 0xf0
    2114:	0092      	lsls	r2, r2, #2
    2116:	491c      	ldr	r1, [pc, #112]	; (2188 <spi_write_reg+0xec>)
    2118:	481c      	ldr	r0, [pc, #112]	; (218c <spi_write_reg+0xf0>)
    211a:	4f1d      	ldr	r7, [pc, #116]	; (2190 <spi_write_reg+0xf4>)
    211c:	47b8      	blx	r7
    211e:	9b04      	ldr	r3, [sp, #16]
    2120:	9a03      	ldr	r2, [sp, #12]
    2122:	0029      	movs	r1, r5
    2124:	481e      	ldr	r0, [pc, #120]	; (21a0 <spi_write_reg+0x104>)
    2126:	47b8      	blx	r7
    2128:	200d      	movs	r0, #13
    212a:	4b1b      	ldr	r3, [pc, #108]	; (2198 <spi_write_reg+0xfc>)
    212c:	4798      	blx	r3
		nm_bsp_sleep(1);
    212e:	2001      	movs	r0, #1
    2130:	47b0      	blx	r6
    2132:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2134:	2d00      	cmp	r5, #0
    2136:	d016      	beq.n	2166 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2138:	464b      	mov	r3, r9
    213a:	9300      	str	r3, [sp, #0]
    213c:	2304      	movs	r3, #4
    213e:	9a04      	ldr	r2, [sp, #16]
    2140:	9f03      	ldr	r7, [sp, #12]
    2142:	0039      	movs	r1, r7
    2144:	9805      	ldr	r0, [sp, #20]
    2146:	47c0      	blx	r8
    2148:	0004      	movs	r4, r0
	if (result != N_OK) {
    214a:	2801      	cmp	r0, #1
    214c:	d0c3      	beq.n	20d6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    214e:	4a15      	ldr	r2, [pc, #84]	; (21a4 <spi_write_reg+0x108>)
    2150:	490d      	ldr	r1, [pc, #52]	; (2188 <spi_write_reg+0xec>)
    2152:	480e      	ldr	r0, [pc, #56]	; (218c <spi_write_reg+0xf0>)
    2154:	4e0e      	ldr	r6, [pc, #56]	; (2190 <spi_write_reg+0xf4>)
    2156:	47b0      	blx	r6
    2158:	0039      	movs	r1, r7
    215a:	4813      	ldr	r0, [pc, #76]	; (21a8 <spi_write_reg+0x10c>)
    215c:	47b0      	blx	r6
    215e:	200d      	movs	r0, #13
    2160:	4b0d      	ldr	r3, [pc, #52]	; (2198 <spi_write_reg+0xfc>)
    2162:	4798      	blx	r3
		goto _FAIL_;
    2164:	e7c8      	b.n	20f8 <spi_write_reg+0x5c>
	}

	return result;
}
    2166:	0020      	movs	r0, r4
    2168:	b006      	add	sp, #24
    216a:	bc1c      	pop	{r2, r3, r4}
    216c:	4690      	mov	r8, r2
    216e:	4699      	mov	r9, r3
    2170:	46a2      	mov	sl, r4
    2172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2174:	00008f30 	.word	0x00008f30
    2178:	00001ce1 	.word	0x00001ce1
    217c:	00008f31 	.word	0x00008f31
    2180:	00001e81 	.word	0x00001e81
    2184:	000003ad 	.word	0x000003ad
    2188:	00008f78 	.word	0x00008f78
    218c:	00008870 	.word	0x00008870
    2190:	0000762d 	.word	0x0000762d
    2194:	000095b0 	.word	0x000095b0
    2198:	00007661 	.word	0x00007661
    219c:	00000129 	.word	0x00000129
    21a0:	000095e8 	.word	0x000095e8
    21a4:	000003a7 	.word	0x000003a7
    21a8:	00009584 	.word	0x00009584

000021ac <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    21ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ae:	46de      	mov	lr, fp
    21b0:	4657      	mov	r7, sl
    21b2:	464e      	mov	r6, r9
    21b4:	4645      	mov	r5, r8
    21b6:	b5e0      	push	{r5, r6, r7, lr}
    21b8:	b087      	sub	sp, #28
    21ba:	9002      	str	r0, [sp, #8]
    21bc:	468b      	mov	fp, r1
    21be:	28ff      	cmp	r0, #255	; 0xff
    21c0:	d80f      	bhi.n	21e2 <spi_read_reg+0x36>
    21c2:	4b42      	ldr	r3, [pc, #264]	; (22cc <spi_read_reg+0x120>)
    21c4:	781f      	ldrb	r7, [r3, #0]
    21c6:	b2fb      	uxtb	r3, r7
    21c8:	9303      	str	r3, [sp, #12]
    21ca:	2300      	movs	r3, #0
    21cc:	22ff      	movs	r2, #255	; 0xff
    21ce:	9902      	ldr	r1, [sp, #8]
    21d0:	428a      	cmp	r2, r1
    21d2:	415b      	adcs	r3, r3
    21d4:	b2db      	uxtb	r3, r3
    21d6:	469a      	mov	sl, r3
    21d8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    21da:	4b3d      	ldr	r3, [pc, #244]	; (22d0 <spi_read_reg+0x124>)
    21dc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    21de:	46d1      	mov	r9, sl
    21e0:	e032      	b.n	2248 <spi_read_reg+0x9c>
    21e2:	4b3c      	ldr	r3, [pc, #240]	; (22d4 <spi_read_reg+0x128>)
    21e4:	781f      	ldrb	r7, [r3, #0]
    21e6:	e7ee      	b.n	21c6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    21e8:	9803      	ldr	r0, [sp, #12]
    21ea:	4b3b      	ldr	r3, [pc, #236]	; (22d8 <spi_read_reg+0x12c>)
    21ec:	4798      	blx	r3
    21ee:	0004      	movs	r4, r0
	if(result != N_OK) 
    21f0:	2801      	cmp	r0, #1
    21f2:	d040      	beq.n	2276 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    21f4:	2286      	movs	r2, #134	; 0x86
    21f6:	00d2      	lsls	r2, r2, #3
    21f8:	4938      	ldr	r1, [pc, #224]	; (22dc <spi_read_reg+0x130>)
    21fa:	4839      	ldr	r0, [pc, #228]	; (22e0 <spi_read_reg+0x134>)
    21fc:	4e39      	ldr	r6, [pc, #228]	; (22e4 <spi_read_reg+0x138>)
    21fe:	47b0      	blx	r6
    2200:	9902      	ldr	r1, [sp, #8]
    2202:	4839      	ldr	r0, [pc, #228]	; (22e8 <spi_read_reg+0x13c>)
    2204:	47b0      	blx	r6
    2206:	200d      	movs	r0, #13
    2208:	4b38      	ldr	r3, [pc, #224]	; (22ec <spi_read_reg+0x140>)
    220a:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    220c:	2001      	movs	r0, #1
    220e:	4e38      	ldr	r6, [pc, #224]	; (22f0 <spi_read_reg+0x144>)
    2210:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2212:	2300      	movs	r3, #0
    2214:	9300      	str	r3, [sp, #0]
    2216:	2200      	movs	r2, #0
    2218:	2100      	movs	r1, #0
    221a:	20cf      	movs	r0, #207	; 0xcf
    221c:	4f2c      	ldr	r7, [pc, #176]	; (22d0 <spi_read_reg+0x124>)
    221e:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2220:	20cf      	movs	r0, #207	; 0xcf
    2222:	4b2d      	ldr	r3, [pc, #180]	; (22d8 <spi_read_reg+0x12c>)
    2224:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    2226:	4a33      	ldr	r2, [pc, #204]	; (22f4 <spi_read_reg+0x148>)
    2228:	492c      	ldr	r1, [pc, #176]	; (22dc <spi_read_reg+0x130>)
    222a:	482d      	ldr	r0, [pc, #180]	; (22e0 <spi_read_reg+0x134>)
    222c:	4f2d      	ldr	r7, [pc, #180]	; (22e4 <spi_read_reg+0x138>)
    222e:	47b8      	blx	r7
    2230:	9a02      	ldr	r2, [sp, #8]
    2232:	0029      	movs	r1, r5
    2234:	4830      	ldr	r0, [pc, #192]	; (22f8 <spi_read_reg+0x14c>)
    2236:	47b8      	blx	r7
    2238:	200d      	movs	r0, #13
    223a:	4b2c      	ldr	r3, [pc, #176]	; (22ec <spi_read_reg+0x140>)
    223c:	4798      	blx	r3
		nm_bsp_sleep(1);
    223e:	2001      	movs	r0, #1
    2240:	47b0      	blx	r6
    2242:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2244:	2d00      	cmp	r5, #0
    2246:	d038      	beq.n	22ba <spi_read_reg+0x10e>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2248:	464b      	mov	r3, r9
    224a:	9300      	str	r3, [sp, #0]
    224c:	2304      	movs	r3, #4
    224e:	2200      	movs	r2, #0
    2250:	9f02      	ldr	r7, [sp, #8]
    2252:	0039      	movs	r1, r7
    2254:	9803      	ldr	r0, [sp, #12]
    2256:	47c0      	blx	r8
    2258:	0004      	movs	r4, r0
	if(result != N_OK) 
    225a:	2801      	cmp	r0, #1
    225c:	d0c4      	beq.n	21e8 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    225e:	4a27      	ldr	r2, [pc, #156]	; (22fc <spi_read_reg+0x150>)
    2260:	491e      	ldr	r1, [pc, #120]	; (22dc <spi_read_reg+0x130>)
    2262:	481f      	ldr	r0, [pc, #124]	; (22e0 <spi_read_reg+0x134>)
    2264:	4e1f      	ldr	r6, [pc, #124]	; (22e4 <spi_read_reg+0x138>)
    2266:	47b0      	blx	r6
    2268:	0039      	movs	r1, r7
    226a:	4825      	ldr	r0, [pc, #148]	; (2300 <spi_read_reg+0x154>)
    226c:	47b0      	blx	r6
    226e:	200d      	movs	r0, #13
    2270:	4b1e      	ldr	r3, [pc, #120]	; (22ec <spi_read_reg+0x140>)
    2272:	4798      	blx	r3
		goto _FAIL_;
    2274:	e7ca      	b.n	220c <spi_read_reg+0x60>
	result = spi_data_read(&tmp[0], 4, clockless);
    2276:	464a      	mov	r2, r9
    2278:	2104      	movs	r1, #4
    227a:	a805      	add	r0, sp, #20
    227c:	4b21      	ldr	r3, [pc, #132]	; (2304 <spi_read_reg+0x158>)
    227e:	4798      	blx	r3
    2280:	0004      	movs	r4, r0
	if(result != N_OK) 
    2282:	2801      	cmp	r0, #1
    2284:	d00c      	beq.n	22a0 <spi_read_reg+0xf4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2286:	2287      	movs	r2, #135	; 0x87
    2288:	00d2      	lsls	r2, r2, #3
    228a:	4914      	ldr	r1, [pc, #80]	; (22dc <spi_read_reg+0x130>)
    228c:	4814      	ldr	r0, [pc, #80]	; (22e0 <spi_read_reg+0x134>)
    228e:	4b15      	ldr	r3, [pc, #84]	; (22e4 <spi_read_reg+0x138>)
    2290:	4798      	blx	r3
    2292:	481d      	ldr	r0, [pc, #116]	; (2308 <spi_read_reg+0x15c>)
    2294:	4b1d      	ldr	r3, [pc, #116]	; (230c <spi_read_reg+0x160>)
    2296:	4798      	blx	r3
    2298:	200d      	movs	r0, #13
    229a:	4b14      	ldr	r3, [pc, #80]	; (22ec <spi_read_reg+0x140>)
    229c:	4798      	blx	r3
		goto _FAIL_;
    229e:	e7b5      	b.n	220c <spi_read_reg+0x60>
		((uint32)tmp[1] << 8) |
    22a0:	aa05      	add	r2, sp, #20
    22a2:	7853      	ldrb	r3, [r2, #1]
    22a4:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    22a6:	7891      	ldrb	r1, [r2, #2]
    22a8:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    22aa:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    22ac:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    22ae:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    22b0:	78d2      	ldrb	r2, [r2, #3]
    22b2:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    22b4:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    22b6:	465a      	mov	r2, fp
    22b8:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    22ba:	0020      	movs	r0, r4
    22bc:	b007      	add	sp, #28
    22be:	bc3c      	pop	{r2, r3, r4, r5}
    22c0:	4690      	mov	r8, r2
    22c2:	4699      	mov	r9, r3
    22c4:	46a2      	mov	sl, r4
    22c6:	46ab      	mov	fp, r5
    22c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	00008f32 	.word	0x00008f32
    22d0:	00001ce1 	.word	0x00001ce1
    22d4:	00008f33 	.word	0x00008f33
    22d8:	00001e81 	.word	0x00001e81
    22dc:	00008f98 	.word	0x00008f98
    22e0:	00008870 	.word	0x00008870
    22e4:	0000762d 	.word	0x0000762d
    22e8:	00009518 	.word	0x00009518
    22ec:	00007661 	.word	0x00007661
    22f0:	00000129 	.word	0x00000129
    22f4:	00000451 	.word	0x00000451
    22f8:	0000956c 	.word	0x0000956c
    22fc:	00000429 	.word	0x00000429
    2300:	000094ec 	.word	0x000094ec
    2304:	00001f55 	.word	0x00001f55
    2308:	0000954c 	.word	0x0000954c
    230c:	00007749 	.word	0x00007749

00002310 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    2310:	b510      	push	{r4, lr}
    2312:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2314:	2300      	movs	r3, #0
    2316:	9300      	str	r3, [sp, #0]
    2318:	2200      	movs	r2, #0
    231a:	2100      	movs	r1, #0
    231c:	20cf      	movs	r0, #207	; 0xcf
    231e:	4c04      	ldr	r4, [pc, #16]	; (2330 <nm_spi_reset+0x20>)
    2320:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    2322:	20cf      	movs	r0, #207	; 0xcf
    2324:	4b03      	ldr	r3, [pc, #12]	; (2334 <nm_spi_reset+0x24>)
    2326:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2328:	2000      	movs	r0, #0
    232a:	b002      	add	sp, #8
    232c:	bd10      	pop	{r4, pc}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	00001ce1 	.word	0x00001ce1
    2334:	00001e81 	.word	0x00001e81

00002338 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2338:	2200      	movs	r2, #0
    233a:	4b02      	ldr	r3, [pc, #8]	; (2344 <nm_spi_deinit+0xc>)
    233c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    233e:	2000      	movs	r0, #0
    2340:	4770      	bx	lr
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	200000a0 	.word	0x200000a0

00002348 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2348:	b500      	push	{lr}
    234a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    234c:	a901      	add	r1, sp, #4
    234e:	4b02      	ldr	r3, [pc, #8]	; (2358 <nm_spi_read_reg+0x10>)
    2350:	4798      	blx	r3

	return u32Val;
}
    2352:	9801      	ldr	r0, [sp, #4]
    2354:	b003      	add	sp, #12
    2356:	bd00      	pop	{pc}
    2358:	000021ad 	.word	0x000021ad

0000235c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    235c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    235e:	4b04      	ldr	r3, [pc, #16]	; (2370 <nm_spi_read_reg_with_ret+0x14>)
    2360:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2362:	2300      	movs	r3, #0
    2364:	2801      	cmp	r0, #1
    2366:	d101      	bne.n	236c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2368:	0018      	movs	r0, r3
    236a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    236c:	3b06      	subs	r3, #6
    236e:	e7fb      	b.n	2368 <nm_spi_read_reg_with_ret+0xc>
    2370:	000021ad 	.word	0x000021ad

00002374 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2374:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2376:	4b04      	ldr	r3, [pc, #16]	; (2388 <nm_spi_write_reg+0x14>)
    2378:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    237a:	2300      	movs	r3, #0
    237c:	2801      	cmp	r0, #1
    237e:	d101      	bne.n	2384 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2380:	0018      	movs	r0, r3
    2382:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2384:	3b06      	subs	r3, #6
    2386:	e7fb      	b.n	2380 <nm_spi_write_reg+0xc>
    2388:	0000209d 	.word	0x0000209d

0000238c <nm_spi_init>:
{
    238c:	b510      	push	{r4, lr}
    238e:	b082      	sub	sp, #8
	uint32 reg = 0;
    2390:	2300      	movs	r3, #0
    2392:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2394:	4a35      	ldr	r2, [pc, #212]	; (246c <nm_spi_init+0xe0>)
    2396:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2398:	4669      	mov	r1, sp
    239a:	4835      	ldr	r0, [pc, #212]	; (2470 <nm_spi_init+0xe4>)
    239c:	4b35      	ldr	r3, [pc, #212]	; (2474 <nm_spi_init+0xe8>)
    239e:	4798      	blx	r3
    23a0:	2800      	cmp	r0, #0
    23a2:	d028      	beq.n	23f6 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    23a4:	4b31      	ldr	r3, [pc, #196]	; (246c <nm_spi_init+0xe0>)
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d10d      	bne.n	23c8 <nm_spi_init+0x3c>
		reg &= ~0x70;
    23ac:	337c      	adds	r3, #124	; 0x7c
    23ae:	9900      	ldr	r1, [sp, #0]
    23b0:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    23b2:	3b2c      	subs	r3, #44	; 0x2c
    23b4:	4319      	orrs	r1, r3
    23b6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    23b8:	482d      	ldr	r0, [pc, #180]	; (2470 <nm_spi_init+0xe4>)
    23ba:	4b2f      	ldr	r3, [pc, #188]	; (2478 <nm_spi_init+0xec>)
    23bc:	4798      	blx	r3
    23be:	1e04      	subs	r4, r0, #0
    23c0:	d039      	beq.n	2436 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    23c2:	2201      	movs	r2, #1
    23c4:	4b29      	ldr	r3, [pc, #164]	; (246c <nm_spi_init+0xe0>)
    23c6:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    23c8:	a901      	add	r1, sp, #4
    23ca:	2080      	movs	r0, #128	; 0x80
    23cc:	0140      	lsls	r0, r0, #5
    23ce:	4b29      	ldr	r3, [pc, #164]	; (2474 <nm_spi_init+0xe8>)
    23d0:	4798      	blx	r3
    23d2:	2800      	cmp	r0, #0
    23d4:	d03b      	beq.n	244e <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    23d6:	4c26      	ldr	r4, [pc, #152]	; (2470 <nm_spi_init+0xe4>)
    23d8:	0020      	movs	r0, r4
    23da:	4b28      	ldr	r3, [pc, #160]	; (247c <nm_spi_init+0xf0>)
    23dc:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    23de:	2370      	movs	r3, #112	; 0x70
    23e0:	0001      	movs	r1, r0
    23e2:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    23e4:	2050      	movs	r0, #80	; 0x50
    23e6:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    23e8:	0020      	movs	r0, r4
    23ea:	4b25      	ldr	r3, [pc, #148]	; (2480 <nm_spi_init+0xf4>)
    23ec:	4798      	blx	r3
	return M2M_SUCCESS;
    23ee:	2400      	movs	r4, #0
}
    23f0:	0020      	movs	r0, r4
    23f2:	b002      	add	sp, #8
    23f4:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    23f6:	2201      	movs	r2, #1
    23f8:	4b1c      	ldr	r3, [pc, #112]	; (246c <nm_spi_init+0xe0>)
    23fa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    23fc:	4a21      	ldr	r2, [pc, #132]	; (2484 <nm_spi_init+0xf8>)
    23fe:	4922      	ldr	r1, [pc, #136]	; (2488 <nm_spi_init+0xfc>)
    2400:	4822      	ldr	r0, [pc, #136]	; (248c <nm_spi_init+0x100>)
    2402:	4b23      	ldr	r3, [pc, #140]	; (2490 <nm_spi_init+0x104>)
    2404:	4798      	blx	r3
    2406:	4823      	ldr	r0, [pc, #140]	; (2494 <nm_spi_init+0x108>)
    2408:	4b23      	ldr	r3, [pc, #140]	; (2498 <nm_spi_init+0x10c>)
    240a:	4798      	blx	r3
    240c:	200d      	movs	r0, #13
    240e:	4b23      	ldr	r3, [pc, #140]	; (249c <nm_spi_init+0x110>)
    2410:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2412:	4669      	mov	r1, sp
    2414:	4816      	ldr	r0, [pc, #88]	; (2470 <nm_spi_init+0xe4>)
    2416:	4b17      	ldr	r3, [pc, #92]	; (2474 <nm_spi_init+0xe8>)
    2418:	4798      	blx	r3
    241a:	1e04      	subs	r4, r0, #0
    241c:	d1c2      	bne.n	23a4 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    241e:	4a20      	ldr	r2, [pc, #128]	; (24a0 <nm_spi_init+0x114>)
    2420:	4919      	ldr	r1, [pc, #100]	; (2488 <nm_spi_init+0xfc>)
    2422:	481a      	ldr	r0, [pc, #104]	; (248c <nm_spi_init+0x100>)
    2424:	4b1a      	ldr	r3, [pc, #104]	; (2490 <nm_spi_init+0x104>)
    2426:	4798      	blx	r3
    2428:	481e      	ldr	r0, [pc, #120]	; (24a4 <nm_spi_init+0x118>)
    242a:	4b1b      	ldr	r3, [pc, #108]	; (2498 <nm_spi_init+0x10c>)
    242c:	4798      	blx	r3
    242e:	200d      	movs	r0, #13
    2430:	4b1a      	ldr	r3, [pc, #104]	; (249c <nm_spi_init+0x110>)
    2432:	4798      	blx	r3
			return 0;
    2434:	e7dc      	b.n	23f0 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2436:	4a1c      	ldr	r2, [pc, #112]	; (24a8 <nm_spi_init+0x11c>)
    2438:	4913      	ldr	r1, [pc, #76]	; (2488 <nm_spi_init+0xfc>)
    243a:	4814      	ldr	r0, [pc, #80]	; (248c <nm_spi_init+0x100>)
    243c:	4b14      	ldr	r3, [pc, #80]	; (2490 <nm_spi_init+0x104>)
    243e:	4798      	blx	r3
    2440:	481a      	ldr	r0, [pc, #104]	; (24ac <nm_spi_init+0x120>)
    2442:	4b15      	ldr	r3, [pc, #84]	; (2498 <nm_spi_init+0x10c>)
    2444:	4798      	blx	r3
    2446:	200d      	movs	r0, #13
    2448:	4b14      	ldr	r3, [pc, #80]	; (249c <nm_spi_init+0x110>)
    244a:	4798      	blx	r3
			return 0;
    244c:	e7d0      	b.n	23f0 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    244e:	4a18      	ldr	r2, [pc, #96]	; (24b0 <nm_spi_init+0x124>)
    2450:	490d      	ldr	r1, [pc, #52]	; (2488 <nm_spi_init+0xfc>)
    2452:	480e      	ldr	r0, [pc, #56]	; (248c <nm_spi_init+0x100>)
    2454:	4b0e      	ldr	r3, [pc, #56]	; (2490 <nm_spi_init+0x104>)
    2456:	4798      	blx	r3
    2458:	4816      	ldr	r0, [pc, #88]	; (24b4 <nm_spi_init+0x128>)
    245a:	4b0f      	ldr	r3, [pc, #60]	; (2498 <nm_spi_init+0x10c>)
    245c:	4798      	blx	r3
    245e:	200d      	movs	r0, #13
    2460:	4b0e      	ldr	r3, [pc, #56]	; (249c <nm_spi_init+0x110>)
    2462:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2464:	2406      	movs	r4, #6
    2466:	4264      	negs	r4, r4
    2468:	e7c2      	b.n	23f0 <nm_spi_init+0x64>
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	200000a0 	.word	0x200000a0
    2470:	0000e824 	.word	0x0000e824
    2474:	000021ad 	.word	0x000021ad
    2478:	0000209d 	.word	0x0000209d
    247c:	00002349 	.word	0x00002349
    2480:	00002375 	.word	0x00002375
    2484:	000004dc 	.word	0x000004dc
    2488:	00008fb4 	.word	0x00008fb4
    248c:	00008870 	.word	0x00008870
    2490:	0000762d 	.word	0x0000762d
    2494:	000090c0 	.word	0x000090c0
    2498:	00007749 	.word	0x00007749
    249c:	00007661 	.word	0x00007661
    24a0:	000004df 	.word	0x000004df
    24a4:	00009110 	.word	0x00009110
    24a8:	000004e9 	.word	0x000004e9
    24ac:	0000913c 	.word	0x0000913c
    24b0:	000004f3 	.word	0x000004f3
    24b4:	00009170 	.word	0x00009170

000024b8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    24b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ba:	46de      	mov	lr, fp
    24bc:	4657      	mov	r7, sl
    24be:	464e      	mov	r6, r9
    24c0:	4645      	mov	r5, r8
    24c2:	b5e0      	push	{r5, r6, r7, lr}
    24c4:	b087      	sub	sp, #28
    24c6:	9002      	str	r0, [sp, #8]
    24c8:	9103      	str	r1, [sp, #12]
    24ca:	0016      	movs	r6, r2
    24cc:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    24ce:	2300      	movs	r3, #0
    24d0:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    24d2:	2400      	movs	r4, #0
    24d4:	4b3f      	ldr	r3, [pc, #252]	; (25d4 <nm_spi_read_block+0x11c>)
    24d6:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    24d8:	46a9      	mov	r9, r5
    24da:	e038      	b.n	254e <nm_spi_read_block+0x96>
		single_byte_workaround = 1;
    24dc:	2301      	movs	r3, #1
    24de:	469b      	mov	fp, r3
		size = 2;
    24e0:	3601      	adds	r6, #1
    24e2:	e036      	b.n	2552 <nm_spi_read_block+0x9a>
	result = spi_cmd_rsp(cmd);
    24e4:	20c8      	movs	r0, #200	; 0xc8
    24e6:	4b3c      	ldr	r3, [pc, #240]	; (25d8 <nm_spi_read_block+0x120>)
    24e8:	4798      	blx	r3
	if (result != N_OK) {
    24ea:	2801      	cmp	r0, #1
    24ec:	d046      	beq.n	257c <nm_spi_read_block+0xc4>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    24ee:	228f      	movs	r2, #143	; 0x8f
    24f0:	00d2      	lsls	r2, r2, #3
    24f2:	493a      	ldr	r1, [pc, #232]	; (25dc <nm_spi_read_block+0x124>)
    24f4:	483a      	ldr	r0, [pc, #232]	; (25e0 <nm_spi_read_block+0x128>)
    24f6:	4f3b      	ldr	r7, [pc, #236]	; (25e4 <nm_spi_read_block+0x12c>)
    24f8:	47b8      	blx	r7
    24fa:	9902      	ldr	r1, [sp, #8]
    24fc:	483a      	ldr	r0, [pc, #232]	; (25e8 <nm_spi_read_block+0x130>)
    24fe:	47b8      	blx	r7
    2500:	200d      	movs	r0, #13
    2502:	4b3a      	ldr	r3, [pc, #232]	; (25ec <nm_spi_read_block+0x134>)
    2504:	4798      	blx	r3
		nm_bsp_sleep(1);
    2506:	2001      	movs	r0, #1
    2508:	4f39      	ldr	r7, [pc, #228]	; (25f0 <nm_spi_read_block+0x138>)
    250a:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    250c:	9400      	str	r4, [sp, #0]
    250e:	0023      	movs	r3, r4
    2510:	0022      	movs	r2, r4
    2512:	0021      	movs	r1, r4
    2514:	20cf      	movs	r0, #207	; 0xcf
    2516:	4d2f      	ldr	r5, [pc, #188]	; (25d4 <nm_spi_read_block+0x11c>)
    2518:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    251a:	20cf      	movs	r0, #207	; 0xcf
    251c:	4b2e      	ldr	r3, [pc, #184]	; (25d8 <nm_spi_read_block+0x120>)
    251e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    2520:	4a34      	ldr	r2, [pc, #208]	; (25f4 <nm_spi_read_block+0x13c>)
    2522:	492e      	ldr	r1, [pc, #184]	; (25dc <nm_spi_read_block+0x124>)
    2524:	482e      	ldr	r0, [pc, #184]	; (25e0 <nm_spi_read_block+0x128>)
    2526:	4b2f      	ldr	r3, [pc, #188]	; (25e4 <nm_spi_read_block+0x12c>)
    2528:	469a      	mov	sl, r3
    252a:	4798      	blx	r3
    252c:	0033      	movs	r3, r6
    252e:	9a02      	ldr	r2, [sp, #8]
    2530:	4649      	mov	r1, r9
    2532:	4831      	ldr	r0, [pc, #196]	; (25f8 <nm_spi_read_block+0x140>)
    2534:	47d0      	blx	sl
    2536:	200d      	movs	r0, #13
    2538:	4b2c      	ldr	r3, [pc, #176]	; (25ec <nm_spi_read_block+0x134>)
    253a:	4798      	blx	r3
		nm_bsp_sleep(1);
    253c:	2001      	movs	r0, #1
    253e:	47b8      	blx	r7
    2540:	2301      	movs	r3, #1
    2542:	425b      	negs	r3, r3
    2544:	469c      	mov	ip, r3
    2546:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    2548:	464b      	mov	r3, r9
    254a:	2b00      	cmp	r3, #0
    254c:	d039      	beq.n	25c2 <nm_spi_read_block+0x10a>
	if (size == 1)
    254e:	2e01      	cmp	r6, #1
    2550:	d0c4      	beq.n	24dc <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    2552:	9400      	str	r4, [sp, #0]
    2554:	0033      	movs	r3, r6
    2556:	0022      	movs	r2, r4
    2558:	9d02      	ldr	r5, [sp, #8]
    255a:	0029      	movs	r1, r5
    255c:	20c8      	movs	r0, #200	; 0xc8
    255e:	47c0      	blx	r8
	if (result != N_OK) {
    2560:	2801      	cmp	r0, #1
    2562:	d0bf      	beq.n	24e4 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2564:	4a25      	ldr	r2, [pc, #148]	; (25fc <nm_spi_read_block+0x144>)
    2566:	491d      	ldr	r1, [pc, #116]	; (25dc <nm_spi_read_block+0x124>)
    2568:	481d      	ldr	r0, [pc, #116]	; (25e0 <nm_spi_read_block+0x128>)
    256a:	4f1e      	ldr	r7, [pc, #120]	; (25e4 <nm_spi_read_block+0x12c>)
    256c:	47b8      	blx	r7
    256e:	0029      	movs	r1, r5
    2570:	4823      	ldr	r0, [pc, #140]	; (2600 <nm_spi_read_block+0x148>)
    2572:	47b8      	blx	r7
    2574:	200d      	movs	r0, #13
    2576:	4b1d      	ldr	r3, [pc, #116]	; (25ec <nm_spi_read_block+0x134>)
    2578:	4798      	blx	r3
    257a:	e7c4      	b.n	2506 <nm_spi_read_block+0x4e>
	if (single_byte_workaround)
    257c:	465b      	mov	r3, fp
    257e:	2b00      	cmp	r3, #0
    2580:	d017      	beq.n	25b2 <nm_spi_read_block+0xfa>
		result = spi_data_read(tmp, size,0);
    2582:	af05      	add	r7, sp, #20
    2584:	0022      	movs	r2, r4
    2586:	0031      	movs	r1, r6
    2588:	0038      	movs	r0, r7
    258a:	4b1e      	ldr	r3, [pc, #120]	; (2604 <nm_spi_read_block+0x14c>)
    258c:	4798      	blx	r3
		buf[0] = tmp[0];
    258e:	783b      	ldrb	r3, [r7, #0]
    2590:	9a03      	ldr	r2, [sp, #12]
    2592:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    2594:	2801      	cmp	r0, #1
    2596:	d012      	beq.n	25be <nm_spi_read_block+0x106>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2598:	2291      	movs	r2, #145	; 0x91
    259a:	00d2      	lsls	r2, r2, #3
    259c:	490f      	ldr	r1, [pc, #60]	; (25dc <nm_spi_read_block+0x124>)
    259e:	4810      	ldr	r0, [pc, #64]	; (25e0 <nm_spi_read_block+0x128>)
    25a0:	4b10      	ldr	r3, [pc, #64]	; (25e4 <nm_spi_read_block+0x12c>)
    25a2:	4798      	blx	r3
    25a4:	4818      	ldr	r0, [pc, #96]	; (2608 <nm_spi_read_block+0x150>)
    25a6:	4b19      	ldr	r3, [pc, #100]	; (260c <nm_spi_read_block+0x154>)
    25a8:	4798      	blx	r3
    25aa:	200d      	movs	r0, #13
    25ac:	4b0f      	ldr	r3, [pc, #60]	; (25ec <nm_spi_read_block+0x134>)
    25ae:	4798      	blx	r3
    25b0:	e7a9      	b.n	2506 <nm_spi_read_block+0x4e>
		result = spi_data_read(buf, size,0);
    25b2:	0022      	movs	r2, r4
    25b4:	0031      	movs	r1, r6
    25b6:	9803      	ldr	r0, [sp, #12]
    25b8:	4b12      	ldr	r3, [pc, #72]	; (2604 <nm_spi_read_block+0x14c>)
    25ba:	4798      	blx	r3
    25bc:	e7ea      	b.n	2594 <nm_spi_read_block+0xdc>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    25be:	2000      	movs	r0, #0
    25c0:	e001      	b.n	25c6 <nm_spi_read_block+0x10e>
	else s8Ret = M2M_ERR_BUS_FAIL;
    25c2:	2006      	movs	r0, #6
    25c4:	4240      	negs	r0, r0

	return s8Ret;
}
    25c6:	b007      	add	sp, #28
    25c8:	bc3c      	pop	{r2, r3, r4, r5}
    25ca:	4690      	mov	r8, r2
    25cc:	4699      	mov	r9, r3
    25ce:	46a2      	mov	sl, r4
    25d0:	46ab      	mov	fp, r5
    25d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d4:	00001ce1 	.word	0x00001ce1
    25d8:	00001e81 	.word	0x00001e81
    25dc:	00008fa8 	.word	0x00008fa8
    25e0:	00008870 	.word	0x00008870
    25e4:	0000762d 	.word	0x0000762d
    25e8:	000091c4 	.word	0x000091c4
    25ec:	00007661 	.word	0x00007661
    25f0:	00000129 	.word	0x00000129
    25f4:	00000499 	.word	0x00000499
    25f8:	00009224 	.word	0x00009224
    25fc:	00000472 	.word	0x00000472
    2600:	00009194 	.word	0x00009194
    2604:	00001f55 	.word	0x00001f55
    2608:	000091fc 	.word	0x000091fc
    260c:	00007749 	.word	0x00007749

00002610 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2610:	b5f0      	push	{r4, r5, r6, r7, lr}
    2612:	46de      	mov	lr, fp
    2614:	4647      	mov	r7, r8
    2616:	b580      	push	{r7, lr}
    2618:	b089      	sub	sp, #36	; 0x24
    261a:	9004      	str	r0, [sp, #16]
    261c:	468b      	mov	fp, r1
    261e:	9203      	str	r2, [sp, #12]
    2620:	260a      	movs	r6, #10
    2622:	2780      	movs	r7, #128	; 0x80
    2624:	01bf      	lsls	r7, r7, #6
    2626:	466b      	mov	r3, sp
    2628:	82df      	strh	r7, [r3, #22]
    262a:	0035      	movs	r5, r6
    262c:	e02d      	b.n	268a <nm_spi_write_block+0x7a>
		size = 2;
    262e:	3301      	adds	r3, #1
    2630:	9303      	str	r3, [sp, #12]
    2632:	e02d      	b.n	2690 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    2634:	4a82      	ldr	r2, [pc, #520]	; (2840 <nm_spi_write_block+0x230>)
    2636:	4983      	ldr	r1, [pc, #524]	; (2844 <nm_spi_write_block+0x234>)
    2638:	4883      	ldr	r0, [pc, #524]	; (2848 <nm_spi_write_block+0x238>)
    263a:	4c84      	ldr	r4, [pc, #528]	; (284c <nm_spi_write_block+0x23c>)
    263c:	47a0      	blx	r4
    263e:	0031      	movs	r1, r6
    2640:	4883      	ldr	r0, [pc, #524]	; (2850 <nm_spi_write_block+0x240>)
    2642:	47a0      	blx	r4
    2644:	200d      	movs	r0, #13
    2646:	4b83      	ldr	r3, [pc, #524]	; (2854 <nm_spi_write_block+0x244>)
    2648:	4798      	blx	r3
		nm_bsp_sleep(1);
    264a:	2001      	movs	r0, #1
    264c:	4c82      	ldr	r4, [pc, #520]	; (2858 <nm_spi_write_block+0x248>)
    264e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2650:	2300      	movs	r3, #0
    2652:	9300      	str	r3, [sp, #0]
    2654:	2200      	movs	r2, #0
    2656:	2100      	movs	r1, #0
    2658:	20cf      	movs	r0, #207	; 0xcf
    265a:	4e80      	ldr	r6, [pc, #512]	; (285c <nm_spi_write_block+0x24c>)
    265c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    265e:	20cf      	movs	r0, #207	; 0xcf
    2660:	4b7f      	ldr	r3, [pc, #508]	; (2860 <nm_spi_write_block+0x250>)
    2662:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    2664:	4a7f      	ldr	r2, [pc, #508]	; (2864 <nm_spi_write_block+0x254>)
    2666:	4977      	ldr	r1, [pc, #476]	; (2844 <nm_spi_write_block+0x234>)
    2668:	4877      	ldr	r0, [pc, #476]	; (2848 <nm_spi_write_block+0x238>)
    266a:	4e78      	ldr	r6, [pc, #480]	; (284c <nm_spi_write_block+0x23c>)
    266c:	47b0      	blx	r6
    266e:	9b03      	ldr	r3, [sp, #12]
    2670:	9a04      	ldr	r2, [sp, #16]
    2672:	0029      	movs	r1, r5
    2674:	487c      	ldr	r0, [pc, #496]	; (2868 <nm_spi_write_block+0x258>)
    2676:	47b0      	blx	r6
    2678:	200d      	movs	r0, #13
    267a:	4b76      	ldr	r3, [pc, #472]	; (2854 <nm_spi_write_block+0x244>)
    267c:	4798      	blx	r3
		nm_bsp_sleep(1);
    267e:	2001      	movs	r0, #1
    2680:	47a0      	blx	r4
    2682:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    2684:	2d00      	cmp	r5, #0
    2686:	d100      	bne.n	268a <nm_spi_write_block+0x7a>
    2688:	e0d2      	b.n	2830 <nm_spi_write_block+0x220>
	if (size == 1)
    268a:	9b03      	ldr	r3, [sp, #12]
    268c:	2b01      	cmp	r3, #1
    268e:	d0ce      	beq.n	262e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    2690:	2300      	movs	r3, #0
    2692:	9300      	str	r3, [sp, #0]
    2694:	9b03      	ldr	r3, [sp, #12]
    2696:	2200      	movs	r2, #0
    2698:	9e04      	ldr	r6, [sp, #16]
    269a:	0031      	movs	r1, r6
    269c:	20c7      	movs	r0, #199	; 0xc7
    269e:	4c6f      	ldr	r4, [pc, #444]	; (285c <nm_spi_write_block+0x24c>)
    26a0:	47a0      	blx	r4
	if (result != N_OK) {
    26a2:	2801      	cmp	r0, #1
    26a4:	d1c6      	bne.n	2634 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    26a6:	20c7      	movs	r0, #199	; 0xc7
    26a8:	4b6d      	ldr	r3, [pc, #436]	; (2860 <nm_spi_write_block+0x250>)
    26aa:	4798      	blx	r3
	if (result != N_OK) {
    26ac:	2801      	cmp	r0, #1
    26ae:	d00b      	beq.n	26c8 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    26b0:	4a6e      	ldr	r2, [pc, #440]	; (286c <nm_spi_write_block+0x25c>)
    26b2:	4964      	ldr	r1, [pc, #400]	; (2844 <nm_spi_write_block+0x234>)
    26b4:	4864      	ldr	r0, [pc, #400]	; (2848 <nm_spi_write_block+0x238>)
    26b6:	4c65      	ldr	r4, [pc, #404]	; (284c <nm_spi_write_block+0x23c>)
    26b8:	47a0      	blx	r4
    26ba:	9904      	ldr	r1, [sp, #16]
    26bc:	486c      	ldr	r0, [pc, #432]	; (2870 <nm_spi_write_block+0x260>)
    26be:	47a0      	blx	r4
    26c0:	200d      	movs	r0, #13
    26c2:	4b64      	ldr	r3, [pc, #400]	; (2854 <nm_spi_write_block+0x244>)
    26c4:	4798      	blx	r3
    26c6:	e7c0      	b.n	264a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    26c8:	2200      	movs	r2, #0
    26ca:	ab07      	add	r3, sp, #28
    26cc:	801a      	strh	r2, [r3, #0]
    26ce:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    26d0:	2600      	movs	r6, #0
				order = 0x1;
    26d2:	46a8      	mov	r8, r5
    26d4:	0035      	movs	r5, r6
    26d6:	0026      	movs	r6, r4
    26d8:	e021      	b.n	271e <nm_spi_write_block+0x10e>
				order = 0x2;
    26da:	2300      	movs	r3, #0
    26dc:	42b7      	cmp	r7, r6
    26de:	415b      	adcs	r3, r3
    26e0:	3302      	adds	r3, #2
		cmd |= order;
    26e2:	200b      	movs	r0, #11
    26e4:	aa04      	add	r2, sp, #16
    26e6:	4694      	mov	ip, r2
    26e8:	4460      	add	r0, ip
    26ea:	2210      	movs	r2, #16
    26ec:	4252      	negs	r2, r2
    26ee:	4313      	orrs	r3, r2
    26f0:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    26f2:	2101      	movs	r1, #1
    26f4:	4b5f      	ldr	r3, [pc, #380]	; (2874 <nm_spi_write_block+0x264>)
    26f6:	4798      	blx	r3
    26f8:	2800      	cmp	r0, #0
    26fa:	d11d      	bne.n	2738 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    26fc:	465b      	mov	r3, fp
    26fe:	1958      	adds	r0, r3, r5
    2700:	0021      	movs	r1, r4
    2702:	4b5c      	ldr	r3, [pc, #368]	; (2874 <nm_spi_write_block+0x264>)
    2704:	4798      	blx	r3
    2706:	2800      	cmp	r0, #0
    2708:	d12e      	bne.n	2768 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    270a:	4b5b      	ldr	r3, [pc, #364]	; (2878 <nm_spi_write_block+0x268>)
    270c:	781b      	ldrb	r3, [r3, #0]
    270e:	2b00      	cmp	r3, #0
    2710:	d037      	beq.n	2782 <nm_spi_write_block+0x172>
		ix += nbytes;
    2712:	1965      	adds	r5, r4, r5
    2714:	b22d      	sxth	r5, r5
		sz -= nbytes;
    2716:	1b36      	subs	r6, r6, r4
    2718:	b2b6      	uxth	r6, r6
	} while (sz);
    271a:	2e00      	cmp	r6, #0
    271c:	d052      	beq.n	27c4 <nm_spi_write_block+0x1b4>
    271e:	1c34      	adds	r4, r6, #0
    2720:	42be      	cmp	r6, r7
    2722:	d901      	bls.n	2728 <nm_spi_write_block+0x118>
    2724:	466b      	mov	r3, sp
    2726:	8adc      	ldrh	r4, [r3, #22]
    2728:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    272a:	2d00      	cmp	r5, #0
    272c:	d1d5      	bne.n	26da <nm_spi_write_block+0xca>
				order = 0x3;
    272e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    2730:	42be      	cmp	r6, r7
    2732:	d9d6      	bls.n	26e2 <nm_spi_write_block+0xd2>
				order = 0x1;
    2734:	3b02      	subs	r3, #2
    2736:	e7d4      	b.n	26e2 <nm_spi_write_block+0xd2>
    2738:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    273a:	4a50      	ldr	r2, [pc, #320]	; (287c <nm_spi_write_block+0x26c>)
    273c:	4950      	ldr	r1, [pc, #320]	; (2880 <nm_spi_write_block+0x270>)
    273e:	4842      	ldr	r0, [pc, #264]	; (2848 <nm_spi_write_block+0x238>)
    2740:	4b42      	ldr	r3, [pc, #264]	; (284c <nm_spi_write_block+0x23c>)
    2742:	4798      	blx	r3
    2744:	484f      	ldr	r0, [pc, #316]	; (2884 <nm_spi_write_block+0x274>)
    2746:	4b50      	ldr	r3, [pc, #320]	; (2888 <nm_spi_write_block+0x278>)
    2748:	4798      	blx	r3
    274a:	200d      	movs	r0, #13
    274c:	4b41      	ldr	r3, [pc, #260]	; (2854 <nm_spi_write_block+0x244>)
    274e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2750:	4a4e      	ldr	r2, [pc, #312]	; (288c <nm_spi_write_block+0x27c>)
    2752:	493c      	ldr	r1, [pc, #240]	; (2844 <nm_spi_write_block+0x234>)
    2754:	483c      	ldr	r0, [pc, #240]	; (2848 <nm_spi_write_block+0x238>)
    2756:	4b3d      	ldr	r3, [pc, #244]	; (284c <nm_spi_write_block+0x23c>)
    2758:	4798      	blx	r3
    275a:	484d      	ldr	r0, [pc, #308]	; (2890 <nm_spi_write_block+0x280>)
    275c:	4b4a      	ldr	r3, [pc, #296]	; (2888 <nm_spi_write_block+0x278>)
    275e:	4798      	blx	r3
    2760:	200d      	movs	r0, #13
    2762:	4b3c      	ldr	r3, [pc, #240]	; (2854 <nm_spi_write_block+0x244>)
    2764:	4798      	blx	r3
    2766:	e770      	b.n	264a <nm_spi_write_block+0x3a>
    2768:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    276a:	4a4a      	ldr	r2, [pc, #296]	; (2894 <nm_spi_write_block+0x284>)
    276c:	4944      	ldr	r1, [pc, #272]	; (2880 <nm_spi_write_block+0x270>)
    276e:	4836      	ldr	r0, [pc, #216]	; (2848 <nm_spi_write_block+0x238>)
    2770:	4b36      	ldr	r3, [pc, #216]	; (284c <nm_spi_write_block+0x23c>)
    2772:	4798      	blx	r3
    2774:	4848      	ldr	r0, [pc, #288]	; (2898 <nm_spi_write_block+0x288>)
    2776:	4b44      	ldr	r3, [pc, #272]	; (2888 <nm_spi_write_block+0x278>)
    2778:	4798      	blx	r3
    277a:	200d      	movs	r0, #13
    277c:	4b35      	ldr	r3, [pc, #212]	; (2854 <nm_spi_write_block+0x244>)
    277e:	4798      	blx	r3
    2780:	e7e6      	b.n	2750 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2782:	2102      	movs	r1, #2
    2784:	a807      	add	r0, sp, #28
    2786:	4b3b      	ldr	r3, [pc, #236]	; (2874 <nm_spi_write_block+0x264>)
    2788:	4798      	blx	r3
    278a:	2800      	cmp	r0, #0
    278c:	d0c1      	beq.n	2712 <nm_spi_write_block+0x102>
    278e:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    2790:	22dd      	movs	r2, #221	; 0xdd
    2792:	0092      	lsls	r2, r2, #2
    2794:	493a      	ldr	r1, [pc, #232]	; (2880 <nm_spi_write_block+0x270>)
    2796:	482c      	ldr	r0, [pc, #176]	; (2848 <nm_spi_write_block+0x238>)
    2798:	4b2c      	ldr	r3, [pc, #176]	; (284c <nm_spi_write_block+0x23c>)
    279a:	4798      	blx	r3
    279c:	483f      	ldr	r0, [pc, #252]	; (289c <nm_spi_write_block+0x28c>)
    279e:	4b3a      	ldr	r3, [pc, #232]	; (2888 <nm_spi_write_block+0x278>)
    27a0:	4798      	blx	r3
    27a2:	200d      	movs	r0, #13
    27a4:	4b2b      	ldr	r3, [pc, #172]	; (2854 <nm_spi_write_block+0x244>)
    27a6:	4798      	blx	r3
    27a8:	e7d2      	b.n	2750 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    27aa:	2248      	movs	r2, #72	; 0x48
    27ac:	32ff      	adds	r2, #255	; 0xff
    27ae:	493c      	ldr	r1, [pc, #240]	; (28a0 <nm_spi_write_block+0x290>)
    27b0:	4825      	ldr	r0, [pc, #148]	; (2848 <nm_spi_write_block+0x238>)
    27b2:	4b26      	ldr	r3, [pc, #152]	; (284c <nm_spi_write_block+0x23c>)
    27b4:	4798      	blx	r3
    27b6:	483b      	ldr	r0, [pc, #236]	; (28a4 <nm_spi_write_block+0x294>)
    27b8:	4b33      	ldr	r3, [pc, #204]	; (2888 <nm_spi_write_block+0x278>)
    27ba:	4798      	blx	r3
    27bc:	200d      	movs	r0, #13
    27be:	4b25      	ldr	r3, [pc, #148]	; (2854 <nm_spi_write_block+0x244>)
    27c0:	4798      	blx	r3
    27c2:	e027      	b.n	2814 <nm_spi_write_block+0x204>
    27c4:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    27c6:	4b2c      	ldr	r3, [pc, #176]	; (2878 <nm_spi_write_block+0x268>)
    27c8:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    27ca:	1e63      	subs	r3, r4, #1
    27cc:	419c      	sbcs	r4, r3
    27ce:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    27d0:	b2a1      	uxth	r1, r4
    27d2:	a807      	add	r0, sp, #28
    27d4:	4b34      	ldr	r3, [pc, #208]	; (28a8 <nm_spi_write_block+0x298>)
    27d6:	4798      	blx	r3
    27d8:	2800      	cmp	r0, #0
    27da:	d1e6      	bne.n	27aa <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    27dc:	ab08      	add	r3, sp, #32
    27de:	191b      	adds	r3, r3, r4
    27e0:	3b05      	subs	r3, #5
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d106      	bne.n	27f6 <nm_spi_write_block+0x1e6>
    27e8:	ab08      	add	r3, sp, #32
    27ea:	469c      	mov	ip, r3
    27ec:	4464      	add	r4, ip
    27ee:	3c06      	subs	r4, #6
    27f0:	7823      	ldrb	r3, [r4, #0]
    27f2:	2bc3      	cmp	r3, #195	; 0xc3
    27f4:	d01a      	beq.n	282c <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    27f6:	22a7      	movs	r2, #167	; 0xa7
    27f8:	0052      	lsls	r2, r2, #1
    27fa:	4929      	ldr	r1, [pc, #164]	; (28a0 <nm_spi_write_block+0x290>)
    27fc:	4812      	ldr	r0, [pc, #72]	; (2848 <nm_spi_write_block+0x238>)
    27fe:	4c13      	ldr	r4, [pc, #76]	; (284c <nm_spi_write_block+0x23c>)
    2800:	47a0      	blx	r4
    2802:	a907      	add	r1, sp, #28
    2804:	788b      	ldrb	r3, [r1, #2]
    2806:	784a      	ldrb	r2, [r1, #1]
    2808:	7809      	ldrb	r1, [r1, #0]
    280a:	4828      	ldr	r0, [pc, #160]	; (28ac <nm_spi_write_block+0x29c>)
    280c:	47a0      	blx	r4
    280e:	200d      	movs	r0, #13
    2810:	4b10      	ldr	r3, [pc, #64]	; (2854 <nm_spi_write_block+0x244>)
    2812:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2814:	4a26      	ldr	r2, [pc, #152]	; (28b0 <nm_spi_write_block+0x2a0>)
    2816:	490b      	ldr	r1, [pc, #44]	; (2844 <nm_spi_write_block+0x234>)
    2818:	480b      	ldr	r0, [pc, #44]	; (2848 <nm_spi_write_block+0x238>)
    281a:	4b0c      	ldr	r3, [pc, #48]	; (284c <nm_spi_write_block+0x23c>)
    281c:	4798      	blx	r3
    281e:	481c      	ldr	r0, [pc, #112]	; (2890 <nm_spi_write_block+0x280>)
    2820:	4b19      	ldr	r3, [pc, #100]	; (2888 <nm_spi_write_block+0x278>)
    2822:	4798      	blx	r3
    2824:	200d      	movs	r0, #13
    2826:	4b0b      	ldr	r3, [pc, #44]	; (2854 <nm_spi_write_block+0x244>)
    2828:	4798      	blx	r3
    282a:	e70e      	b.n	264a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    282c:	2000      	movs	r0, #0
    282e:	e001      	b.n	2834 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2830:	2006      	movs	r0, #6
    2832:	4240      	negs	r0, r0

	return s8Ret;
}
    2834:	b009      	add	sp, #36	; 0x24
    2836:	bc0c      	pop	{r2, r3}
    2838:	4690      	mov	r8, r2
    283a:	469b      	mov	fp, r3
    283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	000003db 	.word	0x000003db
    2844:	00008f88 	.word	0x00008f88
    2848:	00008870 	.word	0x00008870
    284c:	0000762d 	.word	0x0000762d
    2850:	00009240 	.word	0x00009240
    2854:	00007661 	.word	0x00007661
    2858:	00000129 	.word	0x00000129
    285c:	00001ce1 	.word	0x00001ce1
    2860:	00001e81 	.word	0x00001e81
    2864:	00000403 	.word	0x00000403
    2868:	00009224 	.word	0x00009224
    286c:	000003e1 	.word	0x000003e1
    2870:	00009270 	.word	0x00009270
    2874:	00001cc1 	.word	0x00001cc1
    2878:	200000a0 	.word	0x200000a0
    287c:	00000361 	.word	0x00000361
    2880:	00008f68 	.word	0x00008f68
    2884:	000092a8 	.word	0x000092a8
    2888:	00007749 	.word	0x00007749
    288c:	000003f1 	.word	0x000003f1
    2890:	0000939c 	.word	0x0000939c
    2894:	0000036a 	.word	0x0000036a
    2898:	000092e0 	.word	0x000092e0
    289c:	00009314 	.word	0x00009314
    28a0:	00008f3c 	.word	0x00008f3c
    28a4:	0000934c 	.word	0x0000934c
    28a8:	00001e61 	.word	0x00001e61
    28ac:	0000936c 	.word	0x0000936c
    28b0:	000003f9 	.word	0x000003f9

000028b4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b6:	46de      	mov	lr, fp
    28b8:	4657      	mov	r7, sl
    28ba:	464e      	mov	r6, r9
    28bc:	4645      	mov	r5, r8
    28be:	b5e0      	push	{r5, r6, r7, lr}
    28c0:	b085      	sub	sp, #20
    28c2:	9001      	str	r0, [sp, #4]
    28c4:	000e      	movs	r6, r1
    28c6:	9202      	str	r2, [sp, #8]
    28c8:	001d      	movs	r5, r3
    28ca:	ab0e      	add	r3, sp, #56	; 0x38
    28cc:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    28ce:	2c00      	cmp	r4, #0
    28d0:	d064      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28d2:	0103      	lsls	r3, r0, #4
    28d4:	4935      	ldr	r1, [pc, #212]	; (29ac <Socket_ReadSocketData+0xf8>)
    28d6:	585b      	ldr	r3, [r3, r1]
    28d8:	2b00      	cmp	r3, #0
    28da:	d05f      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28dc:	0101      	lsls	r1, r0, #4
    28de:	4b33      	ldr	r3, [pc, #204]	; (29ac <Socket_ReadSocketData+0xf8>)
    28e0:	185b      	adds	r3, r3, r1
    28e2:	889b      	ldrh	r3, [r3, #4]
    28e4:	b29b      	uxth	r3, r3
    28e6:	2b00      	cmp	r3, #0
    28e8:	d058      	beq.n	299c <Socket_ReadSocketData+0xe8>
    28ea:	4b30      	ldr	r3, [pc, #192]	; (29ac <Socket_ReadSocketData+0xf8>)
    28ec:	185b      	adds	r3, r3, r1
    28ee:	7a9b      	ldrb	r3, [r3, #10]
    28f0:	2b01      	cmp	r3, #1
    28f2:	d153      	bne.n	299c <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    28f4:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    28f6:	4b2d      	ldr	r3, [pc, #180]	; (29ac <Socket_ReadSocketData+0xf8>)
    28f8:	469b      	mov	fp, r3
    28fa:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    28fc:	465b      	mov	r3, fp
    28fe:	220a      	movs	r2, #10
    2900:	4690      	mov	r8, r2
    2902:	44d8      	add	r8, fp
    2904:	468a      	mov	sl, r1
    2906:	9500      	str	r5, [sp, #0]
    2908:	9303      	str	r3, [sp, #12]
    290a:	e015      	b.n	2938 <Socket_ReadSocketData+0x84>
    290c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    290e:	2301      	movs	r3, #1
    2910:	e01c      	b.n	294c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2912:	3301      	adds	r3, #1
    2914:	2200      	movs	r2, #0
    2916:	2100      	movs	r1, #0
    2918:	2000      	movs	r0, #0
    291a:	4c25      	ldr	r4, [pc, #148]	; (29b0 <Socket_ReadSocketData+0xfc>)
    291c:	47a0      	blx	r4
    291e:	e03d      	b.n	299c <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    2920:	4824      	ldr	r0, [pc, #144]	; (29b4 <Socket_ReadSocketData+0x100>)
    2922:	4d25      	ldr	r5, [pc, #148]	; (29b8 <Socket_ReadSocketData+0x104>)
    2924:	47a8      	blx	r5
    2926:	0021      	movs	r1, r4
    2928:	4824      	ldr	r0, [pc, #144]	; (29bc <Socket_ReadSocketData+0x108>)
    292a:	47a8      	blx	r5
    292c:	200d      	movs	r0, #13
    292e:	4b24      	ldr	r3, [pc, #144]	; (29c0 <Socket_ReadSocketData+0x10c>)
    2930:	4798      	blx	r3
				break;
    2932:	e033      	b.n	299c <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    2934:	2c00      	cmp	r4, #0
    2936:	d031      	beq.n	299c <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2938:	465b      	mov	r3, fp
    293a:	889b      	ldrh	r3, [r3, #4]
    293c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    293e:	b21b      	sxth	r3, r3
    2940:	2b00      	cmp	r3, #0
    2942:	dde3      	ble.n	290c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2944:	9b03      	ldr	r3, [sp, #12]
    2946:	889d      	ldrh	r5, [r3, #4]
    2948:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    294a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    294c:	4a17      	ldr	r2, [pc, #92]	; (29ac <Socket_ReadSocketData+0xf8>)
    294e:	4651      	mov	r1, sl
    2950:	5889      	ldr	r1, [r1, r2]
    2952:	002a      	movs	r2, r5
    2954:	9800      	ldr	r0, [sp, #0]
    2956:	4f16      	ldr	r7, [pc, #88]	; (29b0 <Socket_ReadSocketData+0xfc>)
    2958:	47b8      	blx	r7
    295a:	2800      	cmp	r0, #0
    295c:	d1e0      	bne.n	2920 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    295e:	4b13      	ldr	r3, [pc, #76]	; (29ac <Socket_ReadSocketData+0xf8>)
    2960:	4652      	mov	r2, sl
    2962:	58d3      	ldr	r3, [r2, r3]
    2964:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    2966:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    2968:	88f3      	ldrh	r3, [r6, #6]
    296a:	1b5b      	subs	r3, r3, r5
    296c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    296e:	4b15      	ldr	r3, [pc, #84]	; (29c4 <Socket_ReadSocketData+0x110>)
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	2b00      	cmp	r3, #0
    2974:	d005      	beq.n	2982 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    2976:	4b13      	ldr	r3, [pc, #76]	; (29c4 <Socket_ReadSocketData+0x110>)
    2978:	681b      	ldr	r3, [r3, #0]
    297a:	0032      	movs	r2, r6
    297c:	9902      	ldr	r1, [sp, #8]
    297e:	9801      	ldr	r0, [sp, #4]
    2980:	4798      	blx	r3
				u16ReadCount -= u16Read;
    2982:	1b64      	subs	r4, r4, r5
    2984:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    2986:	9b00      	ldr	r3, [sp, #0]
    2988:	469c      	mov	ip, r3
    298a:	44ac      	add	ip, r5
    298c:	4663      	mov	r3, ip
    298e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    2990:	4643      	mov	r3, r8
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	2b00      	cmp	r3, #0
    2996:	d1cd      	bne.n	2934 <Socket_ReadSocketData+0x80>
    2998:	2c00      	cmp	r4, #0
    299a:	d1ba      	bne.n	2912 <Socket_ReadSocketData+0x5e>
	}
}
    299c:	b005      	add	sp, #20
    299e:	bc3c      	pop	{r2, r3, r4, r5}
    29a0:	4690      	mov	r8, r2
    29a2:	4699      	mov	r9, r3
    29a4:	46a2      	mov	sl, r4
    29a6:	46ab      	mov	fp, r5
    29a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	200009f4 	.word	0x200009f4
    29b0:	00000c51 	.word	0x00000c51
    29b4:	00008ba0 	.word	0x00008ba0
    29b8:	0000762d 	.word	0x0000762d
    29bc:	00009604 	.word	0x00009604
    29c0:	00007661 	.word	0x00007661
    29c4:	20000aa4 	.word	0x20000aa4

000029c8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    29c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ca:	46d6      	mov	lr, sl
    29cc:	464f      	mov	r7, r9
    29ce:	4646      	mov	r6, r8
    29d0:	b5c0      	push	{r6, r7, lr}
    29d2:	b09a      	sub	sp, #104	; 0x68
    29d4:	000d      	movs	r5, r1
    29d6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    29d8:	2841      	cmp	r0, #65	; 0x41
    29da:	d039      	beq.n	2a50 <m2m_ip_cb+0x88>
    29dc:	2854      	cmp	r0, #84	; 0x54
    29de:	d037      	beq.n	2a50 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    29e0:	2842      	cmp	r0, #66	; 0x42
    29e2:	d053      	beq.n	2a8c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    29e4:	2843      	cmp	r0, #67	; 0x43
    29e6:	d06a      	beq.n	2abe <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    29e8:	2844      	cmp	r0, #68	; 0x44
    29ea:	d100      	bne.n	29ee <m2m_ip_cb+0x26>
    29ec:	e0af      	b.n	2b4e <m2m_ip_cb+0x186>
    29ee:	284b      	cmp	r0, #75	; 0x4b
    29f0:	d100      	bne.n	29f4 <m2m_ip_cb+0x2c>
    29f2:	e0ac      	b.n	2b4e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    29f4:	284a      	cmp	r0, #74	; 0x4a
    29f6:	d100      	bne.n	29fa <m2m_ip_cb+0x32>
    29f8:	e0cf      	b.n	2b9a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    29fa:	2846      	cmp	r0, #70	; 0x46
    29fc:	d100      	bne.n	2a00 <m2m_ip_cb+0x38>
    29fe:	e0e5      	b.n	2bcc <m2m_ip_cb+0x204>
    2a00:	2848      	cmp	r0, #72	; 0x48
    2a02:	d100      	bne.n	2a06 <m2m_ip_cb+0x3e>
    2a04:	e10e      	b.n	2c24 <m2m_ip_cb+0x25c>
    2a06:	284d      	cmp	r0, #77	; 0x4d
    2a08:	d100      	bne.n	2a0c <m2m_ip_cb+0x44>
    2a0a:	e0dc      	b.n	2bc6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a0c:	2845      	cmp	r0, #69	; 0x45
    2a0e:	d100      	bne.n	2a12 <m2m_ip_cb+0x4a>
    2a10:	e12c      	b.n	2c6c <m2m_ip_cb+0x2a4>
    2a12:	2847      	cmp	r0, #71	; 0x47
    2a14:	d100      	bne.n	2a18 <m2m_ip_cb+0x50>
    2a16:	e14d      	b.n	2cb4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2a18:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a1a:	284c      	cmp	r0, #76	; 0x4c
    2a1c:	d100      	bne.n	2a20 <m2m_ip_cb+0x58>
    2a1e:	e126      	b.n	2c6e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2a20:	2852      	cmp	r0, #82	; 0x52
    2a22:	d12d      	bne.n	2a80 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2a24:	2301      	movs	r3, #1
    2a26:	2214      	movs	r2, #20
    2a28:	a909      	add	r1, sp, #36	; 0x24
    2a2a:	0020      	movs	r0, r4
    2a2c:	4ca2      	ldr	r4, [pc, #648]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a2e:	47a0      	blx	r4
    2a30:	2800      	cmp	r0, #0
    2a32:	d125      	bne.n	2a80 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2a34:	4ba1      	ldr	r3, [pc, #644]	; (2cbc <m2m_ip_cb+0x2f4>)
    2a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2a38:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d01f      	beq.n	2a80 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2a40:	4b9e      	ldr	r3, [pc, #632]	; (2cbc <m2m_ip_cb+0x2f4>)
    2a42:	681c      	ldr	r4, [r3, #0]
    2a44:	ab09      	add	r3, sp, #36	; 0x24
    2a46:	7c1a      	ldrb	r2, [r3, #16]
    2a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a4c:	47a0      	blx	r4
			}
		}
	}
}
    2a4e:	e017      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2a50:	2300      	movs	r3, #0
    2a52:	2204      	movs	r2, #4
    2a54:	a909      	add	r1, sp, #36	; 0x24
    2a56:	0020      	movs	r0, r4
    2a58:	4c97      	ldr	r4, [pc, #604]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a5a:	47a0      	blx	r4
    2a5c:	2800      	cmp	r0, #0
    2a5e:	d10f      	bne.n	2a80 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    2a60:	ab09      	add	r3, sp, #36	; 0x24
    2a62:	785a      	ldrb	r2, [r3, #1]
    2a64:	ab05      	add	r3, sp, #20
    2a66:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2a68:	4b95      	ldr	r3, [pc, #596]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2a6a:	681b      	ldr	r3, [r3, #0]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d007      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2a70:	4b93      	ldr	r3, [pc, #588]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2a72:	681b      	ldr	r3, [r3, #0]
    2a74:	aa09      	add	r2, sp, #36	; 0x24
    2a76:	2000      	movs	r0, #0
    2a78:	5610      	ldrsb	r0, [r2, r0]
    2a7a:	aa05      	add	r2, sp, #20
    2a7c:	2101      	movs	r1, #1
    2a7e:	4798      	blx	r3
}
    2a80:	b01a      	add	sp, #104	; 0x68
    2a82:	bc1c      	pop	{r2, r3, r4}
    2a84:	4690      	mov	r8, r2
    2a86:	4699      	mov	r9, r3
    2a88:	46a2      	mov	sl, r4
    2a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2a8c:	2300      	movs	r3, #0
    2a8e:	2204      	movs	r2, #4
    2a90:	a909      	add	r1, sp, #36	; 0x24
    2a92:	0020      	movs	r0, r4
    2a94:	4c88      	ldr	r4, [pc, #544]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2a96:	47a0      	blx	r4
    2a98:	2800      	cmp	r0, #0
    2a9a:	d1f1      	bne.n	2a80 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    2a9c:	ab09      	add	r3, sp, #36	; 0x24
    2a9e:	785a      	ldrb	r2, [r3, #1]
    2aa0:	ab05      	add	r3, sp, #20
    2aa2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2aa4:	4b86      	ldr	r3, [pc, #536]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d0e9      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2aac:	4b84      	ldr	r3, [pc, #528]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2aae:	681b      	ldr	r3, [r3, #0]
    2ab0:	aa09      	add	r2, sp, #36	; 0x24
    2ab2:	2000      	movs	r0, #0
    2ab4:	5610      	ldrsb	r0, [r2, r0]
    2ab6:	aa05      	add	r2, sp, #20
    2ab8:	2102      	movs	r1, #2
    2aba:	4798      	blx	r3
    2abc:	e7e0      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2abe:	2300      	movs	r3, #0
    2ac0:	220c      	movs	r2, #12
    2ac2:	a905      	add	r1, sp, #20
    2ac4:	0020      	movs	r0, r4
    2ac6:	4c7c      	ldr	r4, [pc, #496]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2ac8:	47a0      	blx	r4
    2aca:	2800      	cmp	r0, #0
    2acc:	d1d8      	bne.n	2a80 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    2ace:	ab05      	add	r3, sp, #20
    2ad0:	2209      	movs	r2, #9
    2ad2:	569a      	ldrsb	r2, [r3, r2]
    2ad4:	2a00      	cmp	r2, #0
    2ad6:	db24      	blt.n	2b22 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    2ad8:	0018      	movs	r0, r3
    2ada:	2108      	movs	r1, #8
    2adc:	5659      	ldrsb	r1, [r3, r1]
    2ade:	4b79      	ldr	r3, [pc, #484]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2ae0:	0109      	lsls	r1, r1, #4
    2ae2:	1859      	adds	r1, r3, r1
    2ae4:	7ac9      	ldrb	r1, [r1, #11]
    2ae6:	b2c9      	uxtb	r1, r1
    2ae8:	0114      	lsls	r4, r2, #4
    2aea:	191b      	adds	r3, r3, r4
    2aec:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    2aee:	2101      	movs	r1, #1
    2af0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2af2:	8941      	ldrh	r1, [r0, #10]
    2af4:	3908      	subs	r1, #8
    2af6:	b289      	uxth	r1, r1
    2af8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    2afa:	4973      	ldr	r1, [pc, #460]	; (2cc8 <m2m_ip_cb+0x300>)
    2afc:	880b      	ldrh	r3, [r1, #0]
    2afe:	3301      	adds	r3, #1
    2b00:	b29b      	uxth	r3, r3
    2b02:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    2b04:	880b      	ldrh	r3, [r1, #0]
    2b06:	b29b      	uxth	r3, r3
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d103      	bne.n	2b14 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    2b0c:	880b      	ldrh	r3, [r1, #0]
    2b0e:	3301      	adds	r3, #1
    2b10:	b29b      	uxth	r3, r3
    2b12:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2b14:	4b6c      	ldr	r3, [pc, #432]	; (2cc8 <m2m_ip_cb+0x300>)
    2b16:	8819      	ldrh	r1, [r3, #0]
    2b18:	b289      	uxth	r1, r1
    2b1a:	0110      	lsls	r0, r2, #4
    2b1c:	4b69      	ldr	r3, [pc, #420]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2b1e:	181b      	adds	r3, r3, r0
    2b20:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    2b22:	ab09      	add	r3, sp, #36	; 0x24
    2b24:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2b26:	2202      	movs	r2, #2
    2b28:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2b2a:	aa05      	add	r2, sp, #20
    2b2c:	8851      	ldrh	r1, [r2, #2]
    2b2e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2b30:	9a06      	ldr	r2, [sp, #24]
    2b32:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2b34:	4b62      	ldr	r3, [pc, #392]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b36:	681b      	ldr	r3, [r3, #0]
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d0a1      	beq.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2b3c:	4b60      	ldr	r3, [pc, #384]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	aa05      	add	r2, sp, #20
    2b42:	2008      	movs	r0, #8
    2b44:	5610      	ldrsb	r0, [r2, r0]
    2b46:	aa09      	add	r2, sp, #36	; 0x24
    2b48:	2104      	movs	r1, #4
    2b4a:	4798      	blx	r3
    2b4c:	e798      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2b4e:	2300      	movs	r3, #0
    2b50:	2204      	movs	r2, #4
    2b52:	a909      	add	r1, sp, #36	; 0x24
    2b54:	0020      	movs	r0, r4
    2b56:	4c58      	ldr	r4, [pc, #352]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2b58:	47a0      	blx	r4
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d000      	beq.n	2b60 <m2m_ip_cb+0x198>
    2b5e:	e78f      	b.n	2a80 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    2b60:	ab09      	add	r3, sp, #36	; 0x24
    2b62:	2000      	movs	r0, #0
    2b64:	5618      	ldrsb	r0, [r3, r0]
    2b66:	aa05      	add	r2, sp, #20
    2b68:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2b6a:	785b      	ldrb	r3, [r3, #1]
    2b6c:	b25b      	sxtb	r3, r3
    2b6e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2b70:	2b00      	cmp	r3, #0
    2b72:	d107      	bne.n	2b84 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2b74:	ab09      	add	r3, sp, #36	; 0x24
    2b76:	885b      	ldrh	r3, [r3, #2]
    2b78:	3b08      	subs	r3, #8
    2b7a:	b29b      	uxth	r3, r3
    2b7c:	0101      	lsls	r1, r0, #4
    2b7e:	4a51      	ldr	r2, [pc, #324]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2b80:	1852      	adds	r2, r2, r1
    2b82:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    2b84:	4b4e      	ldr	r3, [pc, #312]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d100      	bne.n	2b8e <m2m_ip_cb+0x1c6>
    2b8c:	e778      	b.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2b8e:	4b4c      	ldr	r3, [pc, #304]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2b90:	681b      	ldr	r3, [r3, #0]
    2b92:	aa05      	add	r2, sp, #20
    2b94:	2105      	movs	r1, #5
    2b96:	4798      	blx	r3
	{
    2b98:	e772      	b.n	2a80 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2b9a:	2300      	movs	r3, #0
    2b9c:	2244      	movs	r2, #68	; 0x44
    2b9e:	a909      	add	r1, sp, #36	; 0x24
    2ba0:	0020      	movs	r0, r4
    2ba2:	4c45      	ldr	r4, [pc, #276]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2ba4:	47a0      	blx	r4
    2ba6:	2800      	cmp	r0, #0
    2ba8:	d000      	beq.n	2bac <m2m_ip_cb+0x1e4>
    2baa:	e769      	b.n	2a80 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    2bac:	4b47      	ldr	r3, [pc, #284]	; (2ccc <m2m_ip_cb+0x304>)
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d100      	bne.n	2bb6 <m2m_ip_cb+0x1ee>
    2bb4:	e764      	b.n	2a80 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2bb6:	4b45      	ldr	r3, [pc, #276]	; (2ccc <m2m_ip_cb+0x304>)
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2bbc:	9203      	str	r2, [sp, #12]
    2bbe:	0011      	movs	r1, r2
    2bc0:	a809      	add	r0, sp, #36	; 0x24
    2bc2:	4798      	blx	r3
    2bc4:	e75c      	b.n	2a80 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2bc6:	2306      	movs	r3, #6
    2bc8:	469a      	mov	sl, r3
    2bca:	e001      	b.n	2bd0 <m2m_ip_cb+0x208>
    2bcc:	2306      	movs	r3, #6
    2bce:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2bd0:	2300      	movs	r3, #0
    2bd2:	2210      	movs	r2, #16
    2bd4:	a905      	add	r1, sp, #20
    2bd6:	0020      	movs	r0, r4
    2bd8:	4f37      	ldr	r7, [pc, #220]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2bda:	47b8      	blx	r7
    2bdc:	2800      	cmp	r0, #0
    2bde:	d000      	beq.n	2be2 <m2m_ip_cb+0x21a>
    2be0:	e74e      	b.n	2a80 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    2be2:	aa05      	add	r2, sp, #20
    2be4:	200c      	movs	r0, #12
    2be6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2be8:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    2bea:	0107      	lsls	r7, r0, #4
    2bec:	4935      	ldr	r1, [pc, #212]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2bee:	19c9      	adds	r1, r1, r7
    2bf0:	2700      	movs	r7, #0
    2bf2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2bf4:	2608      	movs	r6, #8
    2bf6:	5f97      	ldrsh	r7, [r2, r6]
    2bf8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2bfa:	8957      	ldrh	r7, [r2, #10]
    2bfc:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2bfe:	af09      	add	r7, sp, #36	; 0x24
    2c00:	8856      	ldrh	r6, [r2, #2]
    2c02:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2c04:	9a06      	ldr	r2, [sp, #24]
    2c06:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2c08:	88ca      	ldrh	r2, [r1, #6]
    2c0a:	b292      	uxth	r2, r2
    2c0c:	4293      	cmp	r3, r2
    2c0e:	d00c      	beq.n	2c2a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    2c10:	2d10      	cmp	r5, #16
    2c12:	d800      	bhi.n	2c16 <m2m_ip_cb+0x24e>
    2c14:	e734      	b.n	2a80 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2c16:	2301      	movs	r3, #1
    2c18:	2200      	movs	r2, #0
    2c1a:	2100      	movs	r1, #0
    2c1c:	2000      	movs	r0, #0
    2c1e:	4c26      	ldr	r4, [pc, #152]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2c20:	47a0      	blx	r4
	{
    2c22:	e72d      	b.n	2a80 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2c24:	2309      	movs	r3, #9
    2c26:	469a      	mov	sl, r3
    2c28:	e7d2      	b.n	2bd0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2c2a:	4643      	mov	r3, r8
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	dd01      	ble.n	2c34 <m2m_ip_cb+0x26c>
    2c30:	45a8      	cmp	r8, r5
    2c32:	db0f      	blt.n	2c54 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2c34:	ab09      	add	r3, sp, #36	; 0x24
    2c36:	4642      	mov	r2, r8
    2c38:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2c3a:	2300      	movs	r3, #0
    2c3c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2c3e:	4b20      	ldr	r3, [pc, #128]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d100      	bne.n	2c48 <m2m_ip_cb+0x280>
    2c46:	e71b      	b.n	2a80 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2c48:	4b1d      	ldr	r3, [pc, #116]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	aa09      	add	r2, sp, #36	; 0x24
    2c4e:	4651      	mov	r1, sl
    2c50:	4798      	blx	r3
    2c52:	e715      	b.n	2a80 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    2c54:	0023      	movs	r3, r4
    2c56:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2c58:	4642      	mov	r2, r8
    2c5a:	4669      	mov	r1, sp
    2c5c:	818a      	strh	r2, [r1, #12]
    2c5e:	898a      	ldrh	r2, [r1, #12]
    2c60:	9200      	str	r2, [sp, #0]
    2c62:	4652      	mov	r2, sl
    2c64:	0039      	movs	r1, r7
    2c66:	4c1a      	ldr	r4, [pc, #104]	; (2cd0 <m2m_ip_cb+0x308>)
    2c68:	47a0      	blx	r4
    2c6a:	e709      	b.n	2a80 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2c6c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2c6e:	2300      	movs	r3, #0
    2c70:	2208      	movs	r2, #8
    2c72:	a909      	add	r1, sp, #36	; 0x24
    2c74:	0020      	movs	r0, r4
    2c76:	4c10      	ldr	r4, [pc, #64]	; (2cb8 <m2m_ip_cb+0x2f0>)
    2c78:	47a0      	blx	r4
    2c7a:	2800      	cmp	r0, #0
    2c7c:	d000      	beq.n	2c80 <m2m_ip_cb+0x2b8>
    2c7e:	e6ff      	b.n	2a80 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    2c80:	ab09      	add	r3, sp, #36	; 0x24
    2c82:	2000      	movs	r0, #0
    2c84:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2c86:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2c88:	8859      	ldrh	r1, [r3, #2]
    2c8a:	ab05      	add	r3, sp, #20
    2c8c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2c8e:	0101      	lsls	r1, r0, #4
    2c90:	4b0c      	ldr	r3, [pc, #48]	; (2cc4 <m2m_ip_cb+0x2fc>)
    2c92:	185b      	adds	r3, r3, r1
    2c94:	88db      	ldrh	r3, [r3, #6]
    2c96:	b29b      	uxth	r3, r3
    2c98:	429a      	cmp	r2, r3
    2c9a:	d000      	beq.n	2c9e <m2m_ip_cb+0x2d6>
    2c9c:	e6f0      	b.n	2a80 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    2c9e:	4b08      	ldr	r3, [pc, #32]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d100      	bne.n	2ca8 <m2m_ip_cb+0x2e0>
    2ca6:	e6eb      	b.n	2a80 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2ca8:	4b05      	ldr	r3, [pc, #20]	; (2cc0 <m2m_ip_cb+0x2f8>)
    2caa:	681b      	ldr	r3, [r3, #0]
    2cac:	aa05      	add	r2, sp, #20
    2cae:	0029      	movs	r1, r5
    2cb0:	4798      	blx	r3
	{
    2cb2:	e6e5      	b.n	2a80 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2cb4:	2508      	movs	r5, #8
    2cb6:	e7da      	b.n	2c6e <m2m_ip_cb+0x2a6>
    2cb8:	00000c51 	.word	0x00000c51
    2cbc:	20000aa8 	.word	0x20000aa8
    2cc0:	20000aa4 	.word	0x20000aa4
    2cc4:	200009f4 	.word	0x200009f4
    2cc8:	200000a2 	.word	0x200000a2
    2ccc:	20000aac 	.word	0x20000aac
    2cd0:	000028b5 	.word	0x000028b5

00002cd4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2cd4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    2cd6:	4b0a      	ldr	r3, [pc, #40]	; (2d00 <socketInit+0x2c>)
    2cd8:	781b      	ldrb	r3, [r3, #0]
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d000      	beq.n	2ce0 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    2cde:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2ce0:	22b0      	movs	r2, #176	; 0xb0
    2ce2:	2100      	movs	r1, #0
    2ce4:	4807      	ldr	r0, [pc, #28]	; (2d04 <socketInit+0x30>)
    2ce6:	4b08      	ldr	r3, [pc, #32]	; (2d08 <socketInit+0x34>)
    2ce8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2cea:	4908      	ldr	r1, [pc, #32]	; (2d0c <socketInit+0x38>)
    2cec:	2002      	movs	r0, #2
    2cee:	4b08      	ldr	r3, [pc, #32]	; (2d10 <socketInit+0x3c>)
    2cf0:	4798      	blx	r3
		gbSocketInit	= 1;
    2cf2:	2201      	movs	r2, #1
    2cf4:	4b02      	ldr	r3, [pc, #8]	; (2d00 <socketInit+0x2c>)
    2cf6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    2cf8:	2200      	movs	r2, #0
    2cfa:	4b06      	ldr	r3, [pc, #24]	; (2d14 <socketInit+0x40>)
    2cfc:	801a      	strh	r2, [r3, #0]
}
    2cfe:	e7ee      	b.n	2cde <socketInit+0xa>
    2d00:	200000a1 	.word	0x200000a1
    2d04:	200009f4 	.word	0x200009f4
    2d08:	00000531 	.word	0x00000531
    2d0c:	000029c9 	.word	0x000029c9
    2d10:	00000d3d 	.word	0x00000d3d
    2d14:	200000a2 	.word	0x200000a2

00002d18 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2d18:	4b02      	ldr	r3, [pc, #8]	; (2d24 <registerSocketCallback+0xc>)
    2d1a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2d1c:	4b02      	ldr	r3, [pc, #8]	; (2d28 <registerSocketCallback+0x10>)
    2d1e:	6019      	str	r1, [r3, #0]
}
    2d20:	4770      	bx	lr
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	20000aa4 	.word	0x20000aa4
    2d28:	20000aac 	.word	0x20000aac

00002d2c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2e:	46d6      	mov	lr, sl
    2d30:	4647      	mov	r7, r8
    2d32:	b580      	push	{r7, lr}
    2d34:	b089      	sub	sp, #36	; 0x24
    2d36:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2d38:	2802      	cmp	r0, #2
    2d3a:	d000      	beq.n	2d3e <socket+0x12>
    2d3c:	e09c      	b.n	2e78 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    2d3e:	2901      	cmp	r1, #1
    2d40:	d00a      	beq.n	2d58 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    2d42:	2902      	cmp	r1, #2
    2d44:	d100      	bne.n	2d48 <socket+0x1c>
    2d46:	e070      	b.n	2e2a <socket+0xfe>
	SOCKET					sock = -1;
    2d48:	2501      	movs	r5, #1
    2d4a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    2d4c:	0028      	movs	r0, r5
    2d4e:	b009      	add	sp, #36	; 0x24
    2d50:	bc0c      	pop	{r2, r3}
    2d52:	4690      	mov	r8, r2
    2d54:	469a      	mov	sl, r3
    2d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    2d58:	4c49      	ldr	r4, [pc, #292]	; (2e80 <socket+0x154>)
    2d5a:	7827      	ldrb	r7, [r4, #0]
    2d5c:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2d5e:	7826      	ldrb	r6, [r4, #0]
    2d60:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d62:	7820      	ldrb	r0, [r4, #0]
    2d64:	3001      	adds	r0, #1
    2d66:	3106      	adds	r1, #6
    2d68:	4b46      	ldr	r3, [pc, #280]	; (2e84 <socket+0x158>)
    2d6a:	4798      	blx	r3
    2d6c:	b2c9      	uxtb	r1, r1
    2d6e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    2d70:	0132      	lsls	r2, r6, #4
    2d72:	4b45      	ldr	r3, [pc, #276]	; (2e88 <socket+0x15c>)
    2d74:	189b      	adds	r3, r3, r2
    2d76:	7a9b      	ldrb	r3, [r3, #10]
    2d78:	2506      	movs	r5, #6
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d018      	beq.n	2db0 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    2d7e:	4e40      	ldr	r6, [pc, #256]	; (2e80 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d80:	4b40      	ldr	r3, [pc, #256]	; (2e84 <socket+0x158>)
    2d82:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    2d84:	4b40      	ldr	r3, [pc, #256]	; (2e88 <socket+0x15c>)
    2d86:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    2d88:	7837      	ldrb	r7, [r6, #0]
    2d8a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2d8c:	7834      	ldrb	r4, [r6, #0]
    2d8e:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2d90:	7830      	ldrb	r0, [r6, #0]
    2d92:	3001      	adds	r0, #1
    2d94:	2107      	movs	r1, #7
    2d96:	47d0      	blx	sl
    2d98:	b2c9      	uxtb	r1, r1
    2d9a:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    2d9c:	0123      	lsls	r3, r4, #4
    2d9e:	4443      	add	r3, r8
    2da0:	7a9b      	ldrb	r3, [r3, #10]
    2da2:	2b00      	cmp	r3, #0
    2da4:	d007      	beq.n	2db6 <socket+0x8a>
    2da6:	3d01      	subs	r5, #1
    2da8:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    2daa:	2d00      	cmp	r5, #0
    2dac:	d1ec      	bne.n	2d88 <socket+0x5c>
    2dae:	e7cb      	b.n	2d48 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2db0:	4b35      	ldr	r3, [pc, #212]	; (2e88 <socket+0x15c>)
    2db2:	18d4      	adds	r4, r2, r3
    2db4:	e002      	b.n	2dbc <socket+0x90>
    2db6:	0124      	lsls	r4, r4, #4
    2db8:	4b33      	ldr	r3, [pc, #204]	; (2e88 <socket+0x15c>)
    2dba:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    2dbc:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    2dbe:	2d00      	cmp	r5, #0
    2dc0:	dbc4      	blt.n	2d4c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2dc2:	2210      	movs	r2, #16
    2dc4:	2100      	movs	r1, #0
    2dc6:	0020      	movs	r0, r4
    2dc8:	4b30      	ldr	r3, [pc, #192]	; (2e8c <socket+0x160>)
    2dca:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    2dcc:	2301      	movs	r3, #1
    2dce:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    2dd0:	4a2f      	ldr	r2, [pc, #188]	; (2e90 <socket+0x164>)
    2dd2:	8813      	ldrh	r3, [r2, #0]
    2dd4:	3301      	adds	r3, #1
    2dd6:	b29b      	uxth	r3, r3
    2dd8:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    2dda:	8813      	ldrh	r3, [r2, #0]
    2ddc:	b29b      	uxth	r3, r3
    2dde:	2b00      	cmp	r3, #0
    2de0:	d103      	bne.n	2dea <socket+0xbe>
				++gu16SessionID;
    2de2:	8813      	ldrh	r3, [r2, #0]
    2de4:	3301      	adds	r3, #1
    2de6:	b29b      	uxth	r3, r3
    2de8:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    2dea:	4e29      	ldr	r6, [pc, #164]	; (2e90 <socket+0x164>)
    2dec:	8833      	ldrh	r3, [r6, #0]
    2dee:	b29b      	uxth	r3, r3
    2df0:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    2df2:	4828      	ldr	r0, [pc, #160]	; (2e94 <socket+0x168>)
    2df4:	4f28      	ldr	r7, [pc, #160]	; (2e98 <socket+0x16c>)
    2df6:	47b8      	blx	r7
    2df8:	8832      	ldrh	r2, [r6, #0]
    2dfa:	b292      	uxth	r2, r2
    2dfc:	0029      	movs	r1, r5
    2dfe:	4827      	ldr	r0, [pc, #156]	; (2e9c <socket+0x170>)
    2e00:	47b8      	blx	r7
    2e02:	200d      	movs	r0, #13
    2e04:	4b26      	ldr	r3, [pc, #152]	; (2ea0 <socket+0x174>)
    2e06:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    2e08:	9b05      	ldr	r3, [sp, #20]
    2e0a:	07db      	lsls	r3, r3, #31
    2e0c:	d59e      	bpl.n	2d4c <socket+0x20>
				strSSLCreate.sslSock = sock;
    2e0e:	aa07      	add	r2, sp, #28
    2e10:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2e12:	2321      	movs	r3, #33	; 0x21
    2e14:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2e16:	2300      	movs	r3, #0
    2e18:	9302      	str	r3, [sp, #8]
    2e1a:	9301      	str	r3, [sp, #4]
    2e1c:	9300      	str	r3, [sp, #0]
    2e1e:	3304      	adds	r3, #4
    2e20:	2150      	movs	r1, #80	; 0x50
    2e22:	2002      	movs	r0, #2
    2e24:	4c1f      	ldr	r4, [pc, #124]	; (2ea4 <socket+0x178>)
    2e26:	47a0      	blx	r4
    2e28:	e790      	b.n	2d4c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    2e2a:	4b1f      	ldr	r3, [pc, #124]	; (2ea8 <socket+0x17c>)
    2e2c:	781d      	ldrb	r5, [r3, #0]
    2e2e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e30:	781c      	ldrb	r4, [r3, #0]
    2e32:	0124      	lsls	r4, r4, #4
    2e34:	4a1d      	ldr	r2, [pc, #116]	; (2eac <socket+0x180>)
    2e36:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e38:	7819      	ldrb	r1, [r3, #0]
    2e3a:	3101      	adds	r1, #1
    2e3c:	2203      	movs	r2, #3
    2e3e:	400a      	ands	r2, r1
    2e40:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    2e42:	7aa3      	ldrb	r3, [r4, #10]
    2e44:	2b00      	cmp	r3, #0
    2e46:	d014      	beq.n	2e72 <socket+0x146>
    2e48:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    2e4a:	4917      	ldr	r1, [pc, #92]	; (2ea8 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e4c:	4f17      	ldr	r7, [pc, #92]	; (2eac <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e4e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    2e50:	780d      	ldrb	r5, [r1, #0]
    2e52:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e54:	780c      	ldrb	r4, [r1, #0]
    2e56:	0124      	lsls	r4, r4, #4
    2e58:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2e5a:	780b      	ldrb	r3, [r1, #0]
    2e5c:	3301      	adds	r3, #1
    2e5e:	4003      	ands	r3, r0
    2e60:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    2e62:	7aa3      	ldrb	r3, [r4, #10]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d004      	beq.n	2e72 <socket+0x146>
    2e68:	3a01      	subs	r2, #1
    2e6a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    2e6c:	2a00      	cmp	r2, #0
    2e6e:	d1ef      	bne.n	2e50 <socket+0x124>
    2e70:	e76a      	b.n	2d48 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    2e72:	3507      	adds	r5, #7
    2e74:	b26d      	sxtb	r5, r5
					break;
    2e76:	e7a2      	b.n	2dbe <socket+0x92>
	SOCKET					sock = -1;
    2e78:	2501      	movs	r5, #1
    2e7a:	426d      	negs	r5, r5
    2e7c:	e766      	b.n	2d4c <socket+0x20>
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	200000a4 	.word	0x200000a4
    2e84:	00007561 	.word	0x00007561
    2e88:	200009f4 	.word	0x200009f4
    2e8c:	00000531 	.word	0x00000531
    2e90:	200000a2 	.word	0x200000a2
    2e94:	00008ba0 	.word	0x00008ba0
    2e98:	0000762d 	.word	0x0000762d
    2e9c:	00009618 	.word	0x00009618
    2ea0:	00007661 	.word	0x00007661
    2ea4:	00000645 	.word	0x00000645
    2ea8:	200000a5 	.word	0x200000a5
    2eac:	20000a64 	.word	0x20000a64

00002eb0 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2eb0:	b570      	push	{r4, r5, r6, lr}
    2eb2:	b088      	sub	sp, #32
    2eb4:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2eb6:	2900      	cmp	r1, #0
    2eb8:	d02b      	beq.n	2f12 <bind+0x62>
    2eba:	2800      	cmp	r0, #0
    2ebc:	db2c      	blt.n	2f18 <bind+0x68>
    2ebe:	0100      	lsls	r0, r0, #4
    2ec0:	4b1a      	ldr	r3, [pc, #104]	; (2f2c <bind+0x7c>)
    2ec2:	181b      	adds	r3, r3, r0
    2ec4:	7a9b      	ldrb	r3, [r3, #10]
    2ec6:	2b01      	cmp	r3, #1
    2ec8:	d129      	bne.n	2f1e <bind+0x6e>
    2eca:	2a00      	cmp	r2, #0
    2ecc:	d02a      	beq.n	2f24 <bind+0x74>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ece:	4b17      	ldr	r3, [pc, #92]	; (2f2c <bind+0x7c>)
    2ed0:	181b      	adds	r3, r3, r0
    2ed2:	7adb      	ldrb	r3, [r3, #11]
		uint8				u8CMD = SOCKET_CMD_BIND;
    2ed4:	2641      	movs	r6, #65	; 0x41
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ed6:	07db      	lsls	r3, r3, #31
    2ed8:	d500      	bpl.n	2edc <bind+0x2c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
    2eda:	3613      	adds	r6, #19
		}

		/* Build the bind request. */
		strBind.sock = sock;
    2edc:	ad05      	add	r5, sp, #20
    2ede:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2ee0:	2208      	movs	r2, #8
    2ee2:	0028      	movs	r0, r5
    2ee4:	4b12      	ldr	r3, [pc, #72]	; (2f30 <bind+0x80>)
    2ee6:	4798      	blx	r3
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    2ee8:	0124      	lsls	r4, r4, #4
    2eea:	4b10      	ldr	r3, [pc, #64]	; (2f2c <bind+0x7c>)
    2eec:	191c      	adds	r4, r3, r4
    2eee:	88e3      	ldrh	r3, [r4, #6]
    2ef0:	816b      	strh	r3, [r5, #10]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    2ef2:	2300      	movs	r3, #0
    2ef4:	9302      	str	r3, [sp, #8]
    2ef6:	9301      	str	r3, [sp, #4]
    2ef8:	9300      	str	r3, [sp, #0]
    2efa:	330c      	adds	r3, #12
    2efc:	002a      	movs	r2, r5
    2efe:	0031      	movs	r1, r6
    2f00:	2002      	movs	r0, #2
    2f02:	4c0c      	ldr	r4, [pc, #48]	; (2f34 <bind+0x84>)
    2f04:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f06:	2800      	cmp	r0, #0
    2f08:	d001      	beq.n	2f0e <bind+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f0a:	2009      	movs	r0, #9
    2f0c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2f0e:	b008      	add	sp, #32
    2f10:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2f12:	2006      	movs	r0, #6
    2f14:	4240      	negs	r0, r0
    2f16:	e7fa      	b.n	2f0e <bind+0x5e>
    2f18:	2006      	movs	r0, #6
    2f1a:	4240      	negs	r0, r0
    2f1c:	e7f7      	b.n	2f0e <bind+0x5e>
    2f1e:	2006      	movs	r0, #6
    2f20:	4240      	negs	r0, r0
    2f22:	e7f4      	b.n	2f0e <bind+0x5e>
    2f24:	2006      	movs	r0, #6
    2f26:	4240      	negs	r0, r0
    2f28:	e7f1      	b.n	2f0e <bind+0x5e>
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	200009f4 	.word	0x200009f4
    2f30:	0000051d 	.word	0x0000051d
    2f34:	00000645 	.word	0x00000645

00002f38 <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
    2f38:	b510      	push	{r4, lr}
    2f3a:	b086      	sub	sp, #24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    2f3c:	2800      	cmp	r0, #0
    2f3e:	db1c      	blt.n	2f7a <listen+0x42>
    2f40:	0102      	lsls	r2, r0, #4
    2f42:	4b11      	ldr	r3, [pc, #68]	; (2f88 <listen+0x50>)
    2f44:	189b      	adds	r3, r3, r2
    2f46:	7a9b      	ldrb	r3, [r3, #10]
    2f48:	2b01      	cmp	r3, #1
    2f4a:	d119      	bne.n	2f80 <listen+0x48>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
    2f4c:	aa05      	add	r2, sp, #20
    2f4e:	7010      	strb	r0, [r2, #0]
		strListen.u8BackLog = backlog;
    2f50:	7051      	strb	r1, [r2, #1]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
    2f52:	0100      	lsls	r0, r0, #4
    2f54:	4b0c      	ldr	r3, [pc, #48]	; (2f88 <listen+0x50>)
    2f56:	1818      	adds	r0, r3, r0
    2f58:	88c3      	ldrh	r3, [r0, #6]
    2f5a:	8053      	strh	r3, [r2, #2]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
    2f5c:	2300      	movs	r3, #0
    2f5e:	9302      	str	r3, [sp, #8]
    2f60:	9301      	str	r3, [sp, #4]
    2f62:	9300      	str	r3, [sp, #0]
    2f64:	3304      	adds	r3, #4
    2f66:	2142      	movs	r1, #66	; 0x42
    2f68:	2002      	movs	r0, #2
    2f6a:	4c08      	ldr	r4, [pc, #32]	; (2f8c <listen+0x54>)
    2f6c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f6e:	2800      	cmp	r0, #0
    2f70:	d001      	beq.n	2f76 <listen+0x3e>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f72:	2009      	movs	r0, #9
    2f74:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2f76:	b006      	add	sp, #24
    2f78:	bd10      	pop	{r4, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2f7a:	2006      	movs	r0, #6
    2f7c:	4240      	negs	r0, r0
    2f7e:	e7fa      	b.n	2f76 <listen+0x3e>
    2f80:	2006      	movs	r0, #6
    2f82:	4240      	negs	r0, r0
    2f84:	e7f7      	b.n	2f76 <listen+0x3e>
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	200009f4 	.word	0x200009f4
    2f8c:	00000645 	.word	0x00000645

00002f90 <accept>:
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
    2f90:	2800      	cmp	r0, #0
    2f92:	db07      	blt.n	2fa4 <accept+0x14>
    2f94:	0100      	lsls	r0, r0, #4
    2f96:	4b06      	ldr	r3, [pc, #24]	; (2fb0 <accept+0x20>)
    2f98:	1818      	adds	r0, r3, r0
    2f9a:	7a83      	ldrb	r3, [r0, #10]
    2f9c:	2b01      	cmp	r3, #1
    2f9e:	d104      	bne.n	2faa <accept+0x1a>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
    2fa0:	2000      	movs	r0, #0
	}
	return s8Ret;
}
    2fa2:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2fa4:	2006      	movs	r0, #6
    2fa6:	4240      	negs	r0, r0
    2fa8:	e7fb      	b.n	2fa2 <accept+0x12>
    2faa:	2006      	movs	r0, #6
    2fac:	4240      	negs	r0, r0
    2fae:	e7f8      	b.n	2fa2 <accept+0x12>
    2fb0:	200009f4 	.word	0x200009f4

00002fb4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    2fb4:	b530      	push	{r4, r5, lr}
    2fb6:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    2fb8:	2800      	cmp	r0, #0
    2fba:	db34      	blt.n	3026 <recv+0x72>
    2fbc:	2900      	cmp	r1, #0
    2fbe:	d035      	beq.n	302c <recv+0x78>
    2fc0:	2a00      	cmp	r2, #0
    2fc2:	d036      	beq.n	3032 <recv+0x7e>
    2fc4:	0105      	lsls	r5, r0, #4
    2fc6:	4c1e      	ldr	r4, [pc, #120]	; (3040 <recv+0x8c>)
    2fc8:	1964      	adds	r4, r4, r5
    2fca:	7aa4      	ldrb	r4, [r4, #10]
    2fcc:	2c01      	cmp	r4, #1
    2fce:	d133      	bne.n	3038 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    2fd0:	4c1b      	ldr	r4, [pc, #108]	; (3040 <recv+0x8c>)
    2fd2:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    2fd4:	1964      	adds	r4, r4, r5
    2fd6:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    2fd8:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    2fda:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    2fdc:	2900      	cmp	r1, #0
    2fde:	d11d      	bne.n	301c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    2fe0:	2101      	movs	r1, #1
    2fe2:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2fe4:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    2fe6:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2fe8:	07d2      	lsls	r2, r2, #31
    2fea:	d500      	bpl.n	2fee <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    2fec:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d117      	bne.n	3022 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    2ff2:	3b01      	subs	r3, #1
    2ff4:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    2ff6:	aa04      	add	r2, sp, #16
    2ff8:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    2ffa:	0100      	lsls	r0, r0, #4
    2ffc:	4b10      	ldr	r3, [pc, #64]	; (3040 <recv+0x8c>)
    2ffe:	1818      	adds	r0, r3, r0
    3000:	88c3      	ldrh	r3, [r0, #6]
    3002:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3004:	2300      	movs	r3, #0
    3006:	9302      	str	r3, [sp, #8]
    3008:	9301      	str	r3, [sp, #4]
    300a:	9300      	str	r3, [sp, #0]
    300c:	3308      	adds	r3, #8
    300e:	2002      	movs	r0, #2
    3010:	4c0c      	ldr	r4, [pc, #48]	; (3044 <recv+0x90>)
    3012:	47a0      	blx	r4
    3014:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3016:	2800      	cmp	r0, #0
    3018:	d000      	beq.n	301c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    301a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    301c:	0010      	movs	r0, r2
    301e:	b007      	add	sp, #28
    3020:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3022:	9304      	str	r3, [sp, #16]
    3024:	e7e7      	b.n	2ff6 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3026:	2206      	movs	r2, #6
    3028:	4252      	negs	r2, r2
    302a:	e7f7      	b.n	301c <recv+0x68>
    302c:	2206      	movs	r2, #6
    302e:	4252      	negs	r2, r2
    3030:	e7f4      	b.n	301c <recv+0x68>
    3032:	2206      	movs	r2, #6
    3034:	4252      	negs	r2, r2
    3036:	e7f1      	b.n	301c <recv+0x68>
    3038:	2206      	movs	r2, #6
    303a:	4252      	negs	r2, r2
    303c:	e7ee      	b.n	301c <recv+0x68>
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	200009f4 	.word	0x200009f4
    3044:	00000645 	.word	0x00000645

00003048 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3048:	b530      	push	{r4, r5, lr}
    304a:	b087      	sub	sp, #28
    304c:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    //M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    304e:	db2a      	blt.n	30a6 <close+0x5e>
    3050:	0102      	lsls	r2, r0, #4
    3052:	4b18      	ldr	r3, [pc, #96]	; (30b4 <close+0x6c>)
    3054:	189b      	adds	r3, r3, r2
    3056:	7a9b      	ldrb	r3, [r3, #10]
    3058:	2b01      	cmp	r3, #1
    305a:	d127      	bne.n	30ac <close+0x64>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    305c:	a905      	add	r1, sp, #20
    305e:	7008      	strb	r0, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3060:	4b14      	ldr	r3, [pc, #80]	; (30b4 <close+0x6c>)
    3062:	189b      	adds	r3, r3, r2
    3064:	88da      	ldrh	r2, [r3, #6]
    3066:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3068:	2200      	movs	r2, #0
    306a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    306c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    306e:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3070:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3072:	07db      	lsls	r3, r3, #31
    3074:	d500      	bpl.n	3078 <close+0x30>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3076:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3078:	2300      	movs	r3, #0
    307a:	9302      	str	r3, [sp, #8]
    307c:	9301      	str	r3, [sp, #4]
    307e:	9300      	str	r3, [sp, #0]
    3080:	3304      	adds	r3, #4
    3082:	aa05      	add	r2, sp, #20
    3084:	2002      	movs	r0, #2
    3086:	4d0c      	ldr	r5, [pc, #48]	; (30b8 <close+0x70>)
    3088:	47a8      	blx	r5
    308a:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    308c:	d001      	beq.n	3092 <close+0x4a>
		{
			s8Ret = SOCK_ERR_INVALID;
    308e:	2509      	movs	r5, #9
    3090:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3092:	0124      	lsls	r4, r4, #4
    3094:	4807      	ldr	r0, [pc, #28]	; (30b4 <close+0x6c>)
    3096:	1820      	adds	r0, r4, r0
    3098:	2210      	movs	r2, #16
    309a:	2100      	movs	r1, #0
    309c:	4b07      	ldr	r3, [pc, #28]	; (30bc <close+0x74>)
    309e:	4798      	blx	r3
	}
	return s8Ret;
}
    30a0:	0028      	movs	r0, r5
    30a2:	b007      	add	sp, #28
    30a4:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    30a6:	2506      	movs	r5, #6
    30a8:	426d      	negs	r5, r5
    30aa:	e7f9      	b.n	30a0 <close+0x58>
    30ac:	2506      	movs	r5, #6
    30ae:	426d      	negs	r5, r5
    30b0:	e7f6      	b.n	30a0 <close+0x58>
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	200009f4 	.word	0x200009f4
    30b8:	00000645 	.word	0x00000645
    30bc:	00000531 	.word	0x00000531

000030c0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    30c0:	b570      	push	{r4, r5, r6, lr}
    30c2:	b082      	sub	sp, #8
    30c4:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    30c6:	4b2a      	ldr	r3, [pc, #168]	; (3170 <spi_flash_enable+0xb0>)
    30c8:	4798      	blx	r3
    30ca:	0500      	lsls	r0, r0, #20
    30cc:	0d00      	lsrs	r0, r0, #20
    30ce:	4b29      	ldr	r3, [pc, #164]	; (3174 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    30d0:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    30d2:	4298      	cmp	r0, r3
    30d4:	d802      	bhi.n	30dc <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    30d6:	0028      	movs	r0, r5
    30d8:	b002      	add	sp, #8
    30da:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    30dc:	a901      	add	r1, sp, #4
    30de:	4826      	ldr	r0, [pc, #152]	; (3178 <spi_flash_enable+0xb8>)
    30e0:	4b26      	ldr	r3, [pc, #152]	; (317c <spi_flash_enable+0xbc>)
    30e2:	4798      	blx	r3
    30e4:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    30e6:	d1f6      	bne.n	30d6 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    30e8:	4b25      	ldr	r3, [pc, #148]	; (3180 <spi_flash_enable+0xc0>)
    30ea:	9a01      	ldr	r2, [sp, #4]
    30ec:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    30ee:	4925      	ldr	r1, [pc, #148]	; (3184 <spi_flash_enable+0xc4>)
    30f0:	4319      	orrs	r1, r3
    30f2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    30f4:	4820      	ldr	r0, [pc, #128]	; (3178 <spi_flash_enable+0xb8>)
    30f6:	4b24      	ldr	r3, [pc, #144]	; (3188 <spi_flash_enable+0xc8>)
    30f8:	4798      	blx	r3
		if(enable) {
    30fa:	2c00      	cmp	r4, #0
    30fc:	d020      	beq.n	3140 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    30fe:	2100      	movs	r1, #0
    3100:	4822      	ldr	r0, [pc, #136]	; (318c <spi_flash_enable+0xcc>)
    3102:	4c21      	ldr	r4, [pc, #132]	; (3188 <spi_flash_enable+0xc8>)
    3104:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3106:	21ab      	movs	r1, #171	; 0xab
    3108:	4821      	ldr	r0, [pc, #132]	; (3190 <spi_flash_enable+0xd0>)
    310a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    310c:	2101      	movs	r1, #1
    310e:	4821      	ldr	r0, [pc, #132]	; (3194 <spi_flash_enable+0xd4>)
    3110:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3112:	2100      	movs	r1, #0
    3114:	4820      	ldr	r0, [pc, #128]	; (3198 <spi_flash_enable+0xd8>)
    3116:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3118:	2181      	movs	r1, #129	; 0x81
    311a:	4820      	ldr	r0, [pc, #128]	; (319c <spi_flash_enable+0xdc>)
    311c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    311e:	4e20      	ldr	r6, [pc, #128]	; (31a0 <spi_flash_enable+0xe0>)
    3120:	4c20      	ldr	r4, [pc, #128]	; (31a4 <spi_flash_enable+0xe4>)
    3122:	0030      	movs	r0, r6
    3124:	47a0      	blx	r4
    3126:	2801      	cmp	r0, #1
    3128:	d1fb      	bne.n	3122 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    312a:	4b15      	ldr	r3, [pc, #84]	; (3180 <spi_flash_enable+0xc0>)
    312c:	9a01      	ldr	r2, [sp, #4]
    312e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    3130:	2180      	movs	r1, #128	; 0x80
    3132:	0249      	lsls	r1, r1, #9
    3134:	4319      	orrs	r1, r3
    3136:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3138:	480f      	ldr	r0, [pc, #60]	; (3178 <spi_flash_enable+0xb8>)
    313a:	4b13      	ldr	r3, [pc, #76]	; (3188 <spi_flash_enable+0xc8>)
    313c:	4798      	blx	r3
    313e:	e7ca      	b.n	30d6 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3140:	2100      	movs	r1, #0
    3142:	4812      	ldr	r0, [pc, #72]	; (318c <spi_flash_enable+0xcc>)
    3144:	4c10      	ldr	r4, [pc, #64]	; (3188 <spi_flash_enable+0xc8>)
    3146:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3148:	21b9      	movs	r1, #185	; 0xb9
    314a:	4811      	ldr	r0, [pc, #68]	; (3190 <spi_flash_enable+0xd0>)
    314c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    314e:	2101      	movs	r1, #1
    3150:	4810      	ldr	r0, [pc, #64]	; (3194 <spi_flash_enable+0xd4>)
    3152:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3154:	2100      	movs	r1, #0
    3156:	4810      	ldr	r0, [pc, #64]	; (3198 <spi_flash_enable+0xd8>)
    3158:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    315a:	2181      	movs	r1, #129	; 0x81
    315c:	480f      	ldr	r0, [pc, #60]	; (319c <spi_flash_enable+0xdc>)
    315e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3160:	4e0f      	ldr	r6, [pc, #60]	; (31a0 <spi_flash_enable+0xe0>)
    3162:	4c10      	ldr	r4, [pc, #64]	; (31a4 <spi_flash_enable+0xe4>)
    3164:	0030      	movs	r0, r6
    3166:	47a0      	blx	r4
    3168:	2801      	cmp	r0, #1
    316a:	d1fb      	bne.n	3164 <spi_flash_enable+0xa4>
    316c:	e7dd      	b.n	312a <spi_flash_enable+0x6a>
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	0000152d 	.word	0x0000152d
    3174:	0000039f 	.word	0x0000039f
    3178:	00001410 	.word	0x00001410
    317c:	0000197d 	.word	0x0000197d
    3180:	f8888fff 	.word	0xf8888fff
    3184:	01111000 	.word	0x01111000
    3188:	00001989 	.word	0x00001989
    318c:	00010208 	.word	0x00010208
    3190:	0001020c 	.word	0x0001020c
    3194:	00010214 	.word	0x00010214
    3198:	0001021c 	.word	0x0001021c
    319c:	00010204 	.word	0x00010204
    31a0:	00010218 	.word	0x00010218
    31a4:	00001971 	.word	0x00001971

000031a8 <usart_init>:
    31a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31aa:	46de      	mov	lr, fp
    31ac:	4657      	mov	r7, sl
    31ae:	464e      	mov	r6, r9
    31b0:	4645      	mov	r5, r8
    31b2:	b5e0      	push	{r5, r6, r7, lr}
    31b4:	b091      	sub	sp, #68	; 0x44
    31b6:	0005      	movs	r5, r0
    31b8:	000c      	movs	r4, r1
    31ba:	0016      	movs	r6, r2
    31bc:	6029      	str	r1, [r5, #0]
    31be:	0008      	movs	r0, r1
    31c0:	4bbc      	ldr	r3, [pc, #752]	; (34b4 <usart_init+0x30c>)
    31c2:	4798      	blx	r3
    31c4:	0002      	movs	r2, r0
    31c6:	6823      	ldr	r3, [r4, #0]
    31c8:	2005      	movs	r0, #5
    31ca:	07db      	lsls	r3, r3, #31
    31cc:	d506      	bpl.n	31dc <usart_init+0x34>
    31ce:	b011      	add	sp, #68	; 0x44
    31d0:	bc3c      	pop	{r2, r3, r4, r5}
    31d2:	4690      	mov	r8, r2
    31d4:	4699      	mov	r9, r3
    31d6:	46a2      	mov	sl, r4
    31d8:	46ab      	mov	fp, r5
    31da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31dc:	6823      	ldr	r3, [r4, #0]
    31de:	3017      	adds	r0, #23
    31e0:	079b      	lsls	r3, r3, #30
    31e2:	d4f4      	bmi.n	31ce <usart_init+0x26>
    31e4:	49b4      	ldr	r1, [pc, #720]	; (34b8 <usart_init+0x310>)
    31e6:	6a08      	ldr	r0, [r1, #32]
    31e8:	1c97      	adds	r7, r2, #2
    31ea:	2301      	movs	r3, #1
    31ec:	40bb      	lsls	r3, r7
    31ee:	4303      	orrs	r3, r0
    31f0:	620b      	str	r3, [r1, #32]
    31f2:	a90f      	add	r1, sp, #60	; 0x3c
    31f4:	272d      	movs	r7, #45	; 0x2d
    31f6:	5df3      	ldrb	r3, [r6, r7]
    31f8:	700b      	strb	r3, [r1, #0]
    31fa:	3214      	adds	r2, #20
    31fc:	b2d3      	uxtb	r3, r2
    31fe:	9302      	str	r3, [sp, #8]
    3200:	0018      	movs	r0, r3
    3202:	4bae      	ldr	r3, [pc, #696]	; (34bc <usart_init+0x314>)
    3204:	4798      	blx	r3
    3206:	9802      	ldr	r0, [sp, #8]
    3208:	4bad      	ldr	r3, [pc, #692]	; (34c0 <usart_init+0x318>)
    320a:	4798      	blx	r3
    320c:	5df0      	ldrb	r0, [r6, r7]
    320e:	2100      	movs	r1, #0
    3210:	4bac      	ldr	r3, [pc, #688]	; (34c4 <usart_init+0x31c>)
    3212:	4798      	blx	r3
    3214:	7af3      	ldrb	r3, [r6, #11]
    3216:	716b      	strb	r3, [r5, #5]
    3218:	2324      	movs	r3, #36	; 0x24
    321a:	5cf3      	ldrb	r3, [r6, r3]
    321c:	71ab      	strb	r3, [r5, #6]
    321e:	2325      	movs	r3, #37	; 0x25
    3220:	5cf3      	ldrb	r3, [r6, r3]
    3222:	71eb      	strb	r3, [r5, #7]
    3224:	7ef3      	ldrb	r3, [r6, #27]
    3226:	722b      	strb	r3, [r5, #8]
    3228:	7f33      	ldrb	r3, [r6, #28]
    322a:	726b      	strb	r3, [r5, #9]
    322c:	682b      	ldr	r3, [r5, #0]
    322e:	4698      	mov	r8, r3
    3230:	0018      	movs	r0, r3
    3232:	4ba0      	ldr	r3, [pc, #640]	; (34b4 <usart_init+0x30c>)
    3234:	4798      	blx	r3
    3236:	3014      	adds	r0, #20
    3238:	2200      	movs	r2, #0
    323a:	230e      	movs	r3, #14
    323c:	a906      	add	r1, sp, #24
    323e:	468c      	mov	ip, r1
    3240:	4463      	add	r3, ip
    3242:	801a      	strh	r2, [r3, #0]
    3244:	8a32      	ldrh	r2, [r6, #16]
    3246:	9202      	str	r2, [sp, #8]
    3248:	2380      	movs	r3, #128	; 0x80
    324a:	01db      	lsls	r3, r3, #7
    324c:	429a      	cmp	r2, r3
    324e:	d100      	bne.n	3252 <usart_init+0xaa>
    3250:	e09e      	b.n	3390 <usart_init+0x1e8>
    3252:	d90f      	bls.n	3274 <usart_init+0xcc>
    3254:	23c0      	movs	r3, #192	; 0xc0
    3256:	01db      	lsls	r3, r3, #7
    3258:	9a02      	ldr	r2, [sp, #8]
    325a:	429a      	cmp	r2, r3
    325c:	d100      	bne.n	3260 <usart_init+0xb8>
    325e:	e092      	b.n	3386 <usart_init+0x1de>
    3260:	2380      	movs	r3, #128	; 0x80
    3262:	021b      	lsls	r3, r3, #8
    3264:	429a      	cmp	r2, r3
    3266:	d000      	beq.n	326a <usart_init+0xc2>
    3268:	e11f      	b.n	34aa <usart_init+0x302>
    326a:	2303      	movs	r3, #3
    326c:	9306      	str	r3, [sp, #24]
    326e:	2300      	movs	r3, #0
    3270:	9307      	str	r3, [sp, #28]
    3272:	e008      	b.n	3286 <usart_init+0xde>
    3274:	2380      	movs	r3, #128	; 0x80
    3276:	019b      	lsls	r3, r3, #6
    3278:	429a      	cmp	r2, r3
    327a:	d000      	beq.n	327e <usart_init+0xd6>
    327c:	e115      	b.n	34aa <usart_init+0x302>
    327e:	2310      	movs	r3, #16
    3280:	9306      	str	r3, [sp, #24]
    3282:	3b0f      	subs	r3, #15
    3284:	9307      	str	r3, [sp, #28]
    3286:	6833      	ldr	r3, [r6, #0]
    3288:	9305      	str	r3, [sp, #20]
    328a:	68f3      	ldr	r3, [r6, #12]
    328c:	9303      	str	r3, [sp, #12]
    328e:	6973      	ldr	r3, [r6, #20]
    3290:	9304      	str	r3, [sp, #16]
    3292:	7e33      	ldrb	r3, [r6, #24]
    3294:	469b      	mov	fp, r3
    3296:	2326      	movs	r3, #38	; 0x26
    3298:	5cf3      	ldrb	r3, [r6, r3]
    329a:	469a      	mov	sl, r3
    329c:	6873      	ldr	r3, [r6, #4]
    329e:	4699      	mov	r9, r3
    32a0:	2b00      	cmp	r3, #0
    32a2:	d100      	bne.n	32a6 <usart_init+0xfe>
    32a4:	e0a0      	b.n	33e8 <usart_init+0x240>
    32a6:	2380      	movs	r3, #128	; 0x80
    32a8:	055b      	lsls	r3, r3, #21
    32aa:	4599      	cmp	r9, r3
    32ac:	d100      	bne.n	32b0 <usart_init+0x108>
    32ae:	e084      	b.n	33ba <usart_init+0x212>
    32b0:	7e73      	ldrb	r3, [r6, #25]
    32b2:	2b00      	cmp	r3, #0
    32b4:	d002      	beq.n	32bc <usart_init+0x114>
    32b6:	7eb3      	ldrb	r3, [r6, #26]
    32b8:	4642      	mov	r2, r8
    32ba:	7393      	strb	r3, [r2, #14]
    32bc:	682a      	ldr	r2, [r5, #0]
    32be:	9f02      	ldr	r7, [sp, #8]
    32c0:	69d3      	ldr	r3, [r2, #28]
    32c2:	2b00      	cmp	r3, #0
    32c4:	d1fc      	bne.n	32c0 <usart_init+0x118>
    32c6:	330e      	adds	r3, #14
    32c8:	aa06      	add	r2, sp, #24
    32ca:	4694      	mov	ip, r2
    32cc:	4463      	add	r3, ip
    32ce:	881b      	ldrh	r3, [r3, #0]
    32d0:	4642      	mov	r2, r8
    32d2:	8193      	strh	r3, [r2, #12]
    32d4:	9b05      	ldr	r3, [sp, #20]
    32d6:	9a03      	ldr	r2, [sp, #12]
    32d8:	4313      	orrs	r3, r2
    32da:	9a04      	ldr	r2, [sp, #16]
    32dc:	4313      	orrs	r3, r2
    32de:	464a      	mov	r2, r9
    32e0:	4313      	orrs	r3, r2
    32e2:	431f      	orrs	r7, r3
    32e4:	465b      	mov	r3, fp
    32e6:	021b      	lsls	r3, r3, #8
    32e8:	431f      	orrs	r7, r3
    32ea:	4653      	mov	r3, sl
    32ec:	075b      	lsls	r3, r3, #29
    32ee:	431f      	orrs	r7, r3
    32f0:	2327      	movs	r3, #39	; 0x27
    32f2:	5cf3      	ldrb	r3, [r6, r3]
    32f4:	2b00      	cmp	r3, #0
    32f6:	d101      	bne.n	32fc <usart_init+0x154>
    32f8:	3304      	adds	r3, #4
    32fa:	431f      	orrs	r7, r3
    32fc:	7e73      	ldrb	r3, [r6, #25]
    32fe:	029b      	lsls	r3, r3, #10
    3300:	7f32      	ldrb	r2, [r6, #28]
    3302:	0252      	lsls	r2, r2, #9
    3304:	4313      	orrs	r3, r2
    3306:	7f72      	ldrb	r2, [r6, #29]
    3308:	0212      	lsls	r2, r2, #8
    330a:	4313      	orrs	r3, r2
    330c:	2224      	movs	r2, #36	; 0x24
    330e:	5cb2      	ldrb	r2, [r6, r2]
    3310:	0452      	lsls	r2, r2, #17
    3312:	4313      	orrs	r3, r2
    3314:	2225      	movs	r2, #37	; 0x25
    3316:	5cb2      	ldrb	r2, [r6, r2]
    3318:	0412      	lsls	r2, r2, #16
    331a:	4313      	orrs	r3, r2
    331c:	7ab1      	ldrb	r1, [r6, #10]
    331e:	7af2      	ldrb	r2, [r6, #11]
    3320:	4311      	orrs	r1, r2
    3322:	4319      	orrs	r1, r3
    3324:	8933      	ldrh	r3, [r6, #8]
    3326:	2bff      	cmp	r3, #255	; 0xff
    3328:	d100      	bne.n	332c <usart_init+0x184>
    332a:	e081      	b.n	3430 <usart_init+0x288>
    332c:	2280      	movs	r2, #128	; 0x80
    332e:	0452      	lsls	r2, r2, #17
    3330:	4317      	orrs	r7, r2
    3332:	4319      	orrs	r1, r3
    3334:	232c      	movs	r3, #44	; 0x2c
    3336:	5cf3      	ldrb	r3, [r6, r3]
    3338:	2b00      	cmp	r3, #0
    333a:	d103      	bne.n	3344 <usart_init+0x19c>
    333c:	4b62      	ldr	r3, [pc, #392]	; (34c8 <usart_init+0x320>)
    333e:	789b      	ldrb	r3, [r3, #2]
    3340:	079b      	lsls	r3, r3, #30
    3342:	d501      	bpl.n	3348 <usart_init+0x1a0>
    3344:	2380      	movs	r3, #128	; 0x80
    3346:	431f      	orrs	r7, r3
    3348:	682a      	ldr	r2, [r5, #0]
    334a:	69d3      	ldr	r3, [r2, #28]
    334c:	2b00      	cmp	r3, #0
    334e:	d1fc      	bne.n	334a <usart_init+0x1a2>
    3350:	4643      	mov	r3, r8
    3352:	6059      	str	r1, [r3, #4]
    3354:	682a      	ldr	r2, [r5, #0]
    3356:	69d3      	ldr	r3, [r2, #28]
    3358:	2b00      	cmp	r3, #0
    335a:	d1fc      	bne.n	3356 <usart_init+0x1ae>
    335c:	4643      	mov	r3, r8
    335e:	601f      	str	r7, [r3, #0]
    3360:	ab0e      	add	r3, sp, #56	; 0x38
    3362:	2280      	movs	r2, #128	; 0x80
    3364:	701a      	strb	r2, [r3, #0]
    3366:	2200      	movs	r2, #0
    3368:	705a      	strb	r2, [r3, #1]
    336a:	70da      	strb	r2, [r3, #3]
    336c:	709a      	strb	r2, [r3, #2]
    336e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3370:	930a      	str	r3, [sp, #40]	; 0x28
    3372:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3374:	930b      	str	r3, [sp, #44]	; 0x2c
    3376:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3378:	930c      	str	r3, [sp, #48]	; 0x30
    337a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    337c:	9302      	str	r3, [sp, #8]
    337e:	930d      	str	r3, [sp, #52]	; 0x34
    3380:	2700      	movs	r7, #0
    3382:	ae0a      	add	r6, sp, #40	; 0x28
    3384:	e063      	b.n	344e <usart_init+0x2a6>
    3386:	2308      	movs	r3, #8
    3388:	9306      	str	r3, [sp, #24]
    338a:	3b07      	subs	r3, #7
    338c:	9307      	str	r3, [sp, #28]
    338e:	e77a      	b.n	3286 <usart_init+0xde>
    3390:	6833      	ldr	r3, [r6, #0]
    3392:	9305      	str	r3, [sp, #20]
    3394:	68f3      	ldr	r3, [r6, #12]
    3396:	9303      	str	r3, [sp, #12]
    3398:	6973      	ldr	r3, [r6, #20]
    339a:	9304      	str	r3, [sp, #16]
    339c:	7e33      	ldrb	r3, [r6, #24]
    339e:	469b      	mov	fp, r3
    33a0:	2326      	movs	r3, #38	; 0x26
    33a2:	5cf3      	ldrb	r3, [r6, r3]
    33a4:	469a      	mov	sl, r3
    33a6:	6873      	ldr	r3, [r6, #4]
    33a8:	4699      	mov	r9, r3
    33aa:	2b00      	cmp	r3, #0
    33ac:	d018      	beq.n	33e0 <usart_init+0x238>
    33ae:	2380      	movs	r3, #128	; 0x80
    33b0:	055b      	lsls	r3, r3, #21
    33b2:	4599      	cmp	r9, r3
    33b4:	d001      	beq.n	33ba <usart_init+0x212>
    33b6:	2000      	movs	r0, #0
    33b8:	e025      	b.n	3406 <usart_init+0x25e>
    33ba:	2327      	movs	r3, #39	; 0x27
    33bc:	5cf3      	ldrb	r3, [r6, r3]
    33be:	2b00      	cmp	r3, #0
    33c0:	d000      	beq.n	33c4 <usart_init+0x21c>
    33c2:	e775      	b.n	32b0 <usart_init+0x108>
    33c4:	6a33      	ldr	r3, [r6, #32]
    33c6:	001f      	movs	r7, r3
    33c8:	b2c0      	uxtb	r0, r0
    33ca:	4b40      	ldr	r3, [pc, #256]	; (34cc <usart_init+0x324>)
    33cc:	4798      	blx	r3
    33ce:	0001      	movs	r1, r0
    33d0:	220e      	movs	r2, #14
    33d2:	ab06      	add	r3, sp, #24
    33d4:	469c      	mov	ip, r3
    33d6:	4462      	add	r2, ip
    33d8:	0038      	movs	r0, r7
    33da:	4b3d      	ldr	r3, [pc, #244]	; (34d0 <usart_init+0x328>)
    33dc:	4798      	blx	r3
    33de:	e012      	b.n	3406 <usart_init+0x25e>
    33e0:	2308      	movs	r3, #8
    33e2:	9306      	str	r3, [sp, #24]
    33e4:	2300      	movs	r3, #0
    33e6:	9307      	str	r3, [sp, #28]
    33e8:	2327      	movs	r3, #39	; 0x27
    33ea:	5cf3      	ldrb	r3, [r6, r3]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d00e      	beq.n	340e <usart_init+0x266>
    33f0:	9b06      	ldr	r3, [sp, #24]
    33f2:	9300      	str	r3, [sp, #0]
    33f4:	9b07      	ldr	r3, [sp, #28]
    33f6:	220e      	movs	r2, #14
    33f8:	a906      	add	r1, sp, #24
    33fa:	468c      	mov	ip, r1
    33fc:	4462      	add	r2, ip
    33fe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3400:	6a30      	ldr	r0, [r6, #32]
    3402:	4f34      	ldr	r7, [pc, #208]	; (34d4 <usart_init+0x32c>)
    3404:	47b8      	blx	r7
    3406:	2800      	cmp	r0, #0
    3408:	d000      	beq.n	340c <usart_init+0x264>
    340a:	e6e0      	b.n	31ce <usart_init+0x26>
    340c:	e750      	b.n	32b0 <usart_init+0x108>
    340e:	6a33      	ldr	r3, [r6, #32]
    3410:	001f      	movs	r7, r3
    3412:	b2c0      	uxtb	r0, r0
    3414:	4b2d      	ldr	r3, [pc, #180]	; (34cc <usart_init+0x324>)
    3416:	4798      	blx	r3
    3418:	0001      	movs	r1, r0
    341a:	9b06      	ldr	r3, [sp, #24]
    341c:	9300      	str	r3, [sp, #0]
    341e:	9b07      	ldr	r3, [sp, #28]
    3420:	220e      	movs	r2, #14
    3422:	a806      	add	r0, sp, #24
    3424:	4684      	mov	ip, r0
    3426:	4462      	add	r2, ip
    3428:	0038      	movs	r0, r7
    342a:	4f2a      	ldr	r7, [pc, #168]	; (34d4 <usart_init+0x32c>)
    342c:	47b8      	blx	r7
    342e:	e7ea      	b.n	3406 <usart_init+0x25e>
    3430:	7ef3      	ldrb	r3, [r6, #27]
    3432:	2b00      	cmp	r3, #0
    3434:	d100      	bne.n	3438 <usart_init+0x290>
    3436:	e77d      	b.n	3334 <usart_init+0x18c>
    3438:	2380      	movs	r3, #128	; 0x80
    343a:	04db      	lsls	r3, r3, #19
    343c:	431f      	orrs	r7, r3
    343e:	e779      	b.n	3334 <usart_init+0x18c>
    3440:	0020      	movs	r0, r4
    3442:	4b25      	ldr	r3, [pc, #148]	; (34d8 <usart_init+0x330>)
    3444:	4798      	blx	r3
    3446:	e007      	b.n	3458 <usart_init+0x2b0>
    3448:	3701      	adds	r7, #1
    344a:	2f04      	cmp	r7, #4
    344c:	d00d      	beq.n	346a <usart_init+0x2c2>
    344e:	b2f9      	uxtb	r1, r7
    3450:	00bb      	lsls	r3, r7, #2
    3452:	5998      	ldr	r0, [r3, r6]
    3454:	2800      	cmp	r0, #0
    3456:	d0f3      	beq.n	3440 <usart_init+0x298>
    3458:	1c43      	adds	r3, r0, #1
    345a:	d0f5      	beq.n	3448 <usart_init+0x2a0>
    345c:	a90e      	add	r1, sp, #56	; 0x38
    345e:	7008      	strb	r0, [r1, #0]
    3460:	0c00      	lsrs	r0, r0, #16
    3462:	b2c0      	uxtb	r0, r0
    3464:	4b1d      	ldr	r3, [pc, #116]	; (34dc <usart_init+0x334>)
    3466:	4798      	blx	r3
    3468:	e7ee      	b.n	3448 <usart_init+0x2a0>
    346a:	2300      	movs	r3, #0
    346c:	60eb      	str	r3, [r5, #12]
    346e:	612b      	str	r3, [r5, #16]
    3470:	616b      	str	r3, [r5, #20]
    3472:	61ab      	str	r3, [r5, #24]
    3474:	61eb      	str	r3, [r5, #28]
    3476:	622b      	str	r3, [r5, #32]
    3478:	62ab      	str	r3, [r5, #40]	; 0x28
    347a:	626b      	str	r3, [r5, #36]	; 0x24
    347c:	2200      	movs	r2, #0
    347e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3480:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3482:	3330      	adds	r3, #48	; 0x30
    3484:	54ea      	strb	r2, [r5, r3]
    3486:	3301      	adds	r3, #1
    3488:	54ea      	strb	r2, [r5, r3]
    348a:	3301      	adds	r3, #1
    348c:	54ea      	strb	r2, [r5, r3]
    348e:	3301      	adds	r3, #1
    3490:	54ea      	strb	r2, [r5, r3]
    3492:	6828      	ldr	r0, [r5, #0]
    3494:	4b07      	ldr	r3, [pc, #28]	; (34b4 <usart_init+0x30c>)
    3496:	4798      	blx	r3
    3498:	0004      	movs	r4, r0
    349a:	4911      	ldr	r1, [pc, #68]	; (34e0 <usart_init+0x338>)
    349c:	4b11      	ldr	r3, [pc, #68]	; (34e4 <usart_init+0x33c>)
    349e:	4798      	blx	r3
    34a0:	00a4      	lsls	r4, r4, #2
    34a2:	4b11      	ldr	r3, [pc, #68]	; (34e8 <usart_init+0x340>)
    34a4:	50e5      	str	r5, [r4, r3]
    34a6:	2000      	movs	r0, #0
    34a8:	e691      	b.n	31ce <usart_init+0x26>
    34aa:	2310      	movs	r3, #16
    34ac:	9306      	str	r3, [sp, #24]
    34ae:	2300      	movs	r3, #0
    34b0:	9307      	str	r3, [sp, #28]
    34b2:	e6e8      	b.n	3286 <usart_init+0xde>
    34b4:	00004349 	.word	0x00004349
    34b8:	40000400 	.word	0x40000400
    34bc:	00004f1d 	.word	0x00004f1d
    34c0:	00004e91 	.word	0x00004e91
    34c4:	00004185 	.word	0x00004185
    34c8:	41002000 	.word	0x41002000
    34cc:	00004f39 	.word	0x00004f39
    34d0:	000040c7 	.word	0x000040c7
    34d4:	000040f1 	.word	0x000040f1
    34d8:	000041d1 	.word	0x000041d1
    34dc:	00005015 	.word	0x00005015
    34e0:	000036e1 	.word	0x000036e1
    34e4:	00004385 	.word	0x00004385
    34e8:	20000b10 	.word	0x20000b10

000034ec <usart_write_wait>:
    34ec:	79c2      	ldrb	r2, [r0, #7]
    34ee:	231c      	movs	r3, #28
    34f0:	2a00      	cmp	r2, #0
    34f2:	d101      	bne.n	34f8 <usart_write_wait+0xc>
    34f4:	0018      	movs	r0, r3
    34f6:	4770      	bx	lr
    34f8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    34fa:	b292      	uxth	r2, r2
    34fc:	3b17      	subs	r3, #23
    34fe:	2a00      	cmp	r2, #0
    3500:	d1f8      	bne.n	34f4 <usart_write_wait+0x8>
    3502:	6803      	ldr	r3, [r0, #0]
    3504:	69da      	ldr	r2, [r3, #28]
    3506:	2a00      	cmp	r2, #0
    3508:	d1fc      	bne.n	3504 <usart_write_wait+0x18>
    350a:	8519      	strh	r1, [r3, #40]	; 0x28
    350c:	2102      	movs	r1, #2
    350e:	7e1a      	ldrb	r2, [r3, #24]
    3510:	420a      	tst	r2, r1
    3512:	d0fc      	beq.n	350e <usart_write_wait+0x22>
    3514:	2300      	movs	r3, #0
    3516:	e7ed      	b.n	34f4 <usart_write_wait+0x8>

00003518 <usart_read_wait>:
    3518:	7982      	ldrb	r2, [r0, #6]
    351a:	231c      	movs	r3, #28
    351c:	2a00      	cmp	r2, #0
    351e:	d101      	bne.n	3524 <usart_read_wait+0xc>
    3520:	0018      	movs	r0, r3
    3522:	4770      	bx	lr
    3524:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    3526:	b292      	uxth	r2, r2
    3528:	3b17      	subs	r3, #23
    352a:	2a00      	cmp	r2, #0
    352c:	d1f8      	bne.n	3520 <usart_read_wait+0x8>
    352e:	6802      	ldr	r2, [r0, #0]
    3530:	7e10      	ldrb	r0, [r2, #24]
    3532:	0740      	lsls	r0, r0, #29
    3534:	d5f4      	bpl.n	3520 <usart_read_wait+0x8>
    3536:	69d3      	ldr	r3, [r2, #28]
    3538:	2b00      	cmp	r3, #0
    353a:	d1fc      	bne.n	3536 <usart_read_wait+0x1e>
    353c:	8b53      	ldrh	r3, [r2, #26]
    353e:	b2db      	uxtb	r3, r3
    3540:	0698      	lsls	r0, r3, #26
    3542:	d01d      	beq.n	3580 <usart_read_wait+0x68>
    3544:	0798      	lsls	r0, r3, #30
    3546:	d503      	bpl.n	3550 <usart_read_wait+0x38>
    3548:	2302      	movs	r3, #2
    354a:	8353      	strh	r3, [r2, #26]
    354c:	3318      	adds	r3, #24
    354e:	e7e7      	b.n	3520 <usart_read_wait+0x8>
    3550:	0758      	lsls	r0, r3, #29
    3552:	d503      	bpl.n	355c <usart_read_wait+0x44>
    3554:	2304      	movs	r3, #4
    3556:	8353      	strh	r3, [r2, #26]
    3558:	331a      	adds	r3, #26
    355a:	e7e1      	b.n	3520 <usart_read_wait+0x8>
    355c:	07d8      	lsls	r0, r3, #31
    355e:	d503      	bpl.n	3568 <usart_read_wait+0x50>
    3560:	2301      	movs	r3, #1
    3562:	8353      	strh	r3, [r2, #26]
    3564:	3312      	adds	r3, #18
    3566:	e7db      	b.n	3520 <usart_read_wait+0x8>
    3568:	06d8      	lsls	r0, r3, #27
    356a:	d503      	bpl.n	3574 <usart_read_wait+0x5c>
    356c:	2310      	movs	r3, #16
    356e:	8353      	strh	r3, [r2, #26]
    3570:	3332      	adds	r3, #50	; 0x32
    3572:	e7d5      	b.n	3520 <usart_read_wait+0x8>
    3574:	069b      	lsls	r3, r3, #26
    3576:	d503      	bpl.n	3580 <usart_read_wait+0x68>
    3578:	2320      	movs	r3, #32
    357a:	8353      	strh	r3, [r2, #26]
    357c:	3321      	adds	r3, #33	; 0x21
    357e:	e7cf      	b.n	3520 <usart_read_wait+0x8>
    3580:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    3582:	800b      	strh	r3, [r1, #0]
    3584:	2300      	movs	r3, #0
    3586:	e7cb      	b.n	3520 <usart_read_wait+0x8>

00003588 <usart_write_buffer_wait>:
    3588:	b5f0      	push	{r4, r5, r6, r7, lr}
    358a:	46ce      	mov	lr, r9
    358c:	4647      	mov	r7, r8
    358e:	b580      	push	{r7, lr}
    3590:	b083      	sub	sp, #12
    3592:	0005      	movs	r5, r0
    3594:	9101      	str	r1, [sp, #4]
    3596:	2017      	movs	r0, #23
    3598:	2a00      	cmp	r2, #0
    359a:	d104      	bne.n	35a6 <usart_write_buffer_wait+0x1e>
    359c:	b003      	add	sp, #12
    359e:	bc0c      	pop	{r2, r3}
    35a0:	4690      	mov	r8, r2
    35a2:	4699      	mov	r9, r3
    35a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35a6:	79eb      	ldrb	r3, [r5, #7]
    35a8:	3005      	adds	r0, #5
    35aa:	2b00      	cmp	r3, #0
    35ac:	d0f6      	beq.n	359c <usart_write_buffer_wait+0x14>
    35ae:	682c      	ldr	r4, [r5, #0]
    35b0:	69e3      	ldr	r3, [r4, #28]
    35b2:	2b00      	cmp	r3, #0
    35b4:	d1fc      	bne.n	35b0 <usart_write_buffer_wait+0x28>
    35b6:	3a01      	subs	r2, #1
    35b8:	b293      	uxth	r3, r2
    35ba:	4699      	mov	r9, r3
    35bc:	2600      	movs	r6, #0
    35be:	2701      	movs	r7, #1
    35c0:	4b1f      	ldr	r3, [pc, #124]	; (3640 <usart_write_buffer_wait+0xb8>)
    35c2:	4698      	mov	r8, r3
    35c4:	e011      	b.n	35ea <usart_write_buffer_wait+0x62>
    35c6:	1c73      	adds	r3, r6, #1
    35c8:	b29b      	uxth	r3, r3
    35ca:	9a01      	ldr	r2, [sp, #4]
    35cc:	5d91      	ldrb	r1, [r2, r6]
    35ce:	796a      	ldrb	r2, [r5, #5]
    35d0:	2a01      	cmp	r2, #1
    35d2:	d017      	beq.n	3604 <usart_write_buffer_wait+0x7c>
    35d4:	b289      	uxth	r1, r1
    35d6:	001e      	movs	r6, r3
    35d8:	0028      	movs	r0, r5
    35da:	4b1a      	ldr	r3, [pc, #104]	; (3644 <usart_write_buffer_wait+0xbc>)
    35dc:	4798      	blx	r3
    35de:	464b      	mov	r3, r9
    35e0:	3b01      	subs	r3, #1
    35e2:	b29b      	uxth	r3, r3
    35e4:	4699      	mov	r9, r3
    35e6:	4543      	cmp	r3, r8
    35e8:	d013      	beq.n	3612 <usart_write_buffer_wait+0x8a>
    35ea:	7e23      	ldrb	r3, [r4, #24]
    35ec:	423b      	tst	r3, r7
    35ee:	d1ea      	bne.n	35c6 <usart_write_buffer_wait+0x3e>
    35f0:	4b13      	ldr	r3, [pc, #76]	; (3640 <usart_write_buffer_wait+0xb8>)
    35f2:	7e22      	ldrb	r2, [r4, #24]
    35f4:	423a      	tst	r2, r7
    35f6:	d1e6      	bne.n	35c6 <usart_write_buffer_wait+0x3e>
    35f8:	2b01      	cmp	r3, #1
    35fa:	d019      	beq.n	3630 <usart_write_buffer_wait+0xa8>
    35fc:	3b01      	subs	r3, #1
    35fe:	2b00      	cmp	r3, #0
    3600:	d1f7      	bne.n	35f2 <usart_write_buffer_wait+0x6a>
    3602:	e7e0      	b.n	35c6 <usart_write_buffer_wait+0x3e>
    3604:	3602      	adds	r6, #2
    3606:	b2b6      	uxth	r6, r6
    3608:	9a01      	ldr	r2, [sp, #4]
    360a:	5cd3      	ldrb	r3, [r2, r3]
    360c:	021b      	lsls	r3, r3, #8
    360e:	4319      	orrs	r1, r3
    3610:	e7e2      	b.n	35d8 <usart_write_buffer_wait+0x50>
    3612:	7e23      	ldrb	r3, [r4, #24]
    3614:	079b      	lsls	r3, r3, #30
    3616:	d40d      	bmi.n	3634 <usart_write_buffer_wait+0xac>
    3618:	4b09      	ldr	r3, [pc, #36]	; (3640 <usart_write_buffer_wait+0xb8>)
    361a:	2102      	movs	r1, #2
    361c:	7e22      	ldrb	r2, [r4, #24]
    361e:	420a      	tst	r2, r1
    3620:	d10a      	bne.n	3638 <usart_write_buffer_wait+0xb0>
    3622:	2b01      	cmp	r3, #1
    3624:	d00a      	beq.n	363c <usart_write_buffer_wait+0xb4>
    3626:	3b01      	subs	r3, #1
    3628:	2b00      	cmp	r3, #0
    362a:	d1f7      	bne.n	361c <usart_write_buffer_wait+0x94>
    362c:	2000      	movs	r0, #0
    362e:	e7b5      	b.n	359c <usart_write_buffer_wait+0x14>
    3630:	2012      	movs	r0, #18
    3632:	e7b3      	b.n	359c <usart_write_buffer_wait+0x14>
    3634:	2000      	movs	r0, #0
    3636:	e7b1      	b.n	359c <usart_write_buffer_wait+0x14>
    3638:	2000      	movs	r0, #0
    363a:	e7af      	b.n	359c <usart_write_buffer_wait+0x14>
    363c:	2012      	movs	r0, #18
    363e:	e7ad      	b.n	359c <usart_write_buffer_wait+0x14>
    3640:	0000ffff 	.word	0x0000ffff
    3644:	000034ed 	.word	0x000034ed

00003648 <usart_read_buffer_wait>:
    3648:	b5f0      	push	{r4, r5, r6, r7, lr}
    364a:	46d6      	mov	lr, sl
    364c:	b500      	push	{lr}
    364e:	b084      	sub	sp, #16
    3650:	0004      	movs	r4, r0
    3652:	9101      	str	r1, [sp, #4]
    3654:	2017      	movs	r0, #23
    3656:	2a00      	cmp	r2, #0
    3658:	d103      	bne.n	3662 <usart_read_buffer_wait+0x1a>
    365a:	b004      	add	sp, #16
    365c:	bc04      	pop	{r2}
    365e:	4692      	mov	sl, r2
    3660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3662:	79a3      	ldrb	r3, [r4, #6]
    3664:	3005      	adds	r0, #5
    3666:	2b00      	cmp	r3, #0
    3668:	d0f7      	beq.n	365a <usart_read_buffer_wait+0x12>
    366a:	6826      	ldr	r6, [r4, #0]
    366c:	3a01      	subs	r2, #1
    366e:	b293      	uxth	r3, r2
    3670:	469a      	mov	sl, r3
    3672:	2500      	movs	r5, #0
    3674:	2704      	movs	r7, #4
    3676:	e019      	b.n	36ac <usart_read_buffer_wait+0x64>
    3678:	2300      	movs	r3, #0
    367a:	aa02      	add	r2, sp, #8
    367c:	80d3      	strh	r3, [r2, #6]
    367e:	1d91      	adds	r1, r2, #6
    3680:	0020      	movs	r0, r4
    3682:	4b15      	ldr	r3, [pc, #84]	; (36d8 <usart_read_buffer_wait+0x90>)
    3684:	4798      	blx	r3
    3686:	2800      	cmp	r0, #0
    3688:	d1e7      	bne.n	365a <usart_read_buffer_wait+0x12>
    368a:	1c69      	adds	r1, r5, #1
    368c:	b289      	uxth	r1, r1
    368e:	ab02      	add	r3, sp, #8
    3690:	88db      	ldrh	r3, [r3, #6]
    3692:	9a01      	ldr	r2, [sp, #4]
    3694:	5553      	strb	r3, [r2, r5]
    3696:	7962      	ldrb	r2, [r4, #5]
    3698:	2a01      	cmp	r2, #1
    369a:	d014      	beq.n	36c6 <usart_read_buffer_wait+0x7e>
    369c:	000d      	movs	r5, r1
    369e:	4653      	mov	r3, sl
    36a0:	3b01      	subs	r3, #1
    36a2:	b29b      	uxth	r3, r3
    36a4:	469a      	mov	sl, r3
    36a6:	4b0d      	ldr	r3, [pc, #52]	; (36dc <usart_read_buffer_wait+0x94>)
    36a8:	459a      	cmp	sl, r3
    36aa:	d0d6      	beq.n	365a <usart_read_buffer_wait+0x12>
    36ac:	7e33      	ldrb	r3, [r6, #24]
    36ae:	423b      	tst	r3, r7
    36b0:	d1e2      	bne.n	3678 <usart_read_buffer_wait+0x30>
    36b2:	4b0a      	ldr	r3, [pc, #40]	; (36dc <usart_read_buffer_wait+0x94>)
    36b4:	7e32      	ldrb	r2, [r6, #24]
    36b6:	423a      	tst	r2, r7
    36b8:	d1de      	bne.n	3678 <usart_read_buffer_wait+0x30>
    36ba:	2b01      	cmp	r3, #1
    36bc:	d009      	beq.n	36d2 <usart_read_buffer_wait+0x8a>
    36be:	3b01      	subs	r3, #1
    36c0:	2b00      	cmp	r3, #0
    36c2:	d1f7      	bne.n	36b4 <usart_read_buffer_wait+0x6c>
    36c4:	e7d8      	b.n	3678 <usart_read_buffer_wait+0x30>
    36c6:	3502      	adds	r5, #2
    36c8:	b2ad      	uxth	r5, r5
    36ca:	0a1b      	lsrs	r3, r3, #8
    36cc:	9a01      	ldr	r2, [sp, #4]
    36ce:	5453      	strb	r3, [r2, r1]
    36d0:	e7e5      	b.n	369e <usart_read_buffer_wait+0x56>
    36d2:	2012      	movs	r0, #18
    36d4:	e7c1      	b.n	365a <usart_read_buffer_wait+0x12>
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	00003519 	.word	0x00003519
    36dc:	0000ffff 	.word	0x0000ffff

000036e0 <_usart_interrupt_handler>:
    36e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36e2:	0080      	lsls	r0, r0, #2
    36e4:	4b62      	ldr	r3, [pc, #392]	; (3870 <_usart_interrupt_handler+0x190>)
    36e6:	58c5      	ldr	r5, [r0, r3]
    36e8:	682c      	ldr	r4, [r5, #0]
    36ea:	69e3      	ldr	r3, [r4, #28]
    36ec:	2b00      	cmp	r3, #0
    36ee:	d1fc      	bne.n	36ea <_usart_interrupt_handler+0xa>
    36f0:	7e23      	ldrb	r3, [r4, #24]
    36f2:	7da6      	ldrb	r6, [r4, #22]
    36f4:	401e      	ands	r6, r3
    36f6:	2330      	movs	r3, #48	; 0x30
    36f8:	5ceb      	ldrb	r3, [r5, r3]
    36fa:	2231      	movs	r2, #49	; 0x31
    36fc:	5caf      	ldrb	r7, [r5, r2]
    36fe:	401f      	ands	r7, r3
    3700:	07f3      	lsls	r3, r6, #31
    3702:	d522      	bpl.n	374a <_usart_interrupt_handler+0x6a>
    3704:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3706:	b29b      	uxth	r3, r3
    3708:	2b00      	cmp	r3, #0
    370a:	d01c      	beq.n	3746 <_usart_interrupt_handler+0x66>
    370c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    370e:	7813      	ldrb	r3, [r2, #0]
    3710:	b2db      	uxtb	r3, r3
    3712:	1c51      	adds	r1, r2, #1
    3714:	62a9      	str	r1, [r5, #40]	; 0x28
    3716:	7969      	ldrb	r1, [r5, #5]
    3718:	2901      	cmp	r1, #1
    371a:	d00e      	beq.n	373a <_usart_interrupt_handler+0x5a>
    371c:	b29b      	uxth	r3, r3
    371e:	05db      	lsls	r3, r3, #23
    3720:	0ddb      	lsrs	r3, r3, #23
    3722:	8523      	strh	r3, [r4, #40]	; 0x28
    3724:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3726:	3b01      	subs	r3, #1
    3728:	b29b      	uxth	r3, r3
    372a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    372c:	2b00      	cmp	r3, #0
    372e:	d10c      	bne.n	374a <_usart_interrupt_handler+0x6a>
    3730:	3301      	adds	r3, #1
    3732:	7523      	strb	r3, [r4, #20]
    3734:	3301      	adds	r3, #1
    3736:	75a3      	strb	r3, [r4, #22]
    3738:	e007      	b.n	374a <_usart_interrupt_handler+0x6a>
    373a:	7851      	ldrb	r1, [r2, #1]
    373c:	0209      	lsls	r1, r1, #8
    373e:	430b      	orrs	r3, r1
    3740:	3202      	adds	r2, #2
    3742:	62aa      	str	r2, [r5, #40]	; 0x28
    3744:	e7eb      	b.n	371e <_usart_interrupt_handler+0x3e>
    3746:	2301      	movs	r3, #1
    3748:	7523      	strb	r3, [r4, #20]
    374a:	07b3      	lsls	r3, r6, #30
    374c:	d506      	bpl.n	375c <_usart_interrupt_handler+0x7c>
    374e:	2302      	movs	r3, #2
    3750:	7523      	strb	r3, [r4, #20]
    3752:	2200      	movs	r2, #0
    3754:	3331      	adds	r3, #49	; 0x31
    3756:	54ea      	strb	r2, [r5, r3]
    3758:	07fb      	lsls	r3, r7, #31
    375a:	d41a      	bmi.n	3792 <_usart_interrupt_handler+0xb2>
    375c:	0773      	lsls	r3, r6, #29
    375e:	d565      	bpl.n	382c <_usart_interrupt_handler+0x14c>
    3760:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3762:	b29b      	uxth	r3, r3
    3764:	2b00      	cmp	r3, #0
    3766:	d05f      	beq.n	3828 <_usart_interrupt_handler+0x148>
    3768:	8b63      	ldrh	r3, [r4, #26]
    376a:	b2db      	uxtb	r3, r3
    376c:	071a      	lsls	r2, r3, #28
    376e:	d414      	bmi.n	379a <_usart_interrupt_handler+0xba>
    3770:	223f      	movs	r2, #63	; 0x3f
    3772:	4013      	ands	r3, r2
    3774:	2b00      	cmp	r3, #0
    3776:	d034      	beq.n	37e2 <_usart_interrupt_handler+0x102>
    3778:	079a      	lsls	r2, r3, #30
    377a:	d511      	bpl.n	37a0 <_usart_interrupt_handler+0xc0>
    377c:	221a      	movs	r2, #26
    377e:	2332      	movs	r3, #50	; 0x32
    3780:	54ea      	strb	r2, [r5, r3]
    3782:	3b30      	subs	r3, #48	; 0x30
    3784:	8363      	strh	r3, [r4, #26]
    3786:	077b      	lsls	r3, r7, #29
    3788:	d550      	bpl.n	382c <_usart_interrupt_handler+0x14c>
    378a:	0028      	movs	r0, r5
    378c:	696b      	ldr	r3, [r5, #20]
    378e:	4798      	blx	r3
    3790:	e04c      	b.n	382c <_usart_interrupt_handler+0x14c>
    3792:	0028      	movs	r0, r5
    3794:	68eb      	ldr	r3, [r5, #12]
    3796:	4798      	blx	r3
    3798:	e7e0      	b.n	375c <_usart_interrupt_handler+0x7c>
    379a:	2237      	movs	r2, #55	; 0x37
    379c:	4013      	ands	r3, r2
    379e:	e7e9      	b.n	3774 <_usart_interrupt_handler+0x94>
    37a0:	075a      	lsls	r2, r3, #29
    37a2:	d505      	bpl.n	37b0 <_usart_interrupt_handler+0xd0>
    37a4:	221e      	movs	r2, #30
    37a6:	2332      	movs	r3, #50	; 0x32
    37a8:	54ea      	strb	r2, [r5, r3]
    37aa:	3b2e      	subs	r3, #46	; 0x2e
    37ac:	8363      	strh	r3, [r4, #26]
    37ae:	e7ea      	b.n	3786 <_usart_interrupt_handler+0xa6>
    37b0:	07da      	lsls	r2, r3, #31
    37b2:	d505      	bpl.n	37c0 <_usart_interrupt_handler+0xe0>
    37b4:	2213      	movs	r2, #19
    37b6:	2332      	movs	r3, #50	; 0x32
    37b8:	54ea      	strb	r2, [r5, r3]
    37ba:	3b31      	subs	r3, #49	; 0x31
    37bc:	8363      	strh	r3, [r4, #26]
    37be:	e7e2      	b.n	3786 <_usart_interrupt_handler+0xa6>
    37c0:	06da      	lsls	r2, r3, #27
    37c2:	d505      	bpl.n	37d0 <_usart_interrupt_handler+0xf0>
    37c4:	2242      	movs	r2, #66	; 0x42
    37c6:	2332      	movs	r3, #50	; 0x32
    37c8:	54ea      	strb	r2, [r5, r3]
    37ca:	3b22      	subs	r3, #34	; 0x22
    37cc:	8363      	strh	r3, [r4, #26]
    37ce:	e7da      	b.n	3786 <_usart_interrupt_handler+0xa6>
    37d0:	2220      	movs	r2, #32
    37d2:	421a      	tst	r2, r3
    37d4:	d0d7      	beq.n	3786 <_usart_interrupt_handler+0xa6>
    37d6:	3221      	adds	r2, #33	; 0x21
    37d8:	2332      	movs	r3, #50	; 0x32
    37da:	54ea      	strb	r2, [r5, r3]
    37dc:	3b12      	subs	r3, #18
    37de:	8363      	strh	r3, [r4, #26]
    37e0:	e7d1      	b.n	3786 <_usart_interrupt_handler+0xa6>
    37e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    37e4:	05db      	lsls	r3, r3, #23
    37e6:	0ddb      	lsrs	r3, r3, #23
    37e8:	b2da      	uxtb	r2, r3
    37ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
    37ec:	700a      	strb	r2, [r1, #0]
    37ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    37f0:	1c51      	adds	r1, r2, #1
    37f2:	6269      	str	r1, [r5, #36]	; 0x24
    37f4:	7969      	ldrb	r1, [r5, #5]
    37f6:	2901      	cmp	r1, #1
    37f8:	d010      	beq.n	381c <_usart_interrupt_handler+0x13c>
    37fa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    37fc:	3b01      	subs	r3, #1
    37fe:	b29b      	uxth	r3, r3
    3800:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3802:	2b00      	cmp	r3, #0
    3804:	d112      	bne.n	382c <_usart_interrupt_handler+0x14c>
    3806:	3304      	adds	r3, #4
    3808:	7523      	strb	r3, [r4, #20]
    380a:	2200      	movs	r2, #0
    380c:	332e      	adds	r3, #46	; 0x2e
    380e:	54ea      	strb	r2, [r5, r3]
    3810:	07bb      	lsls	r3, r7, #30
    3812:	d50b      	bpl.n	382c <_usart_interrupt_handler+0x14c>
    3814:	0028      	movs	r0, r5
    3816:	692b      	ldr	r3, [r5, #16]
    3818:	4798      	blx	r3
    381a:	e007      	b.n	382c <_usart_interrupt_handler+0x14c>
    381c:	0a1b      	lsrs	r3, r3, #8
    381e:	7053      	strb	r3, [r2, #1]
    3820:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3822:	3301      	adds	r3, #1
    3824:	626b      	str	r3, [r5, #36]	; 0x24
    3826:	e7e8      	b.n	37fa <_usart_interrupt_handler+0x11a>
    3828:	2304      	movs	r3, #4
    382a:	7523      	strb	r3, [r4, #20]
    382c:	06f3      	lsls	r3, r6, #27
    382e:	d504      	bpl.n	383a <_usart_interrupt_handler+0x15a>
    3830:	2310      	movs	r3, #16
    3832:	7523      	strb	r3, [r4, #20]
    3834:	7623      	strb	r3, [r4, #24]
    3836:	06fb      	lsls	r3, r7, #27
    3838:	d40e      	bmi.n	3858 <_usart_interrupt_handler+0x178>
    383a:	06b3      	lsls	r3, r6, #26
    383c:	d504      	bpl.n	3848 <_usart_interrupt_handler+0x168>
    383e:	2320      	movs	r3, #32
    3840:	7523      	strb	r3, [r4, #20]
    3842:	7623      	strb	r3, [r4, #24]
    3844:	073b      	lsls	r3, r7, #28
    3846:	d40b      	bmi.n	3860 <_usart_interrupt_handler+0x180>
    3848:	0733      	lsls	r3, r6, #28
    384a:	d504      	bpl.n	3856 <_usart_interrupt_handler+0x176>
    384c:	2308      	movs	r3, #8
    384e:	7523      	strb	r3, [r4, #20]
    3850:	7623      	strb	r3, [r4, #24]
    3852:	06bb      	lsls	r3, r7, #26
    3854:	d408      	bmi.n	3868 <_usart_interrupt_handler+0x188>
    3856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3858:	0028      	movs	r0, r5
    385a:	69eb      	ldr	r3, [r5, #28]
    385c:	4798      	blx	r3
    385e:	e7ec      	b.n	383a <_usart_interrupt_handler+0x15a>
    3860:	0028      	movs	r0, r5
    3862:	69ab      	ldr	r3, [r5, #24]
    3864:	4798      	blx	r3
    3866:	e7ef      	b.n	3848 <_usart_interrupt_handler+0x168>
    3868:	6a2b      	ldr	r3, [r5, #32]
    386a:	0028      	movs	r0, r5
    386c:	4798      	blx	r3
    386e:	e7f2      	b.n	3856 <_usart_interrupt_handler+0x176>
    3870:	20000b10 	.word	0x20000b10

00003874 <_tcc_interrupt_handler>:
    3874:	b5f0      	push	{r4, r5, r6, r7, lr}
    3876:	46c6      	mov	lr, r8
    3878:	b500      	push	{lr}
    387a:	0080      	lsls	r0, r0, #2
    387c:	4b0e      	ldr	r3, [pc, #56]	; (38b8 <_tcc_interrupt_handler+0x44>)
    387e:	58c7      	ldr	r7, [r0, r3]
    3880:	683b      	ldr	r3, [r7, #0]
    3882:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    3884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3888:	4013      	ands	r3, r2
    388a:	401e      	ands	r6, r3
    388c:	2400      	movs	r4, #0
    388e:	4b0b      	ldr	r3, [pc, #44]	; (38bc <_tcc_interrupt_handler+0x48>)
    3890:	4698      	mov	r8, r3
    3892:	e002      	b.n	389a <_tcc_interrupt_handler+0x26>
    3894:	3404      	adds	r4, #4
    3896:	2c30      	cmp	r4, #48	; 0x30
    3898:	d00a      	beq.n	38b0 <_tcc_interrupt_handler+0x3c>
    389a:	4643      	mov	r3, r8
    389c:	58e5      	ldr	r5, [r4, r3]
    389e:	4235      	tst	r5, r6
    38a0:	d0f8      	beq.n	3894 <_tcc_interrupt_handler+0x20>
    38a2:	193b      	adds	r3, r7, r4
    38a4:	685b      	ldr	r3, [r3, #4]
    38a6:	0038      	movs	r0, r7
    38a8:	4798      	blx	r3
    38aa:	683b      	ldr	r3, [r7, #0]
    38ac:	62dd      	str	r5, [r3, #44]	; 0x2c
    38ae:	e7f1      	b.n	3894 <_tcc_interrupt_handler+0x20>
    38b0:	bc04      	pop	{r2}
    38b2:	4690      	mov	r8, r2
    38b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	20000ab0 	.word	0x20000ab0
    38bc:	00009634 	.word	0x00009634

000038c0 <TCC0_Handler>:
    38c0:	b510      	push	{r4, lr}
    38c2:	2000      	movs	r0, #0
    38c4:	4b01      	ldr	r3, [pc, #4]	; (38cc <TCC0_Handler+0xc>)
    38c6:	4798      	blx	r3
    38c8:	bd10      	pop	{r4, pc}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	00003875 	.word	0x00003875

000038d0 <TCC1_Handler>:
    38d0:	b510      	push	{r4, lr}
    38d2:	2001      	movs	r0, #1
    38d4:	4b01      	ldr	r3, [pc, #4]	; (38dc <TCC1_Handler+0xc>)
    38d6:	4798      	blx	r3
    38d8:	bd10      	pop	{r4, pc}
    38da:	46c0      	nop			; (mov r8, r8)
    38dc:	00003875 	.word	0x00003875

000038e0 <TCC2_Handler>:
    38e0:	b510      	push	{r4, lr}
    38e2:	2002      	movs	r0, #2
    38e4:	4b01      	ldr	r3, [pc, #4]	; (38ec <TCC2_Handler+0xc>)
    38e6:	4798      	blx	r3
    38e8:	bd10      	pop	{r4, pc}
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	00003875 	.word	0x00003875

000038f0 <_read>:
    38f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38f2:	46c6      	mov	lr, r8
    38f4:	b500      	push	{lr}
    38f6:	000c      	movs	r4, r1
    38f8:	4690      	mov	r8, r2
    38fa:	2800      	cmp	r0, #0
    38fc:	d10f      	bne.n	391e <_read+0x2e>
    38fe:	2a00      	cmp	r2, #0
    3900:	dd11      	ble.n	3926 <_read+0x36>
    3902:	188f      	adds	r7, r1, r2
    3904:	4e09      	ldr	r6, [pc, #36]	; (392c <_read+0x3c>)
    3906:	4d0a      	ldr	r5, [pc, #40]	; (3930 <_read+0x40>)
    3908:	6830      	ldr	r0, [r6, #0]
    390a:	0021      	movs	r1, r4
    390c:	682b      	ldr	r3, [r5, #0]
    390e:	4798      	blx	r3
    3910:	3401      	adds	r4, #1
    3912:	42bc      	cmp	r4, r7
    3914:	d1f8      	bne.n	3908 <_read+0x18>
    3916:	4640      	mov	r0, r8
    3918:	bc04      	pop	{r2}
    391a:	4690      	mov	r8, r2
    391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    391e:	2301      	movs	r3, #1
    3920:	425b      	negs	r3, r3
    3922:	4698      	mov	r8, r3
    3924:	e7f7      	b.n	3916 <_read+0x26>
    3926:	4680      	mov	r8, r0
    3928:	e7f5      	b.n	3916 <_read+0x26>
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	20000ac4 	.word	0x20000ac4
    3930:	20000abc 	.word	0x20000abc

00003934 <_write>:
    3934:	b5f0      	push	{r4, r5, r6, r7, lr}
    3936:	46c6      	mov	lr, r8
    3938:	b500      	push	{lr}
    393a:	000e      	movs	r6, r1
    393c:	0015      	movs	r5, r2
    393e:	3801      	subs	r0, #1
    3940:	2802      	cmp	r0, #2
    3942:	d810      	bhi.n	3966 <_write+0x32>
    3944:	2a00      	cmp	r2, #0
    3946:	d011      	beq.n	396c <_write+0x38>
    3948:	2400      	movs	r4, #0
    394a:	4b0c      	ldr	r3, [pc, #48]	; (397c <_write+0x48>)
    394c:	4698      	mov	r8, r3
    394e:	4f0c      	ldr	r7, [pc, #48]	; (3980 <_write+0x4c>)
    3950:	4643      	mov	r3, r8
    3952:	6818      	ldr	r0, [r3, #0]
    3954:	5d31      	ldrb	r1, [r6, r4]
    3956:	683b      	ldr	r3, [r7, #0]
    3958:	4798      	blx	r3
    395a:	2800      	cmp	r0, #0
    395c:	db08      	blt.n	3970 <_write+0x3c>
    395e:	3401      	adds	r4, #1
    3960:	42a5      	cmp	r5, r4
    3962:	d1f5      	bne.n	3950 <_write+0x1c>
    3964:	e006      	b.n	3974 <_write+0x40>
    3966:	2401      	movs	r4, #1
    3968:	4264      	negs	r4, r4
    396a:	e003      	b.n	3974 <_write+0x40>
    396c:	0014      	movs	r4, r2
    396e:	e001      	b.n	3974 <_write+0x40>
    3970:	2401      	movs	r4, #1
    3972:	4264      	negs	r4, r4
    3974:	0020      	movs	r0, r4
    3976:	bc04      	pop	{r2}
    3978:	4690      	mov	r8, r2
    397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    397c:	20000ac4 	.word	0x20000ac4
    3980:	20000ac0 	.word	0x20000ac0

00003984 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3984:	b570      	push	{r4, r5, r6, lr}
    3986:	b082      	sub	sp, #8
    3988:	0005      	movs	r5, r0
    398a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    398c:	2200      	movs	r2, #0
    398e:	466b      	mov	r3, sp
    3990:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3992:	4c06      	ldr	r4, [pc, #24]	; (39ac <usart_serial_getchar+0x28>)
    3994:	466b      	mov	r3, sp
    3996:	1d99      	adds	r1, r3, #6
    3998:	0028      	movs	r0, r5
    399a:	47a0      	blx	r4
    399c:	2800      	cmp	r0, #0
    399e:	d1f9      	bne.n	3994 <usart_serial_getchar+0x10>

	*c = temp;
    39a0:	466b      	mov	r3, sp
    39a2:	3306      	adds	r3, #6
    39a4:	881b      	ldrh	r3, [r3, #0]
    39a6:	7033      	strb	r3, [r6, #0]
}
    39a8:	b002      	add	sp, #8
    39aa:	bd70      	pop	{r4, r5, r6, pc}
    39ac:	00003519 	.word	0x00003519

000039b0 <usart_serial_putchar>:
{
    39b0:	b570      	push	{r4, r5, r6, lr}
    39b2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    39b4:	b28c      	uxth	r4, r1
    39b6:	4e03      	ldr	r6, [pc, #12]	; (39c4 <usart_serial_putchar+0x14>)
    39b8:	0021      	movs	r1, r4
    39ba:	0028      	movs	r0, r5
    39bc:	47b0      	blx	r6
    39be:	2800      	cmp	r0, #0
    39c0:	d1fa      	bne.n	39b8 <usart_serial_putchar+0x8>
}
    39c2:	bd70      	pop	{r4, r5, r6, pc}
    39c4:	000034ed 	.word	0x000034ed

000039c8 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    39c8:	b510      	push	{r4, lr}
    39ca:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    39cc:	466b      	mov	r3, sp
    39ce:	1ddc      	adds	r4, r3, #7
    39d0:	2201      	movs	r2, #1
    39d2:	0021      	movs	r1, r4
    39d4:	480f      	ldr	r0, [pc, #60]	; (3a14 <USART_HOST_ISR_VECT+0x4c>)
    39d6:	4b10      	ldr	r3, [pc, #64]	; (3a18 <USART_HOST_ISR_VECT+0x50>)
    39d8:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    39da:	b672      	cpsid	i
    39dc:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    39e0:	2200      	movs	r2, #0
    39e2:	4b0e      	ldr	r3, [pc, #56]	; (3a1c <USART_HOST_ISR_VECT+0x54>)
    39e4:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    39e6:	4b0e      	ldr	r3, [pc, #56]	; (3a20 <USART_HOST_ISR_VECT+0x58>)
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	7821      	ldrb	r1, [r4, #0]
    39ec:	4a0d      	ldr	r2, [pc, #52]	; (3a24 <USART_HOST_ISR_VECT+0x5c>)
    39ee:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    39f0:	2b9b      	cmp	r3, #155	; 0x9b
    39f2:	d00a      	beq.n	3a0a <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    39f4:	3301      	adds	r3, #1
    39f6:	4a0a      	ldr	r2, [pc, #40]	; (3a20 <USART_HOST_ISR_VECT+0x58>)
    39f8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    39fa:	2201      	movs	r2, #1
    39fc:	4b07      	ldr	r3, [pc, #28]	; (3a1c <USART_HOST_ISR_VECT+0x54>)
    39fe:	701a      	strb	r2, [r3, #0]
    3a00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a04:	b662      	cpsie	i
}
    3a06:	b002      	add	sp, #8
    3a08:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    3a0a:	2200      	movs	r2, #0
    3a0c:	4b04      	ldr	r3, [pc, #16]	; (3a20 <USART_HOST_ISR_VECT+0x58>)
    3a0e:	701a      	strb	r2, [r3, #0]
    3a10:	e7f3      	b.n	39fa <USART_HOST_ISR_VECT+0x32>
    3a12:	46c0      	nop			; (mov r8, r8)
    3a14:	200000a8 	.word	0x200000a8
    3a18:	00003649 	.word	0x00003649
    3a1c:	2000000c 	.word	0x2000000c
    3a20:	2000017c 	.word	0x2000017c
    3a24:	200000e0 	.word	0x200000e0

00003a28 <sio2host_init>:
{
    3a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a2a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3a2c:	2380      	movs	r3, #128	; 0x80
    3a2e:	05db      	lsls	r3, r3, #23
    3a30:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3a32:	2300      	movs	r3, #0
    3a34:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3a36:	22ff      	movs	r2, #255	; 0xff
    3a38:	4669      	mov	r1, sp
    3a3a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3a3c:	2200      	movs	r2, #0
    3a3e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3a40:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3a42:	2401      	movs	r4, #1
    3a44:	2124      	movs	r1, #36	; 0x24
    3a46:	4668      	mov	r0, sp
    3a48:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3a4a:	3101      	adds	r1, #1
    3a4c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3a4e:	3101      	adds	r1, #1
    3a50:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3a52:	3101      	adds	r1, #1
    3a54:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3a56:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3a58:	3105      	adds	r1, #5
    3a5a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3a5c:	3101      	adds	r1, #1
    3a5e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3a60:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3a62:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3a64:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3a66:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3a68:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3a6a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3a6c:	2313      	movs	r3, #19
    3a6e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3a70:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3a72:	23c4      	movs	r3, #196	; 0xc4
    3a74:	039b      	lsls	r3, r3, #14
    3a76:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3a78:	2301      	movs	r3, #1
    3a7a:	425b      	negs	r3, r3
    3a7c:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3a7e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3a80:	4b2d      	ldr	r3, [pc, #180]	; (3b38 <sio2host_init+0x110>)
    3a82:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3a84:	4b2d      	ldr	r3, [pc, #180]	; (3b3c <sio2host_init+0x114>)
    3a86:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    3a88:	23e1      	movs	r3, #225	; 0xe1
    3a8a:	025b      	lsls	r3, r3, #9
    3a8c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3a8e:	4d2c      	ldr	r5, [pc, #176]	; (3b40 <sio2host_init+0x118>)
    3a90:	4b2c      	ldr	r3, [pc, #176]	; (3b44 <sio2host_init+0x11c>)
    3a92:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3a94:	4a2c      	ldr	r2, [pc, #176]	; (3b48 <sio2host_init+0x120>)
    3a96:	4b2d      	ldr	r3, [pc, #180]	; (3b4c <sio2host_init+0x124>)
    3a98:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3a9a:	4a2d      	ldr	r2, [pc, #180]	; (3b50 <sio2host_init+0x128>)
    3a9c:	4b2d      	ldr	r3, [pc, #180]	; (3b54 <sio2host_init+0x12c>)
    3a9e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3aa0:	466a      	mov	r2, sp
    3aa2:	492d      	ldr	r1, [pc, #180]	; (3b58 <sio2host_init+0x130>)
    3aa4:	0028      	movs	r0, r5
    3aa6:	4b2d      	ldr	r3, [pc, #180]	; (3b5c <sio2host_init+0x134>)
    3aa8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3aaa:	4f2d      	ldr	r7, [pc, #180]	; (3b60 <sio2host_init+0x138>)
    3aac:	683b      	ldr	r3, [r7, #0]
    3aae:	6898      	ldr	r0, [r3, #8]
    3ab0:	2100      	movs	r1, #0
    3ab2:	4e2c      	ldr	r6, [pc, #176]	; (3b64 <sio2host_init+0x13c>)
    3ab4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3ab6:	683b      	ldr	r3, [r7, #0]
    3ab8:	6858      	ldr	r0, [r3, #4]
    3aba:	2100      	movs	r1, #0
    3abc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3abe:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3ac0:	0030      	movs	r0, r6
    3ac2:	4b29      	ldr	r3, [pc, #164]	; (3b68 <sio2host_init+0x140>)
    3ac4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3ac6:	231f      	movs	r3, #31
    3ac8:	4018      	ands	r0, r3
    3aca:	4084      	lsls	r4, r0
    3acc:	4b27      	ldr	r3, [pc, #156]	; (3b6c <sio2host_init+0x144>)
    3ace:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ad0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3ad2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	d1fc      	bne.n	3ad2 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3ad8:	6833      	ldr	r3, [r6, #0]
    3ada:	2202      	movs	r2, #2
    3adc:	4313      	orrs	r3, r2
    3ade:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ae0:	4b17      	ldr	r3, [pc, #92]	; (3b40 <sio2host_init+0x118>)
    3ae2:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3ae4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3ae6:	2a00      	cmp	r2, #0
    3ae8:	d1fc      	bne.n	3ae4 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3aea:	6859      	ldr	r1, [r3, #4]
    3aec:	2280      	movs	r2, #128	; 0x80
    3aee:	0252      	lsls	r2, r2, #9
    3af0:	430a      	orrs	r2, r1
    3af2:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3af4:	2101      	movs	r1, #1
    3af6:	4a12      	ldr	r2, [pc, #72]	; (3b40 <sio2host_init+0x118>)
    3af8:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3afa:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3afc:	2a00      	cmp	r2, #0
    3afe:	d1fc      	bne.n	3afa <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    3b00:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b02:	2a00      	cmp	r2, #0
    3b04:	d1fc      	bne.n	3b00 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3b06:	6859      	ldr	r1, [r3, #4]
    3b08:	2280      	movs	r2, #128	; 0x80
    3b0a:	0292      	lsls	r2, r2, #10
    3b0c:	430a      	orrs	r2, r1
    3b0e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3b10:	2101      	movs	r1, #1
    3b12:	4a0b      	ldr	r2, [pc, #44]	; (3b40 <sio2host_init+0x118>)
    3b14:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3b16:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b18:	2a00      	cmp	r2, #0
    3b1a:	d1fc      	bne.n	3b16 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    3b1c:	4914      	ldr	r1, [pc, #80]	; (3b70 <sio2host_init+0x148>)
    3b1e:	2000      	movs	r0, #0
    3b20:	4b14      	ldr	r3, [pc, #80]	; (3b74 <sio2host_init+0x14c>)
    3b22:	4798      	blx	r3
    3b24:	2204      	movs	r2, #4
    3b26:	4b0c      	ldr	r3, [pc, #48]	; (3b58 <sio2host_init+0x130>)
    3b28:	759a      	strb	r2, [r3, #22]
    3b2a:	32fd      	adds	r2, #253	; 0xfd
    3b2c:	32ff      	adds	r2, #255	; 0xff
    3b2e:	4b0f      	ldr	r3, [pc, #60]	; (3b6c <sio2host_init+0x144>)
    3b30:	601a      	str	r2, [r3, #0]
}
    3b32:	b011      	add	sp, #68	; 0x44
    3b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	00360003 	.word	0x00360003
    3b3c:	00370003 	.word	0x00370003
    3b40:	200000a8 	.word	0x200000a8
    3b44:	20000ac4 	.word	0x20000ac4
    3b48:	000039b1 	.word	0x000039b1
    3b4c:	20000ac0 	.word	0x20000ac0
    3b50:	00003985 	.word	0x00003985
    3b54:	20000abc 	.word	0x20000abc
    3b58:	42001c00 	.word	0x42001c00
    3b5c:	000031a9 	.word	0x000031a9
    3b60:	20000010 	.word	0x20000010
    3b64:	00007831 	.word	0x00007831
    3b68:	000043c1 	.word	0x000043c1
    3b6c:	e000e100 	.word	0xe000e100
    3b70:	000039c9 	.word	0x000039c9
    3b74:	00004385 	.word	0x00004385

00003b78 <sio2host_tx>:
{
    3b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b7a:	b083      	sub	sp, #12
    3b7c:	0004      	movs	r4, r0
    3b7e:	9101      	str	r1, [sp, #4]
	for(count=0;count<length;count++)
    3b80:	2200      	movs	r2, #0
    3b82:	4b13      	ldr	r3, [pc, #76]	; (3bd0 <sio2host_tx+0x58>)
    3b84:	601a      	str	r2, [r3, #0]
    3b86:	2900      	cmp	r1, #0
    3b88:	d008      	beq.n	3b9c <sio2host_tx+0x24>
    3b8a:	2300      	movs	r3, #0
		pt[count]=*(data+count);
    3b8c:	4e11      	ldr	r6, [pc, #68]	; (3bd4 <sio2host_tx+0x5c>)
	for(count=0;count<length;count++)
    3b8e:	4810      	ldr	r0, [pc, #64]	; (3bd0 <sio2host_tx+0x58>)
		pt[count]=*(data+count);
    3b90:	5ce2      	ldrb	r2, [r4, r3]
    3b92:	559a      	strb	r2, [r3, r6]
	for(count=0;count<length;count++)
    3b94:	3301      	adds	r3, #1
    3b96:	6003      	str	r3, [r0, #0]
    3b98:	428b      	cmp	r3, r1
    3b9a:	d3f9      	bcc.n	3b90 <sio2host_tx+0x18>
	if(strcmp(pt,"#1F1")==0 || strcmp(pt,"#1F0")==0)
    3b9c:	490e      	ldr	r1, [pc, #56]	; (3bd8 <sio2host_tx+0x60>)
    3b9e:	480d      	ldr	r0, [pc, #52]	; (3bd4 <sio2host_tx+0x5c>)
    3ba0:	4b0e      	ldr	r3, [pc, #56]	; (3bdc <sio2host_tx+0x64>)
    3ba2:	4798      	blx	r3
    3ba4:	2800      	cmp	r0, #0
    3ba6:	d005      	beq.n	3bb4 <sio2host_tx+0x3c>
    3ba8:	490d      	ldr	r1, [pc, #52]	; (3be0 <sio2host_tx+0x68>)
    3baa:	480a      	ldr	r0, [pc, #40]	; (3bd4 <sio2host_tx+0x5c>)
    3bac:	4b0b      	ldr	r3, [pc, #44]	; (3bdc <sio2host_tx+0x64>)
    3bae:	4798      	blx	r3
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d109      	bne.n	3bc8 <sio2host_tx+0x50>
	return usart_write_buffer_wait(module, tx_data, length);
    3bb4:	466b      	mov	r3, sp
    3bb6:	889f      	ldrh	r7, [r3, #4]
    3bb8:	4e0a      	ldr	r6, [pc, #40]	; (3be4 <sio2host_tx+0x6c>)
    3bba:	4d0b      	ldr	r5, [pc, #44]	; (3be8 <sio2host_tx+0x70>)
    3bbc:	003a      	movs	r2, r7
    3bbe:	0021      	movs	r1, r4
    3bc0:	0030      	movs	r0, r6
    3bc2:	47a8      	blx	r5
		}while (status != STATUS_OK);
    3bc4:	2800      	cmp	r0, #0
    3bc6:	d1f9      	bne.n	3bbc <sio2host_tx+0x44>
}
    3bc8:	9801      	ldr	r0, [sp, #4]
    3bca:	b003      	add	sp, #12
    3bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	20000ac8 	.word	0x20000ac8
    3bd4:	200000dc 	.word	0x200000dc
    3bd8:	00009664 	.word	0x00009664
    3bdc:	0000799d 	.word	0x0000799d
    3be0:	0000966c 	.word	0x0000966c
    3be4:	200000a8 	.word	0x200000a8
    3be8:	00003589 	.word	0x00003589

00003bec <usr_frame_received_cb>:
    3bec:	b510      	push	{r4, lr}
    3bee:	7a42      	ldrb	r2, [r0, #9]
    3bf0:	7a83      	ldrb	r3, [r0, #10]
    3bf2:	021b      	lsls	r3, r3, #8
    3bf4:	431a      	orrs	r2, r3
    3bf6:	7ac3      	ldrb	r3, [r0, #11]
    3bf8:	041b      	lsls	r3, r3, #16
    3bfa:	4313      	orrs	r3, r2
    3bfc:	7b00      	ldrb	r0, [r0, #12]
    3bfe:	0600      	lsls	r0, r0, #24
    3c00:	4318      	orrs	r0, r3
    3c02:	7801      	ldrb	r1, [r0, #0]
    3c04:	390b      	subs	r1, #11
    3c06:	b2c9      	uxtb	r1, r1
    3c08:	300a      	adds	r0, #10
    3c0a:	4b01      	ldr	r3, [pc, #4]	; (3c10 <usr_frame_received_cb+0x24>)
    3c0c:	4798      	blx	r3
    3c0e:	bd10      	pop	{r4, pc}
    3c10:	00003b79 	.word	0x00003b79

00003c14 <usr_frame_transmitted_cb>:
    3c14:	4770      	bx	lr
	...

00003c18 <wireless_init>:
    3c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c1a:	b083      	sub	sp, #12
    3c1c:	4b12      	ldr	r3, [pc, #72]	; (3c68 <wireless_init+0x50>)
    3c1e:	4798      	blx	r3
    3c20:	4b12      	ldr	r3, [pc, #72]	; (3c6c <wireless_init+0x54>)
    3c22:	4798      	blx	r3
    3c24:	4b12      	ldr	r3, [pc, #72]	; (3c70 <wireless_init+0x58>)
    3c26:	4798      	blx	r3
    3c28:	2800      	cmp	r0, #0
    3c2a:	d11c      	bne.n	3c66 <wireless_init+0x4e>
    3c2c:	466b      	mov	r3, sp
    3c2e:	1d99      	adds	r1, r3, #6
    3c30:	2302      	movs	r3, #2
    3c32:	800b      	strh	r3, [r1, #0]
    3c34:	af01      	add	r7, sp, #4
    3c36:	4b0f      	ldr	r3, [pc, #60]	; (3c74 <wireless_init+0x5c>)
    3c38:	803b      	strh	r3, [r7, #0]
    3c3a:	466b      	mov	r3, sp
    3c3c:	1cde      	adds	r6, r3, #3
    3c3e:	230b      	movs	r3, #11
    3c40:	7033      	strb	r3, [r6, #0]
    3c42:	466b      	mov	r3, sp
    3c44:	1c9d      	adds	r5, r3, #2
    3c46:	2300      	movs	r3, #0
    3c48:	702b      	strb	r3, [r5, #0]
    3c4a:	2053      	movs	r0, #83	; 0x53
    3c4c:	4c0a      	ldr	r4, [pc, #40]	; (3c78 <wireless_init+0x60>)
    3c4e:	47a0      	blx	r4
    3c50:	0039      	movs	r1, r7
    3c52:	2050      	movs	r0, #80	; 0x50
    3c54:	47a0      	blx	r4
    3c56:	0031      	movs	r1, r6
    3c58:	2000      	movs	r0, #0
    3c5a:	47a0      	blx	r4
    3c5c:	0029      	movs	r1, r5
    3c5e:	2004      	movs	r0, #4
    3c60:	47a0      	blx	r4
    3c62:	b003      	add	sp, #12
    3c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c66:	e7fe      	b.n	3c66 <wireless_init+0x4e>
    3c68:	00003c8d 	.word	0x00003c8d
    3c6c:	00003d11 	.word	0x00003d11
    3c70:	00006021 	.word	0x00006021
    3c74:	00001234 	.word	0x00001234
    3c78:	00006311 	.word	0x00006311

00003c7c <init_data_reception>:
    3c7c:	b510      	push	{r4, lr}
    3c7e:	2006      	movs	r0, #6
    3c80:	4b01      	ldr	r3, [pc, #4]	; (3c88 <init_data_reception+0xc>)
    3c82:	4798      	blx	r3
    3c84:	bd10      	pop	{r4, pc}
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	00006669 	.word	0x00006669

00003c8c <system_board_init>:
    3c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c8e:	b083      	sub	sp, #12
    3c90:	ac01      	add	r4, sp, #4
    3c92:	2600      	movs	r6, #0
    3c94:	7026      	strb	r6, [r4, #0]
    3c96:	2701      	movs	r7, #1
    3c98:	7067      	strb	r7, [r4, #1]
    3c9a:	70a6      	strb	r6, [r4, #2]
    3c9c:	0021      	movs	r1, r4
    3c9e:	2005      	movs	r0, #5
    3ca0:	4d14      	ldr	r5, [pc, #80]	; (3cf4 <system_board_init+0x68>)
    3ca2:	47a8      	blx	r5
    3ca4:	7027      	strb	r7, [r4, #0]
    3ca6:	0021      	movs	r1, r4
    3ca8:	2052      	movs	r0, #82	; 0x52
    3caa:	47a8      	blx	r5
    3cac:	0021      	movs	r1, r4
    3cae:	203e      	movs	r0, #62	; 0x3e
    3cb0:	47a8      	blx	r5
    3cb2:	0021      	movs	r1, r4
    3cb4:	203f      	movs	r0, #63	; 0x3f
    3cb6:	47a8      	blx	r5
    3cb8:	0021      	movs	r1, r4
    3cba:	202f      	movs	r0, #47	; 0x2f
    3cbc:	47a8      	blx	r5
    3cbe:	0021      	movs	r1, r4
    3cc0:	2014      	movs	r0, #20
    3cc2:	47a8      	blx	r5
    3cc4:	2280      	movs	r2, #128	; 0x80
    3cc6:	02d2      	lsls	r2, r2, #11
    3cc8:	4b0b      	ldr	r3, [pc, #44]	; (3cf8 <system_board_init+0x6c>)
    3cca:	619a      	str	r2, [r3, #24]
    3ccc:	4b0b      	ldr	r3, [pc, #44]	; (3cfc <system_board_init+0x70>)
    3cce:	2280      	movs	r2, #128	; 0x80
    3cd0:	05d2      	lsls	r2, r2, #23
    3cd2:	619a      	str	r2, [r3, #24]
    3cd4:	2280      	movs	r2, #128	; 0x80
    3cd6:	0612      	lsls	r2, r2, #24
    3cd8:	619a      	str	r2, [r3, #24]
    3cda:	2280      	movs	r2, #128	; 0x80
    3cdc:	0212      	lsls	r2, r2, #8
    3cde:	619a      	str	r2, [r3, #24]
    3ce0:	2280      	movs	r2, #128	; 0x80
    3ce2:	0352      	lsls	r2, r2, #13
    3ce4:	4b06      	ldr	r3, [pc, #24]	; (3d00 <system_board_init+0x74>)
    3ce6:	619a      	str	r2, [r3, #24]
    3ce8:	7026      	strb	r6, [r4, #0]
    3cea:	0021      	movs	r1, r4
    3cec:	2053      	movs	r0, #83	; 0x53
    3cee:	47a8      	blx	r5
    3cf0:	b003      	add	sp, #12
    3cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cf4:	00003fe9 	.word	0x00003fe9
    3cf8:	41004500 	.word	0x41004500
    3cfc:	41004480 	.word	0x41004480
    3d00:	41004400 	.word	0x41004400

00003d04 <modules_init>:
    3d04:	b510      	push	{r4, lr}
    3d06:	4b01      	ldr	r3, [pc, #4]	; (3d0c <modules_init+0x8>)
    3d08:	4798      	blx	r3
    3d0a:	bd10      	pop	{r4, pc}
    3d0c:	00003a29 	.word	0x00003a29

00003d10 <delay_init>:
    3d10:	b570      	push	{r4, r5, r6, lr}
    3d12:	2000      	movs	r0, #0
    3d14:	4b08      	ldr	r3, [pc, #32]	; (3d38 <delay_init+0x28>)
    3d16:	4798      	blx	r3
    3d18:	0005      	movs	r5, r0
    3d1a:	4c08      	ldr	r4, [pc, #32]	; (3d3c <delay_init+0x2c>)
    3d1c:	21fa      	movs	r1, #250	; 0xfa
    3d1e:	0089      	lsls	r1, r1, #2
    3d20:	47a0      	blx	r4
    3d22:	4b07      	ldr	r3, [pc, #28]	; (3d40 <delay_init+0x30>)
    3d24:	6018      	str	r0, [r3, #0]
    3d26:	4907      	ldr	r1, [pc, #28]	; (3d44 <delay_init+0x34>)
    3d28:	0028      	movs	r0, r5
    3d2a:	47a0      	blx	r4
    3d2c:	4b06      	ldr	r3, [pc, #24]	; (3d48 <delay_init+0x38>)
    3d2e:	6018      	str	r0, [r3, #0]
    3d30:	2205      	movs	r2, #5
    3d32:	4b06      	ldr	r3, [pc, #24]	; (3d4c <delay_init+0x3c>)
    3d34:	601a      	str	r2, [r3, #0]
    3d36:	bd70      	pop	{r4, r5, r6, pc}
    3d38:	00004e05 	.word	0x00004e05
    3d3c:	00007281 	.word	0x00007281
    3d40:	20000004 	.word	0x20000004
    3d44:	000f4240 	.word	0x000f4240
    3d48:	20000008 	.word	0x20000008
    3d4c:	e000e010 	.word	0xe000e010

00003d50 <delay_cycles_us>:
    3d50:	b530      	push	{r4, r5, lr}
    3d52:	4b08      	ldr	r3, [pc, #32]	; (3d74 <delay_cycles_us+0x24>)
    3d54:	681c      	ldr	r4, [r3, #0]
    3d56:	4a08      	ldr	r2, [pc, #32]	; (3d78 <delay_cycles_us+0x28>)
    3d58:	2500      	movs	r5, #0
    3d5a:	2180      	movs	r1, #128	; 0x80
    3d5c:	0249      	lsls	r1, r1, #9
    3d5e:	3801      	subs	r0, #1
    3d60:	d307      	bcc.n	3d72 <delay_cycles_us+0x22>
    3d62:	2c00      	cmp	r4, #0
    3d64:	d0fb      	beq.n	3d5e <delay_cycles_us+0xe>
    3d66:	6054      	str	r4, [r2, #4]
    3d68:	6095      	str	r5, [r2, #8]
    3d6a:	6813      	ldr	r3, [r2, #0]
    3d6c:	420b      	tst	r3, r1
    3d6e:	d0fc      	beq.n	3d6a <delay_cycles_us+0x1a>
    3d70:	e7f5      	b.n	3d5e <delay_cycles_us+0xe>
    3d72:	bd30      	pop	{r4, r5, pc}
    3d74:	20000008 	.word	0x20000008
    3d78:	e000e010 	.word	0xe000e010

00003d7c <delay_cycles_ms>:
    3d7c:	b530      	push	{r4, r5, lr}
    3d7e:	4b08      	ldr	r3, [pc, #32]	; (3da0 <delay_cycles_ms+0x24>)
    3d80:	681c      	ldr	r4, [r3, #0]
    3d82:	4a08      	ldr	r2, [pc, #32]	; (3da4 <delay_cycles_ms+0x28>)
    3d84:	2500      	movs	r5, #0
    3d86:	2180      	movs	r1, #128	; 0x80
    3d88:	0249      	lsls	r1, r1, #9
    3d8a:	3801      	subs	r0, #1
    3d8c:	d307      	bcc.n	3d9e <delay_cycles_ms+0x22>
    3d8e:	2c00      	cmp	r4, #0
    3d90:	d0fb      	beq.n	3d8a <delay_cycles_ms+0xe>
    3d92:	6054      	str	r4, [r2, #4]
    3d94:	6095      	str	r5, [r2, #8]
    3d96:	6813      	ldr	r3, [r2, #0]
    3d98:	420b      	tst	r3, r1
    3d9a:	d0fc      	beq.n	3d96 <delay_cycles_ms+0x1a>
    3d9c:	e7f5      	b.n	3d8a <delay_cycles_ms+0xe>
    3d9e:	bd30      	pop	{r4, r5, pc}
    3da0:	20000004 	.word	0x20000004
    3da4:	e000e010 	.word	0xe000e010

00003da8 <cpu_irq_enter_critical>:
    3da8:	4b0c      	ldr	r3, [pc, #48]	; (3ddc <cpu_irq_enter_critical+0x34>)
    3daa:	681b      	ldr	r3, [r3, #0]
    3dac:	2b00      	cmp	r3, #0
    3dae:	d106      	bne.n	3dbe <cpu_irq_enter_critical+0x16>
    3db0:	f3ef 8310 	mrs	r3, PRIMASK
    3db4:	2b00      	cmp	r3, #0
    3db6:	d007      	beq.n	3dc8 <cpu_irq_enter_critical+0x20>
    3db8:	2200      	movs	r2, #0
    3dba:	4b09      	ldr	r3, [pc, #36]	; (3de0 <cpu_irq_enter_critical+0x38>)
    3dbc:	701a      	strb	r2, [r3, #0]
    3dbe:	4a07      	ldr	r2, [pc, #28]	; (3ddc <cpu_irq_enter_critical+0x34>)
    3dc0:	6813      	ldr	r3, [r2, #0]
    3dc2:	3301      	adds	r3, #1
    3dc4:	6013      	str	r3, [r2, #0]
    3dc6:	4770      	bx	lr
    3dc8:	b672      	cpsid	i
    3dca:	f3bf 8f5f 	dmb	sy
    3dce:	2200      	movs	r2, #0
    3dd0:	4b04      	ldr	r3, [pc, #16]	; (3de4 <cpu_irq_enter_critical+0x3c>)
    3dd2:	701a      	strb	r2, [r3, #0]
    3dd4:	3201      	adds	r2, #1
    3dd6:	4b02      	ldr	r3, [pc, #8]	; (3de0 <cpu_irq_enter_critical+0x38>)
    3dd8:	701a      	strb	r2, [r3, #0]
    3dda:	e7f0      	b.n	3dbe <cpu_irq_enter_critical+0x16>
    3ddc:	20000180 	.word	0x20000180
    3de0:	20000184 	.word	0x20000184
    3de4:	2000000c 	.word	0x2000000c

00003de8 <cpu_irq_leave_critical>:
    3de8:	4b08      	ldr	r3, [pc, #32]	; (3e0c <cpu_irq_leave_critical+0x24>)
    3dea:	681a      	ldr	r2, [r3, #0]
    3dec:	3a01      	subs	r2, #1
    3dee:	601a      	str	r2, [r3, #0]
    3df0:	681b      	ldr	r3, [r3, #0]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d109      	bne.n	3e0a <cpu_irq_leave_critical+0x22>
    3df6:	4b06      	ldr	r3, [pc, #24]	; (3e10 <cpu_irq_leave_critical+0x28>)
    3df8:	781b      	ldrb	r3, [r3, #0]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d005      	beq.n	3e0a <cpu_irq_leave_critical+0x22>
    3dfe:	2201      	movs	r2, #1
    3e00:	4b04      	ldr	r3, [pc, #16]	; (3e14 <cpu_irq_leave_critical+0x2c>)
    3e02:	701a      	strb	r2, [r3, #0]
    3e04:	f3bf 8f5f 	dmb	sy
    3e08:	b662      	cpsie	i
    3e0a:	4770      	bx	lr
    3e0c:	20000180 	.word	0x20000180
    3e10:	20000184 	.word	0x20000184
    3e14:	2000000c 	.word	0x2000000c

00003e18 <extint_register_callback>:
    3e18:	2317      	movs	r3, #23
    3e1a:	2a00      	cmp	r2, #0
    3e1c:	d001      	beq.n	3e22 <extint_register_callback+0xa>
    3e1e:	0018      	movs	r0, r3
    3e20:	4770      	bx	lr
    3e22:	008b      	lsls	r3, r1, #2
    3e24:	4a06      	ldr	r2, [pc, #24]	; (3e40 <extint_register_callback+0x28>)
    3e26:	589b      	ldr	r3, [r3, r2]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d003      	beq.n	3e34 <extint_register_callback+0x1c>
    3e2c:	4283      	cmp	r3, r0
    3e2e:	d005      	beq.n	3e3c <extint_register_callback+0x24>
    3e30:	231d      	movs	r3, #29
    3e32:	e7f4      	b.n	3e1e <extint_register_callback+0x6>
    3e34:	0089      	lsls	r1, r1, #2
    3e36:	5088      	str	r0, [r1, r2]
    3e38:	2300      	movs	r3, #0
    3e3a:	e7f0      	b.n	3e1e <extint_register_callback+0x6>
    3e3c:	2300      	movs	r3, #0
    3e3e:	e7ee      	b.n	3e1e <extint_register_callback+0x6>
    3e40:	20000ad0 	.word	0x20000ad0

00003e44 <extint_chan_enable_callback>:
    3e44:	2317      	movs	r3, #23
    3e46:	2900      	cmp	r1, #0
    3e48:	d001      	beq.n	3e4e <extint_chan_enable_callback+0xa>
    3e4a:	0018      	movs	r0, r3
    3e4c:	4770      	bx	lr
    3e4e:	2200      	movs	r2, #0
    3e50:	281f      	cmp	r0, #31
    3e52:	d800      	bhi.n	3e56 <extint_chan_enable_callback+0x12>
    3e54:	4a02      	ldr	r2, [pc, #8]	; (3e60 <extint_chan_enable_callback+0x1c>)
    3e56:	2301      	movs	r3, #1
    3e58:	4083      	lsls	r3, r0
    3e5a:	60d3      	str	r3, [r2, #12]
    3e5c:	2300      	movs	r3, #0
    3e5e:	e7f4      	b.n	3e4a <extint_chan_enable_callback+0x6>
    3e60:	40001800 	.word	0x40001800

00003e64 <extint_chan_disable_callback>:
    3e64:	2317      	movs	r3, #23
    3e66:	2900      	cmp	r1, #0
    3e68:	d001      	beq.n	3e6e <extint_chan_disable_callback+0xa>
    3e6a:	0018      	movs	r0, r3
    3e6c:	4770      	bx	lr
    3e6e:	2200      	movs	r2, #0
    3e70:	281f      	cmp	r0, #31
    3e72:	d800      	bhi.n	3e76 <extint_chan_disable_callback+0x12>
    3e74:	4a02      	ldr	r2, [pc, #8]	; (3e80 <extint_chan_disable_callback+0x1c>)
    3e76:	2301      	movs	r3, #1
    3e78:	4083      	lsls	r3, r0
    3e7a:	6093      	str	r3, [r2, #8]
    3e7c:	2300      	movs	r3, #0
    3e7e:	e7f4      	b.n	3e6a <extint_chan_disable_callback+0x6>
    3e80:	40001800 	.word	0x40001800

00003e84 <EIC_Handler>:
    3e84:	b570      	push	{r4, r5, r6, lr}
    3e86:	2200      	movs	r2, #0
    3e88:	4b10      	ldr	r3, [pc, #64]	; (3ecc <EIC_Handler+0x48>)
    3e8a:	701a      	strb	r2, [r3, #0]
    3e8c:	2300      	movs	r3, #0
    3e8e:	4910      	ldr	r1, [pc, #64]	; (3ed0 <EIC_Handler+0x4c>)
    3e90:	251f      	movs	r5, #31
    3e92:	4e10      	ldr	r6, [pc, #64]	; (3ed4 <EIC_Handler+0x50>)
    3e94:	4c0d      	ldr	r4, [pc, #52]	; (3ecc <EIC_Handler+0x48>)
    3e96:	e00a      	b.n	3eae <EIC_Handler+0x2a>
    3e98:	490d      	ldr	r1, [pc, #52]	; (3ed0 <EIC_Handler+0x4c>)
    3e9a:	e008      	b.n	3eae <EIC_Handler+0x2a>
    3e9c:	7823      	ldrb	r3, [r4, #0]
    3e9e:	3301      	adds	r3, #1
    3ea0:	b2db      	uxtb	r3, r3
    3ea2:	7023      	strb	r3, [r4, #0]
    3ea4:	2b0f      	cmp	r3, #15
    3ea6:	d810      	bhi.n	3eca <EIC_Handler+0x46>
    3ea8:	2100      	movs	r1, #0
    3eaa:	2b1f      	cmp	r3, #31
    3eac:	d9f4      	bls.n	3e98 <EIC_Handler+0x14>
    3eae:	0028      	movs	r0, r5
    3eb0:	4018      	ands	r0, r3
    3eb2:	2201      	movs	r2, #1
    3eb4:	4082      	lsls	r2, r0
    3eb6:	6908      	ldr	r0, [r1, #16]
    3eb8:	4210      	tst	r0, r2
    3eba:	d0ef      	beq.n	3e9c <EIC_Handler+0x18>
    3ebc:	610a      	str	r2, [r1, #16]
    3ebe:	009b      	lsls	r3, r3, #2
    3ec0:	599b      	ldr	r3, [r3, r6]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d0ea      	beq.n	3e9c <EIC_Handler+0x18>
    3ec6:	4798      	blx	r3
    3ec8:	e7e8      	b.n	3e9c <EIC_Handler+0x18>
    3eca:	bd70      	pop	{r4, r5, r6, pc}
    3ecc:	20000acc 	.word	0x20000acc
    3ed0:	40001800 	.word	0x40001800
    3ed4:	20000ad0 	.word	0x20000ad0

00003ed8 <_extint_enable>:
    3ed8:	4a04      	ldr	r2, [pc, #16]	; (3eec <_extint_enable+0x14>)
    3eda:	7813      	ldrb	r3, [r2, #0]
    3edc:	2102      	movs	r1, #2
    3ede:	430b      	orrs	r3, r1
    3ee0:	7013      	strb	r3, [r2, #0]
    3ee2:	7853      	ldrb	r3, [r2, #1]
    3ee4:	b25b      	sxtb	r3, r3
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	dbfb      	blt.n	3ee2 <_extint_enable+0xa>
    3eea:	4770      	bx	lr
    3eec:	40001800 	.word	0x40001800

00003ef0 <_system_extint_init>:
    3ef0:	b500      	push	{lr}
    3ef2:	b083      	sub	sp, #12
    3ef4:	4a12      	ldr	r2, [pc, #72]	; (3f40 <_system_extint_init+0x50>)
    3ef6:	6993      	ldr	r3, [r2, #24]
    3ef8:	2140      	movs	r1, #64	; 0x40
    3efa:	430b      	orrs	r3, r1
    3efc:	6193      	str	r3, [r2, #24]
    3efe:	a901      	add	r1, sp, #4
    3f00:	2300      	movs	r3, #0
    3f02:	700b      	strb	r3, [r1, #0]
    3f04:	2005      	movs	r0, #5
    3f06:	4b0f      	ldr	r3, [pc, #60]	; (3f44 <_system_extint_init+0x54>)
    3f08:	4798      	blx	r3
    3f0a:	2005      	movs	r0, #5
    3f0c:	4b0e      	ldr	r3, [pc, #56]	; (3f48 <_system_extint_init+0x58>)
    3f0e:	4798      	blx	r3
    3f10:	4a0e      	ldr	r2, [pc, #56]	; (3f4c <_system_extint_init+0x5c>)
    3f12:	7813      	ldrb	r3, [r2, #0]
    3f14:	2101      	movs	r1, #1
    3f16:	430b      	orrs	r3, r1
    3f18:	7013      	strb	r3, [r2, #0]
    3f1a:	7853      	ldrb	r3, [r2, #1]
    3f1c:	b25b      	sxtb	r3, r3
    3f1e:	2b00      	cmp	r3, #0
    3f20:	dbfb      	blt.n	3f1a <_system_extint_init+0x2a>
    3f22:	4b0b      	ldr	r3, [pc, #44]	; (3f50 <_system_extint_init+0x60>)
    3f24:	0019      	movs	r1, r3
    3f26:	3140      	adds	r1, #64	; 0x40
    3f28:	2200      	movs	r2, #0
    3f2a:	c304      	stmia	r3!, {r2}
    3f2c:	4299      	cmp	r1, r3
    3f2e:	d1fc      	bne.n	3f2a <_system_extint_init+0x3a>
    3f30:	2210      	movs	r2, #16
    3f32:	4b08      	ldr	r3, [pc, #32]	; (3f54 <_system_extint_init+0x64>)
    3f34:	601a      	str	r2, [r3, #0]
    3f36:	4b08      	ldr	r3, [pc, #32]	; (3f58 <_system_extint_init+0x68>)
    3f38:	4798      	blx	r3
    3f3a:	b003      	add	sp, #12
    3f3c:	bd00      	pop	{pc}
    3f3e:	46c0      	nop			; (mov r8, r8)
    3f40:	40000400 	.word	0x40000400
    3f44:	00004f1d 	.word	0x00004f1d
    3f48:	00004e91 	.word	0x00004e91
    3f4c:	40001800 	.word	0x40001800
    3f50:	20000ad0 	.word	0x20000ad0
    3f54:	e000e100 	.word	0xe000e100
    3f58:	00003ed9 	.word	0x00003ed9

00003f5c <extint_chan_get_config_defaults>:
    3f5c:	2300      	movs	r3, #0
    3f5e:	6003      	str	r3, [r0, #0]
    3f60:	6043      	str	r3, [r0, #4]
    3f62:	2201      	movs	r2, #1
    3f64:	7202      	strb	r2, [r0, #8]
    3f66:	7242      	strb	r2, [r0, #9]
    3f68:	7283      	strb	r3, [r0, #10]
    3f6a:	3302      	adds	r3, #2
    3f6c:	72c3      	strb	r3, [r0, #11]
    3f6e:	4770      	bx	lr

00003f70 <extint_chan_set_config>:
    3f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f72:	b083      	sub	sp, #12
    3f74:	0005      	movs	r5, r0
    3f76:	000c      	movs	r4, r1
    3f78:	a901      	add	r1, sp, #4
    3f7a:	2300      	movs	r3, #0
    3f7c:	704b      	strb	r3, [r1, #1]
    3f7e:	70cb      	strb	r3, [r1, #3]
    3f80:	7923      	ldrb	r3, [r4, #4]
    3f82:	700b      	strb	r3, [r1, #0]
    3f84:	7a23      	ldrb	r3, [r4, #8]
    3f86:	708b      	strb	r3, [r1, #2]
    3f88:	7820      	ldrb	r0, [r4, #0]
    3f8a:	4b15      	ldr	r3, [pc, #84]	; (3fe0 <extint_chan_set_config+0x70>)
    3f8c:	4798      	blx	r3
    3f8e:	2000      	movs	r0, #0
    3f90:	2d1f      	cmp	r5, #31
    3f92:	d800      	bhi.n	3f96 <extint_chan_set_config+0x26>
    3f94:	4813      	ldr	r0, [pc, #76]	; (3fe4 <extint_chan_set_config+0x74>)
    3f96:	2207      	movs	r2, #7
    3f98:	402a      	ands	r2, r5
    3f9a:	0092      	lsls	r2, r2, #2
    3f9c:	7ae7      	ldrb	r7, [r4, #11]
    3f9e:	7aa3      	ldrb	r3, [r4, #10]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d001      	beq.n	3fa8 <extint_chan_set_config+0x38>
    3fa4:	2308      	movs	r3, #8
    3fa6:	431f      	orrs	r7, r3
    3fa8:	08eb      	lsrs	r3, r5, #3
    3faa:	009b      	lsls	r3, r3, #2
    3fac:	18c3      	adds	r3, r0, r3
    3fae:	6999      	ldr	r1, [r3, #24]
    3fb0:	260f      	movs	r6, #15
    3fb2:	4096      	lsls	r6, r2
    3fb4:	43b1      	bics	r1, r6
    3fb6:	4097      	lsls	r7, r2
    3fb8:	003a      	movs	r2, r7
    3fba:	430a      	orrs	r2, r1
    3fbc:	619a      	str	r2, [r3, #24]
    3fbe:	7a63      	ldrb	r3, [r4, #9]
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d106      	bne.n	3fd2 <extint_chan_set_config+0x62>
    3fc4:	6943      	ldr	r3, [r0, #20]
    3fc6:	2201      	movs	r2, #1
    3fc8:	40aa      	lsls	r2, r5
    3fca:	4393      	bics	r3, r2
    3fcc:	6143      	str	r3, [r0, #20]
    3fce:	b003      	add	sp, #12
    3fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd2:	6942      	ldr	r2, [r0, #20]
    3fd4:	2301      	movs	r3, #1
    3fd6:	40ab      	lsls	r3, r5
    3fd8:	4313      	orrs	r3, r2
    3fda:	6143      	str	r3, [r0, #20]
    3fdc:	e7f7      	b.n	3fce <extint_chan_set_config+0x5e>
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	00005015 	.word	0x00005015
    3fe4:	40001800 	.word	0x40001800

00003fe8 <port_pin_set_config>:
    3fe8:	b500      	push	{lr}
    3fea:	b083      	sub	sp, #12
    3fec:	ab01      	add	r3, sp, #4
    3fee:	2280      	movs	r2, #128	; 0x80
    3ff0:	701a      	strb	r2, [r3, #0]
    3ff2:	780a      	ldrb	r2, [r1, #0]
    3ff4:	705a      	strb	r2, [r3, #1]
    3ff6:	784a      	ldrb	r2, [r1, #1]
    3ff8:	709a      	strb	r2, [r3, #2]
    3ffa:	788a      	ldrb	r2, [r1, #2]
    3ffc:	70da      	strb	r2, [r3, #3]
    3ffe:	0019      	movs	r1, r3
    4000:	4b01      	ldr	r3, [pc, #4]	; (4008 <port_pin_set_config+0x20>)
    4002:	4798      	blx	r3
    4004:	b003      	add	sp, #12
    4006:	bd00      	pop	{pc}
    4008:	00005015 	.word	0x00005015

0000400c <long_division>:
    400c:	b5f0      	push	{r4, r5, r6, r7, lr}
    400e:	46de      	mov	lr, fp
    4010:	4657      	mov	r7, sl
    4012:	464e      	mov	r6, r9
    4014:	4645      	mov	r5, r8
    4016:	b5e0      	push	{r5, r6, r7, lr}
    4018:	b087      	sub	sp, #28
    401a:	4680      	mov	r8, r0
    401c:	9104      	str	r1, [sp, #16]
    401e:	0016      	movs	r6, r2
    4020:	001f      	movs	r7, r3
    4022:	2200      	movs	r2, #0
    4024:	2300      	movs	r3, #0
    4026:	2100      	movs	r1, #0
    4028:	468b      	mov	fp, r1
    402a:	243f      	movs	r4, #63	; 0x3f
    402c:	2001      	movs	r0, #1
    402e:	0021      	movs	r1, r4
    4030:	9600      	str	r6, [sp, #0]
    4032:	9701      	str	r7, [sp, #4]
    4034:	465c      	mov	r4, fp
    4036:	9403      	str	r4, [sp, #12]
    4038:	4644      	mov	r4, r8
    403a:	9405      	str	r4, [sp, #20]
    403c:	e013      	b.n	4066 <long_division+0x5a>
    403e:	2420      	movs	r4, #32
    4040:	1a64      	subs	r4, r4, r1
    4042:	0005      	movs	r5, r0
    4044:	40e5      	lsrs	r5, r4
    4046:	46a8      	mov	r8, r5
    4048:	e014      	b.n	4074 <long_division+0x68>
    404a:	9c00      	ldr	r4, [sp, #0]
    404c:	9d01      	ldr	r5, [sp, #4]
    404e:	1b12      	subs	r2, r2, r4
    4050:	41ab      	sbcs	r3, r5
    4052:	465c      	mov	r4, fp
    4054:	464d      	mov	r5, r9
    4056:	432c      	orrs	r4, r5
    4058:	46a3      	mov	fp, r4
    405a:	9c03      	ldr	r4, [sp, #12]
    405c:	4645      	mov	r5, r8
    405e:	432c      	orrs	r4, r5
    4060:	9403      	str	r4, [sp, #12]
    4062:	3901      	subs	r1, #1
    4064:	d325      	bcc.n	40b2 <long_division+0xa6>
    4066:	2420      	movs	r4, #32
    4068:	4264      	negs	r4, r4
    406a:	190c      	adds	r4, r1, r4
    406c:	d4e7      	bmi.n	403e <long_division+0x32>
    406e:	0005      	movs	r5, r0
    4070:	40a5      	lsls	r5, r4
    4072:	46a8      	mov	r8, r5
    4074:	0004      	movs	r4, r0
    4076:	408c      	lsls	r4, r1
    4078:	46a1      	mov	r9, r4
    407a:	1892      	adds	r2, r2, r2
    407c:	415b      	adcs	r3, r3
    407e:	0014      	movs	r4, r2
    4080:	001d      	movs	r5, r3
    4082:	9e05      	ldr	r6, [sp, #20]
    4084:	464f      	mov	r7, r9
    4086:	403e      	ands	r6, r7
    4088:	46b4      	mov	ip, r6
    408a:	9e04      	ldr	r6, [sp, #16]
    408c:	4647      	mov	r7, r8
    408e:	403e      	ands	r6, r7
    4090:	46b2      	mov	sl, r6
    4092:	4666      	mov	r6, ip
    4094:	4657      	mov	r7, sl
    4096:	433e      	orrs	r6, r7
    4098:	d003      	beq.n	40a2 <long_division+0x96>
    409a:	0006      	movs	r6, r0
    409c:	4326      	orrs	r6, r4
    409e:	0032      	movs	r2, r6
    40a0:	002b      	movs	r3, r5
    40a2:	9c00      	ldr	r4, [sp, #0]
    40a4:	9d01      	ldr	r5, [sp, #4]
    40a6:	429d      	cmp	r5, r3
    40a8:	d8db      	bhi.n	4062 <long_division+0x56>
    40aa:	d1ce      	bne.n	404a <long_division+0x3e>
    40ac:	4294      	cmp	r4, r2
    40ae:	d8d8      	bhi.n	4062 <long_division+0x56>
    40b0:	e7cb      	b.n	404a <long_division+0x3e>
    40b2:	9b03      	ldr	r3, [sp, #12]
    40b4:	4658      	mov	r0, fp
    40b6:	0019      	movs	r1, r3
    40b8:	b007      	add	sp, #28
    40ba:	bc3c      	pop	{r2, r3, r4, r5}
    40bc:	4690      	mov	r8, r2
    40be:	4699      	mov	r9, r3
    40c0:	46a2      	mov	sl, r4
    40c2:	46ab      	mov	fp, r5
    40c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000040c6 <_sercom_get_sync_baud_val>:
    40c6:	b510      	push	{r4, lr}
    40c8:	0849      	lsrs	r1, r1, #1
    40ca:	2340      	movs	r3, #64	; 0x40
    40cc:	2400      	movs	r4, #0
    40ce:	4281      	cmp	r1, r0
    40d0:	d202      	bcs.n	40d8 <_sercom_get_sync_baud_val+0x12>
    40d2:	0018      	movs	r0, r3
    40d4:	bd10      	pop	{r4, pc}
    40d6:	001c      	movs	r4, r3
    40d8:	1a09      	subs	r1, r1, r0
    40da:	1c63      	adds	r3, r4, #1
    40dc:	b29b      	uxth	r3, r3
    40de:	4288      	cmp	r0, r1
    40e0:	d9f9      	bls.n	40d6 <_sercom_get_sync_baud_val+0x10>
    40e2:	2340      	movs	r3, #64	; 0x40
    40e4:	2cff      	cmp	r4, #255	; 0xff
    40e6:	d8f4      	bhi.n	40d2 <_sercom_get_sync_baud_val+0xc>
    40e8:	8014      	strh	r4, [r2, #0]
    40ea:	2300      	movs	r3, #0
    40ec:	e7f1      	b.n	40d2 <_sercom_get_sync_baud_val+0xc>
	...

000040f0 <_sercom_get_async_baud_val>:
    40f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40f2:	b083      	sub	sp, #12
    40f4:	000f      	movs	r7, r1
    40f6:	0016      	movs	r6, r2
    40f8:	aa08      	add	r2, sp, #32
    40fa:	7811      	ldrb	r1, [r2, #0]
    40fc:	0004      	movs	r4, r0
    40fe:	434c      	muls	r4, r1
    4100:	2240      	movs	r2, #64	; 0x40
    4102:	42bc      	cmp	r4, r7
    4104:	d902      	bls.n	410c <_sercom_get_async_baud_val+0x1c>
    4106:	0010      	movs	r0, r2
    4108:	b003      	add	sp, #12
    410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    410c:	2b00      	cmp	r3, #0
    410e:	d114      	bne.n	413a <_sercom_get_async_baud_val+0x4a>
    4110:	0002      	movs	r2, r0
    4112:	0008      	movs	r0, r1
    4114:	2100      	movs	r1, #0
    4116:	4c19      	ldr	r4, [pc, #100]	; (417c <_sercom_get_async_baud_val+0x8c>)
    4118:	47a0      	blx	r4
    411a:	0001      	movs	r1, r0
    411c:	003a      	movs	r2, r7
    411e:	2300      	movs	r3, #0
    4120:	2000      	movs	r0, #0
    4122:	4c17      	ldr	r4, [pc, #92]	; (4180 <_sercom_get_async_baud_val+0x90>)
    4124:	47a0      	blx	r4
    4126:	2200      	movs	r2, #0
    4128:	2301      	movs	r3, #1
    412a:	1a12      	subs	r2, r2, r0
    412c:	418b      	sbcs	r3, r1
    412e:	0c12      	lsrs	r2, r2, #16
    4130:	041b      	lsls	r3, r3, #16
    4132:	431a      	orrs	r2, r3
    4134:	8032      	strh	r2, [r6, #0]
    4136:	2200      	movs	r2, #0
    4138:	e7e5      	b.n	4106 <_sercom_get_async_baud_val+0x16>
    413a:	2200      	movs	r2, #0
    413c:	2b01      	cmp	r3, #1
    413e:	d1f9      	bne.n	4134 <_sercom_get_async_baud_val+0x44>
    4140:	000a      	movs	r2, r1
    4142:	2300      	movs	r3, #0
    4144:	2100      	movs	r1, #0
    4146:	4c0d      	ldr	r4, [pc, #52]	; (417c <_sercom_get_async_baud_val+0x8c>)
    4148:	47a0      	blx	r4
    414a:	0002      	movs	r2, r0
    414c:	000b      	movs	r3, r1
    414e:	9200      	str	r2, [sp, #0]
    4150:	9301      	str	r3, [sp, #4]
    4152:	0038      	movs	r0, r7
    4154:	2100      	movs	r1, #0
    4156:	4c0a      	ldr	r4, [pc, #40]	; (4180 <_sercom_get_async_baud_val+0x90>)
    4158:	47a0      	blx	r4
    415a:	0005      	movs	r5, r0
    415c:	2380      	movs	r3, #128	; 0x80
    415e:	019b      	lsls	r3, r3, #6
    4160:	2240      	movs	r2, #64	; 0x40
    4162:	4298      	cmp	r0, r3
    4164:	d8cf      	bhi.n	4106 <_sercom_get_async_baud_val+0x16>
    4166:	0f79      	lsrs	r1, r7, #29
    4168:	00f8      	lsls	r0, r7, #3
    416a:	9a00      	ldr	r2, [sp, #0]
    416c:	9b01      	ldr	r3, [sp, #4]
    416e:	47a0      	blx	r4
    4170:	00ea      	lsls	r2, r5, #3
    4172:	1a82      	subs	r2, r0, r2
    4174:	b2d2      	uxtb	r2, r2
    4176:	0352      	lsls	r2, r2, #13
    4178:	432a      	orrs	r2, r5
    417a:	e7db      	b.n	4134 <_sercom_get_async_baud_val+0x44>
    417c:	0000756d 	.word	0x0000756d
    4180:	0000400d 	.word	0x0000400d

00004184 <sercom_set_gclk_generator>:
    4184:	b510      	push	{r4, lr}
    4186:	b082      	sub	sp, #8
    4188:	0004      	movs	r4, r0
    418a:	4b0e      	ldr	r3, [pc, #56]	; (41c4 <sercom_set_gclk_generator+0x40>)
    418c:	781b      	ldrb	r3, [r3, #0]
    418e:	2b00      	cmp	r3, #0
    4190:	d007      	beq.n	41a2 <sercom_set_gclk_generator+0x1e>
    4192:	2900      	cmp	r1, #0
    4194:	d105      	bne.n	41a2 <sercom_set_gclk_generator+0x1e>
    4196:	4b0b      	ldr	r3, [pc, #44]	; (41c4 <sercom_set_gclk_generator+0x40>)
    4198:	785b      	ldrb	r3, [r3, #1]
    419a:	4283      	cmp	r3, r0
    419c:	d010      	beq.n	41c0 <sercom_set_gclk_generator+0x3c>
    419e:	201d      	movs	r0, #29
    41a0:	e00c      	b.n	41bc <sercom_set_gclk_generator+0x38>
    41a2:	a901      	add	r1, sp, #4
    41a4:	700c      	strb	r4, [r1, #0]
    41a6:	2013      	movs	r0, #19
    41a8:	4b07      	ldr	r3, [pc, #28]	; (41c8 <sercom_set_gclk_generator+0x44>)
    41aa:	4798      	blx	r3
    41ac:	2013      	movs	r0, #19
    41ae:	4b07      	ldr	r3, [pc, #28]	; (41cc <sercom_set_gclk_generator+0x48>)
    41b0:	4798      	blx	r3
    41b2:	4b04      	ldr	r3, [pc, #16]	; (41c4 <sercom_set_gclk_generator+0x40>)
    41b4:	705c      	strb	r4, [r3, #1]
    41b6:	2201      	movs	r2, #1
    41b8:	701a      	strb	r2, [r3, #0]
    41ba:	2000      	movs	r0, #0
    41bc:	b002      	add	sp, #8
    41be:	bd10      	pop	{r4, pc}
    41c0:	2000      	movs	r0, #0
    41c2:	e7fb      	b.n	41bc <sercom_set_gclk_generator+0x38>
    41c4:	20000188 	.word	0x20000188
    41c8:	00004f1d 	.word	0x00004f1d
    41cc:	00004e91 	.word	0x00004e91

000041d0 <_sercom_get_default_pad>:
    41d0:	4b40      	ldr	r3, [pc, #256]	; (42d4 <_sercom_get_default_pad+0x104>)
    41d2:	4298      	cmp	r0, r3
    41d4:	d031      	beq.n	423a <_sercom_get_default_pad+0x6a>
    41d6:	d90a      	bls.n	41ee <_sercom_get_default_pad+0x1e>
    41d8:	4b3f      	ldr	r3, [pc, #252]	; (42d8 <_sercom_get_default_pad+0x108>)
    41da:	4298      	cmp	r0, r3
    41dc:	d04d      	beq.n	427a <_sercom_get_default_pad+0xaa>
    41de:	4b3f      	ldr	r3, [pc, #252]	; (42dc <_sercom_get_default_pad+0x10c>)
    41e0:	4298      	cmp	r0, r3
    41e2:	d05a      	beq.n	429a <_sercom_get_default_pad+0xca>
    41e4:	4b3e      	ldr	r3, [pc, #248]	; (42e0 <_sercom_get_default_pad+0x110>)
    41e6:	4298      	cmp	r0, r3
    41e8:	d037      	beq.n	425a <_sercom_get_default_pad+0x8a>
    41ea:	2000      	movs	r0, #0
    41ec:	4770      	bx	lr
    41ee:	4b3d      	ldr	r3, [pc, #244]	; (42e4 <_sercom_get_default_pad+0x114>)
    41f0:	4298      	cmp	r0, r3
    41f2:	d00c      	beq.n	420e <_sercom_get_default_pad+0x3e>
    41f4:	4b3c      	ldr	r3, [pc, #240]	; (42e8 <_sercom_get_default_pad+0x118>)
    41f6:	4298      	cmp	r0, r3
    41f8:	d1f7      	bne.n	41ea <_sercom_get_default_pad+0x1a>
    41fa:	2901      	cmp	r1, #1
    41fc:	d017      	beq.n	422e <_sercom_get_default_pad+0x5e>
    41fe:	2900      	cmp	r1, #0
    4200:	d05d      	beq.n	42be <_sercom_get_default_pad+0xee>
    4202:	2902      	cmp	r1, #2
    4204:	d015      	beq.n	4232 <_sercom_get_default_pad+0x62>
    4206:	2903      	cmp	r1, #3
    4208:	d015      	beq.n	4236 <_sercom_get_default_pad+0x66>
    420a:	2000      	movs	r0, #0
    420c:	e7ee      	b.n	41ec <_sercom_get_default_pad+0x1c>
    420e:	2901      	cmp	r1, #1
    4210:	d007      	beq.n	4222 <_sercom_get_default_pad+0x52>
    4212:	2900      	cmp	r1, #0
    4214:	d051      	beq.n	42ba <_sercom_get_default_pad+0xea>
    4216:	2902      	cmp	r1, #2
    4218:	d005      	beq.n	4226 <_sercom_get_default_pad+0x56>
    421a:	2903      	cmp	r1, #3
    421c:	d005      	beq.n	422a <_sercom_get_default_pad+0x5a>
    421e:	2000      	movs	r0, #0
    4220:	e7e4      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4222:	4832      	ldr	r0, [pc, #200]	; (42ec <_sercom_get_default_pad+0x11c>)
    4224:	e7e2      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4226:	4832      	ldr	r0, [pc, #200]	; (42f0 <_sercom_get_default_pad+0x120>)
    4228:	e7e0      	b.n	41ec <_sercom_get_default_pad+0x1c>
    422a:	4832      	ldr	r0, [pc, #200]	; (42f4 <_sercom_get_default_pad+0x124>)
    422c:	e7de      	b.n	41ec <_sercom_get_default_pad+0x1c>
    422e:	4832      	ldr	r0, [pc, #200]	; (42f8 <_sercom_get_default_pad+0x128>)
    4230:	e7dc      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4232:	4832      	ldr	r0, [pc, #200]	; (42fc <_sercom_get_default_pad+0x12c>)
    4234:	e7da      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4236:	4832      	ldr	r0, [pc, #200]	; (4300 <_sercom_get_default_pad+0x130>)
    4238:	e7d8      	b.n	41ec <_sercom_get_default_pad+0x1c>
    423a:	2901      	cmp	r1, #1
    423c:	d007      	beq.n	424e <_sercom_get_default_pad+0x7e>
    423e:	2900      	cmp	r1, #0
    4240:	d03f      	beq.n	42c2 <_sercom_get_default_pad+0xf2>
    4242:	2902      	cmp	r1, #2
    4244:	d005      	beq.n	4252 <_sercom_get_default_pad+0x82>
    4246:	2903      	cmp	r1, #3
    4248:	d005      	beq.n	4256 <_sercom_get_default_pad+0x86>
    424a:	2000      	movs	r0, #0
    424c:	e7ce      	b.n	41ec <_sercom_get_default_pad+0x1c>
    424e:	482d      	ldr	r0, [pc, #180]	; (4304 <_sercom_get_default_pad+0x134>)
    4250:	e7cc      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4252:	482d      	ldr	r0, [pc, #180]	; (4308 <_sercom_get_default_pad+0x138>)
    4254:	e7ca      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4256:	482d      	ldr	r0, [pc, #180]	; (430c <_sercom_get_default_pad+0x13c>)
    4258:	e7c8      	b.n	41ec <_sercom_get_default_pad+0x1c>
    425a:	2901      	cmp	r1, #1
    425c:	d007      	beq.n	426e <_sercom_get_default_pad+0x9e>
    425e:	2900      	cmp	r1, #0
    4260:	d031      	beq.n	42c6 <_sercom_get_default_pad+0xf6>
    4262:	2902      	cmp	r1, #2
    4264:	d005      	beq.n	4272 <_sercom_get_default_pad+0xa2>
    4266:	2903      	cmp	r1, #3
    4268:	d005      	beq.n	4276 <_sercom_get_default_pad+0xa6>
    426a:	2000      	movs	r0, #0
    426c:	e7be      	b.n	41ec <_sercom_get_default_pad+0x1c>
    426e:	4828      	ldr	r0, [pc, #160]	; (4310 <_sercom_get_default_pad+0x140>)
    4270:	e7bc      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4272:	4828      	ldr	r0, [pc, #160]	; (4314 <_sercom_get_default_pad+0x144>)
    4274:	e7ba      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4276:	4828      	ldr	r0, [pc, #160]	; (4318 <_sercom_get_default_pad+0x148>)
    4278:	e7b8      	b.n	41ec <_sercom_get_default_pad+0x1c>
    427a:	2901      	cmp	r1, #1
    427c:	d007      	beq.n	428e <_sercom_get_default_pad+0xbe>
    427e:	2900      	cmp	r1, #0
    4280:	d023      	beq.n	42ca <_sercom_get_default_pad+0xfa>
    4282:	2902      	cmp	r1, #2
    4284:	d005      	beq.n	4292 <_sercom_get_default_pad+0xc2>
    4286:	2903      	cmp	r1, #3
    4288:	d005      	beq.n	4296 <_sercom_get_default_pad+0xc6>
    428a:	2000      	movs	r0, #0
    428c:	e7ae      	b.n	41ec <_sercom_get_default_pad+0x1c>
    428e:	4823      	ldr	r0, [pc, #140]	; (431c <_sercom_get_default_pad+0x14c>)
    4290:	e7ac      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4292:	4823      	ldr	r0, [pc, #140]	; (4320 <_sercom_get_default_pad+0x150>)
    4294:	e7aa      	b.n	41ec <_sercom_get_default_pad+0x1c>
    4296:	4823      	ldr	r0, [pc, #140]	; (4324 <_sercom_get_default_pad+0x154>)
    4298:	e7a8      	b.n	41ec <_sercom_get_default_pad+0x1c>
    429a:	2901      	cmp	r1, #1
    429c:	d007      	beq.n	42ae <_sercom_get_default_pad+0xde>
    429e:	2900      	cmp	r1, #0
    42a0:	d015      	beq.n	42ce <_sercom_get_default_pad+0xfe>
    42a2:	2902      	cmp	r1, #2
    42a4:	d005      	beq.n	42b2 <_sercom_get_default_pad+0xe2>
    42a6:	2903      	cmp	r1, #3
    42a8:	d005      	beq.n	42b6 <_sercom_get_default_pad+0xe6>
    42aa:	2000      	movs	r0, #0
    42ac:	e79e      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42ae:	481e      	ldr	r0, [pc, #120]	; (4328 <_sercom_get_default_pad+0x158>)
    42b0:	e79c      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42b2:	481e      	ldr	r0, [pc, #120]	; (432c <_sercom_get_default_pad+0x15c>)
    42b4:	e79a      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42b6:	481e      	ldr	r0, [pc, #120]	; (4330 <_sercom_get_default_pad+0x160>)
    42b8:	e798      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42ba:	481e      	ldr	r0, [pc, #120]	; (4334 <_sercom_get_default_pad+0x164>)
    42bc:	e796      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42be:	2003      	movs	r0, #3
    42c0:	e794      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42c2:	481d      	ldr	r0, [pc, #116]	; (4338 <_sercom_get_default_pad+0x168>)
    42c4:	e792      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42c6:	481d      	ldr	r0, [pc, #116]	; (433c <_sercom_get_default_pad+0x16c>)
    42c8:	e790      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42ca:	481d      	ldr	r0, [pc, #116]	; (4340 <_sercom_get_default_pad+0x170>)
    42cc:	e78e      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42ce:	481d      	ldr	r0, [pc, #116]	; (4344 <_sercom_get_default_pad+0x174>)
    42d0:	e78c      	b.n	41ec <_sercom_get_default_pad+0x1c>
    42d2:	46c0      	nop			; (mov r8, r8)
    42d4:	42001000 	.word	0x42001000
    42d8:	42001800 	.word	0x42001800
    42dc:	42001c00 	.word	0x42001c00
    42e0:	42001400 	.word	0x42001400
    42e4:	42000800 	.word	0x42000800
    42e8:	42000c00 	.word	0x42000c00
    42ec:	00050003 	.word	0x00050003
    42f0:	00060003 	.word	0x00060003
    42f4:	00070003 	.word	0x00070003
    42f8:	00010003 	.word	0x00010003
    42fc:	001e0003 	.word	0x001e0003
    4300:	001f0003 	.word	0x001f0003
    4304:	000d0002 	.word	0x000d0002
    4308:	000e0002 	.word	0x000e0002
    430c:	000f0002 	.word	0x000f0002
    4310:	00110003 	.word	0x00110003
    4314:	00120003 	.word	0x00120003
    4318:	00130003 	.word	0x00130003
    431c:	003f0005 	.word	0x003f0005
    4320:	003e0005 	.word	0x003e0005
    4324:	00520005 	.word	0x00520005
    4328:	00170003 	.word	0x00170003
    432c:	00180003 	.word	0x00180003
    4330:	00190003 	.word	0x00190003
    4334:	00040003 	.word	0x00040003
    4338:	000c0002 	.word	0x000c0002
    433c:	00100003 	.word	0x00100003
    4340:	00530005 	.word	0x00530005
    4344:	00160003 	.word	0x00160003

00004348 <_sercom_get_sercom_inst_index>:
    4348:	b530      	push	{r4, r5, lr}
    434a:	b087      	sub	sp, #28
    434c:	4b0b      	ldr	r3, [pc, #44]	; (437c <_sercom_get_sercom_inst_index+0x34>)
    434e:	466a      	mov	r2, sp
    4350:	cb32      	ldmia	r3!, {r1, r4, r5}
    4352:	c232      	stmia	r2!, {r1, r4, r5}
    4354:	cb32      	ldmia	r3!, {r1, r4, r5}
    4356:	c232      	stmia	r2!, {r1, r4, r5}
    4358:	9b00      	ldr	r3, [sp, #0]
    435a:	4283      	cmp	r3, r0
    435c:	d00b      	beq.n	4376 <_sercom_get_sercom_inst_index+0x2e>
    435e:	2301      	movs	r3, #1
    4360:	009a      	lsls	r2, r3, #2
    4362:	4669      	mov	r1, sp
    4364:	5852      	ldr	r2, [r2, r1]
    4366:	4282      	cmp	r2, r0
    4368:	d006      	beq.n	4378 <_sercom_get_sercom_inst_index+0x30>
    436a:	3301      	adds	r3, #1
    436c:	2b06      	cmp	r3, #6
    436e:	d1f7      	bne.n	4360 <_sercom_get_sercom_inst_index+0x18>
    4370:	2000      	movs	r0, #0
    4372:	b007      	add	sp, #28
    4374:	bd30      	pop	{r4, r5, pc}
    4376:	2300      	movs	r3, #0
    4378:	b2d8      	uxtb	r0, r3
    437a:	e7fa      	b.n	4372 <_sercom_get_sercom_inst_index+0x2a>
    437c:	00009674 	.word	0x00009674

00004380 <_sercom_default_handler>:
    4380:	4770      	bx	lr
	...

00004384 <_sercom_set_handler>:
    4384:	b5f0      	push	{r4, r5, r6, r7, lr}
    4386:	4b0a      	ldr	r3, [pc, #40]	; (43b0 <_sercom_set_handler+0x2c>)
    4388:	781b      	ldrb	r3, [r3, #0]
    438a:	2b00      	cmp	r3, #0
    438c:	d10c      	bne.n	43a8 <_sercom_set_handler+0x24>
    438e:	4f09      	ldr	r7, [pc, #36]	; (43b4 <_sercom_set_handler+0x30>)
    4390:	4e09      	ldr	r6, [pc, #36]	; (43b8 <_sercom_set_handler+0x34>)
    4392:	4d0a      	ldr	r5, [pc, #40]	; (43bc <_sercom_set_handler+0x38>)
    4394:	2400      	movs	r4, #0
    4396:	51de      	str	r6, [r3, r7]
    4398:	195a      	adds	r2, r3, r5
    439a:	6014      	str	r4, [r2, #0]
    439c:	3304      	adds	r3, #4
    439e:	2b18      	cmp	r3, #24
    43a0:	d1f9      	bne.n	4396 <_sercom_set_handler+0x12>
    43a2:	2201      	movs	r2, #1
    43a4:	4b02      	ldr	r3, [pc, #8]	; (43b0 <_sercom_set_handler+0x2c>)
    43a6:	701a      	strb	r2, [r3, #0]
    43a8:	0080      	lsls	r0, r0, #2
    43aa:	4b02      	ldr	r3, [pc, #8]	; (43b4 <_sercom_set_handler+0x30>)
    43ac:	50c1      	str	r1, [r0, r3]
    43ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43b0:	2000018a 	.word	0x2000018a
    43b4:	2000018c 	.word	0x2000018c
    43b8:	00004381 	.word	0x00004381
    43bc:	20000b10 	.word	0x20000b10

000043c0 <_sercom_get_interrupt_vector>:
    43c0:	b500      	push	{lr}
    43c2:	b083      	sub	sp, #12
    43c4:	2309      	movs	r3, #9
    43c6:	466a      	mov	r2, sp
    43c8:	7013      	strb	r3, [r2, #0]
    43ca:	3301      	adds	r3, #1
    43cc:	7053      	strb	r3, [r2, #1]
    43ce:	3301      	adds	r3, #1
    43d0:	7093      	strb	r3, [r2, #2]
    43d2:	3301      	adds	r3, #1
    43d4:	70d3      	strb	r3, [r2, #3]
    43d6:	3301      	adds	r3, #1
    43d8:	7113      	strb	r3, [r2, #4]
    43da:	3301      	adds	r3, #1
    43dc:	7153      	strb	r3, [r2, #5]
    43de:	4b03      	ldr	r3, [pc, #12]	; (43ec <_sercom_get_interrupt_vector+0x2c>)
    43e0:	4798      	blx	r3
    43e2:	466b      	mov	r3, sp
    43e4:	5618      	ldrsb	r0, [r3, r0]
    43e6:	b003      	add	sp, #12
    43e8:	bd00      	pop	{pc}
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	00004349 	.word	0x00004349

000043f0 <SERCOM0_Handler>:
    43f0:	b510      	push	{r4, lr}
    43f2:	4b02      	ldr	r3, [pc, #8]	; (43fc <SERCOM0_Handler+0xc>)
    43f4:	681b      	ldr	r3, [r3, #0]
    43f6:	2000      	movs	r0, #0
    43f8:	4798      	blx	r3
    43fa:	bd10      	pop	{r4, pc}
    43fc:	2000018c 	.word	0x2000018c

00004400 <SERCOM1_Handler>:
    4400:	b510      	push	{r4, lr}
    4402:	4b02      	ldr	r3, [pc, #8]	; (440c <SERCOM1_Handler+0xc>)
    4404:	685b      	ldr	r3, [r3, #4]
    4406:	2001      	movs	r0, #1
    4408:	4798      	blx	r3
    440a:	bd10      	pop	{r4, pc}
    440c:	2000018c 	.word	0x2000018c

00004410 <SERCOM2_Handler>:
    4410:	b510      	push	{r4, lr}
    4412:	4b02      	ldr	r3, [pc, #8]	; (441c <SERCOM2_Handler+0xc>)
    4414:	689b      	ldr	r3, [r3, #8]
    4416:	2002      	movs	r0, #2
    4418:	4798      	blx	r3
    441a:	bd10      	pop	{r4, pc}
    441c:	2000018c 	.word	0x2000018c

00004420 <SERCOM3_Handler>:
    4420:	b510      	push	{r4, lr}
    4422:	4b02      	ldr	r3, [pc, #8]	; (442c <SERCOM3_Handler+0xc>)
    4424:	68db      	ldr	r3, [r3, #12]
    4426:	2003      	movs	r0, #3
    4428:	4798      	blx	r3
    442a:	bd10      	pop	{r4, pc}
    442c:	2000018c 	.word	0x2000018c

00004430 <SERCOM4_Handler>:
    4430:	b510      	push	{r4, lr}
    4432:	4b02      	ldr	r3, [pc, #8]	; (443c <SERCOM4_Handler+0xc>)
    4434:	691b      	ldr	r3, [r3, #16]
    4436:	2004      	movs	r0, #4
    4438:	4798      	blx	r3
    443a:	bd10      	pop	{r4, pc}
    443c:	2000018c 	.word	0x2000018c

00004440 <SERCOM5_Handler>:
    4440:	b510      	push	{r4, lr}
    4442:	4b02      	ldr	r3, [pc, #8]	; (444c <SERCOM5_Handler+0xc>)
    4444:	695b      	ldr	r3, [r3, #20]
    4446:	2005      	movs	r0, #5
    4448:	4798      	blx	r3
    444a:	bd10      	pop	{r4, pc}
    444c:	2000018c 	.word	0x2000018c

00004450 <spi_init>:
    4450:	b5f0      	push	{r4, r5, r6, r7, lr}
    4452:	b08b      	sub	sp, #44	; 0x2c
    4454:	0005      	movs	r5, r0
    4456:	000c      	movs	r4, r1
    4458:	0016      	movs	r6, r2
    445a:	6029      	str	r1, [r5, #0]
    445c:	680b      	ldr	r3, [r1, #0]
    445e:	201c      	movs	r0, #28
    4460:	079b      	lsls	r3, r3, #30
    4462:	d501      	bpl.n	4468 <spi_init+0x18>
    4464:	b00b      	add	sp, #44	; 0x2c
    4466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4468:	680b      	ldr	r3, [r1, #0]
    446a:	3817      	subs	r0, #23
    446c:	07db      	lsls	r3, r3, #31
    446e:	d4f9      	bmi.n	4464 <spi_init+0x14>
    4470:	0008      	movs	r0, r1
    4472:	4b60      	ldr	r3, [pc, #384]	; (45f4 <spi_init+0x1a4>)
    4474:	4798      	blx	r3
    4476:	4a60      	ldr	r2, [pc, #384]	; (45f8 <spi_init+0x1a8>)
    4478:	6a11      	ldr	r1, [r2, #32]
    447a:	1c87      	adds	r7, r0, #2
    447c:	2301      	movs	r3, #1
    447e:	40bb      	lsls	r3, r7
    4480:	430b      	orrs	r3, r1
    4482:	6213      	str	r3, [r2, #32]
    4484:	a909      	add	r1, sp, #36	; 0x24
    4486:	2724      	movs	r7, #36	; 0x24
    4488:	5df3      	ldrb	r3, [r6, r7]
    448a:	700b      	strb	r3, [r1, #0]
    448c:	3014      	adds	r0, #20
    448e:	b2c3      	uxtb	r3, r0
    4490:	9301      	str	r3, [sp, #4]
    4492:	0018      	movs	r0, r3
    4494:	4b59      	ldr	r3, [pc, #356]	; (45fc <spi_init+0x1ac>)
    4496:	4798      	blx	r3
    4498:	9801      	ldr	r0, [sp, #4]
    449a:	4b59      	ldr	r3, [pc, #356]	; (4600 <spi_init+0x1b0>)
    449c:	4798      	blx	r3
    449e:	5df0      	ldrb	r0, [r6, r7]
    44a0:	2100      	movs	r1, #0
    44a2:	4b58      	ldr	r3, [pc, #352]	; (4604 <spi_init+0x1b4>)
    44a4:	4798      	blx	r3
    44a6:	7833      	ldrb	r3, [r6, #0]
    44a8:	2b01      	cmp	r3, #1
    44aa:	d038      	beq.n	451e <spi_init+0xce>
    44ac:	002b      	movs	r3, r5
    44ae:	330c      	adds	r3, #12
    44b0:	0029      	movs	r1, r5
    44b2:	3128      	adds	r1, #40	; 0x28
    44b4:	2200      	movs	r2, #0
    44b6:	c304      	stmia	r3!, {r2}
    44b8:	428b      	cmp	r3, r1
    44ba:	d1fc      	bne.n	44b6 <spi_init+0x66>
    44bc:	2300      	movs	r3, #0
    44be:	62eb      	str	r3, [r5, #44]	; 0x2c
    44c0:	62ab      	str	r3, [r5, #40]	; 0x28
    44c2:	2400      	movs	r4, #0
    44c4:	86ab      	strh	r3, [r5, #52]	; 0x34
    44c6:	862b      	strh	r3, [r5, #48]	; 0x30
    44c8:	3336      	adds	r3, #54	; 0x36
    44ca:	54ec      	strb	r4, [r5, r3]
    44cc:	3301      	adds	r3, #1
    44ce:	54ec      	strb	r4, [r5, r3]
    44d0:	3301      	adds	r3, #1
    44d2:	54ec      	strb	r4, [r5, r3]
    44d4:	3b35      	subs	r3, #53	; 0x35
    44d6:	726b      	strb	r3, [r5, #9]
    44d8:	712c      	strb	r4, [r5, #4]
    44da:	6828      	ldr	r0, [r5, #0]
    44dc:	4b45      	ldr	r3, [pc, #276]	; (45f4 <spi_init+0x1a4>)
    44de:	4798      	blx	r3
    44e0:	0007      	movs	r7, r0
    44e2:	4949      	ldr	r1, [pc, #292]	; (4608 <spi_init+0x1b8>)
    44e4:	4b49      	ldr	r3, [pc, #292]	; (460c <spi_init+0x1bc>)
    44e6:	4798      	blx	r3
    44e8:	00bf      	lsls	r7, r7, #2
    44ea:	4b49      	ldr	r3, [pc, #292]	; (4610 <spi_init+0x1c0>)
    44ec:	50fd      	str	r5, [r7, r3]
    44ee:	682f      	ldr	r7, [r5, #0]
    44f0:	ab04      	add	r3, sp, #16
    44f2:	2280      	movs	r2, #128	; 0x80
    44f4:	701a      	strb	r2, [r3, #0]
    44f6:	705c      	strb	r4, [r3, #1]
    44f8:	3a7f      	subs	r2, #127	; 0x7f
    44fa:	709a      	strb	r2, [r3, #2]
    44fc:	70dc      	strb	r4, [r3, #3]
    44fe:	7833      	ldrb	r3, [r6, #0]
    4500:	2b00      	cmp	r3, #0
    4502:	d102      	bne.n	450a <spi_init+0xba>
    4504:	2200      	movs	r2, #0
    4506:	ab04      	add	r3, sp, #16
    4508:	709a      	strb	r2, [r3, #2]
    450a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    450c:	9305      	str	r3, [sp, #20]
    450e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4510:	9306      	str	r3, [sp, #24]
    4512:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4514:	9307      	str	r3, [sp, #28]
    4516:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4518:	9308      	str	r3, [sp, #32]
    451a:	2400      	movs	r4, #0
    451c:	e00b      	b.n	4536 <spi_init+0xe6>
    451e:	6823      	ldr	r3, [r4, #0]
    4520:	220c      	movs	r2, #12
    4522:	4313      	orrs	r3, r2
    4524:	6023      	str	r3, [r4, #0]
    4526:	e7c1      	b.n	44ac <spi_init+0x5c>
    4528:	0038      	movs	r0, r7
    452a:	4b3a      	ldr	r3, [pc, #232]	; (4614 <spi_init+0x1c4>)
    452c:	4798      	blx	r3
    452e:	e00a      	b.n	4546 <spi_init+0xf6>
    4530:	3401      	adds	r4, #1
    4532:	2c04      	cmp	r4, #4
    4534:	d010      	beq.n	4558 <spi_init+0x108>
    4536:	b2e1      	uxtb	r1, r4
    4538:	00a3      	lsls	r3, r4, #2
    453a:	aa02      	add	r2, sp, #8
    453c:	200c      	movs	r0, #12
    453e:	1812      	adds	r2, r2, r0
    4540:	58d0      	ldr	r0, [r2, r3]
    4542:	2800      	cmp	r0, #0
    4544:	d0f0      	beq.n	4528 <spi_init+0xd8>
    4546:	1c43      	adds	r3, r0, #1
    4548:	d0f2      	beq.n	4530 <spi_init+0xe0>
    454a:	a904      	add	r1, sp, #16
    454c:	7008      	strb	r0, [r1, #0]
    454e:	0c00      	lsrs	r0, r0, #16
    4550:	b2c0      	uxtb	r0, r0
    4552:	4b31      	ldr	r3, [pc, #196]	; (4618 <spi_init+0x1c8>)
    4554:	4798      	blx	r3
    4556:	e7eb      	b.n	4530 <spi_init+0xe0>
    4558:	7833      	ldrb	r3, [r6, #0]
    455a:	716b      	strb	r3, [r5, #5]
    455c:	7c33      	ldrb	r3, [r6, #16]
    455e:	71ab      	strb	r3, [r5, #6]
    4560:	7cb3      	ldrb	r3, [r6, #18]
    4562:	71eb      	strb	r3, [r5, #7]
    4564:	7d33      	ldrb	r3, [r6, #20]
    4566:	722b      	strb	r3, [r5, #8]
    4568:	2200      	movs	r2, #0
    456a:	ab02      	add	r3, sp, #8
    456c:	80da      	strh	r2, [r3, #6]
    456e:	7833      	ldrb	r3, [r6, #0]
    4570:	2b01      	cmp	r3, #1
    4572:	d028      	beq.n	45c6 <spi_init+0x176>
    4574:	6873      	ldr	r3, [r6, #4]
    4576:	68b2      	ldr	r2, [r6, #8]
    4578:	4313      	orrs	r3, r2
    457a:	68f2      	ldr	r2, [r6, #12]
    457c:	4313      	orrs	r3, r2
    457e:	7c31      	ldrb	r1, [r6, #16]
    4580:	7c72      	ldrb	r2, [r6, #17]
    4582:	2a00      	cmp	r2, #0
    4584:	d103      	bne.n	458e <spi_init+0x13e>
    4586:	4a25      	ldr	r2, [pc, #148]	; (461c <spi_init+0x1cc>)
    4588:	7892      	ldrb	r2, [r2, #2]
    458a:	0792      	lsls	r2, r2, #30
    458c:	d501      	bpl.n	4592 <spi_init+0x142>
    458e:	2280      	movs	r2, #128	; 0x80
    4590:	4313      	orrs	r3, r2
    4592:	7cb2      	ldrb	r2, [r6, #18]
    4594:	2a00      	cmp	r2, #0
    4596:	d002      	beq.n	459e <spi_init+0x14e>
    4598:	2280      	movs	r2, #128	; 0x80
    459a:	0292      	lsls	r2, r2, #10
    459c:	4311      	orrs	r1, r2
    459e:	7cf2      	ldrb	r2, [r6, #19]
    45a0:	2a00      	cmp	r2, #0
    45a2:	d002      	beq.n	45aa <spi_init+0x15a>
    45a4:	2280      	movs	r2, #128	; 0x80
    45a6:	0092      	lsls	r2, r2, #2
    45a8:	4311      	orrs	r1, r2
    45aa:	7d32      	ldrb	r2, [r6, #20]
    45ac:	2a00      	cmp	r2, #0
    45ae:	d002      	beq.n	45b6 <spi_init+0x166>
    45b0:	2280      	movs	r2, #128	; 0x80
    45b2:	0192      	lsls	r2, r2, #6
    45b4:	4311      	orrs	r1, r2
    45b6:	683a      	ldr	r2, [r7, #0]
    45b8:	4313      	orrs	r3, r2
    45ba:	603b      	str	r3, [r7, #0]
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	430b      	orrs	r3, r1
    45c0:	607b      	str	r3, [r7, #4]
    45c2:	2000      	movs	r0, #0
    45c4:	e74e      	b.n	4464 <spi_init+0x14>
    45c6:	6828      	ldr	r0, [r5, #0]
    45c8:	4b0a      	ldr	r3, [pc, #40]	; (45f4 <spi_init+0x1a4>)
    45ca:	4798      	blx	r3
    45cc:	3014      	adds	r0, #20
    45ce:	b2c0      	uxtb	r0, r0
    45d0:	4b13      	ldr	r3, [pc, #76]	; (4620 <spi_init+0x1d0>)
    45d2:	4798      	blx	r3
    45d4:	0001      	movs	r1, r0
    45d6:	ab02      	add	r3, sp, #8
    45d8:	1d9a      	adds	r2, r3, #6
    45da:	69b0      	ldr	r0, [r6, #24]
    45dc:	4b11      	ldr	r3, [pc, #68]	; (4624 <spi_init+0x1d4>)
    45de:	4798      	blx	r3
    45e0:	0003      	movs	r3, r0
    45e2:	2017      	movs	r0, #23
    45e4:	2b00      	cmp	r3, #0
    45e6:	d000      	beq.n	45ea <spi_init+0x19a>
    45e8:	e73c      	b.n	4464 <spi_init+0x14>
    45ea:	ab02      	add	r3, sp, #8
    45ec:	3306      	adds	r3, #6
    45ee:	781b      	ldrb	r3, [r3, #0]
    45f0:	733b      	strb	r3, [r7, #12]
    45f2:	e7bf      	b.n	4574 <spi_init+0x124>
    45f4:	00004349 	.word	0x00004349
    45f8:	40000400 	.word	0x40000400
    45fc:	00004f1d 	.word	0x00004f1d
    4600:	00004e91 	.word	0x00004e91
    4604:	00004185 	.word	0x00004185
    4608:	0000471d 	.word	0x0000471d
    460c:	00004385 	.word	0x00004385
    4610:	20000b10 	.word	0x20000b10
    4614:	000041d1 	.word	0x000041d1
    4618:	00005015 	.word	0x00005015
    461c:	41002000 	.word	0x41002000
    4620:	00004f39 	.word	0x00004f39
    4624:	000040c7 	.word	0x000040c7

00004628 <spi_select_slave>:
    4628:	b510      	push	{r4, lr}
    462a:	7944      	ldrb	r4, [r0, #5]
    462c:	2315      	movs	r3, #21
    462e:	2c01      	cmp	r4, #1
    4630:	d001      	beq.n	4636 <spi_select_slave+0xe>
    4632:	0018      	movs	r0, r3
    4634:	bd10      	pop	{r4, pc}
    4636:	7a04      	ldrb	r4, [r0, #8]
    4638:	2300      	movs	r3, #0
    463a:	2c00      	cmp	r4, #0
    463c:	d1f9      	bne.n	4632 <spi_select_slave+0xa>
    463e:	2a00      	cmp	r2, #0
    4640:	d058      	beq.n	46f4 <spi_select_slave+0xcc>
    4642:	784b      	ldrb	r3, [r1, #1]
    4644:	2b00      	cmp	r3, #0
    4646:	d044      	beq.n	46d2 <spi_select_slave+0xaa>
    4648:	6803      	ldr	r3, [r0, #0]
    464a:	7e1b      	ldrb	r3, [r3, #24]
    464c:	07db      	lsls	r3, r3, #31
    464e:	d410      	bmi.n	4672 <spi_select_slave+0x4a>
    4650:	780a      	ldrb	r2, [r1, #0]
    4652:	09d1      	lsrs	r1, r2, #7
    4654:	2300      	movs	r3, #0
    4656:	2900      	cmp	r1, #0
    4658:	d104      	bne.n	4664 <spi_select_slave+0x3c>
    465a:	0953      	lsrs	r3, r2, #5
    465c:	01db      	lsls	r3, r3, #7
    465e:	492e      	ldr	r1, [pc, #184]	; (4718 <spi_select_slave+0xf0>)
    4660:	468c      	mov	ip, r1
    4662:	4463      	add	r3, ip
    4664:	211f      	movs	r1, #31
    4666:	4011      	ands	r1, r2
    4668:	2201      	movs	r2, #1
    466a:	408a      	lsls	r2, r1
    466c:	619a      	str	r2, [r3, #24]
    466e:	2305      	movs	r3, #5
    4670:	e7df      	b.n	4632 <spi_select_slave+0xa>
    4672:	780a      	ldrb	r2, [r1, #0]
    4674:	09d4      	lsrs	r4, r2, #7
    4676:	2300      	movs	r3, #0
    4678:	2c00      	cmp	r4, #0
    467a:	d104      	bne.n	4686 <spi_select_slave+0x5e>
    467c:	0953      	lsrs	r3, r2, #5
    467e:	01db      	lsls	r3, r3, #7
    4680:	4c25      	ldr	r4, [pc, #148]	; (4718 <spi_select_slave+0xf0>)
    4682:	46a4      	mov	ip, r4
    4684:	4463      	add	r3, ip
    4686:	241f      	movs	r4, #31
    4688:	4014      	ands	r4, r2
    468a:	2201      	movs	r2, #1
    468c:	40a2      	lsls	r2, r4
    468e:	615a      	str	r2, [r3, #20]
    4690:	6803      	ldr	r3, [r0, #0]
    4692:	7e1a      	ldrb	r2, [r3, #24]
    4694:	07d2      	lsls	r2, r2, #31
    4696:	d501      	bpl.n	469c <spi_select_slave+0x74>
    4698:	788a      	ldrb	r2, [r1, #2]
    469a:	629a      	str	r2, [r3, #40]	; 0x28
    469c:	79c2      	ldrb	r2, [r0, #7]
    469e:	2300      	movs	r3, #0
    46a0:	2a00      	cmp	r2, #0
    46a2:	d1c6      	bne.n	4632 <spi_select_slave+0xa>
    46a4:	6802      	ldr	r2, [r0, #0]
    46a6:	2104      	movs	r1, #4
    46a8:	7e13      	ldrb	r3, [r2, #24]
    46aa:	420b      	tst	r3, r1
    46ac:	d0fc      	beq.n	46a8 <spi_select_slave+0x80>
    46ae:	7e11      	ldrb	r1, [r2, #24]
    46b0:	2300      	movs	r3, #0
    46b2:	0749      	lsls	r1, r1, #29
    46b4:	d5bd      	bpl.n	4632 <spi_select_slave+0xa>
    46b6:	8b53      	ldrh	r3, [r2, #26]
    46b8:	075b      	lsls	r3, r3, #29
    46ba:	d501      	bpl.n	46c0 <spi_select_slave+0x98>
    46bc:	2304      	movs	r3, #4
    46be:	8353      	strh	r3, [r2, #26]
    46c0:	7983      	ldrb	r3, [r0, #6]
    46c2:	2b01      	cmp	r3, #1
    46c4:	d002      	beq.n	46cc <spi_select_slave+0xa4>
    46c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    46c8:	2300      	movs	r3, #0
    46ca:	e7b2      	b.n	4632 <spi_select_slave+0xa>
    46cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    46ce:	2300      	movs	r3, #0
    46d0:	e7af      	b.n	4632 <spi_select_slave+0xa>
    46d2:	780a      	ldrb	r2, [r1, #0]
    46d4:	09d1      	lsrs	r1, r2, #7
    46d6:	2300      	movs	r3, #0
    46d8:	2900      	cmp	r1, #0
    46da:	d104      	bne.n	46e6 <spi_select_slave+0xbe>
    46dc:	0953      	lsrs	r3, r2, #5
    46de:	01db      	lsls	r3, r3, #7
    46e0:	490d      	ldr	r1, [pc, #52]	; (4718 <spi_select_slave+0xf0>)
    46e2:	468c      	mov	ip, r1
    46e4:	4463      	add	r3, ip
    46e6:	211f      	movs	r1, #31
    46e8:	4011      	ands	r1, r2
    46ea:	2201      	movs	r2, #1
    46ec:	408a      	lsls	r2, r1
    46ee:	615a      	str	r2, [r3, #20]
    46f0:	2300      	movs	r3, #0
    46f2:	e79e      	b.n	4632 <spi_select_slave+0xa>
    46f4:	780a      	ldrb	r2, [r1, #0]
    46f6:	09d1      	lsrs	r1, r2, #7
    46f8:	2300      	movs	r3, #0
    46fa:	2900      	cmp	r1, #0
    46fc:	d104      	bne.n	4708 <spi_select_slave+0xe0>
    46fe:	0953      	lsrs	r3, r2, #5
    4700:	01db      	lsls	r3, r3, #7
    4702:	4905      	ldr	r1, [pc, #20]	; (4718 <spi_select_slave+0xf0>)
    4704:	468c      	mov	ip, r1
    4706:	4463      	add	r3, ip
    4708:	211f      	movs	r1, #31
    470a:	4011      	ands	r1, r2
    470c:	2201      	movs	r2, #1
    470e:	408a      	lsls	r2, r1
    4710:	619a      	str	r2, [r3, #24]
    4712:	2300      	movs	r3, #0
    4714:	e78d      	b.n	4632 <spi_select_slave+0xa>
    4716:	46c0      	nop			; (mov r8, r8)
    4718:	41004400 	.word	0x41004400

0000471c <_spi_interrupt_handler>:
    471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    471e:	0080      	lsls	r0, r0, #2
    4720:	4b70      	ldr	r3, [pc, #448]	; (48e4 <_spi_interrupt_handler+0x1c8>)
    4722:	58c4      	ldr	r4, [r0, r3]
    4724:	6826      	ldr	r6, [r4, #0]
    4726:	2337      	movs	r3, #55	; 0x37
    4728:	5ce7      	ldrb	r7, [r4, r3]
    472a:	2236      	movs	r2, #54	; 0x36
    472c:	5ca2      	ldrb	r2, [r4, r2]
    472e:	4017      	ands	r7, r2
    4730:	7e33      	ldrb	r3, [r6, #24]
    4732:	7db5      	ldrb	r5, [r6, #22]
    4734:	401d      	ands	r5, r3
    4736:	07eb      	lsls	r3, r5, #31
    4738:	d502      	bpl.n	4740 <_spi_interrupt_handler+0x24>
    473a:	7963      	ldrb	r3, [r4, #5]
    473c:	2b01      	cmp	r3, #1
    473e:	d01e      	beq.n	477e <_spi_interrupt_handler+0x62>
    4740:	076b      	lsls	r3, r5, #29
    4742:	d511      	bpl.n	4768 <_spi_interrupt_handler+0x4c>
    4744:	8b73      	ldrh	r3, [r6, #26]
    4746:	075b      	lsls	r3, r3, #29
    4748:	d55a      	bpl.n	4800 <_spi_interrupt_handler+0xe4>
    474a:	7a63      	ldrb	r3, [r4, #9]
    474c:	2b01      	cmp	r3, #1
    474e:	d008      	beq.n	4762 <_spi_interrupt_handler+0x46>
    4750:	221e      	movs	r2, #30
    4752:	2338      	movs	r3, #56	; 0x38
    4754:	54e2      	strb	r2, [r4, r3]
    4756:	3b35      	subs	r3, #53	; 0x35
    4758:	7263      	strb	r3, [r4, #9]
    475a:	3302      	adds	r3, #2
    475c:	7533      	strb	r3, [r6, #20]
    475e:	073b      	lsls	r3, r7, #28
    4760:	d44a      	bmi.n	47f8 <_spi_interrupt_handler+0xdc>
    4762:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4764:	2304      	movs	r3, #4
    4766:	8373      	strh	r3, [r6, #26]
    4768:	07ab      	lsls	r3, r5, #30
    476a:	d503      	bpl.n	4774 <_spi_interrupt_handler+0x58>
    476c:	7963      	ldrb	r3, [r4, #5]
    476e:	2b01      	cmp	r3, #1
    4770:	d100      	bne.n	4774 <_spi_interrupt_handler+0x58>
    4772:	e097      	b.n	48a4 <_spi_interrupt_handler+0x188>
    4774:	b26d      	sxtb	r5, r5
    4776:	2d00      	cmp	r5, #0
    4778:	da00      	bge.n	477c <_spi_interrupt_handler+0x60>
    477a:	e0a9      	b.n	48d0 <_spi_interrupt_handler+0x1b4>
    477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    477e:	7a63      	ldrb	r3, [r4, #9]
    4780:	2b00      	cmp	r3, #0
    4782:	d022      	beq.n	47ca <_spi_interrupt_handler+0xae>
    4784:	7a63      	ldrb	r3, [r4, #9]
    4786:	2b00      	cmp	r3, #0
    4788:	d0da      	beq.n	4740 <_spi_interrupt_handler+0x24>
    478a:	6821      	ldr	r1, [r4, #0]
    478c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    478e:	7813      	ldrb	r3, [r2, #0]
    4790:	b2db      	uxtb	r3, r3
    4792:	1c50      	adds	r0, r2, #1
    4794:	62e0      	str	r0, [r4, #44]	; 0x2c
    4796:	79a0      	ldrb	r0, [r4, #6]
    4798:	2801      	cmp	r0, #1
    479a:	d027      	beq.n	47ec <_spi_interrupt_handler+0xd0>
    479c:	b29b      	uxth	r3, r3
    479e:	05db      	lsls	r3, r3, #23
    47a0:	0ddb      	lsrs	r3, r3, #23
    47a2:	628b      	str	r3, [r1, #40]	; 0x28
    47a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    47a6:	3b01      	subs	r3, #1
    47a8:	b29b      	uxth	r3, r3
    47aa:	86a3      	strh	r3, [r4, #52]	; 0x34
    47ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    47ae:	b29b      	uxth	r3, r3
    47b0:	2b00      	cmp	r3, #0
    47b2:	d1c5      	bne.n	4740 <_spi_interrupt_handler+0x24>
    47b4:	3301      	adds	r3, #1
    47b6:	7533      	strb	r3, [r6, #20]
    47b8:	7a63      	ldrb	r3, [r4, #9]
    47ba:	2b01      	cmp	r3, #1
    47bc:	d1c0      	bne.n	4740 <_spi_interrupt_handler+0x24>
    47be:	79e3      	ldrb	r3, [r4, #7]
    47c0:	2b00      	cmp	r3, #0
    47c2:	d1bd      	bne.n	4740 <_spi_interrupt_handler+0x24>
    47c4:	3302      	adds	r3, #2
    47c6:	75b3      	strb	r3, [r6, #22]
    47c8:	e7ba      	b.n	4740 <_spi_interrupt_handler+0x24>
    47ca:	4b47      	ldr	r3, [pc, #284]	; (48e8 <_spi_interrupt_handler+0x1cc>)
    47cc:	881b      	ldrh	r3, [r3, #0]
    47ce:	62b3      	str	r3, [r6, #40]	; 0x28
    47d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    47d2:	3b01      	subs	r3, #1
    47d4:	b29b      	uxth	r3, r3
    47d6:	8663      	strh	r3, [r4, #50]	; 0x32
    47d8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    47da:	b29b      	uxth	r3, r3
    47dc:	2b00      	cmp	r3, #0
    47de:	d101      	bne.n	47e4 <_spi_interrupt_handler+0xc8>
    47e0:	3301      	adds	r3, #1
    47e2:	7533      	strb	r3, [r6, #20]
    47e4:	7963      	ldrb	r3, [r4, #5]
    47e6:	2b01      	cmp	r3, #1
    47e8:	d0cc      	beq.n	4784 <_spi_interrupt_handler+0x68>
    47ea:	e7a9      	b.n	4740 <_spi_interrupt_handler+0x24>
    47ec:	7850      	ldrb	r0, [r2, #1]
    47ee:	0200      	lsls	r0, r0, #8
    47f0:	4303      	orrs	r3, r0
    47f2:	3202      	adds	r2, #2
    47f4:	62e2      	str	r2, [r4, #44]	; 0x2c
    47f6:	e7d2      	b.n	479e <_spi_interrupt_handler+0x82>
    47f8:	0020      	movs	r0, r4
    47fa:	69a3      	ldr	r3, [r4, #24]
    47fc:	4798      	blx	r3
    47fe:	e7b0      	b.n	4762 <_spi_interrupt_handler+0x46>
    4800:	7a63      	ldrb	r3, [r4, #9]
    4802:	2b01      	cmp	r3, #1
    4804:	d028      	beq.n	4858 <_spi_interrupt_handler+0x13c>
    4806:	6823      	ldr	r3, [r4, #0]
    4808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    480a:	05db      	lsls	r3, r3, #23
    480c:	0ddb      	lsrs	r3, r3, #23
    480e:	b2da      	uxtb	r2, r3
    4810:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4812:	700a      	strb	r2, [r1, #0]
    4814:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4816:	1c51      	adds	r1, r2, #1
    4818:	62a1      	str	r1, [r4, #40]	; 0x28
    481a:	79a1      	ldrb	r1, [r4, #6]
    481c:	2901      	cmp	r1, #1
    481e:	d034      	beq.n	488a <_spi_interrupt_handler+0x16e>
    4820:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4822:	3b01      	subs	r3, #1
    4824:	b29b      	uxth	r3, r3
    4826:	8623      	strh	r3, [r4, #48]	; 0x30
    4828:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    482a:	b29b      	uxth	r3, r3
    482c:	2b00      	cmp	r3, #0
    482e:	d000      	beq.n	4832 <_spi_interrupt_handler+0x116>
    4830:	e79a      	b.n	4768 <_spi_interrupt_handler+0x4c>
    4832:	2200      	movs	r2, #0
    4834:	3338      	adds	r3, #56	; 0x38
    4836:	54e2      	strb	r2, [r4, r3]
    4838:	3b34      	subs	r3, #52	; 0x34
    483a:	7533      	strb	r3, [r6, #20]
    483c:	7a63      	ldrb	r3, [r4, #9]
    483e:	2b02      	cmp	r3, #2
    4840:	d029      	beq.n	4896 <_spi_interrupt_handler+0x17a>
    4842:	7a63      	ldrb	r3, [r4, #9]
    4844:	2b00      	cmp	r3, #0
    4846:	d000      	beq.n	484a <_spi_interrupt_handler+0x12e>
    4848:	e78e      	b.n	4768 <_spi_interrupt_handler+0x4c>
    484a:	07bb      	lsls	r3, r7, #30
    484c:	d400      	bmi.n	4850 <_spi_interrupt_handler+0x134>
    484e:	e78b      	b.n	4768 <_spi_interrupt_handler+0x4c>
    4850:	0020      	movs	r0, r4
    4852:	6923      	ldr	r3, [r4, #16]
    4854:	4798      	blx	r3
    4856:	e787      	b.n	4768 <_spi_interrupt_handler+0x4c>
    4858:	6823      	ldr	r3, [r4, #0]
    485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    485c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    485e:	3b01      	subs	r3, #1
    4860:	b29b      	uxth	r3, r3
    4862:	8663      	strh	r3, [r4, #50]	; 0x32
    4864:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4866:	b29b      	uxth	r3, r3
    4868:	2b00      	cmp	r3, #0
    486a:	d000      	beq.n	486e <_spi_interrupt_handler+0x152>
    486c:	e77c      	b.n	4768 <_spi_interrupt_handler+0x4c>
    486e:	3304      	adds	r3, #4
    4870:	7533      	strb	r3, [r6, #20]
    4872:	2200      	movs	r2, #0
    4874:	3334      	adds	r3, #52	; 0x34
    4876:	54e2      	strb	r2, [r4, r3]
    4878:	3b35      	subs	r3, #53	; 0x35
    487a:	7263      	strb	r3, [r4, #9]
    487c:	07fb      	lsls	r3, r7, #31
    487e:	d400      	bmi.n	4882 <_spi_interrupt_handler+0x166>
    4880:	e772      	b.n	4768 <_spi_interrupt_handler+0x4c>
    4882:	0020      	movs	r0, r4
    4884:	68e3      	ldr	r3, [r4, #12]
    4886:	4798      	blx	r3
    4888:	e76e      	b.n	4768 <_spi_interrupt_handler+0x4c>
    488a:	0a1b      	lsrs	r3, r3, #8
    488c:	7053      	strb	r3, [r2, #1]
    488e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4890:	3301      	adds	r3, #1
    4892:	62a3      	str	r3, [r4, #40]	; 0x28
    4894:	e7c4      	b.n	4820 <_spi_interrupt_handler+0x104>
    4896:	077b      	lsls	r3, r7, #29
    4898:	d400      	bmi.n	489c <_spi_interrupt_handler+0x180>
    489a:	e765      	b.n	4768 <_spi_interrupt_handler+0x4c>
    489c:	0020      	movs	r0, r4
    489e:	6963      	ldr	r3, [r4, #20]
    48a0:	4798      	blx	r3
    48a2:	e761      	b.n	4768 <_spi_interrupt_handler+0x4c>
    48a4:	7a63      	ldrb	r3, [r4, #9]
    48a6:	2b01      	cmp	r3, #1
    48a8:	d000      	beq.n	48ac <_spi_interrupt_handler+0x190>
    48aa:	e763      	b.n	4774 <_spi_interrupt_handler+0x58>
    48ac:	79e3      	ldrb	r3, [r4, #7]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d000      	beq.n	48b4 <_spi_interrupt_handler+0x198>
    48b2:	e75f      	b.n	4774 <_spi_interrupt_handler+0x58>
    48b4:	3302      	adds	r3, #2
    48b6:	7533      	strb	r3, [r6, #20]
    48b8:	3301      	adds	r3, #1
    48ba:	7263      	strb	r3, [r4, #9]
    48bc:	2200      	movs	r2, #0
    48be:	3335      	adds	r3, #53	; 0x35
    48c0:	54e2      	strb	r2, [r4, r3]
    48c2:	07fb      	lsls	r3, r7, #31
    48c4:	d400      	bmi.n	48c8 <_spi_interrupt_handler+0x1ac>
    48c6:	e755      	b.n	4774 <_spi_interrupt_handler+0x58>
    48c8:	0020      	movs	r0, r4
    48ca:	68e3      	ldr	r3, [r4, #12]
    48cc:	4798      	blx	r3
    48ce:	e751      	b.n	4774 <_spi_interrupt_handler+0x58>
    48d0:	2380      	movs	r3, #128	; 0x80
    48d2:	7533      	strb	r3, [r6, #20]
    48d4:	7633      	strb	r3, [r6, #24]
    48d6:	067b      	lsls	r3, r7, #25
    48d8:	d400      	bmi.n	48dc <_spi_interrupt_handler+0x1c0>
    48da:	e74f      	b.n	477c <_spi_interrupt_handler+0x60>
    48dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    48de:	0020      	movs	r0, r4
    48e0:	4798      	blx	r3
    48e2:	e74b      	b.n	477c <_spi_interrupt_handler+0x60>
    48e4:	20000b10 	.word	0x20000b10
    48e8:	20000b28 	.word	0x20000b28

000048ec <system_clock_source_get_hz>:
    48ec:	b510      	push	{r4, lr}
    48ee:	2808      	cmp	r0, #8
    48f0:	d803      	bhi.n	48fa <system_clock_source_get_hz+0xe>
    48f2:	0080      	lsls	r0, r0, #2
    48f4:	4b1b      	ldr	r3, [pc, #108]	; (4964 <system_clock_source_get_hz+0x78>)
    48f6:	581b      	ldr	r3, [r3, r0]
    48f8:	469f      	mov	pc, r3
    48fa:	2000      	movs	r0, #0
    48fc:	e030      	b.n	4960 <system_clock_source_get_hz+0x74>
    48fe:	4b1a      	ldr	r3, [pc, #104]	; (4968 <system_clock_source_get_hz+0x7c>)
    4900:	6918      	ldr	r0, [r3, #16]
    4902:	e02d      	b.n	4960 <system_clock_source_get_hz+0x74>
    4904:	4b19      	ldr	r3, [pc, #100]	; (496c <system_clock_source_get_hz+0x80>)
    4906:	6a1b      	ldr	r3, [r3, #32]
    4908:	059b      	lsls	r3, r3, #22
    490a:	0f9b      	lsrs	r3, r3, #30
    490c:	4818      	ldr	r0, [pc, #96]	; (4970 <system_clock_source_get_hz+0x84>)
    490e:	40d8      	lsrs	r0, r3
    4910:	e026      	b.n	4960 <system_clock_source_get_hz+0x74>
    4912:	4b15      	ldr	r3, [pc, #84]	; (4968 <system_clock_source_get_hz+0x7c>)
    4914:	6958      	ldr	r0, [r3, #20]
    4916:	e023      	b.n	4960 <system_clock_source_get_hz+0x74>
    4918:	4b13      	ldr	r3, [pc, #76]	; (4968 <system_clock_source_get_hz+0x7c>)
    491a:	681b      	ldr	r3, [r3, #0]
    491c:	2000      	movs	r0, #0
    491e:	079b      	lsls	r3, r3, #30
    4920:	d51e      	bpl.n	4960 <system_clock_source_get_hz+0x74>
    4922:	4912      	ldr	r1, [pc, #72]	; (496c <system_clock_source_get_hz+0x80>)
    4924:	2210      	movs	r2, #16
    4926:	68cb      	ldr	r3, [r1, #12]
    4928:	421a      	tst	r2, r3
    492a:	d0fc      	beq.n	4926 <system_clock_source_get_hz+0x3a>
    492c:	4b0e      	ldr	r3, [pc, #56]	; (4968 <system_clock_source_get_hz+0x7c>)
    492e:	681b      	ldr	r3, [r3, #0]
    4930:	075b      	lsls	r3, r3, #29
    4932:	d401      	bmi.n	4938 <system_clock_source_get_hz+0x4c>
    4934:	480f      	ldr	r0, [pc, #60]	; (4974 <system_clock_source_get_hz+0x88>)
    4936:	e013      	b.n	4960 <system_clock_source_get_hz+0x74>
    4938:	2000      	movs	r0, #0
    493a:	4b0f      	ldr	r3, [pc, #60]	; (4978 <system_clock_source_get_hz+0x8c>)
    493c:	4798      	blx	r3
    493e:	4b0a      	ldr	r3, [pc, #40]	; (4968 <system_clock_source_get_hz+0x7c>)
    4940:	689b      	ldr	r3, [r3, #8]
    4942:	041b      	lsls	r3, r3, #16
    4944:	0c1b      	lsrs	r3, r3, #16
    4946:	4358      	muls	r0, r3
    4948:	e00a      	b.n	4960 <system_clock_source_get_hz+0x74>
    494a:	2350      	movs	r3, #80	; 0x50
    494c:	4a07      	ldr	r2, [pc, #28]	; (496c <system_clock_source_get_hz+0x80>)
    494e:	5cd3      	ldrb	r3, [r2, r3]
    4950:	2000      	movs	r0, #0
    4952:	075b      	lsls	r3, r3, #29
    4954:	d504      	bpl.n	4960 <system_clock_source_get_hz+0x74>
    4956:	4b04      	ldr	r3, [pc, #16]	; (4968 <system_clock_source_get_hz+0x7c>)
    4958:	68d8      	ldr	r0, [r3, #12]
    495a:	e001      	b.n	4960 <system_clock_source_get_hz+0x74>
    495c:	2080      	movs	r0, #128	; 0x80
    495e:	0200      	lsls	r0, r0, #8
    4960:	bd10      	pop	{r4, pc}
    4962:	46c0      	nop			; (mov r8, r8)
    4964:	0000968c 	.word	0x0000968c
    4968:	200001a4 	.word	0x200001a4
    496c:	40000800 	.word	0x40000800
    4970:	007a1200 	.word	0x007a1200
    4974:	02dc6c00 	.word	0x02dc6c00
    4978:	00004f39 	.word	0x00004f39

0000497c <system_clock_source_osc8m_set_config>:
    497c:	b570      	push	{r4, r5, r6, lr}
    497e:	490c      	ldr	r1, [pc, #48]	; (49b0 <system_clock_source_osc8m_set_config+0x34>)
    4980:	6a0b      	ldr	r3, [r1, #32]
    4982:	7804      	ldrb	r4, [r0, #0]
    4984:	7885      	ldrb	r5, [r0, #2]
    4986:	7840      	ldrb	r0, [r0, #1]
    4988:	2201      	movs	r2, #1
    498a:	4010      	ands	r0, r2
    498c:	0180      	lsls	r0, r0, #6
    498e:	2640      	movs	r6, #64	; 0x40
    4990:	43b3      	bics	r3, r6
    4992:	4303      	orrs	r3, r0
    4994:	402a      	ands	r2, r5
    4996:	01d2      	lsls	r2, r2, #7
    4998:	2080      	movs	r0, #128	; 0x80
    499a:	4383      	bics	r3, r0
    499c:	4313      	orrs	r3, r2
    499e:	2203      	movs	r2, #3
    49a0:	4022      	ands	r2, r4
    49a2:	0212      	lsls	r2, r2, #8
    49a4:	4803      	ldr	r0, [pc, #12]	; (49b4 <system_clock_source_osc8m_set_config+0x38>)
    49a6:	4003      	ands	r3, r0
    49a8:	4313      	orrs	r3, r2
    49aa:	620b      	str	r3, [r1, #32]
    49ac:	bd70      	pop	{r4, r5, r6, pc}
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	40000800 	.word	0x40000800
    49b4:	fffffcff 	.word	0xfffffcff

000049b8 <system_clock_source_osc32k_set_config>:
    49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ba:	46ce      	mov	lr, r9
    49bc:	4647      	mov	r7, r8
    49be:	b580      	push	{r7, lr}
    49c0:	4b19      	ldr	r3, [pc, #100]	; (4a28 <system_clock_source_osc32k_set_config+0x70>)
    49c2:	4699      	mov	r9, r3
    49c4:	699b      	ldr	r3, [r3, #24]
    49c6:	7841      	ldrb	r1, [r0, #1]
    49c8:	468c      	mov	ip, r1
    49ca:	7805      	ldrb	r5, [r0, #0]
    49cc:	7906      	ldrb	r6, [r0, #4]
    49ce:	78c7      	ldrb	r7, [r0, #3]
    49d0:	7944      	ldrb	r4, [r0, #5]
    49d2:	7880      	ldrb	r0, [r0, #2]
    49d4:	2101      	movs	r1, #1
    49d6:	4008      	ands	r0, r1
    49d8:	0080      	lsls	r0, r0, #2
    49da:	2204      	movs	r2, #4
    49dc:	4393      	bics	r3, r2
    49de:	4303      	orrs	r3, r0
    49e0:	4660      	mov	r0, ip
    49e2:	4008      	ands	r0, r1
    49e4:	00c0      	lsls	r0, r0, #3
    49e6:	3204      	adds	r2, #4
    49e8:	4393      	bics	r3, r2
    49ea:	4303      	orrs	r3, r0
    49ec:	0038      	movs	r0, r7
    49ee:	4008      	ands	r0, r1
    49f0:	0180      	lsls	r0, r0, #6
    49f2:	2740      	movs	r7, #64	; 0x40
    49f4:	43bb      	bics	r3, r7
    49f6:	4303      	orrs	r3, r0
    49f8:	0030      	movs	r0, r6
    49fa:	4008      	ands	r0, r1
    49fc:	01c0      	lsls	r0, r0, #7
    49fe:	2680      	movs	r6, #128	; 0x80
    4a00:	43b3      	bics	r3, r6
    4a02:	4303      	orrs	r3, r0
    4a04:	2007      	movs	r0, #7
    4a06:	4005      	ands	r5, r0
    4a08:	022d      	lsls	r5, r5, #8
    4a0a:	4808      	ldr	r0, [pc, #32]	; (4a2c <system_clock_source_osc32k_set_config+0x74>)
    4a0c:	4003      	ands	r3, r0
    4a0e:	432b      	orrs	r3, r5
    4a10:	4021      	ands	r1, r4
    4a12:	0309      	lsls	r1, r1, #12
    4a14:	4806      	ldr	r0, [pc, #24]	; (4a30 <system_clock_source_osc32k_set_config+0x78>)
    4a16:	4003      	ands	r3, r0
    4a18:	430b      	orrs	r3, r1
    4a1a:	464a      	mov	r2, r9
    4a1c:	6193      	str	r3, [r2, #24]
    4a1e:	bc0c      	pop	{r2, r3}
    4a20:	4690      	mov	r8, r2
    4a22:	4699      	mov	r9, r3
    4a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	40000800 	.word	0x40000800
    4a2c:	fffff8ff 	.word	0xfffff8ff
    4a30:	ffffefff 	.word	0xffffefff

00004a34 <system_clock_source_dfll_set_config>:
    4a34:	b510      	push	{r4, lr}
    4a36:	7a03      	ldrb	r3, [r0, #8]
    4a38:	069b      	lsls	r3, r3, #26
    4a3a:	0c1b      	lsrs	r3, r3, #16
    4a3c:	8942      	ldrh	r2, [r0, #10]
    4a3e:	0592      	lsls	r2, r2, #22
    4a40:	0d92      	lsrs	r2, r2, #22
    4a42:	4313      	orrs	r3, r2
    4a44:	4918      	ldr	r1, [pc, #96]	; (4aa8 <system_clock_source_dfll_set_config+0x74>)
    4a46:	604b      	str	r3, [r1, #4]
    4a48:	7983      	ldrb	r3, [r0, #6]
    4a4a:	79c2      	ldrb	r2, [r0, #7]
    4a4c:	4313      	orrs	r3, r2
    4a4e:	8842      	ldrh	r2, [r0, #2]
    4a50:	8884      	ldrh	r4, [r0, #4]
    4a52:	4322      	orrs	r2, r4
    4a54:	4313      	orrs	r3, r2
    4a56:	7842      	ldrb	r2, [r0, #1]
    4a58:	01d2      	lsls	r2, r2, #7
    4a5a:	4313      	orrs	r3, r2
    4a5c:	600b      	str	r3, [r1, #0]
    4a5e:	7803      	ldrb	r3, [r0, #0]
    4a60:	2b04      	cmp	r3, #4
    4a62:	d011      	beq.n	4a88 <system_clock_source_dfll_set_config+0x54>
    4a64:	2b20      	cmp	r3, #32
    4a66:	d10e      	bne.n	4a86 <system_clock_source_dfll_set_config+0x52>
    4a68:	7b03      	ldrb	r3, [r0, #12]
    4a6a:	069b      	lsls	r3, r3, #26
    4a6c:	8a02      	ldrh	r2, [r0, #16]
    4a6e:	4313      	orrs	r3, r2
    4a70:	89c2      	ldrh	r2, [r0, #14]
    4a72:	0412      	lsls	r2, r2, #16
    4a74:	490d      	ldr	r1, [pc, #52]	; (4aac <system_clock_source_dfll_set_config+0x78>)
    4a76:	400a      	ands	r2, r1
    4a78:	4313      	orrs	r3, r2
    4a7a:	4a0b      	ldr	r2, [pc, #44]	; (4aa8 <system_clock_source_dfll_set_config+0x74>)
    4a7c:	6093      	str	r3, [r2, #8]
    4a7e:	6811      	ldr	r1, [r2, #0]
    4a80:	4b0b      	ldr	r3, [pc, #44]	; (4ab0 <system_clock_source_dfll_set_config+0x7c>)
    4a82:	430b      	orrs	r3, r1
    4a84:	6013      	str	r3, [r2, #0]
    4a86:	bd10      	pop	{r4, pc}
    4a88:	7b03      	ldrb	r3, [r0, #12]
    4a8a:	069b      	lsls	r3, r3, #26
    4a8c:	8a02      	ldrh	r2, [r0, #16]
    4a8e:	4313      	orrs	r3, r2
    4a90:	89c2      	ldrh	r2, [r0, #14]
    4a92:	0412      	lsls	r2, r2, #16
    4a94:	4905      	ldr	r1, [pc, #20]	; (4aac <system_clock_source_dfll_set_config+0x78>)
    4a96:	400a      	ands	r2, r1
    4a98:	4313      	orrs	r3, r2
    4a9a:	4a03      	ldr	r2, [pc, #12]	; (4aa8 <system_clock_source_dfll_set_config+0x74>)
    4a9c:	6093      	str	r3, [r2, #8]
    4a9e:	6813      	ldr	r3, [r2, #0]
    4aa0:	2104      	movs	r1, #4
    4aa2:	430b      	orrs	r3, r1
    4aa4:	6013      	str	r3, [r2, #0]
    4aa6:	e7ee      	b.n	4a86 <system_clock_source_dfll_set_config+0x52>
    4aa8:	200001a4 	.word	0x200001a4
    4aac:	03ff0000 	.word	0x03ff0000
    4ab0:	00000424 	.word	0x00000424

00004ab4 <system_clock_source_enable>:
    4ab4:	2808      	cmp	r0, #8
    4ab6:	d803      	bhi.n	4ac0 <system_clock_source_enable+0xc>
    4ab8:	0080      	lsls	r0, r0, #2
    4aba:	4b25      	ldr	r3, [pc, #148]	; (4b50 <system_clock_source_enable+0x9c>)
    4abc:	581b      	ldr	r3, [r3, r0]
    4abe:	469f      	mov	pc, r3
    4ac0:	2017      	movs	r0, #23
    4ac2:	e044      	b.n	4b4e <system_clock_source_enable+0x9a>
    4ac4:	4a23      	ldr	r2, [pc, #140]	; (4b54 <system_clock_source_enable+0xa0>)
    4ac6:	6a13      	ldr	r3, [r2, #32]
    4ac8:	2102      	movs	r1, #2
    4aca:	430b      	orrs	r3, r1
    4acc:	6213      	str	r3, [r2, #32]
    4ace:	2000      	movs	r0, #0
    4ad0:	e03d      	b.n	4b4e <system_clock_source_enable+0x9a>
    4ad2:	4a20      	ldr	r2, [pc, #128]	; (4b54 <system_clock_source_enable+0xa0>)
    4ad4:	6993      	ldr	r3, [r2, #24]
    4ad6:	2102      	movs	r1, #2
    4ad8:	430b      	orrs	r3, r1
    4ada:	6193      	str	r3, [r2, #24]
    4adc:	2000      	movs	r0, #0
    4ade:	e036      	b.n	4b4e <system_clock_source_enable+0x9a>
    4ae0:	4a1c      	ldr	r2, [pc, #112]	; (4b54 <system_clock_source_enable+0xa0>)
    4ae2:	8a13      	ldrh	r3, [r2, #16]
    4ae4:	2102      	movs	r1, #2
    4ae6:	430b      	orrs	r3, r1
    4ae8:	8213      	strh	r3, [r2, #16]
    4aea:	2000      	movs	r0, #0
    4aec:	e02f      	b.n	4b4e <system_clock_source_enable+0x9a>
    4aee:	4a19      	ldr	r2, [pc, #100]	; (4b54 <system_clock_source_enable+0xa0>)
    4af0:	8a93      	ldrh	r3, [r2, #20]
    4af2:	2102      	movs	r1, #2
    4af4:	430b      	orrs	r3, r1
    4af6:	8293      	strh	r3, [r2, #20]
    4af8:	2000      	movs	r0, #0
    4afa:	e028      	b.n	4b4e <system_clock_source_enable+0x9a>
    4afc:	4916      	ldr	r1, [pc, #88]	; (4b58 <system_clock_source_enable+0xa4>)
    4afe:	680b      	ldr	r3, [r1, #0]
    4b00:	2202      	movs	r2, #2
    4b02:	4313      	orrs	r3, r2
    4b04:	600b      	str	r3, [r1, #0]
    4b06:	4b13      	ldr	r3, [pc, #76]	; (4b54 <system_clock_source_enable+0xa0>)
    4b08:	849a      	strh	r2, [r3, #36]	; 0x24
    4b0a:	0019      	movs	r1, r3
    4b0c:	320e      	adds	r2, #14
    4b0e:	68cb      	ldr	r3, [r1, #12]
    4b10:	421a      	tst	r2, r3
    4b12:	d0fc      	beq.n	4b0e <system_clock_source_enable+0x5a>
    4b14:	4a10      	ldr	r2, [pc, #64]	; (4b58 <system_clock_source_enable+0xa4>)
    4b16:	6891      	ldr	r1, [r2, #8]
    4b18:	4b0e      	ldr	r3, [pc, #56]	; (4b54 <system_clock_source_enable+0xa0>)
    4b1a:	62d9      	str	r1, [r3, #44]	; 0x2c
    4b1c:	6852      	ldr	r2, [r2, #4]
    4b1e:	629a      	str	r2, [r3, #40]	; 0x28
    4b20:	2200      	movs	r2, #0
    4b22:	849a      	strh	r2, [r3, #36]	; 0x24
    4b24:	0019      	movs	r1, r3
    4b26:	3210      	adds	r2, #16
    4b28:	68cb      	ldr	r3, [r1, #12]
    4b2a:	421a      	tst	r2, r3
    4b2c:	d0fc      	beq.n	4b28 <system_clock_source_enable+0x74>
    4b2e:	4b0a      	ldr	r3, [pc, #40]	; (4b58 <system_clock_source_enable+0xa4>)
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	b29b      	uxth	r3, r3
    4b34:	4a07      	ldr	r2, [pc, #28]	; (4b54 <system_clock_source_enable+0xa0>)
    4b36:	8493      	strh	r3, [r2, #36]	; 0x24
    4b38:	2000      	movs	r0, #0
    4b3a:	e008      	b.n	4b4e <system_clock_source_enable+0x9a>
    4b3c:	4905      	ldr	r1, [pc, #20]	; (4b54 <system_clock_source_enable+0xa0>)
    4b3e:	2244      	movs	r2, #68	; 0x44
    4b40:	5c8b      	ldrb	r3, [r1, r2]
    4b42:	2002      	movs	r0, #2
    4b44:	4303      	orrs	r3, r0
    4b46:	548b      	strb	r3, [r1, r2]
    4b48:	2000      	movs	r0, #0
    4b4a:	e000      	b.n	4b4e <system_clock_source_enable+0x9a>
    4b4c:	2000      	movs	r0, #0
    4b4e:	4770      	bx	lr
    4b50:	000096b0 	.word	0x000096b0
    4b54:	40000800 	.word	0x40000800
    4b58:	200001a4 	.word	0x200001a4

00004b5c <system_clock_init>:
    4b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b5e:	46ce      	mov	lr, r9
    4b60:	4647      	mov	r7, r8
    4b62:	b580      	push	{r7, lr}
    4b64:	b08d      	sub	sp, #52	; 0x34
    4b66:	22c2      	movs	r2, #194	; 0xc2
    4b68:	00d2      	lsls	r2, r2, #3
    4b6a:	4b50      	ldr	r3, [pc, #320]	; (4cac <system_clock_init+0x150>)
    4b6c:	609a      	str	r2, [r3, #8]
    4b6e:	4a50      	ldr	r2, [pc, #320]	; (4cb0 <system_clock_init+0x154>)
    4b70:	6853      	ldr	r3, [r2, #4]
    4b72:	211e      	movs	r1, #30
    4b74:	438b      	bics	r3, r1
    4b76:	391a      	subs	r1, #26
    4b78:	430b      	orrs	r3, r1
    4b7a:	6053      	str	r3, [r2, #4]
    4b7c:	2203      	movs	r2, #3
    4b7e:	ab01      	add	r3, sp, #4
    4b80:	701a      	strb	r2, [r3, #0]
    4b82:	2400      	movs	r4, #0
    4b84:	4d4b      	ldr	r5, [pc, #300]	; (4cb4 <system_clock_init+0x158>)
    4b86:	b2e0      	uxtb	r0, r4
    4b88:	a901      	add	r1, sp, #4
    4b8a:	47a8      	blx	r5
    4b8c:	3401      	adds	r4, #1
    4b8e:	2c25      	cmp	r4, #37	; 0x25
    4b90:	d1f9      	bne.n	4b86 <system_clock_init+0x2a>
    4b92:	4d49      	ldr	r5, [pc, #292]	; (4cb8 <system_clock_init+0x15c>)
    4b94:	682b      	ldr	r3, [r5, #0]
    4b96:	04db      	lsls	r3, r3, #19
    4b98:	4944      	ldr	r1, [pc, #272]	; (4cac <system_clock_init+0x150>)
    4b9a:	698a      	ldr	r2, [r1, #24]
    4b9c:	0e5b      	lsrs	r3, r3, #25
    4b9e:	041b      	lsls	r3, r3, #16
    4ba0:	4846      	ldr	r0, [pc, #280]	; (4cbc <system_clock_init+0x160>)
    4ba2:	4002      	ands	r2, r0
    4ba4:	4313      	orrs	r3, r2
    4ba6:	618b      	str	r3, [r1, #24]
    4ba8:	a80a      	add	r0, sp, #40	; 0x28
    4baa:	2301      	movs	r3, #1
    4bac:	7083      	strb	r3, [r0, #2]
    4bae:	2207      	movs	r2, #7
    4bb0:	7002      	strb	r2, [r0, #0]
    4bb2:	2400      	movs	r4, #0
    4bb4:	7144      	strb	r4, [r0, #5]
    4bb6:	7044      	strb	r4, [r0, #1]
    4bb8:	7104      	strb	r4, [r0, #4]
    4bba:	70c3      	strb	r3, [r0, #3]
    4bbc:	4b40      	ldr	r3, [pc, #256]	; (4cc0 <system_clock_init+0x164>)
    4bbe:	4798      	blx	r3
    4bc0:	2004      	movs	r0, #4
    4bc2:	4b40      	ldr	r3, [pc, #256]	; (4cc4 <system_clock_init+0x168>)
    4bc4:	4798      	blx	r3
    4bc6:	ab05      	add	r3, sp, #20
    4bc8:	2200      	movs	r2, #0
    4bca:	805c      	strh	r4, [r3, #2]
    4bcc:	809c      	strh	r4, [r3, #4]
    4bce:	719a      	strb	r2, [r3, #6]
    4bd0:	71da      	strb	r2, [r3, #7]
    4bd2:	213f      	movs	r1, #63	; 0x3f
    4bd4:	8159      	strh	r1, [r3, #10]
    4bd6:	393b      	subs	r1, #59	; 0x3b
    4bd8:	7019      	strb	r1, [r3, #0]
    4bda:	705a      	strb	r2, [r3, #1]
    4bdc:	682b      	ldr	r3, [r5, #0]
    4bde:	0e9b      	lsrs	r3, r3, #26
    4be0:	2b3f      	cmp	r3, #63	; 0x3f
    4be2:	d060      	beq.n	4ca6 <system_clock_init+0x14a>
    4be4:	a805      	add	r0, sp, #20
    4be6:	7203      	strb	r3, [r0, #8]
    4be8:	2304      	movs	r3, #4
    4bea:	8203      	strh	r3, [r0, #16]
    4bec:	3303      	adds	r3, #3
    4bee:	7303      	strb	r3, [r0, #12]
    4bf0:	3338      	adds	r3, #56	; 0x38
    4bf2:	81c3      	strh	r3, [r0, #14]
    4bf4:	4b34      	ldr	r3, [pc, #208]	; (4cc8 <system_clock_init+0x16c>)
    4bf6:	4798      	blx	r3
    4bf8:	a804      	add	r0, sp, #16
    4bfa:	2500      	movs	r5, #0
    4bfc:	7045      	strb	r5, [r0, #1]
    4bfe:	7005      	strb	r5, [r0, #0]
    4c00:	7085      	strb	r5, [r0, #2]
    4c02:	4b32      	ldr	r3, [pc, #200]	; (4ccc <system_clock_init+0x170>)
    4c04:	4798      	blx	r3
    4c06:	2006      	movs	r0, #6
    4c08:	4f2e      	ldr	r7, [pc, #184]	; (4cc4 <system_clock_init+0x168>)
    4c0a:	47b8      	blx	r7
    4c0c:	4b30      	ldr	r3, [pc, #192]	; (4cd0 <system_clock_init+0x174>)
    4c0e:	4798      	blx	r3
    4c10:	ac01      	add	r4, sp, #4
    4c12:	2601      	movs	r6, #1
    4c14:	9602      	str	r6, [sp, #8]
    4c16:	7065      	strb	r5, [r4, #1]
    4c18:	2306      	movs	r3, #6
    4c1a:	7023      	strb	r3, [r4, #0]
    4c1c:	7225      	strb	r5, [r4, #8]
    4c1e:	7265      	strb	r5, [r4, #9]
    4c20:	0021      	movs	r1, r4
    4c22:	2001      	movs	r0, #1
    4c24:	4b2b      	ldr	r3, [pc, #172]	; (4cd4 <system_clock_init+0x178>)
    4c26:	4699      	mov	r9, r3
    4c28:	4798      	blx	r3
    4c2a:	2001      	movs	r0, #1
    4c2c:	4b2a      	ldr	r3, [pc, #168]	; (4cd8 <system_clock_init+0x17c>)
    4c2e:	4698      	mov	r8, r3
    4c30:	4798      	blx	r3
    4c32:	7065      	strb	r5, [r4, #1]
    4c34:	7265      	strb	r5, [r4, #9]
    4c36:	2304      	movs	r3, #4
    4c38:	7023      	strb	r3, [r4, #0]
    4c3a:	2320      	movs	r3, #32
    4c3c:	6063      	str	r3, [r4, #4]
    4c3e:	7226      	strb	r6, [r4, #8]
    4c40:	0021      	movs	r1, r4
    4c42:	2002      	movs	r0, #2
    4c44:	47c8      	blx	r9
    4c46:	2002      	movs	r0, #2
    4c48:	47c0      	blx	r8
    4c4a:	7026      	strb	r6, [r4, #0]
    4c4c:	0021      	movs	r1, r4
    4c4e:	2000      	movs	r0, #0
    4c50:	4b18      	ldr	r3, [pc, #96]	; (4cb4 <system_clock_init+0x158>)
    4c52:	4798      	blx	r3
    4c54:	2000      	movs	r0, #0
    4c56:	4b21      	ldr	r3, [pc, #132]	; (4cdc <system_clock_init+0x180>)
    4c58:	4798      	blx	r3
    4c5a:	2007      	movs	r0, #7
    4c5c:	47b8      	blx	r7
    4c5e:	4913      	ldr	r1, [pc, #76]	; (4cac <system_clock_init+0x150>)
    4c60:	22d0      	movs	r2, #208	; 0xd0
    4c62:	68cb      	ldr	r3, [r1, #12]
    4c64:	4013      	ands	r3, r2
    4c66:	2bd0      	cmp	r3, #208	; 0xd0
    4c68:	d1fb      	bne.n	4c62 <system_clock_init+0x106>
    4c6a:	4a10      	ldr	r2, [pc, #64]	; (4cac <system_clock_init+0x150>)
    4c6c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    4c6e:	2180      	movs	r1, #128	; 0x80
    4c70:	430b      	orrs	r3, r1
    4c72:	8493      	strh	r3, [r2, #36]	; 0x24
    4c74:	4a1a      	ldr	r2, [pc, #104]	; (4ce0 <system_clock_init+0x184>)
    4c76:	2300      	movs	r3, #0
    4c78:	7213      	strb	r3, [r2, #8]
    4c7a:	7253      	strb	r3, [r2, #9]
    4c7c:	7293      	strb	r3, [r2, #10]
    4c7e:	72d3      	strb	r3, [r2, #11]
    4c80:	a901      	add	r1, sp, #4
    4c82:	2201      	movs	r2, #1
    4c84:	604a      	str	r2, [r1, #4]
    4c86:	704b      	strb	r3, [r1, #1]
    4c88:	720b      	strb	r3, [r1, #8]
    4c8a:	724b      	strb	r3, [r1, #9]
    4c8c:	3307      	adds	r3, #7
    4c8e:	700b      	strb	r3, [r1, #0]
    4c90:	2000      	movs	r0, #0
    4c92:	4b10      	ldr	r3, [pc, #64]	; (4cd4 <system_clock_init+0x178>)
    4c94:	4798      	blx	r3
    4c96:	2000      	movs	r0, #0
    4c98:	4b0f      	ldr	r3, [pc, #60]	; (4cd8 <system_clock_init+0x17c>)
    4c9a:	4798      	blx	r3
    4c9c:	b00d      	add	sp, #52	; 0x34
    4c9e:	bc0c      	pop	{r2, r3}
    4ca0:	4690      	mov	r8, r2
    4ca2:	4699      	mov	r9, r3
    4ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ca6:	3b20      	subs	r3, #32
    4ca8:	e79c      	b.n	4be4 <system_clock_init+0x88>
    4caa:	46c0      	nop			; (mov r8, r8)
    4cac:	40000800 	.word	0x40000800
    4cb0:	41004000 	.word	0x41004000
    4cb4:	00004f1d 	.word	0x00004f1d
    4cb8:	00806024 	.word	0x00806024
    4cbc:	ff80ffff 	.word	0xff80ffff
    4cc0:	000049b9 	.word	0x000049b9
    4cc4:	00004ab5 	.word	0x00004ab5
    4cc8:	00004a35 	.word	0x00004a35
    4ccc:	0000497d 	.word	0x0000497d
    4cd0:	00004ce5 	.word	0x00004ce5
    4cd4:	00004d09 	.word	0x00004d09
    4cd8:	00004dc1 	.word	0x00004dc1
    4cdc:	00004e91 	.word	0x00004e91
    4ce0:	40000400 	.word	0x40000400

00004ce4 <system_gclk_init>:
    4ce4:	4a06      	ldr	r2, [pc, #24]	; (4d00 <system_gclk_init+0x1c>)
    4ce6:	6993      	ldr	r3, [r2, #24]
    4ce8:	2108      	movs	r1, #8
    4cea:	430b      	orrs	r3, r1
    4cec:	6193      	str	r3, [r2, #24]
    4cee:	2201      	movs	r2, #1
    4cf0:	4b04      	ldr	r3, [pc, #16]	; (4d04 <system_gclk_init+0x20>)
    4cf2:	701a      	strb	r2, [r3, #0]
    4cf4:	0019      	movs	r1, r3
    4cf6:	780b      	ldrb	r3, [r1, #0]
    4cf8:	4213      	tst	r3, r2
    4cfa:	d1fc      	bne.n	4cf6 <system_gclk_init+0x12>
    4cfc:	4770      	bx	lr
    4cfe:	46c0      	nop			; (mov r8, r8)
    4d00:	40000400 	.word	0x40000400
    4d04:	40000c00 	.word	0x40000c00

00004d08 <system_gclk_gen_set_config>:
    4d08:	b570      	push	{r4, r5, r6, lr}
    4d0a:	0006      	movs	r6, r0
    4d0c:	0004      	movs	r4, r0
    4d0e:	780d      	ldrb	r5, [r1, #0]
    4d10:	022d      	lsls	r5, r5, #8
    4d12:	4305      	orrs	r5, r0
    4d14:	784b      	ldrb	r3, [r1, #1]
    4d16:	2b00      	cmp	r3, #0
    4d18:	d002      	beq.n	4d20 <system_gclk_gen_set_config+0x18>
    4d1a:	2380      	movs	r3, #128	; 0x80
    4d1c:	02db      	lsls	r3, r3, #11
    4d1e:	431d      	orrs	r5, r3
    4d20:	7a4b      	ldrb	r3, [r1, #9]
    4d22:	2b00      	cmp	r3, #0
    4d24:	d002      	beq.n	4d2c <system_gclk_gen_set_config+0x24>
    4d26:	2380      	movs	r3, #128	; 0x80
    4d28:	031b      	lsls	r3, r3, #12
    4d2a:	431d      	orrs	r5, r3
    4d2c:	6848      	ldr	r0, [r1, #4]
    4d2e:	2801      	cmp	r0, #1
    4d30:	d910      	bls.n	4d54 <system_gclk_gen_set_config+0x4c>
    4d32:	1e43      	subs	r3, r0, #1
    4d34:	4218      	tst	r0, r3
    4d36:	d134      	bne.n	4da2 <system_gclk_gen_set_config+0x9a>
    4d38:	2802      	cmp	r0, #2
    4d3a:	d930      	bls.n	4d9e <system_gclk_gen_set_config+0x96>
    4d3c:	2302      	movs	r3, #2
    4d3e:	2200      	movs	r2, #0
    4d40:	3201      	adds	r2, #1
    4d42:	005b      	lsls	r3, r3, #1
    4d44:	4298      	cmp	r0, r3
    4d46:	d8fb      	bhi.n	4d40 <system_gclk_gen_set_config+0x38>
    4d48:	0212      	lsls	r2, r2, #8
    4d4a:	4332      	orrs	r2, r6
    4d4c:	0014      	movs	r4, r2
    4d4e:	2380      	movs	r3, #128	; 0x80
    4d50:	035b      	lsls	r3, r3, #13
    4d52:	431d      	orrs	r5, r3
    4d54:	7a0b      	ldrb	r3, [r1, #8]
    4d56:	2b00      	cmp	r3, #0
    4d58:	d002      	beq.n	4d60 <system_gclk_gen_set_config+0x58>
    4d5a:	2380      	movs	r3, #128	; 0x80
    4d5c:	039b      	lsls	r3, r3, #14
    4d5e:	431d      	orrs	r5, r3
    4d60:	4a13      	ldr	r2, [pc, #76]	; (4db0 <system_gclk_gen_set_config+0xa8>)
    4d62:	7853      	ldrb	r3, [r2, #1]
    4d64:	b25b      	sxtb	r3, r3
    4d66:	2b00      	cmp	r3, #0
    4d68:	dbfb      	blt.n	4d62 <system_gclk_gen_set_config+0x5a>
    4d6a:	4b12      	ldr	r3, [pc, #72]	; (4db4 <system_gclk_gen_set_config+0xac>)
    4d6c:	4798      	blx	r3
    4d6e:	4b12      	ldr	r3, [pc, #72]	; (4db8 <system_gclk_gen_set_config+0xb0>)
    4d70:	701e      	strb	r6, [r3, #0]
    4d72:	4a0f      	ldr	r2, [pc, #60]	; (4db0 <system_gclk_gen_set_config+0xa8>)
    4d74:	7853      	ldrb	r3, [r2, #1]
    4d76:	b25b      	sxtb	r3, r3
    4d78:	2b00      	cmp	r3, #0
    4d7a:	dbfb      	blt.n	4d74 <system_gclk_gen_set_config+0x6c>
    4d7c:	4b0c      	ldr	r3, [pc, #48]	; (4db0 <system_gclk_gen_set_config+0xa8>)
    4d7e:	609c      	str	r4, [r3, #8]
    4d80:	001a      	movs	r2, r3
    4d82:	7853      	ldrb	r3, [r2, #1]
    4d84:	b25b      	sxtb	r3, r3
    4d86:	2b00      	cmp	r3, #0
    4d88:	dbfb      	blt.n	4d82 <system_gclk_gen_set_config+0x7a>
    4d8a:	4a09      	ldr	r2, [pc, #36]	; (4db0 <system_gclk_gen_set_config+0xa8>)
    4d8c:	6853      	ldr	r3, [r2, #4]
    4d8e:	2180      	movs	r1, #128	; 0x80
    4d90:	0249      	lsls	r1, r1, #9
    4d92:	400b      	ands	r3, r1
    4d94:	431d      	orrs	r5, r3
    4d96:	6055      	str	r5, [r2, #4]
    4d98:	4b08      	ldr	r3, [pc, #32]	; (4dbc <system_gclk_gen_set_config+0xb4>)
    4d9a:	4798      	blx	r3
    4d9c:	bd70      	pop	{r4, r5, r6, pc}
    4d9e:	2200      	movs	r2, #0
    4da0:	e7d2      	b.n	4d48 <system_gclk_gen_set_config+0x40>
    4da2:	0204      	lsls	r4, r0, #8
    4da4:	4334      	orrs	r4, r6
    4da6:	2380      	movs	r3, #128	; 0x80
    4da8:	029b      	lsls	r3, r3, #10
    4daa:	431d      	orrs	r5, r3
    4dac:	e7d2      	b.n	4d54 <system_gclk_gen_set_config+0x4c>
    4dae:	46c0      	nop			; (mov r8, r8)
    4db0:	40000c00 	.word	0x40000c00
    4db4:	00003da9 	.word	0x00003da9
    4db8:	40000c08 	.word	0x40000c08
    4dbc:	00003de9 	.word	0x00003de9

00004dc0 <system_gclk_gen_enable>:
    4dc0:	b510      	push	{r4, lr}
    4dc2:	0004      	movs	r4, r0
    4dc4:	4a0b      	ldr	r2, [pc, #44]	; (4df4 <system_gclk_gen_enable+0x34>)
    4dc6:	7853      	ldrb	r3, [r2, #1]
    4dc8:	b25b      	sxtb	r3, r3
    4dca:	2b00      	cmp	r3, #0
    4dcc:	dbfb      	blt.n	4dc6 <system_gclk_gen_enable+0x6>
    4dce:	4b0a      	ldr	r3, [pc, #40]	; (4df8 <system_gclk_gen_enable+0x38>)
    4dd0:	4798      	blx	r3
    4dd2:	4b0a      	ldr	r3, [pc, #40]	; (4dfc <system_gclk_gen_enable+0x3c>)
    4dd4:	701c      	strb	r4, [r3, #0]
    4dd6:	4a07      	ldr	r2, [pc, #28]	; (4df4 <system_gclk_gen_enable+0x34>)
    4dd8:	7853      	ldrb	r3, [r2, #1]
    4dda:	b25b      	sxtb	r3, r3
    4ddc:	2b00      	cmp	r3, #0
    4dde:	dbfb      	blt.n	4dd8 <system_gclk_gen_enable+0x18>
    4de0:	4a04      	ldr	r2, [pc, #16]	; (4df4 <system_gclk_gen_enable+0x34>)
    4de2:	6851      	ldr	r1, [r2, #4]
    4de4:	2380      	movs	r3, #128	; 0x80
    4de6:	025b      	lsls	r3, r3, #9
    4de8:	430b      	orrs	r3, r1
    4dea:	6053      	str	r3, [r2, #4]
    4dec:	4b04      	ldr	r3, [pc, #16]	; (4e00 <system_gclk_gen_enable+0x40>)
    4dee:	4798      	blx	r3
    4df0:	bd10      	pop	{r4, pc}
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	40000c00 	.word	0x40000c00
    4df8:	00003da9 	.word	0x00003da9
    4dfc:	40000c04 	.word	0x40000c04
    4e00:	00003de9 	.word	0x00003de9

00004e04 <system_gclk_gen_get_hz>:
    4e04:	b570      	push	{r4, r5, r6, lr}
    4e06:	0004      	movs	r4, r0
    4e08:	4a1a      	ldr	r2, [pc, #104]	; (4e74 <system_gclk_gen_get_hz+0x70>)
    4e0a:	7853      	ldrb	r3, [r2, #1]
    4e0c:	b25b      	sxtb	r3, r3
    4e0e:	2b00      	cmp	r3, #0
    4e10:	dbfb      	blt.n	4e0a <system_gclk_gen_get_hz+0x6>
    4e12:	4b19      	ldr	r3, [pc, #100]	; (4e78 <system_gclk_gen_get_hz+0x74>)
    4e14:	4798      	blx	r3
    4e16:	4b19      	ldr	r3, [pc, #100]	; (4e7c <system_gclk_gen_get_hz+0x78>)
    4e18:	701c      	strb	r4, [r3, #0]
    4e1a:	4a16      	ldr	r2, [pc, #88]	; (4e74 <system_gclk_gen_get_hz+0x70>)
    4e1c:	7853      	ldrb	r3, [r2, #1]
    4e1e:	b25b      	sxtb	r3, r3
    4e20:	2b00      	cmp	r3, #0
    4e22:	dbfb      	blt.n	4e1c <system_gclk_gen_get_hz+0x18>
    4e24:	4e13      	ldr	r6, [pc, #76]	; (4e74 <system_gclk_gen_get_hz+0x70>)
    4e26:	6870      	ldr	r0, [r6, #4]
    4e28:	04c0      	lsls	r0, r0, #19
    4e2a:	0ec0      	lsrs	r0, r0, #27
    4e2c:	4b14      	ldr	r3, [pc, #80]	; (4e80 <system_gclk_gen_get_hz+0x7c>)
    4e2e:	4798      	blx	r3
    4e30:	0005      	movs	r5, r0
    4e32:	4b12      	ldr	r3, [pc, #72]	; (4e7c <system_gclk_gen_get_hz+0x78>)
    4e34:	701c      	strb	r4, [r3, #0]
    4e36:	6876      	ldr	r6, [r6, #4]
    4e38:	02f6      	lsls	r6, r6, #11
    4e3a:	0ff6      	lsrs	r6, r6, #31
    4e3c:	4b11      	ldr	r3, [pc, #68]	; (4e84 <system_gclk_gen_get_hz+0x80>)
    4e3e:	701c      	strb	r4, [r3, #0]
    4e40:	4a0c      	ldr	r2, [pc, #48]	; (4e74 <system_gclk_gen_get_hz+0x70>)
    4e42:	7853      	ldrb	r3, [r2, #1]
    4e44:	b25b      	sxtb	r3, r3
    4e46:	2b00      	cmp	r3, #0
    4e48:	dbfb      	blt.n	4e42 <system_gclk_gen_get_hz+0x3e>
    4e4a:	4b0a      	ldr	r3, [pc, #40]	; (4e74 <system_gclk_gen_get_hz+0x70>)
    4e4c:	689c      	ldr	r4, [r3, #8]
    4e4e:	0224      	lsls	r4, r4, #8
    4e50:	0c24      	lsrs	r4, r4, #16
    4e52:	4b0d      	ldr	r3, [pc, #52]	; (4e88 <system_gclk_gen_get_hz+0x84>)
    4e54:	4798      	blx	r3
    4e56:	2e00      	cmp	r6, #0
    4e58:	d107      	bne.n	4e6a <system_gclk_gen_get_hz+0x66>
    4e5a:	2c01      	cmp	r4, #1
    4e5c:	d907      	bls.n	4e6e <system_gclk_gen_get_hz+0x6a>
    4e5e:	0021      	movs	r1, r4
    4e60:	0028      	movs	r0, r5
    4e62:	4b0a      	ldr	r3, [pc, #40]	; (4e8c <system_gclk_gen_get_hz+0x88>)
    4e64:	4798      	blx	r3
    4e66:	0005      	movs	r5, r0
    4e68:	e001      	b.n	4e6e <system_gclk_gen_get_hz+0x6a>
    4e6a:	3401      	adds	r4, #1
    4e6c:	40e5      	lsrs	r5, r4
    4e6e:	0028      	movs	r0, r5
    4e70:	bd70      	pop	{r4, r5, r6, pc}
    4e72:	46c0      	nop			; (mov r8, r8)
    4e74:	40000c00 	.word	0x40000c00
    4e78:	00003da9 	.word	0x00003da9
    4e7c:	40000c04 	.word	0x40000c04
    4e80:	000048ed 	.word	0x000048ed
    4e84:	40000c08 	.word	0x40000c08
    4e88:	00003de9 	.word	0x00003de9
    4e8c:	00007281 	.word	0x00007281

00004e90 <system_gclk_chan_enable>:
    4e90:	b510      	push	{r4, lr}
    4e92:	0004      	movs	r4, r0
    4e94:	4b06      	ldr	r3, [pc, #24]	; (4eb0 <system_gclk_chan_enable+0x20>)
    4e96:	4798      	blx	r3
    4e98:	4b06      	ldr	r3, [pc, #24]	; (4eb4 <system_gclk_chan_enable+0x24>)
    4e9a:	701c      	strb	r4, [r3, #0]
    4e9c:	4a06      	ldr	r2, [pc, #24]	; (4eb8 <system_gclk_chan_enable+0x28>)
    4e9e:	8853      	ldrh	r3, [r2, #2]
    4ea0:	2180      	movs	r1, #128	; 0x80
    4ea2:	01c9      	lsls	r1, r1, #7
    4ea4:	430b      	orrs	r3, r1
    4ea6:	8053      	strh	r3, [r2, #2]
    4ea8:	4b04      	ldr	r3, [pc, #16]	; (4ebc <system_gclk_chan_enable+0x2c>)
    4eaa:	4798      	blx	r3
    4eac:	bd10      	pop	{r4, pc}
    4eae:	46c0      	nop			; (mov r8, r8)
    4eb0:	00003da9 	.word	0x00003da9
    4eb4:	40000c02 	.word	0x40000c02
    4eb8:	40000c00 	.word	0x40000c00
    4ebc:	00003de9 	.word	0x00003de9

00004ec0 <system_gclk_chan_disable>:
    4ec0:	b510      	push	{r4, lr}
    4ec2:	0004      	movs	r4, r0
    4ec4:	4b0f      	ldr	r3, [pc, #60]	; (4f04 <system_gclk_chan_disable+0x44>)
    4ec6:	4798      	blx	r3
    4ec8:	4b0f      	ldr	r3, [pc, #60]	; (4f08 <system_gclk_chan_disable+0x48>)
    4eca:	701c      	strb	r4, [r3, #0]
    4ecc:	4a0f      	ldr	r2, [pc, #60]	; (4f0c <system_gclk_chan_disable+0x4c>)
    4ece:	8853      	ldrh	r3, [r2, #2]
    4ed0:	051b      	lsls	r3, r3, #20
    4ed2:	0f18      	lsrs	r0, r3, #28
    4ed4:	8853      	ldrh	r3, [r2, #2]
    4ed6:	490e      	ldr	r1, [pc, #56]	; (4f10 <system_gclk_chan_disable+0x50>)
    4ed8:	400b      	ands	r3, r1
    4eda:	8053      	strh	r3, [r2, #2]
    4edc:	8853      	ldrh	r3, [r2, #2]
    4ede:	490d      	ldr	r1, [pc, #52]	; (4f14 <system_gclk_chan_disable+0x54>)
    4ee0:	400b      	ands	r3, r1
    4ee2:	8053      	strh	r3, [r2, #2]
    4ee4:	0011      	movs	r1, r2
    4ee6:	2280      	movs	r2, #128	; 0x80
    4ee8:	01d2      	lsls	r2, r2, #7
    4eea:	884b      	ldrh	r3, [r1, #2]
    4eec:	4213      	tst	r3, r2
    4eee:	d1fc      	bne.n	4eea <system_gclk_chan_disable+0x2a>
    4ef0:	4906      	ldr	r1, [pc, #24]	; (4f0c <system_gclk_chan_disable+0x4c>)
    4ef2:	884a      	ldrh	r2, [r1, #2]
    4ef4:	0203      	lsls	r3, r0, #8
    4ef6:	4806      	ldr	r0, [pc, #24]	; (4f10 <system_gclk_chan_disable+0x50>)
    4ef8:	4002      	ands	r2, r0
    4efa:	4313      	orrs	r3, r2
    4efc:	804b      	strh	r3, [r1, #2]
    4efe:	4b06      	ldr	r3, [pc, #24]	; (4f18 <system_gclk_chan_disable+0x58>)
    4f00:	4798      	blx	r3
    4f02:	bd10      	pop	{r4, pc}
    4f04:	00003da9 	.word	0x00003da9
    4f08:	40000c02 	.word	0x40000c02
    4f0c:	40000c00 	.word	0x40000c00
    4f10:	fffff0ff 	.word	0xfffff0ff
    4f14:	ffffbfff 	.word	0xffffbfff
    4f18:	00003de9 	.word	0x00003de9

00004f1c <system_gclk_chan_set_config>:
    4f1c:	b510      	push	{r4, lr}
    4f1e:	780c      	ldrb	r4, [r1, #0]
    4f20:	0224      	lsls	r4, r4, #8
    4f22:	4304      	orrs	r4, r0
    4f24:	4b02      	ldr	r3, [pc, #8]	; (4f30 <system_gclk_chan_set_config+0x14>)
    4f26:	4798      	blx	r3
    4f28:	b2a4      	uxth	r4, r4
    4f2a:	4b02      	ldr	r3, [pc, #8]	; (4f34 <system_gclk_chan_set_config+0x18>)
    4f2c:	805c      	strh	r4, [r3, #2]
    4f2e:	bd10      	pop	{r4, pc}
    4f30:	00004ec1 	.word	0x00004ec1
    4f34:	40000c00 	.word	0x40000c00

00004f38 <system_gclk_chan_get_hz>:
    4f38:	b510      	push	{r4, lr}
    4f3a:	0004      	movs	r4, r0
    4f3c:	4b06      	ldr	r3, [pc, #24]	; (4f58 <system_gclk_chan_get_hz+0x20>)
    4f3e:	4798      	blx	r3
    4f40:	4b06      	ldr	r3, [pc, #24]	; (4f5c <system_gclk_chan_get_hz+0x24>)
    4f42:	701c      	strb	r4, [r3, #0]
    4f44:	4b06      	ldr	r3, [pc, #24]	; (4f60 <system_gclk_chan_get_hz+0x28>)
    4f46:	885c      	ldrh	r4, [r3, #2]
    4f48:	0524      	lsls	r4, r4, #20
    4f4a:	0f24      	lsrs	r4, r4, #28
    4f4c:	4b05      	ldr	r3, [pc, #20]	; (4f64 <system_gclk_chan_get_hz+0x2c>)
    4f4e:	4798      	blx	r3
    4f50:	0020      	movs	r0, r4
    4f52:	4b05      	ldr	r3, [pc, #20]	; (4f68 <system_gclk_chan_get_hz+0x30>)
    4f54:	4798      	blx	r3
    4f56:	bd10      	pop	{r4, pc}
    4f58:	00003da9 	.word	0x00003da9
    4f5c:	40000c02 	.word	0x40000c02
    4f60:	40000c00 	.word	0x40000c00
    4f64:	00003de9 	.word	0x00003de9
    4f68:	00004e05 	.word	0x00004e05

00004f6c <_system_pinmux_config>:
    4f6c:	b530      	push	{r4, r5, lr}
    4f6e:	78d3      	ldrb	r3, [r2, #3]
    4f70:	2b00      	cmp	r3, #0
    4f72:	d135      	bne.n	4fe0 <_system_pinmux_config+0x74>
    4f74:	7813      	ldrb	r3, [r2, #0]
    4f76:	2b80      	cmp	r3, #128	; 0x80
    4f78:	d029      	beq.n	4fce <_system_pinmux_config+0x62>
    4f7a:	061b      	lsls	r3, r3, #24
    4f7c:	2480      	movs	r4, #128	; 0x80
    4f7e:	0264      	lsls	r4, r4, #9
    4f80:	4323      	orrs	r3, r4
    4f82:	7854      	ldrb	r4, [r2, #1]
    4f84:	2502      	movs	r5, #2
    4f86:	43ac      	bics	r4, r5
    4f88:	d106      	bne.n	4f98 <_system_pinmux_config+0x2c>
    4f8a:	7894      	ldrb	r4, [r2, #2]
    4f8c:	2c00      	cmp	r4, #0
    4f8e:	d120      	bne.n	4fd2 <_system_pinmux_config+0x66>
    4f90:	2480      	movs	r4, #128	; 0x80
    4f92:	02a4      	lsls	r4, r4, #10
    4f94:	4323      	orrs	r3, r4
    4f96:	6041      	str	r1, [r0, #4]
    4f98:	7854      	ldrb	r4, [r2, #1]
    4f9a:	3c01      	subs	r4, #1
    4f9c:	2c01      	cmp	r4, #1
    4f9e:	d91c      	bls.n	4fda <_system_pinmux_config+0x6e>
    4fa0:	040d      	lsls	r5, r1, #16
    4fa2:	0c2d      	lsrs	r5, r5, #16
    4fa4:	24a0      	movs	r4, #160	; 0xa0
    4fa6:	05e4      	lsls	r4, r4, #23
    4fa8:	432c      	orrs	r4, r5
    4faa:	431c      	orrs	r4, r3
    4fac:	6284      	str	r4, [r0, #40]	; 0x28
    4fae:	0c0d      	lsrs	r5, r1, #16
    4fb0:	24d0      	movs	r4, #208	; 0xd0
    4fb2:	0624      	lsls	r4, r4, #24
    4fb4:	432c      	orrs	r4, r5
    4fb6:	431c      	orrs	r4, r3
    4fb8:	6284      	str	r4, [r0, #40]	; 0x28
    4fba:	78d4      	ldrb	r4, [r2, #3]
    4fbc:	2c00      	cmp	r4, #0
    4fbe:	d122      	bne.n	5006 <_system_pinmux_config+0x9a>
    4fc0:	035b      	lsls	r3, r3, #13
    4fc2:	d51c      	bpl.n	4ffe <_system_pinmux_config+0x92>
    4fc4:	7893      	ldrb	r3, [r2, #2]
    4fc6:	2b01      	cmp	r3, #1
    4fc8:	d01e      	beq.n	5008 <_system_pinmux_config+0x9c>
    4fca:	6141      	str	r1, [r0, #20]
    4fcc:	e017      	b.n	4ffe <_system_pinmux_config+0x92>
    4fce:	2300      	movs	r3, #0
    4fd0:	e7d7      	b.n	4f82 <_system_pinmux_config+0x16>
    4fd2:	24c0      	movs	r4, #192	; 0xc0
    4fd4:	02e4      	lsls	r4, r4, #11
    4fd6:	4323      	orrs	r3, r4
    4fd8:	e7dd      	b.n	4f96 <_system_pinmux_config+0x2a>
    4fda:	4c0d      	ldr	r4, [pc, #52]	; (5010 <_system_pinmux_config+0xa4>)
    4fdc:	4023      	ands	r3, r4
    4fde:	e7df      	b.n	4fa0 <_system_pinmux_config+0x34>
    4fe0:	6041      	str	r1, [r0, #4]
    4fe2:	040c      	lsls	r4, r1, #16
    4fe4:	0c24      	lsrs	r4, r4, #16
    4fe6:	23a0      	movs	r3, #160	; 0xa0
    4fe8:	05db      	lsls	r3, r3, #23
    4fea:	4323      	orrs	r3, r4
    4fec:	6283      	str	r3, [r0, #40]	; 0x28
    4fee:	0c0c      	lsrs	r4, r1, #16
    4ff0:	23d0      	movs	r3, #208	; 0xd0
    4ff2:	061b      	lsls	r3, r3, #24
    4ff4:	4323      	orrs	r3, r4
    4ff6:	6283      	str	r3, [r0, #40]	; 0x28
    4ff8:	78d3      	ldrb	r3, [r2, #3]
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d103      	bne.n	5006 <_system_pinmux_config+0x9a>
    4ffe:	7853      	ldrb	r3, [r2, #1]
    5000:	3b01      	subs	r3, #1
    5002:	2b01      	cmp	r3, #1
    5004:	d902      	bls.n	500c <_system_pinmux_config+0xa0>
    5006:	bd30      	pop	{r4, r5, pc}
    5008:	6181      	str	r1, [r0, #24]
    500a:	e7f8      	b.n	4ffe <_system_pinmux_config+0x92>
    500c:	6081      	str	r1, [r0, #8]
    500e:	e7fa      	b.n	5006 <_system_pinmux_config+0x9a>
    5010:	fffbffff 	.word	0xfffbffff

00005014 <system_pinmux_pin_set_config>:
    5014:	b510      	push	{r4, lr}
    5016:	000a      	movs	r2, r1
    5018:	09c1      	lsrs	r1, r0, #7
    501a:	2300      	movs	r3, #0
    501c:	2900      	cmp	r1, #0
    501e:	d104      	bne.n	502a <system_pinmux_pin_set_config+0x16>
    5020:	0943      	lsrs	r3, r0, #5
    5022:	01db      	lsls	r3, r3, #7
    5024:	4905      	ldr	r1, [pc, #20]	; (503c <system_pinmux_pin_set_config+0x28>)
    5026:	468c      	mov	ip, r1
    5028:	4463      	add	r3, ip
    502a:	241f      	movs	r4, #31
    502c:	4020      	ands	r0, r4
    502e:	2101      	movs	r1, #1
    5030:	4081      	lsls	r1, r0
    5032:	0018      	movs	r0, r3
    5034:	4b02      	ldr	r3, [pc, #8]	; (5040 <system_pinmux_pin_set_config+0x2c>)
    5036:	4798      	blx	r3
    5038:	bd10      	pop	{r4, pc}
    503a:	46c0      	nop			; (mov r8, r8)
    503c:	41004400 	.word	0x41004400
    5040:	00004f6d 	.word	0x00004f6d

00005044 <_system_dummy_init>:
    5044:	4770      	bx	lr
	...

00005048 <system_init>:
    5048:	b510      	push	{r4, lr}
    504a:	4b04      	ldr	r3, [pc, #16]	; (505c <system_init+0x14>)
    504c:	4798      	blx	r3
    504e:	4b04      	ldr	r3, [pc, #16]	; (5060 <system_init+0x18>)
    5050:	4798      	blx	r3
    5052:	4b04      	ldr	r3, [pc, #16]	; (5064 <system_init+0x1c>)
    5054:	4798      	blx	r3
    5056:	4b04      	ldr	r3, [pc, #16]	; (5068 <system_init+0x20>)
    5058:	4798      	blx	r3
    505a:	bd10      	pop	{r4, pc}
    505c:	00004b5d 	.word	0x00004b5d
    5060:	00005045 	.word	0x00005045
    5064:	00003ef1 	.word	0x00003ef1
    5068:	00005045 	.word	0x00005045

0000506c <tc_register_callback>:
    506c:	1c93      	adds	r3, r2, #2
    506e:	009b      	lsls	r3, r3, #2
    5070:	5019      	str	r1, [r3, r0]
    5072:	2a02      	cmp	r2, #2
    5074:	d009      	beq.n	508a <tc_register_callback+0x1e>
    5076:	2a03      	cmp	r2, #3
    5078:	d00c      	beq.n	5094 <tc_register_callback+0x28>
    507a:	2301      	movs	r3, #1
    507c:	4093      	lsls	r3, r2
    507e:	001a      	movs	r2, r3
    5080:	7e03      	ldrb	r3, [r0, #24]
    5082:	4313      	orrs	r3, r2
    5084:	7603      	strb	r3, [r0, #24]
    5086:	2000      	movs	r0, #0
    5088:	4770      	bx	lr
    508a:	7e03      	ldrb	r3, [r0, #24]
    508c:	2210      	movs	r2, #16
    508e:	4313      	orrs	r3, r2
    5090:	7603      	strb	r3, [r0, #24]
    5092:	e7f8      	b.n	5086 <tc_register_callback+0x1a>
    5094:	7e03      	ldrb	r3, [r0, #24]
    5096:	2220      	movs	r2, #32
    5098:	4313      	orrs	r3, r2
    509a:	7603      	strb	r3, [r0, #24]
    509c:	e7f3      	b.n	5086 <tc_register_callback+0x1a>
	...

000050a0 <_tc_interrupt_handler>:
    50a0:	b570      	push	{r4, r5, r6, lr}
    50a2:	0080      	lsls	r0, r0, #2
    50a4:	4b16      	ldr	r3, [pc, #88]	; (5100 <_tc_interrupt_handler+0x60>)
    50a6:	58c4      	ldr	r4, [r0, r3]
    50a8:	6823      	ldr	r3, [r4, #0]
    50aa:	7b9d      	ldrb	r5, [r3, #14]
    50ac:	7e22      	ldrb	r2, [r4, #24]
    50ae:	7e63      	ldrb	r3, [r4, #25]
    50b0:	4013      	ands	r3, r2
    50b2:	401d      	ands	r5, r3
    50b4:	07eb      	lsls	r3, r5, #31
    50b6:	d406      	bmi.n	50c6 <_tc_interrupt_handler+0x26>
    50b8:	07ab      	lsls	r3, r5, #30
    50ba:	d40b      	bmi.n	50d4 <_tc_interrupt_handler+0x34>
    50bc:	06eb      	lsls	r3, r5, #27
    50be:	d410      	bmi.n	50e2 <_tc_interrupt_handler+0x42>
    50c0:	06ab      	lsls	r3, r5, #26
    50c2:	d415      	bmi.n	50f0 <_tc_interrupt_handler+0x50>
    50c4:	bd70      	pop	{r4, r5, r6, pc}
    50c6:	0020      	movs	r0, r4
    50c8:	68a3      	ldr	r3, [r4, #8]
    50ca:	4798      	blx	r3
    50cc:	2301      	movs	r3, #1
    50ce:	6822      	ldr	r2, [r4, #0]
    50d0:	7393      	strb	r3, [r2, #14]
    50d2:	e7f1      	b.n	50b8 <_tc_interrupt_handler+0x18>
    50d4:	0020      	movs	r0, r4
    50d6:	68e3      	ldr	r3, [r4, #12]
    50d8:	4798      	blx	r3
    50da:	2302      	movs	r3, #2
    50dc:	6822      	ldr	r2, [r4, #0]
    50de:	7393      	strb	r3, [r2, #14]
    50e0:	e7ec      	b.n	50bc <_tc_interrupt_handler+0x1c>
    50e2:	0020      	movs	r0, r4
    50e4:	6923      	ldr	r3, [r4, #16]
    50e6:	4798      	blx	r3
    50e8:	2310      	movs	r3, #16
    50ea:	6822      	ldr	r2, [r4, #0]
    50ec:	7393      	strb	r3, [r2, #14]
    50ee:	e7e7      	b.n	50c0 <_tc_interrupt_handler+0x20>
    50f0:	0020      	movs	r0, r4
    50f2:	6963      	ldr	r3, [r4, #20]
    50f4:	4798      	blx	r3
    50f6:	6823      	ldr	r3, [r4, #0]
    50f8:	2220      	movs	r2, #32
    50fa:	739a      	strb	r2, [r3, #14]
    50fc:	e7e2      	b.n	50c4 <_tc_interrupt_handler+0x24>
    50fe:	46c0      	nop			; (mov r8, r8)
    5100:	20000b2c 	.word	0x20000b2c

00005104 <TC3_Handler>:
    5104:	b510      	push	{r4, lr}
    5106:	2000      	movs	r0, #0
    5108:	4b01      	ldr	r3, [pc, #4]	; (5110 <TC3_Handler+0xc>)
    510a:	4798      	blx	r3
    510c:	bd10      	pop	{r4, pc}
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	000050a1 	.word	0x000050a1

00005114 <TC4_Handler>:
    5114:	b510      	push	{r4, lr}
    5116:	2001      	movs	r0, #1
    5118:	4b01      	ldr	r3, [pc, #4]	; (5120 <TC4_Handler+0xc>)
    511a:	4798      	blx	r3
    511c:	bd10      	pop	{r4, pc}
    511e:	46c0      	nop			; (mov r8, r8)
    5120:	000050a1 	.word	0x000050a1

00005124 <TC5_Handler>:
    5124:	b510      	push	{r4, lr}
    5126:	2002      	movs	r0, #2
    5128:	4b01      	ldr	r3, [pc, #4]	; (5130 <TC5_Handler+0xc>)
    512a:	4798      	blx	r3
    512c:	bd10      	pop	{r4, pc}
    512e:	46c0      	nop			; (mov r8, r8)
    5130:	000050a1 	.word	0x000050a1

00005134 <_tc_get_inst_index>:
    5134:	b530      	push	{r4, r5, lr}
    5136:	b085      	sub	sp, #20
    5138:	aa01      	add	r2, sp, #4
    513a:	4b0b      	ldr	r3, [pc, #44]	; (5168 <_tc_get_inst_index+0x34>)
    513c:	cb32      	ldmia	r3!, {r1, r4, r5}
    513e:	c232      	stmia	r2!, {r1, r4, r5}
    5140:	9b01      	ldr	r3, [sp, #4]
    5142:	4298      	cmp	r0, r3
    5144:	d00d      	beq.n	5162 <_tc_get_inst_index+0x2e>
    5146:	9b02      	ldr	r3, [sp, #8]
    5148:	4298      	cmp	r0, r3
    514a:	d008      	beq.n	515e <_tc_get_inst_index+0x2a>
    514c:	2300      	movs	r3, #0
    514e:	9a03      	ldr	r2, [sp, #12]
    5150:	4282      	cmp	r2, r0
    5152:	d002      	beq.n	515a <_tc_get_inst_index+0x26>
    5154:	0018      	movs	r0, r3
    5156:	b005      	add	sp, #20
    5158:	bd30      	pop	{r4, r5, pc}
    515a:	3302      	adds	r3, #2
    515c:	e002      	b.n	5164 <_tc_get_inst_index+0x30>
    515e:	2301      	movs	r3, #1
    5160:	e000      	b.n	5164 <_tc_get_inst_index+0x30>
    5162:	2300      	movs	r3, #0
    5164:	b2db      	uxtb	r3, r3
    5166:	e7f5      	b.n	5154 <_tc_get_inst_index+0x20>
    5168:	000096d4 	.word	0x000096d4

0000516c <tc_init>:
    516c:	b5f0      	push	{r4, r5, r6, r7, lr}
    516e:	b087      	sub	sp, #28
    5170:	0004      	movs	r4, r0
    5172:	000d      	movs	r5, r1
    5174:	0016      	movs	r6, r2
    5176:	0008      	movs	r0, r1
    5178:	4b85      	ldr	r3, [pc, #532]	; (5390 <tc_init+0x224>)
    517a:	4798      	blx	r3
    517c:	0007      	movs	r7, r0
    517e:	ab05      	add	r3, sp, #20
    5180:	221b      	movs	r2, #27
    5182:	701a      	strb	r2, [r3, #0]
    5184:	3201      	adds	r2, #1
    5186:	705a      	strb	r2, [r3, #1]
    5188:	709a      	strb	r2, [r3, #2]
    518a:	ab03      	add	r3, sp, #12
    518c:	2280      	movs	r2, #128	; 0x80
    518e:	0112      	lsls	r2, r2, #4
    5190:	801a      	strh	r2, [r3, #0]
    5192:	2280      	movs	r2, #128	; 0x80
    5194:	0152      	lsls	r2, r2, #5
    5196:	805a      	strh	r2, [r3, #2]
    5198:	2280      	movs	r2, #128	; 0x80
    519a:	0192      	lsls	r2, r2, #6
    519c:	809a      	strh	r2, [r3, #4]
    519e:	2300      	movs	r3, #0
    51a0:	60a3      	str	r3, [r4, #8]
    51a2:	60e3      	str	r3, [r4, #12]
    51a4:	6123      	str	r3, [r4, #16]
    51a6:	6163      	str	r3, [r4, #20]
    51a8:	7623      	strb	r3, [r4, #24]
    51aa:	7663      	strb	r3, [r4, #25]
    51ac:	0082      	lsls	r2, r0, #2
    51ae:	4b79      	ldr	r3, [pc, #484]	; (5394 <tc_init+0x228>)
    51b0:	50d4      	str	r4, [r2, r3]
    51b2:	6025      	str	r5, [r4, #0]
    51b4:	78b3      	ldrb	r3, [r6, #2]
    51b6:	2b08      	cmp	r3, #8
    51b8:	d006      	beq.n	51c8 <tc_init+0x5c>
    51ba:	7123      	strb	r3, [r4, #4]
    51bc:	882b      	ldrh	r3, [r5, #0]
    51be:	2005      	movs	r0, #5
    51c0:	07db      	lsls	r3, r3, #31
    51c2:	d505      	bpl.n	51d0 <tc_init+0x64>
    51c4:	b007      	add	sp, #28
    51c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51c8:	2017      	movs	r0, #23
    51ca:	07fa      	lsls	r2, r7, #31
    51cc:	d5fa      	bpl.n	51c4 <tc_init+0x58>
    51ce:	e7f4      	b.n	51ba <tc_init+0x4e>
    51d0:	7beb      	ldrb	r3, [r5, #15]
    51d2:	3017      	adds	r0, #23
    51d4:	06db      	lsls	r3, r3, #27
    51d6:	d4f5      	bmi.n	51c4 <tc_init+0x58>
    51d8:	882b      	ldrh	r3, [r5, #0]
    51da:	079b      	lsls	r3, r3, #30
    51dc:	d4f2      	bmi.n	51c4 <tc_init+0x58>
    51de:	7c33      	ldrb	r3, [r6, #16]
    51e0:	2b00      	cmp	r3, #0
    51e2:	d179      	bne.n	52d8 <tc_init+0x16c>
    51e4:	7f33      	ldrb	r3, [r6, #28]
    51e6:	2b00      	cmp	r3, #0
    51e8:	d000      	beq.n	51ec <tc_init+0x80>
    51ea:	e081      	b.n	52f0 <tc_init+0x184>
    51ec:	496a      	ldr	r1, [pc, #424]	; (5398 <tc_init+0x22c>)
    51ee:	6a08      	ldr	r0, [r1, #32]
    51f0:	007a      	lsls	r2, r7, #1
    51f2:	ab03      	add	r3, sp, #12
    51f4:	5ad3      	ldrh	r3, [r2, r3]
    51f6:	4303      	orrs	r3, r0
    51f8:	620b      	str	r3, [r1, #32]
    51fa:	78b3      	ldrb	r3, [r6, #2]
    51fc:	2b08      	cmp	r3, #8
    51fe:	d100      	bne.n	5202 <tc_init+0x96>
    5200:	e086      	b.n	5310 <tc_init+0x1a4>
    5202:	a901      	add	r1, sp, #4
    5204:	7833      	ldrb	r3, [r6, #0]
    5206:	700b      	strb	r3, [r1, #0]
    5208:	ab05      	add	r3, sp, #20
    520a:	5ddf      	ldrb	r7, [r3, r7]
    520c:	0038      	movs	r0, r7
    520e:	4b63      	ldr	r3, [pc, #396]	; (539c <tc_init+0x230>)
    5210:	4798      	blx	r3
    5212:	0038      	movs	r0, r7
    5214:	4b62      	ldr	r3, [pc, #392]	; (53a0 <tc_init+0x234>)
    5216:	4798      	blx	r3
    5218:	8931      	ldrh	r1, [r6, #8]
    521a:	88b3      	ldrh	r3, [r6, #4]
    521c:	430b      	orrs	r3, r1
    521e:	78b1      	ldrb	r1, [r6, #2]
    5220:	79b2      	ldrb	r2, [r6, #6]
    5222:	4311      	orrs	r1, r2
    5224:	4319      	orrs	r1, r3
    5226:	7873      	ldrb	r3, [r6, #1]
    5228:	2b00      	cmp	r3, #0
    522a:	d002      	beq.n	5232 <tc_init+0xc6>
    522c:	2380      	movs	r3, #128	; 0x80
    522e:	011b      	lsls	r3, r3, #4
    5230:	4319      	orrs	r1, r3
    5232:	6822      	ldr	r2, [r4, #0]
    5234:	7bd3      	ldrb	r3, [r2, #15]
    5236:	b25b      	sxtb	r3, r3
    5238:	2b00      	cmp	r3, #0
    523a:	dbfb      	blt.n	5234 <tc_init+0xc8>
    523c:	8029      	strh	r1, [r5, #0]
    523e:	7b71      	ldrb	r1, [r6, #13]
    5240:	1e4b      	subs	r3, r1, #1
    5242:	4199      	sbcs	r1, r3
    5244:	0089      	lsls	r1, r1, #2
    5246:	7bb3      	ldrb	r3, [r6, #14]
    5248:	2b00      	cmp	r3, #0
    524a:	d001      	beq.n	5250 <tc_init+0xe4>
    524c:	2301      	movs	r3, #1
    524e:	4319      	orrs	r1, r3
    5250:	6822      	ldr	r2, [r4, #0]
    5252:	7bd3      	ldrb	r3, [r2, #15]
    5254:	b25b      	sxtb	r3, r3
    5256:	2b00      	cmp	r3, #0
    5258:	dbfb      	blt.n	5252 <tc_init+0xe6>
    525a:	23ff      	movs	r3, #255	; 0xff
    525c:	712b      	strb	r3, [r5, #4]
    525e:	2900      	cmp	r1, #0
    5260:	d005      	beq.n	526e <tc_init+0x102>
    5262:	6822      	ldr	r2, [r4, #0]
    5264:	7bd3      	ldrb	r3, [r2, #15]
    5266:	b25b      	sxtb	r3, r3
    5268:	2b00      	cmp	r3, #0
    526a:	dbfb      	blt.n	5264 <tc_init+0xf8>
    526c:	7169      	strb	r1, [r5, #5]
    526e:	7ab1      	ldrb	r1, [r6, #10]
    5270:	7af3      	ldrb	r3, [r6, #11]
    5272:	2b00      	cmp	r3, #0
    5274:	d001      	beq.n	527a <tc_init+0x10e>
    5276:	2310      	movs	r3, #16
    5278:	4319      	orrs	r1, r3
    527a:	7b33      	ldrb	r3, [r6, #12]
    527c:	2b00      	cmp	r3, #0
    527e:	d001      	beq.n	5284 <tc_init+0x118>
    5280:	2320      	movs	r3, #32
    5282:	4319      	orrs	r1, r3
    5284:	6822      	ldr	r2, [r4, #0]
    5286:	7bd3      	ldrb	r3, [r2, #15]
    5288:	b25b      	sxtb	r3, r3
    528a:	2b00      	cmp	r3, #0
    528c:	dbfb      	blt.n	5286 <tc_init+0x11a>
    528e:	71a9      	strb	r1, [r5, #6]
    5290:	6822      	ldr	r2, [r4, #0]
    5292:	7bd3      	ldrb	r3, [r2, #15]
    5294:	b25b      	sxtb	r3, r3
    5296:	2b00      	cmp	r3, #0
    5298:	dbfb      	blt.n	5292 <tc_init+0x126>
    529a:	7923      	ldrb	r3, [r4, #4]
    529c:	2b04      	cmp	r3, #4
    529e:	d03f      	beq.n	5320 <tc_init+0x1b4>
    52a0:	2b08      	cmp	r3, #8
    52a2:	d05e      	beq.n	5362 <tc_init+0x1f6>
    52a4:	2017      	movs	r0, #23
    52a6:	2b00      	cmp	r3, #0
    52a8:	d000      	beq.n	52ac <tc_init+0x140>
    52aa:	e78b      	b.n	51c4 <tc_init+0x58>
    52ac:	7bd3      	ldrb	r3, [r2, #15]
    52ae:	b25b      	sxtb	r3, r3
    52b0:	2b00      	cmp	r3, #0
    52b2:	dbfb      	blt.n	52ac <tc_init+0x140>
    52b4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    52b6:	822b      	strh	r3, [r5, #16]
    52b8:	6822      	ldr	r2, [r4, #0]
    52ba:	7bd3      	ldrb	r3, [r2, #15]
    52bc:	b25b      	sxtb	r3, r3
    52be:	2b00      	cmp	r3, #0
    52c0:	dbfb      	blt.n	52ba <tc_init+0x14e>
    52c2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    52c4:	832b      	strh	r3, [r5, #24]
    52c6:	6822      	ldr	r2, [r4, #0]
    52c8:	7bd3      	ldrb	r3, [r2, #15]
    52ca:	b25b      	sxtb	r3, r3
    52cc:	2b00      	cmp	r3, #0
    52ce:	dbfb      	blt.n	52c8 <tc_init+0x15c>
    52d0:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
    52d2:	836b      	strh	r3, [r5, #26]
    52d4:	2000      	movs	r0, #0
    52d6:	e775      	b.n	51c4 <tc_init+0x58>
    52d8:	a902      	add	r1, sp, #8
    52da:	2301      	movs	r3, #1
    52dc:	708b      	strb	r3, [r1, #2]
    52de:	2200      	movs	r2, #0
    52e0:	70ca      	strb	r2, [r1, #3]
    52e2:	7e32      	ldrb	r2, [r6, #24]
    52e4:	700a      	strb	r2, [r1, #0]
    52e6:	704b      	strb	r3, [r1, #1]
    52e8:	7d30      	ldrb	r0, [r6, #20]
    52ea:	4b2e      	ldr	r3, [pc, #184]	; (53a4 <tc_init+0x238>)
    52ec:	4798      	blx	r3
    52ee:	e779      	b.n	51e4 <tc_init+0x78>
    52f0:	a902      	add	r1, sp, #8
    52f2:	2301      	movs	r3, #1
    52f4:	708b      	strb	r3, [r1, #2]
    52f6:	2200      	movs	r2, #0
    52f8:	70ca      	strb	r2, [r1, #3]
    52fa:	3224      	adds	r2, #36	; 0x24
    52fc:	18b2      	adds	r2, r6, r2
    52fe:	7812      	ldrb	r2, [r2, #0]
    5300:	700a      	strb	r2, [r1, #0]
    5302:	704b      	strb	r3, [r1, #1]
    5304:	331f      	adds	r3, #31
    5306:	18f3      	adds	r3, r6, r3
    5308:	7818      	ldrb	r0, [r3, #0]
    530a:	4b26      	ldr	r3, [pc, #152]	; (53a4 <tc_init+0x238>)
    530c:	4798      	blx	r3
    530e:	e76d      	b.n	51ec <tc_init+0x80>
    5310:	6a08      	ldr	r0, [r1, #32]
    5312:	1c7a      	adds	r2, r7, #1
    5314:	0052      	lsls	r2, r2, #1
    5316:	ab03      	add	r3, sp, #12
    5318:	5ad3      	ldrh	r3, [r2, r3]
    531a:	4303      	orrs	r3, r0
    531c:	620b      	str	r3, [r1, #32]
    531e:	e770      	b.n	5202 <tc_init+0x96>
    5320:	7bd3      	ldrb	r3, [r2, #15]
    5322:	b25b      	sxtb	r3, r3
    5324:	2b00      	cmp	r3, #0
    5326:	dbfb      	blt.n	5320 <tc_init+0x1b4>
    5328:	2328      	movs	r3, #40	; 0x28
    532a:	5cf3      	ldrb	r3, [r6, r3]
    532c:	742b      	strb	r3, [r5, #16]
    532e:	6822      	ldr	r2, [r4, #0]
    5330:	7bd3      	ldrb	r3, [r2, #15]
    5332:	b25b      	sxtb	r3, r3
    5334:	2b00      	cmp	r3, #0
    5336:	dbfb      	blt.n	5330 <tc_init+0x1c4>
    5338:	2329      	movs	r3, #41	; 0x29
    533a:	5cf3      	ldrb	r3, [r6, r3]
    533c:	752b      	strb	r3, [r5, #20]
    533e:	6822      	ldr	r2, [r4, #0]
    5340:	7bd3      	ldrb	r3, [r2, #15]
    5342:	b25b      	sxtb	r3, r3
    5344:	2b00      	cmp	r3, #0
    5346:	dbfb      	blt.n	5340 <tc_init+0x1d4>
    5348:	232a      	movs	r3, #42	; 0x2a
    534a:	5cf3      	ldrb	r3, [r6, r3]
    534c:	762b      	strb	r3, [r5, #24]
    534e:	6822      	ldr	r2, [r4, #0]
    5350:	7bd3      	ldrb	r3, [r2, #15]
    5352:	b25b      	sxtb	r3, r3
    5354:	2b00      	cmp	r3, #0
    5356:	dbfb      	blt.n	5350 <tc_init+0x1e4>
    5358:	232b      	movs	r3, #43	; 0x2b
    535a:	5cf3      	ldrb	r3, [r6, r3]
    535c:	766b      	strb	r3, [r5, #25]
    535e:	2000      	movs	r0, #0
    5360:	e730      	b.n	51c4 <tc_init+0x58>
    5362:	7bd3      	ldrb	r3, [r2, #15]
    5364:	b25b      	sxtb	r3, r3
    5366:	2b00      	cmp	r3, #0
    5368:	dbfb      	blt.n	5362 <tc_init+0x1f6>
    536a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    536c:	612b      	str	r3, [r5, #16]
    536e:	6822      	ldr	r2, [r4, #0]
    5370:	7bd3      	ldrb	r3, [r2, #15]
    5372:	b25b      	sxtb	r3, r3
    5374:	2b00      	cmp	r3, #0
    5376:	dbfb      	blt.n	5370 <tc_init+0x204>
    5378:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    537a:	61ab      	str	r3, [r5, #24]
    537c:	6822      	ldr	r2, [r4, #0]
    537e:	7bd3      	ldrb	r3, [r2, #15]
    5380:	b25b      	sxtb	r3, r3
    5382:	2b00      	cmp	r3, #0
    5384:	dbfb      	blt.n	537e <tc_init+0x212>
    5386:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5388:	61eb      	str	r3, [r5, #28]
    538a:	2000      	movs	r0, #0
    538c:	e71a      	b.n	51c4 <tc_init+0x58>
    538e:	46c0      	nop			; (mov r8, r8)
    5390:	00005135 	.word	0x00005135
    5394:	20000b2c 	.word	0x20000b2c
    5398:	40000400 	.word	0x40000400
    539c:	00004f1d 	.word	0x00004f1d
    53a0:	00004e91 	.word	0x00004e91
    53a4:	00005015 	.word	0x00005015

000053a8 <tc_get_count_value>:
    53a8:	6802      	ldr	r2, [r0, #0]
    53aa:	7bd3      	ldrb	r3, [r2, #15]
    53ac:	b25b      	sxtb	r3, r3
    53ae:	2b00      	cmp	r3, #0
    53b0:	dbfb      	blt.n	53aa <tc_get_count_value+0x2>
    53b2:	7903      	ldrb	r3, [r0, #4]
    53b4:	2b04      	cmp	r3, #4
    53b6:	d005      	beq.n	53c4 <tc_get_count_value+0x1c>
    53b8:	2b08      	cmp	r3, #8
    53ba:	d009      	beq.n	53d0 <tc_get_count_value+0x28>
    53bc:	2000      	movs	r0, #0
    53be:	2b00      	cmp	r3, #0
    53c0:	d003      	beq.n	53ca <tc_get_count_value+0x22>
    53c2:	4770      	bx	lr
    53c4:	7c10      	ldrb	r0, [r2, #16]
    53c6:	b2c0      	uxtb	r0, r0
    53c8:	e7fb      	b.n	53c2 <tc_get_count_value+0x1a>
    53ca:	8a10      	ldrh	r0, [r2, #16]
    53cc:	b280      	uxth	r0, r0
    53ce:	e7f8      	b.n	53c2 <tc_get_count_value+0x1a>
    53d0:	6910      	ldr	r0, [r2, #16]
    53d2:	e7f6      	b.n	53c2 <tc_get_count_value+0x1a>

000053d4 <tc_set_compare_value>:
    53d4:	b510      	push	{r4, lr}
    53d6:	6804      	ldr	r4, [r0, #0]
    53d8:	7be3      	ldrb	r3, [r4, #15]
    53da:	b25b      	sxtb	r3, r3
    53dc:	2b00      	cmp	r3, #0
    53de:	dbfb      	blt.n	53d8 <tc_set_compare_value+0x4>
    53e0:	7903      	ldrb	r3, [r0, #4]
    53e2:	2b04      	cmp	r3, #4
    53e4:	d005      	beq.n	53f2 <tc_set_compare_value+0x1e>
    53e6:	2b08      	cmp	r3, #8
    53e8:	d014      	beq.n	5414 <tc_set_compare_value+0x40>
    53ea:	2017      	movs	r0, #23
    53ec:	2b00      	cmp	r3, #0
    53ee:	d008      	beq.n	5402 <tc_set_compare_value+0x2e>
    53f0:	bd10      	pop	{r4, pc}
    53f2:	2017      	movs	r0, #23
    53f4:	2901      	cmp	r1, #1
    53f6:	d8fb      	bhi.n	53f0 <tc_set_compare_value+0x1c>
    53f8:	b2d2      	uxtb	r2, r2
    53fa:	1861      	adds	r1, r4, r1
    53fc:	760a      	strb	r2, [r1, #24]
    53fe:	2000      	movs	r0, #0
    5400:	e7f6      	b.n	53f0 <tc_set_compare_value+0x1c>
    5402:	2017      	movs	r0, #23
    5404:	2901      	cmp	r1, #1
    5406:	d8f3      	bhi.n	53f0 <tc_set_compare_value+0x1c>
    5408:	b292      	uxth	r2, r2
    540a:	310c      	adds	r1, #12
    540c:	0049      	lsls	r1, r1, #1
    540e:	530a      	strh	r2, [r1, r4]
    5410:	2000      	movs	r0, #0
    5412:	e7ed      	b.n	53f0 <tc_set_compare_value+0x1c>
    5414:	2017      	movs	r0, #23
    5416:	2901      	cmp	r1, #1
    5418:	d8ea      	bhi.n	53f0 <tc_set_compare_value+0x1c>
    541a:	3106      	adds	r1, #6
    541c:	0089      	lsls	r1, r1, #2
    541e:	510a      	str	r2, [r1, r4]
    5420:	2000      	movs	r0, #0
    5422:	e7e5      	b.n	53f0 <tc_set_compare_value+0x1c>

00005424 <Dummy_Handler>:
    5424:	e7fe      	b.n	5424 <Dummy_Handler>
	...

00005428 <Reset_Handler>:
    5428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    542a:	4a2a      	ldr	r2, [pc, #168]	; (54d4 <Reset_Handler+0xac>)
    542c:	4b2a      	ldr	r3, [pc, #168]	; (54d8 <Reset_Handler+0xb0>)
    542e:	429a      	cmp	r2, r3
    5430:	d011      	beq.n	5456 <Reset_Handler+0x2e>
    5432:	001a      	movs	r2, r3
    5434:	4b29      	ldr	r3, [pc, #164]	; (54dc <Reset_Handler+0xb4>)
    5436:	429a      	cmp	r2, r3
    5438:	d20d      	bcs.n	5456 <Reset_Handler+0x2e>
    543a:	4a29      	ldr	r2, [pc, #164]	; (54e0 <Reset_Handler+0xb8>)
    543c:	3303      	adds	r3, #3
    543e:	1a9b      	subs	r3, r3, r2
    5440:	089b      	lsrs	r3, r3, #2
    5442:	3301      	adds	r3, #1
    5444:	009b      	lsls	r3, r3, #2
    5446:	2200      	movs	r2, #0
    5448:	4823      	ldr	r0, [pc, #140]	; (54d8 <Reset_Handler+0xb0>)
    544a:	4922      	ldr	r1, [pc, #136]	; (54d4 <Reset_Handler+0xac>)
    544c:	588c      	ldr	r4, [r1, r2]
    544e:	5084      	str	r4, [r0, r2]
    5450:	3204      	adds	r2, #4
    5452:	429a      	cmp	r2, r3
    5454:	d1fa      	bne.n	544c <Reset_Handler+0x24>
    5456:	4a23      	ldr	r2, [pc, #140]	; (54e4 <Reset_Handler+0xbc>)
    5458:	4b23      	ldr	r3, [pc, #140]	; (54e8 <Reset_Handler+0xc0>)
    545a:	429a      	cmp	r2, r3
    545c:	d20a      	bcs.n	5474 <Reset_Handler+0x4c>
    545e:	43d3      	mvns	r3, r2
    5460:	4921      	ldr	r1, [pc, #132]	; (54e8 <Reset_Handler+0xc0>)
    5462:	185b      	adds	r3, r3, r1
    5464:	2103      	movs	r1, #3
    5466:	438b      	bics	r3, r1
    5468:	3304      	adds	r3, #4
    546a:	189b      	adds	r3, r3, r2
    546c:	2100      	movs	r1, #0
    546e:	c202      	stmia	r2!, {r1}
    5470:	4293      	cmp	r3, r2
    5472:	d1fc      	bne.n	546e <Reset_Handler+0x46>
    5474:	4a1d      	ldr	r2, [pc, #116]	; (54ec <Reset_Handler+0xc4>)
    5476:	21ff      	movs	r1, #255	; 0xff
    5478:	4b1d      	ldr	r3, [pc, #116]	; (54f0 <Reset_Handler+0xc8>)
    547a:	438b      	bics	r3, r1
    547c:	6093      	str	r3, [r2, #8]
    547e:	39fd      	subs	r1, #253	; 0xfd
    5480:	2390      	movs	r3, #144	; 0x90
    5482:	005b      	lsls	r3, r3, #1
    5484:	4a1b      	ldr	r2, [pc, #108]	; (54f4 <Reset_Handler+0xcc>)
    5486:	50d1      	str	r1, [r2, r3]
    5488:	4a1b      	ldr	r2, [pc, #108]	; (54f8 <Reset_Handler+0xd0>)
    548a:	78d3      	ldrb	r3, [r2, #3]
    548c:	2503      	movs	r5, #3
    548e:	43ab      	bics	r3, r5
    5490:	2402      	movs	r4, #2
    5492:	4323      	orrs	r3, r4
    5494:	70d3      	strb	r3, [r2, #3]
    5496:	78d3      	ldrb	r3, [r2, #3]
    5498:	270c      	movs	r7, #12
    549a:	43bb      	bics	r3, r7
    549c:	2608      	movs	r6, #8
    549e:	4333      	orrs	r3, r6
    54a0:	70d3      	strb	r3, [r2, #3]
    54a2:	4b16      	ldr	r3, [pc, #88]	; (54fc <Reset_Handler+0xd4>)
    54a4:	7b98      	ldrb	r0, [r3, #14]
    54a6:	2230      	movs	r2, #48	; 0x30
    54a8:	4390      	bics	r0, r2
    54aa:	2220      	movs	r2, #32
    54ac:	4310      	orrs	r0, r2
    54ae:	7398      	strb	r0, [r3, #14]
    54b0:	7b99      	ldrb	r1, [r3, #14]
    54b2:	43b9      	bics	r1, r7
    54b4:	4331      	orrs	r1, r6
    54b6:	7399      	strb	r1, [r3, #14]
    54b8:	7b9a      	ldrb	r2, [r3, #14]
    54ba:	43aa      	bics	r2, r5
    54bc:	4322      	orrs	r2, r4
    54be:	739a      	strb	r2, [r3, #14]
    54c0:	4a0f      	ldr	r2, [pc, #60]	; (5500 <Reset_Handler+0xd8>)
    54c2:	6853      	ldr	r3, [r2, #4]
    54c4:	2180      	movs	r1, #128	; 0x80
    54c6:	430b      	orrs	r3, r1
    54c8:	6053      	str	r3, [r2, #4]
    54ca:	4b0e      	ldr	r3, [pc, #56]	; (5504 <Reset_Handler+0xdc>)
    54cc:	4798      	blx	r3
    54ce:	4b0e      	ldr	r3, [pc, #56]	; (5508 <Reset_Handler+0xe0>)
    54d0:	4798      	blx	r3
    54d2:	e7fe      	b.n	54d2 <Reset_Handler+0xaa>
    54d4:	00009a7c 	.word	0x00009a7c
    54d8:	20000000 	.word	0x20000000
    54dc:	20000074 	.word	0x20000074
    54e0:	20000004 	.word	0x20000004
    54e4:	20000074 	.word	0x20000074
    54e8:	20000d00 	.word	0x20000d00
    54ec:	e000ed00 	.word	0xe000ed00
    54f0:	00000000 	.word	0x00000000
    54f4:	41007000 	.word	0x41007000
    54f8:	41005000 	.word	0x41005000
    54fc:	41004800 	.word	0x41004800
    5500:	41004000 	.word	0x41004000
    5504:	000075c1 	.word	0x000075c1
    5508:	00006f99 	.word	0x00006f99

0000550c <_sbrk>:
    550c:	0003      	movs	r3, r0
    550e:	4a06      	ldr	r2, [pc, #24]	; (5528 <_sbrk+0x1c>)
    5510:	6812      	ldr	r2, [r2, #0]
    5512:	2a00      	cmp	r2, #0
    5514:	d004      	beq.n	5520 <_sbrk+0x14>
    5516:	4a04      	ldr	r2, [pc, #16]	; (5528 <_sbrk+0x1c>)
    5518:	6810      	ldr	r0, [r2, #0]
    551a:	18c3      	adds	r3, r0, r3
    551c:	6013      	str	r3, [r2, #0]
    551e:	4770      	bx	lr
    5520:	4902      	ldr	r1, [pc, #8]	; (552c <_sbrk+0x20>)
    5522:	4a01      	ldr	r2, [pc, #4]	; (5528 <_sbrk+0x1c>)
    5524:	6011      	str	r1, [r2, #0]
    5526:	e7f6      	b.n	5516 <_sbrk+0xa>
    5528:	200001bc 	.word	0x200001bc
    552c:	20002d00 	.word	0x20002d00

00005530 <_close>:
    5530:	2001      	movs	r0, #1
    5532:	4240      	negs	r0, r0
    5534:	4770      	bx	lr

00005536 <_fstat>:
    5536:	2380      	movs	r3, #128	; 0x80
    5538:	019b      	lsls	r3, r3, #6
    553a:	604b      	str	r3, [r1, #4]
    553c:	2000      	movs	r0, #0
    553e:	4770      	bx	lr

00005540 <_isatty>:
    5540:	2001      	movs	r0, #1
    5542:	4770      	bx	lr

00005544 <_lseek>:
    5544:	2000      	movs	r0, #0
    5546:	4770      	bx	lr

00005548 <load_hw_timer>:
    5548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    554a:	0006      	movs	r6, r0
    554c:	28ff      	cmp	r0, #255	; 0xff
    554e:	d027      	beq.n	55a0 <load_hw_timer+0x58>
    5550:	4d15      	ldr	r5, [pc, #84]	; (55a8 <load_hw_timer+0x60>)
    5552:	4f16      	ldr	r7, [pc, #88]	; (55ac <load_hw_timer+0x64>)
    5554:	882c      	ldrh	r4, [r5, #0]
    5556:	b2a4      	uxth	r4, r4
    5558:	47b8      	blx	r7
    555a:	882b      	ldrh	r3, [r5, #0]
    555c:	b29b      	uxth	r3, r3
    555e:	429c      	cmp	r4, r3
    5560:	d1f8      	bne.n	5554 <load_hw_timer+0xc>
    5562:	0424      	lsls	r4, r4, #16
    5564:	0133      	lsls	r3, r6, #4
    5566:	4320      	orrs	r0, r4
    5568:	4a11      	ldr	r2, [pc, #68]	; (55b0 <load_hw_timer+0x68>)
    556a:	589c      	ldr	r4, [r3, r2]
    556c:	1a20      	subs	r0, r4, r0
    556e:	4b11      	ldr	r3, [pc, #68]	; (55b4 <load_hw_timer+0x6c>)
    5570:	4298      	cmp	r0, r3
    5572:	d811      	bhi.n	5598 <load_hw_timer+0x50>
    5574:	0132      	lsls	r2, r6, #4
    5576:	4b0e      	ldr	r3, [pc, #56]	; (55b0 <load_hw_timer+0x68>)
    5578:	189b      	adds	r3, r3, r2
    557a:	7b5b      	ldrb	r3, [r3, #13]
    557c:	2b00      	cmp	r3, #0
    557e:	d10e      	bne.n	559e <load_hw_timer+0x56>
    5580:	4b0d      	ldr	r3, [pc, #52]	; (55b8 <load_hw_timer+0x70>)
    5582:	4298      	cmp	r0, r3
    5584:	d80b      	bhi.n	559e <load_hw_timer+0x56>
    5586:	b280      	uxth	r0, r0
    5588:	4b0c      	ldr	r3, [pc, #48]	; (55bc <load_hw_timer+0x74>)
    558a:	4798      	blx	r3
    558c:	0136      	lsls	r6, r6, #4
    558e:	4b08      	ldr	r3, [pc, #32]	; (55b0 <load_hw_timer+0x68>)
    5590:	199e      	adds	r6, r3, r6
    5592:	2301      	movs	r3, #1
    5594:	7373      	strb	r3, [r6, #13]
    5596:	e002      	b.n	559e <load_hw_timer+0x56>
    5598:	2201      	movs	r2, #1
    559a:	4b09      	ldr	r3, [pc, #36]	; (55c0 <load_hw_timer+0x78>)
    559c:	701a      	strb	r2, [r3, #0]
    559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55a0:	4b08      	ldr	r3, [pc, #32]	; (55c4 <load_hw_timer+0x7c>)
    55a2:	4798      	blx	r3
    55a4:	e7fb      	b.n	559e <load_hw_timer+0x56>
    55a6:	46c0      	nop			; (mov r8, r8)
    55a8:	20000b38 	.word	0x20000b38
    55ac:	000071a1 	.word	0x000071a1
    55b0:	20000b3c 	.word	0x20000b3c
    55b4:	7ffffffe 	.word	0x7ffffffe
    55b8:	0000ffff 	.word	0x0000ffff
    55bc:	00007215 	.word	0x00007215
    55c0:	20000b8c 	.word	0x20000b8c
    55c4:	000071ed 	.word	0x000071ed

000055c8 <internal_timer_handler>:
    55c8:	b510      	push	{r4, lr}
    55ca:	4b1d      	ldr	r3, [pc, #116]	; (5640 <internal_timer_handler+0x78>)
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	2b00      	cmp	r3, #0
    55d0:	d027      	beq.n	5622 <internal_timer_handler+0x5a>
    55d2:	2200      	movs	r2, #0
    55d4:	4b1a      	ldr	r3, [pc, #104]	; (5640 <internal_timer_handler+0x78>)
    55d6:	701a      	strb	r2, [r3, #0]
    55d8:	4b1a      	ldr	r3, [pc, #104]	; (5644 <internal_timer_handler+0x7c>)
    55da:	781b      	ldrb	r3, [r3, #0]
    55dc:	2b00      	cmp	r3, #0
    55de:	d020      	beq.n	5622 <internal_timer_handler+0x5a>
    55e0:	4b19      	ldr	r3, [pc, #100]	; (5648 <internal_timer_handler+0x80>)
    55e2:	681b      	ldr	r3, [r3, #0]
    55e4:	2bff      	cmp	r3, #255	; 0xff
    55e6:	d01d      	beq.n	5624 <internal_timer_handler+0x5c>
    55e8:	4b18      	ldr	r3, [pc, #96]	; (564c <internal_timer_handler+0x84>)
    55ea:	6818      	ldr	r0, [r3, #0]
    55ec:	4918      	ldr	r1, [pc, #96]	; (5650 <internal_timer_handler+0x88>)
    55ee:	680b      	ldr	r3, [r1, #0]
    55f0:	011a      	lsls	r2, r3, #4
    55f2:	4b18      	ldr	r3, [pc, #96]	; (5654 <internal_timer_handler+0x8c>)
    55f4:	189b      	adds	r3, r3, r2
    55f6:	7318      	strb	r0, [r3, #12]
    55f8:	6008      	str	r0, [r1, #0]
    55fa:	4a16      	ldr	r2, [pc, #88]	; (5654 <internal_timer_handler+0x8c>)
    55fc:	4913      	ldr	r1, [pc, #76]	; (564c <internal_timer_handler+0x84>)
    55fe:	680b      	ldr	r3, [r1, #0]
    5600:	011b      	lsls	r3, r3, #4
    5602:	18d3      	adds	r3, r2, r3
    5604:	7b18      	ldrb	r0, [r3, #12]
    5606:	6008      	str	r0, [r1, #0]
    5608:	4b11      	ldr	r3, [pc, #68]	; (5650 <internal_timer_handler+0x88>)
    560a:	681b      	ldr	r3, [r3, #0]
    560c:	011b      	lsls	r3, r3, #4
    560e:	18d2      	adds	r2, r2, r3
    5610:	23ff      	movs	r3, #255	; 0xff
    5612:	7313      	strb	r3, [r2, #12]
    5614:	4a0b      	ldr	r2, [pc, #44]	; (5644 <internal_timer_handler+0x7c>)
    5616:	7813      	ldrb	r3, [r2, #0]
    5618:	3b01      	subs	r3, #1
    561a:	b2db      	uxtb	r3, r3
    561c:	7013      	strb	r3, [r2, #0]
    561e:	2b00      	cmp	r3, #0
    5620:	d10b      	bne.n	563a <internal_timer_handler+0x72>
    5622:	bd10      	pop	{r4, pc}
    5624:	4b0a      	ldr	r3, [pc, #40]	; (5650 <internal_timer_handler+0x88>)
    5626:	681b      	ldr	r3, [r3, #0]
    5628:	2bff      	cmp	r3, #255	; 0xff
    562a:	d1dd      	bne.n	55e8 <internal_timer_handler+0x20>
    562c:	4b07      	ldr	r3, [pc, #28]	; (564c <internal_timer_handler+0x84>)
    562e:	681b      	ldr	r3, [r3, #0]
    5630:	4a07      	ldr	r2, [pc, #28]	; (5650 <internal_timer_handler+0x88>)
    5632:	6013      	str	r3, [r2, #0]
    5634:	4a04      	ldr	r2, [pc, #16]	; (5648 <internal_timer_handler+0x80>)
    5636:	6013      	str	r3, [r2, #0]
    5638:	e7df      	b.n	55fa <internal_timer_handler+0x32>
    563a:	4b07      	ldr	r3, [pc, #28]	; (5658 <internal_timer_handler+0x90>)
    563c:	4798      	blx	r3
    563e:	e7f0      	b.n	5622 <internal_timer_handler+0x5a>
    5640:	20000b8c 	.word	0x20000b8c
    5644:	200001cc 	.word	0x200001cc
    5648:	200001c0 	.word	0x200001c0
    564c:	200001c8 	.word	0x200001c8
    5650:	200001c4 	.word	0x200001c4
    5654:	20000b3c 	.word	0x20000b3c
    5658:	00005549 	.word	0x00005549

0000565c <sw_timer_get_time>:
    565c:	b570      	push	{r4, r5, r6, lr}
    565e:	4d06      	ldr	r5, [pc, #24]	; (5678 <sw_timer_get_time+0x1c>)
    5660:	4e06      	ldr	r6, [pc, #24]	; (567c <sw_timer_get_time+0x20>)
    5662:	882c      	ldrh	r4, [r5, #0]
    5664:	b2a4      	uxth	r4, r4
    5666:	47b0      	blx	r6
    5668:	882b      	ldrh	r3, [r5, #0]
    566a:	b29b      	uxth	r3, r3
    566c:	429c      	cmp	r4, r3
    566e:	d1f8      	bne.n	5662 <sw_timer_get_time+0x6>
    5670:	0424      	lsls	r4, r4, #16
    5672:	4320      	orrs	r0, r4
    5674:	bd70      	pop	{r4, r5, r6, pc}
    5676:	46c0      	nop			; (mov r8, r8)
    5678:	20000b38 	.word	0x20000b38
    567c:	000071a1 	.word	0x000071a1

00005680 <sw_timer_service>:
    5680:	b5f0      	push	{r4, r5, r6, r7, lr}
    5682:	46de      	mov	lr, fp
    5684:	4657      	mov	r7, sl
    5686:	464e      	mov	r6, r9
    5688:	4645      	mov	r5, r8
    568a:	b5e0      	push	{r5, r6, r7, lr}
    568c:	b083      	sub	sp, #12
    568e:	f3ef 8210 	mrs	r2, PRIMASK
    5692:	4253      	negs	r3, r2
    5694:	4153      	adcs	r3, r2
    5696:	9300      	str	r3, [sp, #0]
    5698:	b672      	cpsid	i
    569a:	f3bf 8f5f 	dmb	sy
    569e:	2200      	movs	r2, #0
    56a0:	4b27      	ldr	r3, [pc, #156]	; (5740 <sw_timer_service+0xc0>)
    56a2:	701a      	strb	r2, [r3, #0]
    56a4:	9c00      	ldr	r4, [sp, #0]
    56a6:	4b27      	ldr	r3, [pc, #156]	; (5744 <sw_timer_service+0xc4>)
    56a8:	4798      	blx	r3
    56aa:	23ff      	movs	r3, #255	; 0xff
    56ac:	4223      	tst	r3, r4
    56ae:	d005      	beq.n	56bc <sw_timer_service+0x3c>
    56b0:	2201      	movs	r2, #1
    56b2:	4b23      	ldr	r3, [pc, #140]	; (5740 <sw_timer_service+0xc0>)
    56b4:	701a      	strb	r2, [r3, #0]
    56b6:	f3bf 8f5f 	dmb	sy
    56ba:	b662      	cpsie	i
    56bc:	4b20      	ldr	r3, [pc, #128]	; (5740 <sw_timer_service+0xc0>)
    56be:	469a      	mov	sl, r3
    56c0:	4c21      	ldr	r4, [pc, #132]	; (5748 <sw_timer_service+0xc8>)
    56c2:	4b22      	ldr	r3, [pc, #136]	; (574c <sw_timer_service+0xcc>)
    56c4:	4699      	mov	r9, r3
    56c6:	2200      	movs	r2, #0
    56c8:	20ff      	movs	r0, #255	; 0xff
    56ca:	4b21      	ldr	r3, [pc, #132]	; (5750 <sw_timer_service+0xd0>)
    56cc:	4698      	mov	r8, r3
    56ce:	4b1c      	ldr	r3, [pc, #112]	; (5740 <sw_timer_service+0xc0>)
    56d0:	469c      	mov	ip, r3
    56d2:	e004      	b.n	56de <sw_timer_service+0x5e>
    56d4:	4643      	mov	r3, r8
    56d6:	6018      	str	r0, [r3, #0]
    56d8:	e01e      	b.n	5718 <sw_timer_service+0x98>
    56da:	2e00      	cmp	r6, #0
    56dc:	d125      	bne.n	572a <sw_timer_service+0xaa>
    56de:	4b1a      	ldr	r3, [pc, #104]	; (5748 <sw_timer_service+0xc8>)
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	2bff      	cmp	r3, #255	; 0xff
    56e4:	d024      	beq.n	5730 <sw_timer_service+0xb0>
    56e6:	f3ef 8110 	mrs	r1, PRIMASK
    56ea:	424b      	negs	r3, r1
    56ec:	414b      	adcs	r3, r1
    56ee:	9301      	str	r3, [sp, #4]
    56f0:	b672      	cpsid	i
    56f2:	f3bf 8f5f 	dmb	sy
    56f6:	4653      	mov	r3, sl
    56f8:	701a      	strb	r2, [r3, #0]
    56fa:	9f01      	ldr	r7, [sp, #4]
    56fc:	6823      	ldr	r3, [r4, #0]
    56fe:	011b      	lsls	r3, r3, #4
    5700:	444b      	add	r3, r9
    5702:	7b19      	ldrb	r1, [r3, #12]
    5704:	685e      	ldr	r6, [r3, #4]
    5706:	689d      	ldr	r5, [r3, #8]
    5708:	46ab      	mov	fp, r5
    570a:	7318      	strb	r0, [r3, #12]
    570c:	605a      	str	r2, [r3, #4]
    570e:	609a      	str	r2, [r3, #8]
    5710:	735a      	strb	r2, [r3, #13]
    5712:	6021      	str	r1, [r4, #0]
    5714:	29ff      	cmp	r1, #255	; 0xff
    5716:	d0dd      	beq.n	56d4 <sw_timer_service+0x54>
    5718:	4238      	tst	r0, r7
    571a:	d0de      	beq.n	56da <sw_timer_service+0x5a>
    571c:	2301      	movs	r3, #1
    571e:	4661      	mov	r1, ip
    5720:	700b      	strb	r3, [r1, #0]
    5722:	f3bf 8f5f 	dmb	sy
    5726:	b662      	cpsie	i
    5728:	e7d7      	b.n	56da <sw_timer_service+0x5a>
    572a:	4658      	mov	r0, fp
    572c:	47b0      	blx	r6
    572e:	e7ca      	b.n	56c6 <sw_timer_service+0x46>
    5730:	b003      	add	sp, #12
    5732:	bc3c      	pop	{r2, r3, r4, r5}
    5734:	4690      	mov	r8, r2
    5736:	4699      	mov	r9, r3
    5738:	46a2      	mov	sl, r4
    573a:	46ab      	mov	fp, r5
    573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	2000000c 	.word	0x2000000c
    5744:	000055c9 	.word	0x000055c9
    5748:	200001c0 	.word	0x200001c0
    574c:	20000b3c 	.word	0x20000b3c
    5750:	200001c4 	.word	0x200001c4

00005754 <pal_init>:
    5754:	b510      	push	{r4, lr}
    5756:	4b02      	ldr	r3, [pc, #8]	; (5760 <pal_init+0xc>)
    5758:	4798      	blx	r3
    575a:	2000      	movs	r0, #0
    575c:	bd10      	pop	{r4, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	000068f9 	.word	0x000068f9

00005764 <pal_task>:
    5764:	b510      	push	{r4, lr}
    5766:	4b01      	ldr	r3, [pc, #4]	; (576c <pal_task+0x8>)
    5768:	4798      	blx	r3
    576a:	bd10      	pop	{r4, pc}
    576c:	00005681 	.word	0x00005681

00005770 <pal_get_current_time>:
    5770:	b510      	push	{r4, lr}
    5772:	b082      	sub	sp, #8
    5774:	0004      	movs	r4, r0
    5776:	4b05      	ldr	r3, [pc, #20]	; (578c <pal_get_current_time+0x1c>)
    5778:	4798      	blx	r3
    577a:	9001      	str	r0, [sp, #4]
    577c:	2204      	movs	r2, #4
    577e:	a901      	add	r1, sp, #4
    5780:	0020      	movs	r0, r4
    5782:	4b03      	ldr	r3, [pc, #12]	; (5790 <pal_get_current_time+0x20>)
    5784:	4798      	blx	r3
    5786:	b002      	add	sp, #8
    5788:	bd10      	pop	{r4, pc}
    578a:	46c0      	nop			; (mov r8, r8)
    578c:	0000565d 	.word	0x0000565d
    5790:	00007609 	.word	0x00007609

00005794 <bmm_buffer_init>:
    5794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5796:	4e0d      	ldr	r6, [pc, #52]	; (57cc <bmm_buffer_init+0x38>)
    5798:	0030      	movs	r0, r6
    579a:	4b0d      	ldr	r3, [pc, #52]	; (57d0 <bmm_buffer_init+0x3c>)
    579c:	4798      	blx	r3
    579e:	4c0d      	ldr	r4, [pc, #52]	; (57d4 <bmm_buffer_init+0x40>)
    57a0:	4d0d      	ldr	r5, [pc, #52]	; (57d8 <bmm_buffer_init+0x44>)
    57a2:	6025      	str	r5, [r4, #0]
    57a4:	0021      	movs	r1, r4
    57a6:	0030      	movs	r0, r6
    57a8:	4f0c      	ldr	r7, [pc, #48]	; (57dc <bmm_buffer_init+0x48>)
    57aa:	47b8      	blx	r7
    57ac:	002b      	movs	r3, r5
    57ae:	3390      	adds	r3, #144	; 0x90
    57b0:	60a3      	str	r3, [r4, #8]
    57b2:	0021      	movs	r1, r4
    57b4:	3108      	adds	r1, #8
    57b6:	0030      	movs	r0, r6
    57b8:	47b8      	blx	r7
    57ba:	3521      	adds	r5, #33	; 0x21
    57bc:	35ff      	adds	r5, #255	; 0xff
    57be:	6125      	str	r5, [r4, #16]
    57c0:	0021      	movs	r1, r4
    57c2:	3110      	adds	r1, #16
    57c4:	0030      	movs	r0, r6
    57c6:	47b8      	blx	r7
    57c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57ca:	46c0      	nop			; (mov r8, r8)
    57cc:	20000398 	.word	0x20000398
    57d0:	000059a1 	.word	0x000059a1
    57d4:	200001d0 	.word	0x200001d0
    57d8:	200001e8 	.word	0x200001e8
    57dc:	000059b9 	.word	0x000059b9

000057e0 <bmm_buffer_alloc>:
    57e0:	b510      	push	{r4, lr}
    57e2:	2100      	movs	r1, #0
    57e4:	4801      	ldr	r0, [pc, #4]	; (57ec <bmm_buffer_alloc+0xc>)
    57e6:	4b02      	ldr	r3, [pc, #8]	; (57f0 <bmm_buffer_alloc+0x10>)
    57e8:	4798      	blx	r3
    57ea:	bd10      	pop	{r4, pc}
    57ec:	20000398 	.word	0x20000398
    57f0:	00005a45 	.word	0x00005a45

000057f4 <bmm_buffer_free>:
    57f4:	b510      	push	{r4, lr}
    57f6:	2800      	cmp	r0, #0
    57f8:	d003      	beq.n	5802 <bmm_buffer_free+0xe>
    57fa:	0001      	movs	r1, r0
    57fc:	4801      	ldr	r0, [pc, #4]	; (5804 <bmm_buffer_free+0x10>)
    57fe:	4b02      	ldr	r3, [pc, #8]	; (5808 <bmm_buffer_free+0x14>)
    5800:	4798      	blx	r3
    5802:	bd10      	pop	{r4, pc}
    5804:	20000398 	.word	0x20000398
    5808:	000059b9 	.word	0x000059b9

0000580c <queue_read_or_remove>:
    580c:	b5f0      	push	{r4, r5, r6, r7, lr}
    580e:	46ce      	mov	lr, r9
    5810:	4647      	mov	r7, r8
    5812:	b580      	push	{r7, lr}
    5814:	b083      	sub	sp, #12
    5816:	0007      	movs	r7, r0
    5818:	4689      	mov	r9, r1
    581a:	0015      	movs	r5, r2
    581c:	f3ef 8310 	mrs	r3, PRIMASK
    5820:	425a      	negs	r2, r3
    5822:	4153      	adcs	r3, r2
    5824:	9301      	str	r3, [sp, #4]
    5826:	b672      	cpsid	i
    5828:	f3bf 8f5f 	dmb	sy
    582c:	2200      	movs	r2, #0
    582e:	4b5b      	ldr	r3, [pc, #364]	; (599c <queue_read_or_remove+0x190>)
    5830:	701a      	strb	r2, [r3, #0]
    5832:	9b01      	ldr	r3, [sp, #4]
    5834:	4698      	mov	r8, r3
    5836:	7a03      	ldrb	r3, [r0, #8]
    5838:	2b00      	cmp	r3, #0
    583a:	d100      	bne.n	583e <queue_read_or_remove+0x32>
    583c:	e0ab      	b.n	5996 <queue_read_or_remove+0x18a>
    583e:	7804      	ldrb	r4, [r0, #0]
    5840:	7843      	ldrb	r3, [r0, #1]
    5842:	021b      	lsls	r3, r3, #8
    5844:	4323      	orrs	r3, r4
    5846:	7884      	ldrb	r4, [r0, #2]
    5848:	0424      	lsls	r4, r4, #16
    584a:	4323      	orrs	r3, r4
    584c:	78c4      	ldrb	r4, [r0, #3]
    584e:	0624      	lsls	r4, r4, #24
    5850:	431c      	orrs	r4, r3
    5852:	2d00      	cmp	r5, #0
    5854:	d043      	beq.n	58de <queue_read_or_remove+0xd2>
    5856:	2c00      	cmp	r4, #0
    5858:	d030      	beq.n	58bc <queue_read_or_remove+0xb0>
    585a:	0026      	movs	r6, r4
    585c:	e000      	b.n	5860 <queue_read_or_remove+0x54>
    585e:	001c      	movs	r4, r3
    5860:	7929      	ldrb	r1, [r5, #4]
    5862:	796b      	ldrb	r3, [r5, #5]
    5864:	021b      	lsls	r3, r3, #8
    5866:	430b      	orrs	r3, r1
    5868:	79a9      	ldrb	r1, [r5, #6]
    586a:	0409      	lsls	r1, r1, #16
    586c:	430b      	orrs	r3, r1
    586e:	79e9      	ldrb	r1, [r5, #7]
    5870:	0609      	lsls	r1, r1, #24
    5872:	4319      	orrs	r1, r3
    5874:	7820      	ldrb	r0, [r4, #0]
    5876:	7863      	ldrb	r3, [r4, #1]
    5878:	021b      	lsls	r3, r3, #8
    587a:	4303      	orrs	r3, r0
    587c:	78a0      	ldrb	r0, [r4, #2]
    587e:	0400      	lsls	r0, r0, #16
    5880:	4303      	orrs	r3, r0
    5882:	78e0      	ldrb	r0, [r4, #3]
    5884:	0600      	lsls	r0, r0, #24
    5886:	4318      	orrs	r0, r3
    5888:	782b      	ldrb	r3, [r5, #0]
    588a:	786a      	ldrb	r2, [r5, #1]
    588c:	0212      	lsls	r2, r2, #8
    588e:	431a      	orrs	r2, r3
    5890:	78ab      	ldrb	r3, [r5, #2]
    5892:	041b      	lsls	r3, r3, #16
    5894:	431a      	orrs	r2, r3
    5896:	78eb      	ldrb	r3, [r5, #3]
    5898:	061b      	lsls	r3, r3, #24
    589a:	4313      	orrs	r3, r2
    589c:	4798      	blx	r3
    589e:	2800      	cmp	r0, #0
    58a0:	d11e      	bne.n	58e0 <queue_read_or_remove+0xd4>
    58a2:	7923      	ldrb	r3, [r4, #4]
    58a4:	7962      	ldrb	r2, [r4, #5]
    58a6:	0212      	lsls	r2, r2, #8
    58a8:	431a      	orrs	r2, r3
    58aa:	79a3      	ldrb	r3, [r4, #6]
    58ac:	041b      	lsls	r3, r3, #16
    58ae:	431a      	orrs	r2, r3
    58b0:	79e3      	ldrb	r3, [r4, #7]
    58b2:	061b      	lsls	r3, r3, #24
    58b4:	4313      	orrs	r3, r2
    58b6:	0026      	movs	r6, r4
    58b8:	2b00      	cmp	r3, #0
    58ba:	d1d0      	bne.n	585e <queue_read_or_remove+0x52>
    58bc:	2400      	movs	r4, #0
    58be:	23ff      	movs	r3, #255	; 0xff
    58c0:	4642      	mov	r2, r8
    58c2:	4213      	tst	r3, r2
    58c4:	d005      	beq.n	58d2 <queue_read_or_remove+0xc6>
    58c6:	2201      	movs	r2, #1
    58c8:	4b34      	ldr	r3, [pc, #208]	; (599c <queue_read_or_remove+0x190>)
    58ca:	701a      	strb	r2, [r3, #0]
    58cc:	f3bf 8f5f 	dmb	sy
    58d0:	b662      	cpsie	i
    58d2:	0020      	movs	r0, r4
    58d4:	b003      	add	sp, #12
    58d6:	bc0c      	pop	{r2, r3}
    58d8:	4690      	mov	r8, r2
    58da:	4699      	mov	r9, r3
    58dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58de:	0026      	movs	r6, r4
    58e0:	2c00      	cmp	r4, #0
    58e2:	d0ec      	beq.n	58be <queue_read_or_remove+0xb2>
    58e4:	464b      	mov	r3, r9
    58e6:	2b00      	cmp	r3, #0
    58e8:	d1e9      	bne.n	58be <queue_read_or_remove+0xb2>
    58ea:	783b      	ldrb	r3, [r7, #0]
    58ec:	787a      	ldrb	r2, [r7, #1]
    58ee:	0212      	lsls	r2, r2, #8
    58f0:	431a      	orrs	r2, r3
    58f2:	78bb      	ldrb	r3, [r7, #2]
    58f4:	041b      	lsls	r3, r3, #16
    58f6:	431a      	orrs	r2, r3
    58f8:	78fb      	ldrb	r3, [r7, #3]
    58fa:	061b      	lsls	r3, r3, #24
    58fc:	4313      	orrs	r3, r2
    58fe:	429c      	cmp	r4, r3
    5900:	d02f      	beq.n	5962 <queue_read_or_remove+0x156>
    5902:	7923      	ldrb	r3, [r4, #4]
    5904:	7962      	ldrb	r2, [r4, #5]
    5906:	0212      	lsls	r2, r2, #8
    5908:	431a      	orrs	r2, r3
    590a:	79a3      	ldrb	r3, [r4, #6]
    590c:	041b      	lsls	r3, r3, #16
    590e:	431a      	orrs	r2, r3
    5910:	79e3      	ldrb	r3, [r4, #7]
    5912:	061b      	lsls	r3, r3, #24
    5914:	4313      	orrs	r3, r2
    5916:	7133      	strb	r3, [r6, #4]
    5918:	0a1a      	lsrs	r2, r3, #8
    591a:	7172      	strb	r2, [r6, #5]
    591c:	0c1a      	lsrs	r2, r3, #16
    591e:	71b2      	strb	r2, [r6, #6]
    5920:	0e1b      	lsrs	r3, r3, #24
    5922:	71f3      	strb	r3, [r6, #7]
    5924:	793b      	ldrb	r3, [r7, #4]
    5926:	797a      	ldrb	r2, [r7, #5]
    5928:	0212      	lsls	r2, r2, #8
    592a:	431a      	orrs	r2, r3
    592c:	79bb      	ldrb	r3, [r7, #6]
    592e:	041b      	lsls	r3, r3, #16
    5930:	431a      	orrs	r2, r3
    5932:	79fb      	ldrb	r3, [r7, #7]
    5934:	061b      	lsls	r3, r3, #24
    5936:	4313      	orrs	r3, r2
    5938:	429c      	cmp	r4, r3
    593a:	d024      	beq.n	5986 <queue_read_or_remove+0x17a>
    593c:	7a3b      	ldrb	r3, [r7, #8]
    593e:	3b01      	subs	r3, #1
    5940:	723b      	strb	r3, [r7, #8]
    5942:	783b      	ldrb	r3, [r7, #0]
    5944:	787a      	ldrb	r2, [r7, #1]
    5946:	0212      	lsls	r2, r2, #8
    5948:	431a      	orrs	r2, r3
    594a:	78bb      	ldrb	r3, [r7, #2]
    594c:	041b      	lsls	r3, r3, #16
    594e:	431a      	orrs	r2, r3
    5950:	78fb      	ldrb	r3, [r7, #3]
    5952:	061b      	lsls	r3, r3, #24
    5954:	4313      	orrs	r3, r2
    5956:	d1b2      	bne.n	58be <queue_read_or_remove+0xb2>
    5958:	713b      	strb	r3, [r7, #4]
    595a:	717b      	strb	r3, [r7, #5]
    595c:	71bb      	strb	r3, [r7, #6]
    595e:	71fb      	strb	r3, [r7, #7]
    5960:	e7ad      	b.n	58be <queue_read_or_remove+0xb2>
    5962:	7923      	ldrb	r3, [r4, #4]
    5964:	7962      	ldrb	r2, [r4, #5]
    5966:	0212      	lsls	r2, r2, #8
    5968:	431a      	orrs	r2, r3
    596a:	79a3      	ldrb	r3, [r4, #6]
    596c:	041b      	lsls	r3, r3, #16
    596e:	431a      	orrs	r2, r3
    5970:	79e3      	ldrb	r3, [r4, #7]
    5972:	061b      	lsls	r3, r3, #24
    5974:	4313      	orrs	r3, r2
    5976:	703b      	strb	r3, [r7, #0]
    5978:	0a1a      	lsrs	r2, r3, #8
    597a:	707a      	strb	r2, [r7, #1]
    597c:	0c1a      	lsrs	r2, r3, #16
    597e:	70ba      	strb	r2, [r7, #2]
    5980:	0e1b      	lsrs	r3, r3, #24
    5982:	70fb      	strb	r3, [r7, #3]
    5984:	e7ce      	b.n	5924 <queue_read_or_remove+0x118>
    5986:	713e      	strb	r6, [r7, #4]
    5988:	0a33      	lsrs	r3, r6, #8
    598a:	717b      	strb	r3, [r7, #5]
    598c:	0c33      	lsrs	r3, r6, #16
    598e:	71bb      	strb	r3, [r7, #6]
    5990:	0e36      	lsrs	r6, r6, #24
    5992:	71fe      	strb	r6, [r7, #7]
    5994:	e7d2      	b.n	593c <queue_read_or_remove+0x130>
    5996:	2400      	movs	r4, #0
    5998:	e791      	b.n	58be <queue_read_or_remove+0xb2>
    599a:	46c0      	nop			; (mov r8, r8)
    599c:	2000000c 	.word	0x2000000c

000059a0 <qmm_queue_init>:
    59a0:	2300      	movs	r3, #0
    59a2:	7003      	strb	r3, [r0, #0]
    59a4:	7043      	strb	r3, [r0, #1]
    59a6:	7083      	strb	r3, [r0, #2]
    59a8:	70c3      	strb	r3, [r0, #3]
    59aa:	7103      	strb	r3, [r0, #4]
    59ac:	7143      	strb	r3, [r0, #5]
    59ae:	7183      	strb	r3, [r0, #6]
    59b0:	71c3      	strb	r3, [r0, #7]
    59b2:	7203      	strb	r3, [r0, #8]
    59b4:	4770      	bx	lr
	...

000059b8 <qmm_queue_append>:
    59b8:	b510      	push	{r4, lr}
    59ba:	b082      	sub	sp, #8
    59bc:	f3ef 8310 	mrs	r3, PRIMASK
    59c0:	425a      	negs	r2, r3
    59c2:	4153      	adcs	r3, r2
    59c4:	9301      	str	r3, [sp, #4]
    59c6:	b672      	cpsid	i
    59c8:	f3bf 8f5f 	dmb	sy
    59cc:	2200      	movs	r2, #0
    59ce:	4b1c      	ldr	r3, [pc, #112]	; (5a40 <qmm_queue_append+0x88>)
    59d0:	701a      	strb	r2, [r3, #0]
    59d2:	9c01      	ldr	r4, [sp, #4]
    59d4:	7a03      	ldrb	r3, [r0, #8]
    59d6:	2b00      	cmp	r3, #0
    59d8:	d120      	bne.n	5a1c <qmm_queue_append+0x64>
    59da:	7001      	strb	r1, [r0, #0]
    59dc:	0a0b      	lsrs	r3, r1, #8
    59de:	7043      	strb	r3, [r0, #1]
    59e0:	0c0b      	lsrs	r3, r1, #16
    59e2:	7083      	strb	r3, [r0, #2]
    59e4:	0e0b      	lsrs	r3, r1, #24
    59e6:	70c3      	strb	r3, [r0, #3]
    59e8:	7101      	strb	r1, [r0, #4]
    59ea:	0a0b      	lsrs	r3, r1, #8
    59ec:	7143      	strb	r3, [r0, #5]
    59ee:	0c0b      	lsrs	r3, r1, #16
    59f0:	22ff      	movs	r2, #255	; 0xff
    59f2:	7183      	strb	r3, [r0, #6]
    59f4:	0e0b      	lsrs	r3, r1, #24
    59f6:	71c3      	strb	r3, [r0, #7]
    59f8:	2300      	movs	r3, #0
    59fa:	710b      	strb	r3, [r1, #4]
    59fc:	714b      	strb	r3, [r1, #5]
    59fe:	718b      	strb	r3, [r1, #6]
    5a00:	71cb      	strb	r3, [r1, #7]
    5a02:	7a03      	ldrb	r3, [r0, #8]
    5a04:	3301      	adds	r3, #1
    5a06:	7203      	strb	r3, [r0, #8]
    5a08:	4222      	tst	r2, r4
    5a0a:	d005      	beq.n	5a18 <qmm_queue_append+0x60>
    5a0c:	3afe      	subs	r2, #254	; 0xfe
    5a0e:	4b0c      	ldr	r3, [pc, #48]	; (5a40 <qmm_queue_append+0x88>)
    5a10:	701a      	strb	r2, [r3, #0]
    5a12:	f3bf 8f5f 	dmb	sy
    5a16:	b662      	cpsie	i
    5a18:	b002      	add	sp, #8
    5a1a:	bd10      	pop	{r4, pc}
    5a1c:	7903      	ldrb	r3, [r0, #4]
    5a1e:	7942      	ldrb	r2, [r0, #5]
    5a20:	0212      	lsls	r2, r2, #8
    5a22:	431a      	orrs	r2, r3
    5a24:	7983      	ldrb	r3, [r0, #6]
    5a26:	041b      	lsls	r3, r3, #16
    5a28:	431a      	orrs	r2, r3
    5a2a:	79c3      	ldrb	r3, [r0, #7]
    5a2c:	061b      	lsls	r3, r3, #24
    5a2e:	4313      	orrs	r3, r2
    5a30:	7119      	strb	r1, [r3, #4]
    5a32:	0a0a      	lsrs	r2, r1, #8
    5a34:	715a      	strb	r2, [r3, #5]
    5a36:	0c0a      	lsrs	r2, r1, #16
    5a38:	719a      	strb	r2, [r3, #6]
    5a3a:	0e0a      	lsrs	r2, r1, #24
    5a3c:	71da      	strb	r2, [r3, #7]
    5a3e:	e7d3      	b.n	59e8 <qmm_queue_append+0x30>
    5a40:	2000000c 	.word	0x2000000c

00005a44 <qmm_queue_remove>:
    5a44:	b510      	push	{r4, lr}
    5a46:	000a      	movs	r2, r1
    5a48:	2100      	movs	r1, #0
    5a4a:	4b01      	ldr	r3, [pc, #4]	; (5a50 <qmm_queue_remove+0xc>)
    5a4c:	4798      	blx	r3
    5a4e:	bd10      	pop	{r4, pc}
    5a50:	0000580d 	.word	0x0000580d

00005a54 <switch_pll_on>:
    5a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a56:	b083      	sub	sp, #12
    5a58:	2200      	movs	r2, #0
    5a5a:	211f      	movs	r1, #31
    5a5c:	2001      	movs	r0, #1
    5a5e:	4b24      	ldr	r3, [pc, #144]	; (5af0 <switch_pll_on+0x9c>)
    5a60:	4798      	blx	r3
    5a62:	2808      	cmp	r0, #8
    5a64:	d001      	beq.n	5a6a <switch_pll_on+0x16>
    5a66:	b003      	add	sp, #12
    5a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a6a:	3007      	adds	r0, #7
    5a6c:	4c21      	ldr	r4, [pc, #132]	; (5af4 <switch_pll_on+0xa0>)
    5a6e:	47a0      	blx	r4
    5a70:	200e      	movs	r0, #14
    5a72:	47a0      	blx	r4
    5a74:	0005      	movs	r5, r0
    5a76:	2101      	movs	r1, #1
    5a78:	200e      	movs	r0, #14
    5a7a:	4c1f      	ldr	r4, [pc, #124]	; (5af8 <switch_pll_on+0xa4>)
    5a7c:	47a0      	blx	r4
    5a7e:	2100      	movs	r1, #0
    5a80:	2000      	movs	r0, #0
    5a82:	4b1e      	ldr	r3, [pc, #120]	; (5afc <switch_pll_on+0xa8>)
    5a84:	4798      	blx	r3
    5a86:	2109      	movs	r1, #9
    5a88:	2002      	movs	r0, #2
    5a8a:	47a0      	blx	r4
    5a8c:	a801      	add	r0, sp, #4
    5a8e:	4b1c      	ldr	r3, [pc, #112]	; (5b00 <switch_pll_on+0xac>)
    5a90:	4798      	blx	r3
    5a92:	4e1c      	ldr	r6, [pc, #112]	; (5b04 <switch_pll_on+0xb0>)
    5a94:	4f1a      	ldr	r7, [pc, #104]	; (5b00 <switch_pll_on+0xac>)
    5a96:	2401      	movs	r4, #1
    5a98:	6a33      	ldr	r3, [r6, #32]
    5a9a:	421c      	tst	r4, r3
    5a9c:	d118      	bne.n	5ad0 <switch_pll_on+0x7c>
    5a9e:	4668      	mov	r0, sp
    5aa0:	47b8      	blx	r7
    5aa2:	9b00      	ldr	r3, [sp, #0]
    5aa4:	9a01      	ldr	r2, [sp, #4]
    5aa6:	1a9b      	subs	r3, r3, r2
    5aa8:	2bfa      	cmp	r3, #250	; 0xfa
    5aaa:	d9f5      	bls.n	5a98 <switch_pll_on+0x44>
    5aac:	201a      	movs	r0, #26
    5aae:	4b11      	ldr	r3, [pc, #68]	; (5af4 <switch_pll_on+0xa0>)
    5ab0:	4798      	blx	r3
    5ab2:	07c3      	lsls	r3, r0, #31
    5ab4:	d508      	bpl.n	5ac8 <switch_pll_on+0x74>
    5ab6:	21fe      	movs	r1, #254	; 0xfe
    5ab8:	4001      	ands	r1, r0
    5aba:	201a      	movs	r0, #26
    5abc:	4b0e      	ldr	r3, [pc, #56]	; (5af8 <switch_pll_on+0xa4>)
    5abe:	4798      	blx	r3
    5ac0:	a801      	add	r0, sp, #4
    5ac2:	4b0f      	ldr	r3, [pc, #60]	; (5b00 <switch_pll_on+0xac>)
    5ac4:	4798      	blx	r3
    5ac6:	e7e6      	b.n	5a96 <switch_pll_on+0x42>
    5ac8:	2101      	movs	r1, #1
    5aca:	4301      	orrs	r1, r0
    5acc:	b2c9      	uxtb	r1, r1
    5ace:	e7f4      	b.n	5aba <switch_pll_on+0x66>
    5ad0:	200f      	movs	r0, #15
    5ad2:	4b08      	ldr	r3, [pc, #32]	; (5af4 <switch_pll_on+0xa0>)
    5ad4:	4798      	blx	r3
    5ad6:	2201      	movs	r2, #1
    5ad8:	4b0b      	ldr	r3, [pc, #44]	; (5b08 <switch_pll_on+0xb4>)
    5ada:	611a      	str	r2, [r3, #16]
    5adc:	2100      	movs	r1, #0
    5ade:	2000      	movs	r0, #0
    5ae0:	4b0a      	ldr	r3, [pc, #40]	; (5b0c <switch_pll_on+0xb8>)
    5ae2:	4798      	blx	r3
    5ae4:	0029      	movs	r1, r5
    5ae6:	200e      	movs	r0, #14
    5ae8:	4b03      	ldr	r3, [pc, #12]	; (5af8 <switch_pll_on+0xa4>)
    5aea:	4798      	blx	r3
    5aec:	e7bb      	b.n	5a66 <switch_pll_on+0x12>
    5aee:	46c0      	nop			; (mov r8, r8)
    5af0:	00006c35 	.word	0x00006c35
    5af4:	00006a2d 	.word	0x00006a2d
    5af8:	00006b29 	.word	0x00006b29
    5afc:	00003e65 	.word	0x00003e65
    5b00:	00005771 	.word	0x00005771
    5b04:	41004480 	.word	0x41004480
    5b08:	40001800 	.word	0x40001800
    5b0c:	00003e45 	.word	0x00003e45

00005b10 <set_trx_state>:
    5b10:	b570      	push	{r4, r5, r6, lr}
    5b12:	b082      	sub	sp, #8
    5b14:	0004      	movs	r4, r0
    5b16:	4b96      	ldr	r3, [pc, #600]	; (5d70 <set_trx_state+0x260>)
    5b18:	7818      	ldrb	r0, [r3, #0]
    5b1a:	280f      	cmp	r0, #15
    5b1c:	d007      	beq.n	5b2e <set_trx_state+0x1e>
    5b1e:	3c03      	subs	r4, #3
    5b20:	b2e3      	uxtb	r3, r4
    5b22:	2b16      	cmp	r3, #22
    5b24:	d87c      	bhi.n	5c20 <set_trx_state+0x110>
    5b26:	009c      	lsls	r4, r3, #2
    5b28:	4b92      	ldr	r3, [pc, #584]	; (5d74 <set_trx_state+0x264>)
    5b2a:	591b      	ldr	r3, [r3, r4]
    5b2c:	469f      	mov	pc, r3
    5b2e:	2c0f      	cmp	r4, #15
    5b30:	d100      	bne.n	5b34 <set_trx_state+0x24>
    5b32:	e07e      	b.n	5c32 <set_trx_state+0x122>
    5b34:	2600      	movs	r6, #0
    5b36:	4b90      	ldr	r3, [pc, #576]	; (5d78 <set_trx_state+0x268>)
    5b38:	701e      	strb	r6, [r3, #0]
    5b3a:	4890      	ldr	r0, [pc, #576]	; (5d7c <set_trx_state+0x26c>)
    5b3c:	4b90      	ldr	r3, [pc, #576]	; (5d80 <set_trx_state+0x270>)
    5b3e:	4798      	blx	r3
    5b40:	2501      	movs	r5, #1
    5b42:	4b90      	ldr	r3, [pc, #576]	; (5d84 <set_trx_state+0x274>)
    5b44:	611d      	str	r5, [r3, #16]
    5b46:	2100      	movs	r1, #0
    5b48:	2000      	movs	r0, #0
    5b4a:	4b8f      	ldr	r3, [pc, #572]	; (5d88 <set_trx_state+0x278>)
    5b4c:	4798      	blx	r3
    5b4e:	f3ef 8310 	mrs	r3, PRIMASK
    5b52:	425a      	negs	r2, r3
    5b54:	4153      	adcs	r3, r2
    5b56:	9301      	str	r3, [sp, #4]
    5b58:	b672      	cpsid	i
    5b5a:	f3bf 8f5f 	dmb	sy
    5b5e:	4b8b      	ldr	r3, [pc, #556]	; (5d8c <set_trx_state+0x27c>)
    5b60:	701e      	strb	r6, [r3, #0]
    5b62:	9901      	ldr	r1, [sp, #4]
    5b64:	701d      	strb	r5, [r3, #0]
    5b66:	f3bf 8f5f 	dmb	sy
    5b6a:	b662      	cpsie	i
    5b6c:	2280      	movs	r2, #128	; 0x80
    5b6e:	0352      	lsls	r2, r2, #13
    5b70:	4b87      	ldr	r3, [pc, #540]	; (5d90 <set_trx_state+0x280>)
    5b72:	615a      	str	r2, [r3, #20]
    5b74:	4a80      	ldr	r2, [pc, #512]	; (5d78 <set_trx_state+0x268>)
    5b76:	7813      	ldrb	r3, [r2, #0]
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d0fc      	beq.n	5b76 <set_trx_state+0x66>
    5b7c:	23ff      	movs	r3, #255	; 0xff
    5b7e:	420b      	tst	r3, r1
    5b80:	d005      	beq.n	5b8e <set_trx_state+0x7e>
    5b82:	2201      	movs	r2, #1
    5b84:	4b81      	ldr	r3, [pc, #516]	; (5d8c <set_trx_state+0x27c>)
    5b86:	701a      	strb	r2, [r3, #0]
    5b88:	f3bf 8f5f 	dmb	sy
    5b8c:	b662      	cpsie	i
    5b8e:	200f      	movs	r0, #15
    5b90:	4b80      	ldr	r3, [pc, #512]	; (5d94 <set_trx_state+0x284>)
    5b92:	4798      	blx	r3
    5b94:	4880      	ldr	r0, [pc, #512]	; (5d98 <set_trx_state+0x288>)
    5b96:	4b7a      	ldr	r3, [pc, #488]	; (5d80 <set_trx_state+0x270>)
    5b98:	4798      	blx	r3
    5b9a:	2108      	movs	r1, #8
    5b9c:	200e      	movs	r0, #14
    5b9e:	4b7f      	ldr	r3, [pc, #508]	; (5d9c <set_trx_state+0x28c>)
    5ba0:	4798      	blx	r3
    5ba2:	2301      	movs	r3, #1
    5ba4:	2202      	movs	r2, #2
    5ba6:	2104      	movs	r1, #4
    5ba8:	200d      	movs	r0, #13
    5baa:	4d7d      	ldr	r5, [pc, #500]	; (5da0 <set_trx_state+0x290>)
    5bac:	47a8      	blx	r5
    5bae:	2208      	movs	r2, #8
    5bb0:	4b6f      	ldr	r3, [pc, #444]	; (5d70 <set_trx_state+0x260>)
    5bb2:	701a      	strb	r2, [r3, #0]
    5bb4:	2008      	movs	r0, #8
    5bb6:	2c08      	cmp	r4, #8
    5bb8:	d03b      	beq.n	5c32 <set_trx_state+0x122>
    5bba:	2c03      	cmp	r4, #3
    5bbc:	d039      	beq.n	5c32 <set_trx_state+0x122>
    5bbe:	3c04      	subs	r4, #4
    5bc0:	b2e3      	uxtb	r3, r4
    5bc2:	2b15      	cmp	r3, #21
    5bc4:	d82c      	bhi.n	5c20 <set_trx_state+0x110>
    5bc6:	009c      	lsls	r4, r3, #2
    5bc8:	4b76      	ldr	r3, [pc, #472]	; (5da4 <set_trx_state+0x294>)
    5bca:	591b      	ldr	r3, [r3, r4]
    5bcc:	469f      	mov	pc, r3
    5bce:	2103      	movs	r1, #3
    5bd0:	2002      	movs	r0, #2
    5bd2:	4b72      	ldr	r3, [pc, #456]	; (5d9c <set_trx_state+0x28c>)
    5bd4:	4798      	blx	r3
    5bd6:	2300      	movs	r3, #0
    5bd8:	2202      	movs	r2, #2
    5bda:	2104      	movs	r1, #4
    5bdc:	200d      	movs	r0, #13
    5bde:	4c70      	ldr	r4, [pc, #448]	; (5da0 <set_trx_state+0x290>)
    5be0:	47a0      	blx	r4
    5be2:	200f      	movs	r0, #15
    5be4:	4b6b      	ldr	r3, [pc, #428]	; (5d94 <set_trx_state+0x284>)
    5be6:	4798      	blx	r3
    5be8:	2310      	movs	r3, #16
    5bea:	2200      	movs	r2, #0
    5bec:	21ff      	movs	r1, #255	; 0xff
    5bee:	200e      	movs	r0, #14
    5bf0:	47a0      	blx	r4
    5bf2:	2310      	movs	r3, #16
    5bf4:	2200      	movs	r2, #0
    5bf6:	21ff      	movs	r1, #255	; 0xff
    5bf8:	200e      	movs	r0, #14
    5bfa:	47a0      	blx	r4
    5bfc:	4c5c      	ldr	r4, [pc, #368]	; (5d70 <set_trx_state+0x260>)
    5bfe:	230f      	movs	r3, #15
    5c00:	7023      	strb	r3, [r4, #0]
    5c02:	2001      	movs	r0, #1
    5c04:	4d68      	ldr	r5, [pc, #416]	; (5da8 <set_trx_state+0x298>)
    5c06:	47a8      	blx	r5
    5c08:	2280      	movs	r2, #128	; 0x80
    5c0a:	0352      	lsls	r2, r2, #13
    5c0c:	4b60      	ldr	r3, [pc, #384]	; (5d90 <set_trx_state+0x280>)
    5c0e:	619a      	str	r2, [r3, #24]
    5c10:	2023      	movs	r0, #35	; 0x23
    5c12:	47a8      	blx	r5
    5c14:	7820      	ldrb	r0, [r4, #0]
    5c16:	e00c      	b.n	5c32 <set_trx_state+0x122>
    5c18:	4b55      	ldr	r3, [pc, #340]	; (5d70 <set_trx_state+0x260>)
    5c1a:	781b      	ldrb	r3, [r3, #0]
    5c1c:	2b08      	cmp	r3, #8
    5c1e:	d10a      	bne.n	5c36 <set_trx_state+0x126>
    5c20:	4d62      	ldr	r5, [pc, #392]	; (5dac <set_trx_state+0x29c>)
    5c22:	4c53      	ldr	r4, [pc, #332]	; (5d70 <set_trx_state+0x260>)
    5c24:	2200      	movs	r2, #0
    5c26:	211f      	movs	r1, #31
    5c28:	2001      	movs	r0, #1
    5c2a:	47a8      	blx	r5
    5c2c:	7020      	strb	r0, [r4, #0]
    5c2e:	281f      	cmp	r0, #31
    5c30:	d0f8      	beq.n	5c24 <set_trx_state+0x114>
    5c32:	b002      	add	sp, #8
    5c34:	bd70      	pop	{r4, r5, r6, pc}
    5c36:	2108      	movs	r1, #8
    5c38:	2002      	movs	r0, #2
    5c3a:	4b58      	ldr	r3, [pc, #352]	; (5d9c <set_trx_state+0x28c>)
    5c3c:	4798      	blx	r3
    5c3e:	2001      	movs	r0, #1
    5c40:	4b59      	ldr	r3, [pc, #356]	; (5da8 <set_trx_state+0x298>)
    5c42:	4798      	blx	r3
    5c44:	e7ec      	b.n	5c20 <set_trx_state+0x110>
    5c46:	2808      	cmp	r0, #8
    5c48:	d0ea      	beq.n	5c20 <set_trx_state+0x110>
    5c4a:	2103      	movs	r1, #3
    5c4c:	2002      	movs	r0, #2
    5c4e:	4b53      	ldr	r3, [pc, #332]	; (5d9c <set_trx_state+0x28c>)
    5c50:	4798      	blx	r3
    5c52:	2001      	movs	r0, #1
    5c54:	4b54      	ldr	r3, [pc, #336]	; (5da8 <set_trx_state+0x298>)
    5c56:	4798      	blx	r3
    5c58:	e7e2      	b.n	5c20 <set_trx_state+0x110>
    5c5a:	4b45      	ldr	r3, [pc, #276]	; (5d70 <set_trx_state+0x260>)
    5c5c:	781b      	ldrb	r3, [r3, #0]
    5c5e:	2b08      	cmp	r3, #8
    5c60:	d011      	beq.n	5c86 <set_trx_state+0x176>
    5c62:	b2da      	uxtb	r2, r3
    5c64:	2a08      	cmp	r2, #8
    5c66:	d904      	bls.n	5c72 <set_trx_state+0x162>
    5c68:	2b16      	cmp	r3, #22
    5c6a:	d004      	beq.n	5c76 <set_trx_state+0x166>
    5c6c:	2b19      	cmp	r3, #25
    5c6e:	d1d7      	bne.n	5c20 <set_trx_state+0x110>
    5c70:	e001      	b.n	5c76 <set_trx_state+0x166>
    5c72:	2b06      	cmp	r3, #6
    5c74:	d1d4      	bne.n	5c20 <set_trx_state+0x110>
    5c76:	2109      	movs	r1, #9
    5c78:	2002      	movs	r0, #2
    5c7a:	4b48      	ldr	r3, [pc, #288]	; (5d9c <set_trx_state+0x28c>)
    5c7c:	4798      	blx	r3
    5c7e:	2001      	movs	r0, #1
    5c80:	4b49      	ldr	r3, [pc, #292]	; (5da8 <set_trx_state+0x298>)
    5c82:	4798      	blx	r3
    5c84:	e7cc      	b.n	5c20 <set_trx_state+0x110>
    5c86:	4b4a      	ldr	r3, [pc, #296]	; (5db0 <set_trx_state+0x2a0>)
    5c88:	4798      	blx	r3
    5c8a:	e7c9      	b.n	5c20 <set_trx_state+0x110>
    5c8c:	4b38      	ldr	r3, [pc, #224]	; (5d70 <set_trx_state+0x260>)
    5c8e:	781b      	ldrb	r3, [r3, #0]
    5c90:	2b08      	cmp	r3, #8
    5c92:	d006      	beq.n	5ca2 <set_trx_state+0x192>
    5c94:	2b09      	cmp	r3, #9
    5c96:	d0c3      	beq.n	5c20 <set_trx_state+0x110>
    5c98:	2104      	movs	r1, #4
    5c9a:	2002      	movs	r0, #2
    5c9c:	4b3f      	ldr	r3, [pc, #252]	; (5d9c <set_trx_state+0x28c>)
    5c9e:	4798      	blx	r3
    5ca0:	e7be      	b.n	5c20 <set_trx_state+0x110>
    5ca2:	4b43      	ldr	r3, [pc, #268]	; (5db0 <set_trx_state+0x2a0>)
    5ca4:	4798      	blx	r3
    5ca6:	e7bb      	b.n	5c20 <set_trx_state+0x110>
    5ca8:	4b31      	ldr	r3, [pc, #196]	; (5d70 <set_trx_state+0x260>)
    5caa:	781b      	ldrb	r3, [r3, #0]
    5cac:	2b09      	cmp	r3, #9
    5cae:	d012      	beq.n	5cd6 <set_trx_state+0x1c6>
    5cb0:	b2da      	uxtb	r2, r3
    5cb2:	2a09      	cmp	r2, #9
    5cb4:	d80b      	bhi.n	5cce <set_trx_state+0x1be>
    5cb6:	2b08      	cmp	r3, #8
    5cb8:	d1b2      	bne.n	5c20 <set_trx_state+0x110>
    5cba:	4b3d      	ldr	r3, [pc, #244]	; (5db0 <set_trx_state+0x2a0>)
    5cbc:	4798      	blx	r3
    5cbe:	2106      	movs	r1, #6
    5cc0:	2002      	movs	r0, #2
    5cc2:	4b36      	ldr	r3, [pc, #216]	; (5d9c <set_trx_state+0x28c>)
    5cc4:	4798      	blx	r3
    5cc6:	2001      	movs	r0, #1
    5cc8:	4b37      	ldr	r3, [pc, #220]	; (5da8 <set_trx_state+0x298>)
    5cca:	4798      	blx	r3
    5ccc:	e7a8      	b.n	5c20 <set_trx_state+0x110>
    5cce:	2b16      	cmp	r3, #22
    5cd0:	d001      	beq.n	5cd6 <set_trx_state+0x1c6>
    5cd2:	2b19      	cmp	r3, #25
    5cd4:	d1a4      	bne.n	5c20 <set_trx_state+0x110>
    5cd6:	2106      	movs	r1, #6
    5cd8:	2002      	movs	r0, #2
    5cda:	4b30      	ldr	r3, [pc, #192]	; (5d9c <set_trx_state+0x28c>)
    5cdc:	4798      	blx	r3
    5cde:	2001      	movs	r0, #1
    5ce0:	4b31      	ldr	r3, [pc, #196]	; (5da8 <set_trx_state+0x298>)
    5ce2:	4798      	blx	r3
    5ce4:	e79c      	b.n	5c20 <set_trx_state+0x110>
    5ce6:	4b22      	ldr	r3, [pc, #136]	; (5d70 <set_trx_state+0x260>)
    5ce8:	781b      	ldrb	r3, [r3, #0]
    5cea:	2b08      	cmp	r3, #8
    5cec:	d013      	beq.n	5d16 <set_trx_state+0x206>
    5cee:	b2da      	uxtb	r2, r3
    5cf0:	2a08      	cmp	r2, #8
    5cf2:	d905      	bls.n	5d00 <set_trx_state+0x1f0>
    5cf4:	2b09      	cmp	r3, #9
    5cf6:	d006      	beq.n	5d06 <set_trx_state+0x1f6>
    5cf8:	2b19      	cmp	r3, #25
    5cfa:	d000      	beq.n	5cfe <set_trx_state+0x1ee>
    5cfc:	e790      	b.n	5c20 <set_trx_state+0x110>
    5cfe:	e002      	b.n	5d06 <set_trx_state+0x1f6>
    5d00:	2b06      	cmp	r3, #6
    5d02:	d000      	beq.n	5d06 <set_trx_state+0x1f6>
    5d04:	e78c      	b.n	5c20 <set_trx_state+0x110>
    5d06:	2116      	movs	r1, #22
    5d08:	2002      	movs	r0, #2
    5d0a:	4b24      	ldr	r3, [pc, #144]	; (5d9c <set_trx_state+0x28c>)
    5d0c:	4798      	blx	r3
    5d0e:	2001      	movs	r0, #1
    5d10:	4b25      	ldr	r3, [pc, #148]	; (5da8 <set_trx_state+0x298>)
    5d12:	4798      	blx	r3
    5d14:	e784      	b.n	5c20 <set_trx_state+0x110>
    5d16:	4b26      	ldr	r3, [pc, #152]	; (5db0 <set_trx_state+0x2a0>)
    5d18:	4798      	blx	r3
    5d1a:	2116      	movs	r1, #22
    5d1c:	2002      	movs	r0, #2
    5d1e:	4b1f      	ldr	r3, [pc, #124]	; (5d9c <set_trx_state+0x28c>)
    5d20:	4798      	blx	r3
    5d22:	2001      	movs	r0, #1
    5d24:	4b20      	ldr	r3, [pc, #128]	; (5da8 <set_trx_state+0x298>)
    5d26:	4798      	blx	r3
    5d28:	e77a      	b.n	5c20 <set_trx_state+0x110>
    5d2a:	4b11      	ldr	r3, [pc, #68]	; (5d70 <set_trx_state+0x260>)
    5d2c:	781b      	ldrb	r3, [r3, #0]
    5d2e:	2b08      	cmp	r3, #8
    5d30:	d013      	beq.n	5d5a <set_trx_state+0x24a>
    5d32:	b2da      	uxtb	r2, r3
    5d34:	2a08      	cmp	r2, #8
    5d36:	d905      	bls.n	5d44 <set_trx_state+0x234>
    5d38:	2b09      	cmp	r3, #9
    5d3a:	d006      	beq.n	5d4a <set_trx_state+0x23a>
    5d3c:	2b16      	cmp	r3, #22
    5d3e:	d000      	beq.n	5d42 <set_trx_state+0x232>
    5d40:	e76e      	b.n	5c20 <set_trx_state+0x110>
    5d42:	e002      	b.n	5d4a <set_trx_state+0x23a>
    5d44:	2b06      	cmp	r3, #6
    5d46:	d000      	beq.n	5d4a <set_trx_state+0x23a>
    5d48:	e76a      	b.n	5c20 <set_trx_state+0x110>
    5d4a:	2119      	movs	r1, #25
    5d4c:	2002      	movs	r0, #2
    5d4e:	4b13      	ldr	r3, [pc, #76]	; (5d9c <set_trx_state+0x28c>)
    5d50:	4798      	blx	r3
    5d52:	2001      	movs	r0, #1
    5d54:	4b14      	ldr	r3, [pc, #80]	; (5da8 <set_trx_state+0x298>)
    5d56:	4798      	blx	r3
    5d58:	e762      	b.n	5c20 <set_trx_state+0x110>
    5d5a:	4b15      	ldr	r3, [pc, #84]	; (5db0 <set_trx_state+0x2a0>)
    5d5c:	4798      	blx	r3
    5d5e:	2119      	movs	r1, #25
    5d60:	2002      	movs	r0, #2
    5d62:	4b0e      	ldr	r3, [pc, #56]	; (5d9c <set_trx_state+0x28c>)
    5d64:	4798      	blx	r3
    5d66:	2001      	movs	r0, #1
    5d68:	4b0f      	ldr	r3, [pc, #60]	; (5da8 <set_trx_state+0x298>)
    5d6a:	4798      	blx	r3
    5d6c:	e758      	b.n	5c20 <set_trx_state+0x110>
    5d6e:	46c0      	nop			; (mov r8, r8)
    5d70:	20000bc3 	.word	0x20000bc3
    5d74:	000096e0 	.word	0x000096e0
    5d78:	20000bcc 	.word	0x20000bcc
    5d7c:	000061d1 	.word	0x000061d1
    5d80:	00006c29 	.word	0x00006c29
    5d84:	40001800 	.word	0x40001800
    5d88:	00003e45 	.word	0x00003e45
    5d8c:	2000000c 	.word	0x2000000c
    5d90:	41004400 	.word	0x41004400
    5d94:	00006a2d 	.word	0x00006a2d
    5d98:	00006191 	.word	0x00006191
    5d9c:	00006b29 	.word	0x00006b29
    5da0:	00006c4d 	.word	0x00006c4d
    5da4:	0000973c 	.word	0x0000973c
    5da8:	00003d51 	.word	0x00003d51
    5dac:	00006c35 	.word	0x00006c35
    5db0:	00005a55 	.word	0x00005a55

00005db4 <tal_task>:
    5db4:	b510      	push	{r4, lr}
    5db6:	4b17      	ldr	r3, [pc, #92]	; (5e14 <tal_task+0x60>)
    5db8:	781b      	ldrb	r3, [r3, #0]
    5dba:	2b00      	cmp	r3, #0
    5dbc:	d00d      	beq.n	5dda <tal_task+0x26>
    5dbe:	4b16      	ldr	r3, [pc, #88]	; (5e18 <tal_task+0x64>)
    5dc0:	781b      	ldrb	r3, [r3, #0]
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d109      	bne.n	5dda <tal_task+0x26>
    5dc6:	4b15      	ldr	r3, [pc, #84]	; (5e1c <tal_task+0x68>)
    5dc8:	681b      	ldr	r3, [r3, #0]
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d010      	beq.n	5df0 <tal_task+0x3c>
    5dce:	2200      	movs	r2, #0
    5dd0:	4b10      	ldr	r3, [pc, #64]	; (5e14 <tal_task+0x60>)
    5dd2:	701a      	strb	r2, [r3, #0]
    5dd4:	2016      	movs	r0, #22
    5dd6:	4b12      	ldr	r3, [pc, #72]	; (5e20 <tal_task+0x6c>)
    5dd8:	4798      	blx	r3
    5dda:	4b12      	ldr	r3, [pc, #72]	; (5e24 <tal_task+0x70>)
    5ddc:	7a1b      	ldrb	r3, [r3, #8]
    5dde:	2b00      	cmp	r3, #0
    5de0:	d10e      	bne.n	5e00 <tal_task+0x4c>
    5de2:	4b0d      	ldr	r3, [pc, #52]	; (5e18 <tal_task+0x64>)
    5de4:	781b      	ldrb	r3, [r3, #0]
    5de6:	2b02      	cmp	r3, #2
    5de8:	d101      	bne.n	5dee <tal_task+0x3a>
    5dea:	4b0f      	ldr	r3, [pc, #60]	; (5e28 <tal_task+0x74>)
    5dec:	4798      	blx	r3
    5dee:	bd10      	pop	{r4, pc}
    5df0:	2090      	movs	r0, #144	; 0x90
    5df2:	4b0e      	ldr	r3, [pc, #56]	; (5e2c <tal_task+0x78>)
    5df4:	4798      	blx	r3
    5df6:	4b09      	ldr	r3, [pc, #36]	; (5e1c <tal_task+0x68>)
    5df8:	6018      	str	r0, [r3, #0]
    5dfa:	2800      	cmp	r0, #0
    5dfc:	d0ed      	beq.n	5dda <tal_task+0x26>
    5dfe:	e7e6      	b.n	5dce <tal_task+0x1a>
    5e00:	2100      	movs	r1, #0
    5e02:	4808      	ldr	r0, [pc, #32]	; (5e24 <tal_task+0x70>)
    5e04:	4b0a      	ldr	r3, [pc, #40]	; (5e30 <tal_task+0x7c>)
    5e06:	4798      	blx	r3
    5e08:	2800      	cmp	r0, #0
    5e0a:	d0ea      	beq.n	5de2 <tal_task+0x2e>
    5e0c:	4b09      	ldr	r3, [pc, #36]	; (5e34 <tal_task+0x80>)
    5e0e:	4798      	blx	r3
    5e10:	e7e7      	b.n	5de2 <tal_task+0x2e>
    5e12:	46c0      	nop			; (mov r8, r8)
    5e14:	20000b90 	.word	0x20000b90
    5e18:	20000bcd 	.word	0x20000bcd
    5e1c:	200003a4 	.word	0x200003a4
    5e20:	00005b11 	.word	0x00005b11
    5e24:	20000b94 	.word	0x20000b94
    5e28:	000066b9 	.word	0x000066b9
    5e2c:	000057e1 	.word	0x000057e1
    5e30:	00005a45 	.word	0x00005a45
    5e34:	000065e5 	.word	0x000065e5

00005e38 <trx_config>:
    5e38:	b570      	push	{r4, r5, r6, lr}
    5e3a:	2300      	movs	r3, #0
    5e3c:	2203      	movs	r2, #3
    5e3e:	2108      	movs	r1, #8
    5e40:	2003      	movs	r0, #3
    5e42:	4c1f      	ldr	r4, [pc, #124]	; (5ec0 <trx_config+0x88>)
    5e44:	47a0      	blx	r4
    5e46:	2301      	movs	r3, #1
    5e48:	2200      	movs	r2, #0
    5e4a:	2107      	movs	r1, #7
    5e4c:	2003      	movs	r0, #3
    5e4e:	47a0      	blx	r4
    5e50:	4b1c      	ldr	r3, [pc, #112]	; (5ec4 <trx_config+0x8c>)
    5e52:	4798      	blx	r3
    5e54:	0005      	movs	r5, r0
    5e56:	b2c1      	uxtb	r1, r0
    5e58:	202d      	movs	r0, #45	; 0x2d
    5e5a:	4e1b      	ldr	r6, [pc, #108]	; (5ec8 <trx_config+0x90>)
    5e5c:	47b0      	blx	r6
    5e5e:	b2ab      	uxth	r3, r5
    5e60:	0a1b      	lsrs	r3, r3, #8
    5e62:	2200      	movs	r2, #0
    5e64:	2107      	movs	r1, #7
    5e66:	202e      	movs	r0, #46	; 0x2e
    5e68:	47a0      	blx	r4
    5e6a:	2301      	movs	r3, #1
    5e6c:	2206      	movs	r2, #6
    5e6e:	21c0      	movs	r1, #192	; 0xc0
    5e70:	202e      	movs	r0, #46	; 0x2e
    5e72:	47a0      	blx	r4
    5e74:	2301      	movs	r3, #1
    5e76:	2205      	movs	r2, #5
    5e78:	2120      	movs	r1, #32
    5e7a:	202e      	movs	r0, #46	; 0x2e
    5e7c:	47a0      	blx	r4
    5e7e:	2301      	movs	r3, #1
    5e80:	2207      	movs	r2, #7
    5e82:	2180      	movs	r1, #128	; 0x80
    5e84:	200c      	movs	r0, #12
    5e86:	47a0      	blx	r4
    5e88:	2108      	movs	r1, #8
    5e8a:	200e      	movs	r0, #14
    5e8c:	47b0      	blx	r6
    5e8e:	21ff      	movs	r1, #255	; 0xff
    5e90:	2016      	movs	r0, #22
    5e92:	47b0      	blx	r6
    5e94:	2301      	movs	r3, #1
    5e96:	2200      	movs	r2, #0
    5e98:	2103      	movs	r1, #3
    5e9a:	200d      	movs	r0, #13
    5e9c:	47a0      	blx	r4
    5e9e:	2303      	movs	r3, #3
    5ea0:	2200      	movs	r2, #0
    5ea2:	210f      	movs	r1, #15
    5ea4:	200a      	movs	r0, #10
    5ea6:	47a0      	blx	r4
    5ea8:	2301      	movs	r3, #1
    5eaa:	2203      	movs	r2, #3
    5eac:	2108      	movs	r1, #8
    5eae:	200d      	movs	r0, #13
    5eb0:	47a0      	blx	r4
    5eb2:	2301      	movs	r3, #1
    5eb4:	2202      	movs	r2, #2
    5eb6:	2104      	movs	r1, #4
    5eb8:	200d      	movs	r0, #13
    5eba:	47a0      	blx	r4
    5ebc:	bd70      	pop	{r4, r5, r6, pc}
    5ebe:	46c0      	nop			; (mov r8, r8)
    5ec0:	00006c4d 	.word	0x00006c4d
    5ec4:	000077b9 	.word	0x000077b9
    5ec8:	00006b29 	.word	0x00006b29

00005ecc <tal_generate_rand_seed>:
    5ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ece:	b083      	sub	sp, #12
    5ed0:	2016      	movs	r0, #22
    5ed2:	4b1f      	ldr	r3, [pc, #124]	; (5f50 <tal_generate_rand_seed+0x84>)
    5ed4:	4798      	blx	r3
    5ed6:	9001      	str	r0, [sp, #4]
    5ed8:	21c1      	movs	r1, #193	; 0xc1
    5eda:	2016      	movs	r0, #22
    5edc:	4b1d      	ldr	r3, [pc, #116]	; (5f54 <tal_generate_rand_seed+0x88>)
    5ede:	4798      	blx	r3
    5ee0:	2100      	movs	r1, #0
    5ee2:	2000      	movs	r0, #0
    5ee4:	4b1c      	ldr	r3, [pc, #112]	; (5f58 <tal_generate_rand_seed+0x8c>)
    5ee6:	4798      	blx	r3
    5ee8:	4c1c      	ldr	r4, [pc, #112]	; (5f5c <tal_generate_rand_seed+0x90>)
    5eea:	2006      	movs	r0, #6
    5eec:	47a0      	blx	r4
    5eee:	2806      	cmp	r0, #6
    5ef0:	d1fb      	bne.n	5eea <tal_generate_rand_seed+0x1e>
    5ef2:	2300      	movs	r3, #0
    5ef4:	2207      	movs	r2, #7
    5ef6:	2180      	movs	r1, #128	; 0x80
    5ef8:	300f      	adds	r0, #15
    5efa:	4c19      	ldr	r4, [pc, #100]	; (5f60 <tal_generate_rand_seed+0x94>)
    5efc:	47a0      	blx	r4
    5efe:	2608      	movs	r6, #8
    5f00:	2400      	movs	r4, #0
    5f02:	4d18      	ldr	r5, [pc, #96]	; (5f64 <tal_generate_rand_seed+0x98>)
    5f04:	4f18      	ldr	r7, [pc, #96]	; (5f68 <tal_generate_rand_seed+0x9c>)
    5f06:	2205      	movs	r2, #5
    5f08:	2160      	movs	r1, #96	; 0x60
    5f0a:	2006      	movs	r0, #6
    5f0c:	47a8      	blx	r5
    5f0e:	00a4      	lsls	r4, r4, #2
    5f10:	b2a4      	uxth	r4, r4
    5f12:	4304      	orrs	r4, r0
    5f14:	b2a4      	uxth	r4, r4
    5f16:	2001      	movs	r0, #1
    5f18:	47b8      	blx	r7
    5f1a:	3e01      	subs	r6, #1
    5f1c:	b2f6      	uxtb	r6, r6
    5f1e:	2e00      	cmp	r6, #0
    5f20:	d1f1      	bne.n	5f06 <tal_generate_rand_seed+0x3a>
    5f22:	2003      	movs	r0, #3
    5f24:	4b0d      	ldr	r3, [pc, #52]	; (5f5c <tal_generate_rand_seed+0x90>)
    5f26:	4798      	blx	r3
    5f28:	200f      	movs	r0, #15
    5f2a:	4b09      	ldr	r3, [pc, #36]	; (5f50 <tal_generate_rand_seed+0x84>)
    5f2c:	4798      	blx	r3
    5f2e:	2201      	movs	r2, #1
    5f30:	4b0e      	ldr	r3, [pc, #56]	; (5f6c <tal_generate_rand_seed+0xa0>)
    5f32:	611a      	str	r2, [r3, #16]
    5f34:	2100      	movs	r1, #0
    5f36:	2000      	movs	r0, #0
    5f38:	4b0d      	ldr	r3, [pc, #52]	; (5f70 <tal_generate_rand_seed+0xa4>)
    5f3a:	4798      	blx	r3
    5f3c:	0020      	movs	r0, r4
    5f3e:	4b0d      	ldr	r3, [pc, #52]	; (5f74 <tal_generate_rand_seed+0xa8>)
    5f40:	4798      	blx	r3
    5f42:	9901      	ldr	r1, [sp, #4]
    5f44:	2016      	movs	r0, #22
    5f46:	4b03      	ldr	r3, [pc, #12]	; (5f54 <tal_generate_rand_seed+0x88>)
    5f48:	4798      	blx	r3
    5f4a:	b003      	add	sp, #12
    5f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f4e:	46c0      	nop			; (mov r8, r8)
    5f50:	00006a2d 	.word	0x00006a2d
    5f54:	00006b29 	.word	0x00006b29
    5f58:	00003e65 	.word	0x00003e65
    5f5c:	00005b11 	.word	0x00005b11
    5f60:	00006c4d 	.word	0x00006c4d
    5f64:	00006c35 	.word	0x00006c35
    5f68:	00003d51 	.word	0x00003d51
    5f6c:	40001800 	.word	0x40001800
    5f70:	00003e45 	.word	0x00003e45
    5f74:	0000775d 	.word	0x0000775d

00005f78 <internal_tal_reset>:
    5f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f7a:	0005      	movs	r5, r0
    5f7c:	2280      	movs	r2, #128	; 0x80
    5f7e:	0352      	lsls	r2, r2, #13
    5f80:	4b1c      	ldr	r3, [pc, #112]	; (5ff4 <internal_tal_reset+0x7c>)
    5f82:	615a      	str	r2, [r3, #20]
    5f84:	20d2      	movs	r0, #210	; 0xd2
    5f86:	4c1c      	ldr	r4, [pc, #112]	; (5ff8 <internal_tal_reset+0x80>)
    5f88:	47a0      	blx	r4
    5f8a:	4e1c      	ldr	r6, [pc, #112]	; (5ffc <internal_tal_reset+0x84>)
    5f8c:	2780      	movs	r7, #128	; 0x80
    5f8e:	023f      	lsls	r7, r7, #8
    5f90:	6177      	str	r7, [r6, #20]
    5f92:	200a      	movs	r0, #10
    5f94:	47a0      	blx	r4
    5f96:	61b7      	str	r7, [r6, #24]
    5f98:	2064      	movs	r0, #100	; 0x64
    5f9a:	47a0      	blx	r4
    5f9c:	2200      	movs	r2, #0
    5f9e:	211f      	movs	r1, #31
    5fa0:	2001      	movs	r0, #1
    5fa2:	4b17      	ldr	r3, [pc, #92]	; (6000 <internal_tal_reset+0x88>)
    5fa4:	4798      	blx	r3
    5fa6:	240a      	movs	r4, #10
    5fa8:	4f13      	ldr	r7, [pc, #76]	; (5ff8 <internal_tal_reset+0x80>)
    5faa:	4e15      	ldr	r6, [pc, #84]	; (6000 <internal_tal_reset+0x88>)
    5fac:	2808      	cmp	r0, #8
    5fae:	d00b      	beq.n	5fc8 <internal_tal_reset+0x50>
    5fb0:	2064      	movs	r0, #100	; 0x64
    5fb2:	47b8      	blx	r7
    5fb4:	2200      	movs	r2, #0
    5fb6:	211f      	movs	r1, #31
    5fb8:	2001      	movs	r0, #1
    5fba:	47b0      	blx	r6
    5fbc:	3c01      	subs	r4, #1
    5fbe:	b2e4      	uxtb	r4, r4
    5fc0:	2c00      	cmp	r4, #0
    5fc2:	d1f3      	bne.n	5fac <internal_tal_reset+0x34>
    5fc4:	2085      	movs	r0, #133	; 0x85
    5fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fc8:	2208      	movs	r2, #8
    5fca:	4b0e      	ldr	r3, [pc, #56]	; (6004 <internal_tal_reset+0x8c>)
    5fcc:	701a      	strb	r2, [r3, #0]
    5fce:	4b0e      	ldr	r3, [pc, #56]	; (6008 <internal_tal_reset+0x90>)
    5fd0:	4798      	blx	r3
    5fd2:	4b0e      	ldr	r3, [pc, #56]	; (600c <internal_tal_reset+0x94>)
    5fd4:	4798      	blx	r3
    5fd6:	2d00      	cmp	r5, #0
    5fd8:	d108      	bne.n	5fec <internal_tal_reset+0x74>
    5fda:	4b0d      	ldr	r3, [pc, #52]	; (6010 <internal_tal_reset+0x98>)
    5fdc:	4798      	blx	r3
    5fde:	2300      	movs	r3, #0
    5fe0:	4a0c      	ldr	r2, [pc, #48]	; (6014 <internal_tal_reset+0x9c>)
    5fe2:	7013      	strb	r3, [r2, #0]
    5fe4:	4a0c      	ldr	r2, [pc, #48]	; (6018 <internal_tal_reset+0xa0>)
    5fe6:	7013      	strb	r3, [r2, #0]
    5fe8:	2000      	movs	r0, #0
    5fea:	e7ec      	b.n	5fc6 <internal_tal_reset+0x4e>
    5fec:	4b0b      	ldr	r3, [pc, #44]	; (601c <internal_tal_reset+0xa4>)
    5fee:	4798      	blx	r3
    5ff0:	e7f3      	b.n	5fda <internal_tal_reset+0x62>
    5ff2:	46c0      	nop			; (mov r8, r8)
    5ff4:	41004400 	.word	0x41004400
    5ff8:	00003d51 	.word	0x00003d51
    5ffc:	41004480 	.word	0x41004480
    6000:	00006c35 	.word	0x00006c35
    6004:	20000bc3 	.word	0x20000bc3
    6008:	00005ecd 	.word	0x00005ecd
    600c:	00005e39 	.word	0x00005e39
    6010:	00006285 	.word	0x00006285
    6014:	20000bcd 	.word	0x20000bcd
    6018:	20000b90 	.word	0x20000b90
    601c:	000061ed 	.word	0x000061ed

00006020 <tal_init>:
    6020:	b5f0      	push	{r4, r5, r6, r7, lr}
    6022:	46c6      	mov	lr, r8
    6024:	b500      	push	{lr}
    6026:	4b46      	ldr	r3, [pc, #280]	; (6140 <tal_init+0x120>)
    6028:	4798      	blx	r3
    602a:	2485      	movs	r4, #133	; 0x85
    602c:	2800      	cmp	r0, #0
    602e:	d003      	beq.n	6038 <tal_init+0x18>
    6030:	0020      	movs	r0, r4
    6032:	bc04      	pop	{r2}
    6034:	4690      	mov	r8, r2
    6036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6038:	4c42      	ldr	r4, [pc, #264]	; (6144 <tal_init+0x124>)
    603a:	2580      	movs	r5, #128	; 0x80
    603c:	022d      	lsls	r5, r5, #8
    603e:	61a5      	str	r5, [r4, #24]
    6040:	2280      	movs	r2, #128	; 0x80
    6042:	0352      	lsls	r2, r2, #13
    6044:	4b40      	ldr	r3, [pc, #256]	; (6148 <tal_init+0x128>)
    6046:	615a      	str	r2, [r3, #20]
    6048:	304b      	adds	r0, #75	; 0x4b
    604a:	30ff      	adds	r0, #255	; 0xff
    604c:	4e3f      	ldr	r6, [pc, #252]	; (614c <tal_init+0x12c>)
    604e:	47b0      	blx	r6
    6050:	6165      	str	r5, [r4, #20]
    6052:	200a      	movs	r0, #10
    6054:	47b0      	blx	r6
    6056:	61a5      	str	r5, [r4, #24]
    6058:	240a      	movs	r4, #10
    605a:	4e3c      	ldr	r6, [pc, #240]	; (614c <tal_init+0x12c>)
    605c:	4d3c      	ldr	r5, [pc, #240]	; (6150 <tal_init+0x130>)
    605e:	2064      	movs	r0, #100	; 0x64
    6060:	47b0      	blx	r6
    6062:	201c      	movs	r0, #28
    6064:	47a8      	blx	r5
    6066:	280b      	cmp	r0, #11
    6068:	d005      	beq.n	6076 <tal_init+0x56>
    606a:	3c01      	subs	r4, #1
    606c:	b2e4      	uxtb	r4, r4
    606e:	2c00      	cmp	r4, #0
    6070:	d1f5      	bne.n	605e <tal_init+0x3e>
    6072:	2485      	movs	r4, #133	; 0x85
    6074:	e7dc      	b.n	6030 <tal_init+0x10>
    6076:	2108      	movs	r1, #8
    6078:	3809      	subs	r0, #9
    607a:	4b36      	ldr	r3, [pc, #216]	; (6154 <tal_init+0x134>)
    607c:	4798      	blx	r3
    607e:	2064      	movs	r0, #100	; 0x64
    6080:	4b32      	ldr	r3, [pc, #200]	; (614c <tal_init+0x12c>)
    6082:	4798      	blx	r3
    6084:	2200      	movs	r2, #0
    6086:	211f      	movs	r1, #31
    6088:	2001      	movs	r0, #1
    608a:	4b33      	ldr	r3, [pc, #204]	; (6158 <tal_init+0x138>)
    608c:	4798      	blx	r3
    608e:	240a      	movs	r4, #10
    6090:	4e2e      	ldr	r6, [pc, #184]	; (614c <tal_init+0x12c>)
    6092:	4d31      	ldr	r5, [pc, #196]	; (6158 <tal_init+0x138>)
    6094:	2808      	cmp	r0, #8
    6096:	d00a      	beq.n	60ae <tal_init+0x8e>
    6098:	2064      	movs	r0, #100	; 0x64
    609a:	47b0      	blx	r6
    609c:	2200      	movs	r2, #0
    609e:	211f      	movs	r1, #31
    60a0:	2001      	movs	r0, #1
    60a2:	47a8      	blx	r5
    60a4:	3c01      	subs	r4, #1
    60a6:	b2e4      	uxtb	r4, r4
    60a8:	2c00      	cmp	r4, #0
    60aa:	d1f3      	bne.n	6094 <tal_init+0x74>
    60ac:	e7e1      	b.n	6072 <tal_init+0x52>
    60ae:	2208      	movs	r2, #8
    60b0:	4b2a      	ldr	r3, [pc, #168]	; (615c <tal_init+0x13c>)
    60b2:	701a      	strb	r2, [r3, #0]
    60b4:	3807      	subs	r0, #7
    60b6:	4b2a      	ldr	r3, [pc, #168]	; (6160 <tal_init+0x140>)
    60b8:	4798      	blx	r3
    60ba:	1e04      	subs	r4, r0, #0
    60bc:	d001      	beq.n	60c2 <tal_init+0xa2>
    60be:	2485      	movs	r4, #133	; 0x85
    60c0:	e7b6      	b.n	6030 <tal_init+0x10>
    60c2:	4f28      	ldr	r7, [pc, #160]	; (6164 <tal_init+0x144>)
    60c4:	4e28      	ldr	r6, [pc, #160]	; (6168 <tal_init+0x148>)
    60c6:	e008      	b.n	60da <tal_init+0xba>
    60c8:	4d26      	ldr	r5, [pc, #152]	; (6164 <tal_init+0x144>)
    60ca:	2308      	movs	r3, #8
    60cc:	4698      	mov	r8, r3
    60ce:	44a8      	add	r8, r5
    60d0:	47b0      	blx	r6
    60d2:	7028      	strb	r0, [r5, #0]
    60d4:	3501      	adds	r5, #1
    60d6:	4545      	cmp	r5, r8
    60d8:	d1fa      	bne.n	60d0 <tal_init+0xb0>
    60da:	7838      	ldrb	r0, [r7, #0]
    60dc:	7879      	ldrb	r1, [r7, #1]
    60de:	0209      	lsls	r1, r1, #8
    60e0:	4308      	orrs	r0, r1
    60e2:	78b9      	ldrb	r1, [r7, #2]
    60e4:	0409      	lsls	r1, r1, #16
    60e6:	4301      	orrs	r1, r0
    60e8:	78f8      	ldrb	r0, [r7, #3]
    60ea:	0600      	lsls	r0, r0, #24
    60ec:	4308      	orrs	r0, r1
    60ee:	0002      	movs	r2, r0
    60f0:	7938      	ldrb	r0, [r7, #4]
    60f2:	7979      	ldrb	r1, [r7, #5]
    60f4:	0209      	lsls	r1, r1, #8
    60f6:	4308      	orrs	r0, r1
    60f8:	79b9      	ldrb	r1, [r7, #6]
    60fa:	0409      	lsls	r1, r1, #16
    60fc:	4301      	orrs	r1, r0
    60fe:	79f8      	ldrb	r0, [r7, #7]
    6100:	0600      	lsls	r0, r0, #24
    6102:	4308      	orrs	r0, r1
    6104:	0003      	movs	r3, r0
    6106:	2001      	movs	r0, #1
    6108:	4240      	negs	r0, r0
    610a:	17c1      	asrs	r1, r0, #31
    610c:	1812      	adds	r2, r2, r0
    610e:	414b      	adcs	r3, r1
    6110:	1c59      	adds	r1, r3, #1
    6112:	d101      	bne.n	6118 <tal_init+0xf8>
    6114:	1cd3      	adds	r3, r2, #3
    6116:	d8d7      	bhi.n	60c8 <tal_init+0xa8>
    6118:	4814      	ldr	r0, [pc, #80]	; (616c <tal_init+0x14c>)
    611a:	4b15      	ldr	r3, [pc, #84]	; (6170 <tal_init+0x150>)
    611c:	4798      	blx	r3
    611e:	2100      	movs	r1, #0
    6120:	2000      	movs	r0, #0
    6122:	4b14      	ldr	r3, [pc, #80]	; (6174 <tal_init+0x154>)
    6124:	4798      	blx	r3
    6126:	4b14      	ldr	r3, [pc, #80]	; (6178 <tal_init+0x158>)
    6128:	4798      	blx	r3
    612a:	2090      	movs	r0, #144	; 0x90
    612c:	4b13      	ldr	r3, [pc, #76]	; (617c <tal_init+0x15c>)
    612e:	4798      	blx	r3
    6130:	4b13      	ldr	r3, [pc, #76]	; (6180 <tal_init+0x160>)
    6132:	6018      	str	r0, [r3, #0]
    6134:	4813      	ldr	r0, [pc, #76]	; (6184 <tal_init+0x164>)
    6136:	4b14      	ldr	r3, [pc, #80]	; (6188 <tal_init+0x168>)
    6138:	4798      	blx	r3
    613a:	4b14      	ldr	r3, [pc, #80]	; (618c <tal_init+0x16c>)
    613c:	4798      	blx	r3
    613e:	e777      	b.n	6030 <tal_init+0x10>
    6140:	00005755 	.word	0x00005755
    6144:	41004480 	.word	0x41004480
    6148:	41004400 	.word	0x41004400
    614c:	00003d51 	.word	0x00003d51
    6150:	00006a2d 	.word	0x00006a2d
    6154:	00006b29 	.word	0x00006b29
    6158:	00006c35 	.word	0x00006c35
    615c:	20000bc3 	.word	0x20000bc3
    6160:	00005f79 	.word	0x00005f79
    6164:	20000ba4 	.word	0x20000ba4
    6168:	000077b9 	.word	0x000077b9
    616c:	00006191 	.word	0x00006191
    6170:	00006c29 	.word	0x00006c29
    6174:	00003e45 	.word	0x00003e45
    6178:	00005795 	.word	0x00005795
    617c:	000057e1 	.word	0x000057e1
    6180:	200003a4 	.word	0x200003a4
    6184:	20000b94 	.word	0x20000b94
    6188:	000059a1 	.word	0x000059a1
    618c:	00006809 	.word	0x00006809

00006190 <trx_irq_handler_cb>:
    6190:	b510      	push	{r4, lr}
    6192:	200f      	movs	r0, #15
    6194:	4b0a      	ldr	r3, [pc, #40]	; (61c0 <trx_irq_handler_cb+0x30>)
    6196:	4798      	blx	r3
    6198:	0703      	lsls	r3, r0, #28
    619a:	d505      	bpl.n	61a8 <trx_irq_handler_cb+0x18>
    619c:	4b09      	ldr	r3, [pc, #36]	; (61c4 <trx_irq_handler_cb+0x34>)
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	2b01      	cmp	r3, #1
    61a2:	d002      	beq.n	61aa <trx_irq_handler_cb+0x1a>
    61a4:	4b08      	ldr	r3, [pc, #32]	; (61c8 <trx_irq_handler_cb+0x38>)
    61a6:	4798      	blx	r3
    61a8:	bd10      	pop	{r4, pc}
    61aa:	0643      	lsls	r3, r0, #25
    61ac:	d503      	bpl.n	61b6 <trx_irq_handler_cb+0x26>
    61ae:	2001      	movs	r0, #1
    61b0:	4b06      	ldr	r3, [pc, #24]	; (61cc <trx_irq_handler_cb+0x3c>)
    61b2:	4798      	blx	r3
    61b4:	e7f8      	b.n	61a8 <trx_irq_handler_cb+0x18>
    61b6:	2000      	movs	r0, #0
    61b8:	4b04      	ldr	r3, [pc, #16]	; (61cc <trx_irq_handler_cb+0x3c>)
    61ba:	4798      	blx	r3
    61bc:	e7f4      	b.n	61a8 <trx_irq_handler_cb+0x18>
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	00006a2d 	.word	0x00006a2d
    61c4:	20000bcd 	.word	0x20000bcd
    61c8:	00006545 	.word	0x00006545
    61cc:	00006705 	.word	0x00006705

000061d0 <trx_irq_awake_handler_cb>:
    61d0:	b510      	push	{r4, lr}
    61d2:	200f      	movs	r0, #15
    61d4:	4b03      	ldr	r3, [pc, #12]	; (61e4 <trx_irq_awake_handler_cb+0x14>)
    61d6:	4798      	blx	r3
    61d8:	06c3      	lsls	r3, r0, #27
    61da:	d502      	bpl.n	61e2 <trx_irq_awake_handler_cb+0x12>
    61dc:	2201      	movs	r2, #1
    61de:	4b02      	ldr	r3, [pc, #8]	; (61e8 <trx_irq_awake_handler_cb+0x18>)
    61e0:	701a      	strb	r2, [r3, #0]
    61e2:	bd10      	pop	{r4, pc}
    61e4:	00006a2d 	.word	0x00006a2d
    61e8:	20000bcc 	.word	0x20000bcc

000061ec <init_tal_pib>:
    61ec:	b510      	push	{r4, lr}
    61ee:	4b13      	ldr	r3, [pc, #76]	; (623c <init_tal_pib+0x50>)
    61f0:	2204      	movs	r2, #4
    61f2:	751a      	strb	r2, [r3, #20]
    61f4:	2003      	movs	r0, #3
    61f6:	7558      	strb	r0, [r3, #21]
    61f8:	3a05      	subs	r2, #5
    61fa:	739a      	strb	r2, [r3, #14]
    61fc:	73da      	strb	r2, [r3, #15]
    61fe:	731a      	strb	r2, [r3, #12]
    6200:	735a      	strb	r2, [r3, #13]
    6202:	210b      	movs	r1, #11
    6204:	74d9      	strb	r1, [r3, #19]
    6206:	2100      	movs	r1, #0
    6208:	2400      	movs	r4, #0
    620a:	721c      	strb	r4, [r3, #8]
    620c:	3c08      	subs	r4, #8
    620e:	725c      	strb	r4, [r3, #9]
    6210:	729a      	strb	r2, [r3, #10]
    6212:	3208      	adds	r2, #8
    6214:	72da      	strb	r2, [r3, #11]
    6216:	7619      	strb	r1, [r3, #24]
    6218:	3203      	adds	r2, #3
    621a:	741a      	strb	r2, [r3, #16]
    621c:	3a09      	subs	r2, #9
    621e:	745a      	strb	r2, [r3, #17]
    6220:	3209      	adds	r2, #9
    6222:	765a      	strb	r2, [r3, #25]
    6224:	3a08      	subs	r2, #8
    6226:	769a      	strb	r2, [r3, #26]
    6228:	3203      	adds	r2, #3
    622a:	76da      	strb	r2, [r3, #27]
    622c:	7718      	strb	r0, [r3, #28]
    622e:	327f      	adds	r2, #127	; 0x7f
    6230:	75da      	strb	r2, [r3, #23]
    6232:	3a83      	subs	r2, #131	; 0x83
    6234:	749a      	strb	r2, [r3, #18]
    6236:	7599      	strb	r1, [r3, #22]
    6238:	bd10      	pop	{r4, pc}
    623a:	46c0      	nop			; (mov r8, r8)
    623c:	20000ba4 	.word	0x20000ba4

00006240 <convert_phyTransmitPower_to_reg_value>:
    6240:	0683      	lsls	r3, r0, #26
    6242:	d410      	bmi.n	6266 <convert_phyTransmitPower_to_reg_value+0x26>
    6244:	213f      	movs	r1, #63	; 0x3f
    6246:	4001      	ands	r1, r0
    6248:	2903      	cmp	r1, #3
    624a:	dc12      	bgt.n	6272 <convert_phyTransmitPower_to_reg_value+0x32>
    624c:	4b0c      	ldr	r3, [pc, #48]	; (6280 <convert_phyTransmitPower_to_reg_value+0x40>)
    624e:	2001      	movs	r0, #1
    6250:	2201      	movs	r2, #1
    6252:	569a      	ldrsb	r2, [r3, r2]
    6254:	4291      	cmp	r1, r2
    6256:	da0e      	bge.n	6276 <convert_phyTransmitPower_to_reg_value+0x36>
    6258:	3001      	adds	r0, #1
    625a:	b2c0      	uxtb	r0, r0
    625c:	3301      	adds	r3, #1
    625e:	2810      	cmp	r0, #16
    6260:	d1f6      	bne.n	6250 <convert_phyTransmitPower_to_reg_value+0x10>
    6262:	2000      	movs	r0, #0
    6264:	4770      	bx	lr
    6266:	4240      	negs	r0, r0
    6268:	211f      	movs	r1, #31
    626a:	4001      	ands	r1, r0
    626c:	4249      	negs	r1, r1
    626e:	b249      	sxtb	r1, r1
    6270:	e7ea      	b.n	6248 <convert_phyTransmitPower_to_reg_value+0x8>
    6272:	2204      	movs	r2, #4
    6274:	2000      	movs	r0, #0
    6276:	4291      	cmp	r1, r2
    6278:	ddf4      	ble.n	6264 <convert_phyTransmitPower_to_reg_value+0x24>
    627a:	3801      	subs	r0, #1
    627c:	b2c0      	uxtb	r0, r0
    627e:	e7f1      	b.n	6264 <convert_phyTransmitPower_to_reg_value+0x24>
    6280:	00009794 	.word	0x00009794

00006284 <write_all_tal_pib_to_trx>:
    6284:	b570      	push	{r4, r5, r6, lr}
    6286:	4d1e      	ldr	r5, [pc, #120]	; (6300 <write_all_tal_pib_to_trx+0x7c>)
    6288:	7ba9      	ldrb	r1, [r5, #14]
    628a:	2022      	movs	r0, #34	; 0x22
    628c:	4c1d      	ldr	r4, [pc, #116]	; (6304 <write_all_tal_pib_to_trx+0x80>)
    628e:	47a0      	blx	r4
    6290:	7be9      	ldrb	r1, [r5, #15]
    6292:	2023      	movs	r0, #35	; 0x23
    6294:	47a0      	blx	r4
    6296:	2424      	movs	r4, #36	; 0x24
    6298:	4e1a      	ldr	r6, [pc, #104]	; (6304 <write_all_tal_pib_to_trx+0x80>)
    629a:	7829      	ldrb	r1, [r5, #0]
    629c:	0020      	movs	r0, r4
    629e:	47b0      	blx	r6
    62a0:	3501      	adds	r5, #1
    62a2:	3401      	adds	r4, #1
    62a4:	b2e4      	uxtb	r4, r4
    62a6:	2c2c      	cmp	r4, #44	; 0x2c
    62a8:	d1f7      	bne.n	629a <write_all_tal_pib_to_trx+0x16>
    62aa:	4c15      	ldr	r4, [pc, #84]	; (6300 <write_all_tal_pib_to_trx+0x7c>)
    62ac:	7b21      	ldrb	r1, [r4, #12]
    62ae:	2020      	movs	r0, #32
    62b0:	4d14      	ldr	r5, [pc, #80]	; (6304 <write_all_tal_pib_to_trx+0x80>)
    62b2:	47a8      	blx	r5
    62b4:	7b61      	ldrb	r1, [r4, #13]
    62b6:	2021      	movs	r0, #33	; 0x21
    62b8:	47a8      	blx	r5
    62ba:	7ca3      	ldrb	r3, [r4, #18]
    62bc:	2205      	movs	r2, #5
    62be:	2160      	movs	r1, #96	; 0x60
    62c0:	2008      	movs	r0, #8
    62c2:	4d11      	ldr	r5, [pc, #68]	; (6308 <write_all_tal_pib_to_trx+0x84>)
    62c4:	47a8      	blx	r5
    62c6:	7d63      	ldrb	r3, [r4, #21]
    62c8:	2200      	movs	r2, #0
    62ca:	210f      	movs	r1, #15
    62cc:	202f      	movs	r0, #47	; 0x2f
    62ce:	47a8      	blx	r5
    62d0:	7da3      	ldrb	r3, [r4, #22]
    62d2:	2203      	movs	r2, #3
    62d4:	2108      	movs	r1, #8
    62d6:	202e      	movs	r0, #46	; 0x2e
    62d8:	47a8      	blx	r5
    62da:	7ee3      	ldrb	r3, [r4, #27]
    62dc:	2204      	movs	r2, #4
    62de:	21f0      	movs	r1, #240	; 0xf0
    62e0:	202f      	movs	r0, #47	; 0x2f
    62e2:	47a8      	blx	r5
    62e4:	7ce3      	ldrb	r3, [r4, #19]
    62e6:	2200      	movs	r2, #0
    62e8:	211f      	movs	r1, #31
    62ea:	2008      	movs	r0, #8
    62ec:	47a8      	blx	r5
    62ee:	7de0      	ldrb	r0, [r4, #23]
    62f0:	4b06      	ldr	r3, [pc, #24]	; (630c <write_all_tal_pib_to_trx+0x88>)
    62f2:	4798      	blx	r3
    62f4:	0003      	movs	r3, r0
    62f6:	2200      	movs	r2, #0
    62f8:	210f      	movs	r1, #15
    62fa:	2005      	movs	r0, #5
    62fc:	47a8      	blx	r5
    62fe:	bd70      	pop	{r4, r5, r6, pc}
    6300:	20000ba4 	.word	0x20000ba4
    6304:	00006b29 	.word	0x00006b29
    6308:	00006c4d 	.word	0x00006c4d
    630c:	00006241 	.word	0x00006241

00006310 <tal_pib_set>:
    6310:	b570      	push	{r4, r5, r6, lr}
    6312:	000c      	movs	r4, r1
    6314:	284e      	cmp	r0, #78	; 0x4e
    6316:	d007      	beq.n	6328 <tal_pib_set+0x18>
    6318:	2859      	cmp	r0, #89	; 0x59
    631a:	d10a      	bne.n	6332 <tal_pib_set+0x22>
    631c:	780a      	ldrb	r2, [r1, #0]
    631e:	4b81      	ldr	r3, [pc, #516]	; (6524 <tal_pib_set+0x214>)
    6320:	771a      	strb	r2, [r3, #28]
    6322:	2200      	movs	r2, #0
    6324:	0010      	movs	r0, r2
    6326:	bd70      	pop	{r4, r5, r6, pc}
    6328:	780a      	ldrb	r2, [r1, #0]
    632a:	4b7e      	ldr	r3, [pc, #504]	; (6524 <tal_pib_set+0x214>)
    632c:	751a      	strb	r2, [r3, #20]
    632e:	2200      	movs	r2, #0
    6330:	e7f8      	b.n	6324 <tal_pib_set+0x14>
    6332:	4b7d      	ldr	r3, [pc, #500]	; (6528 <tal_pib_set+0x218>)
    6334:	7819      	ldrb	r1, [r3, #0]
    6336:	2281      	movs	r2, #129	; 0x81
    6338:	290f      	cmp	r1, #15
    633a:	d0f3      	beq.n	6324 <tal_pib_set+0x14>
    633c:	280b      	cmp	r0, #11
    633e:	d100      	bne.n	6342 <tal_pib_set+0x32>
    6340:	e0da      	b.n	64f8 <tal_pib_set+0x1e8>
    6342:	d915      	bls.n	6370 <tal_pib_set+0x60>
    6344:	2853      	cmp	r0, #83	; 0x53
    6346:	d100      	bne.n	634a <tal_pib_set+0x3a>
    6348:	e090      	b.n	646c <tal_pib_set+0x15c>
    634a:	d84a      	bhi.n	63e2 <tal_pib_set+0xd2>
    634c:	284f      	cmp	r0, #79	; 0x4f
    634e:	d07c      	beq.n	644a <tal_pib_set+0x13a>
    6350:	2850      	cmp	r0, #80	; 0x50
    6352:	d000      	beq.n	6356 <tal_pib_set+0x46>
    6354:	e0da      	b.n	650c <tal_pib_set+0x1fc>
    6356:	7821      	ldrb	r1, [r4, #0]
    6358:	7863      	ldrb	r3, [r4, #1]
    635a:	4c72      	ldr	r4, [pc, #456]	; (6524 <tal_pib_set+0x214>)
    635c:	73a1      	strb	r1, [r4, #14]
    635e:	73e3      	strb	r3, [r4, #15]
    6360:	2022      	movs	r0, #34	; 0x22
    6362:	4d72      	ldr	r5, [pc, #456]	; (652c <tal_pib_set+0x21c>)
    6364:	47a8      	blx	r5
    6366:	7be1      	ldrb	r1, [r4, #15]
    6368:	2023      	movs	r0, #35	; 0x23
    636a:	47a8      	blx	r5
    636c:	2200      	movs	r2, #0
    636e:	e7d9      	b.n	6324 <tal_pib_set+0x14>
    6370:	2802      	cmp	r0, #2
    6372:	d100      	bne.n	6376 <tal_pib_set+0x66>
    6374:	e096      	b.n	64a4 <tal_pib_set+0x194>
    6376:	d911      	bls.n	639c <tal_pib_set+0x8c>
    6378:	2803      	cmp	r0, #3
    637a:	d100      	bne.n	637e <tal_pib_set+0x6e>
    637c:	e0b2      	b.n	64e4 <tal_pib_set+0x1d4>
    637e:	2804      	cmp	r0, #4
    6380:	d000      	beq.n	6384 <tal_pib_set+0x74>
    6382:	e0c3      	b.n	650c <tal_pib_set+0x1fc>
    6384:	4b6a      	ldr	r3, [pc, #424]	; (6530 <tal_pib_set+0x220>)
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	2286      	movs	r2, #134	; 0x86
    638a:	2b00      	cmp	r3, #0
    638c:	d1ca      	bne.n	6324 <tal_pib_set+0x14>
    638e:	7823      	ldrb	r3, [r4, #0]
    6390:	3262      	adds	r2, #98	; 0x62
    6392:	1e59      	subs	r1, r3, #1
    6394:	418b      	sbcs	r3, r1
    6396:	425b      	negs	r3, r3
    6398:	401a      	ands	r2, r3
    639a:	e7c3      	b.n	6324 <tal_pib_set+0x14>
    639c:	2800      	cmp	r0, #0
    639e:	d000      	beq.n	63a2 <tal_pib_set+0x92>
    63a0:	e0b4      	b.n	650c <tal_pib_set+0x1fc>
    63a2:	4b63      	ldr	r3, [pc, #396]	; (6530 <tal_pib_set+0x220>)
    63a4:	781b      	ldrb	r3, [r3, #0]
    63a6:	2286      	movs	r2, #134	; 0x86
    63a8:	2b00      	cmp	r3, #0
    63aa:	d1bb      	bne.n	6324 <tal_pib_set+0x14>
    63ac:	7823      	ldrb	r3, [r4, #0]
    63ae:	4861      	ldr	r0, [pc, #388]	; (6534 <tal_pib_set+0x224>)
    63b0:	40d8      	lsrs	r0, r3
    63b2:	3262      	adds	r2, #98	; 0x62
    63b4:	07c0      	lsls	r0, r0, #31
    63b6:	d5b5      	bpl.n	6324 <tal_pib_set+0x14>
    63b8:	2908      	cmp	r1, #8
    63ba:	d100      	bne.n	63be <tal_pib_set+0xae>
    63bc:	e0a8      	b.n	6510 <tal_pib_set+0x200>
    63be:	4d5e      	ldr	r5, [pc, #376]	; (6538 <tal_pib_set+0x228>)
    63c0:	2008      	movs	r0, #8
    63c2:	47a8      	blx	r5
    63c4:	2808      	cmp	r0, #8
    63c6:	d1fb      	bne.n	63c0 <tal_pib_set+0xb0>
    63c8:	7823      	ldrb	r3, [r4, #0]
    63ca:	4a56      	ldr	r2, [pc, #344]	; (6524 <tal_pib_set+0x214>)
    63cc:	74d3      	strb	r3, [r2, #19]
    63ce:	2200      	movs	r2, #0
    63d0:	211f      	movs	r1, #31
    63d2:	2008      	movs	r0, #8
    63d4:	4c59      	ldr	r4, [pc, #356]	; (653c <tal_pib_set+0x22c>)
    63d6:	47a0      	blx	r4
    63d8:	2016      	movs	r0, #22
    63da:	4b57      	ldr	r3, [pc, #348]	; (6538 <tal_pib_set+0x228>)
    63dc:	4798      	blx	r3
    63de:	2200      	movs	r2, #0
    63e0:	e7a0      	b.n	6324 <tal_pib_set+0x14>
    63e2:	2857      	cmp	r0, #87	; 0x57
    63e4:	d04f      	beq.n	6486 <tal_pib_set+0x176>
    63e6:	28f0      	cmp	r0, #240	; 0xf0
    63e8:	d000      	beq.n	63ec <tal_pib_set+0xdc>
    63ea:	e08f      	b.n	650c <tal_pib_set+0x1fc>
    63ec:	7822      	ldrb	r2, [r4, #0]
    63ee:	7863      	ldrb	r3, [r4, #1]
    63f0:	021b      	lsls	r3, r3, #8
    63f2:	4313      	orrs	r3, r2
    63f4:	78a2      	ldrb	r2, [r4, #2]
    63f6:	0412      	lsls	r2, r2, #16
    63f8:	4313      	orrs	r3, r2
    63fa:	78e2      	ldrb	r2, [r4, #3]
    63fc:	0612      	lsls	r2, r2, #24
    63fe:	431a      	orrs	r2, r3
    6400:	7923      	ldrb	r3, [r4, #4]
    6402:	7961      	ldrb	r1, [r4, #5]
    6404:	0209      	lsls	r1, r1, #8
    6406:	4319      	orrs	r1, r3
    6408:	79a3      	ldrb	r3, [r4, #6]
    640a:	041b      	lsls	r3, r3, #16
    640c:	4319      	orrs	r1, r3
    640e:	79e3      	ldrb	r3, [r4, #7]
    6410:	061b      	lsls	r3, r3, #24
    6412:	430b      	orrs	r3, r1
    6414:	4d43      	ldr	r5, [pc, #268]	; (6524 <tal_pib_set+0x214>)
    6416:	702a      	strb	r2, [r5, #0]
    6418:	0a11      	lsrs	r1, r2, #8
    641a:	7069      	strb	r1, [r5, #1]
    641c:	0c11      	lsrs	r1, r2, #16
    641e:	70a9      	strb	r1, [r5, #2]
    6420:	0e12      	lsrs	r2, r2, #24
    6422:	70ea      	strb	r2, [r5, #3]
    6424:	712b      	strb	r3, [r5, #4]
    6426:	0a1a      	lsrs	r2, r3, #8
    6428:	716a      	strb	r2, [r5, #5]
    642a:	0c1a      	lsrs	r2, r3, #16
    642c:	71aa      	strb	r2, [r5, #6]
    642e:	0e1b      	lsrs	r3, r3, #24
    6430:	71eb      	strb	r3, [r5, #7]
    6432:	2424      	movs	r4, #36	; 0x24
    6434:	4e3d      	ldr	r6, [pc, #244]	; (652c <tal_pib_set+0x21c>)
    6436:	7829      	ldrb	r1, [r5, #0]
    6438:	0020      	movs	r0, r4
    643a:	47b0      	blx	r6
    643c:	3501      	adds	r5, #1
    643e:	3401      	adds	r4, #1
    6440:	b2e4      	uxtb	r4, r4
    6442:	2c2c      	cmp	r4, #44	; 0x2c
    6444:	d1f7      	bne.n	6436 <tal_pib_set+0x126>
    6446:	2200      	movs	r2, #0
    6448:	e76c      	b.n	6324 <tal_pib_set+0x14>
    644a:	7823      	ldrb	r3, [r4, #0]
    644c:	4a35      	ldr	r2, [pc, #212]	; (6524 <tal_pib_set+0x214>)
    644e:	7553      	strb	r3, [r2, #21]
    6450:	7ed2      	ldrb	r2, [r2, #27]
    6452:	4293      	cmp	r3, r2
    6454:	d901      	bls.n	645a <tal_pib_set+0x14a>
    6456:	4b33      	ldr	r3, [pc, #204]	; (6524 <tal_pib_set+0x214>)
    6458:	755a      	strb	r2, [r3, #21]
    645a:	4b32      	ldr	r3, [pc, #200]	; (6524 <tal_pib_set+0x214>)
    645c:	7d5b      	ldrb	r3, [r3, #21]
    645e:	2200      	movs	r2, #0
    6460:	210f      	movs	r1, #15
    6462:	202f      	movs	r0, #47	; 0x2f
    6464:	4c35      	ldr	r4, [pc, #212]	; (653c <tal_pib_set+0x22c>)
    6466:	47a0      	blx	r4
    6468:	2200      	movs	r2, #0
    646a:	e75b      	b.n	6324 <tal_pib_set+0x14>
    646c:	7821      	ldrb	r1, [r4, #0]
    646e:	7863      	ldrb	r3, [r4, #1]
    6470:	4c2c      	ldr	r4, [pc, #176]	; (6524 <tal_pib_set+0x214>)
    6472:	7321      	strb	r1, [r4, #12]
    6474:	7363      	strb	r3, [r4, #13]
    6476:	2020      	movs	r0, #32
    6478:	4d2c      	ldr	r5, [pc, #176]	; (652c <tal_pib_set+0x21c>)
    647a:	47a8      	blx	r5
    647c:	7b61      	ldrb	r1, [r4, #13]
    647e:	2021      	movs	r0, #33	; 0x21
    6480:	47a8      	blx	r5
    6482:	2200      	movs	r2, #0
    6484:	e74e      	b.n	6324 <tal_pib_set+0x14>
    6486:	7823      	ldrb	r3, [r4, #0]
    6488:	4a26      	ldr	r2, [pc, #152]	; (6524 <tal_pib_set+0x214>)
    648a:	76d3      	strb	r3, [r2, #27]
    648c:	7d52      	ldrb	r2, [r2, #21]
    648e:	429a      	cmp	r2, r3
    6490:	d901      	bls.n	6496 <tal_pib_set+0x186>
    6492:	4a24      	ldr	r2, [pc, #144]	; (6524 <tal_pib_set+0x214>)
    6494:	7553      	strb	r3, [r2, #21]
    6496:	2204      	movs	r2, #4
    6498:	21f0      	movs	r1, #240	; 0xf0
    649a:	202f      	movs	r0, #47	; 0x2f
    649c:	4c27      	ldr	r4, [pc, #156]	; (653c <tal_pib_set+0x22c>)
    649e:	47a0      	blx	r4
    64a0:	2200      	movs	r2, #0
    64a2:	e73f      	b.n	6324 <tal_pib_set+0x14>
    64a4:	7820      	ldrb	r0, [r4, #0]
    64a6:	0683      	lsls	r3, r0, #26
    64a8:	d407      	bmi.n	64ba <tal_pib_set+0x1aa>
    64aa:	233f      	movs	r3, #63	; 0x3f
    64ac:	4003      	ands	r3, r0
    64ae:	2b04      	cmp	r3, #4
    64b0:	dc09      	bgt.n	64c6 <tal_pib_set+0x1b6>
    64b2:	3311      	adds	r3, #17
    64b4:	da08      	bge.n	64c8 <tal_pib_set+0x1b8>
    64b6:	202f      	movs	r0, #47	; 0x2f
    64b8:	e006      	b.n	64c8 <tal_pib_set+0x1b8>
    64ba:	4242      	negs	r2, r0
    64bc:	231f      	movs	r3, #31
    64be:	4013      	ands	r3, r2
    64c0:	425b      	negs	r3, r3
    64c2:	b25b      	sxtb	r3, r3
    64c4:	e7f3      	b.n	64ae <tal_pib_set+0x19e>
    64c6:	2004      	movs	r0, #4
    64c8:	2380      	movs	r3, #128	; 0x80
    64ca:	4318      	orrs	r0, r3
    64cc:	4b15      	ldr	r3, [pc, #84]	; (6524 <tal_pib_set+0x214>)
    64ce:	75d8      	strb	r0, [r3, #23]
    64d0:	4b1b      	ldr	r3, [pc, #108]	; (6540 <tal_pib_set+0x230>)
    64d2:	4798      	blx	r3
    64d4:	0003      	movs	r3, r0
    64d6:	2200      	movs	r2, #0
    64d8:	210f      	movs	r1, #15
    64da:	2005      	movs	r0, #5
    64dc:	4c17      	ldr	r4, [pc, #92]	; (653c <tal_pib_set+0x22c>)
    64de:	47a0      	blx	r4
    64e0:	2200      	movs	r2, #0
    64e2:	e71f      	b.n	6324 <tal_pib_set+0x14>
    64e4:	7823      	ldrb	r3, [r4, #0]
    64e6:	4a0f      	ldr	r2, [pc, #60]	; (6524 <tal_pib_set+0x214>)
    64e8:	7493      	strb	r3, [r2, #18]
    64ea:	2205      	movs	r2, #5
    64ec:	2160      	movs	r1, #96	; 0x60
    64ee:	2008      	movs	r0, #8
    64f0:	4c12      	ldr	r4, [pc, #72]	; (653c <tal_pib_set+0x22c>)
    64f2:	47a0      	blx	r4
    64f4:	2200      	movs	r2, #0
    64f6:	e715      	b.n	6324 <tal_pib_set+0x14>
    64f8:	7823      	ldrb	r3, [r4, #0]
    64fa:	4a0a      	ldr	r2, [pc, #40]	; (6524 <tal_pib_set+0x214>)
    64fc:	7593      	strb	r3, [r2, #22]
    64fe:	2203      	movs	r2, #3
    6500:	2108      	movs	r1, #8
    6502:	202e      	movs	r0, #46	; 0x2e
    6504:	4c0d      	ldr	r4, [pc, #52]	; (653c <tal_pib_set+0x22c>)
    6506:	47a0      	blx	r4
    6508:	2200      	movs	r2, #0
    650a:	e70b      	b.n	6324 <tal_pib_set+0x14>
    650c:	22f4      	movs	r2, #244	; 0xf4
    650e:	e709      	b.n	6324 <tal_pib_set+0x14>
    6510:	4a04      	ldr	r2, [pc, #16]	; (6524 <tal_pib_set+0x214>)
    6512:	74d3      	strb	r3, [r2, #19]
    6514:	2200      	movs	r2, #0
    6516:	211f      	movs	r1, #31
    6518:	2008      	movs	r0, #8
    651a:	4c08      	ldr	r4, [pc, #32]	; (653c <tal_pib_set+0x22c>)
    651c:	47a0      	blx	r4
    651e:	2200      	movs	r2, #0
    6520:	e700      	b.n	6324 <tal_pib_set+0x14>
    6522:	46c0      	nop			; (mov r8, r8)
    6524:	20000ba4 	.word	0x20000ba4
    6528:	20000bc3 	.word	0x20000bc3
    652c:	00006b29 	.word	0x00006b29
    6530:	20000bcd 	.word	0x20000bcd
    6534:	07fff800 	.word	0x07fff800
    6538:	00005b11 	.word	0x00005b11
    653c:	00006c4d 	.word	0x00006c4d
    6540:	00006241 	.word	0x00006241

00006544 <handle_received_frame_irq>:
    6544:	b530      	push	{r4, r5, lr}
    6546:	b083      	sub	sp, #12
    6548:	4b1f      	ldr	r3, [pc, #124]	; (65c8 <handle_received_frame_irq+0x84>)
    654a:	681b      	ldr	r3, [r3, #0]
    654c:	2b00      	cmp	r3, #0
    654e:	d02e      	beq.n	65ae <handle_received_frame_irq+0x6a>
    6550:	781c      	ldrb	r4, [r3, #0]
    6552:	785a      	ldrb	r2, [r3, #1]
    6554:	0212      	lsls	r2, r2, #8
    6556:	4322      	orrs	r2, r4
    6558:	789c      	ldrb	r4, [r3, #2]
    655a:	0424      	lsls	r4, r4, #16
    655c:	4322      	orrs	r2, r4
    655e:	78dc      	ldrb	r4, [r3, #3]
    6560:	0624      	lsls	r4, r4, #24
    6562:	4314      	orrs	r4, r2
    6564:	466b      	mov	r3, sp
    6566:	1ddd      	adds	r5, r3, #7
    6568:	2101      	movs	r1, #1
    656a:	0028      	movs	r0, r5
    656c:	4b17      	ldr	r3, [pc, #92]	; (65cc <handle_received_frame_irq+0x88>)
    656e:	4798      	blx	r3
    6570:	7829      	ldrb	r1, [r5, #0]
    6572:	b24b      	sxtb	r3, r1
    6574:	2b00      	cmp	r3, #0
    6576:	db18      	blt.n	65aa <handle_received_frame_irq+0x66>
    6578:	3103      	adds	r1, #3
    657a:	b2c9      	uxtb	r1, r1
    657c:	1a65      	subs	r5, r4, r1
    657e:	3590      	adds	r5, #144	; 0x90
    6580:	0028      	movs	r0, r5
    6582:	4b12      	ldr	r3, [pc, #72]	; (65cc <handle_received_frame_irq+0x88>)
    6584:	4798      	blx	r3
    6586:	7265      	strb	r5, [r4, #9]
    6588:	0a2a      	lsrs	r2, r5, #8
    658a:	72a2      	strb	r2, [r4, #10]
    658c:	0c2a      	lsrs	r2, r5, #16
    658e:	72e2      	strb	r2, [r4, #11]
    6590:	0e2d      	lsrs	r5, r5, #24
    6592:	7325      	strb	r5, [r4, #12]
    6594:	4c0c      	ldr	r4, [pc, #48]	; (65c8 <handle_received_frame_irq+0x84>)
    6596:	6821      	ldr	r1, [r4, #0]
    6598:	480d      	ldr	r0, [pc, #52]	; (65d0 <handle_received_frame_irq+0x8c>)
    659a:	4b0e      	ldr	r3, [pc, #56]	; (65d4 <handle_received_frame_irq+0x90>)
    659c:	4798      	blx	r3
    659e:	2090      	movs	r0, #144	; 0x90
    65a0:	4b0d      	ldr	r3, [pc, #52]	; (65d8 <handle_received_frame_irq+0x94>)
    65a2:	4798      	blx	r3
    65a4:	6020      	str	r0, [r4, #0]
    65a6:	2800      	cmp	r0, #0
    65a8:	d007      	beq.n	65ba <handle_received_frame_irq+0x76>
    65aa:	b003      	add	sp, #12
    65ac:	bd30      	pop	{r4, r5, pc}
    65ae:	2101      	movs	r1, #1
    65b0:	466b      	mov	r3, sp
    65b2:	1d98      	adds	r0, r3, #6
    65b4:	4b05      	ldr	r3, [pc, #20]	; (65cc <handle_received_frame_irq+0x88>)
    65b6:	4798      	blx	r3
    65b8:	e7f7      	b.n	65aa <handle_received_frame_irq+0x66>
    65ba:	3009      	adds	r0, #9
    65bc:	4b07      	ldr	r3, [pc, #28]	; (65dc <handle_received_frame_irq+0x98>)
    65be:	4798      	blx	r3
    65c0:	2201      	movs	r2, #1
    65c2:	4b07      	ldr	r3, [pc, #28]	; (65e0 <handle_received_frame_irq+0x9c>)
    65c4:	701a      	strb	r2, [r3, #0]
    65c6:	e7f0      	b.n	65aa <handle_received_frame_irq+0x66>
    65c8:	200003a4 	.word	0x200003a4
    65cc:	00006c75 	.word	0x00006c75
    65d0:	20000b94 	.word	0x20000b94
    65d4:	000059b9 	.word	0x000059b9
    65d8:	000057e1 	.word	0x000057e1
    65dc:	00005b11 	.word	0x00005b11
    65e0:	20000b90 	.word	0x20000b90

000065e4 <process_incoming_frame>:
    65e4:	b570      	push	{r4, r5, r6, lr}
    65e6:	0005      	movs	r5, r0
    65e8:	7804      	ldrb	r4, [r0, #0]
    65ea:	7843      	ldrb	r3, [r0, #1]
    65ec:	021b      	lsls	r3, r3, #8
    65ee:	4323      	orrs	r3, r4
    65f0:	7884      	ldrb	r4, [r0, #2]
    65f2:	0424      	lsls	r4, r4, #16
    65f4:	4323      	orrs	r3, r4
    65f6:	78c4      	ldrb	r4, [r0, #3]
    65f8:	0624      	lsls	r4, r4, #24
    65fa:	431c      	orrs	r4, r3
    65fc:	7a66      	ldrb	r6, [r4, #9]
    65fe:	7aa3      	ldrb	r3, [r4, #10]
    6600:	021b      	lsls	r3, r3, #8
    6602:	4333      	orrs	r3, r6
    6604:	7ae6      	ldrb	r6, [r4, #11]
    6606:	0436      	lsls	r6, r6, #16
    6608:	4333      	orrs	r3, r6
    660a:	7b26      	ldrb	r6, [r4, #12]
    660c:	0636      	lsls	r6, r6, #24
    660e:	431e      	orrs	r6, r3
    6610:	7833      	ldrb	r3, [r6, #0]
    6612:	4a12      	ldr	r2, [pc, #72]	; (665c <process_incoming_frame+0x78>)
    6614:	7013      	strb	r3, [r2, #0]
    6616:	3301      	adds	r3, #1
    6618:	18f6      	adds	r6, r6, r3
    661a:	7833      	ldrb	r3, [r6, #0]
    661c:	7870      	ldrb	r0, [r6, #1]
    661e:	281f      	cmp	r0, #31
    6620:	d803      	bhi.n	662a <process_incoming_frame+0x46>
    6622:	2800      	cmp	r0, #0
    6624:	d102      	bne.n	662c <process_incoming_frame+0x48>
    6626:	3001      	adds	r0, #1
    6628:	e000      	b.n	662c <process_incoming_frame+0x48>
    662a:	201f      	movs	r0, #31
    662c:	099b      	lsrs	r3, r3, #6
    662e:	4358      	muls	r0, r3
    6630:	0203      	lsls	r3, r0, #8
    6632:	1a18      	subs	r0, r3, r0
    6634:	215d      	movs	r1, #93	; 0x5d
    6636:	4b0a      	ldr	r3, [pc, #40]	; (6660 <process_incoming_frame+0x7c>)
    6638:	4798      	blx	r3
    663a:	b283      	uxth	r3, r0
    663c:	2bff      	cmp	r3, #255	; 0xff
    663e:	d80b      	bhi.n	6658 <process_incoming_frame+0x74>
    6640:	7030      	strb	r0, [r6, #0]
    6642:	7065      	strb	r5, [r4, #1]
    6644:	0a2a      	lsrs	r2, r5, #8
    6646:	70a2      	strb	r2, [r4, #2]
    6648:	0c2a      	lsrs	r2, r5, #16
    664a:	70e2      	strb	r2, [r4, #3]
    664c:	0e2d      	lsrs	r5, r5, #24
    664e:	7125      	strb	r5, [r4, #4]
    6650:	0020      	movs	r0, r4
    6652:	4b04      	ldr	r3, [pc, #16]	; (6664 <process_incoming_frame+0x80>)
    6654:	4798      	blx	r3
    6656:	bd70      	pop	{r4, r5, r6, pc}
    6658:	20ff      	movs	r0, #255	; 0xff
    665a:	e7f1      	b.n	6640 <process_incoming_frame+0x5c>
    665c:	20000bc4 	.word	0x20000bc4
    6660:	00007395 	.word	0x00007395
    6664:	00007175 	.word	0x00007175

00006668 <tal_rx_enable>:
    6668:	b510      	push	{r4, lr}
    666a:	0004      	movs	r4, r0
    666c:	4b0e      	ldr	r3, [pc, #56]	; (66a8 <tal_rx_enable+0x40>)
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	2086      	movs	r0, #134	; 0x86
    6672:	2b00      	cmp	r3, #0
    6674:	d109      	bne.n	668a <tal_rx_enable+0x22>
    6676:	2c08      	cmp	r4, #8
    6678:	d008      	beq.n	668c <tal_rx_enable+0x24>
    667a:	4b0c      	ldr	r3, [pc, #48]	; (66ac <tal_rx_enable+0x44>)
    667c:	681b      	ldr	r3, [r3, #0]
    667e:	2b00      	cmp	r3, #0
    6680:	d00c      	beq.n	669c <tal_rx_enable+0x34>
    6682:	2016      	movs	r0, #22
    6684:	4b0a      	ldr	r3, [pc, #40]	; (66b0 <tal_rx_enable+0x48>)
    6686:	4798      	blx	r3
    6688:	2006      	movs	r0, #6
    668a:	bd10      	pop	{r4, pc}
    668c:	387e      	subs	r0, #126	; 0x7e
    668e:	4b08      	ldr	r3, [pc, #32]	; (66b0 <tal_rx_enable+0x48>)
    6690:	4798      	blx	r3
    6692:	2200      	movs	r2, #0
    6694:	4b07      	ldr	r3, [pc, #28]	; (66b4 <tal_rx_enable+0x4c>)
    6696:	701a      	strb	r2, [r3, #0]
    6698:	0020      	movs	r0, r4
    669a:	e7f6      	b.n	668a <tal_rx_enable+0x22>
    669c:	2201      	movs	r2, #1
    669e:	4b05      	ldr	r3, [pc, #20]	; (66b4 <tal_rx_enable+0x4c>)
    66a0:	701a      	strb	r2, [r3, #0]
    66a2:	2006      	movs	r0, #6
    66a4:	e7f1      	b.n	668a <tal_rx_enable+0x22>
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	20000bcd 	.word	0x20000bcd
    66ac:	200003a4 	.word	0x200003a4
    66b0:	00005b11 	.word	0x00005b11
    66b4:	20000b90 	.word	0x20000b90

000066b8 <tx_done_handling>:
    66b8:	b510      	push	{r4, lr}
    66ba:	2200      	movs	r2, #0
    66bc:	4b0c      	ldr	r3, [pc, #48]	; (66f0 <tx_done_handling+0x38>)
    66be:	701a      	strb	r2, [r3, #0]
    66c0:	4b0c      	ldr	r3, [pc, #48]	; (66f4 <tx_done_handling+0x3c>)
    66c2:	781a      	ldrb	r2, [r3, #0]
    66c4:	2a07      	cmp	r2, #7
    66c6:	d80b      	bhi.n	66e0 <tx_done_handling+0x28>
    66c8:	0093      	lsls	r3, r2, #2
    66ca:	4a0b      	ldr	r2, [pc, #44]	; (66f8 <tx_done_handling+0x40>)
    66cc:	58d3      	ldr	r3, [r2, r3]
    66ce:	469f      	mov	pc, r3
    66d0:	2087      	movs	r0, #135	; 0x87
    66d2:	e008      	b.n	66e6 <tx_done_handling+0x2e>
    66d4:	20e1      	movs	r0, #225	; 0xe1
    66d6:	e006      	b.n	66e6 <tx_done_handling+0x2e>
    66d8:	20e9      	movs	r0, #233	; 0xe9
    66da:	e004      	b.n	66e6 <tx_done_handling+0x2e>
    66dc:	2085      	movs	r0, #133	; 0x85
    66de:	e002      	b.n	66e6 <tx_done_handling+0x2e>
    66e0:	2085      	movs	r0, #133	; 0x85
    66e2:	e000      	b.n	66e6 <tx_done_handling+0x2e>
    66e4:	2000      	movs	r0, #0
    66e6:	4b05      	ldr	r3, [pc, #20]	; (66fc <tx_done_handling+0x44>)
    66e8:	6819      	ldr	r1, [r3, #0]
    66ea:	4b05      	ldr	r3, [pc, #20]	; (6700 <tx_done_handling+0x48>)
    66ec:	4798      	blx	r3
    66ee:	bd10      	pop	{r4, pc}
    66f0:	20000bcd 	.word	0x20000bcd
    66f4:	200003aa 	.word	0x200003aa
    66f8:	000097a4 	.word	0x000097a4
    66fc:	20000ba0 	.word	0x20000ba0
    6700:	00007169 	.word	0x00007169

00006704 <handle_tx_end_irq>:
    6704:	b510      	push	{r4, lr}
    6706:	2800      	cmp	r0, #0
    6708:	d019      	beq.n	673e <handle_tx_end_irq+0x3a>
    670a:	2207      	movs	r2, #7
    670c:	4b1f      	ldr	r3, [pc, #124]	; (678c <handle_tx_end_irq+0x88>)
    670e:	701a      	strb	r2, [r3, #0]
    6710:	4b1f      	ldr	r3, [pc, #124]	; (6790 <handle_tx_end_irq+0x8c>)
    6712:	781b      	ldrb	r3, [r3, #0]
    6714:	2b00      	cmp	r3, #0
    6716:	d007      	beq.n	6728 <handle_tx_end_irq+0x24>
    6718:	4b1e      	ldr	r3, [pc, #120]	; (6794 <handle_tx_end_irq+0x90>)
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	2b00      	cmp	r3, #0
    671e:	d003      	beq.n	6728 <handle_tx_end_irq+0x24>
    6720:	4b1a      	ldr	r3, [pc, #104]	; (678c <handle_tx_end_irq+0x88>)
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	2b05      	cmp	r3, #5
    6726:	d012      	beq.n	674e <handle_tx_end_irq+0x4a>
    6728:	2202      	movs	r2, #2
    672a:	4b1b      	ldr	r3, [pc, #108]	; (6798 <handle_tx_end_irq+0x94>)
    672c:	701a      	strb	r2, [r3, #0]
    672e:	4b1b      	ldr	r3, [pc, #108]	; (679c <handle_tx_end_irq+0x98>)
    6730:	681b      	ldr	r3, [r3, #0]
    6732:	2b00      	cmp	r3, #0
    6734:	d022      	beq.n	677c <handle_tx_end_irq+0x78>
    6736:	2016      	movs	r0, #22
    6738:	4b19      	ldr	r3, [pc, #100]	; (67a0 <handle_tx_end_irq+0x9c>)
    673a:	4798      	blx	r3
    673c:	bd10      	pop	{r4, pc}
    673e:	2205      	movs	r2, #5
    6740:	21e0      	movs	r1, #224	; 0xe0
    6742:	2002      	movs	r0, #2
    6744:	4b17      	ldr	r3, [pc, #92]	; (67a4 <handle_tx_end_irq+0xa0>)
    6746:	4798      	blx	r3
    6748:	4b10      	ldr	r3, [pc, #64]	; (678c <handle_tx_end_irq+0x88>)
    674a:	7018      	strb	r0, [r3, #0]
    674c:	e7e0      	b.n	6710 <handle_tx_end_irq+0xc>
    674e:	4c14      	ldr	r4, [pc, #80]	; (67a0 <handle_tx_end_irq+0x9c>)
    6750:	2019      	movs	r0, #25
    6752:	47a0      	blx	r4
    6754:	2819      	cmp	r0, #25
    6756:	d1fb      	bne.n	6750 <handle_tx_end_irq+0x4c>
    6758:	4b13      	ldr	r3, [pc, #76]	; (67a8 <handle_tx_end_irq+0xa4>)
    675a:	2280      	movs	r2, #128	; 0x80
    675c:	0352      	lsls	r2, r2, #13
    675e:	619a      	str	r2, [r3, #24]
    6760:	46c0      	nop			; (mov r8, r8)
    6762:	46c0      	nop			; (mov r8, r8)
    6764:	615a      	str	r2, [r3, #20]
    6766:	4a0b      	ldr	r2, [pc, #44]	; (6794 <handle_tx_end_irq+0x90>)
    6768:	7813      	ldrb	r3, [r2, #0]
    676a:	3b01      	subs	r3, #1
    676c:	b2db      	uxtb	r3, r3
    676e:	7013      	strb	r3, [r2, #0]
    6770:	2b00      	cmp	r3, #0
    6772:	d1dc      	bne.n	672e <handle_tx_end_irq+0x2a>
    6774:	2200      	movs	r2, #0
    6776:	4b06      	ldr	r3, [pc, #24]	; (6790 <handle_tx_end_irq+0x8c>)
    6778:	701a      	strb	r2, [r3, #0]
    677a:	e7d8      	b.n	672e <handle_tx_end_irq+0x2a>
    677c:	2009      	movs	r0, #9
    677e:	4b08      	ldr	r3, [pc, #32]	; (67a0 <handle_tx_end_irq+0x9c>)
    6780:	4798      	blx	r3
    6782:	2201      	movs	r2, #1
    6784:	4b09      	ldr	r3, [pc, #36]	; (67ac <handle_tx_end_irq+0xa8>)
    6786:	701a      	strb	r2, [r3, #0]
    6788:	e7d8      	b.n	673c <handle_tx_end_irq+0x38>
    678a:	46c0      	nop			; (mov r8, r8)
    678c:	200003aa 	.word	0x200003aa
    6790:	200003a9 	.word	0x200003a9
    6794:	200003a8 	.word	0x200003a8
    6798:	20000bcd 	.word	0x20000bcd
    679c:	200003a4 	.word	0x200003a4
    67a0:	00005b11 	.word	0x00005b11
    67a4:	00006c35 	.word	0x00006c35
    67a8:	41004400 	.word	0x41004400
    67ac:	20000b90 	.word	0x20000b90

000067b0 <tfa_pib_set>:
    67b0:	b510      	push	{r4, lr}
    67b2:	2800      	cmp	r0, #0
    67b4:	d001      	beq.n	67ba <tfa_pib_set+0xa>
    67b6:	20f4      	movs	r0, #244	; 0xf4
    67b8:	bd10      	pop	{r4, pc}
    67ba:	2000      	movs	r0, #0
    67bc:	5608      	ldrsb	r0, [r1, r0]
    67be:	0003      	movs	r3, r0
    67c0:	3330      	adds	r3, #48	; 0x30
    67c2:	db0a      	blt.n	67da <tfa_pib_set+0x2a>
    67c4:	22cf      	movs	r2, #207	; 0xcf
    67c6:	4b0d      	ldr	r3, [pc, #52]	; (67fc <tfa_pib_set+0x4c>)
    67c8:	701a      	strb	r2, [r3, #0]
    67ca:	230f      	movs	r3, #15
    67cc:	2200      	movs	r2, #0
    67ce:	210f      	movs	r1, #15
    67d0:	2015      	movs	r0, #21
    67d2:	4c0b      	ldr	r4, [pc, #44]	; (6800 <tfa_pib_set+0x50>)
    67d4:	47a0      	blx	r4
    67d6:	2000      	movs	r0, #0
    67d8:	e7ee      	b.n	67b8 <tfa_pib_set+0x8>
    67da:	0003      	movs	r3, r0
    67dc:	335a      	adds	r3, #90	; 0x5a
    67de:	da04      	bge.n	67ea <tfa_pib_set+0x3a>
    67e0:	22a5      	movs	r2, #165	; 0xa5
    67e2:	4b06      	ldr	r3, [pc, #24]	; (67fc <tfa_pib_set+0x4c>)
    67e4:	701a      	strb	r2, [r3, #0]
    67e6:	2300      	movs	r3, #0
    67e8:	e7f0      	b.n	67cc <tfa_pib_set+0x1c>
    67ea:	4b04      	ldr	r3, [pc, #16]	; (67fc <tfa_pib_set+0x4c>)
    67ec:	7018      	strb	r0, [r3, #0]
    67ee:	305b      	adds	r0, #91	; 0x5b
    67f0:	2103      	movs	r1, #3
    67f2:	4b04      	ldr	r3, [pc, #16]	; (6804 <tfa_pib_set+0x54>)
    67f4:	4798      	blx	r3
    67f6:	3001      	adds	r0, #1
    67f8:	b2c3      	uxtb	r3, r0
    67fa:	e7e7      	b.n	67cc <tfa_pib_set+0x1c>
    67fc:	200003ab 	.word	0x200003ab
    6800:	00006c4d 	.word	0x00006c4d
    6804:	00007395 	.word	0x00007395

00006808 <tfa_init>:
    6808:	b510      	push	{r4, lr}
    680a:	4904      	ldr	r1, [pc, #16]	; (681c <tfa_init+0x14>)
    680c:	23a5      	movs	r3, #165	; 0xa5
    680e:	700b      	strb	r3, [r1, #0]
    6810:	2000      	movs	r0, #0
    6812:	4b03      	ldr	r3, [pc, #12]	; (6820 <tfa_init+0x18>)
    6814:	4798      	blx	r3
    6816:	2000      	movs	r0, #0
    6818:	bd10      	pop	{r4, pc}
    681a:	46c0      	nop			; (mov r8, r8)
    681c:	200003ab 	.word	0x200003ab
    6820:	000067b1 	.word	0x000067b1

00006824 <tmr_read_count>:
    6824:	b510      	push	{r4, lr}
    6826:	4802      	ldr	r0, [pc, #8]	; (6830 <tmr_read_count+0xc>)
    6828:	4b02      	ldr	r3, [pc, #8]	; (6834 <tmr_read_count+0x10>)
    682a:	4798      	blx	r3
    682c:	b280      	uxth	r0, r0
    682e:	bd10      	pop	{r4, pc}
    6830:	20000c04 	.word	0x20000c04
    6834:	000053a9 	.word	0x000053a9

00006838 <tmr_disable_cc_interrupt>:
    6838:	4b03      	ldr	r3, [pc, #12]	; (6848 <tmr_disable_cc_interrupt+0x10>)
    683a:	2110      	movs	r1, #16
    683c:	681a      	ldr	r2, [r3, #0]
    683e:	7311      	strb	r1, [r2, #12]
    6840:	7e5a      	ldrb	r2, [r3, #25]
    6842:	438a      	bics	r2, r1
    6844:	765a      	strb	r2, [r3, #25]
    6846:	4770      	bx	lr
    6848:	20000c04 	.word	0x20000c04

0000684c <tmr_enable_cc_interrupt>:
    684c:	b510      	push	{r4, lr}
    684e:	4c0a      	ldr	r4, [pc, #40]	; (6878 <tmr_enable_cc_interrupt+0x2c>)
    6850:	6820      	ldr	r0, [r4, #0]
    6852:	4b0a      	ldr	r3, [pc, #40]	; (687c <tmr_enable_cc_interrupt+0x30>)
    6854:	4798      	blx	r3
    6856:	4b0a      	ldr	r3, [pc, #40]	; (6880 <tmr_enable_cc_interrupt+0x34>)
    6858:	5c1b      	ldrb	r3, [r3, r0]
    685a:	221f      	movs	r2, #31
    685c:	401a      	ands	r2, r3
    685e:	2301      	movs	r3, #1
    6860:	4093      	lsls	r3, r2
    6862:	4a08      	ldr	r2, [pc, #32]	; (6884 <tmr_enable_cc_interrupt+0x38>)
    6864:	6013      	str	r3, [r2, #0]
    6866:	7e63      	ldrb	r3, [r4, #25]
    6868:	2210      	movs	r2, #16
    686a:	4313      	orrs	r3, r2
    686c:	7663      	strb	r3, [r4, #25]
    686e:	6823      	ldr	r3, [r4, #0]
    6870:	2210      	movs	r2, #16
    6872:	735a      	strb	r2, [r3, #13]
    6874:	bd10      	pop	{r4, pc}
    6876:	46c0      	nop			; (mov r8, r8)
    6878:	20000c04 	.word	0x20000c04
    687c:	00005135 	.word	0x00005135
    6880:	000097c4 	.word	0x000097c4
    6884:	e000e100 	.word	0xe000e100

00006888 <tmr_write_cmpreg>:
    6888:	b510      	push	{r4, lr}
    688a:	0002      	movs	r2, r0
    688c:	2100      	movs	r1, #0
    688e:	4802      	ldr	r0, [pc, #8]	; (6898 <tmr_write_cmpreg+0x10>)
    6890:	4b02      	ldr	r3, [pc, #8]	; (689c <tmr_write_cmpreg+0x14>)
    6892:	4798      	blx	r3
    6894:	bd10      	pop	{r4, pc}
    6896:	46c0      	nop			; (mov r8, r8)
    6898:	20000c04 	.word	0x20000c04
    689c:	000053d5 	.word	0x000053d5

000068a0 <save_cpu_interrupt>:
    68a0:	b082      	sub	sp, #8
    68a2:	f3ef 8310 	mrs	r3, PRIMASK
    68a6:	425a      	negs	r2, r3
    68a8:	4153      	adcs	r3, r2
    68aa:	9301      	str	r3, [sp, #4]
    68ac:	b672      	cpsid	i
    68ae:	f3bf 8f5f 	dmb	sy
    68b2:	2200      	movs	r2, #0
    68b4:	4b02      	ldr	r3, [pc, #8]	; (68c0 <save_cpu_interrupt+0x20>)
    68b6:	701a      	strb	r2, [r3, #0]
    68b8:	9801      	ldr	r0, [sp, #4]
    68ba:	b2c0      	uxtb	r0, r0
    68bc:	b002      	add	sp, #8
    68be:	4770      	bx	lr
    68c0:	2000000c 	.word	0x2000000c

000068c4 <restore_cpu_interrupt>:
    68c4:	2800      	cmp	r0, #0
    68c6:	d005      	beq.n	68d4 <restore_cpu_interrupt+0x10>
    68c8:	2201      	movs	r2, #1
    68ca:	4b03      	ldr	r3, [pc, #12]	; (68d8 <restore_cpu_interrupt+0x14>)
    68cc:	701a      	strb	r2, [r3, #0]
    68ce:	f3bf 8f5f 	dmb	sy
    68d2:	b662      	cpsie	i
    68d4:	4770      	bx	lr
    68d6:	46c0      	nop			; (mov r8, r8)
    68d8:	2000000c 	.word	0x2000000c

000068dc <AT86RFX_ISR>:
    68dc:	b510      	push	{r4, lr}
    68de:	2201      	movs	r2, #1
    68e0:	4b03      	ldr	r3, [pc, #12]	; (68f0 <AT86RFX_ISR+0x14>)
    68e2:	611a      	str	r2, [r3, #16]
    68e4:	4b03      	ldr	r3, [pc, #12]	; (68f4 <AT86RFX_ISR+0x18>)
    68e6:	681b      	ldr	r3, [r3, #0]
    68e8:	2b00      	cmp	r3, #0
    68ea:	d000      	beq.n	68ee <AT86RFX_ISR+0x12>
    68ec:	4798      	blx	r3
    68ee:	bd10      	pop	{r4, pc}
    68f0:	40001800 	.word	0x40001800
    68f4:	200003ac 	.word	0x200003ac

000068f8 <trx_spi_init>:
    68f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68fa:	b085      	sub	sp, #20
    68fc:	4a38      	ldr	r2, [pc, #224]	; (69e0 <trx_spi_init+0xe8>)
    68fe:	2300      	movs	r3, #0
    6900:	7053      	strb	r3, [r2, #1]
    6902:	7093      	strb	r3, [r2, #2]
    6904:	213f      	movs	r1, #63	; 0x3f
    6906:	7011      	strb	r1, [r2, #0]
    6908:	4c36      	ldr	r4, [pc, #216]	; (69e4 <trx_spi_init+0xec>)
    690a:	7021      	strb	r1, [r4, #0]
    690c:	7063      	strb	r3, [r4, #1]
    690e:	70a3      	strb	r3, [r4, #2]
    6910:	2201      	movs	r2, #1
    6912:	4669      	mov	r1, sp
    6914:	704a      	strb	r2, [r1, #1]
    6916:	708b      	strb	r3, [r1, #2]
    6918:	700a      	strb	r2, [r1, #0]
    691a:	203f      	movs	r0, #63	; 0x3f
    691c:	4b32      	ldr	r3, [pc, #200]	; (69e8 <trx_spi_init+0xf0>)
    691e:	4798      	blx	r3
    6920:	7823      	ldrb	r3, [r4, #0]
    6922:	09d9      	lsrs	r1, r3, #7
    6924:	2200      	movs	r2, #0
    6926:	2900      	cmp	r1, #0
    6928:	d104      	bne.n	6934 <trx_spi_init+0x3c>
    692a:	095a      	lsrs	r2, r3, #5
    692c:	01d2      	lsls	r2, r2, #7
    692e:	492f      	ldr	r1, [pc, #188]	; (69ec <trx_spi_init+0xf4>)
    6930:	468c      	mov	ip, r1
    6932:	4462      	add	r2, ip
    6934:	261f      	movs	r6, #31
    6936:	4033      	ands	r3, r6
    6938:	2501      	movs	r5, #1
    693a:	0029      	movs	r1, r5
    693c:	4099      	lsls	r1, r3
    693e:	6191      	str	r1, [r2, #24]
    6940:	4c2b      	ldr	r4, [pc, #172]	; (69f0 <trx_spi_init+0xf8>)
    6942:	7025      	strb	r5, [r4, #0]
    6944:	2300      	movs	r3, #0
    6946:	6063      	str	r3, [r4, #4]
    6948:	60a3      	str	r3, [r4, #8]
    694a:	7423      	strb	r3, [r4, #16]
    694c:	7463      	strb	r3, [r4, #17]
    694e:	74a5      	strb	r5, [r4, #18]
    6950:	74e5      	strb	r5, [r4, #19]
    6952:	7523      	strb	r3, [r4, #20]
    6954:	2224      	movs	r2, #36	; 0x24
    6956:	54a3      	strb	r3, [r4, r2]
    6958:	0020      	movs	r0, r4
    695a:	3018      	adds	r0, #24
    695c:	3a18      	subs	r2, #24
    695e:	2100      	movs	r1, #0
    6960:	4b24      	ldr	r3, [pc, #144]	; (69f4 <trx_spi_init+0xfc>)
    6962:	4798      	blx	r3
    6964:	2380      	movs	r3, #128	; 0x80
    6966:	025b      	lsls	r3, r3, #9
    6968:	60e3      	str	r3, [r4, #12]
    696a:	4b23      	ldr	r3, [pc, #140]	; (69f8 <trx_spi_init+0x100>)
    696c:	61a3      	str	r3, [r4, #24]
    696e:	4b23      	ldr	r3, [pc, #140]	; (69fc <trx_spi_init+0x104>)
    6970:	62a3      	str	r3, [r4, #40]	; 0x28
    6972:	2301      	movs	r3, #1
    6974:	425b      	negs	r3, r3
    6976:	62e3      	str	r3, [r4, #44]	; 0x2c
    6978:	4b21      	ldr	r3, [pc, #132]	; (6a00 <trx_spi_init+0x108>)
    697a:	6323      	str	r3, [r4, #48]	; 0x30
    697c:	4b21      	ldr	r3, [pc, #132]	; (6a04 <trx_spi_init+0x10c>)
    697e:	6363      	str	r3, [r4, #52]	; 0x34
    6980:	4f21      	ldr	r7, [pc, #132]	; (6a08 <trx_spi_init+0x110>)
    6982:	0022      	movs	r2, r4
    6984:	4921      	ldr	r1, [pc, #132]	; (6a0c <trx_spi_init+0x114>)
    6986:	0038      	movs	r0, r7
    6988:	4b21      	ldr	r3, [pc, #132]	; (6a10 <trx_spi_init+0x118>)
    698a:	4798      	blx	r3
    698c:	683c      	ldr	r4, [r7, #0]
    698e:	0020      	movs	r0, r4
    6990:	4b20      	ldr	r3, [pc, #128]	; (6a14 <trx_spi_init+0x11c>)
    6992:	4798      	blx	r3
    6994:	4006      	ands	r6, r0
    6996:	40b5      	lsls	r5, r6
    6998:	4b1f      	ldr	r3, [pc, #124]	; (6a18 <trx_spi_init+0x120>)
    699a:	601d      	str	r5, [r3, #0]
    699c:	683a      	ldr	r2, [r7, #0]
    699e:	69d3      	ldr	r3, [r2, #28]
    69a0:	2b00      	cmp	r3, #0
    69a2:	d1fc      	bne.n	699e <trx_spi_init+0xa6>
    69a4:	6823      	ldr	r3, [r4, #0]
    69a6:	2502      	movs	r5, #2
    69a8:	432b      	orrs	r3, r5
    69aa:	6023      	str	r3, [r4, #0]
    69ac:	ac01      	add	r4, sp, #4
    69ae:	0020      	movs	r0, r4
    69b0:	4b1a      	ldr	r3, [pc, #104]	; (6a1c <trx_spi_init+0x124>)
    69b2:	4798      	blx	r3
    69b4:	2320      	movs	r3, #32
    69b6:	9301      	str	r3, [sp, #4]
    69b8:	2380      	movs	r3, #128	; 0x80
    69ba:	039b      	lsls	r3, r3, #14
    69bc:	6063      	str	r3, [r4, #4]
    69be:	7225      	strb	r5, [r4, #8]
    69c0:	2301      	movs	r3, #1
    69c2:	7263      	strb	r3, [r4, #9]
    69c4:	2200      	movs	r2, #0
    69c6:	72a2      	strb	r2, [r4, #10]
    69c8:	72e3      	strb	r3, [r4, #11]
    69ca:	0021      	movs	r1, r4
    69cc:	2000      	movs	r0, #0
    69ce:	4b14      	ldr	r3, [pc, #80]	; (6a20 <trx_spi_init+0x128>)
    69d0:	4798      	blx	r3
    69d2:	2200      	movs	r2, #0
    69d4:	2100      	movs	r1, #0
    69d6:	4813      	ldr	r0, [pc, #76]	; (6a24 <trx_spi_init+0x12c>)
    69d8:	4b13      	ldr	r3, [pc, #76]	; (6a28 <trx_spi_init+0x130>)
    69da:	4798      	blx	r3
    69dc:	b005      	add	sp, #20
    69de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69e0:	20000c24 	.word	0x20000c24
    69e4:	20000c28 	.word	0x20000c28
    69e8:	00003fe9 	.word	0x00003fe9
    69ec:	41004400 	.word	0x41004400
    69f0:	20000c2c 	.word	0x20000c2c
    69f4:	0000761b 	.word	0x0000761b
    69f8:	004c4b40 	.word	0x004c4b40
    69fc:	00530005 	.word	0x00530005
    6a00:	003e0005 	.word	0x003e0005
    6a04:	00520005 	.word	0x00520005
    6a08:	20000c64 	.word	0x20000c64
    6a0c:	42001800 	.word	0x42001800
    6a10:	00004451 	.word	0x00004451
    6a14:	000043c1 	.word	0x000043c1
    6a18:	e000e100 	.word	0xe000e100
    6a1c:	00003f5d 	.word	0x00003f5d
    6a20:	00003f71 	.word	0x00003f71
    6a24:	000068dd 	.word	0x000068dd
    6a28:	00003e19 	.word	0x00003e19

00006a2c <trx_reg_read>:
    6a2c:	b570      	push	{r4, r5, r6, lr}
    6a2e:	b082      	sub	sp, #8
    6a30:	0005      	movs	r5, r0
    6a32:	f3ef 8310 	mrs	r3, PRIMASK
    6a36:	425a      	negs	r2, r3
    6a38:	4153      	adcs	r3, r2
    6a3a:	9301      	str	r3, [sp, #4]
    6a3c:	b672      	cpsid	i
    6a3e:	f3bf 8f5f 	dmb	sy
    6a42:	2200      	movs	r2, #0
    6a44:	4b33      	ldr	r3, [pc, #204]	; (6b14 <trx_reg_read+0xe8>)
    6a46:	701a      	strb	r2, [r3, #0]
    6a48:	9c01      	ldr	r4, [sp, #4]
    6a4a:	4e33      	ldr	r6, [pc, #204]	; (6b18 <trx_reg_read+0xec>)
    6a4c:	3201      	adds	r2, #1
    6a4e:	4933      	ldr	r1, [pc, #204]	; (6b1c <trx_reg_read+0xf0>)
    6a50:	0030      	movs	r0, r6
    6a52:	4b33      	ldr	r3, [pc, #204]	; (6b20 <trx_reg_read+0xf4>)
    6a54:	4798      	blx	r3
    6a56:	6833      	ldr	r3, [r6, #0]
    6a58:	2101      	movs	r1, #1
    6a5a:	7e1a      	ldrb	r2, [r3, #24]
    6a5c:	420a      	tst	r2, r1
    6a5e:	d0fc      	beq.n	6a5a <trx_reg_read+0x2e>
    6a60:	7e1a      	ldrb	r2, [r3, #24]
    6a62:	07d2      	lsls	r2, r2, #31
    6a64:	d502      	bpl.n	6a6c <trx_reg_read+0x40>
    6a66:	2280      	movs	r2, #128	; 0x80
    6a68:	4315      	orrs	r5, r2
    6a6a:	629d      	str	r5, [r3, #40]	; 0x28
    6a6c:	2102      	movs	r1, #2
    6a6e:	7e1a      	ldrb	r2, [r3, #24]
    6a70:	420a      	tst	r2, r1
    6a72:	d0fc      	beq.n	6a6e <trx_reg_read+0x42>
    6a74:	2104      	movs	r1, #4
    6a76:	7e1a      	ldrb	r2, [r3, #24]
    6a78:	420a      	tst	r2, r1
    6a7a:	d0fc      	beq.n	6a76 <trx_reg_read+0x4a>
    6a7c:	7e1a      	ldrb	r2, [r3, #24]
    6a7e:	0752      	lsls	r2, r2, #29
    6a80:	d50c      	bpl.n	6a9c <trx_reg_read+0x70>
    6a82:	8b5a      	ldrh	r2, [r3, #26]
    6a84:	0752      	lsls	r2, r2, #29
    6a86:	d501      	bpl.n	6a8c <trx_reg_read+0x60>
    6a88:	2204      	movs	r2, #4
    6a8a:	835a      	strh	r2, [r3, #26]
    6a8c:	4a22      	ldr	r2, [pc, #136]	; (6b18 <trx_reg_read+0xec>)
    6a8e:	7992      	ldrb	r2, [r2, #6]
    6a90:	2a01      	cmp	r2, #1
    6a92:	d034      	beq.n	6afe <trx_reg_read+0xd2>
    6a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6a96:	b2d2      	uxtb	r2, r2
    6a98:	4922      	ldr	r1, [pc, #136]	; (6b24 <trx_reg_read+0xf8>)
    6a9a:	800a      	strh	r2, [r1, #0]
    6a9c:	2101      	movs	r1, #1
    6a9e:	7e1a      	ldrb	r2, [r3, #24]
    6aa0:	420a      	tst	r2, r1
    6aa2:	d0fc      	beq.n	6a9e <trx_reg_read+0x72>
    6aa4:	7e1a      	ldrb	r2, [r3, #24]
    6aa6:	07d2      	lsls	r2, r2, #31
    6aa8:	d501      	bpl.n	6aae <trx_reg_read+0x82>
    6aaa:	2200      	movs	r2, #0
    6aac:	629a      	str	r2, [r3, #40]	; 0x28
    6aae:	2102      	movs	r1, #2
    6ab0:	7e1a      	ldrb	r2, [r3, #24]
    6ab2:	420a      	tst	r2, r1
    6ab4:	d0fc      	beq.n	6ab0 <trx_reg_read+0x84>
    6ab6:	2104      	movs	r1, #4
    6ab8:	7e1a      	ldrb	r2, [r3, #24]
    6aba:	420a      	tst	r2, r1
    6abc:	d0fc      	beq.n	6ab8 <trx_reg_read+0x8c>
    6abe:	7e1a      	ldrb	r2, [r3, #24]
    6ac0:	2500      	movs	r5, #0
    6ac2:	0752      	lsls	r2, r2, #29
    6ac4:	d50a      	bpl.n	6adc <trx_reg_read+0xb0>
    6ac6:	8b5a      	ldrh	r2, [r3, #26]
    6ac8:	0752      	lsls	r2, r2, #29
    6aca:	d501      	bpl.n	6ad0 <trx_reg_read+0xa4>
    6acc:	2204      	movs	r2, #4
    6ace:	835a      	strh	r2, [r3, #26]
    6ad0:	4a11      	ldr	r2, [pc, #68]	; (6b18 <trx_reg_read+0xec>)
    6ad2:	7992      	ldrb	r2, [r2, #6]
    6ad4:	2a01      	cmp	r2, #1
    6ad6:	d018      	beq.n	6b0a <trx_reg_read+0xde>
    6ad8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    6ada:	b2ed      	uxtb	r5, r5
    6adc:	2200      	movs	r2, #0
    6ade:	490f      	ldr	r1, [pc, #60]	; (6b1c <trx_reg_read+0xf0>)
    6ae0:	480d      	ldr	r0, [pc, #52]	; (6b18 <trx_reg_read+0xec>)
    6ae2:	4b0f      	ldr	r3, [pc, #60]	; (6b20 <trx_reg_read+0xf4>)
    6ae4:	4798      	blx	r3
    6ae6:	23ff      	movs	r3, #255	; 0xff
    6ae8:	4223      	tst	r3, r4
    6aea:	d005      	beq.n	6af8 <trx_reg_read+0xcc>
    6aec:	2201      	movs	r2, #1
    6aee:	4b09      	ldr	r3, [pc, #36]	; (6b14 <trx_reg_read+0xe8>)
    6af0:	701a      	strb	r2, [r3, #0]
    6af2:	f3bf 8f5f 	dmb	sy
    6af6:	b662      	cpsie	i
    6af8:	b2e8      	uxtb	r0, r5
    6afa:	b002      	add	sp, #8
    6afc:	bd70      	pop	{r4, r5, r6, pc}
    6afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6b00:	05d2      	lsls	r2, r2, #23
    6b02:	0dd2      	lsrs	r2, r2, #23
    6b04:	4907      	ldr	r1, [pc, #28]	; (6b24 <trx_reg_read+0xf8>)
    6b06:	800a      	strh	r2, [r1, #0]
    6b08:	e7c8      	b.n	6a9c <trx_reg_read+0x70>
    6b0a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    6b0c:	05ed      	lsls	r5, r5, #23
    6b0e:	0ded      	lsrs	r5, r5, #23
    6b10:	e7e4      	b.n	6adc <trx_reg_read+0xb0>
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	2000000c 	.word	0x2000000c
    6b18:	20000c64 	.word	0x20000c64
    6b1c:	20000c28 	.word	0x20000c28
    6b20:	00004629 	.word	0x00004629
    6b24:	20000c20 	.word	0x20000c20

00006b28 <trx_reg_write>:
    6b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b2a:	b083      	sub	sp, #12
    6b2c:	0006      	movs	r6, r0
    6b2e:	000c      	movs	r4, r1
    6b30:	f3ef 8310 	mrs	r3, PRIMASK
    6b34:	425a      	negs	r2, r3
    6b36:	4153      	adcs	r3, r2
    6b38:	9301      	str	r3, [sp, #4]
    6b3a:	b672      	cpsid	i
    6b3c:	f3bf 8f5f 	dmb	sy
    6b40:	2200      	movs	r2, #0
    6b42:	4b34      	ldr	r3, [pc, #208]	; (6c14 <trx_reg_write+0xec>)
    6b44:	701a      	strb	r2, [r3, #0]
    6b46:	9d01      	ldr	r5, [sp, #4]
    6b48:	4f33      	ldr	r7, [pc, #204]	; (6c18 <trx_reg_write+0xf0>)
    6b4a:	3201      	adds	r2, #1
    6b4c:	4933      	ldr	r1, [pc, #204]	; (6c1c <trx_reg_write+0xf4>)
    6b4e:	0038      	movs	r0, r7
    6b50:	4b33      	ldr	r3, [pc, #204]	; (6c20 <trx_reg_write+0xf8>)
    6b52:	4798      	blx	r3
    6b54:	683b      	ldr	r3, [r7, #0]
    6b56:	2101      	movs	r1, #1
    6b58:	7e1a      	ldrb	r2, [r3, #24]
    6b5a:	420a      	tst	r2, r1
    6b5c:	d0fc      	beq.n	6b58 <trx_reg_write+0x30>
    6b5e:	7e1a      	ldrb	r2, [r3, #24]
    6b60:	07d2      	lsls	r2, r2, #31
    6b62:	d502      	bpl.n	6b6a <trx_reg_write+0x42>
    6b64:	22c0      	movs	r2, #192	; 0xc0
    6b66:	4316      	orrs	r6, r2
    6b68:	629e      	str	r6, [r3, #40]	; 0x28
    6b6a:	2102      	movs	r1, #2
    6b6c:	7e1a      	ldrb	r2, [r3, #24]
    6b6e:	420a      	tst	r2, r1
    6b70:	d0fc      	beq.n	6b6c <trx_reg_write+0x44>
    6b72:	2104      	movs	r1, #4
    6b74:	7e1a      	ldrb	r2, [r3, #24]
    6b76:	420a      	tst	r2, r1
    6b78:	d0fc      	beq.n	6b74 <trx_reg_write+0x4c>
    6b7a:	7e1a      	ldrb	r2, [r3, #24]
    6b7c:	0752      	lsls	r2, r2, #29
    6b7e:	d50c      	bpl.n	6b9a <trx_reg_write+0x72>
    6b80:	8b5a      	ldrh	r2, [r3, #26]
    6b82:	0752      	lsls	r2, r2, #29
    6b84:	d501      	bpl.n	6b8a <trx_reg_write+0x62>
    6b86:	2204      	movs	r2, #4
    6b88:	835a      	strh	r2, [r3, #26]
    6b8a:	4a23      	ldr	r2, [pc, #140]	; (6c18 <trx_reg_write+0xf0>)
    6b8c:	7992      	ldrb	r2, [r2, #6]
    6b8e:	2a01      	cmp	r2, #1
    6b90:	d033      	beq.n	6bfa <trx_reg_write+0xd2>
    6b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6b94:	b2d2      	uxtb	r2, r2
    6b96:	4923      	ldr	r1, [pc, #140]	; (6c24 <trx_reg_write+0xfc>)
    6b98:	800a      	strh	r2, [r1, #0]
    6b9a:	2101      	movs	r1, #1
    6b9c:	7e1a      	ldrb	r2, [r3, #24]
    6b9e:	420a      	tst	r2, r1
    6ba0:	d0fc      	beq.n	6b9c <trx_reg_write+0x74>
    6ba2:	7e1a      	ldrb	r2, [r3, #24]
    6ba4:	07d2      	lsls	r2, r2, #31
    6ba6:	d500      	bpl.n	6baa <trx_reg_write+0x82>
    6ba8:	629c      	str	r4, [r3, #40]	; 0x28
    6baa:	2102      	movs	r1, #2
    6bac:	7e1a      	ldrb	r2, [r3, #24]
    6bae:	420a      	tst	r2, r1
    6bb0:	d0fc      	beq.n	6bac <trx_reg_write+0x84>
    6bb2:	2104      	movs	r1, #4
    6bb4:	7e1a      	ldrb	r2, [r3, #24]
    6bb6:	420a      	tst	r2, r1
    6bb8:	d0fc      	beq.n	6bb4 <trx_reg_write+0x8c>
    6bba:	7e1a      	ldrb	r2, [r3, #24]
    6bbc:	0752      	lsls	r2, r2, #29
    6bbe:	d50c      	bpl.n	6bda <trx_reg_write+0xb2>
    6bc0:	8b5a      	ldrh	r2, [r3, #26]
    6bc2:	0752      	lsls	r2, r2, #29
    6bc4:	d501      	bpl.n	6bca <trx_reg_write+0xa2>
    6bc6:	2204      	movs	r2, #4
    6bc8:	835a      	strh	r2, [r3, #26]
    6bca:	4a13      	ldr	r2, [pc, #76]	; (6c18 <trx_reg_write+0xf0>)
    6bcc:	7992      	ldrb	r2, [r2, #6]
    6bce:	2a01      	cmp	r2, #1
    6bd0:	d019      	beq.n	6c06 <trx_reg_write+0xde>
    6bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bd4:	b2db      	uxtb	r3, r3
    6bd6:	4a13      	ldr	r2, [pc, #76]	; (6c24 <trx_reg_write+0xfc>)
    6bd8:	8013      	strh	r3, [r2, #0]
    6bda:	2200      	movs	r2, #0
    6bdc:	490f      	ldr	r1, [pc, #60]	; (6c1c <trx_reg_write+0xf4>)
    6bde:	480e      	ldr	r0, [pc, #56]	; (6c18 <trx_reg_write+0xf0>)
    6be0:	4b0f      	ldr	r3, [pc, #60]	; (6c20 <trx_reg_write+0xf8>)
    6be2:	4798      	blx	r3
    6be4:	23ff      	movs	r3, #255	; 0xff
    6be6:	422b      	tst	r3, r5
    6be8:	d005      	beq.n	6bf6 <trx_reg_write+0xce>
    6bea:	2201      	movs	r2, #1
    6bec:	4b09      	ldr	r3, [pc, #36]	; (6c14 <trx_reg_write+0xec>)
    6bee:	701a      	strb	r2, [r3, #0]
    6bf0:	f3bf 8f5f 	dmb	sy
    6bf4:	b662      	cpsie	i
    6bf6:	b003      	add	sp, #12
    6bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6bfc:	05d2      	lsls	r2, r2, #23
    6bfe:	0dd2      	lsrs	r2, r2, #23
    6c00:	4908      	ldr	r1, [pc, #32]	; (6c24 <trx_reg_write+0xfc>)
    6c02:	800a      	strh	r2, [r1, #0]
    6c04:	e7c9      	b.n	6b9a <trx_reg_write+0x72>
    6c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c08:	05db      	lsls	r3, r3, #23
    6c0a:	0ddb      	lsrs	r3, r3, #23
    6c0c:	4a05      	ldr	r2, [pc, #20]	; (6c24 <trx_reg_write+0xfc>)
    6c0e:	8013      	strh	r3, [r2, #0]
    6c10:	e7e3      	b.n	6bda <trx_reg_write+0xb2>
    6c12:	46c0      	nop			; (mov r8, r8)
    6c14:	2000000c 	.word	0x2000000c
    6c18:	20000c64 	.word	0x20000c64
    6c1c:	20000c28 	.word	0x20000c28
    6c20:	00004629 	.word	0x00004629
    6c24:	20000c20 	.word	0x20000c20

00006c28 <trx_irq_init>:
    6c28:	4b01      	ldr	r3, [pc, #4]	; (6c30 <trx_irq_init+0x8>)
    6c2a:	6018      	str	r0, [r3, #0]
    6c2c:	4770      	bx	lr
    6c2e:	46c0      	nop			; (mov r8, r8)
    6c30:	200003ac 	.word	0x200003ac

00006c34 <trx_bit_read>:
    6c34:	b570      	push	{r4, r5, r6, lr}
    6c36:	000c      	movs	r4, r1
    6c38:	0015      	movs	r5, r2
    6c3a:	4b03      	ldr	r3, [pc, #12]	; (6c48 <trx_bit_read+0x14>)
    6c3c:	4798      	blx	r3
    6c3e:	4004      	ands	r4, r0
    6c40:	412c      	asrs	r4, r5
    6c42:	b2e0      	uxtb	r0, r4
    6c44:	bd70      	pop	{r4, r5, r6, pc}
    6c46:	46c0      	nop			; (mov r8, r8)
    6c48:	00006a2d 	.word	0x00006a2d

00006c4c <trx_bit_write>:
    6c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c4e:	0004      	movs	r4, r0
    6c50:	000e      	movs	r6, r1
    6c52:	0017      	movs	r7, r2
    6c54:	001d      	movs	r5, r3
    6c56:	4b05      	ldr	r3, [pc, #20]	; (6c6c <trx_bit_write+0x20>)
    6c58:	4798      	blx	r3
    6c5a:	43b0      	bics	r0, r6
    6c5c:	40bd      	lsls	r5, r7
    6c5e:	4035      	ands	r5, r6
    6c60:	b2c1      	uxtb	r1, r0
    6c62:	4329      	orrs	r1, r5
    6c64:	0020      	movs	r0, r4
    6c66:	4b02      	ldr	r3, [pc, #8]	; (6c70 <trx_bit_write+0x24>)
    6c68:	4798      	blx	r3
    6c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c6c:	00006a2d 	.word	0x00006a2d
    6c70:	00006b29 	.word	0x00006b29

00006c74 <trx_frame_read>:
    6c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c76:	46d6      	mov	lr, sl
    6c78:	464f      	mov	r7, r9
    6c7a:	4646      	mov	r6, r8
    6c7c:	b5c0      	push	{r6, r7, lr}
    6c7e:	b082      	sub	sp, #8
    6c80:	0005      	movs	r5, r0
    6c82:	000c      	movs	r4, r1
    6c84:	f3ef 8310 	mrs	r3, PRIMASK
    6c88:	425a      	negs	r2, r3
    6c8a:	4153      	adcs	r3, r2
    6c8c:	9301      	str	r3, [sp, #4]
    6c8e:	b672      	cpsid	i
    6c90:	f3bf 8f5f 	dmb	sy
    6c94:	2200      	movs	r2, #0
    6c96:	4b3e      	ldr	r3, [pc, #248]	; (6d90 <trx_frame_read+0x11c>)
    6c98:	701a      	strb	r2, [r3, #0]
    6c9a:	9b01      	ldr	r3, [sp, #4]
    6c9c:	4698      	mov	r8, r3
    6c9e:	4f3d      	ldr	r7, [pc, #244]	; (6d94 <trx_frame_read+0x120>)
    6ca0:	3201      	adds	r2, #1
    6ca2:	493d      	ldr	r1, [pc, #244]	; (6d98 <trx_frame_read+0x124>)
    6ca4:	0038      	movs	r0, r7
    6ca6:	4b3d      	ldr	r3, [pc, #244]	; (6d9c <trx_frame_read+0x128>)
    6ca8:	4798      	blx	r3
    6caa:	683b      	ldr	r3, [r7, #0]
    6cac:	2101      	movs	r1, #1
    6cae:	7e1a      	ldrb	r2, [r3, #24]
    6cb0:	420a      	tst	r2, r1
    6cb2:	d0fc      	beq.n	6cae <trx_frame_read+0x3a>
    6cb4:	7e1a      	ldrb	r2, [r3, #24]
    6cb6:	07d2      	lsls	r2, r2, #31
    6cb8:	d501      	bpl.n	6cbe <trx_frame_read+0x4a>
    6cba:	2220      	movs	r2, #32
    6cbc:	629a      	str	r2, [r3, #40]	; 0x28
    6cbe:	2102      	movs	r1, #2
    6cc0:	7e1a      	ldrb	r2, [r3, #24]
    6cc2:	420a      	tst	r2, r1
    6cc4:	d0fc      	beq.n	6cc0 <trx_frame_read+0x4c>
    6cc6:	2104      	movs	r1, #4
    6cc8:	7e1a      	ldrb	r2, [r3, #24]
    6cca:	420a      	tst	r2, r1
    6ccc:	d0fc      	beq.n	6cc8 <trx_frame_read+0x54>
    6cce:	7e1a      	ldrb	r2, [r3, #24]
    6cd0:	0752      	lsls	r2, r2, #29
    6cd2:	d50c      	bpl.n	6cee <trx_frame_read+0x7a>
    6cd4:	8b5a      	ldrh	r2, [r3, #26]
    6cd6:	0752      	lsls	r2, r2, #29
    6cd8:	d501      	bpl.n	6cde <trx_frame_read+0x6a>
    6cda:	2204      	movs	r2, #4
    6cdc:	835a      	strh	r2, [r3, #26]
    6cde:	4a2d      	ldr	r2, [pc, #180]	; (6d94 <trx_frame_read+0x120>)
    6ce0:	7992      	ldrb	r2, [r2, #6]
    6ce2:	2a01      	cmp	r2, #1
    6ce4:	d013      	beq.n	6d0e <trx_frame_read+0x9a>
    6ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ce8:	b2db      	uxtb	r3, r3
    6cea:	4a2d      	ldr	r2, [pc, #180]	; (6da0 <trx_frame_read+0x12c>)
    6cec:	8013      	strh	r3, [r2, #0]
    6cee:	1e63      	subs	r3, r4, #1
    6cf0:	b2db      	uxtb	r3, r3
    6cf2:	2c00      	cmp	r4, #0
    6cf4:	d036      	beq.n	6d64 <trx_frame_read+0xf0>
    6cf6:	3301      	adds	r3, #1
    6cf8:	469c      	mov	ip, r3
    6cfa:	44ac      	add	ip, r5
    6cfc:	2720      	movs	r7, #32
    6cfe:	4e25      	ldr	r6, [pc, #148]	; (6d94 <trx_frame_read+0x120>)
    6d00:	2001      	movs	r0, #1
    6d02:	2300      	movs	r3, #0
    6d04:	469a      	mov	sl, r3
    6d06:	2402      	movs	r4, #2
    6d08:	2104      	movs	r1, #4
    6d0a:	46b1      	mov	r9, r6
    6d0c:	e00f      	b.n	6d2e <trx_frame_read+0xba>
    6d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d10:	05db      	lsls	r3, r3, #23
    6d12:	0ddb      	lsrs	r3, r3, #23
    6d14:	4a22      	ldr	r2, [pc, #136]	; (6da0 <trx_frame_read+0x12c>)
    6d16:	8013      	strh	r3, [r2, #0]
    6d18:	e7e9      	b.n	6cee <trx_frame_read+0x7a>
    6d1a:	464a      	mov	r2, r9
    6d1c:	7992      	ldrb	r2, [r2, #6]
    6d1e:	2a01      	cmp	r2, #1
    6d20:	d01c      	beq.n	6d5c <trx_frame_read+0xe8>
    6d22:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    6d24:	b2ff      	uxtb	r7, r7
    6d26:	702f      	strb	r7, [r5, #0]
    6d28:	3501      	adds	r5, #1
    6d2a:	4565      	cmp	r5, ip
    6d2c:	d01a      	beq.n	6d64 <trx_frame_read+0xf0>
    6d2e:	6833      	ldr	r3, [r6, #0]
    6d30:	7e1a      	ldrb	r2, [r3, #24]
    6d32:	4202      	tst	r2, r0
    6d34:	d0fc      	beq.n	6d30 <trx_frame_read+0xbc>
    6d36:	7e1a      	ldrb	r2, [r3, #24]
    6d38:	4202      	tst	r2, r0
    6d3a:	d001      	beq.n	6d40 <trx_frame_read+0xcc>
    6d3c:	4652      	mov	r2, sl
    6d3e:	629a      	str	r2, [r3, #40]	; 0x28
    6d40:	7e1a      	ldrb	r2, [r3, #24]
    6d42:	4222      	tst	r2, r4
    6d44:	d0fc      	beq.n	6d40 <trx_frame_read+0xcc>
    6d46:	7e1a      	ldrb	r2, [r3, #24]
    6d48:	420a      	tst	r2, r1
    6d4a:	d0fc      	beq.n	6d46 <trx_frame_read+0xd2>
    6d4c:	7e1a      	ldrb	r2, [r3, #24]
    6d4e:	420a      	tst	r2, r1
    6d50:	d0e9      	beq.n	6d26 <trx_frame_read+0xb2>
    6d52:	8b5a      	ldrh	r2, [r3, #26]
    6d54:	420a      	tst	r2, r1
    6d56:	d0e0      	beq.n	6d1a <trx_frame_read+0xa6>
    6d58:	8359      	strh	r1, [r3, #26]
    6d5a:	e7de      	b.n	6d1a <trx_frame_read+0xa6>
    6d5c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    6d5e:	05ff      	lsls	r7, r7, #23
    6d60:	0dff      	lsrs	r7, r7, #23
    6d62:	e7e0      	b.n	6d26 <trx_frame_read+0xb2>
    6d64:	2200      	movs	r2, #0
    6d66:	490c      	ldr	r1, [pc, #48]	; (6d98 <trx_frame_read+0x124>)
    6d68:	480a      	ldr	r0, [pc, #40]	; (6d94 <trx_frame_read+0x120>)
    6d6a:	4b0c      	ldr	r3, [pc, #48]	; (6d9c <trx_frame_read+0x128>)
    6d6c:	4798      	blx	r3
    6d6e:	23ff      	movs	r3, #255	; 0xff
    6d70:	4642      	mov	r2, r8
    6d72:	4213      	tst	r3, r2
    6d74:	d005      	beq.n	6d82 <trx_frame_read+0x10e>
    6d76:	2201      	movs	r2, #1
    6d78:	4b05      	ldr	r3, [pc, #20]	; (6d90 <trx_frame_read+0x11c>)
    6d7a:	701a      	strb	r2, [r3, #0]
    6d7c:	f3bf 8f5f 	dmb	sy
    6d80:	b662      	cpsie	i
    6d82:	b002      	add	sp, #8
    6d84:	bc1c      	pop	{r2, r3, r4}
    6d86:	4690      	mov	r8, r2
    6d88:	4699      	mov	r9, r3
    6d8a:	46a2      	mov	sl, r4
    6d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d8e:	46c0      	nop			; (mov r8, r8)
    6d90:	2000000c 	.word	0x2000000c
    6d94:	20000c64 	.word	0x20000c64
    6d98:	20000c28 	.word	0x20000c28
    6d9c:	00004629 	.word	0x00004629
    6da0:	20000c20 	.word	0x20000c20

00006da4 <tc_isr>:
}

// [callback_funcs]
void tc_isr(struct tc_module *const module_inst)
{	
	clock_count_timer++;
    6da4:	4b05      	ldr	r3, [pc, #20]	; (6dbc <tc_isr+0x18>)
    6da6:	681a      	ldr	r2, [r3, #0]
    6da8:	3201      	adds	r2, #1
    6daa:	601a      	str	r2, [r3, #0]
	
	// 2ms x 50 = 100ms
	if(clock_count_timer>=50)
    6dac:	681b      	ldr	r3, [r3, #0]
    6dae:	2b31      	cmp	r3, #49	; 0x31
    6db0:	d902      	bls.n	6db8 <tc_isr+0x14>
	{
		clock_count_timer=0;
    6db2:	2200      	movs	r2, #0
    6db4:	4b01      	ldr	r3, [pc, #4]	; (6dbc <tc_isr+0x18>)
    6db6:	601a      	str	r2, [r3, #0]
	}
}
    6db8:	4770      	bx	lr
    6dba:	46c0      	nop			; (mov r8, r8)
    6dbc:	200003b0 	.word	0x200003b0

00006dc0 <socket_cb>:

static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    6dc0:	b570      	push	{r4, r5, r6, lr}
    6dc2:	0014      	movs	r4, r2
//	static unsigned int i=0;
	
	switch(u8Msg) 
    6dc4:	2906      	cmp	r1, #6
    6dc6:	d867      	bhi.n	6e98 <socket_cb+0xd8>
    6dc8:	0089      	lsls	r1, r1, #2
    6dca:	4b40      	ldr	r3, [pc, #256]	; (6ecc <socket_cb+0x10c>)
    6dcc:	585b      	ldr	r3, [r3, r1]
    6dce:	469f      	mov	pc, r3
	{	/* Socket BIND*/
		case SOCKET_MSG_BIND:
		{
			tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
			
			if(pstrBind && pstrBind->status == 0) 
    6dd0:	2a00      	cmp	r2, #0
    6dd2:	d003      	beq.n	6ddc <socket_cb+0x1c>
    6dd4:	2300      	movs	r3, #0
    6dd6:	56d3      	ldrsb	r3, [r2, r3]
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d00a      	beq.n	6df2 <socket_cb+0x32>
				printf("socket_cb: bind success!\r\n");
				listen(tcp_server_socket, 0);				
			} 
			else 
			{
				printf("socket_cb: bind error!\r\n");
    6ddc:	483c      	ldr	r0, [pc, #240]	; (6ed0 <socket_cb+0x110>)
    6dde:	4b3d      	ldr	r3, [pc, #244]	; (6ed4 <socket_cb+0x114>)
    6de0:	4798      	blx	r3
				close(tcp_server_socket);
    6de2:	4c3d      	ldr	r4, [pc, #244]	; (6ed8 <socket_cb+0x118>)
    6de4:	2000      	movs	r0, #0
    6de6:	5620      	ldrsb	r0, [r4, r0]
    6de8:	4b3c      	ldr	r3, [pc, #240]	; (6edc <socket_cb+0x11c>)
    6dea:	4798      	blx	r3
				tcp_server_socket = -1;
    6dec:	23ff      	movs	r3, #255	; 0xff
    6dee:	7023      	strb	r3, [r4, #0]
    6df0:	e052      	b.n	6e98 <socket_cb+0xd8>
				printf("socket_cb: bind success!\r\n");
    6df2:	483b      	ldr	r0, [pc, #236]	; (6ee0 <socket_cb+0x120>)
    6df4:	4b37      	ldr	r3, [pc, #220]	; (6ed4 <socket_cb+0x114>)
    6df6:	4798      	blx	r3
				listen(tcp_server_socket, 0);				
    6df8:	4b37      	ldr	r3, [pc, #220]	; (6ed8 <socket_cb+0x118>)
    6dfa:	2000      	movs	r0, #0
    6dfc:	5618      	ldrsb	r0, [r3, r0]
    6dfe:	2100      	movs	r1, #0
    6e00:	4b38      	ldr	r3, [pc, #224]	; (6ee4 <socket_cb+0x124>)
    6e02:	4798      	blx	r3
    6e04:	e048      	b.n	6e98 <socket_cb+0xd8>
		/* Socket listen */
		case SOCKET_MSG_LISTEN:
		{
			tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
			
			if(pstrListen && pstrListen->status == 0) 
    6e06:	2a00      	cmp	r2, #0
    6e08:	d003      	beq.n	6e12 <socket_cb+0x52>
    6e0a:	2300      	movs	r3, #0
    6e0c:	56d3      	ldrsb	r3, [r2, r3]
    6e0e:	2b00      	cmp	r3, #0
    6e10:	d00a      	beq.n	6e28 <socket_cb+0x68>
				printf("socket_cb: listen success!\r\n");
				accept(tcp_server_socket, NULL, NULL);
			} 
			else 
			{
				printf("socket_cb: listen error!\r\n");
    6e12:	4835      	ldr	r0, [pc, #212]	; (6ee8 <socket_cb+0x128>)
    6e14:	4b2f      	ldr	r3, [pc, #188]	; (6ed4 <socket_cb+0x114>)
    6e16:	4798      	blx	r3
				
				close(tcp_server_socket);
    6e18:	4c2f      	ldr	r4, [pc, #188]	; (6ed8 <socket_cb+0x118>)
    6e1a:	2000      	movs	r0, #0
    6e1c:	5620      	ldrsb	r0, [r4, r0]
    6e1e:	4b2f      	ldr	r3, [pc, #188]	; (6edc <socket_cb+0x11c>)
    6e20:	4798      	blx	r3
				tcp_server_socket = -1;
    6e22:	23ff      	movs	r3, #255	; 0xff
    6e24:	7023      	strb	r3, [r4, #0]
    6e26:	e037      	b.n	6e98 <socket_cb+0xd8>
				printf("socket_cb: listen success!\r\n");
    6e28:	4830      	ldr	r0, [pc, #192]	; (6eec <socket_cb+0x12c>)
    6e2a:	4b2a      	ldr	r3, [pc, #168]	; (6ed4 <socket_cb+0x114>)
    6e2c:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    6e2e:	4b2a      	ldr	r3, [pc, #168]	; (6ed8 <socket_cb+0x118>)
    6e30:	2000      	movs	r0, #0
    6e32:	5618      	ldrsb	r0, [r3, r0]
    6e34:	2200      	movs	r2, #0
    6e36:	2100      	movs	r1, #0
    6e38:	4b2d      	ldr	r3, [pc, #180]	; (6ef0 <socket_cb+0x130>)
    6e3a:	4798      	blx	r3
    6e3c:	e02c      	b.n	6e98 <socket_cb+0xd8>
		/* Connect accept */
		case SOCKET_MSG_ACCEPT:
		{				
			tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
			
			if(pstrAccept) 
    6e3e:	2a00      	cmp	r2, #0
    6e40:	d010      	beq.n	6e64 <socket_cb+0xa4>
			{
				//printf("socket_cb: accept success!\r\n");
				accept(tcp_server_socket, NULL, NULL);
    6e42:	4b25      	ldr	r3, [pc, #148]	; (6ed8 <socket_cb+0x118>)
    6e44:	2000      	movs	r0, #0
    6e46:	5618      	ldrsb	r0, [r3, r0]
    6e48:	2200      	movs	r2, #0
    6e4a:	2100      	movs	r1, #0
    6e4c:	4b28      	ldr	r3, [pc, #160]	; (6ef0 <socket_cb+0x130>)
    6e4e:	4798      	blx	r3
				tcp_client_socket = pstrAccept->sock;
    6e50:	2000      	movs	r0, #0
    6e52:	5620      	ldrsb	r0, [r4, r0]
    6e54:	4b27      	ldr	r3, [pc, #156]	; (6ef4 <socket_cb+0x134>)
    6e56:	7018      	strb	r0, [r3, #0]
				recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);		
    6e58:	2300      	movs	r3, #0
    6e5a:	4a27      	ldr	r2, [pc, #156]	; (6ef8 <socket_cb+0x138>)
    6e5c:	4927      	ldr	r1, [pc, #156]	; (6efc <socket_cb+0x13c>)
    6e5e:	4d28      	ldr	r5, [pc, #160]	; (6f00 <socket_cb+0x140>)
    6e60:	47a8      	blx	r5
    6e62:	e016      	b.n	6e92 <socket_cb+0xd2>
			} 
			else 
			{
				printf("socket_cb: accept error!\r\n");				
    6e64:	4827      	ldr	r0, [pc, #156]	; (6f04 <socket_cb+0x144>)
    6e66:	4b1b      	ldr	r3, [pc, #108]	; (6ed4 <socket_cb+0x114>)
    6e68:	4798      	blx	r3
				close(tcp_server_socket);
    6e6a:	4c1b      	ldr	r4, [pc, #108]	; (6ed8 <socket_cb+0x118>)
    6e6c:	2000      	movs	r0, #0
    6e6e:	5620      	ldrsb	r0, [r4, r0]
    6e70:	4b1a      	ldr	r3, [pc, #104]	; (6edc <socket_cb+0x11c>)
    6e72:	4798      	blx	r3
				tcp_server_socket = -1;				
    6e74:	23ff      	movs	r3, #255	; 0xff
    6e76:	7023      	strb	r3, [r4, #0]
			{
//				printf("socket_cb: connect success!\r\n");
			} 
			else 
			{
				printf("socket_cb: connect error!\r\n");
    6e78:	4823      	ldr	r0, [pc, #140]	; (6f08 <socket_cb+0x148>)
    6e7a:	4b16      	ldr	r3, [pc, #88]	; (6ed4 <socket_cb+0x114>)
    6e7c:	4798      	blx	r3
				close(tcp_client_socket);
    6e7e:	4c1d      	ldr	r4, [pc, #116]	; (6ef4 <socket_cb+0x134>)
    6e80:	2000      	movs	r0, #0
    6e82:	5620      	ldrsb	r0, [r4, r0]
    6e84:	4b15      	ldr	r3, [pc, #84]	; (6edc <socket_cb+0x11c>)
    6e86:	4798      	blx	r3
				tcp_client_socket = -1;
    6e88:	23ff      	movs	r3, #255	; 0xff
    6e8a:	7023      	strb	r3, [r4, #0]
    6e8c:	e004      	b.n	6e98 <socket_cb+0xd8>
			if(pstrConnect && pstrConnect->s8Error >= 0) 
    6e8e:	2a00      	cmp	r2, #0
    6e90:	d0f2      	beq.n	6e78 <socket_cb+0xb8>
    6e92:	7863      	ldrb	r3, [r4, #1]
    6e94:	2b7f      	cmp	r3, #127	; 0x7f
    6e96:	d8ef      	bhi.n	6e78 <socket_cb+0xb8>
		}
		break;
			
		default:break;	
	}	
}
    6e98:	bd70      	pop	{r4, r5, r6, pc}
			if(pstrRecv && pstrRecv->s16BufferSize > 0)
    6e9a:	2a00      	cmp	r2, #0
    6e9c:	d003      	beq.n	6ea6 <socket_cb+0xe6>
    6e9e:	2204      	movs	r2, #4
    6ea0:	5ea3      	ldrsh	r3, [r4, r2]
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	dc0a      	bgt.n	6ebc <socket_cb+0xfc>
				printf("socket_cb: recv error!\r\n");
    6ea6:	4819      	ldr	r0, [pc, #100]	; (6f0c <socket_cb+0x14c>)
    6ea8:	4b0a      	ldr	r3, [pc, #40]	; (6ed4 <socket_cb+0x114>)
    6eaa:	4798      	blx	r3
				close(tcp_client_socket);
    6eac:	4c11      	ldr	r4, [pc, #68]	; (6ef4 <socket_cb+0x134>)
    6eae:	2000      	movs	r0, #0
    6eb0:	5620      	ldrsb	r0, [r4, r0]
    6eb2:	4b0a      	ldr	r3, [pc, #40]	; (6edc <socket_cb+0x11c>)
    6eb4:	4798      	blx	r3
				tcp_client_socket = -1;
    6eb6:	23ff      	movs	r3, #255	; 0xff
    6eb8:	7023      	strb	r3, [r4, #0]
}
    6eba:	e7ed      	b.n	6e98 <socket_cb+0xd8>
				close(tcp_client_socket);
    6ebc:	4c0d      	ldr	r4, [pc, #52]	; (6ef4 <socket_cb+0x134>)
    6ebe:	2000      	movs	r0, #0
    6ec0:	5620      	ldrsb	r0, [r4, r0]
    6ec2:	4b06      	ldr	r3, [pc, #24]	; (6edc <socket_cb+0x11c>)
    6ec4:	4798      	blx	r3
				tcp_client_socket = -1;
    6ec6:	23ff      	movs	r3, #255	; 0xff
    6ec8:	7023      	strb	r3, [r4, #0]
    6eca:	e7e5      	b.n	6e98 <socket_cb+0xd8>
    6ecc:	000097c8 	.word	0x000097c8
    6ed0:	0000985c 	.word	0x0000985c
    6ed4:	00007749 	.word	0x00007749
    6ed8:	2000000e 	.word	0x2000000e
    6edc:	00003049 	.word	0x00003049
    6ee0:	00009840 	.word	0x00009840
    6ee4:	00002f39 	.word	0x00002f39
    6ee8:	00009890 	.word	0x00009890
    6eec:	00009874 	.word	0x00009874
    6ef0:	00002f91 	.word	0x00002f91
    6ef4:	2000000d 	.word	0x2000000d
    6ef8:	000005b4 	.word	0x000005b4
    6efc:	200003b4 	.word	0x200003b4
    6f00:	00002fb5 	.word	0x00002fb5
    6f04:	000098ac 	.word	0x000098ac
    6f08:	000098c8 	.word	0x000098c8
    6f0c:	000098e4 	.word	0x000098e4

00006f10 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    6f10:	b510      	push	{r4, lr}
    6f12:	b082      	sub	sp, #8
	switch(u8MsgType) 
    6f14:	282c      	cmp	r0, #44	; 0x2c
    6f16:	d003      	beq.n	6f20 <wifi_cb+0x10>
    6f18:	2832      	cmp	r0, #50	; 0x32
    6f1a:	d01b      	beq.n	6f54 <wifi_cb+0x44>
			break;
		}

		default:break;
	}
}
    6f1c:	b002      	add	sp, #8
    6f1e:	bd10      	pop	{r4, pc}
			if(pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) 
    6f20:	780b      	ldrb	r3, [r1, #0]
    6f22:	2b01      	cmp	r3, #1
    6f24:	d010      	beq.n	6f48 <wifi_cb+0x38>
			else if(pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) 
    6f26:	2b00      	cmp	r3, #0
    6f28:	d1f8      	bne.n	6f1c <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    6f2a:	4811      	ldr	r0, [pc, #68]	; (6f70 <wifi_cb+0x60>)
    6f2c:	4b11      	ldr	r3, [pc, #68]	; (6f74 <wifi_cb+0x64>)
    6f2e:	4798      	blx	r3
				wifi_connected = 0;
    6f30:	2200      	movs	r2, #0
    6f32:	4b11      	ldr	r3, [pc, #68]	; (6f78 <wifi_cb+0x68>)
    6f34:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), 
    6f36:	23ff      	movs	r3, #255	; 0xff
    6f38:	9300      	str	r3, [sp, #0]
    6f3a:	4b10      	ldr	r3, [pc, #64]	; (6f7c <wifi_cb+0x6c>)
    6f3c:	3202      	adds	r2, #2
    6f3e:	210e      	movs	r1, #14
    6f40:	480f      	ldr	r0, [pc, #60]	; (6f80 <wifi_cb+0x70>)
    6f42:	4c10      	ldr	r4, [pc, #64]	; (6f84 <wifi_cb+0x74>)
    6f44:	47a0      	blx	r4
    6f46:	e7e9      	b.n	6f1c <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    6f48:	480f      	ldr	r0, [pc, #60]	; (6f88 <wifi_cb+0x78>)
    6f4a:	4b0a      	ldr	r3, [pc, #40]	; (6f74 <wifi_cb+0x64>)
    6f4c:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    6f4e:	4b0f      	ldr	r3, [pc, #60]	; (6f8c <wifi_cb+0x7c>)
    6f50:	4798      	blx	r3
    6f52:	e7e3      	b.n	6f1c <wifi_cb+0xc>
			wifi_connected = 1;
    6f54:	2201      	movs	r2, #1
    6f56:	4b08      	ldr	r3, [pc, #32]	; (6f78 <wifi_cb+0x68>)
    6f58:	701a      	strb	r2, [r3, #0]
			printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    6f5a:	788b      	ldrb	r3, [r1, #2]
    6f5c:	784a      	ldrb	r2, [r1, #1]
    6f5e:	7808      	ldrb	r0, [r1, #0]
    6f60:	78c9      	ldrb	r1, [r1, #3]
    6f62:	9100      	str	r1, [sp, #0]
    6f64:	0001      	movs	r1, r0
    6f66:	480a      	ldr	r0, [pc, #40]	; (6f90 <wifi_cb+0x80>)
    6f68:	4c0a      	ldr	r4, [pc, #40]	; (6f94 <wifi_cb+0x84>)
    6f6a:	47a0      	blx	r4
}
    6f6c:	e7d6      	b.n	6f1c <wifi_cb+0xc>
    6f6e:	46c0      	nop			; (mov r8, r8)
    6f70:	00009938 	.word	0x00009938
    6f74:	00007749 	.word	0x00007749
    6f78:	20000968 	.word	0x20000968
    6f7c:	00009970 	.word	0x00009970
    6f80:	0000997c 	.word	0x0000997c
    6f84:	00001479 	.word	0x00001479
    6f88:	00009900 	.word	0x00009900
    6f8c:	00001495 	.word	0x00001495
    6f90:	0000998c 	.word	0x0000998c
    6f94:	0000762d 	.word	0x0000762d

00006f98 <main>:
{				
    6f98:	b570      	push	{r4, r5, r6, lr}
    6f9a:	b08c      	sub	sp, #48	; 0x30
	system_init();	// MCU 설정및 초기화 부분	
    6f9c:	4b4d      	ldr	r3, [pc, #308]	; (70d4 <main+0x13c>)
    6f9e:	4798      	blx	r3
//! [setup]
//=======================================================================================//

void init_port(void)
{
	PORT->Group[0].DIRSET.bit.DIRSET=PORT_PA27;	// RS3485 ENABLE PIN CONTROL PORT	
    6fa0:	4b4d      	ldr	r3, [pc, #308]	; (70d8 <main+0x140>)
    6fa2:	2280      	movs	r2, #128	; 0x80
    6fa4:	0512      	lsls	r2, r2, #20
    6fa6:	609a      	str	r2, [r3, #8]
	PORT->Group[0].OUTSET.bit.OUTSET=PORT_PA27;
    6fa8:	619a      	str	r2, [r3, #24]
	modules_init();		// UART 설정및 초기화
    6faa:	4b4c      	ldr	r3, [pc, #304]	; (70dc <main+0x144>)
    6fac:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    6fae:	4a4c      	ldr	r2, [pc, #304]	; (70e0 <main+0x148>)
    6fb0:	2300      	movs	r3, #0
    6fb2:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    6fb4:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    6fb6:	2100      	movs	r1, #0
    6fb8:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    6fba:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    6fbc:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    6fbe:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    6fc0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    6fc2:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    6fc4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    6fc6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    6fc8:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    6fca:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    6fcc:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    6fce:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    6fd0:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    6fd2:	3340      	adds	r3, #64	; 0x40
    6fd4:	7193      	strb	r3, [r2, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 0xFFFF;
    6fd6:	3b41      	subs	r3, #65	; 0x41
    6fd8:	8553      	strh	r3, [r2, #42]	; 0x2a
	config_tc.pwm_channel[0].enabled = true;
    6fda:	3302      	adds	r3, #2
    6fdc:	7413      	strb	r3, [r2, #16]
	config_tc.pwm_channel[0].pin_out = PWM_OUT_PIN;
    6fde:	3311      	adds	r3, #17
    6fe0:	6153      	str	r3, [r2, #20]
	config_tc.pwm_channel[0].pin_mux = PWM_OUT_MUX;
    6fe2:	3b0e      	subs	r3, #14
    6fe4:	6193      	str	r3, [r2, #24]
	tc_init(&tc_instance, PWM_MODULE, &config_tc);
    6fe6:	4c3f      	ldr	r4, [pc, #252]	; (70e4 <main+0x14c>)
    6fe8:	493f      	ldr	r1, [pc, #252]	; (70e8 <main+0x150>)
    6fea:	0020      	movs	r0, r4
    6fec:	4b3f      	ldr	r3, [pc, #252]	; (70ec <main+0x154>)
    6fee:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6ff0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    6ff2:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    6ff4:	b25b      	sxtb	r3, r3
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	dbfb      	blt.n	6ff2 <main+0x5a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    6ffa:	8813      	ldrh	r3, [r2, #0]
    6ffc:	2102      	movs	r1, #2
    6ffe:	430b      	orrs	r3, r1
    7000:	8013      	strh	r3, [r2, #0]
	tc_register_callback(&tc_instance,tc_isr,TC_CALLBACK_CC_CHANNEL0);
    7002:	4c38      	ldr	r4, [pc, #224]	; (70e4 <main+0x14c>)
    7004:	2202      	movs	r2, #2
    7006:	493a      	ldr	r1, [pc, #232]	; (70f0 <main+0x158>)
    7008:	0020      	movs	r0, r4
    700a:	4b3a      	ldr	r3, [pc, #232]	; (70f4 <main+0x15c>)
    700c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    700e:	6820      	ldr	r0, [r4, #0]
    7010:	4b39      	ldr	r3, [pc, #228]	; (70f8 <main+0x160>)
    7012:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    7014:	4b39      	ldr	r3, [pc, #228]	; (70fc <main+0x164>)
    7016:	5c1b      	ldrb	r3, [r3, r0]
    7018:	221f      	movs	r2, #31
    701a:	401a      	ands	r2, r3
    701c:	2301      	movs	r3, #1
    701e:	4093      	lsls	r3, r2
    7020:	4a37      	ldr	r2, [pc, #220]	; (7100 <main+0x168>)
    7022:	6013      	str	r3, [r2, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    7024:	7e63      	ldrb	r3, [r4, #25]
    7026:	2210      	movs	r2, #16
    7028:	4313      	orrs	r3, r2
    702a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    702c:	6823      	ldr	r3, [r4, #0]
    702e:	2210      	movs	r2, #16
    7030:	735a      	strb	r2, [r3, #13]
	wireless_init();
    7032:	4b34      	ldr	r3, [pc, #208]	; (7104 <main+0x16c>)
    7034:	4798      	blx	r3
	nm_bsp_init();		// WINC1500 핀 설정 및 초기화
    7036:	4b34      	ldr	r3, [pc, #208]	; (7108 <main+0x170>)
    7038:	4798      	blx	r3
	addr.sin_family = AF_INET;
    703a:	ab02      	add	r3, sp, #8
    703c:	2202      	movs	r2, #2
    703e:	801a      	strh	r2, [r3, #0]
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
    7040:	4a32      	ldr	r2, [pc, #200]	; (710c <main+0x174>)
    7042:	805a      	strh	r2, [r3, #2]
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));	// param 초기화
    7044:	2218      	movs	r2, #24
    7046:	2100      	movs	r1, #0
    7048:	a806      	add	r0, sp, #24
    704a:	4b31      	ldr	r3, [pc, #196]	; (7110 <main+0x178>)
    704c:	4798      	blx	r3
	param.pfAppWifiCb = wifi_cb;
    704e:	4b31      	ldr	r3, [pc, #196]	; (7114 <main+0x17c>)
    7050:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
    7052:	a806      	add	r0, sp, #24
    7054:	4b30      	ldr	r3, [pc, #192]	; (7118 <main+0x180>)
    7056:	4798      	blx	r3
    7058:	1e01      	subs	r1, r0, #0
	if(M2M_SUCCESS != ret)
    705a:	d003      	beq.n	7064 <main+0xcc>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    705c:	482f      	ldr	r0, [pc, #188]	; (711c <main+0x184>)
    705e:	4b30      	ldr	r3, [pc, #192]	; (7120 <main+0x188>)
    7060:	4798      	blx	r3
    7062:	e7fe      	b.n	7062 <main+0xca>
	socketInit();
    7064:	4b2f      	ldr	r3, [pc, #188]	; (7124 <main+0x18c>)
    7066:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
    7068:	2100      	movs	r1, #0
    706a:	482f      	ldr	r0, [pc, #188]	; (7128 <main+0x190>)
    706c:	4b2f      	ldr	r3, [pc, #188]	; (712c <main+0x194>)
    706e:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID,sizeof(MAIN_WLAN_SSID),
    7070:	23ff      	movs	r3, #255	; 0xff
    7072:	9300      	str	r3, [sp, #0]
    7074:	4b2e      	ldr	r3, [pc, #184]	; (7130 <main+0x198>)
    7076:	2202      	movs	r2, #2
    7078:	210e      	movs	r1, #14
    707a:	482e      	ldr	r0, [pc, #184]	; (7134 <main+0x19c>)
    707c:	4c2e      	ldr	r4, [pc, #184]	; (7138 <main+0x1a0>)
    707e:	47a0      	blx	r4
	cpu_irq_enable();
    7080:	2201      	movs	r2, #1
    7082:	4b2e      	ldr	r3, [pc, #184]	; (713c <main+0x1a4>)
    7084:	701a      	strb	r2, [r3, #0]
    7086:	f3bf 8f5f 	dmb	sy
    708a:	b662      	cpsie	i
		m2m_wifi_handle_events(NULL);
    708c:	4d2c      	ldr	r5, [pc, #176]	; (7140 <main+0x1a8>)
		if(wifi_connected == M2M_WIFI_CONNECTED) 
    708e:	4c2d      	ldr	r4, [pc, #180]	; (7144 <main+0x1ac>)
 *  this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    7090:	4e2d      	ldr	r6, [pc, #180]	; (7148 <main+0x1b0>)
    7092:	e008      	b.n	70a6 <main+0x10e>
					printf("main: failed to create TCP server socket error!\r\n");
    7094:	482d      	ldr	r0, [pc, #180]	; (714c <main+0x1b4>)
    7096:	4b2e      	ldr	r3, [pc, #184]	; (7150 <main+0x1b8>)
    7098:	4798      	blx	r3
					continue;
    709a:	e004      	b.n	70a6 <main+0x10e>
	pal_task();
    709c:	47b0      	blx	r6
	tal_task();
    709e:	4b2d      	ldr	r3, [pc, #180]	; (7154 <main+0x1bc>)
    70a0:	4798      	blx	r3
 * \brief Application task
 */
 void app_task(void)
{
//	usr_wireless_app_task();
	init_data_reception();
    70a2:	4b2d      	ldr	r3, [pc, #180]	; (7158 <main+0x1c0>)
    70a4:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
    70a6:	2000      	movs	r0, #0
    70a8:	47a8      	blx	r5
		if(wifi_connected == M2M_WIFI_CONNECTED) 
    70aa:	7823      	ldrb	r3, [r4, #0]
    70ac:	2b01      	cmp	r3, #1
    70ae:	d1f5      	bne.n	709c <main+0x104>
			if(tcp_server_socket < 0) 
    70b0:	4b2a      	ldr	r3, [pc, #168]	; (715c <main+0x1c4>)
    70b2:	781b      	ldrb	r3, [r3, #0]
    70b4:	2b7f      	cmp	r3, #127	; 0x7f
    70b6:	d9f1      	bls.n	709c <main+0x104>
				if((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
    70b8:	2200      	movs	r2, #0
    70ba:	2101      	movs	r1, #1
    70bc:	2002      	movs	r0, #2
    70be:	4b28      	ldr	r3, [pc, #160]	; (7160 <main+0x1c8>)
    70c0:	4798      	blx	r3
    70c2:	4b26      	ldr	r3, [pc, #152]	; (715c <main+0x1c4>)
    70c4:	7018      	strb	r0, [r3, #0]
    70c6:	2800      	cmp	r0, #0
    70c8:	dbe4      	blt.n	7094 <main+0xfc>
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
    70ca:	2210      	movs	r2, #16
    70cc:	a902      	add	r1, sp, #8
    70ce:	4b25      	ldr	r3, [pc, #148]	; (7164 <main+0x1cc>)
    70d0:	4798      	blx	r3
    70d2:	e7e3      	b.n	709c <main+0x104>
    70d4:	00005049 	.word	0x00005049
    70d8:	41004400 	.word	0x41004400
    70dc:	00003d05 	.word	0x00003d05
    70e0:	20000ca4 	.word	0x20000ca4
    70e4:	20000cdc 	.word	0x20000cdc
    70e8:	42002c00 	.word	0x42002c00
    70ec:	0000516d 	.word	0x0000516d
    70f0:	00006da5 	.word	0x00006da5
    70f4:	0000506d 	.word	0x0000506d
    70f8:	00005135 	.word	0x00005135
    70fc:	000098fc 	.word	0x000098fc
    7100:	e000e100 	.word	0xe000e100
    7104:	00003c19 	.word	0x00003c19
    7108:	00000169 	.word	0x00000169
    710c:	ffffb80b 	.word	0xffffb80b
    7110:	0000761b 	.word	0x0000761b
    7114:	00006f11 	.word	0x00006f11
    7118:	000010a5 	.word	0x000010a5
    711c:	000097e4 	.word	0x000097e4
    7120:	0000762d 	.word	0x0000762d
    7124:	00002cd5 	.word	0x00002cd5
    7128:	00006dc1 	.word	0x00006dc1
    712c:	00002d19 	.word	0x00002d19
    7130:	00009970 	.word	0x00009970
    7134:	0000997c 	.word	0x0000997c
    7138:	00001479 	.word	0x00001479
    713c:	2000000c 	.word	0x2000000c
    7140:	000011d9 	.word	0x000011d9
    7144:	20000968 	.word	0x20000968
    7148:	00005765 	.word	0x00005765
    714c:	0000980c 	.word	0x0000980c
    7150:	00007749 	.word	0x00007749
    7154:	00005db5 	.word	0x00005db5
    7158:	00003c7d 	.word	0x00003c7d
    715c:	2000000e 	.word	0x2000000e
    7160:	00002d2d 	.word	0x00002d2d
    7164:	00002eb1 	.word	0x00002eb1

00007168 <tal_tx_frame_done_cb>:
 * \brief This method (callback) is called when a frame has been transmitted by the transceiver
 * \param status  Status of frame transmission i.e MAC_SUCCESS,MAC_NO_ACK,CHANNEL_ACCESS_FAILURE etc
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
    7168:	b510      	push	{r4, lr}
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    716a:	4b01      	ldr	r3, [pc, #4]	; (7170 <tal_tx_frame_done_cb+0x8>)
    716c:	4798      	blx	r3
}
    716e:	bd10      	pop	{r4, pc}
    7170:	00003c15 	.word	0x00003c15

00007174 <tal_rx_frame_cb>:
/*
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    7174:	b510      	push	{r4, lr}
    7176:	0004      	movs	r4, r0
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    7178:	4b07      	ldr	r3, [pc, #28]	; (7198 <tal_rx_frame_cb+0x24>)
    717a:	4798      	blx	r3
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    717c:	7860      	ldrb	r0, [r4, #1]
    717e:	78a3      	ldrb	r3, [r4, #2]
    7180:	021b      	lsls	r3, r3, #8
    7182:	4303      	orrs	r3, r0
    7184:	78e0      	ldrb	r0, [r4, #3]
    7186:	0400      	lsls	r0, r0, #16
    7188:	4303      	orrs	r3, r0
    718a:	7920      	ldrb	r0, [r4, #4]
    718c:	0600      	lsls	r0, r0, #24
    718e:	4318      	orrs	r0, r3
    7190:	4b02      	ldr	r3, [pc, #8]	; (719c <tal_rx_frame_cb+0x28>)
    7192:	4798      	blx	r3
    7194:	bd10      	pop	{r4, pc}
    7196:	46c0      	nop			; (mov r8, r8)
    7198:	00003bed 	.word	0x00003bed
    719c:	000057f5 	.word	0x000057f5

000071a0 <common_tc_read_count>:
    71a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71a2:	4b0d      	ldr	r3, [pc, #52]	; (71d8 <common_tc_read_count+0x38>)
    71a4:	4798      	blx	r3
    71a6:	4b0d      	ldr	r3, [pc, #52]	; (71dc <common_tc_read_count+0x3c>)
    71a8:	781b      	ldrb	r3, [r3, #0]
    71aa:	2b00      	cmp	r3, #0
    71ac:	d00e      	beq.n	71cc <common_tc_read_count+0x2c>
    71ae:	4b0c      	ldr	r3, [pc, #48]	; (71e0 <common_tc_read_count+0x40>)
    71b0:	781d      	ldrb	r5, [r3, #0]
    71b2:	4b0a      	ldr	r3, [pc, #40]	; (71dc <common_tc_read_count+0x3c>)
    71b4:	781f      	ldrb	r7, [r3, #0]
    71b6:	4c0b      	ldr	r4, [pc, #44]	; (71e4 <common_tc_read_count+0x44>)
    71b8:	1c29      	adds	r1, r5, #0
    71ba:	47a0      	blx	r4
    71bc:	1c06      	adds	r6, r0, #0
    71be:	480a      	ldr	r0, [pc, #40]	; (71e8 <common_tc_read_count+0x48>)
    71c0:	1c29      	adds	r1, r5, #0
    71c2:	47a0      	blx	r4
    71c4:	4378      	muls	r0, r7
    71c6:	1830      	adds	r0, r6, r0
    71c8:	b280      	uxth	r0, r0
    71ca:	e004      	b.n	71d6 <common_tc_read_count+0x36>
    71cc:	4b04      	ldr	r3, [pc, #16]	; (71e0 <common_tc_read_count+0x40>)
    71ce:	7819      	ldrb	r1, [r3, #0]
    71d0:	4b04      	ldr	r3, [pc, #16]	; (71e4 <common_tc_read_count+0x44>)
    71d2:	4798      	blx	r3
    71d4:	b280      	uxth	r0, r0
    71d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71d8:	00006825 	.word	0x00006825
    71dc:	2000096c 	.word	0x2000096c
    71e0:	20000cf8 	.word	0x20000cf8
    71e4:	00007395 	.word	0x00007395
    71e8:	0000ffff 	.word	0x0000ffff

000071ec <common_tc_compare_stop>:
    71ec:	b508      	push	{r3, lr}
    71ee:	4b05      	ldr	r3, [pc, #20]	; (7204 <common_tc_compare_stop+0x18>)
    71f0:	4798      	blx	r3
    71f2:	4b05      	ldr	r3, [pc, #20]	; (7208 <common_tc_compare_stop+0x1c>)
    71f4:	4798      	blx	r3
    71f6:	4b05      	ldr	r3, [pc, #20]	; (720c <common_tc_compare_stop+0x20>)
    71f8:	2200      	movs	r2, #0
    71fa:	605a      	str	r2, [r3, #4]
    71fc:	811a      	strh	r2, [r3, #8]
    71fe:	4b04      	ldr	r3, [pc, #16]	; (7210 <common_tc_compare_stop+0x24>)
    7200:	4798      	blx	r3
    7202:	bd08      	pop	{r3, pc}
    7204:	00006839 	.word	0x00006839
    7208:	000068a1 	.word	0x000068a1
    720c:	2000096c 	.word	0x2000096c
    7210:	000068c5 	.word	0x000068c5

00007214 <common_tc_delay>:
    7214:	b510      	push	{r4, lr}
    7216:	1c04      	adds	r4, r0, #0
    7218:	4b13      	ldr	r3, [pc, #76]	; (7268 <common_tc_delay+0x54>)
    721a:	4798      	blx	r3
    721c:	4b13      	ldr	r3, [pc, #76]	; (726c <common_tc_delay+0x58>)
    721e:	781a      	ldrb	r2, [r3, #0]
    7220:	4362      	muls	r2, r4
    7222:	1881      	adds	r1, r0, r2
    7224:	4b12      	ldr	r3, [pc, #72]	; (7270 <common_tc_delay+0x5c>)
    7226:	6059      	str	r1, [r3, #4]
    7228:	6859      	ldr	r1, [r3, #4]
    722a:	0c09      	lsrs	r1, r1, #16
    722c:	6059      	str	r1, [r3, #4]
    722e:	685b      	ldr	r3, [r3, #4]
    7230:	2b00      	cmp	r3, #0
    7232:	d007      	beq.n	7244 <common_tc_delay+0x30>
    7234:	4b0e      	ldr	r3, [pc, #56]	; (7270 <common_tc_delay+0x5c>)
    7236:	6859      	ldr	r1, [r3, #4]
    7238:	3201      	adds	r2, #1
    723a:	1880      	adds	r0, r0, r2
    723c:	8118      	strh	r0, [r3, #8]
    723e:	4b0d      	ldr	r3, [pc, #52]	; (7274 <common_tc_delay+0x60>)
    7240:	4798      	blx	r3
    7242:	e004      	b.n	724e <common_tc_delay+0x3a>
    7244:	1882      	adds	r2, r0, r2
    7246:	4b0a      	ldr	r3, [pc, #40]	; (7270 <common_tc_delay+0x5c>)
    7248:	811a      	strh	r2, [r3, #8]
    724a:	4b0b      	ldr	r3, [pc, #44]	; (7278 <common_tc_delay+0x64>)
    724c:	4798      	blx	r3
    724e:	4b08      	ldr	r3, [pc, #32]	; (7270 <common_tc_delay+0x5c>)
    7250:	891b      	ldrh	r3, [r3, #8]
    7252:	2b63      	cmp	r3, #99	; 0x63
    7254:	d802      	bhi.n	725c <common_tc_delay+0x48>
    7256:	3364      	adds	r3, #100	; 0x64
    7258:	4a05      	ldr	r2, [pc, #20]	; (7270 <common_tc_delay+0x5c>)
    725a:	8113      	strh	r3, [r2, #8]
    725c:	4b04      	ldr	r3, [pc, #16]	; (7270 <common_tc_delay+0x5c>)
    725e:	8918      	ldrh	r0, [r3, #8]
    7260:	4b06      	ldr	r3, [pc, #24]	; (727c <common_tc_delay+0x68>)
    7262:	4798      	blx	r3
    7264:	bd10      	pop	{r4, pc}
    7266:	46c0      	nop			; (mov r8, r8)
    7268:	00006825 	.word	0x00006825
    726c:	20000cf8 	.word	0x20000cf8
    7270:	2000096c 	.word	0x2000096c
    7274:	00006839 	.word	0x00006839
    7278:	0000684d 	.word	0x0000684d
    727c:	00006889 	.word	0x00006889

00007280 <__udivsi3>:
    7280:	2200      	movs	r2, #0
    7282:	0843      	lsrs	r3, r0, #1
    7284:	428b      	cmp	r3, r1
    7286:	d374      	bcc.n	7372 <__udivsi3+0xf2>
    7288:	0903      	lsrs	r3, r0, #4
    728a:	428b      	cmp	r3, r1
    728c:	d35f      	bcc.n	734e <__udivsi3+0xce>
    728e:	0a03      	lsrs	r3, r0, #8
    7290:	428b      	cmp	r3, r1
    7292:	d344      	bcc.n	731e <__udivsi3+0x9e>
    7294:	0b03      	lsrs	r3, r0, #12
    7296:	428b      	cmp	r3, r1
    7298:	d328      	bcc.n	72ec <__udivsi3+0x6c>
    729a:	0c03      	lsrs	r3, r0, #16
    729c:	428b      	cmp	r3, r1
    729e:	d30d      	bcc.n	72bc <__udivsi3+0x3c>
    72a0:	22ff      	movs	r2, #255	; 0xff
    72a2:	0209      	lsls	r1, r1, #8
    72a4:	ba12      	rev	r2, r2
    72a6:	0c03      	lsrs	r3, r0, #16
    72a8:	428b      	cmp	r3, r1
    72aa:	d302      	bcc.n	72b2 <__udivsi3+0x32>
    72ac:	1212      	asrs	r2, r2, #8
    72ae:	0209      	lsls	r1, r1, #8
    72b0:	d065      	beq.n	737e <__udivsi3+0xfe>
    72b2:	0b03      	lsrs	r3, r0, #12
    72b4:	428b      	cmp	r3, r1
    72b6:	d319      	bcc.n	72ec <__udivsi3+0x6c>
    72b8:	e000      	b.n	72bc <__udivsi3+0x3c>
    72ba:	0a09      	lsrs	r1, r1, #8
    72bc:	0bc3      	lsrs	r3, r0, #15
    72be:	428b      	cmp	r3, r1
    72c0:	d301      	bcc.n	72c6 <__udivsi3+0x46>
    72c2:	03cb      	lsls	r3, r1, #15
    72c4:	1ac0      	subs	r0, r0, r3
    72c6:	4152      	adcs	r2, r2
    72c8:	0b83      	lsrs	r3, r0, #14
    72ca:	428b      	cmp	r3, r1
    72cc:	d301      	bcc.n	72d2 <__udivsi3+0x52>
    72ce:	038b      	lsls	r3, r1, #14
    72d0:	1ac0      	subs	r0, r0, r3
    72d2:	4152      	adcs	r2, r2
    72d4:	0b43      	lsrs	r3, r0, #13
    72d6:	428b      	cmp	r3, r1
    72d8:	d301      	bcc.n	72de <__udivsi3+0x5e>
    72da:	034b      	lsls	r3, r1, #13
    72dc:	1ac0      	subs	r0, r0, r3
    72de:	4152      	adcs	r2, r2
    72e0:	0b03      	lsrs	r3, r0, #12
    72e2:	428b      	cmp	r3, r1
    72e4:	d301      	bcc.n	72ea <__udivsi3+0x6a>
    72e6:	030b      	lsls	r3, r1, #12
    72e8:	1ac0      	subs	r0, r0, r3
    72ea:	4152      	adcs	r2, r2
    72ec:	0ac3      	lsrs	r3, r0, #11
    72ee:	428b      	cmp	r3, r1
    72f0:	d301      	bcc.n	72f6 <__udivsi3+0x76>
    72f2:	02cb      	lsls	r3, r1, #11
    72f4:	1ac0      	subs	r0, r0, r3
    72f6:	4152      	adcs	r2, r2
    72f8:	0a83      	lsrs	r3, r0, #10
    72fa:	428b      	cmp	r3, r1
    72fc:	d301      	bcc.n	7302 <__udivsi3+0x82>
    72fe:	028b      	lsls	r3, r1, #10
    7300:	1ac0      	subs	r0, r0, r3
    7302:	4152      	adcs	r2, r2
    7304:	0a43      	lsrs	r3, r0, #9
    7306:	428b      	cmp	r3, r1
    7308:	d301      	bcc.n	730e <__udivsi3+0x8e>
    730a:	024b      	lsls	r3, r1, #9
    730c:	1ac0      	subs	r0, r0, r3
    730e:	4152      	adcs	r2, r2
    7310:	0a03      	lsrs	r3, r0, #8
    7312:	428b      	cmp	r3, r1
    7314:	d301      	bcc.n	731a <__udivsi3+0x9a>
    7316:	020b      	lsls	r3, r1, #8
    7318:	1ac0      	subs	r0, r0, r3
    731a:	4152      	adcs	r2, r2
    731c:	d2cd      	bcs.n	72ba <__udivsi3+0x3a>
    731e:	09c3      	lsrs	r3, r0, #7
    7320:	428b      	cmp	r3, r1
    7322:	d301      	bcc.n	7328 <__udivsi3+0xa8>
    7324:	01cb      	lsls	r3, r1, #7
    7326:	1ac0      	subs	r0, r0, r3
    7328:	4152      	adcs	r2, r2
    732a:	0983      	lsrs	r3, r0, #6
    732c:	428b      	cmp	r3, r1
    732e:	d301      	bcc.n	7334 <__udivsi3+0xb4>
    7330:	018b      	lsls	r3, r1, #6
    7332:	1ac0      	subs	r0, r0, r3
    7334:	4152      	adcs	r2, r2
    7336:	0943      	lsrs	r3, r0, #5
    7338:	428b      	cmp	r3, r1
    733a:	d301      	bcc.n	7340 <__udivsi3+0xc0>
    733c:	014b      	lsls	r3, r1, #5
    733e:	1ac0      	subs	r0, r0, r3
    7340:	4152      	adcs	r2, r2
    7342:	0903      	lsrs	r3, r0, #4
    7344:	428b      	cmp	r3, r1
    7346:	d301      	bcc.n	734c <__udivsi3+0xcc>
    7348:	010b      	lsls	r3, r1, #4
    734a:	1ac0      	subs	r0, r0, r3
    734c:	4152      	adcs	r2, r2
    734e:	08c3      	lsrs	r3, r0, #3
    7350:	428b      	cmp	r3, r1
    7352:	d301      	bcc.n	7358 <__udivsi3+0xd8>
    7354:	00cb      	lsls	r3, r1, #3
    7356:	1ac0      	subs	r0, r0, r3
    7358:	4152      	adcs	r2, r2
    735a:	0883      	lsrs	r3, r0, #2
    735c:	428b      	cmp	r3, r1
    735e:	d301      	bcc.n	7364 <__udivsi3+0xe4>
    7360:	008b      	lsls	r3, r1, #2
    7362:	1ac0      	subs	r0, r0, r3
    7364:	4152      	adcs	r2, r2
    7366:	0843      	lsrs	r3, r0, #1
    7368:	428b      	cmp	r3, r1
    736a:	d301      	bcc.n	7370 <__udivsi3+0xf0>
    736c:	004b      	lsls	r3, r1, #1
    736e:	1ac0      	subs	r0, r0, r3
    7370:	4152      	adcs	r2, r2
    7372:	1a41      	subs	r1, r0, r1
    7374:	d200      	bcs.n	7378 <__udivsi3+0xf8>
    7376:	4601      	mov	r1, r0
    7378:	4152      	adcs	r2, r2
    737a:	4610      	mov	r0, r2
    737c:	4770      	bx	lr
    737e:	e7ff      	b.n	7380 <__udivsi3+0x100>
    7380:	b501      	push	{r0, lr}
    7382:	2000      	movs	r0, #0
    7384:	f000 f8f0 	bl	7568 <__aeabi_idiv0>
    7388:	bd02      	pop	{r1, pc}
    738a:	46c0      	nop			; (mov r8, r8)

0000738c <__aeabi_uidivmod>:
    738c:	2900      	cmp	r1, #0
    738e:	d0f7      	beq.n	7380 <__udivsi3+0x100>
    7390:	e776      	b.n	7280 <__udivsi3>
    7392:	4770      	bx	lr

00007394 <__divsi3>:
    7394:	4603      	mov	r3, r0
    7396:	430b      	orrs	r3, r1
    7398:	d47f      	bmi.n	749a <__divsi3+0x106>
    739a:	2200      	movs	r2, #0
    739c:	0843      	lsrs	r3, r0, #1
    739e:	428b      	cmp	r3, r1
    73a0:	d374      	bcc.n	748c <__divsi3+0xf8>
    73a2:	0903      	lsrs	r3, r0, #4
    73a4:	428b      	cmp	r3, r1
    73a6:	d35f      	bcc.n	7468 <__divsi3+0xd4>
    73a8:	0a03      	lsrs	r3, r0, #8
    73aa:	428b      	cmp	r3, r1
    73ac:	d344      	bcc.n	7438 <__divsi3+0xa4>
    73ae:	0b03      	lsrs	r3, r0, #12
    73b0:	428b      	cmp	r3, r1
    73b2:	d328      	bcc.n	7406 <__divsi3+0x72>
    73b4:	0c03      	lsrs	r3, r0, #16
    73b6:	428b      	cmp	r3, r1
    73b8:	d30d      	bcc.n	73d6 <__divsi3+0x42>
    73ba:	22ff      	movs	r2, #255	; 0xff
    73bc:	0209      	lsls	r1, r1, #8
    73be:	ba12      	rev	r2, r2
    73c0:	0c03      	lsrs	r3, r0, #16
    73c2:	428b      	cmp	r3, r1
    73c4:	d302      	bcc.n	73cc <__divsi3+0x38>
    73c6:	1212      	asrs	r2, r2, #8
    73c8:	0209      	lsls	r1, r1, #8
    73ca:	d065      	beq.n	7498 <__divsi3+0x104>
    73cc:	0b03      	lsrs	r3, r0, #12
    73ce:	428b      	cmp	r3, r1
    73d0:	d319      	bcc.n	7406 <__divsi3+0x72>
    73d2:	e000      	b.n	73d6 <__divsi3+0x42>
    73d4:	0a09      	lsrs	r1, r1, #8
    73d6:	0bc3      	lsrs	r3, r0, #15
    73d8:	428b      	cmp	r3, r1
    73da:	d301      	bcc.n	73e0 <__divsi3+0x4c>
    73dc:	03cb      	lsls	r3, r1, #15
    73de:	1ac0      	subs	r0, r0, r3
    73e0:	4152      	adcs	r2, r2
    73e2:	0b83      	lsrs	r3, r0, #14
    73e4:	428b      	cmp	r3, r1
    73e6:	d301      	bcc.n	73ec <__divsi3+0x58>
    73e8:	038b      	lsls	r3, r1, #14
    73ea:	1ac0      	subs	r0, r0, r3
    73ec:	4152      	adcs	r2, r2
    73ee:	0b43      	lsrs	r3, r0, #13
    73f0:	428b      	cmp	r3, r1
    73f2:	d301      	bcc.n	73f8 <__divsi3+0x64>
    73f4:	034b      	lsls	r3, r1, #13
    73f6:	1ac0      	subs	r0, r0, r3
    73f8:	4152      	adcs	r2, r2
    73fa:	0b03      	lsrs	r3, r0, #12
    73fc:	428b      	cmp	r3, r1
    73fe:	d301      	bcc.n	7404 <__divsi3+0x70>
    7400:	030b      	lsls	r3, r1, #12
    7402:	1ac0      	subs	r0, r0, r3
    7404:	4152      	adcs	r2, r2
    7406:	0ac3      	lsrs	r3, r0, #11
    7408:	428b      	cmp	r3, r1
    740a:	d301      	bcc.n	7410 <__divsi3+0x7c>
    740c:	02cb      	lsls	r3, r1, #11
    740e:	1ac0      	subs	r0, r0, r3
    7410:	4152      	adcs	r2, r2
    7412:	0a83      	lsrs	r3, r0, #10
    7414:	428b      	cmp	r3, r1
    7416:	d301      	bcc.n	741c <__divsi3+0x88>
    7418:	028b      	lsls	r3, r1, #10
    741a:	1ac0      	subs	r0, r0, r3
    741c:	4152      	adcs	r2, r2
    741e:	0a43      	lsrs	r3, r0, #9
    7420:	428b      	cmp	r3, r1
    7422:	d301      	bcc.n	7428 <__divsi3+0x94>
    7424:	024b      	lsls	r3, r1, #9
    7426:	1ac0      	subs	r0, r0, r3
    7428:	4152      	adcs	r2, r2
    742a:	0a03      	lsrs	r3, r0, #8
    742c:	428b      	cmp	r3, r1
    742e:	d301      	bcc.n	7434 <__divsi3+0xa0>
    7430:	020b      	lsls	r3, r1, #8
    7432:	1ac0      	subs	r0, r0, r3
    7434:	4152      	adcs	r2, r2
    7436:	d2cd      	bcs.n	73d4 <__divsi3+0x40>
    7438:	09c3      	lsrs	r3, r0, #7
    743a:	428b      	cmp	r3, r1
    743c:	d301      	bcc.n	7442 <__divsi3+0xae>
    743e:	01cb      	lsls	r3, r1, #7
    7440:	1ac0      	subs	r0, r0, r3
    7442:	4152      	adcs	r2, r2
    7444:	0983      	lsrs	r3, r0, #6
    7446:	428b      	cmp	r3, r1
    7448:	d301      	bcc.n	744e <__divsi3+0xba>
    744a:	018b      	lsls	r3, r1, #6
    744c:	1ac0      	subs	r0, r0, r3
    744e:	4152      	adcs	r2, r2
    7450:	0943      	lsrs	r3, r0, #5
    7452:	428b      	cmp	r3, r1
    7454:	d301      	bcc.n	745a <__divsi3+0xc6>
    7456:	014b      	lsls	r3, r1, #5
    7458:	1ac0      	subs	r0, r0, r3
    745a:	4152      	adcs	r2, r2
    745c:	0903      	lsrs	r3, r0, #4
    745e:	428b      	cmp	r3, r1
    7460:	d301      	bcc.n	7466 <__divsi3+0xd2>
    7462:	010b      	lsls	r3, r1, #4
    7464:	1ac0      	subs	r0, r0, r3
    7466:	4152      	adcs	r2, r2
    7468:	08c3      	lsrs	r3, r0, #3
    746a:	428b      	cmp	r3, r1
    746c:	d301      	bcc.n	7472 <__divsi3+0xde>
    746e:	00cb      	lsls	r3, r1, #3
    7470:	1ac0      	subs	r0, r0, r3
    7472:	4152      	adcs	r2, r2
    7474:	0883      	lsrs	r3, r0, #2
    7476:	428b      	cmp	r3, r1
    7478:	d301      	bcc.n	747e <__divsi3+0xea>
    747a:	008b      	lsls	r3, r1, #2
    747c:	1ac0      	subs	r0, r0, r3
    747e:	4152      	adcs	r2, r2
    7480:	0843      	lsrs	r3, r0, #1
    7482:	428b      	cmp	r3, r1
    7484:	d301      	bcc.n	748a <__divsi3+0xf6>
    7486:	004b      	lsls	r3, r1, #1
    7488:	1ac0      	subs	r0, r0, r3
    748a:	4152      	adcs	r2, r2
    748c:	1a41      	subs	r1, r0, r1
    748e:	d200      	bcs.n	7492 <__divsi3+0xfe>
    7490:	4601      	mov	r1, r0
    7492:	4152      	adcs	r2, r2
    7494:	4610      	mov	r0, r2
    7496:	4770      	bx	lr
    7498:	e05d      	b.n	7556 <__divsi3+0x1c2>
    749a:	0fca      	lsrs	r2, r1, #31
    749c:	d000      	beq.n	74a0 <__divsi3+0x10c>
    749e:	4249      	negs	r1, r1
    74a0:	1003      	asrs	r3, r0, #32
    74a2:	d300      	bcc.n	74a6 <__divsi3+0x112>
    74a4:	4240      	negs	r0, r0
    74a6:	4053      	eors	r3, r2
    74a8:	2200      	movs	r2, #0
    74aa:	469c      	mov	ip, r3
    74ac:	0903      	lsrs	r3, r0, #4
    74ae:	428b      	cmp	r3, r1
    74b0:	d32d      	bcc.n	750e <__divsi3+0x17a>
    74b2:	0a03      	lsrs	r3, r0, #8
    74b4:	428b      	cmp	r3, r1
    74b6:	d312      	bcc.n	74de <__divsi3+0x14a>
    74b8:	22fc      	movs	r2, #252	; 0xfc
    74ba:	0189      	lsls	r1, r1, #6
    74bc:	ba12      	rev	r2, r2
    74be:	0a03      	lsrs	r3, r0, #8
    74c0:	428b      	cmp	r3, r1
    74c2:	d30c      	bcc.n	74de <__divsi3+0x14a>
    74c4:	0189      	lsls	r1, r1, #6
    74c6:	1192      	asrs	r2, r2, #6
    74c8:	428b      	cmp	r3, r1
    74ca:	d308      	bcc.n	74de <__divsi3+0x14a>
    74cc:	0189      	lsls	r1, r1, #6
    74ce:	1192      	asrs	r2, r2, #6
    74d0:	428b      	cmp	r3, r1
    74d2:	d304      	bcc.n	74de <__divsi3+0x14a>
    74d4:	0189      	lsls	r1, r1, #6
    74d6:	d03a      	beq.n	754e <__divsi3+0x1ba>
    74d8:	1192      	asrs	r2, r2, #6
    74da:	e000      	b.n	74de <__divsi3+0x14a>
    74dc:	0989      	lsrs	r1, r1, #6
    74de:	09c3      	lsrs	r3, r0, #7
    74e0:	428b      	cmp	r3, r1
    74e2:	d301      	bcc.n	74e8 <__divsi3+0x154>
    74e4:	01cb      	lsls	r3, r1, #7
    74e6:	1ac0      	subs	r0, r0, r3
    74e8:	4152      	adcs	r2, r2
    74ea:	0983      	lsrs	r3, r0, #6
    74ec:	428b      	cmp	r3, r1
    74ee:	d301      	bcc.n	74f4 <__divsi3+0x160>
    74f0:	018b      	lsls	r3, r1, #6
    74f2:	1ac0      	subs	r0, r0, r3
    74f4:	4152      	adcs	r2, r2
    74f6:	0943      	lsrs	r3, r0, #5
    74f8:	428b      	cmp	r3, r1
    74fa:	d301      	bcc.n	7500 <__divsi3+0x16c>
    74fc:	014b      	lsls	r3, r1, #5
    74fe:	1ac0      	subs	r0, r0, r3
    7500:	4152      	adcs	r2, r2
    7502:	0903      	lsrs	r3, r0, #4
    7504:	428b      	cmp	r3, r1
    7506:	d301      	bcc.n	750c <__divsi3+0x178>
    7508:	010b      	lsls	r3, r1, #4
    750a:	1ac0      	subs	r0, r0, r3
    750c:	4152      	adcs	r2, r2
    750e:	08c3      	lsrs	r3, r0, #3
    7510:	428b      	cmp	r3, r1
    7512:	d301      	bcc.n	7518 <__divsi3+0x184>
    7514:	00cb      	lsls	r3, r1, #3
    7516:	1ac0      	subs	r0, r0, r3
    7518:	4152      	adcs	r2, r2
    751a:	0883      	lsrs	r3, r0, #2
    751c:	428b      	cmp	r3, r1
    751e:	d301      	bcc.n	7524 <__divsi3+0x190>
    7520:	008b      	lsls	r3, r1, #2
    7522:	1ac0      	subs	r0, r0, r3
    7524:	4152      	adcs	r2, r2
    7526:	d2d9      	bcs.n	74dc <__divsi3+0x148>
    7528:	0843      	lsrs	r3, r0, #1
    752a:	428b      	cmp	r3, r1
    752c:	d301      	bcc.n	7532 <__divsi3+0x19e>
    752e:	004b      	lsls	r3, r1, #1
    7530:	1ac0      	subs	r0, r0, r3
    7532:	4152      	adcs	r2, r2
    7534:	1a41      	subs	r1, r0, r1
    7536:	d200      	bcs.n	753a <__divsi3+0x1a6>
    7538:	4601      	mov	r1, r0
    753a:	4663      	mov	r3, ip
    753c:	4152      	adcs	r2, r2
    753e:	105b      	asrs	r3, r3, #1
    7540:	4610      	mov	r0, r2
    7542:	d301      	bcc.n	7548 <__divsi3+0x1b4>
    7544:	4240      	negs	r0, r0
    7546:	2b00      	cmp	r3, #0
    7548:	d500      	bpl.n	754c <__divsi3+0x1b8>
    754a:	4249      	negs	r1, r1
    754c:	4770      	bx	lr
    754e:	4663      	mov	r3, ip
    7550:	105b      	asrs	r3, r3, #1
    7552:	d300      	bcc.n	7556 <__divsi3+0x1c2>
    7554:	4240      	negs	r0, r0
    7556:	b501      	push	{r0, lr}
    7558:	2000      	movs	r0, #0
    755a:	f000 f805 	bl	7568 <__aeabi_idiv0>
    755e:	bd02      	pop	{r1, pc}

00007560 <__aeabi_idivmod>:
    7560:	2900      	cmp	r1, #0
    7562:	d0f8      	beq.n	7556 <__divsi3+0x1c2>
    7564:	e716      	b.n	7394 <__divsi3>
    7566:	4770      	bx	lr

00007568 <__aeabi_idiv0>:
    7568:	4770      	bx	lr
    756a:	46c0      	nop			; (mov r8, r8)

0000756c <__aeabi_lmul>:
    756c:	b5f0      	push	{r4, r5, r6, r7, lr}
    756e:	46ce      	mov	lr, r9
    7570:	4647      	mov	r7, r8
    7572:	0415      	lsls	r5, r2, #16
    7574:	0c2d      	lsrs	r5, r5, #16
    7576:	002e      	movs	r6, r5
    7578:	b580      	push	{r7, lr}
    757a:	0407      	lsls	r7, r0, #16
    757c:	0c14      	lsrs	r4, r2, #16
    757e:	0c3f      	lsrs	r7, r7, #16
    7580:	4699      	mov	r9, r3
    7582:	0c03      	lsrs	r3, r0, #16
    7584:	437e      	muls	r6, r7
    7586:	435d      	muls	r5, r3
    7588:	4367      	muls	r7, r4
    758a:	4363      	muls	r3, r4
    758c:	197f      	adds	r7, r7, r5
    758e:	0c34      	lsrs	r4, r6, #16
    7590:	19e4      	adds	r4, r4, r7
    7592:	469c      	mov	ip, r3
    7594:	42a5      	cmp	r5, r4
    7596:	d903      	bls.n	75a0 <__aeabi_lmul+0x34>
    7598:	2380      	movs	r3, #128	; 0x80
    759a:	025b      	lsls	r3, r3, #9
    759c:	4698      	mov	r8, r3
    759e:	44c4      	add	ip, r8
    75a0:	464b      	mov	r3, r9
    75a2:	4351      	muls	r1, r2
    75a4:	4343      	muls	r3, r0
    75a6:	0436      	lsls	r6, r6, #16
    75a8:	0c36      	lsrs	r6, r6, #16
    75aa:	0c25      	lsrs	r5, r4, #16
    75ac:	0424      	lsls	r4, r4, #16
    75ae:	4465      	add	r5, ip
    75b0:	19a4      	adds	r4, r4, r6
    75b2:	1859      	adds	r1, r3, r1
    75b4:	1949      	adds	r1, r1, r5
    75b6:	0020      	movs	r0, r4
    75b8:	bc0c      	pop	{r2, r3}
    75ba:	4690      	mov	r8, r2
    75bc:	4699      	mov	r9, r3
    75be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000075c0 <__libc_init_array>:
    75c0:	b570      	push	{r4, r5, r6, lr}
    75c2:	2600      	movs	r6, #0
    75c4:	4d0c      	ldr	r5, [pc, #48]	; (75f8 <__libc_init_array+0x38>)
    75c6:	4c0d      	ldr	r4, [pc, #52]	; (75fc <__libc_init_array+0x3c>)
    75c8:	1b64      	subs	r4, r4, r5
    75ca:	10a4      	asrs	r4, r4, #2
    75cc:	42a6      	cmp	r6, r4
    75ce:	d109      	bne.n	75e4 <__libc_init_array+0x24>
    75d0:	2600      	movs	r6, #0
    75d2:	f002 fa43 	bl	9a5c <_init>
    75d6:	4d0a      	ldr	r5, [pc, #40]	; (7600 <__libc_init_array+0x40>)
    75d8:	4c0a      	ldr	r4, [pc, #40]	; (7604 <__libc_init_array+0x44>)
    75da:	1b64      	subs	r4, r4, r5
    75dc:	10a4      	asrs	r4, r4, #2
    75de:	42a6      	cmp	r6, r4
    75e0:	d105      	bne.n	75ee <__libc_init_array+0x2e>
    75e2:	bd70      	pop	{r4, r5, r6, pc}
    75e4:	00b3      	lsls	r3, r6, #2
    75e6:	58eb      	ldr	r3, [r5, r3]
    75e8:	4798      	blx	r3
    75ea:	3601      	adds	r6, #1
    75ec:	e7ee      	b.n	75cc <__libc_init_array+0xc>
    75ee:	00b3      	lsls	r3, r6, #2
    75f0:	58eb      	ldr	r3, [r5, r3]
    75f2:	4798      	blx	r3
    75f4:	3601      	adds	r6, #1
    75f6:	e7f2      	b.n	75de <__libc_init_array+0x1e>
    75f8:	00009a68 	.word	0x00009a68
    75fc:	00009a68 	.word	0x00009a68
    7600:	00009a68 	.word	0x00009a68
    7604:	00009a6c 	.word	0x00009a6c

00007608 <memcpy>:
    7608:	2300      	movs	r3, #0
    760a:	b510      	push	{r4, lr}
    760c:	429a      	cmp	r2, r3
    760e:	d100      	bne.n	7612 <memcpy+0xa>
    7610:	bd10      	pop	{r4, pc}
    7612:	5ccc      	ldrb	r4, [r1, r3]
    7614:	54c4      	strb	r4, [r0, r3]
    7616:	3301      	adds	r3, #1
    7618:	e7f8      	b.n	760c <memcpy+0x4>

0000761a <memset>:
    761a:	0003      	movs	r3, r0
    761c:	1882      	adds	r2, r0, r2
    761e:	4293      	cmp	r3, r2
    7620:	d100      	bne.n	7624 <memset+0xa>
    7622:	4770      	bx	lr
    7624:	7019      	strb	r1, [r3, #0]
    7626:	3301      	adds	r3, #1
    7628:	e7f9      	b.n	761e <memset+0x4>
	...

0000762c <iprintf>:
    762c:	b40f      	push	{r0, r1, r2, r3}
    762e:	4b0b      	ldr	r3, [pc, #44]	; (765c <iprintf+0x30>)
    7630:	b513      	push	{r0, r1, r4, lr}
    7632:	681c      	ldr	r4, [r3, #0]
    7634:	2c00      	cmp	r4, #0
    7636:	d005      	beq.n	7644 <iprintf+0x18>
    7638:	69a3      	ldr	r3, [r4, #24]
    763a:	2b00      	cmp	r3, #0
    763c:	d102      	bne.n	7644 <iprintf+0x18>
    763e:	0020      	movs	r0, r4
    7640:	f000 fb7a 	bl	7d38 <__sinit>
    7644:	ab05      	add	r3, sp, #20
    7646:	9a04      	ldr	r2, [sp, #16]
    7648:	68a1      	ldr	r1, [r4, #8]
    764a:	0020      	movs	r0, r4
    764c:	9301      	str	r3, [sp, #4]
    764e:	f000 fd4f 	bl	80f0 <_vfiprintf_r>
    7652:	bc16      	pop	{r1, r2, r4}
    7654:	bc08      	pop	{r3}
    7656:	b004      	add	sp, #16
    7658:	4718      	bx	r3
    765a:	46c0      	nop			; (mov r8, r8)
    765c:	20000010 	.word	0x20000010

00007660 <putchar>:
    7660:	4b08      	ldr	r3, [pc, #32]	; (7684 <putchar+0x24>)
    7662:	b570      	push	{r4, r5, r6, lr}
    7664:	681c      	ldr	r4, [r3, #0]
    7666:	0005      	movs	r5, r0
    7668:	2c00      	cmp	r4, #0
    766a:	d005      	beq.n	7678 <putchar+0x18>
    766c:	69a3      	ldr	r3, [r4, #24]
    766e:	2b00      	cmp	r3, #0
    7670:	d102      	bne.n	7678 <putchar+0x18>
    7672:	0020      	movs	r0, r4
    7674:	f000 fb60 	bl	7d38 <__sinit>
    7678:	0029      	movs	r1, r5
    767a:	68a2      	ldr	r2, [r4, #8]
    767c:	0020      	movs	r0, r4
    767e:	f000 ffdb 	bl	8638 <_putc_r>
    7682:	bd70      	pop	{r4, r5, r6, pc}
    7684:	20000010 	.word	0x20000010

00007688 <_puts_r>:
    7688:	b570      	push	{r4, r5, r6, lr}
    768a:	0005      	movs	r5, r0
    768c:	000e      	movs	r6, r1
    768e:	2800      	cmp	r0, #0
    7690:	d004      	beq.n	769c <_puts_r+0x14>
    7692:	6983      	ldr	r3, [r0, #24]
    7694:	2b00      	cmp	r3, #0
    7696:	d101      	bne.n	769c <_puts_r+0x14>
    7698:	f000 fb4e 	bl	7d38 <__sinit>
    769c:	69ab      	ldr	r3, [r5, #24]
    769e:	68ac      	ldr	r4, [r5, #8]
    76a0:	2b00      	cmp	r3, #0
    76a2:	d102      	bne.n	76aa <_puts_r+0x22>
    76a4:	0028      	movs	r0, r5
    76a6:	f000 fb47 	bl	7d38 <__sinit>
    76aa:	4b24      	ldr	r3, [pc, #144]	; (773c <_puts_r+0xb4>)
    76ac:	429c      	cmp	r4, r3
    76ae:	d10f      	bne.n	76d0 <_puts_r+0x48>
    76b0:	686c      	ldr	r4, [r5, #4]
    76b2:	89a3      	ldrh	r3, [r4, #12]
    76b4:	071b      	lsls	r3, r3, #28
    76b6:	d502      	bpl.n	76be <_puts_r+0x36>
    76b8:	6923      	ldr	r3, [r4, #16]
    76ba:	2b00      	cmp	r3, #0
    76bc:	d120      	bne.n	7700 <_puts_r+0x78>
    76be:	0021      	movs	r1, r4
    76c0:	0028      	movs	r0, r5
    76c2:	f000 f9cb 	bl	7a5c <__swsetup_r>
    76c6:	2800      	cmp	r0, #0
    76c8:	d01a      	beq.n	7700 <_puts_r+0x78>
    76ca:	2001      	movs	r0, #1
    76cc:	4240      	negs	r0, r0
    76ce:	bd70      	pop	{r4, r5, r6, pc}
    76d0:	4b1b      	ldr	r3, [pc, #108]	; (7740 <_puts_r+0xb8>)
    76d2:	429c      	cmp	r4, r3
    76d4:	d101      	bne.n	76da <_puts_r+0x52>
    76d6:	68ac      	ldr	r4, [r5, #8]
    76d8:	e7eb      	b.n	76b2 <_puts_r+0x2a>
    76da:	4b1a      	ldr	r3, [pc, #104]	; (7744 <_puts_r+0xbc>)
    76dc:	429c      	cmp	r4, r3
    76de:	d1e8      	bne.n	76b2 <_puts_r+0x2a>
    76e0:	68ec      	ldr	r4, [r5, #12]
    76e2:	e7e6      	b.n	76b2 <_puts_r+0x2a>
    76e4:	3b01      	subs	r3, #1
    76e6:	3601      	adds	r6, #1
    76e8:	60a3      	str	r3, [r4, #8]
    76ea:	2b00      	cmp	r3, #0
    76ec:	da04      	bge.n	76f8 <_puts_r+0x70>
    76ee:	69a2      	ldr	r2, [r4, #24]
    76f0:	4293      	cmp	r3, r2
    76f2:	db16      	blt.n	7722 <_puts_r+0x9a>
    76f4:	290a      	cmp	r1, #10
    76f6:	d014      	beq.n	7722 <_puts_r+0x9a>
    76f8:	6823      	ldr	r3, [r4, #0]
    76fa:	1c5a      	adds	r2, r3, #1
    76fc:	6022      	str	r2, [r4, #0]
    76fe:	7019      	strb	r1, [r3, #0]
    7700:	7831      	ldrb	r1, [r6, #0]
    7702:	68a3      	ldr	r3, [r4, #8]
    7704:	2900      	cmp	r1, #0
    7706:	d1ed      	bne.n	76e4 <_puts_r+0x5c>
    7708:	3b01      	subs	r3, #1
    770a:	60a3      	str	r3, [r4, #8]
    770c:	2b00      	cmp	r3, #0
    770e:	da0f      	bge.n	7730 <_puts_r+0xa8>
    7710:	0022      	movs	r2, r4
    7712:	310a      	adds	r1, #10
    7714:	0028      	movs	r0, r5
    7716:	f000 f94b 	bl	79b0 <__swbuf_r>
    771a:	1c43      	adds	r3, r0, #1
    771c:	d0d5      	beq.n	76ca <_puts_r+0x42>
    771e:	200a      	movs	r0, #10
    7720:	e7d5      	b.n	76ce <_puts_r+0x46>
    7722:	0022      	movs	r2, r4
    7724:	0028      	movs	r0, r5
    7726:	f000 f943 	bl	79b0 <__swbuf_r>
    772a:	1c43      	adds	r3, r0, #1
    772c:	d1e8      	bne.n	7700 <_puts_r+0x78>
    772e:	e7cc      	b.n	76ca <_puts_r+0x42>
    7730:	200a      	movs	r0, #10
    7732:	6823      	ldr	r3, [r4, #0]
    7734:	1c5a      	adds	r2, r3, #1
    7736:	6022      	str	r2, [r4, #0]
    7738:	7018      	strb	r0, [r3, #0]
    773a:	e7c8      	b.n	76ce <_puts_r+0x46>
    773c:	000099e8 	.word	0x000099e8
    7740:	00009a08 	.word	0x00009a08
    7744:	000099c8 	.word	0x000099c8

00007748 <puts>:
    7748:	b510      	push	{r4, lr}
    774a:	4b03      	ldr	r3, [pc, #12]	; (7758 <puts+0x10>)
    774c:	0001      	movs	r1, r0
    774e:	6818      	ldr	r0, [r3, #0]
    7750:	f7ff ff9a 	bl	7688 <_puts_r>
    7754:	bd10      	pop	{r4, pc}
    7756:	46c0      	nop			; (mov r8, r8)
    7758:	20000010 	.word	0x20000010

0000775c <srand>:
    775c:	4b10      	ldr	r3, [pc, #64]	; (77a0 <srand+0x44>)
    775e:	b570      	push	{r4, r5, r6, lr}
    7760:	681c      	ldr	r4, [r3, #0]
    7762:	0005      	movs	r5, r0
    7764:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7766:	2b00      	cmp	r3, #0
    7768:	d115      	bne.n	7796 <srand+0x3a>
    776a:	2018      	movs	r0, #24
    776c:	f000 fbe6 	bl	7f3c <malloc>
    7770:	4b0c      	ldr	r3, [pc, #48]	; (77a4 <srand+0x48>)
    7772:	63a0      	str	r0, [r4, #56]	; 0x38
    7774:	8003      	strh	r3, [r0, #0]
    7776:	4b0c      	ldr	r3, [pc, #48]	; (77a8 <srand+0x4c>)
    7778:	2201      	movs	r2, #1
    777a:	8043      	strh	r3, [r0, #2]
    777c:	4b0b      	ldr	r3, [pc, #44]	; (77ac <srand+0x50>)
    777e:	8083      	strh	r3, [r0, #4]
    7780:	4b0b      	ldr	r3, [pc, #44]	; (77b0 <srand+0x54>)
    7782:	80c3      	strh	r3, [r0, #6]
    7784:	4b0b      	ldr	r3, [pc, #44]	; (77b4 <srand+0x58>)
    7786:	8103      	strh	r3, [r0, #8]
    7788:	2305      	movs	r3, #5
    778a:	8143      	strh	r3, [r0, #10]
    778c:	3306      	adds	r3, #6
    778e:	8183      	strh	r3, [r0, #12]
    7790:	2300      	movs	r3, #0
    7792:	6102      	str	r2, [r0, #16]
    7794:	6143      	str	r3, [r0, #20]
    7796:	2200      	movs	r2, #0
    7798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    779a:	611d      	str	r5, [r3, #16]
    779c:	615a      	str	r2, [r3, #20]
    779e:	bd70      	pop	{r4, r5, r6, pc}
    77a0:	20000010 	.word	0x20000010
    77a4:	0000330e 	.word	0x0000330e
    77a8:	ffffabcd 	.word	0xffffabcd
    77ac:	00001234 	.word	0x00001234
    77b0:	ffffe66d 	.word	0xffffe66d
    77b4:	ffffdeec 	.word	0xffffdeec

000077b8 <rand>:
    77b8:	4b15      	ldr	r3, [pc, #84]	; (7810 <rand+0x58>)
    77ba:	b510      	push	{r4, lr}
    77bc:	681c      	ldr	r4, [r3, #0]
    77be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    77c0:	2b00      	cmp	r3, #0
    77c2:	d115      	bne.n	77f0 <rand+0x38>
    77c4:	2018      	movs	r0, #24
    77c6:	f000 fbb9 	bl	7f3c <malloc>
    77ca:	4b12      	ldr	r3, [pc, #72]	; (7814 <rand+0x5c>)
    77cc:	63a0      	str	r0, [r4, #56]	; 0x38
    77ce:	8003      	strh	r3, [r0, #0]
    77d0:	4b11      	ldr	r3, [pc, #68]	; (7818 <rand+0x60>)
    77d2:	2201      	movs	r2, #1
    77d4:	8043      	strh	r3, [r0, #2]
    77d6:	4b11      	ldr	r3, [pc, #68]	; (781c <rand+0x64>)
    77d8:	8083      	strh	r3, [r0, #4]
    77da:	4b11      	ldr	r3, [pc, #68]	; (7820 <rand+0x68>)
    77dc:	80c3      	strh	r3, [r0, #6]
    77de:	4b11      	ldr	r3, [pc, #68]	; (7824 <rand+0x6c>)
    77e0:	8103      	strh	r3, [r0, #8]
    77e2:	2305      	movs	r3, #5
    77e4:	8143      	strh	r3, [r0, #10]
    77e6:	3306      	adds	r3, #6
    77e8:	8183      	strh	r3, [r0, #12]
    77ea:	2300      	movs	r3, #0
    77ec:	6102      	str	r2, [r0, #16]
    77ee:	6143      	str	r3, [r0, #20]
    77f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    77f2:	4a0d      	ldr	r2, [pc, #52]	; (7828 <rand+0x70>)
    77f4:	6920      	ldr	r0, [r4, #16]
    77f6:	6961      	ldr	r1, [r4, #20]
    77f8:	4b0c      	ldr	r3, [pc, #48]	; (782c <rand+0x74>)
    77fa:	f7ff feb7 	bl	756c <__aeabi_lmul>
    77fe:	2201      	movs	r2, #1
    7800:	2300      	movs	r3, #0
    7802:	1880      	adds	r0, r0, r2
    7804:	4159      	adcs	r1, r3
    7806:	6120      	str	r0, [r4, #16]
    7808:	6161      	str	r1, [r4, #20]
    780a:	0048      	lsls	r0, r1, #1
    780c:	0840      	lsrs	r0, r0, #1
    780e:	bd10      	pop	{r4, pc}
    7810:	20000010 	.word	0x20000010
    7814:	0000330e 	.word	0x0000330e
    7818:	ffffabcd 	.word	0xffffabcd
    781c:	00001234 	.word	0x00001234
    7820:	ffffe66d 	.word	0xffffe66d
    7824:	ffffdeec 	.word	0xffffdeec
    7828:	4c957f2d 	.word	0x4c957f2d
    782c:	5851f42d 	.word	0x5851f42d

00007830 <setbuf>:
    7830:	424a      	negs	r2, r1
    7832:	414a      	adcs	r2, r1
    7834:	2380      	movs	r3, #128	; 0x80
    7836:	b510      	push	{r4, lr}
    7838:	0052      	lsls	r2, r2, #1
    783a:	00db      	lsls	r3, r3, #3
    783c:	f000 f802 	bl	7844 <setvbuf>
    7840:	bd10      	pop	{r4, pc}
	...

00007844 <setvbuf>:
    7844:	b5f0      	push	{r4, r5, r6, r7, lr}
    7846:	001d      	movs	r5, r3
    7848:	4b4f      	ldr	r3, [pc, #316]	; (7988 <setvbuf+0x144>)
    784a:	b085      	sub	sp, #20
    784c:	681e      	ldr	r6, [r3, #0]
    784e:	0004      	movs	r4, r0
    7850:	000f      	movs	r7, r1
    7852:	9200      	str	r2, [sp, #0]
    7854:	2e00      	cmp	r6, #0
    7856:	d005      	beq.n	7864 <setvbuf+0x20>
    7858:	69b3      	ldr	r3, [r6, #24]
    785a:	2b00      	cmp	r3, #0
    785c:	d102      	bne.n	7864 <setvbuf+0x20>
    785e:	0030      	movs	r0, r6
    7860:	f000 fa6a 	bl	7d38 <__sinit>
    7864:	4b49      	ldr	r3, [pc, #292]	; (798c <setvbuf+0x148>)
    7866:	429c      	cmp	r4, r3
    7868:	d150      	bne.n	790c <setvbuf+0xc8>
    786a:	6874      	ldr	r4, [r6, #4]
    786c:	9b00      	ldr	r3, [sp, #0]
    786e:	2b02      	cmp	r3, #2
    7870:	d005      	beq.n	787e <setvbuf+0x3a>
    7872:	2b01      	cmp	r3, #1
    7874:	d900      	bls.n	7878 <setvbuf+0x34>
    7876:	e084      	b.n	7982 <setvbuf+0x13e>
    7878:	2d00      	cmp	r5, #0
    787a:	da00      	bge.n	787e <setvbuf+0x3a>
    787c:	e081      	b.n	7982 <setvbuf+0x13e>
    787e:	0021      	movs	r1, r4
    7880:	0030      	movs	r0, r6
    7882:	f000 f9eb 	bl	7c5c <_fflush_r>
    7886:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7888:	2900      	cmp	r1, #0
    788a:	d008      	beq.n	789e <setvbuf+0x5a>
    788c:	0023      	movs	r3, r4
    788e:	3344      	adds	r3, #68	; 0x44
    7890:	4299      	cmp	r1, r3
    7892:	d002      	beq.n	789a <setvbuf+0x56>
    7894:	0030      	movs	r0, r6
    7896:	f000 fb5b 	bl	7f50 <_free_r>
    789a:	2300      	movs	r3, #0
    789c:	6363      	str	r3, [r4, #52]	; 0x34
    789e:	2300      	movs	r3, #0
    78a0:	61a3      	str	r3, [r4, #24]
    78a2:	6063      	str	r3, [r4, #4]
    78a4:	89a3      	ldrh	r3, [r4, #12]
    78a6:	061b      	lsls	r3, r3, #24
    78a8:	d503      	bpl.n	78b2 <setvbuf+0x6e>
    78aa:	6921      	ldr	r1, [r4, #16]
    78ac:	0030      	movs	r0, r6
    78ae:	f000 fb4f 	bl	7f50 <_free_r>
    78b2:	89a3      	ldrh	r3, [r4, #12]
    78b4:	4a36      	ldr	r2, [pc, #216]	; (7990 <setvbuf+0x14c>)
    78b6:	4013      	ands	r3, r2
    78b8:	81a3      	strh	r3, [r4, #12]
    78ba:	9b00      	ldr	r3, [sp, #0]
    78bc:	2b02      	cmp	r3, #2
    78be:	d05a      	beq.n	7976 <setvbuf+0x132>
    78c0:	ab03      	add	r3, sp, #12
    78c2:	aa02      	add	r2, sp, #8
    78c4:	0021      	movs	r1, r4
    78c6:	0030      	movs	r0, r6
    78c8:	f000 facc 	bl	7e64 <__swhatbuf_r>
    78cc:	89a3      	ldrh	r3, [r4, #12]
    78ce:	4318      	orrs	r0, r3
    78d0:	81a0      	strh	r0, [r4, #12]
    78d2:	2d00      	cmp	r5, #0
    78d4:	d124      	bne.n	7920 <setvbuf+0xdc>
    78d6:	9d02      	ldr	r5, [sp, #8]
    78d8:	0028      	movs	r0, r5
    78da:	f000 fb2f 	bl	7f3c <malloc>
    78de:	9501      	str	r5, [sp, #4]
    78e0:	1e07      	subs	r7, r0, #0
    78e2:	d142      	bne.n	796a <setvbuf+0x126>
    78e4:	9b02      	ldr	r3, [sp, #8]
    78e6:	9301      	str	r3, [sp, #4]
    78e8:	42ab      	cmp	r3, r5
    78ea:	d139      	bne.n	7960 <setvbuf+0x11c>
    78ec:	2001      	movs	r0, #1
    78ee:	4240      	negs	r0, r0
    78f0:	2302      	movs	r3, #2
    78f2:	89a2      	ldrh	r2, [r4, #12]
    78f4:	4313      	orrs	r3, r2
    78f6:	81a3      	strh	r3, [r4, #12]
    78f8:	2300      	movs	r3, #0
    78fa:	60a3      	str	r3, [r4, #8]
    78fc:	0023      	movs	r3, r4
    78fe:	3347      	adds	r3, #71	; 0x47
    7900:	6023      	str	r3, [r4, #0]
    7902:	6123      	str	r3, [r4, #16]
    7904:	2301      	movs	r3, #1
    7906:	6163      	str	r3, [r4, #20]
    7908:	b005      	add	sp, #20
    790a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    790c:	4b21      	ldr	r3, [pc, #132]	; (7994 <setvbuf+0x150>)
    790e:	429c      	cmp	r4, r3
    7910:	d101      	bne.n	7916 <setvbuf+0xd2>
    7912:	68b4      	ldr	r4, [r6, #8]
    7914:	e7aa      	b.n	786c <setvbuf+0x28>
    7916:	4b20      	ldr	r3, [pc, #128]	; (7998 <setvbuf+0x154>)
    7918:	429c      	cmp	r4, r3
    791a:	d1a7      	bne.n	786c <setvbuf+0x28>
    791c:	68f4      	ldr	r4, [r6, #12]
    791e:	e7a5      	b.n	786c <setvbuf+0x28>
    7920:	2f00      	cmp	r7, #0
    7922:	d0d9      	beq.n	78d8 <setvbuf+0x94>
    7924:	69b3      	ldr	r3, [r6, #24]
    7926:	2b00      	cmp	r3, #0
    7928:	d102      	bne.n	7930 <setvbuf+0xec>
    792a:	0030      	movs	r0, r6
    792c:	f000 fa04 	bl	7d38 <__sinit>
    7930:	9b00      	ldr	r3, [sp, #0]
    7932:	2b01      	cmp	r3, #1
    7934:	d103      	bne.n	793e <setvbuf+0xfa>
    7936:	89a3      	ldrh	r3, [r4, #12]
    7938:	9a00      	ldr	r2, [sp, #0]
    793a:	431a      	orrs	r2, r3
    793c:	81a2      	strh	r2, [r4, #12]
    793e:	2008      	movs	r0, #8
    7940:	89a3      	ldrh	r3, [r4, #12]
    7942:	6027      	str	r7, [r4, #0]
    7944:	6127      	str	r7, [r4, #16]
    7946:	6165      	str	r5, [r4, #20]
    7948:	4018      	ands	r0, r3
    794a:	d018      	beq.n	797e <setvbuf+0x13a>
    794c:	2001      	movs	r0, #1
    794e:	4018      	ands	r0, r3
    7950:	2300      	movs	r3, #0
    7952:	4298      	cmp	r0, r3
    7954:	d011      	beq.n	797a <setvbuf+0x136>
    7956:	426d      	negs	r5, r5
    7958:	60a3      	str	r3, [r4, #8]
    795a:	61a5      	str	r5, [r4, #24]
    795c:	0018      	movs	r0, r3
    795e:	e7d3      	b.n	7908 <setvbuf+0xc4>
    7960:	9801      	ldr	r0, [sp, #4]
    7962:	f000 faeb 	bl	7f3c <malloc>
    7966:	1e07      	subs	r7, r0, #0
    7968:	d0c0      	beq.n	78ec <setvbuf+0xa8>
    796a:	2380      	movs	r3, #128	; 0x80
    796c:	89a2      	ldrh	r2, [r4, #12]
    796e:	9d01      	ldr	r5, [sp, #4]
    7970:	4313      	orrs	r3, r2
    7972:	81a3      	strh	r3, [r4, #12]
    7974:	e7d6      	b.n	7924 <setvbuf+0xe0>
    7976:	2000      	movs	r0, #0
    7978:	e7ba      	b.n	78f0 <setvbuf+0xac>
    797a:	60a5      	str	r5, [r4, #8]
    797c:	e7c4      	b.n	7908 <setvbuf+0xc4>
    797e:	60a0      	str	r0, [r4, #8]
    7980:	e7c2      	b.n	7908 <setvbuf+0xc4>
    7982:	2001      	movs	r0, #1
    7984:	4240      	negs	r0, r0
    7986:	e7bf      	b.n	7908 <setvbuf+0xc4>
    7988:	20000010 	.word	0x20000010
    798c:	000099e8 	.word	0x000099e8
    7990:	fffff35c 	.word	0xfffff35c
    7994:	00009a08 	.word	0x00009a08
    7998:	000099c8 	.word	0x000099c8

0000799c <strcmp>:
    799c:	7802      	ldrb	r2, [r0, #0]
    799e:	780b      	ldrb	r3, [r1, #0]
    79a0:	2a00      	cmp	r2, #0
    79a2:	d003      	beq.n	79ac <strcmp+0x10>
    79a4:	3001      	adds	r0, #1
    79a6:	3101      	adds	r1, #1
    79a8:	429a      	cmp	r2, r3
    79aa:	d0f7      	beq.n	799c <strcmp>
    79ac:	1ad0      	subs	r0, r2, r3
    79ae:	4770      	bx	lr

000079b0 <__swbuf_r>:
    79b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79b2:	0005      	movs	r5, r0
    79b4:	000e      	movs	r6, r1
    79b6:	0014      	movs	r4, r2
    79b8:	2800      	cmp	r0, #0
    79ba:	d004      	beq.n	79c6 <__swbuf_r+0x16>
    79bc:	6983      	ldr	r3, [r0, #24]
    79be:	2b00      	cmp	r3, #0
    79c0:	d101      	bne.n	79c6 <__swbuf_r+0x16>
    79c2:	f000 f9b9 	bl	7d38 <__sinit>
    79c6:	4b22      	ldr	r3, [pc, #136]	; (7a50 <__swbuf_r+0xa0>)
    79c8:	429c      	cmp	r4, r3
    79ca:	d12d      	bne.n	7a28 <__swbuf_r+0x78>
    79cc:	686c      	ldr	r4, [r5, #4]
    79ce:	69a3      	ldr	r3, [r4, #24]
    79d0:	60a3      	str	r3, [r4, #8]
    79d2:	89a3      	ldrh	r3, [r4, #12]
    79d4:	071b      	lsls	r3, r3, #28
    79d6:	d531      	bpl.n	7a3c <__swbuf_r+0x8c>
    79d8:	6923      	ldr	r3, [r4, #16]
    79da:	2b00      	cmp	r3, #0
    79dc:	d02e      	beq.n	7a3c <__swbuf_r+0x8c>
    79de:	6823      	ldr	r3, [r4, #0]
    79e0:	6922      	ldr	r2, [r4, #16]
    79e2:	b2f7      	uxtb	r7, r6
    79e4:	1a98      	subs	r0, r3, r2
    79e6:	6963      	ldr	r3, [r4, #20]
    79e8:	b2f6      	uxtb	r6, r6
    79ea:	4298      	cmp	r0, r3
    79ec:	db05      	blt.n	79fa <__swbuf_r+0x4a>
    79ee:	0021      	movs	r1, r4
    79f0:	0028      	movs	r0, r5
    79f2:	f000 f933 	bl	7c5c <_fflush_r>
    79f6:	2800      	cmp	r0, #0
    79f8:	d126      	bne.n	7a48 <__swbuf_r+0x98>
    79fa:	68a3      	ldr	r3, [r4, #8]
    79fc:	3001      	adds	r0, #1
    79fe:	3b01      	subs	r3, #1
    7a00:	60a3      	str	r3, [r4, #8]
    7a02:	6823      	ldr	r3, [r4, #0]
    7a04:	1c5a      	adds	r2, r3, #1
    7a06:	6022      	str	r2, [r4, #0]
    7a08:	701f      	strb	r7, [r3, #0]
    7a0a:	6963      	ldr	r3, [r4, #20]
    7a0c:	4298      	cmp	r0, r3
    7a0e:	d004      	beq.n	7a1a <__swbuf_r+0x6a>
    7a10:	89a3      	ldrh	r3, [r4, #12]
    7a12:	07db      	lsls	r3, r3, #31
    7a14:	d51a      	bpl.n	7a4c <__swbuf_r+0x9c>
    7a16:	2e0a      	cmp	r6, #10
    7a18:	d118      	bne.n	7a4c <__swbuf_r+0x9c>
    7a1a:	0021      	movs	r1, r4
    7a1c:	0028      	movs	r0, r5
    7a1e:	f000 f91d 	bl	7c5c <_fflush_r>
    7a22:	2800      	cmp	r0, #0
    7a24:	d012      	beq.n	7a4c <__swbuf_r+0x9c>
    7a26:	e00f      	b.n	7a48 <__swbuf_r+0x98>
    7a28:	4b0a      	ldr	r3, [pc, #40]	; (7a54 <__swbuf_r+0xa4>)
    7a2a:	429c      	cmp	r4, r3
    7a2c:	d101      	bne.n	7a32 <__swbuf_r+0x82>
    7a2e:	68ac      	ldr	r4, [r5, #8]
    7a30:	e7cd      	b.n	79ce <__swbuf_r+0x1e>
    7a32:	4b09      	ldr	r3, [pc, #36]	; (7a58 <__swbuf_r+0xa8>)
    7a34:	429c      	cmp	r4, r3
    7a36:	d1ca      	bne.n	79ce <__swbuf_r+0x1e>
    7a38:	68ec      	ldr	r4, [r5, #12]
    7a3a:	e7c8      	b.n	79ce <__swbuf_r+0x1e>
    7a3c:	0021      	movs	r1, r4
    7a3e:	0028      	movs	r0, r5
    7a40:	f000 f80c 	bl	7a5c <__swsetup_r>
    7a44:	2800      	cmp	r0, #0
    7a46:	d0ca      	beq.n	79de <__swbuf_r+0x2e>
    7a48:	2601      	movs	r6, #1
    7a4a:	4276      	negs	r6, r6
    7a4c:	0030      	movs	r0, r6
    7a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a50:	000099e8 	.word	0x000099e8
    7a54:	00009a08 	.word	0x00009a08
    7a58:	000099c8 	.word	0x000099c8

00007a5c <__swsetup_r>:
    7a5c:	4b36      	ldr	r3, [pc, #216]	; (7b38 <__swsetup_r+0xdc>)
    7a5e:	b570      	push	{r4, r5, r6, lr}
    7a60:	681d      	ldr	r5, [r3, #0]
    7a62:	0006      	movs	r6, r0
    7a64:	000c      	movs	r4, r1
    7a66:	2d00      	cmp	r5, #0
    7a68:	d005      	beq.n	7a76 <__swsetup_r+0x1a>
    7a6a:	69ab      	ldr	r3, [r5, #24]
    7a6c:	2b00      	cmp	r3, #0
    7a6e:	d102      	bne.n	7a76 <__swsetup_r+0x1a>
    7a70:	0028      	movs	r0, r5
    7a72:	f000 f961 	bl	7d38 <__sinit>
    7a76:	4b31      	ldr	r3, [pc, #196]	; (7b3c <__swsetup_r+0xe0>)
    7a78:	429c      	cmp	r4, r3
    7a7a:	d10f      	bne.n	7a9c <__swsetup_r+0x40>
    7a7c:	686c      	ldr	r4, [r5, #4]
    7a7e:	230c      	movs	r3, #12
    7a80:	5ee2      	ldrsh	r2, [r4, r3]
    7a82:	b293      	uxth	r3, r2
    7a84:	0719      	lsls	r1, r3, #28
    7a86:	d42d      	bmi.n	7ae4 <__swsetup_r+0x88>
    7a88:	06d9      	lsls	r1, r3, #27
    7a8a:	d411      	bmi.n	7ab0 <__swsetup_r+0x54>
    7a8c:	2309      	movs	r3, #9
    7a8e:	2001      	movs	r0, #1
    7a90:	6033      	str	r3, [r6, #0]
    7a92:	3337      	adds	r3, #55	; 0x37
    7a94:	4313      	orrs	r3, r2
    7a96:	81a3      	strh	r3, [r4, #12]
    7a98:	4240      	negs	r0, r0
    7a9a:	bd70      	pop	{r4, r5, r6, pc}
    7a9c:	4b28      	ldr	r3, [pc, #160]	; (7b40 <__swsetup_r+0xe4>)
    7a9e:	429c      	cmp	r4, r3
    7aa0:	d101      	bne.n	7aa6 <__swsetup_r+0x4a>
    7aa2:	68ac      	ldr	r4, [r5, #8]
    7aa4:	e7eb      	b.n	7a7e <__swsetup_r+0x22>
    7aa6:	4b27      	ldr	r3, [pc, #156]	; (7b44 <__swsetup_r+0xe8>)
    7aa8:	429c      	cmp	r4, r3
    7aaa:	d1e8      	bne.n	7a7e <__swsetup_r+0x22>
    7aac:	68ec      	ldr	r4, [r5, #12]
    7aae:	e7e6      	b.n	7a7e <__swsetup_r+0x22>
    7ab0:	075b      	lsls	r3, r3, #29
    7ab2:	d513      	bpl.n	7adc <__swsetup_r+0x80>
    7ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7ab6:	2900      	cmp	r1, #0
    7ab8:	d008      	beq.n	7acc <__swsetup_r+0x70>
    7aba:	0023      	movs	r3, r4
    7abc:	3344      	adds	r3, #68	; 0x44
    7abe:	4299      	cmp	r1, r3
    7ac0:	d002      	beq.n	7ac8 <__swsetup_r+0x6c>
    7ac2:	0030      	movs	r0, r6
    7ac4:	f000 fa44 	bl	7f50 <_free_r>
    7ac8:	2300      	movs	r3, #0
    7aca:	6363      	str	r3, [r4, #52]	; 0x34
    7acc:	2224      	movs	r2, #36	; 0x24
    7ace:	89a3      	ldrh	r3, [r4, #12]
    7ad0:	4393      	bics	r3, r2
    7ad2:	81a3      	strh	r3, [r4, #12]
    7ad4:	2300      	movs	r3, #0
    7ad6:	6063      	str	r3, [r4, #4]
    7ad8:	6923      	ldr	r3, [r4, #16]
    7ada:	6023      	str	r3, [r4, #0]
    7adc:	2308      	movs	r3, #8
    7ade:	89a2      	ldrh	r2, [r4, #12]
    7ae0:	4313      	orrs	r3, r2
    7ae2:	81a3      	strh	r3, [r4, #12]
    7ae4:	6923      	ldr	r3, [r4, #16]
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d10b      	bne.n	7b02 <__swsetup_r+0xa6>
    7aea:	21a0      	movs	r1, #160	; 0xa0
    7aec:	2280      	movs	r2, #128	; 0x80
    7aee:	89a3      	ldrh	r3, [r4, #12]
    7af0:	0089      	lsls	r1, r1, #2
    7af2:	0092      	lsls	r2, r2, #2
    7af4:	400b      	ands	r3, r1
    7af6:	4293      	cmp	r3, r2
    7af8:	d003      	beq.n	7b02 <__swsetup_r+0xa6>
    7afa:	0021      	movs	r1, r4
    7afc:	0030      	movs	r0, r6
    7afe:	f000 f9d9 	bl	7eb4 <__smakebuf_r>
    7b02:	2301      	movs	r3, #1
    7b04:	89a2      	ldrh	r2, [r4, #12]
    7b06:	4013      	ands	r3, r2
    7b08:	d011      	beq.n	7b2e <__swsetup_r+0xd2>
    7b0a:	2300      	movs	r3, #0
    7b0c:	60a3      	str	r3, [r4, #8]
    7b0e:	6963      	ldr	r3, [r4, #20]
    7b10:	425b      	negs	r3, r3
    7b12:	61a3      	str	r3, [r4, #24]
    7b14:	2000      	movs	r0, #0
    7b16:	6923      	ldr	r3, [r4, #16]
    7b18:	4283      	cmp	r3, r0
    7b1a:	d1be      	bne.n	7a9a <__swsetup_r+0x3e>
    7b1c:	230c      	movs	r3, #12
    7b1e:	5ee2      	ldrsh	r2, [r4, r3]
    7b20:	0613      	lsls	r3, r2, #24
    7b22:	d5ba      	bpl.n	7a9a <__swsetup_r+0x3e>
    7b24:	2340      	movs	r3, #64	; 0x40
    7b26:	4313      	orrs	r3, r2
    7b28:	81a3      	strh	r3, [r4, #12]
    7b2a:	3801      	subs	r0, #1
    7b2c:	e7b5      	b.n	7a9a <__swsetup_r+0x3e>
    7b2e:	0792      	lsls	r2, r2, #30
    7b30:	d400      	bmi.n	7b34 <__swsetup_r+0xd8>
    7b32:	6963      	ldr	r3, [r4, #20]
    7b34:	60a3      	str	r3, [r4, #8]
    7b36:	e7ed      	b.n	7b14 <__swsetup_r+0xb8>
    7b38:	20000010 	.word	0x20000010
    7b3c:	000099e8 	.word	0x000099e8
    7b40:	00009a08 	.word	0x00009a08
    7b44:	000099c8 	.word	0x000099c8

00007b48 <__sflush_r>:
    7b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7b4a:	898a      	ldrh	r2, [r1, #12]
    7b4c:	0005      	movs	r5, r0
    7b4e:	000c      	movs	r4, r1
    7b50:	0713      	lsls	r3, r2, #28
    7b52:	d460      	bmi.n	7c16 <__sflush_r+0xce>
    7b54:	684b      	ldr	r3, [r1, #4]
    7b56:	2b00      	cmp	r3, #0
    7b58:	dc04      	bgt.n	7b64 <__sflush_r+0x1c>
    7b5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7b5c:	2b00      	cmp	r3, #0
    7b5e:	dc01      	bgt.n	7b64 <__sflush_r+0x1c>
    7b60:	2000      	movs	r0, #0
    7b62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7b64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7b66:	2f00      	cmp	r7, #0
    7b68:	d0fa      	beq.n	7b60 <__sflush_r+0x18>
    7b6a:	2300      	movs	r3, #0
    7b6c:	682e      	ldr	r6, [r5, #0]
    7b6e:	602b      	str	r3, [r5, #0]
    7b70:	2380      	movs	r3, #128	; 0x80
    7b72:	015b      	lsls	r3, r3, #5
    7b74:	401a      	ands	r2, r3
    7b76:	d034      	beq.n	7be2 <__sflush_r+0x9a>
    7b78:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7b7a:	89a3      	ldrh	r3, [r4, #12]
    7b7c:	075b      	lsls	r3, r3, #29
    7b7e:	d506      	bpl.n	7b8e <__sflush_r+0x46>
    7b80:	6863      	ldr	r3, [r4, #4]
    7b82:	1ac0      	subs	r0, r0, r3
    7b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7b86:	2b00      	cmp	r3, #0
    7b88:	d001      	beq.n	7b8e <__sflush_r+0x46>
    7b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7b8c:	1ac0      	subs	r0, r0, r3
    7b8e:	0002      	movs	r2, r0
    7b90:	6a21      	ldr	r1, [r4, #32]
    7b92:	2300      	movs	r3, #0
    7b94:	0028      	movs	r0, r5
    7b96:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7b98:	47b8      	blx	r7
    7b9a:	89a1      	ldrh	r1, [r4, #12]
    7b9c:	1c43      	adds	r3, r0, #1
    7b9e:	d106      	bne.n	7bae <__sflush_r+0x66>
    7ba0:	682b      	ldr	r3, [r5, #0]
    7ba2:	2b1d      	cmp	r3, #29
    7ba4:	d831      	bhi.n	7c0a <__sflush_r+0xc2>
    7ba6:	4a2c      	ldr	r2, [pc, #176]	; (7c58 <__sflush_r+0x110>)
    7ba8:	40da      	lsrs	r2, r3
    7baa:	07d3      	lsls	r3, r2, #31
    7bac:	d52d      	bpl.n	7c0a <__sflush_r+0xc2>
    7bae:	2300      	movs	r3, #0
    7bb0:	6063      	str	r3, [r4, #4]
    7bb2:	6923      	ldr	r3, [r4, #16]
    7bb4:	6023      	str	r3, [r4, #0]
    7bb6:	04cb      	lsls	r3, r1, #19
    7bb8:	d505      	bpl.n	7bc6 <__sflush_r+0x7e>
    7bba:	1c43      	adds	r3, r0, #1
    7bbc:	d102      	bne.n	7bc4 <__sflush_r+0x7c>
    7bbe:	682b      	ldr	r3, [r5, #0]
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	d100      	bne.n	7bc6 <__sflush_r+0x7e>
    7bc4:	6560      	str	r0, [r4, #84]	; 0x54
    7bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7bc8:	602e      	str	r6, [r5, #0]
    7bca:	2900      	cmp	r1, #0
    7bcc:	d0c8      	beq.n	7b60 <__sflush_r+0x18>
    7bce:	0023      	movs	r3, r4
    7bd0:	3344      	adds	r3, #68	; 0x44
    7bd2:	4299      	cmp	r1, r3
    7bd4:	d002      	beq.n	7bdc <__sflush_r+0x94>
    7bd6:	0028      	movs	r0, r5
    7bd8:	f000 f9ba 	bl	7f50 <_free_r>
    7bdc:	2000      	movs	r0, #0
    7bde:	6360      	str	r0, [r4, #52]	; 0x34
    7be0:	e7bf      	b.n	7b62 <__sflush_r+0x1a>
    7be2:	2301      	movs	r3, #1
    7be4:	6a21      	ldr	r1, [r4, #32]
    7be6:	0028      	movs	r0, r5
    7be8:	47b8      	blx	r7
    7bea:	1c43      	adds	r3, r0, #1
    7bec:	d1c5      	bne.n	7b7a <__sflush_r+0x32>
    7bee:	682b      	ldr	r3, [r5, #0]
    7bf0:	2b00      	cmp	r3, #0
    7bf2:	d0c2      	beq.n	7b7a <__sflush_r+0x32>
    7bf4:	2b1d      	cmp	r3, #29
    7bf6:	d001      	beq.n	7bfc <__sflush_r+0xb4>
    7bf8:	2b16      	cmp	r3, #22
    7bfa:	d101      	bne.n	7c00 <__sflush_r+0xb8>
    7bfc:	602e      	str	r6, [r5, #0]
    7bfe:	e7af      	b.n	7b60 <__sflush_r+0x18>
    7c00:	2340      	movs	r3, #64	; 0x40
    7c02:	89a2      	ldrh	r2, [r4, #12]
    7c04:	4313      	orrs	r3, r2
    7c06:	81a3      	strh	r3, [r4, #12]
    7c08:	e7ab      	b.n	7b62 <__sflush_r+0x1a>
    7c0a:	2340      	movs	r3, #64	; 0x40
    7c0c:	430b      	orrs	r3, r1
    7c0e:	2001      	movs	r0, #1
    7c10:	81a3      	strh	r3, [r4, #12]
    7c12:	4240      	negs	r0, r0
    7c14:	e7a5      	b.n	7b62 <__sflush_r+0x1a>
    7c16:	690f      	ldr	r7, [r1, #16]
    7c18:	2f00      	cmp	r7, #0
    7c1a:	d0a1      	beq.n	7b60 <__sflush_r+0x18>
    7c1c:	680b      	ldr	r3, [r1, #0]
    7c1e:	600f      	str	r7, [r1, #0]
    7c20:	1bdb      	subs	r3, r3, r7
    7c22:	9301      	str	r3, [sp, #4]
    7c24:	2300      	movs	r3, #0
    7c26:	0792      	lsls	r2, r2, #30
    7c28:	d100      	bne.n	7c2c <__sflush_r+0xe4>
    7c2a:	694b      	ldr	r3, [r1, #20]
    7c2c:	60a3      	str	r3, [r4, #8]
    7c2e:	9b01      	ldr	r3, [sp, #4]
    7c30:	2b00      	cmp	r3, #0
    7c32:	dc00      	bgt.n	7c36 <__sflush_r+0xee>
    7c34:	e794      	b.n	7b60 <__sflush_r+0x18>
    7c36:	9b01      	ldr	r3, [sp, #4]
    7c38:	003a      	movs	r2, r7
    7c3a:	6a21      	ldr	r1, [r4, #32]
    7c3c:	0028      	movs	r0, r5
    7c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7c40:	47b0      	blx	r6
    7c42:	2800      	cmp	r0, #0
    7c44:	dc03      	bgt.n	7c4e <__sflush_r+0x106>
    7c46:	2340      	movs	r3, #64	; 0x40
    7c48:	89a2      	ldrh	r2, [r4, #12]
    7c4a:	4313      	orrs	r3, r2
    7c4c:	e7df      	b.n	7c0e <__sflush_r+0xc6>
    7c4e:	9b01      	ldr	r3, [sp, #4]
    7c50:	183f      	adds	r7, r7, r0
    7c52:	1a1b      	subs	r3, r3, r0
    7c54:	9301      	str	r3, [sp, #4]
    7c56:	e7ea      	b.n	7c2e <__sflush_r+0xe6>
    7c58:	20400001 	.word	0x20400001

00007c5c <_fflush_r>:
    7c5c:	690b      	ldr	r3, [r1, #16]
    7c5e:	b570      	push	{r4, r5, r6, lr}
    7c60:	0005      	movs	r5, r0
    7c62:	000c      	movs	r4, r1
    7c64:	2b00      	cmp	r3, #0
    7c66:	d101      	bne.n	7c6c <_fflush_r+0x10>
    7c68:	2000      	movs	r0, #0
    7c6a:	bd70      	pop	{r4, r5, r6, pc}
    7c6c:	2800      	cmp	r0, #0
    7c6e:	d004      	beq.n	7c7a <_fflush_r+0x1e>
    7c70:	6983      	ldr	r3, [r0, #24]
    7c72:	2b00      	cmp	r3, #0
    7c74:	d101      	bne.n	7c7a <_fflush_r+0x1e>
    7c76:	f000 f85f 	bl	7d38 <__sinit>
    7c7a:	4b0b      	ldr	r3, [pc, #44]	; (7ca8 <_fflush_r+0x4c>)
    7c7c:	429c      	cmp	r4, r3
    7c7e:	d109      	bne.n	7c94 <_fflush_r+0x38>
    7c80:	686c      	ldr	r4, [r5, #4]
    7c82:	220c      	movs	r2, #12
    7c84:	5ea3      	ldrsh	r3, [r4, r2]
    7c86:	2b00      	cmp	r3, #0
    7c88:	d0ee      	beq.n	7c68 <_fflush_r+0xc>
    7c8a:	0021      	movs	r1, r4
    7c8c:	0028      	movs	r0, r5
    7c8e:	f7ff ff5b 	bl	7b48 <__sflush_r>
    7c92:	e7ea      	b.n	7c6a <_fflush_r+0xe>
    7c94:	4b05      	ldr	r3, [pc, #20]	; (7cac <_fflush_r+0x50>)
    7c96:	429c      	cmp	r4, r3
    7c98:	d101      	bne.n	7c9e <_fflush_r+0x42>
    7c9a:	68ac      	ldr	r4, [r5, #8]
    7c9c:	e7f1      	b.n	7c82 <_fflush_r+0x26>
    7c9e:	4b04      	ldr	r3, [pc, #16]	; (7cb0 <_fflush_r+0x54>)
    7ca0:	429c      	cmp	r4, r3
    7ca2:	d1ee      	bne.n	7c82 <_fflush_r+0x26>
    7ca4:	68ec      	ldr	r4, [r5, #12]
    7ca6:	e7ec      	b.n	7c82 <_fflush_r+0x26>
    7ca8:	000099e8 	.word	0x000099e8
    7cac:	00009a08 	.word	0x00009a08
    7cb0:	000099c8 	.word	0x000099c8

00007cb4 <_cleanup_r>:
    7cb4:	b510      	push	{r4, lr}
    7cb6:	4902      	ldr	r1, [pc, #8]	; (7cc0 <_cleanup_r+0xc>)
    7cb8:	f000 f8b2 	bl	7e20 <_fwalk_reent>
    7cbc:	bd10      	pop	{r4, pc}
    7cbe:	46c0      	nop			; (mov r8, r8)
    7cc0:	00007c5d 	.word	0x00007c5d

00007cc4 <std.isra.0>:
    7cc4:	2300      	movs	r3, #0
    7cc6:	b510      	push	{r4, lr}
    7cc8:	0004      	movs	r4, r0
    7cca:	6003      	str	r3, [r0, #0]
    7ccc:	6043      	str	r3, [r0, #4]
    7cce:	6083      	str	r3, [r0, #8]
    7cd0:	8181      	strh	r1, [r0, #12]
    7cd2:	6643      	str	r3, [r0, #100]	; 0x64
    7cd4:	81c2      	strh	r2, [r0, #14]
    7cd6:	6103      	str	r3, [r0, #16]
    7cd8:	6143      	str	r3, [r0, #20]
    7cda:	6183      	str	r3, [r0, #24]
    7cdc:	0019      	movs	r1, r3
    7cde:	2208      	movs	r2, #8
    7ce0:	305c      	adds	r0, #92	; 0x5c
    7ce2:	f7ff fc9a 	bl	761a <memset>
    7ce6:	4b05      	ldr	r3, [pc, #20]	; (7cfc <std.isra.0+0x38>)
    7ce8:	6224      	str	r4, [r4, #32]
    7cea:	6263      	str	r3, [r4, #36]	; 0x24
    7cec:	4b04      	ldr	r3, [pc, #16]	; (7d00 <std.isra.0+0x3c>)
    7cee:	62a3      	str	r3, [r4, #40]	; 0x28
    7cf0:	4b04      	ldr	r3, [pc, #16]	; (7d04 <std.isra.0+0x40>)
    7cf2:	62e3      	str	r3, [r4, #44]	; 0x2c
    7cf4:	4b04      	ldr	r3, [pc, #16]	; (7d08 <std.isra.0+0x44>)
    7cf6:	6323      	str	r3, [r4, #48]	; 0x30
    7cf8:	bd10      	pop	{r4, pc}
    7cfa:	46c0      	nop			; (mov r8, r8)
    7cfc:	000086c9 	.word	0x000086c9
    7d00:	000086f1 	.word	0x000086f1
    7d04:	00008729 	.word	0x00008729
    7d08:	00008755 	.word	0x00008755

00007d0c <__sfmoreglue>:
    7d0c:	b570      	push	{r4, r5, r6, lr}
    7d0e:	2568      	movs	r5, #104	; 0x68
    7d10:	1e4a      	subs	r2, r1, #1
    7d12:	4355      	muls	r5, r2
    7d14:	000e      	movs	r6, r1
    7d16:	0029      	movs	r1, r5
    7d18:	3174      	adds	r1, #116	; 0x74
    7d1a:	f000 f963 	bl	7fe4 <_malloc_r>
    7d1e:	1e04      	subs	r4, r0, #0
    7d20:	d008      	beq.n	7d34 <__sfmoreglue+0x28>
    7d22:	2100      	movs	r1, #0
    7d24:	002a      	movs	r2, r5
    7d26:	6001      	str	r1, [r0, #0]
    7d28:	6046      	str	r6, [r0, #4]
    7d2a:	300c      	adds	r0, #12
    7d2c:	60a0      	str	r0, [r4, #8]
    7d2e:	3268      	adds	r2, #104	; 0x68
    7d30:	f7ff fc73 	bl	761a <memset>
    7d34:	0020      	movs	r0, r4
    7d36:	bd70      	pop	{r4, r5, r6, pc}

00007d38 <__sinit>:
    7d38:	6983      	ldr	r3, [r0, #24]
    7d3a:	b513      	push	{r0, r1, r4, lr}
    7d3c:	0004      	movs	r4, r0
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d128      	bne.n	7d94 <__sinit+0x5c>
    7d42:	6483      	str	r3, [r0, #72]	; 0x48
    7d44:	64c3      	str	r3, [r0, #76]	; 0x4c
    7d46:	6503      	str	r3, [r0, #80]	; 0x50
    7d48:	4b13      	ldr	r3, [pc, #76]	; (7d98 <__sinit+0x60>)
    7d4a:	4a14      	ldr	r2, [pc, #80]	; (7d9c <__sinit+0x64>)
    7d4c:	681b      	ldr	r3, [r3, #0]
    7d4e:	6282      	str	r2, [r0, #40]	; 0x28
    7d50:	9301      	str	r3, [sp, #4]
    7d52:	4298      	cmp	r0, r3
    7d54:	d101      	bne.n	7d5a <__sinit+0x22>
    7d56:	2301      	movs	r3, #1
    7d58:	6183      	str	r3, [r0, #24]
    7d5a:	0020      	movs	r0, r4
    7d5c:	f000 f820 	bl	7da0 <__sfp>
    7d60:	6060      	str	r0, [r4, #4]
    7d62:	0020      	movs	r0, r4
    7d64:	f000 f81c 	bl	7da0 <__sfp>
    7d68:	60a0      	str	r0, [r4, #8]
    7d6a:	0020      	movs	r0, r4
    7d6c:	f000 f818 	bl	7da0 <__sfp>
    7d70:	2200      	movs	r2, #0
    7d72:	60e0      	str	r0, [r4, #12]
    7d74:	2104      	movs	r1, #4
    7d76:	6860      	ldr	r0, [r4, #4]
    7d78:	f7ff ffa4 	bl	7cc4 <std.isra.0>
    7d7c:	2201      	movs	r2, #1
    7d7e:	2109      	movs	r1, #9
    7d80:	68a0      	ldr	r0, [r4, #8]
    7d82:	f7ff ff9f 	bl	7cc4 <std.isra.0>
    7d86:	2202      	movs	r2, #2
    7d88:	2112      	movs	r1, #18
    7d8a:	68e0      	ldr	r0, [r4, #12]
    7d8c:	f7ff ff9a 	bl	7cc4 <std.isra.0>
    7d90:	2301      	movs	r3, #1
    7d92:	61a3      	str	r3, [r4, #24]
    7d94:	bd13      	pop	{r0, r1, r4, pc}
    7d96:	46c0      	nop			; (mov r8, r8)
    7d98:	000099c4 	.word	0x000099c4
    7d9c:	00007cb5 	.word	0x00007cb5

00007da0 <__sfp>:
    7da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7da2:	4b1e      	ldr	r3, [pc, #120]	; (7e1c <__sfp+0x7c>)
    7da4:	0007      	movs	r7, r0
    7da6:	681e      	ldr	r6, [r3, #0]
    7da8:	69b3      	ldr	r3, [r6, #24]
    7daa:	2b00      	cmp	r3, #0
    7dac:	d102      	bne.n	7db4 <__sfp+0x14>
    7dae:	0030      	movs	r0, r6
    7db0:	f7ff ffc2 	bl	7d38 <__sinit>
    7db4:	3648      	adds	r6, #72	; 0x48
    7db6:	68b4      	ldr	r4, [r6, #8]
    7db8:	6873      	ldr	r3, [r6, #4]
    7dba:	3b01      	subs	r3, #1
    7dbc:	d504      	bpl.n	7dc8 <__sfp+0x28>
    7dbe:	6833      	ldr	r3, [r6, #0]
    7dc0:	2b00      	cmp	r3, #0
    7dc2:	d007      	beq.n	7dd4 <__sfp+0x34>
    7dc4:	6836      	ldr	r6, [r6, #0]
    7dc6:	e7f6      	b.n	7db6 <__sfp+0x16>
    7dc8:	220c      	movs	r2, #12
    7dca:	5ea5      	ldrsh	r5, [r4, r2]
    7dcc:	2d00      	cmp	r5, #0
    7dce:	d00d      	beq.n	7dec <__sfp+0x4c>
    7dd0:	3468      	adds	r4, #104	; 0x68
    7dd2:	e7f2      	b.n	7dba <__sfp+0x1a>
    7dd4:	2104      	movs	r1, #4
    7dd6:	0038      	movs	r0, r7
    7dd8:	f7ff ff98 	bl	7d0c <__sfmoreglue>
    7ddc:	6030      	str	r0, [r6, #0]
    7dde:	2800      	cmp	r0, #0
    7de0:	d1f0      	bne.n	7dc4 <__sfp+0x24>
    7de2:	230c      	movs	r3, #12
    7de4:	0004      	movs	r4, r0
    7de6:	603b      	str	r3, [r7, #0]
    7de8:	0020      	movs	r0, r4
    7dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7dec:	2301      	movs	r3, #1
    7dee:	0020      	movs	r0, r4
    7df0:	425b      	negs	r3, r3
    7df2:	81e3      	strh	r3, [r4, #14]
    7df4:	3302      	adds	r3, #2
    7df6:	81a3      	strh	r3, [r4, #12]
    7df8:	6665      	str	r5, [r4, #100]	; 0x64
    7dfa:	6025      	str	r5, [r4, #0]
    7dfc:	60a5      	str	r5, [r4, #8]
    7dfe:	6065      	str	r5, [r4, #4]
    7e00:	6125      	str	r5, [r4, #16]
    7e02:	6165      	str	r5, [r4, #20]
    7e04:	61a5      	str	r5, [r4, #24]
    7e06:	2208      	movs	r2, #8
    7e08:	0029      	movs	r1, r5
    7e0a:	305c      	adds	r0, #92	; 0x5c
    7e0c:	f7ff fc05 	bl	761a <memset>
    7e10:	6365      	str	r5, [r4, #52]	; 0x34
    7e12:	63a5      	str	r5, [r4, #56]	; 0x38
    7e14:	64a5      	str	r5, [r4, #72]	; 0x48
    7e16:	64e5      	str	r5, [r4, #76]	; 0x4c
    7e18:	e7e6      	b.n	7de8 <__sfp+0x48>
    7e1a:	46c0      	nop			; (mov r8, r8)
    7e1c:	000099c4 	.word	0x000099c4

00007e20 <_fwalk_reent>:
    7e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e22:	0004      	movs	r4, r0
    7e24:	0007      	movs	r7, r0
    7e26:	2600      	movs	r6, #0
    7e28:	9101      	str	r1, [sp, #4]
    7e2a:	3448      	adds	r4, #72	; 0x48
    7e2c:	2c00      	cmp	r4, #0
    7e2e:	d101      	bne.n	7e34 <_fwalk_reent+0x14>
    7e30:	0030      	movs	r0, r6
    7e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e34:	6863      	ldr	r3, [r4, #4]
    7e36:	68a5      	ldr	r5, [r4, #8]
    7e38:	9300      	str	r3, [sp, #0]
    7e3a:	9b00      	ldr	r3, [sp, #0]
    7e3c:	3b01      	subs	r3, #1
    7e3e:	9300      	str	r3, [sp, #0]
    7e40:	d501      	bpl.n	7e46 <_fwalk_reent+0x26>
    7e42:	6824      	ldr	r4, [r4, #0]
    7e44:	e7f2      	b.n	7e2c <_fwalk_reent+0xc>
    7e46:	89ab      	ldrh	r3, [r5, #12]
    7e48:	2b01      	cmp	r3, #1
    7e4a:	d908      	bls.n	7e5e <_fwalk_reent+0x3e>
    7e4c:	220e      	movs	r2, #14
    7e4e:	5eab      	ldrsh	r3, [r5, r2]
    7e50:	3301      	adds	r3, #1
    7e52:	d004      	beq.n	7e5e <_fwalk_reent+0x3e>
    7e54:	0029      	movs	r1, r5
    7e56:	0038      	movs	r0, r7
    7e58:	9b01      	ldr	r3, [sp, #4]
    7e5a:	4798      	blx	r3
    7e5c:	4306      	orrs	r6, r0
    7e5e:	3568      	adds	r5, #104	; 0x68
    7e60:	e7eb      	b.n	7e3a <_fwalk_reent+0x1a>
	...

00007e64 <__swhatbuf_r>:
    7e64:	b570      	push	{r4, r5, r6, lr}
    7e66:	000e      	movs	r6, r1
    7e68:	001d      	movs	r5, r3
    7e6a:	230e      	movs	r3, #14
    7e6c:	5ec9      	ldrsh	r1, [r1, r3]
    7e6e:	b090      	sub	sp, #64	; 0x40
    7e70:	0014      	movs	r4, r2
    7e72:	2900      	cmp	r1, #0
    7e74:	da07      	bge.n	7e86 <__swhatbuf_r+0x22>
    7e76:	2300      	movs	r3, #0
    7e78:	602b      	str	r3, [r5, #0]
    7e7a:	89b3      	ldrh	r3, [r6, #12]
    7e7c:	061b      	lsls	r3, r3, #24
    7e7e:	d411      	bmi.n	7ea4 <__swhatbuf_r+0x40>
    7e80:	2380      	movs	r3, #128	; 0x80
    7e82:	00db      	lsls	r3, r3, #3
    7e84:	e00f      	b.n	7ea6 <__swhatbuf_r+0x42>
    7e86:	aa01      	add	r2, sp, #4
    7e88:	f000 fc90 	bl	87ac <_fstat_r>
    7e8c:	2800      	cmp	r0, #0
    7e8e:	dbf2      	blt.n	7e76 <__swhatbuf_r+0x12>
    7e90:	22f0      	movs	r2, #240	; 0xf0
    7e92:	9b02      	ldr	r3, [sp, #8]
    7e94:	0212      	lsls	r2, r2, #8
    7e96:	4013      	ands	r3, r2
    7e98:	4a05      	ldr	r2, [pc, #20]	; (7eb0 <__swhatbuf_r+0x4c>)
    7e9a:	189b      	adds	r3, r3, r2
    7e9c:	425a      	negs	r2, r3
    7e9e:	4153      	adcs	r3, r2
    7ea0:	602b      	str	r3, [r5, #0]
    7ea2:	e7ed      	b.n	7e80 <__swhatbuf_r+0x1c>
    7ea4:	2340      	movs	r3, #64	; 0x40
    7ea6:	2000      	movs	r0, #0
    7ea8:	6023      	str	r3, [r4, #0]
    7eaa:	b010      	add	sp, #64	; 0x40
    7eac:	bd70      	pop	{r4, r5, r6, pc}
    7eae:	46c0      	nop			; (mov r8, r8)
    7eb0:	ffffe000 	.word	0xffffe000

00007eb4 <__smakebuf_r>:
    7eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7eb6:	2602      	movs	r6, #2
    7eb8:	898b      	ldrh	r3, [r1, #12]
    7eba:	0005      	movs	r5, r0
    7ebc:	000c      	movs	r4, r1
    7ebe:	4233      	tst	r3, r6
    7ec0:	d006      	beq.n	7ed0 <__smakebuf_r+0x1c>
    7ec2:	0023      	movs	r3, r4
    7ec4:	3347      	adds	r3, #71	; 0x47
    7ec6:	6023      	str	r3, [r4, #0]
    7ec8:	6123      	str	r3, [r4, #16]
    7eca:	2301      	movs	r3, #1
    7ecc:	6163      	str	r3, [r4, #20]
    7ece:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7ed0:	ab01      	add	r3, sp, #4
    7ed2:	466a      	mov	r2, sp
    7ed4:	f7ff ffc6 	bl	7e64 <__swhatbuf_r>
    7ed8:	9900      	ldr	r1, [sp, #0]
    7eda:	0007      	movs	r7, r0
    7edc:	0028      	movs	r0, r5
    7ede:	f000 f881 	bl	7fe4 <_malloc_r>
    7ee2:	2800      	cmp	r0, #0
    7ee4:	d108      	bne.n	7ef8 <__smakebuf_r+0x44>
    7ee6:	220c      	movs	r2, #12
    7ee8:	5ea3      	ldrsh	r3, [r4, r2]
    7eea:	059a      	lsls	r2, r3, #22
    7eec:	d4ef      	bmi.n	7ece <__smakebuf_r+0x1a>
    7eee:	2203      	movs	r2, #3
    7ef0:	4393      	bics	r3, r2
    7ef2:	431e      	orrs	r6, r3
    7ef4:	81a6      	strh	r6, [r4, #12]
    7ef6:	e7e4      	b.n	7ec2 <__smakebuf_r+0xe>
    7ef8:	4b0f      	ldr	r3, [pc, #60]	; (7f38 <__smakebuf_r+0x84>)
    7efa:	62ab      	str	r3, [r5, #40]	; 0x28
    7efc:	2380      	movs	r3, #128	; 0x80
    7efe:	89a2      	ldrh	r2, [r4, #12]
    7f00:	6020      	str	r0, [r4, #0]
    7f02:	4313      	orrs	r3, r2
    7f04:	81a3      	strh	r3, [r4, #12]
    7f06:	9b00      	ldr	r3, [sp, #0]
    7f08:	6120      	str	r0, [r4, #16]
    7f0a:	6163      	str	r3, [r4, #20]
    7f0c:	9b01      	ldr	r3, [sp, #4]
    7f0e:	2b00      	cmp	r3, #0
    7f10:	d00d      	beq.n	7f2e <__smakebuf_r+0x7a>
    7f12:	230e      	movs	r3, #14
    7f14:	5ee1      	ldrsh	r1, [r4, r3]
    7f16:	0028      	movs	r0, r5
    7f18:	f000 fc5a 	bl	87d0 <_isatty_r>
    7f1c:	2800      	cmp	r0, #0
    7f1e:	d006      	beq.n	7f2e <__smakebuf_r+0x7a>
    7f20:	2203      	movs	r2, #3
    7f22:	89a3      	ldrh	r3, [r4, #12]
    7f24:	4393      	bics	r3, r2
    7f26:	001a      	movs	r2, r3
    7f28:	2301      	movs	r3, #1
    7f2a:	4313      	orrs	r3, r2
    7f2c:	81a3      	strh	r3, [r4, #12]
    7f2e:	89a0      	ldrh	r0, [r4, #12]
    7f30:	4338      	orrs	r0, r7
    7f32:	81a0      	strh	r0, [r4, #12]
    7f34:	e7cb      	b.n	7ece <__smakebuf_r+0x1a>
    7f36:	46c0      	nop			; (mov r8, r8)
    7f38:	00007cb5 	.word	0x00007cb5

00007f3c <malloc>:
    7f3c:	b510      	push	{r4, lr}
    7f3e:	4b03      	ldr	r3, [pc, #12]	; (7f4c <malloc+0x10>)
    7f40:	0001      	movs	r1, r0
    7f42:	6818      	ldr	r0, [r3, #0]
    7f44:	f000 f84e 	bl	7fe4 <_malloc_r>
    7f48:	bd10      	pop	{r4, pc}
    7f4a:	46c0      	nop			; (mov r8, r8)
    7f4c:	20000010 	.word	0x20000010

00007f50 <_free_r>:
    7f50:	b570      	push	{r4, r5, r6, lr}
    7f52:	0005      	movs	r5, r0
    7f54:	2900      	cmp	r1, #0
    7f56:	d010      	beq.n	7f7a <_free_r+0x2a>
    7f58:	1f0c      	subs	r4, r1, #4
    7f5a:	6823      	ldr	r3, [r4, #0]
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	da00      	bge.n	7f62 <_free_r+0x12>
    7f60:	18e4      	adds	r4, r4, r3
    7f62:	0028      	movs	r0, r5
    7f64:	f000 fc65 	bl	8832 <__malloc_lock>
    7f68:	4a1d      	ldr	r2, [pc, #116]	; (7fe0 <_free_r+0x90>)
    7f6a:	6813      	ldr	r3, [r2, #0]
    7f6c:	2b00      	cmp	r3, #0
    7f6e:	d105      	bne.n	7f7c <_free_r+0x2c>
    7f70:	6063      	str	r3, [r4, #4]
    7f72:	6014      	str	r4, [r2, #0]
    7f74:	0028      	movs	r0, r5
    7f76:	f000 fc5d 	bl	8834 <__malloc_unlock>
    7f7a:	bd70      	pop	{r4, r5, r6, pc}
    7f7c:	42a3      	cmp	r3, r4
    7f7e:	d909      	bls.n	7f94 <_free_r+0x44>
    7f80:	6821      	ldr	r1, [r4, #0]
    7f82:	1860      	adds	r0, r4, r1
    7f84:	4283      	cmp	r3, r0
    7f86:	d1f3      	bne.n	7f70 <_free_r+0x20>
    7f88:	6818      	ldr	r0, [r3, #0]
    7f8a:	685b      	ldr	r3, [r3, #4]
    7f8c:	1841      	adds	r1, r0, r1
    7f8e:	6021      	str	r1, [r4, #0]
    7f90:	e7ee      	b.n	7f70 <_free_r+0x20>
    7f92:	0013      	movs	r3, r2
    7f94:	685a      	ldr	r2, [r3, #4]
    7f96:	2a00      	cmp	r2, #0
    7f98:	d001      	beq.n	7f9e <_free_r+0x4e>
    7f9a:	42a2      	cmp	r2, r4
    7f9c:	d9f9      	bls.n	7f92 <_free_r+0x42>
    7f9e:	6819      	ldr	r1, [r3, #0]
    7fa0:	1858      	adds	r0, r3, r1
    7fa2:	42a0      	cmp	r0, r4
    7fa4:	d10b      	bne.n	7fbe <_free_r+0x6e>
    7fa6:	6820      	ldr	r0, [r4, #0]
    7fa8:	1809      	adds	r1, r1, r0
    7faa:	1858      	adds	r0, r3, r1
    7fac:	6019      	str	r1, [r3, #0]
    7fae:	4282      	cmp	r2, r0
    7fb0:	d1e0      	bne.n	7f74 <_free_r+0x24>
    7fb2:	6810      	ldr	r0, [r2, #0]
    7fb4:	6852      	ldr	r2, [r2, #4]
    7fb6:	1841      	adds	r1, r0, r1
    7fb8:	6019      	str	r1, [r3, #0]
    7fba:	605a      	str	r2, [r3, #4]
    7fbc:	e7da      	b.n	7f74 <_free_r+0x24>
    7fbe:	42a0      	cmp	r0, r4
    7fc0:	d902      	bls.n	7fc8 <_free_r+0x78>
    7fc2:	230c      	movs	r3, #12
    7fc4:	602b      	str	r3, [r5, #0]
    7fc6:	e7d5      	b.n	7f74 <_free_r+0x24>
    7fc8:	6821      	ldr	r1, [r4, #0]
    7fca:	1860      	adds	r0, r4, r1
    7fcc:	4282      	cmp	r2, r0
    7fce:	d103      	bne.n	7fd8 <_free_r+0x88>
    7fd0:	6810      	ldr	r0, [r2, #0]
    7fd2:	6852      	ldr	r2, [r2, #4]
    7fd4:	1841      	adds	r1, r0, r1
    7fd6:	6021      	str	r1, [r4, #0]
    7fd8:	6062      	str	r2, [r4, #4]
    7fda:	605c      	str	r4, [r3, #4]
    7fdc:	e7ca      	b.n	7f74 <_free_r+0x24>
    7fde:	46c0      	nop			; (mov r8, r8)
    7fe0:	20000980 	.word	0x20000980

00007fe4 <_malloc_r>:
    7fe4:	2303      	movs	r3, #3
    7fe6:	b570      	push	{r4, r5, r6, lr}
    7fe8:	1ccd      	adds	r5, r1, #3
    7fea:	439d      	bics	r5, r3
    7fec:	3508      	adds	r5, #8
    7fee:	0006      	movs	r6, r0
    7ff0:	2d0c      	cmp	r5, #12
    7ff2:	d21e      	bcs.n	8032 <_malloc_r+0x4e>
    7ff4:	250c      	movs	r5, #12
    7ff6:	42a9      	cmp	r1, r5
    7ff8:	d81d      	bhi.n	8036 <_malloc_r+0x52>
    7ffa:	0030      	movs	r0, r6
    7ffc:	f000 fc19 	bl	8832 <__malloc_lock>
    8000:	4a25      	ldr	r2, [pc, #148]	; (8098 <_malloc_r+0xb4>)
    8002:	6814      	ldr	r4, [r2, #0]
    8004:	0021      	movs	r1, r4
    8006:	2900      	cmp	r1, #0
    8008:	d119      	bne.n	803e <_malloc_r+0x5a>
    800a:	4c24      	ldr	r4, [pc, #144]	; (809c <_malloc_r+0xb8>)
    800c:	6823      	ldr	r3, [r4, #0]
    800e:	2b00      	cmp	r3, #0
    8010:	d103      	bne.n	801a <_malloc_r+0x36>
    8012:	0030      	movs	r0, r6
    8014:	f000 fb46 	bl	86a4 <_sbrk_r>
    8018:	6020      	str	r0, [r4, #0]
    801a:	0029      	movs	r1, r5
    801c:	0030      	movs	r0, r6
    801e:	f000 fb41 	bl	86a4 <_sbrk_r>
    8022:	1c43      	adds	r3, r0, #1
    8024:	d12c      	bne.n	8080 <_malloc_r+0x9c>
    8026:	230c      	movs	r3, #12
    8028:	0030      	movs	r0, r6
    802a:	6033      	str	r3, [r6, #0]
    802c:	f000 fc02 	bl	8834 <__malloc_unlock>
    8030:	e003      	b.n	803a <_malloc_r+0x56>
    8032:	2d00      	cmp	r5, #0
    8034:	dadf      	bge.n	7ff6 <_malloc_r+0x12>
    8036:	230c      	movs	r3, #12
    8038:	6033      	str	r3, [r6, #0]
    803a:	2000      	movs	r0, #0
    803c:	bd70      	pop	{r4, r5, r6, pc}
    803e:	680b      	ldr	r3, [r1, #0]
    8040:	1b5b      	subs	r3, r3, r5
    8042:	d41a      	bmi.n	807a <_malloc_r+0x96>
    8044:	2b0b      	cmp	r3, #11
    8046:	d903      	bls.n	8050 <_malloc_r+0x6c>
    8048:	600b      	str	r3, [r1, #0]
    804a:	18cc      	adds	r4, r1, r3
    804c:	6025      	str	r5, [r4, #0]
    804e:	e003      	b.n	8058 <_malloc_r+0x74>
    8050:	428c      	cmp	r4, r1
    8052:	d10e      	bne.n	8072 <_malloc_r+0x8e>
    8054:	6863      	ldr	r3, [r4, #4]
    8056:	6013      	str	r3, [r2, #0]
    8058:	0030      	movs	r0, r6
    805a:	f000 fbeb 	bl	8834 <__malloc_unlock>
    805e:	0020      	movs	r0, r4
    8060:	2207      	movs	r2, #7
    8062:	300b      	adds	r0, #11
    8064:	1d23      	adds	r3, r4, #4
    8066:	4390      	bics	r0, r2
    8068:	1ac3      	subs	r3, r0, r3
    806a:	d0e7      	beq.n	803c <_malloc_r+0x58>
    806c:	425a      	negs	r2, r3
    806e:	50e2      	str	r2, [r4, r3]
    8070:	e7e4      	b.n	803c <_malloc_r+0x58>
    8072:	684b      	ldr	r3, [r1, #4]
    8074:	6063      	str	r3, [r4, #4]
    8076:	000c      	movs	r4, r1
    8078:	e7ee      	b.n	8058 <_malloc_r+0x74>
    807a:	000c      	movs	r4, r1
    807c:	6849      	ldr	r1, [r1, #4]
    807e:	e7c2      	b.n	8006 <_malloc_r+0x22>
    8080:	2303      	movs	r3, #3
    8082:	1cc4      	adds	r4, r0, #3
    8084:	439c      	bics	r4, r3
    8086:	42a0      	cmp	r0, r4
    8088:	d0e0      	beq.n	804c <_malloc_r+0x68>
    808a:	1a21      	subs	r1, r4, r0
    808c:	0030      	movs	r0, r6
    808e:	f000 fb09 	bl	86a4 <_sbrk_r>
    8092:	1c43      	adds	r3, r0, #1
    8094:	d1da      	bne.n	804c <_malloc_r+0x68>
    8096:	e7c6      	b.n	8026 <_malloc_r+0x42>
    8098:	20000980 	.word	0x20000980
    809c:	20000984 	.word	0x20000984

000080a0 <__sfputc_r>:
    80a0:	6893      	ldr	r3, [r2, #8]
    80a2:	b510      	push	{r4, lr}
    80a4:	3b01      	subs	r3, #1
    80a6:	6093      	str	r3, [r2, #8]
    80a8:	2b00      	cmp	r3, #0
    80aa:	da05      	bge.n	80b8 <__sfputc_r+0x18>
    80ac:	6994      	ldr	r4, [r2, #24]
    80ae:	42a3      	cmp	r3, r4
    80b0:	db08      	blt.n	80c4 <__sfputc_r+0x24>
    80b2:	b2cb      	uxtb	r3, r1
    80b4:	2b0a      	cmp	r3, #10
    80b6:	d005      	beq.n	80c4 <__sfputc_r+0x24>
    80b8:	6813      	ldr	r3, [r2, #0]
    80ba:	1c58      	adds	r0, r3, #1
    80bc:	6010      	str	r0, [r2, #0]
    80be:	7019      	strb	r1, [r3, #0]
    80c0:	b2c8      	uxtb	r0, r1
    80c2:	bd10      	pop	{r4, pc}
    80c4:	f7ff fc74 	bl	79b0 <__swbuf_r>
    80c8:	e7fb      	b.n	80c2 <__sfputc_r+0x22>

000080ca <__sfputs_r>:
    80ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80cc:	0006      	movs	r6, r0
    80ce:	000f      	movs	r7, r1
    80d0:	0014      	movs	r4, r2
    80d2:	18d5      	adds	r5, r2, r3
    80d4:	42ac      	cmp	r4, r5
    80d6:	d101      	bne.n	80dc <__sfputs_r+0x12>
    80d8:	2000      	movs	r0, #0
    80da:	e007      	b.n	80ec <__sfputs_r+0x22>
    80dc:	7821      	ldrb	r1, [r4, #0]
    80de:	003a      	movs	r2, r7
    80e0:	0030      	movs	r0, r6
    80e2:	f7ff ffdd 	bl	80a0 <__sfputc_r>
    80e6:	3401      	adds	r4, #1
    80e8:	1c43      	adds	r3, r0, #1
    80ea:	d1f3      	bne.n	80d4 <__sfputs_r+0xa>
    80ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000080f0 <_vfiprintf_r>:
    80f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80f2:	b09f      	sub	sp, #124	; 0x7c
    80f4:	0006      	movs	r6, r0
    80f6:	000f      	movs	r7, r1
    80f8:	0014      	movs	r4, r2
    80fa:	9305      	str	r3, [sp, #20]
    80fc:	2800      	cmp	r0, #0
    80fe:	d004      	beq.n	810a <_vfiprintf_r+0x1a>
    8100:	6983      	ldr	r3, [r0, #24]
    8102:	2b00      	cmp	r3, #0
    8104:	d101      	bne.n	810a <_vfiprintf_r+0x1a>
    8106:	f7ff fe17 	bl	7d38 <__sinit>
    810a:	4b7f      	ldr	r3, [pc, #508]	; (8308 <_vfiprintf_r+0x218>)
    810c:	429f      	cmp	r7, r3
    810e:	d15c      	bne.n	81ca <_vfiprintf_r+0xda>
    8110:	6877      	ldr	r7, [r6, #4]
    8112:	89bb      	ldrh	r3, [r7, #12]
    8114:	071b      	lsls	r3, r3, #28
    8116:	d562      	bpl.n	81de <_vfiprintf_r+0xee>
    8118:	693b      	ldr	r3, [r7, #16]
    811a:	2b00      	cmp	r3, #0
    811c:	d05f      	beq.n	81de <_vfiprintf_r+0xee>
    811e:	2300      	movs	r3, #0
    8120:	ad06      	add	r5, sp, #24
    8122:	616b      	str	r3, [r5, #20]
    8124:	3320      	adds	r3, #32
    8126:	766b      	strb	r3, [r5, #25]
    8128:	3310      	adds	r3, #16
    812a:	76ab      	strb	r3, [r5, #26]
    812c:	9402      	str	r4, [sp, #8]
    812e:	9c02      	ldr	r4, [sp, #8]
    8130:	7823      	ldrb	r3, [r4, #0]
    8132:	2b00      	cmp	r3, #0
    8134:	d15d      	bne.n	81f2 <_vfiprintf_r+0x102>
    8136:	9b02      	ldr	r3, [sp, #8]
    8138:	1ae3      	subs	r3, r4, r3
    813a:	9304      	str	r3, [sp, #16]
    813c:	d00d      	beq.n	815a <_vfiprintf_r+0x6a>
    813e:	9b04      	ldr	r3, [sp, #16]
    8140:	9a02      	ldr	r2, [sp, #8]
    8142:	0039      	movs	r1, r7
    8144:	0030      	movs	r0, r6
    8146:	f7ff ffc0 	bl	80ca <__sfputs_r>
    814a:	1c43      	adds	r3, r0, #1
    814c:	d100      	bne.n	8150 <_vfiprintf_r+0x60>
    814e:	e0cc      	b.n	82ea <_vfiprintf_r+0x1fa>
    8150:	696a      	ldr	r2, [r5, #20]
    8152:	9b04      	ldr	r3, [sp, #16]
    8154:	4694      	mov	ip, r2
    8156:	4463      	add	r3, ip
    8158:	616b      	str	r3, [r5, #20]
    815a:	7823      	ldrb	r3, [r4, #0]
    815c:	2b00      	cmp	r3, #0
    815e:	d100      	bne.n	8162 <_vfiprintf_r+0x72>
    8160:	e0c3      	b.n	82ea <_vfiprintf_r+0x1fa>
    8162:	2201      	movs	r2, #1
    8164:	2300      	movs	r3, #0
    8166:	4252      	negs	r2, r2
    8168:	606a      	str	r2, [r5, #4]
    816a:	a902      	add	r1, sp, #8
    816c:	3254      	adds	r2, #84	; 0x54
    816e:	1852      	adds	r2, r2, r1
    8170:	3401      	adds	r4, #1
    8172:	602b      	str	r3, [r5, #0]
    8174:	60eb      	str	r3, [r5, #12]
    8176:	60ab      	str	r3, [r5, #8]
    8178:	7013      	strb	r3, [r2, #0]
    817a:	65ab      	str	r3, [r5, #88]	; 0x58
    817c:	7821      	ldrb	r1, [r4, #0]
    817e:	2205      	movs	r2, #5
    8180:	4862      	ldr	r0, [pc, #392]	; (830c <_vfiprintf_r+0x21c>)
    8182:	f000 fb4b 	bl	881c <memchr>
    8186:	1c63      	adds	r3, r4, #1
    8188:	469c      	mov	ip, r3
    818a:	2800      	cmp	r0, #0
    818c:	d135      	bne.n	81fa <_vfiprintf_r+0x10a>
    818e:	6829      	ldr	r1, [r5, #0]
    8190:	06cb      	lsls	r3, r1, #27
    8192:	d504      	bpl.n	819e <_vfiprintf_r+0xae>
    8194:	2353      	movs	r3, #83	; 0x53
    8196:	aa02      	add	r2, sp, #8
    8198:	3020      	adds	r0, #32
    819a:	189b      	adds	r3, r3, r2
    819c:	7018      	strb	r0, [r3, #0]
    819e:	070b      	lsls	r3, r1, #28
    81a0:	d504      	bpl.n	81ac <_vfiprintf_r+0xbc>
    81a2:	2353      	movs	r3, #83	; 0x53
    81a4:	202b      	movs	r0, #43	; 0x2b
    81a6:	aa02      	add	r2, sp, #8
    81a8:	189b      	adds	r3, r3, r2
    81aa:	7018      	strb	r0, [r3, #0]
    81ac:	7823      	ldrb	r3, [r4, #0]
    81ae:	2b2a      	cmp	r3, #42	; 0x2a
    81b0:	d02c      	beq.n	820c <_vfiprintf_r+0x11c>
    81b2:	2000      	movs	r0, #0
    81b4:	210a      	movs	r1, #10
    81b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81b8:	7822      	ldrb	r2, [r4, #0]
    81ba:	3a30      	subs	r2, #48	; 0x30
    81bc:	2a09      	cmp	r2, #9
    81be:	d800      	bhi.n	81c2 <_vfiprintf_r+0xd2>
    81c0:	e06b      	b.n	829a <_vfiprintf_r+0x1aa>
    81c2:	2800      	cmp	r0, #0
    81c4:	d02a      	beq.n	821c <_vfiprintf_r+0x12c>
    81c6:	9309      	str	r3, [sp, #36]	; 0x24
    81c8:	e028      	b.n	821c <_vfiprintf_r+0x12c>
    81ca:	4b51      	ldr	r3, [pc, #324]	; (8310 <_vfiprintf_r+0x220>)
    81cc:	429f      	cmp	r7, r3
    81ce:	d101      	bne.n	81d4 <_vfiprintf_r+0xe4>
    81d0:	68b7      	ldr	r7, [r6, #8]
    81d2:	e79e      	b.n	8112 <_vfiprintf_r+0x22>
    81d4:	4b4f      	ldr	r3, [pc, #316]	; (8314 <_vfiprintf_r+0x224>)
    81d6:	429f      	cmp	r7, r3
    81d8:	d19b      	bne.n	8112 <_vfiprintf_r+0x22>
    81da:	68f7      	ldr	r7, [r6, #12]
    81dc:	e799      	b.n	8112 <_vfiprintf_r+0x22>
    81de:	0039      	movs	r1, r7
    81e0:	0030      	movs	r0, r6
    81e2:	f7ff fc3b 	bl	7a5c <__swsetup_r>
    81e6:	2800      	cmp	r0, #0
    81e8:	d099      	beq.n	811e <_vfiprintf_r+0x2e>
    81ea:	2001      	movs	r0, #1
    81ec:	4240      	negs	r0, r0
    81ee:	b01f      	add	sp, #124	; 0x7c
    81f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81f2:	2b25      	cmp	r3, #37	; 0x25
    81f4:	d09f      	beq.n	8136 <_vfiprintf_r+0x46>
    81f6:	3401      	adds	r4, #1
    81f8:	e79a      	b.n	8130 <_vfiprintf_r+0x40>
    81fa:	4b44      	ldr	r3, [pc, #272]	; (830c <_vfiprintf_r+0x21c>)
    81fc:	6829      	ldr	r1, [r5, #0]
    81fe:	1ac0      	subs	r0, r0, r3
    8200:	2301      	movs	r3, #1
    8202:	4083      	lsls	r3, r0
    8204:	430b      	orrs	r3, r1
    8206:	602b      	str	r3, [r5, #0]
    8208:	4664      	mov	r4, ip
    820a:	e7b7      	b.n	817c <_vfiprintf_r+0x8c>
    820c:	9b05      	ldr	r3, [sp, #20]
    820e:	1d18      	adds	r0, r3, #4
    8210:	681b      	ldr	r3, [r3, #0]
    8212:	9005      	str	r0, [sp, #20]
    8214:	2b00      	cmp	r3, #0
    8216:	db3a      	blt.n	828e <_vfiprintf_r+0x19e>
    8218:	9309      	str	r3, [sp, #36]	; 0x24
    821a:	4664      	mov	r4, ip
    821c:	7823      	ldrb	r3, [r4, #0]
    821e:	2b2e      	cmp	r3, #46	; 0x2e
    8220:	d10b      	bne.n	823a <_vfiprintf_r+0x14a>
    8222:	7863      	ldrb	r3, [r4, #1]
    8224:	1c62      	adds	r2, r4, #1
    8226:	2b2a      	cmp	r3, #42	; 0x2a
    8228:	d13f      	bne.n	82aa <_vfiprintf_r+0x1ba>
    822a:	9b05      	ldr	r3, [sp, #20]
    822c:	3402      	adds	r4, #2
    822e:	1d1a      	adds	r2, r3, #4
    8230:	681b      	ldr	r3, [r3, #0]
    8232:	9205      	str	r2, [sp, #20]
    8234:	2b00      	cmp	r3, #0
    8236:	db35      	blt.n	82a4 <_vfiprintf_r+0x1b4>
    8238:	9307      	str	r3, [sp, #28]
    823a:	7821      	ldrb	r1, [r4, #0]
    823c:	2203      	movs	r2, #3
    823e:	4836      	ldr	r0, [pc, #216]	; (8318 <_vfiprintf_r+0x228>)
    8240:	f000 faec 	bl	881c <memchr>
    8244:	2800      	cmp	r0, #0
    8246:	d007      	beq.n	8258 <_vfiprintf_r+0x168>
    8248:	4b33      	ldr	r3, [pc, #204]	; (8318 <_vfiprintf_r+0x228>)
    824a:	682a      	ldr	r2, [r5, #0]
    824c:	1ac0      	subs	r0, r0, r3
    824e:	2340      	movs	r3, #64	; 0x40
    8250:	4083      	lsls	r3, r0
    8252:	4313      	orrs	r3, r2
    8254:	602b      	str	r3, [r5, #0]
    8256:	3401      	adds	r4, #1
    8258:	7821      	ldrb	r1, [r4, #0]
    825a:	1c63      	adds	r3, r4, #1
    825c:	2206      	movs	r2, #6
    825e:	482f      	ldr	r0, [pc, #188]	; (831c <_vfiprintf_r+0x22c>)
    8260:	9302      	str	r3, [sp, #8]
    8262:	7629      	strb	r1, [r5, #24]
    8264:	f000 fada 	bl	881c <memchr>
    8268:	2800      	cmp	r0, #0
    826a:	d044      	beq.n	82f6 <_vfiprintf_r+0x206>
    826c:	4b2c      	ldr	r3, [pc, #176]	; (8320 <_vfiprintf_r+0x230>)
    826e:	2b00      	cmp	r3, #0
    8270:	d12f      	bne.n	82d2 <_vfiprintf_r+0x1e2>
    8272:	6829      	ldr	r1, [r5, #0]
    8274:	9b05      	ldr	r3, [sp, #20]
    8276:	2207      	movs	r2, #7
    8278:	05c9      	lsls	r1, r1, #23
    827a:	d528      	bpl.n	82ce <_vfiprintf_r+0x1de>
    827c:	189b      	adds	r3, r3, r2
    827e:	4393      	bics	r3, r2
    8280:	3308      	adds	r3, #8
    8282:	9305      	str	r3, [sp, #20]
    8284:	696b      	ldr	r3, [r5, #20]
    8286:	9a03      	ldr	r2, [sp, #12]
    8288:	189b      	adds	r3, r3, r2
    828a:	616b      	str	r3, [r5, #20]
    828c:	e74f      	b.n	812e <_vfiprintf_r+0x3e>
    828e:	425b      	negs	r3, r3
    8290:	60eb      	str	r3, [r5, #12]
    8292:	2302      	movs	r3, #2
    8294:	430b      	orrs	r3, r1
    8296:	602b      	str	r3, [r5, #0]
    8298:	e7bf      	b.n	821a <_vfiprintf_r+0x12a>
    829a:	434b      	muls	r3, r1
    829c:	3401      	adds	r4, #1
    829e:	189b      	adds	r3, r3, r2
    82a0:	2001      	movs	r0, #1
    82a2:	e789      	b.n	81b8 <_vfiprintf_r+0xc8>
    82a4:	2301      	movs	r3, #1
    82a6:	425b      	negs	r3, r3
    82a8:	e7c6      	b.n	8238 <_vfiprintf_r+0x148>
    82aa:	2300      	movs	r3, #0
    82ac:	0014      	movs	r4, r2
    82ae:	200a      	movs	r0, #10
    82b0:	001a      	movs	r2, r3
    82b2:	606b      	str	r3, [r5, #4]
    82b4:	7821      	ldrb	r1, [r4, #0]
    82b6:	3930      	subs	r1, #48	; 0x30
    82b8:	2909      	cmp	r1, #9
    82ba:	d903      	bls.n	82c4 <_vfiprintf_r+0x1d4>
    82bc:	2b00      	cmp	r3, #0
    82be:	d0bc      	beq.n	823a <_vfiprintf_r+0x14a>
    82c0:	9207      	str	r2, [sp, #28]
    82c2:	e7ba      	b.n	823a <_vfiprintf_r+0x14a>
    82c4:	4342      	muls	r2, r0
    82c6:	3401      	adds	r4, #1
    82c8:	1852      	adds	r2, r2, r1
    82ca:	2301      	movs	r3, #1
    82cc:	e7f2      	b.n	82b4 <_vfiprintf_r+0x1c4>
    82ce:	3307      	adds	r3, #7
    82d0:	e7d5      	b.n	827e <_vfiprintf_r+0x18e>
    82d2:	ab05      	add	r3, sp, #20
    82d4:	9300      	str	r3, [sp, #0]
    82d6:	003a      	movs	r2, r7
    82d8:	4b12      	ldr	r3, [pc, #72]	; (8324 <_vfiprintf_r+0x234>)
    82da:	0029      	movs	r1, r5
    82dc:	0030      	movs	r0, r6
    82de:	e000      	b.n	82e2 <_vfiprintf_r+0x1f2>
    82e0:	bf00      	nop
    82e2:	9003      	str	r0, [sp, #12]
    82e4:	9b03      	ldr	r3, [sp, #12]
    82e6:	3301      	adds	r3, #1
    82e8:	d1cc      	bne.n	8284 <_vfiprintf_r+0x194>
    82ea:	89bb      	ldrh	r3, [r7, #12]
    82ec:	065b      	lsls	r3, r3, #25
    82ee:	d500      	bpl.n	82f2 <_vfiprintf_r+0x202>
    82f0:	e77b      	b.n	81ea <_vfiprintf_r+0xfa>
    82f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    82f4:	e77b      	b.n	81ee <_vfiprintf_r+0xfe>
    82f6:	ab05      	add	r3, sp, #20
    82f8:	9300      	str	r3, [sp, #0]
    82fa:	003a      	movs	r2, r7
    82fc:	4b09      	ldr	r3, [pc, #36]	; (8324 <_vfiprintf_r+0x234>)
    82fe:	0029      	movs	r1, r5
    8300:	0030      	movs	r0, r6
    8302:	f000 f87f 	bl	8404 <_printf_i>
    8306:	e7ec      	b.n	82e2 <_vfiprintf_r+0x1f2>
    8308:	000099e8 	.word	0x000099e8
    830c:	00009a28 	.word	0x00009a28
    8310:	00009a08 	.word	0x00009a08
    8314:	000099c8 	.word	0x000099c8
    8318:	00009a2e 	.word	0x00009a2e
    831c:	00009a32 	.word	0x00009a32
    8320:	00000000 	.word	0x00000000
    8324:	000080cb 	.word	0x000080cb

00008328 <_printf_common>:
    8328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    832a:	0015      	movs	r5, r2
    832c:	9301      	str	r3, [sp, #4]
    832e:	688a      	ldr	r2, [r1, #8]
    8330:	690b      	ldr	r3, [r1, #16]
    8332:	9000      	str	r0, [sp, #0]
    8334:	000c      	movs	r4, r1
    8336:	4293      	cmp	r3, r2
    8338:	da00      	bge.n	833c <_printf_common+0x14>
    833a:	0013      	movs	r3, r2
    833c:	0022      	movs	r2, r4
    833e:	602b      	str	r3, [r5, #0]
    8340:	3243      	adds	r2, #67	; 0x43
    8342:	7812      	ldrb	r2, [r2, #0]
    8344:	2a00      	cmp	r2, #0
    8346:	d001      	beq.n	834c <_printf_common+0x24>
    8348:	3301      	adds	r3, #1
    834a:	602b      	str	r3, [r5, #0]
    834c:	6823      	ldr	r3, [r4, #0]
    834e:	069b      	lsls	r3, r3, #26
    8350:	d502      	bpl.n	8358 <_printf_common+0x30>
    8352:	682b      	ldr	r3, [r5, #0]
    8354:	3302      	adds	r3, #2
    8356:	602b      	str	r3, [r5, #0]
    8358:	2706      	movs	r7, #6
    835a:	6823      	ldr	r3, [r4, #0]
    835c:	401f      	ands	r7, r3
    835e:	d027      	beq.n	83b0 <_printf_common+0x88>
    8360:	0023      	movs	r3, r4
    8362:	3343      	adds	r3, #67	; 0x43
    8364:	781b      	ldrb	r3, [r3, #0]
    8366:	1e5a      	subs	r2, r3, #1
    8368:	4193      	sbcs	r3, r2
    836a:	6822      	ldr	r2, [r4, #0]
    836c:	0692      	lsls	r2, r2, #26
    836e:	d430      	bmi.n	83d2 <_printf_common+0xaa>
    8370:	0022      	movs	r2, r4
    8372:	9901      	ldr	r1, [sp, #4]
    8374:	3243      	adds	r2, #67	; 0x43
    8376:	9800      	ldr	r0, [sp, #0]
    8378:	9e08      	ldr	r6, [sp, #32]
    837a:	47b0      	blx	r6
    837c:	1c43      	adds	r3, r0, #1
    837e:	d025      	beq.n	83cc <_printf_common+0xa4>
    8380:	2306      	movs	r3, #6
    8382:	6820      	ldr	r0, [r4, #0]
    8384:	682a      	ldr	r2, [r5, #0]
    8386:	68e1      	ldr	r1, [r4, #12]
    8388:	4003      	ands	r3, r0
    838a:	2500      	movs	r5, #0
    838c:	2b04      	cmp	r3, #4
    838e:	d103      	bne.n	8398 <_printf_common+0x70>
    8390:	1a8d      	subs	r5, r1, r2
    8392:	43eb      	mvns	r3, r5
    8394:	17db      	asrs	r3, r3, #31
    8396:	401d      	ands	r5, r3
    8398:	68a3      	ldr	r3, [r4, #8]
    839a:	6922      	ldr	r2, [r4, #16]
    839c:	4293      	cmp	r3, r2
    839e:	dd01      	ble.n	83a4 <_printf_common+0x7c>
    83a0:	1a9b      	subs	r3, r3, r2
    83a2:	18ed      	adds	r5, r5, r3
    83a4:	2700      	movs	r7, #0
    83a6:	42bd      	cmp	r5, r7
    83a8:	d120      	bne.n	83ec <_printf_common+0xc4>
    83aa:	2000      	movs	r0, #0
    83ac:	e010      	b.n	83d0 <_printf_common+0xa8>
    83ae:	3701      	adds	r7, #1
    83b0:	68e3      	ldr	r3, [r4, #12]
    83b2:	682a      	ldr	r2, [r5, #0]
    83b4:	1a9b      	subs	r3, r3, r2
    83b6:	429f      	cmp	r7, r3
    83b8:	dad2      	bge.n	8360 <_printf_common+0x38>
    83ba:	0022      	movs	r2, r4
    83bc:	2301      	movs	r3, #1
    83be:	3219      	adds	r2, #25
    83c0:	9901      	ldr	r1, [sp, #4]
    83c2:	9800      	ldr	r0, [sp, #0]
    83c4:	9e08      	ldr	r6, [sp, #32]
    83c6:	47b0      	blx	r6
    83c8:	1c43      	adds	r3, r0, #1
    83ca:	d1f0      	bne.n	83ae <_printf_common+0x86>
    83cc:	2001      	movs	r0, #1
    83ce:	4240      	negs	r0, r0
    83d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    83d2:	2030      	movs	r0, #48	; 0x30
    83d4:	18e1      	adds	r1, r4, r3
    83d6:	3143      	adds	r1, #67	; 0x43
    83d8:	7008      	strb	r0, [r1, #0]
    83da:	0021      	movs	r1, r4
    83dc:	1c5a      	adds	r2, r3, #1
    83de:	3145      	adds	r1, #69	; 0x45
    83e0:	7809      	ldrb	r1, [r1, #0]
    83e2:	18a2      	adds	r2, r4, r2
    83e4:	3243      	adds	r2, #67	; 0x43
    83e6:	3302      	adds	r3, #2
    83e8:	7011      	strb	r1, [r2, #0]
    83ea:	e7c1      	b.n	8370 <_printf_common+0x48>
    83ec:	0022      	movs	r2, r4
    83ee:	2301      	movs	r3, #1
    83f0:	321a      	adds	r2, #26
    83f2:	9901      	ldr	r1, [sp, #4]
    83f4:	9800      	ldr	r0, [sp, #0]
    83f6:	9e08      	ldr	r6, [sp, #32]
    83f8:	47b0      	blx	r6
    83fa:	1c43      	adds	r3, r0, #1
    83fc:	d0e6      	beq.n	83cc <_printf_common+0xa4>
    83fe:	3701      	adds	r7, #1
    8400:	e7d1      	b.n	83a6 <_printf_common+0x7e>
	...

00008404 <_printf_i>:
    8404:	b5f0      	push	{r4, r5, r6, r7, lr}
    8406:	b08b      	sub	sp, #44	; 0x2c
    8408:	9206      	str	r2, [sp, #24]
    840a:	000a      	movs	r2, r1
    840c:	3243      	adds	r2, #67	; 0x43
    840e:	9307      	str	r3, [sp, #28]
    8410:	9005      	str	r0, [sp, #20]
    8412:	9204      	str	r2, [sp, #16]
    8414:	7e0a      	ldrb	r2, [r1, #24]
    8416:	000c      	movs	r4, r1
    8418:	9b10      	ldr	r3, [sp, #64]	; 0x40
    841a:	2a6e      	cmp	r2, #110	; 0x6e
    841c:	d100      	bne.n	8420 <_printf_i+0x1c>
    841e:	e08f      	b.n	8540 <_printf_i+0x13c>
    8420:	d817      	bhi.n	8452 <_printf_i+0x4e>
    8422:	2a63      	cmp	r2, #99	; 0x63
    8424:	d02c      	beq.n	8480 <_printf_i+0x7c>
    8426:	d808      	bhi.n	843a <_printf_i+0x36>
    8428:	2a00      	cmp	r2, #0
    842a:	d100      	bne.n	842e <_printf_i+0x2a>
    842c:	e099      	b.n	8562 <_printf_i+0x15e>
    842e:	2a58      	cmp	r2, #88	; 0x58
    8430:	d054      	beq.n	84dc <_printf_i+0xd8>
    8432:	0026      	movs	r6, r4
    8434:	3642      	adds	r6, #66	; 0x42
    8436:	7032      	strb	r2, [r6, #0]
    8438:	e029      	b.n	848e <_printf_i+0x8a>
    843a:	2a64      	cmp	r2, #100	; 0x64
    843c:	d001      	beq.n	8442 <_printf_i+0x3e>
    843e:	2a69      	cmp	r2, #105	; 0x69
    8440:	d1f7      	bne.n	8432 <_printf_i+0x2e>
    8442:	6821      	ldr	r1, [r4, #0]
    8444:	681a      	ldr	r2, [r3, #0]
    8446:	0608      	lsls	r0, r1, #24
    8448:	d523      	bpl.n	8492 <_printf_i+0x8e>
    844a:	1d11      	adds	r1, r2, #4
    844c:	6019      	str	r1, [r3, #0]
    844e:	6815      	ldr	r5, [r2, #0]
    8450:	e025      	b.n	849e <_printf_i+0x9a>
    8452:	2a73      	cmp	r2, #115	; 0x73
    8454:	d100      	bne.n	8458 <_printf_i+0x54>
    8456:	e088      	b.n	856a <_printf_i+0x166>
    8458:	d808      	bhi.n	846c <_printf_i+0x68>
    845a:	2a6f      	cmp	r2, #111	; 0x6f
    845c:	d029      	beq.n	84b2 <_printf_i+0xae>
    845e:	2a70      	cmp	r2, #112	; 0x70
    8460:	d1e7      	bne.n	8432 <_printf_i+0x2e>
    8462:	2220      	movs	r2, #32
    8464:	6809      	ldr	r1, [r1, #0]
    8466:	430a      	orrs	r2, r1
    8468:	6022      	str	r2, [r4, #0]
    846a:	e003      	b.n	8474 <_printf_i+0x70>
    846c:	2a75      	cmp	r2, #117	; 0x75
    846e:	d020      	beq.n	84b2 <_printf_i+0xae>
    8470:	2a78      	cmp	r2, #120	; 0x78
    8472:	d1de      	bne.n	8432 <_printf_i+0x2e>
    8474:	0022      	movs	r2, r4
    8476:	2178      	movs	r1, #120	; 0x78
    8478:	3245      	adds	r2, #69	; 0x45
    847a:	7011      	strb	r1, [r2, #0]
    847c:	4a6c      	ldr	r2, [pc, #432]	; (8630 <_printf_i+0x22c>)
    847e:	e030      	b.n	84e2 <_printf_i+0xde>
    8480:	000e      	movs	r6, r1
    8482:	681a      	ldr	r2, [r3, #0]
    8484:	3642      	adds	r6, #66	; 0x42
    8486:	1d11      	adds	r1, r2, #4
    8488:	6019      	str	r1, [r3, #0]
    848a:	6813      	ldr	r3, [r2, #0]
    848c:	7033      	strb	r3, [r6, #0]
    848e:	2301      	movs	r3, #1
    8490:	e079      	b.n	8586 <_printf_i+0x182>
    8492:	0649      	lsls	r1, r1, #25
    8494:	d5d9      	bpl.n	844a <_printf_i+0x46>
    8496:	1d11      	adds	r1, r2, #4
    8498:	6019      	str	r1, [r3, #0]
    849a:	2300      	movs	r3, #0
    849c:	5ed5      	ldrsh	r5, [r2, r3]
    849e:	2d00      	cmp	r5, #0
    84a0:	da03      	bge.n	84aa <_printf_i+0xa6>
    84a2:	232d      	movs	r3, #45	; 0x2d
    84a4:	9a04      	ldr	r2, [sp, #16]
    84a6:	426d      	negs	r5, r5
    84a8:	7013      	strb	r3, [r2, #0]
    84aa:	4b62      	ldr	r3, [pc, #392]	; (8634 <_printf_i+0x230>)
    84ac:	270a      	movs	r7, #10
    84ae:	9303      	str	r3, [sp, #12]
    84b0:	e02f      	b.n	8512 <_printf_i+0x10e>
    84b2:	6820      	ldr	r0, [r4, #0]
    84b4:	6819      	ldr	r1, [r3, #0]
    84b6:	0605      	lsls	r5, r0, #24
    84b8:	d503      	bpl.n	84c2 <_printf_i+0xbe>
    84ba:	1d08      	adds	r0, r1, #4
    84bc:	6018      	str	r0, [r3, #0]
    84be:	680d      	ldr	r5, [r1, #0]
    84c0:	e005      	b.n	84ce <_printf_i+0xca>
    84c2:	0640      	lsls	r0, r0, #25
    84c4:	d5f9      	bpl.n	84ba <_printf_i+0xb6>
    84c6:	680d      	ldr	r5, [r1, #0]
    84c8:	1d08      	adds	r0, r1, #4
    84ca:	6018      	str	r0, [r3, #0]
    84cc:	b2ad      	uxth	r5, r5
    84ce:	4b59      	ldr	r3, [pc, #356]	; (8634 <_printf_i+0x230>)
    84d0:	2708      	movs	r7, #8
    84d2:	9303      	str	r3, [sp, #12]
    84d4:	2a6f      	cmp	r2, #111	; 0x6f
    84d6:	d018      	beq.n	850a <_printf_i+0x106>
    84d8:	270a      	movs	r7, #10
    84da:	e016      	b.n	850a <_printf_i+0x106>
    84dc:	3145      	adds	r1, #69	; 0x45
    84de:	700a      	strb	r2, [r1, #0]
    84e0:	4a54      	ldr	r2, [pc, #336]	; (8634 <_printf_i+0x230>)
    84e2:	9203      	str	r2, [sp, #12]
    84e4:	681a      	ldr	r2, [r3, #0]
    84e6:	6821      	ldr	r1, [r4, #0]
    84e8:	1d10      	adds	r0, r2, #4
    84ea:	6018      	str	r0, [r3, #0]
    84ec:	6815      	ldr	r5, [r2, #0]
    84ee:	0608      	lsls	r0, r1, #24
    84f0:	d522      	bpl.n	8538 <_printf_i+0x134>
    84f2:	07cb      	lsls	r3, r1, #31
    84f4:	d502      	bpl.n	84fc <_printf_i+0xf8>
    84f6:	2320      	movs	r3, #32
    84f8:	4319      	orrs	r1, r3
    84fa:	6021      	str	r1, [r4, #0]
    84fc:	2710      	movs	r7, #16
    84fe:	2d00      	cmp	r5, #0
    8500:	d103      	bne.n	850a <_printf_i+0x106>
    8502:	2320      	movs	r3, #32
    8504:	6822      	ldr	r2, [r4, #0]
    8506:	439a      	bics	r2, r3
    8508:	6022      	str	r2, [r4, #0]
    850a:	0023      	movs	r3, r4
    850c:	2200      	movs	r2, #0
    850e:	3343      	adds	r3, #67	; 0x43
    8510:	701a      	strb	r2, [r3, #0]
    8512:	6863      	ldr	r3, [r4, #4]
    8514:	60a3      	str	r3, [r4, #8]
    8516:	2b00      	cmp	r3, #0
    8518:	db5c      	blt.n	85d4 <_printf_i+0x1d0>
    851a:	2204      	movs	r2, #4
    851c:	6821      	ldr	r1, [r4, #0]
    851e:	4391      	bics	r1, r2
    8520:	6021      	str	r1, [r4, #0]
    8522:	2d00      	cmp	r5, #0
    8524:	d158      	bne.n	85d8 <_printf_i+0x1d4>
    8526:	9e04      	ldr	r6, [sp, #16]
    8528:	2b00      	cmp	r3, #0
    852a:	d064      	beq.n	85f6 <_printf_i+0x1f2>
    852c:	0026      	movs	r6, r4
    852e:	9b03      	ldr	r3, [sp, #12]
    8530:	3642      	adds	r6, #66	; 0x42
    8532:	781b      	ldrb	r3, [r3, #0]
    8534:	7033      	strb	r3, [r6, #0]
    8536:	e05e      	b.n	85f6 <_printf_i+0x1f2>
    8538:	0648      	lsls	r0, r1, #25
    853a:	d5da      	bpl.n	84f2 <_printf_i+0xee>
    853c:	b2ad      	uxth	r5, r5
    853e:	e7d8      	b.n	84f2 <_printf_i+0xee>
    8540:	6809      	ldr	r1, [r1, #0]
    8542:	681a      	ldr	r2, [r3, #0]
    8544:	0608      	lsls	r0, r1, #24
    8546:	d505      	bpl.n	8554 <_printf_i+0x150>
    8548:	1d11      	adds	r1, r2, #4
    854a:	6019      	str	r1, [r3, #0]
    854c:	6813      	ldr	r3, [r2, #0]
    854e:	6962      	ldr	r2, [r4, #20]
    8550:	601a      	str	r2, [r3, #0]
    8552:	e006      	b.n	8562 <_printf_i+0x15e>
    8554:	0649      	lsls	r1, r1, #25
    8556:	d5f7      	bpl.n	8548 <_printf_i+0x144>
    8558:	1d11      	adds	r1, r2, #4
    855a:	6019      	str	r1, [r3, #0]
    855c:	6813      	ldr	r3, [r2, #0]
    855e:	8aa2      	ldrh	r2, [r4, #20]
    8560:	801a      	strh	r2, [r3, #0]
    8562:	2300      	movs	r3, #0
    8564:	9e04      	ldr	r6, [sp, #16]
    8566:	6123      	str	r3, [r4, #16]
    8568:	e054      	b.n	8614 <_printf_i+0x210>
    856a:	681a      	ldr	r2, [r3, #0]
    856c:	1d11      	adds	r1, r2, #4
    856e:	6019      	str	r1, [r3, #0]
    8570:	6816      	ldr	r6, [r2, #0]
    8572:	2100      	movs	r1, #0
    8574:	6862      	ldr	r2, [r4, #4]
    8576:	0030      	movs	r0, r6
    8578:	f000 f950 	bl	881c <memchr>
    857c:	2800      	cmp	r0, #0
    857e:	d001      	beq.n	8584 <_printf_i+0x180>
    8580:	1b80      	subs	r0, r0, r6
    8582:	6060      	str	r0, [r4, #4]
    8584:	6863      	ldr	r3, [r4, #4]
    8586:	6123      	str	r3, [r4, #16]
    8588:	2300      	movs	r3, #0
    858a:	9a04      	ldr	r2, [sp, #16]
    858c:	7013      	strb	r3, [r2, #0]
    858e:	e041      	b.n	8614 <_printf_i+0x210>
    8590:	6923      	ldr	r3, [r4, #16]
    8592:	0032      	movs	r2, r6
    8594:	9906      	ldr	r1, [sp, #24]
    8596:	9805      	ldr	r0, [sp, #20]
    8598:	9d07      	ldr	r5, [sp, #28]
    859a:	47a8      	blx	r5
    859c:	1c43      	adds	r3, r0, #1
    859e:	d043      	beq.n	8628 <_printf_i+0x224>
    85a0:	6823      	ldr	r3, [r4, #0]
    85a2:	2500      	movs	r5, #0
    85a4:	079b      	lsls	r3, r3, #30
    85a6:	d40f      	bmi.n	85c8 <_printf_i+0x1c4>
    85a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    85aa:	68e0      	ldr	r0, [r4, #12]
    85ac:	4298      	cmp	r0, r3
    85ae:	da3d      	bge.n	862c <_printf_i+0x228>
    85b0:	0018      	movs	r0, r3
    85b2:	e03b      	b.n	862c <_printf_i+0x228>
    85b4:	0022      	movs	r2, r4
    85b6:	2301      	movs	r3, #1
    85b8:	3219      	adds	r2, #25
    85ba:	9906      	ldr	r1, [sp, #24]
    85bc:	9805      	ldr	r0, [sp, #20]
    85be:	9e07      	ldr	r6, [sp, #28]
    85c0:	47b0      	blx	r6
    85c2:	1c43      	adds	r3, r0, #1
    85c4:	d030      	beq.n	8628 <_printf_i+0x224>
    85c6:	3501      	adds	r5, #1
    85c8:	68e3      	ldr	r3, [r4, #12]
    85ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    85cc:	1a9b      	subs	r3, r3, r2
    85ce:	429d      	cmp	r5, r3
    85d0:	dbf0      	blt.n	85b4 <_printf_i+0x1b0>
    85d2:	e7e9      	b.n	85a8 <_printf_i+0x1a4>
    85d4:	2d00      	cmp	r5, #0
    85d6:	d0a9      	beq.n	852c <_printf_i+0x128>
    85d8:	9e04      	ldr	r6, [sp, #16]
    85da:	0028      	movs	r0, r5
    85dc:	0039      	movs	r1, r7
    85de:	f7fe fed5 	bl	738c <__aeabi_uidivmod>
    85e2:	9b03      	ldr	r3, [sp, #12]
    85e4:	3e01      	subs	r6, #1
    85e6:	5c5b      	ldrb	r3, [r3, r1]
    85e8:	0028      	movs	r0, r5
    85ea:	7033      	strb	r3, [r6, #0]
    85ec:	0039      	movs	r1, r7
    85ee:	f7fe fe47 	bl	7280 <__udivsi3>
    85f2:	1e05      	subs	r5, r0, #0
    85f4:	d1f1      	bne.n	85da <_printf_i+0x1d6>
    85f6:	2f08      	cmp	r7, #8
    85f8:	d109      	bne.n	860e <_printf_i+0x20a>
    85fa:	6823      	ldr	r3, [r4, #0]
    85fc:	07db      	lsls	r3, r3, #31
    85fe:	d506      	bpl.n	860e <_printf_i+0x20a>
    8600:	6863      	ldr	r3, [r4, #4]
    8602:	6922      	ldr	r2, [r4, #16]
    8604:	4293      	cmp	r3, r2
    8606:	dc02      	bgt.n	860e <_printf_i+0x20a>
    8608:	2330      	movs	r3, #48	; 0x30
    860a:	3e01      	subs	r6, #1
    860c:	7033      	strb	r3, [r6, #0]
    860e:	9b04      	ldr	r3, [sp, #16]
    8610:	1b9b      	subs	r3, r3, r6
    8612:	6123      	str	r3, [r4, #16]
    8614:	9b07      	ldr	r3, [sp, #28]
    8616:	aa09      	add	r2, sp, #36	; 0x24
    8618:	9300      	str	r3, [sp, #0]
    861a:	0021      	movs	r1, r4
    861c:	9b06      	ldr	r3, [sp, #24]
    861e:	9805      	ldr	r0, [sp, #20]
    8620:	f7ff fe82 	bl	8328 <_printf_common>
    8624:	1c43      	adds	r3, r0, #1
    8626:	d1b3      	bne.n	8590 <_printf_i+0x18c>
    8628:	2001      	movs	r0, #1
    862a:	4240      	negs	r0, r0
    862c:	b00b      	add	sp, #44	; 0x2c
    862e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8630:	00009a4a 	.word	0x00009a4a
    8634:	00009a39 	.word	0x00009a39

00008638 <_putc_r>:
    8638:	b570      	push	{r4, r5, r6, lr}
    863a:	0006      	movs	r6, r0
    863c:	000d      	movs	r5, r1
    863e:	0014      	movs	r4, r2
    8640:	2800      	cmp	r0, #0
    8642:	d004      	beq.n	864e <_putc_r+0x16>
    8644:	6983      	ldr	r3, [r0, #24]
    8646:	2b00      	cmp	r3, #0
    8648:	d101      	bne.n	864e <_putc_r+0x16>
    864a:	f7ff fb75 	bl	7d38 <__sinit>
    864e:	4b12      	ldr	r3, [pc, #72]	; (8698 <_putc_r+0x60>)
    8650:	429c      	cmp	r4, r3
    8652:	d111      	bne.n	8678 <_putc_r+0x40>
    8654:	6874      	ldr	r4, [r6, #4]
    8656:	68a3      	ldr	r3, [r4, #8]
    8658:	3b01      	subs	r3, #1
    865a:	60a3      	str	r3, [r4, #8]
    865c:	2b00      	cmp	r3, #0
    865e:	da05      	bge.n	866c <_putc_r+0x34>
    8660:	69a2      	ldr	r2, [r4, #24]
    8662:	4293      	cmp	r3, r2
    8664:	db12      	blt.n	868c <_putc_r+0x54>
    8666:	b2eb      	uxtb	r3, r5
    8668:	2b0a      	cmp	r3, #10
    866a:	d00f      	beq.n	868c <_putc_r+0x54>
    866c:	6823      	ldr	r3, [r4, #0]
    866e:	b2e8      	uxtb	r0, r5
    8670:	1c5a      	adds	r2, r3, #1
    8672:	6022      	str	r2, [r4, #0]
    8674:	701d      	strb	r5, [r3, #0]
    8676:	bd70      	pop	{r4, r5, r6, pc}
    8678:	4b08      	ldr	r3, [pc, #32]	; (869c <_putc_r+0x64>)
    867a:	429c      	cmp	r4, r3
    867c:	d101      	bne.n	8682 <_putc_r+0x4a>
    867e:	68b4      	ldr	r4, [r6, #8]
    8680:	e7e9      	b.n	8656 <_putc_r+0x1e>
    8682:	4b07      	ldr	r3, [pc, #28]	; (86a0 <_putc_r+0x68>)
    8684:	429c      	cmp	r4, r3
    8686:	d1e6      	bne.n	8656 <_putc_r+0x1e>
    8688:	68f4      	ldr	r4, [r6, #12]
    868a:	e7e4      	b.n	8656 <_putc_r+0x1e>
    868c:	0022      	movs	r2, r4
    868e:	0029      	movs	r1, r5
    8690:	0030      	movs	r0, r6
    8692:	f7ff f98d 	bl	79b0 <__swbuf_r>
    8696:	e7ee      	b.n	8676 <_putc_r+0x3e>
    8698:	000099e8 	.word	0x000099e8
    869c:	00009a08 	.word	0x00009a08
    86a0:	000099c8 	.word	0x000099c8

000086a4 <_sbrk_r>:
    86a4:	2300      	movs	r3, #0
    86a6:	b570      	push	{r4, r5, r6, lr}
    86a8:	4c06      	ldr	r4, [pc, #24]	; (86c4 <_sbrk_r+0x20>)
    86aa:	0005      	movs	r5, r0
    86ac:	0008      	movs	r0, r1
    86ae:	6023      	str	r3, [r4, #0]
    86b0:	f7fc ff2c 	bl	550c <_sbrk>
    86b4:	1c43      	adds	r3, r0, #1
    86b6:	d103      	bne.n	86c0 <_sbrk_r+0x1c>
    86b8:	6823      	ldr	r3, [r4, #0]
    86ba:	2b00      	cmp	r3, #0
    86bc:	d000      	beq.n	86c0 <_sbrk_r+0x1c>
    86be:	602b      	str	r3, [r5, #0]
    86c0:	bd70      	pop	{r4, r5, r6, pc}
    86c2:	46c0      	nop			; (mov r8, r8)
    86c4:	20000cfc 	.word	0x20000cfc

000086c8 <__sread>:
    86c8:	b570      	push	{r4, r5, r6, lr}
    86ca:	000c      	movs	r4, r1
    86cc:	250e      	movs	r5, #14
    86ce:	5f49      	ldrsh	r1, [r1, r5]
    86d0:	f000 f8b2 	bl	8838 <_read_r>
    86d4:	2800      	cmp	r0, #0
    86d6:	db03      	blt.n	86e0 <__sread+0x18>
    86d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    86da:	181b      	adds	r3, r3, r0
    86dc:	6563      	str	r3, [r4, #84]	; 0x54
    86de:	bd70      	pop	{r4, r5, r6, pc}
    86e0:	89a3      	ldrh	r3, [r4, #12]
    86e2:	4a02      	ldr	r2, [pc, #8]	; (86ec <__sread+0x24>)
    86e4:	4013      	ands	r3, r2
    86e6:	81a3      	strh	r3, [r4, #12]
    86e8:	e7f9      	b.n	86de <__sread+0x16>
    86ea:	46c0      	nop			; (mov r8, r8)
    86ec:	ffffefff 	.word	0xffffefff

000086f0 <__swrite>:
    86f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86f2:	001f      	movs	r7, r3
    86f4:	898b      	ldrh	r3, [r1, #12]
    86f6:	0005      	movs	r5, r0
    86f8:	000c      	movs	r4, r1
    86fa:	0016      	movs	r6, r2
    86fc:	05db      	lsls	r3, r3, #23
    86fe:	d505      	bpl.n	870c <__swrite+0x1c>
    8700:	230e      	movs	r3, #14
    8702:	5ec9      	ldrsh	r1, [r1, r3]
    8704:	2200      	movs	r2, #0
    8706:	2302      	movs	r3, #2
    8708:	f000 f874 	bl	87f4 <_lseek_r>
    870c:	89a3      	ldrh	r3, [r4, #12]
    870e:	4a05      	ldr	r2, [pc, #20]	; (8724 <__swrite+0x34>)
    8710:	0028      	movs	r0, r5
    8712:	4013      	ands	r3, r2
    8714:	81a3      	strh	r3, [r4, #12]
    8716:	0032      	movs	r2, r6
    8718:	230e      	movs	r3, #14
    871a:	5ee1      	ldrsh	r1, [r4, r3]
    871c:	003b      	movs	r3, r7
    871e:	f000 f81f 	bl	8760 <_write_r>
    8722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8724:	ffffefff 	.word	0xffffefff

00008728 <__sseek>:
    8728:	b570      	push	{r4, r5, r6, lr}
    872a:	000c      	movs	r4, r1
    872c:	250e      	movs	r5, #14
    872e:	5f49      	ldrsh	r1, [r1, r5]
    8730:	f000 f860 	bl	87f4 <_lseek_r>
    8734:	89a3      	ldrh	r3, [r4, #12]
    8736:	1c42      	adds	r2, r0, #1
    8738:	d103      	bne.n	8742 <__sseek+0x1a>
    873a:	4a05      	ldr	r2, [pc, #20]	; (8750 <__sseek+0x28>)
    873c:	4013      	ands	r3, r2
    873e:	81a3      	strh	r3, [r4, #12]
    8740:	bd70      	pop	{r4, r5, r6, pc}
    8742:	2280      	movs	r2, #128	; 0x80
    8744:	0152      	lsls	r2, r2, #5
    8746:	4313      	orrs	r3, r2
    8748:	81a3      	strh	r3, [r4, #12]
    874a:	6560      	str	r0, [r4, #84]	; 0x54
    874c:	e7f8      	b.n	8740 <__sseek+0x18>
    874e:	46c0      	nop			; (mov r8, r8)
    8750:	ffffefff 	.word	0xffffefff

00008754 <__sclose>:
    8754:	b510      	push	{r4, lr}
    8756:	230e      	movs	r3, #14
    8758:	5ec9      	ldrsh	r1, [r1, r3]
    875a:	f000 f815 	bl	8788 <_close_r>
    875e:	bd10      	pop	{r4, pc}

00008760 <_write_r>:
    8760:	b570      	push	{r4, r5, r6, lr}
    8762:	0005      	movs	r5, r0
    8764:	0008      	movs	r0, r1
    8766:	0011      	movs	r1, r2
    8768:	2200      	movs	r2, #0
    876a:	4c06      	ldr	r4, [pc, #24]	; (8784 <_write_r+0x24>)
    876c:	6022      	str	r2, [r4, #0]
    876e:	001a      	movs	r2, r3
    8770:	f7fb f8e0 	bl	3934 <_write>
    8774:	1c43      	adds	r3, r0, #1
    8776:	d103      	bne.n	8780 <_write_r+0x20>
    8778:	6823      	ldr	r3, [r4, #0]
    877a:	2b00      	cmp	r3, #0
    877c:	d000      	beq.n	8780 <_write_r+0x20>
    877e:	602b      	str	r3, [r5, #0]
    8780:	bd70      	pop	{r4, r5, r6, pc}
    8782:	46c0      	nop			; (mov r8, r8)
    8784:	20000cfc 	.word	0x20000cfc

00008788 <_close_r>:
    8788:	2300      	movs	r3, #0
    878a:	b570      	push	{r4, r5, r6, lr}
    878c:	4c06      	ldr	r4, [pc, #24]	; (87a8 <_close_r+0x20>)
    878e:	0005      	movs	r5, r0
    8790:	0008      	movs	r0, r1
    8792:	6023      	str	r3, [r4, #0]
    8794:	f7fc fecc 	bl	5530 <_close>
    8798:	1c43      	adds	r3, r0, #1
    879a:	d103      	bne.n	87a4 <_close_r+0x1c>
    879c:	6823      	ldr	r3, [r4, #0]
    879e:	2b00      	cmp	r3, #0
    87a0:	d000      	beq.n	87a4 <_close_r+0x1c>
    87a2:	602b      	str	r3, [r5, #0]
    87a4:	bd70      	pop	{r4, r5, r6, pc}
    87a6:	46c0      	nop			; (mov r8, r8)
    87a8:	20000cfc 	.word	0x20000cfc

000087ac <_fstat_r>:
    87ac:	2300      	movs	r3, #0
    87ae:	b570      	push	{r4, r5, r6, lr}
    87b0:	4c06      	ldr	r4, [pc, #24]	; (87cc <_fstat_r+0x20>)
    87b2:	0005      	movs	r5, r0
    87b4:	0008      	movs	r0, r1
    87b6:	0011      	movs	r1, r2
    87b8:	6023      	str	r3, [r4, #0]
    87ba:	f7fc febc 	bl	5536 <_fstat>
    87be:	1c43      	adds	r3, r0, #1
    87c0:	d103      	bne.n	87ca <_fstat_r+0x1e>
    87c2:	6823      	ldr	r3, [r4, #0]
    87c4:	2b00      	cmp	r3, #0
    87c6:	d000      	beq.n	87ca <_fstat_r+0x1e>
    87c8:	602b      	str	r3, [r5, #0]
    87ca:	bd70      	pop	{r4, r5, r6, pc}
    87cc:	20000cfc 	.word	0x20000cfc

000087d0 <_isatty_r>:
    87d0:	2300      	movs	r3, #0
    87d2:	b570      	push	{r4, r5, r6, lr}
    87d4:	4c06      	ldr	r4, [pc, #24]	; (87f0 <_isatty_r+0x20>)
    87d6:	0005      	movs	r5, r0
    87d8:	0008      	movs	r0, r1
    87da:	6023      	str	r3, [r4, #0]
    87dc:	f7fc feb0 	bl	5540 <_isatty>
    87e0:	1c43      	adds	r3, r0, #1
    87e2:	d103      	bne.n	87ec <_isatty_r+0x1c>
    87e4:	6823      	ldr	r3, [r4, #0]
    87e6:	2b00      	cmp	r3, #0
    87e8:	d000      	beq.n	87ec <_isatty_r+0x1c>
    87ea:	602b      	str	r3, [r5, #0]
    87ec:	bd70      	pop	{r4, r5, r6, pc}
    87ee:	46c0      	nop			; (mov r8, r8)
    87f0:	20000cfc 	.word	0x20000cfc

000087f4 <_lseek_r>:
    87f4:	b570      	push	{r4, r5, r6, lr}
    87f6:	0005      	movs	r5, r0
    87f8:	0008      	movs	r0, r1
    87fa:	0011      	movs	r1, r2
    87fc:	2200      	movs	r2, #0
    87fe:	4c06      	ldr	r4, [pc, #24]	; (8818 <_lseek_r+0x24>)
    8800:	6022      	str	r2, [r4, #0]
    8802:	001a      	movs	r2, r3
    8804:	f7fc fe9e 	bl	5544 <_lseek>
    8808:	1c43      	adds	r3, r0, #1
    880a:	d103      	bne.n	8814 <_lseek_r+0x20>
    880c:	6823      	ldr	r3, [r4, #0]
    880e:	2b00      	cmp	r3, #0
    8810:	d000      	beq.n	8814 <_lseek_r+0x20>
    8812:	602b      	str	r3, [r5, #0]
    8814:	bd70      	pop	{r4, r5, r6, pc}
    8816:	46c0      	nop			; (mov r8, r8)
    8818:	20000cfc 	.word	0x20000cfc

0000881c <memchr>:
    881c:	b2c9      	uxtb	r1, r1
    881e:	1882      	adds	r2, r0, r2
    8820:	4290      	cmp	r0, r2
    8822:	d101      	bne.n	8828 <memchr+0xc>
    8824:	2000      	movs	r0, #0
    8826:	4770      	bx	lr
    8828:	7803      	ldrb	r3, [r0, #0]
    882a:	428b      	cmp	r3, r1
    882c:	d0fb      	beq.n	8826 <memchr+0xa>
    882e:	3001      	adds	r0, #1
    8830:	e7f6      	b.n	8820 <memchr+0x4>

00008832 <__malloc_lock>:
    8832:	4770      	bx	lr

00008834 <__malloc_unlock>:
    8834:	4770      	bx	lr
	...

00008838 <_read_r>:
    8838:	b570      	push	{r4, r5, r6, lr}
    883a:	0005      	movs	r5, r0
    883c:	0008      	movs	r0, r1
    883e:	0011      	movs	r1, r2
    8840:	2200      	movs	r2, #0
    8842:	4c06      	ldr	r4, [pc, #24]	; (885c <_read_r+0x24>)
    8844:	6022      	str	r2, [r4, #0]
    8846:	001a      	movs	r2, r3
    8848:	f7fb f852 	bl	38f0 <_read>
    884c:	1c43      	adds	r3, r0, #1
    884e:	d103      	bne.n	8858 <_read_r+0x20>
    8850:	6823      	ldr	r3, [r4, #0]
    8852:	2b00      	cmp	r3, #0
    8854:	d000      	beq.n	8858 <_read_r+0x20>
    8856:	602b      	str	r3, [r5, #0]
    8858:	bd70      	pop	{r4, r5, r6, pc}
    885a:	46c0      	nop			; (mov r8, r8)
    885c:	20000cfc 	.word	0x20000cfc

00008860 <__FUNCTION__.13587>:
    8860:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    8870:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    8880:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    8890:	6320746c 0000646d 00000d84 00000d54     lt cmd......T...
    88a0:	00000d4c 00000d64 00000d5c 00000d7c     L...d...\...|...
    88b0:	00000d6c 00000d74                       l...t...

000088b8 <__FUNCTION__.12256>:
    88b8:	5f666968 646e6573 00000000              hif_send....

000088c4 <__FUNCTION__.12266>:
    88c4:	5f666968 00727369                       hif_isr.

000088cc <__FUNCTION__.12272>:
    88cc:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000088dc <__FUNCTION__.12284>:
    88dc:	5f666968 65636572 00657669              hif_receive.

000088e8 <__FUNCTION__.12300>:
    88e8:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    88f8:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    8908:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    8918:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    8928:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    8938:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    8948:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    8958:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    8968:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    8978:	6c616320 6361626c 7369206b 746f6e20      callback is not
    8988:	67657220 65747369 00646572 6b6f6353      registered.Scok
    8998:	63207465 626c6c61 206b6361 6e207369     et callback is n
    89a8:	7220746f 73696765 65726574 00000064     ot registered...
    89b8:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    89c8:	20746f6e 69676572 72657473 00006465     not registered..
    89d8:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    89e8:	6e207369 7220746f 73696765 65726574     is not registere
    89f8:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    8a08:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    8a18:	64657265 00000000 66696828 6e692029     ered....(hif) in
    8a28:	696c6176 72672064 2070756f 00004449     valid group ID..
    8a38:	66696828 6f682029 61207473 64207070     (hif) host app d
    8a48:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    8a58:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    8a68:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    8a78:	66696828 61462029 2065736c 65746e69     (hif) False inte
    8a88:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    8a98:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    8aa8:	7265746e 74707572 67657220 00000000     nterrupt reg....
    8ab8:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    8ac8:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    8ad8:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    8ae8:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    8af8:	696c6176 72612064 656d7567 0000746e     valid argument..
    8b08:	20505041 75716552 65747365 69532064     APP Requested Si
    8b18:	6920657a 616c2073 72656772 61687420     ze is larger tha
    8b28:	6874206e 65722065 65766963 75622064     n the recived bu
    8b38:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    8b48:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    8b58:	65747365 64412064 73657264 65622073     ested Address be
    8b68:	646e6f79 65687420 63657220 64657669     yond the recived
    8b78:	66756220 20726566 72646461 20737365      buffer address 
    8b88:	20646e61 676e656c 00006874 20705247     and length..GRp 
    8b98:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    8ba8:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    8bb8:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    8bc8:	6b617720 74207075 63206568 00706968      wakup the chip.

00008bd8 <__FUNCTION__.12235>:
    8bd8:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00008be4 <__FUNCTION__.12264>:
    8be4:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00008bf4 <__FUNCTION__.12292>:
    8bf4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    8c04:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    8c14:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    8c24:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    8c34:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    8c44:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    8c54:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    8c64:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    8c74:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    8c84:	20706557 2079656b 65646e69 64252078     Wep key index %d
    8c94:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    8ca4:	2079656b 676e656c 25206874 00000a64     key length %d...
    8cb4:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    8cc4:	656c2079 6874676e 00000000 65646e75     y length....unde
    8cd4:	656e6966 65732064 79742063 00006570     fined sec type..
    8ce4:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    8cf4:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    8d04:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    8d14:	69754220 2520646c 69542073 2520656d      Build %s Time %
    8d24:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    8d34:	69726420 20726576 20726576 7525203a      driver ver : %u
    8d44:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    8d54:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    8d64:	303a3631 33333a33 00000000 2074634f     16:03:33....Oct 
    8d74:	32203520 00383130 76697244 62207265      5 2018.Driver b
    8d84:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    8d94:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    8da4:	65562065 6f697372 0000006e              e Version...

00008db0 <__FUNCTION__.12098>:
    8db0:	70696863 6b61775f 00000065              chip_wake...

00008dbc <__FUNCTION__.12147>:
    8dbc:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    8dcc:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    8ddc:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    8dec:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    8dfc:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    8e0c:	70696863 00000000 76697244 65567265     chip....DriverVe
    8e1c:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00008e2c <__FUNCTION__.12145>:
    8e2c:	645f6d6e 695f7672 0074696e              nm_drv_init.

00008e38 <__FUNCTION__.12152>:
    8e38:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    8e48:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    8e58:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    8e68:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    8e78:	73616c66 69642068 6c626173 61662065     flash disable fa
    8e88:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    8e98:	6c696166 696e6920 75622074 00000073     fail init bus...
    8ea8:	6c696166 74206465 6e65206f 656c6261     failed to enable
    8eb8:	746e6920 75727265 2e737470 0000002e      interrupts.....
    8ec8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    8ed8:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    8ee8:	20444920 0a786c25 00000000 00001d68      ID %lx.....h...
    8ef8:	00001d68 00001d98 00001d1a 00001d3e     h...........>...
    8f08:	00001d4c 00001d7e 00001d7e 00001dc6     L...~...~.......
    8f18:	00001cfe 00001e00 00001e00 00001e00     ................
    8f28:	00001e00 00001d5a cac4c9c3              ....Z.......

00008f34 <__FUNCTION__.11451>:
    8f34:	5f697073 00646d63                       spi_cmd.

00008f3c <__FUNCTION__.11458>:
    8f3c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00008f4c <__FUNCTION__.11467>:
    8f4c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00008f58 <__FUNCTION__.11483>:
    8f58:	5f697073 61746164 6165725f 00000064     spi_data_read...

00008f68 <__FUNCTION__.11498>:
    8f68:	5f697073 61746164 6972775f 00006574     spi_data_write..

00008f78 <__FUNCTION__.11510>:
    8f78:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00008f88 <__FUNCTION__.11521>:
    8f88:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00008f98 <__FUNCTION__.11533>:
    8f98:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00008fa8 <__FUNCTION__.11546>:
    8fa8:	735f6d6e 725f6970 00646165              nm_spi_read.

00008fb4 <__FUNCTION__.11567>:
    8fb4:	735f6d6e 695f6970 0074696e              nm_spi_init.

00008fc0 <crc7_syndrome_table>:
    8fc0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    8fd0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    8fe0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    8ff0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    9000:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    9010:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    9020:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    9030:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    9040:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    9050:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    9060:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    9070:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    9080:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    9090:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    90a0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    90b0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    90c0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    90d0:	6e692064 6e726574 72206c61 20646165     d internal read 
    90e0:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    90f0:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    9100:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    9110:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9120:	6e692064 6e726574 72206c61 20646165     d internal read 
    9130:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    9140:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    9150:	6e726574 77206c61 65746972 6f727020     ternal write pro
    9160:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    9170:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    9180:	20646d63 64616572 69686320 64692070     cmd read chip id
    9190:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    91a0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    91b0:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    91c0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    91d0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    91e0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    91f0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    9200:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    9210:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    9220:	00000000 65736552 6e612074 65722064     ....Reset and re
    9230:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    9240:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9250:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    9260:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    9270:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    9280:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    9290:	69727720 62206574 6b636f6c 30252820      write block (%0
    92a0:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    92b0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    92c0:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    92d0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    92e0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    92f0:	61642064 62206174 6b636f6c 69727720     d data block wri
    9300:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    9310:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9320:	656c6961 61642064 62206174 6b636f6c     ailed data block
    9330:	63726320 69727720 202c6574 20737562      crc write, bus 
    9340:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    9350:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    9360:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    9370:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    9380:	72206174 6f707365 2065736e 64616572     ta response read
    9390:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    93a0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    93b0:	206b636f 61746164 69727720 2e2e6574     ock data write..
    93c0:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    93d0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    93e0:	73756220 72726520 2e2e726f 0000002e      bus error......
    93f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9400:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    9410:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    9420:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9430:	656c6961 61642064 72206174 6f707365     ailed data respo
    9440:	2065736e 64616572 7562202c 72652073     nse read, bus er
    9450:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    9460:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    9470:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    9480:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    9490:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    94a0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    94b0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    94c0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    94d0:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    94e0:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    94f0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    9500:	72202c64 20646165 20676572 38302528     d, read reg (%08
    9510:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    9520:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    9530:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    9540:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    9550:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    9560:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    9570:	6e612074 65722064 20797274 25206425     t and retry %d %
    9580:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    9590:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    95a0:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    95b0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    95c0:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    95d0:	74697277 65722065 25282067 29783830     write reg (%08x)
    95e0:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    95f0:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    9600:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    9610:	253c2074 000a3e64 6b636f53 25207465     t <%d>..Socket %
    9620:	65732064 6f697373 4449206e 25203d20     d session ID = %
    9630:	000a0d64                                d...

00009634 <_tcc_intflag>:
    9634:	00000001 00000002 00000004 00000008     ................
    9644:	00001000 00002000 00004000 00008000     ..... ...@......
    9654:	00010000 00020000 00040000 00080000     ................
    9664:	31463123 00000000 30463123 00000000     #1F1....#1F0....
    9674:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    9684:	42001800 42001c00 000048fe 000048fa     ...B...B.H...H..
    9694:	000048fa 0000495c 0000495c 00004912     .H..\I..\I...I..
    96a4:	00004904 00004918 0000494a 00004ae0     .I...I..JI...J..
    96b4:	00004ac0 00004ac0 00004b4c 00004ad2     .J...J..LK...J..
    96c4:	00004aee 00004ac4 00004afc 00004b3c     .J...J...J..<K..
    96d4:	42002c00 42003000 42003400 00005c46     .,.B.0.B.4.BF\..
    96e4:	00005c8c 00005c20 00005ca8 00005c20     .\.. \...\.. \..
    96f4:	00005c18 00005c5a 00005c20 00005c20     .\..Z\.. \.. \..
    9704:	00005c20 00005c20 00005c20 00005bce      \.. \.. \...[..
    9714:	00005c20 00005c20 00005c20 00005c20      \.. \.. \.. \..
    9724:	00005c20 00005c20 00005ce6 00005c20      \.. \...\.. \..
    9734:	00005c20 00005d2a 00005c8c 00005c20      \..*]...\.. \..
    9744:	00005ca8 00005c20 00005c18 00005c5a     .\.. \...\..Z\..
    9754:	00005c20 00005c20 00005c20 00005c20      \.. \.. \.. \..
    9764:	00005c20 00005bce 00005c20 00005c20      \...[.. \.. \..
    9774:	00005c20 00005c20 00005c20 00005c20      \.. \.. \.. \..
    9784:	00005ce6 00005c20 00005c20 00005d2a     .\.. \.. \..*]..

00009794 <tx_pwr_table>:
    9794:	03030304 00010203 fcfdfeff eff4f8fa     ................
    97a4:	000066e4 000066d0 000066e0 000066d4     .f...f...f...f..
    97b4:	000066e0 000066d8 000066e0 000066dc     .f...f...f...f..

000097c4 <tc_interrupt_vectors.11908>:
    97c4:	00141312 00006e98 00006dd0 00006e06     .....n...m...n..
    97d4:	00006e98 00006e3e 00006e8e 00006e9a     .n..>n...n...n..
    97e4:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
    97f4:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
    9804:	0d296425 0000000a 6e69616d 6166203a     %d).....main: fa
    9814:	64656c69 206f7420 61657263 54206574     iled to create T
    9824:	73205043 65767265 6f732072 74656b63     CP server socket
    9834:	72726520 0d21726f 00000000 6b636f73      error!.....sock
    9844:	635f7465 62203a62 20646e69 63637573     et_cb: bind succ
    9854:	21737365 0000000d 6b636f73 635f7465     ess!....socket_c
    9864:	62203a62 20646e69 6f727265 000d2172     b: bind error!..
    9874:	6b636f73 635f7465 6c203a62 65747369     socket_cb: liste
    9884:	7573206e 73656363 000d2173 6b636f73     n success!..sock
    9894:	635f7465 6c203a62 65747369 7265206e     et_cb: listen er
    98a4:	21726f72 0000000d 6b636f73 635f7465     ror!....socket_c
    98b4:	61203a62 70656363 72652074 21726f72     b: accept error!
    98c4:	0000000d 6b636f73 635f7465 63203a62     ....socket_cb: c
    98d4:	656e6e6f 65207463 726f7272 00000d21     onnect error!...
    98e4:	6b636f73 635f7465 72203a62 20766365     socket_cb: recv 
    98f4:	6f727265 000d2172                       error!..

000098fc <tc_interrupt_vectors.13045>:
    98fc:	00141312 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
    990c:	4649575f 45525f49 435f5053 535f4e4f     _WIFI_RESP_CON_S
    991c:	45544154 4148435f 4445474e 4f43203a     TATE_CHANGED: CO
    992c:	43454e4e 0d444554 00000000 69666977     NNECTED.....wifi
    993c:	3a62635f 4d324d20 4649575f 45525f49     _cb: M2M_WIFI_RE
    994c:	435f5053 535f4e4f 45544154 4148435f     SP_CON_STATE_CHA
    995c:	4445474e 4944203a 4e4f4353 5443454e     NGED: DISCONNECT
    996c:	000d4445 34333231 38373635 00000000     ED..12345678....
    997c:	686e7573 325f7473 4847342e 0000007a     sunhst_2.4GHz...
    998c:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
    999c:	45525f49 48445f51 435f5043 3a464e4f     I_REQ_DHCP_CONF:
    99ac:	20504920 25207369 75252e75 2e75252e      IP is %u.%u.%u.
    99bc:	0a0d7525 00000000                       %u......

000099c4 <_global_impure_ptr>:
    99c4:	20000014                                ... 

000099c8 <__sf_fake_stderr>:
	...

000099e8 <__sf_fake_stdin>:
	...

00009a08 <__sf_fake_stdout>:
	...
    9a28:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    9a38:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    9a48:	31300046 35343332 39383736 64636261     F.0123456789abcd
    9a58:	00006665                                ef..

00009a5c <_init>:
    9a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a5e:	46c0      	nop			; (mov r8, r8)
    9a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9a62:	bc08      	pop	{r3}
    9a64:	469e      	mov	lr, r3
    9a66:	4770      	bx	lr

00009a68 <__init_array_start>:
    9a68:	000000dd 	.word	0x000000dd

00009a6c <_fini>:
    9a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a6e:	46c0      	nop			; (mov r8, r8)
    9a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9a72:	bc08      	pop	{r3}
    9a74:	469e      	mov	lr, r3
    9a76:	4770      	bx	lr

00009a78 <__fini_array_start>:
    9a78:	000000b5 	.word	0x000000b5
