
output_pack_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2a  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a9  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000474  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007f72  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024e  00000000  00000000  00009aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00009d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000005de  00000000  00000000  00009d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	67 d0       	rcall	.+206    	; 0x178 <main>
  aa:	ae c0       	rjmp	.+348    	; 0x208 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <TX0_CH>:

// 송신 1바이트
void TX0_CH(char ch)
{
//	TX_En;
	UDR0=ch;
  ae:	8c b9       	out	0x0c, r24	; 12
	while(!(UCSR0A&0x40));
  b0:	5e 9b       	sbis	0x0b, 6	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <TX0_CH+0x2>
	UCSR0A|=0x40;
  b4:	5e 9a       	sbi	0x0b, 6	; 11
  b6:	08 95       	ret

000000b8 <TX0_STR>:
//	RX_En;
}

// 송신 문자열
void TX0_STR(char *str)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	ec 01       	movw	r28, r24
	while(*str)TX0_CH(*str++);
  be:	88 81       	ld	r24, Y
  c0:	88 23       	and	r24, r24
  c2:	29 f0       	breq	.+10     	; 0xce <TX0_STR+0x16>
  c4:	21 96       	adiw	r28, 0x01	; 1
  c6:	f3 df       	rcall	.-26     	; 0xae <TX0_CH>
  c8:	89 91       	ld	r24, Y+
  ca:	81 11       	cpse	r24, r1
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <TX0_STR+0xe>
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <__vector_18>:

// 수신 인터럽트
ISR(USART0_RX_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0b b6       	in	r0, 0x3b	; 59
  e0:	0f 92       	push	r0
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	rx_ch=UDR0;
  fa:	8c b1       	in	r24, 0x0c	; 12
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	if(rx_ch=='a')
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	81 36       	cpi	r24, 0x61	; 97
 106:	29 f4       	brne	.+10     	; 0x112 <__vector_18+0x3e>
	{
		sol1B_On;
 108:	c1 9a       	sbi	0x18, 1	; 24
		TX0_CH(rx_ch);
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	cf df       	rcall	.-98     	; 0xae <TX0_CH>
 110:	08 c0       	rjmp	.+16     	; 0x122 <__vector_18+0x4e>
	}
	else if(rx_ch=='b')
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	82 36       	cpi	r24, 0x62	; 98
 118:	21 f4       	brne	.+8      	; 0x122 <__vector_18+0x4e>
	{
		sol1B_Off;
 11a:	c1 98       	cbi	0x18, 1	; 24
		TX0_CH(rx_ch);
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	c6 df       	rcall	.-116    	; 0xae <TX0_CH>
	}
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0b be       	out	0x3b, r0	; 59
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <usart_init>:

void usart_init(void)
{
	UCSR0A=0; 
 148:	1b b8       	out	0x0b, r1	; 11
	UCSR0B=0x98; 
 14a:	88 e9       	ldi	r24, 0x98	; 152
 14c:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=6;
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H=0;
 154:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=103;	// 보오우레이트 9600 설정
 158:	87 e6       	ldi	r24, 0x67	; 103
 15a:	89 b9       	out	0x09, r24	; 9
 15c:	08 95       	ret

0000015e <port_init>:
}

void port_init(void)
{
	DDRA=0xFF;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
 162:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
 164:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;
 166:	81 bb       	out	0x11, r24	; 17
	DDRE=0x06;
 168:	96 e0       	ldi	r25, 0x06	; 6
 16a:	92 b9       	out	0x02, r25	; 2
	
	PORTA=0xFF;
 16c:	8b bb       	out	0x1b, r24	; 27
	PORTB=0xFF;
 16e:	88 bb       	out	0x18, r24	; 24
	PORTC=0xFF;
 170:	85 bb       	out	0x15, r24	; 21
	PORTD=0xFF;
 172:	82 bb       	out	0x12, r24	; 18
	RX_En; // RS485 수신 대기
 174:	1a 98       	cbi	0x03, 2	; 3
 176:	08 95       	ret

00000178 <main>:
ISR(USART0_RX_vect);

volatile unsigned char rx_ch;

int main (void)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	29 97       	sbiw	r28, 0x09	; 9
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	char gUartTxBuffer[9] ={0x02,0x50,'A','1','0','0','0',0x30};
 18c:	fe 01       	movw	r30, r28
 18e:	31 96       	adiw	r30, 0x01	; 1
 190:	89 e0       	ldi	r24, 0x09	; 9
 192:	df 01       	movw	r26, r30
 194:	1d 92       	st	X+, r1
 196:	8a 95       	dec	r24
 198:	e9 f7       	brne	.-6      	; 0x194 <main+0x1c>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	89 83       	std	Y+1, r24	; 0x01
 19e:	80 e5       	ldi	r24, 0x50	; 80
 1a0:	8a 83       	std	Y+2, r24	; 0x02
 1a2:	81 e4       	ldi	r24, 0x41	; 65
 1a4:	8b 83       	std	Y+3, r24	; 0x03
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	8c 83       	std	Y+4, r24	; 0x04
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	8d 83       	std	Y+5, r24	; 0x05
 1ae:	8e 83       	std	Y+6, r24	; 0x06
 1b0:	8f 83       	std	Y+7, r24	; 0x07
 1b2:	88 87       	std	Y+8, r24	; 0x08
	cli();	// 글로벌 인터럽트 디세이블
 1b4:	f8 94       	cli
	
	/* Insert system clock initialization code here (sysclk_init()). */	
	port_init();
 1b6:	d3 df       	rcall	.-90     	; 0x15e <port_init>
	usart_init();
 1b8:	c7 df       	rcall	.-114    	; 0x148 <usart_init>
 1ba:	1f ef       	ldi	r17, 0xFF	; 255
		PORTA = 0;
		PORTB = 0;
		PORTC = 0;
		PORTD = 0;
		_delay_ms(2000);
		PORTA = 0xFF;
 1bc:	1b ba       	out	0x1b, r1	; 27
		_delay_ms(250);
		sol1A_Off;
		_delay_ms(250);
*/		

		PORTA = 0;
 1be:	18 ba       	out	0x18, r1	; 24
		PORTB = 0;
 1c0:	15 ba       	out	0x15, r1	; 21
		PORTC = 0;
 1c2:	12 ba       	out	0x12, r1	; 18
		PORTD = 0;
 1c4:	bf ef       	ldi	r27, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	27 ea       	ldi	r18, 0xA7	; 167
 1c8:	81 e6       	ldi	r24, 0x61	; 97
 1ca:	b1 50       	subi	r27, 0x01	; 1
 1cc:	20 40       	sbci	r18, 0x00	; 0
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x52>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x5c>
 1d4:	00 00       	nop
 1d6:	1b bb       	out	0x1b, r17	; 27
		_delay_ms(2000);
		PORTA = 0xFF;
 1d8:	18 bb       	out	0x18, r17	; 24
		PORTB = 0xFF;
 1da:	15 bb       	out	0x15, r17	; 21
		PORTC = 0xFF;
 1dc:	12 bb       	out	0x12, r17	; 18
		PORTD = 0xFF;
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	a7 ea       	ldi	r26, 0xA7	; 167
 1e2:	b1 e6       	ldi	r27, 0x61	; 97
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	a0 40       	sbci	r26, 0x00	; 0
 1e8:	b0 40       	sbci	r27, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x6c>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x76>
 1ee:	00 00       	nop
 1f0:	1a 9a       	sbi	0x03, 2	; 3
		_delay_ms(2000);

		TX_En;
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9c e9       	ldi	r25, 0x9C	; 156
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x7e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x84>
 1fc:	00 00       	nop
 1fe:	ce 01       	movw	r24, r28
		_delay_ms(10);		
		TX0_STR(gUartTxBuffer);
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	5a df       	rcall	.-332    	; 0xb8 <TX0_STR>
 204:	1a 98       	cbi	0x03, 2	; 3
		RX_En;
 206:	da cf       	rjmp	.-76     	; 0x1bc <main+0x44>

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
